
6b9131d94ed31f838b1820ee67f068c4741b69d5c655587c89c9477986bd270f.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	cmp    BYTE PTR [rdx+0x1],ah
 1001006:	add    BYTE PTR [rax],al
 1001008:	push   rax
 1001009:	movabs ds:0xa260000000000001,al
 1001012:	add    DWORD PTR [rax],eax
 1001014:	add    BYTE PTR [rax],al
 1001016:	add    BYTE PTR [rax],al
 1001018:	js     0x1000fbc
 100101a:	add    DWORD PTR [rax],eax
 100101c:	add    BYTE PTR [rax],al
 100101e:	add    BYTE PTR [rax],al
 1001020:	xchg   esi,eax
 1001021:	movabs ds:0xa2b6000000000001,al
 100102a:	add    DWORD PTR [rax],eax
 100102c:	add    BYTE PTR [rax],al
 100102e:	add    BYTE PTR [rax],al
 1001030:	(bad)  
 1001031:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1001032:	add    DWORD PTR [rax],eax
 1001034:	add    BYTE PTR [rax],al
 1001036:	add    BYTE PTR [rax],al
 1001038:	mov    al,0xa7
 100103a:	add    DWORD PTR [rax],eax
 100103c:	add    BYTE PTR [rax],al
 100103e:	add    BYTE PTR [rax],al
 1001040:	xchg   edx,eax
 1001041:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1001042:	add    DWORD PTR [rax],eax
 1001044:	add    BYTE PTR [rax],al
 1001046:	add    BYTE PTR [rax],al
 1001048:	jbe    0x1000ff1
 100104a:	add    DWORD PTR [rax],eax
 100104c:	add    BYTE PTR [rax],al
 100104e:	add    BYTE PTR [rax],al
 1001050:	push   rsi
 1001051:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1001052:	add    DWORD PTR [rax],eax
 1001054:	add    BYTE PTR [rax],al
 1001056:	add    BYTE PTR [rax],al
 1001058:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100105a:	add    DWORD PTR [rax],eax
 100105c:	add    BYTE PTR [rax],al
 100105e:	add    BYTE PTR [rax],al
 1001060:	cmps   DWORD PTR es:[rsi],DWORD PTR es:[rdi]
 1001062:	add    DWORD PTR [rax],eax
 1001064:	add    BYTE PTR [rax],al
 1001066:	add    BYTE PTR [rax],al
 1001068:	sbb    al,0xa7
 100106a:	add    DWORD PTR [rax],eax
 100106c:	add    BYTE PTR [rax],al
 100106e:	add    BYTE PTR [rax],al
 1001070:	adc    ah,BYTE PTR [rdi+0x1]
 1001076:	add    BYTE PTR [rax],al
 1001078:	(bad)  
 1001079:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100107a:	add    DWORD PTR [rax],eax
 100107c:	add    BYTE PTR [rax],al
 100107e:	add    BYTE PTR [rax],al
 1001080:	out    dx,al
 1001081:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1001082:	add    DWORD PTR [rax],eax
 1001084:	add    BYTE PTR [rax],al
 1001086:	add    BYTE PTR [rax],al
 1001088:	in     al,0xa6
 100108a:	add    DWORD PTR [rax],eax
 100108c:	add    BYTE PTR [rax],al
 100108e:	add    BYTE PTR [rax],al
 1001090:	(bad)  
 1001091:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1001092:	add    DWORD PTR [rax],eax
 1001094:	add    BYTE PTR [rax],al
 1001096:	add    BYTE PTR [rax],al
 1001098:	shl    BYTE PTR [rsi+0x1],0x0
 100109f:	add    BYTE PTR [rax+0x1a6],dh
 10010a5:	add    BYTE PTR [rax],al
 10010a7:	add    BYTE PTR [rdx+0x1a6],ah
	...
 10010b5:	add    BYTE PTR [rax],al
 10010b7:	add    BYTE PTR [rbx+rbp*4+0x1],ch
 10010bb:	add    BYTE PTR [rax],al
 10010bd:	add    BYTE PTR [rax],al
 10010bf:	add    BYTE PTR [rdx-0x55],bl
 10010c2:	add    DWORD PTR [rax],eax
 10010c4:	add    BYTE PTR [rax],al
 10010c6:	add    BYTE PTR [rax],al
 10010c8:	stos   QWORD PTR es:[rdi],rax
 10010ca:	add    DWORD PTR [rax],eax
 10010cc:	add    BYTE PTR [rax],al
 10010ce:	add    BYTE PTR [rax],al
 10010d0:	xor    ch,BYTE PTR [rbx+0x1]
 10010d6:	add    BYTE PTR [rax],al
 10010d8:	and    ch,BYTE PTR [rbx+0x1]
 10010de:	add    BYTE PTR [rax],al
 10010e0:	or     ch,BYTE PTR [rbx+0x1]
 10010e6:	add    BYTE PTR [rax],al
 10010e8:	hlt    
 10010e9:	stos   BYTE PTR es:[rdi],al
 10010ea:	add    DWORD PTR [rax],eax
 10010ec:	add    BYTE PTR [rax],al
 10010ee:	add    BYTE PTR [rax],al
 10010f0:	sub    BYTE PTR [rbx+0x1],0x0
 10010f7:	add    al,dl
 10010f9:	stos   BYTE PTR es:[rdi],al
 10010fa:	add    DWORD PTR [rax],eax
 10010fc:	add    BYTE PTR [rax],al
 10010fe:	add    BYTE PTR [rax],al
 1001100:	ret    0x1aa
 1001103:	add    BYTE PTR [rax],al
 1001105:	add    BYTE PTR [rax],al
 1001107:	add    BYTE PTR [rdx+0x1aa],dh
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    BYTE PTR [rdx+0x1aa],ah
 1001115:	add    BYTE PTR [rax],al
 1001117:	add    BYTE PTR [rsi+0x1aa],dl
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    BYTE PTR [rdx+0x1aa],cl
 1001125:	add    BYTE PTR [rax],al
 1001127:	add    BYTE PTR [rdx+rbp*4+0x1],bh
 100112b:	add    BYTE PTR [rax],al
 100112d:	add    BYTE PTR [rax],al
 100112f:	add    ah,ah
 1001131:	stos   BYTE PTR es:[rdi],al
 1001132:	add    DWORD PTR [rax],eax
 1001134:	add    BYTE PTR [rax],al
 1001136:	add    BYTE PTR [rax],al
 1001138:	(bad)  
 1001139:	test   eax,0x1
 100113e:	add    BYTE PTR [rax],al
 1001140:	(bad)  
 1001141:	test   eax,0x1
 1001146:	add    BYTE PTR [rax],al
 1001148:	retf   0x1a9
 100114b:	add    BYTE PTR [rax],al
 100114d:	add    BYTE PTR [rax],al
 100114f:	add    BYTE PTR [rcx+rbp*4+0x1],bh
 1001156:	add    BYTE PTR [rax],al
 1001158:	scas   al,BYTE PTR es:[rdi]
 1001159:	test   eax,0x1
 100115e:	add    BYTE PTR [rax],al
 1001160:	cwde   
 1001161:	test   eax,0x1
 1001166:	add    BYTE PTR [rax],al
 1001168:	mov    BYTE PTR [rcx+0x1],ch
 100116e:	add    BYTE PTR [rax],al
 1001170:	je     0x100111b
 1001172:	add    DWORD PTR [rax],eax
 1001174:	add    BYTE PTR [rax],al
 1001176:	add    BYTE PTR [rax],al
 1001178:	(bad)  
 1001179:	test   eax,0x1
 100117e:	add    BYTE PTR [rax],al
 1001180:	push   rsp
 1001181:	test   eax,0x1
 1001186:	add    BYTE PTR [rax],al
 1001188:	rex.R test eax,0x1
 100118e:	add    BYTE PTR [rax],al
 1001190:	xor    al,0xa9
 1001192:	add    DWORD PTR [rax],eax
 1001194:	add    BYTE PTR [rax],al
 1001196:	add    BYTE PTR [rax],al
 1001198:	es test eax,0x1
 100119e:	add    BYTE PTR [rax],al
 10011a0:	(bad)  
 10011a1:	test   eax,0x1
 10011a6:	add    BYTE PTR [rax],al
 10011a8:	imul   BYTE PTR [rax+0x1]
 10011ae:	add    BYTE PTR [rax],al
 10011b0:	fisubr DWORD PTR [rax+0x1]
 10011b6:	add    BYTE PTR [rax],al
 10011b8:	shr    BYTE PTR [rax+0x1],0x0
 10011bf:	add    BYTE PTR [rdx+0x1a8],ch
 10011c5:	add    BYTE PTR [rax],al
 10011c7:	add    BYTE PTR [rdx+0x1a8],bl
 10011cd:	add    BYTE PTR [rax],al
 10011cf:	add    BYTE PTR [rax+0x1a8],al
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    BYTE PTR [rax-0x58],dh
 10011da:	add    DWORD PTR [rax],eax
 10011dc:	add    BYTE PTR [rax],al
 10011de:	add    BYTE PTR [rax],al
 10011e0:	pop    rsp
 10011e1:	test   al,0x1
 10011e3:	add    BYTE PTR [rax],al
 10011e5:	add    BYTE PTR [rax],al
 10011e7:	add    BYTE PTR [rsi],bh
 10011e9:	test   al,0x1
 10011eb:	add    BYTE PTR [rax],al
 10011ed:	add    BYTE PTR [rax],al
 10011ef:	add    BYTE PTR [rdx],ah
 10011f1:	test   al,0x1
 10011f3:	add    BYTE PTR [rax],al
 10011f5:	add    BYTE PTR [rax],al
 10011f7:	add    BYTE PTR [rsi],cl
 10011f9:	test   al,0x1
 10011fb:	add    BYTE PTR [rax],al
 10011fd:	add    BYTE PTR [rax],al
 10011ff:	add    dl,bh
 1001201:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1001202:	add    DWORD PTR [rax],eax
 1001204:	add    BYTE PTR [rax],al
 1001206:	add    BYTE PTR [rax],al
 1001208:	(bad)  
 1001209:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100120a:	add    DWORD PTR [rax],eax
 100120c:	add    BYTE PTR [rax],al
 100120e:	add    BYTE PTR [rax],al
 1001210:	loop   0x10011b9
 1001212:	add    DWORD PTR [rax],eax
 1001214:	add    BYTE PTR [rax],al
 1001216:	add    BYTE PTR [rax],al
 1001218:	fsub   DWORD PTR [rdx+0x1]
 100121e:	add    BYTE PTR [rax],al
 1001220:	in     al,dx
 1001221:	movabs ds:0xa3ca000000000001,al
 100122a:	add    DWORD PTR [rax],eax
 100122c:	add    BYTE PTR [rax],al
 100122e:	add    BYTE PTR [rax],al
 1001230:	mov    esi,0x1a3
 1001235:	add    BYTE PTR [rax],al
 1001237:	add    BYTE PTR [rsi+0x1a3],ch
 100123d:	add    BYTE PTR [rax],al
 100123f:	add    BYTE PTR [rax+0x1a3],ah
 1001245:	add    BYTE PTR [rax],al
 1001247:	add    BYTE PTR [rdx+0x1a3],dl
 100124d:	add    BYTE PTR [rax],al
 100124f:	add    BYTE PTR [rbx+riz*4+0x1],bh
 1001253:	add    BYTE PTR [rax],al
 1001255:	add    BYTE PTR [rax],al
 1001257:	add    BYTE PTR [rsi-0x5d],ah
 100125a:	add    DWORD PTR [rax],eax
 100125c:	add    BYTE PTR [rax],al
 100125e:	add    BYTE PTR [rax],al
 1001260:	push   rsi
 1001261:	movabs ds:0xa346000000000001,eax
 100126a:	add    DWORD PTR [rax],eax
 100126c:	add    BYTE PTR [rax],al
 100126e:	add    BYTE PTR [rax],al
 1001270:	cmp    BYTE PTR [rbx+0x1],ah
 1001276:	add    BYTE PTR [rax],al
 1001278:	sub    BYTE PTR [rbx+0x1],ah
 100127e:	add    BYTE PTR [rax],al
 1001280:	adc    BYTE PTR [rbx+0x1],ah
 1001286:	add    BYTE PTR [rax],al
 1001288:	(bad)  
 1001289:	movabs ds:0x1,al
 1001292:	add    BYTE PTR [rax],al
 1001294:	add    BYTE PTR [rax],al
 1001296:	add    BYTE PTR [rax],al
 1001298:	(bad)  
 1001299:	movabs ds:0xa3fa000000000001,eax
 10012a2:	add    DWORD PTR [rax],eax
 10012a4:	add    BYTE PTR [rax],al
 10012a6:	add    BYTE PTR [rax],al
 10012a8:	add    ah,BYTE PTR [rcx+rax*1+0x0]
 10012af:	add    BYTE PTR [rax],dl
 10012b1:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10012b2:	add    DWORD PTR [rax],eax
 10012b4:	add    BYTE PTR [rax],al
 10012b6:	add    BYTE PTR [rax],al
 10012b8:	push   rsp
 10012b9:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10012ba:	add    DWORD PTR [rax],eax
 10012bc:	add    BYTE PTR [rax],al
 10012be:	add    BYTE PTR [rax],al
 10012c0:	pop    rsi
 10012c1:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10012c2:	add    DWORD PTR [rax],eax
 10012c4:	add    BYTE PTR [rax],al
 10012c6:	add    BYTE PTR [rax],al
 10012c8:	push   0x1a4
 10012cd:	add    BYTE PTR [rax],al
 10012cf:	add    BYTE PTR [rsp+riz*4+0x1],dh
 10012d3:	add    BYTE PTR [rax],al
 10012d5:	add    BYTE PTR [rax],al
 10012d7:	add    BYTE PTR [rdx+0x1a4],al
 10012dd:	add    BYTE PTR [rax],al
 10012df:	add    BYTE PTR [rdx+0x1a4],dl
 10012e5:	add    BYTE PTR [rax],al
 10012e7:	add    BYTE PTR [rdx+0x1a4],ch
 10012ed:	add    BYTE PTR [rax],al
 10012ef:	add    BYTE PTR [rax+0x1a4],bh
 10012f5:	add    BYTE PTR [rax],al
 10012f7:	add    al,al
 10012f9:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10012fa:	add    DWORD PTR [rax],eax
 10012fc:	add    BYTE PTR [rax],al
 10012fe:	add    BYTE PTR [rax],al
 1001300:	retf   0x1a4
 1001303:	add    BYTE PTR [rax],al
 1001305:	add    BYTE PTR [rax],al
 1001307:	add    dl,dl
 1001309:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100130a:	add    DWORD PTR [rax],eax
 100130c:	add    BYTE PTR [rax],al
 100130e:	add    BYTE PTR [rax],al
 1001310:	fisub  WORD PTR [rcx+rax*1+0x0]
 1001317:	add    dl,ch
 1001319:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100131a:	add    DWORD PTR [rax],eax
 100131c:	add    BYTE PTR [rax],al
 100131e:	add    BYTE PTR [rax],al
 1001320:	clc    
 1001321:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001322:	add    DWORD PTR [rax],eax
 1001324:	add    BYTE PTR [rax],al
 1001326:	add    BYTE PTR [rax],al
 1001328:	(bad)  
 1001329:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100132a:	add    DWORD PTR [rax],eax
 100132c:	add    BYTE PTR [rax],al
 100132e:	add    BYTE PTR [rax],al
 1001330:	and    ah,BYTE PTR [rbp+0x1]
 1001336:	add    BYTE PTR [rax],al
 1001338:	movs   DWORD PTR es:[rdi],DWORD PTR cs:[rsi]
 100133a:	add    DWORD PTR [rax],eax
 100133c:	add    BYTE PTR [rax],al
 100133e:	add    BYTE PTR [rax],al
 1001340:	cmp    BYTE PTR [rbp+0x1],ah
 1001346:	add    BYTE PTR [rax],al
 1001348:	pop    rax
 1001349:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100134a:	add    DWORD PTR [rax],eax
 100134c:	add    BYTE PTR [rax],al
 100134e:	add    BYTE PTR [rax],al
 1001350:	outs   dx,BYTE PTR ds:[rsi]
 1001351:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1001352:	add    DWORD PTR [rax],eax
 1001354:	add    BYTE PTR [rax],al
 1001356:	add    BYTE PTR [rax],al
 1001358:	(bad)  
 1001359:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100135a:	add    DWORD PTR [rax],eax
 100135c:	add    BYTE PTR [rax],al
 100135e:	add    BYTE PTR [rax],al
 1001360:	mov    WORD PTR [rbp+0x1],fs
 1001366:	add    BYTE PTR [rax],al
 1001368:	(bad)  
 1001369:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100136a:	add    DWORD PTR [rax],eax
 100136c:	add    BYTE PTR [rax],al
 100136e:	add    BYTE PTR [rax],al
 1001370:	movabs ds:0xac000000000001a5,al
 1001379:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100137a:	add    DWORD PTR [rax],eax
 100137c:	add    BYTE PTR [rax],al
 100137e:	add    BYTE PTR [rax],al
 1001380:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001381:	stos   DWORD PTR es:[rdi],eax
 1001382:	add    DWORD PTR [rax],eax
 1001384:	add    BYTE PTR [rax],al
 1001386:	add    BYTE PTR [rax],al
 1001388:	(bad)  
 1001389:	test   eax,0x1
 100138e:	add    BYTE PTR [rax],al
 1001390:	(bad)  
 1001391:	stos   BYTE PTR es:[rdi],al
 1001392:	add    DWORD PTR [rax],eax
 1001394:	add    BYTE PTR [rax],al
 1001396:	add    BYTE PTR [rax],al
 1001398:	sbb    BYTE PTR [rdx+0x1],ch
 100139e:	add    BYTE PTR [rax],al
 10013a0:	cs stos BYTE PTR es:[rdi],al
 10013a2:	add    DWORD PTR [rax],eax
 10013a4:	add    BYTE PTR [rax],al
 10013a6:	add    BYTE PTR [rax],al
 10013a8:	rex.R stos BYTE PTR es:[rdi],al
 10013aa:	add    DWORD PTR [rax],eax
 10013ac:	add    BYTE PTR [rax],al
 10013ae:	add    BYTE PTR [rax],al
 10013b0:	rex.WRX stos BYTE PTR es:[rdi],al
 10013b2:	add    DWORD PTR [rax],eax
 10013b4:	add    BYTE PTR [rax],al
 10013b6:	add    BYTE PTR [rax],al
 10013b8:	pop    rdx
 10013b9:	stos   BYTE PTR es:[rdi],al
 10013ba:	add    DWORD PTR [rax],eax
 10013bc:	add    BYTE PTR [rax],al
 10013be:	add    BYTE PTR [rax],al
 10013c0:	fs stos BYTE PTR es:[rdi],al
 10013c2:	add    DWORD PTR [rax],eax
 10013c4:	add    BYTE PTR [rax],al
 10013c6:	add    BYTE PTR [rax],al
 10013c8:	xchg   esp,eax
 10013c9:	stos   DWORD PTR es:[rdi],eax
 10013ca:	add    DWORD PTR [rax],eax
 10013cc:	add    BYTE PTR [rax],al
 10013ce:	add    BYTE PTR [rax],al
 10013d0:	mov    ah,0xab
 10013d2:	add    DWORD PTR [rax],eax
	...
 10013e0:	outs   dx,BYTE PTR ds:[rsi]
 10013e1:	stos   BYTE PTR es:[rdi],al
 10013e2:	add    DWORD PTR [rax],eax
	...
 10013f0:	push   rsi
 10013f1:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10013f2:	add    DWORD PTR [rax],eax
 10013f4:	add    BYTE PTR [rax],al
 10013f6:	add    BYTE PTR [rax],al
 10013f8:	test   BYTE PTR [rsi+0x1],ah
 10013fe:	add    BYTE PTR [rax],al
 1001400:	push   0xffffffffffffffa6
 1001402:	add    DWORD PTR [rax],eax
	...
 1001410:	cmps   BYTE PTR cs:[rsi],BYTE PTR es:[rdi]
 1001412:	add    DWORD PTR [rax],eax
 1001414:	add    BYTE PTR [rax],al
 1001416:	add    BYTE PTR [rax],al
 1001418:	(bad)  
 1001419:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100141a:	add    DWORD PTR [rax],eax
 100141c:	add    BYTE PTR [rax],al
 100141e:	add    BYTE PTR [rax],al
 1001420:	add    al,0xa6
 1001422:	add    DWORD PTR [rax],eax
 1001424:	add    BYTE PTR [rax],al
 1001426:	add    BYTE PTR [rax],al
 1001428:	repnz movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100142a:	add    DWORD PTR [rax],eax
 100142c:	add    BYTE PTR [rax],al
 100142e:	add    BYTE PTR [rax],al
 1001430:	loop   0x10013d7
 1001432:	add    DWORD PTR [rax],eax
	...
 1001448:	push   rsp
 1001449:	(bad)  
 100144a:	add    BYTE PTR [rcx],al
 100144c:	add    BYTE PTR [rax],al
 100144e:	add    BYTE PTR [rax],al
 1001450:	movabs al,ds:0x4000000000010167
 1001459:	add    DWORD PTR [ecx],eax
	...
 1001470:	rex.W pushf 
 1001472:	add    BYTE PTR [rcx],al
 1001474:	add    BYTE PTR [rax],al
 1001476:	add    BYTE PTR [rax],al
 1001478:	cwde   
 1001479:	lahf   
 100147a:	add    BYTE PTR [rcx],al
	...
 1001494:	adc    ch,bl
 1001496:	xor    eax,0x4f
 100149b:	add    BYTE PTR [rdx],al
 100149d:	add    BYTE PTR [rax],al
 100149f:	add    BYTE PTR [rsi],ah
 10014a1:	add    BYTE PTR [rax],al
 10014a3:	add    BYTE PTR [rax-0x57ffffa2],ch
 10014a9:	push   rdx
 10014aa:	add    BYTE PTR [rax],al
 10014ac:	add    BYTE PTR [rax],al
 10014ae:	add    BYTE PTR [rax],al
 10014b0:	lock mov cl,0x1
 10014b3:	add    DWORD PTR [rax],eax
 10014b5:	add    BYTE PTR [rax],al
 10014b7:	add    BYTE PTR [rax+0x101b2],dl
 10014bd:	add    BYTE PTR [rax],al
 10014bf:	add    BYTE PTR [rax],dh
 10014c1:	pop    rdi
 10014c2:	add    BYTE PTR [rcx],al
 10014c4:	add    BYTE PTR [rax],al
 10014c6:	add    BYTE PTR [rax],al
 10014c8:	enter  0x9e,0x1
 10014cc:	add    BYTE PTR [rax],al
 10014ce:	add    BYTE PTR [rax],al
 10014d0:	push   rdi
 10014d1:	add    BYTE PTR [rcx+0x0],cl
 10014d4:	add    BYTE PTR [rdi+0x0],r10b
 10014d8:	push   rdx
 10014d9:	add    BYTE PTR [rcx+0x0],cl
 10014dc:	push   rsp
 10014dd:	add    BYTE PTR [rbp+0x0],al
 10014e0:	push   rdx
	...
 10015cd:	add    BYTE PTR [rax],al
 10015cf:	add    BYTE PTR [rbx+0x0],dl
 10015d2:	push   rcx
 10015d3:	add    BYTE PTR [rax+rax*1+0x57],cl
 10015d7:	add    BYTE PTR [rdx+0x0],dl
 10015da:	rex.WB add BYTE PTR [r8+rax*1+0x45],dl
 10015df:	add    BYTE PTR [rdx+0x0],dl
	...
 10016ce:	add    BYTE PTR [rax],al
 10016d0:	push   rbx
 10016d1:	add    BYTE PTR [rcx+0x0],bl
 10016d4:	push   rbx
 10016d5:	add    BYTE PTR [rax+rax*1+0x45],dl
 10016d9:	add    BYTE PTR [rbp+0x0],cl
 10016dc:	pop    rsp
 10016dd:	add    BYTE PTR [rbx+0x0],al
 10016e0:	jne    0x10016e2
 10016e2:	jb     0x10016e4
 10016e4:	jb     0x10016e6
 10016e6:	add    BYTE PTR gs:[rsi+0x0],ch
 10016ea:	je     0x10016ec
 10016ec:	rex.XB add BYTE PTR [r15+0x0],bpl
 10016f0:	outs   dx,BYTE PTR ds:[rsi]
 10016f1:	add    BYTE PTR [rax+rax*1+0x72],dh
 10016f5:	add    BYTE PTR [rdi+0x0],ch
 10016f8:	ins    BYTE PTR es:[rdi],dx
 10016f9:	add    BYTE PTR [rbx+0x0],dl
 10016fc:	add    BYTE PTR gs:[rax+rax*1+0x5c],dh
 1001701:	add    BYTE PTR [rbx+0x0],dl
 1001704:	add    BYTE PTR gs:[rdx+0x0],dh
 1001708:	jbe    0x100170a
 100170a:	imul   eax,DWORD PTR [rax],0x650063
 1001710:	jae    0x1001712
 1001712:	pop    rsp
 1001713:	add    BYTE PTR [rbx+0x0],dl
 1001716:	push   rcx
 1001717:	add    BYTE PTR [rax+rax*1+0x57],cl
 100171b:	add    BYTE PTR [rdx+0x0],dl
 100171e:	rex.WB add BYTE PTR [r8+rax*1+0x45],dl
 1001723:	add    BYTE PTR [rdx+0x0],dl
 1001726:	pop    rsp
 1001727:	add    BYTE PTR [rax+rax*1+0x65],al
 100172b:	add    BYTE PTR [rdx+0x0],ah
 100172e:	jne    0x1001730
 1001730:	add    BYTE PTR [eax+eax*1+0x54],bl
 1001735:	add    BYTE PTR [rdx+0x0],dh
 1001738:	(bad)  
 1001739:	add    BYTE PTR [rbx+0x0],ah
 100173c:	imul   eax,DWORD PTR [rax],0x67006e
	...
 100174e:	add    BYTE PTR [rax],al
 1001750:	push   rbx
 1001751:	add    BYTE PTR [rcx+0x0],bl
 1001754:	push   rbx
 1001755:	add    BYTE PTR [rax+rax*1+0x45],dl
 1001759:	add    BYTE PTR [rbp+0x0],cl
 100175c:	pop    rsp
 100175d:	add    BYTE PTR [rbx+0x0],al
 1001760:	jne    0x1001762
 1001762:	jb     0x1001764
 1001764:	jb     0x1001766
 1001766:	add    BYTE PTR gs:[rsi+0x0],ch
 100176a:	je     0x100176c
 100176c:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001770:	outs   dx,BYTE PTR ds:[rsi]
 1001771:	add    BYTE PTR [rax+rax*1+0x72],dh
 1001775:	add    BYTE PTR [rdi+0x0],ch
 1001778:	ins    BYTE PTR es:[rdi],dx
 1001779:	add    BYTE PTR [rbx+0x0],dl
 100177c:	add    BYTE PTR gs:[rax+rax*1+0x5c],dh
 1001781:	add    BYTE PTR [rbx+0x0],dl
 1001784:	add    BYTE PTR gs:[rdx+0x0],dh
 1001788:	jbe    0x100178a
 100178a:	imul   eax,DWORD PTR [rax],0x650063
 1001790:	jae    0x1001792
 1001792:	pop    rsp
 1001793:	add    BYTE PTR [rdi+0x0],dl
 1001796:	rex.WB add BYTE PTR [r8+rax*1+0x57],al
 100179b:	add    BYTE PTR [rdx+0x0],dl
 100179e:	rex.WB add BYTE PTR [r8+rax*1+0x45],dl
 10017a3:	add    BYTE PTR [rdx+0x0],dl
 10017a6:	pop    rsp
 10017a7:	add    BYTE PTR [rax+rax*1+0x65],al
 10017ab:	add    BYTE PTR [rdx+0x0],ah
 10017ae:	jne    0x10017b0
 10017b0:	add    BYTE PTR [eax+eax*1+0x54],bl
 10017b5:	add    BYTE PTR [rdx+0x0],dh
 10017b8:	(bad)  
 10017b9:	add    BYTE PTR [rbx+0x0],ah
 10017bc:	imul   eax,DWORD PTR [rax],0x67006e
 10017c2:	add    BYTE PTR [rax],al
 10017c4:	add    BYTE PTR [rax],al
 10017c6:	add    BYTE PTR [rax],al
 10017c8:	push   rbx
 10017c9:	add    BYTE PTR [rcx+0x0],bl
 10017cc:	push   rbx
 10017cd:	add    BYTE PTR [rax+rax*1+0x45],dl
 10017d1:	add    BYTE PTR [rbp+0x0],cl
 10017d4:	pop    rsp
 10017d5:	add    BYTE PTR [rbx+0x0],dl
 10017d8:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 10017dd:	add    BYTE PTR [rax+0x0],dh
	...
 10017e8:	push   rbx
 10017e9:	add    BYTE PTR [rcx+0x0],bh
 10017ec:	jae    0x10017ee
 10017ee:	je     0x10017f0
 10017f0:	add    BYTE PTR gs:[rbp+0x0],ch
 10017f4:	push   rbx
 10017f5:	add    BYTE PTR [rbp+0x0],ah
 10017f8:	je     0x10017fa
 10017fa:	jne    0x10017fc
 10017fc:	jo     0x10017fe
 10017fe:	rex.WB add BYTE PTR [r14+0x0],bpl
 1001802:	push   rax
 1001803:	add    BYTE PTR [rdx+0x0],dh
 1001806:	outs   dx,DWORD PTR ds:[rsi]
 1001807:	add    BYTE PTR [rdi+0x0],ah
 100180a:	jb     0x100180c
 100180c:	add    BYTE PTR gs:[rbx+0x0],dh
 1001810:	jae    0x1001812
	...
 100181e:	add    BYTE PTR [rax],al
 1001820:	and    al,BYTE PTR [rip+0x21993]        # 0x10231b9
 1001826:	add    BYTE PTR [rax],al
 1001828:	xchg   esp,eax
 1001829:	imul   eax,DWORD PTR [rcx],0x100
 100182f:	add    BYTE PTR [rcx+rbp*2+0x60001],ah
 1001836:	add    BYTE PTR [rax],al
 1001838:	int3   
 1001839:	imul   eax,DWORD PTR [rcx],0x2000
	...
 100184f:	add    BYTE PTR [rdx],ah
 1001851:	add    eax,0x21993
 1001856:	add    BYTE PTR [rax],al
 1001858:	sbb    al,0x6a
 100185a:	add    DWORD PTR [rax],eax
 100185c:	add    DWORD PTR [rax],eax
 100185e:	add    BYTE PTR [rax],al
 1001860:	sub    al,0x6a
 1001862:	add    DWORD PTR [rax],eax
 1001864:	add    eax,0x54000000
 1001869:	push   0x1
 100186b:	add    BYTE PTR [rax],ch
	...
 100187d:	add    BYTE PTR [rax],al
 100187f:	add    BYTE PTR [rdx],ah
 1001881:	add    eax,0x21993
 1001886:	add    BYTE PTR [rax],al
 1001888:	pushf  
 1001889:	push   0x1
 100188b:	add    BYTE PTR [rcx],al
 100188d:	add    BYTE PTR [rax],al
 100188f:	add    BYTE PTR [rdx+rbp*2+0x40001],ch
 1001896:	add    BYTE PTR [rax],al
 1001898:	(bad)  
 1001899:	push   0x1
 100189b:	add    BYTE PTR [rax],ah
	...
 10018ad:	add    BYTE PTR [rax],al
 10018af:	add    BYTE PTR [rdx],ah
 10018b1:	add    eax,0x31993
 10018b6:	add    BYTE PTR [rax],al
 10018b8:	test   al,0x6b
 10018ba:	add    DWORD PTR [rax],eax
 10018bc:	add    DWORD PTR [rax],eax
 10018be:	add    BYTE PTR [rax],al
 10018c0:	shr    BYTE PTR [rbx+0x1],0x0
 10018c4:	or     BYTE PTR [rax],al
 10018c6:	add    BYTE PTR [rax],al
 10018c8:	call   0x69001a38
	...
 10018dd:	add    BYTE PTR [rax],al
 10018df:	add    BYTE PTR [rdx],ah
 10018e1:	add    eax,0x21993
 10018e6:	add    BYTE PTR [rax],al
 10018e8:	jl     0x1001957
 10018ea:	add    DWORD PTR [rax],eax
	...
 10018f4:	add    eax,0x8c000000
 10018f9:	ins    DWORD PTR es:[rdi],dx
 10018fa:	add    DWORD PTR [rax],eax
 10018fc:	xor    BYTE PTR [rax],al
	...
 100190e:	add    BYTE PTR [rax],al
 1001910:	and    al,BYTE PTR [rip+0x51993]        # 0x10532a9
 1001916:	add    BYTE PTR [rax],al
 1001918:	sbb    BYTE PTR [rsi+0x1],ch
	...
 1001923:	add    BYTE PTR [rsi],al
 1001925:	add    BYTE PTR [rax],al
 1001927:	add    BYTE PTR [rax+0x6e],al
 100192a:	add    DWORD PTR [rax],eax
 100192c:	mov    al,0x0
	...
 100193e:	add    BYTE PTR [rax],al
 1001940:	and    al,BYTE PTR [rip+0x61993]        # 0x10632d9
 1001946:	add    BYTE PTR [rax],al
 1001948:	nop
 1001949:	outs   dx,BYTE PTR ds:[rsi]
 100194a:	add    DWORD PTR [rax],eax
	...
 1001954:	(bad)  
 1001955:	add    BYTE PTR [rax],al
 1001957:	add    al,al
 1001959:	outs   dx,BYTE PTR ds:[rsi]
 100195a:	add    DWORD PTR [rax],eax
 100195c:	add    BYTE PTR [rax],al
	...
 100196f:	add    BYTE PTR [rdx],ah
 1001971:	add    eax,0x61993
 1001976:	add    BYTE PTR [rax],al
 1001978:	sbb    BYTE PTR [rdi+0x1],ch
	...
 1001983:	add    BYTE PTR [rdi],al
 1001985:	add    BYTE PTR [rax],al
 1001987:	add    BYTE PTR [rax+0x6f],cl
 100198a:	add    DWORD PTR [rax],eax
 100198c:	add    BYTE PTR [rax],al
	...
 100199f:	add    BYTE PTR [rdx],ah
 10019a1:	add    eax,0x51993
 10019a6:	add    BYTE PTR [rax],al
 10019a8:	movabs al,ds:0x16f
 10019b1:	add    BYTE PTR [rax],al
 10019b3:	add    BYTE PTR [rbx],cl
 10019b5:	add    BYTE PTR [rax],al
 10019b7:	add    al,cl
 10019b9:	outs   dx,DWORD PTR ds:[rsi]
 10019ba:	add    DWORD PTR [rax],eax
 10019bc:	add    BYTE PTR [rax],al
	...
 10019c7:	add    BYTE PTR [rbp+rbp*2+0x70],al
 10019cb:	rex.RXB
 10019cc:	gs je  0x1001a12
 10019cf:	ins    BYTE PTR es:[rdi],dx
 10019d0:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 10019d7:	outs   dx,DWORD PTR ds:[rsi]
 10019d8:	jb     0x1001a4e
 10019da:	add    BYTE PTR [rax],al
 10019dc:	add    BYTE PTR [rax],al
 10019de:	add    BYTE PTR [rax],al
 10019e0:	shl    BYTE PTR [rbp+0x100],0x0
	...
 10019ef:	add    BYTE PTR [rbp+0x0],ah
 10019f2:	cmp    al,BYTE PTR [rax]
 10019f4:	pop    rsp
 10019f5:	add    BYTE PTR [rbx+0x0],dh
 10019f8:	jno    0x10019fa
 10019fa:	ins    BYTE PTR es:[rdi],dx
 10019fb:	add    BYTE PTR [rcx],dh
 10019fd:	add    BYTE PTR [rcx],dh
 10019ff:	add    BYTE PTR [rdi+0x0],bl
 1001a02:	ins    DWORD PTR es:[rdi],dx
 1001a03:	add    BYTE PTR [rcx+0x0],ah
 1001a06:	imul   eax,DWORD PTR [rax],0x5f006e
 1001a0c:	je     0x1001a0e
 1001a0e:	pop    rsp
 1001a0f:	add    BYTE PTR [rbx+0x0],dh
 1001a12:	jno    0x1001a14
 1001a14:	ins    BYTE PTR es:[rdi],dx
 1001a15:	add    BYTE PTR [rax+rax*1+0x6e],bl
 1001a19:	add    BYTE PTR [rax+rax*1+0x64],dh
 1001a1d:	add    BYTE PTR [rdx+0x0],ah
 1001a20:	ins    DWORD PTR es:[rdi],dx
 1001a21:	add    BYTE PTR [rbx+0x0],dh
 1001a24:	pop    rsp
 1001a25:	add    BYTE PTR [rbx+0x0],dh
 1001a28:	je     0x1001a2a
 1001a2a:	outs   dx,DWORD PTR ds:[rsi]
 1001a2b:	add    BYTE PTR [rdx+0x0],dh
 1001a2e:	add    BYTE PTR gs:[rsi+0x0],ch
 1001a32:	add    BYTE PTR [eax+eax*1+0x64],bl
 1001a37:	add    BYTE PTR [rbp+0x0],ch
 1001a3a:	jne    0x1001a3c
 1001a3c:	pop    rsp
 1001a3d:	add    BYTE PTR [rax+rax*1+0x6d],ah
 1001a41:	add    BYTE PTR [rax+0x0],dh
 1001a44:	ins    BYTE PTR es:[rdi],dx
 1001a45:	add    BYTE PTR [rax+rax*1+0x5c],ah
 1001a49:	add    BYTE PTR [rbx+0x0],dh
 1001a4c:	jno    0x1001a4e
 1001a4e:	ins    BYTE PTR es:[rdi],dx
 1001a4f:	add    BYTE PTR [rdi+0x0],dh
 1001a52:	jb     0x1001a54
 1001a54:	imul   eax,DWORD PTR [rax],0x650074
 1001a5a:	jb     0x1001a5c
 1001a5c:	add    BYTE PTR cs:[rcx+0x0],bh
 1001a60:	jne    0x1001a62
 1001a62:	imul   eax,DWORD PTR [rax],0x6f
 1001a65:	add    BYTE PTR [rsi+0x0],ch
 1001a68:	pop    rsp
 1001a69:	add    BYTE PTR [rax+rax*1+0x72],dh
 1001a6d:	add    BYTE PTR [rcx+0x0],ah
 1001a70:	movsxd eax,DWORD PTR [rax]
 1001a72:	imul   eax,DWORD PTR [rax],0x67006e
 1001a78:	pop    rsp
 1001a79:	add    BYTE PTR [rcx+0x0],bh
 1001a7c:	imul   eax,DWORD PTR [rax],0x77
 1001a7f:	add    BYTE PTR [rdi+0x0],bl
 1001a82:	je     0x1001a84
 1001a84:	jb     0x1001a86
 1001a86:	(bad)  
 1001a87:	add    BYTE PTR [rbx+0x0],ah
 1001a8a:	add    BYTE PTR gs:[rsi],ch
 1001a8d:	add    BYTE PTR [rbx+0x0],ah
 1001a90:	js     0x1001a92
 1001a92:	js     0x1001a94
	...
 1001aa0:	sub    al,BYTE PTR [rax]
 1001aa2:	sub    al,BYTE PTR [rax]
 1001aa4:	sub    al,BYTE PTR [rax]
 1001aa6:	sub    al,BYTE PTR [rax]
 1001aa8:	sub    al,BYTE PTR [rax]
 1001aaa:	sub    al,BYTE PTR [rax]
 1001aac:	sub    al,BYTE PTR [rax]
 1001aae:	sub    al,BYTE PTR [rax]
 1001ab0:	sub    al,BYTE PTR [rax]
 1001ab2:	sub    al,BYTE PTR [rax]
 1001ab4:	sub    al,BYTE PTR [rax]
 1001ab6:	sub    al,BYTE PTR [rax]
 1001ab8:	sub    al,BYTE PTR [rax]
 1001aba:	sub    al,BYTE PTR [rax]
 1001abc:	sub    al,BYTE PTR [rax]
 1001abe:	sub    al,BYTE PTR [rax]
 1001ac0:	sub    al,BYTE PTR [rax]
 1001ac2:	sub    al,BYTE PTR [rax]
 1001ac4:	sub    al,BYTE PTR [rax]
 1001ac6:	sub    al,BYTE PTR [rax]
 1001ac8:	sub    al,BYTE PTR [rax]
 1001aca:	sub    al,BYTE PTR [rax]
 1001acc:	sub    al,BYTE PTR [rax]
 1001ace:	sub    al,BYTE PTR [rax]
 1001ad0:	sub    al,BYTE PTR [rax]
 1001ad2:	sub    al,BYTE PTR [rax]
 1001ad4:	sub    al,BYTE PTR [rax]
 1001ad6:	sub    al,BYTE PTR [rax]
 1001ad8:	sub    al,BYTE PTR [rax]
 1001ada:	sub    al,BYTE PTR [rax]
 1001adc:	sub    al,BYTE PTR [rax]
 1001ade:	sub    al,BYTE PTR [rax]
 1001ae0:	sub    al,BYTE PTR [rax]
 1001ae2:	sub    al,BYTE PTR [rax]
 1001ae4:	sub    al,BYTE PTR [rax]
 1001ae6:	sub    al,BYTE PTR [rax]
 1001ae8:	sub    al,BYTE PTR [rax]
 1001aea:	sub    al,BYTE PTR [rax]
 1001aec:	sub    al,BYTE PTR [rax]
 1001aee:	sub    al,BYTE PTR [rax]
 1001af0:	sub    al,BYTE PTR [rax]
 1001af2:	sub    al,BYTE PTR [rax]
 1001af4:	sub    al,BYTE PTR [rax]
 1001af6:	sub    al,BYTE PTR [rax]
 1001af8:	sub    al,BYTE PTR [rax]
 1001afa:	sub    al,BYTE PTR [rax]
 1001afc:	sub    al,BYTE PTR [rax]
 1001afe:	sub    al,BYTE PTR [rax]
 1001b00:	sub    al,BYTE PTR [rax]
 1001b02:	sub    al,BYTE PTR [rax]
 1001b04:	sub    al,BYTE PTR [rax]
 1001b06:	sub    al,BYTE PTR [rax]
 1001b08:	sub    al,BYTE PTR [rax]
 1001b0a:	sub    al,BYTE PTR [rax]
 1001b0c:	sub    al,BYTE PTR [rax]
 1001b0e:	sub    al,BYTE PTR [rax]
 1001b10:	sub    al,BYTE PTR [rax]
 1001b12:	sub    al,BYTE PTR [rax]
 1001b14:	sub    al,BYTE PTR [rax]
 1001b16:	sub    al,BYTE PTR [rax]
 1001b18:	sub    al,BYTE PTR [rax]
 1001b1a:	sub    al,BYTE PTR [rax]
 1001b1c:	sub    al,BYTE PTR [rax]
 1001b1e:	sub    al,BYTE PTR [rax]
	...
 1001b30:	sub    al,BYTE PTR [rax]
 1001b32:	sub    al,BYTE PTR [rax]
 1001b34:	and    BYTE PTR [rax],al
 1001b36:	and    BYTE PTR [rax],al
 1001b38:	and    eax,0x20007300
 1001b3d:	add    BYTE PTR [rax+rax*1+0x52],dl
 1001b41:	add    BYTE PTR [rcx+0x0],al
 1001b44:	rex.XB add BYTE PTR [r9+0x0],cl
 1001b48:	rex.WRX add BYTE PTR [rdi+0x0],r8b
 1001b4c:	and    BYTE PTR [rax],al
 1001b4e:	rex.RX add BYTE PTR [rcx+0x0],r9b
 1001b52:	rex.WRX add BYTE PTR [rcx+0x0],r9b
 1001b56:	push   rbx
 1001b57:	add    BYTE PTR [rax+0x0],cl
 1001b5a:	add    BYTE PTR [r8+rax*1+0x20],r8b
 1001b5f:	add    BYTE PTR [rip+0x50002000],ch        # 0x51003b65
 1001b65:	add    BYTE PTR [rdx+0x0],dh
 1001b68:	outs   dx,DWORD PTR ds:[rsi]
 1001b69:	add    BYTE PTR [rbx+0x0],ah
 1001b6c:	add    BYTE PTR gs:[rbx+0x0],dh
 1001b70:	jae    0x1001b72
 1001b72:	rex.WB add BYTE PTR [r8+rax*1+0x3a],spl
 1001b77:	add    BYTE PTR [rax],ah
 1001b79:	add    BYTE PTR [rax],dh
 1001b7b:	add    BYTE PTR [rax+0x0],bh
 1001b7e:	and    eax,0x2c007800
 1001b83:	add    BYTE PTR [rax],ah
 1001b85:	add    BYTE PTR [rbx+0x0],al
 1001b88:	outs   dx,DWORD PTR ds:[rsi]
 1001b89:	add    BYTE PTR [rsi+0x0],ch
 1001b8c:	je     0x1001b8e
 1001b8e:	add    BYTE PTR gs:[rax+0x0],bh
 1001b92:	je     0x1001b94
 1001b94:	rex.WB add BYTE PTR [r8+rax*1+0x3a],spl
 1001b99:	add    BYTE PTR [rax],ah
 1001b9b:	add    BYTE PTR [rax],dh
 1001b9d:	add    BYTE PTR [rax+0x0],bh
 1001ba0:	and    eax,0x7800
 1001ba5:	add    BYTE PTR [rax],al
 1001ba7:	add    BYTE PTR [rip+0x2f006400],ah        # 0x30007fad
 1001bad:	add    BYTE PTR [rip+0x2f006400],ah        # 0x30007fb3
 1001bb3:	add    BYTE PTR [rip+0x20006400],ah        # 0x21007fb9
 1001bb9:	add    BYTE PTR [rip+0x3a006400],ah        # 0x3b007fbf
 1001bbf:	add    BYTE PTR [rip+0x3a006400],ah        # 0x3b007fc5
 1001bc5:	add    BYTE PTR [rip+0x6400],ah        # 0x1007fcb
 1001bcb:	add    BYTE PTR [rax],al
 1001bcd:	add    BYTE PTR [rax],al
 1001bcf:	add    BYTE PTR [rdx],ch
 1001bd1:	add    BYTE PTR [rdx],ch
 1001bd3:	add    BYTE PTR [rax],ah
 1001bd5:	add    BYTE PTR [rax],ah
 1001bd7:	add    BYTE PTR [rbx+0x0],al
 1001bda:	jne    0x1001bdc
 1001bdc:	jb     0x1001bde
 1001bde:	jb     0x1001be0
 1001be0:	add    BYTE PTR gs:[rsi+0x0],ch
 1001be4:	je     0x1001be6
 1001be6:	and    BYTE PTR [rax],al
 1001be8:	je     0x1001bea
 1001bea:	imul   eax,DWORD PTR [rax],0x65006d
 1001bf0:	cmp    al,BYTE PTR [rax]
 1001bf2:	and    BYTE PTR [rax],al
 1001bf4:	and    eax,0x7300
 1001bf9:	add    BYTE PTR [rax],al
 1001bfb:	add    BYTE PTR [rax],al
 1001bfd:	add    BYTE PTR [rax],al
 1001bff:	add    BYTE PTR [rdx],ch
 1001c01:	add    BYTE PTR [rdx],ch
 1001c03:	add    BYTE PTR [rax],ah
 1001c05:	add    BYTE PTR [rax],ah
 1001c07:	add    BYTE PTR [rbp+0x0],al
 1001c0a:	ins    BYTE PTR es:[rdi],dx
 1001c0b:	add    BYTE PTR [rcx+0x0],ah
 1001c0e:	jo     0x1001c10
 1001c10:	jae    0x1001c12
 1001c12:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1001c17:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001c1b:	add    BYTE PTR [rbp+0x0],ch
 1001c1e:	add    BYTE PTR gs:[rdx],bh
 1001c21:	add    BYTE PTR [rax],ah
 1001c23:	add    BYTE PTR [rip+0x20006400],ah        # 0x21008029
 1001c29:	add    BYTE PTR [rbx+0x0],dh
 1001c2c:	add    BYTE PTR gs:[rbx+0x0],ah
 1001c30:	outs   dx,DWORD PTR ds:[rsi]
 1001c31:	add    BYTE PTR [rsi+0x0],ch
 1001c34:	add    BYTE PTR fs:[rbx+0x0],dh
	...
 1001c40:	sub    al,BYTE PTR [rax]
 1001c42:	sub    al,BYTE PTR [rax]
 1001c44:	and    BYTE PTR [rax],al
 1001c46:	and    BYTE PTR [rax],al
 1001c48:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001c4c:	ins    DWORD PTR es:[rdi],dx
 1001c4d:	add    BYTE PTR [rbp+0x0],ch
 1001c50:	(bad)  
 1001c51:	add    BYTE PTR [rsi+0x0],ch
 1001c54:	add    BYTE PTR fs:[rip+0x69006c00],ch        # 0x6a00885b
 1001c5b:	add    BYTE PTR [rsi+0x0],ch
 1001c5e:	add    BYTE PTR gs:[rdx],bh
 1001c61:	add    BYTE PTR [rax],ah
 1001c63:	add    BYTE PTR [rip+0x7300],ah        # 0x1008f69
 1001c69:	add    BYTE PTR [rax],al
 1001c6b:	add    BYTE PTR [rax],al
 1001c6d:	add    BYTE PTR [rax],al
 1001c6f:	add    BYTE PTR [rdx],ch
 1001c71:	add    BYTE PTR [rdx],ch
 1001c73:	add    BYTE PTR [rax],ah
 1001c75:	add    BYTE PTR [rax],ah
 1001c77:	add    BYTE PTR [rip+0x20007300],ah        # 0x21008f7d
 1001c7d:	add    BYTE PTR [rax+rax*1+0x52],dl
 1001c81:	add    BYTE PTR [rcx+0x0],al
 1001c84:	rex.XB add BYTE PTR [r9+0x0],cl
 1001c88:	rex.WRX add BYTE PTR [rdi+0x0],r8b
 1001c8c:	and    BYTE PTR [rax],al
 1001c8e:	push   rbx
 1001c8f:	add    BYTE PTR [rax+rax*1+0x41],dl
 1001c93:	add    BYTE PTR [rdx+0x0],dl
 1001c96:	push   rsp
 1001c97:	add    BYTE PTR [rbp+0x0],al
 1001c9a:	add    BYTE PTR [rax],r12b
 1001c9d:	add    BYTE PTR [rip+0x50002000],ch        # 0x51003ca3
 1001ca3:	add    BYTE PTR [rdx+0x0],dh
 1001ca6:	outs   dx,DWORD PTR ds:[rsi]
 1001ca7:	add    BYTE PTR [rbx+0x0],ah
 1001caa:	add    BYTE PTR gs:[rbx+0x0],dh
 1001cae:	jae    0x1001cb0
 1001cb0:	rex.WB add BYTE PTR [r8+rax*1+0x3a],spl
 1001cb5:	add    BYTE PTR [rax],ah
 1001cb7:	add    BYTE PTR [rax],dh
 1001cb9:	add    BYTE PTR [rax+0x0],bh
 1001cbc:	and    eax,0x2c007800
 1001cc1:	add    BYTE PTR [rax],ah
 1001cc3:	add    BYTE PTR [rbx+0x0],al
 1001cc6:	outs   dx,DWORD PTR ds:[rsi]
 1001cc7:	add    BYTE PTR [rsi+0x0],ch
 1001cca:	je     0x1001ccc
 1001ccc:	add    BYTE PTR gs:[rax+0x0],bh
 1001cd0:	je     0x1001cd2
 1001cd2:	rex.WB add BYTE PTR [r8+rax*1+0x3a],spl
 1001cd7:	add    BYTE PTR [rax],ah
 1001cd9:	add    BYTE PTR [rax],dh
 1001cdb:	add    BYTE PTR [rax+0x0],bh
 1001cde:	and    eax,0x7800
	...
 1001cef:	add    BYTE PTR [rdx],ch
 1001cf1:	add    BYTE PTR [rdx],ch
 1001cf3:	add    BYTE PTR [rax],ah
 1001cf5:	add    BYTE PTR [rax],ah
 1001cf7:	add    BYTE PTR [rsi+0x0],cl
 1001cfa:	add    BYTE PTR cs:[rdx+0x0],al
 1001cfe:	add    BYTE PTR cs:[rax],ah
 1001d01:	add    BYTE PTR [rsi+0x0],cl
 1001d04:	rex.WRXB add BYTE PTR [r8+r8*1+0x20],r10b
 1001d09:	add    BYTE PTR [rcx+0x0],cl
 1001d0c:	rex.WRX add BYTE PTR [rcx+0x0],r9b
 1001d10:	push   rsp
 1001d11:	add    BYTE PTR [rcx+0x0],cl
 1001d14:	add    BYTE PTR [r8+rax*1+0x49],cl
 1001d19:	add    BYTE PTR [rdx+0x0],bl
 1001d1c:	add    BYTE PTR [r8+rax*1+0x20],r8b
 1001d21:	add    BYTE PTR [rdx+0x0],al
 1001d24:	pop    rcx
 1001d25:	add    BYTE PTR [rax],ah
 1001d27:	add    BYTE PTR [rax+rax*1+0x48],dl
 1001d2b:	add    BYTE PTR [rbp+0x0],al
 1001d2e:	and    BYTE PTR [rax],al
 1001d30:	rex.XB add BYTE PTR [r15+0x0],cl
 1001d34:	rex.WRX add BYTE PTR [rbx+0x0],r10b
 1001d38:	push   rsp
 1001d39:	add    BYTE PTR [rdx+0x0],dl
 1001d3c:	push   rbp
 1001d3d:	add    BYTE PTR [rbx+0x0],al
 1001d40:	push   rsp
 1001d41:	add    BYTE PTR [rdi+0x0],cl
 1001d44:	push   rdx
	...
 1001d4d:	add    BYTE PTR [rax],al
 1001d4f:	add    BYTE PTR [rdx],ch
 1001d51:	add    BYTE PTR [rdx],ch
 1001d53:	add    BYTE PTR [rax],ah
 1001d55:	add    BYTE PTR [rax],ah
 1001d57:	add    BYTE PTR [rax+0x0],dl
 1001d5a:	jb     0x1001d5c
 1001d5c:	outs   dx,DWORD PTR ds:[rsi]
 1001d5d:	add    BYTE PTR [rax+rax*1+0x75],ah
 1001d61:	add    BYTE PTR [rbx+0x0],ah
 1001d64:	je     0x1001d66
 1001d66:	and    BYTE PTR [rax],al
 1001d68:	jbe    0x1001d6a
 1001d6a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001d6e:	jae    0x1001d70
 1001d70:	imul   eax,DWORD PTR [rax],0x6e006f
 1001d76:	cmp    al,BYTE PTR [rax]
 1001d78:	and    BYTE PTR [rax],al
 1001d7a:	and    eax,0x2e006400
 1001d7f:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f008185
 1001d85:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f00818b
 1001d8b:	add    BYTE PTR [rip+0x6400],ah        # 0x1008191
 1001d91:	add    BYTE PTR [rax],al
 1001d93:	add    BYTE PTR [rax],al
 1001d95:	add    BYTE PTR [rax],al
 1001d97:	add    BYTE PTR [rax+rax*1+0x72],dl
 1001d9b:	add    BYTE PTR [rcx+0x0],ah
 1001d9e:	movsxd eax,DWORD PTR [rax]
 1001da0:	add    BYTE PTR gs:[rsi+0x0],al
 1001da4:	imul   eax,DWORD PTR [rax],0x65006c
 1001daa:	add    BYTE PTR [rax],al
 1001dac:	add    BYTE PTR [rax],al
 1001dae:	add    BYTE PTR [rax],al
 1001db0:	push   rsp
 1001db1:	add    BYTE PTR [rdx+0x0],dh
 1001db4:	(bad)  
 1001db5:	add    BYTE PTR [rbx+0x0],ah
 1001db8:	add    BYTE PTR gs:[rax+rax*1+0x65],cl
 1001dbd:	add    BYTE PTR [rsi+0x0],dh
 1001dc0:	add    BYTE PTR gs:[rax+rax*1+0x0],ch
 1001dc5:	add    BYTE PTR [rax],al
 1001dc7:	add    BYTE PTR [rax+rax*1+0x72],dl
 1001dcb:	add    BYTE PTR [rcx+0x0],ah
 1001dce:	movsxd eax,DWORD PTR [rax]
 1001dd0:	add    BYTE PTR gs:[rbp+0x0],al
 1001dd4:	outs   dx,BYTE PTR ds:[rsi]
 1001dd5:	add    BYTE PTR [rax+rax*1+0x65],dh
 1001dd9:	add    BYTE PTR [rdx+0x0],dh
 1001ddc:	add    BYTE PTR [r8+0x0],r15b
 1001de0:	imul   eax,DWORD PTR [rax],0x74
 1001de6:	add    BYTE PTR [rax],al
 1001de8:	push   rsp
 1001de9:	add    BYTE PTR [rdx+0x0],dh
 1001dec:	(bad)  
 1001ded:	add    BYTE PTR [rbx+0x0],ah
 1001df0:	add    BYTE PTR gs:[rax+rax*1+0x6f],dl
 1001df5:	add    BYTE PTR [rsi+0x0],al
 1001df8:	imul   eax,DWORD PTR [rax],0x65006c
 1001dfe:	add    BYTE PTR [rax],al
 1001e00:	push   rsp
 1001e01:	add    BYTE PTR [rdx+0x0],dh
 1001e04:	(bad)  
 1001e05:	add    BYTE PTR [rbx+0x0],ah
 1001e08:	add    BYTE PTR gs:[rax+rax*1+0x6f],dl
 1001e0d:	add    BYTE PTR [rax+rax*1+0x65],al
 1001e11:	add    BYTE PTR [rdx+0x0],ah
 1001e14:	jne    0x1001e16
 1001e16:	add    BYTE PTR [edi+0x0],ah
 1001e1a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001e1e:	add    BYTE PTR [rax],al
 1001e20:	push   rsp
 1001e21:	add    BYTE PTR [rdx+0x0],dh
 1001e24:	(bad)  
 1001e25:	add    BYTE PTR [rbx+0x0],ah
 1001e28:	add    BYTE PTR gs:[rax+rax*1+0x69],dl
 1001e2d:	add    BYTE PTR [rbp+0x0],ch
 1001e30:	add    BYTE PTR gs:[rbx+0x0],dh
 1001e34:	je     0x1001e36
 1001e36:	(bad)  
 1001e37:	add    BYTE PTR [rbp+0x0],ch
 1001e3a:	jo     0x1001e3c
 1001e3c:	add    BYTE PTR [rax],al
 1001e3e:	add    BYTE PTR [rax],al
 1001e40:	push   rsp
 1001e41:	add    BYTE PTR [rdx+0x0],dh
 1001e44:	(bad)  
 1001e45:	add    BYTE PTR [rbx+0x0],ah
 1001e48:	add    BYTE PTR gs:[rsi+0x0],al
 1001e4c:	imul   eax,DWORD PTR [rax],0x65006c
 1001e52:	rex.WR add BYTE PTR [rcx+0x0],r13b
 1001e56:	outs   dx,BYTE PTR ds:[rsi]
 1001e57:	add    BYTE PTR [rbp+0x0],ah
 1001e5a:	rex.WB add BYTE PTR [r14+0x0],bpl
 1001e5e:	data16 add BYTE PTR [rdi+0x0],ch
 1001e62:	add    BYTE PTR [rax],al
 1001e64:	add    BYTE PTR [rax],al
 1001e66:	add    BYTE PTR [rax],al
 1001e68:	push   rsp
 1001e69:	add    BYTE PTR [rdx+0x0],dh
 1001e6c:	(bad)  
 1001e6d:	add    BYTE PTR [rbx+0x0],ah
 1001e70:	add    BYTE PTR gs:[rsi+0x0],al
 1001e74:	outs   dx,DWORD PTR ds:[rsi]
 1001e75:	add    BYTE PTR [rdx+0x0],dh
 1001e78:	movsxd eax,DWORD PTR [rax]
 1001e7a:	add    BYTE PTR gs:[rsi+0x0],al
 1001e7e:	ins    BYTE PTR es:[rdi],dx
 1001e7f:	add    BYTE PTR [rbp+0x0],dh
 1001e82:	jae    0x1001e84
 1001e84:	push   0x28000000
 1001e89:	add    BYTE PTR [rbp+0x0],dl
 1001e8c:	outs   dx,BYTE PTR ds:[rsi]
 1001e8d:	add    BYTE PTR [rbx+0x0],ch
 1001e90:	outs   dx,BYTE PTR ds:[rsi]
 1001e91:	add    BYTE PTR [rdi+0x0],ch
 1001e94:	ja     0x1001e96
 1001e96:	outs   dx,BYTE PTR ds:[rsi]
 1001e97:	add    BYTE PTR [rax],ah
 1001e99:	add    BYTE PTR [rbx+0x0],dh
 1001e9c:	outs   dx,DWORD PTR ds:[rsi]
 1001e9d:	add    BYTE PTR [rbp+0x0],dh
 1001ea0:	jb     0x1001ea2
 1001ea2:	movsxd eax,DWORD PTR [rax]
 1001ea4:	add    BYTE PTR gs:[rax],ah
 1001ea7:	add    BYTE PTR [rsi+0x0],ah
 1001eaa:	imul   eax,DWORD PTR [rax],0x65006c
 1001eb0:	sub    DWORD PTR [rax],eax
	...
 1001ebe:	add    BYTE PTR [rax],al
 1001ec0:	rex.XB add BYTE PTR [r10+0x0],al
 1001ec4:	jae    0x1001ec6
 1001ec6:	add    BYTE PTR [rdx+0x0],r12b
 1001eca:	add    BYTE PTR [eax+eax*1+0x72],dl
 1001ecf:	add    BYTE PTR [rcx+0x0],ah
 1001ed2:	movsxd eax,DWORD PTR [rax]
 1001ed4:	add    BYTE PTR gs:[rdx],bh
 1001ed7:	add    BYTE PTR [rdx],bh
 1001ed9:	add    BYTE PTR [rax+0x0],dl
 1001edc:	jb     0x1001ede
 1001ede:	add    BYTE PTR gs:[rax+0x0],dl
 1001ee2:	jb     0x1001ee4
 1001ee4:	imul   eax,DWORD PTR [rax],0x74006e
 1001eea:	cmp    al,BYTE PTR [rax]
 1001eec:	and    BYTE PTR [rax],al
 1001eee:	push   rsp
 1001eef:	add    BYTE PTR [rdx+0x0],dl
 1001ef2:	add    BYTE PTR [r11+0x0],al
 1001ef6:	rex.WB add BYTE PTR [r14+0x0],cl
 1001efa:	rex.RXB add BYTE PTR [r8],r12b
 1001efd:	add    BYTE PTR [rbp+0x0],al
 1001f00:	push   rdx
 1001f01:	add    BYTE PTR [rdx+0x0],dl
 1001f04:	rex.WRXB add BYTE PTR [r10+0x0],r10b
 1001f08:	cmp    al,BYTE PTR [rax]
 1001f0a:	and    BYTE PTR [rax],al
 1001f0c:	push   rbp
 1001f0d:	add    BYTE PTR [rsi+0x0],ch
 1001f10:	(bad)  
 1001f11:	add    BYTE PTR [rdx+0x0],ah
 1001f14:	ins    BYTE PTR es:[rdi],dx
 1001f15:	add    BYTE PTR [rbp+0x0],ah
 1001f18:	and    BYTE PTR [rax],al
 1001f1a:	je     0x1001f1c
 1001f1c:	outs   dx,DWORD PTR ds:[rsi]
 1001f1d:	add    BYTE PTR [rax],ah
 1001f1f:	add    BYTE PTR [rdi+0x0],ch
 1001f22:	jo     0x1001f24
 1001f24:	add    BYTE PTR gs:[rsi+0x0],ch
 1001f28:	and    BYTE PTR [rax],al
 1001f2a:	je     0x1001f2c
 1001f2c:	jb     0x1001f2e
 1001f2e:	(bad)  
 1001f2f:	add    BYTE PTR [rbx+0x0],ah
 1001f32:	add    BYTE PTR gs:[rax],ah
 1001f35:	add    BYTE PTR [rsi+0x0],ah
 1001f38:	imul   eax,DWORD PTR [rax],0x65006c
 1001f3e:	sub    al,0x0
 1001f40:	and    BYTE PTR [rax],al
 1001f42:	add    BYTE PTR fs:[rdi+0x0],dh
 1001f46:	push   rdx
 1001f47:	add    BYTE PTR [rbp+0x0],ah
 1001f4a:	je     0x1001f4c
 1001f4c:	cmp    al,BYTE PTR [rax]
 1001f4e:	and    BYTE PTR [rax],al
 1001f50:	and    eax,0x7500
	...
 1001f5d:	add    BYTE PTR [rax],al
 1001f5f:	add    BYTE PTR [rbx+0x0],al
 1001f62:	rex.X add BYTE PTR [rbx+0x0],sil
 1001f66:	add    BYTE PTR [rdx+0x0],r12b
 1001f6a:	add    BYTE PTR [eax+eax*1+0x72],dl
 1001f6f:	add    BYTE PTR [rcx+0x0],ah
 1001f72:	movsxd eax,DWORD PTR [rax]
 1001f74:	add    BYTE PTR gs:[rdx],bh
 1001f77:	add    BYTE PTR [rdx],bh
 1001f79:	add    BYTE PTR [rax+0x0],dl
 1001f7c:	jb     0x1001f7e
 1001f7e:	add    BYTE PTR gs:[rax+0x0],dl
 1001f82:	jb     0x1001f84
 1001f84:	imul   eax,DWORD PTR [rax],0x74006e
 1001f8a:	cmp    al,BYTE PTR [rax]
 1001f8c:	and    BYTE PTR [rax],al
 1001f8e:	push   rsp
 1001f8f:	add    BYTE PTR [rdx+0x0],dl
 1001f92:	add    BYTE PTR [r11+0x0],al
 1001f96:	rex.WB add BYTE PTR [r14+0x0],cl
 1001f9a:	rex.RXB add BYTE PTR [r8],r12b
 1001f9d:	add    BYTE PTR [rbp+0x0],al
 1001fa0:	push   rdx
 1001fa1:	add    BYTE PTR [rdx+0x0],dl
 1001fa4:	rex.WRXB add BYTE PTR [r10+0x0],r10b
 1001fa8:	cmp    al,BYTE PTR [rax]
 1001faa:	and    BYTE PTR [rax],al
 1001fac:	push   rbp
 1001fad:	add    BYTE PTR [rsi+0x0],ch
 1001fb0:	(bad)  
 1001fb1:	add    BYTE PTR [rdx+0x0],ah
 1001fb4:	ins    BYTE PTR es:[rdi],dx
 1001fb5:	add    BYTE PTR [rbp+0x0],ah
 1001fb8:	and    BYTE PTR [rax],al
 1001fba:	je     0x1001fbc
 1001fbc:	outs   dx,DWORD PTR ds:[rsi]
 1001fbd:	add    BYTE PTR [rax],ah
 1001fbf:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1001fc3:	add    BYTE PTR [rbx+0x0],ah
 1001fc6:	imul   eax,DWORD PTR [rax],0x20
 1001fc9:	add    BYTE PTR [rax+rax*1+0x72],dh
 1001fcd:	add    BYTE PTR [rcx+0x0],ah
 1001fd0:	movsxd eax,DWORD PTR [rax]
 1001fd2:	add    BYTE PTR gs:[rax],ah
 1001fd5:	add    BYTE PTR [rsi+0x0],ah
 1001fd8:	imul   eax,DWORD PTR [rax],0x65006c
 1001fde:	sub    al,0x0
 1001fe0:	and    BYTE PTR [rax],al
 1001fe2:	jae    0x1001fe4
 1001fe4:	imul   eax,DWORD PTR [rax],0x69
 1001fe7:	add    BYTE PTR [rax+0x0],dh
 1001fea:	jo     0x1001fec
 1001fec:	imul   eax,DWORD PTR [rax],0x67006e
 1001ff2:	and    BYTE PTR [rax],al
 1001ff4:	je     0x1001ff6
 1001ff6:	jb     0x1001ff8
 1001ff8:	(bad)  
 1001ff9:	add    BYTE PTR [rbx+0x0],ah
 1001ffc:	add    BYTE PTR gs:[rax],ah
 1001fff:	add    BYTE PTR [rdx+0x0],dh
 1002002:	add    BYTE PTR gs:[rbx+0x0],ah
 1002006:	outs   dx,DWORD PTR ds:[rsi]
 1002007:	add    BYTE PTR [rdx+0x0],dh
 100200a:	add    BYTE PTR fs:[rax+rax*1],ch
 100200e:	and    BYTE PTR [rax],al
 1002010:	add    BYTE PTR fs:[rdi+0x0],dh
 1002014:	push   rdx
 1002015:	add    BYTE PTR [rbp+0x0],ah
 1002018:	je     0x100201a
 100201a:	cmp    al,BYTE PTR [rax]
 100201c:	and    BYTE PTR [rax],al
 100201e:	and    eax,0x7500
	...
 100202f:	add    BYTE PTR [rbx+0x0],al
 1002032:	rex.X add BYTE PTR [rbx+0x0],sil
 1002036:	add    BYTE PTR [rdx+0x0],r12b
 100203a:	add    BYTE PTR [eax+eax*1+0x72],dl
 100203f:	add    BYTE PTR [rcx+0x0],ah
 1002042:	movsxd eax,DWORD PTR [rax]
 1002044:	add    BYTE PTR gs:[rdx],bh
 1002047:	add    BYTE PTR [rdx],bh
 1002049:	add    BYTE PTR [rax+0x0],dl
 100204c:	jb     0x100204e
 100204e:	add    BYTE PTR gs:[rax+0x0],dl
 1002052:	jb     0x1002054
 1002054:	imul   eax,DWORD PTR [rax],0x74006e
 100205a:	cmp    al,BYTE PTR [rax]
 100205c:	and    BYTE PTR [rax],al
 100205e:	push   rsp
 100205f:	add    BYTE PTR [rdx+0x0],dl
 1002062:	add    BYTE PTR [r11+0x0],al
 1002066:	rex.WB add BYTE PTR [r14+0x0],cl
 100206a:	rex.RXB add BYTE PTR [r8],r12b
 100206d:	add    BYTE PTR [rbp+0x0],al
 1002070:	push   rdx
 1002071:	add    BYTE PTR [rdx+0x0],dl
 1002074:	rex.WRXB add BYTE PTR [r10+0x0],r10b
 1002078:	cmp    al,BYTE PTR [rax]
 100207a:	and    BYTE PTR [rax],al
 100207c:	push   rbp
 100207d:	add    BYTE PTR [rsi+0x0],ch
 1002080:	(bad)  
 1002081:	add    BYTE PTR [rdx+0x0],ah
 1002084:	ins    BYTE PTR es:[rdi],dx
 1002085:	add    BYTE PTR [rbp+0x0],ah
 1002088:	and    BYTE PTR [rax],al
 100208a:	je     0x100208c
 100208c:	outs   dx,DWORD PTR ds:[rsi]
 100208d:	add    BYTE PTR [rax],ah
 100208f:	add    BYTE PTR [rbx+0x0],dh
 1002092:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 1002097:	add    BYTE PTR [rbp+0x0],ah
 100209a:	outs   dx,BYTE PTR ds:[rsi]
 100209b:	add    BYTE PTR [rax+rax*1+0x20],ah
 100209f:	add    BYTE PTR [rdi+0x0],ch
 10020a2:	data16 add BYTE PTR [rax],ah
 10020a5:	add    BYTE PTR [rsi+0x0],ah
 10020a8:	imul   eax,DWORD PTR [rax],0x65006c
 10020ae:	sub    al,0x0
 10020b0:	and    BYTE PTR [rax],al
 10020b2:	jae    0x10020b4
 10020b4:	imul   eax,DWORD PTR [rax],0x69
 10020b7:	add    BYTE PTR [rax+0x0],dh
 10020ba:	jo     0x10020bc
 10020bc:	imul   eax,DWORD PTR [rax],0x67006e
 10020c2:	and    BYTE PTR [rax],al
 10020c4:	je     0x10020c6
 10020c6:	jb     0x10020c8
 10020c8:	(bad)  
 10020c9:	add    BYTE PTR [rbx+0x0],ah
 10020cc:	add    BYTE PTR gs:[rax],ah
 10020cf:	add    BYTE PTR [rdx+0x0],dh
 10020d2:	add    BYTE PTR gs:[rbx+0x0],ah
 10020d6:	outs   dx,DWORD PTR ds:[rsi]
 10020d7:	add    BYTE PTR [rdx+0x0],dh
 10020da:	add    BYTE PTR fs:[rax+rax*1],ch
 10020de:	and    BYTE PTR [rax],al
 10020e0:	add    BYTE PTR fs:[rdi+0x0],dh
 10020e4:	push   rdx
 10020e5:	add    BYTE PTR [rbp+0x0],ah
 10020e8:	je     0x10020ea
 10020ea:	cmp    al,BYTE PTR [rax]
 10020ec:	and    BYTE PTR [rax],al
 10020ee:	and    eax,0x7500
	...
 10020ff:	add    BYTE PTR [rbx+0x0],al
 1002102:	rex.X add BYTE PTR [rbx+0x0],sil
 1002106:	add    BYTE PTR [rdx+0x0],r12b
 100210a:	add    BYTE PTR [eax+eax*1+0x72],dl
 100210f:	add    BYTE PTR [rcx+0x0],ah
 1002112:	movsxd eax,DWORD PTR [rax]
 1002114:	add    BYTE PTR gs:[rdx],bh
 1002117:	add    BYTE PTR [rdx],bh
 1002119:	add    BYTE PTR [rax+0x0],dl
 100211c:	jb     0x100211e
 100211e:	add    BYTE PTR gs:[rax+0x0],dl
 1002122:	jb     0x1002124
 1002124:	imul   eax,DWORD PTR [rax],0x74006e
 100212a:	cmp    al,BYTE PTR [rax]
 100212c:	and    BYTE PTR [rax],al
 100212e:	push   rsp
 100212f:	add    BYTE PTR [rdx+0x0],dl
 1002132:	add    BYTE PTR [r11+0x0],al
 1002136:	rex.WB add BYTE PTR [r14+0x0],cl
 100213a:	rex.RXB add BYTE PTR [r8],r12b
 100213d:	add    BYTE PTR [rbp+0x0],al
 1002140:	push   rdx
 1002141:	add    BYTE PTR [rdx+0x0],dl
 1002144:	rex.WRXB add BYTE PTR [r10+0x0],r10b
 1002148:	cmp    al,BYTE PTR [rax]
 100214a:	and    BYTE PTR [rax],al
 100214c:	push   rbp
 100214d:	add    BYTE PTR [rsi+0x0],ch
 1002150:	(bad)  
 1002151:	add    BYTE PTR [rdx+0x0],ah
 1002154:	ins    BYTE PTR es:[rdi],dx
 1002155:	add    BYTE PTR [rbp+0x0],ah
 1002158:	and    BYTE PTR [rax],al
 100215a:	je     0x100215c
 100215c:	outs   dx,DWORD PTR ds:[rsi]
 100215d:	add    BYTE PTR [rax],ah
 100215f:	add    BYTE PTR [rbp+0x0],dh
 1002162:	outs   dx,BYTE PTR ds:[rsi]
 1002163:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1002167:	add    BYTE PTR [rbx+0x0],ah
 100216a:	imul   eax,DWORD PTR [rax],0x20
 100216d:	add    BYTE PTR [rax+rax*1+0x72],dh
 1002171:	add    BYTE PTR [rcx+0x0],ah
 1002174:	movsxd eax,DWORD PTR [rax]
 1002176:	add    BYTE PTR gs:[rax],ah
 1002179:	add    BYTE PTR [rsi+0x0],ah
 100217c:	imul   eax,DWORD PTR [rax],0x65006c
 1002182:	sub    al,0x0
 1002184:	and    BYTE PTR [rax],al
 1002186:	add    BYTE PTR fs:[rdi+0x0],dh
 100218a:	push   rdx
 100218b:	add    BYTE PTR [rbp+0x0],ah
 100218e:	je     0x1002190
 1002190:	cmp    al,BYTE PTR [rax]
 1002192:	and    BYTE PTR [rax],al
 1002194:	and    eax,0x7500
 1002199:	add    BYTE PTR [rax],al
 100219b:	add    BYTE PTR [rax],al
 100219d:	add    BYTE PTR [rax],al
 100219f:	add    BYTE PTR [rbx+0x0],bl
 10021a2:	and    eax,0x31003000
 10021a7:	add    BYTE PTR [rax],dh
 10021a9:	add    BYTE PTR [rbp+0x0],dh
 10021ac:	sub    al,0x0
 10021ae:	add    BYTE PTR [rax],al
 10021b0:	pop    rbx
 10021b1:	add    BYTE PTR [rip+0x2c00],ch        # 0x1004db7
 10021b7:	add    BYTE PTR [rax],dh
 10021b9:	add    BYTE PTR [rax+0x0],bh
 10021bc:	and    eax,0x36003000
 10021c1:	add    BYTE PTR [rax+0x0],bh
 10021c4:	cmp    al,BYTE PTR [rax]
 10021c6:	xor    BYTE PTR [rax],al
 10021c8:	js     0x10021ca
 10021ca:	and    eax,0x34003000
 10021cf:	add    BYTE PTR [rax+0x0],bh
 10021d2:	cmp    al,BYTE PTR [rax]
 10021d4:	xor    BYTE PTR [rax],al
 10021d6:	js     0x10021d8
 10021d8:	and    eax,0x38003000
 10021dd:	add    BYTE PTR [rax+0x0],bh
 10021e0:	pop    rbp
 10021e1:	add    BYTE PTR [rax],ah
 10021e3:	add    BYTE PTR [rax],al
 10021e5:	add    BYTE PTR [rax],al
 10021e7:	add    BYTE PTR [rip+0x28007300],ah        # 0x290094ed
 10021ed:	add    BYTE PTR [rip+0x34003000],ah        # 0x350051f3
 10021f3:	add    BYTE PTR [rbp+0x0],dh
 10021f6:	sub    DWORD PTR [rax],eax
 10021f8:	cmp    al,BYTE PTR [rax]
 10021fa:	and    BYTE PTR [rax],al
 10021fc:	add    BYTE PTR [rax],al
 10021fe:	add    BYTE PTR [rax],al
 1002200:	or     eax,0xa00
 1002205:	add    BYTE PTR [rax],al
 1002207:	add    BYTE PTR [rbp+0x0],al
 100220a:	rex.WRX add BYTE PTR [rax+r8*1+0x45],r10b
 100220f:	add    BYTE PTR [rdx+0x0],dl
 1002212:	add    BYTE PTR [rax],al
 1002214:	add    BYTE PTR [rax],al
 1002216:	add    BYTE PTR [rax],al
 1002218:	add    BYTE PTR [r8+0x0],r11b
 100221c:	rex.WB add BYTE PTR [r8+rax*1+0x20],dl
	...
 100222d:	add    BYTE PTR [rax],al
 100222f:	add    BYTE PTR [rax],dh
 1002231:	add    BYTE PTR [rax+0x0],bh
 1002234:	and    eax,0x36003000
 1002239:	add    BYTE PTR [rax+0x0],bh
 100223c:	cmp    al,BYTE PTR [rax]
 100223e:	xor    BYTE PTR [rax],al
 1002240:	js     0x1002242
 1002242:	and    eax,0x34003000
 1002247:	add    BYTE PTR [rax+0x0],bh
 100224a:	cmp    al,BYTE PTR [rax]
 100224c:	xor    BYTE PTR [rax],al
 100224e:	js     0x1002250
 1002250:	and    eax,0x38003000
 1002255:	add    BYTE PTR [rax+0x0],bh
 1002258:	pop    rbp
 1002259:	add    BYTE PTR [rax],ah
 100225b:	add    BYTE PTR [rip+0x20007300],ah        # 0x21009561
 1002261:	add    BYTE PTR [rbx+0x0],bh
 1002264:	and    eax,0x7d007300
 1002269:	add    BYTE PTR [rdx],bh
 100226b:	add    BYTE PTR [rax],ah
 100226d:	add    BYTE PTR [rax],al
 100226f:	add    BYTE PTR [rdi+0x0],cl
 1002272:	jne    0x1002274
 1002274:	je     0x1002276
 1002276:	and    BYTE PTR [rax],al
 1002278:	outs   dx,DWORD PTR ds:[rsi]
 1002279:	add    BYTE PTR [rsi+0x0],ah
 100227c:	and    BYTE PTR [rax],al
 100227e:	ins    DWORD PTR es:[rdi],dx
 100227f:	add    BYTE PTR [rbp+0x0],ah
 1002282:	ins    DWORD PTR es:[rdi],dx
 1002283:	add    BYTE PTR [rdi+0x0],ch
 1002286:	jb     0x1002288
 1002288:	jns    0x100228a
 100228a:	and    BYTE PTR [rax],al
 100228c:	add    BYTE PTR fs:[rbp+0x0],ah
 1002290:	je     0x1002292
 1002292:	add    BYTE PTR gs:[rbx+0x0],ah
 1002296:	je     0x1002298
 1002298:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100229d:	add    BYTE PTR [rcx+0x0],ch
 10022a0:	outs   dx,BYTE PTR ds:[rsi]
 10022a1:	add    BYTE PTR [rax],ah
 10022a3:	add    BYTE PTR [rsi+0x0],ah
 10022a6:	jne    0x10022a8
 10022a8:	outs   dx,BYTE PTR ds:[rsi]
 10022a9:	add    BYTE PTR [rbx+0x0],ah
 10022ac:	je     0x10022ae
 10022ae:	imul   eax,DWORD PTR [rax],0x6e006f
 10022b4:	and    BYTE PTR [rax],al
 10022b6:	and    eax,0x7300
 10022bb:	add    BYTE PTR [rax],al
 10022bd:	add    BYTE PTR [rax],al
 10022bf:	add    BYTE PTR [rbp+0x0],dl
 10022c2:	outs   dx,BYTE PTR ds:[rsi]
 10022c3:	add    BYTE PTR [rbp+0x0],ah
 10022c6:	js     0x10022c8
 10022c8:	jo     0x10022ca
 10022ca:	add    BYTE PTR gs:[rbx+0x0],ah
 10022ce:	je     0x10022d0
 10022d0:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10022d5:	add    BYTE PTR [rbp+0x0],ah
 10022d8:	jb     0x10022da
 10022da:	jb     0x10022dc
 10022dc:	outs   dx,DWORD PTR ds:[rsi]
 10022dd:	add    BYTE PTR [rdx+0x0],dh
 10022e0:	and    BYTE PTR [rax],al
 10022e2:	imul   eax,DWORD PTR [rax],0x20006e
 10022e8:	jb     0x10022ea
 10022ea:	outs   dx,DWORD PTR ds:[rsi]
 10022eb:	add    BYTE PTR [rbp+0x0],dh
 10022ee:	je     0x10022f0
 10022f0:	imul   eax,DWORD PTR [rax],0x65006e
 10022f6:	and    BYTE PTR [rax],al
 10022f8:	and    eax,0x2e007300
 10022fd:	add    BYTE PTR [rax],ah
 10022ff:	add    BYTE PTR [rax],ah
 1002301:	add    BYTE PTR [rax+0x0],ch
 1002304:	jb     0x1002306
 1002306:	and    BYTE PTR [rax],al
 1002308:	cmp    eax,0x30002000
 100230d:	add    BYTE PTR [rax+0x0],bh
 1002310:	and    eax,0x38003000
 1002315:	add    BYTE PTR [rax+rax*1+0x78],ch
 1002319:	add    BYTE PTR [rax],al
 100231b:	add    BYTE PTR [rax],al
 100231d:	add    BYTE PTR [rax],al
 100231f:	add    BYTE PTR [rdi+0x0],cl
 1002322:	jne    0x1002324
 1002324:	je     0x1002326
 1002326:	and    BYTE PTR [rax],al
 1002328:	outs   dx,DWORD PTR ds:[rsi]
 1002329:	add    BYTE PTR [rsi+0x0],ah
 100232c:	and    BYTE PTR [rax],al
 100232e:	ins    DWORD PTR es:[rdi],dx
 100232f:	add    BYTE PTR [rbp+0x0],ah
 1002332:	ins    DWORD PTR es:[rdi],dx
 1002333:	add    BYTE PTR [rdi+0x0],ch
 1002336:	jb     0x1002338
 1002338:	jns    0x100233a
 100233a:	and    BYTE PTR [rax],al
 100233c:	add    BYTE PTR fs:[rbp+0x0],ah
 1002340:	je     0x1002342
 1002342:	add    BYTE PTR gs:[rbx+0x0],ah
 1002346:	je     0x1002348
 1002348:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 100234d:	add    BYTE PTR [rax],ah
 100234f:	add    BYTE PTR [rip+0x7300],ah        # 0x1009655
	...
 100235d:	add    BYTE PTR [rax],al
 100235f:	add    BYTE PTR [rbp+0x0],dl
 1002362:	outs   dx,BYTE PTR ds:[rsi]
 1002363:	add    BYTE PTR [rbp+0x0],ah
 1002366:	js     0x1002368
 1002368:	jo     0x100236a
 100236a:	add    BYTE PTR gs:[rbx+0x0],ah
 100236e:	je     0x1002370
 1002370:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1002375:	add    BYTE PTR [rbp+0x0],ah
 1002378:	jb     0x100237a
 100237a:	jb     0x100237c
 100237c:	outs   dx,DWORD PTR ds:[rsi]
 100237d:	add    BYTE PTR [rdx+0x0],dh
 1002380:	cmp    al,BYTE PTR [rax]
 1002382:	and    BYTE PTR [rax],al
 1002384:	and    eax,0x20007300
 1002389:	add    BYTE PTR [rax],ah
 100238b:	add    BYTE PTR [rbx+0x0],bl
 100238e:	push   0x20007200
 1002393:	add    BYTE PTR [rip+0x30002000],bh        # 0x31004399
 1002399:	add    BYTE PTR [rax+0x0],bh
 100239c:	and    eax,0x38003000
 10023a1:	add    BYTE PTR [rax+rax*1+0x78],ch
 10023a5:	add    BYTE PTR [rbp+0x0],bl
	...
 10023b0:	push   rdi
 10023b1:	add    BYTE PTR [rcx+0x0],al
 10023b4:	push   rdx
 10023b5:	add    BYTE PTR [rsi+0x0],cl
 10023b8:	rex.WB add BYTE PTR [r14+0x0],cl
 10023bc:	rex.RXB add BYTE PTR [r10],r15b
 10023bf:	add    BYTE PTR [rax],ah
 10023c1:	add    BYTE PTR [rip+0x20007300],ah        # 0x210096c7
 10023c7:	add    BYTE PTR [rbx+0x0],bl
 10023ca:	push   0x20007200
 10023cf:	add    BYTE PTR [rip+0x30002000],bh        # 0x310043d5
 10023d5:	add    BYTE PTR [rax+0x0],bh
 10023d8:	and    eax,0x38003000
 10023dd:	add    BYTE PTR [rax+rax*1+0x78],ch
 10023e1:	add    BYTE PTR [rbp+0x0],bl
 10023e4:	add    BYTE PTR [rax],al
 10023e6:	add    BYTE PTR [rax],al
 10023e8:	push   rbx
 10023e9:	add    BYTE PTR [rcx+0x0],dl
 10023ec:	rex.WR add BYTE PTR [rax],r12b
 10023ef:	add    BYTE PTR [rdi+0x0],dl
 10023f2:	jb     0x10023f4
 10023f4:	imul   eax,DWORD PTR [rax],0x650074
 10023fa:	jb     0x10023fc
 10023fc:	add    BYTE PTR [rax],al
 10023fe:	add    BYTE PTR [rax],al
 1002400:	push   rbx
 1002401:	add    BYTE PTR [rcx+0x0],dl
 1002404:	rex.WR add BYTE PTR [rax+rax*1+0x55],r8b
 1002409:	add    BYTE PTR [rbp+0x0],cl
 100240c:	push   rax
 100240d:	add    BYTE PTR [rbp+0x0],al
 1002410:	push   rdx
 1002411:	add    BYTE PTR [rax],ah
 1002413:	add    BYTE PTR [rax+rax*1+0x69],ch
 1002417:	add    BYTE PTR [rdx+0x0],ah
 100241a:	jb     0x100241c
 100241c:	(bad)  
 100241d:	add    BYTE PTR [rdx+0x0],dh
 1002420:	jns    0x1002422
 1002422:	and    BYTE PTR [rax],al
 1002424:	data16 add BYTE PTR [rcx+0x0],ah
 1002428:	imul   eax,DWORD PTR [rax],0x65006c
 100242e:	add    BYTE PTR fs:[rax],ah
 1002431:	add    BYTE PTR [rcx+0x0],ch
 1002434:	outs   dx,BYTE PTR ds:[rsi]
 1002435:	add    BYTE PTR [rcx+0x0],ch
 1002438:	je     0x100243a
 100243a:	imul   eax,DWORD PTR [rax],0x6c0061
 1002440:	imul   eax,DWORD PTR [rax],0x61007a
 1002446:	je     0x1002448
 1002448:	imul   eax,DWORD PTR [rax],0x6e006f
 100244e:	add    BYTE PTR cs:[rax],ah
 1002451:	add    BYTE PTR [rcx+0x0],bl
 1002454:	outs   dx,DWORD PTR ds:[rsi]
 1002455:	add    BYTE PTR [rbp+0x0],dh
 1002458:	jb     0x100245a
 100245a:	and    BYTE PTR [rax],al
 100245c:	imul   eax,DWORD PTR [rax],0x73006e
 1002462:	je     0x1002464
 1002464:	(bad)  
 1002465:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1002469:	add    BYTE PTR [rcx+0x0],ah
 100246c:	je     0x100246e
 100246e:	imul   eax,DWORD PTR [rax],0x6e006f
 1002474:	and    BYTE PTR [rax],al
 1002476:	imul   eax,DWORD PTR [rax],0x200073
 100247c:	add    BYTE PTR gs:[rcx+0x0],ch
 1002480:	je     0x1002482
 1002482:	push   0x72006500
 1002487:	add    BYTE PTR [rax],ah
 1002489:	add    BYTE PTR [rbx+0x0],ah
 100248c:	outs   dx,DWORD PTR ds:[rsi]
 100248d:	add    BYTE PTR [rdx+0x0],dh
 1002490:	jb     0x1002492
 1002492:	jne    0x1002494
 1002494:	jo     0x1002496
 1002496:	je     0x1002498
 1002498:	and    BYTE PTR [rax],al
 100249a:	outs   dx,DWORD PTR ds:[rsi]
 100249b:	add    BYTE PTR [rdx+0x0],dh
 100249e:	and    BYTE PTR [rax],al
 10024a0:	push   0x73006100
 10024a5:	add    BYTE PTR [rax],ah
 10024a7:	add    BYTE PTR [rdx+0x0],ah
 10024aa:	add    BYTE PTR gs:[rbp+0x0],ah
 10024ae:	outs   dx,BYTE PTR ds:[rsi]
 10024af:	add    BYTE PTR [rax],ah
 10024b1:	add    BYTE PTR [rax+rax*1+0x61],dh
 10024b5:	add    BYTE PTR [rbp+0x0],ch
 10024b8:	jo     0x10024ba
 10024ba:	add    BYTE PTR gs:[rdx+0x0],dh
 10024be:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10024c3:	add    BYTE PTR [rdi+0x0],dh
 10024c6:	imul   eax,DWORD PTR [rax],0x680074
 10024cc:	add    BYTE PTR cs:[rax],ah
 10024cf:	add    BYTE PTR [rax+0x0],dl
 10024d2:	ins    BYTE PTR es:[rdi],dx
 10024d3:	add    BYTE PTR [rbp+0x0],ah
 10024d6:	(bad)  
 10024d7:	add    BYTE PTR [rbx+0x0],dh
 10024da:	add    BYTE PTR gs:[rax],ah
 10024dd:	add    BYTE PTR [rbp+0x0],dh
 10024e0:	outs   dx,BYTE PTR ds:[rsi]
 10024e1:	add    BYTE PTR [rcx+0x0],ch
 10024e4:	outs   dx,BYTE PTR ds:[rsi]
 10024e5:	add    BYTE PTR [rbx+0x0],dh
 10024e8:	je     0x10024ea
 10024ea:	(bad)  
 10024eb:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10024ef:	add    BYTE PTR [rax],ah
 10024f1:	add    BYTE PTR [rax+rax*1+0x68],dh
 10024f5:	add    BYTE PTR [rbp+0x0],ah
 10024f8:	outs   dx,BYTE PTR ds:[rsi]
 10024f9:	add    BYTE PTR [rax],ah
 10024fb:	add    BYTE PTR [rdx+0x0],dh
 10024fe:	add    BYTE PTR gs:[rip+0x75007200],ch        # 0x76009705
 1002505:	add    BYTE PTR [rsi+0x0],ch
 1002508:	and    BYTE PTR [rax],al
 100250a:	jae    0x100250c
 100250c:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1002511:	add    BYTE PTR [rax+0x0],dh
 1002514:	and    BYTE PTR [rax],al
 1002516:	je     0x1002518
 1002518:	outs   dx,DWORD PTR ds:[rsi]
 1002519:	add    BYTE PTR [rax],ah
 100251b:	add    BYTE PTR [rbx+0x0],ah
 100251e:	outs   dx,DWORD PTR ds:[rsi]
 100251f:	add    BYTE PTR [rdx+0x0],dh
 1002522:	jb     0x1002524
 1002524:	add    BYTE PTR gs:[rbx+0x0],ah
 1002528:	je     0x100252a
 100252a:	and    BYTE PTR [rax],al
 100252c:	je     0x100252e
 100252e:	push   0x73006900
 1002533:	add    BYTE PTR [rax],ah
 1002535:	add    BYTE PTR [rax+0x0],dh
 1002538:	jb     0x100253a
 100253a:	outs   dx,DWORD PTR ds:[rsi]
 100253b:	add    BYTE PTR [rdx+0x0],ah
 100253e:	ins    BYTE PTR es:[rdi],dx
 100253f:	add    BYTE PTR [rbp+0x0],ah
 1002542:	ins    DWORD PTR es:[rdi],dx
 1002543:	add    BYTE PTR [rax],al
 1002545:	add    BYTE PTR [rax],al
 1002547:	add    BYTE PTR [rdx],ah
 1002549:	add    eax,0x21993
 100254e:	add    BYTE PTR [rax],al
 1002550:	push   rsp
 1002551:	jo     0x1002554
	...
 100255b:	add    BYTE PTR [rdx],al
 100255d:	add    BYTE PTR [rax],al
 100255f:	add    BYTE PTR [rax+rsi*2+0x1],ah
 1002563:	add    BYTE PTR [rax+0x0],bl
 1002569:	add    BYTE PTR [rax],al
 100256b:	add    BYTE PTR [rax],al
 100256d:	add    BYTE PTR [rax],al
 100256f:	add    BYTE PTR [rdx],ah
 1002571:	add    eax,0x31993
 1002576:	add    BYTE PTR [rax],al
 1002578:	movabs al,ds:0x170
 1002581:	add    BYTE PTR [rax],al
 1002583:	add    BYTE PTR [rbx],al
 1002585:	add    BYTE PTR [rax],al
 1002587:	add    BYTE PTR [rax+0x58000170],bh
 100258d:	add    DWORD PTR [rax],eax
	...
 1002597:	add    BYTE PTR [rdx],ah
 1002599:	add    eax,0x11993
 100259e:	add    BYTE PTR [rax],al
 10025a0:	loopne 0x1002612
 10025a2:	add    DWORD PTR [rax],eax
	...
 10025ac:	add    DWORD PTR [rax],eax
 10025ae:	add    BYTE PTR [rax],al
 10025b0:	call   0x1002725
	...
 10025bd:	add    BYTE PTR [rax],al
 10025bf:	add    BYTE PTR [rdx],ah
 10025c1:	add    eax,0x11993
 10025c6:	add    BYTE PTR [rax],al
 10025c8:	add    BYTE PTR [rcx+0x1],dh
	...
 10025d3:	add    BYTE PTR [rcx],al
 10025d5:	add    BYTE PTR [rax],al
 10025d7:	add    BYTE PTR [rax],cl
 10025d9:	jno    0x10025dc
 10025db:	add    BYTE PTR [rax],ah
	...
 10025e5:	add    BYTE PTR [rax],al
 10025e7:	add    BYTE PTR [rdx],ah
 10025e9:	add    eax,0x31993
 10025ee:	add    BYTE PTR [rax],al
 10025f0:	xor    al,0x71
 10025f2:	add    DWORD PTR [rax],eax
	...
 10025fc:	add    eax,DWORD PTR [rax]
 10025fe:	add    BYTE PTR [rax],al
 1002600:	rex.WR jno 0x1002604
 1002603:	add    al,ah
	...
 100260d:	add    BYTE PTR [rax],al
 100260f:	add    BYTE PTR [rdx],ah
 1002611:	add    eax,0x101993
 1002616:	add    BYTE PTR [rax],al
 1002618:	test   BYTE PTR [rcx+0x1],dh
 100261b:	add    BYTE PTR [rcx],al
 100261d:	add    BYTE PTR [rax],al
 100261f:	add    BYTE PTR [rdx+rsi*2],al
 1002622:	add    DWORD PTR [rax],eax
 1002624:	adc    eax,DWORD PTR [rax]
 1002626:	add    BYTE PTR [rax],al
 1002628:	push   rsp
 1002629:	jb     0x100262c
 100262b:	add    BYTE PTR [rax],al
 100262d:	add    DWORD PTR [rax],eax
	...
 1002637:	add    BYTE PTR [rdx],ah
 1002639:	add    eax,0x21993
 100263e:	add    BYTE PTR [rax],al
 1002640:	sub    al,0x73
 1002642:	add    DWORD PTR [rax],eax
	...
 100264c:	add    DWORD PTR [rax],eax
 100264e:	add    BYTE PTR [rax],al
 1002650:	cmp    al,0x73
 1002652:	add    DWORD PTR [rax],eax
	...
 1002660:	and    al,BYTE PTR [rip+0x21993]        # 0x1023ff9
 1002666:	add    BYTE PTR [rax],al
 1002668:	push   rsp
 1002669:	jae    0x100266c
	...
 1002673:	add    BYTE PTR [rcx],al
 1002675:	add    BYTE PTR [rax],al
 1002677:	add    BYTE PTR [rbx+rsi*2+0x1],ah
 100267b:	add    BYTE PTR [rax],ah
	...
 1002685:	add    BYTE PTR [rax],al
 1002687:	add    BYTE PTR [rdx],ah
 1002689:	add    eax,0x21993
 100268e:	add    BYTE PTR [rax],al
 1002690:	jl     0x1002705
 1002692:	add    DWORD PTR [rax],eax
	...
 100269c:	add    eax,DWORD PTR [rax]
 100269e:	add    BYTE PTR [rax],al
 10026a0:	mov    WORD PTR [rbx+0x1],?
 10026a3:	add    BYTE PTR [rax],ah
	...
 10026ad:	add    BYTE PTR [rax],al
 10026af:	add    BYTE PTR [rdx],ah
 10026b1:	add    eax,0x21993
 10026b6:	add    BYTE PTR [rax],al
 10026b8:	mov    eax,0x173
 10026bd:	add    BYTE PTR [rax],al
 10026bf:	add    BYTE PTR [rax],al
 10026c1:	add    BYTE PTR [rax],al
 10026c3:	add    BYTE PTR [rbx],al
 10026c5:	add    BYTE PTR [rax],al
 10026c7:	add    al,cl
 10026c9:	jae    0x10026cc
 10026cb:	add    BYTE PTR [rax],ah
	...
 10026d5:	add    BYTE PTR [rax],al
 10026d7:	add    BYTE PTR [rdx],ah
 10026d9:	add    eax,0x31993
 10026de:	add    BYTE PTR [rax],al
 10026e0:	lock jae 0x10026e4
	...
 10026eb:	add    BYTE PTR [rbx],al
 10026ed:	add    BYTE PTR [rax],al
 10026ef:	add    BYTE PTR [rax],cl
 10026f1:	je     0x10026f4
 10026f3:	add    BYTE PTR [rax],ah
	...
 10026fd:	add    BYTE PTR [rax],al
 10026ff:	add    BYTE PTR [rdx],ah
 1002701:	add    eax,0x31993
 1002706:	add    BYTE PTR [rax],al
 1002708:	xor    al,0x74
 100270a:	add    DWORD PTR [rax],eax
	...
 1002714:	add    eax,DWORD PTR [rax]
 1002716:	add    BYTE PTR [rax],al
 1002718:	rex.WR je 0x100271c
 100271b:	add    BYTE PTR [rax],ah
	...
 1002725:	add    BYTE PTR [rax],al
 1002727:	add    BYTE PTR [rdx],ah
 1002729:	add    eax,0x11993
 100272e:	add    BYTE PTR [rax],al
 1002730:	jl     0x10027a6
 1002732:	add    DWORD PTR [rax],eax
	...
 100273c:	add    eax,DWORD PTR [rax]
 100273e:	add    BYTE PTR [rax],al
 1002740:	test   BYTE PTR [rcx+rax*1+0x0],dh
 1002744:	and    BYTE PTR [rax],al
	...
 100274e:	add    BYTE PTR [rax],al
 1002750:	and    al,BYTE PTR [rip+0x11993]        # 0x10140e9
 1002756:	add    BYTE PTR [rax],al
 1002758:	mov    al,0x74
 100275a:	add    DWORD PTR [rax],eax
	...
 1002764:	add    eax,DWORD PTR [rax]
 1002766:	add    BYTE PTR [rax],al
 1002768:	mov    eax,0x20000174
	...
 1002775:	add    BYTE PTR [rax],al
 1002777:	add    BYTE PTR [rdx],ah
 1002779:	add    eax,0xd1993
 100277e:	add    BYTE PTR [rax],al
 1002780:	hlt    
 1002781:	je     0x1002784
	...
 100278b:	add    BYTE PTR [rsi],cl
 100278d:	add    BYTE PTR [rax],al
 100278f:	add    BYTE PTR [rbp+rsi*2+0x1],bl
 1002793:	add    al,dh
	...
 100279d:	add    BYTE PTR [rax],al
 100279f:	add    BYTE PTR [rdx],ah
 10027a1:	add    eax,0x21993
 10027a6:	add    BYTE PTR [rax],al
 10027a8:	fdiv   QWORD PTR [rbp+0x1]
	...
 10027b3:	add    BYTE PTR [rbx],al
 10027b5:	add    BYTE PTR [rax],al
 10027b7:	add    ah,ch
 10027b9:	jne    0x10027bc
 10027bb:	add    BYTE PTR [rax],ah
	...
 10027c5:	add    BYTE PTR [rax],al
 10027c7:	add    BYTE PTR [rdx],ah
 10027c9:	add    eax,0x21993
 10027ce:	add    BYTE PTR [rax],al
 10027d0:	sbb    BYTE PTR [rsi+0x1],dh
	...
 10027db:	add    BYTE PTR [rbx],al
 10027dd:	add    BYTE PTR [rax],al
 10027df:	add    BYTE PTR [rax],ch
 10027e1:	jbe    0x10027e4
 10027e3:	add    BYTE PTR [rax],ah
	...
 10027ed:	add    BYTE PTR [rax],al
 10027ef:	add    BYTE PTR [rdx],ah
 10027f1:	add    eax,0x21993
 10027f6:	add    BYTE PTR [rax],al
 10027f8:	(bad)  
 10027f9:	jbe    0x10027fc
 10027fb:	add    BYTE PTR [rcx],al
 10027fd:	add    BYTE PTR [rax],al
 10027ff:	add    BYTE PTR [rax+0x76],dh
 1002802:	add    DWORD PTR [rax],eax
 1002804:	add    al,0x0
 1002806:	add    BYTE PTR [rax],al
 1002808:	cwde   
 1002809:	jbe    0x100280c
 100280b:	add    BYTE PTR [rax],ah
	...
 1002815:	add    BYTE PTR [rax],al
 1002817:	add    BYTE PTR [rdx],ah
 1002819:	add    eax,0x21993
 100281e:	add    BYTE PTR [rax],al
 1002820:	pushf  
 1002821:	ja     0x1002824
 1002823:	add    BYTE PTR [rcx],al
 1002825:	add    BYTE PTR [rax],al
 1002827:	add    BYTE PTR [rdi+rsi*2+0x40001],ch
 100282e:	add    BYTE PTR [rax],al
 1002830:	(bad)  
 1002831:	ja     0x1002834
 1002833:	add    BYTE PTR [rax+0x0],ah
	...
 100283e:	add    BYTE PTR [rax],al
 1002840:	and    al,BYTE PTR [rip+0x21993]        # 0x10241d9
 1002846:	add    BYTE PTR [rax],al
 1002848:	and    al,0x78
 100284a:	add    DWORD PTR [rax],eax
 100284c:	add    DWORD PTR [rax],eax
 100284e:	add    BYTE PTR [rax],al
 1002850:	xor    al,0x78
 1002852:	add    DWORD PTR [rax],eax
 1002854:	add    al,0x0
 1002856:	add    BYTE PTR [rax],al
 1002858:	pop    rsp
 1002859:	js     0x100285c
 100285b:	add    BYTE PTR [rax+0x0],ah
	...
 1002866:	add    BYTE PTR [rax],al
 1002868:	and    al,BYTE PTR [rip+0x61993]        # 0x1064201
 100286e:	add    BYTE PTR [rax],al
 1002870:	pushf  
 1002871:	js     0x1002874
	...
 100287b:	add    BYTE PTR [rax],cl
 100287d:	add    BYTE PTR [rax],al
 100287f:	add    ah,cl
 1002881:	js     0x1002884
	...
 100288f:	add    BYTE PTR [rdx],ah
 1002891:	add    eax,0x61993
 1002896:	add    BYTE PTR [rax],al
 1002898:	sub    BYTE PTR [rcx+0x1],bh
	...
 10028a3:	add    BYTE PTR [rdi],al
 10028a5:	add    BYTE PTR [rax],al
 10028a7:	add    BYTE PTR [rax+0x79],bl
 10028aa:	add    DWORD PTR [rax],eax
 10028ac:	and    BYTE PTR [rax],al
	...
 10028b6:	add    BYTE PTR [rax],al
 10028b8:	and    al,BYTE PTR [rip+0x101993]        # 0x1104251
 10028be:	add    BYTE PTR [rax],al
 10028c0:	mov    eax,0x179
 10028c5:	add    BYTE PTR [rax],al
 10028c7:	add    BYTE PTR [rax],al
 10028c9:	add    BYTE PTR [rax],al
 10028cb:	add    BYTE PTR [rip+0x38000000],dl        # 0x390028d1
 10028d1:	jp     0x10028d4
 10028d3:	add    BYTE PTR [rax],al
 10028d5:	add    DWORD PTR [rax],eax
	...
 10028df:	add    BYTE PTR [rdx],ah
 10028e1:	add    eax,0x291993
 10028e6:	add    BYTE PTR [rax],al
 10028e8:	add    al,0x7b
 10028ea:	add    DWORD PTR [rax],eax
	...
 10028f4:	and    al,0x0
 10028f6:	add    BYTE PTR [rax],al
 10028f8:	rex.WR jl 0x10028fc
 10028fb:	add    al,ah
 10028fd:	add    DWORD PTR [rax],eax
	...
 1002907:	add    BYTE PTR [rdx],ah
 1002909:	add    eax,0x31993
 100290e:	add    BYTE PTR [rax],al
 1002910:	xchg   esp,eax
 1002911:	jge    0x1002914
	...
 100291b:	add    BYTE PTR [rdi],al
 100291d:	add    BYTE PTR [rax],al
 100291f:	add    BYTE PTR [rbp+rdi*2+0xf00001],ch
	...
 100292e:	add    BYTE PTR [rax],al
 1002930:	and    al,BYTE PTR [rip+0x31993]        # 0x10342c9
 1002936:	add    BYTE PTR [rax],al
 1002938:	adc    BYTE PTR [rsi+0x1],bh
	...
 1002943:	add    BYTE PTR [rbx],al
 1002945:	add    BYTE PTR [rax],al
 1002947:	add    BYTE PTR [rax],ch
 1002949:	jle    0x100294c
 100294b:	add    BYTE PTR [rax],ah
	...
 1002955:	add    BYTE PTR [rax],al
 1002957:	add    BYTE PTR [rdx],ah
 1002959:	add    eax,0x31993
 100295e:	add    BYTE PTR [rax],al
 1002960:	push   rsp
 1002961:	jle    0x1002964
	...
 100296b:	add    BYTE PTR [rbx],al
 100296d:	add    BYTE PTR [rax],al
 100296f:	add    BYTE PTR [rsi+rdi*2+0x1],ch
 1002973:	add    BYTE PTR [rax],ah
	...
 100297d:	add    BYTE PTR [rax],al
 100297f:	add    BYTE PTR [rdx],ah
 1002981:	add    eax,0x31993
 1002986:	add    BYTE PTR [rax],al
 1002988:	test   al,0x7e
 100298a:	add    DWORD PTR [rax],eax
	...
 1002994:	add    eax,DWORD PTR [rax]
 1002996:	add    BYTE PTR [rax],al
 1002998:	sar    BYTE PTR [rsi+0x1],0x0
 100299c:	pop    rax
 100299d:	add    DWORD PTR [rax],eax
	...
 10029a7:	add    BYTE PTR [rdx],ah
 10029a9:	add    eax,0x11993
 10029ae:	add    BYTE PTR [rax],al
 10029b0:	call   0x1002b33
 10029b5:	add    BYTE PTR [rax],al
 10029b7:	add    BYTE PTR [rax],al
 10029b9:	add    BYTE PTR [rax],al
 10029bb:	add    BYTE PTR [rcx],al
 10029bd:	add    BYTE PTR [rax],al
 10029bf:	add    al,dh
 10029c1:	jle    0x10029c4
	...
 10029cf:	add    BYTE PTR [rdx],ah
 10029d1:	add    eax,0x11993
 10029d6:	add    BYTE PTR [rax],al
 10029d8:	or     BYTE PTR [rdi+0x1],bh
	...
 10029e3:	add    BYTE PTR [rcx],al
 10029e5:	add    BYTE PTR [rax],al
 10029e7:	add    BYTE PTR [rax],dl
 10029e9:	jg     0x10029ec
 10029eb:	add    BYTE PTR [rax],ah
	...
 10029f5:	add    BYTE PTR [rax],al
 10029f7:	add    BYTE PTR [rdx],ah
 10029f9:	add    eax,0x21993
 10029fe:	add    BYTE PTR [rax],al
 1002a00:	sub    BYTE PTR [rdi+0x1],bh
	...
 1002a0b:	add    BYTE PTR [rbx],al
 1002a0d:	add    BYTE PTR [rax],al
 1002a0f:	add    BYTE PTR [rax],bh
 1002a11:	jg     0x1002a14
 1002a13:	add    BYTE PTR [rax],ah
	...
 1002a1d:	add    BYTE PTR [rax],al
 1002a1f:	add    BYTE PTR [rdx],ah
 1002a21:	add    eax,0x21993
 1002a26:	add    BYTE PTR [rax],al
 1002a28:	fs jg  0x1002a2c
	...
 1002a33:	add    BYTE PTR [rbx],al
 1002a35:	add    BYTE PTR [rax],al
 1002a37:	add    BYTE PTR [rdi+rdi*2+0x1],dh
 1002a3b:	add    BYTE PTR [rax],ah
	...
 1002a45:	add    BYTE PTR [rax],al
 1002a47:	add    BYTE PTR [rdx],ah
 1002a49:	add    eax,0x31993
 1002a4e:	add    BYTE PTR [rax],al
 1002a50:	pushf  
 1002a51:	jg     0x1002a54
	...
 1002a5b:	add    BYTE PTR [rbx],al
 1002a5d:	add    BYTE PTR [rax],al
 1002a5f:	add    BYTE PTR [rdi+rdi*2+0x200001],dh
	...
 1002a6e:	add    BYTE PTR [rax],al
 1002a70:	and    al,BYTE PTR [rip+0x31993]        # 0x1034409
 1002a76:	add    BYTE PTR [rax],al
 1002a78:	loopne 0x1002af9
 1002a7a:	add    DWORD PTR [rax],eax
	...
 1002a84:	add    eax,DWORD PTR [rax]
 1002a86:	add    BYTE PTR [rax],al
 1002a88:	clc    
 1002a89:	jg     0x1002a8c
 1002a8b:	add    BYTE PTR [rax],ah
	...
 1002a95:	add    BYTE PTR [rax],al
 1002a97:	add    BYTE PTR [rdx],ah
 1002a99:	add    eax,0x31993
 1002a9e:	add    BYTE PTR [rax],al
 1002aa0:	cmp    al,0x80
 1002aa2:	add    DWORD PTR [rax],eax
	...
 1002aac:	add    eax,DWORD PTR [rax]
 1002aae:	add    BYTE PTR [rax],al
 1002ab0:	push   rsp
 1002ab1:	add    BYTE PTR [rcx],0x0
 1002ab4:	pop    rax
 1002ab5:	add    DWORD PTR [rax],eax
	...
 1002abf:	add    BYTE PTR [rdx],ah
 1002ac1:	add    eax,0x11993
 1002ac6:	add    BYTE PTR [rax],al
 1002ac8:	jl     0x1002a4a
 1002aca:	add    DWORD PTR [rax],eax
	...
 1002ad4:	add    DWORD PTR [rax],eax
 1002ad6:	add    BYTE PTR [rax],al
 1002ad8:	test   BYTE PTR [rax+0x1],al
	...
 1002ae6:	add    BYTE PTR [rax],al
 1002ae8:	and    al,BYTE PTR [rip+0x11993]        # 0x1014481
 1002aee:	add    BYTE PTR [rax],al
 1002af0:	pushf  
 1002af1:	add    BYTE PTR [rcx],0x0
	...
 1002afc:	add    DWORD PTR [rax],eax
 1002afe:	add    BYTE PTR [rax],al
 1002b00:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002b01:	add    BYTE PTR [rcx],0x0
 1002b04:	and    BYTE PTR [rax],al
	...
 1002b0e:	add    BYTE PTR [rax],al
 1002b10:	and    al,BYTE PTR [rip+0x21993]        # 0x10244a9
 1002b16:	add    BYTE PTR [rax],al
 1002b18:	mov    esp,0x180
 1002b1d:	add    BYTE PTR [rax],al
 1002b1f:	add    BYTE PTR [rax],al
 1002b21:	add    BYTE PTR [rax],al
 1002b23:	add    BYTE PTR [rbx],al
 1002b25:	add    BYTE PTR [rax],al
 1002b27:	add    ah,cl
 1002b29:	add    BYTE PTR [rcx],0x0
 1002b2c:	and    BYTE PTR [rax],al
	...
 1002b36:	add    BYTE PTR [rax],al
 1002b38:	and    al,BYTE PTR [rip+0x21993]        # 0x10244d1
 1002b3e:	add    BYTE PTR [rax],al
 1002b40:	clc    
 1002b41:	add    BYTE PTR [rcx],0x0
	...
 1002b4c:	add    eax,DWORD PTR [rax]
 1002b4e:	add    BYTE PTR [rax],al
 1002b50:	or     BYTE PTR [rcx+0x200001],al
	...
 1002b5e:	add    BYTE PTR [rax],al
 1002b60:	and    al,BYTE PTR [rip+0x31993]        # 0x10344f9
 1002b66:	add    BYTE PTR [rax],al
 1002b68:	xor    BYTE PTR [rcx+0x1],al
 1002b6e:	add    BYTE PTR [rax],al
 1002b70:	add    BYTE PTR [rax],al
 1002b72:	add    BYTE PTR [rax],al
 1002b74:	add    eax,DWORD PTR [rax]
 1002b76:	add    BYTE PTR [rax],al
 1002b78:	add    QWORD PTR [rcx],0x2000
	...
 1002b87:	add    BYTE PTR [rdx],ah
 1002b89:	add    eax,0x31993
 1002b8e:	add    BYTE PTR [rax],al
 1002b90:	je     0x1002b13
 1002b92:	add    DWORD PTR [rax],eax
	...
 1002b9c:	add    eax,DWORD PTR [rax]
 1002b9e:	add    BYTE PTR [rax],al
 1002ba0:	mov    WORD PTR [rcx+0x200001],es
	...
 1002bae:	add    BYTE PTR [rax],al
 1002bb0:	rex.WRB add BYTE PTR [r13+0x0],r12b
 1002bb4:	ins    DWORD PTR es:[rdi],dx
 1002bb5:	add    BYTE PTR [rdi+0x0],ch
 1002bb8:	jb     0x1002bba
 1002bba:	jns    0x1002bbc
 1002bbc:	and    BYTE PTR [rax],al
 1002bbe:	(bad)  
 1002bbf:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1002bc3:	add    BYTE PTR [rdi+0x0],ch
 1002bc6:	movsxd eax,DWORD PTR [rax]
 1002bc8:	(bad)  
 1002bc9:	add    BYTE PTR [rax+rax*1+0x69],dh
 1002bcd:	add    BYTE PTR [rdi+0x0],ch
 1002bd0:	outs   dx,BYTE PTR ds:[rsi]
 1002bd1:	add    BYTE PTR [rax],ah
 1002bd3:	add    BYTE PTR [rbp+0x0],ah
 1002bd6:	jb     0x1002bd8
 1002bd8:	jb     0x1002bda
 1002bda:	outs   dx,DWORD PTR ds:[rsi]
 1002bdb:	add    BYTE PTR [rdx+0x0],dh
 1002bde:	add    BYTE PTR [rax],al
 1002be0:	rex.WB
 1002be1:	rex.WRX
 1002be2:	rex.XB push r12
 1002be4:	pop    rcx
 1002be5:	push   rax
 1002be6:	rex.RB
 1002be7:	rex.W add BYTE PTR [rax],al
 1002bea:	add    BYTE PTR [rax],al
 1002bec:	add    BYTE PTR [rax],al
 1002bee:	add    BYTE PTR [rax],al
 1002bf0:	add    BYTE PTR gs:[rdx],bh
 1002bf3:	add    BYTE PTR [rax+rax*1+0x73],bl
 1002bf7:	add    BYTE PTR [rcx+0x0],dh
 1002bfa:	ins    BYTE PTR es:[rdi],dx
 1002bfb:	add    BYTE PTR [rcx],dh
 1002bfd:	add    BYTE PTR [rcx],dh
 1002bff:	add    BYTE PTR [rdi+0x0],bl
 1002c02:	ins    DWORD PTR es:[rdi],dx
 1002c03:	add    BYTE PTR [rcx+0x0],ah
 1002c06:	imul   eax,DWORD PTR [rax],0x5f006e
 1002c0c:	je     0x1002c0e
 1002c0e:	pop    rsp
 1002c0f:	add    BYTE PTR [rbx+0x0],dh
 1002c12:	jno    0x1002c14
 1002c14:	ins    BYTE PTR es:[rdi],dx
 1002c15:	add    BYTE PTR [rax+rax*1+0x6e],bl
 1002c19:	add    BYTE PTR [rax+rax*1+0x64],dh
 1002c1d:	add    BYTE PTR [rdx+0x0],ah
 1002c20:	ins    DWORD PTR es:[rdi],dx
 1002c21:	add    BYTE PTR [rbx+0x0],dh
 1002c24:	pop    rsp
 1002c25:	add    BYTE PTR [rbx+0x0],dh
 1002c28:	je     0x1002c2a
 1002c2a:	outs   dx,DWORD PTR ds:[rsi]
 1002c2b:	add    BYTE PTR [rdx+0x0],dh
 1002c2e:	add    BYTE PTR gs:[rsi+0x0],ch
 1002c32:	add    BYTE PTR [eax+eax*1+0x64],bl
 1002c37:	add    BYTE PTR [rbp+0x0],ch
 1002c3a:	jne    0x1002c3c
 1002c3c:	pop    rsp
 1002c3d:	add    BYTE PTR [rax+rax*1+0x6d],ah
 1002c41:	add    BYTE PTR [rax+0x0],dh
 1002c44:	ins    BYTE PTR es:[rdi],dx
 1002c45:	add    BYTE PTR [rax+rax*1+0x5c],ah
 1002c49:	add    BYTE PTR [rbx+0x0],dh
 1002c4c:	jno    0x1002c4e
 1002c4e:	ins    BYTE PTR es:[rdi],dx
 1002c4f:	add    BYTE PTR [rdi+0x0],dh
 1002c52:	jb     0x1002c54
 1002c54:	imul   eax,DWORD PTR [rax],0x650074
 1002c5a:	jb     0x1002c5c
 1002c5c:	add    BYTE PTR cs:[rcx+0x0],bh
 1002c60:	jne    0x1002c62
 1002c62:	imul   eax,DWORD PTR [rax],0x6f
 1002c65:	add    BYTE PTR [rsi+0x0],ch
 1002c68:	pop    rsp
 1002c69:	add    BYTE PTR [rcx+0x0],ch
 1002c6c:	outs   dx,BYTE PTR ds:[rsi]
 1002c6d:	add    BYTE PTR [rbx+0x0],ah
 1002c70:	pop    rsp
 1002c71:	add    BYTE PTR [rcx+0x0],bh
 1002c74:	imul   eax,DWORD PTR [rax],0x77
 1002c77:	add    BYTE PTR [rdi+0x0],bl
 1002c7a:	je     0x1002c7c
 1002c7c:	jns    0x1002c7e
 1002c7e:	jo     0x1002c80
 1002c80:	add    BYTE PTR gs:[rbx+0x0],dh
 1002c84:	add    BYTE PTR cs:[rax+0x0],ch
 1002c88:	js     0x1002c8a
 1002c8a:	js     0x1002c8c
 1002c8c:	add    BYTE PTR [rax],al
 1002c8e:	add    BYTE PTR [rax],al
 1002c90:	loopne 0x1002c59
 1002c92:	add    BYTE PTR [rcx],al
 1002c94:	add    BYTE PTR [rax],al
 1002c96:	add    BYTE PTR [rax],al
 1002c98:	add    dl,cl
 1002c9a:	add    BYTE PTR [rcx],al
 1002c9c:	add    BYTE PTR [rax],al
 1002c9e:	add    BYTE PTR [rax],al
 1002ca0:	add    al,dl
 1002ca2:	add    BYTE PTR [rcx],al
	...
 1002cb0:	rex.XB add BYTE PTR [r9+0x0],bl
 1002cb4:	rex.WXB add BYTE PTR [r15+0x0],dl
 1002cb8:	add    BYTE PTR [r13+0x0],sil
 1002cbc:	je     0x1002cbe
 1002cbe:	outs   dx,DWORD PTR ds:[rsi]
 1002cbf:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1002cc3:	add    BYTE PTR [rbx+0x0],ah
 1002cc6:	(bad)  
 1002cc7:	add    BYTE PTR [rax+rax*1+0x53],ch
 1002ccb:	add    BYTE PTR [rax+rax*1+0x72],dh
 1002ccf:	add    BYTE PTR [rcx+0x0],ch
 1002cd2:	outs   dx,BYTE PTR ds:[rsi]
 1002cd3:	add    BYTE PTR [rdi+0x0],ah
 1002cd6:	pop    rdi
 1002cd7:	add    BYTE PTR [rbp+0x0],al
 1002cda:	js     0x1002cdc
 1002cdc:	je     0x1002cde
 1002cde:	add    BYTE PTR gs:[rsi+0x0],ch
 1002ce2:	jae    0x1002ce4
 1002ce4:	imul   eax,DWORD PTR [rax],0x6e006f
 1002cea:	cmp    al,BYTE PTR [rax]
 1002cec:	cmp    al,BYTE PTR [rax]
 1002cee:	rex.XB add BYTE PTR [r15+0x0],bpl
 1002cf2:	jo     0x1002cf4
 1002cf4:	jns    0x1002cf6
 1002cf6:	rex.RX add BYTE PTR [rdx+0x0],r14b
 1002cfa:	outs   dx,DWORD PTR ds:[rsi]
 1002cfb:	add    BYTE PTR [rbp+0x0],ch
 1002cfe:	add    BYTE PTR [rax],al
 1002d00:	push   rbx
 1002d01:	add    BYTE PTR [rax+rax*1+0x72],dh
 1002d05:	add    BYTE PTR [rcx+0x0],ch
 1002d08:	outs   dx,BYTE PTR ds:[rsi]
 1002d09:	add    BYTE PTR [rdi+0x0],ah
 1002d0c:	rex.XB add BYTE PTR [r11+0x0],spl
 1002d10:	push   0x6f004300
 1002d15:	add    BYTE PTR [rax+0x0],dh
 1002d18:	jns    0x1002d1a
 1002d1a:	sub    BYTE PTR [rax],al
 1002d1c:	sub    DWORD PTR [rax],eax
 1002d1e:	and    BYTE PTR [rax],al
 1002d20:	pop    rbx
 1002d21:	add    BYTE PTR [rax],dh
 1002d23:	add    BYTE PTR [rax+0x0],bh
 1002d26:	and    eax,0x38003000
 1002d2b:	add    BYTE PTR [rax+rax*1+0x78],ch
 1002d2f:	add    BYTE PTR [rbp+0x0],bl
 1002d32:	add    BYTE PTR [rax],al
 1002d34:	add    BYTE PTR [rax],al
 1002d36:	add    BYTE PTR [rax],al
 1002d38:	nop
 1002d39:	rol    BYTE PTR [rax],1
 1002d3b:	add    DWORD PTR [rax],eax
 1002d3d:	add    BYTE PTR [rax],al
 1002d3f:	add    BYTE PTR [rax-0x2f],dl
 1002d42:	add    BYTE PTR [rcx],al
 1002d44:	add    BYTE PTR [rax],al
 1002d46:	add    BYTE PTR [rax],al
 1002d48:	loopne 0x1002d1b
 1002d4a:	add    BYTE PTR [rcx],al
 1002d4c:	add    BYTE PTR [rax],al
 1002d4e:	add    BYTE PTR [rax],al
 1002d50:	(bad)  
 1002d51:	rol    BYTE PTR [rax],cl
 1002d53:	add    DWORD PTR [rax],eax
 1002d55:	add    BYTE PTR [rax],al
 1002d57:	add    al,dl
 1002d59:	(bad)  
 1002d5a:	add    BYTE PTR [rcx],al
 1002d5c:	add    BYTE PTR [rax],al
 1002d5e:	add    BYTE PTR [rax],al
 1002d60:	lock icebp 
 1002d62:	add    BYTE PTR [rcx],al
 1002d64:	add    BYTE PTR [rax],al
 1002d66:	add    BYTE PTR [rax],al
 1002d68:	push   rbx
 1002d69:	rex.RB
 1002d6a:	rex.XB push r11
 1002d6c:	rex.RB
 1002d6d:	rex.XB push r10
 1002d6f:	rex.XB add BYTE PTR [r8],al
	...
 1002d7e:	add    BYTE PTR [rax],al
 1002d80:	add    BYTE PTR gs:[rdx],bh
 1002d83:	add    BYTE PTR [rax+rax*1+0x73],bl
 1002d87:	add    BYTE PTR [rcx+0x0],dh
 1002d8a:	ins    BYTE PTR es:[rdi],dx
 1002d8b:	add    BYTE PTR [rcx],dh
 1002d8d:	add    BYTE PTR [rcx],dh
 1002d8f:	add    BYTE PTR [rdi+0x0],bl
 1002d92:	ins    DWORD PTR es:[rdi],dx
 1002d93:	add    BYTE PTR [rcx+0x0],ah
 1002d96:	imul   eax,DWORD PTR [rax],0x5f006e
 1002d9c:	je     0x1002d9e
 1002d9e:	pop    rsp
 1002d9f:	add    BYTE PTR [rbx+0x0],dh
 1002da2:	jno    0x1002da4
 1002da4:	ins    BYTE PTR es:[rdi],dx
 1002da5:	add    BYTE PTR [rax+rax*1+0x6e],bl
 1002da9:	add    BYTE PTR [rax+rax*1+0x64],dh
 1002dad:	add    BYTE PTR [rdx+0x0],ah
 1002db0:	ins    DWORD PTR es:[rdi],dx
 1002db1:	add    BYTE PTR [rbx+0x0],dh
 1002db4:	pop    rsp
 1002db5:	add    BYTE PTR [rbx+0x0],dh
 1002db8:	je     0x1002dba
 1002dba:	outs   dx,DWORD PTR ds:[rsi]
 1002dbb:	add    BYTE PTR [rdx+0x0],dh
 1002dbe:	add    BYTE PTR gs:[rsi+0x0],ch
 1002dc2:	add    BYTE PTR [eax+eax*1+0x64],bl
 1002dc7:	add    BYTE PTR [rbp+0x0],ch
 1002dca:	jne    0x1002dcc
 1002dcc:	pop    rsp
 1002dcd:	add    BYTE PTR [rax+rax*1+0x6d],ah
 1002dd1:	add    BYTE PTR [rax+0x0],dh
 1002dd4:	ins    BYTE PTR es:[rdi],dx
 1002dd5:	add    BYTE PTR [rax+rax*1+0x5c],ah
 1002dd9:	add    BYTE PTR [rbx+0x0],dh
 1002ddc:	jno    0x1002dde
 1002dde:	ins    BYTE PTR es:[rdi],dx
 1002ddf:	add    BYTE PTR [rdi+0x0],dh
 1002de2:	jb     0x1002de4
 1002de4:	imul   eax,DWORD PTR [rax],0x650074
 1002dea:	jb     0x1002dec
 1002dec:	add    BYTE PTR cs:[rcx+0x0],bh
 1002df0:	jne    0x1002df2
 1002df2:	imul   eax,DWORD PTR [rax],0x6f
 1002df5:	add    BYTE PTR [rsi+0x0],ch
 1002df8:	pop    rsp
 1002df9:	add    BYTE PTR [rbx+0x0],dh
 1002dfc:	add    BYTE PTR gs:[rbx+0x0],ah
 1002e00:	pop    rsp
 1002e01:	add    BYTE PTR [rbx+0x0],dh
 1002e04:	add    BYTE PTR gs:[rbx+0x0],ah
 1002e08:	jne    0x1002e0a
 1002e0a:	jb     0x1002e0c
 1002e0c:	imul   eax,DWORD PTR [rax],0x790074
 1002e12:	add    BYTE PTR cs:[rbx+0x0],ah
 1002e16:	js     0x1002e18
 1002e18:	js     0x1002e1a
 1002e1a:	add    BYTE PTR [rax],al
 1002e1c:	add    BYTE PTR [rax],al
 1002e1e:	add    BYTE PTR [rax],al
 1002e20:	rex.XB add BYTE PTR [r9+0x0],al
 1002e24:	jne    0x1002e26
 1002e26:	je     0x1002e28
 1002e28:	outs   dx,DWORD PTR ds:[rsi]
 1002e29:	add    BYTE PTR [rbx+0x0],dl
 1002e2c:	imul   eax,DWORD PTR [rax],0x3a0064
 1002e32:	cmp    al,BYTE PTR [rax]
 1002e34:	rex.XB add BYTE PTR [r10+0x0],sil
 1002e38:	add    BYTE PTR gs:[rcx+0x0],ah
 1002e3c:	je     0x1002e3e
 1002e3e:	add    BYTE PTR gs:[rdx+0x0],al
 1002e42:	(bad)  
 1002e43:	add    BYTE PTR [rbx+0x0],dh
 1002e46:	imul   eax,DWORD PTR [rax],0x530063
 1002e4c:	imul   eax,DWORD PTR [rax],0x64
 1002e52:	add    BYTE PTR [rax],al
 1002e54:	add    BYTE PTR [rax],al
 1002e56:	add    BYTE PTR [rax],al
 1002e58:	rex.XB add BYTE PTR [r10+0x0],sil
 1002e5c:	add    BYTE PTR gs:[rcx+0x0],ah
 1002e60:	je     0x1002e62
 1002e62:	add    BYTE PTR gs:[rdi+0x0],dl
 1002e66:	add    BYTE PTR gs:[rax+rax*1+0x6c],ch
 1002e6b:	add    BYTE PTR [rbx+0x0],cl
 1002e6e:	outs   dx,BYTE PTR ds:[rsi]
 1002e6f:	add    BYTE PTR [rdi+0x0],ch
 1002e72:	ja     0x1002e74
 1002e74:	outs   dx,BYTE PTR ds:[rsi]
 1002e75:	add    BYTE PTR [rbx+0x0],dl
 1002e78:	imul   eax,DWORD PTR [rax],0x540064
 1002e7e:	jns    0x1002e80
 1002e80:	jo     0x1002e82
 1002e82:	add    BYTE PTR gs:[rax],al
 1002e85:	add    BYTE PTR [rax],al
 1002e87:	add    BYTE PTR [rax-0xc],dl
 1002e8a:	add    BYTE PTR [rcx],al
 1002e8c:	add    BYTE PTR [rax],al
 1002e8e:	add    BYTE PTR [rax],al
 1002e90:	loopne 0x1002e86
 1002e92:	add    BYTE PTR [rcx],al
 1002e94:	add    BYTE PTR [rax],al
 1002e96:	add    BYTE PTR [rax],al
 1002e98:	movabs al,ds:0x43000000000100f5
 1002ea1:	add    BYTE PTR [rcx+0x0],bl
 1002ea4:	rex.WXB add BYTE PTR [r15+0x0],dl
 1002ea8:	push   rbx
 1002ea9:	add    BYTE PTR [rcx+0x0],ch
 1002eac:	add    BYTE PTR fs:[rbx+0x0],al
 1002eb0:	outs   dx,DWORD PTR ds:[rsi]
 1002eb1:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1002eb5:	add    BYTE PTR [rbp+0x0],ah
 1002eb8:	movsxd eax,DWORD PTR [rax]
 1002eba:	je     0x1002ebc
 1002ebc:	imul   eax,DWORD PTR [rax],0x6e006f
 1002ec2:	cmp    al,BYTE PTR [rax]
 1002ec4:	cmp    al,BYTE PTR [rax]
 1002ec6:	add    BYTE PTR [r8+rax*1+0x64],spl
 1002ecb:	add    BYTE PTR [rdi+0x0],dl
 1002ece:	add    BYTE PTR gs:[rax+rax*1+0x6c],ch
 1002ed3:	add    BYTE PTR [rbx+0x0],cl
 1002ed6:	outs   dx,BYTE PTR ds:[rsi]
 1002ed7:	add    BYTE PTR [rdi+0x0],ch
 1002eda:	ja     0x1002edc
 1002edc:	outs   dx,BYTE PTR ds:[rsi]
 1002edd:	add    BYTE PTR [rbx+0x0],dl
 1002ee0:	imul   eax,DWORD PTR [rax],0x64
	...
 1002eee:	add    BYTE PTR [rax],al
 1002ef0:	rex.XB add BYTE PTR [r10+0x0],sil
 1002ef4:	add    BYTE PTR gs:[rcx+0x0],ah
 1002ef8:	je     0x1002efa
 1002efa:	add    BYTE PTR gs:[rdi+0x0],dl
 1002efe:	add    BYTE PTR gs:[rax+rax*1+0x6c],ch
 1002f03:	add    BYTE PTR [rbx+0x0],cl
 1002f06:	outs   dx,BYTE PTR ds:[rsi]
 1002f07:	add    BYTE PTR [rdi+0x0],ch
 1002f0a:	ja     0x1002f0c
 1002f0c:	outs   dx,BYTE PTR ds:[rsi]
 1002f0d:	add    BYTE PTR [rbx+0x0],dl
 1002f10:	imul   eax,DWORD PTR [rax],0x280064
 1002f16:	je     0x1002f18
 1002f18:	jns    0x1002f1a
 1002f1a:	jo     0x1002f1c
 1002f1c:	add    BYTE PTR gs:[rax+rax*1],ch
 1002f20:	and    BYTE PTR [rax],al
 1002f22:	rex.WRX add BYTE PTR [rbp+0x0],r10b
 1002f26:	rex.WR add BYTE PTR [rax+rax*1+0x2c],r9b
 1002f2b:	add    BYTE PTR [rax],ah
 1002f2d:	add    BYTE PTR [rsi+0x0],cl
 1002f30:	push   rbp
 1002f31:	add    BYTE PTR [rax+rax*1+0x4c],cl
 1002f35:	add    BYTE PTR [rax+rax*1],ch
 1002f38:	and    BYTE PTR [rax],al
 1002f3a:	add    BYTE PTR es:[rax+rax*1+0x77],ah
 1002f3f:	add    BYTE PTR [rbx+0x0],dl
 1002f42:	imul   eax,DWORD PTR [rax],0x290064
	...
 1002f50:	xor    dh,dh
 1002f52:	add    BYTE PTR [rcx],al
 1002f54:	add    BYTE PTR [rax],al
 1002f56:	add    BYTE PTR [rax],al
 1002f58:	push   rax
 1002f59:	clc    
 1002f5a:	add    BYTE PTR [rcx],al
 1002f5c:	add    BYTE PTR [rax],al
 1002f5e:	add    BYTE PTR [rax],al
 1002f60:	loopne 0x1002f5a
 1002f62:	add    BYTE PTR [rcx],al
 1002f64:	add    BYTE PTR [rax],al
 1002f66:	add    BYTE PTR [rax],al
 1002f68:	movabs al,ds:0x43000000000100f9
 1002f71:	add    BYTE PTR [rdx+0x0],dh
 1002f74:	add    BYTE PTR gs:[rcx+0x0],ah
 1002f78:	je     0x1002f7a
 1002f7a:	add    BYTE PTR gs:[rdi+0x0],dl
 1002f7e:	add    BYTE PTR gs:[rax+rax*1+0x6c],ch
 1002f83:	add    BYTE PTR [rbx+0x0],cl
 1002f86:	outs   dx,BYTE PTR ds:[rsi]
 1002f87:	add    BYTE PTR [rdi+0x0],ch
 1002f8a:	ja     0x1002f8c
 1002f8c:	outs   dx,BYTE PTR ds:[rsi]
 1002f8d:	add    BYTE PTR [rbx+0x0],dl
 1002f90:	imul   eax,DWORD PTR [rax],0x280064
 1002f96:	je     0x1002f98
 1002f98:	jns    0x1002f9a
 1002f9a:	jo     0x1002f9c
 1002f9c:	add    BYTE PTR gs:[rax+rax*1],ch
 1002fa0:	and    BYTE PTR [rax],al
 1002fa2:	rex.WRX add BYTE PTR [rbp+0x0],r10b
 1002fa6:	rex.WR add BYTE PTR [rax+rax*1+0x2c],r9b
 1002fab:	add    BYTE PTR [rax],ah
 1002fad:	add    BYTE PTR [rax+0x0],dh
 1002fb0:	push   rbx
 1002fb1:	add    BYTE PTR [rcx+0x0],cl
 1002fb4:	add    BYTE PTR [rax+rax*1],r13b
 1002fb8:	and    BYTE PTR [rax],al
 1002fba:	pop    rbx
 1002fbb:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65009bc1
 1002fc1:	add    BYTE PTR [rbp+0x0],bl
 1002fc4:	sub    DWORD PTR [rax],eax
 1002fc6:	add    BYTE PTR [rax],al
 1002fc8:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1002fcc:	outs   dx,DWORD PTR ds:[rsi]
 1002fcd:	add    BYTE PTR [rbx+0x0],ch
 1002fd0:	jne    0x1002fd2
 1002fd2:	jo     0x1002fd4
 1002fd4:	add    BYTE PTR [r11+0x0],spl
 1002fd8:	movsxd eax,DWORD PTR [rax]
 1002fda:	outs   dx,DWORD PTR ds:[rsi]
 1002fdb:	add    BYTE PTR [rbp+0x0],dh
 1002fde:	outs   dx,BYTE PTR ds:[rsi]
 1002fdf:	add    BYTE PTR [rax+rax*1+0x53],dh
 1002fe3:	add    BYTE PTR [rcx+0x0],ch
 1002fe6:	add    BYTE PTR fs:[rax],ch
 1002fe9:	add    BYTE PTR [rcx],ch
 1002feb:	add    BYTE PTR [rax],al
 1002fed:	add    BYTE PTR [rax],al
 1002fef:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1002ff3:	add    BYTE PTR [rdi+0x0],ch
 1002ff6:	imul   eax,DWORD PTR [rax],0x75
 1002ff9:	add    BYTE PTR [rax+0x0],dh
 1002ffc:	and    BYTE PTR [rax],al
 1002ffe:	data16 add BYTE PTR [rcx+0x0],ah
 1003002:	imul   eax,DWORD PTR [rax],0x65006c
 1003008:	add    BYTE PTR fs:[rax],ah
 100300b:	add    BYTE PTR [rsi+0x0],ah
 100300e:	outs   dx,DWORD PTR ds:[rsi]
 100300f:	add    BYTE PTR [rdx+0x0],dh
 1003012:	and    BYTE PTR [rax],al
 1003014:	push   rdi
 1003015:	add    BYTE PTR [rcx+0x0],ch
 1003018:	outs   dx,BYTE PTR ds:[rsi]
 1003019:	add    BYTE PTR [rdx+0x0],al
 100301c:	jne    0x100301e
 100301e:	imul   eax,DWORD PTR [rax],0x74006c
 1003024:	imul   eax,DWORD PTR [rax],0x42006e
 100302a:	(bad)  
 100302b:	add    BYTE PTR [rbx+0x0],ah
 100302e:	imul   eax,DWORD PTR [rax],0x75
 1003031:	add    BYTE PTR [rax+0x0],dh
 1003034:	rex.WRXB add BYTE PTR [r8+0x0],r14b
 1003038:	add    BYTE PTR gs:[rdx+0x0],dh
 100303c:	(bad)  
 100303d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003041:	add    BYTE PTR [rdx+0x0],dh
 1003044:	jae    0x1003046
 1003046:	push   rbx
 1003047:	add    BYTE PTR [rcx+0x0],ch
 100304a:	add    BYTE PTR fs:[rax],al
 100304d:	add    BYTE PTR [rax],al
 100304f:	add    BYTE PTR [rbx+0x0],al
 1003052:	pop    rcx
 1003053:	add    BYTE PTR [rbx+0x0],cl
 1003056:	push   rdi
 1003057:	add    BYTE PTR [rbx+0x0],dl
 100305a:	imul   eax,DWORD PTR [rax],0x430064
 1003060:	outs   dx,DWORD PTR ds:[rsi]
 1003061:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1003065:	add    BYTE PTR [rbp+0x0],ah
 1003068:	movsxd eax,DWORD PTR [rax]
 100306a:	je     0x100306c
 100306c:	imul   eax,DWORD PTR [rax],0x6e006f
 1003072:	cmp    al,BYTE PTR [rax]
 1003074:	cmp    al,BYTE PTR [rax]
 1003076:	push   rsi
 1003077:	add    BYTE PTR [rbp+0x0],ah
 100307a:	jb     0x100307c
 100307c:	imul   eax,DWORD PTR [rax],0x790066
 1003082:	rex.WB add BYTE PTR [r11+0x0],sil
 1003086:	rex.WR add BYTE PTR [rdi+0x0],r13b
 100308a:	movsxd eax,DWORD PTR [rax]
 100308c:	(bad)  
 100308d:	add    BYTE PTR [rax+rax*1+0x0],ch
 1003091:	add    BYTE PTR [rax],al
 1003093:	add    BYTE PTR [rax],al
 1003095:	add    BYTE PTR [rax],al
 1003097:	add    BYTE PTR [rdi+0x0],al
 100309a:	add    BYTE PTR gs:[rax+rax*1+0x43],dh
 100309f:	add    BYTE PTR [rdi+0x0],ch
 10030a2:	ins    DWORD PTR es:[rdi],dx
 10030a3:	add    BYTE PTR [rax+0x0],dh
 10030a6:	jne    0x10030a8
 10030a8:	je     0x10030aa
 10030aa:	add    BYTE PTR gs:[rdx+0x0],dh
 10030ae:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 10030b2:	ins    DWORD PTR es:[rdi],dx
 10030b3:	add    BYTE PTR [rbp+0x0],ah
 10030b6:	push   rdi
	...
 10030bf:	add    BYTE PTR [rbx+0x0],al
 10030c2:	pop    rcx
 10030c3:	add    BYTE PTR [rbx+0x0],cl
 10030c6:	push   rdi
 10030c7:	add    BYTE PTR [rbx+0x0],dl
 10030ca:	imul   eax,DWORD PTR [rax],0x430064
 10030d0:	outs   dx,DWORD PTR ds:[rsi]
 10030d1:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10030d5:	add    BYTE PTR [rbp+0x0],ah
 10030d8:	movsxd eax,DWORD PTR [rax]
 10030da:	je     0x10030dc
 10030dc:	imul   eax,DWORD PTR [rax],0x6e006f
 10030e2:	cmp    al,BYTE PTR [rax]
 10030e4:	cmp    al,BYTE PTR [rax]
 10030e6:	rex.WB add BYTE PTR [r14+0x0],bpl
 10030ea:	imul   eax,DWORD PTR [rax],0x690074
 10030f0:	(bad)  
 10030f1:	add    BYTE PTR [rax+rax*1+0x69],ch
 10030f5:	add    BYTE PTR [rdx+0x0],bh
 10030f8:	add    BYTE PTR gs:[rax],al
 10030fb:	add    BYTE PTR [rax],al
 10030fd:	add    BYTE PTR [rax],al
 10030ff:	add    BYTE PTR [rbx+0x0],dl
 1003102:	add    BYTE PTR gs:[rax+rax*1+0x4f],dh
 1003107:	add    BYTE PTR [rdi+0x0],dh
 100310a:	outs   dx,BYTE PTR ds:[rsi]
 100310b:	add    BYTE PTR [rbp+0x0],ah
 100310e:	jb     0x1003110
	...
 1003118:	push   rbx
 1003119:	add    BYTE PTR [rbp+0x0],ah
 100311c:	je     0x100311e
 100311e:	rex.RXB add BYTE PTR [r10+0x0],r14b
 1003122:	outs   dx,DWORD PTR ds:[rsi]
 1003123:	add    BYTE PTR [rbp+0x0],dh
 1003126:	jo     0x1003128
	...
 1003130:	ins    DWORD PTR es:[rdi],dx
 1003131:	add    BYTE PTR [rdi+0x0],bl
 1003134:	push   rbx
 1003135:	add    BYTE PTR [rax+rax*1+0x2e],al
 1003139:	add    BYTE PTR [rcx+0x0],al
 100313c:	ins    BYTE PTR es:[rdi],dx
 100313d:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1003141:	add    BYTE PTR [rdi+0x0],dh
 1003144:	sub    BYTE PTR [rax],al
 1003146:	and    eax,0x2c007300
 100314b:	add    BYTE PTR [rax],ah
 100314d:	add    BYTE PTR [rbx+0x0],al
 1003150:	rex.WRXB add BYTE PTR [r13+0x0],r9b
 1003154:	pop    rdi
 1003155:	add    BYTE PTR [rdx+0x0],dl
 1003158:	rex.WB add BYTE PTR [r15+0x0],al
 100315c:	rex.W add BYTE PTR [rax+rax*1+0x53],dl
 1003161:	add    BYTE PTR [rdi+0x0],bl
 1003164:	add    BYTE PTR [r8+0x0],r11b
 1003168:	add    BYTE PTR [r11+0x0],r8b
 100316c:	push   rbp
 100316d:	add    BYTE PTR [rax+rax*1+0x45],dl
 1003171:	add    BYTE PTR [rcx],ch
 1003173:	add    BYTE PTR [rbx],bh
	...
 100317d:	add    BYTE PTR [rax],al
 100317f:	add    BYTE PTR [rbp+0x0],ch
 1003182:	pop    rdi
 1003183:	add    BYTE PTR [rbx+0x0],dl
 1003186:	add    BYTE PTR [rsi],r13b
 1003189:	add    BYTE PTR [rax+rax*1+0x65],al
 100318d:	add    BYTE PTR [rsi+0x0],ch
 1003190:	jns    0x1003192
 1003192:	sub    BYTE PTR [rax],al
 1003194:	and    eax,0x2c007300
 1003199:	add    BYTE PTR [rax],ah
 100319b:	add    BYTE PTR [rbx+0x0],al
 100319e:	rex.WRXB add BYTE PTR [r13+0x0],r9b
 10031a2:	pop    rdi
 10031a3:	add    BYTE PTR [rdx+0x0],dl
 10031a6:	rex.WB add BYTE PTR [r15+0x0],al
 10031aa:	rex.W add BYTE PTR [rax+rax*1+0x53],dl
 10031af:	add    BYTE PTR [rdi+0x0],bl
 10031b2:	add    BYTE PTR [r8+0x0],r11b
 10031b6:	add    BYTE PTR [r11+0x0],r8b
 10031ba:	push   rbp
 10031bb:	add    BYTE PTR [rax+rax*1+0x45],dl
 10031bf:	add    BYTE PTR [rcx],ch
 10031c1:	add    BYTE PTR [rbx],bh
	...
 10031cf:	add    BYTE PTR [rbx+0x0],al
 10031d2:	pop    rcx
 10031d3:	add    BYTE PTR [rbx+0x0],cl
 10031d6:	push   rdi
 10031d7:	add    BYTE PTR [rcx+0x0],al
 10031da:	jne    0x10031dc
 10031dc:	je     0x10031de
 10031de:	outs   dx,DWORD PTR ds:[rsi]
 10031df:	add    BYTE PTR [rax+rax*1+0x6f],cl
 10031e3:	add    BYTE PTR [rbx+0x0],ah
 10031e6:	(bad)  
 10031e7:	add    BYTE PTR [rax+rax*1+0x50],ch
 10031eb:	add    BYTE PTR [rax+rax*1+0x72],dh
 10031ef:	add    BYTE PTR [rdi+0x0],bl
 10031f2:	add    BYTE PTR [r8+0x0],r15b
 10031f6:	je     0x10031f8
 10031f8:	add    BYTE PTR gs:[rsi+0x0],ch
 10031fc:	jae    0x10031fe
 10031fe:	imul   eax,DWORD PTR [rax],0x6e006f
 1003204:	cmp    al,BYTE PTR [rax]
 1003206:	cmp    al,BYTE PTR [rax]
 1003208:	add    BYTE PTR [r8+rax*1+0x6c],bpl
 100320d:	add    BYTE PTR [rdi+0x0],ch
 1003210:	movsxd eax,DWORD PTR [rax]
 1003212:	(bad)  
 1003213:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003217:	add    BYTE PTR [rdx+0x0],al
 100321a:	jns    0x100321c
 100321c:	je     0x100321e
 100321e:	add    BYTE PTR gs:[rbx+0x0],dh
 1003222:	add    BYTE PTR [rax],al
 1003224:	add    BYTE PTR [rax],al
 1003226:	add    BYTE PTR [rax],al
 1003228:	and    al,BYTE PTR [rip+0x11993]        # 0x1014bc1
 100322e:	add    BYTE PTR [rax],al
 1003230:	mov    esp,0x181
 1003235:	add    BYTE PTR [rax],al
 1003237:	add    BYTE PTR [rax],al
 1003239:	add    BYTE PTR [rax],al
 100323b:	add    BYTE PTR [rbx],al
 100323d:	add    BYTE PTR [rax],al
 100323f:	add    ah,al
 1003241:	add    DWORD PTR [rcx],0x0
	...
 100324f:	add    BYTE PTR [rdx],ah
 1003251:	add    eax,0x11993
 1003256:	add    BYTE PTR [rax],al
 1003258:	in     al,dx
 1003259:	add    DWORD PTR [rcx],0x0
 100325f:	add    BYTE PTR [rax],al
 1003261:	add    BYTE PTR [rax],al
 1003263:	add    BYTE PTR [rbx],al
 1003265:	add    BYTE PTR [rax],al
 1003267:	add    ah,dh
 1003269:	add    DWORD PTR [rcx],0x2000
	...
 1003277:	add    BYTE PTR [rdx],ah
 1003279:	add    eax,0x51993
 100327e:	add    BYTE PTR [rax],al
 1003280:	xor    BYTE PTR [rdx+0x1],al
 1003286:	add    BYTE PTR [rax],al
 1003288:	add    BYTE PTR [rax],al
 100328a:	add    BYTE PTR [rax],al
 100328c:	or     DWORD PTR [rax],eax
 100328e:	add    BYTE PTR [rax],al
 1003290:	pop    rax
 1003291:	(bad)  
 1003292:	add    DWORD PTR [rax],eax
 1003294:	push   0x1
 1003299:	add    BYTE PTR [rax],al
 100329b:	add    BYTE PTR [rax],al
 100329d:	add    BYTE PTR [rax],al
 100329f:	add    BYTE PTR [rdx],ah
 10032a1:	add    eax,0x71993
 10032a6:	add    BYTE PTR [rax],al
 10032a8:	vpshufb xmm0,xmm15,XMMWORD PTR [r8]
 10032ad:	add    BYTE PTR [rax],al
 10032af:	add    BYTE PTR [rax],al
 10032b1:	add    BYTE PTR [rax],al
 10032b3:	add    BYTE PTR [rcx],cl
 10032b5:	add    BYTE PTR [rax],al
 10032b7:	add    ah,bh
 10032b9:	(bad)  
 10032ba:	add    DWORD PTR [rax],eax
 10032bc:	add    BYTE PTR [rcx],0x0
	...
 10032c7:	add    BYTE PTR [rdx],ah
 10032c9:	add    eax,0x31993
 10032ce:	add    BYTE PTR [rax],al
 10032d0:	add    DWORD PTR fs:[rcx],0x0
	...
 10032dc:	add    eax,0x7c000000
 10032e1:	add    DWORD PTR [rcx],0x0
 10032e4:	loopne 0x10032e6
	...
 10032ee:	add    BYTE PTR [rax],al
 10032f0:	push   rsp
 10032f1:	add    BYTE PTR [rdx+0x0],dl
 10032f4:	push   rbp
 10032f5:	add    BYTE PTR [rbp+0x0],al
	...
 1003300:	rex.RX add BYTE PTR [rcx+0x0],r8b
 1003304:	rex.WR add BYTE PTR [rbx+0x0],r10b
 1003308:	add    BYTE PTR [r8],r8b
 100330b:	add    BYTE PTR [rax],al
 100330d:	add    BYTE PTR [rax],al
 100330f:	add    BYTE PTR [rip+0x3a007300],ah        # 0x3b00a615
 1003315:	add    BYTE PTR [rax],ah
 1003317:	add    BYTE PTR [rdx+0x0],dl
 100331a:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 100331f:	add    BYTE PTR [rdx+0x0],dh
 1003322:	outs   dx,BYTE PTR ds:[rsi]
 1003323:	add    BYTE PTR [rcx+0x0],ch
 1003326:	outs   dx,BYTE PTR ds:[rsi]
 1003327:	add    BYTE PTR [rdi+0x0],ah
 100332a:	and    BYTE PTR [rax],al
 100332c:	(bad)  
 100332d:	add    BYTE PTR [rdi+0x0],ch
 1003330:	outs   dx,DWORD PTR ds:[rsi]
 1003331:	add    BYTE PTR [rax+rax*1+0x3a],ch
 1003335:	add    BYTE PTR [rax],ah
 1003337:	add    BYTE PTR [rip+0x7300],ah        # 0x100a63d
 100333d:	add    BYTE PTR [rax],al
 100333f:	add    BYTE PTR [rdx+0x45],dl
 1003342:	rex.RXB push r10
 1003344:	rex.RB
 1003345:	rex.RXB push r11
 1003347:	rex.XB add BYTE PTR [r8],al
 100334a:	add    BYTE PTR [rax],al
 100334c:	add    BYTE PTR [rax],al
 100334e:	add    BYTE PTR [rax],al
 1003350:	add    BYTE PTR gs:[rdx],bh
 1003353:	add    BYTE PTR [rax+rax*1+0x73],bl
 1003357:	add    BYTE PTR [rcx+0x0],dh
 100335a:	ins    BYTE PTR es:[rdi],dx
 100335b:	add    BYTE PTR [rcx],dh
 100335d:	add    BYTE PTR [rcx],dh
 100335f:	add    BYTE PTR [rdi+0x0],bl
 1003362:	ins    DWORD PTR es:[rdi],dx
 1003363:	add    BYTE PTR [rcx+0x0],ah
 1003366:	imul   eax,DWORD PTR [rax],0x5f006e
 100336c:	je     0x100336e
 100336e:	pop    rsp
 100336f:	add    BYTE PTR [rbx+0x0],dh
 1003372:	jno    0x1003374
 1003374:	ins    BYTE PTR es:[rdi],dx
 1003375:	add    BYTE PTR [rax+rax*1+0x6e],bl
 1003379:	add    BYTE PTR [rax+rax*1+0x64],dh
 100337d:	add    BYTE PTR [rdx+0x0],ah
 1003380:	ins    DWORD PTR es:[rdi],dx
 1003381:	add    BYTE PTR [rbx+0x0],dh
 1003384:	pop    rsp
 1003385:	add    BYTE PTR [rbx+0x0],dh
 1003388:	je     0x100338a
 100338a:	outs   dx,DWORD PTR ds:[rsi]
 100338b:	add    BYTE PTR [rdx+0x0],dh
 100338e:	add    BYTE PTR gs:[rsi+0x0],ch
 1003392:	add    BYTE PTR [eax+eax*1+0x64],bl
 1003397:	add    BYTE PTR [rbp+0x0],ch
 100339a:	jne    0x100339c
 100339c:	pop    rsp
 100339d:	add    BYTE PTR [rax+rax*1+0x6d],ah
 10033a1:	add    BYTE PTR [rax+0x0],dh
 10033a4:	ins    BYTE PTR es:[rdi],dx
 10033a5:	add    BYTE PTR [rax+rax*1+0x5c],ah
 10033a9:	add    BYTE PTR [rbx+0x0],dh
 10033ac:	jno    0x10033ae
 10033ae:	ins    BYTE PTR es:[rdi],dx
 10033af:	add    BYTE PTR [rdi+0x0],dh
 10033b2:	jb     0x10033b4
 10033b4:	imul   eax,DWORD PTR [rax],0x650074
 10033ba:	jb     0x10033bc
 10033bc:	add    BYTE PTR cs:[rcx+0x0],bh
 10033c0:	jne    0x10033c2
 10033c2:	imul   eax,DWORD PTR [rax],0x6f
 10033c5:	add    BYTE PTR [rsi+0x0],ch
 10033c8:	pop    rsp
 10033c9:	add    BYTE PTR [rdx+0x0],dh
 10033cc:	add    BYTE PTR gs:[rdi+0x0],ah
 10033d0:	imul   eax,DWORD PTR [rax],0x740073
 10033d6:	jb     0x10033d8
 10033d8:	jns    0x10033da
 10033da:	pop    rsp
 10033db:	add    BYTE PTR [rdx+0x0],dh
 10033de:	add    BYTE PTR gs:[rdi+0x0],ah
 10033e2:	imul   eax,DWORD PTR [rax],0x740073
 10033e8:	jb     0x10033ea
 10033ea:	jns    0x10033ec
 10033ec:	add    BYTE PTR cs:[rbx+0x0],ah
 10033f0:	js     0x10033f2
 10033f2:	js     0x10033f4
 10033f4:	add    BYTE PTR [rax],al
 10033f6:	add    BYTE PTR [rax],al
 10033f8:	push   rbx
 10033f9:	add    BYTE PTR [rax+rax*1+0x72],dh
 10033fd:	add    BYTE PTR [rcx+0x0],ch
 1003400:	outs   dx,BYTE PTR ds:[rsi]
 1003401:	add    BYTE PTR [rdi+0x0],ah
 1003404:	rex.XB add BYTE PTR [r11+0x0],spl
 1003408:	push   0x50005600
 100340d:	add    BYTE PTR [rdx+0x0],dh
 1003410:	imul   eax,DWORD PTR [rax],0x74006e
 1003416:	data16 add BYTE PTR [rdi+0x0],dl
 100341a:	sub    BYTE PTR [rax],al
 100341c:	sub    DWORD PTR [rax],eax
 100341e:	add    BYTE PTR [rax],al
 1003420:	rex.XB add BYTE PTR [r9+0x0],bl
 1003424:	rex.WXB add BYTE PTR [r15+0x0],dl
 1003428:	push   rdx
 1003429:	add    BYTE PTR [rbp+0x0],ah
 100342c:	add    BYTE PTR [ecx+0x0],ch
 1003430:	jae    0x1003432
 1003432:	je     0x1003434
 1003434:	jb     0x1003436
 1003436:	jns    0x1003438
 1003438:	rex.WXB add BYTE PTR [r13+0x0],spl
 100343c:	jns    0x100343e
 100343e:	cmp    al,BYTE PTR [rax]
 1003440:	cmp    al,BYTE PTR [rax]
 1003442:	rex.WRXB add BYTE PTR [r8+0x0],r14b
 1003446:	add    BYTE PTR gs:[rsi+0x0],ch
 100344a:	add    BYTE PTR [rax],al
 100344c:	add    BYTE PTR [rax],al
 100344e:	add    BYTE PTR [rax],al
 1003450:	push   rdx
 1003451:	add    BYTE PTR [rbp+0x0],ah
 1003454:	add    BYTE PTR [edi+0x0],cl
 1003458:	jo     0x100345a
 100345a:	add    BYTE PTR gs:[rsi+0x0],ch
 100345e:	rex.WXB add BYTE PTR [r13+0x0],spl
 1003462:	jns    0x1003464
 1003464:	add    BYTE PTR [r8+0x0],r15b
 1003468:	push   rdi
 1003469:	add    BYTE PTR [rax],ch
 100346b:	add    BYTE PTR [rip+0x2c007000],ah        # 0x2d00a471
 1003471:	add    BYTE PTR [rip+0x2c007300],ah        # 0x2d00a777
 1003477:	add    BYTE PTR [rsi],ch
 1003479:	add    BYTE PTR [rsi],ch
 100347b:	add    BYTE PTR [rsi],ch
 100347d:	add    BYTE PTR [rcx],ch
	...
 100348f:	add    BYTE PTR [rdx+0x0],dl
 1003492:	add    BYTE PTR gs:[rdi+0x0],ah
 1003496:	push   rcx
 1003497:	add    BYTE PTR [rbp+0x0],dh
 100349a:	add    BYTE PTR gs:[rdx+0x0],dh
 100349e:	jns    0x10034a0
 10034a0:	push   rsi
 10034a1:	add    BYTE PTR [rcx+0x0],ah
 10034a4:	ins    BYTE PTR es:[rdi],dx
 10034a5:	add    BYTE PTR [rbp+0x0],dh
 10034a8:	add    BYTE PTR gs:[rbp+0x0],al
 10034ac:	js     0x10034ae
 10034ae:	push   rdi
 10034af:	add    BYTE PTR [rax],ch
 10034b1:	add    BYTE PTR [rax],dh
 10034b3:	add    BYTE PTR [rax+0x0],bh
 10034b6:	and    eax,0x28007000
 10034bb:	add    BYTE PTR [rip+0x29007300],ah        # 0x2a00a7c1
 10034c1:	add    BYTE PTR [rax+rax*1],ch
 10034c4:	and    eax,0x2c007300
 10034c9:	add    BYTE PTR [rax],dh
 10034cb:	add    BYTE PTR [rax+rax*1],ch
 10034ce:	pop    rbx
 10034cf:	add    BYTE PTR [rip+0x78006c00],ah        # 0x7900a0d5
 10034d5:	add    BYTE PTR [rbp+0x0],bl
 10034d8:	sub    al,0x0
 10034da:	xor    BYTE PTR [rax],al
 10034dc:	sub    al,0x0
 10034de:	pop    rbx
 10034df:	add    BYTE PTR [rip+0x75006c00],ah        # 0x7600a0e5
 10034e5:	add    BYTE PTR [rbp+0x0],bl
 10034e8:	sub    DWORD PTR [rax],eax
 10034ea:	and    BYTE PTR [rax],al
 10034ec:	cmp    eax,0x20003e00
 10034f1:	add    BYTE PTR [rbp+0x0],al
 10034f4:	push   rdx
 10034f5:	add    BYTE PTR [rdx+0x0],dl
 10034f8:	rex.WRXB add BYTE PTR [r10+0x0],r10b
 10034fc:	pop    rdi
 10034fd:	add    BYTE PTR [rsi+0x0],al
 1003500:	rex.WB add BYTE PTR [r8+rax*1+0x45],cl
 1003505:	add    BYTE PTR [rdi+0x0],bl
 1003508:	rex.WRX add BYTE PTR [rdi+0x0],r9b
 100350c:	push   rsp
 100350d:	add    BYTE PTR [rdi+0x0],bl
 1003510:	rex.RX add BYTE PTR [rdi+0x0],r9b
 1003514:	push   rbp
 1003515:	add    BYTE PTR [rsi+0x0],cl
 1003518:	add    BYTE PTR [rax],r8b
 100351b:	add    BYTE PTR [rax],al
 100351d:	add    BYTE PTR [rax],al
 100351f:	add    BYTE PTR [rdx+0x0],dl
 1003522:	add    BYTE PTR gs:[rdi+0x0],ah
 1003526:	imul   eax,DWORD PTR [rax],0x740073
 100352c:	jb     0x100352e
 100352e:	jns    0x1003530
 1003530:	and    BYTE PTR [rax],al
 1003532:	imul   eax,DWORD PTR [rax],0x65
 1003535:	add    BYTE PTR [rcx+0x0],bh
 1003538:	and    BYTE PTR [rax],al
 100353a:	outs   dx,BYTE PTR ds:[rsi]
 100353b:	add    BYTE PTR [rdi+0x0],ch
 100353e:	je     0x1003540
 1003540:	and    BYTE PTR [rax],al
 1003542:	data16 add BYTE PTR [rdi+0x0],ch
 1003546:	jne    0x1003548
 1003548:	outs   dx,BYTE PTR ds:[rsi]
 1003549:	add    BYTE PTR [rax+rax*1+0x0],ah
 100354d:	add    BYTE PTR [rax],al
 100354f:	add    BYTE PTR [rdx+0x0],dl
 1003552:	add    BYTE PTR gs:[rdi+0x0],ah
 1003556:	push   rcx
 1003557:	add    BYTE PTR [rbp+0x0],dh
 100355a:	add    BYTE PTR gs:[rdx+0x0],dh
 100355e:	jns    0x1003560
 1003560:	push   rsi
 1003561:	add    BYTE PTR [rcx+0x0],ah
 1003564:	ins    BYTE PTR es:[rdi],dx
 1003565:	add    BYTE PTR [rbp+0x0],dh
 1003568:	add    BYTE PTR gs:[rbp+0x0],al
 100356c:	js     0x100356e
 100356e:	push   rdi
 100356f:	add    BYTE PTR [rax],ch
 1003571:	add    BYTE PTR [rax],dh
 1003573:	add    BYTE PTR [rax+0x0],bh
 1003576:	and    eax,0x28007000
 100357b:	add    BYTE PTR [rip+0x29007300],ah        # 0x2a00a881
 1003581:	add    BYTE PTR [rax+rax*1],ch
 1003584:	and    eax,0x2c007300
 1003589:	add    BYTE PTR [rax],dh
 100358b:	add    BYTE PTR [rax+rax*1],ch
 100358e:	pop    rbx
 100358f:	add    BYTE PTR [rip+0x78006c00],ah        # 0x7900a195
 1003595:	add    BYTE PTR [rbp+0x0],bl
 1003598:	sub    al,0x0
 100359a:	xor    BYTE PTR [rax],al
 100359c:	sub    al,0x0
 100359e:	pop    rbx
 100359f:	add    BYTE PTR [rip+0x75006c00],ah        # 0x7600a1a5
 10035a5:	add    BYTE PTR [rbp+0x0],bl
 10035a8:	sub    DWORD PTR [rax],eax
 10035aa:	add    BYTE PTR [rax],al
 10035ac:	add    BYTE PTR [rax],al
 10035ae:	add    BYTE PTR [rax],al
 10035b0:	rex.XB add BYTE PTR [r9+0x0],bl
 10035b4:	rex.WXB add BYTE PTR [r15+0x0],dl
 10035b8:	push   rdx
 10035b9:	add    BYTE PTR [rbp+0x0],ah
 10035bc:	add    BYTE PTR [ecx+0x0],ch
 10035c0:	jae    0x10035c2
 10035c2:	je     0x10035c4
 10035c4:	jb     0x10035c6
 10035c6:	jns    0x10035c8
 10035c8:	rex.WXB add BYTE PTR [r13+0x0],spl
 10035cc:	jns    0x10035ce
 10035ce:	cmp    al,BYTE PTR [rax]
 10035d0:	cmp    al,BYTE PTR [rax]
 10035d2:	rex.RXB add BYTE PTR [r13+0x0],r12b
 10035d6:	je     0x10035d8
 10035d8:	push   rsi
 10035d9:	add    BYTE PTR [rcx+0x0],ah
 10035dc:	ins    BYTE PTR es:[rdi],dx
 10035dd:	add    BYTE PTR [rbp+0x0],dh
 10035e0:	add    BYTE PTR gs:[rdi+0x0],bl
 10035e4:	add    BYTE PTR [rdi+0x0],r10b
 10035e8:	rex.WRXB add BYTE PTR [r10+0x0],r10b
 10035ec:	add    BYTE PTR [rax],r8b
 10035ef:	add    BYTE PTR [rbp+0x0],dl
 10035f2:	outs   dx,BYTE PTR ds:[rsi]
 10035f3:	add    BYTE PTR [rbp+0x0],ah
 10035f6:	js     0x10035f8
 10035f8:	jo     0x10035fa
 10035fa:	add    BYTE PTR gs:[rbx+0x0],ah
 10035fe:	je     0x1003600
 1003600:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1003605:	add    BYTE PTR [rax+rax*1+0x79],dh
 1003609:	add    BYTE PTR [rax+0x0],dh
 100360c:	add    BYTE PTR gs:[rax],ah
 100360f:	add    BYTE PTR [rip+0x75006c00],ah        # 0x7600a215
 1003615:	add    BYTE PTR [rax],ah
 1003617:	add    BYTE PTR [rsi+0x0],ah
 100361a:	outs   dx,DWORD PTR ds:[rsi]
 100361b:	add    BYTE PTR [rdx+0x0],dh
 100361e:	and    BYTE PTR [rax],al
 1003620:	(bad)  
 1003621:	add    BYTE PTR [rax],ah
 1003623:	add    BYTE PTR [rax+rax*1+0x57],al
 1003627:	add    BYTE PTR [rdi+0x0],cl
 100362a:	push   rdx
 100362b:	add    BYTE PTR [rax+rax*1+0x20],al
 100362f:	add    BYTE PTR [rsi+0x0],dh
 1003632:	(bad)  
 1003633:	add    BYTE PTR [rax+rax*1+0x75],ch
 1003637:	add    BYTE PTR [rbp+0x0],ah
 100363a:	and    BYTE PTR [rax],al
 100363c:	xor    BYTE PTR [rax],al
 100363e:	js     0x1003640
 1003640:	and    eax,0x28007000
 1003645:	add    BYTE PTR [rip+0x29007300],ah        # 0x2a00a94b
 100364b:	add    BYTE PTR [rax+rax*1],ch
 100364e:	and    eax,0x7300
 1003653:	add    BYTE PTR [rax],al
 1003655:	add    BYTE PTR [rax],al
 1003657:	add    BYTE PTR [rbx+0x0],al
 100365a:	pop    rcx
 100365b:	add    BYTE PTR [rbx+0x0],cl
 100365e:	push   rdi
 100365f:	add    BYTE PTR [rdx+0x0],dl
 1003662:	add    BYTE PTR gs:[rdi+0x0],ah
 1003666:	imul   eax,DWORD PTR [rax],0x740073
 100366c:	jb     0x100366e
 100366e:	jns    0x1003670
 1003670:	rex.WXB add BYTE PTR [r13+0x0],spl
 1003674:	jns    0x1003676
 1003676:	cmp    al,BYTE PTR [rax]
 1003678:	cmp    al,BYTE PTR [rax]
 100367a:	add    BYTE PTR [r8+r8*1+0x6f],bpl
 100367f:	add    BYTE PTR [rbx+0x0],dh
 1003682:	add    BYTE PTR gs:[rax],al
	...
 100368d:	add    BYTE PTR [rax],al
 100368f:	add    BYTE PTR [rbp+0x0],al
 1003692:	jb     0x1003694
 1003694:	jb     0x1003696
 1003696:	outs   dx,DWORD PTR ds:[rsi]
 1003697:	add    BYTE PTR [rdx+0x0],dh
 100369a:	and    BYTE PTR [rax],al
 100369c:	outs   dx,DWORD PTR ds:[rsi]
 100369d:	add    BYTE PTR [rsi+0x0],ch
 10036a0:	and    BYTE PTR [rax],al
 10036a2:	movsxd eax,DWORD PTR [rax]
 10036a4:	ins    BYTE PTR es:[rdi],dx
 10036a5:	add    BYTE PTR [rdi+0x0],ch
 10036a8:	jae    0x10036aa
 10036aa:	imul   eax,DWORD PTR [rax],0x67006e
 10036b0:	and    BYTE PTR [rax],al
 10036b2:	imul   eax,DWORD PTR [rax],0x65
 10036b5:	add    BYTE PTR [rcx+0x0],bh
 10036b8:	and    BYTE PTR [rax],al
 10036ba:	ja     0x10036bc
 10036bc:	imul   eax,DWORD PTR [rax],0x680074
 10036c2:	and    BYTE PTR [rax],al
 10036c4:	outs   dx,BYTE PTR ds:[rsi]
 10036c5:	add    BYTE PTR [rcx+0x0],ah
 10036c8:	ins    DWORD PTR es:[rdi],dx
 10036c9:	add    BYTE PTR [rbp+0x0],ah
 10036cc:	and    BYTE PTR [rax],al
 10036ce:	and    eax,0x2e007300
 10036d3:	add    BYTE PTR [rax],ah
 10036d5:	add    BYTE PTR [rax+rax*1+0x52],ch
 10036d9:	add    BYTE PTR [rbp+0x0],ah
 10036dc:	jae    0x10036de
 10036de:	and    BYTE PTR [rax],al
 10036e0:	cmp    eax,0x20003d00
 10036e5:	add    BYTE PTR [rax],dh
 10036e7:	add    BYTE PTR [rax+0x0],bh
 10036ea:	and    eax,0x38003000
 10036ef:	add    BYTE PTR [rax+rax*1+0x78],ch
 10036f3:	add    BYTE PTR [rax],al
 10036f5:	add    BYTE PTR [rax],al
 10036f7:	add    BYTE PTR [rcx+0x19ecabae],dh
 10036fd:	jg     0x10036d1
 10036ff:	adc    DWORD PTR [rdi-0x7ffff72],edx
 1003705:	jne    0x1003785
 1003707:	sub    dh,BYTE PTR [rdx+0x19ecabae]
 100370d:	jg     0x10036e1
 100370f:	adc    DWORD PTR [rdi-0x7ffff72],edx
 1003715:	jne    0x1003795
 1003717:	sub    dh,BYTE PTR [rbx+0x19ecabae]
 100371d:	jg     0x10036f1
 100371f:	adc    DWORD PTR [rdi-0x7ffff72],edx
 1003725:	jne    0x10037a5
 1003727:	sub    dh,BYTE PTR [rsi+rbp*4+0x7f19ecab]
 100372e:	rcl    BYTE PTR [rcx],cl
 1003730:	xchg   edi,eax
 1003731:	mov    es,WORD PTR [rax]
 1003733:	add    al,bh
 1003735:	jne    0x10037b5
 1003737:	sub    dh,BYTE PTR [rbp+0x19ecabae]
 100373d:	jg     0x1003711
 100373f:	adc    DWORD PTR [rdi-0x7ffff72],edx
 1003745:	jne    0x10037c5
 1003747:	sub    dh,BYTE PTR [rsi+0x19ecabae]
 100374d:	jg     0x1003721
 100374f:	adc    DWORD PTR [rdi-0x7ffff72],edx
 1003755:	jne    0x10037d5
 1003757:	sub    dh,BYTE PTR [rdi+0x19ecabae]
 100375d:	jg     0x1003731
 100375f:	adc    DWORD PTR [rdi-0x7ffff72],edx
 1003765:	jne    0x10037e5
 1003767:	sub    bh,BYTE PTR [rax+0x19ecabae]
 100376d:	jg     0x1003741
 100376f:	adc    DWORD PTR [rdi-0x7ffff72],edx
 1003775:	jne    0x10037f5
 1003777:	sub    bh,BYTE PTR [rcx+0x19ecabae]
 100377d:	jg     0x1003751
 100377f:	adc    DWORD PTR [rdi-0x7ffff72],edx
 1003785:	jne    0x1003805
 1003787:	sub    bh,BYTE PTR [rdx+0x19ecabae]
 100378d:	jg     0x1003761
 100378f:	adc    DWORD PTR [rdi-0x7ffff72],edx
 1003795:	jne    0x1003815
 1003797:	sub    al,cl
 1003799:	scas   al,BYTE PTR es:[rdi]
 100379a:	stos   DWORD PTR es:[rdi],eax
 100379b:	in     al,dx
 100379c:	sbb    DWORD PTR [rdi-0x2e],edi
 100379f:	adc    DWORD PTR [rdi-0x7ffff72],edx
 10037a5:	jne    0x1003825
 10037a7:	sub    dh,bl
 10037a9:	sub    dh,BYTE PTR [rdi]
 10037ab:	push   rcx
 10037ac:	out    0xca,eax
 10037ae:	iret   
 10037af:	adc    DWORD PTR [rsi+0xaa0081],edi
 10037b5:	movabs ds:0xa7027b4e1f3c25fa,al
 10037be:	rcl    BYTE PTR [rcx],cl
 10037c0:	movabs ds:0x3ee078794fc00036,eax
 10037c9:	psubsw mm0,QWORD PTR [rcx-0x3f]
 10037cd:	push   rsi
 10037ce:	xor    eax,DWORD PTR [rsi-0x7f]
 10037d1:	ret    
 10037d2:	outs   dx,BYTE PTR ds:[rsi]
 10037d3:	mov    ebp,DWORD PTR [rbx+rcx*4+0xf3e70dd]
 10037da:	jmp    0x3456f920
 10037df:	rex.RX add ebx,0x8bac8b6e
 10037e6:	fnsave [rax-0xf]
 10037e9:	mov    bl,0xd4
 10037eb:	add    cl,BYTE PTR [rax-0x69ee2e03]
 10037f1:	or     eax,0xc75f8000
 10037f6:	xchg   edx,eax
 10037f7:	xor    eax,0xd7174f82
 10037fc:	mov    eax,0x804aa836
 1003801:	or     ch,cl
 1003803:	movsxd ebp,DWORD PTR [rbx-0x6c4605d3]
 1003809:	add    eax,0x128fe16c
 100380e:	rcl    DWORD PTR [rcx],1
 1003810:	xchg   edi,eax
 1003811:	in     al,0x0
 1003813:	ror    BYTE PTR [rdi-0x47],0x61
 1003817:	mov    al,BYTE PTR [rax]
	...
 1003821:	add    BYTE PTR [rax],al
 1003823:	add    BYTE PTR [rsi+0x2c770730],dl
 1003829:	(bad)  
 100382a:	(bad)  
 100382b:	out    dx,al
 100382c:	mov    edx,0x19990951
 1003831:	(bad)  
 1003832:	ins    DWORD PTR es:[rdi],dx
 1003833:	(bad)  
 1003834:	(bad)  
 1003835:	hlt    
 1003836:	push   0x70
 1003838:	xor    eax,0xa3e963a5
 100383d:	xchg   ebp,eax
 100383e:	fs sahf 
 1003840:	xor    cl,BYTE PTR [rax-0x475bf125]
 1003846:	fdivr  QWORD PTR [rcx+0x1e]
 1003849:	jmp    0xffffffffda891923
 100384e:	rcl    BYTE PTR [rdi+0x9b64c2b],cl
 1003854:	mov    ebp,0x77eb17c
 1003859:	sub    eax,0x1d91e7b8
 100385e:	mov    edi,0xb7106490
 1003863:	sbb    eax,0x6ab020f2
 1003868:	rex.W jno 0x1003824
 100386b:	repz fiadd WORD PTR [rcx-0x42]
 100386f:	test   BYTE PTR [rbp-0x2c],bh
 1003872:	ficomp DWORD PTR [rdx]
 1003874:	jmp    0x100385a
 1003876:	(bad)  [rbp+0x51]
 1003879:	mov    ch,0xd4
 100387b:	hlt    
 100387c:	mov    DWORD PTR [rbp-0x67a97c2d],0xa8c0136c
 1003886:	imul   esp,DWORD PTR [rdx+rdi*2-0x7],0x62
 100388b:	std    
 100388c:	in     al,dx
 100388d:	leave  
 100388e:	mov    cl,BYTE PTR gs:[rdi+0x5c]
 1003892:	add    DWORD PTR [rcx+rbx*8],edx
 1003895:	ins    BYTE PTR es:[rdi],dx
 1003896:	(bad)  
 1003897:	movsxd esp,DWORD PTR [rbx+0x3d]
 100389a:	psubd  mm6,mm5
 100389d:	or     eax,0x20c88d08
 10038a2:	outs   dx,BYTE PTR ds:[rsi]
 10038a3:	cmp    ebx,DWORD PTR [rsi+0x10]
 10038a6:	imul   ecx,DWORD PTR [rsp+riz*8+0x41],0x7172d560
 10038ae:	addr32 mov ds:0x3c03e4d1,al
 10038b4:	rex.RXB (bad) 
 10038b6:	add    al,0x4b
 10038b8:	std    
 10038b9:	test   DWORD PTR [rip+0xab56bd2],ecx        # 0xbb5a491
 10038bf:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10038c0:	cli    
 10038c1:	test   al,0xb5
 10038c3:	xor    eax,0x42b2986c
 10038c8:	(bad)  
 10038c9:	leave  
 10038ca:	mov    ebx,0xbcf940db
 10038cf:	lods   al,BYTE PTR ds:[rsi]
 10038d0:	jrcxz  0x100393e
 10038d2:	fdiv   DWORD PTR [rdx]
 10038d4:	jne    0x1003932
 10038d6:	fild   WORD PTR [rbp-0x31]
 10038d9:	or     eax,0x3d59dcd6
 10038de:	shr    DWORD PTR [rbx+0x26d930ac],1
 10038e4:	cmp    al,BYTE PTR [rax]
 10038e6:	ficom  WORD PTR [rcx-0x80]
 10038e9:	push   rcx
 10038ea:	xlat   BYTE PTR ds:[rbx]
 10038eb:	enter  0x6116,0xd0
 10038ef:	mov    edi,0x21b4f4b5
 10038f4:	and    eax,esp
 10038f6:	mov    bl,0x56
 10038f8:	cdq    
 10038f9:	xchg   ebp,eax
 10038fa:	mov    edx,0xbda50fcf
 10038ff:	mov    eax,0x2802b89e
 1003904:	or     BYTE PTR [rax-0x264da0fb],cl
 100390a:	or     al,0xc6
 100390c:	and    al,0xe9
 100390e:	or     esi,DWORD PTR [rcx+0x2f6f7c87]
 1003914:	adc    DWORD PTR [rax+rbp*2+0x58],ecx
 1003918:	stos   DWORD PTR es:[rdi],eax
 1003919:	sbb    eax,0x2d3dc161
 100391e:	data16 mov dh,0x90
 1003921:	fdiv   QWORD PTR [r14+0x6]
 1003925:	jno    0x1003902
 1003927:	add    DWORD PTR [rax+riz*1+0x102a98d2],edi
 100392e:	(bad)  
 100392f:	out    dx,eax
 1003930:	mov    DWORD PTR [rbp-0x4ae08e4f],eax
 1003936:	mov    dh,0x6
 1003938:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1003939:	in     al,0xbf
 100393b:	lahf   
 100393c:	xor    edx,esp
 100393e:	mov    eax,0x7c9a2e8
 1003943:	js     0x1003979
 1003945:	stc    
 1003946:	add    BYTE PTR [rdi],cl
 1003948:	mov    gs,WORD PTR [rax-0x67e769f7]
 100394e:	(bad)  
 100394f:	loope  0x100390c
 1003951:	or     eax,0x3d2d7f6a
 1003956:	ins    DWORD PTR es:[rdi],dx
 1003957:	or     BYTE PTR [rdi+0x191646c],dl
 100395d:	pop    rsp
 100395e:	movsxd esp,esi
 1003960:	hlt    
 1003961:	push   rcx
 1003962:	imul   ebp,DWORD PTR [rbx+0x62],0x61
 1003966:	ins    BYTE PTR es:[rdi],dx
 1003967:	sbb    al,0xd8
 1003969:	xor    BYTE PTR [rbp-0x7b],ah
 100396c:	rex.WRX add BYTE PTR [rdx-0xe],r12b
 1003970:	in     eax,dx
 1003971:	xchg   ebp,eax
 1003972:	(bad)  
 1003973:	ins    BYTE PTR es:[rdi],dx
 1003974:	jnp    0x100391b
 1003976:	add    DWORD PTR [rbx],ebx
 1003978:	shl    esp,0x8
 100397b:	(bad)  
 100397c:	push   rdi
 100397d:	(bad)  
 100397e:	pmaddwd mm0,mm6
 1003981:	fnstenv [rax-0x4816af9b]
 1003987:	adc    ch,dl
 1003989:	mov    eax,0x887c8bbe
 100398e:	mov    ecx,0xdd1ddffc
 1003993:	(bad)  
 1003994:	rex.WB sub rax,0x7cf315da
 100399a:	ror    DWORD PTR [rbp+riz*2+0x58fbd44c],cl
 10039a1:	(bad)  
 10039a2:	mov    dl,0x4d
 10039a4:	(bad)  
 10039a5:	push   rcx
 10039a6:	mov    ch,0x3a
 10039a8:	je     0x10039aa
 10039aa:	mov    esp,0xbb30e2a3
 10039af:	(bad)  
 10039b0:	rex.B movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10039b2:	fisttp WORD PTR [rdx-0x29]
 10039b5:	xchg   ebp,eax
 10039b6:	fdivr  DWORD PTR [rip+0xffffffffa4d1c46d]        # 0xffffffffa5d1fe29
 10039bc:	sti    
 10039bd:	hlt    
 10039be:	(bad)  
 10039bf:	shr    DWORD PTR [rdx-0x17],cl
 10039c2:	imul   eax,DWORD PTR [rbx-0x4],0x46346ed9
 10039c9:	mov    BYTE PTR [rdi-0x53],ah
 10039cc:	sar    BYTE PTR [rax+0x2d73da60],1
 10039d2:	add    al,0x44
 10039d4:	in     eax,0x1d
 10039d6:	add    esi,DWORD PTR [rbx]
 10039d8:	pop    rdi
 10039d9:	rex.WR or r13b,BYTE PTR [rdx-0x22f28337]
 10039e0:	cmp    al,0x71
 10039e2:	add    eax,0x241aa50
 10039e7:	(bad)  
 10039e8:	adc    BYTE PTR [rax],dl
 10039ea:	or     edi,DWORD PTR [rsi-0x36f3df7a]
 10039f0:	and    eax,0xb35768b5
 10039f5:	test   DWORD PTR [rdi+0x20],ebp
 10039f8:	or     esp,edx
 10039fa:	mov    cx,0xe49f
 10039fe:	(bad)  
 10039ff:	(bad)  
 1003a00:	(bad)  
 1003a01:	stc    
 1003a02:	ficomp WORD PTR [rsi-0x68]
 1003a05:	leave  
 1003a06:	fldcw  WORD PTR [rcx]
 1003a08:	and    bl,BYTE PTR [rax-0x574b4f30]
 1003a0e:	xlat   BYTE PTR ds:[rbx]
 1003a0f:	(bad)  
 1003a10:	(bad)  
 1003a11:	cmp    eax,0xd8159b3
 1003a16:	mov    ah,0x2e
 1003a18:	cmp    ebx,DWORD PTR [rbp+rdi*4-0x49]
 1003a1c:	lods   eax,DWORD PTR ds:[rsi]
 1003a1d:	ins    BYTE PTR es:[rdi],dx
 1003a1e:	mov    edx,0xb88320c0
 1003a23:	in     eax,dx
 1003a24:	mov    dh,0xb3
 1003a26:	mov    edi,0xb6e20c9a
 1003a2b:	add    ebx,DWORD PTR [rdx+0x3974b1d2]
 1003a31:	rex.RXB (bad) 
 1003a33:	(bad)  
 1003a34:	scas   eax,DWORD PTR es:[rdi]
 1003a35:	ja     0x1003a09
 1003a37:	popf   
 1003a38:	adc    eax,0x8304db26
 1003a3d:	(bad)  
 1003a3e:	fdiv   QWORD PTR [rbx+0x12]
 1003a41:	or     esp,DWORD PTR [rbx-0x1d]
 1003a44:	test   BYTE PTR [rbx],bh
 1003a46:	fs xchg esp,eax
 1003a48:	ds push 0x6d
 1003a4b:	or     eax,0x7a6a5aa8
 1003a50:	or     ecx,edi
 1003a52:	(bad)  
 1003a53:	in     al,0x9d
 1003a55:	dec    DWORD PTR [rcx]
 1003a57:	xchg   ebx,eax
 1003a58:	(bad)  
 1003a59:	scas   al,BYTE PTR es:[rdi]
 1003a5a:	add    BYTE PTR [rdx],cl
 1003a5c:	mov    cl,0x9e
 1003a5e:	(bad)  
 1003a5f:	jge    0x1003aa5
 1003a61:	xchg   ebx,eax
 1003a62:	(bad)  
 1003a64:	shl    BYTE PTR [rbx-0xd9778f8],cl
 1003a6a:	add    DWORD PTR [rsi],ebx
 1003a6c:	inc    dl
 1003a6e:	(bad)  
 1003a6f:	imul   ebx,DWORD PTR [rbp+0x57],0x67cbf762
 1003a76:	xor    BYTE PTR gs:[rcx+0x36],0x6c
 1003a7b:	sbb    edi,esp
 1003a7d:	(bad)  
 1003a7e:	imul   ebp,DWORD PTR [rsi+0x76],0x1b
 1003a82:	(bad)  
 1003a83:	(bad)  
 1003a84:	loopne 0x1003ab1
 1003a86:	ror    DWORD PTR [rcx+0x10da7a5a],cl
 1003a8c:	int3   
 1003a8d:	rex.WX frstor [rdi+0x6f]
 1003a91:	fistp  QWORD PTR [rcx-0x41100607]
 1003a97:	mov    es,WORD PTR [rbx-0x42]
 1003a9a:	mov    bh,0x17
 1003a9c:	(bad)  
 1003a9d:	mov    ?,WORD PTR [rax-0x295c17a0]
 1003aa3:	(bad)  
 1003aa4:	jle    0x1003a39
 1003aa6:	shl    DWORD PTR [rcx+0x38d8c2c4],1
 1003aac:	push   rdx
 1003aad:	repnz fisttp WORD PTR [rdi-0xf]
 1003ab1:	addr32 mov ebx,0xbc5767d1
 1003ab7:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1003ab8:	fld    QWORD PTR [rsi]
 1003aba:	mov    ch,0x3f
 1003abc:	rex.WXB
 1003abd:	ss mov dl,0x48
 1003ac0:	fisubr DWORD PTR [rbx]
 1003ac2:	or     eax,0xa1b4cd8
 1003ac7:	scas   eax,DWORD PTR es:[rdi]
 1003ac8:	test   BYTE PTR [rdx+0x3],0x36
 1003acc:	(bad)  
 1003acd:	jp     0x1003ad3
 1003acf:	rex.B ret 
 1003ad1:	out    dx,eax
 1003ad2:	(bad)  
 1003ad3:	fist   WORD PTR [rbp-0x21]
 1003ad6:	addr32 test al,0xef
 1003ad9:	mov    gs,WORD PTR [rsi+0x31]
 1003adc:	jns    0x1003a9c
 1003ade:	imul   eax,DWORD PTR [rsi-0x74],0x1acb61b3
 1003ae5:	and    DWORD PTR [rsi-0x44],0xffffffa0
 1003ae9:	shr    BYTE PTR [rdi+0x25],cl
 1003aec:	ss loop 0x1003b57
 1003aef:	push   rdx
 1003af0:	xchg   ebp,eax
 1003af1:	ja     0x1003aff
 1003af3:	int3   
 1003af4:	add    eax,DWORD PTR [rdi+0xb]
 1003af7:	mov    ebx,0x220216b9
 1003afc:	(bad)  
 1003afd:	es add eax,0xba3bbe55
 1003b03:	(bad)
 1003b06:	mov    ebp,0xb45a92b2
 1003b0b:	sub    eax,DWORD PTR [rdx+rbp*2]
 1003b0e:	mov    bl,0x5c
 1003b10:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1003b11:	call   rdi
 1003b13:	ret    0xcf31
 1003b16:	shl    BYTE PTR [rbp+0x2cd99e8b],1
 1003b1c:	sbb    eax,0xb05bdeae
 1003b21:	ret    0x9b64
 1003b24:	es repnz movsxd ebp,esp
 1003b28:	pushf  
 1003b29:	movabs ds:0x6a9026d930a756a,eax
 1003b32:	or     DWORD PTR [rdi+rdi*1-0x7a14f1ca],ebx
 1003b39:	addr32 (bad) 
 1003b3b:	jb     0x1003b50
 1003b3d:	push   rdi
 1003b3e:	add    BYTE PTR [rip+0xffffffff95bf4a82],al        # 0xffffffff96bf85c6
 1003b44:	adc    al,0x7a
 1003b46:	mov    eax,0xb12baee2
 1003b4b:	jnp    0x1003b85
 1003b4d:	sbb    esi,DWORD PTR [rsi-0x2d7164f4]
 1003b53:	xchg   edx,eax
 1003b54:	or     eax,0xb7e5d5be
 1003b59:	out    dx,eax
 1003b5a:	fdivr  QWORD PTR [rcx+riz*1-0x21]
 1003b5e:	fisttp DWORD PTR [rbx]
 1003b60:	(bad)  
 1003b61:	rcl    bl,cl
 1003b63:	xchg   BYTE PTR [rdx-0x1e],al
 1003b66:	(bad)  
 1003b67:	icebp  
 1003b68:	clc    
 1003b69:	mov    bl,0xdd
 1003b6b:	push   0x1fda836e
 1003b70:	int    0x16
 1003b72:	mov    esi,0xb9265b81
 1003b77:	mul    cl
 1003b79:	ja     0x1003b2b
 1003b7b:	outs   dx,DWORD PTR ds:[rsi]
 1003b7c:	ja     0x1003bc5
 1003b7e:	mov    bh,0x18
 1003b80:	out    0x5a,al
 1003b82:	or     BYTE PTR [rax-0xf09590],cl
 1003b88:	retf   0x63b
 1003b8b:	pop    sp
 1003b8d:	or     eax,DWORD PTR [rcx]
 1003b8f:	adc    edi,edi
 1003b91:	sahf   
 1003b92:	(bad)
 1003b97:	clc    
 1003b98:	sar    edi,cl
 1003b9a:	imul   esp,DWORD PTR [rcx+0x45],0xffffffcf
 1003b9e:	ins    BYTE PTR es:[rdi],dx
 1003b9f:	(bad)  
 1003ba0:	js     0x1003b84
 1003ba2:	or     ah,BYTE PTR [rax-0x28f22d12]
 1003ba8:	push   rsp
 1003ba9:	add    DWORD PTR [rsi+rcx*2],0xffffffc2
 1003bad:	mov    bl,0x3
 1003baf:	cmp    DWORD PTR [rcx+0x26],esp
 1003bb2:	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 1003bb4:	not    DWORD PTR [rsi]
 1003bb6:	(bad)  
 1003bb7:	ror    BYTE PTR [rbp+0x47],1
 1003bba:	imul   ecx,DWORD PTR [rcx-0x25],0x4a3e6e77
 1003bc1:	push   0xffffffffffffffd1
 1003bc3:	scas   al,BYTE PTR es:[rdi]
 1003bc4:	fcomp  QWORD PTR [rdx-0x2a]
 1003bc7:	fldenv [rsi+0xb]
 1003bca:	fild   WORD PTR [rax-0x10]
 1003bcd:	cmp    ebx,eax
 1003bcf:	(bad)  
 1003bd0:	push   rbx
 1003bd1:	scas   al,BYTE PTR es:[rdi]
 1003bd2:	mov    esp,0xbb9ec5a9
 1003bd7:	fidivr WORD PTR [rdi-0x31]
 1003bda:	mov    dl,0x47
 1003bdc:	jmp    0x1d30f1e0
 1003be1:	repnz mov ebp,0xbac28abd
 1003be7:	retf   0x9330
 1003bea:	mov    bl,0x53
 1003bec:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1003bed:	movabs ds:0x693bad0360524b4,eax
 1003bf6:	xlat   BYTE PTR ds:[rbx]
 1003bf7:	int    0x29
 1003bf9:	push   rdi
 1003bfa:	ficom  WORD PTR [rdi+rdi*4+0x67]
 1003bfe:	fldenv [rbx]
 1003c00:	cs jp  0x1003c69
 1003c03:	mov    bl,0xb8
 1003c05:	rex.WX (bad) 
 1003c07:	(bad)
 1003c0b:	pop    rbp
 1003c0c:	xchg   esp,eax
 1003c0d:	sub    ebp,DWORD PTR [rdi+0x2a]
 1003c10:	(bad)  
 1003c11:	mov    esi,0x8ea1b40b
 1003c16:	or     al,0xc3
 1003c18:	sbb    ebx,edi
 1003c1a:	add    eax,0x2ef8d5a
 1003c1f:	sub    eax,0x72657551
 1003c24:	jns    0x1003c7d
 1003c26:	outs   dx,DWORD PTR ds:[rsi]
 1003c27:	jb     0x1003c94
 1003c29:	imul   ebp,DWORD PTR [rsi+0x67],0x45746553
 1003c30:	js     0x1003c32
 1003c32:	add    BYTE PTR [rax],al
 1003c34:	add    BYTE PTR [rax],al
 1003c36:	add    BYTE PTR [rax],al
 1003c38:	jo     0x1003c3a
 1003c3a:	jae    0x1003c3c
 1003c3c:	(bad)  
 1003c3d:	add    BYTE PTR [rax+0x0],dh
 1003c40:	imul   eax,DWORD PTR [rax],0x64002e
 1003c46:	ins    BYTE PTR es:[rdi],dx
 1003c47:	add    BYTE PTR [rax+rax*1+0x0],ch
	...
 1003c5f:	add    BYTE PTR [rbx+0x0],dl
 1003c62:	rex.WRXB add BYTE PTR [r14+0x0],r8b
 1003c66:	push   rsp
 1003c67:	add    BYTE PTR [rdi+0x0],dl
 1003c6a:	add    BYTE PTR [r10+0x0],dl
 1003c6e:	add    BYTE PTR [r8+rax*1+0x4d],r11b
 1003c73:	add    BYTE PTR [rcx+0x0],ch
 1003c76:	movsxd eax,DWORD PTR [rax]
 1003c78:	jb     0x1003c7a
 1003c7a:	outs   dx,DWORD PTR ds:[rsi]
 1003c7b:	add    BYTE PTR [rbx+0x0],dh
 1003c7e:	outs   dx,DWORD PTR ds:[rsi]
 1003c7f:	add    BYTE PTR [rsi+0x0],ah
 1003c82:	je     0x1003c84
 1003c84:	pop    rsp
 1003c85:	add    BYTE PTR [rbp+0x0],cl
 1003c88:	imul   eax,DWORD PTR [rax],0x720063
 1003c8e:	outs   dx,DWORD PTR ds:[rsi]
 1003c8f:	add    BYTE PTR [rbx+0x0],dh
 1003c92:	outs   dx,DWORD PTR ds:[rsi]
 1003c93:	add    BYTE PTR [rsi+0x0],ah
 1003c96:	je     0x1003c98
 1003c98:	and    BYTE PTR [rax],al
 1003c9a:	push   rbx
 1003c9b:	add    BYTE PTR [rcx+0x0],dl
 1003c9e:	rex.WR add BYTE PTR [rax],r12b
 1003ca1:	add    BYTE PTR [rbx+0x0],dl
 1003ca4:	add    BYTE PTR gs:[rdx+0x0],dh
 1003ca8:	jbe    0x1003caa
 1003caa:	add    BYTE PTR gs:[rdx+0x0],dh
 1003cae:	pop    rsp
 1003caf:	add    BYTE PTR [rcx],dh
 1003cb1:	add    BYTE PTR [rcx],dh
 1003cb3:	add    BYTE PTR [rax],dh
 1003cb5:	add    BYTE PTR [rax],al
 1003cb7:	add    BYTE PTR [rbx+0x0],dl
 1003cba:	push   rcx
 1003cbb:	add    BYTE PTR [rax+rax*1+0x44],cl
 1003cbf:	add    BYTE PTR [rbp+0x0],dl
 1003cc2:	rex.WRB add BYTE PTR [r8+0x0],r10b
 1003cc6:	add    BYTE PTR [r10+0x0],r10b
 1003cca:	add    BYTE PTR cs:[rbp+0x0],al
 1003cce:	pop    rax
 1003ccf:	add    BYTE PTR [rbp+0x0],al
 1003cd2:	add    BYTE PTR [rax],al
 1003cd4:	add    BYTE PTR [rax],al
 1003cd6:	add    BYTE PTR [rax],al
 1003cd8:	ja     0x1003cc6
 1003cda:	enter  0x7bf4,0x7d
 1003cde:	mov    ecx,0x42cd8c4d
 1003ce3:	rex (bad) 
 1003ce5:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1003ce6:	pop    rdx
 1003ce7:	stc    
	...
 1003cf0:	rol    BYTE PTR [rax],0x0
 1003cf3:	add    BYTE PTR [rax],al
 1003cf5:	add    BYTE PTR [rax],al
 1003cf7:	rex.RX xor al,0x11
 1003cfa:	sbb    ecx,esp
 1003cfc:	jmp    0x1003c8d
 1003cfe:	pop    rdi
 1003cff:	rex.WX cdqe 
 1003d01:	xor    DWORD PTR [rax+0x60],esi
 1003d04:	xchg   ecx,eax
 1003d05:	rex.W jns 0x1003d0f
 1003d08:	and    eax,0x73006c00
 1003d0d:	add    BYTE PTR [rax+rax*1+0x25],bl
 1003d11:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1003d1d:	add    BYTE PTR [rax],al
 1003d1f:	add    BYTE PTR [rax+0x12],dl
 1003d22:	add    DWORD PTR [rcx],eax
 1003d24:	add    BYTE PTR [rax],al
 1003d26:	add    BYTE PTR [rax],al
 1003d28:	lock adc al,BYTE PTR [rcx]
 1003d2b:	add    DWORD PTR [rax],eax
 1003d2d:	add    BYTE PTR [rax],al
 1003d2f:	add    BYTE PTR [rax],al
 1003d31:	adc    eax,DWORD PTR [rcx]
 1003d33:	add    DWORD PTR [rax],eax
 1003d35:	add    BYTE PTR [rax],al
 1003d37:	add    BYTE PTR [rax+0x1011d],dh
 1003d3d:	add    BYTE PTR [rax],al
 1003d3f:	add    al,dh
 1003d41:	adc    DWORD PTR [rcx],eax
 1003d43:	add    DWORD PTR [rax],eax
 1003d45:	add    BYTE PTR [rax],al
 1003d47:	add    BYTE PTR [rax+0x10119],dl
 1003d4d:	add    BYTE PTR [rax],al
 1003d4f:	add    BYTE PTR [rax],ah
 1003d51:	and    BYTE PTR [rcx],al
 1003d53:	add    DWORD PTR [rax],eax
 1003d55:	add    BYTE PTR [rax],al
 1003d57:	add    BYTE PTR [rax+0x10114],ah
 1003d5d:	add    BYTE PTR [rax],al
 1003d5f:	add    BYTE PTR [rax],dl
 1003d61:	adc    eax,DWORD PTR [rcx]
 1003d63:	add    DWORD PTR [rax],eax
 1003d65:	add    BYTE PTR [rax],al
 1003d67:	add    BYTE PTR [rax+0x13],dl
 1003d6a:	add    DWORD PTR [rcx],eax
 1003d6c:	add    BYTE PTR [rax],al
 1003d6e:	add    BYTE PTR [rax],al
 1003d70:	rcr    BYTE PTR [rax],0x1
 1003d73:	add    DWORD PTR [rax],eax
 1003d75:	add    BYTE PTR [rax],al
 1003d77:	add    BYTE PTR [rbx+0x0],dl
 1003d7a:	push   0x72006100
 1003d7f:	add    BYTE PTR [rbp+0x0],ah
 1003d82:	add    BYTE PTR fs:[rbx+0x0],al
 1003d86:	outs   dx,DWORD PTR ds:[rsi]
 1003d87:	add    BYTE PTR [rax+rax*1+0x65],ah
	...
 1003d97:	add    BYTE PTR [rbx+0x0],dl
 1003d9a:	push   rcx
 1003d9b:	add    BYTE PTR [rax+rax*1+0x44],cl
 1003d9f:	add    BYTE PTR [rbp+0x0],dl
 1003da2:	rex.WRB add BYTE PTR [r8+0x0],r10b
 1003da6:	add    BYTE PTR [r10+0x0],r10b
 1003daa:	add    BYTE PTR cs:[rbp+0x0],al
 1003dae:	pop    rax
 1003daf:	add    BYTE PTR [rbp+0x0],al
 1003db2:	add    BYTE PTR [rax],al
 1003db4:	add    BYTE PTR [rax],al
 1003db6:	add    BYTE PTR [rax],al
 1003db8:	(bad)  
 1003db9:	(bad)  
 1003dba:	ret    
 1003dbb:	sbb    edx,DWORD PTR [rcx-0x61b65b7b]
 1003dc1:	movabs ds:0xe6b57640b44f,al
 1003dca:	add    BYTE PTR [rax],al
 1003dcc:	add    BYTE PTR [rax],al
 1003dce:	add    BYTE PTR [rax],al
 1003dd0:	add    BYTE PTR [rax],dl
 1003dd2:	add    BYTE PTR [rax],ah
 1003dd4:	add    BYTE PTR [rax],al
 1003dd6:	add    BYTE PTR [rax],al
 1003dd8:	add    BYTE PTR [rax+0x0],al
 1003ddb:	add    DWORD PTR [rax],eax
 1003ddd:	add    BYTE PTR [rax],al
 1003ddf:	add    BYTE PTR [rdx],al
 1003de1:	add    BYTE PTR [rax],al
 1003de3:	and    BYTE PTR [rax],al
 1003de5:	add    BYTE PTR [rax],al
 1003de7:	add    BYTE PTR [rax+0x40],dl
 1003dea:	add    BYTE PTR [rcx],al
 1003dec:	add    BYTE PTR [rax],al
 1003dee:	add    BYTE PTR [rax],al
 1003df0:	add    al,0x0
 1003df2:	add    BYTE PTR [rax],ah
 1003df4:	add    BYTE PTR [rax],al
 1003df6:	add    BYTE PTR [rax],al
 1003df8:	movabs al,ds:0x800000000010040
 1003e01:	add    BYTE PTR [rax],al
 1003e03:	and    BYTE PTR [rax],al
 1003e05:	add    BYTE PTR [rax],al
 1003e07:	add    BYTE PTR [rax],al
 1003e09:	add    BYTE PTR [r9],al
 1003e0c:	add    BYTE PTR [rax],al
 1003e0e:	add    BYTE PTR [rax],al
 1003e10:	adc    BYTE PTR [rax],al
 1003e12:	add    BYTE PTR [rax],ah
 1003e14:	add    BYTE PTR [rax],al
 1003e16:	add    BYTE PTR [rax],al
 1003e18:	push   rax
 1003e19:	add    BYTE PTR [r9],al
 1003e1c:	add    BYTE PTR [rax],al
 1003e1e:	add    BYTE PTR [rax],al
 1003e20:	and    BYTE PTR [rax],al
 1003e22:	add    BYTE PTR [rax],ah
 1003e24:	add    BYTE PTR [rax],al
 1003e26:	add    BYTE PTR [rax],al
 1003e28:	mov    al,0x41
 1003e2a:	add    BYTE PTR [rcx],al
 1003e2c:	add    BYTE PTR [rax],al
 1003e2e:	add    BYTE PTR [rax],al
 1003e30:	add    BYTE PTR [rax],al
 1003e33:	and    BYTE PTR [rax],al
 1003e35:	add    BYTE PTR [rax],al
 1003e37:	add    BYTE PTR [rax],al
 1003e39:	rex.X add BYTE PTR [rcx],al
 1003e3c:	add    BYTE PTR [rax],al
 1003e3e:	add    BYTE PTR [rax],al
 1003e40:	add    BYTE PTR [rax],0x0
 1003e43:	and    BYTE PTR [rax],al
 1003e45:	add    BYTE PTR [rax],al
 1003e47:	add    BYTE PTR [rax+0x42],ah
 1003e4a:	add    BYTE PTR [rcx],al
 1003e4c:	add    BYTE PTR [rax],al
 1003e4e:	add    BYTE PTR [rax],al
 1003e50:	add    BYTE PTR [rcx],al
 1003e52:	add    BYTE PTR [rax],ah
 1003e54:	add    BYTE PTR [rax],al
 1003e56:	add    BYTE PTR [rax],al
 1003e58:	rol    BYTE PTR [rdx+0x0],0x1
 1003e5c:	add    BYTE PTR [rax],al
 1003e5e:	add    BYTE PTR [rax],al
 1003e60:	add    BYTE PTR [rdx],al
 1003e62:	add    BYTE PTR [rax],ah
 1003e64:	add    BYTE PTR [rax],al
 1003e66:	add    BYTE PTR [rax],al
 1003e68:	adc    BYTE PTR [rbx+0x0],al
 1003e6b:	add    DWORD PTR [rax],eax
 1003e6d:	add    BYTE PTR [rax],al
 1003e6f:	add    BYTE PTR [rax],al
 1003e71:	add    al,0x0
 1003e73:	and    BYTE PTR [rax],al
 1003e75:	add    BYTE PTR [rax],al
 1003e77:	add    BYTE PTR [rax+0x43],ah
 1003e7a:	add    BYTE PTR [rcx],al
 1003e7c:	add    BYTE PTR [rax],al
 1003e7e:	add    BYTE PTR [rax],al
 1003e80:	add    BYTE PTR [rax],cl
 1003e82:	add    BYTE PTR [rax],ah
 1003e84:	add    BYTE PTR [rax],al
 1003e86:	add    BYTE PTR [rax],al
 1003e88:	rol    BYTE PTR [rbx+0x0],0x1
 1003e8c:	add    BYTE PTR [rax],al
 1003e8e:	add    BYTE PTR [rax],al
 1003e90:	add    BYTE PTR [rax],ah
 1003e92:	add    BYTE PTR [rax],ah
 1003e94:	add    BYTE PTR [rax],al
 1003e96:	add    BYTE PTR [rax],al
 1003e98:	and    BYTE PTR [rax+rax*1+0x1],al
 1003e9c:	add    BYTE PTR [rax],al
 1003e9e:	add    BYTE PTR [rax],al
 1003ea0:	add    BYTE PTR [rax+0x2000],al
 1003ea6:	add    BYTE PTR [rax],al
 1003ea8:	mov    al,0x44
 1003eaa:	add    BYTE PTR [rcx],al
 1003eac:	add    BYTE PTR [rax],al
 1003eae:	add    BYTE PTR [rax],al
 1003eb0:	add    BYTE PTR [r10+0x0],r14b
 1003eb4:	jb     0x1003eb6
 1003eb6:	outs   dx,DWORD PTR ds:[rsi]
 1003eb7:	add    BYTE PTR [rdx+0x0],dh
 1003eba:	and    BYTE PTR [rax],al
 1003ebc:	sub    eax,0x44002000
 1003ec1:	add    BYTE PTR [rbp+0x0],dh
 1003ec4:	ins    DWORD PTR es:[rdi],dx
 1003ec5:	add    BYTE PTR [rax+0x0],dh
 1003ec8:	imul   eax,DWORD PTR [rax],0x67006e
 1003ece:	and    BYTE PTR [rax],al
 1003ed0:	jo     0x1003ed2
 1003ed2:	jb     0x1003ed4
 1003ed4:	outs   dx,DWORD PTR ds:[rsi]
 1003ed5:	add    BYTE PTR [rbx+0x0],ah
 1003ed8:	add    BYTE PTR gs:[rbx+0x0],dh
 1003edc:	jae    0x1003ede
 1003ede:	and    BYTE PTR [rax],al
 1003ee0:	ja     0x1003ee2
 1003ee2:	(bad)  
 1003ee3:	add    BYTE PTR [rbx+0x0],dh
 1003ee6:	and    BYTE PTR [rax],al
 1003ee8:	outs   dx,BYTE PTR ds:[rsi]
 1003ee9:	add    BYTE PTR [rdi+0x0],ch
 1003eec:	je     0x1003eee
 1003eee:	and    BYTE PTR [rax],al
 1003ef0:	jae    0x1003ef2
 1003ef2:	je     0x1003ef4
 1003ef4:	(bad)  
 1003ef5:	add    BYTE PTR [rdx+0x0],dh
 1003ef8:	je     0x1003efa
 1003efa:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1003eff:	add    BYTE PTR [rdi+0x0],ch
 1003f02:	jb     0x1003f04
 1003f04:	and    BYTE PTR [rax],al
 1003f06:	je     0x1003f08
 1003f08:	add    BYTE PTR gs:[rdx+0x0],dh
 1003f0c:	ins    DWORD PTR es:[rdi],dx
 1003f0d:	add    BYTE PTR [rcx+0x0],ch
 1003f10:	outs   dx,BYTE PTR ds:[rsi]
 1003f11:	add    BYTE PTR [rcx+0x0],ah
 1003f14:	je     0x1003f16
 1003f16:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1003f1b:	add    BYTE PTR [rax+0x0],dh
 1003f1e:	jb     0x1003f20
 1003f20:	add    BYTE PTR gs:[rbp+0x0],ch
 1003f24:	(bad)  
 1003f25:	add    BYTE PTR [rax+rax*1+0x75],dh
 1003f29:	add    BYTE PTR [rdx+0x0],dh
 1003f2c:	add    BYTE PTR gs:[rax+rax*1+0x79],ch
 1003f31:	add    BYTE PTR [rsi],ch
 1003f33:	add    BYTE PTR [rip+0xa00],cl        # 0x1004939
 1003f39:	add    BYTE PTR [rax],al
 1003f3b:	add    BYTE PTR [rax],al
 1003f3d:	add    BYTE PTR [rax],al
 1003f3f:	add    BYTE PTR [rbp+0x0],al
 1003f42:	js     0x1003f44
 1003f44:	je     0x1003f46
 1003f46:	add    BYTE PTR gs:[rdx+0x0],dh
 1003f4a:	outs   dx,BYTE PTR ds:[rsi]
 1003f4b:	add    BYTE PTR [rcx+0x0],ah
 1003f4e:	ins    BYTE PTR es:[rdi],dx
 1003f4f:	add    BYTE PTR [rax],ah
 1003f51:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003f55:	add    BYTE PTR [rbp+0x0],ch
 1003f58:	jo     0x1003f5a
 1003f5a:	and    BYTE PTR [rax],al
 1003f5c:	jo     0x1003f5e
 1003f5e:	jb     0x1003f60
 1003f60:	outs   dx,DWORD PTR ds:[rsi]
 1003f61:	add    BYTE PTR [rbx+0x0],ah
 1003f64:	add    BYTE PTR gs:[rbx+0x0],dh
 1003f68:	jae    0x1003f6a
 1003f6a:	and    BYTE PTR [rax],al
 1003f6c:	jb     0x1003f6e
 1003f6e:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1003f73:	add    BYTE PTR [rdx+0x0],dh
 1003f76:	outs   dx,BYTE PTR ds:[rsi]
 1003f77:	add    BYTE PTR [rbp+0x0],ah
 1003f7a:	add    BYTE PTR fs:[rax],ah
 1003f7d:	add    BYTE PTR [rsi+0x0],ch
 1003f80:	outs   dx,DWORD PTR ds:[rsi]
 1003f81:	add    BYTE PTR [rax],ah
 1003f83:	add    BYTE PTR [rbp+0x0],ah
 1003f86:	jb     0x1003f88
 1003f88:	jb     0x1003f8a
 1003f8a:	outs   dx,DWORD PTR ds:[rsi]
 1003f8b:	add    BYTE PTR [rdx+0x0],dh
 1003f8e:	jae    0x1003f90
 1003f90:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004997
	...
 1003f9f:	add    BYTE PTR [rbp+0x0],al
 1003fa2:	js     0x1003fa4
 1003fa4:	je     0x1003fa6
 1003fa6:	add    BYTE PTR gs:[rdx+0x0],dh
 1003faa:	outs   dx,BYTE PTR ds:[rsi]
 1003fab:	add    BYTE PTR [rcx+0x0],ah
 1003fae:	ins    BYTE PTR es:[rdi],dx
 1003faf:	add    BYTE PTR [rax],ah
 1003fb1:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003fb5:	add    BYTE PTR [rbp+0x0],ch
 1003fb8:	jo     0x1003fba
 1003fba:	and    BYTE PTR [rax],al
 1003fbc:	jo     0x1003fbe
 1003fbe:	jb     0x1003fc0
 1003fc0:	outs   dx,DWORD PTR ds:[rsi]
 1003fc1:	add    BYTE PTR [rbx+0x0],ah
 1003fc4:	add    BYTE PTR gs:[rbx+0x0],dh
 1003fc8:	jae    0x1003fca
 1003fca:	and    BYTE PTR [rax],al
 1003fcc:	jb     0x1003fce
 1003fce:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1003fd3:	add    BYTE PTR [rdx+0x0],dh
 1003fd6:	outs   dx,BYTE PTR ds:[rsi]
 1003fd7:	add    BYTE PTR [rax],ah
 1003fd9:	add    BYTE PTR [rbx+0x0],ah
 1003fdc:	outs   dx,DWORD PTR ds:[rsi]
 1003fdd:	add    BYTE PTR [rax+rax*1+0x65],ah
 1003fe1:	add    BYTE PTR [rax],ah
 1003fe3:	add    BYTE PTR [rax],dh
 1003fe5:	add    BYTE PTR [rax+0x0],bh
 1003fe8:	and    eax,0x2e007800
 1003fed:	add    BYTE PTR [rip+0xa00],cl        # 0x10049f3
	...
 1003fff:	add    BYTE PTR [rbp+0x0],al
 1004002:	jb     0x1004004
 1004004:	jb     0x1004006
 1004006:	outs   dx,DWORD PTR ds:[rsi]
 1004007:	add    BYTE PTR [rdx+0x0],dh
 100400a:	and    BYTE PTR [rax],al
 100400c:	sub    eax,0x49002000
 1004011:	add    BYTE PTR [rsi+0x0],ch
 1004014:	jo     0x1004016
 1004016:	jne    0x1004018
 1004018:	je     0x100401a
 100401a:	and    BYTE PTR [rax],al
 100401c:	jo     0x100401e
 100401e:	(bad)  
 100401f:	add    BYTE PTR [rdx+0x0],dh
 1004022:	(bad)  
 1004023:	add    BYTE PTR [rbp+0x0],ch
 1004026:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100402b:	add    BYTE PTR [rdx+0x0],dh
 100402e:	jae    0x1004030
 1004030:	and    BYTE PTR [rax],al
 1004032:	imul   eax,DWORD PTR [rax],0x76006e
 1004038:	(bad)  
 1004039:	add    BYTE PTR [rax+rax*1+0x69],ch
 100403d:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1004041:	add    BYTE PTR [rip+0xa00],cl        # 0x1004a47
	...
 100404f:	add    BYTE PTR [rbp+0x0],al
 1004052:	jb     0x1004054
 1004054:	jb     0x1004056
 1004056:	outs   dx,DWORD PTR ds:[rsi]
 1004057:	add    BYTE PTR [rdx+0x0],dh
 100405a:	and    BYTE PTR [rax],al
 100405c:	sub    eax,0x46002000
 1004061:	add    BYTE PTR [rcx+0x0],ah
 1004064:	imul   eax,DWORD PTR [rax],0x65006c
 100406a:	add    BYTE PTR fs:[rax],ah
 100406d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004071:	add    BYTE PTR [rax],ah
 1004073:	add    BYTE PTR [rbx+0x0],ah
 1004076:	jb     0x1004078
 1004078:	add    BYTE PTR gs:[rcx+0x0],ah
 100407c:	je     0x100407e
 100407e:	add    BYTE PTR gs:[rax],ah
 1004081:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004085:	add    BYTE PTR [rbp+0x0],ch
 1004088:	jo     0x100408a
 100408a:	and    BYTE PTR [rax],al
 100408c:	data16 add BYTE PTR [rcx+0x0],ch
 1004090:	ins    BYTE PTR es:[rdi],dx
 1004091:	add    BYTE PTR [rbp+0x0],ah
 1004094:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004a9b
 100409b:	add    BYTE PTR [rax],al
 100409d:	add    BYTE PTR [rax],al
 100409f:	add    BYTE PTR [rbp+0x0],al
 10040a2:	jb     0x10040a4
 10040a4:	jb     0x10040a6
 10040a6:	outs   dx,DWORD PTR ds:[rsi]
 10040a7:	add    BYTE PTR [rdx+0x0],dh
 10040aa:	and    BYTE PTR [rax],al
 10040ac:	sub    eax,0x46002000
 10040b1:	add    BYTE PTR [rcx+0x0],ah
 10040b4:	imul   eax,DWORD PTR [rax],0x65006c
 10040ba:	add    BYTE PTR fs:[rax],ah
 10040bd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10040c1:	add    BYTE PTR [rax],ah
 10040c3:	add    BYTE PTR [rbx+0x0],ah
 10040c6:	jb     0x10040c8
 10040c8:	add    BYTE PTR gs:[rcx+0x0],ah
 10040cc:	je     0x10040ce
 10040ce:	add    BYTE PTR gs:[rax],ah
 10040d1:	add    BYTE PTR [rbp+0x0],ch
 10040d4:	(bad)  
 10040d5:	add    BYTE PTR [rsi+0x0],ch
 10040d8:	imul   eax,DWORD PTR [rax],0x650066
 10040de:	jae    0x10040e0
 10040e0:	je     0x10040e2
 10040e2:	and    BYTE PTR [rax],al
 10040e4:	data16 add BYTE PTR [rcx+0x0],ch
 10040e8:	ins    BYTE PTR es:[rdi],dx
 10040e9:	add    BYTE PTR [rbp+0x0],ah
 10040ec:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004af3
	...
 10040ff:	add    BYTE PTR [rbp+0x0],al
 1004102:	jb     0x1004104
 1004104:	jb     0x1004106
 1004106:	outs   dx,DWORD PTR ds:[rsi]
 1004107:	add    BYTE PTR [rdx+0x0],dh
 100410a:	and    BYTE PTR [rax],al
 100410c:	sub    eax,0x46002000
 1004111:	add    BYTE PTR [rcx+0x0],ah
 1004114:	imul   eax,DWORD PTR [rax],0x65006c
 100411a:	add    BYTE PTR fs:[rax],ah
 100411d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004121:	add    BYTE PTR [rax],ah
 1004123:	add    BYTE PTR [rdi+0x0],ch
 1004126:	jo     0x1004128
 1004128:	add    BYTE PTR gs:[rsi+0x0],ch
 100412c:	and    BYTE PTR [rax],al
 100412e:	add    BYTE PTR fs:[rbp+0x0],ah
 1004132:	(bad)  
 1004133:	add    BYTE PTR [rbp+0x0],dh
 1004136:	add    BYTE PTR [eax],ah
 1004139:	add    BYTE PTR [rax+0x0],dh
 100413c:	jb     0x100413e
 100413e:	outs   dx,DWORD PTR ds:[rsi]
 100413f:	add    BYTE PTR [rbx+0x0],ah
 1004142:	add    BYTE PTR gs:[rbx+0x0],dh
 1004146:	jae    0x1004148
 1004148:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004b4f
 100414f:	add    BYTE PTR [rbp+0x0],al
 1004152:	jb     0x1004154
 1004154:	jb     0x1004156
 1004156:	outs   dx,DWORD PTR ds:[rsi]
 1004157:	add    BYTE PTR [rdx+0x0],dh
 100415a:	and    BYTE PTR [rax],al
 100415c:	sub    eax,0x46002000
 1004161:	add    BYTE PTR [rcx+0x0],ah
 1004164:	imul   eax,DWORD PTR [rax],0x65006c
 100416a:	add    BYTE PTR fs:[rax],ah
 100416d:	add    BYTE PTR [rdi+0x0],dh
 1004170:	push   0x6c006900
 1004175:	add    BYTE PTR [rbp+0x0],ah
 1004178:	and    BYTE PTR [rax],al
 100417a:	ja     0x100417c
 100417c:	jb     0x100417e
 100417e:	imul   eax,DWORD PTR [rax],0x690074
 1004184:	outs   dx,BYTE PTR ds:[rsi]
 1004185:	add    BYTE PTR [rdi+0x0],ah
 1004188:	and    BYTE PTR [rax],al
 100418a:	ins    DWORD PTR es:[rdi],dx
 100418b:	add    BYTE PTR [rcx+0x0],ch
 100418e:	outs   dx,BYTE PTR ds:[rsi]
 100418f:	add    BYTE PTR [rcx+0x0],ch
 1004192:	and    BYTE PTR [rax],al
 1004194:	add    BYTE PTR fs:[rbp+0x0],dh
 1004198:	ins    DWORD PTR es:[rdi],dx
 1004199:	add    BYTE PTR [rax+0x0],dh
 100419c:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004ba3
	...
 10041af:	add    BYTE PTR [rbp+0x0],al
 10041b2:	jb     0x10041b4
 10041b4:	jb     0x10041b6
 10041b6:	outs   dx,DWORD PTR ds:[rsi]
 10041b7:	add    BYTE PTR [rdx+0x0],dh
 10041ba:	and    BYTE PTR [rax],al
 10041bc:	sub    eax,0x46002000
 10041c1:	add    BYTE PTR [rcx+0x0],ah
 10041c4:	imul   eax,DWORD PTR [rax],0x65006c
 10041ca:	add    BYTE PTR fs:[rax],ah
 10041cd:	add    BYTE PTR [rdx+0x0],dh
 10041d0:	add    BYTE PTR gs:[rcx+0x0],ah
 10041d4:	add    BYTE PTR fs:[rcx+0x0],ch
 10041d8:	outs   dx,BYTE PTR ds:[rsi]
 10041d9:	add    BYTE PTR [rdi+0x0],ah
 10041dc:	and    BYTE PTR [rax],al
 10041de:	jb     0x10041e0
 10041e0:	add    BYTE PTR gs:[rdi+0x0],ah
 10041e4:	imul   eax,DWORD PTR [rax],0x740073
 10041ea:	jb     0x10041ec
 10041ec:	jns    0x10041ee
 10041ee:	and    BYTE PTR [rax],al
 10041f0:	imul   eax,DWORD PTR [rax],0x65
 10041f3:	add    BYTE PTR [rcx+0x0],bh
 10041f6:	jae    0x10041f8
 10041f8:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004bff
 10041ff:	add    BYTE PTR [rbp+0x0],al
 1004202:	jb     0x1004204
 1004204:	jb     0x1004206
 1004206:	outs   dx,DWORD PTR ds:[rsi]
 1004207:	add    BYTE PTR [rdx+0x0],dh
 100420a:	and    BYTE PTR [rax],al
 100420c:	sub    eax,0x46002000
 1004211:	add    BYTE PTR [rcx+0x0],ah
 1004214:	imul   eax,DWORD PTR [rax],0x65006c
 100421a:	add    BYTE PTR fs:[rax],ah
 100421d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004221:	add    BYTE PTR [rax],ah
 1004223:	add    BYTE PTR [rbx+0x0],dh
 1004226:	je     0x1004228
 1004228:	(bad)  
 1004229:	add    BYTE PTR [rdx+0x0],dh
 100422c:	je     0x100422e
 100422e:	and    BYTE PTR [rax],al
 1004230:	push   rdi
 1004231:	add    BYTE PTR [rcx+0x0],ah
 1004234:	je     0x1004236
 1004236:	jae    0x1004238
 1004238:	outs   dx,DWORD PTR ds:[rsi]
 1004239:	add    BYTE PTR [rsi+0x0],ch
 100423c:	and    BYTE PTR [rax],al
 100423e:	jo     0x1004240
 1004240:	jb     0x1004242
 1004242:	outs   dx,DWORD PTR ds:[rsi]
 1004243:	add    BYTE PTR [rbx+0x0],ah
 1004246:	add    BYTE PTR gs:[rbx+0x0],dh
 100424a:	jae    0x100424c
 100424c:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004c53
	...
 100425f:	add    BYTE PTR [rbp+0x0],al
 1004262:	jb     0x1004264
 1004264:	jb     0x1004266
 1004266:	outs   dx,DWORD PTR ds:[rsi]
 1004267:	add    BYTE PTR [rdx+0x0],dh
 100426a:	and    BYTE PTR [rax],al
 100426c:	sub    eax,0x46002000
 1004271:	add    BYTE PTR [rcx+0x0],ah
 1004274:	imul   eax,DWORD PTR [rax],0x65006c
 100427a:	add    BYTE PTR fs:[rax],ah
 100427d:	add    BYTE PTR [rdi+0x0],dh
 1004280:	jb     0x1004282
 1004282:	imul   eax,DWORD PTR [rax],0x690074
 1004288:	outs   dx,BYTE PTR ds:[rsi]
 1004289:	add    BYTE PTR [rdi+0x0],ah
 100428c:	and    BYTE PTR [rax],al
 100428e:	je     0x1004290
 1004290:	push   0x20006500
 1004295:	add    BYTE PTR [rdi+0x0],dl
 1004298:	(bad)  
 1004299:	add    BYTE PTR [rax+rax*1+0x73],dh
 100429d:	add    BYTE PTR [rdi+0x0],ch
 10042a0:	outs   dx,BYTE PTR ds:[rsi]
 10042a1:	add    BYTE PTR [rax],ah
 10042a3:	add    BYTE PTR [rbp+0x0],ch
 10042a6:	(bad)  
 10042a7:	add    BYTE PTR [rsi+0x0],ch
 10042aa:	imul   eax,DWORD PTR [rax],0x650066
 10042b0:	jae    0x10042b2
 10042b2:	je     0x10042b4
 10042b4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004cbb
 10042bb:	add    BYTE PTR [rax],al
 10042bd:	add    BYTE PTR [rax],al
 10042bf:	add    BYTE PTR [rbp+0x0],al
 10042c2:	jb     0x10042c4
 10042c4:	jb     0x10042c6
 10042c6:	outs   dx,DWORD PTR ds:[rsi]
 10042c7:	add    BYTE PTR [rdx+0x0],dh
 10042ca:	and    BYTE PTR [rax],al
 10042cc:	sub    eax,0x56002000
 10042d1:	add    BYTE PTR [rbp+0x0],ah
 10042d4:	jb     0x10042d6
 10042d6:	jae    0x10042d8
 10042d8:	imul   eax,DWORD PTR [rax],0x6e006f
 10042de:	and    BYTE PTR [rax],al
 10042e0:	ins    DWORD PTR es:[rdi],dx
 10042e1:	add    BYTE PTR [rcx+0x0],ch
 10042e4:	jae    0x10042e6
 10042e6:	ins    DWORD PTR es:[rdi],dx
 10042e7:	add    BYTE PTR [rcx+0x0],ah
 10042ea:	je     0x10042ec
 10042ec:	movsxd eax,DWORD PTR [rax]
 10042ee:	push   0x64002000
 10042f3:	add    BYTE PTR [rbp+0x0],ah
 10042f6:	je     0x10042f8
 10042f8:	add    BYTE PTR gs:[rbx+0x0],ah
 10042fc:	je     0x10042fe
 10042fe:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1004303:	add    BYTE PTR [rip+0xa00],cl        # 0x1004d09
 1004309:	add    BYTE PTR [rax],al
 100430b:	add    BYTE PTR [rax],al
 100430d:	add    BYTE PTR [rax],al
 100430f:	add    BYTE PTR [rbp+0x0],al
 1004312:	jb     0x1004314
 1004314:	jb     0x1004316
 1004316:	outs   dx,DWORD PTR ds:[rsi]
 1004317:	add    BYTE PTR [rdx+0x0],dh
 100431a:	and    BYTE PTR [rax],al
 100431c:	sub    eax,0x52002000
 1004321:	add    BYTE PTR [rbp+0x0],ah
 1004324:	ins    DWORD PTR es:[rdi],dx
 1004325:	add    BYTE PTR [rdi+0x0],ch
 1004328:	je     0x100432a
 100432a:	add    BYTE PTR gs:[rax],ah
 100432d:	add    BYTE PTR [rbp+0x0],ch
 1004330:	add    BYTE PTR gs:[rbp+0x0],ch
 1004334:	outs   dx,DWORD PTR ds:[rsi]
 1004335:	add    BYTE PTR [rdx+0x0],dh
 1004338:	jns    0x100433a
 100433a:	and    BYTE PTR [rax],al
 100433c:	jb     0x100433e
 100433e:	add    BYTE PTR gs:[rcx+0x0],ah
 1004342:	add    BYTE PTR fs:[rax],ah
 1004345:	add    BYTE PTR [rsi+0x0],ah
 1004348:	(bad)  
 1004349:	add    BYTE PTR [rcx+0x0],ch
 100434c:	ins    BYTE PTR es:[rdi],dx
 100434d:	add    BYTE PTR [rbp+0x0],ah
 1004350:	add    BYTE PTR fs:[rsi],ch
 1004353:	add    BYTE PTR [rip+0xa00],cl        # 0x1004d59
 1004359:	add    BYTE PTR [rax],al
 100435b:	add    BYTE PTR [rax],al
 100435d:	add    BYTE PTR [rax],al
 100435f:	add    BYTE PTR [rbp+0x0],al
 1004362:	jb     0x1004364
 1004364:	jb     0x1004366
 1004366:	outs   dx,DWORD PTR ds:[rsi]
 1004367:	add    BYTE PTR [rdx+0x0],dh
 100436a:	and    BYTE PTR [rax],al
 100436c:	sub    eax,0x52002000
 1004371:	add    BYTE PTR [rbp+0x0],ah
 1004374:	ins    DWORD PTR es:[rdi],dx
 1004375:	add    BYTE PTR [rdi+0x0],ch
 1004378:	je     0x100437a
 100437a:	add    BYTE PTR gs:[rax],ah
 100437d:	add    BYTE PTR [rbp+0x0],ch
 1004380:	add    BYTE PTR gs:[rbp+0x0],ch
 1004384:	outs   dx,DWORD PTR ds:[rsi]
 1004385:	add    BYTE PTR [rdx+0x0],dh
 1004388:	jns    0x100438a
 100438a:	and    BYTE PTR [rax],al
 100438c:	data16 add BYTE PTR [rcx+0x0],ah
 1004390:	imul   eax,DWORD PTR [rax],0x65006c
 1004396:	add    BYTE PTR fs:[rax],ah
 1004399:	add    BYTE PTR [rbx+0x0],ah
 100439c:	push   0x63006500
 10043a1:	add    BYTE PTR [rbx+0x0],ch
 10043a4:	jae    0x10043a6
 10043a6:	jne    0x10043a8
 10043a8:	ins    DWORD PTR es:[rdi],dx
 10043a9:	add    BYTE PTR [rsi],ch
 10043ab:	add    BYTE PTR [rip+0xa00],cl        # 0x1004db1
	...
 10043bd:	add    BYTE PTR [rax],al
 10043bf:	add    BYTE PTR [rbp+0x0],al
 10043c2:	jb     0x10043c4
 10043c4:	jb     0x10043c6
 10043c6:	outs   dx,DWORD PTR ds:[rsi]
 10043c7:	add    BYTE PTR [rdx+0x0],dh
 10043ca:	and    BYTE PTR [rax],al
 10043cc:	sub    eax,0x52002000
 10043d1:	add    BYTE PTR [rbp+0x0],ah
 10043d4:	ins    DWORD PTR es:[rdi],dx
 10043d5:	add    BYTE PTR [rdi+0x0],ch
 10043d8:	je     0x10043da
 10043da:	add    BYTE PTR gs:[rax],ah
 10043dd:	add    BYTE PTR [rbp+0x0],ch
 10043e0:	add    BYTE PTR gs:[rbp+0x0],ch
 10043e4:	outs   dx,DWORD PTR ds:[rsi]
 10043e5:	add    BYTE PTR [rdx+0x0],dh
 10043e8:	jns    0x10043ea
 10043ea:	and    BYTE PTR [rax],al
 10043ec:	data16 add BYTE PTR [rcx+0x0],ah
 10043f0:	imul   eax,DWORD PTR [rax],0x65006c
 10043f6:	add    BYTE PTR fs:[rax],ah
 10043f9:	add    BYTE PTR [rbx+0x0],dh
 10043fc:	(bad)  
 10043fd:	add    BYTE PTR [rsi+0x0],ch
 1004400:	imul   eax,DWORD PTR [rax],0x790074
 1004406:	and    BYTE PTR [rax],al
 1004408:	movsxd eax,DWORD PTR [rax]
 100440a:	push   0x63006500
 100440f:	add    BYTE PTR [rbx+0x0],ch
 1004412:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004e19
 1004419:	add    BYTE PTR [rax],al
 100441b:	add    BYTE PTR [rax],al
 100441d:	add    BYTE PTR [rax],al
 100441f:	add    BYTE PTR [rax+rax*1+0x68],dl
 1004423:	add    BYTE PTR [rbp+0x0],ah
 1004426:	and    BYTE PTR [rax],al
 1004428:	add    BYTE PTR gs:[rdx+0x0],dh
 100442c:	jb     0x100442e
 100442e:	outs   dx,DWORD PTR ds:[rsi]
 100442f:	add    BYTE PTR [rdx+0x0],dh
 1004432:	and    BYTE PTR [rax],al
 1004434:	imul   eax,DWORD PTR [rax],0x66006e
 100443a:	outs   dx,DWORD PTR ds:[rsi]
 100443b:	add    BYTE PTR [rdx+0x0],dh
 100443e:	ins    DWORD PTR es:[rdi],dx
 100443f:	add    BYTE PTR [rcx+0x0],ah
 1004442:	je     0x1004444
 1004444:	imul   eax,DWORD PTR [rax],0x6e006f
 100444a:	and    BYTE PTR [rax],al
 100444c:	push   0x73006100
 1004451:	add    BYTE PTR [rax],ah
 1004453:	add    BYTE PTR [rdx+0x0],ah
 1004456:	add    BYTE PTR gs:[rbp+0x0],ah
 100445a:	outs   dx,BYTE PTR ds:[rsi]
 100445b:	add    BYTE PTR [rax],ah
 100445d:	add    BYTE PTR [rbx+0x0],dh
 1004460:	jne    0x1004462
 1004462:	(bad)  
 1004463:	add    BYTE PTR [rbp+0x0],ch
 1004466:	imul   eax,DWORD PTR [rax],0x740074
 100446c:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1004471:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004475:	add    BYTE PTR [rax],ah
 1004477:	add    BYTE PTR [rdi+0x0],dl
 100447a:	(bad)  
 100447b:	add    BYTE PTR [rax+rax*1+0x73],dh
 100447f:	add    BYTE PTR [rdi+0x0],ch
 1004482:	outs   dx,BYTE PTR ds:[rsi]
 1004483:	add    BYTE PTR [rax],ah
 1004485:	add    BYTE PTR [rbp+0x0],ah
 1004488:	jb     0x100448a
 100448a:	jb     0x100448c
 100448c:	outs   dx,DWORD PTR ds:[rsi]
 100448d:	add    BYTE PTR [rdx+0x0],dh
 1004490:	and    BYTE PTR [rax],al
 1004492:	jb     0x1004494
 1004494:	add    BYTE PTR gs:[rax+0x0],dh
 1004498:	outs   dx,DWORD PTR ds:[rsi]
 1004499:	add    BYTE PTR [rdx+0x0],dh
 100449c:	je     0x100449e
 100449e:	imul   eax,DWORD PTR [rax],0x67006e
 10044a4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004eab
 10044ab:	add    BYTE PTR [rax],al
 10044ad:	add    BYTE PTR [rax],al
 10044af:	add    BYTE PTR [rbp+0x0],al
 10044b2:	jb     0x10044b4
 10044b4:	jb     0x10044b6
 10044b6:	outs   dx,DWORD PTR ds:[rsi]
 10044b7:	add    BYTE PTR [rdx+0x0],dh
 10044ba:	and    BYTE PTR [rax],al
 10044bc:	sub    eax,0x73002000
 10044c1:	add    BYTE PTR [rdi+0x0],ch
 10044c4:	ins    DWORD PTR es:[rdi],dx
 10044c5:	add    BYTE PTR [rbp+0x0],ah
 10044c8:	and    BYTE PTR [rax],al
 10044ca:	outs   dx,DWORD PTR ds:[rsi]
 10044cb:	add    BYTE PTR [rsi+0x0],ah
 10044ce:	and    BYTE PTR [rax],al
 10044d0:	je     0x10044d2
 10044d2:	push   0x20006500
 10044d7:	add    BYTE PTR [rax+rax*1+0x75],ah
 10044db:	add    BYTE PTR [rbp+0x0],ch
 10044de:	jo     0x10044e0
 10044e0:	and    BYTE PTR [rax],al
 10044e2:	data16 add BYTE PTR [rcx+0x0],ch
 10044e6:	ins    BYTE PTR es:[rdi],dx
 10044e7:	add    BYTE PTR [rbp+0x0],ah
 10044ea:	jae    0x10044ec
 10044ec:	and    BYTE PTR [rax],al
 10044ee:	ja     0x10044f0
 10044f0:	add    BYTE PTR gs:[rdx+0x0],dh
 10044f4:	add    BYTE PTR gs:[rax],ah
 10044f7:	add    BYTE PTR [rsi+0x0],ch
 10044fa:	outs   dx,DWORD PTR ds:[rsi]
 10044fb:	add    BYTE PTR [rax+rax*1+0x20],dh
 10044ff:	add    BYTE PTR [rdi+0x0],ah
 1004502:	add    BYTE PTR gs:[rsi+0x0],ch
 1004506:	add    BYTE PTR gs:[rdx+0x0],dh
 100450a:	(bad)  
 100450b:	add    BYTE PTR [rax+rax*1+0x65],dh
 100450f:	add    BYTE PTR [rax+rax*1+0x20],ah
 1004513:	add    BYTE PTR [rdi+0x0],ch
 1004516:	outs   dx,BYTE PTR ds:[rsi]
 1004517:	add    BYTE PTR [rax],ah
 1004519:	add    BYTE PTR [rdx+0x0],dh
 100451c:	add    BYTE PTR gs:[rbp+0x0],ch
 1004520:	outs   dx,DWORD PTR ds:[rsi]
 1004521:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004525:	add    BYTE PTR [rax],ah
 1004527:	add    BYTE PTR [rsi+0x0],ch
 100452a:	outs   dx,DWORD PTR ds:[rsi]
 100452b:	add    BYTE PTR [rax+rax*1+0x65],ah
 100452f:	add    BYTE PTR [rbx+0x0],dh
 1004532:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004f39
 1004539:	add    BYTE PTR [rax],al
 100453b:	add    BYTE PTR [rax],al
 100453d:	add    BYTE PTR [rax],al
 100453f:	add    BYTE PTR [rax+0x10123],dl
 1004545:	add    BYTE PTR [rax],al
 1004547:	add    BYTE PTR [rax],dh
 1004549:	and    al,0x1
 100454b:	add    DWORD PTR [rax],eax
 100454d:	add    BYTE PTR [rax],al
 100454f:	add    BYTE PTR [rax+0x24],dl
 1004552:	add    DWORD PTR [rcx],eax
 1004554:	add    BYTE PTR [rax],al
 1004556:	add    BYTE PTR [rax],al
 1004558:	shl    BYTE PTR [rsi],1
 100455a:	add    DWORD PTR [rcx],eax
 100455c:	add    BYTE PTR [rax],al
 100455e:	add    BYTE PTR [rax],al
 1004560:	and    BYTE PTR [rdx],ah
 1004562:	add    DWORD PTR [rcx],eax
 1004564:	add    BYTE PTR [rax],al
 1004566:	add    BYTE PTR [rax],al
 1004568:	add    BYTE PTR [rdx],ah
 100456a:	add    DWORD PTR [rcx],eax
 100456c:	add    BYTE PTR [rax],al
 100456e:	add    BYTE PTR [rax],al
 1004570:	rex and DWORD PTR [rcx],eax
 1004573:	add    DWORD PTR [rax],eax
 1004575:	add    BYTE PTR [rax],al
 1004577:	add    BYTE PTR [rax+0x25],dh
 100457a:	add    DWORD PTR [rcx],eax
 100457c:	add    BYTE PTR [rax],al
 100457e:	add    BYTE PTR [rax],al
 1004580:	nop
 1004581:	and    al,BYTE PTR [rcx]
 1004583:	add    DWORD PTR [rax],eax
 1004585:	add    BYTE PTR [rax],al
 1004587:	add    BYTE PTR [rax],ah
 1004589:	and    DWORD PTR [rcx],eax
 100458b:	add    DWORD PTR [rax],eax
 100458d:	add    BYTE PTR [rax],al
 100458f:	add    BYTE PTR [rax+0x1012d],al
 1004595:	add    BYTE PTR [rax],al
 1004597:	add    BYTE PTR [rax+0x1012e],al
 100459d:	add    BYTE PTR [rax],al
 100459f:	add    BYTE PTR [rax+0x21],dl
 10045a2:	add    DWORD PTR [rcx],eax
 10045a4:	add    BYTE PTR [rax],al
 10045a6:	add    BYTE PTR [rax],al
 10045a8:	shl    BYTE PTR [rcx],1
 10045aa:	add    DWORD PTR [rcx],eax
 10045ac:	add    BYTE PTR [rax],al
 10045ae:	add    BYTE PTR [rax],al
 10045b0:	and    BYTE PTR [rdx],0x1
 10045b3:	add    DWORD PTR [rax],eax
 10045b5:	add    BYTE PTR [rax],al
 10045b7:	add    BYTE PTR [rax+0x22],dh
 10045ba:	add    DWORD PTR [rcx],eax
 10045bc:	add    BYTE PTR [rax],al
 10045be:	add    BYTE PTR [rax],al
 10045c0:	lock and al,BYTE PTR [rcx]
 10045c3:	add    DWORD PTR [rax],eax
 10045c5:	add    BYTE PTR [rax],al
 10045c7:	add    BYTE PTR [rax],al
 10045c9:	and    eax,DWORD PTR [rcx]
 10045cb:	add    DWORD PTR [rax],eax
 10045cd:	add    BYTE PTR [rax],al
 10045cf:	add    al,ah
 10045d1:	and    al,BYTE PTR [rcx]
 10045d3:	add    DWORD PTR [rax],eax
 10045d5:	add    BYTE PTR [rax],al
 10045d7:	add    BYTE PTR [rax+0x10122],dh
 10045dd:	add    BYTE PTR [rax],al
 10045df:	add    al,al
 10045e1:	and    al,BYTE PTR [rcx]
 10045e3:	add    DWORD PTR [rax],eax
 10045e5:	add    BYTE PTR [rax],al
 10045e7:	add    al,dl
 10045e9:	and    al,BYTE PTR [rcx]
 10045eb:	add    DWORD PTR [rax],eax
 10045ed:	add    BYTE PTR [rax],al
 10045ef:	add    al,al
 10045f1:	and    DWORD PTR [rcx],eax
 10045f3:	add    DWORD PTR [rax],eax
 10045f5:	add    BYTE PTR [rax],al
 10045f7:	add    BYTE PTR [rax+0x10134],ah
 10045fd:	add    BYTE PTR [rax],al
 10045ff:	add    BYTE PTR [rax+0x23],dl
 1004602:	add    DWORD PTR [rcx],eax
 1004604:	add    BYTE PTR [rax],al
 1004606:	add    BYTE PTR [rax],al
 1004608:	rex and eax,DWORD PTR [rcx]
 100460b:	add    DWORD PTR [rax],eax
 100460d:	add    BYTE PTR [rax],al
 100460f:	add    BYTE PTR [rax],ah
 1004611:	and    eax,DWORD PTR [rcx]
 1004613:	add    DWORD PTR [rax],eax
 1004615:	add    BYTE PTR [rax],al
 1004617:	add    BYTE PTR [rax],dh
 1004619:	and    eax,DWORD PTR [rcx]
 100461b:	add    DWORD PTR [rax],eax
 100461d:	add    BYTE PTR [rax],al
 100461f:	add    al,ah
 1004621:	and    DWORD PTR [rcx],eax
 1004623:	add    DWORD PTR [rax],eax
 1004625:	add    BYTE PTR [rax],al
 1004627:	add    BYTE PTR [rax+0x28],dl
 100462a:	add    DWORD PTR [rcx],eax
 100462c:	add    BYTE PTR [rax],al
 100462e:	add    BYTE PTR [rax],al
 1004630:	sub    BYTE PTR [rdi],0x1
 1004633:	add    DWORD PTR [rax],eax
 1004635:	add    BYTE PTR [rax],al
 1004637:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400b23d
 100463d:	add    BYTE PTR [rax],ah
 100463f:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500b245
 1004645:	add    BYTE PTR [rax],ah
 1004647:	add    BYTE PTR [rax],dh
 1004649:	add    BYTE PTR [rax],ah
 100464b:	add    BYTE PTR [rax],dh
 100464d:	add    BYTE PTR [rdx],bh
 100464f:	add    BYTE PTR [rax],dh
 1004651:	add    BYTE PTR [rax],ah
 1004653:	add    BYTE PTR [rip+0x7000],ah        # 0x100b659
 1004659:	add    BYTE PTR [rax],al
 100465b:	add    BYTE PTR [rax],al
 100465d:	add    BYTE PTR [rax],al
 100465f:	add    BYTE PTR [rax+rax*1+0x69],dl
 1004663:	add    BYTE PTR [rbp+0x0],ch
 1004666:	add    BYTE PTR gs:[rdi+0x0],ch
 100466a:	jne    0x100466c
 100466c:	je     0x100466e
 100466e:	and    BYTE PTR [rax],al
 1004670:	ja     0x1004672
 1004672:	(bad)  
 1004673:	add    BYTE PTR [rcx+0x0],ch
 1004676:	je     0x1004678
 1004678:	imul   eax,DWORD PTR [rax],0x67006e
 100467e:	and    BYTE PTR [rax],al
 1004680:	data16 add BYTE PTR [rdi+0x0],ch
 1004684:	jb     0x1004686
 1004686:	and    BYTE PTR [rax],al
 1004688:	add    BYTE PTR gs:[rax+0x0],bh
 100468c:	je     0x100468e
 100468e:	add    BYTE PTR gs:[rdx+0x0],dh
 1004692:	outs   dx,BYTE PTR ds:[rsi]
 1004693:	add    BYTE PTR [rcx+0x0],ah
 1004696:	ins    BYTE PTR es:[rdi],dx
 1004697:	add    BYTE PTR [rax],ah
 1004699:	add    BYTE PTR [rax+rax*1+0x75],ah
 100469d:	add    BYTE PTR [rbp+0x0],ch
 10046a0:	jo     0x10046a2
 10046a2:	and    BYTE PTR [rax],al
 10046a4:	jo     0x10046a6
 10046a6:	jb     0x10046a8
 10046a8:	outs   dx,DWORD PTR ds:[rsi]
 10046a9:	add    BYTE PTR [rbx+0x0],ah
 10046ac:	add    BYTE PTR gs:[rbx+0x0],dh
 10046b0:	jae    0x10046b2
 10046b2:	and    BYTE PTR [rax],al
 10046b4:	and    eax,0x2e006400
 10046b9:	add    BYTE PTR [rip+0xa00],cl        # 0x10050bf
 10046bf:	add    BYTE PTR [rbp+0x0],al
 10046c2:	js     0x10046c4
 10046c4:	je     0x10046c6
 10046c6:	add    BYTE PTR gs:[rdx+0x0],dh
 10046ca:	outs   dx,BYTE PTR ds:[rsi]
 10046cb:	add    BYTE PTR [rcx+0x0],ah
 10046ce:	ins    BYTE PTR es:[rdi],dx
 10046cf:	add    BYTE PTR [rax],ah
 10046d1:	add    BYTE PTR [rax+rax*1+0x75],ah
 10046d5:	add    BYTE PTR [rbp+0x0],ch
 10046d8:	jo     0x10046da
 10046da:	and    BYTE PTR [rax],al
 10046dc:	jo     0x10046de
 10046de:	jb     0x10046e0
 10046e0:	outs   dx,DWORD PTR ds:[rsi]
 10046e1:	add    BYTE PTR [rbx+0x0],ah
 10046e4:	add    BYTE PTR gs:[rbx+0x0],dh
 10046e8:	jae    0x10046ea
 10046ea:	and    BYTE PTR [rax],al
 10046ec:	outs   dx,BYTE PTR ds:[rsi]
 10046ed:	add    BYTE PTR [rdi+0x0],ch
 10046f0:	je     0x10046f2
 10046f2:	and    BYTE PTR [rax],al
 10046f4:	add    BYTE PTR gs:[rax+0x0],bh
 10046f8:	add    BYTE PTR gs:[rbx+0x0],ah
 10046fc:	jne    0x10046fe
 10046fe:	je     0x1004700
 1004700:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1004705:	add    BYTE PTR [rip+0xa00],cl        # 0x100510b
 100470b:	add    BYTE PTR [rax+rax*1+0x0],bl
 100470f:	add    BYTE PTR [rax+0x0],ch
 1004712:	jb     0x1004714
 1004714:	cmp    al,BYTE PTR [rax]
 1004716:	and    BYTE PTR [rax],al
 1004718:	xor    BYTE PTR [rax],al
 100471a:	js     0x100471c
 100471c:	and    eax,0x38003000
 1004721:	add    BYTE PTR [rax+0x0],bh
 1004724:	add    BYTE PTR [rax],al
 1004726:	add    BYTE PTR [rax],al
 1004728:	and    eax,0x3a007300
 100472d:	add    BYTE PTR [rax],ah
 100472f:	add    BYTE PTR [rip+0x7300],ah        # 0x100ba35
 1004735:	add    BYTE PTR [rax],al
 1004737:	add    BYTE PTR [rbx+0x0],dh
 100473a:	jno    0x100473c
 100473c:	ins    BYTE PTR es:[rdi],dx
 100473d:	add    BYTE PTR [rdi+0x0],dh
 1004740:	jbe    0x1004742
 1004742:	jae    0x1004744
 1004744:	jae    0x1004746
 1004746:	pop    rdi
 1004747:	add    BYTE PTR [rax+0x0],bh
 100474a:	jo     0x100474c
 100474c:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 1004751:	add    BYTE PTR [rax+rax*1+0x0],ch
 1004755:	add    BYTE PTR [rax],al
 1004757:	add    BYTE PTR [rbx+0x0],dh
 100475a:	jno    0x100475c
 100475c:	ins    BYTE PTR es:[rdi],dx
 100475d:	add    BYTE PTR [rdi+0x0],dh
 1004760:	jbe    0x1004762
 1004762:	jae    0x1004764
 1004764:	jae    0x1004766
 1004766:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 100476b:	add    BYTE PTR [rax+rax*1+0x0],ch
 100476f:	add    BYTE PTR [rcx+0x0],cl
 1004772:	outs   dx,BYTE PTR ds:[rsi]
 1004773:	add    BYTE PTR [rcx+0x0],ch
 1004776:	je     0x1004778
 1004778:	push   rbx
 1004779:	add    BYTE PTR [rcx+0x0],dl
 100477c:	rex.WR add BYTE PTR [rdi+0x0],r10b
 1004780:	jb     0x1004782
 1004782:	imul   eax,DWORD PTR [rax],0x650074
 1004788:	jb     0x100478a
 100478a:	rex.WRXB add BYTE PTR [r11+0x0],r10b
 100478e:	push   rsi
 100478f:	add    BYTE PTR [rbp+0x0],ah
 1004792:	jb     0x1004794
 1004794:	add    BYTE PTR [rbp+0x0],r12b
 1004798:	jo     0x100479a
 100479a:	add    BYTE PTR gs:[rsi+0x0],ch
 100479e:	add    BYTE PTR fs:[rbp+0x0],ah
 10047a2:	outs   dx,BYTE PTR ds:[rsi]
 10047a3:	add    BYTE PTR [rax+rax*1+0x41],dh
 10047a7:	add    BYTE PTR [rax+0x0],dh
 10047aa:	imul   eax,DWORD PTR [rax],0x73
 10047b0:	pop    rcx
 10047b1:	rex.WXB push r15
 10047b3:	push   rbx
 10047b4:	push   rsi
 10047b5:	rex.XB
 10047b6:	rex.XB add BYTE PTR [r8],al
 10047b9:	add    BYTE PTR [rax],al
 10047bb:	add    BYTE PTR [rax],al
 10047bd:	add    BYTE PTR [rax],al
 10047bf:	add    BYTE PTR [rbp+0x0],ah
 10047c2:	cmp    al,BYTE PTR [rax]
 10047c4:	pop    rsp
 10047c5:	add    BYTE PTR [rbx+0x0],dh
 10047c8:	jno    0x10047ca
 10047ca:	ins    BYTE PTR es:[rdi],dx
 10047cb:	add    BYTE PTR [rcx],dh
 10047cd:	add    BYTE PTR [rcx],dh
 10047cf:	add    BYTE PTR [rdi+0x0],bl
 10047d2:	ins    DWORD PTR es:[rdi],dx
 10047d3:	add    BYTE PTR [rcx+0x0],ah
 10047d6:	imul   eax,DWORD PTR [rax],0x5f006e
 10047dc:	je     0x10047de
 10047de:	pop    rsp
 10047df:	add    BYTE PTR [rbx+0x0],dh
 10047e2:	jno    0x10047e4
 10047e4:	ins    BYTE PTR es:[rdi],dx
 10047e5:	add    BYTE PTR [rax+rax*1+0x6e],bl
 10047e9:	add    BYTE PTR [rax+rax*1+0x64],dh
 10047ed:	add    BYTE PTR [rdx+0x0],ah
 10047f0:	ins    DWORD PTR es:[rdi],dx
 10047f1:	add    BYTE PTR [rbx+0x0],dh
 10047f4:	pop    rsp
 10047f5:	add    BYTE PTR [rbx+0x0],dh
 10047f8:	je     0x10047fa
 10047fa:	outs   dx,DWORD PTR ds:[rsi]
 10047fb:	add    BYTE PTR [rdx+0x0],dh
 10047fe:	add    BYTE PTR gs:[rsi+0x0],ch
 1004802:	add    BYTE PTR [eax+eax*1+0x64],bl
 1004807:	add    BYTE PTR [rbp+0x0],ch
 100480a:	jne    0x100480c
 100480c:	pop    rsp
 100480d:	add    BYTE PTR [rax+rax*1+0x6d],ah
 1004811:	add    BYTE PTR [rax+0x0],dh
 1004814:	ins    BYTE PTR es:[rdi],dx
 1004815:	add    BYTE PTR [rax+rax*1+0x5c],ah
 1004819:	add    BYTE PTR [rbx+0x0],dh
 100481c:	jno    0x100481e
 100481e:	ins    BYTE PTR es:[rdi],dx
 100481f:	add    BYTE PTR [rdi+0x0],dh
 1004822:	jb     0x1004824
 1004824:	imul   eax,DWORD PTR [rax],0x650074
 100482a:	jb     0x100482c
 100482c:	add    BYTE PTR cs:[rcx+0x0],bh
 1004830:	jne    0x1004832
 1004832:	imul   eax,DWORD PTR [rax],0x6f
 1004835:	add    BYTE PTR [rsi+0x0],ch
 1004838:	pop    rsp
 1004839:	add    BYTE PTR [rbx+0x0],dh
 100483c:	jbe    0x100483e
 100483e:	movsxd eax,DWORD PTR [rax]
 1004840:	pop    rsp
 1004841:	add    BYTE PTR [rdi+0x0],ch
 1004844:	jae    0x1004846
 1004846:	add    BYTE PTR fs:[rbp+0x0],ah
 100484a:	jo     0x100484c
 100484c:	add    BYTE PTR gs:[rsi+0x0],ch
 1004850:	add    BYTE PTR fs:[rbp+0x0],ah
 1004854:	outs   dx,BYTE PTR ds:[rsi]
 1004855:	add    BYTE PTR [rax+rax*1+0x61],dh
 1004859:	add    BYTE PTR [rax+0x0],dh
 100485c:	imul   eax,DWORD PTR [rax],0x63002e
 1004862:	jo     0x1004864
 1004864:	jo     0x1004866
 1004866:	add    BYTE PTR [rax],al
 1004868:	(bad)  
 1004869:	add    BYTE PTR [rax+rax*1+0x76],ah
 100486d:	add    BYTE PTR [rcx+0x0],ah
 1004870:	jo     0x1004872
 1004872:	imul   eax,DWORD PTR [rax],0x320033
 1004878:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 100487d:	add    BYTE PTR [rax+rax*1+0x0],ch
	...
 100488d:	add    BYTE PTR [rax],al
 100488f:	add    BYTE PTR [rcx+0x0],ah
 1004892:	add    BYTE PTR fs:[rsi+0x0],dh
 1004896:	(bad)  
 1004897:	add    BYTE PTR [rax+0x0],dh
 100489a:	imul   eax,DWORD PTR [rax],0x320033
 10048a0:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 10048a5:	add    BYTE PTR [rax+rax*1+0x20],ch
 10048a9:	add    BYTE PTR [rbx+0x0],ah
 10048ac:	(bad)  
 10048ad:	add    BYTE PTR [rsi+0x0],ch
 10048b0:	outs   dx,BYTE PTR ds:[rsi]
 10048b1:	add    BYTE PTR [rdi+0x0],ch
 10048b4:	je     0x10048b6
 10048b6:	and    BYTE PTR [rax],al
 10048b8:	(bad)  
 10048b9:	add    BYTE PTR [rbp+0x0],ah
 10048bc:	and    BYTE PTR [rax],al
 10048be:	ins    BYTE PTR es:[rdi],dx
 10048bf:	add    BYTE PTR [rdi+0x0],ch
 10048c2:	(bad)  
 10048c3:	add    BYTE PTR [rax+rax*1+0x65],ah
 10048c7:	add    BYTE PTR [rax+rax*1+0x2e],ah
 10048cb:	add    BYTE PTR [rax],ah
 10048cd:	add    BYTE PTR [rax],ah
 10048cf:	add    BYTE PTR [rbp+0x0],al
 10048d2:	jb     0x10048d4
 10048d4:	jb     0x10048d6
 10048d6:	outs   dx,DWORD PTR ds:[rsi]
 10048d7:	add    BYTE PTR [rdx+0x0],dh
 10048da:	and    BYTE PTR [rax],al
 10048dc:	xor    BYTE PTR [rax],al
 10048de:	js     0x10048e0
 10048e0:	and    eax,0x2e007800
 10048e5:	add    BYTE PTR [rax],al
 10048e7:	add    BYTE PTR [rbx+0x72],al
 10048ea:	gs (bad) 
 10048ec:	je     0x1004953
 10048ee:	push   rdi
 10048ef:	gs ins BYTE PTR es:[rdi],dx
 10048f1:	ins    BYTE PTR es:[rdi],dx
 10048f2:	rex.WXB outs dx,BYTE PTR ds:[rsi]
 10048f4:	outs   dx,DWORD PTR ds:[rsi]
 10048f5:	ja     0x1004965
 10048f7:	push   rbx
 10048f8:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x0
 1004900:	push   rax
 1004901:	add    BYTE PTR [rdx+0x0],dh
 1004904:	outs   dx,DWORD PTR ds:[rsi]
 1004905:	add    BYTE PTR [rbx+0x0],ah
 1004908:	and    BYTE PTR [rax],al
 100490a:	(bad)  
 100490b:	add    BYTE PTR [rax+rax*1+0x64],ah
 100490f:	add    BYTE PTR [rdx+0x0],dh
 1004912:	add    BYTE PTR gs:[rbx+0x0],dh
 1004916:	jae    0x1004918
 1004918:	and    BYTE PTR [rax],al
 100491a:	data16 add BYTE PTR [rdi+0x0],ch
 100491e:	jb     0x1004920
 1004920:	and    BYTE PTR [rax],al
 1004922:	rex.XB add BYTE PTR [r10+0x0],sil
 1004926:	add    BYTE PTR gs:[rcx+0x0],ah
 100492a:	je     0x100492c
 100492c:	add    BYTE PTR gs:[rdi+0x0],dl
 1004930:	add    BYTE PTR gs:[rax+rax*1+0x6c],ch
 1004935:	add    BYTE PTR [rbx+0x0],ch
 1004938:	outs   dx,BYTE PTR ds:[rsi]
 1004939:	add    BYTE PTR [rdi+0x0],ch
 100493c:	ja     0x100493e
 100493e:	outs   dx,BYTE PTR ds:[rsi]
 100493f:	add    BYTE PTR [rbx+0x0],dl
 1004942:	imul   eax,DWORD PTR [rax],0x200064
 1004948:	movsxd eax,DWORD PTR [rax]
 100494a:	(bad)  
 100494b:	add    BYTE PTR [rsi+0x0],ch
 100494e:	outs   dx,BYTE PTR ds:[rsi]
 100494f:	add    BYTE PTR [rdi+0x0],ch
 1004952:	je     0x1004954
 1004954:	and    BYTE PTR [rax],al
 1004956:	(bad)  
 1004957:	add    BYTE PTR [rbp+0x0],ah
 100495a:	and    BYTE PTR [rax],al
 100495c:	outs   dx,DWORD PTR ds:[rsi]
 100495d:	add    BYTE PTR [rdx+0x0],ah
 1004960:	je     0x1004962
 1004962:	(bad)  
 1004963:	add    BYTE PTR [rcx+0x0],ch
 1004966:	outs   dx,BYTE PTR ds:[rsi]
 1004967:	add    BYTE PTR [rbp+0x0],ah
 100496a:	add    BYTE PTR fs:[rsi],ch
 100496d:	add    BYTE PTR [rax],ah
 100496f:	add    BYTE PTR [rax],ah
 1004971:	add    BYTE PTR [rbp+0x0],al
 1004974:	jb     0x1004976
 1004976:	jb     0x1004978
 1004978:	outs   dx,DWORD PTR ds:[rsi]
 1004979:	add    BYTE PTR [rdx+0x0],dh
 100497c:	and    BYTE PTR [rax],al
 100497e:	xor    BYTE PTR [rax],al
 1004980:	js     0x1004982
 1004982:	and    eax,0x2e007800
	...
 100498f:	add    BYTE PTR [rsi+0x0],al
 1004992:	(bad)  
 1004993:	add    BYTE PTR [rcx+0x0],ch
 1004996:	ins    BYTE PTR es:[rdi],dx
 1004997:	add    BYTE PTR [rbp+0x0],ah
 100499a:	add    BYTE PTR fs:[rax],ah
 100499d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10049a1:	add    BYTE PTR [rax],ah
 10049a3:	add    BYTE PTR [rdx+0x0],dh
 10049a6:	add    BYTE PTR gs:[rax+rax*1+0x72],dh
 10049ab:	add    BYTE PTR [rcx+0x0],ch
 10049ae:	add    BYTE PTR gs:[rsi+0x0],dh
 10049b2:	add    BYTE PTR gs:[rax],ah
 10049b5:	add    BYTE PTR [rdi+0x0],cl
 10049b8:	push   rbx
 10049b9:	add    BYTE PTR [rax],ah
 10049bb:	add    BYTE PTR [rsi+0x0],dh
 10049be:	add    BYTE PTR gs:[rdx+0x0],dh
 10049c2:	jae    0x10049c4
 10049c4:	imul   eax,DWORD PTR [rax],0x6e006f
 10049ca:	and    BYTE PTR [rax],al
 10049cc:	ja     0x10049ce
 10049ce:	imul   eax,DWORD PTR [rax],0x680074
 10049d4:	and    BYTE PTR [rax],al
 10049d6:	add    BYTE PTR gs:[rdx+0x0],dh
 10049da:	jb     0x10049dc
 10049dc:	outs   dx,DWORD PTR ds:[rsi]
 10049dd:	add    BYTE PTR [rdx+0x0],dh
 10049e0:	and    BYTE PTR [rax],al
 10049e2:	xor    BYTE PTR [rax],al
 10049e4:	js     0x10049e6
 10049e6:	and    eax,0x2e007800
 10049eb:	add    BYTE PTR [rax],al
 10049ed:	add    BYTE PTR [rax],al
 10049ef:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400b5f5
 10049f5:	add    BYTE PTR [rax],ah
 10049f7:	add    BYTE PTR [rbx+0x0],ah
 10049fa:	(bad)  
 10049fb:	add    BYTE PTR [rsi+0x0],ch
 10049fe:	outs   dx,BYTE PTR ds:[rsi]
 10049ff:	add    BYTE PTR [rdi+0x0],ch
 1004a02:	je     0x1004a04
 1004a04:	and    BYTE PTR [rax],al
 1004a06:	(bad)  
 1004a07:	add    BYTE PTR [rbp+0x0],ah
 1004a0a:	and    BYTE PTR [rax],al
 1004a0c:	ins    BYTE PTR es:[rdi],dx
 1004a0d:	add    BYTE PTR [rdi+0x0],ch
 1004a10:	(bad)  
 1004a11:	add    BYTE PTR [rax+rax*1+0x65],ah
 1004a15:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1004a19:	add    BYTE PTR [rax],ah
 1004a1b:	add    BYTE PTR [rax],ah
 1004a1d:	add    BYTE PTR [rbp+0x0],al
 1004a20:	jb     0x1004a22
 1004a22:	jb     0x1004a24
 1004a24:	outs   dx,DWORD PTR ds:[rsi]
 1004a25:	add    BYTE PTR [rdx+0x0],dh
 1004a28:	and    BYTE PTR [rax],al
 1004a2a:	xor    BYTE PTR [rax],al
 1004a2c:	js     0x1004a2e
 1004a2e:	and    eax,0x2e007800
 1004a33:	add    BYTE PTR [rax],al
 1004a35:	add    BYTE PTR [rax],al
 1004a37:	add    BYTE PTR [rcx+0x6e],cl
 1004a3a:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1004a42:	rex.RXB ins BYTE PTR es:[rdi],dx
 1004a44:	outs   dx,DWORD PTR ds:[rsi]
 1004a45:	(bad)
 1004a4a:	je     0x1004ac0
 1004a4c:	imul   ebp,DWORD PTR [rsi+0x67],0x73
	...
 1004a5f:	add    BYTE PTR [rax+0x0],dl
 1004a62:	jb     0x1004a64
 1004a64:	outs   dx,DWORD PTR ds:[rsi]
 1004a65:	add    BYTE PTR [rbx+0x0],ah
 1004a68:	and    BYTE PTR [rax],al
 1004a6a:	(bad)  
 1004a6b:	add    BYTE PTR [rax+rax*1+0x64],ah
 1004a6f:	add    BYTE PTR [rdx+0x0],dh
 1004a72:	add    BYTE PTR gs:[rbx+0x0],dh
 1004a76:	jae    0x1004a78
 1004a78:	and    BYTE PTR [rax],al
 1004a7a:	data16 add BYTE PTR [rdi+0x0],ch
 1004a7e:	jb     0x1004a80
 1004a80:	and    BYTE PTR [rax],al
 1004a82:	rex.WB add BYTE PTR [r14+0x0],bpl
 1004a86:	imul   eax,DWORD PTR [rax],0x690074
 1004a8c:	(bad)  
 1004a8d:	add    BYTE PTR [rax+rax*1+0x69],ch
 1004a91:	add    BYTE PTR [rdx+0x0],bh
 1004a94:	add    BYTE PTR gs:[rdi+0x0],al
 1004a98:	ins    BYTE PTR es:[rdi],dx
 1004a99:	add    BYTE PTR [rdi+0x0],ch
 1004a9c:	(bad)  
 1004a9d:	add    BYTE PTR [rcx+0x0],ah
 1004aa0:	ins    BYTE PTR es:[rdi],dx
 1004aa1:	add    BYTE PTR [rbx+0x0],dl
 1004aa4:	add    BYTE PTR gs:[rax+rax*1+0x74],dh
 1004aa9:	add    BYTE PTR [rcx+0x0],ch
 1004aac:	outs   dx,BYTE PTR ds:[rsi]
 1004aad:	add    BYTE PTR [rdi+0x0],ah
 1004ab0:	jae    0x1004ab2
 1004ab2:	and    BYTE PTR [rax],al
 1004ab4:	movsxd eax,DWORD PTR [rax]
 1004ab6:	(bad)  
 1004ab7:	add    BYTE PTR [rsi+0x0],ch
 1004aba:	outs   dx,BYTE PTR ds:[rsi]
 1004abb:	add    BYTE PTR [rdi+0x0],ch
 1004abe:	je     0x1004ac0
 1004ac0:	and    BYTE PTR [rax],al
 1004ac2:	(bad)  
 1004ac3:	add    BYTE PTR [rbp+0x0],ah
 1004ac6:	and    BYTE PTR [rax],al
 1004ac8:	outs   dx,DWORD PTR ds:[rsi]
 1004ac9:	add    BYTE PTR [rdx+0x0],ah
 1004acc:	je     0x1004ace
 1004ace:	(bad)  
 1004acf:	add    BYTE PTR [rcx+0x0],ch
 1004ad2:	outs   dx,BYTE PTR ds:[rsi]
 1004ad3:	add    BYTE PTR [rbp+0x0],ah
 1004ad6:	add    BYTE PTR fs:[rsi],ch
 1004ad9:	add    BYTE PTR [rax],ah
 1004adb:	add    BYTE PTR [rax],ah
 1004add:	add    BYTE PTR [rbp+0x0],al
 1004ae0:	jb     0x1004ae2
 1004ae2:	jb     0x1004ae4
 1004ae4:	outs   dx,DWORD PTR ds:[rsi]
 1004ae5:	add    BYTE PTR [rdx+0x0],dh
 1004ae8:	and    BYTE PTR [rax],al
 1004aea:	xor    BYTE PTR [rax],al
 1004aec:	js     0x1004aee
 1004aee:	and    eax,0x2e007800
 1004af3:	add    BYTE PTR [rax],al
 1004af5:	add    BYTE PTR [rax],al
 1004af7:	add    BYTE PTR [rbx+0x72],al
 1004afa:	gs (bad) 
 1004afc:	je     0x1004b63
 1004afe:	push   rbx
 1004aff:	push   rcx
 1004b00:	rex.WR push rdi
 1004b02:	jb     0x1004b6d
 1004b04:	je     0x1004b6b
 1004b06:	jb     0x1004b08
	...
 1004b10:	push   rax
 1004b11:	add    BYTE PTR [rdx+0x0],dh
 1004b14:	outs   dx,DWORD PTR ds:[rsi]
 1004b15:	add    BYTE PTR [rbx+0x0],ah
 1004b18:	and    BYTE PTR [rax],al
 1004b1a:	(bad)  
 1004b1b:	add    BYTE PTR [rax+rax*1+0x64],ah
 1004b1f:	add    BYTE PTR [rdx+0x0],dh
 1004b22:	add    BYTE PTR gs:[rbx+0x0],dh
 1004b26:	jae    0x1004b28
 1004b28:	and    BYTE PTR [rax],al
 1004b2a:	data16 add BYTE PTR [rdi+0x0],ch
 1004b2e:	jb     0x1004b30
 1004b30:	and    BYTE PTR [rax],al
 1004b32:	rex.XB add BYTE PTR [r10+0x0],sil
 1004b36:	add    BYTE PTR gs:[rcx+0x0],ah
 1004b3a:	je     0x1004b3c
 1004b3c:	add    BYTE PTR gs:[rbx+0x0],dl
 1004b40:	push   rcx
 1004b41:	add    BYTE PTR [rax+rax*1+0x57],cl
 1004b45:	add    BYTE PTR [rdx+0x0],dh
 1004b48:	imul   eax,DWORD PTR [rax],0x650074
 1004b4e:	jb     0x1004b50
 1004b50:	and    BYTE PTR [rax],al
 1004b52:	movsxd eax,DWORD PTR [rax]
 1004b54:	(bad)  
 1004b55:	add    BYTE PTR [rsi+0x0],ch
 1004b58:	outs   dx,BYTE PTR ds:[rsi]
 1004b59:	add    BYTE PTR [rdi+0x0],ch
 1004b5c:	je     0x1004b5e
 1004b5e:	and    BYTE PTR [rax],al
 1004b60:	(bad)  
 1004b61:	add    BYTE PTR [rbp+0x0],ah
 1004b64:	and    BYTE PTR [rax],al
 1004b66:	outs   dx,DWORD PTR ds:[rsi]
 1004b67:	add    BYTE PTR [rdx+0x0],ah
 1004b6a:	je     0x1004b6c
 1004b6c:	(bad)  
 1004b6d:	add    BYTE PTR [rcx+0x0],ch
 1004b70:	outs   dx,BYTE PTR ds:[rsi]
 1004b71:	add    BYTE PTR [rbp+0x0],ah
 1004b74:	add    BYTE PTR fs:[rsi],ch
 1004b77:	add    BYTE PTR [rax],ah
 1004b79:	add    BYTE PTR [rax],ah
 1004b7b:	add    BYTE PTR [rbp+0x0],al
 1004b7e:	jb     0x1004b80
 1004b80:	jb     0x1004b82
 1004b82:	outs   dx,DWORD PTR ds:[rsi]
 1004b83:	add    BYTE PTR [rdx+0x0],dh
 1004b86:	and    BYTE PTR [rax],al
 1004b88:	xor    BYTE PTR [rax],al
 1004b8a:	js     0x1004b8c
 1004b8c:	and    eax,0x2e007800
 1004b91:	add    BYTE PTR [rax],al
 1004b93:	add    BYTE PTR [rax],al
 1004b95:	add    BYTE PTR [rax],al
 1004b97:	add    BYTE PTR [rbp+riz*2+0x73],al
 1004b9b:	je     0x1004c0f
 1004b9d:	outs   dx,DWORD PTR ds:[rsi]
 1004b9e:	jns    0x1004bf3
 1004ba0:	push   rcx
 1004ba1:	rex.WR push rdi
 1004ba3:	jb     0x1004c0e
 1004ba5:	je     0x1004c0c
 1004ba7:	jb     0x1004ba9
 1004ba9:	add    BYTE PTR [rax],al
 1004bab:	add    BYTE PTR [rax],al
 1004bad:	add    BYTE PTR [rax],al
 1004baf:	add    BYTE PTR [rax+0x0],dl
 1004bb2:	jb     0x1004bb4
 1004bb4:	outs   dx,DWORD PTR ds:[rsi]
 1004bb5:	add    BYTE PTR [rbx+0x0],ah
 1004bb8:	and    BYTE PTR [rax],al
 1004bba:	(bad)  
 1004bbb:	add    BYTE PTR [rax+rax*1+0x64],ah
 1004bbf:	add    BYTE PTR [rdx+0x0],dh
 1004bc2:	add    BYTE PTR gs:[rbx+0x0],dh
 1004bc6:	jae    0x1004bc8
 1004bc8:	and    BYTE PTR [rax],al
 1004bca:	data16 add BYTE PTR [rdi+0x0],ch
 1004bce:	jb     0x1004bd0
 1004bd0:	and    BYTE PTR [rax],al
 1004bd2:	add    BYTE PTR [rbp+0x0],r12b
 1004bd6:	jae    0x1004bd8
 1004bd8:	je     0x1004bda
 1004bda:	jb     0x1004bdc
 1004bdc:	outs   dx,DWORD PTR ds:[rsi]
 1004bdd:	add    BYTE PTR [rcx+0x0],bh
 1004be0:	push   rbx
 1004be1:	add    BYTE PTR [rcx+0x0],dl
 1004be4:	rex.WR add BYTE PTR [rdi+0x0],r10b
 1004be8:	jb     0x1004bea
 1004bea:	imul   eax,DWORD PTR [rax],0x650074
 1004bf0:	jb     0x1004bf2
 1004bf2:	and    BYTE PTR [rax],al
 1004bf4:	movsxd eax,DWORD PTR [rax]
 1004bf6:	(bad)  
 1004bf7:	add    BYTE PTR [rsi+0x0],ch
 1004bfa:	outs   dx,BYTE PTR ds:[rsi]
 1004bfb:	add    BYTE PTR [rdi+0x0],ch
 1004bfe:	je     0x1004c00
 1004c00:	and    BYTE PTR [rax],al
 1004c02:	(bad)  
 1004c03:	add    BYTE PTR [rbp+0x0],ah
 1004c06:	and    BYTE PTR [rax],al
 1004c08:	outs   dx,DWORD PTR ds:[rsi]
 1004c09:	add    BYTE PTR [rdx+0x0],ah
 1004c0c:	je     0x1004c0e
 1004c0e:	(bad)  
 1004c0f:	add    BYTE PTR [rcx+0x0],ch
 1004c12:	outs   dx,BYTE PTR ds:[rsi]
 1004c13:	add    BYTE PTR [rbp+0x0],ah
 1004c16:	add    BYTE PTR fs:[rsi],ch
 1004c19:	add    BYTE PTR [rax],ah
 1004c1b:	add    BYTE PTR [rax],ah
 1004c1d:	add    BYTE PTR [rbp+0x0],al
 1004c20:	jb     0x1004c22
 1004c22:	jb     0x1004c24
 1004c24:	outs   dx,DWORD PTR ds:[rsi]
 1004c25:	add    BYTE PTR [rdx+0x0],dh
 1004c28:	and    BYTE PTR [rax],al
 1004c2a:	xor    BYTE PTR [rax],al
 1004c2c:	js     0x1004c2e
 1004c2e:	and    eax,0x2e007800
	...
 1004c3f:	add    BYTE PTR [rax+0x47],bl
 1004c42:	add    BYTE PTR [rcx],al
 1004c44:	add    BYTE PTR [rax],al
 1004c46:	add    BYTE PTR [rax],al
 1004c48:	cmp    BYTE PTR [rdi+0x0],al
 1004c4b:	add    DWORD PTR [rax],eax
 1004c4d:	add    BYTE PTR [rax],al
 1004c4f:	add    BYTE PTR [rbx+0x0],dl
 1004c52:	push   rcx
 1004c53:	add    BYTE PTR [rax+rax*1+0x57],cl
 1004c57:	add    BYTE PTR [rdx+0x0],dl
 1004c5a:	rex.WB add BYTE PTR [r8+rax*1+0x45],dl
 1004c5f:	add    BYTE PTR [rdx+0x0],dl
 1004c62:	add    BYTE PTR [rax],al
 1004c64:	add    BYTE PTR [rax],al
 1004c66:	add    BYTE PTR [rax],al
 1004c68:	add    BYTE PTR [rcx+0x0],r13b
 1004c6c:	jae    0x1004c6e
 1004c6e:	(bad)  
 1004c6f:	add    BYTE PTR [rdx+0x0],ah
 1004c72:	ins    BYTE PTR es:[rdi],dx
 1004c73:	add    BYTE PTR [rbp+0x0],ah
 1004c76:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1004c7a:	add    BYTE PTR [ebx+0x0],dl
 1004c7e:	push   0x69007200
 1004c83:	add    BYTE PTR [rsi+0x0],ch
 1004c86:	imul   eax,DWORD PTR [rax],0x0
 1004c89:	add    BYTE PTR [rax],al
 1004c8b:	add    BYTE PTR [rax],al
 1004c8d:	add    BYTE PTR [rax],al
 1004c8f:	add    BYTE PTR [rsi+0x0],dl
 1004c92:	add    BYTE PTR gs:[rdx+0x0],dh
 1004c96:	jae    0x1004c98
 1004c98:	imul   eax,DWORD PTR [rax],0x6e006f
 1004c9e:	rex.XB add BYTE PTR [r8+0x0],bpl
 1004ca2:	add    BYTE PTR gs:[rbx+0x0],ah
 1004ca6:	imul   eax,DWORD PTR [rax],0x69
 1004ca9:	add    BYTE PTR [rsi+0x0],ch
 1004cac:	add    BYTE PTR [eax],al
 1004caf:	add    BYTE PTR [rbx+0x0],dl
 1004cb2:	pop    rcx
 1004cb3:	add    BYTE PTR [rbx+0x0],dl
 1004cb6:	push   rsp
 1004cb7:	add    BYTE PTR [rbp+0x0],al
 1004cba:	rex.WRB add BYTE PTR [r8+rax*1+0x43],r11b
 1004cbf:	add    BYTE PTR [rbp+0x0],dh
 1004cc2:	jb     0x1004cc4
 1004cc4:	jb     0x1004cc6
 1004cc6:	add    BYTE PTR gs:[rsi+0x0],ch
 1004cca:	je     0x1004ccc
 1004ccc:	rex.XB add BYTE PTR [r15+0x0],bpl
 1004cd0:	outs   dx,BYTE PTR ds:[rsi]
 1004cd1:	add    BYTE PTR [rax+rax*1+0x72],dh
 1004cd5:	add    BYTE PTR [rdi+0x0],ch
 1004cd8:	ins    BYTE PTR es:[rdi],dx
 1004cd9:	add    BYTE PTR [rbx+0x0],dl
 1004cdc:	add    BYTE PTR gs:[rax+rax*1+0x5c],dh
 1004ce1:	add    BYTE PTR [rbx+0x0],dl
 1004ce4:	add    BYTE PTR gs:[rdx+0x0],dh
 1004ce8:	jbe    0x1004cea
 1004cea:	imul   eax,DWORD PTR [rax],0x650063
 1004cf0:	jae    0x1004cf2
 1004cf2:	pop    rsp
 1004cf3:	add    BYTE PTR [rbx+0x0],dl
 1004cf6:	push   rcx
 1004cf7:	add    BYTE PTR [rax+rax*1+0x57],cl
 1004cfb:	add    BYTE PTR [rdx+0x0],dh
 1004cfe:	imul   eax,DWORD PTR [rax],0x650074
 1004d04:	jb     0x1004d06
 1004d06:	pop    rsp
 1004d07:	add    BYTE PTR [rbx+0x0],dl
 1004d0a:	add    BYTE PTR gs:[rax+rax*1+0x74],dh
 1004d0f:	add    BYTE PTR [rcx+0x0],ch
 1004d12:	outs   dx,BYTE PTR ds:[rsi]
 1004d13:	add    BYTE PTR [rdi+0x0],ah
 1004d16:	jae    0x1004d18
	...
 1004d20:	rex.WB
 1004d21:	rex.WRX
 1004d22:	rex.XB
 1004d23:	rex.R
 1004d24:	rex.RB
 1004d25:	rex.X
 1004d26:	rex.RXB
 1004d27:	rex.W add BYTE PTR [rax],al
 1004d2a:	add    BYTE PTR [rax],al
 1004d2c:	add    BYTE PTR [rax],al
 1004d2e:	add    BYTE PTR [rax],al
 1004d30:	add    BYTE PTR gs:[rdx],bh
 1004d33:	add    BYTE PTR [rax+rax*1+0x73],bl
 1004d37:	add    BYTE PTR [rcx+0x0],dh
 1004d3a:	ins    BYTE PTR es:[rdi],dx
 1004d3b:	add    BYTE PTR [rcx],dh
 1004d3d:	add    BYTE PTR [rcx],dh
 1004d3f:	add    BYTE PTR [rdi+0x0],bl
 1004d42:	ins    DWORD PTR es:[rdi],dx
 1004d43:	add    BYTE PTR [rcx+0x0],ah
 1004d46:	imul   eax,DWORD PTR [rax],0x5f006e
 1004d4c:	je     0x1004d4e
 1004d4e:	pop    rsp
 1004d4f:	add    BYTE PTR [rbx+0x0],dh
 1004d52:	jno    0x1004d54
 1004d54:	ins    BYTE PTR es:[rdi],dx
 1004d55:	add    BYTE PTR [rax+rax*1+0x6e],bl
 1004d59:	add    BYTE PTR [rax+rax*1+0x64],dh
 1004d5d:	add    BYTE PTR [rdx+0x0],ah
 1004d60:	ins    DWORD PTR es:[rdi],dx
 1004d61:	add    BYTE PTR [rbx+0x0],dh
 1004d64:	pop    rsp
 1004d65:	add    BYTE PTR [rbx+0x0],dh
 1004d68:	je     0x1004d6a
 1004d6a:	outs   dx,DWORD PTR ds:[rsi]
 1004d6b:	add    BYTE PTR [rdx+0x0],dh
 1004d6e:	add    BYTE PTR gs:[rsi+0x0],ch
 1004d72:	add    BYTE PTR [eax+eax*1+0x64],bl
 1004d77:	add    BYTE PTR [rbp+0x0],ch
 1004d7a:	jne    0x1004d7c
 1004d7c:	pop    rsp
 1004d7d:	add    BYTE PTR [rax+rax*1+0x6d],ah
 1004d81:	add    BYTE PTR [rax+0x0],dh
 1004d84:	ins    BYTE PTR es:[rdi],dx
 1004d85:	add    BYTE PTR [rax+rax*1+0x5c],ah
 1004d89:	add    BYTE PTR [rbx+0x0],dh
 1004d8c:	jno    0x1004d8e
 1004d8e:	ins    BYTE PTR es:[rdi],dx
 1004d8f:	add    BYTE PTR [rdi+0x0],dh
 1004d92:	jb     0x1004d94
 1004d94:	imul   eax,DWORD PTR [rax],0x650074
 1004d9a:	jb     0x1004d9c
 1004d9c:	add    BYTE PTR cs:[rcx+0x0],bh
 1004da0:	jne    0x1004da2
 1004da2:	imul   eax,DWORD PTR [rax],0x6f
 1004da5:	add    BYTE PTR [rsi+0x0],ch
 1004da8:	pop    rsp
 1004da9:	add    BYTE PTR [rcx+0x0],ch
 1004dac:	outs   dx,BYTE PTR ds:[rsi]
 1004dad:	add    BYTE PTR [rbx+0x0],ah
 1004db0:	pop    rsp
 1004db1:	add    BYTE PTR [rcx+0x0],bh
 1004db4:	imul   eax,DWORD PTR [rax],0x77
 1004db7:	add    BYTE PTR [rdi+0x0],bl
 1004dba:	add    BYTE PTR fs:[rbp+0x0],ah
 1004dbe:	(bad)  
 1004dbf:	add    BYTE PTR [rbp+0x0],dh
 1004dc2:	add    BYTE PTR [esi],ch
 1004dc5:	add    BYTE PTR [rax+0x0],ch
 1004dc8:	js     0x1004dca
 1004dca:	js     0x1004dcc
 1004dcc:	add    BYTE PTR [rax],al
 1004dce:	add    BYTE PTR [rax],al
 1004dd0:	and    eax,0x6400
 1004dd5:	add    BYTE PTR [rax],al
 1004dd7:	add    BYTE PTR [rax],dh
 1004dd9:	add    BYTE PTR [rax+0x0],bh
 1004ddc:	and    eax,0x38003000
 1004de1:	add    BYTE PTR [rax+rax*1+0x78],ch
	...
 1004ded:	add    BYTE PTR [rax],al
 1004def:	add    BYTE PTR [rip+0x3a007300],ah        # 0x3b00c0f5
 1004df5:	add    BYTE PTR [rax],ah
 1004df7:	add    BYTE PTR [rax+rax*1+0x68],dl
 1004dfb:	add    BYTE PTR [rdx+0x0],dh
 1004dfe:	outs   dx,DWORD PTR ds:[rsi]
 1004dff:	add    BYTE PTR [rdi+0x0],dh
 1004e02:	imul   eax,DWORD PTR [rax],0x67006e
 1004e08:	and    BYTE PTR [rax],al
 1004e0a:	rex.W add BYTE PTR [rdx+0x0],dl
 1004e0e:	add    BYTE PTR [r11+0x0],r10b
 1004e12:	push   rbp
 1004e13:	add    BYTE PTR [rax+rax*1+0x54],cl
 1004e17:	add    BYTE PTR [rax],ah
 1004e19:	add    BYTE PTR [rbx+0x0],ah
 1004e1c:	outs   dx,DWORD PTR ds:[rsi]
 1004e1d:	add    BYTE PTR [rax+rax*1+0x65],ah
 1004e21:	add    BYTE PTR [rax],ah
 1004e23:	add    BYTE PTR [rax],dh
 1004e25:	add    BYTE PTR [rax+0x0],bh
 1004e28:	and    eax,0x38003000
 1004e2d:	add    BYTE PTR [rax+rax*1+0x78],ch
 1004e31:	add    BYTE PTR [rsi],ch
 1004e33:	add    BYTE PTR [rax],ah
 1004e35:	add    BYTE PTR [rax+0x0],dl
 1004e38:	jb     0x1004e3a
 1004e3a:	add    BYTE PTR gs:[rsi+0x0],dh
 1004e3e:	imul   eax,DWORD PTR [rax],0x75006f
 1004e44:	jae    0x1004e46
 1004e46:	and    BYTE PTR [rax],al
 1004e48:	rex.W add BYTE PTR [rdx+0x0],dl
 1004e4c:	add    BYTE PTR [r11+0x0],r10b
 1004e50:	push   rbp
 1004e51:	add    BYTE PTR [rax+rax*1+0x54],cl
 1004e55:	add    BYTE PTR [rax],ah
 1004e57:	add    BYTE PTR [rbx+0x0],ah
 1004e5a:	outs   dx,DWORD PTR ds:[rsi]
 1004e5b:	add    BYTE PTR [rax+rax*1+0x65],ah
 1004e5f:	add    BYTE PTR [rax],ah
 1004e61:	add    BYTE PTR [rip+0x30002000],bh        # 0x31006e67
 1004e67:	add    BYTE PTR [rax+0x0],bh
 1004e6a:	and    eax,0x38003000
 1004e6f:	add    BYTE PTR [rax+rax*1+0x78],ch
 1004e73:	add    BYTE PTR [rax],al
 1004e75:	add    BYTE PTR [rax],al
 1004e77:	add    BYTE PTR [rax+rax*1+0x68],dl
 1004e7b:	add    BYTE PTR [rdx+0x0],dh
 1004e7e:	outs   dx,DWORD PTR ds:[rsi]
 1004e7f:	add    BYTE PTR [rdi+0x0],dh
 1004e82:	imul   eax,DWORD PTR [rax],0x67006e
	...
 1004e90:	and    eax,0x3a007300
 1004e95:	add    BYTE PTR [rax],ah
 1004e97:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100c19d
 1004e9d:	add    BYTE PTR [rax+0x0],cl
 1004ea0:	push   rdx
 1004ea1:	add    BYTE PTR [rbp+0x0],al
 1004ea4:	push   rbx
 1004ea5:	add    BYTE PTR [rbp+0x0],dl
 1004ea8:	rex.WR add BYTE PTR [rax+rax*1+0x20],r10b
 1004ead:	add    BYTE PTR [rbx+0x0],ah
 1004eb0:	outs   dx,DWORD PTR ds:[rsi]
 1004eb1:	add    BYTE PTR [rax+rax*1+0x65],ah
 1004eb5:	add    BYTE PTR [rax],ah
 1004eb7:	add    BYTE PTR [rax],dh
 1004eb9:	add    BYTE PTR [rax+0x0],bh
 1004ebc:	and    eax,0x38003000
 1004ec1:	add    BYTE PTR [rax+rax*1+0x78],ch
 1004ec5:	add    BYTE PTR [rsi],ch
 1004ec7:	add    BYTE PTR [rax],ah
 1004ec9:	add    BYTE PTR [rax+0x0],dl
 1004ecc:	jb     0x1004ece
 1004ece:	add    BYTE PTR gs:[rsi+0x0],dh
 1004ed2:	imul   eax,DWORD PTR [rax],0x75006f
 1004ed8:	jae    0x1004eda
 1004eda:	and    BYTE PTR [rax],al
 1004edc:	rex.W add BYTE PTR [rdx+0x0],dl
 1004ee0:	add    BYTE PTR [r11+0x0],r10b
 1004ee4:	push   rbp
 1004ee5:	add    BYTE PTR [rax+rax*1+0x54],cl
 1004ee9:	add    BYTE PTR [rax],ah
 1004eeb:	add    BYTE PTR [rbx+0x0],ah
 1004eee:	outs   dx,DWORD PTR ds:[rsi]
 1004eef:	add    BYTE PTR [rax+rax*1+0x65],ah
 1004ef3:	add    BYTE PTR [rax],ah
 1004ef5:	add    BYTE PTR [rip+0x30002000],bh        # 0x31006efb
 1004efb:	add    BYTE PTR [rax+0x0],bh
 1004efe:	and    eax,0x38003000
 1004f03:	add    BYTE PTR [rax+rax*1+0x78],ch
	...
 1004f0f:	add    BYTE PTR [rbx+0x0],al
 1004f12:	pop    rcx
 1004f13:	add    BYTE PTR [rbx+0x0],cl
 1004f16:	push   rdi
 1004f17:	add    BYTE PTR [rsi+0x0],al
 1004f1a:	jne    0x1004f1c
 1004f1c:	outs   dx,BYTE PTR ds:[rsi]
 1004f1d:	add    BYTE PTR [rbx+0x0],ah
 1004f20:	je     0x1004f22
 1004f22:	imul   eax,DWORD PTR [rax],0x6e006f
 1004f28:	push   rsp
 1004f29:	add    BYTE PTR [rdx+0x0],dh
 1004f2c:	(bad)  
 1004f2d:	add    BYTE PTR [rbx+0x0],ah
 1004f30:	add    BYTE PTR gs:[rdx+0x0],dh
 1004f34:	cmp    al,BYTE PTR [rax]
 1004f36:	cmp    al,BYTE PTR [rax]
 1004f38:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1004f3c:	add    BYTE PTR [ebp+0x0],al
 1004f40:	jb     0x1004f42
 1004f42:	jb     0x1004f44
 1004f44:	outs   dx,DWORD PTR ds:[rsi]
 1004f45:	add    BYTE PTR [rdx+0x0],dh
	...
 1004f50:	add    BYTE PTR [r10+0x0],r14b
 1004f54:	jb     0x1004f56
 1004f56:	outs   dx,DWORD PTR ds:[rsi]
 1004f57:	add    BYTE PTR [rdx+0x0],dh
 1004f5a:	and    BYTE PTR [rax],al
 1004f5c:	outs   dx,DWORD PTR ds:[rsi]
 1004f5d:	add    BYTE PTR [rsi+0x0],ch
 1004f60:	and    BYTE PTR [rax],al
 1004f62:	push   rdx
 1004f63:	add    BYTE PTR [rbp+0x0],ah
 1004f66:	add    BYTE PTR [ecx+0x0],ch
 1004f6a:	jae    0x1004f6c
 1004f6c:	je     0x1004f6e
 1004f6e:	add    BYTE PTR gs:[rdx+0x0],dh
 1004f72:	add    BYTE PTR [r14+0x0],r14b
 1004f76:	add    BYTE PTR gs:[rsi+0x0],ch
 1004f7a:	je     0x1004f7c
 1004f7c:	push   rbx
 1004f7d:	add    BYTE PTR [rdi+0x0],ch
 1004f80:	jne    0x1004f82
 1004f82:	jb     0x1004f84
 1004f84:	movsxd eax,DWORD PTR [rax]
 1004f86:	add    BYTE PTR gs:[rdi+0x0],dl
 1004f8a:	and    BYTE PTR [rax],al
 1004f8c:	xor    BYTE PTR [rax],al
 1004f8e:	js     0x1004f90
 1004f90:	and    eax,0x38003000
 1004f95:	add    BYTE PTR [rax+rax*1+0x78],ch
 1004f99:	add    BYTE PTR [rax],al
 1004f9b:	add    BYTE PTR [rax],al
 1004f9d:	add    BYTE PTR [rax],al
 1004f9f:	add    BYTE PTR [rbp+0x0],al
 1004fa2:	jb     0x1004fa4
 1004fa4:	jb     0x1004fa6
 1004fa6:	outs   dx,DWORD PTR ds:[rsi]
 1004fa7:	add    BYTE PTR [rdx+0x0],dh
 1004faa:	and    BYTE PTR [rax],al
 1004fac:	outs   dx,DWORD PTR ds:[rsi]
 1004fad:	add    BYTE PTR [rsi+0x0],ch
 1004fb0:	and    BYTE PTR [rax],al
 1004fb2:	push   rdx
 1004fb3:	add    BYTE PTR [rbp+0x0],ah
 1004fb6:	jo     0x1004fb8
 1004fb8:	outs   dx,DWORD PTR ds:[rsi]
 1004fb9:	add    BYTE PTR [rdx+0x0],dh
 1004fbc:	je     0x1004fbe
 1004fbe:	add    BYTE PTR [r14+0x0],r14b
 1004fc2:	add    BYTE PTR gs:[rsi+0x0],ch
 1004fc6:	je     0x1004fc8
 1004fc8:	push   rdi
 1004fc9:	add    BYTE PTR [rax],ah
 1004fcb:	add    BYTE PTR [rax],dh
 1004fcd:	add    BYTE PTR [rax+0x0],bh
 1004fd0:	and    eax,0x38003000
 1004fd5:	add    BYTE PTR [rax+rax*1+0x78],ch
 1004fd9:	add    BYTE PTR [rax],al
 1004fdb:	add    BYTE PTR [rax],al
 1004fdd:	add    BYTE PTR [rax],al
 1004fdf:	add    BYTE PTR [rbp+0x0],al
 1004fe2:	jb     0x1004fe4
 1004fe4:	jb     0x1004fe6
 1004fe6:	outs   dx,DWORD PTR ds:[rsi]
 1004fe7:	add    BYTE PTR [rdx+0x0],dh
 1004fea:	and    BYTE PTR [rax],al
 1004fec:	outs   dx,DWORD PTR ds:[rsi]
 1004fed:	add    BYTE PTR [rsi+0x0],ch
 1004ff0:	and    BYTE PTR [rax],al
 1004ff2:	add    BYTE PTR [rbp+0x0],r12b
 1004ff6:	jb     0x1004ff8
 1004ff8:	add    BYTE PTR gs:[rdi+0x0],ah
 1004ffc:	imul   eax,DWORD PTR [rax],0x740073
 1005002:	add    BYTE PTR gs:[rdx+0x0],dh
 1005006:	add    BYTE PTR [r14+0x0],r14b
 100500a:	add    BYTE PTR gs:[rsi+0x0],ch
 100500e:	je     0x1005010
 1005010:	push   rbx
 1005011:	add    BYTE PTR [rdi+0x0],ch
 1005014:	jne    0x1005016
 1005016:	jb     0x1005018
 1005018:	movsxd eax,DWORD PTR [rax]
 100501a:	add    BYTE PTR gs:[rax],ah
 100501d:	add    BYTE PTR [rax],dh
 100501f:	add    BYTE PTR [rax+0x0],bh
 1005022:	and    eax,0x38003000
 1005027:	add    BYTE PTR [rax+rax*1+0x78],ch
 100502b:	add    BYTE PTR [rax],al
 100502d:	add    BYTE PTR [rax],al
 100502f:	add    BYTE PTR [rax+0x0],cl
 1005032:	push   rdx
 1005033:	add    BYTE PTR [rbp+0x0],al
 1005036:	push   rbx
 1005037:	add    BYTE PTR [rbp+0x0],dl
 100503a:	rex.WR add BYTE PTR [rax+rax*1+0x20],r10b
 100503f:	add    BYTE PTR [rbp+0x0],al
 1005042:	pop    rax
 1005043:	add    BYTE PTR [rbx+0x0],al
 1005046:	add    BYTE PTR [r8+0x0],r10b
 100504a:	push   rsp
 100504b:	add    BYTE PTR [rcx+0x0],cl
 100504e:	rex.WRXB add BYTE PTR [r14+0x0],r9b
 1005052:	and    BYTE PTR [rax],al
 1005054:	rex.XB add BYTE PTR [r9+0x0],al
 1005058:	push   rbp
 1005059:	add    BYTE PTR [rdi+0x0],al
 100505c:	rex.W add BYTE PTR [rax+rax*1+0x3a],dl
 1005061:	add    BYTE PTR [rax],ah
 1005063:	add    BYTE PTR [rax+0x0],ch
 1005066:	jb     0x1005068
 1005068:	cmp    al,BYTE PTR [rax]
 100506a:	and    BYTE PTR [rax],al
 100506c:	xor    BYTE PTR [rax],al
 100506e:	js     0x1005070
 1005070:	and    eax,0x7800
	...
 100507d:	add    BYTE PTR [rax],al
 100507f:	add    BYTE PTR [rbx+0x0],dl
 1005082:	push   rsp
 1005083:	add    BYTE PTR [rdx+0x0],dl
 1005086:	push   rbp
 1005087:	add    BYTE PTR [rbx+0x0],al
 100508a:	push   rsp
 100508b:	add    BYTE PTR [rbp+0x0],dl
 100508e:	push   rdx
 100508f:	add    BYTE PTR [rbp+0x0],al
 1005092:	add    BYTE PTR [rax],r12b
 1005095:	add    BYTE PTR [rbp+0x0],al
 1005098:	pop    rax
 1005099:	add    BYTE PTR [rbx+0x0],al
 100509c:	add    BYTE PTR [r8+0x0],r10b
 10050a0:	push   rsp
 10050a1:	add    BYTE PTR [rcx+0x0],cl
 10050a4:	rex.WRXB add BYTE PTR [r14+0x0],r9b
 10050a8:	and    BYTE PTR [rax],al
 10050aa:	rex.XB add BYTE PTR [r9+0x0],al
 10050ae:	push   rbp
 10050af:	add    BYTE PTR [rdi+0x0],al
 10050b2:	rex.W add BYTE PTR [rax+rax*1+0x2c],dl
 10050b7:	add    BYTE PTR [rax],ah
 10050b9:	add    BYTE PTR [rdx+0x0],dh
 10050bc:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 10050c1:	add    BYTE PTR [rdx+0x0],dh
 10050c4:	outs   dx,BYTE PTR ds:[rsi]
 10050c5:	add    BYTE PTR [rcx+0x0],ch
 10050c8:	outs   dx,BYTE PTR ds:[rsi]
 10050c9:	add    BYTE PTR [rdi+0x0],ah
 10050cc:	and    BYTE PTR [rax],al
 10050ce:	push   0x3a007200
 10050d3:	add    BYTE PTR [rax],ah
 10050d5:	add    BYTE PTR [rax],dh
 10050d7:	add    BYTE PTR [rax+0x0],bh
 10050da:	and    eax,0x7800
 10050df:	add    BYTE PTR [rbp+0x0],dl
 10050e2:	rex.WRX add BYTE PTR [rbx+0x0],r9b
 10050e6:	rex.WRX add BYTE PTR [rdi+0x0],r9b
 10050ea:	push   rdi
 10050eb:	add    BYTE PTR [rsi+0x0],cl
 10050ee:	and    BYTE PTR [rax],al
 10050f0:	add    BYTE PTR [r8+0x0],r11b
 10050f4:	rex.XB add BYTE PTR [r13+0x0],al
 10050f8:	push   rax
 10050f9:	add    BYTE PTR [rax+rax*1+0x49],dl
 10050fd:	add    BYTE PTR [rdi+0x0],cl
 1005100:	rex.WRX add BYTE PTR [rax],r12b
 1005103:	add    BYTE PTR [rbx+0x0],al
 1005106:	add    BYTE PTR [r13+0x0],dl
 100510a:	rex.RXB add BYTE PTR [r8+0x0],r9b
 100510e:	push   rsp
 100510f:	add    BYTE PTR [rax+rax*1],ch
 1005112:	and    BYTE PTR [rax],al
 1005114:	jb     0x1005116
 1005116:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 100511b:	add    BYTE PTR [rdx+0x0],dh
 100511e:	outs   dx,BYTE PTR ds:[rsi]
 100511f:	add    BYTE PTR [rcx+0x0],ch
 1005122:	outs   dx,BYTE PTR ds:[rsi]
 1005123:	add    BYTE PTR [rdi+0x0],ah
 1005126:	and    BYTE PTR [rax],al
 1005128:	push   0x3a007200
 100512d:	add    BYTE PTR [rax],ah
 100512f:	add    BYTE PTR [rax],dh
 1005131:	add    BYTE PTR [rax+0x0],bh
 1005134:	and    eax,0x7800
 1005139:	add    BYTE PTR [rax],al
 100513b:	add    BYTE PTR [rax],al
 100513d:	add    BYTE PTR [rax],al
 100513f:	add    BYTE PTR [rbx+0x0],al
 1005142:	pop    rcx
 1005143:	add    BYTE PTR [rbx+0x0],cl
 1005146:	push   rdi
 1005147:	add    BYTE PTR [rbx+0x0],dl
 100514a:	add    BYTE PTR gs:[rdx+0x0],dh
 100514e:	jbe    0x1005150
 1005150:	imul   eax,DWORD PTR [rax],0x650063
 1005156:	rex.WRB add BYTE PTR [r15+0x0],r13b
 100515a:	add    BYTE PTR fs:[rbp+0x0],dh
 100515e:	ins    BYTE PTR es:[rdi],dx
 100515f:	add    BYTE PTR [rbp+0x0],ah
 1005162:	cmp    al,BYTE PTR [rax]
 1005164:	cmp    al,BYTE PTR [rax]
 1005166:	push   rbx
 1005167:	add    BYTE PTR [rax+rax*1+0x61],dh
 100516b:	add    BYTE PTR [rdx+0x0],dh
 100516e:	je     0x1005170
 1005170:	add    BYTE PTR [rcx+0x0],r13b
 1005174:	jae    0x1005176
 1005176:	jo     0x1005178
 1005178:	(bad)  
 1005179:	add    BYTE PTR [rax+rax*1+0x63],dh
 100517d:	add    BYTE PTR [rax+0x0],ch
 1005180:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1005190:	add    BYTE PTR gs:[rdx],bh
 1005193:	add    BYTE PTR [rax+rax*1+0x73],bl
 1005197:	add    BYTE PTR [rcx+0x0],dh
 100519a:	ins    BYTE PTR es:[rdi],dx
 100519b:	add    BYTE PTR [rcx],dh
 100519d:	add    BYTE PTR [rcx],dh
 100519f:	add    BYTE PTR [rdi+0x0],bl
 10051a2:	ins    DWORD PTR es:[rdi],dx
 10051a3:	add    BYTE PTR [rcx+0x0],ah
 10051a6:	imul   eax,DWORD PTR [rax],0x5f006e
 10051ac:	je     0x10051ae
 10051ae:	pop    rsp
 10051af:	add    BYTE PTR [rbx+0x0],dh
 10051b2:	jno    0x10051b4
 10051b4:	ins    BYTE PTR es:[rdi],dx
 10051b5:	add    BYTE PTR [rax+rax*1+0x6e],bl
 10051b9:	add    BYTE PTR [rax+rax*1+0x64],dh
 10051bd:	add    BYTE PTR [rdx+0x0],ah
 10051c0:	ins    DWORD PTR es:[rdi],dx
 10051c1:	add    BYTE PTR [rbx+0x0],dh
 10051c4:	pop    rsp
 10051c5:	add    BYTE PTR [rbx+0x0],dh
 10051c8:	je     0x10051ca
 10051ca:	outs   dx,DWORD PTR ds:[rsi]
 10051cb:	add    BYTE PTR [rdx+0x0],dh
 10051ce:	add    BYTE PTR gs:[rsi+0x0],ch
 10051d2:	add    BYTE PTR [eax+eax*1+0x64],bl
 10051d7:	add    BYTE PTR [rbp+0x0],ch
 10051da:	jne    0x10051dc
 10051dc:	pop    rsp
 10051dd:	add    BYTE PTR [rax+rax*1+0x6d],ah
 10051e1:	add    BYTE PTR [rax+0x0],dh
 10051e4:	ins    BYTE PTR es:[rdi],dx
 10051e5:	add    BYTE PTR [rax+rax*1+0x5c],ah
 10051e9:	add    BYTE PTR [rbx+0x0],dh
 10051ec:	jno    0x10051ee
 10051ee:	ins    BYTE PTR es:[rdi],dx
 10051ef:	add    BYTE PTR [rdi+0x0],dh
 10051f2:	jb     0x10051f4
 10051f4:	imul   eax,DWORD PTR [rax],0x650074
 10051fa:	jb     0x10051fc
 10051fc:	add    BYTE PTR cs:[rcx+0x0],bh
 1005200:	jne    0x1005202
 1005202:	imul   eax,DWORD PTR [rax],0x6f
 1005205:	add    BYTE PTR [rsi+0x0],ch
 1005208:	pop    rsp
 1005209:	add    BYTE PTR [rbx+0x0],dh
 100520c:	jbe    0x100520e
 100520e:	movsxd eax,DWORD PTR [rax]
 1005210:	pop    rsp
 1005211:	add    BYTE PTR [rbx+0x0],dh
 1005214:	jbe    0x1005216
 1005216:	movsxd eax,DWORD PTR [rax]
 1005218:	add    BYTE PTR cs:[rbx+0x0],ah
 100521c:	js     0x100521e
 100521e:	js     0x1005220
	...
 1005230:	push   rbx
 1005231:	add    BYTE PTR [rax+rax*1+0x61],dh
 1005235:	add    BYTE PTR [rdx+0x0],dh
 1005238:	je     0x100523a
 100523a:	push   rbx
 100523b:	add    BYTE PTR [rbp+0x0],ah
 100523e:	jb     0x1005240
 1005240:	jbe    0x1005242
 1005242:	imul   eax,DWORD PTR [rax],0x650063
 1005248:	add    BYTE PTR [r8+r8*1+0x72],sil
 100524d:	add    BYTE PTR [rax+rax*1+0x44],ch
 1005251:	add    BYTE PTR [rcx+0x0],ch
 1005254:	jae    0x1005256
 1005256:	jo     0x1005258
 1005258:	(bad)  
 1005259:	add    BYTE PTR [rax+rax*1+0x63],dh
 100525d:	add    BYTE PTR [rax+0x0],ch
 1005260:	add    BYTE PTR gs:[rdx+0x0],dh
 1005264:	push   rdi
 1005265:	add    BYTE PTR [rax],ah
 1005267:	add    BYTE PTR [rsi+0x0],ah
 100526a:	(bad)  
 100526b:	add    BYTE PTR [rcx+0x0],ch
 100526e:	ins    BYTE PTR es:[rdi],dx
 100526f:	add    BYTE PTR [rbp+0x0],ah
 1005272:	add    BYTE PTR fs:[rsi],ch
 1005275:	add    BYTE PTR [rax],ah
 1005277:	add    BYTE PTR [rax],dh
 1005279:	add    BYTE PTR [rax+0x0],bh
 100527c:	and    eax,0x38003000
 1005281:	add    BYTE PTR [rax+rax*1+0x78],ch
	...
 100528d:	add    BYTE PTR [rax],al
 100528f:	add    BYTE PTR [rbx+0x0],al
 1005292:	pop    rcx
 1005293:	add    BYTE PTR [rbx+0x0],cl
 1005296:	push   rdi
 1005297:	add    BYTE PTR [rbx+0x0],dl
 100529a:	add    BYTE PTR gs:[rdx+0x0],dh
 100529e:	jbe    0x10052a0
 10052a0:	imul   eax,DWORD PTR [rax],0x650063
 10052a6:	rex.WRB add BYTE PTR [r15+0x0],r13b
 10052aa:	add    BYTE PTR fs:[rbp+0x0],dh
 10052ae:	ins    BYTE PTR es:[rdi],dx
 10052af:	add    BYTE PTR [rbp+0x0],ah
 10052b2:	cmp    al,BYTE PTR [rax]
 10052b4:	cmp    al,BYTE PTR [rax]
 10052b6:	push   rbx
 10052b7:	add    BYTE PTR [rax+rax*1+0x61],dh
 10052bb:	add    BYTE PTR [rdx+0x0],dh
 10052be:	je     0x10052c0
 10052c0:	add    BYTE PTR [rcx+0x0],r13b
 10052c4:	jae    0x10052c6
 10052c6:	jo     0x10052c8
 10052c8:	(bad)  
 10052c9:	add    BYTE PTR [rax+rax*1+0x63],dh
 10052cd:	add    BYTE PTR [rax+0x0],ch
 10052d0:	add    BYTE PTR gs:[rdx+0x0],dh
 10052d4:	cmp    al,BYTE PTR [rax]
 10052d6:	and    BYTE PTR [rax],al
 10052d8:	push   rdi
 10052d9:	add    BYTE PTR [rcx+0x0],ah
 10052dc:	imul   eax,DWORD PTR [rax],0x690074
 10052e2:	outs   dx,BYTE PTR ds:[rsi]
 10052e3:	add    BYTE PTR [rdi+0x0],ah
 10052e6:	and    BYTE PTR [rax],al
 10052e8:	data16 add BYTE PTR [rdi+0x0],ch
 10052ec:	jb     0x10052ee
 10052ee:	and    BYTE PTR [rax],al
 10052f0:	push   rbx
 10052f1:	add    BYTE PTR [rbp+0x0],ah
 10052f4:	jb     0x10052f6
 10052f6:	jbe    0x10052f8
 10052f8:	imul   eax,DWORD PTR [rax],0x650063
 10052fe:	rex.WRB add BYTE PTR [r9+0x0],r12b
 1005302:	imul   eax,DWORD PTR [rax],0x20006e
 1005308:	je     0x100530a
 100530a:	push   0x65007200
 100530f:	add    BYTE PTR [rcx+0x0],ah
 1005312:	add    BYTE PTR fs:[rax],ah
 1005315:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005319:	add    BYTE PTR [rax],ah
 100531b:	add    BYTE PTR [rsi+0x0],ah
 100531e:	imul   eax,DWORD PTR [rax],0x69006e
 1005324:	jae    0x1005326
 1005326:	push   0x2e002e00
 100532b:	add    BYTE PTR [rsi],ch
 100532d:	add    BYTE PTR [rax],al
 100532f:	add    BYTE PTR [rbx+0x0],al
 1005332:	pop    rcx
 1005333:	add    BYTE PTR [rbx+0x0],cl
 1005336:	push   rdi
 1005337:	add    BYTE PTR [rbx+0x0],dl
 100533a:	add    BYTE PTR gs:[rdx+0x0],dh
 100533e:	jbe    0x1005340
 1005340:	imul   eax,DWORD PTR [rax],0x650063
 1005346:	rex.WRB add BYTE PTR [r15+0x0],r13b
 100534a:	add    BYTE PTR fs:[rbp+0x0],dh
 100534e:	ins    BYTE PTR es:[rdi],dx
 100534f:	add    BYTE PTR [rbp+0x0],ah
 1005352:	cmp    al,BYTE PTR [rax]
 1005354:	cmp    al,BYTE PTR [rax]
 1005356:	push   rbx
 1005357:	add    BYTE PTR [rax+rax*1+0x61],dh
 100535b:	add    BYTE PTR [rdx+0x0],dh
 100535e:	je     0x1005360
 1005360:	add    BYTE PTR [rcx+0x0],r13b
 1005364:	jae    0x1005366
 1005366:	jo     0x1005368
 1005368:	(bad)  
 1005369:	add    BYTE PTR [rax+rax*1+0x63],dh
 100536d:	add    BYTE PTR [rax+0x0],ch
 1005370:	add    BYTE PTR gs:[rdx+0x0],dh
 1005374:	cmp    al,BYTE PTR [rax]
 1005376:	and    BYTE PTR [rax],al
 1005378:	push   rdi
 1005379:	add    BYTE PTR [rcx+0x0],ah
 100537c:	imul   eax,DWORD PTR [rax],0x200074
 1005382:	je     0x1005384
 1005384:	imul   eax,DWORD PTR [rax],0x65006d
 100538a:	add    BYTE PTR fs:[rax],ah
 100538d:	add    BYTE PTR [rdi+0x0],ch
 1005390:	jne    0x1005392
 1005392:	je     0x1005394
 1005394:	sub    al,0x0
 1005396:	and    BYTE PTR [rax],al
 1005398:	add    BYTE PTR gs:[rsi+0x0],ch
 100539c:	add    BYTE PTR fs:[rcx+0x0],ch
 10053a0:	outs   dx,BYTE PTR ds:[rsi]
 10053a1:	add    BYTE PTR [rdi+0x0],ah
 10053a4:	and    BYTE PTR [rax],al
 10053a6:	(bad)  
 10053a7:	add    BYTE PTR [rsi+0x0],ch
 10053aa:	jns    0x10053ac
 10053ac:	ja     0x10053ae
 10053ae:	(bad)  
 10053af:	add    BYTE PTR [rcx+0x0],bh
 10053b2:	add    BYTE PTR [rax],al
 10053b4:	add    BYTE PTR [rax],al
 10053b6:	add    BYTE PTR [rax],al
 10053b8:	rex.XB add BYTE PTR [r9+0x0],bl
 10053bc:	rex.WXB add BYTE PTR [r15+0x0],dl
 10053c0:	push   rbx
 10053c1:	add    BYTE PTR [rbp+0x0],ah
 10053c4:	jb     0x10053c6
 10053c6:	jbe    0x10053c8
 10053c8:	imul   eax,DWORD PTR [rax],0x650063
 10053ce:	rex.WRB add BYTE PTR [r15+0x0],r13b
 10053d2:	add    BYTE PTR fs:[rbp+0x0],dh
 10053d6:	ins    BYTE PTR es:[rdi],dx
 10053d7:	add    BYTE PTR [rbp+0x0],ah
 10053da:	cmp    al,BYTE PTR [rax]
 10053dc:	cmp    al,BYTE PTR [rax]
 10053de:	push   rbx
 10053df:	add    BYTE PTR [rbp+0x0],ah
 10053e2:	jb     0x10053e4
 10053e4:	jbe    0x10053e6
 10053e6:	imul   eax,DWORD PTR [rax],0x650063
 10053ec:	rex.WRB add BYTE PTR [r9+0x0],r12b
 10053f0:	imul   eax,DWORD PTR [rax],0x6e
	...
 10053fe:	add    BYTE PTR [rax],al
 1005400:	push   rdx
 1005401:	add    BYTE PTR [rbp+0x0],ah
 1005404:	add    BYTE PTR [ecx+0x0],ch
 1005408:	jae    0x100540a
 100540a:	je     0x100540c
 100540c:	add    BYTE PTR gs:[rdx+0x0],dh
 1005410:	push   rbx
 1005411:	add    BYTE PTR [rbp+0x0],ah
 1005414:	jb     0x1005416
 1005416:	jbe    0x1005418
 1005418:	imul   eax,DWORD PTR [rax],0x650063
 100541e:	add    BYTE PTR [r8+r8*1+0x72],sil
 1005423:	add    BYTE PTR [rax+rax*1+0x48],ch
 1005427:	add    BYTE PTR [rcx+0x0],ah
 100542a:	outs   dx,BYTE PTR ds:[rsi]
 100542b:	add    BYTE PTR [rax+rax*1+0x6c],ah
 100542f:	add    BYTE PTR [rbp+0x0],ah
 1005432:	jb     0x1005434
 1005434:	add    BYTE PTR [r8+0x0],r15b
 1005438:	and    BYTE PTR [rax],al
 100543a:	data16 add BYTE PTR [rcx+0x0],ah
 100543e:	imul   eax,DWORD PTR [rax],0x65006c
 1005444:	add    BYTE PTR fs:[rsi],ch
 1005447:	add    BYTE PTR [rax],ah
 1005449:	add    BYTE PTR [rax],dh
 100544b:	add    BYTE PTR [rax+0x0],bh
 100544e:	and    eax,0x38003000
 1005453:	add    BYTE PTR [rax+rax*1+0x78],ch
	...
 100545f:	add    BYTE PTR [rbx+0x0],al
 1005462:	pop    rcx
 1005463:	add    BYTE PTR [rbx+0x0],cl
 1005466:	push   rdi
 1005467:	add    BYTE PTR [rbx+0x0],dl
 100546a:	add    BYTE PTR gs:[rdx+0x0],dh
 100546e:	jbe    0x1005470
 1005470:	imul   eax,DWORD PTR [rax],0x650063
 1005476:	rex.WRB add BYTE PTR [r15+0x0],r13b
 100547a:	add    BYTE PTR fs:[rbp+0x0],dh
 100547e:	ins    BYTE PTR es:[rdi],dx
 100547f:	add    BYTE PTR [rbp+0x0],ah
 1005482:	cmp    al,BYTE PTR [rax]
 1005484:	cmp    al,BYTE PTR [rax]
 1005486:	rex.W add BYTE PTR [rcx+0x0],spl
 100548a:	outs   dx,BYTE PTR ds:[rsi]
 100548b:	add    BYTE PTR [rax+rax*1+0x6c],ah
 100548f:	add    BYTE PTR [rbp+0x0],ah
 1005492:	jb     0x1005494
	...
 10054a0:	rex.XB add BYTE PTR [r9+0x0],bl
 10054a4:	rex.WXB add BYTE PTR [r15+0x0],dl
 10054a8:	push   rbx
 10054a9:	add    BYTE PTR [rbp+0x0],ah
 10054ac:	jb     0x10054ae
 10054ae:	jbe    0x10054b0
 10054b0:	imul   eax,DWORD PTR [rax],0x650063
 10054b6:	rex.WRB add BYTE PTR [r15+0x0],r13b
 10054ba:	add    BYTE PTR fs:[rbp+0x0],dh
 10054be:	ins    BYTE PTR es:[rdi],dx
 10054bf:	add    BYTE PTR [rbp+0x0],ah
 10054c2:	cmp    al,BYTE PTR [rax]
 10054c4:	cmp    al,BYTE PTR [rax]
 10054c6:	push   rbx
 10054c7:	add    BYTE PTR [rbp+0x0],ah
 10054ca:	je     0x10054cc
 10054cc:	push   rbx
 10054cd:	add    BYTE PTR [rbp+0x0],ah
 10054d0:	jb     0x10054d2
 10054d2:	jbe    0x10054d4
 10054d4:	imul   eax,DWORD PTR [rax],0x650063
 10054da:	push   rbx
 10054db:	add    BYTE PTR [rax+rax*1+0x61],dh
 10054df:	add    BYTE PTR [rax+rax*1+0x75],dh
 10054e3:	add    BYTE PTR [rbx+0x0],dh
	...
 10054ee:	add    BYTE PTR [rax],al
 10054f0:	add    BYTE PTR [r8+rax*1+0x74],sil
 10054f5:	add    BYTE PTR [rbp+0x0],ah
 10054f8:	ins    DWORD PTR es:[rdi],dx
 10054f9:	add    BYTE PTR [rax+0x0],dh
 10054fc:	je     0x10054fe
 10054fe:	and    BYTE PTR [rax],al
 1005500:	je     0x1005502
 1005502:	outs   dx,DWORD PTR ds:[rsi]
 1005503:	add    BYTE PTR [rax],ah
 1005505:	add    BYTE PTR [rbx+0x0],ah
 1005508:	push   0x6e006100
 100550d:	add    BYTE PTR [rdi+0x0],ah
 1005510:	add    BYTE PTR gs:[rax],ah
 1005513:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005517:	add    BYTE PTR [rbp+0x0],ah
 100551a:	and    BYTE PTR [rax],al
 100551c:	jae    0x100551e
 100551e:	add    BYTE PTR gs:[rdx+0x0],dh
 1005522:	jbe    0x1005524
 1005524:	imul   eax,DWORD PTR [rax],0x650063
 100552a:	and    BYTE PTR [rax],al
 100552c:	jae    0x100552e
 100552e:	je     0x1005530
 1005530:	(bad)  
 1005531:	add    BYTE PTR [rax+rax*1+0x75],dh
 1005535:	add    BYTE PTR [rbx+0x0],dh
 1005538:	and    BYTE PTR [rax],al
 100553a:	je     0x100553c
 100553c:	outs   dx,DWORD PTR ds:[rsi]
 100553d:	add    BYTE PTR [rax],ah
 100553f:	add    BYTE PTR [rip+0x75006c00],ah        # 0x7600c145
	...
 100554d:	add    BYTE PTR [rax],al
 100554f:	add    BYTE PTR [rbp+0x0],al
 1005552:	jb     0x1005554
 1005554:	jb     0x1005556
 1005556:	outs   dx,DWORD PTR ds:[rsi]
 1005557:	add    BYTE PTR [rdx+0x0],dh
 100555a:	and    BYTE PTR [rax],al
 100555c:	outs   dx,DWORD PTR ds:[rsi]
 100555d:	add    BYTE PTR [rsi+0x0],ch
 1005560:	and    BYTE PTR [rax],al
 1005562:	movsxd eax,DWORD PTR [rax]
 1005564:	(bad)  
 1005565:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1005569:	add    BYTE PTR [rcx+0x0],ch
 100556c:	outs   dx,BYTE PTR ds:[rsi]
 100556d:	add    BYTE PTR [rdi+0x0],ah
 1005570:	and    BYTE PTR [rax],al
 1005572:	push   rbx
 1005573:	add    BYTE PTR [rbp+0x0],ah
 1005576:	je     0x1005578
 1005578:	push   rbx
 1005579:	add    BYTE PTR [rbp+0x0],ah
 100557c:	jb     0x100557e
 100557e:	jbe    0x1005580
 1005580:	imul   eax,DWORD PTR [rax],0x650063
 1005586:	push   rbx
 1005587:	add    BYTE PTR [rax+rax*1+0x61],dh
 100558b:	add    BYTE PTR [rax+rax*1+0x75],dh
 100558f:	add    BYTE PTR [rbx+0x0],dh
 1005592:	add    BYTE PTR cs:[rax],ah
 1005595:	add    BYTE PTR [rax],dh
 1005597:	add    BYTE PTR [rax+0x0],bh
 100559a:	and    eax,0x38003000
 100559f:	add    BYTE PTR [rax+rax*1+0x78],ch
	...
 10055af:	add    BYTE PTR [rbx+0x0],al
 10055b2:	pop    rcx
 10055b3:	add    BYTE PTR [rbx+0x0],cl
 10055b6:	push   rdi
 10055b7:	add    BYTE PTR [rbx+0x0],dl
 10055ba:	add    BYTE PTR gs:[rdx+0x0],dh
 10055be:	jbe    0x10055c0
 10055c0:	imul   eax,DWORD PTR [rax],0x650063
 10055c6:	rex.WRB add BYTE PTR [r15+0x0],r13b
 10055ca:	add    BYTE PTR fs:[rbp+0x0],dh
 10055ce:	ins    BYTE PTR es:[rdi],dx
 10055cf:	add    BYTE PTR [rbp+0x0],ah
 10055d2:	cmp    al,BYTE PTR [rax]
 10055d4:	cmp    al,BYTE PTR [rax]
 10055d6:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 10055da:	rex.WB add BYTE PTR [r14+0x0],bpl
 10055de:	imul   eax,DWORD PTR [rax],0x690074
 10055e4:	(bad)  
 10055e5:	add    BYTE PTR [rax+rax*1+0x69],ch
 10055e9:	add    BYTE PTR [rdx+0x0],bh
 10055ec:	imul   eax,DWORD PTR [rax],0x67006e
	...
 10055fe:	add    BYTE PTR [rax],al
 1005600:	rex.WB add BYTE PTR [r14+0x0],bpl
 1005604:	imul   eax,DWORD PTR [rax],0x530074
 100560a:	push   rcx
 100560b:	add    BYTE PTR [rax+rax*1+0x57],cl
 100560f:	add    BYTE PTR [rdx+0x0],dh
 1005612:	imul   eax,DWORD PTR [rax],0x650074
 1005618:	jb     0x100561a
 100561a:	rex.WRXB add BYTE PTR [r11+0x0],r10b
 100561e:	push   rsi
 100561f:	add    BYTE PTR [rbp+0x0],ah
 1005622:	jb     0x1005624
 1005624:	add    BYTE PTR [rbp+0x0],r12b
 1005628:	jo     0x100562a
 100562a:	add    BYTE PTR gs:[rsi+0x0],ch
 100562e:	add    BYTE PTR fs:[rbp+0x0],ah
 1005632:	outs   dx,BYTE PTR ds:[rsi]
 1005633:	add    BYTE PTR [rax+rax*1+0x41],dh
 1005637:	add    BYTE PTR [rax+0x0],dh
 100563a:	imul   eax,DWORD PTR [rax],0x200073
 1005640:	data16 add BYTE PTR [rcx+0x0],ah
 1005644:	imul   eax,DWORD PTR [rax],0x65006c
 100564a:	add    BYTE PTR fs:[rax],al
 100564d:	add    BYTE PTR [rax],al
 100564f:	add    BYTE PTR [rax],ah
 1005651:	add    BYTE PTR [rbp+0x0],al
 1005654:	jb     0x1005656
 1005656:	jb     0x1005658
 1005658:	outs   dx,DWORD PTR ds:[rsi]
 1005659:	add    BYTE PTR [rdx+0x0],dh
 100565c:	cmp    al,BYTE PTR [rax]
 100565e:	and    BYTE PTR [rax],al
 1005660:	rex.XB add BYTE PTR [r15+0x0],bpl
 1005664:	rex.WB add BYTE PTR [r14+0x0],bpl
 1005668:	imul   eax,DWORD PTR [rax],0x690074
 100566e:	(bad)  
 100566f:	add    BYTE PTR [rax+rax*1+0x69],ch
 1005673:	add    BYTE PTR [rdx+0x0],bh
 1005676:	add    BYTE PTR gs:[rax],ch
 1005679:	add    BYTE PTR [rsi+0x0],cl
 100567c:	push   rbp
 100567d:	add    BYTE PTR [rax+rax*1+0x4c],cl
 1005681:	add    BYTE PTR [rcx],ch
 1005683:	add    BYTE PTR [rax],ah
 1005685:	add    BYTE PTR [rdx+0x0],dh
 1005688:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 100568d:	add    BYTE PTR [rdx+0x0],dh
 1005690:	outs   dx,BYTE PTR ds:[rsi]
 1005691:	add    BYTE PTR [rbp+0x0],ah
 1005694:	add    BYTE PTR fs:[rax],ah
 1005697:	add    BYTE PTR [rax],dh
 1005699:	add    BYTE PTR [rax+0x0],bh
 100569c:	and    eax,0x38003000
 10056a1:	add    BYTE PTR [rax+rax*1+0x78],ch
	...
 10056ad:	add    BYTE PTR [rax],al
 10056af:	add    BYTE PTR [rax],ah
 10056b1:	add    BYTE PTR [rbp+0x0],al
 10056b4:	jb     0x10056b6
 10056b6:	jb     0x10056b8
 10056b8:	outs   dx,DWORD PTR ds:[rsi]
 10056b9:	add    BYTE PTR [rdx+0x0],dh
 10056bc:	cmp    al,BYTE PTR [rax]
 10056be:	and    BYTE PTR [rax],al
 10056c0:	rex.XB add BYTE PTR [r15+0x0],bpl
 10056c4:	rex.WB add BYTE PTR [r14+0x0],bpl
 10056c8:	imul   eax,DWORD PTR [rax],0x690074
 10056ce:	(bad)  
 10056cf:	add    BYTE PTR [rax+rax*1+0x69],ch
 10056d3:	add    BYTE PTR [rdx+0x0],bh
 10056d6:	add    BYTE PTR gs:[rbx+0x0],dl
 10056da:	add    BYTE PTR gs:[rbx+0x0],ah
 10056de:	jne    0x10056e0
 10056e0:	jb     0x10056e2
 10056e2:	imul   eax,DWORD PTR [rax],0x790074
 10056e8:	sub    BYTE PTR [rax],al
 10056ea:	sub    DWORD PTR [rax],eax
 10056ec:	and    BYTE PTR [rax],al
 10056ee:	jb     0x10056f0
 10056f0:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 10056f5:	add    BYTE PTR [rdx+0x0],dh
 10056f8:	outs   dx,BYTE PTR ds:[rsi]
 10056f9:	add    BYTE PTR [rbp+0x0],ah
 10056fc:	add    BYTE PTR fs:[rax],ah
 10056ff:	add    BYTE PTR [rax],dh
 1005701:	add    BYTE PTR [rax+0x0],bh
 1005704:	and    eax,0x38003000
 1005709:	add    BYTE PTR [rax+rax*1+0x78],ch
 100570d:	add    BYTE PTR [rax],al
 100570f:	add    BYTE PTR [rbp+0x0],al
 1005712:	jb     0x1005714
 1005714:	jb     0x1005716
 1005716:	outs   dx,DWORD PTR ds:[rsi]
 1005717:	add    BYTE PTR [rdx+0x0],dh
 100571a:	and    BYTE PTR [rax],al
 100571c:	movsxd eax,DWORD PTR [rax]
 100571e:	jb     0x1005720
 1005720:	add    BYTE PTR gs:[rcx+0x0],ah
 1005724:	je     0x1005726
 1005726:	imul   eax,DWORD PTR [rax],0x67006e
 100572c:	and    BYTE PTR [rax],al
 100572e:	jae    0x1005730
 1005730:	push   0x74007500
 1005735:	add    BYTE PTR [rax+rax*1+0x6f],ah
 1005739:	add    BYTE PTR [rdi+0x0],dh
 100573c:	outs   dx,BYTE PTR ds:[rsi]
 100573d:	add    BYTE PTR [rax],ah
 100573f:	add    BYTE PTR [rbp+0x0],ah
 1005742:	jbe    0x1005744
 1005744:	add    BYTE PTR gs:[rsi+0x0],ch
 1005748:	je     0x100574a
 100574a:	and    BYTE PTR [rax],al
 100574c:	xor    BYTE PTR [rax],al
 100574e:	js     0x1005750
 1005750:	and    eax,0x38003000
 1005755:	add    BYTE PTR [rax+rax*1+0x78],ch
 1005759:	add    BYTE PTR [rax],al
 100575b:	add    BYTE PTR [rax],al
 100575d:	add    BYTE PTR [rax],al
 100575f:	add    BYTE PTR [rbx+0x0],al
 1005762:	pop    rcx
 1005763:	add    BYTE PTR [rbx+0x0],cl
 1005766:	push   rdi
 1005767:	add    BYTE PTR [rbx+0x0],dl
 100576a:	add    BYTE PTR gs:[rdx+0x0],dh
 100576e:	jbe    0x1005770
 1005770:	imul   eax,DWORD PTR [rax],0x650063
 1005776:	rex.WRB add BYTE PTR [r15+0x0],r13b
 100577a:	add    BYTE PTR fs:[rbp+0x0],dh
 100577e:	ins    BYTE PTR es:[rdi],dx
 100577f:	add    BYTE PTR [rbp+0x0],ah
 1005782:	cmp    al,BYTE PTR [rax]
 1005784:	cmp    al,BYTE PTR [rax]
 1005786:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 100578a:	push   rdx
 100578b:	add    BYTE PTR [rbp+0x0],dh
 100578e:	outs   dx,BYTE PTR ds:[rsi]
 100578f:	add    BYTE PTR [rsi+0x0],ch
 1005792:	imul   eax,DWORD PTR [rax],0x67006e
	...
 10057a0:	push   rdi
 10057a1:	add    BYTE PTR [rcx+0x0],ah
 10057a4:	imul   eax,DWORD PTR [rax],0x460074
 10057aa:	outs   dx,DWORD PTR ds:[rsi]
 10057ab:	add    BYTE PTR [rdx+0x0],dh
 10057ae:	push   rbx
 10057af:	add    BYTE PTR [rcx+0x0],ch
 10057b2:	outs   dx,BYTE PTR ds:[rsi]
 10057b3:	add    BYTE PTR [rdi+0x0],ah
 10057b6:	ins    BYTE PTR es:[rdi],dx
 10057b7:	add    BYTE PTR [rbp+0x0],ah
 10057ba:	rex.WRXB add BYTE PTR [r10+0x0],r12b
 10057be:	push   0x0
 10057c0:	add    BYTE PTR gs:[rbx+0x0],ah
 10057c4:	je     0x10057c6
 10057c6:	sub    BYTE PTR [rax],al
 10057c8:	and    eax,0x2c007000
 10057cd:	add    BYTE PTR [rcx+0x0],cl
 10057d0:	rex.WRX add BYTE PTR [rsi+0x0],r8b
 10057d4:	rex.WB add BYTE PTR [r14+0x0],cl
 10057d8:	rex.WB add BYTE PTR [r8+rax*1+0x45],dl
 10057dd:	add    BYTE PTR [rcx],ch
 10057df:	add    BYTE PTR [rax],ah
 10057e1:	add    BYTE PTR [rcx],ah
 10057e3:	add    BYTE PTR [rip+0x57002000],bh        # 0x580077e9
 10057e9:	add    BYTE PTR [rcx+0x0],al
 10057ec:	rex.WB add BYTE PTR [r8+rax*1+0x5f],dl
 10057f1:	add    BYTE PTR [rdi+0x0],cl
 10057f4:	rex.X add BYTE PTR [rdx+0x0],cl
 10057f8:	add    BYTE PTR [r11+0x0],r8b
 10057fc:	push   rsp
 10057fd:	add    BYTE PTR [rdi+0x0],bl
 1005800:	xor    BYTE PTR [rax],al
 1005802:	add    BYTE PTR [rax],al
 1005804:	add    BYTE PTR [rax],al
 1005806:	add    BYTE PTR [rax],al
 1005808:	push   rbx
 1005809:	add    BYTE PTR [rax+0x0],ch
 100580c:	jne    0x100580e
 100580e:	je     0x1005810
 1005810:	add    BYTE PTR fs:[rdi+0x0],ch
 1005814:	ja     0x1005816
 1005816:	outs   dx,BYTE PTR ds:[rsi]
	...
 100581f:	add    BYTE PTR [rcx+0x0],cl
 1005822:	add    BYTE PTR fs:[rax+rax*1+0x65],ch
 1005827:	add    BYTE PTR [rax],ah
 1005829:	add    BYTE PTR [rax+rax*1+0x69],dh
 100582d:	add    BYTE PTR [rbp+0x0],ch
 1005830:	add    BYTE PTR gs:[rdi+0x0],ch
 1005834:	jne    0x1005836
 1005836:	je     0x1005838
	...
 1005840:	push   rsi
 1005841:	add    BYTE PTR [rbx+0x0],dl
 1005844:	push   rbx
 1005845:	add    BYTE PTR [rsi+0x0],dl
 1005848:	rex.XB add BYTE PTR [r10],dil
 100584b:	add    BYTE PTR [rax],ah
 100584d:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100cb53
 1005853:	add    BYTE PTR [rbp+0x0],ah
 1005856:	jbe    0x1005858
 1005858:	add    BYTE PTR gs:[rsi+0x0],ch
 100585c:	je     0x100585e
 100585e:	and    BYTE PTR [rax],al
 1005860:	jb     0x1005862
 1005862:	add    BYTE PTR gs:[rbx+0x0],ah
 1005866:	add    BYTE PTR gs:[rcx+0x0],ch
 100586a:	jbe    0x100586c
 100586c:	add    BYTE PTR gs:[rax+rax*1+0x0],ah
 1005871:	add    BYTE PTR [rax],al
 1005873:	add    BYTE PTR [rax],al
 1005875:	add    BYTE PTR [rax],al
 1005877:	add    BYTE PTR [rbx+0x0],al
 100587a:	pop    rcx
 100587b:	add    BYTE PTR [rbx+0x0],cl
 100587e:	push   rdi
 100587f:	add    BYTE PTR [rbx+0x0],dl
 1005882:	add    BYTE PTR gs:[rdx+0x0],dh
 1005886:	jbe    0x1005888
 1005888:	imul   eax,DWORD PTR [rax],0x650063
 100588e:	rex.WRB add BYTE PTR [r15+0x0],r13b
 1005892:	add    BYTE PTR fs:[rbp+0x0],dh
 1005896:	ins    BYTE PTR es:[rdi],dx
 1005897:	add    BYTE PTR [rbp+0x0],ah
 100589a:	cmp    al,BYTE PTR [rax]
 100589c:	cmp    al,BYTE PTR [rax]
 100589e:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 10058a2:	push   rbx
 10058a3:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10058a7:	add    BYTE PTR [rax+0x0],dh
 10058aa:	jo     0x10058ac
 10058ac:	imul   eax,DWORD PTR [rax],0x67006e
	...
 10058be:	add    BYTE PTR [rax],al
 10058c0:	add    BYTE PTR [r10+0x0],r14b
 10058c4:	jb     0x10058c6
 10058c6:	outs   dx,DWORD PTR ds:[rsi]
 10058c7:	add    BYTE PTR [rdx+0x0],dh
 10058ca:	and    BYTE PTR [rax],al
 10058cc:	movsxd eax,DWORD PTR [rax]
 10058ce:	ins    BYTE PTR es:[rdi],dx
 10058cf:	add    BYTE PTR [rdi+0x0],ch
 10058d2:	jae    0x10058d4
 10058d4:	imul   eax,DWORD PTR [rax],0x67006e
 10058da:	and    BYTE PTR [rax],al
 10058dc:	je     0x10058de
 10058de:	push   0x20006500
 10058e3:	add    BYTE PTR [rbx+0x0],dh
 10058e6:	jne    0x10058e8
 10058e8:	(bad)  
 10058e9:	add    BYTE PTR [rax],ah
 10058eb:	add    BYTE PTR [rbx+0x0],dh
 10058ee:	jns    0x10058f0
 10058f0:	outs   dx,BYTE PTR ds:[rsi]
 10058f1:	add    BYTE PTR [rbx+0x0],ah
 10058f4:	and    BYTE PTR [rax],al
 10058f6:	add    BYTE PTR gs:[rsi+0x0],dh
 10058fa:	add    BYTE PTR gs:[rsi+0x0],ch
 10058fe:	je     0x1005900
 1005900:	and    BYTE PTR [rax],al
 1005902:	xor    BYTE PTR [rax],al
 1005904:	js     0x1005906
 1005906:	and    eax,0x38003000
 100590b:	add    BYTE PTR [rax+rax*1+0x78],ch
	...
 100591f:	add    BYTE PTR [rbx+0x0],al
 1005922:	pop    rcx
 1005923:	add    BYTE PTR [rbx+0x0],cl
 1005926:	push   rdi
 1005927:	add    BYTE PTR [rbx+0x0],dl
 100592a:	add    BYTE PTR gs:[rdx+0x0],dh
 100592e:	jbe    0x1005930
 1005930:	imul   eax,DWORD PTR [rax],0x650063
 1005936:	rex.WRB add BYTE PTR [r15+0x0],r13b
 100593a:	add    BYTE PTR fs:[rbp+0x0],dh
 100593e:	ins    BYTE PTR es:[rdi],dx
 100593f:	add    BYTE PTR [rbp+0x0],ah
 1005942:	cmp    al,BYTE PTR [rax]
 1005944:	cmp    al,BYTE PTR [rax]
 1005946:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 100594a:	push   rbx
 100594b:	add    BYTE PTR [rcx+0x0],ch
 100594e:	add    BYTE PTR [esi+0x0],ch
 1005952:	(bad)  
 1005953:	add    BYTE PTR [rax+rax*1+0x53],ch
 1005957:	add    BYTE PTR [rax+0x0],ch
 100595a:	jne    0x100595c
 100595c:	je     0x100595e
 100595e:	add    BYTE PTR fs:[rdi+0x0],ch
 1005962:	ja     0x1005964
 1005964:	outs   dx,BYTE PTR ds:[rsi]
	...
 100596d:	add    BYTE PTR [rax],al
 100596f:	add    BYTE PTR [rsi+0x0],dl
 1005972:	push   rbx
 1005973:	add    BYTE PTR [rbx+0x0],dl
 1005976:	push   rsi
 1005977:	add    BYTE PTR [rbx+0x0],al
 100597a:	cmp    al,BYTE PTR [rax]
 100597c:	and    BYTE PTR [rax],al
 100597e:	push   rsp
 100597f:	add    BYTE PTR [rdx+0x0],dh
 1005982:	jns    0x1005984
 1005984:	imul   eax,DWORD PTR [rax],0x67006e
 100598a:	and    BYTE PTR [rax],al
 100598c:	je     0x100598e
 100598e:	outs   dx,DWORD PTR ds:[rsi]
 100598f:	add    BYTE PTR [rax],ah
 1005991:	add    BYTE PTR [rbx+0x0],dh
 1005994:	push   0x74007500
 1005999:	add    BYTE PTR [rax+rax*1+0x6f],ah
 100599d:	add    BYTE PTR [rdi+0x0],dh
 10059a0:	outs   dx,BYTE PTR ds:[rsi]
 10059a1:	add    BYTE PTR [rax],ah
 10059a3:	add    BYTE PTR [rax+rax*1+0x68],dh
 10059a7:	add    BYTE PTR [rbp+0x0],ah
 10059aa:	and    BYTE PTR [rax],al
 10059ac:	jae    0x10059ae
 10059ae:	add    BYTE PTR gs:[rdx+0x0],dh
 10059b2:	jbe    0x10059b4
 10059b4:	imul   eax,DWORD PTR [rax],0x650063
 10059ba:	add    BYTE PTR [rax],al
 10059bc:	add    BYTE PTR [rax],al
 10059be:	add    BYTE PTR [rax],al
 10059c0:	add    BYTE PTR [r10+0x0],r14b
 10059c4:	jb     0x10059c6
 10059c6:	outs   dx,DWORD PTR ds:[rsi]
 10059c7:	add    BYTE PTR [rdx+0x0],dh
 10059ca:	and    BYTE PTR [rax],al
 10059cc:	outs   dx,DWORD PTR ds:[rsi]
 10059cd:	add    BYTE PTR [rsi+0x0],ch
 10059d0:	and    BYTE PTR [rax],al
 10059d2:	jae    0x10059d4
 10059d4:	add    BYTE PTR gs:[rax+rax*1+0x74],dh
 10059d9:	add    BYTE PTR [rcx+0x0],ch
 10059dc:	outs   dx,BYTE PTR ds:[rsi]
 10059dd:	add    BYTE PTR [rdi+0x0],ah
 10059e0:	and    BYTE PTR [rax],al
 10059e2:	je     0x10059e4
 10059e4:	push   0x20006500
 10059e9:	add    BYTE PTR [rbx+0x0],dh
 10059ec:	push   0x74007500
 10059f1:	add    BYTE PTR [rax+rax*1+0x6f],ah
 10059f5:	add    BYTE PTR [rdi+0x0],dh
 10059f8:	outs   dx,BYTE PTR ds:[rsi]
 10059f9:	add    BYTE PTR [rax],ah
 10059fb:	add    BYTE PTR [rbp+0x0],ah
 10059fe:	jbe    0x1005a00
 1005a00:	add    BYTE PTR gs:[rsi+0x0],ch
 1005a04:	je     0x1005a06
 1005a06:	and    BYTE PTR [rax],al
 1005a08:	xor    BYTE PTR [rax],al
 1005a0a:	js     0x1005a0c
 1005a0c:	and    eax,0x38003000
 1005a11:	add    BYTE PTR [rax+rax*1+0x78],ch
 1005a15:	add    BYTE PTR [rax],al
 1005a17:	add    BYTE PTR [rbx+0x0],al
 1005a1a:	pop    rcx
 1005a1b:	add    BYTE PTR [rbx+0x0],cl
 1005a1e:	push   rdi
 1005a1f:	add    BYTE PTR [rbx+0x0],dl
 1005a22:	add    BYTE PTR gs:[rdx+0x0],dh
 1005a26:	jbe    0x1005a28
 1005a28:	imul   eax,DWORD PTR [rax],0x650063
 1005a2e:	rex.WRB add BYTE PTR [r15+0x0],r13b
 1005a32:	add    BYTE PTR fs:[rbp+0x0],dh
 1005a36:	ins    BYTE PTR es:[rdi],dx
 1005a37:	add    BYTE PTR [rbp+0x0],ah
 1005a3a:	cmp    al,BYTE PTR [rax]
 1005a3c:	cmp    al,BYTE PTR [rax]
 1005a3e:	pop    rdi
 1005a3f:	add    BYTE PTR [rdi+0x0],dl
 1005a42:	imul   eax,DWORD PTR [rax],0x4d006e
 1005a48:	(bad)  
 1005a49:	add    BYTE PTR [rcx+0x0],ch
 1005a4c:	outs   dx,BYTE PTR ds:[rsi]
 1005a4d:	add    BYTE PTR [rax],al
 1005a4f:	add    BYTE PTR [rax+rax*1+0x72],dl
 1005a53:	add    BYTE PTR [rcx+0x0],ah
 1005a56:	movsxd eax,DWORD PTR [rax]
 1005a58:	add    BYTE PTR gs:[rdx],bh
 1005a5b:	add    BYTE PTR [rax],ah
 1005a5d:	add    BYTE PTR [rsi+0x0],dl
 1005a60:	push   rbx
 1005a61:	add    BYTE PTR [rbx+0x0],dl
 1005a64:	and    BYTE PTR [rax],al
 1005a66:	movsxd eax,DWORD PTR [rax]
 1005a68:	outs   dx,DWORD PTR ds:[rsi]
 1005a69:	add    BYTE PTR [rbp+0x0],ch
 1005a6c:	ins    DWORD PTR es:[rdi],dx
 1005a6d:	add    BYTE PTR [rcx+0x0],ah
 1005a70:	outs   dx,BYTE PTR ds:[rsi]
 1005a71:	add    BYTE PTR [rax+rax*1+0x2d],ah
 1005a75:	add    BYTE PTR [rax+rax*1+0x69],ch
 1005a79:	add    BYTE PTR [rsi+0x0],ch
 1005a7c:	add    BYTE PTR gs:[rdx],bh
 1005a7f:	add    BYTE PTR [rax],ah
 1005a81:	add    BYTE PTR [rdi],ah
 1005a83:	add    BYTE PTR [rip+0x27007300],ah        # 0x2800cd89
 1005a89:	add    BYTE PTR [rax],al
 1005a8b:	add    BYTE PTR [rip+0x2f00],ch        # 0x1008991
 1005a91:	add    BYTE PTR [rax],al
 1005a93:	add    BYTE PTR [rax],al
 1005a95:	add    BYTE PTR [rax],al
 1005a97:	add    BYTE PTR [rbx+0x0],al
 1005a9a:	jne    0x1005a9c
 1005a9c:	jb     0x1005a9e
 1005a9e:	jb     0x1005aa0
 1005aa0:	add    BYTE PTR gs:[rsi+0x0],ch
 1005aa4:	je     0x1005aa6
 1005aa6:	and    BYTE PTR [rax],al
 1005aa8:	je     0x1005aaa
 1005aaa:	outs   dx,DWORD PTR ds:[rsi]
 1005aab:	add    BYTE PTR [rbx+0x0],ch
 1005aae:	add    BYTE PTR gs:[rsi+0x0],ch
 1005ab2:	and    BYTE PTR [rax],al
 1005ab4:	cmp    eax,0x27002000
 1005ab9:	add    BYTE PTR [rip+0x27007300],ah        # 0x2800cdbf
	...
 1005ac7:	add    al,al
 1005ac9:	xchg   DWORD PTR [rax],eax
 1005acb:	add    DWORD PTR [rax],eax
 1005acd:	add    BYTE PTR [rax],al
 1005acf:	add    BYTE PTR [rax],al
 1005ad1:	mov    es,WORD PTR [rax]
 1005ad3:	add    DWORD PTR [rax],eax
 1005ad5:	add    BYTE PTR [rax],al
 1005ad7:	add    BYTE PTR [rax-0x70],dh
 1005ada:	add    BYTE PTR [rcx],al
 1005adc:	add    BYTE PTR [rax],al
 1005ade:	add    BYTE PTR [rax],al
 1005ae0:	(bad)  
 1005ae1:	xchg   edx,eax
 1005ae2:	add    BYTE PTR [rcx],al
	...
 1005af0:	and    al,BYTE PTR [rip+0x91993]        # 0x1097489
 1005af6:	add    BYTE PTR [rax],al
 1005af8:	cld    
 1005af9:	mov    al,BYTE PTR [rcx]
	...
 1005b03:	add    BYTE PTR [rbx],dl
 1005b05:	add    BYTE PTR [rax],al
 1005b07:	add    BYTE PTR [rbx+rcx*4+0x1],al
 1005b0b:	add    al,ch
	...
 1005b1d:	add    BYTE PTR [rax],al
 1005b1f:	add    BYTE PTR [rdx],ah
 1005b21:	add    eax,0x21993
 1005b26:	add    BYTE PTR [rax],al
 1005b28:	cld    
 1005b29:	mov    eax,DWORD PTR [rcx]
	...
 1005b33:	add    BYTE PTR [rdi],al
 1005b35:	add    BYTE PTR [rax],al
 1005b37:	add    BYTE PTR [rsp+rcx*4],cl
 1005b3a:	add    DWORD PTR [rax],eax
 1005b3c:	add    BYTE PTR [rax],al
	...
 1005b4f:	add    BYTE PTR [rdx],ah
 1005b51:	add    eax,0x11993
 1005b56:	add    BYTE PTR [rax],al
 1005b58:	push   0x18c
 1005b5d:	add    BYTE PTR [rax],al
 1005b5f:	add    BYTE PTR [rax],al
 1005b61:	add    BYTE PTR [rax],al
 1005b63:	add    BYTE PTR [rbx],al
 1005b65:	add    BYTE PTR [rax],al
 1005b67:	add    BYTE PTR [rax-0x74],dh
 1005b6a:	add    DWORD PTR [rax],eax
 1005b6c:	add    BYTE PTR [rax],al
	...
 1005b7f:	add    BYTE PTR [rdx],ah
 1005b81:	add    eax,0x91993
 1005b86:	add    BYTE PTR [rax],al
 1005b88:	sub    BYTE PTR [rbp+0x10001],cl
 1005b8e:	add    BYTE PTR [rax],al
 1005b90:	jo     0x1005b1f
 1005b92:	add    DWORD PTR [rax],eax
 1005b94:	or     al,0x0
 1005b96:	add    BYTE PTR [rax],al
 1005b98:	ror    BYTE PTR [rbp+0x1000001],0x0
	...
 1005baf:	add    BYTE PTR [rdx],ah
 1005bb1:	add    eax,0x11993
 1005bb6:	add    BYTE PTR [rax],al
 1005bb8:	(bad)  
 1005bb9:	mov    es,WORD PTR [rcx]
	...
 1005bc3:	add    BYTE PTR [rdi],al
 1005bc5:	add    BYTE PTR [rax],al
 1005bc7:	add    BYTE PTR [rax-0x72],ch
 1005bca:	add    DWORD PTR [rax],eax
 1005bcc:	and    BYTE PTR [rax],al
	...
 1005bde:	add    BYTE PTR [rax],al
 1005be0:	and    al,BYTE PTR [rip+0x11993]        # 0x1017579
 1005be6:	add    BYTE PTR [rax],al
 1005be8:	mov    al,0x8e
 1005bea:	add    DWORD PTR [rax],eax
	...
 1005bf4:	(bad)  
 1005bf5:	add    BYTE PTR [rax],al
 1005bf7:	add    BYTE PTR [rax+0x2000018e],bh
	...
 1005c0d:	add    BYTE PTR [rax],al
 1005c0f:	add    BYTE PTR [rdx],ah
 1005c11:	add    eax,0x91993
 1005c16:	add    BYTE PTR [rax],al
 1005c18:	or     al,0x8f
 1005c1a:	add    DWORD PTR [rax],eax
 1005c1c:	add    DWORD PTR [rax],eax
 1005c1e:	add    BYTE PTR [rax],al
 1005c20:	push   rsp
 1005c21:	pop    QWORD PTR [rcx]
 1005c23:	add    BYTE PTR [rsi],cl
 1005c25:	add    BYTE PTR [rax],al
 1005c27:	add    BYTE PTR [rdi+rcx*4+0x2580001],ah
	...
 1005c3e:	add    BYTE PTR [rax],al
 1005c40:	and    al,BYTE PTR [rip+0x81993]        # 0x10875d9
 1005c46:	add    BYTE PTR [rax],al
 1005c48:	fs nop
 1005c4a:	add    DWORD PTR [rax],eax
 1005c4c:	add    DWORD PTR [rax],eax
 1005c4e:	add    BYTE PTR [rax],al
 1005c50:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1005c51:	nop
 1005c52:	add    DWORD PTR [rax],eax
 1005c54:	(bad)  
 1005c55:	add    BYTE PTR [rax],al
 1005c57:	add    ah,dh
 1005c59:	nop
 1005c5a:	add    DWORD PTR [rax],eax
 1005c5c:	lock add BYTE PTR [rax],al
	...
 1005c6f:	add    BYTE PTR [rdx],ah
 1005c71:	add    eax,0x41993
 1005c76:	add    BYTE PTR [rax],al
 1005c78:	mov    ah,0x91
 1005c7a:	add    DWORD PTR [rax],eax
	...
 1005c84:	(bad)  
 1005c85:	add    BYTE PTR [rax],al
 1005c87:	add    ah,dl
 1005c89:	xchg   ecx,eax
 1005c8a:	add    DWORD PTR [rax],eax
 1005c8c:	rol    BYTE PTR [rcx],1
	...
 1005c9e:	add    BYTE PTR [rax],al
 1005ca0:	and    al,BYTE PTR [rip+0xe1993]        # 0x10e7639
 1005ca6:	add    BYTE PTR [rax],al
 1005ca8:	xor    BYTE PTR [rdx+0x1],dl
 1005cae:	add    BYTE PTR [rax],al
 1005cb0:	add    BYTE PTR [rax],al
 1005cb2:	add    BYTE PTR [rax],al
 1005cb4:	adc    eax,0xa0000000
 1005cb9:	xchg   edx,eax
 1005cba:	add    DWORD PTR [rax],eax
 1005cbc:	push   0x1
	...
 1005ccd:	add    BYTE PTR [rax],al
 1005ccf:	add    BYTE PTR [rdx],ah
 1005cd1:	add    eax,0xd1993
 1005cd6:	add    BYTE PTR [rax],al
 1005cd8:	push   0x1000193
 1005cdd:	add    BYTE PTR [rax],al
 1005cdf:	add    al,dl
 1005ce1:	xchg   ebx,eax
 1005ce2:	add    DWORD PTR [rax],eax
 1005ce4:	(bad)  
 1005ce5:	add    BYTE PTR [rax],al
 1005ce7:	add    BYTE PTR [rax],ah
 1005ce9:	xchg   esp,eax
 1005cea:	add    DWORD PTR [rax],eax
 1005cec:	add    BYTE PTR [rcx],0x0
	...
 1005cff:	add    BYTE PTR [rdx],ah
 1005d01:	add    eax,0x71993
 1005d06:	add    BYTE PTR [rax],al
 1005d08:	sbb    al,0x95
 1005d0a:	add    DWORD PTR [rax],eax
 1005d0c:	add    DWORD PTR [rax],eax
 1005d0e:	add    BYTE PTR [rax],al
 1005d10:	push   rsp
 1005d11:	xchg   ebp,eax
 1005d12:	add    DWORD PTR [rax],eax
 1005d14:	or     al,0x0
 1005d16:	add    BYTE PTR [rax],al
 1005d18:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1005d19:	xchg   ebp,eax
 1005d1a:	add    DWORD PTR [rax],eax
 1005d1c:	lock add BYTE PTR [rax],al
	...
 1005d2f:	add    BYTE PTR [rdx],ah
 1005d31:	add    eax,0xa1993
 1005d36:	add    BYTE PTR [rax],al
 1005d38:	push   rsp
 1005d39:	xchg   esi,eax
 1005d3a:	add    DWORD PTR [rax],eax
 1005d3c:	add    DWORD PTR [rax],eax
 1005d3e:	add    BYTE PTR [rax],al
 1005d40:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1005d41:	xchg   esi,eax
 1005d42:	add    DWORD PTR [rax],eax
 1005d44:	adc    DWORD PTR [rax],eax
 1005d46:	add    BYTE PTR [rax],al
 1005d48:	hlt    
 1005d49:	xchg   esi,eax
 1005d4a:	add    DWORD PTR [rax],eax
 1005d4c:	js     0x1005d4f
	...
 1005d5e:	add    BYTE PTR [rax],al
 1005d60:	and    al,BYTE PTR [rip+0xc1993]        # 0x10c76f9
 1005d66:	add    BYTE PTR [rax],al
 1005d68:	int3   
 1005d69:	xchg   edi,eax
 1005d6a:	add    DWORD PTR [rax],eax
 1005d6c:	add    DWORD PTR [rax],eax
 1005d6e:	add    BYTE PTR [rax],al
 1005d70:	sub    al,0x98
 1005d72:	add    DWORD PTR [rax],eax
 1005d74:	adc    DWORD PTR [rax],eax
 1005d76:	add    BYTE PTR [rax],al
 1005d78:	jl     0x1005d12
 1005d7a:	add    DWORD PTR [rax],eax
 1005d7c:	test   al,0x1
	...
 1005d8e:	add    BYTE PTR [rax],al
 1005d90:	and    al,BYTE PTR [rip+0xb1993]        # 0x10b7729
 1005d96:	add    BYTE PTR [rax],al
 1005d98:	pop    rax
 1005d99:	cdq    
 1005d9a:	add    DWORD PTR [rax],eax
 1005d9c:	add    DWORD PTR [rax],eax
 1005d9e:	add    BYTE PTR [rax],al
 1005da0:	mov    al,0x99
 1005da2:	add    DWORD PTR [rax],eax
 1005da4:	adc    al,0x0
 1005da6:	add    BYTE PTR [rax],al
 1005da8:	add    BYTE PTR [rdx+0x2900001],bl
	...
 1005dbe:	add    BYTE PTR [rax],al
 1005dc0:	and    al,BYTE PTR [rip+0x21993]        # 0x1027759
 1005dc6:	add    BYTE PTR [rax],al
 1005dc8:	call   0x1005f67
 1005dcd:	add    BYTE PTR [rax],al
 1005dcf:	add    BYTE PTR [rax],al
 1005dd1:	add    BYTE PTR [rax],al
 1005dd3:	add    BYTE PTR [rdi],al
 1005dd5:	add    BYTE PTR [rax],al
 1005dd7:	add    al,bh
 1005dd9:	(bad)  
 1005dda:	add    DWORD PTR [rax],eax
 1005ddc:	rex.W add BYTE PTR [rax],al
	...
 1005def:	add    BYTE PTR [rdx],ah
 1005df1:	add    eax,0x21993
 1005df6:	add    BYTE PTR [rax],al
 1005df8:	rex.W
 1005df9:	fwait
 1005dfa:	add    DWORD PTR [rax],eax
	...
 1005e04:	add    al,0x0
 1005e06:	add    BYTE PTR [rax],al
 1005e08:	pop    rax
 1005e09:	fwait
 1005e0a:	add    DWORD PTR [rax],eax
 1005e0c:	rex.W add BYTE PTR [rax],al
	...
 1005e1f:	add    BYTE PTR [rdx],ah
 1005e21:	add    eax,0x11993
 1005e26:	add    BYTE PTR [rax],al
 1005e28:	xchg   esp,eax
 1005e29:	fwait
 1005e2a:	add    DWORD PTR [rax],eax
	...
 1005e34:	or     al,0x0
 1005e36:	add    BYTE PTR [rax],al
 1005e38:	pushf  
 1005e39:	fwait
 1005e3a:	add    DWORD PTR [rax],eax
 1005e3c:	sub    BYTE PTR [rax],al
	...
 1005e4e:	add    BYTE PTR [rax],al
 1005e50:	and    al,BYTE PTR [rip+0x11993]        # 0x10177e9
 1005e56:	add    BYTE PTR [rax],al
 1005e58:	sbb    al,0x9c
 1005e5a:	add    DWORD PTR [rax],eax
	...
 1005e64:	add    al,BYTE PTR [rax]
 1005e66:	add    BYTE PTR [rax],al
 1005e68:	and    al,0x9c
 1005e6a:	add    DWORD PTR [rax],eax
 1005e6c:	sub    BYTE PTR [rax],al
	...
 1005e7e:	add    BYTE PTR [rax],al
 1005e80:	and    al,BYTE PTR [rip+0x11993]        # 0x1017819
 1005e86:	add    BYTE PTR [rax],al
 1005e88:	push   rsp
 1005e89:	pushf  
 1005e8a:	add    DWORD PTR [rax],eax
	...
 1005e94:	add    al,BYTE PTR [rax]
 1005e96:	add    BYTE PTR [rax],al
 1005e98:	pop    rsp
 1005e99:	pushf  
 1005e9a:	add    DWORD PTR [rax],eax
 1005e9c:	sub    BYTE PTR [rax],al
	...
 1005ea6:	add    BYTE PTR [rax],al
 1005ea8:	push   rdx
 1005ea9:	push   rbx
 1005eaa:	rex.R push rbx
 1005eac:	or     eax,0x6ddb768b
 1005eb1:	add    bh,BYTE PTR [rbp+0x41]
 1005eb4:	mov    edi,0x70cf5fff
 1005eb9:	leave  
 1005eba:	sbb    ebx,DWORD PTR [rsi+0x1]
 1005ec0:	jae    0x1005f33
 1005ec2:	ins    BYTE PTR es:[rdi],dx
 1005ec3:	ja     0x1005f37
 1005ec5:	imul   esi,DWORD PTR [rbp+riz*2+0x72],0x6264702e
	...
 1005f2d:	add    BYTE PTR [rax],al
 1005f2f:	add    BYTE PTR [rcx],al
	...
 1005f3d:	mov    cl,0x1
 1005f3f:	add    BYTE PTR [rax+0x5f],bl
 1005f42:	add    BYTE PTR [rax],al
 1005f44:	xor    BYTE PTR [rdi+0x0],bl
	...
 1005f5f:	add    BYTE PTR [rcx],al
 1005f61:	add    BYTE PTR [rax],al
 1005f63:	add    BYTE PTR [rax+0x5f],dh
	...
 1005f6e:	add    BYTE PTR [rax],al
 1005f70:	sbb    BYTE PTR [rdi+0x0],0x0
	...
 1005f80:	add    BYTE PTR [rcx+0x1],dh
 1005f86:	add    BYTE PTR [rax],al
 1005f88:	add    BYTE PTR [rax],al
 1005f8a:	add    BYTE PTR [rax],al
 1005f8c:	(bad)  
 1005f8d:	(bad)  
 1005f8e:	(bad)  
 1005f8f:	inc    DWORD PTR [rax]
 1005f91:	add    BYTE PTR [rax],al
 1005f93:	add    BYTE PTR [rax+0x0],al
 1005f96:	add    BYTE PTR [rax],al
 1005f98:	pop    rax
 1005f99:	pop    rdi
	...
 1005fde:	add    BYTE PTR [rax],al
 1005fe0:	mov    QWORD PTR [rsp+0x10],rbx
 1005fe5:	push   rsi
 1005fe6:	sub    rsp,0x20
 1005fea:	xor    ebx,ebx
 1005fec:	mov    rsi,rcx
 1005fef:	mov    eax,ebx
 1005ff1:	test   rdx,rdx
 1005ff4:	je     0x1005fff
 1005ff6:	cmp    rdx,0x7fffffff
 1005ffd:	jbe    0x1006004
 1005fff:	mov    eax,0x80070057
 1006004:	test   eax,eax
 1006006:	js     0x100604d
 1006008:	mov    QWORD PTR [rsp+0x30],rdi
 100600d:	lea    rdi,[rdx-0x1]
 1006011:	mov    rdx,rdi
 1006014:	call   QWORD PTR [rip+0xffffffffffffb28e]        # 0x10012a8
 100601a:	test   eax,eax
 100601c:	js     0x100603d
 100601e:	cdqe   
 1006020:	cmp    rax,rdi
 1006023:	ja     0x100603d
 1006025:	jne    0x1006046
 1006027:	mov    WORD PTR [rsi+rdi*2],bx
 100602b:	mov    rdi,QWORD PTR [rsp+0x30]
 1006030:	mov    eax,ebx
 1006032:	mov    rbx,QWORD PTR [rsp+0x38]
 1006037:	add    rsp,0x20
 100603b:	pop    rsi
 100603c:	ret    
 100603d:	mov    WORD PTR [rsi+rdi*2],bx
 1006041:	mov    ebx,0x8007007a
 1006046:	mov    rdi,QWORD PTR [rsp+0x30]
 100604b:	mov    eax,ebx
 100604d:	mov    rbx,QWORD PTR [rsp+0x38]
 1006052:	add    rsp,0x20
 1006056:	pop    rsi
 1006057:	ret    
 1006058:	int3   
 1006059:	int3   
 100605a:	int3   
 100605b:	int3   
 100605c:	int3   
 100605d:	int3   
 100605e:	int3   
 100605f:	int3   
 1006060:	mov    rcx,QWORD PTR [rcx]
 1006063:	rex.W jmp QWORD PTR [rip+0xffffffffffffb22e]        # 0x1001298
 100606a:	int3   
 100606b:	int3   
 100606c:	int3   
 100606d:	int3   
 100606e:	int3   
 100606f:	int3   
 1006070:	sub    rsp,0x28
 1006074:	cmp    BYTE PTR [rcx+0x73],0x0
 1006078:	je     0x10060bd
 100607a:	mov    QWORD PTR [rsp+0x30],rbx
 100607f:	mov    QWORD PTR [rsp+0x38],rsi
 1006084:	mov    QWORD PTR [rsp+0x20],rdi
 1006089:	mov    edi,0xa
 100608e:	lea    rbx,[rcx+0x20]
 1006092:	xor    esi,esi
 1006094:	mov    rcx,QWORD PTR [rbx]
 1006097:	test   rcx,rcx
 100609a:	je     0x10060a5
 100609c:	call   QWORD PTR [rip+0xffffffffffffb38e]        # 0x1001430
 10060a2:	mov    QWORD PTR [rbx],rsi
 10060a5:	add    rbx,0x8
 10060a9:	dec    rdi
 10060ac:	jne    0x1006094
 10060ae:	mov    rdi,QWORD PTR [rsp+0x20]
 10060b3:	mov    rsi,QWORD PTR [rsp+0x38]
 10060b8:	mov    rbx,QWORD PTR [rsp+0x30]
 10060bd:	add    rsp,0x28
 10060c1:	ret    
 10060c2:	int3   
 10060c3:	int3   
 10060c4:	int3   
 10060c5:	int3   
 10060c6:	int3   
 10060c7:	int3   
 10060c8:	int3   
 10060c9:	int3   
 10060ca:	int3   
 10060cb:	int3   
 10060cc:	int3   
 10060cd:	int3   
 10060ce:	int3   
 10060cf:	int3   
 10060d0:	mov    QWORD PTR [rsp+0x10],rdx
 10060d5:	push   rdi
 10060d6:	sub    rsp,0x50
 10060da:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 10060e3:	mov    QWORD PTR [rsp+0x60],rbx
 10060e8:	mov    QWORD PTR [rsp+0x70],rbp
 10060ed:	mov    QWORD PTR [rsp+0x78],rsi
 10060f2:	mov    rbx,rdx
 10060f5:	mov    rsi,rcx
 10060f8:	xor    ebp,ebp
 10060fa:	mov    DWORD PTR [rcx],ebp
 10060fc:	mov    QWORD PTR [rcx+0x8],r8
 1006100:	mov    rax,QWORD PTR [rdx+0x8]
 1006104:	mov    QWORD PTR [rcx+0x10],rax
 1006108:	mov    eax,DWORD PTR [rdx+0x10]
 100610b:	mov    DWORD PTR [rcx+0x18],eax
 100610e:	mov    eax,DWORD PTR [rdx+0x14]
 1006111:	mov    DWORD PTR [rcx+0x1c],eax
 1006114:	mov    r9d,DWORD PTR [rdx+0x18]
 1006118:	mov    DWORD PTR [rcx+0x20],r9d
 100611c:	cmp    DWORD PTR [rip+0x1565e],ebp        # 0x101b780
 1006122:	je     0x1006173
 1006124:	cmp    DWORD PTR [rip+0x15676],ebp        # 0x101b7a0
 100612a:	je     0x1006173
 100612c:	mov    DWORD PTR [rsp+0x30],0x1
 1006134:	mov    QWORD PTR [rsp+0x28],r8
 1006139:	mov    DWORD PTR [rsp+0x20],eax
 100613d:	mov    r8d,DWORD PTR [rdx+0x10]
 1006141:	mov    rdx,QWORD PTR [rdx]
 1006144:	lea    rcx,[rip+0x15635]        # 0x101b780
 100614b:	call   0x100af10
 1006150:	lea    rdx,[rip+0xffffffffffffebc5]        # 0x1004d1c
 1006157:	lea    rcx,[rip+0x15622]        # 0x101b780
 100615e:	call   0x100b470
 1006163:	mov    edx,DWORD PTR [rsi+0x20]
 1006166:	lea    rcx,[rip+0x15613]        # 0x101b780
 100616d:	call   0x100b150
 1006172:	nop
 1006173:	cmp    BYTE PTR [rbx+0x73],0x0
 1006177:	je     0x100619c
 1006179:	add    rbx,0x20
 100617d:	mov    edi,0xa
 1006182:	mov    rcx,QWORD PTR [rbx]
 1006185:	test   rcx,rcx
 1006188:	je     0x1006193
 100618a:	call   QWORD PTR [rip+0xffffffffffffb2a0]        # 0x1001430
 1006190:	mov    QWORD PTR [rbx],rbp
 1006193:	add    rbx,0x8
 1006197:	dec    rdi
 100619a:	jne    0x1006182
 100619c:	mov    rax,rsi
 100619f:	mov    rbx,QWORD PTR [rsp+0x60]
 10061a4:	mov    rbp,QWORD PTR [rsp+0x70]
 10061a9:	mov    rsi,QWORD PTR [rsp+0x78]
 10061ae:	add    rsp,0x50
 10061b2:	pop    rdi
 10061b3:	ret    
 10061b4:	int3   
 10061b5:	int3   
 10061b6:	int3   
 10061b7:	int3   
 10061b8:	int3   
 10061b9:	int3   
 10061ba:	int3   
 10061bb:	int3   
 10061bc:	int3   
 10061bd:	int3   
 10061be:	int3   
 10061bf:	int3   
 10061c0:	rex push rbx
 10061c2:	sub    rsp,0x40
 10061c6:	cmp    DWORD PTR [rip+0x155b3],0x0        # 0x101b780
 10061cd:	mov    rbx,rcx
 10061d0:	je     0x1006232
 10061d2:	cmp    DWORD PTR [rip+0x155c7],0x0        # 0x101b7a0
 10061d9:	je     0x1006232
 10061db:	mov    rax,QWORD PTR [rcx+0x8]
 10061df:	mov    r9d,DWORD PTR [rcx+0x20]
 10061e3:	mov    DWORD PTR [rsp+0x30],0x0
 10061eb:	mov    QWORD PTR [rsp+0x28],rax
 10061f0:	mov    eax,DWORD PTR [rcx+0x1c]
 10061f3:	lea    rdx,[rip+0xffffffffffffeb22]        # 0x1004d1c
 10061fa:	lea    rcx,[rip+0x1557f]        # 0x101b780
 1006201:	xor    r8d,r8d
 1006204:	mov    DWORD PTR [rsp+0x20],eax
 1006208:	call   0x100af10
 100620d:	mov    r8d,DWORD PTR [rbx]
 1006210:	lea    rdx,[rip+0xffffffffffffe4f9]        # 0x1004710
 1006217:	lea    rcx,[rip+0x15562]        # 0x101b780
 100621e:	call   0x100b470
 1006223:	mov    edx,DWORD PTR [rbx+0x20]
 1006226:	lea    rcx,[rip+0x15553]        # 0x101b780
 100622d:	call   0x100b150
 1006232:	add    rsp,0x40
 1006236:	pop    rbx
 1006237:	ret    
 1006238:	int3   
 1006239:	int3   
 100623a:	int3   
 100623b:	int3   
 100623c:	int3   
 100623d:	int3   
 100623e:	int3   
 100623f:	int3   
 1006240:	mov    QWORD PTR [rsp+0x18],r8
 1006245:	mov    QWORD PTR [rsp+0x10],rdx
 100624a:	mov    QWORD PTR [rsp+0x20],r9
 100624f:	push   rbx
 1006250:	push   rbp
 1006251:	push   rsi
 1006252:	push   rdi
 1006253:	sub    rsp,0x58
 1006257:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1006260:	mov    rdi,rdx
 1006263:	mov    rbp,rcx
 1006266:	cmp    DWORD PTR [rip+0x15513],0x0        # 0x101b780
 100626d:	jne    0x10062a3
 100626f:	cmp    BYTE PTR [rdx+0x73],0x0
 1006273:	je     0x100635d
 1006279:	add    rdi,0x20
 100627d:	mov    ebx,0xa
 1006282:	xor    esi,esi
 1006284:	mov    rcx,QWORD PTR [rdi]
 1006287:	test   rcx,rcx
 100628a:	je     0x1006295
 100628c:	call   QWORD PTR [rip+0xffffffffffffb19e]        # 0x1001430
 1006292:	mov    QWORD PTR [rdi],rsi
 1006295:	add    rdi,0x8
 1006299:	dec    rbx
 100629c:	jne    0x1006284
 100629e:	jmp    0x100635d
 10062a3:	mov    ecx,0x322
 10062a8:	call   0x1009a38
 10062ad:	mov    rbx,rax
 10062b0:	mov    QWORD PTR [rsp+0x48],rax
 10062b5:	xor    esi,esi
 10062b7:	test   rax,rax
 10062ba:	je     0x100632a
 10062bc:	lea    r9,[rsp+0x98]
 10062c4:	mov    r8,QWORD PTR [rsp+0x90]
 10062cc:	mov    edx,0x190
 10062d1:	mov    rcx,rax
 10062d4:	call   0x1005fe0
 10062d9:	mov    DWORD PTR [rsp+0x30],esi
 10062dd:	mov    QWORD PTR [rsp+0x28],rsi
 10062e2:	mov    eax,DWORD PTR [rdi+0x14]
 10062e5:	mov    DWORD PTR [rsp+0x20],eax
 10062e9:	mov    r9d,DWORD PTR [rdi+0x18]
 10062ed:	mov    r8d,DWORD PTR [rdi+0x10]
 10062f1:	mov    rdx,QWORD PTR [rdi]
 10062f4:	lea    rcx,[rip+0x15485]        # 0x101b780
 10062fb:	call   0x100af10
 1006300:	mov    r9,rbx
 1006303:	mov    r8,QWORD PTR [rbp+0x8]
 1006307:	lea    rdx,[rip+0xffffffffffffe41a]        # 0x1004728
 100630e:	lea    rcx,[rip+0x1546b]        # 0x101b780
 1006315:	call   0x100b220
 100631a:	mov    edx,DWORD PTR [rdi+0x18]
 100631d:	lea    rcx,[rip+0x1545c]        # 0x101b780
 1006324:	call   0x100b150
 1006329:	nop
 100632a:	mov    rcx,rbx
 100632d:	call   QWORD PTR [rip+0xffffffffffffaf65]        # 0x1001298
 1006333:	nop
 1006334:	cmp    BYTE PTR [rdi+0x73],0x0
 1006338:	je     0x100635d
 100633a:	add    rdi,0x20
 100633e:	mov    ebx,0xa
 1006343:	mov    rcx,QWORD PTR [rdi]
 1006346:	test   rcx,rcx
 1006349:	je     0x1006354
 100634b:	call   QWORD PTR [rip+0xffffffffffffb0df]        # 0x1001430
 1006351:	mov    QWORD PTR [rdi],rsi
 1006354:	add    rdi,0x8
 1006358:	dec    rbx
 100635b:	jne    0x1006343
 100635d:	add    rsp,0x58
 1006361:	pop    rdi
 1006362:	pop    rsi
 1006363:	pop    rbp
 1006364:	pop    rbx
 1006365:	ret    
 1006366:	int3   
 1006367:	int3   
 1006368:	int3   
 1006369:	int3   
 100636a:	int3   
 100636b:	int3   
 100636c:	int3   
 100636d:	int3   
 100636e:	int3   
 100636f:	int3   
 1006370:	sub    rsp,0x28
 1006374:	mov    rcx,QWORD PTR [rip+0x18045]        # 0x101e3c0
 100637b:	mov    QWORD PTR [rip+0x1802a],0x0        # 0x101e3b0
 1006386:	test   rcx,rcx
 1006389:	je     0x100639c
 100638b:	call   QWORD PTR [rip+0xffffffffffffaedf]        # 0x1001270
 1006391:	mov    QWORD PTR [rip+0x18024],0x0        # 0x101e3c0
 100639c:	mov    rcx,QWORD PTR [rip+0x18015]        # 0x101e3b8
 10063a3:	test   rcx,rcx
 10063a6:	je     0x10063b9
 10063a8:	call   QWORD PTR [rip+0xffffffffffffaec2]        # 0x1001270
 10063ae:	mov    QWORD PTR [rip+0x17fff],0x0        # 0x101e3b8
 10063b9:	add    rsp,0x28
 10063bd:	ret    
 10063be:	int3   
 10063bf:	int3   
 10063c0:	int3   
 10063c1:	int3   
 10063c2:	int3   
 10063c3:	int3   
 10063c4:	int3   
 10063c5:	int3   
 10063c6:	int3   
 10063c7:	int3   
 10063c8:	int3   
 10063c9:	int3   
 10063ca:	int3   
 10063cb:	int3   
 10063cc:	int3   
 10063cd:	int3   
 10063ce:	int3   
 10063cf:	int3   
 10063d0:	mov    rax,rsp
 10063d3:	push   rbp
 10063d4:	lea    rbp,[rax-0x128]
 10063db:	sub    rsp,0x220
 10063e2:	mov    QWORD PTR [rbp-0x18],0xfffffffffffffffe
 10063ea:	mov    QWORD PTR [rax+0x8],rbx
 10063ee:	mov    QWORD PTR [rax+0x10],rsi
 10063f2:	mov    QWORD PTR [rax+0x18],rdi
 10063f6:	mov    QWORD PTR [rax+0x20],r14
 10063fa:	mov    rax,QWORD PTR [rip+0x14d2f]        # 0x101b130
 1006401:	xor    rax,rsp
 1006404:	mov    QWORD PTR [rbp+0x110],rax
 100640b:	lea    rax,[rsp+0x40]
 1006410:	mov    QWORD PTR [rbp-0x48],rax
 1006414:	lea    rsi,[rip+0xffffffffffffe3a5]        # 0x10047c0
 100641b:	mov    QWORD PTR [rsp+0x40],rsi
 1006420:	lea    r14,[rip+0xffffffffffffe389]        # 0x10047b0
 1006427:	mov    QWORD PTR [rsp+0x48],r14
 100642c:	mov    DWORD PTR [rsp+0x50],0x81
 1006434:	mov    QWORD PTR [rsp+0x54],0x200
 100643d:	xor    edi,edi
 100643f:	mov    DWORD PTR [rbp-0x50],0x1000000
 1006446:	mov    QWORD PTR [rsp+0x60],rdi
 100644b:	mov    QWORD PTR [rsp+0x68],rdi
 1006450:	mov    QWORD PTR [rsp+0x70],rdi
 1006455:	mov    QWORD PTR [rsp+0x78],rdi
 100645a:	mov    QWORD PTR [rbp-0x80],rdi
 100645e:	mov    QWORD PTR [rbp-0x78],rdi
 1006462:	mov    QWORD PTR [rbp-0x70],rdi
 1006466:	mov    QWORD PTR [rbp-0x68],rdi
 100646a:	mov    QWORD PTR [rbp-0x60],rdi
 100646e:	mov    QWORD PTR [rbp-0x58],rdi
 1006472:	lea    r8,[rip+0xffffffffffffe2f7]        # 0x1004770
 1006479:	lea    rdx,[rsp+0x40]
 100647e:	lea    rcx,[rbp-0x40]
 1006482:	call   0x10060d0
 1006487:	nop
 1006488:	lea    rcx,[rip+0xffffffffffffe3d9]        # 0x1004868
 100648f:	call   QWORD PTR [rip+0xffffffffffffadd3]        # 0x1001268
 1006495:	mov    QWORD PTR [rip+0x17f24],rax        # 0x101e3c0
 100649c:	test   rax,rax
 100649f:	jne    0x100651c
 10064a1:	call   QWORD PTR [rip+0xffffffffffffadd1]        # 0x1001278
 10064a7:	lea    rcx,[rsp+0x40]
 10064ac:	mov    QWORD PTR [rbp-0x48],rcx
 10064b0:	mov    QWORD PTR [rsp+0x40],rsi
 10064b5:	mov    QWORD PTR [rsp+0x48],r14
 10064ba:	mov    DWORD PTR [rsp+0x50],0x8a
 10064c2:	mov    QWORD PTR [rsp+0x54],0x200
 10064cb:	mov    DWORD PTR [rbp-0x50],0x1000000
 10064d2:	mov    QWORD PTR [rsp+0x60],rdi
 10064d7:	mov    QWORD PTR [rsp+0x68],rdi
 10064dc:	mov    QWORD PTR [rsp+0x70],rdi
 10064e1:	mov    QWORD PTR [rsp+0x78],rdi
 10064e6:	mov    QWORD PTR [rbp-0x80],rdi
 10064ea:	mov    QWORD PTR [rbp-0x78],rdi
 10064ee:	mov    QWORD PTR [rbp-0x70],rdi
 10064f2:	mov    QWORD PTR [rbp-0x68],rdi
 10064f6:	mov    QWORD PTR [rbp-0x60],rdi
 10064fa:	mov    QWORD PTR [rbp-0x58],rdi
 10064fe:	mov    r9d,eax
 1006501:	lea    r8,[rip+0xffffffffffffe388]        # 0x1004890
 1006508:	lea    rdx,[rsp+0x40]
 100650d:	lea    rcx,[rbp-0x40]
 1006511:	call   0x1006240
 1006516:	nop
 1006517:	jmp    0x100697a
 100651c:	lea    rdx,[rip+0xffffffffffffe3c5]        # 0x10048e8
 1006523:	mov    rcx,rax
 1006526:	call   QWORD PTR [rip+0xffffffffffffad5c]        # 0x1001288
 100652c:	mov    QWORD PTR [rip+0x17e7d],rax        # 0x101e3b0
 1006533:	test   rax,rax
 1006536:	jne    0x10065ef
 100653c:	call   QWORD PTR [rip+0xffffffffffffad36]        # 0x1001278
 1006542:	lea    rcx,[rsp+0x40]
 1006547:	mov    QWORD PTR [rbp-0x48],rcx
 100654b:	mov    QWORD PTR [rsp+0x40],rsi
 1006550:	mov    QWORD PTR [rsp+0x48],r14
 1006555:	mov    DWORD PTR [rsp+0x50],0x94
 100655d:	mov    QWORD PTR [rsp+0x54],0x200
 1006566:	mov    DWORD PTR [rbp-0x50],0x1000000
 100656d:	mov    QWORD PTR [rsp+0x60],rdi
 1006572:	mov    QWORD PTR [rsp+0x68],rdi
 1006577:	mov    QWORD PTR [rsp+0x70],rdi
 100657c:	mov    QWORD PTR [rsp+0x78],rdi
 1006581:	mov    QWORD PTR [rbp-0x80],rdi
 1006585:	mov    QWORD PTR [rbp-0x78],rdi
 1006589:	mov    QWORD PTR [rbp-0x70],rdi
 100658d:	mov    QWORD PTR [rbp-0x68],rdi
 1006591:	mov    QWORD PTR [rbp-0x60],rdi
 1006595:	mov    QWORD PTR [rbp-0x58],rdi
 1006599:	mov    r9d,eax
 100659c:	lea    r8,[rip+0xffffffffffffe35d]        # 0x1004900
 10065a3:	lea    rdx,[rsp+0x40]
 10065a8:	lea    rcx,[rbp-0x40]
 10065ac:	call   0x1006240
 10065b1:	mov    QWORD PTR [rip+0x17df8],rdi        # 0x101e3b0
 10065b8:	mov    rcx,QWORD PTR [rip+0x17e01]        # 0x101e3c0
 10065bf:	test   rcx,rcx
 10065c2:	je     0x10065d1
 10065c4:	call   QWORD PTR [rip+0xffffffffffffaca6]        # 0x1001270
 10065ca:	mov    QWORD PTR [rip+0x17def],rdi        # 0x101e3c0
 10065d1:	mov    rcx,QWORD PTR [rip+0x17de0]        # 0x101e3b8
 10065d8:	test   rcx,rcx
 10065db:	je     0x10065ea
 10065dd:	call   QWORD PTR [rip+0xffffffffffffac8d]        # 0x1001270
 10065e3:	mov    QWORD PTR [rip+0x17dce],rdi        # 0x101e3b8
 10065ea:	jmp    0x100697a
 10065ef:	mov    DWORD PTR [rbp-0x10],0x114
 10065f6:	lea    rcx,[rbp-0x10]
 10065fa:	call   QWORD PTR [rip+0xffffffffffffac60]        # 0x1001260
 1006600:	test   eax,eax
 1006602:	jne    0x1006688
 1006608:	lea    rax,[rsp+0x40]
 100660d:	mov    QWORD PTR [rbp-0x48],rax
 1006611:	mov    QWORD PTR [rsp+0x40],rsi
 1006616:	mov    QWORD PTR [rsp+0x48],r14
 100661b:	mov    DWORD PTR [rsp+0x50],0xa2
 1006623:	mov    QWORD PTR [rsp+0x54],0x200
 100662c:	mov    DWORD PTR [rbp-0x50],0x1000000
 1006633:	mov    QWORD PTR [rsp+0x60],rdi
 1006638:	mov    QWORD PTR [rsp+0x68],rdi
 100663d:	mov    QWORD PTR [rsp+0x70],rdi
 1006642:	mov    QWORD PTR [rsp+0x78],rdi
 1006647:	mov    QWORD PTR [rbp-0x80],rdi
 100664b:	mov    QWORD PTR [rbp-0x78],rdi
 100664f:	mov    QWORD PTR [rbp-0x70],rdi
 1006653:	mov    QWORD PTR [rbp-0x68],rdi
 1006657:	mov    QWORD PTR [rbp-0x60],rdi
 100665b:	mov    QWORD PTR [rbp-0x58],rdi
 100665f:	call   QWORD PTR [rip+0xffffffffffffac13]        # 0x1001278
 1006665:	mov    r9d,eax
 1006668:	lea    r8,[rip+0xffffffffffffe321]        # 0x1004990
 100666f:	lea    rdx,[rsp+0x40]
 1006674:	lea    rcx,[rbp-0x40]
 1006678:	call   0x1006240
 100667d:	call   0x1006370
 1006682:	nop
 1006683:	jmp    0x100697a
 1006688:	mov    eax,DWORD PTR [rbp-0xc]
 100668b:	cmp    eax,0x5
 100668e:	jb     0x1006974
 1006694:	jne    0x10066b7
 1006696:	mov    eax,DWORD PTR [rbp-0x8]
 1006699:	cmp    eax,0x1
 100669c:	jb     0x1006974
 10066a2:	jne    0x10066b7
 10066a4:	lea    rbx,[rip+0xffffffffffffe08d]        # 0x1004738
 10066ab:	mov    DWORD PTR [rip+0x17cdf],0x1        # 0x101e394
 10066b5:	jmp    0x10066be
 10066b7:	lea    rbx,[rip+0xffffffffffffe09a]        # 0x1004758
 10066be:	mov    rcx,rbx
 10066c1:	call   QWORD PTR [rip+0xffffffffffffaba1]        # 0x1001268
 10066c7:	mov    QWORD PTR [rip+0x17cea],rax        # 0x101e3b8
 10066ce:	test   rax,rax
 10066d1:	jne    0x1006764
 10066d7:	call   QWORD PTR [rip+0xffffffffffffab9b]        # 0x1001278
 10066dd:	lea    rcx,[rsp+0x40]
 10066e2:	mov    QWORD PTR [rbp-0x48],rcx
 10066e6:	mov    QWORD PTR [rsp+0x40],rsi
 10066eb:	mov    QWORD PTR [rsp+0x48],r14
 10066f0:	mov    DWORD PTR [rsp+0x50],0xcc
 10066f8:	mov    QWORD PTR [rsp+0x54],0x200
 1006701:	mov    DWORD PTR [rbp-0x50],0x1000000
 1006708:	mov    QWORD PTR [rsp+0x60],rdi
 100670d:	mov    QWORD PTR [rsp+0x68],rdi
 1006712:	mov    QWORD PTR [rsp+0x70],rdi
 1006717:	mov    QWORD PTR [rsp+0x78],rdi
 100671c:	mov    QWORD PTR [rbp-0x80],rdi
 1006720:	mov    QWORD PTR [rbp-0x78],rdi
 1006724:	mov    QWORD PTR [rbp-0x70],rdi
 1006728:	mov    QWORD PTR [rbp-0x68],rdi
 100672c:	mov    QWORD PTR [rbp-0x60],rdi
 1006730:	mov    QWORD PTR [rbp-0x58],rdi
 1006734:	mov    DWORD PTR [rsp+0x20],eax
 1006738:	mov    r9,rbx
 100673b:	lea    r8,[rip+0xffffffffffffe2ae]        # 0x10049f0
 1006742:	lea    rdx,[rsp+0x40]
 1006747:	lea    rcx,[rbp-0x40]
 100674b:	call   0x1006240
 1006750:	call   0x1006370
 1006755:	nop
 1006756:	lea    rcx,[rbp-0x40]
 100675a:	call   0x10061c0
 100675f:	jmp    0x10069e1
 1006764:	lea    rdx,[rip+0xffffffffffffe2cd]        # 0x1004a38
 100676b:	mov    rcx,rax
 100676e:	call   QWORD PTR [rip+0xffffffffffffab14]        # 0x1001288
 1006774:	mov    QWORD PTR [rip+0x17c2d],rax        # 0x101e3a8
 100677b:	test   rax,rax
 100677e:	jne    0x100680d
 1006784:	call   QWORD PTR [rip+0xffffffffffffaaee]        # 0x1001278
 100678a:	lea    rcx,[rsp+0x40]
 100678f:	mov    QWORD PTR [rbp-0x48],rcx
 1006793:	mov    QWORD PTR [rsp+0x40],rsi
 1006798:	mov    QWORD PTR [rsp+0x48],r14
 100679d:	mov    DWORD PTR [rsp+0x50],0xd8
 10067a5:	mov    QWORD PTR [rsp+0x54],0x200
 10067ae:	mov    DWORD PTR [rbp-0x50],0x1000000
 10067b5:	mov    QWORD PTR [rsp+0x60],rdi
 10067ba:	mov    QWORD PTR [rsp+0x68],rdi
 10067bf:	mov    QWORD PTR [rsp+0x70],rdi
 10067c4:	mov    QWORD PTR [rsp+0x78],rdi
 10067c9:	mov    QWORD PTR [rbp-0x80],rdi
 10067cd:	mov    QWORD PTR [rbp-0x78],rdi
 10067d1:	mov    QWORD PTR [rbp-0x70],rdi
 10067d5:	mov    QWORD PTR [rbp-0x68],rdi
 10067d9:	mov    QWORD PTR [rbp-0x60],rdi
 10067dd:	mov    QWORD PTR [rbp-0x58],rdi
 10067e1:	mov    r9d,eax
 10067e4:	lea    r8,[rip+0xffffffffffffe275]        # 0x1004a60
 10067eb:	lea    rdx,[rsp+0x40]
 10067f0:	lea    rcx,[rbp-0x40]
 10067f4:	call   0x1006240
 10067f9:	call   0x1006370
 10067fe:	nop
 10067ff:	lea    rcx,[rbp-0x40]
 1006803:	call   0x10061c0
 1006808:	jmp    0x10069e1
 100680d:	lea    rdx,[rip+0xffffffffffffe2e4]        # 0x1004af8
 1006814:	mov    rcx,QWORD PTR [rip+0x17b9d]        # 0x101e3b8
 100681b:	call   QWORD PTR [rip+0xffffffffffffaa67]        # 0x1001288
 1006821:	mov    QWORD PTR [rip+0x17b78],rax        # 0x101e3a0
 1006828:	test   rax,rax
 100682b:	jne    0x10068ba
 1006831:	call   QWORD PTR [rip+0xffffffffffffaa41]        # 0x1001278
 1006837:	lea    rcx,[rsp+0x40]
 100683c:	mov    QWORD PTR [rbp-0x48],rcx
 1006840:	mov    QWORD PTR [rsp+0x40],rsi
 1006845:	mov    QWORD PTR [rsp+0x48],r14
 100684a:	mov    DWORD PTR [rsp+0x50],0xe6
 1006852:	mov    QWORD PTR [rsp+0x54],0x200
 100685b:	mov    DWORD PTR [rbp-0x50],0x1000000
 1006862:	mov    QWORD PTR [rsp+0x60],rdi
 1006867:	mov    QWORD PTR [rsp+0x68],rdi
 100686c:	mov    QWORD PTR [rsp+0x70],rdi
 1006871:	mov    QWORD PTR [rsp+0x78],rdi
 1006876:	mov    QWORD PTR [rbp-0x80],rdi
 100687a:	mov    QWORD PTR [rbp-0x78],rdi
 100687e:	mov    QWORD PTR [rbp-0x70],rdi
 1006882:	mov    QWORD PTR [rbp-0x68],rdi
 1006886:	mov    QWORD PTR [rbp-0x60],rdi
 100688a:	mov    QWORD PTR [rbp-0x58],rdi
 100688e:	mov    r9d,eax
 1006891:	lea    r8,[rip+0xffffffffffffe278]        # 0x1004b10
 1006898:	lea    rdx,[rsp+0x40]
 100689d:	lea    rcx,[rbp-0x40]
 10068a1:	call   0x1006240
 10068a6:	call   0x1006370
 10068ab:	nop
 10068ac:	lea    rcx,[rbp-0x40]
 10068b0:	call   0x10061c0
 10068b5:	jmp    0x10069e1
 10068ba:	lea    rdx,[rip+0xffffffffffffe2d7]        # 0x1004b98
 10068c1:	mov    rcx,QWORD PTR [rip+0x17af0]        # 0x101e3b8
 10068c8:	call   QWORD PTR [rip+0xffffffffffffa9ba]        # 0x1001288
 10068ce:	mov    QWORD PTR [rip+0x17ac3],rax        # 0x101e398
 10068d5:	test   rax,rax
 10068d8:	jne    0x1006964
 10068de:	call   QWORD PTR [rip+0xffffffffffffa994]        # 0x1001278
 10068e4:	lea    rcx,[rsp+0x40]
 10068e9:	mov    QWORD PTR [rbp-0x48],rcx
 10068ed:	mov    QWORD PTR [rsp+0x40],rsi
 10068f2:	mov    QWORD PTR [rsp+0x48],r14
 10068f7:	mov    DWORD PTR [rsp+0x50],0xf4
 10068ff:	mov    QWORD PTR [rsp+0x54],0x200
 1006908:	mov    DWORD PTR [rbp-0x50],0x1000000
 100690f:	mov    QWORD PTR [rsp+0x60],rdi
 1006914:	mov    QWORD PTR [rsp+0x68],rdi
 1006919:	mov    QWORD PTR [rsp+0x70],rdi
 100691e:	mov    QWORD PTR [rsp+0x78],rdi
 1006923:	mov    QWORD PTR [rbp-0x80],rdi
 1006927:	mov    QWORD PTR [rbp-0x78],rdi
 100692b:	mov    QWORD PTR [rbp-0x70],rdi
 100692f:	mov    QWORD PTR [rbp-0x68],rdi
 1006933:	mov    QWORD PTR [rbp-0x60],rdi
 1006937:	mov    QWORD PTR [rbp-0x58],rdi
 100693b:	mov    r9d,eax
 100693e:	lea    r8,[rip+0xffffffffffffe26b]        # 0x1004bb0
 1006945:	lea    rdx,[rsp+0x40]
 100694a:	lea    rcx,[rbp-0x40]
 100694e:	call   0x1006240
 1006953:	call   0x1006370
 1006958:	nop
 1006959:	lea    rcx,[rbp-0x40]
 100695d:	call   0x10061c0
 1006962:	jmp    0x10069e1
 1006964:	lea    rcx,[rbp-0x40]
 1006968:	call   0x10061c0
 100696d:	mov    eax,0x1
 1006972:	jmp    0x10069e3
 1006974:	call   0x1006370
 1006979:	nop
 100697a:	cmp    DWORD PTR [rip+0x14dff],0x0        # 0x101b780
 1006981:	je     0x10069e1
 1006983:	cmp    DWORD PTR [rip+0x14e16],0x0        # 0x101b7a0
 100698a:	je     0x10069e1
 100698c:	mov    DWORD PTR [rsp+0x30],edi
 1006990:	mov    rax,QWORD PTR [rbp-0x38]
 1006994:	mov    QWORD PTR [rsp+0x28],rax
 1006999:	mov    eax,DWORD PTR [rbp-0x24]
 100699c:	mov    ebx,DWORD PTR [rbp-0x20]
 100699f:	mov    DWORD PTR [rsp+0x20],eax
 10069a3:	mov    r9d,ebx
 10069a6:	xor    r8d,r8d
 10069a9:	lea    rdx,[rip+0xffffffffffffe36c]        # 0x1004d1c
 10069b0:	lea    rcx,[rip+0x14dc9]        # 0x101b780
 10069b7:	call   0x100af10
 10069bc:	mov    r8d,DWORD PTR [rbp-0x40]
 10069c0:	lea    rdx,[rip+0xffffffffffffdd49]        # 0x1004710
 10069c7:	lea    rcx,[rip+0x14db2]        # 0x101b780
 10069ce:	call   0x100b470
 10069d3:	mov    edx,ebx
 10069d5:	lea    rcx,[rip+0x14da4]        # 0x101b780
 10069dc:	call   0x100b150
 10069e1:	xor    eax,eax
 10069e3:	mov    rcx,QWORD PTR [rbp+0x110]
 10069ea:	xor    rcx,rsp
 10069ed:	call   0x1009d50
 10069f2:	lea    r11,[rsp+0x220]
 10069fa:	mov    rbx,QWORD PTR [r11+0x10]
 10069fe:	mov    rsi,QWORD PTR [r11+0x18]
 1006a02:	mov    rdi,QWORD PTR [r11+0x20]
 1006a06:	mov    r14,QWORD PTR [r11+0x28]
 1006a0a:	mov    rsp,r11
 1006a0d:	pop    rbp
 1006a0e:	ret    
 1006a0f:	int3   
 1006a10:	int3   
 1006a11:	int3   
 1006a12:	int3   
 1006a13:	int3   
 1006a14:	int3   
 1006a15:	int3   
 1006a16:	int3   
 1006a17:	int3   
 1006a18:	int3   
 1006a19:	int3   
 1006a1a:	int3   
 1006a1b:	int3   
 1006a1c:	int3   
 1006a1d:	int3   
 1006a1e:	int3   
 1006a1f:	int3   
 1006a20:	rex.W jmp QWORD PTR [rip+0x17989]        # 0x101e3b0
 1006a27:	int3   
 1006a28:	int3   
 1006a29:	int3   
 1006a2a:	int3   
 1006a2b:	int3   
 1006a2c:	int3   
 1006a2d:	int3   
 1006a2e:	int3   
 1006a2f:	int3   
 1006a30:	xor    r11d,r11d
 1006a33:	mov    eax,r11d
 1006a36:	test   rdx,rdx
 1006a39:	je     0x1006a44
 1006a3b:	cmp    rdx,0x7fffffff
 1006a42:	jbe    0x1006a49
 1006a44:	mov    eax,0x80070057
 1006a49:	test   eax,eax
 1006a4b:	js     0x1006aa8
 1006a4d:	mov    r10d,r11d
 1006a50:	test   rdx,rdx
 1006a53:	je     0x1006a97
 1006a55:	mov    r9d,0x7ffffffe
 1006a5b:	sub    r9,rdx
 1006a5e:	sub    r8,rcx
 1006a61:	lea    rax,[r9+rdx*1]
 1006a65:	test   rax,rax
 1006a68:	je     0x1006a92
 1006a6a:	movzx  eax,WORD PTR [r8+rcx*1]
 1006a6f:	test   ax,ax
 1006a72:	je     0x1006a92
 1006a74:	mov    WORD PTR [rcx],ax
 1006a77:	add    rcx,0x2
 1006a7b:	dec    rdx
 1006a7e:	jne    0x1006a61
 1006a80:	sub    rcx,0x2
 1006a84:	mov    r10d,0x8007007a
 1006a8a:	mov    WORD PTR [rcx],r11w
 1006a8e:	mov    eax,r10d
 1006a91:	ret    
 1006a92:	test   rdx,rdx
 1006a95:	jne    0x1006aa1
 1006a97:	sub    rcx,0x2
 1006a9b:	mov    r10d,0x8007007a
 1006aa1:	mov    WORD PTR [rcx],r11w
 1006aa5:	mov    eax,r10d
 1006aa8:	repz ret 
 1006aaa:	int3   
 1006aab:	int3   
 1006aac:	int3   
 1006aad:	int3   
 1006aae:	int3   
 1006aaf:	int3   
 1006ab0:	mov    QWORD PTR [rsp+0x18],r8
 1006ab5:	mov    QWORD PTR [rsp+0x20],r9
 1006aba:	push   rbx
 1006abb:	push   rsi
 1006abc:	sub    rsp,0x28
 1006ac0:	xor    ebx,ebx
 1006ac2:	mov    rsi,rcx
 1006ac5:	mov    eax,ebx
 1006ac7:	test   rdx,rdx
 1006aca:	je     0x1006ad5
 1006acc:	cmp    rdx,0x7fffffff
 1006ad3:	jbe    0x1006ada
 1006ad5:	mov    eax,0x80070057
 1006ada:	test   eax,eax
 1006adc:	js     0x1006b24
 1006ade:	mov    QWORD PTR [rsp+0x20],rdi
 1006ae3:	lea    rdi,[rdx-0x1]
 1006ae7:	lea    r9,[rsp+0x58]
 1006aec:	mov    rdx,rdi
 1006aef:	call   QWORD PTR [rip+0xffffffffffffa7b3]        # 0x10012a8
 1006af5:	test   eax,eax
 1006af7:	js     0x1006b14
 1006af9:	cdqe   
 1006afb:	cmp    rax,rdi
 1006afe:	ja     0x1006b14
 1006b00:	jne    0x1006b1d
 1006b02:	mov    WORD PTR [rsi+rdi*2],bx
 1006b06:	mov    rdi,QWORD PTR [rsp+0x20]
 1006b0b:	mov    eax,ebx
 1006b0d:	add    rsp,0x28
 1006b11:	pop    rsi
 1006b12:	pop    rbx
 1006b13:	ret    
 1006b14:	mov    WORD PTR [rsi+rdi*2],bx
 1006b18:	mov    ebx,0x8007007a
 1006b1d:	mov    rdi,QWORD PTR [rsp+0x20]
 1006b22:	mov    eax,ebx
 1006b24:	add    rsp,0x28
 1006b28:	pop    rsi
 1006b29:	pop    rbx
 1006b2a:	ret    
 1006b2b:	int3   
 1006b2c:	int3   
 1006b2d:	int3   
 1006b2e:	int3   
 1006b2f:	int3   
 1006b30:	int3   
 1006b31:	int3   
 1006b32:	int3   
 1006b33:	int3   
 1006b34:	int3   
 1006b35:	int3   
 1006b36:	int3   
 1006b37:	int3   
 1006b38:	int3   
 1006b39:	int3   
 1006b3a:	int3   
 1006b3b:	int3   
 1006b3c:	int3   
 1006b3d:	int3   
 1006b3e:	int3   
 1006b3f:	int3   
 1006b40:	mov    rax,QWORD PTR [rdx]
 1006b43:	mov    r8,rdx
 1006b46:	mov    r9,rcx
 1006b49:	mov    QWORD PTR [rcx],rax
 1006b4c:	mov    rax,QWORD PTR [rdx+0x8]
 1006b50:	sub    r8,rcx
 1006b53:	mov    QWORD PTR [rcx+0x8],rax
 1006b57:	mov    eax,DWORD PTR [rdx+0x10]
 1006b5a:	mov    DWORD PTR [rcx+0x10],eax
 1006b5d:	mov    eax,DWORD PTR [rdx+0x18]
 1006b60:	mov    DWORD PTR [rcx+0x18],eax
 1006b63:	mov    eax,DWORD PTR [rdx+0x14]
 1006b66:	mov    DWORD PTR [rcx+0x14],eax
 1006b69:	movzx  eax,WORD PTR [rdx+0x70]
 1006b6d:	mov    WORD PTR [rcx+0x70],ax
 1006b71:	movzx  eax,BYTE PTR [rdx+0x72]
 1006b75:	mov    BYTE PTR [rcx+0x72],al
 1006b78:	movzx  eax,BYTE PTR [rdx+0x73]
 1006b7c:	mov    BYTE PTR [rcx+0x73],al
 1006b7f:	mov    BYTE PTR [rdx+0x73],0x0
 1006b83:	mov    edx,0xa
 1006b88:	lea    rax,[rcx+0x20]
 1006b8c:	nop    DWORD PTR [rax+0x0]
 1006b90:	mov    rcx,QWORD PTR [r8+rax*1]
 1006b94:	add    rax,0x8
 1006b98:	mov    QWORD PTR [rax-0x8],rcx
 1006b9c:	dec    rdx
 1006b9f:	jne    0x1006b90
 1006ba1:	mov    rax,r9
 1006ba4:	ret    
 1006ba5:	int3   
 1006ba6:	int3   
 1006ba7:	int3   
 1006ba8:	int3   
 1006ba9:	int3   
 1006baa:	int3   
 1006bab:	int3   
 1006bac:	int3   
 1006bad:	int3   
 1006bae:	int3   
 1006baf:	int3   
 1006bb0:	mov    r11,rsp
 1006bb3:	push   rdi
 1006bb4:	sub    rsp,0x80
 1006bbb:	mov    QWORD PTR [r11-0x60],0xfffffffffffffffe
 1006bc3:	mov    QWORD PTR [r11+0x20],rbx
 1006bc7:	mov    rax,QWORD PTR [rip+0x14562]        # 0x101b130
 1006bce:	xor    rax,rsp
 1006bd1:	mov    QWORD PTR [rsp+0x78],rax
 1006bd6:	mov    rdi,rdx
 1006bd9:	mov    rbx,rcx
 1006bdc:	mov    QWORD PTR [r11-0x58],rdx
 1006be0:	mov    DWORD PTR [rsp+0x20],0x0
 1006be8:	mov    r9d,r8d
 1006beb:	lea    r8,[rip+0xffffffffffffe1de]        # 0x1004dd0
 1006bf2:	mov    edx,0x1f
 1006bf7:	lea    rcx,[r11-0x50]
 1006bfb:	call   0x1006ab0
 1006c00:	lea    r8,[rsp+0x38]
 1006c05:	mov    rdx,rdi
 1006c08:	mov    rcx,rbx
 1006c0b:	call   0x1006cf0
 1006c10:	nop
 1006c11:	mov    DWORD PTR [rsp+0x20],0x1
 1006c19:	mov    rax,rdi
 1006c1c:	mov    rcx,QWORD PTR [rsp+0x78]
 1006c21:	xor    rcx,rsp
 1006c24:	call   0x1009d50
 1006c29:	mov    rbx,QWORD PTR [rsp+0xa8]
 1006c31:	add    rsp,0x80
 1006c38:	pop    rdi
 1006c39:	ret    
 1006c3a:	int3   
 1006c3b:	int3   
 1006c3c:	int3   
 1006c3d:	int3   
 1006c3e:	int3   
 1006c3f:	int3   
 1006c40:	int3   
 1006c41:	int3   
 1006c42:	int3   
 1006c43:	int3   
 1006c44:	int3   
 1006c45:	int3   
 1006c46:	int3   
 1006c47:	int3   
 1006c48:	int3   
 1006c49:	int3   
 1006c4a:	int3   
 1006c4b:	int3   
 1006c4c:	int3   
 1006c4d:	int3   
 1006c4e:	int3   
 1006c4f:	int3   
 1006c50:	mov    r11,rsp
 1006c53:	push   rdi
 1006c54:	sub    rsp,0x80
 1006c5b:	mov    QWORD PTR [r11-0x60],0xfffffffffffffffe
 1006c63:	mov    QWORD PTR [r11+0x20],rbx
 1006c67:	mov    rax,QWORD PTR [rip+0x144c2]        # 0x101b130
 1006c6e:	xor    rax,rsp
 1006c71:	mov    QWORD PTR [rsp+0x78],rax
 1006c76:	mov    rdi,rdx
 1006c79:	mov    rbx,rcx
 1006c7c:	mov    QWORD PTR [r11-0x58],rdx
 1006c80:	mov    DWORD PTR [rsp+0x20],0x0
 1006c88:	mov    r9d,r8d
 1006c8b:	lea    r8,[rip+0xffffffffffffe146]        # 0x1004dd8
 1006c92:	mov    edx,0x1f
 1006c97:	lea    rcx,[r11-0x50]
 1006c9b:	call   0x1006ab0
 1006ca0:	lea    r8,[rsp+0x38]
 1006ca5:	mov    rdx,rdi
 1006ca8:	mov    rcx,rbx
 1006cab:	call   0x1006cf0
 1006cb0:	nop
 1006cb1:	mov    DWORD PTR [rsp+0x20],0x1
 1006cb9:	mov    rax,rdi
 1006cbc:	mov    rcx,QWORD PTR [rsp+0x78]
 1006cc1:	xor    rcx,rsp
 1006cc4:	call   0x1009d50
 1006cc9:	mov    rbx,QWORD PTR [rsp+0xa8]
 1006cd1:	add    rsp,0x80
 1006cd8:	pop    rdi
 1006cd9:	ret    
 1006cda:	int3   
 1006cdb:	int3   
 1006cdc:	int3   
 1006cdd:	int3   
 1006cde:	int3   
 1006cdf:	int3   
 1006ce0:	int3   
 1006ce1:	int3   
 1006ce2:	int3   
 1006ce3:	int3   
 1006ce4:	int3   
 1006ce5:	int3   
 1006ce6:	int3   
 1006ce7:	int3   
 1006ce8:	int3   
 1006ce9:	int3   
 1006cea:	int3   
 1006ceb:	int3   
 1006cec:	int3   
 1006ced:	int3   
 1006cee:	int3   
 1006cef:	int3   
 1006cf0:	mov    QWORD PTR [rsp+0x10],rdx
 1006cf5:	push   rsi
 1006cf6:	push   rdi
 1006cf7:	push   r14
 1006cf9:	sub    rsp,0x30
 1006cfd:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1006d06:	mov    QWORD PTR [rsp+0x50],rbx
 1006d0b:	mov    QWORD PTR [rsp+0x60],rbp
 1006d10:	mov    rbp,r8
 1006d13:	mov    rdi,rdx
 1006d16:	mov    rbx,rcx
 1006d19:	mov    DWORD PTR [rsp+0x20],0x0
 1006d21:	test   r8,r8
 1006d24:	jne    0x1006d85
 1006d26:	mov    rax,QWORD PTR [rcx]
 1006d29:	mov    QWORD PTR [rdx],rax
 1006d2c:	mov    rax,QWORD PTR [rcx+0x8]
 1006d30:	mov    QWORD PTR [rdx+0x8],rax
 1006d34:	mov    eax,DWORD PTR [rcx+0x10]
 1006d37:	mov    DWORD PTR [rdx+0x10],eax
 1006d3a:	mov    eax,DWORD PTR [rcx+0x18]
 1006d3d:	mov    DWORD PTR [rdx+0x18],eax
 1006d40:	mov    eax,DWORD PTR [rcx+0x14]
 1006d43:	mov    DWORD PTR [rdx+0x14],eax
 1006d46:	movzx  eax,WORD PTR [rcx+0x70]
 1006d4a:	mov    WORD PTR [rdx+0x70],ax
 1006d4e:	movzx  eax,BYTE PTR [rcx+0x72]
 1006d52:	mov    BYTE PTR [rdx+0x72],al
 1006d55:	movzx  eax,BYTE PTR [rcx+0x73]
 1006d59:	mov    BYTE PTR [rdx+0x73],al
 1006d5c:	mov    BYTE PTR [rcx+0x73],r8b
 1006d60:	lea    rcx,[rdx+0x20]
 1006d64:	sub    rbx,rdx
 1006d67:	mov    edx,0xa
 1006d6c:	nop    DWORD PTR [rax+0x0]
 1006d70:	mov    rax,QWORD PTR [rbx+rcx*1]
 1006d74:	mov    QWORD PTR [rcx],rax
 1006d77:	add    rcx,0x8
 1006d7b:	dec    rdx
 1006d7e:	jne    0x1006d70
 1006d80:	jmp    0x1006e2a
 1006d85:	cmp    BYTE PTR [rcx+0x72],0x0
 1006d89:	je     0x1006d9c
 1006d8b:	mov    rdx,rcx
 1006d8e:	mov    rcx,rdi
 1006d91:	call   0x1006b40
 1006d96:	nop
 1006d97:	jmp    0x1006e2a
 1006d9c:	cmp    BYTE PTR [rcx+0x73],0x0
 1006da0:	jne    0x1006db0
 1006da2:	mov    rdx,rcx
 1006da5:	mov    rcx,rdi
 1006da8:	call   0x1006b40
 1006dad:	nop
 1006dae:	jmp    0x1006e2a
 1006db0:	cmp    WORD PTR [rcx+0x70],0xa
 1006db5:	jb     0x1006dc5
 1006db7:	mov    rdx,rcx
 1006dba:	mov    rcx,rdi
 1006dbd:	call   0x1006b40
 1006dc2:	nop
 1006dc3:	jmp    0x1006e2a
 1006dc5:	or     rsi,0xffffffffffffffff
 1006dc9:	nop    DWORD PTR [rax+0x0]
 1006dd0:	inc    rsi
 1006dd3:	cmp    WORD PTR [r8+rsi*2],0x0
 1006dd9:	jne    0x1006dd0
 1006ddb:	inc    rsi
 1006dde:	lea    rcx,[rsi+rsi*1]
 1006de2:	call   QWORD PTR [rip+0xffffffffffffa640]        # 0x1001428
 1006de8:	mov    r14,rax
 1006deb:	test   rax,rax
 1006dee:	jne    0x1006e02
 1006df0:	mov    BYTE PTR [rbx+0x72],0x1
 1006df4:	mov    rdx,rbx
 1006df7:	mov    rcx,rdi
 1006dfa:	call   0x1006b40
 1006dff:	nop
 1006e00:	jmp    0x1006e2a
 1006e02:	mov    r8,rbp
 1006e05:	mov    rdx,rsi
 1006e08:	mov    rcx,rax
 1006e0b:	call   0x1006a30
 1006e10:	movzx  r11d,WORD PTR [rbx+0x70]
 1006e15:	mov    QWORD PTR [rbx+r11*8+0x20],r14
 1006e1a:	inc    WORD PTR [rbx+0x70]
 1006e1e:	mov    rdx,rbx
 1006e21:	mov    rcx,rdi
 1006e24:	call   0x1006b40
 1006e29:	nop
 1006e2a:	mov    DWORD PTR [rsp+0x20],0x1
 1006e32:	mov    rax,rdi
 1006e35:	mov    rbx,QWORD PTR [rsp+0x50]
 1006e3a:	mov    rbp,QWORD PTR [rsp+0x60]
 1006e3f:	add    rsp,0x30
 1006e43:	pop    r14
 1006e45:	pop    rdi
 1006e46:	pop    rsi
 1006e47:	ret    
 1006e48:	int3   
 1006e49:	int3   
 1006e4a:	int3   
 1006e4b:	int3   
 1006e4c:	int3   
 1006e4d:	int3   
 1006e4e:	int3   
 1006e4f:	int3   
 1006e50:	mov    rax,rsp
 1006e53:	mov    QWORD PTR [rax+0x20],r9
 1006e57:	mov    QWORD PTR [rax+0x10],rdx
 1006e5b:	push   rbx
 1006e5c:	push   rbp
 1006e5d:	push   rsi
 1006e5e:	push   rdi
 1006e5f:	push   r14
 1006e61:	sub    rsp,0x50
 1006e65:	mov    QWORD PTR [rax-0x30],0xfffffffffffffffe
 1006e6d:	mov    esi,r8d
 1006e70:	mov    rbx,rdx
 1006e73:	mov    r14,rcx
 1006e76:	cmp    DWORD PTR [rip+0x14903],0x0        # 0x101b780
 1006e7d:	je     0x1006f78
 1006e83:	xor    ebp,ebp
 1006e85:	cmp    QWORD PTR [rax+0x20],rbp
 1006e89:	je     0x1006f1d
 1006e8f:	mov    ecx,0x322
 1006e94:	call   0x1009a38
 1006e99:	mov    rdi,rax
 1006e9c:	mov    QWORD PTR [rsp+0x40],rax
 1006ea1:	test   rax,rax
 1006ea4:	je     0x1006f14
 1006ea6:	lea    r9,[rsp+0xa0]
 1006eae:	mov    r8,QWORD PTR [rsp+0x98]
 1006eb6:	mov    edx,0x190
 1006ebb:	mov    rcx,rax
 1006ebe:	call   0x1005fe0
 1006ec3:	mov    DWORD PTR [rsp+0x30],ebp
 1006ec7:	mov    QWORD PTR [rsp+0x28],rbp
 1006ecc:	mov    eax,DWORD PTR [rbx+0x14]
 1006ecf:	mov    DWORD PTR [rsp+0x20],eax
 1006ed3:	mov    r9d,DWORD PTR [rbx+0x18]
 1006ed7:	mov    r8d,DWORD PTR [rbx+0x10]
 1006edb:	mov    rdx,QWORD PTR [rbx]
 1006ede:	lea    rcx,[rip+0x1489b]        # 0x101b780
 1006ee5:	call   0x100af10
 1006eea:	mov    r9,rdi
 1006eed:	mov    r8,QWORD PTR [r14+0x8]
 1006ef1:	lea    rdx,[rip+0xffffffffffffd830]        # 0x1004728
 1006ef8:	lea    rcx,[rip+0x14881]        # 0x101b780
 1006eff:	call   0x100b220
 1006f04:	mov    edx,DWORD PTR [rbx+0x18]
 1006f07:	lea    rcx,[rip+0x14872]        # 0x101b780
 1006f0e:	call   0x100b150
 1006f13:	nop
 1006f14:	mov    rcx,rdi
 1006f17:	call   QWORD PTR [rip+0xffffffffffffa37b]        # 0x1001298
 1006f1d:	mov    DWORD PTR [rsp+0x30],ebp
 1006f21:	mov    QWORD PTR [rsp+0x28],rbp
 1006f26:	mov    DWORD PTR [rsp+0x20],0x2
 1006f2e:	mov    r9d,DWORD PTR [rbx+0x18]
 1006f32:	mov    r8d,DWORD PTR [rbx+0x10]
 1006f36:	mov    rdx,QWORD PTR [rbx]
 1006f39:	lea    rcx,[rip+0x14840]        # 0x101b780
 1006f40:	call   0x100af10
 1006f45:	mov    r11d,DWORD PTR [r14]
 1006f48:	mov    DWORD PTR [rsp+0x20],r11d
 1006f4d:	mov    r9d,esi
 1006f50:	mov    r8,QWORD PTR [r14+0x8]
 1006f54:	lea    rdx,[rip+0xffffffffffffde95]        # 0x1004df0
 1006f5b:	lea    rcx,[rip+0x1481e]        # 0x101b780
 1006f62:	call   0x100b220
 1006f67:	mov    edx,0x2
 1006f6c:	lea    rcx,[rip+0x1480d]        # 0x101b780
 1006f73:	call   0x100b150
 1006f78:	mov    DWORD PTR [r14],esi
 1006f7b:	mov    DWORD PTR [rsp+0x40],esi
 1006f7f:	lea    rdx,[rip+0x12dc2]        # 0x1019d48
 1006f86:	lea    rcx,[rsp+0x40]
 1006f8b:	call   0x101067c
 1006f90:	int3   
 1006f91:	int3   
 1006f92:	int3   
 1006f93:	int3   
 1006f94:	int3   
 1006f95:	int3   
 1006f96:	int3   
 1006f97:	int3   
 1006f98:	int3   
 1006f99:	int3   
 1006f9a:	int3   
 1006f9b:	int3   
 1006f9c:	int3   
 1006f9d:	int3   
 1006f9e:	int3   
 1006f9f:	int3   
 1006fa0:	mov    QWORD PTR [rsp+0x18],r8
 1006fa5:	push   rbx
 1006fa6:	push   rbp
 1006fa7:	push   rsi
 1006fa8:	push   rdi
 1006fa9:	push   r14
 1006fab:	sub    rsp,0x50
 1006faf:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 1006fb8:	mov    r14d,r9d
 1006fbb:	mov    rbx,r8
 1006fbe:	mov    rdi,rcx
 1006fc1:	test   edx,edx
 1006fc3:	jne    0x1006fff
 1006fc5:	xor    esi,esi
 1006fc7:	mov    DWORD PTR [rcx],esi
 1006fc9:	cmp    BYTE PTR [r8+0x73],sil
 1006fcd:	je     0x1007128
 1006fd3:	add    rbx,0x20
 1006fd7:	lea    edi,[rdx+0xa]
 1006fda:	nop    WORD PTR [rax+rax*1+0x0]
 1006fe0:	mov    rcx,QWORD PTR [rbx]
 1006fe3:	test   rcx,rcx
 1006fe6:	je     0x1006ff1
 1006fe8:	call   QWORD PTR [rip+0xffffffffffffa442]        # 0x1001430
 1006fee:	mov    QWORD PTR [rbx],rsi
 1006ff1:	add    rbx,0x8
 1006ff5:	dec    rdi
 1006ff8:	jne    0x1006fe0
 1006ffa:	jmp    0x1007128
 1006fff:	cmp    DWORD PTR [rip+0x1477a],0x0        # 0x101b780
 1007006:	je     0x100710e
 100700c:	xor    esi,esi
 100700e:	cmp    QWORD PTR [rsp+0xa0],rsi
 1007016:	je     0x10070aa
 100701c:	mov    ecx,0x322
 1007021:	call   0x1009a38
 1007026:	mov    rbp,rax
 1007029:	mov    QWORD PTR [rsp+0x40],rax
 100702e:	test   rax,rax
 1007031:	je     0x10070a1
 1007033:	lea    r9,[rsp+0xa8]
 100703b:	mov    r8,QWORD PTR [rsp+0xa0]
 1007043:	mov    edx,0x190
 1007048:	mov    rcx,rax
 100704b:	call   0x1005fe0
 1007050:	mov    DWORD PTR [rsp+0x30],esi
 1007054:	mov    QWORD PTR [rsp+0x28],rsi
 1007059:	mov    eax,DWORD PTR [rbx+0x14]
 100705c:	mov    DWORD PTR [rsp+0x20],eax
 1007060:	mov    r9d,DWORD PTR [rbx+0x18]
 1007064:	mov    r8d,DWORD PTR [rbx+0x10]
 1007068:	mov    rdx,QWORD PTR [rbx]
 100706b:	lea    rcx,[rip+0x1470e]        # 0x101b780
 1007072:	call   0x100af10
 1007077:	mov    r9,rbp
 100707a:	mov    r8,QWORD PTR [rdi+0x8]
 100707e:	lea    rdx,[rip+0xffffffffffffd6a3]        # 0x1004728
 1007085:	lea    rcx,[rip+0x146f4]        # 0x101b780
 100708c:	call   0x100b220
 1007091:	mov    edx,DWORD PTR [rbx+0x18]
 1007094:	lea    rcx,[rip+0x146e5]        # 0x101b780
 100709b:	call   0x100b150
 10070a0:	nop
 10070a1:	mov    rcx,rbp
 10070a4:	call   QWORD PTR [rip+0xffffffffffffa1ee]        # 0x1001298
 10070aa:	mov    DWORD PTR [rsp+0x30],esi
 10070ae:	mov    QWORD PTR [rsp+0x28],rsi
 10070b3:	mov    DWORD PTR [rsp+0x20],0x2
 10070bb:	mov    r9d,DWORD PTR [rbx+0x18]
 10070bf:	mov    r8d,DWORD PTR [rbx+0x10]
 10070c3:	mov    rdx,QWORD PTR [rbx]
 10070c6:	lea    rcx,[rip+0x146b3]        # 0x101b780
 10070cd:	call   0x100af10
 10070d2:	mov    r11d,DWORD PTR [rdi]
 10070d5:	mov    DWORD PTR [rsp+0x28],r11d
 10070da:	mov    DWORD PTR [rsp+0x20],r14d
 10070df:	mov    r9,QWORD PTR [rdi+0x8]
 10070e3:	lea    r8,[rip+0xffffffffffffdd8e]        # 0x1004e78
 10070ea:	lea    rdx,[rip+0xffffffffffffdd9f]        # 0x1004e90
 10070f1:	lea    rcx,[rip+0x14688]        # 0x101b780
 10070f8:	call   0x100b220
 10070fd:	mov    edx,0x2
 1007102:	lea    rcx,[rip+0x14677]        # 0x101b780
 1007109:	call   0x100b150
 100710e:	mov    DWORD PTR [rdi],r14d
 1007111:	mov    DWORD PTR [rsp+0x40],r14d
 1007116:	lea    rdx,[rip+0x12c2b]        # 0x1019d48
 100711d:	lea    rcx,[rsp+0x40]
 1007122:	call   0x101067c
 1007127:	nop
 1007128:	add    rsp,0x50
 100712c:	pop    r14
 100712e:	pop    rdi
 100712f:	pop    rsi
 1007130:	pop    rbp
 1007131:	pop    rbx
 1007132:	ret    
 1007133:	int3   
 1007134:	int3   
 1007135:	int3   
 1007136:	int3   
 1007137:	int3   
 1007138:	int3   
 1007139:	int3   
 100713a:	int3   
 100713b:	int3   
 100713c:	int3   
 100713d:	int3   
 100713e:	int3   
 100713f:	int3   
 1007140:	mov    r11,rsp
 1007143:	push   rbx
 1007144:	push   rsi
 1007145:	push   rdi
 1007146:	push   r12
 1007148:	push   r13
 100714a:	push   r14
 100714c:	push   r15
 100714e:	sub    rsp,0x2f0
 1007155:	mov    QWORD PTR [r11-0x98],0xfffffffffffffffe
 1007160:	mov    rax,QWORD PTR [rip+0x13fc9]        # 0x101b130
 1007167:	xor    rax,rsp
 100716a:	mov    QWORD PTR [rsp+0x2e0],rax
 1007172:	movzx  r13d,r9w
 1007176:	mov    r15,r8
 1007179:	mov    r12d,edx
 100717c:	mov    r14,rcx
 100717f:	mov    QWORD PTR [r11-0x248],r8
 1007186:	lea    rax,[rsp+0x68]
 100718b:	mov    QWORD PTR [rsp+0x60],rax
 1007190:	lea    rax,[rip+0xffffffffffffdb99]        # 0x1004d30
 1007197:	mov    QWORD PTR [rsp+0x68],rax
 100719c:	lea    rax,[rip+0xffffffffffffdb7d]        # 0x1004d20
 10071a3:	mov    QWORD PTR [rsp+0x70],rax
 10071a8:	mov    DWORD PTR [rsp+0x78],0x425
 10071b0:	mov    QWORD PTR [rsp+0x7c],0x4000
 10071b9:	xor    edi,edi
 10071bb:	mov    DWORD PTR [rsp+0xd8],0x1000000
 10071c6:	mov    QWORD PTR [r11-0x2a0],rdi
 10071cd:	mov    QWORD PTR [r11-0x298],rdi
 10071d4:	mov    QWORD PTR [r11-0x290],rdi
 10071db:	mov    QWORD PTR [r11-0x288],rdi
 10071e2:	mov    QWORD PTR [r11-0x280],rdi
 10071e9:	mov    QWORD PTR [r11-0x278],rdi
 10071f0:	mov    QWORD PTR [r11-0x270],rdi
 10071f7:	mov    QWORD PTR [r11-0x268],rdi
 10071fe:	mov    QWORD PTR [r11-0x260],rdi
 1007205:	mov    QWORD PTR [r11-0x258],rdi
 100720c:	lea    r8,[rip+0xffffffffffffdcfd]        # 0x1004f10
 1007213:	lea    rdx,[rsp+0x68]
 1007218:	lea    rcx,[r11-0x200]
 100721f:	call   0x10060d0
 1007224:	nop
 1007225:	lea    rcx,[rip+0x4914]        # 0x100bb40
 100722c:	call   QWORD PTR [rip+0xffffffffffffa07e]        # 0x10012b0
 1007232:	nop
 1007233:	mov    QWORD PTR [rsp+0x240],rdi
 100723b:	xor    eax,eax
 100723d:	mov    QWORD PTR [rsp+0x248],rax
 1007245:	mov    QWORD PTR [rsp+0x250],rax
 100724d:	mov    QWORD PTR [rsp+0x258],rax
 1007255:	mov    QWORD PTR [rsp+0x260],rax
 100725d:	mov    QWORD PTR [rsp+0x268],rax
 1007265:	mov    QWORD PTR [rsp+0x270],rax
 100726d:	mov    QWORD PTR [rsp+0x278],rax
 1007275:	mov    QWORD PTR [rsp+0x280],rax
 100727d:	mov    QWORD PTR [rsp+0x288],rax
 1007285:	mov    BYTE PTR [rsp+0x298],al
 100728c:	mov    QWORD PTR [rsp+0x299],rax
 1007294:	mov    QWORD PTR [rsp+0x2a1],rax
 100729c:	mov    QWORD PTR [rsp+0x2a9],rax
 10072a4:	mov    DWORD PTR [rsp+0x2b1],eax
 10072ab:	mov    WORD PTR [rsp+0x2b5],ax
 10072b3:	mov    BYTE PTR [rsp+0x2b7],al
 10072ba:	mov    r8,QWORD PTR [r15+0x8]
 10072be:	mov    ebx,0x8
 10072c3:	mov    ecx,ebx
 10072c5:	mov    QWORD PTR [rsp+0x150],rbx
 10072cd:	mov    QWORD PTR [rsp+0x1b8],r8
 10072d5:	mov    edx,0x20
 10072da:	mov    QWORD PTR [rsp+0x1b0],rdx
 10072e2:	lea    rax,[rsp+0x298]
 10072ea:	mov    QWORD PTR [rsp+0x118],rax
 10072f2:	mov    r9d,edi
 10072f5:	mov    QWORD PTR [rsp+0x108],rdi
 10072fd:	nop    DWORD PTR [rax]
 1007300:	test   rdx,rdx
 1007303:	je     0x100734f
 1007305:	test   rcx,rcx
 1007308:	je     0x1007365
 100730a:	movzx  r10d,BYTE PTR [r8]
 100730e:	test   r10b,r10b
 1007311:	je     0x1007365
 1007313:	mov    BYTE PTR [rax],r10b
 1007316:	inc    rax
 1007319:	mov    QWORD PTR [rsp+0x118],rax
 1007321:	inc    r8
 1007324:	mov    QWORD PTR [rsp+0x1b8],r8
 100732c:	dec    rdx
 100732f:	mov    QWORD PTR [rsp+0x1b0],rdx
 1007337:	dec    rcx
 100733a:	mov    QWORD PTR [rsp+0x150],rcx
 1007342:	inc    r9
 1007345:	mov    QWORD PTR [rsp+0x108],r9
 100734d:	jmp    0x1007300
 100734f:	dec    rax
 1007352:	mov    QWORD PTR [rsp+0x118],rax
 100735a:	dec    r9
 100735d:	mov    QWORD PTR [rsp+0x108],r9
 1007365:	mov    BYTE PTR [rax],0x0
 1007368:	mov    esi,0xa
 100736d:	mov    r8d,esi
 1007370:	lea    rdx,[rsp+0x2b8]
 1007378:	mov    ecx,DWORD PTR [r15+0x10]
 100737c:	call   QWORD PTR [rip+0xffffffffffff9f36]        # 0x10012b8
 1007382:	mov    r11,rbx
 1007385:	mov    QWORD PTR [rsp+0x188],rbx
 100738d:	lea    rdx,[rsp+0x2b8]
 1007395:	mov    QWORD PTR [rsp+0x168],rdx
 100739d:	mov    ecx,0x18
 10073a2:	mov    QWORD PTR [rsp+0x178],rcx
 10073aa:	lea    rax,[rsp+0x2a0]
 10073b2:	mov    QWORD PTR [rsp+0xe8],rax
 10073ba:	mov    r8,rdi
 10073bd:	mov    QWORD PTR [rsp+0x110],rdi
 10073c5:	test   rcx,rcx
 10073c8:	je     0x1007414
 10073ca:	test   r11,r11
 10073cd:	je     0x100742a
 10073cf:	movzx  r9d,BYTE PTR [rdx]
 10073d3:	test   r9b,r9b
 10073d6:	je     0x100742a
 10073d8:	mov    BYTE PTR [rax],r9b
 10073db:	inc    rax
 10073de:	mov    QWORD PTR [rsp+0xe8],rax
 10073e6:	inc    rdx
 10073e9:	mov    QWORD PTR [rsp+0x168],rdx
 10073f1:	dec    rcx
 10073f4:	mov    QWORD PTR [rsp+0x178],rcx
 10073fc:	dec    r11
 10073ff:	mov    QWORD PTR [rsp+0x188],r11
 1007407:	inc    r8
 100740a:	mov    QWORD PTR [rsp+0x110],r8
 1007412:	jmp    0x10073c5
 1007414:	dec    rax
 1007417:	mov    QWORD PTR [rsp+0xe8],rax
 100741f:	dec    r8
 1007422:	mov    QWORD PTR [rsp+0x110],r8
 100742a:	mov    BYTE PTR [rax],0x0
 100742d:	mov    r8,QWORD PTR [r14+0x10]
 1007431:	mov    rcx,rbx
 1007434:	mov    QWORD PTR [rsp+0x190],rbx
 100743c:	mov    QWORD PTR [rsp+0x180],r8
 1007444:	mov    edx,0x10
 1007449:	mov    QWORD PTR [rsp+0x1a8],rdx
 1007451:	lea    rax,[rsp+0x2a8]
 1007459:	mov    QWORD PTR [rsp+0x100],rax
 1007461:	mov    r9,rdi
 1007464:	mov    QWORD PTR [rsp+0x120],rdi
 100746c:	nop    DWORD PTR [rax+0x0]
 1007470:	test   rdx,rdx
 1007473:	je     0x10074bf
 1007475:	test   rcx,rcx
 1007478:	je     0x10074d5
 100747a:	movzx  r10d,BYTE PTR [r8]
 100747e:	test   r10b,r10b
 1007481:	je     0x10074d5
 1007483:	mov    BYTE PTR [rax],r10b
 1007486:	inc    rax
 1007489:	mov    QWORD PTR [rsp+0x100],rax
 1007491:	inc    r8
 1007494:	mov    QWORD PTR [rsp+0x180],r8
 100749c:	dec    rdx
 100749f:	mov    QWORD PTR [rsp+0x1a8],rdx
 10074a7:	dec    rcx
 10074aa:	mov    QWORD PTR [rsp+0x190],rcx
 10074b2:	inc    r9
 10074b5:	mov    QWORD PTR [rsp+0x120],r9
 10074bd:	jmp    0x1007470
 10074bf:	dec    rax
 10074c2:	mov    QWORD PTR [rsp+0x100],rax
 10074ca:	dec    r9
 10074cd:	mov    QWORD PTR [rsp+0x120],r9
 10074d5:	mov    BYTE PTR [rax],0x0
 10074d8:	mov    r8d,esi
 10074db:	lea    rdx,[rsp+0x2b8]
 10074e3:	mov    ecx,DWORD PTR [r14+0x18]
 10074e7:	call   QWORD PTR [rip+0xffffffffffff9dcb]        # 0x10012b8
 10074ed:	mov    QWORD PTR [rsp+0x160],rbx
 10074f5:	lea    rdx,[rsp+0x2b8]
 10074fd:	mov    QWORD PTR [rsp+0x1a0],rdx
 1007505:	mov    rcx,rbx
 1007508:	mov    QWORD PTR [rsp+0x158],rbx
 1007510:	lea    rax,[rsp+0x2b0]
 1007518:	mov    QWORD PTR [rsp+0xf0],rax
 1007520:	mov    r8,rdi
 1007523:	mov    QWORD PTR [rsp+0xf8],rdi
 100752b:	nop    DWORD PTR [rax+rax*1+0x0]
 1007530:	test   rcx,rcx
 1007533:	je     0x100757f
 1007535:	test   rbx,rbx
 1007538:	je     0x1007595
 100753a:	movzx  r9d,BYTE PTR [rdx]
 100753e:	test   r9b,r9b
 1007541:	je     0x1007595
 1007543:	mov    BYTE PTR [rax],r9b
 1007546:	inc    rax
 1007549:	mov    QWORD PTR [rsp+0xf0],rax
 1007551:	inc    rdx
 1007554:	mov    QWORD PTR [rsp+0x1a0],rdx
 100755c:	dec    rcx
 100755f:	mov    QWORD PTR [rsp+0x158],rcx
 1007567:	dec    rbx
 100756a:	mov    QWORD PTR [rsp+0x160],rbx
 1007572:	inc    r8
 1007575:	mov    QWORD PTR [rsp+0xf8],r8
 100757d:	jmp    0x1007530
 100757f:	dec    rax
 1007582:	mov    QWORD PTR [rsp+0xf0],rax
 100758a:	dec    r8
 100758d:	mov    QWORD PTR [rsp+0xf8],r8
 1007595:	mov    BYTE PTR [rax],0x0
 1007598:	movzx  ebx,WORD PTR [r15+0x70]
 100759d:	movzx  edx,di
 10075a0:	mov    WORD PTR [rsp+0x58],dx
 10075a5:	cmp    dx,bx
 10075a8:	jae    0x10075c4
 10075aa:	cmp    dx,si
 10075ad:	jae    0x10075bf
 10075af:	movzx  ecx,dx
 10075b2:	mov    rax,QWORD PTR [r15+rcx*8+0x20]
 10075b7:	mov    QWORD PTR [rsp+rcx*8+0x240],rax
 10075bf:	inc    dx
 10075c2:	jmp    0x10075a0
 10075c4:	mov    rdx,QWORD PTR [rip+0x141ad]        # 0x101b778
 10075cb:	xor    ecx,ecx
 10075cd:	call   QWORD PTR [rip+0xffffffffffff9a2d]        # 0x1001000
 10075d3:	mov    r14,rax
 10075d6:	test   rax,rax
 10075d9:	jne    0x100766e
 10075df:	lea    rbx,[rsp+0x1c0]
 10075e7:	mov    QWORD PTR [rsp+0x60],rbx
 10075ec:	lea    r12,[rip+0xffffffffffffd73d]        # 0x1004d30
 10075f3:	mov    QWORD PTR [rsp+0x1c0],r12
 10075fb:	lea    r13,[rip+0xffffffffffffd71e]        # 0x1004d20
 1007602:	mov    QWORD PTR [rsp+0x1c8],r13
 100760a:	mov    DWORD PTR [rsp+0x1d0],0x452
 1007615:	mov    QWORD PTR [rsp+0x1d4],0x4000
 1007621:	mov    DWORD PTR [rsp+0x230],0x1000000
 100762c:	movzx  ecx,di
 100762f:	mov    WORD PTR [rsp+0x5c],cx
 1007634:	cmp    cx,si
 1007637:	jae    0x1007646
 1007639:	movzx  eax,cx
 100763c:	mov    QWORD PTR [rbx+rax*8+0x20],rdi
 1007641:	inc    cx
 1007644:	jmp    0x100762f
 1007646:	call   QWORD PTR [rip+0xffffffffffff9c2c]        # 0x1001278
 100764c:	nop
 100764d:	mov    DWORD PTR [rsp+0x20],eax
 1007651:	lea    r9,[rip+0xffffffffffffd8f8]        # 0x1004f50
 1007658:	mov    r8d,0x8000ffff
 100765e:	mov    rdx,rbx
 1007661:	lea    rcx,[rsp+0x128]
 1007669:	call   0x1006e50
 100766e:	xor    r8d,r8d
 1007671:	lea    rax,[rsp+0x298]
 1007679:	mov    QWORD PTR [rsp+0x40],rax
 100767e:	lea    rax,[rsp+0x240]
 1007686:	mov    QWORD PTR [rsp+0x38],rax
 100768b:	mov    DWORD PTR [rsp+0x30],0x20
 1007693:	mov    WORD PTR [rsp+0x28],bx
 1007698:	mov    QWORD PTR [rsp+0x20],rdi
 100769d:	mov    r9d,r12d
 10076a0:	movzx  edx,r13w
 10076a4:	mov    rcx,r14
 10076a7:	call   QWORD PTR [rip+0xffffffffffff995b]        # 0x1001008
 10076ad:	lea    r12,[rip+0xffffffffffffd67c]        # 0x1004d30
 10076b4:	lea    r13,[rip+0xffffffffffffd665]        # 0x1004d20
 10076bb:	test   eax,eax
 10076bd:	jne    0x1007738
 10076bf:	lea    rbx,[rsp+0x1c0]
 10076c7:	mov    QWORD PTR [rsp+0x60],rbx
 10076cc:	mov    QWORD PTR [rsp+0x1c0],r12
 10076d4:	mov    QWORD PTR [rsp+0x1c8],r13
 10076dc:	mov    DWORD PTR [rsp+0x1d0],0x462
 10076e7:	mov    QWORD PTR [rsp+0x1d4],0x4000
 10076f3:	mov    DWORD PTR [rsp+0x230],0x1000000
 10076fe:	movzx  ecx,di
 1007701:	mov    WORD PTR [rsp+0x54],cx
 1007706:	cmp    cx,si
 1007709:	jae    0x1007718
 100770b:	movzx  eax,cx
 100770e:	mov    QWORD PTR [rbx+rax*8+0x20],rdi
 1007713:	inc    cx
 1007716:	jmp    0x1007701
 1007718:	call   QWORD PTR [rip+0xffffffffffff9b5a]        # 0x1001278
 100771e:	mov    r9d,eax
 1007721:	lea    r8,[rip+0xffffffffffffd878]        # 0x1004fa0
 1007728:	mov    rdx,rbx
 100772b:	lea    rcx,[rsp+0x128]
 1007733:	call   0x1006240
 1007738:	mov    rcx,r14
 100773b:	call   QWORD PTR [rip+0xffffffffffff98cf]        # 0x1001010
 1007741:	test   eax,eax
 1007743:	jne    0x10077cc
 1007749:	lea    rbx,[rsp+0x1c0]
 1007751:	mov    QWORD PTR [rsp+0x60],rbx
 1007756:	mov    QWORD PTR [rsp+0x1c0],r12
 100775e:	mov    QWORD PTR [rsp+0x1c8],r13
 1007766:	mov    DWORD PTR [rsp+0x1d0],0x467
 1007771:	mov    QWORD PTR [rsp+0x1d4],0x4000
 100777d:	mov    DWORD PTR [rsp+0x230],0x1000000
 1007788:	movzx  ecx,di
 100778b:	mov    WORD PTR [rsp+0x50],cx
 1007790:	cmp    cx,0xa
 1007794:	jae    0x10077a3
 1007796:	movzx  eax,cx
 1007799:	mov    QWORD PTR [rbx+rax*8+0x20],rdi
 100779e:	inc    cx
 10077a1:	jmp    0x100778b
 10077a3:	call   QWORD PTR [rip+0xffffffffffff9acf]        # 0x1001278
 10077a9:	nop
 10077aa:	mov    DWORD PTR [rsp+0x20],eax
 10077ae:	lea    r9,[rip+0xffffffffffffd82b]        # 0x1004fe0
 10077b5:	mov    r8d,0x8000ffff
 10077bb:	mov    rdx,rbx
 10077be:	lea    rcx,[rsp+0x128]
 10077c6:	call   0x1006e50
 10077cb:	nop
 10077cc:	jmp    0x10077db
 10077ce:	xor    edi,edi
 10077d0:	lea    esi,[rdi+0xa]
 10077d3:	mov    r15,QWORD PTR [rsp+0xe0]
 10077db:	cmp    DWORD PTR [rip+0x13f9e],0x0        # 0x101b780
 10077e2:	je     0x1007853
 10077e4:	cmp    DWORD PTR [rip+0x13fb5],0x0        # 0x101b7a0
 10077eb:	je     0x1007853
 10077ed:	mov    DWORD PTR [rsp+0x30],edi
 10077f1:	mov    rax,QWORD PTR [rsp+0x130]
 10077f9:	mov    QWORD PTR [rsp+0x28],rax
 10077fe:	mov    eax,DWORD PTR [rsp+0x144]
 1007805:	mov    DWORD PTR [rsp+0x20],eax
 1007809:	mov    ebx,DWORD PTR [rsp+0x148]
 1007810:	mov    r9d,ebx
 1007813:	xor    r8d,r8d
 1007816:	lea    rdx,[rip+0xffffffffffffd4ff]        # 0x1004d1c
 100781d:	lea    rcx,[rip+0x13f5c]        # 0x101b780
 1007824:	call   0x100af10
 1007829:	mov    r8d,DWORD PTR [rsp+0x128]
 1007831:	lea    rdx,[rip+0xffffffffffffced8]        # 0x1004710
 1007838:	lea    rcx,[rip+0x13f41]        # 0x101b780
 100783f:	call   0x100b470
 1007844:	mov    edx,ebx
 1007846:	lea    rcx,[rip+0x13f33]        # 0x101b780
 100784d:	call   0x100b150
 1007852:	nop
 1007853:	cmp    BYTE PTR [r15+0x73],0x0
 1007858:	je     0x100787a
 100785a:	lea    rbx,[r15+0x20]
 100785e:	xchg   ax,ax
 1007860:	mov    rcx,QWORD PTR [rbx]
 1007863:	test   rcx,rcx
 1007866:	je     0x1007871
 1007868:	call   QWORD PTR [rip+0xffffffffffff9bc2]        # 0x1001430
 100786e:	mov    QWORD PTR [rbx],rdi
 1007871:	add    rbx,0x8
 1007875:	dec    rsi
 1007878:	jne    0x1007860
 100787a:	mov    rcx,QWORD PTR [rsp+0x2e0]
 1007882:	xor    rcx,rsp
 1007885:	call   0x1009d50
 100788a:	add    rsp,0x2f0
 1007891:	pop    r15
 1007893:	pop    r14
 1007895:	pop    r13
 1007897:	pop    r12
 1007899:	pop    rdi
 100789a:	pop    rsi
 100789b:	pop    rbx
 100789c:	ret    
 100789d:	int3   
 100789e:	int3   
 100789f:	int3   
 10078a0:	int3   
 10078a1:	int3   
 10078a2:	int3   
 10078a3:	int3   
 10078a4:	int3   
 10078a5:	int3   
 10078a6:	int3   
 10078a7:	int3   
 10078a8:	int3   
 10078a9:	int3   
 10078aa:	int3   
 10078ab:	int3   
 10078ac:	int3   
 10078ad:	int3   
 10078ae:	int3   
 10078af:	int3   
 10078b0:	xor    eax,eax
 10078b2:	ret    
 10078b3:	int3   
 10078b4:	int3   
 10078b5:	int3   
 10078b6:	int3   
 10078b7:	int3   
 10078b8:	int3   
 10078b9:	int3   
 10078ba:	int3   
 10078bb:	int3   
 10078bc:	int3   
 10078bd:	int3   
 10078be:	int3   
 10078bf:	int3   
 10078c0:	mov    r11,rsp
 10078c3:	push   rdi
 10078c4:	push   r14
 10078c6:	push   r15
 10078c8:	sub    rsp,0x230
 10078cf:	mov    QWORD PTR [r11-0xa0],0xfffffffffffffffe
 10078da:	mov    QWORD PTR [r11+0x10],rbx
 10078de:	mov    QWORD PTR [r11+0x18],rsi
 10078e2:	lea    rax,[rip+0x13887]        # 0x101b170
 10078e9:	mov    QWORD PTR [rsp+0x178],rax
 10078f1:	lea    rax,[rsp+0x58]
 10078f6:	mov    QWORD PTR [r11+0x8],rax
 10078fa:	lea    r14,[rip+0xffffffffffffd88f]        # 0x1005190
 1007901:	mov    QWORD PTR [rsp+0x58],r14
 1007906:	lea    r15,[rip+0xffffffffffffcea3]        # 0x10047b0
 100790d:	mov    QWORD PTR [rsp+0x60],r15
 1007912:	mov    DWORD PTR [rsp+0x68],0x8c
 100791a:	mov    QWORD PTR [rsp+0x6c],0x200
 1007923:	xor    ebx,ebx
 1007925:	mov    DWORD PTR [rsp+0xc8],0x1000000
 1007930:	mov    QWORD PTR [rsp+0x78],rbx
 1007935:	mov    QWORD PTR [r11-0x1c8],rbx
 100793c:	mov    QWORD PTR [r11-0x1c0],rbx
 1007943:	mov    QWORD PTR [r11-0x1b8],rbx
 100794a:	mov    QWORD PTR [r11-0x1b0],rbx
 1007951:	mov    QWORD PTR [r11-0x1a8],rbx
 1007958:	mov    QWORD PTR [r11-0x1a0],rbx
 100795f:	mov    QWORD PTR [r11-0x198],rbx
 1007966:	mov    QWORD PTR [r11-0x190],rbx
 100796d:	mov    QWORD PTR [r11-0x188],rbx
 1007974:	lea    r8,[rip+0xffffffffffffd7c5]        # 0x1005140
 100797b:	lea    rdx,[rsp+0x58]
 1007980:	lea    rcx,[r11-0x178]
 1007987:	call   0x10060d0
 100798c:	nop
 100798d:	lea    rax,[rip+0xffffffffffffd2bc]        # 0x1004c50
 1007994:	mov    QWORD PTR [rsp+0x188],rax
 100799c:	lea    rax,[rip+0x39d]        # 0x1007d40
 10079a3:	mov    QWORD PTR [rsp+0x190],rax
 10079ab:	mov    QWORD PTR [rsp+0x198],rbx
 10079b3:	mov    QWORD PTR [rsp+0x1a0],rbx
 10079bb:	lea    rcx,[rsp+0x188]
 10079c3:	call   QWORD PTR [rip+0xffffffffffff964f]        # 0x1001018
 10079c9:	test   eax,eax
 10079cb:	jne    0x1007b62
 10079d1:	lea    rdi,[rsp+0x1b0]
 10079d9:	mov    QWORD PTR [rsp+0x250],rdi
 10079e1:	mov    QWORD PTR [rsp+0xf8],r14
 10079e9:	mov    QWORD PTR [rsp+0x100],r15
 10079f1:	mov    DWORD PTR [rsp+0x108],0x99
 10079fc:	mov    QWORD PTR [rsp+0x10c],0x200
 1007a08:	mov    DWORD PTR [rsp+0x168],0x1000000
 1007a13:	movzx  ecx,bx
 1007a16:	mov    WORD PTR [rsp+0x4c],bx
 1007a1b:	nop    DWORD PTR [rax+rax*1+0x0]
 1007a20:	cmp    cx,0xa
 1007a24:	jae    0x1007a3b
 1007a26:	movzx  eax,cx
 1007a29:	mov    QWORD PTR [rsp+rax*8+0x118],rbx
 1007a31:	inc    cx
 1007a34:	mov    WORD PTR [rsp+0x4c],cx
 1007a39:	jmp    0x1007a20
 1007a3b:	call   QWORD PTR [rip+0xffffffffffff9837]        # 0x1001278
 1007a41:	test   eax,eax
 1007a43:	jle    0x1007a4d
 1007a45:	movzx  eax,ax
 1007a48:	or     eax,0x80070000
 1007a4d:	mov    r8d,eax
 1007a50:	mov    rdx,rdi
 1007a53:	lea    rcx,[rsp+0xf8]
 1007a5b:	call   0x1006c50
 1007a60:	nop
 1007a61:	mov    r9d,0x1
 1007a67:	mov    r8,rax
 1007a6a:	mov    edx,r9d
 1007a6d:	lea    rcx,[rsp+0xd0]
 1007a75:	call   0x1007140
 1007a7a:	nop
 1007a7b:	cmp    BYTE PTR [rsp+0x16b],0x0
 1007a83:	je     0x1007ac0
 1007a85:	movzx  edi,bx
 1007a88:	mov    WORD PTR [rsp+0x48],bx
 1007a8d:	nop    DWORD PTR [rax]
 1007a90:	cmp    di,0xa
 1007a94:	jae    0x1007ac0
 1007a96:	movzx  eax,di
 1007a99:	lea    rsi,[rsp+0x118]
 1007aa1:	lea    rsi,[rsi+rax*8]
 1007aa5:	mov    rcx,QWORD PTR [rsi]
 1007aa8:	test   rcx,rcx
 1007aab:	je     0x1007ab6
 1007aad:	call   QWORD PTR [rip+0xffffffffffff997d]        # 0x1001430
 1007ab3:	mov    QWORD PTR [rsi],rbx
 1007ab6:	inc    di
 1007ab9:	mov    WORD PTR [rsp+0x48],di
 1007abe:	jmp    0x1007a90
 1007ac0:	lea    rdi,[rsp+0xf8]
 1007ac8:	mov    QWORD PTR [rsp+0x250],rdi
 1007ad0:	mov    QWORD PTR [rsp+0xf8],r14
 1007ad8:	mov    QWORD PTR [rsp+0x100],r15
 1007ae0:	mov    DWORD PTR [rsp+0x108],0x9a
 1007aeb:	mov    QWORD PTR [rsp+0x10c],0x200
 1007af7:	mov    DWORD PTR [rsp+0x168],0x1000000
 1007b02:	movzx  ecx,bx
 1007b05:	mov    WORD PTR [rsp+0x50],bx
 1007b0a:	nop    WORD PTR [rax+rax*1+0x0]
 1007b10:	cmp    cx,0xa
 1007b14:	jae    0x1007b28
 1007b16:	movzx  eax,cx
 1007b19:	mov    QWORD PTR [rdi+rax*8+0x20],rbx
 1007b1e:	inc    cx
 1007b21:	mov    WORD PTR [rsp+0x50],cx
 1007b26:	jmp    0x1007b10
 1007b28:	call   QWORD PTR [rip+0xffffffffffff974a]        # 0x1001278
 1007b2e:	mov    ebx,eax
 1007b30:	test   eax,eax
 1007b32:	jle    0x1007b3d
 1007b34:	movzx  ebx,ax
 1007b37:	or     ebx,0x80070000
 1007b3d:	call   QWORD PTR [rip+0xffffffffffff9735]        # 0x1001278
 1007b43:	nop
 1007b44:	mov    DWORD PTR [rsp+0x20],eax
 1007b48:	lea    r9,[rip+0xffffffffffffd6e1]        # 0x1005230
 1007b4f:	mov    r8d,ebx
 1007b52:	mov    rdx,rdi
 1007b55:	lea    rcx,[rsp+0xd0]
 1007b5d:	call   0x1006e50
 1007b62:	mov    r8d,DWORD PTR [rip+0x1686f]        # 0x101e3d8
 1007b69:	test   r8d,r8d
 1007b6c:	je     0x1007c96
 1007b72:	xor    edx,edx
 1007b74:	mov    ecx,0x100000
 1007b79:	call   QWORD PTR [rip+0xffffffffffff96c9]        # 0x1001248
 1007b7f:	mov    rdi,rax
 1007b82:	test   rax,rax
 1007b85:	je     0x1007c96
 1007b8b:	lea    rdx,[rsp+0xf8]
 1007b93:	mov    QWORD PTR [rsp+0x250],rdx
 1007b9b:	mov    QWORD PTR [rsp+0xf8],r14
 1007ba3:	mov    QWORD PTR [rsp+0x100],r15
 1007bab:	mov    DWORD PTR [rsp+0x108],0xa6
 1007bb6:	mov    QWORD PTR [rsp+0x10c],0x200
 1007bc2:	mov    DWORD PTR [rsp+0x168],0x1000000
 1007bcd:	movzx  ecx,bx
 1007bd0:	mov    WORD PTR [rsp+0x40],bx
 1007bd5:	cmp    cx,0xa
 1007bd9:	jae    0x1007bed
 1007bdb:	movzx  eax,cx
 1007bde:	mov    QWORD PTR [rdx+rax*8+0x20],rbx
 1007be3:	inc    cx
 1007be6:	mov    WORD PTR [rsp+0x40],cx
 1007beb:	jmp    0x1007bd5
 1007bed:	lea    r8,[rip+0xffffffffffffd69c]        # 0x1005290
 1007bf4:	lea    rcx,[rsp+0xd0]
 1007bfc:	call   0x1006240
 1007c01:	mov    edx,0x2710
 1007c06:	mov    rcx,rdi
 1007c09:	call   QWORD PTR [rip+0xffffffffffff9649]        # 0x1001258
 1007c0f:	cmp    eax,0x102
 1007c14:	jne    0x1007c8c
 1007c16:	lea    rdx,[rsp+0xf8]
 1007c1e:	mov    QWORD PTR [rsp+0x250],rdx
 1007c26:	mov    QWORD PTR [rsp+0xf8],r14
 1007c2e:	mov    QWORD PTR [rsp+0x100],r15
 1007c36:	mov    DWORD PTR [rsp+0x108],0xaa
 1007c41:	mov    QWORD PTR [rsp+0x10c],0x200
 1007c4d:	mov    DWORD PTR [rsp+0x168],0x1000000
 1007c58:	movzx  ecx,bx
 1007c5b:	mov    WORD PTR [rsp+0x44],bx
 1007c60:	cmp    cx,0xa
 1007c64:	jae    0x1007c78
 1007c66:	movzx  eax,cx
 1007c69:	mov    QWORD PTR [rdx+rax*8+0x20],rbx
 1007c6e:	inc    cx
 1007c71:	mov    WORD PTR [rsp+0x44],cx
 1007c76:	jmp    0x1007c60
 1007c78:	lea    r8,[rip+0xffffffffffffd6b1]        # 0x1005330
 1007c7f:	lea    rcx,[rsp+0xd0]
 1007c87:	call   0x1006240
 1007c8c:	mov    rcx,rdi
 1007c8f:	call   QWORD PTR [rip+0xffffffffffff95ab]        # 0x1001240
 1007c95:	nop
 1007c96:	jmp    0x1007c9a
 1007c98:	xor    ebx,ebx
 1007c9a:	mov    edi,DWORD PTR [rsp+0xd0]
 1007ca1:	mov    rax,QWORD PTR [rsp+0x178]
 1007ca9:	mov    DWORD PTR [rax+0x1c],edi
 1007cac:	cmp    DWORD PTR [rip+0x13acd],0x0        # 0x101b780
 1007cb3:	je     0x1007d1e
 1007cb5:	cmp    DWORD PTR [rip+0x13ae4],0x0        # 0x101b7a0
 1007cbc:	je     0x1007d1e
 1007cbe:	mov    DWORD PTR [rsp+0x30],ebx
 1007cc2:	mov    rax,QWORD PTR [rsp+0xd8]
 1007cca:	mov    QWORD PTR [rsp+0x28],rax
 1007ccf:	mov    eax,DWORD PTR [rsp+0xec]
 1007cd6:	mov    DWORD PTR [rsp+0x20],eax
 1007cda:	mov    ebx,DWORD PTR [rsp+0xf0]
 1007ce1:	mov    r9d,ebx
 1007ce4:	xor    r8d,r8d
 1007ce7:	lea    rdx,[rip+0xffffffffffffd02e]        # 0x1004d1c
 1007cee:	lea    rcx,[rip+0x13a8b]        # 0x101b780
 1007cf5:	call   0x100af10
 1007cfa:	mov    r8d,edi
 1007cfd:	lea    rdx,[rip+0xffffffffffffca0c]        # 0x1004710
 1007d04:	lea    rcx,[rip+0x13a75]        # 0x101b780
 1007d0b:	call   0x100b470
 1007d10:	mov    edx,ebx
 1007d12:	lea    rcx,[rip+0x13a67]        # 0x101b780
 1007d19:	call   0x100b150
 1007d1e:	lea    r11,[rsp+0x230]
 1007d26:	mov    rbx,QWORD PTR [r11+0x28]
 1007d2a:	mov    rsi,QWORD PTR [r11+0x30]
 1007d2e:	mov    rsp,r11
 1007d31:	pop    r15
 1007d33:	pop    r14
 1007d35:	pop    rdi
 1007d36:	ret    
 1007d37:	int3   
 1007d38:	int3   
 1007d39:	int3   
 1007d3a:	int3   
 1007d3b:	int3   
 1007d3c:	int3   
 1007d3d:	int3   
 1007d3e:	int3   
 1007d3f:	int3   
 1007d40:	jmp    0x1007d50
 1007d45:	int3   
 1007d46:	int3   
 1007d47:	int3   
 1007d48:	int3   
 1007d49:	int3   
 1007d4a:	int3   
 1007d4b:	int3   
 1007d4c:	int3   
 1007d4d:	int3   
 1007d4e:	int3   
 1007d4f:	int3   
 1007d50:	mov    r11,rsp
 1007d53:	push   rdi
 1007d54:	push   r14
 1007d56:	push   r15
 1007d58:	sub    rsp,0x200
 1007d5f:	mov    QWORD PTR [r11-0xa0],0xfffffffffffffffe
 1007d6a:	mov    QWORD PTR [r11+0x10],rbx
 1007d6e:	mov    QWORD PTR [r11+0x18],rsi
 1007d72:	lea    rdi,[rip+0x133f7]        # 0x101b170
 1007d79:	mov    QWORD PTR [rsp+0xc8],rdi
 1007d81:	lea    rax,[rsp+0x50]
 1007d86:	mov    QWORD PTR [r11+0x8],rax
 1007d8a:	lea    r14,[rip+0xffffffffffffd3ff]        # 0x1005190
 1007d91:	mov    QWORD PTR [rsp+0x50],r14
 1007d96:	lea    r15,[rip+0xffffffffffffca13]        # 0x10047b0
 1007d9d:	mov    QWORD PTR [rsp+0x58],r15
 1007da2:	mov    DWORD PTR [rsp+0x60],0xd0
 1007daa:	mov    QWORD PTR [rsp+0x64],0x200
 1007db3:	xor    ebx,ebx
 1007db5:	mov    DWORD PTR [rsp+0xc0],0x1000000
 1007dc0:	mov    QWORD PTR [rsp+0x70],rbx
 1007dc5:	mov    QWORD PTR [rsp+0x78],rbx
 1007dca:	mov    QWORD PTR [r11-0x198],rbx
 1007dd1:	mov    QWORD PTR [r11-0x190],rbx
 1007dd8:	mov    QWORD PTR [r11-0x188],rbx
 1007ddf:	mov    QWORD PTR [r11-0x180],rbx
 1007de6:	mov    QWORD PTR [r11-0x178],rbx
 1007ded:	mov    QWORD PTR [r11-0x170],rbx
 1007df4:	mov    QWORD PTR [r11-0x168],rbx
 1007dfb:	mov    QWORD PTR [r11-0x160],rbx
 1007e02:	lea    r8,[rip+0xffffffffffffd5af]        # 0x10053b8
 1007e09:	lea    rdx,[rsp+0x50]
 1007e0e:	lea    rcx,[r11-0x148]
 1007e15:	call   0x10060d0
 1007e1a:	nop
 1007e1b:	call   0x100ba80
 1007e20:	call   QWORD PTR [rip+0xffffffffffff942a]        # 0x1001250
 1007e26:	mov    DWORD PTR [rip+0x165ac],eax        # 0x101e3d8
 1007e2c:	mov    DWORD PTR [rip+0x1334e],0x2        # 0x101b184
 1007e36:	xor    r8d,r8d
 1007e39:	lea    rdx,[rip+0x2e0]        # 0x1008120
 1007e40:	lea    rcx,[rip+0xffffffffffffce09]        # 0x1004c50
 1007e47:	call   QWORD PTR [rip+0xffffffffffff91d3]        # 0x1001020
 1007e4d:	mov    QWORD PTR [rip+0x13324],rax        # 0x101b178
 1007e54:	test   rax,rax
 1007e57:	jne    0x1007fd0
 1007e5d:	lea    rdi,[rsp+0x180]
 1007e65:	mov    QWORD PTR [rsp+0x220],rdi
 1007e6d:	mov    QWORD PTR [rsp+0x100],r14
 1007e75:	mov    QWORD PTR [rsp+0x108],r15
 1007e7d:	mov    DWORD PTR [rsp+0x110],0xe1
 1007e88:	mov    QWORD PTR [rsp+0x114],0x200
 1007e94:	mov    DWORD PTR [rsp+0x170],0x1000000
 1007e9f:	movzx  ecx,bx
 1007ea2:	mov    WORD PTR [rsp+0x48],bx
 1007ea7:	cmp    cx,0xa
 1007eab:	jae    0x1007ec2
 1007ead:	movzx  eax,cx
 1007eb0:	mov    QWORD PTR [rsp+rax*8+0x120],rbx
 1007eb8:	inc    cx
 1007ebb:	mov    WORD PTR [rsp+0x48],cx
 1007ec0:	jmp    0x1007ea7
 1007ec2:	call   QWORD PTR [rip+0xffffffffffff93b0]        # 0x1001278
 1007ec8:	test   eax,eax
 1007eca:	jle    0x1007ed4
 1007ecc:	movzx  eax,ax
 1007ecf:	or     eax,0x80070000
 1007ed4:	mov    r8d,eax
 1007ed7:	mov    rdx,rdi
 1007eda:	lea    rcx,[rsp+0x100]
 1007ee2:	call   0x1006c50
 1007ee7:	nop
 1007ee8:	mov    r9d,0x1
 1007eee:	mov    r8,rax
 1007ef1:	lea    edx,[r9+0x1]
 1007ef5:	lea    rcx,[rsp+0xd0]
 1007efd:	call   0x1007140
 1007f02:	nop
 1007f03:	cmp    BYTE PTR [rsp+0x173],0x0
 1007f0b:	je     0x1007f45
 1007f0d:	movzx  edi,bx
 1007f10:	mov    WORD PTR [rsp+0x40],bx
 1007f15:	cmp    di,0xa
 1007f19:	jae    0x1007f45
 1007f1b:	movzx  eax,di
 1007f1e:	lea    rsi,[rsp+0x120]
 1007f26:	lea    rsi,[rsi+rax*8]
 1007f2a:	mov    rcx,QWORD PTR [rsi]
 1007f2d:	test   rcx,rcx
 1007f30:	je     0x1007f3b
 1007f32:	call   QWORD PTR [rip+0xffffffffffff94f8]        # 0x1001430
 1007f38:	mov    QWORD PTR [rsi],rbx
 1007f3b:	inc    di
 1007f3e:	mov    WORD PTR [rsp+0x40],di
 1007f43:	jmp    0x1007f15
 1007f45:	lea    rdi,[rsp+0x100]
 1007f4d:	mov    QWORD PTR [rsp+0x220],rdi
 1007f55:	mov    QWORD PTR [rsp+0x100],r14
 1007f5d:	mov    QWORD PTR [rsp+0x108],r15
 1007f65:	mov    DWORD PTR [rsp+0x110],0xe2
 1007f70:	mov    QWORD PTR [rsp+0x114],0x200
 1007f7c:	mov    DWORD PTR [rsp+0x170],0x1000000
 1007f87:	movzx  ecx,bx
 1007f8a:	mov    WORD PTR [rsp+0x44],bx
 1007f8f:	nop
 1007f90:	cmp    cx,0xa
 1007f94:	jae    0x1007fa8
 1007f96:	movzx  eax,cx
 1007f99:	mov    QWORD PTR [rdi+rax*8+0x20],rbx
 1007f9e:	inc    cx
 1007fa1:	mov    WORD PTR [rsp+0x44],cx
 1007fa6:	jmp    0x1007f90
 1007fa8:	call   QWORD PTR [rip+0xffffffffffff92ca]        # 0x1001278
 1007fae:	nop
 1007faf:	mov    DWORD PTR [rsp+0x20],eax
 1007fb3:	lea    r9,[rip+0xffffffffffffd446]        # 0x1005400
 1007fba:	mov    r8d,0x8000ffff
 1007fc0:	mov    rdx,rdi
 1007fc3:	lea    rcx,[rsp+0xd0]
 1007fcb:	call   0x1006e50
 1007fd0:	mov    r8b,0x1
 1007fd3:	mov    edx,0x2
 1007fd8:	mov    rcx,rdi
 1007fdb:	call   0x10082f0
 1007fe0:	mov    rcx,rdi
 1007fe3:	mov    rax,QWORD PTR [rip+0x13186]        # 0x101b170
 1007fea:	call   QWORD PTR [rax]
 1007fec:	mov    r8b,0x1
 1007fef:	mov    edx,0x4
 1007ff4:	mov    rcx,rdi
 1007ff7:	call   0x10082f0
 1007ffc:	mov    rcx,rdi
 1007fff:	mov    rax,QWORD PTR [rip+0x1316a]        # 0x101b170
 1008006:	call   QWORD PTR [rax+0x8]
 1008009:	mov    r8b,0x1
 100800c:	mov    edx,0x3
 1008011:	mov    rcx,rdi
 1008014:	call   0x10082f0
 1008019:	mov    rcx,rdi
 100801c:	mov    rax,QWORD PTR [rip+0x1314d]        # 0x101b170
 1008023:	call   QWORD PTR [rax+0x10]
 1008026:	mov    r8b,0x1
 1008029:	mov    edx,0x1
 100802e:	mov    rcx,rdi
 1008031:	call   0x10082f0
 1008036:	nop
 1008037:	jmp    0x1008043
 1008039:	mov    rdi,QWORD PTR [rsp+0xc8]
 1008041:	xor    ebx,ebx
 1008043:	mov    esi,DWORD PTR [rsp+0xd0]
 100804a:	test   esi,esi
 100804c:	jns    0x1008084
 100804e:	jmp    0x1008061
 1008050:	xor    ebx,ebx
 1008052:	mov    rdi,QWORD PTR [rsp+0xc8]
 100805a:	mov    esi,DWORD PTR [rsp+0xd0]
 1008061:	mov    DWORD PTR [rdi+0x1c],0x42a
 1008068:	mov    DWORD PTR [rdi+0x20],esi
 100806b:	mov    rax,QWORD PTR [rdi]
 100806e:	mov    rcx,rdi
 1008071:	call   QWORD PTR [rax+0x10]
 1008074:	xor    r8d,r8d
 1008077:	lea    edx,[r8+0x1]
 100807b:	mov    rcx,rdi
 100807e:	call   0x10082f0
 1008083:	nop
 1008084:	cmp    DWORD PTR [rip+0x136f5],0x0        # 0x101b780
 100808b:	je     0x10080f6
 100808d:	cmp    DWORD PTR [rip+0x1370c],0x0        # 0x101b7a0
 1008094:	je     0x10080f6
 1008096:	mov    DWORD PTR [rsp+0x30],ebx
 100809a:	mov    rax,QWORD PTR [rsp+0xd8]
 10080a2:	mov    QWORD PTR [rsp+0x28],rax
 10080a7:	mov    eax,DWORD PTR [rsp+0xec]
 10080ae:	mov    DWORD PTR [rsp+0x20],eax
 10080b2:	mov    ebx,DWORD PTR [rsp+0xf0]
 10080b9:	mov    r9d,ebx
 10080bc:	xor    r8d,r8d
 10080bf:	lea    rdx,[rip+0xffffffffffffcc56]        # 0x1004d1c
 10080c6:	lea    rcx,[rip+0x136b3]        # 0x101b780
 10080cd:	call   0x100af10
 10080d2:	mov    r8d,esi
 10080d5:	lea    rdx,[rip+0xffffffffffffc634]        # 0x1004710
 10080dc:	lea    rcx,[rip+0x1369d]        # 0x101b780
 10080e3:	call   0x100b470
 10080e8:	mov    edx,ebx
 10080ea:	lea    rcx,[rip+0x1368f]        # 0x101b780
 10080f1:	call   0x100b150
 10080f6:	lea    r11,[rsp+0x200]
 10080fe:	mov    rbx,QWORD PTR [r11+0x28]
 1008102:	mov    rsi,QWORD PTR [r11+0x30]
 1008106:	mov    rsp,r11
 1008109:	pop    r15
 100810b:	pop    r14
 100810d:	pop    rdi
 100810e:	ret    
 100810f:	int3   
 1008110:	int3   
 1008111:	int3   
 1008112:	int3   
 1008113:	int3   
 1008114:	int3   
 1008115:	int3   
 1008116:	int3   
 1008117:	int3   
 1008118:	int3   
 1008119:	int3   
 100811a:	int3   
 100811b:	int3   
 100811c:	int3   
 100811d:	int3   
 100811e:	int3   
 100811f:	int3   
 1008120:	jmp    0x1008130
 1008125:	int3   
 1008126:	int3   
 1008127:	int3   
 1008128:	int3   
 1008129:	int3   
 100812a:	int3   
 100812b:	int3   
 100812c:	int3   
 100812d:	int3   
 100812e:	int3   
 100812f:	int3   
 1008130:	mov    r11,rsp
 1008133:	push   rdi
 1008134:	sub    rsp,0x100
 100813b:	mov    QWORD PTR [r11-0x18],0xfffffffffffffffe
 1008143:	mov    QWORD PTR [r11+0x8],rbx
 1008147:	mov    QWORD PTR [r11+0x18],rsi
 100814b:	mov    esi,ecx
 100814d:	lea    rax,[rsp+0x48]
 1008152:	mov    QWORD PTR [r11+0x10],rax
 1008156:	lea    rax,[rip+0xffffffffffffd033]        # 0x1005190
 100815d:	mov    QWORD PTR [rsp+0x48],rax
 1008162:	lea    rax,[rip+0xffffffffffffc647]        # 0x10047b0
 1008169:	mov    QWORD PTR [rsp+0x50],rax
 100816e:	mov    DWORD PTR [rsp+0x58],0x130
 1008176:	mov    QWORD PTR [rsp+0x5c],0x200
 100817f:	xor    ebx,ebx
 1008181:	mov    DWORD PTR [r11-0x50],0x1000000
 1008189:	mov    QWORD PTR [rsp+0x68],rbx
 100818e:	mov    QWORD PTR [rsp+0x70],rbx
 1008193:	mov    QWORD PTR [rsp+0x78],rbx
 1008198:	mov    QWORD PTR [r11-0x88],rbx
 100819f:	mov    QWORD PTR [r11-0x80],rbx
 10081a3:	mov    QWORD PTR [r11-0x78],rbx
 10081a7:	mov    QWORD PTR [r11-0x70],rbx
 10081ab:	mov    QWORD PTR [r11-0x68],rbx
 10081af:	mov    QWORD PTR [r11-0x60],rbx
 10081b3:	mov    QWORD PTR [r11-0x58],rbx
 10081b7:	lea    r8,[rip+0xffffffffffffd2a2]        # 0x1005460
 10081be:	lea    rdx,[rsp+0x48]
 10081c3:	lea    rcx,[r11-0x48]
 10081c7:	call   0x10060d0
 10081cc:	nop
 10081cd:	mov    edi,0x78
 10081d2:	mov    DWORD PTR [rsp+0x40],edi
 10081d6:	lea    rcx,[rip+0x3963]        # 0x100bb40
 10081dd:	call   QWORD PTR [rip+0xffffffffffff90cd]        # 0x10012b0
 10081e3:	nop
 10081e4:	mov    QWORD PTR [rip+0x12fa9],rbx        # 0x101b194
 10081eb:	mov    QWORD PTR [rip+0x12f9a],rbx        # 0x101b18c
 10081f2:	dec    esi
 10081f4:	je     0x100821e
 10081f6:	sub    esi,0x3
 10081f9:	je     0x1008201
 10081fb:	dec    esi
 10081fd:	je     0x100821e
 10081ff:	jmp    0x100824a
 1008201:	mov    edi,ebx
 1008203:	mov    DWORD PTR [rsp+0x40],ebx
 1008207:	mov    r8b,0x1
 100820a:	mov    edx,DWORD PTR [rip+0x12f74]        # 0x101b184
 1008210:	lea    rcx,[rip+0x12f59]        # 0x101b170
 1008217:	call   0x10082f0
 100821c:	jmp    0x100824a
 100821e:	mov    edi,ebx
 1008220:	mov    DWORD PTR [rsp+0x40],ebx
 1008224:	mov    r8b,0x1
 1008227:	mov    edx,0x3
 100822c:	lea    rcx,[rip+0x12f3d]        # 0x101b170
 1008233:	call   0x10082f0
 1008238:	lea    rcx,[rip+0x12f31]        # 0x101b170
 100823f:	mov    rax,QWORD PTR [rip+0x12f2a]        # 0x101b170
 1008246:	call   QWORD PTR [rax+0x18]
 1008249:	nop
 100824a:	jmp    0x1008252
 100824c:	xor    ebx,ebx
 100824e:	mov    edi,DWORD PTR [rsp+0x40]
 1008252:	cmp    DWORD PTR [rip+0x13527],0x0        # 0x101b780
 1008259:	je     0x10082c9
 100825b:	cmp    DWORD PTR [rip+0x1353e],0x0        # 0x101b7a0
 1008262:	je     0x10082c9
 1008264:	mov    DWORD PTR [rsp+0x30],ebx
 1008268:	mov    rax,QWORD PTR [rsp+0xc8]
 1008270:	mov    QWORD PTR [rsp+0x28],rax
 1008275:	mov    eax,DWORD PTR [rsp+0xdc]
 100827c:	mov    DWORD PTR [rsp+0x20],eax
 1008280:	mov    ebx,DWORD PTR [rsp+0xe0]
 1008287:	mov    r9d,ebx
 100828a:	xor    r8d,r8d
 100828d:	lea    rdx,[rip+0xffffffffffffca88]        # 0x1004d1c
 1008294:	lea    rcx,[rip+0x134e5]        # 0x101b780
 100829b:	call   0x100af10
 10082a0:	mov    r8d,DWORD PTR [rsp+0xc0]
 10082a8:	lea    rdx,[rip+0xffffffffffffc461]        # 0x1004710
 10082af:	lea    rcx,[rip+0x134ca]        # 0x101b780
 10082b6:	call   0x100b470
 10082bb:	mov    edx,ebx
 10082bd:	lea    rcx,[rip+0x134bc]        # 0x101b780
 10082c4:	call   0x100b150
 10082c9:	mov    eax,edi
 10082cb:	lea    r11,[rsp+0x100]
 10082d3:	mov    rbx,QWORD PTR [r11+0x10]
 10082d7:	mov    rsi,QWORD PTR [r11+0x20]
 10082db:	mov    rsp,r11
 10082de:	pop    rdi
 10082df:	ret    
 10082e0:	int3   
 10082e1:	int3   
 10082e2:	int3   
 10082e3:	int3   
 10082e4:	int3   
 10082e5:	int3   
 10082e6:	int3   
 10082e7:	int3   
 10082e8:	int3   
 10082e9:	int3   
 10082ea:	int3   
 10082eb:	int3   
 10082ec:	int3   
 10082ed:	int3   
 10082ee:	int3   
 10082ef:	int3   
 10082f0:	mov    r11,rsp
 10082f3:	mov    BYTE PTR [r11+0x18],r8b
 10082f7:	push   rsi
 10082f8:	push   rdi
 10082f9:	push   r12
 10082fb:	push   r14
 10082fd:	push   r15
 10082ff:	sub    rsp,0x280
 1008306:	mov    QWORD PTR [r11-0x128],0xfffffffffffffffe
 1008311:	mov    QWORD PTR [r11+0x8],rbx
 1008315:	mov    esi,edx
 1008317:	mov    rdi,rcx
 100831a:	lea    rax,[rsp+0x58]
 100831f:	mov    QWORD PTR [r11+0x20],rax
 1008323:	lea    r14,[rip+0xffffffffffffce66]        # 0x1005190
 100832a:	mov    QWORD PTR [rsp+0x58],r14
 100832f:	lea    r15,[rip+0xffffffffffffc47a]        # 0x10047b0
 1008336:	mov    QWORD PTR [rsp+0x60],r15
 100833b:	mov    DWORD PTR [rsp+0x68],0x166
 1008343:	mov    QWORD PTR [rsp+0x6c],0x200
 100834c:	xor    ebx,ebx
 100834e:	mov    DWORD PTR [rsp+0xc8],0x1000000
 1008359:	mov    QWORD PTR [rsp+0x78],rbx
 100835e:	mov    QWORD PTR [r11-0x228],rbx
 1008365:	mov    QWORD PTR [r11-0x220],rbx
 100836c:	mov    QWORD PTR [r11-0x218],rbx
 1008373:	mov    QWORD PTR [r11-0x210],rbx
 100837a:	mov    QWORD PTR [r11-0x208],rbx
 1008381:	mov    QWORD PTR [r11-0x200],rbx
 1008388:	mov    QWORD PTR [r11-0x1f8],rbx
 100838f:	mov    QWORD PTR [r11-0x1f0],rbx
 1008396:	mov    QWORD PTR [r11-0x1e8],rbx
 100839d:	lea    r8,[rip+0xffffffffffffd0fc]        # 0x10054a0
 10083a4:	lea    rdx,[rsp+0x58]
 10083a9:	lea    rcx,[r11-0x1d8]
 10083b0:	call   0x10060d0
 10083b5:	nop
 10083b6:	lea    rcx,[rip+0x3783]        # 0x100bb40
 10083bd:	call   QWORD PTR [rip+0xffffffffffff8eed]        # 0x10012b0
 10083c3:	nop
 10083c4:	lea    rdx,[rsp+0x100]
 10083cc:	mov    QWORD PTR [rsp+0x2c8],rdx
 10083d4:	mov    QWORD PTR [rsp+0x100],r14
 10083dc:	mov    QWORD PTR [rsp+0x108],r15
 10083e4:	mov    DWORD PTR [rsp+0x110],0x16a
 10083ef:	mov    QWORD PTR [rsp+0x114],0x200
 10083fb:	mov    DWORD PTR [rsp+0x170],0x1000000
 1008406:	movzx  ecx,bx
 1008409:	mov    WORD PTR [rsp+0x4c],bx
 100840e:	xchg   ax,ax
 1008410:	cmp    cx,0xa
 1008414:	jae    0x1008428
 1008416:	movzx  eax,cx
 1008419:	mov    QWORD PTR [rdx+rax*8+0x20],rbx
 100841e:	inc    cx
 1008421:	mov    WORD PTR [rsp+0x4c],cx
 1008426:	jmp    0x1008410
 1008428:	mov    r9d,esi
 100842b:	lea    r8,[rip+0xffffffffffffd0be]        # 0x10054f0
 1008432:	lea    rcx,[rsp+0xd0]
 100843a:	call   0x1006240
 100843f:	mov    DWORD PTR [rdi+0x14],esi
 1008442:	lea    rdx,[rdi+0x10]
 1008446:	mov    rcx,QWORD PTR [rdi+0x8]
 100844a:	call   QWORD PTR [rip+0xffffffffffff8bd8]        # 0x1001028
 1008450:	test   eax,eax
 1008452:	jne    0x1008635
 1008458:	lea    r12,[rsp+0x200]
 1008460:	mov    QWORD PTR [rsp+0x2c8],r12
 1008468:	mov    QWORD PTR [rsp+0x100],r14
 1008470:	mov    QWORD PTR [rsp+0x108],r15
 1008478:	mov    DWORD PTR [rsp+0x110],0x171
 1008483:	mov    QWORD PTR [rsp+0x114],0x200
 100848f:	mov    DWORD PTR [rsp+0x170],0x1000000
 100849a:	movzx  ecx,bx
 100849d:	mov    WORD PTR [rsp+0x48],bx
 10084a2:	cmp    cx,0xa
 10084a6:	jae    0x10084bd
 10084a8:	movzx  eax,cx
 10084ab:	mov    QWORD PTR [rsp+rax*8+0x120],rbx
 10084b3:	inc    cx
 10084b6:	mov    WORD PTR [rsp+0x48],cx
 10084bb:	jmp    0x10084a2
 10084bd:	mov    r8d,esi
 10084c0:	lea    rdx,[rsp+0x188]
 10084c8:	lea    rcx,[rsp+0x100]
 10084d0:	call   0x1006bb0
 10084d5:	mov    rdi,rax
 10084d8:	call   QWORD PTR [rip+0xffffffffffff8d9a]        # 0x1001278
 10084de:	test   eax,eax
 10084e0:	jle    0x10084ea
 10084e2:	movzx  eax,ax
 10084e5:	or     eax,0x80070000
 10084ea:	mov    r8d,eax
 10084ed:	mov    rdx,r12
 10084f0:	mov    rcx,rdi
 10084f3:	call   0x1006c50
 10084f8:	nop
 10084f9:	mov    r9d,0x1
 10084ff:	mov    r8,rax
 1008502:	lea    edx,[r9+0x5]
 1008506:	lea    rcx,[rsp+0xd0]
 100850e:	call   0x1007140
 1008513:	nop
 1008514:	cmp    BYTE PTR [rsp+0x1fb],0x0
 100851c:	je     0x1008556
 100851e:	movzx  edi,bx
 1008521:	mov    WORD PTR [rsp+0x44],bx
 1008526:	cmp    di,0xa
 100852a:	jae    0x1008556
 100852c:	movzx  eax,di
 100852f:	lea    rsi,[rsp+0x1a8]
 1008537:	lea    rsi,[rsi+rax*8]
 100853b:	mov    rcx,QWORD PTR [rsi]
 100853e:	test   rcx,rcx
 1008541:	je     0x100854c
 1008543:	call   QWORD PTR [rip+0xffffffffffff8ee7]        # 0x1001430
 1008549:	mov    QWORD PTR [rsi],rbx
 100854c:	inc    di
 100854f:	mov    WORD PTR [rsp+0x44],di
 1008554:	jmp    0x1008526
 1008556:	cmp    BYTE PTR [rsp+0x173],0x0
 100855e:	je     0x1008598
 1008560:	movzx  edi,bx
 1008563:	mov    WORD PTR [rsp+0x40],bx
 1008568:	cmp    di,0xa
 100856c:	jae    0x1008598
 100856e:	movzx  eax,di
 1008571:	lea    rsi,[rsp+0x120]
 1008579:	lea    rsi,[rsi+rax*8]
 100857d:	mov    rcx,QWORD PTR [rsi]
 1008580:	test   rcx,rcx
 1008583:	je     0x100858e
 1008585:	call   QWORD PTR [rip+0xffffffffffff8ea5]        # 0x1001430
 100858b:	mov    QWORD PTR [rsi],rbx
 100858e:	inc    di
 1008591:	mov    WORD PTR [rsp+0x40],di
 1008596:	jmp    0x1008568
 1008598:	lea    rdi,[rsp+0x100]
 10085a0:	mov    QWORD PTR [rsp+0x2c8],rdi
 10085a8:	mov    QWORD PTR [rsp+0x100],r14
 10085b0:	mov    QWORD PTR [rsp+0x108],r15
 10085b8:	mov    DWORD PTR [rsp+0x110],0x172
 10085c3:	mov    QWORD PTR [rsp+0x114],0x200
 10085cf:	mov    DWORD PTR [rsp+0x170],0x1000000
 10085da:	movzx  ecx,bx
 10085dd:	mov    WORD PTR [rsp+0x50],bx
 10085e2:	cmp    cx,0xa
 10085e6:	jae    0x10085fa
 10085e8:	movzx  eax,cx
 10085eb:	mov    QWORD PTR [rdi+rax*8+0x20],rbx
 10085f0:	inc    cx
 10085f3:	mov    WORD PTR [rsp+0x50],cx
 10085f8:	jmp    0x10085e2
 10085fa:	call   QWORD PTR [rip+0xffffffffffff8c78]        # 0x1001278
 1008600:	mov    ebx,eax
 1008602:	test   eax,eax
 1008604:	jle    0x100860f
 1008606:	movzx  ebx,ax
 1008609:	or     ebx,0x80070000
 100860f:	call   QWORD PTR [rip+0xffffffffffff8c63]        # 0x1001278
 1008615:	nop
 1008616:	mov    DWORD PTR [rsp+0x20],eax
 100861a:	lea    r9,[rip+0xffffffffffffcf2f]        # 0x1005550
 1008621:	mov    r8d,ebx
 1008624:	mov    rdx,rdi
 1008627:	lea    rcx,[rsp+0xd0]
 100862f:	call   0x1006e50
 1008634:	nop
 1008635:	jmp    0x1008647
 1008637:	xor    ebx,ebx
 1008639:	lea    r15,[rip+0xffffffffffffc170]        # 0x10047b0
 1008640:	lea    r14,[rip+0xffffffffffffcb49]        # 0x1005190
 1008647:	mov    edi,DWORD PTR [rsp+0xd0]
 100864e:	test   edi,edi
 1008650:	jns    0x1008723
 1008656:	jmp    0x100866f
 1008658:	lea    r14,[rip+0xffffffffffffcb31]        # 0x1005190
 100865f:	lea    r15,[rip+0xffffffffffffc14a]        # 0x10047b0
 1008666:	xor    ebx,ebx
 1008668:	mov    edi,DWORD PTR [rsp+0xd0]
 100866f:	lea    rax,[rsp+0x58]
 1008674:	mov    QWORD PTR [rsp+0x2c8],rax
 100867c:	mov    QWORD PTR [rsp+0x58],r14
 1008681:	mov    QWORD PTR [rsp+0x60],r15
 1008686:	mov    DWORD PTR [rsp+0x68],0x17a
 100868e:	mov    QWORD PTR [rsp+0x6c],0x200
 1008697:	mov    DWORD PTR [rsp+0xc8],0x1000000
 10086a2:	mov    QWORD PTR [rsp+0x78],rbx
 10086a7:	mov    QWORD PTR [rsp+0x80],rbx
 10086af:	mov    QWORD PTR [rsp+0x88],rbx
 10086b7:	mov    QWORD PTR [rsp+0x90],rbx
 10086bf:	mov    QWORD PTR [rsp+0x98],rbx
 10086c7:	mov    QWORD PTR [rsp+0xa0],rbx
 10086cf:	mov    QWORD PTR [rsp+0xa8],rbx
 10086d7:	mov    QWORD PTR [rsp+0xb0],rbx
 10086df:	mov    QWORD PTR [rsp+0xb8],rbx
 10086e7:	mov    QWORD PTR [rsp+0xc0],rbx
 10086ef:	movzx  edx,BYTE PTR [rsp+0x2c0]
 10086f7:	mov    DWORD PTR [rsp+0x28],edi
 10086fb:	lea    rax,[rip+0xffffffffffffce4e]        # 0x1005550
 1008702:	mov    QWORD PTR [rsp+0x20],rax
 1008707:	mov    r9d,edi
 100870a:	lea    r8,[rsp+0x58]
 100870f:	lea    rcx,[rsp+0xd0]
 1008717:	call   0x1006fa0
 100871c:	mov    edi,DWORD PTR [rsp+0xd0]
 1008723:	cmp    DWORD PTR [rip+0x13056],0x0        # 0x101b780
 100872a:	je     0x1008795
 100872c:	cmp    DWORD PTR [rip+0x1306d],0x0        # 0x101b7a0
 1008733:	je     0x1008795
 1008735:	mov    DWORD PTR [rsp+0x30],ebx
 1008739:	mov    rax,QWORD PTR [rsp+0xd8]
 1008741:	mov    QWORD PTR [rsp+0x28],rax
 1008746:	mov    eax,DWORD PTR [rsp+0xec]
 100874d:	mov    DWORD PTR [rsp+0x20],eax
 1008751:	mov    ebx,DWORD PTR [rsp+0xf0]
 1008758:	mov    r9d,ebx
 100875b:	xor    r8d,r8d
 100875e:	lea    rdx,[rip+0xffffffffffffc5b7]        # 0x1004d1c
 1008765:	lea    rcx,[rip+0x13014]        # 0x101b780
 100876c:	call   0x100af10
 1008771:	mov    r8d,edi
 1008774:	lea    rdx,[rip+0xffffffffffffbf95]        # 0x1004710
 100877b:	lea    rcx,[rip+0x12ffe]        # 0x101b780
 1008782:	call   0x100b470
 1008787:	mov    edx,ebx
 1008789:	lea    rcx,[rip+0x12ff0]        # 0x101b780
 1008790:	call   0x100b150
 1008795:	mov    rbx,QWORD PTR [rsp+0x2b0]
 100879d:	add    rsp,0x280
 10087a4:	pop    r15
 10087a6:	pop    r14
 10087a8:	pop    r12
 10087aa:	pop    rdi
 10087ab:	pop    rsi
 10087ac:	ret    
 10087ad:	int3   
 10087ae:	int3   
 10087af:	int3   
 10087b0:	int3   
 10087b1:	int3   
 10087b2:	int3   
 10087b3:	int3   
 10087b4:	int3   
 10087b5:	int3   
 10087b6:	int3   
 10087b7:	int3   
 10087b8:	int3   
 10087b9:	int3   
 10087ba:	int3   
 10087bb:	int3   
 10087bc:	int3   
 10087bd:	int3   
 10087be:	int3   
 10087bf:	int3   
 10087c0:	mov    rax,rsp
 10087c3:	push   rbp
 10087c4:	push   rdi
 10087c5:	push   r12
 10087c7:	push   r14
 10087c9:	push   r15
 10087cb:	lea    rbp,[rax-0x178]
 10087d2:	sub    rsp,0x250
 10087d9:	mov    QWORD PTR [rbp+0x68],0xfffffffffffffffe
 10087e1:	mov    QWORD PTR [rax+0x8],rbx
 10087e5:	mov    QWORD PTR [rax+0x18],rsi
 10087e9:	mov    rbx,rcx
 10087ec:	lea    rax,[rbp-0x38]
 10087f0:	mov    QWORD PTR [rbp+0x188],rax
 10087f7:	lea    r15,[rip+0xffffffffffffc992]        # 0x1005190
 10087fe:	mov    QWORD PTR [rbp-0x38],r15
 1008802:	lea    r12,[rip+0xffffffffffffbfa7]        # 0x10047b0
 1008809:	mov    QWORD PTR [rbp-0x30],r12
 100880d:	mov    DWORD PTR [rbp-0x28],0x19a
 1008814:	mov    QWORD PTR [rbp-0x24],0x200
 100881c:	xor    r14d,r14d
 100881f:	mov    DWORD PTR [rbp+0x38],0x1000000
 1008826:	mov    QWORD PTR [rbp-0x18],r14
 100882a:	mov    QWORD PTR [rbp-0x10],r14
 100882e:	mov    QWORD PTR [rbp-0x8],r14
 1008832:	mov    QWORD PTR [rbp+0x0],r14
 1008836:	mov    QWORD PTR [rbp+0x8],r14
 100883a:	mov    QWORD PTR [rbp+0x10],r14
 100883e:	mov    QWORD PTR [rbp+0x18],r14
 1008842:	mov    QWORD PTR [rbp+0x20],r14
 1008846:	mov    QWORD PTR [rbp+0x28],r14
 100884a:	mov    QWORD PTR [rbp+0x30],r14
 100884e:	lea    r8,[rip+0xffffffffffffcd5b]        # 0x10055b0
 1008855:	lea    rdx,[rbp-0x38]
 1008859:	lea    rcx,[rbp+0x40]
 100885d:	call   0x10060d0
 1008862:	nop
 1008863:	call   0x10063d0
 1008868:	test   eax,eax
 100886a:	jne    0x1008952
 1008870:	lea    rax,[rsp+0x50]
 1008875:	mov    QWORD PTR [rbp+0x188],rax
 100887c:	mov    QWORD PTR [rsp+0x50],r15
 1008881:	mov    QWORD PTR [rsp+0x58],r12
 1008886:	mov    DWORD PTR [rsp+0x60],0x1a0
 100888e:	mov    QWORD PTR [rsp+0x64],0x200
 1008897:	mov    DWORD PTR [rbp-0x40],0x1000000
 100889e:	mov    QWORD PTR [rsp+0x70],r14
 10088a3:	mov    QWORD PTR [rsp+0x78],r14
 10088a8:	mov    QWORD PTR [rbp-0x80],r14
 10088ac:	mov    QWORD PTR [rbp-0x78],r14
 10088b0:	mov    QWORD PTR [rbp-0x70],r14
 10088b4:	mov    QWORD PTR [rbp-0x68],r14
 10088b8:	mov    QWORD PTR [rbp-0x60],r14
 10088bc:	mov    QWORD PTR [rbp-0x58],r14
 10088c0:	mov    QWORD PTR [rbp-0x50],r14
 10088c4:	mov    QWORD PTR [rbp-0x48],r14
 10088c8:	lea    r9d,[r14+0x1]
 10088cc:	lea    r8,[rsp+0x50]
 10088d1:	lea    edx,[r14+0xd]
 10088d5:	lea    rcx,[rbp+0x40]
 10088d9:	call   0x1007140
 10088de:	lea    r11,[rsp+0x50]
 10088e3:	mov    QWORD PTR [rbp+0x188],r11
 10088ea:	mov    QWORD PTR [rsp+0x50],r15
 10088ef:	mov    QWORD PTR [rsp+0x58],r12
 10088f4:	mov    DWORD PTR [rsp+0x60],0x1a2
 10088fc:	mov    QWORD PTR [rsp+0x64],0x200
 1008905:	mov    DWORD PTR [rbp-0x40],0x1000000
 100890c:	mov    QWORD PTR [rsp+0x70],r14
 1008911:	mov    QWORD PTR [rsp+0x78],r14
 1008916:	mov    QWORD PTR [rbp-0x80],r14
 100891a:	mov    QWORD PTR [rbp-0x78],r14
 100891e:	mov    QWORD PTR [rbp-0x70],r14
 1008922:	mov    QWORD PTR [rbp-0x68],r14
 1008926:	mov    QWORD PTR [rbp-0x60],r14
 100892a:	mov    QWORD PTR [rbp-0x58],r14
 100892e:	mov    QWORD PTR [rbp-0x50],r14
 1008932:	mov    QWORD PTR [rbp-0x48],r14
 1008936:	lea    r9,[rip+0xffffffffffffccc3]        # 0x1005600
 100893d:	mov    r8d,0x80070032
 1008943:	lea    rdx,[rsp+0x50]
 1008948:	lea    rcx,[rbp+0x40]
 100894c:	call   0x1006e50
 1008951:	int3   
 1008952:	call   QWORD PTR [rip+0xffffffffffff88f8]        # 0x1001250
 1008958:	mov    DWORD PTR [rbx+0x2c],eax
 100895b:	xor    edx,edx
 100895d:	xor    ecx,ecx
 100895f:	call   QWORD PTR [rip+0xffffffffffff8abb]        # 0x1001420
 1008965:	mov    DWORD PTR [rbp+0x40],eax
 1008968:	test   eax,eax
 100896a:	jns    0x1008a91
 1008970:	lea    rcx,[rbp+0x70]
 1008974:	mov    QWORD PTR [rbp+0x188],rcx
 100897b:	mov    QWORD PTR [rsp+0x50],r15
 1008980:	mov    QWORD PTR [rsp+0x58],r12
 1008985:	mov    DWORD PTR [rsp+0x60],0x1ad
 100898d:	mov    QWORD PTR [rsp+0x64],0x200
 1008996:	mov    DWORD PTR [rbp-0x40],0x1000000
 100899d:	mov    QWORD PTR [rsp+0x70],r14
 10089a2:	mov    QWORD PTR [rsp+0x78],r14
 10089a7:	mov    QWORD PTR [rbp-0x80],r14
 10089ab:	mov    QWORD PTR [rbp-0x78],r14
 10089af:	mov    QWORD PTR [rbp-0x70],r14
 10089b3:	mov    QWORD PTR [rbp-0x68],r14
 10089b7:	mov    QWORD PTR [rbp-0x60],r14
 10089bb:	mov    QWORD PTR [rbp-0x58],r14
 10089bf:	mov    QWORD PTR [rbp-0x50],r14
 10089c3:	mov    QWORD PTR [rbp-0x48],r14
 10089c7:	mov    r8d,eax
 10089ca:	lea    rdx,[rbp+0x70]
 10089ce:	lea    rcx,[rsp+0x50]
 10089d3:	call   0x1006c50
 10089d8:	nop
 10089d9:	mov    r9d,0x1
 10089df:	mov    r8,rax
 10089e2:	lea    edx,[r9+0x2]
 10089e6:	lea    rcx,[rbp+0x40]
 10089ea:	call   0x1007140
 10089ef:	nop
 10089f0:	cmp    BYTE PTR [rbp-0x3d],0x0
 10089f4:	je     0x1008a1a
 10089f6:	lea    rdi,[rsp+0x70]
 10089fb:	mov    ebx,0xa
 1008a00:	mov    rcx,QWORD PTR [rdi]
 1008a03:	test   rcx,rcx
 1008a06:	je     0x1008a11
 1008a08:	call   QWORD PTR [rip+0xffffffffffff8a22]        # 0x1001430
 1008a0e:	mov    QWORD PTR [rdi],r14
 1008a11:	add    rdi,0x8
 1008a15:	dec    rbx
 1008a18:	jne    0x1008a00
 1008a1a:	lea    rax,[rsp+0x50]
 1008a1f:	mov    QWORD PTR [rbp+0x188],rax
 1008a26:	mov    QWORD PTR [rsp+0x50],r15
 1008a2b:	mov    QWORD PTR [rsp+0x58],r12
 1008a30:	mov    DWORD PTR [rsp+0x60],0x1ae
 1008a38:	mov    QWORD PTR [rsp+0x64],0x200
 1008a41:	mov    DWORD PTR [rbp-0x40],0x1000000
 1008a48:	mov    QWORD PTR [rsp+0x70],r14
 1008a4d:	mov    QWORD PTR [rsp+0x78],r14
 1008a52:	mov    QWORD PTR [rbp-0x80],r14
 1008a56:	mov    QWORD PTR [rbp-0x78],r14
 1008a5a:	mov    QWORD PTR [rbp-0x70],r14
 1008a5e:	mov    QWORD PTR [rbp-0x68],r14
 1008a62:	mov    QWORD PTR [rbp-0x60],r14
 1008a66:	mov    QWORD PTR [rbp-0x58],r14
 1008a6a:	mov    QWORD PTR [rbp-0x50],r14
 1008a6e:	mov    QWORD PTR [rbp-0x48],r14
 1008a72:	mov    r8d,DWORD PTR [rbp+0x40]
 1008a76:	mov    DWORD PTR [rsp+0x20],r8d
 1008a7b:	lea    r9,[rip+0xffffffffffffcbce]        # 0x1005650
 1008a82:	lea    rdx,[rsp+0x50]
 1008a87:	lea    rcx,[rbp+0x40]
 1008a8b:	call   0x1006e50
 1008a90:	int3   
 1008a91:	mov    BYTE PTR [rbx+0x40],0x1
 1008a95:	lea    rcx,[rbp+0xf0]
 1008a9c:	call   0x100deb0
 1008aa1:	nop
 1008aa2:	lea    rcx,[rbp+0xf0]
 1008aa9:	call   0x100e080
 1008aae:	mov    QWORD PTR [rsp+0x40],r14
 1008ab3:	mov    DWORD PTR [rsp+0x38],0x3002
 1008abb:	mov    QWORD PTR [rsp+0x30],r14
 1008ac0:	mov    DWORD PTR [rsp+0x28],0x2
 1008ac8:	mov    DWORD PTR [rsp+0x20],0x6
 1008ad0:	xor    r9d,r9d
 1008ad3:	xor    r8d,r8d
 1008ad6:	or     edx,0xffffffff
 1008ad9:	mov    rcx,QWORD PTR [rbp+0x110]
 1008ae0:	call   QWORD PTR [rip+0xffffffffffff8932]        # 0x1001418
 1008ae6:	mov    edi,eax
 1008ae8:	mov    DWORD PTR [rbp+0x40],eax
 1008aeb:	test   eax,eax
 1008aed:	jns    0x1008c0c
 1008af3:	lea    rax,[rbp+0x70]
 1008af7:	mov    QWORD PTR [rbp+0x188],rax
 1008afe:	mov    QWORD PTR [rsp+0x50],r15
 1008b03:	mov    QWORD PTR [rsp+0x58],r12
 1008b08:	mov    DWORD PTR [rsp+0x60],0x1cf
 1008b10:	mov    QWORD PTR [rsp+0x64],0x200
 1008b19:	mov    DWORD PTR [rbp-0x40],0x1000000
 1008b20:	mov    QWORD PTR [rsp+0x70],r14
 1008b25:	mov    QWORD PTR [rsp+0x78],r14
 1008b2a:	mov    QWORD PTR [rbp-0x80],r14
 1008b2e:	mov    QWORD PTR [rbp-0x78],r14
 1008b32:	mov    QWORD PTR [rbp-0x70],r14
 1008b36:	mov    QWORD PTR [rbp-0x68],r14
 1008b3a:	mov    QWORD PTR [rbp-0x60],r14
 1008b3e:	mov    QWORD PTR [rbp-0x58],r14
 1008b42:	mov    QWORD PTR [rbp-0x50],r14
 1008b46:	mov    QWORD PTR [rbp-0x48],r14
 1008b4a:	mov    r8d,edi
 1008b4d:	lea    rdx,[rbp+0x70]
 1008b51:	lea    rcx,[rsp+0x50]
 1008b56:	call   0x1006c50
 1008b5b:	nop
 1008b5c:	mov    r9d,0x1
 1008b62:	mov    r8,rax
 1008b65:	lea    edx,[r9+0x3]
 1008b69:	lea    rcx,[rbp+0x40]
 1008b6d:	call   0x1007140
 1008b72:	nop
 1008b73:	cmp    BYTE PTR [rbp-0x3d],0x0
 1008b77:	je     0x1008b9d
 1008b79:	lea    rdi,[rsp+0x70]
 1008b7e:	mov    ebx,0xa
 1008b83:	mov    rcx,QWORD PTR [rdi]
 1008b86:	test   rcx,rcx
 1008b89:	je     0x1008b94
 1008b8b:	call   QWORD PTR [rip+0xffffffffffff889f]        # 0x1001430
 1008b91:	mov    QWORD PTR [rdi],r14
 1008b94:	add    rdi,0x8
 1008b98:	dec    rbx
 1008b9b:	jne    0x1008b83
 1008b9d:	lea    rax,[rbp-0x38]
 1008ba1:	mov    QWORD PTR [rbp+0x188],rax
 1008ba8:	mov    QWORD PTR [rbp-0x38],r15
 1008bac:	mov    QWORD PTR [rbp-0x30],r12
 1008bb0:	mov    DWORD PTR [rbp-0x28],0x1d2
 1008bb7:	mov    QWORD PTR [rbp-0x24],0x200
 1008bbf:	mov    DWORD PTR [rbp+0x38],0x1000000
 1008bc6:	mov    QWORD PTR [rbp-0x18],r14
 1008bca:	mov    QWORD PTR [rbp-0x10],r14
 1008bce:	mov    QWORD PTR [rbp-0x8],r14
 1008bd2:	mov    QWORD PTR [rbp+0x0],r14
 1008bd6:	mov    QWORD PTR [rbp+0x8],r14
 1008bda:	mov    QWORD PTR [rbp+0x10],r14
 1008bde:	mov    QWORD PTR [rbp+0x18],r14
 1008be2:	mov    QWORD PTR [rbp+0x20],r14
 1008be6:	mov    QWORD PTR [rbp+0x28],r14
 1008bea:	mov    QWORD PTR [rbp+0x30],r14
 1008bee:	mov    r8d,DWORD PTR [rbp+0x40]
 1008bf2:	mov    DWORD PTR [rsp+0x20],r8d
 1008bf7:	lea    r9,[rip+0xffffffffffffcab2]        # 0x10056b0
 1008bfe:	lea    rdx,[rbp-0x38]
 1008c02:	lea    rcx,[rbp+0x40]
 1008c06:	call   0x1006e50
 1008c0b:	int3   
 1008c0c:	xor    r9d,r9d
 1008c0f:	xor    r8d,r8d
 1008c12:	lea    edx,[r9+0x1]
 1008c16:	xor    ecx,ecx
 1008c18:	call   QWORD PTR [rip+0xffffffffffff861a]        # 0x1001238
 1008c1e:	mov    QWORD PTR [rbx+0x38],rax
 1008c22:	test   rax,rax
 1008c25:	jne    0x1008d68
 1008c2b:	call   QWORD PTR [rip+0xffffffffffff8647]        # 0x1001278
 1008c31:	mov    esi,eax
 1008c33:	cmp    eax,0xe
 1008c36:	je     0x1008cea
 1008c3c:	lea    rax,[rbp+0x70]
 1008c40:	mov    QWORD PTR [rbp+0x188],rax
 1008c47:	mov    QWORD PTR [rsp+0x50],r15
 1008c4c:	mov    QWORD PTR [rsp+0x58],r12
 1008c51:	mov    DWORD PTR [rsp+0x60],0x1e4
 1008c59:	mov    QWORD PTR [rsp+0x64],0x200
 1008c62:	mov    DWORD PTR [rbp-0x40],0x1000000
 1008c69:	mov    QWORD PTR [rsp+0x70],r14
 1008c6e:	mov    QWORD PTR [rsp+0x78],r14
 1008c73:	mov    QWORD PTR [rbp-0x80],r14
 1008c77:	mov    QWORD PTR [rbp-0x78],r14
 1008c7b:	mov    QWORD PTR [rbp-0x70],r14
 1008c7f:	mov    QWORD PTR [rbp-0x68],r14
 1008c83:	mov    QWORD PTR [rbp-0x60],r14
 1008c87:	mov    QWORD PTR [rbp-0x58],r14
 1008c8b:	mov    QWORD PTR [rbp-0x50],r14
 1008c8f:	mov    QWORD PTR [rbp-0x48],r14
 1008c93:	mov    r8d,edi
 1008c96:	lea    rdx,[rbp+0x70]
 1008c9a:	lea    rcx,[rsp+0x50]
 1008c9f:	call   0x1006c50
 1008ca4:	nop
 1008ca5:	mov    r9d,0x1
 1008cab:	mov    r8,rax
 1008cae:	lea    edx,[r9+0x4]
 1008cb2:	lea    rcx,[rbp+0x40]
 1008cb6:	call   0x1007140
 1008cbb:	nop
 1008cbc:	cmp    BYTE PTR [rbp-0x3d],0x0
 1008cc0:	je     0x1008cea
 1008cc2:	lea    rdi,[rsp+0x70]
 1008cc7:	mov    ebx,0xa
 1008ccc:	nop    DWORD PTR [rax+0x0]
 1008cd0:	mov    rcx,QWORD PTR [rdi]
 1008cd3:	test   rcx,rcx
 1008cd6:	je     0x1008ce1
 1008cd8:	call   QWORD PTR [rip+0xffffffffffff8752]        # 0x1001430
 1008cde:	mov    QWORD PTR [rdi],r14
 1008ce1:	add    rdi,0x8
 1008ce5:	dec    rbx
 1008ce8:	jne    0x1008cd0
 1008cea:	lea    rax,[rbp-0x38]
 1008cee:	mov    QWORD PTR [rbp+0x188],rax
 1008cf5:	mov    QWORD PTR [rbp-0x38],r15
 1008cf9:	mov    QWORD PTR [rbp-0x30],r12
 1008cfd:	mov    DWORD PTR [rbp-0x28],0x1e7
 1008d04:	mov    QWORD PTR [rbp-0x24],0x200
 1008d0c:	mov    DWORD PTR [rbp+0x38],0x1000000
 1008d13:	mov    QWORD PTR [rbp-0x18],r14
 1008d17:	mov    QWORD PTR [rbp-0x10],r14
 1008d1b:	mov    QWORD PTR [rbp-0x8],r14
 1008d1f:	mov    QWORD PTR [rbp+0x0],r14
 1008d23:	mov    QWORD PTR [rbp+0x8],r14
 1008d27:	mov    QWORD PTR [rbp+0x10],r14
 1008d2b:	mov    QWORD PTR [rbp+0x18],r14
 1008d2f:	mov    QWORD PTR [rbp+0x20],r14
 1008d33:	mov    QWORD PTR [rbp+0x28],r14
 1008d37:	mov    QWORD PTR [rbp+0x30],r14
 1008d3b:	test   esi,esi
 1008d3d:	jg     0x1008d44
 1008d3f:	mov    r8d,esi
 1008d42:	jmp    0x1008d4f
 1008d44:	movzx  r8d,si
 1008d48:	or     r8d,0x80070000
 1008d4f:	mov    DWORD PTR [rsp+0x20],esi
 1008d53:	lea    r9,[rip+0xffffffffffffc9b6]        # 0x1005710
 1008d5a:	lea    rdx,[rbp-0x38]
 1008d5e:	lea    rcx,[rbp+0x40]
 1008d62:	call   0x1006e50
 1008d67:	int3   
 1008d68:	call   0x1009530
 1008d6d:	call   0x10095d0
 1008d72:	mov    r8b,0x1
 1008d75:	mov    edx,0x4
 1008d7a:	mov    rcx,rbx
 1008d7d:	call   0x10082f0
 1008d82:	mov    r11,QWORD PTR [rip+0x129e7]        # 0x101b770
 1008d89:	mov    QWORD PTR [rsp+0x28],r11
 1008d8e:	mov    eax,DWORD PTR [rip+0x15638]        # 0x101e3cc
 1008d94:	mov    DWORD PTR [rsp+0x20],eax
 1008d98:	mov    r9d,DWORD PTR [rip+0x155f5]        # 0x101e394
 1008d9f:	mov    r8d,DWORD PTR [rip+0x15622]        # 0x101e3c8
 1008da6:	mov    edx,DWORD PTR [rip+0x15624]        # 0x101e3d0
 1008dac:	mov    ecx,DWORD PTR [rip+0x15622]        # 0x101e3d4
 1008db2:	call   QWORD PTR [rip+0x155f0]        # 0x101e3a8
 1008db8:	call   QWORD PTR [rip+0x155e2]        # 0x101e3a0
 1008dbe:	nop
 1008dbf:	lea    rcx,[rbp+0xf0]
 1008dc6:	call   0x100df30
 1008dcb:	nop
 1008dcc:	lea    rcx,[rbp+0x40]
 1008dd0:	call   0x10061c0
 1008dd5:	lea    r11,[rsp+0x250]
 1008ddd:	mov    rbx,QWORD PTR [r11+0x30]
 1008de1:	mov    rsi,QWORD PTR [r11+0x40]
 1008de5:	mov    rsp,r11
 1008de8:	pop    r15
 1008dea:	pop    r14
 1008dec:	pop    r12
 1008dee:	pop    rdi
 1008def:	pop    rbp
 1008df0:	ret    
 1008df1:	int3   
 1008df2:	int3   
 1008df3:	int3   
 1008df4:	int3   
 1008df5:	int3   
 1008df6:	int3   
 1008df7:	int3   
 1008df8:	int3   
 1008df9:	int3   
 1008dfa:	int3   
 1008dfb:	int3   
 1008dfc:	int3   
 1008dfd:	int3   
 1008dfe:	int3   
 1008dff:	int3   
 1008e00:	mov    rax,rsp
 1008e03:	push   rbp
 1008e04:	push   rdi
 1008e05:	push   r14
 1008e07:	lea    rbp,[rax-0xf8]
 1008e0e:	sub    rsp,0x1e0
 1008e15:	mov    QWORD PTR [rbp+0xd0],0xfffffffffffffffe
 1008e20:	mov    QWORD PTR [rax+0x10],rbx
 1008e24:	mov    QWORD PTR [rax+0x18],rsi
 1008e28:	mov    rbx,rcx
 1008e2b:	lea    rax,[rsp+0x68]
 1008e30:	mov    QWORD PTR [rbp+0x100],rax
 1008e37:	lea    rsi,[rip+0xffffffffffffc352]        # 0x1005190
 1008e3e:	mov    QWORD PTR [rsp+0x68],rsi
 1008e43:	lea    r14,[rip+0xffffffffffffb966]        # 0x10047b0
 1008e4a:	mov    QWORD PTR [rsp+0x70],r14
 1008e4f:	mov    DWORD PTR [rsp+0x78],0x213
 1008e57:	mov    QWORD PTR [rsp+0x7c],0x200
 1008e60:	xor    edi,edi
 1008e62:	mov    DWORD PTR [rbp-0x28],0x1000000
 1008e69:	mov    QWORD PTR [rbp-0x78],rdi
 1008e6d:	mov    QWORD PTR [rbp-0x70],rdi
 1008e71:	mov    QWORD PTR [rbp-0x68],rdi
 1008e75:	mov    QWORD PTR [rbp-0x60],rdi
 1008e79:	mov    QWORD PTR [rbp-0x58],rdi
 1008e7d:	mov    QWORD PTR [rbp-0x50],rdi
 1008e81:	mov    QWORD PTR [rbp-0x48],rdi
 1008e85:	mov    QWORD PTR [rbp-0x40],rdi
 1008e89:	mov    QWORD PTR [rbp-0x38],rdi
 1008e8d:	mov    QWORD PTR [rbp-0x30],rdi
 1008e91:	lea    r8,[rip+0xffffffffffffc8c8]        # 0x1005760
 1008e98:	lea    rdx,[rsp+0x68]
 1008e9d:	lea    rcx,[rsp+0x40]
 1008ea2:	call   0x10060d0
 1008ea7:	nop
 1008ea8:	or     edx,0xffffffff
 1008eab:	mov    rcx,QWORD PTR [rbx+0x38]
 1008eaf:	call   QWORD PTR [rip+0xffffffffffff83a3]        # 0x1001258
 1008eb5:	test   eax,eax
 1008eb7:	je     0x1008f44
 1008ebd:	lea    rax,[rbp-0x20]
 1008ec1:	mov    QWORD PTR [rbp+0x100],rax
 1008ec8:	mov    QWORD PTR [rbp-0x20],rsi
 1008ecc:	mov    QWORD PTR [rbp-0x18],r14
 1008ed0:	mov    DWORD PTR [rbp-0x10],0x21c
 1008ed7:	mov    QWORD PTR [rbp-0xc],0x200
 1008edf:	mov    DWORD PTR [rbp+0x50],0x1000000
 1008ee6:	mov    QWORD PTR [rbp+0x0],rdi
 1008eea:	mov    QWORD PTR [rbp+0x8],rdi
 1008eee:	mov    QWORD PTR [rbp+0x10],rdi
 1008ef2:	mov    QWORD PTR [rbp+0x18],rdi
 1008ef6:	mov    QWORD PTR [rbp+0x20],rdi
 1008efa:	mov    QWORD PTR [rbp+0x28],rdi
 1008efe:	mov    QWORD PTR [rbp+0x30],rdi
 1008f02:	mov    QWORD PTR [rbp+0x38],rdi
 1008f06:	mov    QWORD PTR [rbp+0x40],rdi
 1008f0a:	mov    QWORD PTR [rbp+0x48],rdi
 1008f0e:	call   QWORD PTR [rip+0xffffffffffff8364]        # 0x1001278
 1008f14:	mov    r8d,eax
 1008f17:	test   eax,eax
 1008f19:	jle    0x1008f26
 1008f1b:	movzx  r8d,ax
 1008f1f:	or     r8d,0x80070000
 1008f26:	mov    rax,QWORD PTR [rbx+0x38]
 1008f2a:	mov    QWORD PTR [rsp+0x20],rax
 1008f2f:	lea    r9,[rip+0xffffffffffffc86a]        # 0x10057a0
 1008f36:	lea    rdx,[rbp-0x20]
 1008f3a:	lea    rcx,[rsp+0x40]
 1008f3f:	call   0x100c1a0
 1008f44:	lea    rax,[rbp+0x58]
 1008f48:	mov    QWORD PTR [rbp+0x100],rax
 1008f4f:	mov    QWORD PTR [rbp+0x58],rsi
 1008f53:	mov    QWORD PTR [rbp+0x60],r14
 1008f57:	mov    DWORD PTR [rbp+0x68],0x220
 1008f5e:	mov    QWORD PTR [rbp+0x6c],0x200
 1008f66:	mov    DWORD PTR [rbp+0xc8],0x1000000
 1008f70:	mov    QWORD PTR [rbp+0x78],rdi
 1008f74:	mov    QWORD PTR [rbp+0x80],rdi
 1008f7b:	mov    QWORD PTR [rbp+0x88],rdi
 1008f82:	mov    QWORD PTR [rbp+0x90],rdi
 1008f89:	mov    QWORD PTR [rbp+0x98],rdi
 1008f90:	mov    QWORD PTR [rbp+0xa0],rdi
 1008f97:	mov    QWORD PTR [rbp+0xa8],rdi
 1008f9e:	mov    QWORD PTR [rbp+0xb0],rdi
 1008fa5:	mov    QWORD PTR [rbp+0xb8],rdi
 1008fac:	mov    QWORD PTR [rbp+0xc0],rdi
 1008fb3:	movzx  eax,BYTE PTR [rbx+0x30]
 1008fb7:	lea    rcx,[rip+0xffffffffffffc84a]        # 0x1005808
 1008fbe:	lea    r9,[rip+0xffffffffffffc85b]        # 0x1005820
 1008fc5:	test   al,al
 1008fc7:	cmovne r9,rcx
 1008fcb:	lea    r8,[rip+0xffffffffffffc86e]        # 0x1005840
 1008fd2:	lea    rdx,[rbp+0x58]
 1008fd6:	lea    rcx,[rsp+0x40]
 1008fdb:	call   0x1006240
 1008fe0:	nop
 1008fe1:	cmp    DWORD PTR [rip+0x12798],0x0        # 0x101b780
 1008fe8:	je     0x100904c
 1008fea:	cmp    DWORD PTR [rip+0x127af],0x0        # 0x101b7a0
 1008ff1:	je     0x100904c
 1008ff3:	mov    DWORD PTR [rsp+0x30],edi
 1008ff7:	mov    rax,QWORD PTR [rsp+0x48]
 1008ffc:	mov    QWORD PTR [rsp+0x28],rax
 1009001:	mov    eax,DWORD PTR [rsp+0x5c]
 1009005:	mov    DWORD PTR [rsp+0x20],eax
 1009009:	mov    r9d,DWORD PTR [rsp+0x60]
 100900e:	xor    r8d,r8d
 1009011:	lea    rdx,[rip+0xffffffffffffbd04]        # 0x1004d1c
 1009018:	lea    rcx,[rip+0x12761]        # 0x101b780
 100901f:	call   0x100af10
 1009024:	mov    r8d,DWORD PTR [rsp+0x40]
 1009029:	lea    rdx,[rip+0xffffffffffffb6e0]        # 0x1004710
 1009030:	lea    rcx,[rip+0x12749]        # 0x101b780
 1009037:	call   0x100b470
 100903c:	mov    edx,DWORD PTR [rsp+0x60]
 1009040:	lea    rcx,[rip+0x12739]        # 0x101b780
 1009047:	call   0x100b150
 100904c:	lea    r11,[rsp+0x1e0]
 1009054:	mov    rbx,QWORD PTR [r11+0x28]
 1009058:	mov    rsi,QWORD PTR [r11+0x30]
 100905c:	mov    rsp,r11
 100905f:	pop    r14
 1009061:	pop    rdi
 1009062:	pop    rbp
 1009063:	ret    
 1009064:	int3   
 1009065:	int3   
 1009066:	int3   
 1009067:	int3   
 1009068:	int3   
 1009069:	int3   
 100906a:	int3   
 100906b:	int3   
 100906c:	int3   
 100906d:	int3   
 100906e:	int3   
 100906f:	int3   
 1009070:	mov    r11,rsp
 1009073:	push   r14
 1009075:	sub    rsp,0x100
 100907c:	mov    QWORD PTR [r11-0x18],0xfffffffffffffffe
 1009084:	mov    QWORD PTR [r11+0x8],rbx
 1009088:	mov    QWORD PTR [r11+0x18],rsi
 100908c:	mov    QWORD PTR [r11+0x20],rdi
 1009090:	mov    rdi,rcx
 1009093:	lea    rax,[rsp+0x48]
 1009098:	mov    QWORD PTR [r11+0x10],rax
 100909c:	lea    rsi,[rip+0xffffffffffffc0ed]        # 0x1005190
 10090a3:	mov    QWORD PTR [rsp+0x48],rsi
 10090a8:	lea    r14,[rip+0xffffffffffffb701]        # 0x10047b0
 10090af:	mov    QWORD PTR [rsp+0x50],r14
 10090b4:	mov    DWORD PTR [rsp+0x58],0x234
 10090bc:	mov    QWORD PTR [rsp+0x5c],0x200
 10090c5:	xor    ebx,ebx
 10090c7:	mov    DWORD PTR [r11-0x50],0x1000000
 10090cf:	mov    QWORD PTR [rsp+0x68],rbx
 10090d4:	mov    QWORD PTR [rsp+0x70],rbx
 10090d9:	mov    QWORD PTR [rsp+0x78],rbx
 10090de:	mov    QWORD PTR [r11-0x88],rbx
 10090e5:	mov    QWORD PTR [r11-0x80],rbx
 10090e9:	mov    QWORD PTR [r11-0x78],rbx
 10090ed:	mov    QWORD PTR [r11-0x70],rbx
 10090f1:	mov    QWORD PTR [r11-0x68],rbx
 10090f5:	mov    QWORD PTR [r11-0x60],rbx
 10090f9:	mov    QWORD PTR [r11-0x58],rbx
 10090fd:	lea    r8,[rip+0xffffffffffffc774]        # 0x1005878
 1009104:	lea    rdx,[rsp+0x48]
 1009109:	lea    rcx,[r11-0x48]
 100910d:	call   0x10060d0
 1009112:	nop
 1009113:	lea    rcx,[rip+0x2a26]        # 0x100bb40
 100911a:	call   QWORD PTR [rip+0xffffffffffff8190]        # 0x10012b0
 1009120:	nop
 1009121:	call   QWORD PTR [rip+0x15271]        # 0x101e398
 1009127:	cmp    BYTE PTR [rdi+0x40],bl
 100912a:	je     0x1009132
 100912c:	call   QWORD PTR [rip+0xffffffffffff82de]        # 0x1001410
 1009132:	mov    rcx,QWORD PTR [rdi+0x38]
 1009136:	mov    QWORD PTR [rdi+0x38],rbx
 100913a:	call   QWORD PTR [rip+0xffffffffffff8100]        # 0x1001240
 1009140:	test   eax,eax
 1009142:	jne    0x10091b8
 1009144:	lea    rdi,[rsp+0x48]
 1009149:	mov    QWORD PTR [rsp+0x118],rdi
 1009151:	mov    QWORD PTR [rsp+0x48],rsi
 1009156:	mov    QWORD PTR [rsp+0x50],r14
 100915b:	mov    DWORD PTR [rsp+0x58],0x242
 1009163:	mov    QWORD PTR [rsp+0x5c],0x200
 100916c:	mov    DWORD PTR [rsp+0xb8],0x1000000
 1009177:	movzx  ecx,bx
 100917a:	mov    WORD PTR [rsp+0x40],bx
 100917f:	nop
 1009180:	cmp    cx,0xa
 1009184:	jae    0x1009198
 1009186:	movzx  eax,cx
 1009189:	mov    QWORD PTR [rdi+rax*8+0x20],rbx
 100918e:	inc    cx
 1009191:	mov    WORD PTR [rsp+0x40],cx
 1009196:	jmp    0x1009180
 1009198:	call   QWORD PTR [rip+0xffffffffffff80da]        # 0x1001278
 100919e:	mov    r9d,eax
 10091a1:	lea    r8,[rip+0xffffffffffffc718]        # 0x10058c0
 10091a8:	mov    rdx,rdi
 10091ab:	lea    rcx,[rsp+0xc0]
 10091b3:	call   0x1006240
 10091b8:	call   0x1006370
 10091bd:	nop
 10091be:	jmp    0x10091c2
 10091c0:	xor    ebx,ebx
 10091c2:	cmp    DWORD PTR [rip+0x125b7],0x0        # 0x101b780
 10091c9:	je     0x1009239
 10091cb:	cmp    DWORD PTR [rip+0x125ce],0x0        # 0x101b7a0
 10091d2:	je     0x1009239
 10091d4:	mov    DWORD PTR [rsp+0x30],ebx
 10091d8:	mov    rax,QWORD PTR [rsp+0xc8]
 10091e0:	mov    QWORD PTR [rsp+0x28],rax
 10091e5:	mov    eax,DWORD PTR [rsp+0xdc]
 10091ec:	mov    DWORD PTR [rsp+0x20],eax
 10091f0:	mov    ebx,DWORD PTR [rsp+0xe0]
 10091f7:	mov    r9d,ebx
 10091fa:	xor    r8d,r8d
 10091fd:	lea    rdx,[rip+0xffffffffffffbb18]        # 0x1004d1c
 1009204:	lea    rcx,[rip+0x12575]        # 0x101b780
 100920b:	call   0x100af10
 1009210:	mov    r8d,DWORD PTR [rsp+0xc0]
 1009218:	lea    rdx,[rip+0xffffffffffffb4f1]        # 0x1004710
 100921f:	lea    rcx,[rip+0x1255a]        # 0x101b780
 1009226:	call   0x100b470
 100922b:	mov    edx,ebx
 100922d:	lea    rcx,[rip+0x1254c]        # 0x101b780
 1009234:	call   0x100b150
 1009239:	lea    r11,[rsp+0x100]
 1009241:	mov    rbx,QWORD PTR [r11+0x10]
 1009245:	mov    rsi,QWORD PTR [r11+0x20]
 1009249:	mov    rdi,QWORD PTR [r11+0x28]
 100924d:	mov    rsp,r11
 1009250:	pop    r14
 1009252:	ret    
 1009253:	int3   
 1009254:	int3   
 1009255:	int3   
 1009256:	int3   
 1009257:	int3   
 1009258:	int3   
 1009259:	int3   
 100925a:	int3   
 100925b:	int3   
 100925c:	int3   
 100925d:	int3   
 100925e:	int3   
 100925f:	int3   
 1009260:	mov    r11,rsp
 1009263:	mov    QWORD PTR [r11+0x8],rcx
 1009267:	push   rsi
 1009268:	push   rdi
 1009269:	push   r14
 100926b:	sub    rsp,0x350
 1009272:	mov    QWORD PTR [r11-0x110],0xfffffffffffffffe
 100927d:	mov    QWORD PTR [r11+0x20],rbx
 1009281:	mov    rdi,rcx
 1009284:	lea    rax,[r11-0x188]
 100928b:	mov    QWORD PTR [r11+0x10],rax
 100928f:	lea    rsi,[rip+0xffffffffffffbefa]        # 0x1005190
 1009296:	mov    QWORD PTR [r11-0x188],rsi
 100929d:	lea    r14,[rip+0xffffffffffffb50c]        # 0x10047b0
 10092a4:	mov    QWORD PTR [r11-0x180],r14
 10092ab:	mov    DWORD PTR [rsp+0x1f0],0x25a
 10092b6:	mov    QWORD PTR [r11-0x174],0x200
 10092c1:	xor    ebx,ebx
 10092c3:	mov    DWORD PTR [rsp+0x250],0x1000000
 10092ce:	mov    QWORD PTR [r11-0x168],rbx
 10092d5:	mov    QWORD PTR [r11-0x160],rbx
 10092dc:	mov    QWORD PTR [r11-0x158],rbx
 10092e3:	mov    QWORD PTR [r11-0x150],rbx
 10092ea:	mov    QWORD PTR [r11-0x148],rbx
 10092f1:	mov    QWORD PTR [r11-0x140],rbx
 10092f8:	mov    QWORD PTR [r11-0x138],rbx
 10092ff:	mov    QWORD PTR [r11-0x130],rbx
 1009306:	mov    QWORD PTR [r11-0x128],rbx
 100930d:	mov    QWORD PTR [r11-0x120],rbx
 1009314:	lea    r8,[rip+0xffffffffffffc605]        # 0x1005920
 100931b:	lea    rdx,[r11-0x188]
 1009322:	lea    rcx,[rsp+0x48]
 1009327:	call   0x10060d0
 100932c:	nop
 100932d:	lea    rcx,[rip+0x280c]        # 0x100bb40
 1009334:	call   QWORD PTR [rip+0xffffffffffff7f76]        # 0x10012b0
 100933a:	nop
 100933b:	lea    rdx,[rsp+0x260]
 1009343:	mov    QWORD PTR [rsp+0x378],rdx
 100934b:	mov    QWORD PTR [rsp+0x260],rsi
 1009353:	mov    QWORD PTR [rsp+0x268],r14
 100935b:	mov    DWORD PTR [rsp+0x270],0x25f
 1009366:	mov    QWORD PTR [rsp+0x274],0x200
 1009372:	mov    DWORD PTR [rsp+0x2d0],0x1000000
 100937d:	movzx  ecx,bx
 1009380:	mov    WORD PTR [rsp+0x40],bx
 1009385:	cmp    cx,0xa
 1009389:	jae    0x100939d
 100938b:	movzx  eax,cx
 100938e:	mov    QWORD PTR [rdx+rax*8+0x20],rbx
 1009393:	inc    cx
 1009396:	mov    WORD PTR [rsp+0x40],cx
 100939b:	jmp    0x1009385
 100939d:	lea    r8,[rip+0xffffffffffffc5cc]        # 0x1005970
 10093a4:	lea    rcx,[rsp+0x48]
 10093a9:	call   0x1006240
 10093ae:	cmp    QWORD PTR [rdi+0x38],0x0
 10093b3:	je     0x1009470
 10093b9:	mov    BYTE PTR [rdi+0x30],0x1
 10093bd:	mov    rcx,QWORD PTR [rdi+0x38]
 10093c1:	call   QWORD PTR [rip+0xffffffffffff7e69]        # 0x1001230
 10093c7:	test   eax,eax
 10093c9:	jne    0x1009470
 10093cf:	lea    rdi,[rsp+0x2d8]
 10093d7:	mov    QWORD PTR [rsp+0x380],rdi
 10093df:	mov    QWORD PTR [rsp+0x2d8],rsi
 10093e7:	mov    QWORD PTR [rsp+0x2e0],r14
 10093ef:	mov    DWORD PTR [rsp+0x2e8],0x26a
 10093fa:	mov    QWORD PTR [rsp+0x2ec],0x200
 1009406:	mov    DWORD PTR [rsp+0x348],0x1000000
 1009411:	movzx  ecx,bx
 1009414:	mov    WORD PTR [rsp+0x44],bx
 1009419:	nop    DWORD PTR [rax+0x0]
 1009420:	cmp    cx,0xa
 1009424:	jae    0x1009438
 1009426:	movzx  eax,cx
 1009429:	mov    QWORD PTR [rdi+rax*8+0x20],rbx
 100942e:	inc    cx
 1009431:	mov    WORD PTR [rsp+0x44],cx
 1009436:	jmp    0x1009420
 1009438:	call   QWORD PTR [rip+0xffffffffffff7e3a]        # 0x1001278
 100943e:	mov    ebx,eax
 1009440:	test   eax,eax
 1009442:	jle    0x100944d
 1009444:	movzx  ebx,ax
 1009447:	or     ebx,0x80070000
 100944d:	call   QWORD PTR [rip+0xffffffffffff7e25]        # 0x1001278
 1009453:	nop
 1009454:	mov    DWORD PTR [rsp+0x20],eax
 1009458:	lea    r9,[rip+0xffffffffffffc561]        # 0x10059c0
 100945f:	mov    r8d,ebx
 1009462:	mov    rdx,rdi
 1009465:	lea    rcx,[rsp+0x48]
 100946a:	call   0x1006e50
 100946f:	nop
 1009470:	jmp    0x100947c
 1009472:	mov    rdi,QWORD PTR [rsp+0x370]
 100947a:	xor    ebx,ebx
 100947c:	mov    esi,DWORD PTR [rsp+0x48]
 1009480:	test   esi,esi
 1009482:	jns    0x100949e
 1009484:	jmp    0x1009494
 1009486:	xor    ebx,ebx
 1009488:	mov    rdi,QWORD PTR [rsp+0x370]
 1009490:	mov    esi,DWORD PTR [rsp+0x48]
 1009494:	mov    DWORD PTR [rdi+0x1c],0x42a
 100949b:	mov    DWORD PTR [rdi+0x20],esi
 100949e:	cmp    DWORD PTR [rip+0x122db],0x0        # 0x101b780
 10094a5:	je     0x1009507
 10094a7:	cmp    DWORD PTR [rip+0x122f2],0x0        # 0x101b7a0
 10094ae:	je     0x1009507
 10094b0:	mov    DWORD PTR [rsp+0x30],ebx
 10094b4:	mov    rax,QWORD PTR [rsp+0x50]
 10094b9:	mov    QWORD PTR [rsp+0x28],rax
 10094be:	mov    eax,DWORD PTR [rsp+0x64]
 10094c2:	mov    DWORD PTR [rsp+0x20],eax
 10094c6:	mov    ebx,DWORD PTR [rsp+0x68]
 10094ca:	mov    r9d,ebx
 10094cd:	xor    r8d,r8d
 10094d0:	lea    rdx,[rip+0xffffffffffffb845]        # 0x1004d1c
 10094d7:	lea    rcx,[rip+0x122a2]        # 0x101b780
 10094de:	call   0x100af10
 10094e3:	mov    r8d,esi
 10094e6:	lea    rdx,[rip+0xffffffffffffb223]        # 0x1004710
 10094ed:	lea    rcx,[rip+0x1228c]        # 0x101b780
 10094f4:	call   0x100b470
 10094f9:	mov    edx,ebx
 10094fb:	lea    rcx,[rip+0x1227e]        # 0x101b780
 1009502:	call   0x100b150
 1009507:	mov    rbx,QWORD PTR [rsp+0x388]
 100950f:	add    rsp,0x350
 1009516:	pop    r14
 1009518:	pop    rdi
 1009519:	pop    rsi
 100951a:	ret    
 100951b:	int3   
 100951c:	int3   
 100951d:	int3   
 100951e:	int3   
 100951f:	int3   
 1009520:	int3   
 1009521:	int3   
 1009522:	int3   
 1009523:	int3   
 1009524:	int3   
 1009525:	int3   
 1009526:	int3   
 1009527:	int3   
 1009528:	int3   
 1009529:	int3   
 100952a:	int3   
 100952b:	int3   
 100952c:	int3   
 100952d:	int3   
 100952e:	int3   
 100952f:	int3   
 1009530:	rex push rbx
 1009532:	sub    rsp,0x40
 1009536:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100953f:	xor    r8d,r8d
 1009542:	mov    ebx,0x1
 1009547:	mov    edx,ebx
 1009549:	lea    rcx,[rsp+0x28]
 100954e:	call   0x100fa40
 1009553:	nop
 1009554:	lea    r8,[rip+0xffffffffffffb755]        # 0x1004cb0
 100955b:	mov    rdx,0xffffffff80000002
 1009562:	lea    rcx,[rsp+0x28]
 1009567:	call   0x100fab0
 100956c:	test   al,al
 100956e:	jne    0x1009572
 1009570:	jmp    0x10095ad
 1009572:	mov    DWORD PTR [rsp+0x50],0x0
 100957a:	xor    r9d,r9d
 100957d:	lea    r8,[rsp+0x50]
 1009582:	lea    rdx,[rip+0xffffffffffffb707]        # 0x1004c90
 1009589:	lea    rcx,[rsp+0x28]
 100958e:	call   0x100feb0
 1009593:	test   al,al
 1009595:	jne    0x1009599
 1009597:	jmp    0x10095ad
 1009599:	mov    eax,DWORD PTR [rip+0x14e35]        # 0x101e3d4
 100959f:	cmp    DWORD PTR [rsp+0x50],0x0
 10095a4:	cmovne eax,ebx
 10095a7:	mov    DWORD PTR [rip+0x14e27],eax        # 0x101e3d4
 10095ad:	lea    rcx,[rsp+0x28]
 10095b2:	call   0x100fa70
 10095b7:	add    rsp,0x40
 10095bb:	pop    rbx
 10095bc:	ret    
 10095bd:	int3   
 10095be:	int3   
 10095bf:	int3   
 10095c0:	int3   
 10095c1:	int3   
 10095c2:	int3   
 10095c3:	int3   
 10095c4:	int3   
 10095c5:	int3   
 10095c6:	int3   
 10095c7:	int3   
 10095c8:	int3   
 10095c9:	int3   
 10095ca:	int3   
 10095cb:	int3   
 10095cc:	int3   
 10095cd:	int3   
 10095ce:	int3   
 10095cf:	int3   
 10095d0:	rex push rbx
 10095d2:	sub    rsp,0x40
 10095d6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10095df:	xor    r8d,r8d
 10095e2:	mov    ebx,0x1
 10095e7:	mov    edx,ebx
 10095e9:	lea    rcx,[rsp+0x28]
 10095ee:	call   0x100fa40
 10095f3:	nop
 10095f4:	lea    r8,[rip+0xffffffffffffb6b5]        # 0x1004cb0
 10095fb:	mov    rdx,0xffffffff80000002
 1009602:	lea    rcx,[rsp+0x28]
 1009607:	call   0x100fab0
 100960c:	test   al,al
 100960e:	jne    0x1009612
 1009610:	jmp    0x100964d
 1009612:	mov    DWORD PTR [rsp+0x50],0x0
 100961a:	xor    r9d,r9d
 100961d:	lea    r8,[rsp+0x50]
 1009622:	lea    rdx,[rip+0xffffffffffffb63f]        # 0x1004c68
 1009629:	lea    rcx,[rsp+0x28]
 100962e:	call   0x100feb0
 1009633:	test   al,al
 1009635:	jne    0x1009639
 1009637:	jmp    0x100964d
 1009639:	mov    eax,DWORD PTR [rip+0x14d91]        # 0x101e3d0
 100963f:	cmp    DWORD PTR [rsp+0x50],0x0
 1009644:	cmovne eax,ebx
 1009647:	mov    DWORD PTR [rip+0x14d83],eax        # 0x101e3d0
 100964d:	lea    rcx,[rsp+0x28]
 1009652:	call   0x100fa70
 1009657:	add    rsp,0x40
 100965b:	pop    rbx
 100965c:	ret    
 100965d:	int3   
 100965e:	int3   
 100965f:	int3   
 1009660:	int3   
 1009661:	int3   
 1009662:	int3   
 1009663:	int3   
 1009664:	int3   
 1009665:	int3   
 1009666:	int3   
 1009667:	int3   
 1009668:	int3   
 1009669:	int3   
 100966a:	int3   
 100966b:	int3   
 100966c:	int3   
 100966d:	int3   
 100966e:	int3   
 100966f:	int3   
 1009670:	movzx  r8d,WORD PTR [rcx]
 1009674:	mov    r9,rcx
 1009677:	test   r8w,r8w
 100967b:	je     0x10096b2
 100967d:	movzx  r10d,WORD PTR [rdx]
 1009681:	mov    rax,rdx
 1009684:	test   r10w,r10w
 1009688:	je     0x10096a3
 100968a:	nop    WORD PTR [rax+rax*1+0x0]
 1009690:	movzx  ecx,WORD PTR [rax]
 1009693:	add    rax,0x2
 1009697:	cmp    r8w,cx
 100969b:	je     0x10096b5
 100969d:	cmp    WORD PTR [rax],0x0
 10096a1:	jne    0x1009690
 10096a3:	movzx  r8d,WORD PTR [r9+0x2]
 10096a8:	add    r9,0x2
 10096ac:	test   r8w,r8w
 10096b0:	jne    0x1009681
 10096b2:	xor    eax,eax
 10096b4:	ret    
 10096b5:	lea    rax,[r9+0x2]
 10096b9:	ret    
 10096ba:	int3   
 10096bb:	int3   
 10096bc:	int3   
 10096bd:	int3   
 10096be:	int3   
 10096bf:	int3   
 10096c0:	jmp    0x10096d0
 10096c5:	int3   
 10096c6:	int3   
 10096c7:	int3   
 10096c8:	int3   
 10096c9:	int3   
 10096ca:	int3   
 10096cb:	int3   
 10096cc:	int3   
 10096cd:	int3   
 10096ce:	int3   
 10096cf:	int3   
 10096d0:	mov    r11,rsp
 10096d3:	push   r15
 10096d5:	sub    rsp,0x120
 10096dc:	mov    QWORD PTR [r11-0x28],0xfffffffffffffffe
 10096e4:	mov    QWORD PTR [r11+0x8],rbx
 10096e8:	mov    QWORD PTR [r11+0x10],rsi
 10096ec:	mov    QWORD PTR [r11+0x18],rdi
 10096f0:	mov    QWORD PTR [r11+0x20],r14
 10096f4:	mov    rax,QWORD PTR [rip+0x11a35]        # 0x101b130
 10096fb:	xor    rax,rsp
 10096fe:	mov    QWORD PTR [rsp+0x110],rax
 1009706:	lea    rax,[rip+0x11a63]        # 0x101b170
 100970d:	mov    QWORD PTR [rsp+0xf0],rax
 1009715:	lea    rax,[rsp+0x48]
 100971a:	mov    QWORD PTR [r11-0x20],rax
 100971e:	lea    r14,[rip+0xffffffffffffba6b]        # 0x1005190
 1009725:	mov    QWORD PTR [rsp+0x48],r14
 100972a:	lea    r15,[rip+0xffffffffffffb07f]        # 0x10047b0
 1009731:	mov    QWORD PTR [rsp+0x50],r15
 1009736:	mov    DWORD PTR [rsp+0x58],0x2fc
 100973e:	mov    QWORD PTR [rsp+0x5c],0x200
 1009747:	xor    ebx,ebx
 1009749:	mov    DWORD PTR [r11-0x70],0x1000000
 1009751:	mov    QWORD PTR [rsp+0x68],rbx
 1009756:	mov    QWORD PTR [rsp+0x70],rbx
 100975b:	mov    QWORD PTR [rsp+0x78],rbx
 1009760:	mov    QWORD PTR [r11-0xa8],rbx
 1009767:	mov    QWORD PTR [r11-0xa0],rbx
 100976e:	mov    QWORD PTR [r11-0x98],rbx
 1009775:	mov    QWORD PTR [r11-0x90],rbx
 100977c:	mov    QWORD PTR [r11-0x88],rbx
 1009783:	mov    QWORD PTR [r11-0x80],rbx
 1009787:	mov    QWORD PTR [r11-0x78],rbx
 100978b:	lea    r8,[rip+0xffffffffffffc286]        # 0x1005a18
 1009792:	lea    rdx,[rsp+0x48]
 1009797:	lea    rcx,[r11-0x60]
 100979b:	call   0x10060d0
 10097a0:	nop
 10097a1:	lea    rcx,[rip+0x2398]        # 0x100bb40
 10097a8:	call   QWORD PTR [rip+0xffffffffffff7b02]        # 0x10012b0
 10097ae:	nop
 10097af:	call   QWORD PTR [rip+0xffffffffffff7a73]        # 0x1001228
 10097b5:	mov    rdi,rax
 10097b8:	lea    rdx,[rsp+0x48]
 10097bd:	mov    QWORD PTR [rsp+0x108],rdx
 10097c5:	mov    QWORD PTR [rsp+0x48],r14
 10097ca:	mov    QWORD PTR [rsp+0x50],r15
 10097cf:	mov    DWORD PTR [rsp+0x58],0x302
 10097d7:	mov    QWORD PTR [rsp+0x5c],0x200
 10097e0:	mov    DWORD PTR [rsp+0xb8],0x1000000
 10097eb:	movzx  ecx,bx
 10097ee:	mov    WORD PTR [rsp+0x40],bx
 10097f3:	cmp    cx,0xa
 10097f7:	jae    0x100980b
 10097f9:	movzx  eax,cx
 10097fc:	mov    QWORD PTR [rdx+rax*8+0x20],rbx
 1009801:	inc    cx
 1009804:	mov    WORD PTR [rsp+0x40],cx
 1009809:	jmp    0x10097f3
 100980b:	mov    r9,rdi
 100980e:	lea    r8,[rip+0xffffffffffffc23b]        # 0x1005a50
 1009815:	lea    rcx,[rsp+0xc8]
 100981d:	call   0x1006240
 1009822:	mov    eax,DWORD PTR [rip+0xffffffffffffc264]        # 0x1005a8c
 1009828:	mov    DWORD PTR [rsp+0x108],eax
 100982f:	movzx  eax,WORD PTR [rip+0xffffffffffffc25a]        # 0x1005a90
 1009836:	mov    WORD PTR [rsp+0x10c],ax
 100983e:	lea    rdx,[rsp+0x108]
 1009846:	mov    rcx,rdi
 1009849:	call   0x1009670
 100984e:	mov    rdi,rax
 1009851:	mov    DWORD PTR [rip+0x14b71],ebx        # 0x101e3c8
 1009857:	mov    DWORD PTR [rip+0x14b6f],ebx        # 0x101e3cc
 100985d:	mov    esi,0x1
 1009862:	test   rdi,rdi
 1009865:	je     0x1009914
 100986b:	lea    rdx,[rsp+0x48]
 1009870:	mov    QWORD PTR [rsp+0xc0],rdx
 1009878:	mov    QWORD PTR [rsp+0x48],r14
 100987d:	mov    QWORD PTR [rsp+0x50],r15
 1009882:	mov    DWORD PTR [rsp+0x58],0x315
 100988a:	mov    QWORD PTR [rsp+0x5c],0x200
 1009893:	mov    DWORD PTR [rsp+0xb8],0x1000000
 100989e:	movzx  eax,bx
 10098a1:	mov    WORD PTR [rsp+0x44],bx
 10098a6:	cmp    ax,0xa
 10098aa:	jae    0x10098be
 10098ac:	movzx  ecx,ax
 10098af:	mov    QWORD PTR [rdx+rcx*8+0x20],rbx
 10098b4:	inc    ax
 10098b7:	mov    WORD PTR [rsp+0x44],ax
 10098bc:	jmp    0x10098a6
 10098be:	mov    r9,rdi
 10098c1:	lea    r8,[rip+0xffffffffffffc1d0]        # 0x1005a98
 10098c8:	lea    rcx,[rsp+0xc8]
 10098d0:	call   0x1006240
 10098d5:	movzx  r11d,WORD PTR [rdi]
 10098d9:	cmp    r11w,0x63
 10098de:	jne    0x10098e8
 10098e0:	mov    DWORD PTR [rip+0x14ae2],esi        # 0x101e3c8
 10098e6:	jmp    0x10098fc
 10098e8:	mov    eax,DWORD PTR [rip+0x14ade]        # 0x101e3cc
 10098ee:	cmp    r11w,0x77
 10098f3:	cmove  eax,esi
 10098f6:	mov    DWORD PTR [rip+0x14ad0],eax        # 0x101e3cc
 10098fc:	lea    rdx,[rsp+0x108]
 1009904:	mov    rcx,rdi
 1009907:	call   0x1009670
 100990c:	mov    rdi,rax
 100990f:	jmp    0x1009862
 1009914:	mov    r8d,DWORD PTR [rip+0x14ab1]        # 0x101e3cc
 100991b:	xor    edx,edx
 100991d:	lea    rcx,[rip+0x11e5c]        # 0x101b780
 1009924:	call   0x100aa40
 1009929:	call   0x10078c0
 100992e:	nop
 100992f:	jmp    0x1009933
 1009931:	xor    ebx,ebx
 1009933:	mov    rax,QWORD PTR [rsp+0xf0]
 100993b:	mov    edi,DWORD PTR [rax+0x1c]
 100993e:	cmp    DWORD PTR [rip+0x11e3b],0x0        # 0x101b780
 1009945:	je     0x10099b5
 1009947:	cmp    DWORD PTR [rip+0x11e52],0x0        # 0x101b7a0
 100994e:	je     0x10099b5
 1009950:	mov    DWORD PTR [rsp+0x30],ebx
 1009954:	mov    rax,QWORD PTR [rsp+0xd0]
 100995c:	mov    QWORD PTR [rsp+0x28],rax
 1009961:	mov    edx,DWORD PTR [rsp+0xe4]
 1009968:	mov    DWORD PTR [rsp+0x20],edx
 100996c:	mov    ebx,DWORD PTR [rsp+0xe8]
 1009973:	mov    r9d,ebx
 1009976:	xor    r8d,r8d
 1009979:	lea    rdx,[rip+0xffffffffffffb39c]        # 0x1004d1c
 1009980:	lea    rcx,[rip+0x11df9]        # 0x101b780
 1009987:	call   0x100af10
 100998c:	mov    r8d,DWORD PTR [rsp+0xc8]
 1009994:	lea    rdx,[rip+0xffffffffffffad75]        # 0x1004710
 100999b:	lea    rcx,[rip+0x11dde]        # 0x101b780
 10099a2:	call   0x100b470
 10099a7:	mov    edx,ebx
 10099a9:	lea    rcx,[rip+0x11dd0]        # 0x101b780
 10099b0:	call   0x100b150
 10099b5:	mov    eax,edi
 10099b7:	mov    rcx,QWORD PTR [rsp+0x110]
 10099bf:	xor    rcx,rsp
 10099c2:	call   0x1009d50
 10099c7:	lea    r11,[rsp+0x120]
 10099cf:	mov    rbx,QWORD PTR [r11+0x10]
 10099d3:	mov    rsi,QWORD PTR [r11+0x18]
 10099d7:	mov    rdi,QWORD PTR [r11+0x20]
 10099db:	mov    r14,QWORD PTR [r11+0x28]
 10099df:	mov    rsp,r11
 10099e2:	pop    r15
 10099e4:	ret    
 10099e5:	int3   
 10099e6:	int3   
 10099e7:	int3   
 10099e8:	int3   
 10099e9:	int3   
 10099ea:	int3   
 10099eb:	int3   
 10099ec:	mov    QWORD PTR [rsp+0x8],rbx
 10099f1:	mov    QWORD PTR [rsp+0x10],rdi
 10099f6:	push   rbp
 10099f7:	mov    rbp,rsp
 10099fa:	sub    rsp,0x20
 10099fe:	mov    rdi,rcx
 1009a01:	jmp    0x1009a12
 1009a03:	mov    rcx,rdi
 1009a06:	call   0x1009f44
 1009a0b:	test   eax,eax
 1009a0d:	je     0x1009a1f
 1009a0f:	mov    rcx,rdi
 1009a12:	call   0x1009f38
 1009a17:	mov    rbx,rax
 1009a1a:	test   rax,rax
 1009a1d:	je     0x1009a03
 1009a1f:	mov    rdi,QWORD PTR [rsp+0x38]
 1009a24:	mov    rax,rbx
 1009a27:	mov    rbx,QWORD PTR [rsp+0x30]
 1009a2c:	add    rsp,0x20
 1009a30:	pop    rbp
 1009a31:	ret    
 1009a32:	int3   
 1009a33:	int3   
 1009a34:	int3   
 1009a35:	int3   
 1009a36:	int3   
 1009a37:	int3   
 1009a38:	rex push rbp
 1009a3a:	mov    rbp,rsp
 1009a3d:	sub    rsp,0x20
 1009a41:	add    rsp,0x20
 1009a45:	pop    rbp
 1009a46:	jmp    0x10099ec
 1009a4b:	int3   
 1009a4c:	int3   
 1009a4d:	int3   
 1009a4e:	int3   
 1009a4f:	int3   
 1009a50:	int3   
 1009a51:	int3   
 1009a52:	int3   
 1009a53:	int3   
 1009a54:	sub    rsp,0x38
 1009a58:	lea    rcx,[rip+0x67d]        # 0x100a0dc
 1009a5f:	call   0x100a07c
 1009a64:	mov    r11d,DWORD PTR [rip+0x11cf9]        # 0x101b764
 1009a6b:	mov    r9d,DWORD PTR [rip+0x11cee]        # 0x101b760
 1009a72:	lea    rax,[rip+0x11763]        # 0x101b1dc
 1009a79:	lea    r8,[rip+0x11748]        # 0x101b1c8
 1009a80:	lea    rdx,[rip+0x11749]        # 0x101b1d0
 1009a87:	lea    rcx,[rip+0x11732]        # 0x101b1c0
 1009a8e:	mov    DWORD PTR [rip+0x11747],r11d        # 0x101b1dc
 1009a95:	mov    QWORD PTR [rsp+0x20],rax
 1009a9a:	call   QWORD PTR [rip+0xffffffffffff7838]        # 0x10012d8
 1009aa0:	mov    DWORD PTR [rip+0x11732],eax        # 0x101b1d8
 1009aa6:	test   eax,eax
 1009aa8:	jns    0x1009ab4
 1009aaa:	mov    ecx,0x8
 1009aaf:	call   0x1009fb6
 1009ab4:	add    rsp,0x38
 1009ab8:	ret    
 1009ab9:	int3   
 1009aba:	int3   
 1009abb:	int3   
 1009abc:	int3   
 1009abd:	int3   
 1009abe:	int3   
 1009abf:	int3   
 1009ac0:	mov    QWORD PTR [rsp+0x8],rbx
 1009ac5:	push   rdi
 1009ac6:	sub    rsp,0x20
 1009aca:	mov    rax,QWORD PTR gs:0x30
 1009ad3:	mov    rbx,QWORD PTR [rax+0x8]
 1009ad7:	xor    edi,edi
 1009ad9:	xor    eax,eax
 1009adb:	lock cmpxchg QWORD PTR [rip+0x148fc],rbx        # 0x101e3e0
 1009ae4:	je     0x1009b01
 1009ae6:	cmp    rax,rbx
 1009ae9:	jne    0x1009af4
 1009aeb:	mov    ebx,0x1
 1009af0:	mov    edi,ebx
 1009af2:	jmp    0x1009b06
 1009af4:	mov    ecx,0x3e8
 1009af9:	call   QWORD PTR [rip+0xffffffffffff7711]        # 0x1001210
 1009aff:	jmp    0x1009ad9
 1009b01:	mov    ebx,0x1
 1009b06:	mov    eax,DWORD PTR [rip+0x148d0]        # 0x101e3dc
 1009b0c:	cmp    eax,ebx
 1009b0e:	jne    0x1009b1c
 1009b10:	mov    ecx,0x1f
 1009b15:	call   0x1009fb6
 1009b1a:	jmp    0x1009b53
 1009b1c:	mov    eax,DWORD PTR [rip+0x148ba]        # 0x101e3dc
 1009b22:	test   eax,eax
 1009b24:	jne    0x1009b4d
 1009b26:	mov    DWORD PTR [rip+0x148b0],ebx        # 0x101e3dc
 1009b2c:	lea    rdx,[rip+0xffffffffffff794d]        # 0x1001480
 1009b33:	lea    rcx,[rip+0xffffffffffff792e]        # 0x1001468
 1009b3a:	call   0x100a224
 1009b3f:	test   eax,eax
 1009b41:	je     0x1009b53
 1009b43:	mov    eax,0xff
 1009b48:	jmp    0x1009c35
 1009b4d:	mov    DWORD PTR [rip+0x11691],ebx        # 0x101b1e4
 1009b53:	mov    eax,DWORD PTR [rip+0x14883]        # 0x101e3dc
 1009b59:	cmp    eax,ebx
 1009b5b:	jne    0x1009b7a
 1009b5d:	lea    rdx,[rip+0xffffffffffff78fc]        # 0x1001460
 1009b64:	lea    rcx,[rip+0xffffffffffff78d5]        # 0x1001440
 1009b6b:	call   0x100a218
 1009b70:	mov    DWORD PTR [rip+0x14862],0x2        # 0x101e3dc
 1009b7a:	test   edi,edi
 1009b7c:	jne    0x1009b87
 1009b7e:	xor    eax,eax
 1009b80:	xchg   QWORD PTR [rip+0x14859],rax        # 0x101e3e0
 1009b87:	cmp    QWORD PTR [rip+0x14869],0x0        # 0x101e3f8
 1009b8f:	je     0x1009bb0
 1009b91:	lea    rcx,[rip+0x14860]        # 0x101e3f8
 1009b98:	call   0x100a1d0
 1009b9d:	test   eax,eax
 1009b9f:	je     0x1009bb0
 1009ba1:	xor    r8d,r8d
 1009ba4:	lea    edx,[r8+0x2]
 1009ba8:	xor    ecx,ecx
 1009baa:	call   QWORD PTR [rip+0x14848]        # 0x101e3f8
 1009bb0:	mov    rcx,QWORD PTR [rip+0xffffffffffff7751]        # 0x1001308
 1009bb7:	mov    rax,QWORD PTR [rip+0x1160a]        # 0x101b1c8
 1009bbe:	mov    QWORD PTR [rcx],rax
 1009bc1:	mov    r8,QWORD PTR [rip+0x11600]        # 0x101b1c8
 1009bc8:	mov    rdx,QWORD PTR [rip+0x11601]        # 0x101b1d0
 1009bcf:	mov    ecx,DWORD PTR [rip+0x115eb]        # 0x101b1c0
 1009bd5:	call   0x10096c0
 1009bda:	mov    DWORD PTR [rip+0x11600],eax        # 0x101b1e0
 1009be0:	cmp    DWORD PTR [rip+0x115dd],0x0        # 0x101b1c4
 1009be7:	jne    0x1009bf1
 1009be9:	mov    ecx,eax
 1009beb:	call   QWORD PTR [rip+0xffffffffffff770f]        # 0x1001300
 1009bf1:	cmp    DWORD PTR [rip+0x115ec],0x0        # 0x101b1e4
 1009bf8:	jne    0x1009c06
 1009bfa:	call   QWORD PTR [rip+0xffffffffffff76f8]        # 0x10012f8
 1009c00:	mov    eax,DWORD PTR [rip+0x115da]        # 0x101b1e0
 1009c06:	jmp    0x1009c35
 1009c08:	mov    DWORD PTR [rip+0x115d2],eax        # 0x101b1e0
 1009c0e:	cmp    DWORD PTR [rip+0x115af],0x0        # 0x101b1c4
 1009c15:	jne    0x1009c20
 1009c17:	mov    ecx,eax
 1009c19:	call   QWORD PTR [rip+0xffffffffffff76d1]        # 0x10012f0
 1009c1f:	int3   
 1009c20:	cmp    DWORD PTR [rip+0x115bd],0x0        # 0x101b1e4
 1009c27:	jne    0x1009c35
 1009c29:	call   QWORD PTR [rip+0xffffffffffff76c9]        # 0x10012f8
 1009c2f:	mov    eax,DWORD PTR [rip+0x115ab]        # 0x101b1e0
 1009c35:	mov    rbx,QWORD PTR [rsp+0x30]
 1009c3a:	add    rsp,0x20
 1009c3e:	pop    rdi
 1009c3f:	ret    
 1009c40:	int3   
 1009c41:	int3   
 1009c42:	int3   
 1009c43:	int3   
 1009c44:	int3   
 1009c45:	int3   
 1009c46:	int3   
 1009c47:	int3   
 1009c48:	sub    rsp,0x28
 1009c4c:	mov    eax,0x5a4d
 1009c51:	cmp    WORD PTR [rip+0xffffffffffff63a8],ax        # 0x1000000
 1009c58:	je     0x1009c5e
 1009c5a:	xor    ecx,ecx
 1009c5c:	jmp    0x1009c96
 1009c5e:	movsxd rax,DWORD PTR [rip+0xffffffffffff63d7]        # 0x100003c
 1009c65:	lea    rcx,[rip+0xffffffffffff6394]        # 0x1000000
 1009c6c:	add    rax,rcx
 1009c6f:	cmp    DWORD PTR [rax],0x4550
 1009c75:	jne    0x1009c5a
 1009c77:	mov    ecx,0x20b
 1009c7c:	cmp    WORD PTR [rax+0x18],cx
 1009c80:	jne    0x1009c5a
 1009c82:	xor    ecx,ecx
 1009c84:	cmp    DWORD PTR [rax+0x84],0xe
 1009c8b:	jbe    0x1009c96
 1009c8d:	cmp    DWORD PTR [rax+0xf8],ecx
 1009c93:	setne  cl
 1009c96:	mov    DWORD PTR [rip+0x11528],ecx        # 0x101b1c4
 1009c9c:	mov    ecx,0x1
 1009ca1:	call   QWORD PTR [rip+0xffffffffffff7699]        # 0x1001340
 1009ca7:	or     rcx,0xffffffffffffffff
 1009cab:	call   QWORD PTR [rip+0xffffffffffff7557]        # 0x1001208
 1009cb1:	mov    rcx,QWORD PTR [rip+0xffffffffffff7680]        # 0x1001338
 1009cb8:	mov    QWORD PTR [rip+0x14729],rax        # 0x101e3e8
 1009cbf:	mov    QWORD PTR [rip+0x1472a],rax        # 0x101e3f0
 1009cc6:	mov    eax,DWORD PTR [rip+0x11aa0]        # 0x101b76c
 1009ccc:	mov    DWORD PTR [rcx],eax
 1009cce:	mov    rdx,QWORD PTR [rip+0xffffffffffff765b]        # 0x1001330
 1009cd5:	mov    eax,DWORD PTR [rip+0x11a8d]        # 0x101b768
 1009cdb:	mov    DWORD PTR [rdx],eax
 1009cdd:	call   0x100a09c
 1009ce2:	call   0x100a23c
 1009ce7:	cmp    DWORD PTR [rip+0x1143e],0x0        # 0x101b12c
 1009cee:	jne    0x1009cfd
 1009cf0:	lea    rcx,[rip+0x539]        # 0x100a230
 1009cf7:	call   QWORD PTR [rip+0xffffffffffff762b]        # 0x1001328
 1009cfd:	cmp    DWORD PTR [rip+0x11424],0xffffffff        # 0x101b128
 1009d04:	jne    0x1009d0f
 1009d06:	or     ecx,0xffffffff
 1009d09:	call   QWORD PTR [rip+0xffffffffffff7611]        # 0x1001320
 1009d0f:	xor    eax,eax
 1009d11:	add    rsp,0x28
 1009d15:	ret    
 1009d16:	int3   
 1009d17:	int3   
 1009d18:	int3   
 1009d19:	int3   
 1009d1a:	int3   
 1009d1b:	int3   
 1009d1c:	sub    rsp,0x28
 1009d20:	call   0x100a248
 1009d25:	add    rsp,0x28
 1009d29:	jmp    0x1009ac0
 1009d2e:	int3   
 1009d2f:	int3   
 1009d30:	int3   
 1009d31:	int3   
 1009d32:	int3   
 1009d33:	int3   
 1009d34:	jmp    QWORD PTR [rip+0xffffffffffff755e]        # 0x1001298
 1009d3a:	int3   
 1009d3b:	int3   
 1009d3c:	int3   
 1009d3d:	int3   
 1009d3e:	int3   
 1009d3f:	int3   
 1009d40:	int3   
 1009d41:	int3   
 1009d42:	int3   
 1009d43:	int3   
 1009d44:	int3   
 1009d45:	int3   
 1009d46:	data16 nop WORD PTR [rax+rax*1+0x0]
 1009d50:	cmp    rcx,QWORD PTR [rip+0x113d9]        # 0x101b130
 1009d57:	jne    0x1009d6a
 1009d59:	rol    rcx,0x10
 1009d5d:	test   cx,0xffff
 1009d62:	jne    0x1009d66
 1009d64:	repz ret 
 1009d66:	ror    rcx,0x10
 1009d6a:	jmp    0x1009d78
 1009d6f:	int3   
 1009d70:	int3   
 1009d71:	int3   
 1009d72:	int3   
 1009d73:	int3   
 1009d74:	int3   
 1009d75:	int3   
 1009d76:	int3   
 1009d77:	int3   
 1009d78:	mov    QWORD PTR [rsp+0x8],rcx
 1009d7d:	sub    rsp,0x88
 1009d84:	lea    rcx,[rip+0x11505]        # 0x101b290
 1009d8b:	call   QWORD PTR [rip+0xffffffffffff7667]        # 0x10013f8
 1009d91:	mov    rax,QWORD PTR [rip+0x115f0]        # 0x101b388
 1009d98:	mov    QWORD PTR [rsp+0x58],rax
 1009d9d:	xor    r8d,r8d
 1009da0:	lea    rdx,[rsp+0x60]
 1009da5:	mov    rcx,QWORD PTR [rsp+0x58]
 1009daa:	call   0x100a40c
 1009daf:	mov    QWORD PTR [rsp+0x50],rax
 1009db4:	cmp    QWORD PTR [rsp+0x50],0x0
 1009dba:	je     0x1009dfd
 1009dbc:	mov    QWORD PTR [rsp+0x38],0x0
 1009dc5:	lea    rax,[rsp+0x48]
 1009dca:	mov    QWORD PTR [rsp+0x30],rax
 1009dcf:	lea    rax,[rsp+0x40]
 1009dd4:	mov    QWORD PTR [rsp+0x28],rax
 1009dd9:	lea    rax,[rip+0x114b0]        # 0x101b290
 1009de0:	mov    QWORD PTR [rsp+0x20],rax
 1009de5:	mov    r9,QWORD PTR [rsp+0x50]
 1009dea:	mov    r8,QWORD PTR [rsp+0x58]
 1009def:	mov    rdx,QWORD PTR [rsp+0x60]
 1009df4:	xor    ecx,ecx
 1009df6:	call   0x100a400
 1009dfb:	jmp    0x1009e1f
 1009dfd:	mov    rax,QWORD PTR [rsp+0x88]
 1009e05:	mov    QWORD PTR [rip+0x1157c],rax        # 0x101b388
 1009e0c:	lea    rax,[rsp+0x88]
 1009e14:	add    rax,0x8
 1009e18:	mov    QWORD PTR [rip+0x11509],rax        # 0x101b328
 1009e1f:	mov    rax,QWORD PTR [rip+0x11562]        # 0x101b388
 1009e26:	mov    QWORD PTR [rip+0x113d3],rax        # 0x101b200
 1009e2d:	mov    rax,QWORD PTR [rsp+0x90]
 1009e35:	mov    QWORD PTR [rip+0x114d4],rax        # 0x101b310
 1009e3c:	mov    DWORD PTR [rip+0x113aa],0xc0000409        # 0x101b1f0
 1009e46:	mov    DWORD PTR [rip+0x113a4],0x1        # 0x101b1f4
 1009e50:	mov    rax,QWORD PTR [rip+0x112d9]        # 0x101b130
 1009e57:	mov    QWORD PTR [rsp+0x68],rax
 1009e5c:	mov    rax,QWORD PTR [rip+0x112d5]        # 0x101b138
 1009e63:	mov    QWORD PTR [rsp+0x70],rax
 1009e68:	call   QWORD PTR [rip+0xffffffffffff7372]        # 0x10011e0
 1009e6e:	mov    DWORD PTR [rip+0x11414],eax        # 0x101b288
 1009e74:	mov    ecx,0x1
 1009e79:	call   0x100a302
 1009e7e:	xor    ecx,ecx
 1009e80:	call   QWORD PTR [rip+0xffffffffffff7362]        # 0x10011e8
 1009e86:	lea    rcx,[rip+0xffffffffffff7623]        # 0x10014b0
 1009e8d:	call   QWORD PTR [rip+0xffffffffffff735d]        # 0x10011f0
 1009e93:	cmp    DWORD PTR [rip+0x113ee],0x0        # 0x101b288
 1009e9a:	jne    0x1009ea6
 1009e9c:	mov    ecx,0x1
 1009ea1:	call   0x100a302
 1009ea6:	call   QWORD PTR [rip+0xffffffffffff734c]        # 0x10011f8
 1009eac:	mov    edx,0xc0000409
 1009eb1:	mov    rcx,rax
 1009eb4:	call   QWORD PTR [rip+0xffffffffffff7346]        # 0x1001200
 1009eba:	add    rsp,0x88
 1009ec1:	ret    
 1009ec2:	int3   
 1009ec3:	int3   
 1009ec4:	int3   
 1009ec5:	int3   
 1009ec6:	int3   
 1009ec7:	int3   
 1009ec8:	mov    QWORD PTR [rsp+0x8],rbx
 1009ecd:	mov    QWORD PTR [rsp+0x10],rsi
 1009ed2:	push   rdi
 1009ed3:	sub    rsp,0x20
 1009ed7:	mov    esi,edx
 1009ed9:	mov    rbx,rcx
 1009edc:	test   dl,0x2
 1009edf:	je     0x1009f0b
 1009ee1:	mov    r8d,DWORD PTR [rcx-0x8]
 1009ee5:	lea    r9,[rip+0x508]        # 0x100a3f4
 1009eec:	mov    edx,0x18
 1009ef1:	call   0x100a360
 1009ef6:	test   sil,0x1
 1009efa:	je     0x1009f05
 1009efc:	lea    rcx,[rbx-0x8]
 1009f00:	call   0x1009d34
 1009f05:	lea    rax,[rbx-0x8]
 1009f09:	jmp    0x1009f21
 1009f0b:	call   0x100a3f4
 1009f10:	test   sil,0x1
 1009f14:	je     0x1009f1e
 1009f16:	mov    rcx,rbx
 1009f19:	call   0x1009d34
 1009f1e:	mov    rax,rbx
 1009f21:	mov    rbx,QWORD PTR [rsp+0x30]
 1009f26:	mov    rsi,QWORD PTR [rsp+0x38]
 1009f2b:	add    rsp,0x20
 1009f2f:	pop    rdi
 1009f30:	ret    
 1009f31:	int3   
 1009f32:	int3   
 1009f33:	int3   
 1009f34:	int3   
 1009f35:	int3   
 1009f36:	int3   
 1009f37:	int3   
 1009f38:	jmp    QWORD PTR [rip+0xffffffffffff7382]        # 0x10012c0
 1009f3e:	int3   
 1009f3f:	int3   
 1009f40:	int3   
 1009f41:	int3   
 1009f42:	int3   
 1009f43:	int3   
 1009f44:	jmp    QWORD PTR [rip+0xffffffffffff737e]        # 0x10012c8
 1009f4a:	int3   
 1009f4b:	int3   
 1009f4c:	int3   
 1009f4d:	int3   
 1009f4e:	int3   
 1009f4f:	int3   
 1009f50:	sub    rsp,0x28
 1009f54:	mov    rax,QWORD PTR [rcx]
 1009f57:	cmp    DWORD PTR [rax],0xe06d7363
 1009f5d:	jne    0x1009f8a
 1009f5f:	cmp    DWORD PTR [rax+0x18],0x4
 1009f63:	jne    0x1009f8a
 1009f65:	mov    eax,DWORD PTR [rax+0x20]
 1009f68:	cmp    eax,0x19930520
 1009f6d:	je     0x1009f84
 1009f6f:	cmp    eax,0x19930521
 1009f74:	je     0x1009f84
 1009f76:	cmp    eax,0x19930522
 1009f7b:	je     0x1009f84
 1009f7d:	cmp    eax,0x1994000
 1009f82:	jne    0x1009f8a
 1009f84:	call   0x100a3c4
 1009f89:	int3   
 1009f8a:	xor    eax,eax
 1009f8c:	add    rsp,0x28
 1009f90:	ret    
 1009f91:	int3   
 1009f92:	int3   
 1009f93:	int3   
 1009f94:	int3   
 1009f95:	int3   
 1009f96:	int3   
 1009f97:	int3   
 1009f98:	sub    rsp,0x28
 1009f9c:	lea    rcx,[rip+0xffffffffffffffad]        # 0x1009f50
 1009fa3:	call   QWORD PTR [rip+0xffffffffffff723f]        # 0x10011e8
 1009fa9:	xor    eax,eax
 1009fab:	add    rsp,0x28
 1009faf:	ret    
 1009fb0:	int3   
 1009fb1:	int3   
 1009fb2:	int3   
 1009fb3:	int3   
 1009fb4:	int3   
 1009fb5:	int3   
 1009fb6:	jmp    QWORD PTR [rip+0xffffffffffff7314]        # 0x10012d0
 1009fbc:	int3   
 1009fbd:	int3   
 1009fbe:	int3   
 1009fbf:	int3   
 1009fc0:	int3   
 1009fc1:	int3   
 1009fc2:	int3   
 1009fc3:	int3   
 1009fc4:	rex push rbx
 1009fc6:	sub    rsp,0x20
 1009fca:	mov    rbx,rcx
 1009fcd:	mov    rcx,QWORD PTR [rip+0x1441c]        # 0x101e3f0
 1009fd4:	call   QWORD PTR [rip+0xffffffffffff71fe]        # 0x10011d8
 1009fda:	mov    QWORD PTR [rsp+0x38],rax
 1009fdf:	cmp    rax,0xffffffffffffffff
 1009fe3:	jne    0x1009ff0
 1009fe5:	mov    rcx,rbx
 1009fe8:	call   QWORD PTR [rip+0xffffffffffff7382]        # 0x1001370
 1009fee:	jmp    0x100a06e
 1009ff0:	mov    ecx,0x8
 1009ff5:	call   0x100a3e8
 1009ffa:	nop
 1009ffb:	mov    rcx,QWORD PTR [rip+0x143ee]        # 0x101e3f0
 100a002:	call   QWORD PTR [rip+0xffffffffffff71d0]        # 0x10011d8
 100a008:	mov    QWORD PTR [rsp+0x38],rax
 100a00d:	mov    rcx,QWORD PTR [rip+0x143d4]        # 0x101e3e8
 100a014:	call   QWORD PTR [rip+0xffffffffffff71be]        # 0x10011d8
 100a01a:	mov    QWORD PTR [rsp+0x40],rax
 100a01f:	mov    rcx,rbx
 100a022:	call   QWORD PTR [rip+0xffffffffffff71e0]        # 0x1001208
 100a028:	mov    rcx,rax
 100a02b:	lea    r8,[rsp+0x40]
 100a030:	lea    rdx,[rsp+0x38]
 100a035:	call   0x100a3dc
 100a03a:	mov    rbx,rax
 100a03d:	mov    rcx,QWORD PTR [rsp+0x38]
 100a042:	call   QWORD PTR [rip+0xffffffffffff71c0]        # 0x1001208
 100a048:	mov    QWORD PTR [rip+0x143a1],rax        # 0x101e3f0
 100a04f:	mov    rcx,QWORD PTR [rsp+0x40]
 100a054:	call   QWORD PTR [rip+0xffffffffffff71ae]        # 0x1001208
 100a05a:	mov    QWORD PTR [rip+0x14387],rax        # 0x101e3e8
 100a061:	mov    ecx,0x8
 100a066:	call   0x100a3d0
 100a06b:	mov    rax,rbx
 100a06e:	add    rsp,0x20
 100a072:	pop    rbx
 100a073:	ret    
 100a074:	int3   
 100a075:	int3   
 100a076:	int3   
 100a077:	int3   
 100a078:	int3   
 100a079:	int3   
 100a07a:	int3   
 100a07b:	int3   
 100a07c:	sub    rsp,0x28
 100a080:	call   0x1009fc4
 100a085:	neg    rax
 100a088:	sbb    eax,eax
 100a08a:	neg    eax
 100a08c:	dec    eax
 100a08e:	add    rsp,0x28
 100a092:	ret    
 100a093:	int3   
 100a094:	int3   
 100a095:	int3   
 100a096:	int3   
 100a097:	int3   
 100a098:	int3   
 100a099:	int3   
 100a09a:	int3   
 100a09b:	int3   
 100a09c:	mov    QWORD PTR [rsp+0x8],rbx
 100a0a1:	push   rdi
 100a0a2:	sub    rsp,0x20
 100a0a6:	lea    rbx,[rip+0xffffffffffffbf03]        # 0x1005fb0
 100a0ad:	lea    rdi,[rip+0xffffffffffffbefc]        # 0x1005fb0
 100a0b4:	jmp    0x100a0c4
 100a0b6:	mov    rax,QWORD PTR [rbx]
 100a0b9:	test   rax,rax
 100a0bc:	je     0x100a0c0
 100a0be:	call   rax
 100a0c0:	add    rbx,0x8
 100a0c4:	cmp    rbx,rdi
 100a0c7:	jb     0x100a0b6
 100a0c9:	mov    rbx,QWORD PTR [rsp+0x30]
 100a0ce:	add    rsp,0x20
 100a0d2:	pop    rdi
 100a0d3:	ret    
 100a0d4:	int3   
 100a0d5:	int3   
 100a0d6:	int3   
 100a0d7:	int3   
 100a0d8:	int3   
 100a0d9:	int3   
 100a0da:	int3   
 100a0db:	int3   
 100a0dc:	mov    QWORD PTR [rsp+0x8],rbx
 100a0e1:	push   rdi
 100a0e2:	sub    rsp,0x20
 100a0e6:	lea    rbx,[rip+0xffffffffffffbed3]        # 0x1005fc0
 100a0ed:	lea    rdi,[rip+0xffffffffffffbecc]        # 0x1005fc0
 100a0f4:	jmp    0x100a104
 100a0f6:	mov    rax,QWORD PTR [rbx]
 100a0f9:	test   rax,rax
 100a0fc:	je     0x100a100
 100a0fe:	call   rax
 100a100:	add    rbx,0x8
 100a104:	cmp    rbx,rdi
 100a107:	jb     0x100a0f6
 100a109:	mov    rbx,QWORD PTR [rsp+0x30]
 100a10e:	add    rsp,0x20
 100a112:	pop    rdi
 100a113:	ret    
 100a114:	int3   
 100a115:	int3   
 100a116:	int3   
 100a117:	int3   
 100a118:	int3   
 100a119:	int3   
 100a11a:	jmp    QWORD PTR [rip+0xffffffffffff71c0]        # 0x10012e0
 100a120:	int3   
 100a121:	int3   
 100a122:	int3   
 100a123:	int3   
 100a124:	int3   
 100a125:	int3   
 100a126:	jmp    QWORD PTR [rip+0xffffffffffff71bc]        # 0x10012e8
 100a12c:	int3   
 100a12d:	int3   
 100a12e:	int3   
 100a12f:	int3   
 100a130:	int3   
 100a131:	int3   
 100a132:	int3   
 100a133:	int3   
 100a134:	int3   
 100a135:	int3   
 100a136:	int3   
 100a137:	int3   
 100a138:	int3   
 100a139:	int3   
 100a13a:	int3   
 100a13b:	int3   
 100a13c:	int3   
 100a13d:	int3   
 100a13e:	int3   
 100a13f:	int3   
 100a140:	mov    rax,rcx
 100a143:	mov    ecx,0x5a4d
 100a148:	cmp    WORD PTR [rax],cx
 100a14b:	je     0x100a150
 100a14d:	xor    eax,eax
 100a14f:	ret    
 100a150:	movsxd rcx,DWORD PTR [rax+0x3c]
 100a154:	add    rcx,rax
 100a157:	xor    eax,eax
 100a159:	cmp    DWORD PTR [rcx],0x4550
 100a15f:	jne    0x100a16d
 100a161:	mov    edx,0x20b
 100a166:	cmp    WORD PTR [rcx+0x18],dx
 100a16a:	sete   al
 100a16d:	repz ret 
 100a16f:	int3   
 100a170:	int3   
 100a171:	int3   
 100a172:	int3   
 100a173:	int3   
 100a174:	int3   
 100a175:	int3   
 100a176:	int3   
 100a177:	int3   
 100a178:	int3   
 100a179:	int3   
 100a17a:	int3   
 100a17b:	int3   
 100a17c:	int3   
 100a17d:	int3   
 100a17e:	int3   
 100a17f:	int3   
 100a180:	movsxd r8,DWORD PTR [rcx+0x3c]
 100a184:	xor    r9d,r9d
 100a187:	mov    r10,rdx
 100a18a:	add    r8,rcx
 100a18d:	movzx  eax,WORD PTR [r8+0x14]
 100a192:	movzx  r11d,WORD PTR [r8+0x6]
 100a197:	lea    rcx,[rax+r8*1+0x18]
 100a19c:	test   r11d,r11d
 100a19f:	je     0x100a1bf
 100a1a1:	mov    edx,DWORD PTR [rcx+0xc]
 100a1a4:	cmp    r10,rdx
 100a1a7:	jb     0x100a1b3
 100a1a9:	mov    eax,DWORD PTR [rcx+0x8]
 100a1ac:	add    eax,edx
 100a1ae:	cmp    r10,rax
 100a1b1:	jb     0x100a1c2
 100a1b3:	inc    r9d
 100a1b6:	add    rcx,0x28
 100a1ba:	cmp    r9d,r11d
 100a1bd:	jb     0x100a1a1
 100a1bf:	xor    eax,eax
 100a1c1:	ret    
 100a1c2:	mov    rax,rcx
 100a1c5:	ret    
 100a1c6:	int3   
 100a1c7:	int3   
 100a1c8:	int3   
 100a1c9:	int3   
 100a1ca:	int3   
 100a1cb:	int3   
 100a1cc:	int3   
 100a1cd:	int3   
 100a1ce:	int3   
 100a1cf:	int3   
 100a1d0:	sub    rsp,0x28
 100a1d4:	mov    r8,rcx
 100a1d7:	lea    r9,[rip+0xffffffffffff5e22]        # 0x1000000
 100a1de:	mov    rcx,r9
 100a1e1:	call   0x100a140
 100a1e6:	test   eax,eax
 100a1e8:	je     0x100a20c
 100a1ea:	sub    r8,r9
 100a1ed:	mov    rdx,r8
 100a1f0:	mov    rcx,r9
 100a1f3:	call   0x100a180
 100a1f8:	test   rax,rax
 100a1fb:	je     0x100a20c
 100a1fd:	mov    eax,DWORD PTR [rax+0x24]
 100a200:	shr    eax,0x1f
 100a203:	not    eax
 100a205:	and    eax,0x1
 100a208:	jmp    0x100a20c
 100a20a:	xor    eax,eax
 100a20c:	add    rsp,0x28
 100a210:	ret    
 100a211:	int3   
 100a212:	int3   
 100a213:	int3   
 100a214:	int3   
 100a215:	int3   
 100a216:	int3   
 100a217:	int3   
 100a218:	jmp    QWORD PTR [rip+0xffffffffffff70f2]        # 0x1001310
 100a21e:	int3   
 100a21f:	int3   
 100a220:	int3   
 100a221:	int3   
 100a222:	int3   
 100a223:	int3   
 100a224:	jmp    QWORD PTR [rip+0xffffffffffff70ee]        # 0x1001318
 100a22a:	int3   
 100a22b:	int3   
 100a22c:	int3   
 100a22d:	int3   
 100a22e:	int3   
 100a22f:	int3   
 100a230:	xor    eax,eax
 100a232:	ret    
 100a233:	int3   
 100a234:	int3   
 100a235:	int3   
 100a236:	int3   
 100a237:	int3   
 100a238:	int3   
 100a239:	int3   
 100a23a:	int3   
 100a23b:	int3   
 100a23c:	xor    eax,eax
 100a23e:	ret    
 100a23f:	int3   
 100a240:	int3   
 100a241:	int3   
 100a242:	int3   
 100a243:	int3   
 100a244:	int3   
 100a245:	int3   
 100a246:	int3   
 100a247:	int3   
 100a248:	mov    QWORD PTR [rsp+0x18],rbx
 100a24d:	push   rdi
 100a24e:	sub    rsp,0x20
 100a252:	mov    rax,QWORD PTR [rip+0x10ed7]        # 0x101b130
 100a259:	and    QWORD PTR [rsp+0x30],0x0
 100a25f:	movabs rdi,0x2b992ddfa232
 100a269:	cmp    rax,rdi
 100a26c:	je     0x100a27a
 100a26e:	not    rax
 100a271:	mov    QWORD PTR [rip+0x10ec0],rax        # 0x101b138
 100a278:	jmp    0x100a2f0
 100a27a:	lea    rcx,[rsp+0x30]
 100a27f:	call   QWORD PTR [rip+0xffffffffffff6f33]        # 0x10011b8
 100a285:	mov    rbx,QWORD PTR [rsp+0x30]
 100a28a:	call   QWORD PTR [rip+0xffffffffffff6f30]        # 0x10011c0
 100a290:	mov    r11d,eax
 100a293:	xor    rbx,r11
 100a296:	call   QWORD PTR [rip+0xffffffffffff6fb4]        # 0x1001250
 100a29c:	mov    r11d,eax
 100a29f:	xor    rbx,r11
 100a2a2:	call   QWORD PTR [rip+0xffffffffffff6f20]        # 0x10011c8
 100a2a8:	lea    rcx,[rsp+0x38]
 100a2ad:	mov    r11d,eax
 100a2b0:	xor    rbx,r11
 100a2b3:	call   QWORD PTR [rip+0xffffffffffff6f17]        # 0x10011d0
 100a2b9:	mov    r11,QWORD PTR [rsp+0x38]
 100a2be:	xor    r11,rbx
 100a2c1:	movabs rax,0xffffffffffff
 100a2cb:	and    r11,rax
 100a2ce:	movabs rax,0x2b992ddfa233
 100a2d8:	cmp    r11,rdi
 100a2db:	cmove  r11,rax
 100a2df:	mov    QWORD PTR [rip+0x10e4a],r11        # 0x101b130
 100a2e6:	not    r11
 100a2e9:	mov    QWORD PTR [rip+0x10e48],r11        # 0x101b138
 100a2f0:	mov    rbx,QWORD PTR [rsp+0x40]
 100a2f5:	add    rsp,0x20
 100a2f9:	pop    rdi
 100a2fa:	ret    
 100a2fb:	int3   
 100a2fc:	int3   
 100a2fd:	int3   
 100a2fe:	int3   
 100a2ff:	int3   
 100a300:	int3   
 100a301:	int3   
 100a302:	jmp    QWORD PTR [rip+0xffffffffffff7040]        # 0x1001348
 100a308:	int3   
 100a309:	int3   
 100a30a:	int3   
 100a30b:	int3   
 100a30c:	int3   
 100a30d:	int3   
 100a30e:	int3   
 100a30f:	int3   
 100a310:	mov    QWORD PTR [rsp+0x10],rbx
 100a315:	mov    DWORD PTR [rsp+0x18],r8d
 100a31a:	mov    QWORD PTR [rsp+0x8],rcx
 100a31f:	push   rsi
 100a320:	push   rdi
 100a321:	push   r12
 100a323:	sub    rsp,0x40
 100a327:	mov    rsi,r9
 100a32a:	mov    edi,r8d
 100a32d:	mov    r12,rdx
 100a330:	mov    rbx,rcx
 100a333:	dec    edi
 100a335:	mov    DWORD PTR [rsp+0x70],edi
 100a339:	js     0x100a34a
 100a33b:	sub    rbx,r12
 100a33e:	mov    QWORD PTR [rsp+0x60],rbx
 100a343:	mov    rcx,rbx
 100a346:	call   rsi
 100a348:	jmp    0x100a333
 100a34a:	jmp    0x100a34c
 100a34c:	mov    rbx,QWORD PTR [rsp+0x68]
 100a351:	add    rsp,0x40
 100a355:	pop    r12
 100a357:	pop    rdi
 100a358:	pop    rsi
 100a359:	ret    
 100a35a:	int3   
 100a35b:	int3   
 100a35c:	int3   
 100a35d:	int3   
 100a35e:	int3   
 100a35f:	int3   
 100a360:	mov    rax,rsp
 100a363:	mov    QWORD PTR [rax+0x20],r9
 100a367:	mov    DWORD PTR [rax+0x18],r8d
 100a36b:	mov    QWORD PTR [rax+0x10],rdx
 100a36f:	push   rbx
 100a370:	push   rsi
 100a371:	push   rdi
 100a372:	push   r12
 100a374:	sub    rsp,0x38
 100a378:	mov    r12,r9
 100a37b:	movsxd rdi,r8d
 100a37e:	mov    rsi,rdx
 100a381:	and    DWORD PTR [rax-0x38],0x0
 100a385:	mov    rbx,rdi
 100a388:	imul   rbx,rdx
 100a38c:	add    rbx,rcx
 100a38f:	mov    QWORD PTR [rax+0x8],rbx
 100a393:	dec    edi
 100a395:	mov    DWORD PTR [rsp+0x70],edi
 100a399:	js     0x100a3ab
 100a39b:	sub    rbx,rsi
 100a39e:	mov    QWORD PTR [rsp+0x60],rbx
 100a3a3:	mov    rcx,rbx
 100a3a6:	call   r12
 100a3a9:	jmp    0x100a393
 100a3ab:	mov    DWORD PTR [rsp+0x20],0x1
 100a3b3:	add    rsp,0x38
 100a3b7:	pop    r12
 100a3b9:	pop    rdi
 100a3ba:	pop    rsi
 100a3bb:	pop    rbx
 100a3bc:	ret    
 100a3bd:	int3   
 100a3be:	int3   
 100a3bf:	int3   
 100a3c0:	int3   
 100a3c1:	int3   
 100a3c2:	int3   
 100a3c3:	int3   
 100a3c4:	jmp    QWORD PTR [rip+0xffffffffffff6f86]        # 0x1001350
 100a3ca:	int3   
 100a3cb:	int3   
 100a3cc:	int3   
 100a3cd:	int3   
 100a3ce:	int3   
 100a3cf:	int3   
 100a3d0:	jmp    QWORD PTR [rip+0xffffffffffff6f82]        # 0x1001358
 100a3d6:	int3   
 100a3d7:	int3   
 100a3d8:	int3   
 100a3d9:	int3   
 100a3da:	int3   
 100a3db:	int3   
 100a3dc:	jmp    QWORD PTR [rip+0xffffffffffff6f7e]        # 0x1001360
 100a3e2:	int3   
 100a3e3:	int3   
 100a3e4:	int3   
 100a3e5:	int3   
 100a3e6:	int3   
 100a3e7:	int3   
 100a3e8:	jmp    QWORD PTR [rip+0xffffffffffff6f7a]        # 0x1001368
 100a3ee:	int3   
 100a3ef:	int3   
 100a3f0:	int3   
 100a3f1:	int3   
 100a3f2:	int3   
 100a3f3:	int3   
 100a3f4:	jmp    QWORD PTR [rip+0xffffffffffff6f7e]        # 0x1001378
 100a3fa:	int3   
 100a3fb:	int3   
 100a3fc:	int3   
 100a3fd:	int3   
 100a3fe:	int3   
 100a3ff:	int3   
 100a400:	jmp    QWORD PTR [rip+0xffffffffffff6fea]        # 0x10013f0
 100a406:	int3   
 100a407:	int3   
 100a408:	int3   
 100a409:	int3   
 100a40a:	int3   
 100a40b:	int3   
 100a40c:	jmp    QWORD PTR [rip+0xffffffffffff6fee]        # 0x1001400
 100a412:	int3   
 100a413:	int3   
 100a414:	int3   
 100a415:	int3   
 100a416:	int3   
 100a417:	int3   
 100a418:	int3   
 100a419:	int3   
 100a41a:	int3   
 100a41b:	int3   
 100a41c:	int3   
 100a41d:	int3   
 100a41e:	int3   
 100a41f:	int3   
 100a420:	rex push rbx
 100a422:	sub    rsp,0x20
 100a426:	mov    rbx,rcx
 100a429:	mov    rcx,QWORD PTR [rcx]
 100a42c:	test   rcx,rcx
 100a42f:	je     0x100a447
 100a431:	call   QWORD PTR [rip+0xffffffffffff6c71]        # 0x10010a8
 100a437:	xor    r11d,r11d
 100a43a:	mov    QWORD PTR [rbx],r11
 100a43d:	mov    DWORD PTR [rbx+0x8],r11d
 100a441:	add    rsp,0x20
 100a445:	pop    rbx
 100a446:	ret    
 100a447:	xor    r11d,r11d
 100a44a:	mov    DWORD PTR [rbx+0x8],r11d
 100a44e:	add    rsp,0x20
 100a452:	pop    rbx
 100a453:	ret    
 100a454:	int3   
 100a455:	int3   
 100a456:	int3   
 100a457:	int3   
 100a458:	int3   
 100a459:	int3   
 100a45a:	int3   
 100a45b:	int3   
 100a45c:	int3   
 100a45d:	int3   
 100a45e:	int3   
 100a45f:	int3   
 100a460:	mov    QWORD PTR [rsp+0x20],r9
 100a465:	push   rbx
 100a466:	push   rsi
 100a467:	sub    rsp,0x38
 100a46b:	xor    ebx,ebx
 100a46d:	mov    rsi,rcx
 100a470:	mov    eax,ebx
 100a472:	test   rdx,rdx
 100a475:	je     0x100a480
 100a477:	cmp    rdx,0x7fffffff
 100a47e:	jbe    0x100a485
 100a480:	mov    eax,0x80070057
 100a485:	test   eax,eax
 100a487:	js     0x100a4d4
 100a489:	lea    rax,[rsp+0x70]
 100a48e:	mov    QWORD PTR [rsp+0x30],rdi
 100a493:	lea    rdi,[rdx-0x1]
 100a497:	mov    rdx,rdi
 100a49a:	mov    QWORD PTR [rsp+0x20],rax
 100a49f:	call   QWORD PTR [rip+0xffffffffffff6ee3]        # 0x1001388
 100a4a5:	test   eax,eax
 100a4a7:	js     0x100a4c4
 100a4a9:	cdqe   
 100a4ab:	cmp    rax,rdi
 100a4ae:	ja     0x100a4c4
 100a4b0:	jne    0x100a4cd
 100a4b2:	mov    WORD PTR [rsi+rdi*2],bx
 100a4b6:	mov    rdi,QWORD PTR [rsp+0x30]
 100a4bb:	mov    eax,ebx
 100a4bd:	add    rsp,0x38
 100a4c1:	pop    rsi
 100a4c2:	pop    rbx
 100a4c3:	ret    
 100a4c4:	mov    WORD PTR [rsi+rdi*2],bx
 100a4c8:	mov    ebx,0x8007007a
 100a4cd:	mov    rdi,QWORD PTR [rsp+0x30]
 100a4d2:	mov    eax,ebx
 100a4d4:	add    rsp,0x38
 100a4d8:	pop    rsi
 100a4d9:	pop    rbx
 100a4da:	ret    
 100a4db:	int3   
 100a4dc:	int3   
 100a4dd:	int3   
 100a4de:	int3   
 100a4df:	int3   
 100a4e0:	int3   
 100a4e1:	int3   
 100a4e2:	int3   
 100a4e3:	int3   
 100a4e4:	int3   
 100a4e5:	int3   
 100a4e6:	int3   
 100a4e7:	int3   
 100a4e8:	int3   
 100a4e9:	int3   
 100a4ea:	int3   
 100a4eb:	int3   
 100a4ec:	int3   
 100a4ed:	int3   
 100a4ee:	int3   
 100a4ef:	int3   
 100a4f0:	mov    QWORD PTR [rsp+0x8],rcx
 100a4f5:	push   rbx
 100a4f6:	sub    rsp,0x30
 100a4fa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100a503:	mov    rbx,rcx
 100a506:	lea    rax,[rip+0xffffffffffff74d3]        # 0x10019e0
 100a50d:	mov    QWORD PTR [rcx],rax
 100a510:	mov    DWORD PTR [rcx+0x30],0x1
 100a517:	add    rcx,0x8
 100a51b:	call   QWORD PTR [rip+0xffffffffffff6c8f]        # 0x10011b0
 100a521:	nop
 100a522:	mov    rax,rbx
 100a525:	jmp    0x100a52c
 100a527:	mov    rax,QWORD PTR [rsp+0x40]
 100a52c:	add    rsp,0x30
 100a530:	pop    rbx
 100a531:	ret    
 100a532:	int3   
 100a533:	int3   
 100a534:	int3   
 100a535:	int3   
 100a536:	int3   
 100a537:	int3   
 100a538:	int3   
 100a539:	int3   
 100a53a:	int3   
 100a53b:	int3   
 100a53c:	int3   
 100a53d:	int3   
 100a53e:	int3   
 100a53f:	int3   
 100a540:	sub    rsp,0x38
 100a544:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 100a54d:	cmp    DWORD PTR [rcx+0x30],0x0
 100a551:	jne    0x100a56d
 100a553:	mov    DWORD PTR [rsp+0x20],0x8007000e
 100a55b:	lea    rdx,[rip+0xf7e6]        # 0x1019d48
 100a562:	lea    rcx,[rsp+0x20]
 100a567:	call   0x101067c
 100a56c:	nop
 100a56d:	add    rcx,0x8
 100a571:	call   QWORD PTR [rip+0xffffffffffff6c31]        # 0x10011a8
 100a577:	nop
 100a578:	add    rsp,0x38
 100a57c:	ret    
 100a57d:	int3   
 100a57e:	int3   
 100a57f:	int3   
 100a580:	int3   
 100a581:	int3   
 100a582:	int3   
 100a583:	int3   
 100a584:	int3   
 100a585:	int3   
 100a586:	int3   
 100a587:	int3   
 100a588:	int3   
 100a589:	int3   
 100a58a:	int3   
 100a58b:	int3   
 100a58c:	int3   
 100a58d:	int3   
 100a58e:	int3   
 100a58f:	int3   
 100a590:	sub    rsp,0x38
 100a594:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100a59d:	cmp    DWORD PTR [rcx+0x30],0x0
 100a5a1:	je     0x100a5ae
 100a5a3:	add    rcx,0x8
 100a5a7:	call   QWORD PTR [rip+0xffffffffffff6bfb]        # 0x10011a8
 100a5ad:	nop
 100a5ae:	add    rsp,0x38
 100a5b2:	ret    
 100a5b3:	int3   
 100a5b4:	int3   
 100a5b5:	int3   
 100a5b6:	int3   
 100a5b7:	int3   
 100a5b8:	int3   
 100a5b9:	int3   
 100a5ba:	int3   
 100a5bb:	int3   
 100a5bc:	int3   
 100a5bd:	int3   
 100a5be:	int3   
 100a5bf:	int3   
 100a5c0:	mov    QWORD PTR [rsp+0x8],rbx
 100a5c5:	push   rdi
 100a5c6:	sub    rsp,0x20
 100a5ca:	cmp    DWORD PTR [rcx+0x30],0x0
 100a5ce:	lea    rax,[rip+0xffffffffffff740b]        # 0x10019e0
 100a5d5:	mov    edi,edx
 100a5d7:	mov    QWORD PTR [rcx],rax
 100a5da:	mov    rbx,rcx
 100a5dd:	je     0x100a5e9
 100a5df:	add    rcx,0x8
 100a5e3:	call   QWORD PTR [rip+0xffffffffffff6c97]        # 0x1001280
 100a5e9:	test   dil,0x1
 100a5ed:	je     0x100a5f7
 100a5ef:	mov    rcx,rbx
 100a5f2:	call   0x1009d34
 100a5f7:	mov    rax,rbx
 100a5fa:	mov    rbx,QWORD PTR [rsp+0x30]
 100a5ff:	add    rsp,0x20
 100a603:	pop    rdi
 100a604:	ret    
 100a605:	int3   
 100a606:	int3   
 100a607:	int3   
 100a608:	int3   
 100a609:	int3   
 100a60a:	int3   
 100a60b:	int3   
 100a60c:	int3   
 100a60d:	int3   
 100a60e:	int3   
 100a60f:	int3   
 100a610:	mov    r11,rsp
 100a613:	push   r13
 100a615:	sub    rsp,0x1a0
 100a61c:	mov    rax,QWORD PTR [rip+0x10b0d]        # 0x101b130
 100a623:	xor    rax,rsp
 100a626:	mov    QWORD PTR [rsp+0x170],rax
 100a62e:	cmp    DWORD PTR [rcx+0x48],0x0
 100a632:	mov    r13,rcx
 100a635:	je     0x100aa1a
 100a63b:	mov    QWORD PTR [r11-0x18],r12
 100a63f:	xor    r12d,r12d
 100a642:	cmp    DWORD PTR [rcx],r12d
 100a645:	je     0x100a9e9
 100a64b:	mov    rcx,QWORD PTR [rcx+0x70]
 100a64f:	mov    QWORD PTR [r11+0x10],rbx
 100a653:	mov    QWORD PTR [r11+0x18],rbp
 100a657:	mov    QWORD PTR [r11+0x20],rsi
 100a65b:	mov    QWORD PTR [r11-0x10],rdi
 100a65f:	mov    QWORD PTR [r11-0x20],r14
 100a663:	mov    QWORD PTR [r11-0x28],r15
 100a667:	call   0x100a590
 100a66c:	cmp    DWORD PTR [rip+0x1110d],r12d        # 0x101b780
 100a673:	je     0x100a734
 100a679:	mov    DWORD PTR [rsp+0x30],r12d
 100a67e:	lea    rdx,[rip+0xffffffffffff736b]        # 0x10019f0
 100a685:	lea    rcx,[rip+0x110f4]        # 0x101b780
 100a68c:	xor    r9d,r9d
 100a68f:	mov    r8d,0x116
 100a695:	mov    QWORD PTR [rsp+0x28],r12
 100a69a:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100a6a2:	call   0x100af10
 100a6a7:	lea    rdx,[rip+0xffffffffffff73f2]        # 0x1001aa0
 100a6ae:	lea    rcx,[rip+0x110cb]        # 0x101b780
 100a6b5:	call   0x100b220
 100a6ba:	lea    rcx,[rip+0x110bf]        # 0x101b780
 100a6c1:	xor    edx,edx
 100a6c3:	call   0x100b150
 100a6c8:	cmp    DWORD PTR [rip+0x110b1],r12d        # 0x101b780
 100a6cf:	je     0x100a734
 100a6d1:	mov    DWORD PTR [rsp+0x30],r12d
 100a6d6:	lea    rdx,[rip+0xffffffffffff7313]        # 0x10019f0
 100a6dd:	lea    rcx,[rip+0x1109c]        # 0x101b780
 100a6e4:	xor    r9d,r9d
 100a6e7:	mov    r8d,0x118
 100a6ed:	mov    QWORD PTR [rsp+0x28],r12
 100a6f2:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100a6fa:	call   0x100af10
 100a6ff:	mov    r11d,DWORD PTR [r13+0x4c]
 100a703:	mov    r9d,DWORD PTR [r13+0x38]
 100a707:	mov    r8,QWORD PTR [rip+0x1106a]        # 0x101b778
 100a70e:	lea    rdx,[rip+0xffffffffffff741b]        # 0x1001b30
 100a715:	lea    rcx,[rip+0x11064]        # 0x101b780
 100a71c:	mov    DWORD PTR [rsp+0x20],r11d
 100a721:	call   0x100b220
 100a726:	lea    rcx,[rip+0x11053]        # 0x101b780
 100a72d:	xor    edx,edx
 100a72f:	call   0x100b150
 100a734:	lea    rcx,[rsp+0x72]
 100a739:	xor    edx,edx
 100a73b:	mov    r8d,0xfe
 100a741:	mov    WORD PTR [rsp+0x70],r12w
 100a747:	call   0x10107ba
 100a74c:	lea    rcx,[rsp+0x50]
 100a751:	call   QWORD PTR [rip+0xffffffffffff6c39]        # 0x1001390
 100a757:	lea    rcx,[rsp+0x58]
 100a75c:	call   QWORD PTR [rip+0xffffffffffff6a06]        # 0x1001168
 100a762:	movzx  ebx,WORD PTR [rsp+0x64]
 100a767:	movzx  edi,WORD PTR [rsp+0x62]
 100a76c:	movzx  esi,WORD PTR [rsp+0x60]
 100a771:	movzx  ebp,WORD PTR [rsp+0x58]
 100a776:	movzx  r14d,WORD PTR [rsp+0x5e]
 100a77c:	movzx  r15d,WORD PTR [rsp+0x5a]
 100a782:	call   0x10078b0
 100a787:	mov    DWORD PTR [rsp+0x48],ebx
 100a78b:	mov    DWORD PTR [rsp+0x40],edi
 100a78f:	mov    DWORD PTR [rsp+0x38],esi
 100a793:	mov    DWORD PTR [rsp+0x30],ebp
 100a797:	lea    r8,[rip+0xffffffffffff740a]        # 0x1001ba8
 100a79e:	lea    rcx,[rsp+0x70]
 100a7a3:	mov    r9,rax
 100a7a6:	mov    edx,0x80
 100a7ab:	mov    DWORD PTR [rsp+0x28],r14d
 100a7b0:	mov    DWORD PTR [rsp+0x20],r15d
 100a7b5:	call   0x100a460
 100a7ba:	mov    r15,QWORD PTR [rsp+0x180]
 100a7c2:	mov    r14,QWORD PTR [rsp+0x188]
 100a7ca:	mov    rdi,QWORD PTR [rsp+0x198]
 100a7d2:	mov    rsi,QWORD PTR [rsp+0x1c8]
 100a7da:	mov    rbp,QWORD PTR [rsp+0x1c0]
 100a7e2:	mov    rbx,QWORD PTR [rsp+0x1b8]
 100a7ea:	test   eax,eax
 100a7ec:	js     0x100a84f
 100a7ee:	cmp    DWORD PTR [rip+0x10f8b],r12d        # 0x101b780
 100a7f5:	je     0x100a971
 100a7fb:	mov    DWORD PTR [rsp+0x30],r12d
 100a800:	lea    rdx,[rip+0xffffffffffff71e9]        # 0x10019f0
 100a807:	lea    rcx,[rip+0x10f72]        # 0x101b780
 100a80e:	xor    r9d,r9d
 100a811:	mov    r8d,0x128
 100a817:	mov    QWORD PTR [rsp+0x28],r12
 100a81c:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100a824:	call   0x100af10
 100a829:	lea    r8,[rsp+0x70]
 100a82e:	lea    rdx,[rip+0xffffffffffff739b]        # 0x1001bd0
 100a835:	lea    rcx,[rip+0x10f44]        # 0x101b780
 100a83c:	call   0x100b220
 100a841:	lea    rcx,[rip+0x10f38]        # 0x101b780
 100a848:	xor    edx,edx
 100a84a:	call   0x100b150
 100a84f:	cmp    DWORD PTR [rip+0x10f2a],r12d        # 0x101b780
 100a856:	je     0x100a971
 100a85c:	mov    DWORD PTR [rsp+0x30],r12d
 100a861:	lea    rdx,[rip+0xffffffffffff7188]        # 0x10019f0
 100a868:	lea    rcx,[rip+0x10f11]        # 0x101b780
 100a86f:	xor    r9d,r9d
 100a872:	mov    r8d,0x12a
 100a878:	mov    QWORD PTR [rsp+0x28],r12
 100a87d:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100a885:	call   0x100af10
 100a88a:	mov    r8,QWORD PTR [rsp+0x50]
 100a88f:	sub    r8,QWORD PTR [r13+0x40]
 100a893:	lea    rdx,[rip+0xffffffffffff7366]        # 0x1001c00
 100a89a:	lea    rcx,[rip+0x10edf]        # 0x101b780
 100a8a1:	call   0x100b220
 100a8a6:	lea    rcx,[rip+0x10ed3]        # 0x101b780
 100a8ad:	xor    edx,edx
 100a8af:	call   0x100b150
 100a8b4:	cmp    DWORD PTR [rip+0x10ec5],r12d        # 0x101b780
 100a8bb:	je     0x100a971
 100a8c1:	mov    DWORD PTR [rsp+0x30],r12d
 100a8c6:	lea    rdx,[rip+0xffffffffffff7123]        # 0x10019f0
 100a8cd:	lea    rcx,[rip+0x10eac]        # 0x101b780
 100a8d4:	xor    r9d,r9d
 100a8d7:	mov    r8d,0x12b
 100a8dd:	mov    QWORD PTR [rsp+0x28],r12
 100a8e2:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100a8ea:	call   0x100af10
 100a8ef:	call   QWORD PTR [rip+0xffffffffffff6933]        # 0x1001228
 100a8f5:	lea    rdx,[rip+0xffffffffffff7344]        # 0x1001c40
 100a8fc:	lea    rcx,[rip+0x10e7d]        # 0x101b780
 100a903:	mov    r8,rax
 100a906:	call   0x100b220
 100a90b:	lea    rcx,[rip+0x10e6e]        # 0x101b780
 100a912:	xor    edx,edx
 100a914:	call   0x100b150
 100a919:	cmp    DWORD PTR [rip+0x10e60],r12d        # 0x101b780
 100a920:	je     0x100a971
 100a922:	mov    DWORD PTR [rsp+0x30],r12d
 100a927:	lea    rdx,[rip+0xffffffffffff70c2]        # 0x10019f0
 100a92e:	lea    rcx,[rip+0x10e4b]        # 0x101b780
 100a935:	xor    r9d,r9d
 100a938:	mov    r8d,0x12c
 100a93e:	mov    QWORD PTR [rsp+0x28],r12
 100a943:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100a94b:	call   0x100af10
 100a950:	lea    rdx,[rip+0xffffffffffff7149]        # 0x1001aa0
 100a957:	lea    rcx,[rip+0x10e22]        # 0x101b780
 100a95e:	call   0x100b220
 100a963:	lea    rcx,[rip+0x10e16]        # 0x101b780
 100a96a:	xor    edx,edx
 100a96c:	call   0x100b150
 100a971:	mov    rcx,QWORD PTR [r13+0x70]
 100a975:	cmp    DWORD PTR [rcx+0x30],r12d
 100a979:	je     0x100a985
 100a97b:	add    rcx,0x8
 100a97f:	call   QWORD PTR [rip+0xffffffffffff681b]        # 0x10011a0
 100a985:	cmp    DWORD PTR [r13+0x18],r12d
 100a989:	je     0x100a9e9
 100a98b:	mov    rax,QWORD PTR [r13+0x10]
 100a98f:	mov    QWORD PTR [rsp+0x30],r12
 100a994:	lea    rcx,[rip+0xffffffffffffa381]        # 0x1004d1c
 100a99b:	test   rax,rax
 100a99e:	mov    edx,0x40000000
 100a9a3:	mov    DWORD PTR [rsp+0x28],0x100080
 100a9ab:	cmovne rcx,rax
 100a9af:	xor    r9d,r9d
 100a9b2:	mov    DWORD PTR [rsp+0x20],0x4
 100a9ba:	lea    r8d,[r9+0x1]
 100a9be:	call   QWORD PTR [rip+0xffffffffffff6794]        # 0x1001158
 100a9c4:	mov    QWORD PTR [r13+0x8],rax
 100a9c8:	cmp    rax,0xffffffffffffffff
 100a9cc:	je     0x100a9e9
 100a9ce:	mov    rcx,rax
 100a9d1:	call   QWORD PTR [rip+0xffffffffffff67a1]        # 0x1001178
 100a9d7:	mov    rcx,QWORD PTR [r13+0x8]
 100a9db:	call   QWORD PTR [rip+0xffffffffffff685f]        # 0x1001240
 100a9e1:	mov    QWORD PTR [r13+0x8],0xffffffffffffffff
 100a9e9:	mov    rcx,QWORD PTR [r13+0x10]
 100a9ed:	call   QWORD PTR [rip+0xffffffffffff6a3d]        # 0x1001430
 100a9f3:	mov    QWORD PTR [r13+0x10],r12
 100a9f7:	mov    rcx,QWORD PTR [r13+0x70]
 100a9fb:	test   rcx,rcx
 100a9fe:	je     0x100aa0a
 100aa00:	mov    rax,QWORD PTR [rcx]
 100aa03:	mov    edx,0x1
 100aa08:	call   QWORD PTR [rax]
 100aa0a:	mov    QWORD PTR [r13+0x70],r12
 100aa0e:	mov    DWORD PTR [r13+0x48],r12d
 100aa12:	mov    r12,QWORD PTR [rsp+0x190]
 100aa1a:	mov    rcx,QWORD PTR [rsp+0x170]
 100aa22:	xor    rcx,rsp
 100aa25:	call   0x1009d50
 100aa2a:	add    rsp,0x1a0
 100aa31:	pop    r13
 100aa33:	ret    
 100aa34:	int3   
 100aa35:	int3   
 100aa36:	int3   
 100aa37:	int3   
 100aa38:	int3   
 100aa39:	int3   
 100aa3a:	int3   
 100aa3b:	int3   
 100aa3c:	int3   
 100aa3d:	int3   
 100aa3e:	int3   
 100aa3f:	int3   
 100aa40:	mov    rax,rsp
 100aa43:	push   rdi
 100aa44:	push   r12
 100aa46:	push   r13
 100aa48:	push   r14
 100aa4a:	push   r15
 100aa4c:	sub    rsp,0x1a0
 100aa53:	mov    QWORD PTR [rsp+0x68],0xfffffffffffffffe
 100aa5c:	mov    QWORD PTR [rax+0x10],rbx
 100aa60:	mov    QWORD PTR [rax+0x18],rsi
 100aa64:	mov    rax,QWORD PTR [rip+0x106c5]        # 0x101b130
 100aa6b:	xor    rax,rsp
 100aa6e:	mov    QWORD PTR [rsp+0x190],rax
 100aa76:	mov    edi,r8d
 100aa79:	mov    esi,edx
 100aa7b:	mov    rbx,rcx
 100aa7e:	mov    QWORD PTR [rsp+0x60],rcx
 100aa83:	cmp    DWORD PTR [rcx+0x48],0x0
 100aa87:	jne    0x100aed0
 100aa8d:	mov    ecx,0x38
 100aa92:	call   0x10099ec
 100aa97:	mov    QWORD PTR [rsp+0x70],rax
 100aa9c:	test   rax,rax
 100aa9f:	je     0x100aaae
 100aaa1:	mov    rcx,rax
 100aaa4:	call   0x100a4f0
 100aaa9:	xor    r13d,r13d
 100aaac:	jmp    0x100aab4
 100aaae:	xor    r13d,r13d
 100aab1:	mov    eax,r13d
 100aab4:	mov    QWORD PTR [rbx+0x70],rax
 100aab8:	test   rax,rax
 100aabb:	jne    0x100aad6
 100aabd:	mov    DWORD PTR [rsp+0x50],0x8007000e
 100aac5:	lea    rdx,[rip+0xf27c]        # 0x1019d48
 100aacc:	lea    rcx,[rsp+0x50]
 100aad1:	call   0x101067c
 100aad6:	mov    DWORD PTR [rbx+0x48],0x1
 100aadd:	mov    DWORD PTR [rbx],r13d
 100aae0:	mov    QWORD PTR [rbx+0x18],0x0
 100aae8:	mov    DWORD PTR [rbx+0x20],0x1
 100aaef:	mov    DWORD PTR [rbx+0x30],0xffffffff
 100aaf6:	mov    DWORD PTR [rbx+0x24],0x1
 100aafd:	mov    QWORD PTR [rbx+0x28],0x1
 100ab05:	mov    QWORD PTR [rbx+0x10],r13
 100ab09:	mov    DWORD PTR [rbx+0x34],r13d
 100ab0d:	mov    DWORD PTR [rbx+0x54],r13d
 100ab11:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
 100ab19:	mov    DWORD PTR [rbx+0x5c],r13d
 100ab1d:	call   QWORD PTR [rip+0xffffffffffff669d]        # 0x10011c0
 100ab23:	mov    DWORD PTR [rbx+0x38],eax
 100ab26:	mov    DWORD PTR [rbx+0x1078],r13d
 100ab2d:	mov    DWORD PTR [rbx+0x50],edi
 100ab30:	lea    rax,[rip+0xffffffffffff6999]        # 0x10014d0
 100ab37:	lea    rcx,[rip+0xffffffffffff6a92]        # 0x10015d0
 100ab3e:	test   edi,edi
 100ab40:	cmove  rax,rcx
 100ab44:	mov    QWORD PTR [rip+0x10c2d],rax        # 0x101b778
 100ab4b:	lea    rcx,[rsp+0x58]
 100ab50:	call   QWORD PTR [rip+0xffffffffffff667a]        # 0x10011d0
 100ab56:	test   eax,eax
 100ab58:	je     0x100ab60
 100ab5a:	mov    eax,DWORD PTR [rsp+0x58]
 100ab5e:	jmp    0x100ab66
 100ab60:	call   QWORD PTR [rip+0xffffffffffff6662]        # 0x10011c8
 100ab66:	mov    DWORD PTR [rbx+0x4c],eax
 100ab69:	mov    rcx,rbx
 100ab6c:	call   0x100b6b0
 100ab71:	mov    r11d,DWORD PTR [rip+0x10c08]        # 0x101b780
 100ab78:	test   r11d,r11d
 100ab7b:	je     0x100ac46
 100ab81:	mov    DWORD PTR [rsp+0x30],r13d
 100ab86:	mov    QWORD PTR [rsp+0x28],r13
 100ab8b:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100ab93:	xor    r9d,r9d
 100ab96:	mov    r8d,0x18f
 100ab9c:	lea    rdx,[rip+0xffffffffffff6e4d]        # 0x10019f0
 100aba3:	lea    rcx,[rip+0x10bd6]        # 0x101b780
 100abaa:	call   0x100af10
 100abaf:	lea    rdx,[rip+0xffffffffffff6eea]        # 0x1001aa0
 100abb6:	lea    rcx,[rip+0x10bc3]        # 0x101b780
 100abbd:	call   0x100b220
 100abc2:	xor    edx,edx
 100abc4:	lea    rcx,[rip+0x10bb5]        # 0x101b780
 100abcb:	call   0x100b150
 100abd0:	mov    r11d,DWORD PTR [rip+0x10ba9]        # 0x101b780
 100abd7:	test   r11d,r11d
 100abda:	je     0x100ac46
 100abdc:	mov    DWORD PTR [rsp+0x30],r13d
 100abe1:	mov    QWORD PTR [rsp+0x28],r13
 100abe6:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100abee:	xor    r9d,r9d
 100abf1:	mov    r8d,0x191
 100abf7:	lea    rdx,[rip+0xffffffffffff6df2]        # 0x10019f0
 100abfe:	lea    rcx,[rip+0x10b7b]        # 0x101b780
 100ac05:	call   0x100af10
 100ac0a:	mov    r11d,DWORD PTR [rbx+0x4c]
 100ac0e:	mov    DWORD PTR [rsp+0x20],r11d
 100ac13:	mov    r9d,DWORD PTR [rbx+0x38]
 100ac17:	mov    r8,QWORD PTR [rip+0x10b5a]        # 0x101b778
 100ac1e:	lea    rdx,[rip+0xffffffffffff704b]        # 0x1001c70
 100ac25:	lea    rcx,[rip+0x10b54]        # 0x101b780
 100ac2c:	call   0x100b220
 100ac31:	xor    edx,edx
 100ac33:	lea    rcx,[rip+0x10b46]        # 0x101b780
 100ac3a:	call   0x100b150
 100ac3f:	mov    r11d,DWORD PTR [rip+0x10b3a]        # 0x101b780
 100ac46:	test   esi,esi
 100ac48:	jne    0x100ac9e
 100ac4a:	test   r11d,r11d
 100ac4d:	je     0x100ac9e
 100ac4f:	mov    DWORD PTR [rsp+0x30],r13d
 100ac54:	mov    QWORD PTR [rsp+0x28],r13
 100ac59:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100ac61:	xor    r9d,r9d
 100ac64:	mov    r8d,0x194
 100ac6a:	lea    rdx,[rip+0xffffffffffff6d7f]        # 0x10019f0
 100ac71:	lea    rcx,[rip+0x10b08]        # 0x101b780
 100ac78:	call   0x100af10
 100ac7d:	lea    rdx,[rip+0xffffffffffff706c]        # 0x1001cf0
 100ac84:	lea    rcx,[rip+0x10af5]        # 0x101b780
 100ac8b:	call   0x100b220
 100ac90:	xor    edx,edx
 100ac92:	lea    rcx,[rip+0x10ae7]        # 0x101b780
 100ac99:	call   0x100b150
 100ac9e:	mov    WORD PTR [rsp+0x90],r13w
 100aca7:	xor    edx,edx
 100aca9:	mov    r8d,0xfe
 100acaf:	lea    rcx,[rsp+0x92]
 100acb7:	call   0x10107ba
 100acbc:	lea    rcx,[rbx+0x40]
 100acc0:	call   QWORD PTR [rip+0xffffffffffff66ca]        # 0x1001390
 100acc6:	lea    rcx,[rsp+0x78]
 100accb:	call   QWORD PTR [rip+0xffffffffffff6497]        # 0x1001168
 100acd1:	movzx  ebx,WORD PTR [rsp+0x84]
 100acd9:	movzx  edi,WORD PTR [rsp+0x82]
 100ace1:	movzx  esi,WORD PTR [rsp+0x80]
 100ace9:	movzx  r14d,WORD PTR [rsp+0x78]
 100acef:	movzx  r15d,WORD PTR [rsp+0x7e]
 100acf5:	movzx  r12d,WORD PTR [rsp+0x7a]
 100acfb:	call   0x10078b0
 100ad00:	mov    r9,rax
 100ad03:	mov    DWORD PTR [rsp+0x48],ebx
 100ad07:	mov    DWORD PTR [rsp+0x40],edi
 100ad0b:	mov    DWORD PTR [rsp+0x38],esi
 100ad0f:	mov    DWORD PTR [rsp+0x30],r14d
 100ad14:	mov    DWORD PTR [rsp+0x28],r15d
 100ad19:	mov    DWORD PTR [rsp+0x20],r12d
 100ad1e:	lea    r8,[rip+0xffffffffffff6e83]        # 0x1001ba8
 100ad25:	mov    edx,0x80
 100ad2a:	lea    rcx,[rsp+0x90]
 100ad32:	call   0x100a460
 100ad37:	test   eax,eax
 100ad39:	js     0x100ad9f
 100ad3b:	cmp    DWORD PTR [rip+0x10a3e],0x0        # 0x101b780
 100ad42:	je     0x100aed0
 100ad48:	mov    DWORD PTR [rsp+0x30],r13d
 100ad4d:	mov    QWORD PTR [rsp+0x28],r13
 100ad52:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100ad5a:	xor    r9d,r9d
 100ad5d:	mov    r8d,0x1a3
 100ad63:	lea    rdx,[rip+0xffffffffffff6c86]        # 0x10019f0
 100ad6a:	lea    rcx,[rip+0x10a0f]        # 0x101b780
 100ad71:	call   0x100af10
 100ad76:	lea    r8,[rsp+0x90]
 100ad7e:	lea    rdx,[rip+0xffffffffffff6e4b]        # 0x1001bd0
 100ad85:	lea    rcx,[rip+0x109f4]        # 0x101b780
 100ad8c:	call   0x100b220
 100ad91:	xor    edx,edx
 100ad93:	lea    rcx,[rip+0x109e6]        # 0x101b780
 100ad9a:	call   0x100b150
 100ad9f:	cmp    DWORD PTR [rip+0x109da],0x0        # 0x101b780
 100ada6:	je     0x100aed0
 100adac:	mov    DWORD PTR [rsp+0x30],r13d
 100adb1:	mov    QWORD PTR [rsp+0x28],r13
 100adb6:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100adbe:	xor    r9d,r9d
 100adc1:	mov    r8d,0x1a5
 100adc7:	lea    rdx,[rip+0xffffffffffff6c22]        # 0x10019f0
 100adce:	lea    rcx,[rip+0x109ab]        # 0x101b780
 100add5:	call   0x100af10
 100adda:	call   QWORD PTR [rip+0xffffffffffff6448]        # 0x1001228
 100ade0:	mov    r8,rax
 100ade3:	lea    rdx,[rip+0xffffffffffff6e56]        # 0x1001c40
 100adea:	lea    rcx,[rip+0x1098f]        # 0x101b780
 100adf1:	call   0x100b220
 100adf6:	xor    edx,edx
 100adf8:	lea    rcx,[rip+0x10981]        # 0x101b780
 100adff:	call   0x100b150
 100ae04:	cmp    DWORD PTR [rip+0x10975],0x0        # 0x101b780
 100ae0b:	je     0x100aed0
 100ae11:	mov    DWORD PTR [rsp+0x30],r13d
 100ae16:	mov    QWORD PTR [rsp+0x28],r13
 100ae1b:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100ae23:	xor    r9d,r9d
 100ae26:	mov    r8d,0x1a6
 100ae2c:	lea    rdx,[rip+0xffffffffffff6bbd]        # 0x10019f0
 100ae33:	lea    rcx,[rip+0x10946]        # 0x101b780
 100ae3a:	call   0x100af10
 100ae3f:	mov    DWORD PTR [rsp+0x28],0x3c
 100ae47:	mov    DWORD PTR [rsp+0x20],0x834
 100ae4f:	xor    r9d,r9d
 100ae52:	lea    r8d,[r9+0xb]
 100ae56:	lea    rdx,[rip+0xffffffffffff6ef3]        # 0x1001d50
 100ae5d:	lea    rcx,[rip+0x1091c]        # 0x101b780
 100ae64:	call   0x100b220
 100ae69:	xor    edx,edx
 100ae6b:	lea    rcx,[rip+0x1090e]        # 0x101b780
 100ae72:	call   0x100b150
 100ae77:	cmp    DWORD PTR [rip+0x10902],0x0        # 0x101b780
 100ae7e:	je     0x100aed0
 100ae80:	mov    DWORD PTR [rsp+0x30],r13d
 100ae85:	mov    QWORD PTR [rsp+0x28],r13
 100ae8a:	mov    DWORD PTR [rsp+0x20],0xffffffff
 100ae92:	xor    r9d,r9d
 100ae95:	mov    r8d,0x1a7
 100ae9b:	lea    rdx,[rip+0xffffffffffff6b4e]        # 0x10019f0
 100aea2:	lea    rcx,[rip+0x108d7]        # 0x101b780
 100aea9:	call   0x100af10
 100aeae:	lea    rdx,[rip+0xffffffffffff6beb]        # 0x1001aa0
 100aeb5:	lea    rcx,[rip+0x108c4]        # 0x101b780
 100aebc:	call   0x100b220
 100aec1:	xor    edx,edx
 100aec3:	lea    rcx,[rip+0x108b6]        # 0x101b780
 100aeca:	call   0x100b150
 100aecf:	nop
 100aed0:	mov    rcx,QWORD PTR [rsp+0x190]
 100aed8:	xor    rcx,rsp
 100aedb:	call   0x1009d50
 100aee0:	lea    r11,[rsp+0x1a0]
 100aee8:	mov    rbx,QWORD PTR [r11+0x38]
 100aeec:	mov    rsi,QWORD PTR [r11+0x40]
 100aef0:	mov    rsp,r11
 100aef3:	pop    r15
 100aef5:	pop    r14
 100aef7:	pop    r13
 100aef9:	pop    r12
 100aefb:	pop    rdi
 100aefc:	ret    
 100aefd:	int3   
 100aefe:	int3   
 100aeff:	int3   
 100af00:	int3   
 100af01:	int3   
 100af02:	int3   
 100af03:	int3   
 100af04:	int3   
 100af05:	int3   
 100af06:	int3   
 100af07:	int3   
 100af08:	int3   
 100af09:	int3   
 100af0a:	int3   
 100af0b:	int3   
 100af0c:	int3   
 100af0d:	int3   
 100af0e:	int3   
 100af0f:	int3   
 100af10:	mov    QWORD PTR [rsp+0x18],rbp
 100af15:	mov    QWORD PTR [rsp+0x20],rsi
 100af1a:	push   rdi
 100af1b:	sub    rsp,0x70
 100af1f:	mov    rsi,rcx
 100af22:	mov    rcx,QWORD PTR [rcx+0x70]
 100af26:	mov    ebp,r8d
 100af29:	mov    rdi,rdx
 100af2c:	call   0x100a540
 100af31:	cmp    DWORD PTR [rsi],0x0
 100af34:	je     0x100b12d
 100af3a:	mov    eax,DWORD PTR [rsi+0x30]
 100af3d:	test   DWORD PTR [rsp+0xa0],eax
 100af44:	je     0x100b12d
 100af4a:	mov    QWORD PTR [rsp+0x88],rbx
 100af52:	xor    ebx,ebx
 100af54:	test   rdi,rdi
 100af57:	jne    0x100af66
 100af59:	lea    rax,[rip+0xffffffffffff6f28]        # 0x1001e88
 100af60:	mov    QWORD PTR [rsi+0x60],rax
 100af64:	jmp    0x100afaa
 100af66:	or     rax,0xffffffffffffffff
 100af6a:	nop    WORD PTR [rax+rax*1+0x0]
 100af70:	inc    rax
 100af73:	cmp    WORD PTR [rdi+rax*2],bx
 100af77:	jne    0x100af70
 100af79:	dec    rax
 100af7c:	mov    ecx,ebx
 100af7e:	lea    rax,[rdi+rax*2]
 100af82:	cmp    rax,rdi
 100af85:	jbe    0x100afa6
 100af87:	cmp    ecx,0x3
 100af8a:	jge    0x100b021
 100af90:	sub    rax,0x2
 100af94:	cmp    WORD PTR [rax],0x5c
 100af98:	je     0x100af9f
 100af9a:	cmp    rax,rdi
 100af9d:	ja     0x100af90
 100af9f:	inc    ecx
 100afa1:	cmp    rax,rdi
 100afa4:	ja     0x100af87
 100afa6:	mov    QWORD PTR [rsi+0x60],rdi
 100afaa:	mov    rax,QWORD PTR [rsp+0xa8]
 100afb2:	mov    DWORD PTR [rsi+0x5c],ebp
 100afb5:	mov    QWORD PTR [rsi+0x68],rax
 100afb9:	mov    eax,DWORD PTR [rsp+0xb0]
 100afc0:	mov    DWORD PTR [rsi+0x58],eax
 100afc3:	cmp    DWORD PTR [rsi+0x18],ebx
 100afc6:	je     0x100b11e
 100afcc:	mov    rax,QWORD PTR [rsi+0x10]
 100afd0:	mov    QWORD PTR [rsp+0x30],rbx
 100afd5:	lea    rcx,[rip+0xffffffffffff9d40]        # 0x1004d1c
 100afdc:	test   rax,rax
 100afdf:	mov    edx,0x40000000
 100afe4:	mov    DWORD PTR [rsp+0x28],0x100080
 100afec:	cmovne rcx,rax
 100aff0:	xor    r9d,r9d
 100aff3:	mov    DWORD PTR [rsp+0x20],0x4
 100affb:	lea    r8d,[r9+0x3]
 100afff:	call   QWORD PTR [rip+0xffffffffffff6153]        # 0x1001158
 100b005:	mov    QWORD PTR [rsi+0x8],rax
 100b009:	cmp    rax,0xffffffffffffffff
 100b00d:	jne    0x100b033
 100b00f:	call   QWORD PTR [rip+0xffffffffffff6263]        # 0x1001278
 100b015:	lea    rdx,[rip+0xffffffffffff6ea4]        # 0x1001ec0
 100b01c:	jmp    0x100b113
 100b021:	cmp    rax,rdi
 100b024:	jbe    0x100afa6
 100b026:	add    rax,0x2
 100b02a:	mov    QWORD PTR [rsi+0x60],rax
 100b02e:	jmp    0x100afaa
 100b033:	lea    rcx,[rsp+0x50]
 100b038:	mov    r9d,0x1
 100b03e:	xor    r8d,r8d
 100b041:	mov    QWORD PTR [rsp+0x28],rcx
 100b046:	lea    edx,[r9+0x1]
 100b04a:	mov    rcx,rax
 100b04d:	mov    QWORD PTR [rsp+0x50],rbx
 100b052:	mov    QWORD PTR [rsp+0x58],rbx
 100b057:	mov    QWORD PTR [rsp+0x60],rbx
 100b05c:	mov    QWORD PTR [rsp+0x68],rbx
 100b061:	mov    DWORD PTR [rsp+0x20],ebx
 100b065:	call   QWORD PTR [rip+0xffffffffffff612d]        # 0x1001198
 100b06b:	mov    rcx,QWORD PTR [rsi+0x8]
 100b06f:	test   eax,eax
 100b071:	jne    0x100b093
 100b073:	call   QWORD PTR [rip+0xffffffffffff61c7]        # 0x1001240
 100b079:	mov    QWORD PTR [rsi+0x8],0xffffffffffffffff
 100b081:	call   QWORD PTR [rip+0xffffffffffff61f1]        # 0x1001278
 100b087:	lea    rdx,[rip+0xffffffffffff6ed2]        # 0x1001f60
 100b08e:	jmp    0x100b113
 100b093:	lea    rdx,[rsp+0x48]
 100b098:	call   QWORD PTR [rip+0xffffffffffff60ea]        # 0x1001188
 100b09e:	test   eax,eax
 100b0a0:	je     0x100b0d5
 100b0a2:	cmp    QWORD PTR [rsp+0x48],rbx
 100b0a7:	jne    0x100b0d5
 100b0a9:	mov    rcx,QWORD PTR [rsi+0x8]
 100b0ad:	lea    r9,[rsp+0x40]
 100b0b2:	lea    rdx,[rsp+0x80]
 100b0ba:	mov    r8d,0x2
 100b0c0:	mov    WORD PTR [rsp+0x80],0xfeff
 100b0ca:	mov    QWORD PTR [rsp+0x20],rbx
 100b0cf:	call   QWORD PTR [rip+0xffffffffffff60ab]        # 0x1001180
 100b0d5:	mov    rcx,QWORD PTR [rsi+0x8]
 100b0d9:	mov    r9d,0x2
 100b0df:	xor    r8d,r8d
 100b0e2:	mov    rdx,rbx
 100b0e5:	mov    QWORD PTR [rsp+0x48],rbx
 100b0ea:	call   QWORD PTR [rip+0xffffffffffff6080]        # 0x1001170
 100b0f0:	test   eax,eax
 100b0f2:	jne    0x100b11e
 100b0f4:	mov    rcx,QWORD PTR [rsi+0x8]
 100b0f8:	call   QWORD PTR [rip+0xffffffffffff6142]        # 0x1001240
 100b0fe:	mov    QWORD PTR [rsi+0x8],0xffffffffffffffff
 100b106:	call   QWORD PTR [rip+0xffffffffffff616c]        # 0x1001278
 100b10c:	lea    rdx,[rip+0xffffffffffff6f1d]        # 0x1002030
 100b113:	mov    r8d,eax
 100b116:	mov    rcx,rsi
 100b119:	call   0x100b220
 100b11e:	mov    rbx,QWORD PTR [rsp+0x88]
 100b126:	mov    DWORD PTR [rsi+0x54],0x1
 100b12d:	lea    r11,[rsp+0x70]
 100b132:	xor    eax,eax
 100b134:	mov    rbp,QWORD PTR [r11+0x20]
 100b138:	mov    rsi,QWORD PTR [r11+0x28]
 100b13c:	mov    rsp,r11
 100b13f:	pop    rdi
 100b140:	ret    
 100b141:	int3   
 100b142:	int3   
 100b143:	int3   
 100b144:	int3   
 100b145:	int3   
 100b146:	int3   
 100b147:	int3   
 100b148:	int3   
 100b149:	int3   
 100b14a:	int3   
 100b14b:	int3   
 100b14c:	int3   
 100b14d:	int3   
 100b14e:	int3   
 100b14f:	int3   
 100b150:	mov    r11,rsp
 100b153:	mov    QWORD PTR [r11+0x10],rbx
 100b157:	push   rdi
 100b158:	sub    rsp,0x50
 100b15c:	mov    rbx,rcx
 100b15f:	mov    rcx,QWORD PTR [rcx+0x8]
 100b163:	xor    edi,edi
 100b165:	cmp    rcx,0xffffffffffffffff
 100b169:	je     0x100b1cf
 100b16b:	lea    rax,[r11-0x28]
 100b16f:	lea    r8d,[rdi+0x1]
 100b173:	xor    r9d,r9d
 100b176:	xor    edx,edx
 100b178:	mov    QWORD PTR [r11-0x28],rdi
 100b17c:	mov    QWORD PTR [r11-0x20],rdi
 100b180:	mov    QWORD PTR [r11-0x38],rax
 100b184:	mov    QWORD PTR [r11-0x18],rdi
 100b188:	mov    QWORD PTR [r11-0x10],rdi
 100b18c:	call   QWORD PTR [rip+0xffffffffffff5ffe]        # 0x1001190
 100b192:	test   eax,eax
 100b194:	jne    0x100b1ae
 100b196:	call   QWORD PTR [rip+0xffffffffffff60dc]        # 0x1001278
 100b19c:	lea    rdx,[rip+0xffffffffffff6f5d]        # 0x1002100
 100b1a3:	mov    rcx,rbx
 100b1a6:	mov    r8d,eax
 100b1a9:	call   0x100b220
 100b1ae:	cmp    DWORD PTR [rbx+0x2c],edi
 100b1b1:	je     0x100b1bd
 100b1b3:	mov    rcx,QWORD PTR [rbx+0x8]
 100b1b7:	call   QWORD PTR [rip+0xffffffffffff5fbb]        # 0x1001178
 100b1bd:	mov    rcx,QWORD PTR [rbx+0x8]
 100b1c1:	call   QWORD PTR [rip+0xffffffffffff6079]        # 0x1001240
 100b1c7:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
 100b1cf:	mov    rcx,QWORD PTR [rbx+0x70]
 100b1d3:	mov    QWORD PTR [rbx+0x60],rdi
 100b1d7:	mov    QWORD PTR [rbx+0x68],rdi
 100b1db:	mov    DWORD PTR [rbx+0x5c],edi
 100b1de:	mov    DWORD PTR [rbx+0x54],edi
 100b1e1:	cmp    DWORD PTR [rcx+0x30],edi
 100b1e4:	jne    0x100b200
 100b1e6:	lea    rdx,[rip+0xeb5b]        # 0x1019d48
 100b1ed:	lea    rcx,[rsp+0x60]
 100b1f2:	mov    DWORD PTR [rsp+0x60],0x8007000e
 100b1fa:	call   0x101067c
 100b1ff:	int3   
 100b200:	add    rcx,0x8
 100b204:	call   QWORD PTR [rip+0xffffffffffff5f96]        # 0x10011a0
 100b20a:	mov    rbx,QWORD PTR [rsp+0x68]
 100b20f:	xor    eax,eax
 100b211:	add    rsp,0x50
 100b215:	pop    rdi
 100b216:	ret    
 100b217:	int3   
 100b218:	int3   
 100b219:	int3   
 100b21a:	int3   
 100b21b:	int3   
 100b21c:	int3   
 100b21d:	int3   
 100b21e:	int3   
 100b21f:	int3   
 100b220:	mov    rax,rsp
 100b223:	mov    QWORD PTR [rax+0x10],rdx
 100b227:	mov    QWORD PTR [rax+0x18],r8
 100b22b:	mov    QWORD PTR [rax+0x20],r9
 100b22f:	push   r14
 100b231:	sub    rsp,0x60
 100b235:	cmp    DWORD PTR [rcx+0x54],0x0
 100b239:	mov    r14,rcx
 100b23c:	je     0x100b458
 100b242:	cmp    DWORD PTR [rcx+0x28],0x0
 100b246:	mov    QWORD PTR [rax-0x10],rbx
 100b24a:	mov    QWORD PTR [rax-0x18],rbp
 100b24e:	mov    QWORD PTR [rax-0x20],rsi
 100b252:	lea    rbx,[rcx+0x78]
 100b256:	mov    QWORD PTR [rax-0x28],rdi
 100b25a:	je     0x100b27d
 100b25c:	call   QWORD PTR [rip+0xffffffffffff5f66]        # 0x10011c8
 100b262:	mov    ebp,0x800
 100b267:	lea    r8,[rip+0xffffffffffff6f32]        # 0x10021a0
 100b26e:	mov    edx,ebp
 100b270:	mov    rcx,rbx
 100b273:	mov    r9d,eax
 100b276:	call   0x1006ab0
 100b27b:	jmp    0x100b293
 100b27d:	mov    ebp,0x800
 100b282:	lea    r8,[rip+0xffffffffffff6f27]        # 0x10021b0
 100b289:	mov    rcx,rbx
 100b28c:	mov    edx,ebp
 100b28e:	call   0x1006ab0
 100b293:	or     rdi,0xffffffffffffffff
 100b297:	mov    rsi,rdi
 100b29a:	nop    WORD PTR [rax+rax*1+0x0]
 100b2a0:	inc    rsi
 100b2a3:	cmp    WORD PTR [rbx+rsi*2],0x0
 100b2a8:	jne    0x100b2a0
 100b2aa:	call   QWORD PTR [rip+0xffffffffffff5fa0]        # 0x1001250
 100b2b0:	mov    r8d,DWORD PTR [r14+0x4c]
 100b2b4:	mov    r9d,DWORD PTR [r14+0x38]
 100b2b8:	mov    DWORD PTR [rsp+0x28],r8d
 100b2bd:	lea    rcx,[r14+0x78]
 100b2c1:	mov    rdx,rbp
 100b2c4:	lea    r8,[rip+0xffffffffffff6eed]        # 0x10021b8
 100b2cb:	lea    rcx,[rcx+rsi*2]
 100b2cf:	sub    rdx,rsi
 100b2d2:	mov    DWORD PTR [rsp+0x20],eax
 100b2d6:	call   0x1006ab0
 100b2db:	cmp    DWORD PTR [r14+0x24],0x0
 100b2e0:	je     0x100b315
 100b2e2:	mov    rax,rdi
 100b2e5:	inc    rax
 100b2e8:	cmp    WORD PTR [rbx+rax*2],0x0
 100b2ed:	jne    0x100b2e5
 100b2ef:	mov    r9,QWORD PTR [r14+0x60]
 100b2f3:	lea    rcx,[r14+0x78]
 100b2f7:	mov    rdx,rbp
 100b2fa:	sub    rdx,rax
 100b2fd:	lea    rcx,[rcx+rax*2]
 100b301:	mov    eax,DWORD PTR [r14+0x5c]
 100b305:	lea    r8,[rip+0xffffffffffff6edc]        # 0x10021e8
 100b30c:	mov    DWORD PTR [rsp+0x20],eax
 100b310:	call   0x1006ab0
 100b315:	cmp    DWORD PTR [r14+0x1c],0x0
 100b31a:	je     0x100b325
 100b31c:	mov    rcx,rbx
 100b31f:	call   QWORD PTR [rip+0xffffffffffff5e3b]        # 0x1001160
 100b325:	mov    rcx,QWORD PTR [r14+0x8]
 100b329:	xor    esi,esi
 100b32b:	cmp    rcx,0xffffffffffffffff
 100b32f:	je     0x100b354
 100b331:	mov    rax,rdi
 100b334:	inc    rax
 100b337:	cmp    WORD PTR [rbx+rax*2],si
 100b33b:	jne    0x100b334
 100b33d:	lea    r8d,[rax+rax*1]
 100b341:	lea    r9,[rsp+0x30]
 100b346:	mov    rdx,rbx
 100b349:	mov    QWORD PTR [rsp+0x20],rsi
 100b34e:	call   QWORD PTR [rip+0xffffffffffff5e2c]        # 0x1001180
 100b354:	mov    r8,QWORD PTR [rsp+0x78]
 100b359:	lea    r9,[rsp+0x80]
 100b361:	mov    edx,0x7ff
 100b366:	mov    rcx,rbx
 100b369:	call   QWORD PTR [rip+0xffffffffffff5f39]        # 0x10012a8
 100b36f:	test   eax,eax
 100b371:	js     0x100b37f
 100b373:	cdqe   
 100b375:	cmp    rax,0x7ff
 100b37b:	ja     0x100b37f
 100b37d:	jne    0x100b386
 100b37f:	mov    WORD PTR [rbx+0xffe],si
 100b386:	cmp    DWORD PTR [r14+0x1c],esi
 100b38a:	je     0x100b395
 100b38c:	mov    rcx,rbx
 100b38f:	call   QWORD PTR [rip+0xffffffffffff5dcb]        # 0x1001160
 100b395:	mov    rcx,QWORD PTR [r14+0x8]
 100b399:	cmp    rcx,0xffffffffffffffff
 100b39d:	je     0x100b3c2
 100b39f:	mov    rax,rdi
 100b3a2:	inc    rax
 100b3a5:	cmp    WORD PTR [rbx+rax*2],si
 100b3a9:	jne    0x100b3a2
 100b3ab:	lea    r8d,[rax+rax*1]
 100b3af:	lea    r9,[rsp+0x30]
 100b3b4:	mov    rdx,rbx
 100b3b7:	mov    QWORD PTR [rsp+0x20],rsi
 100b3bc:	call   QWORD PTR [rip+0xffffffffffff5dbe]        # 0x1001180
 100b3c2:	lea    rdx,[rip+0xffffffffffff6e37]        # 0x1002200
 100b3c9:	mov    rcx,rbx
 100b3cc:	sub    rdx,rbx
 100b3cf:	nop
 100b3d0:	lea    rax,[rbp+0x7ffff7fe]
 100b3d7:	test   rax,rax
 100b3da:	je     0x100b3f3
 100b3dc:	movzx  eax,WORD PTR [rdx+rcx*1]
 100b3e0:	test   ax,ax
 100b3e3:	je     0x100b3f3
 100b3e5:	mov    WORD PTR [rcx],ax
 100b3e8:	add    rcx,0x2
 100b3ec:	dec    rbp
 100b3ef:	jne    0x100b3d0
 100b3f1:	jmp    0x100b3f8
 100b3f3:	test   rbp,rbp
 100b3f6:	jne    0x100b3fc
 100b3f8:	sub    rcx,0x2
 100b3fc:	mov    rbp,QWORD PTR [rsp+0x50]
 100b401:	mov    WORD PTR [rcx],si
 100b404:	cmp    DWORD PTR [r14+0x1c],esi
 100b408:	je     0x100b413
 100b40a:	mov    rcx,rbx
 100b40d:	call   QWORD PTR [rip+0xffffffffffff5d4d]        # 0x1001160
 100b413:	mov    rcx,QWORD PTR [r14+0x8]
 100b417:	cmp    rcx,0xffffffffffffffff
 100b41b:	je     0x100b440
 100b41d:	nop    DWORD PTR [rax]
 100b420:	inc    rdi
 100b423:	cmp    WORD PTR [rbx+rdi*2],si
 100b427:	jne    0x100b420
 100b429:	lea    r8d,[rdi+rdi*1]
 100b42d:	lea    r9,[rsp+0x30]
 100b432:	mov    rdx,rbx
 100b435:	mov    QWORD PTR [rsp+0x20],rsi
 100b43a:	call   QWORD PTR [rip+0xffffffffffff5d40]        # 0x1001180
 100b440:	mov    rsi,QWORD PTR [rsp+0x48]
 100b445:	mov    rbx,QWORD PTR [rsp+0x58]
 100b44a:	mov    rdi,QWORD PTR [rsp+0x40]
 100b44f:	xor    eax,eax
 100b451:	add    rsp,0x60
 100b455:	pop    r14
 100b457:	ret    
 100b458:	xor    eax,eax
 100b45a:	add    rsp,0x60
 100b45e:	pop    r14
 100b460:	ret    
 100b461:	int3   
 100b462:	int3   
 100b463:	int3   
 100b464:	int3   
 100b465:	int3   
 100b466:	int3   
 100b467:	int3   
 100b468:	int3   
 100b469:	int3   
 100b46a:	int3   
 100b46b:	int3   
 100b46c:	int3   
 100b46d:	int3   
 100b46e:	int3   
 100b46f:	int3   
 100b470:	mov    rax,rsp
 100b473:	mov    QWORD PTR [rax+0x10],rdx
 100b477:	mov    QWORD PTR [rax+0x18],r8
 100b47b:	mov    QWORD PTR [rax+0x20],r9
 100b47f:	push   r15
 100b481:	sub    rsp,0x80
 100b488:	cmp    DWORD PTR [rcx+0x54],0x0
 100b48c:	mov    r15,rcx
 100b48f:	je     0x100b69c
 100b495:	cmp    DWORD PTR [rcx+0x28],0x0
 100b499:	mov    QWORD PTR [rax-0x10],rbx
 100b49d:	mov    QWORD PTR [rax-0x18],rbp
 100b4a1:	mov    QWORD PTR [rax-0x20],rsi
 100b4a5:	mov    QWORD PTR [rax-0x28],rdi
 100b4a9:	mov    QWORD PTR [rax-0x30],r14
 100b4ad:	lea    rdi,[rcx+0x78]
 100b4b1:	je     0x100b4d4
 100b4b3:	call   QWORD PTR [rip+0xffffffffffff5d0f]        # 0x10011c8
 100b4b9:	mov    ebp,0x800
 100b4be:	lea    r8,[rip+0xffffffffffff6cdb]        # 0x10021a0
 100b4c5:	mov    edx,ebp
 100b4c7:	mov    rcx,rdi
 100b4ca:	mov    r9d,eax
 100b4cd:	call   0x1006ab0
 100b4d2:	jmp    0x100b4ea
 100b4d4:	mov    ebp,0x800
 100b4d9:	lea    r8,[rip+0xffffffffffff6cd0]        # 0x10021b0
 100b4e0:	mov    rcx,rdi
 100b4e3:	mov    edx,ebp
 100b4e5:	call   0x1006ab0
 100b4ea:	or     rsi,0xffffffffffffffff
 100b4ee:	mov    r14,rsi
 100b4f1:	inc    r14
 100b4f4:	cmp    WORD PTR [rdi+r14*2],0x0
 100b4fa:	jne    0x100b4f1
 100b4fc:	cmp    DWORD PTR [r15+0x58],0x0
 100b501:	lea    rax,[rip+0xffffffffffff6d00]        # 0x1002208
 100b508:	lea    rbx,[rip+0xffffffffffff6d09]        # 0x1002218
 100b50f:	cmovne rbx,rax
 100b513:	call   QWORD PTR [rip+0xffffffffffff5d37]        # 0x1001250
 100b519:	mov    r8,QWORD PTR [r15+0x68]
 100b51d:	mov    r9d,DWORD PTR [r15+0x38]
 100b521:	mov    QWORD PTR [rsp+0x38],r8
 100b526:	mov    r8d,DWORD PTR [r15+0x4c]
 100b52a:	mov    QWORD PTR [rsp+0x30],rbx
 100b52f:	mov    DWORD PTR [rsp+0x28],r8d
 100b534:	mov    rdx,rbp
 100b537:	sub    rdx,r14
 100b53a:	add    r14,0x3c
 100b53e:	lea    r8,[rip+0xffffffffffff6ceb]        # 0x1002230
 100b545:	lea    rcx,[r15+r14*2]
 100b549:	mov    DWORD PTR [rsp+0x20],eax
 100b54d:	call   0x1006ab0
 100b552:	cmp    DWORD PTR [r15+0x1c],0x0
 100b557:	mov    r14,QWORD PTR [rsp+0x58]
 100b55c:	je     0x100b567
 100b55e:	mov    rcx,rdi
 100b561:	call   QWORD PTR [rip+0xffffffffffff5bf9]        # 0x1001160
 100b567:	mov    rcx,QWORD PTR [r15+0x8]
 100b56b:	xor    ebx,ebx
 100b56d:	cmp    rcx,0xffffffffffffffff
 100b571:	je     0x100b596
 100b573:	mov    rax,rsi
 100b576:	inc    rax
 100b579:	cmp    WORD PTR [rdi+rax*2],bx
 100b57d:	jne    0x100b576
 100b57f:	lea    r8d,[rax+rax*1]
 100b583:	lea    r9,[rsp+0x40]
 100b588:	mov    rdx,rdi
 100b58b:	mov    QWORD PTR [rsp+0x20],rbx
 100b590:	call   QWORD PTR [rip+0xffffffffffff5bea]        # 0x1001180
 100b596:	mov    r8,QWORD PTR [rsp+0x98]
 100b59e:	lea    r9,[rsp+0xa0]
 100b5a6:	mov    edx,0x7ff
 100b5ab:	mov    rcx,rdi
 100b5ae:	call   QWORD PTR [rip+0xffffffffffff5cf4]        # 0x10012a8
 100b5b4:	test   eax,eax
 100b5b6:	js     0x100b5c4
 100b5b8:	cdqe   
 100b5ba:	cmp    rax,0x7ff
 100b5c0:	ja     0x100b5c4
 100b5c2:	jne    0x100b5cb
 100b5c4:	mov    WORD PTR [rdi+0xffe],bx
 100b5cb:	cmp    DWORD PTR [r15+0x1c],ebx
 100b5cf:	je     0x100b5da
 100b5d1:	mov    rcx,rdi
 100b5d4:	call   QWORD PTR [rip+0xffffffffffff5b86]        # 0x1001160
 100b5da:	mov    rcx,QWORD PTR [r15+0x8]
 100b5de:	cmp    rcx,0xffffffffffffffff
 100b5e2:	je     0x100b607
 100b5e4:	mov    rax,rsi
 100b5e7:	inc    rax
 100b5ea:	cmp    WORD PTR [rdi+rax*2],bx
 100b5ee:	jne    0x100b5e7
 100b5f0:	lea    r8d,[rax+rax*1]
 100b5f4:	lea    r9,[rsp+0x40]
 100b5f9:	mov    rdx,rdi
 100b5fc:	mov    QWORD PTR [rsp+0x20],rbx
 100b601:	call   QWORD PTR [rip+0xffffffffffff5b79]        # 0x1001180
 100b607:	lea    rdx,[rip+0xffffffffffff6bf2]        # 0x1002200
 100b60e:	mov    rcx,rdi
 100b611:	sub    rdx,rdi
 100b614:	lea    rax,[rbp+0x7ffff7fe]
 100b61b:	test   rax,rax
 100b61e:	je     0x100b637
 100b620:	movzx  eax,WORD PTR [rdx+rcx*1]
 100b624:	test   ax,ax
 100b627:	je     0x100b637
 100b629:	mov    WORD PTR [rcx],ax
 100b62c:	add    rcx,0x2
 100b630:	dec    rbp
 100b633:	jne    0x100b614
 100b635:	jmp    0x100b63c
 100b637:	test   rbp,rbp
 100b63a:	jne    0x100b640
 100b63c:	sub    rcx,0x2
 100b640:	mov    rbp,QWORD PTR [rsp+0x70]
 100b645:	mov    WORD PTR [rcx],bx
 100b648:	cmp    DWORD PTR [r15+0x1c],ebx
 100b64c:	je     0x100b657
 100b64e:	mov    rcx,rdi
 100b651:	call   QWORD PTR [rip+0xffffffffffff5b09]        # 0x1001160
 100b657:	mov    rcx,QWORD PTR [r15+0x8]
 100b65b:	cmp    rcx,0xffffffffffffffff
 100b65f:	je     0x100b681
 100b661:	inc    rsi
 100b664:	cmp    WORD PTR [rdi+rsi*2],bx
 100b668:	jne    0x100b661
 100b66a:	lea    r8d,[rsi+rsi*1]
 100b66e:	lea    r9,[rsp+0x40]
 100b673:	mov    rdx,rdi
 100b676:	mov    QWORD PTR [rsp+0x20],rbx
 100b67b:	call   QWORD PTR [rip+0xffffffffffff5aff]        # 0x1001180
 100b681:	mov    rsi,QWORD PTR [rsp+0x68]
 100b686:	mov    rbx,QWORD PTR [rsp+0x78]
 100b68b:	mov    rdi,QWORD PTR [rsp+0x60]
 100b690:	xor    eax,eax
 100b692:	add    rsp,0x80
 100b699:	pop    r15
 100b69b:	ret    
 100b69c:	xor    eax,eax
 100b69e:	add    rsp,0x80
 100b6a5:	pop    r15
 100b6a7:	ret    
 100b6a8:	int3   
 100b6a9:	int3   
 100b6aa:	int3   
 100b6ab:	int3   
 100b6ac:	int3   
 100b6ad:	int3   
 100b6ae:	int3   
 100b6af:	int3   
 100b6b0:	rex push rbp
 100b6b2:	push   rsi
 100b6b3:	push   rdi
 100b6b4:	push   r14
 100b6b6:	push   r15
 100b6b8:	mov    rbp,rsp
 100b6bb:	sub    rsp,0x70
 100b6bf:	mov    QWORD PTR [rbp-0x40],0xfffffffffffffffe
 100b6c7:	mov    QWORD PTR [rsp+0xb8],rbx
 100b6cf:	mov    rbx,rcx
 100b6d2:	xor    r15d,r15d
 100b6d5:	mov    r14d,r15d
 100b6d8:	mov    QWORD PTR [rbp-0x20],r15
 100b6dc:	mov    DWORD PTR [rbp-0x18],r15d
 100b6e0:	mov    QWORD PTR [rbp-0x10],r15
 100b6e4:	mov    edi,r15d
 100b6e7:	mov    QWORD PTR [rbp-0x38],r15
 100b6eb:	mov    DWORD PTR [rbp-0x30],r15d
 100b6ef:	mov    QWORD PTR [rbp-0x28],r15
 100b6f3:	mov    DWORD PTR [rcx],r15d
 100b6f6:	mov    DWORD PTR [rcx+0x1078],r15d
 100b6fd:	mov    QWORD PTR [rbp+0x30],r15
 100b701:	lea    rax,[rbp+0x30]
 100b705:	mov    QWORD PTR [rsp+0x20],rax
 100b70a:	mov    r9d,0x20019
 100b710:	xor    r8d,r8d
 100b713:	lea    rdx,[rip+0xffffffffffff60ae]        # 0x10017c8
 100b71a:	mov    rcx,0xffffffff80000002
 100b721:	call   QWORD PTR [rip+0xffffffffffff5979]        # 0x10010a0
 100b727:	test   eax,eax
 100b729:	jne    0x100b791
 100b72b:	mov    DWORD PTR [rbp-0x18],r15d
 100b72f:	mov    r14,QWORD PTR [rbp+0x30]
 100b733:	mov    QWORD PTR [rbp-0x20],r14
 100b737:	mov    DWORD PTR [rbp-0x18],r15d
 100b73b:	mov    esi,r15d
 100b73e:	mov    DWORD PTR [rbp+0x38],r15d
 100b742:	mov    DWORD PTR [rbp+0x30],r15d
 100b746:	mov    DWORD PTR [rbp+0x40],0x4
 100b74d:	lea    rax,[rbp+0x40]
 100b751:	mov    QWORD PTR [rsp+0x28],rax
 100b756:	lea    rax,[rbp+0x38]
 100b75a:	mov    QWORD PTR [rsp+0x20],rax
 100b75f:	lea    r9,[rbp+0x30]
 100b763:	xor    r8d,r8d
 100b766:	lea    rdx,[rip+0xffffffffffff607b]        # 0x10017e8
 100b76d:	mov    rcx,r14
 100b770:	call   QWORD PTR [rip+0xffffffffffff5922]        # 0x1001098
 100b776:	cmp    DWORD PTR [rbp+0x30],0x4
 100b77a:	jne    0x100b782
 100b77c:	test   eax,eax
 100b77e:	cmove  esi,DWORD PTR [rbp+0x38]
 100b782:	mov    eax,r15d
 100b785:	cmp    esi,0x1
 100b788:	sete   al
 100b78b:	mov    DWORD PTR [rbx+0x1078],eax
 100b791:	mov    QWORD PTR [rbp+0x30],r15
 100b795:	lea    rax,[rbp+0x30]
 100b799:	mov    r9d,0x20019
 100b79f:	xor    r8d,r8d
 100b7a2:	mov    rcx,0xffffffff80000002
 100b7a9:	mov    QWORD PTR [rsp+0x20],rax
 100b7ae:	cmp    DWORD PTR [rbx+0x50],r8d
 100b7b2:	lea    rdx,[rip+0xffffffffffff5f97]        # 0x1001750
 100b7b9:	jne    0x100b7c2
 100b7bb:	lea    rdx,[rip+0xffffffffffff5f0e]        # 0x10016d0
 100b7c2:	call   QWORD PTR [rip+0xffffffffffff58d8]        # 0x10010a0
 100b7c8:	test   eax,eax
 100b7ca:	jne    0x100ba31
 100b7d0:	mov    rdi,QWORD PTR [rbp+0x30]
 100b7d4:	mov    DWORD PTR [rbp-0x30],r15d
 100b7d8:	mov    QWORD PTR [rbp-0x38],rdi
 100b7dc:	mov    DWORD PTR [rbp-0x30],r15d
 100b7e0:	mov    eax,r15d
 100b7e3:	test   eax,eax
 100b7e5:	jne    0x100ba31
 100b7eb:	lea    rdx,[rbx+0x10]
 100b7ef:	lea    r8,[rip+0xffffffffffff65a2]        # 0x1001d98
 100b7f6:	lea    rcx,[rbp-0x38]
 100b7fa:	call   0x100c4e0
 100b7ff:	mov    DWORD PTR [rbp+0x38],r15d
 100b803:	mov    DWORD PTR [rbp+0x30],r15d
 100b807:	mov    DWORD PTR [rbp+0x40],0x4
 100b80e:	lea    rax,[rbp+0x40]
 100b812:	mov    QWORD PTR [rsp+0x28],rax
 100b817:	lea    rax,[rbp+0x38]
 100b81b:	mov    QWORD PTR [rsp+0x20],rax
 100b820:	lea    r9,[rbp+0x30]
 100b824:	xor    r8d,r8d
 100b827:	lea    rdx,[rip+0xffffffffffff6582]        # 0x1001db0
 100b82e:	mov    rdi,QWORD PTR [rbp-0x38]
 100b832:	mov    rcx,rdi
 100b835:	call   QWORD PTR [rip+0xffffffffffff585d]        # 0x1001098
 100b83b:	cmp    DWORD PTR [rbp+0x30],0x4
 100b83f:	jne    0x100b84b
 100b841:	test   eax,eax
 100b843:	jne    0x100b84b
 100b845:	mov    eax,DWORD PTR [rbp+0x38]
 100b848:	mov    DWORD PTR [rbx+0x30],eax
 100b84b:	mov    DWORD PTR [rbp+0x38],r15d
 100b84f:	mov    DWORD PTR [rbp+0x30],r15d
 100b853:	mov    DWORD PTR [rbp+0x40],0x4
 100b85a:	lea    rax,[rbp+0x40]
 100b85e:	mov    QWORD PTR [rsp+0x28],rax
 100b863:	lea    rax,[rbp+0x38]
 100b867:	mov    QWORD PTR [rsp+0x20],rax
 100b86c:	lea    r9,[rbp+0x30]
 100b870:	xor    r8d,r8d
 100b873:	lea    rdx,[rip+0xffffffffffff654e]        # 0x1001dc8
 100b87a:	mov    rcx,rdi
 100b87d:	call   QWORD PTR [rip+0xffffffffffff5815]        # 0x1001098
 100b883:	cmp    DWORD PTR [rbp+0x30],0x4
 100b887:	jne    0x100b899
 100b889:	test   eax,eax
 100b88b:	jne    0x100b899
 100b88d:	mov    eax,r15d
 100b890:	cmp    DWORD PTR [rbp+0x38],eax
 100b893:	setne  al
 100b896:	mov    DWORD PTR [rbx+0x20],eax
 100b899:	mov    DWORD PTR [rbp+0x38],r15d
 100b89d:	mov    DWORD PTR [rbp+0x30],r15d
 100b8a1:	mov    DWORD PTR [rbp+0x40],0x4
 100b8a8:	lea    rax,[rbp+0x40]
 100b8ac:	mov    QWORD PTR [rsp+0x28],rax
 100b8b1:	lea    rax,[rbp+0x38]
 100b8b5:	mov    QWORD PTR [rsp+0x20],rax
 100b8ba:	lea    r9,[rbp+0x30]
 100b8be:	xor    r8d,r8d
 100b8c1:	lea    rdx,[rip+0xffffffffffff6520]        # 0x1001de8
 100b8c8:	mov    rcx,rdi
 100b8cb:	call   QWORD PTR [rip+0xffffffffffff57c7]        # 0x1001098
 100b8d1:	cmp    DWORD PTR [rbp+0x30],0x4
 100b8d5:	jne    0x100b8e7
 100b8d7:	test   eax,eax
 100b8d9:	jne    0x100b8e7
 100b8db:	mov    eax,r15d
 100b8de:	cmp    DWORD PTR [rbp+0x38],eax
 100b8e1:	setne  al
 100b8e4:	mov    DWORD PTR [rbx+0x18],eax
 100b8e7:	mov    DWORD PTR [rbp+0x38],r15d
 100b8eb:	mov    DWORD PTR [rbp+0x30],r15d
 100b8ef:	mov    DWORD PTR [rbp+0x40],0x4
 100b8f6:	lea    rax,[rbp+0x40]
 100b8fa:	mov    QWORD PTR [rsp+0x28],rax
 100b8ff:	lea    rax,[rbp+0x38]
 100b903:	mov    QWORD PTR [rsp+0x20],rax
 100b908:	lea    r9,[rbp+0x30]
 100b90c:	xor    r8d,r8d
 100b90f:	lea    rdx,[rip+0xffffffffffff64ea]        # 0x1001e00
 100b916:	mov    rcx,rdi
 100b919:	call   QWORD PTR [rip+0xffffffffffff5779]        # 0x1001098
 100b91f:	cmp    DWORD PTR [rbp+0x30],0x4
 100b923:	jne    0x100b935
 100b925:	test   eax,eax
 100b927:	jne    0x100b935
 100b929:	mov    eax,r15d
 100b92c:	cmp    DWORD PTR [rbp+0x38],eax
 100b92f:	setne  al
 100b932:	mov    DWORD PTR [rbx+0x1c],eax
 100b935:	mov    DWORD PTR [rbp+0x38],r15d
 100b939:	mov    DWORD PTR [rbp+0x30],r15d
 100b93d:	mov    DWORD PTR [rbp+0x40],0x4
 100b944:	lea    rax,[rbp+0x40]
 100b948:	mov    QWORD PTR [rsp+0x28],rax
 100b94d:	lea    rax,[rbp+0x38]
 100b951:	mov    QWORD PTR [rsp+0x20],rax
 100b956:	lea    r9,[rbp+0x30]
 100b95a:	xor    r8d,r8d
 100b95d:	lea    rdx,[rip+0xffffffffffff64bc]        # 0x1001e20
 100b964:	mov    rcx,rdi
 100b967:	call   QWORD PTR [rip+0xffffffffffff572b]        # 0x1001098
 100b96d:	cmp    DWORD PTR [rbp+0x30],0x4
 100b971:	jne    0x100b983
 100b973:	test   eax,eax
 100b975:	jne    0x100b983
 100b977:	mov    eax,r15d
 100b97a:	cmp    DWORD PTR [rbp+0x38],eax
 100b97d:	setne  al
 100b980:	mov    DWORD PTR [rbx+0x28],eax
 100b983:	mov    DWORD PTR [rbp+0x38],r15d
 100b987:	mov    DWORD PTR [rbp+0x30],r15d
 100b98b:	mov    DWORD PTR [rbp+0x40],0x4
 100b992:	lea    rax,[rbp+0x40]
 100b996:	mov    QWORD PTR [rsp+0x28],rax
 100b99b:	lea    rax,[rbp+0x38]
 100b99f:	mov    QWORD PTR [rsp+0x20],rax
 100b9a4:	lea    r9,[rbp+0x30]
 100b9a8:	xor    r8d,r8d
 100b9ab:	lea    rdx,[rip+0xffffffffffff648e]        # 0x1001e40
 100b9b2:	mov    rcx,rdi
 100b9b5:	call   QWORD PTR [rip+0xffffffffffff56dd]        # 0x1001098
 100b9bb:	cmp    DWORD PTR [rbp+0x30],0x4
 100b9bf:	jne    0x100b9d1
 100b9c1:	test   eax,eax
 100b9c3:	jne    0x100b9d1
 100b9c5:	mov    eax,r15d
 100b9c8:	cmp    DWORD PTR [rbp+0x38],eax
 100b9cb:	setne  al
 100b9ce:	mov    DWORD PTR [rbx+0x24],eax
 100b9d1:	mov    DWORD PTR [rbp+0x38],r15d
 100b9d5:	mov    DWORD PTR [rbp+0x30],r15d
 100b9d9:	mov    DWORD PTR [rbp+0x40],0x4
 100b9e0:	lea    rax,[rbp+0x40]
 100b9e4:	mov    QWORD PTR [rsp+0x28],rax
 100b9e9:	lea    rax,[rbp+0x38]
 100b9ed:	mov    QWORD PTR [rsp+0x20],rax
 100b9f2:	lea    r9,[rbp+0x30]
 100b9f6:	xor    r8d,r8d
 100b9f9:	lea    rdx,[rip+0xffffffffffff6468]        # 0x1001e68
 100ba00:	mov    rcx,rdi
 100ba03:	call   QWORD PTR [rip+0xffffffffffff568f]        # 0x1001098
 100ba09:	cmp    DWORD PTR [rbp+0x30],0x4
 100ba0d:	jne    0x100ba1f
 100ba0f:	test   eax,eax
 100ba11:	jne    0x100ba1f
 100ba13:	mov    eax,r15d
 100ba16:	cmp    DWORD PTR [rbp+0x38],eax
 100ba19:	setne  al
 100ba1c:	mov    DWORD PTR [rbx+0x2c],eax
 100ba1f:	cmp    DWORD PTR [rbx+0x1c],0x0
 100ba23:	jne    0x100ba2b
 100ba25:	cmp    DWORD PTR [rbx+0x18],0x0
 100ba29:	je     0x100ba31
 100ba2b:	mov    DWORD PTR [rbx],0x1
 100ba31:	test   rdi,rdi
 100ba34:	je     0x100ba43
 100ba36:	mov    rcx,rdi
 100ba39:	call   QWORD PTR [rip+0xffffffffffff5669]        # 0x10010a8
 100ba3f:	mov    QWORD PTR [rbp-0x38],r15
 100ba43:	mov    DWORD PTR [rbp-0x30],r15d
 100ba47:	test   r14,r14
 100ba4a:	je     0x100ba59
 100ba4c:	mov    rcx,r14
 100ba4f:	call   QWORD PTR [rip+0xffffffffffff5653]        # 0x10010a8
 100ba55:	mov    QWORD PTR [rbp-0x20],r15
 100ba59:	xor    eax,eax
 100ba5b:	mov    DWORD PTR [rbp-0x18],r15d
 100ba5f:	mov    rbx,QWORD PTR [rsp+0xb8]
 100ba67:	add    rsp,0x70
 100ba6b:	pop    r15
 100ba6d:	pop    r14
 100ba6f:	pop    rdi
 100ba70:	pop    rsi
 100ba71:	pop    rbp
 100ba72:	ret    
 100ba73:	int3   
 100ba74:	int3   
 100ba75:	int3   
 100ba76:	int3   
 100ba77:	int3   
 100ba78:	int3   
 100ba79:	int3   
 100ba7a:	int3   
 100ba7b:	int3   
 100ba7c:	int3   
 100ba7d:	int3   
 100ba7e:	int3   
 100ba7f:	int3   
 100ba80:	sub    rsp,0x28
 100ba84:	xor    eax,eax
 100ba86:	cmp    QWORD PTR [rip+0xfce3],rax        # 0x101b770
 100ba8d:	mov    QWORD PTR [rsp+0x30],rax
 100ba92:	jne    0x100baf5
 100ba94:	xor    ecx,ecx
 100ba96:	mov    QWORD PTR [rsp+0x30],rax
 100ba9b:	call   QWORD PTR [rip+0xffffffffffff5777]        # 0x1001218
 100baa1:	test   rax,rax
 100baa4:	je     0x100bac4
 100baa6:	lea    rdx,[rip+0xffffffffffff5f1b]        # 0x10019c8
 100baad:	mov    rcx,rax
 100bab0:	call   QWORD PTR [rip+0xffffffffffff57d2]        # 0x1001288
 100bab6:	test   rax,rax
 100bab9:	je     0x100bac4
 100babb:	lea    rcx,[rsp+0x30]
 100bac0:	call   rax
 100bac2:	jmp    0x100bad6
 100bac4:	call   QWORD PTR [rip+0xffffffffffff57ae]        # 0x1001278
 100baca:	test   eax,eax
 100bacc:	jle    0x100bad8
 100bace:	movzx  eax,ax
 100bad1:	or     eax,0x80070000
 100bad6:	test   eax,eax
 100bad8:	js     0x100bb12
 100bada:	mov    rcx,QWORD PTR [rsp+0x30]
 100badf:	mov    rax,QWORD PTR [rcx]
 100bae2:	call   QWORD PTR [rax+0x20]
 100bae5:	test   eax,eax
 100bae7:	js     0x100bb07
 100bae9:	mov    rax,QWORD PTR [rsp+0x30]
 100baee:	mov    QWORD PTR [rip+0xfc7b],rax        # 0x101b770
 100baf5:	lea    rcx,[rip+0x204]        # 0x100bd00
 100bafc:	call   QWORD PTR [rip+0xffffffffffff56e6]        # 0x10011e8
 100bb02:	add    rsp,0x28
 100bb06:	ret    
 100bb07:	mov    rcx,QWORD PTR [rsp+0x30]
 100bb0c:	mov    rax,QWORD PTR [rcx]
 100bb0f:	call   QWORD PTR [rax+0x10]
 100bb12:	lea    r8,[rip+0xffffffffffff68cf]        # 0x10023e8
 100bb19:	lea    rdx,[rip+0xffffffffffff68e0]        # 0x1002400
 100bb20:	mov    r9d,0x210010
 100bb26:	xor    ecx,ecx
 100bb28:	call   QWORD PTR [rip+0xffffffffffff58b2]        # 0x10013e0
 100bb2e:	mov    ecx,0x1
 100bb33:	call   QWORD PTR [rip+0xffffffffffff57c7]        # 0x1001300
 100bb39:	int3   
 100bb3a:	int3   
 100bb3b:	int3   
 100bb3c:	int3   
 100bb3d:	int3   
 100bb3e:	int3   
 100bb3f:	int3   
 100bb40:	rex push rbx
 100bb42:	sub    rsp,0x20
 100bb46:	xor    r8d,r8d
 100bb49:	mov    ebx,ecx
 100bb4b:	cmp    ecx,0xc000001d
 100bb51:	ja     0x100bbb3
 100bb53:	je     0x100bbdd
 100bb59:	cmp    ecx,0xc0000005
 100bb5f:	ja     0x100bba1
 100bb61:	je     0x100bb7d
 100bb63:	cmp    ecx,0x80000001
 100bb69:	je     0x100bb83
 100bb6b:	cmp    ecx,0x80000002
 100bb71:	je     0x100bbdd
 100bb73:	jbe    0x100bb7d
 100bb75:	cmp    ecx,0x80000004
 100bb7b:	jbe    0x100bb83
 100bb7d:	mov    r8d,0x1
 100bb83:	dec    r8d
 100bb86:	je     0x100bbe5
 100bb88:	dec    r8d
 100bb8b:	jne    0x100bc03
 100bb8d:	mov    rcx,rdx
 100bb90:	call   0x100bd00
 100bb95:	mov    ecx,0x1
 100bb9a:	call   QWORD PTR [rip+0xffffffffffff5760]        # 0x1001300
 100bba0:	int3   
 100bba1:	cmp    ecx,0xc0000006
 100bba7:	je     0x100bbdd
 100bba9:	cmp    ecx,0xc0000008
 100bbaf:	je     0x100bb83
 100bbb1:	jmp    0x100bb7d
 100bbb3:	lea    eax,[rcx+0x3fffffdb]
 100bbb9:	cmp    eax,0xd8
 100bbbe:	ja     0x100bb7d
 100bbc0:	lea    r9,[rip+0xffffffffffff4439]        # 0x1000000
 100bbc7:	movzx  eax,BYTE PTR [r9+rax*1+0xbc1c]
 100bbd0:	mov    ecx,DWORD PTR [r9+rax*4+0xbc0c]
 100bbd8:	add    rcx,r9
 100bbdb:	jmp    rcx
 100bbdd:	mov    r8d,0x2
 100bbe3:	jmp    0x100bb83
 100bbe5:	mov    rcx,rdx
 100bbe8:	call   0x100bd00
 100bbed:	lea    rdx,[rip+0xe0c4]        # 0x1019cb8
 100bbf4:	lea    rcx,[rsp+0x30]
 100bbf9:	mov    DWORD PTR [rsp+0x30],ebx
 100bbfd:	call   0x101067c
 100bc02:	int3   
 100bc03:	add    rsp,0x20
 100bc07:	pop    rbx
 100bc08:	ret    
 100bc09:	nop    DWORD PTR [rax]
 100bc0c:	fnstsw WORD PTR [rbx-0x447d0000]
 100bc12:	add    BYTE PTR [rax],al
 100bc14:	jge    0x100bbd1
 100bc16:	add    BYTE PTR [rax],al
 100bc18:	jge    0x100bbd5
 100bc1a:	add    BYTE PTR [rax],al
 100bc1c:	add    BYTE PTR [rcx],al
 100bc1e:	add    eax,DWORD PTR [rbx]
 100bc20:	add    eax,DWORD PTR [rbx]
 100bc22:	add    eax,DWORD PTR [rbx]
 100bc24:	add    eax,DWORD PTR [rbx]
 100bc26:	add    eax,DWORD PTR [rbx]
 100bc28:	add    eax,DWORD PTR [rbx]
 100bc2a:	add    eax,DWORD PTR [rbx]
 100bc2c:	add    eax,DWORD PTR [rbx]
 100bc2e:	add    eax,DWORD PTR [rbx]
 100bc30:	add    eax,DWORD PTR [rbx]
 100bc32:	add    eax,DWORD PTR [rbx]
 100bc34:	add    eax,DWORD PTR [rbx]
 100bc36:	add    eax,DWORD PTR [rbx]
 100bc38:	add    eax,DWORD PTR [rbx]
 100bc3a:	add    eax,DWORD PTR [rbx]
 100bc3c:	add    eax,DWORD PTR [rbx]
 100bc3e:	add    eax,DWORD PTR [rbx]
 100bc40:	add    eax,DWORD PTR [rbx]
 100bc42:	add    eax,DWORD PTR [rbx]
 100bc44:	add    eax,DWORD PTR [rbx]
 100bc46:	add    eax,DWORD PTR [rbx]
 100bc48:	add    eax,DWORD PTR [rbx]
 100bc4a:	add    eax,DWORD PTR [rbx]
 100bc4c:	add    eax,DWORD PTR [rbx]
 100bc4e:	add    eax,DWORD PTR [rbx]
 100bc50:	add    eax,DWORD PTR [rbx]
 100bc52:	add    eax,DWORD PTR [rbx]
 100bc54:	add    eax,DWORD PTR [rbx]
 100bc56:	add    eax,DWORD PTR [rbx]
 100bc58:	add    eax,DWORD PTR [rbx]
 100bc5a:	add    eax,DWORD PTR [rbx]
 100bc5c:	add    eax,DWORD PTR [rbx]
 100bc5e:	add    eax,DWORD PTR [rbx]
 100bc60:	add    eax,DWORD PTR [rbx]
 100bc62:	add    eax,DWORD PTR [rbx]
 100bc64:	add    eax,DWORD PTR [rbx]
 100bc66:	add    eax,DWORD PTR [rbx]
 100bc68:	add    eax,DWORD PTR [rbx]
 100bc6a:	add    eax,DWORD PTR [rbx]
 100bc6c:	add    eax,DWORD PTR [rbx]
 100bc6e:	add    eax,DWORD PTR [rbx]
 100bc70:	add    eax,DWORD PTR [rbx]
 100bc72:	add    eax,DWORD PTR [rbx]
 100bc74:	add    eax,DWORD PTR [rbx]
 100bc76:	add    eax,DWORD PTR [rbx]
 100bc78:	add    eax,DWORD PTR [rbx]
 100bc7a:	add    eax,DWORD PTR [rbx]
 100bc7c:	add    eax,DWORD PTR [rbx]
 100bc7e:	add    eax,DWORD PTR [rbx]
 100bc80:	add    eax,DWORD PTR [rbx]
 100bc82:	add    eax,DWORD PTR [rdx]
 100bc84:	add    al,BYTE PTR [rdx]
 100bc86:	add    al,BYTE PTR [rdx]
 100bc88:	add    al,BYTE PTR [rdx]
 100bc8a:	add    al,BYTE PTR [rdx]
 100bc8c:	add    al,BYTE PTR [rax]
 100bc8e:	add    eax,DWORD PTR [rbx]
 100bc90:	add    eax,DWORD PTR [rbx]
 100bc92:	add    eax,DWORD PTR [rbx]
 100bc94:	add    eax,DWORD PTR [rbx]
 100bc96:	add    eax,DWORD PTR [rbx]
 100bc98:	add    eax,DWORD PTR [rbx]
 100bc9a:	add    eax,DWORD PTR [rbx]
 100bc9c:	add    eax,DWORD PTR [rbx]
 100bc9e:	add    eax,DWORD PTR [rbx]
 100bca0:	add    eax,DWORD PTR [rbx]
 100bca2:	add    eax,DWORD PTR [rbx]
 100bca4:	add    eax,DWORD PTR [rbx]
 100bca6:	add    eax,DWORD PTR [rbx]
 100bca8:	add    eax,DWORD PTR [rbx]
 100bcaa:	add    eax,DWORD PTR [rbx]
 100bcac:	add    eax,DWORD PTR [rbx]
 100bcae:	add    eax,DWORD PTR [rbx]
 100bcb0:	add    eax,DWORD PTR [rbx]
 100bcb2:	add    eax,DWORD PTR [rbx]
 100bcb4:	add    eax,DWORD PTR [rbx]
 100bcb6:	add    eax,DWORD PTR [rbx]
 100bcb8:	add    eax,DWORD PTR [rbx]
 100bcba:	add    eax,DWORD PTR [rbx]
 100bcbc:	add    eax,DWORD PTR [rbx]
 100bcbe:	add    eax,DWORD PTR [rbx]
 100bcc0:	add    eax,DWORD PTR [rbx]
 100bcc2:	add    eax,DWORD PTR [rbx]
 100bcc4:	add    eax,DWORD PTR [rbx]
 100bcc6:	add    eax,DWORD PTR [rbx]
 100bcc8:	add    eax,DWORD PTR [rbx]
 100bcca:	add    eax,DWORD PTR [rbx]
 100bccc:	add    eax,DWORD PTR [rbx]
 100bcce:	add    eax,DWORD PTR [rbx]
 100bcd0:	add    eax,DWORD PTR [rbx]
 100bcd2:	add    eax,DWORD PTR [rbx]
 100bcd4:	add    eax,DWORD PTR [rbx]
 100bcd6:	add    eax,DWORD PTR [rbx]
 100bcd8:	add    eax,DWORD PTR [rbx]
 100bcda:	add    eax,DWORD PTR [rbx]
 100bcdc:	add    eax,DWORD PTR [rbx]
 100bcde:	add    eax,DWORD PTR [rbx]
 100bce0:	add    eax,DWORD PTR [rbx]
 100bce2:	add    eax,DWORD PTR [rbx]
 100bce4:	add    eax,DWORD PTR [rbx]
 100bce6:	add    eax,DWORD PTR [rbx]
 100bce8:	add    eax,DWORD PTR [rbx]
 100bcea:	add    eax,DWORD PTR [rbx]
 100bcec:	add    eax,DWORD PTR [rbx]
 100bcee:	add    eax,DWORD PTR [rbx]
 100bcf0:	add    eax,DWORD PTR [rbx]
 100bcf2:	add    eax,DWORD PTR [rbx]
 100bcf4:	add    cl,ah
 100bcf6:	int3   
 100bcf7:	int3   
 100bcf8:	int3   
 100bcf9:	int3   
 100bcfa:	int3   
 100bcfb:	int3   
 100bcfc:	int3   
 100bcfd:	int3   
 100bcfe:	int3   
 100bcff:	int3   
 100bd00:	mov    QWORD PTR [rsp+0x8],rbx
 100bd05:	push   rdi
 100bd06:	sub    rsp,0x20
 100bd0a:	mov    rdi,rcx
 100bd0d:	mov    rcx,QWORD PTR [rip+0xfa5c]        # 0x101b770
 100bd14:	test   rcx,rcx
 100bd17:	je     0x100bd87
 100bd19:	mov    QWORD PTR [rsp+0x38],0x0
 100bd22:	mov    rax,QWORD PTR [rcx]
 100bd25:	lea    rdx,[rsp+0x38]
 100bd2a:	call   QWORD PTR [rax+0x28]
 100bd2d:	test   eax,eax
 100bd2f:	js     0x100bd87
 100bd31:	mov    rcx,QWORD PTR [rsp+0x38]
 100bd36:	mov    rax,QWORD PTR [rcx]
 100bd39:	xor    r8d,r8d
 100bd3c:	mov    edx,0x400
 100bd41:	call   QWORD PTR [rax+0x20]
 100bd44:	mov    rax,QWORD PTR [rsp+0x38]
 100bd49:	mov    rbx,QWORD PTR [rax]
 100bd4c:	call   QWORD PTR [rip+0xffffffffffff54fe]        # 0x1001250
 100bd52:	mov    edx,eax
 100bd54:	mov    rcx,QWORD PTR [rsp+0x38]
 100bd59:	test   rdi,rdi
 100bd5c:	je     0x100bd67
 100bd5e:	mov    r9,QWORD PTR [rdi+0x8]
 100bd62:	mov    r8,QWORD PTR [rdi]
 100bd65:	jmp    0x100bd6d
 100bd67:	xor    r9d,r9d
 100bd6a:	xor    r8d,r8d
 100bd6d:	call   QWORD PTR [rbx+0x40]
 100bd70:	mov    rcx,QWORD PTR [rsp+0x38]
 100bd75:	mov    rax,QWORD PTR [rcx]
 100bd78:	call   QWORD PTR [rax+0x18]
 100bd7b:	nop
 100bd7c:	mov    rcx,QWORD PTR [rsp+0x38]
 100bd81:	mov    rax,QWORD PTR [rcx]
 100bd84:	call   QWORD PTR [rax+0x10]
 100bd87:	mov    eax,0x1
 100bd8c:	mov    rbx,QWORD PTR [rsp+0x30]
 100bd91:	add    rsp,0x20
 100bd95:	pop    rdi
 100bd96:	ret    
 100bd97:	int3   
 100bd98:	int3   
 100bd99:	int3   
 100bd9a:	int3   
 100bd9b:	int3   
 100bd9c:	int3   
 100bd9d:	int3   
 100bd9e:	int3   
 100bd9f:	int3   
 100bda0:	mov    rax,rsp
 100bda3:	mov    QWORD PTR [rax+0x10],rdx
 100bda7:	push   rbp
 100bda8:	push   r12
 100bdaa:	push   r13
 100bdac:	push   r14
 100bdae:	push   r15
 100bdb0:	lea    rbp,[rax-0x58]
 100bdb4:	sub    rsp,0x130
 100bdbb:	mov    QWORD PTR [rbp-0x50],0xfffffffffffffffe
 100bdc3:	mov    QWORD PTR [rax+0x8],rbx
 100bdc7:	mov    QWORD PTR [rax+0x18],rsi
 100bdcb:	mov    QWORD PTR [rax+0x20],rdi
 100bdcf:	mov    r15,r9
 100bdd2:	mov    edi,r8d
 100bdd5:	mov    r14,rdx
 100bdd8:	mov    r12,rcx
 100bddb:	cmp    r8d,0x8007000e
 100bde2:	je     0x100bee2
 100bde8:	cmp    r8d,0x80070008
 100bdef:	je     0x100bee2
 100bdf5:	cmp    r8d,0x80070071
 100bdfc:	je     0x100bee2
 100be02:	cmp    r8d,0x800703fb
 100be09:	je     0x100bee2
 100be0f:	cmp    r8d,0x80070070
 100be16:	je     0x100bee2
 100be1c:	cmp    r8d,0x800705aa
 100be23:	je     0x100bee2
 100be29:	cmp    r8d,0x80070486
 100be30:	je     0x100bee2
 100be36:	lea    rax,[rbp-0x48]
 100be3a:	mov    QWORD PTR [rsp+0x30],rax
 100be3f:	mov    r8,r9
 100be42:	lea    rdx,[rsp+0x38]
 100be47:	mov    rcx,r14
 100be4a:	call   0x1006cf0
 100be4f:	nop
 100be50:	mov    r8d,edi
 100be53:	lea    rdx,[rbp-0x48]
 100be57:	mov    rcx,rax
 100be5a:	call   0x1006c50
 100be5f:	nop
 100be60:	mov    r9d,0x1
 100be66:	mov    r8,rax
 100be69:	mov    edx,0x2001
 100be6e:	mov    rcx,r12
 100be71:	call   0x1007140
 100be76:	nop
 100be77:	cmp    BYTE PTR [rbp-0x55],0x0
 100be7b:	je     0x100beaa
 100be7d:	lea    rbx,[rsp+0x58]
 100be82:	mov    esi,0xa
 100be87:	xor    r13d,r13d
 100be8a:	nop    WORD PTR [rax+rax*1+0x0]
 100be90:	mov    rcx,QWORD PTR [rbx]
 100be93:	test   rcx,rcx
 100be96:	je     0x100bea1
 100be98:	call   QWORD PTR [rip+0xffffffffffff5592]        # 0x1001430
 100be9e:	mov    QWORD PTR [rbx],r13
 100bea1:	add    rbx,0x8
 100bea5:	dec    rsi
 100bea8:	jne    0x100be90
 100beaa:	lea    rax,[rbp-0x48]
 100beae:	mov    QWORD PTR [rsp+0x30],rax
 100beb3:	mov    rdx,r14
 100beb6:	lea    rcx,[rbp-0x48]
 100beba:	call   0x1006b40
 100bebf:	nop
 100bec0:	mov    DWORD PTR [rsp+0x28],edi
 100bec4:	mov    QWORD PTR [rsp+0x20],r15
 100bec9:	lea    r9,[rip+0xffffffffffff63f0]        # 0x10022c0
 100bed0:	mov    r8d,0x8000ffff
 100bed6:	mov    rdx,rax
 100bed9:	mov    rcx,r12
 100bedc:	call   0x1006e50
 100bee1:	int3   
 100bee2:	lea    rax,[rsp+0x38]
 100bee7:	mov    QWORD PTR [rsp+0x30],rax
 100beec:	mov    rax,QWORD PTR [rdx]
 100beef:	mov    QWORD PTR [rsp+0x38],rax
 100bef4:	mov    rax,QWORD PTR [rdx+0x8]
 100bef8:	mov    QWORD PTR [rsp+0x40],rax
 100befd:	mov    eax,DWORD PTR [rdx+0x10]
 100bf00:	mov    DWORD PTR [rsp+0x48],eax
 100bf04:	mov    eax,DWORD PTR [rdx+0x18]
 100bf07:	mov    DWORD PTR [rsp+0x50],eax
 100bf0b:	mov    eax,DWORD PTR [rdx+0x14]
 100bf0e:	mov    DWORD PTR [rsp+0x4c],eax
 100bf12:	movzx  eax,WORD PTR [rdx+0x70]
 100bf16:	mov    WORD PTR [rbp-0x58],ax
 100bf1a:	movzx  eax,BYTE PTR [rdx+0x72]
 100bf1e:	mov    BYTE PTR [rbp-0x56],al
 100bf21:	movzx  eax,BYTE PTR [rdx+0x73]
 100bf25:	mov    BYTE PTR [rbp-0x55],al
 100bf28:	mov    BYTE PTR [rdx+0x73],0x0
 100bf2c:	mov    rax,QWORD PTR [rdx+0x20]
 100bf30:	mov    QWORD PTR [rsp+0x58],rax
 100bf35:	mov    rax,QWORD PTR [rdx+0x28]
 100bf39:	mov    QWORD PTR [rsp+0x60],rax
 100bf3e:	mov    rax,QWORD PTR [rdx+0x30]
 100bf42:	mov    QWORD PTR [rsp+0x68],rax
 100bf47:	mov    rax,QWORD PTR [rdx+0x38]
 100bf4b:	mov    QWORD PTR [rsp+0x70],rax
 100bf50:	mov    rax,QWORD PTR [rdx+0x40]
 100bf54:	mov    QWORD PTR [rsp+0x78],rax
 100bf59:	mov    rax,QWORD PTR [rdx+0x48]
 100bf5d:	mov    QWORD PTR [rbp-0x80],rax
 100bf61:	mov    rax,QWORD PTR [rdx+0x50]
 100bf65:	mov    QWORD PTR [rbp-0x78],rax
 100bf69:	mov    rax,QWORD PTR [rdx+0x58]
 100bf6d:	mov    QWORD PTR [rbp-0x70],rax
 100bf71:	mov    rax,QWORD PTR [rdx+0x60]
 100bf75:	mov    QWORD PTR [rbp-0x68],rax
 100bf79:	mov    rax,QWORD PTR [rdx+0x68]
 100bf7d:	mov    QWORD PTR [rbp-0x60],rax
 100bf81:	mov    QWORD PTR [rsp+0x20],r9
 100bf86:	lea    r9,[rip+0xffffffffffff62e3]        # 0x1002270
 100bf8d:	mov    r8d,0x8007000e
 100bf93:	lea    rdx,[rsp+0x38]
 100bf98:	call   0x1006e50
 100bf9d:	int3   
 100bf9e:	int3   
 100bf9f:	int3   
 100bfa0:	int3   
 100bfa1:	int3   
 100bfa2:	int3   
 100bfa3:	int3   
 100bfa4:	int3   
 100bfa5:	int3   
 100bfa6:	int3   
 100bfa7:	int3   
 100bfa8:	int3   
 100bfa9:	int3   
 100bfaa:	int3   
 100bfab:	int3   
 100bfac:	int3   
 100bfad:	int3   
 100bfae:	int3   
 100bfaf:	int3   
 100bfb0:	mov    QWORD PTR [rsp+0x18],r8
 100bfb5:	mov    QWORD PTR [rsp+0x10],rdx
 100bfba:	mov    QWORD PTR [rsp+0x20],r9
 100bfbf:	push   rbx
 100bfc0:	push   rbp
 100bfc1:	push   rsi
 100bfc2:	push   rdi
 100bfc3:	push   r12
 100bfc5:	push   r14
 100bfc7:	push   r15
 100bfc9:	sub    rsp,0x140
 100bfd0:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 100bfd9:	mov    r14,rdx
 100bfdc:	mov    r15,rcx
 100bfdf:	mov    ecx,0x322
 100bfe4:	call   0x10099ec
 100bfe9:	mov    rbp,rax
 100bfec:	mov    QWORD PTR [rsp+0x38],rax
 100bff1:	test   rax,rax
 100bff4:	jne    0x100c010
 100bff6:	mov    DWORD PTR [rsp+0x30],0x8007000e
 100bffe:	lea    rdx,[rip+0xdd43]        # 0x1019d48
 100c005:	lea    rcx,[rsp+0x30]
 100c00a:	call   0x101067c
 100c00f:	int3   
 100c010:	lea    r9,[rsp+0x198]
 100c018:	mov    r8,QWORD PTR [rsp+0x190]
 100c020:	mov    edx,0x190
 100c025:	mov    rcx,rax
 100c028:	call   0x1005fe0
 100c02d:	call   QWORD PTR [rip+0xffffffffffff5245]        # 0x1001278
 100c033:	mov    edi,eax
 100c035:	test   eax,eax
 100c037:	jle    0x100c042
 100c039:	movzx  edi,ax
 100c03c:	or     edi,0x80070000
 100c042:	test   edi,edi
 100c044:	jne    0x100c04d
 100c046:	mov    edi,0x8000ffff
 100c04b:	jmp    0x100c0a1
 100c04d:	cmp    edi,0x8007000e
 100c053:	je     0x100c155
 100c059:	cmp    edi,0x80070008
 100c05f:	je     0x100c155
 100c065:	cmp    edi,0x80070071
 100c06b:	je     0x100c155
 100c071:	cmp    edi,0x800703fb
 100c077:	je     0x100c155
 100c07d:	cmp    edi,0x80070070
 100c083:	je     0x100c155
 100c089:	cmp    edi,0x800705aa
 100c08f:	je     0x100c155
 100c095:	cmp    edi,0x80070486
 100c09b:	je     0x100c155
 100c0a1:	lea    rax,[rsp+0x48]
 100c0a6:	mov    QWORD PTR [rsp+0x30],rax
 100c0ab:	mov    r8,rbp
 100c0ae:	lea    rdx,[rsp+0xc0]
 100c0b6:	mov    rcx,r14
 100c0b9:	call   0x1006cf0
 100c0be:	nop
 100c0bf:	mov    r8d,edi
 100c0c2:	lea    rdx,[rsp+0x48]
 100c0c7:	mov    rcx,rax
 100c0ca:	call   0x1006c50
 100c0cf:	nop
 100c0d0:	mov    r9d,0x1
 100c0d6:	mov    r8,rax
 100c0d9:	mov    edx,0x3001
 100c0de:	mov    rcx,r15
 100c0e1:	call   0x1007140
 100c0e6:	nop
 100c0e7:	cmp    BYTE PTR [rsp+0x133],0x0
 100c0ef:	je     0x100c11b
 100c0f1:	lea    rbx,[rsp+0xe0]
 100c0f9:	mov    esi,0xa
 100c0fe:	xor    r12d,r12d
 100c101:	mov    rcx,QWORD PTR [rbx]
 100c104:	test   rcx,rcx
 100c107:	je     0x100c112
 100c109:	call   QWORD PTR [rip+0xffffffffffff5321]        # 0x1001430
 100c10f:	mov    QWORD PTR [rbx],r12
 100c112:	add    rbx,0x8
 100c116:	dec    rsi
 100c119:	jne    0x100c101
 100c11b:	lea    rax,[rsp+0x48]
 100c120:	mov    QWORD PTR [rsp+0x30],rax
 100c125:	mov    rdx,r14
 100c128:	lea    rcx,[rsp+0x48]
 100c12d:	call   0x1006b40
 100c132:	nop
 100c133:	mov    DWORD PTR [rsp+0x28],edi
 100c137:	mov    QWORD PTR [rsp+0x20],rbp
 100c13c:	lea    r9,[rip+0xffffffffffff621d]        # 0x1002360
 100c143:	mov    r8d,0x8000ffff
 100c149:	mov    rdx,rax
 100c14c:	mov    rcx,r15
 100c14f:	call   0x1006e50
 100c154:	int3   
 100c155:	lea    rax,[rsp+0x48]
 100c15a:	mov    QWORD PTR [rsp+0x30],rax
 100c15f:	mov    rdx,r14
 100c162:	lea    rcx,[rsp+0x48]
 100c167:	call   0x1006b40
 100c16c:	nop
 100c16d:	mov    QWORD PTR [rsp+0x20],rbp
 100c172:	lea    r9,[rip+0xffffffffffff61a7]        # 0x1002320
 100c179:	mov    r8d,0x8007000e
 100c17f:	mov    rdx,rax
 100c182:	mov    rcx,r15
 100c185:	call   0x1006e50
 100c18a:	int3   
 100c18b:	int3   
 100c18c:	int3   
 100c18d:	int3   
 100c18e:	int3   
 100c18f:	int3   
 100c190:	int3   
 100c191:	int3   
 100c192:	int3   
 100c193:	int3   
 100c194:	int3   
 100c195:	int3   
 100c196:	int3   
 100c197:	int3   
 100c198:	int3   
 100c199:	int3   
 100c19a:	int3   
 100c19b:	int3   
 100c19c:	int3   
 100c19d:	int3   
 100c19e:	int3   
 100c19f:	int3   
 100c1a0:	mov    QWORD PTR [rsp+0x20],r9
 100c1a5:	mov    QWORD PTR [rsp+0x10],rdx
 100c1aa:	push   rbx
 100c1ab:	push   rbp
 100c1ac:	push   rsi
 100c1ad:	push   rdi
 100c1ae:	push   r12
 100c1b0:	push   r14
 100c1b2:	push   r15
 100c1b4:	sub    rsp,0x140
 100c1bb:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 100c1c4:	mov    esi,r8d
 100c1c7:	mov    r14,rdx
 100c1ca:	mov    r15,rcx
 100c1cd:	mov    ecx,0x322
 100c1d2:	call   0x10099ec
 100c1d7:	mov    rbp,rax
 100c1da:	mov    QWORD PTR [rsp+0x38],rax
 100c1df:	test   rax,rax
 100c1e2:	jne    0x100c1fe
 100c1e4:	mov    DWORD PTR [rsp+0x30],0x8007000e
 100c1ec:	lea    rdx,[rip+0xdb55]        # 0x1019d48
 100c1f3:	lea    rcx,[rsp+0x30]
 100c1f8:	call   0x101067c
 100c1fd:	int3   
 100c1fe:	lea    r9,[rsp+0x1a0]
 100c206:	mov    r8,QWORD PTR [rsp+0x198]
 100c20e:	mov    edx,0x190
 100c213:	mov    rcx,rax
 100c216:	call   0x1005fe0
 100c21b:	cmp    esi,0x8007000e
 100c221:	je     0x100c324
 100c227:	cmp    esi,0x80070008
 100c22d:	je     0x100c324
 100c233:	cmp    esi,0x80070071
 100c239:	je     0x100c324
 100c23f:	cmp    esi,0x800703fb
 100c245:	je     0x100c324
 100c24b:	cmp    esi,0x80070070
 100c251:	je     0x100c324
 100c257:	cmp    esi,0x800705aa
 100c25d:	je     0x100c324
 100c263:	cmp    esi,0x80070486
 100c269:	je     0x100c324
 100c26f:	lea    rax,[rsp+0x48]
 100c274:	mov    QWORD PTR [rsp+0x30],rax
 100c279:	mov    r8,rbp
 100c27c:	lea    rdx,[rsp+0xc0]
 100c284:	mov    rcx,r14
 100c287:	call   0x1006cf0
 100c28c:	nop
 100c28d:	mov    r8d,esi
 100c290:	lea    rdx,[rsp+0x48]
 100c295:	mov    rcx,rax
 100c298:	call   0x1006c50
 100c29d:	nop
 100c29e:	mov    r9d,0x1
 100c2a4:	mov    r8,rax
 100c2a7:	mov    edx,0x3001
 100c2ac:	mov    rcx,r15
 100c2af:	call   0x1007140
 100c2b4:	nop
 100c2b5:	cmp    BYTE PTR [rsp+0x133],0x0
 100c2bd:	je     0x100c2ea
 100c2bf:	lea    rbx,[rsp+0xe0]
 100c2c7:	mov    edi,0xa
 100c2cc:	xor    r12d,r12d
 100c2cf:	nop
 100c2d0:	mov    rcx,QWORD PTR [rbx]
 100c2d3:	test   rcx,rcx
 100c2d6:	je     0x100c2e1
 100c2d8:	call   QWORD PTR [rip+0xffffffffffff5152]        # 0x1001430
 100c2de:	mov    QWORD PTR [rbx],r12
 100c2e1:	add    rbx,0x8
 100c2e5:	dec    rdi
 100c2e8:	jne    0x100c2d0
 100c2ea:	lea    rax,[rsp+0x48]
 100c2ef:	mov    QWORD PTR [rsp+0x30],rax
 100c2f4:	mov    rdx,r14
 100c2f7:	lea    rcx,[rsp+0x48]
 100c2fc:	call   0x1006b40
 100c301:	nop
 100c302:	mov    DWORD PTR [rsp+0x28],esi
 100c306:	mov    QWORD PTR [rsp+0x20],rbp
 100c30b:	lea    r9,[rip+0xffffffffffff604e]        # 0x1002360
 100c312:	mov    r8d,0x8000ffff
 100c318:	mov    rdx,rax
 100c31b:	mov    rcx,r15
 100c31e:	call   0x1006e50
 100c323:	int3   
 100c324:	lea    rax,[rsp+0x48]
 100c329:	mov    QWORD PTR [rsp+0x30],rax
 100c32e:	mov    rdx,r14
 100c331:	lea    rcx,[rsp+0x48]
 100c336:	call   0x1006b40
 100c33b:	nop
 100c33c:	mov    QWORD PTR [rsp+0x20],rbp
 100c341:	lea    r9,[rip+0xffffffffffff5fd8]        # 0x1002320
 100c348:	mov    r8d,0x8007000e
 100c34e:	mov    rdx,rax
 100c351:	mov    rcx,r15
 100c354:	call   0x1006e50
 100c359:	int3   
 100c35a:	int3   
 100c35b:	int3   
 100c35c:	int3   
 100c35d:	int3   
 100c35e:	int3   
 100c35f:	int3   
 100c360:	mov    QWORD PTR [rsp+0x18],r8
 100c365:	mov    QWORD PTR [rsp+0x10],rdx
 100c36a:	mov    QWORD PTR [rsp+0x20],r9
 100c36f:	push   rbx
 100c370:	push   rbp
 100c371:	push   rsi
 100c372:	push   rdi
 100c373:	push   r12
 100c375:	push   r14
 100c377:	push   r15
 100c379:	sub    rsp,0x140
 100c380:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 100c389:	mov    r14,rdx
 100c38c:	mov    r15,rcx
 100c38f:	mov    ecx,0x322
 100c394:	call   0x10099ec
 100c399:	mov    rbp,rax
 100c39c:	mov    QWORD PTR [rsp+0x38],rax
 100c3a1:	test   rax,rax
 100c3a4:	jne    0x100c3c0
 100c3a6:	mov    DWORD PTR [rsp+0x30],0x8007000e
 100c3ae:	lea    rdx,[rip+0xd993]        # 0x1019d48
 100c3b5:	lea    rcx,[rsp+0x30]
 100c3ba:	call   0x101067c
 100c3bf:	int3   
 100c3c0:	lea    r9,[rsp+0x198]
 100c3c8:	mov    r8,QWORD PTR [rsp+0x190]
 100c3d0:	mov    edx,0x190
 100c3d5:	mov    rcx,rax
 100c3d8:	call   0x1005fe0
 100c3dd:	lea    r11,[rsp+0x48]
 100c3e2:	mov    QWORD PTR [rsp+0x30],r11
 100c3e7:	mov    r8,rbp
 100c3ea:	lea    rdx,[rsp+0xc0]
 100c3f2:	mov    rcx,r14
 100c3f5:	call   0x1006cf0
 100c3fa:	nop
 100c3fb:	mov    r8d,DWORD PTR [r15]
 100c3fe:	lea    rdx,[rsp+0x48]
 100c403:	mov    rcx,rax
 100c406:	call   0x1006c50
 100c40b:	nop
 100c40c:	mov    r9d,0x2
 100c412:	mov    r8,rax
 100c415:	mov    edx,0x3002
 100c41a:	mov    rcx,r15
 100c41d:	call   0x1007140
 100c422:	nop
 100c423:	mov    edi,0xa
 100c428:	xor    r12d,r12d
 100c42b:	cmp    BYTE PTR [rsp+0x133],r12b
 100c433:	je     0x100c45a
 100c435:	lea    rbx,[rsp+0xe0]
 100c43d:	mov    esi,edi
 100c43f:	nop
 100c440:	mov    rcx,QWORD PTR [rbx]
 100c443:	test   rcx,rcx
 100c446:	je     0x100c451
 100c448:	call   QWORD PTR [rip+0xffffffffffff4fe2]        # 0x1001430
 100c44e:	mov    QWORD PTR [rbx],r12
 100c451:	add    rbx,0x8
 100c455:	dec    rsi
 100c458:	jne    0x100c440
 100c45a:	lea    rax,[rsp+0x48]
 100c45f:	mov    QWORD PTR [rsp+0x30],rax
 100c464:	mov    rdx,r14
 100c467:	lea    rcx,[rsp+0x48]
 100c46c:	call   0x1006b40
 100c471:	nop
 100c472:	mov    ecx,DWORD PTR [r15]
 100c475:	mov    DWORD PTR [rsp+0x20],ecx
 100c479:	mov    r9,rbp
 100c47c:	lea    r8,[rip+0xffffffffffff5f2d]        # 0x10023b0
 100c483:	mov    rdx,rax
 100c486:	mov    rcx,r15
 100c489:	call   0x1006240
 100c48e:	nop
 100c48f:	mov    rcx,rbp
 100c492:	call   0x1009d34
 100c497:	nop
 100c498:	cmp    BYTE PTR [r14+0x73],0x0
 100c49d:	je     0x100c4bd
 100c49f:	lea    rbx,[r14+0x20]
 100c4a3:	mov    rcx,QWORD PTR [rbx]
 100c4a6:	test   rcx,rcx
 100c4a9:	je     0x100c4b4
 100c4ab:	call   QWORD PTR [rip+0xffffffffffff4f7f]        # 0x1001430
 100c4b1:	mov    QWORD PTR [rbx],r12
 100c4b4:	add    rbx,0x8
 100c4b8:	dec    rdi
 100c4bb:	jne    0x100c4a3
 100c4bd:	add    rsp,0x140
 100c4c4:	pop    r15
 100c4c6:	pop    r14
 100c4c8:	pop    r12
 100c4ca:	pop    rdi
 100c4cb:	pop    rsi
 100c4cc:	pop    rbp
 100c4cd:	pop    rbx
 100c4ce:	ret    
 100c4cf:	int3   
 100c4d0:	int3   
 100c4d1:	int3   
 100c4d2:	int3   
 100c4d3:	int3   
 100c4d4:	int3   
 100c4d5:	int3   
 100c4d6:	int3   
 100c4d7:	int3   
 100c4d8:	int3   
 100c4d9:	int3   
 100c4da:	int3   
 100c4db:	int3   
 100c4dc:	int3   
 100c4dd:	int3   
 100c4de:	int3   
 100c4df:	int3   
 100c4e0:	rex push rbx
 100c4e2:	push   rsi
 100c4e3:	push   rdi
 100c4e4:	sub    rsp,0x260
 100c4eb:	mov    rax,QWORD PTR [rip+0xec3e]        # 0x101b130
 100c4f2:	xor    rax,rsp
 100c4f5:	mov    QWORD PTR [rsp+0x250],rax
 100c4fd:	mov    rcx,QWORD PTR [rcx]
 100c500:	mov    rsi,rdx
 100c503:	mov    rax,r8
 100c506:	lea    rdx,[rsp+0x34]
 100c50b:	lea    r9,[rsp+0x30]
 100c510:	xor    ebx,ebx
 100c512:	mov    QWORD PTR [rsp+0x28],rdx
 100c517:	lea    rdx,[rsp+0x40]
 100c51c:	xor    r8d,r8d
 100c51f:	mov    QWORD PTR [rsp+0x20],rdx
 100c524:	mov    rdx,rax
 100c527:	mov    DWORD PTR [rsp+0x34],0x104
 100c52f:	mov    DWORD PTR [rsp+0x30],ebx
 100c533:	call   QWORD PTR [rip+0xffffffffffff4b5f]        # 0x1001098
 100c539:	mov    edi,eax
 100c53b:	mov    eax,DWORD PTR [rsp+0x34]
 100c53f:	test   eax,eax
 100c541:	je     0x100c596
 100c543:	mov    ecx,DWORD PTR [rsp+0x30]
 100c547:	test   ecx,ecx
 100c549:	je     0x100c57a
 100c54b:	cmp    ecx,0x2
 100c54e:	jbe    0x100c581
 100c550:	cmp    ecx,0x7
 100c553:	jne    0x100c57a
 100c555:	test   al,0x1
 100c557:	jne    0x100c57a
 100c559:	mov    ecx,eax
 100c55b:	shr    ecx,1
 100c55d:	cmp    ecx,0x1
 100c560:	jb     0x100c57a
 100c562:	mov    edx,eax
 100c564:	shr    rdx,1
 100c567:	cmp    WORD PTR [rsp+rdx*2+0x3e],bx
 100c56c:	jne    0x100c57a
 100c56e:	cmp    ecx,0x1
 100c571:	jbe    0x100c59b
 100c573:	cmp    WORD PTR [rsp+rdx*2+0x3c],bx
 100c578:	je     0x100c59b
 100c57a:	mov    eax,0xd
 100c57f:	jmp    0x100c5e1
 100c581:	test   al,0x1
 100c583:	jne    0x100c57a
 100c585:	shr    rax,1
 100c588:	cmp    WORD PTR [rsp+rax*2+0x3e],bx
 100c58d:	je     0x100c59b
 100c58f:	mov    eax,0xd
 100c594:	jmp    0x100c5e1
 100c596:	mov    WORD PTR [rsp+0x40],bx
 100c59b:	test   edi,edi
 100c59d:	jne    0x100c5df
 100c59f:	lea    rax,[rsp+0x40]
 100c5a4:	or     rbx,0xffffffffffffffff
 100c5a8:	nop    DWORD PTR [rax+rax*1+0x0]
 100c5b0:	inc    rbx
 100c5b3:	cmp    WORD PTR [rax+rbx*2],0x0
 100c5b8:	jne    0x100c5b0
 100c5ba:	inc    rbx
 100c5bd:	lea    rcx,[rbx+rbx*1]
 100c5c1:	call   QWORD PTR [rip+0xffffffffffff4e61]        # 0x1001428
 100c5c7:	mov    QWORD PTR [rsi],rax
 100c5ca:	test   rax,rax
 100c5cd:	je     0x100c5df
 100c5cf:	lea    r8,[rsp+0x40]
 100c5d4:	mov    rdx,rbx
 100c5d7:	mov    rcx,rax
 100c5da:	call   0x1006a30
 100c5df:	mov    eax,edi
 100c5e1:	mov    rcx,QWORD PTR [rsp+0x250]
 100c5e9:	xor    rcx,rsp
 100c5ec:	call   0x1009d50
 100c5f1:	add    rsp,0x260
 100c5f8:	pop    rdi
 100c5f9:	pop    rsi
 100c5fa:	pop    rbx
 100c5fb:	ret    
 100c5fc:	int3   
 100c5fd:	int3   
 100c5fe:	int3   
 100c5ff:	int3   
 100c600:	int3   
 100c601:	int3   
 100c602:	int3   
 100c603:	int3   
 100c604:	int3   
 100c605:	int3   
 100c606:	int3   
 100c607:	int3   
 100c608:	int3   
 100c609:	int3   
 100c60a:	int3   
 100c60b:	int3   
 100c60c:	int3   
 100c60d:	int3   
 100c60e:	int3   
 100c60f:	int3   
 100c610:	mov    QWORD PTR [rsp+0x8],rbx
 100c615:	mov    QWORD PTR [rsp+0x10],rdi
 100c61a:	xor    edi,edi
 100c61c:	mov    r11,r8
 100c61f:	mov    r10,rdx
 100c622:	mov    rbx,rcx
 100c625:	mov    r9d,edi
 100c628:	test   rdx,rdx
 100c62b:	je     0x100c636
 100c62d:	cmp    rdx,0x7fffffff
 100c634:	jbe    0x100c63c
 100c636:	mov    r9d,0x80070057
 100c63c:	test   r9d,r9d
 100c63f:	js     0x100c664
 100c641:	mov    rcx,rdx
 100c644:	mov    rax,rbx
 100c647:	mov    r9d,edi
 100c64a:	test   rdx,rdx
 100c64d:	je     0x100c65e
 100c64f:	nop
 100c650:	cmp    WORD PTR [rax],di
 100c653:	je     0x100c6b0
 100c655:	add    rax,0x2
 100c659:	dec    rcx
 100c65c:	jne    0x100c650
 100c65e:	mov    r9d,0x80070057
 100c664:	mov    r8,rdi
 100c667:	test   r9d,r9d
 100c66a:	js     0x100c6cf
 100c66c:	lea    rcx,[rbx+r8*2]
 100c670:	mov    r9d,edi
 100c673:	sub    rdx,r8
 100c676:	je     0x100c6c2
 100c678:	add    r8,0x7fffffff
 100c67f:	mov    rax,rdx
 100c682:	sub    rax,r10
 100c685:	add    r8,rax
 100c688:	sub    r11,rcx
 100c68b:	nop    DWORD PTR [rax+rax*1+0x0]
 100c690:	test   r8,r8
 100c693:	je     0x100c6bd
 100c695:	movzx  eax,WORD PTR [r11+rcx*1]
 100c69a:	test   ax,ax
 100c69d:	je     0x100c6bd
 100c69f:	mov    WORD PTR [rcx],ax
 100c6a2:	add    rcx,0x2
 100c6a6:	dec    r8
 100c6a9:	dec    rdx
 100c6ac:	jne    0x100c690
 100c6ae:	jmp    0x100c6c2
 100c6b0:	test   rcx,rcx
 100c6b3:	je     0x100c65e
 100c6b5:	mov    r8,rdx
 100c6b8:	sub    r8,rcx
 100c6bb:	jmp    0x100c667
 100c6bd:	test   rdx,rdx
 100c6c0:	jne    0x100c6cc
 100c6c2:	sub    rcx,0x2
 100c6c6:	mov    r9d,0x8007007a
 100c6cc:	mov    WORD PTR [rcx],di
 100c6cf:	mov    rbx,QWORD PTR [rsp+0x8]
 100c6d4:	mov    rdi,QWORD PTR [rsp+0x10]
 100c6d9:	mov    eax,r9d
 100c6dc:	ret    
 100c6dd:	int3   
 100c6de:	int3   
 100c6df:	int3   
 100c6e0:	int3   
 100c6e1:	int3   
 100c6e2:	int3   
 100c6e3:	int3   
 100c6e4:	int3   
 100c6e5:	int3   
 100c6e6:	int3   
 100c6e7:	int3   
 100c6e8:	int3   
 100c6e9:	int3   
 100c6ea:	int3   
 100c6eb:	int3   
 100c6ec:	int3   
 100c6ed:	int3   
 100c6ee:	int3   
 100c6ef:	int3   
 100c6f0:	mov    r11,rsp
 100c6f3:	mov    QWORD PTR [r11+0x10],rdx
 100c6f7:	sub    rsp,0xa8
 100c6fe:	mov    QWORD PTR [r11-0x10],0xfffffffffffffffe
 100c706:	lea    rax,[rsp+0x20]
 100c70b:	mov    QWORD PTR [r11+0x18],rax
 100c70f:	mov    rax,QWORD PTR [rdx]
 100c712:	mov    QWORD PTR [rsp+0x20],rax
 100c717:	mov    rax,QWORD PTR [rdx+0x8]
 100c71b:	mov    QWORD PTR [r11-0x80],rax
 100c71f:	mov    eax,DWORD PTR [rdx+0x10]
 100c722:	mov    DWORD PTR [rsp+0x30],eax
 100c726:	mov    eax,DWORD PTR [rdx+0x18]
 100c729:	mov    DWORD PTR [rsp+0x38],eax
 100c72d:	mov    eax,DWORD PTR [rdx+0x14]
 100c730:	mov    DWORD PTR [rsp+0x34],eax
 100c734:	movzx  eax,WORD PTR [rdx+0x70]
 100c738:	mov    WORD PTR [r11-0x18],ax
 100c73d:	movzx  eax,BYTE PTR [rdx+0x72]
 100c741:	mov    BYTE PTR [r11-0x16],al
 100c745:	movzx  eax,BYTE PTR [rdx+0x73]
 100c749:	mov    BYTE PTR [r11-0x15],al
 100c74d:	mov    BYTE PTR [rdx+0x73],0x0
 100c751:	mov    rax,QWORD PTR [rdx+0x20]
 100c755:	mov    QWORD PTR [r11-0x68],rax
 100c759:	mov    rax,QWORD PTR [rdx+0x28]
 100c75d:	mov    QWORD PTR [r11-0x60],rax
 100c761:	mov    rax,QWORD PTR [rdx+0x30]
 100c765:	mov    QWORD PTR [r11-0x58],rax
 100c769:	mov    rax,QWORD PTR [rdx+0x38]
 100c76d:	mov    QWORD PTR [r11-0x50],rax
 100c771:	mov    rax,QWORD PTR [rdx+0x40]
 100c775:	mov    QWORD PTR [r11-0x48],rax
 100c779:	mov    rax,QWORD PTR [rdx+0x48]
 100c77d:	mov    QWORD PTR [r11-0x40],rax
 100c781:	mov    rax,QWORD PTR [rdx+0x50]
 100c785:	mov    QWORD PTR [r11-0x38],rax
 100c789:	mov    rax,QWORD PTR [rdx+0x58]
 100c78d:	mov    QWORD PTR [r11-0x30],rax
 100c791:	mov    rax,QWORD PTR [rdx+0x60]
 100c795:	mov    QWORD PTR [r11-0x28],rax
 100c799:	mov    rax,QWORD PTR [rdx+0x68]
 100c79d:	mov    QWORD PTR [r11-0x20],rax
 100c7a1:	lea    r9,[rip+0xffffffffffff6408]        # 0x1002bb0
 100c7a8:	mov    r8d,0x8007000e
 100c7ae:	lea    rdx,[rsp+0x20]
 100c7b3:	call   0x1006e50
 100c7b8:	int3   
 100c7b9:	int3   
 100c7ba:	int3   
 100c7bb:	int3   
 100c7bc:	int3   
 100c7bd:	int3   
 100c7be:	int3   
 100c7bf:	int3   
 100c7c0:	lea    rax,[rip+0xffffffffffff64c9]        # 0x1002c90
 100c7c7:	mov    QWORD PTR [rcx],rax
 100c7ca:	ret    
 100c7cb:	int3   
 100c7cc:	int3   
 100c7cd:	int3   
 100c7ce:	int3   
 100c7cf:	int3   
 100c7d0:	int3   
 100c7d1:	int3   
 100c7d2:	int3   
 100c7d3:	int3   
 100c7d4:	int3   
 100c7d5:	int3   
 100c7d6:	int3   
 100c7d7:	int3   
 100c7d8:	int3   
 100c7d9:	int3   
 100c7da:	int3   
 100c7db:	int3   
 100c7dc:	int3   
 100c7dd:	int3   
 100c7de:	int3   
 100c7df:	int3   
 100c7e0:	rex push rbx
 100c7e2:	sub    rsp,0x20
 100c7e6:	lea    rax,[rip+0xffffffffffff64a3]        # 0x1002c90
 100c7ed:	mov    rbx,rcx
 100c7f0:	mov    QWORD PTR [rcx],rax
 100c7f3:	test   dl,0x1
 100c7f6:	je     0x100c7fd
 100c7f8:	call   0x1009d34
 100c7fd:	mov    rax,rbx
 100c800:	add    rsp,0x20
 100c804:	pop    rbx
 100c805:	ret    
 100c806:	int3   
 100c807:	int3   
 100c808:	int3   
 100c809:	int3   
 100c80a:	int3   
 100c80b:	int3   
 100c80c:	int3   
 100c80d:	int3   
 100c80e:	int3   
 100c80f:	int3   
 100c810:	mov    rax,rsp
 100c813:	push   rbp
 100c814:	push   r14
 100c816:	push   r15
 100c818:	lea    rbp,[rax-0x78]
 100c81c:	sub    rsp,0x160
 100c823:	mov    QWORD PTR [rbp+0x58],0xfffffffffffffffe
 100c82b:	mov    QWORD PTR [rax+0x10],rbx
 100c82f:	mov    QWORD PTR [rax+0x18],rsi
 100c833:	mov    QWORD PTR [rax+0x20],rdi
 100c837:	mov    edi,edx
 100c839:	mov    rbx,rcx
 100c83c:	lea    rax,[rbp-0x48]
 100c840:	mov    QWORD PTR [rbp+0x80],rax
 100c847:	lea    r14,[rip+0xffffffffffff63a2]        # 0x1002bf0
 100c84e:	mov    QWORD PTR [rbp-0x48],r14
 100c852:	lea    r15,[rip+0xffffffffffff6387]        # 0x1002be0
 100c859:	mov    QWORD PTR [rbp-0x40],r15
 100c85d:	mov    DWORD PTR [rbp-0x38],0x1b5
 100c864:	mov    QWORD PTR [rbp-0x34],0x4000
 100c86c:	xor    esi,esi
 100c86e:	mov    DWORD PTR [rbp+0x28],0x1000000
 100c875:	mov    QWORD PTR [rbp-0x28],rsi
 100c879:	mov    QWORD PTR [rbp-0x20],rsi
 100c87d:	mov    QWORD PTR [rbp-0x18],rsi
 100c881:	mov    QWORD PTR [rbp-0x10],rsi
 100c885:	mov    QWORD PTR [rbp-0x8],rsi
 100c889:	mov    QWORD PTR [rbp+0x0],rsi
 100c88d:	mov    QWORD PTR [rbp+0x8],rsi
 100c891:	mov    QWORD PTR [rbp+0x10],rsi
 100c895:	mov    QWORD PTR [rbp+0x18],rsi
 100c899:	mov    QWORD PTR [rbp+0x20],rsi
 100c89d:	lea    r8,[rip+0xffffffffffff692c]        # 0x10031d0
 100c8a4:	lea    rdx,[rbp-0x48]
 100c8a8:	lea    rcx,[rbp+0x30]
 100c8ac:	call   0x10060d0
 100c8b1:	nop
 100c8b2:	mov    rcx,QWORD PTR [rbx+0x8]
 100c8b6:	test   rcx,rcx
 100c8b9:	je     0x100c8c1
 100c8bb:	call   QWORD PTR [rip+0xffffffffffff4887]        # 0x1001148
 100c8c1:	mov    QWORD PTR [rbx+0x8],rsi
 100c8c5:	mov    rdx,rdi
 100c8c8:	xor    ecx,ecx
 100c8ca:	call   QWORD PTR [rip+0xffffffffffff4880]        # 0x1001150
 100c8d0:	mov    QWORD PTR [rbx+0x8],rax
 100c8d4:	test   rax,rax
 100c8d7:	jne    0x100c942
 100c8d9:	lea    rax,[rsp+0x40]
 100c8de:	mov    QWORD PTR [rbp+0x80],rax
 100c8e5:	mov    QWORD PTR [rsp+0x40],r14
 100c8ea:	mov    QWORD PTR [rsp+0x48],r15
 100c8ef:	mov    DWORD PTR [rsp+0x50],0x1bc
 100c8f7:	mov    QWORD PTR [rsp+0x54],0x4000
 100c900:	mov    DWORD PTR [rbp-0x50],0x1000000
 100c907:	mov    QWORD PTR [rsp+0x60],rsi
 100c90c:	mov    QWORD PTR [rsp+0x68],rsi
 100c911:	mov    QWORD PTR [rsp+0x70],rsi
 100c916:	mov    QWORD PTR [rsp+0x78],rsi
 100c91b:	mov    QWORD PTR [rbp-0x80],rsi
 100c91f:	mov    QWORD PTR [rbp-0x78],rsi
 100c923:	mov    QWORD PTR [rbp-0x70],rsi
 100c927:	mov    QWORD PTR [rbp-0x68],rsi
 100c92b:	mov    QWORD PTR [rbp-0x60],rsi
 100c92f:	mov    QWORD PTR [rbp-0x58],rsi
 100c933:	lea    rdx,[rsp+0x40]
 100c938:	lea    rcx,[rbp+0x30]
 100c93c:	call   0x100c6f0
 100c941:	nop
 100c942:	cmp    DWORD PTR [rip+0xee37],0x0        # 0x101b780
 100c949:	je     0x100c9a9
 100c94b:	cmp    DWORD PTR [rip+0xee4e],0x0        # 0x101b7a0
 100c952:	je     0x100c9a9
 100c954:	mov    DWORD PTR [rsp+0x30],esi
 100c958:	mov    rax,QWORD PTR [rbp+0x38]
 100c95c:	mov    QWORD PTR [rsp+0x28],rax
 100c961:	mov    eax,DWORD PTR [rbp+0x4c]
 100c964:	mov    DWORD PTR [rsp+0x20],eax
 100c968:	mov    ebx,DWORD PTR [rbp+0x50]
 100c96b:	mov    r9d,ebx
 100c96e:	xor    r8d,r8d
 100c971:	lea    rdx,[rip+0xffffffffffff83a4]        # 0x1004d1c
 100c978:	lea    rcx,[rip+0xee01]        # 0x101b780
 100c97f:	call   0x100af10
 100c984:	mov    r8d,DWORD PTR [rbp+0x30]
 100c988:	lea    rdx,[rip+0xffffffffffff7d81]        # 0x1004710
 100c98f:	lea    rcx,[rip+0xedea]        # 0x101b780
 100c996:	call   0x100b470
 100c99b:	mov    edx,ebx
 100c99d:	lea    rcx,[rip+0xeddc]        # 0x101b780
 100c9a4:	call   0x100b150
 100c9a9:	lea    r11,[rsp+0x160]
 100c9b1:	mov    rbx,QWORD PTR [r11+0x28]
 100c9b5:	mov    rsi,QWORD PTR [r11+0x30]
 100c9b9:	mov    rdi,QWORD PTR [r11+0x38]
 100c9bd:	mov    rsp,r11
 100c9c0:	pop    r15
 100c9c2:	pop    r14
 100c9c4:	pop    rbp
 100c9c5:	ret    
 100c9c6:	int3   
 100c9c7:	int3   
 100c9c8:	int3   
 100c9c9:	int3   
 100c9ca:	int3   
 100c9cb:	int3   
 100c9cc:	int3   
 100c9cd:	int3   
 100c9ce:	int3   
 100c9cf:	int3   
 100c9d0:	mov    QWORD PTR [rsp+0x8],rcx
 100c9d5:	sub    rsp,0x18
 100c9d9:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 100c9e1:	lea    rax,[rip+0xffffffffffff62a8]        # 0x1002c90
 100c9e8:	mov    QWORD PTR [rcx],rax
 100c9eb:	add    rsp,0x18
 100c9ef:	ret    
 100c9f0:	int3   
 100c9f1:	int3   
 100c9f2:	int3   
 100c9f3:	int3   
 100c9f4:	int3   
 100c9f5:	int3   
 100c9f6:	int3   
 100c9f7:	int3   
 100c9f8:	int3   
 100c9f9:	int3   
 100c9fa:	int3   
 100c9fb:	int3   
 100c9fc:	int3   
 100c9fd:	int3   
 100c9fe:	int3   
 100c9ff:	int3   
 100ca00:	mov    QWORD PTR [rsp+0x8],rcx
 100ca05:	push   rbx
 100ca06:	sub    rsp,0x30
 100ca0a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100ca13:	mov    rbx,rcx
 100ca16:	lea    rax,[rip+0xffffffffffff6273]        # 0x1002c90
 100ca1d:	mov    QWORD PTR [rcx],rax
 100ca20:	test   dl,0x1
 100ca23:	je     0x100ca2a
 100ca25:	call   0x1009d34
 100ca2a:	mov    rax,rbx
 100ca2d:	add    rsp,0x30
 100ca31:	pop    rbx
 100ca32:	ret    
 100ca33:	int3   
 100ca34:	int3   
 100ca35:	int3   
 100ca36:	int3   
 100ca37:	int3   
 100ca38:	int3   
 100ca39:	int3   
 100ca3a:	int3   
 100ca3b:	int3   
 100ca3c:	int3   
 100ca3d:	int3   
 100ca3e:	int3   
 100ca3f:	int3   
 100ca40:	mov    rax,rsp
 100ca43:	push   rbp
 100ca44:	push   rdi
 100ca45:	push   r12
 100ca47:	push   r14
 100ca49:	push   r15
 100ca4b:	lea    rbp,[rax-0x5f]
 100ca4f:	sub    rsp,0xf0
 100ca56:	mov    QWORD PTR [rbp+0x27],0xfffffffffffffffe
 100ca5e:	mov    QWORD PTR [rax+0x10],rbx
 100ca62:	mov    QWORD PTR [rax+0x18],rsi
 100ca66:	mov    rdi,rdx
 100ca69:	mov    rsi,rcx
 100ca6c:	lea    rax,[rbp-0x79]
 100ca70:	mov    QWORD PTR [rbp+0x67],rax
 100ca74:	lea    r15,[rip+0xffffffffffff6175]        # 0x1002bf0
 100ca7b:	mov    QWORD PTR [rbp-0x79],r15
 100ca7f:	lea    r12,[rip+0xffffffffffff615a]        # 0x1002be0
 100ca86:	mov    QWORD PTR [rbp-0x71],r12
 100ca8a:	mov    DWORD PTR [rbp-0x69],0x1e1
 100ca91:	mov    QWORD PTR [rbp-0x65],0x4000
 100ca99:	xor    r14d,r14d
 100ca9c:	mov    DWORD PTR [rbp-0x9],0x1000000
 100caa3:	mov    QWORD PTR [rbp-0x59],r14
 100caa7:	mov    QWORD PTR [rbp-0x51],r14
 100caab:	mov    QWORD PTR [rbp-0x49],r14
 100caaf:	mov    QWORD PTR [rbp-0x41],r14
 100cab3:	mov    QWORD PTR [rbp-0x39],r14
 100cab7:	mov    QWORD PTR [rbp-0x31],r14
 100cabb:	mov    QWORD PTR [rbp-0x29],r14
 100cabf:	mov    QWORD PTR [rbp-0x21],r14
 100cac3:	mov    QWORD PTR [rbp-0x19],r14
 100cac7:	mov    QWORD PTR [rbp-0x11],r14
 100cacb:	lea    r8,[rip+0xffffffffffff61de]        # 0x1002cb0
 100cad2:	lea    rdx,[rbp-0x79]
 100cad6:	lea    rcx,[rbp-0x1]
 100cada:	call   0x10060d0
 100cadf:	nop
 100cae0:	or     rbx,0xffffffffffffffff
 100cae4:	inc    rbx
 100cae7:	cmp    WORD PTR [rdi+rbx*2],0x0
 100caec:	jne    0x100cae4
 100caee:	lea    edx,[rbx*2+0x2]
 100caf5:	mov    rcx,rsi
 100caf8:	call   0x100c810
 100cafd:	lea    edx,[rbx+0x1]
 100cb00:	mov    r8,rdi
 100cb03:	mov    rcx,QWORD PTR [rsi+0x8]
 100cb07:	call   0x1006a30
 100cb0c:	mov    DWORD PTR [rbp-0x1],eax
 100cb0f:	test   eax,eax
 100cb11:	jns    0x100cb83
 100cb13:	lea    rax,[rbp-0x79]
 100cb17:	mov    QWORD PTR [rbp+0x67],rax
 100cb1b:	mov    QWORD PTR [rbp-0x79],r15
 100cb1f:	mov    QWORD PTR [rbp-0x71],r12
 100cb23:	mov    DWORD PTR [rbp-0x69],0x1e8
 100cb2a:	mov    QWORD PTR [rbp-0x65],0x4000
 100cb32:	mov    DWORD PTR [rbp-0x9],0x1000000
 100cb39:	mov    QWORD PTR [rbp-0x59],r14
 100cb3d:	mov    QWORD PTR [rbp-0x51],r14
 100cb41:	mov    QWORD PTR [rbp-0x49],r14
 100cb45:	mov    QWORD PTR [rbp-0x41],r14
 100cb49:	mov    QWORD PTR [rbp-0x39],r14
 100cb4d:	mov    QWORD PTR [rbp-0x31],r14
 100cb51:	mov    QWORD PTR [rbp-0x29],r14
 100cb55:	mov    QWORD PTR [rbp-0x21],r14
 100cb59:	mov    QWORD PTR [rbp-0x19],r14
 100cb5d:	mov    QWORD PTR [rbp-0x11],r14
 100cb61:	mov    eax,DWORD PTR [rbp-0x1]
 100cb64:	mov    DWORD PTR [rsp+0x20],eax
 100cb68:	lea    r9,[rip+0xffffffffffff6191]        # 0x1002d00
 100cb6f:	mov    r8d,0x8000ffff
 100cb75:	lea    rdx,[rbp-0x79]
 100cb79:	lea    rcx,[rbp-0x1]
 100cb7d:	call   0x100c1a0
 100cb82:	nop
 100cb83:	cmp    DWORD PTR [rip+0xebf6],0x0        # 0x101b780
 100cb8a:	je     0x100cbea
 100cb8c:	cmp    DWORD PTR [rip+0xec0d],0x0        # 0x101b7a0
 100cb93:	je     0x100cbea
 100cb95:	mov    DWORD PTR [rsp+0x30],r14d
 100cb9a:	mov    rax,QWORD PTR [rbp+0x7]
 100cb9e:	mov    QWORD PTR [rsp+0x28],rax
 100cba3:	mov    eax,DWORD PTR [rbp+0x1b]
 100cba6:	mov    DWORD PTR [rsp+0x20],eax
 100cbaa:	mov    r9d,DWORD PTR [rbp+0x1f]
 100cbae:	xor    r8d,r8d
 100cbb1:	lea    rdx,[rip+0xffffffffffff8164]        # 0x1004d1c
 100cbb8:	lea    rcx,[rip+0xebc1]        # 0x101b780
 100cbbf:	call   0x100af10
 100cbc4:	mov    r8d,DWORD PTR [rbp-0x1]
 100cbc8:	lea    rdx,[rip+0xffffffffffff7b41]        # 0x1004710
 100cbcf:	lea    rcx,[rip+0xebaa]        # 0x101b780
 100cbd6:	call   0x100b470
 100cbdb:	mov    edx,DWORD PTR [rbp+0x1f]
 100cbde:	lea    rcx,[rip+0xeb9b]        # 0x101b780
 100cbe5:	call   0x100b150
 100cbea:	lea    r11,[rsp+0xf0]
 100cbf2:	mov    rbx,QWORD PTR [r11+0x38]
 100cbf6:	mov    rsi,QWORD PTR [r11+0x40]
 100cbfa:	mov    rsp,r11
 100cbfd:	pop    r15
 100cbff:	pop    r14
 100cc01:	pop    r12
 100cc03:	pop    rdi
 100cc04:	pop    rbp
 100cc05:	ret    
 100cc06:	int3   
 100cc07:	int3   
 100cc08:	int3   
 100cc09:	int3   
 100cc0a:	int3   
 100cc0b:	int3   
 100cc0c:	int3   
 100cc0d:	int3   
 100cc0e:	int3   
 100cc0f:	int3   
 100cc10:	mov    r11,rsp
 100cc13:	mov    QWORD PTR [r11+0x8],rcx
 100cc17:	push   rbx
 100cc18:	push   rsi
 100cc19:	push   rdi
 100cc1a:	push   r12
 100cc1c:	push   r13
 100cc1e:	push   r14
 100cc20:	push   r15
 100cc22:	sub    rsp,0x110
 100cc29:	mov    QWORD PTR [r11-0x48],0xfffffffffffffffe
 100cc31:	mov    r13,rdx
 100cc34:	mov    r15,rcx
 100cc37:	lea    rax,[rsp+0x48]
 100cc3c:	mov    QWORD PTR [r11+0x18],rax
 100cc40:	lea    rax,[rip+0xffffffffffff5fa9]        # 0x1002bf0
 100cc47:	mov    QWORD PTR [rsp+0x48],rax
 100cc4c:	lea    rax,[rip+0xffffffffffff5f8d]        # 0x1002be0
 100cc53:	mov    QWORD PTR [rsp+0x50],rax
 100cc58:	mov    DWORD PTR [rsp+0x58],0x1ee
 100cc60:	mov    QWORD PTR [rsp+0x5c],0x4000
 100cc69:	xor    edi,edi
 100cc6b:	mov    DWORD PTR [rsp+0xb8],0x1000000
 100cc76:	mov    QWORD PTR [rsp+0x68],rdi
 100cc7b:	mov    QWORD PTR [rsp+0x70],rdi
 100cc80:	mov    QWORD PTR [rsp+0x78],rdi
 100cc85:	mov    QWORD PTR [r11-0xc8],rdi
 100cc8c:	mov    QWORD PTR [r11-0xc0],rdi
 100cc93:	mov    QWORD PTR [r11-0xb8],rdi
 100cc9a:	mov    QWORD PTR [r11-0xb0],rdi
 100cca1:	mov    QWORD PTR [r11-0xa8],rdi
 100cca8:	mov    QWORD PTR [r11-0xa0],rdi
 100ccaf:	mov    QWORD PTR [r11-0x98],rdi
 100ccb6:	lea    r8,[rip+0xffffffffffff5ff3]        # 0x1002cb0
 100ccbd:	lea    rdx,[rsp+0x48]
 100ccc2:	lea    rcx,[r11-0x78]
 100ccc6:	call   0x10060d0
 100cccb:	nop
 100cccc:	lea    r12,[r15+0x8]
 100ccd0:	mov    QWORD PTR [rsp+0x160],r12
 100ccd8:	mov    rsi,QWORD PTR [r12]
 100ccdc:	lea    rax,[rip+0xffffffffffff5fad]        # 0x1002c90
 100cce3:	mov    QWORD PTR [rsp+0xc0],rax
 100cceb:	mov    QWORD PTR [rsp+0xc8],rdi
 100ccf3:	lea    rax,[rip+0xffffffffffff5f9e]        # 0x1002c98
 100ccfa:	mov    QWORD PTR [rsp+0xc0],rax
 100cd02:	lea    rax,[rip+0xffffffffffff602f]        # 0x1002d38
 100cd09:	mov    QWORD PTR [rsp+0xc0],rax
 100cd11:	mov    QWORD PTR [rsp+0xc8],rsi
 100cd19:	lea    rax,[rip+0xffffffffffff6020]        # 0x1002d40
 100cd20:	mov    QWORD PTR [rsp+0xc0],rax
 100cd28:	mov    QWORD PTR [r12],rdi
 100cd2c:	test   rsi,rsi
 100cd2f:	jne    0x100cd41
 100cd31:	mov    rdx,r13
 100cd34:	mov    rcx,r15
 100cd37:	call   0x100ca40
 100cd3c:	jmp    0x100ceb0
 100cd41:	or     rax,0xffffffffffffffff
 100cd45:	mov    r14,rax
 100cd48:	nop    DWORD PTR [rax+rax*1+0x0]
 100cd50:	inc    r14
 100cd53:	cmp    WORD PTR [rsi+r14*2],0x0
 100cd59:	jne    0x100cd50
 100cd5b:	nop    DWORD PTR [rax+rax*1+0x0]
 100cd60:	inc    rax
 100cd63:	cmp    WORD PTR [r13+rax*2+0x0],0x0
 100cd6a:	jne    0x100cd60
 100cd6c:	add    r14d,eax
 100cd6f:	lea    eax,[r14+0x1]
 100cd73:	mov    ebx,eax
 100cd75:	lea    edx,[rax+rax*1]
 100cd78:	mov    rcx,r15
 100cd7b:	call   0x100c810
 100cd80:	mov    r8,rsi
 100cd83:	mov    edx,ebx
 100cd85:	mov    rcx,QWORD PTR [r12]
 100cd89:	call   0x1006a30
 100cd8e:	mov    DWORD PTR [rsp+0xd0],eax
 100cd95:	lea    rbx,[rip+0xffffffffffff5e54]        # 0x1002bf0
 100cd9c:	test   eax,eax
 100cd9e:	jns    0x100ce1a
 100cda0:	lea    rdx,[rsp+0x48]
 100cda5:	mov    QWORD PTR [rsp+0x168],rdx
 100cdad:	mov    QWORD PTR [rsp+0x48],rbx
 100cdb2:	lea    rax,[rip+0xffffffffffff5e27]        # 0x1002be0
 100cdb9:	mov    QWORD PTR [rsp+0x50],rax
 100cdbe:	mov    DWORD PTR [rsp+0x58],0x202
 100cdc6:	mov    QWORD PTR [rsp+0x5c],0x4000
 100cdcf:	mov    DWORD PTR [rsp+0xb8],0x1000000
 100cdda:	movzx  ecx,di
 100cddd:	mov    WORD PTR [rsp+0x40],cx
 100cde2:	cmp    cx,0xa
 100cde6:	jae    0x100cdf5
 100cde8:	movzx  eax,cx
 100cdeb:	mov    QWORD PTR [rdx+rax*8+0x20],rdi
 100cdf0:	inc    cx
 100cdf3:	jmp    0x100cddd
 100cdf5:	mov    eax,DWORD PTR [rsp+0xd0]
 100cdfc:	mov    DWORD PTR [rsp+0x20],eax
 100ce00:	lea    r9,[rip+0xffffffffffff5ef9]        # 0x1002d00
 100ce07:	mov    r8d,0x8000ffff
 100ce0d:	lea    rcx,[rsp+0xd0]
 100ce15:	call   0x100c1a0
 100ce1a:	lea    edx,[r14+0x1]
 100ce1e:	mov    r8,r13
 100ce21:	mov    rcx,QWORD PTR [r12]
 100ce25:	call   0x100c610
 100ce2a:	mov    DWORD PTR [rsp+0xd0],eax
 100ce31:	test   eax,eax
 100ce33:	jns    0x100ceb0
 100ce35:	lea    rdx,[rsp+0x48]
 100ce3a:	mov    QWORD PTR [rsp+0x168],rdx
 100ce42:	mov    QWORD PTR [rsp+0x48],rbx
 100ce47:	lea    rax,[rip+0xffffffffffff5d92]        # 0x1002be0
 100ce4e:	mov    QWORD PTR [rsp+0x50],rax
 100ce53:	mov    DWORD PTR [rsp+0x58],0x205
 100ce5b:	mov    QWORD PTR [rsp+0x5c],0x4000
 100ce64:	mov    DWORD PTR [rsp+0xb8],0x1000000
 100ce6f:	movzx  ecx,di
 100ce72:	mov    WORD PTR [rsp+0x44],cx
 100ce77:	cmp    cx,0xa
 100ce7b:	jae    0x100ce8a
 100ce7d:	movzx  eax,cx
 100ce80:	mov    QWORD PTR [rdx+rax*8+0x20],rdi
 100ce85:	inc    cx
 100ce88:	jmp    0x100ce72
 100ce8a:	mov    eax,DWORD PTR [rsp+0xd0]
 100ce91:	mov    DWORD PTR [rsp+0x20],eax
 100ce95:	lea    r9,[rip+0xffffffffffff5e64]        # 0x1002d00
 100ce9c:	mov    r8d,0x8000ffff
 100cea2:	lea    rcx,[rsp+0xd0]
 100ceaa:	call   0x100c1a0
 100ceaf:	nop
 100ceb0:	jmp    0x100cecc
 100ceb2:	xor    edi,edi
 100ceb4:	mov    r15,QWORD PTR [rsp+0x150]
 100cebc:	mov    r12,QWORD PTR [rsp+0x160]
 100cec4:	mov    rsi,QWORD PTR [rsp+0xc8]
 100cecc:	lea    r14,[rip+0xffffffffffff5e65]        # 0x1002d38
 100ced3:	lea    rbx,[rip+0xffffffffffff5db6]        # 0x1002c90
 100ceda:	cmp    DWORD PTR [rsp+0xd0],0x0
 100cee2:	jge    0x100cf09
 100cee4:	mov    rcx,QWORD PTR [r15+0x8]
 100cee8:	test   rcx,rcx
 100ceeb:	je     0x100cef3
 100ceed:	call   QWORD PTR [rip+0xffffffffffff4255]        # 0x1001148
 100cef3:	mov    QWORD PTR [r15+0x8],rdi
 100cef7:	mov    rax,rsi
 100cefa:	mov    rsi,rdi
 100cefd:	mov    QWORD PTR [rsp+0xc8],rdi
 100cf05:	mov    QWORD PTR [r12],rax
 100cf09:	mov    QWORD PTR [rsp+0xc0],r14
 100cf11:	test   rsi,rsi
 100cf14:	je     0x100cf1f
 100cf16:	mov    rcx,rsi
 100cf19:	call   QWORD PTR [rip+0xffffffffffff4229]        # 0x1001148
 100cf1f:	mov    QWORD PTR [rsp+0xc8],rdi
 100cf27:	mov    QWORD PTR [rsp+0xc0],rbx
 100cf2f:	cmp    DWORD PTR [rip+0xe84a],0x0        # 0x101b780
 100cf36:	je     0x100cfa9
 100cf38:	cmp    DWORD PTR [rip+0xe861],0x0        # 0x101b7a0
 100cf3f:	je     0x100cfa9
 100cf41:	mov    DWORD PTR [rsp+0x30],edi
 100cf45:	mov    rax,QWORD PTR [rsp+0xd8]
 100cf4d:	mov    QWORD PTR [rsp+0x28],rax
 100cf52:	mov    eax,DWORD PTR [rsp+0xec]
 100cf59:	mov    DWORD PTR [rsp+0x20],eax
 100cf5d:	mov    r9d,DWORD PTR [rsp+0xf0]
 100cf65:	xor    r8d,r8d
 100cf68:	lea    rdx,[rip+0xffffffffffff7dad]        # 0x1004d1c
 100cf6f:	lea    rcx,[rip+0xe80a]        # 0x101b780
 100cf76:	call   0x100af10
 100cf7b:	mov    r8d,DWORD PTR [rsp+0xd0]
 100cf83:	lea    rdx,[rip+0xffffffffffff7786]        # 0x1004710
 100cf8a:	lea    rcx,[rip+0xe7ef]        # 0x101b780
 100cf91:	call   0x100b470
 100cf96:	mov    edx,DWORD PTR [rsp+0xf0]
 100cf9d:	lea    rcx,[rip+0xe7dc]        # 0x101b780
 100cfa4:	call   0x100b150
 100cfa9:	add    rsp,0x110
 100cfb0:	pop    r15
 100cfb2:	pop    r14
 100cfb4:	pop    r13
 100cfb6:	pop    r12
 100cfb8:	pop    rdi
 100cfb9:	pop    rsi
 100cfba:	pop    rbx
 100cfbb:	ret    
 100cfbc:	int3   
 100cfbd:	int3   
 100cfbe:	int3   
 100cfbf:	int3   
 100cfc0:	int3   
 100cfc1:	int3   
 100cfc2:	int3   
 100cfc3:	int3   
 100cfc4:	int3   
 100cfc5:	int3   
 100cfc6:	int3   
 100cfc7:	int3   
 100cfc8:	int3   
 100cfc9:	int3   
 100cfca:	int3   
 100cfcb:	int3   
 100cfcc:	int3   
 100cfcd:	int3   
 100cfce:	int3   
 100cfcf:	int3   
 100cfd0:	mov    QWORD PTR [rsp+0x8],rcx
 100cfd5:	sub    rsp,0x18
 100cfd9:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 100cfe1:	lea    rax,[rip+0xffffffffffff5ca8]        # 0x1002c90
 100cfe8:	mov    QWORD PTR [rcx],rax
 100cfeb:	add    rsp,0x18
 100cfef:	ret    
 100cff0:	int3   
 100cff1:	int3   
 100cff2:	int3   
 100cff3:	int3   
 100cff4:	int3   
 100cff5:	int3   
 100cff6:	int3   
 100cff7:	int3   
 100cff8:	int3   
 100cff9:	int3   
 100cffa:	int3   
 100cffb:	int3   
 100cffc:	int3   
 100cffd:	int3   
 100cffe:	int3   
 100cfff:	int3   
 100d000:	mov    QWORD PTR [rsp+0x8],rcx
 100d005:	push   rbx
 100d006:	sub    rsp,0x30
 100d00a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d013:	mov    rbx,rcx
 100d016:	lea    rax,[rip+0xffffffffffff5c73]        # 0x1002c90
 100d01d:	mov    QWORD PTR [rcx],rax
 100d020:	test   dl,0x1
 100d023:	je     0x100d02a
 100d025:	call   0x1009d34
 100d02a:	mov    rax,rbx
 100d02d:	add    rsp,0x30
 100d031:	pop    rbx
 100d032:	ret    
 100d033:	int3   
 100d034:	int3   
 100d035:	int3   
 100d036:	int3   
 100d037:	int3   
 100d038:	int3   
 100d039:	int3   
 100d03a:	int3   
 100d03b:	int3   
 100d03c:	int3   
 100d03d:	int3   
 100d03e:	int3   
 100d03f:	int3   
 100d040:	mov    QWORD PTR [rsp+0x8],rcx
 100d045:	push   rbx
 100d046:	sub    rsp,0x30
 100d04a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d053:	mov    rbx,rcx
 100d056:	lea    rax,[rip+0xffffffffffff5cdb]        # 0x1002d38
 100d05d:	mov    QWORD PTR [rcx],rax
 100d060:	mov    rcx,QWORD PTR [rcx+0x8]
 100d064:	test   rcx,rcx
 100d067:	je     0x100d06f
 100d069:	call   QWORD PTR [rip+0xffffffffffff40d9]        # 0x1001148
 100d06f:	mov    QWORD PTR [rbx+0x8],0x0
 100d077:	lea    rax,[rip+0xffffffffffff5c12]        # 0x1002c90
 100d07e:	mov    QWORD PTR [rbx],rax
 100d081:	add    rsp,0x30
 100d085:	pop    rbx
 100d086:	ret    
 100d087:	int3   
 100d088:	int3   
 100d089:	int3   
 100d08a:	int3   
 100d08b:	int3   
 100d08c:	int3   
 100d08d:	int3   
 100d08e:	int3   
 100d08f:	int3   
 100d090:	mov    QWORD PTR [rsp+0x8],rcx
 100d095:	push   rdi
 100d096:	sub    rsp,0x30
 100d09a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d0a3:	mov    QWORD PTR [rsp+0x48],rbx
 100d0a8:	mov    edi,edx
 100d0aa:	mov    rbx,rcx
 100d0ad:	lea    rax,[rip+0xffffffffffff5c84]        # 0x1002d38
 100d0b4:	mov    QWORD PTR [rcx],rax
 100d0b7:	mov    rcx,QWORD PTR [rcx+0x8]
 100d0bb:	test   rcx,rcx
 100d0be:	je     0x100d0c6
 100d0c0:	call   QWORD PTR [rip+0xffffffffffff4082]        # 0x1001148
 100d0c6:	mov    QWORD PTR [rbx+0x8],0x0
 100d0ce:	lea    rax,[rip+0xffffffffffff5bbb]        # 0x1002c90
 100d0d5:	mov    QWORD PTR [rbx],rax
 100d0d8:	test   dil,0x1
 100d0dc:	je     0x100d0e6
 100d0de:	mov    rcx,rbx
 100d0e1:	call   0x1009d34
 100d0e6:	mov    rax,rbx
 100d0e9:	mov    rbx,QWORD PTR [rsp+0x48]
 100d0ee:	add    rsp,0x30
 100d0f2:	pop    rdi
 100d0f3:	ret    
 100d0f4:	int3   
 100d0f5:	int3   
 100d0f6:	int3   
 100d0f7:	int3   
 100d0f8:	int3   
 100d0f9:	int3   
 100d0fa:	int3   
 100d0fb:	int3   
 100d0fc:	int3   
 100d0fd:	int3   
 100d0fe:	int3   
 100d0ff:	int3   
 100d100:	mov    QWORD PTR [rsp+0x8],rcx
 100d105:	push   rbx
 100d106:	sub    rsp,0x30
 100d10a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d113:	mov    rbx,rcx
 100d116:	lea    rax,[rip+0xffffffffffff5c1b]        # 0x1002d38
 100d11d:	mov    QWORD PTR [rcx],rax
 100d120:	mov    rcx,QWORD PTR [rcx+0x8]
 100d124:	test   rcx,rcx
 100d127:	je     0x100d12f
 100d129:	call   QWORD PTR [rip+0xffffffffffff4019]        # 0x1001148
 100d12f:	mov    QWORD PTR [rbx+0x8],0x0
 100d137:	lea    rax,[rip+0xffffffffffff5b52]        # 0x1002c90
 100d13e:	mov    QWORD PTR [rbx],rax
 100d141:	add    rsp,0x30
 100d145:	pop    rbx
 100d146:	ret    
 100d147:	int3   
 100d148:	int3   
 100d149:	int3   
 100d14a:	int3   
 100d14b:	int3   
 100d14c:	int3   
 100d14d:	int3   
 100d14e:	int3   
 100d14f:	int3   
 100d150:	mov    QWORD PTR [rsp+0x8],rcx
 100d155:	push   rdi
 100d156:	sub    rsp,0x30
 100d15a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d163:	mov    QWORD PTR [rsp+0x48],rbx
 100d168:	mov    edi,edx
 100d16a:	mov    rbx,rcx
 100d16d:	lea    rax,[rip+0xffffffffffff5bc4]        # 0x1002d38
 100d174:	mov    QWORD PTR [rcx],rax
 100d177:	mov    rcx,QWORD PTR [rcx+0x8]
 100d17b:	test   rcx,rcx
 100d17e:	je     0x100d186
 100d180:	call   QWORD PTR [rip+0xffffffffffff3fc2]        # 0x1001148
 100d186:	mov    QWORD PTR [rbx+0x8],0x0
 100d18e:	lea    rax,[rip+0xffffffffffff5afb]        # 0x1002c90
 100d195:	mov    QWORD PTR [rbx],rax
 100d198:	test   dil,0x1
 100d19c:	je     0x100d1a6
 100d19e:	mov    rcx,rbx
 100d1a1:	call   0x1009d34
 100d1a6:	mov    rax,rbx
 100d1a9:	mov    rbx,QWORD PTR [rsp+0x48]
 100d1ae:	add    rsp,0x30
 100d1b2:	pop    rdi
 100d1b3:	ret    
 100d1b4:	int3   
 100d1b5:	int3   
 100d1b6:	int3   
 100d1b7:	int3   
 100d1b8:	int3   
 100d1b9:	int3   
 100d1ba:	int3   
 100d1bb:	int3   
 100d1bc:	int3   
 100d1bd:	int3   
 100d1be:	int3   
 100d1bf:	int3   
 100d1c0:	lea    rax,[rip+0xffffffffffff5b81]        # 0x1002d48
 100d1c7:	mov    QWORD PTR [rcx],rax
 100d1ca:	ret    
 100d1cb:	int3   
 100d1cc:	int3   
 100d1cd:	int3   
 100d1ce:	int3   
 100d1cf:	int3   
 100d1d0:	int3   
 100d1d1:	int3   
 100d1d2:	int3   
 100d1d3:	int3   
 100d1d4:	int3   
 100d1d5:	int3   
 100d1d6:	int3   
 100d1d7:	int3   
 100d1d8:	int3   
 100d1d9:	int3   
 100d1da:	int3   
 100d1db:	int3   
 100d1dc:	int3   
 100d1dd:	int3   
 100d1de:	int3   
 100d1df:	int3   
 100d1e0:	rex push rbx
 100d1e2:	sub    rsp,0x20
 100d1e6:	lea    rax,[rip+0xffffffffffff5b5b]        # 0x1002d48
 100d1ed:	mov    rbx,rcx
 100d1f0:	mov    QWORD PTR [rcx],rax
 100d1f3:	test   dl,0x1
 100d1f6:	je     0x100d1fd
 100d1f8:	call   0x1009d34
 100d1fd:	mov    rax,rbx
 100d200:	add    rsp,0x20
 100d204:	pop    rbx
 100d205:	ret    
 100d206:	int3   
 100d207:	int3   
 100d208:	int3   
 100d209:	int3   
 100d20a:	int3   
 100d20b:	int3   
 100d20c:	int3   
 100d20d:	int3   
 100d20e:	int3   
 100d20f:	int3   
 100d210:	mov    QWORD PTR [rsp+0x8],rcx
 100d215:	push   rbx
 100d216:	sub    rsp,0x30
 100d21a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d223:	mov    rbx,rcx
 100d226:	lea    rax,[rip+0xffffffffffff5b23]        # 0x1002d50
 100d22d:	mov    QWORD PTR [rcx],rax
 100d230:	mov    rcx,QWORD PTR [rcx+0x8]
 100d234:	test   rcx,rcx
 100d237:	je     0x100d23f
 100d239:	call   QWORD PTR [rip+0xffffffffffff3f09]        # 0x1001148
 100d23f:	mov    QWORD PTR [rbx+0x8],0x0
 100d247:	lea    rax,[rip+0xffffffffffff5afa]        # 0x1002d48
 100d24e:	mov    QWORD PTR [rbx],rax
 100d251:	add    rsp,0x30
 100d255:	pop    rbx
 100d256:	ret    
 100d257:	int3   
 100d258:	int3   
 100d259:	int3   
 100d25a:	int3   
 100d25b:	int3   
 100d25c:	int3   
 100d25d:	int3   
 100d25e:	int3   
 100d25f:	int3   
 100d260:	mov    QWORD PTR [rsp+0x8],rcx
 100d265:	push   rdi
 100d266:	sub    rsp,0x30
 100d26a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d273:	mov    QWORD PTR [rsp+0x48],rbx
 100d278:	mov    edi,edx
 100d27a:	mov    rbx,rcx
 100d27d:	lea    rax,[rip+0xffffffffffff5acc]        # 0x1002d50
 100d284:	mov    QWORD PTR [rcx],rax
 100d287:	mov    rcx,QWORD PTR [rcx+0x8]
 100d28b:	test   rcx,rcx
 100d28e:	je     0x100d296
 100d290:	call   QWORD PTR [rip+0xffffffffffff3eb2]        # 0x1001148
 100d296:	mov    QWORD PTR [rbx+0x8],0x0
 100d29e:	lea    rax,[rip+0xffffffffffff5aa3]        # 0x1002d48
 100d2a5:	mov    QWORD PTR [rbx],rax
 100d2a8:	test   dil,0x1
 100d2ac:	je     0x100d2b6
 100d2ae:	mov    rcx,rbx
 100d2b1:	call   0x1009d34
 100d2b6:	mov    rax,rbx
 100d2b9:	mov    rbx,QWORD PTR [rsp+0x48]
 100d2be:	add    rsp,0x30
 100d2c2:	pop    rdi
 100d2c3:	ret    
 100d2c4:	int3   
 100d2c5:	int3   
 100d2c6:	int3   
 100d2c7:	int3   
 100d2c8:	int3   
 100d2c9:	int3   
 100d2ca:	int3   
 100d2cb:	int3   
 100d2cc:	int3   
 100d2cd:	int3   
 100d2ce:	int3   
 100d2cf:	int3   
 100d2d0:	rex push rbp
 100d2d2:	push   rsi
 100d2d3:	push   rdi
 100d2d4:	push   r12
 100d2d6:	push   r13
 100d2d8:	push   r14
 100d2da:	push   r15
 100d2dc:	lea    rbp,[rsp-0x70]
 100d2e1:	sub    rsp,0x170
 100d2e8:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 100d2f0:	mov    QWORD PTR [rsp+0x1b8],rbx
 100d2f8:	mov    r15d,edx
 100d2fb:	mov    r14,rcx
 100d2fe:	lea    rax,[rsp+0x50]
 100d303:	mov    QWORD PTR [rbp+0xc0],rax
 100d30a:	lea    rbx,[rip+0xffffffffffff5a6f]        # 0x1002d80
 100d311:	mov    QWORD PTR [rsp+0x50],rbx
 100d316:	lea    rdi,[rip+0xffffffffffff5a4b]        # 0x1002d68
 100d31d:	mov    QWORD PTR [rsp+0x58],rdi
 100d322:	mov    DWORD PTR [rsp+0x60],0x30c
 100d32a:	mov    QWORD PTR [rsp+0x64],0x4000
 100d333:	xor    r12d,r12d
 100d336:	mov    DWORD PTR [rbp-0x40],0x1000000
 100d33d:	mov    QWORD PTR [rsp+0x70],r12
 100d342:	mov    QWORD PTR [rsp+0x78],r12
 100d347:	mov    QWORD PTR [rbp-0x80],r12
 100d34b:	mov    QWORD PTR [rbp-0x78],r12
 100d34f:	mov    QWORD PTR [rbp-0x70],r12
 100d353:	mov    QWORD PTR [rbp-0x68],r12
 100d357:	mov    QWORD PTR [rbp-0x60],r12
 100d35b:	mov    QWORD PTR [rbp-0x58],r12
 100d35f:	mov    QWORD PTR [rbp-0x50],r12
 100d363:	mov    QWORD PTR [rbp-0x48],r12
 100d367:	lea    r8,[rip+0xffffffffffff5ab2]        # 0x1002e20
 100d36e:	lea    rdx,[rsp+0x50]
 100d373:	lea    rcx,[rbp-0x38]
 100d377:	call   0x10060d0
 100d37c:	nop
 100d37d:	mov    DWORD PTR [rbp+0xb0],r12d
 100d384:	lea    r9,[rbp+0xb0]
 100d38b:	xor    r8d,r8d
 100d38e:	xor    edx,edx
 100d390:	mov    ecx,r15d
 100d393:	call   0x1006a20
 100d398:	call   QWORD PTR [rip+0xffffffffffff3eda]        # 0x1001278
 100d39e:	lea    esi,[r12+0xa]
 100d3a3:	cmp    eax,0x7a
 100d3a6:	je     0x100d47a
 100d3ac:	test   eax,eax
 100d3ae:	jle    0x100d3b8
 100d3b0:	movzx  eax,ax
 100d3b3:	or     eax,0x80070000
 100d3b8:	mov    DWORD PTR [rbp-0x38],eax
 100d3bb:	mov    QWORD PTR [rsp+0x50],rbx
 100d3c0:	mov    QWORD PTR [rsp+0x58],rdi
 100d3c5:	mov    DWORD PTR [rsp+0x60],0x316
 100d3cd:	mov    QWORD PTR [rsp+0x64],0x4000
 100d3d6:	mov    DWORD PTR [rbp-0x40],0x1000000
 100d3dd:	mov    QWORD PTR [rsp+0x70],r12
 100d3e2:	mov    QWORD PTR [rsp+0x78],r12
 100d3e7:	mov    QWORD PTR [rbp-0x80],r12
 100d3eb:	mov    QWORD PTR [rbp-0x78],r12
 100d3ef:	mov    QWORD PTR [rbp-0x70],r12
 100d3f3:	mov    QWORD PTR [rbp-0x68],r12
 100d3f7:	mov    QWORD PTR [rbp-0x60],r12
 100d3fb:	mov    QWORD PTR [rbp-0x58],r12
 100d3ff:	mov    QWORD PTR [rbp-0x50],r12
 100d403:	mov    QWORD PTR [rbp-0x48],r12
 100d407:	lea    rax,[rsp+0x50]
 100d40c:	mov    QWORD PTR [rbp+0xc0],rax
 100d413:	cmp    DWORD PTR [rbp-0x38],0x0
 100d417:	jge    0x100d44b
 100d419:	lea    rax,[rbp-0x8]
 100d41d:	mov    QWORD PTR [rbp+0xc8],rax
 100d424:	lea    rdx,[rsp+0x50]
 100d429:	lea    rcx,[rbp-0x8]
 100d42d:	call   0x1006b40
 100d432:	nop
 100d433:	lea    r9,[rip+0xffffffffffff5a1e]        # 0x1002e58
 100d43a:	mov    r8d,DWORD PTR [rbp-0x38]
 100d43e:	mov    rdx,rax
 100d441:	lea    rcx,[rbp-0x38]
 100d445:	call   0x100bda0
 100d44a:	nop
 100d44b:	cmp    BYTE PTR [rbp-0x3d],0x0
 100d44f:	je     0x100d47a
 100d451:	lea    rbx,[rsp+0x70]
 100d456:	mov    rdi,rsi
 100d459:	nop    DWORD PTR [rax+0x0]
 100d460:	mov    rcx,QWORD PTR [rbx]
 100d463:	test   rcx,rcx
 100d466:	je     0x100d471
 100d468:	call   QWORD PTR [rip+0xffffffffffff3fc2]        # 0x1001430
 100d46e:	mov    QWORD PTR [rbx],r12
 100d471:	add    rbx,0x8
 100d475:	dec    rdi
 100d478:	jne    0x100d460
 100d47a:	lea    r13,[rip+0xffffffffffff58c7]        # 0x1002d48
 100d481:	mov    QWORD PTR [rsp+0x40],r13
 100d486:	mov    QWORD PTR [rsp+0x48],r12
 100d48b:	lea    rax,[rip+0xffffffffffff59f6]        # 0x1002e88
 100d492:	mov    QWORD PTR [rsp+0x40],rax
 100d497:	lea    rbx,[rip+0xffffffffffff59f2]        # 0x1002e90
 100d49e:	mov    QWORD PTR [rsp+0x40],rbx
 100d4a3:	mov    QWORD PTR [rsp+0x48],r12
 100d4a8:	lea    rax,[rip+0xffffffffffff59e9]        # 0x1002e98
 100d4af:	mov    QWORD PTR [rsp+0x40],rax
 100d4b4:	mov    edx,DWORD PTR [rbp+0xb0]
 100d4ba:	lea    rcx,[rsp+0x40]
 100d4bf:	call   0x100f260
 100d4c4:	lea    r9,[rbp+0xb0]
 100d4cb:	mov    rdi,QWORD PTR [rsp+0x48]
 100d4d0:	mov    r8,rdi
 100d4d3:	xor    edx,edx
 100d4d5:	mov    ecx,r15d
 100d4d8:	call   0x1006a20
 100d4dd:	test   eax,eax
 100d4df:	jne    0x100d5c4
 100d4e5:	call   QWORD PTR [rip+0xffffffffffff3d8d]        # 0x1001278
 100d4eb:	test   eax,eax
 100d4ed:	jle    0x100d4f7
 100d4ef:	movzx  eax,ax
 100d4f2:	or     eax,0x80070000
 100d4f7:	mov    DWORD PTR [rbp-0x38],eax
 100d4fa:	lea    rax,[rip+0xffffffffffff587f]        # 0x1002d80
 100d501:	mov    QWORD PTR [rsp+0x50],rax
 100d506:	lea    rax,[rip+0xffffffffffff585b]        # 0x1002d68
 100d50d:	mov    QWORD PTR [rsp+0x58],rax
 100d512:	mov    DWORD PTR [rsp+0x60],0x31f
 100d51a:	mov    QWORD PTR [rsp+0x64],0x4000
 100d523:	mov    DWORD PTR [rbp-0x40],0x1000000
 100d52a:	mov    QWORD PTR [rsp+0x70],r12
 100d52f:	mov    QWORD PTR [rsp+0x78],r12
 100d534:	mov    QWORD PTR [rbp-0x80],r12
 100d538:	mov    QWORD PTR [rbp-0x78],r12
 100d53c:	mov    QWORD PTR [rbp-0x70],r12
 100d540:	mov    QWORD PTR [rbp-0x68],r12
 100d544:	mov    QWORD PTR [rbp-0x60],r12
 100d548:	mov    QWORD PTR [rbp-0x58],r12
 100d54c:	mov    QWORD PTR [rbp-0x50],r12
 100d550:	mov    QWORD PTR [rbp-0x48],r12
 100d554:	lea    rax,[rsp+0x50]
 100d559:	mov    QWORD PTR [rbp+0xc0],rax
 100d560:	cmp    DWORD PTR [rbp-0x38],0x0
 100d564:	jge    0x100d598
 100d566:	lea    rax,[rbp-0x8]
 100d56a:	mov    QWORD PTR [rbp+0xc8],rax
 100d571:	lea    rdx,[rsp+0x50]
 100d576:	lea    rcx,[rbp-0x8]
 100d57a:	call   0x1006b40
 100d57f:	nop
 100d580:	lea    r9,[rip+0xffffffffffff58d1]        # 0x1002e58
 100d587:	mov    r8d,DWORD PTR [rbp-0x38]
 100d58b:	mov    rdx,rax
 100d58e:	lea    rcx,[rbp-0x38]
 100d592:	call   0x100bda0
 100d597:	nop
 100d598:	cmp    BYTE PTR [rbp-0x3d],0x0
 100d59c:	je     0x100d5c4
 100d59e:	lea    rbx,[rsp+0x70]
 100d5a3:	mov    rcx,QWORD PTR [rbx]
 100d5a6:	test   rcx,rcx
 100d5a9:	je     0x100d5b4
 100d5ab:	call   QWORD PTR [rip+0xffffffffffff3e7f]        # 0x1001430
 100d5b1:	mov    QWORD PTR [rbx],r12
 100d5b4:	add    rbx,0x8
 100d5b8:	dec    rsi
 100d5bb:	jne    0x100d5a3
 100d5bd:	lea    rbx,[rip+0xffffffffffff58cc]        # 0x1002e90
 100d5c4:	mov    QWORD PTR [rsp+0x48],r12
 100d5c9:	mov    rcx,QWORD PTR [r14+0x8]
 100d5cd:	test   rcx,rcx
 100d5d0:	je     0x100d5d8
 100d5d2:	call   QWORD PTR [rip+0xffffffffffff3b70]        # 0x1001148
 100d5d8:	mov    QWORD PTR [r14+0x8],rdi
 100d5dc:	mov    QWORD PTR [rsp+0x40],rbx
 100d5e1:	mov    QWORD PTR [rsp+0x48],r12
 100d5e6:	mov    QWORD PTR [rsp+0x40],r13
 100d5eb:	cmp    DWORD PTR [rip+0xe18e],0x0        # 0x101b780
 100d5f2:	je     0x100d652
 100d5f4:	cmp    DWORD PTR [rip+0xe1a5],0x0        # 0x101b7a0
 100d5fb:	je     0x100d652
 100d5fd:	mov    DWORD PTR [rsp+0x30],r12d
 100d602:	mov    rax,QWORD PTR [rbp-0x30]
 100d606:	mov    QWORD PTR [rsp+0x28],rax
 100d60b:	mov    eax,DWORD PTR [rbp-0x1c]
 100d60e:	mov    DWORD PTR [rsp+0x20],eax
 100d612:	mov    r9d,DWORD PTR [rbp-0x18]
 100d616:	xor    r8d,r8d
 100d619:	lea    rdx,[rip+0xffffffffffff76fc]        # 0x1004d1c
 100d620:	lea    rcx,[rip+0xe159]        # 0x101b780
 100d627:	call   0x100af10
 100d62c:	mov    r8d,DWORD PTR [rbp-0x38]
 100d630:	lea    rdx,[rip+0xffffffffffff70d9]        # 0x1004710
 100d637:	lea    rcx,[rip+0xe142]        # 0x101b780
 100d63e:	call   0x100b470
 100d643:	mov    edx,DWORD PTR [rbp-0x18]
 100d646:	lea    rcx,[rip+0xe133]        # 0x101b780
 100d64d:	call   0x100b150
 100d652:	mov    rbx,QWORD PTR [rsp+0x1b8]
 100d65a:	add    rsp,0x170
 100d661:	pop    r15
 100d663:	pop    r14
 100d665:	pop    r13
 100d667:	pop    r12
 100d669:	pop    rdi
 100d66a:	pop    rsi
 100d66b:	pop    rbp
 100d66c:	ret    
 100d66d:	int3   
 100d66e:	int3   
 100d66f:	int3   
 100d670:	int3   
 100d671:	int3   
 100d672:	int3   
 100d673:	int3   
 100d674:	int3   
 100d675:	int3   
 100d676:	int3   
 100d677:	int3   
 100d678:	int3   
 100d679:	int3   
 100d67a:	int3   
 100d67b:	int3   
 100d67c:	int3   
 100d67d:	int3   
 100d67e:	int3   
 100d67f:	int3   
 100d680:	mov    QWORD PTR [rsp+0x8],rcx
 100d685:	push   rbx
 100d686:	sub    rsp,0x30
 100d68a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d693:	mov    rbx,rcx
 100d696:	lea    rax,[rip+0xffffffffffff56b3]        # 0x1002d50
 100d69d:	mov    QWORD PTR [rcx],rax
 100d6a0:	mov    rcx,QWORD PTR [rcx+0x8]
 100d6a4:	test   rcx,rcx
 100d6a7:	je     0x100d6af
 100d6a9:	call   QWORD PTR [rip+0xffffffffffff3a99]        # 0x1001148
 100d6af:	mov    QWORD PTR [rbx+0x8],0x0
 100d6b7:	lea    rax,[rip+0xffffffffffff568a]        # 0x1002d48
 100d6be:	mov    QWORD PTR [rbx],rax
 100d6c1:	add    rsp,0x30
 100d6c5:	pop    rbx
 100d6c6:	ret    
 100d6c7:	int3   
 100d6c8:	int3   
 100d6c9:	int3   
 100d6ca:	int3   
 100d6cb:	int3   
 100d6cc:	int3   
 100d6cd:	int3   
 100d6ce:	int3   
 100d6cf:	int3   
 100d6d0:	mov    QWORD PTR [rsp+0x8],rcx
 100d6d5:	push   rdi
 100d6d6:	sub    rsp,0x30
 100d6da:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d6e3:	mov    QWORD PTR [rsp+0x48],rbx
 100d6e8:	mov    edi,edx
 100d6ea:	mov    rbx,rcx
 100d6ed:	lea    rax,[rip+0xffffffffffff565c]        # 0x1002d50
 100d6f4:	mov    QWORD PTR [rcx],rax
 100d6f7:	mov    rcx,QWORD PTR [rcx+0x8]
 100d6fb:	test   rcx,rcx
 100d6fe:	je     0x100d706
 100d700:	call   QWORD PTR [rip+0xffffffffffff3a42]        # 0x1001148
 100d706:	mov    QWORD PTR [rbx+0x8],0x0
 100d70e:	lea    rax,[rip+0xffffffffffff5633]        # 0x1002d48
 100d715:	mov    QWORD PTR [rbx],rax
 100d718:	test   dil,0x1
 100d71c:	je     0x100d726
 100d71e:	mov    rcx,rbx
 100d721:	call   0x1009d34
 100d726:	mov    rax,rbx
 100d729:	mov    rbx,QWORD PTR [rsp+0x48]
 100d72e:	add    rsp,0x30
 100d732:	pop    rdi
 100d733:	ret    
 100d734:	int3   
 100d735:	int3   
 100d736:	int3   
 100d737:	int3   
 100d738:	int3   
 100d739:	int3   
 100d73a:	int3   
 100d73b:	int3   
 100d73c:	int3   
 100d73d:	int3   
 100d73e:	int3   
 100d73f:	int3   
 100d740:	rex push rbx
 100d742:	sub    rsp,0x20
 100d746:	mov    rbx,rcx
 100d749:	mov    rcx,QWORD PTR [rcx]
 100d74c:	test   rcx,rcx
 100d74f:	je     0x100d756
 100d751:	call   0x1009d34
 100d756:	mov    rcx,QWORD PTR [rbx+0x8]
 100d75a:	test   rcx,rcx
 100d75d:	je     0x100d765
 100d75f:	call   QWORD PTR [rip+0xffffffffffff3b3b]        # 0x10012a0
 100d765:	mov    rcx,QWORD PTR [rbx+0x10]
 100d769:	test   rcx,rcx
 100d76c:	je     0x100d774
 100d76e:	call   QWORD PTR [rip+0xffffffffffff3b2c]        # 0x10012a0
 100d774:	mov    rcx,QWORD PTR [rbx+0x18]
 100d778:	test   rcx,rcx
 100d77b:	je     0x100d783
 100d77d:	call   QWORD PTR [rip+0xffffffffffff3b1d]        # 0x10012a0
 100d783:	mov    rcx,QWORD PTR [rbx+0x20]
 100d787:	test   rcx,rcx
 100d78a:	je     0x100d792
 100d78c:	call   QWORD PTR [rip+0xffffffffffff3b0e]        # 0x10012a0
 100d792:	add    rsp,0x20
 100d796:	pop    rbx
 100d797:	ret    
 100d798:	int3   
 100d799:	int3   
 100d79a:	int3   
 100d79b:	int3   
 100d79c:	int3   
 100d79d:	int3   
 100d79e:	int3   
 100d79f:	int3   
 100d7a0:	mov    QWORD PTR [rsp+0x8],rcx
 100d7a5:	push   rdi
 100d7a6:	sub    rsp,0x30
 100d7aa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d7b3:	mov    QWORD PTR [rsp+0x48],rbx
 100d7b8:	mov    QWORD PTR [rsp+0x50],rsi
 100d7bd:	mov    rbx,rcx
 100d7c0:	mov    rcx,QWORD PTR [rcx]
 100d7c3:	test   rcx,rcx
 100d7c6:	je     0x100d7d4
 100d7c8:	call   0x1009d34
 100d7cd:	xor    edi,edi
 100d7cf:	mov    QWORD PTR [rbx],rdi
 100d7d2:	jmp    0x100d7d6
 100d7d4:	xor    edi,edi
 100d7d6:	mov    rcx,QWORD PTR [rbx+0x8]
 100d7da:	test   rcx,rcx
 100d7dd:	je     0x100d7e9
 100d7df:	call   QWORD PTR [rip+0xffffffffffff3abb]        # 0x10012a0
 100d7e5:	mov    QWORD PTR [rbx+0x8],rdi
 100d7e9:	mov    rcx,QWORD PTR [rbx+0x10]
 100d7ed:	test   rcx,rcx
 100d7f0:	je     0x100d7fc
 100d7f2:	call   QWORD PTR [rip+0xffffffffffff3aa8]        # 0x10012a0
 100d7f8:	mov    QWORD PTR [rbx+0x10],rdi
 100d7fc:	mov    rcx,QWORD PTR [rbx+0x18]
 100d800:	test   rcx,rcx
 100d803:	je     0x100d80f
 100d805:	call   QWORD PTR [rip+0xffffffffffff3a95]        # 0x10012a0
 100d80b:	mov    QWORD PTR [rbx+0x18],rdi
 100d80f:	mov    rcx,QWORD PTR [rbx+0x20]
 100d813:	test   rcx,rcx
 100d816:	je     0x100d822
 100d818:	call   QWORD PTR [rip+0xffffffffffff3a82]        # 0x10012a0
 100d81e:	mov    QWORD PTR [rbx+0x20],rdi
 100d822:	mov    ecx,0x28
 100d827:	call   0x10099ec
 100d82c:	mov    QWORD PTR [rbx],rax
 100d82f:	jmp    0x100d838
 100d831:	xor    edi,edi
 100d833:	mov    rbx,QWORD PTR [rsp+0x40]
 100d838:	mov    rcx,QWORD PTR [rbx]
 100d83b:	test   rcx,rcx
 100d83e:	jne    0x100d847
 100d840:	mov    eax,0x8007000e
 100d845:	jmp    0x100d87c
 100d847:	mov    edx,0x1
 100d84c:	call   QWORD PTR [rip+0xffffffffffff37fe]        # 0x1001050
 100d852:	test   eax,eax
 100d854:	jne    0x100d87a
 100d856:	call   QWORD PTR [rip+0xffffffffffff3a1c]        # 0x1001278
 100d85c:	mov    esi,eax
 100d85e:	test   eax,eax
 100d860:	jle    0x100d86b
 100d862:	movzx  esi,ax
 100d865:	or     esi,0x80070000
 100d86b:	mov    rcx,QWORD PTR [rbx]
 100d86e:	call   0x1009d34
 100d873:	mov    QWORD PTR [rbx],rdi
 100d876:	mov    eax,esi
 100d878:	jmp    0x100d87c
 100d87a:	xor    eax,eax
 100d87c:	mov    rbx,QWORD PTR [rsp+0x48]
 100d881:	mov    rsi,QWORD PTR [rsp+0x50]
 100d886:	add    rsp,0x30
 100d88a:	pop    rdi
 100d88b:	ret    
 100d88c:	int3   
 100d88d:	int3   
 100d88e:	int3   
 100d88f:	int3   
 100d890:	int3   
 100d891:	int3   
 100d892:	int3   
 100d893:	int3   
 100d894:	int3   
 100d895:	int3   
 100d896:	int3   
 100d897:	int3   
 100d898:	int3   
 100d899:	int3   
 100d89a:	int3   
 100d89b:	int3   
 100d89c:	int3   
 100d89d:	int3   
 100d89e:	int3   
 100d89f:	int3   
 100d8a0:	mov    QWORD PTR [rsp+0x10],rbx
 100d8a5:	mov    QWORD PTR [rsp+0x18],rbp
 100d8aa:	push   rdi
 100d8ab:	sub    rsp,0x20
 100d8af:	mov    rbx,rcx
 100d8b2:	mov    rcx,QWORD PTR [rcx]
 100d8b5:	mov    rdi,rdx
 100d8b8:	xor    edx,edx
 100d8ba:	mov    ebp,r8d
 100d8bd:	call   QWORD PTR [rip+0xffffffffffff377d]        # 0x1001040
 100d8c3:	test   eax,eax
 100d8c5:	jne    0x100d8ed
 100d8c7:	call   QWORD PTR [rip+0xffffffffffff39ab]        # 0x1001278
 100d8cd:	test   eax,eax
 100d8cf:	jle    0x100d99b
 100d8d5:	movzx  eax,ax
 100d8d8:	or     eax,0x80070000
 100d8dd:	mov    rbx,QWORD PTR [rsp+0x38]
 100d8e2:	mov    rbp,QWORD PTR [rsp+0x40]
 100d8e7:	add    rsp,0x20
 100d8eb:	pop    rdi
 100d8ec:	ret    
 100d8ed:	mov    rcx,QWORD PTR [rbx+0x8]
 100d8f1:	test   rcx,rcx
 100d8f4:	je     0x100d904
 100d8f6:	call   QWORD PTR [rip+0xffffffffffff39a4]        # 0x10012a0
 100d8fc:	mov    QWORD PTR [rbx+0x8],0x0
 100d904:	test   rdi,rdi
 100d907:	jne    0x100d91b
 100d909:	xor    eax,eax
 100d90b:	mov    rbx,QWORD PTR [rsp+0x38]
 100d910:	mov    rbp,QWORD PTR [rsp+0x40]
 100d915:	add    rsp,0x20
 100d919:	pop    rdi
 100d91a:	ret    
 100d91b:	mov    rcx,rdi
 100d91e:	mov    QWORD PTR [rsp+0x30],rsi
 100d923:	call   QWORD PTR [rip+0xffffffffffff3767]        # 0x1001090
 100d929:	mov    ecx,eax
 100d92b:	mov    esi,eax
 100d92d:	call   QWORD PTR [rip+0xffffffffffff398d]        # 0x10012c0
 100d933:	mov    QWORD PTR [rbx+0x8],rax
 100d937:	test   rax,rax
 100d93a:	jne    0x100d943
 100d93c:	mov    eax,0x8007000e
 100d941:	jmp    0x100d996
 100d943:	mov    r8,rdi
 100d946:	mov    rdx,rax
 100d949:	mov    ecx,esi
 100d94b:	call   QWORD PTR [rip+0xffffffffffff3737]        # 0x1001088
 100d951:	test   eax,eax
 100d953:	je     0x100d969
 100d955:	mov    rdx,QWORD PTR [rbx+0x8]
 100d959:	mov    rcx,QWORD PTR [rbx]
 100d95c:	mov    r8d,ebp
 100d95f:	call   QWORD PTR [rip+0xffffffffffff36db]        # 0x1001040
 100d965:	test   eax,eax
 100d967:	jne    0x100d994
 100d969:	call   QWORD PTR [rip+0xffffffffffff3909]        # 0x1001278
 100d96f:	mov    edi,eax
 100d971:	test   eax,eax
 100d973:	jle    0x100d97e
 100d975:	movzx  edi,ax
 100d978:	or     edi,0x80070000
 100d97e:	mov    rcx,QWORD PTR [rbx+0x8]
 100d982:	call   QWORD PTR [rip+0xffffffffffff3918]        # 0x10012a0
 100d988:	mov    QWORD PTR [rbx+0x8],0x0
 100d990:	mov    eax,edi
 100d992:	jmp    0x100d996
 100d994:	xor    eax,eax
 100d996:	mov    rsi,QWORD PTR [rsp+0x30]
 100d99b:	mov    rbx,QWORD PTR [rsp+0x38]
 100d9a0:	mov    rbp,QWORD PTR [rsp+0x40]
 100d9a5:	add    rsp,0x20
 100d9a9:	pop    rdi
 100d9aa:	ret    
 100d9ab:	int3   
 100d9ac:	int3   
 100d9ad:	int3   
 100d9ae:	int3   
 100d9af:	int3   
 100d9b0:	int3   
 100d9b1:	int3   
 100d9b2:	int3   
 100d9b3:	int3   
 100d9b4:	int3   
 100d9b5:	int3   
 100d9b6:	int3   
 100d9b7:	int3   
 100d9b8:	int3   
 100d9b9:	int3   
 100d9ba:	int3   
 100d9bb:	int3   
 100d9bc:	int3   
 100d9bd:	int3   
 100d9be:	int3   
 100d9bf:	int3   
 100d9c0:	mov    QWORD PTR [rsp+0x10],rbx
 100d9c5:	mov    QWORD PTR [rsp+0x18],rbp
 100d9ca:	push   rdi
 100d9cb:	sub    rsp,0x20
 100d9cf:	mov    rbx,rcx
 100d9d2:	mov    rcx,QWORD PTR [rcx]
 100d9d5:	mov    rdi,rdx
 100d9d8:	xor    edx,edx
 100d9da:	mov    ebp,r8d
 100d9dd:	call   QWORD PTR [rip+0xffffffffffff3655]        # 0x1001038
 100d9e3:	test   eax,eax
 100d9e5:	jne    0x100da0d
 100d9e7:	call   QWORD PTR [rip+0xffffffffffff388b]        # 0x1001278
 100d9ed:	test   eax,eax
 100d9ef:	jle    0x100dabb
 100d9f5:	movzx  eax,ax
 100d9f8:	or     eax,0x80070000
 100d9fd:	mov    rbx,QWORD PTR [rsp+0x38]
 100da02:	mov    rbp,QWORD PTR [rsp+0x40]
 100da07:	add    rsp,0x20
 100da0b:	pop    rdi
 100da0c:	ret    
 100da0d:	mov    rcx,QWORD PTR [rbx+0x10]
 100da11:	test   rcx,rcx
 100da14:	je     0x100da24
 100da16:	call   QWORD PTR [rip+0xffffffffffff3884]        # 0x10012a0
 100da1c:	mov    QWORD PTR [rbx+0x10],0x0
 100da24:	test   rdi,rdi
 100da27:	jne    0x100da3b
 100da29:	xor    eax,eax
 100da2b:	mov    rbx,QWORD PTR [rsp+0x38]
 100da30:	mov    rbp,QWORD PTR [rsp+0x40]
 100da35:	add    rsp,0x20
 100da39:	pop    rdi
 100da3a:	ret    
 100da3b:	mov    rcx,rdi
 100da3e:	mov    QWORD PTR [rsp+0x30],rsi
 100da43:	call   QWORD PTR [rip+0xffffffffffff3647]        # 0x1001090
 100da49:	mov    ecx,eax
 100da4b:	mov    esi,eax
 100da4d:	call   QWORD PTR [rip+0xffffffffffff386d]        # 0x10012c0
 100da53:	mov    QWORD PTR [rbx+0x10],rax
 100da57:	test   rax,rax
 100da5a:	jne    0x100da63
 100da5c:	mov    eax,0x8007000e
 100da61:	jmp    0x100dab6
 100da63:	mov    r8,rdi
 100da66:	mov    rdx,rax
 100da69:	mov    ecx,esi
 100da6b:	call   QWORD PTR [rip+0xffffffffffff3617]        # 0x1001088
 100da71:	test   eax,eax
 100da73:	je     0x100da89
 100da75:	mov    rdx,QWORD PTR [rbx+0x10]
 100da79:	mov    rcx,QWORD PTR [rbx]
 100da7c:	mov    r8d,ebp
 100da7f:	call   QWORD PTR [rip+0xffffffffffff35b3]        # 0x1001038
 100da85:	test   eax,eax
 100da87:	jne    0x100dab4
 100da89:	call   QWORD PTR [rip+0xffffffffffff37e9]        # 0x1001278
 100da8f:	mov    edi,eax
 100da91:	test   eax,eax
 100da93:	jle    0x100da9e
 100da95:	movzx  edi,ax
 100da98:	or     edi,0x80070000
 100da9e:	mov    rcx,QWORD PTR [rbx+0x10]
 100daa2:	call   QWORD PTR [rip+0xffffffffffff37f8]        # 0x10012a0
 100daa8:	mov    QWORD PTR [rbx+0x10],0x0
 100dab0:	mov    eax,edi
 100dab2:	jmp    0x100dab6
 100dab4:	xor    eax,eax
 100dab6:	mov    rsi,QWORD PTR [rsp+0x30]
 100dabb:	mov    rbx,QWORD PTR [rsp+0x38]
 100dac0:	mov    rbp,QWORD PTR [rsp+0x40]
 100dac5:	add    rsp,0x20
 100dac9:	pop    rdi
 100daca:	ret    
 100dacb:	int3   
 100dacc:	int3   
 100dacd:	int3   
 100dace:	int3   
 100dacf:	int3   
 100dad0:	int3   
 100dad1:	int3   
 100dad2:	int3   
 100dad3:	int3   
 100dad4:	int3   
 100dad5:	int3   
 100dad6:	int3   
 100dad7:	int3   
 100dad8:	int3   
 100dad9:	int3   
 100dada:	int3   
 100dadb:	int3   
 100dadc:	int3   
 100dadd:	int3   
 100dade:	int3   
 100dadf:	int3   
 100dae0:	mov    QWORD PTR [rsp+0x20],rsi
 100dae5:	push   rdi
 100dae6:	sub    rsp,0x50
 100daea:	mov    rax,QWORD PTR [rip+0xd63f]        # 0x101b130
 100daf1:	xor    rax,rsp
 100daf4:	mov    QWORD PTR [rsp+0x48],rax
 100daf9:	mov    rdi,rdx
 100dafc:	mov    rsi,rcx
 100daff:	test   rdx,rdx
 100db02:	jne    0x100db0b
 100db04:	xor    eax,eax
 100db06:	jmp    0x100db97
 100db0b:	mov    r9d,0x2
 100db11:	lea    rdx,[rsp+0x38]
 100db16:	mov    rcx,rdi
 100db19:	lea    r8d,[r9+0xa]
 100db1d:	call   QWORD PTR [rip+0xffffffffffff3555]        # 0x1001078
 100db23:	test   eax,eax
 100db25:	jne    0x100db3b
 100db27:	call   QWORD PTR [rip+0xffffffffffff374b]        # 0x1001278
 100db2d:	test   eax,eax
 100db2f:	jle    0x100db97
 100db31:	movzx  eax,ax
 100db34:	or     eax,0x80070000
 100db39:	jmp    0x100db97
 100db3b:	mov    QWORD PTR [rsp+0x70],rbx
 100db40:	xor    ebx,ebx
 100db42:	cmp    DWORD PTR [rsp+0x38],ebx
 100db46:	jbe    0x100db90
 100db48:	nop    DWORD PTR [rax+rax*1+0x0]
 100db50:	lea    r8,[rsp+0x30]
 100db55:	mov    edx,ebx
 100db57:	mov    rcx,rdi
 100db5a:	call   QWORD PTR [rip+0xffffffffffff3508]        # 0x1001068
 100db60:	test   eax,eax
 100db62:	je     0x100dbaf
 100db64:	mov    r9,QWORD PTR [rsp+0x30]
 100db69:	or     r8d,0xffffffff
 100db6d:	mov    edx,0x2
 100db72:	movzx  eax,WORD PTR [r9+0x2]
 100db77:	mov    rcx,rsi
 100db7a:	mov    DWORD PTR [rsp+0x20],eax
 100db7e:	call   QWORD PTR [rip+0xffffffffffff34ec]        # 0x1001070
 100db84:	test   eax,eax
 100db86:	je     0x100dbaf
 100db88:	inc    ebx
 100db8a:	cmp    ebx,DWORD PTR [rsp+0x38]
 100db8e:	jb     0x100db50
 100db90:	xor    eax,eax
 100db92:	mov    rbx,QWORD PTR [rsp+0x70]
 100db97:	mov    rcx,QWORD PTR [rsp+0x48]
 100db9c:	xor    rcx,rsp
 100db9f:	call   0x1009d50
 100dba4:	mov    rsi,QWORD PTR [rsp+0x78]
 100dba9:	add    rsp,0x50
 100dbad:	pop    rdi
 100dbae:	ret    
 100dbaf:	call   QWORD PTR [rip+0xffffffffffff36c3]        # 0x1001278
 100dbb5:	test   eax,eax
 100dbb7:	jle    0x100db92
 100dbb9:	movzx  eax,ax
 100dbbc:	or     eax,0x80070000
 100dbc1:	jmp    0x100db92
 100dbc3:	int3   
 100dbc4:	int3   
 100dbc5:	int3   
 100dbc6:	int3   
 100dbc7:	int3   
 100dbc8:	int3   
 100dbc9:	int3   
 100dbca:	int3   
 100dbcb:	int3   
 100dbcc:	int3   
 100dbcd:	int3   
 100dbce:	int3   
 100dbcf:	int3   
 100dbd0:	rex push rbx
 100dbd2:	push   rsi
 100dbd3:	push   rdi
 100dbd4:	push   r12
 100dbd6:	push   r13
 100dbd8:	push   r14
 100dbda:	push   r15
 100dbdc:	sub    rsp,0x80
 100dbe3:	mov    QWORD PTR [rsp+0x60],0xfffffffffffffffe
 100dbec:	mov    rax,QWORD PTR [rip+0xd53d]        # 0x101b130
 100dbf3:	xor    rax,rsp
 100dbf6:	mov    QWORD PTR [rsp+0x78],rax
 100dbfb:	mov    r13d,r9d
 100dbfe:	mov    r12d,r8d
 100dc01:	mov    r15,rdx
 100dc04:	mov    r14,rcx
 100dc07:	mov    QWORD PTR [rsp+0x58],rcx
 100dc0c:	mov    QWORD PTR [rsp+0x50],rdx
 100dc11:	mov    DWORD PTR [rsp+0x30],r8d
 100dc16:	mov    DWORD PTR [rsp+0x34],r9d
 100dc1b:	xor    eax,eax
 100dc1d:	mov    QWORD PTR [rsp+0x40],rax
 100dc22:	mov    rdi,QWORD PTR [rcx]
 100dc25:	mov    QWORD PTR [rsp+0x48],rdi
 100dc2a:	mov    DWORD PTR [rsp+0x6c],eax
 100dc2e:	test   rdi,rdi
 100dc31:	je     0x100dc49
 100dc33:	lea    r9d,[rax+0x2]
 100dc37:	lea    r8d,[rax+0xc]
 100dc3b:	lea    rdx,[rsp+0x68]
 100dc40:	mov    rcx,rdi
 100dc43:	call   QWORD PTR [rip+0xffffffffffff342f]        # 0x1001078
 100dc49:	mov    rcx,r15
 100dc4c:	call   QWORD PTR [rip+0xffffffffffff343e]        # 0x1001090
 100dc52:	mov    esi,DWORD PTR [rsp+0x6c]
 100dc56:	add    esi,0x10
 100dc59:	add    esi,eax
 100dc5b:	mov    DWORD PTR [rsp+0x38],esi
 100dc5f:	movsxd rcx,esi
 100dc62:	call   0x10099ec
 100dc67:	mov    rbx,rax
 100dc6a:	mov    QWORD PTR [rsp+0x40],rax
 100dc6f:	jmp    0x100dc93
 100dc71:	mov    rbx,QWORD PTR [rsp+0x40]
 100dc76:	mov    rdi,QWORD PTR [rsp+0x48]
 100dc7b:	mov    esi,DWORD PTR [rsp+0x38]
 100dc7f:	mov    r14,QWORD PTR [rsp+0x58]
 100dc84:	mov    r15,QWORD PTR [rsp+0x50]
 100dc89:	mov    r12d,DWORD PTR [rsp+0x30]
 100dc8e:	mov    r13d,DWORD PTR [rsp+0x34]
 100dc93:	test   rbx,rbx
 100dc96:	jne    0x100dc9f
 100dc98:	mov    eax,0x8007000e
 100dc9d:	jmp    0x100dd1a
 100dc9f:	mov    r8d,0x2
 100dca5:	mov    edx,esi
 100dca7:	mov    rcx,rbx
 100dcaa:	call   QWORD PTR [rip+0xffffffffffff33d0]        # 0x1001080
 100dcb0:	mov    rcx,rbx
 100dcb3:	test   eax,eax
 100dcb5:	je     0x100dcee
 100dcb7:	mov    rdx,rdi
 100dcba:	call   0x100dae0
 100dcbf:	mov    esi,eax
 100dcc1:	mov    rcx,rbx
 100dcc4:	test   eax,eax
 100dcc6:	jns    0x100dcd1
 100dcc8:	call   0x1009d34
 100dccd:	mov    eax,esi
 100dccf:	jmp    0x100dd1a
 100dcd1:	mov    QWORD PTR [rsp+0x20],r15
 100dcd6:	mov    r9d,r12d
 100dcd9:	mov    r8d,r13d
 100dcdc:	mov    edx,0x2
 100dce1:	call   QWORD PTR [rip+0xffffffffffff3379]        # 0x1001060
 100dce7:	test   eax,eax
 100dce9:	jne    0x100dd07
 100dceb:	mov    rcx,rbx
 100dcee:	call   0x1009d34
 100dcf3:	call   QWORD PTR [rip+0xffffffffffff357f]        # 0x1001278
 100dcf9:	test   eax,eax
 100dcfb:	jle    0x100dd1a
 100dcfd:	movzx  eax,ax
 100dd00:	or     eax,0x80070000
 100dd05:	jmp    0x100dd1a
 100dd07:	mov    QWORD PTR [r14],rbx
 100dd0a:	test   rdi,rdi
 100dd0d:	je     0x100dd18
 100dd0f:	mov    rcx,rdi
 100dd12:	call   QWORD PTR [rip+0xffffffffffff3588]        # 0x10012a0
 100dd18:	xor    eax,eax
 100dd1a:	mov    rcx,QWORD PTR [rsp+0x78]
 100dd1f:	xor    rcx,rsp
 100dd22:	call   0x1009d50
 100dd27:	add    rsp,0x80
 100dd2e:	pop    r15
 100dd30:	pop    r14
 100dd32:	pop    r13
 100dd34:	pop    r12
 100dd36:	pop    rdi
 100dd37:	pop    rsi
 100dd38:	pop    rbx
 100dd39:	ret    
 100dd3a:	int3   
 100dd3b:	int3   
 100dd3c:	int3   
 100dd3d:	int3   
 100dd3e:	int3   
 100dd3f:	int3   
 100dd40:	rex push rbx
 100dd42:	push   rsi
 100dd43:	push   rdi
 100dd44:	push   r12
 100dd46:	push   r13
 100dd48:	push   r14
 100dd4a:	push   r15
 100dd4c:	sub    rsp,0x80
 100dd53:	mov    QWORD PTR [rsp+0x60],0xfffffffffffffffe
 100dd5c:	mov    rax,QWORD PTR [rip+0xd3cd]        # 0x101b130
 100dd63:	xor    rax,rsp
 100dd66:	mov    QWORD PTR [rsp+0x78],rax
 100dd6b:	mov    r13d,r9d
 100dd6e:	mov    r12d,r8d
 100dd71:	mov    r15,rdx
 100dd74:	mov    r14,rcx
 100dd77:	mov    QWORD PTR [rsp+0x58],rcx
 100dd7c:	mov    QWORD PTR [rsp+0x50],rdx
 100dd81:	mov    DWORD PTR [rsp+0x30],r8d
 100dd86:	mov    DWORD PTR [rsp+0x34],r9d
 100dd8b:	xor    eax,eax
 100dd8d:	mov    QWORD PTR [rsp+0x40],rax
 100dd92:	mov    rdi,QWORD PTR [rcx]
 100dd95:	mov    QWORD PTR [rsp+0x48],rdi
 100dd9a:	mov    DWORD PTR [rsp+0x6c],eax
 100dd9e:	test   rdi,rdi
 100dda1:	je     0x100ddb9
 100dda3:	lea    r9d,[rax+0x2]
 100dda7:	lea    r8d,[rax+0xc]
 100ddab:	lea    rdx,[rsp+0x68]
 100ddb0:	mov    rcx,rdi
 100ddb3:	call   QWORD PTR [rip+0xffffffffffff32bf]        # 0x1001078
 100ddb9:	mov    rcx,r15
 100ddbc:	call   QWORD PTR [rip+0xffffffffffff32ce]        # 0x1001090
 100ddc2:	mov    esi,DWORD PTR [rsp+0x6c]
 100ddc6:	add    esi,0x10
 100ddc9:	add    esi,eax
 100ddcb:	mov    DWORD PTR [rsp+0x38],esi
 100ddcf:	movsxd rcx,esi
 100ddd2:	call   0x10099ec
 100ddd7:	mov    rbx,rax
 100ddda:	mov    QWORD PTR [rsp+0x40],rax
 100dddf:	jmp    0x100de03
 100dde1:	mov    rbx,QWORD PTR [rsp+0x40]
 100dde6:	mov    rdi,QWORD PTR [rsp+0x48]
 100ddeb:	mov    esi,DWORD PTR [rsp+0x38]
 100ddef:	mov    r14,QWORD PTR [rsp+0x58]
 100ddf4:	mov    r15,QWORD PTR [rsp+0x50]
 100ddf9:	mov    r12d,DWORD PTR [rsp+0x30]
 100ddfe:	mov    r13d,DWORD PTR [rsp+0x34]
 100de03:	test   rbx,rbx
 100de06:	jne    0x100de0f
 100de08:	mov    eax,0x8007000e
 100de0d:	jmp    0x100de8a
 100de0f:	mov    r8d,0x2
 100de15:	mov    edx,esi
 100de17:	mov    rcx,rbx
 100de1a:	call   QWORD PTR [rip+0xffffffffffff3260]        # 0x1001080
 100de20:	mov    rcx,rbx
 100de23:	test   eax,eax
 100de25:	jne    0x100de40
 100de27:	call   0x1009d34
 100de2c:	call   QWORD PTR [rip+0xffffffffffff3446]        # 0x1001278
 100de32:	test   eax,eax
 100de34:	jle    0x100de8a
 100de36:	movzx  eax,ax
 100de39:	or     eax,0x80070000
 100de3e:	jmp    0x100de8a
 100de40:	mov    QWORD PTR [rsp+0x20],r15
 100de45:	mov    r9d,r12d
 100de48:	mov    r8d,r13d
 100de4b:	mov    edx,0x2
 100de50:	call   QWORD PTR [rip+0xffffffffffff3202]        # 0x1001058
 100de56:	mov    rcx,rbx
 100de59:	test   eax,eax
 100de5b:	je     0x100de27
 100de5d:	mov    rdx,rdi
 100de60:	call   0x100dae0
 100de65:	mov    esi,eax
 100de67:	test   eax,eax
 100de69:	jns    0x100de77
 100de6b:	mov    rcx,rbx
 100de6e:	call   0x1009d34
 100de73:	mov    eax,esi
 100de75:	jmp    0x100de8a
 100de77:	mov    QWORD PTR [r14],rbx
 100de7a:	test   rdi,rdi
 100de7d:	je     0x100de88
 100de7f:	mov    rcx,rdi
 100de82:	call   QWORD PTR [rip+0xffffffffffff3418]        # 0x10012a0
 100de88:	xor    eax,eax
 100de8a:	mov    rcx,QWORD PTR [rsp+0x78]
 100de8f:	xor    rcx,rsp
 100de92:	call   0x1009d50
 100de97:	add    rsp,0x80
 100de9e:	pop    r15
 100dea0:	pop    r14
 100dea2:	pop    r13
 100dea4:	pop    r12
 100dea6:	pop    rdi
 100dea7:	pop    rsi
 100dea8:	pop    rbx
 100dea9:	ret    
 100deaa:	int3   
 100deab:	int3   
 100deac:	int3   
 100dead:	int3   
 100deae:	int3   
 100deaf:	int3   
 100deb0:	mov    QWORD PTR [rsp+0x8],rcx
 100deb5:	sub    rsp,0x18
 100deb9:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 100dec1:	xor    r8d,r8d
 100dec4:	mov    QWORD PTR [rcx],r8
 100dec7:	mov    QWORD PTR [rcx+0x8],r8
 100decb:	mov    DWORD PTR [rcx+0x10],r8d
 100decf:	mov    QWORD PTR [rcx+0x20],r8
 100ded3:	mov    QWORD PTR [rcx+0x28],r8
 100ded7:	mov    QWORD PTR [rcx+0x30],r8
 100dedb:	mov    QWORD PTR [rcx+0x38],r8
 100dedf:	mov    QWORD PTR [rcx+0x40],r8
 100dee3:	lea    rax,[rcx+0x48]
 100dee7:	mov    QWORD PTR [rsp+0x28],rax
 100deec:	lea    rdx,[rip+0xffffffffffff4d9d]        # 0x1002c90
 100def3:	mov    QWORD PTR [rax],rdx
 100def6:	mov    QWORD PTR [rax+0x8],r8
 100defa:	lea    rdx,[rip+0xffffffffffff4d97]        # 0x1002c98
 100df01:	mov    QWORD PTR [rax],rdx
 100df04:	lea    rdx,[rip+0xffffffffffff4d95]        # 0x1002ca0
 100df0b:	mov    QWORD PTR [rax],rdx
 100df0e:	lea    rdx,[rip+0xffffffffffff4e4b]        # 0x1002d60
 100df15:	mov    QWORD PTR [rax],rdx
 100df18:	mov    BYTE PTR [rcx+0x18],r8b
 100df1c:	mov    rax,rcx
 100df1f:	add    rsp,0x18
 100df23:	ret    
 100df24:	int3   
 100df25:	int3   
 100df26:	int3   
 100df27:	int3   
 100df28:	int3   
 100df29:	int3   
 100df2a:	int3   
 100df2b:	int3   
 100df2c:	int3   
 100df2d:	int3   
 100df2e:	int3   
 100df2f:	int3   
 100df30:	mov    QWORD PTR [rsp+0x8],rcx
 100df35:	push   rsi
 100df36:	push   rdi
 100df37:	push   r14
 100df39:	sub    rsp,0x30
 100df3d:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100df46:	mov    QWORD PTR [rsp+0x60],rbx
 100df4b:	mov    QWORD PTR [rsp+0x68],rbp
 100df50:	mov    rbx,rcx
 100df53:	xor    r14d,r14d
 100df56:	mov    esi,r14d
 100df59:	cmp    DWORD PTR [rcx+0x10],r14d
 100df5d:	jle    0x100dfb9
 100df5f:	mov    edi,r14d
 100df62:	mov    ebp,r14d
 100df65:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100df70:	mov    rcx,QWORD PTR [rbx]
 100df73:	mov    rcx,QWORD PTR [rcx+rbp*1]
 100df77:	call   QWORD PTR [rip+0xffffffffffff31cb]        # 0x1001148
 100df7d:	mov    r11,QWORD PTR [rbx+0x8]
 100df81:	mov    rcx,QWORD PTR [r11+rdi*1+0x8]
 100df86:	call   QWORD PTR [rip+0xffffffffffff31bc]        # 0x1001148
 100df8c:	mov    r11,QWORD PTR [rbx+0x8]
 100df90:	mov    rcx,QWORD PTR [r11+rdi*1+0x18]
 100df95:	call   QWORD PTR [rip+0xffffffffffff31ad]        # 0x1001148
 100df9b:	mov    r11,QWORD PTR [rbx+0x8]
 100df9f:	mov    rcx,QWORD PTR [r11+rdi*1+0x20]
 100dfa4:	call   QWORD PTR [rip+0xffffffffffff319e]        # 0x1001148
 100dfaa:	inc    esi
 100dfac:	add    rbp,0x8
 100dfb0:	add    rdi,0x30
 100dfb4:	cmp    esi,DWORD PTR [rbx+0x10]
 100dfb7:	jl     0x100df70
 100dfb9:	lea    rdi,[rbx+0x48]
 100dfbd:	mov    QWORD PTR [rsp+0x58],rdi
 100dfc2:	lea    rax,[rip+0xffffffffffff4d97]        # 0x1002d60
 100dfc9:	mov    QWORD PTR [rdi],rax
 100dfcc:	mov    rcx,QWORD PTR [rdi+0x8]
 100dfd0:	test   rcx,rcx
 100dfd3:	je     0x100dfdb
 100dfd5:	call   QWORD PTR [rip+0xffffffffffff316d]        # 0x1001148
 100dfdb:	mov    QWORD PTR [rdi+0x8],r14
 100dfdf:	lea    rax,[rip+0xffffffffffff4caa]        # 0x1002c90
 100dfe6:	mov    QWORD PTR [rdi],rax
 100dfe9:	mov    rcx,QWORD PTR [rbx+0x20]
 100dfed:	test   rcx,rcx
 100dff0:	je     0x100dff7
 100dff2:	call   0x1009d34
 100dff7:	mov    rcx,QWORD PTR [rbx+0x28]
 100dffb:	test   rcx,rcx
 100dffe:	je     0x100e006
 100e000:	call   QWORD PTR [rip+0xffffffffffff329a]        # 0x10012a0
 100e006:	mov    rcx,QWORD PTR [rbx+0x30]
 100e00a:	test   rcx,rcx
 100e00d:	je     0x100e015
 100e00f:	call   QWORD PTR [rip+0xffffffffffff328b]        # 0x10012a0
 100e015:	mov    rcx,QWORD PTR [rbx+0x38]
 100e019:	test   rcx,rcx
 100e01c:	je     0x100e024
 100e01e:	call   QWORD PTR [rip+0xffffffffffff327c]        # 0x10012a0
 100e024:	mov    rcx,QWORD PTR [rbx+0x40]
 100e028:	test   rcx,rcx
 100e02b:	je     0x100e034
 100e02d:	call   QWORD PTR [rip+0xffffffffffff326d]        # 0x10012a0
 100e033:	nop
 100e034:	mov    rcx,QWORD PTR [rbx]
 100e037:	test   rcx,rcx
 100e03a:	je     0x100e045
 100e03c:	call   QWORD PTR [rip+0xffffffffffff325e]        # 0x10012a0
 100e042:	mov    QWORD PTR [rbx],r14
 100e045:	mov    rcx,QWORD PTR [rbx+0x8]
 100e049:	test   rcx,rcx
 100e04c:	je     0x100e058
 100e04e:	call   QWORD PTR [rip+0xffffffffffff324c]        # 0x10012a0
 100e054:	mov    QWORD PTR [rbx+0x8],r14
 100e058:	mov    DWORD PTR [rbx+0x10],r14d
 100e05c:	mov    rbx,QWORD PTR [rsp+0x60]
 100e061:	mov    rbp,QWORD PTR [rsp+0x68]
 100e066:	add    rsp,0x30
 100e06a:	pop    r14
 100e06c:	pop    rdi
 100e06d:	pop    rsi
 100e06e:	ret    
 100e06f:	int3   
 100e070:	int3   
 100e071:	int3   
 100e072:	int3   
 100e073:	int3   
 100e074:	int3   
 100e075:	int3   
 100e076:	int3   
 100e077:	int3   
 100e078:	int3   
 100e079:	int3   
 100e07a:	int3   
 100e07b:	int3   
 100e07c:	int3   
 100e07d:	int3   
 100e07e:	int3   
 100e07f:	int3   
 100e080:	mov    rax,rsp
 100e083:	push   rbp
 100e084:	push   r12
 100e086:	push   r13
 100e088:	push   r14
 100e08a:	push   r15
 100e08c:	lea    rbp,[rax-0x38]
 100e090:	sub    rsp,0x110
 100e097:	mov    QWORD PTR [rbp+0x0],0xfffffffffffffffe
 100e09f:	mov    QWORD PTR [rax+0x10],rbx
 100e0a3:	mov    QWORD PTR [rax+0x18],rsi
 100e0a7:	mov    QWORD PTR [rax+0x20],rdi
 100e0ab:	mov    rbx,rcx
 100e0ae:	lea    rax,[rsp+0x40]
 100e0b3:	mov    QWORD PTR [rbp+0x40],rax
 100e0b7:	lea    r14,[rip+0xffffffffffff4cc2]        # 0x1002d80
 100e0be:	mov    QWORD PTR [rsp+0x40],r14
 100e0c3:	lea    r12,[rip+0xffffffffffff4c9e]        # 0x1002d68
 100e0ca:	mov    QWORD PTR [rsp+0x48],r12
 100e0cf:	mov    DWORD PTR [rsp+0x50],0x885
 100e0d7:	mov    QWORD PTR [rsp+0x54],0x4000
 100e0e0:	xor    r15d,r15d
 100e0e3:	mov    DWORD PTR [rbp-0x50],0x1000000
 100e0ea:	mov    QWORD PTR [rsp+0x60],r15
 100e0ef:	mov    QWORD PTR [rsp+0x68],r15
 100e0f4:	mov    QWORD PTR [rsp+0x70],r15
 100e0f9:	mov    QWORD PTR [rsp+0x78],r15
 100e0fe:	mov    QWORD PTR [rbp-0x80],r15
 100e102:	mov    QWORD PTR [rbp-0x78],r15
 100e106:	mov    QWORD PTR [rbp-0x70],r15
 100e10a:	mov    QWORD PTR [rbp-0x68],r15
 100e10e:	mov    QWORD PTR [rbp-0x60],r15
 100e112:	mov    QWORD PTR [rbp-0x58],r15
 100e116:	lea    r8,[rip+0xffffffffffff4fa3]        # 0x10030c0
 100e11d:	lea    rdx,[rsp+0x40]
 100e122:	lea    rcx,[rbp-0x28]
 100e126:	call   0x10060d0
 100e12b:	nop
 100e12c:	cmp    BYTE PTR [rbx+0x18],r15b
 100e130:	je     0x100e137
 100e132:	jmp    0x100e4dc
 100e137:	mov    edx,0x1a
 100e13c:	mov    rcx,rbx
 100e13f:	call   0x100e570
 100e144:	mov    edx,0x21
 100e149:	mov    rcx,rbx
 100e14c:	call   0x100e570
 100e151:	mov    edx,0x16
 100e156:	mov    rcx,rbx
 100e159:	call   0x100e570
 100e15e:	lea    rcx,[rbx+0x20]
 100e162:	call   0x100d7a0
 100e167:	lea    rax,[rip+0xffffffffffff4bda]        # 0x1002d48
 100e16e:	mov    QWORD PTR [rbp-0x48],rax
 100e172:	mov    QWORD PTR [rbp-0x40],r15
 100e176:	lea    rax,[rip+0xffffffffffff4bd3]        # 0x1002d50
 100e17d:	mov    QWORD PTR [rbp-0x48],rax
 100e181:	lea    rdi,[rip+0xffffffffffff4bd0]        # 0x1002d58
 100e188:	mov    QWORD PTR [rbp-0x48],rdi
 100e18c:	mov    edx,0x16
 100e191:	lea    rcx,[rbp-0x48]
 100e195:	call   0x100d2d0
 100e19a:	xor    r8d,r8d
 100e19d:	mov    rsi,QWORD PTR [rbp-0x40]
 100e1a1:	mov    rdx,rsi
 100e1a4:	lea    rcx,[rbx+0x20]
 100e1a8:	call   0x100d8a0
 100e1ad:	mov    DWORD PTR [rbp-0x28],eax
 100e1b0:	test   eax,eax
 100e1b2:	jns    0x100e224
 100e1b4:	lea    rax,[rsp+0x40]
 100e1b9:	mov    QWORD PTR [rbp+0x40],rax
 100e1bd:	mov    QWORD PTR [rsp+0x40],r14
 100e1c2:	mov    QWORD PTR [rsp+0x48],r12
 100e1c7:	mov    DWORD PTR [rsp+0x50],0x89e
 100e1cf:	mov    QWORD PTR [rsp+0x54],0x4000
 100e1d8:	mov    DWORD PTR [rbp-0x50],0x1000000
 100e1df:	mov    QWORD PTR [rsp+0x60],r15
 100e1e4:	mov    QWORD PTR [rsp+0x68],r15
 100e1e9:	mov    QWORD PTR [rsp+0x70],r15
 100e1ee:	mov    QWORD PTR [rsp+0x78],r15
 100e1f3:	mov    QWORD PTR [rbp-0x80],r15
 100e1f7:	mov    QWORD PTR [rbp-0x78],r15
 100e1fb:	mov    QWORD PTR [rbp-0x70],r15
 100e1ff:	mov    QWORD PTR [rbp-0x68],r15
 100e203:	mov    QWORD PTR [rbp-0x60],r15
 100e207:	mov    QWORD PTR [rbp-0x58],r15
 100e20b:	lea    r9,[rip+0xffffffffffff4eee]        # 0x1003100
 100e212:	mov    r8d,DWORD PTR [rbp-0x28]
 100e216:	lea    rdx,[rsp+0x40]
 100e21b:	lea    rcx,[rbp-0x28]
 100e21f:	call   0x100c1a0
 100e224:	lea    rax,[rip+0xffffffffffff4b1d]        # 0x1002d48
 100e22b:	mov    QWORD PTR [rbp-0x38],rax
 100e22f:	mov    QWORD PTR [rbp-0x30],r15
 100e233:	lea    rax,[rip+0xffffffffffff4b16]        # 0x1002d50
 100e23a:	mov    QWORD PTR [rbp-0x38],rax
 100e23e:	mov    QWORD PTR [rbp-0x38],rdi
 100e242:	mov    edx,0x1a
 100e247:	lea    rcx,[rbp-0x38]
 100e24b:	call   0x100d2d0
 100e250:	xor    r8d,r8d
 100e253:	mov    rdi,QWORD PTR [rbp-0x30]
 100e257:	mov    rdx,rdi
 100e25a:	lea    rcx,[rbx+0x20]
 100e25e:	call   0x100d9c0
 100e263:	mov    DWORD PTR [rbp-0x28],eax
 100e266:	test   eax,eax
 100e268:	jns    0x100e2da
 100e26a:	lea    rax,[rsp+0x40]
 100e26f:	mov    QWORD PTR [rbp+0x40],rax
 100e273:	mov    QWORD PTR [rsp+0x40],r14
 100e278:	mov    QWORD PTR [rsp+0x48],r12
 100e27d:	mov    DWORD PTR [rsp+0x50],0x8a5
 100e285:	mov    QWORD PTR [rsp+0x54],0x4000
 100e28e:	mov    DWORD PTR [rbp-0x50],0x1000000
 100e295:	mov    QWORD PTR [rsp+0x60],r15
 100e29a:	mov    QWORD PTR [rsp+0x68],r15
 100e29f:	mov    QWORD PTR [rsp+0x70],r15
 100e2a4:	mov    QWORD PTR [rsp+0x78],r15
 100e2a9:	mov    QWORD PTR [rbp-0x80],r15
 100e2ad:	mov    QWORD PTR [rbp-0x78],r15
 100e2b1:	mov    QWORD PTR [rbp-0x70],r15
 100e2b5:	mov    QWORD PTR [rbp-0x68],r15
 100e2b9:	mov    QWORD PTR [rbp-0x60],r15
 100e2bd:	mov    QWORD PTR [rbp-0x58],r15
 100e2c1:	lea    r9,[rip+0xffffffffffff4e50]        # 0x1003118
 100e2c8:	mov    r8d,DWORD PTR [rbp-0x28]
 100e2cc:	lea    rdx,[rsp+0x40]
 100e2d1:	lea    rcx,[rbp-0x28]
 100e2d5:	call   0x100c1a0
 100e2da:	mov    rcx,QWORD PTR [rbx+0x40]
 100e2de:	test   rcx,rcx
 100e2e1:	je     0x100e2ed
 100e2e3:	call   QWORD PTR [rip+0xffffffffffff2fb7]        # 0x10012a0
 100e2e9:	mov    QWORD PTR [rbx+0x40],r15
 100e2ed:	mov    r14d,r15d
 100e2f0:	cmp    DWORD PTR [rbx+0x10],r15d
 100e2f4:	jle    0x100e496
 100e2fa:	mov    rsi,r15
 100e2fd:	nop    DWORD PTR [rax]
 100e300:	mov    rdx,QWORD PTR [rbx+0x8]
 100e304:	xor    r9d,r9d
 100e307:	lea    r8d,[r9+0x1]
 100e30b:	lea    rcx,[rbx+0x38]
 100e30f:	cmp    BYTE PTR [rdx+r15*1],r9b
 100e313:	mov    rdx,QWORD PTR [rdx+r15*1+0x8]
 100e318:	je     0x100e3bf
 100e31e:	call   0x100dbd0
 100e323:	mov    edi,eax
 100e325:	test   eax,eax
 100e327:	js     0x100e33e
 100e329:	xor    r9d,r9d
 100e32c:	mov    r8,QWORD PTR [rbx+0x38]
 100e330:	lea    edx,[r9+0x1]
 100e334:	mov    rcx,QWORD PTR [rbx+0x20]
 100e338:	call   QWORD PTR [rip+0xffffffffffff2d0a]        # 0x1001048
 100e33e:	mov    DWORD PTR [rbp-0x28],edi
 100e341:	test   edi,edi
 100e343:	jns    0x100e476
 100e349:	lea    rax,[rsp+0x40]
 100e34e:	mov    QWORD PTR [rbp+0x40],rax
 100e352:	lea    rax,[rip+0xffffffffffff4a27]        # 0x1002d80
 100e359:	mov    QWORD PTR [rsp+0x40],rax
 100e35e:	lea    rax,[rip+0xffffffffffff4a03]        # 0x1002d68
 100e365:	mov    QWORD PTR [rsp+0x48],rax
 100e36a:	mov    DWORD PTR [rsp+0x50],0x8b5
 100e372:	mov    QWORD PTR [rsp+0x54],0x4000
 100e37b:	xor    edi,edi
 100e37d:	mov    DWORD PTR [rbp-0x50],0x1000000
 100e384:	mov    QWORD PTR [rsp+0x60],rdi
 100e389:	mov    QWORD PTR [rsp+0x68],rdi
 100e38e:	mov    QWORD PTR [rsp+0x70],rdi
 100e393:	mov    QWORD PTR [rsp+0x78],rdi
 100e398:	mov    QWORD PTR [rbp-0x80],rdi
 100e39c:	mov    QWORD PTR [rbp-0x78],rdi
 100e3a0:	mov    QWORD PTR [rbp-0x70],rdi
 100e3a4:	mov    QWORD PTR [rbp-0x68],rdi
 100e3a8:	mov    QWORD PTR [rbp-0x60],rdi
 100e3ac:	mov    QWORD PTR [rbp-0x58],rdi
 100e3b0:	mov    rax,QWORD PTR [rbx]
 100e3b3:	lea    r9,[rip+0xffffffffffff4d76]        # 0x1003130
 100e3ba:	jmp    0x100e45b
 100e3bf:	call   0x100dd40
 100e3c4:	mov    edi,eax
 100e3c6:	test   eax,eax
 100e3c8:	js     0x100e3df
 100e3ca:	xor    r9d,r9d
 100e3cd:	mov    r8,QWORD PTR [rbx+0x38]
 100e3d1:	lea    edx,[r9+0x1]
 100e3d5:	mov    rcx,QWORD PTR [rbx+0x20]
 100e3d9:	call   QWORD PTR [rip+0xffffffffffff2c69]        # 0x1001048
 100e3df:	mov    DWORD PTR [rbp-0x28],edi
 100e3e2:	test   edi,edi
 100e3e4:	jns    0x100e476
 100e3ea:	lea    rax,[rsp+0x40]
 100e3ef:	mov    QWORD PTR [rbp+0x40],rax
 100e3f3:	lea    rax,[rip+0xffffffffffff4986]        # 0x1002d80
 100e3fa:	mov    QWORD PTR [rsp+0x40],rax
 100e3ff:	lea    rax,[rip+0xffffffffffff4962]        # 0x1002d68
 100e406:	mov    QWORD PTR [rsp+0x48],rax
 100e40b:	mov    DWORD PTR [rsp+0x50],0x8be
 100e413:	mov    QWORD PTR [rsp+0x54],0x4000
 100e41c:	xor    eax,eax
 100e41e:	mov    DWORD PTR [rbp-0x50],0x1000000
 100e425:	mov    QWORD PTR [rsp+0x60],rax
 100e42a:	mov    QWORD PTR [rsp+0x68],rax
 100e42f:	mov    QWORD PTR [rsp+0x70],rax
 100e434:	mov    QWORD PTR [rsp+0x78],rax
 100e439:	mov    QWORD PTR [rbp-0x80],rax
 100e43d:	mov    QWORD PTR [rbp-0x78],rax
 100e441:	mov    QWORD PTR [rbp-0x70],rax
 100e445:	mov    QWORD PTR [rbp-0x68],rax
 100e449:	mov    QWORD PTR [rbp-0x60],rax
 100e44d:	mov    QWORD PTR [rbp-0x58],rax
 100e451:	mov    rax,QWORD PTR [rbx]
 100e454:	lea    r9,[rip+0xffffffffffff4d25]        # 0x1003180
 100e45b:	mov    rax,QWORD PTR [rsi+rax*1]
 100e45f:	mov    QWORD PTR [rsp+0x20],rax
 100e464:	mov    r8d,DWORD PTR [rbp-0x28]
 100e468:	lea    rdx,[rsp+0x40]
 100e46d:	lea    rcx,[rbp-0x28]
 100e471:	call   0x100c1a0
 100e476:	inc    r14d
 100e479:	add    r15,0x30
 100e47d:	add    rsi,0x8
 100e481:	cmp    r14d,DWORD PTR [rbx+0x10]
 100e485:	jl     0x100e300
 100e48b:	mov    rdi,QWORD PTR [rbp-0x30]
 100e48f:	mov    rsi,QWORD PTR [rbp-0x40]
 100e493:	xor    r15d,r15d
 100e496:	mov    BYTE PTR [rbx+0x18],0x1
 100e49a:	lea    r14,[rip+0xffffffffffff48af]        # 0x1002d50
 100e4a1:	mov    QWORD PTR [rbp-0x38],r14
 100e4a5:	test   rdi,rdi
 100e4a8:	je     0x100e4b3
 100e4aa:	mov    rcx,rdi
 100e4ad:	call   QWORD PTR [rip+0xffffffffffff2c95]        # 0x1001148
 100e4b3:	mov    QWORD PTR [rbp-0x30],r15
 100e4b7:	lea    rbx,[rip+0xffffffffffff488a]        # 0x1002d48
 100e4be:	mov    QWORD PTR [rbp-0x38],rbx
 100e4c2:	mov    QWORD PTR [rbp-0x48],r14
 100e4c6:	test   rsi,rsi
 100e4c9:	je     0x100e4d4
 100e4cb:	mov    rcx,rsi
 100e4ce:	call   QWORD PTR [rip+0xffffffffffff2c74]        # 0x1001148
 100e4d4:	mov    QWORD PTR [rbp-0x40],r15
 100e4d8:	mov    QWORD PTR [rbp-0x48],rbx
 100e4dc:	cmp    DWORD PTR [rip+0xd29d],0x0        # 0x101b780
 100e4e3:	je     0x100e543
 100e4e5:	cmp    DWORD PTR [rip+0xd2b4],0x0        # 0x101b7a0
 100e4ec:	je     0x100e543
 100e4ee:	mov    DWORD PTR [rsp+0x30],r15d
 100e4f3:	mov    rax,QWORD PTR [rbp-0x20]
 100e4f7:	mov    QWORD PTR [rsp+0x28],rax
 100e4fc:	mov    eax,DWORD PTR [rbp-0xc]
 100e4ff:	mov    DWORD PTR [rsp+0x20],eax
 100e503:	mov    r9d,DWORD PTR [rbp-0x8]
 100e507:	xor    r8d,r8d
 100e50a:	lea    rdx,[rip+0xffffffffffff680b]        # 0x1004d1c
 100e511:	lea    rcx,[rip+0xd268]        # 0x101b780
 100e518:	call   0x100af10
 100e51d:	mov    r8d,DWORD PTR [rbp-0x28]
 100e521:	lea    rdx,[rip+0xffffffffffff61e8]        # 0x1004710
 100e528:	lea    rcx,[rip+0xd251]        # 0x101b780
 100e52f:	call   0x100b470
 100e534:	mov    edx,DWORD PTR [rbp-0x8]
 100e537:	lea    rcx,[rip+0xd242]        # 0x101b780
 100e53e:	call   0x100b150
 100e543:	lea    r11,[rsp+0x110]
 100e54b:	mov    rbx,QWORD PTR [r11+0x38]
 100e54f:	mov    rsi,QWORD PTR [r11+0x40]
 100e553:	mov    rdi,QWORD PTR [r11+0x48]
 100e557:	mov    rsp,r11
 100e55a:	pop    r15
 100e55c:	pop    r14
 100e55e:	pop    r13
 100e560:	pop    r12
 100e562:	pop    rbp
 100e563:	ret    
 100e564:	int3   
 100e565:	int3   
 100e566:	int3   
 100e567:	int3   
 100e568:	int3   
 100e569:	int3   
 100e56a:	int3   
 100e56b:	int3   
 100e56c:	int3   
 100e56d:	int3   
 100e56e:	int3   
 100e56f:	int3   
 100e570:	rex push rbp
 100e572:	push   rsi
 100e573:	push   rdi
 100e574:	push   r12
 100e576:	push   r13
 100e578:	push   r14
 100e57a:	push   r15
 100e57c:	lea    rbp,[rsp-0x120]
 100e584:	sub    rsp,0x220
 100e58b:	mov    QWORD PTR [rbp+0xe0],0xfffffffffffffffe
 100e596:	mov    QWORD PTR [rsp+0x260],rbx
 100e59e:	mov    ebx,edx
 100e5a0:	mov    r15,rcx
 100e5a3:	lea    rax,[rsp+0x58]
 100e5a8:	mov    QWORD PTR [rsp+0x40],rax
 100e5ad:	lea    r13,[rip+0xffffffffffff47cc]        # 0x1002d80
 100e5b4:	mov    QWORD PTR [rsp+0x58],r13
 100e5b9:	lea    rsi,[rip+0xffffffffffff47a8]        # 0x1002d68
 100e5c0:	mov    QWORD PTR [rsp+0x60],rsi
 100e5c5:	mov    DWORD PTR [rsp+0x68],0x7b6
 100e5cd:	mov    QWORD PTR [rsp+0x6c],0x4000
 100e5d6:	xor    r12d,r12d
 100e5d9:	mov    DWORD PTR [rbp-0x38],0x1000000
 100e5e0:	mov    QWORD PTR [rsp+0x78],r12
 100e5e5:	mov    QWORD PTR [rbp-0x80],r12
 100e5e9:	mov    QWORD PTR [rbp-0x78],r12
 100e5ed:	mov    QWORD PTR [rbp-0x70],r12
 100e5f1:	mov    QWORD PTR [rbp-0x68],r12
 100e5f5:	mov    QWORD PTR [rbp-0x60],r12
 100e5f9:	mov    QWORD PTR [rbp-0x58],r12
 100e5fd:	mov    QWORD PTR [rbp-0x50],r12
 100e601:	mov    QWORD PTR [rbp-0x48],r12
 100e605:	mov    QWORD PTR [rbp-0x40],r12
 100e609:	lea    r8,[rip+0xffffffffffff4890]        # 0x1002ea0
 100e610:	lea    rdx,[rsp+0x58]
 100e615:	lea    rcx,[rbp+0x88]
 100e61c:	call   0x10060d0
 100e621:	nop
 100e622:	mov    DWORD PTR [rbp+0x170],r12d
 100e629:	lea    r9,[rbp+0x170]
 100e630:	xor    r8d,r8d
 100e633:	xor    edx,edx
 100e635:	mov    ecx,ebx
 100e637:	call   0x1006a20
 100e63c:	test   eax,eax
 100e63e:	je     0x100e6ad
 100e640:	lea    rax,[rsp+0x58]
 100e645:	mov    QWORD PTR [rsp+0x40],rax
 100e64a:	mov    QWORD PTR [rsp+0x58],r13
 100e64f:	mov    QWORD PTR [rsp+0x60],rsi
 100e654:	mov    DWORD PTR [rsp+0x68],0x7bb
 100e65c:	mov    QWORD PTR [rsp+0x6c],0x4000
 100e665:	mov    DWORD PTR [rbp-0x38],0x1000000
 100e66c:	mov    QWORD PTR [rsp+0x78],r12
 100e671:	mov    QWORD PTR [rbp-0x80],r12
 100e675:	mov    QWORD PTR [rbp-0x78],r12
 100e679:	mov    QWORD PTR [rbp-0x70],r12
 100e67d:	mov    QWORD PTR [rbp-0x68],r12
 100e681:	mov    QWORD PTR [rbp-0x60],r12
 100e685:	mov    QWORD PTR [rbp-0x58],r12
 100e689:	mov    QWORD PTR [rbp-0x50],r12
 100e68d:	mov    QWORD PTR [rbp-0x48],r12
 100e691:	mov    QWORD PTR [rbp-0x40],r12
 100e695:	lea    r8,[rip+0xffffffffffff4854]        # 0x1002ef0
 100e69c:	lea    rdx,[rsp+0x58]
 100e6a1:	lea    rcx,[rbp+0x88]
 100e6a8:	call   0x100bfb0
 100e6ad:	call   QWORD PTR [rip+0xffffffffffff2bc5]        # 0x1001278
 100e6b3:	cmp    eax,0x7a
 100e6b6:	je     0x100e725
 100e6b8:	lea    rax,[rsp+0x58]
 100e6bd:	mov    QWORD PTR [rsp+0x40],rax
 100e6c2:	mov    QWORD PTR [rsp+0x58],r13
 100e6c7:	mov    QWORD PTR [rsp+0x60],rsi
 100e6cc:	mov    DWORD PTR [rsp+0x68],0x7bd
 100e6d4:	mov    QWORD PTR [rsp+0x6c],0x4000
 100e6dd:	mov    DWORD PTR [rbp-0x38],0x1000000
 100e6e4:	mov    QWORD PTR [rsp+0x78],r12
 100e6e9:	mov    QWORD PTR [rbp-0x80],r12
 100e6ed:	mov    QWORD PTR [rbp-0x78],r12
 100e6f1:	mov    QWORD PTR [rbp-0x70],r12
 100e6f5:	mov    QWORD PTR [rbp-0x68],r12
 100e6f9:	mov    QWORD PTR [rbp-0x60],r12
 100e6fd:	mov    QWORD PTR [rbp-0x58],r12
 100e701:	mov    QWORD PTR [rbp-0x50],r12
 100e705:	mov    QWORD PTR [rbp-0x48],r12
 100e709:	mov    QWORD PTR [rbp-0x40],r12
 100e70d:	lea    r8,[rip+0xffffffffffff47dc]        # 0x1002ef0
 100e714:	lea    rdx,[rsp+0x58]
 100e719:	lea    rcx,[rbp+0x88]
 100e720:	call   0x100bfb0
 100e725:	lea    r14,[rip+0xffffffffffff4824]        # 0x1002f50
 100e72c:	mov    QWORD PTR [rsp+0x48],r14
 100e731:	mov    QWORD PTR [rsp+0x50],r12
 100e736:	lea    rax,[rip+0xffffffffffff481b]        # 0x1002f58
 100e73d:	mov    QWORD PTR [rsp+0x48],rax
 100e742:	lea    rax,[rip+0xffffffffffff4817]        # 0x1002f60
 100e749:	mov    QWORD PTR [rsp+0x48],rax
 100e74e:	mov    QWORD PTR [rsp+0x50],r12
 100e753:	lea    rax,[rip+0xffffffffffff480e]        # 0x1002f68
 100e75a:	mov    QWORD PTR [rsp+0x48],rax
 100e75f:	mov    edx,DWORD PTR [rbp+0x170]
 100e765:	lea    rcx,[rsp+0x48]
 100e76a:	call   0x100f660
 100e76f:	lea    r9,[rbp+0x170]
 100e776:	mov    rdi,QWORD PTR [rsp+0x50]
 100e77b:	mov    r8,rdi
 100e77e:	xor    edx,edx
 100e780:	mov    ecx,ebx
 100e782:	call   0x1006a20
 100e787:	test   eax,eax
 100e789:	jne    0x100e7ff
 100e78b:	lea    rax,[rsp+0x58]
 100e790:	mov    QWORD PTR [rsp+0x40],rax
 100e795:	mov    QWORD PTR [rsp+0x58],r13
 100e79a:	mov    QWORD PTR [rsp+0x60],rsi
 100e79f:	mov    DWORD PTR [rsp+0x68],0x7c5
 100e7a7:	mov    QWORD PTR [rsp+0x6c],0x4000
 100e7b0:	mov    DWORD PTR [rbp-0x38],0x1000000
 100e7b7:	mov    QWORD PTR [rsp+0x78],r12
 100e7bc:	mov    QWORD PTR [rbp-0x80],r12
 100e7c0:	mov    QWORD PTR [rbp-0x78],r12
 100e7c4:	mov    QWORD PTR [rbp-0x70],r12
 100e7c8:	mov    QWORD PTR [rbp-0x68],r12
 100e7cc:	mov    QWORD PTR [rbp-0x60],r12
 100e7d0:	mov    QWORD PTR [rbp-0x58],r12
 100e7d4:	mov    QWORD PTR [rbp-0x50],r12
 100e7d8:	mov    QWORD PTR [rbp-0x48],r12
 100e7dc:	mov    QWORD PTR [rbp-0x40],r12
 100e7e0:	mov    r9d,DWORD PTR [rbp+0x170]
 100e7e7:	lea    r8,[rip+0xffffffffffff4782]        # 0x1002f70
 100e7ee:	lea    rdx,[rsp+0x58]
 100e7f3:	lea    rcx,[rbp+0x88]
 100e7fa:	call   0x100bfb0
 100e7ff:	mov    DWORD PTR [rbp-0x30],r12d
 100e803:	mov    DWORD PTR [rbp+0x178],r12d
 100e80a:	lea    rax,[rbp-0x18]
 100e80e:	mov    QWORD PTR [rsp+0x30],rax
 100e813:	lea    rax,[rbp+0x178]
 100e81a:	mov    QWORD PTR [rsp+0x28],rax
 100e81f:	mov    QWORD PTR [rsp+0x20],r12
 100e824:	lea    r9,[rbp-0x30]
 100e828:	xor    r8d,r8d
 100e82b:	mov    rdx,rdi
 100e82e:	xor    ecx,ecx
 100e830:	call   QWORD PTR [rip+0xffffffffffff27fa]        # 0x1001030
 100e836:	test   eax,eax
 100e838:	je     0x100e8a7
 100e83a:	lea    rax,[rsp+0x58]
 100e83f:	mov    QWORD PTR [rsp+0x40],rax
 100e844:	mov    QWORD PTR [rsp+0x58],r13
 100e849:	mov    QWORD PTR [rsp+0x60],rsi
 100e84e:	mov    DWORD PTR [rsp+0x68],0x7ce
 100e856:	mov    QWORD PTR [rsp+0x6c],0x4000
 100e85f:	mov    DWORD PTR [rbp-0x38],0x1000000
 100e866:	mov    QWORD PTR [rsp+0x78],r12
 100e86b:	mov    QWORD PTR [rbp-0x80],r12
 100e86f:	mov    QWORD PTR [rbp-0x78],r12
 100e873:	mov    QWORD PTR [rbp-0x70],r12
 100e877:	mov    QWORD PTR [rbp-0x68],r12
 100e87b:	mov    QWORD PTR [rbp-0x60],r12
 100e87f:	mov    QWORD PTR [rbp-0x58],r12
 100e883:	mov    QWORD PTR [rbp-0x50],r12
 100e887:	mov    QWORD PTR [rbp-0x48],r12
 100e88b:	mov    QWORD PTR [rbp-0x40],r12
 100e88f:	lea    r8,[rip+0xffffffffffff4732]        # 0x1002fc8
 100e896:	lea    rdx,[rsp+0x58]
 100e89b:	lea    rcx,[rbp+0x88]
 100e8a2:	call   0x100bfb0
 100e8a7:	call   QWORD PTR [rip+0xffffffffffff29cb]        # 0x1001278
 100e8ad:	cmp    eax,0x7a
 100e8b0:	je     0x100e9c0
 100e8b6:	cmp    eax,0x534
 100e8bb:	jne    0x100e957
 100e8c1:	cmp    ebx,0x21
 100e8c4:	jne    0x100e957
 100e8ca:	lea    rax,[rsp+0x58]
 100e8cf:	mov    QWORD PTR [rsp+0x40],rax
 100e8d4:	mov    QWORD PTR [rsp+0x58],r13
 100e8d9:	mov    QWORD PTR [rsp+0x60],rsi
 100e8de:	mov    DWORD PTR [rsp+0x68],0x7e8
 100e8e6:	mov    QWORD PTR [rsp+0x6c],0x4000
 100e8ef:	mov    DWORD PTR [rbp-0x38],0x1000000
 100e8f6:	mov    QWORD PTR [rsp+0x78],r12
 100e8fb:	mov    QWORD PTR [rbp-0x80],r12
 100e8ff:	mov    QWORD PTR [rbp-0x78],r12
 100e903:	mov    QWORD PTR [rbp-0x70],r12
 100e907:	mov    QWORD PTR [rbp-0x68],r12
 100e90b:	mov    QWORD PTR [rbp-0x60],r12
 100e90f:	mov    QWORD PTR [rbp-0x58],r12
 100e913:	mov    QWORD PTR [rbp-0x50],r12
 100e917:	mov    QWORD PTR [rbp-0x48],r12
 100e91b:	mov    QWORD PTR [rbp-0x40],r12
 100e91f:	lea    r8,[rip+0xffffffffffff46ca]        # 0x1002ff0
 100e926:	lea    rdx,[rsp+0x58]
 100e92b:	lea    rcx,[rbp+0x88]
 100e932:	call   0x1006240
 100e937:	mov    QWORD PTR [rsp+0x50],r12
 100e93c:	lea    rax,[rip+0xffffffffffff461d]        # 0x1002f60
 100e943:	mov    QWORD PTR [rsp+0x48],rax
 100e948:	mov    QWORD PTR [rsp+0x50],r12
 100e94d:	mov    QWORD PTR [rsp+0x48],r14
 100e952:	jmp    0x100ec5e
 100e957:	lea    rax,[rbp+0x10]
 100e95b:	mov    QWORD PTR [rsp+0x40],rax
 100e960:	mov    QWORD PTR [rbp+0x10],r13
 100e964:	mov    QWORD PTR [rbp+0x18],rsi
 100e968:	mov    DWORD PTR [rbp+0x20],0x7f1
 100e96f:	mov    QWORD PTR [rbp+0x24],0x4000
 100e977:	mov    DWORD PTR [rbp+0x80],0x1000000
 100e981:	mov    QWORD PTR [rbp+0x30],r12
 100e985:	mov    QWORD PTR [rbp+0x38],r12
 100e989:	mov    QWORD PTR [rbp+0x40],r12
 100e98d:	mov    QWORD PTR [rbp+0x48],r12
 100e991:	mov    QWORD PTR [rbp+0x50],r12
 100e995:	mov    QWORD PTR [rbp+0x58],r12
 100e999:	mov    QWORD PTR [rbp+0x60],r12
 100e99d:	mov    QWORD PTR [rbp+0x68],r12
 100e9a1:	mov    QWORD PTR [rbp+0x70],r12
 100e9a5:	mov    QWORD PTR [rbp+0x78],r12
 100e9a9:	lea    r8,[rip+0xffffffffffff4618]        # 0x1002fc8
 100e9b0:	lea    rdx,[rbp+0x10]
 100e9b4:	lea    rcx,[rbp+0x88]
 100e9bb:	call   0x100bfb0
 100e9c0:	lea    rdx,[rip+0xffffffffffff42c9]        # 0x1002c90
 100e9c7:	mov    QWORD PTR [rbp+0x0],rdx
 100e9cb:	mov    QWORD PTR [rbp+0x8],r12
 100e9cf:	lea    rcx,[rip+0xffffffffffff42c2]        # 0x1002c98
 100e9d6:	mov    QWORD PTR [rbp+0x0],rcx
 100e9da:	lea    rax,[rip+0xffffffffffff42bf]        # 0x1002ca0
 100e9e1:	mov    QWORD PTR [rbp+0x0],rax
 100e9e5:	lea    r8,[rip+0xffffffffffff4374]        # 0x1002d60
 100e9ec:	mov    QWORD PTR [rbp+0x0],r8
 100e9f0:	mov    QWORD PTR [rbp-0x10],rdx
 100e9f4:	mov    QWORD PTR [rbp-0x8],r12
 100e9f8:	mov    QWORD PTR [rbp-0x10],rcx
 100e9fc:	mov    QWORD PTR [rbp-0x10],rax
 100ea00:	mov    QWORD PTR [rbp-0x10],r8
 100ea04:	mov    QWORD PTR [rbp-0x28],rdx
 100ea08:	mov    QWORD PTR [rbp-0x20],r12
 100ea0c:	mov    QWORD PTR [rbp-0x28],rcx
 100ea10:	mov    QWORD PTR [rbp-0x28],rax
 100ea14:	mov    QWORD PTR [rbp-0x28],r8
 100ea18:	mov    eax,DWORD PTR [rbp-0x30]
 100ea1b:	lea    edx,[rax*2+0x2]
 100ea22:	lea    rcx,[rbp+0x0]
 100ea26:	call   0x100c810
 100ea2b:	mov    r11d,DWORD PTR [rbp+0x178]
 100ea32:	lea    edx,[r11*2+0x2]
 100ea3a:	lea    rcx,[rbp-0x10]
 100ea3e:	call   0x100c810
 100ea43:	lea    r11,[rbp-0x18]
 100ea47:	mov    QWORD PTR [rsp+0x30],r11
 100ea4c:	lea    rax,[rbp+0x178]
 100ea53:	mov    QWORD PTR [rsp+0x28],rax
 100ea58:	mov    rsi,QWORD PTR [rbp-0x8]
 100ea5c:	mov    QWORD PTR [rsp+0x20],rsi
 100ea61:	lea    r9,[rbp-0x30]
 100ea65:	mov    r14,QWORD PTR [rbp+0x8]
 100ea69:	mov    r8,r14
 100ea6c:	mov    rdx,rdi
 100ea6f:	xor    ecx,ecx
 100ea71:	call   QWORD PTR [rip+0xffffffffffff25b9]        # 0x1001030
 100ea77:	test   eax,eax
 100ea79:	jne    0x100eaeb
 100ea7b:	lea    rax,[rbp+0x10]
 100ea7f:	mov    QWORD PTR [rsp+0x40],rax
 100ea84:	mov    QWORD PTR [rbp+0x10],r13
 100ea88:	lea    rax,[rip+0xffffffffffff42d9]        # 0x1002d68
 100ea8f:	mov    QWORD PTR [rbp+0x18],rax
 100ea93:	mov    DWORD PTR [rbp+0x20],0x7fc
 100ea9a:	mov    QWORD PTR [rbp+0x24],0x4000
 100eaa2:	mov    DWORD PTR [rbp+0x80],0x1000000
 100eaac:	mov    QWORD PTR [rbp+0x30],r12
 100eab0:	mov    QWORD PTR [rbp+0x38],r12
 100eab4:	mov    QWORD PTR [rbp+0x40],r12
 100eab8:	mov    QWORD PTR [rbp+0x48],r12
 100eabc:	mov    QWORD PTR [rbp+0x50],r12
 100eac0:	mov    QWORD PTR [rbp+0x58],r12
 100eac4:	mov    QWORD PTR [rbp+0x60],r12
 100eac8:	mov    QWORD PTR [rbp+0x68],r12
 100eacc:	mov    QWORD PTR [rbp+0x70],r12
 100ead0:	mov    QWORD PTR [rbp+0x78],r12
 100ead4:	lea    r8,[rip+0xffffffffffff44ed]        # 0x1002fc8
 100eadb:	lea    rdx,[rbp+0x10]
 100eadf:	lea    rcx,[rbp+0x88]
 100eae6:	call   0x100bfb0
 100eaeb:	cmp    ebx,0x1a
 100eaee:	sete   r8b
 100eaf2:	mov    rdx,rsi
 100eaf5:	mov    rcx,r15
 100eaf8:	call   0x100ed00
 100eafd:	movzx  ebx,al
 100eb00:	mov    rdx,rsi
 100eb03:	lea    rcx,[rbp-0x28]
 100eb07:	call   0x100ca40
 100eb0c:	lea    rdx,[rip+0xffffffffffff5bf9]        # 0x100470c
 100eb13:	lea    rcx,[rbp-0x28]
 100eb17:	call   0x100cc10
 100eb1c:	mov    rdx,r14
 100eb1f:	lea    rcx,[rbp-0x28]
 100eb23:	call   0x100cc10
 100eb28:	mov    BYTE PTR [rbp+0xb0],0x1
 100eb2f:	mov    QWORD PTR [rbp+0xb8],rdi
 100eb36:	mov    ecx,DWORD PTR [rbp-0x18]
 100eb39:	mov    DWORD PTR [rbp+0xc0],ecx
 100eb3f:	mov    QWORD PTR [rbp+0xc8],r14
 100eb46:	mov    QWORD PTR [rbp+0xd0],rsi
 100eb4d:	mov    BYTE PTR [rbp+0xd8],bl
 100eb53:	movups xmm0,XMMWORD PTR [rbp+0xb0]
 100eb5a:	movaps XMMWORD PTR [rbp+0xf0],xmm0
 100eb61:	movups xmm1,XMMWORD PTR [rbp+0xc0]
 100eb68:	movaps XMMWORD PTR [rbp+0x100],xmm1
 100eb6f:	movups xmm0,XMMWORD PTR [rbp+0xd0]
 100eb76:	movaps XMMWORD PTR [rbp+0x110],xmm0
 100eb7d:	lea    r8,[rbp+0xf0]
 100eb84:	mov    rdx,QWORD PTR [rbp-0x20]
 100eb88:	mov    rcx,r15
 100eb8b:	call   0x100f0c0
 100eb90:	test   eax,eax
 100eb92:	jne    0x100ebfe
 100eb94:	lea    rax,[rbp+0x10]
 100eb98:	mov    QWORD PTR [rsp+0x40],rax
 100eb9d:	mov    QWORD PTR [rbp+0x10],r13
 100eba1:	lea    rax,[rip+0xffffffffffff41c0]        # 0x1002d68
 100eba8:	mov    QWORD PTR [rbp+0x18],rax
 100ebac:	mov    DWORD PTR [rbp+0x20],0x80a
 100ebb3:	mov    QWORD PTR [rbp+0x24],0x4000
 100ebbb:	mov    DWORD PTR [rbp+0x80],0x1000000
 100ebc5:	mov    QWORD PTR [rbp+0x30],r12
 100ebc9:	mov    QWORD PTR [rbp+0x38],r12
 100ebcd:	mov    QWORD PTR [rbp+0x40],r12
 100ebd1:	mov    QWORD PTR [rbp+0x48],r12
 100ebd5:	mov    QWORD PTR [rbp+0x50],r12
 100ebd9:	mov    QWORD PTR [rbp+0x58],r12
 100ebdd:	mov    QWORD PTR [rbp+0x60],r12
 100ebe1:	mov    QWORD PTR [rbp+0x68],r12
 100ebe5:	mov    QWORD PTR [rbp+0x70],r12
 100ebe9:	mov    QWORD PTR [rbp+0x78],r12
 100ebed:	lea    rdx,[rbp+0x10]
 100ebf1:	lea    rcx,[rbp+0x88]
 100ebf8:	call   0x100c6f0
 100ebfd:	int3   
 100ebfe:	mov    QWORD PTR [rsp+0x50],r12
 100ec03:	mov    QWORD PTR [rbp-0x20],r12
 100ec07:	mov    QWORD PTR [rbp+0x8],r12
 100ec0b:	mov    QWORD PTR [rbp-0x8],r12
 100ec0f:	lea    rcx,[rip+0xffffffffffff414a]        # 0x1002d60
 100ec16:	mov    QWORD PTR [rbp-0x28],rcx
 100ec1a:	mov    QWORD PTR [rbp-0x20],r12
 100ec1e:	lea    rax,[rip+0xffffffffffff406b]        # 0x1002c90
 100ec25:	mov    QWORD PTR [rbp-0x28],rax
 100ec29:	mov    QWORD PTR [rbp-0x10],rcx
 100ec2d:	mov    QWORD PTR [rbp-0x8],r12
 100ec31:	mov    QWORD PTR [rbp-0x10],rax
 100ec35:	mov    QWORD PTR [rbp+0x0],rcx
 100ec39:	mov    QWORD PTR [rbp+0x8],r12
 100ec3d:	mov    QWORD PTR [rbp+0x0],rax
 100ec41:	lea    rax,[rip+0xffffffffffff4318]        # 0x1002f60
 100ec48:	mov    QWORD PTR [rsp+0x48],rax
 100ec4d:	mov    QWORD PTR [rsp+0x50],r12
 100ec52:	lea    rax,[rip+0xffffffffffff42f7]        # 0x1002f50
 100ec59:	mov    QWORD PTR [rsp+0x48],rax
 100ec5e:	cmp    DWORD PTR [rip+0xcb1b],0x0        # 0x101b780
 100ec65:	je     0x100ecd4
 100ec67:	cmp    DWORD PTR [rip+0xcb32],0x0        # 0x101b7a0
 100ec6e:	je     0x100ecd4
 100ec70:	mov    DWORD PTR [rsp+0x30],r12d
 100ec75:	mov    rax,QWORD PTR [rbp+0x90]
 100ec7c:	mov    QWORD PTR [rsp+0x28],rax
 100ec81:	mov    eax,DWORD PTR [rbp+0xa4]
 100ec87:	mov    DWORD PTR [rsp+0x20],eax
 100ec8b:	mov    r9d,DWORD PTR [rbp+0xa8]
 100ec92:	xor    r8d,r8d
 100ec95:	lea    rdx,[rip+0xffffffffffff6080]        # 0x1004d1c
 100ec9c:	lea    rcx,[rip+0xcadd]        # 0x101b780
 100eca3:	call   0x100af10
 100eca8:	mov    r8d,DWORD PTR [rbp+0x88]
 100ecaf:	lea    rdx,[rip+0xffffffffffff5a5a]        # 0x1004710
 100ecb6:	lea    rcx,[rip+0xcac3]        # 0x101b780
 100ecbd:	call   0x100b470
 100ecc2:	mov    edx,DWORD PTR [rbp+0xa8]
 100ecc8:	lea    rcx,[rip+0xcab1]        # 0x101b780
 100eccf:	call   0x100b150
 100ecd4:	mov    rbx,QWORD PTR [rsp+0x260]
 100ecdc:	add    rsp,0x220
 100ece3:	pop    r15
 100ece5:	pop    r14
 100ece7:	pop    r13
 100ece9:	pop    r12
 100eceb:	pop    rdi
 100ecec:	pop    rsi
 100eced:	pop    rbp
 100ecee:	ret    
 100ecef:	int3   
 100ecf0:	int3   
 100ecf1:	int3   
 100ecf2:	int3   
 100ecf3:	int3   
 100ecf4:	int3   
 100ecf5:	int3   
 100ecf6:	int3   
 100ecf7:	int3   
 100ecf8:	int3   
 100ecf9:	int3   
 100ecfa:	int3   
 100ecfb:	int3   
 100ecfc:	int3   
 100ecfd:	int3   
 100ecfe:	int3   
 100ecff:	int3   
 100ed00:	mov    rax,rsp
 100ed03:	push   rbp
 100ed04:	push   rdi
 100ed05:	push   r12
 100ed07:	push   r14
 100ed09:	push   r15
 100ed0b:	lea    rbp,[rax-0x48]
 100ed0f:	sub    rsp,0x120
 100ed16:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 100ed1e:	mov    QWORD PTR [rax+0x18],rbx
 100ed22:	mov    QWORD PTR [rax+0x20],rsi
 100ed26:	mov    rax,QWORD PTR [rip+0xc403]        # 0x101b130
 100ed2d:	xor    rax,rsp
 100ed30:	mov    QWORD PTR [rbp+0x18],rax
 100ed34:	movzx  ebx,r8b
 100ed38:	mov    rdi,rdx
 100ed3b:	mov    rsi,rcx
 100ed3e:	lea    rax,[rsp+0x70]
 100ed43:	mov    QWORD PTR [rsp+0x68],rax
 100ed48:	lea    r15,[rip+0xffffffffffff4031]        # 0x1002d80
 100ed4f:	mov    QWORD PTR [rsp+0x70],r15
 100ed54:	lea    r12,[rip+0xffffffffffff400d]        # 0x1002d68
 100ed5b:	mov    QWORD PTR [rsp+0x78],r12
 100ed60:	mov    DWORD PTR [rbp-0x80],0x85c
 100ed67:	mov    QWORD PTR [rbp-0x7c],0x4000
 100ed6f:	xor    r14d,r14d
 100ed72:	mov    DWORD PTR [rbp-0x20],0x1000000
 100ed79:	mov    QWORD PTR [rbp-0x70],r14
 100ed7d:	mov    QWORD PTR [rbp-0x68],r14
 100ed81:	mov    QWORD PTR [rbp-0x60],r14
 100ed85:	mov    QWORD PTR [rbp-0x58],r14
 100ed89:	mov    QWORD PTR [rbp-0x50],r14
 100ed8d:	mov    QWORD PTR [rbp-0x48],r14
 100ed91:	mov    QWORD PTR [rbp-0x40],r14
 100ed95:	mov    QWORD PTR [rbp-0x38],r14
 100ed99:	mov    QWORD PTR [rbp-0x30],r14
 100ed9d:	mov    QWORD PTR [rbp-0x28],r14
 100eda1:	lea    r8,[rip+0xffffffffffff42a8]        # 0x1003050
 100eda8:	lea    rdx,[rsp+0x70]
 100edad:	lea    rcx,[rsp+0x40]
 100edb2:	call   0x10060d0
 100edb7:	nop
 100edb8:	test   bl,bl
 100edba:	je     0x100ee40
 100edc0:	lea    rcx,[rsi+0x48]
 100edc4:	mov    rdx,rdi
 100edc7:	call   0x100ca40
 100edcc:	nop
 100edcd:	cmp    DWORD PTR [rip+0xc9ac],r14d        # 0x101b780
 100edd4:	je     0x100ee39
 100edd6:	cmp    DWORD PTR [rip+0xc9c3],r14d        # 0x101b7a0
 100eddd:	je     0x100ee39
 100eddf:	mov    DWORD PTR [rsp+0x30],r14d
 100ede4:	mov    rax,QWORD PTR [rsp+0x48]
 100ede9:	mov    QWORD PTR [rsp+0x28],rax
 100edee:	mov    eax,DWORD PTR [rsp+0x5c]
 100edf2:	mov    DWORD PTR [rsp+0x20],eax
 100edf6:	mov    r9d,DWORD PTR [rsp+0x60]
 100edfb:	xor    r8d,r8d
 100edfe:	lea    rdx,[rip+0xffffffffffff5f17]        # 0x1004d1c
 100ee05:	lea    rcx,[rip+0xc974]        # 0x101b780
 100ee0c:	call   0x100af10
 100ee11:	mov    r8d,DWORD PTR [rsp+0x40]
 100ee16:	lea    rdx,[rip+0xffffffffffff58f3]        # 0x1004710
 100ee1d:	lea    rcx,[rip+0xc95c]        # 0x101b780
 100ee24:	call   0x100b470
 100ee29:	mov    edx,DWORD PTR [rsp+0x60]
 100ee2d:	lea    rcx,[rip+0xc94c]        # 0x101b780
 100ee34:	call   0x100b150
 100ee39:	mov    al,0x1
 100ee3b:	jmp    0x100f039
 100ee40:	mov    rdx,QWORD PTR [rsi+0x50]
 100ee44:	mov    rcx,rdi
 100ee47:	call   QWORD PTR [rip+0xffffffffffff2563]        # 0x10013b0
 100ee4d:	test   eax,eax
 100ee4f:	jne    0x100eec2
 100ee51:	cmp    DWORD PTR [rip+0xc929],eax        # 0x101b780
 100ee57:	je     0x100ee39
 100ee59:	cmp    DWORD PTR [rip+0xc941],eax        # 0x101b7a0
 100ee5f:	je     0x100ee39
 100ee61:	mov    DWORD PTR [rsp+0x30],r14d
 100ee66:	mov    rax,QWORD PTR [rsp+0x48]
 100ee6b:	mov    QWORD PTR [rsp+0x28],rax
 100ee70:	mov    eax,DWORD PTR [rsp+0x5c]
 100ee74:	mov    DWORD PTR [rsp+0x20],eax
 100ee78:	mov    r9d,DWORD PTR [rsp+0x60]
 100ee7d:	xor    r8d,r8d
 100ee80:	lea    rdx,[rip+0xffffffffffff5e95]        # 0x1004d1c
 100ee87:	lea    rcx,[rip+0xc8f2]        # 0x101b780
 100ee8e:	call   0x100af10
 100ee93:	mov    r8d,DWORD PTR [rsp+0x40]
 100ee98:	lea    rdx,[rip+0xffffffffffff5871]        # 0x1004710
 100ee9f:	lea    rcx,[rip+0xc8da]        # 0x101b780
 100eea6:	call   0x100b470
 100eeab:	mov    edx,DWORD PTR [rsp+0x60]
 100eeaf:	lea    rcx,[rip+0xc8ca]        # 0x101b780
 100eeb6:	call   0x100b150
 100eebb:	mov    al,0x1
 100eebd:	jmp    0x100f039
 100eec2:	mov    DWORD PTR [rsp+0x68],0x10
 100eeca:	lea    rdx,[rsp+0x68]
 100eecf:	lea    rcx,[rbp-0x8]
 100eed3:	call   QWORD PTR [rip+0xffffffffffff225f]        # 0x1001138
 100eed9:	test   eax,eax
 100eedb:	jne    0x100ef44
 100eedd:	lea    rax,[rsp+0x70]
 100eee2:	mov    QWORD PTR [rbp-0x18],rax
 100eee6:	mov    QWORD PTR [rsp+0x70],r15
 100eeeb:	mov    QWORD PTR [rsp+0x78],r12
 100eef0:	mov    DWORD PTR [rbp-0x80],0x874
 100eef7:	mov    QWORD PTR [rbp-0x7c],0x4000
 100eeff:	mov    DWORD PTR [rbp-0x20],0x1000000
 100ef06:	mov    QWORD PTR [rbp-0x70],r14
 100ef0a:	mov    QWORD PTR [rbp-0x68],r14
 100ef0e:	mov    QWORD PTR [rbp-0x60],r14
 100ef12:	mov    QWORD PTR [rbp-0x58],r14
 100ef16:	mov    QWORD PTR [rbp-0x50],r14
 100ef1a:	mov    QWORD PTR [rbp-0x48],r14
 100ef1e:	mov    QWORD PTR [rbp-0x40],r14
 100ef22:	mov    QWORD PTR [rbp-0x38],r14
 100ef26:	mov    QWORD PTR [rbp-0x30],r14
 100ef2a:	mov    QWORD PTR [rbp-0x28],r14
 100ef2e:	lea    r8,[rip+0xffffffffffff4163]        # 0x1003098
 100ef35:	lea    rdx,[rsp+0x70]
 100ef3a:	lea    rcx,[rsp+0x40]
 100ef3f:	call   0x100bfb0
 100ef44:	lea    rdx,[rbp-0x8]
 100ef48:	mov    rcx,rdi
 100ef4b:	call   QWORD PTR [rip+0xffffffffffff245f]        # 0x10013b0
 100ef51:	test   eax,eax
 100ef53:	jne    0x100efcb
 100ef55:	cmp    DWORD PTR [rip+0xc825],eax        # 0x101b780
 100ef5b:	je     0x100ee39
 100ef61:	cmp    DWORD PTR [rip+0xc839],eax        # 0x101b7a0
 100ef67:	je     0x100ee39
 100ef6d:	mov    DWORD PTR [rsp+0x30],r14d
 100ef72:	mov    rax,QWORD PTR [rsp+0x48]
 100ef77:	mov    QWORD PTR [rsp+0x28],rax
 100ef7c:	mov    eax,DWORD PTR [rsp+0x5c]
 100ef80:	mov    DWORD PTR [rsp+0x20],eax
 100ef84:	mov    r9d,DWORD PTR [rsp+0x60]
 100ef89:	xor    r8d,r8d
 100ef8c:	lea    rdx,[rip+0xffffffffffff5d89]        # 0x1004d1c
 100ef93:	lea    rcx,[rip+0xc7e6]        # 0x101b780
 100ef9a:	call   0x100af10
 100ef9f:	mov    r8d,DWORD PTR [rsp+0x40]
 100efa4:	lea    rdx,[rip+0xffffffffffff5765]        # 0x1004710
 100efab:	lea    rcx,[rip+0xc7ce]        # 0x101b780
 100efb2:	call   0x100b470
 100efb7:	mov    edx,DWORD PTR [rsp+0x60]
 100efbb:	lea    rcx,[rip+0xc7be]        # 0x101b780
 100efc2:	call   0x100b150
 100efc7:	mov    al,0x1
 100efc9:	jmp    0x100f039
 100efcb:	cmp    DWORD PTR [rip+0xc7ae],0x0        # 0x101b780
 100efd2:	je     0x100f037
 100efd4:	cmp    DWORD PTR [rip+0xc7c5],0x0        # 0x101b7a0
 100efdb:	je     0x100f037
 100efdd:	mov    DWORD PTR [rsp+0x30],r14d
 100efe2:	mov    rax,QWORD PTR [rsp+0x48]
 100efe7:	mov    QWORD PTR [rsp+0x28],rax
 100efec:	mov    eax,DWORD PTR [rsp+0x5c]
 100eff0:	mov    DWORD PTR [rsp+0x20],eax
 100eff4:	mov    r9d,DWORD PTR [rsp+0x60]
 100eff9:	xor    r8d,r8d
 100effc:	lea    rdx,[rip+0xffffffffffff5d19]        # 0x1004d1c
 100f003:	lea    rcx,[rip+0xc776]        # 0x101b780
 100f00a:	call   0x100af10
 100f00f:	mov    r8d,DWORD PTR [rsp+0x40]
 100f014:	lea    rdx,[rip+0xffffffffffff56f5]        # 0x1004710
 100f01b:	lea    rcx,[rip+0xc75e]        # 0x101b780
 100f022:	call   0x100b470
 100f027:	mov    edx,DWORD PTR [rsp+0x60]
 100f02b:	lea    rcx,[rip+0xc74e]        # 0x101b780
 100f032:	call   0x100b150
 100f037:	xor    al,al
 100f039:	mov    rcx,QWORD PTR [rbp+0x18]
 100f03d:	xor    rcx,rsp
 100f040:	call   0x1009d50
 100f045:	lea    r11,[rsp+0x120]
 100f04d:	mov    rbx,QWORD PTR [r11+0x40]
 100f051:	mov    rsi,QWORD PTR [r11+0x48]
 100f055:	mov    rsp,r11
 100f058:	pop    r15
 100f05a:	pop    r14
 100f05c:	pop    r12
 100f05e:	pop    rdi
 100f05f:	pop    rbp
 100f060:	ret    
 100f061:	int3   
 100f062:	int3   
 100f063:	int3   
 100f064:	int3   
 100f065:	int3   
 100f066:	int3   
 100f067:	int3   
 100f068:	int3   
 100f069:	int3   
 100f06a:	int3   
 100f06b:	int3   
 100f06c:	int3   
 100f06d:	int3   
 100f06e:	int3   
 100f06f:	int3   
 100f070:	mov    QWORD PTR [rsp+0x8],rbx
 100f075:	push   rdi
 100f076:	sub    rsp,0x20
 100f07a:	mov    rbx,rcx
 100f07d:	mov    rcx,QWORD PTR [rcx]
 100f080:	xor    edi,edi
 100f082:	test   rcx,rcx
 100f085:	je     0x100f090
 100f087:	call   QWORD PTR [rip+0xffffffffffff2213]        # 0x10012a0
 100f08d:	mov    QWORD PTR [rbx],rdi
 100f090:	mov    rcx,QWORD PTR [rbx+0x8]
 100f094:	test   rcx,rcx
 100f097:	je     0x100f0a3
 100f099:	call   QWORD PTR [rip+0xffffffffffff2201]        # 0x10012a0
 100f09f:	mov    QWORD PTR [rbx+0x8],rdi
 100f0a3:	mov    DWORD PTR [rbx+0x10],edi
 100f0a6:	mov    rbx,QWORD PTR [rsp+0x30]
 100f0ab:	add    rsp,0x20
 100f0af:	pop    rdi
 100f0b0:	ret    
 100f0b1:	int3   
 100f0b2:	int3   
 100f0b3:	int3   
 100f0b4:	int3   
 100f0b5:	int3   
 100f0b6:	int3   
 100f0b7:	int3   
 100f0b8:	int3   
 100f0b9:	int3   
 100f0ba:	int3   
 100f0bb:	int3   
 100f0bc:	int3   
 100f0bd:	int3   
 100f0be:	int3   
 100f0bf:	int3   
 100f0c0:	mov    QWORD PTR [rsp+0x8],rbx
 100f0c5:	mov    QWORD PTR [rsp+0x10],rsi
 100f0ca:	push   rdi
 100f0cb:	sub    rsp,0x20
 100f0cf:	mov    eax,DWORD PTR [rcx+0x10]
 100f0d2:	mov    rsi,rdx
 100f0d5:	mov    rbx,rcx
 100f0d8:	mov    rcx,QWORD PTR [rcx]
 100f0db:	inc    eax
 100f0dd:	mov    rdi,r8
 100f0e0:	movsxd rdx,eax
 100f0e3:	shl    rdx,0x3
 100f0e7:	call   QWORD PTR [rip+0xffffffffffff22cb]        # 0x10013b8
 100f0ed:	test   rax,rax
 100f0f0:	jne    0x100f104
 100f0f2:	xor    eax,eax
 100f0f4:	mov    rbx,QWORD PTR [rsp+0x30]
 100f0f9:	mov    rsi,QWORD PTR [rsp+0x38]
 100f0fe:	add    rsp,0x20
 100f102:	pop    rdi
 100f103:	ret    
 100f104:	mov    rcx,QWORD PTR [rbx+0x8]
 100f108:	mov    QWORD PTR [rbx],rax
 100f10b:	mov    eax,DWORD PTR [rbx+0x10]
 100f10e:	inc    eax
 100f110:	cdqe   
 100f112:	lea    rdx,[rax+rax*2]
 100f116:	shl    rdx,0x4
 100f11a:	call   QWORD PTR [rip+0xffffffffffff2298]        # 0x10013b8
 100f120:	test   rax,rax
 100f123:	je     0x100f0f2
 100f125:	inc    DWORD PTR [rbx+0x10]
 100f128:	mov    QWORD PTR [rbx+0x8],rax
 100f12c:	mov    eax,DWORD PTR [rbx+0x10]
 100f12f:	dec    eax
 100f131:	movsxd rcx,eax
 100f134:	mov    rax,QWORD PTR [rbx]
 100f137:	lea    rdx,[rax+rcx*8]
 100f13b:	test   rdx,rdx
 100f13e:	je     0x100f143
 100f140:	mov    QWORD PTR [rdx],rsi
 100f143:	lea    rcx,[rcx+rcx*2]
 100f147:	shl    rcx,0x4
 100f14b:	add    rcx,QWORD PTR [rbx+0x8]
 100f14f:	je     0x100f17f
 100f151:	mov    rax,QWORD PTR [rdi]
 100f154:	mov    QWORD PTR [rcx],rax
 100f157:	mov    rax,QWORD PTR [rdi+0x8]
 100f15b:	mov    QWORD PTR [rcx+0x8],rax
 100f15f:	mov    rax,QWORD PTR [rdi+0x10]
 100f163:	mov    QWORD PTR [rcx+0x10],rax
 100f167:	mov    rax,QWORD PTR [rdi+0x18]
 100f16b:	mov    QWORD PTR [rcx+0x18],rax
 100f16f:	mov    rax,QWORD PTR [rdi+0x20]
 100f173:	mov    QWORD PTR [rcx+0x20],rax
 100f177:	mov    rax,QWORD PTR [rdi+0x28]
 100f17b:	mov    QWORD PTR [rcx+0x28],rax
 100f17f:	mov    rbx,QWORD PTR [rsp+0x30]
 100f184:	mov    rsi,QWORD PTR [rsp+0x38]
 100f189:	mov    eax,0x1
 100f18e:	add    rsp,0x20
 100f192:	pop    rdi
 100f193:	ret    
 100f194:	int3   
 100f195:	int3   
 100f196:	int3   
 100f197:	int3   
 100f198:	int3   
 100f199:	int3   
 100f19a:	int3   
 100f19b:	int3   
 100f19c:	int3   
 100f19d:	int3   
 100f19e:	int3   
 100f19f:	int3   
 100f1a0:	mov    QWORD PTR [rsp+0x8],rcx
 100f1a5:	push   rbx
 100f1a6:	sub    rsp,0x30
 100f1aa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f1b3:	mov    rbx,rcx
 100f1b6:	lea    rax,[rip+0xffffffffffff3ba3]        # 0x1002d60
 100f1bd:	mov    QWORD PTR [rcx],rax
 100f1c0:	mov    rcx,QWORD PTR [rcx+0x8]
 100f1c4:	test   rcx,rcx
 100f1c7:	je     0x100f1cf
 100f1c9:	call   QWORD PTR [rip+0xffffffffffff1f79]        # 0x1001148
 100f1cf:	mov    QWORD PTR [rbx+0x8],0x0
 100f1d7:	lea    rax,[rip+0xffffffffffff3ab2]        # 0x1002c90
 100f1de:	mov    QWORD PTR [rbx],rax
 100f1e1:	add    rsp,0x30
 100f1e5:	pop    rbx
 100f1e6:	ret    
 100f1e7:	int3   
 100f1e8:	int3   
 100f1e9:	int3   
 100f1ea:	int3   
 100f1eb:	int3   
 100f1ec:	int3   
 100f1ed:	int3   
 100f1ee:	int3   
 100f1ef:	int3   
 100f1f0:	mov    QWORD PTR [rsp+0x8],rcx
 100f1f5:	push   rdi
 100f1f6:	sub    rsp,0x30
 100f1fa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f203:	mov    QWORD PTR [rsp+0x48],rbx
 100f208:	mov    edi,edx
 100f20a:	mov    rbx,rcx
 100f20d:	lea    rax,[rip+0xffffffffffff3b4c]        # 0x1002d60
 100f214:	mov    QWORD PTR [rcx],rax
 100f217:	mov    rcx,QWORD PTR [rcx+0x8]
 100f21b:	test   rcx,rcx
 100f21e:	je     0x100f226
 100f220:	call   QWORD PTR [rip+0xffffffffffff1f22]        # 0x1001148
 100f226:	mov    QWORD PTR [rbx+0x8],0x0
 100f22e:	lea    rax,[rip+0xffffffffffff3a5b]        # 0x1002c90
 100f235:	mov    QWORD PTR [rbx],rax
 100f238:	test   dil,0x1
 100f23c:	je     0x100f246
 100f23e:	mov    rcx,rbx
 100f241:	call   0x1009d34
 100f246:	mov    rax,rbx
 100f249:	mov    rbx,QWORD PTR [rsp+0x48]
 100f24e:	add    rsp,0x30
 100f252:	pop    rdi
 100f253:	ret    
 100f254:	int3   
 100f255:	int3   
 100f256:	int3   
 100f257:	int3   
 100f258:	int3   
 100f259:	int3   
 100f25a:	int3   
 100f25b:	int3   
 100f25c:	int3   
 100f25d:	int3   
 100f25e:	int3   
 100f25f:	int3   
 100f260:	mov    rax,rsp
 100f263:	push   rbp
 100f264:	push   r14
 100f266:	push   r15
 100f268:	lea    rbp,[rax-0x78]
 100f26c:	sub    rsp,0x160
 100f273:	mov    QWORD PTR [rbp+0x58],0xfffffffffffffffe
 100f27b:	mov    QWORD PTR [rax+0x10],rbx
 100f27f:	mov    QWORD PTR [rax+0x18],rsi
 100f283:	mov    QWORD PTR [rax+0x20],rdi
 100f287:	mov    edi,edx
 100f289:	mov    rbx,rcx
 100f28c:	lea    rax,[rbp-0x48]
 100f290:	mov    QWORD PTR [rbp+0x80],rax
 100f297:	lea    r14,[rip+0xffffffffffff3952]        # 0x1002bf0
 100f29e:	mov    QWORD PTR [rbp-0x48],r14
 100f2a2:	lea    r15,[rip+0xffffffffffff3937]        # 0x1002be0
 100f2a9:	mov    QWORD PTR [rbp-0x40],r15
 100f2ad:	mov    DWORD PTR [rbp-0x38],0x1b5
 100f2b4:	mov    QWORD PTR [rbp-0x34],0x4000
 100f2bc:	xor    esi,esi
 100f2be:	mov    DWORD PTR [rbp+0x28],0x1000000
 100f2c5:	mov    QWORD PTR [rbp-0x28],rsi
 100f2c9:	mov    QWORD PTR [rbp-0x20],rsi
 100f2cd:	mov    QWORD PTR [rbp-0x18],rsi
 100f2d1:	mov    QWORD PTR [rbp-0x10],rsi
 100f2d5:	mov    QWORD PTR [rbp-0x8],rsi
 100f2d9:	mov    QWORD PTR [rbp+0x0],rsi
 100f2dd:	mov    QWORD PTR [rbp+0x8],rsi
 100f2e1:	mov    QWORD PTR [rbp+0x10],rsi
 100f2e5:	mov    QWORD PTR [rbp+0x18],rsi
 100f2e9:	mov    QWORD PTR [rbp+0x20],rsi
 100f2ed:	lea    r8,[rip+0xffffffffffff3edc]        # 0x10031d0
 100f2f4:	lea    rdx,[rbp-0x48]
 100f2f8:	lea    rcx,[rbp+0x30]
 100f2fc:	call   0x10060d0
 100f301:	nop
 100f302:	mov    rcx,QWORD PTR [rbx+0x8]
 100f306:	test   rcx,rcx
 100f309:	je     0x100f311
 100f30b:	call   QWORD PTR [rip+0xffffffffffff1e37]        # 0x1001148
 100f311:	mov    QWORD PTR [rbx+0x8],rsi
 100f315:	mov    rdx,rdi
 100f318:	xor    ecx,ecx
 100f31a:	call   QWORD PTR [rip+0xffffffffffff1e30]        # 0x1001150
 100f320:	mov    QWORD PTR [rbx+0x8],rax
 100f324:	test   rax,rax
 100f327:	jne    0x100f392
 100f329:	lea    rax,[rsp+0x40]
 100f32e:	mov    QWORD PTR [rbp+0x80],rax
 100f335:	mov    QWORD PTR [rsp+0x40],r14
 100f33a:	mov    QWORD PTR [rsp+0x48],r15
 100f33f:	mov    DWORD PTR [rsp+0x50],0x1bc
 100f347:	mov    QWORD PTR [rsp+0x54],0x4000
 100f350:	mov    DWORD PTR [rbp-0x50],0x1000000
 100f357:	mov    QWORD PTR [rsp+0x60],rsi
 100f35c:	mov    QWORD PTR [rsp+0x68],rsi
 100f361:	mov    QWORD PTR [rsp+0x70],rsi
 100f366:	mov    QWORD PTR [rsp+0x78],rsi
 100f36b:	mov    QWORD PTR [rbp-0x80],rsi
 100f36f:	mov    QWORD PTR [rbp-0x78],rsi
 100f373:	mov    QWORD PTR [rbp-0x70],rsi
 100f377:	mov    QWORD PTR [rbp-0x68],rsi
 100f37b:	mov    QWORD PTR [rbp-0x60],rsi
 100f37f:	mov    QWORD PTR [rbp-0x58],rsi
 100f383:	lea    rdx,[rsp+0x40]
 100f388:	lea    rcx,[rbp+0x30]
 100f38c:	call   0x100c6f0
 100f391:	nop
 100f392:	cmp    DWORD PTR [rip+0xc3e7],0x0        # 0x101b780
 100f399:	je     0x100f3f9
 100f39b:	cmp    DWORD PTR [rip+0xc3fe],0x0        # 0x101b7a0
 100f3a2:	je     0x100f3f9
 100f3a4:	mov    DWORD PTR [rsp+0x30],esi
 100f3a8:	mov    rax,QWORD PTR [rbp+0x38]
 100f3ac:	mov    QWORD PTR [rsp+0x28],rax
 100f3b1:	mov    eax,DWORD PTR [rbp+0x4c]
 100f3b4:	mov    DWORD PTR [rsp+0x20],eax
 100f3b8:	mov    ebx,DWORD PTR [rbp+0x50]
 100f3bb:	mov    r9d,ebx
 100f3be:	xor    r8d,r8d
 100f3c1:	lea    rdx,[rip+0xffffffffffff5954]        # 0x1004d1c
 100f3c8:	lea    rcx,[rip+0xc3b1]        # 0x101b780
 100f3cf:	call   0x100af10
 100f3d4:	mov    r8d,DWORD PTR [rbp+0x30]
 100f3d8:	lea    rdx,[rip+0xffffffffffff5331]        # 0x1004710
 100f3df:	lea    rcx,[rip+0xc39a]        # 0x101b780
 100f3e6:	call   0x100b470
 100f3eb:	mov    edx,ebx
 100f3ed:	lea    rcx,[rip+0xc38c]        # 0x101b780
 100f3f4:	call   0x100b150
 100f3f9:	lea    r11,[rsp+0x160]
 100f401:	mov    rbx,QWORD PTR [r11+0x28]
 100f405:	mov    rsi,QWORD PTR [r11+0x30]
 100f409:	mov    rdi,QWORD PTR [r11+0x38]
 100f40d:	mov    rsp,r11
 100f410:	pop    r15
 100f412:	pop    r14
 100f414:	pop    rbp
 100f415:	ret    
 100f416:	int3   
 100f417:	int3   
 100f418:	int3   
 100f419:	int3   
 100f41a:	int3   
 100f41b:	int3   
 100f41c:	int3   
 100f41d:	int3   
 100f41e:	int3   
 100f41f:	int3   
 100f420:	mov    QWORD PTR [rsp+0x8],rcx
 100f425:	sub    rsp,0x18
 100f429:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 100f431:	lea    rax,[rip+0xffffffffffff3910]        # 0x1002d48
 100f438:	mov    QWORD PTR [rcx],rax
 100f43b:	add    rsp,0x18
 100f43f:	ret    
 100f440:	int3   
 100f441:	int3   
 100f442:	int3   
 100f443:	int3   
 100f444:	int3   
 100f445:	int3   
 100f446:	int3   
 100f447:	int3   
 100f448:	int3   
 100f449:	int3   
 100f44a:	int3   
 100f44b:	int3   
 100f44c:	int3   
 100f44d:	int3   
 100f44e:	int3   
 100f44f:	int3   
 100f450:	mov    QWORD PTR [rsp+0x8],rcx
 100f455:	push   rbx
 100f456:	sub    rsp,0x30
 100f45a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f463:	mov    rbx,rcx
 100f466:	lea    rax,[rip+0xffffffffffff38db]        # 0x1002d48
 100f46d:	mov    QWORD PTR [rcx],rax
 100f470:	test   dl,0x1
 100f473:	je     0x100f47a
 100f475:	call   0x1009d34
 100f47a:	mov    rax,rbx
 100f47d:	add    rsp,0x30
 100f481:	pop    rbx
 100f482:	ret    
 100f483:	int3   
 100f484:	int3   
 100f485:	int3   
 100f486:	int3   
 100f487:	int3   
 100f488:	int3   
 100f489:	int3   
 100f48a:	int3   
 100f48b:	int3   
 100f48c:	int3   
 100f48d:	int3   
 100f48e:	int3   
 100f48f:	int3   
 100f490:	mov    QWORD PTR [rsp+0x8],rcx
 100f495:	push   rbx
 100f496:	sub    rsp,0x30
 100f49a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f4a3:	mov    rbx,rcx
 100f4a6:	lea    rax,[rip+0xffffffffffff39e3]        # 0x1002e90
 100f4ad:	mov    QWORD PTR [rcx],rax
 100f4b0:	mov    rcx,QWORD PTR [rcx+0x8]
 100f4b4:	test   rcx,rcx
 100f4b7:	je     0x100f4bf
 100f4b9:	call   QWORD PTR [rip+0xffffffffffff1c89]        # 0x1001148
 100f4bf:	mov    QWORD PTR [rbx+0x8],0x0
 100f4c7:	lea    rax,[rip+0xffffffffffff387a]        # 0x1002d48
 100f4ce:	mov    QWORD PTR [rbx],rax
 100f4d1:	add    rsp,0x30
 100f4d5:	pop    rbx
 100f4d6:	ret    
 100f4d7:	int3   
 100f4d8:	int3   
 100f4d9:	int3   
 100f4da:	int3   
 100f4db:	int3   
 100f4dc:	int3   
 100f4dd:	int3   
 100f4de:	int3   
 100f4df:	int3   
 100f4e0:	mov    QWORD PTR [rsp+0x8],rcx
 100f4e5:	push   rdi
 100f4e6:	sub    rsp,0x30
 100f4ea:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f4f3:	mov    QWORD PTR [rsp+0x48],rbx
 100f4f8:	mov    edi,edx
 100f4fa:	mov    rbx,rcx
 100f4fd:	lea    rax,[rip+0xffffffffffff398c]        # 0x1002e90
 100f504:	mov    QWORD PTR [rcx],rax
 100f507:	mov    rcx,QWORD PTR [rcx+0x8]
 100f50b:	test   rcx,rcx
 100f50e:	je     0x100f516
 100f510:	call   QWORD PTR [rip+0xffffffffffff1c32]        # 0x1001148
 100f516:	mov    QWORD PTR [rbx+0x8],0x0
 100f51e:	lea    rax,[rip+0xffffffffffff3823]        # 0x1002d48
 100f525:	mov    QWORD PTR [rbx],rax
 100f528:	test   dil,0x1
 100f52c:	je     0x100f536
 100f52e:	mov    rcx,rbx
 100f531:	call   0x1009d34
 100f536:	mov    rax,rbx
 100f539:	mov    rbx,QWORD PTR [rsp+0x48]
 100f53e:	add    rsp,0x30
 100f542:	pop    rdi
 100f543:	ret    
 100f544:	int3   
 100f545:	int3   
 100f546:	int3   
 100f547:	int3   
 100f548:	int3   
 100f549:	int3   
 100f54a:	int3   
 100f54b:	int3   
 100f54c:	int3   
 100f54d:	int3   
 100f54e:	int3   
 100f54f:	int3   
 100f550:	mov    QWORD PTR [rsp+0x8],rcx
 100f555:	push   rbx
 100f556:	sub    rsp,0x30
 100f55a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f563:	mov    rbx,rcx
 100f566:	lea    rax,[rip+0xffffffffffff3923]        # 0x1002e90
 100f56d:	mov    QWORD PTR [rcx],rax
 100f570:	mov    rcx,QWORD PTR [rcx+0x8]
 100f574:	test   rcx,rcx
 100f577:	je     0x100f57f
 100f579:	call   QWORD PTR [rip+0xffffffffffff1bc9]        # 0x1001148
 100f57f:	mov    QWORD PTR [rbx+0x8],0x0
 100f587:	lea    rax,[rip+0xffffffffffff37ba]        # 0x1002d48
 100f58e:	mov    QWORD PTR [rbx],rax
 100f591:	add    rsp,0x30
 100f595:	pop    rbx
 100f596:	ret    
 100f597:	int3   
 100f598:	int3   
 100f599:	int3   
 100f59a:	int3   
 100f59b:	int3   
 100f59c:	int3   
 100f59d:	int3   
 100f59e:	int3   
 100f59f:	int3   
 100f5a0:	mov    QWORD PTR [rsp+0x8],rcx
 100f5a5:	push   rdi
 100f5a6:	sub    rsp,0x30
 100f5aa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f5b3:	mov    QWORD PTR [rsp+0x48],rbx
 100f5b8:	mov    edi,edx
 100f5ba:	mov    rbx,rcx
 100f5bd:	lea    rax,[rip+0xffffffffffff38cc]        # 0x1002e90
 100f5c4:	mov    QWORD PTR [rcx],rax
 100f5c7:	mov    rcx,QWORD PTR [rcx+0x8]
 100f5cb:	test   rcx,rcx
 100f5ce:	je     0x100f5d6
 100f5d0:	call   QWORD PTR [rip+0xffffffffffff1b72]        # 0x1001148
 100f5d6:	mov    QWORD PTR [rbx+0x8],0x0
 100f5de:	lea    rax,[rip+0xffffffffffff3763]        # 0x1002d48
 100f5e5:	mov    QWORD PTR [rbx],rax
 100f5e8:	test   dil,0x1
 100f5ec:	je     0x100f5f6
 100f5ee:	mov    rcx,rbx
 100f5f1:	call   0x1009d34
 100f5f6:	mov    rax,rbx
 100f5f9:	mov    rbx,QWORD PTR [rsp+0x48]
 100f5fe:	add    rsp,0x30
 100f602:	pop    rdi
 100f603:	ret    
 100f604:	int3   
 100f605:	int3   
 100f606:	int3   
 100f607:	int3   
 100f608:	int3   
 100f609:	int3   
 100f60a:	int3   
 100f60b:	int3   
 100f60c:	int3   
 100f60d:	int3   
 100f60e:	int3   
 100f60f:	int3   
 100f610:	lea    rax,[rip+0xffffffffffff3939]        # 0x1002f50
 100f617:	mov    QWORD PTR [rcx],rax
 100f61a:	ret    
 100f61b:	int3   
 100f61c:	int3   
 100f61d:	int3   
 100f61e:	int3   
 100f61f:	int3   
 100f620:	int3   
 100f621:	int3   
 100f622:	int3   
 100f623:	int3   
 100f624:	int3   
 100f625:	int3   
 100f626:	int3   
 100f627:	int3   
 100f628:	int3   
 100f629:	int3   
 100f62a:	int3   
 100f62b:	int3   
 100f62c:	int3   
 100f62d:	int3   
 100f62e:	int3   
 100f62f:	int3   
 100f630:	rex push rbx
 100f632:	sub    rsp,0x20
 100f636:	lea    rax,[rip+0xffffffffffff3913]        # 0x1002f50
 100f63d:	mov    rbx,rcx
 100f640:	mov    QWORD PTR [rcx],rax
 100f643:	test   dl,0x1
 100f646:	je     0x100f64d
 100f648:	call   0x1009d34
 100f64d:	mov    rax,rbx
 100f650:	add    rsp,0x20
 100f654:	pop    rbx
 100f655:	ret    
 100f656:	int3   
 100f657:	int3   
 100f658:	int3   
 100f659:	int3   
 100f65a:	int3   
 100f65b:	int3   
 100f65c:	int3   
 100f65d:	int3   
 100f65e:	int3   
 100f65f:	int3   
 100f660:	mov    rax,rsp
 100f663:	push   rbp
 100f664:	push   r14
 100f666:	push   r15
 100f668:	lea    rbp,[rax-0x78]
 100f66c:	sub    rsp,0x160
 100f673:	mov    QWORD PTR [rbp+0x58],0xfffffffffffffffe
 100f67b:	mov    QWORD PTR [rax+0x10],rbx
 100f67f:	mov    QWORD PTR [rax+0x18],rsi
 100f683:	mov    QWORD PTR [rax+0x20],rdi
 100f687:	mov    edi,edx
 100f689:	mov    rbx,rcx
 100f68c:	lea    rax,[rbp-0x48]
 100f690:	mov    QWORD PTR [rbp+0x80],rax
 100f697:	lea    r14,[rip+0xffffffffffff3552]        # 0x1002bf0
 100f69e:	mov    QWORD PTR [rbp-0x48],r14
 100f6a2:	lea    r15,[rip+0xffffffffffff3537]        # 0x1002be0
 100f6a9:	mov    QWORD PTR [rbp-0x40],r15
 100f6ad:	mov    DWORD PTR [rbp-0x38],0x1b5
 100f6b4:	mov    QWORD PTR [rbp-0x34],0x4000
 100f6bc:	xor    esi,esi
 100f6be:	mov    DWORD PTR [rbp+0x28],0x1000000
 100f6c5:	mov    QWORD PTR [rbp-0x28],rsi
 100f6c9:	mov    QWORD PTR [rbp-0x20],rsi
 100f6cd:	mov    QWORD PTR [rbp-0x18],rsi
 100f6d1:	mov    QWORD PTR [rbp-0x10],rsi
 100f6d5:	mov    QWORD PTR [rbp-0x8],rsi
 100f6d9:	mov    QWORD PTR [rbp+0x0],rsi
 100f6dd:	mov    QWORD PTR [rbp+0x8],rsi
 100f6e1:	mov    QWORD PTR [rbp+0x10],rsi
 100f6e5:	mov    QWORD PTR [rbp+0x18],rsi
 100f6e9:	mov    QWORD PTR [rbp+0x20],rsi
 100f6ed:	lea    r8,[rip+0xffffffffffff3adc]        # 0x10031d0
 100f6f4:	lea    rdx,[rbp-0x48]
 100f6f8:	lea    rcx,[rbp+0x30]
 100f6fc:	call   0x10060d0
 100f701:	nop
 100f702:	mov    rcx,QWORD PTR [rbx+0x8]
 100f706:	test   rcx,rcx
 100f709:	je     0x100f711
 100f70b:	call   QWORD PTR [rip+0xffffffffffff1a37]        # 0x1001148
 100f711:	mov    QWORD PTR [rbx+0x8],rsi
 100f715:	mov    rdx,rdi
 100f718:	xor    ecx,ecx
 100f71a:	call   QWORD PTR [rip+0xffffffffffff1a30]        # 0x1001150
 100f720:	mov    QWORD PTR [rbx+0x8],rax
 100f724:	test   rax,rax
 100f727:	jne    0x100f792
 100f729:	lea    rax,[rsp+0x40]
 100f72e:	mov    QWORD PTR [rbp+0x80],rax
 100f735:	mov    QWORD PTR [rsp+0x40],r14
 100f73a:	mov    QWORD PTR [rsp+0x48],r15
 100f73f:	mov    DWORD PTR [rsp+0x50],0x1bc
 100f747:	mov    QWORD PTR [rsp+0x54],0x4000
 100f750:	mov    DWORD PTR [rbp-0x50],0x1000000
 100f757:	mov    QWORD PTR [rsp+0x60],rsi
 100f75c:	mov    QWORD PTR [rsp+0x68],rsi
 100f761:	mov    QWORD PTR [rsp+0x70],rsi
 100f766:	mov    QWORD PTR [rsp+0x78],rsi
 100f76b:	mov    QWORD PTR [rbp-0x80],rsi
 100f76f:	mov    QWORD PTR [rbp-0x78],rsi
 100f773:	mov    QWORD PTR [rbp-0x70],rsi
 100f777:	mov    QWORD PTR [rbp-0x68],rsi
 100f77b:	mov    QWORD PTR [rbp-0x60],rsi
 100f77f:	mov    QWORD PTR [rbp-0x58],rsi
 100f783:	lea    rdx,[rsp+0x40]
 100f788:	lea    rcx,[rbp+0x30]
 100f78c:	call   0x100c6f0
 100f791:	nop
 100f792:	cmp    DWORD PTR [rip+0xbfe7],0x0        # 0x101b780
 100f799:	je     0x100f7f9
 100f79b:	cmp    DWORD PTR [rip+0xbffe],0x0        # 0x101b7a0
 100f7a2:	je     0x100f7f9
 100f7a4:	mov    DWORD PTR [rsp+0x30],esi
 100f7a8:	mov    rax,QWORD PTR [rbp+0x38]
 100f7ac:	mov    QWORD PTR [rsp+0x28],rax
 100f7b1:	mov    eax,DWORD PTR [rbp+0x4c]
 100f7b4:	mov    DWORD PTR [rsp+0x20],eax
 100f7b8:	mov    ebx,DWORD PTR [rbp+0x50]
 100f7bb:	mov    r9d,ebx
 100f7be:	xor    r8d,r8d
 100f7c1:	lea    rdx,[rip+0xffffffffffff5554]        # 0x1004d1c
 100f7c8:	lea    rcx,[rip+0xbfb1]        # 0x101b780
 100f7cf:	call   0x100af10
 100f7d4:	mov    r8d,DWORD PTR [rbp+0x30]
 100f7d8:	lea    rdx,[rip+0xffffffffffff4f31]        # 0x1004710
 100f7df:	lea    rcx,[rip+0xbf9a]        # 0x101b780
 100f7e6:	call   0x100b470
 100f7eb:	mov    edx,ebx
 100f7ed:	lea    rcx,[rip+0xbf8c]        # 0x101b780
 100f7f4:	call   0x100b150
 100f7f9:	lea    r11,[rsp+0x160]
 100f801:	mov    rbx,QWORD PTR [r11+0x28]
 100f805:	mov    rsi,QWORD PTR [r11+0x30]
 100f809:	mov    rdi,QWORD PTR [r11+0x38]
 100f80d:	mov    rsp,r11
 100f810:	pop    r15
 100f812:	pop    r14
 100f814:	pop    rbp
 100f815:	ret    
 100f816:	int3   
 100f817:	int3   
 100f818:	int3   
 100f819:	int3   
 100f81a:	int3   
 100f81b:	int3   
 100f81c:	int3   
 100f81d:	int3   
 100f81e:	int3   
 100f81f:	int3   
 100f820:	mov    QWORD PTR [rsp+0x8],rcx
 100f825:	sub    rsp,0x18
 100f829:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 100f831:	lea    rax,[rip+0xffffffffffff3718]        # 0x1002f50
 100f838:	mov    QWORD PTR [rcx],rax
 100f83b:	add    rsp,0x18
 100f83f:	ret    
 100f840:	int3   
 100f841:	int3   
 100f842:	int3   
 100f843:	int3   
 100f844:	int3   
 100f845:	int3   
 100f846:	int3   
 100f847:	int3   
 100f848:	int3   
 100f849:	int3   
 100f84a:	int3   
 100f84b:	int3   
 100f84c:	int3   
 100f84d:	int3   
 100f84e:	int3   
 100f84f:	int3   
 100f850:	mov    QWORD PTR [rsp+0x8],rcx
 100f855:	push   rbx
 100f856:	sub    rsp,0x30
 100f85a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f863:	mov    rbx,rcx
 100f866:	lea    rax,[rip+0xffffffffffff36e3]        # 0x1002f50
 100f86d:	mov    QWORD PTR [rcx],rax
 100f870:	test   dl,0x1
 100f873:	je     0x100f87a
 100f875:	call   0x1009d34
 100f87a:	mov    rax,rbx
 100f87d:	add    rsp,0x30
 100f881:	pop    rbx
 100f882:	ret    
 100f883:	int3   
 100f884:	int3   
 100f885:	int3   
 100f886:	int3   
 100f887:	int3   
 100f888:	int3   
 100f889:	int3   
 100f88a:	int3   
 100f88b:	int3   
 100f88c:	int3   
 100f88d:	int3   
 100f88e:	int3   
 100f88f:	int3   
 100f890:	mov    QWORD PTR [rsp+0x8],rcx
 100f895:	push   rbx
 100f896:	sub    rsp,0x30
 100f89a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f8a3:	mov    rbx,rcx
 100f8a6:	lea    rax,[rip+0xffffffffffff36b3]        # 0x1002f60
 100f8ad:	mov    QWORD PTR [rcx],rax
 100f8b0:	mov    rcx,QWORD PTR [rcx+0x8]
 100f8b4:	test   rcx,rcx
 100f8b7:	je     0x100f8bf
 100f8b9:	call   QWORD PTR [rip+0xffffffffffff1889]        # 0x1001148
 100f8bf:	mov    QWORD PTR [rbx+0x8],0x0
 100f8c7:	lea    rax,[rip+0xffffffffffff3682]        # 0x1002f50
 100f8ce:	mov    QWORD PTR [rbx],rax
 100f8d1:	add    rsp,0x30
 100f8d5:	pop    rbx
 100f8d6:	ret    
 100f8d7:	int3   
 100f8d8:	int3   
 100f8d9:	int3   
 100f8da:	int3   
 100f8db:	int3   
 100f8dc:	int3   
 100f8dd:	int3   
 100f8de:	int3   
 100f8df:	int3   
 100f8e0:	mov    QWORD PTR [rsp+0x8],rcx
 100f8e5:	push   rdi
 100f8e6:	sub    rsp,0x30
 100f8ea:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f8f3:	mov    QWORD PTR [rsp+0x48],rbx
 100f8f8:	mov    edi,edx
 100f8fa:	mov    rbx,rcx
 100f8fd:	lea    rax,[rip+0xffffffffffff365c]        # 0x1002f60
 100f904:	mov    QWORD PTR [rcx],rax
 100f907:	mov    rcx,QWORD PTR [rcx+0x8]
 100f90b:	test   rcx,rcx
 100f90e:	je     0x100f916
 100f910:	call   QWORD PTR [rip+0xffffffffffff1832]        # 0x1001148
 100f916:	mov    QWORD PTR [rbx+0x8],0x0
 100f91e:	lea    rax,[rip+0xffffffffffff362b]        # 0x1002f50
 100f925:	mov    QWORD PTR [rbx],rax
 100f928:	test   dil,0x1
 100f92c:	je     0x100f936
 100f92e:	mov    rcx,rbx
 100f931:	call   0x1009d34
 100f936:	mov    rax,rbx
 100f939:	mov    rbx,QWORD PTR [rsp+0x48]
 100f93e:	add    rsp,0x30
 100f942:	pop    rdi
 100f943:	ret    
 100f944:	int3   
 100f945:	int3   
 100f946:	int3   
 100f947:	int3   
 100f948:	int3   
 100f949:	int3   
 100f94a:	int3   
 100f94b:	int3   
 100f94c:	int3   
 100f94d:	int3   
 100f94e:	int3   
 100f94f:	int3   
 100f950:	mov    QWORD PTR [rsp+0x8],rcx
 100f955:	push   rbx
 100f956:	sub    rsp,0x30
 100f95a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f963:	mov    rbx,rcx
 100f966:	lea    rax,[rip+0xffffffffffff35f3]        # 0x1002f60
 100f96d:	mov    QWORD PTR [rcx],rax
 100f970:	mov    rcx,QWORD PTR [rcx+0x8]
 100f974:	test   rcx,rcx
 100f977:	je     0x100f97f
 100f979:	call   QWORD PTR [rip+0xffffffffffff17c9]        # 0x1001148
 100f97f:	mov    QWORD PTR [rbx+0x8],0x0
 100f987:	lea    rax,[rip+0xffffffffffff35c2]        # 0x1002f50
 100f98e:	mov    QWORD PTR [rbx],rax
 100f991:	add    rsp,0x30
 100f995:	pop    rbx
 100f996:	ret    
 100f997:	int3   
 100f998:	int3   
 100f999:	int3   
 100f99a:	int3   
 100f99b:	int3   
 100f99c:	int3   
 100f99d:	int3   
 100f99e:	int3   
 100f99f:	int3   
 100f9a0:	mov    QWORD PTR [rsp+0x8],rcx
 100f9a5:	push   rdi
 100f9a6:	sub    rsp,0x30
 100f9aa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f9b3:	mov    QWORD PTR [rsp+0x48],rbx
 100f9b8:	mov    edi,edx
 100f9ba:	mov    rbx,rcx
 100f9bd:	lea    rax,[rip+0xffffffffffff359c]        # 0x1002f60
 100f9c4:	mov    QWORD PTR [rcx],rax
 100f9c7:	mov    rcx,QWORD PTR [rcx+0x8]
 100f9cb:	test   rcx,rcx
 100f9ce:	je     0x100f9d6
 100f9d0:	call   QWORD PTR [rip+0xffffffffffff1772]        # 0x1001148
 100f9d6:	mov    QWORD PTR [rbx+0x8],0x0
 100f9de:	lea    rax,[rip+0xffffffffffff356b]        # 0x1002f50
 100f9e5:	mov    QWORD PTR [rbx],rax
 100f9e8:	test   dil,0x1
 100f9ec:	je     0x100f9f6
 100f9ee:	mov    rcx,rbx
 100f9f1:	call   0x1009d34
 100f9f6:	mov    rax,rbx
 100f9f9:	mov    rbx,QWORD PTR [rsp+0x48]
 100f9fe:	add    rsp,0x30
 100fa02:	pop    rdi
 100fa03:	ret    
 100fa04:	int3   
 100fa05:	int3   
 100fa06:	int3   
 100fa07:	int3   
 100fa08:	int3   
 100fa09:	int3   
 100fa0a:	int3   
 100fa0b:	int3   
 100fa0c:	int3   
 100fa0d:	int3   
 100fa0e:	int3   
 100fa0f:	int3   
 100fa10:	rex push rbx
 100fa12:	sub    rsp,0x20
 100fa16:	mov    rbx,rcx
 100fa19:	mov    rcx,QWORD PTR [rcx]
 100fa1c:	call   QWORD PTR [rip+0xffffffffffff1a0e]        # 0x1001430
 100fa22:	mov    QWORD PTR [rbx],0x0
 100fa29:	add    rsp,0x20
 100fa2d:	pop    rbx
 100fa2e:	ret    
 100fa2f:	int3   
 100fa30:	int3   
 100fa31:	int3   
 100fa32:	int3   
 100fa33:	int3   
 100fa34:	int3   
 100fa35:	int3   
 100fa36:	int3   
 100fa37:	int3   
 100fa38:	int3   
 100fa39:	int3   
 100fa3a:	int3   
 100fa3b:	int3   
 100fa3c:	int3   
 100fa3d:	int3   
 100fa3e:	int3   
 100fa3f:	int3   
 100fa40:	mov    QWORD PTR [rsp+0x8],rcx
 100fa45:	sub    rsp,0x18
 100fa49:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 100fa51:	xor    eax,eax
 100fa53:	mov    QWORD PTR [rcx+0x10],rax
 100fa57:	mov    QWORD PTR [rcx+0x8],rax
 100fa5b:	mov    DWORD PTR [rcx+0x4],r8d
 100fa5f:	mov    DWORD PTR [rcx],edx
 100fa61:	mov    rax,rcx
 100fa64:	add    rsp,0x18
 100fa68:	ret    
 100fa69:	int3   
 100fa6a:	int3   
 100fa6b:	int3   
 100fa6c:	int3   
 100fa6d:	int3   
 100fa6e:	int3   
 100fa6f:	int3   
 100fa70:	mov    QWORD PTR [rsp+0x8],rcx
 100fa75:	push   rbx
 100fa76:	sub    rsp,0x30
 100fa7a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fa83:	mov    rbx,rcx
 100fa86:	call   0x10104d0
 100fa8b:	nop
 100fa8c:	mov    rcx,QWORD PTR [rbx+0x10]
 100fa90:	call   QWORD PTR [rip+0xffffffffffff199a]        # 0x1001430
 100fa96:	mov    QWORD PTR [rbx+0x10],0x0
 100fa9e:	add    rsp,0x30
 100faa2:	pop    rbx
 100faa3:	ret    
 100faa4:	int3   
 100faa5:	int3   
 100faa6:	int3   
 100faa7:	int3   
 100faa8:	int3   
 100faa9:	int3   
 100faaa:	int3   
 100faab:	int3   
 100faac:	int3   
 100faad:	int3   
 100faae:	int3   
 100faaf:	int3   
 100fab0:	mov    QWORD PTR [rsp+0x18],r8
 100fab5:	mov    QWORD PTR [rsp+0x20],r9
 100faba:	push   rbp
 100fabb:	push   rbx
 100fabc:	push   rsi
 100fabd:	push   rdi
 100fabe:	push   r12
 100fac0:	push   r14
 100fac2:	push   r15
 100fac4:	lea    rbp,[rsp-0x290]
 100facc:	sub    rsp,0x390
 100fad3:	mov    QWORD PTR [rbp+0x68],0xfffffffffffffffe
 100fadb:	mov    rax,QWORD PTR [rip+0xb64e]        # 0x101b130
 100fae2:	xor    rax,rsp
 100fae5:	mov    QWORD PTR [rbp+0x280],rax
 100faec:	mov    rsi,rdx
 100faef:	mov    rdi,rcx
 100faf2:	lea    rax,[rbp-0x10]
 100faf6:	mov    QWORD PTR [rsp+0x40],rax
 100fafb:	lea    r15,[rip+0xffffffffffff384e]        # 0x1003350
 100fb02:	mov    QWORD PTR [rbp-0x10],r15
 100fb06:	lea    r12,[rip+0xffffffffffff3833]        # 0x1003340
 100fb0d:	mov    QWORD PTR [rbp-0x8],r12
 100fb11:	mov    DWORD PTR [rbp+0x0],0x86
 100fb18:	mov    QWORD PTR [rbp+0x4],0x4000
 100fb20:	xor    r14d,r14d
 100fb23:	mov    DWORD PTR [rbp+0x60],0x1000000
 100fb2a:	mov    QWORD PTR [rbp+0x10],r14
 100fb2e:	mov    QWORD PTR [rbp+0x18],r14
 100fb32:	mov    QWORD PTR [rbp+0x20],r14
 100fb36:	mov    QWORD PTR [rbp+0x28],r14
 100fb3a:	mov    QWORD PTR [rbp+0x30],r14
 100fb3e:	mov    QWORD PTR [rbp+0x38],r14
 100fb42:	mov    QWORD PTR [rbp+0x40],r14
 100fb46:	mov    QWORD PTR [rbp+0x48],r14
 100fb4a:	mov    QWORD PTR [rbp+0x50],r14
 100fb4e:	mov    QWORD PTR [rbp+0x58],r14
 100fb52:	lea    r8,[rip+0xffffffffffff38c7]        # 0x1003420
 100fb59:	lea    rdx,[rbp-0x10]
 100fb5d:	lea    rcx,[rbp-0x38]
 100fb61:	call   0x10060d0
 100fb66:	nop
 100fb67:	lea    r9,[rbp+0x2e8]
 100fb6e:	mov    ebx,r14d
 100fb71:	mov    r8,QWORD PTR [rbp+0x2e0]
 100fb78:	mov    edx,0x103
 100fb7d:	lea    rcx,[rbp+0x70]
 100fb81:	call   QWORD PTR [rip+0xffffffffffff1721]        # 0x10012a8
 100fb87:	test   eax,eax
 100fb89:	js     0x100fb99
 100fb8b:	cdqe   
 100fb8d:	cmp    rax,0x103
 100fb93:	ja     0x100fb99
 100fb95:	jne    0x100fba6
 100fb97:	jmp    0x100fb9e
 100fb99:	mov    ebx,0x8007007a
 100fb9e:	mov    WORD PTR [rbp+0x276],r14w
 100fba6:	mov    DWORD PTR [rbp-0x38],ebx
 100fba9:	test   ebx,ebx
 100fbab:	jns    0x100fc1d
 100fbad:	lea    rax,[rsp+0x48]
 100fbb2:	mov    QWORD PTR [rsp+0x40],rax
 100fbb7:	mov    QWORD PTR [rsp+0x48],r15
 100fbbc:	mov    QWORD PTR [rsp+0x50],r12
 100fbc1:	mov    DWORD PTR [rsp+0x58],0x92
 100fbc9:	mov    QWORD PTR [rsp+0x5c],0x4000
 100fbd2:	mov    DWORD PTR [rbp-0x48],0x1000000
 100fbd9:	mov    QWORD PTR [rsp+0x68],r14
 100fbde:	mov    QWORD PTR [rsp+0x70],r14
 100fbe3:	mov    QWORD PTR [rsp+0x78],r14
 100fbe8:	mov    QWORD PTR [rbp-0x80],r14
 100fbec:	mov    QWORD PTR [rbp-0x78],r14
 100fbf0:	mov    QWORD PTR [rbp-0x70],r14
 100fbf4:	mov    QWORD PTR [rbp-0x68],r14
 100fbf8:	mov    QWORD PTR [rbp-0x60],r14
 100fbfc:	mov    QWORD PTR [rbp-0x58],r14
 100fc00:	mov    QWORD PTR [rbp-0x50],r14
 100fc04:	lea    r9,[rip+0xffffffffffff37ed]        # 0x10033f8
 100fc0b:	mov    r8d,DWORD PTR [rbp-0x38]
 100fc0f:	lea    rdx,[rsp+0x48]
 100fc14:	lea    rcx,[rbp-0x38]
 100fc18:	call   0x100c1a0
 100fc1d:	mov    QWORD PTR [rbp-0x40],r14
 100fc21:	lea    rax,[rbp-0x40]
 100fc25:	mov    QWORD PTR [rsp+0x20],rax
 100fc2a:	mov    r9d,DWORD PTR [rdi]
 100fc2d:	xor    r8d,r8d
 100fc30:	lea    rdx,[rbp+0x70]
 100fc34:	mov    rcx,rsi
 100fc37:	call   QWORD PTR [rip+0xffffffffffff1463]        # 0x10010a0
 100fc3d:	cmp    eax,0x2
 100fc40:	jne    0x100fcb0
 100fc42:	cmp    DWORD PTR [rip+0xbb37],0x0        # 0x101b780
 100fc49:	je     0x100fca9
 100fc4b:	cmp    DWORD PTR [rip+0xbb4e],0x0        # 0x101b7a0
 100fc52:	je     0x100fca9
 100fc54:	mov    DWORD PTR [rsp+0x30],r14d
 100fc59:	mov    rax,QWORD PTR [rbp-0x30]
 100fc5d:	mov    QWORD PTR [rsp+0x28],rax
 100fc62:	mov    eax,DWORD PTR [rbp-0x1c]
 100fc65:	mov    DWORD PTR [rsp+0x20],eax
 100fc69:	mov    r9d,DWORD PTR [rbp-0x18]
 100fc6d:	xor    r8d,r8d
 100fc70:	lea    rdx,[rip+0xffffffffffff50a5]        # 0x1004d1c
 100fc77:	lea    rcx,[rip+0xbb02]        # 0x101b780
 100fc7e:	call   0x100af10
 100fc83:	mov    r8d,DWORD PTR [rbp-0x38]
 100fc87:	lea    rdx,[rip+0xffffffffffff4a82]        # 0x1004710
 100fc8e:	lea    rcx,[rip+0xbaeb]        # 0x101b780
 100fc95:	call   0x100b470
 100fc9a:	mov    edx,DWORD PTR [rbp-0x18]
 100fc9d:	lea    rcx,[rip+0xbadc]        # 0x101b780
 100fca4:	call   0x100b150
 100fca9:	xor    al,al
 100fcab:	jmp    0x100fe87
 100fcb0:	test   eax,eax
 100fcb2:	je     0x100fd3f
 100fcb8:	lea    rcx,[rsp+0x48]
 100fcbd:	mov    QWORD PTR [rsp+0x40],rcx
 100fcc2:	mov    QWORD PTR [rsp+0x48],r15
 100fcc7:	mov    QWORD PTR [rsp+0x50],r12
 100fccc:	mov    DWORD PTR [rsp+0x58],0xa1
 100fcd4:	mov    QWORD PTR [rsp+0x5c],0x4000
 100fcdd:	mov    DWORD PTR [rbp-0x48],0x1000000
 100fce4:	mov    QWORD PTR [rsp+0x68],r14
 100fce9:	mov    QWORD PTR [rsp+0x70],r14
 100fcee:	mov    QWORD PTR [rsp+0x78],r14
 100fcf3:	mov    QWORD PTR [rbp-0x80],r14
 100fcf7:	mov    QWORD PTR [rbp-0x78],r14
 100fcfb:	mov    QWORD PTR [rbp-0x70],r14
 100fcff:	mov    QWORD PTR [rbp-0x68],r14
 100fd03:	mov    QWORD PTR [rbp-0x60],r14
 100fd07:	mov    QWORD PTR [rbp-0x58],r14
 100fd0b:	mov    QWORD PTR [rbp-0x50],r14
 100fd0f:	jle    0x100fd19
 100fd11:	movzx  eax,ax
 100fd14:	or     eax,0x80070000
 100fd19:	lea    rcx,[rbp+0x70]
 100fd1d:	mov    QWORD PTR [rsp+0x28],rcx
 100fd22:	mov    QWORD PTR [rsp+0x20],rsi
 100fd27:	lea    r9,[rip+0xffffffffffff3722]        # 0x1003450
 100fd2e:	mov    r8d,eax
 100fd31:	lea    rdx,[rsp+0x48]
 100fd36:	lea    rcx,[rbp-0x38]
 100fd3a:	call   0x100c1a0
 100fd3f:	mov    rcx,QWORD PTR [rdi+0x10]
 100fd43:	call   QWORD PTR [rip+0xffffffffffff16e7]        # 0x1001430
 100fd49:	mov    QWORD PTR [rdi+0x10],r14
 100fd4d:	lea    rax,[rbp+0x70]
 100fd51:	or     rbx,0xffffffffffffffff
 100fd55:	inc    rbx
 100fd58:	cmp    WORD PTR [rax+rbx*2],0x0
 100fd5d:	jne    0x100fd55
 100fd5f:	inc    rbx
 100fd62:	lea    rcx,[rbx+rbx*1]
 100fd66:	call   QWORD PTR [rip+0xffffffffffff16bc]        # 0x1001428
 100fd6c:	mov    QWORD PTR [rdi+0x10],rax
 100fd70:	test   rax,rax
 100fd73:	je     0x100fe0a
 100fd79:	lea    r8,[rbp+0x70]
 100fd7d:	mov    rdx,rbx
 100fd80:	mov    rcx,rax
 100fd83:	call   0x1006a30
 100fd88:	cmp    QWORD PTR [rdi+0x10],0x0
 100fd8d:	je     0x100fe0a
 100fd8f:	mov    rcx,rdi
 100fd92:	call   0x10104d0
 100fd97:	mov    r11,QWORD PTR [rbp-0x40]
 100fd9b:	mov    QWORD PTR [rdi+0x8],r11
 100fd9f:	cmp    DWORD PTR [rip+0xb9da],0x0        # 0x101b780
 100fda6:	je     0x100fe06
 100fda8:	cmp    DWORD PTR [rip+0xb9f1],0x0        # 0x101b7a0
 100fdaf:	je     0x100fe06
 100fdb1:	mov    DWORD PTR [rsp+0x30],r14d
 100fdb6:	mov    rax,QWORD PTR [rbp-0x30]
 100fdba:	mov    QWORD PTR [rsp+0x28],rax
 100fdbf:	mov    eax,DWORD PTR [rbp-0x1c]
 100fdc2:	mov    DWORD PTR [rsp+0x20],eax
 100fdc6:	mov    r9d,DWORD PTR [rbp-0x18]
 100fdca:	xor    r8d,r8d
 100fdcd:	lea    rdx,[rip+0xffffffffffff4f48]        # 0x1004d1c
 100fdd4:	lea    rcx,[rip+0xb9a5]        # 0x101b780
 100fddb:	call   0x100af10
 100fde0:	mov    r8d,DWORD PTR [rbp-0x38]
 100fde4:	lea    rdx,[rip+0xffffffffffff4925]        # 0x1004710
 100fdeb:	lea    rcx,[rip+0xb98e]        # 0x101b780
 100fdf2:	call   0x100b470
 100fdf7:	mov    edx,DWORD PTR [rbp-0x18]
 100fdfa:	lea    rcx,[rip+0xb97f]        # 0x101b780
 100fe01:	call   0x100b150
 100fe06:	mov    al,0x1
 100fe08:	jmp    0x100fe87
 100fe0a:	mov    rcx,QWORD PTR [rbp-0x40]
 100fe0e:	call   QWORD PTR [rip+0xffffffffffff1294]        # 0x10010a8
 100fe14:	lea    r11,[rsp+0x48]
 100fe19:	mov    QWORD PTR [rsp+0x40],r11
 100fe1e:	mov    QWORD PTR [rsp+0x48],r15
 100fe23:	mov    QWORD PTR [rsp+0x50],r12
 100fe28:	mov    DWORD PTR [rsp+0x58],0xa6
 100fe30:	mov    QWORD PTR [rsp+0x5c],0x4000
 100fe39:	mov    DWORD PTR [rbp-0x48],0x1000000
 100fe40:	mov    QWORD PTR [rsp+0x68],r14
 100fe45:	mov    QWORD PTR [rsp+0x70],r14
 100fe4a:	mov    QWORD PTR [rsp+0x78],r14
 100fe4f:	mov    QWORD PTR [rbp-0x80],r14
 100fe53:	mov    QWORD PTR [rbp-0x78],r14
 100fe57:	mov    QWORD PTR [rbp-0x70],r14
 100fe5b:	mov    QWORD PTR [rbp-0x68],r14
 100fe5f:	mov    QWORD PTR [rbp-0x60],r14
 100fe63:	mov    QWORD PTR [rbp-0x58],r14
 100fe67:	mov    QWORD PTR [rbp-0x50],r14
 100fe6b:	lea    r9,[rip+0xffffffffffff2d3e]        # 0x1002bb0
 100fe72:	mov    r8d,0x8007000e
 100fe78:	lea    rdx,[rsp+0x48]
 100fe7d:	lea    rcx,[rbp-0x38]
 100fe81:	call   0x1006e50
 100fe86:	nop
 100fe87:	mov    rcx,QWORD PTR [rbp+0x280]
 100fe8e:	xor    rcx,rsp
 100fe91:	call   0x1009d50
 100fe96:	add    rsp,0x390
 100fe9d:	pop    r15
 100fe9f:	pop    r14
 100fea1:	pop    r12
 100fea3:	pop    rdi
 100fea4:	pop    rsi
 100fea5:	pop    rbx
 100fea6:	pop    rbp
 100fea7:	ret    
 100fea8:	int3   
 100fea9:	int3   
 100feaa:	int3   
 100feab:	int3   
 100feac:	int3   
 100fead:	int3   
 100feae:	int3   
 100feaf:	int3   
 100feb0:	rex push rbp
 100feb2:	push   rsi
 100feb3:	push   rdi
 100feb4:	push   r12
 100feb6:	push   r13
 100feb8:	push   r14
 100feba:	push   r15
 100febc:	lea    rbp,[rsp-0x90]
 100fec4:	sub    rsp,0x190
 100fecb:	mov    QWORD PTR [rbp+0x80],0xfffffffffffffffe
 100fed6:	mov    QWORD PTR [rsp+0x1d8],rbx
 100fede:	movzx  esi,r9b
 100fee2:	mov    r14,r8
 100fee5:	mov    rdi,rdx
 100fee8:	mov    rbx,rcx
 100feeb:	lea    rax,[rbp+0x8]
 100feef:	mov    QWORD PTR [rbp-0x30],rax
 100fef3:	lea    r12,[rip+0xffffffffffff3456]        # 0x1003350
 100fefa:	mov    QWORD PTR [rbp+0x8],r12
 100fefe:	lea    r13,[rip+0xffffffffffff343b]        # 0x1003340
 100ff05:	mov    QWORD PTR [rbp+0x10],r13
 100ff09:	mov    DWORD PTR [rbp+0x18],0x202
 100ff10:	mov    QWORD PTR [rbp+0x1c],0x4000
 100ff18:	xor    r15d,r15d
 100ff1b:	mov    DWORD PTR [rbp+0x78],0x1000000
 100ff22:	mov    QWORD PTR [rbp+0x28],r15
 100ff26:	mov    QWORD PTR [rbp+0x30],r15
 100ff2a:	mov    QWORD PTR [rbp+0x38],r15
 100ff2e:	mov    QWORD PTR [rbp+0x40],r15
 100ff32:	mov    QWORD PTR [rbp+0x48],r15
 100ff36:	mov    QWORD PTR [rbp+0x50],r15
 100ff3a:	mov    QWORD PTR [rbp+0x58],r15
 100ff3e:	mov    QWORD PTR [rbp+0x60],r15
 100ff42:	mov    QWORD PTR [rbp+0x68],r15
 100ff46:	mov    QWORD PTR [rbp+0x70],r15
 100ff4a:	lea    r8,[rip+0xffffffffffff365f]        # 0x10035b0
 100ff51:	lea    rdx,[rbp+0x8]
 100ff55:	lea    rcx,[rbp-0x20]
 100ff59:	call   0x10060d0
 100ff5e:	nop
 100ff5f:	mov    DWORD PTR [r14],r15d
 100ff62:	mov    DWORD PTR [rbp+0xd0],r15d
 100ff69:	mov    DWORD PTR [rbp+0xe0],r15d
 100ff70:	lea    rax,[rbp+0xe0]
 100ff77:	mov    QWORD PTR [rsp+0x28],rax
 100ff7c:	mov    QWORD PTR [rsp+0x20],r15
 100ff81:	lea    r9,[rbp+0xd0]
 100ff88:	xor    r8d,r8d
 100ff8b:	mov    rdx,rdi
 100ff8e:	mov    rcx,QWORD PTR [rbx+0x8]
 100ff92:	call   QWORD PTR [rip+0xffffffffffff1100]        # 0x1001098
 100ff98:	mov    r8d,eax
 100ff9b:	cmp    eax,0x2
 100ff9e:	jne    0x101018b
 100ffa4:	test   sil,sil
 100ffa7:	je     0x10100ae
 100ffad:	lea    rax,[rsp+0x50]
 100ffb2:	mov    QWORD PTR [rbp-0x30],rax
 100ffb6:	mov    QWORD PTR [rsp+0x50],r12
 100ffbb:	mov    QWORD PTR [rsp+0x58],r13
 100ffc0:	mov    DWORD PTR [rsp+0x60],0x218
 100ffc8:	mov    QWORD PTR [rsp+0x64],0x4000
 100ffd1:	mov    DWORD PTR [rbp-0x40],0x1000000
 100ffd8:	mov    QWORD PTR [rsp+0x70],r15
 100ffdd:	mov    QWORD PTR [rsp+0x78],r15
 100ffe2:	mov    QWORD PTR [rbp-0x80],r15
 100ffe6:	mov    QWORD PTR [rbp-0x78],r15
 100ffea:	mov    QWORD PTR [rbp-0x70],r15
 100ffee:	mov    QWORD PTR [rbp-0x68],r15
 100fff2:	mov    QWORD PTR [rbp-0x60],r15
 100fff6:	mov    QWORD PTR [rbp-0x58],r15
 100fffa:	mov    QWORD PTR [rbp-0x50],r15
 100fffe:	mov    QWORD PTR [rbp-0x48],r15
 1010002:	mov    eax,DWORD PTR [rbp+0xe0]
 1010008:	mov    DWORD PTR [rsp+0x38],eax
 101000c:	mov    eax,DWORD PTR [rbp+0xd0]
 1010012:	mov    DWORD PTR [rsp+0x30],eax
 1010016:	mov    QWORD PTR [rsp+0x28],rdi
 101001b:	mov    rax,QWORD PTR [rbx+0x10]
 101001f:	mov    QWORD PTR [rsp+0x20],rax
 1010024:	mov    r9,QWORD PTR [rbx+0x8]
 1010028:	lea    r8,[rip+0xffffffffffff3461]        # 0x1003490
 101002f:	lea    rdx,[rsp+0x50]
 1010034:	lea    rcx,[rbp-0x20]
 1010038:	call   0x100c360
 101003d:	lea    r11,[rsp+0x50]
 1010042:	mov    QWORD PTR [rbp-0x30],r11
 1010046:	mov    QWORD PTR [rsp+0x50],r12
 101004b:	mov    QWORD PTR [rsp+0x58],r13
 1010050:	mov    DWORD PTR [rsp+0x60],0x21b
 1010058:	mov    QWORD PTR [rsp+0x64],0x4000
 1010061:	mov    DWORD PTR [rbp-0x40],0x1000000
 1010068:	mov    QWORD PTR [rsp+0x70],r15
 101006d:	mov    QWORD PTR [rsp+0x78],r15
 1010072:	mov    QWORD PTR [rbp-0x80],r15
 1010076:	mov    QWORD PTR [rbp-0x78],r15
 101007a:	mov    QWORD PTR [rbp-0x70],r15
 101007e:	mov    QWORD PTR [rbp-0x68],r15
 1010082:	mov    QWORD PTR [rbp-0x60],r15
 1010086:	mov    QWORD PTR [rbp-0x58],r15
 101008a:	mov    QWORD PTR [rbp-0x50],r15
 101008e:	mov    QWORD PTR [rbp-0x48],r15
 1010092:	lea    r9,[rip+0xffffffffffff3487]        # 0x1003520
 1010099:	mov    r8d,0x80070057
 101009f:	lea    rdx,[rsp+0x50]
 10100a4:	lea    rcx,[rbp-0x20]
 10100a8:	call   0x1006e50
 10100ad:	int3   
 10100ae:	cmp    DWORD PTR [rip+0xb6cb],0x0        # 0x101b780
 10100b5:	je     0x101011d
 10100b7:	cmp    DWORD PTR [rip+0xb6e2],0x0        # 0x101b7a0
 10100be:	je     0x101011d
 10100c0:	mov    DWORD PTR [rsp+0x30],r15d
 10100c5:	mov    rax,QWORD PTR [rbp-0x18]
 10100c9:	mov    QWORD PTR [rsp+0x28],rax
 10100ce:	mov    eax,DWORD PTR [rbp-0x4]
 10100d1:	mov    DWORD PTR [rsp+0x20],eax
 10100d5:	mov    r9d,DWORD PTR [rbp+0x0]
 10100d9:	xor    r8d,r8d
 10100dc:	lea    rdx,[rip+0xffffffffffff4c39]        # 0x1004d1c
 10100e3:	lea    rcx,[rip+0xb696]        # 0x101b780
 10100ea:	call   0x100af10
 10100ef:	lea    r9,[rip+0xffffffffffff320a]        # 0x1003300
 10100f6:	mov    r8,QWORD PTR [rbp-0x18]
 10100fa:	lea    rdx,[rip+0xffffffffffff320f]        # 0x1003310
 1010101:	lea    rcx,[rip+0xb678]        # 0x101b780
 1010108:	call   0x100b220
 101010d:	mov    edx,DWORD PTR [rbp+0x0]
 1010110:	lea    rcx,[rip+0xb669]        # 0x101b780
 1010117:	call   0x100b150
 101011c:	nop
 101011d:	cmp    DWORD PTR [rip+0xb65c],0x0        # 0x101b780
 1010124:	je     0x1010184
 1010126:	cmp    DWORD PTR [rip+0xb673],0x0        # 0x101b7a0
 101012d:	je     0x1010184
 101012f:	mov    DWORD PTR [rsp+0x30],r15d
 1010134:	mov    rax,QWORD PTR [rbp-0x18]
 1010138:	mov    QWORD PTR [rsp+0x28],rax
 101013d:	mov    eax,DWORD PTR [rbp-0x4]
 1010140:	mov    DWORD PTR [rsp+0x20],eax
 1010144:	mov    r9d,DWORD PTR [rbp+0x0]
 1010148:	xor    r8d,r8d
 101014b:	lea    rdx,[rip+0xffffffffffff4bca]        # 0x1004d1c
 1010152:	lea    rcx,[rip+0xb627]        # 0x101b780
 1010159:	call   0x100af10
 101015e:	mov    r8d,DWORD PTR [rbp-0x20]
 1010162:	lea    rdx,[rip+0xffffffffffff45a7]        # 0x1004710
 1010169:	lea    rcx,[rip+0xb610]        # 0x101b780
 1010170:	call   0x100b470
 1010175:	mov    edx,DWORD PTR [rbp+0x0]
 1010178:	lea    rcx,[rip+0xb601]        # 0x101b780
 101017f:	call   0x100b150
 1010184:	xor    al,al
 1010186:	jmp    0x10104a1
 101018b:	test   eax,eax
 101018d:	je     0x1010243
 1010193:	cmp    eax,0xea
 1010198:	je     0x1010243
 101019e:	lea    rax,[rsp+0x50]
 10101a3:	mov    QWORD PTR [rbp-0x30],rax
 10101a7:	mov    QWORD PTR [rsp+0x50],r12
 10101ac:	mov    QWORD PTR [rsp+0x58],r13
 10101b1:	mov    DWORD PTR [rsp+0x60],0x221
 10101b9:	mov    QWORD PTR [rsp+0x64],0x4000
 10101c2:	mov    DWORD PTR [rbp-0x40],0x1000000
 10101c9:	mov    QWORD PTR [rsp+0x70],r15
 10101ce:	mov    QWORD PTR [rsp+0x78],r15
 10101d3:	mov    QWORD PTR [rbp-0x80],r15
 10101d7:	mov    QWORD PTR [rbp-0x78],r15
 10101db:	mov    QWORD PTR [rbp-0x70],r15
 10101df:	mov    QWORD PTR [rbp-0x68],r15
 10101e3:	mov    QWORD PTR [rbp-0x60],r15
 10101e7:	mov    QWORD PTR [rbp-0x58],r15
 10101eb:	mov    QWORD PTR [rbp-0x50],r15
 10101ef:	mov    QWORD PTR [rbp-0x48],r15
 10101f3:	test   r8d,r8d
 10101f6:	jle    0x1010203
 10101f8:	movzx  r8d,r8w
 10101fc:	or     r8d,0x80070000
 1010203:	mov    eax,DWORD PTR [rbp+0xe0]
 1010209:	mov    DWORD PTR [rsp+0x40],eax
 101020d:	mov    eax,DWORD PTR [rbp+0xd0]
 1010213:	mov    DWORD PTR [rsp+0x38],eax
 1010217:	mov    QWORD PTR [rsp+0x30],rdi
 101021c:	mov    rax,QWORD PTR [rbx+0x10]
 1010220:	mov    QWORD PTR [rsp+0x28],rax
 1010225:	mov    rax,QWORD PTR [rbx+0x8]
 1010229:	mov    QWORD PTR [rsp+0x20],rax
 101022e:	lea    r9,[rip+0xffffffffffff331b]        # 0x1003550
 1010235:	lea    rdx,[rsp+0x50]
 101023a:	lea    rcx,[rbp-0x20]
 101023e:	call   0x100c1a0
 1010243:	cmp    DWORD PTR [rbp+0xd0],0x4
 101024a:	je     0x10102e2
 1010250:	lea    rax,[rsp+0x50]
 1010255:	mov    QWORD PTR [rbp-0x30],rax
 1010259:	mov    QWORD PTR [rsp+0x50],r12
 101025e:	mov    QWORD PTR [rsp+0x58],r13
 1010263:	mov    DWORD PTR [rsp+0x60],0x227
 101026b:	mov    QWORD PTR [rsp+0x64],0x4000
 1010274:	mov    DWORD PTR [rbp-0x40],0x1000000
 101027b:	mov    QWORD PTR [rsp+0x70],r15
 1010280:	mov    QWORD PTR [rsp+0x78],r15
 1010285:	mov    QWORD PTR [rbp-0x80],r15
 1010289:	mov    QWORD PTR [rbp-0x78],r15
 101028d:	mov    QWORD PTR [rbp-0x70],r15
 1010291:	mov    QWORD PTR [rbp-0x68],r15
 1010295:	mov    QWORD PTR [rbp-0x60],r15
 1010299:	mov    QWORD PTR [rbp-0x58],r15
 101029d:	mov    QWORD PTR [rbp-0x50],r15
 10102a1:	mov    QWORD PTR [rbp-0x48],r15
 10102a5:	mov    QWORD PTR [rsp+0x38],rdi
 10102aa:	mov    rax,QWORD PTR [rbx+0x10]
 10102ae:	mov    QWORD PTR [rsp+0x30],rax
 10102b3:	mov    rax,QWORD PTR [rbx+0x8]
 10102b7:	mov    QWORD PTR [rsp+0x28],rax
 10102bc:	mov    eax,DWORD PTR [rbp+0xd0]
 10102c2:	mov    DWORD PTR [rsp+0x20],eax
 10102c6:	lea    r9,[rip+0xffffffffffff3323]        # 0x10035f0
 10102cd:	mov    r8d,0x8000ffff
 10102d3:	lea    rdx,[rsp+0x50]
 10102d8:	lea    rcx,[rbp-0x20]
 10102dc:	call   0x1006e50
 10102e1:	int3   
 10102e2:	mov    DWORD PTR [rbp-0x24],r15d
 10102e6:	mov    eax,DWORD PTR [rbp+0xe0]
 10102ec:	mov    DWORD PTR [rbp-0x38],eax
 10102ef:	mov    DWORD PTR [rbp-0x28],r15d
 10102f3:	lea    rax,[rbp-0x38]
 10102f7:	mov    QWORD PTR [rsp+0x28],rax
 10102fc:	lea    rax,[rbp-0x28]
 1010300:	mov    QWORD PTR [rsp+0x20],rax
 1010305:	lea    r9,[rbp-0x24]
 1010309:	xor    r8d,r8d
 101030c:	mov    rdx,rdi
 101030f:	mov    rcx,QWORD PTR [rbx+0x8]
 1010313:	call   QWORD PTR [rip+0xffffffffffff0d7f]        # 0x1001098
 1010319:	mov    r8d,eax
 101031c:	test   eax,eax
 101031e:	je     0x10103c3
 1010324:	lea    rax,[rsp+0x50]
 1010329:	mov    QWORD PTR [rbp-0x30],rax
 101032d:	mov    QWORD PTR [rsp+0x50],r12
 1010332:	mov    QWORD PTR [rsp+0x58],r13
 1010337:	mov    DWORD PTR [rsp+0x60],0x23b
 101033f:	mov    QWORD PTR [rsp+0x64],0x4000
 1010348:	mov    DWORD PTR [rbp-0x40],0x1000000
 101034f:	mov    QWORD PTR [rsp+0x70],r15
 1010354:	mov    QWORD PTR [rsp+0x78],r15
 1010359:	mov    QWORD PTR [rbp-0x80],r15
 101035d:	mov    QWORD PTR [rbp-0x78],r15
 1010361:	mov    QWORD PTR [rbp-0x70],r15
 1010365:	mov    QWORD PTR [rbp-0x68],r15
 1010369:	mov    QWORD PTR [rbp-0x60],r15
 101036d:	mov    QWORD PTR [rbp-0x58],r15
 1010371:	mov    QWORD PTR [rbp-0x50],r15
 1010375:	mov    QWORD PTR [rbp-0x48],r15
 1010379:	test   r8d,r8d
 101037c:	jle    0x1010389
 101037e:	movzx  r8d,r8w
 1010382:	or     r8d,0x80070000
 1010389:	mov    eax,DWORD PTR [rbp-0x38]
 101038c:	mov    DWORD PTR [rsp+0x40],eax
 1010390:	mov    eax,DWORD PTR [rbp-0x24]
 1010393:	mov    DWORD PTR [rsp+0x38],eax
 1010397:	mov    QWORD PTR [rsp+0x30],rdi
 101039c:	mov    rax,QWORD PTR [rbx+0x10]
 10103a0:	mov    QWORD PTR [rsp+0x28],rax
 10103a5:	mov    rax,QWORD PTR [rbx+0x8]
 10103a9:	mov    QWORD PTR [rsp+0x20],rax
 10103ae:	lea    r9,[rip+0xffffffffffff319b]        # 0x1003550
 10103b5:	lea    rdx,[rsp+0x50]
 10103ba:	lea    rcx,[rbp-0x20]
 10103be:	call   0x100c1a0
 10103c3:	mov    eax,DWORD PTR [rbp-0x28]
 10103c6:	mov    DWORD PTR [r14],eax
 10103c9:	cmp    DWORD PTR [rip+0xb3b0],0x0        # 0x101b780
 10103d0:	je     0x1010438
 10103d2:	cmp    DWORD PTR [rip+0xb3c7],0x0        # 0x101b7a0
 10103d9:	je     0x1010438
 10103db:	mov    DWORD PTR [rsp+0x30],r15d
 10103e0:	mov    rax,QWORD PTR [rbp-0x18]
 10103e4:	mov    QWORD PTR [rsp+0x28],rax
 10103e9:	mov    eax,DWORD PTR [rbp-0x4]
 10103ec:	mov    DWORD PTR [rsp+0x20],eax
 10103f0:	mov    r9d,DWORD PTR [rbp+0x0]
 10103f4:	xor    r8d,r8d
 10103f7:	lea    rdx,[rip+0xffffffffffff491e]        # 0x1004d1c
 10103fe:	lea    rcx,[rip+0xb37b]        # 0x101b780
 1010405:	call   0x100af10
 101040a:	lea    r9,[rip+0xffffffffffff2edf]        # 0x10032f0
 1010411:	mov    r8,QWORD PTR [rbp-0x18]
 1010415:	lea    rdx,[rip+0xffffffffffff2ef4]        # 0x1003310
 101041c:	lea    rcx,[rip+0xb35d]        # 0x101b780
 1010423:	call   0x100b220
 1010428:	mov    edx,DWORD PTR [rbp+0x0]
 101042b:	lea    rcx,[rip+0xb34e]        # 0x101b780
 1010432:	call   0x100b150
 1010437:	nop
 1010438:	cmp    DWORD PTR [rip+0xb341],0x0        # 0x101b780
 101043f:	je     0x101049f
 1010441:	cmp    DWORD PTR [rip+0xb358],0x0        # 0x101b7a0
 1010448:	je     0x101049f
 101044a:	mov    DWORD PTR [rsp+0x30],r15d
 101044f:	mov    rax,QWORD PTR [rbp-0x18]
 1010453:	mov    QWORD PTR [rsp+0x28],rax
 1010458:	mov    eax,DWORD PTR [rbp-0x4]
 101045b:	mov    DWORD PTR [rsp+0x20],eax
 101045f:	mov    r9d,DWORD PTR [rbp+0x0]
 1010463:	xor    r8d,r8d
 1010466:	lea    rdx,[rip+0xffffffffffff48af]        # 0x1004d1c
 101046d:	lea    rcx,[rip+0xb30c]        # 0x101b780
 1010474:	call   0x100af10
 1010479:	mov    r8d,DWORD PTR [rbp-0x20]
 101047d:	lea    rdx,[rip+0xffffffffffff428c]        # 0x1004710
 1010484:	lea    rcx,[rip+0xb2f5]        # 0x101b780
 101048b:	call   0x100b470
 1010490:	mov    edx,DWORD PTR [rbp+0x0]
 1010493:	lea    rcx,[rip+0xb2e6]        # 0x101b780
 101049a:	call   0x100b150
 101049f:	mov    al,0x1
 10104a1:	mov    rbx,QWORD PTR [rsp+0x1d8]
 10104a9:	add    rsp,0x190
 10104b0:	pop    r15
 10104b2:	pop    r14
 10104b4:	pop    r13
 10104b6:	pop    r12
 10104b8:	pop    rdi
 10104b9:	pop    rsi
 10104ba:	pop    rbp
 10104bb:	ret    
 10104bc:	int3   
 10104bd:	int3   
 10104be:	int3   
 10104bf:	int3   
 10104c0:	int3   
 10104c1:	int3   
 10104c2:	int3   
 10104c3:	int3   
 10104c4:	int3   
 10104c5:	int3   
 10104c6:	int3   
 10104c7:	int3   
 10104c8:	int3   
 10104c9:	int3   
 10104ca:	int3   
 10104cb:	int3   
 10104cc:	int3   
 10104cd:	int3   
 10104ce:	int3   
 10104cf:	int3   
 10104d0:	mov    rax,rsp
 10104d3:	push   rbp
 10104d4:	push   rdi
 10104d5:	push   r14
 10104d7:	lea    rbp,[rax-0x5f]
 10104db:	sub    rsp,0xf0
 10104e2:	mov    QWORD PTR [rbp+0x37],0xfffffffffffffffe
 10104ea:	mov    QWORD PTR [rax+0x10],rbx
 10104ee:	mov    QWORD PTR [rax+0x18],rsi
 10104f2:	mov    rbx,rcx
 10104f5:	lea    rax,[rbp-0x69]
 10104f9:	mov    QWORD PTR [rbp+0x67],rax
 10104fd:	lea    rsi,[rip+0xffffffffffff2e4c]        # 0x1003350
 1010504:	mov    QWORD PTR [rbp-0x69],rsi
 1010508:	lea    r14,[rip+0xffffffffffff2e31]        # 0x1003340
 101050f:	mov    QWORD PTR [rbp-0x61],r14
 1010513:	mov    DWORD PTR [rbp-0x59],0x29d
 101051a:	mov    QWORD PTR [rbp-0x55],0x4000
 1010522:	xor    edi,edi
 1010524:	mov    DWORD PTR [rbp+0x7],0x1000000
 101052b:	mov    QWORD PTR [rbp-0x49],rdi
 101052f:	mov    QWORD PTR [rbp-0x41],rdi
 1010533:	mov    QWORD PTR [rbp-0x39],rdi
 1010537:	mov    QWORD PTR [rbp-0x31],rdi
 101053b:	mov    QWORD PTR [rbp-0x29],rdi
 101053f:	mov    QWORD PTR [rbp-0x21],rdi
 1010543:	mov    QWORD PTR [rbp-0x19],rdi
 1010547:	mov    QWORD PTR [rbp-0x11],rdi
 101054b:	mov    QWORD PTR [rbp-0x9],rdi
 101054f:	mov    QWORD PTR [rbp-0x1],rdi
 1010553:	lea    r8,[rip+0xffffffffffff30fe]        # 0x1003658
 101055a:	lea    rdx,[rbp-0x69]
 101055e:	lea    rcx,[rbp+0xf]
 1010562:	call   0x10060d0
 1010567:	nop
 1010568:	mov    rcx,QWORD PTR [rbx+0x8]
 101056c:	test   rcx,rcx
 101056f:	je     0x10105e9
 1010571:	call   QWORD PTR [rip+0xffffffffffff0b31]        # 0x10010a8
 1010577:	test   eax,eax
 1010579:	je     0x10105e5
 101057b:	lea    rcx,[rbp-0x69]
 101057f:	mov    QWORD PTR [rbp+0x67],rcx
 1010583:	mov    QWORD PTR [rbp-0x69],rsi
 1010587:	mov    QWORD PTR [rbp-0x61],r14
 101058b:	mov    DWORD PTR [rbp-0x59],0x2a4
 1010592:	mov    QWORD PTR [rbp-0x55],0x4000
 101059a:	mov    DWORD PTR [rbp+0x7],0x1000000
 10105a1:	mov    QWORD PTR [rbp-0x49],rdi
 10105a5:	mov    QWORD PTR [rbp-0x41],rdi
 10105a9:	mov    QWORD PTR [rbp-0x39],rdi
 10105ad:	mov    QWORD PTR [rbp-0x31],rdi
 10105b1:	mov    QWORD PTR [rbp-0x29],rdi
 10105b5:	mov    QWORD PTR [rbp-0x21],rdi
 10105b9:	mov    QWORD PTR [rbp-0x19],rdi
 10105bd:	mov    QWORD PTR [rbp-0x11],rdi
 10105c1:	mov    QWORD PTR [rbp-0x9],rdi
 10105c5:	mov    QWORD PTR [rbp-0x1],rdi
 10105c9:	mov    r9,QWORD PTR [rbx+0x10]
 10105cd:	mov    DWORD PTR [rsp+0x20],eax
 10105d1:	lea    r8,[rip+0xffffffffffff30b8]        # 0x1003690
 10105d8:	lea    rdx,[rbp-0x69]
 10105dc:	lea    rcx,[rbp+0xf]
 10105e0:	call   0x1006240
 10105e5:	mov    QWORD PTR [rbx+0x8],rdi
 10105e9:	mov    rcx,QWORD PTR [rbx+0x10]
 10105ed:	call   QWORD PTR [rip+0xffffffffffff0e3d]        # 0x1001430
 10105f3:	mov    QWORD PTR [rbx+0x10],rdi
 10105f7:	cmp    DWORD PTR [rip+0xb182],0x0        # 0x101b780
 10105fe:	je     0x101065e
 1010600:	cmp    DWORD PTR [rip+0xb199],0x0        # 0x101b7a0
 1010607:	je     0x101065e
 1010609:	mov    DWORD PTR [rsp+0x30],edi
 101060d:	mov    rax,QWORD PTR [rbp+0x17]
 1010611:	mov    QWORD PTR [rsp+0x28],rax
 1010616:	mov    eax,DWORD PTR [rbp+0x2b]
 1010619:	mov    DWORD PTR [rsp+0x20],eax
 101061d:	mov    ebx,DWORD PTR [rbp+0x2f]
 1010620:	mov    r9d,ebx
 1010623:	xor    r8d,r8d
 1010626:	lea    rdx,[rip+0xffffffffffff46ef]        # 0x1004d1c
 101062d:	lea    rcx,[rip+0xb14c]        # 0x101b780
 1010634:	call   0x100af10
 1010639:	mov    r8d,DWORD PTR [rbp+0xf]
 101063d:	lea    rdx,[rip+0xffffffffffff40cc]        # 0x1004710
 1010644:	lea    rcx,[rip+0xb135]        # 0x101b780
 101064b:	call   0x100b470
 1010650:	mov    edx,ebx
 1010652:	lea    rcx,[rip+0xb127]        # 0x101b780
 1010659:	call   0x100b150
 101065e:	lea    r11,[rsp+0xf0]
 1010666:	mov    rbx,QWORD PTR [r11+0x28]
 101066a:	mov    rsi,QWORD PTR [r11+0x30]
 101066e:	mov    rsp,r11
 1010671:	pop    r14
 1010673:	pop    rdi
 1010674:	pop    rbp
 1010675:	ret    
 1010676:	int3   
 1010677:	int3   
 1010678:	int3   
 1010679:	int3   
 101067a:	int3   
 101067b:	int3   
 101067c:	jmp    QWORD PTR [rip+0xffffffffffff0d16]        # 0x1001398
 1010682:	int3   
 1010683:	int3   
 1010684:	int3   
 1010685:	int3   
 1010686:	int3   
 1010687:	int3   
 1010688:	jmp    QWORD PTR [rip+0xffffffffffff0d12]        # 0x10013a0
 101068e:	int3   
 101068f:	int3   
 1010690:	int3   
 1010691:	int3   
 1010692:	int3   
 1010693:	int3   
 1010694:	rex push rbx
 1010696:	sub    rsp,0x20
 101069a:	mov    r11d,DWORD PTR [r8]
 101069d:	mov    rbx,rdx
 10106a0:	mov    r9,rcx
 10106a3:	and    r11d,0xfffffff8
 10106a7:	test   BYTE PTR [r8],0x4
 10106ab:	mov    r10,rcx
 10106ae:	je     0x10106c3
 10106b0:	mov    eax,DWORD PTR [r8+0x8]
 10106b4:	movsxd r10,DWORD PTR [r8+0x4]
 10106b8:	neg    eax
 10106ba:	add    r10,rcx
 10106bd:	movsxd rcx,eax
 10106c0:	and    r10,rcx
 10106c3:	movsxd rax,r11d
 10106c6:	mov    rdx,QWORD PTR [rax+r10*1]
 10106ca:	mov    rax,QWORD PTR [rbx+0x10]
 10106ce:	mov    ecx,DWORD PTR [rax+0x8]
 10106d1:	add    rcx,QWORD PTR [rbx+0x8]
 10106d5:	test   BYTE PTR [rcx+0x3],0xf
 10106d9:	je     0x10106e7
 10106db:	movzx  eax,BYTE PTR [rcx+0x3]
 10106df:	and    eax,0xfffffff0
 10106e2:	cdqe   
 10106e4:	add    r9,rax
 10106e7:	xor    r9,rdx
 10106ea:	mov    rcx,r9
 10106ed:	add    rsp,0x20
 10106f1:	pop    rbx
 10106f2:	jmp    0x1009d50
 10106f7:	int3   
 10106f8:	int3   
 10106f9:	int3   
 10106fa:	int3   
 10106fb:	int3   
 10106fc:	int3   
 10106fd:	int3   
 10106fe:	int3   
 10106ff:	int3   
 1010700:	sub    rsp,0x28
 1010704:	mov    r8,QWORD PTR [r9+0x38]
 1010708:	mov    rcx,rdx
 101070b:	mov    rdx,r9
 101070e:	call   0x1010694
 1010713:	mov    eax,0x1
 1010718:	add    rsp,0x28
 101071c:	ret    
 101071d:	int3   
 101071e:	int3   
 101071f:	int3   
 1010720:	int3   
 1010721:	int3   
 1010722:	int3   
 1010723:	int3   
 1010724:	mov    rax,rsp
 1010727:	mov    QWORD PTR [rax+0x8],rbx
 101072b:	mov    QWORD PTR [rax+0x10],rbp
 101072f:	mov    QWORD PTR [rax+0x18],rsi
 1010733:	mov    QWORD PTR [rax+0x20],rdi
 1010737:	push   r12
 1010739:	sub    rsp,0x20
 101073d:	mov    rbx,QWORD PTR [r9+0x38]
 1010741:	mov    rsi,rdx
 1010744:	mov    r12,r8
 1010747:	mov    rbp,rcx
 101074a:	lea    r8,[rbx+0x4]
 101074e:	mov    rdx,r9
 1010751:	mov    rcx,rsi
 1010754:	mov    rdi,r9
 1010757:	call   0x1010694
 101075c:	mov    r11d,DWORD PTR [rbx+0x4]
 1010760:	mov    r10d,DWORD PTR [rbp+0x4]
 1010764:	mov    eax,r11d
 1010767:	and    r11d,0x2
 101076b:	mov    r8d,0x1
 1010771:	and    eax,r8d
 1010774:	and    r10b,0x66
 1010778:	cmove  r11d,eax
 101077c:	test   r11d,r11d
 101077f:	je     0x1010795
 1010781:	mov    r9,rdi
 1010784:	mov    r8,r12
 1010787:	mov    rdx,rsi
 101078a:	mov    rcx,rbp
 101078d:	call   0x1010688
 1010792:	mov    r8d,eax
 1010795:	mov    rbx,QWORD PTR [rsp+0x30]
 101079a:	mov    rbp,QWORD PTR [rsp+0x38]
 101079f:	mov    rsi,QWORD PTR [rsp+0x40]
 10107a4:	mov    rdi,QWORD PTR [rsp+0x48]
 10107a9:	mov    eax,r8d
 10107ac:	add    rsp,0x20
 10107b0:	pop    r12
 10107b2:	ret    
 10107b3:	int3   
 10107b4:	int3   
 10107b5:	int3   
 10107b6:	int3   
 10107b7:	int3   
 10107b8:	int3   
 10107b9:	int3   
 10107ba:	jmp    QWORD PTR [rip+0xffffffffffff0be8]        # 0x10013a8
 10107c0:	int3   
 10107c1:	int3   
 10107c2:	int3   
 10107c3:	int3   
 10107c4:	int3   
 10107c5:	int3   
 10107c6:	jmp    QWORD PTR [rip+0xffffffffffff0bf4]        # 0x10013c0
 10107cc:	int3   
 10107cd:	int3   
 10107ce:	int3   
 10107cf:	int3   
 10107d0:	int3   
 10107d1:	int3   
 10107d2:	int3   
 10107d3:	int3   
 10107d4:	int3   
 10107d5:	int3   
 10107d6:	int3   
 10107d7:	int3   
 10107d8:	int3   
 10107d9:	int3   
 10107da:	int3   
 10107db:	int3   
 10107dc:	int3   
 10107dd:	int3   
 10107de:	int3   
 10107df:	int3   
 10107e0:	mov    QWORD PTR [rsp+0x8],rbx
 10107e5:	push   rdi
 10107e6:	sub    rsp,0x20
 10107ea:	mov    rdi,rcx
 10107ed:	lea    rcx,[rip+0xc014]        # 0x101c808
 10107f4:	call   0x1010c00
 10107f9:	test   eax,eax
 10107fb:	jne    0x1010842
 10107fd:	lea    rcx,[rip+0xc004]        # 0x101c808
 1010804:	call   0x1010e60
 1010809:	test   eax,eax
 101080b:	je     0x1010842
 101080d:	lea    rcx,[rip+0xc004]        # 0x101c818
 1010814:	xor    edx,edx
 1010816:	mov    r8d,0x1b60
 101081c:	call   0x10107ba
 1010821:	lea    rcx,[rip+0xbff0]        # 0x101c818
 1010828:	call   0x1011b80
 101082d:	lea    rcx,[rip+0xbfd4]        # 0x101c808
 1010834:	xor    edx,edx
 1010836:	mov    QWORD PTR [rip+0xbfd3],rax        # 0x101c810
 101083d:	call   0x1010ec0
 1010842:	lea    rcx,[rip+0xbfbf]        # 0x101c808
 1010849:	call   0x1010c20
 101084e:	test   eax,eax
 1010850:	mov    ebx,eax
 1010852:	js     0x1010871
 1010854:	mov    rcx,QWORD PTR [rip+0xbfb5]        # 0x101c810
 101085b:	mov    QWORD PTR [rdi],rcx
 101085e:	mov    rdx,QWORD PTR [rcx]
 1010861:	call   QWORD PTR [rdx+0x8]
 1010864:	mov    eax,ebx
 1010866:	mov    rbx,QWORD PTR [rsp+0x30]
 101086b:	add    rsp,0x20
 101086f:	pop    rdi
 1010870:	ret    
 1010871:	mov    QWORD PTR [rdi],0x0
 1010878:	mov    rbx,QWORD PTR [rsp+0x30]
 101087d:	add    rsp,0x20
 1010881:	pop    rdi
 1010882:	ret    
 1010883:	int3   
 1010884:	int3   
 1010885:	int3   
 1010886:	int3   
 1010887:	int3   
 1010888:	int3   
 1010889:	int3   
 101088a:	int3   
 101088b:	int3   
 101088c:	int3   
 101088d:	int3   
 101088e:	int3   
 101088f:	int3   
 1010890:	mov    QWORD PTR [rsp+0x10],rsi
 1010895:	push   rdi
 1010896:	sub    rsp,0x20
 101089a:	mov    rsi,rcx
 101089d:	lea    rcx,[rip+0xbf64]        # 0x101c808
 10108a4:	call   0x1010c00
 10108a9:	test   eax,eax
 10108ab:	jne    0x10108f2
 10108ad:	lea    rcx,[rip+0xbf54]        # 0x101c808
 10108b4:	call   0x1010e60
 10108b9:	test   eax,eax
 10108bb:	je     0x10108f2
 10108bd:	lea    rcx,[rip+0xbf54]        # 0x101c818
 10108c4:	xor    edx,edx
 10108c6:	mov    r8d,0x1b60
 10108cc:	call   0x10107ba
 10108d1:	lea    rcx,[rip+0xbf40]        # 0x101c818
 10108d8:	call   0x1011b80
 10108dd:	lea    rcx,[rip+0xbf24]        # 0x101c808
 10108e4:	xor    edx,edx
 10108e6:	mov    QWORD PTR [rip+0xbf23],rax        # 0x101c810
 10108ed:	call   0x1010ec0
 10108f2:	lea    rcx,[rip+0xbf0f]        # 0x101c808
 10108f9:	mov    QWORD PTR [rsp+0x30],rbx
 10108fe:	call   0x1010c20
 1010903:	test   eax,eax
 1010905:	mov    edi,eax
 1010907:	js     0x101091b
 1010909:	mov    rbx,QWORD PTR [rip+0xbf00]        # 0x101c810
 1010910:	mov    rcx,rbx
 1010913:	mov    rax,QWORD PTR [rbx]
 1010916:	call   QWORD PTR [rax+0x8]
 1010919:	jmp    0x101091d
 101091b:	xor    ebx,ebx
 101091d:	test   edi,edi
 101091f:	jne    0x1010937
 1010921:	mov    rdx,rsi
 1010924:	mov    rcx,rbx
 1010927:	call   0x1011360
 101092c:	mov    rdx,QWORD PTR [rbx]
 101092f:	mov    rcx,rbx
 1010932:	mov    edi,eax
 1010934:	call   QWORD PTR [rdx+0x10]
 1010937:	xor    edx,edx
 1010939:	mov    r8d,0x8000
 101093f:	mov    rcx,rsi
 1010942:	call   QWORD PTR [rip+0xffffffffffff07e0]        # 0x1001128
 1010948:	mov    rbx,QWORD PTR [rsp+0x30]
 101094d:	mov    rsi,QWORD PTR [rsp+0x38]
 1010952:	mov    eax,edi
 1010954:	add    rsp,0x20
 1010958:	pop    rdi
 1010959:	ret    
 101095a:	int3   
 101095b:	int3   
 101095c:	int3   
 101095d:	int3   
 101095e:	int3   
 101095f:	int3   
 1010960:	mov    QWORD PTR [rcx],0x0
 1010967:	mov    rax,rcx
 101096a:	ret    
 101096b:	int3   
 101096c:	int3   
 101096d:	int3   
 101096e:	int3   
 101096f:	int3   
 1010970:	int3   
 1010971:	int3   
 1010972:	int3   
 1010973:	int3   
 1010974:	int3   
 1010975:	int3   
 1010976:	int3   
 1010977:	int3   
 1010978:	int3   
 1010979:	int3   
 101097a:	int3   
 101097b:	int3   
 101097c:	int3   
 101097d:	int3   
 101097e:	int3   
 101097f:	int3   
 1010980:	mov    QWORD PTR [rsp+0x8],rbx
 1010985:	push   rdi
 1010986:	sub    rsp,0x30
 101098a:	xor    edi,edi
 101098c:	mov    QWORD PTR [rsp+0x20],rdi
 1010991:	mov    ebx,edi
 1010993:	mov    r8,rdx
 1010996:	xor    edx,edx
 1010998:	mov    rcx,QWORD PTR [rcx]
 101099b:	call   QWORD PTR [rip+0xffffffffffff077f]        # 0x1001120
 10109a1:	mov    QWORD PTR [rsp+0x20],rax
 10109a6:	jmp    0x10109c8
 10109a8:	mov    ebx,eax
 10109aa:	cmp    eax,0xc00000fd
 10109af:	jne    0x10109b7
 10109b1:	call   QWORD PTR [rip+0xffffffffffff0a11]        # 0x10013c8
 10109b7:	mov    eax,0x80004005
 10109bc:	test   ebx,ebx
 10109be:	cmovns ebx,eax
 10109c1:	xor    edi,edi
 10109c3:	mov    rax,QWORD PTR [rsp+0x20]
 10109c8:	test   ebx,ebx
 10109ca:	cmovs  rax,rdi
 10109ce:	mov    rbx,QWORD PTR [rsp+0x40]
 10109d3:	add    rsp,0x30
 10109d7:	pop    rdi
 10109d8:	ret    
 10109d9:	int3   
 10109da:	int3   
 10109db:	int3   
 10109dc:	int3   
 10109dd:	int3   
 10109de:	int3   
 10109df:	int3   
 10109e0:	sub    rsp,0x28
 10109e4:	mov    r8,rdx
 10109e7:	xor    edx,edx
 10109e9:	mov    rcx,QWORD PTR [rcx]
 10109ec:	call   QWORD PTR [rip+0xffffffffffff0726]        # 0x1001118
 10109f2:	jmp    0x1010a02
 10109f4:	cmp    eax,0xc00000fd
 10109f9:	jne    0x1010a02
 10109fb:	call   QWORD PTR [rip+0xffffffffffff09c7]        # 0x10013c8
 1010a01:	nop
 1010a02:	add    rsp,0x28
 1010a06:	ret    
 1010a07:	int3   
 1010a08:	int3   
 1010a09:	int3   
 1010a0a:	int3   
 1010a0b:	int3   
 1010a0c:	int3   
 1010a0d:	int3   
 1010a0e:	int3   
 1010a0f:	int3   
 1010a10:	mov    QWORD PTR [rcx],0x0
 1010a17:	mov    rax,rcx
 1010a1a:	ret    
 1010a1b:	int3   
 1010a1c:	int3   
 1010a1d:	int3   
 1010a1e:	int3   
 1010a1f:	int3   
 1010a20:	int3   
 1010a21:	int3   
 1010a22:	int3   
 1010a23:	int3   
 1010a24:	int3   
 1010a25:	int3   
 1010a26:	int3   
 1010a27:	int3   
 1010a28:	int3   
 1010a29:	int3   
 1010a2a:	int3   
 1010a2b:	int3   
 1010a2c:	int3   
 1010a2d:	int3   
 1010a2e:	int3   
 1010a2f:	int3   
 1010a30:	mov    QWORD PTR [rsp+0x10],rbx
 1010a35:	mov    QWORD PTR [rsp+0x8],rcx
 1010a3a:	push   rdi
 1010a3b:	sub    rsp,0x20
 1010a3f:	mov    rdi,rcx
 1010a42:	xor    ebx,ebx
 1010a44:	mov    rcx,QWORD PTR [rcx]
 1010a47:	test   rcx,rcx
 1010a4a:	je     0x1010a52
 1010a4c:	mov    rax,QWORD PTR [rcx]
 1010a4f:	call   QWORD PTR [rax+0x10]
 1010a52:	jmp    0x1010a72
 1010a54:	mov    ebx,eax
 1010a56:	cmp    eax,0xc00000fd
 1010a5b:	jne    0x1010a63
 1010a5d:	call   QWORD PTR [rip+0xffffffffffff0965]        # 0x10013c8
 1010a63:	mov    eax,0x80004005
 1010a68:	test   ebx,ebx
 1010a6a:	cmovns ebx,eax
 1010a6d:	mov    rdi,QWORD PTR [rsp+0x30]
 1010a72:	mov    QWORD PTR [rdi],0x0
 1010a79:	mov    eax,ebx
 1010a7b:	mov    rbx,QWORD PTR [rsp+0x38]
 1010a80:	add    rsp,0x20
 1010a84:	pop    rdi
 1010a85:	ret    
 1010a86:	int3   
 1010a87:	int3   
 1010a88:	int3   
 1010a89:	int3   
 1010a8a:	int3   
 1010a8b:	int3   
 1010a8c:	int3   
 1010a8d:	int3   
 1010a8e:	int3   
 1010a8f:	int3   
 1010a90:	mov    QWORD PTR [rsp+0x8],rbx
 1010a95:	mov    QWORD PTR [rsp+0x10],rsi
 1010a9a:	push   rdi
 1010a9b:	sub    rsp,0x20
 1010a9f:	mov    rdi,rdx
 1010aa2:	mov    rsi,rcx
 1010aa5:	call   0x1010a30
 1010aaa:	xor    ebx,ebx
 1010aac:	test   rdi,rdi
 1010aaf:	je     0x1010aba
 1010ab1:	mov    rax,QWORD PTR [rdi]
 1010ab4:	mov    rcx,rdi
 1010ab7:	call   QWORD PTR [rax+0x8]
 1010aba:	mov    QWORD PTR [rsi],rdi
 1010abd:	jmp    0x1010ad8
 1010abf:	mov    ebx,eax
 1010ac1:	cmp    eax,0xc00000fd
 1010ac6:	jne    0x1010ace
 1010ac8:	call   QWORD PTR [rip+0xffffffffffff08fa]        # 0x10013c8
 1010ace:	mov    eax,0x80004005
 1010ad3:	test   ebx,ebx
 1010ad5:	cmovns ebx,eax
 1010ad8:	mov    eax,ebx
 1010ada:	mov    rbx,QWORD PTR [rsp+0x30]
 1010adf:	mov    rsi,QWORD PTR [rsp+0x38]
 1010ae4:	add    rsp,0x20
 1010ae8:	pop    rdi
 1010ae9:	ret    
 1010aea:	int3   
 1010aeb:	int3   
 1010aec:	int3   
 1010aed:	int3   
 1010aee:	int3   
 1010aef:	int3   
 1010af0:	mov    QWORD PTR [rcx],0x0
 1010af7:	ret    
 1010af8:	int3   
 1010af9:	int3   
 1010afa:	int3   
 1010afb:	int3   
 1010afc:	int3   
 1010afd:	int3   
 1010afe:	int3   
 1010aff:	int3   
 1010b00:	mov    rax,QWORD PTR [rcx]
 1010b03:	ret    
 1010b04:	int3   
 1010b05:	int3   
 1010b06:	int3   
 1010b07:	int3   
 1010b08:	int3   
 1010b09:	int3   
 1010b0a:	int3   
 1010b0b:	int3   
 1010b0c:	int3   
 1010b0d:	int3   
 1010b0e:	int3   
 1010b0f:	int3   
 1010b10:	or     r9d,0xffffffff
 1010b14:	test   rdx,rdx
 1010b17:	mov    r10,rcx
 1010b1a:	je     0x1010b52
 1010b1c:	lea    r11,[rip+0xffffffffffff2cfd]        # 0x1003820
 1010b23:	nop
 1010b24:	data16 data16 xchg ax,ax
 1010b28:	data16 data16 xchg ax,ax
 1010b2c:	data16 data16 xchg ax,ax
 1010b30:	movzx  r8d,BYTE PTR [r10]
 1010b34:	mov    ecx,r9d
 1010b37:	add    r10,0x1
 1010b3b:	xor    r8b,r9b
 1010b3e:	shr    ecx,0x8
 1010b41:	movzx  eax,r8b
 1010b45:	mov    r9d,DWORD PTR [r11+rax*4]
 1010b49:	xor    r9d,ecx
 1010b4c:	sub    rdx,0x1
 1010b50:	jne    0x1010b30
 1010b52:	mov    eax,r9d
 1010b55:	ret    
 1010b56:	int3   
 1010b57:	int3   
 1010b58:	int3   
 1010b59:	int3   
 1010b5a:	int3   
 1010b5b:	int3   
 1010b5c:	int3   
 1010b5d:	int3   
 1010b5e:	int3   
 1010b5f:	int3   
 1010b60:	sub    rsp,0x8
 1010b64:	test   rcx,rcx
 1010b67:	mov    r8,rcx
 1010b6a:	je     0x1010bca
 1010b6c:	mov    QWORD PTR [rsp],rdi
 1010b70:	or     rcx,0xffffffffffffffff
 1010b74:	xor    eax,eax
 1010b76:	mov    rdi,r8
 1010b79:	repnz scas ax,WORD PTR es:[rdi]
 1010b7c:	mov    edi,0xffffffff
 1010b81:	not    rcx
 1010b84:	lea    r9,[rcx-0x1]
 1010b88:	add    r9,r9
 1010b8b:	je     0x1010bbf
 1010b8d:	lea    r10,[rip+0xffffffffffff2c8c]        # 0x1003820
 1010b94:	data16 data16 xchg ax,ax
 1010b98:	data16 data16 xchg ax,ax
 1010b9c:	data16 data16 xchg ax,ax
 1010ba0:	movzx  edx,BYTE PTR [r8]
 1010ba4:	mov    eax,edi
 1010ba6:	add    r8,0x1
 1010baa:	xor    dl,dil
 1010bad:	shr    eax,0x8
 1010bb0:	movzx  ecx,dl
 1010bb3:	mov    edi,DWORD PTR [r10+rcx*4]
 1010bb7:	xor    edi,eax
 1010bb9:	sub    r9,0x1
 1010bbd:	jne    0x1010ba0
 1010bbf:	mov    eax,edi
 1010bc1:	mov    rdi,QWORD PTR [rsp]
 1010bc5:	add    rsp,0x8
 1010bc9:	ret    
 1010bca:	xor    eax,eax
 1010bcc:	add    rsp,0x8
 1010bd0:	ret    
 1010bd1:	int3   
 1010bd2:	int3   
 1010bd3:	int3   
 1010bd4:	int3   
 1010bd5:	int3   
 1010bd6:	int3   
 1010bd7:	int3   
 1010bd8:	int3   
 1010bd9:	int3   
 1010bda:	int3   
 1010bdb:	int3   
 1010bdc:	int3   
 1010bdd:	int3   
 1010bde:	int3   
 1010bdf:	int3   
 1010be0:	xor    eax,eax
 1010be2:	mov    DWORD PTR [rcx],eax
 1010be4:	mov    DWORD PTR [rcx+0x4],eax
 1010be7:	mov    rax,rcx
 1010bea:	ret    
 1010beb:	int3   
 1010bec:	int3   
 1010bed:	int3   
 1010bee:	int3   
 1010bef:	int3   
 1010bf0:	int3   
 1010bf1:	int3   
 1010bf2:	int3   
 1010bf3:	int3   
 1010bf4:	int3   
 1010bf5:	int3   
 1010bf6:	int3   
 1010bf7:	int3   
 1010bf8:	int3   
 1010bf9:	int3   
 1010bfa:	int3   
 1010bfb:	int3   
 1010bfc:	int3   
 1010bfd:	int3   
 1010bfe:	int3   
 1010bff:	int3   
 1010c00:	mov    edx,DWORD PTR [rcx]
 1010c02:	xor    eax,eax
 1010c04:	cmp    edx,0x2
 1010c07:	sete   al
 1010c0a:	ret    
 1010c0b:	int3   
 1010c0c:	int3   
 1010c0d:	int3   
 1010c0e:	int3   
 1010c0f:	int3   
 1010c10:	int3   
 1010c11:	int3   
 1010c12:	int3   
 1010c13:	int3   
 1010c14:	int3   
 1010c15:	int3   
 1010c16:	int3   
 1010c17:	int3   
 1010c18:	int3   
 1010c19:	int3   
 1010c1a:	int3   
 1010c1b:	int3   
 1010c1c:	int3   
 1010c1d:	int3   
 1010c1e:	int3   
 1010c1f:	int3   
 1010c20:	mov    eax,DWORD PTR [rcx+0x4]
 1010c23:	ret    
 1010c24:	int3   
 1010c25:	int3   
 1010c26:	int3   
 1010c27:	int3   
 1010c28:	int3   
 1010c29:	int3   
 1010c2a:	int3   
 1010c2b:	int3   
 1010c2c:	int3   
 1010c2d:	int3   
 1010c2e:	int3   
 1010c2f:	int3   
 1010c30:	rex push rbx
 1010c32:	sub    rsp,0x50
 1010c36:	lea    rcx,[rip+0xffffffffffff2ffb]        # 0x1003c38
 1010c3d:	call   QWORD PTR [rip+0xffffffffffff0625]        # 0x1001268
 1010c43:	lea    rdx,[rip+0xffffffffffff2fd6]        # 0x1003c20
 1010c4a:	mov    rcx,rax
 1010c4d:	mov    rbx,rax
 1010c50:	call   QWORD PTR [rip+0xffffffffffff0632]        # 0x1001288
 1010c56:	test   rax,rax
 1010c59:	mov    QWORD PTR [rip+0xd720],rax        # 0x101e380
 1010c60:	jne    0x1010c6b
 1010c62:	mov    rcx,rbx
 1010c65:	call   QWORD PTR [rip+0xffffffffffff0605]        # 0x1001270
 1010c6b:	lea    rcx,[rsp+0x20]
 1010c70:	call   QWORD PTR [rip+0xffffffffffff049a]        # 0x1001110
 1010c76:	mov    r11d,DWORD PTR [rsp+0x24]
 1010c7b:	mov    DWORD PTR [rip+0xd706],r11d        # 0x101e388
 1010c82:	add    rsp,0x50
 1010c86:	pop    rbx
 1010c87:	ret    
 1010c88:	int3   
 1010c89:	int3   
 1010c8a:	int3   
 1010c8b:	int3   
 1010c8c:	int3   
 1010c8d:	int3   
 1010c8e:	int3   
 1010c8f:	int3   
 1010c90:	mov    QWORD PTR [rsp+0x18],rsi
 1010c95:	push   rdi
 1010c96:	sub    rsp,0x60
 1010c9a:	test   rcx,rcx
 1010c9d:	mov    rsi,rdx
 1010ca0:	mov    rdi,rcx
 1010ca3:	jne    0x1010cb5
 1010ca5:	xor    eax,eax
 1010ca7:	mov    rsi,QWORD PTR [rsp+0x80]
 1010caf:	add    rsp,0x60
 1010cb3:	pop    rdi
 1010cb4:	ret    
 1010cb5:	mov    QWORD PTR [rsp+0x70],rbx
 1010cba:	mov    QWORD PTR [rsp+0x78],rbp
 1010cbf:	mov    eax,0xee
 1010cc4:	mov    ebp,0xcc
 1010cc9:	test   r8d,r8d
 1010ccc:	mov    rbx,rcx
 1010ccf:	cmovne ebp,eax
 1010cd2:	cmp    QWORD PTR [rip+0xd6a6],0x0        # 0x101e380
 1010cda:	je     0x1010d4a
 1010cdc:	mov    QWORD PTR [rsp+0x20],rbx
 1010ce1:	call   QWORD PTR [rip+0xffffffffffff0511]        # 0x10011f8
 1010ce7:	lea    rdx,[rsp+0x20]
 1010cec:	mov    rcx,rax
 1010cef:	mov    r8d,0x10
 1010cf5:	call   QWORD PTR [rip+0xd685]        # 0x101e380
 1010cfb:	test   eax,eax
 1010cfd:	je     0x1010d4a
 1010cff:	mov    rax,QWORD PTR [rsp+0x28]
 1010d04:	test   al,0x1
 1010d06:	je     0x1010d4a
 1010d08:	shr    rax,0x4
 1010d0c:	and    eax,0x7ff
 1010d11:	test   ebp,eax
 1010d13:	je     0x1010daf
 1010d19:	mov    edx,DWORD PTR [rip+0xd669]        # 0x101e388
 1010d1f:	lea    ecx,[rdx-0x1]
 1010d22:	not    rcx
 1010d25:	and    rbx,rcx
 1010d28:	mov    rcx,rsi
 1010d2b:	add    rbx,rdx
 1010d2e:	mov    rax,rbx
 1010d31:	sub    rax,rdi
 1010d34:	cmp    rax,rsi
 1010d37:	cmovb  rcx,rax
 1010d3b:	add    rdi,rcx
 1010d3e:	sub    rsi,rcx
 1010d41:	jne    0x1010da6
 1010d43:	mov    eax,0x1
 1010d48:	jmp    0x1010db1
 1010d4a:	lea    rdx,[rsp+0x30]
 1010d4f:	mov    r8d,0x30
 1010d55:	mov    rcx,rbx
 1010d58:	call   QWORD PTR [rip+0xffffffffffff03aa]        # 0x1001108
 1010d5e:	cmp    rax,0x30
 1010d62:	jne    0x1010daf
 1010d64:	mov    rcx,QWORD PTR [rsp+0x30]
 1010d69:	mov    rbx,QWORD PTR [rsp+0x48]
 1010d6e:	add    rbx,rcx
 1010d71:	cmp    rdi,rbx
 1010d74:	jae    0x1010da6
 1010d76:	cmp    DWORD PTR [rsp+0x50],0x1000
 1010d7e:	jne    0x1010daf
 1010d80:	mov    eax,DWORD PTR [rsp+0x54]
 1010d84:	test   ebp,eax
 1010d86:	je     0x1010daf
 1010d88:	bt     eax,0x8
 1010d8c:	jb     0x1010daf
 1010d8e:	mov    rcx,rsi
 1010d91:	mov    rax,rbx
 1010d94:	sub    rax,rdi
 1010d97:	cmp    rax,rsi
 1010d9a:	cmovb  rcx,rax
 1010d9e:	add    rdi,rcx
 1010da1:	sub    rsi,rcx
 1010da4:	je     0x1010d43
 1010da6:	cmp    rbx,rdi
 1010da9:	jbe    0x1010cd2
 1010daf:	xor    eax,eax
 1010db1:	mov    rbx,QWORD PTR [rsp+0x70]
 1010db6:	mov    rbp,QWORD PTR [rsp+0x78]
 1010dbb:	mov    rsi,QWORD PTR [rsp+0x80]
 1010dc3:	add    rsp,0x60
 1010dc7:	pop    rdi
 1010dc8:	ret    
 1010dc9:	int3   
 1010dca:	int3   
 1010dcb:	int3   
 1010dcc:	int3   
 1010dcd:	int3   
 1010dce:	int3   
 1010dcf:	int3   
 1010dd0:	mov    QWORD PTR [rsp+0x8],rbx
 1010dd5:	mov    QWORD PTR [rsp+0x10],rsi
 1010dda:	push   rdi
 1010ddb:	sub    rsp,0x30
 1010ddf:	mov    rsi,rcx
 1010de2:	xor    ebx,ebx
 1010de4:	mov    DWORD PTR [rsp+0x20],ebx
 1010de8:	mov    edi,ebx
 1010dea:	cmp    QWORD PTR [rcx],rbx
 1010ded:	jne    0x1010e20
 1010def:	xor    r8d,r8d
 1010df2:	mov    edx,0x10000
 1010df7:	xor    ecx,ecx
 1010df9:	call   QWORD PTR [rip+0xffffffffffff0301]        # 0x1001100
 1010dff:	mov    QWORD PTR [rsi],rax
 1010e02:	test   rax,rax
 1010e05:	jne    0x1010e20
 1010e07:	call   QWORD PTR [rip+0xffffffffffff046b]        # 0x1001278
 1010e0d:	mov    ebx,eax
 1010e0f:	test   eax,eax
 1010e11:	jle    0x1010e1c
 1010e13:	movzx  ebx,ax
 1010e16:	or     ebx,0x80070000
 1010e1c:	mov    DWORD PTR [rsp+0x20],ebx
 1010e20:	jmp    0x1010e3f
 1010e22:	mov    edi,eax
 1010e24:	cmp    eax,0xc00000fd
 1010e29:	jne    0x1010e31
 1010e2b:	call   QWORD PTR [rip+0xffffffffffff0597]        # 0x10013c8
 1010e31:	mov    eax,0x80004005
 1010e36:	test   edi,edi
 1010e38:	cmovns edi,eax
 1010e3b:	mov    ebx,DWORD PTR [rsp+0x20]
 1010e3f:	test   ebx,ebx
 1010e41:	cmovns ebx,edi
 1010e44:	mov    eax,ebx
 1010e46:	mov    rbx,QWORD PTR [rsp+0x40]
 1010e4b:	mov    rsi,QWORD PTR [rsp+0x48]
 1010e50:	add    rsp,0x30
 1010e54:	pop    rdi
 1010e55:	ret    
 1010e56:	int3   
 1010e57:	int3   
 1010e58:	int3   
 1010e59:	int3   
 1010e5a:	int3   
 1010e5b:	int3   
 1010e5c:	int3   
 1010e5d:	int3   
 1010e5e:	int3   
 1010e5f:	int3   
 1010e60:	mov    QWORD PTR [rsp+0x8],rbx
 1010e65:	push   rdi
 1010e66:	sub    rsp,0x20
 1010e6a:	mov    rbx,rcx
 1010e6d:	mov    edi,0x1
 1010e72:	xor    eax,eax
 1010e74:	lock cmpxchg DWORD PTR [rcx],edi
 1010e78:	jne    0x1010e87
 1010e7a:	mov    eax,edi
 1010e7c:	mov    rbx,QWORD PTR [rsp+0x30]
 1010e81:	add    rsp,0x20
 1010e85:	pop    rdi
 1010e86:	ret    
 1010e87:	mov    eax,DWORD PTR [rcx]
 1010e89:	cmp    eax,0x2
 1010e8c:	je     0x1010ea1
 1010e8e:	xchg   ax,ax
 1010e90:	mov    ecx,edi
 1010e92:	call   QWORD PTR [rip+0xffffffffffff0378]        # 0x1001210
 1010e98:	mov    r11d,DWORD PTR [rbx]
 1010e9b:	cmp    r11d,0x2
 1010e9f:	jne    0x1010e90
 1010ea1:	xor    eax,eax
 1010ea3:	mov    rbx,QWORD PTR [rsp+0x30]
 1010ea8:	add    rsp,0x20
 1010eac:	pop    rdi
 1010ead:	ret    
 1010eae:	int3   
 1010eaf:	int3   
 1010eb0:	int3   
 1010eb1:	int3   
 1010eb2:	int3   
 1010eb3:	int3   
 1010eb4:	int3   
 1010eb5:	int3   
 1010eb6:	int3   
 1010eb7:	int3   
 1010eb8:	int3   
 1010eb9:	int3   
 1010eba:	int3   
 1010ebb:	int3   
 1010ebc:	int3   
 1010ebd:	int3   
 1010ebe:	int3   
 1010ebf:	int3   
 1010ec0:	mov    DWORD PTR [rcx+0x4],edx
 1010ec3:	mov    eax,0x1
 1010ec8:	mov    edx,0x2
 1010ecd:	lock cmpxchg DWORD PTR [rcx],edx
 1010ed1:	ret    
 1010ed2:	int3   
 1010ed3:	int3   
 1010ed4:	int3   
 1010ed5:	int3   
 1010ed6:	int3   
 1010ed7:	int3   
 1010ed8:	int3   
 1010ed9:	int3   
 1010eda:	int3   
 1010edb:	int3   
 1010edc:	int3   
 1010edd:	int3   
 1010ede:	int3   
 1010edf:	int3   
 1010ee0:	mov    QWORD PTR [rsp+0x8],rbx
 1010ee5:	mov    QWORD PTR [rsp+0x18],rbp
 1010eea:	mov    QWORD PTR [rsp+0x20],rsi
 1010eef:	push   rdi
 1010ef0:	sub    rsp,0x30
 1010ef4:	xor    ebp,ebp
 1010ef6:	test   rdx,rdx
 1010ef9:	mov    rbx,r8
 1010efc:	mov    rdi,rdx
 1010eff:	mov    rsi,rcx
 1010f02:	mov    QWORD PTR [rsp+0x48],rbp
 1010f07:	je     0x1010f76
 1010f09:	test   rcx,rcx
 1010f0c:	je     0x1010f76
 1010f0e:	test   rbx,rbx
 1010f11:	je     0x1010f76
 1010f13:	lea    r8d,[rbp+0x1]
 1010f17:	mov    rdx,rbx
 1010f1a:	mov    rcx,rdi
 1010f1d:	call   0x1010c90
 1010f22:	test   eax,eax
 1010f24:	jne    0x1010f2d
 1010f26:	mov    eax,0x800703e6
 1010f2b:	jmp    0x1010f7b
 1010f2d:	call   QWORD PTR [rip+0xffffffffffff02c5]        # 0x10011f8
 1010f33:	mov    r9,rbx
 1010f36:	mov    r8,rsi
 1010f39:	mov    rcx,rax
 1010f3c:	lea    rax,[rsp+0x48]
 1010f41:	mov    rdx,rdi
 1010f44:	mov    QWORD PTR [rsp+0x20],rax
 1010f49:	call   QWORD PTR [rip+0xffffffffffff01a9]        # 0x10010f8
 1010f4f:	test   eax,eax
 1010f51:	je     0x1010f62
 1010f53:	cmp    QWORD PTR [rsp+0x48],rbx
 1010f58:	mov    eax,0x8007012b
 1010f5d:	cmove  eax,ebp
 1010f60:	jmp    0x1010f7b
 1010f62:	call   QWORD PTR [rip+0xffffffffffff0310]        # 0x1001278
 1010f68:	test   eax,eax
 1010f6a:	jle    0x1010f7b
 1010f6c:	movzx  eax,ax
 1010f6f:	or     eax,0x80070000
 1010f74:	jmp    0x1010f7b
 1010f76:	mov    eax,0x80070057
 1010f7b:	mov    rbx,QWORD PTR [rsp+0x40]
 1010f80:	mov    rbp,QWORD PTR [rsp+0x50]
 1010f85:	mov    rsi,QWORD PTR [rsp+0x58]
 1010f8a:	add    rsp,0x30
 1010f8e:	pop    rdi
 1010f8f:	ret    
 1010f90:	int3   
 1010f91:	int3   
 1010f92:	int3   
 1010f93:	int3   
 1010f94:	int3   
 1010f95:	int3   
 1010f96:	int3   
 1010f97:	int3   
 1010f98:	int3   
 1010f99:	int3   
 1010f9a:	int3   
 1010f9b:	int3   
 1010f9c:	int3   
 1010f9d:	int3   
 1010f9e:	int3   
 1010f9f:	int3   
 1010fa0:	mov    QWORD PTR [rsp+0x18],r8
 1010fa5:	mov    QWORD PTR [rsp+0x20],r9
 1010faa:	push   rsi
 1010fab:	push   rdi
 1010fac:	sub    rsp,0x48
 1010fb0:	cmp    rdx,0x7fffffff
 1010fb7:	mov    rsi,rdx
 1010fba:	mov    rdi,rcx
 1010fbd:	jbe    0x1010fcb
 1010fbf:	mov    eax,0x80070057
 1010fc4:	add    rsp,0x48
 1010fc8:	pop    rdi
 1010fc9:	pop    rsi
 1010fca:	ret    
 1010fcb:	test   rcx,rcx
 1010fce:	mov    QWORD PTR [rsp+0x40],rbx
 1010fd3:	je     0x101100b
 1010fd5:	mov    rcx,rdx
 1010fd8:	xor    edx,edx
 1010fda:	test   rsi,rsi
 1010fdd:	mov    rax,rdi
 1010fe0:	je     0x1010ff1
 1010fe2:	cmp    WORD PTR [rax],dx
 1010fe5:	je     0x1010ffe
 1010fe7:	add    rax,0x2
 1010feb:	sub    rcx,0x1
 1010fef:	jne    0x1010fe2
 1010ff1:	mov    edx,0x80070057
 1010ff6:	xor    ebx,ebx
 1010ff8:	test   edx,edx
 1010ffa:	jns    0x1011012
 1010ffc:	jmp    0x1011010
 1010ffe:	test   rcx,rcx
 1011001:	je     0x1010ff1
 1011003:	mov    rbx,rsi
 1011006:	sub    rbx,rcx
 1011009:	jmp    0x1010ff8
 101100b:	mov    edx,0x80070057
 1011010:	xor    ebx,ebx
 1011012:	test   edx,edx
 1011014:	js     0x10110bc
 101101a:	mov    QWORD PTR [rsp+0x38],rbp
 101101f:	mov    QWORD PTR [rsp+0x30],r12
 1011024:	lea    r12,[rsp+0x78]
 1011029:	call   0x10078b0
 101102e:	sub    rsi,rbx
 1011031:	lea    rbp,[rdi+rbx*2]
 1011035:	mov    edi,0x0
 101103a:	je     0x1011045
 101103c:	cmp    rsi,0x7fffffff
 1011043:	jbe    0x101104a
 1011045:	mov    edi,0x80070057
 101104a:	test   edi,edi
 101104c:	js     0x10110a4
 101104e:	mov    r8,QWORD PTR [rsp+0x70]
 1011053:	lea    rbx,[rsi-0x1]
 1011057:	mov    r9,rax
 101105a:	mov    rcx,rbp
 101105d:	mov    rdx,rbx
 1011060:	xor    edi,edi
 1011062:	mov    QWORD PTR [rsp+0x20],r12
 1011067:	call   QWORD PTR [rip+0xffffffffffff031b]        # 0x1001388
 101106d:	test   eax,eax
 101106f:	js     0x101109a
 1011071:	cdqe   
 1011073:	cmp    rax,rbx
 1011076:	ja     0x101109a
 1011078:	cmp    rax,rbx
 101107b:	jne    0x10110a4
 101107d:	mov    r12,QWORD PTR [rsp+0x30]
 1011082:	mov    WORD PTR [rbp+rbx*2+0x0],di
 1011087:	mov    rbp,QWORD PTR [rsp+0x38]
 101108c:	mov    rbx,QWORD PTR [rsp+0x40]
 1011091:	mov    eax,edi
 1011093:	add    rsp,0x48
 1011097:	pop    rdi
 1011098:	pop    rsi
 1011099:	ret    
 101109a:	mov    WORD PTR [rbp+rbx*2+0x0],di
 101109f:	mov    edi,0x8007007a
 10110a4:	mov    r12,QWORD PTR [rsp+0x30]
 10110a9:	mov    rbp,QWORD PTR [rsp+0x38]
 10110ae:	mov    rbx,QWORD PTR [rsp+0x40]
 10110b3:	mov    eax,edi
 10110b5:	add    rsp,0x48
 10110b9:	pop    rdi
 10110ba:	pop    rsi
 10110bb:	ret    
 10110bc:	mov    eax,edx
 10110be:	mov    rbx,QWORD PTR [rsp+0x40]
 10110c3:	add    rsp,0x48
 10110c7:	pop    rdi
 10110c8:	pop    rsi
 10110c9:	ret    
 10110ca:	int3   
 10110cb:	int3   
 10110cc:	int3   
 10110cd:	int3   
 10110ce:	int3   
 10110cf:	int3   
 10110d0:	mov    QWORD PTR [rsp+0x8],rbx
 10110d5:	mov    QWORD PTR [rsp+0x10],rbp
 10110da:	mov    QWORD PTR [rsp+0x18],rsi
 10110df:	push   rdi
 10110e0:	sub    rsp,0x40
 10110e4:	xor    ebx,ebx
 10110e6:	test   r9,r9
 10110e9:	lea    r10d,[r9+r9*1]
 10110ed:	mov    rdi,r9
 10110f0:	mov    rsi,r8
 10110f3:	mov    r11,rdx
 10110f6:	mov    DWORD PTR [rsp+0x30],r10d
 10110fb:	mov    rbp,rcx
 10110fe:	mov    DWORD PTR [rsp+0x68],ebx
 1011102:	je     0x1011153
 1011104:	cmp    r9,0x7fffffff
 101110b:	ja     0x1011153
 101110d:	mov    r8,r9
 1011110:	mov    ecx,0x7ffffffe
 1011115:	mov    rdx,rsi
 1011118:	sub    rcx,r9
 101111b:	lea    r9,[rip+0xffffffffffff3bfa]        # 0x1004d1c
 1011122:	sub    r9,rsi
 1011125:	lea    rax,[rcx+r8*1]
 1011129:	test   rax,rax
 101112c:	je     0x1011147
 101112e:	movzx  eax,WORD PTR [r9+rdx*1]
 1011133:	test   ax,ax
 1011136:	je     0x1011147
 1011138:	mov    WORD PTR [rdx],ax
 101113b:	add    rdx,0x2
 101113f:	sub    r8,0x1
 1011143:	jne    0x1011125
 1011145:	jmp    0x101114c
 1011147:	test   r8,r8
 101114a:	jne    0x1011150
 101114c:	sub    rdx,0x2
 1011150:	mov    WORD PTR [rdx],bx
 1011153:	mov    eax,r10d
 1011156:	cmp    rax,rdi
 1011159:	jae    0x1011162
 101115b:	mov    eax,0x80070057
 1011160:	jmp    0x10111d1
 1011162:	lea    rax,[rsp+0x30]
 1011167:	lea    r9,[rsp+0x68]
 101116c:	xor    r8d,r8d
 101116f:	mov    QWORD PTR [rsp+0x28],rax
 1011174:	mov    rdx,r11
 1011177:	mov    rcx,rbp
 101117a:	mov    QWORD PTR [rsp+0x20],rsi
 101117f:	call   QWORD PTR [rip+0xfffffffffffeff13]        # 0x1001098
 1011185:	test   eax,eax
 1011187:	jne    0x10111c0
 1011189:	cmp    DWORD PTR [rsp+0x68],0x1
 101118e:	jne    0x10111b9
 1011190:	mov    eax,DWORD PTR [rsp+0x30]
 1011194:	test   al,0x1
 1011196:	jne    0x10111b9
 1011198:	cmp    eax,0x2
 101119b:	jb     0x10111b9
 101119d:	shr    rax,1
 10111a0:	cmp    WORD PTR [rsi+rax*2-0x2],bx
 10111a5:	je     0x10111cf
 10111a7:	cmp    rax,rdi
 10111aa:	jae    0x10111b2
 10111ac:	mov    WORD PTR [rsi+rax*2],bx
 10111b0:	jmp    0x10111cf
 10111b2:	mov    ebx,0x8007007a
 10111b7:	jmp    0x10111cf
 10111b9:	mov    ebx,0x8007000b
 10111be:	jmp    0x10111cf
 10111c0:	jg     0x10111c6
 10111c2:	mov    ebx,eax
 10111c4:	jmp    0x10111cf
 10111c6:	movzx  ebx,ax
 10111c9:	or     ebx,0x80070000
 10111cf:	mov    eax,ebx
 10111d1:	mov    rbx,QWORD PTR [rsp+0x50]
 10111d6:	mov    rbp,QWORD PTR [rsp+0x58]
 10111db:	mov    rsi,QWORD PTR [rsp+0x60]
 10111e0:	add    rsp,0x40
 10111e4:	pop    rdi
 10111e5:	ret    
 10111e6:	int3   
 10111e7:	int3   
 10111e8:	int3   
 10111e9:	int3   
 10111ea:	int3   
 10111eb:	int3   
 10111ec:	int3   
 10111ed:	int3   
 10111ee:	int3   
 10111ef:	int3   
 10111f0:	mov    rax,QWORD PTR [rcx]
 10111f3:	xor    edx,edx
 10111f5:	rex.W jmp QWORD PTR [rax+0x18]
 10111f9:	int3   
 10111fa:	int3   
 10111fb:	int3   
 10111fc:	int3   
 10111fd:	int3   
 10111fe:	int3   
 10111ff:	int3   
 1011200:	lea    rax,[rcx+0x10]
 1011204:	ret    
 1011205:	int3   
 1011206:	int3   
 1011207:	int3   
 1011208:	int3   
 1011209:	int3   
 101120a:	int3   
 101120b:	int3   
 101120c:	int3   
 101120d:	int3   
 101120e:	int3   
 101120f:	int3   
 1011210:	rex push rbx
 1011212:	sub    rsp,0x20
 1011216:	mov    rax,rdx
 1011219:	xor    ebx,ebx
 101121b:	xor    edx,edx
 101121d:	mov    rcx,rax
 1011220:	call   0x1010a90
 1011225:	jmp    0x1011240
 1011227:	mov    ebx,eax
 1011229:	cmp    eax,0xc00000fd
 101122e:	jne    0x1011236
 1011230:	call   QWORD PTR [rip+0xffffffffffff0192]        # 0x10013c8
 1011236:	mov    eax,0x80004005
 101123b:	test   ebx,ebx
 101123d:	cmovns ebx,eax
 1011240:	mov    eax,ebx
 1011242:	add    rsp,0x20
 1011246:	pop    rbx
 1011247:	ret    
 1011248:	int3   
 1011249:	int3   
 101124a:	int3   
 101124b:	int3   
 101124c:	int3   
 101124d:	int3   
 101124e:	int3   
 101124f:	int3   
 1011250:	rex push rbx
 1011252:	sub    rsp,0x20
 1011256:	xor    r9d,r9d
 1011259:	lea    rbx,[rip+0xfffffffffffeeda0]        # 0x1000000
 1011260:	mov    r10,r8
 1011263:	mov    QWORD PTR [r8],r9
 1011266:	mov    r11,QWORD PTR [rbx+0x3ce8]
 101126d:	cmp    r11,QWORD PTR [rdx]
 1011270:	jne    0x1011284
 1011272:	mov    r11,QWORD PTR [rbx+0x3cf0]
 1011279:	cmp    r11,QWORD PTR [rdx+0x8]
 101127d:	jne    0x1011284
 101127f:	mov    eax,r9d
 1011282:	jmp    0x1011289
 1011284:	sbb    eax,eax
 1011286:	sbb    eax,0xffffffff
 1011289:	test   eax,eax
 101128b:	jne    0x101129e
 101128d:	mov    QWORD PTR [r8],rcx
 1011290:	mov    rax,QWORD PTR [rcx]
 1011293:	call   QWORD PTR [rax+0x8]
 1011296:	xor    eax,eax
 1011298:	add    rsp,0x20
 101129c:	pop    rbx
 101129d:	ret    
 101129e:	mov    r8,QWORD PTR [rbx+0x3cd8]
 10112a5:	cmp    r8,QWORD PTR [rdx]
 10112a8:	jne    0x10112b7
 10112aa:	mov    r8,QWORD PTR [rbx+0x3ce0]
 10112b1:	cmp    r8,QWORD PTR [rdx+0x8]
 10112b5:	je     0x10112bf
 10112b7:	sbb    eax,eax
 10112b9:	sbb    eax,0xffffffff
 10112bc:	mov    r9d,eax
 10112bf:	test   r9d,r9d
 10112c2:	jne    0x10112d5
 10112c4:	mov    QWORD PTR [r10],rcx
 10112c7:	mov    rax,QWORD PTR [rcx]
 10112ca:	call   QWORD PTR [rax+0x8]
 10112cd:	xor    eax,eax
 10112cf:	add    rsp,0x20
 10112d3:	pop    rbx
 10112d4:	ret    
 10112d5:	mov    eax,0x80004002
 10112da:	add    rsp,0x20
 10112de:	pop    rbx
 10112df:	ret    
 10112e0:	int3   
 10112e1:	int3   
 10112e2:	int3   
 10112e3:	int3   
 10112e4:	int3   
 10112e5:	int3   
 10112e6:	int3   
 10112e7:	int3   
 10112e8:	int3   
 10112e9:	int3   
 10112ea:	int3   
 10112eb:	int3   
 10112ec:	int3   
 10112ed:	int3   
 10112ee:	int3   
 10112ef:	int3   
 10112f0:	mov    eax,0x1
 10112f5:	ret    
 10112f6:	int3   
 10112f7:	int3   
 10112f8:	int3   
 10112f9:	int3   
 10112fa:	int3   
 10112fb:	int3   
 10112fc:	int3   
 10112fd:	int3   
 10112fe:	int3   
 10112ff:	int3   
 1011300:	mov    eax,0x1
 1011305:	ret    
 1011306:	int3   
 1011307:	int3   
 1011308:	int3   
 1011309:	int3   
 101130a:	int3   
 101130b:	int3   
 101130c:	int3   
 101130d:	int3   
 101130e:	int3   
 101130f:	int3   
 1011310:	rex push rbx
 1011312:	sub    rsp,0x20
 1011316:	add    rcx,0x8
 101131a:	mov    rbx,rdx
 101131d:	call   0x1010c00
 1011322:	mov    DWORD PTR [rbx],eax
 1011324:	xor    eax,eax
 1011326:	add    rsp,0x20
 101132a:	pop    rbx
 101132b:	ret    
 101132c:	int3   
 101132d:	int3   
 101132e:	int3   
 101132f:	int3   
 1011330:	int3   
 1011331:	int3   
 1011332:	int3   
 1011333:	int3   
 1011334:	int3   
 1011335:	int3   
 1011336:	int3   
 1011337:	int3   
 1011338:	int3   
 1011339:	int3   
 101133a:	int3   
 101133b:	int3   
 101133c:	int3   
 101133d:	int3   
 101133e:	int3   
 101133f:	int3   
 1011340:	mov    eax,DWORD PTR [rcx+0x1b50]
 1011346:	ret    
 1011347:	int3   
 1011348:	int3   
 1011349:	int3   
 101134a:	int3   
 101134b:	int3   
 101134c:	int3   
 101134d:	int3   
 101134e:	int3   
 101134f:	int3   
 1011350:	mov    QWORD PTR [rcx+0x1b58],rdx
 1011357:	xor    eax,eax
 1011359:	ret    
 101135a:	int3   
 101135b:	int3   
 101135c:	int3   
 101135d:	int3   
 101135e:	int3   
 101135f:	int3   
 1011360:	mov    rax,QWORD PTR [rcx+0x1b58]
 1011367:	test   rax,rax
 101136a:	je     0x1011372
 101136c:	mov    rcx,rdx
 101136f:	rex.W jmp rax
 1011372:	mov    eax,0x80004001
 1011377:	ret    
 1011378:	int3   
 1011379:	int3   
 101137a:	int3   
 101137b:	int3   
 101137c:	int3   
 101137d:	int3   
 101137e:	int3   
 101137f:	int3   
 1011380:	lea    rax,[rcx+0x1740]
 1011387:	ret    
 1011388:	int3   
 1011389:	int3   
 101138a:	int3   
 101138b:	int3   
 101138c:	int3   
 101138d:	int3   
 101138e:	int3   
 101138f:	int3   
 1011390:	mov    QWORD PTR [rsp+0x8],rbx
 1011395:	mov    QWORD PTR [rsp+0x10],rsi
 101139a:	push   rdi
 101139b:	push   r12
 101139d:	push   r13
 101139f:	sub    rsp,0x30
 10113a3:	mov    r12,r8
 10113a6:	mov    r13,rdx
 10113a9:	mov    rdi,rcx
 10113ac:	xor    esi,esi
 10113ae:	mov    ebx,esi
 10113b0:	mov    DWORD PTR [rsp+0x20],ebx
 10113b4:	mov    DWORD PTR [rsp+0x68],esi
 10113b8:	call   0x1010b00
 10113bd:	test   rax,rax
 10113c0:	je     0x101145a
 10113c6:	mov    QWORD PTR [rsp+0x28],rsi
 10113cb:	mov    rcx,rdi
 10113ce:	call   0x1010b00
 10113d3:	mov    r9,QWORD PTR [rax]
 10113d6:	lea    r8,[rsp+0x28]
 10113db:	lea    rdx,[rip+0xffffffffffff2916]        # 0x1003cf8
 10113e2:	mov    rcx,rax
 10113e5:	call   QWORD PTR [r9]
 10113e8:	mov    ebx,eax
 10113ea:	mov    DWORD PTR [rsp+0x20],eax
 10113ee:	test   eax,eax
 10113f0:	js     0x101145a
 10113f2:	mov    rcx,QWORD PTR [rsp+0x28]
 10113f7:	test   rcx,rcx
 10113fa:	je     0x1011451
 10113fc:	mov    edi,esi
 10113fe:	mov    DWORD PTR [rsp+0x24],esi
 1011402:	mov    rax,QWORD PTR [rcx]
 1011405:	mov    r8,r12
 1011408:	mov    rdx,r13
 101140b:	call   QWORD PTR [rax+0x18]
 101140e:	mov    ebx,eax
 1011410:	mov    DWORD PTR [rsp+0x20],eax
 1011414:	jmp    0x101143b
 1011416:	mov    edi,eax
 1011418:	cmp    eax,0xc00000fd
 101141d:	jne    0x1011425
 101141f:	call   QWORD PTR [rip+0xfffffffffffeffa3]        # 0x10013c8
 1011425:	mov    eax,0x80004005
 101142a:	test   edi,edi
 101142c:	cmovns edi,eax
 101142f:	mov    DWORD PTR [rsp+0x24],edi
 1011433:	mov    ebx,DWORD PTR [rsp+0x20]
 1011437:	mov    esi,DWORD PTR [rsp+0x68]
 101143b:	test   ebx,ebx
 101143d:	cmovns ebx,edi
 1011440:	mov    DWORD PTR [rsp+0x20],ebx
 1011444:	mov    rcx,QWORD PTR [rsp+0x28]
 1011449:	mov    rax,QWORD PTR [rcx]
 101144c:	call   QWORD PTR [rax+0x10]
 101144f:	jmp    0x101145a
 1011451:	mov    ebx,0x80070057
 1011456:	mov    DWORD PTR [rsp+0x20],ebx
 101145a:	jmp    0x101147b
 101145c:	mov    ebx,eax
 101145e:	cmp    eax,0xc00000fd
 1011463:	jne    0x101146b
 1011465:	call   QWORD PTR [rip+0xfffffffffffeff5d]        # 0x10013c8
 101146b:	mov    eax,0x80004005
 1011470:	test   ebx,ebx
 1011472:	cmovns ebx,eax
 1011475:	mov    esi,ebx
 1011477:	mov    ebx,DWORD PTR [rsp+0x20]
 101147b:	test   ebx,ebx
 101147d:	cmovns ebx,esi
 1011480:	mov    eax,ebx
 1011482:	mov    rbx,QWORD PTR [rsp+0x50]
 1011487:	mov    rsi,QWORD PTR [rsp+0x58]
 101148c:	add    rsp,0x30
 1011490:	pop    r13
 1011492:	pop    r12
 1011494:	pop    rdi
 1011495:	ret    
 1011496:	int3   
 1011497:	int3   
 1011498:	int3   
 1011499:	int3   
 101149a:	int3   
 101149b:	int3   
 101149c:	int3   
 101149d:	int3   
 101149e:	int3   
 101149f:	int3   
 10114a0:	mov    QWORD PTR [rsp+0x10],rbx
 10114a5:	mov    QWORD PTR [rsp+0x18],rsi
 10114aa:	mov    QWORD PTR [rsp+0x20],rdi
 10114af:	mov    QWORD PTR [rsp+0x8],rcx
 10114b4:	push   r12
 10114b6:	sub    rsp,0x30
 10114ba:	mov    r12,rdx
 10114bd:	mov    rsi,rcx
 10114c0:	xor    edi,edi
 10114c2:	mov    DWORD PTR [rsp+0x20],edi
 10114c6:	add    rcx,0x8
 10114ca:	call   0x1010c00
 10114cf:	test   eax,eax
 10114d1:	je     0x1011552
 10114d3:	mov    edx,0x4e20
 10114d8:	mov    rcx,QWORD PTR [rsi+0x18]
 10114dc:	call   QWORD PTR [rip+0xfffffffffffefd76]        # 0x1001258
 10114e2:	test   eax,eax
 10114e4:	je     0x101150c
 10114e6:	cmp    eax,0x80
 10114eb:	je     0x101150c
 10114ed:	call   QWORD PTR [rip+0xfffffffffffefd85]        # 0x1001278
 10114f3:	mov    ebx,eax
 10114f5:	test   eax,eax
 10114f7:	jle    0x1011502
 10114f9:	movzx  ebx,ax
 10114fc:	or     ebx,0x80070000
 1011502:	mov    rcx,r12
 1011505:	call   0x1010af0
 101150a:	jmp    0x101155f
 101150c:	mov    rdx,r12
 101150f:	mov    rcx,rsi
 1011512:	call   0x1011210
 1011517:	mov    ebx,eax
 1011519:	mov    DWORD PTR [rsp+0x20],eax
 101151d:	jmp    0x1011541
 101151f:	mov    edi,eax
 1011521:	cmp    eax,0xc00000fd
 1011526:	jne    0x101152e
 1011528:	call   QWORD PTR [rip+0xfffffffffffefe9a]        # 0x10013c8
 101152e:	mov    eax,0x80004005
 1011533:	test   edi,edi
 1011535:	cmovns edi,eax
 1011538:	mov    rsi,QWORD PTR [rsp+0x40]
 101153d:	mov    ebx,DWORD PTR [rsp+0x20]
 1011541:	test   ebx,ebx
 1011543:	cmovns ebx,edi
 1011546:	mov    rcx,QWORD PTR [rsi+0x18]
 101154a:	call   QWORD PTR [rip+0xfffffffffffefbe0]        # 0x1001130
 1011550:	jmp    0x101155f
 1011552:	mov    rdx,r12
 1011555:	mov    rcx,rsi
 1011558:	call   0x1011210
 101155d:	mov    ebx,eax
 101155f:	mov    eax,ebx
 1011561:	mov    rbx,QWORD PTR [rsp+0x48]
 1011566:	mov    rsi,QWORD PTR [rsp+0x50]
 101156b:	mov    rdi,QWORD PTR [rsp+0x58]
 1011570:	add    rsp,0x30
 1011574:	pop    r12
 1011576:	ret    
 1011577:	int3   
 1011578:	int3   
 1011579:	int3   
 101157a:	int3   
 101157b:	int3   
 101157c:	int3   
 101157d:	int3   
 101157e:	int3   
 101157f:	int3   
 1011580:	mov    QWORD PTR [rsp+0x10],rbx
 1011585:	mov    QWORD PTR [rsp+0x18],rsi
 101158a:	mov    QWORD PTR [rsp+0x8],rcx
 101158f:	push   rdi
 1011590:	sub    rsp,0x30
 1011594:	mov    rsi,rcx
 1011597:	xor    ebx,ebx
 1011599:	mov    DWORD PTR [rsp+0x20],ebx
 101159d:	lea    rax,[rcx+0xe8]
 10115a4:	cmp    rdx,rax
 10115a7:	jne    0x10115ee
 10115a9:	mov    edi,ebx
 10115ab:	mov    rcx,rdx
 10115ae:	call   0x1012670
 10115b3:	mov    ebx,eax
 10115b5:	mov    DWORD PTR [rsp+0x20],eax
 10115b9:	jmp    0x10115dd
 10115bb:	mov    edi,eax
 10115bd:	cmp    eax,0xc00000fd
 10115c2:	jne    0x10115ca
 10115c4:	call   QWORD PTR [rip+0xfffffffffffefdfe]        # 0x10013c8
 10115ca:	mov    eax,0x80004005
 10115cf:	test   edi,edi
 10115d1:	cmovns edi,eax
 10115d4:	mov    rsi,QWORD PTR [rsp+0x40]
 10115d9:	mov    ebx,DWORD PTR [rsp+0x20]
 10115dd:	test   ebx,ebx
 10115df:	cmovns ebx,edi
 10115e2:	mov    rcx,QWORD PTR [rsi+0x20]
 10115e6:	call   QWORD PTR [rip+0xfffffffffffefb44]        # 0x1001130
 10115ec:	jmp    0x10115fc
 10115ee:	test   rdx,rdx
 10115f1:	je     0x10115fc
 10115f3:	add    rcx,0x10
 10115f7:	call   0x10109e0
 10115fc:	mov    eax,ebx
 10115fe:	mov    rbx,QWORD PTR [rsp+0x48]
 1011603:	mov    rsi,QWORD PTR [rsp+0x50]
 1011608:	add    rsp,0x30
 101160c:	pop    rdi
 101160d:	ret    
 101160e:	int3   
 101160f:	int3   
 1011610:	int3   
 1011611:	int3   
 1011612:	int3   
 1011613:	int3   
 1011614:	int3   
 1011615:	int3   
 1011616:	int3   
 1011617:	int3   
 1011618:	int3   
 1011619:	int3   
 101161a:	int3   
 101161b:	int3   
 101161c:	int3   
 101161d:	int3   
 101161e:	int3   
 101161f:	int3   
 1011620:	mov    rdx,QWORD PTR [rcx]
 1011623:	test   rdx,rdx
 1011626:	je     0x1011661
 1011628:	mov    eax,DWORD PTR [rdx+0xc]
 101162b:	cmp    QWORD PTR [rcx+0x8],rax
 101162f:	jb     0x101163f
 1011631:	mov    rax,QWORD PTR [rdx]
 1011634:	mov    QWORD PTR [rcx+0x8],0x0
 101163c:	mov    QWORD PTR [rcx],rax
 101163f:	mov    rdx,QWORD PTR [rcx]
 1011642:	test   rdx,rdx
 1011645:	je     0x1011661
 1011647:	mov    r8,QWORD PTR [rcx+0x8]
 101164b:	mov    eax,DWORD PTR [rdx+0xc]
 101164e:	cmp    r8,rax
 1011651:	jae    0x1011661
 1011653:	lea    rax,[r8+0x1]
 1011657:	mov    QWORD PTR [rcx+0x8],rax
 101165b:	lea    rax,[rdx+r8*8+0x18]
 1011660:	ret    
 1011661:	xor    eax,eax
 1011663:	ret    
 1011664:	int3   
 1011665:	int3   
 1011666:	int3   
 1011667:	int3   
 1011668:	int3   
 1011669:	int3   
 101166a:	int3   
 101166b:	int3   
 101166c:	int3   
 101166d:	int3   
 101166e:	int3   
 101166f:	int3   
 1011670:	rex push rdi
 1011672:	sub    rsp,0xab0
 1011679:	mov    rax,QWORD PTR [rip+0x9ab0]        # 0x101b130
 1011680:	xor    rax,rsp
 1011683:	mov    QWORD PTR [rsp+0xaa0],rax
 101168b:	mov    rdi,rcx
 101168e:	xor    ecx,ecx
 1011690:	call   QWORD PTR [rip+0xfffffffffffefb82]        # 0x1001218
 1011696:	lea    rdx,[rsp+0x260]
 101169e:	mov    r8d,0x104
 10116a4:	mov    rcx,rax
 10116a7:	call   QWORD PTR [rip+0xfffffffffffefa3b]        # 0x10010e8
 10116ad:	test   eax,eax
 10116af:	je     0x10117ab
 10116b5:	mov    QWORD PTR [rsp+0x40],0x105
 10116be:	lea    rax,[rsp+0x680]
 10116c6:	lea    r9,[rsp+0x470]
 10116ce:	mov    QWORD PTR [rsp+0x38],rax
 10116d3:	lea    rax,[rsp+0x890]
 10116db:	mov    QWORD PTR [rsp+0x30],0x105
 10116e4:	mov    QWORD PTR [rsp+0x28],rax
 10116e9:	lea    rdx,[rsp+0x50]
 10116ee:	lea    rcx,[rsp+0x260]
 10116f6:	mov    r8d,0x105
 10116fc:	mov    QWORD PTR [rsp+0x20],0x105
 1011705:	mov    QWORD PTR [rsp+0xac8],rbx
 101170d:	mov    WORD PTR [rsp+0x468],0x0
 1011717:	call   QWORD PTR [rip+0xfffffffffffefcb3]        # 0x10013d0
 101171d:	lea    rbx,[rdi+0x1948]
 1011724:	lea    r9,[rsp+0x470]
 101172c:	lea    r8,[rsp+0x50]
 1011731:	mov    rcx,rbx
 1011734:	mov    edx,0x104
 1011739:	mov    QWORD PTR [rsp+0x28],0x0
 1011742:	mov    WORD PTR [rsp+0x56],0x0
 1011749:	mov    WORD PTR [rsp+0x670],0x0
 1011753:	mov    WORD PTR [rbx],0x0
 1011758:	mov    QWORD PTR [rsp+0x20],0x0
 1011761:	call   QWORD PTR [rip+0xfffffffffffefc19]        # 0x1001380
 1011767:	mov    WORD PTR [rdi+0x1b4e],0x0
 1011770:	call   0x10078b0
 1011775:	mov    r9,rax
 1011778:	lea    rax,[rip+0xffffffffffff2539]        # 0x1003cb8
 101177f:	lea    rcx,[rdi+0x1740]
 1011786:	mov    QWORD PTR [rsp+0x28],rax
 101178b:	lea    r8,[rip+0xffffffffffff2576]        # 0x1003d08
 1011792:	mov    edx,0x104
 1011797:	mov    QWORD PTR [rsp+0x20],rbx
 101179c:	call   0x100a460
 10117a1:	mov    rbx,QWORD PTR [rsp+0xac8]
 10117a9:	jmp    0x10117ad
 10117ab:	xor    eax,eax
 10117ad:	mov    rcx,QWORD PTR [rsp+0xaa0]
 10117b5:	xor    rcx,rsp
 10117b8:	call   0x1009d50
 10117bd:	add    rsp,0xab0
 10117c4:	pop    rdi
 10117c5:	ret    
 10117c6:	int3   
 10117c7:	int3   
 10117c8:	int3   
 10117c9:	int3   
 10117ca:	int3   
 10117cb:	int3   
 10117cc:	int3   
 10117cd:	int3   
 10117ce:	int3   
 10117cf:	int3   
 10117d0:	mov    QWORD PTR [rsp+0x10],rbx
 10117d5:	mov    QWORD PTR [rsp+0x18],rsi
 10117da:	mov    QWORD PTR [rsp+0x20],rdi
 10117df:	mov    QWORD PTR [rsp+0x8],rcx
 10117e4:	push   r12
 10117e6:	sub    rsp,0x40
 10117ea:	mov    r12,rdx
 10117ed:	mov    rsi,rcx
 10117f0:	xor    ebx,ebx
 10117f2:	mov    DWORD PTR [rsp+0x20],ebx
 10117f6:	mov    edx,0x4e20
 10117fb:	mov    rcx,QWORD PTR [rcx+0x18]
 10117ff:	call   QWORD PTR [rip+0xfffffffffffefa53]        # 0x1001258
 1011805:	test   eax,eax
 1011807:	je     0x1011827
 1011809:	cmp    eax,0x80
 101180e:	je     0x1011827
 1011810:	call   QWORD PTR [rip+0xfffffffffffefa62]        # 0x1001278
 1011816:	mov    ebx,eax
 1011818:	test   eax,eax
 101181a:	jle    0x101189b
 101181c:	movzx  ebx,ax
 101181f:	or     ebx,0x80070000
 1011825:	jmp    0x101189b
 1011827:	mov    edi,ebx
 1011829:	lea    rax,[rsi+0x28]
 101182d:	mov    QWORD PTR [rsp+0x28],rax
 1011832:	mov    QWORD PTR [rsp+0x30],rbx
 1011837:	data16 xchg ax,ax
 101183a:	data16 xchg ax,ax
 101183d:	data16 xchg ax,ax
 1011840:	lea    rcx,[rsp+0x28]
 1011845:	call   0x1011620
 101184a:	test   rax,rax
 101184d:	je     0x1011868
 101184f:	mov    r8,r12
 1011852:	mov    rdx,rsi
 1011855:	mov    rcx,rax
 1011858:	call   0x1011390
 101185d:	test   ebx,ebx
 101185f:	cmovns ebx,eax
 1011862:	mov    DWORD PTR [rsp+0x20],ebx
 1011866:	jmp    0x1011840
 1011868:	jmp    0x101188c
 101186a:	mov    edi,eax
 101186c:	cmp    eax,0xc00000fd
 1011871:	jne    0x1011879
 1011873:	call   QWORD PTR [rip+0xfffffffffffefb4f]        # 0x10013c8
 1011879:	mov    eax,0x80004005
 101187e:	test   edi,edi
 1011880:	cmovns edi,eax
 1011883:	mov    rsi,QWORD PTR [rsp+0x50]
 1011888:	mov    ebx,DWORD PTR [rsp+0x20]
 101188c:	mov    rcx,QWORD PTR [rsi+0x18]
 1011890:	call   QWORD PTR [rip+0xfffffffffffef89a]        # 0x1001130
 1011896:	test   ebx,ebx
 1011898:	cmovns ebx,edi
 101189b:	mov    eax,ebx
 101189d:	mov    rbx,QWORD PTR [rsp+0x58]
 10118a2:	mov    rsi,QWORD PTR [rsp+0x60]
 10118a7:	mov    rdi,QWORD PTR [rsp+0x68]
 10118ac:	add    rsp,0x40
 10118b0:	pop    r12
 10118b2:	ret    
 10118b3:	int3   
 10118b4:	int3   
 10118b5:	int3   
 10118b6:	int3   
 10118b7:	int3   
 10118b8:	int3   
 10118b9:	int3   
 10118ba:	int3   
 10118bb:	int3   
 10118bc:	int3   
 10118bd:	int3   
 10118be:	int3   
 10118bf:	int3   
 10118c0:	rex push rbx
 10118c2:	sub    rsp,0x30
 10118c6:	test   rdx,rdx
 10118c9:	mov    rbx,rcx
 10118cc:	je     0x101197a
 10118d2:	mov    QWORD PTR [rsp+0x40],rdi
 10118d7:	lea    rdi,[rcx+0x1948]
 10118de:	xor    r10d,r10d
 10118e1:	mov    r8,rdi
 10118e4:	sub    rdx,rdi
 10118e7:	mov    r9d,0x104
 10118ed:	data16 xchg ax,ax
 10118f0:	lea    rax,[r9+0x7ffffefa]
 10118f7:	test   rax,rax
 10118fa:	je     0x1011916
 10118fc:	movzx  eax,WORD PTR [rdx+r8*1]
 1011901:	test   ax,ax
 1011904:	je     0x1011916
 1011906:	mov    WORD PTR [r8],ax
 101190a:	add    r8,0x2
 101190e:	sub    r9,0x1
 1011912:	jne    0x10118f0
 1011914:	jmp    0x101191b
 1011916:	test   r9,r9
 1011919:	jne    0x1011925
 101191b:	sub    r8,0x2
 101191f:	mov    r10d,0x8007007a
 1011925:	test   r10d,r10d
 1011928:	mov    WORD PTR [r8],0x0
 101192e:	js     0x101196c
 1011930:	call   0x10078b0
 1011935:	lea    rcx,[rbx+0x1740]
 101193c:	lea    r8,[rip+0xffffffffffff23c5]        # 0x1003d08
 1011943:	mov    r9,rax
 1011946:	lea    rax,[rip+0xffffffffffff236b]        # 0x1003cb8
 101194d:	mov    edx,0x104
 1011952:	mov    QWORD PTR [rsp+0x28],rax
 1011957:	mov    QWORD PTR [rsp+0x20],rdi
 101195c:	call   0x100a460
 1011961:	mov    rdi,QWORD PTR [rsp+0x40]
 1011966:	add    rsp,0x30
 101196a:	pop    rbx
 101196b:	ret    
 101196c:	mov    eax,r10d
 101196f:	mov    rdi,QWORD PTR [rsp+0x40]
 1011974:	add    rsp,0x30
 1011978:	pop    rbx
 1011979:	ret    
 101197a:	mov    eax,0x80070057
 101197f:	add    rsp,0x30
 1011983:	pop    rbx
 1011984:	ret    
 1011985:	int3   
 1011986:	int3   
 1011987:	int3   
 1011988:	int3   
 1011989:	int3   
 101198a:	int3   
 101198b:	int3   
 101198c:	int3   
 101198d:	int3   
 101198e:	int3   
 101198f:	int3   
 1011990:	mov    QWORD PTR [rsp+0x20],rbx
 1011995:	mov    QWORD PTR [rsp+0x10],rdx
 101199a:	mov    QWORD PTR [rsp+0x8],rcx
 101199f:	push   rsi
 10119a0:	push   rdi
 10119a1:	push   r12
 10119a3:	push   r13
 10119a5:	push   r14
 10119a7:	sub    rsp,0x20
 10119ab:	mov    r14,rdx
 10119ae:	mov    r13,rcx
 10119b1:	xor    esi,esi
 10119b3:	mov    r12,rsi
 10119b6:	mov    QWORD PTR [rsp+0x60],rsi
 10119bb:	mov    QWORD PTR [rdx],rsi
 10119be:	add    rcx,0x8
 10119c2:	call   0x1010c00
 10119c7:	test   eax,eax
 10119c9:	je     0x1011acf
 10119cf:	lea    rcx,[r13+0x8]
 10119d3:	call   0x1010c20
 10119d8:	test   eax,eax
 10119da:	js     0x1011acf
 10119e0:	call   QWORD PTR [rip+0xfffffffffffef9e2]        # 0x10013c8
 10119e6:	mov    edx,0x7530
 10119eb:	mov    rcx,QWORD PTR [r13+0x20]
 10119ef:	call   QWORD PTR [rip+0xfffffffffffef863]        # 0x1001258
 10119f5:	mov    edi,eax
 10119f7:	test   eax,eax
 10119f9:	je     0x1011a2e
 10119fb:	cmp    eax,0x80
 1011a00:	je     0x1011a2e
 1011a02:	call   QWORD PTR [rip+0xfffffffffffef870]        # 0x1001278
 1011a08:	mov    ebx,eax
 1011a0a:	test   eax,eax
 1011a0c:	jle    0x1011a17
 1011a0e:	movzx  ebx,ax
 1011a11:	or     ebx,0x80070000
 1011a17:	test   ebx,ebx
 1011a19:	js     0x1011a88
 1011a1b:	test   edi,edi
 1011a1d:	jg     0x1011a23
 1011a1f:	mov    ebx,edi
 1011a21:	jmp    0x1011a88
 1011a23:	movzx  ebx,di
 1011a26:	or     ebx,0x80070000
 1011a2c:	jmp    0x1011a88
 1011a2e:	mov    ebx,esi
 1011a30:	lea    rcx,[r13+0xe8]
 1011a37:	mov    r8d,0x4e20
 1011a3d:	mov    rdx,r13
 1011a40:	call   0x1013590
 1011a45:	jmp    0x1011a71
 1011a47:	mov    ebx,eax
 1011a49:	cmp    eax,0xc00000fd
 1011a4e:	jne    0x1011a56
 1011a50:	call   QWORD PTR [rip+0xfffffffffffef972]        # 0x10013c8
 1011a56:	mov    eax,0x80004005
 1011a5b:	test   ebx,ebx
 1011a5d:	cmovns ebx,eax
 1011a60:	xor    esi,esi
 1011a62:	mov    r13,QWORD PTR [rsp+0x50]
 1011a67:	mov    r14,QWORD PTR [rsp+0x58]
 1011a6c:	mov    r12,QWORD PTR [rsp+0x60]
 1011a71:	test   ebx,ebx
 1011a73:	js     0x1011a7e
 1011a75:	lea    r12,[r13+0xe8]
 1011a7c:	jmp    0x1011a88
 1011a7e:	mov    rcx,QWORD PTR [r13+0x20]
 1011a82:	call   QWORD PTR [rip+0xfffffffffffef6a8]        # 0x1001130
 1011a88:	test   r12,r12
 1011a8b:	jne    0x1011ac8
 1011a8d:	lea    rcx,[r13+0x10]
 1011a91:	mov    edx,0x1658
 1011a96:	call   0x1010980
 1011a9b:	test   rax,rax
 1011a9e:	je     0x1011abb
 1011aa0:	mov    r8d,0x4e20
 1011aa6:	mov    rdx,r13
 1011aa9:	mov    rcx,rax
 1011aac:	call   0x1012c10
 1011ab1:	mov    r12,rax
 1011ab4:	test   rax,rax
 1011ab7:	jne    0x1011ac3
 1011ab9:	jmp    0x1011abe
 1011abb:	mov    r12,rsi
 1011abe:	mov    esi,0x8007000e
 1011ac3:	test   esi,esi
 1011ac5:	cmovns ebx,esi
 1011ac8:	mov    QWORD PTR [r14],r12
 1011acb:	mov    eax,ebx
 1011acd:	jmp    0x1011ad4
 1011acf:	mov    eax,0x80004005
 1011ad4:	mov    rbx,QWORD PTR [rsp+0x68]
 1011ad9:	add    rsp,0x20
 1011add:	pop    r14
 1011adf:	pop    r13
 1011ae1:	pop    r12
 1011ae3:	pop    rdi
 1011ae4:	pop    rsi
 1011ae5:	ret    
 1011ae6:	int3   
 1011ae7:	int3   
 1011ae8:	int3   
 1011ae9:	int3   
 1011aea:	int3   
 1011aeb:	int3   
 1011aec:	int3   
 1011aed:	int3   
 1011aee:	int3   
 1011aef:	int3   
 1011af0:	mov    QWORD PTR [rsp+0x8],rbx
 1011af5:	push   rdi
 1011af6:	sub    rsp,0x20
 1011afa:	mov    rdx,QWORD PTR [rcx+0x20]
 1011afe:	mov    rbx,rcx
 1011b01:	mov    eax,DWORD PTR [rdx+0x10]
 1011b04:	cmp    DWORD PTR [rdx+0xc],eax
 1011b07:	jb     0x1011b40
 1011b09:	mov    rcx,QWORD PTR [rcx+0x10]
 1011b0d:	test   rcx,rcx
 1011b10:	je     0x1011b66
 1011b12:	mov    rdi,QWORD PTR [rbx]
 1011b15:	lea    rdx,[rdi*8+0x18]
 1011b1d:	call   0x1010980
 1011b22:	test   rax,rax
 1011b25:	je     0x1011b66
 1011b27:	xor    ecx,ecx
 1011b29:	mov    DWORD PTR [rax+0x10],edi
 1011b2c:	mov    QWORD PTR [rax],rcx
 1011b2f:	mov    DWORD PTR [rax+0x8],ecx
 1011b32:	mov    DWORD PTR [rax+0xc],ecx
 1011b35:	mov    rcx,QWORD PTR [rbx+0x20]
 1011b39:	mov    QWORD PTR [rcx],rax
 1011b3c:	mov    QWORD PTR [rbx+0x20],rax
 1011b40:	mov    rcx,QWORD PTR [rbx+0x20]
 1011b44:	mov    edx,DWORD PTR [rcx+0xc]
 1011b47:	lea    eax,[rdx+0x1]
 1011b4a:	mov    DWORD PTR [rcx+0xc],eax
 1011b4d:	mov    rax,QWORD PTR [rbx+0x20]
 1011b51:	add    QWORD PTR [rbx+0x8],0x1
 1011b56:	lea    rax,[rax+rdx*8+0x18]
 1011b5b:	mov    rbx,QWORD PTR [rsp+0x30]
 1011b60:	add    rsp,0x20
 1011b64:	pop    rdi
 1011b65:	ret    
 1011b66:	xor    eax,eax
 1011b68:	mov    rbx,QWORD PTR [rsp+0x30]
 1011b6d:	add    rsp,0x20
 1011b71:	pop    rdi
 1011b72:	ret    
 1011b73:	int3   
 1011b74:	int3   
 1011b75:	int3   
 1011b76:	int3   
 1011b77:	int3   
 1011b78:	int3   
 1011b79:	int3   
 1011b7a:	int3   
 1011b7b:	int3   
 1011b7c:	int3   
 1011b7d:	int3   
 1011b7e:	int3   
 1011b7f:	int3   
 1011b80:	mov    QWORD PTR [rsp+0x8],rbx
 1011b85:	mov    QWORD PTR [rsp+0x10],rsi
 1011b8a:	push   rdi
 1011b8b:	sub    rsp,0x20
 1011b8f:	lea    rax,[rip+0xffffffffffff218a]        # 0x1003d20
 1011b96:	mov    rdi,rcx
 1011b99:	add    rcx,0x8
 1011b9d:	mov    QWORD PTR [rcx-0x8],rax
 1011ba1:	call   0x1010be0
 1011ba6:	lea    rcx,[rdi+0x10]
 1011baa:	call   0x1010960
 1011baf:	lea    rbx,[rdi+0x28]
 1011bb3:	xor    esi,esi
 1011bb5:	mov    QWORD PTR [rdi+0x18],rsi
 1011bb9:	mov    QWORD PTR [rdi+0x20],rsi
 1011bbd:	lea    rcx,[rbx+0x18]
 1011bc1:	xor    edx,edx
 1011bc3:	mov    r8d,0x80
 1011bc9:	mov    QWORD PTR [rbx],rsi
 1011bcc:	mov    DWORD PTR [rbx+0x8],esi
 1011bcf:	mov    DWORD PTR [rbx+0xc],esi
 1011bd2:	mov    DWORD PTR [rbx+0x10],0x10
 1011bd9:	mov    DWORD PTR [rbx+0x14],esi
 1011bdc:	call   0x10107ba
 1011be1:	lea    rcx,[rdi+0xe8]
 1011be8:	xor    edx,edx
 1011bea:	mov    r8d,0x4e20
 1011bf0:	mov    QWORD PTR [rdi+0xc0],0x10
 1011bfb:	mov    QWORD PTR [rdi+0xc8],rsi
 1011c02:	mov    QWORD PTR [rdi+0xd0],rsi
 1011c09:	mov    QWORD PTR [rdi+0xd8],rbx
 1011c10:	mov    QWORD PTR [rdi+0xe0],rbx
 1011c17:	call   0x1012c10
 1011c1c:	lea    rcx,[rdi+0x1740]
 1011c23:	xor    edx,edx
 1011c25:	mov    r8d,0x208
 1011c2b:	mov    DWORD PTR [rdi+0x1b50],esi
 1011c31:	mov    QWORD PTR [rdi+0x1b58],rsi
 1011c38:	call   0x10107ba
 1011c3d:	lea    rcx,[rdi+0x1948]
 1011c44:	xor    edx,edx
 1011c46:	mov    r8d,0x208
 1011c4c:	call   0x10107ba
 1011c51:	lea    rcx,[rdi+0xe8]
 1011c58:	mov    rdx,rdi
 1011c5b:	call   0x1012500
 1011c60:	mov    rbx,QWORD PTR [rsp+0x30]
 1011c65:	mov    rsi,QWORD PTR [rsp+0x38]
 1011c6a:	mov    rax,rdi
 1011c6d:	add    rsp,0x20
 1011c71:	pop    rdi
 1011c72:	ret    
 1011c73:	int3   
 1011c74:	int3   
 1011c75:	int3   
 1011c76:	int3   
 1011c77:	int3   
 1011c78:	int3   
 1011c79:	int3   
 1011c7a:	int3   
 1011c7b:	int3   
 1011c7c:	int3   
 1011c7d:	int3   
 1011c7e:	int3   
 1011c7f:	int3   
 1011c80:	mov    QWORD PTR [rsp+0x18],rbx
 1011c85:	push   rdi
 1011c86:	sub    rsp,0x30
 1011c8a:	test   rdx,rdx
 1011c8d:	mov    rdi,rcx
 1011c90:	mov    QWORD PTR [rsp+0x48],0x0
 1011c99:	je     0x1011d67
 1011c9f:	lea    rax,[rsp+0x48]
 1011ca4:	mov    r9d,0x1
 1011caa:	xor    r8d,r8d
 1011cad:	mov    rcx,0xffffffff80000002
 1011cb4:	mov    QWORD PTR [rsp+0x20],rax
 1011cb9:	call   QWORD PTR [rip+0xfffffffffffef3e1]        # 0x10010a0
 1011cbf:	test   eax,eax
 1011cc1:	jne    0x1011d5b
 1011cc7:	mov    rcx,QWORD PTR [rsp+0x48]
 1011ccc:	mov    QWORD PTR [rsp+0x40],rsi
 1011cd1:	lea    rsi,[rdi+0x1948]
 1011cd8:	lea    rdx,[rip+0xffffffffffff2099]        # 0x1003d78
 1011cdf:	mov    r8,rsi
 1011ce2:	mov    r9d,0x104
 1011ce8:	call   0x10110d0
 1011ced:	test   eax,eax
 1011cef:	mov    ebx,eax
 1011cf1:	js     0x1011d38
 1011cf3:	call   0x10078b0
 1011cf8:	lea    rcx,[rdi+0x1740]
 1011cff:	lea    r8,[rip+0xffffffffffff2002]        # 0x1003d08
 1011d06:	mov    r9,rax
 1011d09:	lea    rax,[rip+0xffffffffffff1fa8]        # 0x1003cb8
 1011d10:	mov    edx,0x104
 1011d15:	mov    QWORD PTR [rsp+0x28],rax
 1011d1a:	mov    QWORD PTR [rsp+0x20],rsi
 1011d1f:	call   0x100a460
 1011d24:	mov    rcx,QWORD PTR [rsp+0x48]
 1011d29:	mov    ebx,eax
 1011d2b:	call   QWORD PTR [rip+0xfffffffffffef377]        # 0x10010a8
 1011d31:	mov    rsi,QWORD PTR [rsp+0x40]
 1011d36:	jmp    0x1011d6e
 1011d38:	cmp    eax,0x80070002
 1011d3d:	jne    0x1011d49
 1011d3f:	mov    rcx,rdi
 1011d42:	call   0x1011670
 1011d47:	mov    ebx,eax
 1011d49:	mov    rcx,QWORD PTR [rsp+0x48]
 1011d4e:	call   QWORD PTR [rip+0xfffffffffffef354]        # 0x10010a8
 1011d54:	mov    rsi,QWORD PTR [rsp+0x40]
 1011d59:	jmp    0x1011d6e
 1011d5b:	mov    rcx,rdi
 1011d5e:	call   0x1011670
 1011d63:	mov    ebx,eax
 1011d65:	jmp    0x1011d6e
 1011d67:	call   0x1011670
 1011d6c:	mov    ebx,eax
 1011d6e:	test   ebx,ebx
 1011d70:	jns    0x1011d9a
 1011d72:	lea    rcx,[rdi+0x1948]
 1011d79:	xor    edx,edx
 1011d7b:	mov    r8d,0x208
 1011d81:	call   0x10107ba
 1011d86:	lea    rcx,[rdi+0x1740]
 1011d8d:	xor    edx,edx
 1011d8f:	mov    r8d,0x208
 1011d95:	call   0x10107ba
 1011d9a:	mov    eax,ebx
 1011d9c:	mov    rbx,QWORD PTR [rsp+0x50]
 1011da1:	add    rsp,0x30
 1011da5:	pop    rdi
 1011da6:	ret    
 1011da7:	int3   
 1011da8:	int3   
 1011da9:	int3   
 1011daa:	int3   
 1011dab:	int3   
 1011dac:	int3   
 1011dad:	int3   
 1011dae:	int3   
 1011daf:	int3   
 1011db0:	mov    QWORD PTR [rsp+0x18],rbp
 1011db5:	push   rdi
 1011db6:	sub    rsp,0x20
 1011dba:	test   edx,edx
 1011dbc:	mov    rdi,rcx
 1011dbf:	je     0x1011dcb
 1011dc1:	mov    DWORD PTR [rcx+0x1b50],0x1
 1011dcb:	add    rcx,0x8
 1011dcf:	call   0x1010e60
 1011dd4:	test   eax,eax
 1011dd6:	je     0x1011ef6
 1011ddc:	mov    QWORD PTR [rsp+0x30],rbx
 1011de1:	mov    QWORD PTR [rsp+0x38],rsi
 1011de6:	lea    rsi,[rdi+0x10]
 1011dea:	mov    rcx,rsi
 1011ded:	call   0x1010dd0
 1011df2:	test   eax,eax
 1011df4:	mov    ebx,eax
 1011df6:	js     0x1011ee1
 1011dfc:	xor    r8d,r8d
 1011dff:	xor    edx,edx
 1011e01:	xor    ecx,ecx
 1011e03:	mov    QWORD PTR [rdi+0xd0],rsi
 1011e0a:	call   QWORD PTR [rip+0xfffffffffffef2c8]        # 0x10010d8
 1011e10:	test   rax,rax
 1011e13:	mov    QWORD PTR [rdi+0x18],rax
 1011e17:	jne    0x1011e2e
 1011e19:	call   QWORD PTR [rip+0xfffffffffffef459]        # 0x1001278
 1011e1f:	test   eax,eax
 1011e21:	mov    ebx,eax
 1011e23:	jle    0x1011e2e
 1011e25:	movzx  ebx,ax
 1011e28:	or     ebx,0x80070000
 1011e2e:	test   ebx,ebx
 1011e30:	js     0x1011ee1
 1011e36:	mov    rcx,QWORD PTR [rdi+0x18]
 1011e3a:	mov    edx,0x2
 1011e3f:	mov    r8d,edx
 1011e42:	call   QWORD PTR [rip+0xfffffffffffef298]        # 0x10010e0
 1011e48:	test   eax,eax
 1011e4a:	jne    0x1011e61
 1011e4c:	call   QWORD PTR [rip+0xfffffffffffef426]        # 0x1001278
 1011e52:	test   eax,eax
 1011e54:	mov    ebx,eax
 1011e56:	jle    0x1011e61
 1011e58:	movzx  ebx,ax
 1011e5b:	or     ebx,0x80070000
 1011e61:	test   ebx,ebx
 1011e63:	js     0x1011ee1
 1011e65:	xor    r8d,r8d
 1011e68:	xor    edx,edx
 1011e6a:	xor    ecx,ecx
 1011e6c:	call   QWORD PTR [rip+0xfffffffffffef266]        # 0x10010d8
 1011e72:	test   rax,rax
 1011e75:	mov    QWORD PTR [rdi+0x20],rax
 1011e79:	jne    0x1011e90
 1011e7b:	call   QWORD PTR [rip+0xfffffffffffef3f7]        # 0x1001278
 1011e81:	test   eax,eax
 1011e83:	mov    ebx,eax
 1011e85:	jle    0x1011e90
 1011e87:	movzx  ebx,ax
 1011e8a:	or     ebx,0x80070000
 1011e90:	test   ebx,ebx
 1011e92:	js     0x1011ee1
 1011e94:	mov    rcx,QWORD PTR [rdi+0x20]
 1011e98:	mov    edx,0x2
 1011e9d:	mov    r8d,edx
 1011ea0:	call   QWORD PTR [rip+0xfffffffffffef23a]        # 0x10010e0
 1011ea6:	test   eax,eax
 1011ea8:	jne    0x1011ebf
 1011eaa:	call   QWORD PTR [rip+0xfffffffffffef3c8]        # 0x1001278
 1011eb0:	test   eax,eax
 1011eb2:	mov    ebx,eax
 1011eb4:	jle    0x1011ebf
 1011eb6:	movzx  ebx,ax
 1011eb9:	or     ebx,0x80070000
 1011ebf:	test   ebx,ebx
 1011ec1:	js     0x1011ee1
 1011ec3:	cmp    DWORD PTR [rdi+0x1b50],0x0
 1011eca:	je     0x1011ed0
 1011ecc:	xor    edx,edx
 1011ece:	jmp    0x1011ed7
 1011ed0:	lea    rdx,[rip+0xffffffffffff1d89]        # 0x1003c60
 1011ed7:	mov    rcx,rdi
 1011eda:	call   0x1011c80
 1011edf:	mov    ebx,eax
 1011ee1:	lea    rcx,[rdi+0x8]
 1011ee5:	mov    edx,ebx
 1011ee7:	call   0x1010ec0
 1011eec:	mov    rsi,QWORD PTR [rsp+0x38]
 1011ef1:	mov    rbx,QWORD PTR [rsp+0x30]
 1011ef6:	call   0x1010c30
 1011efb:	lea    rcx,[rdi+0x8]
 1011eff:	mov    rbp,QWORD PTR [rsp+0x40]
 1011f04:	add    rsp,0x20
 1011f08:	pop    rdi
 1011f09:	jmp    0x1010c20
 1011f0e:	int3   
 1011f0f:	int3   
 1011f10:	int3   
 1011f11:	int3   
 1011f12:	int3   
 1011f13:	int3   
 1011f14:	int3   
 1011f15:	int3   
 1011f16:	int3   
 1011f17:	int3   
 1011f18:	int3   
 1011f19:	int3   
 1011f1a:	int3   
 1011f1b:	int3   
 1011f1c:	int3   
 1011f1d:	int3   
 1011f1e:	int3   
 1011f1f:	int3   
 1011f20:	mov    r11,rsp
 1011f23:	mov    QWORD PTR [r11+0x8],rbx
 1011f27:	mov    QWORD PTR [r11+0x10],rsi
 1011f2b:	mov    QWORD PTR [r11+0x20],rdi
 1011f2f:	mov    QWORD PTR [r11+0x18],r8
 1011f33:	push   r12
 1011f35:	push   r13
 1011f37:	push   r14
 1011f39:	sub    rsp,0x40
 1011f3d:	mov    r13,r8
 1011f40:	mov    r14,rdx
 1011f43:	mov    r12,rcx
 1011f46:	xor    esi,esi
 1011f48:	mov    DWORD PTR [rsp+0x20],esi
 1011f4c:	mov    QWORD PTR [r11-0x30],rsi
 1011f50:	mov    edi,esi
 1011f52:	lea    rax,[rcx+0x28]
 1011f56:	mov    QWORD PTR [r11-0x28],rax
 1011f5a:	mov    QWORD PTR [r11-0x20],rsi
 1011f5e:	xchg   ax,ax
 1011f60:	lea    rcx,[rsp+0x30]
 1011f65:	call   0x1011620
 1011f6a:	mov    rbx,rax
 1011f6d:	test   rax,rax
 1011f70:	je     0x1011f81
 1011f72:	mov    rcx,rax
 1011f75:	call   0x1010b00
 1011f7a:	test   rax,rax
 1011f7d:	je     0x1011f81
 1011f7f:	jmp    0x1011f60
 1011f81:	test   rbx,rbx
 1011f84:	jne    0x1011f96
 1011f86:	lea    rcx,[r12+0xc0]
 1011f8e:	call   0x1011af0
 1011f93:	mov    rbx,rax
 1011f96:	test   rbx,rbx
 1011f99:	je     0x1011fc1
 1011f9b:	xor    eax,eax
 1011f9d:	mov    QWORD PTR [rbx],rax
 1011fa0:	mov    rcx,rbx
 1011fa3:	call   0x1010a10
 1011fa8:	mov    rdx,r14
 1011fab:	mov    rcx,rbx
 1011fae:	call   0x1010a90
 1011fb3:	mov    DWORD PTR [rsp+0x20],eax
 1011fb7:	mov    rsi,rbx
 1011fba:	mov    QWORD PTR [rsp+0x28],rbx
 1011fbf:	jmp    0x1011fca
 1011fc1:	mov    eax,0x8007000e
 1011fc6:	mov    DWORD PTR [rsp+0x20],eax
 1011fca:	jmp    0x1011ff3
 1011fcc:	mov    edi,eax
 1011fce:	cmp    eax,0xc00000fd
 1011fd3:	jne    0x1011fdb
 1011fd5:	call   QWORD PTR [rip+0xfffffffffffef3ed]        # 0x10013c8
 1011fdb:	mov    eax,0x80004005
 1011fe0:	test   edi,edi
 1011fe2:	cmovns edi,eax
 1011fe5:	mov    r13,QWORD PTR [rsp+0x70]
 1011fea:	mov    eax,DWORD PTR [rsp+0x20]
 1011fee:	mov    rsi,QWORD PTR [rsp+0x28]
 1011ff3:	mov    QWORD PTR [r13+0x0],rsi
 1011ff7:	test   eax,eax
 1011ff9:	cmovns eax,edi
 1011ffc:	mov    rbx,QWORD PTR [rsp+0x60]
 1012001:	mov    rsi,QWORD PTR [rsp+0x68]
 1012006:	mov    rdi,QWORD PTR [rsp+0x78]
 101200b:	add    rsp,0x40
 101200f:	pop    r14
 1012011:	pop    r13
 1012013:	pop    r12
 1012015:	ret    
 1012016:	int3   
 1012017:	int3   
 1012018:	int3   
 1012019:	int3   
 101201a:	int3   
 101201b:	int3   
 101201c:	int3   
 101201d:	int3   
 101201e:	int3   
 101201f:	int3   
 1012020:	mov    QWORD PTR [rsp+0x10],rbx
 1012025:	mov    QWORD PTR [rsp+0x18],r8
 101202a:	mov    QWORD PTR [rsp+0x8],rcx
 101202f:	push   rsi
 1012030:	push   rdi
 1012031:	push   r12
 1012033:	sub    rsp,0x30
 1012037:	mov    rsi,r8
 101203a:	mov    rbx,rdx
 101203d:	mov    rdi,rcx
 1012040:	xor    r12d,r12d
 1012043:	mov    DWORD PTR [rsp+0x20],r12d
 1012048:	mov    QWORD PTR [rsp+0x68],r12
 101204d:	add    rcx,0x8
 1012051:	call   0x1010c00
 1012056:	test   eax,eax
 1012058:	je     0x10120e1
 101205e:	or     edx,0xffffffff
 1012061:	mov    rcx,QWORD PTR [rdi+0x18]
 1012065:	call   QWORD PTR [rip+0xfffffffffffef1ed]        # 0x1001258
 101206b:	test   eax,eax
 101206d:	je     0x101208d
 101206f:	cmp    eax,0x80
 1012074:	je     0x101208d
 1012076:	call   QWORD PTR [rip+0xfffffffffffef1fc]        # 0x1001278
 101207c:	mov    ebx,eax
 101207e:	test   eax,eax
 1012080:	jle    0x10120f3
 1012082:	movzx  ebx,ax
 1012085:	or     ebx,0x80070000
 101208b:	jmp    0x10120f3
 101208d:	lea    r8,[rsp+0x68]
 1012092:	mov    rdx,rbx
 1012095:	mov    rcx,rdi
 1012098:	call   0x1011f20
 101209d:	mov    ebx,eax
 101209f:	mov    DWORD PTR [rsp+0x20],eax
 10120a3:	jmp    0x10120cf
 10120a5:	mov    ebx,eax
 10120a7:	cmp    eax,0xc00000fd
 10120ac:	jne    0x10120b4
 10120ae:	call   QWORD PTR [rip+0xfffffffffffef314]        # 0x10013c8
 10120b4:	mov    eax,0x80004005
 10120b9:	test   ebx,ebx
 10120bb:	cmovns ebx,eax
 10120be:	mov    r12d,ebx
 10120c1:	mov    rdi,QWORD PTR [rsp+0x50]
 10120c6:	mov    rsi,QWORD PTR [rsp+0x60]
 10120cb:	mov    ebx,DWORD PTR [rsp+0x20]
 10120cf:	test   ebx,ebx
 10120d1:	cmovns ebx,r12d
 10120d5:	mov    rcx,QWORD PTR [rdi+0x18]
 10120d9:	call   QWORD PTR [rip+0xfffffffffffef051]        # 0x1001130
 10120df:	jmp    0x10120f3
 10120e1:	lea    r8,[rsp+0x68]
 10120e6:	mov    rdx,rbx
 10120e9:	mov    rcx,rdi
 10120ec:	call   0x1011f20
 10120f1:	mov    ebx,eax
 10120f3:	mov    rcx,QWORD PTR [rsp+0x68]
 10120f8:	mov    QWORD PTR [rsi],rcx
 10120fb:	mov    eax,ebx
 10120fd:	mov    rbx,QWORD PTR [rsp+0x58]
 1012102:	add    rsp,0x30
 1012106:	pop    r12
 1012108:	pop    rdi
 1012109:	pop    rsi
 101210a:	ret    
 101210b:	int3   
 101210c:	int3   
 101210d:	int3   
 101210e:	int3   
 101210f:	int3   
 1012110:	int3   
 1012111:	int3   
 1012112:	int3   
 1012113:	int3   
 1012114:	int3   
 1012115:	int3   
 1012116:	int3   
 1012117:	int3   
 1012118:	int3   
 1012119:	int3   
 101211a:	int3   
 101211b:	int3   
 101211c:	int3   
 101211d:	int3   
 101211e:	int3   
 101211f:	int3   
 1012120:	mov    rax,r8
 1012123:	mov    rcx,rdx
 1012126:	mov    r8,r9
 1012129:	mov    rdx,rax
 101212c:	jmp    0x1010ee0
 1012131:	int3   
 1012132:	int3   
 1012133:	int3   
 1012134:	int3   
 1012135:	int3   
 1012136:	int3   
 1012137:	int3   
 1012138:	int3   
 1012139:	int3   
 101213a:	int3   
 101213b:	int3   
 101213c:	int3   
 101213d:	int3   
 101213e:	int3   
 101213f:	int3   
 1012140:	mov    DWORD PTR [rcx+0x74],edx
 1012143:	xor    eax,eax
 1012145:	ret    
 1012146:	int3   
 1012147:	int3   
 1012148:	int3   
 1012149:	int3   
 101214a:	int3   
 101214b:	int3   
 101214c:	int3   
 101214d:	int3   
 101214e:	int3   
 101214f:	int3   
 1012150:	mov    QWORD PTR [rsp+0x8],rbx
 1012155:	push   rdi
 1012156:	sub    rsp,0x20
 101215a:	cmp    DWORD PTR [rcx+0x74],0x0
 101215e:	mov    rdi,rdx
 1012161:	mov    rbx,rcx
 1012164:	je     0x10121a4
 1012166:	mov    eax,DWORD PTR [rcx+0xac]
 101216c:	not    eax
 101216e:	and    eax,DWORD PTR [rcx+0xa8]
 1012174:	test   al,0x20
 1012176:	jne    0x10121a4
 1012178:	call   QWORD PTR [rip+0xfffffffffffef0d2]        # 0x1001250
 101217e:	cmp    eax,DWORD PTR [rbx+0x74]
 1012181:	je     0x10121a4
 1012183:	call   QWORD PTR [rip+0xfffffffffffef0c7]        # 0x1001250
 1012189:	cmp    eax,DWORD PTR [rbx+0xa4]
 101218f:	je     0x10121a4
 1012191:	mov    DWORD PTR [rdi],0x0
 1012197:	xor    eax,eax
 1012199:	mov    rbx,QWORD PTR [rsp+0x30]
 101219e:	add    rsp,0x20
 10121a2:	pop    rdi
 10121a3:	ret    
 10121a4:	mov    rbx,QWORD PTR [rsp+0x30]
 10121a9:	mov    DWORD PTR [rdi],0x1
 10121af:	xor    eax,eax
 10121b1:	add    rsp,0x20
 10121b5:	pop    rdi
 10121b6:	ret    
 10121b7:	int3   
 10121b8:	int3   
 10121b9:	int3   
 10121ba:	int3   
 10121bb:	int3   
 10121bc:	int3   
 10121bd:	int3   
 10121be:	int3   
 10121bf:	int3   
 10121c0:	mov    DWORD PTR [rcx+0x13b0],edx
 10121c6:	xor    eax,eax
 10121c8:	ret    
 10121c9:	int3   
 10121ca:	int3   
 10121cb:	int3   
 10121cc:	int3   
 10121cd:	int3   
 10121ce:	int3   
 10121cf:	int3   
 10121d0:	mov    QWORD PTR [rcx+0x90],rdx
 10121d7:	xor    eax,eax
 10121d9:	ret    
 10121da:	int3   
 10121db:	int3   
 10121dc:	int3   
 10121dd:	int3   
 10121de:	int3   
 10121df:	int3   
 10121e0:	mov    QWORD PTR [rcx+0x98],rdx
 10121e7:	mov    DWORD PTR [rcx+0xa0],r8d
 10121ee:	xor    eax,eax
 10121f0:	ret    
 10121f1:	int3   
 10121f2:	int3   
 10121f3:	int3   
 10121f4:	int3   
 10121f5:	int3   
 10121f6:	int3   
 10121f7:	int3   
 10121f8:	int3   
 10121f9:	int3   
 10121fa:	int3   
 10121fb:	int3   
 10121fc:	int3   
 10121fd:	int3   
 10121fe:	int3   
 10121ff:	int3   
 1012200:	mov    DWORD PTR [rcx+0xb0],edx
 1012206:	mov    DWORD PTR [rcx+0xb4],r8d
 101220d:	xor    eax,eax
 101220f:	ret    
 1012210:	int3   
 1012211:	int3   
 1012212:	int3   
 1012213:	int3   
 1012214:	int3   
 1012215:	int3   
 1012216:	int3   
 1012217:	int3   
 1012218:	int3   
 1012219:	int3   
 101221a:	int3   
 101221b:	int3   
 101221c:	int3   
 101221d:	int3   
 101221e:	int3   
 101221f:	int3   
 1012220:	rex push rbx
 1012222:	sub    rsp,0x20
 1012226:	mov    rbx,rcx
 1012229:	mov    DWORD PTR [rcx+0xa8],edx
 101222f:	mov    DWORD PTR [rcx+0xac],r8d
 1012236:	mov    rcx,QWORD PTR [rcx+0x10]
 101223a:	test   rcx,rcx
 101223d:	je     0x101225c
 101223f:	call   0x1011340
 1012244:	test   eax,eax
 1012246:	je     0x101225c
 1012248:	bt     DWORD PTR [rbx+0xac],0x11
 1012250:	jb     0x101225c
 1012252:	or     DWORD PTR [rbx+0xa8],0x20000
 101225c:	xor    eax,eax
 101225e:	add    rsp,0x20
 1012262:	pop    rbx
 1012263:	ret    
 1012264:	int3   
 1012265:	int3   
 1012266:	int3   
 1012267:	int3   
 1012268:	int3   
 1012269:	int3   
 101226a:	int3   
 101226b:	int3   
 101226c:	int3   
 101226d:	int3   
 101226e:	int3   
 101226f:	int3   
 1012270:	mov    QWORD PTR [rcx+0x40],rdx
 1012274:	xor    eax,eax
 1012276:	ret    
 1012277:	int3   
 1012278:	int3   
 1012279:	int3   
 101227a:	int3   
 101227b:	int3   
 101227c:	int3   
 101227d:	int3   
 101227e:	int3   
 101227f:	int3   
 1012280:	mov    QWORD PTR [rcx+0x38],rdx
 1012284:	xor    eax,eax
 1012286:	ret    
 1012287:	int3   
 1012288:	int3   
 1012289:	int3   
 101228a:	int3   
 101228b:	int3   
 101228c:	int3   
 101228d:	int3   
 101228e:	int3   
 101228f:	int3   
 1012290:	mov    DWORD PTR [rcx+0xa4],edx
 1012296:	mov    QWORD PTR [rcx+0x30],r8
 101229a:	mov    QWORD PTR [rcx+0x28],r9
 101229e:	xor    eax,eax
 10122a0:	ret    
 10122a1:	int3   
 10122a2:	int3   
 10122a3:	int3   
 10122a4:	int3   
 10122a5:	int3   
 10122a6:	int3   
 10122a7:	int3   
 10122a8:	int3   
 10122a9:	int3   
 10122aa:	int3   
 10122ab:	int3   
 10122ac:	int3   
 10122ad:	int3   
 10122ae:	int3   
 10122af:	int3   
 10122b0:	mov    QWORD PTR [rcx+0x80],rdx
 10122b7:	xor    eax,eax
 10122b9:	ret    
 10122ba:	int3   
 10122bb:	int3   
 10122bc:	int3   
 10122bd:	int3   
 10122be:	int3   
 10122bf:	int3   
 10122c0:	mov    QWORD PTR [rcx+0x50],rdx
 10122c4:	xor    eax,eax
 10122c6:	ret    
 10122c7:	int3   
 10122c8:	int3   
 10122c9:	int3   
 10122ca:	int3   
 10122cb:	int3   
 10122cc:	int3   
 10122cd:	int3   
 10122ce:	int3   
 10122cf:	int3   
 10122d0:	mov    QWORD PTR [rcx+0x48],rdx
 10122d4:	xor    eax,eax
 10122d6:	ret    
 10122d7:	int3   
 10122d8:	int3   
 10122d9:	int3   
 10122da:	int3   
 10122db:	int3   
 10122dc:	int3   
 10122dd:	int3   
 10122de:	int3   
 10122df:	int3   
 10122e0:	mov    QWORD PTR [rcx+0x20],rdx
 10122e4:	xor    eax,eax
 10122e6:	ret    
 10122e7:	int3   
 10122e8:	int3   
 10122e9:	int3   
 10122ea:	int3   
 10122eb:	int3   
 10122ec:	int3   
 10122ed:	int3   
 10122ee:	int3   
 10122ef:	int3   
 10122f0:	mov    QWORD PTR [rcx+0x58],rdx
 10122f4:	xor    eax,eax
 10122f6:	ret    
 10122f7:	int3   
 10122f8:	int3   
 10122f9:	int3   
 10122fa:	int3   
 10122fb:	int3   
 10122fc:	int3   
 10122fd:	int3   
 10122fe:	int3   
 10122ff:	int3   
 1012300:	mov    DWORD PTR [rcx+0x88],edx
 1012306:	mov    DWORD PTR [rcx+0x8c],r8d
 101230d:	xor    eax,eax
 101230f:	ret    
 1012310:	int3   
 1012311:	int3   
 1012312:	int3   
 1012313:	int3   
 1012314:	int3   
 1012315:	int3   
 1012316:	int3   
 1012317:	int3   
 1012318:	int3   
 1012319:	int3   
 101231a:	int3   
 101231b:	int3   
 101231c:	int3   
 101231d:	int3   
 101231e:	int3   
 101231f:	int3   
 1012320:	mov    QWORD PTR [rcx+0x60],rdx
 1012324:	xor    eax,eax
 1012326:	ret    
 1012327:	int3   
 1012328:	int3   
 1012329:	int3   
 101232a:	int3   
 101232b:	int3   
 101232c:	int3   
 101232d:	int3   
 101232e:	int3   
 101232f:	int3   
 1012330:	mov    QWORD PTR [rcx+0x68],rdx
 1012334:	xor    eax,eax
 1012336:	ret    
 1012337:	int3   
 1012338:	int3   
 1012339:	int3   
 101233a:	int3   
 101233b:	int3   
 101233c:	int3   
 101233d:	int3   
 101233e:	int3   
 101233f:	int3   
 1012340:	mov    QWORD PTR [rcx+0x13c8],rdx
 1012347:	xor    eax,eax
 1012349:	ret    
 101234a:	int3   
 101234b:	int3   
 101234c:	int3   
 101234d:	int3   
 101234e:	int3   
 101234f:	int3   
 1012350:	cmp    DWORD PTR [rcx+0x13c0],0x0
 1012357:	je     0x1012376
 1012359:	cmp    DWORD PTR [rcx+0x13bc],0x0
 1012360:	jne    0x1012376
 1012362:	cmp    DWORD PTR [rcx+0x13b8],0x0
 1012369:	je     0x1012376
 101236b:	mov    eax,DWORD PTR [rcx+0x13b4]
 1012371:	mov    DWORD PTR [rdx],eax
 1012373:	xor    eax,eax
 1012375:	ret    
 1012376:	mov    eax,0x80004005
 101237b:	ret    
 101237c:	int3   
 101237d:	int3   
 101237e:	int3   
 101237f:	int3   
 1012380:	int3   
 1012381:	int3   
 1012382:	int3   
 1012383:	int3   
 1012384:	int3   
 1012385:	int3   
 1012386:	int3   
 1012387:	int3   
 1012388:	int3   
 1012389:	int3   
 101238a:	int3   
 101238b:	int3   
 101238c:	int3   
 101238d:	int3   
 101238e:	int3   
 101238f:	int3   
 1012390:	rex push rbx
 1012392:	sub    rsp,0x20
 1012396:	xor    r9d,r9d
 1012399:	lea    rbx,[rip+0xfffffffffffedc60]        # 0x1000000
 10123a0:	mov    r10,r8
 10123a3:	mov    QWORD PTR [r8],r9
 10123a6:	mov    r11,QWORD PTR [rbx+0x3ce8]
 10123ad:	cmp    r11,QWORD PTR [rdx]
 10123b0:	jne    0x10123c4
 10123b2:	mov    r11,QWORD PTR [rbx+0x3cf0]
 10123b9:	cmp    r11,QWORD PTR [rdx+0x8]
 10123bd:	jne    0x10123c4
 10123bf:	mov    eax,r9d
 10123c2:	jmp    0x10123c9
 10123c4:	sbb    eax,eax
 10123c6:	sbb    eax,0xffffffff
 10123c9:	test   eax,eax
 10123cb:	jne    0x10123de
 10123cd:	mov    QWORD PTR [r8],rcx
 10123d0:	mov    rax,QWORD PTR [rcx]
 10123d3:	call   QWORD PTR [rax+0x8]
 10123d6:	xor    eax,eax
 10123d8:	add    rsp,0x20
 10123dc:	pop    rbx
 10123dd:	ret    
 10123de:	mov    r8,QWORD PTR [rbx+0x3db8]
 10123e5:	cmp    r8,QWORD PTR [rdx]
 10123e8:	jne    0x10123f7
 10123ea:	mov    r8,QWORD PTR [rbx+0x3dc0]
 10123f1:	cmp    r8,QWORD PTR [rdx+0x8]
 10123f5:	je     0x10123ff
 10123f7:	sbb    eax,eax
 10123f9:	sbb    eax,0xffffffff
 10123fc:	mov    r9d,eax
 10123ff:	test   r9d,r9d
 1012402:	jne    0x1012415
 1012404:	mov    QWORD PTR [r10],rcx
 1012407:	mov    rax,QWORD PTR [rcx]
 101240a:	call   QWORD PTR [rax+0x8]
 101240d:	xor    eax,eax
 101240f:	add    rsp,0x20
 1012413:	pop    rbx
 1012414:	ret    
 1012415:	mov    eax,0x80004002
 101241a:	add    rsp,0x20
 101241e:	pop    rbx
 101241f:	ret    
 1012420:	int3   
 1012421:	int3   
 1012422:	int3   
 1012423:	int3   
 1012424:	int3   
 1012425:	int3   
 1012426:	int3   
 1012427:	int3   
 1012428:	int3   
 1012429:	int3   
 101242a:	int3   
 101242b:	int3   
 101242c:	int3   
 101242d:	int3   
 101242e:	int3   
 101242f:	int3   
 1012430:	mov    eax,0x1
 1012435:	lock xadd DWORD PTR [rcx+0x8],eax
 101243a:	add    eax,0x1
 101243d:	ret    
 101243e:	int3   
 101243f:	int3   
 1012440:	int3   
 1012441:	int3   
 1012442:	int3   
 1012443:	int3   
 1012444:	int3   
 1012445:	int3   
 1012446:	int3   
 1012447:	int3   
 1012448:	int3   
 1012449:	int3   
 101244a:	int3   
 101244b:	int3   
 101244c:	int3   
 101244d:	int3   
 101244e:	int3   
 101244f:	int3   
 1012450:	rex push rbx
 1012452:	sub    rsp,0x20
 1012456:	or     ebx,0xffffffff
 1012459:	lock xadd DWORD PTR [rcx+0x8],ebx
 101245e:	add    ebx,0xffffffff
 1012461:	jne    0x101246f
 1012463:	mov    rdx,rcx
 1012466:	mov    rcx,QWORD PTR [rcx+0x10]
 101246a:	call   0x1011580
 101246f:	mov    eax,ebx
 1012471:	add    rsp,0x20
 1012475:	pop    rbx
 1012476:	ret    
 1012477:	int3   
 1012478:	int3   
 1012479:	int3   
 101247a:	int3   
 101247b:	int3   
 101247c:	int3   
 101247d:	int3   
 101247e:	int3   
 101247f:	int3   
 1012480:	mov    QWORD PTR [rsp+0x8],rbx
 1012485:	mov    QWORD PTR [rsp+0x10],rbp
 101248a:	mov    QWORD PTR [rsp+0x18],rsi
 101248f:	push   rdi
 1012490:	sub    rsp,0x20
 1012494:	mov    ebx,DWORD PTR [rcx+0x228]
 101249a:	mov    edx,0x220
 101249f:	mov    rbp,rcx
 10124a2:	call   0x1010b10
 10124a7:	xor    esi,esi
 10124a9:	test   ebx,ebx
 10124ab:	lea    edi,[rbx+rax*1]
 10124ae:	je     0x10124d7
 10124b0:	mov    ecx,esi
 10124b2:	mov    edx,0xb3c
 10124b7:	imul   rcx,rcx,0xb3c
 10124be:	add    rcx,QWORD PTR [rbp+0x220]
 10124c5:	call   0x1010b10
 10124ca:	add    esi,0x1
 10124cd:	add    edi,eax
 10124cf:	cmp    esi,DWORD PTR [rbp+0x228]
 10124d5:	jb     0x10124b0
 10124d7:	mov    rbx,QWORD PTR [rsp+0x30]
 10124dc:	mov    rbp,QWORD PTR [rsp+0x38]
 10124e1:	mov    rsi,QWORD PTR [rsp+0x40]
 10124e6:	mov    eax,edi
 10124e8:	add    rsp,0x20
 10124ec:	pop    rdi
 10124ed:	ret    
 10124ee:	int3   
 10124ef:	int3   
 10124f0:	int3   
 10124f1:	int3   
 10124f2:	int3   
 10124f3:	int3   
 10124f4:	int3   
 10124f5:	int3   
 10124f6:	int3   
 10124f7:	int3   
 10124f8:	int3   
 10124f9:	int3   
 10124fa:	int3   
 10124fb:	int3   
 10124fc:	int3   
 10124fd:	int3   
 10124fe:	int3   
 10124ff:	int3   
 1012500:	mov    QWORD PTR [rsp+0x8],rbx
 1012505:	push   rdi
 1012506:	sub    rsp,0x20
 101250a:	mov    rbx,rcx
 101250d:	mov    rcx,QWORD PTR [rcx+0x10]
 1012511:	mov    rdi,rdx
 1012514:	test   rcx,rcx
 1012517:	je     0x1012527
 1012519:	mov    rax,QWORD PTR [rcx]
 101251c:	call   QWORD PTR [rax+0x10]
 101251f:	mov    QWORD PTR [rbx+0x10],0x0
 1012527:	mov    QWORD PTR [rbx+0x10],rdi
 101252b:	mov    rax,QWORD PTR [rdi]
 101252e:	mov    rcx,rdi
 1012531:	call   QWORD PTR [rax+0x8]
 1012534:	mov    rcx,QWORD PTR [rbx+0x10]
 1012538:	call   0x1011200
 101253d:	mov    rcx,QWORD PTR [rbx+0x10]
 1012541:	mov    QWORD PTR [rbx+0x1370],rax
 1012548:	call   0x1011200
 101254d:	mov    QWORD PTR [rbx+0x1398],rax
 1012554:	mov    rbx,QWORD PTR [rsp+0x30]
 1012559:	add    rsp,0x20
 101255d:	pop    rdi
 101255e:	ret    
 101255f:	int3   
 1012560:	int3   
 1012561:	int3   
 1012562:	int3   
 1012563:	int3   
 1012564:	int3   
 1012565:	int3   
 1012566:	int3   
 1012567:	int3   
 1012568:	int3   
 1012569:	int3   
 101256a:	int3   
 101256b:	int3   
 101256c:	int3   
 101256d:	int3   
 101256e:	int3   
 101256f:	int3   
 1012570:	test   rdx,rdx
 1012573:	jne    0x101257b
 1012575:	mov    eax,0x80070057
 101257a:	ret    
 101257b:	mov    eax,DWORD PTR [rcx+0xa4]
 1012581:	test   eax,eax
 1012583:	je     0x101258f
 1012585:	bt     DWORD PTR [rcx+0xa8],0x15
 101258d:	jae    0x1012592
 101258f:	mov    eax,DWORD PTR [rcx+0x74]
 1012592:	mov    DWORD PTR [rdx],eax
 1012594:	xor    eax,eax
 1012596:	ret    
 1012597:	int3   
 1012598:	int3   
 1012599:	int3   
 101259a:	int3   
 101259b:	int3   
 101259c:	int3   
 101259d:	int3   
 101259e:	int3   
 101259f:	int3   
 10125a0:	mov    QWORD PTR [rsp+0x18],rbx
 10125a5:	mov    QWORD PTR [rsp+0x20],rsi
 10125aa:	mov    QWORD PTR [rsp+0x8],rcx
 10125af:	push   rdi
 10125b0:	push   r12
 10125b2:	push   r13
 10125b4:	sub    rsp,0x20
 10125b8:	mov    rsi,rcx
 10125bb:	xor    r12d,r12d
 10125be:	mov    ebx,r12d
 10125c1:	mov    r13d,r12d
 10125c4:	mov    rax,QWORD PTR [rcx+0x18]
 10125c8:	mov    rdx,QWORD PTR [rax]
 10125cb:	xchg   ax,ax
 10125cd:	data16 xchg ax,ax
 10125d0:	test   rdx,rdx
 10125d3:	je     0x10125e6
 10125d5:	mov    rdi,QWORD PTR [rdx]
 10125d8:	mov    rcx,QWORD PTR [rsi+0x10]
 10125dc:	call   0x10109e0
 10125e1:	mov    rdx,rdi
 10125e4:	jmp    0x10125d0
 10125e6:	jmp    0x101260f
 10125e8:	mov    r13d,eax
 10125eb:	cmp    eax,0xc00000fd
 10125f0:	jne    0x10125f8
 10125f2:	call   QWORD PTR [rip+0xfffffffffffeedd0]        # 0x10013c8
 10125f8:	mov    ecx,0x80004005
 10125fd:	test   r13d,r13d
 1012600:	cmovns r13d,ecx
 1012604:	xor    r12d,r12d
 1012607:	mov    rsi,QWORD PTR [rsp+0x40]
 101260c:	mov    ebx,r12d
 101260f:	test   ebx,ebx
 1012611:	cmovns ebx,r13d
 1012615:	mov    DWORD PTR [rsp+0x48],ebx
 1012619:	mov    rax,QWORD PTR [rsi+0x18]
 101261d:	mov    QWORD PTR [rax],r12
 1012620:	mov    rax,QWORD PTR [rsi+0x18]
 1012624:	mov    QWORD PTR [rsi+0x20],rax
 1012628:	jmp    0x101264a
 101262a:	mov    ebx,eax
 101262c:	cmp    eax,0xc00000fd
 1012631:	jne    0x1012639
 1012633:	call   QWORD PTR [rip+0xfffffffffffeed8f]        # 0x10013c8
 1012639:	mov    ecx,0x80004005
 101263e:	test   ebx,ebx
 1012640:	cmovns ebx,ecx
 1012643:	mov    r12d,ebx
 1012646:	mov    ebx,DWORD PTR [rsp+0x48]
 101264a:	test   ebx,ebx
 101264c:	cmovns ebx,r12d
 1012650:	mov    eax,ebx
 1012652:	mov    rbx,QWORD PTR [rsp+0x50]
 1012657:	mov    rsi,QWORD PTR [rsp+0x58]
 101265c:	add    rsp,0x20
 1012660:	pop    r13
 1012662:	pop    r12
 1012664:	pop    rdi
 1012665:	ret    
 1012666:	int3   
 1012667:	int3   
 1012668:	int3   
 1012669:	int3   
 101266a:	int3   
 101266b:	int3   
 101266c:	int3   
 101266d:	int3   
 101266e:	int3   
 101266f:	int3   
 1012670:	rex push rbx
 1012672:	sub    rsp,0x20
 1012676:	mov    rbx,rcx
 1012679:	add    rcx,0x1360
 1012680:	call   0x10125a0
 1012685:	test   eax,eax
 1012687:	jne    0x1012695
 1012689:	lea    rcx,[rbx+0x1388]
 1012690:	call   0x10125a0
 1012695:	add    rsp,0x20
 1012699:	pop    rbx
 101269a:	ret    
 101269b:	int3   
 101269c:	int3   
 101269d:	int3   
 101269e:	int3   
 101269f:	int3   
 10126a0:	int3   
 10126a1:	int3   
 10126a2:	int3   
 10126a3:	int3   
 10126a4:	int3   
 10126a5:	int3   
 10126a6:	int3   
 10126a7:	int3   
 10126a8:	int3   
 10126a9:	int3   
 10126aa:	int3   
 10126ab:	int3   
 10126ac:	int3   
 10126ad:	int3   
 10126ae:	int3   
 10126af:	int3   
 10126b0:	mov    QWORD PTR [rsp+0x8],rbx
 10126b5:	mov    DWORD PTR [rcx+0x22c],edx
 10126bb:	lea    rdx,[rcx+0x14]
 10126bf:	mov    rbx,r9
 10126c2:	xor    r11d,r11d
 10126c5:	mov    r9,rcx
 10126c8:	mov    r10d,0x105
 10126ce:	sub    r8,rdx
 10126d1:	lea    rax,[r10+0x7ffffef9]
 10126d8:	test   rax,rax
 10126db:	je     0x10126f6
 10126dd:	movzx  eax,WORD PTR [r8+rdx*1]
 10126e2:	test   ax,ax
 10126e5:	je     0x10126f6
 10126e7:	mov    WORD PTR [rdx],ax
 10126ea:	add    rdx,0x2
 10126ee:	sub    r10,0x1
 10126f2:	jne    0x10126d1
 10126f4:	jmp    0x10126fb
 10126f6:	test   r10,r10
 10126f9:	jne    0x1012705
 10126fb:	sub    rdx,0x2
 10126ff:	mov    r11d,0x8007007a
 1012705:	test   r11d,r11d
 1012708:	mov    WORD PTR [rdx],0x0
 101270d:	mov    eax,r11d
 1012710:	jne    0x1012738
 1012712:	mov    ecx,DWORD PTR [rbx]
 1012714:	mov    DWORD PTR [r9],ecx
 1012717:	mov    ecx,DWORD PTR [rbx+0x4]
 101271a:	mov    DWORD PTR [r9+0x4],ecx
 101271e:	mov    ecx,DWORD PTR [rbx+0x8]
 1012721:	mov    DWORD PTR [r9+0x8],ecx
 1012725:	mov    ecx,DWORD PTR [rbx+0xc]
 1012728:	mov    DWORD PTR [r9+0xc],ecx
 101272c:	mov    rcx,QWORD PTR [rsp+0x28]
 1012731:	mov    QWORD PTR [r9+0x220],rcx
 1012738:	mov    rbx,QWORD PTR [rsp+0x8]
 101273d:	ret    
 101273e:	int3   
 101273f:	int3   
 1012740:	int3   
 1012741:	int3   
 1012742:	int3   
 1012743:	int3   
 1012744:	int3   
 1012745:	int3   
 1012746:	int3   
 1012747:	int3   
 1012748:	int3   
 1012749:	int3   
 101274a:	int3   
 101274b:	int3   
 101274c:	int3   
 101274d:	int3   
 101274e:	int3   
 101274f:	int3   
 1012750:	rex push rsi
 1012752:	mov    eax,DWORD PTR [rcx+0x228]
 1012758:	movzx  esi,r9w
 101275c:	mov    r11,r8
 101275f:	cmp    eax,DWORD PTR [rcx+0x22c]
 1012765:	mov    r10,rdx
 1012768:	jne    0x1012771
 101276a:	mov    eax,0x80004005
 101276f:	pop    rsi
 1012770:	ret    
 1012771:	mov    QWORD PTR [rsp+0x10],rbx
 1012776:	mov    QWORD PTR [rsp+0x18],rdi
 101277b:	mov    rdi,rax
 101277e:	add    eax,0x1
 1012781:	xor    ebx,ebx
 1012783:	mov    edx,0x105
 1012788:	imul   rdi,rdi,0xb3c
 101278f:	add    rdi,QWORD PTR [rcx+0x220]
 1012796:	mov    DWORD PTR [rcx+0x228],eax
 101279c:	mov    r8,rdx
 101279f:	lea    rcx,[rdi+0x6]
 10127a3:	mov    r9d,ebx
 10127a6:	sub    r10,rcx
 10127a9:	data16 xchg ax,ax
 10127ac:	data16 data16 xchg ax,ax
 10127b0:	lea    rax,[r8+0x7ffffef9]
 10127b7:	test   rax,rax
 10127ba:	je     0x10127d5
 10127bc:	movzx  eax,WORD PTR [r10+rcx*1]
 10127c1:	test   ax,ax
 10127c4:	je     0x10127d5
 10127c6:	mov    WORD PTR [rcx],ax
 10127c9:	add    rcx,0x2
 10127cd:	sub    r8,0x1
 10127d1:	jne    0x10127b0
 10127d3:	jmp    0x10127da
 10127d5:	test   r8,r8
 10127d8:	jne    0x10127e4
 10127da:	sub    rcx,0x2
 10127de:	mov    r9d,0x8007007a
 10127e4:	mov    WORD PTR [rcx],bx
 10127e7:	lea    rcx,[rdi+0x316]
 10127ee:	sub    r11,rcx
 10127f1:	lea    rax,[rdx+0x7ffffef9]
 10127f8:	test   rax,rax
 10127fb:	je     0x1012816
 10127fd:	movzx  eax,WORD PTR [r11+rcx*1]
 1012802:	test   ax,ax
 1012805:	je     0x1012816
 1012807:	mov    WORD PTR [rcx],ax
 101280a:	add    rcx,0x2
 101280e:	sub    rdx,0x1
 1012812:	jne    0x10127f1
 1012814:	jmp    0x101281b
 1012816:	test   rdx,rdx
 1012819:	jne    0x1012824
 101281b:	sub    rcx,0x2
 101281f:	mov    ebx,0x8007007a
 1012824:	test   r9d,r9d
 1012827:	mov    WORD PTR [rcx],0x0
 101282c:	mov    WORD PTR [rdi+0x4],si
 1012830:	mov    rdi,QWORD PTR [rsp+0x18]
 1012835:	cmovns r9d,ebx
 1012839:	mov    rbx,QWORD PTR [rsp+0x10]
 101283e:	mov    eax,r9d
 1012841:	pop    rsi
 1012842:	ret    
 1012843:	int3   
 1012844:	int3   
 1012845:	int3   
 1012846:	int3   
 1012847:	int3   
 1012848:	int3   
 1012849:	int3   
 101284a:	int3   
 101284b:	int3   
 101284c:	int3   
 101284d:	int3   
 101284e:	int3   
 101284f:	int3   
 1012850:	mov    QWORD PTR [rsp+0x8],rbx
 1012855:	mov    QWORD PTR [rsp+0x10],rsi
 101285a:	mov    QWORD PTR [rsp+0x18],rdi
 101285f:	mov    QWORD PTR [rsp+0x20],r12
 1012864:	push   r13
 1012866:	sub    rsp,0x40
 101286a:	mov    r12,r9
 101286d:	mov    r13,r8
 1012870:	mov    edi,edx
 1012872:	mov    rsi,rcx
 1012875:	xor    ebx,ebx
 1012877:	mov    DWORD PTR [rsp+0x30],ebx
 101287b:	mov    rcx,QWORD PTR [rcx+0x10]
 101287f:	call   0x1011200
 1012884:	mov    rcx,rax
 1012887:	mov    eax,0xb3c
 101288c:	mul    rdi
 101288f:	mov    rdx,0xffffffffffffffff
 1012896:	cmovo  rax,rdx
 101289a:	mov    rdx,rax
 101289d:	call   0x1010980
 10128a2:	test   rax,rax
 10128a5:	jne    0x10128b2
 10128a7:	mov    eax,0x8007000e
 10128ac:	mov    DWORD PTR [rsp+0x30],eax
 10128b0:	jmp    0x10128cf
 10128b2:	lea    rcx,[rsi+0x1120]
 10128b9:	mov    QWORD PTR [rsp+0x20],rax
 10128be:	mov    r9,r12
 10128c1:	mov    r8,r13
 10128c4:	mov    edx,edi
 10128c6:	call   0x10126b0
 10128cb:	mov    DWORD PTR [rsp+0x30],eax
 10128cf:	jmp    0x10128ee
 10128d1:	mov    ebx,eax
 10128d3:	cmp    eax,0xc00000fd
 10128d8:	jne    0x10128e0
 10128da:	call   QWORD PTR [rip+0xfffffffffffeeae8]        # 0x10013c8
 10128e0:	mov    eax,0x80004005
 10128e5:	test   ebx,ebx
 10128e7:	cmovns ebx,eax
 10128ea:	mov    eax,DWORD PTR [rsp+0x30]
 10128ee:	test   eax,eax
 10128f0:	cmovns eax,ebx
 10128f3:	mov    rbx,QWORD PTR [rsp+0x50]
 10128f8:	mov    rsi,QWORD PTR [rsp+0x58]
 10128fd:	mov    rdi,QWORD PTR [rsp+0x60]
 1012902:	mov    r12,QWORD PTR [rsp+0x68]
 1012907:	add    rsp,0x40
 101290b:	pop    r13
 101290d:	ret    
 101290e:	int3   
 101290f:	int3   
 1012910:	int3   
 1012911:	int3   
 1012912:	int3   
 1012913:	int3   
 1012914:	int3   
 1012915:	int3   
 1012916:	int3   
 1012917:	int3   
 1012918:	int3   
 1012919:	int3   
 101291a:	int3   
 101291b:	int3   
 101291c:	int3   
 101291d:	int3   
 101291e:	int3   
 101291f:	int3   
 1012920:	mov    QWORD PTR [rsp+0x18],rbp
 1012925:	mov    QWORD PTR [rsp+0x20],rsi
 101292a:	push   rdi
 101292b:	sub    rsp,0x20
 101292f:	cmp    DWORD PTR [rcx+0x13b8],0x0
 1012936:	mov    rsi,r8
 1012939:	mov    rbp,rdx
 101293c:	mov    rdi,rcx
 101293f:	jne    0x1012953
 1012941:	xor    eax,eax
 1012943:	mov    rbp,QWORD PTR [rsp+0x40]
 1012948:	mov    rsi,QWORD PTR [rsp+0x48]
 101294d:	add    rsp,0x20
 1012951:	pop    rdi
 1012952:	ret    
 1012953:	mov    r9d,DWORD PTR [rcx+0x13b4]
 101295a:	lea    r8,[rip+0xffffffffffff163f]        # 0x1003fa0
 1012961:	mov    rdx,rsi
 1012964:	mov    rcx,rbp
 1012967:	call   0x1010fa0
 101296c:	test   eax,eax
 101296e:	mov    r11d,eax
 1012971:	js     0x1012a21
 1012977:	mov    eax,DWORD PTR [rdi+0x13b4]
 101297d:	cmp    eax,0x20000001
 1012982:	jne    0x10129a5
 1012984:	lea    r8,[rip+0xffffffffffff15b5]        # 0x1003f40
 101298b:	mov    rdx,rsi
 101298e:	mov    rcx,rbp
 1012991:	mov    rbp,QWORD PTR [rsp+0x40]
 1012996:	mov    rsi,QWORD PTR [rsp+0x48]
 101299b:	add    rsp,0x20
 101299f:	pop    rdi
 10129a0:	jmp    0x100c610
 10129a5:	test   eax,eax
 10129a7:	jne    0x10129ca
 10129a9:	lea    r8,[rip+0xffffffffffff1500]        # 0x1003eb0
 10129b0:	mov    rdx,rsi
 10129b3:	mov    rcx,rbp
 10129b6:	mov    rbp,QWORD PTR [rsp+0x40]
 10129bb:	mov    rsi,QWORD PTR [rsp+0x48]
 10129c0:	add    rsp,0x20
 10129c4:	pop    rdi
 10129c5:	jmp    0x100c610
 10129ca:	mov    QWORD PTR [rsp+0x30],rbx
 10129cf:	mov    QWORD PTR [rsp+0x38],r12
 10129d4:	lea    r12,[rip+0xffffffffffff13f5]        # 0x1003dd0
 10129db:	xor    ebx,ebx
 10129dd:	data16 xchg ax,ax
 10129e0:	mov    ecx,DWORD PTR [rbx+r12*1]
 10129e4:	mov    eax,ecx
 10129e6:	and    eax,DWORD PTR [rdi+0x13b4]
 10129ec:	cmp    ecx,eax
 10129ee:	jne    0x1012a07
 10129f0:	mov    r8,QWORD PTR [rbx+r12*1+0x8]
 10129f5:	mov    rdx,rsi
 10129f8:	mov    rcx,rbp
 10129fb:	call   0x100c610
 1012a00:	test   eax,eax
 1012a02:	mov    r11d,eax
 1012a05:	js     0x1012a17
 1012a07:	add    rbx,0x10
 1012a0b:	cmp    rbx,0xe0
 1012a12:	jb     0x10129e0
 1012a14:	mov    eax,r11d
 1012a17:	mov    rbx,QWORD PTR [rsp+0x30]
 1012a1c:	mov    r12,QWORD PTR [rsp+0x38]
 1012a21:	mov    rbp,QWORD PTR [rsp+0x40]
 1012a26:	mov    rsi,QWORD PTR [rsp+0x48]
 1012a2b:	add    rsp,0x20
 1012a2f:	pop    rdi
 1012a30:	ret    
 1012a31:	int3   
 1012a32:	int3   
 1012a33:	int3   
 1012a34:	int3   
 1012a35:	int3   
 1012a36:	int3   
 1012a37:	int3   
 1012a38:	int3   
 1012a39:	int3   
 1012a3a:	int3   
 1012a3b:	int3   
 1012a3c:	int3   
 1012a3d:	int3   
 1012a3e:	int3   
 1012a3f:	int3   
 1012a40:	mov    QWORD PTR [rsp+0x8],rbx
 1012a45:	push   rdi
 1012a46:	sub    rsp,0x30
 1012a4a:	xor    edi,edi
 1012a4c:	mov    rbx,QWORD PTR [rcx+0x18]
 1012a50:	mov    QWORD PTR [rsp+0x20],rbx
 1012a55:	test   rbx,rbx
 1012a58:	je     0x1012a7a
 1012a5a:	lea    rcx,[rbx+0xc]
 1012a5e:	mov    edx,DWORD PTR [rcx]
 1012a60:	shl    rdx,0x4
 1012a64:	add    rdx,0xc
 1012a68:	call   0x1010b10
 1012a6d:	mov    DWORD PTR [rbx+0x8],eax
 1012a70:	mov    rbx,QWORD PTR [rbx]
 1012a73:	mov    QWORD PTR [rsp+0x20],rbx
 1012a78:	jmp    0x1012a55
 1012a7a:	jmp    0x1012a95
 1012a7c:	mov    edi,eax
 1012a7e:	cmp    eax,0xc00000fd
 1012a83:	jne    0x1012a8b
 1012a85:	call   QWORD PTR [rip+0xfffffffffffee93d]        # 0x10013c8
 1012a8b:	mov    eax,0x80004005
 1012a90:	test   edi,edi
 1012a92:	cmovns edi,eax
 1012a95:	mov    eax,edi
 1012a97:	mov    rbx,QWORD PTR [rsp+0x40]
 1012a9c:	add    rsp,0x30
 1012aa0:	pop    rdi
 1012aa1:	ret    
 1012aa2:	int3   
 1012aa3:	int3   
 1012aa4:	int3   
 1012aa5:	int3   
 1012aa6:	int3   
 1012aa7:	int3   
 1012aa8:	int3   
 1012aa9:	int3   
 1012aaa:	int3   
 1012aab:	int3   
 1012aac:	int3   
 1012aad:	int3   
 1012aae:	int3   
 1012aaf:	int3   
 1012ab0:	mov    QWORD PTR [rsp+0x8],rbx
 1012ab5:	push   rdi
 1012ab6:	sub    rsp,0x20
 1012aba:	xor    edi,edi
 1012abc:	mov    DWORD PTR [rcx],0x2
 1012ac2:	mov    rbx,rcx
 1012ac5:	mov    DWORD PTR [rcx+0x4],edi
 1012ac8:	mov    QWORD PTR [rcx+0x8],rdi
 1012acc:	mov    QWORD PTR [rcx+0x10],rdi
 1012ad0:	mov    QWORD PTR [rcx+0x18],rdi
 1012ad4:	mov    QWORD PTR [rcx+0x20],rdi
 1012ad8:	mov    QWORD PTR [rcx+0x28],rdi
 1012adc:	mov    QWORD PTR [rcx+0x30],rdi
 1012ae0:	mov    QWORD PTR [rcx+0x38],rdi
 1012ae4:	mov    QWORD PTR [rcx+0x40],rdi
 1012ae8:	mov    QWORD PTR [rcx+0x48],rdi
 1012aec:	mov    QWORD PTR [rcx+0x50],rdi
 1012af0:	mov    DWORD PTR [rcx+0x58],edi
 1012af3:	mov    DWORD PTR [rcx+0x5c],edi
 1012af6:	mov    DWORD PTR [rcx+0x60],edi
 1012af9:	mov    DWORD PTR [rcx+0x64],edi
 1012afc:	mov    QWORD PTR [rcx+0x68],rdi
 1012b00:	mov    QWORD PTR [rcx+0x78],rdi
 1012b04:	mov    QWORD PTR [rcx+0x80],rdi
 1012b0b:	mov    DWORD PTR [rcx+0x88],edi
 1012b11:	mov    DWORD PTR [rcx+0x8c],edi
 1012b17:	mov    DWORD PTR [rcx+0x90],edi
 1012b1d:	mov    DWORD PTR [rcx+0x94],edi
 1012b23:	mov    DWORD PTR [rcx+0x98],edi
 1012b29:	mov    DWORD PTR [rcx+0x9c],edi
 1012b2f:	mov    DWORD PTR [rcx+0xa0],edi
 1012b35:	mov    DWORD PTR [rcx+0xa4],edi
 1012b3b:	mov    DWORD PTR [rcx+0xa8],edi
 1012b41:	mov    DWORD PTR [rcx+0xac],edi
 1012b47:	mov    DWORD PTR [rcx+0xb0],edi
 1012b4d:	mov    DWORD PTR [rcx+0xb4],edi
 1012b53:	mov    DWORD PTR [rcx+0xb8],edi
 1012b59:	mov    DWORD PTR [rcx+0xbc],edi
 1012b5f:	mov    DWORD PTR [rcx+0xc4],edi
 1012b65:	mov    DWORD PTR [rcx+0xc8],edi
 1012b6b:	mov    DWORD PTR [rcx+0xcc],edi
 1012b71:	mov    QWORD PTR [rcx+0xd0],rdi
 1012b78:	mov    DWORD PTR [rcx+0xd8],edi
 1012b7e:	mov    DWORD PTR [rcx+0xdc],edi
 1012b84:	mov    DWORD PTR [rcx+0xe0],0x80
 1012b8e:	mov    DWORD PTR [rcx+0xe4],edi
 1012b94:	add    rcx,0xe8
 1012b9b:	xor    edx,edx
 1012b9d:	mov    r8d,0x800
 1012ba3:	call   0x10107ba
 1012ba8:	lea    rcx,[rbx+0x900]
 1012baf:	xor    edx,edx
 1012bb1:	mov    r8d,0x800
 1012bb7:	mov    QWORD PTR [rbx+0x8e8],rdi
 1012bbe:	mov    DWORD PTR [rbx+0x8f0],edi
 1012bc4:	mov    DWORD PTR [rbx+0x8f4],edi
 1012bca:	mov    DWORD PTR [rbx+0x8f8],0x80
 1012bd4:	mov    DWORD PTR [rbx+0x8fc],edi
 1012bda:	call   0x10107ba
 1012bdf:	lea    rcx,[rbx+0x1108]
 1012be6:	xor    edx,edx
 1012be8:	mov    r8d,0x230
 1012bee:	call   0x10107ba
 1012bf3:	mov    DWORD PTR [rbx+0x70],edi
 1012bf6:	mov    DWORD PTR [rbx+0x74],edi
 1012bf9:	mov    rax,rbx
 1012bfc:	mov    rbx,QWORD PTR [rsp+0x30]
 1012c01:	add    rsp,0x20
 1012c05:	pop    rdi
 1012c06:	ret    
 1012c07:	int3   
 1012c08:	int3   
 1012c09:	int3   
 1012c0a:	int3   
 1012c0b:	int3   
 1012c0c:	int3   
 1012c0d:	int3   
 1012c0e:	int3   
 1012c0f:	int3   
 1012c10:	mov    QWORD PTR [rsp+0x8],rbx
 1012c15:	mov    QWORD PTR [rsp+0x10],rbp
 1012c1a:	mov    QWORD PTR [rsp+0x18],rsi
 1012c1f:	push   rdi
 1012c20:	sub    rsp,0x20
 1012c24:	lea    rax,[rip+0xffffffffffff1915]        # 0x1004540
 1012c2b:	mov    rdi,rcx
 1012c2e:	mov    DWORD PTR [rcx+0x8],0x1
 1012c35:	mov    QWORD PTR [rcx],rax
 1012c38:	xor    ebp,ebp
 1012c3a:	add    rcx,0x18
 1012c3e:	mov    QWORD PTR [rcx-0x8],rbp
 1012c42:	mov    ebx,r8d
 1012c45:	mov    rsi,rdx
 1012c48:	call   0x1012ab0
 1012c4d:	test   rsi,rsi
 1012c50:	mov    QWORD PTR [rdi+0x1360],0x200
 1012c5b:	mov    QWORD PTR [rdi+0x1368],rbp
 1012c62:	mov    QWORD PTR [rdi+0x1370],rbp
 1012c69:	lea    r11,[rdi+0xe8]
 1012c70:	mov    QWORD PTR [rdi+0x1378],r11
 1012c77:	mov    QWORD PTR [rdi+0x1380],r11
 1012c7e:	mov    QWORD PTR [rdi+0x1388],0x200
 1012c89:	mov    QWORD PTR [rdi+0x1390],rbp
 1012c90:	mov    QWORD PTR [rdi+0x1398],rbp
 1012c97:	lea    rax,[rdi+0x900]
 1012c9e:	mov    QWORD PTR [rdi+0x13a0],rax
 1012ca5:	mov    QWORD PTR [rdi+0x13a8],rax
 1012cac:	mov    DWORD PTR [rdi+0x13b0],ebx
 1012cb2:	mov    DWORD PTR [rdi+0x13b4],ebp
 1012cb8:	mov    DWORD PTR [rdi+0x13b8],ebp
 1012cbe:	mov    DWORD PTR [rdi+0x13bc],ebp
 1012cc4:	mov    DWORD PTR [rdi+0x13c0],ebp
 1012cca:	mov    QWORD PTR [rdi+0x13c8],rbp
 1012cd1:	je     0x1012d13
 1012cd3:	mov    rcx,QWORD PTR [rdi+0x10]
 1012cd7:	test   rcx,rcx
 1012cda:	je     0x1012ce6
 1012cdc:	mov    rax,QWORD PTR [rcx]
 1012cdf:	call   QWORD PTR [rax+0x10]
 1012ce2:	mov    QWORD PTR [rdi+0x10],rbp
 1012ce6:	mov    QWORD PTR [rdi+0x10],rsi
 1012cea:	mov    rax,QWORD PTR [rsi]
 1012ced:	mov    rcx,rsi
 1012cf0:	call   QWORD PTR [rax+0x8]
 1012cf3:	mov    rcx,QWORD PTR [rdi+0x10]
 1012cf7:	call   0x1011200
 1012cfc:	mov    rcx,QWORD PTR [rdi+0x10]
 1012d00:	mov    QWORD PTR [rdi+0x1370],rax
 1012d07:	call   0x1011200
 1012d0c:	mov    QWORD PTR [rdi+0x1398],rax
 1012d13:	call   QWORD PTR [rip+0xfffffffffffee537]        # 0x1001250
 1012d19:	lea    rcx,[rdi+0x13d0]
 1012d20:	xor    edx,edx
 1012d22:	mov    r8d,0x208
 1012d28:	mov    DWORD PTR [rdi+0x74],eax
 1012d2b:	call   0x10107ba
 1012d30:	xor    edx,edx
 1012d32:	lea    rcx,[rdi+0x15d8]
 1012d39:	lea    r8d,[rdx+0x68]
 1012d3d:	call   0x10107ba
 1012d42:	mov    rbx,QWORD PTR [rsp+0x30]
 1012d47:	mov    rbp,QWORD PTR [rsp+0x38]
 1012d4c:	mov    rsi,QWORD PTR [rsp+0x40]
 1012d51:	xor    eax,eax
 1012d53:	mov    QWORD PTR [rdi+0x1640],rax
 1012d5a:	mov    QWORD PTR [rdi+0x1648],rax
 1012d61:	mov    QWORD PTR [rdi+0x1650],rax
 1012d68:	mov    rax,rdi
 1012d6b:	add    rsp,0x20
 1012d6f:	pop    rdi
 1012d70:	ret    
 1012d71:	int3   
 1012d72:	int3   
 1012d73:	int3   
 1012d74:	int3   
 1012d75:	int3   
 1012d76:	int3   
 1012d77:	int3   
 1012d78:	int3   
 1012d79:	int3   
 1012d7a:	int3   
 1012d7b:	int3   
 1012d7c:	int3   
 1012d7d:	int3   
 1012d7e:	int3   
 1012d7f:	int3   
 1012d80:	mov    QWORD PTR [rsp+0x10],rbx
 1012d85:	mov    QWORD PTR [rsp+0x18],rbp
 1012d8a:	mov    QWORD PTR [rsp+0x20],rsi
 1012d8f:	push   rdi
 1012d90:	sub    rsp,0x20
 1012d94:	xor    ebx,ebx
 1012d96:	test   rdx,rdx
 1012d99:	mov    rsi,r8
 1012d9c:	mov    rbp,rdx
 1012d9f:	mov    rdi,rcx
 1012da2:	je     0x1012e5a
 1012da8:	test   r8,r8
 1012dab:	je     0x1012e5a
 1012db1:	mov    r9,QWORD PTR [rcx+0x1380]
 1012db8:	mov    QWORD PTR [rsp+0x30],r12
 1012dbd:	mov    eax,DWORD PTR [r9+0x10]
 1012dc1:	cmp    DWORD PTR [r9+0xc],eax
 1012dc5:	jb     0x1012e10
 1012dc7:	mov    rcx,QWORD PTR [rcx+0x1370]
 1012dce:	test   rcx,rcx
 1012dd1:	je     0x1012e4c
 1012dd3:	mov    r12,QWORD PTR [rdi+0x1360]
 1012dda:	mov    rdx,r12
 1012ddd:	shl    rdx,0x4
 1012de1:	add    rdx,0x18
 1012de5:	call   0x1010980
 1012dea:	test   rax,rax
 1012ded:	mov    r11,rax
 1012df0:	je     0x1012e4c
 1012df2:	mov    QWORD PTR [rax],rbx
 1012df5:	mov    DWORD PTR [rax+0x8],ebx
 1012df8:	mov    DWORD PTR [rax+0xc],ebx
 1012dfb:	mov    DWORD PTR [rax+0x10],r12d
 1012dff:	mov    rax,QWORD PTR [rdi+0x1380]
 1012e06:	mov    QWORD PTR [rax],r11
 1012e09:	mov    QWORD PTR [rdi+0x1380],r11
 1012e10:	mov    rcx,QWORD PTR [rdi+0x1380]
 1012e17:	mov    edx,DWORD PTR [rcx+0xc]
 1012e1a:	lea    eax,[rdx+0x1]
 1012e1d:	add    rdx,rdx
 1012e20:	mov    DWORD PTR [rcx+0xc],eax
 1012e23:	mov    rax,QWORD PTR [rdi+0x1380]
 1012e2a:	add    QWORD PTR [rdi+0x1368],0x1
 1012e32:	lea    rcx,[rax+rdx*8+0x18]
 1012e37:	test   rcx,rcx
 1012e3a:	je     0x1012e4c
 1012e3c:	mov    r12,QWORD PTR [rsp+0x30]
 1012e41:	mov    QWORD PTR [rcx],rbp
 1012e44:	mov    QWORD PTR [rcx+0x8],rsi
 1012e48:	mov    eax,ebx
 1012e4a:	jmp    0x1012e5c
 1012e4c:	mov    r12,QWORD PTR [rsp+0x30]
 1012e51:	mov    ebx,0x8007000e
 1012e56:	mov    eax,ebx
 1012e58:	jmp    0x1012e5c
 1012e5a:	xor    eax,eax
 1012e5c:	mov    rbx,QWORD PTR [rsp+0x38]
 1012e61:	mov    rbp,QWORD PTR [rsp+0x40]
 1012e66:	mov    rsi,QWORD PTR [rsp+0x48]
 1012e6b:	add    rsp,0x20
 1012e6f:	pop    rdi
 1012e70:	ret    
 1012e71:	int3   
 1012e72:	int3   
 1012e73:	int3   
 1012e74:	int3   
 1012e75:	int3   
 1012e76:	int3   
 1012e77:	int3   
 1012e78:	int3   
 1012e79:	int3   
 1012e7a:	int3   
 1012e7b:	int3   
 1012e7c:	int3   
 1012e7d:	int3   
 1012e7e:	int3   
 1012e7f:	int3   
 1012e80:	mov    QWORD PTR [rsp+0x10],rbx
 1012e85:	mov    QWORD PTR [rsp+0x18],rbp
 1012e8a:	mov    QWORD PTR [rsp+0x20],rsi
 1012e8f:	push   rdi
 1012e90:	sub    rsp,0x20
 1012e94:	xor    ebx,ebx
 1012e96:	test   rdx,rdx
 1012e99:	mov    rsi,r8
 1012e9c:	mov    rbp,rdx
 1012e9f:	mov    rdi,rcx
 1012ea2:	je     0x1012f5a
 1012ea8:	test   r8,r8
 1012eab:	je     0x1012f5a
 1012eb1:	mov    r9,QWORD PTR [rcx+0x13a8]
 1012eb8:	mov    QWORD PTR [rsp+0x30],r12
 1012ebd:	mov    eax,DWORD PTR [r9+0x10]
 1012ec1:	cmp    DWORD PTR [r9+0xc],eax
 1012ec5:	jb     0x1012f10
 1012ec7:	mov    rcx,QWORD PTR [rcx+0x1398]
 1012ece:	test   rcx,rcx
 1012ed1:	je     0x1012f4c
 1012ed3:	mov    r12,QWORD PTR [rdi+0x1388]
 1012eda:	mov    rdx,r12
 1012edd:	shl    rdx,0x4
 1012ee1:	add    rdx,0x18
 1012ee5:	call   0x1010980
 1012eea:	test   rax,rax
 1012eed:	mov    r11,rax
 1012ef0:	je     0x1012f4c
 1012ef2:	mov    QWORD PTR [rax],rbx
 1012ef5:	mov    DWORD PTR [rax+0x8],ebx
 1012ef8:	mov    DWORD PTR [rax+0xc],ebx
 1012efb:	mov    DWORD PTR [rax+0x10],r12d
 1012eff:	mov    rax,QWORD PTR [rdi+0x13a8]
 1012f06:	mov    QWORD PTR [rax],r11
 1012f09:	mov    QWORD PTR [rdi+0x13a8],r11
 1012f10:	mov    rcx,QWORD PTR [rdi+0x13a8]
 1012f17:	mov    edx,DWORD PTR [rcx+0xc]
 1012f1a:	lea    eax,[rdx+0x1]
 1012f1d:	add    rdx,rdx
 1012f20:	mov    DWORD PTR [rcx+0xc],eax
 1012f23:	mov    rax,QWORD PTR [rdi+0x13a8]
 1012f2a:	add    QWORD PTR [rdi+0x1390],0x1
 1012f32:	lea    rcx,[rax+rdx*8+0x18]
 1012f37:	test   rcx,rcx
 1012f3a:	je     0x1012f4c
 1012f3c:	mov    r12,QWORD PTR [rsp+0x30]
 1012f41:	mov    QWORD PTR [rcx],rbp
 1012f44:	mov    QWORD PTR [rcx+0x8],rsi
 1012f48:	mov    eax,ebx
 1012f4a:	jmp    0x1012f5c
 1012f4c:	mov    r12,QWORD PTR [rsp+0x30]
 1012f51:	mov    ebx,0x8007000e
 1012f56:	mov    eax,ebx
 1012f58:	jmp    0x1012f5c
 1012f5a:	xor    eax,eax
 1012f5c:	mov    rbx,QWORD PTR [rsp+0x38]
 1012f61:	mov    rbp,QWORD PTR [rsp+0x40]
 1012f66:	mov    rsi,QWORD PTR [rsp+0x48]
 1012f6b:	add    rsp,0x20
 1012f6f:	pop    rdi
 1012f70:	ret    
 1012f71:	int3   
 1012f72:	int3   
 1012f73:	int3   
 1012f74:	int3   
 1012f75:	int3   
 1012f76:	int3   
 1012f77:	int3   
 1012f78:	int3   
 1012f79:	int3   
 1012f7a:	int3   
 1012f7b:	int3   
 1012f7c:	int3   
 1012f7d:	int3   
 1012f7e:	int3   
 1012f7f:	int3   
 1012f80:	rex push rbx
 1012f82:	sub    rsp,0x30
 1012f86:	xor    ebx,ebx
 1012f88:	mov    DWORD PTR [rsp+0x20],ebx
 1012f8c:	add    rcx,0x1120
 1012f93:	call   0x1012750
 1012f98:	mov    DWORD PTR [rsp+0x20],eax
 1012f9c:	jmp    0x1012fbb
 1012f9e:	mov    ebx,eax
 1012fa0:	cmp    eax,0xc00000fd
 1012fa5:	jne    0x1012fad
 1012fa7:	call   QWORD PTR [rip+0xfffffffffffee41b]        # 0x10013c8
 1012fad:	mov    eax,0x80004005
 1012fb2:	test   ebx,ebx
 1012fb4:	cmovns ebx,eax
 1012fb7:	mov    eax,DWORD PTR [rsp+0x20]
 1012fbb:	test   eax,eax
 1012fbd:	cmovns eax,ebx
 1012fc0:	add    rsp,0x30
 1012fc4:	pop    rbx
 1012fc5:	ret    
 1012fc6:	int3   
 1012fc7:	int3   
 1012fc8:	int3   
 1012fc9:	int3   
 1012fca:	int3   
 1012fcb:	int3   
 1012fcc:	int3   
 1012fcd:	int3   
 1012fce:	int3   
 1012fcf:	int3   
 1012fd0:	mov    QWORD PTR [rsp+0x8],rbx
 1012fd5:	mov    QWORD PTR [rsp+0x10],rsi
 1012fda:	push   rdi
 1012fdb:	sub    rsp,0x30
 1012fdf:	mov    rsi,rcx
 1012fe2:	xor    edi,edi
 1012fe4:	mov    DWORD PTR [rsp+0x20],edi
 1012fe8:	add    rcx,0x18
 1012fec:	mov    edx,0xa0
 1012ff1:	call   0x1010b10
 1012ff6:	mov    DWORD PTR [rsi+0xb8],eax
 1012ffc:	mov    rcx,QWORD PTR [rsi+0x38]
 1013000:	call   0x1010b60
 1013005:	mov    DWORD PTR [rsi+0xc0],eax
 101300b:	mov    rcx,QWORD PTR [rsi+0x40]
 101300f:	call   0x1010b60
 1013014:	mov    DWORD PTR [rsi+0xc4],eax
 101301a:	lea    rcx,[rsi+0x1360]
 1013021:	call   0x1012a40
 1013026:	mov    ebx,eax
 1013028:	mov    DWORD PTR [rsp+0x20],eax
 101302c:	test   eax,eax
 101302e:	jne    0x1013042
 1013030:	lea    rcx,[rsi+0x1388]
 1013037:	call   0x1012a40
 101303c:	mov    ebx,eax
 101303e:	mov    DWORD PTR [rsp+0x20],eax
 1013042:	mov    rcx,QWORD PTR [rsi+0x90]
 1013049:	call   0x1010b60
 101304e:	mov    DWORD PTR [rsi+0xd4],eax
 1013054:	mov    rcx,QWORD PTR [rsi+0x98]
 101305b:	call   0x1010b60
 1013060:	mov    DWORD PTR [rsi+0xd8],eax
 1013066:	mov    rcx,QWORD PTR [rsi+0x58]
 101306a:	call   0x1010b60
 101306f:	mov    DWORD PTR [rsi+0xd0],eax
 1013075:	mov    rcx,QWORD PTR [rsi+0x20]
 1013079:	call   0x1010b60
 101307e:	mov    DWORD PTR [rsi+0xbc],eax
 1013084:	mov    rcx,QWORD PTR [rsi+0x48]
 1013088:	call   0x1010b60
 101308d:	mov    DWORD PTR [rsi+0xc8],eax
 1013093:	mov    rcx,QWORD PTR [rsi+0x50]
 1013097:	call   0x1010b60
 101309c:	mov    DWORD PTR [rsi+0xcc],eax
 10130a2:	mov    rcx,QWORD PTR [rsi+0x60]
 10130a6:	call   0x1010b60
 10130ab:	mov    DWORD PTR [rsi+0xdc],eax
 10130b1:	mov    rcx,QWORD PTR [rsi+0x68]
 10130b5:	call   0x1010b60
 10130ba:	mov    DWORD PTR [rsi+0xe0],eax
 10130c0:	lea    rcx,[rsi+0x1120]
 10130c7:	call   0x1012480
 10130cc:	mov    DWORD PTR [rsi+0x1350],eax
 10130d2:	jmp    0x10130f1
 10130d4:	mov    edi,eax
 10130d6:	cmp    eax,0xc00000fd
 10130db:	jne    0x10130e3
 10130dd:	call   QWORD PTR [rip+0xfffffffffffee2e5]        # 0x10013c8
 10130e3:	mov    eax,0x80004005
 10130e8:	test   edi,edi
 10130ea:	cmovns edi,eax
 10130ed:	mov    ebx,DWORD PTR [rsp+0x20]
 10130f1:	test   ebx,ebx
 10130f3:	cmovns ebx,edi
 10130f6:	mov    eax,ebx
 10130f8:	mov    rbx,QWORD PTR [rsp+0x40]
 10130fd:	mov    rsi,QWORD PTR [rsp+0x48]
 1013102:	add    rsp,0x30
 1013106:	pop    rdi
 1013107:	ret    
 1013108:	int3   
 1013109:	int3   
 101310a:	int3   
 101310b:	int3   
 101310c:	int3   
 101310d:	int3   
 101310e:	int3   
 101310f:	int3   
 1013110:	mov    QWORD PTR [rsp+0x8],rcx
 1013115:	push   rbx
 1013116:	push   rsi
 1013117:	push   rdi
 1013118:	push   r12
 101311a:	push   r13
 101311c:	push   r14
 101311e:	push   r15
 1013120:	sub    rsp,0x60
 1013124:	mov    rsi,rcx
 1013127:	xor    r12d,r12d
 101312a:	mov    ebx,r12d
 101312d:	mov    DWORD PTR [rsp+0x50],ebx
 1013131:	call   QWORD PTR [rip+0xfffffffffffee009]        # 0x1001140
 1013137:	mov    rcx,rax
 101313a:	call   QWORD PTR [rip+0xfffffffffffedfb0]        # 0x10010f0
 1013140:	mov    r15d,eax
 1013143:	mov    DWORD PTR [rsp+0xa8],eax
 101314a:	cmp    eax,0x7fffffff
 101314f:	je     0x1013165
 1013151:	call   QWORD PTR [rip+0xfffffffffffedfe9]        # 0x1001140
 1013157:	mov    rcx,rax
 101315a:	lea    edx,[r12+0x1]
 101315f:	call   QWORD PTR [rip+0xfffffffffffedf53]        # 0x10010b8
 1013165:	mov    r13d,r12d
 1013168:	mov    edi,DWORD PTR [rsi+0xa4]
 101316e:	call   QWORD PTR [rip+0xfffffffffffee0dc]        # 0x1001250
 1013174:	cmp    edi,eax
 1013176:	jne    0x1013184
 1013178:	mov    rax,QWORD PTR [rsi+0x30]
 101317c:	cmp    DWORD PTR [rax],0xc00000fd
 1013182:	je     0x10131a8
 1013184:	mov    eax,DWORD PTR [rsi+0xa8]
 101318a:	bt     eax,0xc
 101318e:	jb     0x10131a8
 1013190:	bt     eax,0xf
 1013194:	jb     0x10131a8
 1013196:	mov    rdx,rsi
 1013199:	mov    rcx,QWORD PTR [rsi+0x10]
 101319d:	call   0x10117d0
 10131a2:	mov    ebx,eax
 10131a4:	mov    DWORD PTR [rsp+0x50],eax
 10131a8:	mov    rax,QWORD PTR [rsi]
 10131ab:	mov    r8d,0x1658
 10131b1:	mov    rdx,rsi
 10131b4:	mov    rcx,rsi
 10131b7:	call   QWORD PTR [rax+0x50]
 10131ba:	test   ebx,ebx
 10131bc:	cmovns ebx,eax
 10131bf:	mov    DWORD PTR [rsp+0x50],ebx
 10131c3:	mov    rdx,QWORD PTR [rsi+0x50]
 10131c7:	test   rdx,rdx
 10131ca:	je     0x10131f3
 10131cc:	mov    r9,QWORD PTR [rsi]
 10131cf:	xor    eax,eax
 10131d1:	or     rcx,0xffffffffffffffff
 10131d5:	mov    rdi,rdx
 10131d8:	repnz scas ax,WORD PTR es:[rdi]
 10131db:	not    rcx
 10131de:	lea    r8,[rcx+rcx*1-0x2]
 10131e3:	mov    rcx,rsi
 10131e6:	call   QWORD PTR [r9+0x50]
 10131ea:	test   ebx,ebx
 10131ec:	cmovns ebx,eax
 10131ef:	mov    DWORD PTR [rsp+0x50],ebx
 10131f3:	mov    rdx,QWORD PTR [rsi+0x48]
 10131f7:	test   rdx,rdx
 10131fa:	je     0x1013223
 10131fc:	mov    r9,QWORD PTR [rsi]
 10131ff:	xor    eax,eax
 1013201:	or     rcx,0xffffffffffffffff
 1013205:	mov    rdi,rdx
 1013208:	repnz scas ax,WORD PTR es:[rdi]
 101320b:	not    rcx
 101320e:	lea    r8,[rcx+rcx*1-0x2]
 1013213:	mov    rcx,rsi
 1013216:	call   QWORD PTR [r9+0x50]
 101321a:	test   ebx,ebx
 101321c:	cmovns ebx,eax
 101321f:	mov    DWORD PTR [rsp+0x50],ebx
 1013223:	call   QWORD PTR [rip+0xfffffffffffedf97]        # 0x10011c0
 1013229:	mov    DWORD PTR [rsi+0x78],eax
 101322c:	mov    rcx,rsi
 101322f:	call   0x1012fd0
 1013234:	test   ebx,ebx
 1013236:	cmovns ebx,eax
 1013239:	mov    DWORD PTR [rsp+0x50],ebx
 101323d:	lea    rdi,[rsi+0x18]
 1013241:	call   0x10078b0
 1013246:	mov    r9,rax
 1013249:	mov    QWORD PTR [rsp+0x30],rdi
 101324e:	mov    eax,DWORD PTR [rsi+0x78]
 1013251:	mov    DWORD PTR [rsp+0x28],eax
 1013255:	lea    rax,[rip+0xffffffffffff0b3c]        # 0x1003d98
 101325c:	mov    QWORD PTR [rsp+0x20],rax
 1013261:	lea    r8,[rip+0xffffffffffff13d0]        # 0x1004638
 1013268:	mov    edx,0x104
 101326d:	lea    rcx,[rsi+0x13d0]
 1013274:	call   0x100a460
 1013279:	test   eax,eax
 101327b:	js     0x101342a
 1013281:	lea    rdi,[rsi+0x15d8]
 1013288:	mov    rcx,rdi
 101328b:	call   QWORD PTR [rip+0xfffffffffffede2f]        # 0x10010c0
 1013291:	mov    QWORD PTR [rsi+0x15e0],r12
 1013298:	mov    QWORD PTR [rsi+0x15f0],r12
 101329f:	lea    r14,[rsi+0x1640]
 10132a6:	mov    rcx,QWORD PTR [rsi+0x10]
 10132aa:	call   0x1011380
 10132af:	mov    rcx,rax
 10132b2:	mov    QWORD PTR [rsp+0x48],r14
 10132b7:	mov    QWORD PTR [rsp+0x40],rdi
 10132bc:	mov    QWORD PTR [rsp+0x38],r12
 10132c1:	mov    QWORD PTR [rsp+0x30],r12
 10132c6:	mov    DWORD PTR [rsp+0x28],0xc008010
 10132ce:	mov    DWORD PTR [rsp+0x20],r12d
 10132d3:	xor    r9d,r9d
 10132d6:	xor    r8d,r8d
 10132d9:	lea    rdx,[rsi+0x13d0]
 10132e0:	call   QWORD PTR [rip+0xfffffffffffedde2]        # 0x10010c8
 10132e6:	test   eax,eax
 10132e8:	je     0x101340d
 10132ee:	mov    edi,r12d
 10132f1:	mov    DWORD PTR [rsp+0x54],r12d
 10132f6:	call   QWORD PTR [rip+0xfffffffffffedecc]        # 0x10011c8
 10132fc:	mov    DWORD PTR [rsp+0xb0],eax
 1013303:	nop
 1013304:	data16 data16 xchg ax,ax
 1013308:	data16 data16 xchg ax,ax
 101330c:	data16 data16 xchg ax,ax
 1013310:	mov    edx,0x64
 1013315:	mov    rcx,QWORD PTR [r14]
 1013318:	call   QWORD PTR [rip+0xfffffffffffedf3a]        # 0x1001258
 101331e:	mov    r14d,eax
 1013321:	cmp    eax,0x102
 1013326:	jne    0x101334f
 1013328:	cmp    DWORD PTR [rsi+0x13b0],0xffffffff
 101332f:	je     0x1013346
 1013331:	call   QWORD PTR [rip+0xfffffffffffede91]        # 0x10011c8
 1013337:	sub    eax,DWORD PTR [rsp+0xb0]
 101333e:	cmp    eax,DWORD PTR [rsi+0x13b0]
 1013344:	jae    0x101334f
 1013346:	lea    r14,[rsi+0x1640]
 101334d:	jmp    0x1013310
 101334f:	mov    eax,r12d
 1013352:	cmp    r14d,0x102
 1013359:	sete   al
 101335c:	mov    DWORD PTR [rsi+0x13bc],eax
 1013362:	mov    DWORD PTR [rsi+0x13c0],0x1
 101336c:	lea    rdx,[rsi+0x13b4]
 1013373:	mov    rcx,QWORD PTR [rsi+0x1640]
 101337a:	call   QWORD PTR [rip+0xfffffffffffedd50]        # 0x10010d0
 1013380:	test   eax,eax
 1013382:	je     0x10133a1
 1013384:	cmp    DWORD PTR [rsi+0x13b4],0x103
 101338e:	je     0x10133a1
 1013390:	mov    DWORD PTR [rsi+0x13b8],0x1
 101339a:	mov    DWORD PTR [rsi+0x13bc],r12d
 10133a1:	jmp    0x10133da
 10133a3:	mov    edi,eax
 10133a5:	cmp    eax,0xc00000fd
 10133aa:	jne    0x10133b2
 10133ac:	call   QWORD PTR [rip+0xfffffffffffee016]        # 0x10013c8
 10133b2:	mov    eax,0x80004005
 10133b7:	test   edi,edi
 10133b9:	cmovns edi,eax
 10133bc:	mov    DWORD PTR [rsp+0x54],edi
 10133c0:	xor    r12d,r12d
 10133c3:	mov    rsi,QWORD PTR [rsp+0xa0]
 10133cb:	mov    ebx,DWORD PTR [rsp+0x50]
 10133cf:	mov    r15d,DWORD PTR [rsp+0xa8]
 10133d7:	mov    r13d,r12d
 10133da:	test   ebx,ebx
 10133dc:	cmovns ebx,edi
 10133df:	mov    DWORD PTR [rsp+0x50],ebx
 10133e3:	mov    rcx,QWORD PTR [rsi+0x1648]
 10133ea:	call   QWORD PTR [rip+0xfffffffffffede50]        # 0x1001240
 10133f0:	mov    QWORD PTR [rsi+0x1648],r12
 10133f7:	mov    rcx,QWORD PTR [rsi+0x1640]
 10133fe:	call   QWORD PTR [rip+0xfffffffffffede3c]        # 0x1001240
 1013404:	mov    QWORD PTR [rsi+0x1640],r12
 101340b:	jmp    0x1013433
 101340d:	call   QWORD PTR [rip+0xfffffffffffede65]        # 0x1001278
 1013413:	test   eax,eax
 1013415:	jle    0x101341f
 1013417:	movzx  eax,ax
 101341a:	or     eax,0x80070000
 101341f:	test   ebx,ebx
 1013421:	cmovns ebx,eax
 1013424:	mov    DWORD PTR [rsp+0x50],ebx
 1013428:	jmp    0x1013433
 101342a:	test   ebx,ebx
 101342c:	cmovns ebx,eax
 101342f:	mov    DWORD PTR [rsp+0x50],ebx
 1013433:	jmp    0x101345d
 1013435:	mov    r13d,eax
 1013438:	cmp    eax,0xc00000fd
 101343d:	jne    0x1013445
 101343f:	call   QWORD PTR [rip+0xfffffffffffedf83]        # 0x10013c8
 1013445:	mov    eax,0x80004005
 101344a:	test   r13d,r13d
 101344d:	cmovns r13d,eax
 1013451:	mov    ebx,DWORD PTR [rsp+0x50]
 1013455:	mov    r15d,DWORD PTR [rsp+0xa8]
 101345d:	cmp    r15d,0x7fffffff
 1013464:	je     0x1013478
 1013466:	call   QWORD PTR [rip+0xfffffffffffedcd4]        # 0x1001140
 101346c:	mov    rcx,rax
 101346f:	mov    edx,r15d
 1013472:	call   QWORD PTR [rip+0xfffffffffffedc40]        # 0x10010b8
 1013478:	test   ebx,ebx
 101347a:	cmovns ebx,r13d
 101347e:	mov    eax,ebx
 1013480:	add    rsp,0x60
 1013484:	pop    r15
 1013486:	pop    r14
 1013488:	pop    r13
 101348a:	pop    r12
 101348c:	pop    rdi
 101348d:	pop    rsi
 101348e:	pop    rbx
 101348f:	ret    
 1013490:	int3   
 1013491:	int3   
 1013492:	int3   
 1013493:	int3   
 1013494:	int3   
 1013495:	int3   
 1013496:	int3   
 1013497:	int3   
 1013498:	int3   
 1013499:	int3   
 101349a:	int3   
 101349b:	int3   
 101349c:	int3   
 101349d:	int3   
 101349e:	int3   
 101349f:	int3   
 10134a0:	mov    QWORD PTR [rsp+0x8],rbx
 10134a5:	mov    QWORD PTR [rsp+0x10],rsi
 10134aa:	mov    QWORD PTR [rsp+0x18],rdi
 10134af:	push   r12
 10134b1:	sub    rsp,0x30
 10134b5:	mov    rsi,r8
 10134b8:	mov    r12,rdx
 10134bb:	mov    rdi,rcx
 10134be:	xor    ebx,ebx
 10134c0:	mov    DWORD PTR [rsp+0x20],ebx
 10134c4:	lea    r8,[rip+0xffffffffffff1851]        # 0x1004d1c
 10134cb:	mov    rdx,rsi
 10134ce:	mov    rcx,r12
 10134d1:	call   0x1006a30
 10134d6:	mov    DWORD PTR [rsp+0x20],eax
 10134da:	test   eax,eax
 10134dc:	js     0x1013574
 10134e2:	cmp    DWORD PTR [rdi+0x1650],0x0
 10134e9:	jne    0x1013505
 10134eb:	lea    r8,[rip+0xffffffffffff11ce]        # 0x10046c0
 10134f2:	mov    rdx,rsi
 10134f5:	mov    rcx,r12
 10134f8:	call   0x100c610
 10134fd:	mov    DWORD PTR [rsp+0x20],eax
 1013501:	test   eax,eax
 1013503:	js     0x1013574
 1013505:	cmp    DWORD PTR [rdi+0x13c0],0x0
 101350c:	je     0x1013550
 101350e:	cmp    DWORD PTR [rdi+0x13bc],0x0
 1013515:	je     0x101353a
 1013517:	mov    r9d,DWORD PTR [rdi+0x1650]
 101351e:	lea    r8,[rip+0xffffffffffff113b]        # 0x1004660
 1013525:	mov    rdx,rsi
 1013528:	mov    rcx,r12
 101352b:	call   0x1010fa0
 1013530:	mov    DWORD PTR [rsp+0x20],eax
 1013534:	test   eax,eax
 1013536:	jns    0x1013550
 1013538:	jmp    0x1013574
 101353a:	mov    r8,rsi
 101353d:	mov    rdx,r12
 1013540:	mov    rcx,rdi
 1013543:	call   0x1012920
 1013548:	mov    DWORD PTR [rsp+0x20],eax
 101354c:	test   eax,eax
 101354e:	js     0x1013574
 1013550:	jmp    0x101356f
 1013552:	mov    ebx,eax
 1013554:	cmp    eax,0xc00000fd
 1013559:	jne    0x1013561
 101355b:	call   QWORD PTR [rip+0xfffffffffffede67]        # 0x10013c8
 1013561:	mov    eax,0x80004005
 1013566:	test   ebx,ebx
 1013568:	cmovns ebx,eax
 101356b:	mov    eax,DWORD PTR [rsp+0x20]
 101356f:	test   eax,eax
 1013571:	cmovns eax,ebx
 1013574:	mov    rbx,QWORD PTR [rsp+0x40]
 1013579:	mov    rsi,QWORD PTR [rsp+0x48]
 101357e:	mov    rdi,QWORD PTR [rsp+0x50]
 1013583:	add    rsp,0x30
 1013587:	pop    r12
 1013589:	ret    
 101358a:	int3   
 101358b:	int3   
 101358c:	int3   
 101358d:	int3   
 101358e:	int3   
 101358f:	int3   
 1013590:	mov    QWORD PTR [rsp+0x8],rbx
 1013595:	mov    QWORD PTR [rsp+0x10],rsi
 101359a:	push   rdi
 101359b:	sub    rsp,0x20
 101359f:	cmp    QWORD PTR [rcx+0x1340],0x0
 10135a7:	lea    rax,[rip+0xffffffffffff0f92]        # 0x1004540
 10135ae:	mov    edi,r8d
 10135b1:	mov    rsi,rdx
 10135b4:	mov    rbx,rcx
 10135b7:	mov    QWORD PTR [rcx],rax
 10135ba:	je     0x10135d9
 10135bc:	mov    rcx,QWORD PTR [rcx+0x10]
 10135c0:	call   0x1011200
 10135c5:	mov    rdx,QWORD PTR [rbx+0x1340]
 10135cc:	test   rdx,rdx
 10135cf:	je     0x10135d9
 10135d1:	mov    rcx,rax
 10135d4:	call   0x10109e0
 10135d9:	mov    rcx,QWORD PTR [rbx+0x10]
 10135dd:	test   rcx,rcx
 10135e0:	je     0x10135f0
 10135e2:	mov    rax,QWORD PTR [rcx]
 10135e5:	call   QWORD PTR [rax+0x10]
 10135e8:	mov    QWORD PTR [rbx+0x10],0x0
 10135f0:	lea    rcx,[rbx+0x1388]
 10135f7:	call   0x10125a0
 10135fc:	lea    rcx,[rbx+0x1360]
 1013603:	call   0x10125a0
 1013608:	xor    edx,edx
 101360a:	mov    r8d,0x1658
 1013610:	mov    rcx,rbx
 1013613:	call   0x10107ba
 1013618:	mov    r8d,edi
 101361b:	mov    rdx,rsi
 101361e:	mov    rcx,rbx
 1013621:	mov    rbx,QWORD PTR [rsp+0x30]
 1013626:	mov    rsi,QWORD PTR [rsp+0x38]
 101362b:	add    rsp,0x20
 101362f:	pop    rdi
 1013630:	jmp    0x1012c10
 1013635:	int3   
 1013636:	int3   
 1013637:	int3   
 1013638:	int3   
 1013639:	int3   
 101363a:	int3   
 101363b:	int3   
 101363c:	int3   
 101363d:	int3   
 101363e:	int3   
 101363f:	int3   
 1013640:	mov    QWORD PTR [rsp+0x8],rbx
 1013645:	mov    QWORD PTR [rsp+0x10],rbp
 101364a:	mov    QWORD PTR [rsp+0x18],rsi
 101364f:	push   rdi
 1013650:	sub    rsp,0xc0
 1013657:	mov    rdi,rdx
 101365a:	mov    rdx,QWORD PTR [rdx]
 101365d:	mov    rsi,rcx
 1013660:	mov    rbp,r8
 1013663:	lea    rcx,[rsp+0x20]
 1013668:	mov    r8d,0x98
 101366e:	call   0x10107c6
 1013673:	mov    r11,QWORD PTR [rsi+0x13c8]
 101367a:	mov    rbx,QWORD PTR [rsi]
 101367d:	mov    QWORD PTR [rsp+0x30],r11
 1013682:	call   QWORD PTR [rip+0xfffffffffffedbc8]        # 0x1001250
 1013688:	mov    r9,QWORD PTR [rdi+0x8]
 101368c:	lea    r8,[rsp+0x20]
 1013691:	mov    edx,eax
 1013693:	mov    rcx,rsi
 1013696:	call   QWORD PTR [rbx+0x40]
 1013699:	mov    rcx,rsi
 101369c:	mov    DWORD PTR [rbp+0x0],eax
 101369f:	call   0x1013110
 10136a4:	lea    r11,[rsp+0xc0]
 10136ac:	mov    rbx,QWORD PTR [r11+0x10]
 10136b0:	mov    rsi,QWORD PTR [r11+0x20]
 10136b4:	mov    DWORD PTR [rbp+0x0],eax
 10136b7:	mov    rbp,QWORD PTR [r11+0x18]
 10136bb:	mov    eax,0x1
 10136c0:	mov    rsp,r11
 10136c3:	pop    rdi
 10136c4:	ret    
 10136c5:	int3   
 10136c6:	int3   
 10136c7:	int3   
 10136c8:	int3   
 10136c9:	int3   
 10136ca:	int3   
 10136cb:	int3   
 10136cc:	int3   
 10136cd:	int3   
 10136ce:	int3   
 10136cf:	int3   
 10136d0:	mov    QWORD PTR [rsp+0x8],rcx
 10136d5:	push   rbx
 10136d6:	sub    rsp,0x30
 10136da:	mov    ebx,0x80004005
 10136df:	mov    DWORD PTR [rsp+0x20],ebx
 10136e3:	mov    rax,QWORD PTR [rsp+0x38]
 10136e8:	cmp    QWORD PTR [rcx+0x30],0x0
 10136ed:	je     0x10136f8
 10136ef:	call   0x1013110
 10136f4:	mov    ebx,eax
 10136f6:	jmp    0x1013722
 10136f8:	cmp    QWORD PTR [rcx+0x13c8],0x0
 1013700:	jne    0x1013709
 1013702:	mov    QWORD PTR [rcx+0x13c8],rax
 1013709:	xor    r9d,r9d
 101370c:	xor    r8d,r8d
 101370f:	xor    edx,edx
 1013711:	mov    ecx,0x42ac
 1013716:	call   QWORD PTR [rip+0xfffffffffffedb04]        # 0x1001220
 101371c:	jmp    0x1013722
 101371e:	mov    ebx,DWORD PTR [rsp+0x20]
 1013722:	mov    eax,ebx
 1013724:	add    rsp,0x30
 1013728:	pop    rbx
 1013729:	ret    
 101372a:	int3   
 101372b:	int3   
 101372c:	int3   
 101372d:	int3   
 101372e:	int3   
 101372f:	int3   
 1013730:	rex push rbp
 1013732:	sub    rsp,0x20
 1013736:	mov    rbp,rdx
 1013739:	mov    rdx,rcx
 101373c:	lea    r8,[rbp+0x20]
 1013740:	mov    rcx,QWORD PTR [rbp+0x40]
 1013744:	call   0x1013640
 1013749:	add    rsp,0x20
 101374d:	pop    rbp
 101374e:	ret    
 101374f:	int3   
 1013750:	int3   
 1013751:	int3   
 1013752:	int3   
 1013753:	int3   
 1013754:	int3   
 1013755:	int3   
 1013756:	rex push rbp
 1013758:	sub    rsp,0x20
 101375c:	mov    rbp,rdx
 101375f:	mov    rax,QWORD PTR [rcx]
 1013762:	mov    rdx,rcx
 1013765:	mov    ecx,DWORD PTR [rax]
 1013767:	call   0x100a126
 101376c:	nop
 101376d:	add    rsp,0x20
 1013771:	pop    rbp
 1013772:	ret    
 1013773:	int3   
 1013774:	int3   
 1013775:	int3   
 1013776:	int3   
 1013777:	int3   
 1013778:	int3   
 1013779:	int3   
 101377a:	rex push rbp
 101377c:	sub    rsp,0x20
 1013780:	mov    rbp,rdx
 1013783:	mov    ecx,0x8
 1013788:	call   0x100a3d0
 101378d:	nop
 101378e:	add    rsp,0x20
 1013792:	pop    rbp
 1013793:	ret    
 1013794:	int3   
 1013795:	int3   
 1013796:	int3   
 1013797:	int3   
 1013798:	int3   
 1013799:	int3   
 101379a:	int3   
 101379b:	int3   
 101379c:	int3   
 101379d:	int3   
 101379e:	int3   
 101379f:	int3   
 10137a0:	rex push rbp
 10137a2:	sub    rsp,0x20
 10137a6:	mov    rbp,rdx
 10137a9:	mov    rax,QWORD PTR [rcx]
 10137ac:	xor    ecx,ecx
 10137ae:	cmp    DWORD PTR [rax],0xc0000005
 10137b4:	sete   cl
 10137b7:	mov    eax,ecx
 10137b9:	mov    eax,ecx
 10137bb:	add    rsp,0x20
 10137bf:	pop    rbp
 10137c0:	ret    
 10137c1:	int3   
 10137c2:	int3   
 10137c3:	int3   
 10137c4:	int3   
 10137c5:	int3   
 10137c6:	int3   
 10137c7:	int3   
 10137c8:	rex push rbp
 10137ca:	sub    rsp,0x20
 10137ce:	mov    rbp,rdx
 10137d1:	mov    QWORD PTR [rbp+0x38],rcx
 10137d5:	mov    QWORD PTR [rbp+0x28],rcx
 10137d9:	mov    rax,QWORD PTR [rbp+0x28]
 10137dd:	mov    rcx,QWORD PTR [rax]
 10137e0:	mov    QWORD PTR [rbp+0x30],rcx
 10137e4:	mov    rax,QWORD PTR [rbp+0x30]
 10137e8:	cmp    DWORD PTR [rax],0xe06d7363
 10137ee:	je     0x10137fc
 10137f0:	mov    DWORD PTR [rbp+0x20],0x0
 10137f7:	mov    eax,DWORD PTR [rbp+0x20]
 10137fa:	jmp    0x1013802
 10137fc:	call   0x100a3c4
 1013801:	nop
 1013802:	add    rsp,0x20
 1013806:	pop    rbp
 1013807:	ret    
 1013808:	int3   
 1013809:	int3   
 101380a:	int3   
 101380b:	int3   
 101380c:	int3   
 101380d:	int3   
 101380e:	int3   
 101380f:	rex push rbp
 1013811:	sub    rsp,0x20
 1013815:	mov    rbp,rdx
 1013818:	cmp    DWORD PTR [rbp+0x20],0x0
 101381c:	jne    0x1013834
 101381e:	mov    r9,QWORD PTR [rbp+0x78]
 1013822:	mov    r8d,DWORD PTR [rbp+0x70]
 1013826:	mov    rdx,QWORD PTR [rbp+0x68]
 101382a:	mov    rcx,QWORD PTR [rbp+0x60]
 101382e:	call   0x100a310
 1013833:	nop
 1013834:	add    rsp,0x20
 1013838:	pop    rbp
 1013839:	ret    
 101383a:	int3   
 101383b:	int3   
 101383c:	int3   
 101383d:	int3   
 101383e:	int3   
 101383f:	int3   
 1013840:	int3   
 1013841:	int3   
 1013842:	int3   
 1013843:	int3   
 1013844:	int3   
 1013845:	int3   
 1013846:	int3   
 1013847:	int3   
 1013848:	int3   
 1013849:	int3   
 101384a:	int3   
 101384b:	int3   
 101384c:	int3   
 101384d:	int3   
 101384e:	int3   
 101384f:	int3   
 1013850:	mov    QWORD PTR [rsp+0x10],rdx
 1013855:	push   rbp
 1013856:	sub    rsp,0x20
 101385a:	mov    rbp,rdx
 101385d:	mov    rax,QWORD PTR [rbp+0x40]
 1013861:	mov    DWORD PTR [rax+0x30],0x0
 1013868:	lea    rax,[rip+0xffffffffffff6cb8]        # 0x100a527
 101386f:	add    rsp,0x20
 1013873:	pop    rbp
 1013874:	ret    
 1013875:	int3   
 1013876:	int3   
 1013877:	int3   
 1013878:	int3   
 1013879:	int3   
 101387a:	int3   
 101387b:	int3   
 101387c:	int3   
 101387d:	int3   
 101387e:	int3   
 101387f:	int3   
 1013880:	mov    QWORD PTR [rsp+0x10],rdx
 1013885:	push   rbp
 1013886:	sub    rsp,0x20
 101388a:	mov    rbp,rdx
 101388d:	mov    DWORD PTR [rbp+0x24],0x8007000e
 1013894:	lea    rdx,[rip+0x64ad]        # 0x1019d48
 101389b:	lea    rcx,[rbp+0x24]
 101389f:	call   0x101067c
 10138a4:	nop
 10138a5:	int3   
 10138a6:	int3   
 10138a7:	int3   
 10138a8:	int3   
 10138a9:	int3   
 10138aa:	int3   
 10138ab:	int3   
 10138ac:	int3   
 10138ad:	int3   
 10138ae:	int3   
 10138af:	int3   
 10138b0:	mov    QWORD PTR [rsp+0x10],rdx
 10138b5:	push   rbp
 10138b6:	sub    rsp,0x20
 10138ba:	mov    rbp,rdx
 10138bd:	lea    rax,[rip+0xffffffffffff6cea]        # 0x100a5ae
 10138c4:	add    rsp,0x20
 10138c8:	pop    rbp
 10138c9:	ret    
 10138ca:	int3   
 10138cb:	int3   
 10138cc:	int3   
 10138cd:	int3   
 10138ce:	int3   
 10138cf:	int3   
 10138d0:	int3   
 10138d1:	int3   
 10138d2:	int3   
 10138d3:	int3   
 10138d4:	int3   
 10138d5:	int3   
 10138d6:	int3   
 10138d7:	int3   
 10138d8:	int3   
 10138d9:	int3   
 10138da:	int3   
 10138db:	int3   
 10138dc:	int3   
 10138dd:	int3   
 10138de:	int3   
 10138df:	int3   
 10138e0:	mov    rcx,QWORD PTR [rdx+0x70]
 10138e7:	jmp    0x1009d34
 10138ec:	int3   
 10138ed:	int3   
 10138ee:	int3   
 10138ef:	int3   
 10138f0:	mov    QWORD PTR [rsp+0x10],rdx
 10138f5:	push   rbx
 10138f6:	push   rbp
 10138f7:	sub    rsp,0x58
 10138fb:	mov    rbp,rdx
 10138fe:	mov    rbx,QWORD PTR [rbp+0x60]
 1013902:	mov    rcx,QWORD PTR [rbx+0x70]
 1013906:	test   rcx,rcx
 1013909:	je     0x1013915
 101390b:	mov    rax,QWORD PTR [rcx]
 101390e:	mov    edx,0x1
 1013913:	call   QWORD PTR [rax]
 1013915:	mov    QWORD PTR [rbx+0x70],0x0
 101391d:	mov    DWORD PTR [rbx+0x48],0x0
 1013924:	mov    DWORD PTR [rbx],0x0
 101392a:	lea    rax,[rip+0xffffffffffff759f]        # 0x100aed0
 1013931:	add    rsp,0x58
 1013935:	pop    rbp
 1013936:	pop    rbx
 1013937:	ret    
 1013938:	int3   
 1013939:	int3   
 101393a:	int3   
 101393b:	int3   
 101393c:	int3   
 101393d:	int3   
 101393e:	int3   
 101393f:	int3   
 1013940:	mov    rcx,QWORD PTR [rdx+0x188]
 1013947:	jmp    0x1006070
 101394c:	int3   
 101394d:	int3   
 101394e:	int3   
 101394f:	int3   
 1013950:	lea    rcx,[rdx+0x38]
 1013957:	jmp    0x1006060
 101395c:	int3   
 101395d:	int3   
 101395e:	int3   
 101395f:	int3   
 1013960:	lea    rcx,[rdx+0xc0]
 1013967:	jmp    0x1006070
 101396c:	int3   
 101396d:	int3   
 101396e:	int3   
 101396f:	int3   
 1013970:	mov    rcx,QWORD PTR [rdx+0x30]
 1013977:	jmp    0x1006070
 101397c:	int3   
 101397d:	int3   
 101397e:	int3   
 101397f:	int3   
 1013980:	mov    rcx,QWORD PTR [rdx+0x30]
 1013987:	jmp    0x1006070
 101398c:	int3   
 101398d:	int3   
 101398e:	int3   
 101398f:	int3   
 1013990:	int3   
 1013991:	int3   
 1013992:	int3   
 1013993:	int3   
 1013994:	int3   
 1013995:	int3   
 1013996:	int3   
 1013997:	int3   
 1013998:	int3   
 1013999:	int3   
 101399a:	int3   
 101399b:	int3   
 101399c:	int3   
 101399d:	int3   
 101399e:	int3   
 101399f:	int3   
 10139a0:	lea    rcx,[rdx+0x50]
 10139a7:	jmp    0x100a420
 10139ac:	int3   
 10139ad:	int3   
 10139ae:	int3   
 10139af:	int3   
 10139b0:	lea    rcx,[rdx+0x38]
 10139b7:	jmp    0x100a420
 10139bc:	int3   
 10139bd:	int3   
 10139be:	int3   
 10139bf:	int3   
 10139c0:	int3   
 10139c1:	int3   
 10139c2:	int3   
 10139c3:	int3   
 10139c4:	int3   
 10139c5:	int3   
 10139c6:	int3   
 10139c7:	int3   
 10139c8:	int3   
 10139c9:	int3   
 10139ca:	int3   
 10139cb:	int3   
 10139cc:	int3   
 10139cd:	int3   
 10139ce:	int3   
 10139cf:	int3   
 10139d0:	mov    rcx,QWORD PTR [rdx+0x168]
 10139d7:	jmp    0x1006070
 10139dc:	int3   
 10139dd:	int3   
 10139de:	int3   
 10139df:	int3   
 10139e0:	mov    rcx,QWORD PTR [rdx+0x30]
 10139e7:	jmp    0x1006070
 10139ec:	int3   
 10139ed:	int3   
 10139ee:	int3   
 10139ef:	int3   
 10139f0:	lea    rcx,[rdx+0x38]
 10139f7:	jmp    0x1006070
 10139fc:	int3   
 10139fd:	int3   
 10139fe:	int3   
 10139ff:	int3   
 1013a00:	mov    rcx,QWORD PTR [rdx+0x30]
 1013a07:	jmp    0x1006070
 1013a0c:	int3   
 1013a0d:	int3   
 1013a0e:	int3   
 1013a0f:	int3   
 1013a10:	mov    rcx,QWORD PTR [rdx+0x30]
 1013a17:	jmp    0x1006070
 1013a1c:	int3   
 1013a1d:	int3   
 1013a1e:	int3   
 1013a1f:	int3   
 1013a20:	int3   
 1013a21:	int3   
 1013a22:	int3   
 1013a23:	int3   
 1013a24:	int3   
 1013a25:	int3   
 1013a26:	int3   
 1013a27:	int3   
 1013a28:	int3   
 1013a29:	int3   
 1013a2a:	int3   
 1013a2b:	int3   
 1013a2c:	int3   
 1013a2d:	int3   
 1013a2e:	int3   
 1013a2f:	int3   
 1013a30:	mov    rcx,QWORD PTR [rdx+0x188]
 1013a37:	jmp    0x1006070
 1013a3c:	int3   
 1013a3d:	int3   
 1013a3e:	int3   
 1013a3f:	int3   
 1013a40:	lea    rcx,[rdx+0x38]
 1013a47:	jmp    0x1006060
 1013a4c:	int3   
 1013a4d:	int3   
 1013a4e:	int3   
 1013a4f:	int3   
 1013a50:	mov    rcx,QWORD PTR [rdx+0x30]
 1013a57:	jmp    0x1006070
 1013a5c:	int3   
 1013a5d:	int3   
 1013a5e:	int3   
 1013a5f:	int3   
 1013a60:	lea    rcx,[rdx+0xc0]
 1013a67:	jmp    0x1006070
 1013a6c:	int3   
 1013a6d:	int3   
 1013a6e:	int3   
 1013a6f:	int3   
 1013a70:	mov    rcx,QWORD PTR [rdx+0x30]
 1013a77:	jmp    0x1006070
 1013a7c:	int3   
 1013a7d:	int3   
 1013a7e:	int3   
 1013a7f:	int3   
 1013a80:	mov    rcx,QWORD PTR [rdx+0x30]
 1013a87:	jmp    0x1006070
 1013a8c:	int3   
 1013a8d:	int3   
 1013a8e:	int3   
 1013a8f:	int3   
 1013a90:	int3   
 1013a91:	int3   
 1013a92:	int3   
 1013a93:	int3   
 1013a94:	int3   
 1013a95:	int3   
 1013a96:	int3   
 1013a97:	int3   
 1013a98:	int3   
 1013a99:	int3   
 1013a9a:	int3   
 1013a9b:	int3   
 1013a9c:	int3   
 1013a9d:	int3   
 1013a9e:	int3   
 1013a9f:	int3   
 1013aa0:	mov    rcx,QWORD PTR [rdx+0x188]
 1013aa7:	jmp    0x1006070
 1013aac:	int3   
 1013aad:	int3   
 1013aae:	int3   
 1013aaf:	int3   
 1013ab0:	lea    rcx,[rdx+0x38]
 1013ab7:	jmp    0x1006060
 1013abc:	int3   
 1013abd:	int3   
 1013abe:	int3   
 1013abf:	int3   
 1013ac0:	mov    rcx,QWORD PTR [rdx+0x30]
 1013ac7:	jmp    0x1006070
 1013acc:	int3   
 1013acd:	int3   
 1013ace:	int3   
 1013acf:	int3   
 1013ad0:	lea    rcx,[rdx+0xc0]
 1013ad7:	jmp    0x1006070
 1013adc:	int3   
 1013add:	int3   
 1013ade:	int3   
 1013adf:	int3   
 1013ae0:	mov    rcx,QWORD PTR [rdx+0x30]
 1013ae7:	jmp    0x1006070
 1013aec:	int3   
 1013aed:	int3   
 1013aee:	int3   
 1013aef:	int3   
 1013af0:	mov    rcx,QWORD PTR [rdx+0x30]
 1013af7:	jmp    0x1006070
 1013afc:	int3   
 1013afd:	int3   
 1013afe:	int3   
 1013aff:	int3   
 1013b00:	int3   
 1013b01:	int3   
 1013b02:	int3   
 1013b03:	int3   
 1013b04:	int3   
 1013b05:	int3   
 1013b06:	int3   
 1013b07:	int3   
 1013b08:	int3   
 1013b09:	int3   
 1013b0a:	int3   
 1013b0b:	int3   
 1013b0c:	int3   
 1013b0d:	int3   
 1013b0e:	int3   
 1013b0f:	int3   
 1013b10:	rex push rbp
 1013b12:	sub    rsp,0x20
 1013b16:	mov    rbp,rdx
 1013b19:	mov    rcx,QWORD PTR [rbp+0x38]
 1013b1d:	mov    rax,QWORD PTR [rcx]
 1013b20:	call   QWORD PTR [rax+0x10]
 1013b23:	nop
 1013b24:	add    rsp,0x20
 1013b28:	pop    rbp
 1013b29:	ret    
 1013b2a:	int3   
 1013b2b:	int3   
 1013b2c:	int3   
 1013b2d:	int3   
 1013b2e:	int3   
 1013b2f:	int3   
 1013b30:	int3   
 1013b31:	int3   
 1013b32:	int3   
 1013b33:	int3   
 1013b34:	int3   
 1013b35:	int3   
 1013b36:	int3   
 1013b37:	int3   
 1013b38:	int3   
 1013b39:	int3   
 1013b3a:	int3   
 1013b3b:	int3   
 1013b3c:	int3   
 1013b3d:	int3   
 1013b3e:	int3   
 1013b3f:	int3   
 1013b40:	mov    QWORD PTR [rsp+0x10],rdx
 1013b45:	push   rbp
 1013b46:	sub    rsp,0x30
 1013b4a:	mov    rbp,rdx
 1013b4d:	lea    rax,[rip+0xffffffffffffa11d]        # 0x100dc71
 1013b54:	add    rsp,0x30
 1013b58:	pop    rbp
 1013b59:	ret    
 1013b5a:	int3   
 1013b5b:	int3   
 1013b5c:	int3   
 1013b5d:	int3   
 1013b5e:	int3   
 1013b5f:	int3   
 1013b60:	int3   
 1013b61:	int3   
 1013b62:	int3   
 1013b63:	int3   
 1013b64:	int3   
 1013b65:	int3   
 1013b66:	int3   
 1013b67:	int3   
 1013b68:	int3   
 1013b69:	int3   
 1013b6a:	int3   
 1013b6b:	int3   
 1013b6c:	int3   
 1013b6d:	int3   
 1013b6e:	int3   
 1013b6f:	int3   
 1013b70:	mov    QWORD PTR [rsp+0x10],rdx
 1013b75:	push   rbp
 1013b76:	sub    rsp,0x30
 1013b7a:	mov    rbp,rdx
 1013b7d:	lea    rax,[rip+0xffffffffffffa25d]        # 0x100dde1
 1013b84:	add    rsp,0x30
 1013b88:	pop    rbp
 1013b89:	ret    
 1013b8a:	int3   
 1013b8b:	int3   
 1013b8c:	int3   
 1013b8d:	int3   
 1013b8e:	int3   
 1013b8f:	int3   
 1013b90:	int3   
 1013b91:	int3   
 1013b92:	int3   
 1013b93:	int3   
 1013b94:	int3   
 1013b95:	int3   
 1013b96:	int3   
 1013b97:	int3   
 1013b98:	int3   
 1013b99:	int3   
 1013b9a:	int3   
 1013b9b:	int3   
 1013b9c:	int3   
 1013b9d:	int3   
 1013b9e:	int3   
 1013b9f:	int3   
 1013ba0:	mov    rcx,QWORD PTR [rdx+0x160]
 1013ba7:	jmp    0x1006070
 1013bac:	int3   
 1013bad:	int3   
 1013bae:	int3   
 1013baf:	int3   
 1013bb0:	lea    rcx,[rdx+0xd0]
 1013bb7:	jmp    0x10061c0
 1013bbc:	int3   
 1013bbd:	int3   
 1013bbe:	int3   
 1013bbf:	int3   
 1013bc0:	lea    rcx,[rdx+0xc0]
 1013bc7:	jmp    0x100c7c0
 1013bcc:	int3   
 1013bcd:	int3   
 1013bce:	int3   
 1013bcf:	int3   
 1013bd0:	lea    rcx,[rdx+0xc0]
 1013bd7:	jmp    0x100c9d0
 1013bdc:	int3   
 1013bdd:	int3   
 1013bde:	int3   
 1013bdf:	int3   
 1013be0:	lea    rcx,[rdx+0xc0]
 1013be7:	jmp    0x100d040
 1013bec:	int3   
 1013bed:	int3   
 1013bee:	int3   
 1013bef:	int3   
 1013bf0:	lea    rcx,[rdx+0xc0]
 1013bf7:	jmp    0x100d100
 1013bfc:	int3   
 1013bfd:	int3   
 1013bfe:	int3   
 1013bff:	int3   
 1013c00:	mov    rcx,QWORD PTR [rdx+0x168]
 1013c07:	jmp    0x1006070
 1013c0c:	int3   
 1013c0d:	int3   
 1013c0e:	int3   
 1013c0f:	int3   
 1013c10:	mov    rcx,QWORD PTR [rdx+0x168]
 1013c17:	jmp    0x1006070
 1013c1c:	int3   
 1013c1d:	int3   
 1013c1e:	int3   
 1013c1f:	int3   
 1013c20:	mov    QWORD PTR [rsp+0x10],rdx
 1013c25:	push   rbp
 1013c26:	sub    rsp,0x40
 1013c2a:	mov    rbp,rdx
 1013c2d:	mov    eax,DWORD PTR [rbp+0xfc]
 1013c33:	mov    DWORD PTR [rbp+0xd0],eax
 1013c39:	lea    rax,[rbp+0x48]
 1013c3d:	mov    QWORD PTR [rbp+0x168],rax
 1013c44:	lea    rax,[rip+0xfffffffffffeefa5]        # 0x1002bf0
 1013c4b:	mov    QWORD PTR [rbp+0x48],rax
 1013c4f:	lea    rax,[rip+0xfffffffffffeef8a]        # 0x1002be0
 1013c56:	mov    QWORD PTR [rbp+0x50],rax
 1013c5a:	mov    DWORD PTR [rbp+0x58],0x207
 1013c61:	mov    QWORD PTR [rbp+0x5c],0x2
 1013c69:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1013c73:	xor    eax,eax
 1013c75:	mov    QWORD PTR [rbp+0x68],rax
 1013c79:	mov    QWORD PTR [rbp+0x70],rax
 1013c7d:	mov    QWORD PTR [rbp+0x78],rax
 1013c81:	mov    QWORD PTR [rbp+0x80],rax
 1013c88:	mov    QWORD PTR [rbp+0x88],rax
 1013c8f:	mov    QWORD PTR [rbp+0x90],rax
 1013c96:	mov    QWORD PTR [rbp+0x98],rax
 1013c9d:	mov    QWORD PTR [rbp+0xa0],rax
 1013ca4:	mov    QWORD PTR [rbp+0xa8],rax
 1013cab:	mov    QWORD PTR [rbp+0xb0],rax
 1013cb2:	mov    r9d,DWORD PTR [rbp+0xd0]
 1013cb9:	lea    r8,[rip+0xffffffffffff1370]        # 0x1005030
 1013cc0:	lea    rdx,[rbp+0x48]
 1013cc4:	lea    rcx,[rbp+0xd0]
 1013ccb:	call   0x1006240
 1013cd0:	nop
 1013cd1:	lea    rax,[rip+0xffffffffffff91da]        # 0x100ceb2
 1013cd8:	add    rsp,0x40
 1013cdc:	pop    rbp
 1013cdd:	ret    
 1013cde:	int3   
 1013cdf:	int3   
 1013ce0:	mov    rcx,QWORD PTR [rdx+0x168]
 1013ce7:	jmp    0x1006070
 1013cec:	int3   
 1013ced:	int3   
 1013cee:	int3   
 1013cef:	int3   
 1013cf0:	mov    QWORD PTR [rsp+0x10],rdx
 1013cf5:	push   rbp
 1013cf6:	sub    rsp,0x40
 1013cfa:	mov    rbp,rdx
 1013cfd:	mov    eax,DWORD PTR [rbp+0xf8]
 1013d03:	test   eax,eax
 1013d05:	jle    0x1013d0f
 1013d07:	movzx  eax,ax
 1013d0a:	or     eax,0x80070000
 1013d0f:	mov    DWORD PTR [rbp+0xd0],eax
 1013d15:	lea    rax,[rbp+0x48]
 1013d19:	mov    QWORD PTR [rbp+0x168],rax
 1013d20:	lea    rax,[rip+0xfffffffffffeeec9]        # 0x1002bf0
 1013d27:	mov    QWORD PTR [rbp+0x48],rax
 1013d2b:	lea    rax,[rip+0xfffffffffffeeeae]        # 0x1002be0
 1013d32:	mov    QWORD PTR [rbp+0x50],rax
 1013d36:	mov    DWORD PTR [rbp+0x58],0x207
 1013d3d:	mov    QWORD PTR [rbp+0x5c],0x2
 1013d45:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1013d4f:	xor    eax,eax
 1013d51:	mov    QWORD PTR [rbp+0x68],rax
 1013d55:	mov    QWORD PTR [rbp+0x70],rax
 1013d59:	mov    QWORD PTR [rbp+0x78],rax
 1013d5d:	mov    QWORD PTR [rbp+0x80],rax
 1013d64:	mov    QWORD PTR [rbp+0x88],rax
 1013d6b:	mov    QWORD PTR [rbp+0x90],rax
 1013d72:	mov    QWORD PTR [rbp+0x98],rax
 1013d79:	mov    QWORD PTR [rbp+0xa0],rax
 1013d80:	mov    QWORD PTR [rbp+0xa8],rax
 1013d87:	mov    QWORD PTR [rbp+0xb0],rax
 1013d8e:	mov    r9d,DWORD PTR [rbp+0xd0]
 1013d95:	lea    r8,[rip+0xffffffffffff12e4]        # 0x1005080
 1013d9c:	lea    rdx,[rbp+0x48]
 1013da0:	lea    rcx,[rbp+0xd0]
 1013da7:	call   0x1006240
 1013dac:	nop
 1013dad:	lea    rax,[rip+0xffffffffffff90fe]        # 0x100ceb2
 1013db4:	add    rsp,0x40
 1013db8:	pop    rbp
 1013db9:	ret    
 1013dba:	int3   
 1013dbb:	int3   
 1013dbc:	int3   
 1013dbd:	int3   
 1013dbe:	int3   
 1013dbf:	int3   
 1013dc0:	mov    rcx,QWORD PTR [rdx+0x168]
 1013dc7:	jmp    0x1006070
 1013dcc:	int3   
 1013dcd:	int3   
 1013dce:	int3   
 1013dcf:	int3   
 1013dd0:	mov    QWORD PTR [rsp+0x10],rdx
 1013dd5:	push   rbp
 1013dd6:	sub    rsp,0x40
 1013dda:	mov    rbp,rdx
 1013ddd:	mov    DWORD PTR [rbp+0xd0],0x8000ffff
 1013de7:	lea    rax,[rbp+0x48]
 1013deb:	mov    QWORD PTR [rbp+0x168],rax
 1013df2:	lea    rax,[rip+0xfffffffffffeedf7]        # 0x1002bf0
 1013df9:	mov    QWORD PTR [rbp+0x48],rax
 1013dfd:	lea    rax,[rip+0xfffffffffffeeddc]        # 0x1002be0
 1013e04:	mov    QWORD PTR [rbp+0x50],rax
 1013e08:	mov    DWORD PTR [rbp+0x58],0x207
 1013e0f:	mov    QWORD PTR [rbp+0x5c],0x2
 1013e17:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1013e21:	xor    eax,eax
 1013e23:	mov    QWORD PTR [rbp+0x68],rax
 1013e27:	mov    QWORD PTR [rbp+0x70],rax
 1013e2b:	mov    QWORD PTR [rbp+0x78],rax
 1013e2f:	mov    QWORD PTR [rbp+0x80],rax
 1013e36:	mov    QWORD PTR [rbp+0x88],rax
 1013e3d:	mov    QWORD PTR [rbp+0x90],rax
 1013e44:	mov    QWORD PTR [rbp+0x98],rax
 1013e4b:	mov    QWORD PTR [rbp+0xa0],rax
 1013e52:	mov    QWORD PTR [rbp+0xa8],rax
 1013e59:	mov    QWORD PTR [rbp+0xb0],rax
 1013e60:	mov    r9d,DWORD PTR [rbp+0xd0]
 1013e67:	lea    r8,[rip+0xffffffffffff1272]        # 0x10050e0
 1013e6e:	lea    rdx,[rbp+0x48]
 1013e72:	lea    rcx,[rbp+0xd0]
 1013e79:	call   0x1006240
 1013e7e:	xor    ecx,ecx
 1013e80:	call   0x100bd00
 1013e85:	nop
 1013e86:	lea    rax,[rip+0xffffffffffff9025]        # 0x100ceb2
 1013e8d:	add    rsp,0x40
 1013e91:	pop    rbp
 1013e92:	ret    
 1013e93:	int3   
 1013e94:	int3   
 1013e95:	int3   
 1013e96:	int3   
 1013e97:	int3   
 1013e98:	int3   
 1013e99:	int3   
 1013e9a:	int3   
 1013e9b:	int3   
 1013e9c:	int3   
 1013e9d:	int3   
 1013e9e:	int3   
 1013e9f:	int3   
 1013ea0:	mov    rcx,QWORD PTR [rdx+0x168]
 1013ea7:	jmp    0x1006070
 1013eac:	int3   
 1013ead:	int3   
 1013eae:	int3   
 1013eaf:	int3   
 1013eb0:	lea    rcx,[rdx+0xc0]
 1013eb7:	jmp    0x100d040
 1013ebc:	int3   
 1013ebd:	int3   
 1013ebe:	int3   
 1013ebf:	int3   
 1013ec0:	lea    rcx,[rdx+0xc0]
 1013ec7:	jmp    0x100c9d0
 1013ecc:	int3   
 1013ecd:	int3   
 1013ece:	int3   
 1013ecf:	int3   
 1013ed0:	lea    rcx,[rdx+0xc0]
 1013ed7:	jmp    0x100c7c0
 1013edc:	int3   
 1013edd:	int3   
 1013ede:	int3   
 1013edf:	int3   
 1013ee0:	int3   
 1013ee1:	int3   
 1013ee2:	int3   
 1013ee3:	int3   
 1013ee4:	int3   
 1013ee5:	int3   
 1013ee6:	int3   
 1013ee7:	int3   
 1013ee8:	int3   
 1013ee9:	int3   
 1013eea:	int3   
 1013eeb:	int3   
 1013eec:	int3   
 1013eed:	int3   
 1013eee:	int3   
 1013eef:	int3   
 1013ef0:	mov    QWORD PTR [rsp+0x10],rdx
 1013ef5:	push   rbp
 1013ef6:	sub    rsp,0x20
 1013efa:	mov    rbp,rdx
 1013efd:	lea    rax,[rip+0xffffffffffff992d]        # 0x100d831
 1013f04:	add    rsp,0x20
 1013f08:	pop    rbp
 1013f09:	ret    
 1013f0a:	int3   
 1013f0b:	int3   
 1013f0c:	int3   
 1013f0d:	int3   
 1013f0e:	int3   
 1013f0f:	int3   
 1013f10:	int3   
 1013f11:	int3   
 1013f12:	int3   
 1013f13:	int3   
 1013f14:	int3   
 1013f15:	int3   
 1013f16:	int3   
 1013f17:	int3   
 1013f18:	int3   
 1013f19:	int3   
 1013f1a:	int3   
 1013f1b:	int3   
 1013f1c:	int3   
 1013f1d:	int3   
 1013f1e:	int3   
 1013f1f:	int3   
 1013f20:	mov    rcx,QWORD PTR [rdx+0x20]
 1013f27:	jmp    0x100f070
 1013f2c:	int3   
 1013f2d:	int3   
 1013f2e:	int3   
 1013f2f:	int3   
 1013f30:	mov    rcx,QWORD PTR [rdx+0x20]
 1013f37:	add    rcx,0x20
 1013f3b:	jmp    0x100d740
 1013f40:	mov    rcx,QWORD PTR [rdx+0x28]
 1013f47:	jmp    0x100c7c0
 1013f4c:	int3   
 1013f4d:	int3   
 1013f4e:	int3   
 1013f4f:	int3   
 1013f50:	mov    rcx,QWORD PTR [rdx+0x28]
 1013f57:	jmp    0x100c9d0
 1013f5c:	int3   
 1013f5d:	int3   
 1013f5e:	int3   
 1013f5f:	int3   
 1013f60:	mov    rcx,QWORD PTR [rdx+0x28]
 1013f67:	jmp    0x100cfd0
 1013f6c:	int3   
 1013f6d:	int3   
 1013f6e:	int3   
 1013f6f:	int3   
 1013f70:	mov    rcx,QWORD PTR [rdx+0x20]
 1013f77:	add    rcx,0x48
 1013f7b:	jmp    0x100f1a0
 1013f80:	int3   
 1013f81:	int3   
 1013f82:	int3   
 1013f83:	int3   
 1013f84:	int3   
 1013f85:	int3   
 1013f86:	int3   
 1013f87:	int3   
 1013f88:	int3   
 1013f89:	int3   
 1013f8a:	int3   
 1013f8b:	int3   
 1013f8c:	int3   
 1013f8d:	int3   
 1013f8e:	int3   
 1013f8f:	int3   
 1013f90:	mov    rcx,QWORD PTR [rdx+0x40]
 1013f97:	jmp    0x100c9d0
 1013f9c:	int3   
 1013f9d:	int3   
 1013f9e:	int3   
 1013f9f:	int3   
 1013fa0:	mov    rcx,QWORD PTR [rdx+0x40]
 1013fa7:	jmp    0x100c7c0
 1013fac:	int3   
 1013fad:	int3   
 1013fae:	int3   
 1013faf:	int3   
 1013fb0:	int3   
 1013fb1:	int3   
 1013fb2:	int3   
 1013fb3:	int3   
 1013fb4:	int3   
 1013fb5:	int3   
 1013fb6:	int3   
 1013fb7:	int3   
 1013fb8:	int3   
 1013fb9:	int3   
 1013fba:	int3   
 1013fbb:	int3   
 1013fbc:	int3   
 1013fbd:	int3   
 1013fbe:	int3   
 1013fbf:	int3   
 1013fc0:	mov    rcx,QWORD PTR [rdx+0x40]
 1013fc7:	jmp    0x100cfd0
 1013fcc:	int3   
 1013fcd:	int3   
 1013fce:	int3   
 1013fcf:	int3   
 1013fd0:	mov    rcx,QWORD PTR [rdx+0x40]
 1013fd7:	jmp    0x100c9d0
 1013fdc:	int3   
 1013fdd:	int3   
 1013fde:	int3   
 1013fdf:	int3   
 1013fe0:	mov    rcx,QWORD PTR [rdx+0x40]
 1013fe7:	jmp    0x100c7c0
 1013fec:	int3   
 1013fed:	int3   
 1013fee:	int3   
 1013fef:	int3   
 1013ff0:	int3   
 1013ff1:	int3   
 1013ff2:	int3   
 1013ff3:	int3   
 1013ff4:	int3   
 1013ff5:	int3   
 1013ff6:	int3   
 1013ff7:	int3   
 1013ff8:	int3   
 1013ff9:	int3   
 1013ffa:	int3   
 1013ffb:	int3   
 1013ffc:	int3   
 1013ffd:	int3   
 1013ffe:	int3   
 1013fff:	int3   
 1014000:	mov    rcx,QWORD PTR [rdx+0x40]
 1014007:	jmp    0x100d1c0
 101400c:	int3   
 101400d:	int3   
 101400e:	int3   
 101400f:	int3   
 1014010:	int3   
 1014011:	int3   
 1014012:	int3   
 1014013:	int3   
 1014014:	int3   
 1014015:	int3   
 1014016:	int3   
 1014017:	int3   
 1014018:	int3   
 1014019:	int3   
 101401a:	int3   
 101401b:	int3   
 101401c:	int3   
 101401d:	int3   
 101401e:	int3   
 101401f:	int3   
 1014020:	mov    rcx,QWORD PTR [rdx+0x40]
 1014027:	jmp    0x100f420
 101402c:	int3   
 101402d:	int3   
 101402e:	int3   
 101402f:	int3   
 1014030:	mov    rcx,QWORD PTR [rdx+0x40]
 1014037:	jmp    0x100d1c0
 101403c:	int3   
 101403d:	int3   
 101403e:	int3   
 101403f:	int3   
 1014040:	int3   
 1014041:	int3   
 1014042:	int3   
 1014043:	int3   
 1014044:	int3   
 1014045:	int3   
 1014046:	int3   
 1014047:	int3   
 1014048:	int3   
 1014049:	int3   
 101404a:	int3   
 101404b:	int3   
 101404c:	int3   
 101404d:	int3   
 101404e:	int3   
 101404f:	int3   
 1014050:	mov    rcx,QWORD PTR [rdx+0x40]
 1014057:	jmp    0x100f820
 101405c:	int3   
 101405d:	int3   
 101405e:	int3   
 101405f:	int3   
 1014060:	mov    rcx,QWORD PTR [rdx+0x40]
 1014067:	jmp    0x100f610
 101406c:	int3   
 101406d:	int3   
 101406e:	int3   
 101406f:	int3   
 1014070:	int3   
 1014071:	int3   
 1014072:	int3   
 1014073:	int3   
 1014074:	int3   
 1014075:	int3   
 1014076:	int3   
 1014077:	int3   
 1014078:	int3   
 1014079:	int3   
 101407a:	int3   
 101407b:	int3   
 101407c:	int3   
 101407d:	int3   
 101407e:	int3   
 101407f:	int3   
 1014080:	mov    rcx,QWORD PTR [rdx+0x40]
 1014087:	jmp    0x100d040
 101408c:	int3   
 101408d:	int3   
 101408e:	int3   
 101408f:	int3   
 1014090:	mov    rcx,QWORD PTR [rdx+0x40]
 1014097:	jmp    0x100c9d0
 101409c:	int3   
 101409d:	int3   
 101409e:	int3   
 101409f:	int3   
 10140a0:	mov    rcx,QWORD PTR [rdx+0x40]
 10140a7:	jmp    0x100c7c0
 10140ac:	int3   
 10140ad:	int3   
 10140ae:	int3   
 10140af:	int3   
 10140b0:	int3   
 10140b1:	int3   
 10140b2:	int3   
 10140b3:	int3   
 10140b4:	int3   
 10140b5:	int3   
 10140b6:	int3   
 10140b7:	int3   
 10140b8:	int3   
 10140b9:	int3   
 10140ba:	int3   
 10140bb:	int3   
 10140bc:	int3   
 10140bd:	int3   
 10140be:	int3   
 10140bf:	int3   
 10140c0:	mov    rcx,QWORD PTR [rdx+0x40]
 10140c7:	jmp    0x100f490
 10140cc:	int3   
 10140cd:	int3   
 10140ce:	int3   
 10140cf:	int3   
 10140d0:	mov    rcx,QWORD PTR [rdx+0x40]
 10140d7:	jmp    0x100f420
 10140dc:	int3   
 10140dd:	int3   
 10140de:	int3   
 10140df:	int3   
 10140e0:	mov    rcx,QWORD PTR [rdx+0x40]
 10140e7:	jmp    0x100d1c0
 10140ec:	int3   
 10140ed:	int3   
 10140ee:	int3   
 10140ef:	int3   
 10140f0:	int3   
 10140f1:	int3   
 10140f2:	int3   
 10140f3:	int3   
 10140f4:	int3   
 10140f5:	int3   
 10140f6:	int3   
 10140f7:	int3   
 10140f8:	int3   
 10140f9:	int3   
 10140fa:	int3   
 10140fb:	int3   
 10140fc:	int3   
 10140fd:	int3   
 10140fe:	int3   
 10140ff:	int3   
 1014100:	mov    rcx,QWORD PTR [rdx+0x40]
 1014107:	jmp    0x100f890
 101410c:	int3   
 101410d:	int3   
 101410e:	int3   
 101410f:	int3   
 1014110:	mov    rcx,QWORD PTR [rdx+0x40]
 1014117:	jmp    0x100f820
 101411c:	int3   
 101411d:	int3   
 101411e:	int3   
 101411f:	int3   
 1014120:	mov    rcx,QWORD PTR [rdx+0x40]
 1014127:	jmp    0x100f610
 101412c:	int3   
 101412d:	int3   
 101412e:	int3   
 101412f:	int3   
 1014130:	int3   
 1014131:	int3   
 1014132:	int3   
 1014133:	int3   
 1014134:	int3   
 1014135:	int3   
 1014136:	int3   
 1014137:	int3   
 1014138:	int3   
 1014139:	int3   
 101413a:	int3   
 101413b:	int3   
 101413c:	int3   
 101413d:	int3   
 101413e:	int3   
 101413f:	int3   
 1014140:	mov    rcx,QWORD PTR [rdx+0x20]
 1014147:	jmp    0x100c7c0
 101414c:	int3   
 101414d:	int3   
 101414e:	int3   
 101414f:	int3   
 1014150:	int3   
 1014151:	int3   
 1014152:	int3   
 1014153:	int3   
 1014154:	int3   
 1014155:	int3   
 1014156:	int3   
 1014157:	int3   
 1014158:	int3   
 1014159:	int3   
 101415a:	int3   
 101415b:	int3   
 101415c:	int3   
 101415d:	int3   
 101415e:	int3   
 101415f:	int3   
 1014160:	mov    rcx,QWORD PTR [rdx+0x20]
 1014167:	jmp    0x100d1c0
 101416c:	int3   
 101416d:	int3   
 101416e:	int3   
 101416f:	int3   
 1014170:	int3   
 1014171:	int3   
 1014172:	int3   
 1014173:	int3   
 1014174:	int3   
 1014175:	int3   
 1014176:	int3   
 1014177:	int3   
 1014178:	int3   
 1014179:	int3   
 101417a:	int3   
 101417b:	int3   
 101417c:	int3   
 101417d:	int3   
 101417e:	int3   
 101417f:	int3   
 1014180:	mov    rcx,QWORD PTR [rdx+0x20]
 1014187:	jmp    0x100f610
 101418c:	int3   
 101418d:	int3   
 101418e:	int3   
 101418f:	int3   
 1014190:	int3   
 1014191:	int3   
 1014192:	int3   
 1014193:	int3   
 1014194:	int3   
 1014195:	int3   
 1014196:	int3   
 1014197:	int3   
 1014198:	int3   
 1014199:	int3   
 101419a:	int3   
 101419b:	int3   
 101419c:	int3   
 101419d:	int3   
 101419e:	int3   
 101419f:	int3   
 10141a0:	mov    rcx,QWORD PTR [rdx+0x40]
 10141a7:	jmp    0x100d210
 10141ac:	int3   
 10141ad:	int3   
 10141ae:	int3   
 10141af:	int3   
 10141b0:	mov    rcx,QWORD PTR [rdx+0x40]
 10141b7:	jmp    0x100d1c0
 10141bc:	int3   
 10141bd:	int3   
 10141be:	int3   
 10141bf:	int3   
 10141c0:	int3   
 10141c1:	int3   
 10141c2:	int3   
 10141c3:	int3   
 10141c4:	int3   
 10141c5:	int3   
 10141c6:	int3   
 10141c7:	int3   
 10141c8:	int3   
 10141c9:	int3   
 10141ca:	int3   
 10141cb:	int3   
 10141cc:	int3   
 10141cd:	int3   
 10141ce:	int3   
 10141cf:	int3   
 10141d0:	mov    rcx,QWORD PTR [rdx+0x20]
 10141d7:	jmp    0x100c9d0
 10141dc:	int3   
 10141dd:	int3   
 10141de:	int3   
 10141df:	int3   
 10141e0:	mov    rcx,QWORD PTR [rdx+0x20]
 10141e7:	jmp    0x100c7c0
 10141ec:	int3   
 10141ed:	int3   
 10141ee:	int3   
 10141ef:	int3   
 10141f0:	int3   
 10141f1:	int3   
 10141f2:	int3   
 10141f3:	int3   
 10141f4:	int3   
 10141f5:	int3   
 10141f6:	int3   
 10141f7:	int3   
 10141f8:	int3   
 10141f9:	int3   
 10141fa:	int3   
 10141fb:	int3   
 10141fc:	int3   
 10141fd:	int3   
 10141fe:	int3   
 10141ff:	int3   
 1014200:	mov    rcx,QWORD PTR [rdx+0x50]
 1014207:	jmp    0x100f070
 101420c:	int3   
 101420d:	int3   
 101420e:	int3   
 101420f:	int3   
 1014210:	mov    rcx,QWORD PTR [rdx+0x50]
 1014217:	add    rcx,0x20
 101421b:	jmp    0x100d740
 1014220:	mov    rcx,QWORD PTR [rdx+0x50]
 1014227:	add    rcx,0x48
 101422b:	jmp    0x100f1a0
 1014230:	mov    rcx,QWORD PTR [rdx+0x58]
 1014237:	jmp    0x100cfd0
 101423c:	int3   
 101423d:	int3   
 101423e:	int3   
 101423f:	int3   
 1014240:	mov    rcx,QWORD PTR [rdx+0x58]
 1014247:	jmp    0x100c9d0
 101424c:	int3   
 101424d:	int3   
 101424e:	int3   
 101424f:	int3   
 1014250:	mov    rcx,QWORD PTR [rdx+0x58]
 1014257:	jmp    0x100c7c0
 101425c:	int3   
 101425d:	int3   
 101425e:	int3   
 101425f:	int3   
 1014260:	int3   
 1014261:	int3   
 1014262:	int3   
 1014263:	int3   
 1014264:	int3   
 1014265:	int3   
 1014266:	int3   
 1014267:	int3   
 1014268:	int3   
 1014269:	int3   
 101426a:	int3   
 101426b:	int3   
 101426c:	int3   
 101426d:	int3   
 101426e:	int3   
 101426f:	int3   
 1014270:	mov    rcx,QWORD PTR [rdx+0x40]
 1014277:	jmp    0x100c9d0
 101427c:	int3   
 101427d:	int3   
 101427e:	int3   
 101427f:	int3   
 1014280:	mov    rcx,QWORD PTR [rdx+0x40]
 1014287:	jmp    0x100c7c0
 101428c:	int3   
 101428d:	int3   
 101428e:	int3   
 101428f:	int3   
 1014290:	int3   
 1014291:	int3   
 1014292:	int3   
 1014293:	int3   
 1014294:	int3   
 1014295:	int3   
 1014296:	int3   
 1014297:	int3   
 1014298:	int3   
 1014299:	int3   
 101429a:	int3   
 101429b:	int3   
 101429c:	int3   
 101429d:	int3   
 101429e:	int3   
 101429f:	int3   
 10142a0:	mov    rcx,QWORD PTR [rdx+0x40]
 10142a7:	jmp    0x100cfd0
 10142ac:	int3   
 10142ad:	int3   
 10142ae:	int3   
 10142af:	int3   
 10142b0:	mov    rcx,QWORD PTR [rdx+0x40]
 10142b7:	jmp    0x100c9d0
 10142bc:	int3   
 10142bd:	int3   
 10142be:	int3   
 10142bf:	int3   
 10142c0:	mov    rcx,QWORD PTR [rdx+0x40]
 10142c7:	jmp    0x100c7c0
 10142cc:	int3   
 10142cd:	int3   
 10142ce:	int3   
 10142cf:	int3   
 10142d0:	int3   
 10142d1:	int3   
 10142d2:	int3   
 10142d3:	int3   
 10142d4:	int3   
 10142d5:	int3   
 10142d6:	int3   
 10142d7:	int3   
 10142d8:	int3   
 10142d9:	int3   
 10142da:	int3   
 10142db:	int3   
 10142dc:	int3   
 10142dd:	int3   
 10142de:	int3   
 10142df:	int3   
 10142e0:	mov    rcx,QWORD PTR [rdx+0x40]
 10142e7:	jmp    0x100d1c0
 10142ec:	int3   
 10142ed:	int3   
 10142ee:	int3   
 10142ef:	int3   
 10142f0:	int3   
 10142f1:	int3   
 10142f2:	int3   
 10142f3:	int3   
 10142f4:	int3   
 10142f5:	int3   
 10142f6:	int3   
 10142f7:	int3   
 10142f8:	int3   
 10142f9:	int3   
 10142fa:	int3   
 10142fb:	int3   
 10142fc:	int3   
 10142fd:	int3   
 10142fe:	int3   
 10142ff:	int3   
 1014300:	mov    rcx,QWORD PTR [rdx+0x40]
 1014307:	jmp    0x100f420
 101430c:	int3   
 101430d:	int3   
 101430e:	int3   
 101430f:	int3   
 1014310:	mov    rcx,QWORD PTR [rdx+0x40]
 1014317:	jmp    0x100d1c0
 101431c:	int3   
 101431d:	int3   
 101431e:	int3   
 101431f:	int3   
 1014320:	int3   
 1014321:	int3   
 1014322:	int3   
 1014323:	int3   
 1014324:	int3   
 1014325:	int3   
 1014326:	int3   
 1014327:	int3   
 1014328:	int3   
 1014329:	int3   
 101432a:	int3   
 101432b:	int3   
 101432c:	int3   
 101432d:	int3   
 101432e:	int3   
 101432f:	int3   
 1014330:	mov    rcx,QWORD PTR [rdx+0x40]
 1014337:	jmp    0x100f820
 101433c:	int3   
 101433d:	int3   
 101433e:	int3   
 101433f:	int3   
 1014340:	mov    rcx,QWORD PTR [rdx+0x40]
 1014347:	jmp    0x100f610
 101434c:	int3   
 101434d:	int3   
 101434e:	int3   
 101434f:	int3   
 1014350:	int3   
 1014351:	int3   
 1014352:	int3   
 1014353:	int3   
 1014354:	int3   
 1014355:	int3   
 1014356:	int3   
 1014357:	int3   
 1014358:	int3   
 1014359:	int3   
 101435a:	int3   
 101435b:	int3   
 101435c:	int3   
 101435d:	int3   
 101435e:	int3   
 101435f:	int3   
 1014360:	mov    rcx,QWORD PTR [rdx+0x40]
 1014367:	jmp    0x100d040
 101436c:	int3   
 101436d:	int3   
 101436e:	int3   
 101436f:	int3   
 1014370:	mov    rcx,QWORD PTR [rdx+0x40]
 1014377:	jmp    0x100c9d0
 101437c:	int3   
 101437d:	int3   
 101437e:	int3   
 101437f:	int3   
 1014380:	mov    rcx,QWORD PTR [rdx+0x40]
 1014387:	jmp    0x100c7c0
 101438c:	int3   
 101438d:	int3   
 101438e:	int3   
 101438f:	int3   
 1014390:	int3   
 1014391:	int3   
 1014392:	int3   
 1014393:	int3   
 1014394:	int3   
 1014395:	int3   
 1014396:	int3   
 1014397:	int3   
 1014398:	int3   
 1014399:	int3   
 101439a:	int3   
 101439b:	int3   
 101439c:	int3   
 101439d:	int3   
 101439e:	int3   
 101439f:	int3   
 10143a0:	mov    rcx,QWORD PTR [rdx+0x40]
 10143a7:	jmp    0x100f490
 10143ac:	int3   
 10143ad:	int3   
 10143ae:	int3   
 10143af:	int3   
 10143b0:	mov    rcx,QWORD PTR [rdx+0x40]
 10143b7:	jmp    0x100f420
 10143bc:	int3   
 10143bd:	int3   
 10143be:	int3   
 10143bf:	int3   
 10143c0:	mov    rcx,QWORD PTR [rdx+0x40]
 10143c7:	jmp    0x100d1c0
 10143cc:	int3   
 10143cd:	int3   
 10143ce:	int3   
 10143cf:	int3   
 10143d0:	int3   
 10143d1:	int3   
 10143d2:	int3   
 10143d3:	int3   
 10143d4:	int3   
 10143d5:	int3   
 10143d6:	int3   
 10143d7:	int3   
 10143d8:	int3   
 10143d9:	int3   
 10143da:	int3   
 10143db:	int3   
 10143dc:	int3   
 10143dd:	int3   
 10143de:	int3   
 10143df:	int3   
 10143e0:	mov    rcx,QWORD PTR [rdx+0x40]
 10143e7:	jmp    0x100f890
 10143ec:	int3   
 10143ed:	int3   
 10143ee:	int3   
 10143ef:	int3   
 10143f0:	mov    rcx,QWORD PTR [rdx+0x40]
 10143f7:	jmp    0x100f820
 10143fc:	int3   
 10143fd:	int3   
 10143fe:	int3   
 10143ff:	int3   
 1014400:	mov    rcx,QWORD PTR [rdx+0x40]
 1014407:	jmp    0x100f610
 101440c:	int3   
 101440d:	int3   
 101440e:	int3   
 101440f:	int3   
 1014410:	int3   
 1014411:	int3   
 1014412:	int3   
 1014413:	int3   
 1014414:	int3   
 1014415:	int3   
 1014416:	int3   
 1014417:	int3   
 1014418:	int3   
 1014419:	int3   
 101441a:	int3   
 101441b:	int3   
 101441c:	int3   
 101441d:	int3   
 101441e:	int3   
 101441f:	int3   
 1014420:	mov    rcx,QWORD PTR [rdx+0x40]
 1014427:	jmp    0x100c7c0
 101442c:	int3   
 101442d:	int3   
 101442e:	int3   
 101442f:	int3   
 1014430:	int3   
 1014431:	int3   
 1014432:	int3   
 1014433:	int3   
 1014434:	int3   
 1014435:	int3   
 1014436:	int3   
 1014437:	int3   
 1014438:	int3   
 1014439:	int3   
 101443a:	int3   
 101443b:	int3   
 101443c:	int3   
 101443d:	int3   
 101443e:	int3   
 101443f:	int3   
 1014440:	mov    rcx,QWORD PTR [rdx+0x40]
 1014447:	jmp    0x100d1c0
 101444c:	int3   
 101444d:	int3   
 101444e:	int3   
 101444f:	int3   
 1014450:	int3   
 1014451:	int3   
 1014452:	int3   
 1014453:	int3   
 1014454:	int3   
 1014455:	int3   
 1014456:	int3   
 1014457:	int3   
 1014458:	int3   
 1014459:	int3   
 101445a:	int3   
 101445b:	int3   
 101445c:	int3   
 101445d:	int3   
 101445e:	int3   
 101445f:	int3   
 1014460:	mov    rcx,QWORD PTR [rdx+0x40]
 1014467:	jmp    0x100f610
 101446c:	int3   
 101446d:	int3   
 101446e:	int3   
 101446f:	int3   
 1014470:	int3   
 1014471:	int3   
 1014472:	int3   
 1014473:	int3   
 1014474:	int3   
 1014475:	int3   
 1014476:	int3   
 1014477:	int3   
 1014478:	int3   
 1014479:	int3   
 101447a:	int3   
 101447b:	int3   
 101447c:	int3   
 101447d:	int3   
 101447e:	int3   
 101447f:	int3   
 1014480:	mov    rcx,QWORD PTR [rdx+0x40]
 1014487:	jmp    0x100d210
 101448c:	int3   
 101448d:	int3   
 101448e:	int3   
 101448f:	int3   
 1014490:	mov    rcx,QWORD PTR [rdx+0x40]
 1014497:	jmp    0x100d1c0
 101449c:	int3   
 101449d:	int3   
 101449e:	int3   
 101449f:	int3   
 10144a0:	int3   
 10144a1:	int3   
 10144a2:	int3   
 10144a3:	int3   
 10144a4:	int3   
 10144a5:	int3   
 10144a6:	int3   
 10144a7:	int3   
 10144a8:	int3   
 10144a9:	int3   
 10144aa:	int3   
 10144ab:	int3   
 10144ac:	int3   
 10144ad:	int3   
 10144ae:	int3   
 10144af:	int3   
 10144b0:	mov    rcx,QWORD PTR [rdx+0x40]
 10144b7:	jmp    0x100c9d0
 10144bc:	int3   
 10144bd:	int3   
 10144be:	int3   
 10144bf:	int3   
 10144c0:	mov    rcx,QWORD PTR [rdx+0x40]
 10144c7:	jmp    0x100c7c0
 10144cc:	int3   
 10144cd:	int3   
 10144ce:	int3   
 10144cf:	int3   
 10144d0:	int3   
 10144d1:	int3   
 10144d2:	int3   
 10144d3:	int3   
 10144d4:	int3   
 10144d5:	int3   
 10144d6:	int3   
 10144d7:	int3   
 10144d8:	int3   
 10144d9:	int3   
 10144da:	int3   
 10144db:	int3   
 10144dc:	int3   
 10144dd:	int3   
 10144de:	int3   
 10144df:	int3   
 10144e0:	mov    rcx,QWORD PTR [rdx+0x40]
 10144e7:	jmp    0x1006070
 10144ec:	int3   
 10144ed:	int3   
 10144ee:	int3   
 10144ef:	int3   
 10144f0:	lea    rcx,[rdx+0x188]
 10144f7:	jmp    0x10061c0
 10144fc:	int3   
 10144fd:	int3   
 10144fe:	int3   
 10144ff:	int3   
 1014500:	mov    rcx,QWORD PTR [rdx+0x40]
 1014507:	jmp    0x1006070
 101450c:	int3   
 101450d:	int3   
 101450e:	int3   
 101450f:	int3   
 1014510:	mov    rcx,QWORD PTR [rdx+0x40]
 1014517:	jmp    0x1006070
 101451c:	int3   
 101451d:	int3   
 101451e:	int3   
 101451f:	int3   
 1014520:	lea    rcx,[rdx+0x48]
 1014527:	jmp    0x100f610
 101452c:	int3   
 101452d:	int3   
 101452e:	int3   
 101452f:	int3   
 1014530:	lea    rcx,[rdx+0x48]
 1014537:	jmp    0x100f820
 101453c:	int3   
 101453d:	int3   
 101453e:	int3   
 101453f:	int3   
 1014540:	lea    rcx,[rdx+0x48]
 1014547:	jmp    0x100f890
 101454c:	int3   
 101454d:	int3   
 101454e:	int3   
 101454f:	int3   
 1014550:	lea    rcx,[rdx+0x48]
 1014557:	jmp    0x100f950
 101455c:	int3   
 101455d:	int3   
 101455e:	int3   
 101455f:	int3   
 1014560:	mov    rcx,QWORD PTR [rdx+0x40]
 1014567:	jmp    0x1006070
 101456c:	int3   
 101456d:	int3   
 101456e:	int3   
 101456f:	int3   
 1014570:	mov    rcx,QWORD PTR [rdx+0x40]
 1014577:	jmp    0x1006070
 101457c:	int3   
 101457d:	int3   
 101457e:	int3   
 101457f:	int3   
 1014580:	mov    rcx,QWORD PTR [rdx+0x40]
 1014587:	jmp    0x1006070
 101458c:	int3   
 101458d:	int3   
 101458e:	int3   
 101458f:	int3   
 1014590:	lea    rcx,[rdx+0x48]
 1014597:	jmp    0x100f890
 101459c:	int3   
 101459d:	int3   
 101459e:	int3   
 101459f:	int3   
 10145a0:	lea    rcx,[rdx+0x48]
 10145a7:	jmp    0x100f820
 10145ac:	int3   
 10145ad:	int3   
 10145ae:	int3   
 10145af:	int3   
 10145b0:	lea    rcx,[rdx+0x48]
 10145b7:	jmp    0x100f610
 10145bc:	int3   
 10145bd:	int3   
 10145be:	int3   
 10145bf:	int3   
 10145c0:	mov    rcx,QWORD PTR [rdx+0x40]
 10145c7:	jmp    0x1006070
 10145cc:	int3   
 10145cd:	int3   
 10145ce:	int3   
 10145cf:	int3   
 10145d0:	lea    rcx,[rdx+0x100]
 10145d7:	jmp    0x100c7c0
 10145dc:	int3   
 10145dd:	int3   
 10145de:	int3   
 10145df:	int3   
 10145e0:	lea    rcx,[rdx+0x100]
 10145e7:	jmp    0x100c9d0
 10145ec:	int3   
 10145ed:	int3   
 10145ee:	int3   
 10145ef:	int3   
 10145f0:	lea    rcx,[rdx+0x100]
 10145f7:	jmp    0x100cfd0
 10145fc:	int3   
 10145fd:	int3   
 10145fe:	int3   
 10145ff:	int3   
 1014600:	lea    rcx,[rdx+0x100]
 1014607:	jmp    0x100f1a0
 101460c:	int3   
 101460d:	int3   
 101460e:	int3   
 101460f:	int3   
 1014610:	lea    rcx,[rdx+0xf0]
 1014617:	jmp    0x100c7c0
 101461c:	int3   
 101461d:	int3   
 101461e:	int3   
 101461f:	int3   
 1014620:	lea    rcx,[rdx+0xf0]
 1014627:	jmp    0x100c9d0
 101462c:	int3   
 101462d:	int3   
 101462e:	int3   
 101462f:	int3   
 1014630:	lea    rcx,[rdx+0xf0]
 1014637:	jmp    0x100cfd0
 101463c:	int3   
 101463d:	int3   
 101463e:	int3   
 101463f:	int3   
 1014640:	lea    rcx,[rdx+0xf0]
 1014647:	jmp    0x100f1a0
 101464c:	int3   
 101464d:	int3   
 101464e:	int3   
 101464f:	int3   
 1014650:	lea    rcx,[rdx+0xd8]
 1014657:	jmp    0x100c7c0
 101465c:	int3   
 101465d:	int3   
 101465e:	int3   
 101465f:	int3   
 1014660:	lea    rcx,[rdx+0xd8]
 1014667:	jmp    0x100c9d0
 101466c:	int3   
 101466d:	int3   
 101466e:	int3   
 101466f:	int3   
 1014670:	lea    rcx,[rdx+0xd8]
 1014677:	jmp    0x100cfd0
 101467c:	int3   
 101467d:	int3   
 101467e:	int3   
 101467f:	int3   
 1014680:	lea    rcx,[rdx+0xd8]
 1014687:	jmp    0x100f1a0
 101468c:	int3   
 101468d:	int3   
 101468e:	int3   
 101468f:	int3   
 1014690:	mov    rcx,QWORD PTR [rdx+0x40]
 1014697:	jmp    0x1006070
 101469c:	int3   
 101469d:	int3   
 101469e:	int3   
 101469f:	int3   
 10146a0:	mov    rcx,QWORD PTR [rdx+0x40]
 10146a7:	jmp    0x1006070
 10146ac:	int3   
 10146ad:	int3   
 10146ae:	int3   
 10146af:	int3   
 10146b0:	lea    rcx,[rdx+0xd8]
 10146b7:	jmp    0x100cfd0
 10146bc:	int3   
 10146bd:	int3   
 10146be:	int3   
 10146bf:	int3   
 10146c0:	lea    rcx,[rdx+0xd8]
 10146c7:	jmp    0x100c9d0
 10146cc:	int3   
 10146cd:	int3   
 10146ce:	int3   
 10146cf:	int3   
 10146d0:	lea    rcx,[rdx+0xd8]
 10146d7:	jmp    0x100c7c0
 10146dc:	int3   
 10146dd:	int3   
 10146de:	int3   
 10146df:	int3   
 10146e0:	lea    rcx,[rdx+0xf0]
 10146e7:	jmp    0x100cfd0
 10146ec:	int3   
 10146ed:	int3   
 10146ee:	int3   
 10146ef:	int3   
 10146f0:	lea    rcx,[rdx+0xf0]
 10146f7:	jmp    0x100c9d0
 10146fc:	int3   
 10146fd:	int3   
 10146fe:	int3   
 10146ff:	int3   
 1014700:	lea    rcx,[rdx+0xf0]
 1014707:	jmp    0x100c7c0
 101470c:	int3   
 101470d:	int3   
 101470e:	int3   
 101470f:	int3   
 1014710:	lea    rcx,[rdx+0x100]
 1014717:	jmp    0x100cfd0
 101471c:	int3   
 101471d:	int3   
 101471e:	int3   
 101471f:	int3   
 1014720:	lea    rcx,[rdx+0x100]
 1014727:	jmp    0x100c9d0
 101472c:	int3   
 101472d:	int3   
 101472e:	int3   
 101472f:	int3   
 1014730:	lea    rcx,[rdx+0x100]
 1014737:	jmp    0x100c7c0
 101473c:	int3   
 101473d:	int3   
 101473e:	int3   
 101473f:	int3   
 1014740:	lea    rcx,[rdx+0x48]
 1014747:	jmp    0x100f890
 101474c:	int3   
 101474d:	int3   
 101474e:	int3   
 101474f:	int3   
 1014750:	lea    rcx,[rdx+0x48]
 1014757:	jmp    0x100f820
 101475c:	int3   
 101475d:	int3   
 101475e:	int3   
 101475f:	int3   
 1014760:	lea    rcx,[rdx+0x48]
 1014767:	jmp    0x100f610
 101476c:	int3   
 101476d:	int3   
 101476e:	int3   
 101476f:	int3   
 1014770:	int3   
 1014771:	int3   
 1014772:	int3   
 1014773:	int3   
 1014774:	int3   
 1014775:	int3   
 1014776:	int3   
 1014777:	int3   
 1014778:	int3   
 1014779:	int3   
 101477a:	int3   
 101477b:	int3   
 101477c:	int3   
 101477d:	int3   
 101477e:	int3   
 101477f:	int3   
 1014780:	mov    rcx,QWORD PTR [rdx+0x180]
 1014787:	jmp    0x1006070
 101478c:	int3   
 101478d:	int3   
 101478e:	int3   
 101478f:	int3   
 1014790:	lea    rcx,[rdx+0x130]
 1014797:	jmp    0x10061c0
 101479c:	int3   
 101479d:	int3   
 101479e:	int3   
 101479f:	int3   
 10147a0:	mov    rcx,QWORD PTR [rdx+0x180]
 10147a7:	jmp    0x1006070
 10147ac:	int3   
 10147ad:	int3   
 10147ae:	int3   
 10147af:	int3   
 10147b0:	int3   
 10147b1:	int3   
 10147b2:	int3   
 10147b3:	int3   
 10147b4:	int3   
 10147b5:	int3   
 10147b6:	int3   
 10147b7:	int3   
 10147b8:	int3   
 10147b9:	int3   
 10147ba:	int3   
 10147bb:	int3   
 10147bc:	int3   
 10147bd:	int3   
 10147be:	int3   
 10147bf:	int3   
 10147c0:	mov    rcx,QWORD PTR [rdx+0x180]
 10147c7:	jmp    0x1006070
 10147cc:	int3   
 10147cd:	int3   
 10147ce:	int3   
 10147cf:	int3   
 10147d0:	lea    rcx,[rdx+0x130]
 10147d7:	jmp    0x10061c0
 10147dc:	int3   
 10147dd:	int3   
 10147de:	int3   
 10147df:	int3   
 10147e0:	mov    rcx,QWORD PTR [rdx+0x180]
 10147e7:	jmp    0x1006070
 10147ec:	int3   
 10147ed:	int3   
 10147ee:	int3   
 10147ef:	int3   
 10147f0:	int3   
 10147f1:	int3   
 10147f2:	int3   
 10147f3:	int3   
 10147f4:	int3   
 10147f5:	int3   
 10147f6:	int3   
 10147f7:	int3   
 10147f8:	int3   
 10147f9:	int3   
 10147fa:	int3   
 10147fb:	int3   
 10147fc:	int3   
 10147fd:	int3   
 10147fe:	int3   
 10147ff:	int3   
 1014800:	mov    rcx,QWORD PTR [rdx+0x180]
 1014807:	jmp    0x1006070
 101480c:	int3   
 101480d:	int3   
 101480e:	int3   
 101480f:	int3   
 1014810:	lea    rcx,[rdx+0x130]
 1014817:	jmp    0x10061c0
 101481c:	int3   
 101481d:	int3   
 101481e:	int3   
 101481f:	int3   
 1014820:	mov    rcx,QWORD PTR [rdx+0x180]
 1014827:	jmp    0x1006070
 101482c:	int3   
 101482d:	int3   
 101482e:	int3   
 101482f:	int3   
 1014830:	int3   
 1014831:	int3   
 1014832:	int3   
 1014833:	int3   
 1014834:	int3   
 1014835:	int3   
 1014836:	int3   
 1014837:	int3   
 1014838:	int3   
 1014839:	int3   
 101483a:	int3   
 101483b:	int3   
 101483c:	int3   
 101483d:	int3   
 101483e:	int3   
 101483f:	int3   
 1014840:	mov    rcx,QWORD PTR [rdx+0x120]
 1014847:	jmp    0x1006070
 101484c:	int3   
 101484d:	int3   
 101484e:	int3   
 101484f:	int3   
 1014850:	lea    rcx,[rdx+0xb8]
 1014857:	jmp    0x10061c0
 101485c:	int3   
 101485d:	int3   
 101485e:	int3   
 101485f:	int3   
 1014860:	mov    rcx,QWORD PTR [rdx+0x120]
 1014867:	jmp    0x1006070
 101486c:	int3   
 101486d:	int3   
 101486e:	int3   
 101486f:	int3   
 1014870:	int3   
 1014871:	int3   
 1014872:	int3   
 1014873:	int3   
 1014874:	int3   
 1014875:	int3   
 1014876:	int3   
 1014877:	int3   
 1014878:	int3   
 1014879:	int3   
 101487a:	int3   
 101487b:	int3   
 101487c:	int3   
 101487d:	int3   
 101487e:	int3   
 101487f:	int3   
 1014880:	mov    rcx,QWORD PTR [rdx+0x1c0]
 1014887:	jmp    0x1006070
 101488c:	int3   
 101488d:	int3   
 101488e:	int3   
 101488f:	int3   
 1014890:	lea    rcx,[rdx+0xc8]
 1014897:	jmp    0x10061c0
 101489c:	int3   
 101489d:	int3   
 101489e:	int3   
 101489f:	int3   
 10148a0:	mov    rcx,QWORD PTR [rdx+0x1c0]
 10148a7:	jmp    0x1006070
 10148ac:	int3   
 10148ad:	int3   
 10148ae:	int3   
 10148af:	int3   
 10148b0:	mov    rcx,QWORD PTR [rdx+0x1c8]
 10148b7:	jmp    0x1006070
 10148bc:	int3   
 10148bd:	int3   
 10148be:	int3   
 10148bf:	int3   
 10148c0:	lea    rcx,[rdx+0x40]
 10148c7:	jmp    0x100d1c0
 10148cc:	int3   
 10148cd:	int3   
 10148ce:	int3   
 10148cf:	int3   
 10148d0:	lea    rcx,[rdx+0x40]
 10148d7:	jmp    0x100f420
 10148dc:	int3   
 10148dd:	int3   
 10148de:	int3   
 10148df:	int3   
 10148e0:	lea    rcx,[rdx+0x40]
 10148e7:	jmp    0x100f490
 10148ec:	int3   
 10148ed:	int3   
 10148ee:	int3   
 10148ef:	int3   
 10148f0:	lea    rcx,[rdx+0x40]
 10148f7:	jmp    0x100f550
 10148fc:	int3   
 10148fd:	int3   
 10148fe:	int3   
 10148ff:	int3   
 1014900:	mov    rcx,QWORD PTR [rdx+0x1c0]
 1014907:	jmp    0x1006070
 101490c:	int3   
 101490d:	int3   
 101490e:	int3   
 101490f:	int3   
 1014910:	mov    rcx,QWORD PTR [rdx+0x1c8]
 1014917:	jmp    0x1006070
 101491c:	int3   
 101491d:	int3   
 101491e:	int3   
 101491f:	int3   
 1014920:	lea    rcx,[rdx+0x40]
 1014927:	jmp    0x100f490
 101492c:	int3   
 101492d:	int3   
 101492e:	int3   
 101492f:	int3   
 1014930:	lea    rcx,[rdx+0x40]
 1014937:	jmp    0x100f420
 101493c:	int3   
 101493d:	int3   
 101493e:	int3   
 101493f:	int3   
 1014940:	lea    rcx,[rdx+0x40]
 1014947:	jmp    0x100d1c0
 101494c:	int3   
 101494d:	int3   
 101494e:	int3   
 101494f:	int3   
 1014950:	int3   
 1014951:	int3   
 1014952:	int3   
 1014953:	int3   
 1014954:	int3   
 1014955:	int3   
 1014956:	int3   
 1014957:	int3   
 1014958:	int3   
 1014959:	int3   
 101495a:	int3   
 101495b:	int3   
 101495c:	int3   
 101495d:	int3   
 101495e:	int3   
 101495f:	int3   
 1014960:	mov    rcx,QWORD PTR [rdx+0x140]
 1014967:	jmp    0x1006070
 101496c:	int3   
 101496d:	int3   
 101496e:	int3   
 101496f:	int3   
 1014970:	lea    rcx,[rdx+0xd8]
 1014977:	jmp    0x10061c0
 101497c:	int3   
 101497d:	int3   
 101497e:	int3   
 101497f:	int3   
 1014980:	lea    rcx,[rdx+0xb8]
 1014987:	jmp    0x100d1c0
 101498c:	int3   
 101498d:	int3   
 101498e:	int3   
 101498f:	int3   
 1014990:	lea    rcx,[rdx+0xb8]
 1014997:	jmp    0x100d210
 101499c:	int3   
 101499d:	int3   
 101499e:	int3   
 101499f:	int3   
 10149a0:	lea    rcx,[rdx+0xb8]
 10149a7:	jmp    0x100d680
 10149ac:	int3   
 10149ad:	int3   
 10149ae:	int3   
 10149af:	int3   
 10149b0:	mov    rcx,QWORD PTR [rdx+0x140]
 10149b7:	jmp    0x1006070
 10149bc:	int3   
 10149bd:	int3   
 10149be:	int3   
 10149bf:	int3   
 10149c0:	lea    rcx,[rdx+0xc8]
 10149c7:	jmp    0x100d1c0
 10149cc:	int3   
 10149cd:	int3   
 10149ce:	int3   
 10149cf:	int3   
 10149d0:	lea    rcx,[rdx+0xc8]
 10149d7:	jmp    0x100d210
 10149dc:	int3   
 10149dd:	int3   
 10149de:	int3   
 10149df:	int3   
 10149e0:	lea    rcx,[rdx+0xc8]
 10149e7:	jmp    0x100d680
 10149ec:	int3   
 10149ed:	int3   
 10149ee:	int3   
 10149ef:	int3   
 10149f0:	mov    rcx,QWORD PTR [rdx+0x140]
 10149f7:	jmp    0x1006070
 10149fc:	int3   
 10149fd:	int3   
 10149fe:	int3   
 10149ff:	int3   
 1014a00:	mov    rcx,QWORD PTR [rdx+0x140]
 1014a07:	jmp    0x1006070
 1014a0c:	int3   
 1014a0d:	int3   
 1014a0e:	int3   
 1014a0f:	int3   
 1014a10:	mov    rcx,QWORD PTR [rdx+0x140]
 1014a17:	jmp    0x1006070
 1014a1c:	int3   
 1014a1d:	int3   
 1014a1e:	int3   
 1014a1f:	int3   
 1014a20:	lea    rcx,[rdx+0xc8]
 1014a27:	jmp    0x100d210
 1014a2c:	int3   
 1014a2d:	int3   
 1014a2e:	int3   
 1014a2f:	int3   
 1014a30:	lea    rcx,[rdx+0xc8]
 1014a37:	jmp    0x100d1c0
 1014a3c:	int3   
 1014a3d:	int3   
 1014a3e:	int3   
 1014a3f:	int3   
 1014a40:	lea    rcx,[rdx+0xb8]
 1014a47:	jmp    0x100d210
 1014a4c:	int3   
 1014a4d:	int3   
 1014a4e:	int3   
 1014a4f:	int3   
 1014a50:	lea    rcx,[rdx+0xb8]
 1014a57:	jmp    0x100d1c0
 1014a5c:	int3   
 1014a5d:	int3   
 1014a5e:	int3   
 1014a5f:	int3   
 1014a60:	int3   
 1014a61:	int3   
 1014a62:	int3   
 1014a63:	int3   
 1014a64:	int3   
 1014a65:	int3   
 1014a66:	int3   
 1014a67:	int3   
 1014a68:	int3   
 1014a69:	int3   
 1014a6a:	int3   
 1014a6b:	int3   
 1014a6c:	int3   
 1014a6d:	int3   
 1014a6e:	int3   
 1014a6f:	int3   
 1014a70:	mov    rcx,QWORD PTR [rdx+0xb8]
 1014a77:	jmp    0x1006070
 1014a7c:	int3   
 1014a7d:	int3   
 1014a7e:	int3   
 1014a7f:	int3   
 1014a80:	mov    rcx,QWORD PTR [rdx+0xc0]
 1014a87:	jmp    0x1006070
 1014a8c:	int3   
 1014a8d:	int3   
 1014a8e:	int3   
 1014a8f:	int3   
 1014a90:	int3   
 1014a91:	int3   
 1014a92:	int3   
 1014a93:	int3   
 1014a94:	int3   
 1014a95:	int3   
 1014a96:	int3   
 1014a97:	int3   
 1014a98:	int3   
 1014a99:	int3   
 1014a9a:	int3   
 1014a9b:	int3   
 1014a9c:	int3   
 1014a9d:	int3   
 1014a9e:	int3   
 1014a9f:	int3   
 1014aa0:	mov    rcx,QWORD PTR [rdx+0x68]
 1014aa7:	jmp    0x1006070
 1014aac:	int3   
 1014aad:	int3   
 1014aae:	int3   
 1014aaf:	int3   
 1014ab0:	lea    rcx,[rdx+0x40]
 1014ab7:	jmp    0x10061c0
 1014abc:	int3   
 1014abd:	int3   
 1014abe:	int3   
 1014abf:	int3   
 1014ac0:	mov    rcx,QWORD PTR [rdx+0xe8]
 1014ac7:	jmp    0x1006070
 1014acc:	int3   
 1014acd:	int3   
 1014ace:	int3   
 1014acf:	int3   
 1014ad0:	int3   
 1014ad1:	int3   
 1014ad2:	int3   
 1014ad3:	int3   
 1014ad4:	int3   
 1014ad5:	int3   
 1014ad6:	int3   
 1014ad7:	int3   
 1014ad8:	int3   
 1014ad9:	int3   
 1014ada:	int3   
 1014adb:	int3   
 1014adc:	int3   
 1014add:	int3   
 1014ade:	int3   
 1014adf:	int3   
 1014ae0:	mov    rcx,QWORD PTR [rdx+0x20]
 1014ae7:	add    rcx,0x10
 1014aeb:	jmp    0x100fa10
 1014af0:	int3   
 1014af1:	int3   
 1014af2:	int3   
 1014af3:	int3   
 1014af4:	int3   
 1014af5:	int3   
 1014af6:	int3   
 1014af7:	int3   
 1014af8:	int3   
 1014af9:	int3   
 1014afa:	int3   
 1014afb:	int3   
 1014afc:	int3   
 1014afd:	int3   
 1014afe:	int3   
 1014aff:	int3   
 1014b00:	mov    rcx,QWORD PTR [rdx+0x40]
 1014b07:	add    rcx,0x10
 1014b0b:	jmp    0x100fa10
 1014b10:	int3   
 1014b11:	int3   
 1014b12:	int3   
 1014b13:	int3   
 1014b14:	int3   
 1014b15:	int3   
 1014b16:	int3   
 1014b17:	int3   
 1014b18:	int3   
 1014b19:	int3   
 1014b1a:	int3   
 1014b1b:	int3   
 1014b1c:	int3   
 1014b1d:	int3   
 1014b1e:	int3   
 1014b1f:	int3   
 1014b20:	mov    rcx,QWORD PTR [rdx+0x110]
 1014b27:	jmp    0x1006070
 1014b2c:	int3   
 1014b2d:	int3   
 1014b2e:	int3   
 1014b2f:	int3   
 1014b30:	lea    rcx,[rdx+0xb8]
 1014b37:	jmp    0x10061c0
 1014b3c:	int3   
 1014b3d:	int3   
 1014b3e:	int3   
 1014b3f:	int3   
 1014b40:	mov    rcx,QWORD PTR [rdx+0x110]
 1014b47:	jmp    0x1006070
 1014b4c:	int3   
 1014b4d:	int3   
 1014b4e:	int3   
 1014b4f:	int3   
 1014b50:	int3   
 1014b51:	int3   
 1014b52:	int3   
 1014b53:	int3   
 1014b54:	int3   
 1014b55:	int3   
 1014b56:	int3   
 1014b57:	int3   
 1014b58:	int3   
 1014b59:	int3   
 1014b5a:	int3   
 1014b5b:	int3   
 1014b5c:	int3   
 1014b5d:	int3   
 1014b5e:	int3   
 1014b5f:	int3   
 1014b60:	mov    rcx,QWORD PTR [rdx+0xd0]
 1014b67:	jmp    0x1006070
 1014b6c:	int3   
 1014b6d:	int3   
 1014b6e:	int3   
 1014b6f:	int3   
 1014b70:	lea    rcx,[rdx+0xe0]
 1014b77:	jmp    0x10061c0
 1014b7c:	int3   
 1014b7d:	int3   
 1014b7e:	int3   
 1014b7f:	int3   
 1014b80:	mov    rcx,QWORD PTR [rdx+0xd0]
 1014b87:	jmp    0x1006070
 1014b8c:	int3   
 1014b8d:	int3   
 1014b8e:	int3   
 1014b8f:	int3   
 1014b90:	mov    rcx,QWORD PTR [rdx+0xd0]
 1014b97:	jmp    0x1006070
 1014b9c:	int3   
 1014b9d:	int3   
 1014b9e:	int3   
 1014b9f:	int3   
 1014ba0:	mov    rcx,QWORD PTR [rdx+0xd0]
 1014ba7:	jmp    0x1006070
 1014bac:	int3   
 1014bad:	int3   
 1014bae:	int3   
 1014baf:	int3   
 1014bb0:	mov    rcx,QWORD PTR [rdx+0xd0]
 1014bb7:	jmp    0x1006070
 1014bbc:	int3   
 1014bbd:	int3   
 1014bbe:	int3   
 1014bbf:	int3   
 1014bc0:	mov    rcx,QWORD PTR [rdx+0xd0]
 1014bc7:	jmp    0x1006070
 1014bcc:	int3   
 1014bcd:	int3   
 1014bce:	int3   
 1014bcf:	int3   
 1014bd0:	int3   
 1014bd1:	int3   
 1014bd2:	int3   
 1014bd3:	int3   
 1014bd4:	int3   
 1014bd5:	int3   
 1014bd6:	int3   
 1014bd7:	int3   
 1014bd8:	int3   
 1014bd9:	int3   
 1014bda:	int3   
 1014bdb:	int3   
 1014bdc:	int3   
 1014bdd:	int3   
 1014bde:	int3   
 1014bdf:	int3   
 1014be0:	mov    rcx,QWORD PTR [rdx+0x40]
 1014be7:	jmp    0x1006070
 1014bec:	int3   
 1014bed:	int3   
 1014bee:	int3   
 1014bef:	int3   
 1014bf0:	lea    rcx,[rdx+0xc8]
 1014bf7:	jmp    0x10061c0
 1014bfc:	int3   
 1014bfd:	int3   
 1014bfe:	int3   
 1014bff:	int3   
 1014c00:	mov    rcx,QWORD PTR [rdx+0x40]
 1014c07:	jmp    0x1006070
 1014c0c:	int3   
 1014c0d:	int3   
 1014c0e:	int3   
 1014c0f:	int3   
 1014c10:	mov    rcx,QWORD PTR [rdx+0x40]
 1014c17:	jmp    0x1006070
 1014c1c:	int3   
 1014c1d:	int3   
 1014c1e:	int3   
 1014c1f:	int3   
 1014c20:	mov    rcx,QWORD PTR [rdx+0x40]
 1014c27:	jmp    0x1006070
 1014c2c:	int3   
 1014c2d:	int3   
 1014c2e:	int3   
 1014c2f:	int3   
 1014c30:	int3   
 1014c31:	int3   
 1014c32:	int3   
 1014c33:	int3   
 1014c34:	int3   
 1014c35:	int3   
 1014c36:	int3   
 1014c37:	int3   
 1014c38:	int3   
 1014c39:	int3   
 1014c3a:	int3   
 1014c3b:	int3   
 1014c3c:	int3   
 1014c3d:	int3   
 1014c3e:	int3   
 1014c3f:	int3   
 1014c40:	mov    rcx,QWORD PTR [rdx+0x68]
 1014c47:	jmp    0x1006070
 1014c4c:	int3   
 1014c4d:	int3   
 1014c4e:	int3   
 1014c4f:	int3   
 1014c50:	int3   
 1014c51:	int3   
 1014c52:	int3   
 1014c53:	int3   
 1014c54:	int3   
 1014c55:	int3   
 1014c56:	int3   
 1014c57:	int3   
 1014c58:	int3   
 1014c59:	int3   
 1014c5a:	int3   
 1014c5b:	int3   
 1014c5c:	int3   
 1014c5d:	int3   
 1014c5e:	int3   
 1014c5f:	int3   
 1014c60:	mov    rcx,QWORD PTR [rdx+0xb8]
 1014c67:	jmp    0x1006070
 1014c6c:	int3   
 1014c6d:	int3   
 1014c6e:	int3   
 1014c6f:	int3   
 1014c70:	lea    rcx,[rdx+0xc0]
 1014c77:	jmp    0x10061c0
 1014c7c:	int3   
 1014c7d:	int3   
 1014c7e:	int3   
 1014c7f:	int3   
 1014c80:	mov    rcx,QWORD PTR [rdx+0xb8]
 1014c87:	jmp    0x1006070
 1014c8c:	int3   
 1014c8d:	int3   
 1014c8e:	int3   
 1014c8f:	int3   
 1014c90:	mov    rcx,QWORD PTR [rdx+0xb8]
 1014c97:	jmp    0x1006070
 1014c9c:	int3   
 1014c9d:	int3   
 1014c9e:	int3   
 1014c9f:	int3   
 1014ca0:	mov    rcx,QWORD PTR [rdx+0xb8]
 1014ca7:	jmp    0x1006070
 1014cac:	int3   
 1014cad:	int3   
 1014cae:	int3   
 1014caf:	int3   
 1014cb0:	mov    rcx,QWORD PTR [rdx+0xb8]
 1014cb7:	jmp    0x1006070
 1014cbc:	int3   
 1014cbd:	int3   
 1014cbe:	int3   
 1014cbf:	int3   
 1014cc0:	mov    rcx,QWORD PTR [rdx+0xb8]
 1014cc7:	jmp    0x1006070
 1014ccc:	int3   
 1014ccd:	int3   
 1014cce:	int3   
 1014ccf:	int3   
 1014cd0:	mov    rcx,QWORD PTR [rdx+0xb8]
 1014cd7:	jmp    0x1006070
 1014cdc:	int3   
 1014cdd:	int3   
 1014cde:	int3   
 1014cdf:	int3   
 1014ce0:	mov    rcx,QWORD PTR [rdx+0xb8]
 1014ce7:	jmp    0x1006070
 1014cec:	int3   
 1014ced:	int3   
 1014cee:	int3   
 1014cef:	int3   
 1014cf0:	int3   
 1014cf1:	int3   
 1014cf2:	int3   
 1014cf3:	int3   
 1014cf4:	int3   
 1014cf5:	int3   
 1014cf6:	int3   
 1014cf7:	int3   
 1014cf8:	int3   
 1014cf9:	int3   
 1014cfa:	int3   
 1014cfb:	int3   
 1014cfc:	int3   
 1014cfd:	int3   
 1014cfe:	int3   
 1014cff:	int3   
 1014d00:	mov    rcx,QWORD PTR [rdx+0x88]
 1014d07:	jmp    0x1006070
 1014d0c:	int3   
 1014d0d:	int3   
 1014d0e:	int3   
 1014d0f:	int3   
 1014d10:	lea    rcx,[rdx+0x48]
 1014d17:	jmp    0x1006060
 1014d1c:	int3   
 1014d1d:	int3   
 1014d1e:	int3   
 1014d1f:	int3   
 1014d20:	int3   
 1014d21:	int3   
 1014d22:	int3   
 1014d23:	int3   
 1014d24:	int3   
 1014d25:	int3   
 1014d26:	int3   
 1014d27:	int3   
 1014d28:	int3   
 1014d29:	int3   
 1014d2a:	int3   
 1014d2b:	int3   
 1014d2c:	int3   
 1014d2d:	int3   
 1014d2e:	int3   
 1014d2f:	int3   
 1014d30:	mov    rcx,QWORD PTR [rdx+0x118]
 1014d37:	jmp    0x1006070
 1014d3c:	int3   
 1014d3d:	int3   
 1014d3e:	int3   
 1014d3f:	int3   
 1014d40:	lea    rcx,[rdx+0xc0]
 1014d47:	jmp    0x10061c0
 1014d4c:	int3   
 1014d4d:	int3   
 1014d4e:	int3   
 1014d4f:	int3   
 1014d50:	mov    QWORD PTR [rsp+0x10],rdx
 1014d55:	push   rbp
 1014d56:	sub    rsp,0x40
 1014d5a:	mov    rbp,rdx
 1014d5d:	mov    r9d,DWORD PTR [rbp+0xec]
 1014d64:	mov    DWORD PTR [rbp+0xc0],r9d
 1014d6b:	lea    rax,[rbp+0x48]
 1014d6f:	mov    QWORD PTR [rbp+0x118],rax
 1014d76:	lea    rax,[rip+0xffffffffffff0413]        # 0x1005190
 1014d7d:	mov    QWORD PTR [rbp+0x48],rax
 1014d81:	lea    rax,[rip+0xfffffffffffefa28]        # 0x10047b0
 1014d88:	mov    QWORD PTR [rbp+0x50],rax
 1014d8c:	mov    DWORD PTR [rbp+0x58],0x14d
 1014d93:	mov    QWORD PTR [rbp+0x5c],0x2
 1014d9b:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1014da5:	xor    eax,eax
 1014da7:	mov    QWORD PTR [rbp+0x68],rax
 1014dab:	mov    QWORD PTR [rbp+0x70],rax
 1014daf:	mov    QWORD PTR [rbp+0x78],rax
 1014db3:	mov    QWORD PTR [rbp+0x80],rax
 1014dba:	mov    QWORD PTR [rbp+0x88],rax
 1014dc1:	mov    QWORD PTR [rbp+0x90],rax
 1014dc8:	mov    QWORD PTR [rbp+0x98],rax
 1014dcf:	mov    QWORD PTR [rbp+0xa0],rax
 1014dd6:	mov    QWORD PTR [rbp+0xa8],rax
 1014ddd:	mov    QWORD PTR [rbp+0xb0],rax
 1014de4:	lea    r8,[rip+0xffffffffffff0245]        # 0x1005030
 1014deb:	lea    rdx,[rbp+0x48]
 1014def:	lea    rcx,[rbp+0xc0]
 1014df6:	call   0x1006240
 1014dfb:	nop
 1014dfc:	lea    rax,[rip+0xffffffffffff3449]        # 0x100824c
 1014e03:	add    rsp,0x40
 1014e07:	pop    rbp
 1014e08:	ret    
 1014e09:	int3   
 1014e0a:	int3   
 1014e0b:	int3   
 1014e0c:	int3   
 1014e0d:	int3   
 1014e0e:	int3   
 1014e0f:	int3   
 1014e10:	mov    rcx,QWORD PTR [rdx+0x118]
 1014e17:	jmp    0x1006070
 1014e1c:	int3   
 1014e1d:	int3   
 1014e1e:	int3   
 1014e1f:	int3   
 1014e20:	mov    QWORD PTR [rsp+0x10],rdx
 1014e25:	push   rbp
 1014e26:	sub    rsp,0x40
 1014e2a:	mov    rbp,rdx
 1014e2d:	mov    r9d,DWORD PTR [rbp+0xe8]
 1014e34:	test   r9d,r9d
 1014e37:	jle    0x1014e44
 1014e39:	movzx  r9d,r9w
 1014e3d:	or     r9d,0x80070000
 1014e44:	mov    DWORD PTR [rbp+0xc0],r9d
 1014e4b:	lea    rax,[rbp+0x48]
 1014e4f:	mov    QWORD PTR [rbp+0x118],rax
 1014e56:	lea    rax,[rip+0xffffffffffff0333]        # 0x1005190
 1014e5d:	mov    QWORD PTR [rbp+0x48],rax
 1014e61:	lea    rax,[rip+0xfffffffffffef948]        # 0x10047b0
 1014e68:	mov    QWORD PTR [rbp+0x50],rax
 1014e6c:	mov    DWORD PTR [rbp+0x58],0x14d
 1014e73:	mov    QWORD PTR [rbp+0x5c],0x2
 1014e7b:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1014e85:	xor    eax,eax
 1014e87:	mov    QWORD PTR [rbp+0x68],rax
 1014e8b:	mov    QWORD PTR [rbp+0x70],rax
 1014e8f:	mov    QWORD PTR [rbp+0x78],rax
 1014e93:	mov    QWORD PTR [rbp+0x80],rax
 1014e9a:	mov    QWORD PTR [rbp+0x88],rax
 1014ea1:	mov    QWORD PTR [rbp+0x90],rax
 1014ea8:	mov    QWORD PTR [rbp+0x98],rax
 1014eaf:	mov    QWORD PTR [rbp+0xa0],rax
 1014eb6:	mov    QWORD PTR [rbp+0xa8],rax
 1014ebd:	mov    QWORD PTR [rbp+0xb0],rax
 1014ec4:	lea    r8,[rip+0xffffffffffff01b5]        # 0x1005080
 1014ecb:	lea    rdx,[rbp+0x48]
 1014ecf:	lea    rcx,[rbp+0xc0]
 1014ed6:	call   0x1006240
 1014edb:	nop
 1014edc:	lea    rax,[rip+0xffffffffffff3369]        # 0x100824c
 1014ee3:	add    rsp,0x40
 1014ee7:	pop    rbp
 1014ee8:	ret    
 1014ee9:	int3   
 1014eea:	int3   
 1014eeb:	int3   
 1014eec:	int3   
 1014eed:	int3   
 1014eee:	int3   
 1014eef:	int3   
 1014ef0:	mov    rcx,QWORD PTR [rdx+0x118]
 1014ef7:	jmp    0x1006070
 1014efc:	int3   
 1014efd:	int3   
 1014efe:	int3   
 1014eff:	int3   
 1014f00:	mov    QWORD PTR [rsp+0x10],rdx
 1014f05:	push   rbp
 1014f06:	sub    rsp,0x40
 1014f0a:	mov    rbp,rdx
 1014f0d:	mov    DWORD PTR [rbp+0xc0],0x8000ffff
 1014f17:	lea    rax,[rbp+0x48]
 1014f1b:	mov    QWORD PTR [rbp+0x118],rax
 1014f22:	lea    rax,[rip+0xffffffffffff0267]        # 0x1005190
 1014f29:	mov    QWORD PTR [rbp+0x48],rax
 1014f2d:	lea    rax,[rip+0xfffffffffffef87c]        # 0x10047b0
 1014f34:	mov    QWORD PTR [rbp+0x50],rax
 1014f38:	mov    DWORD PTR [rbp+0x58],0x14d
 1014f3f:	mov    QWORD PTR [rbp+0x5c],0x2
 1014f47:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1014f51:	xor    eax,eax
 1014f53:	mov    QWORD PTR [rbp+0x68],rax
 1014f57:	mov    QWORD PTR [rbp+0x70],rax
 1014f5b:	mov    QWORD PTR [rbp+0x78],rax
 1014f5f:	mov    QWORD PTR [rbp+0x80],rax
 1014f66:	mov    QWORD PTR [rbp+0x88],rax
 1014f6d:	mov    QWORD PTR [rbp+0x90],rax
 1014f74:	mov    QWORD PTR [rbp+0x98],rax
 1014f7b:	mov    QWORD PTR [rbp+0xa0],rax
 1014f82:	mov    QWORD PTR [rbp+0xa8],rax
 1014f89:	mov    QWORD PTR [rbp+0xb0],rax
 1014f90:	mov    r9d,0x8000ffff
 1014f96:	lea    r8,[rip+0xffffffffffff0143]        # 0x10050e0
 1014f9d:	lea    rdx,[rbp+0x48]
 1014fa1:	lea    rcx,[rbp+0xc0]
 1014fa8:	call   0x1006240
 1014fad:	xor    ecx,ecx
 1014faf:	call   0x100bd00
 1014fb4:	nop
 1014fb5:	lea    rax,[rip+0xffffffffffff3290]        # 0x100824c
 1014fbc:	add    rsp,0x40
 1014fc0:	pop    rbp
 1014fc1:	ret    
 1014fc2:	int3   
 1014fc3:	int3   
 1014fc4:	int3   
 1014fc5:	int3   
 1014fc6:	int3   
 1014fc7:	int3   
 1014fc8:	int3   
 1014fc9:	int3   
 1014fca:	int3   
 1014fcb:	int3   
 1014fcc:	int3   
 1014fcd:	int3   
 1014fce:	int3   
 1014fcf:	int3   
 1014fd0:	mov    rcx,QWORD PTR [rdx+0x118]
 1014fd7:	jmp    0x1006070
 1014fdc:	int3   
 1014fdd:	int3   
 1014fde:	int3   
 1014fdf:	int3   
 1014fe0:	int3   
 1014fe1:	int3   
 1014fe2:	int3   
 1014fe3:	int3   
 1014fe4:	int3   
 1014fe5:	int3   
 1014fe6:	int3   
 1014fe7:	int3   
 1014fe8:	int3   
 1014fe9:	int3   
 1014fea:	int3   
 1014feb:	int3   
 1014fec:	int3   
 1014fed:	int3   
 1014fee:	int3   
 1014fef:	int3   
 1014ff0:	mov    rcx,QWORD PTR [rdx+0xe0]
 1014ff7:	jmp    0x1006070
 1014ffc:	int3   
 1014ffd:	int3   
 1014ffe:	int3   
 1014fff:	int3   
 1015000:	mov    rcx,QWORD PTR [rdx+0x60]
 1015007:	jmp    0x1006070
 101500c:	int3   
 101500d:	int3   
 101500e:	int3   
 101500f:	int3   
 1015010:	lea    rcx,[rdx+0x128]
 1015017:	jmp    0x10061c0
 101501c:	int3   
 101501d:	int3   
 101501e:	int3   
 101501f:	int3   
 1015020:	mov    rcx,QWORD PTR [rdx+0x60]
 1015027:	jmp    0x1006070
 101502c:	int3   
 101502d:	int3   
 101502e:	int3   
 101502f:	int3   
 1015030:	mov    rcx,QWORD PTR [rdx+0x60]
 1015037:	jmp    0x1006070
 101503c:	int3   
 101503d:	int3   
 101503e:	int3   
 101503f:	int3   
 1015040:	mov    rcx,QWORD PTR [rdx+0x60]
 1015047:	jmp    0x1006070
 101504c:	int3   
 101504d:	int3   
 101504e:	int3   
 101504f:	int3   
 1015050:	mov    QWORD PTR [rsp+0x10],rdx
 1015055:	push   rbp
 1015056:	sub    rsp,0x50
 101505a:	mov    rbp,rdx
 101505d:	mov    r9d,DWORD PTR [rbp+0x198]
 1015064:	mov    DWORD PTR [rbp+0x128],r9d
 101506b:	lea    rax,[rbp+0x68]
 101506f:	mov    QWORD PTR [rbp+0x60],rax
 1015073:	lea    rax,[rip+0xfffffffffffefcb6]        # 0x1004d30
 101507a:	mov    QWORD PTR [rbp+0x68],rax
 101507e:	lea    rax,[rip+0xfffffffffffefc9b]        # 0x1004d20
 1015085:	mov    QWORD PTR [rbp+0x70],rax
 1015089:	mov    DWORD PTR [rbp+0x78],0x469
 1015090:	mov    QWORD PTR [rbp+0x7c],0x2
 1015098:	mov    DWORD PTR [rbp+0xd8],0x1000000
 10150a2:	xor    eax,eax
 10150a4:	mov    QWORD PTR [rbp+0x88],rax
 10150ab:	mov    QWORD PTR [rbp+0x90],rax
 10150b2:	mov    QWORD PTR [rbp+0x98],rax
 10150b9:	mov    QWORD PTR [rbp+0xa0],rax
 10150c0:	mov    QWORD PTR [rbp+0xa8],rax
 10150c7:	mov    QWORD PTR [rbp+0xb0],rax
 10150ce:	mov    QWORD PTR [rbp+0xb8],rax
 10150d5:	mov    QWORD PTR [rbp+0xc0],rax
 10150dc:	mov    QWORD PTR [rbp+0xc8],rax
 10150e3:	mov    QWORD PTR [rbp+0xd0],rax
 10150ea:	lea    r8,[rip+0xfffffffffffeff3f]        # 0x1005030
 10150f1:	lea    rdx,[rbp+0x68]
 10150f5:	lea    rcx,[rbp+0x128]
 10150fc:	call   0x1006240
 1015101:	nop
 1015102:	lea    rax,[rip+0xffffffffffff26c5]        # 0x10077ce
 1015109:	add    rsp,0x50
 101510d:	pop    rbp
 101510e:	ret    
 101510f:	int3   
 1015110:	mov    rcx,QWORD PTR [rdx+0x60]
 1015117:	jmp    0x1006070
 101511c:	int3   
 101511d:	int3   
 101511e:	int3   
 101511f:	int3   
 1015120:	mov    QWORD PTR [rsp+0x10],rdx
 1015125:	push   rbp
 1015126:	sub    rsp,0x50
 101512a:	mov    rbp,rdx
 101512d:	mov    r9d,DWORD PTR [rbp+0x170]
 1015134:	test   r9d,r9d
 1015137:	jle    0x1015144
 1015139:	movzx  r9d,r9w
 101513d:	or     r9d,0x80070000
 1015144:	mov    DWORD PTR [rbp+0x128],r9d
 101514b:	lea    rax,[rbp+0x68]
 101514f:	mov    QWORD PTR [rbp+0x60],rax
 1015153:	lea    rax,[rip+0xfffffffffffefbd6]        # 0x1004d30
 101515a:	mov    QWORD PTR [rbp+0x68],rax
 101515e:	lea    rax,[rip+0xfffffffffffefbbb]        # 0x1004d20
 1015165:	mov    QWORD PTR [rbp+0x70],rax
 1015169:	mov    DWORD PTR [rbp+0x78],0x469
 1015170:	mov    QWORD PTR [rbp+0x7c],0x2
 1015178:	mov    DWORD PTR [rbp+0xd8],0x1000000
 1015182:	xor    eax,eax
 1015184:	mov    QWORD PTR [rbp+0x88],rax
 101518b:	mov    QWORD PTR [rbp+0x90],rax
 1015192:	mov    QWORD PTR [rbp+0x98],rax
 1015199:	mov    QWORD PTR [rbp+0xa0],rax
 10151a0:	mov    QWORD PTR [rbp+0xa8],rax
 10151a7:	mov    QWORD PTR [rbp+0xb0],rax
 10151ae:	mov    QWORD PTR [rbp+0xb8],rax
 10151b5:	mov    QWORD PTR [rbp+0xc0],rax
 10151bc:	mov    QWORD PTR [rbp+0xc8],rax
 10151c3:	mov    QWORD PTR [rbp+0xd0],rax
 10151ca:	lea    r8,[rip+0xfffffffffffefeaf]        # 0x1005080
 10151d1:	lea    rdx,[rbp+0x68]
 10151d5:	lea    rcx,[rbp+0x128]
 10151dc:	call   0x1006240
 10151e1:	nop
 10151e2:	lea    rax,[rip+0xffffffffffff25e5]        # 0x10077ce
 10151e9:	add    rsp,0x50
 10151ed:	pop    rbp
 10151ee:	ret    
 10151ef:	int3   
 10151f0:	mov    rcx,QWORD PTR [rdx+0x60]
 10151f7:	jmp    0x1006070
 10151fc:	int3   
 10151fd:	int3   
 10151fe:	int3   
 10151ff:	int3   
 1015200:	mov    QWORD PTR [rsp+0x10],rdx
 1015205:	push   rbp
 1015206:	sub    rsp,0x50
 101520a:	mov    rbp,rdx
 101520d:	mov    DWORD PTR [rbp+0x128],0x8000ffff
 1015217:	lea    rax,[rbp+0x68]
 101521b:	mov    QWORD PTR [rbp+0x60],rax
 101521f:	lea    rax,[rip+0xfffffffffffefb0a]        # 0x1004d30
 1015226:	mov    QWORD PTR [rbp+0x68],rax
 101522a:	lea    rax,[rip+0xfffffffffffefaef]        # 0x1004d20
 1015231:	mov    QWORD PTR [rbp+0x70],rax
 1015235:	mov    DWORD PTR [rbp+0x78],0x469
 101523c:	mov    QWORD PTR [rbp+0x7c],0x2
 1015244:	mov    DWORD PTR [rbp+0xd8],0x1000000
 101524e:	xor    eax,eax
 1015250:	mov    QWORD PTR [rbp+0x88],rax
 1015257:	mov    QWORD PTR [rbp+0x90],rax
 101525e:	mov    QWORD PTR [rbp+0x98],rax
 1015265:	mov    QWORD PTR [rbp+0xa0],rax
 101526c:	mov    QWORD PTR [rbp+0xa8],rax
 1015273:	mov    QWORD PTR [rbp+0xb0],rax
 101527a:	mov    QWORD PTR [rbp+0xb8],rax
 1015281:	mov    QWORD PTR [rbp+0xc0],rax
 1015288:	mov    QWORD PTR [rbp+0xc8],rax
 101528f:	mov    QWORD PTR [rbp+0xd0],rax
 1015296:	mov    r9d,0x8000ffff
 101529c:	lea    r8,[rip+0xfffffffffffefe3d]        # 0x10050e0
 10152a3:	lea    rdx,[rbp+0x68]
 10152a7:	lea    rcx,[rbp+0x128]
 10152ae:	call   0x1006240
 10152b3:	xor    ecx,ecx
 10152b5:	call   0x100bd00
 10152ba:	nop
 10152bb:	lea    rax,[rip+0xffffffffffff250c]        # 0x10077ce
 10152c2:	add    rsp,0x50
 10152c6:	pop    rbp
 10152c7:	ret    
 10152c8:	int3   
 10152c9:	int3   
 10152ca:	int3   
 10152cb:	int3   
 10152cc:	int3   
 10152cd:	int3   
 10152ce:	int3   
 10152cf:	int3   
 10152d0:	mov    rcx,QWORD PTR [rdx+0x60]
 10152d7:	jmp    0x1006070
 10152dc:	int3   
 10152dd:	int3   
 10152de:	int3   
 10152df:	int3   
 10152e0:	int3   
 10152e1:	int3   
 10152e2:	int3   
 10152e3:	int3   
 10152e4:	int3   
 10152e5:	int3   
 10152e6:	int3   
 10152e7:	int3   
 10152e8:	int3   
 10152e9:	int3   
 10152ea:	int3   
 10152eb:	int3   
 10152ec:	int3   
 10152ed:	int3   
 10152ee:	int3   
 10152ef:	int3   
 10152f0:	mov    rcx,QWORD PTR [rdx+0x378]
 10152f7:	jmp    0x1006070
 10152fc:	int3   
 10152fd:	int3   
 10152fe:	int3   
 10152ff:	int3   
 1015300:	lea    rcx,[rdx+0x48]
 1015307:	jmp    0x10061c0
 101530c:	int3   
 101530d:	int3   
 101530e:	int3   
 101530f:	int3   
 1015310:	mov    rcx,QWORD PTR [rdx+0x378]
 1015317:	jmp    0x1006070
 101531c:	int3   
 101531d:	int3   
 101531e:	int3   
 101531f:	int3   
 1015320:	mov    rcx,QWORD PTR [rdx+0x380]
 1015327:	jmp    0x1006070
 101532c:	int3   
 101532d:	int3   
 101532e:	int3   
 101532f:	int3   
 1015330:	mov    QWORD PTR [rsp+0x10],rdx
 1015335:	push   rbp
 1015336:	sub    rsp,0x40
 101533a:	mov    rbp,rdx
 101533d:	mov    r9d,DWORD PTR [rbp+0x74]
 1015341:	mov    DWORD PTR [rbp+0x48],r9d
 1015345:	lea    rax,[rbp+0x78]
 1015349:	mov    QWORD PTR [rbp+0x378],rax
 1015350:	lea    rax,[rip+0xfffffffffffefe39]        # 0x1005190
 1015357:	mov    QWORD PTR [rbp+0x78],rax
 101535b:	lea    rax,[rip+0xfffffffffffef44e]        # 0x10047b0
 1015362:	mov    QWORD PTR [rbp+0x80],rax
 1015369:	mov    DWORD PTR [rbp+0x88],0x272
 1015373:	mov    QWORD PTR [rbp+0x8c],0x2
 101537e:	mov    DWORD PTR [rbp+0xe8],0x1000000
 1015388:	xor    eax,eax
 101538a:	mov    QWORD PTR [rbp+0x98],rax
 1015391:	mov    QWORD PTR [rbp+0xa0],rax
 1015398:	mov    QWORD PTR [rbp+0xa8],rax
 101539f:	mov    QWORD PTR [rbp+0xb0],rax
 10153a6:	mov    QWORD PTR [rbp+0xb8],rax
 10153ad:	mov    QWORD PTR [rbp+0xc0],rax
 10153b4:	mov    QWORD PTR [rbp+0xc8],rax
 10153bb:	mov    QWORD PTR [rbp+0xd0],rax
 10153c2:	mov    QWORD PTR [rbp+0xd8],rax
 10153c9:	mov    QWORD PTR [rbp+0xe0],rax
 10153d0:	lea    r8,[rip+0xfffffffffffefc59]        # 0x1005030
 10153d7:	lea    rdx,[rbp+0x78]
 10153db:	lea    rcx,[rbp+0x48]
 10153df:	call   0x1006240
 10153e4:	nop
 10153e5:	lea    rax,[rip+0xffffffffffff4086]        # 0x1009472
 10153ec:	add    rsp,0x40
 10153f0:	pop    rbp
 10153f1:	ret    
 10153f2:	int3   
 10153f3:	int3   
 10153f4:	int3   
 10153f5:	int3   
 10153f6:	int3   
 10153f7:	int3   
 10153f8:	int3   
 10153f9:	int3   
 10153fa:	int3   
 10153fb:	int3   
 10153fc:	int3   
 10153fd:	int3   
 10153fe:	int3   
 10153ff:	int3   
 1015400:	mov    rcx,QWORD PTR [rdx+0x378]
 1015407:	jmp    0x1006070
 101540c:	int3   
 101540d:	int3   
 101540e:	int3   
 101540f:	int3   
 1015410:	mov    QWORD PTR [rsp+0x10],rdx
 1015415:	push   rbp
 1015416:	sub    rsp,0x40
 101541a:	mov    rbp,rdx
 101541d:	mov    r9d,DWORD PTR [rbp+0x70]
 1015421:	test   r9d,r9d
 1015424:	jle    0x1015431
 1015426:	movzx  r9d,r9w
 101542a:	or     r9d,0x80070000
 1015431:	mov    DWORD PTR [rbp+0x48],r9d
 1015435:	lea    rax,[rbp+0xf0]
 101543c:	mov    QWORD PTR [rbp+0x378],rax
 1015443:	lea    rax,[rip+0xfffffffffffefd46]        # 0x1005190
 101544a:	mov    QWORD PTR [rbp+0xf0],rax
 1015451:	lea    rax,[rip+0xfffffffffffef358]        # 0x10047b0
 1015458:	mov    QWORD PTR [rbp+0xf8],rax
 101545f:	mov    DWORD PTR [rbp+0x100],0x272
 1015469:	mov    QWORD PTR [rbp+0x104],0x2
 1015474:	mov    DWORD PTR [rbp+0x160],0x1000000
 101547e:	xor    eax,eax
 1015480:	mov    QWORD PTR [rbp+0x110],rax
 1015487:	mov    QWORD PTR [rbp+0x118],rax
 101548e:	mov    QWORD PTR [rbp+0x120],rax
 1015495:	mov    QWORD PTR [rbp+0x128],rax
 101549c:	mov    QWORD PTR [rbp+0x130],rax
 10154a3:	mov    QWORD PTR [rbp+0x138],rax
 10154aa:	mov    QWORD PTR [rbp+0x140],rax
 10154b1:	mov    QWORD PTR [rbp+0x148],rax
 10154b8:	mov    QWORD PTR [rbp+0x150],rax
 10154bf:	mov    QWORD PTR [rbp+0x158],rax
 10154c6:	lea    r8,[rip+0xfffffffffffefbb3]        # 0x1005080
 10154cd:	lea    rdx,[rbp+0xf0]
 10154d4:	lea    rcx,[rbp+0x48]
 10154d8:	call   0x1006240
 10154dd:	nop
 10154de:	lea    rax,[rip+0xffffffffffff3f8d]        # 0x1009472
 10154e5:	add    rsp,0x40
 10154e9:	pop    rbp
 10154ea:	ret    
 10154eb:	int3   
 10154ec:	int3   
 10154ed:	int3   
 10154ee:	int3   
 10154ef:	int3   
 10154f0:	mov    rcx,QWORD PTR [rdx+0x378]
 10154f7:	jmp    0x1006070
 10154fc:	int3   
 10154fd:	int3   
 10154fe:	int3   
 10154ff:	int3   
 1015500:	mov    QWORD PTR [rsp+0x10],rdx
 1015505:	push   rbp
 1015506:	sub    rsp,0x40
 101550a:	mov    rbp,rdx
 101550d:	mov    DWORD PTR [rbp+0x48],0x8000ffff
 1015514:	lea    rax,[rbp+0x168]
 101551b:	mov    QWORD PTR [rbp+0x378],rax
 1015522:	lea    rax,[rip+0xfffffffffffefc67]        # 0x1005190
 1015529:	mov    QWORD PTR [rbp+0x168],rax
 1015530:	lea    rax,[rip+0xfffffffffffef279]        # 0x10047b0
 1015537:	mov    QWORD PTR [rbp+0x170],rax
 101553e:	mov    DWORD PTR [rbp+0x178],0x272
 1015548:	mov    QWORD PTR [rbp+0x17c],0x2
 1015553:	mov    DWORD PTR [rbp+0x1d8],0x1000000
 101555d:	xor    eax,eax
 101555f:	mov    QWORD PTR [rbp+0x188],rax
 1015566:	mov    QWORD PTR [rbp+0x190],rax
 101556d:	mov    QWORD PTR [rbp+0x198],rax
 1015574:	mov    QWORD PTR [rbp+0x1a0],rax
 101557b:	mov    QWORD PTR [rbp+0x1a8],rax
 1015582:	mov    QWORD PTR [rbp+0x1b0],rax
 1015589:	mov    QWORD PTR [rbp+0x1b8],rax
 1015590:	mov    QWORD PTR [rbp+0x1c0],rax
 1015597:	mov    QWORD PTR [rbp+0x1c8],rax
 101559e:	mov    QWORD PTR [rbp+0x1d0],rax
 10155a5:	mov    r9d,0x8000ffff
 10155ab:	lea    r8,[rip+0xfffffffffffefb2e]        # 0x10050e0
 10155b2:	lea    rdx,[rbp+0x168]
 10155b9:	lea    rcx,[rbp+0x48]
 10155bd:	call   0x1006240
 10155c2:	xor    ecx,ecx
 10155c4:	call   0x100bd00
 10155c9:	nop
 10155ca:	lea    rax,[rip+0xffffffffffff3eb5]        # 0x1009486
 10155d1:	add    rsp,0x40
 10155d5:	pop    rbp
 10155d6:	ret    
 10155d7:	int3   
 10155d8:	int3   
 10155d9:	int3   
 10155da:	int3   
 10155db:	int3   
 10155dc:	int3   
 10155dd:	int3   
 10155de:	int3   
 10155df:	int3   
 10155e0:	mov    rcx,QWORD PTR [rdx+0x378]
 10155e7:	jmp    0x1006070
 10155ec:	int3   
 10155ed:	int3   
 10155ee:	int3   
 10155ef:	int3   
 10155f0:	int3   
 10155f1:	int3   
 10155f2:	int3   
 10155f3:	int3   
 10155f4:	int3   
 10155f5:	int3   
 10155f6:	int3   
 10155f7:	int3   
 10155f8:	int3   
 10155f9:	int3   
 10155fa:	int3   
 10155fb:	int3   
 10155fc:	int3   
 10155fd:	int3   
 10155fe:	int3   
 10155ff:	int3   
 1015600:	mov    rcx,QWORD PTR [rdx+0x118]
 1015607:	jmp    0x1006070
 101560c:	int3   
 101560d:	int3   
 101560e:	int3   
 101560f:	int3   
 1015610:	lea    rcx,[rdx+0xc0]
 1015617:	jmp    0x10061c0
 101561c:	int3   
 101561d:	int3   
 101561e:	int3   
 101561f:	int3   
 1015620:	mov    rcx,QWORD PTR [rdx+0x118]
 1015627:	jmp    0x1006070
 101562c:	int3   
 101562d:	int3   
 101562e:	int3   
 101562f:	int3   
 1015630:	mov    QWORD PTR [rsp+0x10],rdx
 1015635:	push   rbp
 1015636:	sub    rsp,0x40
 101563a:	mov    rbp,rdx
 101563d:	mov    r9d,DWORD PTR [rbp+0xec]
 1015644:	mov    DWORD PTR [rbp+0xc0],r9d
 101564b:	lea    rax,[rbp+0x48]
 101564f:	mov    QWORD PTR [rbp+0x118],rax
 1015656:	lea    rax,[rip+0xfffffffffffefb33]        # 0x1005190
 101565d:	mov    QWORD PTR [rbp+0x48],rax
 1015661:	lea    rax,[rip+0xfffffffffffef148]        # 0x10047b0
 1015668:	mov    QWORD PTR [rbp+0x50],rax
 101566c:	mov    DWORD PTR [rbp+0x58],0x248
 1015673:	mov    QWORD PTR [rbp+0x5c],0x2
 101567b:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1015685:	xor    eax,eax
 1015687:	mov    QWORD PTR [rbp+0x68],rax
 101568b:	mov    QWORD PTR [rbp+0x70],rax
 101568f:	mov    QWORD PTR [rbp+0x78],rax
 1015693:	mov    QWORD PTR [rbp+0x80],rax
 101569a:	mov    QWORD PTR [rbp+0x88],rax
 10156a1:	mov    QWORD PTR [rbp+0x90],rax
 10156a8:	mov    QWORD PTR [rbp+0x98],rax
 10156af:	mov    QWORD PTR [rbp+0xa0],rax
 10156b6:	mov    QWORD PTR [rbp+0xa8],rax
 10156bd:	mov    QWORD PTR [rbp+0xb0],rax
 10156c4:	lea    r8,[rip+0xfffffffffffef965]        # 0x1005030
 10156cb:	lea    rdx,[rbp+0x48]
 10156cf:	lea    rcx,[rbp+0xc0]
 10156d6:	call   0x1006240
 10156db:	nop
 10156dc:	lea    rax,[rip+0xffffffffffff3add]        # 0x10091c0
 10156e3:	add    rsp,0x40
 10156e7:	pop    rbp
 10156e8:	ret    
 10156e9:	int3   
 10156ea:	int3   
 10156eb:	int3   
 10156ec:	int3   
 10156ed:	int3   
 10156ee:	int3   
 10156ef:	int3   
 10156f0:	mov    rcx,QWORD PTR [rdx+0x118]
 10156f7:	jmp    0x1006070
 10156fc:	int3   
 10156fd:	int3   
 10156fe:	int3   
 10156ff:	int3   
 1015700:	mov    QWORD PTR [rsp+0x10],rdx
 1015705:	push   rbp
 1015706:	sub    rsp,0x40
 101570a:	mov    rbp,rdx
 101570d:	mov    r9d,DWORD PTR [rbp+0xe8]
 1015714:	test   r9d,r9d
 1015717:	jle    0x1015724
 1015719:	movzx  r9d,r9w
 101571d:	or     r9d,0x80070000
 1015724:	mov    DWORD PTR [rbp+0xc0],r9d
 101572b:	lea    rax,[rbp+0x48]
 101572f:	mov    QWORD PTR [rbp+0x118],rax
 1015736:	lea    rax,[rip+0xfffffffffffefa53]        # 0x1005190
 101573d:	mov    QWORD PTR [rbp+0x48],rax
 1015741:	lea    rax,[rip+0xfffffffffffef068]        # 0x10047b0
 1015748:	mov    QWORD PTR [rbp+0x50],rax
 101574c:	mov    DWORD PTR [rbp+0x58],0x248
 1015753:	mov    QWORD PTR [rbp+0x5c],0x2
 101575b:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1015765:	xor    eax,eax
 1015767:	mov    QWORD PTR [rbp+0x68],rax
 101576b:	mov    QWORD PTR [rbp+0x70],rax
 101576f:	mov    QWORD PTR [rbp+0x78],rax
 1015773:	mov    QWORD PTR [rbp+0x80],rax
 101577a:	mov    QWORD PTR [rbp+0x88],rax
 1015781:	mov    QWORD PTR [rbp+0x90],rax
 1015788:	mov    QWORD PTR [rbp+0x98],rax
 101578f:	mov    QWORD PTR [rbp+0xa0],rax
 1015796:	mov    QWORD PTR [rbp+0xa8],rax
 101579d:	mov    QWORD PTR [rbp+0xb0],rax
 10157a4:	lea    r8,[rip+0xfffffffffffef8d5]        # 0x1005080
 10157ab:	lea    rdx,[rbp+0x48]
 10157af:	lea    rcx,[rbp+0xc0]
 10157b6:	call   0x1006240
 10157bb:	nop
 10157bc:	lea    rax,[rip+0xffffffffffff39fd]        # 0x10091c0
 10157c3:	add    rsp,0x40
 10157c7:	pop    rbp
 10157c8:	ret    
 10157c9:	int3   
 10157ca:	int3   
 10157cb:	int3   
 10157cc:	int3   
 10157cd:	int3   
 10157ce:	int3   
 10157cf:	int3   
 10157d0:	mov    rcx,QWORD PTR [rdx+0x118]
 10157d7:	jmp    0x1006070
 10157dc:	int3   
 10157dd:	int3   
 10157de:	int3   
 10157df:	int3   
 10157e0:	mov    QWORD PTR [rsp+0x10],rdx
 10157e5:	push   rbp
 10157e6:	sub    rsp,0x40
 10157ea:	mov    rbp,rdx
 10157ed:	mov    DWORD PTR [rbp+0xc0],0x8000ffff
 10157f7:	lea    rax,[rbp+0x48]
 10157fb:	mov    QWORD PTR [rbp+0x118],rax
 1015802:	lea    rax,[rip+0xfffffffffffef987]        # 0x1005190
 1015809:	mov    QWORD PTR [rbp+0x48],rax
 101580d:	lea    rax,[rip+0xfffffffffffeef9c]        # 0x10047b0
 1015814:	mov    QWORD PTR [rbp+0x50],rax
 1015818:	mov    DWORD PTR [rbp+0x58],0x248
 101581f:	mov    QWORD PTR [rbp+0x5c],0x2
 1015827:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1015831:	xor    eax,eax
 1015833:	mov    QWORD PTR [rbp+0x68],rax
 1015837:	mov    QWORD PTR [rbp+0x70],rax
 101583b:	mov    QWORD PTR [rbp+0x78],rax
 101583f:	mov    QWORD PTR [rbp+0x80],rax
 1015846:	mov    QWORD PTR [rbp+0x88],rax
 101584d:	mov    QWORD PTR [rbp+0x90],rax
 1015854:	mov    QWORD PTR [rbp+0x98],rax
 101585b:	mov    QWORD PTR [rbp+0xa0],rax
 1015862:	mov    QWORD PTR [rbp+0xa8],rax
 1015869:	mov    QWORD PTR [rbp+0xb0],rax
 1015870:	mov    r9d,0x8000ffff
 1015876:	lea    r8,[rip+0xfffffffffffef863]        # 0x10050e0
 101587d:	lea    rdx,[rbp+0x48]
 1015881:	lea    rcx,[rbp+0xc0]
 1015888:	call   0x1006240
 101588d:	xor    ecx,ecx
 101588f:	call   0x100bd00
 1015894:	nop
 1015895:	lea    rax,[rip+0xffffffffffff3924]        # 0x10091c0
 101589c:	add    rsp,0x40
 10158a0:	pop    rbp
 10158a1:	ret    
 10158a2:	int3   
 10158a3:	int3   
 10158a4:	int3   
 10158a5:	int3   
 10158a6:	int3   
 10158a7:	int3   
 10158a8:	int3   
 10158a9:	int3   
 10158aa:	int3   
 10158ab:	int3   
 10158ac:	int3   
 10158ad:	int3   
 10158ae:	int3   
 10158af:	int3   
 10158b0:	mov    rcx,QWORD PTR [rdx+0x118]
 10158b7:	jmp    0x1006070
 10158bc:	int3   
 10158bd:	int3   
 10158be:	int3   
 10158bf:	int3   
 10158c0:	int3   
 10158c1:	int3   
 10158c2:	int3   
 10158c3:	int3   
 10158c4:	int3   
 10158c5:	int3   
 10158c6:	int3   
 10158c7:	int3   
 10158c8:	int3   
 10158c9:	int3   
 10158ca:	int3   
 10158cb:	int3   
 10158cc:	int3   
 10158cd:	int3   
 10158ce:	int3   
 10158cf:	int3   
 10158d0:	mov    rcx,QWORD PTR [rdx+0x220]
 10158d7:	jmp    0x1006070
 10158dc:	int3   
 10158dd:	int3   
 10158de:	int3   
 10158df:	int3   
 10158e0:	lea    rcx,[rdx+0xd0]
 10158e7:	jmp    0x10061c0
 10158ec:	int3   
 10158ed:	int3   
 10158ee:	int3   
 10158ef:	int3   
 10158f0:	lea    rcx,[rdx+0x100]
 10158f7:	jmp    0x1006070
 10158fc:	int3   
 10158fd:	int3   
 10158fe:	int3   
 10158ff:	int3   
 1015900:	mov    rcx,QWORD PTR [rdx+0x220]
 1015907:	jmp    0x1006070
 101590c:	int3   
 101590d:	int3   
 101590e:	int3   
 101590f:	int3   
 1015910:	mov    rcx,QWORD PTR [rdx+0x220]
 1015917:	jmp    0x1006070
 101591c:	int3   
 101591d:	int3   
 101591e:	int3   
 101591f:	int3   
 1015920:	mov    QWORD PTR [rsp+0x10],rdx
 1015925:	push   rbp
 1015926:	sub    rsp,0x40
 101592a:	mov    rbp,rdx
 101592d:	mov    r9d,DWORD PTR [rbp+0xfc]
 1015934:	mov    DWORD PTR [rbp+0xd0],r9d
 101593b:	lea    rax,[rbp+0x50]
 101593f:	mov    QWORD PTR [rbp+0x220],rax
 1015946:	lea    rax,[rip+0xfffffffffffef843]        # 0x1005190
 101594d:	mov    QWORD PTR [rbp+0x50],rax
 1015951:	lea    rax,[rip+0xfffffffffffeee58]        # 0x10047b0
 1015958:	mov    QWORD PTR [rbp+0x58],rax
 101595c:	mov    DWORD PTR [rbp+0x60],0xfb
 1015963:	mov    QWORD PTR [rbp+0x64],0x2
 101596b:	mov    DWORD PTR [rbp+0xc0],0x1000000
 1015975:	xor    eax,eax
 1015977:	mov    QWORD PTR [rbp+0x70],rax
 101597b:	mov    QWORD PTR [rbp+0x78],rax
 101597f:	mov    QWORD PTR [rbp+0x80],rax
 1015986:	mov    QWORD PTR [rbp+0x88],rax
 101598d:	mov    QWORD PTR [rbp+0x90],rax
 1015994:	mov    QWORD PTR [rbp+0x98],rax
 101599b:	mov    QWORD PTR [rbp+0xa0],rax
 10159a2:	mov    QWORD PTR [rbp+0xa8],rax
 10159a9:	mov    QWORD PTR [rbp+0xb0],rax
 10159b0:	mov    QWORD PTR [rbp+0xb8],rax
 10159b7:	lea    r8,[rip+0xfffffffffffef672]        # 0x1005030
 10159be:	lea    rdx,[rbp+0x50]
 10159c2:	lea    rcx,[rbp+0xd0]
 10159c9:	call   0x1006240
 10159ce:	nop
 10159cf:	lea    rax,[rip+0xffffffffffff2663]        # 0x1008039
 10159d6:	add    rsp,0x40
 10159da:	pop    rbp
 10159db:	ret    
 10159dc:	int3   
 10159dd:	int3   
 10159de:	int3   
 10159df:	int3   
 10159e0:	mov    rcx,QWORD PTR [rdx+0x220]
 10159e7:	jmp    0x1006070
 10159ec:	int3   
 10159ed:	int3   
 10159ee:	int3   
 10159ef:	int3   
 10159f0:	mov    QWORD PTR [rsp+0x10],rdx
 10159f5:	push   rbp
 10159f6:	sub    rsp,0x40
 10159fa:	mov    rbp,rdx
 10159fd:	mov    r9d,DWORD PTR [rbp+0xf8]
 1015a04:	test   r9d,r9d
 1015a07:	jle    0x1015a14
 1015a09:	movzx  r9d,r9w
 1015a0d:	or     r9d,0x80070000
 1015a14:	mov    DWORD PTR [rbp+0xd0],r9d
 1015a1b:	lea    rax,[rbp+0x50]
 1015a1f:	mov    QWORD PTR [rbp+0x220],rax
 1015a26:	lea    rax,[rip+0xfffffffffffef763]        # 0x1005190
 1015a2d:	mov    QWORD PTR [rbp+0x50],rax
 1015a31:	lea    rax,[rip+0xfffffffffffeed78]        # 0x10047b0
 1015a38:	mov    QWORD PTR [rbp+0x58],rax
 1015a3c:	mov    DWORD PTR [rbp+0x60],0xfb
 1015a43:	mov    QWORD PTR [rbp+0x64],0x2
 1015a4b:	mov    DWORD PTR [rbp+0xc0],0x1000000
 1015a55:	xor    eax,eax
 1015a57:	mov    QWORD PTR [rbp+0x70],rax
 1015a5b:	mov    QWORD PTR [rbp+0x78],rax
 1015a5f:	mov    QWORD PTR [rbp+0x80],rax
 1015a66:	mov    QWORD PTR [rbp+0x88],rax
 1015a6d:	mov    QWORD PTR [rbp+0x90],rax
 1015a74:	mov    QWORD PTR [rbp+0x98],rax
 1015a7b:	mov    QWORD PTR [rbp+0xa0],rax
 1015a82:	mov    QWORD PTR [rbp+0xa8],rax
 1015a89:	mov    QWORD PTR [rbp+0xb0],rax
 1015a90:	mov    QWORD PTR [rbp+0xb8],rax
 1015a97:	lea    r8,[rip+0xfffffffffffef5e2]        # 0x1005080
 1015a9e:	lea    rdx,[rbp+0x50]
 1015aa2:	lea    rcx,[rbp+0xd0]
 1015aa9:	call   0x1006240
 1015aae:	nop
 1015aaf:	lea    rax,[rip+0xffffffffffff2583]        # 0x1008039
 1015ab6:	add    rsp,0x40
 1015aba:	pop    rbp
 1015abb:	ret    
 1015abc:	int3   
 1015abd:	int3   
 1015abe:	int3   
 1015abf:	int3   
 1015ac0:	mov    rcx,QWORD PTR [rdx+0x220]
 1015ac7:	jmp    0x1006070
 1015acc:	int3   
 1015acd:	int3   
 1015ace:	int3   
 1015acf:	int3   
 1015ad0:	mov    QWORD PTR [rsp+0x10],rdx
 1015ad5:	push   rbp
 1015ad6:	sub    rsp,0x40
 1015ada:	mov    rbp,rdx
 1015add:	mov    DWORD PTR [rbp+0xd0],0x8000ffff
 1015ae7:	lea    rax,[rbp+0x50]
 1015aeb:	mov    QWORD PTR [rbp+0x220],rax
 1015af2:	lea    rax,[rip+0xfffffffffffef697]        # 0x1005190
 1015af9:	mov    QWORD PTR [rbp+0x50],rax
 1015afd:	lea    rax,[rip+0xfffffffffffeecac]        # 0x10047b0
 1015b04:	mov    QWORD PTR [rbp+0x58],rax
 1015b08:	mov    DWORD PTR [rbp+0x60],0xfb
 1015b0f:	mov    QWORD PTR [rbp+0x64],0x2
 1015b17:	mov    DWORD PTR [rbp+0xc0],0x1000000
 1015b21:	xor    eax,eax
 1015b23:	mov    QWORD PTR [rbp+0x70],rax
 1015b27:	mov    QWORD PTR [rbp+0x78],rax
 1015b2b:	mov    QWORD PTR [rbp+0x80],rax
 1015b32:	mov    QWORD PTR [rbp+0x88],rax
 1015b39:	mov    QWORD PTR [rbp+0x90],rax
 1015b40:	mov    QWORD PTR [rbp+0x98],rax
 1015b47:	mov    QWORD PTR [rbp+0xa0],rax
 1015b4e:	mov    QWORD PTR [rbp+0xa8],rax
 1015b55:	mov    QWORD PTR [rbp+0xb0],rax
 1015b5c:	mov    QWORD PTR [rbp+0xb8],rax
 1015b63:	mov    r9d,0x8000ffff
 1015b69:	lea    r8,[rip+0xfffffffffffef570]        # 0x10050e0
 1015b70:	lea    rdx,[rbp+0x50]
 1015b74:	lea    rcx,[rbp+0xd0]
 1015b7b:	call   0x1006240
 1015b80:	xor    ecx,ecx
 1015b82:	call   0x100bd00
 1015b87:	nop
 1015b88:	lea    rax,[rip+0xffffffffffff24c1]        # 0x1008050
 1015b8f:	add    rsp,0x40
 1015b93:	pop    rbp
 1015b94:	ret    
 1015b95:	int3   
 1015b96:	int3   
 1015b97:	int3   
 1015b98:	int3   
 1015b99:	int3   
 1015b9a:	int3   
 1015b9b:	int3   
 1015b9c:	int3   
 1015b9d:	int3   
 1015b9e:	int3   
 1015b9f:	int3   
 1015ba0:	mov    rcx,QWORD PTR [rdx+0x220]
 1015ba7:	jmp    0x1006070
 1015bac:	int3   
 1015bad:	int3   
 1015bae:	int3   
 1015baf:	int3   
 1015bb0:	int3   
 1015bb1:	int3   
 1015bb2:	int3   
 1015bb3:	int3   
 1015bb4:	int3   
 1015bb5:	int3   
 1015bb6:	int3   
 1015bb7:	int3   
 1015bb8:	int3   
 1015bb9:	int3   
 1015bba:	int3   
 1015bbb:	int3   
 1015bbc:	int3   
 1015bbd:	int3   
 1015bbe:	int3   
 1015bbf:	int3   
 1015bc0:	mov    rcx,QWORD PTR [rdx+0x2c8]
 1015bc7:	jmp    0x1006070
 1015bcc:	int3   
 1015bcd:	int3   
 1015bce:	int3   
 1015bcf:	int3   
 1015bd0:	lea    rcx,[rdx+0xd0]
 1015bd7:	jmp    0x10061c0
 1015bdc:	int3   
 1015bdd:	int3   
 1015bde:	int3   
 1015bdf:	int3   
 1015be0:	mov    rcx,QWORD PTR [rdx+0x2c8]
 1015be7:	jmp    0x1006070
 1015bec:	int3   
 1015bed:	int3   
 1015bee:	int3   
 1015bef:	int3   
 1015bf0:	lea    rcx,[rdx+0x100]
 1015bf7:	jmp    0x1006070
 1015bfc:	int3   
 1015bfd:	int3   
 1015bfe:	int3   
 1015bff:	int3   
 1015c00:	lea    rcx,[rdx+0x188]
 1015c07:	jmp    0x1006070
 1015c0c:	int3   
 1015c0d:	int3   
 1015c0e:	int3   
 1015c0f:	int3   
 1015c10:	mov    rcx,QWORD PTR [rdx+0x2c8]
 1015c17:	jmp    0x1006070
 1015c1c:	int3   
 1015c1d:	int3   
 1015c1e:	int3   
 1015c1f:	int3   
 1015c20:	mov    rcx,QWORD PTR [rdx+0x2c8]
 1015c27:	jmp    0x1006070
 1015c2c:	int3   
 1015c2d:	int3   
 1015c2e:	int3   
 1015c2f:	int3   
 1015c30:	mov    QWORD PTR [rsp+0x10],rdx
 1015c35:	push   rbp
 1015c36:	sub    rsp,0x40
 1015c3a:	mov    rbp,rdx
 1015c3d:	mov    r9d,DWORD PTR [rbp+0x178]
 1015c44:	mov    DWORD PTR [rbp+0xd0],r9d
 1015c4b:	lea    rax,[rbp+0x58]
 1015c4f:	mov    QWORD PTR [rbp+0x2c8],rax
 1015c56:	lea    rax,[rip+0xfffffffffffef533]        # 0x1005190
 1015c5d:	mov    QWORD PTR [rbp+0x58],rax
 1015c61:	lea    rax,[rip+0xfffffffffffeeb48]        # 0x10047b0
 1015c68:	mov    QWORD PTR [rbp+0x60],rax
 1015c6c:	mov    DWORD PTR [rbp+0x68],0x176
 1015c73:	mov    QWORD PTR [rbp+0x6c],0x2
 1015c7b:	mov    DWORD PTR [rbp+0xc8],0x1000000
 1015c85:	xor    eax,eax
 1015c87:	mov    QWORD PTR [rbp+0x78],rax
 1015c8b:	mov    QWORD PTR [rbp+0x80],rax
 1015c92:	mov    QWORD PTR [rbp+0x88],rax
 1015c99:	mov    QWORD PTR [rbp+0x90],rax
 1015ca0:	mov    QWORD PTR [rbp+0x98],rax
 1015ca7:	mov    QWORD PTR [rbp+0xa0],rax
 1015cae:	mov    QWORD PTR [rbp+0xa8],rax
 1015cb5:	mov    QWORD PTR [rbp+0xb0],rax
 1015cbc:	mov    QWORD PTR [rbp+0xb8],rax
 1015cc3:	mov    QWORD PTR [rbp+0xc0],rax
 1015cca:	lea    r8,[rip+0xfffffffffffef35f]        # 0x1005030
 1015cd1:	lea    rdx,[rbp+0x58]
 1015cd5:	lea    rcx,[rbp+0xd0]
 1015cdc:	call   0x1006240
 1015ce1:	nop
 1015ce2:	lea    rax,[rip+0xffffffffffff294e]        # 0x1008637
 1015ce9:	add    rsp,0x40
 1015ced:	pop    rbp
 1015cee:	ret    
 1015cef:	int3   
 1015cf0:	mov    rcx,QWORD PTR [rdx+0x2c8]
 1015cf7:	jmp    0x1006070
 1015cfc:	int3   
 1015cfd:	int3   
 1015cfe:	int3   
 1015cff:	int3   
 1015d00:	mov    QWORD PTR [rsp+0x10],rdx
 1015d05:	push   rbp
 1015d06:	sub    rsp,0x40
 1015d0a:	mov    rbp,rdx
 1015d0d:	mov    r9d,DWORD PTR [rbp+0xf8]
 1015d14:	test   r9d,r9d
 1015d17:	jle    0x1015d24
 1015d19:	movzx  r9d,r9w
 1015d1d:	or     r9d,0x80070000
 1015d24:	mov    DWORD PTR [rbp+0xd0],r9d
 1015d2b:	lea    rax,[rbp+0x58]
 1015d2f:	mov    QWORD PTR [rbp+0x2c8],rax
 1015d36:	lea    rax,[rip+0xfffffffffffef453]        # 0x1005190
 1015d3d:	mov    QWORD PTR [rbp+0x58],rax
 1015d41:	lea    rax,[rip+0xfffffffffffeea68]        # 0x10047b0
 1015d48:	mov    QWORD PTR [rbp+0x60],rax
 1015d4c:	mov    DWORD PTR [rbp+0x68],0x176
 1015d53:	mov    QWORD PTR [rbp+0x6c],0x2
 1015d5b:	mov    DWORD PTR [rbp+0xc8],0x1000000
 1015d65:	xor    eax,eax
 1015d67:	mov    QWORD PTR [rbp+0x78],rax
 1015d6b:	mov    QWORD PTR [rbp+0x80],rax
 1015d72:	mov    QWORD PTR [rbp+0x88],rax
 1015d79:	mov    QWORD PTR [rbp+0x90],rax
 1015d80:	mov    QWORD PTR [rbp+0x98],rax
 1015d87:	mov    QWORD PTR [rbp+0xa0],rax
 1015d8e:	mov    QWORD PTR [rbp+0xa8],rax
 1015d95:	mov    QWORD PTR [rbp+0xb0],rax
 1015d9c:	mov    QWORD PTR [rbp+0xb8],rax
 1015da3:	mov    QWORD PTR [rbp+0xc0],rax
 1015daa:	lea    r8,[rip+0xfffffffffffef2cf]        # 0x1005080
 1015db1:	lea    rdx,[rbp+0x58]
 1015db5:	lea    rcx,[rbp+0xd0]
 1015dbc:	call   0x1006240
 1015dc1:	nop
 1015dc2:	lea    rax,[rip+0xffffffffffff286e]        # 0x1008637
 1015dc9:	add    rsp,0x40
 1015dcd:	pop    rbp
 1015dce:	ret    
 1015dcf:	int3   
 1015dd0:	mov    rcx,QWORD PTR [rdx+0x2c8]
 1015dd7:	jmp    0x1006070
 1015ddc:	int3   
 1015ddd:	int3   
 1015dde:	int3   
 1015ddf:	int3   
 1015de0:	mov    QWORD PTR [rsp+0x10],rdx
 1015de5:	push   rbp
 1015de6:	sub    rsp,0x40
 1015dea:	mov    rbp,rdx
 1015ded:	mov    DWORD PTR [rbp+0xd0],0x8000ffff
 1015df7:	lea    rax,[rbp+0x58]
 1015dfb:	mov    QWORD PTR [rbp+0x2c8],rax
 1015e02:	lea    rax,[rip+0xfffffffffffef387]        # 0x1005190
 1015e09:	mov    QWORD PTR [rbp+0x58],rax
 1015e0d:	lea    rax,[rip+0xfffffffffffee99c]        # 0x10047b0
 1015e14:	mov    QWORD PTR [rbp+0x60],rax
 1015e18:	mov    DWORD PTR [rbp+0x68],0x176
 1015e1f:	mov    QWORD PTR [rbp+0x6c],0x2
 1015e27:	mov    DWORD PTR [rbp+0xc8],0x1000000
 1015e31:	xor    eax,eax
 1015e33:	mov    QWORD PTR [rbp+0x78],rax
 1015e37:	mov    QWORD PTR [rbp+0x80],rax
 1015e3e:	mov    QWORD PTR [rbp+0x88],rax
 1015e45:	mov    QWORD PTR [rbp+0x90],rax
 1015e4c:	mov    QWORD PTR [rbp+0x98],rax
 1015e53:	mov    QWORD PTR [rbp+0xa0],rax
 1015e5a:	mov    QWORD PTR [rbp+0xa8],rax
 1015e61:	mov    QWORD PTR [rbp+0xb0],rax
 1015e68:	mov    QWORD PTR [rbp+0xb8],rax
 1015e6f:	mov    QWORD PTR [rbp+0xc0],rax
 1015e76:	mov    r9d,0x8000ffff
 1015e7c:	lea    r8,[rip+0xfffffffffffef25d]        # 0x10050e0
 1015e83:	lea    rdx,[rbp+0x58]
 1015e87:	lea    rcx,[rbp+0xd0]
 1015e8e:	call   0x1006240
 1015e93:	xor    ecx,ecx
 1015e95:	call   0x100bd00
 1015e9a:	nop
 1015e9b:	lea    rax,[rip+0xffffffffffff27b6]        # 0x1008658
 1015ea2:	add    rsp,0x40
 1015ea6:	pop    rbp
 1015ea7:	ret    
 1015ea8:	int3   
 1015ea9:	int3   
 1015eaa:	int3   
 1015eab:	int3   
 1015eac:	int3   
 1015ead:	int3   
 1015eae:	int3   
 1015eaf:	int3   
 1015eb0:	mov    rcx,QWORD PTR [rdx+0x2c8]
 1015eb7:	jmp    0x1006070
 1015ebc:	int3   
 1015ebd:	int3   
 1015ebe:	int3   
 1015ebf:	int3   
 1015ec0:	mov    rcx,QWORD PTR [rdx+0x2c8]
 1015ec7:	jmp    0x1006070
 1015ecc:	int3   
 1015ecd:	int3   
 1015ece:	int3   
 1015ecf:	int3   
 1015ed0:	int3   
 1015ed1:	int3   
 1015ed2:	int3   
 1015ed3:	int3   
 1015ed4:	int3   
 1015ed5:	int3   
 1015ed6:	int3   
 1015ed7:	int3   
 1015ed8:	int3   
 1015ed9:	int3   
 1015eda:	int3   
 1015edb:	int3   
 1015edc:	int3   
 1015edd:	int3   
 1015ede:	int3   
 1015edf:	int3   
 1015ee0:	mov    rcx,QWORD PTR [rdx+0x250]
 1015ee7:	jmp    0x1006070
 1015eec:	int3   
 1015eed:	int3   
 1015eee:	int3   
 1015eef:	int3   
 1015ef0:	lea    rcx,[rdx+0xd0]
 1015ef7:	jmp    0x10061c0
 1015efc:	int3   
 1015efd:	int3   
 1015efe:	int3   
 1015eff:	int3   
 1015f00:	lea    rcx,[rdx+0xf8]
 1015f07:	jmp    0x1006070
 1015f0c:	int3   
 1015f0d:	int3   
 1015f0e:	int3   
 1015f0f:	int3   
 1015f10:	mov    rcx,QWORD PTR [rdx+0x250]
 1015f17:	jmp    0x1006070
 1015f1c:	int3   
 1015f1d:	int3   
 1015f1e:	int3   
 1015f1f:	int3   
 1015f20:	mov    rcx,QWORD PTR [rdx+0x250]
 1015f27:	jmp    0x1006070
 1015f2c:	int3   
 1015f2d:	int3   
 1015f2e:	int3   
 1015f2f:	int3   
 1015f30:	mov    rcx,QWORD PTR [rdx+0x250]
 1015f37:	jmp    0x1006070
 1015f3c:	int3   
 1015f3d:	int3   
 1015f3e:	int3   
 1015f3f:	int3   
 1015f40:	mov    rcx,QWORD PTR [rdx+0x250]
 1015f47:	jmp    0x1006070
 1015f4c:	int3   
 1015f4d:	int3   
 1015f4e:	int3   
 1015f4f:	int3   
 1015f50:	mov    QWORD PTR [rsp+0x10],rdx
 1015f55:	push   rbp
 1015f56:	sub    rsp,0x40
 1015f5a:	mov    rbp,rdx
 1015f5d:	mov    r9d,DWORD PTR [rbp+0x180]
 1015f64:	mov    DWORD PTR [rbp+0xd0],r9d
 1015f6b:	lea    rax,[rbp+0x58]
 1015f6f:	mov    QWORD PTR [rbp+0x250],rax
 1015f76:	lea    rax,[rip+0xfffffffffffef213]        # 0x1005190
 1015f7d:	mov    QWORD PTR [rbp+0x58],rax
 1015f81:	lea    rax,[rip+0xfffffffffffee828]        # 0x10047b0
 1015f88:	mov    QWORD PTR [rbp+0x60],rax
 1015f8c:	mov    DWORD PTR [rbp+0x68],0xb0
 1015f93:	mov    QWORD PTR [rbp+0x6c],0x2
 1015f9b:	mov    DWORD PTR [rbp+0xc8],0x1000000
 1015fa5:	xor    eax,eax
 1015fa7:	mov    QWORD PTR [rbp+0x78],rax
 1015fab:	mov    QWORD PTR [rbp+0x80],rax
 1015fb2:	mov    QWORD PTR [rbp+0x88],rax
 1015fb9:	mov    QWORD PTR [rbp+0x90],rax
 1015fc0:	mov    QWORD PTR [rbp+0x98],rax
 1015fc7:	mov    QWORD PTR [rbp+0xa0],rax
 1015fce:	mov    QWORD PTR [rbp+0xa8],rax
 1015fd5:	mov    QWORD PTR [rbp+0xb0],rax
 1015fdc:	mov    QWORD PTR [rbp+0xb8],rax
 1015fe3:	mov    QWORD PTR [rbp+0xc0],rax
 1015fea:	lea    r8,[rip+0xfffffffffffef03f]        # 0x1005030
 1015ff1:	lea    rdx,[rbp+0x58]
 1015ff5:	lea    rcx,[rbp+0xd0]
 1015ffc:	call   0x1006240
 1016001:	nop
 1016002:	lea    rax,[rip+0xffffffffffff1c8f]        # 0x1007c98
 1016009:	add    rsp,0x40
 101600d:	pop    rbp
 101600e:	ret    
 101600f:	int3   
 1016010:	mov    rcx,QWORD PTR [rdx+0x250]
 1016017:	jmp    0x1006070
 101601c:	int3   
 101601d:	int3   
 101601e:	int3   
 101601f:	int3   
 1016020:	mov    QWORD PTR [rsp+0x10],rdx
 1016025:	push   rbp
 1016026:	sub    rsp,0x40
 101602a:	mov    rbp,rdx
 101602d:	mov    r9d,DWORD PTR [rbp+0x170]
 1016034:	test   r9d,r9d
 1016037:	jle    0x1016044
 1016039:	movzx  r9d,r9w
 101603d:	or     r9d,0x80070000
 1016044:	mov    DWORD PTR [rbp+0xd0],r9d
 101604b:	lea    rax,[rbp+0x58]
 101604f:	mov    QWORD PTR [rbp+0x250],rax
 1016056:	lea    rax,[rip+0xfffffffffffef133]        # 0x1005190
 101605d:	mov    QWORD PTR [rbp+0x58],rax
 1016061:	lea    rax,[rip+0xfffffffffffee748]        # 0x10047b0
 1016068:	mov    QWORD PTR [rbp+0x60],rax
 101606c:	mov    DWORD PTR [rbp+0x68],0xb0
 1016073:	mov    QWORD PTR [rbp+0x6c],0x2
 101607b:	mov    DWORD PTR [rbp+0xc8],0x1000000
 1016085:	xor    eax,eax
 1016087:	mov    QWORD PTR [rbp+0x78],rax
 101608b:	mov    QWORD PTR [rbp+0x80],rax
 1016092:	mov    QWORD PTR [rbp+0x88],rax
 1016099:	mov    QWORD PTR [rbp+0x90],rax
 10160a0:	mov    QWORD PTR [rbp+0x98],rax
 10160a7:	mov    QWORD PTR [rbp+0xa0],rax
 10160ae:	mov    QWORD PTR [rbp+0xa8],rax
 10160b5:	mov    QWORD PTR [rbp+0xb0],rax
 10160bc:	mov    QWORD PTR [rbp+0xb8],rax
 10160c3:	mov    QWORD PTR [rbp+0xc0],rax
 10160ca:	lea    r8,[rip+0xfffffffffffeefaf]        # 0x1005080
 10160d1:	lea    rdx,[rbp+0x58]
 10160d5:	lea    rcx,[rbp+0xd0]
 10160dc:	call   0x1006240
 10160e1:	nop
 10160e2:	lea    rax,[rip+0xffffffffffff1baf]        # 0x1007c98
 10160e9:	add    rsp,0x40
 10160ed:	pop    rbp
 10160ee:	ret    
 10160ef:	int3   
 10160f0:	mov    rcx,QWORD PTR [rdx+0x250]
 10160f7:	jmp    0x1006070
 10160fc:	int3   
 10160fd:	int3   
 10160fe:	int3   
 10160ff:	int3   
 1016100:	mov    QWORD PTR [rsp+0x10],rdx
 1016105:	push   rbp
 1016106:	sub    rsp,0x40
 101610a:	mov    rbp,rdx
 101610d:	mov    DWORD PTR [rbp+0xd0],0x8000ffff
 1016117:	lea    rax,[rbp+0x58]
 101611b:	mov    QWORD PTR [rbp+0x250],rax
 1016122:	lea    rax,[rip+0xfffffffffffef067]        # 0x1005190
 1016129:	mov    QWORD PTR [rbp+0x58],rax
 101612d:	lea    rax,[rip+0xfffffffffffee67c]        # 0x10047b0
 1016134:	mov    QWORD PTR [rbp+0x60],rax
 1016138:	mov    DWORD PTR [rbp+0x68],0xb0
 101613f:	mov    QWORD PTR [rbp+0x6c],0x2
 1016147:	mov    DWORD PTR [rbp+0xc8],0x1000000
 1016151:	xor    eax,eax
 1016153:	mov    QWORD PTR [rbp+0x78],rax
 1016157:	mov    QWORD PTR [rbp+0x80],rax
 101615e:	mov    QWORD PTR [rbp+0x88],rax
 1016165:	mov    QWORD PTR [rbp+0x90],rax
 101616c:	mov    QWORD PTR [rbp+0x98],rax
 1016173:	mov    QWORD PTR [rbp+0xa0],rax
 101617a:	mov    QWORD PTR [rbp+0xa8],rax
 1016181:	mov    QWORD PTR [rbp+0xb0],rax
 1016188:	mov    QWORD PTR [rbp+0xb8],rax
 101618f:	mov    QWORD PTR [rbp+0xc0],rax
 1016196:	mov    r9d,0x8000ffff
 101619c:	lea    r8,[rip+0xfffffffffffeef3d]        # 0x10050e0
 10161a3:	lea    rdx,[rbp+0x58]
 10161a7:	lea    rcx,[rbp+0xd0]
 10161ae:	call   0x1006240
 10161b3:	xor    ecx,ecx
 10161b5:	call   0x100bd00
 10161ba:	nop
 10161bb:	lea    rax,[rip+0xffffffffffff1ad6]        # 0x1007c98
 10161c2:	add    rsp,0x40
 10161c6:	pop    rbp
 10161c7:	ret    
 10161c8:	int3   
 10161c9:	int3   
 10161ca:	int3   
 10161cb:	int3   
 10161cc:	int3   
 10161cd:	int3   
 10161ce:	int3   
 10161cf:	int3   
 10161d0:	mov    rcx,QWORD PTR [rdx+0x250]
 10161d7:	jmp    0x1006070
 10161dc:	int3   
 10161dd:	int3   
 10161de:	int3   
 10161df:	int3   
 10161e0:	int3   
 10161e1:	int3   
 10161e2:	int3   
 10161e3:	int3   
 10161e4:	int3   
 10161e5:	int3   
 10161e6:	int3   
 10161e7:	int3   
 10161e8:	int3   
 10161e9:	int3   
 10161ea:	int3   
 10161eb:	int3   
 10161ec:	int3   
 10161ed:	int3   
 10161ee:	int3   
 10161ef:	int3   
 10161f0:	mov    rcx,QWORD PTR [rdx+0x108]
 10161f7:	jmp    0x1006070
 10161fc:	int3   
 10161fd:	int3   
 10161fe:	int3   
 10161ff:	int3   
 1016200:	lea    rcx,[rdx+0xc8]
 1016207:	jmp    0x10061c0
 101620c:	int3   
 101620d:	int3   
 101620e:	int3   
 101620f:	int3   
 1016210:	mov    rcx,QWORD PTR [rdx+0x108]
 1016217:	jmp    0x1006070
 101621c:	int3   
 101621d:	int3   
 101621e:	int3   
 101621f:	int3   
 1016220:	mov    rcx,QWORD PTR [rdx+0xc0]
 1016227:	jmp    0x1006070
 101622c:	int3   
 101622d:	int3   
 101622e:	int3   
 101622f:	int3   
 1016230:	mov    QWORD PTR [rsp+0x10],rdx
 1016235:	push   rbp
 1016236:	sub    rsp,0x40
 101623a:	mov    rbp,rdx
 101623d:	mov    r9d,DWORD PTR [rbp+0xf8]
 1016244:	mov    DWORD PTR [rbp+0xc8],r9d
 101624b:	lea    rax,[rbp+0x48]
 101624f:	mov    QWORD PTR [rbp+0xc0],rax
 1016256:	lea    rax,[rip+0xfffffffffffeef33]        # 0x1005190
 101625d:	mov    QWORD PTR [rbp+0x48],rax
 1016261:	lea    rax,[rip+0xfffffffffffee548]        # 0x10047b0
 1016268:	mov    QWORD PTR [rbp+0x50],rax
 101626c:	mov    DWORD PTR [rbp+0x58],0x327
 1016273:	mov    QWORD PTR [rbp+0x5c],0x2
 101627b:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1016285:	xor    eax,eax
 1016287:	mov    QWORD PTR [rbp+0x68],rax
 101628b:	mov    QWORD PTR [rbp+0x70],rax
 101628f:	mov    QWORD PTR [rbp+0x78],rax
 1016293:	mov    QWORD PTR [rbp+0x80],rax
 101629a:	mov    QWORD PTR [rbp+0x88],rax
 10162a1:	mov    QWORD PTR [rbp+0x90],rax
 10162a8:	mov    QWORD PTR [rbp+0x98],rax
 10162af:	mov    QWORD PTR [rbp+0xa0],rax
 10162b6:	mov    QWORD PTR [rbp+0xa8],rax
 10162bd:	mov    QWORD PTR [rbp+0xb0],rax
 10162c4:	lea    r8,[rip+0xfffffffffffeed65]        # 0x1005030
 10162cb:	lea    rdx,[rbp+0x48]
 10162cf:	lea    rcx,[rbp+0xc8]
 10162d6:	call   0x1006240
 10162db:	nop
 10162dc:	lea    rax,[rip+0xffffffffffff364e]        # 0x1009931
 10162e3:	add    rsp,0x40
 10162e7:	pop    rbp
 10162e8:	ret    
 10162e9:	int3   
 10162ea:	int3   
 10162eb:	int3   
 10162ec:	int3   
 10162ed:	int3   
 10162ee:	int3   
 10162ef:	int3   
 10162f0:	mov    rcx,QWORD PTR [rdx+0xc0]
 10162f7:	jmp    0x1006070
 10162fc:	int3   
 10162fd:	int3   
 10162fe:	int3   
 10162ff:	int3   
 1016300:	mov    QWORD PTR [rsp+0x10],rdx
 1016305:	push   rbp
 1016306:	sub    rsp,0x40
 101630a:	mov    rbp,rdx
 101630d:	mov    r9d,DWORD PTR [rbp+0xfc]
 1016314:	test   r9d,r9d
 1016317:	jle    0x1016324
 1016319:	movzx  r9d,r9w
 101631d:	or     r9d,0x80070000
 1016324:	mov    DWORD PTR [rbp+0xc8],r9d
 101632b:	lea    rax,[rbp+0x48]
 101632f:	mov    QWORD PTR [rbp+0xc0],rax
 1016336:	lea    rax,[rip+0xfffffffffffeee53]        # 0x1005190
 101633d:	mov    QWORD PTR [rbp+0x48],rax
 1016341:	lea    rax,[rip+0xfffffffffffee468]        # 0x10047b0
 1016348:	mov    QWORD PTR [rbp+0x50],rax
 101634c:	mov    DWORD PTR [rbp+0x58],0x327
 1016353:	mov    QWORD PTR [rbp+0x5c],0x2
 101635b:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1016365:	xor    eax,eax
 1016367:	mov    QWORD PTR [rbp+0x68],rax
 101636b:	mov    QWORD PTR [rbp+0x70],rax
 101636f:	mov    QWORD PTR [rbp+0x78],rax
 1016373:	mov    QWORD PTR [rbp+0x80],rax
 101637a:	mov    QWORD PTR [rbp+0x88],rax
 1016381:	mov    QWORD PTR [rbp+0x90],rax
 1016388:	mov    QWORD PTR [rbp+0x98],rax
 101638f:	mov    QWORD PTR [rbp+0xa0],rax
 1016396:	mov    QWORD PTR [rbp+0xa8],rax
 101639d:	mov    QWORD PTR [rbp+0xb0],rax
 10163a4:	lea    r8,[rip+0xfffffffffffeecd5]        # 0x1005080
 10163ab:	lea    rdx,[rbp+0x48]
 10163af:	lea    rcx,[rbp+0xc8]
 10163b6:	call   0x1006240
 10163bb:	nop
 10163bc:	lea    rax,[rip+0xffffffffffff356e]        # 0x1009931
 10163c3:	add    rsp,0x40
 10163c7:	pop    rbp
 10163c8:	ret    
 10163c9:	int3   
 10163ca:	int3   
 10163cb:	int3   
 10163cc:	int3   
 10163cd:	int3   
 10163ce:	int3   
 10163cf:	int3   
 10163d0:	mov    rcx,QWORD PTR [rdx+0xc0]
 10163d7:	jmp    0x1006070
 10163dc:	int3   
 10163dd:	int3   
 10163de:	int3   
 10163df:	int3   
 10163e0:	mov    QWORD PTR [rsp+0x10],rdx
 10163e5:	push   rbp
 10163e6:	sub    rsp,0x40
 10163ea:	mov    rbp,rdx
 10163ed:	mov    DWORD PTR [rbp+0xc8],0x8000ffff
 10163f7:	lea    rax,[rbp+0x48]
 10163fb:	mov    QWORD PTR [rbp+0xc0],rax
 1016402:	lea    rax,[rip+0xfffffffffffeed87]        # 0x1005190
 1016409:	mov    QWORD PTR [rbp+0x48],rax
 101640d:	lea    rax,[rip+0xfffffffffffee39c]        # 0x10047b0
 1016414:	mov    QWORD PTR [rbp+0x50],rax
 1016418:	mov    DWORD PTR [rbp+0x58],0x327
 101641f:	mov    QWORD PTR [rbp+0x5c],0x2
 1016427:	mov    DWORD PTR [rbp+0xb8],0x1000000
 1016431:	xor    eax,eax
 1016433:	mov    QWORD PTR [rbp+0x68],rax
 1016437:	mov    QWORD PTR [rbp+0x70],rax
 101643b:	mov    QWORD PTR [rbp+0x78],rax
 101643f:	mov    QWORD PTR [rbp+0x80],rax
 1016446:	mov    QWORD PTR [rbp+0x88],rax
 101644d:	mov    QWORD PTR [rbp+0x90],rax
 1016454:	mov    QWORD PTR [rbp+0x98],rax
 101645b:	mov    QWORD PTR [rbp+0xa0],rax
 1016462:	mov    QWORD PTR [rbp+0xa8],rax
 1016469:	mov    QWORD PTR [rbp+0xb0],rax
 1016470:	mov    r9d,0x8000ffff
 1016476:	lea    r8,[rip+0xfffffffffffeec63]        # 0x10050e0
 101647d:	lea    rdx,[rbp+0x48]
 1016481:	lea    rcx,[rbp+0xc8]
 1016488:	call   0x1006240
 101648d:	xor    ecx,ecx
 101648f:	call   0x100bd00
 1016494:	nop
 1016495:	lea    rax,[rip+0xffffffffffff3495]        # 0x1009931
 101649c:	add    rsp,0x40
 10164a0:	pop    rbp
 10164a1:	ret    
 10164a2:	int3   
 10164a3:	int3   
 10164a4:	int3   
 10164a5:	int3   
 10164a6:	int3   
 10164a7:	int3   
 10164a8:	int3   
 10164a9:	int3   
 10164aa:	int3   
 10164ab:	int3   
 10164ac:	int3   
 10164ad:	int3   
 10164ae:	int3   
 10164af:	int3   
 10164b0:	mov    rcx,QWORD PTR [rdx+0xc0]
 10164b7:	jmp    0x1006070
 10164bc:	int3   
 10164bd:	int3   
 10164be:	int3   
 10164bf:	int3   
 10164c0:	int3   
 10164c1:	int3   
 10164c2:	int3   
 10164c3:	int3   
 10164c4:	int3   
 10164c5:	int3   
 10164c6:	int3   
 10164c7:	int3   
 10164c8:	int3   
 10164c9:	int3   
 10164ca:	int3   
 10164cb:	int3   
 10164cc:	int3   
 10164cd:	int3   
 10164ce:	int3   
 10164cf:	int3   
 10164d0:	rex push rbp
 10164d2:	sub    rsp,0x20
 10164d6:	mov    rbp,rdx
 10164d9:	mov    eax,DWORD PTR [rbp+0x20]
 10164dc:	and    eax,0x1
 10164df:	test   eax,eax
 10164e1:	je     0x10164f0
 10164e3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 10164e7:	mov    rcx,QWORD PTR [rbp+0x30]
 10164eb:	call   0x1006070
 10164f0:	add    rsp,0x20
 10164f4:	pop    rbp
 10164f5:	ret    
 10164f6:	int3   
 10164f7:	int3   
 10164f8:	int3   
 10164f9:	int3   
 10164fa:	int3   
 10164fb:	int3   
 10164fc:	int3   
 10164fd:	int3   
 10164fe:	int3   
 10164ff:	int3   
 1016500:	rex push rbp
 1016502:	sub    rsp,0x20
 1016506:	mov    rbp,rdx
 1016509:	mov    eax,DWORD PTR [rbp+0x20]
 101650c:	and    eax,0x1
 101650f:	test   eax,eax
 1016511:	je     0x1016520
 1016513:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1016517:	mov    rcx,QWORD PTR [rbp+0x30]
 101651b:	call   0x1006070
 1016520:	add    rsp,0x20
 1016524:	pop    rbp
 1016525:	ret    
 1016526:	int3   
 1016527:	int3   
 1016528:	int3   
 1016529:	int3   
 101652a:	int3   
 101652b:	int3   
 101652c:	int3   
 101652d:	int3   
 101652e:	int3   
 101652f:	int3   
 1016530:	rex push rbp
 1016532:	sub    rsp,0x20
 1016536:	mov    rbp,rdx
 1016539:	mov    eax,DWORD PTR [rbp+0x20]
 101653c:	and    eax,0x1
 101653f:	test   eax,eax
 1016541:	je     0x1016550
 1016543:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1016547:	mov    rcx,QWORD PTR [rbp+0x58]
 101654b:	call   0x1006070
 1016550:	add    rsp,0x20
 1016554:	pop    rbp
 1016555:	ret    
 1016556:	int3   
 1016557:	int3   
 1016558:	int3   
 1016559:	int3   
 101655a:	int3   
 101655b:	int3   
 101655c:	int3   
 101655d:	int3   
 101655e:	int3   
 101655f:	int3   
 1016560:	lea    rcx,[rdx+0x28]
 1016567:	jmp    0x100fa70
 101656c:	int3   
 101656d:	int3   
 101656e:	int3   
 101656f:	int3   
 1016570:	int3   
 1016571:	int3   
 1016572:	int3   
 1016573:	int3   
 1016574:	int3   
 1016575:	int3   
 1016576:	int3   
 1016577:	int3   
 1016578:	int3   
 1016579:	int3   
 101657a:	int3   
 101657b:	int3   
 101657c:	int3   
 101657d:	int3   
 101657e:	int3   
 101657f:	int3   
 1016580:	mov    rcx,QWORD PTR [rdx+0x288]
 1016587:	jmp    0x1006070
 101658c:	int3   
 101658d:	int3   
 101658e:	int3   
 101658f:	int3   
 1016590:	lea    rcx,[rdx+0x140]
 1016597:	jmp    0x10061c0
 101659c:	int3   
 101659d:	int3   
 101659e:	int3   
 101659f:	int3   
 10165a0:	mov    rcx,QWORD PTR [rdx+0x288]
 10165a7:	jmp    0x1006070
 10165ac:	int3   
 10165ad:	int3   
 10165ae:	int3   
 10165af:	int3   
 10165b0:	mov    rcx,QWORD PTR [rdx+0x288]
 10165b7:	jmp    0x1006070
 10165bc:	int3   
 10165bd:	int3   
 10165be:	int3   
 10165bf:	int3   
 10165c0:	lea    rcx,[rdx+0x50]
 10165c7:	jmp    0x1006070
 10165cc:	int3   
 10165cd:	int3   
 10165ce:	int3   
 10165cf:	int3   
 10165d0:	mov    rcx,QWORD PTR [rdx+0x288]
 10165d7:	jmp    0x1006070
 10165dc:	int3   
 10165dd:	int3   
 10165de:	int3   
 10165df:	int3   
 10165e0:	mov    rcx,QWORD PTR [rdx+0x288]
 10165e7:	jmp    0x1006070
 10165ec:	int3   
 10165ed:	int3   
 10165ee:	int3   
 10165ef:	int3   
 10165f0:	lea    rcx,[rdx+0x1f0]
 10165f7:	jmp    0x100df30
 10165fc:	int3   
 10165fd:	int3   
 10165fe:	int3   
 10165ff:	int3   
 1016600:	lea    rcx,[rdx+0x50]
 1016607:	jmp    0x1006070
 101660c:	int3   
 101660d:	int3   
 101660e:	int3   
 101660f:	int3   
 1016610:	mov    rcx,QWORD PTR [rdx+0x288]
 1016617:	jmp    0x1006070
 101661c:	int3   
 101661d:	int3   
 101661e:	int3   
 101661f:	int3   
 1016620:	mov    rcx,QWORD PTR [rdx+0x288]
 1016627:	jmp    0x1006070
 101662c:	int3   
 101662d:	int3   
 101662e:	int3   
 101662f:	int3   
 1016630:	lea    rcx,[rdx+0x50]
 1016637:	jmp    0x1006070
 101663c:	int3   
 101663d:	int3   
 101663e:	int3   
 101663f:	int3   
 1016640:	mov    rcx,QWORD PTR [rdx+0x288]
 1016647:	jmp    0x1006070
 101664c:	int3   
 101664d:	int3   
 101664e:	int3   
 101664f:	int3   
 1016650:	mov    rcx,QWORD PTR [rdx+0x288]
 1016657:	jmp    0x1006070
 101665c:	int3   
 101665d:	int3   
 101665e:	int3   
 101665f:	int3   
 1016660:	int3   
 1016661:	int3   
 1016662:	int3   
 1016663:	int3   
 1016664:	int3   
 1016665:	int3   
 1016666:	int3   
 1016667:	int3   
 1016668:	int3   
 1016669:	int3   
 101666a:	int3   
 101666b:	int3   
 101666c:	int3   
 101666d:	int3   
 101666e:	int3   
 101666f:	int3   
 1016670:	mov    rcx,QWORD PTR [rdx+0x200]
 1016677:	jmp    0x1006070
 101667c:	int3   
 101667d:	int3   
 101667e:	int3   
 101667f:	int3   
 1016680:	lea    rcx,[rdx+0x40]
 1016687:	jmp    0x10061c0
 101668c:	int3   
 101668d:	int3   
 101668e:	int3   
 101668f:	int3   
 1016690:	mov    rcx,QWORD PTR [rdx+0x200]
 1016697:	jmp    0x1006070
 101669c:	int3   
 101669d:	int3   
 101669e:	int3   
 101669f:	int3   
 10166a0:	mov    rcx,QWORD PTR [rdx+0x200]
 10166a7:	jmp    0x1006070
 10166ac:	int3   
 10166ad:	int3   
 10166ae:	int3   
 10166af:	int3   
 10166b0:	int3   
 10166b1:	int3   
 10166b2:	int3   
 10166b3:	int3   
 10166b4:	int3   
 10166b5:	int3   
 10166b6:	int3   
 10166b7:	int3   
 10166b8:	int3   
 10166b9:	int3   
 10166ba:	int3   
 10166bb:	int3   
 10166bc:	int3   
 10166bd:	int3   
 10166be:	int3   
 10166bf:	int3   
 10166c0:	mov    rcx,QWORD PTR [rdx+0x88]
 10166c7:	jmp    0x1006070
 10166cc:	int3   
 10166cd:	int3   
 10166ce:	int3   
 10166cf:	int3   
 10166d0:	lea    rcx,[rdx+0x40]
 10166d7:	jmp    0x1006060
 10166dc:	int3   
 10166dd:	int3   
 10166de:	int3   
 10166df:	int3   
 10166e0:	int3   
 10166e1:	int3   
 10166e2:	int3   
 10166e3:	int3   
 10166e4:	int3   
 10166e5:	int3   
 10166e6:	int3   
 10166e7:	int3   
 10166e8:	int3   
 10166e9:	int3   
 10166ea:	int3   
 10166eb:	int3   
 10166ec:	int3   
 10166ed:	int3   
 10166ee:	int3   
 10166ef:	int3   
 10166f0:	mov    rcx,QWORD PTR [rdx+0x90]
 10166f7:	jmp    0x1006070
 10166fc:	int3   
 10166fd:	int3   
 10166fe:	int3   
 10166ff:	int3   
 1016700:	lea    rcx,[rdx+0x40]
 1016707:	jmp    0x1006060
 101670c:	int3   
 101670d:	int3   
 101670e:	int3   
 101670f:	int3   
 1016710:	int3   
 1016711:	int3   
 1016712:	int3   
 1016713:	int3   
 1016714:	int3   
 1016715:	int3   
 1016716:	int3   
 1016717:	int3   
 1016718:	int3   
 1016719:	int3   
 101671a:	int3   
 101671b:	int3   
 101671c:	int3   
 101671d:	int3   
 101671e:	int3   
 101671f:	int3   
 1016720:	lea    rcx,[rdx+0x28]
 1016727:	jmp    0x100fa70
 101672c:	int3   
 101672d:	int3   
 101672e:	int3   
 101672f:	int3   
 1016730:	int3   
 1016731:	int3   
 1016732:	int3   
 1016733:	int3   
 1016734:	int3   
 1016735:	int3   
 1016736:	int3   
 1016737:	int3   
 1016738:	int3   
 1016739:	int3   
 101673a:	int3   
 101673b:	int3   
 101673c:	int3   
 101673d:	int3   
 101673e:	int3   
 101673f:	int3   
 1016740:	xor    eax,eax
 1016742:	mov    QWORD PTR [rip+0x4a37],rax        # 0x101b180
 1016749:	mov    QWORD PTR [rip+0x4a38],rax        # 0x101b188
 1016750:	mov    QWORD PTR [rip+0x4a39],rax        # 0x101b190
 1016757:	mov    QWORD PTR [rip+0x4a3a],rax        # 0x101b198
 101675e:	mov    QWORD PTR [rip+0x4a13],rax        # 0x101b178
 1016765:	mov    DWORD PTR [rip+0x4a15],0x1        # 0x101b184
 101676f:	mov    BYTE PTR [rip+0x4a2b],al        # 0x101b1a0
 1016775:	mov    DWORD PTR [rip+0x4a01],0x10        # 0x101b180
 101677f:	mov    DWORD PTR [rip+0x49ff],0x5        # 0x101b188
 1016789:	mov    BYTE PTR [rip+0x4a21],al        # 0x101b1b0
 101678f:	ret    
 1016790:	int3   
 1016791:	int3   
 1016792:	int3   
 1016793:	int3   
 1016794:	int3   
 1016795:	int3   
 1016796:	int3   
 1016797:	int3   
 1016798:	int3   
 1016799:	int3   
 101679a:	int3   
 101679b:	int3   
 101679c:	int3   
 101679d:	int3   
 101679e:	int3   
 101679f:	int3   
 10167a0:	lea    rcx,[rip+0x19]        # 0x10167c0
 10167a7:	jmp    0x100a07c
 10167ac:	int3   
 10167ad:	int3   
 10167ae:	int3   
 10167af:	int3   
 10167b0:	int3   
 10167b1:	int3   
 10167b2:	int3   
 10167b3:	int3   
 10167b4:	int3   
 10167b5:	int3   
 10167b6:	int3   
 10167b7:	int3   
 10167b8:	int3   
 10167b9:	int3   
 10167ba:	int3   
 10167bb:	int3   
 10167bc:	int3   
 10167bd:	int3   
 10167be:	int3   
 10167bf:	int3   
 10167c0:	lea    rcx,[rip+0x4fb9]        # 0x101b780
 10167c7:	jmp    0x100a610
 10167cc:	int3   
 10167cd:	int3   
 10167ce:	int3   
 10167cf:	int3   
 10167d0:	add    DWORD PTR [rdx],edx
 10167d2:	(bad)  
 10167d3:	add    BYTE PTR [rdx],dl
 10167d5:	je     0x10167de
 10167d7:	add    BYTE PTR [rdx],dl
 10167d9:	xor    al,0x6
 10167db:	add    BYTE PTR [rdx],dl
 10167dd:	xor    cl,BYTE PTR [rbx]
 10167df:	push   rax
 10167e0:	add    DWORD PTR [rcx],ecx
 10167e2:	add    al,BYTE PTR [rax]
 10167e4:	or     DWORD PTR [rdx],esi
 10167e6:	add    dl,BYTE PTR [rax+0x1]
 10167e9:	add    al,0x1
 10167eb:	add    BYTE PTR [rdx+riz*2],al
 10167ee:	add    BYTE PTR [rax],al
 10167f0:	add    DWORD PTR [rsi],eax
 10167f2:	add    al,BYTE PTR [rax]
 10167f4:	(bad)  
 10167f5:	xor    al,BYTE PTR [rdx]
 10167f7:	push   rax
 10167f8:	or     DWORD PTR [rdx],ecx
 10167fa:	add    al,0x0
 10167fc:	or     dh,BYTE PTR [rsi+rax*1]
 10167ff:	add    BYTE PTR [rdx],cl
 1016801:	xor    al,BYTE PTR [rsi]
 1016803:	jo     0x101681f
 1016805:	movabs eax,ds:0x9aca000000010000
 101680e:	add    BYTE PTR [rax],al
 1016810:	or     BYTE PTR [rax+rax*1+0x1375600],bl
 1016817:	add    BYTE PTR [rax],cl
 1016819:	pushf  
 101681a:	add    BYTE PTR [rax],al
 101681c:	add    DWORD PTR [rcx+rax*1],eax
 101681f:	add    BYTE PTR [rdx+rax*2],al
 1016822:	add    BYTE PTR [rax],al
 1016824:	add    DWORD PTR [rcx+rax*1],eax
 1016827:	add    BYTE PTR [rdx+rax*2],al
 101682a:	add    BYTE PTR [rax],al
 101682c:	add    BYTE PTR [rax],al
 101682e:	add    BYTE PTR [rax],al
 1016830:	add    DWORD PTR [rax],eax
 1016832:	add    BYTE PTR [rax],al
 1016834:	add    DWORD PTR [rdx+rax*1],ecx
 1016837:	add    BYTE PTR [rcx+rax*1],cl
 101683a:	adc    DWORD PTR [rax],eax
 101683c:	add    DWORD PTR [rdi],ecx
 101683e:	(bad)  
 101683f:	add    BYTE PTR [rdi],cl
 1016841:	fs (bad) 
 1016843:	add    BYTE PTR [rdi],cl
 1016845:	xor    al,0x6
 1016847:	add    BYTE PTR [rdi],cl
 1016849:	xor    cl,BYTE PTR [rbx]
 101684b:	jo     0x101684e
 101684d:	add    al,0x1
 101684f:	add    BYTE PTR [rdx+rax*2],al
 1016852:	add    BYTE PTR [rax],al
 1016854:	add    DWORD PTR [rcx+rax*1],eax
 1016857:	add    BYTE PTR [rdx+rax*2],al
 101685a:	add    BYTE PTR [rax],al
 101685c:	add    DWORD PTR [rsi],eax
 101685e:	add    al,BYTE PTR [rax]
 1016860:	(bad)  
 1016861:	xor    al,BYTE PTR [rdx]
 1016863:	push   rax
 1016864:	adc    DWORD PTR [rsi],eax
 1016866:	add    al,BYTE PTR [rax]
 1016868:	(bad)  
 1016869:	xor    al,BYTE PTR [rdx]
 101686b:	xor    BYTE PTR [rdx],bl
 101686d:	movabs eax,ds:0x9ffb000000010000
 1016876:	add    BYTE PTR [rax],al
 1016878:	(bad)  
 1016879:	movabs al,ds:0x1377a0000
 1016882:	add    BYTE PTR [rax],al
 1016884:	add    DWORD PTR [rcx+rax*1],eax
 1016887:	add    BYTE PTR [rdx+rax*2],al
 101688a:	add    BYTE PTR [rax],al
 101688c:	add    DWORD PTR [rdx],ecx
 101688e:	add    al,0x0
 1016890:	or     dh,BYTE PTR [rsi+rax*1]
 1016893:	add    BYTE PTR [rdx],cl
 1016895:	xor    al,BYTE PTR [rsi]
 1016897:	jo     0x101689a
 1016899:	or     al,BYTE PTR [rax+rax*1]
 101689c:	or     dh,BYTE PTR [rsi+rax*1]
 101689f:	add    BYTE PTR [rdx],cl
 10168a1:	xor    al,BYTE PTR [rsi]
 10168a3:	jo     0x10168a6
 10168a5:	(bad)  
 10168a6:	add    al,BYTE PTR [rax]
 10168a8:	(bad)  
 10168a9:	xor    al,BYTE PTR [rdx]
 10168ab:	push   rax
 10168ac:	or     DWORD PTR [rcx+rax*1],eax
 10168af:	add    BYTE PTR [rdx+rax*2],al
 10168b2:	add    BYTE PTR [rax],al
 10168b4:	sbb    ah,BYTE PTR [rcx+0x10000]
 10168ba:	add    BYTE PTR [rax],al
 10168bc:	xlat   BYTE PTR ds:[rbx]
 10168bd:	movabs eax,ds:0x37a00000a20a0000
 10168c6:	add    DWORD PTR [rax],eax
 10168c8:	or     ah,BYTE PTR [rdx+0xa010000]
 10168ce:	add    al,0x0
 10168d0:	or     dh,BYTE PTR [rax+rcx*1]
 10168d3:	add    BYTE PTR [rdx],cl
 10168d5:	xor    al,BYTE PTR [rsi]
 10168d7:	jo     0x10168da
 10168d9:	(bad)  
 10168da:	add    al,BYTE PTR [rax]
 10168dc:	(bad)  
 10168dd:	xor    al,BYTE PTR [rdx]
 10168df:	push   rax
 10168e0:	or     DWORD PTR [rdi],edx
 10168e2:	(bad)  
 10168e3:	add    BYTE PTR [rdi],dl
 10168e5:	xor    al,0xd
 10168e7:	add    BYTE PTR [rdi],dl
 10168e9:	jb     0x10168fe
 10168eb:	rcl    BYTE PTR [rcx],0x70
 10168ee:	adc    BYTE PTR [rax+0x1a],ah
 10168f1:	movabs eax,ds:0xa333000000010000
 10168fa:	add    BYTE PTR [rax],al
 10168fc:	rex.WR movabs ds:0xa34c000137c80000,rax
 1016906:	add    BYTE PTR [rax],al
 1016908:	add    DWORD PTR [rsi],eax
 101690a:	add    al,BYTE PTR [rax]
 101690c:	(bad)  
 101690d:	xor    al,BYTE PTR [rdx]
 101690f:	push   rax
 1016910:	adc    DWORD PTR [rax],ebx
 1016912:	add    eax,0x14621800
 1016917:	rcl    BYTE PTR [rdx],0x70
 101691a:	adc    DWORD PTR [rax+0x10],esp
 101691d:	xor    BYTE PTR [rax],al
 101691f:	add    BYTE PTR [rdx],bl
 1016921:	movabs eax,ds:0xa393000000010000
 101692a:	add    BYTE PTR [rax],al
 101692c:	mov    bl,0xa3
 101692e:	add    BYTE PTR [rax],al
 1016930:	phaddw mm0,QWORD PTR [rax]
 1016934:	add    BYTE PTR [rax],al
 1016936:	add    BYTE PTR [rax],al
 1016938:	add    DWORD PTR [rsi],eax
 101693a:	add    al,BYTE PTR [rax]
 101693c:	(bad)  
 101693d:	xor    al,BYTE PTR [rdx]
 101693f:	xor    BYTE PTR [rcx],al
 1016941:	or     eax,DWORD PTR [rbx]
 1016943:	add    BYTE PTR [rbx],cl
 1016945:	(bad)  
 1016946:	(bad)  
 1016947:	(bad)  
 1016948:	(bad)  
 1016949:	xor    BYTE PTR [rax],al
 101694b:	add    BYTE PTR [rcx],ah
 101694d:	add    eax,0x74050002
 1016952:	(bad)  
 1016953:	add    BYTE PTR [rax-0x5c],ah
 1016956:	add    BYTE PTR [rax],al
 1016958:	mov    fs,WORD PTR [rax+rax*1+0x1694000]
 101695f:	add    BYTE PTR [rcx],ah
 1016961:	add    BYTE PTR [rdx],al
 1016963:	add    BYTE PTR [rax],al
 1016965:	je     0x101696d
 1016967:	add    BYTE PTR [rax-0x5c],ah
 101696a:	add    BYTE PTR [rax],al
 101696c:	mov    fs,WORD PTR [rax+rax*1+0x1694000]
 1016973:	add    BYTE PTR [rcx],ah
 1016975:	add    BYTE PTR [rax],al
 1016977:	add    BYTE PTR [rax-0x5c],ah
 101697a:	add    BYTE PTR [rax],al
 101697c:	mov    fs,WORD PTR [rax+rax*1+0x1694000]
 1016983:	add    BYTE PTR [rcx],bl
 1016985:	adc    eax,DWORD PTR [rdx]
 1016987:	add    BYTE PTR [rdx],cl
 1016989:	push   rdx
 101698a:	(bad)  
 101698b:	xor    BYTE PTR [rax+0x20000106],cl
 1016991:	sbb    BYTE PTR [rax],al
 1016993:	add    bh,bh
 1016995:	(bad)  
 1016996:	(bad)  
 1016997:	inc    DWORD PTR [rax]
 1016999:	add    BYTE PTR [rax],al
 101699b:	add    bh,bh
 101699d:	(bad)  
 101699e:	(bad)  
 101699f:	inc    DWORD PTR [rax]
	...
 10169a9:	add    BYTE PTR [rax],al
 10169ab:	add    BYTE PTR [rcx],al
 10169ad:	add    BYTE PTR [rax],al
 10169af:	add    BYTE PTR [rcx],al
 10169b1:	add    BYTE PTR [rax],al
 10169b3:	add    BYTE PTR [rax+0x169],bh
	...
 10169c1:	add    BYTE PTR [rax],al
 10169c3:	add    BYTE PTR [rax+0x38],dl
 10169c6:	add    DWORD PTR [rax],eax
 10169c8:	cmp    BYTE PTR [rax],al
 10169ca:	add    BYTE PTR [rax],al
 10169cc:	lock movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10169ce:	add    BYTE PTR [rax],al
 10169d0:	(bad)  
 10169d1:	(bad)  
 10169d2:	(bad)  
 10169d3:	call   QWORD PTR [rax]
 10169d5:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10169d6:	add    BYTE PTR [rax],al
 10169d8:	add    BYTE PTR [rax],al
 10169da:	add    BYTE PTR [rax],al
 10169dc:	and    ah,BYTE PTR [rbp-0x10000]
 10169e2:	(bad)  
 10169e3:	call   QWORD PTR [rax+0x38]
 10169e6:	add    DWORD PTR [rax],eax
 10169e8:	add    BYTE PTR [rax],al
 10169ea:	add    BYTE PTR [rax],al
 10169ec:	pop    rbp
 10169ed:	cmp    BYTE PTR [rcx],al
 10169ef:	add    BYTE PTR [rcx],al
 10169f1:	add    BYTE PTR [rax],al
 10169f3:	add    BYTE PTR [rax+0x38],ch
 10169f6:	add    DWORD PTR [rax],eax
 10169f8:	add    BYTE PTR [rax],al
 10169fa:	add    BYTE PTR [rax],al
 10169fc:	sbb    DWORD PTR [rdx],ecx
 10169fe:	add    al,BYTE PTR [rax]
 1016a00:	or     dh,BYTE PTR [rdx]
 1016a02:	(bad)  
 1016a03:	push   rax
 1016a04:	mov    BYTE PTR [rsi],al
 1016a06:	add    DWORD PTR [rax],eax
 1016a08:	and    BYTE PTR [rax],bl
 1016a0a:	add    BYTE PTR [rax],al
 1016a0c:	sbb    DWORD PTR [rip+0x62040001],ecx        # 0x63056a13
 1016a12:	add    BYTE PTR [rax],al
 1016a14:	mov    BYTE PTR [rsi],al
 1016a16:	add    DWORD PTR [rax],eax
 1016a18:	push   rax
 1016a19:	sbb    BYTE PTR [rax],al
 1016a1b:	add    bh,bh
 1016a1d:	(bad)  
 1016a1e:	(bad)  
 1016a1f:	inc    DWORD PTR [rax]
 1016a21:	add    BYTE PTR [rax],al
 1016a23:	add    bh,bh
 1016a25:	(bad)  
 1016a26:	(bad)  
 1016a27:	inc    DWORD PTR [rax]
	...
 1016a31:	add    BYTE PTR [rax],al
 1016a33:	add    BYTE PTR [rcx],al
 1016a35:	add    BYTE PTR [rax],al
 1016a37:	add    BYTE PTR [rcx],al
 1016a39:	add    BYTE PTR [rax],al
 1016a3b:	add    BYTE PTR [rax+0x6a],al
 1016a3e:	add    DWORD PTR [rax],eax
	...
 1016a4c:	cmp    BYTE PTR [rax],0x1
 1016a4f:	add    BYTE PTR [rax],bh
 1016a51:	add    BYTE PTR [rax],al
 1016a53:	add    BYTE PTR [rax-0x5b],al
 1016a56:	add    BYTE PTR [rax],al
 1016a58:	(bad)  
 1016a59:	(bad)  
 1016a5a:	(bad)  
 1016a5b:	jmp    FWORD PTR [rbp-0x5b]
 1016a5e:	add    BYTE PTR [rax],al
 1016a60:	add    BYTE PTR [rax],al
 1016a62:	add    BYTE PTR [rax],al
 1016a64:	js     0x1016a0b
 1016a66:	add    BYTE PTR [rax],al
 1016a68:	(bad)  
 1016a69:	(bad)  
 1016a6a:	(bad)  
 1016a6b:	inc    DWORD PTR [rax+0x138]
 1016a71:	add    BYTE PTR [rax],al
 1016a73:	add    BYTE PTR [rbp+0x1000138],cl
 1016a79:	add    BYTE PTR [rax],al
 1016a7b:	add    BYTE PTR [rcx],bl
 1016a7d:	or     al,BYTE PTR [rdx]
 1016a7f:	add    BYTE PTR [rdx],cl
 1016a81:	xor    al,BYTE PTR [rsi]
 1016a83:	push   rax
 1016a84:	mov    BYTE PTR [rsi],al
 1016a86:	add    DWORD PTR [rax],eax
 1016a88:	push   rax
 1016a89:	sbb    BYTE PTR [rax],al
 1016a8b:	add    BYTE PTR [rcx],bl
 1016a8d:	or     eax,0x62040001
 1016a92:	add    BYTE PTR [rax],al
 1016a94:	mov    BYTE PTR [rsi],al
 1016a96:	add    DWORD PTR [rax],eax
 1016a98:	sbb    BYTE PTR [rax],0x0
 1016a9b:	add    bh,bh
 1016a9d:	(bad)  
 1016a9e:	(bad)  
 1016a9f:	inc    DWORD PTR [rax]
 1016aa1:	add    BYTE PTR [rax],al
 1016aa3:	add    bh,bh
 1016aa5:	(bad)  
 1016aa6:	(bad)  
 1016aa7:	inc    DWORD PTR [rax]
	...
 1016ab1:	add    BYTE PTR [rax],al
 1016ab3:	add    BYTE PTR [rcx],al
 1016ab5:	add    BYTE PTR [rax],al
 1016ab7:	add    BYTE PTR [rcx],al
 1016ab9:	add    BYTE PTR [rax],al
 1016abb:	add    al,al
 1016abd:	push   0x1
	...
 1016acb:	add    BYTE PTR [rax+0x38000138],dh
 1016ad1:	add    BYTE PTR [rax],al
 1016ad3:	add    BYTE PTR [rax-0xffff5b],dl
 1016ad9:	(bad)  
 1016ada:	(bad)  
 1016adb:	jmp    QWORD PTR [rbx+0xa5]
 1016ae1:	add    BYTE PTR [rax],al
 1016ae3:	add    BYTE PTR [rsi-0xffff5b],ch
 1016ae9:	(bad)  
 1016aea:	(bad)  
 1016aeb:	push   QWORD PTR [rax+0x138]
 1016af1:	add    BYTE PTR [rax],al
 1016af3:	add    BYTE PTR [rcx],bl
 1016af5:	or     al,BYTE PTR [rdx]
 1016af7:	add    BYTE PTR [rdx],cl
 1016af9:	xor    al,BYTE PTR [rsi]
 1016afb:	push   rax
 1016afc:	mov    BYTE PTR [rsi],al
 1016afe:	add    DWORD PTR [rax],eax
 1016b00:	sbb    BYTE PTR [rax],0x0
 1016b03:	add    BYTE PTR [rcx],al
 1016b05:	or     al,BYTE PTR [rax+rax*1]
 1016b08:	or     dh,BYTE PTR [rsi+rax*1]
 1016b0b:	add    BYTE PTR [rdx],cl
 1016b0d:	xor    al,BYTE PTR [rsi]
 1016b0f:	jo     0x1016b2a
 1016b11:	(bad)  
 1016b12:	add    eax,DWORD PTR [rax]
 1016b14:	or     al,0x1
 1016b16:	xor    al,0x0
 1016b18:	add    eax,0xd0
 1016b1d:	(bad)  
 1016b1e:	add    DWORD PTR [rax],eax
 1016b20:	jo     0x1016b23
 1016b22:	add    BYTE PTR [rax],al
 1016b24:	and    DWORD PTR [rdx+rax*1],eax
 1016b27:	add    BYTE PTR [rsp+rax*8],al
 1016b2a:	xor    al,BYTE PTR [rax]
 1016b2c:	adc    BYTE PTR [rsi-0x59c50000],ah
 1016b32:	add    BYTE PTR [rax],al
 1016b34:	adc    BYTE PTR [rbx+0x1],ch
 1016b37:	add    BYTE PTR [rcx],ah
 1016b39:	sbb    BYTE PTR [rax+rax*1],cl
 1016b3c:	sbb    ah,dh
 1016b3e:	xor    BYTE PTR [rax],al
 1016b40:	adc    al,0xe4
 1016b42:	xor    DWORD PTR [rax],eax
 1016b44:	adc    BYTE PTR [rbx+rsi*1+0x0],dh
 1016b48:	or     al,0x64
 1016b4a:	cmp    DWORD PTR [rax],eax
 1016b4c:	or     BYTE PTR [rax+rdi*1+0x0],dl
 1016b50:	add    al,0x34
 1016b52:	(bad)  
 1016b53:	add    BYTE PTR [rbx],bh
 1016b55:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1016b56:	add    BYTE PTR [rax],al
 1016b58:	rex.WRXB cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1016b5a:	add    BYTE PTR [rax],al
 1016b5c:	and    al,0x6b
 1016b5e:	add    DWORD PTR [rax],eax
 1016b60:	and    DWORD PTR [rax],eax
 1016b62:	add    BYTE PTR [rax],al
 1016b64:	cmp    esp,DWORD PTR [rsi-0x59b10000]
 1016b6a:	add    BYTE PTR [rax],al
 1016b6c:	and    al,0x6b
 1016b6e:	add    DWORD PTR [rax],eax
 1016b70:	and    DWORD PTR [rax],eax
 1016b72:	add    BYTE PTR [rax],al
 1016b74:	adc    BYTE PTR [rsi-0x59c50000],ah
 1016b7a:	add    BYTE PTR [rax],al
 1016b7c:	adc    BYTE PTR [rbx+0x1],ch
 1016b7f:	add    BYTE PTR [rcx],bl
 1016b81:	or     eax,DWORD PTR ss:[rax]
 1016b84:	and    al,0x64
 1016b86:	cmp    al,0x0
 1016b88:	and    BYTE PTR [rbx+rdi*1],dh
 1016b8b:	add    BYTE PTR [rbx],dl
 1016b8d:	add    DWORD PTR [rax+rax*1],esi
 1016b90:	or     al,0xf0
 1016b92:	or     ah,al
 1016b94:	or     al,dl
 1016b96:	(bad)  
 1016b97:	rol    BYTE PTR [rax+rsi*2],0x0
 1016b9b:	add    BYTE PTR [rdi+rax*1],ah
 1016b9e:	add    DWORD PTR [rax],eax
 1016ba0:	mov    al,0x18
 1016ba2:	add    BYTE PTR [rax],al
 1016ba4:	xchg   ebx,eax
 1016ba5:	add    DWORD PTR [rax],eax
 1016ba7:	add    bh,bh
 1016ba9:	(bad)  
 1016baa:	(bad)  
 1016bab:	inc    DWORD PTR [rax]
 1016bad:	add    BYTE PTR [rax],al
 1016baf:	add    BYTE PTR [rax],al
 1016bb1:	add    BYTE PTR [rax],al
 1016bb3:	add    al,ah
 1016bb5:	cmp    BYTE PTR [rcx],al
 1016bb7:	add    bh,bh
 1016bb9:	(bad)  
 1016bba:	(bad)  
 1016bbb:	inc    DWORD PTR [rax]
 1016bbd:	add    BYTE PTR [rax],al
 1016bbf:	add    BYTE PTR [rax],al
 1016bc1:	add    BYTE PTR [rax],al
 1016bc3:	add    BYTE PTR [rcx],al
 1016bc5:	add    BYTE PTR [rax],al
 1016bc7:	add    BYTE PTR [rdx],al
 1016bc9:	add    BYTE PTR [rax],al
 1016bcb:	add    BYTE PTR [rcx],al
 1016bcd:	add    BYTE PTR [rax],al
 1016bcf:	add    ah,dl
 1016bd1:	imul   eax,DWORD PTR [rcx],0x0
	...
 1016be0:	lock cmp BYTE PTR [rcx],al
 1016be3:	add    BYTE PTR [rax+0x0],bh
 1016be6:	add    BYTE PTR [rax],al
 1016be8:	stos   BYTE PTR es:[rdi],al
 1016bea:	add    BYTE PTR [rax],al
 1016bec:	(bad)  
 1016bed:	(bad)  
 1016bee:	(bad)  
 1016bef:	dec    DWORD PTR [rbp+0xaa]
 1016bf5:	add    BYTE PTR [rax],al
 1016bf7:	add    BYTE PTR [rdx+rbp*4+0x10000],bl
 1016bfe:	add    BYTE PTR [rax],al
 1016c00:	mov    ah,0xaa
 1016c02:	add    BYTE PTR [rax],al
 1016c04:	add    BYTE PTR [rax],al
 1016c06:	add    BYTE PTR [rax],al
 1016c08:	shr    BYTE PTR [rsi-0x10000],1
 1016c0e:	(bad)  
 1016c0f:	push   rax
 1016c11:	cmp    BYTE PTR [rcx],al
 1016c13:	add    BYTE PTR [rax],al
 1016c15:	add    BYTE PTR [rax],al
 1016c17:	add    dh,bh
 1016c19:	cmp    BYTE PTR [rcx],al
 1016c1b:	add    BYTE PTR [rdx],al
 1016c1d:	add    BYTE PTR [rax],al
 1016c1f:	add    BYTE PTR [rdx],ch
 1016c21:	cmp    DWORD PTR [rcx],eax
 1016c23:	add    BYTE PTR [rax],al
 1016c25:	add    BYTE PTR [rax],al
 1016c27:	add    BYTE PTR [rcx],bl
 1016c29:	or     eax,DWORD PTR [rbx]
 1016c2b:	add    BYTE PTR [rbx],cl
 1016c2d:	movabs ds:0x688000030065007,al
 1016c36:	add    DWORD PTR [rax],eax
 1016c38:	mov    al,0x18
 1016c3a:	add    BYTE PTR [rax],al
 1016c3c:	add    DWORD PTR [rdi],ecx
 1016c3e:	(bad)  
 1016c3f:	add    BYTE PTR [rdi],cl
 1016c41:	adc    eax,DWORD PTR fs:[rax]
 1016c44:	andps  xmm2,XMMWORD PTR [rdx]
 1016c47:	add    BYTE PTR [rdi],cl
 1016c49:	ror    BYTE PTR [rbx],cl
 1016c4b:	jo     0x1016c6e
 1016c4d:	or     BYTE PTR [rdx],al
 1016c4f:	add    BYTE PTR [rax],cl
 1016c51:	xor    al,0x11
 1016c53:	add    BYTE PTR [rax],dl
 1016c55:	scas   eax,DWORD PTR es:[rdi]
 1016c56:	add    BYTE PTR [rax],al
 1016c58:	rex.WX scas rax,QWORD PTR es:[rdi]
 1016c5a:	add    BYTE PTR [rax],al
 1016c5c:	cmp    al,0x6c
 1016c5e:	add    DWORD PTR [rax],eax
 1016c60:	and    DWORD PTR [rax],eax
 1016c62:	add    BYTE PTR [rax],al
 1016c64:	adc    BYTE PTR [rdi-0x50b60000],ch
 1016c6a:	add    BYTE PTR [rax],al
 1016c6c:	cmp    al,0x6c
 1016c6e:	add    DWORD PTR [rax],eax
 1016c70:	add    DWORD PTR [rsp+rax*1],ecx
 1016c73:	add    BYTE PTR [rsp+rsi*1],cl
 1016c76:	or     eax,0x8920c00
 1016c7b:	jo     0x1016c7e
 1016c7d:	adc    eax,0xb2150002
 1016c82:	adc    eax,esp
 1016c84:	and    DWORD PTR [rdx+rax*1],eax
 1016c87:	add    BYTE PTR [rsp+rsi*1],al
 1016c8a:	or     eax,DWORD PTR [rax]
 1016c8c:	and    BYTE PTR [rdx-0x4dba0000],dh
 1016c92:	add    BYTE PTR [rax],al
 1016c94:	jl     0x1016d02
 1016c96:	add    DWORD PTR [rax],eax
 1016c98:	and    DWORD PTR [rax],edx
 1016c9a:	(bad)  
 1016c9b:	add    BYTE PTR [rax],dl
 1016c9d:	je     0x1016ca7
 1016c9f:	add    BYTE PTR [rax],cl
 1016ca1:	or     DWORD PTR fs:[rax],eax
 1016ca4:	add    al,0x54
 1016ca6:	or     al,BYTE PTR [rax]
 1016ca8:	rex.RX mov dl,0x0
 1016cab:	add    BYTE PTR [rdx-0x4e],cl
 1016cae:	add    BYTE PTR [rax],al
 1016cb0:	test   BYTE PTR [rcx+rax*1+0x0],ch
 1016cb4:	and    DWORD PTR [rax],eax
 1016cb6:	add    al,0x0
 1016cb8:	add    BYTE PTR [rax+rcx*1+0x0],dh
 1016cbc:	add    BYTE PTR [rcx+rcx*1+0x0],ah
 1016cc0:	rex.RX mov dl,0x0
 1016cc3:	add    BYTE PTR [rdx-0x4e],cl
 1016cc6:	add    BYTE PTR [rax],al
 1016cc8:	test   BYTE PTR [rcx+rax*1+0x0],ch
 1016ccc:	and    DWORD PTR [rax],eax
 1016cce:	add    BYTE PTR [rax],al
 1016cd0:	and    BYTE PTR [rdx-0x4dba0000],dh
 1016cd6:	add    BYTE PTR [rax],al
 1016cd8:	jl     0x1016d46
 1016cda:	add    DWORD PTR [rax],eax
 1016cdc:	add    DWORD PTR [rax],ebx
 1016cde:	add    al,BYTE PTR [rax]
 1016ce0:	sbb    dl,dh
 1016ce2:	adc    eax,esi
 1016ce4:	and    DWORD PTR [rdx+rax*1],eax
 1016ce7:	add    BYTE PTR [rsp+rsi*1],al
 1016cea:	(bad)  
 1016cec:	jo     0x1016ca2
 1016cee:	add    BYTE PTR [rax],al
 1016cf0:	cdq    
 1016cf1:	mov    ah,0x0
 1016cf3:	add    ah,bl
 1016cf5:	ins    BYTE PTR es:[rdi],dx
 1016cf6:	add    DWORD PTR [rax],eax
 1016cf8:	and    DWORD PTR [rsi+rax*1],ecx
 1016cfb:	add    BYTE PTR [rsp+rsi*2],cl
 1016cfe:	or     al,0x0
 1016d00:	or     BYTE PTR [rbp+rcx*1+0x0],ah
 1016d04:	add    al,0x54
 1016d06:	(bad)  
 1016d07:	add    BYTE PTR [rcx-0x62ffff4c],bl
 1016d0d:	mov    ah,0x0
 1016d0f:	add    ah,ah
 1016d11:	ins    BYTE PTR es:[rdi],dx
 1016d12:	add    DWORD PTR [rax],eax
 1016d14:	and    DWORD PTR [rdx+rax*1],eax
 1016d17:	add    BYTE PTR [rsp+riz*8],al
 1016d1a:	or     eax,DWORD PTR [rax]
 1016d1c:	popf   
 1016d1d:	mov    ah,0x0
 1016d1f:	add    BYTE PTR [rcx-0x7ffff4c],ch
 1016d25:	ins    BYTE PTR es:[rdi],dx
 1016d26:	add    DWORD PTR [rax],eax
 1016d28:	and    DWORD PTR [rax],eax
 1016d2a:	add    BYTE PTR [rax],al
 1016d2c:	popf   
 1016d2d:	mov    ah,0x0
 1016d2f:	add    BYTE PTR [rcx-0x7ffff4c],ch
 1016d35:	ins    BYTE PTR es:[rdi],dx
 1016d36:	add    DWORD PTR [rax],eax
 1016d38:	and    DWORD PTR [rax],eax
 1016d3a:	add    al,0x0
 1016d3c:	add    BYTE PTR [rsp+rcx*1+0x0],dh
 1016d40:	add    BYTE PTR [rbp+rcx*1+0x0],ah
 1016d44:	cdq    
 1016d45:	mov    ah,0x0
 1016d47:	add    BYTE PTR [rbp-0x1bffff4c],bl
 1016d4d:	ins    BYTE PTR es:[rdi],dx
 1016d4e:	add    DWORD PTR [rax],eax
 1016d50:	and    DWORD PTR [rax],eax
 1016d52:	add    BYTE PTR [rax],al
 1016d54:	jo     0x1016d0a
 1016d56:	add    BYTE PTR [rax],al
 1016d58:	cdq    
 1016d59:	mov    ah,0x0
 1016d5b:	add    ah,bl
 1016d5d:	ins    BYTE PTR es:[rdi],dx
 1016d5e:	add    DWORD PTR [rax],eax
 1016d60:	adc    DWORD PTR [rdi],ebx
 1016d62:	or     BYTE PTR [rax],al
 1016d64:	(bad)  
 1016d65:	xor    al,0x17
 1016d67:	add    BYTE PTR [rdi],cl
 1016d69:	ror    BYTE PTR [rax],cl
 1016d6b:	lock (bad) 
 1016d6d:	loopne 0x1016d73
 1016d6f:	jo     0x1016d74
 1016d71:	(bad)  
 1016d72:	add    dl,BYTE PTR [rax-0x78]
 1016d75:	(bad)  
 1016d76:	add    DWORD PTR [rax],eax
 1016d78:	loopne 0x1016d92
 1016d7a:	add    BYTE PTR [rax],al
 1016d7c:	(bad)  
 1016d7d:	(bad)  
 1016d7e:	(bad)  
 1016d7f:	jmp    QWORD PTR [rax+0x139]
 1016d85:	add    BYTE PTR [rax],al
 1016d87:	add    BYTE PTR [rax-0x4ffffec7],dh
 1016d8d:	mov    dh,0x0
 1016d8f:	add    bh,bh
 1016d91:	(bad)  
 1016d92:	(bad)  
 1016d93:	jmp    rsp
 1016d95:	mov    dh,0x0
 1016d97:	add    BYTE PTR [rax],al
 1016d99:	add    BYTE PTR [rax],al
 1016d9b:	add    bl,dh
 1016d9d:	mov    dh,0x0
 1016d9f:	add    BYTE PTR [rcx],al
 1016da1:	add    BYTE PTR [rax],al
 1016da3:	add    BYTE PTR [rcx],dh
 1016da5:	mov    edx,0x0
 1016daa:	add    BYTE PTR [rax],al
 1016dac:	rex.RXB mov r10d,0xffff0000
 1016db2:	(bad)  
 1016db3:	inc    DWORD PTR [rcx]
 1016db5:	add    al,0x1
 1016db7:	add    BYTE PTR [rdx+rax*2],al
 1016dba:	add    BYTE PTR [rax],al
 1016dbc:	add    DWORD PTR [rsi],eax
 1016dbe:	add    al,BYTE PTR [rax]
 1016dc0:	(bad)  
 1016dc1:	xor    al,BYTE PTR [rdx]
 1016dc3:	xor    BYTE PTR [rcx],dl
 1016dc5:	or     al,BYTE PTR [rax+rax*1]
 1016dc8:	or     dh,BYTE PTR [rsi+rax*1]
 1016dcb:	add    BYTE PTR [rdx],cl
 1016dcd:	xor    al,BYTE PTR [rsi]
 1016dcf:	jo     0x1016deb
 1016dd1:	movabs eax,ds:0xbd31000000010000
 1016dda:	add    BYTE PTR [rax],al
 1016ddc:	jl     0x1016d9b
 1016dde:	add    BYTE PTR [rax],al
 1016de0:	adc    BYTE PTR [rbx],bh
 1016de2:	add    DWORD PTR [rax],eax
 1016de4:	add    BYTE PTR [rax],al
 1016de6:	add    BYTE PTR [rax],al
 1016de8:	add    DWORD PTR [rsi],eax
 1016dea:	add    al,BYTE PTR [rax]
 1016dec:	(bad)  
 1016ded:	xor    al,BYTE PTR [rdx]
 1016def:	push   rax
 1016df0:	adc    DWORD PTR [rdi],ebp
 1016df2:	or     eax,0x2f742f00
 1016df7:	add    BYTE PTR [rbx],ch
 1016df9:	fs add BYTE PTR cs:[rdi],ah
 1016dfd:	xor    al,0x2c
 1016dff:	add    BYTE PTR [rbx],bl
 1016e01:	add    DWORD PTR [rsi],esp
 1016e03:	add    BYTE PTR [rax],dl
 1016e05:	lock (bad) 
 1016e07:	loopne 0x1016e15
 1016e09:	ror    BYTE PTR [rdx],1
 1016e0b:	ror    BYTE PTR [rax],0x50
 1016e0e:	add    BYTE PTR [rax],al
 1016e10:	mov    BYTE PTR [rsi],al
 1016e12:	add    DWORD PTR [rax],eax
 1016e14:	adc    BYTE PTR [rcx],bl
 1016e16:	add    BYTE PTR [rax],al
 1016e18:	(bad)  
 1016e19:	(bad)  
 1016e1a:	(bad)  
 1016e1b:	call   rax
 1016e1d:	cmp    DWORD PTR [rcx],eax
 1016e1f:	add    BYTE PTR [rax],al
 1016e21:	add    BYTE PTR [rax],al
 1016e23:	add    al,ah
 1016e25:	cmp    DWORD PTR [rcx],eax
 1016e27:	add    BYTE PTR [rax],al
 1016e29:	add    BYTE PTR [rax],al
 1016e2b:	add    al,dh
 1016e2d:	cmp    DWORD PTR [rcx],eax
 1016e2f:	add    BYTE PTR [rdx],al
 1016e31:	add    BYTE PTR [rax],al
 1016e33:	add    BYTE PTR [rax],al
 1016e35:	cmp    al,BYTE PTR [rcx]
 1016e37:	add    BYTE PTR [rax],al
 1016e39:	add    BYTE PTR [rax],al
 1016e3b:	add    BYTE PTR [rax],dl
 1016e3d:	cmp    al,BYTE PTR [rcx]
 1016e3f:	add    BYTE PTR [rax-0xffff43],ah
 1016e45:	(bad)  
 1016e46:	(bad)  
 1016e47:	(bad)  
 1016e48:	fstp   TBYTE PTR [rbp+0x0]
 1016e4e:	add    BYTE PTR [rax],al
 1016e50:	push   rax
 1016e51:	mov    esi,0x20000
 1016e56:	add    BYTE PTR [rax],al
 1016e58:	(bad)  
 1016e59:	mov    esi,0x30000
 1016e5e:	add    BYTE PTR [rax],al
 1016e60:	mov    si,0x0
 1016e64:	add    al,BYTE PTR [rax]
 1016e66:	add    BYTE PTR [rax],al
 1016e68:	ja     0x1016e28
 1016e6a:	add    BYTE PTR [rax],al
 1016e6c:	add    BYTE PTR [rax],al
 1016e6e:	add    BYTE PTR [rax],al
 1016e70:	adc    DWORD PTR [rcx],ebp
 1016e72:	or     DWORD PTR [rax],eax
 1016e74:	and    BYTE PTR [rcx],al
 1016e76:	sub    BYTE PTR [rax],al
 1016e78:	sbb    eax,esi
 1016e7a:	(bad)  
 1016e7b:	loopne 0x1016e92
 1016e7d:	rcl    BYTE PTR [rbx],0x70
 1016e80:	adc    ah,BYTE PTR [rax+0x11]
 1016e83:	push   rax
 1016e84:	adc    BYTE PTR [rax],dh
 1016e86:	add    BYTE PTR [rax],al
 1016e88:	mov    BYTE PTR [rsi],al
 1016e8a:	add    DWORD PTR [rax],eax
 1016e8c:	rex sbb DWORD PTR [rax],eax
 1016e8f:	add    bh,bh
 1016e91:	(bad)  
 1016e92:	(bad)  
 1016e93:	jmp    QWORD PTR [rax+0x13a]
 1016e99:	add    BYTE PTR [rax],al
 1016e9b:	add    BYTE PTR [rax+0x100013a],dh
 1016ea1:	add    BYTE PTR [rax],al
 1016ea3:	add    al,al
 1016ea5:	cmp    al,BYTE PTR [rcx]
 1016ea7:	add    BYTE PTR [rcx],al
 1016ea9:	add    BYTE PTR [rax],al
 1016eab:	add    al,dl
 1016ead:	cmp    al,BYTE PTR [rcx]
 1016eaf:	add    BYTE PTR [rbx],al
 1016eb1:	add    BYTE PTR [rax],al
 1016eb3:	add    al,ah
 1016eb5:	cmp    al,BYTE PTR [rcx]
 1016eb7:	add    BYTE PTR [rcx],al
 1016eb9:	add    BYTE PTR [rax],al
 1016ebb:	add    al,dh
 1016ebd:	cmp    al,BYTE PTR [rcx]
 1016ebf:	add    BYTE PTR [rax-0xffff41],dh
 1016ec5:	(bad)  
 1016ec6:	(bad)  
 1016ec7:	(bad)  
 1016ec8:	fistp  QWORD PTR [rdi+0x0]
 1016ece:	add    BYTE PTR [rax],al
 1016ed0:	icebp  
 1016ed1:	mov    edi,0x10000
 1016ed6:	add    BYTE PTR [rax],al
 1016ed8:	mov    edi,0x30000c0
 1016edd:	add    BYTE PTR [rax],al
 1016edf:	add    al,dl
 1016ee1:	rol    BYTE PTR [rax],0x0
 1016ee4:	add    al,0x0
 1016ee6:	add    BYTE PTR [rax],al
 1016ee8:	(bad)  
 1016ee9:	rol    BYTE PTR [rax],0x0
 1016eec:	add    eax,DWORD PTR [rax]
 1016eee:	add    BYTE PTR [rax],al
 1016ef0:	out    0xc0,eax
 1016ef2:	add    BYTE PTR [rax],al
 1016ef4:	add    DWORD PTR [rax],eax
 1016ef6:	add    BYTE PTR [rax],al
 1016ef8:	adc    DWORD PTR [rcx+rcx*1],esp
 1016efb:	add    BYTE PTR [rbx],bl
 1016efd:	add    DWORD PTR [rax],ebp
 1016eff:	add    BYTE PTR [rax+rsi*8],dl
 1016f02:	adc    ah,al
 1016f04:	adc    al,al
 1016f06:	(bad)  
 1016f07:	jo     0x1016f16
 1016f09:	(bad)  
 1016f0a:	or     al,0x50
 1016f0c:	or     esi,DWORD PTR [rax]
 1016f0e:	add    BYTE PTR [rax],al
 1016f10:	mov    BYTE PTR [rsi],al
 1016f12:	add    DWORD PTR [rax],eax
 1016f14:	jo     0x1016f2f
 1016f16:	add    BYTE PTR [rax],al
 1016f18:	(bad)  
 1016f19:	(bad)  
 1016f1a:	(bad)  
 1016f1b:	push   QWORD PTR [rax]
 1016f1d:	cmp    al,BYTE PTR [rcx]
 1016f1f:	add    BYTE PTR [rax],al
 1016f21:	add    BYTE PTR [rax],al
 1016f23:	add    BYTE PTR [rax+0x3a],al
 1016f26:	add    DWORD PTR [rax],eax
 1016f28:	add    DWORD PTR [rax],eax
 1016f2a:	add    BYTE PTR [rax],al
 1016f2c:	push   rax
 1016f2d:	cmp    al,BYTE PTR [rcx]
 1016f2f:	add    BYTE PTR [rcx],al
 1016f31:	add    BYTE PTR [rax],al
 1016f33:	add    BYTE PTR [rax+0x3a],ah
 1016f36:	add    DWORD PTR [rax],eax
 1016f38:	add    eax,DWORD PTR [rax]
 1016f3a:	add    BYTE PTR [rax],al
 1016f3c:	jo     0x1016f78
 1016f3e:	add    DWORD PTR [rax],eax
 1016f40:	add    DWORD PTR [rax],eax
 1016f42:	add    BYTE PTR [rax],al
 1016f44:	cmp    BYTE PTR [rdx],0x1
 1016f47:	add    BYTE PTR [rax-0xffff3f],ah
 1016f4d:	(bad)  
 1016f4e:	(bad)  
 1016f4f:	dec    ebp
 1016f51:	rol    DWORD PTR [rax],0x0
 1016f54:	add    BYTE PTR [rax],al
 1016f56:	add    BYTE PTR [rax],al
 1016f58:	ffreep st(1)
 1016f5a:	add    BYTE PTR [rax],al
 1016f5c:	add    DWORD PTR [rax],eax
 1016f5e:	add    BYTE PTR [rax],al
 1016f60:	(bad)  
 1016f61:	ret    0x0
 1016f64:	add    eax,DWORD PTR [rax]
 1016f66:	add    BYTE PTR [rax],al
 1016f68:	sahf   
 1016f69:	ret    0x0
 1016f6c:	add    al,0x0
 1016f6e:	add    BYTE PTR [rax],al
 1016f70:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1016f71:	ret    0x0
 1016f74:	add    eax,DWORD PTR [rax]
 1016f76:	add    BYTE PTR [rax],al
 1016f78:	mov    ch,0xc2
 1016f7a:	add    BYTE PTR [rax],al
 1016f7c:	add    DWORD PTR [rax],eax
 1016f7e:	add    BYTE PTR [rax],al
 1016f80:	adc    DWORD PTR [rcx],ebp
 1016f82:	or     DWORD PTR [rax],eax
 1016f84:	and    BYTE PTR [rcx],al
 1016f86:	sub    BYTE PTR [rax],al
 1016f88:	sbb    eax,esi
 1016f8a:	(bad)  
 1016f8b:	loopne 0x1016fa2
 1016f8d:	rcl    BYTE PTR [rbx],0x70
 1016f90:	adc    ah,BYTE PTR [rax+0x11]
 1016f93:	push   rax
 1016f94:	adc    BYTE PTR [rax],dh
 1016f96:	add    BYTE PTR [rax],al
 1016f98:	mov    BYTE PTR [rsi],al
 1016f9a:	add    DWORD PTR [rax],eax
 1016f9c:	movabs al,ds:0x40ffffffff000019
 1016fa5:	cmp    DWORD PTR [rcx],eax
 1016fa7:	add    BYTE PTR [rax],al
 1016fa9:	add    BYTE PTR [rax],al
 1016fab:	add    BYTE PTR [rax+0x39],dl
 1016fae:	add    DWORD PTR [rax],eax
 1016fb0:	add    DWORD PTR [rax],eax
 1016fb2:	add    BYTE PTR [rax],al
 1016fb4:	(bad)  
 1016fb5:	cmp    DWORD PTR [rcx],eax
 1016fb7:	add    BYTE PTR [rdx],al
 1016fb9:	add    BYTE PTR [rax],al
 1016fbb:	add    BYTE PTR [rax+0x39],dh
 1016fbe:	add    DWORD PTR [rax],eax
 1016fc0:	add    DWORD PTR [rax],eax
 1016fc2:	add    BYTE PTR [rax],al
 1016fc4:	cmp    BYTE PTR [rcx],0x1
 1016fc7:	add    BYTE PTR [rax-0x3d],ah
 1016fca:	add    BYTE PTR [rax],al
 1016fcc:	(bad)  
 1016fcd:	(bad)  
 1016fce:	(bad)  
 1016fcf:	dec    DWORD PTR [rdi+0xc3]
 1016fd5:	add    BYTE PTR [rax],al
 1016fd7:	add    BYTE PTR [rcx+0x10000c3],ah
 1016fdd:	add    BYTE PTR [rax],al
 1016fdf:	add    bl,bh
 1016fe1:	ret    
 1016fe2:	add    BYTE PTR [rax],al
 1016fe4:	add    al,BYTE PTR [rax]
 1016fe6:	add    BYTE PTR [rax],al
 1016fe8:	or     al,0xc4
 1016fea:	add    BYTE PTR [rax],al
 1016fec:	add    eax,DWORD PTR [rax]
 1016fee:	add    BYTE PTR [rax],al
 1016ff0:	adc    al,ah
 1016ff2:	add    BYTE PTR [rax],al
 1016ff4:	add    al,BYTE PTR [rax]
 1016ff6:	add    BYTE PTR [rax],al
 1016ff8:	and    eax,esp
 1016ffa:	add    BYTE PTR [rax],al
 1016ffc:	add    DWORD PTR [rax],eax
 1016ffe:	add    BYTE PTR [rax],al
 1017000:	jb     0x1016fc6
 1017002:	add    BYTE PTR [rax],al
 1017004:	add    al,0x0
 1017006:	add    BYTE PTR [rax],al
 1017008:	jne    0x1016fce
 101700a:	add    BYTE PTR [rax],al
 101700c:	add    DWORD PTR [rax],eax
 101700e:	add    BYTE PTR [rax],al
 1017010:	pop    rsp
 1017012:	add    BYTE PTR [rax],al
 1017014:	add    BYTE PTR [rax],al
 1017016:	add    BYTE PTR [rax],al
 1017018:	cwde   
 1017019:	(bad)  
 101701a:	add    BYTE PTR [rax],al
 101701c:	(bad)  
 101701d:	(bad)  
 101701e:	(bad)  
 101701f:	call   FWORD PTR [rcx]
 1017021:	sbb    eax,0x10b0005
 1017026:	rex.WR add BYTE PTR [rax+rsi*2],r8b
 101702a:	add    esp,DWORD PTR [rax+0x2]
 101702d:	xor    BYTE PTR [rax],al
 101702f:	add    BYTE PTR [rax],al
 1017031:	(bad)  
 1017032:	add    DWORD PTR [rax],eax
 1017034:	push   rax
 1017035:	add    al,BYTE PTR [rax]
 1017037:	add    BYTE PTR [rcx],al
 1017039:	or     al,BYTE PTR [rax+rax*1]
 101703c:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 1017040:	add    eax,0x11000134
 1017045:	(bad)  
 1017046:	add    al,BYTE PTR [rax]
 1017048:	(bad)  
 1017049:	add    DWORD PTR [rip+0x1068800],edx        # 0x207f84f
 101704f:	add    BYTE PTR [rax+0x25],cl
 1017052:	add    BYTE PTR [rax],al
 1017054:	(bad)  
 1017055:	(bad)  
 1017056:	(bad)  
 1017057:	push   QWORD PTR [rax+0x4a]
 101705a:	add    DWORD PTR [rax],eax
 101705c:	add    BYTE PTR [rax],al
 101705e:	add    BYTE PTR [rax],al
 1017060:	or     BYTE PTR [rdx+0x1],0x0
 1017064:	lock mov BYTE PTR [rax],0x0
 1017068:	(bad)  
 1017069:	(bad)  
 101706a:	(bad)  
 101706b:	inc    DWORD PTR [rsi]
 101706d:	mov    DWORD PTR [rax],0x0
 1017073:	add    BYTE PTR [rcx],al
 1017075:	(bad)  
 1017076:	add    al,BYTE PTR [rax]
 1017078:	(bad)  
 1017079:	xor    al,BYTE PTR [rdx]
 101707b:	xor    BYTE PTR [rcx],dl
 101707d:	(bad)  
 101707e:	or     eax,DWORD PTR [rax]
 1017080:	(bad)  
 1017081:	je     0x10170b6
 1017083:	add    BYTE PTR [rbx],ah
 1017085:	xor    al,BYTE PTR fs:[rax]
 1017088:	(bad)  
 1017089:	xor    al,0x31
 101708b:	add    BYTE PTR [rbx],dl
 101708d:	add    DWORD PTR [rax+rax*1],ebp
 1017090:	or     al,dh
 1017092:	(bad)  
 1017093:	loopne 0x1017099
 1017095:	push   rax
 1017096:	add    BYTE PTR [rax],al
 1017098:	mov    BYTE PTR [rsi],al
 101709a:	add    DWORD PTR [rax],eax
 101709c:	jo     0x10170c3
 101709e:	add    BYTE PTR [rax],al
 10170a0:	(bad)  
 10170a1:	(bad)  
 10170a2:	(bad)  
 10170a3:	inc    DWORD PTR [rax-0xfffeb9]
 10170a9:	(bad)  
 10170aa:	(bad)  
 10170ab:	call   QWORD PTR [rax+0x1000147]
 10170b1:	add    BYTE PTR [rax],al
 10170b3:	add    BYTE PTR [rax+0x10000147],ah
 10170b9:	enter  0x0,0xff
 10170bd:	(bad)  
 10170be:	(bad)  
 10170bf:	push   QWORD PTR [rdx+0x10000c8]
 10170c5:	add    BYTE PTR [rax],al
 10170c7:	add    BYTE PTR [rdx-0x37],al
 10170ca:	add    BYTE PTR [rax],al
 10170cc:	(bad)  
 10170cd:	(bad)  
 10170ce:	(bad)  
 10170cf:	call   QWORD PTR [rcx]
 10170d1:	adc    DWORD PTR [rcx],eax
 10170d3:	add    BYTE PTR [rcx],cl
 10170d5:	and    al,BYTE PTR [rax]
 10170d7:	add    BYTE PTR [rax-0x67fffefa],cl
 10170dd:	and    eax,0xffff0000
 10170e2:	(bad)  
 10170e3:	inc    DWORD PTR [rax+0x41]
 10170e6:	add    DWORD PTR [rax],eax
 10170e8:	ror    cl,1
 10170ea:	add    BYTE PTR [rax],al
 10170ec:	(bad)  
 10170ed:	(bad)  
 10170ee:	(bad)  
 10170ef:	call   QWORD PTR [rcx]
 10170f1:	adc    eax,DWORD PTR [rdx]
 10170f3:	add    BYTE PTR [rdx],cl
 10170f5:	push   rdx
 10170f6:	(bad)  
 10170f7:	xor    BYTE PTR [rax-0x3ffffefa],cl
 10170fd:	and    eax,0xffff0000
 1017102:	(bad)  
 1017103:	jmp    QWORD PTR [rax]
 1017105:	add    DWORD PTR [rax],r8d
 1017108:	add    dl,cl
 101710a:	add    BYTE PTR [rax],al
 101710c:	(bad)  
 101710d:	(bad)  
 101710e:	(bad)  
 101710f:	call   QWORD PTR [rcx]
 1017111:	or     eax,DWORD PTR es:[rax]
 1017114:	es fs add BYTE PTR es:[rdx],ah
 1017119:	xor    al,0x25
 101711b:	add    BYTE PTR [rsi],dl
 101711d:	add    DWORD PTR [rsi],ebx
 101711f:	add    BYTE PTR [rbx],cl
 1017121:	lock or eax,esp
 1017124:	(bad)  
 1017125:	rol    BYTE PTR [rip+0x500470],0x0        # 0x151759c
 101712c:	mov    BYTE PTR [rsi],al
 101712e:	add    DWORD PTR [rax],eax
 1017130:	call   0x1715a
 1017135:	(bad)  
 1017136:	(bad)  
 1017137:	inc    DWORD PTR [rax+0x48]
 101713a:	add    DWORD PTR [rax],eax
 101713c:	(bad)  
 101713d:	(bad)  
 101713e:	(bad)  
 101713f:	call   QWORD PTR [rax+0x48]
 1017142:	add    DWORD PTR [rax],eax
 1017144:	add    DWORD PTR [rax],eax
 1017146:	add    BYTE PTR [rax],al
 1017148:	(bad)  
 1017149:	add    QWORD PTR [rax],rax
 101714c:	rex retf 0x0
 1017150:	(bad)  
 1017151:	(bad)  
 1017152:	(bad)  
 1017153:	jmp    rax
 1017155:	retf   0x0
 1017158:	add    DWORD PTR [rax],eax
 101715a:	add    BYTE PTR [rax],al
 101715c:	or     ebx,0x0
 101715f:	add    bh,bh
 1017161:	(bad)  
 1017162:	(bad)  
 1017163:	call   FWORD PTR [rcx]
 1017165:	and    DWORD PTR [rcx],ecx
 1017167:	add    BYTE PTR [rcx],bl
 1017169:	add    DWORD PTR [rdx],esp
 101716b:	add    BYTE PTR [rdx],dl
 101716d:	lock adc al,ah
 1017170:	(bad)  
 1017171:	ror    BYTE PTR [rax+rax*8],1
 1017174:	or     dh,BYTE PTR [rax+0x9]
 1017177:	(bad)  
 1017178:	or     BYTE PTR [rax],dh
 101717a:	add    BYTE PTR [rax],al
 101717c:	mov    BYTE PTR [rsi],al
 101717e:	add    DWORD PTR [rax],eax
 1017180:	adc    BYTE PTR [rsi],ah
 1017182:	add    BYTE PTR [rax],al
 1017184:	(bad)  
 1017185:	(bad)  
 1017186:	(bad)  
 1017187:	jmp    QWORD PTR [rax-0xfffec5]
 101718d:	(bad)  
 101718e:	(bad)  
 101718f:	push   QWORD PTR [rax+0x100013b]
 1017195:	add    BYTE PTR [rax],al
 1017197:	add    al,al
 1017199:	cmp    eax,DWORD PTR [rcx]
 101719b:	add    BYTE PTR [rcx],al
 101719d:	add    BYTE PTR [rax],al
 101719f:	add    al,dl
 10171a1:	cmp    eax,DWORD PTR [rcx]
 10171a3:	add    BYTE PTR [rcx],al
 10171a5:	add    BYTE PTR [rax],al
 10171a7:	add    al,ah
 10171a9:	cmp    eax,DWORD PTR [rcx]
 10171ab:	add    BYTE PTR [rcx],al
 10171ad:	add    BYTE PTR [rax],al
 10171af:	add    al,dh
 10171b1:	cmp    eax,DWORD PTR [rcx]
 10171b3:	add    BYTE PTR [rip+0x0],al        # 0x10171b9
 10171b9:	add    BYTE PTR [rax],al
 10171bb:	add    BYTE PTR [rsi],al
 10171bd:	add    BYTE PTR [rax],al
 10171bf:	add    BYTE PTR [rax],al
 10171c1:	cmp    al,0x1
 10171c3:	add    BYTE PTR [rsi],al
 10171c5:	add    BYTE PTR [rax],al
 10171c7:	add    BYTE PTR [rax],dl
 10171c9:	cmp    al,0x1
 10171cb:	add    BYTE PTR [rip+0x0],al        # 0x10171d1
 10171d1:	add    BYTE PTR [rax],al
 10171d3:	add    BYTE PTR [rcx],cl
 10171d5:	add    BYTE PTR [rax],al
 10171d7:	add    al,ah
 10171d9:	cmp    al,0x1
 10171db:	add    BYTE PTR [rcx],cl
 10171dd:	add    BYTE PTR [rax],al
 10171df:	add    al,al
 10171e1:	cmp    eax,0x90001
 10171e6:	add    BYTE PTR [rax],al
 10171e8:	movabs al,ds:0xb00000000100013e
 10171f1:	add    DWORD PTR ds:[rax],eax
 10171f4:	add    DWORD PTR [rax],eax
 10171f6:	add    BYTE PTR [rax],al
 10171f8:	sar    BYTE PTR [rsi],0x1
 10171fb:	add    BYTE PTR [rcx],al
 10171fd:	add    BYTE PTR [rax],al
 10171ff:	add    al,dl
 1017201:	add    DWORD PTR ds:[rax],eax
 1017204:	(bad)  
 1017205:	add    BYTE PTR [rax],al
 1017207:	add    BYTE PTR [rax],cl
 1017209:	add    BYTE PTR [rax],al
 101720b:	add    BYTE PTR [rax+rax*1],cl
 101720e:	add    BYTE PTR [rax],al
 1017210:	add    eax,DWORD PTR [rax]
 1017212:	add    BYTE PTR [rax],al
 1017214:	sbb    BYTE PTR [rdx+0x1],dh
 1017217:	add    BYTE PTR [rax],al
 1017219:	add    BYTE PTR [rax],al
 101721b:	add    BYTE PTR [rax-0x4f],bl
 101721e:	add    DWORD PTR [rax],eax
 1017220:	cld    
 1017221:	add    BYTE PTR [rax],al
 1017223:	add    BYTE PTR [rax],ah
 1017225:	cmp    al,0x1
 1017227:	add    BYTE PTR [rax+0x0],bl
 101722a:	add    BYTE PTR [rax],al
 101722c:	add    BYTE PTR [rax],al
 101722e:	add    BYTE PTR [rax],al
 1017230:	mov    cl,0x1
 1017233:	add    al,bh
 1017235:	add    BYTE PTR [rax],al
 1017237:	add    al,dh
 1017239:	cmp    al,0x1
 101723b:	add    BYTE PTR [rax+0x0],bl
	...
 101724a:	add    BYTE PTR [rax],al
 101724c:	sar    BYTE PTR [rip+0x580001],1        # 0x1597253
 1017252:	add    BYTE PTR [rax],al
 1017254:	adc    ah,cl
 1017256:	add    BYTE PTR [rax],al
 1017258:	(bad)  
 1017259:	(bad)  
 101725a:	(bad)  
 101725b:	dec    esp
 101725d:	int3   
 101725e:	add    BYTE PTR [rax],al
 1017260:	add    DWORD PTR [rax],eax
 1017262:	add    BYTE PTR [rax],al
 1017264:	repz int3 
 1017266:	add    BYTE PTR [rax],al
 1017268:	add    al,BYTE PTR [rax]
 101726a:	add    BYTE PTR [rax],al
 101726c:	add    cl,ch
 101726e:	add    BYTE PTR [rax],al
 1017270:	add    eax,DWORD PTR [rax]
 1017272:	add    BYTE PTR [rax],al
 1017274:	sbb    ebp,ecx
 1017276:	add    BYTE PTR [rax],al
 1017278:	add    al,0x0
 101727a:	add    BYTE PTR [rax],al
 101727c:	sub    ch,cl
 101727e:	add    BYTE PTR [rax],al
 1017280:	add    eax,0x2c000000
 1017285:	int    0x0
 1017287:	add    BYTE PTR [rsi],al
 1017289:	add    BYTE PTR [rax],al
 101728b:	add    BYTE PTR [rax+0x50000ce],dh
 1017291:	add    BYTE PTR [rax],al
 1017293:	add    BYTE PTR [rcx],cl
 1017295:	iret   
 1017296:	add    BYTE PTR [rax],al
 1017298:	add    DWORD PTR [rax],eax
 101729a:	add    BYTE PTR [rax],al
 101729c:	adc    edi,ecx
 101729e:	add    BYTE PTR [rax],al
 10172a0:	(bad)  
 10172a1:	add    BYTE PTR [rax],al
 10172a3:	add    BYTE PTR [rdi],ah
 10172a5:	iret   
 10172a6:	add    BYTE PTR [rax],al
 10172a8:	add    DWORD PTR [rax],eax
 10172aa:	add    BYTE PTR [rax],al
 10172ac:	(bad)  
 10172ad:	iret   
 10172ae:	add    BYTE PTR [rax],al
 10172b0:	(bad)  
 10172b1:	(bad)  
 10172b2:	(bad)  
 10172b3:	jmp    QWORD PTR [rax]
 10172b5:	cmp    al,0x1
 10172b7:	add    BYTE PTR [rax],al
 10172b9:	add    BYTE PTR [rax],al
 10172bb:	add    BYTE PTR [rip+0x900013c],ch        # 0xa0173fd
 10172c1:	add    BYTE PTR [rax],al
 10172c3:	add    cl,dl
 10172c5:	cmp    al,0x1
 10172c7:	add    BYTE PTR [rax],al
 10172c9:	add    BYTE PTR [rax],al
 10172cb:	add    ch,bh
 10172cd:	cmp    al,0x1
 10172cf:	add    BYTE PTR [rcx],cl
 10172d1:	add    BYTE PTR [rax],al
 10172d3:	add    BYTE PTR [rbp+0x13d],ch
 10172d9:	add    BYTE PTR [rax],al
 10172db:	add    ch,bl
 10172dd:	cmp    eax,0x90001
 10172e2:	add    BYTE PTR [rax],al
 10172e4:	xchg   BYTE PTR [rsi],bh
 10172e6:	add    DWORD PTR [rax],eax
 10172e8:	add    BYTE PTR [rax],al
 10172ea:	add    BYTE PTR [rax],al
 10172ec:	sbb    DWORD PTR [rdx],ecx
 10172ee:	add    al,BYTE PTR [rax]
 10172f0:	or     dh,BYTE PTR [rdx+0x6]
 10172f3:	push   rax
 10172f4:	mov    BYTE PTR [rsi],al
 10172f6:	add    DWORD PTR [rax],eax
 10172f8:	adc    BYTE PTR [rsi],ah
 10172fa:	add    BYTE PTR [rax],al
 10172fc:	sbb    DWORD PTR [rdx],ecx
 10172fe:	add    al,BYTE PTR [rax]
 1017300:	or     dh,BYTE PTR [rdx+0x6]
 1017303:	push   rax
 1017304:	mov    BYTE PTR [rsi],al
 1017306:	add    DWORD PTR [rax],eax
 1017308:	adc    BYTE PTR [rsi],ah
 101730a:	add    BYTE PTR [rax],al
 101730c:	sbb    DWORD PTR [rdx],ecx
 101730e:	add    al,BYTE PTR [rax]
 1017310:	or     dh,BYTE PTR [rdx+0x6]
 1017313:	push   rax
 1017314:	mov    BYTE PTR [rsi],al
 1017316:	add    DWORD PTR [rax],eax
 1017318:	adc    BYTE PTR [rsi],ah
 101731a:	add    BYTE PTR [rax],al
 101731c:	adc    DWORD PTR [rcx],edx
 101731e:	add    DWORD PTR [rax],eax
 1017320:	or     DWORD PTR [rdx],esp
 1017322:	add    BYTE PTR [rax],al
 1017324:	mov    BYTE PTR [rsi],al
 1017326:	add    DWORD PTR [rax],eax
 1017328:	cmp    BYTE PTR [rsi],ah
 101732a:	add    BYTE PTR [rax],al
 101732c:	(bad)  
 101732d:	(bad)  
 101732e:	(bad)  
 101732f:	call   rax
 1017331:	add    DWORD PTR [r8],eax
 1017334:	(bad)  
 1017335:	(bad)  
 1017336:	(bad)  
 1017337:	jmp    rax
 1017339:	add    DWORD PTR [r8],eax
 101733c:	ror    bh,1
 101733e:	add    BYTE PTR [rax],al
 1017340:	(bad)  
 1017341:	(bad)  
 1017342:	(bad)  
 1017343:	call   QWORD PTR [rcx]
 1017345:	adc    eax,DWORD PTR [rdx]
 1017347:	add    BYTE PTR [rdx],cl
 1017349:	push   rdx
 101734a:	(bad)  
 101734b:	xor    BYTE PTR [rax+0x60000106],cl
 1017351:	add    BYTE PTR es:[rax],al
 1017354:	(bad)  
 1017355:	(bad)  
 1017356:	(bad)  
 1017357:	push   QWORD PTR [rax-0xfffebc]
 101735d:	(bad)  
 101735e:	(bad)  
 101735f:	inc    eax
 1017361:	add    DWORD PTR [rax],r8d
 1017364:	add    al,dl
 1017366:	add    BYTE PTR [rax],al
 1017368:	(bad)  
 1017369:	(bad)  
 101736a:	(bad)  
 101736b:	call   QWORD PTR [rcx]
 101736d:	adc    eax,DWORD PTR [rdx]
 101736f:	add    BYTE PTR [rdx],cl
 1017371:	push   rdx
 1017372:	(bad)  
 1017373:	xor    BYTE PTR [rax-0x77fffefa],cl
 1017379:	add    BYTE PTR es:[rax],al
 101737c:	(bad)  
 101737d:	(bad)  
 101737e:	(bad)  
 101737f:	call   QWORD PTR [rax-0xfffec1]
 1017385:	(bad)  
 1017386:	(bad)  
 1017387:	jmp    QWORD PTR [rax+0x4000013f]
 101738d:	rol    BYTE PTR [rax],1
 101738f:	add    bh,bh
 1017391:	(bad)  
 1017392:	(bad)  
 1017393:	jmp    QWORD PTR [rax-0x30]
 1017396:	add    BYTE PTR [rax],al
 1017398:	add    BYTE PTR [rax],al
 101739a:	add    BYTE PTR [rax],al
 101739c:	ja     0x101736e
 101739e:	add    BYTE PTR [rax],al
 10173a0:	(bad)  
 10173a1:	(bad)  
 10173a2:	(bad)  
 10173a3:	call   QWORD PTR [rcx]
 10173a5:	sbb    BYTE PTR [rax+rax*1],al
 10173a8:	sbb    BYTE PTR [rcx+rcx*1],dh
 10173ab:	add    BYTE PTR [rdx],cl
 10173ad:	push   rdx
 10173ae:	(bad)  
 10173af:	jo     0x1017339
 10173b1:	(bad)  
 10173b2:	add    DWORD PTR [rax],eax
 10173b4:	mov    al,0x26
 10173b6:	add    BYTE PTR [rax],al
 10173b8:	(bad)  
 10173b9:	(bad)  
 10173ba:	(bad)  
 10173bb:	push   QWORD PTR [rax+0x42]
 10173be:	add    DWORD PTR [rax],eax
 10173c0:	(bad)  
 10173c1:	(bad)  
 10173c2:	(bad)  
 10173c3:	inc    DWORD PTR [rax-0x6ffffebe]
 10173c9:	rol    BYTE PTR [rax],1
 10173cb:	add    bh,bh
 10173cd:	(bad)  
 10173ce:	(bad)  
 10173cf:	push   QWORD PTR [rdi+0xd0]
 10173d5:	add    BYTE PTR [rax],al
 10173d7:	add    dh,cl
 10173d9:	rol    BYTE PTR [rax],1
 10173db:	add    bh,bh
 10173dd:	(bad)  
 10173de:	(bad)  
 10173df:	call   QWORD PTR [rcx]
 10173e1:	adc    eax,DWORD PTR [rdx]
 10173e3:	add    BYTE PTR [rdx],cl
 10173e5:	push   rdx
 10173e6:	(bad)  
 10173e7:	xor    BYTE PTR [rax-0x27fffefa],cl
 10173ed:	add    BYTE PTR es:[rax],al
 10173f0:	(bad)  
 10173f1:	(bad)  
 10173f2:	(bad)  
 10173f3:	inc    DWORD PTR [rax-0xfffec0]
 10173f9:	(bad)  
 10173fa:	(bad)  
 10173fb:	call   QWORD PTR [rax-0xfffec0]
 1017401:	(bad)  
 1017402:	(bad)  
 1017403:	jmp    QWORD PTR [rax+0x140]
 1017409:	rol    DWORD PTR [rax],1
 101740b:	add    bh,bh
 101740d:	(bad)  
 101740e:	(bad)  
 101740f:	jmp    QWORD PTR [rax]
 1017411:	rol    DWORD PTR [rax],1
 1017413:	add    BYTE PTR [rcx],al
 1017415:	add    BYTE PTR [rax],al
 1017417:	add    BYTE PTR [rdi],dh
 1017419:	rol    DWORD PTR [rax],1
 101741b:	add    bh,bh
 101741d:	(bad)  
 101741e:	(bad)  
 101741f:	call   QWORD PTR [rcx]
 1017421:	sbb    BYTE PTR [rax+rax*1],al
 1017424:	sbb    BYTE PTR [rcx+rcx*1],dh
 1017427:	add    BYTE PTR [rdx],cl
 1017429:	push   rdx
 101742a:	(bad)  
 101742b:	jo     0x10173b5
 101742d:	(bad)  
 101742e:	add    DWORD PTR [rax],eax
 1017430:	add    BYTE PTR [rdi],ah
 1017432:	add    BYTE PTR [rax],al
 1017434:	(bad)  
 1017435:	(bad)  
 1017436:	(bad)  
 1017437:	jmp    QWORD PTR [rax+0x43]
 101743a:	add    DWORD PTR [rax],eax
 101743c:	(bad)  
 101743d:	(bad)  
 101743e:	(bad)  
 101743f:	push   QWORD PTR [rax+0x43]
 1017442:	add    DWORD PTR [rax],eax
 1017444:	(bad)  
 1017445:	(bad)  
 1017446:	(bad)  
 1017447:	inc    DWORD PTR [rax+0x50000143]
 101744d:	rol    DWORD PTR [rax],1
 101744f:	add    bh,bh
 1017451:	(bad)  
 1017452:	(bad)  
 1017453:	push   QWORD PTR [rdi-0x2f]
 1017456:	add    BYTE PTR [rax],al
 1017458:	add    DWORD PTR [rax],eax
 101745a:	add    BYTE PTR [rax],al
 101745c:	mov    ss,ecx
 101745e:	add    BYTE PTR [rax],al
 1017460:	(bad)  
 1017461:	(bad)  
 1017462:	(bad)  
 1017463:	inc    DWORD PTR [rcx]
 1017465:	(bad)  
 1017466:	add    al,BYTE PTR [rax]
 1017468:	(bad)  
 1017469:	xor    al,BYTE PTR [rdx]
 101746b:	xor    BYTE PTR [rcx],dl
 101746d:	adc    eax,DWORD PTR [rdx]
 101746f:	add    BYTE PTR [rdx],cl
 1017471:	push   rdx
 1017472:	(bad)  
 1017473:	xor    BYTE PTR [rax+0x28000106],cl
 1017479:	(bad)  
 101747a:	add    BYTE PTR [rax],al
 101747c:	(bad)  
 101747d:	(bad)  
 101747e:	(bad)  
 101747f:	inc    DWORD PTR [rax]
 1017481:	rex add DWORD PTR [rax],eax
 1017484:	adc    dl,dl
 1017486:	add    BYTE PTR [rax],al
 1017488:	(bad)  
 1017489:	(bad)  
 101748a:	(bad)  
 101748b:	push   QWORD PTR [rax]
 101748d:	rol    BYTE PTR [rax],cl
 101748f:	add    BYTE PTR [rax],al
 1017491:	add    BYTE PTR [rax],al
 1017493:	add    BYTE PTR [rdi-0x2e],al
 1017496:	add    BYTE PTR [rax],al
 1017498:	(bad)  
 1017499:	(bad)  
 101749a:	(bad)  
 101749b:	call   QWORD PTR [rcx]
 101749d:	sbb    BYTE PTR [rax+rax*1],al
 10174a0:	sbb    BYTE PTR [rcx+rcx*1],dh
 10174a3:	add    BYTE PTR [rdx],cl
 10174a5:	push   rdx
 10174a6:	(bad)  
 10174a7:	jo     0x1017431
 10174a9:	(bad)  
 10174aa:	add    DWORD PTR [rax],eax
 10174ac:	push   rax
 10174ad:	(bad)  
 10174ae:	add    BYTE PTR [rax],al
 10174b0:	(bad)  
 10174b1:	(bad)  
 10174b2:	(bad)  
 10174b3:	jmp    rax
 10174b5:	rex.X add DWORD PTR [rax],eax
 10174b8:	(bad)  
 10174b9:	rol    BYTE PTR [rax],cl
 10174bb:	add    bh,bh
 10174bd:	(bad)  
 10174be:	(bad)  
 10174bf:	inc    DWORD PTR [rdi+0xd2]
 10174c5:	add    BYTE PTR [rax],al
 10174c7:	add    BYTE PTR [rsi-0xffff2e],bl
 10174cd:	(bad)  
 10174ce:	(bad)  
 10174cf:	call   QWORD PTR [rcx]
 10174d1:	sub    BYTE PTR [rbx],cl
 10174d3:	add    BYTE PTR [rax],ch
 10174d5:	xor    al,0x37
 10174d7:	add    BYTE PTR [rax],bl
 10174d9:	add    DWORD PTR [rsi],ebp
 10174db:	add    BYTE PTR [rax+rsi*8],cl
 10174de:	or     ah,al
 10174e0:	or     al,dl
 10174e2:	(bad)  
 10174e3:	rol    BYTE PTR [rax+rsi*2],0x3
 10174e7:	(bad)  
 10174e8:	add    dl,BYTE PTR [rax+0x0]
 10174eb:	add    BYTE PTR [rax+0x78000106],cl
 10174f1:	(bad)  
 10174f2:	add    BYTE PTR [rax],al
 10174f4:	(bad)  
 10174f5:	(bad)  
 10174f6:	(bad)  
 10174f7:	inc    DWORD PTR [rax-0xfffeb8]
 10174fd:	(bad)  
 10174fe:	(bad)  
 10174ff:	call   QWORD PTR [rax+0x1000148]
 1017505:	add    BYTE PTR [rax],al
 1017507:	add    BYTE PTR [rax+0x2000148],ah
 101750d:	add    BYTE PTR [rax],al
 101750f:	add    BYTE PTR [rax+0x1000148],dh
 1017515:	add    BYTE PTR [rax],al
 1017517:	add    al,al
 1017519:	add    QWORD PTR [rax],rax
 101751c:	add    DWORD PTR [rax],eax
 101751e:	add    BYTE PTR [rax],al
 1017520:	ror    BYTE PTR [rax+0x1],1
 1017523:	add    BYTE PTR [rcx],al
 1017525:	add    BYTE PTR [rax],al
 1017527:	add    al,ah
 1017529:	add    QWORD PTR [rax],rax
 101752c:	add    DWORD PTR [rax],eax
 101752e:	add    BYTE PTR [rax],al
 1017530:	lock add QWORD PTR [rax],rax
 1017534:	(bad)  
 1017535:	add    BYTE PTR [rax],al
 1017537:	add    BYTE PTR [rax],al
 1017539:	add    QWORD PTR [r8],rax
 101753c:	or     BYTE PTR [rax],al
 101753e:	add    BYTE PTR [rax],al
 1017540:	adc    BYTE PTR [rcx+0x1],cl
 1017543:	add    BYTE PTR [rcx],al
 1017545:	add    BYTE PTR [rax],al
 1017547:	add    BYTE PTR [rax],ah
 1017549:	add    QWORD PTR [r8],rax
 101754c:	add    DWORD PTR [rax],eax
 101754e:	add    BYTE PTR [rax],al
 1017550:	xor    BYTE PTR [rcx+0x1],cl
 1017553:	add    BYTE PTR [rcx],al
 1017555:	add    BYTE PTR [rax],al
 1017557:	add    BYTE PTR [rax+0x49],al
 101755a:	add    DWORD PTR [rax],eax
 101755c:	rcl    dl,1
 101755e:	add    BYTE PTR [rax],al
 1017560:	(bad)  
 1017561:	(bad)  
 1017562:	(bad)  
 1017563:	(bad)  
 1017564:	jge    0x1017539
 1017566:	add    BYTE PTR [rax],al
 1017568:	add    DWORD PTR [rax],eax
 101756a:	add    BYTE PTR [rax],al
 101756c:	adc    edx,esp
 101756e:	add    BYTE PTR [rax],al
 1017570:	add    al,BYTE PTR [rax]
 1017572:	add    BYTE PTR [rax],al
 1017574:	rex.WXB (bad) 
 1017576:	add    BYTE PTR [rax],al
 1017578:	add    DWORD PTR [rax],eax
 101757a:	add    BYTE PTR [rax],al
 101757c:	mov    edx,esp
 101757e:	add    BYTE PTR [rax],al
 1017580:	add    al,0x0
 1017582:	add    BYTE PTR [rax],al
 1017584:	xchg   edi,eax
 1017585:	(bad)  
 1017586:	add    BYTE PTR [rax],al
 1017588:	add    eax,0xa8000000
 101758d:	(bad)  
 101758e:	add    BYTE PTR [rax],al
 1017590:	(bad)  
 1017591:	add    BYTE PTR [rax],al
 1017593:	add    BYTE PTR [rsp+rdx*8+0x70000],dh
 101759a:	add    BYTE PTR [rax],al
 101759c:	(bad)  
 101759d:	(bad)  
 101759e:	add    BYTE PTR [rax],al
 10175a0:	or     BYTE PTR [rax],al
 10175a2:	add    BYTE PTR [rax],al
 10175a4:	cwde   
 10175a5:	(bad)  
 10175a6:	add    BYTE PTR [rax],al
 10175a8:	(bad)  
 10175a9:	add    BYTE PTR [rax],al
 10175ab:	add    ah,bl
 10175ad:	(bad)  
 10175ae:	add    BYTE PTR [rax],al
 10175b0:	add    DWORD PTR [rax],eax
 10175b2:	add    BYTE PTR [rax],al
 10175b4:	loope  0x101758b
 10175b6:	add    BYTE PTR [rax],al
 10175b8:	or     eax,DWORD PTR [rax]
 10175ba:	add    BYTE PTR [rax],al
 10175bc:	out    0xd5,al
 10175be:	add    BYTE PTR [rax],al
 10175c0:	add    DWORD PTR [rax],eax
 10175c2:	add    BYTE PTR [rax],al
 10175c4:	jmp    0x101759b
 10175c6:	add    BYTE PTR [rax],al
 10175c8:	(bad)  
 10175c9:	(bad)  
 10175ca:	(bad)  
 10175cb:	call   QWORD PTR [rcx]
 10175cd:	adc    eax,DWORD PTR [rdx]
 10175cf:	add    BYTE PTR [rdx],cl
 10175d1:	push   rdx
 10175d2:	(bad)  
 10175d3:	xor    BYTE PTR [rax-0x5ffffefa],cl
 10175d9:	(bad)  
 10175da:	add    BYTE PTR [rax],al
 10175dc:	(bad)  
 10175dd:	(bad)  
 10175de:	(bad)  
 10175df:	jmp    QWORD PTR [rax-0xfffebf]
 10175e5:	(bad)  
 10175e6:	(bad)  
 10175e7:	push   QWORD PTR [rax-0x7ffffebf]
 10175ed:	(bad)  
 10175ee:	add    BYTE PTR [rax],al
 10175f0:	(bad)  
 10175f1:	(bad)  
 10175f2:	(bad)  
 10175f3:	jmp    QWORD PTR [rax+0x10000d6]
 10175f9:	add    BYTE PTR [rax],al
 10175fb:	add    BYTE PTR [rdi-0xffff2a],dh
 1017601:	(bad)  
 1017602:	(bad)  
 1017603:	call   QWORD PTR [rcx]
 1017605:	sbb    BYTE PTR [rax+rax*1],al
 1017608:	sbb    BYTE PTR [rcx+rcx*1],dh
 101760b:	add    BYTE PTR [rdx],cl
 101760d:	push   rdx
 101760e:	(bad)  
 101760f:	jo     0x1017599
 1017611:	(bad)  
 1017612:	add    DWORD PTR [rax],eax
 1017614:	enter  0x27,0x0
 1017618:	(bad)  
 1017619:	(bad)  
 101761a:	(bad)  
 101761b:	inc    DWORD PTR [rax-0xfffebc]
 1017621:	(bad)  
 1017622:	(bad)  
 1017623:	call   QWORD PTR [rax-0x2ffffebc]
 1017629:	(bad)  
 101762a:	add    BYTE PTR [rax],al
 101762c:	(bad)  
 101762d:	(bad)  
 101762e:	(bad)  
 101762f:	push   rdi
 1017631:	(bad)  
 1017632:	add    BYTE PTR [rax],al
 1017634:	add    DWORD PTR [rax],eax
 1017636:	add    BYTE PTR [rax],al
 1017638:	(bad)  
 1017639:	xlat   BYTE PTR ds:[rbx]
 101763a:	add    BYTE PTR [rax],al
 101763c:	(bad)  
 101763d:	(bad)  
 101763e:	(bad)  
 101763f:	inc    DWORD PTR [rcx]
 1017641:	(bad)  
 1017642:	add    al,BYTE PTR [rax]
 1017644:	(bad)  
 1017645:	xor    al,BYTE PTR [rdx]
 1017647:	xor    BYTE PTR [rcx],bl
 1017649:	sbb    eax,0x641d0006
 101764e:	or     al,BYTE PTR [rax]
 1017650:	sbb    BYTE PTR [rcx+rcx*1],dh
 1017653:	add    BYTE PTR [rdx],cl
 1017655:	push   rdx
 1017656:	(bad)  
 1017657:	jo     0x10175e1
 1017659:	(bad)  
 101765a:	add    DWORD PTR [rax],eax
 101765c:	lock (bad) 
 101765e:	add    BYTE PTR [rax],al
 1017660:	(bad)  
 1017661:	(bad)  
 1017662:	(bad)  
 1017663:	inc    DWORD PTR [rax]
 1017665:	add    BYTE PTR [rax],al
 1017667:	add    bh,bh
 1017669:	(bad)  
 101766a:	(bad)  
 101766b:	inc    DWORD PTR [rax]
	...
 1017675:	add    BYTE PTR [rax],al
 1017677:	add    BYTE PTR [rcx],al
 1017679:	add    BYTE PTR [rax],al
 101767b:	add    BYTE PTR [rcx],al
 101767d:	add    BYTE PTR [rax],al
 101767f:	add    BYTE PTR [rsi+rsi*2+0x1],al
	...
 101768e:	add    BYTE PTR [rax],al
 1017690:	lock add DWORD PTR ds:[rax],eax
 1017694:	cmp    BYTE PTR [rax],al
 1017696:	add    BYTE PTR [rax],al
 1017698:	movabs al,ds:0x22ffffffff0000d7
 10176a1:	fadd   DWORD PTR [rax]
 10176a3:	add    BYTE PTR [rax],al
 10176a5:	add    BYTE PTR [rax],al
 10176a7:	add    BYTE PTR [rdi],ch
 10176a9:	fadd   DWORD PTR [rax]
 10176ab:	add    bh,bh
 10176ad:	(bad)  
 10176ae:	(bad)  
 10176af:	push   rax
 10176b1:	add    DWORD PTR ds:[rax],eax
 10176b4:	add    BYTE PTR [rax],al
 10176b6:	add    BYTE PTR [rax],al
 10176b8:	sbb    DWORD PTR [rdx],ecx
 10176ba:	add    al,BYTE PTR [rax]
 10176bc:	or     dh,BYTE PTR [rdx]
 10176be:	(bad)  
 10176bf:	push   rax
 10176c0:	mov    BYTE PTR [rsi],al
 10176c2:	add    DWORD PTR [rax],eax
 10176c4:	lock (bad) 
 10176c6:	add    BYTE PTR [rax],al
 10176c8:	add    DWORD PTR [rdi],ecx
 10176ca:	(bad)  
 10176cb:	add    BYTE PTR [rdi],cl
 10176cd:	push   rsp
 10176ce:	or     BYTE PTR [rax],al
 10176d0:	sysenter 
 10176d2:	(bad)  
 10176d3:	add    BYTE PTR [rdi],cl
 10176d5:	xor    cl,BYTE PTR [rbx]
 10176d7:	jo     0x10176fa
 10176d9:	add    eax,0x64050002
 10176de:	(bad)  
 10176df:	add    BYTE PTR [rax+0x1e0000d8],ah
 10176e5:	fld    DWORD PTR [rax]
 10176e7:	add    al,cl
 10176e9:	jbe    0x10176ec
 10176eb:	add    BYTE PTR [rcx],ah
 10176ed:	add    BYTE PTR [rax],al
 10176ef:	add    BYTE PTR [rax+0x1e0000d8],ah
 10176f5:	fld    DWORD PTR [rax]
 10176f7:	add    al,cl
 10176f9:	jbe    0x10176fc
 10176fb:	add    BYTE PTR [rcx],al
 10176fd:	clts   
 10176ff:	add    BYTE PTR [rdi],cl
 1017701:	push   rsp
 1017702:	or     BYTE PTR [rax],al
 1017704:	sysenter 
 1017706:	(bad)  
 1017707:	add    BYTE PTR [rdi],cl
 1017709:	xor    cl,BYTE PTR [rbx]
 101770b:	jo     0x101772e
 101770d:	add    eax,0x64050002
 1017712:	(bad)  
 1017713:	add    al,al
 1017715:	fld    DWORD PTR [rax]
 1017717:	add    BYTE PTR [rsi],bh
 1017719:	fiadd  DWORD PTR [rax]
 101771b:	add    ah,bh
 101771d:	jbe    0x1017720
 101771f:	add    BYTE PTR [rcx],ah
 1017721:	add    BYTE PTR [rax],al
 1017723:	add    al,al
 1017725:	fld    DWORD PTR [rax]
 1017727:	add    BYTE PTR [rsi],bh
 1017729:	fiadd  DWORD PTR [rax]
 101772b:	add    ah,bh
 101772d:	jbe    0x1017730
 101772f:	add    BYTE PTR [rcx],bl
 1017731:	sbb    DWORD PTR [rax+rax*1],eax
 1017734:	or     ah,BYTE PTR [rdi+rcx*1+0x0]
 1017738:	or     dl,BYTE PTR [rdx+0x7007006]
 101773e:	add    DWORD PTR [rax],eax
 1017740:	rex.W add BYTE PTR [rax],al
 1017743:	add    BYTE PTR [rcx],ah
 1017745:	add    eax,0x34050002
 101774a:	(bad)  
 101774b:	add    al,ah
 101774d:	fiadd  DWORD PTR [rax]
 101774f:	add    BYTE PTR [rbx],bh
 1017751:	fild   DWORD PTR [rax]
 1017753:	add    BYTE PTR [rax],dh
 1017755:	ja     0x1017758
 1017757:	add    BYTE PTR [rcx],ah
 1017759:	add    BYTE PTR [rax],al
 101775b:	add    al,ah
 101775d:	fiadd  DWORD PTR [rax]
 101775f:	add    BYTE PTR [rbx],bh
 1017761:	fild   DWORD PTR [rax]
 1017763:	add    BYTE PTR [rax],dh
 1017765:	ja     0x1017768
 1017767:	add    BYTE PTR [rcx],ah
 1017769:	add    BYTE PTR [rdx],al
 101776b:	add    BYTE PTR [rax],al
 101776d:	xor    al,0xe
 101776f:	add    al,ah
 1017771:	fiadd  DWORD PTR [rax]
 1017773:	add    BYTE PTR [rbx],bh
 1017775:	fild   DWORD PTR [rax]
 1017777:	add    BYTE PTR [rax],dh
 1017779:	ja     0x101777c
 101777b:	add    BYTE PTR [rcx],bl
 101777d:	sub    ecx,DWORD PTR [rax]
 101777f:	add    BYTE PTR [rbx],dl
 1017781:	repnz or al,0xf0
 1017784:	or     ah,al
 1017786:	or     al,dl
 1017788:	(bad)  
 1017789:	rol    BYTE PTR [rax+rsi*2],0x3
 101778d:	(bad)  
 101778e:	add    dh,BYTE PTR [rax]
 1017790:	and    al,0x7
 1017792:	add    DWORD PTR [rax],eax
 1017794:	sbb    BYTE PTR [rax],ch
 1017796:	add    BYTE PTR [rax],al
 1017798:	jnp    0x101779a
 101779a:	add    BYTE PTR [rax],al
 101779c:	(bad)  
 101779d:	(bad)  
 101779e:	(bad)  
 101779f:	inc    DWORD PTR [rax]
 10177a1:	add    BYTE PTR [rax],al
 10177a3:	add    bh,bh
 10177a5:	(bad)  
 10177a6:	(bad)  
 10177a7:	inc    DWORD PTR [rax]
	...
 10177b1:	add    BYTE PTR [rax],al
 10177b3:	add    BYTE PTR [rcx],al
 10177b5:	add    BYTE PTR [rax],al
 10177b7:	add    BYTE PTR [rcx],al
 10177b9:	add    BYTE PTR [rax],al
 10177bb:	add    al,al
 10177bd:	ja     0x10177c0
	...
 10177cb:	add    BYTE PTR [rax+0x3b],al
 10177ce:	add    DWORD PTR [rax],eax
 10177d0:	rex.W add BYTE PTR [rax],al
 10177d3:	add    al,dl
 10177d5:	fild   DWORD PTR [rax]
 10177d7:	add    bh,bh
 10177d9:	(bad)  
 10177da:	(bad)  
 10177db:	call   FWORD PTR [rdi-0x24]
 10177de:	add    BYTE PTR [rax],al
 10177e0:	add    BYTE PTR [rax],al
 10177e2:	add    BYTE PTR [rax],al
 10177e4:	outs   dx,DWORD PTR ds:[rsi]
 10177e5:	fadd   QWORD PTR [rax]
 10177e7:	add    bh,bh
 10177e9:	(bad)  
 10177ea:	(bad)  
 10177eb:	inc    DWORD PTR [rax+0x3b]
 10177ee:	add    DWORD PTR [rax],eax
 10177f0:	add    BYTE PTR [rax],al
 10177f2:	add    BYTE PTR [rax],al
 10177f4:	sbb    DWORD PTR [rdx],ecx
 10177f6:	add    al,BYTE PTR [rax]
 10177f8:	or     dl,BYTE PTR [rdx+0x6]
 10177fb:	push   rax
 10177fc:	mov    BYTE PTR [rsi],al
 10177fe:	add    DWORD PTR [rax],eax
 1017800:	sbb    BYTE PTR [rax],ch
 1017802:	add    BYTE PTR [rax],al
 1017804:	sbb    DWORD PTR [rbx],ebp
 1017806:	or     BYTE PTR [rax],al
 1017808:	adc    esi,edx
 101780a:	or     al,0xf0
 101780c:	or     ah,al
 101780e:	or     al,dl
 1017810:	(bad)  
 1017811:	rol    BYTE PTR [rax+rsi*2],0x3
 1017815:	(bad)  
 1017816:	add    dh,BYTE PTR [rax]
 1017818:	and    al,0x7
 101781a:	add    DWORD PTR [rax],eax
 101781c:	sub    BYTE PTR [rax],al
 101781f:	add    BYTE PTR [rbx+0x0],bh
 1017822:	add    BYTE PTR [rax],al
 1017824:	(bad)  
 1017825:	(bad)  
 1017826:	(bad)  
 1017827:	inc    DWORD PTR [rax]
 1017829:	add    BYTE PTR [rax],al
 101782b:	add    bh,bh
 101782d:	(bad)  
 101782e:	(bad)  
 101782f:	inc    DWORD PTR [rax]
	...
 1017839:	add    BYTE PTR [rax],al
 101783b:	add    BYTE PTR [rcx],al
 101783d:	add    BYTE PTR [rax],al
 101783f:	add    BYTE PTR [rcx],al
 1017841:	add    BYTE PTR [rax],al
 1017843:	add    BYTE PTR [rax+0x78],cl
 1017846:	add    DWORD PTR [rax],eax
	...
 1017854:	jo     0x1017891
 1017856:	add    DWORD PTR [rax],eax
 1017858:	rex.W add BYTE PTR [rax],al
 101785b:	add    BYTE PTR [rax-0x23],al
 101785e:	add    BYTE PTR [rax],al
 1017860:	(bad)  
 1017861:	(bad)  
 1017862:	(bad)  
 1017863:	dec    edi
 1017865:	fld    QWORD PTR [rax]
 1017867:	add    BYTE PTR [rax],al
 1017869:	add    BYTE PTR [rax],al
 101786b:	add    bh,bl
 101786d:	fld    QWORD PTR [rax]
 101786f:	add    bh,bh
 1017871:	(bad)  
 1017872:	(bad)  
 1017873:	push   QWORD PTR [rax+0x3b]
 1017876:	add    DWORD PTR [rax],eax
 1017878:	add    BYTE PTR [rax],al
 101787a:	add    BYTE PTR [rax],al
 101787c:	sbb    DWORD PTR [rdx],ecx
 101787e:	add    al,BYTE PTR [rax]
 1017880:	or     dl,BYTE PTR [rdx+0x6]
 1017883:	push   rax
 1017884:	mov    BYTE PTR [rsi],al
 1017886:	add    DWORD PTR [rax],eax
 1017888:	sub    BYTE PTR [rax],al
 101788b:	add    BYTE PTR [rcx],dl
 101788d:	adc    DWORD PTR [rcx],eax
 101788f:	add    BYTE PTR [rcx],cl
 1017891:	and    al,BYTE PTR [rax]
 1017893:	add    BYTE PTR [rax+0x68000106],cl
 1017899:	sub    BYTE PTR [rax],al
 101789b:	add    bh,bh
 101789d:	(bad)  
 101789e:	(bad)  
 101789f:	jmp    QWORD PTR [rax]
 10178a1:	(bad)  
 10178a2:	add    DWORD PTR [rax],eax
 10178a4:	add    BYTE PTR [rax],al
 10178a6:	add    BYTE PTR [rax],al
 10178a8:	xor    BYTE PTR [rdi],bh
 10178aa:	add    DWORD PTR [rax],eax
 10178ac:	add    DWORD PTR [rax],eax
 10178ae:	add    BYTE PTR [rax],al
 10178b0:	rex (bad) 
 10178b2:	add    DWORD PTR [rax],eax
 10178b4:	add    DWORD PTR [rax],eax
 10178b6:	add    BYTE PTR [rax],al
 10178b8:	push   rax
 10178b9:	(bad)  
 10178ba:	add    DWORD PTR [rax],eax
 10178bc:	add    DWORD PTR [rax],eax
 10178be:	add    BYTE PTR [rax],al
 10178c0:	(bad)  
 10178c1:	(bad)  
 10178c2:	add    DWORD PTR [rax],eax
 10178c4:	add    DWORD PTR [rax],eax
 10178c6:	add    BYTE PTR [rax],al
 10178c8:	jo     0x1017909
 10178ca:	add    DWORD PTR [rax],eax
 10178cc:	mov    al,0xde
 10178ce:	add    BYTE PTR [rax],al
 10178d0:	(bad)  
 10178d1:	(bad)  
 10178d2:	(bad)  
 10178d3:	dec    edi
 10178d5:	fiadd  WORD PTR [rax]
 10178d7:	add    BYTE PTR [rax],al
 10178d9:	add    BYTE PTR [rax],al
 10178db:	add    bl,ah
 10178dd:	fiadd  WORD PTR [rax]
 10178df:	add    BYTE PTR [rcx],al
 10178e1:	add    BYTE PTR [rax],al
 10178e3:	add    dl,bh
 10178e5:	fiadd  WORD PTR [rax]
 10178e7:	add    BYTE PTR [rdx],al
 10178e9:	add    BYTE PTR [rax],al
 10178eb:	add    BYTE PTR [rdi+rbx*8],al
 10178ee:	add    BYTE PTR [rax],al
 10178f0:	add    eax,DWORD PTR [rax]
 10178f2:	add    BYTE PTR [rax],al
 10178f4:	(bad)  
 10178f5:	fild   WORD PTR [rax]
 10178f7:	add    BYTE PTR [rax+rax*1],al
 10178fa:	add    BYTE PTR [rax],al
 10178fc:	sbb    bh,bl
 10178fe:	add    BYTE PTR [rax],al
 1017900:	add    eax,0x1c000000
 1017905:	fild   WORD PTR [rax]
 1017907:	add    bh,bh
 1017909:	(bad)  
 101790a:	(bad)  
 101790b:	call   QWORD PTR [rcx]
 101790d:	and    BYTE PTR [rax],cl
 101790f:	add    BYTE PTR [rax],ah
 1017911:	push   rsp
 1017912:	or     eax,0xc341b00
 1017917:	add    BYTE PTR [rip+0x7e00952],cl        # 0x8e1826f
 101791d:	jo     0x1017925
 101791f:	(bad)  
 1017920:	mov    BYTE PTR [rsi],al
 1017922:	add    DWORD PTR [rax],eax
 1017924:	nop
 1017925:	sub    BYTE PTR [rax],al
 1017927:	add    bh,bh
 1017929:	(bad)  
 101792a:	(bad)  
 101792b:	inc    DWORD PTR [rax]
 101792d:	rex.X add DWORD PTR [rax],eax
 1017930:	add    BYTE PTR [rax],al
 1017932:	add    BYTE PTR [rax],al
 1017934:	adc    BYTE PTR [rdx+0x1],al
 1017937:	add    BYTE PTR [rcx],al
 1017939:	add    BYTE PTR [rax],al
 101793b:	add    BYTE PTR [rax],ah
 101793d:	rex.X add DWORD PTR [rax],eax
 1017940:	add    DWORD PTR [rax],eax
 1017942:	add    BYTE PTR [rax],al
 1017944:	xor    BYTE PTR [rdx+0x1],al
 1017947:	add    BYTE PTR [rcx],al
 1017949:	add    BYTE PTR [rax],al
 101794b:	add    BYTE PTR [rax+0x42],al
 101794e:	add    DWORD PTR [rax],eax
 1017950:	add    DWORD PTR [rax],eax
 1017952:	add    BYTE PTR [rax],al
 1017954:	push   rax
 1017955:	rex.X add DWORD PTR [rax],eax
 1017958:	xor    bh,bl
 101795a:	add    BYTE PTR [rax],al
 101795c:	(bad)  
 101795d:	(bad)  
 101795e:	(bad)  
 101795f:	call   QWORD PTR [rbx-0x21]
 1017962:	add    BYTE PTR [rax],al
 1017964:	add    al,BYTE PTR [rax]
 1017966:	add    BYTE PTR [rax],al
 1017968:	mov    ecx,0x10000df
 101796d:	add    BYTE PTR [rax],al
 101796f:	add    ah,cl
 1017971:	fild   WORD PTR [rax]
 1017973:	add    BYTE PTR [rbx],al
 1017975:	add    BYTE PTR [rax],al
 1017977:	add    bh,bl
 1017979:	fild   WORD PTR [rax]
 101797b:	add    BYTE PTR [rcx],al
 101797d:	add    BYTE PTR [rax],al
 101797f:	add    cl,ch
 1017981:	fild   WORD PTR [rax]
 1017983:	add    BYTE PTR [rax],al
 1017985:	add    BYTE PTR [rax],al
 1017987:	add    BYTE PTR [rax+riz*8],dh
 101798a:	add    BYTE PTR [rax],al
 101798c:	(bad)  
 101798d:	(bad)  
 101798e:	(bad)  
 101798f:	call   QWORD PTR [rcx]
 1017991:	sub    ecx,DWORD PTR [rip+0x2b742b00]        # 0x2c75a497
 1017997:	add    BYTE PTR [rdi],ah
 1017999:	sub    al,BYTE PTR fs:[rax]
 101799c:	and    esi,DWORD PTR [rcx+rbp*1]
 101799f:	add    BYTE PTR [rdi],dl
 10179a1:	add    DWORD PTR [rdx],esp
 10179a3:	add    BYTE PTR [rax+rsi*8],cl
 10179a6:	or     ah,al
 10179a8:	or     al,dl
 10179aa:	(bad)  
 10179ab:	rol    BYTE PTR [rax+rdx*2],0x0
 10179af:	add    BYTE PTR [rax-0x47fffefa],cl
 10179b5:	sub    BYTE PTR [rax],al
 10179b7:	add    bh,bh
 10179b9:	(bad)  
 10179ba:	(bad)  
 10179bb:	jmp    QWORD PTR [rax+0x49]
 10179be:	add    DWORD PTR [rax],eax
 10179c0:	(bad)  
 10179c1:	(bad)  
 10179c2:	(bad)  
 10179c3:	push   QWORD PTR [rax+0x49]
 10179c6:	add    DWORD PTR [rax],eax
 10179c8:	add    DWORD PTR [rax],eax
 10179ca:	add    BYTE PTR [rax],al
 10179cc:	or     BYTE PTR [rcx+0x1],0x0
 10179d0:	add    DWORD PTR [rax],eax
 10179d2:	add    BYTE PTR [rax],al
 10179d4:	nop
 10179d5:	add    QWORD PTR [r8],rax
 10179d8:	add    DWORD PTR [rax],eax
 10179da:	add    BYTE PTR [rax],al
 10179dc:	movabs al,ds:0xb000000004000149
 10179e5:	add    QWORD PTR [r8],rax
 10179e8:	add    al,0x0
 10179ea:	add    BYTE PTR [rax],al
 10179ec:	ror    BYTE PTR [rcx+0x1],0x0
 10179f0:	add    al,0x0
 10179f2:	add    BYTE PTR [rax],al
 10179f4:	ror    BYTE PTR [rcx+0x1],1
 10179f7:	add    BYTE PTR [rax+rax*1],al
 10179fa:	add    BYTE PTR [rax],al
 10179fc:	loopne 0x1017a47
 10179fe:	add    DWORD PTR [rax],eax
 1017a00:	or     BYTE PTR [rax],al
 1017a02:	add    BYTE PTR [rax],al
 1017a04:	lock add QWORD PTR [r8],rax
 1017a08:	or     BYTE PTR [rax],al
 1017a0a:	add    BYTE PTR [rax],al
 1017a0c:	add    BYTE PTR [rdx+0x1],cl
 1017a0f:	add    BYTE PTR [rax],cl
 1017a11:	add    BYTE PTR [rax],al
 1017a13:	add    BYTE PTR [rax],dl
 1017a15:	rex.WX add QWORD PTR [rax],rax
 1017a18:	add    al,0x0
 1017a1a:	add    BYTE PTR [rax],al
 1017a1c:	and    BYTE PTR [rdx+0x1],cl
 1017a1f:	add    BYTE PTR [rax+rax*1],al
 1017a22:	add    BYTE PTR [rax],al
 1017a24:	xor    BYTE PTR [rdx+0x1],cl
 1017a27:	add    BYTE PTR [rcx],al
 1017a29:	add    BYTE PTR [rax],al
 1017a2b:	add    BYTE PTR [rax+0x4a],al
 1017a2e:	add    DWORD PTR [rax],eax
 1017a30:	add    DWORD PTR [rax],eax
 1017a32:	add    BYTE PTR [rax],al
 1017a34:	push   rax
 1017a35:	rex.WX add QWORD PTR [rax],rax
 1017a38:	and    al,0x0
 1017a3b:	add    bh,bh
 1017a3d:	(bad)  
 1017a3e:	(bad)  
 1017a3f:	jmp    FWORD PTR [rcx+riz*8]
 1017a42:	add    BYTE PTR [rax],al
 1017a44:	add    DWORD PTR [rax],eax
 1017a46:	add    BYTE PTR [rax],al
 1017a48:	xor    ah,cl
 1017a4a:	add    BYTE PTR [rax],al
 1017a4c:	(bad)  
 1017a4d:	(bad)  
 1017a4e:	(bad)  
 1017a4f:	push   QWORD PTR [rdi]
 1017a51:	loope  0x1017a53
 1017a53:	add    BYTE PTR [rcx],al
 1017a55:	add    BYTE PTR [rax],al
 1017a57:	add    BYTE PTR [rsi-0x1f],dh
 1017a5a:	add    BYTE PTR [rax],al
 1017a5c:	add    al,BYTE PTR [rax]
 1017a5e:	add    BYTE PTR [rax],al
 1017a60:	and    ecx,0x30000
 1017a66:	add    BYTE PTR [rax],al
 1017a68:	mov    ecx,fs
 1017a6a:	add    BYTE PTR [rax],al
 1017a6c:	add    al,0x0
 1017a6e:	add    BYTE PTR [rax],al
 1017a70:	xor    esp,edx
 1017a72:	add    BYTE PTR [rax],al
 1017a74:	(bad)  
 1017a75:	add    BYTE PTR [rax],al
 1017a77:	add    BYTE PTR [rsi],bh
 1017a79:	loop   0x1017a7b
 1017a7b:	add    BYTE PTR [rdi],al
 1017a7d:	add    BYTE PTR [rax],al
 1017a7f:	add    BYTE PTR [rdx-0x1e],al
 1017a82:	add    BYTE PTR [rax],al
 1017a84:	or     BYTE PTR [rax],al
 1017a86:	add    BYTE PTR [rax],al
 1017a88:	mov    al,0xe3
 1017a8a:	add    BYTE PTR [rax],al
 1017a8c:	or     al,BYTE PTR [rax]
 1017a8e:	add    BYTE PTR [rax],al
 1017a90:	mov    bl,0xe3
 1017a92:	add    BYTE PTR [rax],al
 1017a94:	or     BYTE PTR [rax],al
 1017a96:	add    BYTE PTR [rax],al
 1017a98:	push   rcx
 1017a99:	in     al,0x0
 1017a9b:	add    BYTE PTR [rbx],cl
 1017a9d:	add    BYTE PTR [rax],al
 1017a9f:	add    BYTE PTR [rsp+riz*8+0x0],dl
 1017aa3:	add    BYTE PTR [rax],cl
 1017aa5:	add    BYTE PTR [rax],al
 1017aa7:	add    BYTE PTR [rdx+0x40000e4],bl
 1017aad:	add    BYTE PTR [rax],al
 1017aaf:	add    BYTE PTR [rbp+0xd0000e4],ah
 1017ab5:	add    BYTE PTR [rax],al
 1017ab7:	add    BYTE PTR [rdi+0x40000e4],dh
 1017abd:	add    BYTE PTR [rax],al
 1017abf:	add    dl,al
 1017ac1:	in     al,0x0
 1017ac3:	add    BYTE PTR [rcx],al
 1017ac5:	add    BYTE PTR [rax],al
 1017ac7:	add    dh,al
 1017ac9:	in     al,0x0
 1017acb:	add    BYTE PTR [rdi],cl
 1017acd:	add    BYTE PTR [rax],al
 1017acf:	add    al,bl
 1017ad1:	in     al,0x0
 1017ad3:	add    BYTE PTR [rcx],al
 1017ad5:	add    BYTE PTR [rax],al
 1017ad7:	add    ah,bl
 1017ad9:	in     al,0x0
 1017adb:	add    bh,bh
 1017add:	(bad)  
 1017ade:	(bad)  
 1017adf:	call   QWORD PTR [rcx]
 1017ae1:	or     eax,DWORD PTR cs:[rax]
 1017ae4:	cs xor al,0x4c
 1017ae7:	add    BYTE PTR [rbx],bl
 1017ae9:	add    DWORD PTR [rax+rax*1+0xc],eax
 1017aed:	lock or ah,al
 1017af0:	or     al,dl
 1017af2:	(bad)  
 1017af3:	rol    BYTE PTR [rax+rsi*2],0x3
 1017af7:	(bad)  
 1017af8:	add    dl,BYTE PTR [rax+0x0]
 1017afb:	add    BYTE PTR [rax-0x1ffffefa],cl
 1017b01:	sub    BYTE PTR [rax],al
 1017b03:	add    bh,bh
 1017b05:	(bad)  
 1017b06:	(bad)  
 1017b07:	jmp    rax
 1017b09:	add    DWORD PTR [rax],r8d
 1017b0c:	(bad)  
 1017b0d:	(bad)  
 1017b0e:	(bad)  
 1017b0f:	push   rax
 1017b11:	add    DWORD PTR [rax],r8d
 1017b14:	add    DWORD PTR [rax],eax
 1017b16:	add    BYTE PTR [rax],al
 1017b18:	add    BYTE PTR [rbp+0x1],al
 1017b1b:	add    BYTE PTR [rcx],al
 1017b1d:	add    BYTE PTR [rax],al
 1017b1f:	add    BYTE PTR [rax],dl
 1017b21:	add    DWORD PTR [r8],r8d
 1017b24:	add    DWORD PTR [rax],eax
 1017b26:	add    BYTE PTR [rax],al
 1017b28:	and    BYTE PTR [rbp+0x1],al
 1017b2b:	add    BYTE PTR [rcx],al
 1017b2d:	add    BYTE PTR [rax],al
 1017b2f:	add    BYTE PTR [rax],dh
 1017b31:	add    DWORD PTR [r8],r8d
 1017b34:	add    DWORD PTR [rax],eax
 1017b36:	add    BYTE PTR [rax],al
 1017b38:	rex
 1017b39:	add    DWORD PTR [r8],r8d
 1017b3c:	add    DWORD PTR [rax],eax
 1017b3e:	add    BYTE PTR [rax],al
 1017b40:	push   rax
 1017b41:	add    DWORD PTR [r8],r8d
 1017b44:	(bad)  
 1017b45:	add    BYTE PTR [rax],al
 1017b47:	add    BYTE PTR [rax+0x45],ah
 1017b4a:	add    DWORD PTR [rax],eax
 1017b4c:	(bad)  
 1017b4d:	add    BYTE PTR [rax],al
 1017b4f:	add    BYTE PTR [rax+0x45],dh
 1017b52:	add    DWORD PTR [rax],eax
 1017b54:	(bad)  
 1017b55:	add    BYTE PTR [rax],al
 1017b57:	add    BYTE PTR [rax+0x1000145],al
 1017b5d:	add    BYTE PTR [rax],al
 1017b5f:	add    BYTE PTR [rax+0x1000145],dl
 1017b65:	add    BYTE PTR [rax],al
 1017b67:	add    BYTE PTR [rax+0x1000145],ah
 1017b6d:	add    BYTE PTR [rax],al
 1017b6f:	add    BYTE PTR [rax+0x7000145],dh
 1017b75:	add    BYTE PTR [rax],al
 1017b77:	add    al,al
 1017b79:	add    DWORD PTR [r8],r8d
 1017b7c:	(bad)  
 1017b7d:	add    BYTE PTR [rax],al
 1017b7f:	add    al,dl
 1017b81:	add    DWORD PTR [r8],r8d
 1017b84:	(bad)  
 1017b85:	add    BYTE PTR [rax],al
 1017b87:	add    al,ah
 1017b89:	add    DWORD PTR [r8],r8d
 1017b8c:	(bad)  
 1017b8d:	add    BYTE PTR [rax],al
 1017b8f:	add    al,dh
 1017b91:	add    DWORD PTR [r8],r8d
 1017b94:	(bad)  
 1017b95:	add    BYTE PTR [rax],al
 1017b97:	add    BYTE PTR [rax],al
 1017b99:	rex.RX add DWORD PTR [rax],r8d
 1017b9c:	adc    al,BYTE PTR [rax]
 1017b9e:	add    BYTE PTR [rax],al
 1017ba0:	adc    BYTE PTR [rsi+0x1],al
 1017ba3:	add    BYTE PTR [rdx],dl
 1017ba5:	add    BYTE PTR [rax],al
 1017ba7:	add    BYTE PTR [rax],ah
 1017ba9:	rex.RX add DWORD PTR [rax],r8d
 1017bac:	adc    al,BYTE PTR [rax]
 1017bae:	add    BYTE PTR [rax],al
 1017bb0:	xor    BYTE PTR [rsi+0x1],al
 1017bb3:	add    BYTE PTR [rdx],dl
 1017bb5:	add    BYTE PTR [rax],al
 1017bb7:	add    BYTE PTR [rax+0x46],al
 1017bba:	add    DWORD PTR [rax],eax
 1017bbc:	(bad)  
 1017bbd:	add    BYTE PTR [rax],al
 1017bbf:	add    BYTE PTR [rax+0x46],dl
 1017bc2:	add    DWORD PTR [rax],eax
 1017bc4:	(bad)  
 1017bc5:	add    BYTE PTR [rax],al
 1017bc7:	add    BYTE PTR [rax+0x46],ah
 1017bca:	add    DWORD PTR [rax],eax
 1017bcc:	(bad)  
 1017bcd:	add    BYTE PTR [rax],al
 1017bcf:	add    BYTE PTR [rax+0x46],dh
 1017bd2:	add    DWORD PTR [rax],eax
 1017bd4:	(bad)  
 1017bd5:	add    BYTE PTR [rax],al
 1017bd7:	add    BYTE PTR [rax+0x1a000146],al
 1017bdd:	add    BYTE PTR [rax],al
 1017bdf:	add    BYTE PTR [rax+0x1a000146],dl
 1017be5:	add    BYTE PTR [rax],al
 1017be7:	add    BYTE PTR [rax+0x16000146],ah
 1017bed:	add    BYTE PTR [rax],al
 1017bef:	add    BYTE PTR [rax+0x16000146],dh
 1017bf5:	add    BYTE PTR [rax],al
 1017bf7:	add    al,al
 1017bf9:	rex.RX add DWORD PTR [rax],r8d
 1017bfc:	(bad)  
 1017bfd:	add    BYTE PTR [rax],al
 1017bff:	add    al,dl
 1017c01:	rex.RX add DWORD PTR [rax],r8d
 1017c04:	adc    al,BYTE PTR [rax]
 1017c06:	add    BYTE PTR [rax],al
 1017c08:	loopne 0x1017c50
 1017c0a:	add    DWORD PTR [rax],eax
 1017c0c:	adc    al,BYTE PTR [rax]
 1017c0e:	add    BYTE PTR [rax],al
 1017c10:	lock rex.RX add DWORD PTR [rax],r8d
 1017c14:	adc    al,BYTE PTR [rax]
 1017c16:	add    BYTE PTR [rax],al
 1017c18:	add    BYTE PTR [rdi+0x1],al
 1017c1b:	add    BYTE PTR [rdi],al
 1017c1d:	add    BYTE PTR [rax],al
 1017c1f:	add    BYTE PTR [rax],dl
 1017c21:	rex.RXB add DWORD PTR [r8],r8d
 1017c24:	(bad)  
 1017c25:	add    BYTE PTR [rax],al
 1017c27:	add    BYTE PTR [rax],ah
 1017c29:	rex.RXB add DWORD PTR [r8],r8d
 1017c2c:	(bad)  
 1017c2d:	add    BYTE PTR [rax],al
 1017c2f:	add    BYTE PTR [rax],dh
 1017c31:	rex.RXB add DWORD PTR [r8],r8d
 1017c34:	add    DWORD PTR [rax],eax
 1017c36:	add    BYTE PTR [rax],al
 1017c38:	rex
 1017c39:	rex.RXB add DWORD PTR [r8],r8d
 1017c3c:	add    DWORD PTR [rax],eax
 1017c3e:	add    BYTE PTR [rax],al
 1017c40:	push   rax
 1017c41:	rex.RXB add DWORD PTR [r8],r8d
 1017c44:	add    DWORD PTR [rax],eax
 1017c46:	add    BYTE PTR [rax],al
 1017c48:	(bad)  
 1017c49:	rex.RXB add DWORD PTR [r8],r8d
 1017c4c:	jo     0x1017c33
 1017c4e:	add    BYTE PTR [rax],al
 1017c50:	(bad)  
 1017c51:	(bad)  
 1017c52:	(bad)  
 1017c53:	jmp    QWORD PTR [rdx]
 1017c55:	out    0x0,al
 1017c57:	add    BYTE PTR [rcx],al
 1017c59:	add    BYTE PTR [rax],al
 1017c5b:	add    BYTE PTR [rsi],dh
 1017c5d:	out    0x0,eax
 1017c5f:	add    BYTE PTR [rax+rax*1],al
 1017c62:	add    BYTE PTR [rax],al
 1017c64:	rex.X out 0x0,eax
 1017c67:	add    BYTE PTR [rip+0x53000000],al        # 0x54017c6d
 1017c6d:	out    0x0,eax
 1017c6f:	add    BYTE PTR [rsi],al
 1017c71:	add    BYTE PTR [rax],al
 1017c73:	add    BYTE PTR [rdi-0x19],bl
 1017c76:	add    BYTE PTR [rax],al
 1017c78:	(bad)  
 1017c79:	add    BYTE PTR [rax],al
 1017c7b:	add    BYTE PTR [rcx+rbp*8],bh
 1017c7e:	add    BYTE PTR [rax],al
 1017c80:	add    DWORD PTR [rax],eax
 1017c82:	add    BYTE PTR [rax],al
 1017c84:	jmp    0x10d7c8a
 1017c8a:	add    BYTE PTR [rax],al
 1017c8c:	rex.WRB jmp 0x1027c92
 1017c92:	add    BYTE PTR [rax],al
 1017c94:	push   rdx
 1017c95:	jmp    0x1007c9a
 1017c9a:	(bad)  
 1017c9b:	call   QWORD PTR [rdi-0x17]
 1017c9e:	add    BYTE PTR [rax],al
 1017ca0:	(bad)  
 1017ca1:	add    BYTE PTR [rax],al
 1017ca3:	add    bh,cl
 1017ca5:	jmp    0x1107caa
 1017caa:	add    BYTE PTR [rax],al
 1017cac:	fucompp 
 1017cae:	add    BYTE PTR [rax],al
 1017cb0:	adc    BYTE PTR [rax],al
 1017cb2:	add    BYTE PTR [rax],al
 1017cb4:	in     eax,0xe9
 1017cb6:	add    BYTE PTR [rax],al
 1017cb8:	adc    DWORD PTR [rax],eax
 1017cba:	add    BYTE PTR [rax],al
 1017cbc:	lock jmp 0x1137cc2
 1017cc2:	add    BYTE PTR [rax],al
 1017cc4:	clc    
 1017cc5:	jmp    0x1147cca
 1017cca:	add    BYTE PTR [rax],al
 1017ccc:	cld    
 1017ccd:	jmp    0x1157cd2
 1017cd2:	add    BYTE PTR [rax],al
 1017cd4:	add    dl,ch
 1017cd6:	add    BYTE PTR [rax],al
 1017cd8:	adc    eax,0x4000000
 1017cdd:	(bad)  
 1017cde:	add    BYTE PTR [rax],al
 1017ce0:	(bad)  
 1017ce1:	add    BYTE PTR [rax],al
 1017ce3:	add    BYTE PTR [rdx+rbp*8],cl
 1017ce6:	add    BYTE PTR [rax],al
 1017ce8:	(bad)  
 1017ce9:	add    BYTE PTR [rax],al
 1017ceb:	add    BYTE PTR [rax],dl
 1017ced:	(bad)  
 1017cee:	add    BYTE PTR [rax],al
 1017cf0:	sbb    BYTE PTR [rax],al
 1017cf2:	add    BYTE PTR [rax],al
 1017cf4:	adc    al,0xea
 1017cf6:	add    BYTE PTR [rax],al
 1017cf8:	sbb    DWORD PTR [rax],eax
 1017cfa:	add    BYTE PTR [rax],al
 1017cfc:	sbb    dl,ch
 1017cfe:	add    BYTE PTR [rax],al
 1017d00:	sbb    al,BYTE PTR [rax]
 1017d02:	add    BYTE PTR [rax],al
 1017d04:	paddsb mm0,QWORD PTR [rax]
 1017d07:	add    BYTE PTR [rsi],dl
 1017d09:	add    BYTE PTR [rax],al
 1017d0b:	add    BYTE PTR [rdx],bl
 1017d0d:	in     al,dx
 1017d0e:	add    BYTE PTR [rax],al
 1017d10:	sbb    eax,0x1e000000
 1017d15:	in     al,dx
 1017d16:	add    BYTE PTR [rax],al
 1017d18:	(bad)  
 1017d19:	add    BYTE PTR [rax],al
 1017d1b:	add    BYTE PTR [rcx],ch
 1017d1d:	in     al,dx
 1017d1e:	add    BYTE PTR [rax],al
 1017d20:	adc    al,BYTE PTR [rax]
 1017d22:	add    BYTE PTR [rax],al
 1017d24:	sub    eax,0x200000ec
 1017d29:	add    BYTE PTR [rax],al
 1017d2b:	add    BYTE PTR [rcx],dh
 1017d2d:	in     al,dx
 1017d2e:	add    BYTE PTR [rax],al
 1017d30:	adc    al,BYTE PTR [rax]
 1017d32:	add    BYTE PTR [rax],al
 1017d34:	xor    eax,0x70000ec
 1017d39:	add    BYTE PTR [rax],al
 1017d3b:	add    BYTE PTR [rcx],bh
 1017d3d:	in     al,dx
 1017d3e:	add    BYTE PTR [rax],al
 1017d40:	and    eax,DWORD PTR [rax]
 1017d42:	add    BYTE PTR [rax],al
 1017d44:	cmp    eax,0x70000ec
 1017d49:	add    BYTE PTR [rax],al
 1017d4b:	add    BYTE PTR [rcx-0x14],al
 1017d4e:	add    BYTE PTR [rax],al
 1017d50:	add    DWORD PTR [rax],eax
 1017d52:	add    BYTE PTR [rax],al
 1017d54:	rex.WRB in al,dx
 1017d56:	add    BYTE PTR [rax],al
 1017d58:	(bad)  
 1017d59:	add    BYTE PTR [rax],al
 1017d5b:	add    BYTE PTR [rdx-0x14],dl
 1017d5e:	add    BYTE PTR [rax],al
 1017d60:	add    DWORD PTR [rax],eax
 1017d62:	add    BYTE PTR [rax],al
 1017d64:	pop    rsi
 1017d65:	in     al,dx
 1017d66:	add    BYTE PTR [rax],al
 1017d68:	(bad)  
 1017d69:	(bad)  
 1017d6a:	(bad)  
 1017d6b:	call   FWORD PTR [rcx]
 1017d6d:	xor    al,0xb
 1017d6f:	add    BYTE PTR [rsi],ah
 1017d71:	fs sub eax,0x2c342200
 1017d77:	add    BYTE PTR [rsi],dl
 1017d79:	add    DWORD PTR [rax+rax*1],esp
 1017d7c:	or     esi,eax
 1017d7e:	or     eax,esp
 1017d80:	(bad)  
 1017d81:	rol    BYTE PTR [rip+0x500470],0x0        # 0x15181f8
 1017d88:	and    al,0x7
 1017d8a:	add    DWORD PTR [rax],eax
 1017d8c:	or     BYTE PTR [rcx],ch
 1017d8e:	add    BYTE PTR [rax],al
 1017d90:	sbb    al,BYTE PTR [rcx]
 1017d92:	add    BYTE PTR [rax],al
 1017d94:	(bad)  
 1017d95:	(bad)  
 1017d96:	(bad)  
 1017d97:	jmp    QWORD PTR [rax-0xfffeb6]
 1017d9d:	(bad)  
 1017d9e:	(bad)  
 1017d9f:	push   QWORD PTR [rax+0x100014a]
 1017da5:	add    BYTE PTR [rax],al
 1017da7:	add    al,al
 1017da9:	rex.WX add QWORD PTR [rax],rax
 1017dac:	add    ch,ch
 1017dae:	add    BYTE PTR [rax],al
 1017db0:	(bad)  
 1017db1:	(bad)  
 1017db2:	(bad)  
 1017db3:	(bad)  
 1017db4:	mov    eax,0x10000ed
 1017db9:	add    BYTE PTR [rax],al
 1017dbb:	add    ch,cl
 1017dbd:	in     eax,dx
 1017dbe:	add    BYTE PTR [rax],al
 1017dc0:	(bad)  
 1017dc1:	(bad)  
 1017dc2:	(bad)  
 1017dc3:	inc    DWORD PTR [rax-0x12]
 1017dc6:	add    BYTE PTR [rax],al
 1017dc8:	add    DWORD PTR [rax],eax
 1017dca:	add    BYTE PTR [rax],al
 1017dcc:	push   rcx
 1017dcd:	out    dx,al
 1017dce:	add    BYTE PTR [rax],al
 1017dd0:	(bad)  
 1017dd1:	(bad)  
 1017dd2:	(bad)  
 1017dd3:	inc    edx
 1017dd5:	out    dx,al
 1017dd6:	add    BYTE PTR [rax],al
 1017dd8:	add    DWORD PTR [rax],eax
 1017dda:	add    BYTE PTR [rax],al
 1017ddc:	push   rbp
 1017ddd:	out    dx,eax
 1017dde:	add    BYTE PTR [rax],al
 1017de0:	(bad)  
 1017de1:	(bad)  
 1017de2:	(bad)  
 1017de3:	inc    DWORD PTR [rcx]
 1017de5:	or     al,BYTE PTR [rax+rax*1]
 1017de8:	or     dh,BYTE PTR [rsi+rax*1]
 1017deb:	add    BYTE PTR [rdx],cl
 1017ded:	xor    al,BYTE PTR [rsi]
 1017def:	jo     0x1017df2
 1017df1:	clts   
 1017df3:	add    BYTE PTR [rdi],cl
 1017df5:	fs (bad) 
 1017df7:	add    BYTE PTR [rdi],cl
 1017df9:	xor    al,0x6
 1017dfb:	add    BYTE PTR [rdi],cl
 1017dfd:	xor    cl,BYTE PTR [rbx]
 1017dff:	jo     0x1017e12
 1017e01:	adc    eax,DWORD PTR [rdx]
 1017e03:	add    BYTE PTR [rdx],cl
 1017e05:	push   rdx
 1017e06:	(bad)  
 1017e07:	xor    BYTE PTR [rax+0x30000106],cl
 1017e0d:	sub    DWORD PTR [rax],eax
 1017e0f:	add    bh,bh
 1017e11:	(bad)  
 1017e12:	(bad)  
 1017e13:	inc    eax
 1017e15:	(bad)  
 1017e16:	add    DWORD PTR [rax],eax
 1017e18:	(bad)  
 1017e19:	(bad)  
 1017e1a:	(bad)  
 1017e1b:	call   rax
 1017e1d:	(bad)  
 1017e1e:	add    DWORD PTR [rax],eax
 1017e20:	(bad)  
 1017e21:	(bad)  
 1017e22:	(bad)  
 1017e23:	jmp    rax
 1017e25:	(bad)  
 1017e26:	add    DWORD PTR [rax],eax
 1017e28:	movabs al,ds:0xc0ffffffff0000f1
 1017e31:	icebp  
 1017e32:	add    BYTE PTR [rax],al
 1017e34:	add    BYTE PTR [rax],al
 1017e36:	add    BYTE PTR [rax],al
 1017e38:	xlat   BYTE PTR ds:[rbx]
 1017e39:	icebp  
 1017e3a:	add    BYTE PTR [rax],al
 1017e3c:	(bad)  
 1017e3d:	(bad)  
 1017e3e:	(bad)  
 1017e3f:	call   QWORD PTR [rcx]
 1017e41:	sbb    BYTE PTR [rax+rax*1],al
 1017e44:	sbb    BYTE PTR [rcx+rcx*1],dh
 1017e47:	add    BYTE PTR [rdx],cl
 1017e49:	push   rdx
 1017e4a:	(bad)  
 1017e4b:	jo     0x1017dd5
 1017e4d:	(bad)  
 1017e4e:	add    DWORD PTR [rax],eax
 1017e50:	pop    rax
 1017e51:	sub    DWORD PTR [rax],eax
 1017e53:	add    bh,bh
 1017e55:	(bad)  
 1017e56:	(bad)  
 1017e57:	jmp    QWORD PTR [rax-0xfffebe]
 1017e5d:	(bad)  
 1017e5e:	(bad)  
 1017e5f:	push   QWORD PTR [rax-0xfffebe]
 1017e65:	(bad)  
 1017e66:	(bad)  
 1017e67:	inc    eax
 1017e69:	rex.X add DWORD PTR [rax],eax
 1017e6c:	lock icebp 
 1017e6e:	add    BYTE PTR [rax],al
 1017e70:	(bad)  
 1017e71:	(bad)  
 1017e72:	(bad)  
 1017e73:	call   QWORD PTR [rdi]
 1017e75:	repnz add BYTE PTR [rax],al
 1017e78:	add    BYTE PTR [rax],al
 1017e7a:	add    BYTE PTR [rax],al
 1017e7c:	repnz add BYTE PTR cs:[rax],al
 1017e80:	(bad)  
 1017e81:	(bad)  
 1017e82:	(bad)  
 1017e83:	call   QWORD PTR [rcx]
 1017e85:	(bad)  
 1017e86:	or     eax,DWORD PTR [rax]
 1017e88:	(bad)  
 1017e89:	je     0x1017ebe
 1017e8b:	add    BYTE PTR [rbx],ah
 1017e8d:	xor    al,BYTE PTR fs:[rax]
 1017e90:	(bad)  
 1017e91:	xor    al,0x31
 1017e93:	add    BYTE PTR [rbx],dl
 1017e95:	add    DWORD PTR [rax+rax*1],ebp
 1017e98:	or     al,dh
 1017e9a:	(bad)  
 1017e9b:	loopne 0x1017ea1
 1017e9d:	push   rax
 1017e9e:	add    BYTE PTR [rax],al
 1017ea0:	mov    BYTE PTR [rsi],al
 1017ea2:	add    DWORD PTR [rax],eax
 1017ea4:	sub    BYTE PTR [rcx],0x0
 1017ea7:	add    bh,bh
 1017ea9:	(bad)  
 1017eaa:	(bad)  
 1017eab:	inc    eax
 1017ead:	rex.RXB add DWORD PTR [r8],r8d
 1017eb0:	(bad)  
 1017eb1:	(bad)  
 1017eb2:	(bad)  
 1017eb3:	call   rax
 1017eb5:	rex.RXB add DWORD PTR [r8],r8d
 1017eb8:	add    DWORD PTR [rax],eax
 1017eba:	add    BYTE PTR [rax],al
 1017ebc:	loopne 0x1017f05
 1017ebe:	add    DWORD PTR [rax],eax
 1017ec0:	(bad)  
 1017ec1:	repnz add BYTE PTR [rax],al
 1017ec4:	(bad)  
 1017ec5:	(bad)  
 1017ec6:	(bad)  
 1017ec7:	inc    DWORD PTR [rdx]
 1017ec9:	repz add BYTE PTR [rax],al
 1017ecc:	add    DWORD PTR [rax],eax
 1017ece:	add    BYTE PTR [rax],al
 1017ed0:	xchg   edx,eax
 1017ed1:	repz add BYTE PTR [rax],al
 1017ed4:	(bad)  
 1017ed5:	(bad)  
 1017ed6:	(bad)  
 1017ed7:	call   QWORD PTR [rcx]
 1017ed9:	adc    DWORD PTR [rcx],eax
 1017edb:	add    BYTE PTR [rcx],cl
 1017edd:	and    al,BYTE PTR [rax]
 1017edf:	add    BYTE PTR [rax-0x57fffefa],cl
 1017ee5:	sub    DWORD PTR [rax],eax
 1017ee7:	add    bh,bh
 1017ee9:	(bad)  
 1017eea:	(bad)  
 1017eeb:	jmp    QWORD PTR [rax+0x41]
 1017eee:	add    DWORD PTR [rax],eax
 1017ef0:	and    ah,dh
 1017ef2:	add    BYTE PTR [rax],al
 1017ef4:	(bad)  
 1017ef5:	(bad)  
 1017ef6:	(bad)  
 1017ef7:	call   QWORD PTR [rcx]
 1017ef9:	adc    eax,DWORD PTR [rdx]
 1017efb:	add    BYTE PTR [rdx],cl
 1017efd:	push   rdx
 1017efe:	(bad)  
 1017eff:	xor    BYTE PTR [rax-0x2ffffefa],cl
 1017f05:	sub    DWORD PTR [rax],eax
 1017f07:	add    bh,bh
 1017f09:	(bad)  
 1017f0a:	(bad)  
 1017f0b:	inc    DWORD PTR [rax+0x44]
 1017f0e:	add    DWORD PTR [rax],eax
 1017f10:	push   rax
 1017f11:	hlt    
 1017f12:	add    BYTE PTR [rax],al
 1017f14:	(bad)  
 1017f15:	(bad)  
 1017f16:	(bad)  
 1017f17:	call   QWORD PTR [rcx]
 1017f19:	adc    eax,DWORD PTR [rdx]
 1017f1b:	add    BYTE PTR [rdx],cl
 1017f1d:	push   rdx
 1017f1e:	(bad)  
 1017f1f:	xor    BYTE PTR [rax-0x7fffefa],cl
 1017f25:	sub    DWORD PTR [rax],eax
 1017f27:	add    bh,bh
 1017f29:	(bad)  
 1017f2a:	(bad)  
 1017f2b:	jmp    QWORD PTR [rax]
 1017f2d:	rex add DWORD PTR [rax],eax
 1017f30:	(bad)  
 1017f31:	(bad)  
 1017f32:	(bad)  
 1017f33:	push   QWORD PTR [rax]
 1017f35:	rex add DWORD PTR [rax],eax
 1017f38:	nop
 1017f39:	hlt    
 1017f3a:	add    BYTE PTR [rax],al
 1017f3c:	(bad)  
 1017f3d:	(bad)  
 1017f3e:	(bad)  
 1017f3f:	push   QWORD PTR [rax+0xf4]
 1017f45:	add    BYTE PTR [rax],al
 1017f47:	add    bh,al
 1017f49:	hlt    
 1017f4a:	add    BYTE PTR [rax],al
 1017f4c:	(bad)  
 1017f4d:	(bad)  
 1017f4e:	(bad)  
 1017f4f:	call   QWORD PTR [rcx]
 1017f51:	sbb    BYTE PTR [rax+rax*1],al
 1017f54:	sbb    BYTE PTR [rcx+rcx*1],dh
 1017f57:	add    BYTE PTR [rdx],cl
 1017f59:	push   rdx
 1017f5a:	(bad)  
 1017f5b:	jo     0x1017ee5
 1017f5d:	(bad)  
 1017f5e:	add    DWORD PTR [rax],eax
 1017f60:	and    BYTE PTR [rdx],ch
 1017f62:	add    BYTE PTR [rax],al
 1017f64:	(bad)  
 1017f65:	(bad)  
 1017f66:	(bad)  
 1017f67:	inc    DWORD PTR [rax]
 1017f69:	rex.XB add DWORD PTR [r8],eax
 1017f6c:	(bad)  
 1017f6d:	(bad)  
 1017f6e:	(bad)  
 1017f6f:	call   QWORD PTR [rax]
 1017f71:	rex.XB add DWORD PTR [r8],eax
 1017f74:	loopne 0x1017f6a
 1017f76:	add    BYTE PTR [rax],al
 1017f78:	(bad)  
 1017f79:	(bad)  
 1017f7a:	(bad)  
 1017f7b:	inc    DWORD PTR [rdi]
 1017f7d:	cmc    
 1017f7e:	add    BYTE PTR [rax],al
 1017f80:	add    BYTE PTR [rax],al
 1017f82:	add    BYTE PTR [rax],al
 1017f84:	(bad)  
 1017f85:	cmc    
 1017f86:	add    BYTE PTR [rax],al
 1017f88:	(bad)  
 1017f89:	(bad)  
 1017f8a:	(bad)  
 1017f8b:	call   QWORD PTR [rcx]
 1017f8d:	adc    eax,DWORD PTR [rdx]
 1017f8f:	add    BYTE PTR [rdx],cl
 1017f91:	push   rdx
 1017f92:	(bad)  
 1017f93:	xor    BYTE PTR [rax+0x48000106],cl
 1017f99:	sub    al,BYTE PTR [rax]
 1017f9b:	add    bh,bh
 1017f9d:	(bad)  
 1017f9e:	(bad)  
 1017f9f:	inc    eax
 1017fa1:	rex add DWORD PTR [rax],eax
 1017fa4:	(bad)  
 1017fa5:	(bad)  
 1017fa6:	(bad)  
 1017fa7:	call   rax
 1017fa9:	rex add DWORD PTR [rax],eax
 1017fac:	(bad)  
 1017fad:	(bad)  
 1017fae:	(bad)  
 1017faf:	jmp    rax
 1017fb1:	rex add DWORD PTR [rax],eax
 1017fb4:	push   rax
 1017fb5:	cmc    
 1017fb6:	add    BYTE PTR [rax],al
 1017fb8:	(bad)  
 1017fb9:	(bad)  
 1017fba:	(bad)  
 1017fbb:	push   QWORD PTR [rax-0xb]
 1017fbe:	add    BYTE PTR [rax],al
 1017fc0:	add    DWORD PTR [rax],eax
 1017fc2:	add    BYTE PTR [rax],al
 1017fc4:	xchg   ebp,esi
 1017fc6:	add    BYTE PTR [rax],al
 1017fc8:	(bad)  
 1017fc9:	(bad)  
 1017fca:	(bad)  
 1017fcb:	call   QWORD PTR [rcx]
 1017fcd:	sbb    BYTE PTR [rax+rax*1],al
 1017fd0:	sbb    BYTE PTR [rcx+rcx*1],dh
 1017fd3:	add    BYTE PTR [rdx],cl
 1017fd5:	push   rdx
 1017fd6:	(bad)  
 1017fd7:	jo     0x1017f61
 1017fd9:	(bad)  
 1017fda:	add    DWORD PTR [rax],eax
 1017fdc:	jo     0x1018008
 1017fde:	add    BYTE PTR [rax],al
 1017fe0:	(bad)  
 1017fe1:	(bad)  
 1017fe2:	(bad)  
 1017fe3:	jmp    QWORD PTR [rax-0xfffebd]
 1017fe9:	(bad)  
 1017fea:	(bad)  
 1017feb:	push   QWORD PTR [rax-0xfffebd]
 1017ff1:	(bad)  
 1017ff2:	(bad)  
 1017ff3:	inc    eax
 1017ff5:	rex.XB add DWORD PTR [r8],eax
 1017ff8:	movabs al,ds:0xc7ffffffff0000f5
 1018001:	cmc    
 1018002:	add    BYTE PTR [rax],al
 1018004:	add    DWORD PTR [rax],eax
 1018006:	add    BYTE PTR [rax],al
 1018008:	fdivrp st(5),st
 101800a:	add    BYTE PTR [rax],al
 101800c:	(bad)  
 101800d:	(bad)  
 101800e:	(bad)  
 101800f:	inc    DWORD PTR [rcx]
 1018011:	(bad)  
 1018012:	add    al,BYTE PTR [rax]
 1018014:	(bad)  
 1018015:	xor    al,BYTE PTR [rdx]
 1018017:	xor    BYTE PTR [rcx],dl
 1018019:	(bad)  
 101801a:	or     eax,DWORD PTR [rax]
 101801c:	(bad)  
 101801d:	je     0x1018052
 101801f:	add    BYTE PTR [rbx],ah
 1018021:	xor    al,BYTE PTR fs:[rax]
 1018024:	(bad)  
 1018025:	xor    al,0x31
 1018027:	add    BYTE PTR [rbx],dl
 1018029:	add    DWORD PTR [rax+rax*1],ebp
 101802c:	or     al,dh
 101802e:	(bad)  
 101802f:	loopne 0x1018035
 1018031:	push   rax
 1018032:	add    BYTE PTR [rax],al
 1018034:	mov    BYTE PTR [rsi],al
 1018036:	add    DWORD PTR [rax],eax
 1018038:	cwde   
 1018039:	sub    al,BYTE PTR [rax]
 101803b:	add    bh,bh
 101803d:	(bad)  
 101803e:	(bad)  
 101803f:	inc    DWORD PTR [rax]
 1018041:	add    QWORD PTR [rax],rax
 1018044:	(bad)  
 1018045:	(bad)  
 1018046:	(bad)  
 1018047:	call   QWORD PTR [rax]
 1018049:	add    QWORD PTR [rax],rax
 101804c:	add    DWORD PTR [rax],eax
 101804e:	add    BYTE PTR [rax],al
 1018050:	and    BYTE PTR [rax+0x1],cl
 1018053:	add    BYTE PTR [rax-0xa],ah
 1018056:	add    BYTE PTR [rax],al
 1018058:	(bad)  
 1018059:	(bad)  
 101805a:	(bad)  
 101805b:	inc    DWORD PTR [rdx]
 101805d:	test   DWORD PTR [rax],0x100
 1018063:	add    BYTE PTR [rdx-0xffff09],dl
 1018069:	(bad)  
 101806a:	(bad)  
 101806b:	call   QWORD PTR [rcx]
 101806d:	adc    DWORD PTR [rcx],eax
 101806f:	add    BYTE PTR [rcx],cl
 1018071:	and    al,BYTE PTR [rax]
 1018073:	add    BYTE PTR [rax-0x3ffffefa],cl
 1018079:	sub    al,BYTE PTR [rax]
 101807b:	add    bh,bh
 101807d:	(bad)  
 101807e:	(bad)  
 101807f:	inc    DWORD PTR [rax+0x20000141]
 1018085:	clc    
 1018086:	add    BYTE PTR [rax],al
 1018088:	(bad)  
 1018089:	(bad)  
 101808a:	(bad)  
 101808b:	call   QWORD PTR [rcx]
 101808d:	adc    eax,DWORD PTR [rdx]
 101808f:	add    BYTE PTR [rdx],cl
 1018091:	push   rdx
 1018092:	(bad)  
 1018093:	xor    BYTE PTR [rax-0x17fffefa],cl
 1018099:	sub    al,BYTE PTR [rax]
 101809b:	add    bh,bh
 101809d:	(bad)  
 101809e:	(bad)  
 101809f:	jmp    QWORD PTR [rax+0x44]
 10180a2:	add    DWORD PTR [rax],eax
 10180a4:	push   rax
 10180a5:	clc    
 10180a6:	add    BYTE PTR [rax],al
 10180a8:	(bad)  
 10180a9:	(bad)  
 10180aa:	(bad)  
 10180ab:	call   QWORD PTR [rcx]
 10180ad:	adc    eax,DWORD PTR [rdx]
 10180af:	add    BYTE PTR [rdx],cl
 10180b1:	push   rdx
 10180b2:	(bad)  
 10180b3:	xor    BYTE PTR [rax+0x10000106],cl
 10180b9:	sub    eax,DWORD PTR [rax]
 10180bb:	add    bh,bh
 10180bd:	(bad)  
 10180be:	(bad)  
 10180bf:	call   QWORD PTR [rax+0x40]
 10180c2:	add    DWORD PTR [rax],eax
 10180c4:	(bad)  
 10180c5:	(bad)  
 10180c6:	(bad)  
 10180c7:	jmp    QWORD PTR [rax+0x40]
 10180ca:	add    DWORD PTR [rax],eax
 10180cc:	nop
 10180cd:	clc    
 10180ce:	add    BYTE PTR [rax],al
 10180d0:	(bad)  
 10180d1:	(bad)  
 10180d2:	(bad)  
 10180d3:	push   QWORD PTR [rax+0xf8]
 10180d9:	add    BYTE PTR [rax],al
 10180db:	add    bh,al
 10180dd:	clc    
 10180de:	add    BYTE PTR [rax],al
 10180e0:	(bad)  
 10180e1:	(bad)  
 10180e2:	(bad)  
 10180e3:	call   QWORD PTR [rcx]
 10180e5:	sbb    BYTE PTR [rax+rax*1],al
 10180e8:	sbb    BYTE PTR [rcx+rcx*1],dh
 10180eb:	add    BYTE PTR [rdx],cl
 10180ed:	push   rdx
 10180ee:	(bad)  
 10180ef:	jo     0x1018079
 10180f1:	(bad)  
 10180f2:	add    DWORD PTR [rax],eax
 10180f4:	cmp    BYTE PTR [rbx],ch
 10180f6:	add    BYTE PTR [rax],al
 10180f8:	(bad)  
 10180f9:	(bad)  
 10180fa:	(bad)  
 10180fb:	push   QWORD PTR [rax]
 10180fd:	rex.XB add DWORD PTR [r8],eax
 1018100:	(bad)  
 1018101:	(bad)  
 1018102:	(bad)  
 1018103:	inc    DWORD PTR [rax+0x43]
 1018106:	add    DWORD PTR [rax],eax
 1018108:	loopne 0x1018102
 101810a:	add    BYTE PTR [rax],al
 101810c:	(bad)  
 101810d:	(bad)  
 101810e:	(bad)  
 101810f:	inc    DWORD PTR [rdi]
 1018111:	stc    
 1018112:	add    BYTE PTR [rax],al
 1018114:	add    BYTE PTR [rax],al
 1018116:	add    BYTE PTR [rax],al
 1018118:	(bad)  
 1018119:	stc    
 101811a:	add    BYTE PTR [rax],al
 101811c:	(bad)  
 101811d:	(bad)  
 101811e:	(bad)  
 101811f:	call   QWORD PTR [rcx]
 1018121:	adc    eax,DWORD PTR [rdx]
 1018123:	add    BYTE PTR [rdx],cl
 1018125:	push   rdx
 1018126:	(bad)  
 1018127:	xor    BYTE PTR [rax+0x60000106],cl
 101812d:	sub    eax,DWORD PTR [rax]
 101812f:	add    bh,bh
 1018131:	(bad)  
 1018132:	(bad)  
 1018133:	inc    DWORD PTR [rax]
 1018135:	add    DWORD PTR [r8],eax
 1018138:	(bad)  
 1018139:	(bad)  
 101813a:	(bad)  
 101813b:	call   QWORD PTR [rax]
 101813d:	add    DWORD PTR [r8],eax
 1018140:	(bad)  
 1018141:	(bad)  
 1018142:	(bad)  
 1018143:	jmp    QWORD PTR [rax]
 1018145:	add    DWORD PTR [r8],eax
 1018148:	push   rax
 1018149:	stc    
 101814a:	add    BYTE PTR [rax],al
 101814c:	(bad)  
 101814d:	(bad)  
 101814e:	(bad)  
 101814f:	push   QWORD PTR [rax-0x7]
 1018152:	add    BYTE PTR [rax],al
 1018154:	add    DWORD PTR [rax],eax
 1018156:	add    BYTE PTR [rax],al
 1018158:	xchg   ecx,edi
 101815a:	add    BYTE PTR [rax],al
 101815c:	(bad)  
 101815d:	(bad)  
 101815e:	(bad)  
 101815f:	call   QWORD PTR [rcx]
 1018161:	sbb    BYTE PTR [rax+rax*1],al
 1018164:	sbb    BYTE PTR [rcx+rcx*1],dh
 1018167:	add    BYTE PTR [rdx],cl
 1018169:	push   rdx
 101816a:	(bad)  
 101816b:	jo     0x10180f5
 101816d:	(bad)  
 101816e:	add    DWORD PTR [rax],eax
 1018170:	mov    BYTE PTR [rbx],ch
 1018172:	add    BYTE PTR [rax],al
 1018174:	(bad)  
 1018175:	(bad)  
 1018176:	(bad)  
 1018177:	jmp    rax
 1018179:	rex.XB add DWORD PTR [r8],eax
 101817c:	(bad)  
 101817d:	(bad)  
 101817e:	(bad)  
 101817f:	push   rax
 1018181:	rex.XB add DWORD PTR [r8],eax
 1018184:	(bad)  
 1018185:	(bad)  
 1018186:	(bad)  
 1018187:	inc    DWORD PTR [rax]
 1018189:	add    DWORD PTR [rax],r8d
 101818c:	movabs al,ds:0xc7ffffffff0000f9
 1018195:	stc    
 1018196:	add    BYTE PTR [rax],al
 1018198:	add    DWORD PTR [rax],eax
 101819a:	add    BYTE PTR [rax],al
 101819c:	fdivp  st(1),st
 101819e:	add    BYTE PTR [rax],al
 10181a0:	(bad)  
 10181a1:	(bad)  
 10181a2:	(bad)  
 10181a3:	inc    DWORD PTR [rcx]
 10181a5:	(bad)  
 10181a6:	add    al,BYTE PTR [rax]
 10181a8:	(bad)  
 10181a9:	xor    al,BYTE PTR [rdx]
 10181ab:	xor    BYTE PTR [rcx],dl
 10181ad:	adc    DWORD PTR [rcx],eax
 10181af:	add    BYTE PTR [rcx],cl
 10181b1:	and    al,BYTE PTR [rax]
 10181b3:	add    BYTE PTR [rax+0x28000106],cl
 10181b9:	xor    al,BYTE PTR [rax]
 10181bb:	add    bh,bh
 10181bd:	(bad)  
 10181be:	(bad)  
 10181bf:	jmp    rax
 10181c1:	rex.WX add QWORD PTR [rax],rax
 10181c4:	rex cli 
 10181c6:	add    BYTE PTR [rax],al
 10181c8:	(bad)  
 10181c9:	(bad)  
 10181ca:	(bad)  
 10181cb:	call   QWORD PTR [rdi-0x6]
 10181ce:	add    BYTE PTR [rax],al
 10181d0:	add    BYTE PTR [rax],al
 10181d2:	add    BYTE PTR [rax],al
 10181d4:	(bad)  
 10181d5:	cli    
 10181d6:	add    BYTE PTR [rax],al
 10181d8:	(bad)  
 10181d9:	(bad)  
 10181da:	(bad)  
 10181db:	call   QWORD PTR [rcx]
 10181dd:	adc    eax,DWORD PTR [rdx]
 10181df:	add    BYTE PTR [rdx],cl
 10181e1:	push   rdx
 10181e2:	(bad)  
 10181e3:	xor    BYTE PTR [rax+0x50000106],cl
 10181e9:	xor    al,BYTE PTR [rax]
 10181eb:	add    bh,bh
 10181ed:	(bad)  
 10181ee:	(bad)  
 10181ef:	inc    DWORD PTR [rax]
 10181f1:	rex.WXB add QWORD PTR [r8],rax
 10181f4:	jo     0x10181f0
 10181f6:	add    BYTE PTR [rax],al
 10181f8:	(bad)  
 10181f9:	(bad)  
 10181fa:	(bad)  
 10181fb:	inc    DWORD PTR [rsi+0xfa]
 1018201:	add    BYTE PTR [rax],al
 1018203:	add    BYTE PTR [rdx+rdi*8-0x10000],cl
 101820a:	(bad)  
 101820b:	call   FWORD PTR [rcx]
 101820d:	cmp    al,0x9
 101820f:	add    BYTE PTR [rbx],ah
 1018211:	add    DWORD PTR [rdx+0x0],esi
 1018214:	adc    al,0xf0
 1018216:	adc    ah,al
 1018218:	adc    al,al
 101821a:	(bad)  
 101821b:	jo     0x101822a
 101821d:	(bad)  
 101821e:	or     al,0x30
 1018220:	or     edx,DWORD PTR [rax+0x0]
 1018223:	add    BYTE PTR [rdi+rax*1],ah
 1018226:	add    DWORD PTR [rax],eax
 1018228:	js     0x101825c
 101822a:	add    BYTE PTR [rax],al
 101822c:	(bad)  
 101822d:	add    eax,DWORD PTR [rax]
 101822f:	add    bh,bh
 1018231:	(bad)  
 1018232:	(bad)  
 1018233:	jmp    rax
 1018235:	rex.WXB add QWORD PTR [r8],rax
 1018238:	(bad)  
 1018239:	(bad)  
 101823a:	(bad)  
 101823b:	push   rax
 101823d:	rex.WXB add QWORD PTR [r8],rax
 1018240:	add    DWORD PTR [rax],eax
 1018242:	add    BYTE PTR [rax],al
 1018244:	add    BYTE PTR [rcx+rax*1+0x0],cl
 1018248:	add    DWORD PTR [rax],eax
 101824a:	add    BYTE PTR [rax],al
 101824c:	adc    BYTE PTR [rcx+rax*1+0x0],cl
 1018250:	add    DWORD PTR [rax],eax
 1018252:	add    BYTE PTR [rax],al
 1018254:	and    BYTE PTR [rcx+rax*1+0x0],cl
 1018258:	mov    al,0xfa
 101825a:	add    BYTE PTR [rax],al
 101825c:	(bad)  
 101825d:	(bad)  
 101825e:	(bad)  
 101825f:	jmp    QWORD PTR [rdi-0x5]
 1018262:	add    BYTE PTR [rax],al
 1018264:	add    DWORD PTR [rax],eax
 1018266:	add    BYTE PTR [rax],al
 1018268:	rex.X cld 
 101826a:	add    BYTE PTR [rax],al
 101826c:	(bad)  
 101826d:	(bad)  
 101826e:	(bad)  
 101826f:	push   QWORD PTR [rax+0x10000fc]
 1018275:	add    BYTE PTR [rax],al
 1018277:	add    BYTE PTR [rdi],cl
 1018279:	std    
 101827a:	add    BYTE PTR [rax],al
 101827c:	add    eax,DWORD PTR [rax]
 101827e:	add    BYTE PTR [rax],al
 1018280:	sbb    ebp,edi
 1018282:	add    BYTE PTR [rax],al
 1018284:	add    DWORD PTR [rax],eax
 1018286:	add    BYTE PTR [rax],al
 1018288:	lahf   
 1018289:	std    
 101828a:	add    BYTE PTR [rax],al
 101828c:	(bad)  
 101828d:	(bad)  
 101828e:	(bad)  
 101828f:	dec    DWORD PTR [rdx]
 1018291:	inc    BYTE PTR [rax]
 1018293:	add    BYTE PTR [rcx],al
 1018295:	add    BYTE PTR [rax],al
 1018297:	add    BYTE PTR [rdi-0xffff02],al
 101829d:	(bad)  
 101829e:	(bad)  
 101829f:	call   QWORD PTR [rcx]
 10182a1:	or     eax,DWORD PTR cs:[rax]
 10182a4:	cs xor al,0x3b
 10182a7:	add    BYTE PTR [rbx],bl
 10182a9:	add    DWORD PTR [rdx],esi
 10182ab:	add    BYTE PTR [rax+rsi*8],cl
 10182ae:	or     ah,al
 10182b0:	or     al,dl
 10182b2:	(bad)  
 10182b3:	rol    BYTE PTR [rax+rsi*2],0x3
 10182b7:	(bad)  
 10182b8:	add    dl,BYTE PTR [rax+0x0]
 10182bb:	add    BYTE PTR [rax-0x5ffffefa],cl
 10182c1:	xor    al,BYTE PTR [rax]
 10182c3:	add    bh,bh
 10182c5:	(bad)  
 10182c6:	(bad)  
 10182c7:	jmp    QWORD PTR [rax+0x4b]
 10182ca:	add    DWORD PTR [rax],eax
 10182cc:	(bad)  
 10182cd:	(bad)  
 10182ce:	(bad)  
 10182cf:	push   QWORD PTR [rax+0x4b]
 10182d2:	add    DWORD PTR [rax],eax
 10182d4:	add    DWORD PTR [rax],eax
 10182d6:	add    BYTE PTR [rax],al
 10182d8:	or     BYTE PTR [rbx+0x1],0x0
 10182dc:	add    DWORD PTR [rax],eax
 10182de:	add    BYTE PTR [rax],al
 10182e0:	nop
 10182e1:	rex.WXB add QWORD PTR [r8],rax
 10182e4:	add    DWORD PTR [rax],eax
 10182e6:	add    BYTE PTR [rax],al
 10182e8:	movabs al,ds:0xb00000000100014b
 10182f1:	rex.WXB add QWORD PTR [r8],rax
 10182f4:	add    DWORD PTR [rax],eax
 10182f6:	add    BYTE PTR [rax],al
 10182f8:	ror    BYTE PTR [rbx+0x1],0x0
 10182fc:	mov    al,0xfe
 10182fe:	add    BYTE PTR [rax],al
 1018300:	(bad)  
 1018301:	(bad)  
 1018302:	(bad)  
 1018303:	call   FWORD PTR [rdi-0x1]
 1018306:	add    BYTE PTR [rax],al
 1018308:	add    DWORD PTR [rax],eax
 101830a:	add    BYTE PTR [rax],al
 101830c:	sbb    eax,0xff000101
 1018311:	(bad)  
 1018312:	(bad)  
 1018313:	dec    DWORD PTR [rbx+0x1000101]
 1018319:	add    BYTE PTR [rax],al
 101831b:	add    bl,dh
 101831d:	add    DWORD PTR [rcx],eax
 101831f:	add    BYTE PTR [rax+rax*1],al
 1018322:	add    BYTE PTR [rax],al
 1018324:	add    eax,DWORD PTR [rdx]
 1018326:	add    DWORD PTR [rax],eax
 1018328:	add    DWORD PTR [rax],eax
 101832a:	add    BYTE PTR [rax],al
 101832c:	jns    0x1018331
 101832e:	add    DWORD PTR [rax],eax
 1018330:	(bad)  
 1018331:	add    BYTE PTR [rax],al
 1018333:	add    BYTE PTR [rcx+0x1000103],cl
 1018339:	add    BYTE PTR [rax],al
 101833b:	add    BYTE PTR [rax],bh
 101833d:	add    al,0x1
 101833f:	add    bh,bh
 1018341:	(bad)  
 1018342:	(bad)  
 1018343:	call   QWORD PTR [rcx]
 1018345:	and    cl,BYTE PTR [rcx]
 1018347:	add    BYTE PTR [rdx],ah
 1018349:	fs and al,0x0
 101834c:	(bad)  
 101834d:	xor    al,0x23
 101834f:	add    BYTE PTR [rdx],dl
 1018351:	add    DWORD PTR [rsi],ebx
 1018353:	add    BYTE PTR [rdi],al
 1018355:	loopne 0x101835c
 1018357:	jo     0x101835d
 1018359:	push   rax
 101835a:	add    BYTE PTR [rax],al
 101835c:	mov    BYTE PTR [rsi],al
 101835e:	add    DWORD PTR [rax],eax
 1018360:	enter  0x32,0x0
 1018364:	(bad)  
 1018365:	(bad)  
 1018366:	(bad)  
 1018367:	jmp    QWORD PTR [rax]
 1018369:	rex.WXB add QWORD PTR [r8],rax
 101836c:	(bad)  
 101836d:	(bad)  
 101836e:	(bad)  
 101836f:	push   QWORD PTR [rax]
 1018371:	rex.WXB add QWORD PTR [r8],rax
 1018374:	add    DWORD PTR [rax],eax
 1018376:	add    BYTE PTR [rax],al
 1018378:	rex
 1018379:	rex.WXB add QWORD PTR [r8],rax
 101837c:	rol    BYTE PTR [rcx+rax*1],1
 101837f:	add    bh,bh
 1018381:	(bad)  
 1018382:	(bad)  
 1018383:	jmp    FWORD PTR [rax+0x5]
 1018386:	add    DWORD PTR [rax],eax
 1018388:	add    DWORD PTR [rax],eax
 101838a:	add    BYTE PTR [rax],al
 101838c:	leave  
 101838d:	add    eax,0x20001
 1018392:	add    BYTE PTR [rax],al
 1018394:	int    0x5
 1018396:	add    DWORD PTR [rax],eax
 1018398:	add    DWORD PTR [rax],eax
 101839a:	add    BYTE PTR [rax],al
 101839c:	test   DWORD PTR [rip+0xffffffffffff0001],0x601ffff        # 0x10083a7
 10183a6:	add    al,BYTE PTR [rax]
 10183a8:	(bad)  
 10183a9:	xor    al,BYTE PTR [rdx]
 10183ab:	xor    BYTE PTR [rcx],al
 10183ad:	add    al,0x1
 10183af:	add    BYTE PTR [rdx+rax*2],al
 10183b2:	add    BYTE PTR [rax],al
 10183b4:	add    DWORD PTR [rcx],ebx
 10183b6:	or     al,BYTE PTR [rax]
 10183b8:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 10183bc:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 10183c0:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 10183c4:	sbb    DWORD PTR [rsi+rax*1],esi
 10183c7:	add    BYTE PTR [rcx],bl
 10183c9:	xor    dl,BYTE PTR [rip+0x40a01c0]        # 0x50b858f
 10183cf:	add    BYTE PTR [rdx],cl
 10183d1:	xor    al,0x6
 10183d3:	add    BYTE PTR [rdx],cl
 10183d5:	xor    al,BYTE PTR [rsi]
 10183d7:	jo     0x10183da
 10183d9:	outs   dx,BYTE PTR ds:[rsi]
 10183da:	(bad)  
 10183db:	add    BYTE PTR [rsi+0x34],ch
 10183de:	(bad)  
 10183df:	add    BYTE PTR [rdx],cl
 10183e1:	fs (bad) 
 10183e3:	add    BYTE PTR [rdx],cl
 10183e5:	xor    al,BYTE PTR [rsi]
 10183e7:	jo     0x10183f2
 10183e9:	or     al,BYTE PTR [rax+rax*1]
 10183ec:	or     dh,BYTE PTR [rax+rcx*1]
 10183ef:	add    BYTE PTR [rdx],cl
 10183f1:	push   rdx
 10183f2:	(bad)  
 10183f3:	jo     0x101840f
 10183f5:	movabs eax,ds:0x993000000010000
 10183fe:	add    DWORD PTR [rax],eax
 1018400:	test   al,0x9
 1018402:	add    DWORD PTR [rax],eax
 1018404:	add    DWORD PTR [rax],eax
 1018406:	add    BYTE PTR [rax],al
 1018408:	test   al,0x9
 101840a:	add    DWORD PTR [rax],eax
 101840c:	or     DWORD PTR [rcx+rax*1],eax
 101840f:	add    BYTE PTR [rdx+rax*2],al
 1018412:	add    BYTE PTR [rax],al
 1018414:	sbb    ah,BYTE PTR [rcx+0x10000]
 101841a:	add    BYTE PTR [rax],al
 101841c:	in     al,0x9
 101841e:	add    DWORD PTR [rax],eax
 1018420:	hlt    
 1018421:	or     DWORD PTR [rcx],eax
 1018423:	add    BYTE PTR [rcx],al
 1018425:	add    BYTE PTR [rax],al
 1018427:	add    ah,dh
 1018429:	or     DWORD PTR [rcx],eax
 101842b:	add    BYTE PTR [rcx],cl
 101842d:	(bad)  
 101842f:	add    BYTE PTR [rdi],cl
 1018431:	xor    al,0x7
 1018433:	add    BYTE PTR [rdi],cl
 1018435:	xor    cl,BYTE PTR [rbx]
 1018437:	jo     0x1018453
 1018439:	movabs eax,ds:0xa44000000010000
 1018442:	add    DWORD PTR [rax],eax
 1018444:	push   rsp
 1018445:	or     al,BYTE PTR [rcx]
 1018447:	add    BYTE PTR [rcx],al
 1018449:	add    BYTE PTR [rax],al
 101844b:	add    BYTE PTR [rdx+rcx*1+0x1],dl
 101844f:	add    BYTE PTR [rcx],cl
 1018451:	clts   
 1018453:	add    BYTE PTR [rdi],cl
 1018455:	fs (bad) 
 1018457:	add    BYTE PTR [rdi],cl
 1018459:	xor    al,0x6
 101845b:	add    BYTE PTR [rdi],cl
 101845d:	xor    cl,BYTE PTR [rbx]
 101845f:	jo     0x101847b
 1018461:	movabs eax,ds:0xaac000000010000
 101846a:	add    DWORD PTR [rax],eax
 101846c:	mov    edi,0x100010a
 1018471:	add    BYTE PTR [rax],al
 1018473:	add    BYTE PTR [rdi+0x2100010a],bh
 1018479:	add    BYTE PTR [rax],al
 101847b:	add    BYTE PTR [rax+0xb],ah
 101847e:	add    DWORD PTR [rax],eax
 1018480:	ins    BYTE PTR es:[rdi],dx
 1018481:	or     eax,DWORD PTR [rcx]
 1018483:	add    BYTE PTR [rsp+rax*4+0x4210001],bl
 101848a:	add    al,BYTE PTR [rax]
 101848c:	add    al,0x74
 101848e:	add    BYTE PTR [rax],al
 1018490:	(bad)  
 1018491:	or     eax,DWORD PTR [rcx]
 1018493:	add    BYTE PTR [rbx+rcx*1+0x1],ch
 1018497:	add    BYTE PTR [rsp+rax*4+0x4010001],bl
 101849e:	add    DWORD PTR [rax],eax
 10184a0:	add    al,0x2
 10184a2:	add    BYTE PTR [rax],al
 10184a4:	add    DWORD PTR [rsi],eax
 10184a6:	add    al,BYTE PTR [rax]
 10184a8:	(bad)  
 10184a9:	xchg   edx,eax
 10184aa:	add    dh,BYTE PTR [rax]
 10184ac:	add    DWORD PTR [rdi],ebp
 10184ae:	or     BYTE PTR [rax],al
 10184b0:	(bad)  
 10184b1:	push   rsp
 10184b2:	verw   WORD PTR [rdx]
 10184b5:	xor    al,0xe
 10184b7:	add    BYTE PTR [rdx],cl
 10184b9:	adc    BYTE PTR fs:[rax],al
 10184bc:	or     dh,BYTE PTR [rdx+0xf097006]
 10184c2:	(bad)  
 10184c3:	add    BYTE PTR [rdi],cl
 10184c5:	or     DWORD PTR fs:[rax],eax
 10184c8:	sysenter 
 10184ca:	or     BYTE PTR [rax],al
 10184cc:	rsqrtps xmm1,XMMWORD PTR [rbx]
 10184cf:	jo     0x10184eb
 10184d1:	movabs eax,ds:0xdea000000010000
 10184da:	add    DWORD PTR [rax],eax
 10184dc:	and    cl,BYTE PTR [rsi]
 10184de:	add    DWORD PTR [rax],eax
 10184e0:	add    DWORD PTR [rax],eax
 10184e2:	add    BYTE PTR [rax],al
 10184e4:	and    cl,BYTE PTR [rsi]
 10184e6:	add    DWORD PTR [rax],eax
 10184e8:	add    DWORD PTR [rdx],ecx
 10184ea:	add    al,0x0
 10184ec:	or     dh,BYTE PTR [rsi+rax*1]
 10184ef:	add    BYTE PTR [rdx],cl
 10184f1:	xor    al,BYTE PTR [rsi]
 10184f3:	jo     0x10184f6
 10184f5:	adc    al,0x8
 10184f7:	add    BYTE PTR [rsp+riz*2],dl
 10184fa:	or     eax,DWORD PTR [rax]
 10184fc:	adc    al,0x54
 10184fe:	or     al,BYTE PTR [rax]
 1018500:	adc    al,0x34
 1018502:	or     BYTE PTR [rax],al
 1018504:	adc    al,0x52
 1018506:	adc    BYTE PTR [rax+0x21],dh
 1018509:	add    BYTE PTR [rdx],al
 101850b:	add    BYTE PTR [rax],al
 101850d:	xor    al,0x8
 101850f:	add    BYTE PTR [rax-0x31fffef1],ah
 1018515:	sgdt   [rax]
 1018518:	push   rsp
 1018519:	test   DWORD PTR [rcx],eax
 101851b:	add    BYTE PTR [rcx],ah
 101851d:	add    BYTE PTR [rsi],al
 101851f:	add    BYTE PTR [rax],al
 1018521:	(bad)  
 1018522:	(bad)  
 1018523:	add    BYTE PTR [rax],al
 1018525:	push   rsp
 1018526:	(bad)  
 1018527:	add    BYTE PTR [rax],al
 1018529:	xor    al,0x8
 101852b:	add    BYTE PTR [rax-0x31fffef1],ah
 1018531:	sgdt   [rax]
 1018534:	push   rsp
 1018535:	test   DWORD PTR [rcx],eax
 1018537:	add    BYTE PTR [rcx],ah
 1018539:	push   rsi
 101853a:	(bad)  
 101853b:	add    BYTE PTR [rsi-0x3c],dl
 101853e:	(bad)  
 101853f:	add    BYTE PTR [rcx+0x54],dl
 1018542:	(bad)  
 1018543:	add    BYTE PTR [rip+0xffffffffa0000834],al        # 0xffffffffa1018d7d
 1018549:	sgdt   [rax]
 101854c:	(bad)  
 101854d:	sgdt   [rax]
 1018550:	push   rsp
 1018551:	test   DWORD PTR [rcx],eax
 1018553:	add    BYTE PTR [rcx],al
 1018555:	adc    BYTE PTR [rbx],al
 1018557:	add    BYTE PTR [rax],dl
 1018559:	(bad)  
 101855a:	or     al,0x70
 101855c:	or     esp,DWORD PTR [rax+0x0]
 101855f:	add    BYTE PTR [rcx],al
 1018561:	adc    al,0x8
 1018563:	add    BYTE PTR [rsp+riz*2],dl
 1018566:	or     al,0x0
 1018568:	adc    al,0x54
 101856a:	or     eax,DWORD PTR [rax]
 101856c:	adc    al,0x34
 101856e:	or     al,BYTE PTR [rax]
 1018570:	adc    al,0x72
 1018572:	adc    BYTE PTR [rax+0x9],dh
 1018575:	(bad)  
 1018576:	add    al,BYTE PTR [rax]
 1018578:	(bad)  
 1018579:	xor    al,BYTE PTR [rdx]
 101857b:	xor    BYTE PTR [rdx],bl
 101857d:	movabs eax,ds:0x121b000000010000
 1018586:	add    DWORD PTR [rax],eax
 1018588:	(bad)  
 1018589:	adc    al,BYTE PTR [rcx]
 101858b:	add    BYTE PTR [rcx],al
 101858d:	add    BYTE PTR [rax],al
 101858f:	add    BYTE PTR [rdi],ah
 1018591:	adc    al,BYTE PTR [rcx]
 1018593:	add    BYTE PTR [rcx],al
 1018595:	(bad)  
 1018596:	add    al,BYTE PTR [rax]
 1018598:	(bad)  
 1018599:	xor    al,BYTE PTR [rdx]
 101859b:	xor    BYTE PTR [rcx],al
 101859d:	(bad)  
 101859e:	add    al,BYTE PTR [rax]
 10185a0:	(bad)  
 10185a1:	xor    al,BYTE PTR [rdx]
 10185a3:	xor    BYTE PTR [rcx],cl
 10185a5:	adc    ecx,DWORD PTR [rax]
 10185a7:	add    BYTE PTR [rbx],dl
 10185a9:	or     eax,DWORD PTR fs:[rax]
 10185ac:	adc    esi,DWORD PTR [rdx+rcx*1]
 10185af:	add    BYTE PTR [rbx],dl
 10185b1:	push   rdx
 10185b2:	(bad)  
 10185b4:	or     eax,0x1a700bc0
 10185b9:	movabs eax,ds:0x1402000000020000
 10185c2:	add    DWORD PTR [rax],eax
 10185c4:	(bad)  
 10185c5:	adc    al,0x1
 10185c7:	add    BYTE PTR [rcx],al
 10185c9:	add    BYTE PTR [rax],al
 10185cb:	add    BYTE PTR [rsi],dl
 10185cd:	adc    al,0x1
 10185cf:	add    BYTE PTR [rax+0x5c000113],bh
 10185d5:	adc    al,0x1
 10185d7:	add    BYTE PTR [rcx],al
 10185d9:	add    BYTE PTR [rax],al
 10185db:	add    BYTE PTR [rsp+rdx*1+0x1],bl
 10185df:	add    BYTE PTR [rcx],cl
 10185e1:	sbb    cl,BYTE PTR [rax]
 10185e3:	add    BYTE PTR [rdx],bl
 10185e5:	je     0x10185f2
 10185e7:	add    BYTE PTR [rdx],bl
 10185e9:	or     al,BYTE PTR fs:[rax]
 10185ec:	sbb    dh,BYTE PTR [rcx+rcx*1]
 10185ef:	add    BYTE PTR [rdx],bl
 10185f1:	push   rdx
 10185f2:	(bad)  
 10185f3:	rcr    BYTE PTR [rdx],0xa1
 10185f6:	add    BYTE PTR [rax],al
 10185f8:	add    DWORD PTR [rax],eax
 10185fa:	add    BYTE PTR [rax],al
 10185fc:	or     al,0x15
 10185fe:	add    DWORD PTR [rax],eax
 1018600:	(bad)  
 1018601:	adc    eax,0x10001
 1018606:	add    BYTE PTR [rax],al
 1018608:	(bad)  
 1018609:	adc    eax,0x14090001
 101860e:	(bad)  
 101860f:	add    BYTE PTR [rsp+riz*2],dl
 1018612:	or     al,BYTE PTR [rax]
 1018614:	adc    al,0x34
 1018616:	or     DWORD PTR [rax],eax
 1018618:	adc    al,0x52
 101861a:	adc    BYTE PTR [rax+0x1a],dh
 101861d:	movabs eax,ds:0x15ab000000010000
 1018626:	add    DWORD PTR [rax],eax
 1018628:	mov    ebx,0x1000115
 101862d:	add    BYTE PTR [rax],al
 101862f:	add    BYTE PTR [rbx+0x21000115],bh
 1018635:	add    BYTE PTR [rax],al
 1018637:	add    BYTE PTR [rax+0x16],dh
 101863a:	add    DWORD PTR [rax],eax
 101863c:	add    eax,0x58000117
 1018641:	xchg   BYTE PTR [rcx],al
 1018643:	add    BYTE PTR [rcx],ah
 1018645:	or     BYTE PTR [rdx],al
 1018647:	add    BYTE PTR [rax],cl
 1018649:	xor    al,0x59
 101864b:	add    DWORD PTR [rax+0x16],esi
 101864e:	add    DWORD PTR [rax],eax
 1018650:	add    eax,0x58000117
 1018655:	xchg   BYTE PTR [rcx],al
 1018657:	add    BYTE PTR [rcx],bl
 1018659:	sbb    eax,DWORD PTR [rbx]
 101865b:	add    BYTE PTR [rcx],cl
 101865d:	add    DWORD PTR [rsi+0x1],edx
 1018660:	add    dh,BYTE PTR [rax+0x0]
 1018663:	add    BYTE PTR [rax],al
 1018665:	(bad)  
 1018666:	add    DWORD PTR [rax],eax
 1018668:	movabs al,ds:0x1a00081a0900000a
 1018671:	je     0x1018680
 1018673:	add    BYTE PTR [rdx],bl
 1018675:	fs or  al,0x0
 1018678:	sbb    dh,BYTE PTR [rbx+rcx*1]
 101867b:	add    BYTE PTR [rdx],bl
 101867d:	jb     0x1018695
 101867f:	rcr    BYTE PTR [rdx],0xa1
 1018682:	add    BYTE PTR [rax],al
 1018684:	add    DWORD PTR [rax],eax
 1018686:	add    BYTE PTR [rax],al
 1018688:	sub    DWORD PTR [rax],ebx
 101868a:	add    DWORD PTR [rax],eax
 101868c:	push   0x18
 101868e:	add    DWORD PTR [rax],eax
 1018690:	add    DWORD PTR [rax],eax
 1018692:	add    BYTE PTR [rax],al
 1018694:	push   0x18
 1018696:	add    DWORD PTR [rax],eax
 1018698:	and    DWORD PTR [rax],eax
 101869a:	add    BYTE PTR [rax],al
 101869c:	rcr    BYTE PTR [rax],0x1
 101869f:	add    dl,dl
 10186a1:	sbb    BYTE PTR [rcx],al
 10186a3:	add    al,dl
 10186a5:	xchg   BYTE PTR [rcx],al
 10186a7:	add    BYTE PTR [rcx],ah
 10186a9:	add    BYTE PTR [rdx],al
 10186ab:	add    BYTE PTR [rax],al
 10186ad:	je     0x10186b7
 10186af:	add    al,al
 10186b1:	sbb    BYTE PTR [rcx],al
 10186b3:	add    dl,dl
 10186b5:	sbb    BYTE PTR [rcx],al
 10186b7:	add    al,dl
 10186b9:	xchg   BYTE PTR [rcx],al
 10186bb:	add    BYTE PTR [rcx],ah
 10186bd:	add    eax,0x74050002
 10186c2:	or     BYTE PTR [rax],al
 10186c4:	rcr    BYTE PTR [rax],0x1
 10186c7:	add    dl,dl
 10186c9:	sbb    BYTE PTR [rcx],al
 10186cb:	add    al,dl
 10186cd:	xchg   BYTE PTR [rcx],al
 10186cf:	add    BYTE PTR [rcx],al
 10186d1:	(bad)  
 10186d2:	add    al,BYTE PTR [rax]
 10186d4:	(bad)  
 10186d5:	push   rdx
 10186d6:	add    dh,BYTE PTR [rax]
 10186d8:	or     DWORD PTR [rbx],ebx
 10186da:	or     BYTE PTR [rax],al
 10186dc:	sbb    esi,DWORD PTR [rcx*1+0x17321b00]
 10186e3:	loopne 0x10186fa
 10186e5:	rcl    BYTE PTR [rbx],1
 10186e7:	rcl    BYTE PTR [rcx],0x70
 10186ea:	adc    BYTE PTR [rax+0x1a],ah
 10186ed:	movabs eax,ds:0x1a30000000010000
 10186f6:	add    DWORD PTR [rax],eax
 10186f8:	rex.RXB sbb r8b,BYTE PTR [r9]
 10186fb:	add    BYTE PTR [rcx],al
 10186fd:	add    BYTE PTR [rax],al
 10186ff:	add    BYTE PTR [rdi+0x1a],al
 1018702:	add    DWORD PTR [rax],eax
 1018704:	add    DWORD PTR [rdx],ecx
 1018706:	add    al,0x0
 1018708:	or     dh,BYTE PTR [rsi+rax*1]
 101870b:	add    BYTE PTR [rdx],cl
 101870d:	xor    al,BYTE PTR [rsi]
 101870f:	jo     0x1018712
 1018711:	clts   
 1018713:	add    BYTE PTR [rdi],cl
 1018715:	fs (bad) 
 1018717:	add    BYTE PTR [rdi],cl
 1018719:	xor    al,0x6
 101871b:	add    BYTE PTR [rdi],cl
 101871d:	xor    cl,BYTE PTR [rbx]
 101871f:	jo     0x1018742
 1018721:	add    BYTE PTR [rax],al
 1018723:	add    BYTE PTR [rax-0x33fffee4],al
 1018729:	sbb    al,0x1
 101872b:	add    BYTE PTR [rax-0x79],bl
 101872e:	add    DWORD PTR [rax],eax
 1018730:	and    DWORD PTR [rax],eax
 1018732:	add    al,BYTE PTR [rax]
 1018734:	add    BYTE PTR [rax+rcx*1+0x0],ah
 1018738:	sbb    BYTE PTR [rcx+rax*1],0x0
 101873c:	int3   
 101873d:	sbb    al,0x1
 101873f:	add    BYTE PTR [rax-0x79],bl
 1018742:	add    DWORD PTR [rax],eax
 1018744:	and    DWORD PTR [rip+0x64050002],eax        # 0x6506874c
 101874a:	or     BYTE PTR [rax],al
 101874c:	sbb    BYTE PTR [rcx+rax*1],0x0
 1018750:	int3   
 1018751:	sbb    al,0x1
 1018753:	add    BYTE PTR [rax-0x79],bl
 1018756:	add    DWORD PTR [rax],eax
 1018758:	add    DWORD PTR [rdx],ecx
 101875a:	add    al,0x0
 101875c:	or     dh,BYTE PTR [rdx+rcx*1]
 101875f:	add    BYTE PTR [rdx],cl
 1018761:	push   rdx
 1018762:	(bad)  
 1018763:	jo     0x1018786
 1018765:	add    BYTE PTR [rax],al
 1018767:	add    BYTE PTR [rax-0x23fffee3],dh
 101876d:	sbb    eax,0x878c0001
 1018772:	add    DWORD PTR [rax],eax
 1018774:	and    DWORD PTR [rdx],ecx
 1018776:	add    al,0x0
 1018778:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 101877c:	add    eax,0xb0000634
 1018781:	sbb    eax,0x1ddc0001
 1018786:	add    DWORD PTR [rax],eax
 1018788:	mov    WORD PTR [rdi+0xa010001],es
 101878e:	add    al,0x0
 1018790:	or     dl,BYTE PTR [rax+rcx*1+0x0]
 1018794:	or     dh,BYTE PTR [rdx]
 1018796:	(bad)  
 1018797:	jo     0x10187a2
 1018799:	sbb    eax,0x741d000a
 101879e:	ltr    WORD PTR [rip+0x1d000d64]        # 0x1e019509
 10187a5:	xor    al,0xc
 10187a7:	add    BYTE PTR [rip+0x17e01972],bl        # 0x18e1a11f
 10187ad:	rcl    BYTE PTR [rip+0xa11ac0],1        # 0x1a2a273
 10187b3:	add    BYTE PTR [rcx],al
 10187b5:	add    BYTE PTR [rax],al
 10187b7:	add    BYTE PTR [rdx+0x1f],dl
 10187ba:	add    DWORD PTR [rax],eax
 10187bc:	int3   
 10187bd:	(bad)  
 10187be:	add    DWORD PTR [rax],eax
 10187c0:	add    DWORD PTR [rax],eax
 10187c2:	add    BYTE PTR [rax],al
 10187c4:	int3   
 10187c5:	(bad)  
 10187c6:	add    DWORD PTR [rax],eax
 10187c8:	or     DWORD PTR [rdi],edx
 10187ca:	(bad)  
 10187cb:	add    BYTE PTR [rdi],dl
 10187cd:	xor    al,0xb
 10187cf:	add    BYTE PTR [rdi],dl
 10187d1:	push   rdx
 10187d2:	adc    eax,eax
 10187d4:	adc    DWORD PTR [rax+0x10],esi
 10187d7:	(bad)  
 10187d8:	sbb    ah,BYTE PTR [rcx+0x10000]
 10187de:	add    BYTE PTR [rax],al
 10187e0:	lea    esp,[rax]
 10187e2:	add    DWORD PTR [rax],eax
 10187e4:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10187e5:	and    BYTE PTR [rcx],al
 10187e7:	add    BYTE PTR [rcx],al
 10187e9:	add    BYTE PTR [rax],al
 10187eb:	add    BYTE PTR [rbp+0x1000120],ah
 10187f1:	or     al,BYTE PTR [rax+rax*1]
 10187f4:	or     dh,BYTE PTR [rsi+rax*1]
 10187f7:	add    BYTE PTR [rdx],cl
 10187f9:	xor    al,BYTE PTR [rsi]
 10187fb:	jo     0x10187fe
 10187fd:	(bad)  
 10187fe:	add    al,BYTE PTR [rax]
 1018800:	(bad)  
 1018801:	xor    al,BYTE PTR [rdx]
 1018803:	xor    BYTE PTR [rcx],al
 1018805:	(bad)  
 1018806:	add    al,BYTE PTR [rax]
 1018808:	(bad)  
 1018809:	xor    al,BYTE PTR [rdx]
 101880b:	xor    BYTE PTR [rcx],al
 101880d:	(bad)  
 101880e:	add    al,BYTE PTR [rax]
 1018810:	(bad)  
 1018811:	xor    al,BYTE PTR [rdx]
 1018813:	xor    BYTE PTR [rcx],al
 1018815:	adc    al,0x8
 1018817:	add    BYTE PTR [rsp+riz*2],dl
 101881a:	or     BYTE PTR [rax],al
 101881c:	adc    al,0x54
 101881e:	(bad)  
 101881f:	add    BYTE PTR [rsp+rsi*1],dl
 1018822:	(bad)  
 1018823:	add    BYTE PTR [rdx+rsi*1],dl
 1018826:	adc    BYTE PTR [rax+0x1],dh
 1018829:	or     al,BYTE PTR [rax+rax*1]
 101882c:	or     dh,BYTE PTR [rsi+rax*1]
 101882f:	add    BYTE PTR [rdx],cl
 1018831:	xor    al,BYTE PTR [rsi]
 1018833:	jo     0x101883e
 1018835:	sbb    BYTE PTR [rax],cl
 1018837:	add    BYTE PTR [rax],bl
 1018839:	or     eax,DWORD PTR fs:[rax]
 101883c:	sbb    BYTE PTR [rdx+rcx*1],dh
 101883f:	add    BYTE PTR [rax],bl
 1018841:	xor    dl,BYTE PTR [rax+rdx*8]
 1018844:	adc    al,al
 1018846:	adc    BYTE PTR [rax+0x1a],dh
 1018849:	movabs eax,ds:0x25c4000000020000
 1018852:	add    DWORD PTR [rax],eax
 1018854:	call   0x201897e
 1018859:	add    BYTE PTR [rax],al
 101885b:	add    al,ch
 101885d:	and    eax,0x26190001
 1018862:	add    DWORD PTR [rax],eax
 1018864:	sub    ah,BYTE PTR [rsi]
 1018866:	add    DWORD PTR [rax],eax
 1018868:	add    DWORD PTR [rax],eax
 101886a:	add    BYTE PTR [rax],al
 101886c:	sub    ah,BYTE PTR [rsi]
 101886e:	add    DWORD PTR [rax],eax
 1018870:	add    DWORD PTR [rsi],eax
 1018872:	add    al,BYTE PTR [rax]
 1018874:	(bad)  
 1018875:	xor    al,BYTE PTR [rdx]
 1018877:	xor    BYTE PTR [rcx],al
 1018879:	add    eax,0x34050002
 101887e:	add    DWORD PTR [rax],eax
 1018880:	add    DWORD PTR [rbx],ebp
 1018882:	add    eax,0x3742b00
 1018887:	add    BYTE PTR [rsi],ah
 1018889:	xor    al,0x2
 101888b:	add    BYTE PTR [rdx],al
 101888d:	(bad)  
 101888e:	add    BYTE PTR [rax],al
 1018890:	or     DWORD PTR [rdx],ebx
 1018892:	or     al,BYTE PTR [rax]
 1018894:	sbb    al,ah
 1018896:	or     eax,0xc741a00
 101889b:	add    BYTE PTR [rdx],bl
 101889d:	or     eax,DWORD PTR fs:[rax]
 10188a0:	sbb    dh,BYTE PTR [rdx+rcx*1]
 10188a3:	add    BYTE PTR [rdx],bl
 10188a5:	jb     0x10188bd
 10188a7:	rcr    BYTE PTR [rdx],1
 10188a9:	movabs eax,ds:0x287b000000010000
 10188b2:	add    DWORD PTR [rax],eax
 10188b4:	shr    DWORD PTR [rax],1
 10188b6:	add    DWORD PTR [rax],eax
 10188b8:	add    DWORD PTR [rax],eax
 10188ba:	add    BYTE PTR [rax],al
 10188bc:	shr    DWORD PTR [rax],1
 10188be:	add    DWORD PTR [rax],eax
 10188c0:	and    DWORD PTR [rax],eax
 10188c2:	add    BYTE PTR [rax],al
 10188c4:	and    BYTE PTR [rcx],ch
 10188c6:	add    DWORD PTR [rax],eax
 10188c8:	retf   0x129
 10188cb:	add    al,ch
 10188cd:	mov    BYTE PTR [rcx],al
 10188cf:	add    BYTE PTR [rcx],ah
 10188d1:	or     al,BYTE PTR [rax+rax*1]
 10188d4:	or     al,ah
 10188d6:	(bad)  
 10188d7:	add    BYTE PTR [rip+0x20000634],al        # 0x21018f11
 10188dd:	sub    DWORD PTR [rcx],eax
 10188df:	add    dl,cl
 10188e1:	sub    DWORD PTR [rcx],eax
 10188e3:	add    al,ch
 10188e5:	mov    BYTE PTR [rcx],al
 10188e7:	add    BYTE PTR [rcx],al
 10188e9:	clts   
 10188eb:	add    BYTE PTR [rdi],cl
 10188ed:	or     DWORD PTR fs:[rax],eax
 10188f0:	andps  xmm1,XMMWORD PTR [rax]
 10188f3:	add    BYTE PTR [rdi],cl
 10188f5:	xor    cl,BYTE PTR [rbx]
 10188f7:	jo     0x1018902
 10188f9:	or     al,BYTE PTR [rax+rax*1]
 10188fc:	or     dh,BYTE PTR [rax+rcx*1]
 10188ff:	add    BYTE PTR [rdx],cl
 1018901:	push   rdx
 1018902:	(bad)  
 1018903:	jo     0x101891f
 1018905:	movabs eax,ds:0x2a4c000000010000
 101890e:	add    DWORD PTR [rax],eax
 1018910:	jl     0x101893c
 1018912:	add    DWORD PTR [rax],eax
 1018914:	add    DWORD PTR [rax],eax
 1018916:	add    BYTE PTR [rax],al
 1018918:	jl     0x1018944
 101891a:	add    DWORD PTR [rax],eax
 101891c:	add    DWORD PTR [rdx],ecx
 101891e:	add    al,0x0
 1018920:	or     dh,BYTE PTR [rsi+rax*1]
 1018923:	add    BYTE PTR [rdx],cl
 1018925:	xor    al,BYTE PTR [rsi]
 1018927:	jo     0x101892a
 1018929:	adc    al,0x8
 101892b:	add    BYTE PTR [rsp+riz*2],dl
 101892e:	or     BYTE PTR [rax],al
 1018930:	adc    al,0x54
 1018932:	(bad)  
 1018933:	add    BYTE PTR [rsp+rsi*1],dl
 1018936:	(bad)  
 1018937:	add    BYTE PTR [rdx+rsi*1],dl
 101893a:	adc    BYTE PTR [rax+0x21],dh
 101893d:	add    BYTE PTR [rax],al
 101893f:	add    BYTE PTR [rax-0x47fffed3],al
 1018945:	sub    eax,0x89740001
 101894a:	add    DWORD PTR [rax],eax
 101894c:	and    DWORD PTR [rax],eax
 101894e:	add    al,BYTE PTR [rax]
 1018950:	add    ah,al
 1018952:	(bad)  
 1018953:	add    BYTE PTR [rax-0x47fffed3],al
 1018959:	sub    eax,0x89740001
 101895e:	add    DWORD PTR [rax],eax
 1018960:	and    DWORD PTR [rip+0xffffffffc4050002],eax        # 0xffffffffc5068968
 1018966:	(bad)  
 1018967:	add    BYTE PTR [rax-0x47fffed3],al
 101896d:	sub    eax,0x89740001
 1018972:	add    DWORD PTR [rax],eax
 1018974:	add    DWORD PTR [rax+rcx*1],edx
 1018977:	add    BYTE PTR [rsp+riz*2],dl
 101897a:	or     DWORD PTR [rax],eax
 101897c:	adc    al,0x54
 101897e:	or     BYTE PTR [rax],al
 1018980:	adc    al,0x34
 1018982:	(bad)  
 1018983:	add    BYTE PTR [rdx+rsi*1],dl
 1018986:	adc    BYTE PTR [rax+0x21],dh
 1018989:	add    BYTE PTR [rax],al
 101898b:	add    BYTE PTR [rax-0x47fffed2],al
 1018991:	add    DWORD PTR cs:[rax],eax
 1018994:	ror    BYTE PTR [rcx+0x210001],0x2
 101899b:	add    BYTE PTR [rax],al
 101899d:	(bad)  
 101899e:	(bad)  
 101899f:	add    BYTE PTR [rax-0x47fffed2],al
 10189a5:	add    DWORD PTR cs:[rax],eax
 10189a8:	ror    BYTE PTR [rcx+0x5210001],0x2
 10189af:	add    BYTE PTR [rip+0xffffffff800006c4],al        # 0xffffffff81019079
 10189b5:	add    DWORD PTR cs:[rax],eax
 10189b8:	mov    eax,0xc000012e
 10189bd:	mov    DWORD PTR [rcx],eax
 10189bf:	add    BYTE PTR [rcx],al
 10189c1:	adc    al,0x8
 10189c3:	add    BYTE PTR [rsp+riz*2],dl
 10189c6:	or     DWORD PTR [rax],eax
 10189c8:	adc    al,0x54
 10189ca:	or     BYTE PTR [rax],al
 10189cc:	adc    al,0x34
 10189ce:	(bad)  
 10189cf:	add    BYTE PTR [rdx+rsi*1],dl
 10189d2:	adc    BYTE PTR [rax+0x9],dh
 10189d5:	(bad)  
 10189d6:	add    al,BYTE PTR [rax]
 10189d8:	(bad)  
 10189d9:	push   rdx
 10189da:	add    dh,BYTE PTR [rax]
 10189dc:	sbb    ah,BYTE PTR [rcx+0x10000]
 10189e2:	add    BYTE PTR [rax],al
 10189e4:	mov    WORD PTR [rdi],gs
 10189e6:	add    DWORD PTR [rax],eax
 10189e8:	sahf   
 10189e9:	(bad)  
 10189ea:	add    DWORD PTR [rax],eax
 10189ec:	add    DWORD PTR [rax],eax
 10189ee:	add    BYTE PTR [rax],al
 10189f0:	sahf   
 10189f1:	(bad)  
 10189f2:	add    DWORD PTR [rax],eax
 10189f4:	or     DWORD PTR [rdi],ecx
 10189f6:	(bad)  
 10189f7:	add    BYTE PTR [rdi],cl
 10189f9:	or     DWORD PTR fs:[rax],eax
 10189fc:	sysenter 
 10189fe:	or     BYTE PTR [rax],al
 1018a00:	rsqrtps xmm1,XMMWORD PTR [rbx]
 1018a03:	jo     0x1018a1f
 1018a05:	movabs eax,ds:0x2fe8000000010000
 1018a0e:	add    DWORD PTR [rax],eax
 1018a10:	(bad)  
 1018a11:	xor    BYTE PTR [rcx],al
 1018a13:	add    BYTE PTR [rcx],al
 1018a15:	add    BYTE PTR [rax],al
 1018a17:	add    ah,dl
 1018a19:	xor    BYTE PTR [rcx],al
 1018a1b:	add    BYTE PTR [rcx],cl
 1018a1d:	adc    al,0x8
 1018a1f:	add    BYTE PTR [rdx+rsi*4],dl
 1018a22:	adc    al,dh
 1018a24:	(bad)  
 1018a25:	loopne 0x1018a33
 1018a27:	ror    BYTE PTR [rdx],1
 1018a29:	ror    BYTE PTR [rax],0x70
 1018a2c:	(bad)  
 1018a2d:	(bad)  
 1018a2e:	(bad)  
 1018a2f:	xor    BYTE PTR [rdx],bl
 1018a31:	movabs eax,ds:0x32f6000000020000
 1018a3a:	add    DWORD PTR [rax],eax
 1018a3c:	movabs ds:0xa300000001000133,eax
 1018a45:	xor    eax,DWORD PTR [rcx]
 1018a47:	add    BYTE PTR [rax+0x31],ch
 1018a4a:	add    DWORD PTR [rax],eax
 1018a4c:	xor    eax,0x1000134
 1018a51:	add    BYTE PTR [rax],al
 1018a53:	add    BYTE PTR [rip+0x9000134],dh        # 0xa018b8d
 1018a59:	adc    eax,0x74150008
 1018a5e:	or     al,BYTE PTR [rax]
 1018a60:	adc    eax,0x15000964
 1018a65:	xor    al,0x8
 1018a67:	add    BYTE PTR [rip+0x1ac01152],dl        # 0x1bc19bbf
 1018a6d:	movabs eax,ds:0x34c4000000010000
 1018a76:	add    DWORD PTR [rax],eax
 1018a78:	push   rdx
 1018a79:	xor    eax,0x10001
 1018a7e:	add    BYTE PTR [rax],al
 1018a80:	push   rdx
 1018a81:	xor    eax,0xf010001
 1018a86:	(bad)  
 1018a87:	add    BYTE PTR [rdi],cl
 1018a89:	fs (bad) 
 1018a8b:	add    BYTE PTR [rdi],cl
 1018a8d:	xor    al,0x6
 1018a8f:	add    BYTE PTR [rdi],cl
 1018a91:	xor    cl,BYTE PTR [rbx]
 1018a93:	jo     0x1018a96
 1018a95:	(bad)  
 1018a96:	or     DWORD PTR [rax],eax
 1018a98:	(bad)  
 1018a99:	fs sbb al,0x0
 1018a9c:	(bad)  
 1018a9d:	push   rsp
 1018a9e:	sbb    eax,DWORD PTR [rax]
 1018aa0:	(bad)  
 1018aa1:	xor    al,0x1a
 1018aa3:	add    BYTE PTR [rdi],dl
 1018aa5:	add    DWORD PTR [rax],ebx
 1018aa7:	add    BYTE PTR [rax],dl
 1018aa9:	jo     0x1018aab
 1018aab:	add    BYTE PTR [rcx],al
 1018aad:	(bad)  
 1018aae:	add    al,BYTE PTR [rax]
 1018ab0:	(bad)  
 1018ab1:	xor    al,BYTE PTR [rdx]
 1018ab3:	push   rax
 1018ab4:	or     DWORD PTR [rdx],ecx
 1018ab6:	add    al,BYTE PTR [rax]
 1018ab8:	or     dl,BYTE PTR [rdx+0x6]
 1018abb:	xor    BYTE PTR [rdx],bl
 1018abd:	movabs eax,ds:0x36f8000000010000
 1018ac6:	add    DWORD PTR [rax],eax
 1018ac8:	(bad)  
 1018ac9:	(bad)  
 1018aca:	add    DWORD PTR [rax],eax
 1018acc:	xor    BYTE PTR [rdi],dh
 1018ace:	add    DWORD PTR [rax],eax
 1018ad0:	(bad)  
 1018ad1:	(bad)  
 1018ad2:	add    DWORD PTR [rax],eax
 1018ad4:	sbb    DWORD PTR [rbx],edi
 1018ad6:	or     eax,DWORD PTR [rax]
 1018ad8:	sub    ah,ah
 1018ada:	rex.WB add BYTE PTR [r14],spl
 1018add:	je     0x1018b27
 1018adf:	add    BYTE PTR [rdx],ah
 1018ae1:	rex.RXB add BYTE PTR fs:[r14],r11b
 1018ae5:	xor    al,0x46
 1018ae7:	add    BYTE PTR [rdx],dl
 1018ae9:	add    DWORD PTR [rax+rax*1+0x4],eax
 1018aed:	push   rax
 1018aee:	add    BYTE PTR [rax],al
 1018af0:	and    al,0x7
 1018af2:	add    DWORD PTR [rax],eax
 1018af4:	lock pop rdx
 1018af6:	add    BYTE PTR [rax],al
 1018af8:	adc    al,BYTE PTR [rdx]
 1018afa:	add    BYTE PTR [rax],al
 1018afc:	(bad)  
 1018afd:	(bad)  
 1018afe:	(bad)  
 1018aff:	jmp    QWORD PTR [rax+0x4c]
 1018b02:	add    DWORD PTR [rax],eax
 1018b04:	(bad)  
 1018b05:	(bad)  
 1018b06:	(bad)  
 1018b07:	push   QWORD PTR [rax+0x4c]
 1018b0a:	add    DWORD PTR [rax],eax
 1018b0c:	add    DWORD PTR [rax],eax
 1018b0e:	add    BYTE PTR [rax],al
 1018b10:	or     BYTE PTR [rcx+rax*1+0x0],0x1
 1018b15:	add    BYTE PTR [rax],al
 1018b17:	add    BYTE PTR [rax+0x100014c],dl
 1018b1d:	add    BYTE PTR [rax],al
 1018b1f:	add    BYTE PTR [rax+0x100014c],ah
 1018b25:	add    BYTE PTR [rax],al
 1018b27:	add    BYTE PTR [rax+0x100014c],dh
 1018b2d:	add    BYTE PTR [rax],al
 1018b2f:	add    al,al
 1018b31:	add    QWORD PTR [rax],r8
 1018b34:	add    DWORD PTR [rax],eax
 1018b36:	add    BYTE PTR [rax],al
 1018b38:	ror    BYTE PTR [rcx+rax*1+0x0],1
 1018b3c:	add    DWORD PTR [rax],eax
 1018b3e:	add    BYTE PTR [rax],al
 1018b40:	loopne 0x1018b8e
 1018b42:	add    DWORD PTR [rax],eax
 1018b44:	shl    BYTE PTR [rbx+0x0],1
 1018b47:	add    bh,bh
 1018b49:	(bad)  
 1018b4a:	(bad)  
 1018b4b:	dec    DWORD PTR [rax+0x1000064]
 1018b51:	add    BYTE PTR [rax],al
 1018b53:	add    BYTE PTR [rdi],dl
 1018b55:	add    BYTE PTR gs:[rax],al
 1018b58:	(bad)  
 1018b59:	(bad)  
 1018b5a:	(bad)  
 1018b5b:	call   FWORD PTR [riz*2+0x10000]
 1018b62:	add    BYTE PTR [rax],al
 1018b64:	(bad)  
 1018b65:	add    BYTE PTR gs:[rax],al
 1018b68:	(bad)  
 1018b69:	(bad)  
 1018b6a:	(bad)  
 1018b6b:	(bad)  
 1018b6c:	out    dx,eax
 1018b6d:	add    BYTE PTR gs:[rax],al
 1018b70:	add    DWORD PTR [rax],eax
 1018b72:	add    BYTE PTR [rax],al
 1018b74:	pop    rdi
 1018b75:	data16 add BYTE PTR [rax],al
 1018b78:	add    al,0x0
 1018b7a:	add    BYTE PTR [rax],al
 1018b7c:	push   0x1000066
 1018b81:	add    BYTE PTR [rax],al
 1018b83:	add    BYTE PTR [rbx-0xffff9a],al
 1018b89:	(bad)  
 1018b8a:	(bad)  
 1018b8b:	dec    DWORD PTR [rax+0x1000066]
 1018b91:	add    BYTE PTR [rax],al
 1018b93:	add    BYTE PTR [rsi+0x67],dl
 1018b96:	add    BYTE PTR [rax],al
 1018b98:	(bad)  
 1018b99:	(bad)  
 1018b9a:	(bad)  
 1018b9b:	jmp    QWORD PTR [rdi+riz*2+0x0]
 1018b9f:	add    BYTE PTR [rcx],al
 1018ba1:	add    BYTE PTR [rax],al
 1018ba3:	add    bh,bh
 1018ba5:	add    BYTE PTR [eax],al
 1018ba8:	(bad)  
 1018ba9:	(bad)  
 1018baa:	(bad)  
 1018bab:	dec    DWORD PTR [rip+0x1000068]        # 0x2018c19
 1018bb1:	add    BYTE PTR [rax],al
 1018bb3:	add    BYTE PTR [rax+rbp*2-0x10000],ch
 1018bba:	(bad)  
 1018bbb:	(bad)  
 1018bbc:	mov    edx,0x1000068
 1018bc1:	add    BYTE PTR [rax],al
 1018bc3:	add    BYTE PTR [rcx+0x69],bl
 1018bc6:	add    BYTE PTR [rax],al
 1018bc8:	(bad)  
 1018bc9:	(bad)  
 1018bca:	(bad)  
 1018bcb:	push   QWORD PTR [rcx+rbp*2+0x0]
 1018bcf:	add    BYTE PTR [rcx],al
 1018bd1:	add    BYTE PTR [rax],al
 1018bd3:	add    BYTE PTR [rdx+0x69],bh
 1018bd6:	add    BYTE PTR [rax],al
 1018bd8:	(bad)  
 1018bd9:	(bad)  
 1018bda:	(bad)  
 1018bdb:	inc    DWORD PTR [rcx]
 1018bdd:	add    al,0x1
 1018bdf:	add    BYTE PTR [rdx+rax*2],al
 1018be2:	add    BYTE PTR [rax],al
 1018be4:	adc    DWORD PTR [rax],esp
 1018be6:	add    eax,0x13a21700
 1018beb:	jo     0x1018bff
 1018bed:	(bad)  
 1018bee:	adc    DWORD PTR [rax+0x10],edx
 1018bf1:	xor    BYTE PTR [rax],al
 1018bf3:	add    BYTE PTR [rax+0x20000106],cl
 1018bf9:	pop    rbx
 1018bfa:	add    BYTE PTR [rax],al
 1018bfc:	(bad)  
 1018bfd:	(bad)  
 1018bfe:	(bad)  
 1018bff:	inc    DWORD PTR [rax]
 1018c01:	add    QWORD PTR [r8],r8
 1018c04:	add    BYTE PTR [rax],al
 1018c06:	add    BYTE PTR [rax],al
 1018c08:	adc    BYTE PTR [rbp+0x1],cl
 1018c0b:	add    BYTE PTR [rax+0x62],al
 1018c0e:	add    BYTE PTR [rax],al
 1018c10:	(bad)  
 1018c11:	(bad)  
 1018c12:	(bad)  
 1018c13:	jmp    QWORD PTR [rsi+0x62]
 1018c16:	add    BYTE PTR [rax],al
 1018c18:	add    BYTE PTR [rax],al
 1018c1a:	add    BYTE PTR [rax],al
 1018c1c:	outs   dx,DWORD PTR ds:[rsi]
 1018c1d:	(bad)  
 1018c1e:	add    BYTE PTR [rax],al
 1018c20:	(bad)  
 1018c21:	(bad)  
 1018c22:	(bad)  
 1018c23:	jmp    QWORD PTR [rbx+0x62]
 1018c29:	add    BYTE PTR [rax],al
 1018c2b:	add    BYTE PTR [rbp+0x1000062],dh
 1018c31:	add    BYTE PTR [rax],al
 1018c33:	add    BYTE PTR [rdx],ch
 1018c35:	movsxd eax,DWORD PTR [rax]
 1018c37:	add    BYTE PTR [rax],al
 1018c39:	add    BYTE PTR [rax],al
 1018c3b:	add    BYTE PTR [rbx+riz*2],dh
 1018c3e:	add    BYTE PTR [rax],al
 1018c40:	(bad)  
 1018c41:	(bad)  
 1018c42:	(bad)  
 1018c43:	inc    DWORD PTR [rcx]
 1018c45:	(bad)  
 1018c46:	add    al,BYTE PTR [rax]
 1018c48:	(bad)  
 1018c49:	jb     0x1018c4d
 1018c4b:	xor    BYTE PTR [rcx],dl
 1018c4d:	and    cl,BYTE PTR [rax]
 1018c4f:	add    BYTE PTR [rdx],ah
 1018c51:	ltr    WORD PTR fs:[rip+0x18000e54]        # 0x19019aad
 1018c59:	xor    al,0xc
 1018c5b:	add    BYTE PTR [rdx],cl
 1018c5d:	xchg   edx,eax
 1018c5e:	(bad)  
 1018c5f:	jo     0x1018be9
 1018c61:	(bad)  
 1018c62:	add    DWORD PTR [rax],eax
 1018c64:	push   rax
 1018c65:	pop    rbx
 1018c66:	add    BYTE PTR [rax],al
 1018c68:	(bad)  
 1018c69:	(bad)  
 1018c6a:	(bad)  
 1018c6b:	inc    DWORD PTR [rax+0x4c]
 1018c6e:	add    DWORD PTR [rax],eax
 1018c70:	shl    BYTE PTR [rax+0x0],1
 1018c73:	add    bh,bh
 1018c75:	(bad)  
 1018c76:	(bad)  
 1018c77:	(bad)  
 1018c78:	clc    
 1018c79:	(bad)  
 1018c7a:	add    BYTE PTR [rax],al
 1018c7c:	add    BYTE PTR [rax],al
 1018c7e:	add    BYTE PTR [rax],al
 1018c80:	jae    0x1018ce3
 1018c82:	add    BYTE PTR [rax],al
 1018c84:	(bad)  
 1018c85:	(bad)  
 1018c86:	(bad)  
 1018c87:	inc    DWORD PTR [rcx]
 1018c89:	add    al,0x1
 1018c8b:	add    BYTE PTR [rdx+rax*2],al
 1018c8e:	add    BYTE PTR [rax],al
 1018c90:	and    DWORD PTR [rdi],ecx
 1018c92:	(bad)  
 1018c93:	add    BYTE PTR [rdi],cl
 1018c95:	je     0x1018c9b
 1018c97:	add    BYTE PTR [rdx],cl
 1018c99:	fs (bad) 
 1018c9b:	add    BYTE PTR [rip+0x70000634],al        # 0x710192d5
 1018ca1:	(bad)  
 1018ca2:	add    BYTE PTR [rax],al
 1018ca4:	jp     0x1018d06
 1018ca6:	add    BYTE PTR [rax],al
 1018ca8:	mov    BYTE PTR [rcx+rax*1+0x2100],cl
 1018caf:	add    BYTE PTR [rax+0x60],dh
 1018cb2:	add    BYTE PTR [rax],al
 1018cb4:	jp     0x1018d16
 1018cb6:	add    BYTE PTR [rax],al
 1018cb8:	mov    BYTE PTR [rcx+rax*1+0x40a0100],cl
 1018cbf:	add    BYTE PTR [rdx],cl
 1018cc1:	xor    al,0x7
 1018cc3:	add    BYTE PTR [rdx],cl
 1018cc5:	xor    al,BYTE PTR [rsi]
 1018cc7:	(bad)  
 1018cc8:	and    DWORD PTR [rip+0x74050002],eax        # 0x75068cd0
 1018cce:	(bad)  
 1018ccf:	add    al,ah
 1018cd1:	pop    rdi
 1018cd2:	add    BYTE PTR [rax],al
 1018cd4:	or     BYTE PTR [rax+0x0],ah
 1018cd7:	add    BYTE PTR [rsp+rcx*4+0x210001],bh
 1018cde:	add    al,BYTE PTR [rax]
 1018ce0:	add    BYTE PTR [rsi+rax*1+0x0],dh
 1018ce4:	loopne 0x1018d45
 1018ce6:	add    BYTE PTR [rax],al
 1018ce8:	or     BYTE PTR [rax+0x0],ah
 1018ceb:	add    BYTE PTR [rsp+rcx*4+0x210001],bh
 1018cf2:	add    BYTE PTR [rax],al
 1018cf4:	loopne 0x1018d55
 1018cf6:	add    BYTE PTR [rax],al
 1018cf8:	or     BYTE PTR [rax+0x0],ah
 1018cfb:	add    BYTE PTR [rsp+rcx*4+0x36190001],bh
 1018d02:	or     eax,DWORD PTR [rax]
 1018d04:	and    al,0xe4
 1018d06:	sub    DWORD PTR [rax],eax
 1018d08:	and    BYTE PTR [rax+rbp*1+0x0],dh
 1018d0c:	sbb    al,0x64
 1018d0e:	(bad)  
 1018d0f:	add    BYTE PTR [rax],bl
 1018d11:	xor    al,0x26
 1018d13:	add    BYTE PTR [rcx+rax*1],cl
 1018d16:	and    al,0x0
 1018d18:	add    eax,0x240000f0
 1018d1d:	(bad)  
 1018d1e:	add    DWORD PTR [rax],eax
 1018d20:	sbb    BYTE PTR [rbx+0x0],0x0
 1018d24:	adc    eax,DWORD PTR [rcx]
 1018d26:	add    BYTE PTR [rax],al
 1018d28:	(bad)  
 1018d29:	(bad)  
 1018d2a:	(bad)  
 1018d2b:	push   rax
 1018d2d:	(bad)  
 1018d2e:	add    DWORD PTR [rax],eax
 1018d30:	(bad)  
 1018d31:	(bad)  
 1018d32:	(bad)  
 1018d33:	inc    DWORD PTR [rax]
 1018d35:	(bad)  
 1018d37:	add    BYTE PTR [rcx],al
 1018d39:	add    BYTE PTR [rax],al
 1018d3b:	add    BYTE PTR [rax],al
 1018d3d:	add    BYTE PTR [rax],al
 1018d3f:	add    BYTE PTR [rdx],al
 1018d41:	add    BYTE PTR [rax],al
 1018d43:	add    BYTE PTR [rax],dl
 1018d45:	(bad)  
 1018d47:	add    BYTE PTR [rdx],al
 1018d49:	add    BYTE PTR [rax],al
 1018d4b:	add    BYTE PTR [rax],ah
 1018d4d:	(bad)  
 1018d4f:	add    BYTE PTR [rcx],al
 1018d51:	add    BYTE PTR [rax],al
 1018d53:	add    BYTE PTR [rax],al
 1018d55:	add    BYTE PTR [rax],al
 1018d57:	add    BYTE PTR [rip+0xfffffffff0000000],al        # 0xfffffffff1018d5d
 1018d5d:	(bad)  
 1018d5f:	add    BYTE PTR [rip+0xffffffffd0000000],al        # 0xffffffffd1018d65
 1018d65:	movsxd eax,DWORD PTR [rcx]
 1018d67:	add    BYTE PTR [rip+0xffffffffb0000000],al        # 0xffffffffb1018d6d
 1018d6d:	add    DWORD PTR fs:[rax],eax
 1018d70:	add    al,BYTE PTR [rax]
 1018d72:	add    BYTE PTR [rax],al
 1018d74:	add    al,0x0
 1018d76:	add    BYTE PTR [rax],al
 1018d78:	or     BYTE PTR [rax],al
 1018d7a:	add    BYTE PTR [rax],al
 1018d7c:	add    eax,DWORD PTR [rax]
 1018d7e:	add    BYTE PTR [rax],al
 1018d80:	test   BYTE PTR [rbp+0x1],cl
 1018d86:	add    BYTE PTR [rax],al
 1018d88:	pop    rax
 1018d89:	mov    cl,0x1
 1018d8b:	add    al,bh
 1018d8d:	add    BYTE PTR [rax],al
 1018d8f:	add    BYTE PTR [rax],dh
 1018d91:	(bad)  
 1018d93:	add    BYTE PTR [rax+0x0],bl
 1018d96:	add    BYTE PTR [rax],al
 1018d98:	add    BYTE PTR [rax],al
 1018d9a:	add    BYTE PTR [rax],al
 1018d9c:	mov    cl,0x1
 1018d9f:	add    ah,bh
 1018da1:	add    BYTE PTR [rax],al
 1018da3:	add    BYTE PTR [rax],al
 1018da5:	movsxd eax,DWORD PTR [rcx]
 1018da7:	add    BYTE PTR [rax+0x0],bl
	...
 1018db6:	add    BYTE PTR [rax],al
 1018db8:	loopne 0x1018e1d
 1018dba:	add    DWORD PTR [rax],eax
 1018dbc:	pop    rax
 1018dbd:	add    BYTE PTR [rax],al
 1018dbf:	add    al,dl
 1018dc1:	xchg   esi,eax
 1018dc2:	add    BYTE PTR [rax],al
 1018dc4:	(bad)  
 1018dc5:	(bad)  
 1018dc6:	(bad)  
 1018dc7:	jmp    QWORD PTR [rcx+0x1000097]
 1018dcd:	add    BYTE PTR [rax],al
 1018dcf:	add    BYTE PTR [rdi+0x2000097],ch
 1018dd5:	add    BYTE PTR [rax],al
 1018dd7:	add    BYTE PTR [rdi],ch
 1018dd9:	cdq    
 1018dda:	add    BYTE PTR [rax],al
 1018ddc:	add    DWORD PTR [rax],eax
 1018dde:	add    BYTE PTR [rax],al
 1018de0:	ds cdq 
 1018de2:	add    BYTE PTR [rax],al
 1018de4:	(bad)  
 1018de5:	(bad)  
 1018de6:	(bad)  
 1018de7:	push   QWORD PTR [rax]
 1018de9:	(bad)  
 1018deb:	add    BYTE PTR [rax],al
 1018ded:	add    BYTE PTR [rax],al
 1018def:	add    BYTE PTR [rip+0x5000162],bh        # 0x6018f57
 1018df5:	add    BYTE PTR [rax],al
 1018df7:	add    ah,bl
 1018df9:	(bad)  
 1018dfb:	add    BYTE PTR [rax],al
 1018dfd:	add    BYTE PTR [rax],al
 1018dff:	add    BYTE PTR [rip+0x5000163],cl        # 0x6018f68
 1018e05:	add    BYTE PTR [rax],al
 1018e07:	add    BYTE PTR [rbx+riz*2+0x1],bh
 1018e0e:	add    BYTE PTR [rax],al
 1018e10:	in     eax,dx
 1018e11:	movsxd eax,DWORD PTR [rcx]
 1018e13:	add    BYTE PTR [rip+0xffffffff95000000],al        # 0xffffffff96018e19
 1018e19:	add    DWORD PTR fs:[rax],eax
 1018e1c:	add    BYTE PTR [rax],al
 1018e1e:	add    BYTE PTR [rax],al
 1018e20:	sbb    DWORD PTR [rdx],ecx
 1018e22:	add    al,BYTE PTR [rax]
 1018e24:	or     dh,BYTE PTR [rdx+0x6]
 1018e27:	push   rax
 1018e28:	mov    BYTE PTR [rsi],al
 1018e2a:	add    DWORD PTR [rax],eax
 1018e2c:	sbb    BYTE PTR [rbx+0x0],0x0
 1018e30:	sbb    DWORD PTR [rdx],ecx
 1018e32:	add    al,BYTE PTR [rax]
 1018e34:	or     dh,BYTE PTR [rdx+0x6]
 1018e37:	push   rax
 1018e38:	mov    BYTE PTR [rsi],al
 1018e3a:	add    DWORD PTR [rax],eax
 1018e3c:	sbb    BYTE PTR [rbx+0x0],0x0
 1018e40:	sbb    DWORD PTR [rdx],ecx
 1018e42:	add    al,BYTE PTR [rax]
 1018e44:	or     dh,BYTE PTR [rdx+0x6]
 1018e47:	push   rax
 1018e48:	mov    BYTE PTR [rsi],al
 1018e4a:	add    DWORD PTR [rax],eax
 1018e4c:	sbb    BYTE PTR [rbx+0x0],0x0
 1018e50:	adc    DWORD PTR [rdi],ecx
 1018e52:	add    al,BYTE PTR [rax]
 1018e54:	(bad)  
 1018e55:	jb     0x1018e59
 1018e57:	xor    BYTE PTR [rax-0x4ffffefa],cl
 1018e5d:	pop    rbx
 1018e5e:	add    BYTE PTR [rax],al
 1018e60:	(bad)  
 1018e61:	(bad)  
 1018e62:	(bad)  
 1018e63:	jmp    QWORD PTR [rax+0x65]
 1018e66:	add    DWORD PTR [rax],eax
 1018e68:	rcl    BYTE PTR [rbp-0x10000],1
 1018e6e:	(bad)  
 1018e6f:	push   rsp
 1018e71:	xchg   ebp,eax
 1018e72:	add    BYTE PTR [rax],al
 1018e74:	add    BYTE PTR [rax],al
 1018e76:	add    BYTE PTR [rax],al
 1018e78:	adc    BYTE PTR [rsi-0x10000],dl
 1018e7e:	(bad)  
 1018e7f:	call   QWORD PTR [rdx]
 1018e81:	xchg   esi,eax
 1018e82:	add    BYTE PTR [rax],al
 1018e84:	add    BYTE PTR [rax],al
 1018e86:	add    BYTE PTR [rax],al
 1018e88:	(bad)  
 1018e89:	xchg   esi,eax
 1018e8a:	add    BYTE PTR [rax],al
 1018e8c:	(bad)  
 1018e8d:	(bad)  
 1018e8e:	(bad)  
 1018e8f:	(bad)  
 1018e90:	cmp    DWORD PTR [rsi+0x0],edx
 1018e96:	add    BYTE PTR [rax],al
 1018e98:	rex.WRB xchg r14,rax
 1018e9a:	add    BYTE PTR [rax],al
 1018e9c:	(bad)  
 1018e9d:	(bad)  
 1018e9e:	(bad)  
 1018e9f:	call   QWORD PTR [rcx]
 1018ea1:	lar    eax,WORD PTR [rax]
 1018ea4:	(bad)  
 1018ea5:	jb     0x1018ea9
 1018ea7:	xor    BYTE PTR [rax-0x1ffffefa],cl
 1018ead:	pop    rbx
 1018eae:	add    BYTE PTR [rax],al
 1018eb0:	(bad)  
 1018eb1:	(bad)  
 1018eb2:	(bad)  
 1018eb3:	jmp    QWORD PTR [rax]
 1018eb5:	add    DWORD PTR [eax],eax
 1018eb8:	xor    BYTE PTR [rbp-0x10000],dl
 1018ebe:	(bad)  
 1018ebf:	call   QWORD PTR [rbp+rdx*4+0x0]
 1018ec3:	add    BYTE PTR [rax],al
 1018ec5:	add    BYTE PTR [rax],al
 1018ec7:	add    BYTE PTR [rax-0x6b],dh
 1018eca:	add    BYTE PTR [rax],al
 1018ecc:	(bad)  
 1018ecd:	(bad)  
 1018ece:	(bad)  
 1018ecf:	push   QWORD PTR [rdx-0x6b]
 1018ed2:	add    BYTE PTR [rax],al
 1018ed4:	add    BYTE PTR [rax],al
 1018ed6:	add    BYTE PTR [rax],al
 1018ed8:	xchg   edi,eax
 1018ed9:	xchg   ebp,eax
 1018eda:	add    BYTE PTR [rax],al
 1018edc:	(bad)  
 1018edd:	(bad)  
 1018ede:	(bad)  
 1018edf:	call   FWORD PTR [rcx+0x95]
 1018ee5:	add    BYTE PTR [rax],al
 1018ee7:	add    BYTE PTR [rbp-0xffff6b],ch
 1018eed:	(bad)  
 1018eee:	(bad)  
 1018eef:	call   FWORD PTR [rcx]
 1018ef1:	and    DWORD PTR [rdi],eax
 1018ef3:	add    BYTE PTR [rcx],ah
 1018ef5:	xor    al,0x71
 1018ef7:	add    BYTE PTR [rdx],dl
 1018ef9:	add    DWORD PTR [rdx+0x0],ebp
 1018efc:	or     esp,eax
 1018efe:	or     DWORD PTR [rax+0x8],esi
 1018f01:	(bad)  
 1018f02:	add    BYTE PTR [rax],al
 1018f04:	mov    BYTE PTR [rsi],al
 1018f06:	add    DWORD PTR [rax],eax
 1018f08:	adc    BYTE PTR [rax+rax*1+0x0],bl
 1018f0c:	(bad)  
 1018f0d:	(bad)  
 1018f0e:	(bad)  
 1018f0f:	push   rax
 1018f11:	push   rdx
 1018f12:	add    DWORD PTR [rax],eax
 1018f14:	(bad)  
 1018f15:	(bad)  
 1018f16:	(bad)  
 1018f17:	inc    DWORD PTR [rax]
 1018f19:	push   rbx
 1018f1a:	add    DWORD PTR [rax],eax
 1018f1c:	add    DWORD PTR [rax],eax
 1018f1e:	add    BYTE PTR [rax],al
 1018f20:	add    BYTE PTR [rax],al
 1018f22:	add    BYTE PTR [rax],al
 1018f24:	add    al,BYTE PTR [rax]
 1018f26:	add    BYTE PTR [rax],al
 1018f28:	adc    BYTE PTR [rbx+0x1],dl
 1018f2b:	add    BYTE PTR [rdx],al
 1018f2d:	add    BYTE PTR [rax],al
 1018f2f:	add    BYTE PTR [rax],ah
 1018f31:	push   rbx
 1018f32:	add    DWORD PTR [rax],eax
 1018f34:	add    DWORD PTR [rax],eax
 1018f36:	add    BYTE PTR [rax],al
 1018f38:	add    BYTE PTR [rax],al
 1018f3a:	add    BYTE PTR [rax],al
 1018f3c:	add    eax,0x0
 1018f41:	push   rsp
 1018f42:	add    DWORD PTR [rax],eax
 1018f44:	add    eax,0xf0000000
 1018f49:	push   rsp
 1018f4a:	add    DWORD PTR [rax],eax
 1018f4c:	add    eax,0xe0000000
 1018f51:	push   rbp
 1018f52:	add    DWORD PTR [rax],eax
 1018f54:	add    al,BYTE PTR [rax]
 1018f56:	add    BYTE PTR [rax],al
 1018f58:	add    al,0x0
 1018f5a:	add    BYTE PTR [rax],al
 1018f5c:	or     BYTE PTR [rax],al
 1018f5e:	add    BYTE PTR [rax],al
 1018f60:	add    eax,DWORD PTR [rax]
 1018f62:	add    BYTE PTR [rax],al
 1018f64:	push   0x18f
 1018f69:	add    BYTE PTR [rax],al
 1018f6b:	add    BYTE PTR [rax-0x4f],bl
 1018f6e:	add    DWORD PTR [rax],eax
 1018f70:	je     0x1018f72
 1018f72:	add    BYTE PTR [rax],al
 1018f74:	xor    BYTE PTR [rbx+0x1],dl
 1018f77:	add    BYTE PTR [rax+0x0],bl
 1018f7a:	add    BYTE PTR [rax],al
 1018f7c:	add    BYTE PTR [rax],al
 1018f7e:	add    BYTE PTR [rax],al
 1018f80:	mov    cl,0x1
 1018f83:	add    BYTE PTR [rax+0x0],dh
 1018f86:	add    BYTE PTR [rax],al
 1018f88:	adc    BYTE PTR [rcx+rax*1+0x0],dl
 1018f8c:	pop    rax
	...
 1018f9d:	push   rbp
 1018f9e:	add    DWORD PTR [rax],eax
 1018fa0:	pop    rax
 1018fa1:	add    BYTE PTR [rax],al
 1018fa3:	add    BYTE PTR [rax-0x6e],ah
 1018fa6:	add    BYTE PTR [rax],al
 1018fa8:	(bad)  
 1018fa9:	(bad)  
 1018faa:	(bad)  
 1018fab:	jmp    FWORD PTR [rip+0x1000093]        # 0x2019044
 1018fb1:	add    BYTE PTR [rax],al
 1018fb3:	add    BYTE PTR [rbx],bh
 1018fb5:	xchg   ebx,eax
 1018fb6:	add    BYTE PTR [rax],al
 1018fb8:	add    al,BYTE PTR [rax]
 1018fba:	add    BYTE PTR [rax],al
 1018fbc:	cmp    BYTE PTR [rax+rax*1+0x400],dl
 1018fc3:	add    BYTE PTR [rsp+rdx*4+0x0],dl
 1018fc7:	add    BYTE PTR [rdx],al
 1018fc9:	add    BYTE PTR [rax],al
 1018fcb:	add    BYTE PTR [rax-0x6c],dh
 1018fce:	add    BYTE PTR [rax],al
 1018fd0:	add    DWORD PTR [rax],eax
 1018fd2:	add    BYTE PTR [rax],al
 1018fd4:	sahf   
 1018fd5:	xchg   esp,eax
 1018fd6:	add    BYTE PTR [rax],al
 1018fd8:	(bad)  
 1018fd9:	(bad)  
 1018fda:	(bad)  
 1018fdb:	push   QWORD PTR [rax]
 1018fdd:	push   rbx
 1018fde:	add    DWORD PTR [rax],eax
 1018fe0:	add    BYTE PTR [rax],al
 1018fe2:	add    BYTE PTR [rax],al
 1018fe4:	cmp    eax,0x5000153
 1018fe9:	add    BYTE PTR [rax],al
 1018feb:	add    ch,ah
 1018fed:	push   rbx
 1018fee:	add    DWORD PTR [rax],eax
 1018ff0:	add    BYTE PTR [rax],al
 1018ff2:	add    BYTE PTR [rax],al
 1018ff4:	sbb    eax,0x5000154
 1018ff9:	add    BYTE PTR [rax],al
 1018ffb:	add    dh,bl
 1018ffd:	push   rsp
 1018ffe:	add    DWORD PTR [rax],eax
 1019000:	add    BYTE PTR [rax],al
 1019002:	add    BYTE PTR [rax],al
 1019004:	or     eax,0x5000155
 1019009:	add    BYTE PTR [rax],al
 101900b:	add    dl,cl
 101900d:	push   rbp
 101900e:	add    DWORD PTR [rax],eax
 1019010:	add    BYTE PTR [rax],al
 1019012:	add    BYTE PTR [rax],al
 1019014:	sbb    DWORD PTR [rdx],ecx
 1019016:	add    al,BYTE PTR [rax]
 1019018:	or     dh,BYTE PTR [rdx+0x6]
 101901b:	push   rax
 101901c:	mov    BYTE PTR [rsi],al
 101901e:	add    DWORD PTR [rax],eax
 1019020:	adc    BYTE PTR [rax+rax*1+0x0],bl
 1019024:	sbb    DWORD PTR [rdx],ecx
 1019026:	add    al,BYTE PTR [rax]
 1019028:	or     dh,BYTE PTR [rdx+0x6]
 101902b:	push   rax
 101902c:	mov    BYTE PTR [rsi],al
 101902e:	add    DWORD PTR [rax],eax
 1019030:	adc    BYTE PTR [rax+rax*1+0x0],bl
 1019034:	sbb    DWORD PTR [rdx],ecx
 1019036:	add    al,BYTE PTR [rax]
 1019038:	or     dh,BYTE PTR [rdx+0x6]
 101903b:	push   rax
 101903c:	mov    BYTE PTR [rsi],al
 101903e:	add    DWORD PTR [rax],eax
 1019040:	adc    BYTE PTR [rax+rax*1+0x0],bl
 1019044:	sbb    DWORD PTR [rax],esp
 1019046:	or     DWORD PTR [rax],eax
 1019048:	and    BYTE PTR [rbp+riz*1+0x0],dh
 101904c:	sbb    al,0x64
 101904e:	and    al,0x0
 1019050:	sbb    BYTE PTR [rdx+riz*1],dh
 1019053:	add    BYTE PTR [rcx+rax*1],cl
 1019056:	and    BYTE PTR [rax],al
 1019058:	add    eax,0x880000e0
 101905d:	(bad)  
 101905e:	add    DWORD PTR [rax],eax
 1019060:	rex pop rsp
 1019062:	add    BYTE PTR [rax],al
 1019064:	(bad)  
 1019065:	(bad)  
 1019066:	(bad)  
 1019067:	inc    DWORD PTR [rax]
 1019069:	push   rsi
 101906a:	add    DWORD PTR [rax],eax
 101906c:	(bad)  
 101906d:	(bad)  
 101906e:	(bad)  
 101906f:	call   QWORD PTR [rax]
 1019071:	push   rsi
 1019072:	add    DWORD PTR [rax],eax
 1019074:	add    DWORD PTR [rax],eax
 1019076:	add    BYTE PTR [rax],al
 1019078:	add    BYTE PTR [rax],al
 101907a:	add    BYTE PTR [rax],al
 101907c:	add    al,BYTE PTR [rax]
 101907e:	add    BYTE PTR [rax],al
 1019080:	and    BYTE PTR [rsi+0x1],dl
 1019083:	add    BYTE PTR [rcx],al
 1019085:	add    BYTE PTR [rax],al
 1019087:	add    BYTE PTR [rax],al
 1019089:	add    BYTE PTR [rax],al
 101908b:	add    BYTE PTR [rax+rax*1],al
 101908e:	add    BYTE PTR [rax],al
 1019090:	lock push rsi
 1019092:	add    DWORD PTR [rax],eax
 1019094:	add    al,0x0
 1019096:	add    BYTE PTR [rax],al
 1019098:	rcl    BYTE PTR [rdi+0x1],1
 101909b:	add    BYTE PTR [rax+rax*1],al
 101909e:	add    BYTE PTR [rax],al
 10190a0:	mov    al,0x58
 10190a2:	add    DWORD PTR [rax],eax
 10190a4:	add    al,BYTE PTR [rax]
 10190a6:	add    BYTE PTR [rax],al
 10190a8:	add    eax,DWORD PTR [rax]
 10190aa:	add    BYTE PTR [rax],al
 10190ac:	(bad)  
 10190ad:	add    BYTE PTR [rax],al
 10190af:	add    BYTE PTR [rbx],al
 10190b1:	add    BYTE PTR [rax],al
 10190b3:	add    BYTE PTR [rax+0x190],bh
 10190b9:	add    BYTE PTR [rax],al
 10190bb:	add    BYTE PTR [rax-0x4f],bl
 10190be:	add    DWORD PTR [rax],eax
 10190c0:	in     al,dx
 10190c1:	add    BYTE PTR [rax],al
 10190c3:	add    BYTE PTR [rax],dh
 10190c5:	push   rsi
 10190c6:	add    DWORD PTR [rax],eax
 10190c8:	pop    rax
 10190c9:	add    BYTE PTR [rax],al
 10190cb:	add    BYTE PTR [rax],al
 10190cd:	add    BYTE PTR [rax],al
 10190cf:	add    BYTE PTR [rax-0x4f],al
 10190d2:	add    DWORD PTR [rax],eax
 10190d4:	call   0x10190d9
 10190d9:	push   rdi
 10190da:	add    DWORD PTR [rax],eax
 10190dc:	pop    rax
	...
 10190e9:	add    BYTE PTR [rax],al
 10190eb:	add    al,ah
 10190ed:	push   rdi
 10190ee:	add    DWORD PTR [rax],eax
 10190f0:	pop    rax
 10190f1:	add    BYTE PTR [rax],al
 10190f3:	add    BYTE PTR [rax-0x70],dh
 10190f6:	add    BYTE PTR [rax],al
 10190f8:	(bad)  
 10190f9:	(bad)  
 10190fa:	(bad)  
 10190fb:	call   QWORD PTR [rbx]
 10190fd:	xchg   ecx,eax
 10190fe:	add    BYTE PTR [rax],al
 1019100:	add    DWORD PTR [rax],eax
 1019102:	add    BYTE PTR [rax],al
 1019104:	and    DWORD PTR [rcx+0x20000],edx
 101910a:	add    BYTE PTR [rax],al
 101910c:	cwde   
 101910d:	xchg   ecx,eax
 101910e:	add    BYTE PTR [rax],al
 1019110:	add    eax,DWORD PTR [rax]
 1019112:	add    BYTE PTR [rax],al
 1019114:	movabs eax,ds:0xbe00000002000091
 101911d:	xchg   ecx,eax
 101911e:	add    BYTE PTR [rax],al
 1019120:	add    DWORD PTR [rax],eax
 1019122:	add    BYTE PTR [rax],al
 1019124:	ret    0x91
 1019127:	add    bh,bh
 1019129:	(bad)  
 101912a:	(bad)  
 101912b:	push   QWORD PTR [rax]
 101912d:	push   rsi
 101912e:	add    DWORD PTR [rax],eax
 1019130:	add    BYTE PTR [rax],al
 1019132:	add    BYTE PTR [rax],al
 1019134:	cmp    eax,0x4000156
 1019139:	add    BYTE PTR [rax],al
 101913b:	add    ah,bl
 101913d:	push   rsi
 101913e:	add    DWORD PTR [rax],eax
 1019140:	add    BYTE PTR [rax],al
 1019142:	add    BYTE PTR [rax],al
 1019144:	or     eax,0x4000157
 1019149:	add    BYTE PTR [rax],al
 101914b:	add    BYTE PTR [rdi+rdx*2+0x1],bh
 1019152:	add    BYTE PTR [rax],al
 1019154:	in     eax,dx
 1019155:	push   rdi
 1019156:	add    DWORD PTR [rax],eax
 1019158:	add    al,0x0
 101915a:	add    BYTE PTR [rax],al
 101915c:	xchg   ebp,eax
 101915d:	pop    rax
 101915e:	add    DWORD PTR [rax],eax
 1019160:	add    BYTE PTR [rax],al
 1019162:	add    BYTE PTR [rax],al
 1019164:	sbb    DWORD PTR [rdx],ecx
 1019166:	add    al,BYTE PTR [rax]
 1019168:	or     dh,BYTE PTR [rdx+0x6]
 101916b:	push   rax
 101916c:	mov    BYTE PTR [rsi],al
 101916e:	add    DWORD PTR [rax],eax
 1019170:	rex pop rsp
 1019172:	add    BYTE PTR [rax],al
 1019174:	sbb    DWORD PTR [rdx],ecx
 1019176:	add    al,BYTE PTR [rax]
 1019178:	or     dh,BYTE PTR [rdx+0x6]
 101917b:	push   rax
 101917c:	mov    BYTE PTR [rsi],al
 101917e:	add    DWORD PTR [rax],eax
 1019180:	rex pop rsp
 1019182:	add    BYTE PTR [rax],al
 1019184:	sbb    DWORD PTR [rdx],ecx
 1019186:	add    al,BYTE PTR [rax]
 1019188:	or     dh,BYTE PTR [rdx+0x6]
 101918b:	push   rax
 101918c:	mov    BYTE PTR [rsi],al
 101918e:	add    DWORD PTR [rax],eax
 1019190:	rex pop rsp
 1019192:	add    BYTE PTR [rax],al
 1019194:	adc    DWORD PTR [rax],ebp
 1019196:	or     DWORD PTR [rax],eax
 1019198:	sub    BYTE PTR [rdx+rax*2+0x0],ah
 101919c:	and    al,0x34
 101919e:	add    BYTE PTR [rip+0x7003c01],dl        # 0x801cda6
 10191a5:	loopne 0x10191ac
 10191a7:	jo     0x10191ad
 10191a9:	push   rax
 10191aa:	add    BYTE PTR [rax],al
 10191ac:	mov    BYTE PTR [rsi],al
 10191ae:	add    DWORD PTR [rax],eax
 10191b0:	jo     0x101920e
 10191b2:	add    BYTE PTR [rax],al
 10191b4:	(bad)  
 10191b5:	(bad)  
 10191b6:	(bad)  
 10191b7:	push   QWORD PTR [rax+0x66]
 10191ba:	add    DWORD PTR [rax],eax
 10191bc:	(bad)  
 10191bd:	(bad)  
 10191be:	(bad)  
 10191bf:	inc    DWORD PTR [rax+0x1000166]
 10191c5:	add    BYTE PTR [rax],al
 10191c7:	add    BYTE PTR [rax+0x1000166],dl
 10191cd:	add    BYTE PTR [rax],al
 10191cf:	add    BYTE PTR [rax+0x166],ah
 10191d5:	mov    es,WORD PTR [rax]
 10191d7:	add    bh,bh
 10191d9:	(bad)  
 10191da:	(bad)  
 10191db:	jmp    FWORD PTR [rax+0x100008e]
 10191e1:	add    BYTE PTR [rax],al
 10191e3:	add    BYTE PTR [rsi],cl
 10191e5:	pop    QWORD PTR [rax]
 10191e7:	add    BYTE PTR [rdx],al
 10191e9:	add    BYTE PTR [rax],al
 10191eb:	add    BYTE PTR [rsi],ah
 10191ed:	pop    QWORD PTR [rax]
 10191ef:	add    BYTE PTR [rcx],al
 10191f1:	add    BYTE PTR [rax],al
 10191f3:	add    BYTE PTR [rbx+0x300008f],dh
 10191f9:	add    BYTE PTR [rax],al
 10191fb:	add    bl,cl
 10191fd:	pop    QWORD PTR [rax]
 10191ff:	add    BYTE PTR [rcx],al
 1019201:	add    BYTE PTR [rax],al
 1019203:	add    cl,ah
 1019205:	pop    QWORD PTR [rax]
 1019207:	add    bh,bh
 1019209:	(bad)  
 101920a:	(bad)  
 101920b:	call   QWORD PTR [rcx]
 101920d:	sub    DWORD PTR [rbx],ecx
 101920f:	add    BYTE PTR [rcx],ch
 1019211:	fs push rdx
 1019213:	add    BYTE PTR [rip+0x19005034],ah        # 0x1a01e24d
 1019219:	add    DWORD PTR [rdx+0x0],ecx
 101921c:	or     esi,eax
 101921e:	or     eax,esp
 1019220:	(bad)  
 1019221:	rol    BYTE PTR [rip+0x500470],0x0        # 0x1519698
 1019228:	mov    BYTE PTR [rsi],al
 101922a:	add    DWORD PTR [rax],eax
 101922c:	movabs al,ds:0x80ffffffff00005c
 1019235:	add    DWORD PTR gs:[rax],eax
 1019238:	(bad)  
 1019239:	(bad)  
 101923a:	(bad)  
 101923b:	call   QWORD PTR [rax+0x1000165]
 1019241:	add    BYTE PTR [rax],al
 1019243:	add    BYTE PTR [rax+0x1000165],ah
 1019249:	add    BYTE PTR [rax],al
 101924b:	add    BYTE PTR [rax+0x1000165],dh
 1019251:	add    BYTE PTR [rax],al
 1019253:	add    al,al
 1019255:	add    DWORD PTR gs:[rax],eax
 1019258:	add    al,0x0
 101925a:	add    BYTE PTR [rax],al
 101925c:	shl    BYTE PTR [rbp+0x1],1
 101925f:	add    BYTE PTR [rcx],al
 1019261:	add    BYTE PTR [rax],al
 1019263:	add    al,ah
 1019265:	add    DWORD PTR gs:[rax],eax
 1019268:	add    DWORD PTR [rax],eax
 101926a:	add    BYTE PTR [rax],al
 101926c:	lock add DWORD PTR gs:[rax],eax
 1019270:	(bad)  
 1019271:	add    BYTE PTR [rax],al
 1019273:	add    BYTE PTR [rax],al
 1019275:	add    WORD PTR [rax],ax
 1019278:	or     BYTE PTR [rax],al
 101927a:	add    BYTE PTR [rax],al
 101927c:	adc    BYTE PTR [rsi+0x1],ah
 101927f:	add    BYTE PTR [rdi],al
 1019281:	add    BYTE PTR [rax],al
 1019283:	add    BYTE PTR [rax],ah
 1019285:	add    WORD PTR [rax],ax
 1019288:	(bad)  
 1019289:	add    BYTE PTR [rax],al
 101928b:	add    BYTE PTR [rax],dh
 101928d:	add    WORD PTR [rax],ax
 1019290:	or     eax,DWORD PTR [rax]
 1019292:	add    BYTE PTR [rax],al
 1019294:	rex
 1019295:	add    WORD PTR [rax],ax
 1019298:	(bad)  
 1019299:	add    BYTE PTR [rax],al
 101929b:	add    BYTE PTR [rax+0x66],dl
 101929e:	add    DWORD PTR [rax],eax
 10192a0:	rol    BYTE PTR [rdi-0x10000],0xff
 10192a7:	jmp    QWORD PTR [rbx-0x78]
 10192aa:	add    BYTE PTR [rax],al
 10192ac:	add    DWORD PTR [rax],eax
 10192ae:	add    BYTE PTR [rax],al
 10192b0:	enter  0x88,0x0
 10192b4:	add    al,BYTE PTR [rax]
 10192b6:	add    BYTE PTR [rax],al
 10192b8:	int3   
 10192b9:	mov    BYTE PTR [rax],al
 10192bb:	add    BYTE PTR [rcx],al
 10192bd:	add    BYTE PTR [rax],al
 10192bf:	add    bh,al
 10192c1:	mov    DWORD PTR [rax],eax
 10192c3:	add    BYTE PTR [rax+rax*1],al
 10192c6:	add    BYTE PTR [rax],al
 10192c8:	(bad)  [rcx+0x50000]
 10192ce:	add    BYTE PTR [rax],al
 10192d0:	fisttp WORD PTR [rcx+0x40000]
 10192d6:	add    BYTE PTR [rax],al
 10192d8:	lock mov DWORD PTR [rax],eax
 10192db:	add    BYTE PTR [rcx],al
 10192dd:	add    BYTE PTR [rax],al
 10192df:	add    BYTE PTR [rdx+0x700008a],ah
 10192e5:	add    BYTE PTR [rax],al
 10192e7:	add    BYTE PTR [rdx-0x75],cl
 10192ea:	add    BYTE PTR [rax],al
 10192ec:	or     BYTE PTR [rax],al
 10192ee:	add    BYTE PTR [rax],al
 10192f0:	pop    rsp
 10192f1:	mov    eax,DWORD PTR [rax]
 10192f3:	add    BYTE PTR [rcx],cl
 10192f5:	add    BYTE PTR [rax],al
 10192f7:	add    BYTE PTR [rdx-0x75],ah
 10192fa:	add    BYTE PTR [rax],al
 10192fc:	or     BYTE PTR [rax],al
 10192fe:	add    BYTE PTR [rax],al
 1019300:	jae    0x101928d
 1019302:	add    BYTE PTR [rax],al
 1019304:	(bad)  
 1019305:	add    BYTE PTR [rax],al
 1019307:	add    BYTE PTR [rbx+0xb00008c],dl
 101930d:	add    BYTE PTR [rax],al
 101930f:	add    BYTE PTR [rbp+0xc00008c],ah
 1019315:	add    BYTE PTR [rax],al
 1019317:	add    BYTE PTR [rbx+0xb00008c],ch
 101931d:	add    BYTE PTR [rax],al
 101931f:	add    BYTE PTR [rsp+rcx*4+0x70000],bh
 1019326:	add    BYTE PTR [rax],al
 1019328:	cmp    ecx,DWORD PTR [rbp+0xd0000]
 101932e:	add    BYTE PTR [rax],al
 1019330:	rex.WRXB lea r8,[r8]
 1019333:	add    BYTE PTR [rdi],al
 1019335:	add    BYTE PTR [rax],al
 1019337:	add    BYTE PTR [rdi+0x100008d],bh
 101933d:	add    BYTE PTR [rax],al
 101933f:	add    ah,cl
 1019341:	lea    eax,[rax]
 1019343:	add    bh,bh
 1019345:	(bad)  
 1019346:	(bad)  
 1019347:	call   FWORD PTR [rcx]
 1019349:	and    eax,0x34250009
 101934e:	push   rsi
 101934f:	add    BYTE PTR [rsi],dl
 1019351:	add    DWORD PTR [rax+0x0],edx
 1019354:	(bad)  
 1019356:	or     eax,0x9c00be0
 101935b:	jo     0x1019365
 101935d:	(bad)  
 101935e:	add    BYTE PTR [rax],al
 1019360:	mov    BYTE PTR [rsi],al
 1019362:	add    DWORD PTR [rax],eax
 1019364:	rcr    BYTE PTR [rax+rax*1+0x0],1
 1019368:	(bad)  
 1019369:	(bad)  
 101936a:	(bad)  
 101936b:	inc    eax
 101936d:	pop    rbx
 101936e:	add    DWORD PTR [rax],eax
 1019370:	(bad)  
 1019371:	(bad)  
 1019372:	(bad)  
 1019373:	call   rax
 1019375:	pop    rbx
 1019376:	add    DWORD PTR [rax],eax
 1019378:	add    DWORD PTR [rax],eax
 101937a:	add    BYTE PTR [rax],al
 101937c:	add    BYTE PTR [rax],al
 101937e:	add    BYTE PTR [rax],al
 1019380:	add    al,BYTE PTR [rax]
 1019382:	add    BYTE PTR [rax],al
 1019384:	loopne 0x10193e1
 1019386:	add    DWORD PTR [rax],eax
 1019388:	add    al,BYTE PTR [rax]
 101938a:	add    BYTE PTR [rax],al
 101938c:	lock pop rbx
 101938e:	add    DWORD PTR [rax],eax
 1019390:	add    al,0x0
 1019392:	add    BYTE PTR [rax],al
 1019394:	add    BYTE PTR [rcx+rax*1+0x0],bl
 1019398:	add    eax,0x10000000
 101939d:	pop    rsp
 101939e:	add    DWORD PTR [rax],eax
 10193a0:	add    al,BYTE PTR [rax]
 10193a2:	add    BYTE PTR [rax],al
 10193a4:	and    BYTE PTR [rcx+rax*1+0x0],bl
 10193a8:	add    DWORD PTR [rax],eax
 10193aa:	add    BYTE PTR [rax],al
 10193ac:	add    BYTE PTR [rax],al
 10193ae:	add    BYTE PTR [rax],al
 10193b0:	or     BYTE PTR [rax],al
 10193b2:	add    BYTE PTR [rax],al
 10193b4:	lock pop rsp
 10193b6:	add    DWORD PTR [rax],eax
 10193b8:	or     BYTE PTR [rax],al
 10193ba:	add    BYTE PTR [rax],al
 10193bc:	rcr    BYTE PTR [rbp+0x1],1
 10193bf:	add    BYTE PTR [rax],cl
 10193c1:	add    BYTE PTR [rax],al
 10193c3:	add    BYTE PTR [rax+0x100015e],dh
 10193c9:	add    BYTE PTR [rax],al
 10193cb:	add    al,al
 10193cd:	pop    rsi
 10193ce:	add    DWORD PTR [rax],eax
 10193d0:	add    al,BYTE PTR [rax]
 10193d2:	add    BYTE PTR [rax],al
 10193d4:	(bad)  
 10193d5:	add    BYTE PTR [rax],al
 10193d7:	add    BYTE PTR [rbx],cl
 10193d9:	add    BYTE PTR [rax],al
 10193db:	add    BYTE PTR [rbx],al
 10193dd:	add    BYTE PTR [rax],al
 10193df:	add    ah,ah
 10193e1:	xchg   ebx,eax
 10193e2:	add    DWORD PTR [rax],eax
 10193e4:	add    BYTE PTR [rax],al
 10193e6:	add    BYTE PTR [rax],al
 10193e8:	pop    rax
 10193e9:	mov    cl,0x1
 10193eb:	add    BYTE PTR [rax+0x1],bh
 10193ee:	add    BYTE PTR [rax],al
 10193f0:	xor    BYTE PTR [rcx+rax*1+0x0],bl
 10193f4:	pop    rax
 10193f5:	add    BYTE PTR [rax],al
 10193f7:	add    BYTE PTR [rax],al
 10193f9:	add    BYTE PTR [rax],al
 10193fb:	add    BYTE PTR [rax-0x4f],al
 10193fe:	add    DWORD PTR [rax],eax
 1019400:	clc    
 1019401:	add    BYTE PTR [rax],al
 1019403:	add    BYTE PTR [rax],al
 1019405:	pop    rbp
 1019406:	add    DWORD PTR [rax],eax
 1019408:	pop    rax
	...
 1019415:	add    BYTE PTR [rax],al
 1019417:	add    al,ah
 1019419:	pop    rbp
 101941a:	add    DWORD PTR [rax],eax
 101941c:	pop    rax
 101941d:	add    BYTE PTR [rax],al
 101941f:	add    al,dh
 1019421:	(bad)  
 1019422:	add    BYTE PTR [rax],al
 1019424:	(bad)  
 1019425:	(bad)  
 1019426:	(bad)  
 1019427:	push   QWORD PTR [rsi+0x1000083]
 101942d:	add    BYTE PTR [rax],al
 101942f:	add    ah,al
 1019431:	add    DWORD PTR [rax],0x0
 1019434:	add    al,BYTE PTR [rax]
 1019436:	add    BYTE PTR [rax],al
 1019438:	mov    ebp,0x4000084
 101943d:	add    BYTE PTR [rax],al
 101943f:	add    al,bl
 1019441:	test   BYTE PTR [rax],al
 1019443:	add    BYTE PTR [rip+0xfffffffff9000000],al        # 0xfffffffffa019449
 1019449:	test   BYTE PTR [rax],al
 101944b:	add    BYTE PTR [rsi],al
 101944d:	add    BYTE PTR [rax],al
 101944f:	add    bh,bh
 1019451:	test   BYTE PTR [rax],al
 1019453:	add    BYTE PTR [rip+0x14000000],al        # 0x15019459
 1019459:	test   DWORD PTR [rax],eax
 101945b:	add    BYTE PTR [rax+rax*1],al
 101945e:	add    BYTE PTR [rax],al
 1019460:	push   rsi
 1019461:	test   DWORD PTR [rax],eax
 1019463:	add    BYTE PTR [rdx],al
 1019465:	add    BYTE PTR [rax],al
 1019467:	add    dl,bh
 1019469:	test   DWORD PTR [rax],eax
 101946b:	add    BYTE PTR [rdi],al
 101946d:	add    BYTE PTR [rax],al
 101946f:	add    BYTE PTR [rsi],dl
 1019471:	xchg   BYTE PTR [rax],al
 1019473:	add    BYTE PTR [rdx],al
 1019475:	add    BYTE PTR [rax],al
 1019477:	add    BYTE PTR [rip+0x1000086],dh        # 0x2019503
 101947d:	add    BYTE PTR [rax],al
 101947f:	add    bh,ch
 1019481:	xchg   BYTE PTR [rax],al
 1019483:	add    BYTE PTR [rax+rax*1],cl
 1019486:	add    BYTE PTR [rax],al
 1019488:	test   DWORD PTR [rsi+0x10000],0x87230000
 1019492:	add    BYTE PTR [rax],al
 1019494:	(bad)  
 1019495:	(bad)  
 1019496:	(bad)  
 1019497:	push   QWORD PTR [rax]
 1019499:	pop    rsp
 101949a:	add    DWORD PTR [rax],eax
 101949c:	add    BYTE PTR [rax],al
 101949e:	add    BYTE PTR [rax],al
 10194a0:	cmp    eax,0x800015c
 10194a5:	add    BYTE PTR [rax],al
 10194a7:	add    dl,ah
 10194a9:	pop    rsp
 10194aa:	add    DWORD PTR [rax],eax
 10194ac:	add    BYTE PTR [rax],al
 10194ae:	add    BYTE PTR [rax],al
 10194b0:	or     eax,0x800015d
 10194b5:	add    BYTE PTR [rax],al
 10194b7:	add    dl,al
 10194b9:	pop    rbp
 10194ba:	add    DWORD PTR [rax],eax
 10194bc:	add    BYTE PTR [rax],al
 10194be:	add    BYTE PTR [rax],al
 10194c0:	in     eax,dx
 10194c1:	pop    rbp
 10194c2:	add    DWORD PTR [rax],eax
 10194c4:	or     BYTE PTR [rax],al
 10194c6:	add    BYTE PTR [rax],al
 10194c8:	fwait
 10194c9:	pop    rsi
 10194ca:	add    DWORD PTR [rax],eax
 10194cc:	add    BYTE PTR [rax],al
 10194ce:	add    BYTE PTR [rax],al
 10194d0:	sbb    DWORD PTR [rdx],ecx
 10194d2:	add    al,BYTE PTR [rax]
 10194d4:	or     dh,BYTE PTR [rdx+0x6]
 10194d7:	push   rax
 10194d8:	mov    BYTE PTR [rsi],al
 10194da:	add    DWORD PTR [rax],eax
 10194dc:	rcr    BYTE PTR [rax+rax*1+0x0],1
 10194e0:	sbb    DWORD PTR [rdx],ecx
 10194e2:	add    al,BYTE PTR [rax]
 10194e4:	or     dh,BYTE PTR [rdx+0x6]
 10194e7:	push   rax
 10194e8:	mov    BYTE PTR [rsi],al
 10194ea:	add    DWORD PTR [rax],eax
 10194ec:	rcr    BYTE PTR [rax+rax*1+0x0],1
 10194f0:	sbb    DWORD PTR [rdx],ecx
 10194f2:	add    al,BYTE PTR [rax]
 10194f4:	or     dh,BYTE PTR [rdx+0x6]
 10194f7:	push   rax
 10194f8:	mov    BYTE PTR [rsi],al
 10194fa:	add    DWORD PTR [rax],eax
 10194fc:	rcr    BYTE PTR [rax+rax*1+0x0],1
 1019500:	sbb    DWORD PTR [rbx],ebx
 1019502:	(bad)  
 1019503:	add    BYTE PTR [rbx],bl
 1019505:	fs and al,0x0
 1019508:	(bad)  
 1019509:	xor    al,0x22
 101950b:	add    BYTE PTR [rbx],cl
 101950d:	add    DWORD PTR [rax],esp
 101950f:	add    BYTE PTR [rax+rsi*2],al
 1019512:	add    BYTE PTR [rax],al
 1019514:	mov    BYTE PTR [rsi],al
 1019516:	add    DWORD PTR [rax],eax
 1019518:	add    BYTE PTR [rbp+0x0],bl
 101951b:	add    bh,bh
 101951d:	(bad)  
 101951e:	(bad)  
 101951f:	push   QWORD PTR [rax]
 1019521:	add    QWORD PTR [r8],r8
 1019524:	(bad)  
 1019525:	(bad)  
 1019526:	(bad)  
 1019527:	inc    DWORD PTR [rax+0x4d]
 101952a:	add    DWORD PTR [rax],eax
 101952c:	add    DWORD PTR [rax],eax
 101952e:	add    BYTE PTR [rax],al
 1019530:	add    BYTE PTR [rax],al
 1019532:	add    BYTE PTR [rax],al
 1019534:	add    DWORD PTR [rax],eax
 1019536:	add    BYTE PTR [rax],al
 1019538:	add    BYTE PTR [rax],al
 101953a:	add    BYTE PTR [rax],al
 101953c:	add    eax,DWORD PTR [rax]
 101953e:	add    BYTE PTR [rax],al
 1019540:	adc    BYTE PTR [rsi+0x1],cl
 1019543:	add    BYTE PTR [rbx],al
 1019545:	add    BYTE PTR [rax],al
 1019547:	add    al,dh
 1019549:	rex.WRX add QWORD PTR [rax],r8
 101954c:	add    eax,DWORD PTR [rax]
 101954e:	add    BYTE PTR [rax],al
 1019550:	ror    BYTE PTR [rdi+0x1],1
 1019553:	add    BYTE PTR [rdx],al
 1019555:	add    BYTE PTR [rax],al
 1019557:	add    BYTE PTR [rdx],al
 1019559:	add    BYTE PTR [rax],al
 101955b:	add    BYTE PTR [rsi],al
 101955d:	add    BYTE PTR [rax],al
 101955f:	add    BYTE PTR [rbx],al
 1019561:	add    BYTE PTR [rax],al
 1019563:	add    BYTE PTR [rax-0x6b],ch
 1019566:	add    DWORD PTR [rax],eax
 1019568:	add    BYTE PTR [rax],al
 101956a:	add    BYTE PTR [rax],al
 101956c:	pop    rax
 101956d:	mov    cl,0x1
 101956f:	add    ah,ch
 1019571:	add    BYTE PTR [rax],al
 1019573:	add    BYTE PTR [rax+0x4d],dl
 1019576:	add    DWORD PTR [rax],eax
 1019578:	pop    rax
 1019579:	add    BYTE PTR [rax],al
 101957b:	add    BYTE PTR [rax],al
 101957d:	add    BYTE PTR [rax],al
 101957f:	add    BYTE PTR [rax-0x4f],al
 1019582:	add    DWORD PTR [rax],eax
 1019584:	call   0x21019589
 1019589:	rex.WRX add QWORD PTR [rax],r8
 101958c:	pop    rax
	...
 101959d:	rex.WRXB add QWORD PTR [r8],r8
 10195a0:	pop    rax
 10195a1:	add    BYTE PTR [rax],al
 10195a3:	add    BYTE PTR [rax],dh
 10195a5:	add    DWORD PTR [rax],0xffffff00
 10195ab:	dec    ebp
 10195ad:	add    DWORD PTR [rax],0x100
 10195b3:	add    ah,ah
 10195b5:	add    DWORD PTR [rax],0x200
 10195bb:	add    BYTE PTR [rdx-0x7e],cl
 10195be:	add    BYTE PTR [rax],al
 10195c0:	add    DWORD PTR [rax],eax
 10195c2:	add    BYTE PTR [rax],al
 10195c4:	push   rdx
 10195c5:	(bad)  
 10195c6:	add    BYTE PTR [rax],al
 10195c8:	(bad)  
 10195c9:	(bad)  
 10195ca:	(bad)  
 10195cb:	call   QWORD PTR [rax+0x4d]
 10195ce:	add    DWORD PTR [rax],eax
 10195d0:	add    BYTE PTR [rax],al
 10195d2:	add    BYTE PTR [rax],al
 10195d4:	pop    rbp
 10195d5:	add    QWORD PTR [r8],r8
 10195d8:	add    eax,DWORD PTR [rax]
 10195da:	add    BYTE PTR [rax],al
 10195dc:	cld    
 10195dd:	add    QWORD PTR [r8],r8
 10195e0:	add    BYTE PTR [rax],al
 10195e2:	add    BYTE PTR [rax],al
 10195e4:	sub    eax,0x300014e
 10195e9:	add    BYTE PTR [rax],al
 10195eb:	add    ah,bl
 10195ed:	rex.WRX add QWORD PTR [rax],r8
 10195f0:	add    BYTE PTR [rax],al
 10195f2:	add    BYTE PTR [rax],al
 10195f4:	or     eax,0x300014f
 10195f9:	add    BYTE PTR [rax],al
 10195fb:	add    BYTE PTR [rbp+0x14f],dh
 1019601:	add    BYTE PTR [rax],al
 1019603:	add    BYTE PTR [rcx],bl
 1019605:	or     al,BYTE PTR [rdx]
 1019607:	add    BYTE PTR [rdx],cl
 1019609:	jb     0x1019611
 101960b:	push   rax
 101960c:	mov    BYTE PTR [rsi],al
 101960e:	add    DWORD PTR [rax],eax
 1019610:	add    BYTE PTR [rbp+0x0],bl
 1019613:	add    BYTE PTR [rcx],bl
 1019615:	or     al,BYTE PTR [rdx]
 1019617:	add    BYTE PTR [rdx],cl
 1019619:	jb     0x1019621
 101961b:	push   rax
 101961c:	mov    BYTE PTR [rsi],al
 101961e:	add    DWORD PTR [rax],eax
 1019620:	add    BYTE PTR [rbp+0x0],bl
 1019623:	add    BYTE PTR [rcx],bl
 1019625:	or     al,BYTE PTR [rdx]
 1019627:	add    BYTE PTR [rdx],cl
 1019629:	jb     0x1019631
 101962b:	push   rax
 101962c:	mov    BYTE PTR [rsi],al
 101962e:	add    DWORD PTR [rax],eax
 1019630:	add    BYTE PTR [rbp+0x0],bl
 1019633:	add    BYTE PTR [rcx],bl
 1019635:	and    cl,BYTE PTR [rcx]
 1019637:	add    BYTE PTR [rdx],ah
 1019639:	rex.RX add BYTE PTR fs:[rsi],r11b
 101963d:	xor    al,0x45
 101963f:	add    BYTE PTR [rdi],cl
 1019641:	add    DWORD PTR [rax+0x0],eax
 1019644:	or     al,dh
 1019646:	(bad)  
 1019647:	loopne 0x101964d
 1019649:	jo     0x101964b
 101964b:	add    BYTE PTR [rax+0x30000106],cl
 1019651:	pop    rbp
 1019652:	add    BYTE PTR [rax],al
 1019654:	(bad)  
 1019655:	(bad)  
 1019656:	(bad)  
 1019657:	call   rax
 1019659:	pop    rax
 101965a:	add    DWORD PTR [rax],eax
 101965c:	(bad)  
 101965d:	(bad)  
 101965e:	(bad)  
 101965f:	jmp    rax
 1019661:	pop    rax
 1019662:	add    DWORD PTR [rax],eax
 1019664:	add    DWORD PTR [rax],eax
 1019666:	add    BYTE PTR [rax],al
 1019668:	add    BYTE PTR [rax],al
 101966a:	add    BYTE PTR [rax],al
 101966c:	add    al,BYTE PTR [rax]
 101966e:	add    BYTE PTR [rax],al
 1019670:	lock pop rax
 1019672:	add    DWORD PTR [rax],eax
 1019674:	add    eax,DWORD PTR [rax]
 1019676:	add    BYTE PTR [rax],al
 1019678:	add    BYTE PTR [rcx+0x1],bl
 101967b:	add    BYTE PTR [rdx],al
 101967d:	add    BYTE PTR [rax],al
 101967f:	add    BYTE PTR [rax],dl
 1019681:	pop    rcx
 1019682:	add    DWORD PTR [rax],eax
 1019684:	add    DWORD PTR [rax],eax
 1019686:	add    BYTE PTR [rax],al
 1019688:	add    BYTE PTR [rax],al
 101968a:	add    BYTE PTR [rax],al
 101968c:	(bad)  
 101968d:	add    BYTE PTR [rax],al
 101968f:	add    al,ah
 1019691:	pop    rcx
 1019692:	add    DWORD PTR [rax],eax
 1019694:	(bad)  
 1019695:	add    BYTE PTR [rax],al
 1019697:	add    al,al
 1019699:	pop    rdx
 101969a:	add    DWORD PTR [rax],eax
 101969c:	(bad)  
 101969d:	add    BYTE PTR [rax],al
 101969f:	add    BYTE PTR [rax+0x200015b],ah
 10196a5:	add    BYTE PTR [rax],al
 10196a7:	add    BYTE PTR [rip+0x9000000],al        # 0xa0196ad
 10196ad:	add    BYTE PTR [rax],al
 10196af:	add    BYTE PTR [rbx],al
 10196b1:	add    BYTE PTR [rax],al
 10196b3:	add    BYTE PTR [rax+0x196],bh
 10196b9:	add    BYTE PTR [rax],al
 10196bb:	add    BYTE PTR [rax-0x4f],bl
 10196be:	add    DWORD PTR [rax],eax
 10196c0:	cld    
 10196c1:	add    BYTE PTR [rax],al
 10196c3:	add    BYTE PTR [rax],ah
 10196c5:	pop    rcx
 10196c6:	add    DWORD PTR [rax],eax
 10196c8:	pop    rax
 10196c9:	add    BYTE PTR [rax],al
 10196cb:	add    BYTE PTR [rax],al
 10196cd:	add    BYTE PTR [rax],al
 10196cf:	add    BYTE PTR [rax-0x4f],al
 10196d2:	add    DWORD PTR [rax],eax
 10196d4:	clc    
 10196d5:	add    BYTE PTR [rax],al
 10196d7:	add    al,dh
 10196d9:	pop    rcx
 10196da:	add    DWORD PTR [rax],eax
 10196dc:	pop    rax
	...
 10196e9:	add    BYTE PTR [rax],al
 10196eb:	add    al,dl
 10196ed:	pop    rdx
 10196ee:	add    DWORD PTR [rax],eax
 10196f0:	pop    rax
 10196f1:	add    BYTE PTR [rax],al
 10196f3:	add    BYTE PTR [rax+0x7d],dl
 10196f6:	add    BYTE PTR [rax],al
 10196f8:	(bad)  
 10196f9:	(bad)  
 10196fa:	(bad)  
 10196fb:	call   FWORD PTR [rbx]
 10196fd:	jle    0x10196ff
 10196ff:	add    BYTE PTR [rdx],al
 1019701:	add    BYTE PTR [rax],al
 1019703:	add    dl,al
 1019705:	jle    0x1019707
 1019707:	add    BYTE PTR [rbx],al
 1019709:	add    BYTE PTR [rax],al
 101970b:	add    al,ch
 101970d:	jle    0x101970f
 101970f:	add    BYTE PTR [rax+rax*1],al
 1019712:	add    BYTE PTR [rax],al
 1019714:	out    dx,al
 1019715:	jle    0x1019717
 1019717:	add    BYTE PTR [rbx],al
 1019719:	add    BYTE PTR [rax],al
 101971b:	add    BYTE PTR [rbx],al
 101971d:	jg     0x101971f
 101971f:	add    BYTE PTR [rdx],al
 1019721:	add    BYTE PTR [rax],al
 1019723:	add    BYTE PTR [rax+0x500007f],ch
 1019729:	add    BYTE PTR [rax],al
 101972b:	add    BYTE PTR [rdi+0x200007f],ch
 1019731:	add    BYTE PTR [rax],al
 1019733:	add    BYTE PTR [rdi],dh
 1019735:	add    BYTE PTR [rax],0x0
 1019738:	add    DWORD PTR [rax],eax
 101973a:	add    BYTE PTR [rax],al
 101973c:	test   BYTE PTR [rax-0x10000],al
 1019742:	(bad)  
 1019743:	jmp    QWORD PTR [rax]
 1019745:	pop    rcx
 1019746:	add    DWORD PTR [rax],eax
 1019748:	add    BYTE PTR [rax],al
 101974a:	add    BYTE PTR [rax],al
 101974c:	sub    eax,0x6000159
 1019751:	add    BYTE PTR [rax],al
 1019753:	add    bh,cl
 1019755:	pop    rcx
 1019756:	add    DWORD PTR [rax],eax
 1019758:	add    BYTE PTR [rax],al
 101975a:	add    BYTE PTR [rax],al
 101975c:	std    
 101975d:	pop    rcx
 101975e:	add    DWORD PTR [rax],eax
 1019760:	(bad)  
 1019761:	add    BYTE PTR [rax],al
 1019763:	add    BYTE PTR [rdi+0x15a],ch
 1019769:	add    BYTE PTR [rax],al
 101976b:	add    ch,bl
 101976d:	pop    rdx
 101976e:	add    DWORD PTR [rax],eax
 1019770:	(bad)  
 1019771:	add    BYTE PTR [rax],al
 1019773:	add    BYTE PTR [rax+0x15b],cl
 1019779:	add    BYTE PTR [rax],al
 101977b:	add    BYTE PTR [rcx],bl
 101977d:	or     al,BYTE PTR [rdx]
 101977f:	add    BYTE PTR [rdx],cl
 1019781:	jb     0x1019789
 1019783:	push   rax
 1019784:	mov    BYTE PTR [rsi],al
 1019786:	add    DWORD PTR [rax],eax
 1019788:	xor    BYTE PTR [rbp+0x0],bl
 101978b:	add    BYTE PTR [rcx],bl
 101978d:	or     al,BYTE PTR [rdx]
 101978f:	add    BYTE PTR [rdx],cl
 1019791:	jb     0x1019799
 1019793:	push   rax
 1019794:	mov    BYTE PTR [rsi],al
 1019796:	add    DWORD PTR [rax],eax
 1019798:	xor    BYTE PTR [rbp+0x0],bl
 101979b:	add    BYTE PTR [rcx],bl
 101979d:	or     al,BYTE PTR [rdx]
 101979f:	add    BYTE PTR [rdx],cl
 10197a1:	jb     0x10197a9
 10197a3:	push   rax
 10197a4:	mov    BYTE PTR [rsi],al
 10197a6:	add    DWORD PTR [rax],eax
 10197a8:	xor    BYTE PTR [rbp+0x0],bl
 10197ab:	add    BYTE PTR [rcx],bl
 10197ad:	and    cl,BYTE PTR [rcx]
 10197af:	add    BYTE PTR [rdx],ah
 10197b1:	rex.WR add BYTE PTR fs:[rsi],r11b
 10197b5:	xor    al,0x4b
 10197b7:	add    BYTE PTR [rdi],cl
 10197b9:	add    DWORD PTR [rsi+0x0],eax
 10197bc:	or     al,dh
 10197be:	(bad)  
 10197bf:	loopne 0x10197c5
 10197c1:	jo     0x10197c3
 10197c3:	add    BYTE PTR [rax+0x60000106],cl
 10197c9:	pop    rbp
 10197ca:	add    BYTE PTR [rax],al
 10197cc:	(bad)  
 10197cd:	(bad)  
 10197ce:	(bad)  
 10197cf:	jmp    rax
 10197d1:	pop    rsi
 10197d2:	add    DWORD PTR [rax],eax
 10197d4:	(bad)  
 10197d5:	(bad)  
 10197d6:	(bad)  
 10197d7:	push   rax
 10197d9:	pop    rsi
 10197da:	add    DWORD PTR [rax],eax
 10197dc:	add    DWORD PTR [rax],eax
 10197de:	add    BYTE PTR [rax],al
 10197e0:	add    BYTE PTR [rax],al
 10197e2:	add    BYTE PTR [rax],al
 10197e4:	add    al,BYTE PTR [rax]
 10197e6:	add    BYTE PTR [rax],al
 10197e8:	add    BYTE PTR [rdi+0x1],bl
 10197eb:	add    BYTE PTR [rbx],al
 10197ed:	add    BYTE PTR [rax],al
 10197ef:	add    BYTE PTR [rax],dl
 10197f1:	pop    rdi
 10197f2:	add    DWORD PTR [rax],eax
 10197f4:	add    al,BYTE PTR [rax]
 10197f6:	add    BYTE PTR [rax],al
 10197f8:	and    BYTE PTR [rdi+0x1],bl
 10197fb:	add    BYTE PTR [rdx],al
 10197fd:	add    BYTE PTR [rax],al
 10197ff:	add    BYTE PTR [rax],dh
 1019801:	pop    rdi
 1019802:	add    DWORD PTR [rax],eax
 1019804:	add    al,BYTE PTR [rax]
 1019806:	add    BYTE PTR [rax],al
 1019808:	rex pop rdi
 101980a:	add    DWORD PTR [rax],eax
 101980c:	add    DWORD PTR [rax],eax
 101980e:	add    BYTE PTR [rax],al
 1019810:	add    BYTE PTR [rax],al
 1019812:	add    BYTE PTR [rax],al
 1019814:	or     BYTE PTR [rax],al
 1019816:	add    BYTE PTR [rax],al
 1019818:	adc    BYTE PTR [rax+0x1],ah
 101981b:	add    BYTE PTR [rax],cl
 101981d:	add    BYTE PTR [rax],al
 101981f:	add    al,dh
 1019821:	(bad)  
 1019822:	add    DWORD PTR [rax],eax
 1019824:	or     BYTE PTR [rax],al
 1019826:	add    BYTE PTR [rax],al
 1019828:	shl    BYTE PTR [rcx+0x1],1
 101982b:	add    BYTE PTR [rdx],al
 101982d:	add    BYTE PTR [rax],al
 101982f:	add    BYTE PTR [rdi],al
 1019831:	add    BYTE PTR [rax],al
 1019833:	add    BYTE PTR [rbx],cl
 1019835:	add    BYTE PTR [rax],al
 1019837:	add    BYTE PTR [rbx],al
 1019839:	add    BYTE PTR [rax],al
 101983b:	add    BYTE PTR [rax-0x68],al
 101983e:	add    DWORD PTR [rax],eax
 1019840:	add    BYTE PTR [rax],al
 1019842:	add    BYTE PTR [rax],al
 1019844:	pop    rax
 1019845:	mov    cl,0x1
 1019847:	add    BYTE PTR [rax+0x50000001],al
 101984d:	pop    rdi
 101984e:	add    DWORD PTR [rax],eax
 1019850:	pop    rax
 1019851:	add    BYTE PTR [rax],al
 1019853:	add    BYTE PTR [rax],al
 1019855:	add    BYTE PTR [rax],al
 1019857:	add    BYTE PTR [rax-0x4f],al
 101985a:	add    DWORD PTR [rax],eax
 101985c:	jo     0x101985f
 101985e:	add    BYTE PTR [rax],al
 1019860:	and    BYTE PTR [rax+0x1],ah
 1019863:	add    BYTE PTR [rax+0x0],bl
	...
 1019872:	add    BYTE PTR [rax],al
 1019874:	add    BYTE PTR [rcx+0x1],ah
 1019877:	add    BYTE PTR [rax+0x0],bl
 101987a:	add    BYTE PTR [rax],al
 101987c:	sar    BYTE PTR [rax+0x0],0x0
 1019880:	(bad)  
 1019881:	(bad)  
 1019882:	(bad)  
 1019883:	dec    DWORD PTR [rbp+0x2000079]
 1019889:	add    BYTE PTR [rax],al
 101988b:	add    BYTE PTR [rbx],bh
 101988d:	jp     0x101988f
 101988f:	add    BYTE PTR [rbx],al
 1019891:	add    BYTE PTR [rax],al
 1019893:	add    BYTE PTR [rcx+0x7a],ah
 1019896:	add    BYTE PTR [rax],al
 1019898:	add    al,0x0
 101989a:	add    BYTE PTR [rax],al
 101989c:	addr32 jp 0x101989f
 101989f:	add    BYTE PTR [rbx],al
 10198a1:	add    BYTE PTR [rax],al
 10198a3:	add    BYTE PTR [rbx+0x7a],bh
 10198a6:	add    BYTE PTR [rax],al
 10198a8:	add    al,BYTE PTR [rax]
 10198aa:	add    BYTE PTR [rax],al
 10198ac:	sub    BYTE PTR [rbx+0x0],bh
 10198af:	add    BYTE PTR [rip+0x44000000],al        # 0x450198b5
 10198b5:	jnp    0x10198b7
 10198b7:	add    BYTE PTR [rdx],al
 10198b9:	add    BYTE PTR [rax],al
 10198bb:	add    BYTE PTR [rsi+0x100007c],dl
 10198c1:	add    BYTE PTR [rax],al
 10198c3:	add    BYTE PTR [rsp+rdi*2-0x10000],ch
 10198ca:	(bad)  
 10198cb:	call   QWORD PTR [rax+0x5f]
 10198ce:	add    DWORD PTR [rax],eax
 10198d0:	add    BYTE PTR [rax],al
 10198d2:	add    BYTE PTR [rax],al
 10198d4:	pop    rbp
 10198d5:	pop    rdi
 10198d6:	add    DWORD PTR [rax],eax
 10198d8:	or     BYTE PTR [rax],al
 10198da:	add    BYTE PTR [rax],al
 10198dc:	add    ah,BYTE PTR [rax+0x1]
 10198df:	add    BYTE PTR [rax],al
 10198e1:	add    BYTE PTR [rax],al
 10198e3:	add    BYTE PTR [rip+0x8000160],ch        # 0x9019a49
 10198e9:	add    BYTE PTR [rax],al
 10198eb:	add    dl,ah
 10198ed:	(bad)  
 10198ee:	add    DWORD PTR [rax],eax
 10198f0:	add    BYTE PTR [rax],al
 10198f2:	add    BYTE PTR [rax],al
 10198f4:	or     eax,0x8000161
 10198f9:	add    BYTE PTR [rax],al
 10198fb:	add    BYTE PTR [rbx+0x161],bh
 1019901:	add    BYTE PTR [rax],al
 1019903:	add    BYTE PTR [rcx],bl
 1019905:	or     al,BYTE PTR [rdx]
 1019907:	add    BYTE PTR [rdx],cl
 1019909:	jb     0x1019911
 101990b:	push   rax
 101990c:	mov    BYTE PTR [rsi],al
 101990e:	add    DWORD PTR [rax],eax
 1019910:	(bad)  
 1019911:	pop    rbp
 1019912:	add    BYTE PTR [rax],al
 1019914:	sbb    DWORD PTR [rdx],ecx
 1019916:	add    al,BYTE PTR [rax]
 1019918:	or     dh,BYTE PTR [rdx+0x6]
 101991b:	push   rax
 101991c:	mov    BYTE PTR [rsi],al
 101991e:	add    DWORD PTR [rax],eax
 1019920:	(bad)  
 1019921:	pop    rbp
 1019922:	add    BYTE PTR [rax],al
 1019924:	sbb    DWORD PTR [rdx],ecx
 1019926:	add    al,BYTE PTR [rax]
 1019928:	or     dh,BYTE PTR [rdx+0x6]
 101992b:	push   rax
 101992c:	mov    BYTE PTR [rsi],al
 101992e:	add    DWORD PTR [rax],eax
 1019930:	(bad)  
 1019931:	pop    rbp
 1019932:	add    BYTE PTR [rax],al
 1019934:	sbb    DWORD PTR [rdx],esi
 1019936:	or     DWORD PTR [rax],eax
 1019938:	adc    eax,0xe005e01
 101993d:	lock or al,0xe0
 1019940:	or     dl,al
 1019942:	or     al,al
 1019944:	(bad)  
 1019945:	jo     0x101994c
 1019947:	(bad)  
 1019948:	add    al,0x30
 101994a:	add    BYTE PTR [rax],al
 101994c:	and    al,0x7
 101994e:	add    DWORD PTR [rax],eax
 1019950:	nop
 1019951:	pop    rbp
 1019952:	add    BYTE PTR [rax],al
 1019954:	jrcxz  0x1019958
 1019956:	add    BYTE PTR [rax],al
 1019958:	(bad)  
 1019959:	(bad)  
 101995a:	(bad)  
 101995b:	push   rax
 101995d:	rex.WRXB add QWORD PTR [r8],r8
 1019960:	add    BYTE PTR [rax],al
 1019962:	add    BYTE PTR [rax],al
 1019964:	add    BYTE PTR [rax+0x1],dl
 1019967:	add    BYTE PTR [rax],al
 1019969:	add    BYTE PTR [rax],al
 101996b:	add    BYTE PTR [rax],dl
 101996d:	push   rax
 101996e:	add    DWORD PTR [rax],eax
 1019970:	add    al,BYTE PTR [rax]
 1019972:	add    BYTE PTR [rax],al
 1019974:	add    BYTE PTR [rax],al
 1019976:	add    BYTE PTR [rax],al
 1019978:	add    eax,DWORD PTR [rax]
 101997a:	add    BYTE PTR [rax],al
 101997c:	and    BYTE PTR [rax+0x1],dl
 101997f:	add    BYTE PTR [rbx],al
 1019981:	add    BYTE PTR [rax],al
 1019983:	add    BYTE PTR [rax],dh
 1019985:	push   rax
 1019986:	add    DWORD PTR [rax],eax
 1019988:	add    eax,DWORD PTR [rax]
 101998a:	add    BYTE PTR [rax],al
 101998c:	rex push rax
 101998e:	add    DWORD PTR [rax],eax
 1019990:	add    al,BYTE PTR [rax]
 1019992:	add    BYTE PTR [rax],al
 1019994:	add    BYTE PTR [rax],al
 1019996:	add    BYTE PTR [rax],al
 1019998:	(bad)  
 1019999:	add    BYTE PTR [rax],al
 101999b:	add    BYTE PTR [rax],dl
 101999d:	push   rcx
 101999e:	add    DWORD PTR [rax],eax
 10199a0:	(bad)  
 10199a1:	add    BYTE PTR [rax],al
 10199a3:	add    al,dh
 10199a5:	push   rcx
 10199a6:	add    DWORD PTR [rax],eax
 10199a8:	(bad)  
 10199a9:	add    BYTE PTR [rax],al
 10199ab:	add    al,dl
 10199ad:	push   rdx
 10199ae:	add    DWORD PTR [rax],eax
 10199b0:	add    eax,DWORD PTR [rax]
 10199b2:	add    BYTE PTR [rax],al
 10199b4:	(bad)  
 10199b5:	add    BYTE PTR [rax],al
 10199b7:	add    BYTE PTR [rdx],cl
 10199b9:	add    BYTE PTR [rax],al
 10199bb:	add    BYTE PTR [rbx],al
 10199bd:	add    BYTE PTR [rax],al
 10199bf:	add    ah,al
 10199c1:	cdq    
 10199c2:	add    DWORD PTR [rax],eax
 10199c4:	add    BYTE PTR [rax],al
 10199c6:	add    BYTE PTR [rax],al
 10199c8:	pop    rax
 10199c9:	mov    cl,0x1
 10199cb:	add    BYTE PTR [rax+0x50000001],bl
 10199d1:	push   rax
 10199d2:	add    DWORD PTR [rax],eax
 10199d4:	push   0x0
 10199d9:	add    BYTE PTR [rax],al
 10199db:	add    BYTE PTR [rax-0x4f],al
 10199de:	add    DWORD PTR [rax],eax
 10199e0:	jo     0x10199e3
 10199e2:	add    BYTE PTR [rax],al
 10199e4:	and    BYTE PTR [rcx+0x1],dl
 10199e7:	add    BYTE PTR [rax+0x0],ch
	...
 10199f6:	add    BYTE PTR [rax],al
 10199f8:	add    BYTE PTR [rdx+0x1],dl
 10199fb:	add    BYTE PTR [rax+0x0],ch
 10199fe:	add    BYTE PTR [rax],al
 1019a00:	rex jno 0x1019a03
 1019a03:	add    bh,bh
 1019a05:	(bad)  
 1019a06:	(bad)  
 1019a07:	inc    DWORD PTR [rsi+0x71]
 1019a0d:	add    BYTE PTR [rax],al
 1019a0f:	add    BYTE PTR [rip+0x2000072],ah        # 0x3019a87
 1019a15:	add    BYTE PTR [rax],al
 1019a17:	add    BYTE PTR [rbx],dh
 1019a19:	jb     0x1019a1b
 1019a1b:	add    BYTE PTR [rbx],al
 1019a1d:	add    BYTE PTR [rax],al
 1019a1f:	add    BYTE PTR [rsi+0x76],al
 1019a22:	add    BYTE PTR [rax],al
 1019a24:	add    al,0x0
 1019a26:	add    BYTE PTR [rax],al
 1019a28:	rex.WRB jbe 0x1019a2b
 1019a2b:	add    BYTE PTR [rbx],al
 1019a2d:	add    BYTE PTR [rax],al
 1019a2f:	add    BYTE PTR [rax],bl
 1019a31:	ja     0x1019a33
 1019a33:	add    BYTE PTR [rip+0x21000000],al        # 0x22019a39
 1019a39:	ja     0x1019a3b
 1019a3b:	add    BYTE PTR [rbx],al
 1019a3d:	add    BYTE PTR [rax],al
 1019a3f:	add    BYTE PTR [rbx+0x6000077],ah
 1019a45:	add    BYTE PTR [rax],al
 1019a47:	add    BYTE PTR [rdx+0x3000077],ch
 1019a4d:	add    BYTE PTR [rax],al
 1019a4f:	add    ah,cl
 1019a51:	ja     0x1019a53
 1019a53:	add    BYTE PTR [rdx],al
 1019a55:	add    BYTE PTR [rax],al
 1019a57:	add    bl,bl
 1019a59:	ja     0x1019a5b
 1019a5b:	add    BYTE PTR [rax],al
 1019a5d:	add    BYTE PTR [rax],al
 1019a5f:	add    BYTE PTR [rbx+0x78],dl
 1019a62:	add    BYTE PTR [rax],al
 1019a64:	(bad)  
 1019a65:	(bad)  
 1019a66:	(bad)  
 1019a67:	call   QWORD PTR [rax+0x50]
 1019a6a:	add    DWORD PTR [rax],eax
 1019a6c:	add    BYTE PTR [rax],al
 1019a6e:	add    BYTE PTR [rax],al
 1019a70:	pop    rbp
 1019a71:	push   rax
 1019a72:	add    DWORD PTR [rax],eax
 1019a74:	(bad)  
 1019a75:	add    BYTE PTR [rax],al
 1019a77:	add    BYTE PTR [rdx],al
 1019a79:	push   rcx
 1019a7a:	add    DWORD PTR [rax],eax
 1019a7c:	add    BYTE PTR [rax],al
 1019a7e:	add    BYTE PTR [rax],al
 1019a80:	sub    eax,0x7000151
 1019a85:	add    BYTE PTR [rax],al
 1019a87:	add    dl,ah
 1019a89:	push   rcx
 1019a8a:	add    DWORD PTR [rax],eax
 1019a8c:	add    BYTE PTR [rax],al
 1019a8e:	add    BYTE PTR [rax],al
 1019a90:	or     eax,0x7000152
 1019a95:	add    BYTE PTR [rax],al
 1019a97:	add    BYTE PTR [rbx+0x152],bh
 1019a9d:	add    BYTE PTR [rax],al
 1019a9f:	add    BYTE PTR [rcx],bl
 1019aa1:	or     al,BYTE PTR [rdx]
 1019aa3:	add    BYTE PTR [rdx],cl
 1019aa5:	xchg   edx,eax
 1019aa6:	(bad)  
 1019aa7:	push   rax
 1019aa8:	mov    BYTE PTR [rsi],al
 1019aaa:	add    DWORD PTR [rax],eax
 1019aac:	nop
 1019aad:	pop    rbp
 1019aae:	add    BYTE PTR [rax],al
 1019ab0:	sbb    DWORD PTR [rdx],ecx
 1019ab2:	add    al,BYTE PTR [rax]
 1019ab4:	or     dl,BYTE PTR [rdx+0x6885006]
 1019aba:	add    DWORD PTR [rax],eax
 1019abc:	nop
 1019abd:	pop    rbp
 1019abe:	add    BYTE PTR [rax],al
 1019ac0:	sbb    DWORD PTR [rdx],ecx
 1019ac2:	add    al,BYTE PTR [rax]
 1019ac4:	or     dl,BYTE PTR [rdx+0x6885006]
 1019aca:	add    DWORD PTR [rax],eax
 1019acc:	nop
 1019acd:	pop    rbp
 1019ace:	add    BYTE PTR [rax],al
 1019ad0:	adc    DWORD PTR [rax],ebx
 1019ad2:	(bad)  
 1019ad3:	add    BYTE PTR [rdi],cl
 1019ad5:	xchg   edx,eax
 1019ad6:	or     esp,eax
 1019ad8:	or     DWORD PTR [rax+0x8],esi
 1019adb:	(bad)  
 1019adc:	(bad)  
 1019add:	push   rax
 1019ade:	(bad)  
 1019adf:	xor    BYTE PTR [rax-0x3ffffefa],cl
 1019ae5:	pop    rbp
 1019ae6:	add    BYTE PTR [rax],al
 1019ae8:	(bad)  
 1019ae9:	(bad)  
 1019aea:	(bad)  
 1019aeb:	push   rax
 1019aed:	add    WORD PTR [rax],ax
 1019af0:	add    BYTE PTR [rax],al
 1019af2:	add    BYTE PTR [rax],al
 1019af4:	add    BYTE PTR [rdi+0x1],ah
 1019af7:	add    BYTE PTR [rax-0xffff91],ah
 1019afd:	(bad)  
 1019afe:	(bad)  
 1019aff:	inc    ecx
 1019b01:	outs   dx,DWORD PTR ds:[rsi]
 1019b02:	add    BYTE PTR [rax],al
 1019b04:	add    BYTE PTR [rax],al
 1019b06:	add    BYTE PTR [rax],al
 1019b08:	leave  
 1019b09:	outs   dx,DWORD PTR ds:[rsi]
 1019b0a:	add    BYTE PTR [rax],al
 1019b0c:	(bad)  
 1019b0d:	(bad)  
 1019b0e:	(bad)  
 1019b0f:	(bad)  
 1019b10:	jmp    FWORD PTR [rdi+0x0]
 1019b13:	add    BYTE PTR [rax],al
 1019b15:	add    BYTE PTR [rax],al
 1019b17:	add    BYTE PTR [rsi],ch
 1019b19:	jo     0x1019b1b
 1019b1b:	add    BYTE PTR [rcx],al
 1019b1d:	add    BYTE PTR [rax],al
 1019b1f:	add    BYTE PTR [rcx+0x70],ah
 1019b25:	add    BYTE PTR [rax],al
 1019b27:	add    BYTE PTR [rax],ch
 1019b29:	jno    0x1019b2b
 1019b2b:	add    bh,bh
 1019b2d:	(bad)  
 1019b2e:	(bad)  
 1019b2f:	call   QWORD PTR [rcx]
 1019b31:	sbb    eax,0x92150006
 1019b36:	adc    eax,esp
 1019b38:	pshufw mm1,QWORD PTR [rsi],0x60
 1019b3c:	or     eax,0x88300c50
 1019b41:	(bad)  
 1019b42:	add    DWORD PTR [rax],eax
 1019b44:	lock pop rbp
 1019b46:	add    BYTE PTR [rax],al
 1019b48:	(bad)  
 1019b49:	(bad)  
 1019b4a:	(bad)  
 1019b4b:	inc    eax
 1019b4d:	add    WORD PTR [rax],ax
 1019b50:	add    BYTE PTR [rax],al
 1019b52:	add    BYTE PTR [rax],al
 1019b54:	shl    BYTE PTR [rsi+0x1],1
 1019b57:	add    BYTE PTR [rax+0x6e],dl
 1019b5a:	add    BYTE PTR [rax],al
 1019b5c:	(bad)  
 1019b5d:	(bad)  
 1019b5e:	(bad)  
 1019b5f:	push   QWORD PTR [rsi+0x6e]
 1019b62:	add    BYTE PTR [rax],al
 1019b64:	add    BYTE PTR [rax],al
 1019b66:	add    BYTE PTR [rax],al
 1019b68:	movabs eax,ds:0x140000000100006e
 1019b71:	outs   dx,DWORD PTR ds:[rsi]
 1019b72:	add    BYTE PTR [rax],al
 1019b74:	add    BYTE PTR [rax],al
 1019b76:	add    BYTE PTR [rax],al
 1019b78:	adc    DWORD PTR [rax],esp
 1019b7a:	or     BYTE PTR [rax],al
 1019b7c:	and    BYTE PTR [rsp+rcx*1+0x0],dl
 1019b80:	sbb    esi,DWORD PTR [rdx+rcx*1]
 1019b83:	add    BYTE PTR [rip+0x7e00952],cl        # 0x8e1a4db
 1019b89:	jo     0x1019b91
 1019b8b:	(bad)  
 1019b8c:	mov    BYTE PTR [rsi],al
 1019b8e:	add    DWORD PTR [rax],eax
 1019b90:	and    BYTE PTR [rsi+0x0],bl
 1019b93:	add    bh,bh
 1019b95:	(bad)  
 1019b96:	(bad)  
 1019b97:	push   QWORD PTR [rax]
 1019b99:	add    DWORD PTR gs:[rax],eax
 1019b9c:	lock ins BYTE PTR es:[rdi],dx
 1019b9e:	add    BYTE PTR [rax],al
 1019ba0:	(bad)  
 1019ba1:	(bad)  
 1019ba2:	(bad)  
 1019ba3:	inc    DWORD PTR [rax+0x6d]
 1019ba9:	add    BYTE PTR [rax],al
 1019bab:	add    BYTE PTR [rbp-0xffff93],al
 1019bb1:	(bad)  
 1019bb2:	(bad)  
 1019bb3:	call   QWORD PTR [rdi+0x6d]
 1019bb9:	add    BYTE PTR [rax],al
 1019bbb:	add    BYTE PTR [rbp+rbp*2-0x10000],bl
 1019bc2:	(bad)  
 1019bc3:	jmp    FWORD PTR [rsi+0x6d]
 1019bc9:	add    BYTE PTR [rax],al
 1019bcb:	add    BYTE PTR [rax-0xffff93],dh
 1019bd1:	(bad)  
 1019bd2:	(bad)  
 1019bd3:	inc    ebx
 1019bd5:	ins    DWORD PTR es:[rdi],dx
 1019bd6:	add    BYTE PTR [rax],al
 1019bd8:	add    BYTE PTR [rax],al
 1019bda:	add    BYTE PTR [rax],al
 1019bdc:	(bad)
 1019bdf:	add    bh,bh
 1019be1:	(bad)  
 1019be2:	(bad)  
 1019be3:	inc    DWORD PTR [rax]
 1019be5:	outs   dx,BYTE PTR ds:[rsi]
 1019be6:	add    BYTE PTR [rax],al
 1019be8:	add    BYTE PTR [rax],al
 1019bea:	add    BYTE PTR [rax],al
 1019bec:	add    ch,BYTE PTR [rsi+0x0]
 1019bef:	add    bh,bh
 1019bf1:	(bad)  
 1019bf2:	(bad)  
 1019bf3:	jmp    FWORD PTR [rdx]
 1019bf5:	outs   dx,BYTE PTR ds:[rsi]
 1019bf6:	add    BYTE PTR [rax],al
 1019bf8:	add    BYTE PTR [rax],al
 1019bfa:	add    BYTE PTR [rax],al
 1019bfc:	add    DWORD PTR [rsi],eax
 1019bfe:	add    al,BYTE PTR [rax]
 1019c00:	(bad)  
 1019c01:	xor    al,BYTE PTR [rdx]
 1019c03:	push   rax
 1019c04:	sbb    DWORD PTR [rsi],esp
 1019c06:	add    al,0x0
 1019c08:	(bad)  
 1019c09:	xor    al,0x15
 1019c0b:	add    BYTE PTR [rbx],cl
 1019c0d:	repnz add al,0x70
 1019c10:	and    al,0x7
 1019c12:	add    DWORD PTR [rax],eax
 1019c14:	push   rax
 1019c15:	pop    rsi
 1019c16:	add    BYTE PTR [rax],al
 1019c18:	jp     0x1019c1a
 1019c1a:	add    BYTE PTR [rax],al
 1019c1c:	(bad)  
 1019c1d:	(bad)  
 1019c1e:	(bad)  
 1019c1f:	inc    DWORD PTR [rax]
 1019c21:	add    DWORD PTR gs:[rax],eax
 1019c24:	push   rax
 1019c25:	ins    BYTE PTR es:[rdi],dx
 1019c26:	add    BYTE PTR [rax],al
 1019c28:	(bad)  
 1019c29:	(bad)  
 1019c2a:	(bad)  
 1019c2b:	push   QWORD PTR [rcx+0x6c]
 1019c31:	add    BYTE PTR [rax],al
 1019c33:	add    BYTE PTR [rcx],al
 1019c35:	(bad)  
 1019c36:	add    al,BYTE PTR [rax]
 1019c38:	(bad)  
 1019c39:	xor    al,BYTE PTR [rdx]
 1019c3b:	push   rax
 1019c3c:	sbb    DWORD PTR [rsi],esp
 1019c3e:	add    al,0x0
 1019c40:	(bad)  
 1019c41:	xor    al,0x15
 1019c43:	add    BYTE PTR [rbx],cl
 1019c45:	repnz add al,0x70
 1019c48:	and    al,0x7
 1019c4a:	add    DWORD PTR [rax],eax
 1019c4c:	sbb    BYTE PTR [rsi+0x0],0x0
 1019c50:	jp     0x1019c52
 1019c52:	add    BYTE PTR [rax],al
 1019c54:	(bad)  
 1019c55:	(bad)  
 1019c56:	(bad)  
 1019c57:	call   rax
 1019c59:	add    DWORD PTR fs:[rax],eax
 1019c5c:	mov    al,0x6b
 1019c5e:	add    BYTE PTR [rax],al
 1019c60:	(bad)  
 1019c61:	(bad)  
 1019c62:	(bad)  
 1019c63:	call   QWORD PTR [rcx]
 1019c65:	ins    BYTE PTR es:[rdi],dx
 1019c66:	add    BYTE PTR [rax],al
 1019c68:	add    BYTE PTR [rax],al
 1019c6a:	add    BYTE PTR [rax],al
 1019c6c:	add    DWORD PTR [rsi],eax
 1019c6e:	add    al,BYTE PTR [rax]
 1019c70:	(bad)  
 1019c71:	xor    al,BYTE PTR [rdx]
 1019c73:	push   rax
 1019c74:	add    DWORD PTR [rax],edx
 1019c76:	add    eax,DWORD PTR [rax]
 1019c78:	adc    BYTE PTR [rdx+0xc],al
 1019c7b:	(bad)  
 1019c7c:	or     esi,DWORD PTR [rax]
 1019c7e:	add    BYTE PTR [rax],al
 1019c80:	and    DWORD PTR [rip+0x74050002],eax        # 0x75069c88
 1019c86:	add    al,0x0
 1019c88:	mov    al,0x6a
 1019c8a:	add    BYTE PTR [rax],al
 1019c8c:	fisubr WORD PTR [rdx+0x0]
 1019c8f:	add    BYTE PTR [rsp+rbx*4+0x1],dh
 1019c93:	add    BYTE PTR [rcx],ah
 1019c95:	add    BYTE PTR [rdx],al
 1019c97:	add    BYTE PTR [rax],al
 1019c99:	je     0x1019c9f
 1019c9b:	add    BYTE PTR [rax-0x21ffff96],dh
 1019ca1:	push   0x0
 1019ca3:	add    BYTE PTR [rsp+rbx*4+0x1],dh
 1019ca7:	add    BYTE PTR [rcx],ah
 1019ca9:	add    BYTE PTR [rax],al
 1019cab:	add    BYTE PTR [rax-0x21ffff96],dh
 1019cb1:	push   0x0
 1019cb3:	add    BYTE PTR [rsp+rbx*4+0x1],dh
	...
 1019cc3:	add    al,bl
 1019cc5:	pushf  
 1019cc6:	add    DWORD PTR [rax],eax
	...
 1019cd8:	add    DWORD PTR [rax],eax
 1019cda:	add    BYTE PTR [rax],al
 1019cdc:	call   0x1019e7d
 1019ce1:	add    BYTE PTR [rax],al
 1019ce3:	add    BYTE PTR [rax],al
 1019ce5:	add    BYTE PTR [rax],al
 1019ce7:	add    BYTE PTR [rcx],al
 1019ce9:	add    BYTE PTR [rax],al
 1019ceb:	add    BYTE PTR [rax-0x4f],al
 1019cee:	add    DWORD PTR [rax],eax
 1019cf0:	add    BYTE PTR [rax],al
 1019cf2:	add    BYTE PTR [rax],al
 1019cf4:	(bad)  
 1019cf5:	(bad)  
 1019cf6:	(bad)  
 1019cf7:	inc    DWORD PTR [rax]
 1019cf9:	add    BYTE PTR [rax],al
 1019cfb:	add    BYTE PTR [rax+rax*1],al
	...
 1019d0e:	add    BYTE PTR [rax],al
 1019d10:	add    DWORD PTR [rax],eax
 1019d12:	add    BYTE PTR [rax],al
 1019d14:	and    BYTE PTR [rbp+0x1],bl
 1019d1a:	add    BYTE PTR [rax],al
 1019d1c:	add    BYTE PTR [rax],al
 1019d1e:	add    BYTE PTR [rax],al
 1019d20:	add    DWORD PTR [rax],eax
 1019d22:	add    BYTE PTR [rax],al
 1019d24:	pop    rax
 1019d25:	mov    cl,0x1
 1019d27:	add    BYTE PTR [rax],al
 1019d29:	add    BYTE PTR [rax],al
 1019d2b:	add    bh,bh
 1019d2d:	(bad)  
 1019d2e:	(bad)  
 1019d2f:	inc    DWORD PTR [rax]
 1019d31:	add    BYTE PTR [rax],al
 1019d33:	add    BYTE PTR [rax+rax*1],al
	...
 1019d52:	add    BYTE PTR [rax],al
 1019d54:	adc    BYTE PTR [rbp+0x1],bl
	...
 1019d66:	add    BYTE PTR [rax],al
 1019d68:	clc    
 1019d69:	popf   
 1019d6a:	add    DWORD PTR [rax],eax
	...
 1019d74:	retf   0x1a2
 1019d77:	add    BYTE PTR [rax],al
 1019d79:	adc    BYTE PTR [rax],al
 1019d7b:	add    BYTE PTR [rax+0x19e],dh
 1019d81:	add    BYTE PTR [rax],al
 1019d83:	add    BYTE PTR [rax],al
 1019d85:	add    BYTE PTR [rax],al
 1019d87:	add    ah,bl
 1019d89:	movabs ds:0xa090000010b80001,eax
 1019d92:	add    DWORD PTR [rax],eax
	...
 1019d9c:	rex.WX movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
 1019d9e:	add    DWORD PTR [rax],eax
 1019da0:	cwde   
 1019da1:	adc    al,BYTE PTR [rax]
 1019da3:	add    BYTE PTR [rax],cl
 1019da5:	movabs ds:0x1,al
 1019dae:	add    BYTE PTR [rax],al
 1019db0:	rex cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1019db2:	add    DWORD PTR [rax],eax
 1019db4:	adc    BYTE PTR [rax+rax*1],dl
 1019db7:	add    al,bl
 1019db9:	movabs eax,ds:0x1
 1019dc2:	add    BYTE PTR [rax],al
 1019dc4:	rex.WX cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1019dc6:	add    DWORD PTR [rax],eax
 1019dc8:	loopne 0x1019ddd
 1019dca:	add    BYTE PTR [rax],al
 1019dcc:	call   0x1019f72
 1019dd1:	add    BYTE PTR [rax],al
 1019dd3:	add    BYTE PTR [rax],al
 1019dd5:	add    BYTE PTR [rax],al
 1019dd7:	add    BYTE PTR [rax-0xffffe5a],bl
 1019ddd:	adc    eax,DWORD PTR [rax]
	...
 1019df7:	add    BYTE PTR [rax],bh
 1019df9:	movabs ds:0xa250000000000001,al
 1019e02:	add    DWORD PTR [rax],eax
 1019e04:	add    BYTE PTR [rax],al
 1019e06:	add    BYTE PTR [rax],al
 1019e08:	(bad)  
 1019e09:	movabs ds:0xa278000000000001,al
 1019e12:	add    DWORD PTR [rax],eax
 1019e14:	add    BYTE PTR [rax],al
 1019e16:	add    BYTE PTR [rax],al
 1019e18:	xchg   esi,eax
 1019e19:	movabs ds:0xa2b6000000000001,al
 1019e22:	add    DWORD PTR [rax],eax
 1019e24:	add    BYTE PTR [rax],al
 1019e26:	add    BYTE PTR [rax],al
 1019e28:	(bad)  
 1019e29:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1019e2a:	add    DWORD PTR [rax],eax
 1019e2c:	add    BYTE PTR [rax],al
 1019e2e:	add    BYTE PTR [rax],al
 1019e30:	mov    al,0xa7
 1019e32:	add    DWORD PTR [rax],eax
 1019e34:	add    BYTE PTR [rax],al
 1019e36:	add    BYTE PTR [rax],al
 1019e38:	xchg   edx,eax
 1019e39:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1019e3a:	add    DWORD PTR [rax],eax
 1019e3c:	add    BYTE PTR [rax],al
 1019e3e:	add    BYTE PTR [rax],al
 1019e40:	jbe    0x1019de9
 1019e42:	add    DWORD PTR [rax],eax
 1019e44:	add    BYTE PTR [rax],al
 1019e46:	add    BYTE PTR [rax],al
 1019e48:	push   rsi
 1019e49:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1019e4a:	add    DWORD PTR [rax],eax
 1019e4c:	add    BYTE PTR [rax],al
 1019e4e:	add    BYTE PTR [rax],al
 1019e50:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1019e52:	add    DWORD PTR [rax],eax
 1019e54:	add    BYTE PTR [rax],al
 1019e56:	add    BYTE PTR [rax],al
 1019e58:	cmps   DWORD PTR es:[rsi],DWORD PTR es:[rdi]
 1019e5a:	add    DWORD PTR [rax],eax
 1019e5c:	add    BYTE PTR [rax],al
 1019e5e:	add    BYTE PTR [rax],al
 1019e60:	sbb    al,0xa7
 1019e62:	add    DWORD PTR [rax],eax
 1019e64:	add    BYTE PTR [rax],al
 1019e66:	add    BYTE PTR [rax],al
 1019e68:	adc    ah,BYTE PTR [rdi+0x1]
 1019e6e:	add    BYTE PTR [rax],al
 1019e70:	(bad)  
 1019e71:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1019e72:	add    DWORD PTR [rax],eax
 1019e74:	add    BYTE PTR [rax],al
 1019e76:	add    BYTE PTR [rax],al
 1019e78:	out    dx,al
 1019e79:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1019e7a:	add    DWORD PTR [rax],eax
 1019e7c:	add    BYTE PTR [rax],al
 1019e7e:	add    BYTE PTR [rax],al
 1019e80:	in     al,0xa6
 1019e82:	add    DWORD PTR [rax],eax
 1019e84:	add    BYTE PTR [rax],al
 1019e86:	add    BYTE PTR [rax],al
 1019e88:	(bad)  
 1019e89:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1019e8a:	add    DWORD PTR [rax],eax
 1019e8c:	add    BYTE PTR [rax],al
 1019e8e:	add    BYTE PTR [rax],al
 1019e90:	shl    BYTE PTR [rsi+0x1],0x0
 1019e97:	add    BYTE PTR [rax+0x1a6],dh
 1019e9d:	add    BYTE PTR [rax],al
 1019e9f:	add    BYTE PTR [rdx+0x1a6],ah
	...
 1019ead:	add    BYTE PTR [rax],al
 1019eaf:	add    BYTE PTR [rbx+rbp*4+0x1],ch
 1019eb3:	add    BYTE PTR [rax],al
 1019eb5:	add    BYTE PTR [rax],al
 1019eb7:	add    BYTE PTR [rdx-0x55],bl
 1019eba:	add    DWORD PTR [rax],eax
 1019ebc:	add    BYTE PTR [rax],al
 1019ebe:	add    BYTE PTR [rax],al
 1019ec0:	stos   QWORD PTR es:[rdi],rax
 1019ec2:	add    DWORD PTR [rax],eax
 1019ec4:	add    BYTE PTR [rax],al
 1019ec6:	add    BYTE PTR [rax],al
 1019ec8:	xor    ch,BYTE PTR [rbx+0x1]
 1019ece:	add    BYTE PTR [rax],al
 1019ed0:	and    ch,BYTE PTR [rbx+0x1]
 1019ed6:	add    BYTE PTR [rax],al
 1019ed8:	or     ch,BYTE PTR [rbx+0x1]
 1019ede:	add    BYTE PTR [rax],al
 1019ee0:	hlt    
 1019ee1:	stos   BYTE PTR es:[rdi],al
 1019ee2:	add    DWORD PTR [rax],eax
 1019ee4:	add    BYTE PTR [rax],al
 1019ee6:	add    BYTE PTR [rax],al
 1019ee8:	sub    BYTE PTR [rbx+0x1],0x0
 1019eef:	add    al,dl
 1019ef1:	stos   BYTE PTR es:[rdi],al
 1019ef2:	add    DWORD PTR [rax],eax
 1019ef4:	add    BYTE PTR [rax],al
 1019ef6:	add    BYTE PTR [rax],al
 1019ef8:	ret    0x1aa
 1019efb:	add    BYTE PTR [rax],al
 1019efd:	add    BYTE PTR [rax],al
 1019eff:	add    BYTE PTR [rdx+0x1aa],dh
 1019f05:	add    BYTE PTR [rax],al
 1019f07:	add    BYTE PTR [rdx+0x1aa],ah
 1019f0d:	add    BYTE PTR [rax],al
 1019f0f:	add    BYTE PTR [rsi+0x1aa],dl
 1019f15:	add    BYTE PTR [rax],al
 1019f17:	add    BYTE PTR [rdx+0x1aa],cl
 1019f1d:	add    BYTE PTR [rax],al
 1019f1f:	add    BYTE PTR [rdx+rbp*4+0x1],bh
 1019f23:	add    BYTE PTR [rax],al
 1019f25:	add    BYTE PTR [rax],al
 1019f27:	add    ah,ah
 1019f29:	stos   BYTE PTR es:[rdi],al
 1019f2a:	add    DWORD PTR [rax],eax
 1019f2c:	add    BYTE PTR [rax],al
 1019f2e:	add    BYTE PTR [rax],al
 1019f30:	(bad)  
 1019f31:	test   eax,0x1
 1019f36:	add    BYTE PTR [rax],al
 1019f38:	(bad)  
 1019f39:	test   eax,0x1
 1019f3e:	add    BYTE PTR [rax],al
 1019f40:	retf   0x1a9
 1019f43:	add    BYTE PTR [rax],al
 1019f45:	add    BYTE PTR [rax],al
 1019f47:	add    BYTE PTR [rcx+rbp*4+0x1],bh
 1019f4e:	add    BYTE PTR [rax],al
 1019f50:	scas   al,BYTE PTR es:[rdi]
 1019f51:	test   eax,0x1
 1019f56:	add    BYTE PTR [rax],al
 1019f58:	cwde   
 1019f59:	test   eax,0x1
 1019f5e:	add    BYTE PTR [rax],al
 1019f60:	mov    BYTE PTR [rcx+0x1],ch
 1019f66:	add    BYTE PTR [rax],al
 1019f68:	je     0x1019f13
 1019f6a:	add    DWORD PTR [rax],eax
 1019f6c:	add    BYTE PTR [rax],al
 1019f6e:	add    BYTE PTR [rax],al
 1019f70:	(bad)  
 1019f71:	test   eax,0x1
 1019f76:	add    BYTE PTR [rax],al
 1019f78:	push   rsp
 1019f79:	test   eax,0x1
 1019f7e:	add    BYTE PTR [rax],al
 1019f80:	rex.R test eax,0x1
 1019f86:	add    BYTE PTR [rax],al
 1019f88:	xor    al,0xa9
 1019f8a:	add    DWORD PTR [rax],eax
 1019f8c:	add    BYTE PTR [rax],al
 1019f8e:	add    BYTE PTR [rax],al
 1019f90:	es test eax,0x1
 1019f96:	add    BYTE PTR [rax],al
 1019f98:	(bad)  
 1019f99:	test   eax,0x1
 1019f9e:	add    BYTE PTR [rax],al
 1019fa0:	imul   BYTE PTR [rax+0x1]
 1019fa6:	add    BYTE PTR [rax],al
 1019fa8:	fisubr DWORD PTR [rax+0x1]
 1019fae:	add    BYTE PTR [rax],al
 1019fb0:	shr    BYTE PTR [rax+0x1],0x0
 1019fb7:	add    BYTE PTR [rdx+0x1a8],ch
 1019fbd:	add    BYTE PTR [rax],al
 1019fbf:	add    BYTE PTR [rdx+0x1a8],bl
 1019fc5:	add    BYTE PTR [rax],al
 1019fc7:	add    BYTE PTR [rax+0x1a8],al
 1019fcd:	add    BYTE PTR [rax],al
 1019fcf:	add    BYTE PTR [rax-0x58],dh
 1019fd2:	add    DWORD PTR [rax],eax
 1019fd4:	add    BYTE PTR [rax],al
 1019fd6:	add    BYTE PTR [rax],al
 1019fd8:	pop    rsp
 1019fd9:	test   al,0x1
 1019fdb:	add    BYTE PTR [rax],al
 1019fdd:	add    BYTE PTR [rax],al
 1019fdf:	add    BYTE PTR [rsi],bh
 1019fe1:	test   al,0x1
 1019fe3:	add    BYTE PTR [rax],al
 1019fe5:	add    BYTE PTR [rax],al
 1019fe7:	add    BYTE PTR [rdx],ah
 1019fe9:	test   al,0x1
 1019feb:	add    BYTE PTR [rax],al
 1019fed:	add    BYTE PTR [rax],al
 1019fef:	add    BYTE PTR [rsi],cl
 1019ff1:	test   al,0x1
 1019ff3:	add    BYTE PTR [rax],al
 1019ff5:	add    BYTE PTR [rax],al
 1019ff7:	add    dl,bh
 1019ff9:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1019ffa:	add    DWORD PTR [rax],eax
 1019ffc:	add    BYTE PTR [rax],al
 1019ffe:	add    BYTE PTR [rax],al
 101a000:	(bad)  
 101a001:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 101a002:	add    DWORD PTR [rax],eax
 101a004:	add    BYTE PTR [rax],al
 101a006:	add    BYTE PTR [rax],al
 101a008:	loop   0x1019fb1
 101a00a:	add    DWORD PTR [rax],eax
 101a00c:	add    BYTE PTR [rax],al
 101a00e:	add    BYTE PTR [rax],al
 101a010:	fsub   DWORD PTR [rdx+0x1]
 101a016:	add    BYTE PTR [rax],al
 101a018:	in     al,dx
 101a019:	movabs ds:0xa3ca000000000001,al
 101a022:	add    DWORD PTR [rax],eax
 101a024:	add    BYTE PTR [rax],al
 101a026:	add    BYTE PTR [rax],al
 101a028:	mov    esi,0x1a3
 101a02d:	add    BYTE PTR [rax],al
 101a02f:	add    BYTE PTR [rsi+0x1a3],ch
 101a035:	add    BYTE PTR [rax],al
 101a037:	add    BYTE PTR [rax+0x1a3],ah
 101a03d:	add    BYTE PTR [rax],al
 101a03f:	add    BYTE PTR [rdx+0x1a3],dl
 101a045:	add    BYTE PTR [rax],al
 101a047:	add    BYTE PTR [rbx+riz*4+0x1],bh
 101a04b:	add    BYTE PTR [rax],al
 101a04d:	add    BYTE PTR [rax],al
 101a04f:	add    BYTE PTR [rsi-0x5d],ah
 101a052:	add    DWORD PTR [rax],eax
 101a054:	add    BYTE PTR [rax],al
 101a056:	add    BYTE PTR [rax],al
 101a058:	push   rsi
 101a059:	movabs ds:0xa346000000000001,eax
 101a062:	add    DWORD PTR [rax],eax
 101a064:	add    BYTE PTR [rax],al
 101a066:	add    BYTE PTR [rax],al
 101a068:	cmp    BYTE PTR [rbx+0x1],ah
 101a06e:	add    BYTE PTR [rax],al
 101a070:	sub    BYTE PTR [rbx+0x1],ah
 101a076:	add    BYTE PTR [rax],al
 101a078:	adc    BYTE PTR [rbx+0x1],ah
 101a07e:	add    BYTE PTR [rax],al
 101a080:	(bad)  
 101a081:	movabs ds:0x1,al
 101a08a:	add    BYTE PTR [rax],al
 101a08c:	add    BYTE PTR [rax],al
 101a08e:	add    BYTE PTR [rax],al
 101a090:	(bad)  
 101a091:	movabs ds:0xa3fa000000000001,eax
 101a09a:	add    DWORD PTR [rax],eax
 101a09c:	add    BYTE PTR [rax],al
 101a09e:	add    BYTE PTR [rax],al
 101a0a0:	add    ah,BYTE PTR [rcx+rax*1+0x0]
 101a0a7:	add    BYTE PTR [rax],dl
 101a0a9:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101a0aa:	add    DWORD PTR [rax],eax
 101a0ac:	add    BYTE PTR [rax],al
 101a0ae:	add    BYTE PTR [rax],al
 101a0b0:	push   rsp
 101a0b1:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101a0b2:	add    DWORD PTR [rax],eax
 101a0b4:	add    BYTE PTR [rax],al
 101a0b6:	add    BYTE PTR [rax],al
 101a0b8:	pop    rsi
 101a0b9:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101a0ba:	add    DWORD PTR [rax],eax
 101a0bc:	add    BYTE PTR [rax],al
 101a0be:	add    BYTE PTR [rax],al
 101a0c0:	push   0x1a4
 101a0c5:	add    BYTE PTR [rax],al
 101a0c7:	add    BYTE PTR [rsp+riz*4+0x1],dh
 101a0cb:	add    BYTE PTR [rax],al
 101a0cd:	add    BYTE PTR [rax],al
 101a0cf:	add    BYTE PTR [rdx+0x1a4],al
 101a0d5:	add    BYTE PTR [rax],al
 101a0d7:	add    BYTE PTR [rdx+0x1a4],dl
 101a0dd:	add    BYTE PTR [rax],al
 101a0df:	add    BYTE PTR [rdx+0x1a4],ch
 101a0e5:	add    BYTE PTR [rax],al
 101a0e7:	add    BYTE PTR [rax+0x1a4],bh
 101a0ed:	add    BYTE PTR [rax],al
 101a0ef:	add    al,al
 101a0f1:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101a0f2:	add    DWORD PTR [rax],eax
 101a0f4:	add    BYTE PTR [rax],al
 101a0f6:	add    BYTE PTR [rax],al
 101a0f8:	retf   0x1a4
 101a0fb:	add    BYTE PTR [rax],al
 101a0fd:	add    BYTE PTR [rax],al
 101a0ff:	add    dl,dl
 101a101:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101a102:	add    DWORD PTR [rax],eax
 101a104:	add    BYTE PTR [rax],al
 101a106:	add    BYTE PTR [rax],al
 101a108:	fisub  WORD PTR [rcx+rax*1+0x0]
 101a10f:	add    dl,ch
 101a111:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101a112:	add    DWORD PTR [rax],eax
 101a114:	add    BYTE PTR [rax],al
 101a116:	add    BYTE PTR [rax],al
 101a118:	clc    
 101a119:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101a11a:	add    DWORD PTR [rax],eax
 101a11c:	add    BYTE PTR [rax],al
 101a11e:	add    BYTE PTR [rax],al
 101a120:	(bad)  
 101a121:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101a122:	add    DWORD PTR [rax],eax
 101a124:	add    BYTE PTR [rax],al
 101a126:	add    BYTE PTR [rax],al
 101a128:	and    ah,BYTE PTR [rbp+0x1]
 101a12e:	add    BYTE PTR [rax],al
 101a130:	movs   DWORD PTR es:[rdi],DWORD PTR cs:[rsi]
 101a132:	add    DWORD PTR [rax],eax
 101a134:	add    BYTE PTR [rax],al
 101a136:	add    BYTE PTR [rax],al
 101a138:	cmp    BYTE PTR [rbp+0x1],ah
 101a13e:	add    BYTE PTR [rax],al
 101a140:	pop    rax
 101a141:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101a142:	add    DWORD PTR [rax],eax
 101a144:	add    BYTE PTR [rax],al
 101a146:	add    BYTE PTR [rax],al
 101a148:	outs   dx,BYTE PTR ds:[rsi]
 101a149:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101a14a:	add    DWORD PTR [rax],eax
 101a14c:	add    BYTE PTR [rax],al
 101a14e:	add    BYTE PTR [rax],al
 101a150:	(bad)  
 101a151:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101a152:	add    DWORD PTR [rax],eax
 101a154:	add    BYTE PTR [rax],al
 101a156:	add    BYTE PTR [rax],al
 101a158:	mov    WORD PTR [rbp+0x1],fs
 101a15e:	add    BYTE PTR [rax],al
 101a160:	(bad)  
 101a161:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101a162:	add    DWORD PTR [rax],eax
 101a164:	add    BYTE PTR [rax],al
 101a166:	add    BYTE PTR [rax],al
 101a168:	movabs ds:0xac000000000001a5,al
 101a171:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101a172:	add    DWORD PTR [rax],eax
 101a174:	add    BYTE PTR [rax],al
 101a176:	add    BYTE PTR [rax],al
 101a178:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101a179:	stos   DWORD PTR es:[rdi],eax
 101a17a:	add    DWORD PTR [rax],eax
 101a17c:	add    BYTE PTR [rax],al
 101a17e:	add    BYTE PTR [rax],al
 101a180:	(bad)  
 101a181:	test   eax,0x1
 101a186:	add    BYTE PTR [rax],al
 101a188:	(bad)  
 101a189:	stos   BYTE PTR es:[rdi],al
 101a18a:	add    DWORD PTR [rax],eax
 101a18c:	add    BYTE PTR [rax],al
 101a18e:	add    BYTE PTR [rax],al
 101a190:	sbb    BYTE PTR [rdx+0x1],ch
 101a196:	add    BYTE PTR [rax],al
 101a198:	cs stos BYTE PTR es:[rdi],al
 101a19a:	add    DWORD PTR [rax],eax
 101a19c:	add    BYTE PTR [rax],al
 101a19e:	add    BYTE PTR [rax],al
 101a1a0:	rex.R stos BYTE PTR es:[rdi],al
 101a1a2:	add    DWORD PTR [rax],eax
 101a1a4:	add    BYTE PTR [rax],al
 101a1a6:	add    BYTE PTR [rax],al
 101a1a8:	rex.WRX stos BYTE PTR es:[rdi],al
 101a1aa:	add    DWORD PTR [rax],eax
 101a1ac:	add    BYTE PTR [rax],al
 101a1ae:	add    BYTE PTR [rax],al
 101a1b0:	pop    rdx
 101a1b1:	stos   BYTE PTR es:[rdi],al
 101a1b2:	add    DWORD PTR [rax],eax
 101a1b4:	add    BYTE PTR [rax],al
 101a1b6:	add    BYTE PTR [rax],al
 101a1b8:	fs stos BYTE PTR es:[rdi],al
 101a1ba:	add    DWORD PTR [rax],eax
 101a1bc:	add    BYTE PTR [rax],al
 101a1be:	add    BYTE PTR [rax],al
 101a1c0:	xchg   esp,eax
 101a1c1:	stos   DWORD PTR es:[rdi],eax
 101a1c2:	add    DWORD PTR [rax],eax
 101a1c4:	add    BYTE PTR [rax],al
 101a1c6:	add    BYTE PTR [rax],al
 101a1c8:	mov    ah,0xab
 101a1ca:	add    DWORD PTR [rax],eax
	...
 101a1d8:	outs   dx,BYTE PTR ds:[rsi]
 101a1d9:	stos   BYTE PTR es:[rdi],al
 101a1da:	add    DWORD PTR [rax],eax
	...
 101a1e8:	push   rsi
 101a1e9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 101a1ea:	add    DWORD PTR [rax],eax
 101a1ec:	add    BYTE PTR [rax],al
 101a1ee:	add    BYTE PTR [rax],al
 101a1f0:	test   BYTE PTR [rsi+0x1],ah
 101a1f6:	add    BYTE PTR [rax],al
 101a1f8:	push   0xffffffffffffffa6
 101a1fa:	add    DWORD PTR [rax],eax
	...
 101a208:	cmps   BYTE PTR cs:[rsi],BYTE PTR es:[rdi]
 101a20a:	add    DWORD PTR [rax],eax
 101a20c:	add    BYTE PTR [rax],al
 101a20e:	add    BYTE PTR [rax],al
 101a210:	(bad)  
 101a211:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 101a212:	add    DWORD PTR [rax],eax
 101a214:	add    BYTE PTR [rax],al
 101a216:	add    BYTE PTR [rax],al
 101a218:	add    al,0xa6
 101a21a:	add    DWORD PTR [rax],eax
 101a21c:	add    BYTE PTR [rax],al
 101a21e:	add    BYTE PTR [rax],al
 101a220:	repnz movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101a222:	add    DWORD PTR [rax],eax
 101a224:	add    BYTE PTR [rax],al
 101a226:	add    BYTE PTR [rax],al
 101a228:	loop   0x101a1cf
 101a22a:	add    DWORD PTR [rax],eax
	...
 101a238:	add    DWORD PTR [rdx],0x52
 101a23b:	imul   esi,DWORD PTR gs:[ebx+0x74],0x76457265
 101a244:	outs   dx,BYTE PTR gs:[rsi]
 101a246:	je     0x101a29b
 101a248:	outs   dx,DWORD PTR ds:[rsi]
 101a249:	jne    0x101a2bd
 101a24b:	movsxd esp,DWORD PTR [rbp+0x57]
 101a24e:	add    BYTE PTR [rax],al
 101a250:	pop    QWORD PTR [rdx]
 101a252:	push   rdx
 101a253:	gs jo  0x101a2c5
 101a256:	jb     0x101a2cc
 101a258:	rex.RB jbe 0x101a2c0
 101a25b:	outs   dx,BYTE PTR ds:[rsi]
 101a25c:	je     0x101a2b5
 101a25e:	add    BYTE PTR [rax],al
 101a260:	fild   DWORD PTR [rax]
 101a262:	rex.R
 101a263:	gs jb  0x101a2cb
 101a266:	imul   esi,DWORD PTR [ebx+0x74],0x76457265
 101a26e:	outs   dx,BYTE PTR gs:[rsi]
 101a270:	je     0x101a2c5
 101a272:	outs   dx,DWORD PTR ds:[rsi]
 101a273:	jne    0x101a2e7
 101a275:	movsxd esp,DWORD PTR [rbp+0x0]
 101a278:	enter  0x5302,0x74
 101a27c:	(bad)  
 101a27d:	jb     0x101a2f3
 101a27f:	push   rbx
 101a280:	gs jb  0x101a2f9
 101a283:	imul   esp,DWORD PTR [rbx+0x65],0x6c727443
 101a28a:	imul   r14d,DWORD PTR [rbx+0x70],0x68637461
 101a292:	gs jb  0x101a2ec
 101a295:	add    BYTE PTR [rdi+0x67655202],al
 101a29b:	imul   esi,DWORD PTR [rbx+0x74],0x65537265
 101a2a2:	jb     0x101a31a
 101a2a4:	imul   esp,DWORD PTR [rbx+0x65],0x6c727443
 101a2ab:	rex.W (bad) 
 101a2ad:	outs   dx,BYTE PTR ds:[rsi]
 101a2ae:	fs ins BYTE PTR es:[rdi],dx
 101a2b0:	gs jb  0x101a2f8
 101a2b3:	js     0x101a30c
 101a2b5:	add    al,al
 101a2b7:	add    dl,BYTE PTR [rbx+0x65]
 101a2ba:	je     0x101a30f
 101a2bc:	gs jb  0x101a335
 101a2bf:	imul   esp,DWORD PTR [rbx+0x65],0x74617453
 101a2c6:	jne    0x101a33b
 101a2c8:	add    BYTE PTR [rax],al
 101a2ca:	rex.B
 101a2cb:	rex.R push rsi
 101a2cd:	push   r8
 101a2cf:	xor    rsi,QWORD PTR [r10]
 101a2d2:	cs fs ins BYTE PTR es:[rdi],dx
 101a2d5:	ins    BYTE PTR es:[rdi],dx
 101a2d6:	add    BYTE PTR [rax],al
 101a2d8:	(bad)  
 101a2d9:	add    al,BYTE PTR [rdi+0x65]
 101a2dc:	je     0x101a32b
 101a2de:	outs   dx,DWORD PTR ds:[rsi]
 101a2df:	fs jne 0x101a34e
 101a2e2:	gs rex.W (bad) 
 101a2e5:	outs   dx,BYTE PTR ds:[rsi]
 101a2e6:	fs ins BYTE PTR es:[rdi],dx
 101a2e8:	gs push rdi
 101a2ea:	add    BYTE PTR [rax],al
 101a2ec:	mov    ah,0x3
 101a2ee:	push   rdx
 101a2ef:	(bad)  
 101a2f0:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 101a2f7:	jo     0x101a36d
 101a2f9:	imul   ebp,DWORD PTR [rdi+0x6e],0x24c0000
 101a300:	rex.RXB
 101a301:	gs je  0x101a354
 101a304:	jb     0x101a375
 101a306:	movsxd eax,DWORD PTR [rcx+0x64]
 101a309:	fs jb  0x101a371
 101a30c:	jae    0x101a381
 101a30e:	add    BYTE PTR [rax],al
 101a310:	rol    BYTE PTR [rax],cl
 101a312:	rex.R
 101a313:	gs ins BYTE PTR es:[rdi],dx
 101a315:	gs je  0x101a37d
 101a318:	rex.XB jb 0x101a384
 101a31b:	je     0x101a386
 101a31d:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a320:	push   rbx
 101a321:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 101a326:	outs   dx,BYTE PTR ds:[rsi]
 101a327:	add    BYTE PTR [rax],cl
 101a329:	add    al,BYTE PTR [rdi+0x65]
 101a32c:	je     0x101a37a
 101a32e:	(bad)  
 101a32f:	jae    0x101a3a5
 101a331:	rex.RB jb 0x101a3a6
 101a334:	outs   dx,DWORD PTR ds:[rsi]
 101a335:	jb     0x101a337
 101a337:	add    BYTE PTR [rax+0x1],ch
 101a33a:	rex.RX jb 0x101a3a2
 101a33d:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 101a346:	add    ecx,DWORD PTR [r15+rbp*2+0x61]
 101a34b:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 101a354:	add    BYTE PTR [rax],al
 101a356:	lods   al,BYTE PTR ds:[rsi]
 101a357:	add    al,BYTE PTR [rdi+0x65]
 101a35a:	je     0x101a3b2
 101a35c:	gs jb  0x101a3d2
 101a35f:	imul   ebp,DWORD PTR [rdi+0x6e],0x577845
 101a366:	or     BYTE PTR [rip+0x74696157],al        # 0x756b04c3
 101a36c:	rex.RX outs dx,DWORD PTR ds:[rsi]
 101a36e:	jb     0x101a3c3
 101a370:	imul   ebp,DWORD PTR [rsi+0x67],0x624f656c
 101a377:	push   0x65
 101a379:	movsxd esi,DWORD PTR [rax+rax*1-0x35]
 101a37d:	add    DWORD PTR [rdi+0x65],eax
 101a380:	je     0x101a3c5
 101a382:	jne    0x101a3f6
 101a384:	jb     0x101a3eb
 101a386:	outs   dx,BYTE PTR ds:[rsi]
 101a387:	je     0x101a3dd
 101a389:	push   0x64616572
 101a38e:	rex.WB
 101a38f:	add    BYTE PTR fs:[rax],al
 101a392:	xchg   DWORD PTR [rbx],eax
 101a394:	rex.WRXB jo 0x101a3fc
 101a397:	outs   dx,BYTE PTR ds:[rsi]
 101a398:	push   rsp
 101a399:	push   0x64616572
 101a39e:	add    BYTE PTR [rax],al
 101a3a0:	push   rdx
 101a3a1:	add    BYTE PTR [rbx+0x6c],al
 101a3a4:	outs   dx,DWORD PTR ds:[rsi]
 101a3a5:	jae    0x101a40c
 101a3a7:	rex.W (bad) 
 101a3a9:	outs   dx,BYTE PTR ds:[rsi]
 101a3aa:	fs ins BYTE PTR es:[rdi],dx
 101a3ac:	add    BYTE PTR gs:[rbp+0x65724300],al
 101a3b3:	(bad)  
 101a3b4:	je     0x101a41b
 101a3b6:	rex.RB jbe 0x101a41e
 101a3b9:	outs   dx,BYTE PTR ds:[rsi]
 101a3ba:	je     0x101a413
 101a3bc:	add    BYTE PTR [rax],al
 101a3be:	addr32 add al,0x53
 101a3c1:	gs je  0x101a409
 101a3c4:	jbe    0x101a42b
 101a3c6:	outs   dx,BYTE PTR ds:[rsi]
 101a3c7:	je     0x101a3c9
 101a3c9:	add    BYTE PTR [rbp+0x74654701],cl
 101a3cf:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101a3d1:	ins    DWORD PTR es:[rdi],dx
 101a3d2:	ins    DWORD PTR es:[rdi],dx
 101a3d3:	(bad)  
 101a3d4:	outs   dx,BYTE PTR ds:[rsi]
 101a3d5:	imul   r13,QWORD PTR fs:[rsi+0x65],0x454b0057
 101a3de:	push   rdx
 101a3df:	rex.WRX
 101a3e0:	rex.RB
 101a3e1:	xor    r14,QWORD PTR [rdx]
 101a3e4:	cs fs ins BYTE PTR es:[rdi],dx
 101a3e7:	ins    BYTE PTR es:[rdi],dx
 101a3e8:	add    BYTE PTR [rax],al
 101a3ea:	add    BYTE PTR gs:[rdi],bh
 101a3ed:	(bad)  
 101a3ee:	xor    eax,DWORD PTR [rax+0x59]
 101a3f1:	pop    r8
 101a3f3:	push   rax
 101a3f4:	rex.RB
 101a3f5:	pop    r8
 101a3f7:	rex pop rdx
 101a3f9:	add    BYTE PTR [rbx+0x5],ah
 101a3fc:	data16 jb 0x101a464
 101a3ff:	add    BYTE PTR gs:[rax],al
 101a402:	test   DWORD PTR [rdi+rbx*2],eax
 101a405:	jbe    0x101a47a
 101a407:	outs   dx,BYTE PTR ds:[rsi]
 101a408:	ja     0x101a47a
 101a40a:	jb     0x101a475
 101a40c:	outs   dx,BYTE PTR ds:[rsi]
 101a40d:	je     0x101a475
 101a40f:	add    ah,ch
 101a411:	add    BYTE PTR [rdi],bh
 101a413:	pop    rdi
 101a414:	jae    0x101a47b
 101a416:	je     0x101a477
 101a418:	jae    0x101a47f
 101a41a:	pop    rdi
 101a41b:	je     0x101a48f
 101a41d:	(bad)  
 101a41e:	outs   dx,BYTE PTR ds:[rsi]
 101a41f:	jae    0x101a48d
 101a421:	(bad)  
 101a422:	je     0x101a493
 101a424:	jb     0x101a466
 101a426:	rex pop rcx
 101a428:	push   r8
 101a42a:	ss pop r8
 101a42d:	rex.WB push r8
 101a42f:	rex.RB
 101a430:	push   r13
 101a432:	pop    rdi
 101a433:	rex.RB pop r8
 101a435:	rex.XB
 101a436:	rex.RB push r8
 101a438:	push   rsp
 101a439:	rex.WB
 101a43a:	rex.WRXB
 101a43b:	rex.WRX pop rdi
 101a43d:	push   rax
 101a43e:	rex.WRXB
 101a43f:	rex.WB
 101a440:	rex.WRX push rsp
 101a442:	rex.RB push r10
 101a444:	push   rbx
 101a445:	rex
 101a446:	rex
 101a447:	rex pop rdx
 101a449:	push   rax
 101a44a:	ss pop r8
 101a44d:	rex.WB xor BYTE PTR [r8+0x5a],al
 101a451:	rex pop rdx
 101a453:	add    BYTE PTR [rbp+0x4],cl
 101a456:	pop    rdi
 101a457:	jne    0x101a4c5
 101a459:	je     0x101a4ca
 101a45b:	(bad)  
 101a45c:	add    BYTE PTR [rax],al
 101a45e:	sahf   
 101a45f:	add    eax,0x6c6c616d
 101a464:	outs   dx,DWORD PTR ds:[rsi]
 101a465:	movsxd eax,DWORD PTR [rax]
 101a467:	add    BYTE PTR [rbx+0x61635f01],dh
 101a46d:	ins    BYTE PTR es:[rdi],dx
 101a46e:	ins    BYTE PTR es:[rdi],dx
 101a46f:	outs   dx,BYTE PTR ds:[rsi]
 101a470:	gs ja  0x101a4db
 101a473:	add    BYTE PTR [rsi+0x6d615f01],bl
 101a479:	jae    0x101a4e2
 101a47b:	pop    rdi
 101a47c:	gs js  0x101a4e8
 101a47f:	je     0x101a481
 101a481:	add    BYTE PTR [rdx+0x1],dl
 101a484:	pop    rdi
 101a485:	pop    rdi
 101a486:	addr32 gs je 0x101a4f7
 101a48a:	(bad)  
 101a48b:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 101a492:	(bad)  
 101a493:	add    DWORD PTR [rdi+0x5f],ebx
 101a496:	rex.XB pop r15
 101a498:	jae    0x101a50a
 101a49a:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 101a49e:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 101a4a5:	ins    BYTE PTR es:[rdi],dx
 101a4a6:	gs jb  0x101a4a9
 101a4a9:	add    BYTE PTR [rdx],bl
 101a4ab:	add    DWORD PTR [rdi+0x58],ebx
 101a4ae:	movsxd esi,DWORD PTR [rax+0x74]
 101a4b1:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 101a4ba:	pop    rdi
 101a4bb:	gs js  0x101a527
 101a4be:	je     0x101a4c0
 101a4c0:	mov    ch,0x1
 101a4c2:	pop    rdi
 101a4c3:	movsxd esp,DWORD PTR [rbp+0x78]
 101a4c6:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 101a4ce:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0153
 101a4d6:	imul   ebp,DWORD PTR [rsi+0x69],0x766e6574
 101a4dd:	add    BYTE PTR [rsi+0x6e695f02],al
 101a4e3:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 101a4eb:	add    bl,BYTE PTR [rdi+0x69]
 101a4ee:	outs   dx,BYTE PTR ds:[rsi]
 101a4ef:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 101a4f7:	add    ch,al
 101a4f9:	add    DWORD PTR [rdi+0x63],ebx
 101a4fc:	outs   dx,DWORD PTR ds:[rsi]
 101a4fd:	outs   dx,BYTE PTR ds:[rsi]
 101a4fe:	imul   sp,WORD PTR [rdi+0x74],0x7268
 101a504:	gs (bad) 
 101a506:	fs ins BYTE PTR es:[rdi],dx
 101a508:	outs   dx,DWORD PTR ds:[rsi]
 101a509:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a50c:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 101a511:	pop    rdi
 101a512:	jae    0x101a579
 101a514:	je     0x101a58b
 101a516:	jae    0x101a57d
 101a518:	jb     0x101a587
 101a51a:	(bad)  
 101a51b:	je     0x101a585
 101a51d:	gs jb  0x101a592
 101a520:	add    BYTE PTR [rax],al
 101a522:	(bad)
 101a526:	outs   dx,DWORD PTR ds:[rsi]
 101a527:	ins    DWORD PTR es:[rdi],dx
 101a528:	ins    DWORD PTR es:[rdi],dx
 101a529:	outs   dx,DWORD PTR ds:[rsi]
 101a52a:	fs add BYTE PTR gs:[rax],al
 101a52e:	sbb    al,0x2
 101a530:	pop    rdi
 101a531:	ins    WORD PTR es:[rdi],dx
 101a533:	outs   dx,DWORD PTR ds:[rsi]
 101a534:	fs add BYTE PTR gs:[rax],al
 101a538:	jns    0x101a53b
 101a53a:	pop    rdi
 101a53b:	pop    rdi
 101a53c:	jae    0x101a5a3
 101a53e:	je     0x101a59f
 101a540:	(bad)  
 101a541:	jo     0x101a5b3
 101a543:	pop    rdi
 101a544:	je     0x101a5bf
 101a546:	jo     0x101a5ad
 101a548:	add    BYTE PTR [rax],al
 101a54a:	rex.WRB push r11
 101a54c:	push   rsi
 101a54d:	rex.XB push r10
 101a54f:	xor    DWORD PTR [rax],esi
 101a551:	xor    BYTE PTR [rsi],ch
 101a553:	fs ins BYTE PTR es:[rdi],dx
 101a555:	ins    BYTE PTR es:[rdi],dx
 101a556:	add    BYTE PTR [rax],al
 101a558:	rex.RX add DWORD PTR [rdi+0x5f],r11d
 101a55c:	movsxd esi,DWORD PTR [rdx+0x74]
 101a55f:	pop    rdi
 101a560:	fs gs (bad) 
 101a563:	jne    0x101a5cc
 101a565:	addr32 gs jb 0x101a5c8
 101a569:	push   0x6b6f6f
 101a56e:	add    BYTE PTR [rcx],al
 101a570:	(bad)  
 101a571:	je     0x101a5d8
 101a573:	jb     0x101a5e2
 101a575:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 101a57c:	pop    rcx
 101a57d:	pop    r8
 101a57f:	pop    rax
 101a580:	pop    rdx
 101a581:	add    BYTE PTR [rbx+0x4],bl
 101a584:	pop    rdi
 101a585:	jne    0x101a5f5
 101a587:	ins    BYTE PTR es:[rdi],dx
 101a588:	outs   dx,DWORD PTR ds:[rsi]
 101a589:	movsxd ebp,DWORD PTR [rbx+0x0]
 101a58c:	add    QWORD PTR [rdi+0x5f],rbx
 101a590:	fs ins BYTE PTR es:[rdi],dx
 101a592:	ins    BYTE PTR es:[rdi],dx
 101a593:	outs   dx,DWORD PTR ds:[rsi]
 101a594:	outs   dx,BYTE PTR ds:[rsi]
 101a595:	gs js  0x101a601
 101a598:	je     0x101a59a
 101a59a:	test   BYTE PTR [rdx],0x5f
 101a59d:	ins    BYTE PTR es:[rdi],dx
 101a59e:	outs   dx,DWORD PTR ds:[rsi]
 101a59f:	movsxd ebp,DWORD PTR [rbx+0x0]
 101a5a2:	popf   
 101a5a3:	add    ebx,DWORD PTR [rdi+0x6f]
 101a5a6:	outs   dx,BYTE PTR ds:[rsi]
 101a5a7:	gs js  0x101a613
 101a5aa:	je     0x101a5ac
 101a5ac:	out    dx,al
 101a5ad:	add    BYTE PTR [rdi],bh
 101a5af:	pop    rdi
 101a5b0:	je     0x101a62b
 101a5b2:	jo     0x101a619
 101a5b4:	pop    rdi
 101a5b5:	imul   ebp,DWORD PTR [rsi+0x66],0x74645f6f
 101a5bc:	outs   dx,DWORD PTR ds:[rsi]
 101a5bd:	jb     0x101a61e
 101a5bf:	imul   ebp,DWORD PTR [rsi+0x74],0x616e7265
 101a5c6:	ins    BYTE PTR es:[rdi],dx
 101a5c7:	pop    rdi
 101a5c8:	ins    DWORD PTR es:[rdi],dx
 101a5c9:	gs je  0x101a634
 101a5cc:	outs   dx,DWORD PTR ds:[rsi]
 101a5cd:	fs rex je 0x101a64a
 101a5d1:	jo     0x101a638
 101a5d3:	pop    rdi
 101a5d4:	imul   ebp,DWORD PTR [rsi+0x66],0x5140406f
 101a5db:	rex.RB
 101a5dc:	rex.B
 101a5dd:	pop    r8
 101a5df:	pop    rax
 101a5e0:	pop    rdx
 101a5e1:	add    BYTE PTR [rax+rax*1+0x43],ch
 101a5e5:	outs   dx,DWORD PTR ds:[rsi]
 101a5e6:	push   rsp
 101a5e7:	(bad)  
 101a5e8:	jae    0x101a655
 101a5ea:	rex.WRB
 101a5eb:	gs ins DWORD PTR es:[rdi],dx
 101a5ed:	rex.RX jb 0x101a655
 101a5f0:	add    BYTE PTR gs:[rbx+0x0],ch
 101a5f4:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101a5f6:	push   rsp
 101a5f7:	(bad)  
 101a5f8:	jae    0x101a665
 101a5fa:	rex.WRB
 101a5fb:	gs ins DWORD PTR es:[rdi],dx
 101a5fd:	rex.B ins BYTE PTR es:[rdi],dx
 101a5ff:	ins    BYTE PTR es:[rdi],dx
 101a600:	outs   dx,DWORD PTR ds:[rsi]
 101a601:	movsxd eax,DWORD PTR [rax]
 101a603:	add    BYTE PTR [rbx+0x0],al
 101a606:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101a608:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101a60a:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 101a612:	rex.RB js 0x101a615
 101a615:	add    BYTE PTR [rax+rax*1+0x43],al
 101a619:	outs   dx,DWORD PTR ds:[rsi]
 101a61a:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101a61c:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 101a624:	push   rbx
 101a625:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 101a629:	imul   esi,DWORD PTR [rcx+rdi*2+0x0],0x43007000
 101a631:	outs   dx,DWORD PTR ds:[rsi]
 101a632:	push   rbp
 101a633:	outs   dx,BYTE PTR ds:[rsi]
 101a634:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
 101a63b:	imul   edi,DWORD PTR [rdx+0x65],0x6c6f0000
 101a642:	xor    esi,DWORD PTR gs:[rdx]
 101a645:	cs fs ins BYTE PTR es:[rdi],dx
 101a648:	ins    BYTE PTR es:[rdi],dx
 101a649:	add    BYTE PTR [rbp+0x53],dl
 101a64c:	rex.RB push r10
 101a64e:	xor    esi,DWORD PTR [rdx]
 101a650:	cs fs ins BYTE PTR es:[rdi],dx
 101a653:	ins    BYTE PTR es:[rdi],dx
 101a654:	add    BYTE PTR [rax],al
 101a656:	lock add al,0x52
 101a659:	je     0x101a6c7
 101a65b:	push   rsi
 101a65c:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 101a663:	outs   dx,BYTE PTR ds:[rsi]
 101a664:	ja     0x101a6cf
 101a666:	outs   dx,BYTE PTR ds:[rsi]
 101a667:	add    BYTE PTR fs:[rax],al
 101a66a:	add    DWORD PTR [rdx+rdx*2],eax
 101a66d:	je     0x101a6db
 101a66f:	rex.WR outs dx,DWORD PTR ds:[rsi]
 101a671:	outs   dx,DWORD PTR ds:[rsi]
 101a672:	imul   esi,DWORD PTR [rbp+0x70],0x46
 101a676:	jne    0x101a6e6
 101a678:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 101a67c:	outs   dx,BYTE PTR ds:[rsi]
 101a67d:	rex.RB outs dx,BYTE PTR ds:[rsi]
 101a67f:	je     0x101a6f3
 101a681:	jns    0x101a683
 101a683:	add    BYTE PTR [rbx+0x2],bh
 101a686:	push   rdx
 101a687:	je     0x101a6f5
 101a689:	rex.XB (bad) 
 101a68b:	jo     0x101a701
 101a68d:	jne    0x101a701
 101a68f:	rex.XB outs dx,DWORD PTR gs:[rsi]
 101a692:	outs   dx,BYTE PTR ds:[rsi]
 101a693:	je     0x101a6fa
 101a695:	js     0x101a70b
 101a697:	add    BYTE PTR [rsi+0x74],ch
 101a69a:	fs ins BYTE PTR es:[rdi],dx
 101a69c:	ins    BYTE PTR es:[rdi],dx
 101a69d:	cs fs ins BYTE PTR es:[rdi],dx
 101a6a0:	ins    BYTE PTR es:[rdi],dx
 101a6a1:	add    BYTE PTR [rax],dh
 101a6a3:	add    dl,BYTE PTR [rdx+0x65]
 101a6a6:	rex.XB ins BYTE PTR es:[edi],dx
 101a6a9:	outs   dx,DWORD PTR ds:[rsi]
 101a6aa:	jae    0x101a711
 101a6ac:	rex.WXB
 101a6ad:	gs jns 0x101a6b0
 101a6b0:	(bad)  
 101a6b1:	add    dl,BYTE PTR [rdx+0x65]
 101a6b4:	addr32 rex.WRXB jo 0x101a71d
 101a6b8:	outs   dx,BYTE PTR ds:[rsi]
 101a6b9:	rex.WXB
 101a6ba:	gs jns 0x101a702
 101a6bd:	js     0x101a716
 101a6bf:	add    BYTE PTR [rsi+0x2],ch
 101a6c2:	push   rdx
 101a6c3:	gs addr32 push rcx
 101a6c6:	jne    0x101a72d
 101a6c8:	jb     0x101a743
 101a6ca:	push   rsi
 101a6cb:	(bad)  
 101a6cc:	ins    BYTE PTR es:[rdi],dx
 101a6cd:	jne    0x101a734
 101a6cf:	rex.RB js 0x101a729
 101a6d2:	add    BYTE PTR [rax],al
 101a6d4:	add    DWORD PTR ss:[rdi+0x65],eax
 101a6d8:	je     0x101a726
 101a6da:	outs   dx,BYTE PTR gs:[rsi]
 101a6dc:	addr32 je 0x101a747
 101a6df:	push   rbx
 101a6e0:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x6f430076
 101a6e8:	jo     0x101a763
 101a6ea:	push   rbx
 101a6eb:	imul   esp,DWORD PTR [rax+rax*1+0x76],0x696e4901
 101a6f3:	je     0x101a75e
 101a6f5:	(bad)  
 101a6f6:	ins    BYTE PTR es:[rdi],dx
 101a6f7:	imul   edi,DWORD PTR [rdx+0x65],0x6c6341
 101a6fe:	and    al,0x1
 101a700:	rex.RXB
 101a701:	gs je  0x101a745
 101a704:	movsxd ebp,DWORD PTR [rcx+rcx*2+0x6e]
 101a708:	outs   dx,WORD PTR ds:[rsi]
 101a70a:	jb     0x101a779
 101a70c:	(bad)  
 101a70d:	je     0x101a778
 101a70f:	outs   dx,DWORD PTR ds:[rsi]
 101a710:	outs   dx,BYTE PTR ds:[rsi]
 101a711:	add    BYTE PTR [rsi],dl
 101a713:	add    BYTE PTR [rcx+0x64],al
 101a716:	movsxd esp,DWORD PTR fs:[r13+0x0]
 101a71b:	add    BYTE PTR [rbx],ah
 101a71d:	add    DWORD PTR [rdi+0x65],eax
 101a720:	je     0x101a763
 101a722:	movsxd esp,DWORD PTR [rbp+0x0]
 101a725:	add    BYTE PTR [rcx],dl
 101a727:	add    BYTE PTR [rcx+0x64],al
 101a72a:	movsxd esp,DWORD PTR fs:[r11+0x65]
 101a72f:	jae    0x101a7a4
 101a731:	rex.B ins BYTE PTR es:[rdi],dx
 101a733:	ins    BYTE PTR es:[rdi],dx
 101a734:	outs   dx,DWORD PTR ds:[rsi]
 101a735:	ja     0x101a79c
 101a737:	movsxd esp,DWORD PTR fs:[r13+0x45]
 101a73c:	js     0x101a73e
 101a73e:	adc    al,0x0
 101a740:	rex.B
 101a741:	fs movsxd esp,DWORD PTR fs:[r11+0x65]
 101a747:	jae    0x101a7bc
 101a749:	rex.R
 101a74a:	outs   dx,BYTE PTR gs:[rsi]
 101a74c:	imul   esp,DWORD PTR [rbp+0x64],0x45656341
 101a753:	js     0x101a755
 101a755:	add    BYTE PTR [rdi+0x1],dh
 101a758:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101a75a:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 101a762:	push   rbx
 101a763:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 101a767:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 101a76f:	imul   esi,DWORD PTR [rax+0x74],0x726f
 101a776:	mov    dh,0x2
 101a778:	push   rbx
 101a779:	gs je  0x101a7cf
 101a77c:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 101a780:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 101a788:	imul   esi,DWORD PTR [rax+0x74],0x6144726f
 101a78f:	movsxd ebp,DWORD PTR [rax+rax*1-0x48]
 101a793:	add    dl,BYTE PTR [rbx+0x65]
 101a796:	je     0x101a7eb
 101a798:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 101a79c:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 101a7a4:	imul   esi,DWORD PTR [rax+0x74],0x774f726f
 101a7ab:	outs   dx,BYTE PTR ds:[rsi]
 101a7ac:	gs jb  0x101a7af
 101a7af:	add    BYTE PTR [rdi+0x74655302],dh
 101a7b5:	push   rbx
 101a7b6:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 101a7ba:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 101a7c2:	imul   esi,DWORD PTR [rax+0x74],0x7247726f
 101a7c9:	outs   dx,DWORD PTR ds:[rsi]
 101a7ca:	jne    0x101a83c
 101a7cc:	add    BYTE PTR [rax],al
 101a7ce:	xchg   ecx,eax
 101a7cf:	add    DWORD PTR [rdi+rbp*2+0x6f],ecx
 101a7d3:	imul   esi,DWORD PTR [rbp+0x70],0x41
 101a7d7:	movsxd esp,DWORD PTR [rbx+0x6f]
 101a7da:	jne    0x101a84a
 101a7dc:	je     0x101a831
 101a7de:	imul   esp,DWORD PTR [rdi+rdx*2+0x0],0x6c5304c0
 101a7e6:	gs gs jo 0x101a7ea
 101a7ea:	out    dx,al
 101a7eb:	add    BYTE PTR [rbp+0x6e],al
 101a7ee:	movsxd ebp,DWORD PTR [rdi+0x64]
 101a7f1:	gs push rax
 101a7f3:	outs   dx,DWORD PTR ds:[rsi]
 101a7f4:	imul   ebp,DWORD PTR [rsi+0x74],0xce007265
 101a7fb:	add    al,0x54
 101a7fd:	gs jb  0x101a86d
 101a800:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 101a807:	outs   dx,DWORD PTR ds:[rsi]
 101a808:	movsxd esp,DWORD PTR [rbp+0x73]
 101a80b:	jae    0x101a80d
 101a80d:	add    dh,al
 101a80f:	add    DWORD PTR [rdi+0x65],eax
 101a812:	je     0x101a857
 101a814:	jne    0x101a888
 101a816:	jb     0x101a87d
 101a818:	outs   dx,BYTE PTR ds:[rsi]
 101a819:	je     0x101a86b
 101a81b:	jb     0x101a88c
 101a81d:	movsxd esp,DWORD PTR [rbp+0x73]
 101a820:	jae    0x101a822
 101a822:	loop   0x101a828
 101a824:	push   rbp
 101a825:	outs   dx,BYTE PTR ds:[rsi]
 101a826:	push   0x6c646e61
 101a82b:	gs fs rex.RB js 0x101a893
 101a830:	gs jo  0x101a8a7
 101a833:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 101a83a:	gs jb  0x101a83d
 101a83d:	add    BYTE PTR [rbx+0x74655304],dh
 101a843:	push   rbp
 101a844:	outs   dx,BYTE PTR ds:[rsi]
 101a845:	push   0x6c646e61
 101a84a:	gs fs rex.RB js 0x101a8b2
 101a84f:	gs jo  0x101a8c6
 101a852:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 101a859:	gs jb  0x101a85c
 101a85c:	add    al,BYTE PTR [rbx]
 101a85e:	rex.WB jae 0x101a8a5
 101a861:	gs (bad) 
 101a863:	jne    0x101a8cc
 101a865:	addr32 gs jb 0x101a8b9
 101a869:	jb     0x101a8d0
 101a86b:	jae    0x101a8d2
 101a86d:	outs   dx,BYTE PTR ds:[rsi]
 101a86e:	je     0x101a870
 101a870:	retf   
 101a871:	add    BYTE PTR [rbp+riz*2+0x63],al
 101a875:	outs   dx,DWORD PTR ds:[rsi]
 101a876:	fs gs push rax
 101a879:	outs   dx,DWORD PTR ds:[rsi]
 101a87a:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 101a881:	add    edx,DWORD PTR [rcx+0x75]
 101a884:	gs jb  0x101a900
 101a887:	push   rax
 101a888:	gs jb  0x101a8f1
 101a88b:	outs   dx,DWORD PTR ds:[rsi]
 101a88c:	jb     0x101a8fb
 101a88e:	(bad)  
 101a88f:	outs   dx,BYTE PTR ds:[rsi]
 101a890:	movsxd esp,DWORD PTR [rbp+0x43]
 101a893:	outs   dx,DWORD PTR ds:[rsi]
 101a894:	jne    0x101a904
 101a896:	je     0x101a8fd
 101a898:	jb     0x101a89a
 101a89a:	(bad)  
 101a89b:	add    al,BYTE PTR [rdi+0x65]
 101a89e:	je     0x101a8f4
 101a8a0:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 101a8a7:	je     0x101a8a9
 101a8a9:	add    bh,al
 101a8ab:	add    DWORD PTR [rdi+0x65],eax
 101a8ae:	je     0x101a8f3
 101a8b0:	jne    0x101a924
 101a8b2:	jb     0x101a919
 101a8b4:	outs   dx,BYTE PTR ds:[rsi]
 101a8b5:	je     0x101a907
 101a8b7:	jb     0x101a928
 101a8b9:	movsxd esp,DWORD PTR [rbp+0x73]
 101a8bc:	jae    0x101a907
 101a8be:	add    BYTE PTR fs:[rax+0x74654702],al
 101a8c5:	push   rbx
 101a8c6:	jns    0x101a93b
 101a8c8:	je     0x101a92f
 101a8ca:	ins    DWORD PTR es:[rdi],dx
 101a8cb:	push   rsp
 101a8cc:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 101a8d3:	ins    BYTE PTR es:[rdi],dx
 101a8d4:	gs push rsp
 101a8d6:	imul   ebp,DWORD PTR [rbp+0x65],0x4902ea00
 101a8dd:	outs   dx,BYTE PTR ds:[rsi]
 101a8de:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 101a8e6:	rex.XB jb 0x101a952
 101a8e9:	je     0x101a954
 101a8eb:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a8ee:	push   rbx
 101a8ef:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 101a8f4:	outs   dx,BYTE PTR ds:[rsi]
 101a8f5:	add    dl,dh
 101a8f7:	add    BYTE PTR [rbp+0x6e],al
 101a8fa:	je     0x101a961
 101a8fc:	jb     0x101a941
 101a8fe:	jb     0x101a969
 101a900:	je     0x101a96b
 101a902:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a905:	push   rbx
 101a906:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 101a90b:	outs   dx,BYTE PTR ds:[rsi]
 101a90c:	add    BYTE PTR [rax],al
 101a90e:	cmp    eax,DWORD PTR [rbx]
 101a910:	rex.WR
 101a911:	gs (bad) 
 101a913:	jbe    0x101a97a
 101a915:	rex.XB jb 0x101a981
 101a918:	je     0x101a983
 101a91a:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a91d:	push   rbx
 101a91e:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 101a923:	outs   dx,BYTE PTR ds:[rsi]
 101a924:	add    BYTE PTR [rax],al
 101a926:	push   rbp
 101a927:	add    ecx,DWORD PTR [rdi+rbp*2+0x63]
 101a92b:	imul   eax,DWORD PTR [rsi+0x69],0x6c
 101a92f:	gs rex.RB js 0x101a933
 101a933:	add    ah,ah
 101a935:	add    al,0x55
 101a937:	outs   dx,BYTE PTR ds:[rsi]
 101a938:	ins    BYTE PTR es:[rdi],dx
 101a939:	outs   dx,DWORD PTR ds:[rsi]
 101a93a:	movsxd ebp,DWORD PTR [rbx+0x46]
 101a93d:	imul   ebp,DWORD PTR [rbp+riz*2+0x45],0xf8000078
 101a945:	add    DWORD PTR [rdi+0x65],eax
 101a948:	je     0x101a990
 101a94a:	imul   ebp,DWORD PTR [rbp+riz*2+0x53],0x45657a69
 101a952:	js     0x101a954
 101a954:	xor    al,0x5
 101a956:	push   rdi
 101a957:	jb     0x101a9c2
 101a959:	je     0x101a9c0
 101a95b:	imul   r13d,DWORD PTR [rbp+r12*2+0x0],0x6c46015d
 101a964:	jne    0x101a9d9
 101a966:	push   0x656c6946
 101a96b:	rex.X jne 0x101a9d4
 101a96e:	data16 gs jb 0x101a9e5
 101a972:	add    BYTE PTR [rax],al
 101a974:	jne    0x101a97a
 101a976:	push   rbx
 101a977:	gs je  0x101a9c0
 101a97a:	imul   ebp,DWORD PTR [rbp+riz*2+0x50],0x746e696f
 101a982:	gs jb  0x101a9ca
 101a985:	js     0x101a987
 101a987:	add    BYTE PTR [rcx],cl
 101a989:	add    al,BYTE PTR [rdi+0x65]
 101a98c:	je     0x101a9da
 101a98e:	outs   dx,DWORD PTR ds:[rsi]
 101a98f:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a992:	push   rsp
 101a993:	imul   ebp,DWORD PTR [rbp+0x65],0x38c0000
 101a99a:	rex.WRXB jne 0x101aa11
 101a99d:	jo     0x101aa14
 101a99f:	je     0x101a9e5
 101a9a1:	gs (bad) 
 101a9a3:	jne    0x101aa0c
 101a9a5:	push   rbx
 101a9a6:	je     0x101aa1a
 101a9a8:	imul   ebp,DWORD PTR [rsi+0x67],0x8f000057
 101a9af:	add    BYTE PTR [rbx+0x72],al
 101a9b2:	gs (bad) 
 101a9b4:	je     0x101aa1b
 101a9b6:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x4c034600
 101a9bf:	outs   dx,DWORD PTR ds:[rsi]
 101a9c0:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a9c3:	rex.B ins BYTE PTR es:[rdi],dx
 101a9c5:	ins    BYTE PTR es:[rdi],dx
 101a9c6:	outs   dx,DWORD PTR ds:[rsi]
 101a9c7:	movsxd eax,DWORD PTR [rax]
 101a9c9:	add    BYTE PTR [rdx+0x3],cl
 101a9cc:	rex.WR outs dx,DWORD PTR ds:[rsi]
 101a9ce:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a9d1:	rex.RX jb 0x101aa39
 101a9d4:	gs add dl,cl
 101a9d7:	add    DWORD PTR [rdi+0x65],eax
 101a9da:	je     0x101aa1f
 101a9dc:	jne    0x101aa50
 101a9de:	jb     0x101aa45
 101a9e0:	outs   dx,BYTE PTR ds:[rsi]
 101a9e1:	je     0x101aa37
 101a9e3:	push   0x64616572
 101a9e8:	add    BYTE PTR [rax],al
 101a9ea:	xchg   ebp,eax
 101a9eb:	add    DWORD PTR [rdi+0x65],eax
 101a9ee:	je     0x101aa33
 101a9f0:	outs   dx,DWORD PTR ds:[rsi]
 101a9f1:	ins    DWORD PTR es:[rdi],dx
 101a9f2:	jo     0x101aa69
 101a9f4:	je     0x101aa5b
 101a9f6:	jb     0x101aa46
 101a9f8:	(bad)  
 101a9f9:	ins    DWORD PTR es:[rdi],dx
 101a9fa:	gs push rdi
 101a9fc:	add    BYTE PTR [rax],al
 101a9fe:	xchg   BYTE PTR [rdi+rbx*2],al
 101aa01:	jbe    0x101aa76
 101aa03:	outs   dx,BYTE PTR ds:[rsi]
 101aa04:	ja     0x101aa76
 101aa06:	jb     0x101aa71
 101aa08:	outs   dx,BYTE PTR ds:[rsi]
 101aa09:	je     0x101aa71
 101aa0b:	pop    rdi
 101aa0c:	ins    BYTE PTR es:[rdi],dx
 101aa0d:	add    BYTE PTR [rdi],bh
 101aa0f:	add    al,0x5f
 101aa11:	je     0x101aa7c
 101aa13:	ins    DWORD PTR es:[rdi],dx
 101aa14:	gs ss xor al,0x0
 101aa18:	(bad)  
 101aa19:	add    DWORD PTR [rdi+0x43],ebx
 101aa1c:	js     0x101aa96
 101aa1e:	push   rsp
 101aa1f:	push   0x45776f72
 101aa24:	js     0x101aa89
 101aa26:	gs jo  0x101aa9d
 101aa29:	imul   ebp,DWORD PTR [rdi+0x6e],0x1280000
 101aa30:	pop    rdi
 101aa31:	pop    rdi
 101aa32:	rex.XB js 0x101aaad
 101aa35:	rex.RX jb 0x101aa99
 101aa38:	ins    DWORD PTR es:[rdi],dx
 101aa39:	gs rex.W (bad) 
 101aa3c:	outs   dx,BYTE PTR ds:[rsi]
 101aa3d:	fs ins BYTE PTR es:[rdi],dx
 101aa3f:	gs jb  0x101aa75
 101aa42:	add    BYTE PTR [rax],al
 101aa44:	lods   eax,DWORD PTR ds:[rsi]
 101aa45:	add    eax,0x736d656d
 101aa4a:	gs je  0x101aa4d
 101aa4d:	add    BYTE PTR [rsi+0x63775f04],ah
 101aa53:	jae    0x101aabe
 101aa55:	movsxd ebp,DWORD PTR [rbp+0x70]
 101aa58:	add    BYTE PTR [rax],al
 101aa5a:	mov    edi,0x61657205
 101aa5f:	ins    BYTE PTR es:[rdi],dx
 101aa60:	ins    BYTE PTR es:[rdi],dx
 101aa61:	outs   dx,DWORD PTR ds:[rsi]
 101aa62:	movsxd eax,DWORD PTR [rax]
 101aa64:	test   eax,0x6d656d05
 101aa69:	movsxd esi,DWORD PTR [rax+0x79]
 101aa6c:	add    BYTE PTR [rax],al
 101aa6e:	sbb    eax,DWORD PTR [rdx]
 101aa70:	rex.WRB
 101aa71:	gs jae 0x101aae7
 101aa74:	(bad)  
 101aa75:	rex.X outs dx,DWORD PTR gs:[esi]
 101aa79:	js     0x101aad2
 101aa7b:	add    bl,bh
 101aa7d:	add    al,0x56
 101aa7f:	imul   esi,DWORD PTR [rdx+0x74],0x466c6175
 101aa86:	jb     0x101aaed
 101aa88:	gs add bl,dl
 101aa8b:	add    cl,BYTE PTR [rax+0x65]
 101aa8e:	(bad)  
 101aa8f:	jo     0x101aad2
 101aa91:	ins    BYTE PTR es:[rdi],dx
 101aa92:	ins    BYTE PTR es:[rdi],dx
 101aa93:	outs   dx,DWORD PTR ds:[rsi]
 101aa94:	movsxd eax,DWORD PTR [rax]
 101aa96:	xlat   BYTE PTR ds:[rbx]
 101aa97:	add    cl,BYTE PTR [rax+0x65]
 101aa9a:	(bad)  
 101aa9b:	jo     0x101aae3
 101aa9d:	jb     0x101ab04
 101aa9f:	add    BYTE PTR gs:[rax],al
 101aaa2:	jp     0x101aaa6
 101aaa4:	rex.RXB
 101aaa5:	gs je  0x101aafb
 101aaa8:	jns    0x101ab1d
 101aaaa:	je     0x101ab11
 101aaac:	ins    DWORD PTR es:[rdi],dx
 101aaad:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101aaaf:	outs   dx,WORD PTR ds:[rsi]
 101aab1:	add    BYTE PTR [rax],al
 101aab3:	add    eax,0x74726956
 101aab8:	jne    0x101ab1b
 101aaba:	ins    BYTE PTR es:[rdi],dx
 101aabb:	push   rcx
 101aabc:	jne    0x101ab23
 101aabe:	jb     0x101ab39
 101aac0:	add    BYTE PTR [rax],al
 101aac2:	(bad)  
 101aac3:	add    cl,BYTE PTR [rax+0x65]
 101aac6:	(bad)  
 101aac7:	jo     0x101ab0c
 101aac9:	jb     0x101ab30
 101aacb:	(bad)  
 101aacc:	je     0x101ab33
 101aace:	add    BYTE PTR [rax],al
 101aad0:	mov    BYTE PTR [rbx],0x52
 101aad3:	gs (bad) 
 101aad5:	fs push rax
 101aad7:	jb     0x101ab48
 101aad9:	movsxd esp,DWORD PTR [rbp+0x73]
 101aadc:	jae    0x101ab2b
 101aade:	gs ins DWORD PTR es:[rdi],dx
 101aae0:	outs   dx,DWORD PTR ds:[rsi]
 101aae1:	jb     0x101ab5c
 101aae3:	add    ch,bh
 101aae5:	add    edx,DWORD PTR [rdx+0x65]
 101aae8:	ins    BYTE PTR es:[rdi],dx
 101aae9:	gs (bad) 
 101aaeb:	jae    0x101ab52
 101aaed:	rex.WRB jne 0x101ab64
 101aaf0:	gs js  0x101aaf3
 101aaf3:	add    BYTE PTR [rdx],bl
 101aaf5:	add    al,BYTE PTR [rdi+0x65]
 101aaf8:	je     0x101ab47
 101aafa:	outs   dx,DWORD PTR ds:[rsi]
 101aafb:	fs jne 0x101ab6a
 101aafe:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 101ab08:	add    BYTE PTR [rax],al
 101ab0a:	jge    0x101ab10
 101ab0c:	push   rbx
 101ab0d:	gs je  0x101ab58
 101ab10:	(bad)  
 101ab11:	outs   dx,BYTE PTR ds:[rsi]
 101ab12:	fs ins BYTE PTR es:[rdi],dx
 101ab14:	rex.WB outs dx,BYTE PTR gs:[rsi]
 101ab17:	outs   dx,WORD PTR ds:[rsi]
 101ab19:	jb     0x101ab88
 101ab1b:	(bad)  
 101ab1c:	je     0x101ab87
 101ab1e:	outs   dx,DWORD PTR ds:[rsi]
 101ab1f:	outs   dx,BYTE PTR ds:[rsi]
 101ab20:	add    BYTE PTR [rax],al
 101ab22:	sahf   
 101ab23:	add    BYTE PTR [rbx+0x72],al
 101ab26:	gs (bad) 
 101ab28:	je     0x101ab8f
 101ab2a:	rex.WRB jne 0x101aba1
 101ab2d:	gs js  0x101ab87
 101ab30:	add    BYTE PTR [rax],al
 101ab32:	out    0x1,al
 101ab34:	rex.RXB
 101ab35:	gs je  0x101ab7d
 101ab38:	js     0x101aba3
 101ab3a:	je     0x101ab7f
 101ab3c:	outs   dx,DWORD PTR ds:[rsi]
 101ab3d:	fs gs push rax
 101ab40:	jb     0x101abb1
 101ab42:	movsxd esp,DWORD PTR [rbp+0x73]
 101ab45:	jae    0x101ab47
 101ab47:	add    BYTE PTR [rax+0x65724300],ch
 101ab4d:	(bad)  
 101ab4e:	je     0x101abb5
 101ab50:	push   rax
 101ab51:	jb     0x101abc2
 101ab53:	movsxd esp,DWORD PTR [rbp+0x73]
 101ab56:	jae    0x101abaf
 101ab58:	add    BYTE PTR [rax],al
 101ab5a:	push   0x2
 101ab5c:	rex.RXB
 101ab5d:	gs je  0x101abb3
 101ab60:	je     0x101abc3
 101ab62:	jb     0x101abd8
 101ab64:	jne    0x101abd6
 101ab66:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101ab68:	outs   dx,WORD PTR ds:[rsi]
 101ab6a:	push   rdi
 101ab6b:	add    BYTE PTR [rsi+0x74655304],ah
 101ab71:	push   rsp
 101ab72:	push   0x64616572
 101ab77:	push   rax
 101ab78:	jb     0x101abe3
 101ab7a:	outs   dx,DWORD PTR ds:[rsi]
 101ab7b:	jb     0x101abe6
 101ab7d:	je     0x101abf8
 101ab7f:	add    BYTE PTR [rbp+0x74654702],dl
 101ab85:	push   rsp
 101ab86:	push   0x64616572
 101ab8b:	push   rax
 101ab8c:	jb     0x101abf7
 101ab8e:	outs   dx,DWORD PTR ds:[rsi]
 101ab8f:	jb     0x101abfa
 101ab91:	je     0x101ac0c
 101ab93:	add    BYTE PTR [rdi+0x65725f03],dh
 101ab99:	jae    0x101ac00
 101ab9b:	je     0x101ac10
 101ab9d:	je     0x101ac0a
 101ab9f:	outs   dx,DWORD PTR ds:[rsi]
 101aba0:	data16 ins BYTE PTR es:[rdi],dx
 101aba2:	ja     0x101aba4
 101aba4:	in     eax,dx
 101aba5:	add    al,0x5f
 101aba7:	ja     0x101ac16
 101aba9:	(bad)  
 101abaa:	imul   esp,DWORD PTR [rbp+0x70],0x61
 101abae:	je     0x101ac18
 101abb0:	pop    rdi
 101abb1:	jae    0x101abb3
 101abb3:	add    BYTE PTR [rdi],cl
 101abb5:	add    eax,0x7073775f
 101abba:	ins    BYTE PTR es:[rdi],dx
 101abbb:	imul   esi,DWORD PTR [rax+rsi*2+0x61],0x735f6874
	...
 101abd3:	add    BYTE PTR [rdx],dl
 101abd5:	jmp    0x101ac0c
 101abd7:	rex.WRXB add BYTE PTR [r8],r8b
 101abda:	add    BYTE PTR [rax],al
 101abdc:	or     al,0xac
 101abde:	add    DWORD PTR [rax],eax
 101abe0:	add    DWORD PTR [rax],eax
 101abe2:	add    BYTE PTR [rax],al
 101abe4:	add    al,BYTE PTR [rax]
 101abe6:	add    BYTE PTR [rax],al
 101abe8:	add    al,BYTE PTR [rax]
 101abea:	add    BYTE PTR [rax],al
 101abec:	clc    
 101abed:	stos   DWORD PTR es:[rdi],eax
 101abee:	add    DWORD PTR [rax],eax
 101abf0:	add    BYTE PTR [rcx+rax*1+0x1ac0800],ch
 101abf7:	add    al,ah
 101abf9:	(bad)  
 101abfa:	add    DWORD PTR [rax],eax
 101abfc:	nop
 101abfd:	or     BYTE PTR [rcx],al
 101abff:	add    BYTE PTR [rdx],bl
 101ac01:	lods   al,BYTE PTR ds:[rsi]
 101ac02:	add    DWORD PTR [rax],eax
 101ac04:	sub    eax,0x1ac
 101ac09:	add    BYTE PTR [rcx],al
 101ac0b:	add    BYTE PTR [rbx+0x71],dh
 101ac0e:	ins    BYTE PTR es:[rdi],dx
 101ac0f:	ja     0x101ac83
 101ac11:	imul   esi,DWORD PTR [rbp+riz*2+0x72],0x6578652e
 101ac19:	add    BYTE PTR [rbp+rbp*2+0x70],al
 101ac1d:	rex.RXB
 101ac1e:	gs je  0x101ac64
 101ac21:	ins    BYTE PTR es:[rdi],dx
 101ac22:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 101ac29:	outs   dx,DWORD PTR ds:[rsi]
 101ac2a:	jb     0x101aca0
 101ac2c:	add    BYTE PTR [rbp+rbp*2+0x70],al
 101ac30:	push   rdx
 101ac31:	gs ins DWORD PTR es:[rdi],dx
 101ac33:	outs   dx,DWORD PTR ds:[rsi]
 101ac34:	je     0x101ac9b
 101ac36:	rex.R jne 0x101aca6
 101ac39:	jo     0x101ac8d
 101ac3b:	gs jno 0x101acb3
 101ac3e:	gs jae 0x101acb5
	...
