
e5c6eb60211ec6b21425f7cd63d597109dfd4c867b5645b52d05684be59097fd.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	lock rol DWORD PTR [rax],cl
 1001003:	add    BYTE PTR [rax],al
 1001005:	add    BYTE PTR [rax],al
 1001007:	add    dh,bh
 1001009:	rol    DWORD PTR [rax],cl
 100100b:	add    BYTE PTR [rax],al
 100100d:	add    BYTE PTR [rax],al
 100100f:	add    BYTE PTR [rsi],cl
 1001011:	(bad)  
 1001012:	add    BYTE PTR [rax],al
 1001014:	add    BYTE PTR [rax],al
 1001016:	add    BYTE PTR [rax],al
 1001018:	and    dl,ah
 100101a:	add    BYTE PTR [rax],al
 100101c:	add    BYTE PTR [rax],al
 100101e:	add    BYTE PTR [rax],al
 1001020:	cmp    ah,dl
 1001022:	add    BYTE PTR [rax],al
 1001024:	add    BYTE PTR [rax],al
 1001026:	add    BYTE PTR [rax],al
 1001028:	rex.WX (bad) 
 100102a:	add    BYTE PTR [rax],al
 100102c:	add    BYTE PTR [rax],al
 100102e:	add    BYTE PTR [rax],al
 1001030:	pop    rdx
 1001031:	(bad)  
 1001032:	add    BYTE PTR [rax],al
 1001034:	add    BYTE PTR [rax],al
 1001036:	add    BYTE PTR [rax],al
 1001038:	jo     0x100100e
 100103a:	add    BYTE PTR [rax],al
 100103c:	add    BYTE PTR [rax],al
 100103e:	add    BYTE PTR [rax],al
 1001040:	adc    ah,0x0
 1001043:	add    BYTE PTR [rax],al
 1001045:	add    BYTE PTR [rax],al
 1001047:	add    BYTE PTR [rdx+0xd4],dl
 100104d:	add    BYTE PTR [rax],al
 100104f:	add    al,dh
 1001051:	xlat   BYTE PTR ds:[rbx]
	...
 100105e:	add    BYTE PTR [rax],al
 1001060:	fld    DWORD PTR ss:[rax]
 1001063:	add    BYTE PTR [rax],al
 1001065:	add    BYTE PTR [rax],al
 1001067:	add    BYTE PTR [rdx],ah
 1001069:	fld    DWORD PTR [rax]
 100106b:	add    BYTE PTR [rax],al
 100106d:	add    BYTE PTR [rax],al
 100106f:	add    BYTE PTR [rax],cl
 1001071:	fld    DWORD PTR [rax]
 1001073:	add    BYTE PTR [rax],al
 1001075:	add    BYTE PTR [rax],al
 1001077:	add    ah,dh
 1001079:	fadd   DWORD PTR [rax]
 100107b:	add    BYTE PTR [rax],al
 100107d:	add    BYTE PTR [rax],al
 100107f:	add    al,ah
 1001081:	fadd   DWORD PTR [rax]
 1001083:	add    BYTE PTR [rax],al
 1001085:	add    BYTE PTR [rax],al
 1001087:	add    BYTE PTR [rax-0x27],dl
 100108a:	add    BYTE PTR [rax],al
 100108c:	add    BYTE PTR [rax],al
 100108e:	add    BYTE PTR [rax],al
 1001090:	mov    al,0xd8
 1001092:	add    BYTE PTR [rax],al
 1001094:	add    BYTE PTR [rax],al
 1001096:	add    BYTE PTR [rax],al
 1001098:	pushf  
 1001099:	fadd   DWORD PTR [rax]
 100109b:	add    BYTE PTR [rax],al
 100109d:	add    BYTE PTR [rax],al
 100109f:	add    BYTE PTR [rdx+0xd8],al
 10010a5:	add    BYTE PTR [rax],al
 10010a7:	add    BYTE PTR [rax+rbx*8+0x0],ch
 10010ab:	add    BYTE PTR [rax],al
 10010ad:	add    BYTE PTR [rax],al
 10010af:	add    BYTE PTR [rsi-0x28],dl
 10010b2:	add    BYTE PTR [rax],al
 10010b4:	add    BYTE PTR [rax],al
 10010b6:	add    BYTE PTR [rax],al
 10010b8:	cmp    al,0xd8
 10010ba:	add    BYTE PTR [rax],al
 10010bc:	add    BYTE PTR [rax],al
 10010be:	add    BYTE PTR [rax],al
 10010c0:	sub    al,0xd8
 10010c2:	add    BYTE PTR [rax],al
 10010c4:	add    BYTE PTR [rax],al
 10010c6:	add    BYTE PTR [rax],al
 10010c8:	(bad)  
 10010c9:	fadd   DWORD PTR [rax]
 10010cb:	add    BYTE PTR [rax],al
 10010cd:	add    BYTE PTR [rax],al
 10010cf:	add    dh,bh
 10010d1:	xlat   BYTE PTR ds:[rbx]
 10010d2:	add    BYTE PTR [rax],al
 10010d4:	add    BYTE PTR [rax],al
 10010d6:	add    BYTE PTR [rax],al
 10010d8:	push   0xffffffffffffffd9
 10010da:	add    BYTE PTR [rax],al
 10010dc:	add    BYTE PTR [rax],al
 10010de:	add    BYTE PTR [rax],al
 10010e0:	jl     0x10010bb
 10010e2:	add    BYTE PTR [rax],al
 10010e4:	add    BYTE PTR [rax],al
 10010e6:	add    BYTE PTR [rax],al
 10010e8:	mov    cl,bl
 10010ea:	add    BYTE PTR [rax],al
 10010ec:	add    BYTE PTR [rax],al
 10010ee:	add    BYTE PTR [rax],al
 10010f0:	xchg   esp,eax
 10010f1:	fld    DWORD PTR [rax]
 10010f3:	add    BYTE PTR [rax],al
 10010f5:	add    BYTE PTR [rax],al
 10010f7:	add    BYTE PTR [rdx+0xd9],ah
 10010fd:	add    BYTE PTR [rax],al
 10010ff:	add    BYTE PTR [rcx+rbx*8+0x0],dh
 1001106:	add    BYTE PTR [rax],al
 1001108:	rcr    cl,0x0
 100110b:	add    BYTE PTR [rax],al
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    ah,dl
 1001111:	fld    DWORD PTR [rax]
 1001113:	add    BYTE PTR [rax],al
 1001115:	add    BYTE PTR [rax],al
 1001117:	add    BYTE PTR [rsi-0x2b],dl
 100111a:	add    BYTE PTR [rax],al
 100111c:	add    BYTE PTR [rax],al
 100111e:	add    BYTE PTR [rax],al
 1001120:	rex.X (bad) 
 1001122:	add    BYTE PTR [rax],al
 1001124:	add    BYTE PTR [rax],al
 1001126:	add    BYTE PTR [rax],al
 1001128:	in     al,0xd9
 100112a:	add    BYTE PTR [rax],al
 100112c:	add    BYTE PTR [rax],al
 100112e:	add    BYTE PTR [rax],al
 1001130:	xor    ch,dl
 1001132:	add    BYTE PTR [rax],al
 1001134:	add    BYTE PTR [rax],al
 1001136:	add    BYTE PTR [rax],al
 1001138:	and    al,0xd5
 100113a:	add    BYTE PTR [rax],al
 100113c:	add    BYTE PTR [rax],al
 100113e:	add    BYTE PTR [rax],al
 1001140:	(bad)  
 1001141:	(bad)  
 1001142:	add    BYTE PTR [rax],al
 1001144:	add    BYTE PTR [rax],al
 1001146:	add    BYTE PTR [rax],al
 1001148:	(bad)  
 1001149:	(bad)  
 100114a:	add    BYTE PTR [rax],al
 100114c:	add    BYTE PTR [rax],al
 100114e:	add    BYTE PTR [rax],al
 1001150:	test   dl,bl
 1001152:	add    BYTE PTR [rax],al
 1001154:	add    BYTE PTR [rax],al
 1001156:	add    BYTE PTR [rax],al
 1001158:	out    dx,al
 1001159:	(bad)  
 100115a:	add    BYTE PTR [rax],al
 100115c:	add    BYTE PTR [rax],al
 100115e:	add    BYTE PTR [rax],al
 1001160:	je     0x100113c
 1001162:	add    BYTE PTR [rax],al
 1001164:	add    BYTE PTR [rax],al
 1001166:	add    BYTE PTR [rax],al
 1001168:	data16 fiadd DWORD PTR [rax]
 100116b:	add    BYTE PTR [rax],al
 100116d:	add    BYTE PTR [rax],al
 100116f:	add    BYTE PTR [rax-0x26],dl
 1001172:	add    BYTE PTR [rax],al
 1001174:	add    BYTE PTR [rax],al
 1001176:	add    BYTE PTR [rax],al
 1001178:	xor    al,0xda
 100117a:	add    BYTE PTR [rax],al
 100117c:	add    BYTE PTR [rax],al
 100117e:	add    BYTE PTR [rax],al
 1001180:	sbb    dl,bl
 1001182:	add    BYTE PTR [rax],al
 1001184:	add    BYTE PTR [rax],al
 1001186:	add    BYTE PTR [rax],al
 1001188:	add    bl,dl
 100118a:	add    BYTE PTR [rax],al
 100118c:	add    BYTE PTR [rax],al
 100118e:	add    BYTE PTR [rax],al
 1001190:	hlt    
 1001191:	fld    DWORD PTR [rax]
 1001193:	add    BYTE PTR [rax],al
 1001195:	add    BYTE PTR [rax],al
 1001197:	add    dh,ah
 1001199:	(bad)  
 100119a:	add    BYTE PTR [rax],al
 100119c:	add    BYTE PTR [rax],al
 100119e:	add    BYTE PTR [rax],al
 10011a0:	(bad)  
 10011a1:	(bad)  
 10011a2:	add    BYTE PTR [rax],al
 10011a4:	add    BYTE PTR [rax],al
 10011a6:	add    BYTE PTR [rax],al
 10011a8:	(bad)  
 10011a9:	(bad)  
 10011aa:	add    BYTE PTR [rax],al
 10011ac:	add    BYTE PTR [rax],al
 10011ae:	add    BYTE PTR [rax],al
 10011b0:	mov    dh,0xd4
 10011b2:	add    BYTE PTR [rax],al
 10011b4:	add    BYTE PTR [rax],al
 10011b6:	add    BYTE PTR [rax],al
 10011b8:	(bad)  
 10011b9:	fadd   DWORD PTR [rax]
	...
 10011c7:	add    BYTE PTR [rsi+0xda],ah
 10011cd:	add    BYTE PTR [rax],al
 10011cf:	add    BYTE PTR [rsi+0xda],dl
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    BYTE PTR [rax-0x29],bl
 10011da:	add    BYTE PTR [rax],al
 10011dc:	add    BYTE PTR [rax],al
 10011de:	add    BYTE PTR [rax],al
 10011e0:	rex.WRX xlat BYTE PTR ds:[rbx]
 10011e2:	add    BYTE PTR [rax],al
 10011e4:	add    BYTE PTR [rax],al
 10011e6:	add    BYTE PTR [rax],al
 10011e8:	cmp    bh,dl
 10011ea:	add    BYTE PTR [rax],al
 10011ec:	add    BYTE PTR [rax],al
 10011ee:	add    BYTE PTR [rax],al
 10011f0:	xlat   BYTE PTR cs:[rbx]
 10011f2:	add    BYTE PTR [rax],al
 10011f4:	add    BYTE PTR [rax],al
 10011f6:	add    BYTE PTR [rax],al
 10011f8:	sbb    dl,bh
 10011fa:	add    BYTE PTR [rax],al
 10011fc:	add    BYTE PTR [rax],al
 10011fe:	add    BYTE PTR [rax],al
 1001200:	cli    
 1001201:	(bad)  
 1001202:	add    BYTE PTR [rax],al
 1001204:	add    BYTE PTR [rax],al
 1001206:	add    BYTE PTR [rax],al
 1001208:	lock (bad) 
 100120a:	add    BYTE PTR [rax],al
 100120c:	add    BYTE PTR [rax],al
 100120e:	add    BYTE PTR [rax],al
 1001210:	in     al,0xd6
 1001212:	add    BYTE PTR [rax],al
 1001214:	add    BYTE PTR [rax],al
 1001216:	add    BYTE PTR [rax],al
 1001218:	rcl    dh,1
 100121a:	add    BYTE PTR [rax],al
 100121c:	add    BYTE PTR [rax],al
 100121e:	add    BYTE PTR [rax],al
 1001220:	mov    edx,0xd6
 1001225:	add    BYTE PTR [rax],al
 1001227:	add    BYTE PTR [rsi+rdx*8+0x0],ch
 100122e:	add    BYTE PTR [rax],al
 1001230:	movabs al,ds:0x92000000000000d6
 1001239:	(bad)  
 100123a:	add    BYTE PTR [rax],al
 100123c:	add    BYTE PTR [rax],al
 100123e:	add    BYTE PTR [rax],al
 1001240:	mov    dl,dh
 1001242:	add    BYTE PTR [rax],al
 1001244:	add    BYTE PTR [rax],al
 1001246:	add    BYTE PTR [rax],al
 1001248:	adc    dh,0x0
 100124b:	add    BYTE PTR [rax],al
 100124d:	add    BYTE PTR [rax],al
 100124f:	add    BYTE PTR [rax-0x2a],bh
 1001252:	add    BYTE PTR [rax],al
 1001254:	add    BYTE PTR [rax],al
 1001256:	add    BYTE PTR [rax],al
 1001258:	push   0xffffffffffffffd6
 100125a:	add    BYTE PTR [rax],al
 100125c:	add    BYTE PTR [rax],al
 100125e:	add    BYTE PTR [rax],al
 1001260:	push   rdx
 1001261:	(bad)  
 1001262:	add    BYTE PTR [rax],al
 1001264:	add    BYTE PTR [rax],al
 1001266:	add    BYTE PTR [rax],al
 1001268:	rex (bad) 
 100126a:	add    BYTE PTR [rax],al
 100126c:	add    BYTE PTR [rax],al
 100126e:	add    BYTE PTR [rax],al
 1001270:	xor    dl,dh
 1001272:	add    BYTE PTR [rax],al
 1001274:	add    BYTE PTR [rax],al
 1001276:	add    BYTE PTR [rax],al
 1001278:	sub    dh,dl
 100127a:	add    BYTE PTR [rax],al
 100127c:	add    BYTE PTR [rax],al
 100127e:	add    BYTE PTR [rax],al
 1001280:	and    dh,dl
 1001282:	add    BYTE PTR [rax],al
 1001284:	add    BYTE PTR [rax],al
 1001286:	add    BYTE PTR [rax],al
 1001288:	sbb    dl,dh
 100128a:	add    BYTE PTR [rax],al
 100128c:	add    BYTE PTR [rax],al
 100128e:	add    BYTE PTR [rax],al
 1001290:	(bad)  
 1001291:	(bad)  
 1001292:	add    BYTE PTR [rax],al
 1001294:	add    BYTE PTR [rax],al
 1001296:	add    BYTE PTR [rax],al
 1001298:	add    al,0xd6
 100129a:	add    BYTE PTR [rax],al
 100129c:	add    BYTE PTR [rax],al
 100129e:	add    BYTE PTR [rax],al
 10012a0:	clc    
 10012a1:	(bad)  
 10012a2:	add    BYTE PTR [rax],al
 10012a4:	add    BYTE PTR [rax],al
 10012a6:	add    BYTE PTR [rax],al
 10012a8:	out    dx,al
 10012a9:	(bad)  
 10012aa:	add    BYTE PTR [rax],al
 10012ac:	add    BYTE PTR [rax],al
 10012ae:	add    BYTE PTR [rax],al
 10012b0:	loopne 0x1001287
 10012b2:	add    BYTE PTR [rax],al
 10012b4:	add    BYTE PTR [rax],al
 10012b6:	add    BYTE PTR [rax],al
 10012b8:	(bad)  
 10012b9:	(bad)  
 10012ba:	add    BYTE PTR [rax],al
 10012bc:	add    BYTE PTR [rax],al
 10012be:	add    BYTE PTR [rax],al
 10012c0:	(bad)  
 10012c1:	(bad)  
 10012c2:	add    BYTE PTR [rax],al
 10012c4:	add    BYTE PTR [rax],al
 10012c6:	add    BYTE PTR [rax],al
 10012c8:	mov    ah,0xd5
 10012ca:	add    BYTE PTR [rax],al
 10012cc:	add    BYTE PTR [rax],al
 10012ce:	add    BYTE PTR [rax],al
 10012d0:	stos   BYTE PTR es:[rdi],al
 10012d1:	(bad)  
 10012d2:	add    BYTE PTR [rax],al
 10012d4:	add    BYTE PTR [rax],al
 10012d6:	add    BYTE PTR [rax],al
 10012d8:	sahf   
 10012d9:	(bad)  
 10012da:	add    BYTE PTR [rax],al
 10012dc:	add    BYTE PTR [rax],al
 10012de:	add    BYTE PTR [rax],al
 10012e0:	xchg   edx,eax
 10012e1:	(bad)  
 10012e2:	add    BYTE PTR [rax],al
 10012e4:	add    BYTE PTR [rax],al
 10012e6:	add    BYTE PTR [rax],al
 10012e8:	xchg   ch,dl
 10012ea:	add    BYTE PTR [rax],al
 10012ec:	add    BYTE PTR [rax],al
 10012ee:	add    BYTE PTR [rax],al
 10012f0:	jle    0x10012c7
 10012f2:	add    BYTE PTR [rax],al
 10012f4:	add    BYTE PTR [rax],al
 10012f6:	add    BYTE PTR [rax],al
 10012f8:	je     0x10012cf
 10012fa:	add    BYTE PTR [rax],al
 10012fc:	add    BYTE PTR [rax],al
 10012fe:	add    BYTE PTR [rax],al
 1001300:	rex.RX xlat BYTE PTR ds:[rbx]
	...
 100130e:	add    BYTE PTR [rax],al
 1001310:	(bad)  
 1001311:	xlat   BYTE PTR ds:[rbx]
 1001312:	add    BYTE PTR [rax],al
 1001314:	add    BYTE PTR [rax],al
 1001316:	add    BYTE PTR [rax],al
 1001318:	mov    esp,0xd7
	...
 1001325:	add    BYTE PTR [rax],al
 1001327:	add    BYTE PTR [rsi],al
 1001329:	add    BYTE PTR [rax],al
 100132b:	add    BYTE PTR [rax],al
 100132d:	add    BYTE PTR [rax],al
 100132f:	or     BYTE PTR [rax],0x0
 1001332:	add    BYTE PTR [rax],al
 1001334:	add    BYTE PTR [rax],al
 1001336:	add    BYTE PTR [rax+0xc8],al
 100133c:	add    BYTE PTR [rax],al
 100133e:	add    BYTE PTR [rax+0x9],al
 1001344:	add    BYTE PTR [rax],al
 1001346:	add    BYTE PTR [rax+0x0],al
 100134c:	add    BYTE PTR [rax],al
 100134e:	add    BYTE PTR [rax],al
 1001350:	sahf   
 1001351:	xlat   BYTE PTR ds:[rbx]
 1001352:	add    BYTE PTR [rax],al
 1001354:	add    BYTE PTR [rax],al
 1001356:	add    BYTE PTR [rax],al
 1001358:	jl     0x1001331
 100135a:	add    BYTE PTR [rax],al
 100135c:	add    BYTE PTR [rax],al
 100135e:	add    BYTE PTR [rax],al
 1001360:	mov    edi,ss
	...
 1001376:	add    BYTE PTR [rax],al
 1001378:	cqo    
 100137a:	add    BYTE PTR [rcx],al
 100137c:	add    BYTE PTR [rax],al
 100137e:	add    BYTE PTR [rax],al
 1001380:	xor    bl,al
 1001382:	add    BYTE PTR [rcx],al
	...
 1001398:	cmp    al,0x9b
 100139a:	add    BYTE PTR [rcx],al
 100139c:	add    BYTE PTR [rax],al
 100139e:	add    BYTE PTR [rax],al
 10013a0:	(bad)  
 10013a1:	popf   
 10013a2:	add    BYTE PTR [rcx],al
	...
 10013b4:	stc    
 10013b5:	(bad)  
 10013b6:	xor    eax,0x4f
 10013bb:	add    BYTE PTR [rdx],al
 10013bd:	add    BYTE PTR [rax],al
 10013bf:	add    BYTE PTR [rbx],ah
 10013c1:	add    BYTE PTR [rax],al
 10013c3:	add    BYTE PTR [rax],al
 10013c5:	add    BYTE PTR cs:[rax],al
 10013c8:	add    BYTE PTR [rdx],ah
 10013ca:	add    BYTE PTR [rax],al
 10013cc:	add    BYTE PTR [rax],al
 10013ce:	add    BYTE PTR [rax],al
 10013d0:	pop    rsp
 10013d1:	add    BYTE PTR [rbx+0x0],cl
 10013d4:	add    BYTE PTR [r10+0x0],r10b
 10013d8:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 10013dc:	rex.WR add BYTE PTR [rbx],r14b
 10013df:	add    BYTE PTR [rdx],dh
 10013e1:	add    BYTE PTR [rsi],ch
 10013e3:	add    BYTE PTR [rax+rax*1+0x4c],al
 10013e7:	add    BYTE PTR [rax+rax*1+0x0],cl
 10013eb:	add    BYTE PTR [rax],al
 10013ed:	add    BYTE PTR [rax],al
 10013ef:	add    BYTE PTR [rax+0x65],cl
 10013f2:	(bad)  
 10013f3:	jo     0x1001448
 10013f5:	gs je  0x1001441
 10013f8:	outs   dx,BYTE PTR ds:[rsi]
 10013f9:	outs   dx,WORD PTR ds:[rsi]
 10013fb:	jb     0x100146a
 10013fd:	(bad)  
 10013fe:	je     0x1001469
 1001400:	outs   dx,DWORD PTR ds:[rsi]
 1001401:	outs   dx,BYTE PTR ds:[rsi]
	...
 100140e:	add    BYTE PTR [rax],al
 1001410:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001414:	jne    0x1001416
 1001416:	ins    BYTE PTR es:[rdi],dx
 1001417:	add    BYTE PTR [rax+rax*1+0x20],ah
 100141b:	add    BYTE PTR [rsi+0x0],ch
 100141e:	outs   dx,DWORD PTR ds:[rsi]
 100141f:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001423:	add    BYTE PTR [rcx+0x0],dh
 1001426:	jne    0x1001428
 1001428:	add    BYTE PTR gs:[rdx+0x0],dh
 100142c:	jns    0x100142e
 100142e:	and    BYTE PTR [rax],al
 1001430:	push   rbx
 1001431:	add    BYTE PTR [rcx+0x0],dl
 1001434:	rex.WR add BYTE PTR [rax],r12b
 1001437:	add    BYTE PTR [rcx+0x0],ch
 100143a:	outs   dx,BYTE PTR ds:[rsi]
 100143b:	add    BYTE PTR [rbx+0x0],dh
 100143e:	je     0x1001440
 1001440:	(bad)  
 1001441:	add    BYTE PTR [rsi+0x0],ch
 1001444:	movsxd eax,DWORD PTR [rax]
 1001446:	add    BYTE PTR gs:[rax],ah
 1001449:	add    BYTE PTR [rbx+0x0],dh
 100144c:	add    BYTE PTR gs:[rdx+0x0],dh
 1001450:	jbe    0x1001452
 1001452:	imul   eax,DWORD PTR [rax],0x650063
 1001458:	and    BYTE PTR [rax],al
 100145a:	(bad)  
 100145b:	add    BYTE PTR [rbx+0x0],ah
 100145e:	movsxd eax,DWORD PTR [rax]
 1001460:	outs   dx,DWORD PTR ds:[rsi]
 1001461:	add    BYTE PTR [rbp+0x0],dh
 1001464:	outs   dx,BYTE PTR ds:[rsi]
 1001465:	add    BYTE PTR [rax+rax*1+0x2e],dh
 1001469:	add    BYTE PTR [rax],al
 100146b:	add    BYTE PTR [rax],al
 100146d:	add    BYTE PTR [rax],al
 100146f:	add    BYTE PTR [rbx+0x0],dl
 1001472:	push   rcx
 1001473:	add    BYTE PTR [rax+rax*1+0x20],cl
 1001477:	add    BYTE PTR [rcx+0x0],al
 100147a:	add    BYTE PTR [rax],r12b
 100147d:	add    BYTE PTR [rax+0x0],cl
 1001480:	add    BYTE PTR gs:[rax+rax*1+0x70],ch
 1001485:	add    BYTE PTR [rbp+0x0],ah
 1001488:	jb     0x100148a
 100148a:	and    BYTE PTR [rax],al
 100148c:	jae    0x100148e
 100148e:	add    BYTE PTR gs:[rdx+0x0],dh
 1001492:	jbe    0x1001494
 1001494:	imul   eax,DWORD PTR [rax],0x650063
 100149a:	and    BYTE PTR [rax],al
 100149c:	imul   eax,DWORD PTR [rax],0x200073
 10014a2:	(bad)  
 10014a3:	add    BYTE PTR [rbp+0x0],dh
 10014a6:	jae    0x10014a8
 10014a8:	jns    0x10014aa
 10014aa:	sub    al,0x0
 10014ac:	and    BYTE PTR [rax],al
 10014ae:	jo     0x10014b0
 10014b0:	ins    BYTE PTR es:[rdi],dx
 10014b1:	add    BYTE PTR [rbp+0x0],ah
 10014b4:	(bad)  
 10014b5:	add    BYTE PTR [rbx+0x0],dh
 10014b8:	add    BYTE PTR gs:[rax],ah
 10014bb:	add    BYTE PTR [rax+rax*1+0x72],dh
 10014bf:	add    BYTE PTR [rcx+0x0],bh
 10014c2:	and    BYTE PTR [rax],al
 10014c4:	(bad)  
 10014c5:	add    BYTE PTR [rdi+0x0],ah
 10014c8:	(bad)  
 10014c9:	add    BYTE PTR [rcx+0x0],ch
 10014cc:	outs   dx,BYTE PTR ds:[rsi]
 10014cd:	add    BYTE PTR [rax],ah
 10014cf:	add    BYTE PTR [rax+rax*1+0x61],ch
 10014d3:	add    BYTE PTR [rax+rax*1+0x65],dh
 10014d7:	add    BYTE PTR [rdx+0x0],dh
 10014da:	add    BYTE PTR cs:[rax],al
 10014dd:	add    BYTE PTR [rax],al
 10014df:	add    BYTE PTR [rbx+0x0],al
 10014e2:	(bad)  
 10014e3:	add    BYTE PTR [rsi+0x0],ch
 10014e6:	outs   dx,BYTE PTR ds:[rsi]
 10014e7:	add    BYTE PTR [rdi+0x0],ch
 10014ea:	je     0x10014ec
 10014ec:	and    BYTE PTR [rax],al
 10014ee:	jae    0x10014f0
 10014f0:	je     0x10014f2
 10014f2:	(bad)  
 10014f3:	add    BYTE PTR [rdx+0x0],dh
 10014f6:	je     0x10014f8
 10014f8:	and    BYTE PTR [rax],al
 10014fa:	push   0x6c006500
 10014ff:	add    BYTE PTR [rax+0x0],dh
 1001502:	add    BYTE PTR gs:[rdx+0x0],dh
 1001506:	and    BYTE PTR [rax],al
 1001508:	jae    0x100150a
 100150a:	add    BYTE PTR gs:[rdx+0x0],dh
 100150e:	jbe    0x1001510
 1001510:	imul   eax,DWORD PTR [rax],0x650063
 1001516:	and    BYTE PTR [rax],al
 1001518:	je     0x100151a
 100151a:	outs   dx,DWORD PTR ds:[rsi]
 100151b:	add    BYTE PTR [rax],ah
 100151d:	add    BYTE PTR [rbx+0x0],ah
 1001520:	jb     0x1001522
 1001522:	add    BYTE PTR gs:[rcx+0x0],ah
 1001526:	je     0x1001528
 1001528:	add    BYTE PTR gs:[rax],ah
 100152b:	add    BYTE PTR [rbx+0x0],dl
 100152e:	rex.XB add BYTE PTR [r8+0x0],dl
 1001532:	and    BYTE PTR [rax],al
 1001534:	outs   dx,DWORD PTR ds:[rsi]
 1001535:	add    BYTE PTR [rdx+0x0],ah
 1001538:	push   0x0
 100153a:	add    BYTE PTR gs:[rbx+0x0],ah
 100153e:	je     0x1001540
 1001540:	add    BYTE PTR cs:[rax],al
	...
 100154f:	add    BYTE PTR [rbx+0x0],al
 1001552:	(bad)  
 1001553:	add    BYTE PTR [rsi+0x0],ch
 1001556:	outs   dx,BYTE PTR ds:[rsi]
 1001557:	add    BYTE PTR [rdi+0x0],ch
 100155a:	je     0x100155c
 100155c:	and    BYTE PTR [rax],al
 100155e:	jae    0x1001560
 1001560:	je     0x1001562
 1001562:	(bad)  
 1001563:	add    BYTE PTR [rdx+0x0],dh
 1001566:	je     0x1001568
 1001568:	and    BYTE PTR [rax],al
 100156a:	push   0x6c006500
 100156f:	add    BYTE PTR [rax+0x0],dh
 1001572:	add    BYTE PTR gs:[rdx+0x0],dh
 1001576:	and    BYTE PTR [rax],al
 1001578:	jae    0x100157a
 100157a:	add    BYTE PTR gs:[rdx+0x0],dh
 100157e:	jbe    0x1001580
 1001580:	imul   eax,DWORD PTR [rax],0x650063
 1001586:	and    BYTE PTR [rax],al
 1001588:	je     0x100158a
 100158a:	outs   dx,DWORD PTR ds:[rsi]
 100158b:	add    BYTE PTR [rax],ah
 100158d:	add    BYTE PTR [rbp+0x0],dh
 1001590:	jo     0x1001592
 1001592:	add    BYTE PTR fs:[rcx+0x0],ah
 1001596:	je     0x1001598
 1001598:	add    BYTE PTR gs:[rax],ah
 100159b:	add    BYTE PTR [rax+rax*1+0x41],al
 100159f:	add    BYTE PTR [rbx+0x0],al
 10015a2:	rex.WR add BYTE PTR [rbx+0x0],r14b
 10015a6:	and    BYTE PTR [rax],al
 10015a8:	outs   dx,DWORD PTR ds:[rsi]
 10015a9:	add    BYTE PTR [rsi+0x0],ah
 10015ac:	and    BYTE PTR [rax],al
 10015ae:	push   rbx
 10015af:	add    BYTE PTR [rbx+0x0],al
 10015b2:	push   rax
 10015b3:	add    BYTE PTR [rax],ah
 10015b5:	add    BYTE PTR [rcx+0x0],ah
 10015b8:	outs   dx,BYTE PTR ds:[rsi]
 10015b9:	add    BYTE PTR [rax+rax*1+0x20],ah
 10015bd:	add    BYTE PTR [rcx+0x0],ch
 10015c0:	je     0x10015c2
 10015c2:	jae    0x10015c4
 10015c4:	and    BYTE PTR [rax],al
 10015c6:	movsxd eax,DWORD PTR [rax]
 10015c8:	push   0x6c006900
 10015cd:	add    BYTE PTR [rax+rax*1+0x20],ah
 10015d1:	add    BYTE PTR [rdi+0x0],ch
 10015d4:	(bad)  
 10015d5:	add    BYTE PTR [rdx+0x0],ch
 10015d8:	add    BYTE PTR gs:[rbx+0x0],ah
 10015dc:	je     0x10015de
 10015de:	jae    0x10015e0
 10015e0:	add    BYTE PTR cs:[rax],al
	...
 10015ef:	add    BYTE PTR [rbx+0x0],al
 10015f2:	outs   dx,DWORD PTR ds:[rsi]
 10015f3:	add    BYTE PTR [rbp+0x0],dh
 10015f6:	ins    BYTE PTR es:[rdi],dx
 10015f7:	add    BYTE PTR [rax+rax*1+0x20],ah
 10015fb:	add    BYTE PTR [rsi+0x0],ch
 10015fe:	outs   dx,DWORD PTR ds:[rsi]
 10015ff:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001603:	add    BYTE PTR [rsi+0x0],ah
 1001606:	imul   eax,DWORD PTR [rax],0x64006e
 100160c:	and    BYTE PTR [rax],al
 100160e:	push   rbx
 100160f:	add    BYTE PTR [rcx+0x0],dl
 1001612:	rex.WR add BYTE PTR [rax],r12b
 1001615:	add    BYTE PTR [rbx+0x0],dl
 1001618:	add    BYTE PTR gs:[rdx+0x0],dh
 100161c:	jbe    0x100161e
 100161e:	add    BYTE PTR gs:[rdx+0x0],dh
 1001622:	and    BYTE PTR [rax],al
 1001624:	imul   eax,DWORD PTR [rax],0x73006e
 100162a:	je     0x100162c
 100162c:	(bad)  
 100162d:	add    BYTE PTR [rsi+0x0],ch
 1001630:	movsxd eax,DWORD PTR [rax]
 1001632:	add    BYTE PTR gs:[rax],ah
 1001635:	add    BYTE PTR [rbx+0x0],dh
 1001638:	add    BYTE PTR gs:[rdx+0x0],dh
 100163c:	jbe    0x100163e
 100163e:	imul   eax,DWORD PTR [rax],0x650063
 1001644:	and    BYTE PTR [rax],al
 1001646:	(bad)  
 1001647:	add    BYTE PTR [rbx+0x0],ah
 100164a:	movsxd eax,DWORD PTR [rax]
 100164c:	outs   dx,DWORD PTR ds:[rsi]
 100164d:	add    BYTE PTR [rbp+0x0],dh
 1001650:	outs   dx,BYTE PTR ds:[rsi]
 1001651:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001655:	add    BYTE PTR [rcx+0x0],ch
 1001658:	outs   dx,BYTE PTR ds:[rsi]
 1001659:	add    BYTE PTR [rax],ah
 100165b:	add    BYTE PTR [rax+rax*1+0x68],dh
 100165f:	add    BYTE PTR [rbp+0x0],ah
 1001662:	and    BYTE PTR [rax],al
 1001664:	jb     0x1001666
 1001666:	add    BYTE PTR gs:[rdi+0x0],ah
 100166a:	imul   eax,DWORD PTR [rax],0x740073
 1001670:	jb     0x1001672
 1001672:	jns    0x1001674
 1001674:	add    BYTE PTR cs:[rax],al
 1001677:	add    BYTE PTR [rbx+0x0],al
 100167a:	outs   dx,DWORD PTR ds:[rsi]
 100167b:	add    BYTE PTR [rcx+0x0],cl
 100167e:	outs   dx,BYTE PTR ds:[rsi]
 100167f:	add    BYTE PTR [rcx+0x0],ch
 1001682:	je     0x1001684
 1001684:	imul   eax,DWORD PTR [rax],0x6c0061
 100168a:	imul   eax,DWORD PTR [rax],0x65007a
 1001690:	and    BYTE PTR [rax],al
 1001692:	data16 add BYTE PTR [rcx+0x0],ah
 1001696:	imul   eax,DWORD PTR [rax],0x65006c
 100169c:	add    BYTE PTR fs:[rsi],ch
	...
 10016a7:	add    BYTE PTR [rcx+0x0],ah
 10016aa:	movsxd eax,DWORD PTR [rax]
 10016ac:	je     0x10016ae
 10016ae:	imul   eax,DWORD PTR [rax],0x650076
 10016b4:	add    BYTE PTR fs:[rbx+0x0],dh
 10016b8:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 10016bd:	add    BYTE PTR [rax+rax*1+0x0],ch
 10016c1:	add    BYTE PTR [rax],al
 10016c3:	add    BYTE PTR [rax],al
 10016c5:	add    BYTE PTR [rax],al
 10016c7:	add    BYTE PTR [rcx+0x44],al
 10016ca:	jae    0x1001713
 10016cc:	gs je  0x100171e
 10016cf:	(bad)  
 10016d0:	push   0x65
 10016d2:	movsxd esi,DWORD PTR [rax+rax*1+0x0]
 10016d6:	add    BYTE PTR [rax],al
 10016d8:	rex.RX jb 0x1001740
 10016db:	gs rex.B
 10016dd:	rex.R jae 0x100172d
 10016e0:	gs ins DWORD PTR es:[rdi],dx
 10016e2:	add    BYTE PTR [rax],al
 10016e4:	add    BYTE PTR [rax],al
 10016e6:	add    BYTE PTR [rax],al
 10016e8:	rex.WRXB add BYTE PTR [r8+0x0],r14b
 10016ec:	add    BYTE PTR gs:[rdx+0x0],dh
 10016f0:	(bad)  
 10016f1:	add    BYTE PTR [rax+rax*1+0x69],dh
 10016f5:	add    BYTE PTR [rdi+0x0],ch
 10016f8:	outs   dx,BYTE PTR ds:[rsi]
 10016f9:	add    BYTE PTR [rax],ah
 10016fb:	add    BYTE PTR [rsi+0x0],ah
 10016fe:	(bad)  
 10016ff:	add    BYTE PTR [rcx+0x0],ch
 1001702:	ins    BYTE PTR es:[rdi],dx
 1001703:	add    BYTE PTR [rbp+0x0],ah
 1001706:	add    BYTE PTR fs:[rsi],ch
 1001709:	add    BYTE PTR [rax],al
 100170b:	add    BYTE PTR [rax],al
 100170d:	add    BYTE PTR [rax],al
 100170f:	add    BYTE PTR [rax+rax*1+0x0],bl
 1001713:	add    BYTE PTR [rax],al
 1001715:	add    BYTE PTR [rax],al
 1001717:	add    BYTE PTR [rbx+0x0],ch
 100171a:	add    BYTE PTR gs:[rdx+0x0],dh
 100171e:	outs   dx,BYTE PTR ds:[rsi]
 100171f:	add    BYTE PTR [rbp+0x0],ah
 1001722:	ins    BYTE PTR es:[rdi],dx
 1001723:	add    BYTE PTR [rbx],dh
 1001725:	add    BYTE PTR [rdx],dh
 1001727:	add    BYTE PTR [rsi],ch
 1001729:	add    BYTE PTR [rax+rax*1+0x6c],ah
 100172d:	add    BYTE PTR [rax+rax*1+0x0],ch
 1001731:	add    BYTE PTR [rax],al
 1001733:	add    BYTE PTR [rax],al
 1001735:	add    BYTE PTR [rax],al
 1001737:	add    BYTE PTR [rdi+0x65],al
 100173a:	je     0x100177f
 100173c:	outs   dx,DWORD PTR ds:[rsi]
 100173d:	ins    DWORD PTR es:[rdi],dx
 100173e:	jo     0x10017b5
 1001740:	je     0x10017a7
 1001742:	jb     0x1001792
 1001744:	(bad)  
 1001745:	ins    DWORD PTR es:[rdi],dx
 1001746:	gs rex.RB js 0x10017a1
 100174a:	add    BYTE PTR [rax],al
 100174c:	add    BYTE PTR [rax],al
 100174e:	add    BYTE PTR [rax],al
 1001750:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 1001754:	push   rsp
 1001755:	add    BYTE PTR [rcx+0x0],al
 1001758:	push   rax
 1001759:	add    BYTE PTR [rcx+0x0],cl
 100175c:	xor    eax,DWORD PTR [rax]
 100175e:	xor    al,BYTE PTR [rax]
 1001760:	add    BYTE PTR cs:[rax+rax*1+0x4c],al
 1001765:	add    BYTE PTR [rax+rax*1+0x0],cl
 1001769:	add    BYTE PTR [rax],al
 100176b:	add    BYTE PTR [rax],al
 100176d:	add    BYTE PTR [rax],al
 100176f:	add    BYTE PTR [rbx+rsi*2+0x47],al
 1001773:	gs je  0x10017ba
 1001776:	movsxd ecx,DWORD PTR [rsi+0x61]
 1001779:	ins    DWORD PTR es:[rdi],dx
 100177a:	gs push rdi
 100177c:	add    BYTE PTR [rax],al
 100177e:	add    BYTE PTR [rax],al
 1001780:	rex.WRX
 1001781:	gs je  0x10017c5
 1001784:	jo     0x10017ef
 1001786:	rex.X jne 0x10017ef
 1001789:	data16 gs jb 0x10017d3
 100178d:	jb     0x10017f4
 100178f:	add    BYTE PTR gs:[rax],al
 1001792:	add    BYTE PTR [rax],al
 1001794:	and    al,0x0
 1001796:	add    BYTE PTR [rax],al
 1001798:	outs   dx,BYTE PTR ds:[rsi]
 1001799:	add    BYTE PTR [rax+rax*1+0x64],dh
 100179d:	add    BYTE PTR [rbx+0x0],dh
 10017a0:	(bad)  
 10017a1:	add    BYTE PTR [rax+0x0],dh
 10017a4:	imul   eax,DWORD PTR [rax],0x64002e
 10017aa:	ins    BYTE PTR es:[rdi],dx
 10017ab:	add    BYTE PTR [rax+rax*1+0x0],ch
 10017af:	add    BYTE PTR [rbx+rsi*2+0x42],al
 10017b3:	imul   ebp,DWORD PTR [rsi+0x64],0x68746957
 10017ba:	push   rbx
 10017bb:	jo     0x100182b
 10017bd:	push   rdi
 10017be:	add    BYTE PTR [rax],al
 10017c0:	rex.R jae 0x1001806
 10017c3:	jb     0x1001826
 10017c5:	movsxd ebp,DWORD PTR [rbx+0x4e]
 10017c8:	(bad)  
 10017c9:	ins    DWORD PTR es:[rdi],dx
 10017ca:	gs jae 0x1001824
 10017cd:	add    BYTE PTR [rax],al
 10017cf:	add    BYTE PTR [rbx+rsi*2+0x46],al
 10017d3:	jb     0x100183a
 10017d5:	gs rex.WRX (bad) 
 10017d8:	ins    DWORD PTR es:[rdi],dx
 10017d9:	gs push rdx
 10017db:	gs jae 0x1001853
 10017de:	ins    BYTE PTR es:[rdi],dx
 10017df:	je     0x1001838
 10017e1:	add    BYTE PTR [rax],al
 10017e3:	add    BYTE PTR [rax],al
 10017e5:	add    BYTE PTR [rax],al
 10017e7:	add    BYTE PTR [rip+0x20007300],ah        # 0x21008aed
 10017ed:	add    BYTE PTR [rip+0x7300],ah        # 0x1008af3
 10017f3:	add    BYTE PTR [rax],al
 10017f5:	add    BYTE PTR [rax],al
 10017f7:	add    BYTE PTR [rax+0x0],ch
 10017fa:	jb     0x10017fc
 10017fc:	cmp    al,BYTE PTR [rax]
 10017fe:	and    BYTE PTR [rax],al
 1001800:	and    eax,0x5800
 1001805:	add    BYTE PTR [rax],al
 1001807:	add    BYTE PTR [rip+0x7300],ah        # 0x1008b0d
 100180d:	add    BYTE PTR [rax],al
 100180f:	add    BYTE PTR [rdi+0x0],ch
 1001812:	(bad)  
 1001813:	add    BYTE PTR [rdx+0x0],ch
 1001816:	add    BYTE PTR gs:[rbx+0x0],ah
 100181a:	je     0x100181c
 100181c:	rex.RXB add BYTE PTR [r13+0x0],r10b
 1001820:	rex.WB add BYTE PTR [r8+rax*1+0x0],al
 1001825:	add    BYTE PTR [rax],al
 1001827:	add    BYTE PTR [rax+rax*1+0x44],cl
 100182b:	add    BYTE PTR [rcx+0x0],al
 100182e:	push   rax
 100182f:	add    BYTE PTR [rdx],bh
 1001831:	add    BYTE PTR [rdi],ch
 1001833:	add    BYTE PTR [rdi],ch
 1001835:	add    BYTE PTR [rax],al
 1001837:	add    BYTE PTR [rbx+0x0],ah
 100183a:	outs   dx,BYTE PTR ds:[rsi]
 100183b:	add    BYTE PTR [rip+0x2c000000],bh        # 0x2d001841
 1001841:	add    BYTE PTR [rax],al
 1001843:	add    BYTE PTR [rax],al
 1001845:	add    BYTE PTR [rax],al
 1001847:	add    BYTE PTR [rax+rax*1+0x44],cl
 100184b:	add    BYTE PTR [rcx+0x0],al
 100184e:	push   rax
 100184f:	add    BYTE PTR [rdx],bh
 1001851:	add    BYTE PTR [rdi],ch
 1001853:	add    BYTE PTR [rdi],ch
 1001855:	add    BYTE PTR [rax+rax*1],bh
 1001858:	rex.RXB add BYTE PTR [r13+0x0],r10b
 100185c:	rex.WB add BYTE PTR [r8+rax*1+0x3d],al
 1001861:	add    BYTE PTR [rax],al
 1001863:	add    BYTE PTR [rsi],bh
 1001865:	add    BYTE PTR [rax],al
 1001867:	add    BYTE PTR [rax+rax*1+0x69],ah
 100186b:	add    BYTE PTR [rbx+0x0],dh
 100186e:	je     0x1001870
 1001870:	imul   eax,DWORD PTR [rax],0x67006e
 1001876:	jne    0x1001878
 1001878:	imul   eax,DWORD PTR [rax],0x680073
 100187e:	add    BYTE PTR gs:[rax+rax*1+0x4e],ah
 1001883:	add    BYTE PTR [rcx+0x0],ah
 1001886:	ins    DWORD PTR es:[rdi],dx
 1001887:	add    BYTE PTR [rbp+0x0],ah
 100188a:	add    BYTE PTR [rax],al
 100188c:	add    BYTE PTR [rax],al
 100188e:	add    BYTE PTR [rax],al
 1001890:	rex.XB add BYTE PTR [r14+0x0],cl
 1001894:	cmp    eax,0x5c000000
 1001899:	add    BYTE PTR [rbx+0x0],dl
 100189c:	push   rcx
 100189d:	add    BYTE PTR [rax+rax*1+0x53],cl
 10018a1:	add    BYTE PTR [rbp+0x0],ah
 10018a4:	jb     0x10018a6
 10018a6:	jbe    0x10018a8
 10018a8:	add    BYTE PTR gs:[rdx+0x0],dh
 10018ac:	push   rbx
 10018ad:	add    BYTE PTR [rbx+0x0],al
 10018b0:	push   rax
 10018b1:	add    BYTE PTR [rax],al
 10018b3:	add    BYTE PTR [rdx],bh
 10018b5:	add    BYTE PTR [rax],al
 10018b7:	add    BYTE PTR [rbp+0x0],ch
 10018ba:	push   rbx
 10018bb:	add    BYTE PTR [rip+0x51005300],ch        # 0x52006bc1
 10018c1:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10018c5:	add    BYTE PTR [rsi+0x0],cl
 10018c8:	(bad)  
 10018c9:	add    BYTE PTR [rbp+0x0],ch
 10018cc:	add    BYTE PTR gs:[rax],al
 10018cf:	add    BYTE PTR [rdi+0x0],ch
 10018d2:	(bad)  
 10018d3:	add    BYTE PTR [rdx+0x0],ch
 10018d6:	add    BYTE PTR gs:[rbx+0x0],ah
 10018da:	je     0x10018dc
 10018dc:	add    BYTE PTR [r8+r8*1+0x61],bpl
 10018e1:	add    BYTE PTR [rbx+0x0],dh
 10018e4:	jae    0x10018e6
 10018e6:	add    BYTE PTR [rax],al
 10018e8:	ins    DWORD PTR es:[rdi],dx
 10018e9:	add    BYTE PTR [rbx+0x0],dl
 10018ec:	sub    eax,0x51005300
 10018f1:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10018f5:	add    BYTE PTR [rbx+0x0],dl
 10018f8:	push   rcx
 10018f9:	add    BYTE PTR [rax+rax*1+0x44],cl
 10018fd:	add    BYTE PTR [rcx+0x0],ah
 1001900:	je     0x1001902
 1001902:	(bad)  
 1001903:	add    BYTE PTR [rdx+0x0],ah
 1001906:	(bad)  
 1001907:	add    BYTE PTR [rbx+0x0],dh
 100190a:	add    BYTE PTR gs:[rax],al
 100190d:	add    BYTE PTR [rax],al
 100190f:	add    BYTE PTR [rbp+0x0],ch
 1001912:	push   rbx
 1001913:	add    BYTE PTR [rip+0x51005300],ch        # 0x52006c19
 1001919:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100191d:	add    BYTE PTR [rbx+0x0],dl
 1001920:	push   rcx
 1001921:	add    BYTE PTR [rax+rax*1+0x50],cl
 1001925:	add    BYTE PTR [rbp+0x0],dh
 1001928:	(bad)  
 1001929:	add    BYTE PTR [rax+rax*1+0x69],ch
 100192d:	add    BYTE PTR [rbx+0x0],ah
 1001930:	(bad)  
 1001931:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001935:	add    BYTE PTR [rdi+0x0],ch
 1001938:	outs   dx,BYTE PTR ds:[rsi]
 1001939:	add    BYTE PTR [rax],al
 100193b:	add    BYTE PTR [rax],al
 100193d:	add    BYTE PTR [rax],al
 100193f:	add    BYTE PTR [rbp+0x0],ch
 1001942:	push   rbx
 1001943:	add    BYTE PTR [rip+0x51005300],ch        # 0x52006c49
 1001949:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100194d:	add    BYTE PTR [rbx+0x0],dl
 1001950:	push   rcx
 1001951:	add    BYTE PTR [rax+rax*1+0x52],cl
 1001955:	add    BYTE PTR [rbp+0x0],ah
 1001958:	jo     0x100195a
 100195a:	outs   dx,DWORD PTR ds:[rsi]
 100195b:	add    BYTE PTR [rbx+0x0],dh
 100195e:	imul   eax,DWORD PTR [rax],0x6f0074
 1001964:	jb     0x1001966
 1001966:	jns    0x1001968
	...
 1001970:	rex.WB add BYTE PTR [r14+0x0],bpl
 1001974:	data16 add BYTE PTR [rdi+0x0],ch
 1001978:	jb     0x100197a
 100197a:	ins    DWORD PTR es:[rdi],dx
 100197b:	add    BYTE PTR [rcx+0x0],ah
 100197e:	je     0x1001980
 1001980:	imul   eax,DWORD PTR [rax],0x6e006f
 1001986:	add    BYTE PTR [rax],al
 1001988:	rex.RXB add BYTE PTR [r8+0x0],r10b
 100198c:	push   rbx
 100198d:	add    BYTE PTR [rax+rax*1+0x61],cl
 1001991:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001995:	add    BYTE PTR [rax+rax*1+0x75],dh
 1001999:	add    BYTE PTR [rax+rax*1+0x65],ah
 100199d:	add    BYTE PTR [rax],al
 100199f:	add    BYTE PTR [rdi+0x0],al
 10019a2:	push   rax
 10019a3:	add    BYTE PTR [rbx+0x0],dl
 10019a6:	rex.WR add BYTE PTR [rdi+0x0],r13b
 10019aa:	outs   dx,BYTE PTR ds:[rsi]
 10019ab:	add    BYTE PTR [rdi+0x0],ah
 10019ae:	imul   eax,DWORD PTR [rax],0x750074
 10019b4:	add    BYTE PTR fs:[rbp+0x0],ah
	...
 10019c0:	rex.RXB add BYTE PTR [r8+0x0],r10b
 10019c4:	push   rbx
 10019c5:	add    BYTE PTR [rax+0x0],cl
 10019c8:	add    BYTE PTR gs:[rcx+0x0],ch
 10019cc:	add    BYTE PTR [eax+0x0],ch
 10019d0:	je     0x10019d2
 10019d2:	add    BYTE PTR [rax],al
 10019d4:	add    BYTE PTR [rax],al
 10019d6:	add    BYTE PTR [rax],al
 10019d8:	push   rbx
 10019d9:	add    BYTE PTR [rbx+0x0],al
 10019dc:	push   rax
 10019dd:	add    BYTE PTR [rax],ah
 10019df:	add    BYTE PTR [rbx+0x0],cl
 10019e2:	add    BYTE PTR gs:[rcx+0x0],bh
 10019e6:	and    BYTE PTR [rax],al
 10019e8:	xor    DWORD PTR [rax],eax
 10019ea:	add    BYTE PTR [rax],al
 10019ec:	add    BYTE PTR [rax],al
 10019ee:	add    BYTE PTR [rax],al
 10019f0:	push   rbx
 10019f1:	add    BYTE PTR [rbx+0x0],al
 10019f4:	push   rax
 10019f5:	add    BYTE PTR [rax],ah
 10019f7:	add    BYTE PTR [rbx+0x0],cl
 10019fa:	add    BYTE PTR gs:[rcx+0x0],bh
 10019fe:	and    BYTE PTR [rax],al
 1001a00:	xor    al,BYTE PTR [rax]
 1001a02:	add    BYTE PTR [rax],al
 1001a04:	add    BYTE PTR [rax],al
 1001a06:	add    BYTE PTR [rax],al
 1001a08:	push   rbx
 1001a09:	add    BYTE PTR [rbx+0x0],al
 1001a0c:	push   rax
 1001a0d:	add    BYTE PTR [rax],ah
 1001a0f:	add    BYTE PTR [rbx+0x0],cl
 1001a12:	add    BYTE PTR gs:[rcx+0x0],bh
 1001a16:	and    BYTE PTR [rax],al
 1001a18:	xor    eax,DWORD PTR [rax]
 1001a1a:	add    BYTE PTR [rax],al
 1001a1c:	add    BYTE PTR [rax],al
 1001a1e:	add    BYTE PTR [rax],al
 1001a20:	push   rbx
 1001a21:	add    BYTE PTR [rbx+0x0],al
 1001a24:	push   rax
 1001a25:	add    BYTE PTR [rax],ah
 1001a27:	add    BYTE PTR [rbx+0x0],cl
 1001a2a:	add    BYTE PTR gs:[rcx+0x0],bh
 1001a2e:	and    BYTE PTR [rax],al
 1001a30:	xor    al,0x0
 1001a32:	add    BYTE PTR [rax],al
 1001a34:	add    BYTE PTR [rax],al
 1001a36:	add    BYTE PTR [rax],al
 1001a38:	push   rbx
 1001a39:	add    BYTE PTR [rbx+0x0],al
 1001a3c:	push   rax
 1001a3d:	add    BYTE PTR [rax],ah
 1001a3f:	add    BYTE PTR [rbx+0x0],cl
 1001a42:	add    BYTE PTR gs:[rcx+0x0],bh
 1001a46:	and    BYTE PTR [rax],al
 1001a48:	xor    eax,0x0
 1001a4d:	add    BYTE PTR [rax],al
 1001a4f:	add    BYTE PTR [rcx+0x0],al
 1001a52:	jo     0x1001a54
 1001a54:	jo     0x1001a56
 1001a56:	ins    BYTE PTR es:[rdi],dx
 1001a57:	add    BYTE PTR [rax],ah
 1001a59:	add    BYTE PTR [rcx],dh
 1001a5b:	add    BYTE PTR [rax],al
 1001a5d:	add    BYTE PTR [rax],al
 1001a5f:	add    BYTE PTR [rcx+0x0],al
 1001a62:	jo     0x1001a64
 1001a64:	jo     0x1001a66
 1001a66:	ins    BYTE PTR es:[rdi],dx
 1001a67:	add    BYTE PTR [rax],ah
 1001a69:	add    BYTE PTR [rdx],dh
 1001a6b:	add    BYTE PTR [rax],al
 1001a6d:	add    BYTE PTR [rax],al
 1001a6f:	add    BYTE PTR [rcx+0x0],al
 1001a72:	jo     0x1001a74
 1001a74:	jo     0x1001a76
 1001a76:	ins    BYTE PTR es:[rdi],dx
 1001a77:	add    BYTE PTR [rax],ah
 1001a79:	add    BYTE PTR [rbx],dh
 1001a7b:	add    BYTE PTR [rax],al
 1001a7d:	add    BYTE PTR [rax],al
 1001a7f:	add    BYTE PTR [rcx+0x0],al
 1001a82:	jo     0x1001a84
 1001a84:	jo     0x1001a86
 1001a86:	ins    BYTE PTR es:[rdi],dx
 1001a87:	add    BYTE PTR [rax],ah
 1001a89:	add    BYTE PTR [rax+rax*1],dh
 1001a8c:	add    BYTE PTR [rax],al
 1001a8e:	add    BYTE PTR [rax],al
 1001a90:	add    BYTE PTR [r8+0x0],sil
 1001a94:	jo     0x1001a96
 1001a96:	ins    BYTE PTR es:[rdi],dx
 1001a97:	add    BYTE PTR [rax],ah
 1001a99:	add    BYTE PTR [rip+0x0],dh        # 0x1001a9f
 1001a9f:	add    BYTE PTR [rax+0x0],al
 1001aa2:	add    BYTE PTR [rax],al
 1001aa4:	(bad)  
 1001aa5:	add    BYTE PTR [rax],al
 1001aa7:	add    BYTE PTR [rbp+0x0],cl
 1001aaa:	push   rbx
 1001aab:	add    BYTE PTR [rbx+0x0],dl
 1001aae:	push   rcx
 1001aaf:	add    BYTE PTR [rax+rax*1+0x53],cl
 1001ab3:	add    BYTE PTR [rbp+0x0],al
 1001ab6:	push   rdx
 1001ab7:	add    BYTE PTR [rsi+0x0],dl
 1001aba:	add    BYTE PTR [r10+0x0],r10b
 1001abe:	add    BYTE PTR [rax],al
 1001ac0:	add    BYTE PTR [rdx+0x0],r8b
 1001ac4:	rex.WXB add BYTE PTR [r13+0x0],spl
 1001ac8:	jns    0x1001aca
 1001aca:	xor    eax,DWORD PTR [rax]
 1001acc:	add    BYTE PTR [rax],al
 1001ace:	add    BYTE PTR [rax],al
 1001ad0:	add    BYTE PTR [rdx+0x0],r8b
 1001ad4:	rex.WXB add BYTE PTR [r13+0x0],spl
 1001ad8:	jns    0x1001ada
 1001ada:	xor    al,0x0
 1001adc:	add    BYTE PTR [rax],al
 1001ade:	add    BYTE PTR [rax],al
 1001ae0:	add    BYTE PTR [rdx+0x0],r8b
 1001ae4:	rex.WXB add BYTE PTR [r13+0x0],spl
 1001ae8:	jns    0x1001aea
 1001aea:	xor    eax,0x0
 1001aef:	add    BYTE PTR [rax],ah
 1001af1:	add    BYTE PTR [rax],al
 1001af3:	add    BYTE PTR [rax],al
 1001af5:	add    BYTE PTR [rax],al
 1001af7:	add    BYTE PTR [rbp+0x0],ch
 1001afa:	push   rbx
 1001afb:	add    BYTE PTR [rip+0x51005300],ch        # 0x52006e01
 1001b01:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001b05:	add    BYTE PTR [rbx+0x0],dl
 1001b08:	push   rcx
 1001b09:	add    BYTE PTR [rax+rax*1+0x53],cl
 1001b0d:	add    BYTE PTR [rbp+0x0],ah
 1001b10:	jb     0x1001b12
 1001b12:	jbe    0x1001b14
 1001b14:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1001b20:	ins    DWORD PTR es:[rdi],dx
 1001b21:	add    BYTE PTR [rbx+0x0],dl
 1001b24:	sub    eax,0x51005300
 1001b29:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001b2d:	add    BYTE PTR [rdi+0x0],cl
 1001b30:	rex.WR add BYTE PTR [rcx+0x0],r8b
 1001b34:	push   rax
 1001b35:	add    BYTE PTR [rbx+0x0],dl
 1001b38:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b3c:	jbe    0x1001b3e
 1001b3e:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b42:	add    BYTE PTR [rax],al
 1001b44:	add    BYTE PTR [rax],al
 1001b46:	add    BYTE PTR [rax],al
 1001b48:	push   rbx
 1001b49:	add    BYTE PTR [rbx+0x0],al
 1001b4c:	push   rax
 1001b4d:	add    BYTE PTR [rax],al
 1001b4f:	add    BYTE PTR [rbp+0x0],cl
 1001b52:	imul   eax,DWORD PTR [rax],0x720063
 1001b58:	outs   dx,DWORD PTR ds:[rsi]
 1001b59:	add    BYTE PTR [rbx+0x0],dh
 1001b5c:	outs   dx,DWORD PTR ds:[rsi]
 1001b5d:	add    BYTE PTR [rsi+0x0],ah
 1001b60:	je     0x1001b62
 1001b62:	add    BYTE PTR [rax],al
 1001b64:	add    BYTE PTR [rax],al
 1001b66:	add    BYTE PTR [rax],al
 1001b68:	push   rbx
 1001b69:	add    BYTE PTR [rcx+0x0],dl
 1001b6c:	rex.WR add BYTE PTR [rax],r12b
 1001b6f:	add    BYTE PTR [rbx+0x0],dl
 1001b72:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b76:	jbe    0x1001b78
 1001b78:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b7c:	add    BYTE PTR [rax],al
 1001b7e:	add    BYTE PTR [rax],al
 1001b80:	push   rbp
 1001b81:	add    BYTE PTR [rsi+0x0],ch
 1001b84:	imul   eax,DWORD PTR [rax],0x6e
 1001b87:	add    BYTE PTR [rdi+0x0],ch
 1001b8a:	ja     0x1001b8c
 1001b8c:	outs   dx,BYTE PTR ds:[rsi]
 1001b8d:	add    BYTE PTR [rax],al
 1001b8f:	add    BYTE PTR [rbx+0x0],al
 1001b92:	outs   dx,DWORD PTR ds:[rsi]
 1001b93:	add    BYTE PTR [rsi+0x0],ch
 1001b96:	je     0x1001b98
 1001b98:	(bad)  
 1001b99:	add    BYTE PTR [rbx+0x0],ah
 1001b9c:	je     0x1001b9e
 1001b9e:	add    BYTE PTR [rax],al
 1001ba0:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1001ba4:	movsxd eax,DWORD PTR [rax]
 1001ba6:	(bad)  
 1001ba7:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001bab:	add    BYTE PTR [rdi+0x0],ch
 1001bae:	outs   dx,BYTE PTR ds:[rsi]
	...
 1001bb7:	add    BYTE PTR [rbx+0x0],dl
 1001bba:	add    BYTE PTR gs:[rdx+0x0],dh
 1001bbe:	jbe    0x1001bc0
 1001bc0:	imul   eax,DWORD PTR [rax],0x650063
 1001bc6:	and    BYTE PTR [rax],al
 1001bc8:	add    BYTE PTR [r11+0x0],spl
 1001bcc:	movsxd eax,DWORD PTR [rax]
 1001bce:	outs   dx,DWORD PTR ds:[rsi]
 1001bcf:	add    BYTE PTR [rbp+0x0],dh
 1001bd2:	outs   dx,BYTE PTR ds:[rsi]
 1001bd3:	add    BYTE PTR [rax+rax*1+0x0],dh
	...
 1001bdf:	add    BYTE PTR [rax],bh
 1001be1:	add    BYTE PTR [rbx],dh
 1001be3:	add    BYTE PTR [rbx+0x0],al
 1001be6:	xor    al,BYTE PTR [rax]
 1001be8:	cmp    DWORD PTR [rax],eax
 1001bea:	cmp    BYTE PTR [rax],al
 1001bec:	(bad)  
 1001bed:	add    BYTE PTR [rax],dh
 1001bef:	add    BYTE PTR [rip+0x44003100],ch        # 0x45004cf5
 1001bf5:	add    BYTE PTR [rsi+0x0],al
 1001bf8:	rex.XB add BYTE PTR [rip+0x31003100],bpl        # 0x32004cff
 1001bff:	add    BYTE PTR [rax+rax*1+0x33],ah
 1001c03:	add    BYTE PTR [rip+0x31004100],ch        # 0x32005d09
 1001c09:	add    BYTE PTR [rcx],bh
 1001c0b:	add    BYTE PTR [rbx],dh
 1001c0d:	add    BYTE PTR [rip+0x30003000],ch        # 0x31004c13
 1001c13:	add    BYTE PTR [rax],dh
 1001c15:	add    BYTE PTR [rax],dh
 1001c17:	add    BYTE PTR [rsi+0x0],al
 1001c1a:	cmp    BYTE PTR [rax],al
 1001c1c:	(bad)  
 1001c1d:	add    BYTE PTR [rcx+0x0],al
 1001c20:	cmp    DWORD PTR [rax],eax
 1001c22:	xor    BYTE PTR [rax],al
 1001c24:	cmp    DWORD PTR [rax],eax
 1001c26:	cmp    DWORD PTR [rax],eax
	...
 1001c30:	add    BYTE PTR [r14+0x0],r8b
 1001c34:	add    BYTE PTR [r8+r8*1+0x43],al
 1001c39:	add    BYTE PTR [rbp+0x0],al
 1001c3c:	add    BYTE PTR [r8],r14b
 1001c3f:	add    BYTE PTR [rip+0x43004300],ch        # 0x44005f45
 1001c45:	add    BYTE PTR [rax+rax*1+0x42],al
 1001c49:	add    BYTE PTR [rip+0x31003100],ch        # 0x32004d4f
 1001c4f:	add    BYTE PTR [rax+rax*1+0x32],ah
 1001c53:	add    BYTE PTR [rip+0x37003800],ch        # 0x38005459
 1001c59:	add    BYTE PTR [rip+0x2d003700],dh        # 0x2e00535f
 1001c5f:	add    BYTE PTR [rax],dh
 1001c61:	add    BYTE PTR [rax],dh
 1001c63:	add    BYTE PTR [rbx+0x0],al
 1001c66:	xor    BYTE PTR [rax],al
 1001c68:	xor    al,0x0
 1001c6a:	rex.RX add BYTE PTR [rcx],r15b
 1001c6d:	add    BYTE PTR [rax+rax*1],dh
 1001c70:	add    BYTE PTR [r9],dil
 1001c73:	add    BYTE PTR [rax],bh
 1001c75:	add    BYTE PTR [rcx],bh
	...
 1001c7f:	add    BYTE PTR [rcx],dh
 1001c81:	add    BYTE PTR [rax+rax*1],dh
 1001c84:	xor    al,0x0
 1001c86:	xor    al,BYTE PTR [rax]
 1001c88:	cmp    DWORD PTR [rax],eax
 1001c8a:	xor    al,0x0
 1001c8c:	add    BYTE PTR ss:[rbp+0x0],al
 1001c90:	sub    eax,0x41003000
 1001c95:	add    BYTE PTR [rax+rax*1],dh
 1001c98:	xor    BYTE PTR [rax],al
 1001c9a:	sub    eax,0x31003100
 1001c9f:	add    BYTE PTR [rax+rax*1+0x33],ah
 1001ca3:	add    BYTE PTR [rip+0x44003900],ch        # 0x450055a9
 1001ca9:	add    BYTE PTR [rbp+0x0],al
 1001cac:	xor    al,BYTE PTR [rax]
 1001cae:	sub    eax,0x30003000
 1001cb3:	add    BYTE PTR [rbx+0x0],al
 1001cb6:	xor    BYTE PTR [rax],al
 1001cb8:	xor    al,0x0
 1001cba:	rex.RX add BYTE PTR [rsi],r14b
 1001cbd:	add    BYTE PTR [rax],bh
 1001cbf:	add    BYTE PTR [rax],bh
 1001cc1:	add    BYTE PTR [rax],bh
 1001cc3:	add    BYTE PTR [rax],bh
 1001cc5:	add    BYTE PTR [rdi],dh
 1001cc7:	add    BYTE PTR [rax],al
 1001cc9:	add    BYTE PTR [rax],al
 1001ccb:	add    BYTE PTR [rax+rax*1+0x42],al
	...
 1001cd7:	add    BYTE PTR [rax+0x0],dl
 1001cda:	push   rbp
 1001cdb:	add    BYTE PTR [rdx+0x0],al
 1001cde:	add    BYTE PTR [rax],al
 1001ce0:	push   rdx
 1001ce1:	add    BYTE PTR [rbp+0x0],al
 1001ce4:	push   rax
 1001ce5:	add    BYTE PTR [rax],al
 1001ce7:	add    BYTE PTR [rip+0x2e000000],bh        # 0x2f001ced
 1001ced:	add    BYTE PTR [rax],al
 1001cef:	add    BYTE PTR [rsi+0x0],ch
 1001cf2:	push   rsp
 1001cf3:	add    BYTE PTR [rbx+0x0],dl
 1001cf6:	add    BYTE PTR gs:[rbx+0x0],ah
 1001cfa:	jne    0x1001cfc
 1001cfc:	jb     0x1001cfe
 1001cfe:	imul   eax,DWORD PTR [rax],0x790074
 1001d04:	add    BYTE PTR [rbp+0x0],r12b
 1001d08:	jae    0x1001d0a
 1001d0a:	movsxd eax,DWORD PTR [rax]
 1001d0c:	jb     0x1001d0e
 1001d0e:	imul   eax,DWORD PTR [rax],0x740070
 1001d14:	outs   dx,DWORD PTR ds:[rsi]
 1001d15:	add    BYTE PTR [rdx+0x0],dh
 1001d18:	add    BYTE PTR [rax],al
 1001d1a:	add    BYTE PTR [rax],al
 1001d1c:	movsxd eax,DWORD PTR [rax]
 1001d1e:	outs   dx,BYTE PTR ds:[rsi]
	...
 1001d27:	add    BYTE PTR [rbp+0x0],ch
 1001d2a:	push   rbx
 1001d2b:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007031
 1001d31:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001d35:	add    BYTE PTR [rax+rax*1+0x65],al
 1001d39:	add    BYTE PTR [rbx+0x0],dh
 1001d3c:	movsxd eax,DWORD PTR [rax]
 1001d3e:	jb     0x1001d40
 1001d40:	imul   eax,DWORD PTR [rax],0x740070
 1001d46:	imul   eax,DWORD PTR [rax],0x6e006f
 1001d4c:	add    BYTE PTR [rax],al
 1001d4e:	add    BYTE PTR [rax],al
 1001d50:	ins    DWORD PTR es:[rdi],dx
 1001d51:	add    BYTE PTR [rbx+0x0],dl
 1001d54:	sub    eax,0x51005300
 1001d59:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001d5d:	add    BYTE PTR [rcx+0x0],al
 1001d60:	ins    BYTE PTR es:[rdi],dx
 1001d61:	add    BYTE PTR [rcx+0x0],ch
 1001d64:	(bad)  
 1001d65:	add    BYTE PTR [rbx+0x0],dh
	...
 1001d70:	ins    DWORD PTR es:[rdi],dx
 1001d71:	add    BYTE PTR [rbx+0x0],dl
 1001d74:	sub    eax,0x51005300
 1001d79:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001d7d:	add    BYTE PTR [rbx+0x0],al
 1001d80:	outs   dx,DWORD PTR ds:[rsi]
 1001d81:	add    BYTE PTR [rsi+0x0],ch
 1001d84:	je     0x1001d86
 1001d86:	(bad)  
 1001d87:	add    BYTE PTR [rbx+0x0],ah
 1001d8a:	je     0x1001d8c
 1001d8c:	add    BYTE PTR [rax],al
 1001d8e:	add    BYTE PTR [rax],al
 1001d90:	ins    DWORD PTR es:[rdi],dx
 1001d91:	add    BYTE PTR [rbx+0x0],dl
 1001d94:	sub    eax,0x51005300
 1001d99:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001d9d:	add    BYTE PTR [rbx+0x0],dl
 1001da0:	imul   eax,DWORD PTR [rax],0x65007a
 1001da6:	add    BYTE PTR [rax],al
 1001da8:	ins    DWORD PTR es:[rdi],dx
 1001da9:	add    BYTE PTR [rbx+0x0],dl
 1001dac:	sub    eax,0x51005300
 1001db1:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001db5:	add    BYTE PTR [rbx+0x0],al
 1001db8:	jb     0x1001dba
 1001dba:	add    BYTE PTR gs:[rcx+0x0],ah
 1001dbe:	je     0x1001dc0
 1001dc0:	imul   eax,DWORD PTR [rax],0x6e006f
 1001dc6:	add    BYTE PTR [rcx+0x0],r12b
 1001dca:	je     0x1001dcc
 1001dcc:	add    BYTE PTR gs:[rax],al
 1001dcf:	add    BYTE PTR [rbp+0x0],ch
 1001dd2:	push   rbx
 1001dd3:	add    BYTE PTR [rip+0x51005300],ch        # 0x520070d9
 1001dd9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001ddd:	add    BYTE PTR [rax+rax*1+0x61],cl
 1001de1:	add    BYTE PTR [rbx+0x0],dh
 1001de4:	je     0x1001de6
 1001de6:	rex.X add BYTE PTR [rcx+0x0],spl
 1001dea:	movsxd eax,DWORD PTR [rax]
 1001dec:	imul   eax,DWORD PTR [rax],0x75
 1001def:	add    BYTE PTR [rax+0x0],dh
 1001df2:	add    BYTE PTR [rcx+0x0],r12b
 1001df6:	je     0x1001df8
 1001df8:	add    BYTE PTR gs:[rax],al
 1001dfb:	add    BYTE PTR [rax],al
 1001dfd:	add    BYTE PTR [rax],al
 1001dff:	add    BYTE PTR [rbp+0x0],ch
 1001e02:	push   rbx
 1001e03:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007109
 1001e09:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001e0d:	add    BYTE PTR [rax+rax*1+0x61],cl
 1001e11:	add    BYTE PTR [rbx+0x0],dh
 1001e14:	je     0x1001e16
 1001e16:	add    BYTE PTR [rcx+0x0],r13b
 1001e1a:	(bad)  
 1001e1b:	add    BYTE PTR [rdi+0x0],ah
 1001e1e:	outs   dx,BYTE PTR ds:[rsi]
 1001e1f:	add    BYTE PTR [rdi+0x0],ch
 1001e22:	jae    0x1001e24
 1001e24:	je     0x1001e26
 1001e26:	imul   eax,DWORD PTR [rax],0x440063
 1001e2c:	(bad)  
 1001e2d:	add    BYTE PTR [rax+rax*1+0x65],dh
 1001e31:	add    BYTE PTR [rax],al
 1001e33:	add    BYTE PTR [rax],al
 1001e35:	add    BYTE PTR [rax],al
 1001e37:	add    BYTE PTR [rbp+0x0],ch
 1001e3a:	push   rbx
 1001e3b:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007141
 1001e41:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001e45:	add    BYTE PTR [rcx+0x0],al
 1001e48:	jo     0x1001e4a
 1001e4a:	jo     0x1001e4c
 1001e4c:	ins    BYTE PTR es:[rdi],dx
 1001e4d:	add    BYTE PTR [rcx+0x0],ch
 1001e50:	movsxd eax,DWORD PTR [rax]
 1001e52:	(bad)  
 1001e53:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001e57:	add    BYTE PTR [rdi+0x0],ch
 1001e5a:	outs   dx,BYTE PTR ds:[rsi]
 1001e5b:	add    BYTE PTR [rbx+0x0],dh
 1001e5e:	add    BYTE PTR [rax],al
 1001e60:	ins    DWORD PTR es:[rdi],dx
 1001e61:	add    BYTE PTR [rbx+0x0],dl
 1001e64:	sub    eax,0x51005300
 1001e69:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001e6d:	add    BYTE PTR [rbx+0x0],dl
 1001e70:	je     0x1001e72
 1001e72:	(bad)  
 1001e73:	add    BYTE PTR [rax+rax*1+0x75],dh
 1001e77:	add    BYTE PTR [rbx+0x0],dh
 1001e7a:	add    BYTE PTR [rax],al
 1001e7c:	add    BYTE PTR [rax],al
 1001e7e:	add    BYTE PTR [rax],al
 1001e80:	ins    DWORD PTR es:[rdi],dx
 1001e81:	add    BYTE PTR [rbx+0x0],dl
 1001e84:	sub    eax,0x51005300
 1001e89:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001e8d:	add    BYTE PTR [rcx+0x0],cl
 1001e90:	outs   dx,BYTE PTR ds:[rsi]
 1001e91:	add    BYTE PTR [rsi+0x0],ah
 1001e94:	outs   dx,DWORD PTR ds:[rsi]
 1001e95:	add    BYTE PTR [rdx+0x0],dh
 1001e98:	ins    DWORD PTR es:[rdi],dx
 1001e99:	add    BYTE PTR [rcx+0x0],ah
 1001e9c:	je     0x1001e9e
 1001e9e:	imul   eax,DWORD PTR [rax],0x6e006f
 1001ea4:	push   rbp
 1001ea5:	add    BYTE PTR [rdx+0x0],dl
 1001ea8:	rex.WR add BYTE PTR [rax],r8b
 1001eab:	add    BYTE PTR [rax],al
 1001ead:	add    BYTE PTR [rax],al
 1001eaf:	add    BYTE PTR [rbp+0x0],ch
 1001eb2:	push   rbx
 1001eb3:	add    BYTE PTR [rip+0x51005300],ch        # 0x520071b9
 1001eb9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001ebd:	add    BYTE PTR [rbx+0x0],cl
 1001ec0:	add    BYTE PTR gs:[rcx+0x0],bh
 1001ec4:	ja     0x1001ec6
 1001ec6:	outs   dx,DWORD PTR ds:[rsi]
 1001ec7:	add    BYTE PTR [rdx+0x0],dh
 1001eca:	add    BYTE PTR fs:[rbx+0x0],dh
 1001ece:	add    BYTE PTR [rax],al
 1001ed0:	ins    DWORD PTR es:[rdi],dx
 1001ed1:	add    BYTE PTR [rbx+0x0],dl
 1001ed4:	sub    eax,0x51005300
 1001ed9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001edd:	add    BYTE PTR [rax+rax*1+0x79],dl
 1001ee1:	add    BYTE PTR [rax+0x0],dh
 1001ee4:	add    BYTE PTR gs:[rax],al
 1001ee7:	add    BYTE PTR [rbp+0x0],ch
 1001eea:	push   rbx
 1001eeb:	add    BYTE PTR [rip+0x51005300],ch        # 0x520071f1
 1001ef1:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001ef5:	add    BYTE PTR [rax+rax*1+0x61],cl
 1001ef9:	add    BYTE PTR [rbx+0x0],dh
 1001efc:	je     0x1001efe
 1001efe:	push   rbp
 1001eff:	add    BYTE PTR [rax+0x0],dh
 1001f02:	add    BYTE PTR fs:[rcx+0x0],ah
 1001f06:	je     0x1001f08
 1001f08:	add    BYTE PTR gs:[rax+rax*1+0x44],ah
 1001f0d:	add    BYTE PTR [rcx+0x0],ah
 1001f10:	je     0x1001f12
 1001f12:	add    BYTE PTR gs:[rax],al
 1001f15:	add    BYTE PTR [rax],al
 1001f17:	add    BYTE PTR [rbp+0x0],ch
 1001f1a:	push   rbx
 1001f1b:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007221
 1001f21:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001f25:	add    BYTE PTR [rbx+0x0],al
 1001f28:	outs   dx,DWORD PTR ds:[rsi]
 1001f29:	add    BYTE PTR [rsi+0x0],ch
 1001f2c:	outs   dx,BYTE PTR ds:[rsi]
 1001f2d:	add    BYTE PTR [rbp+0x0],ah
 1001f30:	movsxd eax,DWORD PTR [rax]
 1001f32:	je     0x1001f34
 1001f34:	imul   eax,DWORD PTR [rax],0x6e006f
 1001f3a:	push   rbp
 1001f3b:	add    BYTE PTR [rdx+0x0],dl
 1001f3e:	rex.WR add BYTE PTR [rax],r8b
 1001f41:	add    BYTE PTR [rax],al
 1001f43:	add    BYTE PTR [rax],al
 1001f45:	add    BYTE PTR [rax],al
 1001f47:	add    BYTE PTR [rbp+0x0],ch
 1001f4a:	push   rbx
 1001f4b:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007251
 1001f51:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001f55:	add    BYTE PTR [rax+0x0],dl
 1001f58:	jne    0x1001f5a
 1001f5a:	(bad)  
 1001f5b:	add    BYTE PTR [rax+rax*1+0x69],ch
 1001f5f:	add    BYTE PTR [rbx+0x0],ah
 1001f62:	(bad)  
 1001f63:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001f67:	add    BYTE PTR [rdi+0x0],ch
 1001f6a:	outs   dx,BYTE PTR ds:[rsi]
 1001f6b:	add    BYTE PTR [rbp+0x0],dl
 1001f6e:	push   rdx
 1001f6f:	add    BYTE PTR [rax+rax*1+0x0],cl
 1001f73:	add    BYTE PTR [rax],al
 1001f75:	add    BYTE PTR [rax],al
 1001f77:	add    BYTE PTR [rbp+0x0],ch
 1001f7a:	push   rbx
 1001f7b:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007281
 1001f81:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001f85:	add    BYTE PTR [rsi+0x0],dl
 1001f88:	add    BYTE PTR gs:[rdx+0x0],dh
 1001f8c:	jae    0x1001f8e
 1001f8e:	imul   eax,DWORD PTR [rax],0x6e006f
 1001f94:	add    BYTE PTR [rax],al
 1001f96:	add    BYTE PTR [rax],al
 1001f98:	ins    DWORD PTR es:[rdi],dx
 1001f99:	add    BYTE PTR [rbx+0x0],dl
 1001f9c:	sub    eax,0x51005300
 1001fa1:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001fa5:	add    BYTE PTR [rdx+0x0],al
 1001fa8:	jne    0x1001faa
 1001faa:	imul   eax,DWORD PTR [rax],0x64006c
	...
 1001fb8:	ins    DWORD PTR es:[rdi],dx
 1001fb9:	add    BYTE PTR [rbx+0x0],dl
 1001fbc:	sub    eax,0x51005300
 1001fc1:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001fc5:	add    BYTE PTR [rcx+0x0],cl
 1001fc8:	outs   dx,BYTE PTR ds:[rsi]
 1001fc9:	add    BYTE PTR [rsi+0x0],ah
 1001fcc:	outs   dx,DWORD PTR ds:[rsi]
 1001fcd:	add    BYTE PTR [rdx+0x0],dh
 1001fd0:	ins    DWORD PTR es:[rdi],dx
 1001fd1:	add    BYTE PTR [rcx+0x0],ah
 1001fd4:	je     0x1001fd6
 1001fd6:	imul   eax,DWORD PTR [rax],0x6e006f
 1001fdc:	add    BYTE PTR [rcx+0x0],r13b
 1001fe0:	jb     0x1001fe2
 1001fe2:	add    BYTE PTR gs:[rbx+0x0],ah
 1001fe6:	je     0x1001fe8
 1001fe8:	outs   dx,DWORD PTR ds:[rsi]
 1001fe9:	add    BYTE PTR [rdx+0x0],dh
 1001fec:	jns    0x1001fee
 1001fee:	add    BYTE PTR [rax],al
 1001ff0:	ins    DWORD PTR es:[rdi],dx
 1001ff1:	add    BYTE PTR [rbx+0x0],dl
 1001ff4:	sub    eax,0x51005300
 1001ff9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1001ffd:	add    BYTE PTR [rax+rax*1+0x61],al
 1002001:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002005:	add    BYTE PTR [rdx+0x0],ah
 1002008:	(bad)  
 1002009:	add    BYTE PTR [rbx+0x0],dh
 100200c:	add    BYTE PTR gs:[rax],al
 100200f:	add    BYTE PTR [rbp+0x0],ch
 1002012:	push   rbx
 1002013:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007319
 1002019:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100201d:	add    BYTE PTR [rcx+0x0],al
 1002020:	ins    BYTE PTR es:[rdi],dx
 1002021:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1002025:	add    BYTE PTR [rdi+0x0],dh
 1002028:	add    BYTE PTR [r14+0x0],bpl
 100202c:	outs   dx,DWORD PTR ds:[rsi]
 100202d:	add    BYTE PTR [rsi+0x0],ch
 1002030:	jns    0x1002032
 1002032:	ins    DWORD PTR es:[rdi],dx
 1002033:	add    BYTE PTR [rdi+0x0],ch
 1002036:	jne    0x1002038
 1002038:	jae    0x100203a
 100203a:	push   rbx
 100203b:	add    BYTE PTR [rbp+0x0],dh
 100203e:	(bad)  
 100203f:	add    BYTE PTR [rbx+0x0],dh
 1002042:	movsxd eax,DWORD PTR [rax]
 1002044:	jb     0x1002046
 1002046:	imul   eax,DWORD PTR [rax],0x740070
 100204c:	imul   eax,DWORD PTR [rax],0x6e006f
 1002052:	add    BYTE PTR [rax],al
 1002054:	add    BYTE PTR [rax],al
 1002056:	add    BYTE PTR [rax],al
 1002058:	ins    DWORD PTR es:[rdi],dx
 1002059:	add    BYTE PTR [rbx+0x0],dl
 100205c:	sub    eax,0x51005300
 1002061:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1002065:	add    BYTE PTR [rax+0x0],dl
 1002068:	jne    0x100206a
 100206a:	(bad)  
 100206b:	add    BYTE PTR [rax+rax*1+0x69],ch
 100206f:	add    BYTE PTR [rbx+0x0],dh
 1002072:	push   0x72006500
	...
 100207f:	add    BYTE PTR [rbp+0x0],ch
 1002082:	push   rbx
 1002083:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007389
 1002089:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100208d:	add    BYTE PTR [rcx+0x0],al
 1002090:	ins    BYTE PTR es:[rdi],dx
 1002091:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1002095:	add    BYTE PTR [rdi+0x0],dh
 1002098:	rex.WXB add BYTE PTR [r14+0x0],bpl
 100209c:	outs   dx,DWORD PTR ds:[rsi]
 100209d:	add    BYTE PTR [rdi+0x0],dh
 10020a0:	outs   dx,BYTE PTR ds:[rsi]
 10020a1:	add    BYTE PTR [rax+0x0],dl
 10020a4:	jne    0x10020a6
 10020a6:	ins    BYTE PTR es:[rdi],dx
 10020a7:	add    BYTE PTR [rax+rax*1+0x53],ch
 10020ab:	add    BYTE PTR [rbp+0x0],dh
 10020ae:	(bad)  
 10020af:	add    BYTE PTR [rbx+0x0],dh
 10020b2:	movsxd eax,DWORD PTR [rax]
 10020b4:	jb     0x10020b6
 10020b6:	imul   eax,DWORD PTR [rax],0x740070
 10020bc:	imul   eax,DWORD PTR [rax],0x6e006f
	...
 10020ce:	add    BYTE PTR [rax],al
 10020d0:	ins    DWORD PTR es:[rdi],dx
 10020d1:	add    BYTE PTR [rbx+0x0],dl
 10020d4:	sub    eax,0x51005300
 10020d9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10020dd:	add    BYTE PTR [rcx+0x0],al
 10020e0:	ins    BYTE PTR es:[rdi],dx
 10020e1:	add    BYTE PTR [rax+rax*1+0x6f],ch
 10020e5:	add    BYTE PTR [rdi+0x0],dh
 10020e8:	rex.WB add BYTE PTR [r13+0x0],bpl
 10020ec:	ins    DWORD PTR es:[rdi],dx
 10020ed:	add    BYTE PTR [rbp+0x0],ah
 10020f0:	add    BYTE PTR fs:[rcx+0x0],ch
 10020f4:	(bad)  
 10020f5:	add    BYTE PTR [rax+rax*1+0x65],dh
 10020f9:	add    BYTE PTR [rbp+0x0],dl
 10020fc:	jo     0x10020fe
 10020fe:	add    BYTE PTR fs:[rcx+0x0],ah
 1002102:	je     0x1002104
 1002104:	imul   eax,DWORD PTR [rax],0x67006e
 100210a:	push   rbx
 100210b:	add    BYTE PTR [rbp+0x0],dh
 100210e:	(bad)  
 100210f:	add    BYTE PTR [rbx+0x0],dh
 1002112:	movsxd eax,DWORD PTR [rax]
 1002114:	jb     0x1002116
 1002116:	imul   eax,DWORD PTR [rax],0x740070
 100211c:	imul   eax,DWORD PTR [rax],0x6e006f
	...
 100212e:	add    BYTE PTR [rax],al
 1002130:	ins    DWORD PTR es:[rdi],dx
 1002131:	add    BYTE PTR [rbx+0x0],dl
 1002134:	sub    eax,0x51005300
 1002139:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100213d:	add    BYTE PTR [rcx+0x0],al
 1002140:	ins    BYTE PTR es:[rdi],dx
 1002141:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1002145:	add    BYTE PTR [rdi+0x0],dh
 1002148:	push   rcx
 1002149:	add    BYTE PTR [rbp+0x0],dh
 100214c:	add    BYTE PTR gs:[rbp+0x0],dh
 1002150:	add    BYTE PTR gs:[rax+rax*1+0x55],ah
 1002155:	add    BYTE PTR [rax+0x0],dh
 1002158:	add    BYTE PTR fs:[rcx+0x0],ah
 100215c:	je     0x100215e
 100215e:	imul   eax,DWORD PTR [rax],0x67006e
 1002164:	push   rbx
 1002165:	add    BYTE PTR [rbp+0x0],dh
 1002168:	(bad)  
 1002169:	add    BYTE PTR [rbx+0x0],dh
 100216c:	movsxd eax,DWORD PTR [rax]
 100216e:	jb     0x1002170
 1002170:	imul   eax,DWORD PTR [rax],0x740070
 1002176:	imul   eax,DWORD PTR [rax],0x6e006f
 100217c:	add    BYTE PTR [rax],al
 100217e:	add    BYTE PTR [rax],al
 1002180:	ins    DWORD PTR es:[rdi],dx
 1002181:	add    BYTE PTR [rbx+0x0],dl
 1002184:	sub    eax,0x51005300
 1002189:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100218d:	add    BYTE PTR [rcx+0x0],al
 1002190:	ins    BYTE PTR es:[rdi],dx
 1002191:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1002195:	add    BYTE PTR [rdi+0x0],dh
 1002198:	push   rbx
 1002199:	add    BYTE PTR [rsi+0x0],ch
 100219c:	(bad)  
 100219d:	add    BYTE PTR [rax+0x0],dh
 10021a0:	jae    0x10021a2
 10021a2:	push   0x74006f00
 10021a7:	add    BYTE PTR [rsi+0x0],al
 10021aa:	imul   eax,DWORD PTR [rax],0x65006c
 10021b0:	jae    0x10021b2
 10021b2:	add    BYTE PTR [rax+r8*1+0x50],r10b
 10021b7:	add    BYTE PTR [rax+rax*1+0x6f],al
 10021bb:	add    BYTE PTR [rdi+0x0],dh
 10021be:	outs   dx,BYTE PTR ds:[rsi]
 10021bf:	add    BYTE PTR [rax+rax*1+0x6f],ch
 10021c3:	add    BYTE PTR [rcx+0x0],ah
 10021c6:	add    BYTE PTR fs:[rcx+0x0],ch
 10021ca:	outs   dx,BYTE PTR ds:[rsi]
 10021cb:	add    BYTE PTR [rdi+0x0],ah
 10021ce:	add    BYTE PTR [rax],al
 10021d0:	ins    DWORD PTR es:[rdi],dx
 10021d1:	add    BYTE PTR [rbx+0x0],dl
 10021d4:	sub    eax,0x51005300
 10021d9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10021dd:	add    BYTE PTR [rax+rax*1+0x68],dl
 10021e1:	add    BYTE PTR [rcx+0x0],ch
 10021e4:	jb     0x10021e6
 10021e6:	add    BYTE PTR fs:[rax+0x0],dl
 10021ea:	(bad)  
 10021eb:	add    BYTE PTR [rdx+0x0],dh
 10021ee:	je     0x10021f0
 10021f0:	jns    0x10021f2
 10021f2:	add    BYTE PTR [rax],al
 10021f4:	add    BYTE PTR [rax],al
 10021f6:	add    BYTE PTR [rax],al
 10021f8:	ins    DWORD PTR es:[rdi],dx
 10021f9:	add    BYTE PTR [rbx+0x0],dl
 10021fc:	sub    eax,0x51005300
 1002201:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1002205:	add    BYTE PTR [rdi+0x0],cl
 1002208:	rex.WR add BYTE PTR [rcx+0x0],r8b
 100220c:	push   rax
 100220d:	add    BYTE PTR [rax+rax*1+0x61],al
 1002211:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002215:	add    BYTE PTR [rdx+0x0],ah
 1002218:	(bad)  
 1002219:	add    BYTE PTR [rbx+0x0],dh
 100221c:	add    BYTE PTR gs:[rax],al
 100221f:	add    BYTE PTR [rbx+0x0],ah
 1002222:	outs   dx,BYTE PTR ds:[rsi]
 1002223:	add    BYTE PTR [rip+0x4c004f00],bh        # 0x4d007129
 1002229:	add    BYTE PTR [rcx+0x0],al
 100222c:	push   rax
 100222d:	add    BYTE PTR [rax],al
 100222f:	add    BYTE PTR [rdi+0x0],cl
 1002232:	rex.WR add BYTE PTR [rcx+0x0],r8b
 1002236:	push   rax
	...
 100223f:	add    BYTE PTR [rdi+0x0],cl
 1002242:	rex.WR add BYTE PTR [rcx+0x0],r8b
 1002246:	push   rax
 1002247:	add    BYTE PTR [rax],ah
 1002249:	add    BYTE PTR [rax+rax*1+0x61],al
 100224d:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002251:	add    BYTE PTR [rdx+0x0],ah
 1002254:	(bad)  
 1002255:	add    BYTE PTR [rbx+0x0],dh
 1002258:	add    BYTE PTR gs:[rax],ah
 100225b:	add    BYTE PTR [rsi+0x0],cl
 100225e:	(bad)  
 100225f:	add    BYTE PTR [rbp+0x0],ch
 1002262:	add    BYTE PTR gs:[rax],al
 1002265:	add    BYTE PTR [rax],al
 1002267:	add    BYTE PTR [rdi+0x0],cl
 100226a:	rex.WR add BYTE PTR [rcx+0x0],r8b
 100226e:	push   rax
 100226f:	add    BYTE PTR [rax],ah
 1002271:	add    BYTE PTR [rax+rax*1+0x61],al
 1002275:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002279:	add    BYTE PTR [rdx+0x0],ah
 100227c:	(bad)  
 100227d:	add    BYTE PTR [rbx+0x0],dh
 1002280:	add    BYTE PTR gs:[rax],ah
 1002283:	add    BYTE PTR [rbx+0x0],al
 1002286:	outs   dx,DWORD PTR ds:[rsi]
 1002287:	add    BYTE PTR [rsi+0x0],ch
 100228a:	je     0x100228c
 100228c:	(bad)  
 100228d:	add    BYTE PTR [rbx+0x0],ah
 1002290:	je     0x1002292
 1002292:	add    BYTE PTR [rax],al
 1002294:	add    BYTE PTR [rax],al
 1002296:	add    BYTE PTR [rax],al
 1002298:	rex.WXB add BYTE PTR [r13+0x0],spl
 100229c:	jns    0x100229e
 100229e:	and    BYTE PTR [rax],al
 10022a0:	xor    DWORD PTR [rax],eax
 10022a2:	add    BYTE PTR [rax],al
 10022a4:	add    BYTE PTR [rax],al
 10022a6:	add    BYTE PTR [rax],al
 10022a8:	rex.WXB add BYTE PTR [r13+0x0],spl
 10022ac:	jns    0x10022ae
 10022ae:	and    BYTE PTR [rax],al
 10022b0:	xor    al,BYTE PTR [rax]
 10022b2:	add    BYTE PTR [rax],al
 10022b4:	add    BYTE PTR [rax],al
 10022b6:	add    BYTE PTR [rax],al
 10022b8:	rex.WXB add BYTE PTR [r13+0x0],spl
 10022bc:	jns    0x10022be
 10022be:	and    BYTE PTR [rax],al
 10022c0:	xor    eax,DWORD PTR [rax]
 10022c2:	add    BYTE PTR [rax],al
 10022c4:	add    BYTE PTR [rax],al
 10022c6:	add    BYTE PTR [rax],al
 10022c8:	and    eax,0xa007300
 10022cd:	add    BYTE PTR [rax],al
 10022cf:	add    BYTE PTR [rbx+0x0],ch
 10022d2:	add    BYTE PTR gs:[rcx+0x0],bh
 10022d6:	ja     0x10022d8
 10022d8:	outs   dx,DWORD PTR ds:[rsi]
 10022d9:	add    BYTE PTR [rdx+0x0],dh
 10022dc:	add    BYTE PTR fs:[rbx+0x0],dh
	...
 10022e8:	jae    0x10022ea
 10022ea:	add    BYTE PTR gs:[rdx+0x0],dh
 10022ee:	jbe    0x10022f0
 10022f0:	imul   eax,DWORD PTR [rax],0x650063
 10022f6:	add    BYTE PTR [rsi+0x0],r13b
 10022fa:	jae    0x10022fc
 10022fc:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1002300:	ins    DWORD PTR es:[rdi],dx
 1002301:	add    BYTE PTR [rbp+0x0],ah
 1002304:	add    BYTE PTR [rax],al
 1002306:	add    BYTE PTR [rax],al
 1002308:	jae    0x100230a
 100230a:	add    BYTE PTR gs:[rdx+0x0],dh
 100230e:	jbe    0x1002310
 1002310:	imul   eax,DWORD PTR [rax],0x650063
 1002316:	add    BYTE PTR [rsi+0x0],r13b
 100231a:	jae    0x100231c
 100231c:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1002320:	ins    DWORD PTR es:[rdi],dx
 1002321:	add    BYTE PTR [rbp+0x0],ah
 1002324:	push   rsp
 1002325:	add    BYTE PTR [rcx+0x0],bh
 1002328:	jo     0x100232a
 100232a:	add    BYTE PTR gs:[rax],al
 100232d:	add    BYTE PTR [rax],al
 100232f:	add    BYTE PTR [rbx+0x0],dh
 1002332:	add    BYTE PTR gs:[rdx+0x0],dh
 1002336:	jbe    0x1002338
 1002338:	imul   eax,DWORD PTR [rax],0x650063
 100233e:	add    BYTE PTR [r8+r8*1+0x61],bpl
 1002343:	add    BYTE PTR [rbx+0x0],dh
 1002346:	jae    0x1002348
 1002348:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 100234c:	ins    DWORD PTR es:[rdi],dx
 100234d:	add    BYTE PTR [rbp+0x0],ah
	...
 1002358:	add    BYTE PTR fs:[rcx+0x0],ch
 100235c:	jae    0x100235e
 100235e:	jo     0x1002360
 1002360:	ins    BYTE PTR es:[rdi],dx
 1002361:	add    BYTE PTR [rcx+0x0],ah
 1002364:	jns    0x1002366
 1002366:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 100236a:	ins    DWORD PTR es:[rdi],dx
 100236b:	add    BYTE PTR [rbp+0x0],ah
 100236e:	add    BYTE PTR [rax],al
 1002370:	ins    DWORD PTR es:[rdi],dx
 1002371:	add    BYTE PTR [rbx+0x0],dl
 1002374:	sub    eax,0x51005300
 1002379:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100237d:	add    BYTE PTR [rdx+0x0],dl
 1002380:	add    BYTE PTR gs:[rdi+0x0],ah
 1002384:	imul   eax,DWORD PTR [rax],0x740073
 100238a:	add    BYTE PTR gs:[rdx+0x0],dh
 100238e:	add    BYTE PTR gs:[rax+rax*1+0x4f],ah
 1002393:	add    BYTE PTR [rdi+0x0],dh
 1002396:	outs   dx,BYTE PTR ds:[rsi]
 1002397:	add    BYTE PTR [rbp+0x0],ah
 100239a:	jb     0x100239c
 100239c:	add    BYTE PTR [rax],al
 100239e:	add    BYTE PTR [rax],al
 10023a0:	ins    DWORD PTR es:[rdi],dx
 10023a1:	add    BYTE PTR [rbx+0x0],dl
 10023a4:	sub    eax,0x51005300
 10023a9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10023ad:	add    BYTE PTR [rax+rax*1+0x6f],cl
 10023b1:	add    BYTE PTR [rbx+0x0],ah
 10023b4:	(bad)  
 10023b5:	add    BYTE PTR [rax+rax*1+0x69],dh
 10023b9:	add    BYTE PTR [rdi+0x0],ch
 10023bc:	outs   dx,BYTE PTR ds:[rsi]
 10023bd:	add    BYTE PTR [rax],al
 10023bf:	add    BYTE PTR [rbp+0x0],ch
 10023c2:	push   rbx
 10023c3:	add    BYTE PTR [rip+0x51005300],ch        # 0x520076c9
 10023c9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10023cd:	add    BYTE PTR [rbp+0x0],cl
 10023d0:	add    BYTE PTR gs:[rbp+0x0],ch
 10023d4:	outs   dx,DWORD PTR ds:[rsi]
 10023d5:	add    BYTE PTR [rdx+0x0],dh
 10023d8:	jns    0x10023da
 10023da:	add    BYTE PTR [rax],al
 10023dc:	add    BYTE PTR [rax],al
 10023de:	add    BYTE PTR [rax],al
 10023e0:	ins    DWORD PTR es:[rdi],dx
 10023e1:	add    BYTE PTR [rbx+0x0],dl
 10023e4:	sub    eax,0x51005300
 10023e9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10023ed:	add    BYTE PTR [rbx+0x0],dl
 10023f0:	add    BYTE PTR gs:[rdx+0x0],dh
 10023f4:	jbe    0x10023f6
 10023f6:	imul   eax,DWORD PTR [rax],0x650063
 10023fc:	add    BYTE PTR [r11+0x0],spl
 1002400:	movsxd eax,DWORD PTR [rax]
 1002402:	outs   dx,DWORD PTR ds:[rsi]
 1002403:	add    BYTE PTR [rbp+0x0],dh
 1002406:	outs   dx,BYTE PTR ds:[rsi]
 1002407:	add    BYTE PTR [rax+rax*1+0x0],dh
 100240b:	add    BYTE PTR [rax],al
 100240d:	add    BYTE PTR [rax],al
 100240f:	add    BYTE PTR [rbp+0x0],ch
 1002412:	push   rbx
 1002413:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007719
 1002419:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100241d:	add    BYTE PTR [rbx+0x0],al
 1002420:	push   0x72006100
 1002425:	add    BYTE PTR [rcx+0x0],ah
 1002428:	movsxd eax,DWORD PTR [rax]
 100242a:	je     0x100242c
 100242c:	add    BYTE PTR gs:[rdx+0x0],dh
 1002430:	push   rbx
 1002431:	add    BYTE PTR [rbp+0x0],ah
 1002434:	je     0x1002436
 1002436:	add    BYTE PTR [rax],al
 1002438:	ins    DWORD PTR es:[rdi],dx
 1002439:	add    BYTE PTR [rbx+0x0],dl
 100243c:	sub    eax,0x51005300
 1002441:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1002445:	add    BYTE PTR [rbx+0x0],dl
 1002448:	outs   dx,DWORD PTR ds:[rsi]
 1002449:	add    BYTE PTR [rdx+0x0],dh
 100244c:	je     0x100244e
 100244e:	rex.WRXB add BYTE PTR [r10+0x0],r14b
 1002452:	add    BYTE PTR fs:[rbp+0x0],ah
 1002456:	jb     0x1002458
	...
 1002460:	ins    DWORD PTR es:[rdi],dx
 1002461:	add    BYTE PTR [rbx+0x0],dl
 1002464:	sub    eax,0x51005300
 1002469:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100246d:	add    BYTE PTR [rbp+0x0],dl
 1002470:	outs   dx,BYTE PTR ds:[rsi]
 1002471:	add    BYTE PTR [rcx+0x0],ch
 1002474:	movsxd eax,DWORD PTR [rax]
 1002476:	outs   dx,DWORD PTR ds:[rsi]
 1002477:	add    BYTE PTR [rax+rax*1+0x65],ah
 100247b:	add    BYTE PTR [rbx+0x0],dl
 100247e:	outs   dx,DWORD PTR ds:[rsi]
 100247f:	add    BYTE PTR [rdx+0x0],dh
 1002482:	je     0x1002484
 1002484:	rex.WRXB add BYTE PTR [r10+0x0],r14b
 1002488:	add    BYTE PTR fs:[rbp+0x0],ah
 100248c:	jb     0x100248e
 100248e:	add    BYTE PTR [rax],al
 1002490:	ins    DWORD PTR es:[rdi],dx
 1002491:	add    BYTE PTR [rbx+0x0],dl
 1002494:	sub    eax,0x51005300
 1002499:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100249d:	add    BYTE PTR [rbx+0x0],al
 10024a0:	ins    BYTE PTR es:[rdi],dx
 10024a1:	add    BYTE PTR [rbp+0x0],dh
 10024a4:	jae    0x10024a6
 10024a6:	je     0x10024a8
 10024a8:	add    BYTE PTR gs:[rdx+0x0],dh
 10024ac:	add    BYTE PTR gs:[rax+rax*1+0x0],ah
 10024b1:	add    BYTE PTR [rax],al
 10024b3:	add    BYTE PTR [rax],al
 10024b5:	add    BYTE PTR [rax],al
 10024b7:	add    BYTE PTR [rbp+0x0],ch
 10024ba:	push   rbx
 10024bb:	add    BYTE PTR [rip+0x51005300],ch        # 0x520077c1
 10024c1:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10024c5:	add    BYTE PTR [rsi+0x0],cl
 10024c8:	(bad)  
 10024c9:	add    BYTE PTR [rbp+0x0],ch
 10024cc:	add    BYTE PTR gs:[rax+rax*1+0x50],ah
 10024d1:	add    BYTE PTR [rcx+0x0],ch
 10024d4:	jo     0x10024d6
 10024d6:	add    BYTE PTR gs:[rax],al
 10024d9:	add    BYTE PTR [rax],al
 10024db:	add    BYTE PTR [rax],al
 10024dd:	add    BYTE PTR [rax],al
 10024df:	add    BYTE PTR [rbp+0x0],ch
 10024e2:	push   rbx
 10024e3:	add    BYTE PTR [rip+0x51005300],ch        # 0x520077e9
 10024e9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10024ed:	add    BYTE PTR [rbp+0x0],cl
 10024f0:	jne    0x10024f2
 10024f2:	ins    BYTE PTR es:[rdi],dx
 10024f3:	add    BYTE PTR [rax+rax*1+0x69],dh
 10024f7:	add    BYTE PTR [rax+0x0],dl
 10024fa:	jb     0x10024fc
 10024fc:	outs   dx,DWORD PTR ds:[rsi]
 10024fd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1002501:	add    BYTE PTR [rbx+0x0],ah
 1002504:	outs   dx,DWORD PTR ds:[rsi]
 1002505:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002509:	add    BYTE PTR [rax],al
 100250b:	add    BYTE PTR [rax],al
 100250d:	add    BYTE PTR [rax],al
 100250f:	add    BYTE PTR [rbp+0x0],ch
 1002512:	push   rbx
 1002513:	add    BYTE PTR [rip+0x51005300],ch        # 0x52007819
 1002519:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100251d:	add    BYTE PTR [rbx+0x0],dl
 1002520:	push   rax
 1002521:	add    BYTE PTR [rax+0x0],bl
 1002524:	add    BYTE PTR [rax],al
 1002526:	add    BYTE PTR [rax],al
 1002528:	ins    DWORD PTR es:[rdi],dx
 1002529:	add    BYTE PTR [rbx+0x0],dl
 100252c:	sub    eax,0x51005300
 1002531:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1002535:	add    BYTE PTR [rax+rax*1+0x43],dl
 1002539:	add    BYTE PTR [rax+0x0],dl
 100253c:	rex.WB add BYTE PTR [r8+0x0],dl
	...
 1002548:	ins    DWORD PTR es:[rdi],dx
 1002549:	add    BYTE PTR [rbx+0x0],dl
 100254c:	sub    eax,0x51005300
 1002551:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1002555:	add    BYTE PTR [rcx+0x0],al
 1002558:	jo     0x100255a
 100255a:	jo     0x100255c
 100255c:	ins    BYTE PTR es:[rdi],dx
 100255d:	add    BYTE PTR [rbp+0x0],ah
 1002560:	push   rsp
 1002561:	add    BYTE PTR [rcx+0x0],ah
 1002564:	ins    BYTE PTR es:[rdi],dx
 1002565:	add    BYTE PTR [rbx+0x0],ch
	...
 1002570:	ins    DWORD PTR es:[rdi],dx
 1002571:	add    BYTE PTR [rbx+0x0],dl
 1002574:	sub    eax,0x51005300
 1002579:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100257d:	add    BYTE PTR [rsi+0x0],dl
 1002580:	imul   eax,DWORD PTR [rax],0x65006e
 1002586:	jae    0x1002588
	...
 1002590:	ins    DWORD PTR es:[rdi],dx
 1002591:	add    BYTE PTR [rbx+0x0],dl
 1002594:	sub    eax,0x51005300
 1002599:	add    BYTE PTR [rax+rax*1+0x2d],cl
 100259d:	add    BYTE PTR [rdi+0x0],al
 10025a0:	push   rax
 10025a1:	add    BYTE PTR [rbx+0x0],dl
 10025a4:	rex.WR add BYTE PTR [rcx+0x0],r12b
 10025a8:	je     0x10025aa
 10025aa:	imul   eax,DWORD PTR [rax],0x750074
 10025b0:	add    BYTE PTR fs:[rbp+0x0],ah
 10025b4:	add    BYTE PTR [rax],al
 10025b6:	add    BYTE PTR [rax],al
 10025b8:	ins    DWORD PTR es:[rdi],dx
 10025b9:	add    BYTE PTR [rbx+0x0],dl
 10025bc:	sub    eax,0x51005300
 10025c1:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10025c5:	add    BYTE PTR [rdi+0x0],al
 10025c8:	push   rax
 10025c9:	add    BYTE PTR [rbx+0x0],dl
 10025cc:	rex.WR add BYTE PTR [rdi+0x0],r13b
 10025d0:	outs   dx,BYTE PTR ds:[rsi]
 10025d1:	add    BYTE PTR [rdi+0x0],ah
 10025d4:	imul   eax,DWORD PTR [rax],0x750074
 10025da:	add    BYTE PTR fs:[rbp+0x0],ah
 10025de:	add    BYTE PTR [rax],al
 10025e0:	ins    DWORD PTR es:[rdi],dx
 10025e1:	add    BYTE PTR [rbx+0x0],dl
 10025e4:	sub    eax,0x51005300
 10025e9:	add    BYTE PTR [rax+rax*1+0x2d],cl
 10025ed:	add    BYTE PTR [rdi+0x0],al
 10025f0:	push   rax
 10025f1:	add    BYTE PTR [rbx+0x0],dl
 10025f4:	rex.W add BYTE PTR [rbp+0x0],spl
 10025f8:	imul   eax,DWORD PTR [rax],0x680067
 10025fe:	je     0x1002600
	...
 1002608:	ins    DWORD PTR es:[rdi],dx
 1002609:	add    BYTE PTR [rbx+0x0],dl
 100260c:	sub    eax,0x51005300
 1002611:	add    BYTE PTR [rax+rax*1+0x2d],cl
 1002615:	add    BYTE PTR [rax+rax*1+0x61],cl
 1002619:	add    BYTE PTR [rsi+0x0],ch
 100261c:	add    BYTE PTR [ebp+0x0],dh
 1002620:	(bad)  
 1002621:	add    BYTE PTR [rdi+0x0],ah
 1002624:	add    BYTE PTR gs:[rax],al
 1002627:	add    BYTE PTR [rbp+0x0],cl
 100262a:	imul   eax,DWORD PTR [rax],0x720063
 1002630:	outs   dx,DWORD PTR ds:[rsi]
 1002631:	add    BYTE PTR [rbx+0x0],dh
 1002634:	outs   dx,DWORD PTR ds:[rsi]
 1002635:	add    BYTE PTR [rsi+0x0],ah
 1002638:	je     0x100263a
 100263a:	and    BYTE PTR [rax],al
 100263c:	rex.XB add BYTE PTR [r15+0x0],bpl
 1002640:	jb     0x1002642
 1002642:	jo     0x1002644
 1002644:	outs   dx,DWORD PTR ds:[rsi]
 1002645:	add    BYTE PTR [rdx+0x0],dh
 1002648:	(bad)  
 1002649:	add    BYTE PTR [rax+rax*1+0x69],dh
 100264d:	add    BYTE PTR [rdi+0x0],ch
 1002650:	outs   dx,BYTE PTR ds:[rsi]
 1002651:	add    BYTE PTR [rax],al
 1002653:	add    BYTE PTR [rax],al
 1002655:	add    BYTE PTR [rax],al
 1002657:	add    BYTE PTR [rax],bh
 1002659:	add    BYTE PTR [rsi],ch
 100265b:	add    BYTE PTR [rax],dh
 100265d:	add    BYTE PTR [rax],dh
	...
 100266f:	add    BYTE PTR [rsi+0x0],al
 1002672:	cmp    DWORD PTR [rax],eax
 1002674:	add    BYTE PTR ss:[rbx],dh
 1002677:	add    BYTE PTR [rbp+0x0],al
 100267a:	add    BYTE PTR ss:[rax],dh
 100267d:	add    BYTE PTR [rax],dh
 100267f:	add    BYTE PTR [rip+0x43004300],ch        # 0x44006985
 1002685:	add    BYTE PTR [rax+rax*1+0x42],al
 1002689:	add    BYTE PTR [rip+0x31003100],ch        # 0x3200578f
 100268f:	add    BYTE PTR [rax+rax*1+0x32],ah
 1002693:	add    BYTE PTR [rip+0x37003800],ch        # 0x38005e99
 1002699:	add    BYTE PTR [rip+0x2d003700],dh        # 0x2e005d9f
 100269f:	add    BYTE PTR [rax],dh
 10026a1:	add    BYTE PTR [rax],dh
 10026a3:	add    BYTE PTR [rbx+0x0],al
 10026a6:	xor    BYTE PTR [rax],al
 10026a8:	xor    al,0x0
 10026aa:	rex.RX add BYTE PTR [rcx],r15b
 10026ad:	add    BYTE PTR [rax+rax*1],dh
 10026b0:	add    BYTE PTR [r9],dil
 10026b3:	add    BYTE PTR [rax],bh
 10026b5:	add    BYTE PTR [rcx],bh
	...
 10026bf:	add    BYTE PTR [rsi+0x0],al
 10026c2:	cmp    DWORD PTR [rax],eax
 10026c4:	add    BYTE PTR ss:[rbx],dh
 10026c7:	add    BYTE PTR [rbp+0x0],al
 10026ca:	add    BYTE PTR ss:[rax],dh
 10026cd:	add    BYTE PTR [rcx],dh
 10026cf:	add    BYTE PTR [rip+0x43004300],ch        # 0x440069d5
 10026d5:	add    BYTE PTR [rax+rax*1+0x42],al
 10026d9:	add    BYTE PTR [rip+0x31003100],ch        # 0x320057df
 10026df:	add    BYTE PTR [rax+rax*1+0x32],ah
 10026e3:	add    BYTE PTR [rip+0x37003800],ch        # 0x38005ee9
 10026e9:	add    BYTE PTR [rip+0x2d003700],dh        # 0x2e005def
 10026ef:	add    BYTE PTR [rax],dh
 10026f1:	add    BYTE PTR [rax],dh
 10026f3:	add    BYTE PTR [rbx+0x0],al
 10026f6:	xor    BYTE PTR [rax],al
 10026f8:	xor    al,0x0
 10026fa:	rex.RX add BYTE PTR [rcx],r15b
 10026fd:	add    BYTE PTR [rax+rax*1],dh
 1002700:	add    BYTE PTR [r9],dil
 1002703:	add    BYTE PTR [rax],bh
 1002705:	add    BYTE PTR [rcx],bh
	...
 100270f:	add    BYTE PTR [rdi+0x0],cl
 1002712:	rex.WR add BYTE PTR [rcx+0x0],r8b
 1002716:	push   rax
 1002717:	add    BYTE PTR [rax],ah
 1002719:	add    BYTE PTR [rbx+0x0],dl
 100271c:	add    BYTE PTR gs:[rdx+0x0],dh
 1002720:	jbe    0x1002722
 1002722:	add    BYTE PTR gs:[rdx+0x0],dh
 1002726:	add    BYTE PTR [rax],al
 1002728:	push   rbx
 1002729:	add    BYTE PTR [rcx+0x0],dl
 100272c:	rex.WR add BYTE PTR [rbx+0x0],r10b
 1002730:	add    BYTE PTR gs:[rdx+0x0],dh
 1002734:	jbe    0x1002736
 1002736:	add    BYTE PTR gs:[rdx+0x0],dh
 100273a:	add    BYTE PTR [rax],al
 100273c:	add    BYTE PTR [rax],al
 100273e:	add    BYTE PTR [rax],al
 1002740:	rex.WRXB add BYTE PTR [r8+r8*1+0x41],r9b
 1002745:	add    BYTE PTR [rax+0x0],dl
 1002748:	push   rbx
 1002749:	add    BYTE PTR [rbp+0x0],ah
 100274c:	jb     0x100274e
 100274e:	jbe    0x1002750
 1002750:	add    BYTE PTR gs:[rdx+0x0],dh
 1002754:	add    BYTE PTR [rax],al
 1002756:	add    BYTE PTR [rax],al
 1002758:	add    BYTE PTR [r8],al
	...
 100276f:	add    al,ah
 1002771:	inc    BYTE PTR [rax]
 1002773:	add    DWORD PTR [rax],eax
 1002775:	add    BYTE PTR [rax],al
 1002777:	add    BYTE PTR [rax+0x100ff],al
 100277d:	add    BYTE PTR [rax],al
 100277f:	add    BYTE PTR [rax],al
 1002781:	add    al,0x2
 1002783:	add    BYTE PTR [rax],al
 1002785:	add    BYTE PTR [rax],al
 1002787:	add    al,al
 1002789:	add    BYTE PTR [rax],al
 100278b:	add    BYTE PTR [rax],al
 100278d:	add    BYTE PTR [rax],al
 100278f:	rex.RX add al,0x4
 1002792:	add    al,BYTE PTR [rax]
 1002794:	add    BYTE PTR [rax],al
 1002796:	add    BYTE PTR [rax],al
 1002798:	rol    BYTE PTR [rax],0x0
 100279b:	add    BYTE PTR [rax],al
 100279d:	add    BYTE PTR [rax],al
 100279f:	rex.RX rcl BYTE PTR [rsi-0x7e],1
 10027a3:	std    
 10027a4:	adc    eax,0xab11cefd
 10027a9:	(bad)
 10027ad:	sahf   
 10027ae:	jne    0x1002803
 10027b0:	shl    BYTE PTR [rdi+0x16],1
 10027b3:	add    BYTE PTR [rsi],dl
 10027b5:	std    
 10027b6:	(bad)  
 10027b7:	adc    DWORD PTR [rbx-0x739ffd3c],ebp
 10027bd:	sahf   
 10027be:	jne    0x1002813
 10027c0:	sub    al,0xde
 10027c2:	cwde   
 10027c3:	out    0xe4,eax
 10027c5:	and    dl,al
 10027c7:	adc    DWORD PTR [rsi+rdi*8-0x27b04000],eax
 10027ce:	(bad)  
 10027cf:	add    ebp,esp
 10027d1:	test   al,0x9b
 10027d3:	adc    al,dh
 10027d5:	xchg   edx,eax
 10027d6:	rcl    BYTE PTR [rcx],1
 10027d8:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10027d9:	nop
 10027da:	add    al,al
 10027dc:	rex.WRXB fcom st(5)
 10027df:	test   al,0xda
 10027e1:	rex.WRXB icebp 
 10027e3:	rex.RX sub r12d,DWORD PTR [rbx]
 10027e6:	rcl    DWORD PTR [rcx],1
 10027e8:	test   al,0x8
 10027ea:	add    al,al
 10027ec:	rex.WRXB fcom st(5)
 10027ef:	test   al,0x8e
 10027f1:	sub    al,0x79
 10027f3:	add    eax,0x11d0941f
 10027f8:	test   DWORD PTR [rcx],ebp
 10027fa:	add    al,al
 10027fc:	rex.WRXB fcom st(5)
 10027ff:	add    eax,edx
 1002801:	in     eax,dx
 1002802:	shl    DWORD PTR [rdx-0x3c],cl
 1002805:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002806:	rcl    BYTE PTR [rcx],1
 1002808:	test   DWORD PTR [rbx],esi
 100280a:	add    al,al
 100280c:	rex.WRXB fcom st(5)
 100280f:	add    ecx,DWORD PTR [rcx+riz*4-0xd]
 1002813:	mov    ah,0xdd
 1002815:	fwait
 1002816:	rcl    BYTE PTR [rcx],1
 1002818:	test   DWORD PTR [rax+rax*1],ebp
 100281b:	ror    BYTE PTR [rdi-0x28],0xd5
 100281f:	add    eax,DWORD PTR [rax]
 1002821:	rcr    BYTE PTR [rdx-0x49],0xdd
 1002825:	fwait
 1002826:	rcl    BYTE PTR [rcx],1
 1002828:	test   DWORD PTR [rax+rax*1],ebp
 100282b:	ror    BYTE PTR [rdi-0x28],0xd5
 100282f:	add    ecx,esp
 1002831:	xchg   ecx,eax
 1002832:	out    dx,al
 1002833:	mov    bh,0xdd
 1002835:	fwait
 1002836:	rcl    BYTE PTR [rcx],1
 1002838:	test   DWORD PTR [rax+rax*1],ebp
 100283b:	ror    BYTE PTR [rdi-0x28],0xd5
 100283f:	add    edx,DWORD PTR [rdx-0x60]
 1002842:	pop    rsi
 1002843:	mov    eax,0x11d09bdd
 1002848:	test   DWORD PTR [rax+rax*1],ebp
 100284b:	ror    BYTE PTR [rdi-0x28],0xd5
 100284f:	add    ecx,edx
 1002851:	xchg   edi,eax
 1002853:	mov    eax,0x11d09bdd
 1002858:	test   DWORD PTR [rax+rax*1],ebp
 100285b:	ror    BYTE PTR [rdi-0x28],0xd5
 100285f:	add    edi,DWORD PTR [rdi+rsi*8]
 1002862:	pop    rax
 1002863:	mov    ecx,0x11d09bdd
 1002868:	test   DWORD PTR [rax+rax*1],ebp
 100286b:	ror    BYTE PTR [rdi-0x28],0xd5
 100286f:	add    edx,eax
 1002871:	(bad)  
 1002872:	cli    
 1002873:	jns    0x10028f1
 1002875:	test   eax,0x348511d0
 100287a:	add    al,al
 100287c:	rex.WRXB fcom st(5)
 100287f:	add    esi,DWORD PTR [rax+0x7c7b9e38]
 1002885:	test   eax,0x348511d0
 100288a:	add    al,al
 100288c:	rex.WRXB fcom st(5)
 100288f:	add    ebx,DWORD PTR [rbx+rax*4]
 1002892:	outs   dx,BYTE PTR ds:[rsi]
 1002893:	xor    bh,al
 1002895:	pop    rbx
 1002896:	rcl    DWORD PTR [rcx],1
 1002898:	movabs ds:0xaadc50b94fc000b8,eax
 10028a1:	lock ds (bad) 
 10028a4:	cmc    
 10028a5:	scas   al,BYTE PTR es:[rdi]
 10028a6:	rcl    BYTE PTR [rcx],1
 10028a8:	test   DWORD PTR [rdi],esi
 10028aa:	add    al,al
 10028ac:	rex.WRXB fcom st(5)
 10028af:	add    edx,esp
 10028b1:	scas   al,BYTE PTR es:[rdi]
 10028b2:	xchg   edx,eax
 10028b3:	(bad)  
 10028b4:	and    ah,dh
 10028b6:	rcl    BYTE PTR [rcx],1
 10028b8:	movabs ds:0x30dc50b94fc0006e,eax
 10028c1:	sbb    eax,0x8bd0aacd
 10028c6:	rcl    BYTE PTR [rcx],cl
 10028c8:	xchg   edx,eax
 10028c9:	test   eax,0x794fc000
 10028ce:	clc    
 10028cf:	xor    al,0x78
 10028d1:	or     eax,0xf421080d
 10028d6:	rcl    BYTE PTR [rcx],1
 10028d8:	movabs ds:0x29dc50b94fc0006e,eax
 10028e1:	sbb    DWORD PTR [rcx-0x2d502ea5],esi
 10028e7:	adc    DWORD PTR [rcx+rdi*4+0x7af80000],ebx
 10028ee:	ss sahf 
 10028f0:	jg     0x1002924
 10028f2:	mov    dh,0x50
 10028f4:	shr    DWORD PTR [rdi-0x4663ee2e],1
 10028fa:	add    BYTE PTR [rax],al
 10028fc:	clc    
 10028fd:	jp     0x1002935
 10028ff:	sahf   
 1002900:	fsub   QWORD PTR [rbp+0x6d]
 1002903:	ins    BYTE PTR es:[rdi],dx
 1002904:	shr    DWORD PTR [rdi-0x4663ee2e],1
 100290a:	add    BYTE PTR [rax],al
 100290c:	clc    
 100290d:	jp     0x1002945
 100290f:	sahf   
 1002910:	(bad)  
 1002911:	sbb    BYTE PTR cs:[rsi-0x2f],ah
 1002915:	scas   eax,DWORD PTR es:[rdi]
 1002916:	rcl    BYTE PTR [rcx],cl
 1002918:	pushf  
 1002919:	mov    ecx,0x7af80000
 100291e:	ss sahf 
 1002920:	cs lock or eax,0xd2f93437
 1002927:	adc    DWORD PTR [rdx+0x4fc00096],edi
 100292d:	mov    dh,0xd0
 100292f:	ror    esp,1
 1002931:	push   rdi
 1002932:	xor    rsi,QWORD PTR [rcx+rdi*8]
 1002936:	rcl    BYTE PTR [rcx],cl
 1002938:	mov    edx,0x4fc00096
 100293d:	mov    dh,0xd0
 100293f:	shl    DWORD PTR [rdx+0x357e99c0],1
 1002945:	stc    
 1002946:	rcl    BYTE PTR [rcx],cl
 1002948:	mov    edx,0x4fc00096
 100294d:	mov    dh,0xd0
 100294f:	shl    DWORD PTR [rbx+0x357e99c0],1
 1002955:	stc    
 1002956:	rcl    BYTE PTR [rcx],cl
 1002958:	mov    edx,0x4fc00096
 100295d:	mov    dh,0xd0
 100295f:	shl    DWORD PTR [rbx+0x25b1b272],1
 1002965:	rcl    DWORD PTR ss:[rcx],1
 1002968:	movabs ds:0x1fdc50b94fc000a4,eax
 1002971:	scas   al,BYTE PTR es:[rdi]
 1002972:	rex.WRXB (bad) 
 1002974:	es rcl DWORD PTR ss:[rcx],1
 1002978:	movabs ds:0xbdc50b94fc000a4,eax
 1002981:	(bad)  
 1002982:	push   0xffffffffd1093990
 1002987:	adc    DWORD PTR [rbx+0x4fc000e1],ecx
 100298d:	fcom   st(5)
 100298f:	add    esi,ebp
 1002991:	jno    0x1002a0c
 1002993:	xchg   edx,eax
 1002994:	cmp    DWORD PTR [rcx],ecx
 1002996:	rcl    DWORD PTR [rcx],1
 1002998:	mov    esp,ecx
 100299a:	add    al,al
 100299c:	rex.WRXB fcom st(5)
 100299f:	add    ebp,DWORD PTR [rbx+0x698452d3]
 10029a5:	or     cl,dl
 10029a7:	adc    DWORD PTR [rbx+0x4fc00077],esp
 10029ad:	mov    ecx,0x50a9dc50
 10029b2:	sbb    dh,BYTE PTR [rdx+0x11d14080]
 10029b8:	movabs ds:0xd5dc50b94fc000ac,eax
 10029c1:	cld    
 10029c2:	xchg   DWORD PTR [rdx+0x11d14080],esi
 10029c8:	movabs ds:0x1dc50b94fc000ac,eax
 10029d1:	test   eax,0x4080b2f5
 10029d6:	rcl    DWORD PTR [rcx],1
 10029d8:	movabs ds:0x49dc50b94fc000ac,eax
 10029e1:	movabs ds:0xaca311d14080b371,eax
 10029ea:	add    al,al
 10029ec:	rex.WRXB movabs r9,0x4080b3eb3b37dc50
 10029f6:	rcl    DWORD PTR [rcx],1
 10029f8:	movabs ds:0x3dc50b94fc000ac,eax
 1002a01:	mov    eax,0x4080f60f
 1002a06:	rcl    DWORD PTR [rcx],1
 1002a08:	movabs ds:0xbddc50b94fc000ac,eax
 1002a11:	add    dl,BYTE PTR [rbx]
 1002a13:	std    
 1002a14:	add    BYTE PTR [rax-0x2f],0x11
 1002a18:	movabs ds:0x29dc50b94fc000ac,eax
 1002a21:	iret   
 1002a22:	fidivr WORD PTR [rdx-0x80]
 1002a25:	rex.RX rcl DWORD PTR [rcx],1
 1002a28:	movabs ds:0xfdc50b94fc000b4,eax
 1002a31:	mov    eax,0x46807b28
 1002a36:	rcl    DWORD PTR [rcx],1
 1002a38:	movabs ds:0x33dc50b94fc000b4,eax
 1002a41:	mov    ch,0x66
 1002a43:	jnp    0x10029c5
 1002a45:	rex.RX rcl DWORD PTR [rcx],1
 1002a48:	movabs ds:0xa9dc50b94fc000b4,eax
 1002a51:	ficom  WORD PTR [rax]
 1002a53:	test   eax,0x11d14680
 1002a58:	movabs ds:0x1adc50b94fc000b4,eax
 1002a61:	add    DWORD PTR [rdi-0x2eb87169],ebp
 1002a67:	adc    DWORD PTR [rbx+0x4fc000b4],esp
 1002a6d:	mov    ecx,0x4bbedc50
 1002a72:	stos   DWORD PTR es:[rdi],eax
 1002a73:	xchg   dh,dh
 1002a75:	rcl    DWORD PTR gs:[rcx],1
 1002a78:	mov    WORD PTR [rbx],ss
 1002a7a:	add    al,al
 1002a7c:	rex.WRXB fcom st(5)
 1002a7f:	add    ebp,DWORD PTR [rbx-0x5276ed95]
 1002a85:	outs   dx,BYTE PTR ds:[rsi]
 1002a86:	rcl    DWORD PTR [rcx],1
 1002a88:	mov    WORD PTR [rax],ds
 1002a8a:	add    al,al
 1002a8c:	rex.WRXB fcom st(5)
 1002a8f:	add    eax,DWORD PTR [rdx]
 1002a91:	or     DWORD PTR [rbp-0x2e77874e],edi
 1002a97:	adc    DWORD PTR [rcx+riz*1-0x27b04000],ecx
 1002a9e:	(bad)  
 1002a9f:	add    ecx,esi
 1002aa1:	and    dh,BYTE PTR [rbp-0x31a30c38]
 1002aa7:	adc    DWORD PTR [rbp+0xaa00e5],ebp
 1002aad:	rex.R ja 0x1002aed
 1002ab0:	cmp    eax,DWORD PTR [rax]
 1002ab2:	add    BYTE PTR [rax],al
 1002ab4:	add    BYTE PTR [rax],al
 1002ab6:	add    BYTE PTR [rax],al
 1002ab8:	push   rax
 1002ab9:	add    BYTE PTR [rcx+0x0],ah
 1002abc:	je     0x1002abe
 1002abe:	push   0x0
 1002ac3:	add    BYTE PTR [rax],al
 1002ac5:	add    BYTE PTR [rax],al
 1002ac7:	add    BYTE PTR [rdi+0x65],al
 1002aca:	je     0x1002b10
 1002acc:	ins    BYTE PTR es:[rdi],dx
 1002acd:	ins    BYTE PTR es:[rdi],dx
 1002ace:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1002ad6:	jns    0x1002b2f
	...
 1002ae0:	push   rbx
 1002ae1:	gs je  0x1002b28
 1002ae4:	ins    BYTE PTR es:[rdi],dx
 1002ae5:	ins    BYTE PTR es:[rdi],dx
 1002ae6:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1002aee:	jns    0x1002b47
	...
 1002af8:	push   rbx
 1002af9:	add    BYTE PTR [rax+0x0],ch
 1002afc:	(bad)  
 1002afd:	add    BYTE PTR [rdx+0x0],dh
 1002b00:	add    BYTE PTR gs:[rax+rax*1+0x43],ah
 1002b05:	add    BYTE PTR [rdi+0x0],ch
 1002b08:	add    BYTE PTR fs:[rbp+0x0],ah
 1002b0c:	add    BYTE PTR [rax],al
 1002b0e:	add    BYTE PTR [rax],al
 1002b10:	push   rbx
 1002b11:	add    BYTE PTR [rdi+0x0],ch
 1002b14:	data16 add BYTE PTR [rax+rax*1+0x77],dh
 1002b19:	add    BYTE PTR [rcx+0x0],ah
 1002b1c:	jb     0x1002b1e
 1002b1e:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 1002b23:	add    BYTE PTR [rcx+0x0],ch
 1002b26:	movsxd eax,DWORD PTR [rax]
 1002b28:	jb     0x1002b2a
 1002b2a:	outs   dx,DWORD PTR ds:[rsi]
 1002b2b:	add    BYTE PTR [rbx+0x0],dh
 1002b2e:	outs   dx,DWORD PTR ds:[rsi]
 1002b2f:	add    BYTE PTR [rsi+0x0],ah
 1002b32:	je     0x1002b34
 1002b34:	pop    rsp
 1002b35:	add    BYTE PTR [rbp+0x0],cl
 1002b38:	imul   eax,DWORD PTR [rax],0x720063
 1002b3e:	outs   dx,DWORD PTR ds:[rsi]
 1002b3f:	add    BYTE PTR [rbx+0x0],dh
 1002b42:	outs   dx,DWORD PTR ds:[rsi]
 1002b43:	add    BYTE PTR [rsi+0x0],ah
 1002b46:	je     0x1002b48
 1002b48:	and    BYTE PTR [rax],al
 1002b4a:	push   rbx
 1002b4b:	add    BYTE PTR [rcx+0x0],dl
 1002b4e:	rex.WR add BYTE PTR [rax],r12b
 1002b51:	add    BYTE PTR [rbx+0x0],dl
 1002b54:	add    BYTE PTR gs:[rdx+0x0],dh
 1002b58:	jbe    0x1002b5a
 1002b5a:	add    BYTE PTR gs:[rdx+0x0],dh
 1002b5e:	pop    rsp
 1002b5f:	add    BYTE PTR [rcx],dh
 1002b61:	add    BYTE PTR [rcx],dh
 1002b63:	add    BYTE PTR [rax],dh
 1002b65:	add    BYTE PTR [rax],al
 1002b67:	add    BYTE PTR [rip+0x64007e00],ah        # 0x6500a96d
 1002b6d:	add    BYTE PTR [rax+0x0],dh
 1002b70:	and    eax,0xff000000
 1002b75:	inc    DWORD PTR [rax]
 1002b77:	add    BYTE PTR [rsi],ch
 1002b79:	add    BYTE PTR [rbp+0x0],ah
 1002b7c:	js     0x1002b7e
 1002b7e:	je     0x1002b80
	...
 1002b88:	ins    DWORD PTR es:[rdi],dx
 1002b89:	add    BYTE PTR [rbx+0x0],dh
 1002b8c:	ins    DWORD PTR es:[rdi],dx
 1002b8d:	add    BYTE PTR [rax+rax*1+0x73],ah
 1002b91:	add    BYTE PTR [rdx+0x0],dh
 1002b94:	jbe    0x1002b96
 1002b96:	add    BYTE PTR cs:[rbp+0x0],ah
 1002b9a:	js     0x1002b9c
 1002b9c:	add    BYTE PTR gs:[rax],al
 1002b9f:	add    BYTE PTR [rax+0x0],cl
 1002ba2:	rex.WXB add BYTE PTR [r13+0x0],al
 1002ba6:	pop    rcx
 1002ba7:	add    BYTE PTR [rdi+0x0],bl
 1002baa:	rex.WR add BYTE PTR [rdi+0x0],r9b
 1002bae:	rex.XB add BYTE PTR [r9+0x0],al
 1002bb2:	rex.WR add BYTE PTR [rdi+0x0],r11b
 1002bb6:	rex.WRB add BYTE PTR [r9+0x0],r8b
 1002bba:	rex.XB add BYTE PTR [r8+0x0],cl
 1002bbe:	rex.WB add BYTE PTR [r14+0x0],cl
 1002bc2:	add    BYTE PTR [r8+rax*1+0x53],r11b
 1002bc7:	add    BYTE PTR [rdi+0x0],cl
 1002bca:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1002bcf:	add    BYTE PTR [rcx+0x0],al
 1002bd2:	push   rdx
 1002bd3:	add    BYTE PTR [rbp+0x0],al
 1002bd6:	pop    rsp
 1002bd7:	add    BYTE PTR [rbp+0x0],cl
 1002bda:	imul   eax,DWORD PTR [rax],0x720063
 1002be0:	outs   dx,DWORD PTR ds:[rsi]
 1002be1:	add    BYTE PTR [rbx+0x0],dh
 1002be4:	outs   dx,DWORD PTR ds:[rsi]
 1002be5:	add    BYTE PTR [rsi+0x0],ah
 1002be8:	je     0x1002bea
 1002bea:	pop    rsp
 1002beb:	add    BYTE PTR [rbp+0x0],cl
 1002bee:	imul   eax,DWORD PTR [rax],0x720063
 1002bf4:	outs   dx,DWORD PTR ds:[rsi]
 1002bf5:	add    BYTE PTR [rbx+0x0],dh
 1002bf8:	outs   dx,DWORD PTR ds:[rsi]
 1002bf9:	add    BYTE PTR [rsi+0x0],ah
 1002bfc:	je     0x1002bfe
 1002bfe:	and    BYTE PTR [rax],al
 1002c00:	push   rbx
 1002c01:	add    BYTE PTR [rcx+0x0],dl
 1002c04:	rex.WR add BYTE PTR [rax],r12b
 1002c07:	add    BYTE PTR [rbx+0x0],dl
 1002c0a:	add    BYTE PTR gs:[rdx+0x0],dh
 1002c0e:	jbe    0x1002c10
 1002c10:	add    BYTE PTR gs:[rdx+0x0],dh
 1002c14:	pop    rsp
 1002c15:	add    BYTE PTR [rcx+0x0],cl
 1002c18:	outs   dx,BYTE PTR ds:[rsi]
 1002c19:	add    BYTE PTR [rbx+0x0],dh
 1002c1c:	je     0x1002c1e
 1002c1e:	(bad)  
 1002c1f:	add    BYTE PTR [rsi+0x0],ch
 1002c22:	movsxd eax,DWORD PTR [rax]
 1002c24:	add    BYTE PTR gs:[rax],ah
 1002c27:	add    BYTE PTR [rsi+0x0],cl
 1002c2a:	(bad)  
 1002c2b:	add    BYTE PTR [rbp+0x0],ch
 1002c2e:	add    BYTE PTR gs:[rbx+0x0],dh
 1002c32:	pop    rsp
 1002c33:	add    BYTE PTR [rbx+0x0],dl
 1002c36:	push   rcx
 1002c37:	add    BYTE PTR [rax+rax*1+0x0],cl
 1002c3b:	add    BYTE PTR [rax],al
 1002c3d:	add    BYTE PTR [rax],al
 1002c3f:	add    BYTE PTR [rip+0x51005300],ah        # 0x52007f45
 1002c45:	add    BYTE PTR [rax+rax*1+0x53],cl
 1002c49:	add    BYTE PTR [rbp+0x0],al
 1002c4c:	push   rdx
 1002c4d:	add    BYTE PTR [rsi+0x0],dl
 1002c50:	push   rdx
 1002c51:	add    BYTE PTR [rdi+0x0],bl
 1002c54:	rex.WB add BYTE PTR [r14+0x0],cl
 1002c58:	push   rbx
 1002c59:	add    BYTE PTR [rax+rax*1+0x4e],dl
 1002c5d:	add    BYTE PTR [rcx+0x0],al
 1002c60:	rex.WRB add BYTE PTR [r13+0x0],r8b
 1002c64:	and    eax,0x69000000
 1002c69:	add    BYTE PTR [rsi+0x0],ch
 1002c6c:	imul   eax,DWORD PTR [rax],0x730000
 1002c72:	jno    0x1002c74
 1002c74:	ins    BYTE PTR es:[rdi],dx
 1002c75:	add    BYTE PTR [rbx+0x0],dh
 1002c78:	add    BYTE PTR gs:[rdx+0x0],dh
 1002c7c:	jbe    0x1002c7e
 1002c7e:	jb     0x1002c80
 1002c80:	add    BYTE PTR cs:[rcx+0x0],ch
 1002c84:	outs   dx,BYTE PTR ds:[rsi]
 1002c85:	add    BYTE PTR [rcx+0x0],ch
	...
 1002c90:	rex.W add BYTE PTR [rbx+0x0],cl
 1002c94:	add    BYTE PTR [r9+0x0],r11b
 1002c98:	pop    rdi
 1002c99:	add    BYTE PTR [rbx+0x0],al
 1002c9c:	rex.WR add BYTE PTR [rcx+0x0],r8b
 1002ca0:	push   rbx
 1002ca1:	add    BYTE PTR [rbx+0x0],dl
 1002ca4:	add    BYTE PTR [r11+0x0],r10b
 1002ca8:	pop    rdi
 1002ca9:	add    BYTE PTR [rdx+0x0],dl
 1002cac:	rex.WRXB add BYTE PTR [r15+0x0],r9b
 1002cb0:	push   rsp
 1002cb1:	add    BYTE PTR [rax],al
 1002cb3:	add    BYTE PTR [rax],al
 1002cb5:	add    BYTE PTR [rax],al
 1002cb7:	add    BYTE PTR [rax+0x0],cl
 1002cba:	rex.WXB add BYTE PTR [r13+0x0],al
 1002cbe:	pop    rcx
 1002cbf:	add    BYTE PTR [rdi+0x0],bl
 1002cc2:	rex.XB add BYTE PTR [r13+0x0],dl
 1002cc6:	push   rdx
 1002cc7:	add    BYTE PTR [rdx+0x0],dl
 1002cca:	add    BYTE PTR [r14+0x0],r9b
 1002cce:	push   rsp
 1002ccf:	add    BYTE PTR [rdi+0x0],bl
 1002cd2:	push   rbp
 1002cd3:	add    BYTE PTR [rbx+0x0],dl
 1002cd6:	add    BYTE PTR [r10+0x0],r10b
 1002cda:	add    BYTE PTR [rax],al
 1002cdc:	add    BYTE PTR [rax],al
 1002cde:	add    BYTE PTR [rax],al
 1002ce0:	rex.W add BYTE PTR [rbx+0x0],cl
 1002ce4:	add    BYTE PTR [r9+0x0],r11b
 1002ce8:	pop    rdi
 1002ce9:	add    BYTE PTR [rax+rax*1+0x4f],cl
 1002ced:	add    BYTE PTR [rbx+0x0],al
 1002cf0:	add    BYTE PTR [r8+rax*1+0x5f],cl
 1002cf5:	add    BYTE PTR [rbp+0x0],cl
 1002cf8:	add    BYTE PTR [r11+0x0],al
 1002cfc:	rex.W add BYTE PTR [rcx+0x0],cl
 1002d00:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 1002d04:	add    BYTE PTR [rax],al
 1002d06:	add    BYTE PTR [rax],al
 1002d08:	rex.W add BYTE PTR [rbx+0x0],cl
 1002d0c:	add    BYTE PTR [r9+0x0],r11b
 1002d10:	pop    rdi
 1002d11:	add    BYTE PTR [rbp+0x0],dl
 1002d14:	push   rbx
 1002d15:	add    BYTE PTR [rbp+0x0],al
 1002d18:	push   rdx
 1002d19:	add    BYTE PTR [rbx+0x0],dl
 1002d1c:	add    BYTE PTR [rax],al
 1002d1e:	add    BYTE PTR [rax],al
 1002d20:	rex.W add BYTE PTR [rbx+0x0],cl
 1002d24:	add    BYTE PTR [r9+0x0],r11b
 1002d28:	pop    rdi
 1002d29:	add    BYTE PTR [rax+0x0],dl
 1002d2c:	add    BYTE PTR [r10+0x0],r10b
 1002d30:	rex.RX add BYTE PTR [rdi+0x0],r9b
 1002d34:	push   rdx
 1002d35:	add    BYTE PTR [rbp+0x0],cl
 1002d38:	add    BYTE PTR [r14+0x0],cl
 1002d3c:	rex.XB add BYTE PTR [r13+0x0],al
 1002d40:	pop    rdi
 1002d41:	add    BYTE PTR [rax+rax*1+0x41],al
 1002d45:	add    BYTE PTR [rax+rax*1+0x41],dl
 1002d49:	add    BYTE PTR [rax],al
 1002d4b:	add    BYTE PTR [rax],al
 1002d4d:	add    BYTE PTR [rax],al
 1002d4f:	add    BYTE PTR [rax+0x0],cl
 1002d52:	rex.WXB add BYTE PTR [r13+0x0],al
 1002d56:	pop    rcx
 1002d57:	add    BYTE PTR [rdi+0x0],bl
 1002d5a:	rex.XB add BYTE PTR [r13+0x0],dl
 1002d5e:	push   rdx
 1002d5f:	add    BYTE PTR [rdx+0x0],dl
 1002d62:	add    BYTE PTR [r14+0x0],r9b
 1002d66:	push   rsp
 1002d67:	add    BYTE PTR [rdi+0x0],bl
 1002d6a:	rex.XB add BYTE PTR [r15+0x0],cl
 1002d6e:	rex.WRX add BYTE PTR [rsi+0x0],r8b
 1002d72:	rex.WB add BYTE PTR [r15+0x0],al
 1002d76:	add    BYTE PTR [rax],al
 1002d78:	rex.W add BYTE PTR [rbx+0x0],cl
 1002d7c:	add    BYTE PTR [r9+0x0],r11b
 1002d80:	pop    rdi
 1002d81:	add    BYTE PTR [rax+rax*1+0x59],al
 1002d85:	add    BYTE PTR [rsi+0x0],cl
 1002d88:	pop    rdi
 1002d89:	add    BYTE PTR [rax+rax*1+0x41],al
 1002d8d:	add    BYTE PTR [rax+rax*1+0x41],dl
 1002d91:	add    BYTE PTR [rax],al
 1002d93:	add    BYTE PTR [rax],al
 1002d95:	add    BYTE PTR [rax],al
 1002d97:	add    BYTE PTR [rax+rax*1+0x77],ah
 1002d9b:	add    BYTE PTR [rdi+0x0],ch
 1002d9e:	jb     0x1002da0
 1002da0:	add    BYTE PTR fs:[rdx],bh
 1002da3:	add    BYTE PTR [rip+0x38003000],ah        # 0x39005da9
 1002da9:	add    BYTE PTR [rax+0x0],bh
 1002dac:	add    BYTE PTR [rax],al
 1002dae:	add    BYTE PTR [rax],al
 1002db0:	push   0x78006500
 1002db5:	add    BYTE PTR [rdx],bh
	...
 1002dbf:	add    BYTE PTR [rax+0x0],ch
 1002dc2:	add    BYTE PTR gs:[rax+0x0],bh
 1002dc6:	sub    BYTE PTR [rax],al
	...
 1002dd0:	and    eax,0x29006400
 1002dd5:	add    BYTE PTR [rdx],bh
	...
 1002ddf:	add    BYTE PTR [rip+0x38003000],ah        # 0x39005de5
 1002de5:	add    BYTE PTR [rax+0x0],bh
	...
 1002df0:	imul   ebp,DWORD PTR [rsi+0x73],0x69706174
 1002df7:	xor    DWORD PTR [rcx],esi
 1002df9:	xor    BYTE PTR [rsi],ch
 1002dfb:	fs ins BYTE PTR es:[rdi],dx
 1002dfd:	ins    BYTE PTR es:[rdi],dx
 1002dfe:	add    BYTE PTR [rax],al
 1002e00:	push   rdx
 1002e01:	push   rbx
 1002e02:	rex.R push rbx
 1002e04:	add    al,0x7d
 1002e06:	pushf  
 1002e07:	pop    rbx
 1002e08:	(bad)  
 1002e09:	sub    al,0xc0
 1002e0b:	rex.WR mov spl,0x32
 1002e0e:	mov    WORD PTR [rsi+0x2e14c620],?
 1002e14:	add    DWORD PTR [rax],eax
 1002e16:	add    BYTE PTR [rax],al
 1002e18:	pop    rax
 1002e19:	push   rax
 1002e1a:	rex.B
 1002e1b:	rex.R push rbx
 1002e1d:	rex.WB
 1002e1e:	cs jo  0x1002e85
 1002e21:	(bad)  
	...
 1002e9e:	add    BYTE PTR [rax],al
 1002ea0:	mov    QWORD PTR [rsp+0x8],rbx
 1002ea5:	mov    QWORD PTR [rsp+0x10],rdi
 1002eaa:	xor    edi,edi
 1002eac:	mov    r11,r8
 1002eaf:	mov    r10,rdx
 1002eb2:	mov    rbx,rcx
 1002eb5:	mov    r9d,edi
 1002eb8:	test   rdx,rdx
 1002ebb:	je     0x1002ec6
 1002ebd:	cmp    rdx,0x7fffffff
 1002ec4:	jbe    0x1002ecc
 1002ec6:	mov    r9d,0x80070057
 1002ecc:	test   r9d,r9d
 1002ecf:	js     0x1002ef4
 1002ed1:	mov    rcx,rdx
 1002ed4:	mov    rax,rbx
 1002ed7:	mov    r9d,edi
 1002eda:	test   rdx,rdx
 1002edd:	je     0x1002eee
 1002edf:	nop
 1002ee0:	cmp    WORD PTR [rax],di
 1002ee3:	je     0x1002f40
 1002ee5:	add    rax,0x2
 1002ee9:	dec    rcx
 1002eec:	jne    0x1002ee0
 1002eee:	mov    r9d,0x80070057
 1002ef4:	mov    r8,rdi
 1002ef7:	test   r9d,r9d
 1002efa:	js     0x1002f5f
 1002efc:	lea    rcx,[rbx+r8*2]
 1002f00:	mov    r9d,edi
 1002f03:	sub    rdx,r8
 1002f06:	je     0x1002f52
 1002f08:	add    r8,0x7fffffff
 1002f0f:	mov    rax,rdx
 1002f12:	sub    rax,r10
 1002f15:	add    r8,rax
 1002f18:	sub    r11,rcx
 1002f1b:	nop    DWORD PTR [rax+rax*1+0x0]
 1002f20:	test   r8,r8
 1002f23:	je     0x1002f4d
 1002f25:	movzx  eax,WORD PTR [r11+rcx*1]
 1002f2a:	test   ax,ax
 1002f2d:	je     0x1002f4d
 1002f2f:	mov    WORD PTR [rcx],ax
 1002f32:	add    rcx,0x2
 1002f36:	dec    r8
 1002f39:	dec    rdx
 1002f3c:	jne    0x1002f20
 1002f3e:	jmp    0x1002f52
 1002f40:	test   rcx,rcx
 1002f43:	je     0x1002eee
 1002f45:	mov    r8,rdx
 1002f48:	sub    r8,rcx
 1002f4b:	jmp    0x1002ef7
 1002f4d:	test   rdx,rdx
 1002f50:	jne    0x1002f5c
 1002f52:	sub    rcx,0x2
 1002f56:	mov    r9d,0x8007007a
 1002f5c:	mov    WORD PTR [rcx],di
 1002f5f:	mov    rbx,QWORD PTR [rsp+0x8]
 1002f64:	mov    rdi,QWORD PTR [rsp+0x10]
 1002f69:	mov    eax,r9d
 1002f6c:	ret    
 1002f6d:	int3   
 1002f6e:	int3   
 1002f6f:	int3   
 1002f70:	int3   
 1002f71:	int3   
 1002f72:	int3   
 1002f73:	int3   
 1002f74:	int3   
 1002f75:	int3   
 1002f76:	int3   
 1002f77:	int3   
 1002f78:	int3   
 1002f79:	int3   
 1002f7a:	int3   
 1002f7b:	int3   
 1002f7c:	int3   
 1002f7d:	int3   
 1002f7e:	int3   
 1002f7f:	int3   
 1002f80:	sub    rsp,0x248
 1002f87:	mov    rax,QWORD PTR [rip+0xc842]        # 0x100f7d0
 1002f8e:	xor    rax,rsp
 1002f91:	mov    QWORD PTR [rsp+0x230],rax
 1002f99:	xor    eax,eax
 1002f9b:	lea    rcx,[rsp+0x22]
 1002fa0:	xor    edx,edx
 1002fa2:	mov    r8d,0x208
 1002fa8:	mov    WORD PTR [rsp+0x20],ax
 1002fad:	call   0x1009d56
 1002fb2:	lea    rcx,[rsp+0x20]
 1002fb7:	mov    edx,0x105
 1002fbc:	call   QWORD PTR [rip+0xffffffffffffe17e]        # 0x1001140
 1002fc2:	test   eax,eax
 1002fc4:	je     0x100303b
 1002fc6:	cmp    eax,0x105
 1002fcb:	jae    0x100303b
 1002fcd:	lea    r8,[rip+0xffffffffffffe3fc]        # 0x10013d0
 1002fd4:	lea    rcx,[rsp+0x20]
 1002fd9:	or     r9,0xffffffffffffffff
 1002fdd:	mov    edx,0x105
 1002fe2:	call   QWORD PTR [rip+0xffffffffffffe300]        # 0x10012e8
 1002fe8:	test   eax,eax
 1002fea:	jne    0x100303b
 1002fec:	lea    rcx,[rsp+0x20]
 1002ff1:	mov    QWORD PTR [rsp+0x240],rbx
 1002ff9:	call   QWORD PTR [rip+0xffffffffffffe149]        # 0x1001148
 1002fff:	mov    rbx,rax
 1003002:	test   rax,rax
 1003005:	je     0x1003033
 1003007:	lea    rdx,[rip+0xffffffffffffe3e2]        # 0x10013f0
 100300e:	mov    rcx,rax
 1003011:	call   QWORD PTR [rip+0xffffffffffffe191]        # 0x10011a8
 1003017:	test   rax,rax
 100301a:	je     0x100302a
 100301c:	xor    r9d,r9d
 100301f:	xor    r8d,r8d
 1003022:	xor    ecx,ecx
 1003024:	lea    edx,[r9+0x1]
 1003028:	call   rax
 100302a:	mov    rcx,rbx
 100302d:	call   QWORD PTR [rip+0xffffffffffffe17d]        # 0x10011b0
 1003033:	mov    rbx,QWORD PTR [rsp+0x240]
 100303b:	mov    rcx,QWORD PTR [rsp+0x230]
 1003043:	xor    rcx,rsp
 1003046:	call   0x1009d30
 100304b:	add    rsp,0x248
 1003052:	ret    
 1003053:	int3   
 1003054:	int3   
 1003055:	int3   
 1003056:	int3   
 1003057:	int3   
 1003058:	int3   
 1003059:	int3   
 100305a:	int3   
 100305b:	int3   
 100305c:	int3   
 100305d:	int3   
 100305e:	int3   
 100305f:	int3   
 1003060:	rex push rbp
 1003062:	push   rsi
 1003063:	sub    rsp,0x88
 100306a:	mov    rax,QWORD PTR [rip+0xc75f]        # 0x100f7d0
 1003071:	xor    rax,rsp
 1003074:	mov    QWORD PTR [rsp+0x70],rax
 1003079:	xor    eax,eax
 100307b:	xor    esi,esi
 100307d:	mov    r9d,edx
 1003080:	mov    QWORD PTR [rsp+0x30],rax
 1003085:	lea    eax,[rdx-0x1]
 1003088:	mov    rbp,rcx
 100308b:	mov    QWORD PTR [rsp+0x28],rsi
 1003090:	mov    DWORD PTR [rsp+0x20],esi
 1003094:	cmp    eax,0x2
 1003097:	ja     0x1003271
 100309d:	test   rcx,rcx
 10030a0:	je     0x1003271
 10030a6:	lea    rdx,[rcx+0x820]
 10030ad:	or     rax,0xffffffffffffffff
 10030b1:	inc    rax
 10030b4:	cmp    WORD PTR [rdx+rax*2],si
 10030b8:	jne    0x10030b1
 10030ba:	test   rax,rax
 10030bd:	je     0x1003271
 10030c3:	mov    QWORD PTR [rsp+0x28],rdx
 10030c8:	lea    rax,[rsp+0x58]
 10030cd:	lea    rdx,[rsp+0x58]
 10030d2:	mov    r8d,0xa
 10030d8:	mov    ecx,r9d
 10030db:	mov    QWORD PTR [rsp+0x80],r14
 10030e3:	mov    QWORD PTR [rsp+0x30],rax
 10030e8:	call   QWORD PTR [rip+0xffffffffffffe20a]        # 0x10012f8
 10030ee:	xor    edx,edx
 10030f0:	xor    ecx,ecx
 10030f2:	mov    r8d,0x80020001
 10030f8:	call   QWORD PTR [rip+0xffffffffffffdf22]        # 0x1001020
 10030fe:	mov    r14,rax
 1003101:	test   rax,rax
 1003104:	jne    0x100312b
 1003106:	call   QWORD PTR [rip+0xffffffffffffe094]        # 0x10011a0
 100310c:	mov    r14,QWORD PTR [rsp+0x80]
 1003114:	mov    rcx,QWORD PTR [rsp+0x70]
 1003119:	xor    rcx,rsp
 100311c:	call   0x1009d30
 1003121:	add    rsp,0x88
 1003128:	pop    rsi
 1003129:	pop    rbp
 100312a:	ret    
 100312b:	lea    rdx,[rip+0xafce]        # 0x100e100
 1003132:	mov    r8d,0x14
 1003138:	mov    rcx,rax
 100313b:	mov    QWORD PTR [rsp+0xb8],rdi
 1003143:	call   QWORD PTR [rip+0xffffffffffffdedf]        # 0x1001028
 1003149:	mov    rdi,rax
 100314c:	test   rax,rax
 100314f:	jne    0x100315e
 1003151:	call   QWORD PTR [rip+0xffffffffffffe049]        # 0x10011a0
 1003157:	mov    esi,eax
 1003159:	jmp    0x10031df
 100315e:	mov    QWORD PTR [rsp+0xb0],rbx
 1003166:	call   QWORD PTR [rip+0xffffffffffffdfec]        # 0x1001158
 100316c:	lea    rcx,[rsp+0x20]
 1003171:	mov    rdx,rbp
 1003174:	mov    ebx,eax
 1003176:	call   0x1006f30
 100317b:	lea    rdx,[rsp+0x38]
 1003180:	mov    rcx,rdi
 1003183:	call   QWORD PTR [rip+0xffffffffffffdea7]        # 0x1001030
 1003189:	test   eax,eax
 100318b:	je     0x10031c6
 100318d:	nop    DWORD PTR [rax]
 1003190:	cmp    DWORD PTR [rsp+0x3c],0x1
 1003195:	je     0x10031f7
 1003197:	mov    ecx,0x3e8
 100319c:	call   QWORD PTR [rip+0xffffffffffffdff6]        # 0x1001198
 10031a2:	call   QWORD PTR [rip+0xffffffffffffdfb0]        # 0x1001158
 10031a8:	sub    eax,ebx
 10031aa:	cmp    eax,DWORD PTR [rsp+0x20]
 10031ae:	ja     0x1003267
 10031b4:	lea    rdx,[rsp+0x38]
 10031b9:	mov    rcx,rdi
 10031bc:	call   QWORD PTR [rip+0xffffffffffffde6e]        # 0x1001030
 10031c2:	test   eax,eax
 10031c4:	jne    0x1003190
 10031c6:	call   QWORD PTR [rip+0xffffffffffffdfd4]        # 0x10011a0
 10031cc:	mov    esi,eax
 10031ce:	mov    rcx,rdi
 10031d1:	call   QWORD PTR [rip+0xffffffffffffde41]        # 0x1001018
 10031d7:	mov    rbx,QWORD PTR [rsp+0xb0]
 10031df:	mov    rcx,r14
 10031e2:	call   QWORD PTR [rip+0xffffffffffffde30]        # 0x1001018
 10031e8:	mov    rdi,QWORD PTR [rsp+0xb8]
 10031f0:	mov    eax,esi
 10031f2:	jmp    0x100310c
 10031f7:	test   eax,eax
 10031f9:	je     0x10031c6
 10031fb:	lea    r8,[rsp+0x28]
 1003200:	mov    edx,0x2
 1003205:	mov    rcx,rdi
 1003208:	call   QWORD PTR [rip+0xffffffffffffde2a]        # 0x1001038
 100320e:	test   eax,eax
 1003210:	je     0x10031c6
 1003212:	call   QWORD PTR [rip+0xffffffffffffdf40]        # 0x1001158
 1003218:	lea    rdx,[rsp+0x38]
 100321d:	mov    rcx,rdi
 1003220:	mov    ebx,eax
 1003222:	call   QWORD PTR [rip+0xffffffffffffde08]        # 0x1001030
 1003228:	test   eax,eax
 100322a:	je     0x10031ce
 100322c:	nop    DWORD PTR [rax+0x0]
 1003230:	cmp    DWORD PTR [rsp+0x3c],0x1
 1003235:	je     0x10031ce
 1003237:	mov    ecx,0x3e8
 100323c:	call   QWORD PTR [rip+0xffffffffffffdf56]        # 0x1001198
 1003242:	call   QWORD PTR [rip+0xffffffffffffdf10]        # 0x1001158
 1003248:	sub    eax,ebx
 100324a:	cmp    eax,DWORD PTR [rsp+0x20]
 100324e:	ja     0x1003267
 1003250:	lea    rdx,[rsp+0x38]
 1003255:	mov    rcx,rdi
 1003258:	call   QWORD PTR [rip+0xffffffffffffddd2]        # 0x1001030
 100325e:	test   eax,eax
 1003260:	jne    0x1003230
 1003262:	jmp    0x10031ce
 1003267:	mov    esi,0x20000006
 100326c:	jmp    0x10031ce
 1003271:	mov    eax,0x80070057
 1003276:	jmp    0x1003114
 100327b:	int3   
 100327c:	int3   
 100327d:	int3   
 100327e:	int3   
 100327f:	int3   
 1003280:	int3   
 1003281:	int3   
 1003282:	int3   
 1003283:	int3   
 1003284:	int3   
 1003285:	int3   
 1003286:	int3   
 1003287:	int3   
 1003288:	int3   
 1003289:	int3   
 100328a:	int3   
 100328b:	int3   
 100328c:	int3   
 100328d:	int3   
 100328e:	int3   
 100328f:	int3   
 1003290:	mov    QWORD PTR [rsp+0x18],rbx
 1003295:	push   rbp
 1003296:	push   rsi
 1003297:	push   rdi
 1003298:	push   r12
 100329a:	push   r14
 100329c:	lea    rbp,[rsp-0x1900]
 10032a4:	mov    eax,0x1a00
 10032a9:	call   0x1009cd0
 10032ae:	sub    rsp,rax
 10032b1:	mov    rax,QWORD PTR [rip+0xc518]        # 0x100f7d0
 10032b8:	xor    rax,rsp
 10032bb:	mov    QWORD PTR [rbp+0x18f0],rax
 10032c2:	mov    r14,rdx
 10032c5:	mov    ebx,ecx
 10032c7:	call   0x1002f80
 10032cc:	lea    rcx,[rbp-0x50]
 10032d0:	xor    r12d,r12d
 10032d3:	xor    edx,edx
 10032d5:	mov    r8d,0x1508
 10032db:	mov    QWORD PTR [rsp+0x38],r12
 10032e0:	call   0x1009d56
 10032e5:	cmp    ebx,0x3
 10032e8:	jle    0x1003a67
 10032ee:	mov    r8,QWORD PTR [r14+0x8]
 10032f2:	mov    r9d,0x103
 10032f8:	lea    rcx,[rbp+0x7d0]
 10032ff:	lea    edx,[r9+0x1]
 1003303:	call   QWORD PTR [rip+0xffffffffffffdfd7]        # 0x10012e0
 1003309:	mov    rcx,QWORD PTR [r14+0x10]
 100330d:	mov    WORD PTR [rbp+0x9d6],r12w
 1003315:	call   QWORD PTR [rip+0xffffffffffffdfd5]        # 0x10012f0
 100331b:	mov    rcx,QWORD PTR [r14+0x18]
 100331f:	mov    esi,eax
 1003321:	call   QWORD PTR [rip+0xffffffffffffdfc9]        # 0x10012f0
 1003327:	mov    edi,eax
 1003329:	cmp    eax,0x1
 100332c:	je     0x1003338
 100332e:	cmp    esi,0x4
 1003331:	jne    0x100335e
 1003333:	mov    esi,r12d
 1003336:	jmp    0x100335e
 1003338:	cmp    ebx,0x4
 100333b:	jle    0x1003357
 100333d:	mov    rcx,QWORD PTR [r14+0x20]
 1003341:	call   QWORD PTR [rip+0xffffffffffffdfa9]        # 0x10012f0
 1003347:	mov    ecx,r12d
 100334a:	test   eax,eax
 100334c:	setne  cl
 100334f:	mov    DWORD PTR [rbp+0x10a4],ecx
 1003355:	jmp    0x100335e
 1003357:	mov    DWORD PTR [rbp+0x10a4],r12d
 100335e:	cmp    ebx,0x4
 1003361:	jle    0x1003386
 1003363:	mov    r8,QWORD PTR [r14+0x20]
 1003367:	mov    r9d,0x103
 100336d:	lea    rcx,[rbp+0x9d8]
 1003374:	lea    edx,[r9+0x1]
 1003378:	call   QWORD PTR [rip+0xffffffffffffdf62]        # 0x10012e0
 100337e:	mov    WORD PTR [rbp+0xbde],r12w
 1003386:	cmp    edi,0x4
 1003389:	jne    0x10033f6
 100338b:	cmp    ebx,0x5
 100338e:	jl     0x1003a67
 1003394:	cmp    esi,0x1
 1003397:	je     0x10033a2
 1003399:	cmp    ebx,0x6
 100339c:	jle    0x1003a67
 10033a2:	test   esi,esi
 10033a4:	je     0x10033f6
 10033a6:	mov    r8,QWORD PTR [r14+0x28]
 10033aa:	mov    r9d,0x103
 10033b0:	lea    rcx,[rbp+0xe4c]
 10033b7:	lea    edx,[r9+0x1]
 10033bb:	call   QWORD PTR [rip+0xffffffffffffdf1f]        # 0x10012e0
 10033c1:	mov    WORD PTR [rbp+0x1052],r12w
 10033c9:	cmp    ebx,0x6
 10033cc:	jle    0x10033f6
 10033ce:	cmp    esi,0x1
 10033d1:	je     0x10033f6
 10033d3:	mov    r8,QWORD PTR [r14+0x30]
 10033d7:	mov    r9d,0x27
 10033dd:	lea    rcx,[rbp+0x1054]
 10033e4:	lea    edx,[r9+0x1]
 10033e8:	call   QWORD PTR [rip+0xffffffffffffdef2]        # 0x10012e0
 10033ee:	mov    WORD PTR [rbp+0x10a2],r12w
 10033f6:	lea    eax,[rsi-0x1]
 10033f9:	cmp    eax,0x3
 10033fc:	ja     0x1003a67
 1003402:	lea    eax,[rdi-0x1]
 1003405:	cmp    eax,0x3
 1003408:	ja     0x1003a67
 100340e:	cmp    edi,0x1
 1003411:	je     0x1003433
 1003413:	lea    rcx,[rbp+0x9d8]
 100341a:	or     rax,0xffffffffffffffff
 100341e:	xchg   ax,ax
 1003420:	inc    rax
 1003423:	cmp    WORD PTR [rcx+rax*2],r12w
 1003428:	jne    0x1003420
 100342a:	test   rax,rax
 100342d:	je     0x1003a67
 1003433:	call   0x100a2d0
 1003438:	test   eax,eax
 100343a:	jne    0x1003446
 100343c:	mov    eax,0x20000101
 1003441:	jmp    0x1003604
 1003446:	xor    eax,eax
 1003448:	lea    r8,[rsp+0x50]
 100344d:	lea    rcx,[rbp+0x7d0]
 1003454:	xor    edx,edx
 1003456:	mov    QWORD PTR [rsp+0x1a30],r15
 100345e:	mov    DWORD PTR [rsp+0x30],0x104
 1003466:	mov    WORD PTR [rsp+0x50],r12w
 100346c:	mov    QWORD PTR [rsp+0x52],rax
 1003471:	mov    QWORD PTR [rsp+0x5a],rax
 1003476:	mov    QWORD PTR [rsp+0x62],rax
 100347b:	mov    QWORD PTR [rsp+0x6a],rax
 1003480:	mov    QWORD PTR [rsp+0x72],rax
 1003485:	mov    QWORD PTR [rsp+0x7a],rax
 100348a:	mov    QWORD PTR [rbp-0x7e],rax
 100348e:	mov    QWORD PTR [rbp-0x76],rax
 1003492:	mov    QWORD PTR [rbp-0x6e],rax
 1003496:	mov    DWORD PTR [rbp-0x66],eax
 1003499:	mov    DWORD PTR [rbp-0x60],eax
 100349c:	call   0x100beab
 10034a1:	test   eax,eax
 10034a3:	je     0x1003a36
 10034a9:	lea    r8,[rsp+0x30]
 10034ae:	lea    rdx,[rbp+0x16e0]
 10034b5:	lea    rcx,[rsp+0x50]
 10034ba:	call   0x100bec3
 10034bf:	test   eax,eax
 10034c1:	je     0x1003a36
 10034c7:	lea    r8,[rip+0xacba]        # 0x100e188
 10034ce:	lea    rcx,[rbp+0x16e0]
 10034d5:	mov    edx,0x104
 10034da:	call   0x1002ea0
 10034df:	mov    ebx,eax
 10034e1:	test   eax,eax
 10034e3:	js     0x1003a3b
 10034e9:	lea    rax,[rsp+0x38]
 10034ee:	lea    rdx,[rbp+0x16e0]
 10034f5:	mov    r9d,0x20019
 10034fb:	xor    r8d,r8d
 10034fe:	mov    rcx,0xffffffff80000002
 1003505:	mov    QWORD PTR [rsp+0x20],rax
 100350a:	call   QWORD PTR [rip+0xffffffffffffdaf8]        # 0x1001008
 1003510:	test   eax,eax
 1003512:	jne    0x100355c
 1003514:	mov    rcx,QWORD PTR [rsp+0x38]
 1003519:	lea    rax,[rsp+0x30]
 100351e:	lea    r9,[rsp+0x40]
 1003523:	mov    QWORD PTR [rsp+0x28],rax
 1003528:	lea    rax,[rip+0xc96d]        # 0x100fe9c
 100352f:	lea    rdx,[rip+0xac8a]        # 0x100e1c0
 1003536:	xor    r8d,r8d
 1003539:	mov    DWORD PTR [rsp+0x30],0x4
 1003541:	mov    QWORD PTR [rsp+0x20],rax
 1003546:	call   QWORD PTR [rip+0xffffffffffffdac4]        # 0x1001010
 100354c:	mov    rcx,QWORD PTR [rsp+0x38]
 1003551:	call   QWORD PTR [rip+0xffffffffffffdaa9]        # 0x1001000
 1003557:	mov    QWORD PTR [rsp+0x38],r12
 100355c:	lea    rdx,[rbp+0x14c0]
 1003563:	lea    rcx,[rbp+0x7d0]
 100356a:	mov    r8d,0x84
 1003570:	call   0x1006290
 1003575:	test   eax,eax
 1003577:	je     0x100358e
 1003579:	lea    rcx,[rip+0xffffffffffffde90]        # 0x1001410
 1003580:	mov    edx,eax
 1003582:	call   0x1003a80
 1003587:	mov    eax,0x20000004
 100358c:	jmp    0x10035fc
 100358e:	lea    rdx,[rbp+0x14c0]
 1003595:	lea    rcx,[rip+0xab94]        # 0x100e130
 100359c:	call   QWORD PTR [rip+0xffffffffffffdd36]        # 0x10012d8
 10035a2:	mov    r14d,r12d
 10035a5:	test   eax,eax
 10035a7:	sete   r14b
 10035ab:	cmp    esi,0x3
 10035ae:	jne    0x10035b9
 10035b0:	cmp    edi,0x1
 10035b3:	je     0x10036b2
 10035b9:	test   r14d,r14d
 10035bc:	jne    0x10036b2
 10035c2:	cmp    esi,0x1
 10035c5:	jne    0x100362a
 10035c7:	cmp    edi,esi
 10035c9:	jne    0x100362a
 10035cb:	lea    rcx,[rbp-0x50]
 10035cf:	mov    edx,esi
 10035d1:	call   0x1003060
 10035d6:	test   eax,eax
 10035d8:	je     0x1003a45
 10035de:	cmp    eax,0x20000006
 10035e3:	je     0x1003674
 10035e9:	mov    edx,eax
 10035eb:	lea    rcx,[rip+0xffffffffffffdeee]        # 0x10014e0
 10035f2:	call   0x1003a80
 10035f7:	mov    eax,0x20000005
 10035fc:	mov    r15,QWORD PTR [rsp+0x1a30]
 1003604:	mov    rcx,QWORD PTR [rbp+0x18f0]
 100360b:	xor    rcx,rsp
 100360e:	call   0x1009d30
 1003613:	mov    rbx,QWORD PTR [rsp+0x1a40]
 100361b:	add    rsp,0x1a00
 1003622:	pop    r14
 1003624:	pop    r12
 1003626:	pop    rdi
 1003627:	pop    rsi
 1003628:	pop    rbp
 1003629:	ret    
 100362a:	lea    r8,[rbp-0x50]
 100362e:	lea    rcx,[rbp+0x15d0]
 1003635:	mov    edx,0x84
 100363a:	call   0x1006510
 100363f:	test   eax,eax
 1003641:	jne    0x100369a
 1003643:	lea    rdx,[rbp+0x15d0]
 100364a:	lea    rcx,[rbp+0x14c0]
 1003651:	call   QWORD PTR [rip+0xffffffffffffdc81]        # 0x10012d8
 1003657:	test   eax,eax
 1003659:	je     0x10036b2
 100365b:	lea    rcx,[rbp-0x50]
 100365f:	mov    edx,0x2
 1003664:	call   0x1003060
 1003669:	test   eax,eax
 100366b:	je     0x10036b2
 100366d:	cmp    eax,0x20000006
 1003672:	jne    0x100368c
 1003674:	lea    rcx,[rip+0xffffffffffffddf5]        # 0x1001470
 100367b:	xor    edx,edx
 100367d:	call   0x1003a80
 1003682:	mov    eax,0x20000006
 1003687:	jmp    0x10035fc
 100368c:	mov    edx,eax
 100368e:	lea    rcx,[rip+0xffffffffffffdebb]        # 0x1001550
 1003695:	jmp    0x10035f2
 100369a:	lea    rcx,[rip+0xffffffffffffdf4f]        # 0x10015f0
 10036a1:	xor    edx,edx
 10036a3:	call   0x1003a80
 10036a8:	mov    eax,0x20000003
 10036ad:	jmp    0x10035fc
 10036b2:	xor    ecx,ecx
 10036b4:	call   QWORD PTR [rip+0xffffffffffffdc9e]        # 0x1001358
 10036ba:	mov    ebx,eax
 10036bc:	test   eax,eax
 10036be:	jns    0x10036d8
 10036c0:	lea    rcx,[rip+0xffffffffffffdfb1]        # 0x1001678
 10036c7:	mov    edx,eax
 10036c9:	call   0x1003a80
 10036ce:	mov    eax,0x20000001
 10036d3:	jmp    0x10035fc
 10036d8:	lea    rcx,[rip+0xffffffffffffdfc9]        # 0x10016a8
 10036df:	call   0x10070e0
 10036e4:	mov    r15,rax
 10036e7:	test   rax,rax
 10036ea:	jne    0x10036f6
 10036ec:	mov    ebx,0x20000007
 10036f1:	jmp    0x1003a3b
 10036f6:	lea    rdx,[rip+0xffffffffffffdfcb]        # 0x10016c8
 10036fd:	mov    rcx,rax
 1003700:	call   QWORD PTR [rip+0xffffffffffffdaa2]        # 0x10011a8
 1003706:	mov    QWORD PTR [rip+0xc77b],rax        # 0x100fe88
 100370d:	test   rax,rax
 1003710:	jne    0x1003728
 1003712:	call   QWORD PTR [rip+0xffffffffffffda88]        # 0x10011a0
 1003718:	mov    rcx,r15
 100371b:	mov    ebx,eax
 100371d:	call   QWORD PTR [rip+0xffffffffffffda8d]        # 0x10011b0
 1003723:	jmp    0x1003a3b
 1003728:	lea    rdx,[rip+0xffffffffffffdfa9]        # 0x10016d8
 100372f:	mov    rcx,r15
 1003732:	call   QWORD PTR [rip+0xffffffffffffda70]        # 0x10011a8
 1003738:	mov    QWORD PTR [rip+0xc751],rax        # 0x100fe90
 100373f:	test   rax,rax
 1003742:	jne    0x100375a
 1003744:	call   QWORD PTR [rip+0xffffffffffffda56]        # 0x10011a0
 100374a:	mov    rcx,r15
 100374d:	mov    ebx,eax
 100374f:	call   QWORD PTR [rip+0xffffffffffffda5b]        # 0x10011b0
 1003755:	jmp    0x1003a3b
 100375a:	cmp    esi,0x4
 100375d:	jne    0x100378a
 100375f:	cmp    edi,0x1
 1003762:	jne    0x1003a2b
 1003768:	lea    r8,[rbp-0x50]
 100376c:	mov    edx,edi
 100376e:	mov    rcx,0xffffffff80000002
 1003775:	call   0x1009760
 100377a:	mov    rcx,r15
 100377d:	mov    ebx,eax
 100377f:	call   QWORD PTR [rip+0xffffffffffffda2b]        # 0x10011b0
 1003785:	jmp    0x1003a3b
 100378a:	cmp    esi,0x1
 100378d:	jne    0x1003886
 1003793:	cmp    edi,esi
 1003795:	jne    0x10037c7
 1003797:	lea    r9,[rbp+0x14c0]
 100379e:	test   r14d,r14d
 10037a1:	lea    r8,[rbp-0x50]
 10037a5:	mov    edx,esi
 10037a7:	mov    rcx,0xffffffff80000002
 10037ae:	cmovne r9,r12
 10037b2:	call   0x1008cd0
 10037b7:	mov    rcx,r15
 10037ba:	mov    ebx,eax
 10037bc:	call   QWORD PTR [rip+0xffffffffffffd9ee]        # 0x10011b0
 10037c2:	jmp    0x1003a3b
 10037c7:	cmp    edi,0x2
 10037ca:	jne    0x10037fd
 10037cc:	lea    r9,[rbp+0x14c0]
 10037d3:	test   r14d,r14d
 10037d6:	lea    r8,[rbp-0x50]
 10037da:	lea    edx,[rdi-0x1]
 10037dd:	mov    rcx,0xffffffff80000002
 10037e4:	cmovne r9,r12
 10037e8:	call   0x10076a0
 10037ed:	mov    rcx,r15
 10037f0:	mov    ebx,eax
 10037f2:	call   QWORD PTR [rip+0xffffffffffffd9b8]        # 0x10011b0
 10037f8:	jmp    0x1003a3b
 10037fd:	cmp    edi,0x4
 1003800:	jne    0x100385a
 1003802:	lea    r9,[rbp+0x14c0]
 1003809:	test   r14d,r14d
 100380c:	lea    r8,[rbp-0x50]
 1003810:	lea    edx,[rdi-0x3]
 1003813:	mov    rcx,0xffffffff80000002
 100381a:	cmovne r9,r12
 100381e:	call   0x1008270
 1003823:	mov    ebx,eax
 1003825:	test   eax,eax
 1003827:	je     0x1003a2b
 100382d:	cmp    ax,0x1392
 1003831:	jne    0x1003a2b
 1003837:	lea    r8,[rbp-0x50]
 100383b:	lea    edx,[rdi-0x3]
 100383e:	mov    rcx,0xffffffff80000002
 1003845:	call   0x1008510
 100384a:	mov    rcx,r15
 100384d:	mov    ebx,eax
 100384f:	call   QWORD PTR [rip+0xffffffffffffd95b]        # 0x10011b0
 1003855:	jmp    0x1003a3b
 100385a:	cmp    edi,0x3
 100385d:	jne    0x1003a2b
 1003863:	lea    r8,[rbp-0x50]
 1003867:	lea    edx,[rdi-0x2]
 100386a:	mov    rcx,0xffffffff80000002
 1003871:	call   0x1008040
 1003876:	mov    rcx,r15
 1003879:	mov    ebx,eax
 100387b:	call   QWORD PTR [rip+0xffffffffffffd92f]        # 0x10011b0
 1003881:	jmp    0x1003a3b
 1003886:	cmp    esi,0x2
 1003889:	jne    0x10039a1
 100388f:	cmp    edi,0x1
 1003892:	jne    0x10038e3
 1003894:	lea    r8,[rbp-0x50]
 1003898:	mov    edx,edi
 100389a:	mov    rcx,0xffffffff80000002
 10038a1:	call   0x10094e0
 10038a6:	mov    ebx,eax
 10038a8:	test   eax,eax
 10038aa:	je     0x1003a2b
 10038b0:	movzx  eax,ax
 10038b3:	cmp    eax,0x2030
 10038b8:	je     0x10038c5
 10038ba:	cmp    eax,0x202b
 10038bf:	jne    0x1003a2b
 10038c5:	lea    rcx,[rbp-0x50]
 10038c9:	mov    edx,0x1
 10038ce:	call   0x1003060
 10038d3:	mov    rcx,r15
 10038d6:	mov    ebx,eax
 10038d8:	call   QWORD PTR [rip+0xffffffffffffd8d2]        # 0x10011b0
 10038de:	jmp    0x1003a3b
 10038e3:	cmp    edi,0x2
 10038e6:	jne    0x1003940
 10038e8:	lea    r8,[rbp-0x50]
 10038ec:	lea    edx,[rdi-0x1]
 10038ef:	mov    rcx,0xffffffff80000002
 10038f6:	call   0x1007790
 10038fb:	mov    ebx,eax
 10038fd:	test   eax,eax
 10038ff:	je     0x1003a2b
 1003905:	cmp    ax,0x2030
 1003909:	jne    0x1003a2b
 100390f:	lea    r9,[rbp+0x14c0]
 1003916:	test   r14d,r14d
 1003919:	lea    r8,[rbp-0x50]
 100391d:	lea    edx,[rdi-0x1]
 1003920:	mov    rcx,0xffffffff80000002
 1003927:	cmovne r9,r12
 100392b:	call   0x10076a0
 1003930:	mov    rcx,r15
 1003933:	mov    ebx,eax
 1003935:	call   QWORD PTR [rip+0xffffffffffffd875]        # 0x10011b0
 100393b:	jmp    0x1003a3b
 1003940:	cmp    edi,0x4
 1003943:	jne    0x1003a2b
 1003949:	lea    r8,[rbp-0x50]
 100394d:	lea    edx,[rdi-0x3]
 1003950:	mov    rcx,0xffffffff80000002
 1003957:	call   0x1008510
 100395c:	mov    ebx,eax
 100395e:	test   eax,eax
 1003960:	je     0x1003a2b
 1003966:	cmp    ax,0x2030
 100396a:	jne    0x1003a2b
 1003970:	lea    r9,[rbp+0x14c0]
 1003977:	test   r14d,r14d
 100397a:	lea    r8,[rbp-0x50]
 100397e:	lea    edx,[rdi-0x3]
 1003981:	mov    rcx,0xffffffff80000002
 1003988:	cmovne r9,r12
 100398c:	call   0x1008270
 1003991:	mov    rcx,r15
 1003994:	mov    ebx,eax
 1003996:	call   QWORD PTR [rip+0xffffffffffffd814]        # 0x10011b0
 100399c:	jmp    0x1003a3b
 10039a1:	cmp    esi,0x3
 10039a4:	jne    0x1003a2b
 10039aa:	cmp    edi,0x1
 10039ad:	jne    0x10039c7
 10039af:	lea    rcx,[rbp-0x50]
 10039b3:	mov    edx,esi
 10039b5:	call   0x1003060
 10039ba:	mov    rcx,r15
 10039bd:	mov    ebx,eax
 10039bf:	call   QWORD PTR [rip+0xffffffffffffd7eb]        # 0x10011b0
 10039c5:	jmp    0x1003a3b
 10039c7:	cmp    edi,0x2
 10039ca:	jne    0x10039ec
 10039cc:	lea    r8,[rbp-0x50]
 10039d0:	lea    edx,[rdi-0x1]
 10039d3:	mov    rcx,0xffffffff80000002
 10039da:	call   0x1007a30
 10039df:	mov    rcx,r15
 10039e2:	mov    ebx,eax
 10039e4:	call   QWORD PTR [rip+0xffffffffffffd7c6]        # 0x10011b0
 10039ea:	jmp    0x1003a3b
 10039ec:	cmp    edi,0x4
 10039ef:	jne    0x1003a11
 10039f1:	lea    r8,[rbp-0x50]
 10039f5:	lea    edx,[rdi-0x3]
 10039f8:	mov    rcx,0xffffffff80000002
 10039ff:	call   0x1008ae0
 1003a04:	mov    rcx,r15
 1003a07:	mov    ebx,eax
 1003a09:	call   QWORD PTR [rip+0xffffffffffffd7a1]        # 0x10011b0
 1003a0f:	jmp    0x1003a3b
 1003a11:	cmp    edi,0x3
 1003a14:	jne    0x1003a2b
 1003a16:	lea    r8,[rbp-0x50]
 1003a1a:	lea    edx,[rdi-0x2]
 1003a1d:	mov    rcx,0xffffffff80000002
 1003a24:	call   0x1008160
 1003a29:	mov    ebx,eax
 1003a2b:	mov    rcx,r15
 1003a2e:	call   QWORD PTR [rip+0xffffffffffffd77c]        # 0x10011b0
 1003a34:	jmp    0x1003a3b
 1003a36:	mov    ebx,0x80004005
 1003a3b:	call   QWORD PTR [rip+0xffffffffffffd91f]        # 0x1001360
 1003a41:	test   ebx,ebx
 1003a43:	jne    0x1003a4c
 1003a45:	xor    eax,eax
 1003a47:	jmp    0x10035fc
 1003a4c:	bt     ebx,0x1d
 1003a50:	jb     0x1003a60
 1003a52:	lea    rcx,[rip+0xffffffffffffdc8f]        # 0x10016e8
 1003a59:	mov    edx,ebx
 1003a5b:	call   0x1003a80
 1003a60:	mov    eax,ebx
 1003a62:	jmp    0x10035fc
 1003a67:	mov    eax,0x20000100
 1003a6c:	jmp    0x1003604
 1003a71:	int3   
 1003a72:	int3   
 1003a73:	int3   
 1003a74:	int3   
 1003a75:	int3   
 1003a76:	int3   
 1003a77:	int3   
 1003a78:	int3   
 1003a79:	int3   
 1003a7a:	int3   
 1003a7b:	int3   
 1003a7c:	int3   
 1003a7d:	int3   
 1003a7e:	int3   
 1003a7f:	int3   
 1003a80:	mov    QWORD PTR [rsp+0x8],rbx
 1003a85:	mov    QWORD PTR [rsp+0x18],rdi
 1003a8a:	push   rbp
 1003a8b:	lea    rbp,[rsp-0x1f80]
 1003a93:	mov    eax,0x2080
 1003a98:	call   0x1009cd0
 1003a9d:	sub    rsp,rax
 1003aa0:	mov    rax,QWORD PTR [rip+0xbd29]        # 0x100f7d0
 1003aa7:	xor    rax,rsp
 1003aaa:	mov    QWORD PTR [rbp+0x1f70],rax
 1003ab1:	xor    edi,edi
 1003ab3:	mov    ebx,edx
 1003ab5:	mov    r8,rcx
 1003ab8:	mov    QWORD PTR [rsp+0x48],rdi
 1003abd:	mov    QWORD PTR [rsp+0x40],rdi
 1003ac2:	mov    QWORD PTR [rsp+0x50],rdi
 1003ac7:	mov    QWORD PTR [rsp+0x58],rdi
 1003acc:	test   edx,edx
 1003ace:	je     0x1003c37
 1003ad4:	mov    r9d,DWORD PTR [rip+0xc3c1]        # 0x100fe9c
 1003adb:	lea    rax,[rsp+0x48]
 1003ae0:	mov    r8d,edx
 1003ae3:	mov    QWORD PTR [rsp+0x30],rdi
 1003ae8:	xor    edx,edx
 1003aea:	mov    ecx,0x1300
 1003aef:	mov    DWORD PTR [rsp+0x28],0x40
 1003af7:	mov    QWORD PTR [rsp+0x20],rax
 1003afc:	call   QWORD PTR [rip+0xffffffffffffd62e]        # 0x1001130
 1003b02:	cmp    DWORD PTR [rip+0xc394],edi        # 0x100fe9c
 1003b08:	je     0x1003b3b
 1003b0a:	cmp    eax,0x717
 1003b0f:	jne    0x1003b3b
 1003b11:	lea    rax,[rsp+0x48]
 1003b16:	mov    QWORD PTR [rsp+0x30],rdi
 1003b1b:	xor    r9d,r9d
 1003b1e:	mov    r8d,ebx
 1003b21:	xor    edx,edx
 1003b23:	mov    ecx,0x1300
 1003b28:	mov    DWORD PTR [rsp+0x28],0x40
 1003b30:	mov    QWORD PTR [rsp+0x20],rax
 1003b35:	call   QWORD PTR [rip+0xffffffffffffd5f5]        # 0x1001130
 1003b3b:	test   eax,eax
 1003b3d:	je     0x1003b8f
 1003b3f:	mov    r8,QWORD PTR [rsp+0x48]
 1003b44:	lea    rax,[rsp+0x60]
 1003b49:	mov    ecx,0x1002
 1003b4e:	sub    r8,rax
 1003b51:	lea    rdx,[rsp+0x60]
 1003b56:	data16 nop WORD PTR [rax+rax*1+0x0]
 1003b60:	lea    rax,[rcx+0x7fffeffc]
 1003b67:	test   rax,rax
 1003b6a:	je     0x1003c74
 1003b70:	movzx  eax,WORD PTR [r8+rdx*1]
 1003b75:	test   ax,ax
 1003b78:	je     0x1003c74
 1003b7e:	mov    WORD PTR [rdx],ax
 1003b81:	add    rdx,0x2
 1003b85:	dec    rcx
 1003b88:	jne    0x1003b60
 1003b8a:	jmp    0x1003c79
 1003b8f:	lea    rdx,[rsp+0x40]
 1003b94:	xor    ecx,ecx
 1003b96:	call   QWORD PTR [rip+0xffffffffffffd79c]        # 0x1001338
 1003b9c:	test   eax,eax
 1003b9e:	jne    0x1003c1c
 1003ba0:	mov    rcx,QWORD PTR [rsp+0x40]
 1003ba5:	lea    rdx,[rsp+0x50]
 1003baa:	mov    rax,QWORD PTR [rcx]
 1003bad:	call   QWORD PTR [rax+0x28]
 1003bb0:	mov    rcx,QWORD PTR [rsp+0x40]
 1003bb5:	lea    rdx,[rsp+0x58]
 1003bba:	mov    rax,QWORD PTR [rcx]
 1003bbd:	call   QWORD PTR [rax+0x20]
 1003bc0:	mov    rcx,QWORD PTR [rsp+0x40]
 1003bc5:	mov    rax,QWORD PTR [rcx]
 1003bc8:	call   QWORD PTR [rax+0x10]
 1003bcb:	mov    rax,QWORD PTR [rsp+0x50]
 1003bd0:	mov    r9,QWORD PTR [rsp+0x58]
 1003bd5:	test   rax,rax
 1003bd8:	jne    0x1003bdf
 1003bda:	test   r9,r9
 1003bdd:	je     0x1003c1c
 1003bdf:	lea    r8,[rip+0xffffffffffffdc02]        # 0x10017e8
 1003be6:	lea    rcx,[rsp+0x60]
 1003beb:	mov    edx,0x1002
 1003bf0:	mov    QWORD PTR [rsp+0x20],rax
 1003bf5:	call   0x1007610
 1003bfa:	mov    rcx,QWORD PTR [rsp+0x50]
 1003bff:	test   rcx,rcx
 1003c02:	je     0x1003c0a
 1003c04:	call   QWORD PTR [rip+0xffffffffffffd71e]        # 0x1001328
 1003c0a:	mov    rcx,QWORD PTR [rsp+0x58]
 1003c0f:	test   rcx,rcx
 1003c12:	je     0x1003c80
 1003c14:	call   QWORD PTR [rip+0xffffffffffffd70e]        # 0x1001328
 1003c1a:	jmp    0x1003c80
 1003c1c:	lea    r8,[rip+0xffffffffffffdbd5]        # 0x10017f8
 1003c23:	lea    rcx,[rsp+0x60]
 1003c28:	mov    r9d,ebx
 1003c2b:	mov    edx,0x1002
 1003c30:	call   0x1007610
 1003c35:	jmp    0x1003c80
 1003c37:	lea    rax,[rsp+0x60]
 1003c3c:	mov    ecx,0x1002
 1003c41:	lea    rdx,[rsp+0x60]
 1003c46:	sub    r8,rax
 1003c49:	nop    DWORD PTR [rax+0x0]
 1003c50:	lea    rax,[rcx+0x7fffeffc]
 1003c57:	test   rax,rax
 1003c5a:	je     0x1003c74
 1003c5c:	movzx  eax,WORD PTR [r8+rdx*1]
 1003c61:	test   ax,ax
 1003c64:	je     0x1003c74
 1003c66:	mov    WORD PTR [rdx],ax
 1003c69:	add    rdx,0x2
 1003c6d:	dec    rcx
 1003c70:	jne    0x1003c50
 1003c72:	jmp    0x1003c79
 1003c74:	test   rcx,rcx
 1003c77:	jne    0x1003c7d
 1003c79:	sub    rdx,0x2
 1003c7d:	mov    WORD PTR [rdx],di
 1003c80:	lea    rdx,[rsp+0x60]
 1003c85:	lea    rcx,[rip+0xffffffffffffdb7c]        # 0x1001808
 1003c8c:	call   QWORD PTR [rip+0xffffffffffffd626]        # 0x10012b8
 1003c92:	mov    rcx,QWORD PTR [rsp+0x48]
 1003c97:	test   rcx,rcx
 1003c9a:	je     0x1003ca2
 1003c9c:	call   QWORD PTR [rip+0xffffffffffffd496]        # 0x1001138
 1003ca2:	mov    rcx,QWORD PTR [rbp+0x1f70]
 1003ca9:	xor    rcx,rsp
 1003cac:	call   0x1009d30
 1003cb1:	lea    r11,[rsp+0x2080]
 1003cb9:	mov    rbx,QWORD PTR [r11+0x10]
 1003cbd:	mov    rdi,QWORD PTR [r11+0x20]
 1003cc1:	mov    rsp,r11
 1003cc4:	pop    rbp
 1003cc5:	ret    
 1003cc6:	int3   
 1003cc7:	int3   
 1003cc8:	int3   
 1003cc9:	int3   
 1003cca:	int3   
 1003ccb:	int3   
 1003ccc:	int3   
 1003ccd:	int3   
 1003cce:	int3   
 1003ccf:	int3   
 1003cd0:	mov    QWORD PTR [rsp+0x18],rbx
 1003cd5:	push   rbp
 1003cd6:	push   rsi
 1003cd7:	push   rdi
 1003cd8:	sub    rsp,0x80
 1003cdf:	mov    rax,QWORD PTR [rip+0xbaea]        # 0x100f7d0
 1003ce6:	xor    rax,rsp
 1003ce9:	mov    QWORD PTR [rsp+0x70],rax
 1003cee:	mov    rsi,rdx
 1003cf1:	xor    edx,edx
 1003cf3:	mov    rbp,rcx
 1003cf6:	lea    r8d,[rdx+0x50]
 1003cfa:	lea    rcx,[rsp+0x20]
 1003cff:	call   0x1009d56
 1003d04:	xor    edi,edi
 1003d06:	lea    rbx,[rsp+0x20]
 1003d0b:	nop    DWORD PTR [rax+rax*1+0x0]
 1003d10:	movzx  ecx,BYTE PTR [rdi+rsi*1]
 1003d14:	mov    edx,0x10
 1003d19:	call   QWORD PTR [rip+0xffffffffffffd569]        # 0x1001288
 1003d1f:	lea    ecx,[rax+0x37]
 1003d22:	cmp    eax,0x9
 1003d25:	jg     0x1003d2a
 1003d27:	lea    ecx,[rax+0x30]
 1003d2a:	shr    rax,0x20
 1003d2e:	mov    WORD PTR [rbx],cx
 1003d31:	lea    ecx,[rax+0x37]
 1003d34:	cmp    eax,0x9
 1003d37:	jg     0x1003d3c
 1003d39:	lea    ecx,[rax+0x30]
 1003d3c:	inc    rdi
 1003d3f:	mov    WORD PTR [rbx+0x2],cx
 1003d43:	add    rbx,0x4
 1003d47:	cmp    rdi,0x10
 1003d4b:	jl     0x1003d10
 1003d4d:	lea    r8,[rsp+0x20]
 1003d52:	mov    edx,0x28
 1003d57:	mov    rcx,rbp
 1003d5a:	call   QWORD PTR [rip+0xffffffffffffd530]        # 0x1001290
 1003d60:	mov    rcx,QWORD PTR [rsp+0x70]
 1003d65:	xor    rcx,rsp
 1003d68:	call   0x1009d30
 1003d6d:	mov    rbx,QWORD PTR [rsp+0xb0]
 1003d75:	add    rsp,0x80
 1003d7c:	pop    rdi
 1003d7d:	pop    rsi
 1003d7e:	pop    rbp
 1003d7f:	ret    
 1003d80:	int3   
 1003d81:	int3   
 1003d82:	int3   
 1003d83:	int3   
 1003d84:	int3   
 1003d85:	int3   
 1003d86:	int3   
 1003d87:	int3   
 1003d88:	int3   
 1003d89:	int3   
 1003d8a:	int3   
 1003d8b:	int3   
 1003d8c:	int3   
 1003d8d:	int3   
 1003d8e:	int3   
 1003d8f:	int3   
 1003d90:	mov    QWORD PTR [rsp+0x20],rbx
 1003d95:	push   rbp
 1003d96:	push   rsi
 1003d97:	push   rdi
 1003d98:	push   r12
 1003d9a:	push   r13
 1003d9c:	push   r14
 1003d9e:	push   r15
 1003da0:	lea    rbp,[rsp-0x3f0]
 1003da8:	sub    rsp,0x4f0
 1003daf:	mov    rax,QWORD PTR [rip+0xba1a]        # 0x100f7d0
 1003db6:	xor    rax,rsp
 1003db9:	mov    QWORD PTR [rbp+0x3e0],rax
 1003dc0:	mov    r15,QWORD PTR [rbp+0x450]
 1003dc7:	mov    rsi,QWORD PTR [rbp+0x460]
 1003dce:	xor    r13d,r13d
 1003dd1:	mov    r12d,r8d
 1003dd4:	mov    rdi,rcx
 1003dd7:	mov    r14,rdx
 1003dda:	lea    r8d,[r13+0x50]
 1003dde:	lea    rcx,[rsp+0x72]
 1003de3:	xor    edx,edx
 1003de5:	mov    ebx,r9d
 1003de8:	mov    QWORD PTR [rsp+0x40],r13
 1003ded:	mov    QWORD PTR [rsp+0x38],r13
 1003df2:	mov    DWORD PTR [rsp+0x30],r13d
 1003df7:	mov    WORD PTR [rsp+0x70],r13w
 1003dfd:	call   0x1009d56
 1003e02:	lea    rcx,[rsp+0x58]
 1003e07:	mov    WORD PTR [r14],r13w
 1003e0b:	call   QWORD PTR [rip+0xffffffffffffd51f]        # 0x1001330
 1003e11:	mov    rdx,r15
 1003e14:	mov    ecx,ebx
 1003e16:	call   0x1004480
 1003e1b:	lea    rax,[rsp+0x38]
 1003e20:	lea    rdx,[r15+0x618]
 1003e27:	mov    r9d,0x20019
 1003e2d:	xor    r8d,r8d
 1003e30:	mov    rcx,rdi
 1003e33:	mov    QWORD PTR [rsp+0x20],rax
 1003e38:	call   QWORD PTR [rip+0xffffffffffffd1ca]        # 0x1001008
 1003e3e:	test   rsi,rsi
 1003e41:	je     0x1003e46
 1003e43:	mov    DWORD PTR [rsi],r13d
 1003e46:	test   eax,eax
 1003e48:	jne    0x10040be
 1003e4e:	test   rsi,rsi
 1003e51:	je     0x1003e59
 1003e53:	mov    DWORD PTR [rsi],0x1
 1003e59:	mov    rcx,QWORD PTR [rsp+0x38]
 1003e5e:	lea    rax,[rsp+0x30]
 1003e63:	lea    r9,[rsp+0x50]
 1003e68:	mov    QWORD PTR [rsp+0x28],rax
 1003e6d:	lea    rax,[rsp+0x70]
 1003e72:	lea    rdx,[rip+0xffffffffffffd997]        # 0x1001810
 1003e79:	xor    r8d,r8d
 1003e7c:	mov    DWORD PTR [rsp+0x30],0x50
 1003e84:	mov    QWORD PTR [rsp+0x20],rax
 1003e89:	call   QWORD PTR [rip+0xffffffffffffd181]        # 0x1001010
 1003e8f:	mov    WORD PTR [rbp-0x40],r13w
 1003e94:	test   eax,eax
 1003e96:	jne    0x10040be
 1003e9c:	lea    r9,[rip+0xffffffffffffd9a5]        # 0x1001848
 1003ea3:	lea    rax,[rbp-0x30]
 1003ea7:	mov    edx,0xff
 1003eac:	lea    rcx,[rbp-0x30]
 1003eb0:	mov    edi,r13d
 1003eb3:	sub    r9,rax
 1003eb6:	mov    r8d,edx
 1003eb9:	nop    DWORD PTR [rax+0x0]
 1003ec0:	lea    rax,[r8+0x7ffffeff]
 1003ec7:	mov    r10d,0x8007007a
 1003ecd:	test   rax,rax
 1003ed0:	je     0x1003eea
 1003ed2:	movzx  eax,WORD PTR [r9+rcx*1]
 1003ed7:	test   ax,ax
 1003eda:	je     0x1003eea
 1003edc:	mov    WORD PTR [rcx],ax
 1003edf:	add    rcx,0x2
 1003ee3:	dec    r8
 1003ee6:	jne    0x1003ec0
 1003ee8:	jmp    0x1003eef
 1003eea:	test   r8,r8
 1003eed:	jne    0x1003ef6
 1003eef:	sub    rcx,0x2
 1003ef3:	mov    edi,r10d
 1003ef6:	mov    WORD PTR [rcx],r13w
 1003efa:	test   edi,edi
 1003efc:	js     0x10041e5
 1003f02:	mov    rcx,rdx
 1003f05:	lea    rax,[rbp-0x30]
 1003f09:	mov    edi,r13d
 1003f0c:	nop    DWORD PTR [rax+0x0]
 1003f10:	cmp    WORD PTR [rax],di
 1003f13:	je     0x1003f28
 1003f15:	add    rax,0x2
 1003f19:	dec    rcx
 1003f1c:	jne    0x1003f10
 1003f1e:	mov    edi,0x80070057
 1003f23:	mov    r8,r13
 1003f26:	jmp    0x1003f3d
 1003f28:	test   rcx,rcx
 1003f2b:	jne    0x1003f37
 1003f2d:	mov    edi,0x80070057
 1003f32:	mov    r8,r13
 1003f35:	jmp    0x1003f3d
 1003f37:	mov    r8,rdx
 1003f3a:	sub    r8,rcx
 1003f3d:	test   edi,edi
 1003f3f:	js     0x10041e5
 1003f45:	lea    rax,[rbp-0x30]
 1003f49:	mov    rcx,rdx
 1003f4c:	mov    edi,r13d
 1003f4f:	lea    rax,[rax+r8*2]
 1003f53:	sub    rcx,r8
 1003f56:	je     0x1003f97
 1003f58:	add    r8,0x7fffff00
 1003f5f:	lea    r11,[rsp+0x70]
 1003f64:	add    r8,rcx
 1003f67:	sub    r11,rax
 1003f6a:	nop    WORD PTR [rax+rax*1+0x0]
 1003f70:	test   r8,r8
 1003f73:	je     0x1003f92
 1003f75:	movzx  r9d,WORD PTR [r11+rax*1]
 1003f7a:	test   r9w,r9w
 1003f7e:	je     0x1003f92
 1003f80:	mov    WORD PTR [rax],r9w
 1003f84:	add    rax,0x2
 1003f88:	dec    r8
 1003f8b:	dec    rcx
 1003f8e:	jne    0x1003f70
 1003f90:	jmp    0x1003f97
 1003f92:	test   rcx,rcx
 1003f95:	jne    0x1003f9e
 1003f97:	sub    rax,0x2
 1003f9b:	mov    edi,r10d
 1003f9e:	mov    WORD PTR [rax],r13w
 1003fa2:	test   edi,edi
 1003fa4:	js     0x10041e5
 1003faa:	mov    rcx,rdx
 1003fad:	lea    rax,[rbp-0x30]
 1003fb1:	mov    edi,r13d
 1003fb4:	cmp    WORD PTR [rax],di
 1003fb7:	je     0x1003fcc
 1003fb9:	add    rax,0x2
 1003fbd:	dec    rcx
 1003fc0:	jne    0x1003fb4
 1003fc2:	mov    edi,0x80070057
 1003fc7:	mov    r8,r13
 1003fca:	jmp    0x1003fe1
 1003fcc:	test   rcx,rcx
 1003fcf:	jne    0x1003fdb
 1003fd1:	mov    edi,0x80070057
 1003fd6:	mov    r8,r13
 1003fd9:	jmp    0x1003fe1
 1003fdb:	mov    r8,rdx
 1003fde:	sub    r8,rcx
 1003fe1:	test   edi,edi
 1003fe3:	js     0x10041e5
 1003fe9:	lea    rax,[rbp-0x30]
 1003fed:	mov    edi,r13d
 1003ff0:	lea    rax,[rax+r8*2]
 1003ff4:	sub    rdx,r8
 1003ff7:	je     0x1004037
 1003ff9:	lea    rcx,[r8+0x7fffff00]
 1004000:	lea    r9,[rip+0xffffffffffffd85d]        # 0x1001864
 1004007:	add    rcx,rdx
 100400a:	sub    r9,rax
 100400d:	nop    DWORD PTR [rax]
 1004010:	test   rcx,rcx
 1004013:	je     0x1004032
 1004015:	movzx  r8d,WORD PTR [r9+rax*1]
 100401a:	test   r8w,r8w
 100401e:	je     0x1004032
 1004020:	mov    WORD PTR [rax],r8w
 1004024:	add    rax,0x2
 1004028:	dec    rcx
 100402b:	dec    rdx
 100402e:	jne    0x1004010
 1004030:	jmp    0x1004037
 1004032:	test   rdx,rdx
 1004035:	jne    0x100403e
 1004037:	sub    rax,0x2
 100403b:	mov    edi,r10d
 100403e:	mov    WORD PTR [rax],r13w
 1004042:	test   edi,edi
 1004044:	js     0x10041e5
 100404a:	lea    r8,[rsp+0x40]
 100404f:	lea    rdx,[rip+0xffffffffffffe74a]        # 0x10027a0
 1004056:	lea    rcx,[rbp-0x30]
 100405a:	call   QWORD PTR [rip+0xbe28]        # 0x100fe88
 1004060:	mov    edi,eax
 1004062:	test   eax,eax
 1004064:	js     0x10041e5
 100406a:	mov    rcx,QWORD PTR [rsp+0x40]
 100406f:	lea    r8,[rsp+0x58]
 1004074:	lea    rdx,[rip+0xffffffffffffd7ed]        # 0x1001868
 100407b:	mov    rax,QWORD PTR [rcx]
 100407e:	call   QWORD PTR [rax+0x78]
 1004081:	mov    r8,QWORD PTR [rsp+0x60]
 1004086:	mov    edi,eax
 1004088:	test   r8,r8
 100408b:	je     0x10041e5
 1004091:	cmp    DWORD PTR [rbp+0x458],r13d
 1004098:	je     0x10041da
 100409e:	lea    r8,[rip+0xffffffffffffd783]        # 0x1001828
 10040a5:	mov    rdx,r12
 10040a8:	mov    r9,r12
 10040ab:	mov    rcx,r14
 10040ae:	call   QWORD PTR [rip+0xffffffffffffd22c]        # 0x10012e0
 10040b4:	mov    r8,QWORD PTR [rsp+0x60]
 10040b9:	jmp    0x10041da
 10040be:	call   0x10072a0
 10040c3:	cmp    eax,0x1
 10040c6:	jne    0x10040e3
 10040c8:	lea    rdx,[rbp+0x1d0]
 10040cf:	mov    r8d,0x105
 10040d5:	mov    ecx,eax
 10040d7:	call   0x1005dc0
 10040dc:	mov    edi,eax
 10040de:	jmp    0x100417a
 10040e3:	lea    r8,[rsp+0x48]
 10040e8:	xor    edx,edx
 10040ea:	xor    ecx,ecx
 10040ec:	mov    QWORD PTR [rsp+0x48],r13
 10040f1:	call   0x100a2b0
 10040f6:	mov    edi,eax
 10040f8:	test   eax,eax
 10040fa:	jne    0x100416d
 10040fc:	mov    r9,QWORD PTR [rsp+0x48]
 1004101:	lea    rax,[rbp+0x1d0]
 1004108:	mov    edx,0x105
 100410d:	lea    r8,[r9+0x4]
 1004111:	lea    rcx,[rbp+0x1d0]
 1004118:	mov    r10d,r13d
 100411b:	sub    r8,rax
 100411e:	xchg   ax,ax
 1004120:	lea    rax,[rdx+0x7ffffef9]
 1004127:	test   rax,rax
 100412a:	je     0x1004144
 100412c:	movzx  eax,WORD PTR [r8+rcx*1]
 1004131:	test   ax,ax
 1004134:	je     0x1004144
 1004136:	mov    WORD PTR [rcx],ax
 1004139:	add    rcx,0x2
 100413d:	dec    rdx
 1004140:	jne    0x1004120
 1004142:	jmp    0x1004149
 1004144:	test   rdx,rdx
 1004147:	jne    0x1004153
 1004149:	sub    rcx,0x2
 100414d:	mov    r10d,0x8007007a
 1004153:	mov    WORD PTR [rcx],r13w
 1004157:	mov    eax,0x84b
 100415c:	test   r10d,r10d
 100415f:	mov    edi,r13d
 1004162:	mov    rcx,r9
 1004165:	cmovs  edi,eax
 1004168:	call   0x100a2bc
 100416d:	test   edi,edi
 100416f:	jle    0x100417c
 1004171:	movzx  edi,di
 1004174:	or     edi,0x80070000
 100417a:	test   edi,edi
 100417c:	jne    0x10041e5
 100417e:	cmp    DWORD PTR [rbp+0x458],r13d
 1004185:	je     0x100419d
 1004187:	lea    r8,[rip+0xffffffffffffd69a]        # 0x1001828
 100418e:	mov    rdx,r12
 1004191:	mov    r9,r12
 1004194:	mov    rcx,r14
 1004197:	call   QWORD PTR [rip+0xffffffffffffd143]        # 0x10012e0
 100419d:	lea    r8,[rip+0xffffffffffffd694]        # 0x1001838
 10041a4:	mov    rdx,r12
 10041a7:	mov    rcx,r14
 10041aa:	call   0x1002ea0
 10041af:	lea    r8,[r15+0x820]
 10041b6:	mov    rdx,r12
 10041b9:	mov    rcx,r14
 10041bc:	call   0x1002ea0
 10041c1:	lea    r8,[rip+0xffffffffffffd678]        # 0x1001840
 10041c8:	mov    rdx,r12
 10041cb:	mov    rcx,r14
 10041ce:	call   0x1002ea0
 10041d3:	lea    r8,[rbp+0x1d0]
 10041da:	mov    rdx,r12
 10041dd:	mov    rcx,r14
 10041e0:	call   0x1002ea0
 10041e5:	lea    rcx,[rsp+0x58]
 10041ea:	call   QWORD PTR [rip+0xffffffffffffd150]        # 0x1001340
 10041f0:	mov    rcx,QWORD PTR [rsp+0x38]
 10041f5:	test   rcx,rcx
 10041f8:	je     0x1004200
 10041fa:	call   QWORD PTR [rip+0xffffffffffffce00]        # 0x1001000
 1004200:	mov    rcx,QWORD PTR [rsp+0x40]
 1004205:	test   rcx,rcx
 1004208:	je     0x1004210
 100420a:	mov    rax,QWORD PTR [rcx]
 100420d:	call   QWORD PTR [rax+0x10]
 1004210:	mov    eax,edi
 1004212:	mov    rcx,QWORD PTR [rbp+0x3e0]
 1004219:	xor    rcx,rsp
 100421c:	call   0x1009d30
 1004221:	mov    rbx,QWORD PTR [rsp+0x548]
 1004229:	add    rsp,0x4f0
 1004230:	pop    r15
 1004232:	pop    r14
 1004234:	pop    r13
 1004236:	pop    r12
 1004238:	pop    rdi
 1004239:	pop    rsi
 100423a:	pop    rbp
 100423b:	ret    
 100423c:	int3   
 100423d:	int3   
 100423e:	int3   
 100423f:	int3   
 1004240:	int3   
 1004241:	int3   
 1004242:	int3   
 1004243:	int3   
 1004244:	int3   
 1004245:	int3   
 1004246:	int3   
 1004247:	int3   
 1004248:	int3   
 1004249:	int3   
 100424a:	int3   
 100424b:	int3   
 100424c:	int3   
 100424d:	int3   
 100424e:	int3   
 100424f:	int3   
 1004250:	mov    QWORD PTR [rsp+0x20],rbx
 1004255:	push   rbp
 1004256:	push   rsi
 1004257:	push   rdi
 1004258:	push   r14
 100425a:	push   r15
 100425c:	sub    rsp,0x490
 1004263:	mov    rax,QWORD PTR [rip+0xb566]        # 0x100f7d0
 100426a:	xor    rax,rsp
 100426d:	mov    QWORD PTR [rsp+0x480],rax
 1004275:	mov    rbp,QWORD PTR [rsp+0x4e0]
 100427d:	mov    r14,QWORD PTR [rsp+0x4e8]
 1004285:	mov    rbx,rcx
 1004288:	mov    r15d,r8d
 100428b:	mov    rsi,rdx
 100428e:	xor    edi,edi
 1004290:	lea    rcx,[rsp+0x64]
 1004295:	xor    edx,edx
 1004297:	mov    r8d,0x204
 100429d:	mov    QWORD PTR [rsp+0x40],rdi
 10042a2:	mov    DWORD PTR [rsp+0x60],edi
 10042a6:	call   0x1009d56
 10042ab:	lea    rcx,[rsp+0x274]
 10042b3:	xor    edx,edx
 10042b5:	mov    r8d,0x204
 10042bb:	mov    DWORD PTR [rsp+0x270],edi
 10042c2:	call   0x1009d56
 10042c7:	lea    rcx,[rsp+0x48]
 10042cc:	call   QWORD PTR [rip+0xffffffffffffd05e]        # 0x1001330
 10042d2:	test   r14,r14
 10042d5:	je     0x10042da
 10042d7:	mov    DWORD PTR [r14],edi
 10042da:	lea    rcx,[rsp+0x60]
 10042df:	mov    rdx,rbp
 10042e2:	call   0x1006e30
 10042e7:	cmp    WORD PTR [rsp+0x60],di
 10042ec:	jne    0x100439a
 10042f2:	mov    QWORD PTR [rsp+0x30],rdi
 10042f7:	lea    rdx,[rsp+0x270]
 10042ff:	mov    r9d,0x1
 1004305:	mov    r8d,0x104
 100430b:	mov    rcx,rbx
 100430e:	mov    DWORD PTR [rsp+0x28],edi
 1004312:	mov    QWORD PTR [rsp+0x20],rbp
 1004317:	call   0x1003d90
 100431c:	mov    edi,eax
 100431e:	test   eax,eax
 1004320:	js     0x1004436
 1004326:	lea    r8,[rip+0xffffffffffffd4fb]        # 0x1001828
 100432d:	mov    r9,r15
 1004330:	mov    rdx,r15
 1004333:	mov    rcx,rsi
 1004336:	call   QWORD PTR [rip+0xffffffffffffcfa4]        # 0x10012e0
 100433c:	lea    r8,[rip+0xffffffffffffd54d]        # 0x1001890
 1004343:	mov    rdx,r15
 1004346:	mov    rcx,rsi
 1004349:	call   0x1002ea0
 100434e:	lea    r8,[rbp+0xa28]
 1004355:	mov    rdx,r15
 1004358:	mov    rcx,rsi
 100435b:	call   0x1002ea0
 1004360:	lea    r8,[rip+0xffffffffffffd4d9]        # 0x1001840
 1004367:	mov    rdx,r15
 100436a:	mov    rcx,rsi
 100436d:	call   0x1002ea0
 1004372:	lea    r8,[rsp+0x270]
 100437a:	mov    rdx,r15
 100437d:	mov    rcx,rsi
 1004380:	call   0x1002ea0
 1004385:	test   r14,r14
 1004388:	je     0x1004436
 100438e:	mov    DWORD PTR [r14],0x1
 1004395:	jmp    0x1004436
 100439a:	lea    r8,[rip+0xffffffffffffd4a7]        # 0x1001848
 10043a1:	mov    rdx,r15
 10043a4:	mov    rcx,rsi
 10043a7:	mov    rbx,r15
 10043aa:	call   QWORD PTR [rip+0xffffffffffffcee0]        # 0x1001290
 10043b0:	lea    r8,[rsp+0x60]
 10043b5:	mov    rdx,r15
 10043b8:	mov    rcx,rsi
 10043bb:	call   QWORD PTR [rip+0xffffffffffffcedf]        # 0x10012a0
 10043c1:	lea    r8,[rip+0xffffffffffffd49c]        # 0x1001864
 10043c8:	mov    rdx,r15
 10043cb:	mov    rcx,rsi
 10043ce:	call   QWORD PTR [rip+0xffffffffffffcecc]        # 0x10012a0
 10043d4:	lea    r8,[rsp+0x40]
 10043d9:	lea    rdx,[rip+0xffffffffffffe3c0]        # 0x10027a0
 10043e0:	mov    rcx,rsi
 10043e3:	call   QWORD PTR [rip+0xba9f]        # 0x100fe88
 10043e9:	mov    edi,eax
 10043eb:	test   eax,eax
 10043ed:	js     0x1004436
 10043ef:	mov    rcx,QWORD PTR [rsp+0x40]
 10043f4:	lea    r8,[rsp+0x48]
 10043f9:	lea    rdx,[rip+0xffffffffffffd468]        # 0x1001868
 1004400:	mov    rax,QWORD PTR [rcx]
 1004403:	call   QWORD PTR [rax+0x78]
 1004406:	cmp    QWORD PTR [rsp+0x50],0x0
 100440c:	mov    edi,eax
 100440e:	je     0x1004436
 1004410:	lea    r8,[rip+0xffffffffffffd411]        # 0x1001828
 1004417:	mov    r9,rbx
 100441a:	mov    rdx,rbx
 100441d:	mov    rcx,rsi
 1004420:	call   QWORD PTR [rip+0xffffffffffffceba]        # 0x10012e0
 1004426:	mov    r8,QWORD PTR [rsp+0x50]
 100442b:	mov    rdx,rbx
 100442e:	mov    rcx,rsi
 1004431:	call   0x1002ea0
 1004436:	lea    rcx,[rsp+0x48]
 100443b:	call   QWORD PTR [rip+0xffffffffffffceff]        # 0x1001340
 1004441:	mov    rcx,QWORD PTR [rsp+0x40]
 1004446:	test   rcx,rcx
 1004449:	je     0x1004451
 100444b:	mov    rax,QWORD PTR [rcx]
 100444e:	call   QWORD PTR [rax+0x10]
 1004451:	mov    eax,edi
 1004453:	mov    rcx,QWORD PTR [rsp+0x480]
 100445b:	xor    rcx,rsp
 100445e:	call   0x1009d30
 1004463:	mov    rbx,QWORD PTR [rsp+0x4d8]
 100446b:	add    rsp,0x490
 1004472:	pop    r15
 1004474:	pop    r14
 1004476:	pop    rdi
 1004477:	pop    rsi
 1004478:	pop    rbp
 1004479:	ret    
 100447a:	int3   
 100447b:	int3   
 100447c:	int3   
 100447d:	int3   
 100447e:	int3   
 100447f:	int3   
 1004480:	mov    r11,rsp
 1004483:	mov    QWORD PTR [r11+0x8],rbx
 1004487:	mov    QWORD PTR [r11+0x18],rsi
 100448b:	push   rdi
 100448c:	sub    rsp,0xa0
 1004493:	mov    rax,QWORD PTR [rip+0xb336]        # 0x100f7d0
 100449a:	xor    rax,rsp
 100449d:	mov    QWORD PTR [rsp+0x90],rax
 10044a5:	xor    eax,eax
 10044a7:	mov    esi,ecx
 10044a9:	lea    rcx,[rdx+0x820]
 10044b0:	mov    WORD PTR [rsp+0x30],ax
 10044b5:	mov    rdi,rdx
 10044b8:	mov    QWORD PTR [r11-0x76],rax
 10044bc:	mov    QWORD PTR [r11-0x6e],rax
 10044c0:	mov    QWORD PTR [r11-0x66],rax
 10044c4:	mov    QWORD PTR [r11-0x5e],rax
 10044c8:	mov    QWORD PTR [r11-0x56],rax
 10044cc:	mov    QWORD PTR [r11-0x4e],rax
 10044d0:	mov    QWORD PTR [r11-0x46],rax
 10044d4:	mov    QWORD PTR [r11-0x3e],rax
 10044d8:	mov    QWORD PTR [r11-0x36],rax
 10044dc:	mov    DWORD PTR [rsp+0x7a],eax
 10044e0:	lea    r8,[r11-0x78]
 10044e4:	xor    edx,edx
 10044e6:	mov    DWORD PTR [r11-0x28],eax
 10044ea:	mov    DWORD PTR [rsp+0x20],0x104
 10044f2:	call   0x100beab
 10044f7:	test   eax,eax
 10044f9:	je     0x1004511
 10044fb:	lea    rdx,[rdi+0x618]
 1004502:	lea    r8,[rsp+0x20]
 1004507:	lea    rcx,[rsp+0x30]
 100450c:	call   0x100bec3
 1004511:	lea    rbx,[rdi+0x618]
 1004518:	lea    r8,[rip+0xffffffffffffd379]        # 0x1001898
 100451f:	mov    edx,0x104
 1004524:	mov    rcx,rbx
 1004527:	call   QWORD PTR [rip+0xffffffffffffcd73]        # 0x10012a0
 100452d:	cmp    esi,0x2
 1004530:	jne    0x1004550
 1004532:	lea    r8,[rip+0xffffffffffffd1d7]        # 0x1001710
 1004539:	mov    edx,0x104
 100453e:	mov    rcx,rbx
 1004541:	call   QWORD PTR [rip+0xffffffffffffcd59]        # 0x10012a0
 1004547:	lea    r8,[rdi+0xa28]
 100454e:	jmp    0x100459b
 1004550:	cmp    esi,0x4
 1004553:	jne    0x10045a9
 1004555:	lea    r8,[rip+0xffffffffffffd1b4]        # 0x1001710
 100455c:	mov    edx,0x104
 1004561:	mov    rcx,rbx
 1004564:	call   QWORD PTR [rip+0xffffffffffffcd36]        # 0x10012a0
 100456a:	lea    r8,[rdi+0xa28]
 1004571:	mov    edx,0x104
 1004576:	mov    rcx,rbx
 1004579:	call   QWORD PTR [rip+0xffffffffffffcd21]        # 0x10012a0
 100457f:	lea    r8,[rip+0xffffffffffffd32e]        # 0x10018b4
 1004586:	mov    edx,0x104
 100458b:	mov    rcx,rbx
 100458e:	call   QWORD PTR [rip+0xffffffffffffcd0c]        # 0x10012a0
 1004594:	lea    r8,[rdi+0xe9c]
 100459b:	mov    edx,0x104
 10045a0:	mov    rcx,rbx
 10045a3:	call   QWORD PTR [rip+0xffffffffffffccf7]        # 0x10012a0
 10045a9:	mov    rcx,QWORD PTR [rsp+0x90]
 10045b1:	xor    rcx,rsp
 10045b4:	call   0x1009d30
 10045b9:	lea    r11,[rsp+0xa0]
 10045c1:	mov    rbx,QWORD PTR [r11+0x10]
 10045c5:	mov    rsi,QWORD PTR [r11+0x20]
 10045c9:	mov    rsp,r11
 10045cc:	pop    rdi
 10045cd:	ret    
 10045ce:	int3   
 10045cf:	int3   
 10045d0:	int3   
 10045d1:	int3   
 10045d2:	int3   
 10045d3:	int3   
 10045d4:	int3   
 10045d5:	int3   
 10045d6:	int3   
 10045d7:	int3   
 10045d8:	int3   
 10045d9:	int3   
 10045da:	int3   
 10045db:	int3   
 10045dc:	int3   
 10045dd:	int3   
 10045de:	int3   
 10045df:	int3   
 10045e0:	mov    QWORD PTR [rsp+0x10],rbx
 10045e5:	push   rdi
 10045e6:	sub    rsp,0x20
 10045ea:	mov    DWORD PTR [rip+0xb36c],0x3        # 0x100f960
 10045f4:	mov    DWORD PTR [rip+0xb3aa],0x3        # 0x100f9a8
 10045fe:	lea    rax,[rcx+0x820]
 1004605:	mov    QWORD PTR [rip+0xb35c],rax        # 0x100f968
 100460c:	lea    rax,[rdx+0x534]
 1004613:	mov    rdi,rdx
 1004616:	mov    QWORD PTR [rip+0xb393],rax        # 0x100f9b0
 100461d:	mov    eax,DWORD PTR [rdx+0x63c]
 1004623:	mov    DWORD PTR [rip+0xb393],0xa        # 0x100f9c0
 100462d:	mov    DWORD PTR [rsp+0x30],eax
 1004631:	mov    DWORD PTR [rip+0xb33d],0x3        # 0x100f978
 100463b:	mov    DWORD PTR [rip+0xb34b],0x3        # 0x100f990
 1004645:	mov    DWORD PTR [rip+0xb389],0x7        # 0x100f9d8
 100464f:	lea    rbx,[rcx+0xc80]
 1004656:	mov    DWORD PTR [rsp+0x34],0x0
 100465e:	mov    rax,QWORD PTR [rsp+0x30]
 1004663:	mov    r9d,0xa
 1004669:	mov    r8d,0x104
 100466f:	mov    QWORD PTR [rip+0xb352],rax        # 0x100f9c8
 1004676:	lea    rax,[rdx+0x324]
 100467d:	mov    QWORD PTR [rip+0xb2fc],rax        # 0x100f980
 1004684:	lea    rax,[rdx+0x42c]
 100468b:	mov    QWORD PTR [rip+0xb306],rax        # 0x100f998
 1004692:	mov    eax,DWORD PTR [rdx+0x644]
 1004698:	mov    DWORD PTR [rip+0xb34e],0x3        # 0x100f9f0
 10046a2:	mov    DWORD PTR [rip+0xb338],eax        # 0x100f9e0
 10046a8:	lea    rax,[rdx+0x648]
 10046af:	mov    DWORD PTR [rip+0xb34f],0x7        # 0x100fa08
 10046b9:	mov    QWORD PTR [rip+0xb338],rax        # 0x100f9f8
 10046c0:	mov    eax,DWORD PTR [rdx+0x750]
 10046c6:	mov    DWORD PTR [rip+0xb350],0x3        # 0x100fa20
 10046d0:	mov    DWORD PTR [rip+0xb33a],eax        # 0x100fa10
 10046d6:	mov    ecx,DWORD PTR [rdi+0x754]
 10046dc:	mov    rdx,rbx
 10046df:	call   QWORD PTR [rip+0xffffffffffffcbc3]        # 0x10012a8
 10046e5:	mov    QWORD PTR [rip+0xb33c],rbx        # 0x100fa28
 10046ec:	mov    DWORD PTR [rip+0xb342],0x7        # 0x100fa38
 10046f6:	mov    eax,DWORD PTR [rdi+0x758]
 10046fc:	mov    DWORD PTR [rip+0xb34a],0x6        # 0x100fa50
 1004706:	mov    DWORD PTR [rip+0xb334],eax        # 0x100fa40
 100470c:	mov    eax,DWORD PTR [rdi+0x75c]
 1004712:	mov    DWORD PTR [rip+0xb34c],0x3        # 0x100fa68
 100471c:	mov    DWORD PTR [rip+0xb336],eax        # 0x100fa58
 1004722:	lea    rax,[rdi+0x960]
 1004729:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fa80
 1004733:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fa70
 100473a:	lea    rax,[rdi+0xa68]
 1004741:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fa98
 100474b:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fa88
 1004752:	lea    rax,[rdi+0xb70]
 1004759:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fab0
 1004763:	mov    QWORD PTR [rip+0xb336],rax        # 0x100faa0
 100476a:	lea    rax,[rdi+0xc78]
 1004771:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fac8
 100477b:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fab8
 1004782:	lea    rax,[rdi+0xd80]
 1004789:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fae0
 1004793:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fad0
 100479a:	lea    rax,[rdi+0xe88]
 10047a1:	mov    DWORD PTR [rip+0xb34d],0xa        # 0x100faf8
 10047ab:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fae8
 10047b2:	mov    rax,QWORD PTR [rdi+0x760]
 10047b9:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fb10
 10047c3:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fb00
 10047ca:	lea    rax,[rdi+0x768]
 10047d1:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fb28
 10047db:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fb18
 10047e2:	lea    rax,[rip+0xffffffffffffd187]        # 0x1001970
 10047e9:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fb40
 10047f3:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fb30
 10047fa:	lea    rax,[rip+0xffffffffffffd187]        # 0x1001988
 1004801:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fb58
 100480b:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fb48
 1004812:	lea    rax,[rip+0xffffffffffffd187]        # 0x10019a0
 1004819:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fb70
 1004823:	mov    QWORD PTR [rip+0xb336],rax        # 0x100fb60
 100482a:	lea    rax,[rip+0xffffffffffffd18f]        # 0x10019c0
 1004831:	mov    DWORD PTR [rip+0xb575],0x3        # 0x100fdb0
 100483b:	mov    DWORD PTR [rip+0xb583],0x3        # 0x100fdc8
 1004845:	mov    DWORD PTR [rip+0xb591],0x3        # 0x100fde0
 100484f:	mov    QWORD PTR [rip+0xb322],rax        # 0x100fb78
 1004856:	mov    rbx,QWORD PTR [rsp+0x38]
 100485b:	lea    rax,[rip+0xffffffffffffd176]        # 0x10019d8
 1004862:	mov    DWORD PTR [rip+0xb58c],0x3        # 0x100fdf8
 100486c:	mov    QWORD PTR [rip+0xb545],rax        # 0x100fdb8
 1004873:	lea    rax,[rip+0xffffffffffffd176]        # 0x10019f0
 100487a:	mov    DWORD PTR [rip+0xb58c],0x3        # 0x100fe10
 1004884:	mov    QWORD PTR [rip+0xb545],rax        # 0x100fdd0
 100488b:	lea    rax,[rip+0xffffffffffffd176]        # 0x1001a08
 1004892:	mov    QWORD PTR [rip+0xb54f],rax        # 0x100fde8
 1004899:	lea    rax,[rip+0xffffffffffffd180]        # 0x1001a20
 10048a0:	mov    QWORD PTR [rip+0xb559],rax        # 0x100fe00
 10048a7:	lea    rax,[rip+0xffffffffffffd18a]        # 0x1001a38
 10048ae:	mov    QWORD PTR [rip+0xb563],rax        # 0x100fe18
 10048b5:	mov    eax,0x1
 10048ba:	add    rsp,0x20
 10048be:	pop    rdi
 10048bf:	ret    
 10048c0:	int3   
 10048c1:	int3   
 10048c2:	int3   
 10048c3:	int3   
 10048c4:	int3   
 10048c5:	int3   
 10048c6:	int3   
 10048c7:	int3   
 10048c8:	int3   
 10048c9:	int3   
 10048ca:	int3   
 10048cb:	int3   
 10048cc:	int3   
 10048cd:	int3   
 10048ce:	int3   
 10048cf:	int3   
 10048d0:	mov    QWORD PTR [rsp+0x10],rbx
 10048d5:	mov    QWORD PTR [rsp+0x18],rsi
 10048da:	push   rdi
 10048db:	sub    rsp,0x250
 10048e2:	mov    rax,QWORD PTR [rip+0xaee7]        # 0x100f7d0
 10048e9:	xor    rax,rsp
 10048ec:	mov    QWORD PTR [rsp+0x240],rax
 10048f4:	lea    rax,[rcx+0xa28]
 10048fb:	mov    DWORD PTR [rip+0xb05b],0x3        # 0x100f960
 1004905:	mov    DWORD PTR [rip+0xb279],0x3        # 0x100fb88
 100490f:	mov    QWORD PTR [rip+0xb052],rax        # 0x100f968
 1004916:	lea    rax,[rdx+0x10c]
 100491d:	mov    DWORD PTR [rip+0xb279],0x3        # 0x100fba0
 1004927:	mov    QWORD PTR [rip+0xb262],rax        # 0x100fb90
 100492e:	lea    rax,[rdx+0x210c]
 1004935:	mov    DWORD PTR [rip+0xb051],0x3        # 0x100f990
 100493f:	mov    QWORD PTR [rip+0xb262],rax        # 0x100fba8
 1004946:	lea    rax,[rdx+0x2214]
 100494d:	mov    DWORD PTR [rip+0xb261],0xa        # 0x100fbb8
 1004957:	mov    QWORD PTR [rip+0xb03a],rax        # 0x100f998
 100495e:	mov    rax,QWORD PTR [rdx+0x231c]
 1004965:	mov    DWORD PTR [rip+0xb261],0x3        # 0x100fbd0
 100496f:	mov    QWORD PTR [rip+0xb24a],rax        # 0x100fbc0
 1004976:	lea    rax,[rdx+0x2324]
 100497d:	mov    DWORD PTR [rip+0xb261],0x3        # 0x100fbe8
 1004987:	mov    QWORD PTR [rip+0xb24a],rax        # 0x100fbd8
 100498e:	lea    rax,[rdx+0x242c]
 1004995:	mov    DWORD PTR [rip+0xb261],0x3        # 0x100fc00
 100499f:	mov    QWORD PTR [rip+0xb24a],rax        # 0x100fbf0
 10049a6:	lea    rax,[rdx+0x2534]
 10049ad:	mov    DWORD PTR [rip+0xb369],0x3        # 0x100fd20
 10049b7:	mov    QWORD PTR [rip+0xb24a],rax        # 0x100fc08
 10049be:	lea    rax,[rip+0xffffffffffffd08b]        # 0x1001a50
 10049c5:	mov    DWORD PTR [rip+0xb369],0x3        # 0x100fd38
 10049cf:	mov    QWORD PTR [rip+0xb352],rax        # 0x100fd28
 10049d6:	lea    rax,[rip+0xffffffffffffd083]        # 0x1001a60
 10049dd:	mov    DWORD PTR [rip+0xb369],0x3        # 0x100fd50
 10049e7:	mov    QWORD PTR [rip+0xb352],rax        # 0x100fd40
 10049ee:	lea    rax,[rip+0xffffffffffffd07b]        # 0x1001a70
 10049f5:	mov    DWORD PTR [rip+0xb369],0x3        # 0x100fd68
 10049ff:	mov    QWORD PTR [rip+0xb352],rax        # 0x100fd58
 1004a06:	lea    rax,[rip+0xffffffffffffd073]        # 0x1001a80
 1004a0d:	mov    DWORD PTR [rip+0xb369],0x3        # 0x100fd80
 1004a17:	mov    QWORD PTR [rip+0xb352],rax        # 0x100fd70
 1004a1e:	lea    rax,[rip+0xffffffffffffd06b]        # 0x1001a90
 1004a25:	mov    DWORD PTR [rip+0xb0c9],0xa        # 0x100faf8
 1004a2f:	mov    QWORD PTR [rip+0xb352],rax        # 0x100fd88
 1004a36:	mov    rax,QWORD PTR [rdx+0x263c]
 1004a3d:	lea    rdi,[rcx+0x10f8]
 1004a44:	mov    QWORD PTR [rip+0xb0b5],rax        # 0x100fb00
 1004a4b:	lea    rax,[rdx+0x2644]
 1004a52:	mov    rsi,rcx
 1004a55:	lea    r8,[rip+0xffffffffffffd044]        # 0x1001aa0
 1004a5c:	mov    edx,0x104
 1004a61:	mov    rcx,rdi
 1004a64:	mov    QWORD PTR [rip+0xb0c5],rax        # 0x100fb30
 1004a6b:	mov    DWORD PTR [rip+0xb0b3],0x3        # 0x100fb28
 1004a75:	mov    DWORD PTR [rip+0xb331],0x3        # 0x100fdb0
 1004a7f:	mov    DWORD PTR [rip+0xb33f],0x3        # 0x100fdc8
 1004a89:	mov    DWORD PTR [rip+0xb34d],0x3        # 0x100fde0
 1004a93:	mov    DWORD PTR [rip+0xb35b],0x3        # 0x100fdf8
 1004a9d:	mov    DWORD PTR [rip+0xb369],0x3        # 0x100fe10
 1004aa7:	mov    DWORD PTR [rsp+0x20],0x104
 1004aaf:	call   QWORD PTR [rip+0xffffffffffffc7db]        # 0x1001290
 1004ab5:	lea    rdx,[rsp+0x20]
 1004aba:	lea    rcx,[rsp+0x30]
 1004abf:	call   QWORD PTR [rip+0xffffffffffffc65b]        # 0x1001120
 1004ac5:	mov    edx,0x104
 1004aca:	mov    rcx,rdi
 1004acd:	lea    r8,[rsp+0x30]
 1004ad2:	test   eax,eax
 1004ad4:	jne    0x1004add
 1004ad6:	lea    r8,[rsi+0x820]
 1004add:	call   QWORD PTR [rip+0xffffffffffffc7bd]        # 0x10012a0
 1004ae3:	lea    rbx,[rsi+0x1300]
 1004aea:	lea    r8,[rip+0xffffffffffffcfb3]        # 0x1001aa4
 1004af1:	mov    rcx,rbx
 1004af4:	mov    edx,0x104
 1004af9:	mov    QWORD PTR [rip+0xb2b8],rdi        # 0x100fdb8
 1004b00:	call   QWORD PTR [rip+0xffffffffffffc78a]        # 0x1001290
 1004b06:	lea    r8,[rsi+0x820]
 1004b0d:	lea    rdi,[rip+0xffffffffffffcf94]        # 0x1001aa8
 1004b14:	mov    rsi,r8
 1004b17:	mov    ecx,0xc
 1004b1c:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 1004b1f:	je     0x1004b2f
 1004b21:	mov    edx,0x104
 1004b26:	mov    rcx,rbx
 1004b29:	call   QWORD PTR [rip+0xffffffffffffc771]        # 0x10012a0
 1004b2f:	lea    rax,[rip+0xffffffffffffcf8a]        # 0x1001ac0
 1004b36:	mov    QWORD PTR [rip+0xb293],rbx        # 0x100fdd0
 1004b3d:	mov    QWORD PTR [rip+0xb2a4],rax        # 0x100fde8
 1004b44:	lea    rax,[rip+0xffffffffffffcf85]        # 0x1001ad0
 1004b4b:	mov    QWORD PTR [rip+0xb2ae],rax        # 0x100fe00
 1004b52:	lea    rax,[rip+0xffffffffffffcf87]        # 0x1001ae0
 1004b59:	mov    QWORD PTR [rip+0xb2b8],rax        # 0x100fe18
 1004b60:	mov    eax,0x1
 1004b65:	mov    rcx,QWORD PTR [rsp+0x240]
 1004b6d:	xor    rcx,rsp
 1004b70:	call   0x1009d30
 1004b75:	lea    r11,[rsp+0x250]
 1004b7d:	mov    rbx,QWORD PTR [r11+0x18]
 1004b81:	mov    rsi,QWORD PTR [r11+0x20]
 1004b85:	mov    rsp,r11
 1004b88:	pop    rdi
 1004b89:	ret    
 1004b8a:	int3   
 1004b8b:	int3   
 1004b8c:	int3   
 1004b8d:	int3   
 1004b8e:	int3   
 1004b8f:	int3   
 1004b90:	mov    DWORD PTR [rip+0xadc6],0x3        # 0x100f960
 1004b9a:	mov    DWORD PTR [rip+0xafe4],0x3        # 0x100fb88
 1004ba4:	mov    DWORD PTR [rip+0xade2],0x3        # 0x100f990
 1004bae:	mov    DWORD PTR [rip+0xb060],0x3        # 0x100fc18
 1004bb8:	mov    DWORD PTR [rip+0xae16],0x7        # 0x100f9d8
 1004bc2:	lea    rax,[rcx+0xa28]
 1004bc9:	mov    QWORD PTR [rip+0xad98],rax        # 0x100f968
 1004bd0:	lea    rax,[rdx+0x10c]
 1004bd7:	mov    QWORD PTR [rip+0xafb2],rax        # 0x100fb90
 1004bde:	lea    rax,[rdx+0x31c]
 1004be5:	mov    QWORD PTR [rip+0xadac],rax        # 0x100f998
 1004bec:	lea    rax,[rdx+0x424]
 1004bf3:	mov    QWORD PTR [rip+0xb026],rax        # 0x100fc20
 1004bfa:	mov    eax,DWORD PTR [rdx+0x52c]
 1004c00:	mov    DWORD PTR [rip+0xb026],0x6        # 0x100fc30
 1004c0a:	mov    DWORD PTR [rip+0xadd0],eax        # 0x100f9e0
 1004c10:	mov    eax,DWORD PTR [rdx+0x530]
 1004c16:	mov    DWORD PTR [rip+0xaed8],0xa        # 0x100faf8
 1004c20:	mov    DWORD PTR [rip+0xb012],eax        # 0x100fc38
 1004c26:	mov    rax,QWORD PTR [rdx+0x534]
 1004c2d:	mov    QWORD PTR [rip+0xaecc],rax        # 0x100fb00
 1004c34:	mov    eax,0x1
 1004c39:	ret    
 1004c3a:	int3   
 1004c3b:	int3   
 1004c3c:	int3   
 1004c3d:	int3   
 1004c3e:	int3   
 1004c3f:	int3   
 1004c40:	lea    rax,[rdx+0x4]
 1004c44:	or     rcx,0xffffffffffffffff
 1004c48:	mov    r10,rdx
 1004c4b:	mov    DWORD PTR [rip+0xad0b],0x3        # 0x100f960
 1004c55:	mov    DWORD PTR [rip+0xaf29],0x3        # 0x100fb88
 1004c5f:	lea    r9,[rdx+0x424]
 1004c66:	mov    QWORD PTR [rip+0xacfb],rax        # 0x100f968
 1004c6d:	mov    r8,rcx
 1004c70:	inc    r8
 1004c73:	cmp    WORD PTR [r9+r8*2],0x0
 1004c79:	jne    0x1004c70
 1004c7b:	test   r8,r8
 1004c7e:	lea    r11,[rip+0xffffffffffffce6b]        # 0x1001af0
 1004c85:	lea    r8,[rdx+0x31c]
 1004c8c:	mov    rax,r11
 1004c8f:	mov    DWORD PTR [rip+0xafaf],0x3        # 0x100fc48
 1004c99:	mov    rdx,rcx
 1004c9c:	cmovne rax,r9
 1004ca0:	mov    QWORD PTR [rip+0xaee9],rax        # 0x100fb90
 1004ca7:	nop    WORD PTR [rax+rax*1+0x0]
 1004cb0:	inc    rdx
 1004cb3:	cmp    WORD PTR [r8+rdx*2],0x0
 1004cb9:	jne    0x1004cb0
 1004cbb:	mov    rax,r11
 1004cbe:	test   rdx,rdx
 1004cc1:	mov    DWORD PTR [rip+0xaf95],0x3        # 0x100fc60
 1004ccb:	cmovne rax,r8
 1004ccf:	mov    QWORD PTR [rip+0xaf7a],rax        # 0x100fc50
 1004cd6:	lea    rax,[r10+0x10c]
 1004cdd:	nop    DWORD PTR [rax]
 1004ce0:	inc    rcx
 1004ce3:	cmp    WORD PTR [rax+rcx*2],0x0
 1004ce8:	jne    0x1004ce0
 1004cea:	mov    DWORD PTR [rip+0xaf84],0x6        # 0x100fc78
 1004cf4:	test   rcx,rcx
 1004cf7:	cmovne r11,rax
 1004cfb:	mov    QWORD PTR [rip+0xaf66],r11        # 0x100fc68
 1004d02:	mov    eax,DWORD PTR [r10+0x63c]
 1004d09:	mov    DWORD PTR [rip+0xade5],0xa        # 0x100faf8
 1004d13:	mov    DWORD PTR [rip+0xaf67],eax        # 0x100fc80
 1004d19:	mov    rax,QWORD PTR [r10+0x64c]
 1004d20:	mov    DWORD PTR [rip+0xaf66],0x3        # 0x100fc90
 1004d2a:	mov    QWORD PTR [rip+0xadcf],rax        # 0x100fb00
 1004d31:	mov    DWORD PTR [rip+0xaf6d],0x6        # 0x100fca8
 1004d3b:	lea    rax,[r10+0x214]
 1004d42:	mov    QWORD PTR [rip+0xaf4f],rax        # 0x100fc98
 1004d49:	mov    eax,DWORD PTR [r10+0x634]
 1004d50:	mov    DWORD PTR [rip+0xaf66],0x6        # 0x100fcc0
 1004d5a:	mov    DWORD PTR [rip+0xaf50],eax        # 0x100fcb0
 1004d60:	mov    eax,DWORD PTR [r10+0x638]
 1004d67:	mov    DWORD PTR [rip+0xaf67],0x6        # 0x100fcd8
 1004d71:	mov    DWORD PTR [rip+0xaf51],eax        # 0x100fcc8
 1004d77:	mov    eax,DWORD PTR [r10+0x640]
 1004d7e:	mov    DWORD PTR [rip+0xaf68],0x6        # 0x100fcf0
 1004d88:	mov    DWORD PTR [rip+0xaf52],eax        # 0x100fce0
 1004d8e:	mov    eax,DWORD PTR [r10+0x644]
 1004d95:	mov    DWORD PTR [rip+0xaf69],0x6        # 0x100fd08
 1004d9f:	mov    DWORD PTR [rip+0xaf53],eax        # 0x100fcf8
 1004da5:	mov    eax,DWORD PTR [r10+0x648]
 1004dac:	mov    DWORD PTR [rip+0xaf5e],eax        # 0x100fd10
 1004db2:	mov    eax,0x1
 1004db7:	ret    
 1004db8:	int3   
 1004db9:	int3   
 1004dba:	int3   
 1004dbb:	int3   
 1004dbc:	int3   
 1004dbd:	int3   
 1004dbe:	int3   
 1004dbf:	int3   
 1004dc0:	mov    QWORD PTR [rsp+0x8],rbx
 1004dc5:	mov    QWORD PTR [rsp+0x10],rbp
 1004dca:	mov    QWORD PTR [rsp+0x18],rsi
 1004dcf:	push   rdi
 1004dd0:	sub    rsp,0x20
 1004dd4:	mov    rdi,rdx
 1004dd7:	mov    esi,ecx
 1004dd9:	lea    r8,[rip+0xffffffffffffca58]        # 0x1001838
 1004de0:	lea    rcx,[rdi+0x410]
 1004de7:	mov    edx,0x104
 1004dec:	call   QWORD PTR [rip+0xffffffffffffc49e]        # 0x1001290
 1004df2:	cmp    esi,0x1
 1004df5:	je     0x1004ea0
 1004dfb:	cmp    esi,0x9
 1004dfe:	je     0x1004ea0
 1004e04:	lea    r8,[rdi+0xa28]
 1004e0b:	lea    rcx,[rdi+0x410]
 1004e12:	mov    edx,0x104
 1004e17:	call   QWORD PTR [rip+0xffffffffffffc483]        # 0x10012a0
 1004e1d:	lea    r8,[rdi+0xa28]
 1004e24:	mov    edx,0x104
 1004e29:	mov    rcx,rdi
 1004e2c:	call   QWORD PTR [rip+0xffffffffffffc45e]        # 0x1001290
 1004e32:	cmp    esi,0x4
 1004e35:	jne    0x1004ece
 1004e3b:	lea    r8,[rip+0xffffffffffffca72]        # 0x10018b4
 1004e42:	lea    rcx,[rdi+0x410]
 1004e49:	mov    edx,0x104
 1004e4e:	call   QWORD PTR [rip+0xffffffffffffc44c]        # 0x10012a0
 1004e54:	lea    r8,[rip+0xffffffffffffca59]        # 0x10018b4
 1004e5b:	mov    edx,0x104
 1004e60:	mov    rcx,rdi
 1004e63:	call   QWORD PTR [rip+0xffffffffffffc437]        # 0x10012a0
 1004e69:	lea    r8,[rdi+0xe9c]
 1004e70:	lea    rcx,[rdi+0x410]
 1004e77:	mov    edx,0x104
 1004e7c:	call   QWORD PTR [rip+0xffffffffffffc41e]        # 0x10012a0
 1004e82:	lea    r8,[rdi+0xe9c]
 1004e89:	mov    edx,0x104
 1004e8e:	mov    rcx,rdi
 1004e91:	call   QWORD PTR [rip+0xffffffffffffc409]        # 0x10012a0
 1004e97:	lea    r8,[rip+0xffffffffffffca72]        # 0x1001910
 1004e9e:	jmp    0x1004f0d
 1004ea0:	lea    r8,[rdi+0x820]
 1004ea7:	lea    rcx,[rdi+0x410]
 1004eae:	mov    edx,0x104
 1004eb3:	call   QWORD PTR [rip+0xffffffffffffc3e7]        # 0x10012a0
 1004eb9:	lea    r8,[rdi+0x820]
 1004ec0:	mov    edx,0x104
 1004ec5:	mov    rcx,rdi
 1004ec8:	call   QWORD PTR [rip+0xffffffffffffc3c2]        # 0x1001290
 1004ece:	cmp    esi,0x1
 1004ed1:	jne    0x1004edc
 1004ed3:	lea    r8,[rip+0xffffffffffffcc1e]        # 0x1001af8
 1004eda:	jmp    0x1004f0d
 1004edc:	cmp    esi,0x2
 1004edf:	jne    0x1004eea
 1004ee1:	lea    r8,[rip+0xffffffffffffca00]        # 0x10018e8
 1004ee8:	jmp    0x1004f0d
 1004eea:	cmp    esi,0x3
 1004eed:	jne    0x1004ef8
 1004eef:	lea    r8,[rip+0xffffffffffffca4a]        # 0x1001940
 1004ef6:	jmp    0x1004f0d
 1004ef8:	cmp    esi,0x4
 1004efb:	jne    0x1004f06
 1004efd:	lea    r8,[rip+0xffffffffffffca0c]        # 0x1001910
 1004f04:	jmp    0x1004f0d
 1004f06:	lea    r8,[rip+0xffffffffffffcc13]        # 0x1001b20
 1004f0d:	lea    rbx,[rdi+0x208]
 1004f14:	mov    edx,0x104
 1004f19:	mov    rcx,rbx
 1004f1c:	call   QWORD PTR [rip+0xffffffffffffc36e]        # 0x1001290
 1004f22:	mov    rbp,QWORD PTR [rsp+0x38]
 1004f27:	mov    rsi,QWORD PTR [rsp+0x40]
 1004f2c:	mov    QWORD PTR [rip+0xa92d],rbx        # 0x100f860
 1004f33:	mov    rbx,QWORD PTR [rsp+0x30]
 1004f38:	mov    DWORD PTR [rip+0xa8fe],0x3        # 0x100f840
 1004f42:	mov    QWORD PTR [rip+0xa8ff],rdi        # 0x100f848
 1004f49:	mov    DWORD PTR [rip+0xa905],0x3        # 0x100f858
 1004f53:	add    rsp,0x20
 1004f57:	pop    rdi
 1004f58:	ret    
 1004f59:	int3   
 1004f5a:	int3   
 1004f5b:	int3   
 1004f5c:	int3   
 1004f5d:	int3   
 1004f5e:	int3   
 1004f5f:	int3   
 1004f60:	mov    QWORD PTR [rsp+0x8],rbx
 1004f65:	push   rbp
 1004f66:	push   rsi
 1004f67:	push   rdi
 1004f68:	sub    rsp,0x30
 1004f6c:	mov    rdi,rcx
 1004f6f:	mov    ecx,0x1
 1004f74:	mov    rsi,rdx
 1004f77:	call   0x1004480
 1004f7c:	lea    rax,[rsp+0x68]
 1004f81:	lea    rdx,[rsi+0x618]
 1004f88:	mov    r9d,0x20019
 1004f8e:	xor    r8d,r8d
 1004f91:	mov    rcx,0xffffffff80000002
 1004f98:	mov    QWORD PTR [rsp+0x20],rax
 1004f9d:	call   QWORD PTR [rip+0xffffffffffffc065]        # 0x1001008
 1004fa3:	xor    ebp,ebp
 1004fa5:	test   eax,eax
 1004fa7:	jne    0x100507d
 1004fad:	mov    rcx,QWORD PTR [rsp+0x68]
 1004fb2:	lea    rax,[rsp+0x58]
 1004fb7:	lea    r9,[rsp+0x60]
 1004fbc:	mov    QWORD PTR [rsp+0x28],rax
 1004fc1:	lea    rdx,[rip+0xffffffffffffcb80]        # 0x1001b48
 1004fc8:	xor    r8d,r8d
 1004fcb:	mov    QWORD PTR [rsp+0x20],rdi
 1004fd0:	mov    DWORD PTR [rsp+0x58],0xf90
 1004fd8:	call   QWORD PTR [rip+0xffffffffffffc032]        # 0x1001010
 1004fde:	mov    rcx,QWORD PTR [rsp+0x68]
 1004fe3:	mov    WORD PTR [rdi+0xf8e],bp
 1004fea:	mov    ebx,eax
 1004fec:	call   QWORD PTR [rip+0xffffffffffffc00e]        # 0x1001000
 1004ff2:	test   ebx,ebx
 1004ff4:	jne    0x100507d
 1004ffa:	lea    rcx,[rdi+0x324]
 1005001:	cmp    bp,WORD PTR [rcx]
 1005004:	jne    0x1005658
 100500a:	lea    r10,[rip+0xffffffffffffcb6f]        # 0x1001b80
 1005011:	mov    r9d,0x84
 1005017:	mov    ebx,ebp
 1005019:	sub    r10,rcx
 100501c:	nop    DWORD PTR [rax+0x0]
 1005020:	lea    rax,[r9+0x7fffff7a]
 1005027:	test   rax,rax
 100502a:	je     0x100505d
 100502c:	movzx  eax,WORD PTR [r10+rcx*1]
 1005031:	test   ax,ax
 1005034:	je     0x100505d
 1005036:	mov    WORD PTR [rcx],ax
 1005039:	add    rcx,0x2
 100503d:	dec    r9
 1005040:	jne    0x1005020
 1005042:	sub    rcx,0x2
 1005046:	mov    ebx,0x8007007a
 100504b:	mov    WORD PTR [rcx],bp
 100504e:	mov    eax,ebx
 1005050:	mov    rbx,QWORD PTR [rsp+0x50]
 1005055:	add    rsp,0x30
 1005059:	pop    rdi
 100505a:	pop    rsi
 100505b:	pop    rbp
 100505c:	ret    
 100505d:	test   r9,r9
 1005060:	jne    0x100506b
 1005062:	sub    rcx,0x2
 1005066:	mov    ebx,0x8007007a
 100506b:	mov    WORD PTR [rcx],bp
 100506e:	mov    eax,ebx
 1005070:	mov    rbx,QWORD PTR [rsp+0x50]
 1005075:	add    rsp,0x30
 1005079:	pop    rdi
 100507a:	pop    rsi
 100507b:	pop    rbp
 100507c:	ret    
 100507d:	lea    rcx,[rdi+0x4]
 1005081:	lea    r8,[rip+0xffffffffffffcac8]        # 0x1001b50
 1005088:	mov    r9d,0x84
 100508e:	sub    r8,rcx
 1005091:	mov    edx,r9d
 1005094:	mov    ebx,ebp
 1005096:	data16 nop WORD PTR [rax+rax*1+0x0]
 10050a0:	lea    rax,[rdx+0x7fffff7a]
 10050a7:	test   rax,rax
 10050aa:	je     0x10050c4
 10050ac:	movzx  eax,WORD PTR [r8+rcx*1]
 10050b1:	test   ax,ax
 10050b4:	je     0x10050c4
 10050b6:	mov    WORD PTR [rcx],ax
 10050b9:	add    rcx,0x2
 10050bd:	dec    rdx
 10050c0:	jne    0x10050a0
 10050c2:	jmp    0x10050c9
 10050c4:	test   rdx,rdx
 10050c7:	jne    0x10050d2
 10050c9:	sub    rcx,0x2
 10050cd:	mov    ebx,0x8007007a
 10050d2:	mov    WORD PTR [rcx],bp
 10050d5:	test   ebx,ebx
 10050d7:	js     0x1005658
 10050dd:	lea    rcx,[rdi+0x10c]
 10050e4:	lea    r8,[rip+0xffffffffffffca7d]        # 0x1001b68
 10050eb:	mov    rdx,r9
 10050ee:	sub    r8,rcx
 10050f1:	mov    ebx,ebp
 10050f3:	lea    rax,[rdx+0x7fffff7a]
 10050fa:	test   rax,rax
 10050fd:	je     0x1005117
 10050ff:	movzx  eax,WORD PTR [r8+rcx*1]
 1005104:	test   ax,ax
 1005107:	je     0x1005117
 1005109:	mov    WORD PTR [rcx],ax
 100510c:	add    rcx,0x2
 1005110:	dec    rdx
 1005113:	jne    0x10050f3
 1005115:	jmp    0x100511c
 1005117:	test   rdx,rdx
 100511a:	jne    0x1005125
 100511c:	sub    rcx,0x2
 1005120:	mov    ebx,0x8007007a
 1005125:	mov    WORD PTR [rcx],bp
 1005128:	test   ebx,ebx
 100512a:	js     0x1005658
 1005130:	lea    r8,[rsi+0x820]
 1005137:	lea    rcx,[rdi+0x21c]
 100513e:	mov    rdx,r9
 1005141:	sub    r8,rcx
 1005144:	mov    ebx,ebp
 1005146:	data16 nop WORD PTR [rax+rax*1+0x0]
 1005150:	lea    rax,[rdx+0x7fffff7a]
 1005157:	test   rax,rax
 100515a:	je     0x1005174
 100515c:	movzx  eax,WORD PTR [r8+rcx*1]
 1005161:	test   ax,ax
 1005164:	je     0x1005174
 1005166:	mov    WORD PTR [rcx],ax
 1005169:	add    rcx,0x2
 100516d:	dec    rdx
 1005170:	jne    0x1005150
 1005172:	jmp    0x1005179
 1005174:	test   rdx,rdx
 1005177:	jne    0x1005182
 1005179:	sub    rcx,0x2
 100517d:	mov    ebx,0x8007007a
 1005182:	mov    WORD PTR [rcx],bp
 1005185:	test   ebx,ebx
 1005187:	js     0x1005658
 100518d:	lea    r10,[rip+0xffffffffffffc9ec]        # 0x1001b80
 1005194:	lea    rcx,[rdi+0x324]
 100519b:	mov    rdx,r9
 100519e:	mov    r8,r10
 10051a1:	mov    ebx,ebp
 10051a3:	sub    r8,rcx
 10051a6:	data16 nop WORD PTR [rax+rax*1+0x0]
 10051b0:	lea    rax,[rdx+0x7fffff7a]
 10051b7:	test   rax,rax
 10051ba:	je     0x10051d4
 10051bc:	movzx  eax,WORD PTR [r8+rcx*1]
 10051c1:	test   ax,ax
 10051c4:	je     0x10051d4
 10051c6:	mov    WORD PTR [rcx],ax
 10051c9:	add    rcx,0x2
 10051cd:	dec    rdx
 10051d0:	jne    0x10051b0
 10051d2:	jmp    0x10051d9
 10051d4:	test   rdx,rdx
 10051d7:	jne    0x10051e2
 10051d9:	sub    rcx,0x2
 10051dd:	mov    ebx,0x8007007a
 10051e2:	mov    WORD PTR [rcx],bp
 10051e5:	test   ebx,ebx
 10051e7:	js     0x1005658
 10051ed:	lea    rcx,[rdi+0x42c]
 10051f4:	lea    r8,[rip+0xffffffffffffc995]        # 0x1001b90
 10051fb:	mov    rdx,r9
 10051fe:	sub    r8,rcx
 1005201:	mov    ebx,ebp
 1005203:	lea    rax,[rdx+0x7fffff7a]
 100520a:	test   rax,rax
 100520d:	je     0x1005227
 100520f:	movzx  eax,WORD PTR [r8+rcx*1]
 1005214:	test   ax,ax
 1005217:	je     0x1005227
 1005219:	mov    WORD PTR [rcx],ax
 100521c:	add    rcx,0x2
 1005220:	dec    rdx
 1005223:	jne    0x1005203
 1005225:	jmp    0x100522c
 1005227:	test   rdx,rdx
 100522a:	jne    0x1005235
 100522c:	sub    rcx,0x2
 1005230:	mov    ebx,0x8007007a
 1005235:	mov    WORD PTR [rcx],bp
 1005238:	test   ebx,ebx
 100523a:	js     0x1005658
 1005240:	lea    rcx,[rdi+0x534]
 1005247:	lea    r8,[rip+0xffffffffffffc952]        # 0x1001ba0
 100524e:	mov    rdx,r9
 1005251:	sub    r8,rcx
 1005254:	mov    ebx,ebp
 1005256:	data16 nop WORD PTR [rax+rax*1+0x0]
 1005260:	lea    rax,[rdx+0x7fffff7a]
 1005267:	test   rax,rax
 100526a:	je     0x1005284
 100526c:	movzx  eax,WORD PTR [r8+rcx*1]
 1005271:	test   ax,ax
 1005274:	je     0x1005284
 1005276:	mov    WORD PTR [rcx],ax
 1005279:	add    rcx,0x2
 100527d:	dec    rdx
 1005280:	jne    0x1005260
 1005282:	jmp    0x1005289
 1005284:	test   rdx,rdx
 1005287:	jne    0x1005292
 1005289:	sub    rcx,0x2
 100528d:	mov    ebx,0x8007007a
 1005292:	mov    WORD PTR [rcx],bp
 1005295:	test   ebx,ebx
 1005297:	js     0x1005658
 100529d:	lea    rcx,[rdi+0x648]
 10052a4:	lea    r8,[rip+0xffffffffffffc90d]        # 0x1001bb8
 10052ab:	mov    rdx,r9
 10052ae:	sub    r8,rcx
 10052b1:	mov    ebx,ebp
 10052b3:	lea    rax,[rdx+0x7fffff7a]
 10052ba:	test   rax,rax
 10052bd:	je     0x10052d7
 10052bf:	movzx  eax,WORD PTR [r8+rcx*1]
 10052c4:	test   ax,ax
 10052c7:	je     0x10052d7
 10052c9:	mov    WORD PTR [rcx],ax
 10052cc:	add    rcx,0x2
 10052d0:	dec    rdx
 10052d3:	jne    0x10052b3
 10052d5:	jmp    0x10052dc
 10052d7:	test   rdx,rdx
 10052da:	jne    0x10052e5
 10052dc:	sub    rcx,0x2
 10052e0:	mov    ebx,0x8007007a
 10052e5:	mov    WORD PTR [rcx],bp
 10052e8:	test   ebx,ebx
 10052ea:	js     0x1005658
 10052f0:	lea    rcx,[rdi+0x768]
 10052f7:	mov    rdx,r9
 10052fa:	mov    ebx,ebp
 10052fc:	sub    r10,rcx
 10052ff:	nop
 1005300:	lea    rax,[rdx+0x7fffff7a]
 1005307:	test   rax,rax
 100530a:	je     0x1005324
 100530c:	movzx  eax,WORD PTR [r10+rcx*1]
 1005311:	test   ax,ax
 1005314:	je     0x1005324
 1005316:	mov    WORD PTR [rcx],ax
 1005319:	add    rcx,0x2
 100531d:	dec    rdx
 1005320:	jne    0x1005300
 1005322:	jmp    0x1005329
 1005324:	test   rdx,rdx
 1005327:	jne    0x1005332
 1005329:	sub    rcx,0x2
 100532d:	mov    ebx,0x8007007a
 1005332:	mov    WORD PTR [rcx],bp
 1005335:	test   ebx,ebx
 1005337:	js     0x1005658
 100533d:	lea    rcx,[rdi+0x870]
 1005344:	lea    r10,[rip+0xffffffffffffc895]        # 0x1001be0
 100534b:	mov    r8d,0x28
 1005351:	sub    r10,rcx
 1005354:	mov    edx,r8d
 1005357:	mov    ebx,ebp
 1005359:	nop    DWORD PTR [rax+0x0]
 1005360:	lea    rax,[rdx+0x7fffffd6]
 1005367:	test   rax,rax
 100536a:	je     0x1005384
 100536c:	movzx  eax,WORD PTR [r10+rcx*1]
 1005371:	test   ax,ax
 1005374:	je     0x1005384
 1005376:	mov    WORD PTR [rcx],ax
 1005379:	add    rcx,0x2
 100537d:	dec    rdx
 1005380:	jne    0x1005360
 1005382:	jmp    0x1005389
 1005384:	test   rdx,rdx
 1005387:	jne    0x1005392
 1005389:	sub    rcx,0x2
 100538d:	mov    ebx,0x8007007a
 1005392:	mov    WORD PTR [rcx],bp
 1005395:	test   ebx,ebx
 1005397:	js     0x1005658
 100539d:	lea    rcx,[rdi+0x8c0]
 10053a4:	lea    r10,[rip+0xffffffffffffc885]        # 0x1001c30
 10053ab:	mov    rdx,r8
 10053ae:	sub    r10,rcx
 10053b1:	mov    ebx,ebp
 10053b3:	lea    rax,[rdx+0x7fffffd6]
 10053ba:	test   rax,rax
 10053bd:	je     0x10053d7
 10053bf:	movzx  eax,WORD PTR [r10+rcx*1]
 10053c4:	test   ax,ax
 10053c7:	je     0x10053d7
 10053c9:	mov    WORD PTR [rcx],ax
 10053cc:	add    rcx,0x2
 10053d0:	dec    rdx
 10053d3:	jne    0x10053b3
 10053d5:	jmp    0x10053dc
 10053d7:	test   rdx,rdx
 10053da:	jne    0x10053e5
 10053dc:	sub    rcx,0x2
 10053e0:	mov    ebx,0x8007007a
 10053e5:	mov    WORD PTR [rcx],bp
 10053e8:	test   ebx,ebx
 10053ea:	js     0x1005658
 10053f0:	lea    rcx,[rdi+0x910]
 10053f7:	lea    rdx,[rip+0xffffffffffffc882]        # 0x1001c80
 10053fe:	mov    ebx,ebp
 1005400:	sub    rdx,rcx
 1005403:	lea    rax,[r8+0x7fffffd6]
 100540a:	test   rax,rax
 100540d:	je     0x1005426
 100540f:	movzx  eax,WORD PTR [rcx+rdx*1]
 1005413:	test   ax,ax
 1005416:	je     0x1005426
 1005418:	mov    WORD PTR [rcx],ax
 100541b:	add    rcx,0x2
 100541f:	dec    r8
 1005422:	jne    0x1005403
 1005424:	jmp    0x100542b
 1005426:	test   r8,r8
 1005429:	jne    0x1005434
 100542b:	sub    rcx,0x2
 100542f:	mov    ebx,0x8007007a
 1005434:	mov    WORD PTR [rcx],bp
 1005437:	test   ebx,ebx
 1005439:	js     0x1005658
 100543f:	lea    r10,[rip+0xffffffffffffc6aa]        # 0x1001af0
 1005446:	lea    rcx,[rdi+0x960]
 100544d:	mov    rdx,r9
 1005450:	mov    r8,r10
 1005453:	mov    ebx,ebp
 1005455:	sub    r8,rcx
 1005458:	nop    DWORD PTR [rax+rax*1+0x0]
 1005460:	lea    rax,[rdx+0x7fffff7a]
 1005467:	test   rax,rax
 100546a:	je     0x1005484
 100546c:	movzx  eax,WORD PTR [rcx+r8*1]
 1005471:	test   ax,ax
 1005474:	je     0x1005484
 1005476:	mov    WORD PTR [rcx],ax
 1005479:	add    rcx,0x2
 100547d:	dec    rdx
 1005480:	jne    0x1005460
 1005482:	jmp    0x1005489
 1005484:	test   rdx,rdx
 1005487:	jne    0x1005492
 1005489:	sub    rcx,0x2
 100548d:	mov    ebx,0x8007007a
 1005492:	mov    WORD PTR [rcx],bp
 1005495:	test   ebx,ebx
 1005497:	js     0x1005658
 100549d:	lea    rcx,[rdi+0xa68]
 10054a4:	mov    r8,r10
 10054a7:	mov    rdx,r9
 10054aa:	sub    r8,rcx
 10054ad:	mov    ebx,ebp
 10054af:	nop
 10054b0:	lea    rax,[rdx+0x7fffff7a]
 10054b7:	test   rax,rax
 10054ba:	je     0x10054d4
 10054bc:	movzx  eax,WORD PTR [rcx+r8*1]
 10054c1:	test   ax,ax
 10054c4:	je     0x10054d4
 10054c6:	mov    WORD PTR [rcx],ax
 10054c9:	add    rcx,0x2
 10054cd:	dec    rdx
 10054d0:	jne    0x10054b0
 10054d2:	jmp    0x10054d9
 10054d4:	test   rdx,rdx
 10054d7:	jne    0x10054e2
 10054d9:	sub    rcx,0x2
 10054dd:	mov    ebx,0x8007007a
 10054e2:	mov    WORD PTR [rcx],bp
 10054e5:	test   ebx,ebx
 10054e7:	js     0x1005658
 10054ed:	lea    rcx,[rdi+0xc78]
 10054f4:	mov    r8,r10
 10054f7:	mov    rdx,r9
 10054fa:	sub    r8,rcx
 10054fd:	mov    ebx,ebp
 10054ff:	nop
 1005500:	lea    rax,[rdx+0x7fffff7a]
 1005507:	test   rax,rax
 100550a:	je     0x1005524
 100550c:	movzx  eax,WORD PTR [r8+rcx*1]
 1005511:	test   ax,ax
 1005514:	je     0x1005524
 1005516:	mov    WORD PTR [rcx],ax
 1005519:	add    rcx,0x2
 100551d:	dec    rdx
 1005520:	jne    0x1005500
 1005522:	jmp    0x1005529
 1005524:	test   rdx,rdx
 1005527:	jne    0x1005532
 1005529:	sub    rcx,0x2
 100552d:	mov    ebx,0x8007007a
 1005532:	mov    WORD PTR [rcx],bp
 1005535:	test   ebx,ebx
 1005537:	js     0x1005658
 100553d:	lea    rcx,[rdi+0xb70]
 1005544:	mov    r8,r10
 1005547:	mov    rdx,r9
 100554a:	sub    r8,rcx
 100554d:	mov    ebx,ebp
 100554f:	nop
 1005550:	lea    rax,[rdx+0x7fffff7a]
 1005557:	test   rax,rax
 100555a:	je     0x1005574
 100555c:	movzx  eax,WORD PTR [r8+rcx*1]
 1005561:	test   ax,ax
 1005564:	je     0x1005574
 1005566:	mov    WORD PTR [rcx],ax
 1005569:	add    rcx,0x2
 100556d:	dec    rdx
 1005570:	jne    0x1005550
 1005572:	jmp    0x1005579
 1005574:	test   rdx,rdx
 1005577:	jne    0x1005582
 1005579:	sub    rcx,0x2
 100557d:	mov    ebx,0x8007007a
 1005582:	mov    WORD PTR [rcx],bp
 1005585:	test   ebx,ebx
 1005587:	js     0x1005658
 100558d:	lea    rcx,[rdi+0xd80]
 1005594:	mov    r8,r10
 1005597:	mov    rdx,r9
 100559a:	sub    r8,rcx
 100559d:	mov    ebx,ebp
 100559f:	nop
 10055a0:	lea    rax,[rdx+0x7fffff7a]
 10055a7:	test   rax,rax
 10055aa:	je     0x10055c4
 10055ac:	movzx  eax,WORD PTR [r8+rcx*1]
 10055b1:	test   ax,ax
 10055b4:	je     0x10055c4
 10055b6:	mov    WORD PTR [rcx],ax
 10055b9:	add    rcx,0x2
 10055bd:	dec    rdx
 10055c0:	jne    0x10055a0
 10055c2:	jmp    0x10055c9
 10055c4:	test   rdx,rdx
 10055c7:	jne    0x10055d2
 10055c9:	sub    rcx,0x2
 10055cd:	mov    ebx,0x8007007a
 10055d2:	mov    WORD PTR [rcx],bp
 10055d5:	test   ebx,ebx
 10055d7:	js     0x1005658
 10055d9:	lea    rcx,[rdi+0xe88]
 10055e0:	mov    ebx,ebp
 10055e2:	sub    r10,rcx
 10055e5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10055f0:	lea    rax,[r9+0x7fffff7a]
 10055f7:	test   rax,rax
 10055fa:	je     0x1005614
 10055fc:	movzx  eax,WORD PTR [r10+rcx*1]
 1005601:	test   ax,ax
 1005604:	je     0x1005614
 1005606:	mov    WORD PTR [rcx],ax
 1005609:	add    rcx,0x2
 100560d:	dec    r9
 1005610:	jne    0x10055f0
 1005612:	jmp    0x1005619
 1005614:	test   r9,r9
 1005617:	jne    0x1005622
 1005619:	sub    rcx,0x2
 100561d:	mov    ebx,0x8007007a
 1005622:	mov    WORD PTR [rcx],bp
 1005625:	test   ebx,ebx
 1005627:	js     0x1005658
 1005629:	mov    QWORD PTR [rdi+0x214],0x8
 1005634:	mov    QWORD PTR [rdi+0x63c],rbp
 100563b:	mov    DWORD PTR [rdi+0x644],ebp
 1005641:	mov    QWORD PTR [rdi+0x750],rbp
 1005648:	mov    QWORD PTR [rdi+0x758],rbp
 100564f:	mov    QWORD PTR [rdi+0x760],rbp
 1005656:	mov    ebx,ebp
 1005658:	mov    eax,ebx
 100565a:	mov    rbx,QWORD PTR [rsp+0x50]
 100565f:	add    rsp,0x30
 1005663:	pop    rdi
 1005664:	pop    rsi
 1005665:	pop    rbp
 1005666:	ret    
 1005667:	int3   
 1005668:	int3   
 1005669:	int3   
 100566a:	int3   
 100566b:	int3   
 100566c:	int3   
 100566d:	int3   
 100566e:	int3   
 100566f:	int3   
 1005670:	mov    QWORD PTR [rsp+0x8],rbx
 1005675:	push   rdi
 1005676:	sub    rsp,0x30
 100567a:	mov    rdi,rcx
 100567d:	mov    ecx,0x2
 1005682:	mov    rbx,rdx
 1005685:	mov    QWORD PTR [rsp+0x58],0x0
 100568e:	call   0x1004480
 1005693:	lea    rax,[rsp+0x58]
 1005698:	lea    rdx,[rbx+0x618]
 100569f:	mov    r9d,0x20019
 10056a5:	xor    r8d,r8d
 10056a8:	mov    rcx,0xffffffff80000002
 10056af:	mov    QWORD PTR [rsp+0x20],rax
 10056b4:	call   QWORD PTR [rip+0xffffffffffffb94e]        # 0x1001008
 10056ba:	test   eax,eax
 10056bc:	jne    0x10056fe
 10056be:	mov    rcx,QWORD PTR [rsp+0x58]
 10056c3:	lea    rax,[rsp+0x48]
 10056c8:	lea    r9,[rsp+0x50]
 10056cd:	mov    QWORD PTR [rsp+0x28],rax
 10056d2:	lea    rdx,[rip+0xffffffffffffc5f3]        # 0x1001ccc
 10056d9:	xor    r8d,r8d
 10056dc:	mov    QWORD PTR [rsp+0x20],rdi
 10056e1:	mov    DWORD PTR [rsp+0x48],0x4644
 10056e9:	call   QWORD PTR [rip+0xffffffffffffb921]        # 0x1001010
 10056ef:	mov    rcx,QWORD PTR [rsp+0x58]
 10056f4:	mov    ebx,eax
 10056f6:	call   QWORD PTR [rip+0xffffffffffffb904]        # 0x1001000
 10056fc:	mov    eax,ebx
 10056fe:	mov    rbx,QWORD PTR [rsp+0x40]
 1005703:	add    rsp,0x30
 1005707:	pop    rdi
 1005708:	ret    
 1005709:	int3   
 100570a:	int3   
 100570b:	int3   
 100570c:	int3   
 100570d:	int3   
 100570e:	int3   
 100570f:	int3   
 1005710:	mov    QWORD PTR [rsp+0x8],rbx
 1005715:	push   rdi
 1005716:	sub    rsp,0x30
 100571a:	mov    rdi,rcx
 100571d:	mov    ecx,0x4
 1005722:	mov    rbx,rdx
 1005725:	call   0x1004480
 100572a:	lea    rax,[rsp+0x58]
 100572f:	lea    rdx,[rbx+0x618]
 1005736:	mov    r9d,0x20019
 100573c:	xor    r8d,r8d
 100573f:	mov    rcx,0xffffffff80000002
 1005746:	mov    QWORD PTR [rsp+0x20],rax
 100574b:	call   QWORD PTR [rip+0xffffffffffffb8b7]        # 0x1001008
 1005751:	test   eax,eax
 1005753:	jne    0x1005795
 1005755:	mov    rcx,QWORD PTR [rsp+0x58]
 100575a:	lea    rax,[rsp+0x48]
 100575f:	lea    r9,[rsp+0x50]
 1005764:	mov    QWORD PTR [rsp+0x28],rax
 1005769:	lea    rdx,[rip+0xffffffffffffc568]        # 0x1001cd8
 1005770:	xor    r8d,r8d
 1005773:	mov    QWORD PTR [rsp+0x20],rdi
 1005778:	mov    DWORD PTR [rsp+0x48],0x654
 1005780:	call   QWORD PTR [rip+0xffffffffffffb88a]        # 0x1001010
 1005786:	mov    rcx,QWORD PTR [rsp+0x58]
 100578b:	mov    ebx,eax
 100578d:	call   QWORD PTR [rip+0xffffffffffffb86d]        # 0x1001000
 1005793:	mov    eax,ebx
 1005795:	mov    rbx,QWORD PTR [rsp+0x40]
 100579a:	add    rsp,0x30
 100579e:	pop    rdi
 100579f:	ret    
 10057a0:	int3   
 10057a1:	int3   
 10057a2:	int3   
 10057a3:	int3   
 10057a4:	int3   
 10057a5:	int3   
 10057a6:	int3   
 10057a7:	int3   
 10057a8:	int3   
 10057a9:	int3   
 10057aa:	int3   
 10057ab:	int3   
 10057ac:	int3   
 10057ad:	int3   
 10057ae:	int3   
 10057af:	int3   
 10057b0:	mov    QWORD PTR [rsp+0x8],rbx
 10057b5:	push   rdi
 10057b6:	sub    rsp,0x30
 10057ba:	mov    rdi,rcx
 10057bd:	mov    ecx,0x3
 10057c2:	mov    rbx,rdx
 10057c5:	call   0x1004480
 10057ca:	lea    rax,[rsp+0x58]
 10057cf:	lea    rdx,[rbx+0x618]
 10057d6:	mov    r9d,0x20019
 10057dc:	xor    r8d,r8d
 10057df:	mov    rcx,0xffffffff80000002
 10057e6:	mov    QWORD PTR [rsp+0x20],rax
 10057eb:	call   QWORD PTR [rip+0xffffffffffffb817]        # 0x1001008
 10057f1:	test   eax,eax
 10057f3:	jne    0x1005835
 10057f5:	mov    rcx,QWORD PTR [rsp+0x58]
 10057fa:	lea    rax,[rsp+0x48]
 10057ff:	lea    r9,[rsp+0x50]
 1005804:	mov    QWORD PTR [rsp+0x28],rax
 1005809:	lea    rdx,[rip+0xffffffffffffc4d0]        # 0x1001ce0
 1005810:	xor    r8d,r8d
 1005813:	mov    QWORD PTR [rsp+0x20],rdi
 1005818:	mov    DWORD PTR [rsp+0x48],0x53c
 1005820:	call   QWORD PTR [rip+0xffffffffffffb7ea]        # 0x1001010
 1005826:	mov    rcx,QWORD PTR [rsp+0x58]
 100582b:	mov    ebx,eax
 100582d:	call   QWORD PTR [rip+0xffffffffffffb7cd]        # 0x1001000
 1005833:	mov    eax,ebx
 1005835:	mov    rbx,QWORD PTR [rsp+0x40]
 100583a:	add    rsp,0x30
 100583e:	pop    rdi
 100583f:	ret    
 1005840:	int3   
 1005841:	int3   
 1005842:	int3   
 1005843:	int3   
 1005844:	int3   
 1005845:	int3   
 1005846:	int3   
 1005847:	int3   
 1005848:	int3   
 1005849:	int3   
 100584a:	int3   
 100584b:	int3   
 100584c:	int3   
 100584d:	int3   
 100584e:	int3   
 100584f:	int3   
 1005850:	mov    QWORD PTR [rsp+0x10],rbx
 1005855:	mov    QWORD PTR [rsp+0x18],rsi
 100585a:	mov    QWORD PTR [rsp+0x20],rdi
 100585f:	push   rbp
 1005860:	push   r12
 1005862:	push   r13
 1005864:	push   r14
 1005866:	push   r15
 1005868:	lea    rbp,[rsp-0x610]
 1005870:	sub    rsp,0x710
 1005877:	mov    rax,QWORD PTR [rip+0x9f52]        # 0x100f7d0
 100587e:	xor    rax,rsp
 1005881:	mov    QWORD PTR [rbp+0x600],rax
 1005888:	lea    rax,[rip+0xffffffffffffbf81]        # 0x1001810
 100588f:	lea    rbx,[rip+0xffffffffffffc022]        # 0x10018b8
 1005896:	lea    r14,[rip+0xffffffffffffc033]        # 0x10018d0
 100589d:	xor    r15d,r15d
 10058a0:	mov    r13,rcx
 10058a3:	mov    QWORD PTR [rsp+0x70],rbx
 10058a8:	mov    QWORD PTR [rsp+0x78],rax
 10058ad:	mov    QWORD PTR [rbp-0x80],r14
 10058b1:	mov    r12d,r15d
 10058b4:	call   0x10072a0
 10058b9:	cmp    eax,0x1
 10058bc:	jne    0x10058d9
 10058be:	lea    rdx,[rbp+0x1e0]
 10058c5:	mov    r8d,0x105
 10058cb:	mov    ecx,eax
 10058cd:	call   0x1005dc0
 10058d2:	mov    edi,eax
 10058d4:	jmp    0x1005977
 10058d9:	lea    r8,[rsp+0x40]
 10058de:	xor    edx,edx
 10058e0:	xor    ecx,ecx
 10058e2:	mov    QWORD PTR [rsp+0x40],r15
 10058e7:	call   0x100a2b0
 10058ec:	mov    edi,eax
 10058ee:	test   eax,eax
 10058f0:	jne    0x100596a
 10058f2:	mov    r8,QWORD PTR [rsp+0x40]
 10058f7:	lea    rdi,[rbp+0x1e0]
 10058fe:	mov    edx,0x105
 1005903:	mov    rax,r8
 1005906:	lea    rcx,[rbp+0x1e0]
 100590d:	mov    esi,r15d
 1005910:	sub    rax,rdi
 1005913:	lea    rdi,[rax+0x4]
 1005917:	nop    WORD PTR [rax+rax*1+0x0]
 1005920:	lea    rax,[rdx+0x7ffffef9]
 1005927:	test   rax,rax
 100592a:	je     0x1005943
 100592c:	movzx  eax,WORD PTR [rdi+rcx*1]
 1005930:	test   ax,ax
 1005933:	je     0x1005943
 1005935:	mov    WORD PTR [rcx],ax
 1005938:	add    rcx,0x2
 100593c:	dec    rdx
 100593f:	jne    0x1005920
 1005941:	jmp    0x1005948
 1005943:	test   rdx,rdx
 1005946:	jne    0x1005951
 1005948:	sub    rcx,0x2
 100594c:	mov    esi,0x8007007a
 1005951:	mov    WORD PTR [rcx],r15w
 1005955:	mov    eax,0x84b
 100595a:	test   esi,esi
 100595c:	mov    edi,r15d
 100595f:	mov    rcx,r8
 1005962:	cmovs  edi,eax
 1005965:	call   0x100a2bc
 100596a:	test   edi,edi
 100596c:	jle    0x1005979
 100596e:	movzx  edi,di
 1005971:	or     edi,0x80070000
 1005977:	test   edi,edi
 1005979:	je     0x1005982
 100597b:	mov    eax,edi
 100597d:	jmp    0x1005d84
 1005982:	mov    edi,0x104
 1005987:	lea    r8,[rip+0xffffffffffffbe9a]        # 0x1001828
 100598e:	lea    rcx,[rbp+0x3f0]
 1005995:	mov    edx,edi
 1005997:	call   QWORD PTR [rip+0xffffffffffffb8f3]        # 0x1001290
 100599d:	mov    edx,edi
 100599f:	lea    rax,[rbp+0x3f0]
 10059a6:	cmp    WORD PTR [rax],r12w
 10059aa:	je     0x10059b7
 10059ac:	add    rax,0x2
 10059b0:	dec    rdx
 10059b3:	jne    0x10059a6
 10059b5:	jmp    0x1005a12
 10059b7:	test   rdx,rdx
 10059ba:	je     0x1005a12
 10059bc:	mov    rcx,rdi
 10059bf:	lea    rax,[rbp+0x3f0]
 10059c6:	sub    rcx,rdx
 10059c9:	lea    rax,[rax+rcx*2]
 10059cd:	sub    rdi,rcx
 10059d0:	je     0x1005a0a
 10059d2:	add    rcx,0x7ffffefb
 10059d9:	lea    rsi,[rbp+0x1e0]
 10059e0:	add    rcx,rdi
 10059e3:	sub    rsi,rax
 10059e6:	test   rcx,rcx
 10059e9:	je     0x1005a05
 10059eb:	movzx  edx,WORD PTR [rsi+rax*1]
 10059ef:	test   dx,dx
 10059f2:	je     0x1005a05
 10059f4:	mov    WORD PTR [rax],dx
 10059f7:	add    rax,0x2
 10059fb:	dec    rcx
 10059fe:	dec    rdi
 1005a01:	jne    0x10059e6
 1005a03:	jmp    0x1005a0a
 1005a05:	test   rdi,rdi
 1005a08:	jne    0x1005a0e
 1005a0a:	sub    rax,0x2
 1005a0e:	mov    WORD PTR [rax],r15w
 1005a12:	lea    r8,[rsp+0x30]
 1005a17:	lea    rdx,[rip+0xffffffffffffcdb2]        # 0x10027d0
 1005a1e:	lea    rcx,[rbp+0x3f0]
 1005a25:	call   QWORD PTR [rip+0xa45d]        # 0x100fe88
 1005a2b:	test   eax,eax
 1005a2d:	js     0x1005bc8
 1005a33:	mov    rcx,QWORD PTR [rsp+0x30]
 1005a38:	mov    DWORD PTR [rbp-0x70],0x5
 1005a3f:	mov    DWORD PTR [rbp-0x68],0x7
 1005a46:	mov    DWORD PTR [rbp-0x60],0x2
 1005a4d:	mov    DWORD PTR [rbp-0x48],0x7
 1005a54:	mov    DWORD PTR [rbp-0x40],0x7
 1005a5b:	mov    DWORD PTR [rbp-0x38],0x3e8
 1005a62:	mov    rax,QWORD PTR [rcx]
 1005a65:	lea    rdx,[rbp-0x70]
 1005a69:	mov    r8d,0x2
 1005a6f:	call   QWORD PTR [rax+0x18]
 1005a72:	test   eax,eax
 1005a74:	js     0x1005bbd
 1005a7a:	mov    edi,0xff
 1005a7f:	lea    rcx,[rbp-0x20]
 1005a83:	mov    r8,rbx
 1005a86:	mov    edx,edi
 1005a88:	call   QWORD PTR [rip+0xffffffffffffb802]        # 0x1001290
 1005a8e:	mov    edx,edi
 1005a90:	lea    rax,[rbp-0x20]
 1005a94:	cmp    WORD PTR [rax],r12w
 1005a98:	je     0x1005aa5
 1005a9a:	add    rax,0x2
 1005a9e:	dec    rdx
 1005aa1:	jne    0x1005a94
 1005aa3:	jmp    0x1005b01
 1005aa5:	test   rdx,rdx
 1005aa8:	je     0x1005b01
 1005aaa:	mov    rsi,rdi
 1005aad:	lea    rax,[rbp-0x20]
 1005ab1:	mov    rcx,rdi
 1005ab4:	sub    rsi,rdx
 1005ab7:	lea    rax,[rax+rsi*2]
 1005abb:	sub    rcx,rsi
 1005abe:	je     0x1005af9
 1005ac0:	lea    rdx,[rsi+0x7fffff00]
 1005ac7:	lea    r8,[rip+0xffffffffffffc21a]        # 0x1001ce8
 1005ace:	add    rdx,rcx
 1005ad1:	sub    r8,rax
 1005ad4:	test   rdx,rdx
 1005ad7:	je     0x1005af4
 1005ad9:	movzx  esi,WORD PTR [rax+r8*1]
 1005ade:	test   si,si
 1005ae1:	je     0x1005af4
 1005ae3:	mov    WORD PTR [rax],si
 1005ae6:	add    rax,0x2
 1005aea:	dec    rdx
 1005aed:	dec    rcx
 1005af0:	jne    0x1005ad4
 1005af2:	jmp    0x1005af9
 1005af4:	test   rcx,rcx
 1005af7:	jne    0x1005afd
 1005af9:	sub    rax,0x2
 1005afd:	mov    WORD PTR [rax],r15w
 1005b01:	mov    rcx,rdi
 1005b04:	lea    rax,[rbp-0x20]
 1005b08:	cmp    WORD PTR [rax],r12w
 1005b0c:	je     0x1005b19
 1005b0e:	add    rax,0x2
 1005b12:	dec    rcx
 1005b15:	jne    0x1005b08
 1005b17:	jmp    0x1005b71
 1005b19:	test   rcx,rcx
 1005b1c:	je     0x1005b71
 1005b1e:	mov    rdx,rdi
 1005b21:	lea    rax,[rbp-0x20]
 1005b25:	lea    rsi,[r13+0x820]
 1005b2c:	sub    rdx,rcx
 1005b2f:	lea    rax,[rax+rdx*2]
 1005b33:	sub    rdi,rdx
 1005b36:	je     0x1005b69
 1005b38:	lea    rcx,[rdx+0x7fffff00]
 1005b3f:	add    rcx,rdi
 1005b42:	sub    rsi,rax
 1005b45:	test   rcx,rcx
 1005b48:	je     0x1005b64
 1005b4a:	movzx  edx,WORD PTR [rax+rsi*1]
 1005b4e:	test   dx,dx
 1005b51:	je     0x1005b64
 1005b53:	mov    WORD PTR [rax],dx
 1005b56:	add    rax,0x2
 1005b5a:	dec    rcx
 1005b5d:	dec    rdi
 1005b60:	jne    0x1005b45
 1005b62:	jmp    0x1005b69
 1005b64:	test   rdi,rdi
 1005b67:	jne    0x1005b6d
 1005b69:	sub    rax,0x2
 1005b6d:	mov    WORD PTR [rax],r15w
 1005b71:	mov    rcx,QWORD PTR [rsp+0x30]
 1005b76:	lea    rdx,[rsp+0x38]
 1005b7b:	lea    r8,[rsp+0x70]
 1005b80:	mov    rax,QWORD PTR [rcx]
 1005b83:	mov    QWORD PTR [rsp+0x20],rdx
 1005b88:	lea    rdx,[rbp-0x20]
 1005b8c:	mov    r9d,0x3
 1005b92:	call   QWORD PTR [rax+0x20]
 1005b95:	mov    rcx,QWORD PTR [rsp+0x30]
 1005b9a:	test   eax,eax
 1005b9c:	mov    rax,QWORD PTR [rcx]
 1005b9f:	js     0x1005bc5
 1005ba1:	mov    rdx,QWORD PTR [rsp+0x38]
 1005ba6:	call   QWORD PTR [rax+0x30]
 1005ba9:	test   eax,eax
 1005bab:	jns    0x1005bd2
 1005bad:	mov    rcx,QWORD PTR [rsp+0x30]
 1005bb2:	mov    rdx,QWORD PTR [rsp+0x38]
 1005bb7:	mov    rax,QWORD PTR [rcx]
 1005bba:	call   QWORD PTR [rax+0x60]
 1005bbd:	mov    rcx,QWORD PTR [rsp+0x30]
 1005bc2:	mov    rax,QWORD PTR [rcx]
 1005bc5:	call   QWORD PTR [rax+0x10]
 1005bc8:	mov    eax,0x20000003
 1005bcd:	jmp    0x1005d84
 1005bd2:	cmp    eax,0x5012
 1005bd7:	je     0x1005d5a
 1005bdd:	nop    DWORD PTR [rax]
 1005be0:	mov    rcx,QWORD PTR [rsp+0x30]
 1005be5:	mov    rdx,QWORD PTR [rsp+0x38]
 1005bea:	lea    r9,[rsp+0x48]
 1005bef:	mov    rax,QWORD PTR [rcx]
 1005bf2:	mov    r8,rbx
 1005bf5:	call   QWORD PTR [rax+0x50]
 1005bf8:	test   eax,eax
 1005bfa:	js     0x1005d0a
 1005c00:	mov    r8,QWORD PTR [rsp+0x58]
 1005c05:	lea    rcx,[rbp+0x1e0]
 1005c0c:	mov    edx,0x105
 1005c11:	mov    r8,QWORD PTR [r8+0x8]
 1005c15:	call   QWORD PTR [rip+0xffffffffffffb675]        # 0x1001290
 1005c1b:	lea    rdx,[r13+0x820]
 1005c22:	lea    rdi,[rbp+0x1e0]
 1005c29:	sub    rdi,rdx
 1005c2c:	nop    DWORD PTR [rax+0x0]
 1005c30:	movzx  ecx,WORD PTR [rdx]
 1005c33:	movzx  eax,WORD PTR [rdx+rdi*1]
 1005c37:	sub    ecx,eax
 1005c39:	jne    0x1005c43
 1005c3b:	add    rdx,0x2
 1005c3f:	test   eax,eax
 1005c41:	jne    0x1005c30
 1005c43:	test   ecx,ecx
 1005c45:	mov    rcx,QWORD PTR [rsp+0x30]
 1005c4a:	lea    rdx,[rsp+0x48]
 1005c4f:	mov    rax,QWORD PTR [rcx]
 1005c52:	jne    0x1005d07
 1005c58:	call   QWORD PTR [rax+0x58]
 1005c5b:	mov    rcx,QWORD PTR [rsp+0x30]
 1005c60:	mov    rdx,QWORD PTR [rsp+0x38]
 1005c65:	mov    rax,QWORD PTR [rcx]
 1005c68:	lea    r9,[rsp+0x48]
 1005c6d:	mov    r8,r14
 1005c70:	call   QWORD PTR [rax+0x50]
 1005c73:	test   eax,eax
 1005c75:	js     0x1005d0a
 1005c7b:	movsxd rbx,DWORD PTR [rsp+0x60]
 1005c80:	test   rbx,rbx
 1005c83:	jle    0x1005cee
 1005c85:	lea    r14,[rbx+rbx*2]
 1005c89:	shl    r14,0x3
 1005c8d:	nop    DWORD PTR [rax]
 1005c90:	mov    rsi,QWORD PTR [rsp+0x58]
 1005c95:	lea    rdi,[rip+0xffffffffffffbe5c]        # 0x1001af8
 1005c9c:	mov    ecx,0x11
 1005ca1:	mov    rsi,QWORD PTR [r14+rsi*1-0x10]
 1005ca6:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 1005ca9:	jne    0x1005cdb
 1005cab:	mov    rcx,QWORD PTR [rsp+0x30]
 1005cb0:	lea    rdx,[rsp+0x48]
 1005cb5:	mov    rax,QWORD PTR [rcx]
 1005cb8:	call   QWORD PTR [rax+0x58]
 1005cbb:	mov    rcx,QWORD PTR [rsp+0x30]
 1005cc0:	mov    rdx,QWORD PTR [rsp+0x38]
 1005cc5:	mov    rax,QWORD PTR [rcx]
 1005cc8:	lea    r9,[rsp+0x48]
 1005ccd:	lea    r8,[rip+0xffffffffffffbb3c]        # 0x1001810
 1005cd4:	call   QWORD PTR [rax+0x50]
 1005cd7:	test   eax,eax
 1005cd9:	jns    0x1005d2f
 1005cdb:	dec    rbx
 1005cde:	sub    r14,0x18
 1005ce2:	test   rbx,rbx
 1005ce5:	jg     0x1005c90
 1005ce7:	lea    r14,[rip+0xffffffffffffbbe2]        # 0x10018d0
 1005cee:	mov    rcx,QWORD PTR [rsp+0x30]
 1005cf3:	lea    rdx,[rsp+0x48]
 1005cf8:	mov    rax,QWORD PTR [rcx]
 1005cfb:	call   QWORD PTR [rax+0x58]
 1005cfe:	lea    rbx,[rip+0xffffffffffffbbb3]        # 0x10018b8
 1005d05:	jmp    0x1005d0a
 1005d07:	call   QWORD PTR [rax+0x58]
 1005d0a:	mov    rcx,QWORD PTR [rsp+0x30]
 1005d0f:	mov    rdx,QWORD PTR [rsp+0x38]
 1005d14:	mov    rax,QWORD PTR [rcx]
 1005d17:	call   QWORD PTR [rax+0x38]
 1005d1a:	test   eax,eax
 1005d1c:	js     0x1005bad
 1005d22:	cmp    eax,0x5012
 1005d27:	jne    0x1005be0
 1005d2d:	jmp    0x1005d5a
 1005d2f:	mov    rdx,QWORD PTR [rsp+0x58]
 1005d34:	lea    rcx,[r13+0xc30]
 1005d3b:	mov    rdx,QWORD PTR [rdx+0x10]
 1005d3f:	call   0x1003cd0
 1005d44:	mov    rcx,QWORD PTR [rsp+0x30]
 1005d49:	lea    rdx,[rsp+0x48]
 1005d4e:	mov    rax,QWORD PTR [rcx]
 1005d51:	call   QWORD PTR [rax+0x58]
 1005d54:	mov    r12d,0x1
 1005d5a:	mov    rcx,QWORD PTR [rsp+0x30]
 1005d5f:	mov    rdx,QWORD PTR [rsp+0x38]
 1005d64:	mov    rax,QWORD PTR [rcx]
 1005d67:	call   QWORD PTR [rax+0x60]
 1005d6a:	mov    rcx,QWORD PTR [rsp+0x30]
 1005d6f:	mov    rdx,QWORD PTR [rcx]
 1005d72:	call   QWORD PTR [rdx+0x10]
 1005d75:	mov    eax,0x20000003
 1005d7a:	test   r12d,r12d
 1005d7d:	cmove  r15d,eax
 1005d81:	mov    eax,r15d
 1005d84:	mov    rcx,QWORD PTR [rbp+0x600]
 1005d8b:	xor    rcx,rsp
 1005d8e:	call   0x1009d30
 1005d93:	lea    r11,[rsp+0x710]
 1005d9b:	mov    rbx,QWORD PTR [r11+0x38]
 1005d9f:	mov    rsi,QWORD PTR [r11+0x40]
 1005da3:	mov    rdi,QWORD PTR [r11+0x48]
 1005da7:	mov    rsp,r11
 1005daa:	pop    r15
 1005dac:	pop    r14
 1005dae:	pop    r13
 1005db0:	pop    r12
 1005db2:	pop    rbp
 1005db3:	ret    
 1005db4:	int3   
 1005db5:	int3   
 1005db6:	int3   
 1005db7:	int3   
 1005db8:	int3   
 1005db9:	int3   
 1005dba:	int3   
 1005dbb:	int3   
 1005dbc:	int3   
 1005dbd:	int3   
 1005dbe:	int3   
 1005dbf:	int3   
 1005dc0:	rex push rbx
 1005dc2:	push   r12
 1005dc4:	push   r13
 1005dc6:	sub    rsp,0x2d0
 1005dcd:	mov    rax,QWORD PTR [rip+0x99fc]        # 0x100f7d0
 1005dd4:	xor    rax,rsp
 1005dd7:	mov    QWORD PTR [rsp+0x2a0],rax
 1005ddf:	mov    r13d,r8d
 1005de2:	mov    r12,rdx
 1005de5:	mov    ebx,ecx
 1005de7:	test   rdx,rdx
 1005dea:	jne    0x1005df6
 1005dec:	mov    eax,0x80070057
 1005df1:	jmp    0x10061af
 1005df6:	mov    QWORD PTR [rsp+0x2f0],rbp
 1005dfe:	mov    QWORD PTR [rsp+0x2c8],rsi
 1005e06:	mov    QWORD PTR [rsp+0x2c0],rdi
 1005e0e:	xor    edi,edi
 1005e10:	mov    QWORD PTR [rsp+0x2b8],r14
 1005e18:	lea    rcx,[rsp+0x92]
 1005e20:	xor    edx,edx
 1005e22:	mov    r8d,0x208
 1005e28:	mov    QWORD PTR [rsp+0x2b0],r15
 1005e30:	mov    r14d,edi
 1005e33:	mov    ebp,edi
 1005e35:	mov    QWORD PTR [rsp+0x70],rdi
 1005e3a:	mov    r15d,edi
 1005e3d:	mov    QWORD PTR [rsp+0x68],rdi
 1005e42:	mov    QWORD PTR [rsp+0x58],rdi
 1005e47:	mov    WORD PTR [rsp+0x90],di
 1005e4f:	call   0x1009d56
 1005e54:	lea    rcx,[rip+0xffffffffffffb8bd]        # 0x1001718
 1005e5b:	mov    DWORD PTR [rsp+0x60],0x105
 1005e63:	call   0x10070e0
 1005e68:	mov    rsi,rax
 1005e6b:	mov    QWORD PTR [rsp+0x48],rax
 1005e70:	test   rax,rax
 1005e73:	jne    0x1005e82
 1005e75:	call   QWORD PTR [rip+0xffffffffffffb325]        # 0x10011a0
 1005e7b:	mov    edi,eax
 1005e7d:	jmp    0x100614f
 1005e82:	lea    rdx,[rip+0xffffffffffffb8af]        # 0x1001738
 1005e89:	mov    rcx,rax
 1005e8c:	call   QWORD PTR [rip+0xffffffffffffb316]        # 0x10011a8
 1005e92:	mov    rsi,rax
 1005e95:	test   rax,rax
 1005e98:	jne    0x1005ea7
 1005e9a:	call   QWORD PTR [rip+0xffffffffffffb300]        # 0x10011a0
 1005ea0:	mov    edi,eax
 1005ea2:	jmp    0x100614a
 1005ea7:	lea    rcx,[rip+0xffffffffffffb8a2]        # 0x1001750
 1005eae:	call   0x10070e0
 1005eb3:	lea    rdx,[rip+0xffffffffffffb8b6]        # 0x1001770
 1005eba:	mov    rcx,rax
 1005ebd:	mov    r15,rax
 1005ec0:	call   QWORD PTR [rip+0xffffffffffffb2e2]        # 0x10011a8
 1005ec6:	mov    rbp,rax
 1005ec9:	test   rax,rax
 1005ecc:	jne    0x1005ede
 1005ece:	call   QWORD PTR [rip+0xffffffffffffb2cc]        # 0x10011a0
 1005ed4:	mov    rbp,r14
 1005ed7:	mov    edi,eax
 1005ed9:	jmp    0x100614a
 1005ede:	lea    rdx,[rip+0xffffffffffffb89b]        # 0x1001780
 1005ee5:	mov    rcx,r15
 1005ee8:	call   QWORD PTR [rip+0xffffffffffffb2ba]        # 0x10011a8
 1005eee:	lea    r8,[rsp+0x60]
 1005ef3:	lea    rdx,[rsp+0x90]
 1005efb:	mov    ecx,0x4
 1005f00:	mov    QWORD PTR [rsp+0x50],rax
 1005f05:	call   rsi
 1005f07:	test   eax,eax
 1005f09:	jne    0x1005f1d
 1005f0b:	mov    WORD PTR [r12],di
 1005f10:	call   QWORD PTR [rip+0xffffffffffffb28a]        # 0x10011a0
 1005f16:	mov    edi,eax
 1005f18:	jmp    0x1006145
 1005f1d:	lea    rax,[rsp+0x58]
 1005f22:	xor    r9d,r9d
 1005f25:	xor    r8d,r8d
 1005f28:	mov    QWORD PTR [rsp+0x28],rax
 1005f2d:	xor    edx,edx
 1005f2f:	xor    ecx,ecx
 1005f31:	mov    DWORD PTR [rsp+0x20],0x80000000
 1005f39:	call   rbp
 1005f3b:	test   eax,eax
 1005f3d:	je     0x1005f49
 1005f3f:	mov    edi,0x80004005
 1005f44:	jmp    0x1006145
 1005f49:	mov    rax,QWORD PTR [rsp+0x58]
 1005f4e:	or     rsi,0xffffffffffffffff
 1005f52:	mov    rcx,QWORD PTR [rax+0x28]
 1005f56:	mov    rax,rsi
 1005f59:	nop    DWORD PTR [rax+0x0]
 1005f60:	inc    rax
 1005f63:	cmp    WORD PTR [rcx+rax*2],di
 1005f67:	jne    0x1005f60
 1005f69:	lea    rdx,[rsp+0x90]
 1005f71:	mov    rcx,rsi
 1005f74:	inc    rcx
 1005f77:	cmp    WORD PTR [rdx+rcx*2],di
 1005f7b:	jne    0x1005f74
 1005f7d:	add    ecx,0x3
 1005f80:	add    eax,ecx
 1005f82:	mov    ecx,eax
 1005f84:	mov    DWORD PTR [rsp+0x40],eax
 1005f88:	mov    eax,0x2
 1005f8d:	mul    rcx
 1005f90:	cmovo  rax,rsi
 1005f94:	mov    rcx,rax
 1005f97:	call   0x1009d62
 1005f9c:	mov    rbp,rax
 1005f9f:	test   rax,rax
 1005fa2:	jne    0x1005fae
 1005fa4:	mov    edi,0x8007000e
 1005fa9:	jmp    0x1006145
 1005fae:	mov    r8,QWORD PTR [rsp+0x58]
 1005fb3:	mov    edx,DWORD PTR [rsp+0x40]
 1005fb7:	mov    rcx,rax
 1005fba:	mov    r8,QWORD PTR [r8+0x28]
 1005fbe:	call   0x1007590
 1005fc3:	mov    edx,DWORD PTR [rsp+0x40]
 1005fc7:	lea    r8,[rip+0xffffffffffffb742]        # 0x1001710
 1005fce:	mov    rcx,rbp
 1005fd1:	call   0x1002ea0
 1005fd6:	mov    edx,DWORD PTR [rsp+0x40]
 1005fda:	lea    r8,[rsp+0x90]
 1005fe2:	mov    rcx,rbp
 1005fe5:	call   0x1002ea0
 1005fea:	mov    edx,DWORD PTR [rsp+0x40]
 1005fee:	lea    r8,[rip+0xffffffffffffb79f]        # 0x1001794
 1005ff5:	mov    rcx,rbp
 1005ff8:	call   0x1002ea0
 1005ffd:	dec    ebx
 1005fff:	je     0x1006029
 1006001:	dec    ebx
 1006003:	je     0x100600f
 1006005:	mov    edi,0x80070057
 100600a:	jmp    0x100613d
 100600f:	cmp    DWORD PTR [rsp+0x40],r13d
 1006014:	ja     0x1006005
 1006016:	mov    rdx,r13
 1006019:	mov    r8,rbp
 100601c:	mov    rcx,r12
 100601f:	call   0x1007590
 1006024:	jmp    0x100613d
 1006029:	lea    rcx,[rip+0xffffffffffffb768]        # 0x1001798
 1006030:	call   0x10070e0
 1006035:	mov    r14,rax
 1006038:	test   rax,rax
 100603b:	jne    0x100604a
 100603d:	call   QWORD PTR [rip+0xffffffffffffb15d]        # 0x10011a0
 1006043:	mov    edi,eax
 1006045:	jmp    0x100613d
 100604a:	lea    rdx,[rip+0xffffffffffffb75f]        # 0x10017b0
 1006051:	mov    rcx,rax
 1006054:	call   QWORD PTR [rip+0xffffffffffffb14e]        # 0x10011a8
 100605a:	lea    rdx,[rip+0xffffffffffffb75f]        # 0x10017c0
 1006061:	mov    rcx,r14
 1006064:	mov    rbx,rax
 1006067:	call   QWORD PTR [rip+0xffffffffffffb13b]        # 0x10011a8
 100606d:	lea    rdx,[rip+0xffffffffffffb75c]        # 0x10017d0
 1006074:	mov    rcx,r14
 1006077:	mov    QWORD PTR [rsp+0x80],rax
 100607f:	call   QWORD PTR [rip+0xffffffffffffb123]        # 0x10011a8
 1006085:	mov    rcx,QWORD PTR [rsp+0x58]
 100608a:	xor    r9d,r9d
 100608d:	mov    rcx,QWORD PTR [rcx]
 1006090:	mov    QWORD PTR [rsp+0x78],rax
 1006095:	lea    rax,[rsp+0x70]
 100609a:	xor    r8d,r8d
 100609d:	xor    edx,edx
 100609f:	mov    QWORD PTR [rsp+0x20],rax
 10060a4:	call   rbx
 10060a6:	test   eax,eax
 10060a8:	jne    0x1006138
 10060ae:	mov    rcx,QWORD PTR [rsp+0x70]
 10060b3:	xor    edx,edx
 10060b5:	lea    rax,[rsp+0x68]
 10060ba:	mov    QWORD PTR [rsp+0x30],rax
 10060bf:	lea    rax,[rsp+0x40]
 10060c4:	lea    r9d,[rdx+0x1]
 10060c8:	mov    QWORD PTR [rsp+0x28],rax
 10060cd:	lea    r8d,[rdx+0x2]
 10060d1:	mov    QWORD PTR [rsp+0x40],rbp
 10060d6:	mov    DWORD PTR [rsp+0x20],0x1
 10060de:	call   QWORD PTR [rsp+0x80]
 10060e5:	test   eax,eax
 10060e7:	jne    0x1006138
 10060e9:	mov    rcx,QWORD PTR [rsp+0x68]
 10060ee:	test   rcx,rcx
 10060f1:	je     0x1006138
 10060f3:	cmp    DWORD PTR [rcx],0x1
 10060f6:	jb     0x1006138
 10060f8:	mov    r8,QWORD PTR [rcx+0x8]
 10060fc:	cmp    DWORD PTR [r8],0x5
 1006100:	je     0x1006132
 1006102:	mov    r8,QWORD PTR [r8+0x10]
 1006106:	inc    rsi
 1006109:	cmp    WORD PTR [r8+rsi*2],di
 100610e:	jne    0x1006106
 1006110:	inc    esi
 1006112:	cmp    esi,r13d
 1006115:	ja     0x100612d
 1006117:	mov    rdx,r13
 100611a:	mov    rcx,r12
 100611d:	call   0x1007590
 1006122:	mov    rcx,QWORD PTR [rsp+0x68]
 1006127:	call   QWORD PTR [rsp+0x78]
 100612b:	jmp    0x100613d
 100612d:	mov    edi,0x80070057
 1006132:	call   QWORD PTR [rsp+0x78]
 1006136:	jmp    0x100613d
 1006138:	mov    edi,0x80004005
 100613d:	mov    rcx,rbp
 1006140:	call   0x1009d6e
 1006145:	mov    rbp,QWORD PTR [rsp+0x50]
 100614a:	mov    rsi,QWORD PTR [rsp+0x48]
 100614f:	mov    rcx,QWORD PTR [rsp+0x58]
 1006154:	test   rcx,rcx
 1006157:	je     0x100615b
 1006159:	call   rbp
 100615b:	mov    rbp,QWORD PTR [rsp+0x2f0]
 1006163:	test   rsi,rsi
 1006166:	je     0x1006171
 1006168:	mov    rcx,rsi
 100616b:	call   QWORD PTR [rip+0xffffffffffffb03f]        # 0x10011b0
 1006171:	mov    rsi,QWORD PTR [rsp+0x2c8]
 1006179:	test   r14,r14
 100617c:	je     0x1006187
 100617e:	mov    rcx,r14
 1006181:	call   QWORD PTR [rip+0xffffffffffffb029]        # 0x10011b0
 1006187:	mov    r14,QWORD PTR [rsp+0x2b8]
 100618f:	test   r15,r15
 1006192:	je     0x100619d
 1006194:	mov    rcx,r15
 1006197:	call   QWORD PTR [rip+0xffffffffffffb013]        # 0x10011b0
 100619d:	mov    r15,QWORD PTR [rsp+0x2b0]
 10061a5:	mov    eax,edi
 10061a7:	mov    rdi,QWORD PTR [rsp+0x2c0]
 10061af:	mov    rcx,QWORD PTR [rsp+0x2a0]
 10061b7:	xor    rcx,rsp
 10061ba:	call   0x1009d30
 10061bf:	add    rsp,0x2d0
 10061c6:	pop    r13
 10061c8:	pop    r12
 10061ca:	pop    rbx
 10061cb:	ret    
 10061cc:	int3   
 10061cd:	int3   
 10061ce:	int3   
 10061cf:	int3   
 10061d0:	int3   
 10061d1:	int3   
 10061d2:	int3   
 10061d3:	int3   
 10061d4:	int3   
 10061d5:	int3   
 10061d6:	int3   
 10061d7:	int3   
 10061d8:	int3   
 10061d9:	int3   
 10061da:	int3   
 10061db:	int3   
 10061dc:	int3   
 10061dd:	int3   
 10061de:	int3   
 10061df:	int3   
 10061e0:	mov    QWORD PTR [rsp+0x18],rbx
 10061e5:	push   rsi
 10061e6:	sub    rsp,0x20
 10061ea:	xor    ebx,ebx
 10061ec:	mov    rsi,rcx
 10061ef:	test   rcx,rcx
 10061f2:	jne    0x1006204
 10061f4:	mov    eax,0x80070057
 10061f9:	mov    rbx,QWORD PTR [rsp+0x40]
 10061fe:	add    rsp,0x20
 1006202:	pop    rsi
 1006203:	ret    
 1006204:	lea    rcx,[rip+0xffffffffffffb50d]        # 0x1001718
 100620b:	mov    QWORD PTR [rsp+0x38],rdi
 1006210:	mov    DWORD PTR [rsp+0x30],edx
 1006214:	call   0x10070e0
 1006219:	mov    rdi,rax
 100621c:	test   rax,rax
 100621f:	jne    0x1006237
 1006221:	call   QWORD PTR [rip+0xffffffffffffaf79]        # 0x10011a0
 1006227:	mov    rdi,QWORD PTR [rsp+0x38]
 100622c:	mov    rbx,QWORD PTR [rsp+0x40]
 1006231:	add    rsp,0x20
 1006235:	pop    rsi
 1006236:	ret    
 1006237:	lea    rdx,[rip+0xffffffffffffb4fa]        # 0x1001738
 100623e:	mov    rcx,rax
 1006241:	call   QWORD PTR [rip+0xffffffffffffaf61]        # 0x10011a8
 1006247:	test   rax,rax
 100624a:	je     0x100625f
 100624c:	lea    r8,[rsp+0x30]
 1006251:	mov    rdx,rsi
 1006254:	mov    ecx,0x3
 1006259:	call   rax
 100625b:	test   eax,eax
 100625d:	jne    0x1006267
 100625f:	call   QWORD PTR [rip+0xffffffffffffaf3b]        # 0x10011a0
 1006265:	mov    ebx,eax
 1006267:	mov    rcx,rdi
 100626a:	call   QWORD PTR [rip+0xffffffffffffaf40]        # 0x10011b0
 1006270:	mov    rdi,QWORD PTR [rsp+0x38]
 1006275:	mov    eax,ebx
 1006277:	mov    rbx,QWORD PTR [rsp+0x40]
 100627c:	add    rsp,0x20
 1006280:	pop    rsi
 1006281:	ret    
 1006282:	int3   
 1006283:	int3   
 1006284:	int3   
 1006285:	int3   
 1006286:	int3   
 1006287:	int3   
 1006288:	int3   
 1006289:	int3   
 100628a:	int3   
 100628b:	int3   
 100628c:	int3   
 100628d:	int3   
 100628e:	int3   
 100628f:	int3   
 1006290:	rex push rbx
 1006292:	push   rsi
 1006293:	push   rdi
 1006294:	push   r12
 1006296:	push   r14
 1006298:	sub    rsp,0x3a0
 100629f:	mov    rax,QWORD PTR [rip+0x952a]        # 0x100f7d0
 10062a6:	xor    rax,rsp
 10062a9:	mov    QWORD PTR [rsp+0x380],rax
 10062b1:	xor    r12d,r12d
 10062b4:	mov    r14,r8
 10062b7:	mov    rdi,rdx
 10062ba:	mov    rsi,rcx
 10062bd:	mov    DWORD PTR [rsp+0x24],r12d
 10062c2:	mov    DWORD PTR [rsp+0x20],r12d
 10062c7:	mov    ebx,r12d
 10062ca:	test   rcx,rcx
 10062cd:	je     0x10064d8
 10062d3:	test   rdx,rdx
 10062d6:	je     0x10064d8
 10062dc:	xor    edx,edx
 10062de:	xor    ecx,ecx
 10062e0:	mov    r8d,0x80000000
 10062e6:	mov    QWORD PTR [rsp+0x390],r15
 10062ee:	call   QWORD PTR [rip+0xffffffffffffad2c]        # 0x1001020
 10062f4:	mov    r15,rax
 10062f7:	test   rax,rax
 10062fa:	jne    0x1006311
 10062fc:	call   QWORD PTR [rip+0xffffffffffffae9e]        # 0x10011a0
 1006302:	mov    r15,QWORD PTR [rsp+0x390]
 100630a:	mov    ebx,eax
 100630c:	jmp    0x10064dd
 1006311:	lea    r9,[rsp+0x2c]
 1006316:	lea    r8,[rsp+0x270]
 100631e:	xor    edx,edx
 1006320:	mov    rcx,rsi
 1006323:	mov    DWORD PTR [rsp+0x2c],0x84
 100632b:	call   0x100bedb
 1006330:	test   eax,eax
 1006332:	jne    0x1006341
 1006334:	call   QWORD PTR [rip+0xffffffffffffae66]        # 0x10011a0
 100633a:	mov    ebx,eax
 100633c:	jmp    0x10064c3
 1006341:	lea    rdx,[rsp+0x270]
 1006349:	mov    r8d,0x1
 100634f:	mov    rcx,r15
 1006352:	mov    QWORD PTR [rsp+0x398],rbp
 100635a:	call   QWORD PTR [rip+0xffffffffffffacc8]        # 0x1001028
 1006360:	mov    rbp,rax
 1006363:	test   rax,rax
 1006366:	jne    0x1006375
 1006368:	call   QWORD PTR [rip+0xffffffffffffae32]        # 0x10011a0
 100636e:	mov    ebx,eax
 1006370:	jmp    0x10064bb
 1006375:	mov    r8d,DWORD PTR [rsp+0x24]
 100637a:	lea    r9,[rsp+0x20]
 100637f:	lea    rdx,[rsp+0x24]
 1006384:	mov    rcx,rax
 1006387:	call   QWORD PTR [rip+0xffffffffffffacbb]        # 0x1001048
 100638d:	test   eax,eax
 100638f:	jne    0x10064b2
 1006395:	call   QWORD PTR [rip+0xffffffffffffae05]        # 0x10011a0
 100639b:	mov    ebx,eax
 100639d:	cmp    eax,0x7a
 10063a0:	jne    0x10064b2
 10063a6:	mov    ebx,DWORD PTR [rsp+0x20]
 10063aa:	mov    ecx,ebx
 10063ac:	call   QWORD PTR [rip+0xffffffffffffaec6]        # 0x1001278
 10063b2:	mov    rsi,rax
 10063b5:	test   rax,rax
 10063b8:	jne    0x10063c2
 10063ba:	lea    ebx,[rax+0xe]
 10063bd:	jmp    0x10064b2
 10063c2:	lea    r9,[rsp+0x20]
 10063c7:	mov    r8d,ebx
 10063ca:	mov    rdx,rax
 10063cd:	mov    rcx,rbp
 10063d0:	call   QWORD PTR [rip+0xffffffffffffac72]        # 0x1001048
 10063d6:	test   eax,eax
 10063d8:	jne    0x10063e7
 10063da:	call   QWORD PTR [rip+0xffffffffffffadc0]        # 0x10011a0
 10063e0:	mov    ebx,eax
 10063e2:	jmp    0x10064a9
 10063e7:	mov    r8,QWORD PTR [rsi+0x30]
 10063eb:	mov    rdx,r14
 10063ee:	mov    rcx,rdi
 10063f1:	call   0x1007590
 10063f6:	test   eax,eax
 10063f8:	js     0x100649f
 10063fe:	lea    rax,[rsp+0x60]
 1006403:	mov    edx,0x104
 1006408:	lea    rcx,[rsp+0x60]
 100640d:	sub    rdi,rax
 1006410:	mov    r8d,r12d
 1006413:	lea    rax,[rdx+0x7ffffefa]
 100641a:	test   rax,rax
 100641d:	je     0x1006436
 100641f:	movzx  eax,WORD PTR [rdi+rcx*1]
 1006423:	test   ax,ax
 1006426:	je     0x1006436
 1006428:	mov    WORD PTR [rcx],ax
 100642b:	add    rcx,0x2
 100642f:	dec    rdx
 1006432:	jne    0x1006413
 1006434:	jmp    0x100643b
 1006436:	test   rdx,rdx
 1006439:	jne    0x1006445
 100643b:	sub    rcx,0x2
 100643f:	mov    r8d,0x8007007a
 1006445:	mov    WORD PTR [rcx],r12w
 1006449:	test   r8d,r8d
 100644c:	js     0x100649f
 100644e:	lea    rcx,[rsp+0x60]
 1006453:	mov    edx,0x5c
 1006458:	call   QWORD PTR [rip+0xffffffffffffae3a]        # 0x1001298
 100645e:	test   rax,rax
 1006461:	je     0x1006467
 1006463:	mov    WORD PTR [rax],r12w
 1006467:	lea    rdx,[rsp+0x28]
 100646c:	lea    rcx,[rsp+0x30]
 1006471:	mov    DWORD PTR [rsp+0x28],0x10
 1006479:	call   QWORD PTR [rip+0xffffffffffffaca1]        # 0x1001120
 100647f:	test   eax,eax
 1006481:	je     0x10064a6
 1006483:	cmp    WORD PTR [rsp+0x60],0x2e
 1006489:	je     0x100649f
 100648b:	lea    rdx,[rsp+0x30]
 1006490:	lea    rcx,[rsp+0x60]
 1006495:	call   QWORD PTR [rip+0xffffffffffffae3d]        # 0x10012d8
 100649b:	test   eax,eax
 100649d:	jne    0x10064a6
 100649f:	mov    ebx,0x80004005
 10064a4:	jmp    0x10064a9
 10064a6:	mov    ebx,r12d
 10064a9:	mov    rcx,rsi
 10064ac:	call   QWORD PTR [rip+0xffffffffffffadce]        # 0x1001280
 10064b2:	mov    rcx,rbp
 10064b5:	call   QWORD PTR [rip+0xffffffffffffab5d]        # 0x1001018
 10064bb:	mov    rbp,QWORD PTR [rsp+0x398]
 10064c3:	mov    rcx,r15
 10064c6:	call   QWORD PTR [rip+0xffffffffffffab4c]        # 0x1001018
 10064cc:	mov    r15,QWORD PTR [rsp+0x390]
 10064d4:	mov    eax,ebx
 10064d6:	jmp    0x10064dd
 10064d8:	mov    eax,0x80070057
 10064dd:	mov    rcx,QWORD PTR [rsp+0x380]
 10064e5:	xor    rcx,rsp
 10064e8:	call   0x1009d30
 10064ed:	add    rsp,0x3a0
 10064f4:	pop    r14
 10064f6:	pop    r12
 10064f8:	pop    rdi
 10064f9:	pop    rsi
 10064fa:	pop    rbx
 10064fb:	ret    
 10064fc:	int3   
 10064fd:	int3   
 10064fe:	int3   
 10064ff:	int3   
 1006500:	int3   
 1006501:	int3   
 1006502:	int3   
 1006503:	int3   
 1006504:	int3   
 1006505:	int3   
 1006506:	int3   
 1006507:	int3   
 1006508:	int3   
 1006509:	int3   
 100650a:	int3   
 100650b:	int3   
 100650c:	int3   
 100650d:	int3   
 100650e:	int3   
 100650f:	int3   
 1006510:	mov    QWORD PTR [rsp+0x10],rbx
 1006515:	mov    QWORD PTR [rsp+0x18],rsi
 100651a:	push   rdi
 100651b:	sub    rsp,0x40
 100651f:	mov    rbx,r8
 1006522:	mov    esi,edx
 1006524:	mov    rdi,rcx
 1006527:	test   rcx,rcx
 100652a:	je     0x10065c5
 1006530:	test   rbx,rbx
 1006533:	je     0x10065c5
 1006539:	xor    eax,eax
 100653b:	mov    rdx,rbx
 100653e:	mov    WORD PTR [rcx],ax
 1006541:	lea    ecx,[rax+0x1]
 1006544:	call   0x1004480
 1006549:	lea    rax,[rsp+0x30]
 100654e:	lea    rdx,[rbx+0x618]
 1006555:	mov    r9d,0x20019
 100655b:	xor    r8d,r8d
 100655e:	mov    rcx,0xffffffff80000002
 1006565:	mov    QWORD PTR [rsp+0x20],rax
 100656a:	call   QWORD PTR [rip+0xffffffffffffaa98]        # 0x1001008
 1006570:	mov    ebx,eax
 1006572:	test   eax,eax
 1006574:	jne    0x10065b3
 1006576:	mov    rcx,QWORD PTR [rsp+0x30]
 100657b:	lea    eax,[rsi+rsi*1]
 100657e:	lea    r9,[rsp+0x68]
 1006583:	mov    DWORD PTR [rsp+0x50],eax
 1006587:	lea    rax,[rsp+0x50]
 100658c:	lea    rdx,[rip+0x7bb5]        # 0x100e148
 1006593:	mov    QWORD PTR [rsp+0x28],rax
 1006598:	xor    r8d,r8d
 100659b:	mov    QWORD PTR [rsp+0x20],rdi
 10065a0:	call   QWORD PTR [rip+0xffffffffffffaa6a]        # 0x1001010
 10065a6:	mov    rcx,QWORD PTR [rsp+0x30]
 10065ab:	mov    ebx,eax
 10065ad:	call   QWORD PTR [rip+0xffffffffffffaa4d]        # 0x1001000
 10065b3:	mov    eax,ebx
 10065b5:	mov    rbx,QWORD PTR [rsp+0x58]
 10065ba:	mov    rsi,QWORD PTR [rsp+0x60]
 10065bf:	add    rsp,0x40
 10065c3:	pop    rdi
 10065c4:	ret    
 10065c5:	mov    rbx,QWORD PTR [rsp+0x58]
 10065ca:	mov    rsi,QWORD PTR [rsp+0x60]
 10065cf:	mov    eax,0x80070057
 10065d4:	add    rsp,0x40
 10065d8:	pop    rdi
 10065d9:	ret    
 10065da:	int3   
 10065db:	int3   
 10065dc:	int3   
 10065dd:	int3   
 10065de:	int3   
 10065df:	int3   
 10065e0:	mov    QWORD PTR [rsp+0x10],rbx
 10065e5:	push   rdi
 10065e6:	sub    rsp,0x30
 10065ea:	mov    rdi,rdx
 10065ed:	mov    rbx,rcx
 10065f0:	test   rcx,rcx
 10065f3:	je     0x100668a
 10065f9:	test   rdx,rdx
 10065fc:	je     0x100668a
 1006602:	mov    ecx,0x1
 1006607:	call   0x1004480
 100660c:	lea    rax,[rsp+0x40]
 1006611:	lea    rdx,[rdi+0x618]
 1006618:	mov    r9d,0x2
 100661e:	xor    r8d,r8d
 1006621:	mov    rcx,0xffffffff80000002
 1006628:	mov    QWORD PTR [rsp+0x20],rax
 100662d:	call   QWORD PTR [rip+0xffffffffffffa9d5]        # 0x1001008
 1006633:	mov    edi,eax
 1006635:	test   eax,eax
 1006637:	jne    0x100667d
 1006639:	or     rax,0xffffffffffffffff
 100663d:	nop    DWORD PTR [rax]
 1006640:	inc    rax
 1006643:	cmp    WORD PTR [rbx+rax*2],0x0
 1006648:	jne    0x1006640
 100664a:	mov    rcx,QWORD PTR [rsp+0x40]
 100664f:	add    eax,eax
 1006651:	lea    rdx,[rip+0x7af0]        # 0x100e148
 1006658:	mov    DWORD PTR [rsp+0x28],eax
 100665c:	mov    r9d,0x1
 1006662:	xor    r8d,r8d
 1006665:	mov    QWORD PTR [rsp+0x20],rbx
 100666a:	call   QWORD PTR [rip+0xffffffffffffa9d0]        # 0x1001040
 1006670:	mov    rcx,QWORD PTR [rsp+0x40]
 1006675:	mov    edi,eax
 1006677:	call   QWORD PTR [rip+0xffffffffffffa983]        # 0x1001000
 100667d:	mov    eax,edi
 100667f:	mov    rbx,QWORD PTR [rsp+0x48]
 1006684:	add    rsp,0x30
 1006688:	pop    rdi
 1006689:	ret    
 100668a:	mov    eax,0x80070057
 100668f:	mov    rbx,QWORD PTR [rsp+0x48]
 1006694:	add    rsp,0x30
 1006698:	pop    rdi
 1006699:	ret    
 100669a:	int3   
 100669b:	int3   
 100669c:	int3   
 100669d:	int3   
 100669e:	int3   
 100669f:	int3   
 10066a0:	rex push rbp
 10066a2:	push   rsi
 10066a3:	push   rdi
 10066a4:	push   r12
 10066a6:	push   r13
 10066a8:	push   r14
 10066aa:	push   r15
 10066ac:	lea    rbp,[rsp-0x210]
 10066b4:	sub    rsp,0x310
 10066bb:	mov    rax,QWORD PTR [rip+0x910e]        # 0x100f7d0
 10066c2:	xor    rax,rsp
 10066c5:	mov    QWORD PTR [rbp+0x1f0],rax
 10066cc:	mov    rax,QWORD PTR [rbp+0x270]
 10066d3:	mov    r13,QWORD PTR [rbp+0x278]
 10066da:	mov    r12,QWORD PTR [rbp+0x280]
 10066e1:	mov    r14,QWORD PTR [rbp+0x290]
 10066e8:	mov    rsi,rcx
 10066eb:	mov    QWORD PTR [rsp+0x70],rax
 10066f0:	xor    eax,eax
 10066f2:	lea    rcx,[rbp-0x78]
 10066f6:	mov    DWORD PTR [rsp+0x50],r9d
 10066fb:	mov    DWORD PTR [rsp+0x4c],r8d
 1006700:	mov    DWORD PTR [rsp+0x48],edx
 1006704:	mov    QWORD PTR [rsp+0x58],rax
 1006709:	mov    QWORD PTR [rsp+0x68],rax
 100670e:	mov    QWORD PTR [rsp+0x60],rax
 1006713:	mov    QWORD PTR [rsp+0x30],rax
 1006718:	mov    QWORD PTR [rsp+0x38],rax
 100671d:	mov    QWORD PTR [rsp+0x40],rax
 1006722:	mov    edi,eax
 1006724:	mov    QWORD PTR [rsp+0x78],rax
 1006729:	call   QWORD PTR [rip+0xffffffffffffac01]        # 0x1001330
 100672f:	mov    r15d,DWORD PTR [rbp+0x288]
 1006736:	test   r12,r12
 1006739:	je     0x1006742
 100673b:	cmp    WORD PTR [r12],di
 1006740:	jne    0x1006759
 1006742:	test   r14,r14
 1006745:	je     0x100674d
 1006747:	cmp    WORD PTR [r14],di
 100674b:	jne    0x1006759
 100674d:	test   r15d,r15d
 1006750:	jne    0x1006759
 1006752:	xor    eax,eax
 1006754:	jmp    0x1006bbc
 1006759:	test   rsi,rsi
 100675c:	jne    0x1006768
 100675e:	mov    eax,0x80070057
 1006763:	jmp    0x1006bbc
 1006768:	test   r15d,r15d
 100676b:	je     0x10067ae
 100676d:	call   0x10072a0
 1006772:	cmp    eax,0x1
 1006775:	jne    0x1006792
 1006777:	lea    rdx,[rbp-0x20]
 100677b:	lea    ecx,[rax+0x1]
 100677e:	mov    r8d,0x104
 1006784:	call   0x1005dc0
 1006789:	test   eax,eax
 100678b:	je     0x10067a8
 100678d:	jmp    0x1006bbc
 1006792:	lea    rcx,[rbp-0x20]
 1006796:	mov    edx,0x105
 100679b:	call   0x1007500
 10067a0:	test   eax,eax
 10067a2:	jne    0x1006bbc
 10067a8:	lea    rax,[rbp-0x20]
 10067ac:	jmp    0x10067b3
 10067ae:	mov    rax,QWORD PTR [rsp+0x70]
 10067b3:	mov    QWORD PTR [rbp-0x80],rax
 10067b7:	mov    rax,QWORD PTR [rsi]
 10067ba:	lea    r8,[rbp-0x78]
 10067be:	lea    rdx,[rip+0xffffffffffffb52b]        # 0x1001cf0
 10067c5:	mov    rcx,rsi
 10067c8:	mov    QWORD PTR [rsp+0x308],rbx
 10067d0:	call   QWORD PTR [rax+0x78]
 10067d3:	mov    ebx,eax
 10067d5:	test   eax,eax
 10067d7:	js     0x1006b38
 10067dd:	cmp    WORD PTR [rbp-0x78],0x9
 10067e2:	jne    0x1006b38
 10067e8:	mov    rcx,QWORD PTR [rbp-0x70]
 10067ec:	lea    r8,[rsp+0x68]
 10067f1:	lea    rdx,[rip+0xffffffffffffc058]        # 0x1002850
 10067f8:	mov    rax,QWORD PTR [rcx]
 10067fb:	call   QWORD PTR [rax]
 10067fd:	mov    ebx,eax
 10067ff:	test   eax,eax
 1006801:	js     0x1006b38
 1006807:	mov    rcx,QWORD PTR [rsp+0x68]
 100680c:	lea    rdx,[rsp+0x60]
 1006811:	mov    rax,QWORD PTR [rcx]
 1006814:	call   QWORD PTR [rax+0x98]
 100681a:	mov    ebx,eax
 100681c:	test   eax,eax
 100681e:	js     0x1006b38
 1006824:	mov    rcx,QWORD PTR [rsp+0x60]
 1006829:	lea    r8,[rsp+0x58]
 100682e:	lea    rdx,[rip+0xffffffffffffbffb]        # 0x1002830
 1006835:	mov    rax,QWORD PTR [rcx]
 1006838:	call   QWORD PTR [rax]
 100683a:	mov    ebx,eax
 100683c:	test   eax,eax
 100683e:	js     0x1006b38
 1006844:	test   r14,r14
 1006847:	je     0x100685c
 1006849:	cmp    WORD PTR [r14],di
 100684d:	je     0x100685c
 100684f:	mov    rcx,QWORD PTR [rsp+0x58]
 1006854:	mov    rdx,r14
 1006857:	call   0x1006bf0
 100685c:	test   r15d,r15d
 100685f:	je     0x1006975
 1006865:	xor    edx,edx
 1006867:	lea    rax,[rsp+0x30]
 100686c:	lea    r9,[rip+0xffffffffffffbf9d]        # 0x1002810
 1006873:	lea    r8d,[rdx+0x1]
 1006877:	lea    rcx,[rip+0xffffffffffffbfa2]        # 0x1002820
 100687e:	mov    QWORD PTR [rsp+0x20],rax
 1006883:	call   QWORD PTR [rip+0xffffffffffffaac7]        # 0x1001350
 1006889:	mov    ebx,eax
 100688b:	test   eax,eax
 100688d:	js     0x1006b38
 1006893:	mov    rcx,QWORD PTR [rsp+0x30]
 1006898:	mov    r15d,DWORD PTR [rsp+0x48]
 100689d:	mov    rax,QWORD PTR [rcx]
 10068a0:	mov    edx,r15d
 10068a3:	call   QWORD PTR [rax+0x40]
 10068a6:	mov    rcx,QWORD PTR [rsp+0x30]
 10068ab:	mov    rdx,QWORD PTR [rbp-0x80]
 10068af:	mov    rax,QWORD PTR [rcx]
 10068b2:	call   QWORD PTR [rax+0xa0]
 10068b8:	mov    rcx,QWORD PTR [rsp+0x30]
 10068bd:	mov    edx,DWORD PTR [rsp+0x4c]
 10068c1:	mov    rax,QWORD PTR [rcx]
 10068c4:	call   QWORD PTR [rax+0x50]
 10068c7:	mov    rcx,QWORD PTR [rsp+0x30]
 10068cc:	mov    edx,DWORD PTR [rsp+0x50]
 10068d0:	mov    rax,QWORD PTR [rcx]
 10068d3:	call   QWORD PTR [rax+0x60]
 10068d6:	mov    r14,QWORD PTR [rsp+0x70]
 10068db:	test   r14,r14
 10068de:	je     0x10068f6
 10068e0:	mov    rcx,QWORD PTR [rsp+0x30]
 10068e5:	mov    rdx,r14
 10068e8:	mov    edi,0x1
 10068ed:	mov    rax,QWORD PTR [rcx]
 10068f0:	call   QWORD PTR [rax+0x80]
 10068f6:	test   r13,r13
 10068f9:	je     0x100690f
 10068fb:	mov    rcx,QWORD PTR [rsp+0x30]
 1006900:	mov    rdx,r13
 1006903:	or     edi,0x2
 1006906:	mov    rax,QWORD PTR [rcx]
 1006909:	call   QWORD PTR [rax+0x90]
 100690f:	test   edi,edi
 1006911:	je     0x1006920
 1006913:	mov    rcx,QWORD PTR [rsp+0x30]
 1006918:	mov    edx,edi
 100691a:	mov    rax,QWORD PTR [rcx]
 100691d:	call   QWORD PTR [rax+0x70]
 1006920:	mov    rcx,QWORD PTR [rsp+0x30]
 1006925:	lea    r8,[rsp+0x40]
 100692a:	lea    rdx,[rip+0xffffffffffffbe4f]        # 0x1002780
 1006931:	mov    rax,QWORD PTR [rcx]
 1006934:	call   QWORD PTR [rax]
 1006936:	mov    ebx,eax
 1006938:	test   eax,eax
 100693a:	js     0x1006b38
 1006940:	mov    rcx,QWORD PTR [rsp+0x58]
 1006945:	mov    rdx,QWORD PTR [rsp+0x40]
 100694a:	mov    rax,QWORD PTR [rcx]
 100694d:	call   QWORD PTR [rax+0x58]
 1006950:	mov    ebx,eax
 1006952:	test   eax,eax
 1006954:	js     0x1006b38
 100695a:	mov    rcx,QWORD PTR [rsp+0x40]
 100695f:	test   rcx,rcx
 1006962:	je     0x100697f
 1006964:	mov    rax,QWORD PTR [rcx]
 1006967:	call   QWORD PTR [rax+0x10]
 100696a:	mov    QWORD PTR [rsp+0x40],0x0
 1006973:	jmp    0x100697f
 1006975:	mov    r14,QWORD PTR [rsp+0x70]
 100697a:	mov    r15d,DWORD PTR [rsp+0x48]
 100697f:	test   r12,r12
 1006982:	je     0x1006a7c
 1006988:	cmp    WORD PTR [r12],0x0
 100698e:	je     0x1006a7c
 1006994:	xor    edx,edx
 1006996:	lea    rax,[rsp+0x38]
 100699b:	lea    r9,[rip+0xffffffffffffbe6e]        # 0x1002810
 10069a2:	lea    r8d,[rdx+0x1]
 10069a6:	lea    rcx,[rip+0xffffffffffffbe73]        # 0x1002820
 10069ad:	mov    QWORD PTR [rsp+0x20],rax
 10069b2:	call   QWORD PTR [rip+0xffffffffffffa998]        # 0x1001350
 10069b8:	mov    ebx,eax
 10069ba:	test   eax,eax
 10069bc:	js     0x1006b38
 10069c2:	mov    rcx,QWORD PTR [rsp+0x38]
 10069c7:	mov    edx,r15d
 10069ca:	mov    rax,QWORD PTR [rcx]
 10069cd:	call   QWORD PTR [rax+0x40]
 10069d0:	mov    rcx,QWORD PTR [rsp+0x38]
 10069d5:	mov    rdx,r12
 10069d8:	mov    rax,QWORD PTR [rcx]
 10069db:	call   QWORD PTR [rax+0xa0]
 10069e1:	mov    rcx,QWORD PTR [rsp+0x38]
 10069e6:	mov    edx,DWORD PTR [rsp+0x4c]
 10069ea:	mov    rax,QWORD PTR [rcx]
 10069ed:	call   QWORD PTR [rax+0x50]
 10069f0:	mov    rcx,QWORD PTR [rsp+0x38]
 10069f5:	mov    edx,DWORD PTR [rsp+0x50]
 10069f9:	mov    rax,QWORD PTR [rcx]
 10069fc:	call   QWORD PTR [rax+0x60]
 10069ff:	test   r14,r14
 1006a02:	je     0x1006a18
 1006a04:	mov    rcx,QWORD PTR [rsp+0x38]
 1006a09:	mov    rdx,r14
 1006a0c:	or     edi,0x1
 1006a0f:	mov    rax,QWORD PTR [rcx]
 1006a12:	call   QWORD PTR [rax+0x80]
 1006a18:	test   r13,r13
 1006a1b:	je     0x1006a31
 1006a1d:	mov    rcx,QWORD PTR [rsp+0x38]
 1006a22:	mov    rdx,r13
 1006a25:	or     edi,0x2
 1006a28:	mov    rax,QWORD PTR [rcx]
 1006a2b:	call   QWORD PTR [rax+0x90]
 1006a31:	test   edi,edi
 1006a33:	je     0x1006a42
 1006a35:	mov    rcx,QWORD PTR [rsp+0x38]
 1006a3a:	mov    edx,edi
 1006a3c:	mov    rax,QWORD PTR [rcx]
 1006a3f:	call   QWORD PTR [rax+0x70]
 1006a42:	mov    rcx,QWORD PTR [rsp+0x38]
 1006a47:	lea    r8,[rsp+0x40]
 1006a4c:	lea    rdx,[rip+0xffffffffffffbd2d]        # 0x1002780
 1006a53:	mov    rax,QWORD PTR [rcx]
 1006a56:	call   QWORD PTR [rax]
 1006a58:	mov    ebx,eax
 1006a5a:	test   eax,eax
 1006a5c:	js     0x1006b38
 1006a62:	mov    rcx,QWORD PTR [rsp+0x58]
 1006a67:	mov    rdx,QWORD PTR [rsp+0x40]
 1006a6c:	mov    rax,QWORD PTR [rcx]
 1006a6f:	call   QWORD PTR [rax+0x58]
 1006a72:	mov    ebx,eax
 1006a74:	test   eax,eax
 1006a76:	js     0x1006b38
 1006a7c:	mov    rcx,QWORD PTR [rsp+0x68]
 1006a81:	mov    rdx,QWORD PTR [rsp+0x60]
 1006a86:	mov    rax,QWORD PTR [rcx]
 1006a89:	call   QWORD PTR [rax+0xa0]
 1006a8f:	mov    ebx,eax
 1006a91:	test   eax,eax
 1006a93:	js     0x1006b38
 1006a99:	movups xmm0,XMMWORD PTR [rbp-0x78]
 1006a9d:	movsd  xmm1,QWORD PTR [rbp-0x68]
 1006aa2:	mov    rax,QWORD PTR [rsi]
 1006aa5:	lea    r8,[rbp-0x60]
 1006aa9:	lea    rdx,[rip+0xffffffffffffb240]        # 0x1001cf0
 1006ab0:	mov    rcx,rsi
 1006ab3:	movaps XMMWORD PTR [rbp-0x60],xmm0
 1006ab7:	movsd  QWORD PTR [rbp-0x50],xmm1
 1006abc:	call   QWORD PTR [rax+0x80]
 1006ac2:	mov    ebx,eax
 1006ac4:	test   eax,eax
 1006ac6:	js     0x1006b38
 1006ac8:	mov    rax,QWORD PTR [rsi]
 1006acb:	lea    r8,[rsp+0x78]
 1006ad0:	lea    rdx,[rip+0xffffffffffffbd09]        # 0x10027e0
 1006ad7:	mov    rcx,rsi
 1006ada:	call   QWORD PTR [rax]
 1006adc:	mov    ebx,eax
 1006ade:	test   eax,eax
 1006ae0:	js     0x1006b38
 1006ae2:	lea    rcx,[rbp-0x40]
 1006ae6:	call   QWORD PTR [rip+0xffffffffffffa844]        # 0x1001330
 1006aec:	mov    rcx,QWORD PTR [rsp+0x78]
 1006af1:	mov    DWORD PTR [rbp-0x38],0x4
 1006af8:	movsd  xmm1,QWORD PTR [rbp-0x30]
 1006afd:	movsd  QWORD PTR [rbp-0x50],xmm1
 1006b02:	mov    edx,0x3
 1006b07:	lea    r8,[rbp-0x60]
 1006b0b:	mov    WORD PTR [rbp-0x40],dx
 1006b0f:	mov    rax,QWORD PTR [rcx]
 1006b12:	movups xmm0,XMMWORD PTR [rbp-0x40]
 1006b16:	movaps XMMWORD PTR [rbp-0x60],xmm0
 1006b1a:	call   QWORD PTR [rax+0x40]
 1006b1d:	lea    rcx,[rbp-0x40]
 1006b21:	mov    ebx,eax
 1006b23:	call   QWORD PTR [rip+0xffffffffffffa817]        # 0x1001340
 1006b29:	test   ebx,ebx
 1006b2b:	js     0x1006b38
 1006b2d:	mov    rax,QWORD PTR [rsi]
 1006b30:	mov    rcx,rsi
 1006b33:	call   QWORD PTR [rax+0x70]
 1006b36:	mov    ebx,eax
 1006b38:	mov    rcx,QWORD PTR [rsp+0x78]
 1006b3d:	test   rcx,rcx
 1006b40:	je     0x1006b48
 1006b42:	mov    rax,QWORD PTR [rcx]
 1006b45:	call   QWORD PTR [rax+0x10]
 1006b48:	mov    rcx,QWORD PTR [rsp+0x40]
 1006b4d:	test   rcx,rcx
 1006b50:	je     0x1006b58
 1006b52:	mov    rax,QWORD PTR [rcx]
 1006b55:	call   QWORD PTR [rax+0x10]
 1006b58:	mov    rcx,QWORD PTR [rsp+0x30]
 1006b5d:	test   rcx,rcx
 1006b60:	je     0x1006b68
 1006b62:	mov    rax,QWORD PTR [rcx]
 1006b65:	call   QWORD PTR [rax+0x10]
 1006b68:	mov    rcx,QWORD PTR [rsp+0x38]
 1006b6d:	test   rcx,rcx
 1006b70:	je     0x1006b78
 1006b72:	mov    rax,QWORD PTR [rcx]
 1006b75:	call   QWORD PTR [rax+0x10]
 1006b78:	mov    rcx,QWORD PTR [rsp+0x58]
 1006b7d:	test   rcx,rcx
 1006b80:	je     0x1006b88
 1006b82:	mov    rax,QWORD PTR [rcx]
 1006b85:	call   QWORD PTR [rax+0x10]
 1006b88:	mov    rcx,QWORD PTR [rsp+0x60]
 1006b8d:	test   rcx,rcx
 1006b90:	je     0x1006b98
 1006b92:	mov    rax,QWORD PTR [rcx]
 1006b95:	call   QWORD PTR [rax+0x10]
 1006b98:	mov    rcx,QWORD PTR [rsp+0x68]
 1006b9d:	test   rcx,rcx
 1006ba0:	je     0x1006ba8
 1006ba2:	mov    rax,QWORD PTR [rcx]
 1006ba5:	call   QWORD PTR [rax+0x10]
 1006ba8:	lea    rcx,[rbp-0x78]
 1006bac:	call   QWORD PTR [rip+0xffffffffffffa78e]        # 0x1001340
 1006bb2:	mov    eax,ebx
 1006bb4:	mov    rbx,QWORD PTR [rsp+0x308]
 1006bbc:	mov    rcx,QWORD PTR [rbp+0x1f0]
 1006bc3:	xor    rcx,rsp
 1006bc6:	call   0x1009d30
 1006bcb:	add    rsp,0x310
 1006bd2:	pop    r15
 1006bd4:	pop    r14
 1006bd6:	pop    r13
 1006bd8:	pop    r12
 1006bda:	pop    rdi
 1006bdb:	pop    rsi
 1006bdc:	pop    rbp
 1006bdd:	ret    
 1006bde:	int3   
 1006bdf:	int3   
 1006be0:	int3   
 1006be1:	int3   
 1006be2:	int3   
 1006be3:	int3   
 1006be4:	int3   
 1006be5:	int3   
 1006be6:	int3   
 1006be7:	int3   
 1006be8:	int3   
 1006be9:	int3   
 1006bea:	int3   
 1006beb:	int3   
 1006bec:	int3   
 1006bed:	int3   
 1006bee:	int3   
 1006bef:	int3   
 1006bf0:	rex push rbp
 1006bf2:	push   rsi
 1006bf3:	push   r14
 1006bf5:	push   r15
 1006bf7:	mov    rbp,rsp
 1006bfa:	sub    rsp,0x68
 1006bfe:	xor    r15d,r15d
 1006c01:	mov    r14,rdx
 1006c04:	mov    rsi,rcx
 1006c07:	mov    QWORD PTR [rbp-0x40],r15
 1006c0b:	mov    QWORD PTR [rbp-0x38],r15
 1006c0f:	mov    DWORD PTR [rbp+0x28],r15d
 1006c13:	mov    QWORD PTR [rbp+0x40],r15
 1006c17:	mov    QWORD PTR [rbp+0x38],r15
 1006c1b:	mov    QWORD PTR [rbp-0x48],r15
 1006c1f:	test   rcx,rcx
 1006c22:	je     0x1006e11
 1006c28:	test   rdx,rdx
 1006c2b:	je     0x1006e11
 1006c31:	mov    rax,QWORD PTR [rcx]
 1006c34:	lea    rdx,[rbp-0x38]
 1006c38:	mov    QWORD PTR [rsp+0x60],rbx
 1006c3d:	call   QWORD PTR [rax+0x70]
 1006c40:	mov    ebx,eax
 1006c42:	test   eax,eax
 1006c44:	js     0x1006d62
 1006c4a:	mov    rcx,QWORD PTR [rbp-0x38]
 1006c4e:	lea    r8,[rbp-0x40]
 1006c52:	lea    rdx,[rip+0xffffffffffffbb37]        # 0x1002790
 1006c59:	mov    rax,QWORD PTR [rcx]
 1006c5c:	call   QWORD PTR [rax]
 1006c5e:	mov    ebx,eax
 1006c60:	test   eax,eax
 1006c62:	js     0x1006d62
 1006c68:	lea    rcx,[rbp-0x30]
 1006c6c:	mov    QWORD PTR [rsp+0x58],rdi
 1006c71:	mov    QWORD PTR [rsp+0x50],r12
 1006c76:	call   QWORD PTR [rip+0xffffffffffffa6b4]        # 0x1001330
 1006c7c:	mov    rcx,QWORD PTR [rbp-0x40]
 1006c80:	lea    r9,[rbp+0x28]
 1006c84:	mov    rax,QWORD PTR [rcx]
 1006c87:	lea    r8,[rbp-0x30]
 1006c8b:	lea    edx,[r15+0x1]
 1006c8f:	call   QWORD PTR [rax+0x18]
 1006c92:	mov    ebx,eax
 1006c94:	test   eax,eax
 1006c96:	jne    0x1006d55
 1006c9c:	lea    r12d,[r15+0x9]
 1006ca0:	cmp    DWORD PTR [rbp+0x28],0x1
 1006ca4:	jne    0x1006d34
 1006caa:	cmp    r12w,WORD PTR [rbp-0x30]
 1006caf:	jne    0x1006d58
 1006cb5:	mov    rdi,QWORD PTR [rbp-0x28]
 1006cb9:	lea    r8,[rbp+0x38]
 1006cbd:	lea    rdx,[rip+0xffffffffffffbb4c]        # 0x1002810
 1006cc4:	mov    rax,QWORD PTR [rdi]
 1006cc7:	mov    rcx,rdi
 1006cca:	call   QWORD PTR [rax]
 1006ccc:	test   eax,eax
 1006cce:	js     0x1006d2a
 1006cd0:	mov    rcx,QWORD PTR [rbp+0x38]
 1006cd4:	lea    rdx,[rbp+0x40]
 1006cd8:	mov    rax,QWORD PTR [rcx]
 1006cdb:	call   QWORD PTR [rax+0x98]
 1006ce1:	mov    r11,QWORD PTR [rbp+0x40]
 1006ce5:	lea    rcx,[rip+0xffffffffffffaa20]        # 0x100170c
 1006cec:	test   r11,r11
 1006cef:	mov    rdx,r14
 1006cf2:	cmovne rcx,r11
 1006cf6:	call   QWORD PTR [rip+0xffffffffffffa5dc]        # 0x10012d8
 1006cfc:	test   eax,eax
 1006cfe:	je     0x1006dc9
 1006d04:	mov    rcx,QWORD PTR [rbp+0x40]
 1006d08:	test   rcx,rcx
 1006d0b:	je     0x1006d17
 1006d0d:	call   QWORD PTR [rip+0xffffffffffffa615]        # 0x1001328
 1006d13:	mov    QWORD PTR [rbp+0x40],r15
 1006d17:	mov    rcx,QWORD PTR [rbp+0x38]
 1006d1b:	test   rcx,rcx
 1006d1e:	je     0x1006d2a
 1006d20:	mov    rax,QWORD PTR [rcx]
 1006d23:	call   QWORD PTR [rax+0x10]
 1006d26:	mov    QWORD PTR [rbp+0x38],r15
 1006d2a:	lea    rcx,[rbp-0x30]
 1006d2e:	call   QWORD PTR [rip+0xffffffffffffa60c]        # 0x1001340
 1006d34:	mov    rcx,QWORD PTR [rbp-0x40]
 1006d38:	lea    r9,[rbp+0x28]
 1006d3c:	lea    r8,[rbp-0x30]
 1006d40:	mov    rax,QWORD PTR [rcx]
 1006d43:	mov    edx,0x1
 1006d48:	call   QWORD PTR [rax+0x18]
 1006d4b:	mov    ebx,eax
 1006d4d:	test   eax,eax
 1006d4f:	je     0x1006ca0
 1006d55:	mov    ebx,r15d
 1006d58:	mov    rdi,QWORD PTR [rsp+0x58]
 1006d5d:	mov    r12,QWORD PTR [rsp+0x50]
 1006d62:	mov    rcx,QWORD PTR [rbp+0x40]
 1006d66:	test   rcx,rcx
 1006d69:	je     0x1006d71
 1006d6b:	call   QWORD PTR [rip+0xffffffffffffa5b7]        # 0x1001328
 1006d71:	lea    rcx,[rbp-0x30]
 1006d75:	call   QWORD PTR [rip+0xffffffffffffa5c5]        # 0x1001340
 1006d7b:	mov    rcx,QWORD PTR [rbp-0x48]
 1006d7f:	test   rcx,rcx
 1006d82:	je     0x1006d8a
 1006d84:	mov    rax,QWORD PTR [rcx]
 1006d87:	call   QWORD PTR [rax+0x10]
 1006d8a:	mov    rcx,QWORD PTR [rbp+0x38]
 1006d8e:	test   rcx,rcx
 1006d91:	je     0x1006d99
 1006d93:	mov    rax,QWORD PTR [rcx]
 1006d96:	call   QWORD PTR [rax+0x10]
 1006d99:	mov    rcx,QWORD PTR [rbp-0x40]
 1006d9d:	test   rcx,rcx
 1006da0:	je     0x1006da8
 1006da2:	mov    rax,QWORD PTR [rcx]
 1006da5:	call   QWORD PTR [rax+0x10]
 1006da8:	mov    rcx,QWORD PTR [rbp-0x38]
 1006dac:	test   rcx,rcx
 1006daf:	je     0x1006db7
 1006db1:	mov    rax,QWORD PTR [rcx]
 1006db4:	call   QWORD PTR [rax+0x10]
 1006db7:	mov    eax,ebx
 1006db9:	mov    rbx,QWORD PTR [rsp+0x60]
 1006dbe:	add    rsp,0x68
 1006dc2:	pop    r15
 1006dc4:	pop    r14
 1006dc6:	pop    rsi
 1006dc7:	pop    rbp
 1006dc8:	ret    
 1006dc9:	mov    rcx,QWORD PTR [rbp+0x38]
 1006dcd:	lea    r8,[rbp-0x48]
 1006dd1:	lea    rdx,[rip+0xffffffffffffb9a8]        # 0x1002780
 1006dd8:	mov    rax,QWORD PTR [rcx]
 1006ddb:	call   QWORD PTR [rax]
 1006ddd:	mov    ebx,eax
 1006ddf:	test   eax,eax
 1006de1:	js     0x1006d58
 1006de7:	mov    rax,QWORD PTR [rsi]
 1006dea:	mov    rdx,rdi
 1006ded:	mov    rcx,rsi
 1006df0:	call   QWORD PTR [rax+0x60]
 1006df3:	mov    rcx,QWORD PTR [rbp-0x48]
 1006df7:	mov    ebx,eax
 1006df9:	test   rcx,rcx
 1006dfc:	je     0x1006d58
 1006e02:	mov    rax,QWORD PTR [rcx]
 1006e05:	call   QWORD PTR [rax+0x10]
 1006e08:	mov    QWORD PTR [rbp-0x48],r15
 1006e0c:	jmp    0x1006d58
 1006e11:	mov    eax,0x80070057
 1006e16:	add    rsp,0x68
 1006e1a:	pop    r15
 1006e1c:	pop    r14
 1006e1e:	pop    rsi
 1006e1f:	pop    rbp
 1006e20:	ret    
 1006e21:	int3   
 1006e22:	int3   
 1006e23:	int3   
 1006e24:	int3   
 1006e25:	int3   
 1006e26:	int3   
 1006e27:	int3   
 1006e28:	int3   
 1006e29:	int3   
 1006e2a:	int3   
 1006e2b:	int3   
 1006e2c:	int3   
 1006e2d:	int3   
 1006e2e:	int3   
 1006e2f:	int3   
 1006e30:	mov    QWORD PTR [rsp+0x18],rbx
 1006e35:	push   rdi
 1006e36:	sub    rsp,0x260
 1006e3d:	mov    rax,QWORD PTR [rip+0x898c]        # 0x100f7d0
 1006e44:	xor    rax,rsp
 1006e47:	mov    QWORD PTR [rsp+0x250],rax
 1006e4f:	mov    rdi,rcx
 1006e52:	mov    ecx,0x2
 1006e57:	mov    rbx,rdx
 1006e5a:	mov    QWORD PTR [rsp+0x30],0x0
 1006e63:	call   0x1004480
 1006e68:	lea    rax,[rsp+0x30]
 1006e6d:	lea    rdx,[rbx+0x618]
 1006e74:	mov    r9d,0x20019
 1006e7a:	xor    r8d,r8d
 1006e7d:	mov    rcx,0xffffffff80000002
 1006e84:	mov    QWORD PTR [rsp+0x20],rax
 1006e89:	call   QWORD PTR [rip+0xffffffffffffa179]        # 0x1001008
 1006e8f:	mov    ebx,eax
 1006e91:	test   eax,eax
 1006e93:	jne    0x1006ee9
 1006e95:	mov    rcx,QWORD PTR [rsp+0x30]
 1006e9a:	lea    rax,[rsp+0x38]
 1006e9f:	lea    r9,[rsp+0x3c]
 1006ea4:	mov    QWORD PTR [rsp+0x28],rax
 1006ea9:	lea    rax,[rsp+0x40]
 1006eae:	lea    rdx,[rip+0xffffffffffffa95b]        # 0x1001810
 1006eb5:	xor    r8d,r8d
 1006eb8:	mov    DWORD PTR [rsp+0x38],0x208
 1006ec0:	mov    QWORD PTR [rsp+0x20],rax
 1006ec5:	call   QWORD PTR [rip+0xffffffffffffa145]        # 0x1001010
 1006ecb:	mov    ebx,eax
 1006ecd:	test   eax,eax
 1006ecf:	jne    0x1006ee9
 1006ed1:	test   rdi,rdi
 1006ed4:	je     0x1006ee9
 1006ed6:	lea    r8,[rsp+0x40]
 1006edb:	mov    edx,0x104
 1006ee0:	mov    rcx,rdi
 1006ee3:	call   QWORD PTR [rip+0xffffffffffffa3a7]        # 0x1001290
 1006ee9:	mov    rcx,QWORD PTR [rsp+0x30]
 1006eee:	test   rcx,rcx
 1006ef1:	je     0x1006ef9
 1006ef3:	call   QWORD PTR [rip+0xffffffffffffa107]        # 0x1001000
 1006ef9:	mov    eax,ebx
 1006efb:	mov    rcx,QWORD PTR [rsp+0x250]
 1006f03:	xor    rcx,rsp
 1006f06:	call   0x1009d30
 1006f0b:	mov    rbx,QWORD PTR [rsp+0x280]
 1006f13:	add    rsp,0x260
 1006f1a:	pop    rdi
 1006f1b:	ret    
 1006f1c:	int3   
 1006f1d:	int3   
 1006f1e:	int3   
 1006f1f:	int3   
 1006f20:	int3   
 1006f21:	int3   
 1006f22:	int3   
 1006f23:	int3   
 1006f24:	int3   
 1006f25:	int3   
 1006f26:	int3   
 1006f27:	int3   
 1006f28:	int3   
 1006f29:	int3   
 1006f2a:	int3   
 1006f2b:	int3   
 1006f2c:	int3   
 1006f2d:	int3   
 1006f2e:	int3   
 1006f2f:	int3   
 1006f30:	mov    QWORD PTR [rsp+0x20],rdi
 1006f35:	push   rbp
 1006f36:	lea    rbp,[rsp-0x1d0]
 1006f3e:	sub    rsp,0x2d0
 1006f45:	mov    rax,QWORD PTR [rip+0x8884]        # 0x100f7d0
 1006f4c:	xor    rax,rsp
 1006f4f:	mov    QWORD PTR [rbp+0x1c0],rax
 1006f56:	xor    eax,eax
 1006f58:	mov    rdi,rcx
 1006f5b:	mov    DWORD PTR [rcx],0x493e0
 1006f61:	lea    rcx,[rdx+0x820]
 1006f68:	lea    r8,[rsp+0x50]
 1006f6d:	xor    edx,edx
 1006f6f:	mov    DWORD PTR [rsp+0x30],eax
 1006f73:	mov    DWORD PTR [rsp+0x34],0x104
 1006f7b:	mov    WORD PTR [rsp+0x50],ax
 1006f80:	mov    QWORD PTR [rsp+0x52],rax
 1006f85:	mov    QWORD PTR [rsp+0x5a],rax
 1006f8a:	mov    QWORD PTR [rsp+0x62],rax
 1006f8f:	mov    QWORD PTR [rsp+0x6a],rax
 1006f94:	mov    QWORD PTR [rsp+0x72],rax
 1006f99:	mov    QWORD PTR [rsp+0x7a],rax
 1006f9e:	mov    QWORD PTR [rbp-0x7e],rax
 1006fa2:	mov    QWORD PTR [rbp-0x76],rax
 1006fa6:	mov    QWORD PTR [rbp-0x6e],rax
 1006faa:	mov    DWORD PTR [rbp-0x66],eax
 1006fad:	mov    DWORD PTR [rbp-0x60],eax
 1006fb0:	call   0x100beab
 1006fb5:	test   eax,eax
 1006fb7:	je     0x1006fcc
 1006fb9:	lea    r8,[rsp+0x34]
 1006fbe:	lea    rdx,[rbp-0x50]
 1006fc2:	lea    rcx,[rsp+0x50]
 1006fc7:	call   0x100bec3
 1006fcc:	lea    r8,[rip+0x7195]        # 0x100e168
 1006fd3:	lea    rcx,[rbp-0x50]
 1006fd7:	mov    edx,0x104
 1006fdc:	call   QWORD PTR [rip+0xffffffffffffa2be]        # 0x10012a0
 1006fe2:	lea    r11,[rsp+0x40]
 1006fe7:	lea    rdx,[rbp-0x50]
 1006feb:	mov    r9d,0x20019
 1006ff1:	xor    r8d,r8d
 1006ff4:	mov    rcx,0xffffffff80000002
 1006ffb:	mov    QWORD PTR [rsp+0x20],r11
 1007000:	call   QWORD PTR [rip+0xffffffffffffa002]        # 0x1001008
 1007006:	test   eax,eax
 1007008:	jne    0x1007069
 100700a:	mov    rcx,QWORD PTR [rsp+0x40]
 100700f:	lea    rax,[rsp+0x38]
 1007014:	lea    r9,[rsp+0x48]
 1007019:	mov    QWORD PTR [rsp+0x28],rax
 100701e:	lea    rax,[rsp+0x30]
 1007023:	lea    rdx,[rip+0x71ae]        # 0x100e1d8
 100702a:	xor    r8d,r8d
 100702d:	mov    QWORD PTR [rsp+0x2f0],rbx
 1007035:	mov    DWORD PTR [rsp+0x38],0x4
 100703d:	mov    QWORD PTR [rsp+0x20],rax
 1007042:	call   QWORD PTR [rip+0xffffffffffff9fc8]        # 0x1001010
 1007048:	mov    ebx,eax
 100704a:	test   eax,eax
 100704c:	jne    0x1007054
 100704e:	mov    ecx,DWORD PTR [rsp+0x30]
 1007052:	mov    DWORD PTR [rdi],ecx
 1007054:	mov    rcx,QWORD PTR [rsp+0x40]
 1007059:	call   QWORD PTR [rip+0xffffffffffff9fa1]        # 0x1001000
 100705f:	mov    eax,ebx
 1007061:	mov    rbx,QWORD PTR [rsp+0x2f0]
 1007069:	mov    rcx,QWORD PTR [rbp+0x1c0]
 1007070:	xor    rcx,rsp
 1007073:	call   0x1009d30
 1007078:	mov    rdi,QWORD PTR [rsp+0x2f8]
 1007080:	add    rsp,0x2d0
 1007087:	pop    rbp
 1007088:	ret    
 1007089:	int3   
 100708a:	int3   
 100708b:	int3   
 100708c:	int3   
 100708d:	int3   
 100708e:	int3   
 100708f:	int3   
 1007090:	mov    QWORD PTR [rsp+0x8],rbx
 1007095:	push   rdi
 1007096:	sub    rsp,0x20
 100709a:	mov    rbx,rdx
 100709d:	mov    rdi,rcx
 10070a0:	call   0x10072a0
 10070a5:	cmp    eax,0x1
 10070a8:	jne    0x10070c1
 10070aa:	mov    r8d,ebx
 10070ad:	mov    rdx,rdi
 10070b0:	mov    ecx,eax
 10070b2:	mov    rbx,QWORD PTR [rsp+0x30]
 10070b7:	add    rsp,0x20
 10070bb:	pop    rdi
 10070bc:	jmp    0x1005dc0
 10070c1:	mov    rdx,rbx
 10070c4:	mov    rcx,rdi
 10070c7:	mov    rbx,QWORD PTR [rsp+0x30]
 10070cc:	add    rsp,0x20
 10070d0:	pop    rdi
 10070d1:	jmp    0x1007500
 10070d6:	int3   
 10070d7:	int3   
 10070d8:	int3   
 10070d9:	int3   
 10070da:	int3   
 10070db:	int3   
 10070dc:	int3   
 10070dd:	int3   
 10070de:	int3   
 10070df:	int3   
 10070e0:	mov    QWORD PTR [rsp+0x8],rbx
 10070e5:	mov    QWORD PTR [rsp+0x10],rsi
 10070ea:	push   rdi
 10070eb:	sub    rsp,0x240
 10070f2:	mov    rax,QWORD PTR [rip+0x86d7]        # 0x100f7d0
 10070f9:	xor    rax,rsp
 10070fc:	mov    QWORD PTR [rsp+0x230],rax
 1007104:	mov    rdi,rcx
 1007107:	lea    rcx,[rsp+0x22]
 100710c:	xor    esi,esi
 100710e:	xor    edx,edx
 1007110:	mov    r8d,0x208
 1007116:	mov    WORD PTR [rsp+0x20],si
 100711b:	call   0x1009d56
 1007120:	mov    ebx,0x105
 1007125:	lea    rcx,[rsp+0x20]
 100712a:	mov    edx,ebx
 100712c:	call   QWORD PTR [rip+0xffffffffffffa00e]        # 0x1001140
 1007132:	mov    r11d,eax
 1007135:	test   eax,eax
 1007137:	je     0x1007269
 100713d:	or     rax,0xffffffffffffffff
 1007141:	inc    rax
 1007144:	cmp    WORD PTR [rdi+rax*2],si
 1007148:	jne    0x1007141
 100714a:	mov    ecx,0x103
 100714f:	sub    rcx,rax
 1007152:	cmp    r11,rcx
 1007155:	jae    0x1007269
 100715b:	lea    ecx,[r11-0x1]
 100715f:	mov    eax,0x5c
 1007164:	cmp    ax,WORD PTR [rsp+rcx*2+0x20]
 1007169:	je     0x10071e1
 100716b:	mov    rcx,rbx
 100716e:	lea    rax,[rsp+0x20]
 1007173:	cmp    WORD PTR [rax],si
 1007176:	je     0x1007183
 1007178:	add    rax,0x2
 100717c:	dec    rcx
 100717f:	jne    0x1007173
 1007181:	jmp    0x10071e1
 1007183:	test   rcx,rcx
 1007186:	je     0x10071e1
 1007188:	mov    rdx,rbx
 100718b:	lea    rax,[rsp+0x20]
 1007190:	sub    rdx,rcx
 1007193:	mov    rcx,rbx
 1007196:	lea    rax,[rax+rdx*2]
 100719a:	sub    rcx,rdx
 100719d:	je     0x10071da
 100719f:	add    rdx,0x7ffffefa
 10071a6:	lea    r9,[rip+0xffffffffffffa563]        # 0x1001710
 10071ad:	add    rdx,rcx
 10071b0:	sub    r9,rax
 10071b3:	test   rdx,rdx
 10071b6:	je     0x10071d5
 10071b8:	movzx  r8d,WORD PTR [r9+rax*1]
 10071bd:	test   r8w,r8w
 10071c1:	je     0x10071d5
 10071c3:	mov    WORD PTR [rax],r8w
 10071c7:	add    rax,0x2
 10071cb:	dec    rdx
 10071ce:	dec    rcx
 10071d1:	jne    0x10071b3
 10071d3:	jmp    0x10071da
 10071d5:	test   rcx,rcx
 10071d8:	jne    0x10071de
 10071da:	sub    rax,0x2
 10071de:	mov    WORD PTR [rax],si
 10071e1:	mov    rcx,rbx
 10071e4:	lea    rax,[rsp+0x20]
 10071e9:	nop    DWORD PTR [rax+0x0]
 10071f0:	cmp    WORD PTR [rax],si
 10071f3:	je     0x100720b
 10071f5:	add    rax,0x2
 10071f9:	dec    rcx
 10071fc:	jne    0x10071f0
 10071fe:	lea    rcx,[rsp+0x20]
 1007203:	call   QWORD PTR [rip+0xffffffffffff9f3f]        # 0x1001148
 1007209:	jmp    0x100726c
 100720b:	test   rcx,rcx
 100720e:	je     0x100725c
 1007210:	mov    rdx,rbx
 1007213:	lea    rax,[rsp+0x20]
 1007218:	sub    rdx,rcx
 100721b:	lea    rax,[rax+rdx*2]
 100721f:	sub    rbx,rdx
 1007222:	je     0x1007255
 1007224:	lea    rcx,[rdx+0x7ffffefa]
 100722b:	add    rcx,rbx
 100722e:	sub    rdi,rax
 1007231:	test   rcx,rcx
 1007234:	je     0x1007250
 1007236:	movzx  edx,WORD PTR [rdi+rax*1]
 100723a:	test   dx,dx
 100723d:	je     0x1007250
 100723f:	mov    WORD PTR [rax],dx
 1007242:	add    rax,0x2
 1007246:	dec    rcx
 1007249:	dec    rbx
 100724c:	jne    0x1007231
 100724e:	jmp    0x1007255
 1007250:	test   rbx,rbx
 1007253:	jne    0x1007259
 1007255:	sub    rax,0x2
 1007259:	mov    WORD PTR [rax],si
 100725c:	lea    rcx,[rsp+0x20]
 1007261:	call   QWORD PTR [rip+0xffffffffffff9ee1]        # 0x1001148
 1007267:	jmp    0x100726c
 1007269:	mov    rax,rsi
 100726c:	mov    rcx,QWORD PTR [rsp+0x230]
 1007274:	xor    rcx,rsp
 1007277:	call   0x1009d30
 100727c:	lea    r11,[rsp+0x240]
 1007284:	mov    rbx,QWORD PTR [r11+0x10]
 1007288:	mov    rsi,QWORD PTR [r11+0x18]
 100728c:	mov    rsp,r11
 100728f:	pop    rdi
 1007290:	ret    
 1007291:	int3   
 1007292:	int3   
 1007293:	int3   
 1007294:	int3   
 1007295:	int3   
 1007296:	int3   
 1007297:	int3   
 1007298:	int3   
 1007299:	int3   
 100729a:	int3   
 100729b:	int3   
 100729c:	int3   
 100729d:	int3   
 100729e:	int3   
 100729f:	int3   
 10072a0:	sub    rsp,0x158
 10072a7:	mov    rax,QWORD PTR [rip+0x8522]        # 0x100f7d0
 10072ae:	xor    rax,rsp
 10072b1:	mov    QWORD PTR [rsp+0x140],rax
 10072b9:	lea    rcx,[rsp+0x20]
 10072be:	xor    edx,edx
 10072c0:	mov    r8d,0x114
 10072c6:	call   0x1009d56
 10072cb:	lea    rcx,[rsp+0x20]
 10072d0:	mov    DWORD PTR [rsp+0x20],0x114
 10072d8:	call   QWORD PTR [rip+0xffffffffffff9e3a]        # 0x1001118
 10072de:	test   eax,eax
 10072e0:	je     0x100730d
 10072e2:	cmp    DWORD PTR [rsp+0x30],0x2
 10072e7:	jne    0x100730d
 10072e9:	cmp    DWORD PTR [rsp+0x24],0x4
 10072ee:	jbe    0x100730d
 10072f0:	mov    eax,0x1
 10072f5:	mov    rcx,QWORD PTR [rsp+0x140]
 10072fd:	xor    rcx,rsp
 1007300:	call   0x1009d30
 1007305:	add    rsp,0x158
 100730c:	ret    
 100730d:	xor    eax,eax
 100730f:	mov    rcx,QWORD PTR [rsp+0x140]
 1007317:	xor    rcx,rsp
 100731a:	call   0x1009d30
 100731f:	add    rsp,0x158
 1007326:	ret    
 1007327:	int3   
 1007328:	int3   
 1007329:	int3   
 100732a:	int3   
 100732b:	int3   
 100732c:	int3   
 100732d:	int3   
 100732e:	int3   
 100732f:	int3   
 1007330:	rex push rbx
 1007332:	push   rbp
 1007333:	push   r14
 1007335:	sub    rsp,0x460
 100733c:	mov    rax,QWORD PTR [rip+0x848d]        # 0x100f7d0
 1007343:	xor    rax,rsp
 1007346:	mov    QWORD PTR [rsp+0x450],rax
 100734e:	mov    rbp,rdx
 1007351:	mov    r14,rcx
 1007354:	lea    rdx,[rsp+0x20]
 1007359:	lea    rcx,[rsp+0x240]
 1007361:	mov    ebx,0x104
 1007366:	mov    DWORD PTR [rsp+0x20],ebx
 100736a:	call   QWORD PTR [rip+0xffffffffffff9db0]        # 0x1001120
 1007370:	test   eax,eax
 1007372:	je     0x10074d2
 1007378:	mov    QWORD PTR [rsp+0x490],rsi
 1007380:	lea    r8,[rsp+0x28]
 1007385:	xor    esi,esi
 1007387:	xor    edx,edx
 1007389:	xor    ecx,ecx
 100738b:	mov    QWORD PTR [rsp+0x498],rdi
 1007393:	mov    QWORD PTR [rsp+0x28],rsi
 1007398:	call   0x100a2b0
 100739d:	mov    edi,eax
 100739f:	test   eax,eax
 10073a1:	jne    0x100740a
 10073a3:	mov    r9,QWORD PTR [rsp+0x28]
 10073a8:	lea    rdx,[rsp+0x30]
 10073ad:	lea    rcx,[rsp+0x30]
 10073b2:	mov    rax,r9
 10073b5:	mov    r8d,esi
 10073b8:	sub    rax,rdx
 10073bb:	lea    rdx,[rax+0x4]
 10073bf:	nop
 10073c0:	lea    rax,[rbx+0x7ffffefa]
 10073c7:	test   rax,rax
 10073ca:	je     0x10073e3
 10073cc:	movzx  eax,WORD PTR [rdx+rcx*1]
 10073d0:	test   ax,ax
 10073d3:	je     0x10073e3
 10073d5:	mov    WORD PTR [rcx],ax
 10073d8:	add    rcx,0x2
 10073dc:	dec    rbx
 10073df:	jne    0x10073c0
 10073e1:	jmp    0x10073e8
 10073e3:	test   rbx,rbx
 10073e6:	jne    0x10073f2
 10073e8:	sub    rcx,0x2
 10073ec:	mov    r8d,0x8007007a
 10073f2:	mov    WORD PTR [rcx],si
 10073f5:	mov    eax,0x84b
 10073fa:	test   r8d,r8d
 10073fd:	mov    edi,esi
 10073ff:	mov    rcx,r9
 1007402:	cmovs  edi,eax
 1007405:	call   0x100a2bc
 100740a:	test   edi,edi
 100740c:	jle    0x1007419
 100740e:	movzx  edi,di
 1007411:	or     edi,0x80070000
 1007417:	test   edi,edi
 1007419:	mov    rdi,QWORD PTR [rsp+0x498]
 1007421:	jne    0x10074c8
 1007427:	test   rbp,rbp
 100742a:	je     0x10074c8
 1007430:	cmp    rbp,0x7fffffff
 1007437:	ja     0x10074c8
 100743d:	lea    r9,[rsp+0x240]
 1007445:	mov    r8d,0x7ffffffe
 100744b:	mov    rdx,rbp
 100744e:	sub    r8,rbp
 1007451:	mov    rcx,r14
 1007454:	mov    r10d,esi
 1007457:	sub    r9,r14
 100745a:	nop    WORD PTR [rax+rax*1+0x0]
 1007460:	lea    rax,[r8+rdx*1]
 1007464:	test   rax,rax
 1007467:	je     0x1007481
 1007469:	movzx  eax,WORD PTR [r9+rcx*1]
 100746e:	test   ax,ax
 1007471:	je     0x1007481
 1007473:	mov    WORD PTR [rcx],ax
 1007476:	add    rcx,0x2
 100747a:	dec    rdx
 100747d:	jne    0x1007460
 100747f:	jmp    0x1007486
 1007481:	test   rdx,rdx
 1007484:	jne    0x1007490
 1007486:	sub    rcx,0x2
 100748a:	mov    r10d,0x8007007a
 1007490:	mov    WORD PTR [rcx],si
 1007493:	test   r10d,r10d
 1007496:	js     0x10074c8
 1007498:	lea    r8,[rip+0xffffffffffffa84d]        # 0x1001cec
 100749f:	mov    rdx,rbp
 10074a2:	mov    rcx,r14
 10074a5:	call   0x1007590
 10074aa:	test   eax,eax
 10074ac:	js     0x10074c8
 10074ae:	lea    r8,[rsp+0x30]
 10074b3:	mov    rdx,rbp
 10074b6:	mov    rcx,r14
 10074b9:	call   0x1007590
 10074be:	test   eax,eax
 10074c0:	setns  sil
 10074c4:	mov    eax,esi
 10074c6:	jmp    0x10074ca
 10074c8:	xor    eax,eax
 10074ca:	mov    rsi,QWORD PTR [rsp+0x490]
 10074d2:	mov    rcx,QWORD PTR [rsp+0x450]
 10074da:	xor    rcx,rsp
 10074dd:	call   0x1009d30
 10074e2:	add    rsp,0x460
 10074e9:	pop    r14
 10074eb:	pop    rbp
 10074ec:	pop    rbx
 10074ed:	ret    
 10074ee:	int3   
 10074ef:	int3   
 10074f0:	int3   
 10074f1:	int3   
 10074f2:	int3   
 10074f3:	int3   
 10074f4:	int3   
 10074f5:	int3   
 10074f6:	int3   
 10074f7:	int3   
 10074f8:	int3   
 10074f9:	int3   
 10074fa:	int3   
 10074fb:	int3   
 10074fc:	int3   
 10074fd:	int3   
 10074fe:	int3   
 10074ff:	int3   
 1007500:	mov    QWORD PTR [rsp+0x8],rbx
 1007505:	mov    QWORD PTR [rsp+0x10],rsi
 100750a:	push   rdi
 100750b:	sub    rsp,0x20
 100750f:	mov    rdi,rdx
 1007512:	mov    rsi,rcx
 1007515:	lea    r8,[rsp+0x40]
 100751a:	xor    edx,edx
 100751c:	xor    ecx,ecx
 100751e:	mov    QWORD PTR [rsp+0x40],0x0
 1007527:	call   0x100a2b0
 100752c:	mov    ebx,eax
 100752e:	test   eax,eax
 1007530:	jne    0x100755a
 1007532:	mov    r8,QWORD PTR [rsp+0x40]
 1007537:	mov    rdx,rdi
 100753a:	mov    rcx,rsi
 100753d:	add    r8,0x4
 1007541:	call   0x1007590
 1007546:	mov    ecx,0x84b
 100754b:	test   eax,eax
 100754d:	cmovs  ebx,ecx
 1007550:	mov    rcx,QWORD PTR [rsp+0x40]
 1007555:	call   0x100a2bc
 100755a:	test   ebx,ebx
 100755c:	jg     0x1007570
 100755e:	mov    eax,ebx
 1007560:	mov    rbx,QWORD PTR [rsp+0x30]
 1007565:	mov    rsi,QWORD PTR [rsp+0x38]
 100756a:	add    rsp,0x20
 100756e:	pop    rdi
 100756f:	ret    
 1007570:	mov    rsi,QWORD PTR [rsp+0x38]
 1007575:	movzx  eax,bx
 1007578:	mov    rbx,QWORD PTR [rsp+0x30]
 100757d:	or     eax,0x80070000
 1007582:	add    rsp,0x20
 1007586:	pop    rdi
 1007587:	ret    
 1007588:	int3   
 1007589:	int3   
 100758a:	int3   
 100758b:	int3   
 100758c:	int3   
 100758d:	int3   
 100758e:	int3   
 100758f:	int3   
 1007590:	xor    r11d,r11d
 1007593:	mov    eax,r11d
 1007596:	test   rdx,rdx
 1007599:	je     0x10075a4
 100759b:	cmp    rdx,0x7fffffff
 10075a2:	jbe    0x10075a9
 10075a4:	mov    eax,0x80070057
 10075a9:	test   eax,eax
 10075ab:	js     0x1007608
 10075ad:	mov    r10d,r11d
 10075b0:	test   rdx,rdx
 10075b3:	je     0x10075f7
 10075b5:	mov    r9d,0x7ffffffe
 10075bb:	sub    r9,rdx
 10075be:	sub    r8,rcx
 10075c1:	lea    rax,[r9+rdx*1]
 10075c5:	test   rax,rax
 10075c8:	je     0x10075f2
 10075ca:	movzx  eax,WORD PTR [r8+rcx*1]
 10075cf:	test   ax,ax
 10075d2:	je     0x10075f2
 10075d4:	mov    WORD PTR [rcx],ax
 10075d7:	add    rcx,0x2
 10075db:	dec    rdx
 10075de:	jne    0x10075c1
 10075e0:	sub    rcx,0x2
 10075e4:	mov    r10d,0x8007007a
 10075ea:	mov    WORD PTR [rcx],r11w
 10075ee:	mov    eax,r10d
 10075f1:	ret    
 10075f2:	test   rdx,rdx
 10075f5:	jne    0x1007601
 10075f7:	sub    rcx,0x2
 10075fb:	mov    r10d,0x8007007a
 1007601:	mov    WORD PTR [rcx],r11w
 1007605:	mov    eax,r10d
 1007608:	repz ret 
 100760a:	int3   
 100760b:	int3   
 100760c:	int3   
 100760d:	int3   
 100760e:	int3   
 100760f:	int3   
 1007610:	mov    QWORD PTR [rsp+0x18],r8
 1007615:	mov    QWORD PTR [rsp+0x20],r9
 100761a:	push   rbx
 100761b:	push   rsi
 100761c:	sub    rsp,0x28
 1007620:	xor    ebx,ebx
 1007622:	mov    rsi,rcx
 1007625:	mov    eax,ebx
 1007627:	test   rdx,rdx
 100762a:	je     0x1007635
 100762c:	cmp    rdx,0x7fffffff
 1007633:	jbe    0x100763a
 1007635:	mov    eax,0x80070057
 100763a:	test   eax,eax
 100763c:	js     0x1007684
 100763e:	mov    QWORD PTR [rsp+0x20],rdi
 1007643:	lea    rdi,[rdx-0x1]
 1007647:	lea    r9,[rsp+0x58]
 100764c:	mov    rdx,rdi
 100764f:	call   QWORD PTR [rip+0xffffffffffff9c5b]        # 0x10012b0
 1007655:	test   eax,eax
 1007657:	js     0x1007674
 1007659:	cdqe   
 100765b:	cmp    rax,rdi
 100765e:	ja     0x1007674
 1007660:	jne    0x100767d
 1007662:	mov    WORD PTR [rsi+rdi*2],bx
 1007666:	mov    rdi,QWORD PTR [rsp+0x20]
 100766b:	mov    eax,ebx
 100766d:	add    rsp,0x28
 1007671:	pop    rsi
 1007672:	pop    rbx
 1007673:	ret    
 1007674:	mov    WORD PTR [rsi+rdi*2],bx
 1007678:	mov    ebx,0x8007007a
 100767d:	mov    rdi,QWORD PTR [rsp+0x20]
 1007682:	mov    eax,ebx
 1007684:	add    rsp,0x28
 1007688:	pop    rsi
 1007689:	pop    rbx
 100768a:	ret    
 100768b:	int3   
 100768c:	int3   
 100768d:	int3   
 100768e:	int3   
 100768f:	int3   
 1007690:	int3   
 1007691:	int3   
 1007692:	int3   
 1007693:	int3   
 1007694:	int3   
 1007695:	int3   
 1007696:	int3   
 1007697:	int3   
 1007698:	int3   
 1007699:	int3   
 100769a:	int3   
 100769b:	int3   
 100769c:	int3   
 100769d:	int3   
 100769e:	int3   
 100769f:	int3   
 10076a0:	rex push rbx
 10076a2:	push   rbp
 10076a3:	push   rsi
 10076a4:	push   rdi
 10076a5:	sub    rsp,0x278
 10076ac:	mov    rax,QWORD PTR [rip+0x811d]        # 0x100f7d0
 10076b3:	xor    rax,rsp
 10076b6:	mov    QWORD PTR [rsp+0x260],rax
 10076be:	mov    QWORD PTR [rsp+0x30],0x0
 10076c7:	mov    DWORD PTR [rsp+0x28],0x1
 10076cf:	mov    rbx,r9
 10076d2:	mov    QWORD PTR [rsp+0x20],r8
 10076d7:	mov    rdi,r8
 10076da:	mov    esi,edx
 10076dc:	cmp    edx,0x1
 10076df:	mov    rbp,rcx
 10076e2:	mov    r9d,0x1
 10076e8:	mov    r8d,0x104
 10076ee:	lea    rdx,[rsp+0x50]
 10076f3:	je     0x10076fb
 10076f5:	mov    r9d,0x2
 10076fb:	call   0x1003d90
 1007700:	test   eax,eax
 1007702:	js     0x1007769
 1007704:	lea    r8,[rsp+0x40]
 1007709:	lea    rdx,[rip+0xffffffffffffb0b0]        # 0x10027c0
 1007710:	lea    rcx,[rsp+0x50]
 1007715:	call   QWORD PTR [rip+0x876d]        # 0x100fe88
 100771b:	test   eax,eax
 100771d:	js     0x1007769
 100771f:	mov    rcx,QWORD PTR [rsp+0x40]
 1007724:	mov    rdx,rdi
 1007727:	cmp    esi,0x1
 100772a:	jne    0x1007736
 100772c:	mov    r8,rbx
 100772f:	call   0x1007b80
 1007734:	jmp    0x100773b
 1007736:	call   0x1007df0
 100773b:	mov    ebx,eax
 100773d:	test   eax,eax
 100773f:	jns    0x100775c
 1007741:	cmp    bx,0x1392
 1007746:	jne    0x100775c
 1007748:	cmp    esi,0x1
 100774b:	jne    0x100775c
 100774d:	mov    r8,rdi
 1007750:	mov    edx,esi
 1007752:	mov    rcx,rbp
 1007755:	call   0x1007790
 100775a:	mov    ebx,eax
 100775c:	mov    rcx,QWORD PTR [rsp+0x40]
 1007761:	mov    rax,QWORD PTR [rcx]
 1007764:	call   QWORD PTR [rax+0x10]
 1007767:	mov    eax,ebx
 1007769:	mov    rcx,QWORD PTR [rsp+0x260]
 1007771:	xor    rcx,rsp
 1007774:	call   0x1009d30
 1007779:	add    rsp,0x278
 1007780:	pop    rdi
 1007781:	pop    rsi
 1007782:	pop    rbp
 1007783:	pop    rbx
 1007784:	ret    
 1007785:	int3   
 1007786:	int3   
 1007787:	int3   
 1007788:	int3   
 1007789:	int3   
 100778a:	int3   
 100778b:	int3   
 100778c:	int3   
 100778d:	int3   
 100778e:	int3   
 100778f:	int3   
 1007790:	rex push rbp
 1007792:	push   rsi
 1007793:	push   rdi
 1007794:	lea    rbp,[rsp-0x4820]
 100779c:	mov    eax,0x4920
 10077a1:	call   0x1009cd0
 10077a6:	sub    rsp,rax
 10077a9:	mov    rax,QWORD PTR [rip+0x8020]        # 0x100f7d0
 10077b0:	xor    rax,rsp
 10077b3:	mov    QWORD PTR [rbp+0x4810],rax
 10077ba:	xor    eax,eax
 10077bc:	mov    esi,edx
 10077be:	xor    edx,edx
 10077c0:	mov    QWORD PTR [rbp+0x45b2],rax
 10077c7:	mov    QWORD PTR [rbp+0x45ba],rax
 10077ce:	mov    QWORD PTR [rbp+0x45c2],rax
 10077d5:	mov    QWORD PTR [rbp+0x45ca],rax
 10077dc:	mov    QWORD PTR [rbp+0x45d2],rax
 10077e3:	mov    QWORD PTR [rbp+0x45da],rax
 10077ea:	mov    QWORD PTR [rbp+0x45e2],rax
 10077f1:	mov    QWORD PTR [rbp+0x45ea],rax
 10077f8:	mov    QWORD PTR [rbp+0x45f2],rax
 10077ff:	mov    DWORD PTR [rbp+0x45fa],eax
 1007805:	mov    WORD PTR [rbp+0x45fe],ax
 100780c:	lea    rax,[rsp+0x30]
 1007811:	mov    QWORD PTR [rsp+0x38],rdx
 1007816:	mov    DWORD PTR [rsp+0x30],edx
 100781a:	mov    QWORD PTR [rsp+0x40],rdx
 100781f:	mov    WORD PTR [rbp+0x45b0],dx
 1007826:	mov    QWORD PTR [rsp+0x48],rdx
 100782b:	mov    QWORD PTR [rsp+0x50],rdx
 1007830:	mov    QWORD PTR [rsp+0x28],rax
 1007835:	mov    rdi,r8
 1007838:	mov    QWORD PTR [rsp+0x20],r8
 100783d:	lea    rdx,[rbp+0x4600]
 1007844:	mov    r8d,0x104
 100784a:	mov    r9d,esi
 100784d:	call   0x1004250
 1007852:	test   eax,eax
 1007854:	js     0x1007a03
 100785a:	lea    r8,[rsp+0x38]
 100785f:	lea    rdx,[rip+0xffffffffffffaf5a]        # 0x10027c0
 1007866:	lea    rcx,[rbp+0x4600]
 100786d:	mov    QWORD PTR [rsp+0x4958],rbx
 1007875:	call   QWORD PTR [rip+0x860d]        # 0x100fe88
 100787b:	mov    ebx,eax
 100787d:	test   eax,eax
 100787f:	js     0x10079b9
 1007885:	lea    rcx,[rsp+0x60]
 100788a:	mov    rdx,rdi
 100788d:	call   0x1005670
 1007892:	mov    ebx,eax
 1007894:	test   eax,eax
 1007896:	jne    0x10079b9
 100789c:	cmp    esi,0x1
 100789f:	jne    0x10078ae
 10078a1:	lea    rdx,[rsp+0x60]
 10078a6:	mov    rcx,rdi
 10078a9:	call   0x10048d0
 10078ae:	mov    rcx,QWORD PTR [rsp+0x38]
 10078b3:	mov    DWORD PTR [rsp+0x58],0xc
 10078bb:	lea    r9,[rsp+0x58]
 10078c0:	mov    rax,QWORD PTR [rcx]
 10078c3:	lea    rdx,[rip+0x6ae6]        # 0x100e3b0
 10078ca:	mov    r8d,0xc
 10078d0:	call   QWORD PTR [rax+0x28]
 10078d3:	test   eax,eax
 10078d5:	js     0x10079b7
 10078db:	cmp    DWORD PTR [rsp+0x30],0x0
 10078e0:	je     0x10079b9
 10078e6:	mov    rcx,QWORD PTR [rsp+0x38]
 10078eb:	lea    r8,[rsp+0x48]
 10078f0:	lea    rdx,[rip+0xffffffffffffaea9]        # 0x10027a0
 10078f7:	mov    rax,QWORD PTR [rcx]
 10078fa:	call   QWORD PTR [rax]
 10078fc:	mov    ebx,eax
 10078fe:	test   eax,eax
 1007900:	js     0x10079b9
 1007906:	mov    rcx,QWORD PTR [rsp+0x48]
 100790b:	lea    rdx,[rsp+0x50]
 1007910:	mov    rax,QWORD PTR [rcx]
 1007913:	call   QWORD PTR [rax+0x48]
 1007916:	mov    ebx,eax
 1007918:	test   eax,eax
 100791a:	jne    0x10079b9
 1007920:	mov    r8,QWORD PTR [rsp+0x50]
 1007925:	test   r8,r8
 1007928:	je     0x100793a
 100792a:	lea    edx,[rax+0x28]
 100792d:	lea    rcx,[rbp+0x45b0]
 1007934:	call   QWORD PTR [rip+0xffffffffffff9956]        # 0x1001290
 100793a:	mov    rdx,rdi
 100793d:	mov    ecx,0x2
 1007942:	call   0x1004480
 1007947:	lea    rax,[rsp+0x40]
 100794c:	lea    rdx,[rdi+0x618]
 1007953:	mov    r9d,0x2
 1007959:	xor    r8d,r8d
 100795c:	mov    rcx,0xffffffff80000002
 1007963:	mov    QWORD PTR [rsp+0x20],rax
 1007968:	call   QWORD PTR [rip+0xffffffffffff969a]        # 0x1001008
 100796e:	mov    ebx,eax
 1007970:	test   eax,eax
 1007972:	jne    0x10079b9
 1007974:	lea    rcx,[rbp+0x45b0]
 100797b:	or     rax,0xffffffffffffffff
 100797f:	nop
 1007980:	inc    rax
 1007983:	cmp    WORD PTR [rcx+rax*2],0x0
 1007988:	jne    0x1007980
 100798a:	mov    rcx,QWORD PTR [rsp+0x40]
 100798f:	add    eax,eax
 1007991:	lea    rdx,[rip+0xffffffffffff9e78]        # 0x1001810
 1007998:	mov    DWORD PTR [rsp+0x28],eax
 100799c:	lea    rax,[rbp+0x45b0]
 10079a3:	mov    r9d,0x1
 10079a9:	xor    r8d,r8d
 10079ac:	mov    QWORD PTR [rsp+0x20],rax
 10079b1:	call   QWORD PTR [rip+0xffffffffffff9689]        # 0x1001040
 10079b7:	mov    ebx,eax
 10079b9:	mov    rcx,QWORD PTR [rsp+0x50]
 10079be:	test   rcx,rcx
 10079c1:	je     0x10079c9
 10079c3:	call   QWORD PTR [rip+0xffffffffffff995f]        # 0x1001328
 10079c9:	mov    rcx,QWORD PTR [rsp+0x40]
 10079ce:	test   rcx,rcx
 10079d1:	je     0x10079d9
 10079d3:	call   QWORD PTR [rip+0xffffffffffff9627]        # 0x1001000
 10079d9:	mov    rcx,QWORD PTR [rsp+0x48]
 10079de:	test   rcx,rcx
 10079e1:	je     0x10079e9
 10079e3:	mov    rax,QWORD PTR [rcx]
 10079e6:	call   QWORD PTR [rax+0x10]
 10079e9:	mov    rcx,QWORD PTR [rsp+0x38]
 10079ee:	test   rcx,rcx
 10079f1:	je     0x10079f9
 10079f3:	mov    rax,QWORD PTR [rcx]
 10079f6:	call   QWORD PTR [rax+0x10]
 10079f9:	mov    eax,ebx
 10079fb:	mov    rbx,QWORD PTR [rsp+0x4958]
 1007a03:	mov    rcx,QWORD PTR [rbp+0x4810]
 1007a0a:	xor    rcx,rsp
 1007a0d:	call   0x1009d30
 1007a12:	add    rsp,0x4920
 1007a19:	pop    rdi
 1007a1a:	pop    rsi
 1007a1b:	pop    rbp
 1007a1c:	ret    
 1007a1d:	int3   
 1007a1e:	int3   
 1007a1f:	int3   
 1007a20:	int3   
 1007a21:	int3   
 1007a22:	int3   
 1007a23:	int3   
 1007a24:	int3   
 1007a25:	int3   
 1007a26:	int3   
 1007a27:	int3   
 1007a28:	int3   
 1007a29:	int3   
 1007a2a:	int3   
 1007a2b:	int3   
 1007a2c:	int3   
 1007a2d:	int3   
 1007a2e:	int3   
 1007a2f:	int3   
 1007a30:	rex push rbx
 1007a32:	push   rsi
 1007a33:	push   rdi
 1007a34:	sub    rsp,0x270
 1007a3b:	mov    rax,QWORD PTR [rip+0x7d8e]        # 0x100f7d0
 1007a42:	xor    rax,rsp
 1007a45:	mov    QWORD PTR [rsp+0x260],rax
 1007a4d:	mov    esi,edx
 1007a4f:	mov    r9d,edx
 1007a52:	mov    rdi,r8
 1007a55:	lea    rdx,[rsp+0x50]
 1007a5a:	mov    QWORD PTR [rsp+0x28],0x0
 1007a63:	mov    QWORD PTR [rsp+0x20],r8
 1007a68:	mov    r8d,0x104
 1007a6e:	mov    QWORD PTR [rsp+0x30],0x0
 1007a77:	mov    QWORD PTR [rsp+0x38],0x0
 1007a80:	call   0x1004250
 1007a85:	mov    ebx,eax
 1007a87:	test   eax,eax
 1007a89:	jns    0x1007a9c
 1007a8b:	cmp    ax,0x2030
 1007a8f:	jne    0x1007b3d
 1007a95:	xor    ebx,ebx
 1007a97:	jmp    0x1007b3d
 1007a9c:	lea    r8,[rsp+0x30]
 1007aa1:	lea    rdx,[rip+0xffffffffffffacf8]        # 0x10027a0
 1007aa8:	lea    rcx,[rsp+0x50]
 1007aad:	call   QWORD PTR [rip+0x83d5]        # 0x100fe88
 1007ab3:	mov    ebx,eax
 1007ab5:	test   eax,eax
 1007ab7:	jns    0x1007ac3
 1007ab9:	cmp    ax,0x2030
 1007abd:	jne    0x1007b3d
 1007abf:	xor    ebx,ebx
 1007ac1:	jmp    0x1007b3d
 1007ac3:	mov    rcx,QWORD PTR [rsp+0x30]
 1007ac8:	lea    rdx,[rsp+0x40]
 1007acd:	mov    rax,QWORD PTR [rcx]
 1007ad0:	call   QWORD PTR [rax+0x58]
 1007ad3:	mov    rcx,QWORD PTR [rsp+0x30]
 1007ad8:	lea    rdx,[rsp+0x48]
 1007add:	mov    rax,QWORD PTR [rcx]
 1007ae0:	call   QWORD PTR [rax+0x38]
 1007ae3:	mov    rcx,QWORD PTR [rsp+0x40]
 1007ae8:	lea    r8,[rsp+0x38]
 1007aed:	lea    rdx,[rip+0xffffffffffffacbc]        # 0x10027b0
 1007af4:	call   QWORD PTR [rip+0x838e]        # 0x100fe88
 1007afa:	mov    ebx,eax
 1007afc:	test   eax,eax
 1007afe:	js     0x1007b3d
 1007b00:	lea    rbx,[rdi+0x208]
 1007b07:	mov    edx,0x104
 1007b0c:	lea    r8,[rip+0xffffffffffff9dd5]        # 0x10018e8
 1007b13:	mov    rcx,rbx
 1007b16:	cmp    esi,0x1
 1007b19:	je     0x1007b22
 1007b1b:	lea    r8,[rip+0xffffffffffffa6d6]        # 0x10021f8
 1007b22:	call   QWORD PTR [rip+0xffffffffffff9768]        # 0x1001290
 1007b28:	mov    rcx,QWORD PTR [rsp+0x38]
 1007b2d:	mov    r8,QWORD PTR [rsp+0x48]
 1007b32:	mov    rax,QWORD PTR [rcx]
 1007b35:	mov    rdx,rbx
 1007b38:	call   QWORD PTR [rax+0x78]
 1007b3b:	mov    ebx,eax
 1007b3d:	mov    rcx,QWORD PTR [rsp+0x38]
 1007b42:	test   rcx,rcx
 1007b45:	je     0x1007b4d
 1007b47:	mov    rax,QWORD PTR [rcx]
 1007b4a:	call   QWORD PTR [rax+0x10]
 1007b4d:	mov    rcx,QWORD PTR [rsp+0x30]
 1007b52:	test   rcx,rcx
 1007b55:	je     0x1007b5d
 1007b57:	mov    rax,QWORD PTR [rcx]
 1007b5a:	call   QWORD PTR [rax+0x10]
 1007b5d:	mov    eax,ebx
 1007b5f:	mov    rcx,QWORD PTR [rsp+0x260]
 1007b67:	xor    rcx,rsp
 1007b6a:	call   0x1009d30
 1007b6f:	add    rsp,0x270
 1007b76:	pop    rdi
 1007b77:	pop    rsi
 1007b78:	pop    rbx
 1007b79:	ret    
 1007b7a:	int3   
 1007b7b:	int3   
 1007b7c:	int3   
 1007b7d:	int3   
 1007b7e:	int3   
 1007b7f:	int3   
 1007b80:	rex push rbp
 1007b82:	push   rbx
 1007b83:	push   rsi
 1007b84:	push   rdi
 1007b85:	push   r14
 1007b87:	lea    rbp,[rsp-0x4620]
 1007b8f:	mov    eax,0x4720
 1007b94:	call   0x1009cd0
 1007b99:	sub    rsp,rax
 1007b9c:	mov    rax,QWORD PTR [rip+0x7c2d]        # 0x100f7d0
 1007ba3:	xor    rax,rsp
 1007ba6:	mov    QWORD PTR [rbp+0x4610],rax
 1007bad:	xor    eax,eax
 1007baf:	xor    r14d,r14d
 1007bb2:	mov    rbx,rcx
 1007bb5:	lea    ecx,[rax+0x2]
 1007bb8:	mov    rsi,r8
 1007bbb:	mov    rdi,rdx
 1007bbe:	mov    QWORD PTR [rsp+0x58],r14
 1007bc3:	mov    QWORD PTR [rsp+0x50],r14
 1007bc8:	mov    QWORD PTR [rsp+0x68],r14
 1007bcd:	mov    WORD PTR [rbp+0x45c0],r14w
 1007bd5:	mov    QWORD PTR [rbp+0x45c2],rax
 1007bdc:	mov    QWORD PTR [rbp+0x45ca],rax
 1007be3:	mov    QWORD PTR [rbp+0x45d2],rax
 1007bea:	mov    QWORD PTR [rbp+0x45da],rax
 1007bf1:	mov    QWORD PTR [rbp+0x45e2],rax
 1007bf8:	mov    QWORD PTR [rbp+0x45ea],rax
 1007bff:	mov    QWORD PTR [rbp+0x45f2],rax
 1007c06:	mov    QWORD PTR [rbp+0x45fa],rax
 1007c0d:	mov    QWORD PTR [rbp+0x4602],rax
 1007c14:	mov    DWORD PTR [rbp+0x460a],eax
 1007c1a:	mov    WORD PTR [rbp+0x460e],ax
 1007c21:	mov    QWORD PTR [rsp+0x60],r14
 1007c26:	call   0x1004dc0
 1007c2b:	lea    rcx,[rsp+0x70]
 1007c30:	mov    rdx,rdi
 1007c33:	call   0x1005670
 1007c38:	test   eax,eax
 1007c3a:	jne    0x1007dcb
 1007c40:	lea    rdx,[rsp+0x70]
 1007c45:	mov    rcx,rdi
 1007c48:	call   0x10048d0
 1007c4d:	mov    r11,QWORD PTR [rbx]
 1007c50:	lea    rax,[rsp+0x58]
 1007c55:	lea    rdx,[rdi+0x410]
 1007c5c:	lea    r9d,[r14+0xe]
 1007c60:	lea    r8,[rip+0x6589]        # 0x100e1f0
 1007c67:	mov    rcx,rbx
 1007c6a:	mov    QWORD PTR [rsp+0x20],rax
 1007c6f:	call   QWORD PTR [r11+0x30]
 1007c73:	mov    ebx,eax
 1007c75:	test   eax,eax
 1007c77:	js     0x1007d00
 1007c7d:	mov    rcx,QWORD PTR [rsp+0x58]
 1007c82:	lea    r8,[rsp+0x50]
 1007c87:	lea    rdx,[rip+0xffffffffffffab12]        # 0x10027a0
 1007c8e:	mov    rax,QWORD PTR [rcx]
 1007c91:	call   QWORD PTR [rax]
 1007c93:	mov    ebx,eax
 1007c95:	test   eax,eax
 1007c97:	js     0x1007d00
 1007c99:	mov    rcx,QWORD PTR [rsp+0x50]
 1007c9e:	mov    QWORD PTR [rsp+0x40],r14
 1007ca3:	mov    DWORD PTR [rsp+0x38],0x1
 1007cab:	mov    QWORD PTR [rsp+0x30],rsi
 1007cb0:	xor    r9d,r9d
 1007cb3:	xor    r8d,r8d
 1007cb6:	mov    edx,0x40030
 1007cbb:	mov    QWORD PTR [rsp+0x28],r14
 1007cc0:	mov    QWORD PTR [rsp+0x20],r14
 1007cc5:	call   0x10066a0
 1007cca:	mov    ebx,eax
 1007ccc:	test   eax,eax
 1007cce:	jne    0x1007d00
 1007cd0:	mov    rcx,QWORD PTR [rsp+0x50]
 1007cd5:	lea    rdx,[rsp+0x68]
 1007cda:	mov    rax,QWORD PTR [rcx]
 1007cdd:	call   QWORD PTR [rax+0x48]
 1007ce0:	mov    ebx,eax
 1007ce2:	test   eax,eax
 1007ce4:	jne    0x1007d00
 1007ce6:	mov    r8,QWORD PTR [rsp+0x68]
 1007ceb:	test   r8,r8
 1007cee:	je     0x1007d10
 1007cf0:	lea    edx,[rax+0x28]
 1007cf3:	lea    rcx,[rbp+0x45c0]
 1007cfa:	call   QWORD PTR [rip+0xffffffffffff9590]        # 0x1001290
 1007d00:	mov    rcx,QWORD PTR [rsp+0x68]
 1007d05:	test   rcx,rcx
 1007d08:	je     0x1007d10
 1007d0a:	call   QWORD PTR [rip+0xffffffffffff9618]        # 0x1001328
 1007d10:	mov    rcx,QWORD PTR [rsp+0x50]
 1007d15:	test   rcx,rcx
 1007d18:	je     0x1007d20
 1007d1a:	mov    rax,QWORD PTR [rcx]
 1007d1d:	call   QWORD PTR [rax+0x10]
 1007d20:	mov    rcx,QWORD PTR [rsp+0x58]
 1007d25:	test   rcx,rcx
 1007d28:	je     0x1007d30
 1007d2a:	mov    rax,QWORD PTR [rcx]
 1007d2d:	call   QWORD PTR [rax+0x10]
 1007d30:	test   ebx,ebx
 1007d32:	jne    0x1007dc9
 1007d38:	lea    ecx,[rbx+0x2]
 1007d3b:	mov    rdx,rdi
 1007d3e:	call   0x1004480
 1007d43:	lea    rax,[rsp+0x60]
 1007d48:	lea    rdx,[rdi+0x618]
 1007d4f:	lea    r9d,[rbx+0x2]
 1007d53:	xor    r8d,r8d
 1007d56:	mov    rcx,0xffffffff80000002
 1007d5d:	mov    QWORD PTR [rsp+0x20],rax
 1007d62:	call   QWORD PTR [rip+0xffffffffffff92a0]        # 0x1001008
 1007d68:	mov    ebx,eax
 1007d6a:	test   eax,eax
 1007d6c:	jne    0x1007db9
 1007d6e:	lea    rcx,[rbp+0x45c0]
 1007d75:	or     rax,0xffffffffffffffff
 1007d79:	nop    DWORD PTR [rax+0x0]
 1007d80:	inc    rax
 1007d83:	cmp    WORD PTR [rcx+rax*2],r14w
 1007d88:	jne    0x1007d80
 1007d8a:	mov    rcx,QWORD PTR [rsp+0x60]
 1007d8f:	add    eax,eax
 1007d91:	lea    rdx,[rip+0xffffffffffff9a78]        # 0x1001810
 1007d98:	mov    DWORD PTR [rsp+0x28],eax
 1007d9c:	lea    rax,[rbp+0x45c0]
 1007da3:	mov    r9d,0x1
 1007da9:	xor    r8d,r8d
 1007dac:	mov    QWORD PTR [rsp+0x20],rax
 1007db1:	call   QWORD PTR [rip+0xffffffffffff9289]        # 0x1001040
 1007db7:	mov    ebx,eax
 1007db9:	mov    rcx,QWORD PTR [rsp+0x60]
 1007dbe:	test   rcx,rcx
 1007dc1:	je     0x1007dc9
 1007dc3:	call   QWORD PTR [rip+0xffffffffffff9237]        # 0x1001000
 1007dc9:	mov    eax,ebx
 1007dcb:	mov    rcx,QWORD PTR [rbp+0x4610]
 1007dd2:	xor    rcx,rsp
 1007dd5:	call   0x1009d30
 1007dda:	add    rsp,0x4720
 1007de1:	pop    r14
 1007de3:	pop    rdi
 1007de4:	pop    rsi
 1007de5:	pop    rbx
 1007de6:	pop    rbp
 1007de7:	ret    
 1007de8:	int3   
 1007de9:	int3   
 1007dea:	int3   
 1007deb:	int3   
 1007dec:	int3   
 1007ded:	int3   
 1007dee:	int3   
 1007def:	int3   
 1007df0:	mov    QWORD PTR [rsp+0x10],rbx
 1007df5:	mov    QWORD PTR [rsp+0x18],rsi
 1007dfa:	mov    QWORD PTR [rsp+0x20],rdi
 1007dff:	push   r14
 1007e01:	sub    rsp,0x30
 1007e05:	lea    rsi,[rdx+0x410]
 1007e0c:	mov    rdi,rdx
 1007e0f:	mov    r14,rcx
 1007e12:	lea    r8,[rip+0xffffffffffffa407]        # 0x1002220
 1007e19:	mov    edx,0x104
 1007e1e:	mov    rcx,rsi
 1007e21:	call   QWORD PTR [rip+0xffffffffffff9469]        # 0x1001290
 1007e27:	mov    r11d,0x104
 1007e2d:	mov    rax,rsi
 1007e30:	xor    ebx,ebx
 1007e32:	cmp    WORD PTR [rax],bx
 1007e35:	je     0x1007e42
 1007e37:	add    rax,0x2
 1007e3b:	dec    r11
 1007e3e:	jne    0x1007e30
 1007e40:	jmp    0x1007e9f
 1007e42:	test   r11,r11
 1007e45:	je     0x1007e9f
 1007e47:	mov    edx,0x104
 1007e4c:	mov    ecx,0x104
 1007e51:	lea    r9,[rdi+0xa28]
 1007e58:	sub    rdx,r11
 1007e5b:	lea    rax,[rsi+rdx*2]
 1007e5f:	sub    rcx,rdx
 1007e62:	je     0x1007e98
 1007e64:	add    rdx,0x7ffffefb
 1007e6b:	add    rdx,rcx
 1007e6e:	sub    r9,rax
 1007e71:	test   rdx,rdx
 1007e74:	je     0x1007e93
 1007e76:	movzx  r8d,WORD PTR [r9+rax*1]
 1007e7b:	test   r8w,r8w
 1007e7f:	je     0x1007e93
 1007e81:	mov    WORD PTR [rax],r8w
 1007e85:	add    rax,0x2
 1007e89:	dec    rdx
 1007e8c:	dec    rcx
 1007e8f:	jne    0x1007e71
 1007e91:	jmp    0x1007e98
 1007e93:	test   rcx,rcx
 1007e96:	jne    0x1007e9c
 1007e98:	sub    rax,0x2
 1007e9c:	mov    WORD PTR [rax],bx
 1007e9f:	lea    r8,[rip+0xffffffffffffa38a]        # 0x1002230
 1007ea6:	mov    edx,0x104
 1007eab:	mov    rcx,rdi
 1007eae:	call   QWORD PTR [rip+0xffffffffffff93dc]        # 0x1001290
 1007eb4:	mov    r11d,0x104
 1007eba:	mov    rax,rdi
 1007ebd:	nop    DWORD PTR [rax]
 1007ec0:	cmp    WORD PTR [rax],bx
 1007ec3:	je     0x1007ed0
 1007ec5:	add    rax,0x2
 1007ec9:	dec    r11
 1007ecc:	jne    0x1007ec0
 1007ece:	jmp    0x1007f2e
 1007ed0:	test   r11,r11
 1007ed3:	je     0x1007f2e
 1007ed5:	mov    edx,0x104
 1007eda:	mov    ecx,0x104
 1007edf:	lea    r9,[rdi+0xa28]
 1007ee6:	sub    rdx,r11
 1007ee9:	lea    rax,[rdi+rdx*2]
 1007eed:	sub    rcx,rdx
 1007ef0:	je     0x1007f27
 1007ef2:	add    rdx,0x7ffffefb
 1007ef9:	add    rdx,rcx
 1007efc:	sub    r9,rax
 1007eff:	nop
 1007f00:	test   rdx,rdx
 1007f03:	je     0x1007f22
 1007f05:	movzx  r8d,WORD PTR [r9+rax*1]
 1007f0a:	test   r8w,r8w
 1007f0e:	je     0x1007f22
 1007f10:	mov    WORD PTR [rax],r8w
 1007f14:	add    rax,0x2
 1007f18:	dec    rdx
 1007f1b:	dec    rcx
 1007f1e:	jne    0x1007f00
 1007f20:	jmp    0x1007f27
 1007f22:	test   rcx,rcx
 1007f25:	jne    0x1007f2b
 1007f27:	sub    rax,0x2
 1007f2b:	mov    WORD PTR [rax],bx
 1007f2e:	lea    rbx,[rdi+0x208]
 1007f35:	lea    r8,[rip+0xffffffffffffa2bc]        # 0x10021f8
 1007f3c:	mov    edx,0x104
 1007f41:	mov    rcx,rbx
 1007f44:	call   QWORD PTR [rip+0xffffffffffff9346]        # 0x1001290
 1007f4a:	lea    rax,[rip+0xffffffffffffa2ef]        # 0x1002240
 1007f51:	lea    rcx,[rsp+0x40]
 1007f56:	mov    QWORD PTR [rip+0x7a0b],rax        # 0x100f968
 1007f5d:	lea    rax,[rip+0xffffffffffffa304]        # 0x1002268
 1007f64:	mov    DWORD PTR [rip+0x78d2],0x3        # 0x100f840
 1007f6e:	mov    QWORD PTR [rip+0x7a23],rax        # 0x100f998
 1007f75:	lea    rax,[rip+0xffffffffffffa31c]        # 0x1002298
 1007f7c:	mov    QWORD PTR [rip+0x78c5],rdi        # 0x100f848
 1007f83:	mov    QWORD PTR [rip+0x7e2e],rax        # 0x100fdb8
 1007f8a:	lea    rax,[rip+0xffffffffffffa317]        # 0x10022a8
 1007f91:	mov    DWORD PTR [rip+0x78bd],0x3        # 0x100f858
 1007f9b:	mov    QWORD PTR [rip+0x7e2e],rax        # 0x100fdd0
 1007fa2:	lea    rax,[rip+0xffffffffffffa30f]        # 0x10022b8
 1007fa9:	mov    QWORD PTR [rip+0x78b0],rbx        # 0x100f860
 1007fb0:	mov    DWORD PTR [rip+0x79a6],0x3        # 0x100f960
 1007fba:	mov    DWORD PTR [rip+0x79cc],0x3        # 0x100f990
 1007fc4:	mov    DWORD PTR [rip+0x7de2],0x3        # 0x100fdb0
 1007fce:	mov    QWORD PTR [rip+0x7e13],rax        # 0x100fde8
 1007fd5:	mov    DWORD PTR [rip+0x7de9],0x3        # 0x100fdc8
 1007fdf:	mov    DWORD PTR [rip+0x7df7],0x3        # 0x100fde0
 1007fe9:	mov    rax,QWORD PTR [r14]
 1007fec:	mov    QWORD PTR [rsp+0x20],rcx
 1007ff1:	lea    r8,[rip+0x6538]        # 0x100e530
 1007ff8:	mov    r9d,0xf
 1007ffe:	mov    rdx,rsi
 1008001:	mov    rcx,r14
 1008004:	call   QWORD PTR [rax+0x30]
 1008007:	mov    ebx,eax
 1008009:	test   eax,eax
 100800b:	js     0x100801a
 100800d:	mov    rcx,QWORD PTR [rsp+0x40]
 1008012:	mov    rax,QWORD PTR [rcx]
 1008015:	call   QWORD PTR [rax+0x10]
 1008018:	mov    eax,ebx
 100801a:	mov    rbx,QWORD PTR [rsp+0x48]
 100801f:	mov    rsi,QWORD PTR [rsp+0x50]
 1008024:	mov    rdi,QWORD PTR [rsp+0x58]
 1008029:	add    rsp,0x30
 100802d:	pop    r14
 100802f:	ret    
 1008030:	int3   
 1008031:	int3   
 1008032:	int3   
 1008033:	int3   
 1008034:	int3   
 1008035:	int3   
 1008036:	int3   
 1008037:	int3   
 1008038:	int3   
 1008039:	int3   
 100803a:	int3   
 100803b:	int3   
 100803c:	int3   
 100803d:	int3   
 100803e:	int3   
 100803f:	int3   
 1008040:	rex push rbx
 1008042:	sub    rsp,0x7b0
 1008049:	mov    rax,QWORD PTR [rip+0x7780]        # 0x100f7d0
 1008050:	xor    rax,rsp
 1008053:	mov    QWORD PTR [rsp+0x7a0],rax
 100805b:	mov    rbx,r8
 100805e:	mov    QWORD PTR [rsp+0x30],0x0
 1008067:	lea    rdx,[rsp+0x590]
 100806f:	mov    r9d,0x1
 1008075:	mov    r8d,0x104
 100807b:	mov    DWORD PTR [rsp+0x28],0x1
 1008083:	mov    QWORD PTR [rsp+0x20],rbx
 1008088:	call   0x1003d90
 100808d:	test   eax,eax
 100808f:	js     0x1008132
 1008095:	lea    r8,[rsp+0x40]
 100809a:	lea    rdx,[rip+0xffffffffffffa71f]        # 0x10027c0
 10080a1:	lea    rcx,[rsp+0x590]
 10080a9:	call   QWORD PTR [rip+0x7dd9]        # 0x100fe88
 10080af:	test   eax,eax
 10080b1:	js     0x1008132
 10080b3:	mov    rdx,rbx
 10080b6:	mov    ecx,0x3
 10080bb:	call   0x1004dc0
 10080c0:	lea    rcx,[rsp+0x50]
 10080c5:	mov    rdx,rbx
 10080c8:	call   0x10057b0
 10080cd:	test   eax,eax
 10080cf:	jne    0x1008132
 10080d1:	lea    rdx,[rsp+0x50]
 10080d6:	mov    rcx,rbx
 10080d9:	call   0x1004b90
 10080de:	mov    rcx,QWORD PTR [rsp+0x40]
 10080e3:	lea    r8,[rsp+0x48]
 10080e8:	mov    rax,QWORD PTR [rcx]
 10080eb:	mov    QWORD PTR [rsp+0x20],r8
 10080f0:	lea    rdx,[rbx+0x410]
 10080f7:	lea    r8,[rip+0x6612]        # 0x100e710
 10080fe:	mov    r9d,0x9
 1008104:	call   QWORD PTR [rax+0x30]
 1008107:	mov    ebx,eax
 1008109:	test   eax,eax
 100810b:	jns    0x100811a
 100810d:	mov    rcx,QWORD PTR [rsp+0x40]
 1008112:	mov    rdx,QWORD PTR [rcx]
 1008115:	call   QWORD PTR [rdx+0x10]
 1008118:	jmp    0x1008130
 100811a:	mov    rcx,QWORD PTR [rsp+0x48]
 100811f:	mov    rax,QWORD PTR [rcx]
 1008122:	call   QWORD PTR [rax+0x10]
 1008125:	mov    rcx,QWORD PTR [rsp+0x40]
 100812a:	mov    rax,QWORD PTR [rcx]
 100812d:	call   QWORD PTR [rax+0x10]
 1008130:	mov    eax,ebx
 1008132:	mov    rcx,QWORD PTR [rsp+0x7a0]
 100813a:	xor    rcx,rsp
 100813d:	call   0x1009d30
 1008142:	add    rsp,0x7b0
 1008149:	pop    rbx
 100814a:	ret    
 100814b:	int3   
 100814c:	int3   
 100814d:	int3   
 100814e:	int3   
 100814f:	int3   
 1008150:	int3   
 1008151:	int3   
 1008152:	int3   
 1008153:	int3   
 1008154:	int3   
 1008155:	int3   
 1008156:	int3   
 1008157:	int3   
 1008158:	int3   
 1008159:	int3   
 100815a:	int3   
 100815b:	int3   
 100815c:	int3   
 100815d:	int3   
 100815e:	int3   
 100815f:	int3   
 1008160:	rex push rbx
 1008162:	sub    rsp,0x270
 1008169:	mov    rax,QWORD PTR [rip+0x7660]        # 0x100f7d0
 1008170:	xor    rax,rsp
 1008173:	mov    QWORD PTR [rsp+0x260],rax
 100817b:	mov    rbx,r8
 100817e:	mov    r9d,edx
 1008181:	lea    rdx,[rsp+0x50]
 1008186:	mov    r8d,0x104
 100818c:	mov    QWORD PTR [rsp+0x28],0x0
 1008195:	mov    QWORD PTR [rsp+0x20],rbx
 100819a:	call   0x1004250
 100819f:	test   eax,eax
 10081a1:	js     0x100824b
 10081a7:	lea    r8,[rsp+0x30]
 10081ac:	lea    rdx,[rip+0xffffffffffffa5ed]        # 0x10027a0
 10081b3:	lea    rcx,[rsp+0x50]
 10081b8:	call   QWORD PTR [rip+0x7cca]        # 0x100fe88
 10081be:	test   eax,eax
 10081c0:	js     0x100824b
 10081c6:	mov    rcx,QWORD PTR [rsp+0x30]
 10081cb:	lea    rdx,[rsp+0x40]
 10081d0:	mov    rax,QWORD PTR [rcx]
 10081d3:	call   QWORD PTR [rax+0x58]
 10081d6:	mov    rcx,QWORD PTR [rsp+0x30]
 10081db:	lea    rdx,[rsp+0x48]
 10081e0:	mov    rax,QWORD PTR [rcx]
 10081e3:	call   QWORD PTR [rax+0x38]
 10081e6:	mov    rcx,QWORD PTR [rsp+0x30]
 10081eb:	mov    rax,QWORD PTR [rcx]
 10081ee:	call   QWORD PTR [rax+0x10]
 10081f1:	mov    rcx,QWORD PTR [rsp+0x40]
 10081f6:	lea    r8,[rsp+0x38]
 10081fb:	lea    rdx,[rip+0xffffffffffffa5ae]        # 0x10027b0
 1008202:	call   QWORD PTR [rip+0x7c80]        # 0x100fe88
 1008208:	test   eax,eax
 100820a:	js     0x100824b
 100820c:	lea    r8,[rip+0xffffffffffff972d]        # 0x1001940
 1008213:	lea    rcx,[rbx+0x208]
 100821a:	mov    edx,0x104
 100821f:	call   QWORD PTR [rip+0xffffffffffff906b]        # 0x1001290
 1008225:	mov    rcx,QWORD PTR [rsp+0x38]
 100822a:	mov    r8,QWORD PTR [rsp+0x48]
 100822f:	mov    rax,QWORD PTR [rcx]
 1008232:	lea    rdx,[rbx+0x208]
 1008239:	call   QWORD PTR [rax+0x78]
 100823c:	mov    rcx,QWORD PTR [rsp+0x38]
 1008241:	mov    rdx,QWORD PTR [rcx]
 1008244:	mov    ebx,eax
 1008246:	call   QWORD PTR [rdx+0x10]
 1008249:	mov    eax,ebx
 100824b:	mov    rcx,QWORD PTR [rsp+0x260]
 1008253:	xor    rcx,rsp
 1008256:	call   0x1009d30
 100825b:	add    rsp,0x270
 1008262:	pop    rbx
 1008263:	ret    
 1008264:	int3   
 1008265:	int3   
 1008266:	int3   
 1008267:	int3   
 1008268:	int3   
 1008269:	int3   
 100826a:	int3   
 100826b:	int3   
 100826c:	int3   
 100826d:	int3   
 100826e:	int3   
 100826f:	int3   
 1008270:	rex push rbp
 1008272:	push   rsi
 1008273:	push   rdi
 1008274:	push   r14
 1008276:	push   r15
 1008278:	lea    rbp,[rsp-0x800]
 1008280:	sub    rsp,0x900
 1008287:	mov    rax,QWORD PTR [rip+0x7542]        # 0x100f7d0
 100828e:	xor    rax,rsp
 1008291:	mov    QWORD PTR [rbp+0x7f0],rax
 1008298:	xor    r15d,r15d
 100829b:	mov    rsi,r9
 100829e:	mov    rdi,r8
 10082a1:	mov    QWORD PTR [rsp+0x30],r15
 10082a6:	lea    rdx,[rbp+0x5e0]
 10082ad:	mov    DWORD PTR [rsp+0x28],0x1
 10082b5:	mov    QWORD PTR [rsp+0x20],r8
 10082ba:	lea    r9d,[r15+0x1]
 10082be:	mov    r8d,0x104
 10082c4:	mov    r14,rcx
 10082c7:	mov    QWORD PTR [rsp+0x58],r15
 10082cc:	mov    QWORD PTR [rsp+0x68],r15
 10082d1:	mov    QWORD PTR [rsp+0x50],r15
 10082d6:	mov    QWORD PTR [rsp+0x70],r15
 10082db:	mov    QWORD PTR [rsp+0x60],r15
 10082e0:	call   0x1003d90
 10082e5:	test   eax,eax
 10082e7:	js     0x10084e6
 10082ed:	lea    r8,[rsp+0x58]
 10082f2:	lea    rdx,[rip+0xffffffffffffa4c7]        # 0x10027c0
 10082f9:	lea    rcx,[rbp+0x5e0]
 1008300:	mov    QWORD PTR [rsp+0x938],rbx
 1008308:	call   QWORD PTR [rip+0x7b7a]        # 0x100fe88
 100830e:	mov    ebx,eax
 1008310:	test   eax,eax
 1008312:	js     0x10083fa
 1008318:	lea    ecx,[r15+0x4]
 100831c:	mov    rdx,rdi
 100831f:	call   0x1004dc0
 1008324:	lea    rcx,[rbp-0x80]
 1008328:	mov    rdx,rdi
 100832b:	call   0x1005710
 1008330:	mov    ebx,eax
 1008332:	test   eax,eax
 1008334:	jne    0x10083fa
 100833a:	lea    rdx,[rbp-0x80]
 100833e:	mov    rcx,rdi
 1008341:	call   0x1004c40
 1008346:	mov    rcx,QWORD PTR [rsp+0x58]
 100834b:	lea    r8,[rsp+0x68]
 1008350:	mov    rax,QWORD PTR [rcx]
 1008353:	mov    QWORD PTR [rsp+0x20],r8
 1008358:	lea    rdx,[rdi+0x410]
 100835f:	lea    r9d,[r15+0xe]
 1008363:	lea    r8,[rip+0x65a6]        # 0x100e910
 100836a:	call   QWORD PTR [rax+0x30]
 100836d:	mov    ebx,eax
 100836f:	test   eax,eax
 1008371:	js     0x10083fa
 1008377:	mov    rcx,QWORD PTR [rsp+0x68]
 100837c:	lea    r8,[rsp+0x50]
 1008381:	lea    rdx,[rip+0xffffffffffffa418]        # 0x10027a0
 1008388:	mov    rax,QWORD PTR [rcx]
 100838b:	call   QWORD PTR [rax]
 100838d:	mov    ebx,eax
 100838f:	test   eax,eax
 1008391:	js     0x10083fa
 1008393:	mov    rcx,QWORD PTR [rsp+0x50]
 1008398:	mov    QWORD PTR [rsp+0x40],r15
 100839d:	mov    DWORD PTR [rsp+0x38],0x1
 10083a5:	mov    QWORD PTR [rsp+0x30],rsi
 10083aa:	xor    r9d,r9d
 10083ad:	xor    r8d,r8d
 10083b0:	mov    edx,0x40030
 10083b5:	mov    QWORD PTR [rsp+0x28],r15
 10083ba:	mov    QWORD PTR [rsp+0x20],r15
 10083bf:	call   0x10066a0
 10083c4:	mov    ebx,eax
 10083c6:	test   eax,eax
 10083c8:	jne    0x10083fa
 10083ca:	mov    rcx,QWORD PTR [rsp+0x50]
 10083cf:	lea    rdx,[rsp+0x70]
 10083d4:	mov    rax,QWORD PTR [rcx]
 10083d7:	call   QWORD PTR [rax+0x48]
 10083da:	mov    ebx,eax
 10083dc:	test   eax,eax
 10083de:	jne    0x10083fa
 10083e0:	mov    r8,QWORD PTR [rsp+0x70]
 10083e5:	test   r8,r8
 10083e8:	je     0x100840a
 10083ea:	lea    rcx,[rdi+0x10a4]
 10083f1:	lea    edx,[rax+0x28]
 10083f4:	call   QWORD PTR [rip+0xffffffffffff8e96]        # 0x1001290
 10083fa:	mov    rcx,QWORD PTR [rsp+0x70]
 10083ff:	test   rcx,rcx
 1008402:	je     0x100840a
 1008404:	call   QWORD PTR [rip+0xffffffffffff8f1e]        # 0x1001328
 100840a:	mov    rcx,QWORD PTR [rsp+0x50]
 100840f:	test   rcx,rcx
 1008412:	je     0x100841a
 1008414:	mov    rax,QWORD PTR [rcx]
 1008417:	call   QWORD PTR [rax+0x10]
 100841a:	mov    rcx,QWORD PTR [rsp+0x68]
 100841f:	test   rcx,rcx
 1008422:	je     0x100842a
 1008424:	mov    rax,QWORD PTR [rcx]
 1008427:	call   QWORD PTR [rax+0x10]
 100842a:	mov    rcx,QWORD PTR [rsp+0x58]
 100842f:	test   rcx,rcx
 1008432:	je     0x100843a
 1008434:	mov    rax,QWORD PTR [rcx]
 1008437:	call   QWORD PTR [rax+0x10]
 100843a:	test   ebx,ebx
 100843c:	je     0x1008445
 100843e:	mov    eax,ebx
 1008440:	jmp    0x10084de
 1008445:	mov    rdx,rdi
 1008448:	mov    ecx,0x4
 100844d:	call   0x1004480
 1008452:	lea    rax,[rsp+0x60]
 1008457:	lea    rdx,[rdi+0x618]
 100845e:	mov    r9d,0x2
 1008464:	xor    r8d,r8d
 1008467:	mov    rcx,r14
 100846a:	mov    QWORD PTR [rsp+0x20],rax
 100846f:	call   QWORD PTR [rip+0xffffffffffff8b93]        # 0x1001008
 1008475:	mov    esi,eax
 1008477:	test   eax,eax
 1008479:	jne    0x10084cc
 100847b:	lea    rbx,[rdi+0x10a4]
 1008482:	or     rax,0xffffffffffffffff
 1008486:	inc    rax
 1008489:	cmp    WORD PTR [rbx+rax*2],r15w
 100848e:	jne    0x1008486
 1008490:	mov    rcx,QWORD PTR [rsp+0x60]
 1008495:	add    eax,eax
 1008497:	lea    rdx,[rip+0xffffffffffff9372]        # 0x1001810
 100849e:	mov    DWORD PTR [rsp+0x28],eax
 10084a2:	mov    r9d,0x1
 10084a8:	xor    r8d,r8d
 10084ab:	mov    QWORD PTR [rsp+0x20],rbx
 10084b0:	call   QWORD PTR [rip+0xffffffffffff8b8a]        # 0x1001040
 10084b6:	mov    esi,eax
 10084b8:	test   eax,eax
 10084ba:	jne    0x10084cc
 10084bc:	lea    rcx,[rip+0xffffffffffff9e05]        # 0x10022c8
 10084c3:	mov    rdx,rbx
 10084c6:	call   QWORD PTR [rip+0xffffffffffff8dec]        # 0x10012b8
 10084cc:	mov    rcx,QWORD PTR [rsp+0x60]
 10084d1:	test   rcx,rcx
 10084d4:	je     0x10084dc
 10084d6:	call   QWORD PTR [rip+0xffffffffffff8b24]        # 0x1001000
 10084dc:	mov    eax,esi
 10084de:	mov    rbx,QWORD PTR [rsp+0x938]
 10084e6:	mov    rcx,QWORD PTR [rbp+0x7f0]
 10084ed:	xor    rcx,rsp
 10084f0:	call   0x1009d30
 10084f5:	add    rsp,0x900
 10084fc:	pop    r15
 10084fe:	pop    r14
 1008500:	pop    rdi
 1008501:	pop    rsi
 1008502:	pop    rbp
 1008503:	ret    
 1008504:	int3   
 1008505:	int3   
 1008506:	int3   
 1008507:	int3   
 1008508:	int3   
 1008509:	int3   
 100850a:	int3   
 100850b:	int3   
 100850c:	int3   
 100850d:	int3   
 100850e:	int3   
 100850f:	int3   
 1008510:	mov    r11,rsp
 1008513:	push   rbp
 1008514:	push   rdi
 1008515:	lea    rbp,[r11-0xa28]
 100851c:	sub    rsp,0xb18
 1008523:	mov    rax,QWORD PTR [rip+0x72a6]        # 0x100f7d0
 100852a:	xor    rax,rsp
 100852d:	mov    QWORD PTR [rbp+0x9f0],rax
 1008534:	mov    QWORD PTR [r11+0x10],rbx
 1008538:	mov    QWORD PTR [r11-0x18],rsi
 100853c:	mov    QWORD PTR [r11-0x20],r14
 1008540:	lea    rsi,[r8+0x10a4]
 1008547:	mov    QWORD PTR [r11-0x28],r15
 100854b:	xor    r15d,r15d
 100854e:	mov    r14,r8
 1008551:	mov    ebx,0x104
 1008556:	mov    QWORD PTR [rsp+0x40],r15
 100855b:	mov    QWORD PTR [rsp+0x50],r15
 1008560:	mov    QWORD PTR [rsp+0x58],r15
 1008565:	mov    QWORD PTR [rsp+0x48],r15
 100856a:	cmp    WORD PTR [rsi],r15w
 100856e:	jne    0x10088be
 1008574:	mov    QWORD PTR [rsp+0x30],r15
 1008579:	lea    r9d,[r15+0x1]
 100857d:	lea    rdx,[rbp+0x7e0]
 1008584:	mov    DWORD PTR [rsp+0x28],r15d
 1008589:	mov    QWORD PTR [rsp+0x20],r8
 100858e:	mov    r8d,ebx
 1008591:	call   0x1003d90
 1008596:	mov    edi,eax
 1008598:	test   eax,eax
 100859a:	js     0x1008a55
 10085a0:	lea    r8,[rip+0xffffffffffff9281]        # 0x1001828
 10085a7:	lea    rcx,[rbp+0x5d0]
 10085ae:	mov    edx,ebx
 10085b0:	call   QWORD PTR [rip+0xffffffffffff8cda]        # 0x1001290
 10085b6:	mov    r11d,ebx
 10085b9:	lea    rax,[rbp+0x5d0]
 10085c0:	cmp    WORD PTR [rax],r15w
 10085c4:	je     0x10085d1
 10085c6:	add    rax,0x2
 10085ca:	dec    r11
 10085cd:	jne    0x10085c0
 10085cf:	jmp    0x1008632
 10085d1:	test   r11,r11
 10085d4:	je     0x1008632
 10085d6:	mov    rdx,rbx
 10085d9:	lea    rax,[rbp+0x5d0]
 10085e0:	mov    rcx,rbx
 10085e3:	sub    rdx,r11
 10085e6:	lea    rax,[rax+rdx*2]
 10085ea:	sub    rcx,rdx
 10085ed:	je     0x100862a
 10085ef:	add    rdx,0x7ffffefb
 10085f6:	lea    r9,[rip+0xffffffffffff9293]        # 0x1001890
 10085fd:	add    rdx,rcx
 1008600:	sub    r9,rax
 1008603:	test   rdx,rdx
 1008606:	je     0x1008625
 1008608:	movzx  r8d,WORD PTR [rax+r9*1]
 100860d:	test   r8w,r8w
 1008611:	je     0x1008625
 1008613:	mov    WORD PTR [rax],r8w
 1008617:	add    rax,0x2
 100861b:	dec    rdx
 100861e:	dec    rcx
 1008621:	jne    0x1008603
 1008623:	jmp    0x100862a
 1008625:	test   rcx,rcx
 1008628:	jne    0x100862e
 100862a:	sub    rax,0x2
 100862e:	mov    WORD PTR [rax],r15w
 1008632:	mov    rcx,rbx
 1008635:	lea    rax,[rbp+0x5d0]
 100863c:	nop    DWORD PTR [rax+0x0]
 1008640:	cmp    WORD PTR [rax],r15w
 1008644:	je     0x1008651
 1008646:	add    rax,0x2
 100864a:	dec    rcx
 100864d:	jne    0x1008640
 100864f:	jmp    0x10086b2
 1008651:	test   rcx,rcx
 1008654:	je     0x10086b2
 1008656:	mov    rdx,rbx
 1008659:	lea    rax,[rbp+0x5d0]
 1008660:	lea    r9,[r14+0xa28]
 1008667:	sub    rdx,rcx
 100866a:	mov    rcx,rbx
 100866d:	lea    rax,[rax+rdx*2]
 1008671:	sub    rcx,rdx
 1008674:	je     0x10086aa
 1008676:	add    rdx,0x7ffffefb
 100867d:	add    rdx,rcx
 1008680:	sub    r9,rax
 1008683:	test   rdx,rdx
 1008686:	je     0x10086a5
 1008688:	movzx  r8d,WORD PTR [rax+r9*1]
 100868d:	test   r8w,r8w
 1008691:	je     0x10086a5
 1008693:	mov    WORD PTR [rax],r8w
 1008697:	add    rax,0x2
 100869b:	dec    rdx
 100869e:	dec    rcx
 10086a1:	jne    0x1008683
 10086a3:	jmp    0x10086aa
 10086a5:	test   rcx,rcx
 10086a8:	jne    0x10086ae
 10086aa:	sub    rax,0x2
 10086ae:	mov    WORD PTR [rax],r15w
 10086b2:	mov    rcx,rbx
 10086b5:	lea    rax,[rbp+0x5d0]
 10086bc:	nop    DWORD PTR [rax+0x0]
 10086c0:	cmp    WORD PTR [rax],r15w
 10086c4:	je     0x10086d1
 10086c6:	add    rax,0x2
 10086ca:	dec    rcx
 10086cd:	jne    0x10086c0
 10086cf:	jmp    0x1008732
 10086d1:	test   rcx,rcx
 10086d4:	je     0x1008732
 10086d6:	mov    rdx,rbx
 10086d9:	lea    rax,[rbp+0x5d0]
 10086e0:	sub    rdx,rcx
 10086e3:	mov    rcx,rbx
 10086e6:	lea    rax,[rax+rdx*2]
 10086ea:	sub    rcx,rdx
 10086ed:	je     0x100872a
 10086ef:	add    rdx,0x7ffffefb
 10086f6:	lea    r9,[rip+0xffffffffffff91b7]        # 0x10018b4
 10086fd:	add    rdx,rcx
 1008700:	sub    r9,rax
 1008703:	test   rdx,rdx
 1008706:	je     0x1008725
 1008708:	movzx  r8d,WORD PTR [r9+rax*1]
 100870d:	test   r8w,r8w
 1008711:	je     0x1008725
 1008713:	mov    WORD PTR [rax],r8w
 1008717:	add    rax,0x2
 100871b:	dec    rdx
 100871e:	dec    rcx
 1008721:	jne    0x1008703
 1008723:	jmp    0x100872a
 1008725:	test   rcx,rcx
 1008728:	jne    0x100872e
 100872a:	sub    rax,0x2
 100872e:	mov    WORD PTR [rax],r15w
 1008732:	mov    rcx,rbx
 1008735:	lea    rax,[rbp+0x5d0]
 100873c:	nop    DWORD PTR [rax+0x0]
 1008740:	cmp    WORD PTR [rax],r15w
 1008744:	je     0x1008751
 1008746:	add    rax,0x2
 100874a:	dec    rcx
 100874d:	jne    0x1008740
 100874f:	jmp    0x10087b2
 1008751:	test   rcx,rcx
 1008754:	je     0x10087b2
 1008756:	mov    rdx,rbx
 1008759:	lea    rax,[rbp+0x5d0]
 1008760:	lea    r9,[r14+0xe9c]
 1008767:	sub    rdx,rcx
 100876a:	mov    rcx,rbx
 100876d:	lea    rax,[rax+rdx*2]
 1008771:	sub    rcx,rdx
 1008774:	je     0x10087aa
 1008776:	add    rdx,0x7ffffefb
 100877d:	add    rdx,rcx
 1008780:	sub    r9,rax
 1008783:	test   rdx,rdx
 1008786:	je     0x10087a5
 1008788:	movzx  r8d,WORD PTR [r9+rax*1]
 100878d:	test   r8w,r8w
 1008791:	je     0x10087a5
 1008793:	mov    WORD PTR [rax],r8w
 1008797:	add    rax,0x2
 100879b:	dec    rdx
 100879e:	dec    rcx
 10087a1:	jne    0x1008783
 10087a3:	jmp    0x10087aa
 10087a5:	test   rcx,rcx
 10087a8:	jne    0x10087ae
 10087aa:	sub    rax,0x2
 10087ae:	mov    WORD PTR [rax],r15w
 10087b2:	mov    rcx,rbx
 10087b5:	lea    rax,[rbp+0x5d0]
 10087bc:	nop    DWORD PTR [rax+0x0]
 10087c0:	cmp    WORD PTR [rax],r15w
 10087c4:	je     0x10087d1
 10087c6:	add    rax,0x2
 10087ca:	dec    rcx
 10087cd:	jne    0x10087c0
 10087cf:	jmp    0x1008832
 10087d1:	test   rcx,rcx
 10087d4:	je     0x1008832
 10087d6:	mov    rdx,rbx
 10087d9:	lea    rax,[rbp+0x5d0]
 10087e0:	sub    rdx,rcx
 10087e3:	mov    rcx,rbx
 10087e6:	lea    rax,[rax+rdx*2]
 10087ea:	sub    rcx,rdx
 10087ed:	je     0x100882a
 10087ef:	add    rdx,0x7ffffefb
 10087f6:	lea    r9,[rip+0xffffffffffff9043]        # 0x1001840
 10087fd:	add    rdx,rcx
 1008800:	sub    r9,rax
 1008803:	test   rdx,rdx
 1008806:	je     0x1008825
 1008808:	movzx  r8d,WORD PTR [r9+rax*1]
 100880d:	test   r8w,r8w
 1008811:	je     0x1008825
 1008813:	mov    WORD PTR [rax],r8w
 1008817:	add    rax,0x2
 100881b:	dec    rdx
 100881e:	dec    rcx
 1008821:	jne    0x1008803
 1008823:	jmp    0x100882a
 1008825:	test   rcx,rcx
 1008828:	jne    0x100882e
 100882a:	sub    rax,0x2
 100882e:	mov    WORD PTR [rax],r15w
 1008832:	mov    rcx,rbx
 1008835:	lea    rax,[rbp+0x5d0]
 100883c:	nop    DWORD PTR [rax+0x0]
 1008840:	cmp    WORD PTR [rax],r15w
 1008844:	je     0x1008854
 1008846:	add    rax,0x2
 100884a:	dec    rcx
 100884d:	jne    0x1008840
 100884f:	jmp    0x10088ff
 1008854:	test   rcx,rcx
 1008857:	je     0x10088ff
 100885d:	mov    rdx,rbx
 1008860:	lea    rax,[rbp+0x5d0]
 1008867:	sub    rdx,rcx
 100886a:	lea    rax,[rax+rdx*2]
 100886e:	sub    rbx,rdx
 1008871:	je     0x10088b4
 1008873:	lea    rcx,[rdx+0x7ffffefb]
 100887a:	lea    r8,[rbp+0x7e0]
 1008881:	add    rcx,rbx
 1008884:	sub    r8,rax
 1008887:	test   rcx,rcx
 100888a:	je     0x10088af
 100888c:	movzx  edx,WORD PTR [r8+rax*1]
 1008891:	test   dx,dx
 1008894:	je     0x10088af
 1008896:	mov    WORD PTR [rax],dx
 1008899:	add    rax,0x2
 100889d:	dec    rcx
 10088a0:	dec    rbx
 10088a3:	jne    0x1008887
 10088a5:	sub    rax,0x2
 10088a9:	mov    WORD PTR [rax],r15w
 10088ad:	jmp    0x10088ff
 10088af:	test   rbx,rbx
 10088b2:	jne    0x10088b8
 10088b4:	sub    rax,0x2
 10088b8:	mov    WORD PTR [rax],r15w
 10088bc:	jmp    0x10088ff
 10088be:	lea    r8,[rip+0xffffffffffff8f83]        # 0x1001848
 10088c5:	lea    rcx,[rbp+0x5d0]
 10088cc:	mov    rdx,rbx
 10088cf:	call   QWORD PTR [rip+0xffffffffffff89bb]        # 0x1001290
 10088d5:	lea    rcx,[rbp+0x5d0]
 10088dc:	mov    r8,rsi
 10088df:	mov    rdx,rbx
 10088e2:	call   QWORD PTR [rip+0xffffffffffff89b8]        # 0x10012a0
 10088e8:	lea    r8,[rip+0xffffffffffff8f75]        # 0x1001864
 10088ef:	lea    rcx,[rbp+0x5d0]
 10088f6:	mov    rdx,rbx
 10088f9:	call   QWORD PTR [rip+0xffffffffffff89a1]        # 0x10012a0
 10088ff:	lea    r8,[rsp+0x40]
 1008904:	lea    rdx,[rip+0xffffffffffff9eb5]        # 0x10027c0
 100890b:	lea    rcx,[rbp+0x5d0]
 1008912:	call   QWORD PTR [rip+0x7570]        # 0x100fe88
 1008918:	mov    edi,eax
 100891a:	test   eax,eax
 100891c:	js     0x1008a55
 1008922:	lea    rcx,[rsp+0x70]
 1008927:	mov    rdx,r14
 100892a:	call   0x1005710
 100892f:	mov    edi,eax
 1008931:	test   eax,eax
 1008933:	jne    0x1008a55
 1008939:	lea    rdx,[rsp+0x70]
 100893e:	mov    rcx,r14
 1008941:	call   0x1004c40
 1008946:	mov    rcx,QWORD PTR [rsp+0x40]
 100894b:	mov    DWORD PTR [rsp+0x60],0xc
 1008953:	mov    rax,QWORD PTR [rcx]
 1008956:	lea    r9,[rsp+0x60]
 100895b:	lea    r8d,[rdi+0xc]
 100895f:	lea    rdx,[rip+0x616a]        # 0x100ead0
 1008966:	call   QWORD PTR [rax+0x28]
 1008969:	mov    edi,eax
 100896b:	test   eax,eax
 100896d:	js     0x1008a55
 1008973:	mov    rcx,QWORD PTR [rsp+0x40]
 1008978:	lea    r8,[rsp+0x50]
 100897d:	lea    rdx,[rip+0xffffffffffff9e1c]        # 0x10027a0
 1008984:	mov    rax,QWORD PTR [rcx]
 1008987:	call   QWORD PTR [rax]
 1008989:	mov    edi,eax
 100898b:	test   eax,eax
 100898d:	js     0x1008a55
 1008993:	mov    rcx,QWORD PTR [rsp+0x50]
 1008998:	lea    rdx,[rsp+0x58]
 100899d:	mov    rax,QWORD PTR [rcx]
 10089a0:	call   QWORD PTR [rax+0x48]
 10089a3:	mov    edi,eax
 10089a5:	test   eax,eax
 10089a7:	js     0x1008a55
 10089ad:	mov    r8,QWORD PTR [rsp+0x58]
 10089b2:	test   r8,r8
 10089b5:	je     0x1008a65
 10089bb:	mov    edx,0x28
 10089c0:	mov    rcx,rsi
 10089c3:	call   QWORD PTR [rip+0xffffffffffff88c7]        # 0x1001290
 10089c9:	lea    rcx,[rip+0xffffffffffff8e38]        # 0x1001808
 10089d0:	mov    rdx,rsi
 10089d3:	call   QWORD PTR [rip+0xffffffffffff88df]        # 0x10012b8
 10089d9:	mov    rdx,r14
 10089dc:	mov    ecx,0x4
 10089e1:	call   0x1004480
 10089e6:	lea    rax,[rsp+0x48]
 10089eb:	lea    rdx,[r14+0x618]
 10089f2:	mov    r9d,0x2
 10089f8:	xor    r8d,r8d
 10089fb:	mov    rcx,0xffffffff80000002
 1008a02:	mov    QWORD PTR [rsp+0x20],rax
 1008a07:	call   QWORD PTR [rip+0xffffffffffff85fb]        # 0x1001008
 1008a0d:	test   eax,eax
 1008a0f:	je     0x1008a15
 1008a11:	mov    edi,eax
 1008a13:	jmp    0x1008a55
 1008a15:	or     rax,0xffffffffffffffff
 1008a19:	nop    DWORD PTR [rax+0x0]
 1008a20:	inc    rax
 1008a23:	cmp    WORD PTR [rsi+rax*2],r15w
 1008a28:	jne    0x1008a20
 1008a2a:	mov    rcx,QWORD PTR [rsp+0x48]
 1008a2f:	add    eax,eax
 1008a31:	lea    rdx,[rip+0xffffffffffff8dd8]        # 0x1001810
 1008a38:	mov    DWORD PTR [rsp+0x28],eax
 1008a3c:	mov    r9d,0x1
 1008a42:	xor    r8d,r8d
 1008a45:	mov    QWORD PTR [rsp+0x20],rsi
 1008a4a:	call   QWORD PTR [rip+0xffffffffffff85f0]        # 0x1001040
 1008a50:	test   eax,eax
 1008a52:	cmovne edi,eax
 1008a55:	mov    rcx,QWORD PTR [rsp+0x58]
 1008a5a:	test   rcx,rcx
 1008a5d:	je     0x1008a65
 1008a5f:	call   QWORD PTR [rip+0xffffffffffff88c3]        # 0x1001328
 1008a65:	mov    rcx,QWORD PTR [rsp+0x48]
 1008a6a:	mov    r15,QWORD PTR [rsp+0xb00]
 1008a72:	mov    r14,QWORD PTR [rsp+0xb08]
 1008a7a:	mov    rsi,QWORD PTR [rsp+0xb10]
 1008a82:	mov    rbx,QWORD PTR [rsp+0xb38]
 1008a8a:	test   rcx,rcx
 1008a8d:	je     0x1008a95
 1008a8f:	call   QWORD PTR [rip+0xffffffffffff856b]        # 0x1001000
 1008a95:	mov    rcx,QWORD PTR [rsp+0x50]
 1008a9a:	test   rcx,rcx
 1008a9d:	je     0x1008aa5
 1008a9f:	mov    rax,QWORD PTR [rcx]
 1008aa2:	call   QWORD PTR [rax+0x10]
 1008aa5:	mov    rcx,QWORD PTR [rsp+0x40]
 1008aaa:	test   rcx,rcx
 1008aad:	je     0x1008ab5
 1008aaf:	mov    rax,QWORD PTR [rcx]
 1008ab2:	call   QWORD PTR [rax+0x10]
 1008ab5:	mov    eax,edi
 1008ab7:	mov    rcx,QWORD PTR [rbp+0x9f0]
 1008abe:	xor    rcx,rsp
 1008ac1:	call   0x1009d30
 1008ac6:	add    rsp,0xb18
 1008acd:	pop    rdi
 1008ace:	pop    rbp
 1008acf:	ret    
 1008ad0:	int3   
 1008ad1:	int3   
 1008ad2:	int3   
 1008ad3:	int3   
 1008ad4:	int3   
 1008ad5:	int3   
 1008ad6:	int3   
 1008ad7:	int3   
 1008ad8:	int3   
 1008ad9:	int3   
 1008ada:	int3   
 1008adb:	int3   
 1008adc:	int3   
 1008add:	int3   
 1008ade:	int3   
 1008adf:	int3   
 1008ae0:	mov    QWORD PTR [rsp+0x8],rbx
 1008ae5:	mov    QWORD PTR [rsp+0x10],rdi
 1008aea:	push   rbp
 1008aeb:	lea    rbp,[rsp-0x180]
 1008af3:	sub    rsp,0x280
 1008afa:	mov    rax,QWORD PTR [rip+0x6ccf]        # 0x100f7d0
 1008b01:	xor    rax,rsp
 1008b04:	mov    QWORD PTR [rbp+0x170],rax
 1008b0b:	mov    rdi,r8
 1008b0e:	lea    rcx,[rsp+0x60]
 1008b13:	lea    r8,[rip+0xffffffffffff8d2e]        # 0x1001848
 1008b1a:	mov    edx,0x104
 1008b1f:	mov    QWORD PTR [rsp+0x20],0x0
 1008b28:	mov    QWORD PTR [rsp+0x28],0x0
 1008b31:	call   QWORD PTR [rip+0xffffffffffff8759]        # 0x1001290
 1008b37:	lea    r8,[rdi+0x10a4]
 1008b3e:	lea    rcx,[rsp+0x60]
 1008b43:	mov    edx,0x104
 1008b48:	call   QWORD PTR [rip+0xffffffffffff8752]        # 0x10012a0
 1008b4e:	lea    r8,[rip+0xffffffffffff8d0f]        # 0x1001864
 1008b55:	lea    rcx,[rsp+0x60]
 1008b5a:	mov    edx,0x104
 1008b5f:	call   QWORD PTR [rip+0xffffffffffff873b]        # 0x10012a0
 1008b65:	lea    r8,[rsp+0x20]
 1008b6a:	lea    rdx,[rip+0xffffffffffff9c2f]        # 0x10027a0
 1008b71:	lea    rcx,[rsp+0x60]
 1008b76:	call   QWORD PTR [rip+0x730c]        # 0x100fe88
 1008b7c:	mov    ebx,eax
 1008b7e:	test   eax,eax
 1008b80:	jns    0x1008b93
 1008b82:	cmp    ax,0x2030
 1008b86:	jne    0x1008c76
 1008b8c:	xor    ebx,ebx
 1008b8e:	jmp    0x1008c76
 1008b93:	mov    rcx,QWORD PTR [rsp+0x20]
 1008b98:	lea    r8,[rsp+0x40]
 1008b9d:	lea    rdx,[rip+0xffffffffffff8cc4]        # 0x1001868
 1008ba4:	mov    rax,QWORD PTR [rcx]
 1008ba7:	call   QWORD PTR [rax+0x78]
 1008baa:	mov    rcx,QWORD PTR [rsp+0x20]
 1008baf:	mov    rax,QWORD PTR [rcx]
 1008bb2:	call   QWORD PTR [rax+0x10]
 1008bb5:	lea    r8,[rip+0xffffffffffff8c6c]        # 0x1001828
 1008bbc:	lea    rcx,[rsp+0x60]
 1008bc1:	mov    edx,0x104
 1008bc6:	mov    QWORD PTR [rsp+0x20],0x0
 1008bcf:	call   QWORD PTR [rip+0xffffffffffff86bb]        # 0x1001290
 1008bd5:	mov    r8,QWORD PTR [rsp+0x48]
 1008bda:	lea    rcx,[rsp+0x60]
 1008bdf:	mov    edx,0x104
 1008be4:	call   QWORD PTR [rip+0xffffffffffff86b6]        # 0x10012a0
 1008bea:	lea    r8,[rsp+0x20]
 1008bef:	lea    rdx,[rip+0xffffffffffff9baa]        # 0x10027a0
 1008bf6:	lea    rcx,[rsp+0x60]
 1008bfb:	call   QWORD PTR [rip+0x7287]        # 0x100fe88
 1008c01:	mov    ebx,eax
 1008c03:	test   eax,eax
 1008c05:	js     0x1008c76
 1008c07:	mov    rcx,QWORD PTR [rsp+0x20]
 1008c0c:	lea    rdx,[rsp+0x30]
 1008c11:	mov    rax,QWORD PTR [rcx]
 1008c14:	call   QWORD PTR [rax+0x58]
 1008c17:	mov    rcx,QWORD PTR [rsp+0x20]
 1008c1c:	lea    rdx,[rsp+0x38]
 1008c21:	mov    rax,QWORD PTR [rcx]
 1008c24:	call   QWORD PTR [rax+0x38]
 1008c27:	mov    rcx,QWORD PTR [rsp+0x30]
 1008c2c:	lea    r8,[rsp+0x28]
 1008c31:	lea    rdx,[rip+0xffffffffffff9b78]        # 0x10027b0
 1008c38:	call   QWORD PTR [rip+0x724a]        # 0x100fe88
 1008c3e:	mov    ebx,eax
 1008c40:	test   eax,eax
 1008c42:	js     0x1008c76
 1008c44:	lea    r8,[rip+0xffffffffffff8cc5]        # 0x1001910
 1008c4b:	lea    rcx,[rdi+0x208]
 1008c52:	mov    edx,0x104
 1008c57:	call   QWORD PTR [rip+0xffffffffffff8633]        # 0x1001290
 1008c5d:	mov    rcx,QWORD PTR [rsp+0x28]
 1008c62:	mov    r8,QWORD PTR [rsp+0x38]
 1008c67:	mov    rax,QWORD PTR [rcx]
 1008c6a:	lea    rdx,[rdi+0x208]
 1008c71:	call   QWORD PTR [rax+0x78]
 1008c74:	mov    ebx,eax
 1008c76:	mov    rcx,QWORD PTR [rsp+0x28]
 1008c7b:	test   rcx,rcx
 1008c7e:	je     0x1008c86
 1008c80:	mov    rax,QWORD PTR [rcx]
 1008c83:	call   QWORD PTR [rax+0x10]
 1008c86:	mov    rcx,QWORD PTR [rsp+0x20]
 1008c8b:	test   rcx,rcx
 1008c8e:	je     0x1008c96
 1008c90:	mov    rax,QWORD PTR [rcx]
 1008c93:	call   QWORD PTR [rax+0x10]
 1008c96:	mov    eax,ebx
 1008c98:	mov    rcx,QWORD PTR [rbp+0x170]
 1008c9f:	xor    rcx,rsp
 1008ca2:	call   0x1009d30
 1008ca7:	lea    r11,[rsp+0x280]
 1008caf:	mov    rbx,QWORD PTR [r11+0x10]
 1008cb3:	mov    rdi,QWORD PTR [r11+0x18]
 1008cb7:	mov    rsp,r11
 1008cba:	pop    rbp
 1008cbb:	ret    
 1008cbc:	int3   
 1008cbd:	int3   
 1008cbe:	int3   
 1008cbf:	int3   
 1008cc0:	int3   
 1008cc1:	int3   
 1008cc2:	int3   
 1008cc3:	int3   
 1008cc4:	int3   
 1008cc5:	int3   
 1008cc6:	int3   
 1008cc7:	int3   
 1008cc8:	int3   
 1008cc9:	int3   
 1008cca:	int3   
 1008ccb:	int3   
 1008ccc:	int3   
 1008ccd:	int3   
 1008cce:	int3   
 1008ccf:	int3   
 1008cd0:	rex push rbp
 1008cd2:	push   r12
 1008cd4:	push   r13
 1008cd6:	push   r14
 1008cd8:	push   r15
 1008cda:	lea    rbp,[rsp-0x1a00]
 1008ce2:	mov    eax,0x1b00
 1008ce7:	call   0x1009cd0
 1008cec:	sub    rsp,rax
 1008cef:	mov    rax,QWORD PTR [rip+0x6ada]        # 0x100f7d0
 1008cf6:	xor    rax,rsp
 1008cf9:	mov    QWORD PTR [rbp+0x19d0],rax
 1008d00:	xor    r15d,r15d
 1008d03:	mov    QWORD PTR [rbp-0x80],rcx
 1008d07:	mov    r14,r8
 1008d0a:	mov    r12d,edx
 1008d0d:	lea    rcx,[rbp+0x11a2]
 1008d14:	mov    r8d,0x208
 1008d1a:	xor    edx,edx
 1008d1c:	mov    r13,r9
 1008d1f:	mov    DWORD PTR [rsp+0x50],r15d
 1008d24:	mov    QWORD PTR [rsp+0x70],r15
 1008d29:	mov    QWORD PTR [rsp+0x58],r15
 1008d2e:	mov    QWORD PTR [rsp+0x68],r15
 1008d33:	mov    QWORD PTR [rsp+0x78],r15
 1008d38:	mov    WORD PTR [rbp+0x11a0],r15w
 1008d40:	call   0x1009d56
 1008d45:	lea    rcx,[rbp+0x17c2]
 1008d4c:	xor    edx,edx
 1008d4e:	mov    r8d,0x208
 1008d54:	mov    WORD PTR [rbp+0x17c0],r15w
 1008d5c:	call   0x1009d56
 1008d61:	lea    rcx,[rbp+0x13b2]
 1008d68:	xor    edx,edx
 1008d6a:	mov    r8d,0x206
 1008d70:	mov    WORD PTR [rbp+0x13b0],r15w
 1008d78:	call   0x1009d56
 1008d7d:	lea    rcx,[rbp+0x15c2]
 1008d84:	xor    edx,edx
 1008d86:	mov    r8d,0x1fc
 1008d8c:	mov    WORD PTR [rbp+0x15c0],r15w
 1008d94:	call   0x1009d56
 1008d99:	xor    eax,eax
 1008d9b:	lea    rcx,[rbp-0x70]
 1008d9f:	mov    rdx,r14
 1008da2:	mov    WORD PTR [rbp+0xf20],r15w
 1008daa:	mov    QWORD PTR [rbp+0xf22],rax
 1008db1:	mov    QWORD PTR [rbp+0xf2a],rax
 1008db8:	mov    QWORD PTR [rbp+0xf32],rax
 1008dbf:	mov    QWORD PTR [rbp+0xf3a],rax
 1008dc6:	mov    QWORD PTR [rbp+0xf42],rax
 1008dcd:	mov    QWORD PTR [rbp+0xf4a],rax
 1008dd4:	mov    QWORD PTR [rbp+0xf52],rax
 1008ddb:	mov    QWORD PTR [rbp+0xf5a],rax
 1008de2:	mov    QWORD PTR [rbp+0xf62],rax
 1008de9:	mov    DWORD PTR [rbp+0xf6a],eax
 1008def:	mov    WORD PTR [rbp+0xf6e],ax
 1008df6:	mov    QWORD PTR [rsp+0x60],r15
 1008dfb:	call   0x1004f60
 1008e00:	test   eax,eax
 1008e02:	jne    0x10094af
 1008e08:	mov    QWORD PTR [rsp+0x1af8],rbx
 1008e10:	mov    QWORD PTR [rsp+0x1af0],rsi
 1008e18:	mov    DWORD PTR [rip+0x6a4e],0x3        # 0x100f870
 1008e22:	mov    QWORD PTR [rsp+0x1ae8],rdi
 1008e2a:	mov    DWORD PTR [rip+0x6a54],0x3        # 0x100f888
 1008e34:	mov    DWORD PTR [rip+0x6a62],0x3        # 0x100f8a0
 1008e3e:	mov    DWORD PTR [rip+0x6a70],0x3        # 0x100f8b8
 1008e48:	mov    DWORD PTR [rip+0x6a7e],0x3        # 0x100f8d0
 1008e52:	mov    DWORD PTR [rip+0x6a8c],0x3        # 0x100f8e8
 1008e5c:	cmp    r12d,0x1
 1008e60:	jne    0x100900b
 1008e66:	mov    ecx,DWORD PTR [rbp+0x1a4]
 1008e6c:	lea    rax,[rbp+0x800]
 1008e73:	mov    edi,0xa
 1008e78:	mov    QWORD PTR [rip+0x69f9],rax        # 0x100f878
 1008e7f:	lea    rax,[rbp+0x850]
 1008e86:	lea    r8d,[r15+0xb]
 1008e8a:	mov    QWORD PTR [rip+0x69ff],rax        # 0x100f890
 1008e91:	lea    rax,[rbp+0x8a0]
 1008e98:	lea    rdx,[rbp+0xf70]
 1008e9f:	mov    QWORD PTR [rip+0x6a02],rax        # 0x100f8a8
 1008ea6:	lea    rax,[rbp-0x6c]
 1008eaa:	mov    r9d,edi
 1008ead:	mov    QWORD PTR [rip+0x6a0c],rax        # 0x100f8c0
 1008eb4:	lea    rax,[rbp+0x9c]
 1008ebb:	mov    QWORD PTR [rip+0x6a16],rax        # 0x100f8d8
 1008ec2:	call   QWORD PTR [rip+0xffffffffffff83e0]        # 0x10012a8
 1008ec8:	lea    rbx,[r14+0xe88]
 1008ecf:	lea    r9d,[r15+0x9]
 1008ed3:	lea    r8,[rbp+0xf70]
 1008eda:	mov    rcx,rbx
 1008edd:	mov    edx,edi
 1008edf:	call   QWORD PTR [rip+0xffffffffffff83fb]        # 0x10012e0
 1008ee5:	mov    ecx,DWORD PTR [rbp+0x1a8]
 1008eeb:	lea    r8d,[r15+0xb]
 1008eef:	lea    rdx,[rbp+0xf70]
 1008ef6:	mov    r9d,edi
 1008ef9:	call   QWORD PTR [rip+0xffffffffffff83a9]        # 0x10012a8
 1008eff:	mov    edx,edi
 1008f01:	mov    rax,rbx
 1008f04:	cmp    WORD PTR [rax],r15w
 1008f08:	je     0x1008f15
 1008f0a:	add    rax,0x2
 1008f0e:	dec    rdx
 1008f11:	jne    0x1008f04
 1008f13:	jmp    0x1008f6d
 1008f15:	test   rdx,rdx
 1008f18:	je     0x1008f6d
 1008f1a:	mov    rsi,rdi
 1008f1d:	mov    rcx,rdi
 1008f20:	sub    rsi,rdx
 1008f23:	lea    rax,[rbx+rsi*2]
 1008f27:	sub    rcx,rsi
 1008f2a:	je     0x1008f65
 1008f2c:	lea    rdx,[rsi+0x7ffffff5]
 1008f33:	lea    r8,[rip+0xffffffffffff8db2]        # 0x1001cec
 1008f3a:	add    rdx,rcx
 1008f3d:	sub    r8,rax
 1008f40:	test   rdx,rdx
 1008f43:	je     0x1008f60
 1008f45:	movzx  esi,WORD PTR [rax+r8*1]
 1008f4a:	test   si,si
 1008f4d:	je     0x1008f60
 1008f4f:	mov    WORD PTR [rax],si
 1008f52:	add    rax,0x2
 1008f56:	dec    rdx
 1008f59:	dec    rcx
 1008f5c:	jne    0x1008f40
 1008f5e:	jmp    0x1008f65
 1008f60:	test   rcx,rcx
 1008f63:	jne    0x1008f69
 1008f65:	sub    rax,0x2
 1008f69:	mov    WORD PTR [rax],r15w
 1008f6d:	mov    rcx,rdi
 1008f70:	mov    rax,rbx
 1008f73:	cmp    WORD PTR [rax],r15w
 1008f77:	je     0x1008f84
 1008f79:	add    rax,0x2
 1008f7d:	dec    rcx
 1008f80:	jne    0x1008f73
 1008f82:	jmp    0x1008fdc
 1008f84:	test   rcx,rcx
 1008f87:	je     0x1008fdc
 1008f89:	mov    rdx,rdi
 1008f8c:	sub    rdx,rcx
 1008f8f:	lea    rax,[rbx+rdx*2]
 1008f93:	sub    rdi,rdx
 1008f96:	je     0x1008fd4
 1008f98:	lea    rcx,[rdx+0x7ffffff5]
 1008f9f:	lea    rsi,[rbp+0xf70]
 1008fa6:	add    rcx,rdi
 1008fa9:	sub    rsi,rax
 1008fac:	nop    DWORD PTR [rax+0x0]
 1008fb0:	test   rcx,rcx
 1008fb3:	je     0x1008fcf
 1008fb5:	movzx  edx,WORD PTR [rax+rsi*1]
 1008fb9:	test   dx,dx
 1008fbc:	je     0x1008fcf
 1008fbe:	mov    WORD PTR [rax],dx
 1008fc1:	add    rax,0x2
 1008fc5:	dec    rcx
 1008fc8:	dec    rdi
 1008fcb:	jne    0x1008fb0
 1008fcd:	jmp    0x1008fd4
 1008fcf:	test   rdi,rdi
 1008fd2:	jne    0x1008fd8
 1008fd4:	sub    rax,0x2
 1008fd8:	mov    WORD PTR [rax],r15w
 1008fdc:	mov    rdx,r14
 1008fdf:	mov    ecx,0x1
 1008fe4:	mov    QWORD PTR [rip+0x6905],rbx        # 0x100f8f0
 1008feb:	call   0x1004dc0
 1008ff0:	lea    r8,[rip+0xffffffffffff9731]        # 0x1002728
 1008ff7:	lea    rcx,[rbp+0x15c0]
 1008ffe:	mov    edx,0xff
 1009003:	call   QWORD PTR [rip+0xffffffffffff8287]        # 0x1001290
 1009009:	jmp    0x1009085
 100900b:	lea    rax,[rip+0xffffffffffff965e]        # 0x1002670
 1009012:	mov    rdx,r14
 1009015:	mov    ecx,0x9
 100901a:	mov    QWORD PTR [rip+0x6857],rax        # 0x100f878
 1009021:	lea    rax,[rip+0xffffffffffff9698]        # 0x10026c0
 1009028:	mov    QWORD PTR [rip+0x6861],rax        # 0x100f890
 100902f:	lea    rax,[r14+0xc30]
 1009036:	mov    QWORD PTR [rip+0x686b],rax        # 0x100f8a8
 100903d:	lea    rax,[rip+0xffffffffffff95e4]        # 0x1002628
 1009044:	mov    QWORD PTR [rip+0x6875],rax        # 0x100f8c0
 100904b:	lea    rax,[rip+0xffffffffffff96be]        # 0x1002710
 1009052:	mov    QWORD PTR [rip+0x687f],rax        # 0x100f8d8
 1009059:	lea    rax,[rip+0xffffffffffff95f8]        # 0x1002658
 1009060:	mov    QWORD PTR [rip+0x6889],rax        # 0x100f8f0
 1009067:	call   0x1004dc0
 100906c:	lea    r8,[rip+0xffffffffffff96cd]        # 0x1002740
 1009073:	lea    rcx,[rbp+0x15c0]
 100907a:	mov    edx,0xff
 100907f:	call   QWORD PTR [rip+0xffffffffffff821b]        # 0x10012a0
 1009085:	call   0x10072a0
 100908a:	cmp    eax,0x1
 100908d:	jne    0x10090c8
 100908f:	lea    rcx,[rbp+0x11a0]
 1009096:	mov    edx,0x105
 100909b:	call   0x10061e0
 10090a0:	test   eax,eax
 10090a2:	jne    0x1009497
 10090a8:	lea    rcx,[rbp+0x11a0]
 10090af:	mov    edx,0x105
 10090b4:	call   0x1007330
 10090b9:	test   eax,eax
 10090bb:	jne    0x10090c8
 10090bd:	call   QWORD PTR [rip+0xffffffffffff80dd]        # 0x10011a0
 10090c3:	jmp    0x1009497
 10090c8:	lea    rax,[rbp+0x11a0]
 10090cf:	lea    rcx,[rbp+0xf92]
 10090d6:	xor    edx,edx
 10090d8:	mov    QWORD PTR [rip+0x6841],rax        # 0x100f920
 10090df:	lea    rax,[rbp+0x15c0]
 10090e6:	mov    r8d,0x206
 10090ec:	mov    DWORD PTR [rip+0x6822],0x3        # 0x100f918
 10090f6:	mov    DWORD PTR [rip+0x6800],0x3        # 0x100f900
 1009100:	mov    WORD PTR [rbp+0xf90],r15w
 1009108:	mov    QWORD PTR [rip+0x67f9],rax        # 0x100f908
 100910f:	call   0x1009d56
 1009114:	lea    rdx,[rsp+0x50]
 1009119:	lea    rcx,[rbp+0xf90]
 1009120:	mov    ebx,0x104
 1009125:	mov    DWORD PTR [rsp+0x50],ebx
 1009129:	call   QWORD PTR [rip+0xffffffffffff7ff1]        # 0x1001120
 100912f:	test   eax,eax
 1009131:	jne    0x100914d
 1009133:	lea    r9d,[rbx-0x1]
 1009137:	lea    r8,[rbp+0x11a0]
 100913e:	lea    rcx,[rbp+0xf90]
 1009145:	mov    edx,ebx
 1009147:	call   QWORD PTR [rip+0xffffffffffff8193]        # 0x10012e0
 100914d:	lea    rdi,[rip+0xffffffffffff8954]        # 0x1001aa8
 1009154:	lea    rsi,[r14+0x820]
 100915b:	mov    ecx,0xc
 1009160:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 1009163:	je     0x1009193
 1009165:	lea    r8,[rip+0xffffffffffff85a4]        # 0x1001710
 100916c:	lea    rcx,[rbp+0xf90]
 1009173:	mov    rdx,rbx
 1009176:	call   QWORD PTR [rip+0xffffffffffff8124]        # 0x10012a0
 100917c:	lea    r8,[r14+0x820]
 1009183:	lea    rcx,[rbp+0xf90]
 100918a:	mov    rdx,rbx
 100918d:	call   QWORD PTR [rip+0xffffffffffff810d]        # 0x10012a0
 1009193:	lea    rax,[rbp+0xf90]
 100919a:	mov    DWORD PTR [rip+0x67a4],0x3        # 0x100f948
 10091a4:	mov    DWORD PTR [rip+0x6782],0x3        # 0x100f930
 10091ae:	mov    QWORD PTR [rip+0x679b],rax        # 0x100f950
 10091b5:	lea    rax,[rip+0xffffffffffff959c]        # 0x1002758
 10091bc:	mov    QWORD PTR [rip+0x6775],rax        # 0x100f938
 10091c3:	cmp    r12d,0x1
 10091c7:	jne    0x10091d5
 10091c9:	lea    rdx,[rbp-0x70]
 10091cd:	mov    rcx,r14
 10091d0:	call   0x10045e0
 10091d5:	lea    rcx,[rbp+0x17c0]
 10091dc:	mov    edx,0x105
 10091e1:	call   0x1007090
 10091e6:	test   eax,eax
 10091e8:	jne    0x1009497
 10091ee:	lea    r8,[rip+0xffffffffffff8633]        # 0x1001828
 10091f5:	lea    rcx,[rbp+0x13b0]
 10091fc:	mov    rdx,rbx
 10091ff:	call   QWORD PTR [rip+0xffffffffffff808b]        # 0x1001290
 1009205:	mov    rdx,rbx
 1009208:	lea    rax,[rbp+0x13b0]
 100920f:	nop
 1009210:	cmp    WORD PTR [rax],r15w
 1009214:	je     0x1009271
 1009216:	add    rax,0x2
 100921a:	dec    rdx
 100921d:	jne    0x1009210
 100921f:	xor    esi,esi
 1009221:	lea    r8,[rsp+0x58]
 1009226:	lea    rdx,[rip+0xffffffffffff9593]        # 0x10027c0
 100922d:	lea    rcx,[rbp+0x13b0]
 1009234:	call   QWORD PTR [rip+0x6c4e]        # 0x100fe88
 100923a:	mov    edi,eax
 100923c:	test   eax,eax
 100923e:	js     0x10093a1
 1009244:	mov    rcx,QWORD PTR [rsp+0x58]
 1009249:	lea    rdi,[rsp+0x70]
 100924e:	lea    rdx,[r14+0x410]
 1009255:	mov    rax,QWORD PTR [rcx]
 1009258:	mov    QWORD PTR [rsp+0x20],rdi
 100925d:	cmp    r12d,0x1
 1009261:	jne    0x10092de
 1009263:	lea    r9d,[r12+0x1e]
 1009268:	lea    r8,[rip+0x59e1]        # 0x100ec50
 100926f:	jmp    0x10092eb
 1009271:	test   rdx,rdx
 1009274:	je     0x100921f
 1009276:	mov    rcx,rbx
 1009279:	lea    rax,[rbp+0x13b0]
 1009280:	sub    rcx,rdx
 1009283:	lea    rax,[rax+rcx*2]
 1009287:	sub    rbx,rcx
 100928a:	je     0x10092d0
 100928c:	add    rcx,0x7ffffefb
 1009293:	lea    rdi,[rbp+0x17c0]
 100929a:	add    rcx,rbx
 100929d:	sub    rdi,rax
 10092a0:	test   rcx,rcx
 10092a3:	je     0x10092cb
 10092a5:	movzx  edx,WORD PTR [rax+rdi*1]
 10092a9:	test   dx,dx
 10092ac:	je     0x10092cb
 10092ae:	mov    WORD PTR [rax],dx
 10092b1:	add    rax,0x2
 10092b5:	dec    rcx
 10092b8:	dec    rbx
 10092bb:	jne    0x10092a0
 10092bd:	sub    rax,0x2
 10092c1:	xor    esi,esi
 10092c3:	mov    WORD PTR [rax],si
 10092c6:	jmp    0x1009221
 10092cb:	test   rbx,rbx
 10092ce:	jne    0x10092d4
 10092d0:	sub    rax,0x2
 10092d4:	xor    esi,esi
 10092d6:	mov    WORD PTR [rax],si
 10092d9:	jmp    0x1009221
 10092de:	mov    r9d,0x12
 10092e4:	lea    r8,[rip+0x62a5]        # 0x100f590
 10092eb:	call   QWORD PTR [rax+0x30]
 10092ee:	mov    edi,eax
 10092f0:	test   eax,eax
 10092f2:	jns    0x100931e
 10092f4:	cmp    di,0x1392
 10092f9:	jne    0x10093a1
 10092ff:	mov    rcx,QWORD PTR [rsp+0x58]
 1009304:	mov    rax,QWORD PTR [rcx]
 1009307:	call   QWORD PTR [rax+0x10]
 100930a:	mov    rcx,QWORD PTR [rbp-0x80]
 100930e:	mov    r8,r14
 1009311:	mov    edx,r12d
 1009314:	call   0x10094e0
 1009319:	jmp    0x1009497
 100931e:	mov    rcx,QWORD PTR [rsp+0x70]
 1009323:	lea    r8,[rsp+0x68]
 1009328:	lea    rdx,[rip+0xffffffffffff9471]        # 0x10027a0
 100932f:	mov    rax,QWORD PTR [rcx]
 1009332:	call   QWORD PTR [rax]
 1009334:	mov    edi,eax
 1009336:	test   eax,eax
 1009338:	js     0x10093a1
 100933a:	mov    rcx,QWORD PTR [rsp+0x68]
 100933f:	mov    QWORD PTR [rsp+0x40],rsi
 1009344:	mov    DWORD PTR [rsp+0x38],0x1
 100934c:	mov    QWORD PTR [rsp+0x30],r13
 1009351:	xor    r9d,r9d
 1009354:	xor    r8d,r8d
 1009357:	mov    edx,0x10040000
 100935c:	mov    QWORD PTR [rsp+0x28],rsi
 1009361:	mov    QWORD PTR [rsp+0x20],rsi
 1009366:	call   0x10066a0
 100936b:	mov    edi,eax
 100936d:	test   eax,eax
 100936f:	jne    0x10093a1
 1009371:	mov    rcx,QWORD PTR [rsp+0x68]
 1009376:	lea    rdx,[rsp+0x78]
 100937b:	mov    rax,QWORD PTR [rcx]
 100937e:	call   QWORD PTR [rax+0x48]
 1009381:	mov    edi,eax
 1009383:	test   eax,eax
 1009385:	jne    0x10093a1
 1009387:	mov    r8,QWORD PTR [rsp+0x78]
 100938c:	test   r8,r8
 100938f:	je     0x10093b1
 1009391:	lea    edx,[rax+0x28]
 1009394:	lea    rcx,[rbp+0xf20]
 100939b:	call   QWORD PTR [rip+0xffffffffffff7eef]        # 0x1001290
 10093a1:	mov    rcx,QWORD PTR [rsp+0x78]
 10093a6:	test   rcx,rcx
 10093a9:	je     0x10093b1
 10093ab:	call   QWORD PTR [rip+0xffffffffffff7f77]        # 0x1001328
 10093b1:	mov    rcx,QWORD PTR [rsp+0x68]
 10093b6:	test   rcx,rcx
 10093b9:	je     0x10093c1
 10093bb:	mov    rax,QWORD PTR [rcx]
 10093be:	call   QWORD PTR [rax+0x10]
 10093c1:	mov    rcx,QWORD PTR [rsp+0x70]
 10093c6:	test   rcx,rcx
 10093c9:	je     0x10093d1
 10093cb:	mov    rax,QWORD PTR [rcx]
 10093ce:	call   QWORD PTR [rax+0x10]
 10093d1:	mov    rcx,QWORD PTR [rsp+0x58]
 10093d6:	test   rcx,rcx
 10093d9:	je     0x10093e1
 10093db:	mov    rax,QWORD PTR [rcx]
 10093de:	call   QWORD PTR [rax+0x10]
 10093e1:	test   edi,edi
 10093e3:	jne    0x1009495
 10093e9:	lea    ecx,[rdi+0x1]
 10093ec:	mov    rdx,r14
 10093ef:	mov    QWORD PTR [rsp+0x60],rsi
 10093f4:	call   0x1004480
 10093f9:	mov    rcx,QWORD PTR [rbp-0x80]
 10093fd:	lea    rax,[rsp+0x60]
 1009402:	lea    rdx,[r14+0x618]
 1009409:	lea    r9d,[rdi+0x2]
 100940d:	xor    r8d,r8d
 1009410:	mov    QWORD PTR [rsp+0x20],rax
 1009415:	call   QWORD PTR [rip+0xffffffffffff7bed]        # 0x1001008
 100941b:	mov    edi,eax
 100941d:	test   eax,eax
 100941f:	jne    0x1009485
 1009421:	lea    rcx,[rbp+0xf20]
 1009428:	or     rax,0xffffffffffffffff
 100942c:	nop    DWORD PTR [rax+0x0]
 1009430:	inc    rax
 1009433:	cmp    WORD PTR [rcx+rax*2],r15w
 1009438:	jne    0x1009430
 100943a:	mov    rcx,QWORD PTR [rsp+0x60]
 100943f:	add    eax,eax
 1009441:	lea    rdx,[rip+0xffffffffffff83c8]        # 0x1001810
 1009448:	mov    DWORD PTR [rsp+0x28],eax
 100944c:	lea    rax,[rbp+0xf20]
 1009453:	mov    r9d,0x1
 1009459:	xor    r8d,r8d
 100945c:	mov    QWORD PTR [rsp+0x20],rax
 1009461:	call   QWORD PTR [rip+0xffffffffffff7bd9]        # 0x1001040
 1009467:	mov    edi,eax
 1009469:	test   eax,eax
 100946b:	jne    0x1009485
 100946d:	test   r13,r13
 1009470:	lea    rcx,[rip+0x4cb9]        # 0x100e130
 1009477:	mov    rdx,r14
 100947a:	cmovne rcx,r13
 100947e:	call   0x10065e0
 1009483:	mov    edi,eax
 1009485:	mov    rcx,QWORD PTR [rsp+0x60]
 100948a:	test   rcx,rcx
 100948d:	je     0x1009495
 100948f:	call   QWORD PTR [rip+0xffffffffffff7b6b]        # 0x1001000
 1009495:	mov    eax,edi
 1009497:	mov    rsi,QWORD PTR [rsp+0x1af0]
 100949f:	mov    rbx,QWORD PTR [rsp+0x1af8]
 10094a7:	mov    rdi,QWORD PTR [rsp+0x1ae8]
 10094af:	mov    rcx,QWORD PTR [rbp+0x19d0]
 10094b6:	xor    rcx,rsp
 10094b9:	call   0x1009d30
 10094be:	add    rsp,0x1b00
 10094c5:	pop    r15
 10094c7:	pop    r14
 10094c9:	pop    r13
 10094cb:	pop    r12
 10094cd:	pop    rbp
 10094ce:	ret    
 10094cf:	int3   
 10094d0:	int3   
 10094d1:	int3   
 10094d2:	int3   
 10094d3:	int3   
 10094d4:	int3   
 10094d5:	int3   
 10094d6:	int3   
 10094d7:	int3   
 10094d8:	int3   
 10094d9:	int3   
 10094da:	int3   
 10094db:	int3   
 10094dc:	int3   
 10094dd:	int3   
 10094de:	int3   
 10094df:	int3   
 10094e0:	rex push rbp
 10094e2:	push   rbx
 10094e3:	push   rsi
 10094e4:	push   rdi
 10094e5:	push   r14
 10094e7:	lea    rbp,[rsp-0x1380]
 10094ef:	mov    eax,0x1480
 10094f4:	call   0x1009cd0
 10094f9:	sub    rsp,rax
 10094fc:	mov    rax,QWORD PTR [rip+0x62cd]        # 0x100f7d0
 1009503:	xor    rax,rsp
 1009506:	mov    QWORD PTR [rbp+0x1370],rax
 100950d:	xor    edi,edi
 100950f:	mov    r14,rcx
 1009512:	mov    rbx,r8
 1009515:	mov    esi,edx
 1009517:	lea    rcx,[rbp+0xf54]
 100951e:	mov    r8d,0x206
 1009524:	xor    edx,edx
 1009526:	mov    QWORD PTR [rsp+0x50],rdi
 100952b:	mov    QWORD PTR [rsp+0x48],rdi
 1009530:	mov    QWORD PTR [rsp+0x60],rdi
 1009535:	mov    QWORD PTR [rsp+0x58],rdi
 100953a:	mov    DWORD PTR [rbp+0xf50],edi
 1009540:	call   0x1009d56
 1009545:	lea    rcx,[rsp+0x70]
 100954a:	mov    rdx,rbx
 100954d:	call   0x1004f60
 1009552:	test   eax,eax
 1009554:	jne    0x1009738
 100955a:	cmp    esi,0x1
 100955d:	jne    0x100956c
 100955f:	lea    rdx,[rsp+0x70]
 1009564:	mov    rcx,rbx
 1009567:	call   0x10045e0
 100956c:	mov    QWORD PTR [rsp+0x30],rdi
 1009571:	lea    rdx,[rbp+0x1160]
 1009578:	mov    r9d,0x1
 100957e:	mov    r8d,0x105
 1009584:	mov    rcx,r14
 1009587:	mov    DWORD PTR [rsp+0x28],0x1
 100958f:	mov    QWORD PTR [rsp+0x20],rbx
 1009594:	call   0x1003d90
 1009599:	mov    edi,eax
 100959b:	test   eax,eax
 100959d:	jne    0x10096f6
 10095a3:	lea    r8,[rsp+0x48]
 10095a8:	lea    rdx,[rip+0xffffffffffff9211]        # 0x10027c0
 10095af:	lea    rcx,[rbp+0x1160]
 10095b6:	call   QWORD PTR [rip+0x68cc]        # 0x100fe88
 10095bc:	mov    edi,eax
 10095be:	test   eax,eax
 10095c0:	js     0x10096f6
 10095c6:	mov    rdx,rbx
 10095c9:	mov    ecx,esi
 10095cb:	call   0x1004480
 10095d0:	lea    rax,[rsp+0x50]
 10095d5:	lea    rdx,[rbx+0x618]
 10095dc:	mov    r9d,0x2
 10095e2:	xor    r8d,r8d
 10095e5:	mov    rcx,r14
 10095e8:	mov    QWORD PTR [rsp+0x20],rax
 10095ed:	call   QWORD PTR [rip+0xffffffffffff7a15]        # 0x1001008
 10095f3:	test   eax,eax
 10095f5:	jne    0x1009688
 10095fb:	mov    rcx,QWORD PTR [rsp+0x48]
 1009600:	lea    r8,[rsp+0x60]
 1009605:	lea    rdx,[rip+0xffffffffffff9194]        # 0x10027a0
 100960c:	mov    rax,QWORD PTR [rcx]
 100960f:	call   QWORD PTR [rax]
 1009611:	test   eax,eax
 1009613:	js     0x1009688
 1009615:	mov    rcx,QWORD PTR [rsp+0x60]
 100961a:	lea    rdx,[rsp+0x58]
 100961f:	mov    rax,QWORD PTR [rcx]
 1009622:	call   QWORD PTR [rax+0x48]
 1009625:	mov    r8,QWORD PTR [rsp+0x58]
 100962a:	test   r8,r8
 100962d:	je     0x1009688
 100962f:	lea    rcx,[rbp+0xf00]
 1009636:	mov    edx,0x28
 100963b:	call   QWORD PTR [rip+0xffffffffffff7c4f]        # 0x1001290
 1009641:	lea    r11,[rbp+0xf00]
 1009648:	or     rax,0xffffffffffffffff
 100964c:	nop    DWORD PTR [rax+0x0]
 1009650:	inc    rax
 1009653:	cmp    WORD PTR [r11+rax*2],0x0
 1009659:	jne    0x1009650
 100965b:	mov    rcx,QWORD PTR [rsp+0x50]
 1009660:	add    eax,eax
 1009662:	lea    rdx,[rip+0xffffffffffff81a7]        # 0x1001810
 1009669:	mov    DWORD PTR [rsp+0x28],eax
 100966d:	lea    rax,[rbp+0xf00]
 1009674:	mov    r9d,0x1
 100967a:	xor    r8d,r8d
 100967d:	mov    QWORD PTR [rsp+0x20],rax
 1009682:	call   QWORD PTR [rip+0xffffffffffff79b8]        # 0x1001040
 1009688:	lea    rcx,[rbp+0xf50]
 100968f:	mov    r8,rbx
 1009692:	mov    edx,0x105
 1009697:	call   0x1006510
 100969c:	test   eax,eax
 100969e:	je     0x10096af
 10096a0:	lea    rcx,[rip+0x4a89]        # 0x100e130
 10096a7:	mov    rdx,rbx
 10096aa:	call   0x10065e0
 10096af:	cmp    DWORD PTR [rbx+0x10f4],0x0
 10096b6:	mov    rcx,QWORD PTR [rsp+0x48]
 10096bb:	lea    r9,[rsp+0x40]
 10096c0:	jne    0x10096d9
 10096c2:	mov    DWORD PTR [rsp+0x40],0x12
 10096ca:	mov    r8d,0x12
 10096d0:	lea    rdx,[rip+0x5c79]        # 0x100f350
 10096d7:	jmp    0x10096ee
 10096d9:	mov    DWORD PTR [rsp+0x40],0x18
 10096e1:	mov    r8d,0x18
 10096e7:	lea    rdx,[rip+0x5942]        # 0x100f030
 10096ee:	mov    rax,QWORD PTR [rcx]
 10096f1:	call   QWORD PTR [rax+0x28]
 10096f4:	mov    edi,eax
 10096f6:	mov    rcx,QWORD PTR [rsp+0x58]
 10096fb:	test   rcx,rcx
 10096fe:	je     0x1009706
 1009700:	call   QWORD PTR [rip+0xffffffffffff7c22]        # 0x1001328
 1009706:	mov    rcx,QWORD PTR [rsp+0x60]
 100970b:	test   rcx,rcx
 100970e:	je     0x1009716
 1009710:	mov    rax,QWORD PTR [rcx]
 1009713:	call   QWORD PTR [rax+0x10]
 1009716:	mov    rcx,QWORD PTR [rsp+0x48]
 100971b:	test   rcx,rcx
 100971e:	je     0x1009726
 1009720:	mov    rax,QWORD PTR [rcx]
 1009723:	call   QWORD PTR [rax+0x10]
 1009726:	mov    rcx,QWORD PTR [rsp+0x50]
 100972b:	test   rcx,rcx
 100972e:	je     0x1009736
 1009730:	call   QWORD PTR [rip+0xffffffffffff78ca]        # 0x1001000
 1009736:	mov    eax,edi
 1009738:	mov    rcx,QWORD PTR [rbp+0x1370]
 100973f:	xor    rcx,rsp
 1009742:	call   0x1009d30
 1009747:	add    rsp,0x1480
 100974e:	pop    r14
 1009750:	pop    rdi
 1009751:	pop    rsi
 1009752:	pop    rbx
 1009753:	pop    rbp
 1009754:	ret    
 1009755:	int3   
 1009756:	int3   
 1009757:	int3   
 1009758:	int3   
 1009759:	int3   
 100975a:	int3   
 100975b:	int3   
 100975c:	int3   
 100975d:	int3   
 100975e:	int3   
 100975f:	int3   
 1009760:	mov    QWORD PTR [rsp+0x10],rbx
 1009765:	push   rbp
 1009766:	push   rsi
 1009767:	push   rdi
 1009768:	mov    eax,0x1250
 100976d:	call   0x1009cd0
 1009772:	sub    rsp,rax
 1009775:	mov    rax,QWORD PTR [rip+0x6054]        # 0x100f7d0
 100977c:	xor    rax,rsp
 100977f:	mov    QWORD PTR [rsp+0x1240],rax
 1009787:	mov    rbp,rcx
 100978a:	mov    ebx,edx
 100978c:	lea    rcx,[rsp+0x50]
 1009791:	mov    rdx,r8
 1009794:	mov    rsi,r8
 1009797:	mov    edi,0x1
 100979c:	call   0x1004f60
 10097a1:	test   eax,eax
 10097a3:	jne    0x100991e
 10097a9:	cmp    ebx,edi
 10097ab:	jne    0x10097ba
 10097ad:	lea    rdx,[rsp+0x50]
 10097b2:	mov    rcx,rsi
 10097b5:	call   0x10045e0
 10097ba:	lea    rax,[rsp+0x30]
 10097bf:	lea    rdx,[rsi+0x618]
 10097c6:	mov    r9d,0x20019
 10097cc:	xor    r8d,r8d
 10097cf:	mov    rcx,rbp
 10097d2:	mov    QWORD PTR [rsp+0x20],rax
 10097d7:	call   QWORD PTR [rip+0xffffffffffff782b]        # 0x1001008
 10097dd:	test   eax,eax
 10097df:	jne    0x100982b
 10097e1:	mov    rcx,QWORD PTR [rsp+0x30]
 10097e6:	lea    rax,[rsp+0x44]
 10097eb:	lea    r9,[rsp+0x48]
 10097f0:	mov    QWORD PTR [rsp+0x28],rax
 10097f5:	lea    rax,[rsp+0xfe0]
 10097fd:	lea    rdx,[rip+0xffffffffffff800c]        # 0x1001810
 1009804:	xor    r8d,r8d
 1009807:	mov    DWORD PTR [rsp+0x44],0x50
 100980f:	mov    QWORD PTR [rsp+0x20],rax
 1009814:	call   QWORD PTR [rip+0xffffffffffff77f6]        # 0x1001010
 100981a:	mov    ebx,eax
 100981c:	test   eax,eax
 100981e:	je     0x100983f
 1009820:	mov    rcx,QWORD PTR [rsp+0x30]
 1009825:	call   QWORD PTR [rip+0xffffffffffff77d5]        # 0x1001000
 100982b:	mov    rcx,rsi
 100982e:	call   0x1005850
 1009833:	xor    edi,edi
 1009835:	mov    ebx,eax
 1009837:	test   eax,eax
 1009839:	jne    0x100991c
 100983f:	lea    r8,[rip+0xffffffffffff8002]        # 0x1001848
 1009846:	lea    rcx,[rsp+0x1030]
 100984e:	mov    edx,0x104
 1009853:	call   QWORD PTR [rip+0xffffffffffff7a37]        # 0x1001290
 1009859:	mov    edx,0x104
 100985e:	lea    rcx,[rsp+0x1030]
 1009866:	lea    r8,[rsp+0xfe0]
 100986e:	cmp    edi,0x1
 1009871:	je     0x100987a
 1009873:	lea    r8,[rsi+0xc30]
 100987a:	call   QWORD PTR [rip+0xffffffffffff7a20]        # 0x10012a0
 1009880:	lea    r8,[rip+0xffffffffffff7fdd]        # 0x1001864
 1009887:	lea    rcx,[rsp+0x1030]
 100988f:	mov    edx,0x104
 1009894:	call   QWORD PTR [rip+0xffffffffffff7a06]        # 0x10012a0
 100989a:	lea    r8,[rsp+0x38]
 100989f:	lea    rdx,[rip+0xffffffffffff8f1a]        # 0x10027c0
 10098a6:	lea    rcx,[rsp+0x1030]
 10098ae:	call   QWORD PTR [rip+0x65d4]        # 0x100fe88
 10098b4:	test   eax,eax
 10098b6:	js     0x100990a
 10098b8:	mov    rcx,QWORD PTR [rsp+0x38]
 10098bd:	mov    DWORD PTR [rsp+0x40],0x1
 10098c5:	lea    r9,[rsp+0x40]
 10098ca:	mov    rax,QWORD PTR [rcx]
 10098cd:	lea    rdx,[rip+0x5a5c]        # 0x100f330
 10098d4:	mov    r8d,0x1
 10098da:	call   QWORD PTR [rax+0x28]
 10098dd:	mov    rcx,QWORD PTR [rsp+0x38]
 10098e2:	mov    esi,eax
 10098e4:	test   eax,eax
 10098e6:	jns    0x1009902
 10098e8:	mov    rdx,QWORD PTR [rcx]
 10098eb:	call   QWORD PTR [rdx+0x10]
 10098ee:	cmp    edi,0x1
 10098f1:	jne    0x10098fe
 10098f3:	mov    rcx,QWORD PTR [rsp+0x30]
 10098f8:	call   QWORD PTR [rip+0xffffffffffff7702]        # 0x1001000
 10098fe:	mov    eax,esi
 1009900:	jmp    0x100991e
 1009902:	mov    rax,QWORD PTR [rcx]
 1009905:	call   QWORD PTR [rax+0x10]
 1009908:	jmp    0x100990c
 100990a:	mov    ebx,eax
 100990c:	cmp    edi,0x1
 100990f:	jne    0x100991c
 1009911:	mov    rcx,QWORD PTR [rsp+0x30]
 1009916:	call   QWORD PTR [rip+0xffffffffffff76e4]        # 0x1001000
 100991c:	mov    eax,ebx
 100991e:	mov    rcx,QWORD PTR [rsp+0x1240]
 1009926:	xor    rcx,rsp
 1009929:	call   0x1009d30
 100992e:	mov    rbx,QWORD PTR [rsp+0x1278]
 1009936:	add    rsp,0x1250
 100993d:	pop    rdi
 100993e:	pop    rsi
 100993f:	pop    rbp
 1009940:	ret    
 1009941:	int3   
 1009942:	int3   
 1009943:	int3   
 1009944:	int3   
 1009945:	int3   
 1009946:	int3   
 1009947:	int3   
 1009948:	sub    rsp,0x38
 100994c:	lea    rcx,[rip+0x5b5]        # 0x1009f08
 1009953:	call   0x1009ea8
 1009958:	mov    r11d,DWORD PTR [rip+0x656d]        # 0x100fecc
 100995f:	mov    r9d,DWORD PTR [rip+0x6562]        # 0x100fec8
 1009966:	lea    rax,[rip+0x654f]        # 0x100febc
 100996d:	lea    r8,[rip+0x6534]        # 0x100fea8
 1009974:	lea    rdx,[rip+0x6535]        # 0x100feb0
 100997b:	lea    rcx,[rip+0x651e]        # 0x100fea0
 1009982:	mov    DWORD PTR [rip+0x6533],r11d        # 0x100febc
 1009989:	mov    QWORD PTR [rsp+0x20],rax
 100998e:	call   QWORD PTR [rip+0xffffffffffff78d4]        # 0x1001268
 1009994:	mov    DWORD PTR [rip+0x651e],eax        # 0x100feb8
 100999a:	test   eax,eax
 100999c:	jns    0x10099a8
 100999e:	mov    ecx,0x8
 10099a3:	call   0x1009de2
 10099a8:	add    rsp,0x38
 10099ac:	ret    
 10099ad:	int3   
 10099ae:	int3   
 10099af:	int3   
 10099b0:	int3   
 10099b1:	int3   
 10099b2:	int3   
 10099b3:	int3   
 10099b4:	mov    QWORD PTR [rsp+0x8],rbx
 10099b9:	push   rdi
 10099ba:	sub    rsp,0x20
 10099be:	mov    rax,QWORD PTR gs:0x30
 10099c7:	mov    rbx,QWORD PTR [rax+0x8]
 10099cb:	xor    edi,edi
 10099cd:	xor    eax,eax
 10099cf:	lock cmpxchg QWORD PTR [rip+0x70d8],rbx        # 0x1010ab0
 10099d8:	je     0x10099f5
 10099da:	cmp    rax,rbx
 10099dd:	jne    0x10099e8
 10099df:	mov    ebx,0x1
 10099e4:	mov    edi,ebx
 10099e6:	jmp    0x10099fa
 10099e8:	mov    ecx,0x3e8
 10099ed:	call   QWORD PTR [rip+0xffffffffffff77a5]        # 0x1001198
 10099f3:	jmp    0x10099cd
 10099f5:	mov    ebx,0x1
 10099fa:	mov    eax,DWORD PTR [rip+0x70a8]        # 0x1010aa8
 1009a00:	cmp    eax,ebx
 1009a02:	jne    0x1009a10
 1009a04:	mov    ecx,0x1f
 1009a09:	call   0x1009de2
 1009a0e:	jmp    0x1009a47
 1009a10:	mov    eax,DWORD PTR [rip+0x7092]        # 0x1010aa8
 1009a16:	test   eax,eax
 1009a18:	jne    0x1009a41
 1009a1a:	mov    DWORD PTR [rip+0x7088],ebx        # 0x1010aa8
 1009a20:	lea    rdx,[rip+0xffffffffffff7981]        # 0x10013a8
 1009a27:	lea    rcx,[rip+0xffffffffffff7962]        # 0x1001390
 1009a2e:	call   0x100a044
 1009a33:	test   eax,eax
 1009a35:	je     0x1009a47
 1009a37:	mov    eax,0xff
 1009a3c:	jmp    0x1009b29
 1009a41:	mov    DWORD PTR [rip+0x647d],ebx        # 0x100fec4
 1009a47:	mov    eax,DWORD PTR [rip+0x705b]        # 0x1010aa8
 1009a4d:	cmp    eax,ebx
 1009a4f:	jne    0x1009a6e
 1009a51:	lea    rdx,[rip+0xffffffffffff7930]        # 0x1001388
 1009a58:	lea    rcx,[rip+0xffffffffffff7911]        # 0x1001370
 1009a5f:	call   0x100a038
 1009a64:	mov    DWORD PTR [rip+0x703a],0x2        # 0x1010aa8
 1009a6e:	test   edi,edi
 1009a70:	jne    0x1009a7b
 1009a72:	xor    eax,eax
 1009a74:	xchg   QWORD PTR [rip+0x7035],rax        # 0x1010ab0
 1009a7b:	cmp    QWORD PTR [rip+0x7045],0x0        # 0x1010ac8
 1009a83:	je     0x1009aa4
 1009a85:	lea    rcx,[rip+0x703c]        # 0x1010ac8
 1009a8c:	call   0x1009ff0
 1009a91:	test   eax,eax
 1009a93:	je     0x1009aa4
 1009a95:	xor    r8d,r8d
 1009a98:	lea    edx,[r8+0x2]
 1009a9c:	xor    ecx,ecx
 1009a9e:	call   QWORD PTR [rip+0x7024]        # 0x1010ac8
 1009aa4:	mov    rcx,QWORD PTR [rip+0xffffffffffff778d]        # 0x1001238
 1009aab:	mov    rax,QWORD PTR [rip+0x63f6]        # 0x100fea8
 1009ab2:	mov    QWORD PTR [rcx],rax
 1009ab5:	mov    r8,QWORD PTR [rip+0x63ec]        # 0x100fea8
 1009abc:	mov    rdx,QWORD PTR [rip+0x63ed]        # 0x100feb0
 1009ac3:	mov    ecx,DWORD PTR [rip+0x63d7]        # 0x100fea0
 1009ac9:	call   0x1003290
 1009ace:	mov    DWORD PTR [rip+0x63ec],eax        # 0x100fec0
 1009ad4:	cmp    DWORD PTR [rip+0x63c9],0x0        # 0x100fea4
 1009adb:	jne    0x1009ae5
 1009add:	mov    ecx,eax
 1009adf:	call   QWORD PTR [rip+0xffffffffffff775b]        # 0x1001240
 1009ae5:	cmp    DWORD PTR [rip+0x63d8],0x0        # 0x100fec4
 1009aec:	jne    0x1009afa
 1009aee:	call   QWORD PTR [rip+0xffffffffffff7754]        # 0x1001248
 1009af4:	mov    eax,DWORD PTR [rip+0x63c6]        # 0x100fec0
 1009afa:	jmp    0x1009b29
 1009afc:	mov    DWORD PTR [rip+0x63be],eax        # 0x100fec0
 1009b02:	cmp    DWORD PTR [rip+0x639b],0x0        # 0x100fea4
 1009b09:	jne    0x1009b14
 1009b0b:	mov    ecx,eax
 1009b0d:	call   QWORD PTR [rip+0xffffffffffff773d]        # 0x1001250
 1009b13:	int3   
 1009b14:	cmp    DWORD PTR [rip+0x63a9],0x0        # 0x100fec4
 1009b1b:	jne    0x1009b29
 1009b1d:	call   QWORD PTR [rip+0xffffffffffff7725]        # 0x1001248
 1009b23:	mov    eax,DWORD PTR [rip+0x6397]        # 0x100fec0
 1009b29:	mov    rbx,QWORD PTR [rsp+0x30]
 1009b2e:	add    rsp,0x20
 1009b32:	pop    rdi
 1009b33:	ret    
 1009b34:	int3   
 1009b35:	int3   
 1009b36:	int3   
 1009b37:	int3   
 1009b38:	int3   
 1009b39:	int3   
 1009b3a:	int3   
 1009b3b:	int3   
 1009b3c:	sub    rsp,0x28
 1009b40:	mov    eax,0x5a4d
 1009b45:	cmp    WORD PTR [rip+0xffffffffffff64b4],ax        # 0x1000000
 1009b4c:	je     0x1009b52
 1009b4e:	xor    ecx,ecx
 1009b50:	jmp    0x1009b8a
 1009b52:	movsxd rax,DWORD PTR [rip+0xffffffffffff64e3]        # 0x100003c
 1009b59:	lea    rcx,[rip+0xffffffffffff64a0]        # 0x1000000
 1009b60:	add    rax,rcx
 1009b63:	cmp    DWORD PTR [rax],0x4550
 1009b69:	jne    0x1009b4e
 1009b6b:	mov    ecx,0x20b
 1009b70:	cmp    WORD PTR [rax+0x18],cx
 1009b74:	jne    0x1009b4e
 1009b76:	xor    ecx,ecx
 1009b78:	cmp    DWORD PTR [rax+0x84],0xe
 1009b7f:	jbe    0x1009b8a
 1009b81:	cmp    DWORD PTR [rax+0xf8],ecx
 1009b87:	setne  cl
 1009b8a:	mov    DWORD PTR [rip+0x6314],ecx        # 0x100fea4
 1009b90:	mov    ecx,0x1
 1009b95:	call   QWORD PTR [rip+0xffffffffffff7665]        # 0x1001200
 1009b9b:	or     rcx,0xffffffffffffffff
 1009b9f:	call   QWORD PTR [rip+0xffffffffffff752b]        # 0x10010d0
 1009ba5:	mov    rcx,QWORD PTR [rip+0xffffffffffff765c]        # 0x1001208
 1009bac:	mov    QWORD PTR [rip+0x6f05],rax        # 0x1010ab8
 1009bb3:	mov    QWORD PTR [rip+0x6f06],rax        # 0x1010ac0
 1009bba:	mov    eax,DWORD PTR [rip+0x6314]        # 0x100fed4
 1009bc0:	mov    DWORD PTR [rcx],eax
 1009bc2:	mov    rdx,QWORD PTR [rip+0xffffffffffff7647]        # 0x1001210
 1009bc9:	mov    eax,DWORD PTR [rip+0x6301]        # 0x100fed0
 1009bcf:	mov    DWORD PTR [rdx],eax
 1009bd1:	call   0x1009ec8
 1009bd6:	call   0x100a05c
 1009bdb:	cmp    DWORD PTR [rip+0x5c0a],0x0        # 0x100f7ec
 1009be2:	jne    0x1009bf1
 1009be4:	lea    rcx,[rip+0x465]        # 0x100a050
 1009beb:	call   QWORD PTR [rip+0xffffffffffff7627]        # 0x1001218
 1009bf1:	cmp    DWORD PTR [rip+0x5bf0],0xffffffff        # 0x100f7e8
 1009bf8:	jne    0x1009c03
 1009bfa:	or     ecx,0xffffffff
 1009bfd:	call   QWORD PTR [rip+0xffffffffffff761d]        # 0x1001220
 1009c03:	xor    eax,eax
 1009c05:	add    rsp,0x28
 1009c09:	ret    
 1009c0a:	int3   
 1009c0b:	int3   
 1009c0c:	int3   
 1009c0d:	int3   
 1009c0e:	int3   
 1009c0f:	int3   
 1009c10:	sub    rsp,0x28
 1009c14:	call   0x100a068
 1009c19:	add    rsp,0x28
 1009c1d:	jmp    0x10099b4
 1009c22:	int3   
 1009c23:	int3   
 1009c24:	int3   
 1009c25:	int3   
 1009c26:	int3   
 1009c27:	int3   
 1009c28:	rex push rbx
 1009c2a:	sub    rsp,0x20
 1009c2e:	mov    r11d,DWORD PTR [r8]
 1009c31:	mov    rbx,rdx
 1009c34:	mov    r9,rcx
 1009c37:	and    r11d,0xfffffff8
 1009c3b:	test   BYTE PTR [r8],0x4
 1009c3f:	mov    r10,rcx
 1009c42:	je     0x1009c57
 1009c44:	mov    eax,DWORD PTR [r8+0x8]
 1009c48:	movsxd r10,DWORD PTR [r8+0x4]
 1009c4c:	neg    eax
 1009c4e:	add    r10,rcx
 1009c51:	movsxd rcx,eax
 1009c54:	and    r10,rcx
 1009c57:	movsxd rax,r11d
 1009c5a:	mov    rdx,QWORD PTR [rax+r10*1]
 1009c5e:	mov    rax,QWORD PTR [rbx+0x10]
 1009c62:	mov    ecx,DWORD PTR [rax+0x8]
 1009c65:	add    rcx,QWORD PTR [rbx+0x8]
 1009c69:	test   BYTE PTR [rcx+0x3],0xf
 1009c6d:	je     0x1009c7b
 1009c6f:	movzx  eax,BYTE PTR [rcx+0x3]
 1009c73:	and    eax,0xfffffff0
 1009c76:	cdqe   
 1009c78:	add    r9,rax
 1009c7b:	xor    r9,rdx
 1009c7e:	mov    rcx,r9
 1009c81:	add    rsp,0x20
 1009c85:	pop    rbx
 1009c86:	jmp    0x1009d30
 1009c8b:	int3   
 1009c8c:	int3   
 1009c8d:	int3   
 1009c8e:	int3   
 1009c8f:	int3   
 1009c90:	int3   
 1009c91:	int3   
 1009c92:	int3   
 1009c93:	int3   
 1009c94:	sub    rsp,0x28
 1009c98:	mov    r8,QWORD PTR [r9+0x38]
 1009c9c:	mov    rcx,rdx
 1009c9f:	mov    rdx,r9
 1009ca2:	call   0x1009c28
 1009ca7:	mov    eax,0x1
 1009cac:	add    rsp,0x28
 1009cb0:	ret    
 1009cb1:	int3   
 1009cb2:	int3   
 1009cb3:	int3   
 1009cb4:	int3   
 1009cb5:	int3   
 1009cb6:	int3   
 1009cb7:	int3   
 1009cb8:	int3   
 1009cb9:	int3   
 1009cba:	int3   
 1009cbb:	int3   
 1009cbc:	int3   
 1009cbd:	int3   
 1009cbe:	int3   
 1009cbf:	int3   
 1009cc0:	int3   
 1009cc1:	int3   
 1009cc2:	int3   
 1009cc3:	int3   
 1009cc4:	int3   
 1009cc5:	int3   
 1009cc6:	data16 nop WORD PTR [rax+rax*1+0x0]
 1009cd0:	sub    rsp,0x10
 1009cd4:	mov    QWORD PTR [rsp],r10
 1009cd8:	mov    QWORD PTR [rsp+0x8],r11
 1009cdd:	xor    r11,r11
 1009ce0:	lea    r10,[rsp+0x18]
 1009ce5:	sub    r10,rax
 1009ce8:	cmovb  r10,r11
 1009cec:	mov    r11,QWORD PTR gs:0x10
 1009cf5:	cmp    r10,r11
 1009cf8:	jae    0x1009d10
 1009cfa:	and    r10w,0xf000
 1009d00:	lea    r11,[r11-0x1000]
 1009d07:	mov    BYTE PTR [r11],0x0
 1009d0b:	cmp    r10,r11
 1009d0e:	jne    0x1009d00
 1009d10:	mov    r10,QWORD PTR [rsp]
 1009d14:	mov    r11,QWORD PTR [rsp+0x8]
 1009d19:	add    rsp,0x10
 1009d1d:	ret    
 1009d1e:	int3   
 1009d1f:	int3   
 1009d20:	int3   
 1009d21:	int3   
 1009d22:	int3   
 1009d23:	int3   
 1009d24:	int3   
 1009d25:	int3   
 1009d26:	data16 nop WORD PTR [rax+rax*1+0x0]
 1009d30:	cmp    rcx,QWORD PTR [rip+0x5a99]        # 0x100f7d0
 1009d37:	jne    0x1009d4a
 1009d39:	rol    rcx,0x10
 1009d3d:	test   cx,0xffff
 1009d42:	jne    0x1009d46
 1009d44:	repz ret 
 1009d46:	ror    rcx,0x10
 1009d4a:	jmp    0x100a124
 1009d4f:	int3   
 1009d50:	int3   
 1009d51:	int3   
 1009d52:	int3   
 1009d53:	int3   
 1009d54:	int3   
 1009d55:	int3   
 1009d56:	jmp    QWORD PTR [rip+0xffffffffffff7574]        # 0x10012d0
 1009d5c:	int3   
 1009d5d:	int3   
 1009d5e:	int3   
 1009d5f:	int3   
 1009d60:	int3   
 1009d61:	int3   
 1009d62:	jmp    QWORD PTR [rip+0xffffffffffff7560]        # 0x10012c8
 1009d68:	int3   
 1009d69:	int3   
 1009d6a:	int3   
 1009d6b:	int3   
 1009d6c:	int3   
 1009d6d:	int3   
 1009d6e:	jmp    QWORD PTR [rip+0xffffffffffff754c]        # 0x10012c0
 1009d74:	int3   
 1009d75:	int3   
 1009d76:	int3   
 1009d77:	int3   
 1009d78:	int3   
 1009d79:	int3   
 1009d7a:	int3   
 1009d7b:	int3   
 1009d7c:	sub    rsp,0x28
 1009d80:	mov    rax,QWORD PTR [rcx]
 1009d83:	cmp    DWORD PTR [rax],0xe06d7363
 1009d89:	jne    0x1009db6
 1009d8b:	cmp    DWORD PTR [rax+0x18],0x4
 1009d8f:	jne    0x1009db6
 1009d91:	mov    eax,DWORD PTR [rax+0x20]
 1009d94:	cmp    eax,0x19930520
 1009d99:	je     0x1009db0
 1009d9b:	cmp    eax,0x19930521
 1009da0:	je     0x1009db0
 1009da2:	cmp    eax,0x19930522
 1009da7:	je     0x1009db0
 1009da9:	cmp    eax,0x1994000
 1009dae:	jne    0x1009db6
 1009db0:	call   0x100a274
 1009db5:	int3   
 1009db6:	xor    eax,eax
 1009db8:	add    rsp,0x28
 1009dbc:	ret    
 1009dbd:	int3   
 1009dbe:	int3   
 1009dbf:	int3   
 1009dc0:	int3   
 1009dc1:	int3   
 1009dc2:	int3   
 1009dc3:	int3   
 1009dc4:	sub    rsp,0x28
 1009dc8:	lea    rcx,[rip+0xffffffffffffffad]        # 0x1009d7c
 1009dcf:	call   QWORD PTR [rip+0xffffffffffff72f3]        # 0x10010c8
 1009dd5:	xor    eax,eax
 1009dd7:	add    rsp,0x28
 1009ddb:	ret    
 1009ddc:	int3   
 1009ddd:	int3   
 1009dde:	int3   
 1009ddf:	int3   
 1009de0:	int3   
 1009de1:	int3   
 1009de2:	jmp    QWORD PTR [rip+0xffffffffffff7488]        # 0x1001270
 1009de8:	int3   
 1009de9:	int3   
 1009dea:	int3   
 1009deb:	int3   
 1009dec:	int3   
 1009ded:	int3   
 1009dee:	int3   
 1009def:	int3   
 1009df0:	rex push rbx
 1009df2:	sub    rsp,0x20
 1009df6:	mov    rbx,rcx
 1009df9:	mov    rcx,QWORD PTR [rip+0x6cc0]        # 0x1010ac0
 1009e00:	call   QWORD PTR [rip+0xffffffffffff72ba]        # 0x10010c0
 1009e06:	mov    QWORD PTR [rsp+0x38],rax
 1009e0b:	cmp    rax,0xffffffffffffffff
 1009e0f:	jne    0x1009e1c
 1009e11:	mov    rcx,rbx
 1009e14:	call   QWORD PTR [rip+0xffffffffffff73c6]        # 0x10011e0
 1009e1a:	jmp    0x1009e9a
 1009e1c:	mov    ecx,0x8
 1009e21:	call   0x100a298
 1009e26:	nop
 1009e27:	mov    rcx,QWORD PTR [rip+0x6c92]        # 0x1010ac0
 1009e2e:	call   QWORD PTR [rip+0xffffffffffff728c]        # 0x10010c0
 1009e34:	mov    QWORD PTR [rsp+0x38],rax
 1009e39:	mov    rcx,QWORD PTR [rip+0x6c78]        # 0x1010ab8
 1009e40:	call   QWORD PTR [rip+0xffffffffffff727a]        # 0x10010c0
 1009e46:	mov    QWORD PTR [rsp+0x40],rax
 1009e4b:	mov    rcx,rbx
 1009e4e:	call   QWORD PTR [rip+0xffffffffffff727c]        # 0x10010d0
 1009e54:	mov    rcx,rax
 1009e57:	lea    r8,[rsp+0x40]
 1009e5c:	lea    rdx,[rsp+0x38]
 1009e61:	call   0x100a28c
 1009e66:	mov    rbx,rax
 1009e69:	mov    rcx,QWORD PTR [rsp+0x38]
 1009e6e:	call   QWORD PTR [rip+0xffffffffffff725c]        # 0x10010d0
 1009e74:	mov    QWORD PTR [rip+0x6c45],rax        # 0x1010ac0
 1009e7b:	mov    rcx,QWORD PTR [rsp+0x40]
 1009e80:	call   QWORD PTR [rip+0xffffffffffff724a]        # 0x10010d0
 1009e86:	mov    QWORD PTR [rip+0x6c2b],rax        # 0x1010ab8
 1009e8d:	mov    ecx,0x8
 1009e92:	call   0x100a280
 1009e97:	mov    rax,rbx
 1009e9a:	add    rsp,0x20
 1009e9e:	pop    rbx
 1009e9f:	ret    
 1009ea0:	int3   
 1009ea1:	int3   
 1009ea2:	int3   
 1009ea3:	int3   
 1009ea4:	int3   
 1009ea5:	int3   
 1009ea6:	int3   
 1009ea7:	int3   
 1009ea8:	sub    rsp,0x28
 1009eac:	call   0x1009df0
 1009eb1:	neg    rax
 1009eb4:	sbb    eax,eax
 1009eb6:	neg    eax
 1009eb8:	dec    eax
 1009eba:	add    rsp,0x28
 1009ebe:	ret    
 1009ebf:	int3   
 1009ec0:	int3   
 1009ec1:	int3   
 1009ec2:	int3   
 1009ec3:	int3   
 1009ec4:	int3   
 1009ec5:	int3   
 1009ec6:	int3   
 1009ec7:	int3   
 1009ec8:	mov    QWORD PTR [rsp+0x8],rbx
 1009ecd:	push   rdi
 1009ece:	sub    rsp,0x20
 1009ed2:	lea    rbx,[rip+0xffffffffffff8f9f]        # 0x1002e78
 1009ed9:	lea    rdi,[rip+0xffffffffffff8f98]        # 0x1002e78
 1009ee0:	jmp    0x1009ef0
 1009ee2:	mov    rax,QWORD PTR [rbx]
 1009ee5:	test   rax,rax
 1009ee8:	je     0x1009eec
 1009eea:	call   rax
 1009eec:	add    rbx,0x8
 1009ef0:	cmp    rbx,rdi
 1009ef3:	jb     0x1009ee2
 1009ef5:	mov    rbx,QWORD PTR [rsp+0x30]
 1009efa:	add    rsp,0x20
 1009efe:	pop    rdi
 1009eff:	ret    
 1009f00:	int3   
 1009f01:	int3   
 1009f02:	int3   
 1009f03:	int3   
 1009f04:	int3   
 1009f05:	int3   
 1009f06:	int3   
 1009f07:	int3   
 1009f08:	mov    QWORD PTR [rsp+0x8],rbx
 1009f0d:	push   rdi
 1009f0e:	sub    rsp,0x20
 1009f12:	lea    rbx,[rip+0xffffffffffff8f6f]        # 0x1002e88
 1009f19:	lea    rdi,[rip+0xffffffffffff8f68]        # 0x1002e88
 1009f20:	jmp    0x1009f30
 1009f22:	mov    rax,QWORD PTR [rbx]
 1009f25:	test   rax,rax
 1009f28:	je     0x1009f2c
 1009f2a:	call   rax
 1009f2c:	add    rbx,0x8
 1009f30:	cmp    rbx,rdi
 1009f33:	jb     0x1009f22
 1009f35:	mov    rbx,QWORD PTR [rsp+0x30]
 1009f3a:	add    rsp,0x20
 1009f3e:	pop    rdi
 1009f3f:	ret    
 1009f40:	int3   
 1009f41:	int3   
 1009f42:	int3   
 1009f43:	int3   
 1009f44:	int3   
 1009f45:	int3   
 1009f46:	jmp    QWORD PTR [rip+0xffffffffffff7314]        # 0x1001260
 1009f4c:	int3   
 1009f4d:	int3   
 1009f4e:	int3   
 1009f4f:	int3   
 1009f50:	int3   
 1009f51:	int3   
 1009f52:	jmp    QWORD PTR [rip+0xffffffffffff7300]        # 0x1001258
 1009f58:	int3   
 1009f59:	int3   
 1009f5a:	int3   
 1009f5b:	int3   
 1009f5c:	int3   
 1009f5d:	int3   
 1009f5e:	int3   
 1009f5f:	int3   
 1009f60:	mov    rax,rcx
 1009f63:	mov    ecx,0x5a4d
 1009f68:	cmp    WORD PTR [rax],cx
 1009f6b:	je     0x1009f70
 1009f6d:	xor    eax,eax
 1009f6f:	ret    
 1009f70:	movsxd rcx,DWORD PTR [rax+0x3c]
 1009f74:	add    rcx,rax
 1009f77:	xor    eax,eax
 1009f79:	cmp    DWORD PTR [rcx],0x4550
 1009f7f:	jne    0x1009f8d
 1009f81:	mov    edx,0x20b
 1009f86:	cmp    WORD PTR [rcx+0x18],dx
 1009f8a:	sete   al
 1009f8d:	repz ret 
 1009f8f:	int3   
 1009f90:	int3   
 1009f91:	int3   
 1009f92:	int3   
 1009f93:	int3   
 1009f94:	int3   
 1009f95:	int3   
 1009f96:	int3   
 1009f97:	int3   
 1009f98:	int3   
 1009f99:	int3   
 1009f9a:	int3   
 1009f9b:	int3   
 1009f9c:	int3   
 1009f9d:	int3   
 1009f9e:	int3   
 1009f9f:	int3   
 1009fa0:	movsxd r8,DWORD PTR [rcx+0x3c]
 1009fa4:	xor    r9d,r9d
 1009fa7:	mov    r10,rdx
 1009faa:	add    r8,rcx
 1009fad:	movzx  eax,WORD PTR [r8+0x14]
 1009fb2:	movzx  r11d,WORD PTR [r8+0x6]
 1009fb7:	lea    rcx,[rax+r8*1+0x18]
 1009fbc:	test   r11d,r11d
 1009fbf:	je     0x1009fdf
 1009fc1:	mov    edx,DWORD PTR [rcx+0xc]
 1009fc4:	cmp    r10,rdx
 1009fc7:	jb     0x1009fd3
 1009fc9:	mov    eax,DWORD PTR [rcx+0x8]
 1009fcc:	add    eax,edx
 1009fce:	cmp    r10,rax
 1009fd1:	jb     0x1009fe2
 1009fd3:	inc    r9d
 1009fd6:	add    rcx,0x28
 1009fda:	cmp    r9d,r11d
 1009fdd:	jb     0x1009fc1
 1009fdf:	xor    eax,eax
 1009fe1:	ret    
 1009fe2:	mov    rax,rcx
 1009fe5:	ret    
 1009fe6:	int3   
 1009fe7:	int3   
 1009fe8:	int3   
 1009fe9:	int3   
 1009fea:	int3   
 1009feb:	int3   
 1009fec:	int3   
 1009fed:	int3   
 1009fee:	int3   
 1009fef:	int3   
 1009ff0:	sub    rsp,0x28
 1009ff4:	mov    r8,rcx
 1009ff7:	lea    r9,[rip+0xffffffffffff6002]        # 0x1000000
 1009ffe:	mov    rcx,r9
 100a001:	call   0x1009f60
 100a006:	test   eax,eax
 100a008:	je     0x100a02c
 100a00a:	sub    r8,r9
 100a00d:	mov    rdx,r8
 100a010:	mov    rcx,r9
 100a013:	call   0x1009fa0
 100a018:	test   rax,rax
 100a01b:	je     0x100a02c
 100a01d:	mov    eax,DWORD PTR [rax+0x24]
 100a020:	shr    eax,0x1f
 100a023:	not    eax
 100a025:	and    eax,0x1
 100a028:	jmp    0x100a02c
 100a02a:	xor    eax,eax
 100a02c:	add    rsp,0x28
 100a030:	ret    
 100a031:	int3   
 100a032:	int3   
 100a033:	int3   
 100a034:	int3   
 100a035:	int3   
 100a036:	int3   
 100a037:	int3   
 100a038:	jmp    QWORD PTR [rip+0xffffffffffff71f2]        # 0x1001230
 100a03e:	int3   
 100a03f:	int3   
 100a040:	int3   
 100a041:	int3   
 100a042:	int3   
 100a043:	int3   
 100a044:	jmp    QWORD PTR [rip+0xffffffffffff71de]        # 0x1001228
 100a04a:	int3   
 100a04b:	int3   
 100a04c:	int3   
 100a04d:	int3   
 100a04e:	int3   
 100a04f:	int3   
 100a050:	xor    eax,eax
 100a052:	ret    
 100a053:	int3   
 100a054:	int3   
 100a055:	int3   
 100a056:	int3   
 100a057:	int3   
 100a058:	int3   
 100a059:	int3   
 100a05a:	int3   
 100a05b:	int3   
 100a05c:	xor    eax,eax
 100a05e:	ret    
 100a05f:	int3   
 100a060:	int3   
 100a061:	int3   
 100a062:	int3   
 100a063:	int3   
 100a064:	int3   
 100a065:	int3   
 100a066:	int3   
 100a067:	int3   
 100a068:	mov    QWORD PTR [rsp+0x18],rbx
 100a06d:	push   rdi
 100a06e:	sub    rsp,0x20
 100a072:	mov    rax,QWORD PTR [rip+0x5757]        # 0x100f7d0
 100a079:	and    QWORD PTR [rsp+0x30],0x0
 100a07f:	movabs rdi,0x2b992ddfa232
 100a089:	cmp    rax,rdi
 100a08c:	je     0x100a09a
 100a08e:	not    rax
 100a091:	mov    QWORD PTR [rip+0x5740],rax        # 0x100f7d8
 100a098:	jmp    0x100a110
 100a09a:	lea    rcx,[rsp+0x30]
 100a09f:	call   QWORD PTR [rip+0xffffffffffff6ffb]        # 0x10010a0
 100a0a5:	mov    rbx,QWORD PTR [rsp+0x30]
 100a0aa:	call   QWORD PTR [rip+0xffffffffffff6ff8]        # 0x10010a8
 100a0b0:	mov    r11d,eax
 100a0b3:	xor    rbx,r11
 100a0b6:	call   QWORD PTR [rip+0xffffffffffff6ff4]        # 0x10010b0
 100a0bc:	mov    r11d,eax
 100a0bf:	xor    rbx,r11
 100a0c2:	call   QWORD PTR [rip+0xffffffffffff7090]        # 0x1001158
 100a0c8:	lea    rcx,[rsp+0x38]
 100a0cd:	mov    r11d,eax
 100a0d0:	xor    rbx,r11
 100a0d3:	call   QWORD PTR [rip+0xffffffffffff6fdf]        # 0x10010b8
 100a0d9:	mov    r11,QWORD PTR [rsp+0x38]
 100a0de:	xor    r11,rbx
 100a0e1:	movabs rax,0xffffffffffff
 100a0eb:	and    r11,rax
 100a0ee:	movabs rax,0x2b992ddfa233
 100a0f8:	cmp    r11,rdi
 100a0fb:	cmove  r11,rax
 100a0ff:	mov    QWORD PTR [rip+0x56ca],r11        # 0x100f7d0
 100a106:	not    r11
 100a109:	mov    QWORD PTR [rip+0x56c8],r11        # 0x100f7d8
 100a110:	mov    rbx,QWORD PTR [rsp+0x40]
 100a115:	add    rsp,0x20
 100a119:	pop    rdi
 100a11a:	ret    
 100a11b:	int3   
 100a11c:	int3   
 100a11d:	int3   
 100a11e:	int3   
 100a11f:	int3   
 100a120:	int3   
 100a121:	int3   
 100a122:	int3   
 100a123:	int3   
 100a124:	mov    QWORD PTR [rsp+0x8],rcx
 100a129:	sub    rsp,0x88
 100a130:	lea    rcx,[rip+0x5e49]        # 0x100ff80
 100a137:	call   QWORD PTR [rip+0xffffffffffff6f2b]        # 0x1001068
 100a13d:	mov    rax,QWORD PTR [rip+0x5f34]        # 0x1010078
 100a144:	mov    QWORD PTR [rsp+0x58],rax
 100a149:	xor    r8d,r8d
 100a14c:	lea    rdx,[rsp+0x60]
 100a151:	mov    rcx,QWORD PTR [rsp+0x58]
 100a156:	call   0x100c1e8
 100a15b:	mov    QWORD PTR [rsp+0x50],rax
 100a160:	cmp    QWORD PTR [rsp+0x50],0x0
 100a166:	je     0x100a1a9
 100a168:	mov    QWORD PTR [rsp+0x38],0x0
 100a171:	lea    rax,[rsp+0x48]
 100a176:	mov    QWORD PTR [rsp+0x30],rax
 100a17b:	lea    rax,[rsp+0x40]
 100a180:	mov    QWORD PTR [rsp+0x28],rax
 100a185:	lea    rax,[rip+0x5df4]        # 0x100ff80
 100a18c:	mov    QWORD PTR [rsp+0x20],rax
 100a191:	mov    r9,QWORD PTR [rsp+0x50]
 100a196:	mov    r8,QWORD PTR [rsp+0x58]
 100a19b:	mov    rdx,QWORD PTR [rsp+0x60]
 100a1a0:	xor    ecx,ecx
 100a1a2:	call   0x100c1dc
 100a1a7:	jmp    0x100a1cb
 100a1a9:	mov    rax,QWORD PTR [rsp+0x88]
 100a1b1:	mov    QWORD PTR [rip+0x5ec0],rax        # 0x1010078
 100a1b8:	lea    rax,[rsp+0x88]
 100a1c0:	add    rax,0x8
 100a1c4:	mov    QWORD PTR [rip+0x5e4d],rax        # 0x1010018
 100a1cb:	mov    rax,QWORD PTR [rip+0x5ea6]        # 0x1010078
 100a1d2:	mov    QWORD PTR [rip+0x5d17],rax        # 0x100fef0
 100a1d9:	mov    rax,QWORD PTR [rsp+0x90]
 100a1e1:	mov    QWORD PTR [rip+0x5e18],rax        # 0x1010000
 100a1e8:	mov    DWORD PTR [rip+0x5cee],0xc0000409        # 0x100fee0
 100a1f2:	mov    DWORD PTR [rip+0x5ce8],0x1        # 0x100fee4
 100a1fc:	mov    rax,QWORD PTR [rip+0x55cd]        # 0x100f7d0
 100a203:	mov    QWORD PTR [rsp+0x68],rax
 100a208:	mov    rax,QWORD PTR [rip+0x55c9]        # 0x100f7d8
 100a20f:	mov    QWORD PTR [rsp+0x70],rax
 100a214:	call   QWORD PTR [rip+0xffffffffffff6e66]        # 0x1001080
 100a21a:	mov    DWORD PTR [rip+0x5d58],eax        # 0x100ff78
 100a220:	mov    ecx,0x1
 100a225:	call   0x100a2a4
 100a22a:	xor    ecx,ecx
 100a22c:	call   QWORD PTR [rip+0xffffffffffff6e96]        # 0x10010c8
 100a232:	lea    rcx,[rip+0xffffffffffff8537]        # 0x1002770
 100a239:	call   QWORD PTR [rip+0xffffffffffff6f79]        # 0x10011b8
 100a23f:	cmp    DWORD PTR [rip+0x5d32],0x0        # 0x100ff78
 100a246:	jne    0x100a252
 100a248:	mov    ecx,0x1
 100a24d:	call   0x100a2a4
 100a252:	call   QWORD PTR [rip+0xffffffffffff6e38]        # 0x1001090
 100a258:	mov    edx,0xc0000409
 100a25d:	mov    rcx,rax
 100a260:	call   QWORD PTR [rip+0xffffffffffff6e32]        # 0x1001098
 100a266:	add    rsp,0x88
 100a26d:	ret    
 100a26e:	int3   
 100a26f:	int3   
 100a270:	int3   
 100a271:	int3   
 100a272:	int3   
 100a273:	int3   
 100a274:	jmp    QWORD PTR [rip+0xffffffffffff6f7e]        # 0x10011f8
 100a27a:	int3   
 100a27b:	int3   
 100a27c:	int3   
 100a27d:	int3   
 100a27e:	int3   
 100a27f:	int3   
 100a280:	jmp    QWORD PTR [rip+0xffffffffffff6f6a]        # 0x10011f0
 100a286:	int3   
 100a287:	int3   
 100a288:	int3   
 100a289:	int3   
 100a28a:	int3   
 100a28b:	int3   
 100a28c:	jmp    QWORD PTR [rip+0xffffffffffff6f56]        # 0x10011e8
 100a292:	int3   
 100a293:	int3   
 100a294:	int3   
 100a295:	int3   
 100a296:	int3   
 100a297:	int3   
 100a298:	jmp    QWORD PTR [rip+0xffffffffffff7062]        # 0x1001300
 100a29e:	int3   
 100a29f:	int3   
 100a2a0:	int3   
 100a2a1:	int3   
 100a2a2:	int3   
 100a2a3:	int3   
 100a2a4:	jmp    QWORD PTR [rip+0xffffffffffff6f2e]        # 0x10011d8
 100a2aa:	int3   
 100a2ab:	int3   
 100a2ac:	int3   
 100a2ad:	int3   
 100a2ae:	int3   
 100a2af:	int3   
 100a2b0:	jmp    QWORD PTR [rip+0xffffffffffff7062]        # 0x1001318
 100a2b6:	int3   
 100a2b7:	int3   
 100a2b8:	int3   
 100a2b9:	int3   
 100a2ba:	int3   
 100a2bb:	int3   
 100a2bc:	jmp    QWORD PTR [rip+0xffffffffffff704e]        # 0x1001310
 100a2c2:	int3   
 100a2c3:	int3   
 100a2c4:	int3   
 100a2c5:	int3   
 100a2c6:	int3   
 100a2c7:	int3   
 100a2c8:	int3   
 100a2c9:	int3   
 100a2ca:	int3   
 100a2cb:	int3   
 100a2cc:	int3   
 100a2cd:	int3   
 100a2ce:	int3   
 100a2cf:	int3   
 100a2d0:	sub    rsp,0x308
 100a2d7:	mov    rax,QWORD PTR [rip+0x54f2]        # 0x100f7d0
 100a2de:	xor    rax,rsp
 100a2e1:	mov    QWORD PTR [rsp+0x2f8],rax
 100a2e9:	mov    QWORD PTR [rsp+0x280],0x0
 100a2f5:	mov    DWORD PTR [rsp+0x250],0x104
 100a300:	mov    DWORD PTR [rsp+0x25c],0x0
 100a30b:	mov    QWORD PTR [rsp+0x278],0x0
 100a317:	mov    QWORD PTR [rsp+0x260],0x0
 100a323:	mov    QWORD PTR [rsp+0x268],0x0
 100a32f:	mov    QWORD PTR [rsp+0x288],0x0
 100a33b:	mov    DWORD PTR [rsp+0x258],0x0
 100a346:	mov    DWORD PTR [rsp+0x274],0x0
 100a351:	mov    DWORD PTR [rsp+0x254],0x409
 100a35c:	lea    rax,[rsp+0x280]
 100a364:	mov    QWORD PTR [rsp+0x20],rax
 100a369:	mov    r9d,0x20019
 100a36f:	xor    r8d,r8d
 100a372:	lea    rdx,[rip+0xffffffffffff8797]        # 0x1002b10
 100a379:	mov    rcx,0xffffffff80000002
 100a380:	call   0x100af50
 100a385:	mov    DWORD PTR [rsp+0x270],eax
 100a38c:	cmp    DWORD PTR [rsp+0x270],0x0
 100a394:	je     0x100a39b
 100a396:	jmp    0x100aa8c
 100a39b:	lea    rax,[rsp+0x250]
 100a3a3:	mov    QWORD PTR [rsp+0x28],rax
 100a3a8:	lea    rax,[rsp+0x40]
 100a3ad:	mov    QWORD PTR [rsp+0x20],rax
 100a3b2:	xor    r9d,r9d
 100a3b5:	xor    r8d,r8d
 100a3b8:	lea    rdx,[rip+0xffffffffffff8739]        # 0x1002af8
 100a3bf:	mov    rcx,QWORD PTR [rsp+0x280]
 100a3c7:	call   0x100af90
 100a3cc:	mov    DWORD PTR [rsp+0x270],eax
 100a3d3:	cmp    DWORD PTR [rsp+0x270],0x0
 100a3db:	je     0x100a3e2
 100a3dd:	jmp    0x100aa8c
 100a3e2:	lea    rcx,[rip+0xffffffffffff732f]        # 0x1001718
 100a3e9:	call   QWORD PTR [rip+0xffffffffffff6d19]        # 0x1001108
 100a3ef:	lea    rdx,[rip+0xffffffffffff86ea]        # 0x1002ae0
 100a3f6:	mov    rcx,rax
 100a3f9:	call   QWORD PTR [rip+0xffffffffffff6da9]        # 0x10011a8
 100a3ff:	mov    QWORD PTR [rsp+0x268],rax
 100a407:	lea    rcx,[rip+0xffffffffffff730a]        # 0x1001718
 100a40e:	call   QWORD PTR [rip+0xffffffffffff6cf4]        # 0x1001108
 100a414:	lea    rdx,[rip+0xffffffffffff86ad]        # 0x1002ac8
 100a41b:	mov    rcx,rax
 100a41e:	call   QWORD PTR [rip+0xffffffffffff6d84]        # 0x10011a8
 100a424:	mov    QWORD PTR [rsp+0x288],rax
 100a42c:	cmp    QWORD PTR [rsp+0x268],0x0
 100a435:	je     0x100a442
 100a437:	cmp    QWORD PTR [rsp+0x288],0x0
 100a440:	jne    0x100a452
 100a442:	mov    DWORD PTR [rsp+0x274],0x1
 100a44d:	jmp    0x100a667
 100a452:	xor    edx,edx
 100a454:	xor    ecx,ecx
 100a456:	call   QWORD PTR [rsp+0x288]
 100a45d:	mov    DWORD PTR [rsp+0x25c],eax
 100a464:	mov    eax,DWORD PTR [rsp+0x25c]
 100a46b:	mov    DWORD PTR [rsp+0x250],eax
 100a472:	lea    rcx,[rsp+0x40]
 100a477:	call   QWORD PTR [rip+0xffffffffffff6c83]        # 0x1001100
 100a47d:	mov    ecx,DWORD PTR [rsp+0x250]
 100a484:	lea    eax,[rcx+rax*1+0x2]
 100a488:	mov    DWORD PTR [rsp+0x250],eax
 100a48f:	cmp    QWORD PTR [rsp+0x278],0x0
 100a498:	je     0x100a52f
 100a49e:	mov    QWORD PTR [rsp+0x290],0x0
 100a4aa:	mov    eax,DWORD PTR [rsp+0x250]
 100a4b1:	shl    rax,1
 100a4b4:	mov    QWORD PTR [rsp+0x2c8],rax
 100a4bc:	call   QWORD PTR [rip+0xffffffffffff6c36]        # 0x10010f8
 100a4c2:	mov    rcx,QWORD PTR [rsp+0x2c8]
 100a4ca:	mov    r9,rcx
 100a4cd:	mov    r8,QWORD PTR [rsp+0x278]
 100a4d5:	mov    edx,0x8
 100a4da:	mov    rcx,rax
 100a4dd:	call   QWORD PTR [rip+0xffffffffffff6c0d]        # 0x10010f0
 100a4e3:	mov    QWORD PTR [rsp+0x290],rax
 100a4eb:	cmp    QWORD PTR [rsp+0x290],0x0
 100a4f4:	jne    0x100a51d
 100a4f6:	call   QWORD PTR [rip+0xffffffffffff6bfc]        # 0x10010f8
 100a4fc:	mov    r8,QWORD PTR [rsp+0x278]
 100a504:	xor    edx,edx
 100a506:	mov    rcx,rax
 100a509:	call   QWORD PTR [rip+0xffffffffffff6bd9]        # 0x10010e8
 100a50f:	mov    QWORD PTR [rsp+0x278],0x0
 100a51b:	jmp    0x100a52d
 100a51d:	mov    rax,QWORD PTR [rsp+0x290]
 100a525:	mov    QWORD PTR [rsp+0x278],rax
 100a52d:	jmp    0x100a568
 100a52f:	mov    eax,DWORD PTR [rsp+0x250]
 100a536:	shl    rax,1
 100a539:	mov    QWORD PTR [rsp+0x2d0],rax
 100a541:	call   QWORD PTR [rip+0xffffffffffff6bb1]        # 0x10010f8
 100a547:	mov    rcx,QWORD PTR [rsp+0x2d0]
 100a54f:	mov    r8,rcx
 100a552:	mov    edx,0x8
 100a557:	mov    rcx,rax
 100a55a:	call   QWORD PTR [rip+0xffffffffffff6b80]        # 0x10010e0
 100a560:	mov    QWORD PTR [rsp+0x278],rax
 100a568:	cmp    QWORD PTR [rsp+0x278],0x0
 100a571:	je     0x100a590
 100a573:	mov    rdx,QWORD PTR [rsp+0x278]
 100a57b:	mov    ecx,DWORD PTR [rsp+0x250]
 100a582:	call   QWORD PTR [rsp+0x288]
 100a589:	mov    DWORD PTR [rsp+0x25c],eax
 100a590:	cmp    QWORD PTR [rsp+0x278],0x0
 100a599:	je     0x100a5af
 100a59b:	mov    eax,DWORD PTR [rsp+0x250]
 100a5a2:	cmp    DWORD PTR [rsp+0x25c],eax
 100a5a9:	jae    0x100a452
 100a5af:	cmp    QWORD PTR [rsp+0x278],0x0
 100a5b8:	je     0x100a5c9
 100a5ba:	mov    rax,QWORD PTR [rsp+0x278]
 100a5c2:	movzx  eax,WORD PTR [rax]
 100a5c5:	test   eax,eax
 100a5c7:	jne    0x100a5f3
 100a5c9:	lea    rcx,[rsp+0x40]
 100a5ce:	call   QWORD PTR [rsp+0x268]
 100a5d5:	mov    DWORD PTR [rsp+0x258],eax
 100a5dc:	cmp    DWORD PTR [rsp+0x258],0x0
 100a5e4:	jne    0x100a5f1
 100a5e6:	mov    DWORD PTR [rsp+0x274],0x1
 100a5f1:	jmp    0x100a667
 100a5f3:	mov    DWORD PTR [rsp+0x28],0xffffffff
 100a5fb:	lea    rax,[rsp+0x40]
 100a600:	mov    QWORD PTR [rsp+0x20],rax
 100a605:	mov    r9d,0xffffffff
 100a60b:	mov    r8,QWORD PTR [rsp+0x278]
 100a613:	mov    edx,0x1
 100a618:	mov    ecx,DWORD PTR [rsp+0x254]
 100a61f:	call   QWORD PTR [rip+0xffffffffffff6ab3]        # 0x10010d8
 100a625:	cmp    eax,0x2
 100a628:	je     0x100a65c
 100a62a:	mov    DWORD PTR [rsp+0x274],0x1
 100a635:	call   QWORD PTR [rip+0xffffffffffff6abd]        # 0x10010f8
 100a63b:	mov    r8,QWORD PTR [rsp+0x278]
 100a643:	xor    edx,edx
 100a645:	mov    rcx,rax
 100a648:	call   QWORD PTR [rip+0xffffffffffff6a9a]        # 0x10010e8
 100a64e:	mov    QWORD PTR [rsp+0x278],0x0
 100a65a:	jmp    0x100a667
 100a65c:	mov    DWORD PTR [rsp+0x258],0x1
 100a667:	cmp    DWORD PTR [rsp+0x274],0x0
 100a66f:	je     0x100aa8c
 100a675:	xor    r8d,r8d
 100a678:	xor    edx,edx
 100a67a:	lea    rcx,[rip+0xffffffffffff8437]        # 0x1002ab8
 100a681:	call   QWORD PTR [rip+0xffffffffffff6a01]        # 0x1001088
 100a687:	mov    DWORD PTR [rsp+0x25c],eax
 100a68e:	mov    eax,DWORD PTR [rsp+0x25c]
 100a695:	mov    DWORD PTR [rsp+0x250],eax
 100a69c:	cmp    DWORD PTR [rsp+0x250],0x0
 100a6a4:	jne    0x100a6c4
 100a6a6:	lea    rdx,[rsp+0x40]
 100a6ab:	lea    rcx,[rip+0xffffffffffff8406]        # 0x1002ab8
 100a6b2:	call   QWORD PTR [rip+0xffffffffffff69a8]        # 0x1001060
 100a6b8:	mov    DWORD PTR [rsp+0x258],eax
 100a6bf:	jmp    0x100aa8c
 100a6c4:	mov    DWORD PTR [rsp+0x2a8],0x0
 100a6cf:	mov    QWORD PTR [rsp+0x2a0],0x0
 100a6db:	mov    DWORD PTR [rsp+0x298],0x0
 100a6e6:	lea    rcx,[rsp+0x40]
 100a6eb:	call   QWORD PTR [rip+0xffffffffffff6a0f]        # 0x1001100
 100a6f1:	add    eax,0x1
 100a6f4:	mov    DWORD PTR [rsp+0x29c],eax
 100a6fb:	mov    eax,DWORD PTR [rsp+0x25c]
 100a702:	mov    DWORD PTR [rsp+0x250],eax
 100a709:	lea    rcx,[rsp+0x40]
 100a70e:	call   QWORD PTR [rip+0xffffffffffff69ec]        # 0x1001100
 100a714:	mov    ecx,DWORD PTR [rsp+0x250]
 100a71b:	lea    eax,[rcx+rax*1+0x2]
 100a71f:	mov    DWORD PTR [rsp+0x250],eax
 100a726:	cmp    QWORD PTR [rsp+0x278],0x0
 100a72f:	je     0x100a7c6
 100a735:	mov    QWORD PTR [rsp+0x2b0],0x0
 100a741:	mov    eax,DWORD PTR [rsp+0x250]
 100a748:	shl    rax,1
 100a74b:	mov    QWORD PTR [rsp+0x2d8],rax
 100a753:	call   QWORD PTR [rip+0xffffffffffff699f]        # 0x10010f8
 100a759:	mov    rcx,QWORD PTR [rsp+0x2d8]
 100a761:	mov    r9,rcx
 100a764:	mov    r8,QWORD PTR [rsp+0x278]
 100a76c:	mov    edx,0x8
 100a771:	mov    rcx,rax
 100a774:	call   QWORD PTR [rip+0xffffffffffff6976]        # 0x10010f0
 100a77a:	mov    QWORD PTR [rsp+0x2b0],rax
 100a782:	cmp    QWORD PTR [rsp+0x2b0],0x0
 100a78b:	jne    0x100a7b4
 100a78d:	call   QWORD PTR [rip+0xffffffffffff6965]        # 0x10010f8
 100a793:	mov    r8,QWORD PTR [rsp+0x278]
 100a79b:	xor    edx,edx
 100a79d:	mov    rcx,rax
 100a7a0:	call   QWORD PTR [rip+0xffffffffffff6942]        # 0x10010e8
 100a7a6:	mov    QWORD PTR [rsp+0x278],0x0
 100a7b2:	jmp    0x100a7c4
 100a7b4:	mov    rax,QWORD PTR [rsp+0x2b0]
 100a7bc:	mov    QWORD PTR [rsp+0x278],rax
 100a7c4:	jmp    0x100a7ff
 100a7c6:	mov    eax,DWORD PTR [rsp+0x250]
 100a7cd:	shl    rax,1
 100a7d0:	mov    QWORD PTR [rsp+0x2e0],rax
 100a7d8:	call   QWORD PTR [rip+0xffffffffffff691a]        # 0x10010f8
 100a7de:	mov    rcx,QWORD PTR [rsp+0x2e0]
 100a7e6:	mov    r8,rcx
 100a7e9:	mov    edx,0x8
 100a7ee:	mov    rcx,rax
 100a7f1:	call   QWORD PTR [rip+0xffffffffffff68e9]        # 0x10010e0
 100a7f7:	mov    QWORD PTR [rsp+0x278],rax
 100a7ff:	cmp    QWORD PTR [rsp+0x278],0x0
 100a808:	je     0x100a82e
 100a80a:	mov    r8d,DWORD PTR [rsp+0x250]
 100a812:	mov    rdx,QWORD PTR [rsp+0x278]
 100a81a:	lea    rcx,[rip+0xffffffffffff8297]        # 0x1002ab8
 100a821:	call   QWORD PTR [rip+0xffffffffffff6861]        # 0x1001088
 100a827:	mov    DWORD PTR [rsp+0x25c],eax
 100a82e:	cmp    QWORD PTR [rsp+0x278],0x0
 100a837:	je     0x100a84d
 100a839:	mov    eax,DWORD PTR [rsp+0x250]
 100a840:	cmp    DWORD PTR [rsp+0x25c],eax
 100a847:	jae    0x100a6fb
 100a84d:	mov    rax,QWORD PTR [rsp+0x278]
 100a855:	mov    QWORD PTR [rsp+0x2a0],rax
 100a85d:	mov    eax,DWORD PTR [rsp+0x25c]
 100a864:	add    eax,0x1
 100a867:	mov    DWORD PTR [rsp+0x298],eax
 100a86e:	cmp    DWORD PTR [rsp+0x2a8],0x0
 100a876:	jne    0x100a9aa
 100a87c:	mov    eax,DWORD PTR [rsp+0x29c]
 100a883:	cmp    DWORD PTR [rsp+0x298],eax
 100a88a:	jb     0x100a9aa
 100a890:	mov    DWORD PTR [rsp+0x2bc],0x0
 100a89b:	mov    DWORD PTR [rsp+0x2b8],0x0
 100a8a6:	mov    WORD PTR [rsp+0x2c0],0x0
 100a8b0:	mov    eax,DWORD PTR [rsp+0x2bc]
 100a8b7:	mov    rcx,QWORD PTR [rsp+0x2a0]
 100a8bf:	movzx  eax,WORD PTR [rcx+rax*2]
 100a8c3:	mov    WORD PTR [rsp+0x2c0],ax
 100a8cb:	movzx  eax,WORD PTR [rsp+0x2c0]
 100a8d3:	mov    ecx,DWORD PTR [rsp+0x2bc]
 100a8da:	movzx  ecx,WORD PTR [rsp+rcx*2+0x40]
 100a8df:	cmp    eax,ecx
 100a8e1:	jne    0x100a8f0
 100a8e3:	mov    DWORD PTR [rsp+0x2e8],0x1
 100a8ee:	jmp    0x100a8fb
 100a8f0:	mov    DWORD PTR [rsp+0x2e8],0x0
 100a8fb:	mov    eax,DWORD PTR [rsp+0x2e8]
 100a902:	mov    DWORD PTR [rsp+0x2b8],eax
 100a909:	cmp    DWORD PTR [rsp+0x2b8],0x0
 100a911:	je     0x100a93e
 100a913:	mov    eax,DWORD PTR [rsp+0x29c]
 100a91a:	sub    eax,0x1
 100a91d:	cmp    DWORD PTR [rsp+0x2bc],eax
 100a924:	jne    0x100a928
 100a926:	jmp    0x100a93e
 100a928:	mov    eax,DWORD PTR [rsp+0x2bc]
 100a92f:	add    eax,0x1
 100a932:	mov    DWORD PTR [rsp+0x2bc],eax
 100a939:	jmp    0x100a8b0
 100a93e:	cmp    DWORD PTR [rsp+0x2b8],0x0
 100a946:	je     0x100a955
 100a948:	mov    DWORD PTR [rsp+0x2a8],0x1
 100a953:	jmp    0x100a980
 100a955:	mov    eax,DWORD PTR [rsp+0x29c]
 100a95c:	sub    eax,0x1
 100a95f:	cmp    DWORD PTR [rsp+0x2bc],eax
 100a966:	jne    0x100a980
 100a968:	movzx  eax,WORD PTR [rsp+0x2c0]
 100a970:	cmp    eax,0x3b
 100a973:	jne    0x100a980
 100a975:	mov    DWORD PTR [rsp+0x2a8],0x1
 100a980:	mov    rax,QWORD PTR [rsp+0x2a0]
 100a988:	add    rax,0x2
 100a98c:	mov    QWORD PTR [rsp+0x2a0],rax
 100a994:	mov    eax,DWORD PTR [rsp+0x298]
 100a99b:	sub    eax,0x1
 100a99e:	mov    DWORD PTR [rsp+0x298],eax
 100a9a5:	jmp    0x100a86e
 100a9aa:	cmp    DWORD PTR [rsp+0x2a8],0x0
 100a9b2:	je     0x100a9c4
 100a9b4:	mov    DWORD PTR [rsp+0x258],0x1
 100a9bf:	jmp    0x100aa8c
 100a9c4:	mov    eax,DWORD PTR [rsp+0x250]
 100a9cb:	shl    rax,1
 100a9ce:	mov    QWORD PTR [rsp+0x2f0],rax
 100a9d6:	call   QWORD PTR [rip+0xffffffffffff671c]        # 0x10010f8
 100a9dc:	mov    rcx,QWORD PTR [rsp+0x2f0]
 100a9e4:	mov    r8,rcx
 100a9e7:	mov    edx,0x8
 100a9ec:	mov    rcx,rax
 100a9ef:	call   QWORD PTR [rip+0xffffffffffff66eb]        # 0x10010e0
 100a9f5:	mov    QWORD PTR [rsp+0x260],rax
 100a9fd:	cmp    QWORD PTR [rsp+0x278],0x0
 100aa06:	je     0x100aa8c
 100aa0c:	cmp    QWORD PTR [rsp+0x260],0x0
 100aa15:	je     0x100aa8c
 100aa17:	mov    eax,DWORD PTR [rsp+0x250]
 100aa1e:	lea    r8,[rsp+0x40]
 100aa23:	mov    rdx,rax
 100aa26:	mov    rcx,QWORD PTR [rsp+0x260]
 100aa2e:	call   0x100abc0
 100aa33:	mov    eax,DWORD PTR [rsp+0x250]
 100aa3a:	lea    r8,[rip+0xffffffffffff806f]        # 0x1002ab0
 100aa41:	mov    rdx,rax
 100aa44:	mov    rcx,QWORD PTR [rsp+0x260]
 100aa4c:	call   0x100ac30
 100aa51:	mov    eax,DWORD PTR [rsp+0x250]
 100aa58:	mov    r8,QWORD PTR [rsp+0x278]
 100aa60:	mov    rdx,rax
 100aa63:	mov    rcx,QWORD PTR [rsp+0x260]
 100aa6b:	call   0x100ac30
 100aa70:	mov    rdx,QWORD PTR [rsp+0x260]
 100aa78:	lea    rcx,[rip+0xffffffffffff8039]        # 0x1002ab8
 100aa7f:	call   QWORD PTR [rip+0xffffffffffff65db]        # 0x1001060
 100aa85:	mov    DWORD PTR [rsp+0x258],eax
 100aa8c:	cmp    QWORD PTR [rsp+0x278],0x0
 100aa95:	je     0x100aabc
 100aa97:	call   QWORD PTR [rip+0xffffffffffff665b]        # 0x10010f8
 100aa9d:	mov    r8,QWORD PTR [rsp+0x278]
 100aaa5:	xor    edx,edx
 100aaa7:	mov    rcx,rax
 100aaaa:	call   QWORD PTR [rip+0xffffffffffff6638]        # 0x10010e8
 100aab0:	mov    QWORD PTR [rsp+0x278],0x0
 100aabc:	cmp    QWORD PTR [rsp+0x260],0x0
 100aac5:	je     0x100aaec
 100aac7:	call   QWORD PTR [rip+0xffffffffffff662b]        # 0x10010f8
 100aacd:	mov    r8,QWORD PTR [rsp+0x260]
 100aad5:	xor    edx,edx
 100aad7:	mov    rcx,rax
 100aada:	call   QWORD PTR [rip+0xffffffffffff6608]        # 0x10010e8
 100aae0:	mov    QWORD PTR [rsp+0x260],0x0
 100aaec:	cmp    QWORD PTR [rsp+0x280],0x0
 100aaf5:	je     0x100ab04
 100aaf7:	mov    rcx,QWORD PTR [rsp+0x280]
 100aaff:	call   0x100bb60
 100ab04:	mov    eax,DWORD PTR [rsp+0x258]
 100ab0b:	mov    rcx,QWORD PTR [rsp+0x2f8]
 100ab13:	xor    rcx,rsp
 100ab16:	call   0x1009d30
 100ab1b:	add    rsp,0x308
 100ab22:	ret    
 100ab23:	int3   
 100ab24:	int3   
 100ab25:	int3   
 100ab26:	int3   
 100ab27:	int3   
 100ab28:	int3   
 100ab29:	int3   
 100ab2a:	int3   
 100ab2b:	int3   
 100ab2c:	int3   
 100ab2d:	int3   
 100ab2e:	int3   
 100ab2f:	int3   
 100ab30:	rex push rbp
 100ab32:	sub    rsp,0x30
 100ab36:	mov    rbp,rdx
 100ab39:	cmp    QWORD PTR [rbp+0x278],0x0
 100ab41:	je     0x100ab66
 100ab43:	call   QWORD PTR [rip+0xffffffffffff65af]        # 0x10010f8
 100ab49:	mov    r8,QWORD PTR [rbp+0x278]
 100ab50:	xor    edx,edx
 100ab52:	mov    rcx,rax
 100ab55:	call   QWORD PTR [rip+0xffffffffffff658d]        # 0x10010e8
 100ab5b:	mov    QWORD PTR [rbp+0x278],0x0
 100ab66:	cmp    QWORD PTR [rbp+0x260],0x0
 100ab6e:	je     0x100ab93
 100ab70:	call   QWORD PTR [rip+0xffffffffffff6582]        # 0x10010f8
 100ab76:	mov    r8,QWORD PTR [rbp+0x260]
 100ab7d:	xor    edx,edx
 100ab7f:	mov    rcx,rax
 100ab82:	call   QWORD PTR [rip+0xffffffffffff6560]        # 0x10010e8
 100ab88:	mov    QWORD PTR [rbp+0x260],0x0
 100ab93:	cmp    QWORD PTR [rbp+0x280],0x0
 100ab9b:	je     0x100aba9
 100ab9d:	mov    rcx,QWORD PTR [rbp+0x280]
 100aba4:	call   0x100bb60
 100aba9:	add    rsp,0x30
 100abad:	pop    rbp
 100abae:	ret    
 100abaf:	int3   
 100abb0:	int3   
 100abb1:	int3   
 100abb2:	int3   
 100abb3:	int3   
 100abb4:	int3   
 100abb5:	int3   
 100abb6:	int3   
 100abb7:	int3   
 100abb8:	int3   
 100abb9:	int3   
 100abba:	int3   
 100abbb:	int3   
 100abbc:	int3   
 100abbd:	int3   
 100abbe:	int3   
 100abbf:	int3   
 100abc0:	mov    QWORD PTR [rsp+0x18],r8
 100abc5:	mov    QWORD PTR [rsp+0x10],rdx
 100abca:	mov    QWORD PTR [rsp+0x8],rcx
 100abcf:	sub    rsp,0x48
 100abd3:	mov    r8d,0x7fffffff
 100abd9:	mov    rdx,QWORD PTR [rsp+0x58]
 100abde:	mov    rcx,QWORD PTR [rsp+0x50]
 100abe3:	call   0x100acc0
 100abe8:	mov    DWORD PTR [rsp+0x30],eax
 100abec:	cmp    DWORD PTR [rsp+0x30],0x0
 100abf1:	jl     0x100ac17
 100abf3:	mov    QWORD PTR [rsp+0x20],0x7ffffffe
 100abfc:	mov    r9,QWORD PTR [rsp+0x60]
 100ac01:	xor    r8d,r8d
 100ac04:	mov    rdx,QWORD PTR [rsp+0x58]
 100ac09:	mov    rcx,QWORD PTR [rsp+0x50]
 100ac0e:	call   0x100ae30
 100ac13:	mov    DWORD PTR [rsp+0x30],eax
 100ac17:	mov    eax,DWORD PTR [rsp+0x30]
 100ac1b:	add    rsp,0x48
 100ac1f:	ret    
 100ac20:	int3   
 100ac21:	int3   
 100ac22:	int3   
 100ac23:	int3   
 100ac24:	int3   
 100ac25:	int3   
 100ac26:	int3   
 100ac27:	int3   
 100ac28:	int3   
 100ac29:	int3   
 100ac2a:	int3   
 100ac2b:	int3   
 100ac2c:	int3   
 100ac2d:	int3   
 100ac2e:	int3   
 100ac2f:	int3   
 100ac30:	mov    QWORD PTR [rsp+0x18],r8
 100ac35:	mov    QWORD PTR [rsp+0x10],rdx
 100ac3a:	mov    QWORD PTR [rsp+0x8],rcx
 100ac3f:	sub    rsp,0x48
 100ac43:	mov    r9d,0x7fffffff
 100ac49:	lea    r8,[rsp+0x38]
 100ac4e:	mov    rdx,QWORD PTR [rsp+0x58]
 100ac53:	mov    rcx,QWORD PTR [rsp+0x50]
 100ac58:	call   0x100ad10
 100ac5d:	mov    DWORD PTR [rsp+0x30],eax
 100ac61:	cmp    DWORD PTR [rsp+0x30],0x0
 100ac66:	jl     0x100aca3
 100ac68:	mov    rax,QWORD PTR [rsp+0x38]
 100ac6d:	mov    rcx,QWORD PTR [rsp+0x58]
 100ac72:	sub    rcx,rax
 100ac75:	mov    rax,rcx
 100ac78:	mov    rcx,QWORD PTR [rsp+0x50]
 100ac7d:	mov    rdx,QWORD PTR [rsp+0x38]
 100ac82:	lea    rcx,[rcx+rdx*2]
 100ac86:	mov    QWORD PTR [rsp+0x20],0x7fffffff
 100ac8f:	mov    r9,QWORD PTR [rsp+0x60]
 100ac94:	xor    r8d,r8d
 100ac97:	mov    rdx,rax
 100ac9a:	call   0x100ae30
 100ac9f:	mov    DWORD PTR [rsp+0x30],eax
 100aca3:	mov    eax,DWORD PTR [rsp+0x30]
 100aca7:	add    rsp,0x48
 100acab:	ret    
 100acac:	int3   
 100acad:	int3   
 100acae:	int3   
 100acaf:	int3   
 100acb0:	int3   
 100acb1:	int3   
 100acb2:	int3   
 100acb3:	int3   
 100acb4:	int3   
 100acb5:	int3   
 100acb6:	int3   
 100acb7:	int3   
 100acb8:	int3   
 100acb9:	int3   
 100acba:	int3   
 100acbb:	int3   
 100acbc:	int3   
 100acbd:	int3   
 100acbe:	int3   
 100acbf:	int3   
 100acc0:	mov    QWORD PTR [rsp+0x18],r8
 100acc5:	mov    QWORD PTR [rsp+0x10],rdx
 100acca:	mov    QWORD PTR [rsp+0x8],rcx
 100accf:	sub    rsp,0x18
 100acd3:	mov    DWORD PTR [rsp],0x0
 100acda:	cmp    QWORD PTR [rsp+0x28],0x0
 100ace0:	je     0x100acee
 100ace2:	mov    rax,QWORD PTR [rsp+0x30]
 100ace7:	cmp    QWORD PTR [rsp+0x28],rax
 100acec:	jbe    0x100acf5
 100acee:	mov    DWORD PTR [rsp],0x80070057
 100acf5:	mov    eax,DWORD PTR [rsp]
 100acf8:	add    rsp,0x18
 100acfc:	ret    
 100acfd:	int3   
 100acfe:	int3   
 100acff:	int3   
 100ad00:	int3   
 100ad01:	int3   
 100ad02:	int3   
 100ad03:	int3   
 100ad04:	int3   
 100ad05:	int3   
 100ad06:	int3   
 100ad07:	int3   
 100ad08:	int3   
 100ad09:	int3   
 100ad0a:	int3   
 100ad0b:	int3   
 100ad0c:	int3   
 100ad0d:	int3   
 100ad0e:	int3   
 100ad0f:	int3   
 100ad10:	mov    QWORD PTR [rsp+0x20],r9
 100ad15:	mov    QWORD PTR [rsp+0x18],r8
 100ad1a:	mov    QWORD PTR [rsp+0x10],rdx
 100ad1f:	mov    QWORD PTR [rsp+0x8],rcx
 100ad24:	sub    rsp,0x38
 100ad28:	mov    r8,QWORD PTR [rsp+0x58]
 100ad2d:	mov    rdx,QWORD PTR [rsp+0x48]
 100ad32:	mov    rcx,QWORD PTR [rsp+0x40]
 100ad37:	call   0x100acc0
 100ad3c:	mov    DWORD PTR [rsp+0x20],eax
 100ad40:	cmp    DWORD PTR [rsp+0x20],0x0
 100ad45:	jl     0x100ad61
 100ad47:	mov    r8,QWORD PTR [rsp+0x50]
 100ad4c:	mov    rdx,QWORD PTR [rsp+0x48]
 100ad51:	mov    rcx,QWORD PTR [rsp+0x40]
 100ad56:	call   0x100ad80
 100ad5b:	mov    DWORD PTR [rsp+0x20],eax
 100ad5f:	jmp    0x100ad6d
 100ad61:	mov    rax,QWORD PTR [rsp+0x50]
 100ad66:	mov    QWORD PTR [rax],0x0
 100ad6d:	mov    eax,DWORD PTR [rsp+0x20]
 100ad71:	add    rsp,0x38
 100ad75:	ret    
 100ad76:	int3   
 100ad77:	int3   
 100ad78:	int3   
 100ad79:	int3   
 100ad7a:	int3   
 100ad7b:	int3   
 100ad7c:	int3   
 100ad7d:	int3   
 100ad7e:	int3   
 100ad7f:	int3   
 100ad80:	mov    QWORD PTR [rsp+0x18],r8
 100ad85:	mov    QWORD PTR [rsp+0x10],rdx
 100ad8a:	mov    QWORD PTR [rsp+0x8],rcx
 100ad8f:	sub    rsp,0x18
 100ad93:	mov    DWORD PTR [rsp+0x8],0x0
 100ad9b:	mov    rax,QWORD PTR [rsp+0x28]
 100ada0:	mov    QWORD PTR [rsp],rax
 100ada4:	cmp    QWORD PTR [rsp+0x28],0x0
 100adaa:	je     0x100add6
 100adac:	mov    rax,QWORD PTR [rsp+0x20]
 100adb1:	movzx  eax,WORD PTR [rax]
 100adb4:	test   eax,eax
 100adb6:	je     0x100add6
 100adb8:	mov    rax,QWORD PTR [rsp+0x20]
 100adbd:	add    rax,0x2
 100adc1:	mov    QWORD PTR [rsp+0x20],rax
 100adc6:	mov    rax,QWORD PTR [rsp+0x28]
 100adcb:	sub    rax,0x1
 100adcf:	mov    QWORD PTR [rsp+0x28],rax
 100add4:	jmp    0x100ada4
 100add6:	cmp    QWORD PTR [rsp+0x28],0x0
 100addc:	jne    0x100ade6
 100adde:	mov    DWORD PTR [rsp+0x8],0x80070057
 100ade6:	cmp    QWORD PTR [rsp+0x30],0x0
 100adec:	je     0x100ae1a
 100adee:	cmp    DWORD PTR [rsp+0x8],0x0
 100adf3:	jl     0x100ae0e
 100adf5:	mov    rax,QWORD PTR [rsp+0x28]
 100adfa:	mov    rcx,QWORD PTR [rsp]
 100adfe:	sub    rcx,rax
 100ae01:	mov    rax,rcx
 100ae04:	mov    rcx,QWORD PTR [rsp+0x30]
 100ae09:	mov    QWORD PTR [rcx],rax
 100ae0c:	jmp    0x100ae1a
 100ae0e:	mov    rax,QWORD PTR [rsp+0x30]
 100ae13:	mov    QWORD PTR [rax],0x0
 100ae1a:	mov    eax,DWORD PTR [rsp+0x8]
 100ae1e:	add    rsp,0x18
 100ae22:	ret    
 100ae23:	int3   
 100ae24:	int3   
 100ae25:	int3   
 100ae26:	int3   
 100ae27:	int3   
 100ae28:	int3   
 100ae29:	int3   
 100ae2a:	int3   
 100ae2b:	int3   
 100ae2c:	int3   
 100ae2d:	int3   
 100ae2e:	int3   
 100ae2f:	int3   
 100ae30:	mov    QWORD PTR [rsp+0x20],r9
 100ae35:	mov    QWORD PTR [rsp+0x18],r8
 100ae3a:	mov    QWORD PTR [rsp+0x10],rdx
 100ae3f:	mov    QWORD PTR [rsp+0x8],rcx
 100ae44:	sub    rsp,0x18
 100ae48:	mov    DWORD PTR [rsp+0x8],0x0
 100ae50:	mov    QWORD PTR [rsp],0x0
 100ae58:	cmp    QWORD PTR [rsp+0x28],0x0
 100ae5e:	je     0x100aeca
 100ae60:	cmp    QWORD PTR [rsp+0x40],0x0
 100ae66:	je     0x100aeca
 100ae68:	mov    rax,QWORD PTR [rsp+0x38]
 100ae6d:	movzx  eax,WORD PTR [rax]
 100ae70:	test   eax,eax
 100ae72:	je     0x100aeca
 100ae74:	mov    rax,QWORD PTR [rsp+0x20]
 100ae79:	mov    rcx,QWORD PTR [rsp+0x38]
 100ae7e:	movzx  ecx,WORD PTR [rcx]
 100ae81:	mov    WORD PTR [rax],cx
 100ae84:	mov    rax,QWORD PTR [rsp+0x20]
 100ae89:	add    rax,0x2
 100ae8d:	mov    QWORD PTR [rsp+0x20],rax
 100ae92:	mov    rax,QWORD PTR [rsp+0x38]
 100ae97:	add    rax,0x2
 100ae9b:	mov    QWORD PTR [rsp+0x38],rax
 100aea0:	mov    rax,QWORD PTR [rsp+0x28]
 100aea5:	sub    rax,0x1
 100aea9:	mov    QWORD PTR [rsp+0x28],rax
 100aeae:	mov    rax,QWORD PTR [rsp+0x40]
 100aeb3:	sub    rax,0x1
 100aeb7:	mov    QWORD PTR [rsp+0x40],rax
 100aebc:	mov    rax,QWORD PTR [rsp]
 100aec0:	add    rax,0x1
 100aec4:	mov    QWORD PTR [rsp],rax
 100aec8:	jmp    0x100ae58
 100aeca:	cmp    QWORD PTR [rsp+0x28],0x0
 100aed0:	jne    0x100aef4
 100aed2:	mov    rax,QWORD PTR [rsp+0x20]
 100aed7:	sub    rax,0x2
 100aedb:	mov    QWORD PTR [rsp+0x20],rax
 100aee0:	mov    rax,QWORD PTR [rsp]
 100aee4:	sub    rax,0x1
 100aee8:	mov    QWORD PTR [rsp],rax
 100aeec:	mov    DWORD PTR [rsp+0x8],0x8007007a
 100aef4:	mov    rax,QWORD PTR [rsp+0x20]
 100aef9:	mov    WORD PTR [rax],0x0
 100aefe:	cmp    QWORD PTR [rsp+0x30],0x0
 100af04:	je     0x100af12
 100af06:	mov    rax,QWORD PTR [rsp+0x30]
 100af0b:	mov    rcx,QWORD PTR [rsp]
 100af0f:	mov    QWORD PTR [rax],rcx
 100af12:	mov    eax,DWORD PTR [rsp+0x8]
 100af16:	add    rsp,0x18
 100af1a:	ret    
 100af1b:	int3   
 100af1c:	int3   
 100af1d:	int3   
 100af1e:	int3   
 100af1f:	int3   
 100af20:	int3   
 100af21:	int3   
 100af22:	int3   
 100af23:	int3   
 100af24:	int3   
 100af25:	int3   
 100af26:	int3   
 100af27:	int3   
 100af28:	int3   
 100af29:	int3   
 100af2a:	int3   
 100af2b:	int3   
 100af2c:	int3   
 100af2d:	int3   
 100af2e:	int3   
 100af2f:	int3   
 100af30:	mov    QWORD PTR [rsp+0x8],rcx
 100af35:	mov    QWORD PTR [rsp+0x10],rdx
 100af3a:	mov    QWORD PTR [rsp+0x18],r8
 100af3f:	mov    QWORD PTR [rsp+0x20],r9
 100af44:	ret    
 100af45:	int3   
 100af46:	int3   
 100af47:	int3   
 100af48:	int3   
 100af49:	int3   
 100af4a:	int3   
 100af4b:	int3   
 100af4c:	int3   
 100af4d:	int3   
 100af4e:	int3   
 100af4f:	int3   
 100af50:	sub    rsp,0x38
 100af54:	cmp    DWORD PTR [rip+0x54f5],0x0        # 0x1010450
 100af5b:	je     0x100af6b
 100af5d:	mov    r8,QWORD PTR [rsp+0x60]
 100af62:	add    rsp,0x38
 100af66:	jmp    0x100bd00
 100af6b:	mov    rax,QWORD PTR [rsp+0x60]
 100af70:	mov    QWORD PTR [rsp+0x20],rax
 100af75:	call   QWORD PTR [rip+0xffffffffffff608d]        # 0x1001008
 100af7b:	add    rsp,0x38
 100af7f:	ret    
 100af80:	int3   
 100af81:	int3   
 100af82:	int3   
 100af83:	int3   
 100af84:	int3   
 100af85:	int3   
 100af86:	int3   
 100af87:	int3   
 100af88:	int3   
 100af89:	int3   
 100af8a:	int3   
 100af8b:	int3   
 100af8c:	int3   
 100af8d:	int3   
 100af8e:	int3   
 100af8f:	int3   
 100af90:	mov    QWORD PTR [rsp+0x20],r9
 100af95:	push   rbx
 100af96:	push   r14
 100af98:	sub    rsp,0x58
 100af9c:	cmp    DWORD PTR [rip+0x54ad],0x0        # 0x1010450
 100afa3:	mov    r14,r9
 100afa6:	mov    rbx,rdx
 100afa9:	je     0x100b28b
 100afaf:	mov    QWORD PTR [rsp+0x70],rbp
 100afb4:	mov    QWORD PTR [rsp+0x78],rsi
 100afb9:	call   0x100b580
 100afbe:	test   rbx,rbx
 100afc1:	je     0x100afc9
 100afc3:	cmp    WORD PTR [rbx],0x0
 100afc7:	jne    0x100afd0
 100afc9:	lea    rbx,[rip+0xffffffffffff6ad0]        # 0x1001aa0
 100afd0:	mov    rdx,rbx
 100afd3:	mov    rcx,rax
 100afd6:	call   0x100b990
 100afdb:	mov    rsi,rax
 100afde:	test   rax,rax
 100afe1:	je     0x100b26a
 100afe7:	mov    eax,0xffff
 100afec:	cmp    WORD PTR [rsi],ax
 100afef:	jne    0x100b002
 100aff1:	cmp    WORD PTR [rsi+0x2],0x0
 100aff6:	jne    0x100b002
 100aff8:	mov    ebp,0x2
 100affd:	jmp    0x100b254
 100b002:	mov    QWORD PTR [rsp+0x80],rdi
 100b00a:	mov    QWORD PTR [rsp+0x50],r12
 100b00f:	xor    ebp,ebp
 100b011:	lea    r9,[rsp+0x30]
 100b016:	lea    rdx,[rip+0xffffffffffff7d7b]        # 0x1002d98
 100b01d:	xor    r8d,r8d
 100b020:	mov    rcx,rsi
 100b023:	mov    QWORD PTR [rsp+0x48],r13
 100b028:	lea    r12d,[rbp+0x1]
 100b02c:	mov    QWORD PTR [rsp+0x40],r15
 100b031:	mov    DWORD PTR [rsp+0x30],ebp
 100b035:	call   0x100c28e
 100b03a:	lea    edi,[rbp+0x4]
 100b03d:	cmp    eax,r12d
 100b040:	jne    0x100b04f
 100b042:	mov    r12d,edi
 100b045:	lea    r13,[rsp+0x30]
 100b04a:	jmp    0x100b203
 100b04f:	lea    rax,[rip+0xffffffffffff7d5a]        # 0x1002db0
 100b056:	mov    r9d,edi
 100b059:	mov    r8,rsi
 100b05c:	mov    edx,r12d
 100b05f:	mov    ecx,0x400
 100b064:	mov    DWORD PTR [rsp+0x28],edi
 100b068:	mov    QWORD PTR [rsp+0x20],rax
 100b06d:	call   QWORD PTR [rip+0xffffffffffff6065]        # 0x10010d8
 100b073:	cmp    eax,0x2
 100b076:	jne    0x100b07e
 100b078:	lea    r12d,[rax+0x1]
 100b07c:	jmp    0x100b0f9
 100b07e:	lea    rax,[rip+0xffffffffffff7d3b]        # 0x1002dc0
 100b085:	mov    r9d,edi
 100b088:	mov    r8,rsi
 100b08b:	mov    edx,r12d
 100b08e:	mov    ecx,0x400
 100b093:	mov    DWORD PTR [rsp+0x28],edi
 100b097:	mov    QWORD PTR [rsp+0x20],rax
 100b09c:	call   QWORD PTR [rip+0xffffffffffff6036]        # 0x10010d8
 100b0a2:	cmp    eax,0x2
 100b0a5:	jne    0x100b1e5
 100b0ab:	lea    rbx,[rsi+0x8]
 100b0af:	lea    r9,[rsp+0x34]
 100b0b4:	lea    rdx,[rip+0xffffffffffff7d15]        # 0x1002dd0
 100b0bb:	mov    rcx,rbx
 100b0be:	xor    r8d,r8d
 100b0c1:	call   0x100c28e
 100b0c6:	cmp    eax,r12d
 100b0c9:	jne    0x100b1e5
 100b0cf:	cmp    WORD PTR [rbx],0x3a
 100b0d3:	je     0x100b0ec
 100b0d5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100b0e0:	add    rbx,0x2
 100b0e4:	inc    edi
 100b0e6:	cmp    WORD PTR [rbx],0x3a
 100b0ea:	jne    0x100b0e0
 100b0ec:	mov    r12d,DWORD PTR [rsp+0x34]
 100b0f1:	inc    edi
 100b0f3:	je     0x100b1e5
 100b0f9:	movsxd r8,edi
 100b0fc:	or     rcx,0xffffffffffffffff
 100b100:	inc    rcx
 100b103:	cmp    WORD PTR [rsi+rcx*2],bp
 100b107:	jne    0x100b100
 100b109:	sub    rcx,r8
 100b10c:	lea    rbx,[rsi+r8*2]
 100b110:	movabs rax,0xaaaaaaaaaaaaaaab
 100b11a:	lea    r9,[rsp+0x30]
 100b11f:	xor    r8d,r8d
 100b122:	mov    r13,rsi
 100b125:	mul    rcx
 100b128:	mov    rdi,rdx
 100b12b:	lea    rdx,[rip+0xffffffffffff7cae]        # 0x1002de0
 100b132:	mov    rcx,rbx
 100b135:	shr    rdi,1
 100b138:	mov    r15d,ebp
 100b13b:	inc    edi
 100b13d:	call   0x100c28e
 100b142:	cmp    eax,0x1
 100b145:	jne    0x100b1b5
 100b147:	mov    r14,rsi
 100b14a:	nop    WORD PTR [rax+rax*1+0x0]
 100b150:	movzx  eax,WORD PTR [rbx]
 100b153:	cmp    ax,0x2c
 100b157:	je     0x100b173
 100b159:	nop    DWORD PTR [rax+0x0]
 100b160:	test   ax,ax
 100b163:	je     0x100b173
 100b165:	movzx  eax,WORD PTR [rbx+0x2]
 100b169:	add    rbx,0x2
 100b16d:	cmp    ax,0x2c
 100b171:	jne    0x100b160
 100b173:	movzx  eax,BYTE PTR [rsp+0x30]
 100b178:	inc    r14
 100b17b:	inc    r15d
 100b17e:	mov    BYTE PTR [r14-0x1],al
 100b182:	cmp    WORD PTR [rbx],0x2c
 100b186:	jne    0x100b18c
 100b188:	add    rbx,0x2
 100b18c:	cmp    WORD PTR [rbx],bp
 100b18f:	je     0x100b1ad
 100b191:	lea    r9,[rsp+0x30]
 100b196:	lea    rdx,[rip+0xffffffffffff7c43]        # 0x1002de0
 100b19d:	xor    r8d,r8d
 100b1a0:	mov    rcx,rbx
 100b1a3:	call   0x100c28e
 100b1a8:	cmp    eax,0x1
 100b1ab:	je     0x100b150
 100b1ad:	mov    r14,QWORD PTR [rsp+0x88]
 100b1b5:	cmp    edi,r15d
 100b1b8:	jne    0x100b1de
 100b1ba:	cmp    r12d,0x1
 100b1be:	je     0x100b1cc
 100b1c0:	cmp    r12d,0x7
 100b1c4:	je     0x100b1cc
 100b1c6:	cmp    r12d,0x2
 100b1ca:	jne    0x100b203
 100b1cc:	test   dil,0x1
 100b1d0:	jne    0x100b1de
 100b1d2:	movsxd rax,r15d
 100b1d5:	add    edi,0x2
 100b1d8:	mov    WORD PTR [rax+rsi*1],bp
 100b1dc:	jmp    0x100b203
 100b1de:	mov    ebp,0xd
 100b1e3:	jmp    0x100b23d
 100b1e5:	or     rcx,0xffffffffffffffff
 100b1e9:	nop    DWORD PTR [rax+0x0]
 100b1f0:	inc    rcx
 100b1f3:	cmp    WORD PTR [rsi+rcx*2],bp
 100b1f7:	jne    0x100b1f0
 100b1f9:	lea    edi,[rcx*2+0x2]
 100b200:	mov    r13,rsi
 100b203:	mov    rcx,QWORD PTR [rsp+0x90]
 100b20b:	mov    rbx,QWORD PTR [rsp+0x98]
 100b213:	test   rcx,rcx
 100b216:	je     0x100b22e
 100b218:	cmp    DWORD PTR [rbx],edi
 100b21a:	jb     0x100b229
 100b21c:	mov    r8d,edi
 100b21f:	mov    rdx,r13
 100b222:	call   0x100c29a
 100b227:	jmp    0x100b22e
 100b229:	mov    ebp,0xea
 100b22e:	test   r14,r14
 100b231:	je     0x100b236
 100b233:	mov    DWORD PTR [r14],r12d
 100b236:	test   rbx,rbx
 100b239:	je     0x100b23d
 100b23b:	mov    DWORD PTR [rbx],edi
 100b23d:	mov    r13,QWORD PTR [rsp+0x48]
 100b242:	mov    r12,QWORD PTR [rsp+0x50]
 100b247:	mov    rdi,QWORD PTR [rsp+0x80]
 100b24f:	mov    r15,QWORD PTR [rsp+0x40]
 100b254:	call   QWORD PTR [rip+0xffffffffffff5e9e]        # 0x10010f8
 100b25a:	mov    r8,rsi
 100b25d:	xor    edx,edx
 100b25f:	mov    rcx,rax
 100b262:	call   QWORD PTR [rip+0xffffffffffff5e80]        # 0x10010e8
 100b268:	jmp    0x100b26f
 100b26a:	mov    ebp,0x8
 100b26f:	mov    ecx,ebp
 100b271:	call   QWORD PTR [rip+0xffffffffffff5eb1]        # 0x1001128
 100b277:	mov    rsi,QWORD PTR [rsp+0x78]
 100b27c:	mov    eax,ebp
 100b27e:	mov    rbp,QWORD PTR [rsp+0x70]
 100b283:	add    rsp,0x58
 100b287:	pop    r14
 100b289:	pop    rbx
 100b28a:	ret    
 100b28b:	mov    rax,QWORD PTR [rsp+0x98]
 100b293:	mov    QWORD PTR [rsp+0x28],rax
 100b298:	mov    rax,QWORD PTR [rsp+0x90]
 100b2a0:	mov    QWORD PTR [rsp+0x20],rax
 100b2a5:	call   QWORD PTR [rip+0xffffffffffff5d65]        # 0x1001010
 100b2ab:	add    rsp,0x58
 100b2af:	pop    r14
 100b2b1:	pop    rbx
 100b2b2:	ret    
 100b2b3:	int3   
 100b2b4:	int3   
 100b2b5:	int3   
 100b2b6:	int3   
 100b2b7:	int3   
 100b2b8:	int3   
 100b2b9:	int3   
 100b2ba:	int3   
 100b2bb:	int3   
 100b2bc:	int3   
 100b2bd:	int3   
 100b2be:	int3   
 100b2bf:	int3   
 100b2c0:	rex push rbx
 100b2c2:	push   rsi
 100b2c3:	push   r15
 100b2c5:	sub    rsp,0x40
 100b2c9:	cmp    DWORD PTR [rip+0x5180],0x0        # 0x1010450
 100b2d0:	mov    r15d,r8d
 100b2d3:	mov    rbx,rdx
 100b2d6:	je     0x100b2e6
 100b2d8:	mov    eax,0x1
 100b2dd:	add    rsp,0x40
 100b2e1:	pop    r15
 100b2e3:	pop    rsi
 100b2e4:	pop    rbx
 100b2e5:	ret    
 100b2e6:	mov    QWORD PTR [rsp+0x68],rdi
 100b2eb:	mov    QWORD PTR [rsp+0x70],r12
 100b2f0:	mov    QWORD PTR [rsp+0x30],r14
 100b2f5:	call   0x100af30
 100b2fa:	or     rdi,0xffffffffffffffff
 100b2fe:	test   rdx,rdx
 100b301:	je     0x100b312
 100b303:	mov    rax,rdi
 100b306:	inc    rax
 100b309:	cmp    WORD PTR [rdx+rax*2],0x0
 100b30e:	jne    0x100b306
 100b310:	jmp    0x100b317
 100b312:	mov    eax,0x3
 100b317:	lea    r14d,[rax+0x1]
 100b31b:	mov    r8d,0x104
 100b321:	lea    r12,[rip+0x5148]        # 0x1010470
 100b328:	sub    r8d,r14d
 100b32b:	mov    rdx,r12
 100b32e:	mov    QWORD PTR [rsp+0x60],rbp
 100b333:	mov    QWORD PTR [rsp+0x38],r13
 100b338:	call   QWORD PTR [rip+0xffffffffffff5e4a]        # 0x1001188
 100b33e:	mov    r11d,eax
 100b341:	test   eax,eax
 100b343:	je     0x100b4cf
 100b349:	lea    rcx,[r12-0x2]
 100b34e:	lea    rcx,[rcx+r11*2]
 100b352:	call   0x100af30
 100b357:	xor    r13d,r13d
 100b35a:	mov    edx,r13d
 100b35d:	mov    r8d,r13d
 100b360:	cmp    rcx,r12
 100b363:	jbe    0x100b388
 100b365:	test   r8,r8
 100b368:	jne    0x100b375
 100b36a:	cmp    WORD PTR [rcx],0x2e
 100b36e:	jne    0x100b37d
 100b370:	mov    r8,rcx
 100b373:	jmp    0x100b37d
 100b375:	cmp    WORD PTR [rcx],0x5c
 100b379:	cmove  rdx,rcx
 100b37d:	sub    rcx,0x2
 100b381:	test   rdx,rdx
 100b384:	je     0x100b360
 100b386:	jmp    0x100b391
 100b388:	test   rdx,rdx
 100b38b:	je     0x100b4cf
 100b391:	lea    rcx,[rdx+0x2]
 100b395:	lea    rbp,[r8+0x2]
 100b399:	mov    esi,0x1
 100b39e:	test   rbx,rbx
 100b3a1:	je     0x100b3b1
 100b3a3:	lea    r8d,[r14+r14*1]
 100b3a7:	mov    rdx,rbx
 100b3aa:	call   0x100c29a
 100b3af:	jmp    0x100b406
 100b3b1:	mov    r9d,DWORD PTR [rip+0x4440]        # 0x100f7f8
 100b3b8:	mov    r8,QWORD PTR [rip+0x4431]        # 0x100f7f0
 100b3bf:	mov    rax,rcx
 100b3c2:	sub    rax,r12
 100b3c5:	mov    edx,esi
 100b3c7:	sar    rax,1
 100b3ca:	sub    r11d,eax
 100b3cd:	mov    DWORD PTR [rsp+0x28],r11d
 100b3d2:	mov    QWORD PTR [rsp+0x20],rcx
 100b3d7:	mov    ecx,0x400
 100b3dc:	call   QWORD PTR [rip+0xffffffffffff5cf6]        # 0x10010d8
 100b3e2:	lea    r8d,[r14+r14*1]
 100b3e6:	lea    rdx,[rip+0xffffffffffff787b]        # 0x1002c68
 100b3ed:	cmp    eax,0x2
 100b3f0:	mov    ebx,r13d
 100b3f3:	mov    rcx,rbp
 100b3f6:	cmove  ebx,esi
 100b3f9:	call   0x100c29a
 100b3fe:	test   ebx,ebx
 100b400:	jne    0x100b4cf
 100b406:	mov    rcx,r12
 100b409:	call   QWORD PTR [rip+0xffffffffffff5d61]        # 0x1001170
 100b40f:	cmp    eax,0xffffffff
 100b412:	je     0x100b4cf
 100b418:	lea    rbx,[rip+0x5471]        # 0x1010890
 100b41f:	mov    rdx,r12
 100b422:	mov    r8d,0x208
 100b428:	mov    rcx,rbx
 100b42b:	call   0x100c29a
 100b430:	mov    rax,rdi
 100b433:	inc    rax
 100b436:	cmp    WORD PTR [rbx+rax*2],r13w
 100b43b:	jne    0x100b433
 100b43d:	dec    rax
 100b440:	cmp    WORD PTR [rbx+rax*2],0x5c
 100b445:	lea    rax,[rbx+rax*2]
 100b449:	je     0x100b45f
 100b44b:	nop    DWORD PTR [rax+rax*1+0x0]
 100b450:	cmp    rax,rbx
 100b453:	jbe    0x100b45f
 100b455:	sub    rax,0x2
 100b459:	cmp    WORD PTR [rax],0x5c
 100b45d:	jne    0x100b450
 100b45f:	mov    WORD PTR [rax],r13w
 100b463:	sub    rax,rbx
 100b466:	mov    rcx,rbx
 100b469:	sar    rax,1
 100b46c:	inc    eax
 100b46e:	mov    DWORD PTR [rip+0x4fe0],eax        # 0x1010454
 100b474:	call   0x100af30
 100b479:	lea    rbx,[rip+0x5200]        # 0x1010680
 100b480:	mov    rcx,rbx
 100b483:	mov    rdx,r12
 100b486:	mov    r8d,0x208
 100b48c:	call   0x100c29a
 100b491:	inc    rdi
 100b494:	cmp    WORD PTR [rbx+rdi*2],r13w
 100b499:	jne    0x100b491
 100b49b:	mov    eax,edi
 100b49d:	mov    rcx,rbx
 100b4a0:	lea    rdx,[rbx+rax*2]
 100b4a4:	mov    rax,QWORD PTR [rip+0xffffffffffff76cd]        # 0x1002b78
 100b4ab:	mov    QWORD PTR [rdx],rax
 100b4ae:	movzx  eax,WORD PTR [rip+0xffffffffffff76cb]        # 0x1002b80
 100b4b5:	mov    WORD PTR [rdx+0x8],ax
 100b4b9:	call   0x100af30
 100b4be:	mov    DWORD PTR [rip+0x4f9b],r15d        # 0x1010460
 100b4c5:	mov    DWORD PTR [rip+0x4f85],esi        # 0x1010450
 100b4cb:	mov    eax,esi
 100b4cd:	jmp    0x100b4d1
 100b4cf:	xor    eax,eax
 100b4d1:	mov    r13,QWORD PTR [rsp+0x38]
 100b4d6:	mov    rbp,QWORD PTR [rsp+0x60]
 100b4db:	mov    rdi,QWORD PTR [rsp+0x68]
 100b4e0:	mov    r12,QWORD PTR [rsp+0x70]
 100b4e5:	mov    r14,QWORD PTR [rsp+0x30]
 100b4ea:	add    rsp,0x40
 100b4ee:	pop    r15
 100b4f0:	pop    rsi
 100b4f1:	pop    rbx
 100b4f2:	ret    
 100b4f3:	int3   
 100b4f4:	int3   
 100b4f5:	int3   
 100b4f6:	int3   
 100b4f7:	int3   
 100b4f8:	int3   
 100b4f9:	int3   
 100b4fa:	int3   
 100b4fb:	int3   
 100b4fc:	int3   
 100b4fd:	int3   
 100b4fe:	int3   
 100b4ff:	int3   
 100b500:	sub    rsp,0x58
 100b504:	lea    rdx,[rsp+0x20]
 100b509:	lea    rcx,[rip+0xfffffffffffffff0]        # 0x100b500
 100b510:	mov    r8d,0x30
 100b516:	call   QWORD PTR [rip+0xffffffffffff5bf4]        # 0x1001110
 100b51c:	test   rax,rax
 100b51f:	jne    0x100b526
 100b521:	add    rsp,0x58
 100b525:	ret    
 100b526:	mov    QWORD PTR [rsp+0x50],rbx
 100b52b:	mov    rbx,QWORD PTR [rsp+0x28]
 100b530:	xor    r8d,r8d
 100b533:	mov    rcx,rbx
 100b536:	xor    edx,edx
 100b538:	call   0x100b2c0
 100b53d:	test   eax,eax
 100b53f:	jne    0x100b562
 100b541:	lea    r8d,[rax+0x1]
 100b545:	lea    rdx,[rip+0xffffffffffff7724]        # 0x1002c70
 100b54c:	mov    rcx,rbx
 100b54f:	call   0x100b2c0
 100b554:	test   eax,eax
 100b556:	jne    0x100b562
 100b558:	mov    rbx,QWORD PTR [rsp+0x50]
 100b55d:	add    rsp,0x58
 100b561:	ret    
 100b562:	mov    eax,0x1
 100b567:	mov    rbx,QWORD PTR [rsp+0x50]
 100b56c:	add    rsp,0x58
 100b570:	ret    
 100b571:	int3   
 100b572:	int3   
 100b573:	int3   
 100b574:	int3   
 100b575:	int3   
 100b576:	int3   
 100b577:	int3   
 100b578:	int3   
 100b579:	int3   
 100b57a:	int3   
 100b57b:	int3   
 100b57c:	int3   
 100b57d:	int3   
 100b57e:	int3   
 100b57f:	int3   
 100b580:	rex push rbx
 100b582:	sub    rsp,0x20
 100b586:	cmp    DWORD PTR [rip+0x4ec3],0x0        # 0x1010450
 100b58d:	mov    rbx,rcx
 100b590:	jne    0x100b598
 100b592:	call   QWORD PTR [rip+0xffffffffffff5bf8]        # 0x1001190
 100b598:	cmp    rbx,0xffffffff80000000
 100b59f:	jne    0x100b5ae
 100b5a1:	lea    rax,[rip+0xffffffffffff76e8]        # 0x1002c90
 100b5a8:	add    rsp,0x20
 100b5ac:	pop    rbx
 100b5ad:	ret    
 100b5ae:	cmp    rbx,0xffffffff80000001
 100b5b5:	jne    0x100b5c4
 100b5b7:	lea    rax,[rip+0xffffffffffff76fa]        # 0x1002cb8
 100b5be:	add    rsp,0x20
 100b5c2:	pop    rbx
 100b5c3:	ret    
 100b5c4:	cmp    rbx,0xffffffff80000002
 100b5cb:	jne    0x100b5da
 100b5cd:	lea    rax,[rip+0xffffffffffff770c]        # 0x1002ce0
 100b5d4:	add    rsp,0x20
 100b5d8:	pop    rbx
 100b5d9:	ret    
 100b5da:	cmp    rbx,0xffffffff80000003
 100b5e1:	jne    0x100b5f0
 100b5e3:	lea    rax,[rip+0xffffffffffff771e]        # 0x1002d08
 100b5ea:	add    rsp,0x20
 100b5ee:	pop    rbx
 100b5ef:	ret    
 100b5f0:	cmp    rbx,0xffffffff80000004
 100b5f7:	jne    0x100b606
 100b5f9:	lea    rax,[rip+0xffffffffffff7720]        # 0x1002d20
 100b600:	add    rsp,0x20
 100b604:	pop    rbx
 100b605:	ret    
 100b606:	cmp    rbx,0xffffffff80000005
 100b60d:	jne    0x100b61c
 100b60f:	lea    rax,[rip+0xffffffffffff773a]        # 0x1002d50
 100b616:	add    rsp,0x20
 100b61a:	pop    rbx
 100b61b:	ret    
 100b61c:	lea    rax,[rip+0xffffffffffff7755]        # 0x1002d78
 100b623:	cmp    rbx,0xffffffff80000006
 100b62a:	je     0x100b62f
 100b62c:	mov    rax,rbx
 100b62f:	add    rsp,0x20
 100b633:	pop    rbx
 100b634:	ret    
 100b635:	int3   
 100b636:	int3   
 100b637:	int3   
 100b638:	int3   
 100b639:	int3   
 100b63a:	int3   
 100b63b:	int3   
 100b63c:	int3   
 100b63d:	int3   
 100b63e:	int3   
 100b63f:	int3   
 100b640:	mov    QWORD PTR [rsp+0x8],rbx
 100b645:	mov    QWORD PTR [rsp+0x10],rbp
 100b64a:	mov    QWORD PTR [rsp+0x18],rsi
 100b64f:	push   rdi
 100b650:	push   r14
 100b652:	push   r15
 100b654:	sub    rsp,0x20
 100b658:	mov    rbp,rdx
 100b65b:	call   0x100b580
 100b660:	or     rbx,0xffffffffffffffff
 100b664:	mov    r14,rax
 100b667:	mov    rsi,rbx
 100b66a:	nop    WORD PTR [rax+rax*1+0x0]
 100b670:	inc    rsi
 100b673:	cmp    WORD PTR [rax+rsi*2],0x0
 100b678:	jne    0x100b670
 100b67a:	add    rsi,rsi
 100b67d:	nop    DWORD PTR [rax]
 100b680:	inc    rbx
 100b683:	cmp    WORD PTR [rbp+rbx*2+0x0],0x0
 100b689:	jne    0x100b680
 100b68b:	add    rbx,rbx
 100b68e:	lea    rdi,[rsi+0x4]
 100b692:	call   QWORD PTR [rip+0xffffffffffff5a60]        # 0x10010f8
 100b698:	lea    r8,[rdi+rbx*1]
 100b69c:	xor    edx,edx
 100b69e:	mov    rcx,rax
 100b6a1:	call   QWORD PTR [rip+0xffffffffffff5a39]        # 0x10010e0
 100b6a7:	mov    r15,rax
 100b6aa:	test   rax,rax
 100b6ad:	je     0x100b6e8
 100b6af:	mov    r8d,esi
 100b6b2:	mov    rdx,r14
 100b6b5:	mov    rcx,rax
 100b6b8:	call   0x100c29a
 100b6bd:	mov    eax,0x5c
 100b6c2:	shr    rsi,1
 100b6c5:	lea    rdi,[r15+rsi*2]
 100b6c9:	mov    r8d,ebx
 100b6cc:	mov    rdx,rbp
 100b6cf:	lea    rcx,[rdi+0x2]
 100b6d3:	mov    WORD PTR [rdi],ax
 100b6d6:	call   0x100c29a
 100b6db:	shr    rbx,1
 100b6de:	xor    eax,eax
 100b6e0:	mov    WORD PTR [rdi+rbx*2+0x2],ax
 100b6e5:	mov    rax,r15
 100b6e8:	mov    rbx,QWORD PTR [rsp+0x40]
 100b6ed:	mov    rbp,QWORD PTR [rsp+0x48]
 100b6f2:	mov    rsi,QWORD PTR [rsp+0x50]
 100b6f7:	add    rsp,0x20
 100b6fb:	pop    r15
 100b6fd:	pop    r14
 100b6ff:	pop    rdi
 100b700:	ret    
 100b701:	int3   
 100b702:	int3   
 100b703:	int3   
 100b704:	int3   
 100b705:	int3   
 100b706:	int3   
 100b707:	int3   
 100b708:	int3   
 100b709:	int3   
 100b70a:	int3   
 100b70b:	int3   
 100b70c:	int3   
 100b70d:	int3   
 100b70e:	int3   
 100b70f:	int3   
 100b710:	mov    QWORD PTR [rsp+0x10],rbx
 100b715:	mov    QWORD PTR [rsp+0x18],rbp
 100b71a:	mov    QWORD PTR [rsp+0x20],rsi
 100b71f:	push   rdi
 100b720:	push   r14
 100b722:	push   r15
 100b724:	sub    rsp,0x30
 100b728:	mov    r14,rcx
 100b72b:	mov    r15d,0x80
 100b731:	or     rbx,0xffffffffffffffff
 100b735:	inc    rbx
 100b738:	cmp    WORD PTR [rcx+rbx*2],0x0
 100b73d:	jne    0x100b735
 100b73f:	lea    esi,[rbx+0x80]
 100b745:	mov    edi,esi
 100b747:	add    rdi,rdi
 100b74a:	call   QWORD PTR [rip+0xffffffffffff59a8]        # 0x10010f8
 100b750:	mov    r8,rdi
 100b753:	mov    rcx,rax
 100b756:	xor    edx,edx
 100b758:	call   QWORD PTR [rip+0xffffffffffff5982]        # 0x10010e0
 100b75e:	mov    rbp,rax
 100b761:	test   rax,rax
 100b764:	je     0x100b826
 100b76a:	mov    QWORD PTR [rsp+0x50],r12
 100b76f:	lea    r12,[rip+0xffffffffffff73f2]        # 0x1002b68
 100b776:	data16 nop WORD PTR [rax+rax*1+0x0]
 100b780:	mov    r9d,ebx
 100b783:	mov    r8,r14
 100b786:	mov    edx,0x1
 100b78b:	mov    ecx,0x400
 100b790:	mov    DWORD PTR [rsp+0x28],0x5
 100b798:	mov    QWORD PTR [rsp+0x20],r12
 100b79d:	call   QWORD PTR [rip+0xffffffffffff5935]        # 0x10010d8
 100b7a3:	cmp    eax,0x2
 100b7a6:	jne    0x100b7c7
 100b7a8:	mov    edi,DWORD PTR [rip+0x4ca6]        # 0x1010454
 100b7ae:	cmp    edi,esi
 100b7b0:	ja     0x100b7da
 100b7b2:	lea    r8d,[rdi+rdi*1]
 100b7b6:	lea    rdx,[rip+0x50d3]        # 0x1010890
 100b7bd:	mov    rcx,rbp
 100b7c0:	call   0x100c29a
 100b7c5:	jmp    0x100b7d8
 100b7c7:	mov    r8d,esi
 100b7ca:	mov    rdx,rbp
 100b7cd:	mov    rcx,r14
 100b7d0:	call   QWORD PTR [rip+0xffffffffffff59aa]        # 0x1001180
 100b7d6:	mov    edi,eax
 100b7d8:	cmp    edi,esi
 100b7da:	jle    0x100b81e
 100b7dc:	add    r15d,r15d
 100b7df:	lea    esi,[rbx+r15*1]
 100b7e3:	call   QWORD PTR [rip+0xffffffffffff590f]        # 0x10010f8
 100b7e9:	mov    r8,rbp
 100b7ec:	mov    rcx,rax
 100b7ef:	xor    edx,edx
 100b7f1:	call   QWORD PTR [rip+0xffffffffffff58f1]        # 0x10010e8
 100b7f7:	mov    edi,esi
 100b7f9:	add    rdi,rdi
 100b7fc:	call   QWORD PTR [rip+0xffffffffffff58f6]        # 0x10010f8
 100b802:	mov    r8,rdi
 100b805:	mov    rcx,rax
 100b808:	xor    edx,edx
 100b80a:	call   QWORD PTR [rip+0xffffffffffff58d0]        # 0x10010e0
 100b810:	mov    rbp,rax
 100b813:	test   rax,rax
 100b816:	jne    0x100b780
 100b81c:	jmp    0x100b821
 100b81e:	mov    rax,rbp
 100b821:	mov    r12,QWORD PTR [rsp+0x50]
 100b826:	mov    rbx,QWORD PTR [rsp+0x58]
 100b82b:	mov    rbp,QWORD PTR [rsp+0x60]
 100b830:	mov    rsi,QWORD PTR [rsp+0x68]
 100b835:	add    rsp,0x30
 100b839:	pop    r15
 100b83b:	pop    r14
 100b83d:	pop    rdi
 100b83e:	ret    
 100b83f:	int3   
 100b840:	int3   
 100b841:	int3   
 100b842:	int3   
 100b843:	int3   
 100b844:	int3   
 100b845:	int3   
 100b846:	int3   
 100b847:	int3   
 100b848:	int3   
 100b849:	int3   
 100b84a:	int3   
 100b84b:	int3   
 100b84c:	int3   
 100b84d:	int3   
 100b84e:	int3   
 100b84f:	int3   
 100b850:	mov    QWORD PTR [rsp+0x20],rbx
 100b855:	push   rbp
 100b856:	push   rsi
 100b857:	push   rdi
 100b858:	sub    rsp,0x30
 100b85c:	mov    rsi,rdx
 100b85f:	mov    rbp,rcx
 100b862:	mov    edi,0x80
 100b867:	call   QWORD PTR [rip+0xffffffffffff588b]        # 0x10010f8
 100b86d:	xor    edx,edx
 100b86f:	mov    r8d,0x100
 100b875:	mov    rcx,rax
 100b878:	call   QWORD PTR [rip+0xffffffffffff5862]        # 0x10010e0
 100b87e:	mov    rbx,rax
 100b881:	test   rax,rax
 100b884:	je     0x100b97b
 100b88a:	mov    QWORD PTR [rsp+0x50],r12
 100b88f:	mov    QWORD PTR [rsp+0x58],r14
 100b894:	mov    QWORD PTR [rsp+0x60],r15
 100b899:	lea    r15,[rip+0x4bd0]        # 0x1010470
 100b8a0:	lea    r12,[rip+0x4dd9]        # 0x1010680
 100b8a7:	mov    r14d,0xffff
 100b8ad:	nop    DWORD PTR [rax]
 100b8b0:	test   rbp,rbp
 100b8b3:	je     0x100b8f5
 100b8b5:	test   rsi,rsi
 100b8b8:	je     0x100b8f5
 100b8ba:	lea    r8,[rip+0xffffffffffff72b3]        # 0x1002b74
 100b8c1:	mov    r9,rbx
 100b8c4:	mov    rdx,rsi
 100b8c7:	mov    rcx,rbp
 100b8ca:	mov    QWORD PTR [rsp+0x28],r12
 100b8cf:	mov    DWORD PTR [rsp+0x20],edi
 100b8d3:	call   QWORD PTR [rip+0xffffffffffff589f]        # 0x1001178
 100b8d9:	lea    ecx,[rdi-0x1]
 100b8dc:	mov    r11d,eax
 100b8df:	cmp    eax,ecx
 100b8e1:	je     0x100b8f0
 100b8e3:	cmp    WORD PTR [rbx],r14w
 100b8e7:	jne    0x100b8f0
 100b8e9:	cmp    WORD PTR [rbx+0x2],0x0
 100b8ee:	je     0x100b8f5
 100b8f0:	cmp    eax,0xffffffff
 100b8f3:	jne    0x100b917
 100b8f5:	lea    r8,[rip+0xffffffffffff7278]        # 0x1002b74
 100b8fc:	mov    r9,rbx
 100b8ff:	mov    rdx,rsi
 100b902:	mov    rcx,rbp
 100b905:	mov    QWORD PTR [rsp+0x28],r15
 100b90a:	mov    DWORD PTR [rsp+0x20],edi
 100b90e:	call   QWORD PTR [rip+0xffffffffffff5864]        # 0x1001178
 100b914:	mov    r11d,eax
 100b917:	test   rbp,rbp
 100b91a:	je     0x100b924
 100b91c:	lea    eax,[rdi-0x1]
 100b91f:	test   rsi,rsi
 100b922:	jne    0x100b927
 100b924:	lea    eax,[rdi-0x2]
 100b927:	cmp    r11d,eax
 100b92a:	jne    0x100b969
 100b92c:	add    edi,edi
 100b92e:	call   QWORD PTR [rip+0xffffffffffff57c4]        # 0x10010f8
 100b934:	mov    r8,rbx
 100b937:	mov    rcx,rax
 100b93a:	xor    edx,edx
 100b93c:	call   QWORD PTR [rip+0xffffffffffff57a6]        # 0x10010e8
 100b942:	mov    ebx,edi
 100b944:	add    rbx,rbx
 100b947:	call   QWORD PTR [rip+0xffffffffffff57ab]        # 0x10010f8
 100b94d:	mov    r8,rbx
 100b950:	mov    rcx,rax
 100b953:	xor    edx,edx
 100b955:	call   QWORD PTR [rip+0xffffffffffff5785]        # 0x10010e0
 100b95b:	mov    rbx,rax
 100b95e:	test   rax,rax
 100b961:	jne    0x100b8b0
 100b967:	jmp    0x100b96c
 100b969:	mov    rax,rbx
 100b96c:	mov    r14,QWORD PTR [rsp+0x58]
 100b971:	mov    r12,QWORD PTR [rsp+0x50]
 100b976:	mov    r15,QWORD PTR [rsp+0x60]
 100b97b:	mov    rbx,QWORD PTR [rsp+0x68]
 100b980:	add    rsp,0x30
 100b984:	pop    rdi
 100b985:	pop    rsi
 100b986:	pop    rbp
 100b987:	ret    
 100b988:	int3   
 100b989:	int3   
 100b98a:	int3   
 100b98b:	int3   
 100b98c:	int3   
 100b98d:	int3   
 100b98e:	int3   
 100b98f:	int3   
 100b990:	rex push rdi
 100b992:	push   r12
 100b994:	push   r13
 100b996:	sub    rsp,0x40
 100b99a:	mov    r13,rdx
 100b99d:	mov    r12,rcx
 100b9a0:	call   0x100b850
 100b9a5:	mov    rdi,rax
 100b9a8:	test   rax,rax
 100b9ab:	je     0x100babc
 100b9b1:	test   r13,r13
 100b9b4:	je     0x100babc
 100b9ba:	test   r12,r12
 100b9bd:	je     0x100babc
 100b9c3:	mov    QWORD PTR [rsp+0x60],rbx
 100b9c8:	mov    QWORD PTR [rsp+0x68],rbp
 100b9cd:	mov    QWORD PTR [rsp+0x70],rsi
 100b9d2:	mov    eax,0xffff
 100b9d7:	mov    QWORD PTR [rsp+0x38],r14
 100b9dc:	mov    QWORD PTR [rsp+0x30],r15
 100b9e1:	cmp    WORD PTR [rdi],ax
 100b9e4:	jne    0x100ba6d
 100b9ea:	cmp    WORD PTR [rdi+0x2],0x0
 100b9ef:	jne    0x100ba6d
 100b9f1:	cmp    DWORD PTR [rip+0x4a68],0x0        # 0x1010460
 100b9f8:	je     0x100ba6d
 100b9fa:	or     rbp,0xffffffffffffffff
 100b9fe:	mov    rbx,rbp
 100ba01:	inc    rbx
 100ba04:	cmp    WORD PTR [r12+rbx*2],0x0
 100ba0a:	jne    0x100ba01
 100ba0c:	mov    rsi,rbp
 100ba0f:	nop
 100ba10:	inc    rsi
 100ba13:	cmp    WORD PTR [r13+rsi*2+0x0],0x0
 100ba1a:	jne    0x100ba10
 100ba1c:	xor    r14d,r14d
 100ba1f:	lea    r15,[rip+0x3dda]        # 0x100f800
 100ba26:	data16 nop WORD PTR [rax+rax*1+0x0]
 100ba30:	mov    rcx,QWORD PTR [r15]
 100ba33:	mov    eax,DWORD PTR [r15+0x8]
 100ba37:	mov    r9d,ebx
 100ba3a:	mov    DWORD PTR [rsp+0x28],eax
 100ba3e:	mov    QWORD PTR [rsp+0x20],rcx
 100ba43:	mov    r8,r12
 100ba46:	mov    ecx,0x400
 100ba4b:	mov    edx,0x1
 100ba50:	call   QWORD PTR [rip+0xffffffffffff5682]        # 0x10010d8
 100ba56:	cmp    eax,0x2
 100ba59:	je     0x100bac6
 100ba5b:	inc    r14d
 100ba5e:	add    r15,0x20
 100ba62:	cmp    r14d,0x1
 100ba66:	jb     0x100ba30
 100ba68:	mov    eax,0xffff
 100ba6d:	test   rdi,rdi
 100ba70:	je     0x100baa0
 100ba72:	cmp    WORD PTR [rdi],ax
 100ba75:	jne    0x100ba7e
 100ba77:	cmp    WORD PTR [rdi+0x2],0x0
 100ba7c:	je     0x100baa0
 100ba7e:	mov    rcx,rdi
 100ba81:	call   0x100b710
 100ba86:	mov    rbx,rax
 100ba89:	call   QWORD PTR [rip+0xffffffffffff5669]        # 0x10010f8
 100ba8f:	mov    r8,rdi
 100ba92:	mov    rcx,rax
 100ba95:	xor    edx,edx
 100ba97:	call   QWORD PTR [rip+0xffffffffffff564b]        # 0x10010e8
 100ba9d:	mov    rdi,rbx
 100baa0:	mov    r15,QWORD PTR [rsp+0x30]
 100baa5:	mov    r14,QWORD PTR [rsp+0x38]
 100baaa:	mov    rsi,QWORD PTR [rsp+0x70]
 100baaf:	mov    rbp,QWORD PTR [rsp+0x68]
 100bab4:	mov    rbx,QWORD PTR [rsp+0x60]
 100bab9:	mov    rax,rdi
 100babc:	add    rsp,0x40
 100bac0:	pop    r13
 100bac2:	pop    r12
 100bac4:	pop    rdi
 100bac5:	ret    
 100bac6:	lea    rcx,[rip+0x3d33]        # 0x100f800
 100bacd:	movsxd rbx,r14d
 100bad0:	shl    rbx,0x5
 100bad4:	add    rbx,rcx
 100bad7:	mov    rcx,QWORD PTR [rbx+0x10]
 100badb:	call   0x100b710
 100bae0:	test   rax,rax
 100bae3:	je     0x100bb3f
 100bae5:	inc    rbp
 100bae8:	cmp    WORD PTR [rax+rbp*2],0x0
 100baed:	jne    0x100bae5
 100baef:	mov    r9d,ebp
 100baf2:	mov    r8,rax
 100baf5:	mov    edx,0x1
 100bafa:	mov    ecx,0x400
 100baff:	mov    DWORD PTR [rsp+0x28],esi
 100bb03:	mov    QWORD PTR [rsp+0x20],r13
 100bb08:	call   QWORD PTR [rip+0xffffffffffff55ca]        # 0x10010d8
 100bb0e:	cmp    eax,0x2
 100bb11:	jne    0x100ba68
 100bb17:	call   QWORD PTR [rip+0xffffffffffff55db]        # 0x10010f8
 100bb1d:	mov    r8,rdi
 100bb20:	xor    edx,edx
 100bb22:	mov    rcx,rax
 100bb25:	call   QWORD PTR [rip+0xffffffffffff55bd]        # 0x10010e8
 100bb2b:	mov    rdx,QWORD PTR [rbx+0x10]
 100bb2f:	mov    rcx,r12
 100bb32:	call   0x100b850
 100bb37:	mov    rdi,rax
 100bb3a:	jmp    0x100ba68
 100bb3f:	call   QWORD PTR [rip+0xffffffffffff55b3]        # 0x10010f8
 100bb45:	mov    r8,rdi
 100bb48:	xor    edx,edx
 100bb4a:	mov    rcx,rax
 100bb4d:	call   QWORD PTR [rip+0xffffffffffff5595]        # 0x10010e8
 100bb53:	xor    edi,edi
 100bb55:	jmp    0x100baa0
 100bb5a:	int3   
 100bb5b:	int3   
 100bb5c:	int3   
 100bb5d:	int3   
 100bb5e:	int3   
 100bb5f:	int3   
 100bb60:	rex push rbx
 100bb62:	sub    rsp,0x20
 100bb66:	cmp    DWORD PTR [rip+0x48e3],0x0        # 0x1010450
 100bb6d:	mov    rbx,rcx
 100bb70:	je     0x100bbd5
 100bb72:	cmp    rcx,0xffffffff80000000
 100bb79:	je     0x100bbc5
 100bb7b:	cmp    rcx,0xffffffff80000001
 100bb82:	je     0x100bbc5
 100bb84:	cmp    rcx,0xffffffff80000002
 100bb8b:	je     0x100bbc5
 100bb8d:	cmp    rcx,0xffffffff80000003
 100bb94:	je     0x100bbc5
 100bb96:	cmp    rcx,0xffffffff80000004
 100bb9d:	je     0x100bbc5
 100bb9f:	cmp    rcx,0xffffffff80000005
 100bba6:	je     0x100bbc5
 100bba8:	cmp    rcx,0xffffffff80000006
 100bbaf:	je     0x100bbc5
 100bbb1:	call   QWORD PTR [rip+0xffffffffffff5541]        # 0x10010f8
 100bbb7:	mov    r8,rbx
 100bbba:	xor    edx,edx
 100bbbc:	mov    rcx,rax
 100bbbf:	call   QWORD PTR [rip+0xffffffffffff5523]        # 0x10010e8
 100bbc5:	xor    ecx,ecx
 100bbc7:	call   QWORD PTR [rip+0xffffffffffff555b]        # 0x1001128
 100bbcd:	xor    eax,eax
 100bbcf:	add    rsp,0x20
 100bbd3:	pop    rbx
 100bbd4:	ret    
 100bbd5:	add    rsp,0x20
 100bbd9:	pop    rbx
 100bbda:	rex.W jmp QWORD PTR [rip+0xffffffffffff541f]        # 0x1001000
 100bbe1:	int3   
 100bbe2:	int3   
 100bbe3:	int3   
 100bbe4:	int3   
 100bbe5:	int3   
 100bbe6:	int3   
 100bbe7:	int3   
 100bbe8:	int3   
 100bbe9:	int3   
 100bbea:	int3   
 100bbeb:	int3   
 100bbec:	int3   
 100bbed:	int3   
 100bbee:	int3   
 100bbef:	int3   
 100bbf0:	rex push rdi
 100bbf2:	sub    rsp,0x20
 100bbf6:	mov    rdi,rdx
 100bbf9:	cmp    rcx,0xffffffff80000000
 100bc00:	je     0x100bcdc
 100bc06:	cmp    rcx,0xffffffff80000001
 100bc0d:	je     0x100bcdc
 100bc13:	cmp    rcx,0xffffffff80000002
 100bc1a:	je     0x100bcdc
 100bc20:	cmp    rcx,0xffffffff80000003
 100bc27:	je     0x100bcdc
 100bc2d:	cmp    rcx,0xffffffff80000004
 100bc34:	je     0x100bcdc
 100bc3a:	cmp    rcx,0xffffffff80000005
 100bc41:	je     0x100bcdc
 100bc47:	cmp    rcx,0xffffffff80000006
 100bc4e:	je     0x100bcdc
 100bc54:	mov    QWORD PTR [rsp+0x30],rbx
 100bc59:	mov    QWORD PTR [rsp+0x38],rbp
 100bc5e:	mov    QWORD PTR [rsp+0x40],rsi
 100bc63:	call   0x100b580
 100bc68:	or     rcx,0xffffffffffffffff
 100bc6c:	mov    rbx,rax
 100bc6f:	nop
 100bc70:	inc    rcx
 100bc73:	cmp    WORD PTR [rax+rcx*2],0x0
 100bc78:	jne    0x100bc70
 100bc7a:	lea    rbp,[rcx*2+0x2]
 100bc82:	call   QWORD PTR [rip+0xffffffffffff5470]        # 0x10010f8
 100bc88:	mov    r8,rbp
 100bc8b:	mov    rcx,rax
 100bc8e:	xor    edx,edx
 100bc90:	call   QWORD PTR [rip+0xffffffffffff544a]        # 0x10010e0
 100bc96:	mov    rsi,rax
 100bc99:	test   rax,rax
 100bc9c:	jne    0x100bcbf
 100bc9e:	lea    ecx,[rax+0x8]
 100bca1:	call   QWORD PTR [rip+0xffffffffffff5481]        # 0x1001128
 100bca7:	lea    eax,[rsi+0x8]
 100bcaa:	mov    rbp,QWORD PTR [rsp+0x38]
 100bcaf:	mov    rbx,QWORD PTR [rsp+0x30]
 100bcb4:	mov    rsi,QWORD PTR [rsp+0x40]
 100bcb9:	add    rsp,0x20
 100bcbd:	pop    rdi
 100bcbe:	ret    
 100bcbf:	mov    r8d,ebp
 100bcc2:	mov    rdx,rbx
 100bcc5:	mov    rcx,rax
 100bcc8:	call   0x100c29a
 100bccd:	xor    ecx,ecx
 100bccf:	mov    QWORD PTR [rdi],rsi
 100bcd2:	call   QWORD PTR [rip+0xffffffffffff5450]        # 0x1001128
 100bcd8:	xor    eax,eax
 100bcda:	jmp    0x100bcaa
 100bcdc:	mov    QWORD PTR [rdx],rcx
 100bcdf:	xor    ecx,ecx
 100bce1:	call   QWORD PTR [rip+0xffffffffffff5441]        # 0x1001128
 100bce7:	xor    eax,eax
 100bce9:	add    rsp,0x20
 100bced:	pop    rdi
 100bcee:	ret    
 100bcef:	int3   
 100bcf0:	int3   
 100bcf1:	int3   
 100bcf2:	int3   
 100bcf3:	int3   
 100bcf4:	int3   
 100bcf5:	int3   
 100bcf6:	int3   
 100bcf7:	int3   
 100bcf8:	int3   
 100bcf9:	int3   
 100bcfa:	int3   
 100bcfb:	int3   
 100bcfc:	int3   
 100bcfd:	int3   
 100bcfe:	int3   
 100bcff:	int3   
 100bd00:	push   r14
 100bd02:	sub    rsp,0x20
 100bd06:	cmp    DWORD PTR [rip+0x4743],0x0        # 0x1010450
 100bd0d:	mov    r14,r8
 100bd10:	je     0x100be13
 100bd16:	test   rdx,rdx
 100bd19:	je     0x100be05
 100bd1f:	cmp    WORD PTR [rdx],0x0
 100bd23:	je     0x100be05
 100bd29:	mov    QWORD PTR [rsp+0x30],rbx
 100bd2e:	mov    QWORD PTR [rsp+0x38],rsi
 100bd33:	call   0x100b640
 100bd38:	mov    rsi,rax
 100bd3b:	test   rax,rax
 100bd3e:	jne    0x100bd60
 100bd40:	mov    ebx,0x8
 100bd45:	mov    ecx,ebx
 100bd47:	call   QWORD PTR [rip+0xffffffffffff53db]        # 0x1001128
 100bd4d:	mov    rsi,QWORD PTR [rsp+0x38]
 100bd52:	mov    eax,ebx
 100bd54:	mov    rbx,QWORD PTR [rsp+0x30]
 100bd59:	add    rsp,0x20
 100bd5d:	pop    r14
 100bd5f:	ret    
 100bd60:	xor    edx,edx
 100bd62:	mov    rcx,rax
 100bd65:	mov    QWORD PTR [rsp+0x40],rdi
 100bd6a:	call   0x100b850
 100bd6f:	mov    rdi,rax
 100bd72:	test   rax,rax
 100bd75:	je     0x100bdcc
 100bd77:	mov    eax,0xffff
 100bd7c:	cmp    WORD PTR [rdi],ax
 100bd7f:	jne    0x100bd8f
 100bd81:	cmp    WORD PTR [rdi+0x2],0x0
 100bd86:	jne    0x100bd8f
 100bd88:	mov    ebx,0x2
 100bd8d:	jmp    0x100bd91
 100bd8f:	xor    ebx,ebx
 100bd91:	call   QWORD PTR [rip+0xffffffffffff5361]        # 0x10010f8
 100bd97:	mov    r8,rdi
 100bd9a:	xor    edx,edx
 100bd9c:	mov    rcx,rax
 100bd9f:	call   QWORD PTR [rip+0xffffffffffff5343]        # 0x10010e8
 100bda5:	test   ebx,ebx
 100bda7:	jne    0x100bdd1
 100bda9:	mov    ecx,ebx
 100bdab:	mov    QWORD PTR [r14],rsi
 100bdae:	call   QWORD PTR [rip+0xffffffffffff5374]        # 0x1001128
 100bdb4:	mov    rdi,QWORD PTR [rsp+0x40]
 100bdb9:	mov    rsi,QWORD PTR [rsp+0x38]
 100bdbe:	mov    eax,ebx
 100bdc0:	mov    rbx,QWORD PTR [rsp+0x30]
 100bdc5:	add    rsp,0x20
 100bdc9:	pop    r14
 100bdcb:	ret    
 100bdcc:	mov    ebx,0x8
 100bdd1:	call   QWORD PTR [rip+0xffffffffffff5321]        # 0x10010f8
 100bdd7:	mov    r8,rsi
 100bdda:	xor    edx,edx
 100bddc:	mov    rcx,rax
 100bddf:	call   QWORD PTR [rip+0xffffffffffff5303]        # 0x10010e8
 100bde5:	mov    ecx,ebx
 100bde7:	call   QWORD PTR [rip+0xffffffffffff533b]        # 0x1001128
 100bded:	mov    rdi,QWORD PTR [rsp+0x40]
 100bdf2:	mov    rsi,QWORD PTR [rsp+0x38]
 100bdf7:	mov    eax,ebx
 100bdf9:	mov    rbx,QWORD PTR [rsp+0x30]
 100bdfe:	add    rsp,0x20
 100be02:	pop    r14
 100be04:	ret    
 100be05:	mov    rdx,r8
 100be08:	add    rsp,0x20
 100be0c:	pop    r14
 100be0e:	jmp    0x100bbf0
 100be13:	add    rsp,0x20
 100be17:	pop    r14
 100be19:	rex.W jmp QWORD PTR [rip+0xffffffffffff5230]        # 0x1001050
 100be20:	lea    rax,[rip+0x3a09]        # 0x100f830
 100be27:	jmp    0x100be2c
 100be2c:	mov    QWORD PTR [rsp+0x8],rcx
 100be31:	mov    QWORD PTR [rsp+0x10],rdx
 100be36:	mov    QWORD PTR [rsp+0x18],r8
 100be3b:	mov    QWORD PTR [rsp+0x20],r9
 100be40:	sub    rsp,0x68
 100be44:	movdqa XMMWORD PTR [rsp+0x20],xmm0
 100be4a:	movdqa XMMWORD PTR [rsp+0x30],xmm1
 100be50:	movdqa XMMWORD PTR [rsp+0x40],xmm2
 100be56:	movdqa XMMWORD PTR [rsp+0x50],xmm3
 100be5c:	mov    rdx,rax
 100be5f:	lea    rcx,[rip+0x10b6]        # 0x100cf1c
 100be66:	call   0x100bee8
 100be6b:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
 100be71:	movdqa xmm1,XMMWORD PTR [rsp+0x30]
 100be77:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
 100be7d:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
 100be83:	mov    rcx,QWORD PTR [rsp+0x70]
 100be88:	mov    rdx,QWORD PTR [rsp+0x78]
 100be8d:	mov    r8,QWORD PTR [rsp+0x80]
 100be95:	mov    r9,QWORD PTR [rsp+0x88]
 100be9d:	add    rsp,0x68
 100bea1:	jmp    0x100bea3
 100bea3:	jmp    rax
 100bea5:	int3   
 100bea6:	int3   
 100bea7:	int3   
 100bea8:	int3   
 100bea9:	int3   
 100beaa:	int3   
 100beab:	jmp    QWORD PTR [rip+0x397f]        # 0x100f830
 100beb1:	lea    rax,[rip+0x3968]        # 0x100f820
 100beb8:	jmp    0x100be2c
 100bebd:	int3   
 100bebe:	int3   
 100bebf:	int3   
 100bec0:	int3   
 100bec1:	int3   
 100bec2:	int3   
 100bec3:	jmp    QWORD PTR [rip+0x3957]        # 0x100f820
 100bec9:	lea    rax,[rip+0x3958]        # 0x100f828
 100bed0:	jmp    0x100be2c
 100bed5:	int3   
 100bed6:	int3   
 100bed7:	int3   
 100bed8:	int3   
 100bed9:	int3   
 100beda:	int3   
 100bedb:	jmp    QWORD PTR [rip+0x3947]        # 0x100f828
 100bee1:	int3   
 100bee2:	int3   
 100bee3:	int3   
 100bee4:	int3   
 100bee5:	int3   
 100bee6:	int3   
 100bee7:	int3   
 100bee8:	mov    r11,rsp
 100beeb:	mov    QWORD PTR [r11+0x20],rbx
 100beef:	push   rbp
 100bef0:	push   rsi
 100bef1:	push   rdi
 100bef2:	push   r12
 100bef4:	push   r13
 100bef6:	push   r14
 100bef8:	push   r15
 100befa:	sub    rsp,0x70
 100befe:	mov    eax,DWORD PTR [rcx+0x4]
 100bf01:	mov    r9d,DWORD PTR [rcx]
 100bf04:	mov    r12d,DWORD PTR [rcx+0x8]
 100bf08:	mov    r10d,DWORD PTR [rcx+0xc]
 100bf0c:	mov    DWORD PTR [rsp+0x20],0x48
 100bf14:	mov    rsi,rcx
 100bf17:	mov    ecx,DWORD PTR [rcx+0x10]
 100bf1a:	mov    r14d,DWORD PTR [rsi+0x14]
 100bf1e:	mov    r15d,DWORD PTR [rsi+0x1c]
 100bf22:	mov    r13,rdx
 100bf25:	lea    rdx,[rip+0xffffffffffff40d4]        # 0x1000000
 100bf2c:	mov    QWORD PTR [r11-0x80],rsi
 100bf30:	add    rax,rdx
 100bf33:	mov    QWORD PTR [r11-0x78],r13
 100bf37:	and    r9d,0x1
 100bf3b:	mov    QWORD PTR [r11-0x70],rax
 100bf3f:	and    DWORD PTR [rsp+0x40],0x0
 100bf44:	xor    eax,eax
 100bf46:	and    QWORD PTR [r11-0x58],rax
 100bf4a:	and    QWORD PTR [r11-0x50],rax
 100bf4e:	mov    QWORD PTR [r11-0x60],rax
 100bf52:	and    DWORD PTR [rsp+0x60],eax
 100bf56:	add    r12,rdx
 100bf59:	add    r10,rdx
 100bf5c:	add    rcx,rdx
 100bf5f:	add    r14,rdx
 100bf62:	test   r9b,r9b
 100bf65:	jne    0x100bf8c
 100bf67:	xor    edx,edx
 100bf69:	lea    rax,[rsp+0x20]
 100bf6e:	lea    r9,[r11+0x8]
 100bf72:	lea    r8d,[rdx+0x1]
 100bf76:	mov    ecx,0xc06d0057
 100bf7b:	mov    QWORD PTR [r11+0x8],rax
 100bf7f:	call   QWORD PTR [rip+0xffffffffffff51cb]        # 0x1001150
 100bf85:	xor    eax,eax
 100bf87:	jmp    0x100c1be
 100bf8c:	mov    rdi,QWORD PTR [r12]
 100bf90:	movabs rax,0x8000000000000000
 100bf9a:	mov    rbp,r13
 100bf9d:	sub    rbp,r10
 100bfa0:	sar    rbp,0x3
 100bfa4:	mov    ebp,ebp
 100bfa6:	test   QWORD PTR [rcx+rbp*8],rax
 100bfaa:	mov    eax,0x0
 100bfaf:	sete   al
 100bfb2:	mov    DWORD PTR [rsp+0x40],eax
 100bfb6:	test   eax,eax
 100bfb8:	je     0x100bfce
 100bfba:	mov    eax,DWORD PTR [rcx+rbp*8]
 100bfbd:	lea    rcx,[rip+0xffffffffffff403e]        # 0x1000002
 100bfc4:	add    rax,rcx
 100bfc7:	mov    QWORD PTR [rsp+0x48],rax
 100bfcc:	jmp    0x100bfd6
 100bfce:	movzx  eax,WORD PTR [rcx+rbp*8]
 100bfd2:	mov    DWORD PTR [rsp+0x48],eax
 100bfd6:	mov    rax,QWORD PTR [rip+0xffffffffffff6783]        # 0x1002760
 100bfdd:	xor    ebx,ebx
 100bfdf:	test   rax,rax
 100bfe2:	je     0x100c000
 100bfe4:	lea    rdx,[rsp+0x20]
 100bfe9:	xor    ecx,ecx
 100bfeb:	call   rax
 100bfed:	mov    rbx,rax
 100bff0:	test   rax,rax
 100bff3:	jne    0x100c194
 100bff9:	mov    rax,QWORD PTR [rip+0xffffffffffff6760]        # 0x1002760
 100c000:	test   rdi,rdi
 100c003:	jne    0x100c0d7
 100c009:	test   rax,rax
 100c00c:	je     0x100c020
 100c00e:	lea    rdx,[rsp+0x20]
 100c013:	lea    ecx,[rdi+0x1]
 100c016:	call   rax
 100c018:	mov    rdi,rax
 100c01b:	test   rax,rax
 100c01e:	jne    0x100c08b
 100c020:	mov    rcx,QWORD PTR [rsp+0x38]
 100c025:	call   QWORD PTR [rip+0xffffffffffff5135]        # 0x1001160
 100c02b:	mov    rdi,rax
 100c02e:	test   rax,rax
 100c031:	jne    0x100c08b
 100c033:	call   QWORD PTR [rip+0xffffffffffff5167]        # 0x10011a0
 100c039:	mov    DWORD PTR [rsp+0x60],eax
 100c03d:	mov    rax,QWORD PTR [rip+0xffffffffffff6724]        # 0x1002768
 100c044:	test   rax,rax
 100c047:	je     0x100c05b
 100c049:	lea    rdx,[rsp+0x20]
 100c04e:	lea    ecx,[rdi+0x3]
 100c051:	call   rax
 100c053:	mov    rdi,rax
 100c056:	test   rax,rax
 100c059:	jne    0x100c08b
 100c05b:	xor    edx,edx
 100c05d:	lea    rax,[rsp+0x20]
 100c062:	lea    r9,[rsp+0xb8]
 100c06a:	lea    r8d,[rdx+0x1]
 100c06e:	mov    ecx,0xc06d007e
 100c073:	mov    QWORD PTR [rsp+0xb8],rax
 100c07b:	call   QWORD PTR [rip+0xffffffffffff50cf]        # 0x1001150
 100c081:	mov    rax,QWORD PTR [rsp+0x58]
 100c086:	jmp    0x100c1be
 100c08b:	mov    rax,rdi
 100c08e:	xchg   QWORD PTR [r12],rax
 100c092:	cmp    rax,rdi
 100c095:	je     0x100c0c7
 100c097:	cmp    DWORD PTR [rsi+0x18],0x0
 100c09b:	je     0x100c0d0
 100c09d:	mov    edx,0x10
 100c0a2:	lea    ecx,[rdx+0x30]
 100c0a5:	call   QWORD PTR [rip+0xffffffffffff50bd]        # 0x1001168
 100c0ab:	test   rax,rax
 100c0ae:	je     0x100c0d0
 100c0b0:	mov    QWORD PTR [rax+0x8],rsi
 100c0b4:	mov    rcx,QWORD PTR [rip+0x49e5]        # 0x1010aa0
 100c0bb:	mov    QWORD PTR [rax],rcx
 100c0be:	mov    QWORD PTR [rip+0x49db],rax        # 0x1010aa0
 100c0c5:	jmp    0x100c0d0
 100c0c7:	mov    rcx,rdi
 100c0ca:	call   QWORD PTR [rip+0xffffffffffff50e0]        # 0x10011b0
 100c0d0:	mov    rax,QWORD PTR [rip+0xffffffffffff6689]        # 0x1002760
 100c0d7:	mov    QWORD PTR [rsp+0x50],rdi
 100c0dc:	test   rax,rax
 100c0df:	je     0x100c0f0
 100c0e1:	lea    rdx,[rsp+0x20]
 100c0e6:	mov    ecx,0x2
 100c0eb:	call   rax
 100c0ed:	mov    rbx,rax
 100c0f0:	test   rbx,rbx
 100c0f3:	jne    0x100c190
 100c0f9:	cmp    DWORD PTR [rsi+0x14],ebx
 100c0fc:	je     0x100c127
 100c0fe:	cmp    DWORD PTR [rsi+0x1c],ebx
 100c101:	je     0x100c127
 100c103:	movsxd rax,DWORD PTR [rdi+0x3c]
 100c107:	cmp    DWORD PTR [rax+rdi*1],0x4550
 100c10e:	jne    0x100c127
 100c110:	cmp    DWORD PTR [rax+rdi*1+0x8],r15d
 100c115:	jne    0x100c127
 100c117:	cmp    rdi,QWORD PTR [rax+rdi*1+0x30]
 100c11c:	jne    0x100c127
 100c11e:	mov    rbx,QWORD PTR [r14+rbp*8]
 100c122:	test   rbx,rbx
 100c125:	jne    0x100c190
 100c127:	mov    rdx,QWORD PTR [rsp+0x48]
 100c12c:	mov    rcx,rdi
 100c12f:	call   QWORD PTR [rip+0xffffffffffff5073]        # 0x10011a8
 100c135:	mov    rbx,rax
 100c138:	test   rax,rax
 100c13b:	jne    0x100c190
 100c13d:	call   QWORD PTR [rip+0xffffffffffff505d]        # 0x10011a0
 100c143:	mov    DWORD PTR [rsp+0x60],eax
 100c147:	mov    rax,QWORD PTR [rip+0xffffffffffff661a]        # 0x1002768
 100c14e:	test   rax,rax
 100c151:	je     0x100c160
 100c153:	lea    rdx,[rsp+0x20]
 100c158:	lea    ecx,[rbx+0x4]
 100c15b:	call   rax
 100c15d:	mov    rbx,rax
 100c160:	test   rbx,rbx
 100c163:	jne    0x100c190
 100c165:	lea    rax,[rsp+0x20]
 100c16a:	lea    r9,[rsp+0xc0]
 100c172:	lea    r8d,[rbx+0x1]
 100c176:	xor    edx,edx
 100c178:	mov    ecx,0xc06d007f
 100c17d:	mov    QWORD PTR [rsp+0xc0],rax
 100c185:	call   QWORD PTR [rip+0xffffffffffff4fc5]        # 0x1001150
 100c18b:	mov    rbx,QWORD PTR [rsp+0x58]
 100c190:	mov    QWORD PTR [r13+0x0],rbx
 100c194:	mov    rax,QWORD PTR [rip+0xffffffffffff65c5]        # 0x1002760
 100c19b:	test   rax,rax
 100c19e:	je     0x100c1bb
 100c1a0:	and    DWORD PTR [rsp+0x60],0x0
 100c1a5:	lea    rdx,[rsp+0x20]
 100c1aa:	mov    ecx,0x5
 100c1af:	mov    QWORD PTR [rsp+0x50],rdi
 100c1b4:	mov    QWORD PTR [rsp+0x58],rbx
 100c1b9:	call   rax
 100c1bb:	mov    rax,rbx
 100c1be:	mov    rbx,QWORD PTR [rsp+0xc8]
 100c1c6:	add    rsp,0x70
 100c1ca:	pop    r15
 100c1cc:	pop    r14
 100c1ce:	pop    r13
 100c1d0:	pop    r12
 100c1d2:	pop    rdi
 100c1d3:	pop    rsi
 100c1d4:	pop    rbp
 100c1d5:	ret    
 100c1d6:	int3   
 100c1d7:	int3   
 100c1d8:	int3   
 100c1d9:	int3   
 100c1da:	int3   
 100c1db:	int3   
 100c1dc:	jmp    QWORD PTR [rip+0xffffffffffff4e96]        # 0x1001078
 100c1e2:	int3   
 100c1e3:	int3   
 100c1e4:	int3   
 100c1e5:	int3   
 100c1e6:	int3   
 100c1e7:	int3   
 100c1e8:	jmp    QWORD PTR [rip+0xffffffffffff4e82]        # 0x1001070
 100c1ee:	int3   
 100c1ef:	int3   
 100c1f0:	int3   
 100c1f1:	int3   
 100c1f2:	int3   
 100c1f3:	int3   
 100c1f4:	mov    rax,rsp
 100c1f7:	mov    QWORD PTR [rax+0x8],rbx
 100c1fb:	mov    QWORD PTR [rax+0x10],rbp
 100c1ff:	mov    QWORD PTR [rax+0x18],rsi
 100c203:	mov    QWORD PTR [rax+0x20],rdi
 100c207:	push   r12
 100c209:	sub    rsp,0x20
 100c20d:	mov    r10,QWORD PTR [r9+0x38]
 100c211:	mov    rsi,rdx
 100c214:	mov    r12,r8
 100c217:	mov    eax,DWORD PTR [r10]
 100c21a:	mov    rbp,rcx
 100c21d:	mov    rdx,r9
 100c220:	add    rax,rax
 100c223:	mov    rcx,rsi
 100c226:	mov    rdi,r9
 100c229:	lea    rbx,[r10+rax*8+0x4]
 100c22e:	mov    r8,rbx
 100c231:	call   0x1009c28
 100c236:	mov    r11d,DWORD PTR [rbx]
 100c239:	mov    r10d,DWORD PTR [rbp+0x4]
 100c23d:	mov    eax,r11d
 100c240:	and    r11d,0x2
 100c244:	mov    edx,0x1
 100c249:	and    eax,edx
 100c24b:	and    r10b,0x66
 100c24f:	cmove  r11d,eax
 100c253:	test   r11d,r11d
 100c256:	je     0x100c26b
 100c258:	mov    r9,rdi
 100c25b:	mov    r8,r12
 100c25e:	mov    rdx,rsi
 100c261:	mov    rcx,rbp
 100c264:	call   0x1009f46
 100c269:	mov    edx,eax
 100c26b:	mov    rbx,QWORD PTR [rsp+0x30]
 100c270:	mov    rbp,QWORD PTR [rsp+0x38]
 100c275:	mov    rsi,QWORD PTR [rsp+0x40]
 100c27a:	mov    rdi,QWORD PTR [rsp+0x48]
 100c27f:	mov    eax,edx
 100c281:	add    rsp,0x20
 100c285:	pop    r12
 100c287:	ret    
 100c288:	int3   
 100c289:	int3   
 100c28a:	int3   
 100c28b:	int3   
 100c28c:	int3   
 100c28d:	int3   
 100c28e:	jmp    QWORD PTR [rip+0xffffffffffff4f3c]        # 0x10011d0
 100c294:	int3   
 100c295:	int3   
 100c296:	int3   
 100c297:	int3   
 100c298:	int3   
 100c299:	int3   
 100c29a:	jmp    QWORD PTR [rip+0xffffffffffff4f28]        # 0x10011c8
 100c2a0:	int3   
 100c2a1:	int3   
 100c2a2:	int3   
 100c2a3:	int3   
 100c2a4:	int3   
 100c2a5:	int3   
 100c2a6:	rex push rbp
 100c2a8:	sub    rsp,0x20
 100c2ac:	mov    rbp,rdx
 100c2af:	mov    rax,QWORD PTR [rcx]
 100c2b2:	mov    rdx,rcx
 100c2b5:	mov    ecx,DWORD PTR [rax]
 100c2b7:	call   0x1009f52
 100c2bc:	nop
 100c2bd:	add    rsp,0x20
 100c2c1:	pop    rbp
 100c2c2:	ret    
 100c2c3:	int3   
 100c2c4:	int3   
 100c2c5:	int3   
 100c2c6:	int3   
 100c2c7:	int3   
 100c2c8:	int3   
 100c2c9:	int3   
 100c2ca:	rex push rbp
 100c2cc:	sub    rsp,0x20
 100c2d0:	mov    rbp,rdx
 100c2d3:	mov    ecx,0x8
 100c2d8:	call   0x100a280
 100c2dd:	nop
 100c2de:	add    rsp,0x20
 100c2e2:	pop    rbp
 100c2e3:	ret    
 100c2e4:	int3   
 100c2e5:	int3   
 100c2e6:	int3   
 100c2e7:	int3   
 100c2e8:	int3   
 100c2e9:	int3   
 100c2ea:	int3   
 100c2eb:	int3   
 100c2ec:	int3   
 100c2ed:	int3   
 100c2ee:	int3   
 100c2ef:	int3   
 100c2f0:	rex push rbp
 100c2f2:	sub    rsp,0x20
 100c2f6:	mov    rbp,rdx
 100c2f9:	mov    rax,QWORD PTR [rcx]
 100c2fc:	xor    ecx,ecx
 100c2fe:	cmp    DWORD PTR [rax],0xc0000005
 100c304:	sete   cl
 100c307:	mov    eax,ecx
 100c309:	mov    eax,ecx
 100c30b:	add    rsp,0x20
 100c30f:	pop    rbp
 100c310:	ret    
 100c311:	int3   
 100c312:	int3   
 100c313:	int3   
 100c314:	int3   
 100c315:	int3   
 100c316:	int3   
 100c317:	int3   
 100c318:	int3   
 100c319:	int3   
 100c31a:	int3   
 100c31b:	int3   
 100c31c:	int3   
 100c31d:	int3   
 100c31e:	int3   
 100c31f:	int3   
 100c320:	int3   
 100c321:	int3   
 100c322:	int3   
 100c323:	int3   
 100c324:	int3   
 100c325:	int3   
 100c326:	int3   
 100c327:	int3   
 100c328:	int3   
 100c329:	int3   
 100c32a:	int3   
 100c32b:	int3   
 100c32c:	int3   
 100c32d:	int3   
 100c32e:	int3   
 100c32f:	int3   
 100c330:	sub    rsp,0x28
 100c334:	call   0x100b500
 100c339:	mov    DWORD PTR [rip+0x4125],eax        # 0x1010464
 100c33f:	add    rsp,0x28
 100c343:	ret    
 100c344:	int3   
 100c345:	int3   
 100c346:	int3   
 100c347:	int3   
 100c348:	add    DWORD PTR [rdx],ecx
 100c34a:	add    al,0x0
 100c34c:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 100c350:	add    eax,0x19000134
 100c355:	sbb    DWORD PTR [rdx],eax
 100c357:	add    BYTE PTR [rdi],al
 100c359:	add    DWORD PTR [rcx+0x0],ecx
 100c35c:	xchg   esp,eax
 100c35d:	pushf  
 100c35e:	add    BYTE PTR [rax],al
 100c360:	xor    BYTE PTR [rdx],al
 100c362:	add    BYTE PTR [rax],al
 100c364:	and    DWORD PTR [rax],ecx
 100c366:	add    al,BYTE PTR [rax]
 100c368:	or     BYTE PTR [rax+rcx*2],dh
 100c36b:	add    BYTE PTR [rax-0xeffffd1],al
 100c371:	(bad)  
 100c372:	add    BYTE PTR [rax],al
 100c374:	push   rsp
 100c375:	ret    
 100c376:	add    BYTE PTR [rax],al
 100c378:	and    DWORD PTR [rax],eax
 100c37a:	add    BYTE PTR [rax],al
 100c37c:	sub    BYTE PTR [rdi],0x0
 100c37f:	add    cl,dh
 100c381:	(bad)  
 100c382:	add    BYTE PTR [rax],al
 100c384:	push   rsp
 100c385:	ret    
 100c386:	add    BYTE PTR [rax],al
 100c388:	sbb    DWORD PTR [rcx],ebx
 100c38a:	add    al,0x0
 100c38c:	or     al,BYTE PTR [rcx]
 100c38e:	adc    DWORD PTR [rax],eax
 100c390:	add    esp,DWORD PTR [rax+0x2]
 100c393:	push   rax
 100c394:	xchg   esp,eax
 100c395:	pushf  
 100c396:	add    BYTE PTR [rax],al
 100c398:	jo     0x100c39a
 100c39a:	add    BYTE PTR [rax],al
 100c39c:	and    DWORD PTR [rax],ecx
 100c39e:	add    al,BYTE PTR [rax]
 100c3a0:	or     ah,ah
 100c3a2:	adc    BYTE PTR [rax],al
 100c3a4:	(bad)  
 100c3a5:	xor    BYTE PTR [rax],al
 100c3a7:	add    bl,bl
 100c3a9:	xor    BYTE PTR [rax],al
 100c3ab:	add    BYTE PTR [rax+0x210000c3],cl
 100c3b1:	add    BYTE PTR [rax],al
 100c3b3:	add    BYTE PTR [rax+0x30],ah
 100c3b6:	add    BYTE PTR [rax],al
 100c3b8:	(bad)  [rax]
 100c3ba:	add    BYTE PTR [rax],al
 100c3bc:	mov    bl,al
 100c3be:	add    BYTE PTR [rax],al
 100c3c0:	and    DWORD PTR [rax],eax
 100c3c2:	add    al,BYTE PTR [rax]
 100c3c4:	add    ah,ah
 100c3c6:	adc    BYTE PTR [rax],al
 100c3c8:	(bad)  
 100c3c9:	xor    BYTE PTR [rax],al
 100c3cb:	add    bl,bl
 100c3cd:	xor    BYTE PTR [rax],al
 100c3cf:	add    BYTE PTR [rax+0x210000c3],cl
 100c3d5:	or     BYTE PTR [rdx],al
 100c3d7:	add    BYTE PTR [rax],cl
 100c3d9:	je     0x100c3f2
 100c3db:	add    BYTE PTR [rbx],ch
 100c3dd:	xor    DWORD PTR [rax],eax
 100c3df:	add    BYTE PTR [rbx],bh
 100c3e1:	xor    DWORD PTR [rax],eax
 100c3e3:	add    al,al
 100c3e5:	ret    
 100c3e6:	add    BYTE PTR [rax],al
 100c3e8:	and    DWORD PTR [rax],ecx
 100c3ea:	add    al,BYTE PTR [rax]
 100c3ec:	or     BYTE PTR [rsi+rdx*1],dh
 100c3ef:	add    BYTE PTR [rbx],bh
 100c3f1:	xor    DWORD PTR [rax],eax
 100c3f3:	add    BYTE PTR [rsi+0x31],bl
 100c3f6:	add    BYTE PTR [rax],al
 100c3f8:	(bad)  
 100c3f9:	ret    
 100c3fa:	add    BYTE PTR [rax],al
 100c3fc:	and    DWORD PTR [rax],eax
 100c3fe:	add    BYTE PTR [rax],al
 100c400:	cmp    esi,DWORD PTR [rcx]
 100c402:	add    BYTE PTR [rax],al
 100c404:	pop    rsi
 100c405:	xor    DWORD PTR [rax],eax
 100c407:	add    ah,dl
 100c409:	ret    
 100c40a:	add    BYTE PTR [rax],al
 100c40c:	and    DWORD PTR [rax],eax
 100c40e:	add    al,0x0
 100c410:	add    BYTE PTR [rdi+rdx*1+0x0],dh
 100c414:	add    BYTE PTR [rsi+rdx*1],dh
 100c417:	add    BYTE PTR [rbx],ch
 100c419:	xor    DWORD PTR [rax],eax
 100c41b:	add    BYTE PTR [rbx],bh
 100c41d:	xor    DWORD PTR [rax],eax
 100c41f:	add    al,al
 100c421:	ret    
 100c422:	add    BYTE PTR [rax],al
 100c424:	and    DWORD PTR [rax],eax
 100c426:	add    BYTE PTR [rax],al
 100c428:	(bad)  
 100c429:	xor    BYTE PTR [rax],al
 100c42b:	add    bl,bl
 100c42d:	xor    BYTE PTR [rax],al
 100c42f:	add    BYTE PTR [rax+0x190000c3],cl
 100c435:	xor    cl,BYTE PTR [rcx]
 100c437:	add    BYTE PTR [rcx],ah
 100c439:	xor    al,0x48
 100c43b:	add    esp,DWORD PTR [rcx]
 100c43d:	add    DWORD PTR [rax+0x3],eax
 100c440:	or     al,0xe0
 100c442:	or     al,al
 100c444:	or     BYTE PTR [rax+0x7],dh
 100c447:	(bad)  
 100c448:	(bad)  
 100c449:	push   rax
 100c44a:	add    BYTE PTR [rax],al
 100c44c:	xchg   esp,eax
 100c44d:	pushf  
 100c44e:	add    BYTE PTR [rax],al
 100c450:	lock sbb DWORD PTR [rax],eax
 100c453:	add    BYTE PTR [rcx],ah
 100c455:	or     BYTE PTR [rdx],al
 100c457:	add    BYTE PTR [rax],cl
 100c459:	hlt    
 100c45a:	rex.RX add r10d,DWORD PTR [rax+0x56000032]
 100c461:	xor    al,0x0
 100c463:	add    BYTE PTR [rsp+rax*8],dh
 100c466:	add    BYTE PTR [rax],al
 100c468:	and    DWORD PTR [rax],eax
 100c46a:	add    BYTE PTR [rax],al
 100c46c:	nop
 100c46d:	xor    al,BYTE PTR [rax]
 100c46f:	add    BYTE PTR [rsi+0x34],dl
 100c472:	add    BYTE PTR [rax],al
 100c474:	xor    al,0xc4
 100c476:	add    BYTE PTR [rax],al
 100c478:	and    DWORD PTR [rax],eax
 100c47a:	add    al,BYTE PTR [rax]
 100c47c:	add    ah,dh
 100c47e:	rex.RX add r10d,DWORD PTR [rax+0x56000032]
 100c485:	xor    al,0x0
 100c487:	add    BYTE PTR [rsp+rax*8],dh
 100c48a:	add    BYTE PTR [rax],al
 100c48c:	and    DWORD PTR [rax],eax
 100c48e:	add    BYTE PTR [rax],al
 100c490:	nop
 100c491:	xor    al,BYTE PTR [rax]
 100c493:	add    BYTE PTR [rsi+0x34],dl
 100c496:	add    BYTE PTR [rax],al
 100c498:	xor    al,0xc4
 100c49a:	add    BYTE PTR [rax],al
 100c49c:	sbb    DWORD PTR [rcx],esi
 100c49e:	(bad)  
 100c49f:	add    BYTE PTR [rax],ah
 100c4a1:	je     0x100c4b7
 100c4a3:	add    al,0x20
 100c4a5:	xor    al,0x12
 100c4a7:	add    al,0x20
 100c4a9:	add    DWORD PTR [rax],edx
 100c4ab:	add    al,0xb
 100c4ad:	push   rax
 100c4ae:	add    BYTE PTR [rax],al
 100c4b0:	xchg   esp,eax
 100c4b1:	pushf  
 100c4b2:	add    BYTE PTR [rax],al
 100c4b4:	jo     0x100c4d6
 100c4b6:	add    BYTE PTR [rax],al
 100c4b8:	sbb    DWORD PTR [rsi],ebx
 100c4ba:	(bad)  
 100c4bb:	add    BYTE PTR [rdi],cl
 100c4bd:	xor    al,0x16
 100c4bf:	add    BYTE PTR [rdi],cl
 100c4c1:	repnz or BYTE PTR [rax+0x7],dh
 100c4c5:	(bad)  
 100c4c6:	(bad)  
 100c4c7:	push   rax
 100c4c8:	xchg   esp,eax
 100c4c9:	pushf  
 100c4ca:	add    BYTE PTR [rax],al
 100c4cc:	jo     0x100c4ce
 100c4ce:	add    BYTE PTR [rax],al
 100c4d0:	sbb    DWORD PTR [rax],esi
 100c4d2:	or     eax,DWORD PTR [rax]
 100c4d4:	(bad)  
 100c4d5:	xor    al,0xa9
 100c4d7:	add    BYTE PTR [rdi],bl
 100c4d9:	add    DWORD PTR [rsi+0xef01000],ebx
 100c4df:	loopne 0x100c4ed
 100c4e1:	ror    BYTE PTR [rdx],1
 100c4e3:	ror    BYTE PTR [rax],0x70
 100c4e6:	(bad)  
 100c4e7:	(bad)  
 100c4e8:	(bad)  
 100c4e9:	push   rax
 100c4ea:	add    BYTE PTR [rax],al
 100c4ec:	xchg   esp,eax
 100c4ed:	pushf  
 100c4ee:	add    BYTE PTR [rax],al
 100c4f0:	loopne 0x100c4f6
 100c4f2:	add    BYTE PTR [rax],al
 100c4f4:	sbb    DWORD PTR [rip+0x34130009],esp        # 0x3513c503
 100c4fa:	fwait
 100c4fb:	add    BYTE PTR [rbx],dl
 100c4fd:	add    DWORD PTR [rdx+0xaf00c00],edx
 100c503:	loopne 0x100c50d
 100c505:	jo     0x100c50e
 100c507:	(bad)  
 100c508:	(bad)  
 100c509:	push   rax
 100c50a:	add    BYTE PTR [rax],al
 100c50c:	xchg   esp,eax
 100c50d:	pushf  
 100c50e:	add    BYTE PTR [rax],al
 100c510:	add    BYTE PTR [rax+rax*1],0x0
 100c514:	sbb    DWORD PTR [rip+0x64130007],esp        # 0x6513c521
 100c51a:	sbb    BYTE PTR [rax],al
 100c51c:	adc    esi,DWORD PTR [rsi+rdx*1]
 100c51f:	add    BYTE PTR [rbx],dl
 100c521:	add    DWORD PTR [rax+rax*1],edx
 100c524:	or     al,0x70
 100c526:	add    BYTE PTR [rax],al
 100c528:	xchg   esp,eax
 100c529:	pushf  
 100c52a:	add    BYTE PTR [rax],al
 100c52c:	nop
 100c52d:	add    BYTE PTR [rax],al
 100c52f:	add    BYTE PTR [rcx],al
 100c531:	or     al,BYTE PTR [rax+rax*1]
 100c534:	or     dh,BYTE PTR [rdi+rax*1]
 100c537:	add    BYTE PTR [rdx],cl
 100c539:	xor    al,BYTE PTR [rsi]
 100c53b:	jo     0x100c556
 100c53d:	and    al,0x7
 100c53f:	add    BYTE PTR [rdx],dl
 100c541:	rex.WRX add BYTE PTR fs:[rdx],r10b
 100c545:	xor    al,0x4d
 100c547:	add    BYTE PTR [rdx],dl
 100c549:	add    DWORD PTR [rdx+0x0],ecx
 100c54c:	or     esi,DWORD PTR [rax+0x0]
 100c54f:	add    BYTE PTR [rsp+rbx*4+0x2400000],dl
 100c556:	add    BYTE PTR [rax],al
 100c558:	add    DWORD PTR [rax+rcx*1],edx
 100c55b:	add    BYTE PTR [rsp+riz*2],dl
 100c55e:	or     BYTE PTR [rax],al
 100c560:	adc    al,0x54
 100c562:	(bad)  
 100c563:	add    BYTE PTR [rsp+rsi*1],dl
 100c566:	(bad)  
 100c567:	add    BYTE PTR [rdx+rsi*1],dl
 100c56a:	adc    BYTE PTR [rax+0x1],dh
 100c56d:	or     al,0x6
 100c56f:	add    BYTE PTR [rsp+rsi*1],cl
 100c572:	or     al,BYTE PTR [rax]
 100c574:	or     al,0x52
 100c576:	or     BYTE PTR [rax+0x7],dh
 100c579:	(bad)  
 100c57a:	(bad)  
 100c57b:	push   rax
 100c57c:	add    DWORD PTR [rdx],ecx
 100c57e:	add    al,0x0
 100c580:	or     dh,BYTE PTR [rax+rcx*1]
 100c583:	add    BYTE PTR [rdx],cl
 100c585:	push   rdx
 100c586:	(bad)  
 100c587:	jo     0x100c58a
 100c589:	or     al,BYTE PTR [rax+rax*1]
 100c58c:	or     dh,BYTE PTR [rax+rcx*1]
 100c58f:	add    BYTE PTR [rdx],cl
 100c591:	push   rdx
 100c592:	(bad)  
 100c593:	jo     0x100c596
 100c595:	or     al,BYTE PTR [rax+rax*1]
 100c598:	or     dh,BYTE PTR [rax+rcx*1]
 100c59b:	add    BYTE PTR [rdx],cl
 100c59d:	push   rdx
 100c59e:	(bad)  
 100c59f:	jo     0x100c5ba
 100c5a1:	cmp    BYTE PTR [rip+0xffffffffeb742700],cl        # 0xffffffffec74eca7
 100c5a7:	add    BYTE PTR [rdi],ah
 100c5a9:	fs (bad) 
 100c5ab:	add    BYTE PTR [rdi],ah
 100c5ad:	xor    al,0xe9
 100c5af:	add    BYTE PTR [rdi],ah
 100c5b1:	add    edx,esp
 100c5b3:	add    BYTE PTR [rax],bl
 100c5b5:	lock (bad) 
 100c5b7:	loopne 0x100c5cd
 100c5b9:	rcl    BYTE PTR [rdx],1
 100c5bb:	rcl    BYTE PTR [rax],0x50
 100c5be:	add    BYTE PTR [rax],al
 100c5c0:	xchg   esp,eax
 100c5c1:	pushf  
 100c5c2:	add    BYTE PTR [rax],al
 100c5c4:	add    BYTE PTR [rdi],al
 100c5c6:	add    BYTE PTR [rax],al
 100c5c8:	sbb    DWORD PTR [rdi],ebx
 100c5ca:	add    eax,0x5a010d00
 100c5cf:	add    BYTE PTR [rsi],al
 100c5d1:	rol    BYTE PTR [rax+rax*8],1
 100c5d4:	add    dh,BYTE PTR [rax]
 100c5d6:	add    BYTE PTR [rax],al
 100c5d8:	xchg   esp,eax
 100c5d9:	pushf  
 100c5da:	add    BYTE PTR [rax],al
 100c5dc:	movabs al,ds:0x3a000a3a21000002
 100c5e5:	hlt    
 100c5e6:	push   rsi
 100c5e7:	add    BYTE PTR [rdx],ah
 100c5e9:	in     al,0x57
 100c5eb:	add    BYTE PTR [rax],bl
 100c5ed:	je     0x100c647
 100c5ef:	add    BYTE PTR [rax],dl
 100c5f1:	fs pop rcx
 100c5f3:	add    BYTE PTR [rax],cl
 100c5f5:	push   rsp
 100c5f6:	pop    rsi
 100c5f7:	add    al,al
 100c5f9:	pop    rbp
 100c5fa:	add    BYTE PTR [rax],al
 100c5fc:	neg    BYTE PTR [rbp+0x0]
 100c5ff:	add    al,cl
 100c601:	(bad)
 100c604:	and    DWORD PTR [rax],eax
 100c606:	or     BYTE PTR [rax],al
 100c608:	add    ah,dh
 100c60a:	push   rsi
 100c60b:	add    BYTE PTR [rax],al
 100c60d:	in     al,0x57
 100c60f:	add    BYTE PTR [rax],al
 100c611:	je     0x100c66b
 100c613:	add    BYTE PTR [rax],al
 100c615:	fs pop rcx
 100c617:	add    al,al
 100c619:	pop    rbp
 100c61a:	add    BYTE PTR [rax],al
 100c61c:	neg    BYTE PTR [rbp+0x0]
 100c61f:	add    al,cl
 100c621:	(bad)
 100c624:	and    DWORD PTR [rax],eax
 100c626:	(bad)  
 100c627:	add    BYTE PTR [rax],al
 100c629:	hlt    
 100c62a:	push   rsi
 100c62b:	add    BYTE PTR [rax],al
 100c62d:	in     al,0x57
 100c62f:	add    BYTE PTR [rax],al
 100c631:	je     0x100c68b
 100c633:	add    al,al
 100c635:	pop    rbp
 100c636:	add    BYTE PTR [rax],al
 100c638:	neg    BYTE PTR [rbp+0x0]
 100c63b:	add    al,cl
 100c63d:	(bad)
 100c640:	and    DWORD PTR [rax],eax
 100c642:	add    al,0x0
 100c644:	add    ah,dh
 100c646:	push   rsi
 100c647:	add    BYTE PTR [rax],al
 100c649:	je     0x100c6a3
 100c64b:	add    al,al
 100c64d:	pop    rbp
 100c64e:	add    BYTE PTR [rax],al
 100c650:	neg    BYTE PTR [rbp+0x0]
 100c653:	add    al,cl
 100c655:	(bad)
 100c658:	and    DWORD PTR [rax],eax
 100c65a:	add    BYTE PTR [rax],al
 100c65c:	rcr    BYTE PTR [rbp+0x0],0x0
 100c660:	neg    BYTE PTR [rbp+0x0]
 100c663:	add    al,cl
 100c665:	(bad)
 100c668:	add    DWORD PTR [rdx],ecx
 100c66a:	add    al,0x0
 100c66c:	or     dh,BYTE PTR [rax+rcx*1]
 100c66f:	add    BYTE PTR [rdx],cl
 100c671:	xor    al,BYTE PTR [rsi]
 100c673:	(bad)  
 100c674:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505c67c
 100c67a:	(bad)  
 100c67b:	add    al,ah
 100c67d:	(bad)  
 100c67e:	add    BYTE PTR [rax],al
 100c680:	or     esp,DWORD PTR [rdx+0x0]
 100c683:	add    BYTE PTR [rax-0x3a],ch
 100c686:	add    BYTE PTR [rax],al
 100c688:	and    DWORD PTR [rax],eax
 100c68a:	add    al,BYTE PTR [rax]
 100c68c:	add    BYTE PTR [rdi+rax*1+0x0],dh
 100c690:	loopne 0x100c6f3
 100c692:	add    BYTE PTR [rax],al
 100c694:	or     esp,DWORD PTR [rdx+0x0]
 100c697:	add    BYTE PTR [rax-0x3a],ch
 100c69a:	add    BYTE PTR [rax],al
 100c69c:	sbb    DWORD PTR [rcx],esp
 100c69e:	(bad)  
 100c69f:	add    BYTE PTR [rdi],cl
 100c6a1:	add    DWORD PTR [rax+rax*1+0x8],esi
 100c6a5:	loopne 0x100c6ad
 100c6a7:	rol    BYTE PTR [rax+rsi*2],0x3
 100c6ab:	(bad)  
 100c6ac:	add    dh,BYTE PTR [rax]
 100c6ae:	add    BYTE PTR [rax],al
 100c6b0:	xchg   esp,eax
 100c6b1:	pushf  
 100c6b2:	add    BYTE PTR [rax],al
 100c6b4:	add    BYTE PTR [rbx],0x0
 100c6b7:	add    BYTE PTR [rcx],ah
 100c6b9:	or     BYTE PTR [rdx],al
 100c6bb:	add    BYTE PTR [rax],cl
 100c6bd:	hlt    
 100c6be:	jb     0x100c6c0
 100c6c0:	nop
 100c6c1:	(bad)  
 100c6c2:	add    BYTE PTR [rax],al
 100c6c4:	out    0x62,al
 100c6c6:	add    BYTE PTR [rax],al
 100c6c8:	pushf  
 100c6c9:	mov    BYTE PTR [rax],0x0
 100c6cc:	and    DWORD PTR [rax],eax
 100c6ce:	add    al,BYTE PTR [rax]
 100c6d0:	add    ah,dh
 100c6d2:	jb     0x100c6d4
 100c6d4:	nop
 100c6d5:	(bad)  
 100c6d6:	add    BYTE PTR [rax],al
 100c6d8:	out    0x62,al
 100c6da:	add    BYTE PTR [rax],al
 100c6dc:	pushf  
 100c6dd:	mov    BYTE PTR [rax],0x0
 100c6e0:	and    DWORD PTR [rax],ecx
 100c6e2:	add    al,BYTE PTR [rax]
 100c6e4:	or     BYTE PTR [rbx+rsi*2+0x0],dl
 100c6e8:	adc    DWORD PTR [rbx+0x0],esp
 100c6eb:	add    BYTE PTR [rdx+0x63],dl
 100c6ee:	add    BYTE PTR [rax],al
 100c6f0:	int3   
 100c6f1:	mov    BYTE PTR [rax],0x0
 100c6f4:	and    DWORD PTR [rax],eax
 100c6f6:	add    BYTE PTR [rax],al
 100c6f8:	adc    DWORD PTR [rbx+0x0],esp
 100c6fb:	add    BYTE PTR [rdx+0x63],dl
 100c6fe:	add    BYTE PTR [rax],al
 100c700:	int3   
 100c701:	mov    BYTE PTR [rax],0x0
 100c704:	and    DWORD PTR [rax],eax
 100c706:	add    BYTE PTR [rax],al
 100c708:	nop
 100c709:	(bad)  
 100c70a:	add    BYTE PTR [rax],al
 100c70c:	out    0x62,al
 100c70e:	add    BYTE PTR [rax],al
 100c710:	pushf  
 100c711:	mov    BYTE PTR [rax],0x0
 100c714:	add    DWORD PTR [rdi],ecx
 100c716:	(bad)  
 100c717:	add    BYTE PTR [rdi],cl
 100c719:	fs or  al,0x0
 100c71c:	sysenter 
 100c71e:	or     eax,DWORD PTR [rax]
 100c720:	(bad)  
 100c722:	or     esi,DWORD PTR [rax+0x1]
 100c725:	or     al,BYTE PTR [rax+rax*1]
 100c728:	or     dh,BYTE PTR [rcx+rcx*1]
 100c72b:	add    BYTE PTR [rdx],cl
 100c72d:	push   rdx
 100c72e:	(bad)  
 100c72f:	jo     0x100c74a
 100c731:	sub    al,0x9
 100c733:	add    BYTE PTR [rbx],bl
 100c735:	add    DWORD PTR [rdx+0x0],esp
 100c738:	or     al,0xf0
 100c73a:	or     ah,al
 100c73c:	or     al,dl
 100c73e:	(bad)  
 100c73f:	rol    BYTE PTR [rax+rsi*2],0x3
 100c743:	(bad)  
 100c744:	add    dl,BYTE PTR [rax+0x0]
 100c747:	add    BYTE PTR [rsp+rbx*4+0x2f00000],dl
 100c74e:	add    BYTE PTR [rax],al
 100c750:	and    DWORD PTR [rax],ecx
 100c752:	add    al,BYTE PTR [rax]
 100c754:	or     BYTE PTR [rcx+riz*2],dh
 100c757:	add    BYTE PTR [rax-0x37ffff9a],ah
 100c75d:	add    BYTE PTR [eax],al
 100c760:	xor    bh,al
 100c762:	add    BYTE PTR [rax],al
 100c764:	and    DWORD PTR [rax],eax
 100c766:	add    BYTE PTR [rax],al
 100c768:	movabs al,ds:0x30000067c8000066
 100c771:	mov    DWORD PTR [rax],0x50e0100
 100c777:	add    BYTE PTR [rsi],cl
 100c779:	ret    0xf007
 100c77c:	add    eax,0x26003e0
 100c781:	push   rax
 100c782:	add    BYTE PTR [rax],al
 100c784:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505c78c
 100c78a:	or     al,0x0
 100c78c:	lock imul eax,DWORD PTR [rax],0x0
 100c790:	cmp    BYTE PTR [rax+rax*1+0x0],ch
 100c794:	je     0x100c75d
 100c796:	add    BYTE PTR [rax],al
 100c798:	and    DWORD PTR [rdx],ecx
 100c79a:	add    al,0x0
 100c79c:	or     al,ah
 100c79e:	or     al,BYTE PTR [rax]
 100c7a0:	add    eax,0x38000b74
 100c7a5:	ins    BYTE PTR es:[rdi],dx
 100c7a6:	add    BYTE PTR [rax],al
 100c7a8:	ins    BYTE PTR es:[rdi],dx
 100c7a9:	ins    BYTE PTR es:[rdi],dx
 100c7aa:	add    BYTE PTR [rax],al
 100c7ac:	test   bh,al
 100c7ae:	add    BYTE PTR [rax],al
 100c7b0:	and    DWORD PTR [rax],eax
 100c7b2:	add    BYTE PTR [rax],al
 100c7b4:	cmp    BYTE PTR [rax+rax*1+0x0],ch
 100c7b8:	ins    BYTE PTR es:[rdi],dx
 100c7b9:	ins    BYTE PTR es:[rdi],dx
 100c7ba:	add    BYTE PTR [rax],al
 100c7bc:	test   bh,al
 100c7be:	add    BYTE PTR [rax],al
 100c7c0:	and    DWORD PTR [rax],eax
 100c7c2:	(bad)  
 100c7c3:	add    BYTE PTR [rax],al
 100c7c5:	(bad)  
 100c7c6:	or     al,BYTE PTR [rax]
 100c7c8:	add    BYTE PTR [rbx+rcx*1+0x0],dh
 100c7cc:	add    BYTE PTR [rsp+rcx*1],dh
 100c7cf:	add    al,dh
 100c7d1:	imul   eax,DWORD PTR [rax],0x0
 100c7d4:	cmp    BYTE PTR [rax+rax*1+0x0],ch
 100c7d8:	je     0x100c7a1
 100c7da:	add    BYTE PTR [rax],al
 100c7dc:	and    DWORD PTR [rax],eax
 100c7de:	add    BYTE PTR [rax],al
 100c7e0:	lock imul eax,DWORD PTR [rax],0x0
 100c7e4:	cmp    BYTE PTR [rax+rax*1+0x0],ch
 100c7e8:	je     0x100c7b1
 100c7ea:	add    BYTE PTR [rax],al
 100c7ec:	sbb    DWORD PTR [rdi],ebx
 100c7ee:	add    eax,0x50340d00
 100c7f3:	add    BYTE PTR [rip+0x6004c01],cl        # 0x70113fa
 100c7f9:	jo     0x100c7fb
 100c7fb:	add    BYTE PTR [rsp+rbx*4+0x2500000],dl
 100c802:	add    BYTE PTR [rax],al
 100c804:	sbb    DWORD PTR [rsi],esp
 100c806:	add    eax,0x5f741500
 100c80b:	add    BYTE PTR [rip+0x6005a01],dl        # 0x7012212
 100c811:	push   rax
 100c812:	add    BYTE PTR [rax],al
 100c814:	xchg   esp,eax
 100c815:	pushf  
 100c816:	add    BYTE PTR [rax],al
 100c818:	rol    BYTE PTR [rdx],0x0
 100c81b:	add    BYTE PTR [rcx],ah
 100c81d:	or     BYTE PTR [rdx],al
 100c81f:	add    BYTE PTR [rax],cl
 100c821:	xor    al,0x5e
 100c823:	add    BYTE PTR [rax],dh
 100c825:	outs   dx,DWORD PTR ds:[rsi]
 100c826:	add    BYTE PTR [rax],al
 100c828:	sub    eax,0x4000070
 100c82d:	enter  0x0,0x21
 100c831:	add    BYTE PTR [rax],al
 100c833:	add    BYTE PTR [rax],dh
 100c835:	outs   dx,DWORD PTR ds:[rsi]
 100c836:	add    BYTE PTR [rax],al
 100c838:	sub    eax,0x4000070
 100c83d:	enter  0x0,0x1
 100c841:	or     al,BYTE PTR [rax+rax*1]
 100c844:	or     dh,BYTE PTR [rsi+rax*1]
 100c847:	add    BYTE PTR [rdx],cl
 100c849:	xor    al,BYTE PTR [rsi]
 100c84b:	jo     0x100c866
 100c84d:	and    al,0x7
 100c84f:	add    BYTE PTR [rdx],dl
 100c851:	rex.WXB add BYTE PTR fs:[r10],dl
 100c855:	xor    al,0x4a
 100c857:	add    BYTE PTR [rdx],dl
 100c859:	add    DWORD PTR [rax+0x0],ecx
 100c85c:	or     esi,DWORD PTR [rax+0x0]
 100c85f:	add    BYTE PTR [rsp+rbx*4+0x2300000],dl
 100c866:	add    BYTE PTR [rax],al
 100c868:	sbb    DWORD PTR [rcx],ebx
 100c86a:	add    al,BYTE PTR [rax]
 100c86c:	(bad)  
 100c86d:	add    DWORD PTR [rbx],ebp
 100c86f:	add    BYTE PTR [rsp+rbx*4+0x1400000],dl
 100c876:	add    BYTE PTR [rax],al
 100c878:	sbb    DWORD PTR [rsi],ebx
 100c87a:	add    eax,0x8c010c00
 100c87f:	add    BYTE PTR [rip+0x25003e0],al        # 0x350cc65
 100c885:	xor    BYTE PTR [rax],al
 100c887:	add    BYTE PTR [rsp+rbx*4+0x4500000],dl
 100c88e:	add    BYTE PTR [rax],al
 100c890:	and    DWORD PTR [rax],ecx
 100c892:	add    al,BYTE PTR [rax]
 100c894:	or     BYTE PTR [rdx+rdx*4+0x0],ah
 100c898:	xor    BYTE PTR [rbx+0x0],dh
 100c89b:	add    BYTE PTR [rax+0x73],bh
 100c89e:	add    BYTE PTR [rax],al
 100c8a0:	js     0x100c86a
 100c8a2:	add    BYTE PTR [rax],al
 100c8a4:	and    DWORD PTR [rax],ecx
 100c8a6:	add    al,BYTE PTR [rax]
 100c8a8:	or     BYTE PTR [rbx+rdx*4+0x0],dh
 100c8ac:	js     0x100c921
 100c8ae:	add    BYTE PTR [rax],al
 100c8b0:	mov    esi,DWORD PTR [rbx+0x0]
 100c8b3:	add    BYTE PTR [rax+0x210000c8],dl
 100c8b9:	add    BYTE PTR [rax],al
 100c8bb:	add    BYTE PTR [rax+0x73],bh
 100c8be:	add    BYTE PTR [rax],al
 100c8c0:	mov    esi,DWORD PTR [rbx+0x0]
 100c8c3:	add    BYTE PTR [rax+0x210000c8],dl
 100c8c9:	add    BYTE PTR [rax],al
 100c8cb:	add    BYTE PTR [rax],dh
 100c8cd:	jae    0x100c8cf
 100c8cf:	add    BYTE PTR [rax+0x73],bh
 100c8d2:	add    BYTE PTR [rax],al
 100c8d4:	js     0x100c89e
 100c8d6:	add    BYTE PTR [rax],al
 100c8d8:	add    DWORD PTR [rdi],ecx
 100c8da:	(bad)  
 100c8db:	add    BYTE PTR [rdi],cl
 100c8dd:	fs (bad) 
 100c8df:	add    BYTE PTR [rdi],cl
 100c8e1:	xor    al,0x6
 100c8e3:	add    BYTE PTR [rdi],cl
 100c8e5:	xor    cl,BYTE PTR [rbx]
 100c8e7:	jo     0x100c8ea
 100c8e9:	adc    BYTE PTR [rbx],al
 100c8eb:	add    BYTE PTR [rax],dl
 100c8ed:	rex.X or al,0x60
 100c8f0:	or     esi,DWORD PTR [rax]
 100c8f2:	add    BYTE PTR [rax],al
 100c8f4:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505c8fc
 100c8fa:	add    al,0x0
 100c8fc:	adc    BYTE PTR [rsi+0x0],dh
 100c8ff:	add    BYTE PTR [rsi],bh
 100c901:	jbe    0x100c903
 100c903:	add    al,ch
 100c905:	enter  0x0,0x21
 100c909:	add    BYTE PTR [rdx],al
 100c90b:	add    BYTE PTR [rax],al
 100c90d:	je     0x100c913
 100c90f:	add    BYTE PTR [rax],dl
 100c911:	jbe    0x100c913
 100c913:	add    BYTE PTR [rsi],bh
 100c915:	jbe    0x100c917
 100c917:	add    al,ch
 100c919:	enter  0x0,0x21
 100c91d:	add    BYTE PTR [rax],al
 100c91f:	add    BYTE PTR [rax],dl
 100c921:	jbe    0x100c923
 100c923:	add    BYTE PTR [rsi],bh
 100c925:	jbe    0x100c927
 100c927:	add    al,ch
 100c929:	enter  0x0,0x19
 100c92d:	(bad)  
 100c92e:	(bad)  
 100c92f:	add    BYTE PTR [rcx+rax*1],cl
 100c932:	rex.WRXB add BYTE PTR [rip+0x3600470],r8b        # 0x460cda9
 100c939:	push   rax
 100c93a:	add    dh,BYTE PTR [rax]
 100c93c:	xchg   esp,eax
 100c93d:	pushf  
 100c93e:	add    BYTE PTR [rax],al
 100c940:	(bad)  
 100c941:	add    al,BYTE PTR [rax]
 100c943:	add    BYTE PTR [rcx],bl
 100c945:	sub    al,BYTE PTR [rip+0x24011900]        # 0x2501e24b
 100c94b:	or     DWORD PTR [rax+rsi*2],eax
 100c94e:	add    esp,DWORD PTR [rax+0x2]
 100c951:	push   rax
 100c952:	add    BYTE PTR [rax],al
 100c954:	xchg   esp,eax
 100c955:	pushf  
 100c956:	add    BYTE PTR [rax],al
 100c958:	adc    BYTE PTR [rcx+0x0],cl
 100c95b:	add    BYTE PTR [rcx],ah
 100c95d:	or     BYTE PTR [rdx],al
 100c95f:	add    BYTE PTR [rax],cl
 100c961:	xor    al,0x2b
 100c963:	or     DWORD PTR [rax+0x6d000077],edx
 100c969:	js     0x100c96b
 100c96b:	add    BYTE PTR [rcx+rcx*8+0x0],al
 100c96f:	add    BYTE PTR [rcx],ah
 100c971:	add    BYTE PTR [rax],al
 100c973:	add    BYTE PTR [rax+0x6d000077],dl
 100c979:	js     0x100c97b
 100c97b:	add    BYTE PTR [rcx+rcx*8+0x0],al
 100c97f:	add    BYTE PTR [rcx],bl
 100c981:	sbb    eax,0x10b0005
 100c986:	rex.WRX add BYTE PTR [rax+r14*2],r8b
 100c98a:	add    esp,DWORD PTR [rax+0x2]
 100c98d:	xor    BYTE PTR [rax],al
 100c98f:	add    BYTE PTR [rsp+rbx*4+0x2600000],dl
 100c996:	add    BYTE PTR [rax],al
 100c998:	sbb    DWORD PTR [rip+0x11c0007],ebp        # 0x21cc9a5
 100c99e:	in     al,0x8
 100c9a0:	(bad)  
 100c9a1:	loopne 0x100c9a8
 100c9a3:	jo     0x100c9a9
 100c9a5:	(bad)  
 100c9a6:	add    esi,DWORD PTR [rax]
 100c9a8:	add    dl,BYTE PTR [rax+0x0]
 100c9ab:	add    BYTE PTR [rsp+rbx*4+0x47100000],dl
 100c9b2:	add    BYTE PTR [rax],al
 100c9b4:	add    DWORD PTR [rip+0x74150008],edx        # 0x7515c9c2
 100c9ba:	or     eax,DWORD PTR [rax]
 100c9bc:	adc    eax,0x15000a64
 100c9c1:	xor    al,0x9
 100c9c3:	add    BYTE PTR [rip+0x19e01152],dl        # 0x1ae0db1b
 100c9c9:	sbb    eax,DWORD PTR [rbx]
 100c9cb:	add    BYTE PTR [rcx],cl
 100c9cd:	add    esi,esi
 100c9cf:	add    BYTE PTR [rdx],al
 100c9d1:	xor    BYTE PTR [rax],al
 100c9d3:	add    BYTE PTR [rsp+rbx*4+0x7a00000],dl
 100c9da:	add    BYTE PTR [rax],al
 100c9dc:	sbb    DWORD PTR [rbx],ebx
 100c9de:	add    eax,DWORD PTR [rax]
 100c9e0:	or     DWORD PTR [rcx],eax
 100c9e2:	rex.WRX add BYTE PTR [rdx],r8b
 100c9e5:	xor    BYTE PTR [rax],al
 100c9e7:	add    BYTE PTR [rsp+rbx*4+0x2600000],dl
 100c9ee:	add    BYTE PTR [rax],al
 100c9f0:	sbb    DWORD PTR [rax],ebp
 100c9f2:	(bad)  
 100c9f3:	add    BYTE PTR [rdi],dl
 100c9f5:	add    DWORD PTR [rax],esp
 100c9f7:	add    DWORD PTR [rax],ecx
 100c9f9:	lock (bad) 
 100c9fb:	loopne 0x100ca01
 100c9fd:	jo     0x100ca02
 100c9ff:	(bad)  
 100ca00:	add    dl,BYTE PTR [rax+0x0]
 100ca03:	add    BYTE PTR [rsp+rbx*4+0x8f00000],dl
 100ca0a:	add    BYTE PTR [rax],al
 100ca0c:	and    DWORD PTR [rax],ecx
 100ca0e:	add    al,BYTE PTR [rax]
 100ca10:	or     BYTE PTR [rdi+riz*1],dh
 100ca13:	add    DWORD PTR [rax-0x7e],esi
 100ca16:	add    BYTE PTR [rax],al
 100ca18:	add    BYTE PTR [rbx-0x36100000],al
 100ca1e:	add    BYTE PTR [rax],al
 100ca20:	and    DWORD PTR [rax],eax
 100ca22:	add    BYTE PTR [rax],al
 100ca24:	jo     0x100c9a8
 100ca26:	add    BYTE PTR [rax],al
 100ca28:	add    BYTE PTR [rbx-0x36100000],al
 100ca2e:	add    BYTE PTR [rax],al
 100ca30:	sbb    DWORD PTR [rsp+rax*1],esp
 100ca33:	add    BYTE PTR [rbx],dl
 100ca35:	add    DWORD PTR [rbx+0x1],esp
 100ca38:	add    eax,0x94500470
 100ca3d:	pushf  
 100ca3e:	add    BYTE PTR [rax],al
 100ca40:	lock or al,BYTE PTR [rax]
 100ca43:	add    BYTE PTR [rcx],ah
 100ca45:	(bad)  
 100ca46:	or     BYTE PTR [rax],al
 100ca48:	(bad)  
 100ca49:	hlt    
 100ca4a:	(bad)  
 100ca4b:	add    DWORD PTR [rsp+riz*8],ecx
 100ca4e:	(bad)  
 100ca4f:	add    DWORD PTR [rax],ecx
 100ca51:	(bad)
 100ca57:	add    DWORD PTR [rax],edx
 100ca59:	test   DWORD PTR [rax],eax
 100ca5b:	add    BYTE PTR [rax*4-0x35d00000],dh
 100ca62:	add    BYTE PTR [rax],al
 100ca64:	and    DWORD PTR [rax],eax
 100ca66:	add    BYTE PTR [rax],al
 100ca68:	adc    BYTE PTR [rbp-0x7acc0000],al
 100ca6e:	add    BYTE PTR [rax],al
 100ca70:	xor    dl,cl
 100ca72:	add    BYTE PTR [rax],al
 100ca74:	sbb    DWORD PTR [rbx],ebp
 100ca76:	(bad)  
 100ca77:	add    BYTE PTR [rdx],bl
 100ca79:	je     0x100cace
 100ca7b:	add    BYTE PTR [rdx],bl
 100ca7d:	xor    al,0x52
 100ca7f:	add    BYTE PTR [rdx],bl
 100ca81:	add    DWORD PTR [rax+0x0],edx
 100ca84:	or     edx,DWORD PTR [rax+0x0]
 100ca87:	add    BYTE PTR [rsp+rbx*4+0x2700000],dl
 100ca8e:	add    BYTE PTR [rax],al
 100ca90:	sbb    DWORD PTR [rax],esi
 100ca92:	(bad)  
 100ca93:	add    BYTE PTR [rdi],bl
 100ca95:	add    DWORD PTR [rax+0x3],esp
 100ca98:	or     dh,al
 100ca9a:	or     al,ah
 100ca9c:	(bad)  
 100ca9d:	rol    BYTE PTR [rax+rax*8],1
 100caa0:	add    dl,BYTE PTR [rax+0x0]
 100caa3:	add    BYTE PTR [rsp+rbx*4+0x1ad00000],dl
 100caaa:	add    BYTE PTR [rax],al
 100caac:	and    DWORD PTR [rdx],esp
 100caae:	(bad)  
 100caaf:	add    BYTE PTR [rdx],ah
 100cab1:	je     0x100cb10
 100cab3:	add    edx,DWORD PTR [rax]
 100cab5:	fs pop rsi
 100cab7:	add    ecx,DWORD PTR [rax]
 100cab9:	xor    al,0x5f
 100cabb:	add    edx,eax
 100cabd:	mov    WORD PTR [rax],es
 100cabf:	add    BYTE PTR [rax],cl
 100cac1:	mov    es,WORD PTR [rax]
 100cac3:	add    BYTE PTR [rax+0x210000ca],dl
 100cac9:	add    BYTE PTR [rax],al
 100cacb:	add    al,dl
 100cacd:	mov    WORD PTR [rax],es
 100cacf:	add    BYTE PTR [rax],cl
 100cad1:	mov    es,WORD PTR [rax]
 100cad3:	add    BYTE PTR [rax+0x190000ca],dl
 100cad9:	sub    eax,0x11c0007
 100cade:	nop
 100cadf:	add    al,BYTE PTR [rdi]
 100cae1:	loopne 0x100cae8
 100cae3:	jo     0x100cae9
 100cae5:	(bad)  
 100cae6:	add    esi,DWORD PTR [rax]
 100cae8:	add    dl,BYTE PTR [rax+0x0]
 100caeb:	add    BYTE PTR [rsp+rbx*4+0x14700000],dl
 100caf2:	add    BYTE PTR [rax],al
 100caf4:	sbb    DWORD PTR [rdi],esp
 100caf6:	(bad)  
 100caf7:	add    BYTE PTR [rip+0x15024f34],dl        # 0x16031a31
 100cafd:	add    DWORD PTR [rdx+0x2],ecx
 100cb00:	or     BYTE PTR [rax+0x7],dh
 100cb03:	(bad)  
 100cb04:	(bad)  
 100cb05:	push   rax
 100cb06:	add    BYTE PTR [rax],al
 100cb08:	xchg   esp,eax
 100cb09:	pushf  
 100cb0a:	add    BYTE PTR [rax],al
 100cb0c:	adc    al,BYTE PTR [rax]
 100cb0f:	add    BYTE PTR [rcx],al
 100cb11:	add    al,0x1
 100cb13:	add    BYTE PTR [rdx+riz*2],al
 100cb16:	add    BYTE PTR [rax],al
 100cb18:	add    DWORD PTR [rsi],eax
 100cb1a:	add    al,BYTE PTR [rax]
 100cb1c:	(bad)  
 100cb1d:	xor    al,BYTE PTR [rdx]
 100cb1f:	push   rax
 100cb20:	or     DWORD PTR [rdx],ecx
 100cb22:	add    al,0x0
 100cb24:	or     dh,BYTE PTR [rsi+rax*1]
 100cb27:	add    BYTE PTR [rdx],cl
 100cb29:	xor    al,BYTE PTR [rsi]
 100cb2b:	jo     0x100cb73
 100cb2d:	lahf   
 100cb2e:	add    BYTE PTR [rax],al
 100cb30:	add    DWORD PTR [rax],eax
 100cb32:	add    BYTE PTR [rax],al
 100cb34:	mov    esi,0xfc000099
 100cb39:	(bad)  
 100cb3a:	add    BYTE PTR [rax],al
 100cb3c:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100cb3d:	ret    0x0
 100cb40:	cld    
 100cb41:	(bad)  
 100cb42:	add    BYTE PTR [rax],al
 100cb44:	add    DWORD PTR [rcx+rax*1],eax
 100cb47:	add    BYTE PTR [rdx+rax*2],al
 100cb4a:	add    BYTE PTR [rax],al
 100cb4c:	add    DWORD PTR [rcx+rax*1],eax
 100cb4f:	add    BYTE PTR [rdx+rax*2],al
 100cb52:	add    BYTE PTR [rax],al
 100cb54:	add    DWORD PTR [rsi],eax
 100cb56:	add    al,BYTE PTR [rax]
 100cb58:	(bad)  
 100cb59:	xor    al,BYTE PTR [rdx]
 100cb5b:	xor    BYTE PTR [rcx],al
 100cb5d:	add    al,0x1
 100cb5f:	add    BYTE PTR [rdx+rax*2],al
 100cb62:	add    BYTE PTR [rax],al
 100cb64:	add    BYTE PTR [rax],al
 100cb66:	add    BYTE PTR [rax],al
 100cb68:	add    DWORD PTR [rcx+rax*1],eax
 100cb6b:	add    BYTE PTR [rdx+rdx*1],al
 100cb6e:	add    BYTE PTR [rax],al
 100cb70:	add    DWORD PTR [rax],eax
 100cb72:	add    BYTE PTR [rax],al
 100cb74:	add    DWORD PTR [rcx+rax*1],eax
 100cb77:	add    BYTE PTR [rdx+rax*2],al
 100cb7a:	add    BYTE PTR [rax],al
 100cb7c:	add    DWORD PTR [rcx+rax*1],eax
 100cb7f:	add    BYTE PTR [rdx+rax*2],al
 100cb82:	add    BYTE PTR [rax],al
 100cb84:	add    DWORD PTR [rsi],eax
 100cb86:	add    al,BYTE PTR [rax]
 100cb88:	(bad)  
 100cb89:	xor    al,BYTE PTR [rdx]
 100cb8b:	push   rax
 100cb8c:	adc    DWORD PTR [rsi],eax
 100cb8e:	add    al,BYTE PTR [rax]
 100cb90:	(bad)  
 100cb91:	xor    al,BYTE PTR [rdx]
 100cb93:	xor    BYTE PTR [rsi-0x61],al
 100cb96:	add    BYTE PTR [rax],al
 100cb98:	add    DWORD PTR [rax],eax
 100cb9a:	add    BYTE PTR [rax],al
 100cb9c:	(bad)  
 100cb9d:	sahf   
 100cb9e:	add    BYTE PTR [rax],al
 100cba0:	lea    ebx,[rsi-0x3d360000]
 100cba6:	add    BYTE PTR [rax],al
 100cba8:	add    BYTE PTR [rax],al
 100cbaa:	add    BYTE PTR [rax],al
 100cbac:	add    DWORD PTR [rcx+rax*1],eax
 100cbaf:	add    BYTE PTR [rdx+rax*2],al
 100cbb2:	add    BYTE PTR [rax],al
 100cbb4:	add    DWORD PTR [rdx],ecx
 100cbb6:	add    al,0x0
 100cbb8:	or     dh,BYTE PTR [rsi+rax*1]
 100cbbb:	add    BYTE PTR [rdx],cl
 100cbbd:	xor    al,BYTE PTR [rsi]
 100cbbf:	jo     0x100cbc2
 100cbc1:	or     al,BYTE PTR [rax+rax*1]
 100cbc4:	or     dh,BYTE PTR [rsi+rax*1]
 100cbc7:	add    BYTE PTR [rdx],cl
 100cbc9:	xor    al,BYTE PTR [rsi]
 100cbcb:	jo     0x100cbce
 100cbcd:	(bad)  
 100cbce:	add    al,BYTE PTR [rax]
 100cbd0:	(bad)  
 100cbd1:	xor    al,BYTE PTR [rdx]
 100cbd3:	push   rax
 100cbd4:	or     DWORD PTR [rcx+rax*1],eax
 100cbd7:	add    BYTE PTR [rdx+rax*2],al
 100cbda:	add    BYTE PTR [rax],al
 100cbdc:	rex.RX lahf 
 100cbde:	add    BYTE PTR [rax],al
 100cbe0:	add    DWORD PTR [rax],eax
 100cbe2:	add    BYTE PTR [rax],al
 100cbe4:	neg    DWORD PTR [rdi-0x5fd60000]
 100cbea:	add    BYTE PTR [rax],al
 100cbec:	lock ret 0x0
 100cbf0:	sub    ah,BYTE PTR [rax+0xa010000]
 100cbf6:	add    al,0x0
 100cbf8:	or     dh,BYTE PTR [rax+rcx*1]
 100cbfb:	add    BYTE PTR [rdx],cl
 100cbfd:	xor    al,BYTE PTR [rsi]
 100cbff:	jo     0x100cc02
 100cc01:	or     al,0x2
 100cc03:	add    BYTE PTR [rcx+rax*1],cl
 100cc06:	adc    DWORD PTR [rax],eax
 100cc08:	add    DWORD PTR [rsi],eax
 100cc0a:	add    al,BYTE PTR [rax]
 100cc0c:	(bad)  
 100cc0d:	push   rdx
 100cc0e:	add    dl,BYTE PTR [rax+0x19]
 100cc11:	sbb    DWORD PTR [rdx],eax
 100cc13:	add    BYTE PTR [rdi],al
 100cc15:	add    DWORD PTR [rcx+0x0],esp
 100cc18:	hlt    
 100cc19:	rol    DWORD PTR [rax],0x0
 100cc1c:	add    DWORD PTR [rax],eax
 100cc1e:	add    BYTE PTR [rax],al
 100cc20:	pop    rsp
 100cc21:	movabs ds:0xab300000aa8c0000,eax
 100cc2a:	add    BYTE PTR [rax],al
 100cc2c:	add    BYTE PTR [rax],al
 100cc2e:	add    BYTE PTR [rax],al
 100cc30:	cli    
 100cc31:	add    al,BYTE PTR [rax]
 100cc33:	add    BYTE PTR [rcx],al
 100cc35:	adc    eax,DWORD PTR [rcx]
 100cc37:	add    BYTE PTR [rbx],dl
 100cc39:	(bad)  
 100cc3a:	add    BYTE PTR [rax],al
 100cc3c:	add    DWORD PTR [rbx],edx
 100cc3e:	add    DWORD PTR [rax],eax
 100cc40:	adc    eax,DWORD PTR [rdx+0x13010000]
 100cc46:	add    DWORD PTR [rax],eax
 100cc48:	adc    esp,DWORD PTR [rdx]
 100cc4a:	add    BYTE PTR [rax],al
 100cc4c:	add    DWORD PTR [rax],ebx
 100cc4e:	add    DWORD PTR [rax],eax
 100cc50:	sbb    BYTE PTR [rdx+0x0],ah
 100cc53:	add    BYTE PTR [rcx],al
 100cc55:	adc    eax,DWORD PTR [rcx]
 100cc57:	add    BYTE PTR [rbx],dl
 100cc59:	and    al,BYTE PTR [rax]
 100cc5b:	add    BYTE PTR [rcx],al
 100cc5d:	sbb    BYTE PTR [rcx],al
 100cc5f:	add    BYTE PTR [rax],bl
 100cc61:	and    al,BYTE PTR [rax]
 100cc63:	add    BYTE PTR [rcx],al
 100cc65:	add    al,0x1
 100cc67:	add    BYTE PTR [rdx+riz*2],al
 100cc6a:	add    BYTE PTR [rax],al
 100cc6c:	add    DWORD PTR [rbx+rax*1],ecx
 100cc6f:	add    BYTE PTR [rdx+riz*4],cl
 100cc72:	or     al,ah
 100cc74:	(bad)  
 100cc75:	xor    BYTE PTR [rax],al
 100cc77:	add    BYTE PTR [rcx],ah
 100cc79:	or     al,BYTE PTR [rax+rax*1]
 100cc7c:	or     ah,BYTE PTR [rdi+rcx*1+0x0]
 100cc80:	add    eax,0x90000e54
 100cc85:	scas   eax,DWORD PTR es:[rdi]
 100cc86:	add    BYTE PTR [rax],al
 100cc88:	scas   eax,DWORD PTR es:[rdi]
 100cc89:	scas   eax,DWORD PTR es:[rdi]
 100cc8a:	add    BYTE PTR [rax],al
 100cc8c:	ins    BYTE PTR es:[rdi],dx
 100cc8d:	int3   
 100cc8e:	add    BYTE PTR [rax],al
 100cc90:	and    DWORD PTR [rdi],ebp
 100cc92:	or     BYTE PTR [rax],al
 100cc94:	(bad)  
 100cc95:	hlt    
 100cc96:	or     BYTE PTR [rax],al
 100cc98:	es (bad) 
 100cc9a:	or     DWORD PTR [rax],eax
 100cc9c:	or     eax,0x8000ac4
 100cca1:	je     0x100ccb3
 100cca3:	add    BYTE PTR [rdi+0x20000af],ch
 100cca9:	mov    al,0x0
 100ccab:	add    BYTE PTR [rax-0x34],bh
 100ccae:	add    BYTE PTR [rax],al
 100ccb0:	and    DWORD PTR [rax],eax
 100ccb2:	add    BYTE PTR [rax],al
 100ccb4:	scas   eax,DWORD PTR es:[rdi]
 100ccb5:	scas   eax,DWORD PTR es:[rdi]
 100ccb6:	add    BYTE PTR [rax],al
 100ccb8:	add    dh,BYTE PTR [rax-0x33880000]
 100ccbe:	add    BYTE PTR [rax],al
 100ccc0:	and    DWORD PTR [rax],eax
 100ccc2:	add    BYTE PTR [rax],al
 100ccc4:	nop
 100ccc5:	scas   eax,DWORD PTR es:[rdi]
 100ccc6:	add    BYTE PTR [rax],al
 100ccc8:	scas   eax,DWORD PTR es:[rdi]
 100ccc9:	scas   eax,DWORD PTR es:[rdi]
 100ccca:	add    BYTE PTR [rax],al
 100cccc:	ins    BYTE PTR es:[rdi],dx
 100cccd:	int3   
 100ccce:	add    BYTE PTR [rax],al
 100ccd0:	add    DWORD PTR [rax+0xe],edi
 100ccd3:	add    BYTE PTR [rax-0x2c],bh
 100ccd6:	(bad)  
 100ccd7:	add    BYTE PTR [rbx+0x54],dh
 100ccda:	or     al,0x0
 100ccdc:	xor    eax,0x300006e4
 100cce1:	(bad)  
 100cce2:	(bad)  
 100cce3:	add    BYTE PTR [rbx],ch
 100cce5:	je     0x100ccf4
 100cce7:	add    BYTE PTR [rcx],cl
 100cce9:	jb     0x100ccf0
 100cceb:	lock add esp,DWORD PTR [rax+0x2]
 100ccef:	xor    BYTE PTR [rcx],al
 100ccf1:	add    al,0x1
 100ccf3:	add    BYTE PTR [rdx+riz*4],al
 100ccf6:	add    BYTE PTR [rax],al
 100ccf8:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505cd00
 100ccfe:	or     al,BYTE PTR [rax]
 100cd00:	add    BYTE PTR [rbp-0x4ada0000],dh
 100cd06:	add    BYTE PTR [rax],al
 100cd08:	lock int3 
 100cd0a:	add    BYTE PTR [rax],al
 100cd0c:	and    DWORD PTR [rax],eax
 100cd0e:	add    al,BYTE PTR [rax]
 100cd10:	add    BYTE PTR [rdx+rcx*1],dh
 100cd13:	add    BYTE PTR [rax],al
 100cd15:	mov    ch,0x0
 100cd17:	add    BYTE PTR [rsi],ah
 100cd19:	mov    ch,0x0
 100cd1b:	add    al,dh
 100cd1d:	int3   
 100cd1e:	add    BYTE PTR [rax],al
 100cd20:	add    DWORD PTR [rcx+rax*1],eax
 100cd23:	add    BYTE PTR [rdx+rax*2],al
 100cd26:	add    BYTE PTR [rax],al
 100cd28:	add    DWORD PTR [rsi],eax
 100cd2a:	add    al,BYTE PTR [rax]
 100cd2c:	(bad)  
 100cd2d:	xor    al,BYTE PTR [rdx]
 100cd2f:	xor    BYTE PTR [rcx],al
 100cd31:	sbb    BYTE PTR [rdx],cl
 100cd33:	add    BYTE PTR [rax],bl
 100cd35:	or     al,BYTE PTR fs:[rax]
 100cd38:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 100cd3c:	sbb    BYTE PTR [rax+rcx*1],dh
 100cd3f:	add    BYTE PTR [rax],bl
 100cd41:	xor    dl,BYTE PTR [rax+rsi*8]
 100cd44:	adc    ah,al
 100cd46:	adc    BYTE PTR [rax+0x1],dh
 100cd49:	sbb    BYTE PTR [rdx],cl
 100cd4b:	add    BYTE PTR [rax],bl
 100cd4d:	fs or  eax,0xc541800
 100cd53:	add    BYTE PTR [rax],bl
 100cd55:	xor    al,0xb
 100cd57:	add    BYTE PTR [rax],bl
 100cd59:	push   rdx
 100cd5a:	adc    al,0xf0
 100cd5c:	adc    ah,al
 100cd5e:	adc    BYTE PTR [rax+0x21],dh
 100cd61:	add    eax,0xc4050002
 100cd66:	or     al,BYTE PTR [rax]
 100cd68:	adc    BYTE PTR [rdi-0x48960000],dh
 100cd6e:	add    BYTE PTR [rax],al
 100cd70:	rex.W int 0x0
 100cd73:	add    BYTE PTR [rcx],ah
 100cd75:	add    BYTE PTR [rax],al
 100cd77:	add    BYTE PTR [rax],dl
 100cd79:	mov    bh,0x0
 100cd7b:	add    BYTE PTR [rdx-0x49],ch
 100cd7e:	add    BYTE PTR [rax],al
 100cd80:	rex.W int 0x0
 100cd83:	add    BYTE PTR [rcx],al
 100cd85:	or     al,0x6
 100cd87:	add    BYTE PTR [rsp+rsi*1],cl
 100cd8a:	or     eax,0x8520c00
 100cd8f:	jo     0x100cd98
 100cd91:	(bad)  
 100cd92:	(bad)  
 100cd93:	push   rax
 100cd94:	and    DWORD PTR [rdi],ecx
 100cd96:	(bad)  
 100cd97:	add    BYTE PTR [rdi],cl
 100cd99:	hlt    
 100cd9a:	or     al,0x0
 100cd9c:	or     ah,ah
 100cd9e:	or     eax,DWORD PTR [rax]
 100cda0:	add    eax,0x50000ac4
 100cda5:	mov    eax,0xb88a0000
 100cdaa:	add    BYTE PTR [rax],al
 100cdac:	test   ch,cl
 100cdae:	add    BYTE PTR [rax],al
 100cdb0:	and    DWORD PTR [rax],eax
 100cdb2:	add    BYTE PTR [rax],al
 100cdb4:	push   rax
 100cdb5:	mov    eax,0xb88a0000
 100cdba:	add    BYTE PTR [rax],al
 100cdbc:	test   ch,cl
 100cdbe:	add    BYTE PTR [rax],al
 100cdc0:	add    DWORD PTR [rdx],ecx
 100cdc2:	add    al,0x0
 100cdc4:	or     dh,BYTE PTR [rdx+0x6]
 100cdc7:	rol    BYTE PTR [rax+rax*8],1
 100cdca:	add    dh,BYTE PTR [rax+0x21]
 100cdcd:	(bad)  
 100cdce:	or     al,BYTE PTR [rax]
 100cdd0:	(bad)  
 100cdd1:	hlt    
 100cdd2:	(bad)  
 100cdd3:	add    BYTE PTR [rcx],bl
 100cdd5:	in     al,0x7
 100cdd7:	add    BYTE PTR [rdi],cl
 100cdd9:	fs (bad) 
 100cddb:	add    BYTE PTR [rdx],cl
 100cddd:	push   rsp
 100cdde:	or     eax,0xc340500
 100cde3:	add    BYTE PTR [rax-0x3cffff47],dl
 100cde9:	mov    ecx,0xcdc00000
 100cdee:	add    BYTE PTR [rax],al
 100cdf0:	and    DWORD PTR [rax],eax
 100cdf2:	add    BYTE PTR [rax],al
 100cdf4:	nop
 100cdf5:	mov    ecx,0xb9c30000
 100cdfa:	add    BYTE PTR [rax],al
 100cdfc:	ror    ch,0x0
 100cdff:	add    BYTE PTR [rcx],ah
 100ce01:	add    BYTE PTR [rdx],cl
 100ce03:	add    BYTE PTR [rax],al
 100ce05:	hlt    
 100ce06:	(bad)  
 100ce07:	add    BYTE PTR [rax],al
 100ce09:	in     al,0x7
 100ce0b:	add    BYTE PTR [rax],al
 100ce0d:	fs (bad) 
 100ce0f:	add    BYTE PTR [rax],al
 100ce11:	push   rsp
 100ce12:	or     eax,0xc340000
 100ce17:	add    BYTE PTR [rax-0x3cffff47],dl
 100ce1d:	mov    ecx,0xcdc00000
 100ce22:	add    BYTE PTR [rax],al
 100ce24:	add    DWORD PTR [rsi],eax
 100ce26:	add    al,BYTE PTR [rax]
 100ce28:	(bad)  
 100ce29:	xor    al,BYTE PTR [rdx]
 100ce2b:	xor    BYTE PTR [rcx],al
 100ce2d:	(bad)  
 100ce2e:	add    al,BYTE PTR [rax]
 100ce30:	(bad)  
 100ce31:	xor    al,BYTE PTR [rdx]
 100ce33:	jo     0x100ce56
 100ce35:	clts   
 100ce37:	add    BYTE PTR [rdi],cl
 100ce39:	or     BYTE PTR fs:[rax],al
 100ce3c:	or     dl,BYTE PTR [rdi+rax*1+0x0]
 100ce40:	add    eax,0xf0000634
 100ce45:	mov    ebx,0xbc540000
 100ce4a:	add    BYTE PTR [rax],al
 100ce4c:	sub    al,0xce
 100ce4e:	add    BYTE PTR [rax],al
 100ce50:	and    DWORD PTR [rax],eax
 100ce52:	(bad)  
 100ce53:	add    BYTE PTR [rax],al
 100ce55:	or     BYTE PTR fs:[rax],al
 100ce58:	add    BYTE PTR [rdi+rax*1+0x0],dl
 100ce5c:	add    BYTE PTR [rsi+rax*1],dh
 100ce5f:	add    al,dh
 100ce61:	mov    ebx,0xbc540000
 100ce66:	add    BYTE PTR [rax],al
 100ce68:	sub    al,0xce
 100ce6a:	add    BYTE PTR [rax],al
 100ce6c:	and    DWORD PTR [rax],eax
 100ce6e:	add    BYTE PTR [rax],al
 100ce70:	lock mov ebx,0xbc540000
 100ce76:	add    BYTE PTR [rax],al
 100ce78:	sub    al,0xce
 100ce7a:	add    BYTE PTR [rax],al
 100ce7c:	add    DWORD PTR [rsi],eax
 100ce7e:	add    al,BYTE PTR [rax]
 100ce80:	(bad)  
 100ce81:	xor    al,BYTE PTR [rdx]
 100ce83:	loopne 0x100cea6
 100ce85:	or     al,BYTE PTR [rax+rax*1]
 100ce88:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 100ce8c:	add    eax,0x634
 100ce91:	mov    ebp,0xbd290000
 100ce96:	add    BYTE PTR [rax],al
 100ce98:	jl     0x100ce68
 100ce9a:	add    BYTE PTR [rax],al
 100ce9c:	and    DWORD PTR [rdx],ecx
 100ce9e:	(bad)  
 100ce9f:	add    BYTE PTR [rdx],cl
 100cea1:	je     0x100ceab
 100cea3:	add    BYTE PTR [rax],al
 100cea5:	fs (bad) 
 100cea7:	add    BYTE PTR [rax],al
 100cea9:	xor    al,0x6
 100ceab:	add    BYTE PTR [rax],al
 100cead:	mov    ebp,0xbd290000
 100ceb2:	add    BYTE PTR [rax],al
 100ceb4:	jl     0x100ce84
 100ceb6:	add    BYTE PTR [rax],al
 100ceb8:	and    DWORD PTR [rax],eax
 100ceba:	(bad)  
 100cebb:	add    BYTE PTR [rax],al
 100cebd:	je     0x100cec7
 100cebf:	add    BYTE PTR [rax],al
 100cec1:	fs (bad) 
 100cec3:	add    BYTE PTR [rax],al
 100cec5:	xor    al,0x6
 100cec7:	add    BYTE PTR [rax],al
 100cec9:	mov    ebp,0xbd290000
 100cece:	add    BYTE PTR [rax],al
 100ced0:	jl     0x100cea0
 100ced2:	add    BYTE PTR [rax],al
 100ced4:	and    DWORD PTR [rax],eax
 100ced6:	add    BYTE PTR [rax],al
 100ced8:	add    BYTE PTR [rbp-0x42d70000],bh
 100cede:	add    BYTE PTR [rax],al
 100cee0:	jl     0x100ceb0
 100cee2:	add    BYTE PTR [rax],al
 100cee4:	add    DWORD PTR [rax],ebx
 100cee6:	add    DWORD PTR [rax],eax
 100cee8:	sbb    dl,al
 100ceea:	add    BYTE PTR [rax],al
 100ceec:	add    DWORD PTR [rsi],edx
 100ceee:	or     al,BYTE PTR [rax]
 100cef0:	(bad)  
 100cef1:	xor    al,0x19
 100cef3:	add    BYTE PTR [rsi],dl
 100cef5:	rcl    BYTE PTR [rdx],cl
 100cef7:	lock adc al,ah
 100cefa:	(bad)  
 100cefb:	ror    BYTE PTR [rax+rax*8],1
 100cefe:	or     dh,BYTE PTR [rax+0x9]
 100cf01:	(bad)  
 100cf02:	or     BYTE PTR [rax+0x1],dl
 100cf05:	sbb    DWORD PTR [rdx],ecx
 100cf07:	add    BYTE PTR [rcx],bl
 100cf09:	je     0x100cf14
 100cf0b:	add    BYTE PTR [rcx],bl
 100cf0d:	or     BYTE PTR fs:[rax],al
 100cf10:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 100cf14:	sbb    DWORD PTR [rsi+rax*1],esi
 100cf17:	add    BYTE PTR [rcx],bl
 100cf19:	xor    dl,BYTE PTR [rip+0x1c0]        # 0x100d0df
 100cf1f:	add    al,dh
 100cf21:	sub    eax,0xa980000
 100cf26:	add    DWORD PTR [rax],eax
 100cf28:	and    al,bh
 100cf2a:	add    BYTE PTR [rax],al
 100cf2c:	(bad)  
 100cf2d:	iret   
 100cf2e:	add    BYTE PTR [rax],al
 100cf30:	ror    bh,1
	...
 100cf5e:	add    BYTE PTR [rax],al
 100cf60:	pushf  
 100cf61:	iret   
 100cf62:	add    BYTE PTR [rax],al
 100cf64:	add    BYTE PTR [rax],al
 100cf66:	add    BYTE PTR [rax],al
 100cf68:	mov    dh,0xcf
 100cf6a:	add    BYTE PTR [rax],al
 100cf6c:	add    BYTE PTR [rax],al
 100cf6e:	add    BYTE PTR [rax],al
 100cf70:	or     bh,0x0
	...
 100cf7f:	add    BYTE PTR [rax],al
 100cf81:	add    BYTE PTR [rdi+0x65],al
 100cf84:	je     0x100cfd9
 100cf86:	jbe    0x100cfeb
 100cf88:	rex.WB outs dx,BYTE PTR ds:[rsi]
 100cf8a:	jae    0x100d000
 100cf8c:	(bad)  
 100cf8d:	outs   dx,BYTE PTR ds:[rsi]
 100cf8e:	movsxd esp,DWORD PTR [rbp+0x49]
 100cf91:	rex.R
 100cf92:	rex.RX jb 0x100d004
 100cf95:	ins    DWORD PTR es:[rdi],dx
 100cf96:	rex.WRX (bad) 
 100cf98:	ins    DWORD PTR es:[rdi],dx
 100cf99:	add    BYTE PTR gs:[rcx],dh
 100cf9c:	add    BYTE PTR [rax],al
 100cf9e:	rex.RXB
 100cf9f:	gs je  0x100cfeb
 100cfa2:	outs   dx,BYTE PTR ds:[rsi]
 100cfa3:	jae    0x100d019
 100cfa5:	push   rdx
 100cfa6:	outs   dx,DWORD PTR ds:[rsi]
 100cfa7:	outs   dx,DWORD PTR ds:[rsi]
 100cfa8:	je     0x100cffc
 100cfaa:	gs addr32 push rax
 100cfad:	(bad)  
 100cfae:	je     0x100d018
 100cfb0:	rex.X jns 0x100cffc
 100cfb3:	add    BYTE PTR [rax+0x0],r14b
 100cfb7:	add    BYTE PTR [rdi+0x65],al
 100cfba:	je     0x100d00f
 100cfbc:	push   rcx
 100cfbd:	rex.WR push rbx
 100cfbf:	gs jb  0x100d038
 100cfc2:	imul   esp,DWORD PTR [rbx+0x65],0x614e7942
 100cfc9:	ins    DWORD PTR es:[rdi],dx
 100cfca:	add    BYTE PTR gs:[rax],al
	...
 100cfed:	add    BYTE PTR [rax],al
 100cfef:	add    BYTE PTR [rax+0xd0],al
 100cff5:	add    BYTE PTR [rax],al
 100cff7:	add    BYTE PTR [rax],al
 100cff9:	add    BYTE PTR [rax],al
 100cffb:	add    BYTE PTR [rax+0xd4],ch
 100d001:	adc    BYTE PTR [rax],al
 100d003:	add    al,ah
 100d005:	rol    BYTE PTR [rax],1
	...
 100d00f:	add    BYTE PTR [rsi-0x2b],ah
 100d012:	add    BYTE PTR [rax],al
 100d014:	(bad)  
 100d015:	adc    BYTE PTR [rax],al
 100d017:	add    BYTE PTR [rax-0x2e],cl
	...
 100d022:	add    BYTE PTR [rax],al
 100d024:	or     al,0xd7
 100d026:	add    BYTE PTR [rax],al
 100d028:	enter  0x11,0x0
 100d02c:	test   al,0xd3
	...
 100d036:	add    BYTE PTR [rax],al
 100d038:	outs   dx,BYTE PTR ds:[rsi]
 100d039:	xlat   BYTE PTR ds:[rbx]
 100d03a:	add    BYTE PTR [rax],al
 100d03c:	sub    BYTE PTR [rbx],dl
 100d03e:	add    BYTE PTR [rax],al
 100d040:	rcl    bl,1
	...
 100d04a:	add    BYTE PTR [rax],al
 100d04c:	mov    dl,0xd7
 100d04e:	add    BYTE PTR [rax],al
 100d050:	push   rax
 100d051:	adc    eax,DWORD PTR [rax]
 100d053:	add    BYTE PTR [rax+0xd3],dl
 100d059:	add    BYTE PTR [rax],al
 100d05b:	add    BYTE PTR [rax],al
 100d05d:	add    BYTE PTR [rax],al
 100d05f:	add    dl,ah
 100d061:	xlat   BYTE PTR ds:[rbx]
 100d062:	add    BYTE PTR [rax],al
 100d064:	adc    BYTE PTR [rbx],dl
	...
 100d07e:	add    BYTE PTR [rax],al
 100d080:	lock rol DWORD PTR [rax],cl
 100d083:	add    BYTE PTR [rax],al
 100d085:	add    BYTE PTR [rax],al
 100d087:	add    dh,bh
 100d089:	rol    DWORD PTR [rax],cl
 100d08b:	add    BYTE PTR [rax],al
 100d08d:	add    BYTE PTR [rax],al
 100d08f:	add    BYTE PTR [rsi],cl
 100d091:	(bad)  
 100d092:	add    BYTE PTR [rax],al
 100d094:	add    BYTE PTR [rax],al
 100d096:	add    BYTE PTR [rax],al
 100d098:	and    dl,ah
 100d09a:	add    BYTE PTR [rax],al
 100d09c:	add    BYTE PTR [rax],al
 100d09e:	add    BYTE PTR [rax],al
 100d0a0:	cmp    ah,dl
 100d0a2:	add    BYTE PTR [rax],al
 100d0a4:	add    BYTE PTR [rax],al
 100d0a6:	add    BYTE PTR [rax],al
 100d0a8:	rex.WX (bad) 
 100d0aa:	add    BYTE PTR [rax],al
 100d0ac:	add    BYTE PTR [rax],al
 100d0ae:	add    BYTE PTR [rax],al
 100d0b0:	pop    rdx
 100d0b1:	(bad)  
 100d0b2:	add    BYTE PTR [rax],al
 100d0b4:	add    BYTE PTR [rax],al
 100d0b6:	add    BYTE PTR [rax],al
 100d0b8:	jo     0x100d08e
 100d0ba:	add    BYTE PTR [rax],al
 100d0bc:	add    BYTE PTR [rax],al
 100d0be:	add    BYTE PTR [rax],al
 100d0c0:	adc    ah,0x0
 100d0c3:	add    BYTE PTR [rax],al
 100d0c5:	add    BYTE PTR [rax],al
 100d0c7:	add    BYTE PTR [rdx+0xd4],dl
 100d0cd:	add    BYTE PTR [rax],al
 100d0cf:	add    al,dh
 100d0d1:	xlat   BYTE PTR ds:[rbx]
	...
 100d0de:	add    BYTE PTR [rax],al
 100d0e0:	fld    DWORD PTR ss:[rax]
 100d0e3:	add    BYTE PTR [rax],al
 100d0e5:	add    BYTE PTR [rax],al
 100d0e7:	add    BYTE PTR [rdx],ah
 100d0e9:	fld    DWORD PTR [rax]
 100d0eb:	add    BYTE PTR [rax],al
 100d0ed:	add    BYTE PTR [rax],al
 100d0ef:	add    BYTE PTR [rax],cl
 100d0f1:	fld    DWORD PTR [rax]
 100d0f3:	add    BYTE PTR [rax],al
 100d0f5:	add    BYTE PTR [rax],al
 100d0f7:	add    ah,dh
 100d0f9:	fadd   DWORD PTR [rax]
 100d0fb:	add    BYTE PTR [rax],al
 100d0fd:	add    BYTE PTR [rax],al
 100d0ff:	add    al,ah
 100d101:	fadd   DWORD PTR [rax]
 100d103:	add    BYTE PTR [rax],al
 100d105:	add    BYTE PTR [rax],al
 100d107:	add    BYTE PTR [rax-0x27],dl
 100d10a:	add    BYTE PTR [rax],al
 100d10c:	add    BYTE PTR [rax],al
 100d10e:	add    BYTE PTR [rax],al
 100d110:	mov    al,0xd8
 100d112:	add    BYTE PTR [rax],al
 100d114:	add    BYTE PTR [rax],al
 100d116:	add    BYTE PTR [rax],al
 100d118:	pushf  
 100d119:	fadd   DWORD PTR [rax]
 100d11b:	add    BYTE PTR [rax],al
 100d11d:	add    BYTE PTR [rax],al
 100d11f:	add    BYTE PTR [rdx+0xd8],al
 100d125:	add    BYTE PTR [rax],al
 100d127:	add    BYTE PTR [rax+rbx*8+0x0],ch
 100d12b:	add    BYTE PTR [rax],al
 100d12d:	add    BYTE PTR [rax],al
 100d12f:	add    BYTE PTR [rsi-0x28],dl
 100d132:	add    BYTE PTR [rax],al
 100d134:	add    BYTE PTR [rax],al
 100d136:	add    BYTE PTR [rax],al
 100d138:	cmp    al,0xd8
 100d13a:	add    BYTE PTR [rax],al
 100d13c:	add    BYTE PTR [rax],al
 100d13e:	add    BYTE PTR [rax],al
 100d140:	sub    al,0xd8
 100d142:	add    BYTE PTR [rax],al
 100d144:	add    BYTE PTR [rax],al
 100d146:	add    BYTE PTR [rax],al
 100d148:	(bad)  
 100d149:	fadd   DWORD PTR [rax]
 100d14b:	add    BYTE PTR [rax],al
 100d14d:	add    BYTE PTR [rax],al
 100d14f:	add    dh,bh
 100d151:	xlat   BYTE PTR ds:[rbx]
 100d152:	add    BYTE PTR [rax],al
 100d154:	add    BYTE PTR [rax],al
 100d156:	add    BYTE PTR [rax],al
 100d158:	push   0xffffffffffffffd9
 100d15a:	add    BYTE PTR [rax],al
 100d15c:	add    BYTE PTR [rax],al
 100d15e:	add    BYTE PTR [rax],al
 100d160:	jl     0x100d13b
 100d162:	add    BYTE PTR [rax],al
 100d164:	add    BYTE PTR [rax],al
 100d166:	add    BYTE PTR [rax],al
 100d168:	mov    cl,bl
 100d16a:	add    BYTE PTR [rax],al
 100d16c:	add    BYTE PTR [rax],al
 100d16e:	add    BYTE PTR [rax],al
 100d170:	xchg   esp,eax
 100d171:	fld    DWORD PTR [rax]
 100d173:	add    BYTE PTR [rax],al
 100d175:	add    BYTE PTR [rax],al
 100d177:	add    BYTE PTR [rdx+0xd9],ah
 100d17d:	add    BYTE PTR [rax],al
 100d17f:	add    BYTE PTR [rcx+rbx*8+0x0],dh
 100d186:	add    BYTE PTR [rax],al
 100d188:	rcr    cl,0x0
 100d18b:	add    BYTE PTR [rax],al
 100d18d:	add    BYTE PTR [rax],al
 100d18f:	add    ah,dl
 100d191:	fld    DWORD PTR [rax]
 100d193:	add    BYTE PTR [rax],al
 100d195:	add    BYTE PTR [rax],al
 100d197:	add    BYTE PTR [rsi-0x2b],dl
 100d19a:	add    BYTE PTR [rax],al
 100d19c:	add    BYTE PTR [rax],al
 100d19e:	add    BYTE PTR [rax],al
 100d1a0:	rex.X (bad) 
 100d1a2:	add    BYTE PTR [rax],al
 100d1a4:	add    BYTE PTR [rax],al
 100d1a6:	add    BYTE PTR [rax],al
 100d1a8:	in     al,0xd9
 100d1aa:	add    BYTE PTR [rax],al
 100d1ac:	add    BYTE PTR [rax],al
 100d1ae:	add    BYTE PTR [rax],al
 100d1b0:	xor    ch,dl
 100d1b2:	add    BYTE PTR [rax],al
 100d1b4:	add    BYTE PTR [rax],al
 100d1b6:	add    BYTE PTR [rax],al
 100d1b8:	and    al,0xd5
 100d1ba:	add    BYTE PTR [rax],al
 100d1bc:	add    BYTE PTR [rax],al
 100d1be:	add    BYTE PTR [rax],al
 100d1c0:	(bad)  
 100d1c1:	(bad)  
 100d1c2:	add    BYTE PTR [rax],al
 100d1c4:	add    BYTE PTR [rax],al
 100d1c6:	add    BYTE PTR [rax],al
 100d1c8:	(bad)  
 100d1c9:	(bad)  
 100d1ca:	add    BYTE PTR [rax],al
 100d1cc:	add    BYTE PTR [rax],al
 100d1ce:	add    BYTE PTR [rax],al
 100d1d0:	test   dl,bl
 100d1d2:	add    BYTE PTR [rax],al
 100d1d4:	add    BYTE PTR [rax],al
 100d1d6:	add    BYTE PTR [rax],al
 100d1d8:	out    dx,al
 100d1d9:	(bad)  
 100d1da:	add    BYTE PTR [rax],al
 100d1dc:	add    BYTE PTR [rax],al
 100d1de:	add    BYTE PTR [rax],al
 100d1e0:	je     0x100d1bc
 100d1e2:	add    BYTE PTR [rax],al
 100d1e4:	add    BYTE PTR [rax],al
 100d1e6:	add    BYTE PTR [rax],al
 100d1e8:	data16 fiadd DWORD PTR [rax]
 100d1eb:	add    BYTE PTR [rax],al
 100d1ed:	add    BYTE PTR [rax],al
 100d1ef:	add    BYTE PTR [rax-0x26],dl
 100d1f2:	add    BYTE PTR [rax],al
 100d1f4:	add    BYTE PTR [rax],al
 100d1f6:	add    BYTE PTR [rax],al
 100d1f8:	xor    al,0xda
 100d1fa:	add    BYTE PTR [rax],al
 100d1fc:	add    BYTE PTR [rax],al
 100d1fe:	add    BYTE PTR [rax],al
 100d200:	sbb    dl,bl
 100d202:	add    BYTE PTR [rax],al
 100d204:	add    BYTE PTR [rax],al
 100d206:	add    BYTE PTR [rax],al
 100d208:	add    bl,dl
 100d20a:	add    BYTE PTR [rax],al
 100d20c:	add    BYTE PTR [rax],al
 100d20e:	add    BYTE PTR [rax],al
 100d210:	hlt    
 100d211:	fld    DWORD PTR [rax]
 100d213:	add    BYTE PTR [rax],al
 100d215:	add    BYTE PTR [rax],al
 100d217:	add    dh,ah
 100d219:	(bad)  
 100d21a:	add    BYTE PTR [rax],al
 100d21c:	add    BYTE PTR [rax],al
 100d21e:	add    BYTE PTR [rax],al
 100d220:	(bad)  
 100d221:	(bad)  
 100d222:	add    BYTE PTR [rax],al
 100d224:	add    BYTE PTR [rax],al
 100d226:	add    BYTE PTR [rax],al
 100d228:	(bad)  
 100d229:	(bad)  
 100d22a:	add    BYTE PTR [rax],al
 100d22c:	add    BYTE PTR [rax],al
 100d22e:	add    BYTE PTR [rax],al
 100d230:	mov    dh,0xd4
 100d232:	add    BYTE PTR [rax],al
 100d234:	add    BYTE PTR [rax],al
 100d236:	add    BYTE PTR [rax],al
 100d238:	(bad)  
 100d239:	fadd   DWORD PTR [rax]
	...
 100d247:	add    BYTE PTR [rsi+0xda],ah
 100d24d:	add    BYTE PTR [rax],al
 100d24f:	add    BYTE PTR [rsi+0xda],dl
 100d255:	add    BYTE PTR [rax],al
 100d257:	add    BYTE PTR [rax-0x29],bl
 100d25a:	add    BYTE PTR [rax],al
 100d25c:	add    BYTE PTR [rax],al
 100d25e:	add    BYTE PTR [rax],al
 100d260:	rex.WRX xlat BYTE PTR ds:[rbx]
 100d262:	add    BYTE PTR [rax],al
 100d264:	add    BYTE PTR [rax],al
 100d266:	add    BYTE PTR [rax],al
 100d268:	cmp    bh,dl
 100d26a:	add    BYTE PTR [rax],al
 100d26c:	add    BYTE PTR [rax],al
 100d26e:	add    BYTE PTR [rax],al
 100d270:	xlat   BYTE PTR cs:[rbx]
 100d272:	add    BYTE PTR [rax],al
 100d274:	add    BYTE PTR [rax],al
 100d276:	add    BYTE PTR [rax],al
 100d278:	sbb    dl,bh
 100d27a:	add    BYTE PTR [rax],al
 100d27c:	add    BYTE PTR [rax],al
 100d27e:	add    BYTE PTR [rax],al
 100d280:	cli    
 100d281:	(bad)  
 100d282:	add    BYTE PTR [rax],al
 100d284:	add    BYTE PTR [rax],al
 100d286:	add    BYTE PTR [rax],al
 100d288:	lock (bad) 
 100d28a:	add    BYTE PTR [rax],al
 100d28c:	add    BYTE PTR [rax],al
 100d28e:	add    BYTE PTR [rax],al
 100d290:	in     al,0xd6
 100d292:	add    BYTE PTR [rax],al
 100d294:	add    BYTE PTR [rax],al
 100d296:	add    BYTE PTR [rax],al
 100d298:	rcl    dh,1
 100d29a:	add    BYTE PTR [rax],al
 100d29c:	add    BYTE PTR [rax],al
 100d29e:	add    BYTE PTR [rax],al
 100d2a0:	mov    edx,0xd6
 100d2a5:	add    BYTE PTR [rax],al
 100d2a7:	add    BYTE PTR [rsi+rdx*8+0x0],ch
 100d2ae:	add    BYTE PTR [rax],al
 100d2b0:	movabs al,ds:0x92000000000000d6
 100d2b9:	(bad)  
 100d2ba:	add    BYTE PTR [rax],al
 100d2bc:	add    BYTE PTR [rax],al
 100d2be:	add    BYTE PTR [rax],al
 100d2c0:	mov    dl,dh
 100d2c2:	add    BYTE PTR [rax],al
 100d2c4:	add    BYTE PTR [rax],al
 100d2c6:	add    BYTE PTR [rax],al
 100d2c8:	adc    dh,0x0
 100d2cb:	add    BYTE PTR [rax],al
 100d2cd:	add    BYTE PTR [rax],al
 100d2cf:	add    BYTE PTR [rax-0x2a],bh
 100d2d2:	add    BYTE PTR [rax],al
 100d2d4:	add    BYTE PTR [rax],al
 100d2d6:	add    BYTE PTR [rax],al
 100d2d8:	push   0xffffffffffffffd6
 100d2da:	add    BYTE PTR [rax],al
 100d2dc:	add    BYTE PTR [rax],al
 100d2de:	add    BYTE PTR [rax],al
 100d2e0:	push   rdx
 100d2e1:	(bad)  
 100d2e2:	add    BYTE PTR [rax],al
 100d2e4:	add    BYTE PTR [rax],al
 100d2e6:	add    BYTE PTR [rax],al
 100d2e8:	rex (bad) 
 100d2ea:	add    BYTE PTR [rax],al
 100d2ec:	add    BYTE PTR [rax],al
 100d2ee:	add    BYTE PTR [rax],al
 100d2f0:	xor    dl,dh
 100d2f2:	add    BYTE PTR [rax],al
 100d2f4:	add    BYTE PTR [rax],al
 100d2f6:	add    BYTE PTR [rax],al
 100d2f8:	sub    dh,dl
 100d2fa:	add    BYTE PTR [rax],al
 100d2fc:	add    BYTE PTR [rax],al
 100d2fe:	add    BYTE PTR [rax],al
 100d300:	and    dh,dl
 100d302:	add    BYTE PTR [rax],al
 100d304:	add    BYTE PTR [rax],al
 100d306:	add    BYTE PTR [rax],al
 100d308:	sbb    dl,dh
 100d30a:	add    BYTE PTR [rax],al
 100d30c:	add    BYTE PTR [rax],al
 100d30e:	add    BYTE PTR [rax],al
 100d310:	(bad)  
 100d311:	(bad)  
 100d312:	add    BYTE PTR [rax],al
 100d314:	add    BYTE PTR [rax],al
 100d316:	add    BYTE PTR [rax],al
 100d318:	add    al,0xd6
 100d31a:	add    BYTE PTR [rax],al
 100d31c:	add    BYTE PTR [rax],al
 100d31e:	add    BYTE PTR [rax],al
 100d320:	clc    
 100d321:	(bad)  
 100d322:	add    BYTE PTR [rax],al
 100d324:	add    BYTE PTR [rax],al
 100d326:	add    BYTE PTR [rax],al
 100d328:	out    dx,al
 100d329:	(bad)  
 100d32a:	add    BYTE PTR [rax],al
 100d32c:	add    BYTE PTR [rax],al
 100d32e:	add    BYTE PTR [rax],al
 100d330:	loopne 0x100d307
 100d332:	add    BYTE PTR [rax],al
 100d334:	add    BYTE PTR [rax],al
 100d336:	add    BYTE PTR [rax],al
 100d338:	(bad)  
 100d339:	(bad)  
 100d33a:	add    BYTE PTR [rax],al
 100d33c:	add    BYTE PTR [rax],al
 100d33e:	add    BYTE PTR [rax],al
 100d340:	(bad)  
 100d341:	(bad)  
 100d342:	add    BYTE PTR [rax],al
 100d344:	add    BYTE PTR [rax],al
 100d346:	add    BYTE PTR [rax],al
 100d348:	mov    ah,0xd5
 100d34a:	add    BYTE PTR [rax],al
 100d34c:	add    BYTE PTR [rax],al
 100d34e:	add    BYTE PTR [rax],al
 100d350:	stos   BYTE PTR es:[rdi],al
 100d351:	(bad)  
 100d352:	add    BYTE PTR [rax],al
 100d354:	add    BYTE PTR [rax],al
 100d356:	add    BYTE PTR [rax],al
 100d358:	sahf   
 100d359:	(bad)  
 100d35a:	add    BYTE PTR [rax],al
 100d35c:	add    BYTE PTR [rax],al
 100d35e:	add    BYTE PTR [rax],al
 100d360:	xchg   edx,eax
 100d361:	(bad)  
 100d362:	add    BYTE PTR [rax],al
 100d364:	add    BYTE PTR [rax],al
 100d366:	add    BYTE PTR [rax],al
 100d368:	xchg   ch,dl
 100d36a:	add    BYTE PTR [rax],al
 100d36c:	add    BYTE PTR [rax],al
 100d36e:	add    BYTE PTR [rax],al
 100d370:	jle    0x100d347
 100d372:	add    BYTE PTR [rax],al
 100d374:	add    BYTE PTR [rax],al
 100d376:	add    BYTE PTR [rax],al
 100d378:	je     0x100d34f
 100d37a:	add    BYTE PTR [rax],al
 100d37c:	add    BYTE PTR [rax],al
 100d37e:	add    BYTE PTR [rax],al
 100d380:	rex.RX xlat BYTE PTR ds:[rbx]
	...
 100d38e:	add    BYTE PTR [rax],al
 100d390:	(bad)  
 100d391:	xlat   BYTE PTR ds:[rbx]
 100d392:	add    BYTE PTR [rax],al
 100d394:	add    BYTE PTR [rax],al
 100d396:	add    BYTE PTR [rax],al
 100d398:	mov    esp,0xd7
	...
 100d3a5:	add    BYTE PTR [rax],al
 100d3a7:	add    BYTE PTR [rsi],al
 100d3a9:	add    BYTE PTR [rax],al
 100d3ab:	add    BYTE PTR [rax],al
 100d3ad:	add    BYTE PTR [rax],al
 100d3af:	or     BYTE PTR [rax],0x0
 100d3b2:	add    BYTE PTR [rax],al
 100d3b4:	add    BYTE PTR [rax],al
 100d3b6:	add    BYTE PTR [rax+0xc8],al
 100d3bc:	add    BYTE PTR [rax],al
 100d3be:	add    BYTE PTR [rax+0x9],al
 100d3c4:	add    BYTE PTR [rax],al
 100d3c6:	add    BYTE PTR [rax+0x0],al
 100d3cc:	add    BYTE PTR [rax],al
 100d3ce:	add    BYTE PTR [rax],al
 100d3d0:	sahf   
 100d3d1:	xlat   BYTE PTR ds:[rbx]
 100d3d2:	add    BYTE PTR [rax],al
 100d3d4:	add    BYTE PTR [rax],al
 100d3d6:	add    BYTE PTR [rax],al
 100d3d8:	jl     0x100d3b1
 100d3da:	add    BYTE PTR [rax],al
 100d3dc:	add    BYTE PTR [rax],al
 100d3de:	add    BYTE PTR [rax],al
 100d3e0:	mov    edi,ss
	...
 100d3ee:	add    BYTE PTR [rax],al
 100d3f0:	xor    BYTE PTR [rdx],al
 100d3f2:	push   rdx
 100d3f3:	gs rex.XB ins BYTE PTR es:[edi],dx
 100d3f7:	outs   dx,DWORD PTR ds:[rsi]
 100d3f8:	jae    0x100d45f
 100d3fa:	rex.WXB
 100d3fb:	gs jns 0x100d3fe
 100d3fe:	(bad)  
 100d3ff:	add    dl,BYTE PTR [rdx+0x65]
 100d402:	addr32 rex.WRXB jo 0x100d46b
 100d406:	outs   dx,BYTE PTR ds:[rsi]
 100d407:	rex.WXB
 100d408:	gs jns 0x100d450
 100d40b:	js     0x100d464
 100d40d:	add    BYTE PTR [rsi+0x2],ch
 100d410:	push   rdx
 100d411:	gs addr32 push rcx
 100d414:	jne    0x100d47b
 100d416:	jb     0x100d491
 100d418:	push   rsi
 100d419:	(bad)  
 100d41a:	ins    BYTE PTR es:[rdi],dx
 100d41b:	jne    0x100d482
 100d41d:	rex.RB js 0x100d477
 100d420:	add    BYTE PTR [rax],al
 100d422:	push   rdi
 100d423:	add    BYTE PTR [rbx+0x6c],al
 100d426:	outs   dx,DWORD PTR ds:[rsi]
 100d427:	jae    0x100d48e
 100d429:	push   rbx
 100d42a:	gs jb  0x100d4a3
 100d42d:	imul   esp,DWORD PTR [rbx+0x65],0x646e6148
 100d434:	ins    BYTE PTR es:[rdi],dx
 100d435:	add    BYTE PTR gs:[rax],al
 100d438:	stc    
 100d439:	add    DWORD PTR [rdi+0x70],ecx
 100d43c:	outs   dx,BYTE PTR gs:[rsi]
 100d43e:	push   rbx
 100d43f:	rex.XB
 100d440:	rex.WRB (bad) 
 100d442:	outs   dx,BYTE PTR ds:[rsi]
 100d443:	(bad)  
 100d444:	addr32 gs jb 0x100d49f
 100d448:	add    BYTE PTR [rax],al
 100d44a:	sti    
 100d44b:	add    DWORD PTR [rdi+0x70],ecx
 100d44e:	outs   dx,BYTE PTR gs:[rsi]
 100d450:	push   rbx
 100d451:	gs jb  0x100d4ca
 100d454:	imul   esp,DWORD PTR [rbx+0x65],0x28000057
 100d45b:	add    dl,BYTE PTR [rcx+0x75]
 100d45e:	gs jb  0x100d4da
 100d461:	push   rbx
 100d462:	gs jb  0x100d4db
 100d465:	imul   esp,DWORD PTR [rbx+0x65],0x74617453
 100d46c:	jne    0x100d4e1
 100d46e:	add    BYTE PTR [rax],al
 100d470:	leave  
 100d471:	add    dl,BYTE PTR [rbx+0x74]
 100d474:	(bad)  
 100d475:	jb     0x100d4eb
 100d477:	push   rbx
 100d478:	gs jb  0x100d4f1
 100d47b:	imul   esp,DWORD PTR [rbx+0x65],0x27e0057
 100d482:	push   rdx
 100d483:	gs addr32 push rbx
 100d486:	gs je  0x100d4df
 100d489:	(bad)  
 100d48a:	ins    BYTE PTR es:[rdi],dx
 100d48b:	jne    0x100d4f2
 100d48d:	rex.RB js 0x100d4e7
 100d490:	add    BYTE PTR [rax],al
 100d492:	and    al,0x2
 100d494:	push   rcx
 100d495:	jne    0x100d4fc
 100d497:	jb     0x100d512
 100d499:	push   rbx
 100d49a:	gs jb  0x100d513
 100d49d:	imul   esp,DWORD PTR [rbx+0x65],0x666e6f43
 100d4a4:	imul   esp,DWORD PTR [rdi+0x57],0x56444100
 100d4ab:	push   r8
 100d4ad:	xor    rsi,QWORD PTR [r10]
 100d4b0:	cs fs ins BYTE PTR es:[rdi],dx
 100d4b3:	ins    BYTE PTR es:[rdi],dx
 100d4b4:	add    BYTE PTR [rax],al
 100d4b6:	push   0x65724601
 100d4bb:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 100d4c4:	rex.WR add r8b,BYTE PTR [rdi+0x65]
 100d4c8:	je     0x100d51a
 100d4ca:	jb     0x100d53b
 100d4cc:	movsxd eax,DWORD PTR [rcx+0x64]
 100d4cf:	fs jb  0x100d537
 100d4d2:	jae    0x100d547
 100d4d4:	add    BYTE PTR [rax],al
 100d4d6:	or     BYTE PTR [rdx],al
 100d4d8:	rex.RXB
 100d4d9:	gs je  0x100d528
 100d4dc:	(bad)  
 100d4dd:	jae    0x100d553
 100d4df:	rex.RB jb 0x100d554
 100d4e2:	outs   dx,DWORD PTR ds:[rsi]
 100d4e3:	jb     0x100d4e5
 100d4e5:	add    al,al
 100d4e7:	add    al,0x53
 100d4e9:	ins    BYTE PTR es:[rdi],dx
 100d4ea:	gs gs jo 0x100d4ee
 100d4ee:	(bad)  
 100d4ef:	add    al,BYTE PTR [rdi+0x65]
 100d4f2:	je     0x100d548
 100d4f4:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 100d4fb:	je     0x100d4fd
 100d4fd:	add    BYTE PTR [rcx+0x3],al
 100d500:	rex.WR outs dx,DWORD PTR ds:[rsi]
 100d502:	(bad)  
 100d503:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 100d50c:	add    BYTE PTR [rax],al
 100d50e:	ja     0x100d512
 100d510:	rex.RXB
 100d511:	gs je  0x100d567
 100d514:	jns    0x100d589
 100d516:	je     0x100d57d
 100d518:	ins    DWORD PTR es:[rdi],dx
 100d519:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 100d521:	jns    0x100d57a
 100d523:	add    BYTE PTR [rdx+0x3],cl
 100d526:	rex.WR outs dx,DWORD PTR ds:[rsi]
 100d528:	movsxd esp,DWORD PTR [rcx+0x6c]
 100d52b:	rex.RX jb 0x100d593
 100d52e:	add    BYTE PTR gs:[rcx+rax*1+0x46],ah
 100d533:	outs   dx,DWORD PTR ds:[rsi]
 100d534:	jb     0x100d5a3
 100d536:	(bad)  
 100d537:	je     0x100d586
 100d539:	gs jae 0x100d5af
 100d53c:	(bad)  
 100d53d:	addr32 gs push rdi
 100d540:	add    BYTE PTR [rax],al
 100d542:	xchg   ebp,eax
 100d543:	add    DWORD PTR [rdi+0x65],eax
 100d546:	je     0x100d58b
 100d548:	outs   dx,DWORD PTR ds:[rsi]
 100d549:	ins    DWORD PTR es:[rdi],dx
 100d54a:	jo     0x100d5c1
 100d54c:	je     0x100d5b3
 100d54e:	jb     0x100d59e
 100d550:	(bad)  
 100d551:	ins    DWORD PTR es:[rdi],dx
 100d552:	gs push rdi
 100d554:	add    BYTE PTR [rax],al
 100d556:	lods   al,BYTE PTR ds:[rsi]
 100d557:	add    al,BYTE PTR [rdi+0x65]
 100d55a:	je     0x100d5b2
 100d55c:	gs jb  0x100d5d2
 100d55f:	imul   ebp,DWORD PTR [rdi+0x6e],0x577845
 100d566:	rex.WXB
 100d567:	rex.RB push r10
 100d569:	rex.WRX
 100d56a:	rex.RB
 100d56b:	xor    r14,QWORD PTR [rdx]
 100d56e:	cs fs ins BYTE PTR es:[rdi],dx
 100d571:	ins    BYTE PTR es:[rdi],dx
 100d572:	add    BYTE PTR [rax],al
 100d574:	rex.WRXB add al,0x5f
 100d577:	jne    0x100d5e5
 100d579:	je     0x100d5ea
 100d57b:	ja     0x100d57d
 100d57d:	add    BYTE PTR [rsi],bl
 100d57f:	add    eax,0x6f74775f
 100d584:	imul   eax,DWORD PTR [rax],0x6377061b
 100d58a:	jae    0x100d5fa
 100d58c:	movsxd esp,DWORD PTR [rcx+0x74]
 100d58f:	pop    rdi
 100d590:	jae    0x100d592
 100d592:	(bad)  
 100d593:	(bad)  
 100d594:	ja     0x100d5f9
 100d596:	jae    0x100d606
 100d598:	movsxd esi,DWORD PTR [rax+0x79]
 100d59b:	pop    rdi
 100d59c:	jae    0x100d59e
 100d59e:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100d59f:	add    al,0x5f
 100d5a1:	ja     0x100d606
 100d5a3:	jae    0x100d60e
 100d5a5:	movsxd ebp,DWORD PTR [rbp+0x70]
 100d5a8:	add    BYTE PTR [rax],al
 100d5aa:	lods   eax,DWORD PTR ds:[rsi]
 100d5ab:	add    eax,0x736d656d
 100d5b0:	gs je  0x100d5b3
 100d5b3:	add    BYTE PTR [rbx+0x0],ah
 100d5b6:	(bad)  
 100d5b7:	(bad)  
 100d5b8:	xor    al,BYTE PTR [rax+0x59]
 100d5bb:	push   r8
 100d5bd:	rex.RB
 100d5be:	pop    r8
 100d5c0:	pop    rdi
 100d5c1:	rex.WXB
 100d5c2:	rex pop rdx
 100d5c4:	add    BYTE PTR [rax],al
 100d5c6:	add    BYTE PTR gs:[rdi],bh
 100d5c9:	(bad)  
 100d5ca:	xor    eax,DWORD PTR [rax+0x59]
 100d5cd:	pop    r8
 100d5cf:	push   rax
 100d5d0:	rex.RB
 100d5d1:	pop    r8
 100d5d3:	rex pop rdx
 100d5d5:	add    BYTE PTR [rbx],dh
 100d5d7:	(bad)  
 100d5d8:	ja     0x100d64a
 100d5da:	jb     0x100d645
 100d5dc:	outs   dx,BYTE PTR ds:[rsi]
 100d5dd:	je     0x100d645
 100d5df:	add    BYTE PTR [rbp+0x73765f04],al
 100d5e5:	outs   dx,BYTE PTR ds:[rsi]
 100d5e6:	ja     0x100d658
 100d5e8:	jb     0x100d653
 100d5ea:	outs   dx,BYTE PTR ds:[rsi]
 100d5eb:	je     0x100d653
 100d5ed:	add    cl,ch
 100d5ef:	add    bl,BYTE PTR [rdi+0x69]
 100d5f2:	je     0x100d663
 100d5f4:	ja     0x100d655
 100d5f6:	jae    0x100d5f8
 100d5f8:	adc    DWORD PTR [rsi],eax
 100d5fa:	ja     0x100d65f
 100d5fc:	jae    0x100d661
 100d5fe:	(bad)  
 100d5ff:	je     0x100d660
 100d601:	jae    0x100d603
 100d603:	add    BYTE PTR [rdx],dl
 100d605:	(bad)  
 100d606:	ja     0x100d66b
 100d608:	jae    0x100d66d
 100d60a:	push   0x16000072
 100d60f:	(bad)  
 100d610:	ja     0x100d675
 100d612:	jae    0x100d677
 100d614:	jo     0x100d68f
 100d616:	pop    rdi
 100d617:	jae    0x100d619
 100d619:	add    BYTE PTR [rdi+0x5],al
 100d61c:	imul   esi,DWORD PTR fs:[rsi+0x0],0x72660563
 100d624:	gs add BYTE PTR gs:[rax],al
 100d628:	sahf   
 100d629:	add    eax,0x6c6c616d
 100d62e:	outs   dx,DWORD PTR ds:[rsi]
 100d62f:	movsxd eax,DWORD PTR [rax]
 100d631:	add    BYTE PTR [rsi+0x6d615f01],bl
 100d637:	jae    0x100d6a0
 100d639:	pop    rdi
 100d63a:	gs js  0x100d6a6
 100d63d:	je     0x100d63f
 100d63f:	add    BYTE PTR [rax+0x775f5f01],dl
 100d645:	addr32 gs je 0x100d6b6
 100d649:	(bad)  
 100d64a:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 100d651:	add    BYTE PTR [rsi],bl
 100d653:	add    DWORD PTR [rdi+0x5f],ebx
 100d656:	rex.XB pop r15
 100d658:	jae    0x100d6ca
 100d65a:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 100d65e:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 100d665:	ins    BYTE PTR es:[rdi],dx
 100d666:	gs jb  0x100d669
 100d669:	add    BYTE PTR [rdx],bl
 100d66b:	add    DWORD PTR [rdi+0x58],ebx
 100d66e:	movsxd esi,DWORD PTR [rax+0x74]
 100d671:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 100d67a:	pop    rdi
 100d67b:	gs js  0x100d6e7
 100d67e:	je     0x100d680
 100d680:	mov    ch,0x1
 100d682:	pop    rdi
 100d683:	movsxd esp,DWORD PTR [rbp+0x78]
 100d686:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 100d68e:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0191
 100d696:	ja     0x100d701
 100d698:	outs   dx,BYTE PTR ds:[rsi]
 100d699:	imul   esi,DWORD PTR [rbp+riz*2+0x6e],0x86000076
 100d6a1:	add    bl,BYTE PTR [rdi+0x69]
 100d6a4:	outs   dx,BYTE PTR ds:[rsi]
 100d6a5:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 100d6ad:	add    bl,BYTE PTR [rdi+0x69]
 100d6b0:	outs   dx,BYTE PTR ds:[rsi]
 100d6b1:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 100d6b9:	add    ch,al
 100d6bb:	add    DWORD PTR [rdi+0x63],ebx
 100d6be:	outs   dx,DWORD PTR ds:[rsi]
 100d6bf:	outs   dx,BYTE PTR ds:[rsi]
 100d6c0:	imul   sp,WORD PTR [rdi+0x74],0x7268
 100d6c6:	gs (bad) 
 100d6c8:	fs ins BYTE PTR es:[rdi],dx
 100d6ca:	outs   dx,DWORD PTR ds:[rsi]
 100d6cb:	movsxd esp,DWORD PTR [rcx+0x6c]
 100d6ce:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 100d6d3:	pop    rdi
 100d6d4:	jae    0x100d73b
 100d6d6:	je     0x100d74d
 100d6d8:	jae    0x100d73f
 100d6da:	jb     0x100d749
 100d6dc:	(bad)  
 100d6dd:	je     0x100d747
 100d6df:	gs jb  0x100d754
 100d6e2:	add    BYTE PTR [rax],al
 100d6e4:	(bad)
 100d6e8:	outs   dx,DWORD PTR ds:[rsi]
 100d6e9:	ins    DWORD PTR es:[rdi],dx
 100d6ea:	ins    DWORD PTR es:[rdi],dx
 100d6eb:	outs   dx,DWORD PTR ds:[rsi]
 100d6ec:	fs add BYTE PTR gs:[rax],al
 100d6f0:	sbb    al,0x2
 100d6f2:	pop    rdi
 100d6f3:	ins    WORD PTR es:[rdi],dx
 100d6f5:	outs   dx,DWORD PTR ds:[rsi]
 100d6f6:	fs add BYTE PTR gs:[rax],al
 100d6fa:	jns    0x100d6fd
 100d6fc:	pop    rdi
 100d6fd:	pop    rdi
 100d6fe:	jae    0x100d765
 100d700:	je     0x100d761
 100d702:	(bad)  
 100d703:	jo     0x100d775
 100d705:	pop    rdi
 100d706:	je     0x100d781
 100d708:	jo     0x100d76f
 100d70a:	add    BYTE PTR [rax],al
 100d70c:	rex.WRB push r11
 100d70e:	push   rsi
 100d70f:	rex.XB push r10
 100d711:	xor    DWORD PTR [rax],esi
 100d713:	xor    BYTE PTR [rsi],ch
 100d715:	fs ins BYTE PTR es:[rdi],dx
 100d717:	ins    BYTE PTR es:[rdi],dx
 100d718:	add    BYTE PTR [rax],al
 100d71a:	add    BYTE PTR [rcx],al
 100d71c:	(bad)  
 100d71d:	je     0x100d784
 100d71f:	jb     0x100d78e
 100d721:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 100d728:	pop    rcx
 100d729:	pop    r8
 100d72b:	pop    rax
 100d72c:	pop    rdx
 100d72d:	add    BYTE PTR [rbx+0x4],bl
 100d730:	pop    rdi
 100d731:	jne    0x100d7a1
 100d733:	ins    BYTE PTR es:[rdi],dx
 100d734:	outs   dx,DWORD PTR ds:[rsi]
 100d735:	movsxd ebp,DWORD PTR [rbx+0x0]
 100d738:	add    QWORD PTR [rdi+0x5f],rbx
 100d73c:	fs ins BYTE PTR es:[rdi],dx
 100d73e:	ins    BYTE PTR es:[rdi],dx
 100d73f:	outs   dx,DWORD PTR ds:[rsi]
 100d740:	outs   dx,BYTE PTR ds:[rsi]
 100d741:	gs js  0x100d7ad
 100d744:	je     0x100d746
 100d746:	test   BYTE PTR [rdx],0x5f
 100d749:	ins    BYTE PTR es:[rdi],dx
 100d74a:	outs   dx,DWORD PTR ds:[rsi]
 100d74b:	movsxd ebp,DWORD PTR [rbx+0x0]
 100d74e:	popf   
 100d74f:	add    ebx,DWORD PTR [rdi+0x6f]
 100d752:	outs   dx,BYTE PTR ds:[rsi]
 100d753:	gs js  0x100d7bf
 100d756:	je     0x100d758
 100d758:	rex.RX add DWORD PTR [rdi+0x5f],r11d
 100d75c:	movsxd esi,DWORD PTR [rdx+0x74]
 100d75f:	pop    rdi
 100d760:	fs gs (bad) 
 100d763:	jne    0x100d7cc
 100d765:	addr32 gs jb 0x100d7c8
 100d769:	push   0x6b6f6f
 100d76e:	rex.WRXB
 100d76f:	rex.WR
 100d770:	rex.RB
 100d771:	push   r13
 100d773:	push   rsp
 100d774:	xor    esi,DWORD PTR [rdx]
 100d776:	cs fs ins BYTE PTR es:[rdi],dx
 100d779:	ins    BYTE PTR es:[rdi],dx
 100d77a:	add    BYTE PTR [rax],al
 100d77c:	rex.X add BYTE PTR [rbx+0x6f],al
 100d780:	rex.WB outs dx,BYTE PTR ds:[rsi]
 100d782:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 100d78a:	add    BYTE PTR [rax],al
 100d78c:	jo     0x100d78e
 100d78e:	rex.XB outs dx,DWORD PTR ds:[rsi]
 100d790:	push   rbp
 100d791:	outs   dx,BYTE PTR ds:[rsi]
 100d792:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
 100d799:	imul   edi,DWORD PTR [rdx+0x65],0x140000
 100d7a0:	rex.XB outs dx,DWORD PTR ds:[rsi]
 100d7a2:	rex.XB jb 0x100d80a
 100d7a5:	(bad)  
 100d7a6:	je     0x100d80d
 100d7a8:	rex.WB outs dx,BYTE PTR ds:[rsi]
 100d7aa:	jae    0x100d820
 100d7ac:	(bad)  
 100d7ad:	outs   dx,BYTE PTR ds:[rsi]
 100d7ae:	movsxd esp,DWORD PTR [rbp+0x0]
 100d7b1:	add    BYTE PTR [rdi+0x6c],ch
 100d7b4:	xor    esi,DWORD PTR gs:[rdx]
 100d7b7:	cs fs ins BYTE PTR es:[rdi],dx
 100d7ba:	ins    BYTE PTR es:[rdi],dx
 100d7bb:	add    BYTE PTR [rbp+0x74654e00],dl
 100d7c1:	rex.RXB
 100d7c2:	gs je  0x100d806
 100d7c5:	outs   dx,BYTE PTR ds:[rsi]
 100d7c6:	jns    0x100d80c
 100d7c8:	rex.XB
 100d7c9:	rex.WRX (bad) 
 100d7cb:	ins    DWORD PTR es:[rdi],dx
 100d7cc:	add    BYTE PTR gs:[rbp+0x0],ah
 100d7d0:	rex.WRX
 100d7d1:	gs je  0x100d815
 100d7d4:	jo     0x100d83f
 100d7d6:	rex.X jne 0x100d83f
 100d7d9:	data16 gs jb 0x100d823
 100d7dd:	jb     0x100d844
 100d7df:	add    BYTE PTR gs:[rax],al
 100d7e2:	rex.WRX
 100d7e3:	rex.RB push r12
 100d7e5:	push   r8
 100d7e7:	xor    rsi,QWORD PTR [r10]
 100d7ea:	cs fs ins BYTE PTR es:[rdi],dx
 100d7ed:	ins    BYTE PTR es:[rdi],dx
 100d7ee:	add    BYTE PTR [rax],al
 100d7f0:	add    dl,BYTE PTR fs:[rdx+0x65]
 100d7f4:	addr32 rex.WRXB jo 0x100d85d
 100d7f8:	outs   dx,BYTE PTR ds:[rsi]
 100d7f9:	rex.WXB
 100d7fa:	gs jns 0x100d854
 100d7fd:	add    dh,ch
 100d7ff:	add    BYTE PTR [rbp+0x6e],al
 100d802:	movsxd ebp,DWORD PTR [rdi+0x64]
 100d805:	gs push rax
 100d807:	outs   dx,DWORD PTR ds:[rsi]
 100d808:	imul   ebp,DWORD PTR [rsi+0x74],0xb3007265
 100d80f:	add    al,0x53
 100d811:	gs je  0x100d869
 100d814:	outs   dx,BYTE PTR ds:[rsi]
 100d815:	push   0x6c646e61
 100d81a:	gs fs rex.RB js 0x100d882
 100d81f:	gs jo  0x100d896
 100d822:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 100d829:	gs jb  0x100d82c
 100d82c:	retf   
 100d82d:	add    BYTE PTR [rbp+riz*2+0x63],al
 100d831:	outs   dx,DWORD PTR ds:[rsi]
 100d832:	fs gs push rax
 100d835:	outs   dx,DWORD PTR ds:[rsi]
 100d836:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 100d83d:	add    edx,DWORD PTR [rcx+0x75]
 100d840:	gs jb  0x100d8bc
 100d843:	push   rax
 100d844:	gs jb  0x100d8ad
 100d847:	outs   dx,DWORD PTR ds:[rsi]
 100d848:	jb     0x100d8b7
 100d84a:	(bad)  
 100d84b:	outs   dx,BYTE PTR ds:[rsi]
 100d84c:	movsxd esp,DWORD PTR [rbp+0x43]
 100d84f:	outs   dx,DWORD PTR ds:[rsi]
 100d850:	jne    0x100d8c0
 100d852:	je     0x100d8b9
 100d854:	jb     0x100d856
 100d856:	retf   
 100d857:	add    DWORD PTR [rdi+0x65],eax
 100d85a:	je     0x100d89f
 100d85c:	jne    0x100d8d0
 100d85e:	jb     0x100d8c5
 100d860:	outs   dx,BYTE PTR ds:[rsi]
 100d861:	je     0x100d8b7
 100d863:	push   0x64616572
 100d868:	rex.WB
 100d869:	add    BYTE PTR fs:[rax],al
 100d86c:	mov    DWORD PTR [rcx],0x43746547
 100d872:	jne    0x100d8e6
 100d874:	jb     0x100d8db
 100d876:	outs   dx,BYTE PTR ds:[rsi]
 100d877:	je     0x100d8c9
 100d879:	jb     0x100d8ea
 100d87b:	movsxd esp,DWORD PTR [rbp+0x73]
 100d87e:	jae    0x100d8c9
 100d880:	add    BYTE PTR fs:[rax+0x74654702],al
 100d887:	push   rbx
 100d888:	jns    0x100d8fd
 100d88a:	je     0x100d8f1
 100d88c:	ins    DWORD PTR es:[rdi],dx
 100d88d:	push   rsp
 100d88e:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 100d895:	ins    BYTE PTR es:[rdi],dx
 100d896:	gs push rsp
 100d898:	imul   ebp,DWORD PTR [rbp+0x65],0x5404ce00
 100d89f:	gs jb  0x100d90f
 100d8a2:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 100d8a9:	outs   dx,DWORD PTR ds:[rsi]
 100d8aa:	movsxd esp,DWORD PTR [rbp+0x73]
 100d8ad:	jae    0x100d8af
 100d8af:	add    dh,al
 100d8b1:	add    DWORD PTR [rdi+0x65],eax
 100d8b4:	je     0x100d8f9
 100d8b6:	jne    0x100d92a
 100d8b8:	jb     0x100d91f
 100d8ba:	outs   dx,BYTE PTR ds:[rsi]
 100d8bb:	je     0x100d90d
 100d8bd:	jb     0x100d92e
 100d8bf:	movsxd esp,DWORD PTR [rbp+0x73]
 100d8c2:	jae    0x100d8c4
 100d8c4:	loop   0x100d8ca
 100d8c6:	push   rbp
 100d8c7:	outs   dx,BYTE PTR ds:[rsi]
 100d8c8:	push   0x6c646e61
 100d8cd:	gs fs rex.RB js 0x100d935
 100d8d2:	gs jo  0x100d949
 100d8d5:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 100d8dc:	gs jb  0x100d8df
 100d8df:	add    BYTE PTR [rdx],al
 100d8e1:	add    ecx,DWORD PTR [rcx+0x73]
 100d8e4:	rex.R
 100d8e5:	gs (bad) 
 100d8e7:	jne    0x100d950
 100d8e9:	addr32 gs jb 0x100d93d
 100d8ed:	jb     0x100d954
 100d8ef:	jae    0x100d956
 100d8f1:	outs   dx,BYTE PTR ds:[rsi]
 100d8f2:	je     0x100d8f4
 100d8f4:	es add al,0x52
 100d8f7:	je     0x100d965
 100d8f9:	push   rsi
 100d8fa:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 100d901:	outs   dx,BYTE PTR ds:[rsi]
 100d902:	ja     0x100d96d
 100d904:	outs   dx,BYTE PTR ds:[rsi]
 100d905:	add    BYTE PTR fs:[rax],al
 100d908:	(bad)  
 100d909:	add    al,0x52
 100d90b:	je     0x100d979
 100d90d:	rex.WR outs dx,DWORD PTR ds:[rsi]
 100d90f:	outs   dx,DWORD PTR ds:[rsi]
 100d910:	imul   esi,DWORD PTR [rbp+0x70],0x46
 100d914:	jne    0x100d984
 100d916:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 100d91a:	outs   dx,BYTE PTR ds:[rsi]
 100d91b:	rex.RB outs dx,BYTE PTR ds:[rsi]
 100d91d:	je     0x100d991
 100d91f:	jns    0x100d921
 100d921:	add    BYTE PTR [rax],bl
 100d923:	add    al,0x52
 100d925:	je     0x100d993
 100d927:	rex.XB (bad) 
 100d929:	jo     0x100d99f
 100d92b:	jne    0x100d99f
 100d92d:	rex.XB outs dx,DWORD PTR gs:[rsi]
 100d930:	outs   dx,BYTE PTR ds:[rsi]
 100d931:	je     0x100d998
 100d933:	js     0x100d9a9
 100d935:	add    BYTE PTR [rbp+0x4],ah
 100d938:	push   rbx
 100d939:	gs je  0x100d981
 100d93c:	outs   dx,BYTE PTR ds:[rsi]
 100d93d:	jbe    0x100d9a8
 100d93f:	jb     0x100d9b0
 100d941:	outs   dx,BYTE PTR ds:[rsi]
 100d942:	ins    DWORD PTR es:[rdi],dx
 100d943:	outs   dx,BYTE PTR gs:[rsi]
 100d945:	je     0x100d99d
 100d947:	(bad)  
 100d948:	jb     0x100d9b3
 100d94a:	(bad)  
 100d94b:	(bad)  
 100d94c:	ins    BYTE PTR es:[rdi],dx
 100d94d:	gs push rdi
 100d94f:	add    bl,ah
 100d951:	add    DWORD PTR [rdi+0x65],eax
 100d954:	je     0x100d99b
 100d956:	outs   dx,BYTE PTR ds:[rsi]
 100d957:	jbe    0x100d9c2
 100d959:	jb     0x100d9ca
 100d95b:	outs   dx,BYTE PTR ds:[rsi]
 100d95c:	ins    DWORD PTR es:[rdi],dx
 100d95d:	outs   dx,BYTE PTR gs:[rsi]
 100d95f:	je     0x100d9b7
 100d961:	(bad)  
 100d962:	jb     0x100d9cd
 100d964:	(bad)  
 100d965:	(bad)  
 100d966:	ins    BYTE PTR es:[rdi],dx
 100d967:	gs push rdi
 100d969:	add    BYTE PTR [rax+rax*1+0x43],ah
 100d96d:	outs   dx,DWORD PTR ds:[rsi]
 100d96e:	ins    DWORD PTR es:[rdi],dx
 100d96f:	jo     0x100d9d2
 100d971:	jb     0x100d9d8
 100d973:	push   rbx
 100d974:	je     0x100d9e8
 100d976:	imul   ebp,DWORD PTR [rsi+0x67],0xd3000057
 100d97d:	add    cl,BYTE PTR [rax+0x65]
 100d980:	(bad)  
 100d981:	jo     0x100d9c4
 100d983:	ins    BYTE PTR es:[rdi],dx
 100d984:	ins    BYTE PTR es:[rdi],dx
 100d985:	outs   dx,DWORD PTR ds:[rsi]
 100d986:	movsxd eax,DWORD PTR [rax]
 100d988:	xlat   BYTE PTR ds:[rbx]
 100d989:	add    cl,BYTE PTR [rax+0x65]
 100d98c:	(bad)  
 100d98d:	jo     0x100d9d5
 100d98f:	jb     0x100d9f6
 100d991:	add    BYTE PTR gs:[rax],al
 100d994:	fiadd  DWORD PTR [rdx]
 100d996:	rex.W
 100d997:	gs (bad) 
 100d999:	jo     0x100d9ed
 100d99b:	gs rex.B ins BYTE PTR es:[rdi],dx
 100d99e:	ins    BYTE PTR es:[rdi],dx
 100d99f:	outs   dx,DWORD PTR ds:[rsi]
 100d9a0:	movsxd eax,DWORD PTR [rax]
 100d9a2:	push   rcx
 100d9a3:	add    al,BYTE PTR [rdi+0x65]
 100d9a6:	je     0x100d9f8
 100d9a8:	jb     0x100da19
 100d9aa:	movsxd esp,DWORD PTR [rbp+0x73]
 100d9ad:	jae    0x100d9f7
 100d9af:	gs (bad) 
 100d9b1:	jo     0x100d9b3
 100d9b3:	add    BYTE PTR [rcx+0x5],ah
 100d9b6:	ins    BYTE PTR es:[rdi],dx
 100d9b7:	jae    0x100da2d
 100d9b9:	jb     0x100da27
 100d9bb:	outs   dx,BYTE PTR gs:[rsi]
 100d9bd:	push   rdi
 100d9be:	add    BYTE PTR [rax],al
 100d9c0:	(bad)  
 100d9c1:	add    al,BYTE PTR [rdi+0x65]
 100d9c4:	je     0x100da13
 100d9c6:	outs   dx,DWORD PTR ds:[rsi]
 100d9c7:	fs jne 0x100da36
 100d9ca:	gs rex.W (bad) 
 100d9cd:	outs   dx,BYTE PTR ds:[rsi]
 100d9ce:	fs ins BYTE PTR es:[rdi],dx
 100d9d0:	gs push rdi
 100d9d2:	add    BYTE PTR [rax],al
 100d9d4:	add    BYTE PTR [rip+0x74726956],al        # 0x75734330
 100d9da:	jne    0x100da3d
 100d9dc:	ins    BYTE PTR es:[rdi],dx
 100d9dd:	push   rcx
 100d9de:	jne    0x100da45
 100d9e0:	jb     0x100da5b
 100d9e2:	add    BYTE PTR [rax],al
 100d9e4:	add    BYTE PTR [rbx+rdx*2],0x65
 100d9e8:	je     0x100da36
 100d9ea:	(bad)  
 100d9eb:	jae    0x100da61
 100d9ed:	rex.RB jb 0x100da62
 100d9f0:	outs   dx,DWORD PTR ds:[rsi]
 100d9f1:	jb     0x100d9f3
 100d9f3:	add    al,cl
 100d9f5:	add    BYTE PTR [rbp+riz*2+0x62],al
 100d9f9:	jne    0x100da62
 100d9fb:	rex.X jb 0x100da63
 100d9fe:	(bad)  
 100d9ff:	imul   eax,DWORD PTR [rax],0x0
 100da02:	sbb    al,BYTE PTR [rdx]
 100da04:	rex.RXB
 100da05:	gs je  0x100da55
 100da08:	outs   dx,DWORD PTR ds:[rsi]
 100da09:	fs jne 0x100da78
 100da0c:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 100da16:	add    BYTE PTR [rax],al
 100da18:	and    eax,DWORD PTR [rcx]
 100da1a:	rex.RB js 0x100da8d
 100da1d:	(bad)  
 100da1e:	outs   dx,BYTE PTR ds:[rsi]
 100da1f:	rex.RB outs dx,BYTE PTR fs:[rsi]
 100da22:	jbe    0x100da8d
 100da24:	jb     0x100da95
 100da26:	outs   dx,BYTE PTR ds:[rsi]
 100da27:	ins    DWORD PTR es:[rdi],dx
 100da28:	outs   dx,BYTE PTR gs:[rsi]
 100da2a:	je     0x100da7f
 100da2c:	je     0x100daa0
 100da2e:	imul   ebp,DWORD PTR [rsi+0x67],0x49005773
 100da35:	add    al,BYTE PTR [rdi+0x65]
 100da38:	je     0x100da8a
 100da3a:	jb     0x100daa5
 100da3c:	jbe    0x100da9f
 100da3e:	je     0x100daa5
 100da40:	push   rax
 100da41:	jb     0x100dab2
 100da43:	imul   bp,WORD PTR [rbp+riz*2+0x53],0x7274
 100da4a:	imul   ebp,DWORD PTR [rsi+0x67],0xf1000057
 100da51:	add    DWORD PTR [rdi+0x65],eax
 100da54:	je     0x100da9c
 100da56:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
 100da5e:	(bad)  
 100da5f:	jne    0x100dad5
 100da61:	gs jae 0x100dabb
 100da64:	add    BYTE PTR [rax],al
 100da66:	add    r9d,DWORD PTR [rdi+r13*2+0x63]
 100da6b:	(bad)  
 100da6c:	ins    BYTE PTR es:[rdi],dx
 100da6d:	rex.B ins BYTE PTR es:[rdi],dx
 100da6f:	ins    BYTE PTR es:[rdi],dx
 100da70:	outs   dx,DWORD PTR ds:[rsi]
 100da71:	movsxd eax,DWORD PTR [rax]
 100da73:	add    BYTE PTR [rsi],bh
 100da75:	add    ecx,DWORD PTR [rdi+rbp*2+0x61]
 100da79:	imul   r12,QWORD PTR fs:[rdx+0x72],0x41797261
 100da82:	add    BYTE PTR [rax],al
 100da84:	mov    ah,0x3
 100da86:	push   rdx
 100da87:	(bad)  
 100da88:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 100da8f:	jo     0x100db05
 100da91:	imul   ebp,DWORD PTR [rdi+0x6e],0x4380000
 100da98:	pop    rdi
 100da99:	jae    0x100db12
 100da9b:	jae    0x100db00
 100da9d:	(bad)  
 100da9e:	outs   dx,BYTE PTR ds:[rsi]
 100da9f:	pop    di
 100daa1:	jae    0x100db02
 100daa3:	ins    BYTE PTR es:[rdi],dx
 100daa4:	add    BYTE PTR [rax],al
 100daa6:	test   eax,0x6d656d05
 100daab:	movsxd esi,DWORD PTR [rax+0x79]
	...

Disassembly of section .data:

000000000100e000 <.data>:
 100e000:	add    BYTE PTR [rax],al
 100e002:	add    BYTE PTR [rax],al
 100e004:	add    BYTE PTR [rcx],al
	...
 100e0fe:	add    BYTE PTR [rax],al
 100e100:	rex.WRB add BYTE PTR [r11+0x0],r10b
 100e104:	push   rbx
 100e105:	add    BYTE PTR [rcx+0x0],dl
 100e108:	rex.WR add BYTE PTR [rbx+0x0],r10b
 100e10c:	add    BYTE PTR gs:[rdx+0x0],dh
 100e110:	jbe    0x100e112
 100e112:	add    BYTE PTR gs:[rdx+0x0],dh
 100e116:	add    BYTE PTR [r8+rax*1+0x48],al
 100e11b:	add    BYTE PTR [rbp+0x0],ah
 100e11e:	ins    BYTE PTR es:[rdi],dx
 100e11f:	add    BYTE PTR [rax+0x0],dh
 100e122:	add    BYTE PTR gs:[rdx+0x0],dh
 100e126:	xor    DWORD PTR [rax],eax
 100e128:	xor    DWORD PTR [rax],eax
 100e12a:	xor    BYTE PTR [rax],al
 100e12c:	add    BYTE PTR [rax],al
 100e12e:	add    BYTE PTR [rax],al
 100e130:	rex.WR add BYTE PTR [rdi+0x0],r13b
 100e134:	movsxd eax,DWORD PTR [rax]
 100e136:	(bad)  
 100e137:	add    BYTE PTR [rax+rax*1+0x53],ch
 100e13b:	add    BYTE PTR [rcx+0x0],bh
 100e13e:	jae    0x100e140
 100e140:	je     0x100e142
 100e142:	add    BYTE PTR gs:[rbp+0x0],ch
 100e146:	add    BYTE PTR [rax],al
 100e148:	push   rbx
 100e149:	add    BYTE PTR [rbp+0x0],ah
 100e14c:	jb     0x100e14e
 100e14e:	jbe    0x100e150
 100e150:	imul   eax,DWORD PTR [rax],0x650063
 100e156:	and    BYTE PTR [rax],al
 100e158:	add    BYTE PTR [r11+0x0],spl
 100e15c:	movsxd eax,DWORD PTR [rax]
 100e15e:	outs   dx,DWORD PTR ds:[rsi]
 100e15f:	add    BYTE PTR [rbp+0x0],dh
 100e162:	outs   dx,BYTE PTR ds:[rsi]
 100e163:	add    BYTE PTR [rax+rax*1+0x0],dh
 100e167:	add    BYTE PTR [rax+rax*1+0x58],bl
 100e16b:	add    BYTE PTR [rax+0x0],dl
 100e16e:	add    BYTE PTR [r8+rax*1+0x53],al
 100e173:	add    BYTE PTR [rcx+0x0],cl
 100e176:	add    BYTE PTR [rax],al
 100e178:	add    BYTE PTR [rbp+0x0],r12b
 100e17c:	(bad)  
 100e17d:	add    BYTE PTR [rbp+0x0],dh
 100e180:	add    BYTE PTR [eax],al
 100e183:	add    BYTE PTR [rax],al
 100e185:	add    BYTE PTR [rax],al
 100e187:	add    BYTE PTR [rax+rax*1+0x4d],bl
 100e18b:	add    BYTE PTR [rbx+0x0],dl
 100e18e:	push   rbx
 100e18f:	add    BYTE PTR [rcx+0x0],dl
 100e192:	rex.WR add BYTE PTR [rbx+0x0],r10b
 100e196:	add    BYTE PTR gs:[rdx+0x0],dh
 100e19a:	jbe    0x100e19c
 100e19c:	add    BYTE PTR gs:[rdx+0x0],dh
 100e1a0:	pop    rsp
 100e1a1:	add    BYTE PTR [rbx+0x0],al
 100e1a4:	jne    0x100e1a6
 100e1a6:	jb     0x100e1a8
 100e1a8:	jb     0x100e1aa
 100e1aa:	add    BYTE PTR gs:[rsi+0x0],ch
 100e1ae:	je     0x100e1b0
 100e1b0:	push   rsi
 100e1b1:	add    BYTE PTR [rbp+0x0],ah
 100e1b4:	jb     0x100e1b6
 100e1b6:	jae    0x100e1b8
 100e1b8:	imul   eax,DWORD PTR [rax],0x6e006f
 100e1be:	add    BYTE PTR [rax],al
 100e1c0:	rex.WR add BYTE PTR [rcx+0x0],r12b
 100e1c4:	outs   dx,BYTE PTR ds:[rsi]
 100e1c5:	add    BYTE PTR [rdi+0x0],ah
 100e1c8:	jne    0x100e1ca
 100e1ca:	(bad)  
 100e1cb:	add    BYTE PTR [rdi+0x0],ah
 100e1ce:	add    BYTE PTR gs:[rax],al
 100e1d1:	add    BYTE PTR [rax],al
 100e1d3:	add    BYTE PTR [rax],al
 100e1d5:	add    BYTE PTR [rax],al
 100e1d7:	add    BYTE PTR [rax+rax*1+0x69],dl
 100e1db:	add    BYTE PTR [rbp+0x0],ch
 100e1de:	add    BYTE PTR gs:[rdi+0x0],cl
 100e1e2:	jne    0x100e1e4
 100e1e4:	je     0x100e1e6
	...
 100e1ee:	add    BYTE PTR [rax],al
 100e1f0:	sbb    al,0x1d
 100e1f2:	add    BYTE PTR [rcx],al
 100e1f4:	add    BYTE PTR [rax],al
 100e1f6:	add    BYTE PTR [rax],al
 100e1f8:	add    al,BYTE PTR [rax]
 100e1fa:	add    BYTE PTR [rax],al
 100e1fc:	add    eax,DWORD PTR [rax]
 100e1fe:	add    BYTE PTR [rax],al
 100e200:	rex clc 
 100e202:	add    BYTE PTR [rcx],al
 100e204:	add    BYTE PTR [rax],al
 100e206:	add    BYTE PTR [rax],al
 100e208:	add    DWORD PTR [rax],eax
 100e20a:	add    BYTE PTR [rax],al
 100e20c:	add    BYTE PTR [rax],al
 100e20e:	add    BYTE PTR [rax],al
 100e210:	rcr    BYTE PTR [rax],1
 100e212:	add    BYTE PTR [rcx],al
 100e214:	add    BYTE PTR [rax],al
 100e216:	add    BYTE PTR [rax],al
 100e218:	add    al,BYTE PTR [rax]
 100e21a:	add    BYTE PTR [rax],al
 100e21c:	add    eax,DWORD PTR [rax]
 100e21e:	add    BYTE PTR [rax],al
 100e220:	pop    rax
 100e221:	clc    
 100e222:	add    BYTE PTR [rcx],al
 100e224:	add    BYTE PTR [rax],al
 100e226:	add    BYTE PTR [rax],al
 100e228:	add    DWORD PTR [rax],eax
 100e22a:	add    BYTE PTR [rax],al
 100e22c:	add    BYTE PTR [rax],al
 100e22e:	add    BYTE PTR [rax],al
 100e230:	mov    eax,0x10018
 100e235:	add    BYTE PTR [rax],al
 100e237:	add    BYTE PTR [rdx],al
 100e239:	add    BYTE PTR [rax],al
 100e23b:	add    BYTE PTR [rbx],al
 100e23d:	add    BYTE PTR [rax],al
 100e23f:	add    BYTE PTR [rax-0x7],ah
 100e242:	add    BYTE PTR [rcx],al
 100e244:	add    BYTE PTR [rax],al
 100e246:	add    BYTE PTR [rax],al
 100e248:	add    DWORD PTR [rax],eax
 100e24a:	add    BYTE PTR [rax],al
 100e24c:	add    BYTE PTR [rax],al
 100e24e:	add    BYTE PTR [rax],al
 100e250:	sub    BYTE PTR [rip+0x100],bl        # 0x100e356
 100e256:	add    BYTE PTR [rax],al
 100e258:	add    al,BYTE PTR [rax]
 100e25a:	add    BYTE PTR [rax],al
 100e25c:	add    eax,DWORD PTR [rax]
 100e25e:	add    BYTE PTR [rax],al
 100e260:	mov    bl,bh
 100e262:	add    BYTE PTR [rcx],al
 100e264:	add    BYTE PTR [rax],al
 100e266:	add    BYTE PTR [rax],al
 100e268:	add    DWORD PTR [rax],eax
 100e26a:	add    BYTE PTR [rax],al
 100e26c:	add    BYTE PTR [rax],al
 100e26e:	add    BYTE PTR [rax],al
 100e270:	push   rax
 100e271:	sbb    eax,0x100
 100e276:	add    BYTE PTR [rax],al
 100e278:	add    al,BYTE PTR [rax]
 100e27a:	add    BYTE PTR [rax],al
 100e27c:	add    eax,DWORD PTR [rax]
 100e27e:	add    BYTE PTR [rax],al
 100e280:	movabs al,ds:0x1000000000100fb
 100e289:	add    BYTE PTR [rax],al
 100e28b:	add    BYTE PTR [rax],al
 100e28d:	add    BYTE PTR [rax],al
 100e28f:	add    BYTE PTR [rax+0x1d],dh
 100e292:	add    BYTE PTR [rcx],al
 100e294:	add    BYTE PTR [rax],al
 100e296:	add    BYTE PTR [rax],al
 100e298:	add    al,BYTE PTR [rax]
 100e29a:	add    BYTE PTR [rax],al
 100e29c:	add    eax,DWORD PTR [rax]
 100e29e:	add    BYTE PTR [rax],al
 100e2a0:	nop
 100e2a1:	stc    
 100e2a2:	add    BYTE PTR [rcx],al
 100e2a4:	add    BYTE PTR [rax],al
 100e2a6:	add    BYTE PTR [rax],al
 100e2a8:	add    DWORD PTR [rax],eax
 100e2aa:	add    BYTE PTR [rax],al
 100e2ac:	add    BYTE PTR [rax],al
 100e2ae:	add    BYTE PTR [rax],al
 100e2b0:	nop
 100e2b1:	sbb    eax,0x100
 100e2b6:	add    BYTE PTR [rax],al
 100e2b8:	add    al,BYTE PTR [rax]
 100e2ba:	add    BYTE PTR [rax],al
 100e2bc:	or     al,BYTE PTR [rax]
 100e2be:	add    BYTE PTR [rax],al
 100e2c0:	mov    eax,0x100fb
 100e2c5:	add    BYTE PTR [rax],al
 100e2c7:	add    BYTE PTR [rcx],al
 100e2c9:	add    BYTE PTR [rax],al
 100e2cb:	add    BYTE PTR [rax],al
 100e2cd:	add    BYTE PTR [rax],al
 100e2cf:	add    BYTE PTR [rax+0x1001d],ch
 100e2d5:	add    BYTE PTR [rax],al
 100e2d7:	add    BYTE PTR [rdx],al
 100e2d9:	add    BYTE PTR [rax],al
 100e2db:	add    BYTE PTR [rbx],al
 100e2dd:	add    BYTE PTR [rax],al
 100e2df:	add    al,dl
 100e2e1:	sti    
 100e2e2:	add    BYTE PTR [rcx],al
 100e2e4:	add    BYTE PTR [rax],al
 100e2e6:	add    BYTE PTR [rax],al
 100e2e8:	add    DWORD PTR [rax],eax
 100e2ea:	add    BYTE PTR [rax],al
 100e2ec:	add    BYTE PTR [rax],al
 100e2ee:	add    BYTE PTR [rax],al
 100e2f0:	rcr    BYTE PTR [rip+0x100],1        # 0x100e3f6
 100e2f6:	add    BYTE PTR [rax],al
 100e2f8:	add    al,BYTE PTR [rax]
 100e2fa:	add    BYTE PTR [rax],al
 100e2fc:	add    eax,DWORD PTR [rax]
 100e2fe:	add    BYTE PTR [rax],al
 100e300:	call   0x101e400
 100e305:	add    BYTE PTR [rax],al
 100e307:	add    BYTE PTR [rcx],al
	...
 100e311:	(bad)  
 100e312:	add    BYTE PTR [rcx],al
 100e314:	add    BYTE PTR [rax],al
 100e316:	add    BYTE PTR [rax],al
 100e318:	add    al,BYTE PTR [rax]
 100e31a:	add    BYTE PTR [rax],al
 100e31c:	add    eax,DWORD PTR [rax]
 100e31e:	add    BYTE PTR [rax],al
 100e320:	add    ah,bh
 100e322:	add    BYTE PTR [rcx],al
 100e324:	add    BYTE PTR [rax],al
 100e326:	add    BYTE PTR [rax],al
 100e328:	add    DWORD PTR [rax],eax
 100e32a:	add    BYTE PTR [rax],al
 100e32c:	add    BYTE PTR [rax],al
 100e32e:	add    BYTE PTR [rax],al
 100e330:	cmp    BYTE PTR [rsi],bl
 100e332:	add    BYTE PTR [rcx],al
 100e334:	add    BYTE PTR [rax],al
 100e336:	add    BYTE PTR [rax],al
 100e338:	add    al,BYTE PTR [rax]
 100e33a:	add    BYTE PTR [rax],al
 100e33c:	add    eax,DWORD PTR [rax]
 100e33e:	add    BYTE PTR [rax],al
 100e340:	and    ch,bh
 100e342:	add    BYTE PTR [rcx],al
 100e344:	add    BYTE PTR [rax],al
 100e346:	add    BYTE PTR [rax],al
 100e348:	add    eax,0x0
 100e34d:	add    BYTE PTR [rax],al
 100e34f:	add    BYTE PTR [rax+0x1e],ah
 100e352:	add    BYTE PTR [rcx],al
 100e354:	add    BYTE PTR [rax],al
 100e356:	add    BYTE PTR [rax],al
 100e358:	add    al,BYTE PTR [rax]
 100e35a:	add    BYTE PTR [rax],al
 100e35c:	or     al,BYTE PTR [rax]
 100e35e:	add    BYTE PTR [rax],al
 100e360:	clc    
 100e361:	cli    
 100e362:	add    BYTE PTR [rcx],al
 100e364:	add    BYTE PTR [rax],al
 100e366:	add    BYTE PTR [rax],al
 100e368:	add    DWORD PTR [rax],eax
 100e36a:	add    BYTE PTR [rax],al
 100e36c:	add    BYTE PTR [rax],al
 100e36e:	add    BYTE PTR [rax],al
 100e370:	sbb    BYTE PTR [rsi],0x0
 100e373:	add    DWORD PTR [rax],eax
 100e375:	add    BYTE PTR [rax],al
 100e377:	add    BYTE PTR [rdx],al
 100e379:	add    BYTE PTR [rax],al
 100e37b:	add    BYTE PTR [rbx],al
 100e37d:	add    BYTE PTR [rax],al
 100e37f:	add    BYTE PTR [rax],ch
 100e381:	sti    
 100e382:	add    BYTE PTR [rcx],al
 100e384:	add    BYTE PTR [rax],al
 100e386:	add    BYTE PTR [rax],al
 100e388:	add    DWORD PTR [rax],eax
 100e38a:	add    BYTE PTR [rax],al
 100e38c:	add    BYTE PTR [rax],al
 100e38e:	add    BYTE PTR [rax],al
 100e390:	mov    al,0x1e
 100e392:	add    BYTE PTR [rcx],al
 100e394:	add    BYTE PTR [rax],al
 100e396:	add    BYTE PTR [rax],al
 100e398:	add    al,BYTE PTR [rax]
 100e39a:	add    BYTE PTR [rax],al
 100e39c:	add    eax,DWORD PTR [rax]
 100e39e:	add    BYTE PTR [rax],al
 100e3a0:	mov    al,0xfd
 100e3a2:	add    BYTE PTR [rcx],al
 100e3a4:	add    BYTE PTR [rax],al
 100e3a6:	add    BYTE PTR [rax],al
 100e3a8:	add    eax,0x0
 100e3ad:	add    BYTE PTR [rax],al
 100e3af:	add    BYTE PTR [rax+0x10018],bh
 100e3b5:	add    BYTE PTR [rax],al
 100e3b7:	add    BYTE PTR [rdx],al
 100e3b9:	add    BYTE PTR [rax],al
 100e3bb:	add    BYTE PTR [rbx],al
 100e3bd:	add    BYTE PTR [rax],al
 100e3bf:	add    BYTE PTR [rax-0x7],ah
 100e3c2:	add    BYTE PTR [rcx],al
 100e3c4:	add    BYTE PTR [rax],al
 100e3c6:	add    BYTE PTR [rax],al
 100e3c8:	add    DWORD PTR [rax],eax
 100e3ca:	add    BYTE PTR [rax],al
 100e3cc:	add    BYTE PTR [rax],al
 100e3ce:	add    BYTE PTR [rax],al
 100e3d0:	sub    BYTE PTR [rip+0x100],bl        # 0x100e4d6
 100e3d6:	add    BYTE PTR [rax],al
 100e3d8:	add    al,BYTE PTR [rax]
 100e3da:	add    BYTE PTR [rax],al
 100e3dc:	add    eax,DWORD PTR [rax]
 100e3de:	add    BYTE PTR [rax],al
 100e3e0:	mov    bl,bh
 100e3e2:	add    BYTE PTR [rcx],al
 100e3e4:	add    BYTE PTR [rax],al
 100e3e6:	add    BYTE PTR [rax],al
 100e3e8:	add    DWORD PTR [rax],eax
 100e3ea:	add    BYTE PTR [rax],al
 100e3ec:	add    BYTE PTR [rax],al
 100e3ee:	add    BYTE PTR [rax],al
 100e3f0:	push   rax
 100e3f1:	sbb    eax,0x100
 100e3f6:	add    BYTE PTR [rax],al
 100e3f8:	add    al,BYTE PTR [rax]
 100e3fa:	add    BYTE PTR [rax],al
 100e3fc:	add    eax,DWORD PTR [rax]
 100e3fe:	add    BYTE PTR [rax],al
 100e400:	movabs al,ds:0x1000000000100fb
 100e409:	add    BYTE PTR [rax],al
 100e40b:	add    BYTE PTR [rax],al
 100e40d:	add    BYTE PTR [rax],al
 100e40f:	add    BYTE PTR [rax+0x1d],dh
 100e412:	add    BYTE PTR [rcx],al
 100e414:	add    BYTE PTR [rax],al
 100e416:	add    BYTE PTR [rax],al
 100e418:	add    al,BYTE PTR [rax]
 100e41a:	add    BYTE PTR [rax],al
 100e41c:	add    eax,DWORD PTR [rax]
 100e41e:	add    BYTE PTR [rax],al
 100e420:	nop
 100e421:	stc    
 100e422:	add    BYTE PTR [rcx],al
 100e424:	add    BYTE PTR [rax],al
 100e426:	add    BYTE PTR [rax],al
 100e428:	add    DWORD PTR [rax],eax
 100e42a:	add    BYTE PTR [rax],al
 100e42c:	add    BYTE PTR [rax],al
 100e42e:	add    BYTE PTR [rax],al
 100e430:	nop
 100e431:	sbb    eax,0x100
 100e436:	add    BYTE PTR [rax],al
 100e438:	add    al,BYTE PTR [rax]
 100e43a:	add    BYTE PTR [rax],al
 100e43c:	or     al,BYTE PTR [rax]
 100e43e:	add    BYTE PTR [rax],al
 100e440:	mov    eax,0x100fb
 100e445:	add    BYTE PTR [rax],al
 100e447:	add    BYTE PTR [rcx],al
 100e449:	add    BYTE PTR [rax],al
 100e44b:	add    BYTE PTR [rax],al
 100e44d:	add    BYTE PTR [rax],al
 100e44f:	add    BYTE PTR [rax+0x1001d],ch
 100e455:	add    BYTE PTR [rax],al
 100e457:	add    BYTE PTR [rdx],al
 100e459:	add    BYTE PTR [rax],al
 100e45b:	add    BYTE PTR [rbx],al
 100e45d:	add    BYTE PTR [rax],al
 100e45f:	add    al,dl
 100e461:	sti    
 100e462:	add    BYTE PTR [rcx],al
 100e464:	add    BYTE PTR [rax],al
 100e466:	add    BYTE PTR [rax],al
 100e468:	add    DWORD PTR [rax],eax
 100e46a:	add    BYTE PTR [rax],al
 100e46c:	add    BYTE PTR [rax],al
 100e46e:	add    BYTE PTR [rax],al
 100e470:	rcr    BYTE PTR [rip+0x100],1        # 0x100e576
 100e476:	add    BYTE PTR [rax],al
 100e478:	add    al,BYTE PTR [rax]
 100e47a:	add    BYTE PTR [rax],al
 100e47c:	add    eax,DWORD PTR [rax]
 100e47e:	add    BYTE PTR [rax],al
 100e480:	call   0x101e580
 100e485:	add    BYTE PTR [rax],al
 100e487:	add    BYTE PTR [rcx],al
	...
 100e491:	(bad)  
 100e492:	add    BYTE PTR [rcx],al
 100e494:	add    BYTE PTR [rax],al
 100e496:	add    BYTE PTR [rax],al
 100e498:	add    al,BYTE PTR [rax]
 100e49a:	add    BYTE PTR [rax],al
 100e49c:	add    eax,DWORD PTR [rax]
 100e49e:	add    BYTE PTR [rax],al
 100e4a0:	add    ah,bh
 100e4a2:	add    BYTE PTR [rcx],al
 100e4a4:	add    BYTE PTR [rax],al
 100e4a6:	add    BYTE PTR [rax],al
 100e4a8:	add    DWORD PTR [rax],eax
 100e4aa:	add    BYTE PTR [rax],al
 100e4ac:	add    BYTE PTR [rax],al
 100e4ae:	add    BYTE PTR [rax],al
 100e4b0:	cmp    BYTE PTR [rsi],bl
 100e4b2:	add    BYTE PTR [rcx],al
 100e4b4:	add    BYTE PTR [rax],al
 100e4b6:	add    BYTE PTR [rax],al
 100e4b8:	add    al,BYTE PTR [rax]
 100e4ba:	add    BYTE PTR [rax],al
 100e4bc:	add    eax,DWORD PTR [rax]
 100e4be:	add    BYTE PTR [rax],al
 100e4c0:	and    ch,bh
 100e4c2:	add    BYTE PTR [rcx],al
 100e4c4:	add    BYTE PTR [rax],al
 100e4c6:	add    BYTE PTR [rax],al
 100e4c8:	add    eax,0x0
 100e4cd:	add    BYTE PTR [rax],al
 100e4cf:	add    BYTE PTR [rax+0x1e],ah
 100e4d2:	add    BYTE PTR [rcx],al
 100e4d4:	add    BYTE PTR [rax],al
 100e4d6:	add    BYTE PTR [rax],al
 100e4d8:	add    al,BYTE PTR [rax]
 100e4da:	add    BYTE PTR [rax],al
 100e4dc:	or     al,BYTE PTR [rax]
 100e4de:	add    BYTE PTR [rax],al
 100e4e0:	clc    
 100e4e1:	cli    
 100e4e2:	add    BYTE PTR [rcx],al
 100e4e4:	add    BYTE PTR [rax],al
 100e4e6:	add    BYTE PTR [rax],al
 100e4e8:	add    DWORD PTR [rax],eax
 100e4ea:	add    BYTE PTR [rax],al
 100e4ec:	add    BYTE PTR [rax],al
 100e4ee:	add    BYTE PTR [rax],al
 100e4f0:	sbb    BYTE PTR [rsi],0x0
 100e4f3:	add    DWORD PTR [rax],eax
 100e4f5:	add    BYTE PTR [rax],al
 100e4f7:	add    BYTE PTR [rdx],al
 100e4f9:	add    BYTE PTR [rax],al
 100e4fb:	add    BYTE PTR [rbx],al
 100e4fd:	add    BYTE PTR [rax],al
 100e4ff:	add    BYTE PTR [rax],ch
 100e501:	sti    
 100e502:	add    BYTE PTR [rcx],al
 100e504:	add    BYTE PTR [rax],al
 100e506:	add    BYTE PTR [rax],al
 100e508:	add    DWORD PTR [rax],eax
 100e50a:	add    BYTE PTR [rax],al
 100e50c:	add    BYTE PTR [rax],al
 100e50e:	add    BYTE PTR [rax],al
 100e510:	mov    al,0x1e
 100e512:	add    BYTE PTR [rcx],al
 100e514:	add    BYTE PTR [rax],al
 100e516:	add    BYTE PTR [rax],al
 100e518:	add    al,BYTE PTR [rax]
 100e51a:	add    BYTE PTR [rax],al
 100e51c:	add    eax,DWORD PTR [rax]
 100e51e:	add    BYTE PTR [rax],al
 100e520:	mov    al,0xfd
 100e522:	add    BYTE PTR [rcx],al
 100e524:	add    BYTE PTR [rax],al
 100e526:	add    BYTE PTR [rax],al
 100e528:	add    eax,0x0
 100e52d:	add    BYTE PTR [rax],al
 100e52f:	add    BYTE PTR [rbx*1+0x100],bl
 100e536:	add    BYTE PTR [rax],al
 100e538:	add    al,BYTE PTR [rax]
 100e53a:	add    BYTE PTR [rax],al
 100e53c:	add    eax,DWORD PTR [rax]
 100e53e:	add    BYTE PTR [rax],al
 100e540:	rex clc 
 100e542:	add    BYTE PTR [rcx],al
 100e544:	add    BYTE PTR [rax],al
 100e546:	add    BYTE PTR [rax],al
 100e548:	add    DWORD PTR [rax],eax
 100e54a:	add    BYTE PTR [rax],al
 100e54c:	add    BYTE PTR [rax],al
 100e54e:	add    BYTE PTR [rax],al
 100e550:	rcr    BYTE PTR [rax],1
 100e552:	add    BYTE PTR [rcx],al
 100e554:	add    BYTE PTR [rax],al
 100e556:	add    BYTE PTR [rax],al
 100e558:	add    al,BYTE PTR [rax]
 100e55a:	add    BYTE PTR [rax],al
 100e55c:	add    eax,DWORD PTR [rax]
 100e55e:	add    BYTE PTR [rax],al
 100e560:	pop    rax
 100e561:	clc    
 100e562:	add    BYTE PTR [rcx],al
 100e564:	add    BYTE PTR [rax],al
 100e566:	add    BYTE PTR [rax],al
 100e568:	add    DWORD PTR [rax],eax
 100e56a:	add    BYTE PTR [rax],al
 100e56c:	add    BYTE PTR [rax],al
 100e56e:	add    BYTE PTR [rax],al
 100e570:	mov    eax,0x10018
 100e575:	add    BYTE PTR [rax],al
 100e577:	add    BYTE PTR [rdx],al
 100e579:	add    BYTE PTR [rax],al
 100e57b:	add    BYTE PTR [rbx],al
 100e57d:	add    BYTE PTR [rax],al
 100e57f:	add    BYTE PTR [rax-0x7],ah
 100e582:	add    BYTE PTR [rcx],al
 100e584:	add    BYTE PTR [rax],al
 100e586:	add    BYTE PTR [rax],al
 100e588:	add    DWORD PTR [rax],eax
 100e58a:	add    BYTE PTR [rax],al
 100e58c:	add    BYTE PTR [rax],al
 100e58e:	add    BYTE PTR [rax],al
 100e590:	sub    BYTE PTR [rip+0x100],bl        # 0x100e696
 100e596:	add    BYTE PTR [rax],al
 100e598:	add    al,BYTE PTR [rax]
 100e59a:	add    BYTE PTR [rax],al
 100e59c:	add    eax,DWORD PTR [rax]
 100e59e:	add    BYTE PTR [rax],al
 100e5a0:	mov    bl,bh
 100e5a2:	add    BYTE PTR [rcx],al
 100e5a4:	add    BYTE PTR [rax],al
 100e5a6:	add    BYTE PTR [rax],al
 100e5a8:	add    DWORD PTR [rax],eax
 100e5aa:	add    BYTE PTR [rax],al
 100e5ac:	add    BYTE PTR [rax],al
 100e5ae:	add    BYTE PTR [rax],al
 100e5b0:	jo     0x100e5cf
 100e5b2:	add    BYTE PTR [rcx],al
 100e5b4:	add    BYTE PTR [rax],al
 100e5b6:	add    BYTE PTR [rax],al
 100e5b8:	add    al,BYTE PTR [rax]
 100e5ba:	add    BYTE PTR [rax],al
 100e5bc:	add    eax,DWORD PTR [rax]
 100e5be:	add    BYTE PTR [rax],al
 100e5c0:	nop
 100e5c1:	stc    
 100e5c2:	add    BYTE PTR [rcx],al
 100e5c4:	add    BYTE PTR [rax],al
 100e5c6:	add    BYTE PTR [rax],al
 100e5c8:	add    DWORD PTR [rax],eax
 100e5ca:	add    BYTE PTR [rax],al
 100e5cc:	add    BYTE PTR [rax],al
 100e5ce:	add    BYTE PTR [rax],al
 100e5d0:	rcr    BYTE PTR [rsi],1
 100e5d2:	add    BYTE PTR [rcx],al
 100e5d4:	add    BYTE PTR [rax],al
 100e5d6:	add    BYTE PTR [rax],al
 100e5d8:	add    al,BYTE PTR [rax]
 100e5da:	add    BYTE PTR [rax],al
 100e5dc:	add    eax,DWORD PTR [rax]
 100e5de:	add    BYTE PTR [rax],al
 100e5e0:	rex.W cld 
 100e5e2:	add    BYTE PTR [rcx],al
 100e5e4:	add    BYTE PTR [rax],al
 100e5e6:	add    BYTE PTR [rax],al
 100e5e8:	add    DWORD PTR [rax],eax
 100e5ea:	add    BYTE PTR [rax],al
 100e5ec:	add    BYTE PTR [rax],al
 100e5ee:	add    BYTE PTR [rax],al
 100e5f0:	nop
 100e5f1:	sbb    eax,0x100
 100e5f6:	add    BYTE PTR [rax],al
 100e5f8:	add    al,BYTE PTR [rax]
 100e5fa:	add    BYTE PTR [rax],al
 100e5fc:	or     al,BYTE PTR [rax]
 100e5fe:	add    BYTE PTR [rax],al
 100e600:	mov    eax,0x100fb
 100e605:	add    BYTE PTR [rax],al
 100e607:	add    BYTE PTR [rcx],al
 100e609:	add    BYTE PTR [rax],al
 100e60b:	add    BYTE PTR [rax],al
 100e60d:	add    BYTE PTR [rax],al
 100e60f:	add    al,ch
 100e611:	(bad)  
 100e612:	add    BYTE PTR [rcx],al
 100e614:	add    BYTE PTR [rax],al
 100e616:	add    BYTE PTR [rax],al
 100e618:	add    al,BYTE PTR [rax]
 100e61a:	add    BYTE PTR [rax],al
 100e61c:	add    eax,DWORD PTR [rax]
 100e61e:	add    BYTE PTR [rax],al
 100e620:	adc    bl,bh
 100e622:	add    BYTE PTR [rcx],al
 100e624:	add    BYTE PTR [rax],al
 100e626:	add    BYTE PTR [rax],al
 100e628:	add    DWORD PTR [rax],eax
 100e62a:	add    BYTE PTR [rax],al
 100e62c:	add    BYTE PTR [rax],al
 100e62e:	add    BYTE PTR [rax],al
 100e630:	rcr    BYTE PTR [rip+0x100],1        # 0x100e736
 100e636:	add    BYTE PTR [rax],al
 100e638:	add    al,BYTE PTR [rax]
 100e63a:	add    BYTE PTR [rax],al
 100e63c:	add    eax,DWORD PTR [rax]
 100e63e:	add    BYTE PTR [rax],al
 100e640:	call   0x101e740
 100e645:	add    BYTE PTR [rax],al
 100e647:	add    BYTE PTR [rcx],al
 100e649:	add    BYTE PTR [rax],al
 100e64b:	add    BYTE PTR [rax],al
 100e64d:	add    BYTE PTR [rax],al
 100e64f:	add    BYTE PTR [rax],bh
 100e651:	(bad)  
 100e652:	add    BYTE PTR [rcx],al
 100e654:	add    BYTE PTR [rax],al
 100e656:	add    BYTE PTR [rax],al
 100e658:	add    al,BYTE PTR [rax]
 100e65a:	add    BYTE PTR [rax],al
 100e65c:	add    eax,DWORD PTR [rax]
 100e65e:	add    BYTE PTR [rax],al
 100e660:	and    ch,bh
 100e662:	add    BYTE PTR [rcx],al
 100e664:	add    BYTE PTR [rax],al
 100e666:	add    BYTE PTR [rax],al
 100e668:	add    eax,0x0
 100e66d:	add    BYTE PTR [rax],al
 100e66f:	add    BYTE PTR [rax+0x1e],ah
 100e672:	add    BYTE PTR [rcx],al
 100e674:	add    BYTE PTR [rax],al
 100e676:	add    BYTE PTR [rax],al
 100e678:	add    al,BYTE PTR [rax]
 100e67a:	add    BYTE PTR [rax],al
 100e67c:	or     al,BYTE PTR [rax]
 100e67e:	add    BYTE PTR [rax],al
 100e680:	clc    
 100e681:	cli    
 100e682:	add    BYTE PTR [rcx],al
 100e684:	add    BYTE PTR [rax],al
 100e686:	add    BYTE PTR [rax],al
 100e688:	add    DWORD PTR [rax],eax
 100e68a:	add    BYTE PTR [rax],al
 100e68c:	add    BYTE PTR [rax],al
 100e68e:	add    BYTE PTR [rax],al
 100e690:	sbb    BYTE PTR [rsi],0x0
 100e693:	add    DWORD PTR [rax],eax
 100e695:	add    BYTE PTR [rax],al
 100e697:	add    BYTE PTR [rdx],al
 100e699:	add    BYTE PTR [rax],al
 100e69b:	add    BYTE PTR [rbx],al
 100e69d:	add    BYTE PTR [rax],al
 100e69f:	add    BYTE PTR [rax],ch
 100e6a1:	sti    
 100e6a2:	add    BYTE PTR [rcx],al
 100e6a4:	add    BYTE PTR [rax],al
 100e6a6:	add    BYTE PTR [rax],al
 100e6a8:	add    DWORD PTR [rax],eax
 100e6aa:	add    BYTE PTR [rax],al
 100e6ac:	add    BYTE PTR [rax],al
 100e6ae:	add    BYTE PTR [rax],al
 100e6b0:	sbb    BYTE PTR [rdi],bl
 100e6b2:	add    BYTE PTR [rcx],al
 100e6b4:	add    BYTE PTR [rax],al
 100e6b6:	add    BYTE PTR [rax],al
 100e6b8:	add    al,BYTE PTR [rax]
 100e6ba:	add    BYTE PTR [rax],al
 100e6bc:	add    eax,DWORD PTR [rax]
 100e6be:	add    BYTE PTR [rax],al
 100e6c0:	pop    rax
 100e6c1:	inc    BYTE PTR [rax]
 100e6c3:	add    DWORD PTR [rax],eax
 100e6c5:	add    BYTE PTR [rax],al
 100e6c7:	add    BYTE PTR [rcx],al
 100e6c9:	add    BYTE PTR [rax],al
 100e6cb:	add    BYTE PTR [rax],al
 100e6cd:	add    BYTE PTR [rax],al
 100e6cf:	add    BYTE PTR [rax+0x1f],cl
 100e6d2:	add    BYTE PTR [rcx],al
 100e6d4:	add    BYTE PTR [rax],al
 100e6d6:	add    BYTE PTR [rax],al
 100e6d8:	add    al,BYTE PTR [rax]
 100e6da:	add    BYTE PTR [rax],al
 100e6dc:	add    eax,DWORD PTR [rax]
 100e6de:	add    BYTE PTR [rax],al
 100e6e0:	jo     0x100e6e0
 100e6e2:	add    BYTE PTR [rcx],al
 100e6e4:	add    BYTE PTR [rax],al
 100e6e6:	add    BYTE PTR [rax],al
 100e6e8:	add    DWORD PTR [rax],eax
 100e6ea:	add    BYTE PTR [rax],al
 100e6ec:	add    BYTE PTR [rax],al
 100e6ee:	add    BYTE PTR [rax],al
 100e6f0:	mov    al,0x1e
 100e6f2:	add    BYTE PTR [rcx],al
 100e6f4:	add    BYTE PTR [rax],al
 100e6f6:	add    BYTE PTR [rax],al
 100e6f8:	add    al,BYTE PTR [rax]
 100e6fa:	add    BYTE PTR [rax],al
 100e6fc:	add    eax,DWORD PTR [rax]
 100e6fe:	add    BYTE PTR [rax],al
 100e700:	mov    al,0xfd
 100e702:	add    BYTE PTR [rcx],al
 100e704:	add    BYTE PTR [rax],al
 100e706:	add    BYTE PTR [rax],al
 100e708:	add    eax,0x0
 100e70d:	add    BYTE PTR [rax],al
 100e70f:	add    BYTE PTR [rbx*1+0x100],bl
 100e716:	add    BYTE PTR [rax],al
 100e718:	add    al,BYTE PTR [rax]
 100e71a:	add    BYTE PTR [rax],al
 100e71c:	add    eax,DWORD PTR [rax]
 100e71e:	add    BYTE PTR [rax],al
 100e720:	rex clc 
 100e722:	add    BYTE PTR [rcx],al
 100e724:	add    BYTE PTR [rax],al
 100e726:	add    BYTE PTR [rax],al
 100e728:	add    DWORD PTR [rax],eax
 100e72a:	add    BYTE PTR [rax],al
 100e72c:	add    BYTE PTR [rax],al
 100e72e:	add    BYTE PTR [rax],al
 100e730:	rcr    BYTE PTR [rax],1
 100e732:	add    BYTE PTR [rcx],al
 100e734:	add    BYTE PTR [rax],al
 100e736:	add    BYTE PTR [rax],al
 100e738:	add    al,BYTE PTR [rax]
 100e73a:	add    BYTE PTR [rax],al
 100e73c:	add    eax,DWORD PTR [rax]
 100e73e:	add    BYTE PTR [rax],al
 100e740:	pop    rax
 100e741:	clc    
 100e742:	add    BYTE PTR [rcx],al
 100e744:	add    BYTE PTR [rax],al
 100e746:	add    BYTE PTR [rax],al
 100e748:	add    DWORD PTR [rax],eax
 100e74a:	add    BYTE PTR [rax],al
 100e74c:	add    BYTE PTR [rax],al
 100e74e:	add    BYTE PTR [rax],al
 100e750:	mov    eax,0x10018
 100e755:	add    BYTE PTR [rax],al
 100e757:	add    BYTE PTR [rdx],al
 100e759:	add    BYTE PTR [rax],al
 100e75b:	add    BYTE PTR [rbx],al
 100e75d:	add    BYTE PTR [rax],al
 100e75f:	add    BYTE PTR [rax-0x7],ah
 100e762:	add    BYTE PTR [rcx],al
 100e764:	add    BYTE PTR [rax],al
 100e766:	add    BYTE PTR [rax],al
 100e768:	add    DWORD PTR [rax],eax
 100e76a:	add    BYTE PTR [rax],al
 100e76c:	add    BYTE PTR [rax],al
 100e76e:	add    BYTE PTR [rax],al
 100e770:	sub    BYTE PTR [rip+0x100],bl        # 0x100e876
 100e776:	add    BYTE PTR [rax],al
 100e778:	add    al,BYTE PTR [rax]
 100e77a:	add    BYTE PTR [rax],al
 100e77c:	add    eax,DWORD PTR [rax]
 100e77e:	add    BYTE PTR [rax],al
 100e780:	mov    bl,bh
 100e782:	add    BYTE PTR [rcx],al
 100e784:	add    BYTE PTR [rax],al
 100e786:	add    BYTE PTR [rax],al
 100e788:	add    DWORD PTR [rax],eax
 100e78a:	add    BYTE PTR [rax],al
 100e78c:	add    BYTE PTR [rax],al
 100e78e:	add    BYTE PTR [rax],al
 100e790:	jo     0x100e7af
 100e792:	add    BYTE PTR [rcx],al
 100e794:	add    BYTE PTR [rax],al
 100e796:	add    BYTE PTR [rax],al
 100e798:	add    al,BYTE PTR [rax]
 100e79a:	add    BYTE PTR [rax],al
 100e79c:	add    eax,DWORD PTR [rax]
 100e79e:	add    BYTE PTR [rax],al
 100e7a0:	nop
 100e7a1:	stc    
 100e7a2:	add    BYTE PTR [rcx],al
 100e7a4:	add    BYTE PTR [rax],al
 100e7a6:	add    BYTE PTR [rax],al
 100e7a8:	add    DWORD PTR [rax],eax
 100e7aa:	add    BYTE PTR [rax],al
 100e7ac:	add    BYTE PTR [rax],al
 100e7ae:	add    BYTE PTR [rax],al
 100e7b0:	js     0x100e7d1
 100e7b2:	add    BYTE PTR [rcx],al
 100e7b4:	add    BYTE PTR [rax],al
 100e7b6:	add    BYTE PTR [rax],al
 100e7b8:	add    al,BYTE PTR [rax]
 100e7ba:	add    BYTE PTR [rax],al
 100e7bc:	add    eax,DWORD PTR [rax]
 100e7be:	add    BYTE PTR [rax],al
 100e7c0:	sbb    ah,bh
 100e7c2:	add    BYTE PTR [rcx],al
 100e7c4:	add    BYTE PTR [rax],al
 100e7c6:	add    BYTE PTR [rax],al
 100e7c8:	add    DWORD PTR [rax],eax
 100e7ca:	add    BYTE PTR [rax],al
 100e7cc:	add    BYTE PTR [rax],al
 100e7ce:	add    BYTE PTR [rax],al
 100e7d0:	cwde   
 100e7d1:	(bad)  
 100e7d2:	add    BYTE PTR [rcx],al
 100e7d4:	add    BYTE PTR [rax],al
 100e7d6:	add    BYTE PTR [rax],al
 100e7d8:	add    al,BYTE PTR [rax]
 100e7da:	add    BYTE PTR [rax],al
 100e7dc:	(bad)  
 100e7dd:	add    BYTE PTR [rax],al
 100e7df:	add    al,bl
 100e7e1:	stc    
 100e7e2:	add    BYTE PTR [rcx],al
 100e7e4:	add    BYTE PTR [rax],al
 100e7e6:	add    BYTE PTR [rax],al
 100e7e8:	add    DWORD PTR [rax],eax
 100e7ea:	add    BYTE PTR [rax],al
 100e7ec:	add    BYTE PTR [rax],al
 100e7ee:	add    BYTE PTR [rax],al
 100e7f0:	mov    eax,0x1001f
 100e7f5:	add    BYTE PTR [rax],al
 100e7f7:	add    BYTE PTR [rdx],al
 100e7f9:	add    BYTE PTR [rax],al
 100e7fb:	add    BYTE PTR [rsi],al
 100e7fd:	add    BYTE PTR [rax],al
 100e7ff:	add    BYTE PTR [rax],dh
 100e801:	cld    
 100e802:	add    BYTE PTR [rcx],al
 100e804:	add    BYTE PTR [rax],al
 100e806:	add    BYTE PTR [rax],al
 100e808:	add    DWORD PTR [rax],eax
 100e80a:	add    BYTE PTR [rax],al
 100e80c:	add    BYTE PTR [rax],al
 100e80e:	add    BYTE PTR [rax],al
 100e810:	(bad)  
 100e811:	(bad)  
 100e812:	add    BYTE PTR [rcx],al
 100e814:	add    BYTE PTR [rax],al
 100e816:	add    BYTE PTR [rax],al
 100e818:	add    al,BYTE PTR [rax]
 100e81a:	add    BYTE PTR [rax],al
 100e81c:	or     al,BYTE PTR [rax]
 100e81e:	add    BYTE PTR [rax],al
 100e820:	clc    
 100e821:	cli    
 100e822:	add    BYTE PTR [rcx],al
 100e824:	add    BYTE PTR [rax],al
 100e826:	add    BYTE PTR [rax],al
 100e828:	add    DWORD PTR [rax],eax
 100e82a:	add    BYTE PTR [rax],al
 100e82c:	add    BYTE PTR [rax],al
 100e82e:	add    BYTE PTR [rax],al
 100e830:	mov    eax,0x10018
 100e835:	add    BYTE PTR [rax],al
 100e837:	add    BYTE PTR [rdx],al
 100e839:	add    BYTE PTR [rax],al
 100e83b:	add    BYTE PTR [rbx],al
 100e83d:	add    BYTE PTR [rax],al
 100e83f:	add    BYTE PTR [rax-0x7],ah
 100e842:	add    BYTE PTR [rcx],al
 100e844:	add    BYTE PTR [rax],al
 100e846:	add    BYTE PTR [rax],al
 100e848:	add    DWORD PTR [rax],eax
 100e84a:	add    BYTE PTR [rax],al
 100e84c:	add    BYTE PTR [rax],al
 100e84e:	add    BYTE PTR [rax],al
 100e850:	sub    BYTE PTR [rip+0x100],bl        # 0x100e956
 100e856:	add    BYTE PTR [rax],al
 100e858:	add    al,BYTE PTR [rax]
 100e85a:	add    BYTE PTR [rax],al
 100e85c:	add    eax,DWORD PTR [rax]
 100e85e:	add    BYTE PTR [rax],al
 100e860:	mov    bl,bh
 100e862:	add    BYTE PTR [rcx],al
 100e864:	add    BYTE PTR [rax],al
 100e866:	add    BYTE PTR [rax],al
 100e868:	add    DWORD PTR [rax],eax
 100e86a:	add    BYTE PTR [rax],al
 100e86c:	add    BYTE PTR [rax],al
 100e86e:	add    BYTE PTR [rax],al
 100e870:	jo     0x100e88f
 100e872:	add    BYTE PTR [rcx],al
 100e874:	add    BYTE PTR [rax],al
 100e876:	add    BYTE PTR [rax],al
 100e878:	add    al,BYTE PTR [rax]
 100e87a:	add    BYTE PTR [rax],al
 100e87c:	add    eax,DWORD PTR [rax]
 100e87e:	add    BYTE PTR [rax],al
 100e880:	nop
 100e881:	stc    
 100e882:	add    BYTE PTR [rcx],al
 100e884:	add    BYTE PTR [rax],al
 100e886:	add    BYTE PTR [rax],al
 100e888:	add    DWORD PTR [rax],eax
 100e88a:	add    BYTE PTR [rax],al
 100e88c:	add    BYTE PTR [rax],al
 100e88e:	add    BYTE PTR [rax],al
 100e890:	js     0x100e8b1
 100e892:	add    BYTE PTR [rcx],al
 100e894:	add    BYTE PTR [rax],al
 100e896:	add    BYTE PTR [rax],al
 100e898:	add    al,BYTE PTR [rax]
 100e89a:	add    BYTE PTR [rax],al
 100e89c:	add    eax,DWORD PTR [rax]
 100e89e:	add    BYTE PTR [rax],al
 100e8a0:	sbb    ah,bh
 100e8a2:	add    BYTE PTR [rcx],al
 100e8a4:	add    BYTE PTR [rax],al
 100e8a6:	add    BYTE PTR [rax],al
 100e8a8:	add    DWORD PTR [rax],eax
 100e8aa:	add    BYTE PTR [rax],al
 100e8ac:	add    BYTE PTR [rax],al
 100e8ae:	add    BYTE PTR [rax],al
 100e8b0:	cwde   
 100e8b1:	(bad)  
 100e8b2:	add    BYTE PTR [rcx],al
 100e8b4:	add    BYTE PTR [rax],al
 100e8b6:	add    BYTE PTR [rax],al
 100e8b8:	add    al,BYTE PTR [rax]
 100e8ba:	add    BYTE PTR [rax],al
 100e8bc:	(bad)  
 100e8bd:	add    BYTE PTR [rax],al
 100e8bf:	add    al,bl
 100e8c1:	stc    
 100e8c2:	add    BYTE PTR [rcx],al
 100e8c4:	add    BYTE PTR [rax],al
 100e8c6:	add    BYTE PTR [rax],al
 100e8c8:	add    DWORD PTR [rax],eax
 100e8ca:	add    BYTE PTR [rax],al
 100e8cc:	add    BYTE PTR [rax],al
 100e8ce:	add    BYTE PTR [rax],al
 100e8d0:	mov    eax,0x1001f
 100e8d5:	add    BYTE PTR [rax],al
 100e8d7:	add    BYTE PTR [rdx],al
 100e8d9:	add    BYTE PTR [rax],al
 100e8db:	add    BYTE PTR [rsi],al
 100e8dd:	add    BYTE PTR [rax],al
 100e8df:	add    BYTE PTR [rax],dh
 100e8e1:	cld    
 100e8e2:	add    BYTE PTR [rcx],al
 100e8e4:	add    BYTE PTR [rax],al
 100e8e6:	add    BYTE PTR [rax],al
 100e8e8:	add    DWORD PTR [rax],eax
 100e8ea:	add    BYTE PTR [rax],al
 100e8ec:	add    BYTE PTR [rax],al
 100e8ee:	add    BYTE PTR [rax],al
 100e8f0:	(bad)  
 100e8f1:	(bad)  
 100e8f2:	add    BYTE PTR [rcx],al
 100e8f4:	add    BYTE PTR [rax],al
 100e8f6:	add    BYTE PTR [rax],al
 100e8f8:	add    al,BYTE PTR [rax]
 100e8fa:	add    BYTE PTR [rax],al
 100e8fc:	or     al,BYTE PTR [rax]
 100e8fe:	add    BYTE PTR [rax],al
 100e900:	clc    
 100e901:	cli    
 100e902:	add    BYTE PTR [rcx],al
 100e904:	add    BYTE PTR [rax],al
 100e906:	add    BYTE PTR [rax],al
 100e908:	add    DWORD PTR [rax],eax
 100e90a:	add    BYTE PTR [rax],al
 100e90c:	add    BYTE PTR [rax],al
 100e90e:	add    BYTE PTR [rax],al
 100e910:	sbb    al,0x1d
 100e912:	add    BYTE PTR [rcx],al
 100e914:	add    BYTE PTR [rax],al
 100e916:	add    BYTE PTR [rax],al
 100e918:	add    al,BYTE PTR [rax]
 100e91a:	add    BYTE PTR [rax],al
 100e91c:	add    eax,DWORD PTR [rax]
 100e91e:	add    BYTE PTR [rax],al
 100e920:	rex clc 
 100e922:	add    BYTE PTR [rcx],al
 100e924:	add    BYTE PTR [rax],al
 100e926:	add    BYTE PTR [rax],al
 100e928:	add    DWORD PTR [rax],eax
 100e92a:	add    BYTE PTR [rax],al
 100e92c:	add    BYTE PTR [rax],al
 100e92e:	add    BYTE PTR [rax],al
 100e930:	rcr    BYTE PTR [rax],1
 100e932:	add    BYTE PTR [rcx],al
 100e934:	add    BYTE PTR [rax],al
 100e936:	add    BYTE PTR [rax],al
 100e938:	add    al,BYTE PTR [rax]
 100e93a:	add    BYTE PTR [rax],al
 100e93c:	add    eax,DWORD PTR [rax]
 100e93e:	add    BYTE PTR [rax],al
 100e940:	pop    rax
 100e941:	clc    
 100e942:	add    BYTE PTR [rcx],al
 100e944:	add    BYTE PTR [rax],al
 100e946:	add    BYTE PTR [rax],al
 100e948:	add    DWORD PTR [rax],eax
 100e94a:	add    BYTE PTR [rax],al
 100e94c:	add    BYTE PTR [rax],al
 100e94e:	add    BYTE PTR [rax],al
 100e950:	mov    eax,0x10018
 100e955:	add    BYTE PTR [rax],al
 100e957:	add    BYTE PTR [rdx],al
 100e959:	add    BYTE PTR [rax],al
 100e95b:	add    BYTE PTR [rbx],al
 100e95d:	add    BYTE PTR [rax],al
 100e95f:	add    BYTE PTR [rax-0x7],ah
 100e962:	add    BYTE PTR [rcx],al
 100e964:	add    BYTE PTR [rax],al
 100e966:	add    BYTE PTR [rax],al
 100e968:	add    DWORD PTR [rax],eax
 100e96a:	add    BYTE PTR [rax],al
 100e96c:	add    BYTE PTR [rax],al
 100e96e:	add    BYTE PTR [rax],al
 100e970:	sub    BYTE PTR [rip+0x100],bl        # 0x100ea76
 100e976:	add    BYTE PTR [rax],al
 100e978:	add    al,BYTE PTR [rax]
 100e97a:	add    BYTE PTR [rax],al
 100e97c:	add    eax,DWORD PTR [rax]
 100e97e:	add    BYTE PTR [rax],al
 100e980:	mov    bl,bh
 100e982:	add    BYTE PTR [rcx],al
 100e984:	add    BYTE PTR [rax],al
 100e986:	add    BYTE PTR [rax],al
 100e988:	add    DWORD PTR [rax],eax
 100e98a:	add    BYTE PTR [rax],al
 100e98c:	add    BYTE PTR [rax],al
 100e98e:	add    BYTE PTR [rax],al
 100e990:	rcr    BYTE PTR [rsi],1
 100e992:	add    BYTE PTR [rcx],al
 100e994:	add    BYTE PTR [rax],al
 100e996:	add    BYTE PTR [rax],al
 100e998:	add    al,BYTE PTR [rax]
 100e99a:	add    BYTE PTR [rax],al
 100e99c:	add    eax,DWORD PTR [rax]
 100e99e:	add    BYTE PTR [rax],al
 100e9a0:	rex.W cld 
 100e9a2:	add    BYTE PTR [rcx],al
 100e9a4:	add    BYTE PTR [rax],al
 100e9a6:	add    BYTE PTR [rax],al
 100e9a8:	add    DWORD PTR [rax],eax
 100e9aa:	add    BYTE PTR [rax],al
 100e9ac:	add    BYTE PTR [rax],al
 100e9ae:	add    BYTE PTR [rax],al
 100e9b0:	lock (bad) 
 100e9b2:	add    BYTE PTR [rcx],al
 100e9b4:	add    BYTE PTR [rax],al
 100e9b6:	add    BYTE PTR [rax],al
 100e9b8:	add    al,BYTE PTR [rax]
 100e9ba:	add    BYTE PTR [rax],al
 100e9bc:	add    eax,DWORD PTR [rax]
 100e9be:	add    BYTE PTR [rax],al
 100e9c0:	(bad)  
 100e9c1:	cld    
 100e9c2:	add    BYTE PTR [rcx],al
 100e9c4:	add    BYTE PTR [rax],al
 100e9c6:	add    BYTE PTR [rax],al
 100e9c8:	add    DWORD PTR [rax],eax
 100e9ca:	add    BYTE PTR [rax],al
 100e9cc:	add    BYTE PTR [rax],al
 100e9ce:	add    BYTE PTR [rax],al
 100e9d0:	adc    BYTE PTR [rax],ah
 100e9d2:	add    BYTE PTR [rcx],al
 100e9d4:	add    BYTE PTR [rax],al
 100e9d6:	add    BYTE PTR [rax],al
 100e9d8:	add    al,BYTE PTR [rax]
 100e9da:	add    BYTE PTR [rax],al
 100e9dc:	(bad)  
 100e9dd:	add    BYTE PTR [rax],al
 100e9df:	add    BYTE PTR [rax-0x4],bh
 100e9e2:	add    BYTE PTR [rcx],al
 100e9e4:	add    BYTE PTR [rax],al
 100e9e6:	add    BYTE PTR [rax],al
 100e9e8:	add    DWORD PTR [rax],eax
 100e9ea:	add    BYTE PTR [rax],al
 100e9ec:	add    BYTE PTR [rax],al
 100e9ee:	add    BYTE PTR [rax],al
 100e9f0:	(bad)  
 100e9f1:	(bad)  
 100e9f2:	add    BYTE PTR [rcx],al
 100e9f4:	add    BYTE PTR [rax],al
 100e9f6:	add    BYTE PTR [rax],al
 100e9f8:	add    al,BYTE PTR [rax]
 100e9fa:	add    BYTE PTR [rax],al
 100e9fc:	or     al,BYTE PTR [rax]
 100e9fe:	add    BYTE PTR [rax],al
 100ea00:	clc    
 100ea01:	cli    
 100ea02:	add    BYTE PTR [rcx],al
 100ea04:	add    BYTE PTR [rax],al
 100ea06:	add    BYTE PTR [rax],al
 100ea08:	add    DWORD PTR [rax],eax
 100ea0a:	add    BYTE PTR [rax],al
 100ea0c:	add    BYTE PTR [rax],al
 100ea0e:	add    BYTE PTR [rax],al
 100ea10:	pop    rax
 100ea11:	and    BYTE PTR [rax],al
 100ea13:	add    DWORD PTR [rax],eax
 100ea15:	add    BYTE PTR [rax],al
 100ea17:	add    BYTE PTR [rdx],al
 100ea19:	add    BYTE PTR [rax],al
 100ea1b:	add    BYTE PTR [rbx],al
 100ea1d:	add    BYTE PTR [rax],al
 100ea1f:	add    BYTE PTR [rax+0x100fc],dl
 100ea25:	add    BYTE PTR [rax],al
 100ea27:	add    BYTE PTR [rcx],al
 100ea29:	add    BYTE PTR [rax],al
 100ea2b:	add    BYTE PTR [rax],al
 100ea2d:	add    BYTE PTR [rax],al
 100ea2f:	add    BYTE PTR [rax+0x10020],al
 100ea35:	add    BYTE PTR [rax],al
 100ea37:	add    BYTE PTR [rdx],al
 100ea39:	add    BYTE PTR [rax],al
 100ea3b:	add    BYTE PTR [rsi],al
 100ea3d:	add    BYTE PTR [rax],al
 100ea3f:	add    BYTE PTR [rax+0x100fc],ch
 100ea45:	add    BYTE PTR [rax],al
 100ea47:	add    BYTE PTR [rcx],al
 100ea49:	add    BYTE PTR [rax],al
 100ea4b:	add    BYTE PTR [rax],al
 100ea4d:	add    BYTE PTR [rax],al
 100ea4f:	add    al,dl
 100ea51:	and    BYTE PTR [rax],al
 100ea53:	add    DWORD PTR [rax],eax
 100ea55:	add    BYTE PTR [rax],al
 100ea57:	add    BYTE PTR [rdx],al
 100ea59:	add    BYTE PTR [rax],al
 100ea5b:	add    BYTE PTR [rsi],al
 100ea5d:	add    BYTE PTR [rax],al
 100ea5f:	add    al,al
 100ea61:	cld    
 100ea62:	add    BYTE PTR [rcx],al
 100ea64:	add    BYTE PTR [rax],al
 100ea66:	add    BYTE PTR [rax],al
 100ea68:	add    DWORD PTR [rax],eax
 100ea6a:	add    BYTE PTR [rax],al
 100ea6c:	add    BYTE PTR [rax],al
 100ea6e:	add    BYTE PTR [rax],al
 100ea70:	xor    BYTE PTR [rcx],ah
 100ea72:	add    BYTE PTR [rcx],al
 100ea74:	add    BYTE PTR [rax],al
 100ea76:	add    BYTE PTR [rax],al
 100ea78:	add    al,BYTE PTR [rax]
 100ea7a:	add    BYTE PTR [rax],al
 100ea7c:	(bad)  
 100ea7d:	add    BYTE PTR [rax],al
 100ea7f:	add    al,bl
 100ea81:	cld    
 100ea82:	add    BYTE PTR [rcx],al
 100ea84:	add    BYTE PTR [rax],al
 100ea86:	add    BYTE PTR [rax],al
 100ea88:	add    DWORD PTR [rax],eax
 100ea8a:	add    BYTE PTR [rax],al
 100ea8c:	add    BYTE PTR [rax],al
 100ea8e:	add    BYTE PTR [rax],al
 100ea90:	and    BYTE PTR [rcx],0x0
 100ea93:	add    DWORD PTR [rax],eax
 100ea95:	add    BYTE PTR [rax],al
 100ea97:	add    BYTE PTR [rdx],al
 100ea99:	add    BYTE PTR [rax],al
 100ea9b:	add    BYTE PTR [rsi],al
 100ea9d:	add    BYTE PTR [rax],al
 100ea9f:	add    al,dh
 100eaa1:	cld    
 100eaa2:	add    BYTE PTR [rcx],al
 100eaa4:	add    BYTE PTR [rax],al
 100eaa6:	add    BYTE PTR [rax],al
 100eaa8:	add    DWORD PTR [rax],eax
 100eaaa:	add    BYTE PTR [rax],al
 100eaac:	add    BYTE PTR [rax],al
 100eaae:	add    BYTE PTR [rax],al
 100eab0:	shl    BYTE PTR [rcx],1
 100eab2:	add    BYTE PTR [rcx],al
 100eab4:	add    BYTE PTR [rax],al
 100eab6:	add    BYTE PTR [rax],al
 100eab8:	add    al,BYTE PTR [rax]
 100eaba:	add    BYTE PTR [rax],al
 100eabc:	(bad)  
 100eabd:	add    BYTE PTR [rax],al
 100eabf:	add    BYTE PTR [rax],cl
 100eac1:	std    
 100eac2:	add    BYTE PTR [rcx],al
 100eac4:	add    BYTE PTR [rax],al
 100eac6:	add    BYTE PTR [rax],al
 100eac8:	add    DWORD PTR [rax],eax
 100eaca:	add    BYTE PTR [rax],al
 100eacc:	add    BYTE PTR [rax],al
 100eace:	add    BYTE PTR [rax],al
 100ead0:	mov    eax,0x10018
 100ead5:	add    BYTE PTR [rax],al
 100ead7:	add    BYTE PTR [rdx],al
 100ead9:	add    BYTE PTR [rax],al
 100eadb:	add    BYTE PTR [rbx],al
 100eadd:	add    BYTE PTR [rax],al
 100eadf:	add    BYTE PTR [rax-0x7],ah
 100eae2:	add    BYTE PTR [rcx],al
 100eae4:	add    BYTE PTR [rax],al
 100eae6:	add    BYTE PTR [rax],al
 100eae8:	add    DWORD PTR [rax],eax
 100eaea:	add    BYTE PTR [rax],al
 100eaec:	add    BYTE PTR [rax],al
 100eaee:	add    BYTE PTR [rax],al
 100eaf0:	sub    BYTE PTR [rip+0x100],bl        # 0x100ebf6
 100eaf6:	add    BYTE PTR [rax],al
 100eaf8:	add    al,BYTE PTR [rax]
 100eafa:	add    BYTE PTR [rax],al
 100eafc:	add    eax,DWORD PTR [rax]
 100eafe:	add    BYTE PTR [rax],al
 100eb00:	mov    bl,bh
 100eb02:	add    BYTE PTR [rcx],al
 100eb04:	add    BYTE PTR [rax],al
 100eb06:	add    BYTE PTR [rax],al
 100eb08:	add    DWORD PTR [rax],eax
 100eb0a:	add    BYTE PTR [rax],al
 100eb0c:	add    BYTE PTR [rax],al
 100eb0e:	add    BYTE PTR [rax],al
 100eb10:	rcr    BYTE PTR [rsi],1
 100eb12:	add    BYTE PTR [rcx],al
 100eb14:	add    BYTE PTR [rax],al
 100eb16:	add    BYTE PTR [rax],al
 100eb18:	add    al,BYTE PTR [rax]
 100eb1a:	add    BYTE PTR [rax],al
 100eb1c:	add    eax,DWORD PTR [rax]
 100eb1e:	add    BYTE PTR [rax],al
 100eb20:	rex.W cld 
 100eb22:	add    BYTE PTR [rcx],al
 100eb24:	add    BYTE PTR [rax],al
 100eb26:	add    BYTE PTR [rax],al
 100eb28:	add    DWORD PTR [rax],eax
 100eb2a:	add    BYTE PTR [rax],al
 100eb2c:	add    BYTE PTR [rax],al
 100eb2e:	add    BYTE PTR [rax],al
 100eb30:	lock (bad) 
 100eb32:	add    BYTE PTR [rcx],al
 100eb34:	add    BYTE PTR [rax],al
 100eb36:	add    BYTE PTR [rax],al
 100eb38:	add    al,BYTE PTR [rax]
 100eb3a:	add    BYTE PTR [rax],al
 100eb3c:	add    eax,DWORD PTR [rax]
 100eb3e:	add    BYTE PTR [rax],al
 100eb40:	(bad)  
 100eb41:	cld    
 100eb42:	add    BYTE PTR [rcx],al
 100eb44:	add    BYTE PTR [rax],al
 100eb46:	add    BYTE PTR [rax],al
 100eb48:	add    DWORD PTR [rax],eax
 100eb4a:	add    BYTE PTR [rax],al
 100eb4c:	add    BYTE PTR [rax],al
 100eb4e:	add    BYTE PTR [rax],al
 100eb50:	adc    BYTE PTR [rax],ah
 100eb52:	add    BYTE PTR [rcx],al
 100eb54:	add    BYTE PTR [rax],al
 100eb56:	add    BYTE PTR [rax],al
 100eb58:	add    al,BYTE PTR [rax]
 100eb5a:	add    BYTE PTR [rax],al
 100eb5c:	(bad)  
 100eb5d:	add    BYTE PTR [rax],al
 100eb5f:	add    BYTE PTR [rax-0x4],bh
 100eb62:	add    BYTE PTR [rcx],al
 100eb64:	add    BYTE PTR [rax],al
 100eb66:	add    BYTE PTR [rax],al
 100eb68:	add    DWORD PTR [rax],eax
 100eb6a:	add    BYTE PTR [rax],al
 100eb6c:	add    BYTE PTR [rax],al
 100eb6e:	add    BYTE PTR [rax],al
 100eb70:	(bad)  
 100eb71:	(bad)  
 100eb72:	add    BYTE PTR [rcx],al
 100eb74:	add    BYTE PTR [rax],al
 100eb76:	add    BYTE PTR [rax],al
 100eb78:	add    al,BYTE PTR [rax]
 100eb7a:	add    BYTE PTR [rax],al
 100eb7c:	or     al,BYTE PTR [rax]
 100eb7e:	add    BYTE PTR [rax],al
 100eb80:	clc    
 100eb81:	cli    
 100eb82:	add    BYTE PTR [rcx],al
 100eb84:	add    BYTE PTR [rax],al
 100eb86:	add    BYTE PTR [rax],al
 100eb88:	add    DWORD PTR [rax],eax
 100eb8a:	add    BYTE PTR [rax],al
 100eb8c:	add    BYTE PTR [rax],al
 100eb8e:	add    BYTE PTR [rax],al
 100eb90:	pop    rax
 100eb91:	and    BYTE PTR [rax],al
 100eb93:	add    DWORD PTR [rax],eax
 100eb95:	add    BYTE PTR [rax],al
 100eb97:	add    BYTE PTR [rdx],al
 100eb99:	add    BYTE PTR [rax],al
 100eb9b:	add    BYTE PTR [rbx],al
 100eb9d:	add    BYTE PTR [rax],al
 100eb9f:	add    BYTE PTR [rax+0x100fc],dl
 100eba5:	add    BYTE PTR [rax],al
 100eba7:	add    BYTE PTR [rcx],al
 100eba9:	add    BYTE PTR [rax],al
 100ebab:	add    BYTE PTR [rax],al
 100ebad:	add    BYTE PTR [rax],al
 100ebaf:	add    BYTE PTR [rax+0x10020],al
 100ebb5:	add    BYTE PTR [rax],al
 100ebb7:	add    BYTE PTR [rdx],al
 100ebb9:	add    BYTE PTR [rax],al
 100ebbb:	add    BYTE PTR [rsi],al
 100ebbd:	add    BYTE PTR [rax],al
 100ebbf:	add    BYTE PTR [rax+0x100fc],ch
 100ebc5:	add    BYTE PTR [rax],al
 100ebc7:	add    BYTE PTR [rcx],al
 100ebc9:	add    BYTE PTR [rax],al
 100ebcb:	add    BYTE PTR [rax],al
 100ebcd:	add    BYTE PTR [rax],al
 100ebcf:	add    al,dl
 100ebd1:	and    BYTE PTR [rax],al
 100ebd3:	add    DWORD PTR [rax],eax
 100ebd5:	add    BYTE PTR [rax],al
 100ebd7:	add    BYTE PTR [rdx],al
 100ebd9:	add    BYTE PTR [rax],al
 100ebdb:	add    BYTE PTR [rsi],al
 100ebdd:	add    BYTE PTR [rax],al
 100ebdf:	add    al,al
 100ebe1:	cld    
 100ebe2:	add    BYTE PTR [rcx],al
 100ebe4:	add    BYTE PTR [rax],al
 100ebe6:	add    BYTE PTR [rax],al
 100ebe8:	add    DWORD PTR [rax],eax
 100ebea:	add    BYTE PTR [rax],al
 100ebec:	add    BYTE PTR [rax],al
 100ebee:	add    BYTE PTR [rax],al
 100ebf0:	xor    BYTE PTR [rcx],ah
 100ebf2:	add    BYTE PTR [rcx],al
 100ebf4:	add    BYTE PTR [rax],al
 100ebf6:	add    BYTE PTR [rax],al
 100ebf8:	add    al,BYTE PTR [rax]
 100ebfa:	add    BYTE PTR [rax],al
 100ebfc:	(bad)  
 100ebfd:	add    BYTE PTR [rax],al
 100ebff:	add    al,bl
 100ec01:	cld    
 100ec02:	add    BYTE PTR [rcx],al
 100ec04:	add    BYTE PTR [rax],al
 100ec06:	add    BYTE PTR [rax],al
 100ec08:	add    DWORD PTR [rax],eax
 100ec0a:	add    BYTE PTR [rax],al
 100ec0c:	add    BYTE PTR [rax],al
 100ec0e:	add    BYTE PTR [rax],al
 100ec10:	and    BYTE PTR [rcx],0x0
 100ec13:	add    DWORD PTR [rax],eax
 100ec15:	add    BYTE PTR [rax],al
 100ec17:	add    BYTE PTR [rdx],al
 100ec19:	add    BYTE PTR [rax],al
 100ec1b:	add    BYTE PTR [rsi],al
 100ec1d:	add    BYTE PTR [rax],al
 100ec1f:	add    al,dh
 100ec21:	cld    
 100ec22:	add    BYTE PTR [rcx],al
 100ec24:	add    BYTE PTR [rax],al
 100ec26:	add    BYTE PTR [rax],al
 100ec28:	add    DWORD PTR [rax],eax
 100ec2a:	add    BYTE PTR [rax],al
 100ec2c:	add    BYTE PTR [rax],al
 100ec2e:	add    BYTE PTR [rax],al
 100ec30:	shl    BYTE PTR [rcx],1
 100ec32:	add    BYTE PTR [rcx],al
 100ec34:	add    BYTE PTR [rax],al
 100ec36:	add    BYTE PTR [rax],al
 100ec38:	add    al,BYTE PTR [rax]
 100ec3a:	add    BYTE PTR [rax],al
 100ec3c:	(bad)  
 100ec3d:	add    BYTE PTR [rax],al
 100ec3f:	add    BYTE PTR [rax],cl
 100ec41:	std    
 100ec42:	add    BYTE PTR [rcx],al
 100ec44:	add    BYTE PTR [rax],al
 100ec46:	add    BYTE PTR [rax],al
 100ec48:	add    DWORD PTR [rax],eax
 100ec4a:	add    BYTE PTR [rax],al
 100ec4c:	add    BYTE PTR [rax],al
 100ec4e:	add    BYTE PTR [rax],al
 100ec50:	sbb    al,0x1d
 100ec52:	add    BYTE PTR [rcx],al
 100ec54:	add    BYTE PTR [rax],al
 100ec56:	add    BYTE PTR [rax],al
 100ec58:	add    al,BYTE PTR [rax]
 100ec5a:	add    BYTE PTR [rax],al
 100ec5c:	add    eax,DWORD PTR [rax]
 100ec5e:	add    BYTE PTR [rax],al
 100ec60:	rex clc 
 100ec62:	add    BYTE PTR [rcx],al
 100ec64:	add    BYTE PTR [rax],al
 100ec66:	add    BYTE PTR [rax],al
 100ec68:	add    DWORD PTR [rax],eax
 100ec6a:	add    BYTE PTR [rax],al
 100ec6c:	add    BYTE PTR [rax],al
 100ec6e:	add    BYTE PTR [rax],al
 100ec70:	rcr    BYTE PTR [rax],1
 100ec72:	add    BYTE PTR [rcx],al
 100ec74:	add    BYTE PTR [rax],al
 100ec76:	add    BYTE PTR [rax],al
 100ec78:	add    al,BYTE PTR [rax]
 100ec7a:	add    BYTE PTR [rax],al
 100ec7c:	add    eax,DWORD PTR [rax]
 100ec7e:	add    BYTE PTR [rax],al
 100ec80:	pop    rax
 100ec81:	clc    
 100ec82:	add    BYTE PTR [rcx],al
 100ec84:	add    BYTE PTR [rax],al
 100ec86:	add    BYTE PTR [rax],al
 100ec88:	add    DWORD PTR [rax],eax
 100ec8a:	add    BYTE PTR [rax],al
 100ec8c:	add    BYTE PTR [rax],al
 100ec8e:	add    BYTE PTR [rax],al
 100ec90:	shl    BYTE PTR [rdx],1
 100ec92:	add    BYTE PTR [rcx],al
 100ec94:	add    BYTE PTR [rax],al
 100ec96:	add    BYTE PTR [rax],al
 100ec98:	add    al,BYTE PTR [rax]
 100ec9a:	add    BYTE PTR [rax],al
 100ec9c:	add    eax,DWORD PTR [rax]
 100ec9e:	add    BYTE PTR [rax],al
 100eca0:	jo     0x100ec9a
 100eca2:	add    BYTE PTR [rcx],al
 100eca4:	add    BYTE PTR [rax],al
 100eca6:	add    BYTE PTR [rax],al
 100eca8:	(bad)  
 100eca9:	add    BYTE PTR [rax],al
 100ecab:	add    BYTE PTR [rax],al
 100ecad:	add    BYTE PTR [rax],al
 100ecaf:	add    al,ch
 100ecb1:	and    al,BYTE PTR [rax]
 100ecb3:	add    DWORD PTR [rax],eax
 100ecb5:	add    BYTE PTR [rax],al
 100ecb7:	add    BYTE PTR [rdx],al
 100ecb9:	add    BYTE PTR [rax],al
 100ecbb:	add    BYTE PTR [rbx],al
 100ecbd:	add    BYTE PTR [rax],al
 100ecbf:	add    BYTE PTR [rax],bl
 100ecc1:	stc    
 100ecc2:	add    BYTE PTR [rcx],al
 100ecc4:	add    BYTE PTR [rax],al
 100ecc6:	add    BYTE PTR [rax],al
 100ecc8:	add    DWORD PTR [rax],eax
 100ecca:	add    BYTE PTR [rax],al
 100eccc:	add    BYTE PTR [rax],al
 100ecce:	add    BYTE PTR [rax],al
 100ecd0:	or     BYTE PTR [rbx],ah
 100ecd2:	add    BYTE PTR [rcx],al
 100ecd4:	add    BYTE PTR [rax],al
 100ecd6:	add    BYTE PTR [rax],al
 100ecd8:	add    al,BYTE PTR [rax]
 100ecda:	add    BYTE PTR [rax],al
 100ecdc:	add    eax,DWORD PTR [rax]
 100ecde:	add    BYTE PTR [rax],al
 100ece0:	xor    cl,bh
 100ece2:	add    BYTE PTR [rcx],al
 100ece4:	add    BYTE PTR [rax],al
 100ece6:	add    BYTE PTR [rax],al
 100ece8:	add    DWORD PTR [rax],eax
 100ecea:	add    BYTE PTR [rax],al
 100ecec:	add    BYTE PTR [rax],al
 100ecee:	add    BYTE PTR [rax],al
 100ecf0:	xor    BYTE PTR [rbx],ah
 100ecf2:	add    BYTE PTR [rcx],al
 100ecf4:	add    BYTE PTR [rax],al
 100ecf6:	add    BYTE PTR [rax],al
 100ecf8:	add    al,BYTE PTR [rax]
 100ecfa:	add    BYTE PTR [rax],al
 100ecfc:	add    eax,DWORD PTR [rax]
 100ecfe:	add    BYTE PTR [rax],al
 100ed00:	add    cl,bh
 100ed02:	add    BYTE PTR [rcx],al
 100ed04:	add    BYTE PTR [rax],al
 100ed06:	add    BYTE PTR [rax],al
 100ed08:	add    DWORD PTR [rax],eax
 100ed0a:	add    BYTE PTR [rax],al
 100ed0c:	add    BYTE PTR [rax],al
 100ed0e:	add    BYTE PTR [rax],al
 100ed10:	pop    rax
 100ed11:	and    eax,DWORD PTR [rax]
 100ed13:	add    DWORD PTR [rax],eax
 100ed15:	add    BYTE PTR [rax],al
 100ed17:	add    BYTE PTR [rdx],al
 100ed19:	add    BYTE PTR [rax],al
 100ed1b:	add    BYTE PTR [rbx],al
 100ed1d:	add    BYTE PTR [rax],al
 100ed1f:	add    BYTE PTR [rax-0x7],cl
 100ed22:	add    BYTE PTR [rcx],al
 100ed24:	add    BYTE PTR [rax],al
 100ed26:	add    BYTE PTR [rax],al
 100ed28:	add    DWORD PTR [rax],eax
 100ed2a:	add    BYTE PTR [rax],al
 100ed2c:	add    BYTE PTR [rax],al
 100ed2e:	add    BYTE PTR [rax],al
 100ed30:	mov    eax,0x10018
 100ed35:	add    BYTE PTR [rax],al
 100ed37:	add    BYTE PTR [rdx],al
 100ed39:	add    BYTE PTR [rax],al
 100ed3b:	add    BYTE PTR [rbx],al
 100ed3d:	add    BYTE PTR [rax],al
 100ed3f:	add    BYTE PTR [rax-0x7],ah
 100ed42:	add    BYTE PTR [rcx],al
 100ed44:	add    BYTE PTR [rax],al
 100ed46:	add    BYTE PTR [rax],al
 100ed48:	add    DWORD PTR [rax],eax
 100ed4a:	add    BYTE PTR [rax],al
 100ed4c:	add    BYTE PTR [rax],al
 100ed4e:	add    BYTE PTR [rax],al
 100ed50:	jo     0x100ed75
 100ed52:	add    BYTE PTR [rcx],al
 100ed54:	add    BYTE PTR [rax],al
 100ed56:	add    BYTE PTR [rax],al
 100ed58:	add    al,BYTE PTR [rax]
 100ed5a:	add    BYTE PTR [rax],al
 100ed5c:	add    eax,DWORD PTR [rax]
 100ed5e:	add    BYTE PTR [rax],al
 100ed60:	js     0x100ed5b
 100ed62:	add    BYTE PTR [rcx],al
 100ed64:	add    BYTE PTR [rax],al
 100ed66:	add    BYTE PTR [rax],al
 100ed68:	add    DWORD PTR [rax],eax
 100ed6a:	add    BYTE PTR [rax],al
 100ed6c:	add    BYTE PTR [rax],al
 100ed6e:	add    BYTE PTR [rax],al
 100ed70:	jo     0x100ed8f
 100ed72:	add    BYTE PTR [rcx],al
 100ed74:	add    BYTE PTR [rax],al
 100ed76:	add    BYTE PTR [rax],al
 100ed78:	add    al,BYTE PTR [rax]
 100ed7a:	add    BYTE PTR [rax],al
 100ed7c:	add    eax,DWORD PTR [rax]
 100ed7e:	add    BYTE PTR [rax],al
 100ed80:	nop
 100ed81:	stc    
 100ed82:	add    BYTE PTR [rcx],al
 100ed84:	add    BYTE PTR [rax],al
 100ed86:	add    BYTE PTR [rax],al
 100ed88:	add    DWORD PTR [rax],eax
 100ed8a:	add    BYTE PTR [rax],al
 100ed8c:	add    BYTE PTR [rax],al
 100ed8e:	add    BYTE PTR [rax],al
 100ed90:	movabs al,ds:0x200000000010023
 100ed99:	add    BYTE PTR [rax],al
 100ed9b:	add    BYTE PTR [rbx],al
 100ed9d:	add    BYTE PTR [rax],al
 100ed9f:	add    BYTE PTR [rax+0x100f9],ch
 100eda5:	add    BYTE PTR [rax],al
 100eda7:	add    BYTE PTR [rcx],al
 100eda9:	add    BYTE PTR [rax],al
 100edab:	add    BYTE PTR [rax],al
 100edad:	add    BYTE PTR [rax],al
 100edaf:	add    al,al
 100edb1:	and    eax,DWORD PTR [rax]
 100edb3:	add    DWORD PTR [rax],eax
 100edb5:	add    BYTE PTR [rax],al
 100edb7:	add    BYTE PTR [rdx],al
 100edb9:	add    BYTE PTR [rax],al
 100edbb:	add    BYTE PTR [rdx],cl
 100edbd:	add    BYTE PTR [rax],al
 100edbf:	add    al,al
 100edc1:	stc    
 100edc2:	add    BYTE PTR [rcx],al
 100edc4:	add    BYTE PTR [rax],al
 100edc6:	add    BYTE PTR [rax],al
 100edc8:	add    DWORD PTR [rax],eax
 100edca:	add    BYTE PTR [rax],al
 100edcc:	add    BYTE PTR [rax],al
 100edce:	add    BYTE PTR [rax],al
 100edd0:	cwde   
 100edd1:	(bad)  
 100edd2:	add    BYTE PTR [rcx],al
 100edd4:	add    BYTE PTR [rax],al
 100edd6:	add    BYTE PTR [rax],al
 100edd8:	add    al,BYTE PTR [rax]
 100edda:	add    BYTE PTR [rax],al
 100eddc:	(bad)  
 100eddd:	add    BYTE PTR [rax],al
 100eddf:	add    al,bl
 100ede1:	stc    
 100ede2:	add    BYTE PTR [rcx],al
 100ede4:	add    BYTE PTR [rax],al
 100ede6:	add    BYTE PTR [rax],al
 100ede8:	add    DWORD PTR [rax],eax
 100edea:	add    BYTE PTR [rax],al
 100edec:	add    BYTE PTR [rax],al
 100edee:	add    BYTE PTR [rax],al
 100edf0:	loopne 0x100ee15
 100edf2:	add    BYTE PTR [rcx],al
 100edf4:	add    BYTE PTR [rax],al
 100edf6:	add    BYTE PTR [rax],al
 100edf8:	add    al,BYTE PTR [rax]
 100edfa:	add    BYTE PTR [rax],al
 100edfc:	add    eax,DWORD PTR [rax]
 100edfe:	add    BYTE PTR [rax],al
 100ee00:	lock stc 
 100ee02:	add    BYTE PTR [rcx],al
 100ee04:	add    BYTE PTR [rax],al
 100ee06:	add    BYTE PTR [rax],al
 100ee08:	add    DWORD PTR [rax],eax
 100ee0a:	add    BYTE PTR [rax],al
 100ee0c:	add    BYTE PTR [rax],al
 100ee0e:	add    BYTE PTR [rax],al
 100ee10:	adc    BYTE PTR [rax+rax*1],ah
 100ee13:	add    DWORD PTR [rax],eax
 100ee15:	add    BYTE PTR [rax],al
 100ee17:	add    BYTE PTR [rdx],al
 100ee19:	add    BYTE PTR [rax],al
 100ee1b:	add    BYTE PTR [rdi],al
 100ee1d:	add    BYTE PTR [rax],al
 100ee1f:	add    BYTE PTR [rax],cl
 100ee21:	cli    
 100ee22:	add    BYTE PTR [rcx],al
 100ee24:	add    BYTE PTR [rax],al
 100ee26:	add    BYTE PTR [rax],al
 100ee28:	add    DWORD PTR [rax],eax
 100ee2a:	add    BYTE PTR [rax],al
 100ee2c:	add    BYTE PTR [rax],al
 100ee2e:	add    BYTE PTR [rax],al
 100ee30:	cmp    BYTE PTR [rax+rax*1],ah
 100ee33:	add    DWORD PTR [rax],eax
 100ee35:	add    BYTE PTR [rax],al
 100ee37:	add    BYTE PTR [rdx],al
 100ee39:	add    BYTE PTR [rax],al
 100ee3b:	add    BYTE PTR [rbx],al
 100ee3d:	add    BYTE PTR [rax],al
 100ee3f:	add    BYTE PTR [rax],ah
 100ee41:	cli    
 100ee42:	add    BYTE PTR [rcx],al
 100ee44:	add    BYTE PTR [rax],al
 100ee46:	add    BYTE PTR [rax],al
 100ee48:	add    DWORD PTR [rax],eax
 100ee4a:	add    BYTE PTR [rax],al
 100ee4c:	add    BYTE PTR [rax],al
 100ee4e:	add    BYTE PTR [rax],al
 100ee50:	(bad)  
 100ee51:	and    al,0x0
 100ee53:	add    DWORD PTR [rax],eax
 100ee55:	add    BYTE PTR [rax],al
 100ee57:	add    BYTE PTR [rdx],al
 100ee59:	add    BYTE PTR [rax],al
 100ee5b:	add    BYTE PTR [rdi],al
 100ee5d:	add    BYTE PTR [rax],al
 100ee5f:	add    BYTE PTR [rax],bh
 100ee61:	cli    
 100ee62:	add    BYTE PTR [rcx],al
 100ee64:	add    BYTE PTR [rax],al
 100ee66:	add    BYTE PTR [rax],al
 100ee68:	add    DWORD PTR [rax],eax
 100ee6a:	add    BYTE PTR [rax],al
 100ee6c:	add    BYTE PTR [rax],al
 100ee6e:	add    BYTE PTR [rax],al
 100ee70:	nop
 100ee71:	and    al,0x0
 100ee73:	add    DWORD PTR [rax],eax
 100ee75:	add    BYTE PTR [rax],al
 100ee77:	add    BYTE PTR [rdx],al
 100ee79:	add    BYTE PTR [rax],al
 100ee7b:	add    BYTE PTR [rsi],al
 100ee7d:	add    BYTE PTR [rax],al
 100ee7f:	add    BYTE PTR [rax-0x6],dl
 100ee82:	add    BYTE PTR [rcx],al
 100ee84:	add    BYTE PTR [rax],al
 100ee86:	add    BYTE PTR [rax],al
 100ee88:	add    DWORD PTR [rax],eax
 100ee8a:	add    BYTE PTR [rax],al
 100ee8c:	add    BYTE PTR [rax],al
 100ee8e:	add    BYTE PTR [rax],al
 100ee90:	mov    eax,0x10024
 100ee95:	add    BYTE PTR [rax],al
 100ee97:	add    BYTE PTR [rdx],al
 100ee99:	add    BYTE PTR [rax],al
 100ee9b:	add    BYTE PTR [rbx],al
 100ee9d:	add    BYTE PTR [rax],al
 100ee9f:	add    BYTE PTR [rax-0x6],ch
 100eea2:	add    BYTE PTR [rcx],al
 100eea4:	add    BYTE PTR [rax],al
 100eea6:	add    BYTE PTR [rax],al
 100eea8:	add    DWORD PTR [rax],eax
 100eeaa:	add    BYTE PTR [rax],al
 100eeac:	add    BYTE PTR [rax],al
 100eeae:	add    BYTE PTR [rax],al
 100eeb0:	loopne 0x100eed6
 100eeb2:	add    BYTE PTR [rcx],al
 100eeb4:	add    BYTE PTR [rax],al
 100eeb6:	add    BYTE PTR [rax],al
 100eeb8:	add    al,BYTE PTR [rax]
 100eeba:	add    BYTE PTR [rax],al
 100eebc:	add    eax,DWORD PTR [rax]
 100eebe:	add    BYTE PTR [rax],al
 100eec0:	cmp    dl,0x0
 100eec3:	add    DWORD PTR [rax],eax
 100eec5:	add    BYTE PTR [rax],al
 100eec7:	add    BYTE PTR [rcx],al
 100eec9:	add    BYTE PTR [rax],al
 100eecb:	add    BYTE PTR [rax],al
 100eecd:	add    BYTE PTR [rax],al
 100eecf:	add    BYTE PTR [rax],dl
 100eed1:	and    eax,0x100
 100eed6:	add    BYTE PTR [rax],al
 100eed8:	add    al,BYTE PTR [rax]
 100eeda:	add    BYTE PTR [rax],al
 100eedc:	add    eax,DWORD PTR [rax]
 100eede:	add    BYTE PTR [rax],al
 100eee0:	cwde   
 100eee1:	cli    
 100eee2:	add    BYTE PTR [rcx],al
 100eee4:	add    BYTE PTR [rax],al
 100eee6:	add    BYTE PTR [rax],al
 100eee8:	add    DWORD PTR [rax],eax
 100eeea:	add    BYTE PTR [rax],al
 100eeec:	add    BYTE PTR [rax],al
 100eeee:	add    BYTE PTR [rax],al
 100eef0:	sub    BYTE PTR [rip+0x100],ah        # 0x100eff6
 100eef6:	add    BYTE PTR [rax],al
 100eef8:	add    al,BYTE PTR [rax]
 100eefa:	add    BYTE PTR [rax],al
 100eefc:	add    eax,DWORD PTR [rax]
 100eefe:	add    BYTE PTR [rax],al
 100ef00:	mov    al,0xfa
 100ef02:	add    BYTE PTR [rcx],al
 100ef04:	add    BYTE PTR [rax],al
 100ef06:	add    BYTE PTR [rax],al
 100ef08:	add    DWORD PTR [rax],eax
 100ef0a:	add    BYTE PTR [rax],al
 100ef0c:	add    BYTE PTR [rax],al
 100ef0e:	add    BYTE PTR [rax],al
 100ef10:	and    rax,0x100
 100ef16:	add    BYTE PTR [rax],al
 100ef18:	add    al,BYTE PTR [rax]
 100ef1a:	add    BYTE PTR [rax],al
 100ef1c:	add    eax,DWORD PTR [rax]
 100ef1e:	add    BYTE PTR [rax],al
 100ef20:	enter  0xfa,0x1
 100ef24:	add    BYTE PTR [rax],al
 100ef26:	add    BYTE PTR [rax],al
 100ef28:	add    DWORD PTR [rax],eax
 100ef2a:	add    BYTE PTR [rax],al
 100ef2c:	add    BYTE PTR [rax],al
 100ef2e:	add    BYTE PTR [rax],al
 100ef30:	jo     0x100ef57
 100ef32:	add    BYTE PTR [rcx],al
 100ef34:	add    BYTE PTR [rax],al
 100ef36:	add    BYTE PTR [rax],al
 100ef38:	add    al,BYTE PTR [rax]
 100ef3a:	add    BYTE PTR [rax],al
 100ef3c:	add    eax,DWORD PTR [rax]
 100ef3e:	add    BYTE PTR [rax],al
 100ef40:	loopne 0x100ef3c
 100ef42:	add    BYTE PTR [rcx],al
 100ef44:	add    BYTE PTR [rax],al
 100ef46:	add    BYTE PTR [rax],al
 100ef48:	add    DWORD PTR [rax],eax
 100ef4a:	add    BYTE PTR [rax],al
 100ef4c:	add    BYTE PTR [rax],al
 100ef4e:	add    BYTE PTR [rax],al
 100ef50:	(bad)  
 100ef51:	(bad)  
 100ef52:	add    BYTE PTR [rcx],al
 100ef54:	add    BYTE PTR [rax],al
 100ef56:	add    BYTE PTR [rax],al
 100ef58:	add    al,BYTE PTR [rax]
 100ef5a:	add    BYTE PTR [rax],al
 100ef5c:	or     al,BYTE PTR [rax]
 100ef5e:	add    BYTE PTR [rax],al
 100ef60:	clc    
 100ef61:	cli    
 100ef62:	add    BYTE PTR [rcx],al
 100ef64:	add    BYTE PTR [rax],al
 100ef66:	add    BYTE PTR [rax],al
 100ef68:	add    DWORD PTR [rax],eax
 100ef6a:	add    BYTE PTR [rax],al
 100ef6c:	add    BYTE PTR [rax],al
 100ef6e:	add    BYTE PTR [rax],al
 100ef70:	call   0x101ef93
 100ef75:	add    BYTE PTR [rax],al
 100ef77:	add    BYTE PTR [rdx],al
 100ef79:	add    BYTE PTR [rax],al
 100ef7b:	add    BYTE PTR [rbx],al
 100ef7d:	add    BYTE PTR [rax],al
 100ef7f:	add    BYTE PTR [rax],dl
 100ef81:	sti    
 100ef82:	add    BYTE PTR [rcx],al
 100ef84:	add    BYTE PTR [rax],al
 100ef86:	add    BYTE PTR [rax],al
 100ef88:	add    DWORD PTR [rax],eax
 100ef8a:	add    BYTE PTR [rax],al
 100ef8c:	add    BYTE PTR [rax],al
 100ef8e:	add    BYTE PTR [rax],al
 100ef90:	sbb    BYTE PTR [rsi],0x0
 100ef93:	add    DWORD PTR [rax],eax
 100ef95:	add    BYTE PTR [rax],al
 100ef97:	add    BYTE PTR [rdx],al
 100ef99:	add    BYTE PTR [rax],al
 100ef9b:	add    BYTE PTR [rbx],al
 100ef9d:	add    BYTE PTR [rax],al
 100ef9f:	add    BYTE PTR [rax],ch
 100efa1:	sti    
 100efa2:	add    BYTE PTR [rcx],al
 100efa4:	add    BYTE PTR [rax],al
 100efa6:	add    BYTE PTR [rax],al
 100efa8:	add    DWORD PTR [rax],eax
 100efaa:	add    BYTE PTR [rax],al
 100efac:	add    BYTE PTR [rax],al
 100efae:	add    BYTE PTR [rax],al
 100efb0:	nop
 100efb1:	and    eax,0x100
 100efb6:	add    BYTE PTR [rax],al
 100efb8:	add    al,BYTE PTR [rax]
 100efba:	add    BYTE PTR [rax],al
 100efbc:	add    eax,DWORD PTR [rax]
 100efbe:	add    BYTE PTR [rax],al
 100efc0:	rex sti 
 100efc2:	add    BYTE PTR [rcx],al
 100efc4:	add    BYTE PTR [rax],al
 100efc6:	add    BYTE PTR [rax],al
 100efc8:	add    DWORD PTR [rax],eax
 100efca:	add    BYTE PTR [rax],al
 100efcc:	add    BYTE PTR [rax],al
 100efce:	add    BYTE PTR [rax],al
 100efd0:	mov    eax,0x10025
 100efd5:	add    BYTE PTR [rax],al
 100efd7:	add    BYTE PTR [rdx],al
 100efd9:	add    BYTE PTR [rax],al
 100efdb:	add    BYTE PTR [rbx],al
 100efdd:	add    BYTE PTR [rax],al
 100efdf:	add    BYTE PTR [rax-0x5],bl
 100efe2:	add    BYTE PTR [rcx],al
 100efe4:	add    BYTE PTR [rax],al
 100efe6:	add    BYTE PTR [rax],al
 100efe8:	add    DWORD PTR [rax],eax
 100efea:	add    BYTE PTR [rax],al
 100efec:	add    BYTE PTR [rax],al
 100efee:	add    BYTE PTR [rax],al
 100eff0:	loopne 0x100f017
 100eff2:	add    BYTE PTR [rcx],al
 100eff4:	add    BYTE PTR [rax],al
 100eff6:	add    BYTE PTR [rax],al
 100eff8:	add    al,BYTE PTR [rax]
 100effa:	add    BYTE PTR [rax],al
 100effc:	add    eax,DWORD PTR [rax]
 100effe:	add    BYTE PTR [rax],al
 100f000:	jo     0x100effd
 100f002:	add    BYTE PTR [rcx],al
 100f004:	add    BYTE PTR [rax],al
 100f006:	add    BYTE PTR [rax],al
 100f008:	add    DWORD PTR [rax],eax
 100f00a:	add    BYTE PTR [rax],al
 100f00c:	add    BYTE PTR [rax],al
 100f00e:	add    BYTE PTR [rax],al
 100f010:	mov    al,0x1e
 100f012:	add    BYTE PTR [rcx],al
 100f014:	add    BYTE PTR [rax],al
 100f016:	add    BYTE PTR [rax],al
 100f018:	add    al,BYTE PTR [rax]
 100f01a:	add    BYTE PTR [rax],al
 100f01c:	add    eax,DWORD PTR [rax]
 100f01e:	add    BYTE PTR [rax],al
 100f020:	mov    al,0xfd
 100f022:	add    BYTE PTR [rcx],al
 100f024:	add    BYTE PTR [rax],al
 100f026:	add    BYTE PTR [rax],al
 100f028:	add    eax,0x0
 100f02d:	add    BYTE PTR [rax],al
 100f02f:	add    BYTE PTR [rax+0x10018],bh
 100f035:	add    BYTE PTR [rax],al
 100f037:	add    BYTE PTR [rdx],al
 100f039:	add    BYTE PTR [rax],al
 100f03b:	add    BYTE PTR [rbx],al
 100f03d:	add    BYTE PTR [rax],al
 100f03f:	add    BYTE PTR [rax-0x7],ah
 100f042:	add    BYTE PTR [rcx],al
 100f044:	add    BYTE PTR [rax],al
 100f046:	add    BYTE PTR [rax],al
 100f048:	add    DWORD PTR [rax],eax
 100f04a:	add    BYTE PTR [rax],al
 100f04c:	add    BYTE PTR [rax],al
 100f04e:	add    BYTE PTR [rax],al
 100f050:	jo     0x100f075
 100f052:	add    BYTE PTR [rcx],al
 100f054:	add    BYTE PTR [rax],al
 100f056:	add    BYTE PTR [rax],al
 100f058:	add    al,BYTE PTR [rax]
 100f05a:	add    BYTE PTR [rax],al
 100f05c:	add    eax,DWORD PTR [rax]
 100f05e:	add    BYTE PTR [rax],al
 100f060:	js     0x100f05b
 100f062:	add    BYTE PTR [rcx],al
 100f064:	add    BYTE PTR [rax],al
 100f066:	add    BYTE PTR [rax],al
 100f068:	add    DWORD PTR [rax],eax
 100f06a:	add    BYTE PTR [rax],al
 100f06c:	add    BYTE PTR [rax],al
 100f06e:	add    BYTE PTR [rax],al
 100f070:	jo     0x100f08f
 100f072:	add    BYTE PTR [rcx],al
 100f074:	add    BYTE PTR [rax],al
 100f076:	add    BYTE PTR [rax],al
 100f078:	add    al,BYTE PTR [rax]
 100f07a:	add    BYTE PTR [rax],al
 100f07c:	add    eax,DWORD PTR [rax]
 100f07e:	add    BYTE PTR [rax],al
 100f080:	nop
 100f081:	stc    
 100f082:	add    BYTE PTR [rcx],al
 100f084:	add    BYTE PTR [rax],al
 100f086:	add    BYTE PTR [rax],al
 100f088:	add    DWORD PTR [rax],eax
 100f08a:	add    BYTE PTR [rax],al
 100f08c:	add    BYTE PTR [rax],al
 100f08e:	add    BYTE PTR [rax],al
 100f090:	movabs al,ds:0x200000000010023
 100f099:	add    BYTE PTR [rax],al
 100f09b:	add    BYTE PTR [rbx],al
 100f09d:	add    BYTE PTR [rax],al
 100f09f:	add    BYTE PTR [rax+0x100f9],ch
 100f0a5:	add    BYTE PTR [rax],al
 100f0a7:	add    BYTE PTR [rcx],al
 100f0a9:	add    BYTE PTR [rax],al
 100f0ab:	add    BYTE PTR [rax],al
 100f0ad:	add    BYTE PTR [rax],al
 100f0af:	add    al,al
 100f0b1:	and    eax,DWORD PTR [rax]
 100f0b3:	add    DWORD PTR [rax],eax
 100f0b5:	add    BYTE PTR [rax],al
 100f0b7:	add    BYTE PTR [rdx],al
 100f0b9:	add    BYTE PTR [rax],al
 100f0bb:	add    BYTE PTR [rdx],cl
 100f0bd:	add    BYTE PTR [rax],al
 100f0bf:	add    al,al
 100f0c1:	stc    
 100f0c2:	add    BYTE PTR [rcx],al
 100f0c4:	add    BYTE PTR [rax],al
 100f0c6:	add    BYTE PTR [rax],al
 100f0c8:	add    DWORD PTR [rax],eax
 100f0ca:	add    BYTE PTR [rax],al
 100f0cc:	add    BYTE PTR [rax],al
 100f0ce:	add    BYTE PTR [rax],al
 100f0d0:	cwde   
 100f0d1:	(bad)  
 100f0d2:	add    BYTE PTR [rcx],al
 100f0d4:	add    BYTE PTR [rax],al
 100f0d6:	add    BYTE PTR [rax],al
 100f0d8:	add    al,BYTE PTR [rax]
 100f0da:	add    BYTE PTR [rax],al
 100f0dc:	(bad)  
 100f0dd:	add    BYTE PTR [rax],al
 100f0df:	add    al,bl
 100f0e1:	stc    
 100f0e2:	add    BYTE PTR [rcx],al
 100f0e4:	add    BYTE PTR [rax],al
 100f0e6:	add    BYTE PTR [rax],al
 100f0e8:	add    DWORD PTR [rax],eax
 100f0ea:	add    BYTE PTR [rax],al
 100f0ec:	add    BYTE PTR [rax],al
 100f0ee:	add    BYTE PTR [rax],al
 100f0f0:	loopne 0x100f115
 100f0f2:	add    BYTE PTR [rcx],al
 100f0f4:	add    BYTE PTR [rax],al
 100f0f6:	add    BYTE PTR [rax],al
 100f0f8:	add    al,BYTE PTR [rax]
 100f0fa:	add    BYTE PTR [rax],al
 100f0fc:	add    eax,DWORD PTR [rax]
 100f0fe:	add    BYTE PTR [rax],al
 100f100:	lock stc 
 100f102:	add    BYTE PTR [rcx],al
 100f104:	add    BYTE PTR [rax],al
 100f106:	add    BYTE PTR [rax],al
 100f108:	add    DWORD PTR [rax],eax
 100f10a:	add    BYTE PTR [rax],al
 100f10c:	add    BYTE PTR [rax],al
 100f10e:	add    BYTE PTR [rax],al
 100f110:	adc    BYTE PTR [rax+rax*1],ah
 100f113:	add    DWORD PTR [rax],eax
 100f115:	add    BYTE PTR [rax],al
 100f117:	add    BYTE PTR [rdx],al
 100f119:	add    BYTE PTR [rax],al
 100f11b:	add    BYTE PTR [rdi],al
 100f11d:	add    BYTE PTR [rax],al
 100f11f:	add    BYTE PTR [rax],cl
 100f121:	cli    
 100f122:	add    BYTE PTR [rcx],al
 100f124:	add    BYTE PTR [rax],al
 100f126:	add    BYTE PTR [rax],al
 100f128:	add    DWORD PTR [rax],eax
 100f12a:	add    BYTE PTR [rax],al
 100f12c:	add    BYTE PTR [rax],al
 100f12e:	add    BYTE PTR [rax],al
 100f130:	cmp    BYTE PTR [rax+rax*1],ah
 100f133:	add    DWORD PTR [rax],eax
 100f135:	add    BYTE PTR [rax],al
 100f137:	add    BYTE PTR [rdx],al
 100f139:	add    BYTE PTR [rax],al
 100f13b:	add    BYTE PTR [rbx],al
 100f13d:	add    BYTE PTR [rax],al
 100f13f:	add    BYTE PTR [rax],ah
 100f141:	cli    
 100f142:	add    BYTE PTR [rcx],al
 100f144:	add    BYTE PTR [rax],al
 100f146:	add    BYTE PTR [rax],al
 100f148:	add    DWORD PTR [rax],eax
 100f14a:	add    BYTE PTR [rax],al
 100f14c:	add    BYTE PTR [rax],al
 100f14e:	add    BYTE PTR [rax],al
 100f150:	(bad)  
 100f151:	and    al,0x0
 100f153:	add    DWORD PTR [rax],eax
 100f155:	add    BYTE PTR [rax],al
 100f157:	add    BYTE PTR [rdx],al
 100f159:	add    BYTE PTR [rax],al
 100f15b:	add    BYTE PTR [rdi],al
 100f15d:	add    BYTE PTR [rax],al
 100f15f:	add    BYTE PTR [rax],bh
 100f161:	cli    
 100f162:	add    BYTE PTR [rcx],al
 100f164:	add    BYTE PTR [rax],al
 100f166:	add    BYTE PTR [rax],al
 100f168:	add    DWORD PTR [rax],eax
 100f16a:	add    BYTE PTR [rax],al
 100f16c:	add    BYTE PTR [rax],al
 100f16e:	add    BYTE PTR [rax],al
 100f170:	nop
 100f171:	and    al,0x0
 100f173:	add    DWORD PTR [rax],eax
 100f175:	add    BYTE PTR [rax],al
 100f177:	add    BYTE PTR [rdx],al
 100f179:	add    BYTE PTR [rax],al
 100f17b:	add    BYTE PTR [rsi],al
 100f17d:	add    BYTE PTR [rax],al
 100f17f:	add    BYTE PTR [rax-0x6],dl
 100f182:	add    BYTE PTR [rcx],al
 100f184:	add    BYTE PTR [rax],al
 100f186:	add    BYTE PTR [rax],al
 100f188:	add    DWORD PTR [rax],eax
 100f18a:	add    BYTE PTR [rax],al
 100f18c:	add    BYTE PTR [rax],al
 100f18e:	add    BYTE PTR [rax],al
 100f190:	mov    eax,0x10024
 100f195:	add    BYTE PTR [rax],al
 100f197:	add    BYTE PTR [rdx],al
 100f199:	add    BYTE PTR [rax],al
 100f19b:	add    BYTE PTR [rbx],al
 100f19d:	add    BYTE PTR [rax],al
 100f19f:	add    BYTE PTR [rax-0x6],ch
 100f1a2:	add    BYTE PTR [rcx],al
 100f1a4:	add    BYTE PTR [rax],al
 100f1a6:	add    BYTE PTR [rax],al
 100f1a8:	add    DWORD PTR [rax],eax
 100f1aa:	add    BYTE PTR [rax],al
 100f1ac:	add    BYTE PTR [rax],al
 100f1ae:	add    BYTE PTR [rax],al
 100f1b0:	loopne 0x100f1d6
 100f1b2:	add    BYTE PTR [rcx],al
 100f1b4:	add    BYTE PTR [rax],al
 100f1b6:	add    BYTE PTR [rax],al
 100f1b8:	add    al,BYTE PTR [rax]
 100f1ba:	add    BYTE PTR [rax],al
 100f1bc:	add    eax,DWORD PTR [rax]
 100f1be:	add    BYTE PTR [rax],al
 100f1c0:	cmp    dl,0x0
 100f1c3:	add    DWORD PTR [rax],eax
 100f1c5:	add    BYTE PTR [rax],al
 100f1c7:	add    BYTE PTR [rcx],al
 100f1c9:	add    BYTE PTR [rax],al
 100f1cb:	add    BYTE PTR [rax],al
 100f1cd:	add    BYTE PTR [rax],al
 100f1cf:	add    BYTE PTR [rax],dl
 100f1d1:	and    eax,0x100
 100f1d6:	add    BYTE PTR [rax],al
 100f1d8:	add    al,BYTE PTR [rax]
 100f1da:	add    BYTE PTR [rax],al
 100f1dc:	add    eax,DWORD PTR [rax]
 100f1de:	add    BYTE PTR [rax],al
 100f1e0:	cwde   
 100f1e1:	cli    
 100f1e2:	add    BYTE PTR [rcx],al
 100f1e4:	add    BYTE PTR [rax],al
 100f1e6:	add    BYTE PTR [rax],al
 100f1e8:	add    DWORD PTR [rax],eax
 100f1ea:	add    BYTE PTR [rax],al
 100f1ec:	add    BYTE PTR [rax],al
 100f1ee:	add    BYTE PTR [rax],al
 100f1f0:	sub    BYTE PTR [rip+0x100],ah        # 0x100f2f6
 100f1f6:	add    BYTE PTR [rax],al
 100f1f8:	add    al,BYTE PTR [rax]
 100f1fa:	add    BYTE PTR [rax],al
 100f1fc:	add    eax,DWORD PTR [rax]
 100f1fe:	add    BYTE PTR [rax],al
 100f200:	mov    al,0xfa
 100f202:	add    BYTE PTR [rcx],al
 100f204:	add    BYTE PTR [rax],al
 100f206:	add    BYTE PTR [rax],al
 100f208:	add    DWORD PTR [rax],eax
 100f20a:	add    BYTE PTR [rax],al
 100f20c:	add    BYTE PTR [rax],al
 100f20e:	add    BYTE PTR [rax],al
 100f210:	and    rax,0x100
 100f216:	add    BYTE PTR [rax],al
 100f218:	add    al,BYTE PTR [rax]
 100f21a:	add    BYTE PTR [rax],al
 100f21c:	add    eax,DWORD PTR [rax]
 100f21e:	add    BYTE PTR [rax],al
 100f220:	enter  0xfa,0x1
 100f224:	add    BYTE PTR [rax],al
 100f226:	add    BYTE PTR [rax],al
 100f228:	add    DWORD PTR [rax],eax
 100f22a:	add    BYTE PTR [rax],al
 100f22c:	add    BYTE PTR [rax],al
 100f22e:	add    BYTE PTR [rax],al
 100f230:	jo     0x100f257
 100f232:	add    BYTE PTR [rcx],al
 100f234:	add    BYTE PTR [rax],al
 100f236:	add    BYTE PTR [rax],al
 100f238:	add    al,BYTE PTR [rax]
 100f23a:	add    BYTE PTR [rax],al
 100f23c:	add    eax,DWORD PTR [rax]
 100f23e:	add    BYTE PTR [rax],al
 100f240:	loopne 0x100f23c
 100f242:	add    BYTE PTR [rcx],al
 100f244:	add    BYTE PTR [rax],al
 100f246:	add    BYTE PTR [rax],al
 100f248:	add    DWORD PTR [rax],eax
 100f24a:	add    BYTE PTR [rax],al
 100f24c:	add    BYTE PTR [rax],al
 100f24e:	add    BYTE PTR [rax],al
 100f250:	(bad)  
 100f251:	(bad)  
 100f252:	add    BYTE PTR [rcx],al
 100f254:	add    BYTE PTR [rax],al
 100f256:	add    BYTE PTR [rax],al
 100f258:	add    al,BYTE PTR [rax]
 100f25a:	add    BYTE PTR [rax],al
 100f25c:	or     al,BYTE PTR [rax]
 100f25e:	add    BYTE PTR [rax],al
 100f260:	clc    
 100f261:	cli    
 100f262:	add    BYTE PTR [rcx],al
 100f264:	add    BYTE PTR [rax],al
 100f266:	add    BYTE PTR [rax],al
 100f268:	add    DWORD PTR [rax],eax
 100f26a:	add    BYTE PTR [rax],al
 100f26c:	add    BYTE PTR [rax],al
 100f26e:	add    BYTE PTR [rax],al
 100f270:	call   0x101f293
 100f275:	add    BYTE PTR [rax],al
 100f277:	add    BYTE PTR [rdx],al
 100f279:	add    BYTE PTR [rax],al
 100f27b:	add    BYTE PTR [rbx],al
 100f27d:	add    BYTE PTR [rax],al
 100f27f:	add    BYTE PTR [rax],dl
 100f281:	sti    
 100f282:	add    BYTE PTR [rcx],al
 100f284:	add    BYTE PTR [rax],al
 100f286:	add    BYTE PTR [rax],al
 100f288:	add    DWORD PTR [rax],eax
 100f28a:	add    BYTE PTR [rax],al
 100f28c:	add    BYTE PTR [rax],al
 100f28e:	add    BYTE PTR [rax],al
 100f290:	sbb    BYTE PTR [rsi],0x0
 100f293:	add    DWORD PTR [rax],eax
 100f295:	add    BYTE PTR [rax],al
 100f297:	add    BYTE PTR [rdx],al
 100f299:	add    BYTE PTR [rax],al
 100f29b:	add    BYTE PTR [rbx],al
 100f29d:	add    BYTE PTR [rax],al
 100f29f:	add    BYTE PTR [rax],ch
 100f2a1:	sti    
 100f2a2:	add    BYTE PTR [rcx],al
 100f2a4:	add    BYTE PTR [rax],al
 100f2a6:	add    BYTE PTR [rax],al
 100f2a8:	add    DWORD PTR [rax],eax
 100f2aa:	add    BYTE PTR [rax],al
 100f2ac:	add    BYTE PTR [rax],al
 100f2ae:	add    BYTE PTR [rax],al
 100f2b0:	nop
 100f2b1:	and    eax,0x100
 100f2b6:	add    BYTE PTR [rax],al
 100f2b8:	add    al,BYTE PTR [rax]
 100f2ba:	add    BYTE PTR [rax],al
 100f2bc:	add    eax,DWORD PTR [rax]
 100f2be:	add    BYTE PTR [rax],al
 100f2c0:	rex sti 
 100f2c2:	add    BYTE PTR [rcx],al
 100f2c4:	add    BYTE PTR [rax],al
 100f2c6:	add    BYTE PTR [rax],al
 100f2c8:	add    DWORD PTR [rax],eax
 100f2ca:	add    BYTE PTR [rax],al
 100f2cc:	add    BYTE PTR [rax],al
 100f2ce:	add    BYTE PTR [rax],al
 100f2d0:	mov    eax,0x10025
 100f2d5:	add    BYTE PTR [rax],al
 100f2d7:	add    BYTE PTR [rdx],al
 100f2d9:	add    BYTE PTR [rax],al
 100f2db:	add    BYTE PTR [rbx],al
 100f2dd:	add    BYTE PTR [rax],al
 100f2df:	add    BYTE PTR [rax-0x5],bl
 100f2e2:	add    BYTE PTR [rcx],al
 100f2e4:	add    BYTE PTR [rax],al
 100f2e6:	add    BYTE PTR [rax],al
 100f2e8:	add    DWORD PTR [rax],eax
 100f2ea:	add    BYTE PTR [rax],al
 100f2ec:	add    BYTE PTR [rax],al
 100f2ee:	add    BYTE PTR [rax],al
 100f2f0:	loopne 0x100f317
 100f2f2:	add    BYTE PTR [rcx],al
 100f2f4:	add    BYTE PTR [rax],al
 100f2f6:	add    BYTE PTR [rax],al
 100f2f8:	add    al,BYTE PTR [rax]
 100f2fa:	add    BYTE PTR [rax],al
 100f2fc:	add    eax,DWORD PTR [rax]
 100f2fe:	add    BYTE PTR [rax],al
 100f300:	jo     0x100f2fd
 100f302:	add    BYTE PTR [rcx],al
 100f304:	add    BYTE PTR [rax],al
 100f306:	add    BYTE PTR [rax],al
 100f308:	add    DWORD PTR [rax],eax
 100f30a:	add    BYTE PTR [rax],al
 100f30c:	add    BYTE PTR [rax],al
 100f30e:	add    BYTE PTR [rax],al
 100f310:	mov    al,0x1e
 100f312:	add    BYTE PTR [rcx],al
 100f314:	add    BYTE PTR [rax],al
 100f316:	add    BYTE PTR [rax],al
 100f318:	add    al,BYTE PTR [rax]
 100f31a:	add    BYTE PTR [rax],al
 100f31c:	add    eax,DWORD PTR [rax]
 100f31e:	add    BYTE PTR [rax],al
 100f320:	mov    al,0xfd
 100f322:	add    BYTE PTR [rcx],al
 100f324:	add    BYTE PTR [rax],al
 100f326:	add    BYTE PTR [rax],al
 100f328:	add    eax,0x0
 100f32d:	add    BYTE PTR [rax],al
 100f32f:	add    BYTE PTR [rax+0x1e],ah
 100f332:	add    BYTE PTR [rcx],al
 100f334:	add    BYTE PTR [rax],al
 100f336:	add    BYTE PTR [rax],al
 100f338:	add    al,BYTE PTR [rax]
 100f33a:	add    BYTE PTR [rax],al
 100f33c:	or     al,BYTE PTR [rax]
 100f33e:	add    BYTE PTR [rax],al
 100f340:	clc    
 100f341:	cli    
 100f342:	add    BYTE PTR [rcx],al
 100f344:	add    BYTE PTR [rax],al
 100f346:	add    BYTE PTR [rax],al
 100f348:	add    DWORD PTR [rax],eax
 100f34a:	add    BYTE PTR [rax],al
 100f34c:	add    BYTE PTR [rax],al
 100f34e:	add    BYTE PTR [rax],al
 100f350:	mov    eax,0x10018
 100f355:	add    BYTE PTR [rax],al
 100f357:	add    BYTE PTR [rdx],al
 100f359:	add    BYTE PTR [rax],al
 100f35b:	add    BYTE PTR [rbx],al
 100f35d:	add    BYTE PTR [rax],al
 100f35f:	add    BYTE PTR [rax-0x7],ah
 100f362:	add    BYTE PTR [rcx],al
 100f364:	add    BYTE PTR [rax],al
 100f366:	add    BYTE PTR [rax],al
 100f368:	add    DWORD PTR [rax],eax
 100f36a:	add    BYTE PTR [rax],al
 100f36c:	add    BYTE PTR [rax],al
 100f36e:	add    BYTE PTR [rax],al
 100f370:	jo     0x100f395
 100f372:	add    BYTE PTR [rcx],al
 100f374:	add    BYTE PTR [rax],al
 100f376:	add    BYTE PTR [rax],al
 100f378:	add    al,BYTE PTR [rax]
 100f37a:	add    BYTE PTR [rax],al
 100f37c:	add    eax,DWORD PTR [rax]
 100f37e:	add    BYTE PTR [rax],al
 100f380:	js     0x100f37b
 100f382:	add    BYTE PTR [rcx],al
 100f384:	add    BYTE PTR [rax],al
 100f386:	add    BYTE PTR [rax],al
 100f388:	add    DWORD PTR [rax],eax
 100f38a:	add    BYTE PTR [rax],al
 100f38c:	add    BYTE PTR [rax],al
 100f38e:	add    BYTE PTR [rax],al
 100f390:	jo     0x100f3af
 100f392:	add    BYTE PTR [rcx],al
 100f394:	add    BYTE PTR [rax],al
 100f396:	add    BYTE PTR [rax],al
 100f398:	add    al,BYTE PTR [rax]
 100f39a:	add    BYTE PTR [rax],al
 100f39c:	add    eax,DWORD PTR [rax]
 100f39e:	add    BYTE PTR [rax],al
 100f3a0:	nop
 100f3a1:	stc    
 100f3a2:	add    BYTE PTR [rcx],al
 100f3a4:	add    BYTE PTR [rax],al
 100f3a6:	add    BYTE PTR [rax],al
 100f3a8:	add    DWORD PTR [rax],eax
 100f3aa:	add    BYTE PTR [rax],al
 100f3ac:	add    BYTE PTR [rax],al
 100f3ae:	add    BYTE PTR [rax],al
 100f3b0:	movabs al,ds:0x200000000010023
 100f3b9:	add    BYTE PTR [rax],al
 100f3bb:	add    BYTE PTR [rbx],al
 100f3bd:	add    BYTE PTR [rax],al
 100f3bf:	add    BYTE PTR [rax+0x100f9],ch
 100f3c5:	add    BYTE PTR [rax],al
 100f3c7:	add    BYTE PTR [rcx],al
 100f3c9:	add    BYTE PTR [rax],al
 100f3cb:	add    BYTE PTR [rax],al
 100f3cd:	add    BYTE PTR [rax],al
 100f3cf:	add    al,al
 100f3d1:	and    eax,DWORD PTR [rax]
 100f3d3:	add    DWORD PTR [rax],eax
 100f3d5:	add    BYTE PTR [rax],al
 100f3d7:	add    BYTE PTR [rdx],al
 100f3d9:	add    BYTE PTR [rax],al
 100f3db:	add    BYTE PTR [rdx],cl
 100f3dd:	add    BYTE PTR [rax],al
 100f3df:	add    al,al
 100f3e1:	stc    
 100f3e2:	add    BYTE PTR [rcx],al
 100f3e4:	add    BYTE PTR [rax],al
 100f3e6:	add    BYTE PTR [rax],al
 100f3e8:	add    DWORD PTR [rax],eax
 100f3ea:	add    BYTE PTR [rax],al
 100f3ec:	add    BYTE PTR [rax],al
 100f3ee:	add    BYTE PTR [rax],al
 100f3f0:	cwde   
 100f3f1:	(bad)  
 100f3f2:	add    BYTE PTR [rcx],al
 100f3f4:	add    BYTE PTR [rax],al
 100f3f6:	add    BYTE PTR [rax],al
 100f3f8:	add    al,BYTE PTR [rax]
 100f3fa:	add    BYTE PTR [rax],al
 100f3fc:	(bad)  
 100f3fd:	add    BYTE PTR [rax],al
 100f3ff:	add    al,bl
 100f401:	stc    
 100f402:	add    BYTE PTR [rcx],al
 100f404:	add    BYTE PTR [rax],al
 100f406:	add    BYTE PTR [rax],al
 100f408:	add    DWORD PTR [rax],eax
 100f40a:	add    BYTE PTR [rax],al
 100f40c:	add    BYTE PTR [rax],al
 100f40e:	add    BYTE PTR [rax],al
 100f410:	loopne 0x100f435
 100f412:	add    BYTE PTR [rcx],al
 100f414:	add    BYTE PTR [rax],al
 100f416:	add    BYTE PTR [rax],al
 100f418:	add    al,BYTE PTR [rax]
 100f41a:	add    BYTE PTR [rax],al
 100f41c:	add    eax,DWORD PTR [rax]
 100f41e:	add    BYTE PTR [rax],al
 100f420:	lock stc 
 100f422:	add    BYTE PTR [rcx],al
 100f424:	add    BYTE PTR [rax],al
 100f426:	add    BYTE PTR [rax],al
 100f428:	add    DWORD PTR [rax],eax
 100f42a:	add    BYTE PTR [rax],al
 100f42c:	add    BYTE PTR [rax],al
 100f42e:	add    BYTE PTR [rax],al
 100f430:	adc    BYTE PTR [rax+rax*1],ah
 100f433:	add    DWORD PTR [rax],eax
 100f435:	add    BYTE PTR [rax],al
 100f437:	add    BYTE PTR [rdx],al
 100f439:	add    BYTE PTR [rax],al
 100f43b:	add    BYTE PTR [rdi],al
 100f43d:	add    BYTE PTR [rax],al
 100f43f:	add    BYTE PTR [rax],cl
 100f441:	cli    
 100f442:	add    BYTE PTR [rcx],al
 100f444:	add    BYTE PTR [rax],al
 100f446:	add    BYTE PTR [rax],al
 100f448:	add    DWORD PTR [rax],eax
 100f44a:	add    BYTE PTR [rax],al
 100f44c:	add    BYTE PTR [rax],al
 100f44e:	add    BYTE PTR [rax],al
 100f450:	cmp    BYTE PTR [rax+rax*1],ah
 100f453:	add    DWORD PTR [rax],eax
 100f455:	add    BYTE PTR [rax],al
 100f457:	add    BYTE PTR [rdx],al
 100f459:	add    BYTE PTR [rax],al
 100f45b:	add    BYTE PTR [rbx],al
 100f45d:	add    BYTE PTR [rax],al
 100f45f:	add    BYTE PTR [rax],ah
 100f461:	cli    
 100f462:	add    BYTE PTR [rcx],al
 100f464:	add    BYTE PTR [rax],al
 100f466:	add    BYTE PTR [rax],al
 100f468:	add    DWORD PTR [rax],eax
 100f46a:	add    BYTE PTR [rax],al
 100f46c:	add    BYTE PTR [rax],al
 100f46e:	add    BYTE PTR [rax],al
 100f470:	(bad)  
 100f471:	and    al,0x0
 100f473:	add    DWORD PTR [rax],eax
 100f475:	add    BYTE PTR [rax],al
 100f477:	add    BYTE PTR [rdx],al
 100f479:	add    BYTE PTR [rax],al
 100f47b:	add    BYTE PTR [rdi],al
 100f47d:	add    BYTE PTR [rax],al
 100f47f:	add    BYTE PTR [rax],bh
 100f481:	cli    
 100f482:	add    BYTE PTR [rcx],al
 100f484:	add    BYTE PTR [rax],al
 100f486:	add    BYTE PTR [rax],al
 100f488:	add    DWORD PTR [rax],eax
 100f48a:	add    BYTE PTR [rax],al
 100f48c:	add    BYTE PTR [rax],al
 100f48e:	add    BYTE PTR [rax],al
 100f490:	nop
 100f491:	and    al,0x0
 100f493:	add    DWORD PTR [rax],eax
 100f495:	add    BYTE PTR [rax],al
 100f497:	add    BYTE PTR [rdx],al
 100f499:	add    BYTE PTR [rax],al
 100f49b:	add    BYTE PTR [rsi],al
 100f49d:	add    BYTE PTR [rax],al
 100f49f:	add    BYTE PTR [rax-0x6],dl
 100f4a2:	add    BYTE PTR [rcx],al
 100f4a4:	add    BYTE PTR [rax],al
 100f4a6:	add    BYTE PTR [rax],al
 100f4a8:	add    DWORD PTR [rax],eax
 100f4aa:	add    BYTE PTR [rax],al
 100f4ac:	add    BYTE PTR [rax],al
 100f4ae:	add    BYTE PTR [rax],al
 100f4b0:	(bad)  
 100f4b1:	(bad)  
 100f4b2:	add    BYTE PTR [rcx],al
 100f4b4:	add    BYTE PTR [rax],al
 100f4b6:	add    BYTE PTR [rax],al
 100f4b8:	add    al,BYTE PTR [rax]
 100f4ba:	add    BYTE PTR [rax],al
 100f4bc:	or     al,BYTE PTR [rax]
 100f4be:	add    BYTE PTR [rax],al
 100f4c0:	clc    
 100f4c1:	cli    
 100f4c2:	add    BYTE PTR [rcx],al
 100f4c4:	add    BYTE PTR [rax],al
 100f4c6:	add    BYTE PTR [rax],al
 100f4c8:	add    DWORD PTR [rax],eax
 100f4ca:	add    BYTE PTR [rax],al
 100f4cc:	add    BYTE PTR [rax],al
 100f4ce:	add    BYTE PTR [rax],al
 100f4d0:	call   0x101f4f3
 100f4d5:	add    BYTE PTR [rax],al
 100f4d7:	add    BYTE PTR [rdx],al
 100f4d9:	add    BYTE PTR [rax],al
 100f4db:	add    BYTE PTR [rbx],al
 100f4dd:	add    BYTE PTR [rax],al
 100f4df:	add    BYTE PTR [rax],dl
 100f4e1:	sti    
 100f4e2:	add    BYTE PTR [rcx],al
 100f4e4:	add    BYTE PTR [rax],al
 100f4e6:	add    BYTE PTR [rax],al
 100f4e8:	add    DWORD PTR [rax],eax
 100f4ea:	add    BYTE PTR [rax],al
 100f4ec:	add    BYTE PTR [rax],al
 100f4ee:	add    BYTE PTR [rax],al
 100f4f0:	sbb    BYTE PTR [rsi],0x0
 100f4f3:	add    DWORD PTR [rax],eax
 100f4f5:	add    BYTE PTR [rax],al
 100f4f7:	add    BYTE PTR [rdx],al
 100f4f9:	add    BYTE PTR [rax],al
 100f4fb:	add    BYTE PTR [rbx],al
 100f4fd:	add    BYTE PTR [rax],al
 100f4ff:	add    BYTE PTR [rax],ch
 100f501:	sti    
 100f502:	add    BYTE PTR [rcx],al
 100f504:	add    BYTE PTR [rax],al
 100f506:	add    BYTE PTR [rax],al
 100f508:	add    DWORD PTR [rax],eax
 100f50a:	add    BYTE PTR [rax],al
 100f50c:	add    BYTE PTR [rax],al
 100f50e:	add    BYTE PTR [rax],al
 100f510:	nop
 100f511:	and    eax,0x100
 100f516:	add    BYTE PTR [rax],al
 100f518:	add    al,BYTE PTR [rax]
 100f51a:	add    BYTE PTR [rax],al
 100f51c:	add    eax,DWORD PTR [rax]
 100f51e:	add    BYTE PTR [rax],al
 100f520:	rex sti 
 100f522:	add    BYTE PTR [rcx],al
 100f524:	add    BYTE PTR [rax],al
 100f526:	add    BYTE PTR [rax],al
 100f528:	add    DWORD PTR [rax],eax
 100f52a:	add    BYTE PTR [rax],al
 100f52c:	add    BYTE PTR [rax],al
 100f52e:	add    BYTE PTR [rax],al
 100f530:	mov    eax,0x10025
 100f535:	add    BYTE PTR [rax],al
 100f537:	add    BYTE PTR [rdx],al
 100f539:	add    BYTE PTR [rax],al
 100f53b:	add    BYTE PTR [rbx],al
 100f53d:	add    BYTE PTR [rax],al
 100f53f:	add    BYTE PTR [rax-0x5],bl
 100f542:	add    BYTE PTR [rcx],al
 100f544:	add    BYTE PTR [rax],al
 100f546:	add    BYTE PTR [rax],al
 100f548:	add    DWORD PTR [rax],eax
 100f54a:	add    BYTE PTR [rax],al
 100f54c:	add    BYTE PTR [rax],al
 100f54e:	add    BYTE PTR [rax],al
 100f550:	loopne 0x100f577
 100f552:	add    BYTE PTR [rcx],al
 100f554:	add    BYTE PTR [rax],al
 100f556:	add    BYTE PTR [rax],al
 100f558:	add    al,BYTE PTR [rax]
 100f55a:	add    BYTE PTR [rax],al
 100f55c:	add    eax,DWORD PTR [rax]
 100f55e:	add    BYTE PTR [rax],al
 100f560:	jo     0x100f55d
 100f562:	add    BYTE PTR [rcx],al
 100f564:	add    BYTE PTR [rax],al
 100f566:	add    BYTE PTR [rax],al
 100f568:	add    DWORD PTR [rax],eax
 100f56a:	add    BYTE PTR [rax],al
 100f56c:	add    BYTE PTR [rax],al
 100f56e:	add    BYTE PTR [rax],al
 100f570:	mov    al,0x1e
 100f572:	add    BYTE PTR [rcx],al
 100f574:	add    BYTE PTR [rax],al
 100f576:	add    BYTE PTR [rax],al
 100f578:	add    al,BYTE PTR [rax]
 100f57a:	add    BYTE PTR [rax],al
 100f57c:	add    eax,DWORD PTR [rax]
 100f57e:	add    BYTE PTR [rax],al
 100f580:	mov    al,0xfd
 100f582:	add    BYTE PTR [rcx],al
 100f584:	add    BYTE PTR [rax],al
 100f586:	add    BYTE PTR [rax],al
 100f588:	add    eax,0x0
 100f58d:	add    BYTE PTR [rax],al
 100f58f:	add    BYTE PTR [rbx*1+0x100],bl
 100f596:	add    BYTE PTR [rax],al
 100f598:	add    al,BYTE PTR [rax]
 100f59a:	add    BYTE PTR [rax],al
 100f59c:	add    eax,DWORD PTR [rax]
 100f59e:	add    BYTE PTR [rax],al
 100f5a0:	rex clc 
 100f5a2:	add    BYTE PTR [rcx],al
 100f5a4:	add    BYTE PTR [rax],al
 100f5a6:	add    BYTE PTR [rax],al
 100f5a8:	add    DWORD PTR [rax],eax
 100f5aa:	add    BYTE PTR [rax],al
 100f5ac:	add    BYTE PTR [rax],al
 100f5ae:	add    BYTE PTR [rax],al
 100f5b0:	rcr    BYTE PTR [rax],1
 100f5b2:	add    BYTE PTR [rcx],al
 100f5b4:	add    BYTE PTR [rax],al
 100f5b6:	add    BYTE PTR [rax],al
 100f5b8:	add    al,BYTE PTR [rax]
 100f5ba:	add    BYTE PTR [rax],al
 100f5bc:	add    eax,DWORD PTR [rax]
 100f5be:	add    BYTE PTR [rax],al
 100f5c0:	pop    rax
 100f5c1:	clc    
 100f5c2:	add    BYTE PTR [rcx],al
 100f5c4:	add    BYTE PTR [rax],al
 100f5c6:	add    BYTE PTR [rax],al
 100f5c8:	add    DWORD PTR [rax],eax
 100f5ca:	add    BYTE PTR [rax],al
 100f5cc:	add    BYTE PTR [rax],al
 100f5ce:	add    BYTE PTR [rax],al
 100f5d0:	shl    BYTE PTR [rdx],1
 100f5d2:	add    BYTE PTR [rcx],al
 100f5d4:	add    BYTE PTR [rax],al
 100f5d6:	add    BYTE PTR [rax],al
 100f5d8:	add    al,BYTE PTR [rax]
 100f5da:	add    BYTE PTR [rax],al
 100f5dc:	add    eax,DWORD PTR [rax]
 100f5de:	add    BYTE PTR [rax],al
 100f5e0:	jo     0x100f5da
 100f5e2:	add    BYTE PTR [rcx],al
 100f5e4:	add    BYTE PTR [rax],al
 100f5e6:	add    BYTE PTR [rax],al
 100f5e8:	(bad)  
 100f5e9:	add    BYTE PTR [rax],al
 100f5eb:	add    BYTE PTR [rax],al
 100f5ed:	add    BYTE PTR [rax],al
 100f5ef:	add    al,ch
 100f5f1:	and    al,BYTE PTR [rax]
 100f5f3:	add    DWORD PTR [rax],eax
 100f5f5:	add    BYTE PTR [rax],al
 100f5f7:	add    BYTE PTR [rdx],al
 100f5f9:	add    BYTE PTR [rax],al
 100f5fb:	add    BYTE PTR [rbx],al
 100f5fd:	add    BYTE PTR [rax],al
 100f5ff:	add    BYTE PTR [rax],bl
 100f601:	stc    
 100f602:	add    BYTE PTR [rcx],al
 100f604:	add    BYTE PTR [rax],al
 100f606:	add    BYTE PTR [rax],al
 100f608:	add    DWORD PTR [rax],eax
 100f60a:	add    BYTE PTR [rax],al
 100f60c:	add    BYTE PTR [rax],al
 100f60e:	add    BYTE PTR [rax],al
 100f610:	or     BYTE PTR [rbx],ah
 100f612:	add    BYTE PTR [rcx],al
 100f614:	add    BYTE PTR [rax],al
 100f616:	add    BYTE PTR [rax],al
 100f618:	add    al,BYTE PTR [rax]
 100f61a:	add    BYTE PTR [rax],al
 100f61c:	add    eax,DWORD PTR [rax]
 100f61e:	add    BYTE PTR [rax],al
 100f620:	xor    cl,bh
 100f622:	add    BYTE PTR [rcx],al
 100f624:	add    BYTE PTR [rax],al
 100f626:	add    BYTE PTR [rax],al
 100f628:	add    DWORD PTR [rax],eax
 100f62a:	add    BYTE PTR [rax],al
 100f62c:	add    BYTE PTR [rax],al
 100f62e:	add    BYTE PTR [rax],al
 100f630:	xor    BYTE PTR [rbx],ah
 100f632:	add    BYTE PTR [rcx],al
 100f634:	add    BYTE PTR [rax],al
 100f636:	add    BYTE PTR [rax],al
 100f638:	add    al,BYTE PTR [rax]
 100f63a:	add    BYTE PTR [rax],al
 100f63c:	add    eax,DWORD PTR [rax]
 100f63e:	add    BYTE PTR [rax],al
 100f640:	add    cl,bh
 100f642:	add    BYTE PTR [rcx],al
 100f644:	add    BYTE PTR [rax],al
 100f646:	add    BYTE PTR [rax],al
 100f648:	add    DWORD PTR [rax],eax
 100f64a:	add    BYTE PTR [rax],al
 100f64c:	add    BYTE PTR [rax],al
 100f64e:	add    BYTE PTR [rax],al
 100f650:	pop    rax
 100f651:	and    eax,DWORD PTR [rax]
 100f653:	add    DWORD PTR [rax],eax
 100f655:	add    BYTE PTR [rax],al
 100f657:	add    BYTE PTR [rdx],al
 100f659:	add    BYTE PTR [rax],al
 100f65b:	add    BYTE PTR [rbx],al
 100f65d:	add    BYTE PTR [rax],al
 100f65f:	add    BYTE PTR [rax-0x7],cl
 100f662:	add    BYTE PTR [rcx],al
 100f664:	add    BYTE PTR [rax],al
 100f666:	add    BYTE PTR [rax],al
 100f668:	add    DWORD PTR [rax],eax
 100f66a:	add    BYTE PTR [rax],al
 100f66c:	add    BYTE PTR [rax],al
 100f66e:	add    BYTE PTR [rax],al
 100f670:	mov    eax,0x10018
 100f675:	add    BYTE PTR [rax],al
 100f677:	add    BYTE PTR [rdx],al
 100f679:	add    BYTE PTR [rax],al
 100f67b:	add    BYTE PTR [rbx],al
 100f67d:	add    BYTE PTR [rax],al
 100f67f:	add    BYTE PTR [rax-0x7],ah
 100f682:	add    BYTE PTR [rcx],al
 100f684:	add    BYTE PTR [rax],al
 100f686:	add    BYTE PTR [rax],al
 100f688:	add    DWORD PTR [rax],eax
 100f68a:	add    BYTE PTR [rax],al
 100f68c:	add    BYTE PTR [rax],al
 100f68e:	add    BYTE PTR [rax],al
 100f690:	js     0x100f6b1
 100f692:	add    BYTE PTR [rcx],al
 100f694:	add    BYTE PTR [rax],al
 100f696:	add    BYTE PTR [rax],al
 100f698:	add    al,BYTE PTR [rax]
 100f69a:	add    BYTE PTR [rax],al
 100f69c:	add    eax,DWORD PTR [rax]
 100f69e:	add    BYTE PTR [rax],al
 100f6a0:	sbb    ah,bh
 100f6a2:	add    BYTE PTR [rcx],al
 100f6a4:	add    BYTE PTR [rax],al
 100f6a6:	add    BYTE PTR [rax],al
 100f6a8:	add    DWORD PTR [rax],eax
 100f6aa:	add    BYTE PTR [rax],al
 100f6ac:	add    BYTE PTR [rax],al
 100f6ae:	add    BYTE PTR [rax],al
 100f6b0:	cwde   
 100f6b1:	(bad)  
 100f6b2:	add    BYTE PTR [rcx],al
 100f6b4:	add    BYTE PTR [rax],al
 100f6b6:	add    BYTE PTR [rax],al
 100f6b8:	add    al,BYTE PTR [rax]
 100f6ba:	add    BYTE PTR [rax],al
 100f6bc:	(bad)  
 100f6bd:	add    BYTE PTR [rax],al
 100f6bf:	add    al,bl
 100f6c1:	stc    
 100f6c2:	add    BYTE PTR [rcx],al
 100f6c4:	add    BYTE PTR [rax],al
 100f6c6:	add    BYTE PTR [rax],al
 100f6c8:	add    DWORD PTR [rax],eax
 100f6ca:	add    BYTE PTR [rax],al
 100f6cc:	add    BYTE PTR [rax],al
 100f6ce:	add    BYTE PTR [rax],al
 100f6d0:	jo     0x100f6f5
 100f6d2:	add    BYTE PTR [rcx],al
 100f6d4:	add    BYTE PTR [rax],al
 100f6d6:	add    BYTE PTR [rax],al
 100f6d8:	add    al,BYTE PTR [rax]
 100f6da:	add    BYTE PTR [rax],al
 100f6dc:	add    eax,DWORD PTR [rax]
 100f6de:	add    BYTE PTR [rax],al
 100f6e0:	js     0x100f6db
 100f6e2:	add    BYTE PTR [rcx],al
 100f6e4:	add    BYTE PTR [rax],al
 100f6e6:	add    BYTE PTR [rax],al
 100f6e8:	add    DWORD PTR [rax],eax
 100f6ea:	add    BYTE PTR [rax],al
 100f6ec:	add    BYTE PTR [rax],al
 100f6ee:	add    BYTE PTR [rax],al
 100f6f0:	jo     0x100f70f
 100f6f2:	add    BYTE PTR [rcx],al
 100f6f4:	add    BYTE PTR [rax],al
 100f6f6:	add    BYTE PTR [rax],al
 100f6f8:	add    al,BYTE PTR [rax]
 100f6fa:	add    BYTE PTR [rax],al
 100f6fc:	add    eax,DWORD PTR [rax]
 100f6fe:	add    BYTE PTR [rax],al
 100f700:	nop
 100f701:	stc    
 100f702:	add    BYTE PTR [rcx],al
 100f704:	add    BYTE PTR [rax],al
 100f706:	add    BYTE PTR [rax],al
 100f708:	add    DWORD PTR [rax],eax
 100f70a:	add    BYTE PTR [rax],al
 100f70c:	add    BYTE PTR [rax],al
 100f70e:	add    BYTE PTR [rax],al
 100f710:	loopne 0x100f735
 100f712:	add    BYTE PTR [rcx],al
 100f714:	add    BYTE PTR [rax],al
 100f716:	add    BYTE PTR [rax],al
 100f718:	add    al,BYTE PTR [rax]
 100f71a:	add    BYTE PTR [rax],al
 100f71c:	add    eax,DWORD PTR [rax]
 100f71e:	add    BYTE PTR [rax],al
 100f720:	cwde   
 100f721:	std    
 100f722:	add    BYTE PTR [rcx],al
 100f724:	add    BYTE PTR [rax],al
 100f726:	add    BYTE PTR [rax],al
 100f728:	add    DWORD PTR [rax],eax
 100f72a:	add    BYTE PTR [rax],al
 100f72c:	add    BYTE PTR [rax],al
 100f72e:	add    BYTE PTR [rax],al
 100f730:	or     BYTE PTR [rsi],ah
 100f732:	add    BYTE PTR [rcx],al
 100f734:	add    BYTE PTR [rax],al
 100f736:	add    BYTE PTR [rax],al
 100f738:	add    al,BYTE PTR [rax]
 100f73a:	add    BYTE PTR [rax],al
 100f73c:	add    eax,DWORD PTR [rax]
 100f73e:	add    BYTE PTR [rax],al
 100f740:	sub    dh,bh
 100f742:	add    BYTE PTR [rcx],al
 100f744:	add    BYTE PTR [rax],al
 100f746:	add    BYTE PTR [rax],al
 100f748:	add    DWORD PTR [rax],eax
 100f74a:	add    BYTE PTR [rax],al
 100f74c:	add    BYTE PTR [rax],al
 100f74e:	add    BYTE PTR [rax],al
 100f750:	(bad)  
 100f751:	(bad)  
 100f752:	add    BYTE PTR [rcx],al
 100f754:	add    BYTE PTR [rax],al
 100f756:	add    BYTE PTR [rax],al
 100f758:	add    al,BYTE PTR [rax]
 100f75a:	add    BYTE PTR [rax],al
 100f75c:	or     al,BYTE PTR [rax]
 100f75e:	add    BYTE PTR [rax],al
 100f760:	clc    
 100f761:	cli    
 100f762:	add    BYTE PTR [rcx],al
 100f764:	add    BYTE PTR [rax],al
 100f766:	add    BYTE PTR [rax],al
 100f768:	add    DWORD PTR [rax],eax
 100f76a:	add    BYTE PTR [rax],al
 100f76c:	add    BYTE PTR [rax],al
 100f76e:	add    BYTE PTR [rax],al
 100f770:	sbb    BYTE PTR [rsi],0x0
 100f773:	add    DWORD PTR [rax],eax
 100f775:	add    BYTE PTR [rax],al
 100f777:	add    BYTE PTR [rdx],al
 100f779:	add    BYTE PTR [rax],al
 100f77b:	add    BYTE PTR [rbx],al
 100f77d:	add    BYTE PTR [rax],al
 100f77f:	add    BYTE PTR [rax],ch
 100f781:	sti    
 100f782:	add    BYTE PTR [rcx],al
 100f784:	add    BYTE PTR [rax],al
 100f786:	add    BYTE PTR [rax],al
 100f788:	add    DWORD PTR [rax],eax
 100f78a:	add    BYTE PTR [rax],al
 100f78c:	add    BYTE PTR [rax],al
 100f78e:	add    BYTE PTR [rax],al
 100f790:	rex.W (bad) 
 100f792:	add    BYTE PTR [rcx],al
 100f794:	add    BYTE PTR [rax],al
 100f796:	add    BYTE PTR [rax],al
 100f798:	add    al,BYTE PTR [rax]
 100f79a:	add    BYTE PTR [rax],al
 100f79c:	add    eax,DWORD PTR [rax]
 100f79e:	add    BYTE PTR [rax],al
 100f7a0:	rex inc BYTE PTR [rax]
 100f7a3:	add    DWORD PTR [rax],eax
 100f7a5:	add    BYTE PTR [rax],al
 100f7a7:	add    BYTE PTR [rcx],al
 100f7a9:	add    BYTE PTR [rax],al
 100f7ab:	add    BYTE PTR [rax],al
 100f7ad:	add    BYTE PTR [rax],al
 100f7af:	add    BYTE PTR [rax+0x1001e],dh
 100f7b5:	add    BYTE PTR [rax],al
 100f7b7:	add    BYTE PTR [rdx],al
 100f7b9:	add    BYTE PTR [rax],al
 100f7bb:	add    BYTE PTR [rbx],al
 100f7bd:	add    BYTE PTR [rax],al
 100f7bf:	add    BYTE PTR [rax+0x100fd],dh
 100f7c5:	add    BYTE PTR [rax],al
 100f7c7:	add    BYTE PTR [rip+0x0],al        # 0x100f7cd
 100f7cd:	add    BYTE PTR [rax],al
 100f7cf:	add    BYTE PTR [rdx],dh
 100f7d1:	movabs ds:0x5dcd00002b992ddf,al
 100f7da:	and    dl,dl
 100f7dc:	data16 (bad) 
 100f7de:	(bad)  
 100f7df:	(bad)  
 100f7e0:	(bad)  
 100f7e1:	(bad)  
 100f7e2:	(bad)  
 100f7e3:	(bad)  
 100f7e4:	(bad)  
 100f7e5:	(bad)  
 100f7e6:	(bad)  
 100f7e7:	(bad)  
 100f7e8:	(bad)  
 100f7e9:	(bad)  
 100f7ea:	(bad)  
 100f7eb:	inc    DWORD PTR [rcx]
 100f7ed:	add    BYTE PTR [rax],al
 100f7ef:	add    BYTE PTR [rax+0x1002b],cl
 100f7f5:	add    BYTE PTR [rax],al
 100f7f7:	add    BYTE PTR [rbx],cl
 100f7f9:	add    BYTE PTR [rax],al
 100f7fb:	add    BYTE PTR [rax],al
 100f7fd:	add    BYTE PTR [rax],al
 100f7ff:	add    BYTE PTR [rax+0x1002b],ah
 100f805:	add    BYTE PTR [rax],al
 100f807:	add    BYTE PTR [rbp+0x0],cl
 100f80a:	add    BYTE PTR [rax],al
 100f80c:	add    BYTE PTR [rax],al
 100f80e:	add    BYTE PTR [rax],al
 100f810:	sub    al,0x0
 100f813:	add    DWORD PTR [rax],eax
 100f815:	add    BYTE PTR [rax],al
 100f817:	add    BYTE PTR [rbx],dl
 100f819:	add    BYTE PTR [rax],al
 100f81b:	add    BYTE PTR [rax],al
 100f81d:	add    BYTE PTR [rax],al
 100f81f:	add    BYTE PTR [rcx+0x100be],dh
 100f825:	add    BYTE PTR [rax],al
 100f827:	add    cl,cl
 100f829:	mov    esi,0x100
 100f82e:	add    BYTE PTR [rax],al
 100f830:	and    BYTE PTR [rsi+0x100],bh
	...

Disassembly of section .pdata:

0000000001011000 <.pdata>:
 1011000:	movabs al,ds:0x4800002f6d00002e
 1011009:	ret    
 101100a:	add    BYTE PTR [rax],al
 101100c:	sub    BYTE PTR [rdi],0x0
 101100f:	add    cl,dh
 1011011:	(bad)  
 1011012:	add    BYTE PTR [rax],al
 1011014:	push   rsp
 1011015:	ret    
 1011016:	add    BYTE PTR [rax],al
 1011018:	icebp  
 1011019:	(bad)  
 101101a:	add    BYTE PTR [rax],al
 101101c:	cmp    esi,DWORD PTR [rax]
 101101e:	add    BYTE PTR [rax],al
 1011020:	fs ret 
 1011022:	add    BYTE PTR [rax],al
 1011024:	cmp    esi,DWORD PTR [rax]
 1011026:	add    BYTE PTR [rax],al
 1011028:	push   rbx
 1011029:	xor    BYTE PTR [rax],al
 101102b:	add    BYTE PTR [rax-0x3d],bh
 101102e:	add    BYTE PTR [rax],al
 1011030:	(bad)  
 1011031:	xor    BYTE PTR [rax],al
 1011033:	add    bl,bl
 1011035:	xor    BYTE PTR [rax],al
 1011037:	add    BYTE PTR [rax-0x24ffff3d],cl
 101103d:	xor    BYTE PTR [rax],al
 101103f:	add    BYTE PTR [rcx+rsi*1],dl
 1011042:	add    BYTE PTR [rax],al
 1011044:	pushf  
 1011045:	ret    
 1011046:	add    BYTE PTR [rax],al
 1011048:	adc    al,0x31
 101104a:	add    BYTE PTR [rax],al
 101104c:	sub    esi,DWORD PTR [rcx]
 101104e:	add    BYTE PTR [rax],al
 1011050:	mov    al,0xc3
 1011052:	add    BYTE PTR [rax],al
 1011054:	sub    esi,DWORD PTR [rcx]
 1011056:	add    BYTE PTR [rax],al
 1011058:	cmp    esi,DWORD PTR [rcx]
 101105a:	add    BYTE PTR [rax],al
 101105c:	rol    bl,0x0
 101105f:	add    BYTE PTR [rbx],bh
 1011061:	xor    DWORD PTR [rax],eax
 1011063:	add    BYTE PTR [rsi+0x31],bl
 1011066:	add    BYTE PTR [rax],al
 1011068:	(bad)  
 1011069:	ret    
 101106a:	add    BYTE PTR [rax],al
 101106c:	pop    rsi
 101106d:	xor    DWORD PTR [rax],eax
 101106f:	add    bh,bl
 1011071:	xor    DWORD PTR [rax],eax
 1011073:	add    al,ch
 1011075:	ret    
 1011076:	add    BYTE PTR [rax],al
 1011078:	fbstp  TBYTE PTR [rcx]
 101107a:	add    BYTE PTR [rax],al
 101107c:	div    DWORD PTR [rcx]
 101107e:	add    BYTE PTR [rax],al
 1011080:	cld    
 1011081:	ret    
 1011082:	add    BYTE PTR [rax],al
 1011084:	div    DWORD PTR [rcx]
 1011086:	add    BYTE PTR [rax],al
 1011088:	jno    0x10110bc
 101108a:	add    BYTE PTR [rax],al
 101108c:	or     al,0xc4
 101108e:	add    BYTE PTR [rax],al
 1011090:	jno    0x10110c4
 1011092:	add    BYTE PTR [rax],al
 1011094:	jnp    0x10110c8
 1011096:	add    BYTE PTR [rax],al
 1011098:	and    al,0xc4
 101109a:	add    BYTE PTR [rax],al
 101109c:	nop
 101109d:	xor    al,BYTE PTR [rax]
 101109f:	add    BYTE PTR [rsi+0x34],dl
 10110a2:	add    BYTE PTR [rax],al
 10110a4:	xor    al,0xc4
 10110a6:	add    BYTE PTR [rax],al
 10110a8:	push   rsi
 10110a9:	xor    al,0x0
 10110ab:	add    BYTE PTR [rsi+rsi*1],al
 10110ae:	add    BYTE PTR [rax],al
 10110b0:	push   rsp
 10110b1:	(bad)  
 10110b2:	add    BYTE PTR [rax],al
 10110b4:	add    al,0x36
 10110b6:	add    BYTE PTR [rax],al
 10110b8:	sub    dh,BYTE PTR [rsi]
 10110ba:	add    BYTE PTR [rax],al
 10110bc:	push   0x2a0000c4
 10110c1:	add    BYTE PTR ss:[rax],al
 10110c4:	cmp    al,BYTE PTR [eax]
 10110c7:	add    BYTE PTR [rax-0x3c],bh
 10110ca:	add    BYTE PTR [rax],al
 10110cc:	cmp    al,BYTE PTR [eax]
 10110cf:	add    BYTE PTR [rcx+0x3a],dh
 10110d2:	add    BYTE PTR [rax],al
 10110d4:	mov    esp,es
 10110d6:	add    BYTE PTR [rax],al
 10110d8:	cmp    BYTE PTR [rdx],0x0
 10110db:	add    dh,al
 10110dd:	cmp    al,0x0
 10110df:	add    BYTE PTR [rsp+rax*8+0x3cd00000],bl
 10110e6:	add    BYTE PTR [rax],al
 10110e8:	cmp    BYTE PTR [rip+0xffffffffc4b80000],0x0        # 0xffffffffc5b910ef
 10110ef:	add    BYTE PTR [rax+0x3c00003d],dl
 10110f5:	rex.X add BYTE PTR [rax],al
 10110f8:	rol    ah,1
 10110fa:	add    BYTE PTR [rax],al
 10110fc:	push   rax
 10110fd:	rex.X add BYTE PTR [rax],al
 1011100:	jp     0x1011146
 1011102:	add    BYTE PTR [rax],al
 1011104:	hlt    
 1011105:	(bad)  
 1011106:	add    BYTE PTR [rax],al
 1011108:	add    BYTE PTR [rax+rax*1+0x0],0xce
 101110d:	add    BYTE PTR [r8],r8b
 1011110:	adc    al,0xc5
 1011112:	add    BYTE PTR [rax],al
 1011114:	loopne 0x101115b
 1011116:	add    BYTE PTR [rax],al
 1011118:	ror    BYTE PTR [rax+0x0],0x0
 101111c:	xor    ch,al
 101111e:	add    BYTE PTR [rax],al
 1011120:	ror    BYTE PTR [rax+0x0],1
 1011123:	add    BYTE PTR [rdx+0x3c00004b],cl
 1011129:	(bad)
 101112c:	ror    BYTE PTR [rbp+0x0],0x0
 1011130:	pop    rcx
 1011131:	rex.WRXB add BYTE PTR [r8],r8b
 1011134:	pop    rax
 1011135:	(bad)
 1011138:	(bad)  
 1011139:	rex.WRXB add BYTE PTR [r8],r8b
 101113c:	addr32 push rsi
 101113e:	add    BYTE PTR [rax],al
 1011140:	ins    BYTE PTR es:[rdi],dx
 1011141:	(bad)
 1011144:	jo     0x101119c
 1011146:	add    BYTE PTR [rax],al
 1011148:	or     DWORD PTR [rdi+0x0],edx
 101114b:	add    BYTE PTR [rbp+rax*8+0x0],bh
 101114f:	add    BYTE PTR [rax],dl
 1011151:	push   rdi
 1011152:	add    BYTE PTR [rax],al
 1011154:	movabs al,ds:0xb00000c588000057
 101115d:	push   rdi
 101115e:	add    BYTE PTR [rax],al
 1011160:	rex pop rax
 1011162:	add    BYTE PTR [rax],al
 1011164:	xchg   esp,eax
 1011165:	(bad)
 1011168:	push   rax
 1011169:	pop    rax
 101116a:	add    BYTE PTR [rax],al
 101116c:	mov    ah,0x5d
 101116e:	add    BYTE PTR [rax],al
 1011170:	movabs al,ds:0xf600005dc00000c5
 1011179:	pop    rbp
 101117a:	add    BYTE PTR [rax],al
 101117c:	enter  0xc5,0x0
 1011180:	neg    BYTE PTR [rbp+0x0]
 1011183:	add    BYTE PTR [rax+0x61],ch
 1011186:	add    BYTE PTR [rax],al
 1011188:	loopne 0x101114f
 101118a:	add    BYTE PTR [rax],al
 101118c:	push   0x7e000061
 1011191:	(bad)  
 1011192:	add    BYTE PTR [rax],al
 1011194:	add    al,0xc6
 1011196:	add    BYTE PTR [rax],al
 1011198:	jle    0x10111fb
 101119a:	add    BYTE PTR [rax],al
 101119c:	xchg   esp,eax
 101119d:	(bad)  
 101119e:	add    BYTE PTR [rax],al
 10111a0:	and    al,0xc6
 10111a2:	add    BYTE PTR [rax],al
 10111a4:	xchg   esp,eax
 10111a5:	(bad)  
 10111a6:	add    BYTE PTR [rax],al
 10111a8:	scas   eax,DWORD PTR es:[rdi]
 10111a9:	(bad)  
 10111aa:	add    BYTE PTR [rax],al
 10111ac:	rex mov BYTE PTR [rax],0x0
 10111b0:	scas   eax,DWORD PTR es:[rdi]
 10111b1:	(bad)  
 10111b2:	add    BYTE PTR [rax],al
 10111b4:	int3   
 10111b5:	(bad)  
 10111b6:	add    BYTE PTR [rax],al
 10111b8:	pop    rax
 10111b9:	mov    BYTE PTR [rax],0x0
 10111bc:	loopne 0x101121f
 10111be:	add    BYTE PTR [rax],al
 10111c0:	or     esp,DWORD PTR [rdx+0x0]
 10111c3:	add    BYTE PTR [rax-0x3a],ch
 10111c6:	add    BYTE PTR [rax],al
 10111c8:	or     esp,DWORD PTR [rdx+0x0]
 10111cb:	add    BYTE PTR [rdi],dh
 10111cd:	(bad)  
 10111ce:	add    BYTE PTR [rax],al
 10111d0:	je     0x1011198
 10111d2:	add    BYTE PTR [rax],al
 10111d4:	(bad)  
 10111d5:	(bad)  
 10111d6:	add    BYTE PTR [rax],al
 10111d8:	(bad)  
 10111d9:	(bad)  
 10111da:	add    BYTE PTR [rax],al
 10111dc:	mov    dh,al
 10111de:	add    BYTE PTR [rax],al
 10111e0:	nop
 10111e1:	(bad)  
 10111e2:	add    BYTE PTR [rax],al
 10111e4:	out    0x62,al
 10111e6:	add    BYTE PTR [rax],al
 10111e8:	pushf  
 10111e9:	mov    BYTE PTR [rax],0x0
 10111ec:	out    0x62,al
 10111ee:	add    BYTE PTR [rax],al
 10111f0:	adc    DWORD PTR [rbx+0x0],esp
 10111f3:	add    BYTE PTR [rax+0x110000c6],bh
 10111f9:	movsxd eax,DWORD PTR [rax]
 10111fb:	add    BYTE PTR [rdx+0x63],dl
 10111fe:	add    BYTE PTR [rax],al
 1011200:	int3   
 1011201:	mov    BYTE PTR [rax],0x0
 1011204:	push   rdx
 1011205:	movsxd eax,DWORD PTR [rax]
 1011207:	add    bl,al
 1011209:	add    BYTE PTR fs:[rax],al
 101120c:	loopne 0x10111d4
 101120e:	add    BYTE PTR [rax],al
 1011210:	ret    
 1011211:	add    BYTE PTR fs:[rax],al
 1011214:	fsub   DWORD PTR [rax+rax*1+0x0]
 1011218:	hlt    
 1011219:	mov    BYTE PTR [rax],0x0
 101121c:	fsub   DWORD PTR [rax+rax*1+0x0]
 1011220:	cld    
 1011221:	add    BYTE PTR fs:[rax],al
 1011224:	add    al,0xc7
 1011226:	add    BYTE PTR [rax],al
 1011228:	adc    BYTE PTR [rbp+0x0],ah
 101122b:	add    dl,bl
 101122d:	add    BYTE PTR gs:[rax],al
 1011230:	adc    al,0xc7
 1011232:	add    BYTE PTR [rax],al
 1011234:	loopne 0x101129b
 1011236:	add    BYTE PTR [rax],al
 1011238:	(bad)  
 1011239:	data16 add BYTE PTR [rax],al
 101123c:	and    al,0xc7
 101123e:	add    BYTE PTR [rax],al
 1011240:	movabs al,ds:0x30000067c8000066
 1011249:	mov    DWORD PTR [rax],0x67c800
 101124f:	add    BYTE PTR [rbx+rbp*2-0x38b00000],bh
 1011256:	add    BYTE PTR [rax],al
 1011258:	mov    esp,0xde00006b
 101125d:	imul   eax,DWORD PTR [rax],0x0
 1011260:	mov    DWORD PTR fs:[rax],0x6bf000
 1011267:	add    BYTE PTR [rax],bh
 1011269:	ins    BYTE PTR es:[rdi],dx
 101126a:	add    BYTE PTR [rax],al
 101126c:	je     0x1011235
 101126e:	add    BYTE PTR [rax],al
 1011270:	cmp    BYTE PTR [rax+rax*1+0x0],ch
 1011274:	ins    BYTE PTR es:[rdi],dx
 1011275:	ins    BYTE PTR es:[rdi],dx
 1011276:	add    BYTE PTR [rax],al
 1011278:	test   bh,al
 101127a:	add    BYTE PTR [rax],al
 101127c:	ins    BYTE PTR es:[rdi],dx
 101127d:	ins    BYTE PTR es:[rdi],dx
 101127e:	add    BYTE PTR [rax],al
 1011280:	(bad)  
 1011281:	ins    DWORD PTR es:[rdi],dx
 1011282:	add    BYTE PTR [rax],al
 1011284:	cwde   
 1011285:	mov    DWORD PTR [rax],0x6d6200
 101128b:	add    cl,cl
 101128d:	ins    DWORD PTR es:[rdi],dx
 101128e:	add    BYTE PTR [rax],al
 1011290:	mov    al,0xc7
 1011292:	add    BYTE PTR [rax],al
 1011294:	leave  
 1011295:	ins    DWORD PTR es:[rdi],dx
 1011296:	add    BYTE PTR [rax],al
 1011298:	adc    DWORD PTR [rsi+0x0],ebp
 101129b:	add    al,al
 101129d:	mov    DWORD PTR [rax],0x6e1100
 10112a3:	add    BYTE PTR [rcx],ah
 10112a5:	outs   dx,BYTE PTR ds:[rsi]
 10112a6:	add    BYTE PTR [rax],al
 10112a8:	fadd   st(7),st
 10112aa:	add    BYTE PTR [rax],al
 10112ac:	xor    BYTE PTR [rsi+0x0],ch
 10112af:	add    BYTE PTR [rdi+rbp*2],bl
 10112b2:	add    BYTE PTR [rax],al
 10112b4:	in     al,dx
 10112b5:	mov    DWORD PTR [rax],0x6f3000
 10112bb:	add    BYTE PTR [rip+0x4000070],ch        # 0x5011331
 10112c1:	enter  0x0,0x2d
 10112c5:	jo     0x10112c7
 10112c7:	add    BYTE PTR [rcx+0x70],ch
 10112ca:	add    BYTE PTR [rax],al
 10112cc:	sbb    al,0xc8
 10112ce:	add    BYTE PTR [rax],al
 10112d0:	imul   esi,DWORD PTR [rax+0x0],0x708900
 10112d7:	add    BYTE PTR [rax],dh
 10112d9:	enter  0x0,0x90
 10112dd:	jo     0x10112df
 10112df:	add    dh,dl
 10112e1:	jo     0x10112e3
 10112e3:	add    BYTE PTR [rax-0x38],al
 10112e6:	add    BYTE PTR [rax],al
 10112e8:	loopne 0x101135a
 10112ea:	add    BYTE PTR [rax],al
 10112ec:	xchg   ecx,eax
 10112ed:	jb     0x10112ef
 10112ef:	add    BYTE PTR [rax+rcx*8+0x0],cl
 10112f3:	add    BYTE PTR [rax+0x27000072],ah
 10112f9:	jae    0x10112fb
 10112fb:	add    BYTE PTR [rax-0x38],ch
 10112fe:	add    BYTE PTR [rax],al
 1011300:	xor    BYTE PTR [rbx+0x0],dh
 1011303:	add    BYTE PTR [rax+0x73],bh
 1011306:	add    BYTE PTR [rax],al
 1011308:	js     0x10112d2
 101130a:	add    BYTE PTR [rax],al
 101130c:	js     0x1011381
 101130e:	add    BYTE PTR [rax],al
 1011310:	mov    esi,DWORD PTR [rbx+0x0]
 1011313:	add    BYTE PTR [rax-0x74ffff38],dl
 1011319:	jae    0x101131b
 101131b:	add    BYTE PTR [rdi],ah
 101131d:	je     0x101131f
 101131f:	add    BYTE PTR [rax+rcx*8+0x74270000],ah
 1011326:	add    BYTE PTR [rax],al
 1011328:	shl    BYTE PTR [rax+rax*1+0x0],cl
 101132c:	mov    eax,0xd20000c8
 1011331:	je     0x1011333
 1011333:	add    dh,ch
 1011335:	je     0x1011337
 1011337:	add    al,cl
 1011339:	enter  0x0,0x0
 101133d:	jne    0x101133f
 101133f:	add    BYTE PTR [rax-0x27ffff8b],cl
 1011345:	enter  0x0,0x10
 1011349:	jbe    0x101134b
 101134b:	add    BYTE PTR [rsi],bh
 101134d:	jbe    0x101134f
 101134f:	add    al,ch
 1011351:	enter  0x0,0x3e
 1011355:	jbe    0x1011357
 1011357:	add    BYTE PTR [rsi+rsi*2+0x0],dh
 101135b:	add    ah,dh
 101135d:	enter  0x0,0x74
 1011361:	jbe    0x1011363
 1011363:	add    BYTE PTR [rsi+rsi*2-0x36f80000],al
 101136a:	add    BYTE PTR [rax],al
 101136c:	test   BYTE PTR [rsi+0x0],dh
 101136f:	add    BYTE PTR [rbx+0x1c000076],cl
 1011375:	leave  
 1011376:	add    BYTE PTR [rax],al
 1011378:	movabs al,ds:0x2c00007785000076
 1011381:	leave  
 1011382:	add    BYTE PTR [rax],al
 1011384:	nop
 1011385:	ja     0x1011387
 1011387:	add    BYTE PTR [rbp+0x78],ch
 101138a:	add    BYTE PTR [rax],al
 101138c:	rex.R leave 
 101138e:	add    BYTE PTR [rax],al
 1011390:	ins    DWORD PTR es:[rdi],dx
 1011391:	js     0x1011393
 1011393:	add    BYTE PTR [rbx],al
 1011395:	jp     0x1011397
 1011397:	add    BYTE PTR [rcx+rcx*8+0x0],bl
 101139b:	add    BYTE PTR [rbx],al
 101139d:	jp     0x101139f
 101139f:	add    BYTE PTR [rip+0x7000007a],bl        # 0x7101141f
 10113a5:	leave  
 10113a6:	add    BYTE PTR [rax],al
 10113a8:	xor    BYTE PTR [rdx+0x0],bh
 10113ab:	add    BYTE PTR [rdx+0x7b],bh
 10113ae:	add    BYTE PTR [rax],al
 10113b0:	or     cl,0x0
 10113b3:	add    BYTE PTR [rax-0x17ffff85],al
 10113b9:	jge    0x10113bb
 10113bb:	add    BYTE PTR [rax-0xfffff37],bl
 10113c1:	jge    0x10113c3
 10113c3:	add    BYTE PTR [rax],dh
 10113c5:	add    BYTE PTR [rax],0x0
 10113c8:	mov    ah,0xc9
 10113ca:	add    BYTE PTR [rax],al
 10113cc:	rex add BYTE PTR [rax],0x0
 10113d0:	rex.WXB add QWORD PTR [r8],0xc9c800
 10113d7:	add    BYTE PTR [rax-0x7f],ah
 10113da:	add    BYTE PTR [rax],al
 10113dc:	fs (bad) 
 10113de:	add    BYTE PTR [rax],al
 10113e0:	fmul   st(1),st
 10113e2:	add    BYTE PTR [rax],al
 10113e4:	jo     0x1011368
 10113e6:	add    BYTE PTR [rax],al
 10113e8:	add    BYTE PTR [rbx-0x36100000],al
 10113ee:	add    BYTE PTR [rax],al
 10113f0:	add    BYTE PTR [rbx-0x7b1a0000],al
 10113f6:	add    BYTE PTR [rax],al
 10113f8:	or     al,0xca
 10113fa:	add    BYTE PTR [rax],al
 10113fc:	out    0x84,al
 10113fe:	add    BYTE PTR [rax],al
 1011400:	add    al,0x85
 1011402:	add    BYTE PTR [rax],al
 1011404:	and    dl,cl
 1011406:	add    BYTE PTR [rax],al
 1011408:	adc    BYTE PTR [rbp-0x7acc0000],al
 101140e:	add    BYTE PTR [rax],al
 1011410:	xor    dl,cl
 1011412:	add    BYTE PTR [rax],al
 1011414:	xor    al,0x85
 1011416:	add    BYTE PTR [rax],al
 1011418:	(bad)
 101141c:	rex.R retf 0x0
 1011420:	(bad)
 1011424:	ror    BYTE PTR [rdx-0x359c0000],1
 101142a:	add    BYTE PTR [rax],al
 101142c:	loopne 0x10113b8
 101142e:	add    BYTE PTR [rax],al
 1011430:	mov    esp,0x7400008c
 1011435:	retf   0x0
 1011438:	ror    BYTE PTR [rax+rax*1+0x8e0800],1
 101143f:	add    BYTE PTR [rax+0x80000ca],dl
 1011445:	mov    es,WORD PTR [rax]
 1011447:	add    BYTE PTR [rdi-0x53ffff6c],ch
 101144d:	retf   0x0
 1011450:	scas   eax,DWORD PTR es:[rdi]
 1011451:	xchg   esp,eax
 1011452:	add    BYTE PTR [rax],al
 1011454:	iret   
 1011455:	xchg   esp,eax
 1011456:	add    BYTE PTR [rax],al
 1011458:	enter  0xca,0x0
 101145c:	loopne 0x10113f2
 101145e:	add    BYTE PTR [rax],al
 1011460:	push   rbp
 1011461:	xchg   edi,eax
 1011462:	add    BYTE PTR [rax],al
 1011464:	fmul   st,st(2)
 1011466:	add    BYTE PTR [rax],al
 1011468:	(bad)  
 1011469:	xchg   edi,eax
 101146a:	add    BYTE PTR [rax],al
 101146c:	rex.B cdq 
 101146e:	add    BYTE PTR [rax],al
 1011470:	hlt    
 1011471:	retf   0x0
 1011474:	cqo    
 1011476:	add    BYTE PTR [rax],al
 1011478:	lods   eax,DWORD PTR ds:[rsi]
 1011479:	cdq    
 101147a:	add    BYTE PTR [rax],al
 101147c:	adc    bl,cl
 101147e:	add    BYTE PTR [rax],al
 1011480:	mov    ah,0x99
 1011482:	add    BYTE PTR [rax],al
 1011484:	xor    al,0x9b
 1011486:	add    BYTE PTR [rax],al
 1011488:	and    bl,cl
 101148a:	add    BYTE PTR [rax],al
 101148c:	cmp    al,0x9b
 101148e:	add    BYTE PTR [rax],al
 1011490:	or     bl,BYTE PTR [rax+rax*1+0xcb4400]
 1011497:	add    BYTE PTR [rax],dl
 1011499:	pushf  
 101149a:	add    BYTE PTR [rax],al
 101149c:	and    bl,BYTE PTR [rax+rax*1+0xcb4c00]
 10114a3:	add    BYTE PTR [rax],ch
 10114a5:	pushf  
 10114a6:	add    BYTE PTR [rax],al
 10114a8:	mov    ebx,DWORD PTR [rax+rax*1+0xcb5400]
 10114af:	add    BYTE PTR [rsp+rbx*4-0x634f0000],dl
 10114b6:	add    BYTE PTR [rax],al
 10114b8:	pop    rsp
 10114b9:	retf   
 10114ba:	add    BYTE PTR [rax],al
 10114bc:	rcr    BYTE PTR [rax+rax*1+0x9d1e00],1
 10114c3:	add    BYTE PTR [rax-0x35],ch
 10114c6:	add    BYTE PTR [rax],al
 10114c8:	xor    BYTE PTR [rbp-0x62b10000],bl
 10114ce:	add    BYTE PTR [rax],al
 10114d0:	jo     0x101149d
 10114d2:	add    BYTE PTR [rax],al
 10114d4:	jl     0x1011473
 10114d6:	add    BYTE PTR [rax],al
 10114d8:	mov    ebp,0x7400009d
 10114dd:	retf   
 10114de:	add    BYTE PTR [rax],al
 10114e0:	(bad)  
 10114e1:	popf   
 10114e2:	add    BYTE PTR [rax],al
 10114e4:	fcomp  QWORD PTR [rbp-0x34840000]
 10114ea:	add    BYTE PTR [rax],al
 10114ec:	lock popf 
 10114ee:	add    BYTE PTR [rax],al
 10114f0:	movabs al,ds:0xa80000cb8c00009e
 10114f9:	sahf   
 10114fa:	add    BYTE PTR [rax],al
 10114fc:	mov    edi,0xac00009e
 1011501:	retf   
 1011502:	add    BYTE PTR [rax],al
 1011504:	enter  0x9e,0x0
 1011508:	add    BYTE PTR [rdi-0x344c0000],bl
 101150e:	add    BYTE PTR [rax],al
 1011510:	or     BYTE PTR [rdi-0x60c00000],bl
 1011516:	add    BYTE PTR [rax],al
 1011518:	ror    bl,0x0
 101151b:	add    al,dh
 101151d:	lahf   
 101151e:	add    BYTE PTR [rax],al
 1011520:	xor    DWORD PTR [rax-0x342c0000],esp
 1011526:	add    BYTE PTR [rax],al
 1011528:	push   0x1b0000a0
 101152d:	movabs eax,ds:0xa1240000cbf40000
 1011536:	add    BYTE PTR [rax],al
 1011538:	outs   dx,BYTE PTR ds:[rsi]
 1011539:	movabs ds:0xa2d00000cc000000,al
 1011542:	add    BYTE PTR [rax],al
 1011544:	and    ebp,DWORD PTR [rbx-0x33f00000]
 101154a:	add    BYTE PTR [rax],al
 101154c:	xor    BYTE PTR [rbx-0x54510000],ch
 1011552:	add    BYTE PTR [rax],al
 1011554:	or     ah,cl
 1011556:	add    BYTE PTR [rax],al
 1011558:	shr    BYTE PTR [rbx-0x53e00000],0x0
 101155f:	add    BYTE PTR [rsp+rcx*8],dh
 1011562:	add    BYTE PTR [rax],al
 1011564:	xor    BYTE PTR [rax+rax*1+0xacac00],ch
 101156b:	add    BYTE PTR [rsp+rcx*8],bh
 101156e:	add    BYTE PTR [rax],al
 1011570:	shr    BYTE PTR [rax+rax*1+0xacfd00],0x0
 1011578:	rex.R int3 
 101157a:	add    BYTE PTR [rax],al
 101157c:	adc    BYTE PTR [rbp-0x528a0000],ch
 1011582:	add    BYTE PTR [rax],al
 1011584:	rex.WR int3 
 1011586:	add    BYTE PTR [rax],al
 1011588:	sub    BYTE PTR [rbp-0x51dd0000],0x0
 101158f:	add    BYTE PTR [rsp+rcx*8+0x0],dl
 1011593:	add    BYTE PTR [rax],dh
 1011595:	scas   al,BYTE PTR es:[rdi]
 1011596:	add    BYTE PTR [rax],al
 1011598:	sbb    ebp,DWORD PTR [rdi-0x33a40000]
 101159e:	add    BYTE PTR [rax],al
 10115a0:	push   rax
 10115a1:	scas   eax,DWORD PTR es:[rdi]
 10115a2:	add    BYTE PTR [rax],al
 10115a4:	sub    BYTE PTR [rdi-0x339c0000],0x0
 10115ab:	add    BYTE PTR [rax-0x50ffff51],dl
 10115b1:	scas   eax,DWORD PTR es:[rdi]
 10115b2:	add    BYTE PTR [rax],al
 10115b4:	ins    BYTE PTR es:[rdi],dx
 10115b5:	int3   
 10115b6:	add    BYTE PTR [rax],al
 10115b8:	scas   eax,DWORD PTR es:[rdi]
 10115b9:	scas   eax,DWORD PTR es:[rdi]
 10115ba:	add    BYTE PTR [rax],al
 10115bc:	add    dh,BYTE PTR [rax-0x33880000]
 10115c2:	add    BYTE PTR [rax],al
 10115c4:	add    dh,BYTE PTR [rax-0x4dac0000]
 10115ca:	add    BYTE PTR [rax],al
 10115cc:	nop
 10115cd:	int3   
 10115ce:	add    BYTE PTR [rax],al
 10115d0:	push   rsp
 10115d1:	mov    dl,0x0
 10115d3:	add    BYTE PTR [rbx-0x4fffff4e],cl
 10115d9:	int3   
 10115da:	add    BYTE PTR [rax],al
 10115dc:	mov    esi,DWORD PTR [rdx-0x4d4d0000]
 10115e2:	add    BYTE PTR [rax],al
 10115e4:	ror    ah,0x0
 10115e7:	add    al,al
 10115e9:	mov    dl,0x0
 10115eb:	add    bl,dh
 10115ed:	mov    ah,0x0
 10115ef:	add    al,dl
 10115f1:	int3   
 10115f2:	add    BYTE PTR [rax],al
 10115f4:	add    BYTE PTR [rbp-0x4ada0000],dh
 10115fa:	add    BYTE PTR [rax],al
 10115fc:	lock int3 
 10115fe:	add    BYTE PTR [rax],al
 1011600:	es mov ch,0x0
 1011603:	add    BYTE PTR [rdx-0x4b],ah
 1011606:	add    BYTE PTR [rax],al
 1011608:	clc    
 1011609:	int3   
 101160a:	add    BYTE PTR [rax],al
 101160c:	(bad)  
 101160d:	mov    ch,0x0
 101160f:	add    BYTE PTR [rcx-0x4b],dh
 1011612:	add    BYTE PTR [rax],al
 1011614:	or     al,0xcd
 1011616:	add    BYTE PTR [rax],al
 1011618:	xor    BYTE PTR [rbp-0x49cb0000],0x0
 101161f:	add    BYTE PTR [rax],ch
 1011621:	int    0x0
 1011623:	add    BYTE PTR [rax-0x4a],al
 1011626:	add    BYTE PTR [rax],al
 1011628:	add    DWORD PTR [rdi-0x32d00000],esi
 101162e:	add    BYTE PTR [rax],al
 1011630:	adc    BYTE PTR [rdi-0x48960000],dh
 1011636:	add    BYTE PTR [rax],al
 1011638:	rex.W int 0x0
 101163b:	add    BYTE PTR [rdx-0x49],ch
 101163e:	add    BYTE PTR [rax],al
 1011640:	es mov eax,0xcd600000
 1011646:	add    BYTE PTR [rax],al
 1011648:	es mov eax,0xb83f0000
 101164e:	add    BYTE PTR [rax],al
 1011650:	je     0x101161f
 1011652:	add    BYTE PTR [rax],al
 1011654:	push   rax
 1011655:	mov    eax,0xb88a0000
 101165a:	add    BYTE PTR [rax],al
 101165c:	test   ch,cl
 101165e:	add    BYTE PTR [rax],al
 1011660:	mov    bh,BYTE PTR [rax-0x46850000]
 1011666:	add    BYTE PTR [rax],al
 1011668:	xchg   esp,eax
 1011669:	int    0x0
 101166b:	add    BYTE PTR [rbx-0x47],bh
 101166e:	add    BYTE PTR [rax],al
 1011670:	mov    BYTE PTR [rcx-0x32500000],bh
 1011676:	add    BYTE PTR [rax],al
 1011678:	nop
 1011679:	mov    ecx,0xb9c30000
 101167e:	add    BYTE PTR [rax],al
 1011680:	ror    ch,0x0
 1011683:	add    bl,al
 1011685:	mov    ecx,0xbabc0000
 101168a:	add    BYTE PTR [rax],al
 101168c:	int3   
 101168d:	int    0x0
 101168f:	add    BYTE PTR [rdx+rdi*4-0x453a0000],bh
 1011696:	add    BYTE PTR [rax],al
 1011698:	lock int 0x0
 101169b:	add    dh,al
 101169d:	mov    edx,0xbb5a0000
 10116a2:	add    BYTE PTR [rax],al
 10116a4:	add    dh,cl
 10116a6:	add    BYTE PTR [rax],al
 10116a8:	(bad)  
 10116a9:	mov    ebx,0xbbe10000
 10116ae:	add    BYTE PTR [rax],al
 10116b0:	and    al,0xce
 10116b2:	add    BYTE PTR [rax],al
 10116b4:	lock mov ebx,0xbc540000
 10116ba:	add    BYTE PTR [rax],al
 10116bc:	sub    al,0xce
 10116be:	add    BYTE PTR [rax],al
 10116c0:	push   rsp
 10116c1:	mov    esp,0xbcbf0000
 10116c6:	add    BYTE PTR [rax],al
 10116c8:	xor    al,0xce
 10116ca:	add    BYTE PTR [rax],al
 10116cc:	mov    edi,0xdc0000bc
 10116d1:	mov    esp,0xce500000
 10116d6:	add    BYTE PTR [rax],al
 10116d8:	fdivr  QWORD PTR [rax+rax*1+0xbcef00]
 10116df:	add    BYTE PTR [rsi+rcx*8+0x0],ch
 10116e3:	add    BYTE PTR [rax],al
 10116e5:	mov    ebp,0xbd290000
 10116ea:	add    BYTE PTR [rax],al
 10116ec:	jl     0x10116bc
 10116ee:	add    BYTE PTR [rax],al
 10116f0:	sub    DWORD PTR [rbp-0x42a00000],edi
 10116f6:	add    BYTE PTR [rax],al
 10116f8:	test   dh,cl
 10116fa:	add    BYTE PTR [rax],al
 10116fc:	(bad)  
 10116fd:	mov    ebp,0xbdcc0000
 1011702:	add    BYTE PTR [rax],al
 1011704:	pushf  
 1011705:	(bad)  
 1011706:	add    BYTE PTR [rax],al
 1011708:	int3   
 1011709:	mov    ebp,0xbe050000
 101170e:	add    BYTE PTR [rax],al
 1011710:	mov    eax,0x50000ce
 1011715:	mov    esi,0xbe200000
 101171a:	add    BYTE PTR [rax],al
 101171c:	(bad)  
 101171d:	(bad)  
 101171e:	add    BYTE PTR [rax],al
 1011720:	sub    al,0xbe
 1011722:	add    BYTE PTR [rax],al
 1011724:	movabs ds:0xe80000cee40000be,eax
 101172d:	mov    esi,0xc1d60000
 1011732:	add    BYTE PTR [rax],al
 1011734:	in     al,dx
 1011735:	(bad)  
 1011736:	add    BYTE PTR [rax],al
 1011738:	hlt    
 1011739:	rol    DWORD PTR [rax],0x0
 101173c:	mov    dl,al
 101173e:	add    BYTE PTR [rax],al
 1011740:	add    al,0xcf
 1011742:	add    BYTE PTR [rax],al
 1011744:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1011745:	ret    0x0
 1011748:	(bad)
 101174c:	sbb    bl,cl
 101174e:	add    BYTE PTR [rax],al
 1011750:	retf   0xc2
 1011753:	add    ch,ah
 1011755:	ret    0x0
 1011758:	test   bl,cl
 101175a:	add    BYTE PTR [rax],al
 101175c:	lock ret 0x0
 1011760:	adc    al,bl
 1011762:	add    BYTE PTR [rax],al
 1011764:	int3   
 1011765:	retf   
 1011766:	add    BYTE PTR [rax],al
 1011768:	xor    bl,al
 101176a:	add    BYTE PTR [rax],al
 101176c:	rex.R ret 
 101176e:	add    BYTE PTR [rax],al
 1011770:	and    ch,cl
	...

Disassembly of section .rsrc:

0000000001012000 <.rsrc>:
	...
 1012008:	add    al,0x0
 101200a:	add    BYTE PTR [rax],al
 101200c:	add    BYTE PTR [rax],al
 101200e:	add    al,BYTE PTR [rax]
 1012010:	adc    BYTE PTR [rax],al
 1012012:	add    BYTE PTR [rax],al
 1012014:	and    BYTE PTR [rax],al
 1012016:	add    BYTE PTR [rax+0x18],al
 101201c:	cmp    BYTE PTR [rax],al
 101201e:	add    BYTE PTR [rax+0x0],al
 1012024:	add    BYTE PTR [rax],al
 1012026:	add    BYTE PTR [rax],al
 1012028:	add    al,0x0
 101202a:	add    BYTE PTR [rax],al
 101202c:	add    BYTE PTR [rax],al
 101202e:	add    DWORD PTR [rax],eax
 1012030:	add    DWORD PTR [rax],eax
 1012032:	add    BYTE PTR [rax],al
 1012034:	push   rax
 1012035:	add    BYTE PTR [rax],al
 1012037:	add    BYTE PTR [rax],0x0
 101203a:	add    BYTE PTR [rax],al
 101203c:	add    BYTE PTR [rax],al
 101203e:	add    BYTE PTR [rax],al
 1012040:	add    al,0x0
 1012042:	add    BYTE PTR [rax],al
 1012044:	add    BYTE PTR [rax],al
 1012046:	add    DWORD PTR [rax],eax
 1012048:	add    DWORD PTR [rax],eax
 101204a:	add    BYTE PTR [rax],al
 101204c:	push   0x800000
 1012051:	add    BYTE PTR [rax],al
 1012053:	add    BYTE PTR [rax],al
 1012055:	add    BYTE PTR [rax],al
 1012057:	add    BYTE PTR [rax+rax*1],al
 101205a:	add    BYTE PTR [rax],al
 101205c:	add    BYTE PTR [rax],al
 101205e:	add    DWORD PTR [rax],eax
 1012060:	or     DWORD PTR [rax+rax*1],eax
 1012063:	add    BYTE PTR [rax+0x0],al
 1012069:	add    BYTE PTR [rax],al
 101206b:	add    BYTE PTR [rax],al
 101206d:	add    BYTE PTR [rax],al
 101206f:	add    BYTE PTR [rax+rax*1],al
 1012072:	add    BYTE PTR [rax],al
 1012074:	add    BYTE PTR [rax],al
 1012076:	add    DWORD PTR [rax],eax
 1012078:	or     DWORD PTR [rax+rax*1],eax
 101207b:	add    BYTE PTR [rax-0x60000000],dl
 1012081:	and    BYTE PTR [rcx],al
 1012083:	add    BYTE PTR [rax-0x1bfffffc],dh
 1012089:	add    al,0x0
 101208b:	add    BYTE PTR [rax],al
 101208d:	add    BYTE PTR [rax],al
 101208f:	add    BYTE PTR [rax+0x25],dl
 1012092:	add    DWORD PTR [rax],eax
 1012094:	pop    rdx
 1012095:	add    DWORD PTR [rax],eax
 1012097:	add    ah,ah
 1012099:	add    al,0x0
 101209b:	add    BYTE PTR [rax],al
 101209d:	add    BYTE PTR [rax],al
 101209f:	add    BYTE PTR [rax+0x3404],dh
 10120a5:	add    BYTE PTR [rsi+0x0],dl
 10120a8:	push   rbx
 10120a9:	add    BYTE PTR [rdi+0x0],bl
 10120ac:	push   rsi
 10120ad:	add    BYTE PTR [rbp+0x0],al
 10120b0:	push   rdx
 10120b1:	add    BYTE PTR [rbx+0x0],dl
 10120b4:	rex.WB add BYTE PTR [r15+0x0],cl
 10120b8:	rex.WRX add BYTE PTR [rdi+0x0],r11b
 10120bc:	rex.WB add BYTE PTR [r14+0x0],cl
 10120c0:	rex.RX add BYTE PTR [rdi+0x0],r9b
 10120c4:	add    BYTE PTR [rax],al
 10120c6:	add    BYTE PTR [rax],al
 10120c8:	mov    ebp,0xfeef04
 10120cd:	add    BYTE PTR [rcx],al
 10120cf:	add    BYTE PTR [rsi+0x0],ch
 10120d2:	fild   DWORD PTR [rdi]
 10120d4:	cmp    al,0x0
 10120d6:	xor    al,0x8
 10120d8:	add    BYTE PTR [rax],al
 10120da:	or     eax,DWORD PTR [rax]
 10120dc:	cmp    al,0x0
 10120de:	xor    al,0x8
 10120e0:	(bad)  
 10120e1:	add    BYTE PTR [rax],al
 10120e3:	add    BYTE PTR [rax],cl
 10120e5:	add    BYTE PTR [rax],al
 10120e7:	add    BYTE PTR [rax],al
 10120e9:	add    BYTE PTR [rax+rax*1],al
 10120ec:	add    DWORD PTR [rax],eax
	...
 10120fa:	add    BYTE PTR [rax],al
 10120fc:	(bad)  
 10120fd:	add    al,0x0
 10120ff:	add    BYTE PTR [rcx],al
 1012101:	add    BYTE PTR [rbx+0x0],dl
 1012104:	je     0x1012106
 1012106:	jb     0x1012108
 1012108:	imul   eax,DWORD PTR [rax],0x67006e
 101210e:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1012112:	ins    BYTE PTR es:[rdi],dx
 1012113:	add    BYTE PTR [rbp+0x0],ah
 1012116:	rex.WB add BYTE PTR [r14+0x0],bpl
 101211a:	data16 add BYTE PTR [rdi+0x0],ch
 101211e:	add    BYTE PTR [rax],al
 1012120:	(bad)  
 1012121:	add    eax,DWORD PTR [rax]
 1012123:	add    BYTE PTR [rcx],al
 1012125:	add    BYTE PTR [rax],dh
 1012127:	add    BYTE PTR [rax+rax*1],dh
 101212a:	xor    BYTE PTR [rax],al
 101212c:	cmp    DWORD PTR [rax],eax
 101212e:	xor    BYTE PTR [rax],al
 1012130:	xor    al,0x0
 1012132:	rex.X add BYTE PTR [rax],sil
 1012135:	add    BYTE PTR [rax],al
 1012137:	add    BYTE PTR [rsi],ah
 1012139:	add    BYTE PTR [rdi],al
 101213b:	add    BYTE PTR [rcx],al
 101213d:	add    BYTE PTR [rax+0x0],dl
 1012140:	ins    BYTE PTR es:[rdi],dx
 1012141:	add    BYTE PTR [rcx+0x0],ah
 1012144:	je     0x1012146
 1012146:	data16 add BYTE PTR [rdi+0x0],ch
 101214a:	jb     0x101214c
 101214c:	ins    DWORD PTR es:[rdi],dx
 101214d:	add    BYTE PTR [rax],al
 101214f:	add    BYTE PTR [rsi+0x0],cl
 1012152:	push   rsp
 1012153:	add    BYTE PTR [rax],ah
 1012155:	add    BYTE PTR [rax+0x0],bh
 1012158:	add    BYTE PTR ss:[rax+rax*1],dh
 101215c:	add    BYTE PTR [rax],al
 101215e:	add    BYTE PTR [rax],al
 1012160:	mov    edx,0x1004900
 1012165:	add    BYTE PTR [rax+rax*1+0x65],cl
 1012169:	add    BYTE PTR [rdi+0x0],ah
 101216c:	(bad)  
 101216d:	add    BYTE PTR [rax+rax*1+0x54],ch
 1012171:	add    BYTE PTR [rdx+0x0],dh
 1012174:	(bad)  
 1012175:	add    BYTE PTR [rax+rax*1+0x65],ah
 1012179:	add    BYTE PTR [rbp+0x0],ch
 101217c:	(bad)  
 101217d:	add    BYTE PTR [rdx+0x0],dh
 1012180:	imul   eax,DWORD PTR [rax],0x73
 1012183:	add    BYTE PTR [rax],al
 1012185:	add    BYTE PTR [rax],al
 1012187:	add    BYTE PTR [rbp+0x0],cl
 101218a:	imul   eax,DWORD PTR [rax],0x720063
 1012190:	outs   dx,DWORD PTR ds:[rsi]
 1012191:	add    BYTE PTR [rbx+0x0],dh
 1012194:	outs   dx,DWORD PTR ds:[rsi]
 1012195:	add    BYTE PTR [rsi+0x0],ah
 1012198:	je     0x101219a
 101219a:	and    BYTE PTR [rax],al
 101219c:	push   rbx
 101219d:	add    BYTE PTR [rcx+0x0],dl
 10121a0:	rex.WR add BYTE PTR [rax],r12b
 10121a3:	add    BYTE PTR [rbx+0x0],dl
 10121a6:	add    BYTE PTR gs:[rdx+0x0],dh
 10121aa:	jbe    0x10121ac
 10121ac:	add    BYTE PTR gs:[rdx+0x0],dh
 10121b0:	and    BYTE PTR [rax],al
 10121b2:	imul   eax,DWORD PTR [rax],0x200073
 10121b8:	(bad)  
 10121b9:	add    BYTE PTR [rax],ah
 10121bb:	add    BYTE PTR [rdx+0x0],dh
 10121be:	add    BYTE PTR gs:[rdi+0x0],ah
 10121c2:	imul   eax,DWORD PTR [rax],0x740073
 10121c8:	add    BYTE PTR gs:[rdx+0x0],dh
 10121cc:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10121d1:	add    BYTE PTR [rax+rax*1+0x72],dh
 10121d5:	add    BYTE PTR [rcx+0x0],ah
 10121d8:	add    BYTE PTR fs:[rbp+0x0],ah
 10121dc:	ins    DWORD PTR es:[rdi],dx
 10121dd:	add    BYTE PTR [rcx+0x0],ah
 10121e0:	jb     0x10121e2
 10121e2:	imul   eax,DWORD PTR [rax],0x20
 10121e5:	add    BYTE PTR [rdi+0x0],ch
 10121e8:	data16 add BYTE PTR [rax],ah
 10121eb:	add    BYTE PTR [rbp+0x0],cl
 10121ee:	imul   eax,DWORD PTR [rax],0x720063
 10121f4:	outs   dx,DWORD PTR ds:[rsi]
 10121f5:	add    BYTE PTR [rbx+0x0],dh
 10121f8:	outs   dx,DWORD PTR ds:[rsi]
 10121f9:	add    BYTE PTR [rsi+0x0],ah
 10121fc:	je     0x10121fe
 10121fe:	and    BYTE PTR [rax],al
 1012200:	rex.XB add BYTE PTR [r15+0x0],bpl
 1012204:	jb     0x1012206
 1012206:	jo     0x1012208
 1012208:	outs   dx,DWORD PTR ds:[rsi]
 1012209:	add    BYTE PTR [rdx+0x0],dh
 101220c:	(bad)  
 101220d:	add    BYTE PTR [rax+rax*1+0x69],dh
 1012211:	add    BYTE PTR [rdi+0x0],ch
 1012214:	outs   dx,BYTE PTR ds:[rsi]
 1012215:	add    BYTE PTR [rsi],ch
 1012217:	add    BYTE PTR [rax],al
 1012219:	add    BYTE PTR [rax],al
 101221b:	add    BYTE PTR [rax],ah
 101221d:	add    BYTE PTR [rax+rax*1],al
 1012220:	add    DWORD PTR [rax],eax
 1012222:	rex.XB add BYTE PTR [r15+0x0],bpl
 1012226:	ins    DWORD PTR es:[rdi],dx
 1012227:	add    BYTE PTR [rbp+0x0],ch
 101222a:	add    BYTE PTR gs:[rsi+0x0],ch
 101222e:	je     0x1012230
 1012230:	jae    0x1012232
 1012232:	add    BYTE PTR [rax],al
 1012234:	push   rbx
 1012235:	add    BYTE PTR [rcx+0x0],dl
 1012238:	rex.WR add BYTE PTR [rax],r8b
 101223b:	add    BYTE PTR [rsi],ah
 101223d:	add    BYTE PTR [rip+0x47000100],al        # 0x48012343
 1012243:	add    BYTE PTR [rdi+0x0],ch
 1012246:	ins    BYTE PTR es:[rdi],dx
 1012247:	add    BYTE PTR [rax+rax*1+0x65],ah
 101224b:	add    BYTE PTR [rsi+0x0],ch
 101224e:	rex.X add BYTE PTR [rcx+0x0],bpl
 1012252:	je     0x1012254
 1012254:	jae    0x1012256
 1012256:	add    BYTE PTR [rax],al
 1012258:	push   rsp
 1012259:	add    BYTE PTR [rdx+0x0],dh
 101225c:	jne    0x101225e
 101225e:	add    BYTE PTR gs:[rax],al
 1012261:	add    BYTE PTR [rax],al
 1012263:	add    BYTE PTR [rax+rax*1+0x16],cl
 1012267:	add    BYTE PTR [rcx],al
 1012269:	add    BYTE PTR [rbx+0x0],al
 101226c:	outs   dx,DWORD PTR ds:[rsi]
 101226d:	add    BYTE PTR [rbp+0x0],ch
 1012270:	jo     0x1012272
 1012272:	(bad)  
 1012273:	add    BYTE PTR [rsi+0x0],ch
 1012276:	jns    0x1012278
 1012278:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 101227c:	ins    DWORD PTR es:[rdi],dx
 101227d:	add    BYTE PTR [rbp+0x0],ah
 1012280:	add    BYTE PTR [rax],al
 1012282:	add    BYTE PTR [rax],al
 1012284:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1012288:	movsxd eax,DWORD PTR [rax]
 101228a:	jb     0x101228c
 101228c:	outs   dx,DWORD PTR ds:[rsi]
 101228d:	add    BYTE PTR [rbx+0x0],dh
 1012290:	outs   dx,DWORD PTR ds:[rsi]
 1012291:	add    BYTE PTR [rsi+0x0],ah
 1012294:	je     0x1012296
 1012296:	and    BYTE PTR [rax],al
 1012298:	rex.XB add BYTE PTR [r15+0x0],bpl
 101229c:	jb     0x101229e
 101229e:	jo     0x10122a0
 10122a0:	outs   dx,DWORD PTR ds:[rsi]
 10122a1:	add    BYTE PTR [rdx+0x0],dh
 10122a4:	(bad)  
 10122a5:	add    BYTE PTR [rax+rax*1+0x69],dh
 10122a9:	add    BYTE PTR [rdi+0x0],ch
 10122ac:	outs   dx,BYTE PTR ds:[rsi]
 10122ad:	add    BYTE PTR [rax],al
 10122af:	add    BYTE PTR [rsi+0x0],ch
 10122b2:	and    eax,DWORD PTR [rax]
 10122b4:	add    DWORD PTR [rax],eax
 10122b6:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10122ba:	ins    BYTE PTR es:[rdi],dx
 10122bb:	add    BYTE PTR [rbp+0x0],ah
 10122be:	add    BYTE PTR [rbp+0x0],r12b
 10122c2:	jae    0x10122c4
 10122c4:	movsxd eax,DWORD PTR [rax]
 10122c6:	jb     0x10122c8
 10122c8:	imul   eax,DWORD PTR [rax],0x740070
 10122ce:	imul   eax,DWORD PTR [rax],0x6e006f
 10122d4:	add    BYTE PTR [rax],al
 10122d6:	add    BYTE PTR [rax],al
 10122d8:	push   rbx
 10122d9:	add    BYTE PTR [rcx+0x0],dl
 10122dc:	rex.WR add BYTE PTR [rax],r12b
 10122df:	add    BYTE PTR [rbx+0x0],dl
 10122e2:	add    BYTE PTR gs:[rdx+0x0],dh
 10122e6:	jbe    0x10122e8
 10122e8:	add    BYTE PTR gs:[rdx+0x0],dh
 10122ec:	and    BYTE PTR [rax],al
 10122ee:	add    BYTE PTR [r8+rax*1+0x20],al
 10122f3:	add    BYTE PTR [rdx+0x0],dh
 10122f6:	add    BYTE PTR gs:[rdi+0x0],ah
 10122fa:	imul   eax,DWORD PTR [rax],0x740073
 1012300:	jb     0x1012302
 1012302:	(bad)  
 1012303:	add    BYTE PTR [rax+rax*1+0x69],dh
 1012307:	add    BYTE PTR [rdi+0x0],ch
 101230a:	outs   dx,BYTE PTR ds:[rsi]
 101230b:	add    BYTE PTR [rax],ah
 101230d:	add    BYTE PTR [rax+0x0],dh
 1012310:	jb     0x1012312
 1012312:	outs   dx,DWORD PTR ds:[rsi]
 1012313:	add    BYTE PTR [rdi+0x0],ah
 1012316:	jb     0x1012318
 1012318:	(bad)  
 1012319:	add    BYTE PTR [rbp+0x0],ch
 101231c:	add    BYTE PTR [rax],al
 101231e:	add    BYTE PTR [rax],al
 1012320:	jl     0x1012322
 1012322:	add    BYTE PTR cs:[rcx],al
 1012325:	add    BYTE PTR [rsi+0x0],al
 1012328:	imul   eax,DWORD PTR [rax],0x65006c
 101232e:	push   rsi
 101232f:	add    BYTE PTR [rbp+0x0],ah
 1012332:	jb     0x1012334
 1012334:	jae    0x1012336
 1012336:	imul   eax,DWORD PTR [rax],0x6e006f
 101233c:	add    BYTE PTR [rax],al
 101233e:	add    BYTE PTR [rax],al
 1012340:	xor    al,BYTE PTR [rax]
 1012342:	xor    BYTE PTR [rax],al
 1012344:	xor    DWORD PTR [rax],eax
 1012346:	xor    DWORD PTR [rax],eax
 1012348:	add    BYTE PTR cs:[rax],dh
 101234b:	add    BYTE PTR [rcx],dh
 101234d:	add    BYTE PTR [rcx],dh
 101234f:	add    BYTE PTR [rax],dh
 1012351:	add    BYTE PTR [rsi],ch
 1012353:	add    BYTE PTR [rdx],dh
 1012355:	add    BYTE PTR [rcx],dh
 1012357:	add    BYTE PTR [rax],dh
 1012359:	add    BYTE PTR [rax],dh
 101235b:	add    BYTE PTR [rsi],ch
 101235d:	add    BYTE PTR [rax],dh
 101235f:	add    BYTE PTR [rsi],dh
 1012361:	add    BYTE PTR [rax],dh
 1012363:	add    BYTE PTR [rax],ah
 1012365:	add    BYTE PTR [rax],ch
 1012367:	add    BYTE PTR [rax],ch
 1012369:	add    BYTE PTR [rbx+0x0],dl
 101236c:	push   rcx
 101236d:	add    BYTE PTR [rax+rax*1+0x31],cl
 1012371:	add    BYTE PTR [rcx],dh
 1012373:	add    BYTE PTR [rdi+0x0],bl
 1012376:	push   rdx
 1012377:	add    BYTE PTR [rax+rax*1+0x4d],dl
 101237b:	add    BYTE PTR [rcx],ch
 101237d:	add    BYTE PTR [rsi],ch
 101237f:	add    BYTE PTR [rcx],dh
 1012381:	add    BYTE PTR [rdx],dh
 1012383:	add    BYTE PTR [rax],dh
 1012385:	add    BYTE PTR [rdx],dh
 1012387:	add    BYTE PTR [rcx],dh
 1012389:	add    BYTE PTR [rax],dh
 101238b:	add    BYTE PTR [rip+0x39003100],ch        # 0x3a015491
 1012391:	add    BYTE PTR [rcx],dh
 1012393:	add    BYTE PTR [rdi],dh
 1012395:	add    BYTE PTR [rax],ah
 1012397:	add    BYTE PTR [rcx],ch
 1012399:	add    BYTE PTR [rax],al
 101239b:	add    BYTE PTR [rsi],ch
 101239d:	add    BYTE PTR [rdi],al
 101239f:	add    BYTE PTR [rcx],al
 10123a1:	add    BYTE PTR [rcx+0x0],cl
 10123a4:	outs   dx,BYTE PTR ds:[rsi]
 10123a5:	add    BYTE PTR [rax+rax*1+0x65],dh
 10123a9:	add    BYTE PTR [rdx+0x0],dh
 10123ac:	outs   dx,BYTE PTR ds:[rsi]
 10123ad:	add    BYTE PTR [rcx+0x0],ah
 10123b0:	ins    BYTE PTR es:[rdi],dx
 10123b1:	add    BYTE PTR [rsi+0x0],cl
 10123b4:	(bad)  
 10123b5:	add    BYTE PTR [rbp+0x0],ch
 10123b8:	add    BYTE PTR gs:[rax],al
 10123bb:	add    BYTE PTR [rax+0x0],bl
 10123be:	push   rax
 10123bf:	add    BYTE PTR [rcx+0x0],al
 10123c2:	add    BYTE PTR [rbx+0x0],r10b
 10123c6:	rex.WB add BYTE PTR [r8],al
 10123c9:	add    BYTE PTR [rax],al
 10123cb:	add    BYTE PTR [rsi+0x0],ch
 10123ce:	and    eax,0x4c000100
 10123d3:	add    BYTE PTR [rbp+0x0],ah
 10123d6:	add    BYTE PTR [ecx+0x0],ah
 10123da:	ins    BYTE PTR es:[rdi],dx
 10123db:	add    BYTE PTR [rbx+0x0],al
 10123de:	outs   dx,DWORD PTR ds:[rsi]
 10123df:	add    BYTE PTR [rax+0x0],dh
 10123e2:	jns    0x10123e4
 10123e4:	jb     0x10123e6
 10123e6:	imul   eax,DWORD PTR [rax],0x680067
 10123ec:	je     0x10123ee
 10123ee:	add    BYTE PTR [rax],al
 10123f0:	rex.WRB add BYTE PTR [r9+0x0],r13b
 10123f4:	movsxd eax,DWORD PTR [rax]
 10123f6:	jb     0x10123f8
 10123f8:	outs   dx,DWORD PTR ds:[rsi]
 10123f9:	add    BYTE PTR [rbx+0x0],dh
 10123fc:	outs   dx,DWORD PTR ds:[rsi]
 10123fd:	add    BYTE PTR [rsi+0x0],ah
 1012400:	je     0x1012402
 1012402:	and    BYTE PTR [rax],al
 1012404:	rex.XB add BYTE PTR [r15+0x0],bpl
 1012408:	jb     0x101240a
 101240a:	jo     0x101240c
 101240c:	add    BYTE PTR cs:[rax],ah
 101240f:	add    BYTE PTR [rcx+0x0],al
 1012412:	ins    BYTE PTR es:[rdi],dx
 1012413:	add    BYTE PTR [rax+rax*1+0x20],ch
 1012417:	add    BYTE PTR [rdx+0x0],dh
 101241a:	imul   eax,DWORD PTR [rax],0x680067
 1012420:	je     0x1012422
 1012422:	jae    0x1012424
 1012424:	and    BYTE PTR [rax],al
 1012426:	jb     0x1012428
 1012428:	add    BYTE PTR gs:[rbx+0x0],dh
 101242c:	add    BYTE PTR gs:[rdx+0x0],dh
 1012430:	jbe    0x1012432
 1012432:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1012437:	add    BYTE PTR [rax],al
 1012439:	add    BYTE PTR [rax],al
 101243b:	add    BYTE PTR [rdx+0x0],al
 101243e:	or     eax,0x4f000100
 1012443:	add    BYTE PTR [rdx+0x0],dh
 1012446:	imul   eax,DWORD PTR [rax],0x690067
 101244c:	outs   dx,BYTE PTR ds:[rsi]
 101244d:	add    BYTE PTR [rcx+0x0],ah
 1012450:	ins    BYTE PTR es:[rdi],dx
 1012451:	add    BYTE PTR [rsi+0x0],al
 1012454:	imul   eax,DWORD PTR [rax],0x65006c
 101245a:	outs   dx,BYTE PTR ds:[rsi]
 101245b:	add    BYTE PTR [rcx+0x0],ah
 101245e:	ins    DWORD PTR es:[rdi],dx
 101245f:	add    BYTE PTR [rbp+0x0],ah
 1012462:	add    BYTE PTR [rax],al
 1012464:	pop    rax
 1012465:	add    BYTE PTR [rax+0x0],dl
 1012468:	add    BYTE PTR [r8+rax*1+0x53],al
 101246d:	add    BYTE PTR [rcx+0x0],cl
 1012470:	cmp    DWORD PTR [rax],eax
 1012472:	xor    BYTE PTR [rax],al
 1012474:	add    BYTE PTR cs:[rbp+0x0],al
 1012478:	pop    rax
 1012479:	add    BYTE PTR [rbp+0x0],al
 101247c:	add    BYTE PTR [rax],al
 101247e:	add    BYTE PTR [rax],al
 1012480:	rex.WX add BYTE PTR [rip+0x50000100],dl        # 0x51012587
 1012487:	add    BYTE PTR [rdx+0x0],dh
 101248a:	outs   dx,DWORD PTR ds:[rsi]
 101248b:	add    BYTE PTR [rax+rax*1+0x75],ah
 101248f:	add    BYTE PTR [rbx+0x0],ah
 1012492:	je     0x1012494
 1012494:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1012498:	ins    DWORD PTR es:[rdi],dx
 1012499:	add    BYTE PTR [rbp+0x0],ah
 101249c:	add    BYTE PTR [rax],al
 101249e:	add    BYTE PTR [rax],al
 10124a0:	rex.WRB add BYTE PTR [r9+0x0],r13b
 10124a4:	movsxd eax,DWORD PTR [rax]
 10124a6:	jb     0x10124a8
 10124a8:	outs   dx,DWORD PTR ds:[rsi]
 10124a9:	add    BYTE PTR [rbx+0x0],dh
 10124ac:	outs   dx,DWORD PTR ds:[rsi]
 10124ad:	add    BYTE PTR [rsi+0x0],ah
 10124b0:	je     0x10124b2
 10124b2:	and    BYTE PTR [rax],al
 10124b4:	push   rbx
 10124b5:	add    BYTE PTR [rcx+0x0],dl
 10124b8:	rex.WR add BYTE PTR [rax],r12b
 10124bb:	add    BYTE PTR [rbx+0x0],dl
 10124be:	add    BYTE PTR gs:[rdx+0x0],dh
 10124c2:	jbe    0x10124c4
 10124c4:	add    BYTE PTR gs:[rdx+0x0],dh
 10124c8:	add    BYTE PTR [rax],al
 10124ca:	add    BYTE PTR [rax],al
 10124cc:	add    BYTE PTR ds:[rip+0x50000100],cl        # 0x510125d3
 10124d3:	add    BYTE PTR [rdx+0x0],dh
 10124d6:	outs   dx,DWORD PTR ds:[rsi]
 10124d7:	add    BYTE PTR [rax+rax*1+0x75],ah
 10124db:	add    BYTE PTR [rbx+0x0],ah
 10124de:	je     0x10124e0
 10124e0:	push   rsi
 10124e1:	add    BYTE PTR [rbp+0x0],ah
 10124e4:	jb     0x10124e6
 10124e6:	jae    0x10124e8
 10124e8:	imul   eax,DWORD PTR [rax],0x6e006f
 10124ee:	add    BYTE PTR [rax],al
 10124f0:	xor    DWORD PTR [rax],eax
 10124f2:	xor    DWORD PTR [rax],eax
 10124f4:	add    BYTE PTR cs:[rax],dh
 10124f7:	add    BYTE PTR [rsi],ch
 10124f9:	add    BYTE PTR [rdx],dh
 10124fb:	add    BYTE PTR [rcx],dh
 10124fd:	add    BYTE PTR [rax],dh
 10124ff:	add    BYTE PTR [rax],dh
 1012501:	add    BYTE PTR [rsi],ch
 1012503:	add    BYTE PTR [rsi],dh
 1012505:	add    BYTE PTR [rax],dh
 1012507:	add    BYTE PTR [rax],al
 1012509:	add    BYTE PTR [rax],al
 101250b:	add    BYTE PTR [rax+rax*1+0x0],al
 101250f:	add    BYTE PTR [rcx],al
 1012511:	add    BYTE PTR [rsi+0x0],dl
 1012514:	(bad)  
 1012515:	add    BYTE PTR [rdx+0x0],dh
 1012518:	rex.RX add BYTE PTR [rcx+0x0],r13b
 101251c:	ins    BYTE PTR es:[rdi],dx
 101251d:	add    BYTE PTR [rbp+0x0],ah
 1012520:	rex.WB add BYTE PTR [r14+0x0],bpl
 1012524:	data16 add BYTE PTR [rdi+0x0],ch
 1012528:	add    BYTE PTR [rax],al
 101252a:	add    BYTE PTR [rax],al
 101252c:	and    al,0x0
 101252e:	add    al,0x0
 1012530:	add    BYTE PTR [rax],al
 1012532:	push   rsp
 1012533:	add    BYTE PTR [rdx+0x0],dh
 1012536:	(bad)  
 1012537:	add    BYTE PTR [rsi+0x0],ch
 101253a:	jae    0x101253c
 101253c:	ins    BYTE PTR es:[rdi],dx
 101253d:	add    BYTE PTR [rcx+0x0],ah
 1012540:	je     0x1012542
 1012542:	imul   eax,DWORD PTR [rax],0x6e006f
 1012548:	add    BYTE PTR [rax],al
 101254a:	add    BYTE PTR [rax],al
 101254c:	or     DWORD PTR [rax+rsi*4],eax
 101254f:	add    al,0x3c
 1012551:	(bad)  
 1012552:	jae    0x10125c7
 1012554:	gs ins DWORD PTR es:[rdi],dx
 1012556:	(bad)  
 1012557:	ins    BYTE PTR es:[rdi],dx
 1012558:	jns    0x101257a
 101255a:	js     0x10125c9
 101255c:	ins    BYTE PTR es:[rdi],dx
 101255d:	outs   dx,BYTE PTR ds:[rsi]
 101255e:	jae    0x101259d
 1012560:	and    dh,BYTE PTR [rbp+0x72]
 1012563:	outs   dx,BYTE PTR ds:[rsi]
 1012564:	cmp    dh,BYTE PTR [rbx+0x63]
 1012567:	push   0x73616d65
 101256c:	sub    eax,0x7263696d
 1012571:	outs   dx,DWORD PTR ds:[rsi]
 1012572:	jae    0x10125e3
 1012574:	data16 je 0x10125a4
 1012577:	movsxd ebp,DWORD PTR [rdi+0x6d]
 101257a:	cmp    ah,BYTE PTR [rcx+0x73]
 101257d:	ins    DWORD PTR es:[rdi],dx
 101257e:	cs jbe 0x10125b2
 1012581:	and    ah,BYTE PTR [rax]
 1012583:	ins    DWORD PTR es:[rdi],dx
 1012584:	(bad)  
 1012585:	outs   dx,BYTE PTR ds:[rsi]
 1012586:	imul   esp,DWORD PTR [rsi+0x65],0x65567473
 101258d:	jb     0x1012602
 101258f:	imul   ebp,DWORD PTR [rdi+0x6e],0x2e31223d
 1012596:	xor    BYTE PTR [rdx],ah
 1012598:	ds or  eax,0x3c20200a
 101259e:	je     0x1012612
 10125a0:	jne    0x1012615
 10125a2:	je     0x10125ed
 10125a4:	outs   dx,BYTE PTR ds:[rsi]
 10125a5:	outs   dx,WORD PTR ds:[rsi]
 10125a7:	and    BYTE PTR [rax+0x6d],bh
 10125aa:	ins    BYTE PTR es:[rdi],dx
 10125ab:	outs   dx,BYTE PTR ds:[rsi]
 10125ac:	jae    0x10125eb
 10125ae:	and    dh,BYTE PTR [rbp+0x72]
 10125b1:	outs   dx,BYTE PTR ds:[rsi]
 10125b2:	cmp    dh,BYTE PTR [rbx+0x63]
 10125b5:	push   0x73616d65
 10125ba:	sub    eax,0x7263696d
 10125bf:	outs   dx,DWORD PTR ds:[rsi]
 10125c0:	jae    0x1012631
 10125c2:	data16 je 0x10125f2
 10125c5:	movsxd ebp,DWORD PTR [rdi+0x6d]
 10125c8:	cmp    ah,BYTE PTR [rcx+0x73]
 10125cb:	ins    DWORD PTR es:[rdi],dx
 10125cc:	cs jbe 0x1012602
 10125cf:	and    bh,BYTE PTR [rsi]
 10125d1:	or     eax,0x2020200a
 10125d6:	and    BYTE PTR [rbx+rsi*2],bh
 10125d9:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 10125dd:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 10125e5:	and    BYTE PTR [rax],ah
 10125e7:	and    BYTE PTR [rax],ah
 10125e9:	cmp    al,0x72
 10125eb:	gs jno 0x1012663
 10125ee:	gs jae 0x1012665
 10125f1:	gs fs push rax
 10125f4:	jb     0x101265f
 10125f6:	jbe    0x1012661
 10125f8:	ins    BYTE PTR es:[rdi],dx
 10125f9:	gs addr32 gs jae 0x101263c
 10125fe:	or     eax,0x2020200a
 1012603:	and    BYTE PTR [rax],ah
 1012605:	and    BYTE PTR [rax],ah
 1012607:	and    BYTE PTR [rdx+rsi*2],bh
 101260a:	gs jno 0x1012682
 101260d:	gs jae 0x1012684
 1012610:	gs fs rex.RB js 0x101267a
 1012615:	movsxd esi,DWORD PTR [rbp+0x74]
 1012618:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 101261f:	ins    BYTE PTR es:[rdi],dx
 1012620:	and    BYTE PTR [rbp+riz*2+0x76],ch
 1012624:	gs ins BYTE PTR es:[rdi],dx
 1012626:	cmp    eax,0x49736122
 101262b:	outs   dx,BYTE PTR ds:[rsi]
 101262c:	jbe    0x101269d
 101262e:	imul   esp,DWORD PTR [rbp+0x72],0x22
 1012632:	and    BYTE PTR [rbp+0x69],dh
 1012635:	movsxd esp,DWORD PTR [r11+0x65]
 1012639:	jae    0x10126ae
 101263b:	cmp    eax,0x6c616622
 1012640:	jae    0x10126a7
 1012642:	and    bh,BYTE PTR [rsi]
 1012644:	cmp    al,0x2f
 1012646:	jb     0x10126ad
 1012648:	jno    0x10126bf
 101264a:	gs jae 0x10126c1
 101264d:	gs fs rex.RB js 0x10126b7
 1012652:	movsxd esi,DWORD PTR [rbp+0x74]
 1012655:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 101265c:	ins    BYTE PTR es:[rdi],dx
 101265d:	ds or  eax,0x2020200a
 1012663:	and    BYTE PTR [rax],ah
 1012665:	and    BYTE PTR [rdi+rbp*1],bh
 1012668:	jb     0x10126cf
 101266a:	jno    0x10126e1
 101266c:	gs jae 0x10126e3
 101266f:	gs fs push rax
 1012672:	jb     0x10126dd
 1012674:	jbe    0x10126df
 1012676:	ins    BYTE PTR es:[rdi],dx
 1012677:	gs addr32 gs jae 0x10126ba
 101267c:	or     eax,0x2020200a
 1012681:	and    BYTE PTR [rdi+rbp*1],bh
 1012684:	jae    0x10126eb
 1012686:	movsxd esi,DWORD PTR [rbp+0x72]
 1012689:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 1012691:	cmp    al,0x2f
 1012693:	je     0x1012707
 1012695:	jne    0x101270a
 1012697:	je     0x10126e2
 1012699:	outs   dx,BYTE PTR ds:[rsi]
 101269a:	outs   dx,WORD PTR ds:[rsi]
 101269c:	ds or  eax,0x612f3c0a
 10126a2:	jae    0x1012717
 10126a4:	gs ins DWORD PTR es:[rdi],dx
 10126a6:	(bad)  
 10126a7:	ins    BYTE PTR es:[rdi],dx
 10126a8:	jns    0x10126e8
 10126aa:	push   rax
 10126ab:	rex.B

Disassembly of section .reloc:

0000000001013000 <.reloc>:
 1013000:	add    BYTE PTR [rax],dl
 1013002:	add    BYTE PTR [rax],al
 1013004:	adc    BYTE PTR [rax],al
 1013006:	add    BYTE PTR [rax],al
 1013008:	js     0x1012fad
 101300a:	and    BYTE PTR [rbx-0x5c5f5c68],0x0
 1013011:	and    BYTE PTR [rax],al
 1013013:	add    BYTE PTR [rax+rax*1],cl
 1013016:	add    BYTE PTR [rax],al
 1013018:	jo     0x1012fc1
 101301a:	js     0x1012fc3
 101301c:	add    al,ah
 101301e:	add    BYTE PTR [rax],al
 1013020:	int3   
 1013021:	add    DWORD PTR [rax],eax
 1013023:	add    al,dh
 1013025:	movabs eax,ds:0xa230a220a210a200
 101302e:	movabs ds:0xa280a270a260a250,al
 1013038:	nop
 1013039:	movabs ds:0xa2d0a2c0a2b0a2a0,al
 1013042:	loopne 0x1012fe6
 1013044:	lock movabs ds:0xa330a320a310a300,al
 101304e:	rex movabs ds:0xa380a370a360a350,eax
 1013058:	nop
 1013059:	movabs ds:0xa3d0a3c0a3b0a3a0,eax
 1013062:	loopne 0x1013007
 1013064:	lock movabs ds:0xa430a420a410a400,eax
 101306e:	rex movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1013070:	push   rax
 1013071:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1013072:	(bad)  
 1013073:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1013074:	jo     0x101301a
 1013076:	and    BYTE PTR [rax+rdx*4-0x4f5b5f5c],0xa4
 101307e:	shl    BYTE PTR [rax+rdx*8-0xf5b1f5c],0xa4
 1013086:	add    BYTE PTR [rbp-0x5adf5af0],ah
 101308c:	xor    BYTE PTR [rbp-0x5aaf5ac0],ah
 1013092:	(bad)  
 1013093:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1013094:	jo     0x101303b
 1013096:	and    BYTE PTR [rbp-0x5a5f5a70],0xb0
 101309d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101309e:	shl    BYTE PTR [rbp-0x5a1f5a30],0xf0
 10130a5:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10130a6:	add    BYTE PTR [rsi-0x59df59f0],ah
 10130ac:	xor    BYTE PTR [rsi-0x59af59c0],ah
 10130b2:	(bad)  
 10130b3:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10130b4:	jo     0x101305c
 10130b6:	and    BYTE PTR [rsi-0x595f5970],0xb0
 10130bd:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10130be:	shl    BYTE PTR [rsi-0x591f5930],0xf0
 10130c5:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10130c6:	add    BYTE PTR [rdi-0x58df58f0],ah
 10130cc:	xor    BYTE PTR [rdi-0x58af58c0],ah
 10130d2:	(bad)  
 10130d3:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10130d4:	jo     0x101307d
 10130d6:	and    BYTE PTR [rdi-0x585f5870],0xb0
 10130dd:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10130de:	shl    BYTE PTR [rdi-0x581f5830],0xf0
 10130e5:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10130e6:	add    BYTE PTR [rax-0x57df57f0],ch
 10130ec:	xor    BYTE PTR [rax-0x57af57c0],ch
 10130f2:	(bad)  
 10130f3:	test   al,0x70
 10130f5:	test   al,0x80
 10130f7:	test   al,0x90
 10130f9:	test   al,0xa0
 10130fb:	test   al,0xb0
 10130fd:	test   al,0xc0
 10130ff:	test   al,0xd0
 1013101:	test   al,0xe0
 1013103:	test   al,0xf0
 1013105:	test   al,0x0
 1013107:	test   eax,0xa920a910
 101310c:	xor    BYTE PTR [rcx-0x56af56c0],ch
 1013112:	(bad)  
 1013113:	test   eax,0xa980a970
 1013118:	nop
 1013119:	test   eax,0xa9b0a9a0
 101311e:	shr    BYTE PTR [rcx-0x561f5630],0xf0
 1013125:	test   eax,0xaa10aa00
 101312a:	and    BYTE PTR [rdx-0x55bf55d0],ch
 1013130:	push   rax
 1013131:	stos   BYTE PTR es:[rdi],al
 1013132:	(bad)  
 1013133:	stos   BYTE PTR es:[rdi],al
 1013134:	jo     0x10130e0
 1013136:	sub    BYTE PTR [rdx-0x555f5570],0xb0
 101313d:	stos   BYTE PTR es:[rdi],al
 101313e:	shr    BYTE PTR [rdx-0x551f5530],0xf0
 1013145:	stos   BYTE PTR es:[rdi],al
 1013146:	add    BYTE PTR [rbx-0x54df54f0],ch
 101314c:	xor    BYTE PTR [rbx-0x54af54c0],ch
 1013152:	(bad)  
 1013153:	stos   DWORD PTR es:[rdi],eax
 1013154:	jo     0x1013101
 1013156:	sub    BYTE PTR [rbx-0x545f5470],0xb0
 101315d:	stos   DWORD PTR es:[rdi],eax
 101315e:	shr    BYTE PTR [rbx-0x541f5430],0xf0
 1013165:	stos   DWORD PTR es:[rdi],eax
 1013166:	add    BYTE PTR [rax+rdx*1+0x30ac20ac],ch
 101316d:	lods   al,BYTE PTR ds:[rsi]
 101316e:	lods   al,BYTE PTR ds:[rsi]
 1013170:	push   rax
 1013171:	lods   al,BYTE PTR ds:[rsi]
 1013172:	(bad)  
 1013173:	lods   al,BYTE PTR ds:[rsi]
 1013174:	jo     0x1013122
 1013176:	sub    BYTE PTR [rax+rdx*4-0x4f535f54],0xac
 101317e:	shr    BYTE PTR [rax+rdx*8-0xf531f54],0xac
 1013186:	add    BYTE PTR [rbp-0x52df52f0],ch
 101318c:	xor    BYTE PTR [rbp-0x52af52c0],ch
 1013192:	(bad)  
 1013193:	lods   eax,DWORD PTR ds:[rsi]
 1013194:	jo     0x1013143
 1013196:	sub    BYTE PTR [rbp-0x525f5270],0xb0
 101319d:	lods   eax,DWORD PTR ds:[rsi]
 101319e:	shr    BYTE PTR [rbp-0x521f5230],0xf0
 10131a5:	lods   eax,DWORD PTR ds:[rsi]
 10131a6:	add    BYTE PTR [rsi-0x51df51f0],ch
 10131ac:	xor    BYTE PTR [rsi-0x51af51c0],ch
 10131b2:	(bad)  
 10131b3:	scas   al,BYTE PTR es:[rdi]
 10131b4:	jo     0x1013164
 10131b6:	sub    BYTE PTR [rsi-0x515f5170],0xb0
 10131bd:	scas   al,BYTE PTR es:[rdi]
 10131be:	shr    BYTE PTR [rsi-0x511f5130],0xf0
 10131c5:	scas   al,BYTE PTR es:[rdi]
 10131c6:	add    BYTE PTR [rdi-0x50df50f0],ch
 10131cc:	xor    BYTE PTR [rdi-0x50af50c0],ch
 10131d2:	(bad)  
 10131d3:	scas   eax,DWORD PTR es:[rdi]
 10131d4:	jo     0x1013185
 10131d6:	sub    BYTE PTR [rdi-0x505f5070],0xb0
 10131dd:	scas   eax,DWORD PTR es:[rdi]
 10131de:	shr    BYTE PTR [rdi-0x501f5030],0xf0
 10131e5:	scas   eax,DWORD PTR es:[rdi]
 10131e6:	add    BYTE PTR [rax],al
 10131e8:	add    al,dh
 10131ea:	add    BYTE PTR [rax],al
 10131ec:	adc    BYTE PTR [rcx],al
 10131ee:	add    BYTE PTR [rax],al
 10131f0:	add    BYTE PTR [rax-0x5fdf5ff0],ah
 10131f6:	xor    BYTE PTR [rax-0x5faf5fc0],ah
 10131fc:	(bad)  
 10131fd:	movabs al,ds:0xa0a0a090a080a070
 1013206:	mov    al,0xa0
 1013208:	shl    BYTE PTR [rax-0x5f1f5f30],0xf0
 101320f:	movabs al,ds:0xa130a120a110a100
 1013218:	rex movabs eax,ds:0xa180a170a160a150
 1013222:	nop
 1013223:	movabs eax,ds:0xa1d0a1c0a1b0a1a0
 101322c:	loopne 0x10131cf
 101322e:	lock movabs eax,ds:0xa230a220a210a200
 1013238:	movabs ds:0xa280a270a260a250,al
 1013242:	nop
 1013243:	movabs ds:0xa2d0a2c0a2b0a2a0,al
 101324c:	loopne 0x10131f0
 101324e:	lock movabs ds:0xa330a320a310a300,al
 1013258:	rex movabs ds:0xa380a370a360a350,eax
 1013262:	nop
 1013263:	movabs ds:0xa3d0a3c0a3b0a3a0,eax
 101326c:	loopne 0x1013211
 101326e:	lock movabs ds:0xa430a420a410a400,eax
 1013278:	rex movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101327a:	push   rax
 101327b:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101327c:	(bad)  
 101327d:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101327e:	jo     0x1013224
 1013280:	and    BYTE PTR [rax+rdx*4-0x4f5b5f5c],0xa4
 1013288:	shl    BYTE PTR [rax+rdx*8-0xf5b1f5c],0xa4
 1013290:	add    BYTE PTR [rbp-0x5adf5af0],ah
 1013296:	xor    BYTE PTR [rbp-0x5aaf5ac0],ah
 101329c:	(bad)  
 101329d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101329e:	jo     0x1013245
 10132a0:	and    BYTE PTR [rbp-0x5a5f5a70],0xb0
 10132a7:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10132a8:	shl    BYTE PTR [rbp-0x5a1f5a30],0xf0
 10132af:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10132b0:	add    BYTE PTR [rsi-0x59df59f0],ah
 10132b6:	xor    BYTE PTR [rsi-0x59af59c0],ah
 10132bc:	(bad)  
 10132bd:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10132be:	jo     0x1013266
 10132c0:	and    BYTE PTR [rsi-0x595f5970],0xb0
 10132c7:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10132c8:	shl    BYTE PTR [rsi-0x591f5930],0xf0
 10132cf:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10132d0:	add    BYTE PTR [rdi-0x58df58f0],ah
 10132d6:	xor    BYTE PTR [rdi-0x58af58c0],ah
 10132dc:	(bad)  
 10132dd:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10132de:	jo     0x1013287
 10132e0:	and    BYTE PTR [rdi-0x585f5870],0xb0
 10132e7:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10132e8:	shl    BYTE PTR [rdi-0x57ff5810],0x10
 10132ef:	test   al,0x20
 10132f1:	test   al,0x28
 10132f3:	test   al,0x30
 10132f5:	test   al,0x0
	...
