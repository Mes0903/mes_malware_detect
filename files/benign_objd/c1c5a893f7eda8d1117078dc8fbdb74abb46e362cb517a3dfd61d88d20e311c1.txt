
c1c5a893f7eda8d1117078dc8fbdb74abb46e362cb517a3dfd61d88d20e311c1.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	hlt    
 1001001:	(bad)  
 1001002:	add    DWORD PTR [rax],eax
 1001004:	add    BYTE PTR [rax],al
 1001006:	add    BYTE PTR [rax],al
 1001008:	lock (bad) 
 100100a:	add    DWORD PTR [rax],eax
 100100c:	add    BYTE PTR [rax],al
 100100e:	add    BYTE PTR [rax],al
 1001010:	rcr    BYTE PTR [rdi],cl
 1001012:	add    DWORD PTR [rax],eax
 1001014:	add    BYTE PTR [rax],al
 1001016:	add    BYTE PTR [rax],al
 1001018:	mov    dh,0x1f
 100101a:	add    DWORD PTR [rax],eax
 100101c:	add    BYTE PTR [rax],al
 100101e:	add    BYTE PTR [rax],al
 1001020:	cwde   
 1001021:	(bad)  
 1001022:	add    DWORD PTR [rax],eax
 1001024:	add    BYTE PTR [rax],al
 1001026:	add    BYTE PTR [rax],al
 1001028:	(bad)  
 1001029:	(bad)  
 100102a:	add    DWORD PTR [rax],eax
 100102c:	add    BYTE PTR [rax],al
 100102e:	add    BYTE PTR [rax],al
 1001030:	ins    BYTE PTR es:[rdi],dx
 1001031:	(bad)  
 1001032:	add    DWORD PTR [rax],eax
 1001034:	add    BYTE PTR [rax],al
 1001036:	add    BYTE PTR [rax],al
 1001038:	(bad)  
 1001039:	(bad)  
 100103a:	add    DWORD PTR [rax],eax
 100103c:	add    BYTE PTR [rax],al
 100103e:	add    BYTE PTR [rax],al
 1001040:	pop    rax
 1001041:	(bad)  
 1001042:	add    DWORD PTR [rax],eax
 1001044:	add    BYTE PTR [rax],al
 1001046:	add    BYTE PTR [rax],al
 1001048:	rex.R (bad) 
 100104a:	add    DWORD PTR [rax],eax
 100104c:	add    BYTE PTR [rax],al
 100104e:	add    BYTE PTR [rax],al
 1001050:	xor    al,0x1f
 1001052:	add    DWORD PTR [rax],eax
 1001054:	add    BYTE PTR [rax],al
 1001056:	add    BYTE PTR [rax],al
 1001058:	sub    bl,BYTE PTR [rdi]
 100105a:	add    DWORD PTR [rax],eax
 100105c:	add    BYTE PTR [rax],al
 100105e:	add    BYTE PTR [rax],al
 1001060:	sbb    bl,BYTE PTR [rdi]
 1001062:	add    DWORD PTR [rax],eax
 1001064:	add    BYTE PTR [rax],al
 1001066:	add    BYTE PTR [rax],al
 1001068:	add    al,0x1f
 100106a:	add    DWORD PTR [rax],eax
 100106c:	add    BYTE PTR [rax],al
 100106e:	add    BYTE PTR [rax],al
 1001070:	fcomp  QWORD PTR [rsi]
 1001072:	add    DWORD PTR [rax],eax
 1001074:	add    BYTE PTR [rax],al
 1001076:	add    BYTE PTR [rax],al
 1001078:	rcr    BYTE PTR [rsi],1
 100107a:	add    DWORD PTR [rax],eax
 100107c:	add    BYTE PTR [rax],al
 100107e:	add    BYTE PTR [rax],al
 1001080:	ret    0x11e
 1001083:	add    BYTE PTR [rax],al
 1001085:	add    BYTE PTR [rax],al
 1001087:	add    BYTE PTR [rsi+rbx*1+0x1],ch
 100108e:	add    BYTE PTR [rax],al
 1001090:	cwde   
 1001091:	(bad)  
 1001092:	add    DWORD PTR [rax],eax
 1001094:	add    BYTE PTR [rax],al
 1001096:	add    BYTE PTR [rax],al
 1001098:	xchg   BYTE PTR [rsi],bl
 100109a:	add    DWORD PTR [rax],eax
 100109c:	add    BYTE PTR [rax],al
 100109e:	add    BYTE PTR [rax],al
 10010a0:	jb     0x10010c0
 10010a2:	add    DWORD PTR [rax],eax
 10010a4:	add    BYTE PTR [rax],al
 10010a6:	add    BYTE PTR [rax],al
 10010a8:	(bad)  
 10010a9:	(bad)  
 10010aa:	add    DWORD PTR [rax],eax
 10010ac:	add    BYTE PTR [rax],al
 10010ae:	add    BYTE PTR [rax],al
 10010b0:	push   rsp
 10010b1:	(bad)  
 10010b2:	add    DWORD PTR [rax],eax
 10010b4:	add    BYTE PTR [rax],al
 10010b6:	add    BYTE PTR [rax],al
 10010b8:	rex.RX (bad) 
 10010ba:	add    DWORD PTR [rax],eax
 10010bc:	add    BYTE PTR [rax],al
 10010be:	add    BYTE PTR [rax],al
 10010c0:	(bad)  
 10010c1:	and    BYTE PTR [rcx],al
	...
 10010cf:	add    BYTE PTR [rsi+0x21],al
 10010d2:	add    DWORD PTR [rax],eax
 10010d4:	add    BYTE PTR [rax],al
 10010d6:	add    BYTE PTR [rax],al
 10010d8:	and    DWORD PTR ss:[rcx],eax
 10010db:	add    BYTE PTR [rax],al
 10010dd:	add    BYTE PTR [rax],al
 10010df:	add    BYTE PTR [rcx+riz*1],bl
 10010e2:	add    DWORD PTR [rax],eax
 10010e4:	add    BYTE PTR [rax],al
 10010e6:	add    BYTE PTR [rax],al
 10010e8:	or     al,0x21
 10010ea:	add    DWORD PTR [rax],eax
 10010ec:	add    BYTE PTR [rax],al
 10010ee:	add    BYTE PTR [rax],al
 10010f0:	clc    
 10010f1:	and    BYTE PTR [rcx],al
 10010f3:	add    BYTE PTR [rax],al
 10010f5:	add    BYTE PTR [rax],al
 10010f7:	add    al,al
 10010f9:	and    DWORD PTR [rcx],eax
 10010fb:	add    BYTE PTR [rax],al
 10010fd:	add    BYTE PTR [rax],al
 10010ff:	add    dl,cl
 1001101:	and    BYTE PTR [rcx],al
 1001103:	add    BYTE PTR [rax],al
 1001105:	add    BYTE PTR [rax],al
 1001107:	add    BYTE PTR [rsi+0x120],dh
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    BYTE PTR [rax+0x120],bl
 1001115:	add    BYTE PTR [rax],al
 1001117:	add    BYTE PTR [rax+riz*1+0x1],bh
 100111b:	add    BYTE PTR [rax],al
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    BYTE PTR [rax+0x20],ch
 1001122:	add    DWORD PTR [rax],eax
 1001124:	add    BYTE PTR [rax],al
 1001126:	add    BYTE PTR [rax],al
 1001128:	push   rsp
 1001129:	and    BYTE PTR [rcx],al
 100112b:	add    BYTE PTR [rax],al
 100112d:	add    BYTE PTR [rax],al
 100112f:	add    BYTE PTR [rax+riz*1+0x1],al
 1001133:	add    BYTE PTR [rax],al
 1001135:	add    BYTE PTR [rax],al
 1001137:	add    BYTE PTR [rax+riz*1],bh
 100113a:	add    DWORD PTR [rax],eax
 100113c:	add    BYTE PTR [rax],al
 100113e:	add    BYTE PTR [rax],al
 1001140:	pop    rsp
 1001141:	and    DWORD PTR [rcx],eax
 1001143:	add    BYTE PTR [rax],al
 1001145:	add    BYTE PTR [rax],al
 1001147:	add    dh,bl
 1001149:	and    DWORD PTR [rcx],eax
 100114b:	add    BYTE PTR [rax],al
 100114d:	add    BYTE PTR [rax],al
 100114f:	add    dl,ch
 1001151:	and    DWORD PTR [rcx],eax
 1001153:	add    BYTE PTR [rax],al
 1001155:	add    BYTE PTR [rax],al
 1001157:	add    al,bh
 1001159:	and    DWORD PTR [rcx],eax
 100115b:	add    BYTE PTR [rax],al
 100115d:	add    BYTE PTR [rax],al
 100115f:	add    BYTE PTR [rax],cl
 1001161:	and    al,BYTE PTR [rcx]
 1001163:	add    BYTE PTR [rax],al
 1001165:	add    BYTE PTR [rax],al
 1001167:	add    BYTE PTR [rax],bl
 1001169:	and    al,BYTE PTR [rcx]
 100116b:	add    BYTE PTR [rax],al
 100116d:	add    BYTE PTR [rax],al
 100116f:	add    BYTE PTR [rsi],ah
 1001171:	and    al,BYTE PTR [rcx]
 1001173:	add    BYTE PTR [rax],al
 1001175:	add    BYTE PTR [rax],al
 1001177:	add    BYTE PTR [rdx+riz*1],bh
 100117a:	add    DWORD PTR [rax],eax
 100117c:	add    BYTE PTR [rax],al
 100117e:	add    BYTE PTR [rax],al
 1001180:	pop    rax
 1001181:	and    al,BYTE PTR [rcx]
 1001183:	add    BYTE PTR [rax],al
 1001185:	add    BYTE PTR [rax],al
 1001187:	add    BYTE PTR [rdx+riz*1+0x1],dh
 100118b:	add    BYTE PTR [rax],al
 100118d:	add    BYTE PTR [rax],al
 100118f:	add    BYTE PTR [rdx+0x122],cl
 1001195:	add    BYTE PTR [rax],al
 1001197:	add    BYTE PTR [rax+0x122],ah
 100119d:	add    BYTE PTR [rax],al
 100119f:	add    BYTE PTR [rsi+0x122],ch
 10011a5:	add    BYTE PTR [rax],al
 10011a7:	add    ah,al
 10011a9:	and    al,BYTE PTR [rcx]
 10011ab:	add    BYTE PTR [rax],al
 10011ad:	add    BYTE PTR [rax],al
 10011af:	add    BYTE PTR [rdx+0x21],dh
 10011b2:	add    DWORD PTR [rax],eax
 10011b4:	add    BYTE PTR [rax],al
 10011b6:	add    BYTE PTR [rax],al
 10011b8:	mov    WORD PTR [rcx],fs
 10011ba:	add    DWORD PTR [rax],eax
 10011bc:	add    BYTE PTR [rax],al
 10011be:	add    BYTE PTR [rax],al
 10011c0:	shl    BYTE PTR [rcx],cl
 10011c2:	add    DWORD PTR [rax],eax
 10011c4:	add    BYTE PTR [rax],al
 10011c6:	add    BYTE PTR [rax],al
 10011c8:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10011c9:	and    DWORD PTR [rcx],eax
 10011cb:	add    BYTE PTR [rax],al
 10011cd:	add    BYTE PTR [rax],al
 10011cf:	add    dh,dl
 10011d1:	and    al,BYTE PTR [rcx]
 10011d3:	add    BYTE PTR [rax],al
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    dl,ah
 10011d9:	and    al,BYTE PTR [rcx]
 10011db:	add    BYTE PTR [rax],al
 10011dd:	add    BYTE PTR [rax],al
 10011df:	add    ah,dh
 10011e1:	and    al,BYTE PTR [rcx]
 10011e3:	add    BYTE PTR [rax],al
 10011e5:	add    BYTE PTR [rax],al
 10011e7:	add    BYTE PTR [rax],al
 10011e9:	and    eax,DWORD PTR [rcx]
 10011eb:	add    BYTE PTR [rax],al
 10011ed:	add    BYTE PTR [rax],al
 10011ef:	add    BYTE PTR [rax],dl
 10011f1:	and    eax,DWORD PTR [rcx]
 10011f3:	add    BYTE PTR [rax],al
 10011f5:	add    BYTE PTR [rax],al
 10011f7:	add    BYTE PTR [rbx+riz*1],bl
 10011fa:	add    DWORD PTR [rax],eax
 10011fc:	add    BYTE PTR [rax],al
 10011fe:	add    BYTE PTR [rax],al
 1001200:	sub    BYTE PTR [rbx],ah
 1001202:	add    DWORD PTR [rax],eax
 1001204:	add    BYTE PTR [rax],al
 1001206:	add    BYTE PTR [rax],al
 1001208:	cmp    BYTE PTR [rbx],ah
 100120a:	add    DWORD PTR [rax],eax
 100120c:	add    BYTE PTR [rax],al
 100120e:	add    BYTE PTR [rax],al
 1001210:	rex.WX and rax,QWORD PTR [rcx]
 1001213:	add    BYTE PTR [rax],al
 1001215:	add    BYTE PTR [rax],al
 1001217:	add    BYTE PTR [rdx+0x23],bl
 100121a:	add    DWORD PTR [rax],eax
 100121c:	add    BYTE PTR [rax],al
 100121e:	add    BYTE PTR [rax],al
 1001220:	ins    BYTE PTR es:[rdi],dx
 1001221:	and    eax,DWORD PTR [rcx]
 1001223:	add    BYTE PTR [rax],al
 1001225:	add    BYTE PTR [rax],al
 1001227:	add    BYTE PTR [rsi+0x23],bh
 100122a:	add    DWORD PTR [rax],eax
 100122c:	add    BYTE PTR [rax],al
 100122e:	add    BYTE PTR [rax],al
 1001230:	xchg   esp,eax
 1001231:	and    eax,DWORD PTR [rcx]
 1001233:	add    BYTE PTR [rax],al
 1001235:	add    BYTE PTR [rax],al
 1001237:	add    BYTE PTR [rdx+0x123],ch
 100123d:	add    BYTE PTR [rax],al
 100123f:	add    al,al
 1001241:	and    eax,DWORD PTR [rcx]
 1001243:	add    BYTE PTR [rax],al
 1001245:	add    BYTE PTR [rax],al
 1001247:	add    ah,dl
 1001249:	and    eax,DWORD PTR [rcx]
 100124b:	add    BYTE PTR [rax],al
 100124d:	add    BYTE PTR [rax],al
 100124f:	add    BYTE PTR [rax],ah
 1001251:	sbb    al,BYTE PTR [rcx]
 1001253:	add    BYTE PTR [rax],al
 1001255:	add    BYTE PTR [rax],al
 1001257:	add    dh,ch
 1001259:	and    eax,DWORD PTR [rcx]
 100125b:	add    BYTE PTR [rax],al
 100125d:	add    BYTE PTR [rax],al
 100125f:	add    BYTE PTR [rsp],al
 1001262:	add    DWORD PTR [rax],eax
 1001264:	add    BYTE PTR [rax],al
 1001266:	add    BYTE PTR [rax],al
 1001268:	sbb    ah,BYTE PTR [rcx+rax*1]
 100126b:	add    BYTE PTR [rax],al
 100126d:	add    BYTE PTR [rax],al
 100126f:	add    BYTE PTR [rax],dh
 1001271:	and    al,0x1
 1001273:	add    BYTE PTR [rax],al
 1001275:	add    BYTE PTR [rax],al
 1001277:	add    BYTE PTR [rsp+0x1],al
 100127b:	add    BYTE PTR [rax],al
 100127d:	add    BYTE PTR [rax],al
 100127f:	add    BYTE PTR [rdx+0x24],dl
 1001282:	add    DWORD PTR [rax],eax
 1001284:	add    BYTE PTR [rax],al
 1001286:	add    BYTE PTR [rax],al
 1001288:	(bad)  
 1001289:	and    al,0x1
 100128b:	add    BYTE PTR [rax],al
 100128d:	add    BYTE PTR [rax],al
 100128f:	add    BYTE PTR [rdx+0x24],dh
 1001292:	add    DWORD PTR [rax],eax
 1001294:	add    BYTE PTR [rax],al
 1001296:	add    BYTE PTR [rax],al
 1001298:	(bad)  
 1001299:	and    al,0x1
 100129b:	add    BYTE PTR [rax],al
 100129d:	add    BYTE PTR [rax],al
 100129f:	add    BYTE PTR [rsi+0x124],cl
 10012a5:	add    BYTE PTR [rax],al
 10012a7:	add    BYTE PTR [rsi+0x124],bl
 10012ad:	add    BYTE PTR [rax],al
 10012af:	add    BYTE PTR [rsi+0x124],ch
 10012b5:	add    BYTE PTR [rax],al
 10012b7:	add    BYTE PTR [rsi+0x124],bh
 10012bd:	add    BYTE PTR [rax],al
 10012bf:	add    ah,cl
 10012c1:	and    al,0x1
 10012c3:	add    BYTE PTR [rax],al
 10012c5:	add    BYTE PTR [rax],al
 10012c7:	add    dl,bl
 10012c9:	and    al,0x1
 10012cb:	add    BYTE PTR [rax],al
 10012cd:	add    BYTE PTR [rax],al
 10012cf:	add    BYTE PTR [rbx+rbx*1],bl
 10012d2:	add    DWORD PTR [rax],eax
 10012d4:	add    BYTE PTR [rax],al
 10012d6:	add    BYTE PTR [rax],al
 10012d8:	or     BYTE PTR [rbx],bl
 10012da:	add    DWORD PTR [rax],eax
 10012dc:	add    BYTE PTR [rax],al
 10012de:	add    BYTE PTR [rax],al
 10012e0:	cld    
 10012e1:	sbb    al,BYTE PTR [rcx]
 10012e3:	add    BYTE PTR [rax],al
 10012e5:	add    BYTE PTR [rax],al
 10012e7:	add    al,dh
 10012e9:	sbb    al,BYTE PTR [rcx]
 10012eb:	add    BYTE PTR [rax],al
 10012ed:	add    BYTE PTR [rax],al
 10012ef:	add    al,bl
 10012f1:	sbb    al,BYTE PTR [rcx]
 10012f3:	add    BYTE PTR [rax],al
 10012f5:	add    BYTE PTR [rax],al
 10012f7:	add    al,al
 10012f9:	sbb    al,BYTE PTR [rcx]
 10012fb:	add    BYTE PTR [rax],al
 10012fd:	add    BYTE PTR [rax],al
 10012ff:	add    BYTE PTR [rax+0x11a],ch
 1001305:	add    BYTE PTR [rax],al
 1001307:	add    BYTE PTR [rdx+rbx*1+0x1],cl
 100130e:	add    BYTE PTR [rax],al
 1001310:	jl     0x100132c
 1001312:	add    DWORD PTR [rax],eax
 1001314:	add    BYTE PTR [rax],al
 1001316:	add    BYTE PTR [rax],al
 1001318:	ins    BYTE PTR es:[rdi],dx
 1001319:	sbb    al,BYTE PTR [rcx]
 100131b:	add    BYTE PTR [rax],al
 100131d:	add    BYTE PTR [rax],al
 100131f:	add    BYTE PTR [rdx+0x1a],bl
 1001322:	add    DWORD PTR [rax],eax
 1001324:	add    BYTE PTR [rax],al
 1001326:	add    BYTE PTR [rax],al
 1001328:	sbb    r8b,BYTE PTR [rcx]
 100132b:	add    BYTE PTR [rax],al
 100132d:	add    BYTE PTR [rax],al
 100132f:	add    BYTE PTR [rdx],dh
 1001331:	sbb    al,BYTE PTR [rcx]
 1001333:	add    BYTE PTR [rax],al
 1001335:	add    BYTE PTR [rax],al
 1001337:	add    dh,bl
 1001339:	and    BYTE PTR [rcx],al
	...
 1001347:	add    BYTE PTR [rdx+0x11c],bh
 100134d:	add    BYTE PTR [rax],al
 100134f:	add    BYTE PTR [rax+0x125],ah
 1001355:	add    BYTE PTR [rax],al
 1001357:	add    BYTE PTR [rsi+0x125],dl
 100135d:	add    BYTE PTR [rax],al
 100135f:	add    BYTE PTR [rdx+0x125],cl
 1001365:	add    BYTE PTR [rax],al
 1001367:	add    BYTE PTR [rsi+0x25],bh
 100136a:	add    DWORD PTR [rax],eax
 100136c:	add    BYTE PTR [rax],al
 100136e:	add    BYTE PTR [rax],al
 1001370:	jb     0x1001397
 1001372:	add    DWORD PTR [rax],eax
 1001374:	add    BYTE PTR [rax],al
 1001376:	add    BYTE PTR [rax],al
 1001378:	(bad)  
 1001379:	and    eax,0x1
 100137e:	add    BYTE PTR [rax],al
 1001380:	push   rdx
 1001381:	and    eax,0x1
 1001386:	add    BYTE PTR [rax],al
 1001388:	rex.R and eax,0x1
 100138e:	add    BYTE PTR [rax],al
 1001390:	cmp    ah,BYTE PTR [rip+0x1]        # 0x1001397
 1001396:	add    BYTE PTR [rax],al
 1001398:	sub    al,0x25
 100139a:	add    DWORD PTR [rax],eax
 100139c:	add    BYTE PTR [rax],al
 100139e:	add    BYTE PTR [rax],al
 10013a0:	and    al,0x25
 10013a2:	add    DWORD PTR [rax],eax
 10013a4:	add    BYTE PTR [rax],al
 10013a6:	add    BYTE PTR [rax],al
 10013a8:	adc    al,0x25
 10013aa:	add    DWORD PTR [rax],eax
 10013ac:	add    BYTE PTR [rax],al
 10013ae:	add    BYTE PTR [rax],al
 10013b0:	or     ah,BYTE PTR [rip+0x1]        # 0x10013b7
 10013b6:	add    BYTE PTR [rax],al
 10013b8:	cli    
 10013b9:	and    al,0x1
 10013bb:	add    BYTE PTR [rax],al
 10013bd:	add    BYTE PTR [rax],al
 10013bf:	add    dl,ch
 10013c1:	and    al,0x1
 10013c3:	add    BYTE PTR [rax],al
 10013c5:	add    BYTE PTR [rax],al
 10013c7:	add    BYTE PTR [rax+0x1b],al
 10013ca:	add    DWORD PTR [rax],eax
 10013cc:	add    BYTE PTR [rax],al
 10013ce:	add    BYTE PTR [rax],al
 10013d0:	push   rax
 10013d1:	sbb    eax,DWORD PTR [rcx]
 10013d3:	add    BYTE PTR [rax],al
 10013d5:	add    BYTE PTR [rax],al
 10013d7:	add    BYTE PTR [rbx+rbx*1+0x1],bl
 10013db:	add    BYTE PTR [rax],al
 10013dd:	add    BYTE PTR [rax],al
 10013df:	add    BYTE PTR [rsi+0x1b],ch
 10013e2:	add    DWORD PTR [rax],eax
 10013e4:	add    BYTE PTR [rax],al
 10013e6:	add    BYTE PTR [rax],al
 10013e8:	jp     0x1001405
 10013ea:	add    DWORD PTR [rax],eax
 10013ec:	add    BYTE PTR [rax],al
 10013ee:	add    BYTE PTR [rax],al
 10013f0:	(bad)  
 10013f1:	sbb    eax,DWORD PTR [rcx]
 10013f3:	add    BYTE PTR [rax],al
 10013f5:	add    BYTE PTR [rax],al
 10013f7:	add    dh,al
 10013f9:	sbb    eax,DWORD PTR [rcx]
 10013fb:	add    BYTE PTR [rax],al
 10013fd:	add    BYTE PTR [rax],al
 10013ff:	add    dl,dl
 1001401:	sbb    eax,DWORD PTR [rcx]
 1001403:	add    BYTE PTR [rax],al
 1001405:	add    BYTE PTR [rax],al
 1001407:	add    al,ch
 1001409:	sbb    eax,DWORD PTR [rcx]
 100140b:	add    BYTE PTR [rax],al
 100140d:	add    BYTE PTR [rax],al
 100140f:	add    dh,bh
 1001411:	sbb    eax,DWORD PTR [rcx]
 1001413:	add    BYTE PTR [rax],al
 1001415:	add    BYTE PTR [rax],al
 1001417:	add    BYTE PTR [rax],cl
 1001419:	sbb    al,0x1
 100141b:	add    BYTE PTR [rax],al
 100141d:	add    BYTE PTR [rax],al
 100141f:	add    BYTE PTR [rsi],dl
 1001421:	sbb    al,0x1
 1001423:	add    BYTE PTR [rax],al
 1001425:	add    BYTE PTR [rax],al
 1001427:	add    BYTE PTR [rbp+rbx*1+0x1],al
 100142b:	add    BYTE PTR [rax],al
 100142d:	add    BYTE PTR [rax],al
 100142f:	add    BYTE PTR [rdx],bh
 1001431:	sbb    eax,0x1
 1001436:	add    BYTE PTR [rax],al
 1001438:	xor    bl,BYTE PTR [rip+0x1]        # 0x100143f
 100143e:	add    BYTE PTR [rax],al
 1001440:	and    al,0x1d
 1001442:	add    DWORD PTR [rax],eax
 1001444:	add    BYTE PTR [rax],al
 1001446:	add    BYTE PTR [rax],al
 1001448:	sbb    bl,BYTE PTR [rip+0x1]        # 0x100144f
 100144e:	add    BYTE PTR [rax],al
 1001450:	add    al,0x1d
 1001452:	add    DWORD PTR [rax],eax
 1001454:	add    BYTE PTR [rax],al
 1001456:	add    BYTE PTR [rax],al
 1001458:	lock sbb al,0x1
 100145b:	add    BYTE PTR [rax],al
 100145d:	add    BYTE PTR [rax],al
 100145f:	add    al,dl
 1001461:	sbb    al,0x1
 1001463:	add    BYTE PTR [rax],al
 1001465:	add    BYTE PTR [rax],al
 1001467:	add    dh,al
 1001469:	sbb    al,0x1
 100146b:	add    BYTE PTR [rax],al
 100146d:	add    BYTE PTR [rax],al
 100146f:	add    BYTE PTR [rbp+riz*1+0x1],ch
 1001476:	add    BYTE PTR [rax],al
 1001478:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1001479:	sbb    al,0x1
 100147b:	add    BYTE PTR [rax],al
 100147d:	add    BYTE PTR [rax],al
 100147f:	add    BYTE PTR [rax+0x11c],dl
 1001485:	add    BYTE PTR [rax],al
 1001487:	add    BYTE PTR [rdx+0x11c],al
 100148d:	add    BYTE PTR [rax],al
 100148f:	add    BYTE PTR [rsi+0x1c],dh
 1001492:	add    DWORD PTR [rax],eax
 1001494:	add    BYTE PTR [rax],al
 1001496:	add    BYTE PTR [rax],al
 1001498:	push   0x11c
 100149d:	add    BYTE PTR [rax],al
 100149f:	add    BYTE PTR [rax+0x1c],ah
 10014a2:	add    DWORD PTR [rax],eax
 10014a4:	add    BYTE PTR [rax],al
 10014a6:	add    BYTE PTR [rax],al
 10014a8:	push   rsi
 10014a9:	sbb    al,0x1
 10014ab:	add    BYTE PTR [rax],al
 10014ad:	add    BYTE PTR [rax],al
 10014af:	add    BYTE PTR [rsi+0x1c],cl
 10014b2:	add    DWORD PTR [rax],eax
 10014b4:	add    BYTE PTR [rax],al
 10014b6:	add    BYTE PTR [rax],al
 10014b8:	sbb    al,0x1
 10014bb:	add    BYTE PTR [rax],al
 10014bd:	add    BYTE PTR [rax],al
 10014bf:	add    BYTE PTR [rax],ch
 10014c1:	sbb    al,0x1
	...
 10014cf:	add    al,dl
 10014d1:	sbb    eax,0x1
 10014d6:	add    BYTE PTR [rax],al
 10014d8:	loop   0x10014f7
 10014da:	add    DWORD PTR [rax],eax
 10014dc:	add    BYTE PTR [rax],al
 10014de:	add    BYTE PTR [rax],al
 10014e0:	ret    0x11d
	...
 10014ef:	add    BYTE PTR [rax+0x11d],ch
	...
 10014fd:	add    BYTE PTR [rax],al
 10014ff:	add    BYTE PTR [rsi],cl
 1001501:	(bad)  
 1001502:	add    DWORD PTR [rax],eax
 1001504:	add    BYTE PTR [rax],al
 1001506:	add    BYTE PTR [rax],al
 1001508:	sub    BYTE PTR [rsi],bl
 100150a:	add    DWORD PTR [rax],eax
 100150c:	add    BYTE PTR [rax],al
 100150e:	add    BYTE PTR [rax],al
 1001510:	(bad)  
 1001511:	sbb    eax,0x1
	...
 100151e:	add    BYTE PTR [rax],al
 1001520:	mov    WORD PTR [rip+0x1],ds        # 0x1001527
 1001526:	add    BYTE PTR [rax],al
 1001528:	jp     0x1001547
 100152a:	add    DWORD PTR [rax],eax
	...
 1001540:	call   0x101158b
 1001545:	add    BYTE PTR [rax],al
 1001547:	add    BYTE PTR [rax+0x100f6],ah
 100154d:	add    BYTE PTR [rax],al
 100154f:	add    al,ah
 1001551:	test   BYTE PTR [rax],0x1
 1001554:	add    BYTE PTR [rax],al
 1001556:	add    BYTE PTR [rax],al
 1001558:	jo     0x100154f
 100155a:	add    BYTE PTR [rcx],al
 100155c:	add    BYTE PTR [rax],al
 100155e:	add    BYTE PTR [rax],al
 1001560:	nop
 1001561:	cmc    
 1001562:	add    BYTE PTR [rcx],al
 1001564:	add    BYTE PTR [rax],al
 1001566:	add    BYTE PTR [rax],al
 1001568:	loopne 0x100155f
 100156a:	add    BYTE PTR [rcx],al
 100156c:	add    BYTE PTR [rax],al
 100156e:	add    BYTE PTR [rax],al
 1001570:	rex test BYTE PTR [rax],0x1
	...
 1001588:	fmul   QWORD PTR [rax+0x0]
 100158b:	add    DWORD PTR [rax],eax
 100158d:	add    BYTE PTR [rax],al
 100158f:	add    BYTE PTR [rbp+rcx*2+0x100],bl
	...
 10015a2:	add    BYTE PTR [rax],al
 10015a4:	gs jmp 0x10015dc
 10015a7:	rex.WRXB add BYTE PTR [r8],r8b
 10015aa:	add    BYTE PTR [rax],al
 10015ac:	add    al,BYTE PTR [rax]
 10015ae:	add    BYTE PTR [rax],al
 10015b0:	and    eax,DWORD PTR [rax]
 10015b2:	add    BYTE PTR [rax],al
 10015b4:	js     0x10015eb
 10015b6:	add    BYTE PTR [rax],al
 10015b8:	js     0x10015e3
 10015ba:	add    BYTE PTR [rax],al
 10015bc:	add    BYTE PTR [rax],al
 10015be:	add    BYTE PTR [rax],al
 10015c0:	add    BYTE PTR [rsi],dl
 10015c2:	add    BYTE PTR [rcx],al
 10015c4:	add    BYTE PTR [rax],al
 10015c6:	add    BYTE PTR [rax],al
 10015c8:	add    al,0x16
 10015ca:	add    BYTE PTR [rcx],al
 10015cc:	add    BYTE PTR [rax],al
 10015ce:	add    BYTE PTR [rax],al
 10015d0:	or     BYTE PTR [rsi],dl
 10015d2:	add    BYTE PTR [rcx],al
 10015d4:	add    BYTE PTR [rax],al
 10015d6:	add    BYTE PTR [rax],al
 10015d8:	or     al,0x16
 10015da:	add    BYTE PTR [rcx],al
 10015dc:	add    BYTE PTR [rax],al
 10015de:	add    BYTE PTR [rax],al
 10015e0:	adc    BYTE PTR [rsi],dl
 10015e2:	add    BYTE PTR [rcx],al
 10015e4:	add    BYTE PTR [rax],al
 10015e6:	add    BYTE PTR [rax],al
 10015e8:	sbb    BYTE PTR [rsi],dl
 10015ea:	add    BYTE PTR [rcx],al
 10015ec:	add    BYTE PTR [rax],al
 10015ee:	add    BYTE PTR [rax],al
 10015f0:	xor    BYTE PTR [rsi],dl
 10015f2:	add    BYTE PTR [rcx],al
 10015f4:	add    BYTE PTR [rax],al
 10015f6:	add    BYTE PTR [rax],al
 10015f8:	rex.W (bad) 
 10015fa:	add    BYTE PTR [rcx],al
 10015fc:	add    BYTE PTR [rax],al
 10015fe:	add    BYTE PTR [rax],al
 1001600:	push   rbx
 1001601:	add    BYTE PTR [rax],al
 1001603:	add    BYTE PTR [rbp+0x0],cl
 1001606:	add    BYTE PTR [rax],al
 1001608:	add    BYTE PTR [rax],r8b
 100160b:	add    BYTE PTR [rdx+0x0],al
 100160e:	add    BYTE PTR [rax],al
 1001610:	push   rsi
 1001611:	add    BYTE PTR [rcx+0x0],ah
 1001614:	ins    BYTE PTR es:[rdi],dx
 1001615:	add    BYTE PTR [rax],al
 1001617:	add    BYTE PTR [rsi+0x0],al
 100161a:	outs   dx,DWORD PTR ds:[rsi]
 100161b:	add    BYTE PTR [rdx+0x0],dh
 100161e:	movsxd eax,DWORD PTR [rax]
 1001620:	add    BYTE PTR gs:[rdx+0x0],dl
 1001624:	add    BYTE PTR gs:[rbp+0x0],ch
 1001628:	outs   dx,DWORD PTR ds:[rsi]
 1001629:	add    BYTE PTR [rsi+0x0],dh
 100162c:	add    BYTE PTR gs:[rax],al
 100162f:	add    BYTE PTR [rsi+0x0],cl
 1001632:	outs   dx,DWORD PTR ds:[rsi]
 1001633:	add    BYTE PTR [rdx+0x0],dl
 1001636:	add    BYTE PTR gs:[rbp+0x0],ch
 100163a:	outs   dx,DWORD PTR ds:[rsi]
 100163b:	add    BYTE PTR [rsi+0x0],dh
 100163e:	add    BYTE PTR gs:[rax],al
 1001641:	add    BYTE PTR [rax],al
 1001643:	add    BYTE PTR [rax],al
 1001645:	add    BYTE PTR [rax],al
 1001647:	add    BYTE PTR [rax+rax*1+0x65],al
 100164b:	add    BYTE PTR [rax+rax*1+0x65],ch
 100164f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1001653:	add    BYTE PTR [rax],al
 1001655:	add    BYTE PTR [rax],al
 1001657:	add    BYTE PTR [rdi],ch
 1001659:	add    BYTE PTR [rax],al
 100165b:	add    BYTE PTR [rax],al
 100165d:	add    BYTE PTR [rax],al
 100165f:	add    BYTE PTR [rdx],ah
 1001661:	add    eax,0x11993
 1001666:	add    BYTE PTR [rax],al
 1001668:	cmp    al,0xf8
	...
 1001672:	add    BYTE PTR [rax],al
 1001674:	add    DWORD PTR [rax],eax
 1001676:	add    BYTE PTR [rax],al
 1001678:	rex.R clc 
	...
 1001686:	add    BYTE PTR [rax],al
 1001688:	and    al,BYTE PTR [rip+0x11993]        # 0x1013021
 100168e:	add    BYTE PTR [rax],al
 1001690:	fs clc 
	...
 100169a:	add    BYTE PTR [rax],al
 100169c:	add    DWORD PTR [rax],eax
 100169e:	add    BYTE PTR [rax],al
 10016a0:	ins    BYTE PTR es:[rdi],dx
 10016a1:	clc    
 10016a2:	add    BYTE PTR [rax],al
 10016a4:	and    BYTE PTR [rax],al
	...
 10016ae:	add    BYTE PTR [rax],al
 10016b0:	and    al,BYTE PTR [rip+0x131993]        # 0x1133049
 10016b6:	add    BYTE PTR [rax],al
 10016b8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10016b9:	clc    
 10016ba:	add    BYTE PTR [rax],al
 10016bc:	add    al,BYTE PTR [rax]
 10016be:	add    BYTE PTR [rax],al
 10016c0:	cmp    al,0xf9
 10016c2:	add    BYTE PTR [rax],al
 10016c4:	and    DWORD PTR [rax],eax
 10016c6:	add    BYTE PTR [rax],al
 10016c8:	mov    ecx,?
 10016ca:	add    BYTE PTR [rax],al
 10016cc:	lock add DWORD PTR [rax],eax
	...
 10016df:	add    BYTE PTR [rbp+0x3a],ah
 10016e2:	pop    rsp
 10016e3:	jae    0x1001756
 10016e5:	ins    BYTE PTR es:[rdi],dx
 10016e6:	xor    DWORD PTR [rcx],esi
 10016e8:	pop    rdi
 10016e9:	ins    DWORD PTR es:[rdi],dx
 10016ea:	(bad)  
 10016eb:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 10016f2:	ins    BYTE PTR es:[rdi],dx
 10016f3:	pop    rsp
 10016f4:	outs   dx,BYTE PTR ds:[rsi]
 10016f5:	je     0x100175b
 10016f7:	(bad)  
 10016f8:	ins    DWORD PTR es:[rdi],dx
 10016f9:	jae    0x1001757
 10016fb:	ins    DWORD PTR es:[rdi],dx
 10016fc:	jae    0x100176f
 10016fe:	ins    BYTE PTR es:[rdi],dx
 10016ff:	pop    rsp
 1001700:	data16 jne 0x100176f
 1001703:	ins    BYTE PTR es:[rdi],dx
 1001704:	je     0x100176b
 1001706:	js     0x100177c
 1001708:	pop    rsp
 1001709:	jae    0x100177d
 100170b:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 100170f:	(bad)  
 1001710:	jb     0x1001775
 1001712:	push   0x6d6f635c
 1001717:	ins    DWORD PTR es:[rdi],dx
 1001718:	outs   dx,DWORD PTR ds:[rsi]
 1001719:	outs   dx,BYTE PTR ds:[rsi]
 100171a:	pop    rsp
 100171b:	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
 1001722:	pop    rsp
 1001723:	jae    0x1001797
 1001725:	movsxd ebp,DWORD PTR [rax+0x5c]
 1001728:	jae    0x100179c
 100172a:	movsxd ebp,DWORD PTR [rax+0x78]
 100172d:	movsxd esi,DWORD PTR [rax+0x74]
 1001730:	cs push 0x7878
	...
 100173e:	add    BYTE PTR [rax],al
 1001740:	cmp    al,0x0
 1001742:	add    BYTE PTR [r8+0x0],r15b
 1001746:	movsxd eax,DWORD PTR [rax]
 1001748:	add    BYTE PTR gs:[rax+0x0],dh
 100174c:	je     0x100174e
 100174e:	imul   eax,DWORD PTR [rax],0x6e006f
 1001754:	add    BYTE PTR ds:[rax+rax*1],bh
 1001758:	rex.W add BYTE PTR [rdx+0x0],dl
 100175c:	add    BYTE PTR ds:[rax],dh
 100175f:	add    BYTE PTR [rax+0x0],bh
 1001762:	and    eax,0x38003000
 1001767:	add    BYTE PTR [rax+0x0],bh
 100176a:	cmp    al,0x0
 100176c:	(bad)  
 100176d:	add    BYTE PTR [rax+0x0],cl
 1001770:	push   rdx
 1001771:	add    BYTE PTR [rsi],bh
 1001773:	add    BYTE PTR [rax+rax*1],bh
 1001776:	add    BYTE PTR gs:[rcx+0x0],ch
 100177a:	jo     0x100177c
 100177c:	add    BYTE PTR ds:[rip+0x3c007000],ah        # 0x3d008783
 1001783:	add    BYTE PTR [rdi],ch
 1001785:	add    BYTE PTR [rbp+0x0],ah
 1001788:	imul   eax,DWORD PTR [rax],0x3e0070
 100178e:	cmp    al,0x0
 1001790:	ins    DWORD PTR es:[rdi],dx
 1001791:	add    BYTE PTR [rdi+0x0],ch
 1001794:	add    BYTE PTR fs:[rbp+0x0],dh
 1001798:	ins    BYTE PTR es:[rdi],dx
 1001799:	add    BYTE PTR [rbp+0x0],ah
 100179c:	add    BYTE PTR ds:[rip+0x3c005300],ah        # 0x3d006aa3
 10017a3:	add    BYTE PTR [rdi],ch
 10017a5:	add    BYTE PTR [rbp+0x0],ch
 10017a8:	outs   dx,DWORD PTR ds:[rsi]
 10017a9:	add    BYTE PTR [rax+rax*1+0x75],ah
 10017ad:	add    BYTE PTR [rax+rax*1+0x65],ch
 10017b1:	add    BYTE PTR [rsi],bh
 10017b3:	add    BYTE PTR [rax+rax*1],bh
 10017b6:	ins    BYTE PTR es:[rdi],dx
 10017b7:	add    BYTE PTR [rcx+0x0],ch
 10017ba:	outs   dx,BYTE PTR ds:[rsi]
 10017bb:	add    BYTE PTR [rbp+0x0],ah
 10017be:	add    BYTE PTR ds:[rip+0x3c006400],ah        # 0x3d007bc5
 10017c5:	add    BYTE PTR [rdi],ch
 10017c7:	add    BYTE PTR [rax+rax*1+0x69],ch
 10017cb:	add    BYTE PTR [rsi+0x0],ch
 10017ce:	add    BYTE PTR gs:[rsi],bh
 10017d1:	add    BYTE PTR [rax+rax*1],bh
 10017d4:	(bad)  
 10017d5:	add    BYTE PTR [rbp+0x0],al
 10017d8:	js     0x10017da
 10017da:	movsxd eax,DWORD PTR [rax]
 10017dc:	add    BYTE PTR gs:[rax+0x0],dh
 10017e0:	je     0x10017e2
 10017e2:	imul   eax,DWORD PTR [rax],0x6e006f
 10017e8:	add    BYTE PTR ds:[rax],al
 10017eb:	add    BYTE PTR [rax],al
 10017ed:	add    BYTE PTR [rax],al
 10017ef:	add    BYTE PTR [rax+0x1004a],cl
 10017f5:	add    BYTE PTR [rax],al
 10017f7:	add    BYTE PTR [rax+0x1004a],cl
 10017fd:	add    BYTE PTR [rax],al
 10017ff:	add    BYTE PTR [rax+rdi*1],bl
 1001802:	add    BYTE PTR [rcx],al
 1001804:	add    BYTE PTR [rax],al
 1001806:	add    BYTE PTR [rax],al
 1001808:	xor    BYTE PTR [rdi+0x0],0x1
 100180c:	add    BYTE PTR [rax],al
 100180e:	add    BYTE PTR [rax],al
 1001810:	jo     0x1001888
 1001812:	add    BYTE PTR [rcx],al
 1001814:	add    BYTE PTR [rax],al
 1001816:	add    BYTE PTR [rax],al
 1001818:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001819:	(bad)  
 100181a:	add    BYTE PTR [rcx],al
 100181c:	add    BYTE PTR [rax],al
 100181e:	add    BYTE PTR [rax],al
 1001820:	loopne 0x1001859
 1001822:	add    BYTE PTR [rcx],al
	...
 1001830:	cmp    bl,BYTE PTR gs:[rbx+rsi*2+0x71]
 1001835:	ins    BYTE PTR es:[rdi],dx
 1001836:	xor    DWORD PTR [rcx],esi
 1001838:	pop    rdi
 1001839:	ins    DWORD PTR es:[rdi],dx
 100183a:	(bad)  
 100183b:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1001842:	ins    BYTE PTR es:[rdi],dx
 1001843:	pop    rsp
 1001844:	outs   dx,BYTE PTR ds:[rsi]
 1001845:	je     0x10018ab
 1001847:	(bad)  
 1001848:	ins    DWORD PTR es:[rdi],dx
 1001849:	jae    0x10018a7
 100184b:	ins    DWORD PTR es:[rdi],dx
 100184c:	jae    0x10018bf
 100184e:	ins    BYTE PTR es:[rdi],dx
 100184f:	pop    rsp
 1001850:	data16 jne 0x10018bf
 1001853:	ins    BYTE PTR es:[rdi],dx
 1001854:	je     0x10018bb
 1001856:	js     0x10018cc
 1001858:	pop    rsp
 1001859:	jae    0x10018cd
 100185b:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 100185f:	(bad)  
 1001860:	jb     0x10018c5
 1001862:	push   0x6d6f635c
 1001867:	ins    DWORD PTR es:[rdi],dx
 1001868:	outs   dx,DWORD PTR ds:[rsi]
 1001869:	outs   dx,BYTE PTR ds:[rsi]
 100186a:	pop    rsp
 100186b:	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
 1001872:	pop    rsp
 1001873:	ins    BYTE PTR es:[rdi],dx
 1001874:	ins    DWORD PTR es:[rdi],dx
 1001875:	jae    0x10018eb
 1001877:	jb     0x10018a7
 1001879:	push   0x7878
 100187e:	add    BYTE PTR [rax],al
 1001880:	js     0x10018ba
 1001882:	add    BYTE PTR [rcx],al
 1001884:	add    BYTE PTR [rax],al
 1001886:	add    BYTE PTR [rax],al
 1001888:	(bad)  
 1001889:	cmp    BYTE PTR [rax],al
 100188b:	add    DWORD PTR [rax],eax
 100188d:	add    BYTE PTR [rax],al
 100188f:	add    al,dl
 1001891:	cmp    BYTE PTR [rax],al
 1001893:	add    DWORD PTR [rax],eax
 1001895:	add    BYTE PTR [rax],al
 1001897:	add    BYTE PTR [rax+0x10077],al
 100189d:	add    BYTE PTR [rax],al
 100189f:	add    BYTE PTR [rax+0x76],dh
 10018a2:	add    BYTE PTR [rcx],al
 10018a4:	add    BYTE PTR [rax],al
 10018a6:	add    BYTE PTR [rax],al
 10018a8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10018a9:	(bad)  
 10018aa:	add    BYTE PTR [rcx],al
 10018ac:	add    BYTE PTR [rax],al
 10018ae:	add    BYTE PTR [rax],al
 10018b0:	loopne 0x10018e9
 10018b2:	add    BYTE PTR [rcx],al
 10018b4:	add    BYTE PTR [rax],al
 10018b6:	add    BYTE PTR [rax],al
 10018b8:	rex.RB js 0x100191e
 10018bb:	gs jo  0x1001932
 10018be:	imul   ebp,DWORD PTR [rdi+0x6e],0x72687420
 10018c5:	outs   dx,DWORD PTR ds:[rsi]
 10018c6:	ja     0x1001936
	...
 10018d0:	and    eax,0x73006800
 10018d5:	add    BYTE PTR [rax],ah
 10018d7:	add    BYTE PTR [rdx+0x0],ah
 10018da:	jns    0x10018dc
 10018dc:	and    BYTE PTR [rax],al
 10018de:	rex.WRB add BYTE PTR [r10+0x0],r10b
 10018e2:	add    BYTE PTR [r11+0x0],r10b
 10018e6:	push   rbp
 10018e7:	add    BYTE PTR [rax+rax*1+0x54],cl
 10018eb:	add    BYTE PTR [rax],ah
 10018ed:	add    BYTE PTR [rbp+0x0],ch
 10018f0:	(bad)  
 10018f1:	add    BYTE PTR [rbx+0x0],ah
 10018f4:	jb     0x10018f6
 10018f6:	outs   dx,DWORD PTR ds:[rsi]
 10018f7:	add    BYTE PTR [rsi],ch
 10018f9:	add    BYTE PTR [rax],ah
 10018fb:	add    BYTE PTR [rbp+0x0],al
 10018fe:	jb     0x1001900
 1001900:	jb     0x1001902
 1001902:	outs   dx,DWORD PTR ds:[rsi]
 1001903:	add    BYTE PTR [rdx+0x0],dh
 1001906:	and    BYTE PTR [rax],al
 1001908:	xor    BYTE PTR [rax],al
 100190a:	js     0x100190c
 100190c:	and    eax,0x38003000
 1001911:	add    BYTE PTR [rax+rax*1+0x78],ch
 1001915:	add    BYTE PTR [rsi],ch
 1001917:	add    BYTE PTR [rax],ah
 1001919:	add    BYTE PTR [rax+rax*1+0x69],ch
 100191d:	add    BYTE PTR [rsi+0x0],ch
 1001920:	add    BYTE PTR gs:[rax],ah
 1001923:	add    BYTE PTR [rip+0x20006400],ah        # 0x21007d29
 1001929:	add    BYTE PTR [rcx+0x0],ch
 100192c:	outs   dx,BYTE PTR ds:[rsi]
 100192d:	add    BYTE PTR [rax],ah
 100192f:	add    BYTE PTR [rip+0x73006800],ah        # 0x74008135
	...
 100193d:	add    BYTE PTR [rax],al
 100193f:	add    BYTE PTR [rbp+0x3a],ah
 1001942:	pop    rsp
 1001943:	jae    0x10019b6
 1001945:	ins    BYTE PTR es:[rdi],dx
 1001946:	xor    DWORD PTR [rcx],esi
 1001948:	pop    rdi
 1001949:	ins    DWORD PTR es:[rdi],dx
 100194a:	(bad)  
 100194b:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1001952:	ins    BYTE PTR es:[rdi],dx
 1001953:	pop    rsp
 1001954:	outs   dx,BYTE PTR ds:[rsi]
 1001955:	je     0x10019bb
 1001957:	(bad)  
 1001958:	ins    DWORD PTR es:[rdi],dx
 1001959:	jae    0x10019b7
 100195b:	ins    DWORD PTR es:[rdi],dx
 100195c:	jae    0x10019cf
 100195e:	ins    BYTE PTR es:[rdi],dx
 100195f:	pop    rsp
 1001960:	data16 jne 0x10019cf
 1001963:	ins    BYTE PTR es:[rdi],dx
 1001964:	je     0x10019cb
 1001966:	js     0x10019dc
 1001968:	pop    rsp
 1001969:	jae    0x10019dd
 100196b:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 100196f:	(bad)  
 1001970:	jb     0x10019d5
 1001972:	push   0x6165735c
 1001977:	jb     0x10019dc
 1001979:	push   0x6564665c
 100197e:	js     0x10019e5
 1001980:	pop    rsp
 1001981:	fs movsxd di,DWORD PTR cs:[rax+0x78]
 1001987:	add    BYTE PTR [rbx+0x74],dl
 100198a:	(bad)  
 100198b:	jb     0x1001a01
 100198d:	imul   ebp,DWORD PTR [rsi+0x67],0x66736d20
 1001994:	je     0x10019fb
 1001996:	data16 fs cs gs js 0x1001a01
 100199c:	add    BYTE PTR [rax],al
 100199e:	add    BYTE PTR [rax],al
 10019a0:	ins    DWORD PTR es:[rdi],dx
 10019a1:	add    BYTE PTR [rbx+0x0],dh
 10019a4:	data16 add BYTE PTR [rax+rax*1+0x65],dh
 10019a9:	add    BYTE PTR [rsi+0x0],ah
 10019ac:	add    BYTE PTR fs:[rax],ah
 10019af:	add    BYTE PTR [rdx+0x0],dh
 10019b2:	add    BYTE PTR gs:[rax+rax*1+0x61],dh
 10019b7:	add    BYTE PTR [rcx+0x0],ch
 10019ba:	ins    BYTE PTR es:[rdi],dx
 10019bb:	add    BYTE PTR [rax],ah
 10019bd:	add    BYTE PTR [rax+rax*1+0x72],dh
 10019c1:	add    BYTE PTR [rcx+0x0],ah
 10019c4:	movsxd eax,DWORD PTR [rax]
 10019c6:	add    BYTE PTR gs:[rax],ah
 10019c9:	add    BYTE PTR [rcx+0x0],ch
 10019cc:	jae    0x10019ce
 10019ce:	and    BYTE PTR [rax],al
 10019d0:	jae    0x10019d2
 10019d2:	je     0x10019d4
 10019d4:	(bad)  
 10019d5:	add    BYTE PTR [rdx+0x0],dh
 10019d8:	je     0x10019da
 10019da:	imul   eax,DWORD PTR [rax],0x67006e
	...
 10019e8:	(bad)  
 10019e9:	jb     0x1001a52
 10019eb:	movsxd esp,DWORD PTR [rax]
 10019ed:	and    eax,0x61202c64
 10019f2:	jb     0x1001a5b
 10019f4:	jbe    0x1001a16
 10019f6:	and    eax,0x736c
 10019fb:	add    BYTE PTR [rax],al
 10019fd:	add    BYTE PTR [rax],al
 10019ff:	add    BYTE PTR [rax+rax*1+0x65],al
 1001a03:	add    BYTE PTR [rdx+0x0],ah
 1001a06:	jne    0x1001a08
 1001a08:	add    BYTE PTR [eax],al
 1001a0b:	add    BYTE PTR [rax],al
 1001a0d:	add    BYTE PTR [rax],al
 1001a0f:	add    BYTE PTR [rbp+0x78],al
 1001a12:	movsxd esp,DWORD PTR [rbp+0x70]
 1001a15:	je     0x1001a80
 1001a17:	outs   dx,DWORD PTR ds:[rsi]
 1001a18:	outs   dx,BYTE PTR ds:[rsi]
 1001a19:	and    BYTE PTR [rbx+0x61],ah
 1001a1c:	jne    0x1001a85
 1001a1e:	push   0x74
 1001a23:	add    BYTE PTR [rax],al
 1001a25:	add    BYTE PTR [rax],al
 1001a27:	add    BYTE PTR [rsi+0x61],cl
 1001a2a:	imul   esp,DWORD PTR [rbp+0x64],0x20
 1001a2e:	rex.WRB
 1001a2f:	rex.XB
 1001a30:	push   r12
 1001a32:	rex.XB
 1001a33:	rex.W add BYTE PTR [rax],al
 1001a36:	add    BYTE PTR [rax],al
 1001a38:	ins    DWORD PTR es:[rdi],dx
 1001a39:	jae    0x1001a81
 1001a3b:	je     0x1001aa2
 1001a3d:	rex.RX
 1001a3e:	and    BYTE PTR [rax+0x61],r13b
 1001a42:	jae    0x1001a64
 1001a44:	jae    0x1001aba
 1001a46:	(bad)  
 1001a47:	jb     0x1001abd
 1001a49:	gs add BYTE PTR fs:[rax],al
 1001a4d:	add    BYTE PTR [rax],al
 1001a4f:	add    BYTE PTR [rsi+0x44],al
 1001a52:	and    BYTE PTR [rcx+0x73],ch
 1001a55:	and    BYTE PTR [rbx+0x68],dh
 1001a58:	jne    0x1001ace
 1001a5a:	outs   dx,DWORD PTR fs:[rsi]
 1001a5c:	ja     0x1001acc
 1001a5e:	and    BYTE PTR [rsi+0x61],ch
 1001a61:	ins    DWORD PTR es:[rdi],dx
 1001a62:	cmp    ah,BYTE PTR gs:[rip+0x736c]        # 0x1008dd5
	...
 1001a75:	add    BYTE PTR [rax],al
 1001a77:	add    al,ah
 1001a79:	(bad)  
 1001a7a:	add    DWORD PTR [rcx],eax
 1001a7c:	add    BYTE PTR [rax],al
 1001a7e:	add    BYTE PTR [rax],al
 1001a80:	cmp    BYTE PTR [rax],0x1
 1001a83:	add    DWORD PTR [rax],eax
 1001a85:	add    BYTE PTR [rax],al
 1001a87:	add    BYTE PTR [rax],al
 1001a89:	add    BYTE PTR ss:[rcx],al
 1001a8c:	add    BYTE PTR [rax],al
 1001a8e:	add    BYTE PTR [rax],al
 1001a90:	in     al,0x4c
 1001a92:	add    BYTE PTR [rcx],al
 1001a94:	add    BYTE PTR [rax],al
 1001a96:	add    BYTE PTR [rax],al
 1001a98:	cmp    eax,DWORD PTR [rax]
 1001a9a:	add    BYTE PTR [rax],al
 1001a9c:	add    BYTE PTR [rax],al
 1001a9e:	add    BYTE PTR [rax],al
 1001aa0:	push   rax
 1001aa1:	add    BYTE PTR [rcx+0x0],ah
 1001aa4:	je     0x1001aa6
 1001aa6:	push   0x0
 1001aab:	add    BYTE PTR [rax],al
 1001aad:	add    BYTE PTR [rax],al
 1001aaf:	add    BYTE PTR [rdi+0x65],al
 1001ab2:	je     0x1001af8
 1001ab4:	ins    BYTE PTR es:[rdi],dx
 1001ab5:	ins    BYTE PTR es:[rdi],dx
 1001ab6:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1001abe:	jns    0x1001b17
	...
 1001ac8:	push   rbx
 1001ac9:	gs je  0x1001b10
 1001acc:	ins    BYTE PTR es:[rdi],dx
 1001acd:	ins    BYTE PTR es:[rdi],dx
 1001ace:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1001ad6:	jns    0x1001b2f
	...
 1001ae0:	imul   eax,DWORD PTR [rax],0x65
 1001ae3:	add    BYTE PTR [rdx+0x0],dh
 1001ae6:	outs   dx,BYTE PTR ds:[rsi]
 1001ae7:	add    BYTE PTR [rbp+0x0],ah
 1001aea:	ins    BYTE PTR es:[rdi],dx
 1001aeb:	add    BYTE PTR [rbx],dh
 1001aed:	add    BYTE PTR [rdx],dh
 1001aef:	add    BYTE PTR [rsi],ch
 1001af1:	add    BYTE PTR [rax+rax*1+0x6c],ah
 1001af5:	add    BYTE PTR [rax+rax*1+0x0],ch
 1001af9:	add    BYTE PTR [rax],al
 1001afb:	add    BYTE PTR [rax],al
 1001afd:	add    BYTE PTR [rax],al
 1001aff:	add    BYTE PTR [rbx+0x0],dl
 1001b02:	push   0x72006100
 1001b07:	add    BYTE PTR [rbp+0x0],ah
 1001b0a:	add    BYTE PTR fs:[rbx+0x0],al
 1001b0e:	outs   dx,DWORD PTR ds:[rsi]
 1001b0f:	add    BYTE PTR [rax+rax*1+0x65],ah
	...
 1001b1f:	add    BYTE PTR [rbx+0x0],dl
 1001b22:	outs   dx,DWORD PTR ds:[rsi]
 1001b23:	add    BYTE PTR [rsi+0x0],ah
 1001b26:	je     0x1001b28
 1001b28:	ja     0x1001b2a
 1001b2a:	(bad)  
 1001b2b:	add    BYTE PTR [rdx+0x0],dh
 1001b2e:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 1001b33:	add    BYTE PTR [rcx+0x0],ch
 1001b36:	movsxd eax,DWORD PTR [rax]
 1001b38:	jb     0x1001b3a
 1001b3a:	outs   dx,DWORD PTR ds:[rsi]
 1001b3b:	add    BYTE PTR [rbx+0x0],dh
 1001b3e:	outs   dx,DWORD PTR ds:[rsi]
 1001b3f:	add    BYTE PTR [rsi+0x0],ah
 1001b42:	je     0x1001b44
 1001b44:	pop    rsp
 1001b45:	add    BYTE PTR [rbp+0x0],cl
 1001b48:	imul   eax,DWORD PTR [rax],0x720063
 1001b4e:	outs   dx,DWORD PTR ds:[rsi]
 1001b4f:	add    BYTE PTR [rbx+0x0],dh
 1001b52:	outs   dx,DWORD PTR ds:[rsi]
 1001b53:	add    BYTE PTR [rsi+0x0],ah
 1001b56:	je     0x1001b58
 1001b58:	and    BYTE PTR [rax],al
 1001b5a:	push   rbx
 1001b5b:	add    BYTE PTR [rcx+0x0],dl
 1001b5e:	rex.WR add BYTE PTR [rax],r12b
 1001b61:	add    BYTE PTR [rbx+0x0],dl
 1001b64:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b68:	jbe    0x1001b6a
 1001b6a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b6e:	pop    rsp
 1001b6f:	add    BYTE PTR [rcx],dh
 1001b71:	add    BYTE PTR [rcx],dh
 1001b73:	add    BYTE PTR [rax],dh
 1001b75:	add    BYTE PTR [rax],al
 1001b77:	add    BYTE PTR [rip+0x64007e00],ah        # 0x6500997d
 1001b7d:	add    BYTE PTR [rax+0x0],dh
 1001b80:	and    eax,0xff000000
 1001b85:	inc    DWORD PTR [rax]
 1001b87:	add    BYTE PTR [rsi],ch
 1001b89:	add    BYTE PTR [rbp+0x0],ah
 1001b8c:	js     0x1001b8e
 1001b8e:	je     0x1001b90
	...
 1001b98:	ins    DWORD PTR es:[rdi],dx
 1001b99:	add    BYTE PTR [rbx+0x0],dh
 1001b9c:	ins    DWORD PTR es:[rdi],dx
 1001b9d:	add    BYTE PTR [rax+rax*1+0x73],ah
 1001ba1:	add    BYTE PTR [rdx+0x0],dh
 1001ba4:	jbe    0x1001ba6
 1001ba6:	add    BYTE PTR cs:[rbp+0x0],ah
 1001baa:	js     0x1001bac
 1001bac:	add    BYTE PTR gs:[rax],al
 1001baf:	add    BYTE PTR [rax+0x0],cl
 1001bb2:	rex.WXB add BYTE PTR [r13+0x0],al
 1001bb6:	pop    rcx
 1001bb7:	add    BYTE PTR [rdi+0x0],bl
 1001bba:	rex.WR add BYTE PTR [rdi+0x0],r9b
 1001bbe:	rex.XB add BYTE PTR [r9+0x0],al
 1001bc2:	rex.WR add BYTE PTR [rdi+0x0],r11b
 1001bc6:	rex.WRB add BYTE PTR [r9+0x0],r8b
 1001bca:	rex.XB add BYTE PTR [r8+0x0],cl
 1001bce:	rex.WB add BYTE PTR [r14+0x0],cl
 1001bd2:	add    BYTE PTR [r8+rax*1+0x53],r11b
 1001bd7:	add    BYTE PTR [rdi+0x0],cl
 1001bda:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1001bdf:	add    BYTE PTR [rcx+0x0],al
 1001be2:	push   rdx
 1001be3:	add    BYTE PTR [rbp+0x0],al
 1001be6:	pop    rsp
 1001be7:	add    BYTE PTR [rbp+0x0],cl
 1001bea:	imul   eax,DWORD PTR [rax],0x720063
 1001bf0:	outs   dx,DWORD PTR ds:[rsi]
 1001bf1:	add    BYTE PTR [rbx+0x0],dh
 1001bf4:	outs   dx,DWORD PTR ds:[rsi]
 1001bf5:	add    BYTE PTR [rsi+0x0],ah
 1001bf8:	je     0x1001bfa
 1001bfa:	pop    rsp
 1001bfb:	add    BYTE PTR [rbp+0x0],cl
 1001bfe:	imul   eax,DWORD PTR [rax],0x720063
 1001c04:	outs   dx,DWORD PTR ds:[rsi]
 1001c05:	add    BYTE PTR [rbx+0x0],dh
 1001c08:	outs   dx,DWORD PTR ds:[rsi]
 1001c09:	add    BYTE PTR [rsi+0x0],ah
 1001c0c:	je     0x1001c0e
 1001c0e:	and    BYTE PTR [rax],al
 1001c10:	push   rbx
 1001c11:	add    BYTE PTR [rcx+0x0],dl
 1001c14:	rex.WR add BYTE PTR [rax],r12b
 1001c17:	add    BYTE PTR [rbx+0x0],dl
 1001c1a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001c1e:	jbe    0x1001c20
 1001c20:	add    BYTE PTR gs:[rdx+0x0],dh
 1001c24:	pop    rsp
 1001c25:	add    BYTE PTR [rcx+0x0],cl
 1001c28:	outs   dx,BYTE PTR ds:[rsi]
 1001c29:	add    BYTE PTR [rbx+0x0],dh
 1001c2c:	je     0x1001c2e
 1001c2e:	(bad)  
 1001c2f:	add    BYTE PTR [rsi+0x0],ch
 1001c32:	movsxd eax,DWORD PTR [rax]
 1001c34:	add    BYTE PTR gs:[rax],ah
 1001c37:	add    BYTE PTR [rsi+0x0],cl
 1001c3a:	(bad)  
 1001c3b:	add    BYTE PTR [rbp+0x0],ch
 1001c3e:	add    BYTE PTR gs:[rbx+0x0],dh
 1001c42:	pop    rsp
 1001c43:	add    BYTE PTR [rbx+0x0],dl
 1001c46:	push   rcx
 1001c47:	add    BYTE PTR [rax+rax*1+0x0],cl
 1001c4b:	add    BYTE PTR [rax],al
 1001c4d:	add    BYTE PTR [rax],al
 1001c4f:	add    BYTE PTR [rip+0x51005300],ah        # 0x52006f55
 1001c55:	add    BYTE PTR [rax+rax*1+0x53],cl
 1001c59:	add    BYTE PTR [rbp+0x0],al
 1001c5c:	push   rdx
 1001c5d:	add    BYTE PTR [rsi+0x0],dl
 1001c60:	push   rdx
 1001c61:	add    BYTE PTR [rdi+0x0],bl
 1001c64:	rex.WB add BYTE PTR [r14+0x0],cl
 1001c68:	push   rbx
 1001c69:	add    BYTE PTR [rax+rax*1+0x4e],dl
 1001c6d:	add    BYTE PTR [rcx+0x0],al
 1001c70:	rex.WRB add BYTE PTR [r13+0x0],r8b
 1001c74:	and    eax,0x69000000
 1001c79:	add    BYTE PTR [rsi+0x0],ch
 1001c7c:	imul   eax,DWORD PTR [rax],0x730000
 1001c82:	jno    0x1001c84
 1001c84:	ins    BYTE PTR es:[rdi],dx
 1001c85:	add    BYTE PTR [rbx+0x0],dh
 1001c88:	add    BYTE PTR gs:[rdx+0x0],dh
 1001c8c:	jbe    0x1001c8e
 1001c8e:	jb     0x1001c90
 1001c90:	add    BYTE PTR cs:[rcx+0x0],ch
 1001c94:	outs   dx,BYTE PTR ds:[rsi]
 1001c95:	add    BYTE PTR [rcx+0x0],ch
	...
 1001ca0:	rex.W add BYTE PTR [rbx+0x0],cl
 1001ca4:	add    BYTE PTR [r9+0x0],r11b
 1001ca8:	pop    rdi
 1001ca9:	add    BYTE PTR [rbx+0x0],al
 1001cac:	rex.WR add BYTE PTR [rcx+0x0],r8b
 1001cb0:	push   rbx
 1001cb1:	add    BYTE PTR [rbx+0x0],dl
 1001cb4:	add    BYTE PTR [r11+0x0],r10b
 1001cb8:	pop    rdi
 1001cb9:	add    BYTE PTR [rdx+0x0],dl
 1001cbc:	rex.WRXB add BYTE PTR [r15+0x0],r9b
 1001cc0:	push   rsp
 1001cc1:	add    BYTE PTR [rax],al
 1001cc3:	add    BYTE PTR [rax],al
 1001cc5:	add    BYTE PTR [rax],al
 1001cc7:	add    BYTE PTR [rax+0x0],cl
 1001cca:	rex.WXB add BYTE PTR [r13+0x0],al
 1001cce:	pop    rcx
 1001ccf:	add    BYTE PTR [rdi+0x0],bl
 1001cd2:	rex.XB add BYTE PTR [r13+0x0],dl
 1001cd6:	push   rdx
 1001cd7:	add    BYTE PTR [rdx+0x0],dl
 1001cda:	add    BYTE PTR [r14+0x0],r9b
 1001cde:	push   rsp
 1001cdf:	add    BYTE PTR [rdi+0x0],bl
 1001ce2:	push   rbp
 1001ce3:	add    BYTE PTR [rbx+0x0],dl
 1001ce6:	add    BYTE PTR [r10+0x0],r10b
 1001cea:	add    BYTE PTR [rax],al
 1001cec:	add    BYTE PTR [rax],al
 1001cee:	add    BYTE PTR [rax],al
 1001cf0:	rex.W add BYTE PTR [rbx+0x0],cl
 1001cf4:	add    BYTE PTR [r9+0x0],r11b
 1001cf8:	pop    rdi
 1001cf9:	add    BYTE PTR [rax+rax*1+0x4f],cl
 1001cfd:	add    BYTE PTR [rbx+0x0],al
 1001d00:	add    BYTE PTR [r8+rax*1+0x5f],cl
 1001d05:	add    BYTE PTR [rbp+0x0],cl
 1001d08:	add    BYTE PTR [r11+0x0],al
 1001d0c:	rex.W add BYTE PTR [rcx+0x0],cl
 1001d10:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 1001d14:	add    BYTE PTR [rax],al
 1001d16:	add    BYTE PTR [rax],al
 1001d18:	rex.W add BYTE PTR [rbx+0x0],cl
 1001d1c:	add    BYTE PTR [r9+0x0],r11b
 1001d20:	pop    rdi
 1001d21:	add    BYTE PTR [rbp+0x0],dl
 1001d24:	push   rbx
 1001d25:	add    BYTE PTR [rbp+0x0],al
 1001d28:	push   rdx
 1001d29:	add    BYTE PTR [rbx+0x0],dl
 1001d2c:	add    BYTE PTR [rax],al
 1001d2e:	add    BYTE PTR [rax],al
 1001d30:	rex.W add BYTE PTR [rbx+0x0],cl
 1001d34:	add    BYTE PTR [r9+0x0],r11b
 1001d38:	pop    rdi
 1001d39:	add    BYTE PTR [rax+0x0],dl
 1001d3c:	add    BYTE PTR [r10+0x0],r10b
 1001d40:	rex.RX add BYTE PTR [rdi+0x0],r9b
 1001d44:	push   rdx
 1001d45:	add    BYTE PTR [rbp+0x0],cl
 1001d48:	add    BYTE PTR [r14+0x0],cl
 1001d4c:	rex.XB add BYTE PTR [r13+0x0],al
 1001d50:	pop    rdi
 1001d51:	add    BYTE PTR [rax+rax*1+0x41],al
 1001d55:	add    BYTE PTR [rax+rax*1+0x41],dl
 1001d59:	add    BYTE PTR [rax],al
 1001d5b:	add    BYTE PTR [rax],al
 1001d5d:	add    BYTE PTR [rax],al
 1001d5f:	add    BYTE PTR [rax+0x0],cl
 1001d62:	rex.WXB add BYTE PTR [r13+0x0],al
 1001d66:	pop    rcx
 1001d67:	add    BYTE PTR [rdi+0x0],bl
 1001d6a:	rex.XB add BYTE PTR [r13+0x0],dl
 1001d6e:	push   rdx
 1001d6f:	add    BYTE PTR [rdx+0x0],dl
 1001d72:	add    BYTE PTR [r14+0x0],r9b
 1001d76:	push   rsp
 1001d77:	add    BYTE PTR [rdi+0x0],bl
 1001d7a:	rex.XB add BYTE PTR [r15+0x0],cl
 1001d7e:	rex.WRX add BYTE PTR [rsi+0x0],r8b
 1001d82:	rex.WB add BYTE PTR [r15+0x0],al
 1001d86:	add    BYTE PTR [rax],al
 1001d88:	rex.W add BYTE PTR [rbx+0x0],cl
 1001d8c:	add    BYTE PTR [r9+0x0],r11b
 1001d90:	pop    rdi
 1001d91:	add    BYTE PTR [rax+rax*1+0x59],al
 1001d95:	add    BYTE PTR [rsi+0x0],cl
 1001d98:	pop    rdi
 1001d99:	add    BYTE PTR [rax+rax*1+0x41],al
 1001d9d:	add    BYTE PTR [rax+rax*1+0x41],dl
 1001da1:	add    BYTE PTR [rax],al
 1001da3:	add    BYTE PTR [rax+0x0],al
 1001da6:	add    BYTE PTR [rax],al
 1001da8:	add    BYTE PTR fs:[rdi+0x0],dh
 1001dac:	outs   dx,DWORD PTR ds:[rsi]
 1001dad:	add    BYTE PTR [rdx+0x0],dh
 1001db0:	add    BYTE PTR fs:[rdx],bh
 1001db3:	add    BYTE PTR [rip+0x38003000],ah        # 0x39004db9
 1001db9:	add    BYTE PTR [rax+0x0],bh
 1001dbc:	add    BYTE PTR [rax],al
 1001dbe:	add    BYTE PTR [rax],al
 1001dc0:	push   0x78006500
 1001dc5:	add    BYTE PTR [rdx],bh
	...
 1001dcf:	add    BYTE PTR [rax+0x0],ch
 1001dd2:	add    BYTE PTR gs:[rax+0x0],bh
 1001dd6:	sub    BYTE PTR [rax],al
	...
 1001de0:	and    eax,0x29006400
 1001de5:	add    BYTE PTR [rdx],bh
	...
 1001def:	add    BYTE PTR [rip+0x38003000],ah        # 0x39004df5
 1001df5:	add    BYTE PTR [rax+0x0],bh
	...
 1001e00:	imul   ebp,DWORD PTR [rsi+0x73],0x69706174
 1001e07:	xor    DWORD PTR [rcx],esi
 1001e09:	xor    BYTE PTR [rsi],ch
 1001e0b:	fs ins BYTE PTR es:[rdi],dx
 1001e0d:	ins    BYTE PTR es:[rdi],dx
 1001e0e:	add    BYTE PTR [rax],al
 1001e10:	rex.RB js 0x1001e76
 1001e13:	gs jo  0x1001e8a
 1001e16:	imul   ebp,DWORD PTR [rdi+0x6e],0x73
 1001e1d:	add    BYTE PTR [rax],al
 1001e1f:	add    BYTE PTR [rsi+0x54],al
 1001e22:	rex.RB
 1001e23:	rex.B
 1001e24:	fs ins DWORD PTR es:[rdi],dx
 1001e26:	imul   ebp,DWORD PTR [rsi+0x0],0x0
 1001e2d:	add    BYTE PTR [rax],al
 1001e2f:	add    BYTE PTR [rsi+0x54],al
 1001e32:	rex.RB
 1001e33:	imul   r13d,DWORD PTR [rbp+r12*2+0x73],0x0
 1001e3c:	add    BYTE PTR [rax],al
 1001e3e:	add    BYTE PTR [rax],al
 1001e40:	rex.RX
 1001e41:	rex.R push rax
 1001e43:	jb     0x1001eb4
 1001e45:	je     0x1001eb6
 1001e47:	movsxd ebp,DWORD PTR [rdi+0x6c]
 1001e4a:	rex.W (bad) 
 1001e4c:	outs   dx,BYTE PTR ds:[rsi]
 1001e4d:	fs ins BYTE PTR es:[rdi],dx
 1001e4f:	gs jb  0x1001e9b
 1001e52:	outs   dx,BYTE PTR ds:[rsi]
 1001e53:	je     0x1001eba
 1001e55:	jb     0x1001ec5
 1001e57:	(bad)  
 1001e58:	ins    BYTE PTR es:[rdi],dx
 1001e59:	add    BYTE PTR [rax],al
 1001e5b:	add    BYTE PTR [rax],al
 1001e5d:	add    BYTE PTR [rax],al
 1001e5f:	add    BYTE PTR [rsi+0x44],al
 1001e62:	push   rax
 1001e63:	jb     0x1001ed4
 1001e65:	je     0x1001ed6
 1001e67:	movsxd ebp,DWORD PTR [rdi+0x6c]
 1001e6a:	rex.W (bad) 
 1001e6c:	outs   dx,BYTE PTR ds:[rsi]
 1001e6d:	fs ins BYTE PTR es:[rdi],dx
 1001e6f:	gs jb  0x1001ec1
 1001e72:	jne    0x1001ee8
 1001e74:	jo     0x1001eeb
 1001e76:	je     0x1001e78
 1001e78:	rex.RX
 1001e79:	rex.R
 1001e7a:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x72
 1001e83:	add    BYTE PTR [rax],al
 1001e85:	add    BYTE PTR [rax],al
 1001e87:	add    BYTE PTR [rsi+0x44],al
 1001e8a:	push   rdi
 1001e8b:	outs   dx,DWORD PTR ds:[rsi]
 1001e8c:	jb     0x1001ef2
 1001e8e:	push   rbx
 1001e8f:	imul   ebp,DWORD PTR [rsi+0x6b],0x0
 1001e96:	add    BYTE PTR [rax],al
 1001e98:	rex.RX
 1001e99:	rex.R
 1001e9a:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1001e9c:	ins    DWORD PTR es:[rdi],dx
 1001e9d:	jo     0x1001f0e
 1001e9f:	outs   dx,BYTE PTR ds:[rsi]
 1001ea0:	outs   dx,BYTE PTR gs:[rsi]
 1001ea2:	je     0x1001ef7
 1001ea4:	gs ins BYTE PTR es:[rdi],dx
 1001ea6:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1001eab:	outs   dx,BYTE PTR ds:[rsi]
 1001eac:	add    BYTE PTR [rax],al
 1001eae:	add    BYTE PTR [rax],al
 1001eb0:	and    al,BYTE PTR [rip+0x21993]        # 0x1023849
 1001eb6:	add    BYTE PTR [rax],al
 1001eb8:	rex.R inc DWORD PTR [rax]
 1001ebb:	add    BYTE PTR [rcx],al
 1001ebd:	add    BYTE PTR [rax],al
 1001ebf:	add    BYTE PTR [rdi+rdi*8+0x0],dl
 1001ec3:	add    BYTE PTR [rsi],al
 1001ec5:	add    BYTE PTR [rax],al
 1001ec7:	add    BYTE PTR [rdi+rdi*8+0x0],bh
 1001ecb:	add    al,dl
	...
 1001ed5:	add    BYTE PTR [rax],al
 1001ed7:	add    BYTE PTR [rdx],ah
 1001ed9:	add    eax,0x11993
 1001ede:	add    BYTE PTR [rax],al
 1001ee0:	loopne 0x1001ee1
	...
 1001eea:	add    BYTE PTR [rax],al
 1001eec:	add    eax,DWORD PTR [rax]
 1001eee:	add    BYTE PTR [rax],al
 1001ef0:	call   0x61001ff4
	...
 1001efd:	add    BYTE PTR [rax],al
 1001eff:	add    BYTE PTR [rdx],ah
 1001f01:	add    eax,0x11993
 1001f06:	add    BYTE PTR [rax],al
 1001f08:	pop    rsp
 1001f09:	add    BYTE PTR [rcx],al
	...
 1001f13:	add    BYTE PTR [rcx],al
 1001f15:	add    BYTE PTR [rax],al
 1001f17:	add    BYTE PTR [rax+rax*1+0x1],ah
 1001f1b:	add    BYTE PTR [rax],ah
	...
 1001f25:	add    BYTE PTR [rax],al
 1001f27:	add    BYTE PTR [rdx],ah
 1001f29:	add    eax,0x11993
 1001f2e:	add    BYTE PTR [rax],al
 1001f30:	jl     0x1001f32
 1001f32:	add    DWORD PTR [rax],eax
	...
 1001f3c:	add    DWORD PTR [rax],eax
 1001f3e:	add    BYTE PTR [rax],al
 1001f40:	test   BYTE PTR [rax],al
 1001f42:	add    DWORD PTR [rax],eax
 1001f44:	and    BYTE PTR [rax],al
	...
 1001f4e:	add    BYTE PTR [rax],al
 1001f50:	cmp    bl,BYTE PTR gs:[rbx+rsi*2+0x71]
 1001f55:	ins    BYTE PTR es:[rdi],dx
 1001f56:	xor    DWORD PTR [rcx],esi
 1001f58:	pop    rdi
 1001f59:	ins    DWORD PTR es:[rdi],dx
 1001f5a:	(bad)  
 1001f5b:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1001f62:	ins    BYTE PTR es:[rdi],dx
 1001f63:	pop    rsp
 1001f64:	outs   dx,BYTE PTR ds:[rsi]
 1001f65:	je     0x1001fcb
 1001f67:	(bad)  
 1001f68:	ins    DWORD PTR es:[rdi],dx
 1001f69:	jae    0x1001fc7
 1001f6b:	ins    DWORD PTR es:[rdi],dx
 1001f6c:	jae    0x1001fdf
 1001f6e:	ins    BYTE PTR es:[rdi],dx
 1001f6f:	pop    rsp
 1001f70:	data16 jne 0x1001fdf
 1001f73:	ins    BYTE PTR es:[rdi],dx
 1001f74:	je     0x1001fdb
 1001f76:	js     0x1001fec
 1001f78:	pop    rsp
 1001f79:	jae    0x1001fed
 1001f7b:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 1001f7f:	(bad)  
 1001f80:	jb     0x1001fe5
 1001f82:	push   0x6d6f635c
 1001f87:	ins    DWORD PTR es:[rdi],dx
 1001f88:	outs   dx,DWORD PTR ds:[rsi]
 1001f89:	outs   dx,BYTE PTR ds:[rsi]
 1001f8a:	pop    rsp
 1001f8b:	jne    0x1002001
 1001f8d:	imul   ebp,DWORD PTR [rsp+rbx*2+0x6d],0x68746d65
 1001f95:	jb     0x1002006
 1001f97:	ja     0x1001fc7
 1001f99:	movsxd edi,DWORD PTR [rax+0x78]
 1001f9c:	add    BYTE PTR [rax],al
 1001f9e:	add    BYTE PTR [rax],al
 1001fa0:	lock (bad) 
 1001fa2:	add    BYTE PTR [rcx],al
 1001fa4:	add    BYTE PTR [rax],al
 1001fa6:	add    BYTE PTR [rax],al
 1001fa8:	add    BYTE PTR [rax],ah
 1001faa:	add    BYTE PTR [rcx],al
 1001fac:	add    BYTE PTR [rax],al
 1001fae:	add    BYTE PTR [rax],al
 1001fb0:	adc    BYTE PTR [rax],ah
 1001fb2:	add    BYTE PTR [rcx],al
 1001fb4:	add    BYTE PTR [rax],al
 1001fb6:	add    BYTE PTR [rax],al
 1001fb8:	and    BYTE PTR [rax],ah
 1001fba:	add    BYTE PTR [rcx],al
 1001fbc:	add    BYTE PTR [rax],al
 1001fbe:	add    BYTE PTR [rax],al
 1001fc0:	xor    BYTE PTR [rax],ah
 1001fc2:	add    BYTE PTR [rcx],al
 1001fc4:	add    BYTE PTR [rax],al
 1001fc6:	add    BYTE PTR [rax],al
 1001fc8:	add    BYTE PTR es:[rax+rax*1],bh
 1001fcc:	add    BYTE PTR ds:[rdx],ah
 1001fcf:	add    BYTE PTR [rdi],ah
 1001fd1:	add    BYTE PTR [rax],al
 1001fd3:	add    BYTE PTR [rax],al
 1001fd5:	add    BYTE PTR [rax],al
 1001fd7:	add    BYTE PTR [rip+0x4000000],al        # 0x5001fdd
 1001fdd:	add    BYTE PTR [rax],al
 1001fdf:	add    BYTE PTR [rax+rax*1],al
 1001fe2:	add    BYTE PTR [rax],al
 1001fe4:	(bad)  
 1001fe5:	add    BYTE PTR [rax],al
 1001fe7:	add    BYTE PTR [rsi],al
 1001fe9:	add    BYTE PTR [rax],al
 1001feb:	add    BYTE PTR [rax],al
 1001fed:	add    BYTE PTR [rax],al
 1001fef:	add    BYTE PTR [rsi],ah
 1001ff1:	add    BYTE PTR [rcx+0x0],ah
 1001ff4:	ins    DWORD PTR es:[rdi],dx
 1001ff5:	add    BYTE PTR [rax+0x0],dh
 1001ff8:	cmp    eax,DWORD PTR [rax]
 1001ffa:	add    BYTE PTR [rax],al
 1001ffc:	add    BYTE PTR [rax],al
 1001ffe:	add    BYTE PTR [rax],al
 1002000:	add    BYTE PTR es:[rax+rax*1+0x74],ch
 1002005:	add    BYTE PTR [rbx],bh
	...
 100200f:	add    BYTE PTR [rsi],ah
 1002011:	add    BYTE PTR [rdi+0x0],ah
 1002014:	je     0x1002016
 1002016:	cmp    eax,DWORD PTR [rax]
	...
 1002020:	add    BYTE PTR es:[rcx+0x0],dh
 1002024:	jne    0x1002026
 1002026:	outs   dx,DWORD PTR ds:[rsi]
 1002027:	add    BYTE PTR [rax+rax*1+0x3b],dh
 100202b:	add    BYTE PTR [rax],al
 100202d:	add    BYTE PTR [rax],al
 100202f:	add    BYTE PTR [rsi],ah
 1002031:	add    BYTE PTR [rcx+0x0],ah
 1002034:	jo     0x1002036
 1002036:	outs   dx,DWORD PTR ds:[rsi]
 1002037:	add    BYTE PTR [rbx+0x0],dh
 100203a:	cmp    eax,DWORD PTR [rax]
 100203c:	add    BYTE PTR [rax],al
 100203e:	add    BYTE PTR [rax],al
 1002040:	cmp    bl,BYTE PTR gs:[rbx+rsi*2+0x71]
 1002045:	ins    BYTE PTR es:[rdi],dx
 1002046:	xor    DWORD PTR [rcx],esi
 1002048:	pop    rdi
 1002049:	ins    DWORD PTR es:[rdi],dx
 100204a:	(bad)  
 100204b:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1002052:	ins    BYTE PTR es:[rdi],dx
 1002053:	pop    rsp
 1002054:	outs   dx,BYTE PTR ds:[rsi]
 1002055:	je     0x10020bb
 1002057:	(bad)  
 1002058:	ins    DWORD PTR es:[rdi],dx
 1002059:	jae    0x10020b7
 100205b:	ins    DWORD PTR es:[rdi],dx
 100205c:	jae    0x10020cf
 100205e:	ins    BYTE PTR es:[rdi],dx
 100205f:	pop    rsp
 1002060:	data16 jne 0x10020cf
 1002063:	ins    BYTE PTR es:[rdi],dx
 1002064:	je     0x10020cb
 1002066:	js     0x10020dc
 1002068:	pop    rsp
 1002069:	jae    0x10020dd
 100206b:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 100206f:	(bad)  
 1002070:	jb     0x10020d5
 1002072:	push   0x6d6f635c
 1002077:	ins    DWORD PTR es:[rdi],dx
 1002078:	outs   dx,DWORD PTR ds:[rsi]
 1002079:	outs   dx,BYTE PTR ds:[rsi]
 100207a:	pop    rsp
 100207b:	jne    0x10020f1
 100207d:	imul   ebp,DWORD PTR [rsp+rbx*2+0x6c],0x7274736d
 1002085:	movsxd edi,DWORD PTR cs:[rax+0x78]
 1002089:	add    BYTE PTR [rax],al
 100208b:	add    BYTE PTR [rax],al
 100208d:	add    BYTE PTR [rax],al
 100208f:	add    BYTE PTR [rdx],ah
 1002091:	add    eax,0x11993
 1002096:	add    BYTE PTR [rax],al
 1002098:	and    BYTE PTR [rcx],al
 100209a:	add    DWORD PTR [rax],eax
	...
 10020a4:	add    eax,DWORD PTR [rax]
 10020a6:	add    BYTE PTR [rax],al
 10020a8:	sub    BYTE PTR [rcx],al
 10020aa:	add    DWORD PTR [rax],eax
 10020ac:	and    BYTE PTR [rax],al
	...
 10020b6:	add    BYTE PTR [rax],al
 10020b8:	and    al,BYTE PTR [rip+0x11993]        # 0x1013a51
 10020be:	add    BYTE PTR [rax],al
 10020c0:	push   rsp
 10020c1:	add    DWORD PTR [rcx],eax
	...
 10020cb:	add    BYTE PTR [rbx],al
 10020cd:	add    BYTE PTR [rax],al
 10020cf:	add    BYTE PTR [rcx+rax*1+0x1],bl
 10020d3:	add    BYTE PTR [rax],ah
	...
 10020dd:	add    BYTE PTR [rax],al
 10020df:	add    BYTE PTR [rdx],ah
 10020e1:	add    eax,0x21993
 10020e6:	add    BYTE PTR [rax],al
 10020e8:	xchg   esp,eax
 10020e9:	add    DWORD PTR [rcx],eax
	...
 10020f3:	add    BYTE PTR [rax+rax*1],al
 10020f6:	add    BYTE PTR [rax],al
 10020f8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10020f9:	add    DWORD PTR [rcx],eax
 10020fb:	add    BYTE PTR [rax],dh
	...
 1002105:	add    BYTE PTR [rax],al
 1002107:	add    BYTE PTR [rdx],ah
 1002109:	add    eax,0x21993
 100210e:	add    BYTE PTR [rax],al
 1002110:	(bad)  
 1002111:	add    DWORD PTR [rcx],eax
	...
 100211b:	add    BYTE PTR [rip+0xffffffffe4000000],al        # 0xffffffffe5002121
 1002121:	add    DWORD PTR [rcx],eax
 1002123:	add    BYTE PTR [rax],ah
	...
 100212d:	add    BYTE PTR [rax],al
 100212f:	add    BYTE PTR [rax+0x78],dh
 1002132:	add    BYTE PTR [rcx],al
 1002134:	add    BYTE PTR [rax],al
 1002136:	add    BYTE PTR [rax],al
 1002138:	movabs al,ds:0x2000000000010078
 1002141:	jns    0x1002143
 1002143:	add    DWORD PTR [rax],eax
 1002145:	add    BYTE PTR [rax],al
 1002147:	add    BYTE PTR [rax+0x10077],al
 100214d:	add    BYTE PTR [rax],al
 100214f:	add    BYTE PTR [rax+0x76],dh
 1002152:	add    BYTE PTR [rcx],al
 1002154:	add    BYTE PTR [rax],al
 1002156:	add    BYTE PTR [rax],al
 1002158:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002159:	(bad)  
 100215a:	add    BYTE PTR [rcx],al
 100215c:	add    BYTE PTR [rax],al
 100215e:	add    BYTE PTR [rax],al
 1002160:	loopne 0x1002199
 1002162:	add    BYTE PTR [rcx],al
 1002164:	add    BYTE PTR [rax],al
 1002166:	add    BYTE PTR [rax],al
 1002168:	push   rax
 1002169:	jnp    0x100216b
 100216b:	add    DWORD PTR [rax],eax
 100216d:	add    BYTE PTR [rax],al
 100216f:	add    al,dh
 1002171:	jnp    0x1002173
 1002173:	add    DWORD PTR [rax],eax
 1002175:	add    BYTE PTR [rax],al
 1002177:	add    BYTE PTR [rbp+0x74],dl
 100217a:	imul   ebp,DWORD PTR [rbx+rax*2+0x6f],0x6e6f6d6d
 1002182:	add    BYTE PTR [rax],al
 1002184:	add    BYTE PTR [rax],al
 1002186:	add    BYTE PTR [rax],al
 1002188:	push   rbp
 1002189:	je     0x10021f4
 100218b:	ins    BYTE PTR es:[rdi],dx
 100218c:	imul   r13d,DWORD PTR [rbp+r12*2+0x53],0x65747379
 1002195:	ins    DWORD PTR es:[rdi],dx
 1002196:	add    BYTE PTR [rax],al
 1002198:	push   rbp
 1002199:	je     0x1002204
 100219b:	ins    BYTE PTR es:[rdi],dx
 100219c:	push   rax
 100219d:	jb     0x100220e
 100219f:	jo     0x1002206
 10021a1:	jb     0x1002217
 10021a3:	jns    0x10021f8
 10021a5:	je     0x1002216
 10021a7:	jb     0x100220e
 10021a9:	add    BYTE PTR [rax],al
 10021ab:	add    BYTE PTR [rax],al
 10021ad:	add    BYTE PTR [rax],al
 10021af:	add    BYTE PTR [rbp+0x74],dl
 10021b2:	imul   ebp,DWORD PTR [rbx+rdx*2+0x65],0x69727563
 10021ba:	je     0x1002235
 10021bc:	add    BYTE PTR [rax],al
 10021be:	add    BYTE PTR [rax],al
 10021c0:	rex.W (bad) 
 10021c2:	jae    0x100222c
 10021c4:	rex.WRB (bad) 
 10021c6:	jo     0x10021c8
 10021c8:	push   r12
 10021ca:	rex.WR
 10021cb:	rex.RB js 0x1002242
 10021ce:	outs   dx,BYTE PTR gs:[rsi]
 10021d0:	jae    0x100223b
 10021d2:	outs   dx,DWORD PTR ds:[rsi]
 10021d3:	outs   dx,BYTE PTR ds:[rsi]
 10021d4:	add    BYTE PTR [rax],al
 10021d6:	add    BYTE PTR [rax],al
 10021d8:	push   rax
 10021d9:	gs jb  0x1002242
 10021dc:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10021de:	jne    0x100224e
 10021e0:	je     0x1002247
 10021e2:	jb     0x1002204
 10021e4:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10021e6:	ins    DWORD PTR es:[rdi],dx
 10021e7:	ins    DWORD PTR es:[rdi],dx
 10021e8:	outs   dx,DWORD PTR ds:[rsi]
 10021e9:	outs   dx,BYTE PTR ds:[rsi]
 10021ea:	add    BYTE PTR [rax],al
 10021ec:	add    BYTE PTR [rax],al
 10021ee:	add    BYTE PTR [rax],al
 10021f0:	rex.RX (bad) 
 10021f2:	jne    0x1002260
 10021f4:	je     0x100223f
 10021f6:	outs   dx,BYTE PTR ds:[rsi]
 10021f7:	push   0x65
 10021f9:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 10021fd:	outs   dx,BYTE PTR ds:[rsi]
 10021fe:	add    BYTE PTR [rax],al
 1002200:	rex.RB jbe 0x1002268
 1002203:	outs   dx,BYTE PTR ds:[rsi]
 1002204:	je     0x1002252
 1002206:	outs   dx,DWORD PTR ds:[rsi]
 1002207:	add    BYTE PTR [eax],al
 100220a:	add    BYTE PTR [rax],al
 100220c:	add    BYTE PTR [rax],al
 100220e:	add    BYTE PTR [rax],al
 1002210:	push   rdx
 1002211:	imul   esp,DWORD PTR [rbx+0x68],0x6f727245
 1002218:	jb     0x100226c
 100221a:	gs jo  0x100228c
 100221d:	jb     0x1002293
 100221f:	imul   ebp,DWORD PTR [rsi+0x67],0x0
 1002226:	add    BYTE PTR [rax],al
 1002228:	push   rbp
 1002229:	jae    0x1002290
 100222b:	and    BYTE PTR fs:[rbx+0x6f],al
 100222f:	ins    DWORD PTR es:[rdi],dx
 1002230:	jo     0x10022a1
 1002232:	outs   dx,BYTE PTR ds:[rsi]
 1002233:	outs   dx,BYTE PTR gs:[rsi]
 1002235:	je     0x1002237
 1002237:	add    BYTE PTR [rsi+0x54],al
 100223a:	rex.RB push r11
 100223c:	je     0x100229f
 100223e:	jb     0x10022b4
 1002240:	push   rbx
 1002241:	je     0x10022b2
 1002243:	jo     0x1002245
 1002245:	add    BYTE PTR [rax],al
 1002247:	add    BYTE PTR [rsi+0x54],al
 100224a:	rex.RB
 100224b:	rex.R
 100224c:	gs jae 0x10022c3
 100224f:	jb     0x10022c6
 1002251:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 1002255:	outs   dx,BYTE PTR ds:[rsi]
 1002256:	add    BYTE PTR [rax],al
 1002258:	rex.RX push rsp
 100225a:	rex.RB
 100225b:	rex.RX
 100225c:	rex.R push rax
 100225e:	imul   esi,DWORD PTR [rax+0x65],0x73
 1002265:	add    BYTE PTR [rax],al
 1002267:	add    BYTE PTR [rsi+0x54],al
 100226a:	rex.RB
 100226b:	rex.RX ins BYTE PTR es:[rdi],dx
 100226d:	outs   dx,DWORD PTR ds:[rsi]
 100226e:	ja     0x1002270
 1002270:	rex.RX push rsp
 1002272:	rex.RB
 1002273:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1002275:	jo     0x10022ec
 1002277:	je     0x10022ec
 1002279:	add    BYTE PTR [rax],al
 100227b:	add    BYTE PTR [rax],al
 100227d:	add    BYTE PTR [rax],al
 100227f:	add    BYTE PTR [rsi+0x54],al
 1002282:	rex.RB
 1002283:	rex.WRXB jne 0x10022fa
 1002286:	jo     0x10022fd
 1002288:	je     0x10022fd
 100228a:	add    BYTE PTR [rax],al
 100228c:	add    BYTE PTR [rax],al
 100228e:	add    BYTE PTR [rax],al
 1002290:	rex.RX push rsp
 1002292:	rex.RB
 1002293:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1002295:	jne    0x1002305
 1002297:	je     0x10022fe
 1002299:	jb     0x100230e
 100229b:	add    BYTE PTR [rax],al
 100229d:	add    BYTE PTR [rax],al
 100229f:	add    BYTE PTR [rsi+0x54],al
 10022a2:	rex.RB push r8
 10022a4:	gs jb  0x100230d
 10022a7:	rex.XB outs dx,BYTE PTR ds:[rsi]
 10022a9:	je     0x100231d
 10022ab:	add    BYTE PTR [rax],al
 10022ad:	add    BYTE PTR [rax],al
 10022af:	add    BYTE PTR [rsi+0x54],al
 10022b2:	rex.RB
 10022b3:	rex.RB jbe 0x100231b
 10022b6:	outs   dx,BYTE PTR ds:[rsi]
 10022b7:	je     0x1002305
 10022b9:	outs   dx,DWORD PTR ds:[rsi]
 10022ba:	add    BYTE PTR [eax],al
 10022bd:	add    BYTE PTR [rax],al
 10022bf:	add    BYTE PTR [rsi+0x54],al
 10022c2:	rex.RB push r12
 10022c4:	push   0x64616572
 10022c9:	rex.RB js 0x100232f
 10022cc:	gs jo  0x1002343
 10022cf:	imul   ebp,DWORD PTR [rdi+0x6e],0x73
 10022d6:	add    BYTE PTR [rax],al
 10022d8:	rex.XB
 10022d9:	rex.X
 10022da:	rex.R
 10022db:	gs jae 0x1002352
 10022de:	jb     0x1002355
 10022e0:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 10022e4:	outs   dx,BYTE PTR ds:[rsi]
 10022e5:	add    BYTE PTR [rax],al
 10022e7:	add    BYTE PTR [rbx+0x42],al
 10022ea:	push   rdx
 10022eb:	gs jae 0x100235d
 10022ee:	jne    0x1002362
 10022f0:	movsxd esp,DWORD PTR [rbp+0x0]
 10022f3:	add    BYTE PTR [rax],al
 10022f5:	add    BYTE PTR [rax],al
 10022f7:	add    BYTE PTR [rsi+0x54],al
 10022fa:	rex.RB push r10
 10022fc:	gs jae 0x100236e
 10022ff:	jne    0x1002373
 1002301:	movsxd esp,DWORD PTR [rbp+0x4d]
 1002304:	outs   dx,DWORD PTR ds:[rsi]
 1002305:	outs   dx,BYTE PTR ds:[rsi]
 1002306:	imul   esi,DWORD PTR [rdi+rbp*2+0x72],0x0
 100230e:	add    BYTE PTR [rax],al
 1002310:	rex.RX push rsp
 1002312:	rex.RB
 1002313:	rex.WRB
 1002314:	gs ins DWORD PTR es:[rdi],dx
 1002316:	outs   dx,DWORD PTR ds:[rsi]
 1002317:	jb     0x1002392
 1002319:	rex.WRB (bad) 
 100231b:	outs   dx,BYTE PTR ds:[rsi]
 100231c:	(bad)  
 100231d:	addr32 gs jb 0x1002321
 1002321:	add    BYTE PTR [rax],al
 1002323:	add    BYTE PTR [rax],al
 1002325:	add    BYTE PTR [rax],al
 1002327:	add    BYTE PTR [rsi+0x44],al
 100232a:	rex.B
 100232b:	fs ins DWORD PTR es:[rdi],dx
 100232d:	imul   ebp,DWORD PTR [rsi+0x0],0x74534446
 1002334:	(bad)  
 1002335:	jb     0x10023ab
 1002337:	push   rbx
 1002338:	je     0x10023a9
 100233a:	jo     0x100233c
 100233c:	add    BYTE PTR [rax],al
 100233e:	add    BYTE PTR [rax],al
 1002340:	rex.RX
 1002341:	rex.R
 1002342:	rex.R
 1002343:	gs jae 0x10023ba
 1002346:	jb     0x10023bd
 1002348:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 100234c:	outs   dx,BYTE PTR ds:[rsi]
 100234d:	add    BYTE PTR [rax],al
 100234f:	add    BYTE PTR [rsi+0x44],al
 1002352:	rex.RX
 1002353:	rex.R push rax
 1002355:	imul   esi,DWORD PTR [rax+0x65],0x73
 100235c:	rex.RX
 100235d:	rex.R
 100235e:	rex.RX ins BYTE PTR es:[rdi],dx
 1002360:	outs   dx,DWORD PTR ds:[rsi]
 1002361:	ja     0x1002363
 1002363:	add    BYTE PTR [rax],al
 1002365:	add    BYTE PTR [rax],al
 1002367:	add    BYTE PTR [rsi+0x44],al
 100236a:	rex.WB outs dx,BYTE PTR ds:[rsi]
 100236c:	jo     0x10023e3
 100236e:	je     0x10023e3
	...
 1002378:	rex.RX
 1002379:	rex.R
 100237a:	rex.WRXB jne 0x10023f1
 100237d:	jo     0x10023f4
 100237f:	je     0x10023f4
 1002381:	add    BYTE PTR [rax],al
 1002383:	add    BYTE PTR [rax],al
 1002385:	add    BYTE PTR [rax],al
 1002387:	add    BYTE PTR [rsi+0x44],al
 100238a:	push   rsp
 100238b:	gs js  0x1002402
 100238e:	push   rbx
 100238f:	outs   dx,DWORD PTR ds:[rsi]
 1002390:	jne    0x1002404
 1002392:	movsxd esp,DWORD PTR [rbp+0x0]
 1002395:	add    BYTE PTR [rax],al
 1002397:	add    BYTE PTR [rsi+0x44],al
 100239a:	push   rbx
 100239b:	je     0x100240f
 100239d:	gs (bad) 
 100239f:	ins    DWORD PTR es:[rdi],dx
	...
 10023a8:	rex.RX
 10023a9:	rex.R push rax
 10023ab:	ins    BYTE PTR es:[rdi],dx
 10023ac:	(bad)  
 10023ad:	imul   ebp,DWORD PTR [rsi+0x54],0x48747865
 10023b4:	(bad)  
 10023b5:	outs   dx,BYTE PTR ds:[rsi]
 10023b6:	fs ins BYTE PTR es:[rdi],dx
 10023b8:	gs jb  0x10023bb
 10023bb:	add    BYTE PTR [rax],al
 10023bd:	add    BYTE PTR [rax],al
 10023bf:	add    BYTE PTR [rsi+0x44],al
 10023c2:	rex.WRX outs dx,DWORD PTR ds:[rsi]
 10023c4:	jb     0x1002433
 10023c6:	(bad)  
 10023c7:	ins    BYTE PTR es:[rdi],dx
 10023c8:	imul   edi,DWORD PTR [rdx+0x65],0x0
 10023cf:	add    BYTE PTR [rsi+0x44],al
 10023d2:	push   rax
 10023d3:	gs jb  0x100243c
 10023d6:	rex.XB outs dx,BYTE PTR ds:[rsi]
 10023d8:	je     0x100244c
 10023da:	add    BYTE PTR [rax],al
 10023dc:	add    BYTE PTR [rax],al
 10023de:	add    BYTE PTR [rax],al
 10023e0:	rex.RX
 10023e1:	rex.R
 10023e2:	rex.WRX outs dx,DWORD PTR ds:[rsi]
 10023e4:	imul   esi,DWORD PTR [rbx+0x65],0x64726f57
 10023eb:	imul   r13d,DWORD PTR [rbp+r12*2+0x0],0x6f4e4446
 10023f4:	imul   esi,DWORD PTR [rbx+0x65],0x64726f57
 10023fb:	jae    0x10023fd
 10023fd:	add    BYTE PTR [rax],al
 10023ff:	add    BYTE PTR [rsi+0x44],al
 1002402:	rex.WRX outs dx,DWORD PTR ds:[rsi]
 1002404:	imul   esi,DWORD PTR [rbx+0x65],0x64726f57
 100240b:	jae    0x1002459
 100240d:	imul   esi,DWORD PTR [rbx+0x74],0x0
 1002414:	add    BYTE PTR [rax],al
 1002416:	add    BYTE PTR [rax],al
 1002418:	rex.WB outs dx,BYTE PTR ds:[rsi]
 100241a:	outs   dx,WORD PTR ds:[rsi]
 100241c:	push   rbx
 100241d:	outs   dx,DWORD PTR ds:[rsi]
 100241e:	data16 je 0x1002441
 1002421:	push   rdi
 1002422:	outs   dx,DWORD PTR ds:[rsi]
 1002423:	jb     0x1002489
 1002425:	and    BYTE PTR [rdx+0x72],ah
 1002428:	gs (bad) 
 100242a:	imul   esp,DWORD PTR [rbp+0x72],0x0
 100242e:	add    BYTE PTR [rax],al
 1002430:	rex.WR (bad) 
 1002432:	outs   dx,BYTE PTR ds:[rsi]
 1002433:	addr32 push rdi
 1002435:	jb     0x1002479
 1002437:	imul   esp,DWORD PTR [rax],0x54
 100243a:	outs   dx,DWORD PTR ds:[rsi]
 100243b:	imul   esp,DWORD PTR [rbp+0x6e],0x69
 100243f:	jp     0x10024a6
 1002441:	jb     0x1002443
 1002443:	add    BYTE PTR [rax],al
 1002445:	add    BYTE PTR [rax],al
 1002447:	add    BYTE PTR [rcx+riz*2+0x6e],cl
 100244b:	addr32 push rdi
 100244d:	jb     0x1002491
 100244f:	imul   esp,DWORD PTR [rax],0x54
 1002452:	outs   dx,DWORD PTR ds:[rsi]
 1002453:	imul   esp,DWORD PTR [rbp+0x6e],0x69
 1002457:	jp     0x10024be
 1002459:	jb     0x100247b
 100245b:	rex.WRXB jne 0x10024d2
 100245e:	jo     0x10024d5
 1002460:	je     0x1002462
 1002462:	add    BYTE PTR [rax],al
 1002464:	add    BYTE PTR [rax],al
 1002466:	add    BYTE PTR [rax],al
 1002468:	rex.WR (bad) 
 100246a:	outs   dx,BYTE PTR ds:[rsi]
 100246b:	addr32 push rdi
 100246d:	jb     0x10024b1
 100246f:	imul   esp,DWORD PTR [rax],0x54
 1002472:	outs   dx,DWORD PTR ds:[rsi]
 1002473:	imul   esp,DWORD PTR [rbp+0x6e],0x69
 1002477:	jp     0x10024de
 1002479:	jb     0x100249b
 100247b:	push   rsp
 100247c:	jb     0x10024df
 100247e:	movsxd esp,DWORD PTR [rbp+0x0]
 1002481:	add    BYTE PTR [rax],al
 1002483:	add    BYTE PTR [rax],al
 1002485:	add    BYTE PTR [rax],al
 1002487:	add    BYTE PTR [rcx+riz*2+0x6e],cl
 100248b:	addr32 push rdi
 100248d:	jb     0x10024d1
 100248f:	imul   esp,DWORD PTR [rax],0x54
 1002492:	outs   dx,DWORD PTR ds:[rsi]
 1002493:	imul   esp,DWORD PTR [rbp+0x6e],0x69
 1002497:	jp     0x10024fe
 1002499:	jb     0x10024bb
 100249b:	rex.R
 100249c:	movsxd ebp,DWORD PTR gs:[rcx+0x73]
 10024a0:	imul   ebp,DWORD PTR [rdi+0x6e],0x0
 10024a7:	add    BYTE PTR [rcx+riz*2+0x6e],cl
 10024ab:	addr32 push rdi
 10024ad:	jb     0x10024f1
 10024af:	imul   esp,DWORD PTR [rax],0x54
 10024b2:	outs   dx,DWORD PTR ds:[rsi]
 10024b3:	imul   esp,DWORD PTR [rbp+0x6e],0x69
 10024b7:	jp     0x100251e
 10024b9:	jb     0x10024db
 10024bb:	push   rbx
 10024bc:	jne    0x1002531
 10024be:	jo     0x1002525
 10024c0:	movsxd esi,DWORD PTR [rax+rax*1+0x0]
 10024c4:	add    BYTE PTR [rax],al
 10024c6:	add    BYTE PTR [rax],al
 10024c8:	rex.WR (bad) 
 10024ca:	outs   dx,BYTE PTR ds:[rsi]
 10024cb:	addr32 push rdi
 10024cd:	jb     0x1002511
 10024cf:	imul   esp,DWORD PTR [rax],0x57
 10024d2:	outs   dx,DWORD PTR ds:[rsi]
 10024d3:	jb     0x1002539
 10024d5:	and    BYTE PTR [rdx+0x72],al
 10024d8:	gs (bad) 
 10024da:	imul   esp,DWORD PTR [rbp+0x72],0x0
 10024de:	add    BYTE PTR [rax],al
 10024e0:	rex.WR (bad) 
 10024e2:	outs   dx,BYTE PTR ds:[rsi]
 10024e3:	addr32 push rdi
 10024e5:	jb     0x1002529
 10024e7:	imul   esp,DWORD PTR [rax],0x54
 10024ea:	jb     0x1002555
 10024ec:	add    BYTE PTR gs:[rax],al
 10024ef:	add    BYTE PTR [rcx+riz*2+0x6e],cl
 10024f3:	addr32 push rdi
 10024f5:	jb     0x1002539
 10024f7:	imul   esp,DWORD PTR [rax],0x54
 10024fa:	jb     0x1002565
 10024fc:	and    BYTE PTR gs:[rip+0x69725020],ch        # 0x6a727523
 1002503:	outs   dx,BYTE PTR ds:[rsi]
 1002504:	je     0x1002506
 1002506:	add    BYTE PTR [rax],al
 1002508:	rex.W push rsp
 100250a:	rex.WRB
 100250b:	rex.WR and BYTE PTR [rsi+0x69],r12b
 100250f:	ins    BYTE PTR es:[rdi],dx
 1002510:	je     0x1002577
 1002512:	jb     0x1002514
 1002514:	add    BYTE PTR [rax],al
 1002516:	add    BYTE PTR [rax],al
 1002518:	pop    rax
 1002519:	ins    DWORD PTR es:[rdi],dx
 100251a:	ins    BYTE PTR es:[rdi],dx
 100251b:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x72502072
 1002524:	outs   dx,DWORD PTR ds:[rsi]
 1002525:	jo     0x100257d
 1002527:	(bad)  
 1002528:	jb     0x1002593
 100252a:	(bad)  
 100252b:	outs   dx,BYTE PTR ds:[rsi]
 100252c:	je     0x100252e
 100252e:	add    BYTE PTR [rax],al
 1002530:	pop    rax
 1002531:	ins    DWORD PTR es:[rdi],dx
 1002532:	ins    BYTE PTR es:[rdi],dx
 1002533:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x65522072
 100253c:	data16 gs jb 0x10025a5
 1002540:	outs   dx,BYTE PTR ds:[rsi]
 1002541:	movsxd esp,DWORD PTR [rbp+0x20]
 1002544:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1002546:	jne    0x10025b6
 1002548:	je     0x100254a
 100254a:	add    BYTE PTR [rax],al
 100254c:	add    BYTE PTR [rax],al
 100254e:	add    BYTE PTR [rax],al
 1002550:	pop    rax
 1002551:	ins    DWORD PTR es:[rdi],dx
 1002552:	ins    BYTE PTR es:[rdi],dx
 1002553:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x72542072
 100255c:	imul   esp,DWORD PTR [rbp+0x0],0x6c6d5800
 1002563:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x72542072
 100256c:	imul   esp,DWORD PTR [rbp+0x20],0x7250202d
 1002573:	imul   ebp,DWORD PTR [rsi+0x74],0x6d580000
 100257a:	ins    BYTE PTR es:[rdi],dx
 100257b:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x53492072
 1002584:	je     0x10025f8
 1002586:	gs (bad) 
 1002588:	ins    DWORD PTR es:[rdi],dx
 1002589:	and    BYTE PTR [rcx+0x6d],ch
 100258c:	jo     0x10025fa
 100258e:	gs ins DWORD PTR es:[rdi],dx
 1002590:	outs   dx,BYTE PTR gs:[rsi]
 1002592:	je     0x10025f5
 1002594:	je     0x10025ff
 1002596:	outs   dx,DWORD PTR ds:[rsi]
 1002597:	outs   dx,BYTE PTR ds:[rsi]
 1002598:	jae    0x100259a
 100259a:	add    BYTE PTR [rax],al
 100259c:	add    BYTE PTR [rax],al
 100259e:	add    BYTE PTR [rax],al
 10025a0:	pop    rax
 10025a1:	ins    DWORD PTR es:[rdi],dx
 10025a2:	ins    BYTE PTR es:[rdi],dx
 10025a3:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x74412072
 10025ac:	je     0x1002620
 10025ae:	imul   esp,DWORD PTR [rdx+0x75],0x20736574
 10025b5:	imul   r14,QWORD PTR [rbx+0x74],0x0
 10025bd:	add    BYTE PTR [rax],al
 10025bf:	add    BYTE PTR [rax+0x6d],bl
 10025c2:	ins    BYTE PTR es:[rdi],dx
 10025c3:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x46492072
 10025cc:	imul   ebp,DWORD PTR [rsp+rsi*2+0x65],0x6d692072
 10025d4:	jo     0x1002642
 10025d6:	gs ins DWORD PTR es:[rdi],dx
 10025d8:	outs   dx,BYTE PTR gs:[rsi]
 10025da:	je     0x100263d
 10025dc:	je     0x1002647
 10025de:	outs   dx,DWORD PTR ds:[rsi]
 10025df:	outs   dx,BYTE PTR ds:[rsi]
 10025e0:	and    BYTE PTR [rbx+0x6f],al
 10025e3:	outs   dx,BYTE PTR ds:[rsi]
 10025e4:	je     0x100264b
 10025e6:	outs   dx,BYTE PTR ds:[rsi]
 10025e7:	je     0x1002609
 10025e9:	rex.W (bad) 
 10025eb:	outs   dx,BYTE PTR ds:[rsi]
 10025ec:	fs ins BYTE PTR es:[rdi],dx
 10025ee:	gs jb  0x10025f1
 10025f1:	add    BYTE PTR [rax],al
 10025f3:	add    BYTE PTR [rax],al
 10025f5:	add    BYTE PTR [rax],al
 10025f7:	add    BYTE PTR [rax+0x6d],bl
 10025fa:	ins    BYTE PTR es:[rdi],dx
 10025fb:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x614c2072
 1002604:	outs   dx,BYTE PTR ds:[rsi]
 1002605:	addr32 jne 0x1002669
 1002608:	and    BYTE PTR gs:[ebp+eiz*2+0x74],al
 100260e:	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
 1002613:	add    BYTE PTR [rax],al
 1002615:	add    BYTE PTR [rax],al
 1002617:	add    BYTE PTR [rax+0x6d],bl
 100261a:	ins    BYTE PTR es:[rdi],dx
 100261b:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x72502072
 1002624:	outs   dx,DWORD PTR ds:[rsi]
 1002625:	jo     0x100268c
 1002627:	jb     0x100269d
 1002629:	jns    0x100264b
 100262b:	imul   r14,QWORD PTR [rbx+0x74],0x6c6d5800
 1002633:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x41532072
 100263c:	pop    rax
 100263d:	and    BYTE PTR [rbx+0x6f],al
 1002640:	outs   dx,BYTE PTR ds:[rsi]
 1002641:	je     0x10026a8
 1002643:	outs   dx,BYTE PTR ds:[rsi]
 1002644:	je     0x1002666
 1002646:	rex.W (bad) 
 1002648:	outs   dx,BYTE PTR ds:[rsi]
 1002649:	fs ins BYTE PTR es:[rdi],dx
 100264b:	gs jb  0x100264e
 100264e:	add    BYTE PTR [rax],al
 1002650:	pop    rax
 1002651:	ins    DWORD PTR es:[rdi],dx
 1002652:	ins    BYTE PTR es:[rdi],dx
 1002653:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x75532072
 100265c:	(bad)  
 100265d:	rex.RB ins BYTE PTR es:[rdi],dx
 100265f:	gs ins DWORD PTR es:[rdi],dx
 1002661:	outs   dx,BYTE PTR gs:[rsi]
 1002663:	je     0x10026d8
 1002665:	and    BYTE PTR [rcx+rbp*2+0x73],cl
 1002669:	je     0x100266b
 100266b:	add    BYTE PTR [rax],al
 100266d:	add    BYTE PTR [rax],al
 100266f:	add    BYTE PTR [rax+0x6d],bl
 1002672:	ins    BYTE PTR es:[rdi],dx
 1002673:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x4d582072
 100267c:	rex.WR and BYTE PTR [rbx+0x6f],r8b
 1002680:	outs   dx,BYTE PTR ds:[rsi]
 1002681:	je     0x10026e8
 1002683:	outs   dx,BYTE PTR ds:[rsi]
 1002684:	je     0x10026a6
 1002686:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x72
 100268f:	add    BYTE PTR [rax+0x6d],bl
 1002692:	ins    BYTE PTR es:[rdi],dx
 1002693:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x4d582072
 100269c:	rex.WR and BYTE PTR [rbx+0x6f],r8b
 10026a0:	outs   dx,BYTE PTR ds:[rsi]
 10026a1:	je     0x1002708
 10026a3:	outs   dx,BYTE PTR ds:[rsi]
 10026a4:	je     0x10026c6
 10026a6:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x4c442072
 10026af:	rex.WR add BYTE PTR [rax],r8b
 10026b2:	add    BYTE PTR [rax],al
 10026b4:	add    BYTE PTR [rax],al
 10026b6:	add    BYTE PTR [rax],al
 10026b8:	pop    rax
 10026b9:	ins    DWORD PTR es:[rdi],dx
 10026ba:	ins    BYTE PTR es:[rdi],dx
 10026bb:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x4d582072
 10026c4:	rex.WR and BYTE PTR [rbx+0x6f],r8b
 10026c8:	outs   dx,BYTE PTR ds:[rsi]
 10026c9:	je     0x1002730
 10026cb:	outs   dx,BYTE PTR ds:[rsi]
 10026cc:	je     0x10026ee
 10026ce:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x6f4d2072
 10026d7:	fs jne 0x1002746
 10026da:	add    BYTE PTR gs:[rax],al
 10026dd:	add    BYTE PTR [rax],al
 10026df:	add    BYTE PTR [rdx],ah
 10026e1:	add    eax,0x11993
 10026e6:	add    BYTE PTR [rax],al
 10026e8:	cwde   
 10026e9:	add    al,BYTE PTR [rcx]
	...
 10026f3:	add    BYTE PTR [rbx],al
 10026f5:	add    BYTE PTR [rax],al
 10026f7:	add    BYTE PTR [rax+0x20000102],ah
	...
 1002705:	add    BYTE PTR [rax],al
 1002707:	add    BYTE PTR [rdx],ah
 1002709:	add    eax,0x11993
 100270e:	add    BYTE PTR [rax],al
 1002710:	enter  0x102,0x0
	...
 100271c:	add    DWORD PTR [rax],eax
 100271e:	add    BYTE PTR [rax],al
 1002720:	rol    BYTE PTR [rdx],1
 1002722:	add    DWORD PTR [rax],eax
	...
 1002730:	add    BYTE PTR cs:[rax],al
 1002733:	add    BYTE PTR [rax],al
 1002735:	add    BYTE PTR [rax],al
 1002737:	add    BYTE PTR [rbp+riz*2+0x76],al
 100273b:	imul   esp,DWORD PTR [rbx+0x65],0x616c6620
 1002742:	add    BYTE PTR [eax],al
 1002745:	add    BYTE PTR [rax],al
 1002747:	add    BYTE PTR [rbp+0x72],al
 100274a:	jb     0x10027bb
 100274c:	jb     0x100276e
 100274e:	ins    BYTE PTR es:[rdi],dx
 100274f:	gs jbe 0x10027b7
 1002752:	ins    BYTE PTR es:[rdi],dx
 1002753:	add    BYTE PTR [rax],al
 1002755:	add    BYTE PTR [rax],al
 1002757:	add    BYTE PTR [rcx+0x73],al
 100275a:	jae    0x10027c1
 100275c:	jb     0x10027d2
 100275e:	and    BYTE PTR [rbp+riz*2+0x76],ch
 1002762:	gs ins BYTE PTR es:[rdi],dx
 1002764:	add    BYTE PTR [rax],al
 1002766:	add    BYTE PTR [rax],al
 1002768:	push   rax
 1002769:	jb     0x10027d4
 100276b:	outs   dx,BYTE PTR ds:[rsi]
 100276c:	je     0x100278e
 100276e:	ins    BYTE PTR es:[rdi],dx
 100276f:	outs   dx,DWORD PTR ds:[rsi]
 1002770:	movsxd esp,DWORD PTR [rcx+0x74]
 1002773:	imul   ebp,DWORD PTR [rdi+0x6e],0x72500000
 100277a:	imul   ebp,DWORD PTR [rsi+0x74],0x6f727020
 1002781:	addr32 jb 0x10027e5
 1002784:	ins    DWORD PTR es:[rdi],dx
 1002785:	and    BYTE PTR [rsi+0x61],ch
 1002788:	ins    DWORD PTR es:[rdi],dx
 1002789:	add    BYTE PTR gs:[rax],al
 100278c:	add    BYTE PTR [rax],al
 100278e:	add    BYTE PTR [rax],al
 1002790:	push   rax
 1002791:	jb     0x10027fc
 1002793:	outs   dx,BYTE PTR ds:[rsi]
 1002794:	je     0x10027b6
 1002796:	je     0x1002801
 1002798:	ins    DWORD PTR es:[rdi],dx
 1002799:	add    BYTE PTR gs:[rax],al
 100279c:	add    BYTE PTR [rax],al
 100279e:	add    BYTE PTR [rax],al
 10027a0:	push   rax
 10027a1:	jb     0x100280c
 10027a3:	outs   dx,BYTE PTR ds:[rsi]
 10027a4:	je     0x10027c6
 10027a6:	je     0x1002810
 10027a8:	jb     0x100280f
 10027aa:	(bad)  
 10027ab:	and    BYTE PTR fs:[rcx+0x64],ch
 10027af:	add    BYTE PTR [rax+0x72],dl
 10027b2:	imul   ebp,DWORD PTR [rsi+0x74],0x72726520
 10027b9:	outs   dx,DWORD PTR ds:[rsi]
 10027ba:	jb     0x10027dc
 10027bc:	ins    BYTE PTR es:[rdi],dx
 10027bd:	gs jbe 0x1002825
 10027c0:	ins    BYTE PTR es:[rdi],dx
 10027c1:	add    BYTE PTR [rax],al
 10027c3:	add    BYTE PTR [rax],al
 10027c5:	add    BYTE PTR [rax],al
 10027c7:	add    BYTE PTR [rax+0x72],dl
 10027ca:	imul   ebp,DWORD PTR [rsi+0x74],0x67617420
 10027d1:	and    BYTE PTR [rcx+0x64],ch
 10027d4:	add    BYTE PTR [rax],al
 10027d6:	add    BYTE PTR [rax],al
 10027d8:	push   rax
 10027d9:	jb     0x1002844
 10027db:	outs   dx,BYTE PTR ds:[rsi]
 10027dc:	je     0x10027fe
 10027de:	je     0x1002841
 10027e0:	and    BYTE PTR [esi+0x61],ch
 10027e4:	ins    DWORD PTR es:[rdi],dx
 10027e5:	add    BYTE PTR gs:[rax],al
 10027e8:	push   rax
 10027e9:	jb     0x1002854
 10027eb:	outs   dx,BYTE PTR ds:[rsi]
 10027ec:	je     0x100280e
 10027ee:	jo     0x1002862
 10027f0:	outs   dx,DWORD PTR ds:[rsi]
 10027f1:	movsxd esp,DWORD PTR [rbp+0x73]
 10027f4:	jae    0x1002816
 10027f6:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x0
 10027fe:	add    BYTE PTR [rax],al
 1002800:	imul   esp,DWORD PTR [rbp+0x72],0x6e
 1002804:	gs ins BYTE PTR es:[rdi],dx
 1002806:	xor    esi,DWORD PTR [rdx]
	...
 1002810:	and    al,BYTE PTR [rip+0x41993]        # 0x10441a9
 1002816:	add    BYTE PTR [rax],al
 1002818:	js     0x100281d
 100281a:	add    DWORD PTR [rax],eax
	...
 1002824:	(bad)  
 1002825:	add    BYTE PTR [rax],al
 1002827:	add    BYTE PTR [rax+0x20000103],bl
 100282d:	add    BYTE PTR [rax],al
 100282f:	add    BYTE PTR [rax],al
 1002831:	add    BYTE PTR [rax],al
 1002833:	add    BYTE PTR [rcx],al
 1002835:	add    BYTE PTR [rax],al
 1002837:	add    BYTE PTR [rdx],ah
 1002839:	add    eax,0x11993
 100283e:	add    BYTE PTR [rax],al
 1002840:	fadd   DWORD PTR [rbx]
 1002842:	add    DWORD PTR [rax],eax
	...
 100284c:	add    eax,DWORD PTR [rax]
 100284e:	add    BYTE PTR [rax],al
 1002850:	loopne 0x1002855
 1002852:	add    DWORD PTR [rax],eax
 1002854:	and    BYTE PTR [rax],al
 1002856:	add    BYTE PTR [rax],al
 1002858:	add    BYTE PTR [rax],al
 100285a:	add    BYTE PTR [rax],al
 100285c:	add    DWORD PTR [rax],eax
 100285e:	add    BYTE PTR [rax],al
 1002860:	and    al,BYTE PTR [rip+0x51993]        # 0x10541f9
 1002866:	add    BYTE PTR [rax],al
 1002868:	adc    BYTE PTR [rcx+rax*1],al
	...
 1002873:	add    BYTE PTR [rdi],al
 1002875:	add    BYTE PTR [rax],al
 1002877:	add    BYTE PTR [rax],bh
 1002879:	add    al,0x1
 100287b:	add    BYTE PTR [rax],dh
 100287d:	add    BYTE PTR [rax],al
 100287f:	add    BYTE PTR [rax],al
 1002881:	add    BYTE PTR [rax],al
 1002883:	add    BYTE PTR [rcx],al
 1002885:	add    BYTE PTR [rax],al
 1002887:	add    BYTE PTR [rdx],ah
 1002889:	add    eax,0x51993
 100288e:	add    BYTE PTR [rax],al
 1002890:	add    BYTE PTR [rcx+rax*1],0x0
	...
 100289c:	(bad)  
 100289d:	add    BYTE PTR [rax],al
 100289f:	add    BYTE PTR [rax+0x20000104],ch
 10028a5:	add    BYTE PTR [rax],al
 10028a7:	add    BYTE PTR [rax],al
 10028a9:	add    BYTE PTR [rax],al
 10028ab:	add    BYTE PTR [rcx],al
 10028ad:	add    BYTE PTR [rax],al
 10028af:	add    BYTE PTR [rdx],ah
 10028b1:	add    eax,0x11993
 10028b6:	add    BYTE PTR [rax],al
 10028b8:	sbb    BYTE PTR [rip+0x1],al        # 0x10028bf
 10028be:	add    BYTE PTR [rax],al
 10028c0:	add    BYTE PTR [rax],al
 10028c2:	add    BYTE PTR [rax],al
 10028c4:	add    eax,DWORD PTR [rax]
 10028c6:	add    BYTE PTR [rax],al
 10028c8:	and    BYTE PTR [rip+0x200001],al        # 0x12028cf
 10028ce:	add    BYTE PTR [rax],al
 10028d0:	add    BYTE PTR [rax],al
 10028d2:	add    BYTE PTR [rax],al
 10028d4:	add    DWORD PTR [rax],eax
 10028d6:	add    BYTE PTR [rax],al
 10028d8:	and    al,BYTE PTR [rip+0x81993]        # 0x1084271
 10028de:	add    BYTE PTR [rax],al
 10028e0:	fs add eax,0x10001
 10028e6:	add    BYTE PTR [rax],al
 10028e8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10028e9:	add    eax,0xf0001
 10028ee:	add    BYTE PTR [rax],al
 10028f0:	int3   
 10028f1:	add    eax,0xa80001
 10028f6:	add    BYTE PTR [rax],al
 10028f8:	add    BYTE PTR [rax],al
 10028fa:	add    BYTE PTR [rax],al
 10028fc:	add    DWORD PTR [rax],eax
 10028fe:	add    BYTE PTR [rax],al
 1002900:	and    al,BYTE PTR [rip+0x11993]        # 0x1014299
 1002906:	add    BYTE PTR [rax],al
 1002908:	mov    esp,0x106
 100290d:	add    BYTE PTR [rax],al
 100290f:	add    BYTE PTR [rax],al
 1002911:	add    BYTE PTR [rax],al
 1002913:	add    BYTE PTR [rbx],al
 1002915:	add    BYTE PTR [rax],al
 1002917:	add    ah,al
 1002919:	(bad)  
 100291a:	add    DWORD PTR [rax],eax
 100291c:	add    BYTE PTR [rax],0x0
 100291f:	add    BYTE PTR [rax],al
 1002921:	add    BYTE PTR [rax],al
 1002923:	add    BYTE PTR [rcx],al
 1002925:	add    BYTE PTR [rax],al
 1002927:	add    BYTE PTR [rdx],ah
 1002929:	add    eax,0x11993
 100292e:	add    BYTE PTR [rax],al
 1002930:	cld    
 1002931:	(bad)  
 1002932:	add    DWORD PTR [rax],eax
	...
 100293c:	add    eax,DWORD PTR [rax]
 100293e:	add    BYTE PTR [rax],al
 1002940:	add    al,0x7
 1002942:	add    DWORD PTR [rax],eax
 1002944:	pop    rax
 1002945:	add    BYTE PTR [rax],al
 1002947:	add    BYTE PTR [rax],al
 1002949:	add    BYTE PTR [rax],al
 100294b:	add    BYTE PTR [rcx],al
 100294d:	add    BYTE PTR [rax],al
 100294f:	add    BYTE PTR [rdx],ah
 1002951:	add    eax,0x21993
 1002956:	add    BYTE PTR [rax],al
 1002958:	rex (bad) 
 100295a:	add    DWORD PTR [rax],eax
	...
 1002964:	add    eax,0x50000000
 1002969:	(bad)  
 100296a:	add    DWORD PTR [rax],eax
 100296c:	cwde   
 100296d:	add    BYTE PTR [rax],al
 100296f:	add    BYTE PTR [rax],al
 1002971:	add    BYTE PTR [rax],al
 1002973:	add    BYTE PTR [rcx],al
 1002975:	add    BYTE PTR [rax],al
 1002977:	add    BYTE PTR [rdx],ah
 1002979:	add    eax,0x11993
 100297e:	add    BYTE PTR [rax],al
 1002980:	xchg   esp,eax
 1002981:	(bad)  
 1002982:	add    DWORD PTR [rax],eax
	...
 100298c:	add    eax,DWORD PTR [rax]
 100298e:	add    BYTE PTR [rax],al
 1002990:	pushf  
 1002991:	(bad)  
 1002992:	add    DWORD PTR [rax],eax
 1002994:	cmp    BYTE PTR [rax],al
 1002996:	add    BYTE PTR [rax],al
 1002998:	add    BYTE PTR [rax],al
 100299a:	add    BYTE PTR [rax],al
 100299c:	add    DWORD PTR [rax],eax
 100299e:	add    BYTE PTR [rax],al
 10029a0:	and    al,BYTE PTR [rip+0x11993]        # 0x1014339
 10029a6:	add    BYTE PTR [rax],al
 10029a8:	rol    BYTE PTR [rdi],1
 10029aa:	add    DWORD PTR [rax],eax
	...
 10029b4:	add    eax,DWORD PTR [rax]
 10029b6:	add    BYTE PTR [rax],al
 10029b8:	fadd   DWORD PTR [rdi]
 10029ba:	add    DWORD PTR [rax],eax
 10029bc:	cmp    BYTE PTR [rax],al
 10029be:	add    BYTE PTR [rax],al
 10029c0:	add    BYTE PTR [rax],al
 10029c2:	add    BYTE PTR [rax],al
 10029c4:	add    DWORD PTR [rax],eax
 10029c6:	add    BYTE PTR [rax],al
 10029c8:	and    al,BYTE PTR [rip+0x71993]        # 0x1074361
 10029ce:	add    BYTE PTR [rax],al
 10029d0:	in     al,0x8
 10029d2:	add    DWORD PTR [rax],eax
	...
 10029dc:	or     al,0x0
 10029de:	add    BYTE PTR [rax],al
 10029e0:	sbb    al,0x9
 10029e2:	add    DWORD PTR [rax],eax
 10029e4:	js     0x10029e6
 10029e6:	add    BYTE PTR [rax],al
 10029e8:	add    BYTE PTR [rax],al
 10029ea:	add    BYTE PTR [rax],al
 10029ec:	add    DWORD PTR [rax],eax
 10029ee:	add    BYTE PTR [rax],al
 10029f0:	and    al,BYTE PTR [rip+0xc1993]        # 0x10c4389
 10029f6:	add    BYTE PTR [rax],al
 10029f8:	or     al,BYTE PTR [rcx]
	...
 1002a03:	add    BYTE PTR [rdx],dl
 1002a05:	add    BYTE PTR [rax],al
 1002a07:	add    BYTE PTR [rax-0x4ffffef6],ah
 1002a0d:	add    BYTE PTR [rax],al
 1002a0f:	add    BYTE PTR [rax],al
 1002a11:	add    BYTE PTR [rax],al
 1002a13:	add    BYTE PTR [rcx],al
 1002a15:	add    BYTE PTR [rax],al
 1002a17:	add    BYTE PTR [rdx],ah
 1002a19:	add    eax,0x11993
 1002a1e:	add    BYTE PTR [rax],al
 1002a20:	sbb    BYTE PTR [rcx+rax*1],cl
	...
 1002a2b:	add    BYTE PTR [rbx],al
 1002a2d:	add    BYTE PTR [rax],al
 1002a2f:	add    BYTE PTR [rax],ah
 1002a31:	or     al,0x1
 1002a33:	add    BYTE PTR [rax],ch
 1002a35:	add    BYTE PTR [rax],al
 1002a37:	add    BYTE PTR [rax],al
 1002a39:	add    BYTE PTR [rax],al
 1002a3b:	add    BYTE PTR [rcx],al
 1002a3d:	add    BYTE PTR [rax],al
 1002a3f:	add    BYTE PTR [rdx],ah
 1002a41:	add    eax,0xa1993
 1002a46:	add    BYTE PTR [rax],al
 1002a48:	fs or  al,0x1
	...
 1002a53:	add    BYTE PTR [rdi],cl
 1002a55:	add    BYTE PTR [rax],al
 1002a57:	add    BYTE PTR [rsp+rcx*1+0x800001],dh
 1002a5e:	add    BYTE PTR [rax],al
 1002a60:	add    BYTE PTR [rax],al
 1002a62:	add    BYTE PTR [rax],al
 1002a64:	add    DWORD PTR [rax],eax
 1002a66:	add    BYTE PTR [rax],al
 1002a68:	and    al,BYTE PTR [rip+0x61993]        # 0x1064401
 1002a6e:	add    BYTE PTR [rax],al
 1002a70:	clc    
 1002a71:	or     eax,0x1
 1002a76:	add    BYTE PTR [rax],al
 1002a78:	add    BYTE PTR [rax],al
 1002a7a:	add    BYTE PTR [rax],al
 1002a7c:	or     BYTE PTR [rax],al
 1002a7e:	add    BYTE PTR [rax],al
 1002a80:	sub    BYTE PTR [rsi],cl
 1002a82:	add    DWORD PTR [rax],eax
 1002a84:	mov    BYTE PTR [rax],al
 1002a86:	add    BYTE PTR [rax],al
 1002a88:	add    BYTE PTR [rax],al
 1002a8a:	add    BYTE PTR [rax],al
 1002a8c:	add    DWORD PTR [rax],eax
 1002a8e:	add    BYTE PTR [rax],al
 1002a90:	and    al,BYTE PTR [rip+0x11993]        # 0x1014429
 1002a96:	add    BYTE PTR [rax],al
 1002a98:	or     BYTE PTR [rsi],0x1
	...
 1002aa3:	add    BYTE PTR [rbx],al
 1002aa5:	add    BYTE PTR [rax],al
 1002aa7:	add    BYTE PTR [rax+0x2000010e],cl
 1002aad:	add    BYTE PTR [rax],al
 1002aaf:	add    BYTE PTR [rax],al
 1002ab1:	add    BYTE PTR [rax],al
 1002ab3:	add    BYTE PTR [rcx],al
 1002ab5:	add    BYTE PTR [rax],al
 1002ab7:	add    BYTE PTR [rdx],ah
 1002ab9:	add    eax,0x11993
 1002abe:	add    BYTE PTR [rax],al
 1002ac0:	ror    BYTE PTR [rsi],0x1
	...
 1002acb:	add    BYTE PTR [rbx],al
 1002acd:	add    BYTE PTR [rax],al
 1002acf:	add    al,cl
 1002ad1:	(bad)  
 1002ad2:	add    DWORD PTR [rax],eax
 1002ad4:	and    BYTE PTR [rax],al
 1002ad6:	add    BYTE PTR [rax],al
 1002ad8:	add    BYTE PTR [rax],al
 1002ada:	add    BYTE PTR [rax],al
 1002adc:	add    DWORD PTR [rax],eax
 1002ade:	add    BYTE PTR [rax],al
 1002ae0:	cmp    bl,BYTE PTR gs:[rbx+rsi*2+0x71]
 1002ae5:	ins    BYTE PTR es:[rdi],dx
 1002ae6:	xor    DWORD PTR [rcx],esi
 1002ae8:	pop    rdi
 1002ae9:	ins    DWORD PTR es:[rdi],dx
 1002aea:	(bad)  
 1002aeb:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1002af2:	ins    BYTE PTR es:[rdi],dx
 1002af3:	pop    rsp
 1002af4:	outs   dx,BYTE PTR ds:[rsi]
 1002af5:	je     0x1002b5b
 1002af7:	(bad)  
 1002af8:	ins    DWORD PTR es:[rdi],dx
 1002af9:	jae    0x1002b57
 1002afb:	ins    DWORD PTR es:[rdi],dx
 1002afc:	jae    0x1002b6f
 1002afe:	ins    BYTE PTR es:[rdi],dx
 1002aff:	pop    rsp
 1002b00:	data16 jne 0x1002b6f
 1002b03:	ins    BYTE PTR es:[rdi],dx
 1002b04:	je     0x1002b6b
 1002b06:	js     0x1002b7c
 1002b08:	pop    rsp
 1002b09:	jae    0x1002b7d
 1002b0b:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 1002b0f:	(bad)  
 1002b10:	jb     0x1002b75
 1002b12:	push   0x6d6f635c
 1002b17:	ins    DWORD PTR es:[rdi],dx
 1002b18:	outs   dx,DWORD PTR ds:[rsi]
 1002b19:	outs   dx,BYTE PTR ds:[rsi]
 1002b1a:	pop    rsp
 1002b1b:	je     0x1002b8f
 1002b1d:	(bad)  
 1002b1e:	movsxd esp,DWORD PTR [rbp+0x72]
 1002b21:	pop    rsp
 1002b22:	ins    BYTE PTR es:[rdi],dx
 1002b23:	imul   esp,DWORD PTR [rdx+0x5c],0x63617274
 1002b2a:	gs jb  0x1002b95
 1002b2d:	gs ins BYTE PTR es:[rdi],dx
 1002b2f:	jo     0x1002b96
 1002b31:	jb     0x1002ba6
 1002b33:	cs push 0x70000000
 1002b39:	(bad)  
 1002b3a:	add    BYTE PTR [rcx],al
 1002b3c:	add    BYTE PTR [rax],al
 1002b3e:	add    BYTE PTR [rax],al
 1002b40:	(bad)  
 1002b41:	add    DWORD PTR [rax],0x1
	...
 1002b50:	cmp    bl,BYTE PTR gs:[rbx+rsi*2+0x71]
 1002b55:	ins    BYTE PTR es:[rdi],dx
 1002b56:	xor    DWORD PTR [rcx],esi
 1002b58:	pop    rdi
 1002b59:	ins    DWORD PTR es:[rdi],dx
 1002b5a:	(bad)  
 1002b5b:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1002b62:	ins    BYTE PTR es:[rdi],dx
 1002b63:	pop    rsp
 1002b64:	outs   dx,BYTE PTR ds:[rsi]
 1002b65:	je     0x1002bcb
 1002b67:	(bad)  
 1002b68:	ins    DWORD PTR es:[rdi],dx
 1002b69:	jae    0x1002bc7
 1002b6b:	ins    DWORD PTR es:[rdi],dx
 1002b6c:	jae    0x1002bdf
 1002b6e:	ins    BYTE PTR es:[rdi],dx
 1002b6f:	pop    rsp
 1002b70:	data16 jne 0x1002bdf
 1002b73:	ins    BYTE PTR es:[rdi],dx
 1002b74:	je     0x1002bdb
 1002b76:	js     0x1002bec
 1002b78:	pop    rsp
 1002b79:	jae    0x1002bed
 1002b7b:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 1002b7f:	(bad)  
 1002b80:	jb     0x1002be5
 1002b82:	push   0x6d6f635c
 1002b87:	ins    DWORD PTR es:[rdi],dx
 1002b88:	outs   dx,DWORD PTR ds:[rsi]
 1002b89:	outs   dx,BYTE PTR ds:[rsi]
 1002b8a:	pop    rsp
 1002b8b:	je     0x1002bff
 1002b8d:	(bad)  
 1002b8e:	movsxd esp,DWORD PTR [rbp+0x72]
 1002b91:	pop    rsp
 1002b92:	ins    BYTE PTR es:[rdi],dx
 1002b93:	imul   esp,DWORD PTR [rdx+0x5c],0x63617274
 1002b9a:	gs jb  0x1002c10
 1002b9d:	movsxd esi,DWORD PTR gs:[rbp+0x74]
 1002ba1:	imul   ebp,DWORD PTR [rsi+rbp*1+0x68],0x57000000
 1002ba9:	(bad)  
 1002baa:	imul   esi,DWORD PTR [rsi+rax*2+0x6f],0x6e695372
 1002bb2:	ins    BYTE PTR es:[edi],dx
 1002bb4:	gs rex.WRXB (bad) 
 1002bb7:	push   0x65
 1002bb9:	movsxd esi,DWORD PTR [rax+riz*1+0x66]
 1002bbd:	(bad)  
 1002bbe:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x2e790000
 1002bc6:	push   0xa000d00
 1002bcb:	add    BYTE PTR [rax+rax*1],bh
 1002bce:	(bad)  
 1002bcf:	add    BYTE PTR [rax+rax*1+0x4f],cl
 1002bd3:	add    BYTE PTR [rdi+0x0],al
 1002bd6:	add    BYTE PTR ds:[rax],al
 1002bd9:	add    BYTE PTR [rax],al
 1002bdb:	add    BYTE PTR [rax],al
 1002bdd:	add    BYTE PTR [rax],al
 1002bdf:	add    BYTE PTR [rbp+0x3a],ah
 1002be2:	pop    rsp
 1002be3:	jae    0x1002c56
 1002be5:	ins    BYTE PTR es:[rdi],dx
 1002be6:	xor    DWORD PTR [rcx],esi
 1002be8:	pop    rdi
 1002be9:	ins    DWORD PTR es:[rdi],dx
 1002bea:	(bad)  
 1002beb:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1002bf2:	ins    BYTE PTR es:[rdi],dx
 1002bf3:	pop    rsp
 1002bf4:	outs   dx,BYTE PTR ds:[rsi]
 1002bf5:	je     0x1002c5b
 1002bf7:	(bad)  
 1002bf8:	ins    DWORD PTR es:[rdi],dx
 1002bf9:	jae    0x1002c57
 1002bfb:	ins    DWORD PTR es:[rdi],dx
 1002bfc:	jae    0x1002c6f
 1002bfe:	ins    BYTE PTR es:[rdi],dx
 1002bff:	pop    rsp
 1002c00:	data16 jne 0x1002c6f
 1002c03:	ins    BYTE PTR es:[rdi],dx
 1002c04:	je     0x1002c6b
 1002c06:	js     0x1002c7c
 1002c08:	pop    rsp
 1002c09:	jae    0x1002c7d
 1002c0b:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 1002c0f:	(bad)  
 1002c10:	jb     0x1002c75
 1002c12:	push   0x6d6f635c
 1002c17:	ins    DWORD PTR es:[rdi],dx
 1002c18:	outs   dx,DWORD PTR ds:[rsi]
 1002c19:	outs   dx,BYTE PTR ds:[rsi]
 1002c1a:	pop    rsp
 1002c1b:	je     0x1002c8f
 1002c1d:	(bad)  
 1002c1e:	movsxd esp,DWORD PTR [rbp+0x72]
 1002c21:	pop    rsp
 1002c22:	ins    BYTE PTR es:[rdi],dx
 1002c23:	imul   esp,DWORD PTR [rdx+0x5c],0x63617274
 1002c2a:	ins    DWORD PTR es:[rdi],dx
 1002c2b:	(bad)  
 1002c2c:	imul   ebp,DWORD PTR [rsi+0x2e],0x68
 1002c33:	add    BYTE PTR [rbp+0x72],al
 1002c36:	jb     0x1002ca7
 1002c38:	jb     0x1002cad
 1002c3a:	add    BYTE PTR [rax],al
 1002c3c:	add    BYTE PTR [rax],al
 1002c3e:	add    BYTE PTR [rax],al
 1002c40:	push   rdi
 1002c41:	(bad)  
 1002c42:	jb     0x1002cb2
 1002c44:	imul   ebp,DWORD PTR [rsi+0x67],0x73
 1002c4b:	add    BYTE PTR [rax],al
 1002c4d:	add    BYTE PTR [rax],al
 1002c4f:	add    BYTE PTR [rcx+0x6e],cl
 1002c52:	outs   dx,WORD PTR ds:[rsi]
 1002c54:	jb     0x1002cc3
 1002c56:	(bad)  
 1002c57:	je     0x1002cc2
 1002c59:	outs   dx,DWORD PTR ds:[rsi]
 1002c5a:	outs   dx,BYTE PTR ds:[rsi]
 1002c5b:	add    BYTE PTR [rax],al
 1002c5d:	add    BYTE PTR [rax],al
 1002c5f:	add    BYTE PTR [rsi+0x65],dl
 1002c62:	jb     0x1002cc6
 1002c64:	outs   dx,DWORD PTR ds:[rsi]
 1002c65:	jae    0x1002ccc
 1002c67:	add    BYTE PTR [rdi+0x65],al
 1002c6a:	outs   dx,BYTE PTR ds:[rsi]
 1002c6b:	gs jb  0x1002ccf
 1002c6e:	ins    BYTE PTR es:[rdi],dx
 1002c6f:	add    BYTE PTR [rbp+0x3a],ah
 1002c72:	pop    rsp
 1002c73:	jae    0x1002ce6
 1002c75:	ins    BYTE PTR es:[rdi],dx
 1002c76:	xor    DWORD PTR [rcx],esi
 1002c78:	pop    rdi
 1002c79:	ins    DWORD PTR es:[rdi],dx
 1002c7a:	(bad)  
 1002c7b:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1002c82:	ins    BYTE PTR es:[rdi],dx
 1002c83:	pop    rsp
 1002c84:	outs   dx,BYTE PTR ds:[rsi]
 1002c85:	je     0x1002ceb
 1002c87:	(bad)  
 1002c88:	ins    DWORD PTR es:[rdi],dx
 1002c89:	jae    0x1002ce7
 1002c8b:	ins    DWORD PTR es:[rdi],dx
 1002c8c:	jae    0x1002cff
 1002c8e:	ins    BYTE PTR es:[rdi],dx
 1002c8f:	pop    rsp
 1002c90:	data16 jne 0x1002cff
 1002c93:	ins    BYTE PTR es:[rdi],dx
 1002c94:	je     0x1002cfb
 1002c96:	js     0x1002d0c
 1002c98:	pop    rsp
 1002c99:	jae    0x1002d0d
 1002c9b:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 1002c9f:	(bad)  
 1002ca0:	jb     0x1002d05
 1002ca2:	push   0x6d6f635c
 1002ca7:	ins    DWORD PTR es:[rdi],dx
 1002ca8:	outs   dx,DWORD PTR ds:[rsi]
 1002ca9:	outs   dx,BYTE PTR ds:[rsi]
 1002caa:	pop    rsp
 1002cab:	je     0x1002d1f
 1002cad:	(bad)  
 1002cae:	movsxd esp,DWORD PTR [rbp+0x72]
 1002cb1:	pop    rsp
 1002cb2:	ins    BYTE PTR es:[rdi],dx
 1002cb3:	imul   esp,DWORD PTR [rdx+0x5c],0x68637273
 1002cba:	pop    rsp
 1002cbb:	je     0x1002d2f
 1002cbd:	(bad)  
 1002cbe:	movsxd ebp,DWORD PTR [rbp+0x61]
 1002cc1:	imul   ebp,DWORD PTR [rsi+0x2e],0x707063
 1002cc8:	push   rbx
 1002cc9:	jns    0x1002d3e
 1002ccb:	je     0x1002d32
 1002ccd:	ins    DWORD PTR es:[rdi],dx
 1002cce:	rex.R jb 0x1002d3a
 1002cd1:	jbe    0x1002d38
 1002cd3:	add    BYTE PTR [rax],al
 1002cd5:	add    BYTE PTR [rax],al
 1002cd7:	add    BYTE PTR [rax+rdx*2+0x4b],bl
 1002cdb:	rex.WRB pop r15
 1002cdd:	push   rsp
 1002cde:	push   rdx
 1002cdf:	rex.B
 1002ce0:	rex.XB
 1002ce1:	rex.RB push r10
 1002ce3:	add    BYTE PTR [rsi],ch
 1002ce5:	gs js  0x1002d4d
 1002ce8:	add    BYTE PTR [rax],al
 1002cea:	add    BYTE PTR [rax],al
 1002cec:	cmp    al,0x54
 1002cee:	push   rdx
 1002cef:	rex.XB add BYTE PTR [r8],al
 1002cf2:	add    BYTE PTR [rax],al
 1002cf4:	add    BYTE PTR [rax],al
 1002cf6:	add    BYTE PTR [rax],al
 1002cf8:	and    BYTE PTR [rdi+rbp*2+0x67],ch
 1002cfc:	outs   dx,BYTE PTR ds:[rsi]
 1002cfd:	(bad)  
 1002cfe:	ins    DWORD PTR es:[rdi],dx
 1002cff:	gs cmp eax,0x22732522
 1002d05:	add    BYTE PTR [rax],al
 1002d07:	add    BYTE PTR [rax],ah
 1002d09:	je     0x1002d74
 1002d0b:	ins    DWORD PTR es:[rdi],dx
 1002d0c:	gs cmp eax,0x34302522
 1002d12:	fs (bad) 
 1002d14:	and    eax,0x2f643230
 1002d19:	and    eax,0x20643230
 1002d1e:	and    eax,0x3a643230
 1002d23:	and    eax,0x3a643230
 1002d28:	and    eax,0x2e643230
 1002d2d:	and    eax,0x22643330
 1002d32:	add    BYTE PTR [rax],al
 1002d34:	add    BYTE PTR [rax],al
 1002d36:	add    BYTE PTR [rax],al
 1002d38:	and    BYTE PTR [rbp+0x6c],ah
 1002d3b:	cmp    eax,0x25783022
 1002d40:	js     0x1002d64
 1002d42:	add    BYTE PTR [rax],al
 1002d44:	add    BYTE PTR [rax],al
 1002d46:	add    BYTE PTR [rax],al
 1002d48:	and    BYTE PTR [rcx+riz*2+0x67],dh
 1002d4c:	imul   esp,DWORD PTR [rbp+rdi*1+0x22],0x78257830
 1002d54:	and    al,BYTE PTR [rax]
 1002d56:	add    BYTE PTR [rax],al
 1002d58:	and    BYTE PTR [rcx+riz*2+0x67],dh
 1002d5c:	outs   dx,BYTE PTR ds:[rsi]
 1002d5d:	(bad)  
 1002d5e:	ins    DWORD PTR es:[rdi],dx
 1002d5f:	gs cmp eax,0x22732522
 1002d65:	add    BYTE PTR [rax],al
 1002d67:	add    BYTE PTR [rax],ah
 1002d69:	jo     0x1002dd4
 1002d6b:	fs cmp eax,0x25783022
 1002d71:	js     0x1002d95
 1002d73:	add    BYTE PTR [rax],al
 1002d75:	add    BYTE PTR [rax],al
 1002d77:	add    BYTE PTR [rax],ah
 1002d79:	je     0x1002de4
 1002d7b:	fs cmp eax,0x25783022
 1002d81:	js     0x1002da5
 1002d83:	add    BYTE PTR [rsi],bh
 1002d85:	and    BYTE PTR [rip+0xa],cl        # 0x1002d95
 1002d8b:	add    BYTE PTR [rax],al
 1002d8d:	add    BYTE PTR [rax],al
 1002d8f:	add    BYTE PTR [rax],ah
 1002d91:	and    BYTE PTR [rax],ah
 1002d93:	and    BYTE PTR [rsp+rcx*2],bh
 1002d96:	rex.WRXB
 1002d97:	rex.XB
 1002d98:	and    BYTE PTR ds:[rip+0x64252873],ah        # 0x65255612
 1002d9f:	sub    DWORD PTR [rax],esp
 1002da1:	cmp    al,0x2f
 1002da3:	rex.WR
 1002da4:	rex.WRXB
 1002da5:	rex.XB
 1002da6:	ds or  eax,0xa
 1002dac:	add    BYTE PTR [rax],al
 1002dae:	add    BYTE PTR [rax],al
 1002db0:	and    BYTE PTR [rax],ah
 1002db2:	and    BYTE PTR [rax],ah
 1002db4:	cmp    al,0x45
 1002db6:	push   rdx
 1002db7:	push   rdx
 1002db8:	and    BYTE PTR ds:[rax],dh
 1002dbb:	js     0x1002de2
 1002dbd:	xor    BYTE PTR [rax],bh
 1002dbf:	js     0x1002dfe
 1002dc1:	and    BYTE PTR [rax],al
 1002dc3:	add    BYTE PTR [rax],al
 1002dc5:	add    BYTE PTR [rax],al
 1002dc7:	add    BYTE PTR [rax],ah
 1002dc9:	cmp    al,0x2f
 1002dcb:	rex.RB push r10
 1002dcd:	push   rdx
 1002dce:	ds or  eax,0xa
 1002dd4:	add    BYTE PTR [rax],al
 1002dd6:	add    BYTE PTR [rax],al
 1002dd8:	and    BYTE PTR [rax],ah
 1002dda:	and    BYTE PTR [rax],ah
 1002ddc:	cmp    al,0x4d
 1002dde:	push   rbx
 1002ddf:	rex.RXB
 1002de0:	add    BYTE PTR ds:[rax],al
 1002de3:	add    BYTE PTR [rax],al
 1002de5:	add    BYTE PTR [rax],al
 1002de7:	add    BYTE PTR [rdi+rbp*1],bh
 1002dea:	rex.WRB push r11
 1002dec:	rex.RXB
 1002ded:	ds cmp al,0x2f
 1002df0:	push   rsp
 1002df1:	push   rdx
 1002df2:	rex.XB
 1002df3:	ds or  eax,0x3c00000a
 1002df9:	add    BYTE PTR [rdi],ch
 1002dfb:	add    BYTE PTR [rbp+0x0],cl
 1002dfe:	push   rbx
 1002dff:	add    BYTE PTR [rdi+0x0],al
 1002e02:	add    BYTE PTR ds:[rax+rax*1],bh
 1002e06:	(bad)  
 1002e07:	add    BYTE PTR [rax+rax*1+0x52],dl
 1002e0b:	add    BYTE PTR [rbx+0x0],al
 1002e0e:	add    BYTE PTR ds:[rip+0xa00],cl        # 0x1003815
 1002e15:	add    BYTE PTR [rax],al
 1002e17:	add    BYTE PTR [rax+rax*1],bh
 1002e1a:	rex.WR add BYTE PTR [rdi+0x0],r9b
 1002e1e:	rex.RXB add BYTE PTR [r14],r15b
 1002e21:	add    BYTE PTR [rip+0xa00],cl        # 0x1003827
 1002e27:	add    BYTE PTR [rax+rax*1],bh
 1002e2a:	(bad)  
 1002e2b:	add    BYTE PTR [rbp+0x0],cl
 1002e2e:	push   rbx
 1002e2f:	add    BYTE PTR [rdi+0x0],al
 1002e32:	add    BYTE PTR ds:[rax+rax*1],bh
 1002e36:	(bad)  
 1002e37:	add    BYTE PTR [rax+rax*1+0x52],dl
 1002e3b:	add    BYTE PTR [rbx+0x0],al
 1002e3e:	add    BYTE PTR ds:[rip+0x3c000a00],cl        # 0x3d003845
 1002e45:	add    BYTE PTR [rdi],ch
 1002e47:	add    BYTE PTR [rax+rax*1+0x4f],cl
 1002e4b:	add    BYTE PTR [rdi+0x0],al
 1002e4e:	add    BYTE PTR ds:[rax],al
 1002e51:	add    BYTE PTR [rax],al
 1002e53:	add    BYTE PTR [rax],al
 1002e55:	add    BYTE PTR [rax],al
 1002e57:	add    BYTE PTR [rax+rax*1],bh
 1002e5a:	push   rsp
 1002e5b:	add    BYTE PTR [rdx+0x0],dl
 1002e5e:	rex.XB add BYTE PTR [r8],al
 1002e61:	add    BYTE PTR [rax],al
 1002e63:	add    BYTE PTR [rax],al
 1002e65:	add    BYTE PTR [rax],al
 1002e67:	add    BYTE PTR [rax],ah
 1002e69:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1002e6d:	add    BYTE PTR [rdi+0x0],ah
 1002e70:	outs   dx,BYTE PTR ds:[rsi]
 1002e71:	add    BYTE PTR [rcx+0x0],ah
 1002e74:	ins    DWORD PTR es:[rdi],dx
 1002e75:	add    BYTE PTR [rbp+0x0],ah
 1002e78:	cmp    eax,0x25002200
 1002e7d:	add    BYTE PTR [rbx+0x0],dl
 1002e80:	and    al,BYTE PTR [rax]
	...
 1002e8e:	add    BYTE PTR [rax],al
 1002e90:	and    BYTE PTR [rax],al
 1002e92:	je     0x1002e94
 1002e94:	imul   eax,DWORD PTR [rax],0x65006d
 1002e9a:	cmp    eax,0x25002200
 1002e9f:	add    BYTE PTR [rax],dh
 1002ea1:	add    BYTE PTR [rax+rax*1],dh
 1002ea4:	add    BYTE PTR fs:[rdi],ch
 1002ea7:	add    BYTE PTR [rip+0x32003000],ah        # 0x33005ead
 1002ead:	add    BYTE PTR [rax+rax*1+0x2f],ah
 1002eb1:	add    BYTE PTR [rip+0x32003000],ah        # 0x33005eb7
 1002eb7:	add    BYTE PTR [rax+rax*1+0x20],ah
 1002ebb:	add    BYTE PTR [rip+0x32003000],ah        # 0x33005ec1
 1002ec1:	add    BYTE PTR [rax+rax*1+0x3a],ah
 1002ec5:	add    BYTE PTR [rip+0x32003000],ah        # 0x33005ecb
 1002ecb:	add    BYTE PTR [rax+rax*1+0x3a],ah
 1002ecf:	add    BYTE PTR [rip+0x32003000],ah        # 0x33005ed5
 1002ed5:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1002ed9:	add    BYTE PTR [rip+0x33003000],ah        # 0x34005edf
 1002edf:	add    BYTE PTR [rax+rax*1+0x22],ah
 1002ee3:	add    BYTE PTR [rax],al
 1002ee5:	add    BYTE PTR [rax],al
 1002ee7:	add    BYTE PTR [rax],ah
 1002ee9:	add    BYTE PTR [rbp+0x0],ah
 1002eec:	ins    BYTE PTR es:[rdi],dx
 1002eed:	add    BYTE PTR [rip+0x30002200],bh        # 0x310050f3
 1002ef3:	add    BYTE PTR [rax+0x0],bh
 1002ef6:	and    eax,0x22007800
 1002efb:	add    BYTE PTR [rax],al
 1002efd:	add    BYTE PTR [rax],al
 1002eff:	add    BYTE PTR [rax],ah
 1002f01:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002f05:	add    BYTE PTR [rdi+0x0],ah
 1002f08:	imul   eax,DWORD PTR [rax],0x3d0064
 1002f0e:	and    al,BYTE PTR [rax]
 1002f10:	xor    BYTE PTR [rax],al
 1002f12:	js     0x1002f14
 1002f14:	and    eax,0x22007800
 1002f19:	add    BYTE PTR [rax],al
 1002f1b:	add    BYTE PTR [rax],al
 1002f1d:	add    BYTE PTR [rax],al
 1002f1f:	add    BYTE PTR [rax],ah
 1002f21:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002f25:	add    BYTE PTR [rdi+0x0],ah
 1002f28:	outs   dx,BYTE PTR ds:[rsi]
 1002f29:	add    BYTE PTR [rcx+0x0],ah
 1002f2c:	ins    DWORD PTR es:[rdi],dx
 1002f2d:	add    BYTE PTR [rbp+0x0],ah
 1002f30:	cmp    eax,0x25002200
 1002f35:	add    BYTE PTR [rbx+0x0],dl
 1002f38:	and    al,BYTE PTR [rax]
 1002f3a:	add    BYTE PTR [rax],al
 1002f3c:	add    BYTE PTR [rax],al
 1002f3e:	add    BYTE PTR [rax],al
 1002f40:	and    BYTE PTR [rax],al
 1002f42:	jo     0x1002f44
 1002f44:	imul   eax,DWORD PTR [rax],0x3d0064
 1002f4a:	and    al,BYTE PTR [rax]
 1002f4c:	xor    BYTE PTR [rax],al
 1002f4e:	js     0x1002f50
 1002f50:	and    eax,0x22007800
 1002f55:	add    BYTE PTR [rax],al
 1002f57:	add    BYTE PTR [rax],ah
 1002f59:	add    BYTE PTR [rax+rax*1+0x69],dh
 1002f5d:	add    BYTE PTR [rax+rax*1+0x3d],ah
 1002f61:	add    BYTE PTR [rdx],ah
 1002f63:	add    BYTE PTR [rax],dh
 1002f65:	add    BYTE PTR [rax+0x0],bh
 1002f68:	and    eax,0x22007800
 1002f6d:	add    BYTE PTR [rax],al
 1002f6f:	add    BYTE PTR [rsi],bh
 1002f71:	add    BYTE PTR [rip+0xa00],cl        # 0x1003977
 1002f77:	add    BYTE PTR [rax],ah
 1002f79:	add    BYTE PTR [rax],ah
 1002f7b:	add    BYTE PTR [rax],ah
 1002f7d:	add    BYTE PTR [rax],ah
 1002f7f:	add    BYTE PTR [rax+rax*1],bh
 1002f82:	rex.WR add BYTE PTR [rdi+0x0],r9b
 1002f86:	rex.XB add BYTE PTR [r14],dil
 1002f89:	add    BYTE PTR [rax],ah
 1002f8b:	add    BYTE PTR [rip+0x28005300],ah        # 0x29008291
 1002f91:	add    BYTE PTR [rip+0x29006400],ah        # 0x2a009397
 1002f97:	add    BYTE PTR [rax],ah
 1002f99:	add    BYTE PTR [rax+rax*1],bh
 1002f9c:	(bad)  
 1002f9d:	add    BYTE PTR [rax+rax*1+0x4f],cl
 1002fa1:	add    BYTE PTR [rbx+0x0],al
 1002fa4:	add    BYTE PTR ds:[rip+0xa00],cl        # 0x10039ab
 1002fab:	add    BYTE PTR [rax],al
 1002fad:	add    BYTE PTR [rax],al
 1002faf:	add    BYTE PTR [rax],ah
 1002fb1:	add    BYTE PTR [rax],ah
 1002fb3:	add    BYTE PTR [rax],ah
 1002fb5:	add    BYTE PTR [rax],ah
 1002fb7:	add    BYTE PTR [rax+rax*1],bh
 1002fba:	add    BYTE PTR [r10+0x0],r10b
 1002fbe:	push   rdx
 1002fbf:	add    BYTE PTR [rsi],bh
 1002fc1:	add    BYTE PTR [rax],ah
 1002fc3:	add    BYTE PTR [rax],dh
 1002fc5:	add    BYTE PTR [rax+0x0],bh
 1002fc8:	and    eax,0x38003000
 1002fcd:	add    BYTE PTR [rax+0x0],bh
 1002fd0:	cmp    eax,0x2000
 1002fd5:	add    BYTE PTR [rax],al
 1002fd7:	add    BYTE PTR [rax],ah
 1002fd9:	add    BYTE PTR [rax+rax*1],bh
 1002fdc:	(bad)  
 1002fdd:	add    BYTE PTR [rbp+0x0],al
 1002fe0:	push   rdx
 1002fe1:	add    BYTE PTR [rdx+0x0],dl
 1002fe4:	add    BYTE PTR ds:[rip+0xa00],cl        # 0x10039eb
 1002feb:	add    BYTE PTR [rax],al
 1002fed:	add    BYTE PTR [rax],al
 1002fef:	add    BYTE PTR [rax+rax*1],bh
 1002ff2:	rex.WRB add BYTE PTR [r11+0x0],r10b
 1002ff6:	rex.RXB add BYTE PTR [r14],r15b
 1002ff9:	add    BYTE PTR [rax],al
 1002ffb:	add    BYTE PTR [rax],al
 1002ffd:	add    BYTE PTR [rax],al
 1002fff:	add    BYTE PTR [rcx+0x73],al
 1003002:	jae    0x1003069
 1003004:	jb     0x100307a
 1003006:	imul   ebp,DWORD PTR [rdi+0x6e],0x69616620
 100300d:	ins    BYTE PTR es:[rdi],dx
 100300e:	gs and BYTE PTR fs:[rdx],bh
 1003012:	and    BYTE PTR [rip+0x203a2073],ah        # 0x213a508b
 1003018:	and    ah,BYTE PTR [rip+0x3d202273]        # 0x3e205291
 100301e:	cmp    eax,0x203020
	...
 100302f:	add    BYTE PTR [rcx+0x73],al
 1003032:	jae    0x1003099
 1003034:	jb     0x10030aa
 1003036:	cmp    ah,BYTE PTR [rax]
 1003038:	and    eax,0x45203a73
 100303d:	js     0x10030af
 100303f:	jb     0x10030a6
 1003041:	jae    0x10030b6
 1003043:	imul   ebp,DWORD PTR [rdi+0x6e],0x7325203a
 100304a:	or     eax,0x500a0d0a
 100304f:	jb     0x10030c0
 1003051:	movsxd esp,DWORD PTR [rbp+0x73]
 1003054:	jae    0x1003090
 1003056:	and    BYTE PTR [rip+0xd0a0d73],ah        # 0xe0a3dcf
 100305c:	or     dl,BYTE PTR [rax+0x72]
 100305f:	outs   dx,DWORD PTR ds:[rsi]
 1003060:	movsxd esp,DWORD PTR [rbp+0x73]
 1003063:	jae    0x10030ae
 1003065:	rex.R
 1003066:	cs push rsp
 1003068:	push   0x64616572
 100306d:	rex.WB
 100306e:	cmp    r12b,BYTE PTR [rax]
 1003071:	and    eax,0x64252e64
 1003076:	or     eax,0x460a0d0a
 100307b:	imul   ebp,DWORD PTR [rbp+riz*2+0x3a],0xd732520
 1003083:	or     cl,BYTE PTR [rip+0x6e694c0a]        # 0x6f697c93
 1003089:	cmp    ah,BYTE PTR gs:[rax]
 100308c:	and    eax,0x49000075
 1003091:	jae    0x10030d7
 1003093:	gs (bad) 
 1003095:	jne    0x10030fe
 1003097:	addr32 gs jb 0x10030eb
 100309b:	jb     0x1003102
 100309d:	jae    0x1003104
 100309f:	outs   dx,BYTE PTR ds:[rsi]
 10030a0:	je     0x10030a2
 10030a2:	add    BYTE PTR [rax],al
 10030a4:	add    BYTE PTR [rax],al
 10030a6:	add    BYTE PTR [rax],al
 10030a8:	rex.WRB
 10030a9:	gs ins DWORD PTR es:[rdi],dx
 10030ab:	outs   dx,DWORD PTR ds:[rsi]
 10030ac:	jb     0x1003127
 10030ae:	and    BYTE PTR [rcx+0x6c],ah
 10030b1:	ins    BYTE PTR es:[rdi],dx
 10030b2:	outs   dx,DWORD PTR ds:[rsi]
 10030b3:	movsxd esp,DWORD PTR [rcx+0x74]
 10030b6:	imul   ebp,DWORD PTR [rdi+0x6e],0x69616620
 10030bd:	ins    BYTE PTR es:[rdi],dx
 10030be:	gs add BYTE PTR fs:[rax],al
 10030c2:	add    BYTE PTR [rax],al
 10030c4:	add    BYTE PTR [rax],al
 10030c6:	add    BYTE PTR [rax],al
 10030c8:	rex.W (bad) 
 10030ca:	outs   dx,BYTE PTR ds:[rsi]
 10030cb:	fs ins BYTE PTR es:[rdi],dx
 10030cd:	and    BYTE PTR gs:[rcx+0x73],ch
 10030d1:	and    BYTE PTR [rsi+0x6f],ch
 10030d4:	je     0x10030f6
 10030d6:	jbe    0x1003139
 10030d8:	ins    BYTE PTR es:[rdi],dx
 10030d9:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x45000000
 10030e1:	jb     0x1003155
 10030e3:	outs   dx,DWORD PTR ds:[rsi]
 10030e4:	jb     0x1003106
 10030e6:	outs   dx,BYTE PTR gs:[rsi]
 10030e8:	movsxd ebp,DWORD PTR [rdi+0x75]
 10030eb:	outs   dx,BYTE PTR ds:[rsi]
 10030ec:	je     0x1003153
 10030ee:	jb     0x1003155
 10030f0:	add    BYTE PTR fs:[rax],al
 10030f3:	add    BYTE PTR [rsi+0x41],al
 10030f6:	rex.WR push rbx
 10030f8:	add    BYTE PTR [r8],r8b
 10030fb:	add    BYTE PTR [rax],al
 10030fd:	add    BYTE PTR [rax],al
 10030ff:	add    BYTE PTR [rdx+0x65],dh
 1003102:	je     0x1003179
 1003104:	jb     0x1003174
 1003106:	and    BYTE PTR [rbx+0x6f],ah
 1003109:	fs and BYTE PTR gs:[rcx+0x73],ch
 100310e:	and    BYTE PTR [rip+0x47202c73],ah        # 0x48205d87
 1003114:	gs je  0x1003163
 1003117:	(bad)  
 1003118:	jae    0x100318e
 100311a:	rex.RB jb 0x100318f
 100311d:	outs   dx,DWORD PTR ds:[rsi]
 100311e:	jb     0x1003140
 1003120:	jb     0x1003187
 1003122:	je     0x1003199
 1003124:	jb     0x1003194
 1003126:	gs and BYTE PTR fs:[rip+0x202d2064],ah        # 0x212d5192
 100312e:	and    eax,0x2073
 1003133:	add    BYTE PTR [rax],al
 1003135:	add    BYTE PTR [rax],al
 1003137:	add    BYTE PTR [rbp+0x6e],dl
 100313a:	imul   ebp,DWORD PTR [rsi+0x6f],0x77
 100313e:	outs   dx,BYTE PTR ds:[rsi]
 100313f:	and    BYTE PTR [rsi+0x69],al
 1003142:	ins    BYTE PTR es:[rdi],dx
 1003143:	add    BYTE PTR gs:[rax],al
 1003146:	add    BYTE PTR [rax],al
 1003148:	pop    rsp
 1003149:	add    BYTE PTR [rax],al
 100314b:	add    BYTE PTR [rsi],ch
 100314d:	je     0x10031c1
 100314f:	movsxd eax,DWORD PTR [rax]
 1003151:	add    BYTE PTR [rax],al
 1003153:	add    BYTE PTR [rax],al
 1003155:	add    BYTE PTR [rax],al
 1003157:	add    BYTE PTR [rdi+0x53],bl
 100315a:	push   0x64657261
 100315f:	rex.WRB
 1003160:	gs ins DWORD PTR es:[rdi],dx
 1003162:	outs   dx,DWORD PTR ds:[rsi]
 1003163:	jb     0x10031de
	...
 100316d:	add    BYTE PTR [rax],al
 100316f:	add    BYTE PTR [rcx+0x0],cl
 1003172:	outs   dx,BYTE PTR ds:[rsi]
 1003173:	add    BYTE PTR [rsi+0x0],dh
 1003176:	(bad)  
 1003177:	add    BYTE PTR [rax+rax*1+0x69],ch
 100317b:	add    BYTE PTR [rax+rax*1+0x20],ah
 100317f:	add    BYTE PTR [rbx+0x0],dh
 1003182:	push   0x72006100
 1003187:	add    BYTE PTR [rbp+0x0],ah
 100318a:	add    BYTE PTR fs:[rax],ah
 100318d:	add    BYTE PTR [rbp+0x0],ch
 1003190:	add    BYTE PTR gs:[rbp+0x0],ch
 1003194:	outs   dx,DWORD PTR ds:[rsi]
 1003195:	add    BYTE PTR [rdx+0x0],dh
 1003198:	jns    0x100319a
 100319a:	and    BYTE PTR [rax],al
 100319c:	data16 add BYTE PTR [rcx+0x0],ch
 10031a0:	ins    BYTE PTR es:[rdi],dx
 10031a1:	add    BYTE PTR [rbp+0x0],ah
 10031a4:	and    BYTE PTR [rax],al
 10031a6:	push   rsp
 10031a7:	add    BYTE PTR [rdx+0x0],dh
 10031aa:	(bad)  
 10031ab:	add    BYTE PTR [rbx+0x0],ah
 10031ae:	imul   eax,DWORD PTR [rax],0x67006e
 10031b4:	and    BYTE PTR [rax],al
 10031b6:	imul   eax,DWORD PTR [rax],0x200073
 10031bc:	add    BYTE PTR fs:[rbp+0x0],ah
 10031c0:	jae    0x10031c2
 10031c2:	(bad)  
 10031c3:	add    BYTE PTR [rdx+0x0],ah
 10031c6:	ins    BYTE PTR es:[rdi],dx
 10031c7:	add    BYTE PTR [rbp+0x0],ah
 10031ca:	add    BYTE PTR fs:[rip+0xa00],cl        # 0x1003bd1
 10031d1:	add    BYTE PTR [rax],al
 10031d3:	add    BYTE PTR [rsi],ch
 10031d5:	js     0x1003244
 10031d7:	ins    BYTE PTR es:[rdi],dx
	...
 10031e0:	rex.RX (bad) 
 10031e2:	imul   ebp,DWORD PTR [rax+riz*1+0x54],0x706f206f
 10031ea:	outs   dx,BYTE PTR gs:[rsi]
 10031ec:	and    BYTE PTR [rdi+rbp*2+0x67],ch
 10031f0:	and    BYTE PTR [rsi+0x69],ah
 10031f3:	ins    BYTE PTR es:[rdi],dx
 10031f4:	gs and BYTE PTR cs:[rdx+rsi*2+0x61],dl
 10031fa:	movsxd ebp,DWORD PTR [rcx+0x6e]
 10031fd:	and    BYTE PTR [ecx+0x73],ch
 1003201:	and    BYTE PTR [rcx+rbp*2+0x73],ah
 1003205:	(bad)  
 1003206:	(bad)  
 1003207:	ins    BYTE PTR es:[rdi],dx
 1003208:	gs fs or eax,0xa
 100320f:	add    BYTE PTR [rip+0x72652073],ah        # 0x73655288
 1003215:	jb     0x1003286
 1003217:	jb     0x1003239
 1003219:	and    eax,0xa0d78
 100321e:	add    BYTE PTR [rax],al
 1003220:	rex.RX (bad) 
 1003222:	imul   ebp,DWORD PTR [rax+riz*1+0x54],0x706f206f
 100322a:	outs   dx,BYTE PTR gs:[rsi]
 100322c:	and    BYTE PTR [rdi+rbp*2+0x67],ch
 1003230:	and    BYTE PTR [rsi+0x69],ah
 1003233:	ins    BYTE PTR es:[rdi],dx
 1003234:	and    BYTE PTR gs:[rbx+0x68],dh
 1003238:	(bad)  
 1003239:	jb     0x10032a0
 100323b:	and    BYTE PTR fs:[rbp+0x65],ch
 100323f:	ins    DWORD PTR es:[rdi],dx
 1003240:	outs   dx,DWORD PTR ds:[rsi]
 1003241:	jb     0x10032bc
 1003243:	and    BYTE PTR [rdx+rsi*2+0x61],dl
 1003247:	movsxd ebp,DWORD PTR [rcx+0x6e]
 100324a:	and    BYTE PTR [ecx+0x73],ch
 100324e:	and    BYTE PTR [rcx+rbp*2+0x73],ah
 1003252:	(bad)  
 1003253:	(bad)  
 1003254:	ins    BYTE PTR es:[rdi],dx
 1003255:	gs fs or eax,0xa
 100325c:	add    BYTE PTR [rax],al
 100325e:	add    BYTE PTR [rax],al
 1003260:	rex.RX (bad) 
 1003262:	imul   ebp,DWORD PTR [rax+riz*1+0x54],0x706f206f
 100326a:	outs   dx,BYTE PTR gs:[rsi]
 100326c:	and    BYTE PTR [rdi+rbp*2+0x67],ch
 1003270:	and    BYTE PTR [rsi+0x69],ah
 1003273:	ins    BYTE PTR es:[rdi],dx
 1003274:	and    BYTE PTR gs:[rbp+0x61],ch
 1003278:	jo     0x100329a
 100327a:	jbe    0x10032e5
 100327c:	gs ja  0x100329f
 100327f:	outs   dx,DWORD PTR ds:[rsi]
 1003280:	data16 and BYTE PTR [rsi+0x69],ah
 1003284:	ins    BYTE PTR es:[rdi],dx
 1003285:	and    BYTE PTR gs:[rdx+rsi*2+0x61],dl
 100328a:	movsxd ebp,DWORD PTR [rcx+0x6e]
 100328d:	and    BYTE PTR [ecx+0x73],ch
 1003291:	and    BYTE PTR [rcx+rbp*2+0x73],ah
 1003295:	(bad)  
 1003296:	(bad)  
 1003297:	ins    BYTE PTR es:[rdi],dx
 1003298:	gs fs or eax,0xa
 100329f:	add    BYTE PTR [rip+0x2500002a],ch        # 0x260032cf
 10032a5:	jae    0x10032a7
 10032a7:	add    BYTE PTR [rip+0x53],ah        # 0x1003300
 10032ad:	add    BYTE PTR [rax],al
 10032af:	add    BYTE PTR [rip+0x64343025],ch        # 0x653462da
 10032b5:	sub    eax,0x64323025
 10032ba:	sub    eax,0x64323025
 10032bf:	sub    eax,0x64323025
 10032c4:	sub    eax,0x64323025
 10032c9:	sub    eax,0x64323025
 10032ce:	sub    eax,0x64333025
 10032d3:	sub    eax,0x6425
 10032d8:	and    al,BYTE PTR [rip+0x11993]        # 0x1014c71
 10032de:	add    BYTE PTR [rax],al
 10032e0:	rex.WR sgdt [rax]
	...
 10032ec:	add    eax,DWORD PTR [rax]
 10032ee:	add    BYTE PTR [rax],al
 10032f0:	push   rsp
 10032f1:	sgdt   [rax]
 10032f4:	(bad)  
 10032f5:	add    BYTE PTR [rax],al
 10032f7:	add    BYTE PTR [rax],al
 10032f9:	add    BYTE PTR [rax],al
 10032fb:	add    BYTE PTR [rcx],al
 10032fd:	add    BYTE PTR [rax],al
 10032ff:	add    BYTE PTR [rsi+0x0],ah
 1003302:	add    BYTE PTR fs:[rsi],ch
 1003305:	add    BYTE PTR [rax+rax*1+0x6c],ah
 1003309:	add    BYTE PTR [rax+rax*1+0x0],ch
 100330d:	add    BYTE PTR [rax],al
 100330f:	add    BYTE PTR [rbp+0x0],ch
 1003312:	jae    0x1003314
 1003314:	push   rsp
 1003315:	add    BYTE PTR [rdx+0x0],dh
 1003318:	(bad)  
 1003319:	add    BYTE PTR [rbx+0x0],ah
 100331c:	add    BYTE PTR gs:[rdx+0x0],dh
 1003320:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 1003325:	add    BYTE PTR [rax+rax*1+0x0],ch
 1003329:	add    BYTE PTR [rax],al
 100332b:	add    BYTE PTR [rax],al
 100332d:	add    BYTE PTR [rax],al
 100332f:	add    BYTE PTR [rcx+0x63],al
 1003332:	movsxd esp,DWORD PTR [rbp+0x73]
 1003335:	jae    0x100337d
 1003337:	rex.W outs dx,DWORD PTR fs:[rsi]
 100333a:	jae    0x10033b0
 100333c:	push   rsp
 100333d:	jb     0x10033a0
 100333f:	movsxd esp,DWORD PTR [rbp+0x72]
 1003342:	add    BYTE PTR [rax],al
 1003344:	add    BYTE PTR [rax],al
 1003346:	add    BYTE PTR [rax],al
 1003348:	rex.RX
 1003349:	rex.W outs dx,DWORD PTR fs:[rsi]
 100334c:	jae    0x10033c2
 100334e:	push   rsp
 100334f:	jb     0x10033b2
 1003351:	movsxd esp,DWORD PTR [rbp+0x72]
 1003354:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1003356:	(bad)  
 1003357:	(bad)  
 1003358:	ins    BYTE PTR es:[rdi],dx
 1003359:	add    BYTE PTR gs:[rax],al
 100335c:	add    BYTE PTR [rax],al
 100335e:	add    BYTE PTR [rax],al
 1003360:	and    al,BYTE PTR [rip+0x11993]        # 0x1014cf9
 1003366:	add    BYTE PTR [rax],al
 1003368:	nop
 1003369:	sgdt   [rax]
	...
 1003374:	add    eax,DWORD PTR [rax]
 1003376:	add    BYTE PTR [rax],al
 1003378:	cwde   
 1003379:	sgdt   [rax]
 100337c:	and    BYTE PTR [rax],al
 100337e:	add    BYTE PTR [rax],al
 1003380:	add    BYTE PTR [rax],al
 1003382:	add    BYTE PTR [rax],al
 1003384:	add    DWORD PTR [rax],eax
 1003386:	add    BYTE PTR [rax],al
 1003388:	and    al,BYTE PTR [rip+0x11993]        # 0x1014d21
 100338e:	add    BYTE PTR [rax],al
 1003390:	int3   
 1003391:	sgdt   [rax]
	...
 100339c:	add    eax,0xd4000000
 10033a1:	sgdt   [rax]
 10033a4:	and    BYTE PTR [rax],al
 10033a6:	add    BYTE PTR [rax],al
 10033a8:	add    BYTE PTR [rax],al
 10033aa:	add    BYTE PTR [rax],al
 10033ac:	add    DWORD PTR [rax],eax
 10033ae:	add    BYTE PTR [rax],al
 10033b0:	and    al,BYTE PTR [rip+0x11993]        # 0x1014d49
 10033b6:	add    BYTE PTR [rax],al
 10033b8:	adc    BYTE PTR [rax],dl
 10033ba:	add    DWORD PTR [rax],eax
	...
 10033c4:	add    eax,0x18000000
 10033c9:	adc    BYTE PTR [rcx],al
 10033cb:	add    BYTE PTR [rax],ah
 10033cd:	add    BYTE PTR [rax],al
 10033cf:	add    BYTE PTR [rax],al
 10033d1:	add    BYTE PTR [rax],al
 10033d3:	add    BYTE PTR [rcx],al
 10033d5:	add    BYTE PTR [rax],al
 10033d7:	add    BYTE PTR [rdx],ah
 10033d9:	add    eax,0x11993
 10033de:	add    BYTE PTR [rax],al
 10033e0:	push   0x110
 10033e5:	add    BYTE PTR [rax],al
 10033e7:	add    BYTE PTR [rax],al
 10033e9:	add    BYTE PTR [rax],al
 10033eb:	add    BYTE PTR [rbx],al
 10033ed:	add    BYTE PTR [rax],al
 10033ef:	add    BYTE PTR [rax+0x10],dh
 10033f2:	add    DWORD PTR [rax],eax
 10033f4:	js     0x10033f6
 10033f6:	add    BYTE PTR [rax],al
 10033f8:	add    BYTE PTR [rax],al
 10033fa:	add    BYTE PTR [rax],al
 10033fc:	add    DWORD PTR [rax],eax
 10033fe:	add    BYTE PTR [rax],al
 1003400:	and    al,BYTE PTR [rip+0x21993]        # 0x1024d99
 1003406:	add    BYTE PTR [rax],al
 1003408:	rcl    BYTE PTR [rax],1
 100340a:	add    DWORD PTR [rax],eax
	...
 1003414:	add    eax,0xe0000000
 1003419:	adc    BYTE PTR [rcx],al
 100341b:	add    BYTE PTR [rax],bh
 100341d:	add    BYTE PTR [rax],al
 100341f:	add    BYTE PTR [rax],al
 1003421:	add    BYTE PTR [rax],al
 1003423:	add    BYTE PTR [rcx],al
 1003425:	add    BYTE PTR [rax],al
 1003427:	add    BYTE PTR [rdx],ah
 1003429:	add    eax,0x11993
 100342e:	add    BYTE PTR [rax],al
 1003430:	and    BYTE PTR [rcx],dl
 1003432:	add    DWORD PTR [rax],eax
	...
 100343c:	add    eax,DWORD PTR [rax]
 100343e:	add    BYTE PTR [rax],al
 1003440:	sub    BYTE PTR [rcx],dl
 1003442:	add    DWORD PTR [rax],eax
 1003444:	and    BYTE PTR [rax],al
 1003446:	add    BYTE PTR [rax],al
 1003448:	add    BYTE PTR [rax],al
 100344a:	add    BYTE PTR [rax],al
 100344c:	add    DWORD PTR [rax],eax
 100344e:	add    BYTE PTR [rax],al
 1003450:	and    al,BYTE PTR [rip+0x31993]        # 0x1034de9
 1003456:	add    BYTE PTR [rax],al
 1003458:	lods   al,BYTE PTR ds:[rsi]
 1003459:	adc    DWORD PTR [rcx],eax
	...
 1003463:	add    BYTE PTR [rip+0xffffffffc4000000],cl        # 0xffffffffc5003469
 1003469:	adc    DWORD PTR [rcx],eax
 100346b:	add    BYTE PTR [rax],dh
 100346d:	add    BYTE PTR [rax],al
 100346f:	add    BYTE PTR [rax],al
 1003471:	add    BYTE PTR [rax],al
 1003473:	add    BYTE PTR [rcx],al
	...
 100347d:	add    BYTE PTR [rax],al
 100347f:	add    BYTE PTR [rbp+0x3a],ah
 1003482:	pop    rsp
 1003483:	jae    0x10034f6
 1003485:	ins    BYTE PTR es:[rdi],dx
 1003486:	xor    DWORD PTR [rcx],esi
 1003488:	pop    rdi
 1003489:	ins    DWORD PTR es:[rdi],dx
 100348a:	(bad)  
 100348b:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1003492:	ins    BYTE PTR es:[rdi],dx
 1003493:	pop    rsp
 1003494:	outs   dx,BYTE PTR ds:[rsi]
 1003495:	je     0x10034fb
 1003497:	(bad)  
 1003498:	ins    DWORD PTR es:[rdi],dx
 1003499:	jae    0x10034f7
 100349b:	ins    DWORD PTR es:[rdi],dx
 100349c:	jae    0x100350f
 100349e:	ins    BYTE PTR es:[rdi],dx
 100349f:	pop    rsp
 10034a0:	data16 jne 0x100350f
 10034a3:	ins    BYTE PTR es:[rdi],dx
 10034a4:	je     0x100350b
 10034a6:	js     0x100351c
 10034a8:	pop    rsp
 10034a9:	jae    0x100351d
 10034ab:	movsxd ebx,DWORD PTR [rbx+rsi*2+0x65]
 10034af:	(bad)  
 10034b0:	jb     0x1003515
 10034b2:	push   0x6d6f635c
 10034b7:	ins    DWORD PTR es:[rdi],dx
 10034b8:	outs   dx,DWORD PTR ds:[rsi]
 10034b9:	outs   dx,BYTE PTR ds:[rsi]
 10034ba:	pop    rsp
 10034bb:	je     0x100352f
 10034bd:	(bad)  
 10034be:	movsxd esp,DWORD PTR [rbp+0x72]
 10034c1:	pop    rsp
 10034c2:	ins    BYTE PTR es:[rdi],dx
 10034c3:	imul   esp,DWORD PTR [rdx+0x5c],0x63617274
 10034ca:	gs jb  0x1003540
 10034cd:	movsxd esi,DWORD PTR gs:[rbp+0x74]
 10034d1:	imul   ebp,DWORD PTR [rsi+rbp*1+0x63],0x22007070
 10034d9:	add    eax,0x61993
 10034de:	add    BYTE PTR [rax],al
 10034e0:	rex.WR adc r8b,BYTE PTR [rcx]
	...
 10034eb:	add    BYTE PTR [rax],cl
 10034ed:	add    BYTE PTR [rax],al
 10034ef:	add    BYTE PTR [rdx+rdx*1+0x1],bh
 10034f3:	add    BYTE PTR [rax],ah
 10034f5:	add    BYTE PTR [rax],al
 10034f7:	add    BYTE PTR [rax],al
 10034f9:	add    BYTE PTR [rax],al
 10034fb:	add    BYTE PTR [rcx],al
 10034fd:	add    BYTE PTR [rax],al
 10034ff:	add    BYTE PTR [rbx+0x72],al
 1003502:	gs (bad) 
 1003504:	je     0x100356b
 1003506:	rex.WRB jne 0x100357d
 1003509:	gs js  0x100352c
 100350c:	data16 (bad) 
 100350e:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x0
 1003516:	add    BYTE PTR [rax],al
 1003518:	rex.XB jb 0x1003580
 100351b:	(bad)  
 100351c:	je     0x1003583
 100351e:	rex.WRB jne 0x1003595
 1003521:	gs js  0x1003544
 1003524:	rex.B ins BYTE PTR es:[rdi],dx
 1003526:	jb     0x100358d
 1003528:	(bad)  
 1003529:	fs jns 0x100354c
 100352c:	rex.RB js 0x1003598
 100352f:	jae    0x10035a5
 1003531:	jae    0x1003533
 1003533:	add    BYTE PTR [rax],al
 1003535:	add    BYTE PTR [rax],al
 1003537:	add    BYTE PTR [rax],al
 1003539:	(bad)  
 100353a:	add    BYTE PTR [rcx],al
 100353c:	add    BYTE PTR [rax],al
 100353e:	add    BYTE PTR [rax],al
 1003540:	add    al,0x16
 1003542:	add    BYTE PTR [rcx],al
 1003544:	add    BYTE PTR [rax],al
 1003546:	add    BYTE PTR [rax],al
 1003548:	or     BYTE PTR [rsi],dl
 100354a:	add    BYTE PTR [rcx],al
 100354c:	add    BYTE PTR [rax],al
 100354e:	add    BYTE PTR [rax],al
 1003550:	or     al,0x16
 1003552:	add    BYTE PTR [rcx],al
 1003554:	add    BYTE PTR [rax],al
 1003556:	add    BYTE PTR [rax],al
 1003558:	adc    BYTE PTR [rsi],dl
 100355a:	add    BYTE PTR [rcx],al
 100355c:	add    BYTE PTR [rax],al
 100355e:	add    BYTE PTR [rax],al
 1003560:	sbb    BYTE PTR [rsi],dl
 1003562:	add    BYTE PTR [rcx],al
 1003564:	add    BYTE PTR [rax],al
 1003566:	add    BYTE PTR [rax],al
 1003568:	xor    BYTE PTR [rsi],dl
 100356a:	add    BYTE PTR [rcx],al
 100356c:	add    BYTE PTR [rax],al
 100356e:	add    BYTE PTR [rax],al
 1003570:	rex.W (bad) 
 1003572:	add    BYTE PTR [rcx],al
 1003574:	add    BYTE PTR [rax],al
 1003576:	add    BYTE PTR [rax],al
 1003578:	push   rdx
 1003579:	push   rbx
 100357a:	rex.R push rbx
 100357c:	push   rbp
 100357d:	fwait
 100357e:	sub    DWORD PTR [rbp-0x14],r10d
 1003582:	and    eax,0x2e78bf40
 1003587:	test   DWORD PTR [rip+0x1b60316],0x66000000        # 0x2b638a7
 1003591:	rex.W outs dx,DWORD PTR fs:[rsi]
 1003594:	jae    0x100360a
 1003596:	cs jo  0x10035fd
 1003599:	(bad)  
	...
 10035fe:	add    BYTE PTR [rax],al
 1003600:	add    DWORD PTR [rax],eax
	...
 100360a:	add    BYTE PTR [rax],al
 100360c:	xor    BYTE PTR [rcx],dh
 100360e:	add    DWORD PTR [rax],eax
 1003610:	sub    BYTE PTR [rsi],dh
 1003612:	add    BYTE PTR [rax],al
 1003614:	add    BYTE PTR [rsi],dh
	...
 100362e:	add    BYTE PTR [rax],al
 1003630:	add    DWORD PTR [rax],eax
 1003632:	add    BYTE PTR [rax],al
 1003634:	rex
 1003635:	add    BYTE PTR ss:[rax],al
	...
 1003640:	push   rax
 1003641:	add    BYTE PTR ss:[rax],al
	...
 1003650:	xor    BYTE PTR [rcx],dh
 1003652:	add    DWORD PTR [rax],eax
	...
 100365c:	(bad)  
 100365d:	(bad)  
 100365e:	(bad)  
 100365f:	inc    DWORD PTR [rax]
 1003661:	add    BYTE PTR [rax],al
 1003663:	add    BYTE PTR [rax+0x0],al
 1003666:	add    BYTE PTR [rax],al
 1003668:	sub    BYTE PTR [rsi],dh
	...
 10036a6:	add    BYTE PTR [rax],al
 10036a8:	mov    rax,QWORD PTR [rcx+0x10]
 10036ac:	mov    r8d,edx
 10036af:	imul   r8,r8,0x44
 10036b3:	mov    eax,DWORD PTR [r8+rax*1]
 10036b7:	ret    
 10036b8:	int3   
 10036b9:	int3   
 10036ba:	int3   
 10036bb:	int3   
 10036bc:	int3   
 10036bd:	int3   
 10036be:	int3   
 10036bf:	int3   
 10036c0:	mov    eax,DWORD PTR [rcx]
 10036c2:	ret    
 10036c3:	int3   
 10036c4:	int3   
 10036c5:	int3   
 10036c6:	int3   
 10036c7:	int3   
 10036c8:	int3   
 10036c9:	int3   
 10036ca:	int3   
 10036cb:	int3   
 10036cc:	mov    rcx,QWORD PTR [rcx]
 10036cf:	rex.W jmp QWORD PTR [rip+0xffffffffffffdd1a]        # 0x10013f0
 10036d6:	int3   
 10036d7:	int3   
 10036d8:	int3   
 10036d9:	int3   
 10036da:	int3   
 10036db:	int3   
 10036dc:	mov    QWORD PTR [rsp+0x8],rbx
 10036e1:	push   rdi
 10036e2:	sub    rsp,0x50
 10036e6:	mov    rdi,QWORD PTR [rsp+0x58]
 10036eb:	xor    eax,eax
 10036ed:	mov    r10d,r9d
 10036f0:	mov    QWORD PTR [rcx+0x18],rdx
 10036f4:	mov    DWORD PTR [rcx+0x20],r8d
 10036f8:	mov    QWORD PTR [rcx+0x8],rdi
 10036fc:	mov    DWORD PTR [rcx],r10d
 10036ff:	mov    DWORD PTR [rcx+0x4],eax
 1003702:	mov    QWORD PTR [rcx+0x10],rax
 1003706:	cmp    DWORD PTR [rip+0x11c54],eax        # 0x1015360
 100370c:	mov    r11d,r8d
 100370f:	mov    r9,rdx
 1003712:	mov    rbx,rcx
 1003715:	je     0x100377a
 1003717:	mov    ecx,DWORD PTR [rip+0xfa83]        # 0x10131a0
 100371d:	mov    r8,QWORD PTR [rip+0xffbc]        # 0x10136e0
 1003724:	mov    rax,QWORD PTR [r8+0x10]
 1003728:	mov    edx,ecx
 100372a:	imul   rdx,rdx,0x44
 100372e:	cmp    DWORD PTR [rdx+rax*1],0x2
 1003732:	jl     0x100377a
 1003734:	lea    rax,[rip+0xffffffffffffdfa5]        # 0x10016e0
 100373b:	mov    DWORD PTR [rsp+0x3c],ecx
 100373f:	mov    DWORD PTR [rsp+0x28],r11d
 1003744:	mov    QWORD PTR [rsp+0x48],r8
 1003749:	mov    QWORD PTR [rsp+0x20],r9
 100374e:	lea    rcx,[rsp+0x30]
 1003753:	lea    rdx,[rip+0xffffffffffffdfe6]        # 0x1001740
 100375a:	mov    r9,rdi
 100375d:	mov    r8d,r10d
 1003760:	mov    QWORD PTR [rsp+0x30],rax
 1003765:	mov    DWORD PTR [rsp+0x38],0xec
 100376d:	mov    DWORD PTR [rsp+0x40],0x2
 1003775:	call   0x100aba0
 100377a:	mov    rax,rbx
 100377d:	mov    rbx,QWORD PTR [rsp+0x60]
 1003782:	add    rsp,0x50
 1003786:	pop    rdi
 1003787:	ret    
 1003788:	int3   
 1003789:	int3   
 100378a:	int3   
 100378b:	int3   
 100378c:	int3   
 100378d:	int3   
 100378e:	int3   
 100378f:	int3   
 1003790:	lea    rax,[rip+0xffffffffffffe059]        # 0x10017f0
 1003797:	mov    QWORD PTR [rcx],rax
 100379a:	ret    
 100379b:	int3   
 100379c:	int3   
 100379d:	int3   
 100379e:	int3   
 100379f:	int3   
 10037a0:	int3   
 10037a1:	int3   
 10037a2:	int3   
 10037a3:	int3   
 10037a4:	mov    rax,rsp
 10037a7:	sub    rsp,0x48
 10037ab:	and    QWORD PTR [rax-0x10],0x0
 10037b0:	mov    r9d,DWORD PTR [rcx+0x14]
 10037b4:	and    QWORD PTR [rax-0x18],0x0
 10037b9:	mov    DWORD PTR [rax-0x20],r8d
 10037bd:	mov    r8,QWORD PTR [rcx+0x8]
 10037c1:	mov    QWORD PTR [rax-0x28],rdx
 10037c5:	inc    r9d
 10037c8:	xor    edx,edx
 10037ca:	xor    ecx,ecx
 10037cc:	call   QWORD PTR [rip+0xffffffffffffdafe]        # 0x10012d0
 10037d2:	add    rsp,0x48
 10037d6:	ret    
 10037d7:	int3   
 10037d8:	int3   
 10037d9:	int3   
 10037da:	int3   
 10037db:	int3   
 10037dc:	int3   
 10037dd:	int3   
 10037de:	int3   
 10037df:	int3   
 10037e0:	sub    rsp,0x48
 10037e4:	mov    r9d,DWORD PTR [rcx+0x14]
 10037e8:	mov    r8,QWORD PTR [rcx+0x8]
 10037ec:	xor    eax,eax
 10037ee:	mov    QWORD PTR [rsp+0x38],rax
 10037f3:	mov    QWORD PTR [rsp+0x30],rax
 10037f8:	mov    DWORD PTR [rsp+0x28],eax
 10037fc:	inc    r9d
 10037ff:	xor    edx,edx
 1003801:	xor    ecx,ecx
 1003803:	mov    QWORD PTR [rsp+0x20],rax
 1003808:	call   QWORD PTR [rip+0xffffffffffffdac2]        # 0x10012d0
 100380e:	add    rsp,0x48
 1003812:	ret    
 1003813:	int3   
 1003814:	int3   
 1003815:	int3   
 1003816:	int3   
 1003817:	int3   
 1003818:	int3   
 1003819:	int3   
 100381a:	int3   
 100381b:	int3   
 100381c:	rex push rbx
 100381e:	sub    rsp,0x20
 1003822:	lea    rax,[rip+0xffffffffffffdfc7]        # 0x10017f0
 1003829:	mov    rbx,rcx
 100382c:	mov    QWORD PTR [rcx],rax
 100382f:	test   dl,0x1
 1003832:	je     0x1003839
 1003834:	call   0x10049c8
 1003839:	mov    rax,rbx
 100383c:	add    rsp,0x20
 1003840:	pop    rbx
 1003841:	ret    
 1003842:	int3   
 1003843:	int3   
 1003844:	int3   
 1003845:	int3   
 1003846:	int3   
 1003847:	int3   
 1003848:	mov    QWORD PTR [rsp+0x8],rcx
 100384d:	sub    rsp,0x18
 1003851:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 1003859:	lea    rax,[rip+0xffffffffffffe020]        # 0x1001880
 1003860:	mov    QWORD PTR [rcx],rax
 1003863:	lea    rax,[rip+0xffffffffffffdf86]        # 0x10017f0
 100386a:	mov    QWORD PTR [rcx],rax
 100386d:	add    rsp,0x18
 1003871:	ret    
 1003872:	int3   
 1003873:	int3   
 1003874:	int3   
 1003875:	int3   
 1003876:	int3   
 1003877:	int3   
 1003878:	sub    rsp,0x78
 100387c:	lea    rdx,[rip+0xffffffffffffdfad]        # 0x1001830
 1003883:	lea    rcx,[rsp+0x48]
 1003888:	mov    r9d,0x800700ce
 100388e:	mov    r8d,0x456
 1003894:	call   0x10036dc
 1003899:	lea    rcx,[rsp+0x20]
 100389e:	mov    r8d,0x28
 10038a4:	mov    rdx,rax
 10038a7:	call   0x1004cd6
 10038ac:	lea    rdx,[rip+0xda3d]        # 0x10112f0
 10038b3:	lea    rcx,[rsp+0x20]
 10038b8:	call   0x1004bf0
 10038bd:	int3   
 10038be:	int3   
 10038bf:	int3   
 10038c0:	int3   
 10038c1:	int3   
 10038c2:	int3   
 10038c3:	int3   
 10038c4:	ret    0x0
 10038c7:	int3   
 10038c8:	int3   
 10038c9:	int3   
 10038ca:	int3   
 10038cb:	int3   
 10038cc:	int3   
 10038cd:	int3   
 10038ce:	int3   
 10038cf:	int3   
 10038d0:	mov    QWORD PTR [rsp+0x8],rcx
 10038d5:	push   rbx
 10038d6:	sub    rsp,0x30
 10038da:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10038e3:	mov    rbx,rcx
 10038e6:	lea    rax,[rip+0xffffffffffffdf93]        # 0x1001880
 10038ed:	mov    QWORD PTR [rcx],rax
 10038f0:	lea    rax,[rip+0xffffffffffffdef9]        # 0x10017f0
 10038f7:	mov    QWORD PTR [rcx],rax
 10038fa:	test   dl,0x1
 10038fd:	je     0x1003904
 10038ff:	call   0x10049c8
 1003904:	mov    rax,rbx
 1003907:	add    rsp,0x30
 100390b:	pop    rbx
 100390c:	ret    
 100390d:	int3   
 100390e:	int3   
 100390f:	int3   
 1003910:	int3   
 1003911:	int3   
 1003912:	int3   
 1003913:	int3   
 1003914:	sub    rsp,0x28
 1003918:	cmp    DWORD PTR [rcx],0x0
 100391b:	je     0x1003923
 100391d:	call   QWORD PTR [rip+0xffffffffffffdc05]        # 0x1001528
 1003923:	add    rsp,0x28
 1003927:	ret    
 1003928:	int3   
 1003929:	int3   
 100392a:	int3   
 100392b:	int3   
 100392c:	int3   
 100392d:	int3   
 100392e:	int3   
 100392f:	int3   
 1003930:	mov    rax,rsp
 1003933:	push   rdi
 1003934:	push   r12
 1003936:	push   r13
 1003938:	push   r14
 100393a:	push   r15
 100393c:	sub    rsp,0x5e0
 1003943:	mov    QWORD PTR [rax-0x418],0xfffffffffffffffe
 100394e:	mov    QWORD PTR [rax+0x18],rbx
 1003952:	mov    QWORD PTR [rax+0x20],rsi
 1003956:	mov    rax,QWORD PTR [rip+0xf7f3]        # 0x1013150
 100395d:	xor    rax,rsp
 1003960:	mov    QWORD PTR [rsp+0x5d0],rax
 1003968:	mov    r12,rdx
 100396b:	mov    ebx,ecx
 100396d:	mov    DWORD PTR [rsp+0x84],ecx
 1003974:	mov    DWORD PTR [rsp+0x94],ecx
 100397b:	mov    QWORD PTR [rsp+0x140],rdx
 1003983:	call   QWORD PTR [rip+0xffffffffffffd9a7]        # 0x1001330
 1003989:	mov    rcx,rax
 100398c:	call   0x100e3ec
 1003991:	call   QWORD PTR [rip+0xffffffffffffd999]        # 0x1001330
 1003997:	mov    rcx,rax
 100399a:	xor    r9d,r9d
 100399d:	xor    r8d,r8d
 10039a0:	lea    r14d,[r9+0x1]
 10039a4:	mov    edx,r14d
 10039a7:	call   QWORD PTR [rip+0xffffffffffffd97b]        # 0x1001328
 10039ad:	lea    ecx,[r14+0x3]
 10039b1:	call   QWORD PTR [rip+0xffffffffffffd959]        # 0x1001310
 10039b7:	or     eax,0x4
 10039ba:	mov    ecx,eax
 10039bc:	call   QWORD PTR [rip+0xffffffffffffd94e]        # 0x1001310
 10039c2:	lea    rcx,[rip+0x109e7]        # 0x10143b0
 10039c9:	call   QWORD PTR [rip+0xffffffffffffd939]        # 0x1001308
 10039cf:	mov    DWORD PTR [rip+0x10a02],r14d        # 0x10143d8
 10039d6:	lea    rcx,[rip+0x34f3]        # 0x1006ed0
 10039dd:	call   QWORD PTR [rip+0xffffffffffffda0d]        # 0x10013f0
 10039e3:	mov    QWORD PTR [rsp+0x138],rax
 10039eb:	xor    esi,esi
 10039ed:	mov    QWORD PTR [rsp+0x88],rsi
 10039f5:	xor    edx,edx
 10039f7:	xor    ecx,ecx
 10039f9:	call   QWORD PTR [rip+0xffffffffffffdb21]        # 0x1001520
 10039ff:	mov    DWORD PTR [rsp+0x8c],eax
 1003a06:	mov    ecx,esi
 1003a08:	test   eax,eax
 1003a0a:	cmovns ecx,r14d
 1003a0e:	mov    DWORD PTR [rsp+0x88],ecx
 1003a15:	lea    rax,[rip+0xffffffffffffddd0]        # 0x10017ec
 1003a1c:	mov    QWORD PTR [rsp+0x98],rax
 1003a24:	cmp    ebx,0xc
 1003a27:	jne    0x10044e4
 1003a2d:	mov    rax,QWORD PTR [r12+0x8]
 1003a32:	mov    QWORD PTR [rsp+0x120],rax
 1003a3a:	mov    QWORD PTR [rsp+0x98],rax
 1003a42:	mov    rax,QWORD PTR [r12+0x10]
 1003a47:	mov    QWORD PTR [rsp+0xe8],rax
 1003a4f:	mov    rax,QWORD PTR [r12+0x18]
 1003a54:	mov    QWORD PTR [rsp+0x128],rax
 1003a5c:	mov    rcx,QWORD PTR [r12+0x20]
 1003a61:	call   QWORD PTR [rip+0xffffffffffffd981]        # 0x10013e8
 1003a67:	mov    DWORD PTR [rsp+0xb0],eax
 1003a6e:	mov    rcx,QWORD PTR [r12+0x28]
 1003a73:	call   QWORD PTR [rip+0xffffffffffffd96f]        # 0x10013e8
 1003a79:	mov    DWORD PTR [rsp+0x90],eax
 1003a80:	mov    rcx,QWORD PTR [r12+0x30]
 1003a85:	call   QWORD PTR [rip+0xffffffffffffd95d]        # 0x10013e8
 1003a8b:	mov    DWORD PTR [rsp+0xa0],eax
 1003a92:	mov    rcx,QWORD PTR [r12+0x38]
 1003a97:	movzx  edx,WORD PTR [rcx]
 1003a9a:	cmp    edx,0x48
 1003a9d:	je     0x1003c0b
 1003aa3:	cmp    edx,0x4d
 1003aa6:	je     0x1003bff
 1003aac:	cmp    edx,0x53
 1003aaf:	je     0x1003bf8
 1003ab5:	mov    r9,QWORD PTR [rip+0xfc24]        # 0x10136e0
 1003abc:	cmp    DWORD PTR [r9],esi
 1003abf:	je     0x1003bab
 1003ac5:	mov    eax,DWORD PTR [rip+0xf755]        # 0x1013220
 1003acb:	or     edi,0xffffffff
 1003ace:	cmp    eax,edi
 1003ad0:	jne    0x1003afd
 1003ad2:	lea    r8,[rip+0xf747]        # 0x1013220
 1003ad9:	mov    rdx,QWORD PTR [rip+0xf748]        # 0x1013228
 1003ae0:	mov    rcx,r9
 1003ae3:	call   0x1009c30
 1003ae8:	mov    eax,DWORD PTR [rip+0xf732]        # 0x1013220
 1003aee:	cmp    eax,edi
 1003af0:	je     0x1003bab
 1003af6:	mov    r9,QWORD PTR [rip+0xfbe3]        # 0x10136e0
 1003afd:	mov    ecx,eax
 1003aff:	imul   rcx,rcx,0x44
 1003b03:	mov    rax,QWORD PTR [r9+0x10]
 1003b07:	mov    r15d,0x2
 1003b0d:	cmp    DWORD PTR [rcx+rax*1],r15d
 1003b11:	jl     0x1003bab
 1003b17:	mov    edx,r14d
 1003b1a:	mov    rcx,r9
 1003b1d:	call   0x1009f00
 1003b22:	cmp    eax,r15d
 1003b25:	jb     0x1003bab
 1003b2b:	xor    edx,edx
 1003b2d:	mov    rcx,QWORD PTR [rip+0xfbac]        # 0x10136e0
 1003b34:	call   0x1009f00
 1003b39:	test   eax,eax
 1003b3b:	je     0x1003bab
 1003b3d:	lea    r14,[rip+0xffffffffffffddfc]        # 0x1001940
 1003b44:	mov    QWORD PTR [rsp+0x168],r14
 1003b4c:	mov    DWORD PTR [rsp+0x170],0x6f
 1003b57:	mov    eax,DWORD PTR [rip+0xf6c3]        # 0x1013220
 1003b5d:	mov    DWORD PTR [rsp+0x174],eax
 1003b64:	mov    DWORD PTR [rsp+0x178],r15d
 1003b6c:	mov    rax,QWORD PTR [rip+0xfb6d]        # 0x10136e0
 1003b73:	mov    QWORD PTR [rsp+0x180],rax
 1003b7b:	mov    QWORD PTR [rsp+0x28],r14
 1003b80:	mov    DWORD PTR [rsp+0x20],0x6f
 1003b88:	mov    r9d,0x80043649
 1003b8e:	lea    r8,[rip+0xffffffffffffdd23]        # 0x10018b8
 1003b95:	lea    rdx,[rip+0xffffffffffffdd34]        # 0x10018d0
 1003b9c:	lea    rcx,[rsp+0x168]
 1003ba4:	call   0x100aba0
 1003ba9:	jmp    0x1003bb2
 1003bab:	lea    r14,[rip+0xffffffffffffdd8e]        # 0x1001940
 1003bb2:	mov    r9d,0x80043649
 1003bb8:	mov    r8d,0x6f
 1003bbe:	mov    rdx,r14
 1003bc1:	lea    rcx,[rsp+0xb8]
 1003bc9:	call   0x10036dc
 1003bce:	lea    rcx,[rsp+0x250]
 1003bd6:	mov    rdx,rax
 1003bd9:	mov    r8d,0x28
 1003bdf:	call   0x1004cd6
 1003be4:	lea    rdx,[rip+0xd705]        # 0x10112f0
 1003beb:	lea    rcx,[rsp+0x250]
 1003bf3:	call   0x1004bf0
 1003bf8:	mov    DWORD PTR [rsp+0x40],r14d
 1003bfd:	jmp    0x1003c03
 1003bff:	mov    DWORD PTR [rsp+0x40],esi
 1003c03:	mov    r15d,0x2
 1003c09:	jmp    0x1003c16
 1003c0b:	mov    r15d,0x2
 1003c11:	mov    DWORD PTR [rsp+0x40],r15d
 1003c16:	mov    rcx,QWORD PTR [r12+0x40]
 1003c1b:	call   QWORD PTR [rip+0xffffffffffffd7c7]        # 0x10013e8
 1003c21:	mov    DWORD PTR [rsp+0x48],eax
 1003c25:	mov    r13,QWORD PTR [r12+0x48]
 1003c2a:	mov    QWORD PTR [rsp+0x78],r13
 1003c2f:	mov    rdi,QWORD PTR [r12+0x50]
 1003c34:	mov    QWORD PTR [rsp+0xe0],rdi
 1003c3c:	mov    rax,QWORD PTR [r12+0x58]
 1003c41:	mov    QWORD PTR [rsp+0xa8],rax
 1003c49:	call   0x10051e0
 1003c4e:	call   0x100cd10
 1003c53:	mov    r9d,0x81
 1003c59:	lea    r14,[rip+0xffffffffffffdce0]        # 0x1001940
 1003c60:	mov    r8,r14
 1003c63:	mov    rdx,QWORD PTR [rip+0xfa76]        # 0x10136e0
 1003c6a:	lea    rcx,[rsp+0x50]
 1003c6f:	call   0x100aac0
 1003c74:	lea    r9,[rip+0xffffffffffffdd0d]        # 0x1001988
 1003c7b:	lea    r8,[rip+0xf74e]        # 0x10133d0
 1003c82:	mov    edx,0x5
 1003c87:	lea    rcx,[rsp+0x50]
 1003c8c:	call   0x100aae0
 1003c91:	call   0x100e3f8
 1003c96:	cmp    DWORD PTR [rsp+0x48],esi
 1003c9a:	je     0x1004047
 1003ca0:	lea    rax,[rip+0xffffffffffffdb49]        # 0x10017f0
 1003ca7:	mov    QWORD PTR [rsp+0x50],rax
 1003cac:	mov    rcx,r13
 1003caf:	call   QWORD PTR [rip+0xffffffffffffd62b]        # 0x10012e0
 1003cb5:	mov    ebx,eax
 1003cb7:	mov    DWORD PTR [rsp+0x64],eax
 1003cbb:	mov    DWORD PTR [rsp+0x60],eax
 1003cbf:	mov    QWORD PTR [rsp+0x58],r13
 1003cc4:	lea    rax,[rip+0xffffffffffffdbb5]        # 0x1001880
 1003ccb:	mov    QWORD PTR [rsp+0x50],rax
 1003cd0:	lea    rax,[rip+0xffffffffffffdb19]        # 0x10017f0
 1003cd7:	mov    QWORD PTR [rsp+0xf0],rax
 1003cdf:	mov    rcx,rdi
 1003ce2:	call   QWORD PTR [rip+0xffffffffffffd5f8]        # 0x10012e0
 1003ce8:	mov    DWORD PTR [rsp+0x104],eax
 1003cef:	mov    DWORD PTR [rsp+0x100],eax
 1003cf6:	mov    QWORD PTR [rsp+0xf8],rdi
 1003cfe:	lea    rax,[rip+0xffffffffffffdb7b]        # 0x1001880
 1003d05:	mov    QWORD PTR [rsp+0xf0],rax
 1003d0d:	lea    rax,[rip+0xffffffffffffdadc]        # 0x10017f0
 1003d14:	mov    QWORD PTR [rsp+0x108],rax
 1003d1c:	mov    rdi,QWORD PTR [rsp+0xa8]
 1003d24:	mov    rcx,rdi
 1003d27:	call   QWORD PTR [rip+0xffffffffffffd5b3]        # 0x10012e0
 1003d2d:	mov    DWORD PTR [rsp+0x11c],eax
 1003d34:	mov    DWORD PTR [rsp+0x118],eax
 1003d3b:	mov    QWORD PTR [rsp+0x110],rdi
 1003d43:	lea    rax,[rip+0xffffffffffffdb36]        # 0x1001880
 1003d4a:	mov    QWORD PTR [rsp+0x108],rax
 1003d52:	lea    edi,[rbx+0x1]
 1003d55:	mov    QWORD PTR [rsp+0x38],rsi
 1003d5a:	mov    QWORD PTR [rsp+0x30],rsi
 1003d5f:	mov    DWORD PTR [rsp+0x28],esi
 1003d63:	mov    QWORD PTR [rsp+0x20],rsi
 1003d68:	mov    r9d,edi
 1003d6b:	mov    r8,r13
 1003d6e:	xor    edx,edx
 1003d70:	xor    ecx,ecx
 1003d72:	call   QWORD PTR [rip+0xffffffffffffd558]        # 0x10012d0
 1003d78:	lea    ebx,[rax+0x1]
 1003d7b:	mov    QWORD PTR [rsp+0x130],rsi
 1003d83:	mov    ecx,ebx
 1003d85:	call   0x1004a94
 1003d8a:	mov    r13,rax
 1003d8d:	mov    QWORD PTR [rsp+0x130],rax
 1003d95:	mov    QWORD PTR [rsp+0x38],rsi
 1003d9a:	mov    QWORD PTR [rsp+0x30],rsi
 1003d9f:	mov    DWORD PTR [rsp+0x28],ebx
 1003da3:	mov    QWORD PTR [rsp+0x20],rax
 1003da8:	mov    r9d,edi
 1003dab:	mov    r8,QWORD PTR [rsp+0x78]
 1003db0:	xor    edx,edx
 1003db2:	xor    ecx,ecx
 1003db4:	call   QWORD PTR [rip+0xffffffffffffd516]        # 0x10012d0
 1003dba:	mov    edi,DWORD PTR [rsp+0x11c]
 1003dc1:	mov    QWORD PTR [rsp+0x38],rsi
 1003dc6:	mov    QWORD PTR [rsp+0x30],rsi
 1003dcb:	mov    DWORD PTR [rsp+0x28],esi
 1003dcf:	mov    QWORD PTR [rsp+0x20],rsi
 1003dd4:	lea    r9d,[rdi+0x1]
 1003dd8:	mov    r8,QWORD PTR [rsp+0xa8]
 1003de0:	xor    edx,edx
 1003de2:	xor    ecx,ecx
 1003de4:	call   QWORD PTR [rip+0xffffffffffffd4e6]        # 0x10012d0
 1003dea:	lea    ebx,[rax+0x1]
 1003ded:	mov    QWORD PTR [rsp+0x68],rsi
 1003df2:	mov    ecx,ebx
 1003df4:	call   0x1004a94
 1003df9:	mov    QWORD PTR [rsp+0x68],rax
 1003dfe:	mov    QWORD PTR [rsp+0x38],rsi
 1003e03:	mov    QWORD PTR [rsp+0x30],rsi
 1003e08:	mov    DWORD PTR [rsp+0x28],ebx
 1003e0c:	mov    QWORD PTR [rsp+0x20],rax
 1003e11:	lea    r9d,[rdi+0x1]
 1003e15:	mov    r8,QWORD PTR [rsp+0xa8]
 1003e1d:	xor    edx,edx
 1003e1f:	xor    ecx,ecx
 1003e21:	call   QWORD PTR [rip+0xffffffffffffd4a9]        # 0x10012d0
 1003e27:	mov    rbx,QWORD PTR [rsp+0xe0]
 1003e2f:	mov    rdx,rbx
 1003e32:	mov    rcx,QWORD PTR [rsp+0x78]
 1003e37:	call   QWORD PTR [rip+0xffffffffffffd4ab]        # 0x10012e8
 1003e3d:	test   eax,eax
 1003e3f:	jne    0x1003e71
 1003e41:	mov    DWORD PTR [rsp+0x30],esi
 1003e45:	mov    eax,DWORD PTR [rsp+0x48]
 1003e49:	mov    DWORD PTR [rsp+0x28],eax
 1003e4d:	mov    rbx,QWORD PTR [rsp+0x68]
 1003e52:	mov    QWORD PTR [rsp+0x20],rbx
 1003e57:	mov    edi,0x1
 1003e5c:	mov    r9d,edi
 1003e5f:	mov    r8,r13
 1003e62:	mov    edx,edi
 1003e64:	mov    rcx,r13
 1003e67:	call   0x100cd60
 1003e6c:	jmp    0x1003f1d
 1003e71:	mov    edi,DWORD PTR [rsp+0x104]
 1003e78:	mov    QWORD PTR [rsp+0x38],rsi
 1003e7d:	mov    QWORD PTR [rsp+0x30],rsi
 1003e82:	mov    DWORD PTR [rsp+0x28],esi
 1003e86:	mov    QWORD PTR [rsp+0x20],rsi
 1003e8b:	lea    r9d,[rdi+0x1]
 1003e8f:	mov    r8,rbx
 1003e92:	xor    edx,edx
 1003e94:	xor    ecx,ecx
 1003e96:	call   QWORD PTR [rip+0xffffffffffffd434]        # 0x10012d0
 1003e9c:	lea    ebx,[rax+0x1]
 1003e9f:	mov    QWORD PTR [rsp+0x78],rsi
 1003ea4:	lea    ecx,[rbx+0x1]
 1003ea7:	call   0x1004a94
 1003eac:	mov    QWORD PTR [rsp+0x78],rax
 1003eb1:	mov    QWORD PTR [rsp+0x38],rsi
 1003eb6:	mov    QWORD PTR [rsp+0x30],rsi
 1003ebb:	mov    DWORD PTR [rsp+0x28],ebx
 1003ebf:	mov    QWORD PTR [rsp+0x20],rax
 1003ec4:	lea    r9d,[rdi+0x1]
 1003ec8:	mov    r8,QWORD PTR [rsp+0xe0]
 1003ed0:	xor    edx,edx
 1003ed2:	xor    ecx,ecx
 1003ed4:	call   QWORD PTR [rip+0xffffffffffffd3f6]        # 0x10012d0
 1003eda:	mov    DWORD PTR [rsp+0x30],esi
 1003ede:	mov    eax,DWORD PTR [rsp+0x48]
 1003ee2:	mov    DWORD PTR [rsp+0x28],eax
 1003ee6:	mov    rax,QWORD PTR [rsp+0x68]
 1003eeb:	mov    QWORD PTR [rsp+0x20],rax
 1003ef0:	mov    eax,0x1
 1003ef5:	mov    r9d,eax
 1003ef8:	mov    rbx,QWORD PTR [rsp+0x78]
 1003efd:	mov    r8,rbx
 1003f00:	mov    edx,eax
 1003f02:	mov    rcx,r13
 1003f05:	call   0x100cd60
 1003f0a:	nop
 1003f0b:	test   rbx,rbx
 1003f0e:	je     0x1003f18
 1003f10:	mov    rcx,rbx
 1003f13:	call   0x10049c8
 1003f18:	mov    rbx,QWORD PTR [rsp+0x68]
 1003f1d:	call   0x1006dd0
 1003f22:	or     edi,0xffffffff
 1003f25:	cmp    DWORD PTR [rip+0x11435],esi        # 0x1015360
 1003f2b:	je     0x1003fea
 1003f31:	mov    eax,DWORD PTR [rip+0xf279]        # 0x10131b0
 1003f37:	cmp    eax,edi
 1003f39:	jne    0x1003f63
 1003f3b:	lea    r8,[rip+0xf26e]        # 0x10131b0
 1003f42:	mov    rdx,QWORD PTR [rip+0xf26f]        # 0x10131b8
 1003f49:	mov    rcx,QWORD PTR [rip+0xf790]        # 0x10136e0
 1003f50:	call   0x1009c30
 1003f55:	mov    eax,DWORD PTR [rip+0xf255]        # 0x10131b0
 1003f5b:	cmp    eax,edi
 1003f5d:	je     0x1003fea
 1003f63:	mov    edx,eax
 1003f65:	imul   rdx,rdx,0x44
 1003f69:	mov    rcx,QWORD PTR [rip+0xf770]        # 0x10136e0
 1003f70:	mov    rax,QWORD PTR [rcx+0x10]
 1003f74:	cmp    DWORD PTR [rdx+rax*1],0x1
 1003f78:	jl     0x1003fea
 1003f7a:	mov    edx,0x1
 1003f7f:	call   0x1009f00
 1003f84:	cmp    eax,0x1
 1003f87:	jb     0x1003fea
 1003f89:	xor    edx,edx
 1003f8b:	mov    rcx,QWORD PTR [rip+0xf74e]        # 0x10136e0
 1003f92:	call   0x1009f00
 1003f97:	test   eax,eax
 1003f99:	je     0x1003fea
 1003f9b:	mov    QWORD PTR [rsp+0x188],r14
 1003fa3:	mov    DWORD PTR [rsp+0x190],0xa3
 1003fae:	mov    eax,DWORD PTR [rip+0xf1fc]        # 0x10131b0
 1003fb4:	mov    DWORD PTR [rsp+0x194],eax
 1003fbb:	mov    DWORD PTR [rsp+0x198],0x1
 1003fc6:	mov    rax,QWORD PTR [rip+0xf713]        # 0x10136e0
 1003fcd:	mov    QWORD PTR [rsp+0x1a0],rax
 1003fd5:	lea    rdx,[rip+0xffffffffffffd9c4]        # 0x10019a0
 1003fdc:	lea    rcx,[rsp+0x188]
 1003fe4:	call   0x100aba0
 1003fe9:	nop
 1003fea:	test   rbx,rbx
 1003fed:	je     0x1003ff8
 1003fef:	mov    rcx,rbx
 1003ff2:	call   0x10049c8
 1003ff7:	nop
 1003ff8:	test   r13,r13
 1003ffb:	je     0x1004006
 1003ffd:	mov    rcx,r13
 1004000:	call   0x10049c8
 1004005:	nop
 1004006:	lea    rax,[rip+0xffffffffffffd873]        # 0x1001880
 100400d:	mov    QWORD PTR [rsp+0x108],rax
 1004015:	lea    rcx,[rip+0xffffffffffffd7d4]        # 0x10017f0
 100401c:	mov    QWORD PTR [rsp+0x108],rcx
 1004024:	mov    QWORD PTR [rsp+0xf0],rax
 100402c:	mov    QWORD PTR [rsp+0xf0],rcx
 1004034:	mov    QWORD PTR [rsp+0x50],rax
 1004039:	mov    QWORD PTR [rsp+0x50],rcx
 100403e:	mov    ebx,DWORD PTR [rsp+0x84]
 1004045:	jmp    0x100404a
 1004047:	or     edi,0xffffffff
 100404a:	mov    r13d,esi
 100404d:	mov    DWORD PTR [rsp+0x80],esi
 1004054:	cmp    r13d,ebx
 1004057:	jge    0x10040ad
 1004059:	mov    r9d,0xa9
 100405f:	mov    r8,r14
 1004062:	mov    rdx,QWORD PTR [rip+0xf677]        # 0x10136e0
 1004069:	lea    rcx,[rsp+0x50]
 100406e:	call   0x100aac0
 1004073:	movsxd r11,r13d
 1004076:	mov    rax,QWORD PTR [r12+r11*8]
 100407a:	mov    QWORD PTR [rsp+0x28],rax
 100407f:	mov    DWORD PTR [rsp+0x20],ebx
 1004083:	lea    r9,[rip+0xffffffffffffd95e]        # 0x10019e8
 100408a:	lea    r8,[rip+0xf33f]        # 0x10133d0
 1004091:	mov    edx,0x5
 1004096:	lea    rcx,[rsp+0x50]
 100409b:	call   0x100aae0
 10040a0:	inc    r13d
 10040a3:	mov    DWORD PTR [rsp+0x80],r13d
 10040ab:	jmp    0x1004054
 10040ad:	mov    DWORD PTR [rsp+0xa4],0x105
 10040b8:	or     rax,0xffffffffffffffff
 10040bc:	mov    rcx,QWORD PTR [rsp+0xe8]
 10040c4:	inc    rax
 10040c7:	cmp    WORD PTR [rcx+rax*2],si
 10040cb:	jne    0x10040c4
 10040cd:	add    eax,eax
 10040cf:	mov    edx,0x4c
 10040d4:	cmp    eax,edx
 10040d6:	cmova  eax,edx
 10040d9:	mov    ebx,eax
 10040db:	mov    r8d,eax
 10040de:	mov    rdx,rcx
 10040e1:	lea    rcx,[rsp+0x2a0]
 10040e9:	call   0x1004cd6
 10040ee:	shr    rbx,1
 10040f1:	mov    WORD PTR [rsp+rbx*2+0x2a0],si
 10040f9:	mov    DWORD PTR [rsp+0x2f0],esi
 1004100:	lea    r9,[rsp+0xa4]
 1004108:	lea    r8,[rsp+0x3c0]
 1004110:	mov    edx,r15d
 1004113:	lea    rcx,[rsp+0x2a0]
 100411b:	call   0x1006dbb
 1004120:	test   eax,eax
 1004122:	jne    0x1004250
 1004128:	mov    r9,QWORD PTR [rip+0xf5b1]        # 0x10136e0
 100412f:	cmp    DWORD PTR [r9],esi
 1004132:	je     0x100420a
 1004138:	mov    eax,DWORD PTR [rip+0xf0e2]        # 0x1013220
 100413e:	cmp    eax,edi
 1004140:	jne    0x100416d
 1004142:	lea    r8,[rip+0xf0d7]        # 0x1013220
 1004149:	mov    rdx,QWORD PTR [rip+0xf0d8]        # 0x1013228
 1004150:	mov    rcx,r9
 1004153:	call   0x1009c30
 1004158:	mov    eax,DWORD PTR [rip+0xf0c2]        # 0x1013220
 100415e:	cmp    eax,edi
 1004160:	je     0x100420a
 1004166:	mov    r9,QWORD PTR [rip+0xf573]        # 0x10136e0
 100416d:	mov    ecx,eax
 100416f:	imul   rcx,rcx,0x44
 1004173:	mov    rax,QWORD PTR [r9+0x10]
 1004177:	cmp    DWORD PTR [rcx+rax*1],r15d
 100417b:	jl     0x100420a
 1004181:	mov    edx,0x1
 1004186:	mov    rcx,r9
 1004189:	call   0x1009f00
 100418e:	cmp    eax,r15d
 1004191:	jb     0x100420a
 1004193:	xor    edx,edx
 1004195:	mov    rcx,QWORD PTR [rip+0xf544]        # 0x10136e0
 100419c:	call   0x1009f00
 10041a1:	test   eax,eax
 10041a3:	je     0x100420a
 10041a5:	mov    QWORD PTR [rsp+0x1c8],r14
 10041ad:	mov    DWORD PTR [rsp+0x1d0],0xc2
 10041b8:	mov    eax,DWORD PTR [rip+0xf062]        # 0x1013220
 10041be:	mov    DWORD PTR [rsp+0x1d4],eax
 10041c5:	mov    DWORD PTR [rsp+0x1d8],r15d
 10041cd:	mov    rax,QWORD PTR [rip+0xf50c]        # 0x10136e0
 10041d4:	mov    QWORD PTR [rsp+0x1e0],rax
 10041dc:	mov    QWORD PTR [rsp+0x28],r14
 10041e1:	mov    DWORD PTR [rsp+0x20],0xc2
 10041e9:	mov    r9d,0x80070057
 10041ef:	lea    r8,[rip+0xffffffffffffd6c2]        # 0x10018b8
 10041f6:	lea    rdx,[rip+0xffffffffffffd6d3]        # 0x10018d0
 10041fd:	lea    rcx,[rsp+0x1c8]
 1004205:	call   0x100aba0
 100420a:	mov    r9d,0x80070057
 1004210:	mov    r8d,0xc2
 1004216:	mov    rdx,r14
 1004219:	lea    rcx,[rsp+0xb8]
 1004221:	call   0x10036dc
 1004226:	lea    rcx,[rsp+0x278]
 100422e:	mov    rdx,rax
 1004231:	mov    r8d,0x28
 1004237:	call   0x1004cd6
 100423c:	lea    rdx,[rip+0xd0ad]        # 0x10112f0
 1004243:	lea    rcx,[rsp+0x278]
 100424b:	call   0x1004bf0
 1004250:	mov    QWORD PTR [rsp+0x20],rsi
 1004255:	mov    r9d,0x20019
 100425b:	lea    r8,[rsp+0x3c0]
 1004263:	mov    rdx,0xffffffff80000002
 100426a:	lea    rcx,[rsp+0x300]
 1004272:	call   0x1007990
 1004277:	nop
 1004278:	mov    DWORD PTR [rsp+0xb4],esi
 100427f:	call   QWORD PTR [rip+0xffffffffffffd093]        # 0x1001318
 1004285:	test   eax,eax
 1004287:	jne    0x10042a5
 1004289:	lea    r8,[rsp+0xb4]
 1004291:	lea    rdx,[rip+0xffffffffffffd768]        # 0x1001a00
 1004298:	lea    rcx,[rsp+0x300]
 10042a0:	call   0x1007ca0
 10042a5:	mov    QWORD PTR [rsp+0x70],rsi
 10042aa:	lea    rax,[rsp+0x70]
 10042af:	mov    QWORD PTR [rsp+0x28],rax
 10042b4:	mov    eax,DWORD PTR [rsp+0x40]
 10042b8:	mov    DWORD PTR [rsp+0x20],eax
 10042bc:	mov    r9,QWORD PTR [rsp+0x128]
 10042c4:	mov    r8,QWORD PTR [rsp+0xe8]
 10042cc:	mov    edx,DWORD PTR [rsp+0x90]
 10042d3:	mov    ecx,DWORD PTR [rsp+0xb0]
 10042da:	call   0x100e3e0
 10042df:	mov    ebx,eax
 10042e1:	mov    DWORD PTR [rsp+0x44],eax
 10042e5:	test   eax,eax
 10042e7:	jns    0x1004410
 10042ed:	mov    r9,QWORD PTR [rip+0xf3ec]        # 0x10136e0
 10042f4:	cmp    DWORD PTR [r9],esi
 10042f7:	je     0x10043cc
 10042fd:	mov    eax,DWORD PTR [rip+0xef1d]        # 0x1013220
 1004303:	cmp    eax,edi
 1004305:	jne    0x1004332
 1004307:	lea    r8,[rip+0xef12]        # 0x1013220
 100430e:	mov    rdx,QWORD PTR [rip+0xef13]        # 0x1013228
 1004315:	mov    rcx,r9
 1004318:	call   0x1009c30
 100431d:	mov    eax,DWORD PTR [rip+0xeefd]        # 0x1013220
 1004323:	cmp    eax,edi
 1004325:	je     0x10043cc
 100432b:	mov    r9,QWORD PTR [rip+0xf3ae]        # 0x10136e0
 1004332:	mov    ecx,eax
 1004334:	imul   rcx,rcx,0x44
 1004338:	mov    rax,QWORD PTR [r9+0x10]
 100433c:	cmp    DWORD PTR [rcx+rax*1],r15d
 1004340:	jl     0x10043cc
 1004346:	mov    edx,0x1
 100434b:	mov    rcx,r9
 100434e:	call   0x1009f00
 1004353:	cmp    eax,r15d
 1004356:	jb     0x10043cc
 1004358:	xor    edx,edx
 100435a:	mov    rcx,QWORD PTR [rip+0xf37f]        # 0x10136e0
 1004361:	call   0x1009f00
 1004366:	test   eax,eax
 1004368:	je     0x10043cc
 100436a:	mov    QWORD PTR [rsp+0x148],r14
 1004372:	mov    DWORD PTR [rsp+0x150],0xdd
 100437d:	mov    eax,DWORD PTR [rip+0xee9d]        # 0x1013220
 1004383:	mov    DWORD PTR [rsp+0x154],eax
 100438a:	mov    DWORD PTR [rsp+0x158],r15d
 1004392:	mov    rax,QWORD PTR [rip+0xf347]        # 0x10136e0
 1004399:	mov    QWORD PTR [rsp+0x160],rax
 10043a1:	mov    QWORD PTR [rsp+0x28],r14
 10043a6:	mov    DWORD PTR [rsp+0x20],0xdd
 10043ae:	mov    r9d,ebx
 10043b1:	lea    r8,[rip+0xffffffffffffd500]        # 0x10018b8
 10043b8:	lea    rdx,[rip+0xffffffffffffd511]        # 0x10018d0
 10043bf:	lea    rcx,[rsp+0x148]
 10043c7:	call   0x100aba0
 10043cc:	mov    r9d,ebx
 10043cf:	mov    r8d,0xdd
 10043d5:	mov    rdx,r14
 10043d8:	lea    rcx,[rsp+0xb8]
 10043e0:	call   0x10036dc
 10043e5:	lea    rcx,[rsp+0x200]
 10043ed:	mov    rdx,rax
 10043f0:	mov    r8d,0x28
 10043f6:	call   0x1004cd6
 10043fb:	lea    rdx,[rip+0xceee]        # 0x10112f0
 1004402:	lea    rcx,[rsp+0x200]
 100440a:	call   0x1004bf0
 100440f:	nop
 1004410:	mov    rcx,QWORD PTR [rsp+0x70]
 1004415:	mov    rax,QWORD PTR [rcx]
 1004418:	mov    r8d,DWORD PTR [rsp+0xa0]
 1004420:	mov    r15,QWORD PTR [rsp+0x120]
 1004428:	mov    rdx,r15
 100442b:	call   QWORD PTR [rax+0x8]
 100442e:	nop
 100442f:	mov    edi,DWORD PTR [rsp+0x84]
 1004436:	jmp    0x1004464
 1004438:	xor    esi,esi
 100443a:	lea    r14,[rip+0xffffffffffffd4ff]        # 0x1001940
 1004441:	mov    r15,QWORD PTR [rsp+0x98]
 1004449:	mov    ebx,DWORD PTR [rsp+0x44]
 100444d:	mov    r13d,DWORD PTR [rsp+0x80]
 1004455:	mov    edi,DWORD PTR [rsp+0x94]
 100445c:	mov    r12,QWORD PTR [rsp+0x140]
 1004464:	test   ebx,ebx
 1004466:	jns    0x1004473
 1004468:	mov    rcx,QWORD PTR [rsp+0x70]
 100446d:	mov    rax,QWORD PTR [rcx]
 1004470:	call   QWORD PTR [rax+0x10]
 1004473:	mov    r9d,0xec
 1004479:	mov    r8,r14
 100447c:	mov    rdx,QWORD PTR [rip+0xf25d]        # 0x10136e0
 1004483:	lea    rcx,[rsp+0x50]
 1004488:	call   0x100aac0
 100448d:	movsxd r11,r13d
 1004490:	mov    rax,QWORD PTR [r12+r11*8]
 1004494:	mov    QWORD PTR [rsp+0x28],rax
 1004499:	mov    DWORD PTR [rsp+0x20],edi
 100449d:	lea    r9,[rip+0xffffffffffffd594]        # 0x1001a38
 10044a4:	lea    r8,[rip+0xef25]        # 0x10133d0
 10044ab:	mov    edx,0x5
 10044b0:	lea    rcx,[rsp+0x50]
 10044b5:	call   0x100aae0
 10044ba:	mov    rcx,QWORD PTR [rsp+0x70]
 10044bf:	mov    rax,QWORD PTR [rcx]
 10044c2:	call   QWORD PTR [rax+0x18]
 10044c5:	mov    rcx,QWORD PTR [rsp+0x70]
 10044ca:	mov    rax,QWORD PTR [rcx]
 10044cd:	call   QWORD PTR [rax+0x20]
 10044d0:	nop
 10044d1:	lea    rcx,[rsp+0x300]
 10044d9:	call   0x1007ad0
 10044de:	nop
 10044df:	jmp    0x1004639
 10044e4:	mov    r9,QWORD PTR [rip+0xf1f5]        # 0x10136e0
 10044eb:	cmp    DWORD PTR [r9],esi
 10044ee:	je     0x10045da
 10044f4:	mov    eax,DWORD PTR [rip+0xed26]        # 0x1013220
 10044fa:	or     edi,0xffffffff
 10044fd:	cmp    eax,edi
 10044ff:	jne    0x100452c
 1004501:	lea    r8,[rip+0xed18]        # 0x1013220
 1004508:	mov    rdx,QWORD PTR [rip+0xed19]        # 0x1013228
 100450f:	mov    rcx,r9
 1004512:	call   0x1009c30
 1004517:	mov    eax,DWORD PTR [rip+0xed03]        # 0x1013220
 100451d:	cmp    eax,edi
 100451f:	je     0x10045da
 1004525:	mov    r9,QWORD PTR [rip+0xf1b4]        # 0x10136e0
 100452c:	mov    ecx,eax
 100452e:	imul   rcx,rcx,0x44
 1004532:	mov    rax,QWORD PTR [r9+0x10]
 1004536:	mov    r15d,0x2
 100453c:	cmp    DWORD PTR [rcx+rax*1],r15d
 1004540:	jl     0x10045da
 1004546:	mov    edx,r14d
 1004549:	mov    rcx,r9
 100454c:	call   0x1009f00
 1004551:	cmp    eax,r15d
 1004554:	jb     0x10045da
 100455a:	xor    edx,edx
 100455c:	mov    rcx,QWORD PTR [rip+0xf17d]        # 0x10136e0
 1004563:	call   0x1009f00
 1004568:	test   eax,eax
 100456a:	je     0x10045da
 100456c:	lea    r14,[rip+0xffffffffffffd3cd]        # 0x1001940
 1004573:	mov    QWORD PTR [rsp+0xb8],r14
 100457b:	mov    DWORD PTR [rsp+0xc0],0x7a
 1004586:	mov    eax,DWORD PTR [rip+0xec94]        # 0x1013220
 100458c:	mov    DWORD PTR [rsp+0xc4],eax
 1004593:	mov    DWORD PTR [rsp+0xc8],r15d
 100459b:	mov    rax,QWORD PTR [rip+0xf13e]        # 0x10136e0
 10045a2:	mov    QWORD PTR [rsp+0xd0],rax
 10045aa:	mov    QWORD PTR [rsp+0x28],r14
 10045af:	mov    DWORD PTR [rsp+0x20],0x7a
 10045b7:	mov    r9d,0x80070057
 10045bd:	lea    r8,[rip+0xffffffffffffd2f4]        # 0x10018b8
 10045c4:	lea    rdx,[rip+0xffffffffffffd305]        # 0x10018d0
 10045cb:	lea    rcx,[rsp+0xb8]
 10045d3:	call   0x100aba0
 10045d8:	jmp    0x10045e1
 10045da:	lea    r14,[rip+0xffffffffffffd35f]        # 0x1001940
 10045e1:	mov    r9d,0x80070057
 10045e7:	mov    r8d,0x7a
 10045ed:	mov    rdx,r14
 10045f0:	lea    rcx,[rsp+0xb8]
 10045f8:	call   0x10036dc
 10045fd:	lea    rcx,[rsp+0x228]
 1004605:	mov    rdx,rax
 1004608:	mov    r8d,0x28
 100460e:	call   0x1004cd6
 1004613:	lea    rdx,[rip+0xccd6]        # 0x10112f0
 100461a:	lea    rcx,[rsp+0x228]
 1004622:	call   0x1004bf0
 1004627:	nop
 1004628:	xor    esi,esi
 100462a:	lea    r14,[rip+0xffffffffffffd30f]        # 0x1001940
 1004631:	mov    r15,QWORD PTR [rsp+0x98]
 1004639:	mov    r9d,0xf6
 100463f:	mov    r8,r14
 1004642:	mov    rdx,QWORD PTR [rip+0xf097]        # 0x10136e0
 1004649:	lea    rcx,[rsp+0x50]
 100464e:	call   0x100aac0
 1004653:	mov    QWORD PTR [rsp+0x20],r15
 1004658:	lea    r9,[rip+0xffffffffffffd3f1]        # 0x1001a50
 100465f:	lea    r8,[rip+0xed6a]        # 0x10133d0
 1004666:	mov    edx,0x4
 100466b:	lea    rcx,[rsp+0x50]
 1004670:	call   0x100aae0
 1004675:	nop
 1004676:	cmp    DWORD PTR [rsp+0x88],esi
 100467d:	je     0x1004686
 100467f:	call   QWORD PTR [rip+0xffffffffffffcea3]        # 0x1001528
 1004685:	nop
 1004686:	mov    rcx,QWORD PTR [rsp+0x138]
 100468e:	call   QWORD PTR [rip+0xffffffffffffcd5c]        # 0x10013f0
 1004694:	xor    eax,eax
 1004696:	mov    rcx,QWORD PTR [rsp+0x5d0]
 100469e:	xor    rcx,rsp
 10046a1:	call   0x1004cb0
 10046a6:	lea    r11,[rsp+0x5e0]
 10046ae:	mov    rbx,QWORD PTR [r11+0x40]
 10046b2:	mov    rsi,QWORD PTR [r11+0x48]
 10046b6:	mov    rsp,r11
 10046b9:	pop    r15
 10046bb:	pop    r14
 10046bd:	pop    r13
 10046bf:	pop    r12
 10046c1:	pop    rdi
 10046c2:	ret    
 10046c3:	int3   
 10046c4:	int3   
 10046c5:	int3   
 10046c6:	int3   
 10046c7:	int3   
 10046c8:	int3   
 10046c9:	int3   
 10046ca:	int3   
 10046cb:	int3   
 10046cc:	sub    rsp,0x28
 10046d0:	mov    rcx,QWORD PTR [rcx]
 10046d3:	test   rcx,rcx
 10046d6:	je     0x10046dd
 10046d8:	call   0x10049c8
 10046dd:	add    rsp,0x28
 10046e1:	ret    
 10046e2:	int3   
 10046e3:	int3   
 10046e4:	int3   
 10046e5:	int3   
 10046e6:	int3   
 10046e7:	int3   
 10046e8:	sub    rsp,0x38
 10046ec:	lea    rcx,[rip+0x7ed]        # 0x1004ee0
 10046f3:	call   0x1004e80
 10046f8:	mov    r11d,DWORD PTR [rip+0xf655]        # 0x1013d54
 10046ff:	mov    r9d,DWORD PTR [rip+0xf64a]        # 0x1013d50
 1004706:	lea    rax,[rip+0xf0bf]        # 0x10137cc
 100470d:	lea    r8,[rip+0xf0a4]        # 0x10137b8
 1004714:	lea    rdx,[rip+0xf0a5]        # 0x10137c0
 100471b:	lea    rcx,[rip+0xf08e]        # 0x10137b0
 1004722:	mov    DWORD PTR [rip+0xf0a3],r11d        # 0x10137cc
 1004729:	mov    QWORD PTR [rsp+0x20],rax
 100472e:	call   QWORD PTR [rip+0xffffffffffffccec]        # 0x1001420
 1004734:	mov    DWORD PTR [rip+0xf08e],eax        # 0x10137c8
 100473a:	test   eax,eax
 100473c:	jns    0x1004748
 100473e:	mov    ecx,0x8
 1004743:	call   0x1004dba
 1004748:	add    rsp,0x38
 100474c:	ret    
 100474d:	int3   
 100474e:	int3   
 100474f:	int3   
 1004750:	int3   
 1004751:	int3   
 1004752:	int3   
 1004753:	int3   
 1004754:	mov    QWORD PTR [rsp+0x8],rbx
 1004759:	push   rdi
 100475a:	sub    rsp,0x20
 100475e:	mov    rax,QWORD PTR gs:0x30
 1004767:	mov    rbx,QWORD PTR [rax+0x8]
 100476b:	xor    edi,edi
 100476d:	xor    eax,eax
 100476f:	lock cmpxchg QWORD PTR [rip+0x10c40],rbx        # 0x10153b8
 1004778:	je     0x1004795
 100477a:	cmp    rax,rbx
 100477d:	jne    0x1004788
 100477f:	mov    ebx,0x1
 1004784:	mov    edi,ebx
 1004786:	jmp    0x100479a
 1004788:	mov    ecx,0x3e8
 100478d:	call   QWORD PTR [rip+0xffffffffffffc9a5]        # 0x1001138
 1004793:	jmp    0x100476d
 1004795:	mov    ebx,0x1
 100479a:	mov    eax,DWORD PTR [rip+0x10c10]        # 0x10153b0
 10047a0:	cmp    eax,ebx
 10047a2:	jne    0x10047b0
 10047a4:	mov    ecx,0x1f
 10047a9:	call   0x1004dba
 10047ae:	jmp    0x10047e7
 10047b0:	mov    eax,DWORD PTR [rip+0x10bfa]        # 0x10153b0
 10047b6:	test   eax,eax
 10047b8:	jne    0x10047e1
 10047ba:	mov    DWORD PTR [rip+0x10bf0],ebx        # 0x10153b0
 10047c0:	lea    rdx,[rip+0xffffffffffffcdd1]        # 0x1001598
 10047c7:	lea    rcx,[rip+0xffffffffffffcdb2]        # 0x1001580
 10047ce:	call   0x1005024
 10047d3:	test   eax,eax
 10047d5:	je     0x10047e7
 10047d7:	mov    eax,0xff
 10047dc:	jmp    0x10048c9
 10047e1:	mov    DWORD PTR [rip+0xefed],ebx        # 0x10137d4
 10047e7:	mov    eax,DWORD PTR [rip+0x10bc3]        # 0x10153b0
 10047ed:	cmp    eax,ebx
 10047ef:	jne    0x100480e
 10047f1:	lea    rdx,[rip+0xffffffffffffcd80]        # 0x1001578
 10047f8:	lea    rcx,[rip+0xffffffffffffcd39]        # 0x1001538
 10047ff:	call   0x1005018
 1004804:	mov    DWORD PTR [rip+0x10ba2],0x2        # 0x10153b0
 100480e:	test   edi,edi
 1004810:	jne    0x100481b
 1004812:	xor    eax,eax
 1004814:	xchg   QWORD PTR [rip+0x10b9d],rax        # 0x10153b8
 100481b:	cmp    QWORD PTR [rip+0x10bad],0x0        # 0x10153d0
 1004823:	je     0x1004844
 1004825:	lea    rcx,[rip+0x10ba4]        # 0x10153d0
 100482c:	call   0x1004fd0
 1004831:	test   eax,eax
 1004833:	je     0x1004844
 1004835:	xor    r8d,r8d
 1004838:	lea    edx,[r8+0x2]
 100483c:	xor    ecx,ecx
 100483e:	call   QWORD PTR [rip+0x10b8c]        # 0x10153d0
 1004844:	mov    rcx,QWORD PTR [rip+0xffffffffffffcc4d]        # 0x1001498
 100484b:	mov    rax,QWORD PTR [rip+0xef66]        # 0x10137b8
 1004852:	mov    QWORD PTR [rcx],rax
 1004855:	mov    r8,QWORD PTR [rip+0xef5c]        # 0x10137b8
 100485c:	mov    rdx,QWORD PTR [rip+0xef5d]        # 0x10137c0
 1004863:	mov    ecx,DWORD PTR [rip+0xef47]        # 0x10137b0
 1004869:	call   0x1003930
 100486e:	mov    DWORD PTR [rip+0xef5c],eax        # 0x10137d0
 1004874:	cmp    DWORD PTR [rip+0xef39],0x0        # 0x10137b4
 100487b:	jne    0x1004885
 100487d:	mov    ecx,eax
 100487f:	call   QWORD PTR [rip+0xffffffffffffcc1b]        # 0x10014a0
 1004885:	cmp    DWORD PTR [rip+0xef48],0x0        # 0x10137d4
 100488c:	jne    0x100489a
 100488e:	call   QWORD PTR [rip+0xffffffffffffcc14]        # 0x10014a8
 1004894:	mov    eax,DWORD PTR [rip+0xef36]        # 0x10137d0
 100489a:	jmp    0x10048c9
 100489c:	mov    DWORD PTR [rip+0xef2e],eax        # 0x10137d0
 10048a2:	cmp    DWORD PTR [rip+0xef0b],0x0        # 0x10137b4
 10048a9:	jne    0x10048b4
 10048ab:	mov    ecx,eax
 10048ad:	call   QWORD PTR [rip+0xffffffffffffcbfd]        # 0x10014b0
 10048b3:	int3   
 10048b4:	cmp    DWORD PTR [rip+0xef19],0x0        # 0x10137d4
 10048bb:	jne    0x10048c9
 10048bd:	call   QWORD PTR [rip+0xffffffffffffcbe5]        # 0x10014a8
 10048c3:	mov    eax,DWORD PTR [rip+0xef07]        # 0x10137d0
 10048c9:	mov    rbx,QWORD PTR [rsp+0x30]
 10048ce:	add    rsp,0x20
 10048d2:	pop    rdi
 10048d3:	ret    
 10048d4:	int3   
 10048d5:	int3   
 10048d6:	int3   
 10048d7:	int3   
 10048d8:	int3   
 10048d9:	int3   
 10048da:	int3   
 10048db:	int3   
 10048dc:	sub    rsp,0x28
 10048e0:	mov    eax,0x5a4d
 10048e5:	cmp    WORD PTR [rip+0xffffffffffffb714],ax        # 0x1000000
 10048ec:	je     0x10048f2
 10048ee:	xor    ecx,ecx
 10048f0:	jmp    0x100492a
 10048f2:	movsxd rax,DWORD PTR [rip+0xffffffffffffb743]        # 0x100003c
 10048f9:	lea    rcx,[rip+0xffffffffffffb700]        # 0x1000000
 1004900:	add    rax,rcx
 1004903:	cmp    DWORD PTR [rax],0x4550
 1004909:	jne    0x10048ee
 100490b:	mov    ecx,0x20b
 1004910:	cmp    WORD PTR [rax+0x18],cx
 1004914:	jne    0x10048ee
 1004916:	xor    ecx,ecx
 1004918:	cmp    DWORD PTR [rax+0x84],0xe
 100491f:	jbe    0x100492a
 1004921:	cmp    DWORD PTR [rax+0xf8],ecx
 1004927:	setne  cl
 100492a:	mov    DWORD PTR [rip+0xee84],ecx        # 0x10137b4
 1004930:	mov    ecx,0x1
 1004935:	call   QWORD PTR [rip+0xffffffffffffcb25]        # 0x1001460
 100493b:	or     rcx,0xffffffffffffffff
 100493f:	call   QWORD PTR [rip+0xffffffffffffc7eb]        # 0x1001130
 1004945:	mov    rcx,QWORD PTR [rip+0xffffffffffffcb1c]        # 0x1001468
 100494c:	mov    QWORD PTR [rip+0x10a6d],rax        # 0x10153c0
 1004953:	mov    QWORD PTR [rip+0x10a6e],rax        # 0x10153c8
 100495a:	mov    eax,DWORD PTR [rip+0xf3fc]        # 0x1013d5c
 1004960:	mov    DWORD PTR [rcx],eax
 1004962:	mov    rdx,QWORD PTR [rip+0xffffffffffffc9df]        # 0x1001348
 1004969:	mov    eax,DWORD PTR [rip+0xf3e9]        # 0x1013d58
 100496f:	mov    DWORD PTR [rdx],eax
 1004971:	call   0x1004ea0
 1004976:	call   0x100503c
 100497b:	cmp    DWORD PTR [rip+0xe7ea],0x0        # 0x101316c
 1004982:	jne    0x1004991
 1004984:	lea    rcx,[rip+0x6a5]        # 0x1005030
 100498b:	call   QWORD PTR [rip+0xffffffffffffcae7]        # 0x1001478
 1004991:	cmp    DWORD PTR [rip+0xe7d0],0xffffffff        # 0x1013168
 1004998:	jne    0x10049a3
 100499a:	or     ecx,0xffffffff
 100499d:	call   QWORD PTR [rip+0xffffffffffffcadd]        # 0x1001480
 10049a3:	xor    eax,eax
 10049a5:	add    rsp,0x28
 10049a9:	ret    
 10049aa:	int3   
 10049ab:	int3   
 10049ac:	int3   
 10049ad:	int3   
 10049ae:	int3   
 10049af:	int3   
 10049b0:	sub    rsp,0x28
 10049b4:	call   0x1005048
 10049b9:	add    rsp,0x28
 10049bd:	jmp    0x1004754
 10049c2:	int3   
 10049c3:	int3   
 10049c4:	int3   
 10049c5:	int3   
 10049c6:	int3   
 10049c7:	int3   
 10049c8:	jmp    QWORD PTR [rip+0xffffffffffffc9fa]        # 0x10013c8
 10049ce:	int3   
 10049cf:	int3   
 10049d0:	int3   
 10049d1:	int3   
 10049d2:	int3   
 10049d3:	int3   
 10049d4:	mov    QWORD PTR [rsp+0x10],rbx
 10049d9:	mov    DWORD PTR [rsp+0x18],r8d
 10049de:	mov    QWORD PTR [rsp+0x8],rcx
 10049e3:	push   rsi
 10049e4:	push   rdi
 10049e5:	push   r12
 10049e7:	sub    rsp,0x40
 10049eb:	mov    rsi,r9
 10049ee:	mov    edi,r8d
 10049f1:	mov    r12,rdx
 10049f4:	mov    rbx,rcx
 10049f7:	dec    edi
 10049f9:	mov    DWORD PTR [rsp+0x70],edi
 10049fd:	js     0x1004a0e
 10049ff:	sub    rbx,r12
 1004a02:	mov    QWORD PTR [rsp+0x60],rbx
 1004a07:	mov    rcx,rbx
 1004a0a:	call   rsi
 1004a0c:	jmp    0x10049f7
 1004a0e:	jmp    0x1004a10
 1004a10:	mov    rbx,QWORD PTR [rsp+0x68]
 1004a15:	add    rsp,0x40
 1004a19:	pop    r12
 1004a1b:	pop    rdi
 1004a1c:	pop    rsi
 1004a1d:	ret    
 1004a1e:	int3   
 1004a1f:	int3   
 1004a20:	int3   
 1004a21:	int3   
 1004a22:	int3   
 1004a23:	int3   
 1004a24:	mov    rax,rsp
 1004a27:	mov    QWORD PTR [rax+0x20],r9
 1004a2b:	mov    DWORD PTR [rax+0x18],r8d
 1004a2f:	mov    QWORD PTR [rax+0x10],rdx
 1004a33:	push   rbx
 1004a34:	push   rsi
 1004a35:	push   rdi
 1004a36:	push   r12
 1004a38:	sub    rsp,0x38
 1004a3c:	mov    r12,r9
 1004a3f:	movsxd rdi,r8d
 1004a42:	mov    rsi,rdx
 1004a45:	and    DWORD PTR [rax-0x38],0x0
 1004a49:	mov    rbx,rdi
 1004a4c:	imul   rbx,rdx
 1004a50:	add    rbx,rcx
 1004a53:	mov    QWORD PTR [rax+0x8],rbx
 1004a57:	dec    edi
 1004a59:	mov    DWORD PTR [rsp+0x70],edi
 1004a5d:	js     0x1004a6f
 1004a5f:	sub    rbx,rsi
 1004a62:	mov    QWORD PTR [rsp+0x60],rbx
 1004a67:	mov    rcx,rbx
 1004a6a:	call   r12
 1004a6d:	jmp    0x1004a57
 1004a6f:	mov    DWORD PTR [rsp+0x20],0x1
 1004a77:	add    rsp,0x38
 1004a7b:	pop    r12
 1004a7d:	pop    rdi
 1004a7e:	pop    rsi
 1004a7f:	pop    rbx
 1004a80:	ret    
 1004a81:	int3   
 1004a82:	int3   
 1004a83:	int3   
 1004a84:	int3   
 1004a85:	int3   
 1004a86:	int3   
 1004a87:	int3   
 1004a88:	jmp    QWORD PTR [rip+0xffffffffffffc942]        # 0x10013d0
 1004a8e:	int3   
 1004a8f:	int3   
 1004a90:	int3   
 1004a91:	int3   
 1004a92:	int3   
 1004a93:	int3   
 1004a94:	jmp    QWORD PTR [rip+0xffffffffffffc93e]        # 0x10013d8
 1004a9a:	int3   
 1004a9b:	int3   
 1004a9c:	int3   
 1004a9d:	int3   
 1004a9e:	int3   
 1004a9f:	int3   
 1004aa0:	mov    QWORD PTR [rsp+0x8],rcx
 1004aa5:	sub    rsp,0x88
 1004aac:	lea    rcx,[rip+0xedcd]        # 0x1013880
 1004ab3:	call   QWORD PTR [rip+0xffffffffffffc637]        # 0x10010f0
 1004ab9:	mov    rax,QWORD PTR [rip+0xeeb8]        # 0x1013978
 1004ac0:	mov    QWORD PTR [rsp+0x58],rax
 1004ac5:	xor    r8d,r8d
 1004ac8:	lea    rdx,[rsp+0x60]
 1004acd:	mov    rcx,QWORD PTR [rsp+0x58]
 1004ad2:	call   0x100e704
 1004ad7:	mov    QWORD PTR [rsp+0x50],rax
 1004adc:	cmp    QWORD PTR [rsp+0x50],0x0
 1004ae2:	je     0x1004b25
 1004ae4:	mov    QWORD PTR [rsp+0x38],0x0
 1004aed:	lea    rax,[rsp+0x48]
 1004af2:	mov    QWORD PTR [rsp+0x30],rax
 1004af7:	lea    rax,[rsp+0x40]
 1004afc:	mov    QWORD PTR [rsp+0x28],rax
 1004b01:	lea    rax,[rip+0xed78]        # 0x1013880
 1004b08:	mov    QWORD PTR [rsp+0x20],rax
 1004b0d:	mov    r9,QWORD PTR [rsp+0x50]
 1004b12:	mov    r8,QWORD PTR [rsp+0x58]
 1004b17:	mov    rdx,QWORD PTR [rsp+0x60]
 1004b1c:	xor    ecx,ecx
 1004b1e:	call   0x100e6f8
 1004b23:	jmp    0x1004b47
 1004b25:	mov    rax,QWORD PTR [rsp+0x88]
 1004b2d:	mov    QWORD PTR [rip+0xee44],rax        # 0x1013978
 1004b34:	lea    rax,[rsp+0x88]
 1004b3c:	add    rax,0x8
 1004b40:	mov    QWORD PTR [rip+0xedd1],rax        # 0x1013918
 1004b47:	mov    rax,QWORD PTR [rip+0xee2a]        # 0x1013978
 1004b4e:	mov    QWORD PTR [rip+0xec9b],rax        # 0x10137f0
 1004b55:	mov    rax,QWORD PTR [rsp+0x90]
 1004b5d:	mov    QWORD PTR [rip+0xed9c],rax        # 0x1013900
 1004b64:	mov    DWORD PTR [rip+0xec72],0xc0000409        # 0x10137e0
 1004b6e:	mov    DWORD PTR [rip+0xec6c],0x1        # 0x10137e4
 1004b78:	mov    rax,QWORD PTR [rip+0xe5d1]        # 0x1013150
 1004b7f:	mov    QWORD PTR [rsp+0x68],rax
 1004b84:	mov    rax,QWORD PTR [rip+0xe5cd]        # 0x1013158
 1004b8b:	mov    QWORD PTR [rsp+0x70],rax
 1004b90:	call   QWORD PTR [rip+0xffffffffffffc572]        # 0x1001108
 1004b96:	mov    DWORD PTR [rip+0xecdc],eax        # 0x1013878
 1004b9c:	mov    ecx,0x1
 1004ba1:	call   0x100510e
 1004ba6:	xor    ecx,ecx
 1004ba8:	call   QWORD PTR [rip+0xffffffffffffc562]        # 0x1001110
 1004bae:	lea    rcx,[rip+0xffffffffffffcec3]        # 0x1001a78
 1004bb5:	call   QWORD PTR [rip+0xffffffffffffc55d]        # 0x1001118
 1004bbb:	cmp    DWORD PTR [rip+0xecb6],0x0        # 0x1013878
 1004bc2:	jne    0x1004bce
 1004bc4:	mov    ecx,0x1
 1004bc9:	call   0x100510e
 1004bce:	call   QWORD PTR [rip+0xffffffffffffc54c]        # 0x1001120
 1004bd4:	mov    edx,0xc0000409
 1004bd9:	mov    rcx,rax
 1004bdc:	call   QWORD PTR [rip+0xffffffffffffc546]        # 0x1001128
 1004be2:	add    rsp,0x88
 1004be9:	ret    
 1004bea:	int3   
 1004beb:	int3   
 1004bec:	int3   
 1004bed:	int3   
 1004bee:	int3   
 1004bef:	int3   
 1004bf0:	jmp    QWORD PTR [rip+0xffffffffffffc80a]        # 0x1001400
 1004bf6:	int3   
 1004bf7:	int3   
 1004bf8:	int3   
 1004bf9:	int3   
 1004bfa:	int3   
 1004bfb:	int3   
 1004bfc:	jmp    QWORD PTR [rip+0xffffffffffffc806]        # 0x1001408
 1004c02:	int3   
 1004c03:	int3   
 1004c04:	int3   
 1004c05:	int3   
 1004c06:	int3   
 1004c07:	int3   
 1004c08:	mov    rax,rsp
 1004c0b:	mov    QWORD PTR [rax+0x8],rbx
 1004c0f:	mov    QWORD PTR [rax+0x10],rbp
 1004c13:	mov    QWORD PTR [rax+0x18],rsi
 1004c17:	mov    QWORD PTR [rax+0x20],rdi
 1004c1b:	push   r12
 1004c1d:	sub    rsp,0x20
 1004c21:	mov    rbx,QWORD PTR [r9+0x38]
 1004c25:	mov    rsi,rdx
 1004c28:	mov    r12,r8
 1004c2b:	mov    rbp,rcx
 1004c2e:	lea    r8,[rbx+0x4]
 1004c32:	mov    rdx,r9
 1004c35:	mov    rcx,rsi
 1004c38:	mov    rdi,r9
 1004c3b:	call   0x100511c
 1004c40:	mov    r11d,DWORD PTR [rbx+0x4]
 1004c44:	mov    r10d,DWORD PTR [rbp+0x4]
 1004c48:	mov    eax,r11d
 1004c4b:	and    r11d,0x2
 1004c4f:	mov    r8d,0x1
 1004c55:	and    eax,r8d
 1004c58:	and    r10b,0x66
 1004c5c:	cmove  r11d,eax
 1004c60:	test   r11d,r11d
 1004c63:	je     0x1004c79
 1004c65:	mov    r9,rdi
 1004c68:	mov    r8,r12
 1004c6b:	mov    rdx,rsi
 1004c6e:	mov    rcx,rbp
 1004c71:	call   0x1004bfc
 1004c76:	mov    r8d,eax
 1004c79:	mov    rbx,QWORD PTR [rsp+0x30]
 1004c7e:	mov    rbp,QWORD PTR [rsp+0x38]
 1004c83:	mov    rsi,QWORD PTR [rsp+0x40]
 1004c88:	mov    rdi,QWORD PTR [rsp+0x48]
 1004c8d:	mov    eax,r8d
 1004c90:	add    rsp,0x20
 1004c94:	pop    r12
 1004c96:	ret    
 1004c97:	int3   
 1004c98:	int3   
 1004c99:	int3   
 1004c9a:	int3   
 1004c9b:	int3   
 1004c9c:	int3   
 1004c9d:	int3   
 1004c9e:	int3   
 1004c9f:	int3   
 1004ca0:	int3   
 1004ca1:	int3   
 1004ca2:	int3   
 1004ca3:	int3   
 1004ca4:	int3   
 1004ca5:	int3   
 1004ca6:	data16 nop WORD PTR [rax+rax*1+0x0]
 1004cb0:	cmp    rcx,QWORD PTR [rip+0xe499]        # 0x1013150
 1004cb7:	jne    0x1004cca
 1004cb9:	rol    rcx,0x10
 1004cbd:	test   cx,0xffff
 1004cc2:	jne    0x1004cc6
 1004cc4:	repz ret 
 1004cc6:	ror    rcx,0x10
 1004cca:	jmp    0x1004aa0
 1004ccf:	int3   
 1004cd0:	int3   
 1004cd1:	int3   
 1004cd2:	int3   
 1004cd3:	int3   
 1004cd4:	int3   
 1004cd5:	int3   
 1004cd6:	jmp    QWORD PTR [rip+0xffffffffffffc734]        # 0x1001410
 1004cdc:	int3   
 1004cdd:	int3   
 1004cde:	int3   
 1004cdf:	int3   
 1004ce0:	int3   
 1004ce1:	int3   
 1004ce2:	int3   
 1004ce3:	int3   
 1004ce4:	mov    QWORD PTR [rsp+0x8],rbx
 1004ce9:	mov    QWORD PTR [rsp+0x10],rsi
 1004cee:	push   rdi
 1004cef:	sub    rsp,0x20
 1004cf3:	mov    esi,edx
 1004cf5:	mov    rbx,rcx
 1004cf8:	test   dl,0x2
 1004cfb:	je     0x1004d27
 1004cfd:	mov    r8d,DWORD PTR [rcx-0x8]
 1004d01:	lea    r9,[rip+0x4c8]        # 0x10051d0
 1004d08:	mov    edx,0x18
 1004d0d:	call   0x1004a24
 1004d12:	test   sil,0x1
 1004d16:	je     0x1004d21
 1004d18:	lea    rcx,[rbx-0x8]
 1004d1c:	call   0x10049c8
 1004d21:	lea    rax,[rbx-0x8]
 1004d25:	jmp    0x1004d3d
 1004d27:	call   0x10051d0
 1004d2c:	test   sil,0x1
 1004d30:	je     0x1004d3a
 1004d32:	mov    rcx,rbx
 1004d35:	call   0x10049c8
 1004d3a:	mov    rax,rbx
 1004d3d:	mov    rbx,QWORD PTR [rsp+0x30]
 1004d42:	mov    rsi,QWORD PTR [rsp+0x38]
 1004d47:	add    rsp,0x20
 1004d4b:	pop    rdi
 1004d4c:	ret    
 1004d4d:	int3   
 1004d4e:	int3   
 1004d4f:	int3   
 1004d50:	int3   
 1004d51:	int3   
 1004d52:	int3   
 1004d53:	int3   
 1004d54:	sub    rsp,0x28
 1004d58:	mov    rax,QWORD PTR [rcx]
 1004d5b:	cmp    DWORD PTR [rax],0xe06d7363
 1004d61:	jne    0x1004d8e
 1004d63:	cmp    DWORD PTR [rax+0x18],0x4
 1004d67:	jne    0x1004d8e
 1004d69:	mov    eax,DWORD PTR [rax+0x20]
 1004d6c:	cmp    eax,0x19930520
 1004d71:	je     0x1004d88
 1004d73:	cmp    eax,0x19930521
 1004d78:	je     0x1004d88
 1004d7a:	cmp    eax,0x19930522
 1004d7f:	je     0x1004d88
 1004d81:	cmp    eax,0x1994000
 1004d86:	jne    0x1004d8e
 1004d88:	call   0x1005102
 1004d8d:	int3   
 1004d8e:	xor    eax,eax
 1004d90:	add    rsp,0x28
 1004d94:	ret    
 1004d95:	int3   
 1004d96:	int3   
 1004d97:	int3   
 1004d98:	int3   
 1004d99:	int3   
 1004d9a:	int3   
 1004d9b:	int3   
 1004d9c:	sub    rsp,0x28
 1004da0:	lea    rcx,[rip+0xffffffffffffffad]        # 0x1004d54
 1004da7:	call   QWORD PTR [rip+0xffffffffffffc363]        # 0x1001110
 1004dad:	xor    eax,eax
 1004daf:	add    rsp,0x28
 1004db3:	ret    
 1004db4:	int3   
 1004db5:	int3   
 1004db6:	int3   
 1004db7:	int3   
 1004db8:	int3   
 1004db9:	int3   
 1004dba:	jmp    QWORD PTR [rip+0xffffffffffffc658]        # 0x1001418
 1004dc0:	int3   
 1004dc1:	int3   
 1004dc2:	int3   
 1004dc3:	int3   
 1004dc4:	int3   
 1004dc5:	int3   
 1004dc6:	int3   
 1004dc7:	int3   
 1004dc8:	rex push rbx
 1004dca:	sub    rsp,0x20
 1004dce:	mov    rbx,rcx
 1004dd1:	mov    rcx,QWORD PTR [rip+0x105f0]        # 0x10153c8
 1004dd8:	call   QWORD PTR [rip+0xffffffffffffc30a]        # 0x10010e8
 1004dde:	mov    QWORD PTR [rsp+0x38],rax
 1004de3:	cmp    rax,0xffffffffffffffff
 1004de7:	jne    0x1004df4
 1004de9:	mov    rcx,rbx
 1004dec:	call   QWORD PTR [rip+0xffffffffffffc63e]        # 0x1001430
 1004df2:	jmp    0x1004e72
 1004df4:	mov    ecx,0x8
 1004df9:	call   0x10051c4
 1004dfe:	nop
 1004dff:	mov    rcx,QWORD PTR [rip+0x105c2]        # 0x10153c8
 1004e06:	call   QWORD PTR [rip+0xffffffffffffc2dc]        # 0x10010e8
 1004e0c:	mov    QWORD PTR [rsp+0x38],rax
 1004e11:	mov    rcx,QWORD PTR [rip+0x105a8]        # 0x10153c0
 1004e18:	call   QWORD PTR [rip+0xffffffffffffc2ca]        # 0x10010e8
 1004e1e:	mov    QWORD PTR [rsp+0x40],rax
 1004e23:	mov    rcx,rbx
 1004e26:	call   QWORD PTR [rip+0xffffffffffffc304]        # 0x1001130
 1004e2c:	mov    rcx,rax
 1004e2f:	lea    r8,[rsp+0x40]
 1004e34:	lea    rdx,[rsp+0x38]
 1004e39:	call   0x10051b8
 1004e3e:	mov    rbx,rax
 1004e41:	mov    rcx,QWORD PTR [rsp+0x38]
 1004e46:	call   QWORD PTR [rip+0xffffffffffffc2e4]        # 0x1001130
 1004e4c:	mov    QWORD PTR [rip+0x10575],rax        # 0x10153c8
 1004e53:	mov    rcx,QWORD PTR [rsp+0x40]
 1004e58:	call   QWORD PTR [rip+0xffffffffffffc2d2]        # 0x1001130
 1004e5e:	mov    QWORD PTR [rip+0x1055b],rax        # 0x10153c0
 1004e65:	mov    ecx,0x8
 1004e6a:	call   0x10051ac
 1004e6f:	mov    rax,rbx
 1004e72:	add    rsp,0x20
 1004e76:	pop    rbx
 1004e77:	ret    
 1004e78:	int3   
 1004e79:	int3   
 1004e7a:	int3   
 1004e7b:	int3   
 1004e7c:	int3   
 1004e7d:	int3   
 1004e7e:	int3   
 1004e7f:	int3   
 1004e80:	sub    rsp,0x28
 1004e84:	call   0x1004dc8
 1004e89:	neg    rax
 1004e8c:	sbb    eax,eax
 1004e8e:	neg    eax
 1004e90:	dec    eax
 1004e92:	add    rsp,0x28
 1004e96:	ret    
 1004e97:	int3   
 1004e98:	int3   
 1004e99:	int3   
 1004e9a:	int3   
 1004e9b:	int3   
 1004e9c:	int3   
 1004e9d:	int3   
 1004e9e:	int3   
 1004e9f:	int3   
 1004ea0:	mov    QWORD PTR [rsp+0x8],rbx
 1004ea5:	push   rdi
 1004ea6:	sub    rsp,0x20
 1004eaa:	lea    rbx,[rip+0xffffffffffffe7cf]        # 0x1003680
 1004eb1:	lea    rdi,[rip+0xffffffffffffe7c8]        # 0x1003680
 1004eb8:	jmp    0x1004ec8
 1004eba:	mov    rax,QWORD PTR [rbx]
 1004ebd:	test   rax,rax
 1004ec0:	je     0x1004ec4
 1004ec2:	call   rax
 1004ec4:	add    rbx,0x8
 1004ec8:	cmp    rbx,rdi
 1004ecb:	jb     0x1004eba
 1004ecd:	mov    rbx,QWORD PTR [rsp+0x30]
 1004ed2:	add    rsp,0x20
 1004ed6:	pop    rdi
 1004ed7:	ret    
 1004ed8:	int3   
 1004ed9:	int3   
 1004eda:	int3   
 1004edb:	int3   
 1004edc:	int3   
 1004edd:	int3   
 1004ede:	int3   
 1004edf:	int3   
 1004ee0:	mov    QWORD PTR [rsp+0x8],rbx
 1004ee5:	push   rdi
 1004ee6:	sub    rsp,0x20
 1004eea:	lea    rbx,[rip+0xffffffffffffe79f]        # 0x1003690
 1004ef1:	lea    rdi,[rip+0xffffffffffffe798]        # 0x1003690
 1004ef8:	jmp    0x1004f08
 1004efa:	mov    rax,QWORD PTR [rbx]
 1004efd:	test   rax,rax
 1004f00:	je     0x1004f04
 1004f02:	call   rax
 1004f04:	add    rbx,0x8
 1004f08:	cmp    rbx,rdi
 1004f0b:	jb     0x1004efa
 1004f0d:	mov    rbx,QWORD PTR [rsp+0x30]
 1004f12:	add    rsp,0x20
 1004f16:	pop    rdi
 1004f17:	ret    
 1004f18:	int3   
 1004f19:	int3   
 1004f1a:	int3   
 1004f1b:	int3   
 1004f1c:	int3   
 1004f1d:	int3   
 1004f1e:	jmp    QWORD PTR [rip+0xffffffffffffc59c]        # 0x10014c0
 1004f24:	int3   
 1004f25:	int3   
 1004f26:	int3   
 1004f27:	int3   
 1004f28:	int3   
 1004f29:	int3   
 1004f2a:	jmp    QWORD PTR [rip+0xffffffffffffc588]        # 0x10014b8
 1004f30:	int3   
 1004f31:	int3   
 1004f32:	int3   
 1004f33:	int3   
 1004f34:	int3   
 1004f35:	int3   
 1004f36:	int3   
 1004f37:	int3   
 1004f38:	int3   
 1004f39:	int3   
 1004f3a:	int3   
 1004f3b:	int3   
 1004f3c:	int3   
 1004f3d:	int3   
 1004f3e:	int3   
 1004f3f:	int3   
 1004f40:	mov    rax,rcx
 1004f43:	mov    ecx,0x5a4d
 1004f48:	cmp    WORD PTR [rax],cx
 1004f4b:	je     0x1004f50
 1004f4d:	xor    eax,eax
 1004f4f:	ret    
 1004f50:	movsxd rcx,DWORD PTR [rax+0x3c]
 1004f54:	add    rcx,rax
 1004f57:	xor    eax,eax
 1004f59:	cmp    DWORD PTR [rcx],0x4550
 1004f5f:	jne    0x1004f6d
 1004f61:	mov    edx,0x20b
 1004f66:	cmp    WORD PTR [rcx+0x18],dx
 1004f6a:	sete   al
 1004f6d:	repz ret 
 1004f6f:	int3   
 1004f70:	int3   
 1004f71:	int3   
 1004f72:	int3   
 1004f73:	int3   
 1004f74:	int3   
 1004f75:	int3   
 1004f76:	int3   
 1004f77:	int3   
 1004f78:	int3   
 1004f79:	int3   
 1004f7a:	int3   
 1004f7b:	int3   
 1004f7c:	int3   
 1004f7d:	int3   
 1004f7e:	int3   
 1004f7f:	int3   
 1004f80:	movsxd r8,DWORD PTR [rcx+0x3c]
 1004f84:	xor    r9d,r9d
 1004f87:	mov    r10,rdx
 1004f8a:	add    r8,rcx
 1004f8d:	movzx  eax,WORD PTR [r8+0x14]
 1004f92:	movzx  r11d,WORD PTR [r8+0x6]
 1004f97:	lea    rcx,[rax+r8*1+0x18]
 1004f9c:	test   r11d,r11d
 1004f9f:	je     0x1004fbf
 1004fa1:	mov    edx,DWORD PTR [rcx+0xc]
 1004fa4:	cmp    r10,rdx
 1004fa7:	jb     0x1004fb3
 1004fa9:	mov    eax,DWORD PTR [rcx+0x8]
 1004fac:	add    eax,edx
 1004fae:	cmp    r10,rax
 1004fb1:	jb     0x1004fc2
 1004fb3:	inc    r9d
 1004fb6:	add    rcx,0x28
 1004fba:	cmp    r9d,r11d
 1004fbd:	jb     0x1004fa1
 1004fbf:	xor    eax,eax
 1004fc1:	ret    
 1004fc2:	mov    rax,rcx
 1004fc5:	ret    
 1004fc6:	int3   
 1004fc7:	int3   
 1004fc8:	int3   
 1004fc9:	int3   
 1004fca:	int3   
 1004fcb:	int3   
 1004fcc:	int3   
 1004fcd:	int3   
 1004fce:	int3   
 1004fcf:	int3   
 1004fd0:	sub    rsp,0x28
 1004fd4:	mov    r8,rcx
 1004fd7:	lea    r9,[rip+0xffffffffffffb022]        # 0x1000000
 1004fde:	mov    rcx,r9
 1004fe1:	call   0x1004f40
 1004fe6:	test   eax,eax
 1004fe8:	je     0x100500c
 1004fea:	sub    r8,r9
 1004fed:	mov    rdx,r8
 1004ff0:	mov    rcx,r9
 1004ff3:	call   0x1004f80
 1004ff8:	test   rax,rax
 1004ffb:	je     0x100500c
 1004ffd:	mov    eax,DWORD PTR [rax+0x24]
 1005000:	shr    eax,0x1f
 1005003:	not    eax
 1005005:	and    eax,0x1
 1005008:	jmp    0x100500c
 100500a:	xor    eax,eax
 100500c:	add    rsp,0x28
 1005010:	ret    
 1005011:	int3   
 1005012:	int3   
 1005013:	int3   
 1005014:	int3   
 1005015:	int3   
 1005016:	int3   
 1005017:	int3   
 1005018:	jmp    QWORD PTR [rip+0xffffffffffffc472]        # 0x1001490
 100501e:	int3   
 100501f:	int3   
 1005020:	int3   
 1005021:	int3   
 1005022:	int3   
 1005023:	int3   
 1005024:	jmp    QWORD PTR [rip+0xffffffffffffc45e]        # 0x1001488
 100502a:	int3   
 100502b:	int3   
 100502c:	int3   
 100502d:	int3   
 100502e:	int3   
 100502f:	int3   
 1005030:	xor    eax,eax
 1005032:	ret    
 1005033:	int3   
 1005034:	int3   
 1005035:	int3   
 1005036:	int3   
 1005037:	int3   
 1005038:	int3   
 1005039:	int3   
 100503a:	int3   
 100503b:	int3   
 100503c:	xor    eax,eax
 100503e:	ret    
 100503f:	int3   
 1005040:	int3   
 1005041:	int3   
 1005042:	int3   
 1005043:	int3   
 1005044:	int3   
 1005045:	int3   
 1005046:	int3   
 1005047:	int3   
 1005048:	mov    QWORD PTR [rsp+0x18],rbx
 100504d:	push   rdi
 100504e:	sub    rsp,0x20
 1005052:	mov    rax,QWORD PTR [rip+0xe0f7]        # 0x1013150
 1005059:	and    QWORD PTR [rsp+0x30],0x0
 100505f:	movabs rdi,0x2b992ddfa232
 1005069:	cmp    rax,rdi
 100506c:	je     0x100507a
 100506e:	not    rax
 1005071:	mov    QWORD PTR [rip+0xe0e0],rax        # 0x1013158
 1005078:	jmp    0x10050f0
 100507a:	lea    rcx,[rsp+0x30]
 100507f:	call   QWORD PTR [rip+0xffffffffffffc12b]        # 0x10011b0
 1005085:	mov    rbx,QWORD PTR [rsp+0x30]
 100508a:	call   QWORD PTR [rip+0xffffffffffffc0b0]        # 0x1001140
 1005090:	mov    r11d,eax
 1005093:	xor    rbx,r11
 1005096:	call   QWORD PTR [rip+0xffffffffffffc034]        # 0x10010d0
 100509c:	mov    r11d,eax
 100509f:	xor    rbx,r11
 10050a2:	call   QWORD PTR [rip+0xffffffffffffc030]        # 0x10010d8
 10050a8:	lea    rcx,[rsp+0x38]
 10050ad:	mov    r11d,eax
 10050b0:	xor    rbx,r11
 10050b3:	call   QWORD PTR [rip+0xffffffffffffc027]        # 0x10010e0
 10050b9:	mov    r11,QWORD PTR [rsp+0x38]
 10050be:	xor    r11,rbx
 10050c1:	movabs rax,0xffffffffffff
 10050cb:	and    r11,rax
 10050ce:	movabs rax,0x2b992ddfa233
 10050d8:	cmp    r11,rdi
 10050db:	cmove  r11,rax
 10050df:	mov    QWORD PTR [rip+0xe06a],r11        # 0x1013150
 10050e6:	not    r11
 10050e9:	mov    QWORD PTR [rip+0xe068],r11        # 0x1013158
 10050f0:	mov    rbx,QWORD PTR [rsp+0x40]
 10050f5:	add    rsp,0x20
 10050f9:	pop    rdi
 10050fa:	ret    
 10050fb:	int3   
 10050fc:	int3   
 10050fd:	int3   
 10050fe:	int3   
 10050ff:	int3   
 1005100:	int3   
 1005101:	int3   
 1005102:	jmp    QWORD PTR [rip+0xffffffffffffc350]        # 0x1001458
 1005108:	int3   
 1005109:	int3   
 100510a:	int3   
 100510b:	int3   
 100510c:	int3   
 100510d:	int3   
 100510e:	jmp    QWORD PTR [rip+0xffffffffffffc33c]        # 0x1001450
 1005114:	int3   
 1005115:	int3   
 1005116:	int3   
 1005117:	int3   
 1005118:	int3   
 1005119:	int3   
 100511a:	int3   
 100511b:	int3   
 100511c:	rex push rbx
 100511e:	sub    rsp,0x20
 1005122:	mov    r11d,DWORD PTR [r8]
 1005125:	mov    rbx,rdx
 1005128:	mov    r9,rcx
 100512b:	and    r11d,0xfffffff8
 100512f:	test   BYTE PTR [r8],0x4
 1005133:	mov    r10,rcx
 1005136:	je     0x100514b
 1005138:	mov    eax,DWORD PTR [r8+0x8]
 100513c:	movsxd r10,DWORD PTR [r8+0x4]
 1005140:	neg    eax
 1005142:	add    r10,rcx
 1005145:	movsxd rcx,eax
 1005148:	and    r10,rcx
 100514b:	movsxd rax,r11d
 100514e:	mov    rdx,QWORD PTR [rax+r10*1]
 1005152:	mov    rax,QWORD PTR [rbx+0x10]
 1005156:	mov    ecx,DWORD PTR [rax+0x8]
 1005159:	add    rcx,QWORD PTR [rbx+0x8]
 100515d:	test   BYTE PTR [rcx+0x3],0xf
 1005161:	je     0x100516f
 1005163:	movzx  eax,BYTE PTR [rcx+0x3]
 1005167:	and    eax,0xfffffff0
 100516a:	cdqe   
 100516c:	add    r9,rax
 100516f:	xor    r9,rdx
 1005172:	mov    rcx,r9
 1005175:	add    rsp,0x20
 1005179:	pop    rbx
 100517a:	jmp    0x1004cb0
 100517f:	int3   
 1005180:	int3   
 1005181:	int3   
 1005182:	int3   
 1005183:	int3   
 1005184:	int3   
 1005185:	int3   
 1005186:	int3   
 1005187:	int3   
 1005188:	sub    rsp,0x28
 100518c:	mov    r8,QWORD PTR [r9+0x38]
 1005190:	mov    rcx,rdx
 1005193:	mov    rdx,r9
 1005196:	call   0x100511c
 100519b:	mov    eax,0x1
 10051a0:	add    rsp,0x28
 10051a4:	ret    
 10051a5:	int3   
 10051a6:	int3   
 10051a7:	int3   
 10051a8:	int3   
 10051a9:	int3   
 10051aa:	int3   
 10051ab:	int3   
 10051ac:	jmp    QWORD PTR [rip+0xffffffffffffc296]        # 0x1001448
 10051b2:	int3   
 10051b3:	int3   
 10051b4:	int3   
 10051b5:	int3   
 10051b6:	int3   
 10051b7:	int3   
 10051b8:	jmp    QWORD PTR [rip+0xffffffffffffc282]        # 0x1001440
 10051be:	int3   
 10051bf:	int3   
 10051c0:	int3   
 10051c1:	int3   
 10051c2:	int3   
 10051c3:	int3   
 10051c4:	jmp    QWORD PTR [rip+0xffffffffffffc26e]        # 0x1001438
 10051ca:	int3   
 10051cb:	int3   
 10051cc:	int3   
 10051cd:	int3   
 10051ce:	int3   
 10051cf:	int3   
 10051d0:	jmp    QWORD PTR [rip+0xffffffffffffc252]        # 0x1001428
 10051d6:	int3   
 10051d7:	int3   
 10051d8:	int3   
 10051d9:	int3   
 10051da:	int3   
 10051db:	int3   
 10051dc:	int3   
 10051dd:	int3   
 10051de:	int3   
 10051df:	int3   
 10051e0:	sub    rsp,0x308
 10051e7:	mov    rax,QWORD PTR [rip+0xdf62]        # 0x1013150
 10051ee:	xor    rax,rsp
 10051f1:	mov    QWORD PTR [rsp+0x2f8],rax
 10051f9:	mov    QWORD PTR [rsp+0x280],0x0
 1005205:	mov    DWORD PTR [rsp+0x250],0x104
 1005210:	mov    DWORD PTR [rsp+0x25c],0x0
 100521b:	mov    QWORD PTR [rsp+0x278],0x0
 1005227:	mov    QWORD PTR [rsp+0x260],0x0
 1005233:	mov    QWORD PTR [rsp+0x268],0x0
 100523f:	mov    QWORD PTR [rsp+0x288],0x0
 100524b:	mov    DWORD PTR [rsp+0x258],0x0
 1005256:	mov    DWORD PTR [rsp+0x274],0x0
 1005261:	mov    DWORD PTR [rsp+0x254],0x409
 100526c:	lea    rax,[rsp+0x280]
 1005274:	mov    QWORD PTR [rsp+0x20],rax
 1005279:	mov    r9d,0x20019
 100527f:	xor    r8d,r8d
 1005282:	lea    rdx,[rip+0xffffffffffffc897]        # 0x1001b20
 1005289:	mov    rcx,0xffffffff80000002
 1005290:	call   0x1005e60
 1005295:	mov    DWORD PTR [rsp+0x270],eax
 100529c:	cmp    DWORD PTR [rsp+0x270],0x0
 10052a4:	je     0x10052ab
 10052a6:	jmp    0x100599c
 10052ab:	lea    rax,[rsp+0x250]
 10052b3:	mov    QWORD PTR [rsp+0x28],rax
 10052b8:	lea    rax,[rsp+0x40]
 10052bd:	mov    QWORD PTR [rsp+0x20],rax
 10052c2:	xor    r9d,r9d
 10052c5:	xor    r8d,r8d
 10052c8:	lea    rdx,[rip+0xffffffffffffc831]        # 0x1001b00
 10052cf:	mov    rcx,QWORD PTR [rsp+0x280]
 10052d7:	call   0x1005ea0
 10052dc:	mov    DWORD PTR [rsp+0x270],eax
 10052e3:	cmp    DWORD PTR [rsp+0x270],0x0
 10052eb:	je     0x10052f2
 10052ed:	jmp    0x100599c
 10052f2:	lea    rcx,[rip+0xffffffffffffc7e7]        # 0x1001ae0
 10052f9:	call   QWORD PTR [rip+0xffffffffffffbfd9]        # 0x10012d8
 10052ff:	lea    rdx,[rip+0xffffffffffffc7c2]        # 0x1001ac8
 1005306:	mov    rcx,rax
 1005309:	call   QWORD PTR [rip+0xffffffffffffbf41]        # 0x1001250
 100530f:	mov    QWORD PTR [rsp+0x268],rax
 1005317:	lea    rcx,[rip+0xffffffffffffc7c2]        # 0x1001ae0
 100531e:	call   QWORD PTR [rip+0xffffffffffffbfb4]        # 0x10012d8
 1005324:	lea    rdx,[rip+0xffffffffffffc785]        # 0x1001ab0
 100532b:	mov    rcx,rax
 100532e:	call   QWORD PTR [rip+0xffffffffffffbf1c]        # 0x1001250
 1005334:	mov    QWORD PTR [rsp+0x288],rax
 100533c:	cmp    QWORD PTR [rsp+0x268],0x0
 1005345:	je     0x1005352
 1005347:	cmp    QWORD PTR [rsp+0x288],0x0
 1005350:	jne    0x1005362
 1005352:	mov    DWORD PTR [rsp+0x274],0x1
 100535d:	jmp    0x1005577
 1005362:	xor    edx,edx
 1005364:	xor    ecx,ecx
 1005366:	call   QWORD PTR [rsp+0x288]
 100536d:	mov    DWORD PTR [rsp+0x25c],eax
 1005374:	mov    eax,DWORD PTR [rsp+0x25c]
 100537b:	mov    DWORD PTR [rsp+0x250],eax
 1005382:	lea    rcx,[rsp+0x40]
 1005387:	call   QWORD PTR [rip+0xffffffffffffbf53]        # 0x10012e0
 100538d:	mov    ecx,DWORD PTR [rsp+0x250]
 1005394:	lea    eax,[rcx+rax*1+0x2]
 1005398:	mov    DWORD PTR [rsp+0x250],eax
 100539f:	cmp    QWORD PTR [rsp+0x278],0x0
 10053a8:	je     0x100543f
 10053ae:	mov    QWORD PTR [rsp+0x290],0x0
 10053ba:	mov    eax,DWORD PTR [rsp+0x250]
 10053c1:	shl    rax,1
 10053c4:	mov    QWORD PTR [rsp+0x2c8],rax
 10053cc:	call   QWORD PTR [rip+0xffffffffffffbf5e]        # 0x1001330
 10053d2:	mov    rcx,QWORD PTR [rsp+0x2c8]
 10053da:	mov    r9,rcx
 10053dd:	mov    r8,QWORD PTR [rsp+0x278]
 10053e5:	mov    edx,0x8
 10053ea:	mov    rcx,rax
 10053ed:	call   QWORD PTR [rip+0xffffffffffffbd5d]        # 0x1001150
 10053f3:	mov    QWORD PTR [rsp+0x290],rax
 10053fb:	cmp    QWORD PTR [rsp+0x290],0x0
 1005404:	jne    0x100542d
 1005406:	call   QWORD PTR [rip+0xffffffffffffbf24]        # 0x1001330
 100540c:	mov    r8,QWORD PTR [rsp+0x278]
 1005414:	xor    edx,edx
 1005416:	mov    rcx,rax
 1005419:	call   QWORD PTR [rip+0xffffffffffffbd29]        # 0x1001148
 100541f:	mov    QWORD PTR [rsp+0x278],0x0
 100542b:	jmp    0x100543d
 100542d:	mov    rax,QWORD PTR [rsp+0x290]
 1005435:	mov    QWORD PTR [rsp+0x278],rax
 100543d:	jmp    0x1005478
 100543f:	mov    eax,DWORD PTR [rsp+0x250]
 1005446:	shl    rax,1
 1005449:	mov    QWORD PTR [rsp+0x2d0],rax
 1005451:	call   QWORD PTR [rip+0xffffffffffffbed9]        # 0x1001330
 1005457:	mov    rcx,QWORD PTR [rsp+0x2d0]
 100545f:	mov    r8,rcx
 1005462:	mov    edx,0x8
 1005467:	mov    rcx,rax
 100546a:	call   QWORD PTR [rip+0xffffffffffffbd50]        # 0x10011c0
 1005470:	mov    QWORD PTR [rsp+0x278],rax
 1005478:	cmp    QWORD PTR [rsp+0x278],0x0
 1005481:	je     0x10054a0
 1005483:	mov    rdx,QWORD PTR [rsp+0x278]
 100548b:	mov    ecx,DWORD PTR [rsp+0x250]
 1005492:	call   QWORD PTR [rsp+0x288]
 1005499:	mov    DWORD PTR [rsp+0x25c],eax
 10054a0:	cmp    QWORD PTR [rsp+0x278],0x0
 10054a9:	je     0x10054bf
 10054ab:	mov    eax,DWORD PTR [rsp+0x250]
 10054b2:	cmp    DWORD PTR [rsp+0x25c],eax
 10054b9:	jae    0x1005362
 10054bf:	cmp    QWORD PTR [rsp+0x278],0x0
 10054c8:	je     0x10054d9
 10054ca:	mov    rax,QWORD PTR [rsp+0x278]
 10054d2:	movzx  eax,WORD PTR [rax]
 10054d5:	test   eax,eax
 10054d7:	jne    0x1005503
 10054d9:	lea    rcx,[rsp+0x40]
 10054de:	call   QWORD PTR [rsp+0x268]
 10054e5:	mov    DWORD PTR [rsp+0x258],eax
 10054ec:	cmp    DWORD PTR [rsp+0x258],0x0
 10054f4:	jne    0x1005501
 10054f6:	mov    DWORD PTR [rsp+0x274],0x1
 1005501:	jmp    0x1005577
 1005503:	mov    DWORD PTR [rsp+0x28],0xffffffff
 100550b:	lea    rax,[rsp+0x40]
 1005510:	mov    QWORD PTR [rsp+0x20],rax
 1005515:	mov    r9d,0xffffffff
 100551b:	mov    r8,QWORD PTR [rsp+0x278]
 1005523:	mov    edx,0x1
 1005528:	mov    ecx,DWORD PTR [rsp+0x254]
 100552f:	call   QWORD PTR [rip+0xffffffffffffbbc3]        # 0x10010f8
 1005535:	cmp    eax,0x2
 1005538:	je     0x100556c
 100553a:	mov    DWORD PTR [rsp+0x274],0x1
 1005545:	call   QWORD PTR [rip+0xffffffffffffbde5]        # 0x1001330
 100554b:	mov    r8,QWORD PTR [rsp+0x278]
 1005553:	xor    edx,edx
 1005555:	mov    rcx,rax
 1005558:	call   QWORD PTR [rip+0xffffffffffffbbea]        # 0x1001148
 100555e:	mov    QWORD PTR [rsp+0x278],0x0
 100556a:	jmp    0x1005577
 100556c:	mov    DWORD PTR [rsp+0x258],0x1
 1005577:	cmp    DWORD PTR [rsp+0x274],0x0
 100557f:	je     0x100599c
 1005585:	xor    r8d,r8d
 1005588:	xor    edx,edx
 100558a:	lea    rcx,[rip+0xffffffffffffc50f]        # 0x1001aa0
 1005591:	call   QWORD PTR [rip+0xffffffffffffbc31]        # 0x10011c8
 1005597:	mov    DWORD PTR [rsp+0x25c],eax
 100559e:	mov    eax,DWORD PTR [rsp+0x25c]
 10055a5:	mov    DWORD PTR [rsp+0x250],eax
 10055ac:	cmp    DWORD PTR [rsp+0x250],0x0
 10055b4:	jne    0x10055d4
 10055b6:	lea    rdx,[rsp+0x40]
 10055bb:	lea    rcx,[rip+0xffffffffffffc4de]        # 0x1001aa0
 10055c2:	call   QWORD PTR [rip+0xffffffffffffbbf0]        # 0x10011b8
 10055c8:	mov    DWORD PTR [rsp+0x258],eax
 10055cf:	jmp    0x100599c
 10055d4:	mov    DWORD PTR [rsp+0x2a8],0x0
 10055df:	mov    QWORD PTR [rsp+0x2a0],0x0
 10055eb:	mov    DWORD PTR [rsp+0x298],0x0
 10055f6:	lea    rcx,[rsp+0x40]
 10055fb:	call   QWORD PTR [rip+0xffffffffffffbcdf]        # 0x10012e0
 1005601:	add    eax,0x1
 1005604:	mov    DWORD PTR [rsp+0x29c],eax
 100560b:	mov    eax,DWORD PTR [rsp+0x25c]
 1005612:	mov    DWORD PTR [rsp+0x250],eax
 1005619:	lea    rcx,[rsp+0x40]
 100561e:	call   QWORD PTR [rip+0xffffffffffffbcbc]        # 0x10012e0
 1005624:	mov    ecx,DWORD PTR [rsp+0x250]
 100562b:	lea    eax,[rcx+rax*1+0x2]
 100562f:	mov    DWORD PTR [rsp+0x250],eax
 1005636:	cmp    QWORD PTR [rsp+0x278],0x0
 100563f:	je     0x10056d6
 1005645:	mov    QWORD PTR [rsp+0x2b0],0x0
 1005651:	mov    eax,DWORD PTR [rsp+0x250]
 1005658:	shl    rax,1
 100565b:	mov    QWORD PTR [rsp+0x2d8],rax
 1005663:	call   QWORD PTR [rip+0xffffffffffffbcc7]        # 0x1001330
 1005669:	mov    rcx,QWORD PTR [rsp+0x2d8]
 1005671:	mov    r9,rcx
 1005674:	mov    r8,QWORD PTR [rsp+0x278]
 100567c:	mov    edx,0x8
 1005681:	mov    rcx,rax
 1005684:	call   QWORD PTR [rip+0xffffffffffffbac6]        # 0x1001150
 100568a:	mov    QWORD PTR [rsp+0x2b0],rax
 1005692:	cmp    QWORD PTR [rsp+0x2b0],0x0
 100569b:	jne    0x10056c4
 100569d:	call   QWORD PTR [rip+0xffffffffffffbc8d]        # 0x1001330
 10056a3:	mov    r8,QWORD PTR [rsp+0x278]
 10056ab:	xor    edx,edx
 10056ad:	mov    rcx,rax
 10056b0:	call   QWORD PTR [rip+0xffffffffffffba92]        # 0x1001148
 10056b6:	mov    QWORD PTR [rsp+0x278],0x0
 10056c2:	jmp    0x10056d4
 10056c4:	mov    rax,QWORD PTR [rsp+0x2b0]
 10056cc:	mov    QWORD PTR [rsp+0x278],rax
 10056d4:	jmp    0x100570f
 10056d6:	mov    eax,DWORD PTR [rsp+0x250]
 10056dd:	shl    rax,1
 10056e0:	mov    QWORD PTR [rsp+0x2e0],rax
 10056e8:	call   QWORD PTR [rip+0xffffffffffffbc42]        # 0x1001330
 10056ee:	mov    rcx,QWORD PTR [rsp+0x2e0]
 10056f6:	mov    r8,rcx
 10056f9:	mov    edx,0x8
 10056fe:	mov    rcx,rax
 1005701:	call   QWORD PTR [rip+0xffffffffffffbab9]        # 0x10011c0
 1005707:	mov    QWORD PTR [rsp+0x278],rax
 100570f:	cmp    QWORD PTR [rsp+0x278],0x0
 1005718:	je     0x100573e
 100571a:	mov    r8d,DWORD PTR [rsp+0x250]
 1005722:	mov    rdx,QWORD PTR [rsp+0x278]
 100572a:	lea    rcx,[rip+0xffffffffffffc36f]        # 0x1001aa0
 1005731:	call   QWORD PTR [rip+0xffffffffffffba91]        # 0x10011c8
 1005737:	mov    DWORD PTR [rsp+0x25c],eax
 100573e:	cmp    QWORD PTR [rsp+0x278],0x0
 1005747:	je     0x100575d
 1005749:	mov    eax,DWORD PTR [rsp+0x250]
 1005750:	cmp    DWORD PTR [rsp+0x25c],eax
 1005757:	jae    0x100560b
 100575d:	mov    rax,QWORD PTR [rsp+0x278]
 1005765:	mov    QWORD PTR [rsp+0x2a0],rax
 100576d:	mov    eax,DWORD PTR [rsp+0x25c]
 1005774:	add    eax,0x1
 1005777:	mov    DWORD PTR [rsp+0x298],eax
 100577e:	cmp    DWORD PTR [rsp+0x2a8],0x0
 1005786:	jne    0x10058ba
 100578c:	mov    eax,DWORD PTR [rsp+0x29c]
 1005793:	cmp    DWORD PTR [rsp+0x298],eax
 100579a:	jb     0x10058ba
 10057a0:	mov    DWORD PTR [rsp+0x2bc],0x0
 10057ab:	mov    DWORD PTR [rsp+0x2b8],0x0
 10057b6:	mov    WORD PTR [rsp+0x2c0],0x0
 10057c0:	mov    eax,DWORD PTR [rsp+0x2bc]
 10057c7:	mov    rcx,QWORD PTR [rsp+0x2a0]
 10057cf:	movzx  eax,WORD PTR [rcx+rax*2]
 10057d3:	mov    WORD PTR [rsp+0x2c0],ax
 10057db:	movzx  eax,WORD PTR [rsp+0x2c0]
 10057e3:	mov    ecx,DWORD PTR [rsp+0x2bc]
 10057ea:	movzx  ecx,WORD PTR [rsp+rcx*2+0x40]
 10057ef:	cmp    eax,ecx
 10057f1:	jne    0x1005800
 10057f3:	mov    DWORD PTR [rsp+0x2e8],0x1
 10057fe:	jmp    0x100580b
 1005800:	mov    DWORD PTR [rsp+0x2e8],0x0
 100580b:	mov    eax,DWORD PTR [rsp+0x2e8]
 1005812:	mov    DWORD PTR [rsp+0x2b8],eax
 1005819:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1005821:	je     0x100584e
 1005823:	mov    eax,DWORD PTR [rsp+0x29c]
 100582a:	sub    eax,0x1
 100582d:	cmp    DWORD PTR [rsp+0x2bc],eax
 1005834:	jne    0x1005838
 1005836:	jmp    0x100584e
 1005838:	mov    eax,DWORD PTR [rsp+0x2bc]
 100583f:	add    eax,0x1
 1005842:	mov    DWORD PTR [rsp+0x2bc],eax
 1005849:	jmp    0x10057c0
 100584e:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1005856:	je     0x1005865
 1005858:	mov    DWORD PTR [rsp+0x2a8],0x1
 1005863:	jmp    0x1005890
 1005865:	mov    eax,DWORD PTR [rsp+0x29c]
 100586c:	sub    eax,0x1
 100586f:	cmp    DWORD PTR [rsp+0x2bc],eax
 1005876:	jne    0x1005890
 1005878:	movzx  eax,WORD PTR [rsp+0x2c0]
 1005880:	cmp    eax,0x3b
 1005883:	jne    0x1005890
 1005885:	mov    DWORD PTR [rsp+0x2a8],0x1
 1005890:	mov    rax,QWORD PTR [rsp+0x2a0]
 1005898:	add    rax,0x2
 100589c:	mov    QWORD PTR [rsp+0x2a0],rax
 10058a4:	mov    eax,DWORD PTR [rsp+0x298]
 10058ab:	sub    eax,0x1
 10058ae:	mov    DWORD PTR [rsp+0x298],eax
 10058b5:	jmp    0x100577e
 10058ba:	cmp    DWORD PTR [rsp+0x2a8],0x0
 10058c2:	je     0x10058d4
 10058c4:	mov    DWORD PTR [rsp+0x258],0x1
 10058cf:	jmp    0x100599c
 10058d4:	mov    eax,DWORD PTR [rsp+0x250]
 10058db:	shl    rax,1
 10058de:	mov    QWORD PTR [rsp+0x2f0],rax
 10058e6:	call   QWORD PTR [rip+0xffffffffffffba44]        # 0x1001330
 10058ec:	mov    rcx,QWORD PTR [rsp+0x2f0]
 10058f4:	mov    r8,rcx
 10058f7:	mov    edx,0x8
 10058fc:	mov    rcx,rax
 10058ff:	call   QWORD PTR [rip+0xffffffffffffb8bb]        # 0x10011c0
 1005905:	mov    QWORD PTR [rsp+0x260],rax
 100590d:	cmp    QWORD PTR [rsp+0x278],0x0
 1005916:	je     0x100599c
 100591c:	cmp    QWORD PTR [rsp+0x260],0x0
 1005925:	je     0x100599c
 1005927:	mov    eax,DWORD PTR [rsp+0x250]
 100592e:	lea    r8,[rsp+0x40]
 1005933:	mov    rdx,rax
 1005936:	mov    rcx,QWORD PTR [rsp+0x260]
 100593e:	call   0x1005ad0
 1005943:	mov    eax,DWORD PTR [rsp+0x250]
 100594a:	lea    r8,[rip+0xffffffffffffc147]        # 0x1001a98
 1005951:	mov    rdx,rax
 1005954:	mov    rcx,QWORD PTR [rsp+0x260]
 100595c:	call   0x1005b40
 1005961:	mov    eax,DWORD PTR [rsp+0x250]
 1005968:	mov    r8,QWORD PTR [rsp+0x278]
 1005970:	mov    rdx,rax
 1005973:	mov    rcx,QWORD PTR [rsp+0x260]
 100597b:	call   0x1005b40
 1005980:	mov    rdx,QWORD PTR [rsp+0x260]
 1005988:	lea    rcx,[rip+0xffffffffffffc111]        # 0x1001aa0
 100598f:	call   QWORD PTR [rip+0xffffffffffffb823]        # 0x10011b8
 1005995:	mov    DWORD PTR [rsp+0x258],eax
 100599c:	cmp    QWORD PTR [rsp+0x278],0x0
 10059a5:	je     0x10059cc
 10059a7:	call   QWORD PTR [rip+0xffffffffffffb983]        # 0x1001330
 10059ad:	mov    r8,QWORD PTR [rsp+0x278]
 10059b5:	xor    edx,edx
 10059b7:	mov    rcx,rax
 10059ba:	call   QWORD PTR [rip+0xffffffffffffb788]        # 0x1001148
 10059c0:	mov    QWORD PTR [rsp+0x278],0x0
 10059cc:	cmp    QWORD PTR [rsp+0x260],0x0
 10059d5:	je     0x10059fc
 10059d7:	call   QWORD PTR [rip+0xffffffffffffb953]        # 0x1001330
 10059dd:	mov    r8,QWORD PTR [rsp+0x260]
 10059e5:	xor    edx,edx
 10059e7:	mov    rcx,rax
 10059ea:	call   QWORD PTR [rip+0xffffffffffffb758]        # 0x1001148
 10059f0:	mov    QWORD PTR [rsp+0x260],0x0
 10059fc:	cmp    QWORD PTR [rsp+0x280],0x0
 1005a05:	je     0x1005a14
 1005a07:	mov    rcx,QWORD PTR [rsp+0x280]
 1005a0f:	call   0x1006a70
 1005a14:	mov    eax,DWORD PTR [rsp+0x258]
 1005a1b:	mov    rcx,QWORD PTR [rsp+0x2f8]
 1005a23:	xor    rcx,rsp
 1005a26:	call   0x1004cb0
 1005a2b:	add    rsp,0x308
 1005a32:	ret    
 1005a33:	int3   
 1005a34:	int3   
 1005a35:	int3   
 1005a36:	int3   
 1005a37:	int3   
 1005a38:	int3   
 1005a39:	int3   
 1005a3a:	int3   
 1005a3b:	int3   
 1005a3c:	int3   
 1005a3d:	int3   
 1005a3e:	int3   
 1005a3f:	int3   
 1005a40:	rex push rbp
 1005a42:	sub    rsp,0x30
 1005a46:	mov    rbp,rdx
 1005a49:	cmp    QWORD PTR [rbp+0x278],0x0
 1005a51:	je     0x1005a76
 1005a53:	call   QWORD PTR [rip+0xffffffffffffb8d7]        # 0x1001330
 1005a59:	mov    r8,QWORD PTR [rbp+0x278]
 1005a60:	xor    edx,edx
 1005a62:	mov    rcx,rax
 1005a65:	call   QWORD PTR [rip+0xffffffffffffb6dd]        # 0x1001148
 1005a6b:	mov    QWORD PTR [rbp+0x278],0x0
 1005a76:	cmp    QWORD PTR [rbp+0x260],0x0
 1005a7e:	je     0x1005aa3
 1005a80:	call   QWORD PTR [rip+0xffffffffffffb8aa]        # 0x1001330
 1005a86:	mov    r8,QWORD PTR [rbp+0x260]
 1005a8d:	xor    edx,edx
 1005a8f:	mov    rcx,rax
 1005a92:	call   QWORD PTR [rip+0xffffffffffffb6b0]        # 0x1001148
 1005a98:	mov    QWORD PTR [rbp+0x260],0x0
 1005aa3:	cmp    QWORD PTR [rbp+0x280],0x0
 1005aab:	je     0x1005ab9
 1005aad:	mov    rcx,QWORD PTR [rbp+0x280]
 1005ab4:	call   0x1006a70
 1005ab9:	add    rsp,0x30
 1005abd:	pop    rbp
 1005abe:	ret    
 1005abf:	int3   
 1005ac0:	int3   
 1005ac1:	int3   
 1005ac2:	int3   
 1005ac3:	int3   
 1005ac4:	int3   
 1005ac5:	int3   
 1005ac6:	int3   
 1005ac7:	int3   
 1005ac8:	int3   
 1005ac9:	int3   
 1005aca:	int3   
 1005acb:	int3   
 1005acc:	int3   
 1005acd:	int3   
 1005ace:	int3   
 1005acf:	int3   
 1005ad0:	mov    QWORD PTR [rsp+0x18],r8
 1005ad5:	mov    QWORD PTR [rsp+0x10],rdx
 1005ada:	mov    QWORD PTR [rsp+0x8],rcx
 1005adf:	sub    rsp,0x48
 1005ae3:	mov    r8d,0x7fffffff
 1005ae9:	mov    rdx,QWORD PTR [rsp+0x58]
 1005aee:	mov    rcx,QWORD PTR [rsp+0x50]
 1005af3:	call   0x1005bd0
 1005af8:	mov    DWORD PTR [rsp+0x30],eax
 1005afc:	cmp    DWORD PTR [rsp+0x30],0x0
 1005b01:	jl     0x1005b27
 1005b03:	mov    QWORD PTR [rsp+0x20],0x7ffffffe
 1005b0c:	mov    r9,QWORD PTR [rsp+0x60]
 1005b11:	xor    r8d,r8d
 1005b14:	mov    rdx,QWORD PTR [rsp+0x58]
 1005b19:	mov    rcx,QWORD PTR [rsp+0x50]
 1005b1e:	call   0x1005d40
 1005b23:	mov    DWORD PTR [rsp+0x30],eax
 1005b27:	mov    eax,DWORD PTR [rsp+0x30]
 1005b2b:	add    rsp,0x48
 1005b2f:	ret    
 1005b30:	int3   
 1005b31:	int3   
 1005b32:	int3   
 1005b33:	int3   
 1005b34:	int3   
 1005b35:	int3   
 1005b36:	int3   
 1005b37:	int3   
 1005b38:	int3   
 1005b39:	int3   
 1005b3a:	int3   
 1005b3b:	int3   
 1005b3c:	int3   
 1005b3d:	int3   
 1005b3e:	int3   
 1005b3f:	int3   
 1005b40:	mov    QWORD PTR [rsp+0x18],r8
 1005b45:	mov    QWORD PTR [rsp+0x10],rdx
 1005b4a:	mov    QWORD PTR [rsp+0x8],rcx
 1005b4f:	sub    rsp,0x48
 1005b53:	mov    r9d,0x7fffffff
 1005b59:	lea    r8,[rsp+0x38]
 1005b5e:	mov    rdx,QWORD PTR [rsp+0x58]
 1005b63:	mov    rcx,QWORD PTR [rsp+0x50]
 1005b68:	call   0x1005c20
 1005b6d:	mov    DWORD PTR [rsp+0x30],eax
 1005b71:	cmp    DWORD PTR [rsp+0x30],0x0
 1005b76:	jl     0x1005bb3
 1005b78:	mov    rax,QWORD PTR [rsp+0x38]
 1005b7d:	mov    rcx,QWORD PTR [rsp+0x58]
 1005b82:	sub    rcx,rax
 1005b85:	mov    rax,rcx
 1005b88:	mov    rcx,QWORD PTR [rsp+0x50]
 1005b8d:	mov    rdx,QWORD PTR [rsp+0x38]
 1005b92:	lea    rcx,[rcx+rdx*2]
 1005b96:	mov    QWORD PTR [rsp+0x20],0x7fffffff
 1005b9f:	mov    r9,QWORD PTR [rsp+0x60]
 1005ba4:	xor    r8d,r8d
 1005ba7:	mov    rdx,rax
 1005baa:	call   0x1005d40
 1005baf:	mov    DWORD PTR [rsp+0x30],eax
 1005bb3:	mov    eax,DWORD PTR [rsp+0x30]
 1005bb7:	add    rsp,0x48
 1005bbb:	ret    
 1005bbc:	int3   
 1005bbd:	int3   
 1005bbe:	int3   
 1005bbf:	int3   
 1005bc0:	int3   
 1005bc1:	int3   
 1005bc2:	int3   
 1005bc3:	int3   
 1005bc4:	int3   
 1005bc5:	int3   
 1005bc6:	int3   
 1005bc7:	int3   
 1005bc8:	int3   
 1005bc9:	int3   
 1005bca:	int3   
 1005bcb:	int3   
 1005bcc:	int3   
 1005bcd:	int3   
 1005bce:	int3   
 1005bcf:	int3   
 1005bd0:	mov    QWORD PTR [rsp+0x18],r8
 1005bd5:	mov    QWORD PTR [rsp+0x10],rdx
 1005bda:	mov    QWORD PTR [rsp+0x8],rcx
 1005bdf:	sub    rsp,0x18
 1005be3:	mov    DWORD PTR [rsp],0x0
 1005bea:	cmp    QWORD PTR [rsp+0x28],0x0
 1005bf0:	je     0x1005bfe
 1005bf2:	mov    rax,QWORD PTR [rsp+0x30]
 1005bf7:	cmp    QWORD PTR [rsp+0x28],rax
 1005bfc:	jbe    0x1005c05
 1005bfe:	mov    DWORD PTR [rsp],0x80070057
 1005c05:	mov    eax,DWORD PTR [rsp]
 1005c08:	add    rsp,0x18
 1005c0c:	ret    
 1005c0d:	int3   
 1005c0e:	int3   
 1005c0f:	int3   
 1005c10:	int3   
 1005c11:	int3   
 1005c12:	int3   
 1005c13:	int3   
 1005c14:	int3   
 1005c15:	int3   
 1005c16:	int3   
 1005c17:	int3   
 1005c18:	int3   
 1005c19:	int3   
 1005c1a:	int3   
 1005c1b:	int3   
 1005c1c:	int3   
 1005c1d:	int3   
 1005c1e:	int3   
 1005c1f:	int3   
 1005c20:	mov    QWORD PTR [rsp+0x20],r9
 1005c25:	mov    QWORD PTR [rsp+0x18],r8
 1005c2a:	mov    QWORD PTR [rsp+0x10],rdx
 1005c2f:	mov    QWORD PTR [rsp+0x8],rcx
 1005c34:	sub    rsp,0x38
 1005c38:	mov    r8,QWORD PTR [rsp+0x58]
 1005c3d:	mov    rdx,QWORD PTR [rsp+0x48]
 1005c42:	mov    rcx,QWORD PTR [rsp+0x40]
 1005c47:	call   0x1005bd0
 1005c4c:	mov    DWORD PTR [rsp+0x20],eax
 1005c50:	cmp    DWORD PTR [rsp+0x20],0x0
 1005c55:	jl     0x1005c71
 1005c57:	mov    r8,QWORD PTR [rsp+0x50]
 1005c5c:	mov    rdx,QWORD PTR [rsp+0x48]
 1005c61:	mov    rcx,QWORD PTR [rsp+0x40]
 1005c66:	call   0x1005c90
 1005c6b:	mov    DWORD PTR [rsp+0x20],eax
 1005c6f:	jmp    0x1005c7d
 1005c71:	mov    rax,QWORD PTR [rsp+0x50]
 1005c76:	mov    QWORD PTR [rax],0x0
 1005c7d:	mov    eax,DWORD PTR [rsp+0x20]
 1005c81:	add    rsp,0x38
 1005c85:	ret    
 1005c86:	int3   
 1005c87:	int3   
 1005c88:	int3   
 1005c89:	int3   
 1005c8a:	int3   
 1005c8b:	int3   
 1005c8c:	int3   
 1005c8d:	int3   
 1005c8e:	int3   
 1005c8f:	int3   
 1005c90:	mov    QWORD PTR [rsp+0x18],r8
 1005c95:	mov    QWORD PTR [rsp+0x10],rdx
 1005c9a:	mov    QWORD PTR [rsp+0x8],rcx
 1005c9f:	sub    rsp,0x18
 1005ca3:	mov    DWORD PTR [rsp+0x8],0x0
 1005cab:	mov    rax,QWORD PTR [rsp+0x28]
 1005cb0:	mov    QWORD PTR [rsp],rax
 1005cb4:	cmp    QWORD PTR [rsp+0x28],0x0
 1005cba:	je     0x1005ce6
 1005cbc:	mov    rax,QWORD PTR [rsp+0x20]
 1005cc1:	movzx  eax,WORD PTR [rax]
 1005cc4:	test   eax,eax
 1005cc6:	je     0x1005ce6
 1005cc8:	mov    rax,QWORD PTR [rsp+0x20]
 1005ccd:	add    rax,0x2
 1005cd1:	mov    QWORD PTR [rsp+0x20],rax
 1005cd6:	mov    rax,QWORD PTR [rsp+0x28]
 1005cdb:	sub    rax,0x1
 1005cdf:	mov    QWORD PTR [rsp+0x28],rax
 1005ce4:	jmp    0x1005cb4
 1005ce6:	cmp    QWORD PTR [rsp+0x28],0x0
 1005cec:	jne    0x1005cf6
 1005cee:	mov    DWORD PTR [rsp+0x8],0x80070057
 1005cf6:	cmp    QWORD PTR [rsp+0x30],0x0
 1005cfc:	je     0x1005d2a
 1005cfe:	cmp    DWORD PTR [rsp+0x8],0x0
 1005d03:	jl     0x1005d1e
 1005d05:	mov    rax,QWORD PTR [rsp+0x28]
 1005d0a:	mov    rcx,QWORD PTR [rsp]
 1005d0e:	sub    rcx,rax
 1005d11:	mov    rax,rcx
 1005d14:	mov    rcx,QWORD PTR [rsp+0x30]
 1005d19:	mov    QWORD PTR [rcx],rax
 1005d1c:	jmp    0x1005d2a
 1005d1e:	mov    rax,QWORD PTR [rsp+0x30]
 1005d23:	mov    QWORD PTR [rax],0x0
 1005d2a:	mov    eax,DWORD PTR [rsp+0x8]
 1005d2e:	add    rsp,0x18
 1005d32:	ret    
 1005d33:	int3   
 1005d34:	int3   
 1005d35:	int3   
 1005d36:	int3   
 1005d37:	int3   
 1005d38:	int3   
 1005d39:	int3   
 1005d3a:	int3   
 1005d3b:	int3   
 1005d3c:	int3   
 1005d3d:	int3   
 1005d3e:	int3   
 1005d3f:	int3   
 1005d40:	mov    QWORD PTR [rsp+0x20],r9
 1005d45:	mov    QWORD PTR [rsp+0x18],r8
 1005d4a:	mov    QWORD PTR [rsp+0x10],rdx
 1005d4f:	mov    QWORD PTR [rsp+0x8],rcx
 1005d54:	sub    rsp,0x18
 1005d58:	mov    DWORD PTR [rsp+0x8],0x0
 1005d60:	mov    QWORD PTR [rsp],0x0
 1005d68:	cmp    QWORD PTR [rsp+0x28],0x0
 1005d6e:	je     0x1005dda
 1005d70:	cmp    QWORD PTR [rsp+0x40],0x0
 1005d76:	je     0x1005dda
 1005d78:	mov    rax,QWORD PTR [rsp+0x38]
 1005d7d:	movzx  eax,WORD PTR [rax]
 1005d80:	test   eax,eax
 1005d82:	je     0x1005dda
 1005d84:	mov    rax,QWORD PTR [rsp+0x20]
 1005d89:	mov    rcx,QWORD PTR [rsp+0x38]
 1005d8e:	movzx  ecx,WORD PTR [rcx]
 1005d91:	mov    WORD PTR [rax],cx
 1005d94:	mov    rax,QWORD PTR [rsp+0x20]
 1005d99:	add    rax,0x2
 1005d9d:	mov    QWORD PTR [rsp+0x20],rax
 1005da2:	mov    rax,QWORD PTR [rsp+0x38]
 1005da7:	add    rax,0x2
 1005dab:	mov    QWORD PTR [rsp+0x38],rax
 1005db0:	mov    rax,QWORD PTR [rsp+0x28]
 1005db5:	sub    rax,0x1
 1005db9:	mov    QWORD PTR [rsp+0x28],rax
 1005dbe:	mov    rax,QWORD PTR [rsp+0x40]
 1005dc3:	sub    rax,0x1
 1005dc7:	mov    QWORD PTR [rsp+0x40],rax
 1005dcc:	mov    rax,QWORD PTR [rsp]
 1005dd0:	add    rax,0x1
 1005dd4:	mov    QWORD PTR [rsp],rax
 1005dd8:	jmp    0x1005d68
 1005dda:	cmp    QWORD PTR [rsp+0x28],0x0
 1005de0:	jne    0x1005e04
 1005de2:	mov    rax,QWORD PTR [rsp+0x20]
 1005de7:	sub    rax,0x2
 1005deb:	mov    QWORD PTR [rsp+0x20],rax
 1005df0:	mov    rax,QWORD PTR [rsp]
 1005df4:	sub    rax,0x1
 1005df8:	mov    QWORD PTR [rsp],rax
 1005dfc:	mov    DWORD PTR [rsp+0x8],0x8007007a
 1005e04:	mov    rax,QWORD PTR [rsp+0x20]
 1005e09:	mov    WORD PTR [rax],0x0
 1005e0e:	cmp    QWORD PTR [rsp+0x30],0x0
 1005e14:	je     0x1005e22
 1005e16:	mov    rax,QWORD PTR [rsp+0x30]
 1005e1b:	mov    rcx,QWORD PTR [rsp]
 1005e1f:	mov    QWORD PTR [rax],rcx
 1005e22:	mov    eax,DWORD PTR [rsp+0x8]
 1005e26:	add    rsp,0x18
 1005e2a:	ret    
 1005e2b:	int3   
 1005e2c:	int3   
 1005e2d:	int3   
 1005e2e:	int3   
 1005e2f:	int3   
 1005e30:	int3   
 1005e31:	int3   
 1005e32:	int3   
 1005e33:	int3   
 1005e34:	int3   
 1005e35:	int3   
 1005e36:	int3   
 1005e37:	int3   
 1005e38:	int3   
 1005e39:	int3   
 1005e3a:	int3   
 1005e3b:	int3   
 1005e3c:	int3   
 1005e3d:	int3   
 1005e3e:	int3   
 1005e3f:	int3   
 1005e40:	mov    QWORD PTR [rsp+0x8],rcx
 1005e45:	mov    QWORD PTR [rsp+0x10],rdx
 1005e4a:	mov    QWORD PTR [rsp+0x18],r8
 1005e4f:	mov    QWORD PTR [rsp+0x20],r9
 1005e54:	ret    
 1005e55:	int3   
 1005e56:	int3   
 1005e57:	int3   
 1005e58:	int3   
 1005e59:	int3   
 1005e5a:	int3   
 1005e5b:	int3   
 1005e5c:	int3   
 1005e5d:	int3   
 1005e5e:	int3   
 1005e5f:	int3   
 1005e60:	sub    rsp,0x38
 1005e64:	cmp    DWORD PTR [rip+0xdef5],0x0        # 0x1013d60
 1005e6b:	je     0x1005e7b
 1005e6d:	mov    r8,QWORD PTR [rsp+0x60]
 1005e72:	add    rsp,0x38
 1005e76:	jmp    0x1006c10
 1005e7b:	mov    rax,QWORD PTR [rsp+0x60]
 1005e80:	mov    QWORD PTR [rsp+0x20],rax
 1005e85:	call   QWORD PTR [rip+0xffffffffffffb21d]        # 0x10010a8
 1005e8b:	add    rsp,0x38
 1005e8f:	ret    
 1005e90:	int3   
 1005e91:	int3   
 1005e92:	int3   
 1005e93:	int3   
 1005e94:	int3   
 1005e95:	int3   
 1005e96:	int3   
 1005e97:	int3   
 1005e98:	int3   
 1005e99:	int3   
 1005e9a:	int3   
 1005e9b:	int3   
 1005e9c:	int3   
 1005e9d:	int3   
 1005e9e:	int3   
 1005e9f:	int3   
 1005ea0:	mov    QWORD PTR [rsp+0x20],r9
 1005ea5:	push   rbx
 1005ea6:	push   r14
 1005ea8:	sub    rsp,0x58
 1005eac:	cmp    DWORD PTR [rip+0xdead],0x0        # 0x1013d60
 1005eb3:	mov    r14,r9
 1005eb6:	mov    rbx,rdx
 1005eb9:	je     0x100619b
 1005ebf:	mov    QWORD PTR [rsp+0x70],rbp
 1005ec4:	mov    QWORD PTR [rsp+0x78],rsi
 1005ec9:	call   0x1006490
 1005ece:	test   rbx,rbx
 1005ed1:	je     0x1005ed9
 1005ed3:	cmp    WORD PTR [rbx],0x0
 1005ed7:	jne    0x1005ee0
 1005ed9:	lea    rbx,[rip+0xffffffffffffbec4]        # 0x1001da4
 1005ee0:	mov    rdx,rbx
 1005ee3:	mov    rcx,rax
 1005ee6:	call   0x10068a0
 1005eeb:	mov    rsi,rax
 1005eee:	test   rax,rax
 1005ef1:	je     0x100617a
 1005ef7:	mov    eax,0xffff
 1005efc:	cmp    WORD PTR [rsi],ax
 1005eff:	jne    0x1005f12
 1005f01:	cmp    WORD PTR [rsi+0x2],0x0
 1005f06:	jne    0x1005f12
 1005f08:	mov    ebp,0x2
 1005f0d:	jmp    0x1006164
 1005f12:	mov    QWORD PTR [rsp+0x80],rdi
 1005f1a:	mov    QWORD PTR [rsp+0x50],r12
 1005f1f:	xor    ebp,ebp
 1005f21:	lea    r9,[rsp+0x30]
 1005f26:	lea    rdx,[rip+0xffffffffffffbe7b]        # 0x1001da8
 1005f2d:	xor    r8d,r8d
 1005f30:	mov    rcx,rsi
 1005f33:	mov    QWORD PTR [rsp+0x48],r13
 1005f38:	lea    r12d,[rbp+0x1]
 1005f3c:	mov    QWORD PTR [rsp+0x40],r15
 1005f41:	mov    DWORD PTR [rsp+0x30],ebp
 1005f45:	call   0x100e7aa
 1005f4a:	lea    edi,[rbp+0x4]
 1005f4d:	cmp    eax,r12d
 1005f50:	jne    0x1005f5f
 1005f52:	mov    r12d,edi
 1005f55:	lea    r13,[rsp+0x30]
 1005f5a:	jmp    0x1006113
 1005f5f:	lea    rax,[rip+0xffffffffffffbe5a]        # 0x1001dc0
 1005f66:	mov    r9d,edi
 1005f69:	mov    r8,rsi
 1005f6c:	mov    edx,r12d
 1005f6f:	mov    ecx,0x400
 1005f74:	mov    DWORD PTR [rsp+0x28],edi
 1005f78:	mov    QWORD PTR [rsp+0x20],rax
 1005f7d:	call   QWORD PTR [rip+0xffffffffffffb175]        # 0x10010f8
 1005f83:	cmp    eax,0x2
 1005f86:	jne    0x1005f8e
 1005f88:	lea    r12d,[rax+0x1]
 1005f8c:	jmp    0x1006009
 1005f8e:	lea    rax,[rip+0xffffffffffffbe3b]        # 0x1001dd0
 1005f95:	mov    r9d,edi
 1005f98:	mov    r8,rsi
 1005f9b:	mov    edx,r12d
 1005f9e:	mov    ecx,0x400
 1005fa3:	mov    DWORD PTR [rsp+0x28],edi
 1005fa7:	mov    QWORD PTR [rsp+0x20],rax
 1005fac:	call   QWORD PTR [rip+0xffffffffffffb146]        # 0x10010f8
 1005fb2:	cmp    eax,0x2
 1005fb5:	jne    0x10060f5
 1005fbb:	lea    rbx,[rsi+0x8]
 1005fbf:	lea    r9,[rsp+0x34]
 1005fc4:	lea    rdx,[rip+0xffffffffffffbe15]        # 0x1001de0
 1005fcb:	mov    rcx,rbx
 1005fce:	xor    r8d,r8d
 1005fd1:	call   0x100e7aa
 1005fd6:	cmp    eax,r12d
 1005fd9:	jne    0x10060f5
 1005fdf:	cmp    WORD PTR [rbx],0x3a
 1005fe3:	je     0x1005ffc
 1005fe5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1005ff0:	add    rbx,0x2
 1005ff4:	inc    edi
 1005ff6:	cmp    WORD PTR [rbx],0x3a
 1005ffa:	jne    0x1005ff0
 1005ffc:	mov    r12d,DWORD PTR [rsp+0x34]
 1006001:	inc    edi
 1006003:	je     0x10060f5
 1006009:	movsxd r8,edi
 100600c:	or     rcx,0xffffffffffffffff
 1006010:	inc    rcx
 1006013:	cmp    WORD PTR [rsi+rcx*2],bp
 1006017:	jne    0x1006010
 1006019:	sub    rcx,r8
 100601c:	lea    rbx,[rsi+r8*2]
 1006020:	movabs rax,0xaaaaaaaaaaaaaaab
 100602a:	lea    r9,[rsp+0x30]
 100602f:	xor    r8d,r8d
 1006032:	mov    r13,rsi
 1006035:	mul    rcx
 1006038:	mov    rdi,rdx
 100603b:	lea    rdx,[rip+0xffffffffffffbdae]        # 0x1001df0
 1006042:	mov    rcx,rbx
 1006045:	shr    rdi,1
 1006048:	mov    r15d,ebp
 100604b:	inc    edi
 100604d:	call   0x100e7aa
 1006052:	cmp    eax,0x1
 1006055:	jne    0x10060c5
 1006057:	mov    r14,rsi
 100605a:	nop    WORD PTR [rax+rax*1+0x0]
 1006060:	movzx  eax,WORD PTR [rbx]
 1006063:	cmp    ax,0x2c
 1006067:	je     0x1006083
 1006069:	nop    DWORD PTR [rax+0x0]
 1006070:	test   ax,ax
 1006073:	je     0x1006083
 1006075:	movzx  eax,WORD PTR [rbx+0x2]
 1006079:	add    rbx,0x2
 100607d:	cmp    ax,0x2c
 1006081:	jne    0x1006070
 1006083:	movzx  eax,BYTE PTR [rsp+0x30]
 1006088:	inc    r14
 100608b:	inc    r15d
 100608e:	mov    BYTE PTR [r14-0x1],al
 1006092:	cmp    WORD PTR [rbx],0x2c
 1006096:	jne    0x100609c
 1006098:	add    rbx,0x2
 100609c:	cmp    WORD PTR [rbx],bp
 100609f:	je     0x10060bd
 10060a1:	lea    r9,[rsp+0x30]
 10060a6:	lea    rdx,[rip+0xffffffffffffbd43]        # 0x1001df0
 10060ad:	xor    r8d,r8d
 10060b0:	mov    rcx,rbx
 10060b3:	call   0x100e7aa
 10060b8:	cmp    eax,0x1
 10060bb:	je     0x1006060
 10060bd:	mov    r14,QWORD PTR [rsp+0x88]
 10060c5:	cmp    edi,r15d
 10060c8:	jne    0x10060ee
 10060ca:	cmp    r12d,0x1
 10060ce:	je     0x10060dc
 10060d0:	cmp    r12d,0x7
 10060d4:	je     0x10060dc
 10060d6:	cmp    r12d,0x2
 10060da:	jne    0x1006113
 10060dc:	test   dil,0x1
 10060e0:	jne    0x10060ee
 10060e2:	movsxd rax,r15d
 10060e5:	add    edi,0x2
 10060e8:	mov    WORD PTR [rax+rsi*1],bp
 10060ec:	jmp    0x1006113
 10060ee:	mov    ebp,0xd
 10060f3:	jmp    0x100614d
 10060f5:	or     rcx,0xffffffffffffffff
 10060f9:	nop    DWORD PTR [rax+0x0]
 1006100:	inc    rcx
 1006103:	cmp    WORD PTR [rsi+rcx*2],bp
 1006107:	jne    0x1006100
 1006109:	lea    edi,[rcx*2+0x2]
 1006110:	mov    r13,rsi
 1006113:	mov    rcx,QWORD PTR [rsp+0x90]
 100611b:	mov    rbx,QWORD PTR [rsp+0x98]
 1006123:	test   rcx,rcx
 1006126:	je     0x100613e
 1006128:	cmp    DWORD PTR [rbx],edi
 100612a:	jb     0x1006139
 100612c:	mov    r8d,edi
 100612f:	mov    rdx,r13
 1006132:	call   0x1004cd6
 1006137:	jmp    0x100613e
 1006139:	mov    ebp,0xea
 100613e:	test   r14,r14
 1006141:	je     0x1006146
 1006143:	mov    DWORD PTR [r14],r12d
 1006146:	test   rbx,rbx
 1006149:	je     0x100614d
 100614b:	mov    DWORD PTR [rbx],edi
 100614d:	mov    r13,QWORD PTR [rsp+0x48]
 1006152:	mov    r12,QWORD PTR [rsp+0x50]
 1006157:	mov    rdi,QWORD PTR [rsp+0x80]
 100615f:	mov    r15,QWORD PTR [rsp+0x40]
 1006164:	call   QWORD PTR [rip+0xffffffffffffb1c6]        # 0x1001330
 100616a:	mov    r8,rsi
 100616d:	xor    edx,edx
 100616f:	mov    rcx,rax
 1006172:	call   QWORD PTR [rip+0xffffffffffffafd0]        # 0x1001148
 1006178:	jmp    0x100617f
 100617a:	mov    ebp,0x8
 100617f:	mov    ecx,ebp
 1006181:	call   QWORD PTR [rip+0xffffffffffffafd9]        # 0x1001160
 1006187:	mov    rsi,QWORD PTR [rsp+0x78]
 100618c:	mov    eax,ebp
 100618e:	mov    rbp,QWORD PTR [rsp+0x70]
 1006193:	add    rsp,0x58
 1006197:	pop    r14
 1006199:	pop    rbx
 100619a:	ret    
 100619b:	mov    rax,QWORD PTR [rsp+0x98]
 10061a3:	mov    QWORD PTR [rsp+0x28],rax
 10061a8:	mov    rax,QWORD PTR [rsp+0x90]
 10061b0:	mov    QWORD PTR [rsp+0x20],rax
 10061b5:	call   QWORD PTR [rip+0xffffffffffffaee5]        # 0x10010a0
 10061bb:	add    rsp,0x58
 10061bf:	pop    r14
 10061c1:	pop    rbx
 10061c2:	ret    
 10061c3:	int3   
 10061c4:	int3   
 10061c5:	int3   
 10061c6:	int3   
 10061c7:	int3   
 10061c8:	int3   
 10061c9:	int3   
 10061ca:	int3   
 10061cb:	int3   
 10061cc:	int3   
 10061cd:	int3   
 10061ce:	int3   
 10061cf:	int3   
 10061d0:	rex push rbx
 10061d2:	push   rsi
 10061d3:	push   r15
 10061d5:	sub    rsp,0x40
 10061d9:	cmp    DWORD PTR [rip+0xdb80],0x0        # 0x1013d60
 10061e0:	mov    r15d,r8d
 10061e3:	mov    rbx,rdx
 10061e6:	je     0x10061f6
 10061e8:	mov    eax,0x1
 10061ed:	add    rsp,0x40
 10061f1:	pop    r15
 10061f3:	pop    rsi
 10061f4:	pop    rbx
 10061f5:	ret    
 10061f6:	mov    QWORD PTR [rsp+0x68],rdi
 10061fb:	mov    QWORD PTR [rsp+0x70],r12
 1006200:	mov    QWORD PTR [rsp+0x30],r14
 1006205:	call   0x1005e40
 100620a:	or     rdi,0xffffffffffffffff
 100620e:	test   rdx,rdx
 1006211:	je     0x1006222
 1006213:	mov    rax,rdi
 1006216:	inc    rax
 1006219:	cmp    WORD PTR [rdx+rax*2],0x0
 100621e:	jne    0x1006216
 1006220:	jmp    0x1006227
 1006222:	mov    eax,0x3
 1006227:	lea    r14d,[rax+0x1]
 100622b:	mov    r8d,0x104
 1006231:	lea    r12,[rip+0xdb48]        # 0x1013d80
 1006238:	sub    r8d,r14d
 100623b:	mov    rdx,r12
 100623e:	mov    QWORD PTR [rsp+0x60],rbp
 1006243:	mov    QWORD PTR [rsp+0x38],r13
 1006248:	call   QWORD PTR [rip+0xffffffffffffaf22]        # 0x1001170
 100624e:	mov    r11d,eax
 1006251:	test   eax,eax
 1006253:	je     0x10063df
 1006259:	lea    rcx,[r12-0x2]
 100625e:	lea    rcx,[rcx+r11*2]
 1006262:	call   0x1005e40
 1006267:	xor    r13d,r13d
 100626a:	mov    edx,r13d
 100626d:	mov    r8d,r13d
 1006270:	cmp    rcx,r12
 1006273:	jbe    0x1006298
 1006275:	test   r8,r8
 1006278:	jne    0x1006285
 100627a:	cmp    WORD PTR [rcx],0x2e
 100627e:	jne    0x100628d
 1006280:	mov    r8,rcx
 1006283:	jmp    0x100628d
 1006285:	cmp    WORD PTR [rcx],0x5c
 1006289:	cmove  rdx,rcx
 100628d:	sub    rcx,0x2
 1006291:	test   rdx,rdx
 1006294:	je     0x1006270
 1006296:	jmp    0x10062a1
 1006298:	test   rdx,rdx
 100629b:	je     0x10063df
 10062a1:	lea    rcx,[rdx+0x2]
 10062a5:	lea    rbp,[r8+0x2]
 10062a9:	mov    esi,0x1
 10062ae:	test   rbx,rbx
 10062b1:	je     0x10062c1
 10062b3:	lea    r8d,[r14+r14*1]
 10062b7:	mov    rdx,rbx
 10062ba:	call   0x1004cd6
 10062bf:	jmp    0x1006316
 10062c1:	mov    r9d,DWORD PTR [rip+0xceb0]        # 0x1013178
 10062c8:	mov    r8,QWORD PTR [rip+0xcea1]        # 0x1013170
 10062cf:	mov    rax,rcx
 10062d2:	sub    rax,r12
 10062d5:	mov    edx,esi
 10062d7:	sar    rax,1
 10062da:	sub    r11d,eax
 10062dd:	mov    DWORD PTR [rsp+0x28],r11d
 10062e2:	mov    QWORD PTR [rsp+0x20],rcx
 10062e7:	mov    ecx,0x400
 10062ec:	call   QWORD PTR [rip+0xffffffffffffae06]        # 0x10010f8
 10062f2:	lea    r8d,[r14+r14*1]
 10062f6:	lea    rdx,[rip+0xffffffffffffb97b]        # 0x1001c78
 10062fd:	cmp    eax,0x2
 1006300:	mov    ebx,r13d
 1006303:	mov    rcx,rbp
 1006306:	cmove  ebx,esi
 1006309:	call   0x1004cd6
 100630e:	test   ebx,ebx
 1006310:	jne    0x10063df
 1006316:	mov    rcx,r12
 1006319:	call   QWORD PTR [rip+0xffffffffffffae69]        # 0x1001188
 100631f:	cmp    eax,0xffffffff
 1006322:	je     0x10063df
 1006328:	lea    rbx,[rip+0xde71]        # 0x10141a0
 100632f:	mov    rdx,r12
 1006332:	mov    r8d,0x208
 1006338:	mov    rcx,rbx
 100633b:	call   0x1004cd6
 1006340:	mov    rax,rdi
 1006343:	inc    rax
 1006346:	cmp    WORD PTR [rbx+rax*2],r13w
 100634b:	jne    0x1006343
 100634d:	dec    rax
 1006350:	cmp    WORD PTR [rbx+rax*2],0x5c
 1006355:	lea    rax,[rbx+rax*2]
 1006359:	je     0x100636f
 100635b:	nop    DWORD PTR [rax+rax*1+0x0]
 1006360:	cmp    rax,rbx
 1006363:	jbe    0x100636f
 1006365:	sub    rax,0x2
 1006369:	cmp    WORD PTR [rax],0x5c
 100636d:	jne    0x1006360
 100636f:	mov    WORD PTR [rax],r13w
 1006373:	sub    rax,rbx
 1006376:	mov    rcx,rbx
 1006379:	sar    rax,1
 100637c:	inc    eax
 100637e:	mov    DWORD PTR [rip+0xd9e0],eax        # 0x1013d64
 1006384:	call   0x1005e40
 1006389:	lea    rbx,[rip+0xdc00]        # 0x1013f90
 1006390:	mov    rcx,rbx
 1006393:	mov    rdx,r12
 1006396:	mov    r8d,0x208
 100639c:	call   0x1004cd6
 10063a1:	inc    rdi
 10063a4:	cmp    WORD PTR [rbx+rdi*2],r13w
 10063a9:	jne    0x10063a1
 10063ab:	mov    eax,edi
 10063ad:	mov    rcx,rbx
 10063b0:	lea    rdx,[rbx+rax*2]
 10063b4:	mov    rax,QWORD PTR [rip+0xffffffffffffb7cd]        # 0x1001b88
 10063bb:	mov    QWORD PTR [rdx],rax
 10063be:	movzx  eax,WORD PTR [rip+0xffffffffffffb7cb]        # 0x1001b90
 10063c5:	mov    WORD PTR [rdx+0x8],ax
 10063c9:	call   0x1005e40
 10063ce:	mov    DWORD PTR [rip+0xd99b],r15d        # 0x1013d70
 10063d5:	mov    DWORD PTR [rip+0xd985],esi        # 0x1013d60
 10063db:	mov    eax,esi
 10063dd:	jmp    0x10063e1
 10063df:	xor    eax,eax
 10063e1:	mov    r13,QWORD PTR [rsp+0x38]
 10063e6:	mov    rbp,QWORD PTR [rsp+0x60]
 10063eb:	mov    rdi,QWORD PTR [rsp+0x68]
 10063f0:	mov    r12,QWORD PTR [rsp+0x70]
 10063f5:	mov    r14,QWORD PTR [rsp+0x30]
 10063fa:	add    rsp,0x40
 10063fe:	pop    r15
 1006400:	pop    rsi
 1006401:	pop    rbx
 1006402:	ret    
 1006403:	int3   
 1006404:	int3   
 1006405:	int3   
 1006406:	int3   
 1006407:	int3   
 1006408:	int3   
 1006409:	int3   
 100640a:	int3   
 100640b:	int3   
 100640c:	int3   
 100640d:	int3   
 100640e:	int3   
 100640f:	int3   
 1006410:	sub    rsp,0x58
 1006414:	lea    rdx,[rsp+0x20]
 1006419:	lea    rcx,[rip+0xfffffffffffffff0]        # 0x1006410
 1006420:	mov    r8d,0x30
 1006426:	call   QWORD PTR [rip+0xffffffffffffad2c]        # 0x1001158
 100642c:	test   rax,rax
 100642f:	jne    0x1006436
 1006431:	add    rsp,0x58
 1006435:	ret    
 1006436:	mov    QWORD PTR [rsp+0x50],rbx
 100643b:	mov    rbx,QWORD PTR [rsp+0x28]
 1006440:	xor    r8d,r8d
 1006443:	mov    rcx,rbx
 1006446:	xor    edx,edx
 1006448:	call   0x10061d0
 100644d:	test   eax,eax
 100644f:	jne    0x1006472
 1006451:	lea    r8d,[rax+0x1]
 1006455:	lea    rdx,[rip+0xffffffffffffb824]        # 0x1001c80
 100645c:	mov    rcx,rbx
 100645f:	call   0x10061d0
 1006464:	test   eax,eax
 1006466:	jne    0x1006472
 1006468:	mov    rbx,QWORD PTR [rsp+0x50]
 100646d:	add    rsp,0x58
 1006471:	ret    
 1006472:	mov    eax,0x1
 1006477:	mov    rbx,QWORD PTR [rsp+0x50]
 100647c:	add    rsp,0x58
 1006480:	ret    
 1006481:	int3   
 1006482:	int3   
 1006483:	int3   
 1006484:	int3   
 1006485:	int3   
 1006486:	int3   
 1006487:	int3   
 1006488:	int3   
 1006489:	int3   
 100648a:	int3   
 100648b:	int3   
 100648c:	int3   
 100648d:	int3   
 100648e:	int3   
 100648f:	int3   
 1006490:	rex push rbx
 1006492:	sub    rsp,0x20
 1006496:	cmp    DWORD PTR [rip+0xd8c3],0x0        # 0x1013d60
 100649d:	mov    rbx,rcx
 10064a0:	jne    0x10064a8
 10064a2:	call   QWORD PTR [rip+0xffffffffffffacc0]        # 0x1001168
 10064a8:	cmp    rbx,0xffffffff80000000
 10064af:	jne    0x10064be
 10064b1:	lea    rax,[rip+0xffffffffffffb7e8]        # 0x1001ca0
 10064b8:	add    rsp,0x20
 10064bc:	pop    rbx
 10064bd:	ret    
 10064be:	cmp    rbx,0xffffffff80000001
 10064c5:	jne    0x10064d4
 10064c7:	lea    rax,[rip+0xffffffffffffb7fa]        # 0x1001cc8
 10064ce:	add    rsp,0x20
 10064d2:	pop    rbx
 10064d3:	ret    
 10064d4:	cmp    rbx,0xffffffff80000002
 10064db:	jne    0x10064ea
 10064dd:	lea    rax,[rip+0xffffffffffffb80c]        # 0x1001cf0
 10064e4:	add    rsp,0x20
 10064e8:	pop    rbx
 10064e9:	ret    
 10064ea:	cmp    rbx,0xffffffff80000003
 10064f1:	jne    0x1006500
 10064f3:	lea    rax,[rip+0xffffffffffffb81e]        # 0x1001d18
 10064fa:	add    rsp,0x20
 10064fe:	pop    rbx
 10064ff:	ret    
 1006500:	cmp    rbx,0xffffffff80000004
 1006507:	jne    0x1006516
 1006509:	lea    rax,[rip+0xffffffffffffb820]        # 0x1001d30
 1006510:	add    rsp,0x20
 1006514:	pop    rbx
 1006515:	ret    
 1006516:	cmp    rbx,0xffffffff80000005
 100651d:	jne    0x100652c
 100651f:	lea    rax,[rip+0xffffffffffffb83a]        # 0x1001d60
 1006526:	add    rsp,0x20
 100652a:	pop    rbx
 100652b:	ret    
 100652c:	lea    rax,[rip+0xffffffffffffb855]        # 0x1001d88
 1006533:	cmp    rbx,0xffffffff80000006
 100653a:	je     0x100653f
 100653c:	mov    rax,rbx
 100653f:	add    rsp,0x20
 1006543:	pop    rbx
 1006544:	ret    
 1006545:	int3   
 1006546:	int3   
 1006547:	int3   
 1006548:	int3   
 1006549:	int3   
 100654a:	int3   
 100654b:	int3   
 100654c:	int3   
 100654d:	int3   
 100654e:	int3   
 100654f:	int3   
 1006550:	mov    QWORD PTR [rsp+0x8],rbx
 1006555:	mov    QWORD PTR [rsp+0x10],rbp
 100655a:	mov    QWORD PTR [rsp+0x18],rsi
 100655f:	push   rdi
 1006560:	push   r14
 1006562:	push   r15
 1006564:	sub    rsp,0x20
 1006568:	mov    rbp,rdx
 100656b:	call   0x1006490
 1006570:	or     rbx,0xffffffffffffffff
 1006574:	mov    r14,rax
 1006577:	mov    rsi,rbx
 100657a:	nop    WORD PTR [rax+rax*1+0x0]
 1006580:	inc    rsi
 1006583:	cmp    WORD PTR [rax+rsi*2],0x0
 1006588:	jne    0x1006580
 100658a:	add    rsi,rsi
 100658d:	nop    DWORD PTR [rax]
 1006590:	inc    rbx
 1006593:	cmp    WORD PTR [rbp+rbx*2+0x0],0x0
 1006599:	jne    0x1006590
 100659b:	add    rbx,rbx
 100659e:	lea    rdi,[rsi+0x4]
 10065a2:	call   QWORD PTR [rip+0xffffffffffffad88]        # 0x1001330
 10065a8:	lea    r8,[rdi+rbx*1]
 10065ac:	xor    edx,edx
 10065ae:	mov    rcx,rax
 10065b1:	call   QWORD PTR [rip+0xffffffffffffac09]        # 0x10011c0
 10065b7:	mov    r15,rax
 10065ba:	test   rax,rax
 10065bd:	je     0x10065f8
 10065bf:	mov    r8d,esi
 10065c2:	mov    rdx,r14
 10065c5:	mov    rcx,rax
 10065c8:	call   0x1004cd6
 10065cd:	mov    eax,0x5c
 10065d2:	shr    rsi,1
 10065d5:	lea    rdi,[r15+rsi*2]
 10065d9:	mov    r8d,ebx
 10065dc:	mov    rdx,rbp
 10065df:	lea    rcx,[rdi+0x2]
 10065e3:	mov    WORD PTR [rdi],ax
 10065e6:	call   0x1004cd6
 10065eb:	shr    rbx,1
 10065ee:	xor    eax,eax
 10065f0:	mov    WORD PTR [rdi+rbx*2+0x2],ax
 10065f5:	mov    rax,r15
 10065f8:	mov    rbx,QWORD PTR [rsp+0x40]
 10065fd:	mov    rbp,QWORD PTR [rsp+0x48]
 1006602:	mov    rsi,QWORD PTR [rsp+0x50]
 1006607:	add    rsp,0x20
 100660b:	pop    r15
 100660d:	pop    r14
 100660f:	pop    rdi
 1006610:	ret    
 1006611:	int3   
 1006612:	int3   
 1006613:	int3   
 1006614:	int3   
 1006615:	int3   
 1006616:	int3   
 1006617:	int3   
 1006618:	int3   
 1006619:	int3   
 100661a:	int3   
 100661b:	int3   
 100661c:	int3   
 100661d:	int3   
 100661e:	int3   
 100661f:	int3   
 1006620:	mov    QWORD PTR [rsp+0x10],rbx
 1006625:	mov    QWORD PTR [rsp+0x18],rbp
 100662a:	mov    QWORD PTR [rsp+0x20],rsi
 100662f:	push   rdi
 1006630:	push   r14
 1006632:	push   r15
 1006634:	sub    rsp,0x30
 1006638:	mov    r14,rcx
 100663b:	mov    r15d,0x80
 1006641:	or     rbx,0xffffffffffffffff
 1006645:	inc    rbx
 1006648:	cmp    WORD PTR [rcx+rbx*2],0x0
 100664d:	jne    0x1006645
 100664f:	lea    esi,[rbx+0x80]
 1006655:	mov    edi,esi
 1006657:	add    rdi,rdi
 100665a:	call   QWORD PTR [rip+0xffffffffffffacd0]        # 0x1001330
 1006660:	mov    r8,rdi
 1006663:	mov    rcx,rax
 1006666:	xor    edx,edx
 1006668:	call   QWORD PTR [rip+0xffffffffffffab52]        # 0x10011c0
 100666e:	mov    rbp,rax
 1006671:	test   rax,rax
 1006674:	je     0x1006736
 100667a:	mov    QWORD PTR [rsp+0x50],r12
 100667f:	lea    r12,[rip+0xffffffffffffb4f2]        # 0x1001b78
 1006686:	data16 nop WORD PTR [rax+rax*1+0x0]
 1006690:	mov    r9d,ebx
 1006693:	mov    r8,r14
 1006696:	mov    edx,0x1
 100669b:	mov    ecx,0x400
 10066a0:	mov    DWORD PTR [rsp+0x28],0x5
 10066a8:	mov    QWORD PTR [rsp+0x20],r12
 10066ad:	call   QWORD PTR [rip+0xffffffffffffaa45]        # 0x10010f8
 10066b3:	cmp    eax,0x2
 10066b6:	jne    0x10066d7
 10066b8:	mov    edi,DWORD PTR [rip+0xd6a6]        # 0x1013d64
 10066be:	cmp    edi,esi
 10066c0:	ja     0x10066ea
 10066c2:	lea    r8d,[rdi+rdi*1]
 10066c6:	lea    rdx,[rip+0xdad3]        # 0x10141a0
 10066cd:	mov    rcx,rbp
 10066d0:	call   0x1004cd6
 10066d5:	jmp    0x10066e8
 10066d7:	mov    r8d,esi
 10066da:	mov    rdx,rbp
 10066dd:	mov    rcx,r14
 10066e0:	call   QWORD PTR [rip+0xffffffffffffaa92]        # 0x1001178
 10066e6:	mov    edi,eax
 10066e8:	cmp    edi,esi
 10066ea:	jle    0x100672e
 10066ec:	add    r15d,r15d
 10066ef:	lea    esi,[rbx+r15*1]
 10066f3:	call   QWORD PTR [rip+0xffffffffffffac37]        # 0x1001330
 10066f9:	mov    r8,rbp
 10066fc:	mov    rcx,rax
 10066ff:	xor    edx,edx
 1006701:	call   QWORD PTR [rip+0xffffffffffffaa41]        # 0x1001148
 1006707:	mov    edi,esi
 1006709:	add    rdi,rdi
 100670c:	call   QWORD PTR [rip+0xffffffffffffac1e]        # 0x1001330
 1006712:	mov    r8,rdi
 1006715:	mov    rcx,rax
 1006718:	xor    edx,edx
 100671a:	call   QWORD PTR [rip+0xffffffffffffaaa0]        # 0x10011c0
 1006720:	mov    rbp,rax
 1006723:	test   rax,rax
 1006726:	jne    0x1006690
 100672c:	jmp    0x1006731
 100672e:	mov    rax,rbp
 1006731:	mov    r12,QWORD PTR [rsp+0x50]
 1006736:	mov    rbx,QWORD PTR [rsp+0x58]
 100673b:	mov    rbp,QWORD PTR [rsp+0x60]
 1006740:	mov    rsi,QWORD PTR [rsp+0x68]
 1006745:	add    rsp,0x30
 1006749:	pop    r15
 100674b:	pop    r14
 100674d:	pop    rdi
 100674e:	ret    
 100674f:	int3   
 1006750:	int3   
 1006751:	int3   
 1006752:	int3   
 1006753:	int3   
 1006754:	int3   
 1006755:	int3   
 1006756:	int3   
 1006757:	int3   
 1006758:	int3   
 1006759:	int3   
 100675a:	int3   
 100675b:	int3   
 100675c:	int3   
 100675d:	int3   
 100675e:	int3   
 100675f:	int3   
 1006760:	mov    QWORD PTR [rsp+0x20],rbx
 1006765:	push   rbp
 1006766:	push   rsi
 1006767:	push   rdi
 1006768:	sub    rsp,0x30
 100676c:	mov    rsi,rdx
 100676f:	mov    rbp,rcx
 1006772:	mov    edi,0x80
 1006777:	call   QWORD PTR [rip+0xffffffffffffabb3]        # 0x1001330
 100677d:	xor    edx,edx
 100677f:	mov    r8d,0x100
 1006785:	mov    rcx,rax
 1006788:	call   QWORD PTR [rip+0xffffffffffffaa32]        # 0x10011c0
 100678e:	mov    rbx,rax
 1006791:	test   rax,rax
 1006794:	je     0x100688b
 100679a:	mov    QWORD PTR [rsp+0x50],r12
 100679f:	mov    QWORD PTR [rsp+0x58],r14
 10067a4:	mov    QWORD PTR [rsp+0x60],r15
 10067a9:	lea    r15,[rip+0xd5d0]        # 0x1013d80
 10067b0:	lea    r12,[rip+0xd7d9]        # 0x1013f90
 10067b7:	mov    r14d,0xffff
 10067bd:	nop    DWORD PTR [rax]
 10067c0:	test   rbp,rbp
 10067c3:	je     0x1006805
 10067c5:	test   rsi,rsi
 10067c8:	je     0x1006805
 10067ca:	lea    r8,[rip+0xffffffffffffb3b3]        # 0x1001b84
 10067d1:	mov    r9,rbx
 10067d4:	mov    rdx,rsi
 10067d7:	mov    rcx,rbp
 10067da:	mov    QWORD PTR [rsp+0x28],r12
 10067df:	mov    DWORD PTR [rsp+0x20],edi
 10067e3:	call   QWORD PTR [rip+0xffffffffffffa997]        # 0x1001180
 10067e9:	lea    ecx,[rdi-0x1]
 10067ec:	mov    r11d,eax
 10067ef:	cmp    eax,ecx
 10067f1:	je     0x1006800
 10067f3:	cmp    WORD PTR [rbx],r14w
 10067f7:	jne    0x1006800
 10067f9:	cmp    WORD PTR [rbx+0x2],0x0
 10067fe:	je     0x1006805
 1006800:	cmp    eax,0xffffffff
 1006803:	jne    0x1006827
 1006805:	lea    r8,[rip+0xffffffffffffb378]        # 0x1001b84
 100680c:	mov    r9,rbx
 100680f:	mov    rdx,rsi
 1006812:	mov    rcx,rbp
 1006815:	mov    QWORD PTR [rsp+0x28],r15
 100681a:	mov    DWORD PTR [rsp+0x20],edi
 100681e:	call   QWORD PTR [rip+0xffffffffffffa95c]        # 0x1001180
 1006824:	mov    r11d,eax
 1006827:	test   rbp,rbp
 100682a:	je     0x1006834
 100682c:	lea    eax,[rdi-0x1]
 100682f:	test   rsi,rsi
 1006832:	jne    0x1006837
 1006834:	lea    eax,[rdi-0x2]
 1006837:	cmp    r11d,eax
 100683a:	jne    0x1006879
 100683c:	add    edi,edi
 100683e:	call   QWORD PTR [rip+0xffffffffffffaaec]        # 0x1001330
 1006844:	mov    r8,rbx
 1006847:	mov    rcx,rax
 100684a:	xor    edx,edx
 100684c:	call   QWORD PTR [rip+0xffffffffffffa8f6]        # 0x1001148
 1006852:	mov    ebx,edi
 1006854:	add    rbx,rbx
 1006857:	call   QWORD PTR [rip+0xffffffffffffaad3]        # 0x1001330
 100685d:	mov    r8,rbx
 1006860:	mov    rcx,rax
 1006863:	xor    edx,edx
 1006865:	call   QWORD PTR [rip+0xffffffffffffa955]        # 0x10011c0
 100686b:	mov    rbx,rax
 100686e:	test   rax,rax
 1006871:	jne    0x10067c0
 1006877:	jmp    0x100687c
 1006879:	mov    rax,rbx
 100687c:	mov    r14,QWORD PTR [rsp+0x58]
 1006881:	mov    r12,QWORD PTR [rsp+0x50]
 1006886:	mov    r15,QWORD PTR [rsp+0x60]
 100688b:	mov    rbx,QWORD PTR [rsp+0x68]
 1006890:	add    rsp,0x30
 1006894:	pop    rdi
 1006895:	pop    rsi
 1006896:	pop    rbp
 1006897:	ret    
 1006898:	int3   
 1006899:	int3   
 100689a:	int3   
 100689b:	int3   
 100689c:	int3   
 100689d:	int3   
 100689e:	int3   
 100689f:	int3   
 10068a0:	rex push rdi
 10068a2:	push   r12
 10068a4:	push   r13
 10068a6:	sub    rsp,0x40
 10068aa:	mov    r13,rdx
 10068ad:	mov    r12,rcx
 10068b0:	call   0x1006760
 10068b5:	mov    rdi,rax
 10068b8:	test   rax,rax
 10068bb:	je     0x10069cc
 10068c1:	test   r13,r13
 10068c4:	je     0x10069cc
 10068ca:	test   r12,r12
 10068cd:	je     0x10069cc
 10068d3:	mov    QWORD PTR [rsp+0x60],rbx
 10068d8:	mov    QWORD PTR [rsp+0x68],rbp
 10068dd:	mov    QWORD PTR [rsp+0x70],rsi
 10068e2:	mov    eax,0xffff
 10068e7:	mov    QWORD PTR [rsp+0x38],r14
 10068ec:	mov    QWORD PTR [rsp+0x30],r15
 10068f1:	cmp    WORD PTR [rdi],ax
 10068f4:	jne    0x100697d
 10068fa:	cmp    WORD PTR [rdi+0x2],0x0
 10068ff:	jne    0x100697d
 1006901:	cmp    DWORD PTR [rip+0xd468],0x0        # 0x1013d70
 1006908:	je     0x100697d
 100690a:	or     rbp,0xffffffffffffffff
 100690e:	mov    rbx,rbp
 1006911:	inc    rbx
 1006914:	cmp    WORD PTR [r12+rbx*2],0x0
 100691a:	jne    0x1006911
 100691c:	mov    rsi,rbp
 100691f:	nop
 1006920:	inc    rsi
 1006923:	cmp    WORD PTR [r13+rsi*2+0x0],0x0
 100692a:	jne    0x1006920
 100692c:	xor    r14d,r14d
 100692f:	lea    r15,[rip+0xc84a]        # 0x1013180
 1006936:	data16 nop WORD PTR [rax+rax*1+0x0]
 1006940:	mov    rcx,QWORD PTR [r15]
 1006943:	mov    eax,DWORD PTR [r15+0x8]
 1006947:	mov    r9d,ebx
 100694a:	mov    DWORD PTR [rsp+0x28],eax
 100694e:	mov    QWORD PTR [rsp+0x20],rcx
 1006953:	mov    r8,r12
 1006956:	mov    ecx,0x400
 100695b:	mov    edx,0x1
 1006960:	call   QWORD PTR [rip+0xffffffffffffa792]        # 0x10010f8
 1006966:	cmp    eax,0x2
 1006969:	je     0x10069d6
 100696b:	inc    r14d
 100696e:	add    r15,0x20
 1006972:	cmp    r14d,0x1
 1006976:	jb     0x1006940
 1006978:	mov    eax,0xffff
 100697d:	test   rdi,rdi
 1006980:	je     0x10069b0
 1006982:	cmp    WORD PTR [rdi],ax
 1006985:	jne    0x100698e
 1006987:	cmp    WORD PTR [rdi+0x2],0x0
 100698c:	je     0x10069b0
 100698e:	mov    rcx,rdi
 1006991:	call   0x1006620
 1006996:	mov    rbx,rax
 1006999:	call   QWORD PTR [rip+0xffffffffffffa991]        # 0x1001330
 100699f:	mov    r8,rdi
 10069a2:	mov    rcx,rax
 10069a5:	xor    edx,edx
 10069a7:	call   QWORD PTR [rip+0xffffffffffffa79b]        # 0x1001148
 10069ad:	mov    rdi,rbx
 10069b0:	mov    r15,QWORD PTR [rsp+0x30]
 10069b5:	mov    r14,QWORD PTR [rsp+0x38]
 10069ba:	mov    rsi,QWORD PTR [rsp+0x70]
 10069bf:	mov    rbp,QWORD PTR [rsp+0x68]
 10069c4:	mov    rbx,QWORD PTR [rsp+0x60]
 10069c9:	mov    rax,rdi
 10069cc:	add    rsp,0x40
 10069d0:	pop    r13
 10069d2:	pop    r12
 10069d4:	pop    rdi
 10069d5:	ret    
 10069d6:	lea    rcx,[rip+0xc7a3]        # 0x1013180
 10069dd:	movsxd rbx,r14d
 10069e0:	shl    rbx,0x5
 10069e4:	add    rbx,rcx
 10069e7:	mov    rcx,QWORD PTR [rbx+0x10]
 10069eb:	call   0x1006620
 10069f0:	test   rax,rax
 10069f3:	je     0x1006a4f
 10069f5:	inc    rbp
 10069f8:	cmp    WORD PTR [rax+rbp*2],0x0
 10069fd:	jne    0x10069f5
 10069ff:	mov    r9d,ebp
 1006a02:	mov    r8,rax
 1006a05:	mov    edx,0x1
 1006a0a:	mov    ecx,0x400
 1006a0f:	mov    DWORD PTR [rsp+0x28],esi
 1006a13:	mov    QWORD PTR [rsp+0x20],r13
 1006a18:	call   QWORD PTR [rip+0xffffffffffffa6da]        # 0x10010f8
 1006a1e:	cmp    eax,0x2
 1006a21:	jne    0x1006978
 1006a27:	call   QWORD PTR [rip+0xffffffffffffa903]        # 0x1001330
 1006a2d:	mov    r8,rdi
 1006a30:	xor    edx,edx
 1006a32:	mov    rcx,rax
 1006a35:	call   QWORD PTR [rip+0xffffffffffffa70d]        # 0x1001148
 1006a3b:	mov    rdx,QWORD PTR [rbx+0x10]
 1006a3f:	mov    rcx,r12
 1006a42:	call   0x1006760
 1006a47:	mov    rdi,rax
 1006a4a:	jmp    0x1006978
 1006a4f:	call   QWORD PTR [rip+0xffffffffffffa8db]        # 0x1001330
 1006a55:	mov    r8,rdi
 1006a58:	xor    edx,edx
 1006a5a:	mov    rcx,rax
 1006a5d:	call   QWORD PTR [rip+0xffffffffffffa6e5]        # 0x1001148
 1006a63:	xor    edi,edi
 1006a65:	jmp    0x10069b0
 1006a6a:	int3   
 1006a6b:	int3   
 1006a6c:	int3   
 1006a6d:	int3   
 1006a6e:	int3   
 1006a6f:	int3   
 1006a70:	rex push rbx
 1006a72:	sub    rsp,0x20
 1006a76:	cmp    DWORD PTR [rip+0xd2e3],0x0        # 0x1013d60
 1006a7d:	mov    rbx,rcx
 1006a80:	je     0x1006ae5
 1006a82:	cmp    rcx,0xffffffff80000000
 1006a89:	je     0x1006ad5
 1006a8b:	cmp    rcx,0xffffffff80000001
 1006a92:	je     0x1006ad5
 1006a94:	cmp    rcx,0xffffffff80000002
 1006a9b:	je     0x1006ad5
 1006a9d:	cmp    rcx,0xffffffff80000003
 1006aa4:	je     0x1006ad5
 1006aa6:	cmp    rcx,0xffffffff80000004
 1006aad:	je     0x1006ad5
 1006aaf:	cmp    rcx,0xffffffff80000005
 1006ab6:	je     0x1006ad5
 1006ab8:	cmp    rcx,0xffffffff80000006
 1006abf:	je     0x1006ad5
 1006ac1:	call   QWORD PTR [rip+0xffffffffffffa869]        # 0x1001330
 1006ac7:	mov    r8,rbx
 1006aca:	xor    edx,edx
 1006acc:	mov    rcx,rax
 1006acf:	call   QWORD PTR [rip+0xffffffffffffa673]        # 0x1001148
 1006ad5:	xor    ecx,ecx
 1006ad7:	call   QWORD PTR [rip+0xffffffffffffa683]        # 0x1001160
 1006add:	xor    eax,eax
 1006adf:	add    rsp,0x20
 1006ae3:	pop    rbx
 1006ae4:	ret    
 1006ae5:	add    rsp,0x20
 1006ae9:	pop    rbx
 1006aea:	rex.W jmp QWORD PTR [rip+0xffffffffffffa5c7]        # 0x10010b8
 1006af1:	int3   
 1006af2:	int3   
 1006af3:	int3   
 1006af4:	int3   
 1006af5:	int3   
 1006af6:	int3   
 1006af7:	int3   
 1006af8:	int3   
 1006af9:	int3   
 1006afa:	int3   
 1006afb:	int3   
 1006afc:	int3   
 1006afd:	int3   
 1006afe:	int3   
 1006aff:	int3   
 1006b00:	rex push rdi
 1006b02:	sub    rsp,0x20
 1006b06:	mov    rdi,rdx
 1006b09:	cmp    rcx,0xffffffff80000000
 1006b10:	je     0x1006bec
 1006b16:	cmp    rcx,0xffffffff80000001
 1006b1d:	je     0x1006bec
 1006b23:	cmp    rcx,0xffffffff80000002
 1006b2a:	je     0x1006bec
 1006b30:	cmp    rcx,0xffffffff80000003
 1006b37:	je     0x1006bec
 1006b3d:	cmp    rcx,0xffffffff80000004
 1006b44:	je     0x1006bec
 1006b4a:	cmp    rcx,0xffffffff80000005
 1006b51:	je     0x1006bec
 1006b57:	cmp    rcx,0xffffffff80000006
 1006b5e:	je     0x1006bec
 1006b64:	mov    QWORD PTR [rsp+0x30],rbx
 1006b69:	mov    QWORD PTR [rsp+0x38],rbp
 1006b6e:	mov    QWORD PTR [rsp+0x40],rsi
 1006b73:	call   0x1006490
 1006b78:	or     rcx,0xffffffffffffffff
 1006b7c:	mov    rbx,rax
 1006b7f:	nop
 1006b80:	inc    rcx
 1006b83:	cmp    WORD PTR [rax+rcx*2],0x0
 1006b88:	jne    0x1006b80
 1006b8a:	lea    rbp,[rcx*2+0x2]
 1006b92:	call   QWORD PTR [rip+0xffffffffffffa798]        # 0x1001330
 1006b98:	mov    r8,rbp
 1006b9b:	mov    rcx,rax
 1006b9e:	xor    edx,edx
 1006ba0:	call   QWORD PTR [rip+0xffffffffffffa61a]        # 0x10011c0
 1006ba6:	mov    rsi,rax
 1006ba9:	test   rax,rax
 1006bac:	jne    0x1006bcf
 1006bae:	lea    ecx,[rax+0x8]
 1006bb1:	call   QWORD PTR [rip+0xffffffffffffa5a9]        # 0x1001160
 1006bb7:	lea    eax,[rsi+0x8]
 1006bba:	mov    rbp,QWORD PTR [rsp+0x38]
 1006bbf:	mov    rbx,QWORD PTR [rsp+0x30]
 1006bc4:	mov    rsi,QWORD PTR [rsp+0x40]
 1006bc9:	add    rsp,0x20
 1006bcd:	pop    rdi
 1006bce:	ret    
 1006bcf:	mov    r8d,ebp
 1006bd2:	mov    rdx,rbx
 1006bd5:	mov    rcx,rax
 1006bd8:	call   0x1004cd6
 1006bdd:	xor    ecx,ecx
 1006bdf:	mov    QWORD PTR [rdi],rsi
 1006be2:	call   QWORD PTR [rip+0xffffffffffffa578]        # 0x1001160
 1006be8:	xor    eax,eax
 1006bea:	jmp    0x1006bba
 1006bec:	mov    QWORD PTR [rdx],rcx
 1006bef:	xor    ecx,ecx
 1006bf1:	call   QWORD PTR [rip+0xffffffffffffa569]        # 0x1001160
 1006bf7:	xor    eax,eax
 1006bf9:	add    rsp,0x20
 1006bfd:	pop    rdi
 1006bfe:	ret    
 1006bff:	int3   
 1006c00:	int3   
 1006c01:	int3   
 1006c02:	int3   
 1006c03:	int3   
 1006c04:	int3   
 1006c05:	int3   
 1006c06:	int3   
 1006c07:	int3   
 1006c08:	int3   
 1006c09:	int3   
 1006c0a:	int3   
 1006c0b:	int3   
 1006c0c:	int3   
 1006c0d:	int3   
 1006c0e:	int3   
 1006c0f:	int3   
 1006c10:	push   r14
 1006c12:	sub    rsp,0x20
 1006c16:	cmp    DWORD PTR [rip+0xd143],0x0        # 0x1013d60
 1006c1d:	mov    r14,r8
 1006c20:	je     0x1006d23
 1006c26:	test   rdx,rdx
 1006c29:	je     0x1006d15
 1006c2f:	cmp    WORD PTR [rdx],0x0
 1006c33:	je     0x1006d15
 1006c39:	mov    QWORD PTR [rsp+0x30],rbx
 1006c3e:	mov    QWORD PTR [rsp+0x38],rsi
 1006c43:	call   0x1006550
 1006c48:	mov    rsi,rax
 1006c4b:	test   rax,rax
 1006c4e:	jne    0x1006c70
 1006c50:	mov    ebx,0x8
 1006c55:	mov    ecx,ebx
 1006c57:	call   QWORD PTR [rip+0xffffffffffffa503]        # 0x1001160
 1006c5d:	mov    rsi,QWORD PTR [rsp+0x38]
 1006c62:	mov    eax,ebx
 1006c64:	mov    rbx,QWORD PTR [rsp+0x30]
 1006c69:	add    rsp,0x20
 1006c6d:	pop    r14
 1006c6f:	ret    
 1006c70:	xor    edx,edx
 1006c72:	mov    rcx,rax
 1006c75:	mov    QWORD PTR [rsp+0x40],rdi
 1006c7a:	call   0x1006760
 1006c7f:	mov    rdi,rax
 1006c82:	test   rax,rax
 1006c85:	je     0x1006cdc
 1006c87:	mov    eax,0xffff
 1006c8c:	cmp    WORD PTR [rdi],ax
 1006c8f:	jne    0x1006c9f
 1006c91:	cmp    WORD PTR [rdi+0x2],0x0
 1006c96:	jne    0x1006c9f
 1006c98:	mov    ebx,0x2
 1006c9d:	jmp    0x1006ca1
 1006c9f:	xor    ebx,ebx
 1006ca1:	call   QWORD PTR [rip+0xffffffffffffa689]        # 0x1001330
 1006ca7:	mov    r8,rdi
 1006caa:	xor    edx,edx
 1006cac:	mov    rcx,rax
 1006caf:	call   QWORD PTR [rip+0xffffffffffffa493]        # 0x1001148
 1006cb5:	test   ebx,ebx
 1006cb7:	jne    0x1006ce1
 1006cb9:	mov    ecx,ebx
 1006cbb:	mov    QWORD PTR [r14],rsi
 1006cbe:	call   QWORD PTR [rip+0xffffffffffffa49c]        # 0x1001160
 1006cc4:	mov    rdi,QWORD PTR [rsp+0x40]
 1006cc9:	mov    rsi,QWORD PTR [rsp+0x38]
 1006cce:	mov    eax,ebx
 1006cd0:	mov    rbx,QWORD PTR [rsp+0x30]
 1006cd5:	add    rsp,0x20
 1006cd9:	pop    r14
 1006cdb:	ret    
 1006cdc:	mov    ebx,0x8
 1006ce1:	call   QWORD PTR [rip+0xffffffffffffa649]        # 0x1001330
 1006ce7:	mov    r8,rsi
 1006cea:	xor    edx,edx
 1006cec:	mov    rcx,rax
 1006cef:	call   QWORD PTR [rip+0xffffffffffffa453]        # 0x1001148
 1006cf5:	mov    ecx,ebx
 1006cf7:	call   QWORD PTR [rip+0xffffffffffffa463]        # 0x1001160
 1006cfd:	mov    rdi,QWORD PTR [rsp+0x40]
 1006d02:	mov    rsi,QWORD PTR [rsp+0x38]
 1006d07:	mov    eax,ebx
 1006d09:	mov    rbx,QWORD PTR [rsp+0x30]
 1006d0e:	add    rsp,0x20
 1006d12:	pop    r14
 1006d14:	ret    
 1006d15:	mov    rdx,r8
 1006d18:	add    rsp,0x20
 1006d1c:	pop    r14
 1006d1e:	jmp    0x1006b00
 1006d23:	add    rsp,0x20
 1006d27:	pop    r14
 1006d29:	rex.W jmp QWORD PTR [rip+0xffffffffffffa380]        # 0x10010b0
 1006d30:	lea    rax,[rip+0xca61]        # 0x1013798
 1006d37:	jmp    0x1006d3c
 1006d3c:	mov    QWORD PTR [rsp+0x8],rcx
 1006d41:	mov    QWORD PTR [rsp+0x10],rdx
 1006d46:	mov    QWORD PTR [rsp+0x18],r8
 1006d4b:	mov    QWORD PTR [rsp+0x20],r9
 1006d50:	sub    rsp,0x68
 1006d54:	movdqa XMMWORD PTR [rsp+0x20],xmm0
 1006d5a:	movdqa XMMWORD PTR [rsp+0x30],xmm1
 1006d60:	movdqa XMMWORD PTR [rsp+0x40],xmm2
 1006d66:	movdqa XMMWORD PTR [rsp+0x50],xmm3
 1006d6c:	mov    rdx,rax
 1006d6f:	lea    rcx,[rip+0xa65a]        # 0x10113d0
 1006d76:	call   0x100e404
 1006d7b:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
 1006d81:	movdqa xmm1,XMMWORD PTR [rsp+0x30]
 1006d87:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
 1006d8d:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
 1006d93:	mov    rcx,QWORD PTR [rsp+0x70]
 1006d98:	mov    rdx,QWORD PTR [rsp+0x78]
 1006d9d:	mov    r8,QWORD PTR [rsp+0x80]
 1006da5:	mov    r9,QWORD PTR [rsp+0x88]
 1006dad:	add    rsp,0x68
 1006db1:	jmp    0x1006db3
 1006db3:	jmp    rax
 1006db5:	int3   
 1006db6:	int3   
 1006db7:	int3   
 1006db8:	int3   
 1006db9:	int3   
 1006dba:	int3   
 1006dbb:	jmp    QWORD PTR [rip+0xc9d7]        # 0x1013798
 1006dc1:	int3   
 1006dc2:	int3   
 1006dc3:	int3   
 1006dc4:	int3   
 1006dc5:	int3   
 1006dc6:	int3   
 1006dc7:	int3   
 1006dc8:	int3   
 1006dc9:	int3   
 1006dca:	int3   
 1006dcb:	int3   
 1006dcc:	int3   
 1006dcd:	int3   
 1006dce:	int3   
 1006dcf:	int3   
 1006dd0:	sub    rsp,0x28
 1006dd4:	mov    rdx,QWORD PTR [rip+0xc3cd]        # 0x10131a8
 1006ddb:	mov    rcx,QWORD PTR [rip+0xc8fe]        # 0x10136e0
 1006de2:	lea    r8,[rip+0xc3b7]        # 0x10131a0
 1006de9:	call   0x1009c30
 1006dee:	mov    rdx,QWORD PTR [rip+0xc3c3]        # 0x10131b8
 1006df5:	mov    rcx,QWORD PTR [rip+0xc8e4]        # 0x10136e0
 1006dfc:	lea    r8,[rip+0xc3ad]        # 0x10131b0
 1006e03:	call   0x1009c30
 1006e08:	mov    rdx,QWORD PTR [rip+0xc3b9]        # 0x10131c8
 1006e0f:	mov    rcx,QWORD PTR [rip+0xc8ca]        # 0x10136e0
 1006e16:	lea    r8,[rip+0xc3a3]        # 0x10131c0
 1006e1d:	call   0x1009c30
 1006e22:	mov    rdx,QWORD PTR [rip+0xc3af]        # 0x10131d8
 1006e29:	mov    rcx,QWORD PTR [rip+0xc8b0]        # 0x10136e0
 1006e30:	lea    r8,[rip+0xc399]        # 0x10131d0
 1006e37:	call   0x1009c30
 1006e3c:	mov    rdx,QWORD PTR [rip+0xc3a5]        # 0x10131e8
 1006e43:	mov    rcx,QWORD PTR [rip+0xc896]        # 0x10136e0
 1006e4a:	lea    r8,[rip+0xc38f]        # 0x10131e0
 1006e51:	call   0x1009c30
 1006e56:	mov    rdx,QWORD PTR [rip+0xc39b]        # 0x10131f8
 1006e5d:	mov    rcx,QWORD PTR [rip+0xc87c]        # 0x10136e0
 1006e64:	lea    r8,[rip+0xc385]        # 0x10131f0
 1006e6b:	call   0x1009c30
 1006e70:	mov    rdx,QWORD PTR [rip+0xc391]        # 0x1013208
 1006e77:	mov    rcx,QWORD PTR [rip+0xc862]        # 0x10136e0
 1006e7e:	lea    r8,[rip+0xc37b]        # 0x1013200
 1006e85:	call   0x1009c30
 1006e8a:	mov    rdx,QWORD PTR [rip+0xc387]        # 0x1013218
 1006e91:	mov    rcx,QWORD PTR [rip+0xc848]        # 0x10136e0
 1006e98:	lea    r8,[rip+0xc371]        # 0x1013210
 1006e9f:	add    rsp,0x28
 1006ea3:	jmp    0x1009c30
 1006ea8:	int3   
 1006ea9:	int3   
 1006eaa:	int3   
 1006eab:	int3   
 1006eac:	int3   
 1006ead:	int3   
 1006eae:	int3   
 1006eaf:	int3   
 1006eb0:	sub    rsp,0x28
 1006eb4:	cmp    DWORD PTR [rcx+0x28],0x0
 1006eb8:	je     0x1006ec0
 1006eba:	call   QWORD PTR [rip+0xffffffffffffa430]        # 0x10012f0
 1006ec0:	add    rsp,0x28
 1006ec4:	ret    
 1006ec5:	int3   
 1006ec6:	int3   
 1006ec7:	int3   
 1006ec8:	int3   
 1006ec9:	int3   
 1006eca:	int3   
 1006ecb:	int3   
 1006ecc:	int3   
 1006ecd:	int3   
 1006ece:	int3   
 1006ecf:	int3   
 1006ed0:	mov    r11,rsp
 1006ed3:	mov    QWORD PTR [r11+0x10],rdx
 1006ed7:	mov    DWORD PTR [rsp+0x8],ecx
 1006edb:	push   rbx
 1006edc:	push   rsi
 1006edd:	push   rdi
 1006ede:	sub    rsp,0xe0
 1006ee5:	mov    QWORD PTR [r11-0x28],0xfffffffffffffffe
 1006eed:	mov    rsi,rdx
 1006ef0:	xor    edi,edi
 1006ef2:	mov    DWORD PTR [rsp+0x110],edi
 1006ef9:	mov    rax,QWORD PTR [rdx]
 1006efc:	mov    ebx,DWORD PTR [rax]
 1006efe:	mov    DWORD PTR [r11+0x8],ebx
 1006f02:	cmp    ebx,0x80000002
 1006f08:	je     0x10070be
 1006f0e:	cmp    ebx,0x80000005
 1006f14:	je     0x10070b0
 1006f1a:	cmp    ebx,0xc0000006
 1006f20:	je     0x100707e
 1006f26:	cmp    ebx,0xc0000017
 1006f2c:	je     0x1006f3f
 1006f2e:	cmp    ebx,0xc00000fd
 1006f34:	je     0x10070b0
 1006f3a:	jmp    0x10070d0
 1006f3f:	mov    r9,QWORD PTR [rip+0xc79a]        # 0x10136e0
 1006f46:	cmp    DWORD PTR [r9],edi
 1006f49:	je     0x100701d
 1006f4f:	mov    eax,DWORD PTR [rip+0xc2cb]        # 0x1013220
 1006f55:	cmp    eax,0xffffffff
 1006f58:	jne    0x1006f86
 1006f5a:	lea    r8,[rip+0xc2bf]        # 0x1013220
 1006f61:	mov    rdx,QWORD PTR [rip+0xc2c0]        # 0x1013228
 1006f68:	mov    rcx,r9
 1006f6b:	call   0x1009c30
 1006f70:	mov    eax,DWORD PTR [rip+0xc2aa]        # 0x1013220
 1006f76:	cmp    eax,0xffffffff
 1006f79:	je     0x100701d
 1006f7f:	mov    r9,QWORD PTR [rip+0xc75a]        # 0x10136e0
 1006f86:	mov    ecx,eax
 1006f88:	imul   rcx,rcx,0x44
 1006f8c:	mov    rax,QWORD PTR [r9+0x10]
 1006f90:	cmp    DWORD PTR [rcx+rax*1],0x2
 1006f94:	jl     0x100701d
 1006f9a:	mov    edx,0x1
 1006f9f:	mov    rcx,r9
 1006fa2:	call   0x1009f00
 1006fa7:	cmp    eax,0x2
 1006faa:	jb     0x100701d
 1006fac:	xor    edx,edx
 1006fae:	mov    rcx,QWORD PTR [rip+0xc72b]        # 0x10136e0
 1006fb5:	call   0x1009f00
 1006fba:	test   eax,eax
 1006fbc:	je     0x100701d
 1006fbe:	lea    rdi,[rip+0xffffffffffffaf8b]        # 0x1001f50
 1006fc5:	mov    QWORD PTR [rsp+0x38],rdi
 1006fca:	mov    DWORD PTR [rsp+0x40],0xb4
 1006fd2:	mov    eax,DWORD PTR [rip+0xc248]        # 0x1013220
 1006fd8:	mov    DWORD PTR [rsp+0x44],eax
 1006fdc:	mov    DWORD PTR [rsp+0x48],0x2
 1006fe4:	mov    rax,QWORD PTR [rip+0xc6f5]        # 0x10136e0
 1006feb:	mov    QWORD PTR [rsp+0x50],rax
 1006ff0:	mov    QWORD PTR [rsp+0x28],rdi
 1006ff5:	mov    DWORD PTR [rsp+0x20],0xb4
 1006ffd:	mov    r9d,0x8007000e
 1007003:	lea    r8,[rip+0xffffffffffffa8ae]        # 0x10018b8
 100700a:	lea    rdx,[rip+0xffffffffffffa8bf]        # 0x10018d0
 1007011:	lea    rcx,[rsp+0x38]
 1007016:	call   0x100aba0
 100701b:	jmp    0x1007024
 100701d:	lea    rdi,[rip+0xffffffffffffaf2c]        # 0x1001f50
 1007024:	mov    r9d,0x8007000e
 100702a:	mov    r8d,0xb4
 1007030:	mov    rdx,rdi
 1007033:	lea    rcx,[rsp+0xa8]
 100703b:	call   0x10036dc
 1007040:	mov    rcx,QWORD PTR [rax]
 1007043:	mov    QWORD PTR [rsp+0x58],rcx
 1007048:	mov    rcx,QWORD PTR [rax+0x8]
 100704c:	mov    QWORD PTR [rsp+0x60],rcx
 1007051:	mov    rcx,QWORD PTR [rax+0x10]
 1007055:	mov    QWORD PTR [rsp+0x68],rcx
 100705a:	mov    rcx,QWORD PTR [rax+0x18]
 100705e:	mov    QWORD PTR [rsp+0x70],rcx
 1007063:	mov    rax,QWORD PTR [rax+0x20]
 1007067:	mov    QWORD PTR [rsp+0x78],rax
 100706c:	lea    rdx,[rip+0xa27d]        # 0x10112f0
 1007073:	lea    rcx,[rsp+0x58]
 1007078:	call   0x1004bf0
 100707d:	int3   
 100707e:	cmp    DWORD PTR [rax+0x18],0x3
 1007082:	jb     0x10070d0
 1007084:	mov    rcx,QWORD PTR [rax+0x30]
 1007088:	cmp    rcx,0xffffffffc000007f
 100708f:	je     0x10070a3
 1007091:	cmp    rcx,0xffffffffc000026e
 1007098:	je     0x10070a3
 100709a:	cmp    rcx,0xffffffffc000009a
 10070a1:	jne    0x10070d0
 10070a3:	mov    ebx,ecx
 10070a5:	mov    DWORD PTR [rsp+0x100],ecx
 10070ac:	mov    DWORD PTR [rax],ecx
 10070ae:	jmp    0x10070d0
 10070b0:	mov    edi,0x2
 10070b5:	mov    DWORD PTR [rsp+0x110],edi
 10070bc:	jmp    0x10070d0
 10070be:	mov    ebx,0x8004364b
 10070c3:	mov    DWORD PTR [rsp+0x100],ebx
 10070ca:	mov    DWORD PTR [rax],0x8004364b
 10070d0:	xor    ecx,ecx
 10070d2:	call   QWORD PTR [rip+0xffffffffffffa318]        # 0x10013f0
 10070d8:	mov    rdx,rsi
 10070db:	lea    rcx,[rip+0xd2fe]        # 0x10143e0
 10070e2:	call   0x1007250
 10070e7:	mov    DWORD PTR [rsp+0x30],eax
 10070eb:	jmp    0x1007107
 10070ed:	mov    rsi,QWORD PTR [rsp+0x108]
 10070f5:	mov    ebx,DWORD PTR [rsp+0x100]
 10070fc:	mov    edi,DWORD PTR [rsp+0x110]
 1007103:	mov    eax,DWORD PTR [rsp+0x30]
 1007107:	cmp    eax,edi
 1007109:	cmovg  edi,eax
 100710c:	test   edi,edi
 100710e:	je     0x1007132
 1007110:	cmp    edi,0x2
 1007113:	jne    0x1007237
 1007119:	mov    rbx,QWORD PTR [rsi]
 100711c:	call   QWORD PTR [rip+0xffffffffffff9ffe]        # 0x1001120
 1007122:	mov    rcx,rax
 1007125:	mov    edx,DWORD PTR [rbx]
 1007127:	call   QWORD PTR [rip+0xffffffffffff9ffb]        # 0x1001128
 100712d:	jmp    0x1007237
 1007132:	lea    rcx,[rip+0xfffffffffffffd97]        # 0x1006ed0
 1007139:	call   QWORD PTR [rip+0xffffffffffffa2b1]        # 0x10013f0
 100713f:	mov    r11,QWORD PTR [rsi]
 1007142:	mov    rsi,QWORD PTR [r11+0x10]
 1007146:	mov    DWORD PTR [rsp+0xa8],ebx
 100714d:	mov    DWORD PTR [rsp+0xac],0x0
 1007158:	lea    rdi,[rip+0xffffffffffffadf1]        # 0x1001f50
 100715f:	mov    DWORD PTR [rsp+0xc8],0xeb
 100716a:	test   rsi,rsi
 100716d:	jne    0x1007177
 100716f:	mov    rsi,QWORD PTR [rsp+0xf8]
 1007177:	cmp    DWORD PTR [rip+0xe1e2],0x0        # 0x1015360
 100717e:	je     0x10071e6
 1007180:	mov    edx,DWORD PTR [rip+0xc01a]        # 0x10131a0
 1007186:	mov    ecx,edx
 1007188:	imul   rcx,rcx,0x44
 100718c:	mov    r8,QWORD PTR [rip+0xc54d]        # 0x10136e0
 1007193:	mov    rax,QWORD PTR [r8+0x10]
 1007197:	cmp    DWORD PTR [rcx+rax*1],0x2
 100719b:	jl     0x10071e6
 100719d:	lea    rax,[rip+0xffffffffffffa53c]        # 0x10016e0
 10071a4:	mov    QWORD PTR [rsp+0x38],rax
 10071a9:	mov    DWORD PTR [rsp+0x40],0x14c
 10071b1:	mov    DWORD PTR [rsp+0x44],edx
 10071b5:	mov    DWORD PTR [rsp+0x48],0x2
 10071bd:	mov    QWORD PTR [rsp+0x50],r8
 10071c2:	mov    DWORD PTR [rsp+0x28],0xeb
 10071ca:	mov    QWORD PTR [rsp+0x20],rdi
 10071cf:	mov    r9,rsi
 10071d2:	mov    r8d,ebx
 10071d5:	lea    rdx,[rip+0xffffffffffffa564]        # 0x1001740
 10071dc:	lea    rcx,[rsp+0x38]
 10071e1:	call   0x100aba0
 10071e6:	mov    rax,QWORD PTR [rsp+0xa8]
 10071ee:	mov    QWORD PTR [rsp+0x80],rax
 10071f6:	mov    QWORD PTR [rsp+0x88],rsi
 10071fe:	mov    QWORD PTR [rsp+0x90],0x0
 100720a:	mov    QWORD PTR [rsp+0x98],rdi
 1007212:	mov    rax,QWORD PTR [rsp+0xc8]
 100721a:	mov    QWORD PTR [rsp+0xa0],rax
 1007222:	lea    rdx,[rip+0xa0c7]        # 0x10112f0
 1007229:	lea    rcx,[rsp+0x80]
 1007231:	call   0x1004bf0
 1007236:	int3   
 1007237:	add    rsp,0xe0
 100723e:	pop    rdi
 100723f:	pop    rsi
 1007240:	pop    rbx
 1007241:	ret    
 1007242:	int3   
 1007243:	int3   
 1007244:	int3   
 1007245:	int3   
 1007246:	int3   
 1007247:	int3   
 1007248:	int3   
 1007249:	int3   
 100724a:	int3   
 100724b:	int3   
 100724c:	int3   
 100724d:	int3   
 100724e:	int3   
 100724f:	int3   
 1007250:	mov    rax,rsp
 1007253:	push   rdi
 1007254:	push   r12
 1007256:	push   r13
 1007258:	push   r14
 100725a:	push   r15
 100725c:	sub    rsp,0x80
 1007263:	mov    QWORD PTR [rax-0x48],0xfffffffffffffffe
 100726b:	mov    QWORD PTR [rax+0x8],rbx
 100726f:	mov    QWORD PTR [rax+0x10],rbp
 1007273:	mov    QWORD PTR [rax+0x18],rsi
 1007277:	mov    r15,rdx
 100727a:	mov    rbp,rcx
 100727d:	xor    ebx,ebx
 100727f:	mov    r14d,ebx
 1007282:	mov    r13,QWORD PTR [rcx+0xf60]
 1007289:	mov    QWORD PTR [rax-0x40],r13
 100728d:	mov    BYTE PTR [rax-0x38],0x1
 1007291:	mov    rcx,r13
 1007294:	call   QWORD PTR [rip+0xffffffffffffa066]        # 0x1001300
 100729a:	mov    BYTE PTR [rsp+0x70],bl
 100729e:	test   r15,r15
 10072a1:	jne    0x10072b9
 10072a3:	lea    r15,[rbp+0xeb0]
 10072aa:	mov    rax,QWORD PTR [rsp+0xa8]
 10072b2:	mov    QWORD PTR [rbp+0xed0],rax
 10072b9:	inc    DWORD PTR [rbp+0x0]
 10072bc:	lea    r12,[rbp+0x8]
 10072c0:	mov    ecx,0x2
 10072c5:	cmp    bx,WORD PTR [r12]
 10072ca:	je     0x10073ed
 10072d0:	cmp    DWORD PTR [rbp+0xf58],0x0
 10072d7:	jne    0x10073ed
 10072dd:	lea    rdi,[rbp+0x212]
 10072e4:	lea    rsi,[rbp+0x41c]
 10072eb:	call   QWORD PTR [rip+0xffffffffffff9ddf]        # 0x10010d0
 10072f1:	mov    ebx,eax
 10072f3:	call   QWORD PTR [rip+0xffffffffffff9e47]        # 0x1001140
 10072f9:	mov    r11d,eax
 10072fc:	mov    rax,QWORD PTR [r15+0x8]
 1007300:	mov    QWORD PTR [rsp+0x50],rax
 1007305:	mov    rax,QWORD PTR [r15]
 1007308:	mov    QWORD PTR [rsp+0x48],rax
 100730d:	mov    QWORD PTR [rsp+0x40],rdi
 1007312:	mov    QWORD PTR [rsp+0x38],rsi
 1007317:	mov    DWORD PTR [rsp+0x30],ebx
 100731b:	mov    DWORD PTR [rsp+0x28],r11d
 1007320:	mov    QWORD PTR [rsp+0x20],r12
 1007325:	xor    r9d,r9d
 1007328:	mov    r8,QWORD PTR [rbp+0x628]
 100732f:	mov    edx,0x400
 1007334:	lea    rcx,[rbp+0x630]
 100733b:	call   0x1007480
 1007340:	mov    ebx,eax
 1007342:	test   eax,eax
 1007344:	js     0x10073dc
 100734a:	lea    rdi,[rbp+0xe98]
 1007351:	lea    rax,[rbp+0xe30]
 1007358:	mov    QWORD PTR [rsp+0x48],rdi
 100735d:	mov    QWORD PTR [rsp+0x40],rax
 1007362:	xor    eax,eax
 1007364:	mov    QWORD PTR [rsp+0x38],rax
 1007369:	mov    QWORD PTR [rsp+0x30],rax
 100736e:	mov    DWORD PTR [rsp+0x28],0x8000000
 1007376:	mov    DWORD PTR [rsp+0x20],eax
 100737a:	xor    r9d,r9d
 100737d:	xor    r8d,r8d
 1007380:	lea    rdx,[rbp+0x630]
 1007387:	mov    rcx,r12
 100738a:	call   QWORD PTR [rip+0xffffffffffff9e18]        # 0x10011a8
 1007390:	test   eax,eax
 1007392:	je     0x10073c3
 1007394:	or     edx,0xffffffff
 1007397:	mov    rcx,QWORD PTR [rdi]
 100739a:	call   QWORD PTR [rip+0xffffffffffff9e00]        # 0x10011a0
 10073a0:	test   eax,eax
 10073a2:	mov    eax,0x2
 10073a7:	cmovne r14d,eax
 10073ab:	mov    rcx,QWORD PTR [rdi]
 10073ae:	call   QWORD PTR [rip+0xffffffffffff9de4]        # 0x1001198
 10073b4:	mov    rcx,QWORD PTR [rbp+0xea0]
 10073bb:	call   QWORD PTR [rip+0xffffffffffff9dd7]        # 0x1001198
 10073c1:	jmp    0x10073d8
 10073c3:	call   QWORD PTR [rip+0xffffffffffff9f4f]        # 0x1001318
 10073c9:	mov    ebx,eax
 10073cb:	test   eax,eax
 10073cd:	jle    0x10073d8
 10073cf:	movzx  ebx,ax
 10073d2:	or     ebx,0x80070000
 10073d8:	test   ebx,ebx
 10073da:	jns    0x10073e6
 10073dc:	mov    ecx,0x2
 10073e1:	mov    r14d,ecx
 10073e4:	jmp    0x10073eb
 10073e6:	mov    ecx,0x2
 10073eb:	xor    ebx,ebx
 10073ed:	mov    eax,DWORD PTR [rbp+0x4]
 10073f0:	cmp    DWORD PTR [rbp+0x0],eax
 10073f3:	jbe    0x1007414
 10073f5:	cmp    bx,WORD PTR [rbp+0x41c]
 10073fc:	jne    0x1007411
 10073fe:	cmp    bx,WORD PTR [r12]
 1007403:	jne    0x1007411
 1007405:	cmp    r14d,0x1
 1007409:	mov    r14d,0x1
 100740f:	jle    0x1007414
 1007411:	mov    r14d,ecx
 1007414:	mov    rcx,r13
 1007417:	call   QWORD PTR [rip+0xffffffffffff9edb]        # 0x10012f8
 100741d:	mov    BYTE PTR [rsp+0x70],0x1
 1007422:	mov    eax,r14d
 1007425:	lea    r11,[rsp+0x80]
 100742d:	mov    rbx,QWORD PTR [r11+0x30]
 1007431:	mov    rbp,QWORD PTR [r11+0x38]
 1007435:	mov    rsi,QWORD PTR [r11+0x40]
 1007439:	mov    rsp,r11
 100743c:	pop    r15
 100743e:	pop    r14
 1007440:	pop    r13
 1007442:	pop    r12
 1007444:	pop    rdi
 1007445:	ret    
 1007446:	int3   
 1007447:	int3   
 1007448:	int3   
 1007449:	int3   
 100744a:	int3   
 100744b:	int3   
 100744c:	int3   
 100744d:	int3   
 100744e:	int3   
 100744f:	int3   
 1007450:	rex push rbx
 1007452:	sub    rsp,0x20
 1007456:	cmp    BYTE PTR [rcx+0x8],0x0
 100745a:	mov    rbx,rcx
 100745d:	jne    0x100746c
 100745f:	mov    rcx,QWORD PTR [rcx]
 1007462:	call   QWORD PTR [rip+0xffffffffffff9e90]        # 0x10012f8
 1007468:	mov    BYTE PTR [rbx+0x8],0x1
 100746c:	add    rsp,0x20
 1007470:	pop    rbx
 1007471:	ret    
 1007472:	int3   
 1007473:	int3   
 1007474:	int3   
 1007475:	int3   
 1007476:	int3   
 1007477:	int3   
 1007478:	int3   
 1007479:	int3   
 100747a:	int3   
 100747b:	int3   
 100747c:	int3   
 100747d:	int3   
 100747e:	int3   
 100747f:	int3   
 1007480:	mov    QWORD PTR [rsp+0x20],r9
 1007485:	push   rbx
 1007486:	push   rsi
 1007487:	sub    rsp,0x38
 100748b:	xor    ebx,ebx
 100748d:	mov    rsi,rcx
 1007490:	mov    eax,ebx
 1007492:	test   rdx,rdx
 1007495:	je     0x10074a0
 1007497:	cmp    rdx,0x7fffffff
 100749e:	jbe    0x10074a5
 10074a0:	mov    eax,0x80070057
 10074a5:	test   eax,eax
 10074a7:	js     0x10074f4
 10074a9:	lea    rax,[rsp+0x70]
 10074ae:	mov    QWORD PTR [rsp+0x30],rdi
 10074b3:	lea    rdi,[rdx-0x1]
 10074b7:	mov    rdx,rdi
 10074ba:	mov    QWORD PTR [rsp+0x20],rax
 10074bf:	call   QWORD PTR [rip+0xffffffffffff9ef3]        # 0x10013b8
 10074c5:	test   eax,eax
 10074c7:	js     0x10074e4
 10074c9:	cdqe   
 10074cb:	cmp    rax,rdi
 10074ce:	ja     0x10074e4
 10074d0:	jne    0x10074ed
 10074d2:	mov    WORD PTR [rsi+rdi*2],bx
 10074d6:	mov    rdi,QWORD PTR [rsp+0x30]
 10074db:	mov    eax,ebx
 10074dd:	add    rsp,0x38
 10074e1:	pop    rsi
 10074e2:	pop    rbx
 10074e3:	ret    
 10074e4:	mov    WORD PTR [rsi+rdi*2],bx
 10074e8:	mov    ebx,0x8007007a
 10074ed:	mov    rdi,QWORD PTR [rsp+0x30]
 10074f2:	mov    eax,ebx
 10074f4:	add    rsp,0x38
 10074f8:	pop    rsi
 10074f9:	pop    rbx
 10074fa:	ret    
 10074fb:	int3   
 10074fc:	int3   
 10074fd:	int3   
 10074fe:	int3   
 10074ff:	int3   
 1007500:	int3   
 1007501:	int3   
 1007502:	int3   
 1007503:	int3   
 1007504:	int3   
 1007505:	int3   
 1007506:	int3   
 1007507:	int3   
 1007508:	int3   
 1007509:	int3   
 100750a:	int3   
 100750b:	int3   
 100750c:	int3   
 100750d:	int3   
 100750e:	int3   
 100750f:	int3   
 1007510:	mov    QWORD PTR [rsp+0x10],rbx
 1007515:	push   rdi
 1007516:	sub    rsp,0x70
 100751a:	mov    eax,DWORD PTR [rcx+0x10]
 100751d:	mov    ebx,edx
 100751f:	mov    rdi,rcx
 1007522:	cmp    edx,eax
 1007524:	jbe    0x1007603
 100752a:	cmp    edx,r9d
 100752d:	jbe    0x100758a
 100752f:	lea    rdx,[rip+0xffffffffffffab0a]        # 0x1002040
 1007536:	lea    rcx,[rsp+0x48]
 100753b:	mov    r9d,0x800700ce
 1007541:	mov    r8d,0x11a
 1007547:	call   0x10036dc
 100754c:	lea    rdx,[rip+0x9d9d]        # 0x10112f0
 1007553:	mov    rcx,QWORD PTR [rax]
 1007556:	mov    QWORD PTR [rsp+0x20],rcx
 100755b:	mov    rcx,QWORD PTR [rax+0x8]
 100755f:	mov    QWORD PTR [rsp+0x28],rcx
 1007564:	mov    rcx,QWORD PTR [rax+0x10]
 1007568:	mov    QWORD PTR [rsp+0x30],rcx
 100756d:	mov    rcx,QWORD PTR [rax+0x18]
 1007571:	mov    QWORD PTR [rsp+0x38],rcx
 1007576:	mov    rax,QWORD PTR [rax+0x20]
 100757a:	lea    rcx,[rsp+0x20]
 100757f:	mov    QWORD PTR [rsp+0x40],rax
 1007584:	call   0x1004bf0
 1007589:	int3   
 100758a:	cmp    eax,r8d
 100758d:	mov    QWORD PTR [rsp+0x80],rsi
 1007595:	cmovb  r8d,eax
 1007599:	xor    edx,edx
 100759b:	mov    eax,ebx
 100759d:	div    r8d
 10075a0:	test   edx,edx
 10075a2:	je     0x10075ab
 10075a4:	lea    ebx,[rax+0x1]
 10075a7:	imul   ebx,r8d
 10075ab:	mov    ecx,ebx
 10075ad:	mov    eax,0x2
 10075b2:	mul    rcx
 10075b5:	mov    rcx,0xffffffffffffffff
 10075bc:	cmovo  rax,rcx
 10075c0:	mov    rcx,rax
 10075c3:	call   0x1004a94
 10075c8:	mov    r8d,DWORD PTR [rdi+0x14]
 10075cc:	mov    rdx,QWORD PTR [rdi+0x8]
 10075d0:	inc    r8d
 10075d3:	mov    rcx,rax
 10075d6:	mov    rsi,rax
 10075d9:	add    r8,r8
 10075dc:	call   0x1004cd6
 10075e1:	mov    rcx,QWORD PTR [rdi+0x8]
 10075e5:	cmp    rcx,QWORD PTR [rsp+0xa0]
 10075ed:	je     0x10075f4
 10075ef:	call   0x10049c8
 10075f4:	mov    QWORD PTR [rdi+0x8],rsi
 10075f8:	mov    rsi,QWORD PTR [rsp+0x80]
 1007600:	mov    DWORD PTR [rdi+0x10],ebx
 1007603:	mov    rbx,QWORD PTR [rsp+0x88]
 100760b:	add    rsp,0x70
 100760f:	pop    rdi
 1007610:	ret    
 1007611:	int3   
 1007612:	int3   
 1007613:	int3   
 1007614:	int3   
 1007615:	int3   
 1007616:	int3   
 1007617:	int3   
 1007618:	int3   
 1007619:	int3   
 100761a:	int3   
 100761b:	int3   
 100761c:	int3   
 100761d:	int3   
 100761e:	int3   
 100761f:	int3   
 1007620:	cmp    edx,r8d
 1007623:	jae    0x1007666
 1007625:	mov    QWORD PTR [rsp+0x8],rbx
 100762a:	mov    QWORD PTR [rsp+0x10],rsi
 100762f:	push   rdi
 1007630:	sub    rsp,0x20
 1007634:	mov    rbx,rcx
 1007637:	mov    rcx,QWORD PTR [rcx+0x8]
 100763b:	mov    rdi,r9
 100763e:	mov    esi,r8d
 1007641:	test   rcx,rcx
 1007644:	je     0x1007650
 1007646:	cmp    rcx,r9
 1007649:	je     0x1007650
 100764b:	call   0x10049c8
 1007650:	mov    DWORD PTR [rbx+0x10],esi
 1007653:	mov    rsi,QWORD PTR [rsp+0x38]
 1007658:	mov    QWORD PTR [rbx+0x8],rdi
 100765c:	mov    rbx,QWORD PTR [rsp+0x30]
 1007661:	add    rsp,0x20
 1007665:	pop    rdi
 1007666:	repz ret 
 1007668:	int3   
 1007669:	int3   
 100766a:	int3   
 100766b:	int3   
 100766c:	int3   
 100766d:	int3   
 100766e:	int3   
 100766f:	int3   
 1007670:	mov    QWORD PTR [rsp+0x10],rbx
 1007675:	mov    QWORD PTR [rsp+0x18],rbp
 100767a:	mov    QWORD PTR [rsp+0x20],rsi
 100767f:	push   rdi
 1007680:	sub    rsp,0x70
 1007684:	mov    edi,r9d
 1007687:	mov    esi,r8d
 100768a:	mov    rbp,rdx
 100768d:	mov    rbx,rcx
 1007690:	test   rdx,rdx
 1007693:	jne    0x10076ee
 1007695:	lea    r8d,[rdx+0x59]
 1007699:	lea    rcx,[rsp+0x48]
 100769e:	lea    rdx,[rip+0xffffffffffffa99b]        # 0x1002040
 10076a5:	mov    r9d,0x80070057
 10076ab:	call   0x10036dc
 10076b0:	lea    rdx,[rip+0x9c39]        # 0x10112f0
 10076b7:	mov    rcx,QWORD PTR [rax]
 10076ba:	mov    QWORD PTR [rsp+0x20],rcx
 10076bf:	mov    rcx,QWORD PTR [rax+0x8]
 10076c3:	mov    QWORD PTR [rsp+0x28],rcx
 10076c8:	mov    rcx,QWORD PTR [rax+0x10]
 10076cc:	mov    QWORD PTR [rsp+0x30],rcx
 10076d1:	mov    rcx,QWORD PTR [rax+0x18]
 10076d5:	mov    QWORD PTR [rsp+0x38],rcx
 10076da:	mov    rax,QWORD PTR [rax+0x20]
 10076de:	lea    rcx,[rsp+0x20]
 10076e3:	mov    QWORD PTR [rsp+0x40],rax
 10076e8:	call   0x1004bf0
 10076ed:	int3   
 10076ee:	mov    QWORD PTR [rsp+0x80],r14
 10076f6:	cmp    r9d,0xffffffff
 10076fa:	jne    0x1007707
 10076fc:	mov    rcx,rdx
 10076ff:	call   QWORD PTR [rip+0xffffffffffff9bdb]        # 0x10012e0
 1007705:	mov    edi,eax
 1007707:	lea    r14d,[rsi+rdi*1]
 100770b:	lea    edx,[r14+0x1]
 100770f:	cmp    edx,DWORD PTR [rbx+0x10]
 1007712:	jbe    0x100771e
 1007714:	mov    rax,QWORD PTR [rbx]
 1007717:	mov    rcx,rbx
 100771a:	call   QWORD PTR [rax]
 100771c:	jmp    0x100772e
 100771e:	test   esi,esi
 1007720:	jne    0x100772e
 1007722:	mov    rax,QWORD PTR [rbx]
 1007725:	lea    edx,[rdi+0x1]
 1007728:	mov    rcx,rbx
 100772b:	call   QWORD PTR [rax+0x8]
 100772e:	mov    rax,QWORD PTR [rbx+0x8]
 1007732:	mov    r8d,edi
 1007735:	mov    rdx,rbp
 1007738:	lea    rcx,[rax+rsi*2]
 100773c:	add    r8,r8
 100773f:	call   0x1004cd6
 1007744:	mov    rax,QWORD PTR [rbx+0x8]
 1007748:	mov    DWORD PTR [rbx+0x14],r14d
 100774c:	lea    r11,[rsp+0x70]
 1007751:	xor    edx,edx
 1007753:	mov    rbp,QWORD PTR [r11+0x20]
 1007757:	mov    rsi,QWORD PTR [r11+0x28]
 100775b:	mov    WORD PTR [rax+r14*2],dx
 1007760:	mov    eax,DWORD PTR [rbx+0x14]
 1007763:	mov    r14,QWORD PTR [rsp+0x80]
 100776b:	mov    rbx,QWORD PTR [r11+0x18]
 100776f:	mov    rsp,r11
 1007772:	pop    rdi
 1007773:	ret    
 1007774:	int3   
 1007775:	int3   
 1007776:	int3   
 1007777:	int3   
 1007778:	int3   
 1007779:	int3   
 100777a:	int3   
 100777b:	int3   
 100777c:	int3   
 100777d:	int3   
 100777e:	int3   
 100777f:	int3   
 1007780:	mov    QWORD PTR [rsp+0x8],rbx
 1007785:	mov    QWORD PTR [rsp+0x10],rbp
 100778a:	mov    QWORD PTR [rsp+0x18],rsi
 100778f:	push   rdi
 1007790:	sub    rsp,0x70
 1007794:	mov    edi,r9d
 1007797:	mov    esi,r8d
 100779a:	mov    rbp,rdx
 100779d:	mov    rbx,rcx
 10077a0:	test   rdx,rdx
 10077a3:	jne    0x10077fe
 10077a5:	lea    r8d,[rdx+0x73]
 10077a9:	lea    rcx,[rsp+0x48]
 10077ae:	lea    rdx,[rip+0xffffffffffffa88b]        # 0x1002040
 10077b5:	mov    r9d,0x80070057
 10077bb:	call   0x10036dc
 10077c0:	lea    rdx,[rip+0x9b29]        # 0x10112f0
 10077c7:	mov    rcx,QWORD PTR [rax]
 10077ca:	mov    QWORD PTR [rsp+0x20],rcx
 10077cf:	mov    rcx,QWORD PTR [rax+0x8]
 10077d3:	mov    QWORD PTR [rsp+0x28],rcx
 10077d8:	mov    rcx,QWORD PTR [rax+0x10]
 10077dc:	mov    QWORD PTR [rsp+0x30],rcx
 10077e1:	mov    rcx,QWORD PTR [rax+0x18]
 10077e5:	mov    QWORD PTR [rsp+0x38],rcx
 10077ea:	mov    rax,QWORD PTR [rax+0x20]
 10077ee:	lea    rcx,[rsp+0x20]
 10077f3:	mov    QWORD PTR [rsp+0x40],rax
 10077f8:	call   0x1004bf0
 10077fd:	int3   
 10077fe:	cmp    r9d,0xffffffff
 1007802:	jne    0x100780f
 1007804:	mov    rcx,rdx
 1007807:	call   QWORD PTR [rip+0xffffffffffff99c3]        # 0x10011d0
 100780d:	mov    edi,eax
 100780f:	lea    edx,[rsi+0x1]
 1007812:	add    edx,edi
 1007814:	cmp    edx,DWORD PTR [rbx+0x10]
 1007817:	jbe    0x1007823
 1007819:	mov    rax,QWORD PTR [rbx]
 100781c:	mov    rcx,rbx
 100781f:	call   QWORD PTR [rax]
 1007821:	jmp    0x1007833
 1007823:	test   esi,esi
 1007825:	jne    0x1007833
 1007827:	mov    rax,QWORD PTR [rbx]
 100782a:	lea    edx,[rdi+0x1]
 100782d:	mov    rcx,rbx
 1007830:	call   QWORD PTR [rax+0x8]
 1007833:	mov    rax,QWORD PTR [rbx+0x8]
 1007837:	lea    r9d,[rdi+0x1]
 100783b:	mov    edx,edi
 100783d:	lea    r8,[rax+rsi*2]
 1007841:	mov    rcx,rbp
 1007844:	mov    DWORD PTR [rbx+0x14],esi
 1007847:	call   0x1007e60
 100784c:	lea    r11,[rsp+0x70]
 1007851:	add    DWORD PTR [rbx+0x14],eax
 1007854:	mov    eax,DWORD PTR [rbx+0x14]
 1007857:	mov    rbx,QWORD PTR [r11+0x10]
 100785b:	mov    rbp,QWORD PTR [r11+0x18]
 100785f:	mov    rsi,QWORD PTR [r11+0x20]
 1007863:	mov    rsp,r11
 1007866:	pop    rdi
 1007867:	ret    
 1007868:	int3   
 1007869:	int3   
 100786a:	int3   
 100786b:	int3   
 100786c:	int3   
 100786d:	int3   
 100786e:	int3   
 100786f:	int3   
 1007870:	sub    rsp,0x38
 1007874:	lea    rax,[rcx+0x18]
 1007878:	mov    r9d,0x7fff
 100787e:	mov    r8d,0x41
 1007884:	mov    QWORD PTR [rsp+0x20],rax
 1007889:	call   0x1007510
 100788e:	add    rsp,0x38
 1007892:	ret    
 1007893:	int3   
 1007894:	int3   
 1007895:	int3   
 1007896:	int3   
 1007897:	int3   
 1007898:	int3   
 1007899:	int3   
 100789a:	int3   
 100789b:	int3   
 100789c:	int3   
 100789d:	int3   
 100789e:	int3   
 100789f:	int3   
 10078a0:	sub    rsp,0x28
 10078a4:	lea    r9,[rcx+0x18]
 10078a8:	cmp    QWORD PTR [rcx+0x8],r9
 10078ac:	je     0x10078b9
 10078ae:	mov    r8d,0x41
 10078b4:	call   0x1007620
 10078b9:	add    rsp,0x28
 10078bd:	ret    
 10078be:	int3   
 10078bf:	int3   
 10078c0:	int3   
 10078c1:	int3   
 10078c2:	int3   
 10078c3:	int3   
 10078c4:	int3   
 10078c5:	int3   
 10078c6:	int3   
 10078c7:	int3   
 10078c8:	int3   
 10078c9:	int3   
 10078ca:	int3   
 10078cb:	int3   
 10078cc:	int3   
 10078cd:	int3   
 10078ce:	int3   
 10078cf:	int3   
 10078d0:	mov    QWORD PTR [rsp+0x8],rcx
 10078d5:	push   rbx
 10078d6:	sub    rsp,0x30
 10078da:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10078e3:	mov    rbx,rcx
 10078e6:	lea    rax,[rip+0xffffffffffffa843]        # 0x1002130
 10078ed:	mov    QWORD PTR [rcx],rax
 10078f0:	mov    rcx,QWORD PTR [rcx+0x8]
 10078f4:	test   rcx,rcx
 10078f7:	je     0x1007908
 10078f9:	lea    rax,[rbx+0x18]
 10078fd:	cmp    rcx,rax
 1007900:	je     0x1007908
 1007902:	call   0x10049c8
 1007907:	nop
 1007908:	lea    rax,[rip+0xffffffffffff9ee1]        # 0x10017f0
 100790f:	mov    QWORD PTR [rbx],rax
 1007912:	add    rsp,0x30
 1007916:	pop    rbx
 1007917:	ret    
 1007918:	int3   
 1007919:	int3   
 100791a:	int3   
 100791b:	int3   
 100791c:	int3   
 100791d:	int3   
 100791e:	int3   
 100791f:	int3   
 1007920:	mov    QWORD PTR [rsp+0x8],rcx
 1007925:	push   rdi
 1007926:	sub    rsp,0x30
 100792a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1007933:	mov    QWORD PTR [rsp+0x48],rbx
 1007938:	mov    edi,edx
 100793a:	mov    rbx,rcx
 100793d:	lea    rax,[rip+0xffffffffffffa7ec]        # 0x1002130
 1007944:	mov    QWORD PTR [rcx],rax
 1007947:	mov    rcx,QWORD PTR [rcx+0x8]
 100794b:	test   rcx,rcx
 100794e:	je     0x100795f
 1007950:	lea    rax,[rbx+0x18]
 1007954:	cmp    rcx,rax
 1007957:	je     0x100795f
 1007959:	call   0x10049c8
 100795e:	nop
 100795f:	lea    rax,[rip+0xffffffffffff9e8a]        # 0x10017f0
 1007966:	mov    QWORD PTR [rbx],rax
 1007969:	test   dil,0x1
 100796d:	je     0x1007977
 100796f:	mov    rcx,rbx
 1007972:	call   0x10049c8
 1007977:	mov    rax,rbx
 100797a:	mov    rbx,QWORD PTR [rsp+0x48]
 100797f:	add    rsp,0x30
 1007983:	pop    rdi
 1007984:	ret    
 1007985:	int3   
 1007986:	int3   
 1007987:	int3   
 1007988:	int3   
 1007989:	int3   
 100798a:	int3   
 100798b:	int3   
 100798c:	int3   
 100798d:	int3   
 100798e:	int3   
 100798f:	int3   
 1007990:	mov    QWORD PTR [rsp+0x8],rcx
 1007995:	push   rdi
 1007996:	push   r14
 1007998:	push   r15
 100799a:	sub    rsp,0x40
 100799e:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 10079a7:	mov    QWORD PTR [rsp+0x68],rbx
 10079ac:	mov    QWORD PTR [rsp+0x70],rbp
 10079b1:	mov    QWORD PTR [rsp+0x78],rsi
 10079b6:	mov    ebp,r9d
 10079b9:	mov    rsi,r8
 10079bc:	mov    r14,rdx
 10079bf:	mov    rdi,rcx
 10079c2:	lea    rax,[rip+0xffffffffffffa79f]        # 0x1002168
 10079c9:	mov    QWORD PTR [rcx],rax
 10079cc:	mov    DWORD PTR [rcx+0x8],0x1
 10079d3:	lea    rbx,[rcx+0x18]
 10079d7:	mov    QWORD PTR [rsp+0x38],rbx
 10079dc:	lea    rax,[rip+0xffffffffffff9e0d]        # 0x10017f0
 10079e3:	mov    QWORD PTR [rbx],rax
 10079e6:	lea    rax,[rbx+0x18]
 10079ea:	mov    QWORD PTR [rbx+0x8],rax
 10079ee:	mov    QWORD PTR [rbx+0x10],0x42
 10079f6:	xor    r15d,r15d
 10079f9:	mov    WORD PTR [rax],r15w
 10079fd:	lea    rax,[rip+0xffffffffffffa72c]        # 0x1002130
 1007a04:	mov    QWORD PTR [rbx],rax
 1007a07:	mov    rdx,QWORD PTR [rsp+0x80]
 1007a0f:	mov    rax,QWORD PTR [rbx]
 1007a12:	or     r9d,0xffffffff
 1007a16:	xor    r8d,r8d
 1007a19:	mov    rcx,rbx
 1007a1c:	test   rdx,rdx
 1007a1f:	je     0x1007a67
 1007a21:	call   QWORD PTR [rax+0x20]
 1007a24:	mov    r8d,DWORD PTR [rbx+0x14]
 1007a28:	test   r8d,r8d
 1007a2b:	je     0x1007a45
 1007a2d:	lea    ecx,[r8-0x1]
 1007a31:	mov    rax,QWORD PTR [rbx+0x8]
 1007a35:	movzx  edx,WORD PTR [rax+rcx*2]
 1007a39:	cmp    dx,0x2f
 1007a3d:	je     0x1007a59
 1007a3f:	cmp    dx,0x5c
 1007a43:	je     0x1007a59
 1007a45:	mov    rax,QWORD PTR [rbx]
 1007a48:	or     r9d,0xffffffff
 1007a4c:	lea    rdx,[rip+0xffffffffffff9c05]        # 0x1001658
 1007a53:	mov    rcx,rbx
 1007a56:	call   QWORD PTR [rax+0x20]
 1007a59:	mov    rax,QWORD PTR [rbx]
 1007a5c:	or     r9d,0xffffffff
 1007a60:	mov    r8d,DWORD PTR [rbx+0x14]
 1007a64:	mov    rcx,rbx
 1007a67:	mov    rdx,rsi
 1007a6a:	call   QWORD PTR [rax+0x20]
 1007a6d:	xor    ecx,ecx
 1007a6f:	call   QWORD PTR [rip+0xffffffffffff96eb]        # 0x1001160
 1007a75:	lea    rbx,[rdi+0x10]
 1007a79:	mov    QWORD PTR [rsp+0x20],rbx
 1007a7e:	mov    r9d,ebp
 1007a81:	xor    r8d,r8d
 1007a84:	mov    rdx,rsi
 1007a87:	mov    rcx,r14
 1007a8a:	call   QWORD PTR [rip+0xffffffffffff9618]        # 0x10010a8
 1007a90:	test   eax,eax
 1007a92:	je     0x1007aa2
 1007a94:	mov    QWORD PTR [rbx],r15
 1007a97:	mov    ecx,eax
 1007a99:	call   QWORD PTR [rip+0xffffffffffff96c1]        # 0x1001160
 1007a9f:	nop
 1007aa0:	jmp    0x1007aa2
 1007aa2:	mov    rax,rdi
 1007aa5:	mov    rbx,QWORD PTR [rsp+0x68]
 1007aaa:	mov    rbp,QWORD PTR [rsp+0x70]
 1007aaf:	mov    rsi,QWORD PTR [rsp+0x78]
 1007ab4:	add    rsp,0x40
 1007ab8:	pop    r15
 1007aba:	pop    r14
 1007abc:	pop    rdi
 1007abd:	ret    
 1007abe:	int3   
 1007abf:	int3   
 1007ac0:	int3   
 1007ac1:	int3   
 1007ac2:	int3   
 1007ac3:	int3   
 1007ac4:	int3   
 1007ac5:	int3   
 1007ac6:	int3   
 1007ac7:	int3   
 1007ac8:	int3   
 1007ac9:	int3   
 1007aca:	int3   
 1007acb:	int3   
 1007acc:	int3   
 1007acd:	int3   
 1007ace:	int3   
 1007acf:	int3   
 1007ad0:	mov    QWORD PTR [rsp+0x8],rcx
 1007ad5:	push   rbx
 1007ad6:	sub    rsp,0x30
 1007ada:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1007ae3:	mov    rbx,rcx
 1007ae6:	lea    rax,[rip+0xffffffffffffa67b]        # 0x1002168
 1007aed:	mov    QWORD PTR [rcx],rax
 1007af0:	mov    rcx,QWORD PTR [rcx+0x10]
 1007af4:	test   rcx,rcx
 1007af7:	je     0x1007b06
 1007af9:	cmp    DWORD PTR [rbx+0x8],0x0
 1007afd:	je     0x1007b06
 1007aff:	call   QWORD PTR [rip+0xffffffffffff95b3]        # 0x10010b8
 1007b05:	nop
 1007b06:	add    rbx,0x18
 1007b0a:	mov    QWORD PTR [rsp+0x40],rbx
 1007b0f:	lea    rax,[rip+0xffffffffffffa61a]        # 0x1002130
 1007b16:	mov    QWORD PTR [rbx],rax
 1007b19:	mov    rcx,QWORD PTR [rbx+0x8]
 1007b1d:	test   rcx,rcx
 1007b20:	je     0x1007b31
 1007b22:	lea    rax,[rbx+0x18]
 1007b26:	cmp    rcx,rax
 1007b29:	je     0x1007b31
 1007b2b:	call   0x10049c8
 1007b30:	nop
 1007b31:	lea    rax,[rip+0xffffffffffff9cb8]        # 0x10017f0
 1007b38:	mov    QWORD PTR [rbx],rax
 1007b3b:	add    rsp,0x30
 1007b3f:	pop    rbx
 1007b40:	ret    
 1007b41:	int3   
 1007b42:	int3   
 1007b43:	int3   
 1007b44:	int3   
 1007b45:	int3   
 1007b46:	int3   
 1007b47:	int3   
 1007b48:	int3   
 1007b49:	int3   
 1007b4a:	int3   
 1007b4b:	int3   
 1007b4c:	int3   
 1007b4d:	int3   
 1007b4e:	int3   
 1007b4f:	int3   
 1007b50:	mov    QWORD PTR [rsp+0x8],rbx
 1007b55:	mov    QWORD PTR [rsp+0x10],rbp
 1007b5a:	mov    QWORD PTR [rsp+0x18],rsi
 1007b5f:	push   rdi
 1007b60:	sub    rsp,0x30
 1007b64:	mov    rbx,rcx
 1007b67:	xor    ecx,ecx
 1007b69:	mov    rdi,r9
 1007b6c:	movzx  esi,r8w
 1007b70:	mov    rbp,rdx
 1007b73:	call   QWORD PTR [rip+0xffffffffffff95e7]        # 0x1001160
 1007b79:	mov    r11,QWORD PTR [rbx+0x10]
 1007b7d:	test   r11,r11
 1007b80:	jne    0x1007b90
 1007b82:	lea    ecx,[r11+0x6]
 1007b86:	call   QWORD PTR [rip+0xffffffffffff95d4]        # 0x1001160
 1007b8c:	xor    eax,eax
 1007b8e:	jmp    0x1007bcc
 1007b90:	movzx  ecx,si
 1007b93:	call   0x1007d80
 1007b98:	xor    r8d,r8d
 1007b9b:	mov    rdx,rbp
 1007b9e:	mov    r9d,eax
 1007ba1:	mov    eax,DWORD PTR [rsp+0x60]
 1007ba5:	mov    rcx,r11
 1007ba8:	mov    DWORD PTR [rsp+0x28],eax
 1007bac:	mov    QWORD PTR [rsp+0x20],rdi
 1007bb1:	call   QWORD PTR [rip+0xffffffffffff94e1]        # 0x1001098
 1007bb7:	test   eax,eax
 1007bb9:	je     0x1007bc7
 1007bbb:	mov    ecx,eax
 1007bbd:	call   QWORD PTR [rip+0xffffffffffff959d]        # 0x1001160
 1007bc3:	xor    eax,eax
 1007bc5:	jmp    0x1007bcc
 1007bc7:	mov    eax,0x1
 1007bcc:	mov    rbx,QWORD PTR [rsp+0x40]
 1007bd1:	mov    rbp,QWORD PTR [rsp+0x48]
 1007bd6:	mov    rsi,QWORD PTR [rsp+0x50]
 1007bdb:	add    rsp,0x30
 1007bdf:	pop    rdi
 1007be0:	ret    
 1007be1:	int3   
 1007be2:	int3   
 1007be3:	int3   
 1007be4:	int3   
 1007be5:	int3   
 1007be6:	int3   
 1007be7:	int3   
 1007be8:	int3   
 1007be9:	int3   
 1007bea:	int3   
 1007beb:	int3   
 1007bec:	int3   
 1007bed:	int3   
 1007bee:	int3   
 1007bef:	int3   
 1007bf0:	mov    QWORD PTR [rsp+0x10],rbx
 1007bf5:	mov    QWORD PTR [rsp+0x18],rbp
 1007bfa:	mov    QWORD PTR [rsp+0x20],rsi
 1007bff:	push   rdi
 1007c00:	sub    rsp,0x30
 1007c04:	mov    rbx,rcx
 1007c07:	xor    ecx,ecx
 1007c09:	mov    rsi,r9
 1007c0c:	movzx  edi,r8w
 1007c10:	mov    rbp,rdx
 1007c13:	call   QWORD PTR [rip+0xffffffffffff9547]        # 0x1001160
 1007c19:	mov    rcx,QWORD PTR [rbx+0x10]
 1007c1d:	test   rcx,rcx
 1007c20:	jne    0x1007c31
 1007c22:	mov    ecx,0x6
 1007c27:	call   QWORD PTR [rip+0xffffffffffff9533]        # 0x1001160
 1007c2d:	xor    eax,eax
 1007c2f:	jmp    0x1007c83
 1007c31:	mov    rax,QWORD PTR [rsp+0x60]
 1007c36:	lea    r9,[rsp+0x40]
 1007c3b:	xor    r8d,r8d
 1007c3e:	mov    QWORD PTR [rsp+0x28],rax
 1007c43:	mov    rdx,rbp
 1007c46:	mov    QWORD PTR [rsp+0x20],rsi
 1007c4b:	call   QWORD PTR [rip+0xffffffffffff944f]        # 0x10010a0
 1007c51:	test   eax,eax
 1007c53:	je     0x1007c61
 1007c55:	mov    ecx,eax
 1007c57:	call   QWORD PTR [rip+0xffffffffffff9503]        # 0x1001160
 1007c5d:	xor    eax,eax
 1007c5f:	jmp    0x1007c83
 1007c61:	movzx  ecx,di
 1007c64:	call   0x1007d80
 1007c69:	cmp    DWORD PTR [rsp+0x40],eax
 1007c6d:	je     0x1007c7e
 1007c6f:	mov    ecx,0x70c
 1007c74:	call   QWORD PTR [rip+0xffffffffffff94e6]        # 0x1001160
 1007c7a:	xor    eax,eax
 1007c7c:	jmp    0x1007c83
 1007c7e:	mov    eax,0x1
 1007c83:	mov    rbx,QWORD PTR [rsp+0x48]
 1007c88:	mov    rbp,QWORD PTR [rsp+0x50]
 1007c8d:	mov    rsi,QWORD PTR [rsp+0x58]
 1007c92:	add    rsp,0x30
 1007c96:	pop    rdi
 1007c97:	ret    
 1007c98:	int3   
 1007c99:	int3   
 1007c9a:	int3   
 1007c9b:	int3   
 1007c9c:	int3   
 1007c9d:	int3   
 1007c9e:	int3   
 1007c9f:	int3   
 1007ca0:	mov    QWORD PTR [rsp+0x10],rbx
 1007ca5:	mov    QWORD PTR [rsp+0x18],rsi
 1007caa:	push   rdi
 1007cab:	sub    rsp,0x40
 1007caf:	mov    rbx,rcx
 1007cb2:	xor    ecx,ecx
 1007cb4:	mov    rdi,r8
 1007cb7:	mov    rsi,rdx
 1007cba:	call   QWORD PTR [rip+0xffffffffffff94a0]        # 0x1001160
 1007cc0:	mov    rcx,QWORD PTR [rbx+0x10]
 1007cc4:	mov    DWORD PTR [rsp+0x50],0x4
 1007ccc:	test   rcx,rcx
 1007ccf:	jne    0x1007cee
 1007cd1:	mov    ecx,0x6
 1007cd6:	call   QWORD PTR [rip+0xffffffffffff9484]        # 0x1001160
 1007cdc:	xor    eax,eax
 1007cde:	mov    rbx,QWORD PTR [rsp+0x58]
 1007ce3:	mov    rsi,QWORD PTR [rsp+0x60]
 1007ce8:	add    rsp,0x40
 1007cec:	pop    rdi
 1007ced:	ret    
 1007cee:	lea    rax,[rsp+0x50]
 1007cf3:	lea    r9,[rsp+0x68]
 1007cf8:	xor    r8d,r8d
 1007cfb:	mov    QWORD PTR [rsp+0x28],rax
 1007d00:	lea    rax,[rsp+0x30]
 1007d05:	mov    rdx,rsi
 1007d08:	mov    QWORD PTR [rsp+0x20],rax
 1007d0d:	call   QWORD PTR [rip+0xffffffffffff938d]        # 0x10010a0
 1007d13:	test   eax,eax
 1007d15:	je     0x1007d31
 1007d17:	mov    ecx,eax
 1007d19:	call   QWORD PTR [rip+0xffffffffffff9441]        # 0x1001160
 1007d1f:	xor    eax,eax
 1007d21:	mov    rbx,QWORD PTR [rsp+0x58]
 1007d26:	mov    rsi,QWORD PTR [rsp+0x60]
 1007d2b:	add    rsp,0x40
 1007d2f:	pop    rdi
 1007d30:	ret    
 1007d31:	cmp    DWORD PTR [rsp+0x68],0x4
 1007d36:	je     0x1007d55
 1007d38:	mov    ecx,0x70c
 1007d3d:	call   QWORD PTR [rip+0xffffffffffff941d]        # 0x1001160
 1007d43:	xor    eax,eax
 1007d45:	mov    rbx,QWORD PTR [rsp+0x58]
 1007d4a:	mov    rsi,QWORD PTR [rsp+0x60]
 1007d4f:	add    rsp,0x40
 1007d53:	pop    rdi
 1007d54:	ret    
 1007d55:	mov    eax,DWORD PTR [rsp+0x30]
 1007d59:	mov    rbx,QWORD PTR [rsp+0x58]
 1007d5e:	mov    rsi,QWORD PTR [rsp+0x60]
 1007d63:	mov    DWORD PTR [rdi],eax
 1007d65:	mov    eax,0x1
 1007d6a:	add    rsp,0x40
 1007d6e:	pop    rdi
 1007d6f:	ret    
 1007d70:	int3   
 1007d71:	int3   
 1007d72:	int3   
 1007d73:	int3   
 1007d74:	int3   
 1007d75:	int3   
 1007d76:	int3   
 1007d77:	int3   
 1007d78:	int3   
 1007d79:	int3   
 1007d7a:	int3   
 1007d7b:	int3   
 1007d7c:	int3   
 1007d7d:	int3   
 1007d7e:	int3   
 1007d7f:	int3   
 1007d80:	movzx  eax,cx
 1007d83:	add    eax,0xfffffffd
 1007d86:	cmp    eax,0x7f
 1007d89:	ja     0x1007db4
 1007d8b:	lea    rdx,[rip+0xffffffffffff826e]        # 0x1000000
 1007d92:	cdqe   
 1007d94:	movzx  eax,BYTE PTR [rdx+rax*1+0x7dcc]
 1007d9c:	mov    ecx,DWORD PTR [rdx+rax*4+0x7dbc]
 1007da3:	add    rcx,rdx
 1007da6:	jmp    rcx
 1007da8:	mov    eax,0x1
 1007dad:	ret    
 1007dae:	mov    eax,0x4
 1007db3:	ret    
 1007db4:	mov    eax,0x3
 1007db9:	ret    
 1007dba:	xchg   ax,ax
 1007dbc:	scas   al,BYTE PTR es:[rdi]
 1007dbd:	jge    0x1007dbf
 1007dbf:	add    BYTE PTR [rbp+rdi*2+0x7da80000],dh
 1007dc6:	add    BYTE PTR [rax],al
 1007dc8:	mov    ah,0x7d
 1007dca:	add    BYTE PTR [rax],al
 1007dcc:	add    BYTE PTR [rbx],al
 1007dce:	add    eax,DWORD PTR [rbx]
 1007dd0:	add    eax,DWORD PTR [rbx]
 1007dd2:	add    eax,DWORD PTR [rbx]
 1007dd4:	add    eax,DWORD PTR [rbx]
 1007dd6:	add    eax,DWORD PTR [rbx]
 1007dd8:	add    eax,DWORD PTR [rbx]
 1007dda:	add    eax,DWORD PTR [rbx]
 1007ddc:	add    BYTE PTR [rcx],al
 1007dde:	add    DWORD PTR [rbx],eax
 1007de0:	add    eax,DWORD PTR [rbx]
 1007de2:	add    eax,DWORD PTR [rbx]
 1007de4:	add    eax,DWORD PTR [rbx]
 1007de6:	add    eax,DWORD PTR [rbx]
 1007de8:	add    eax,DWORD PTR [rbx]
 1007dea:	add    eax,DWORD PTR [rbx]
 1007dec:	add    eax,DWORD PTR [rbx]
 1007dee:	add    eax,DWORD PTR [rbx]
 1007df0:	add    eax,DWORD PTR [rbx]
 1007df2:	add    eax,DWORD PTR [rbx]
 1007df4:	add    eax,DWORD PTR [rbx]
 1007df6:	add    eax,DWORD PTR [rbx]
 1007df8:	add    eax,DWORD PTR [rbx]
 1007dfa:	add    eax,DWORD PTR [rbx]
 1007dfc:	add    eax,DWORD PTR [rbx]
 1007dfe:	add    eax,DWORD PTR [rbx]
 1007e00:	add    eax,DWORD PTR [rbx]
 1007e02:	add    eax,DWORD PTR [rbx]
 1007e04:	add    eax,DWORD PTR [rbx]
 1007e06:	add    eax,DWORD PTR [rbx]
 1007e08:	add    eax,DWORD PTR [rbx]
 1007e0a:	add    eax,DWORD PTR [rbx]
 1007e0c:	add    eax,DWORD PTR [rbx]
 1007e0e:	add    eax,DWORD PTR [rbx]
 1007e10:	add    eax,DWORD PTR [rbx]
 1007e12:	add    eax,DWORD PTR [rbx]
 1007e14:	add    eax,DWORD PTR [rbx]
 1007e16:	add    eax,DWORD PTR [rbx]
 1007e18:	add    eax,DWORD PTR [rbx]
 1007e1a:	add    eax,DWORD PTR [rbx]
 1007e1c:	add    eax,DWORD PTR [rbx]
 1007e1e:	add    eax,DWORD PTR [rbx]
 1007e20:	add    eax,DWORD PTR [rbx]
 1007e22:	add    eax,DWORD PTR [rbx]
 1007e24:	add    eax,DWORD PTR [rbx]
 1007e26:	add    eax,DWORD PTR [rbx]
 1007e28:	add    eax,DWORD PTR [rbx]
 1007e2a:	add    eax,DWORD PTR [rbx]
 1007e2c:	add    eax,DWORD PTR [rbx]
 1007e2e:	add    eax,DWORD PTR [rbx]
 1007e30:	add    eax,DWORD PTR [rbx]
 1007e32:	add    eax,DWORD PTR [rbx]
 1007e34:	add    eax,DWORD PTR [rbx]
 1007e36:	add    eax,DWORD PTR [rbx]
 1007e38:	add    eax,DWORD PTR [rbx]
 1007e3a:	add    eax,DWORD PTR [rbx]
 1007e3c:	add    eax,DWORD PTR [rbx]
 1007e3e:	add    eax,DWORD PTR [rbx]
 1007e40:	add    eax,DWORD PTR [rbx]
 1007e42:	add    eax,DWORD PTR [rbx]
 1007e44:	add    eax,DWORD PTR [rbx]
 1007e46:	add    eax,DWORD PTR [rbx]
 1007e48:	add    eax,DWORD PTR [rcx]
 1007e4a:	add    eax,DWORD PTR [rdx]
 1007e4c:	int3   
 1007e4d:	int3   
 1007e4e:	int3   
 1007e4f:	int3   
 1007e50:	int3   
 1007e51:	int3   
 1007e52:	int3   
 1007e53:	int3   
 1007e54:	int3   
 1007e55:	int3   
 1007e56:	int3   
 1007e57:	int3   
 1007e58:	int3   
 1007e59:	int3   
 1007e5a:	int3   
 1007e5b:	int3   
 1007e5c:	int3   
 1007e5d:	int3   
 1007e5e:	int3   
 1007e5f:	int3   
 1007e60:	mov    QWORD PTR [rsp+0x10],rsi
 1007e65:	push   rdi
 1007e66:	sub    rsp,0x30
 1007e6a:	movsxd rdi,r9d
 1007e6d:	mov    rsi,r8
 1007e70:	mov    r9d,edx
 1007e73:	mov    DWORD PTR [rsp+0x28],edi
 1007e77:	mov    QWORD PTR [rsp+0x20],r8
 1007e7c:	mov    r8,rcx
 1007e7f:	xor    ecx,ecx
 1007e81:	xor    edx,edx
 1007e83:	call   QWORD PTR [rip+0xffffffffffff9307]        # 0x1001190
 1007e89:	test   edi,edi
 1007e8b:	je     0x1007ec6
 1007e8d:	mov    QWORD PTR [rsp+0x40],rbx
 1007e92:	xor    ebx,ebx
 1007e94:	cmp    eax,edi
 1007e96:	jge    0x1007eaf
 1007e98:	movsxd rcx,eax
 1007e9b:	mov    WORD PTR [rsi+rcx*2],bx
 1007e9f:	mov    rbx,QWORD PTR [rsp+0x40]
 1007ea4:	mov    rsi,QWORD PTR [rsp+0x48]
 1007ea9:	add    rsp,0x30
 1007ead:	pop    rdi
 1007eae:	ret    
 1007eaf:	mov    ecx,0x7a
 1007eb4:	mov    WORD PTR [rsi+rdi*2-0x2],bx
 1007eb9:	call   QWORD PTR [rip+0xffffffffffff92a1]        # 0x1001160
 1007ebf:	mov    eax,ebx
 1007ec1:	mov    rbx,QWORD PTR [rsp+0x40]
 1007ec6:	mov    rsi,QWORD PTR [rsp+0x48]
 1007ecb:	add    rsp,0x30
 1007ecf:	pop    rdi
 1007ed0:	ret    
 1007ed1:	int3   
 1007ed2:	int3   
 1007ed3:	int3   
 1007ed4:	int3   
 1007ed5:	int3   
 1007ed6:	int3   
 1007ed7:	int3   
 1007ed8:	int3   
 1007ed9:	int3   
 1007eda:	int3   
 1007edb:	int3   
 1007edc:	int3   
 1007edd:	int3   
 1007ede:	int3   
 1007edf:	int3   
 1007ee0:	mov    rcx,QWORD PTR [rcx]
 1007ee3:	jmp    0x10049c8
 1007ee8:	int3   
 1007ee9:	int3   
 1007eea:	int3   
 1007eeb:	int3   
 1007eec:	int3   
 1007eed:	int3   
 1007eee:	int3   
 1007eef:	int3   
 1007ef0:	mov    QWORD PTR [rsp+0x8],rbx
 1007ef5:	push   rdi
 1007ef6:	sub    rsp,0x20
 1007efa:	mov    rbx,rcx
 1007efd:	mov    rcx,QWORD PTR [rcx]
 1007f00:	mov    edi,edx
 1007f02:	test   rcx,rcx
 1007f05:	je     0x1007f0c
 1007f07:	call   0x10049c8
 1007f0c:	mov    rcx,rdi
 1007f0f:	call   0x1004a94
 1007f14:	mov    DWORD PTR [rbx+0x10],edi
 1007f17:	mov    QWORD PTR [rbx],rax
 1007f1a:	mov    QWORD PTR [rbx+0x8],rax
 1007f1e:	mov    rbx,QWORD PTR [rsp+0x30]
 1007f23:	mov    BYTE PTR [rax],0x0
 1007f26:	add    rsp,0x20
 1007f2a:	pop    rdi
 1007f2b:	ret    
 1007f2c:	int3   
 1007f2d:	int3   
 1007f2e:	int3   
 1007f2f:	int3   
 1007f30:	int3   
 1007f31:	int3   
 1007f32:	int3   
 1007f33:	int3   
 1007f34:	int3   
 1007f35:	int3   
 1007f36:	int3   
 1007f37:	int3   
 1007f38:	int3   
 1007f39:	int3   
 1007f3a:	int3   
 1007f3b:	int3   
 1007f3c:	int3   
 1007f3d:	int3   
 1007f3e:	int3   
 1007f3f:	int3   
 1007f40:	mov    QWORD PTR [rsp+0x10],rbp
 1007f45:	mov    QWORD PTR [rsp+0x18],rsi
 1007f4a:	push   rdi
 1007f4b:	sub    rsp,0x70
 1007f4f:	mov    rbp,r8
 1007f52:	mov    esi,edx
 1007f54:	mov    rdi,rcx
 1007f57:	cmp    edx,0xffffffff
 1007f5a:	jb     0x1007fb7
 1007f5c:	lea    rdx,[rip+0xffffffffffffab7d]        # 0x1002ae0
 1007f63:	lea    rcx,[rsp+0x48]
 1007f68:	mov    r9d,0x800700ce
 1007f6e:	mov    r8d,0x14d
 1007f74:	call   0x10036dc
 1007f79:	lea    rdx,[rip+0x9370]        # 0x10112f0
 1007f80:	mov    rcx,QWORD PTR [rax]
 1007f83:	mov    QWORD PTR [rsp+0x20],rcx
 1007f88:	mov    rcx,QWORD PTR [rax+0x8]
 1007f8c:	mov    QWORD PTR [rsp+0x28],rcx
 1007f91:	mov    rcx,QWORD PTR [rax+0x10]
 1007f95:	mov    QWORD PTR [rsp+0x30],rcx
 1007f9a:	mov    rcx,QWORD PTR [rax+0x18]
 1007f9e:	mov    QWORD PTR [rsp+0x38],rcx
 1007fa3:	mov    rax,QWORD PTR [rax+0x20]
 1007fa7:	lea    rcx,[rsp+0x20]
 1007fac:	mov    QWORD PTR [rsp+0x40],rax
 1007fb1:	call   0x1004bf0
 1007fb6:	int3   
 1007fb7:	mov    QWORD PTR [rsp+0x80],rbx
 1007fbf:	lea    ebx,[rsi+0x1]
 1007fc2:	cmp    ebx,DWORD PTR [rcx+0x10]
 1007fc5:	jbe    0x1007fe8
 1007fc7:	mov    rcx,QWORD PTR [rcx]
 1007fca:	test   rcx,rcx
 1007fcd:	je     0x1007fd4
 1007fcf:	call   0x10049c8
 1007fd4:	mov    ecx,ebx
 1007fd6:	call   0x1004a94
 1007fdb:	mov    DWORD PTR [rdi+0x10],ebx
 1007fde:	mov    QWORD PTR [rdi],rax
 1007fe1:	mov    QWORD PTR [rdi+0x8],rax
 1007fe5:	mov    BYTE PTR [rax],0x0
 1007fe8:	mov    edx,DWORD PTR [rdi+0x10]
 1007feb:	mov    rcx,QWORD PTR [rdi]
 1007fee:	mov    r9,rsi
 1007ff1:	inc    edx
 1007ff3:	mov    r8,rbp
 1007ff6:	call   QWORD PTR [rip+0xffffffffffff9354]        # 0x1001350
 1007ffc:	mov    rax,QWORD PTR [rdi]
 1007fff:	mov    rbx,QWORD PTR [rsp+0x80]
 1008007:	add    rax,rsi
 100800a:	lea    r11,[rsp+0x70]
 100800f:	mov    rbp,QWORD PTR [r11+0x18]
 1008013:	mov    rsi,QWORD PTR [r11+0x20]
 1008017:	mov    QWORD PTR [rdi+0x8],rax
 100801b:	mov    BYTE PTR [rax],0x0
 100801e:	mov    rsp,r11
 1008021:	pop    rdi
 1008022:	ret    
 1008023:	int3   
 1008024:	int3   
 1008025:	int3   
 1008026:	int3   
 1008027:	int3   
 1008028:	int3   
 1008029:	int3   
 100802a:	int3   
 100802b:	int3   
 100802c:	int3   
 100802d:	int3   
 100802e:	int3   
 100802f:	int3   
 1008030:	mov    QWORD PTR [rsp+0x8],rbx
 1008035:	mov    QWORD PTR [rsp+0x10],rbp
 100803a:	mov    QWORD PTR [rsp+0x18],rsi
 100803f:	push   rdi
 1008040:	sub    rsp,0x70
 1008044:	mov    rdi,rcx
 1008047:	mov    ecx,DWORD PTR [rcx+0x8]
 100804a:	mov    ebx,edx
 100804c:	sub    ecx,DWORD PTR [rdi]
 100804e:	mov    eax,DWORD PTR [rdi+0x10]
 1008051:	lea    esi,[rbx+0x1]
 1008054:	sub    eax,ecx
 1008056:	mov    rbp,r8
 1008059:	cmp    esi,eax
 100805b:	jbe    0x10080ca
 100805d:	lea    edx,[rcx+rbx*1]
 1008060:	cmp    edx,0xffffffff
 1008063:	jb     0x10080c0
 1008065:	lea    rdx,[rip+0xffffffffffffaa74]        # 0x1002ae0
 100806c:	lea    rcx,[rsp+0x48]
 1008071:	mov    r9d,0x800700ce
 1008077:	mov    r8d,0x166
 100807d:	call   0x10036dc
 1008082:	lea    rdx,[rip+0x9267]        # 0x10112f0
 1008089:	mov    rcx,QWORD PTR [rax]
 100808c:	mov    QWORD PTR [rsp+0x20],rcx
 1008091:	mov    rcx,QWORD PTR [rax+0x8]
 1008095:	mov    QWORD PTR [rsp+0x28],rcx
 100809a:	mov    rcx,QWORD PTR [rax+0x10]
 100809e:	mov    QWORD PTR [rsp+0x30],rcx
 10080a3:	mov    rcx,QWORD PTR [rax+0x18]
 10080a7:	mov    QWORD PTR [rsp+0x38],rcx
 10080ac:	mov    rax,QWORD PTR [rax+0x20]
 10080b0:	lea    rcx,[rsp+0x20]
 10080b5:	mov    QWORD PTR [rsp+0x40],rax
 10080ba:	call   0x1004bf0
 10080bf:	int3   
 10080c0:	inc    edx
 10080c2:	mov    rcx,rdi
 10080c5:	call   0x1008110
 10080ca:	mov    rcx,QWORD PTR [rdi+0x8]
 10080ce:	mov    edx,esi
 10080d0:	mov    r9,rbx
 10080d3:	mov    r8,rbp
 10080d6:	call   QWORD PTR [rip+0xffffffffffff9274]        # 0x1001350
 10080dc:	add    QWORD PTR [rdi+0x8],rbx
 10080e0:	mov    rax,QWORD PTR [rdi+0x8]
 10080e4:	lea    r11,[rsp+0x70]
 10080e9:	mov    BYTE PTR [rax],0x0
 10080ec:	mov    rbx,QWORD PTR [r11+0x10]
 10080f0:	mov    rbp,QWORD PTR [r11+0x18]
 10080f4:	mov    rsi,QWORD PTR [r11+0x20]
 10080f8:	mov    rsp,r11
 10080fb:	pop    rdi
 10080fc:	ret    
 10080fd:	int3   
 10080fe:	int3   
 10080ff:	int3   
 1008100:	int3   
 1008101:	int3   
 1008102:	int3   
 1008103:	int3   
 1008104:	int3   
 1008105:	int3   
 1008106:	int3   
 1008107:	int3   
 1008108:	int3   
 1008109:	int3   
 100810a:	int3   
 100810b:	int3   
 100810c:	int3   
 100810d:	int3   
 100810e:	int3   
 100810f:	int3   
 1008110:	mov    QWORD PTR [rsp+0x10],rbx
 1008115:	mov    QWORD PTR [rsp+0x18],rbp
 100811a:	push   rsi
 100811b:	sub    rsp,0x70
 100811f:	mov    ebx,DWORD PTR [rcx+0x8]
 1008122:	mov    ebp,edx
 1008124:	mov    rsi,rcx
 1008127:	sub    ebx,DWORD PTR [rcx]
 1008129:	cmp    ebx,edx
 100812b:	jb     0x1008188
 100812d:	lea    rdx,[rip+0xffffffffffffa9ac]        # 0x1002ae0
 1008134:	lea    rcx,[rsp+0x48]
 1008139:	mov    r9d,0x800700ce
 100813f:	mov    r8d,0x19c
 1008145:	call   0x10036dc
 100814a:	lea    rdx,[rip+0x919f]        # 0x10112f0
 1008151:	mov    rcx,QWORD PTR [rax]
 1008154:	mov    QWORD PTR [rsp+0x20],rcx
 1008159:	mov    rcx,QWORD PTR [rax+0x8]
 100815d:	mov    QWORD PTR [rsp+0x28],rcx
 1008162:	mov    rcx,QWORD PTR [rax+0x10]
 1008166:	mov    QWORD PTR [rsp+0x30],rcx
 100816b:	mov    rcx,QWORD PTR [rax+0x18]
 100816f:	mov    QWORD PTR [rsp+0x38],rcx
 1008174:	mov    rax,QWORD PTR [rax+0x20]
 1008178:	lea    rcx,[rsp+0x20]
 100817d:	mov    QWORD PTR [rsp+0x40],rax
 1008182:	call   0x1004bf0
 1008187:	int3   
 1008188:	mov    rcx,rbp
 100818b:	mov    QWORD PTR [rsp+0x80],rdi
 1008193:	call   0x1004a94
 1008198:	mov    rdx,QWORD PTR [rsi]
 100819b:	mov    r8,rbx
 100819e:	mov    rcx,rax
 10081a1:	mov    rdi,rax
 10081a4:	call   0x1004cd6
 10081a9:	mov    rcx,QWORD PTR [rsi]
 10081ac:	call   0x10049c8
 10081b1:	lea    rax,[rbx+rdi*1]
 10081b5:	lea    r11,[rsp+0x70]
 10081ba:	mov    rbx,QWORD PTR [r11+0x18]
 10081be:	mov    QWORD PTR [rsi],rdi
 10081c1:	mov    rdi,QWORD PTR [rsp+0x80]
 10081c9:	mov    DWORD PTR [rsi+0x10],ebp
 10081cc:	mov    rbp,QWORD PTR [r11+0x20]
 10081d0:	mov    QWORD PTR [rsi+0x8],rax
 10081d4:	mov    BYTE PTR [rax],0x0
 10081d7:	mov    rsp,r11
 10081da:	pop    rsi
 10081db:	ret    
 10081dc:	int3   
 10081dd:	int3   
 10081de:	int3   
 10081df:	int3   
 10081e0:	int3   
 10081e1:	int3   
 10081e2:	int3   
 10081e3:	int3   
 10081e4:	int3   
 10081e5:	int3   
 10081e6:	int3   
 10081e7:	int3   
 10081e8:	int3   
 10081e9:	int3   
 10081ea:	int3   
 10081eb:	int3   
 10081ec:	int3   
 10081ed:	int3   
 10081ee:	int3   
 10081ef:	int3   
 10081f0:	rex push rbx
 10081f2:	sub    rsp,0x20
 10081f6:	lea    rax,[rip+0xffffffffffffa93b]        # 0x1002b38
 10081fd:	mov    rbx,rcx
 1008200:	mov    QWORD PTR [rcx],rax
 1008203:	mov    rcx,QWORD PTR [rcx+0x8]
 1008207:	test   rcx,rcx
 100820a:	je     0x1008220
 100820c:	cmp    rcx,0xffffffffffffffff
 1008210:	je     0x1008220
 1008212:	call   QWORD PTR [rip+0xffffffffffff8f80]        # 0x1001198
 1008218:	mov    QWORD PTR [rbx+0x8],0x0
 1008220:	add    rsp,0x20
 1008224:	pop    rbx
 1008225:	ret    
 1008226:	int3   
 1008227:	int3   
 1008228:	int3   
 1008229:	int3   
 100822a:	int3   
 100822b:	int3   
 100822c:	int3   
 100822d:	int3   
 100822e:	int3   
 100822f:	int3   
 1008230:	rex push rbx
 1008232:	sub    rsp,0x20
 1008236:	mov    rbx,rcx
 1008239:	mov    rcx,QWORD PTR [rcx+0x8]
 100823d:	test   rcx,rcx
 1008240:	je     0x1008256
 1008242:	cmp    rcx,0xffffffffffffffff
 1008246:	je     0x1008256
 1008248:	call   QWORD PTR [rip+0xffffffffffff8f4a]        # 0x1001198
 100824e:	mov    QWORD PTR [rbx+0x8],0x0
 1008256:	add    rsp,0x20
 100825a:	pop    rbx
 100825b:	ret    
 100825c:	int3   
 100825d:	int3   
 100825e:	int3   
 100825f:	int3   
 1008260:	int3   
 1008261:	int3   
 1008262:	int3   
 1008263:	int3   
 1008264:	int3   
 1008265:	int3   
 1008266:	int3   
 1008267:	int3   
 1008268:	int3   
 1008269:	int3   
 100826a:	int3   
 100826b:	int3   
 100826c:	int3   
 100826d:	int3   
 100826e:	int3   
 100826f:	int3   
 1008270:	mov    QWORD PTR [rsp+0x8],rbx
 1008275:	push   rdi
 1008276:	sub    rsp,0x20
 100827a:	lea    rax,[rip+0xffffffffffffa8b7]        # 0x1002b38
 1008281:	mov    rbx,rcx
 1008284:	mov    edi,edx
 1008286:	mov    QWORD PTR [rcx],rax
 1008289:	mov    rcx,QWORD PTR [rcx+0x8]
 100828d:	test   rcx,rcx
 1008290:	je     0x10082a6
 1008292:	cmp    rcx,0xffffffffffffffff
 1008296:	je     0x10082a6
 1008298:	call   QWORD PTR [rip+0xffffffffffff8efa]        # 0x1001198
 100829e:	mov    QWORD PTR [rbx+0x8],0x0
 10082a6:	test   dil,0x1
 10082aa:	je     0x10082b4
 10082ac:	mov    rcx,rbx
 10082af:	call   0x10049c8
 10082b4:	mov    rax,rbx
 10082b7:	mov    rbx,QWORD PTR [rsp+0x30]
 10082bc:	add    rsp,0x20
 10082c0:	pop    rdi
 10082c1:	ret    
 10082c2:	int3   
 10082c3:	int3   
 10082c4:	int3   
 10082c5:	int3   
 10082c6:	int3   
 10082c7:	int3   
 10082c8:	int3   
 10082c9:	int3   
 10082ca:	int3   
 10082cb:	int3   
 10082cc:	int3   
 10082cd:	int3   
 10082ce:	int3   
 10082cf:	int3   
 10082d0:	mov    QWORD PTR [rsp+0x8],rbx
 10082d5:	push   rdi
 10082d6:	sub    rsp,0x20
 10082da:	mov    rbx,rcx
 10082dd:	mov    rcx,QWORD PTR [rcx+0x8]
 10082e1:	mov    rdi,rdx
 10082e4:	cmp    rcx,rdx
 10082e7:	je     0x1008300
 10082e9:	test   rcx,rcx
 10082ec:	je     0x10082fc
 10082ee:	call   QWORD PTR [rip+0xffffffffffff8f2c]        # 0x1001220
 10082f4:	mov    QWORD PTR [rbx+0x8],0x0
 10082fc:	mov    QWORD PTR [rbx+0x8],rdi
 1008300:	mov    rax,rbx
 1008303:	mov    rbx,QWORD PTR [rsp+0x30]
 1008308:	add    rsp,0x20
 100830c:	pop    rdi
 100830d:	ret    
 100830e:	int3   
 100830f:	int3   
 1008310:	int3   
 1008311:	int3   
 1008312:	int3   
 1008313:	int3   
 1008314:	int3   
 1008315:	int3   
 1008316:	int3   
 1008317:	int3   
 1008318:	int3   
 1008319:	int3   
 100831a:	int3   
 100831b:	int3   
 100831c:	int3   
 100831d:	int3   
 100831e:	int3   
 100831f:	int3   
 1008320:	rex push rbx
 1008322:	sub    rsp,0x20
 1008326:	lea    rax,[rip+0xffffffffffffa813]        # 0x1002b40
 100832d:	mov    rbx,rcx
 1008330:	mov    QWORD PTR [rcx],rax
 1008333:	mov    rcx,QWORD PTR [rcx+0x8]
 1008337:	test   rcx,rcx
 100833a:	je     0x100834a
 100833c:	call   QWORD PTR [rip+0xffffffffffff8ede]        # 0x1001220
 1008342:	mov    QWORD PTR [rbx+0x8],0x0
 100834a:	add    rsp,0x20
 100834e:	pop    rbx
 100834f:	ret    
 1008350:	int3   
 1008351:	int3   
 1008352:	int3   
 1008353:	int3   
 1008354:	int3   
 1008355:	int3   
 1008356:	int3   
 1008357:	int3   
 1008358:	int3   
 1008359:	int3   
 100835a:	int3   
 100835b:	int3   
 100835c:	int3   
 100835d:	int3   
 100835e:	int3   
 100835f:	int3   
 1008360:	mov    QWORD PTR [rsp+0x8],rbx
 1008365:	push   rdi
 1008366:	sub    rsp,0x20
 100836a:	lea    rax,[rip+0xffffffffffffa7cf]        # 0x1002b40
 1008371:	mov    rbx,rcx
 1008374:	mov    edi,edx
 1008376:	mov    QWORD PTR [rcx],rax
 1008379:	mov    rcx,QWORD PTR [rcx+0x8]
 100837d:	test   rcx,rcx
 1008380:	je     0x1008390
 1008382:	call   QWORD PTR [rip+0xffffffffffff8e98]        # 0x1001220
 1008388:	mov    QWORD PTR [rbx+0x8],0x0
 1008390:	test   dil,0x1
 1008394:	je     0x100839e
 1008396:	mov    rcx,rbx
 1008399:	call   0x10049c8
 100839e:	mov    rax,rbx
 10083a1:	mov    rbx,QWORD PTR [rsp+0x30]
 10083a6:	add    rsp,0x20
 10083aa:	pop    rdi
 10083ab:	ret    
 10083ac:	int3   
 10083ad:	int3   
 10083ae:	int3   
 10083af:	int3   
 10083b0:	int3   
 10083b1:	int3   
 10083b2:	int3   
 10083b3:	int3   
 10083b4:	int3   
 10083b5:	int3   
 10083b6:	int3   
 10083b7:	int3   
 10083b8:	int3   
 10083b9:	int3   
 10083ba:	int3   
 10083bb:	int3   
 10083bc:	int3   
 10083bd:	int3   
 10083be:	int3   
 10083bf:	int3   
 10083c0:	jmp    0x100d1a0
 10083c5:	int3   
 10083c6:	int3   
 10083c7:	int3   
 10083c8:	int3   
 10083c9:	int3   
 10083ca:	int3   
 10083cb:	int3   
 10083cc:	int3   
 10083cd:	int3   
 10083ce:	int3   
 10083cf:	int3   
 10083d0:	jmp    0x100d1a0
 10083d5:	int3   
 10083d6:	int3   
 10083d7:	int3   
 10083d8:	int3   
 10083d9:	int3   
 10083da:	int3   
 10083db:	int3   
 10083dc:	int3   
 10083dd:	int3   
 10083de:	int3   
 10083df:	int3   
 10083e0:	mov    rcx,QWORD PTR [rcx]
 10083e3:	jmp    0x10049c8
 10083e8:	int3   
 10083e9:	int3   
 10083ea:	int3   
 10083eb:	int3   
 10083ec:	int3   
 10083ed:	int3   
 10083ee:	int3   
 10083ef:	int3   
 10083f0:	rex push rbx
 10083f2:	sub    rsp,0x70
 10083f6:	mov    rbx,rcx
 10083f9:	mov    rcx,QWORD PTR [rcx]
 10083fc:	test   rcx,rcx
 10083ff:	je     0x1008406
 1008401:	call   0x10049c8
 1008406:	mov    ecx,0x8
 100840b:	call   0x1004a94
 1008410:	mov    edx,0x8
 1008415:	lea    r8d,[rdx-0x6]
 1008419:	mov    rcx,rax
 100841c:	mov    QWORD PTR [rbx],rax
 100841f:	call   QWORD PTR [rip+0xffffffffffff8c2b]        # 0x1001050
 1008425:	test   eax,eax
 1008427:	jne    0x1008493
 1008429:	call   QWORD PTR [rip+0xffffffffffff8ee9]        # 0x1001318
 100842f:	test   eax,eax
 1008431:	jle    0x100843b
 1008433:	movzx  eax,ax
 1008436:	or     eax,0x80070000
 100843b:	lea    rdx,[rip+0xffffffffffffa70e]        # 0x1002b50
 1008442:	lea    rcx,[rsp+0x48]
 1008447:	mov    r9d,eax
 100844a:	mov    r8d,0x127
 1008450:	call   0x10036dc
 1008455:	lea    rdx,[rip+0x8e94]        # 0x10112f0
 100845c:	mov    rcx,QWORD PTR [rax]
 100845f:	mov    QWORD PTR [rsp+0x20],rcx
 1008464:	mov    rcx,QWORD PTR [rax+0x8]
 1008468:	mov    QWORD PTR [rsp+0x28],rcx
 100846d:	mov    rcx,QWORD PTR [rax+0x10]
 1008471:	mov    QWORD PTR [rsp+0x30],rcx
 1008476:	mov    rcx,QWORD PTR [rax+0x18]
 100847a:	mov    QWORD PTR [rsp+0x38],rcx
 100847f:	mov    rax,QWORD PTR [rax+0x20]
 1008483:	lea    rcx,[rsp+0x20]
 1008488:	mov    QWORD PTR [rsp+0x40],rax
 100848d:	call   0x1004bf0
 1008492:	int3   
 1008493:	add    rsp,0x70
 1008497:	pop    rbx
 1008498:	ret    
 1008499:	int3   
 100849a:	int3   
 100849b:	int3   
 100849c:	int3   
 100849d:	int3   
 100849e:	int3   
 100849f:	int3   
 10084a0:	mov    QWORD PTR [rsp+0x8],rcx
 10084a5:	push   rdi
 10084a6:	sub    rsp,0x80
 10084ad:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10084b6:	mov    QWORD PTR [rsp+0x98],rbx
 10084be:	mov    rbx,rcx
 10084c1:	xor    edi,edi
 10084c3:	mov    QWORD PTR [rcx+0x28],rdi
 10084c7:	mov    QWORD PTR [rcx+0x30],rdi
 10084cb:	add    rcx,0x38
 10084cf:	mov    QWORD PTR [rcx],rdi
 10084d2:	call   0x10083f0
 10084d7:	nop
 10084d8:	lea    rcx,[rbx+0x40]
 10084dc:	mov    QWORD PTR [rcx],rdi
 10084df:	call   0x10083f0
 10084e4:	nop
 10084e5:	lea    edx,[rdi+0x1]
 10084e8:	mov    rcx,rbx
 10084eb:	call   QWORD PTR [rip+0xffffffffffff8bcf]        # 0x10010c0
 10084f1:	test   eax,eax
 10084f3:	jne    0x100855f
 10084f5:	call   QWORD PTR [rip+0xffffffffffff8e1d]        # 0x1001318
 10084fb:	test   eax,eax
 10084fd:	jle    0x1008507
 10084ff:	movzx  eax,ax
 1008502:	or     eax,0x80070000
 1008507:	mov    r9d,eax
 100850a:	mov    r8d,0x14a
 1008510:	lea    rdx,[rip+0xffffffffffffa639]        # 0x1002b50
 1008517:	lea    rcx,[rsp+0x50]
 100851c:	call   0x10036dc
 1008521:	mov    rcx,QWORD PTR [rax]
 1008524:	mov    QWORD PTR [rsp+0x28],rcx
 1008529:	mov    rcx,QWORD PTR [rax+0x8]
 100852d:	mov    QWORD PTR [rsp+0x30],rcx
 1008532:	mov    rcx,QWORD PTR [rax+0x10]
 1008536:	mov    QWORD PTR [rsp+0x38],rcx
 100853b:	mov    rcx,QWORD PTR [rax+0x18]
 100853f:	mov    QWORD PTR [rsp+0x40],rcx
 1008544:	mov    rax,QWORD PTR [rax+0x20]
 1008548:	mov    QWORD PTR [rsp+0x48],rax
 100854d:	lea    rdx,[rip+0x8d9c]        # 0x10112f0
 1008554:	lea    rcx,[rsp+0x28]
 1008559:	call   0x1004bf0
 100855e:	nop
 100855f:	mov    rax,rbx
 1008562:	mov    rbx,QWORD PTR [rsp+0x98]
 100856a:	add    rsp,0x80
 1008571:	pop    rdi
 1008572:	ret    
 1008573:	int3   
 1008574:	int3   
 1008575:	int3   
 1008576:	int3   
 1008577:	int3   
 1008578:	int3   
 1008579:	int3   
 100857a:	int3   
 100857b:	int3   
 100857c:	int3   
 100857d:	int3   
 100857e:	int3   
 100857f:	int3   
 1008580:	mov    QWORD PTR [rsp+0x8],rcx
 1008585:	push   rbx
 1008586:	sub    rsp,0x30
 100858a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1008593:	mov    rbx,rcx
 1008596:	mov    rcx,QWORD PTR [rcx+0x40]
 100859a:	call   0x10049c8
 100859f:	mov    rcx,QWORD PTR [rbx+0x38]
 10085a3:	call   0x10049c8
 10085a8:	lea    rcx,[rbx+0x30]
 10085ac:	call   0x100d1a0
 10085b1:	nop
 10085b2:	lea    rcx,[rbx+0x28]
 10085b6:	add    rsp,0x30
 10085ba:	pop    rbx
 10085bb:	jmp    0x100d1a0
 10085c0:	int3   
 10085c1:	int3   
 10085c2:	int3   
 10085c3:	int3   
 10085c4:	int3   
 10085c5:	int3   
 10085c6:	int3   
 10085c7:	int3   
 10085c8:	int3   
 10085c9:	int3   
 10085ca:	int3   
 10085cb:	int3   
 10085cc:	int3   
 10085cd:	int3   
 10085ce:	int3   
 10085cf:	int3   
 10085d0:	mov    QWORD PTR [rsp+0x8],rcx
 10085d5:	push   rbx
 10085d6:	push   rsi
 10085d7:	push   rdi
 10085d8:	push   r14
 10085da:	sub    rsp,0x48
 10085de:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 10085e7:	mov    rbx,rcx
 10085ea:	call   0x10084a0
 10085ef:	nop
 10085f0:	mov    QWORD PTR [rbx+0x48],0x0
 10085f8:	mov    QWORD PTR [rbx+0x50],0x0
 1008600:	lea    rcx,[rbx+0x50]
 1008604:	call   0x10083f0
 1008609:	nop
 100860a:	lea    rcx,[rbx+0x58]
 100860e:	call   0x100d3e0
 1008613:	nop
 1008614:	lea    rcx,[rbx+0x60]
 1008618:	call   0x100d330
 100861d:	nop
 100861e:	mov    rcx,rbx
 1008621:	call   0x100dc70
 1008626:	call   0x100df60
 100862b:	test   eax,eax
 100862d:	jne    0x1008688
 100862f:	mov    rdx,QWORD PTR [rbx+0x28]
 1008633:	lea    rcx,[rbx+0x48]
 1008637:	call   0x100d1c0
 100863c:	mov    r11,QWORD PTR [rbx+0x48]
 1008640:	mov    BYTE PTR [rsp+0x78],0x0
 1008645:	mov    DWORD PTR [rsp+0x80],0x10000000
 1008650:	mov    QWORD PTR [rsp+0x88],r11
 1008658:	lea    rax,[rsp+0x78]
 100865d:	mov    QWORD PTR [rsp+0x28],rax
 1008662:	lea    rax,[rsp+0x80]
 100866a:	mov    QWORD PTR [rsp+0x20],rax
 100866f:	lea    r9,[rsp+0x88]
 1008677:	mov    edx,0x1
 100867c:	mov    r8d,edx
 100867f:	lea    rcx,[rbx+0x50]
 1008683:	call   0x100d470
 1008688:	mov    rax,QWORD PTR [rbx+0x60]
 100868c:	mov    BYTE PTR [rsp+0x78],0x0
 1008691:	mov    DWORD PTR [rsp+0x80],0x10000000
 100869c:	mov    QWORD PTR [rsp+0x88],rax
 10086a4:	lea    rax,[rsp+0x78]
 10086a9:	mov    QWORD PTR [rsp+0x28],rax
 10086ae:	lea    rax,[rsp+0x80]
 10086b6:	mov    QWORD PTR [rsp+0x20],rax
 10086bb:	lea    r9,[rsp+0x88]
 10086c3:	mov    edx,0x1
 10086c8:	mov    r8d,edx
 10086cb:	lea    rcx,[rbx+0x50]
 10086cf:	call   0x100d470
 10086d4:	xor    r9d,r9d
 10086d7:	mov    r8,QWORD PTR [rbx+0x50]
 10086db:	lea    edx,[r9+0x1]
 10086df:	mov    rcx,rbx
 10086e2:	call   0x100d6f0
 10086e7:	mov    rcx,rbx
 10086ea:	call   QWORD PTR [rip+0xffffffffffff8930]        # 0x1001020
 10086f0:	mov    DWORD PTR [rbx+0x68],eax
 10086f3:	mov    QWORD PTR [rbx+0x70],rbx
 10086f7:	mov    DWORD PTR [rbx+0x78],0x0
 10086fe:	mov    rax,rbx
 1008701:	add    rsp,0x48
 1008705:	pop    r14
 1008707:	pop    rdi
 1008708:	pop    rsi
 1008709:	pop    rbx
 100870a:	ret    
 100870b:	int3   
 100870c:	int3   
 100870d:	int3   
 100870e:	int3   
 100870f:	int3   
 1008710:	int3   
 1008711:	int3   
 1008712:	int3   
 1008713:	int3   
 1008714:	int3   
 1008715:	int3   
 1008716:	int3   
 1008717:	int3   
 1008718:	int3   
 1008719:	int3   
 100871a:	int3   
 100871b:	int3   
 100871c:	int3   
 100871d:	int3   
 100871e:	int3   
 100871f:	int3   
 1008720:	mov    QWORD PTR [rsp+0x8],rcx
 1008725:	push   rbx
 1008726:	sub    rsp,0x30
 100872a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1008733:	mov    rbx,rcx
 1008736:	add    rcx,0x60
 100873a:	call   0x100d1a0
 100873f:	nop
 1008740:	lea    rcx,[rbx+0x58]
 1008744:	call   0x100d1a0
 1008749:	nop
 100874a:	mov    rcx,QWORD PTR [rbx+0x50]
 100874e:	call   0x10049c8
 1008753:	nop
 1008754:	lea    rcx,[rbx+0x48]
 1008758:	call   0x100d1a0
 100875d:	nop
 100875e:	mov    rcx,QWORD PTR [rbx+0x40]
 1008762:	call   0x10049c8
 1008767:	mov    rcx,QWORD PTR [rbx+0x38]
 100876b:	call   0x10049c8
 1008770:	lea    rcx,[rbx+0x30]
 1008774:	call   0x100d1a0
 1008779:	nop
 100877a:	lea    rcx,[rbx+0x28]
 100877e:	add    rsp,0x30
 1008782:	pop    rbx
 1008783:	jmp    0x100d1a0
 1008788:	int3   
 1008789:	int3   
 100878a:	int3   
 100878b:	int3   
 100878c:	int3   
 100878d:	int3   
 100878e:	int3   
 100878f:	int3   
 1008790:	sub    rsp,0x28
 1008794:	cmp    QWORD PTR [rcx],0x0
 1008798:	je     0x10087a0
 100879a:	call   QWORD PTR [rip+0xffffffffffff8d30]        # 0x10014d0
 10087a0:	add    rsp,0x28
 10087a4:	ret    
 10087a5:	int3   
 10087a6:	int3   
 10087a7:	int3   
 10087a8:	int3   
 10087a9:	int3   
 10087aa:	int3   
 10087ab:	int3   
 10087ac:	int3   
 10087ad:	int3   
 10087ae:	int3   
 10087af:	int3   
 10087b0:	mov    QWORD PTR [rcx],0x0
 10087b7:	mov    rax,rcx
 10087ba:	ret    
 10087bb:	int3   
 10087bc:	int3   
 10087bd:	int3   
 10087be:	int3   
 10087bf:	int3   
 10087c0:	int3   
 10087c1:	int3   
 10087c2:	int3   
 10087c3:	int3   
 10087c4:	int3   
 10087c5:	int3   
 10087c6:	int3   
 10087c7:	int3   
 10087c8:	int3   
 10087c9:	int3   
 10087ca:	int3   
 10087cb:	int3   
 10087cc:	int3   
 10087cd:	int3   
 10087ce:	int3   
 10087cf:	int3   
 10087d0:	mov    rax,QWORD PTR [rcx]
 10087d3:	ret    
 10087d4:	int3   
 10087d5:	int3   
 10087d6:	int3   
 10087d7:	int3   
 10087d8:	int3   
 10087d9:	int3   
 10087da:	int3   
 10087db:	int3   
 10087dc:	int3   
 10087dd:	int3   
 10087de:	int3   
 10087df:	int3   
 10087e0:	sub    rsp,0x28
 10087e4:	mov    rcx,QWORD PTR [rcx]
 10087e7:	test   rcx,rcx
 10087ea:	je     0x10087f2
 10087ec:	call   QWORD PTR [rip+0xffffffffffff89f6]        # 0x10011e8
 10087f2:	add    rsp,0x28
 10087f6:	ret    
 10087f7:	int3   
 10087f8:	int3   
 10087f9:	int3   
 10087fa:	int3   
 10087fb:	int3   
 10087fc:	int3   
 10087fd:	int3   
 10087fe:	int3   
 10087ff:	int3   
 1008800:	xor    eax,eax
 1008802:	cmp    QWORD PTR [rcx],rax
 1008805:	setne  al
 1008808:	ret    
 1008809:	int3   
 100880a:	int3   
 100880b:	int3   
 100880c:	int3   
 100880d:	int3   
 100880e:	int3   
 100880f:	int3   
 1008810:	rex push rbx
 1008812:	sub    rsp,0x20
 1008816:	mov    rbx,rcx
 1008819:	mov    rcx,QWORD PTR [rcx]
 100881c:	test   rcx,rcx
 100881f:	je     0x100882e
 1008821:	call   QWORD PTR [rip+0xffffffffffff8971]        # 0x1001198
 1008827:	mov    QWORD PTR [rbx],0x0
 100882e:	add    rsp,0x20
 1008832:	pop    rbx
 1008833:	ret    
 1008834:	int3   
 1008835:	int3   
 1008836:	int3   
 1008837:	int3   
 1008838:	int3   
 1008839:	int3   
 100883a:	int3   
 100883b:	int3   
 100883c:	int3   
 100883d:	int3   
 100883e:	int3   
 100883f:	int3   
 1008840:	rex push rbx
 1008842:	sub    rsp,0x20
 1008846:	mov    rbx,rcx
 1008849:	mov    rcx,QWORD PTR [rcx]
 100884c:	test   rcx,rcx
 100884f:	je     0x100885e
 1008851:	call   QWORD PTR [rip+0xffffffffffff8941]        # 0x1001198
 1008857:	mov    QWORD PTR [rbx],0x0
 100885e:	add    rsp,0x20
 1008862:	pop    rbx
 1008863:	ret    
 1008864:	int3   
 1008865:	int3   
 1008866:	int3   
 1008867:	int3   
 1008868:	int3   
 1008869:	int3   
 100886a:	int3   
 100886b:	int3   
 100886c:	int3   
 100886d:	int3   
 100886e:	int3   
 100886f:	int3   
 1008870:	mov    rax,QWORD PTR [rdx]
 1008873:	mov    QWORD PTR [rcx],rax
 1008876:	mov    rax,rcx
 1008879:	ret    
 100887a:	int3   
 100887b:	int3   
 100887c:	int3   
 100887d:	int3   
 100887e:	int3   
 100887f:	int3   
 1008880:	sub    rsp,0x28
 1008884:	mov    rax,QWORD PTR [rcx]
 1008887:	mov    rcx,QWORD PTR [rax]
 100888a:	test   rcx,rcx
 100888d:	je     0x1008895
 100888f:	call   QWORD PTR [rip+0xffffffffffff8953]        # 0x10011e8
 1008895:	add    rsp,0x28
 1008899:	ret    
 100889a:	int3   
 100889b:	int3   
 100889c:	int3   
 100889d:	int3   
 100889e:	int3   
 100889f:	int3   
 10088a0:	mov    QWORD PTR [rsp+0x8],rcx
 10088a5:	push   rbx
 10088a6:	sub    rsp,0x30
 10088aa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10088b3:	mov    rbx,rcx
 10088b6:	xor    eax,eax
 10088b8:	mov    DWORD PTR [rcx],eax
 10088ba:	add    rcx,0x8
 10088be:	mov    QWORD PTR [rcx],rax
 10088c1:	mov    QWORD PTR [rbx+0x10],rax
 10088c5:	mov    QWORD PTR [rbx+0x18],rax
 10088c9:	mov    QWORD PTR [rbx+0x20],rax
 10088cd:	mov    DWORD PTR [rbx+0x28],eax
 10088d0:	xor    edx,edx
 10088d2:	call   0x100e2c0
 10088d7:	nop
 10088d8:	mov    rax,rbx
 10088db:	add    rsp,0x30
 10088df:	pop    rbx
 10088e0:	ret    
 10088e1:	int3   
 10088e2:	int3   
 10088e3:	int3   
 10088e4:	int3   
 10088e5:	int3   
 10088e6:	int3   
 10088e7:	int3   
 10088e8:	int3   
 10088e9:	int3   
 10088ea:	int3   
 10088eb:	int3   
 10088ec:	int3   
 10088ed:	int3   
 10088ee:	int3   
 10088ef:	int3   
 10088f0:	rex push rbx
 10088f2:	sub    rsp,0x20
 10088f6:	mov    rbx,rcx
 10088f9:	call   0x100aa00
 10088fe:	mov    rcx,QWORD PTR [rbx+0x8]
 1008902:	test   rcx,rcx
 1008905:	je     0x1008915
 1008907:	call   QWORD PTR [rip+0xffffffffffff888b]        # 0x1001198
 100890d:	mov    QWORD PTR [rbx+0x8],0x0
 1008915:	add    rsp,0x20
 1008919:	pop    rbx
 100891a:	ret    
 100891b:	int3   
 100891c:	int3   
 100891d:	int3   
 100891e:	int3   
 100891f:	int3   
 1008920:	int3   
 1008921:	int3   
 1008922:	int3   
 1008923:	int3   
 1008924:	int3   
 1008925:	int3   
 1008926:	int3   
 1008927:	int3   
 1008928:	int3   
 1008929:	int3   
 100892a:	int3   
 100892b:	int3   
 100892c:	int3   
 100892d:	int3   
 100892e:	int3   
 100892f:	int3   
 1008930:	mov    rax,rsp
 1008933:	mov    QWORD PTR [rax+0x8],rcx
 1008937:	push   r12
 1008939:	push   r14
 100893b:	push   r15
 100893d:	sub    rsp,0xb0
 1008944:	mov    QWORD PTR [rax-0x20],0xfffffffffffffffe
 100894c:	mov    QWORD PTR [rax+0x10],rbx
 1008950:	mov    QWORD PTR [rax+0x18],rsi
 1008954:	mov    QWORD PTR [rax+0x20],rdi
 1008958:	mov    r12,r9
 100895b:	mov    r15,rdx
 100895e:	mov    r14,rcx
 1008961:	cmp    DWORD PTR [rcx],0x0
 1008964:	jne    0x1008b4d
 100896a:	lea    rbx,[rcx+0x8]
 100896e:	mov    QWORD PTR [rax-0x28],rbx
 1008972:	or     edx,0xffffffff
 1008975:	mov    rcx,QWORD PTR [rbx]
 1008978:	call   QWORD PTR [rip+0xffffffffffff8822]        # 0x10011a0
 100897e:	test   eax,eax
 1008980:	je     0x10089a0
 1008982:	lea    rax,[rip+0xffffffffffffa21f]        # 0x1002ba8
 1008989:	mov    QWORD PTR [rsp+0x40],rax
 100898e:	lea    rdx,[rip+0x89b3]        # 0x1011348
 1008995:	lea    rcx,[rsp+0x40]
 100899a:	call   0x1004bf0
 100899f:	nop
 10089a0:	xor    esi,esi
 10089a2:	mov    QWORD PTR [rsp+0x48],rsi
 10089a7:	mov    QWORD PTR [rsp+0x50],rsi
 10089ac:	mov    DWORD PTR [rsp+0x58],esi
 10089b0:	mov    r8,QWORD PTR [rsp+0xf8]
 10089b8:	test   r8,r8
 10089bb:	jne    0x10089cd
 10089bd:	lea    rcx,[rsp+0x48]
 10089c2:	call   0x100a150
 10089c7:	or     rdi,0xffffffffffffffff
 10089cb:	jmp    0x10089e8
 10089cd:	or     rdi,0xffffffffffffffff
 10089d1:	mov    rdx,rdi
 10089d4:	inc    rdx
 10089d7:	cmp    BYTE PTR [r8+rdx*1],0x0
 10089dc:	jne    0x10089d4
 10089de:	lea    rcx,[rsp+0x48]
 10089e3:	call   0x1007f40
 10089e8:	cmp    QWORD PTR [r14+0x18],0x0
 10089ed:	jne    0x1008a8c
 10089f3:	mov    QWORD PTR [rsp+0x20],rsi
 10089f8:	mov    QWORD PTR [rsp+0x28],rsi
 10089fd:	mov    DWORD PTR [rsp+0x30],esi
 1008a01:	test   r15,r15
 1008a04:	jne    0x1008a12
 1008a06:	lea    rcx,[rsp+0x20]
 1008a0b:	call   0x1009fd0
 1008a10:	jmp    0x1008a2c
 1008a12:	mov    rdx,rdi
 1008a15:	inc    rdx
 1008a18:	cmp    BYTE PTR [r15+rdx*1],0x0
 1008a1d:	jne    0x1008a15
 1008a1f:	mov    r8,r15
 1008a22:	lea    rcx,[rsp+0x20]
 1008a27:	call   0x1007f40
 1008a2c:	mov    r15d,DWORD PTR [rsp+0xf0]
 1008a34:	mov    edx,r15d
 1008a37:	mov    rcx,QWORD PTR [rsp+0x20]
 1008a3c:	call   0x100a2c0
 1008a41:	mov    ecx,0x78
 1008a46:	call   0x1004a94
 1008a4b:	mov    QWORD PTR [rsp+0x38],rax
 1008a50:	test   rax,rax
 1008a53:	je     0x1008a71
 1008a55:	mov    r9d,DWORD PTR [rsp+0x108]
 1008a5d:	lea    r8,[rsp+0x48]
 1008a62:	lea    rdx,[rsp+0x20]
 1008a67:	mov    rcx,rax
 1008a6a:	call   0x100ad00
 1008a6f:	jmp    0x1008a74
 1008a71:	mov    rax,rsi
 1008a74:	mov    QWORD PTR [r14+0x18],rax
 1008a78:	mov    rax,QWORD PTR [rax+0x60]
 1008a7c:	mov    QWORD PTR [r14+0x10],rax
 1008a80:	mov    rcx,QWORD PTR [rsp+0x20]
 1008a85:	call   0x10049c8
 1008a8a:	jmp    0x1008a94
 1008a8c:	mov    r15d,DWORD PTR [rsp+0xf0]
 1008a94:	cmp    QWORD PTR [r14+0x20],0x0
 1008a99:	jne    0x1008b34
 1008a9f:	mov    QWORD PTR [rsp+0x20],rsi
 1008aa4:	mov    QWORD PTR [rsp+0x28],rsi
 1008aa9:	mov    DWORD PTR [rsp+0x30],esi
 1008aad:	test   r12,r12
 1008ab0:	jne    0x1008ac0
 1008ab2:	lea    rcx,[rsp+0x20]
 1008ab7:	call   0x1009fd0
 1008abc:	jmp    0x1008ada
 1008abe:	xchg   ax,ax
 1008ac0:	inc    rdi
 1008ac3:	cmp    BYTE PTR [r12+rdi*1],0x0
 1008ac8:	jne    0x1008ac0
 1008aca:	mov    rdx,rdi
 1008acd:	mov    r8,r12
 1008ad0:	lea    rcx,[rsp+0x20]
 1008ad5:	call   0x1007f40
 1008ada:	mov    edx,r15d
 1008add:	mov    rdi,QWORD PTR [rsp+0x20]
 1008ae2:	mov    rcx,rdi
 1008ae5:	call   0x100a2c0
 1008aea:	mov    ecx,0xd8
 1008aef:	call   0x1004a94
 1008af4:	mov    QWORD PTR [rsp+0x38],rax
 1008af9:	test   rax,rax
 1008afc:	je     0x1008b20
 1008afe:	mov    r9d,DWORD PTR [rsp+0x100]
 1008b06:	lea    r8,[rsp+0x48]
 1008b0b:	lea    rdx,[rsp+0x20]
 1008b10:	mov    rcx,rax
 1008b13:	call   0x100ba20
 1008b18:	mov    rsi,rax
 1008b1b:	mov    rdi,QWORD PTR [rsp+0x20]
 1008b20:	mov    QWORD PTR [r14+0x20],rsi
 1008b24:	mov    DWORD PTR [r14],0x1
 1008b2b:	mov    rcx,rdi
 1008b2e:	call   0x10049c8
 1008b33:	nop
 1008b34:	mov    rcx,QWORD PTR [rsp+0x48]
 1008b39:	call   0x10049c8
 1008b3e:	nop
 1008b3f:	mov    rcx,QWORD PTR [rbx]
 1008b42:	test   rcx,rcx
 1008b45:	je     0x1008b4d
 1008b47:	call   QWORD PTR [rip+0xffffffffffff869b]        # 0x10011e8
 1008b4d:	lea    r11,[rsp+0xb0]
 1008b55:	mov    rbx,QWORD PTR [r11+0x28]
 1008b59:	mov    rsi,QWORD PTR [r11+0x30]
 1008b5d:	mov    rdi,QWORD PTR [r11+0x38]
 1008b61:	mov    rsp,r11
 1008b64:	pop    r15
 1008b66:	pop    r14
 1008b68:	pop    r12
 1008b6a:	ret    
 1008b6b:	int3   
 1008b6c:	int3   
 1008b6d:	int3   
 1008b6e:	int3   
 1008b6f:	int3   
 1008b70:	int3   
 1008b71:	int3   
 1008b72:	int3   
 1008b73:	int3   
 1008b74:	int3   
 1008b75:	int3   
 1008b76:	int3   
 1008b77:	int3   
 1008b78:	int3   
 1008b79:	int3   
 1008b7a:	int3   
 1008b7b:	int3   
 1008b7c:	int3   
 1008b7d:	int3   
 1008b7e:	int3   
 1008b7f:	int3   
 1008b80:	rex push rbx
 1008b82:	sub    rsp,0x20
 1008b86:	cmp    DWORD PTR [rcx],0x0
 1008b89:	mov    rbx,rcx
 1008b8c:	je     0x1008bfd
 1008b8e:	mov    rcx,QWORD PTR [rcx+0x8]
 1008b92:	or     edx,0xffffffff
 1008b95:	call   QWORD PTR [rip+0xffffffffffff8605]        # 0x10011a0
 1008b9b:	test   eax,eax
 1008b9d:	je     0x1008bbd
 1008b9f:	lea    rax,[rip+0xffffffffffffa002]        # 0x1002ba8
 1008ba6:	lea    rdx,[rip+0x879b]        # 0x1011348
 1008bad:	lea    rcx,[rsp+0x30]
 1008bb2:	mov    QWORD PTR [rsp+0x30],rax
 1008bb7:	call   0x1004bf0
 1008bbc:	int3   
 1008bbd:	mov    QWORD PTR [rsp+0x38],rdi
 1008bc2:	mov    rdi,QWORD PTR [rbx+0x20]
 1008bc6:	mov    DWORD PTR [rbx],0x0
 1008bcc:	test   rdi,rdi
 1008bcf:	je     0x1008be9
 1008bd1:	mov    rcx,rdi
 1008bd4:	call   0x100c2c0
 1008bd9:	mov    rcx,rdi
 1008bdc:	call   0x10049c8
 1008be1:	mov    QWORD PTR [rbx+0x20],0x0
 1008be9:	mov    rcx,QWORD PTR [rbx+0x8]
 1008bed:	mov    rdi,QWORD PTR [rsp+0x38]
 1008bf2:	test   rcx,rcx
 1008bf5:	je     0x1008bfd
 1008bf7:	call   QWORD PTR [rip+0xffffffffffff85eb]        # 0x10011e8
 1008bfd:	add    rsp,0x20
 1008c01:	pop    rbx
 1008c02:	ret    
 1008c03:	int3   
 1008c04:	int3   
 1008c05:	int3   
 1008c06:	int3   
 1008c07:	int3   
 1008c08:	int3   
 1008c09:	int3   
 1008c0a:	int3   
 1008c0b:	int3   
 1008c0c:	int3   
 1008c0d:	int3   
 1008c0e:	int3   
 1008c0f:	int3   
 1008c10:	rex push rbx
 1008c12:	sub    rsp,0x20
 1008c16:	cmp    QWORD PTR [rcx+0x8],0x0
 1008c1b:	mov    rbx,rcx
 1008c1e:	je     0x1008c66
 1008c20:	mov    rcx,QWORD PTR [rcx+0x8]
 1008c24:	or     edx,0xffffffff
 1008c27:	call   QWORD PTR [rip+0xffffffffffff8573]        # 0x10011a0
 1008c2d:	test   eax,eax
 1008c2f:	je     0x1008c4f
 1008c31:	lea    rax,[rip+0xffffffffffff9f70]        # 0x1002ba8
 1008c38:	lea    rdx,[rip+0x8709]        # 0x1011348
 1008c3f:	lea    rcx,[rsp+0x30]
 1008c44:	mov    QWORD PTR [rsp+0x30],rax
 1008c49:	call   0x1004bf0
 1008c4e:	int3   
 1008c4f:	mov    rcx,rbx
 1008c52:	call   0x100aa00
 1008c57:	mov    rcx,QWORD PTR [rbx+0x8]
 1008c5b:	test   rcx,rcx
 1008c5e:	je     0x1008c66
 1008c60:	call   QWORD PTR [rip+0xffffffffffff8582]        # 0x10011e8
 1008c66:	add    rsp,0x20
 1008c6a:	pop    rbx
 1008c6b:	ret    
 1008c6c:	int3   
 1008c6d:	int3   
 1008c6e:	int3   
 1008c6f:	int3   
 1008c70:	int3   
 1008c71:	int3   
 1008c72:	int3   
 1008c73:	int3   
 1008c74:	int3   
 1008c75:	int3   
 1008c76:	int3   
 1008c77:	int3   
 1008c78:	int3   
 1008c79:	int3   
 1008c7a:	int3   
 1008c7b:	int3   
 1008c7c:	int3   
 1008c7d:	int3   
 1008c7e:	int3   
 1008c7f:	int3   
 1008c80:	mov    r11,rsp
 1008c83:	sub    rsp,0x48
 1008c87:	lea    rax,[r11+0x40]
 1008c8b:	mov    QWORD PTR [r11-0x10],rax
 1008c8f:	mov    rax,QWORD PTR [r11+0x38]
 1008c93:	mov    QWORD PTR [r11-0x18],rax
 1008c97:	mov    eax,DWORD PTR [rsp+0x78]
 1008c9b:	mov    DWORD PTR [rsp+0x28],eax
 1008c9f:	mov    eax,DWORD PTR [rsp+0x70]
 1008ca3:	mov    DWORD PTR [rsp+0x20],eax
 1008ca7:	call   0x1008d00
 1008cac:	add    rsp,0x48
 1008cb0:	ret    
 1008cb1:	int3   
 1008cb2:	int3   
 1008cb3:	int3   
 1008cb4:	int3   
 1008cb5:	int3   
 1008cb6:	int3   
 1008cb7:	int3   
 1008cb8:	int3   
 1008cb9:	int3   
 1008cba:	int3   
 1008cbb:	int3   
 1008cbc:	int3   
 1008cbd:	int3   
 1008cbe:	int3   
 1008cbf:	int3   
 1008cc0:	mov    r11,rsp
 1008cc3:	sub    rsp,0x48
 1008cc7:	lea    rax,[r11+0x40]
 1008ccb:	mov    QWORD PTR [r11-0x10],rax
 1008ccf:	mov    rax,QWORD PTR [r11+0x38]
 1008cd3:	mov    QWORD PTR [r11-0x18],rax
 1008cd7:	mov    eax,DWORD PTR [rsp+0x78]
 1008cdb:	mov    DWORD PTR [rsp+0x28],eax
 1008cdf:	mov    eax,DWORD PTR [rsp+0x70]
 1008ce3:	mov    DWORD PTR [rsp+0x20],eax
 1008ce7:	call   0x1009290
 1008cec:	add    rsp,0x48
 1008cf0:	ret    
 1008cf1:	int3   
 1008cf2:	int3   
 1008cf3:	int3   
 1008cf4:	int3   
 1008cf5:	int3   
 1008cf6:	int3   
 1008cf7:	int3   
 1008cf8:	int3   
 1008cf9:	int3   
 1008cfa:	int3   
 1008cfb:	int3   
 1008cfc:	int3   
 1008cfd:	int3   
 1008cfe:	int3   
 1008cff:	int3   
 1008d00:	rex push rbp
 1008d02:	push   rbx
 1008d03:	push   rsi
 1008d04:	push   rdi
 1008d05:	push   r12
 1008d07:	push   r13
 1008d09:	push   r14
 1008d0b:	push   r15
 1008d0d:	lea    rbp,[rsp-0x5c8]
 1008d15:	sub    rsp,0x6c8
 1008d1c:	mov    QWORD PTR [rbp-0x80],0xfffffffffffffffe
 1008d24:	mov    rax,QWORD PTR [rip+0xa425]        # 0x1013150
 1008d2b:	xor    rax,rsp
 1008d2e:	mov    QWORD PTR [rbp+0x5b0],rax
 1008d35:	mov    esi,r9d
 1008d38:	mov    DWORD PTR [rsp+0x60],r9d
 1008d3d:	mov    rdi,r8
 1008d40:	mov    QWORD PTR [rsp+0x78],r8
 1008d45:	mov    r12d,edx
 1008d48:	mov    r13,rcx
 1008d4b:	mov    ebx,DWORD PTR [rbp+0x638]
 1008d51:	mov    DWORD PTR [rsp+0x64],ebx
 1008d55:	mov    r14,QWORD PTR [rbp+0x640]
 1008d5c:	mov    QWORD PTR [rsp+0x70],r14
 1008d61:	mov    rax,QWORD PTR [rbp+0x648]
 1008d68:	mov    QWORD PTR [rsp+0x68],rax
 1008d6d:	lea    rcx,[rbp-0x78]
 1008d71:	call   QWORD PTR [rip+0xffffffffffff8489]        # 0x1001200
 1008d77:	cmp    QWORD PTR [r13+0x18],0x0
 1008d7c:	je     0x100925d
 1008d82:	lea    r8,[rip+0xffffffffffff9f63]        # 0x1002cec
 1008d89:	mov    edx,0x605
 1008d8e:	lea    rcx,[rbp-0x60]
 1008d92:	call   QWORD PTR [rip+0xffffffffffff8660]        # 0x10013f8
 1008d98:	movsxd r15,eax
 1008d9b:	mov    r10,QWORD PTR [r13+0x18]
 1008d9f:	mov    rcx,QWORD PTR [r10+0x70]
 1008da3:	cmp    DWORD PTR [rcx+0x90],0x0
 1008daa:	je     0x1008de3
 1008dac:	mov    r10,QWORD PTR [r10+0x40]
 1008db0:	mov    ecx,0x5f5
 1008db5:	sub    ecx,r15d
 1008db8:	movsxd r8,ecx
 1008dbb:	mov    edx,0x605
 1008dc0:	sub    rdx,r15
 1008dc3:	lea    rcx,[rbp-0x60]
 1008dc7:	add    rcx,r15
 1008dca:	mov    QWORD PTR [rsp+0x20],r10
 1008dcf:	lea    r9,[rip+0xffffffffffff9f22]        # 0x1002cf8
 1008dd6:	call   QWORD PTR [rip+0xffffffffffff85ac]        # 0x1001388
 1008ddc:	test   eax,eax
 1008dde:	jle    0x1008de3
 1008de0:	add    r15d,eax
 1008de3:	mov    rax,QWORD PTR [r13+0x18]
 1008de7:	mov    rcx,QWORD PTR [rax+0x70]
 1008deb:	cmp    DWORD PTR [rcx+0xb4],0x0
 1008df2:	je     0x1008e7b
 1008df8:	movsxd rcx,r15d
 1008dfb:	movzx  r9d,WORD PTR [rbp-0x6a]
 1008e00:	movzx  r10d,WORD PTR [rbp-0x6c]
 1008e05:	movzx  r11d,WORD PTR [rbp-0x6e]
 1008e0a:	movzx  ebx,WORD PTR [rbp-0x70]
 1008e0e:	movzx  edi,WORD PTR [rbp-0x72]
 1008e12:	movzx  esi,WORD PTR [rbp-0x76]
 1008e16:	movzx  r14d,WORD PTR [rbp-0x78]
 1008e1b:	mov    eax,0x5f5
 1008e20:	sub    eax,r15d
 1008e23:	movsxd r8,eax
 1008e26:	mov    edx,0x605
 1008e2b:	sub    rdx,rcx
 1008e2e:	lea    rax,[rbp-0x60]
 1008e32:	add    rcx,rax
 1008e35:	mov    DWORD PTR [rsp+0x50],r9d
 1008e3a:	mov    DWORD PTR [rsp+0x48],r10d
 1008e3f:	mov    DWORD PTR [rsp+0x40],r11d
 1008e44:	mov    DWORD PTR [rsp+0x38],ebx
 1008e48:	mov    DWORD PTR [rsp+0x30],edi
 1008e4c:	mov    DWORD PTR [rsp+0x28],esi
 1008e50:	mov    DWORD PTR [rsp+0x20],r14d
 1008e55:	lea    r9,[rip+0xffffffffffff9eac]        # 0x1002d08
 1008e5c:	call   QWORD PTR [rip+0xffffffffffff8526]        # 0x1001388
 1008e62:	mov    ebx,DWORD PTR [rsp+0x64]
 1008e66:	mov    rdi,QWORD PTR [rsp+0x78]
 1008e6b:	mov    esi,DWORD PTR [rsp+0x60]
 1008e6f:	mov    r14,QWORD PTR [rsp+0x70]
 1008e74:	test   eax,eax
 1008e76:	jle    0x1008e7b
 1008e78:	add    r15d,eax
 1008e7b:	mov    rax,QWORD PTR [r13+0x18]
 1008e7f:	mov    rcx,QWORD PTR [rax+0x70]
 1008e83:	cmp    DWORD PTR [rcx+0xfc],0x0
 1008e8a:	je     0x1008ec7
 1008e8c:	movsxd rcx,r15d
 1008e8f:	mov    eax,0x5f5
 1008e94:	sub    eax,r15d
 1008e97:	movsxd r8,eax
 1008e9a:	mov    edx,0x605
 1008e9f:	sub    rdx,rcx
 1008ea2:	lea    r9,[rbp-0x60]
 1008ea6:	add    rcx,r9
 1008ea9:	mov    eax,DWORD PTR [rbp+0x630]
 1008eaf:	mov    DWORD PTR [rsp+0x20],eax
 1008eb3:	lea    r9,[rip+0xffffffffffff9e7e]        # 0x1002d38
 1008eba:	call   QWORD PTR [rip+0xffffffffffff84c8]        # 0x1001388
 1008ec0:	test   eax,eax
 1008ec2:	jle    0x1008ec7
 1008ec4:	add    r15d,eax
 1008ec7:	mov    rax,QWORD PTR [r13+0x18]
 1008ecb:	mov    rcx,QWORD PTR [rax+0x70]
 1008ecf:	cmp    DWORD PTR [rcx+0x120],0x0
 1008ed6:	je     0x1008f0d
 1008ed8:	movsxd rcx,r15d
 1008edb:	mov    eax,0x5f5
 1008ee0:	sub    eax,r15d
 1008ee3:	movsxd r8,eax
 1008ee6:	mov    edx,0x605
 1008eeb:	sub    rdx,rcx
 1008eee:	lea    rax,[rbp-0x60]
 1008ef2:	add    rcx,rax
 1008ef5:	mov    DWORD PTR [rsp+0x20],ebx
 1008ef9:	lea    r9,[rip+0xffffffffffff9e48]        # 0x1002d48
 1008f00:	call   QWORD PTR [rip+0xffffffffffff8482]        # 0x1001388
 1008f06:	test   eax,eax
 1008f08:	jle    0x1008f0d
 1008f0a:	add    r15d,eax
 1008f0d:	mov    rax,QWORD PTR [r13+0x18]
 1008f11:	mov    rcx,QWORD PTR [rax+0x70]
 1008f15:	cmp    DWORD PTR [rcx+0x144],0x0
 1008f1c:	je     0x1008f65
 1008f1e:	movsxd r10,r15d
 1008f21:	mov    ecx,ebx
 1008f23:	imul   rcx,rcx,0x44
 1008f27:	mov    r9,QWORD PTR [r13+0x10]
 1008f2b:	add    r9,0x4
 1008f2f:	add    r9,rcx
 1008f32:	mov    eax,0x5f5
 1008f37:	sub    eax,r15d
 1008f3a:	movsxd r8,eax
 1008f3d:	mov    edx,0x605
 1008f42:	sub    rdx,r10
 1008f45:	lea    rcx,[rbp-0x60]
 1008f49:	add    rcx,r10
 1008f4c:	mov    QWORD PTR [rsp+0x20],r9
 1008f51:	lea    r9,[rip+0xffffffffffff9e00]        # 0x1002d58
 1008f58:	call   QWORD PTR [rip+0xffffffffffff842a]        # 0x1001388
 1008f5e:	test   eax,eax
 1008f60:	jle    0x1008f65
 1008f62:	add    r15d,eax
 1008f65:	mov    rax,QWORD PTR [r13+0x18]
 1008f69:	mov    rcx,QWORD PTR [rax+0x70]
 1008f6d:	cmp    DWORD PTR [rcx+0x168],0x0
 1008f74:	je     0x1008fb1
 1008f76:	movsxd rbx,r15d
 1008f79:	call   QWORD PTR [rip+0xffffffffffff81c1]        # 0x1001140
 1008f7f:	mov    ecx,0x5f5
 1008f84:	sub    ecx,r15d
 1008f87:	movsxd r8,ecx
 1008f8a:	mov    edx,0x605
 1008f8f:	sub    rdx,rbx
 1008f92:	lea    rcx,[rbp-0x60]
 1008f96:	add    rcx,rbx
 1008f99:	mov    DWORD PTR [rsp+0x20],eax
 1008f9d:	lea    r9,[rip+0xffffffffffff9dc4]        # 0x1002d68
 1008fa4:	call   QWORD PTR [rip+0xffffffffffff83de]        # 0x1001388
 1008faa:	test   eax,eax
 1008fac:	jle    0x1008fb1
 1008fae:	add    r15d,eax
 1008fb1:	mov    rax,QWORD PTR [r13+0x18]
 1008fb5:	mov    rcx,QWORD PTR [rax+0x70]
 1008fb9:	cmp    DWORD PTR [rcx+0xd8],0x0
 1008fc0:	je     0x1008ffd
 1008fc2:	movsxd rbx,r15d
 1008fc5:	call   QWORD PTR [rip+0xffffffffffff8105]        # 0x10010d0
 1008fcb:	mov    ecx,0x5f5
 1008fd0:	sub    ecx,r15d
 1008fd3:	movsxd r8,ecx
 1008fd6:	mov    edx,0x605
 1008fdb:	sub    rdx,rbx
 1008fde:	lea    rcx,[rbp-0x60]
 1008fe2:	add    rcx,rbx
 1008fe5:	mov    DWORD PTR [rsp+0x20],eax
 1008fe9:	lea    r9,[rip+0xffffffffffff9d88]        # 0x1002d78
 1008ff0:	call   QWORD PTR [rip+0xffffffffffff8392]        # 0x1001388
 1008ff6:	test   eax,eax
 1008ff8:	jle    0x1008ffd
 1008ffa:	add    r15d,eax
 1008ffd:	cmp    r15d,0x5f5
 1009004:	jge    0x1009037
 1009006:	movsxd rcx,r15d
 1009009:	mov    eax,0x5f5
 100900e:	sub    eax,r15d
 1009011:	movsxd r8,eax
 1009014:	mov    edx,0x605
 1009019:	sub    rdx,rcx
 100901c:	lea    rax,[rbp-0x60]
 1009020:	add    rcx,rax
 1009023:	lea    r9,[rip+0xffffffffffff9d5a]        # 0x1002d84
 100902a:	call   QWORD PTR [rip+0xffffffffffff8358]        # 0x1001388
 1009030:	test   eax,eax
 1009032:	jle    0x1009037
 1009034:	add    r15d,eax
 1009037:	test   r12d,r12d
 100903a:	jne    0x100904e
 100903c:	mov    rax,QWORD PTR [r13+0x18]
 1009040:	mov    rcx,QWORD PTR [rax+0x70]
 1009044:	cmp    DWORD PTR [rcx+0x6c],r12d
 1009048:	je     0x1009124
 100904e:	test   rdi,rdi
 1009051:	je     0x100908d
 1009053:	movsxd rcx,r15d
 1009056:	mov    eax,0x5f5
 100905b:	sub    eax,r15d
 100905e:	movsxd r8,eax
 1009061:	mov    edx,0x605
 1009066:	sub    rdx,rcx
 1009069:	lea    rax,[rbp-0x60]
 100906d:	add    rcx,rax
 1009070:	mov    DWORD PTR [rsp+0x28],esi
 1009074:	mov    QWORD PTR [rsp+0x20],rdi
 1009079:	lea    r9,[rip+0xffffffffffff9d10]        # 0x1002d90
 1009080:	call   QWORD PTR [rip+0xffffffffffff8302]        # 0x1001388
 1009086:	test   eax,eax
 1009088:	jle    0x100908d
 100908a:	add    r15d,eax
 100908d:	test   r12d,r12d
 1009090:	je     0x1009124
 1009096:	movsxd rcx,r15d
 1009099:	mov    eax,0x5f5
 100909e:	sub    eax,r15d
 10090a1:	movsxd r8,eax
 10090a4:	mov    edx,0x605
 10090a9:	sub    rdx,rcx
 10090ac:	lea    rax,[rbp-0x60]
 10090b0:	add    rcx,rax
 10090b3:	mov    DWORD PTR [rsp+0x20],r12d
 10090b8:	lea    r9,[rip+0xffffffffffff9cf1]        # 0x1002db0
 10090bf:	call   QWORD PTR [rip+0xffffffffffff82c3]        # 0x1001388
 10090c5:	test   eax,eax
 10090c7:	jle    0x10090cc
 10090c9:	add    r15d,eax
 10090cc:	cmp    r15d,0x5f5
 10090d3:	jge    0x10090f3
 10090d5:	movsxd rax,r15d
 10090d8:	mov    r8d,0x5f5
 10090de:	sub    r8d,r15d
 10090e1:	lea    rdx,[rbp-0x60]
 10090e5:	add    rdx,rax
 10090e8:	mov    ecx,r12d
 10090eb:	call   0x100a4b0
 10090f0:	add    r15d,eax
 10090f3:	movsxd rcx,r15d
 10090f6:	mov    eax,0x5f5
 10090fb:	sub    eax,r15d
 10090fe:	movsxd r8,eax
 1009101:	mov    edx,0x605
 1009106:	sub    rdx,rcx
 1009109:	lea    rax,[rbp-0x60]
 100910d:	add    rcx,rax
 1009110:	lea    r9,[rip+0xffffffffffff9cb1]        # 0x1002dc8
 1009117:	call   QWORD PTR [rip+0xffffffffffff826b]        # 0x1001388
 100911d:	test   eax,eax
 100911f:	jle    0x1009124
 1009121:	add    r15d,eax
 1009124:	movsxd rcx,r15d
 1009127:	mov    eax,0x5f5
 100912c:	sub    eax,r15d
 100912f:	movsxd r8,eax
 1009132:	mov    edx,0x605
 1009137:	sub    rdx,rcx
 100913a:	lea    rax,[rbp-0x60]
 100913e:	add    rcx,rax
 1009141:	lea    r9,[rip+0xffffffffffff9c90]        # 0x1002dd8
 1009148:	call   QWORD PTR [rip+0xffffffffffff823a]        # 0x1001388
 100914e:	test   eax,eax
 1009150:	jle    0x1009155
 1009152:	add    r15d,eax
 1009155:	cmp    r15d,0x5f5
 100915c:	jge    0x100919c
 100915e:	movsxd rcx,r15d
 1009161:	mov    eax,0x5f5
 1009166:	sub    eax,r15d
 1009169:	movsxd r8,eax
 100916c:	mov    edx,0x605
 1009171:	sub    rdx,rcx
 1009174:	lea    rax,[rbp-0x60]
 1009178:	add    rcx,rax
 100917b:	mov    rax,QWORD PTR [rsp+0x68]
 1009180:	mov    QWORD PTR [rsp+0x20],rax
 1009185:	mov    r9,r14
 1009188:	call   QWORD PTR [rip+0xffffffffffff81f2]        # 0x1001380
 100918e:	test   eax,eax
 1009190:	jle    0x1009195
 1009192:	add    r15d,eax
 1009195:	cmp    r15d,0x5f5
 100919c:	jg     0x10091cf
 100919e:	movsxd rcx,r15d
 10091a1:	mov    eax,0x604
 10091a6:	sub    eax,r15d
 10091a9:	movsxd r8,eax
 10091ac:	mov    edx,0x605
 10091b1:	sub    rdx,rcx
 10091b4:	lea    rax,[rbp-0x60]
 10091b8:	add    rcx,rax
 10091bb:	lea    r9,[rip+0xffffffffffff9c26]        # 0x1002de8
 10091c2:	call   QWORD PTR [rip+0xffffffffffff81c0]        # 0x1001388
 10091c8:	test   eax,eax
 10091ca:	jle    0x10091cf
 10091cc:	add    r15d,eax
 10091cf:	cmp    r15d,0x604
 10091d6:	jge    0x10091f2
 10091d8:	movsxd rax,r15d
 10091db:	cmp    rax,0x605
 10091e1:	jae    0x10091ea
 10091e3:	mov    BYTE PTR [rbp+rax*1-0x60],0x0
 10091e8:	jmp    0x10091f9
 10091ea:	xor    ecx,ecx
 10091ec:	call   0x1004aa0
 10091f1:	int3   
 10091f2:	mov    BYTE PTR [rbp+0x5a4],0x0
 10091f9:	lea    rbx,[r13+0x8]
 10091fd:	mov    QWORD PTR [rsp+0x68],rbx
 1009202:	or     edx,0xffffffff
 1009205:	mov    rcx,QWORD PTR [rbx]
 1009208:	call   QWORD PTR [rip+0xffffffffffff7f92]        # 0x10011a0
 100920e:	test   eax,eax
 1009210:	je     0x1009230
 1009212:	lea    rax,[rip+0xffffffffffff998f]        # 0x1002ba8
 1009219:	mov    QWORD PTR [rsp+0x68],rax
 100921e:	lea    rdx,[rip+0x8123]        # 0x1011348
 1009225:	lea    rcx,[rsp+0x68]
 100922a:	call   0x1004bf0
 100922f:	nop
 1009230:	cmp    DWORD PTR [r13+0x0],0x0
 1009235:	je     0x100924f
 1009237:	mov    rax,QWORD PTR [r13+0x18]
 100923b:	mov    rdx,QWORD PTR [rax+0x70]
 100923f:	lea    r8,[rbp-0x60]
 1009243:	mov    edx,DWORD PTR [rdx]
 1009245:	mov    rcx,QWORD PTR [r13+0x20]
 1009249:	call   0x100c390
 100924e:	nop
 100924f:	mov    rcx,QWORD PTR [rbx]
 1009252:	test   rcx,rcx
 1009255:	je     0x100925d
 1009257:	call   QWORD PTR [rip+0xffffffffffff7f8b]        # 0x10011e8
 100925d:	mov    rcx,QWORD PTR [rbp+0x5b0]
 1009264:	xor    rcx,rsp
 1009267:	call   0x1004cb0
 100926c:	add    rsp,0x6c8
 1009273:	pop    r15
 1009275:	pop    r14
 1009277:	pop    r13
 1009279:	pop    r12
 100927b:	pop    rdi
 100927c:	pop    rsi
 100927d:	pop    rbx
 100927e:	pop    rbp
 100927f:	ret    
 1009280:	int3   
 1009281:	int3   
 1009282:	int3   
 1009283:	int3   
 1009284:	int3   
 1009285:	int3   
 1009286:	int3   
 1009287:	int3   
 1009288:	int3   
 1009289:	int3   
 100928a:	int3   
 100928b:	int3   
 100928c:	int3   
 100928d:	int3   
 100928e:	int3   
 100928f:	int3   
 1009290:	rex push rbx
 1009292:	push   rbp
 1009293:	push   rsi
 1009294:	push   rdi
 1009295:	push   r14
 1009297:	push   r15
 1009299:	sub    rsp,0xc88
 10092a0:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
 10092a9:	mov    rax,QWORD PTR [rip+0x9ea0]        # 0x1013150
 10092b0:	xor    rax,rsp
 10092b3:	mov    QWORD PTR [rsp+0xc70],rax
 10092bb:	mov    r14,rcx
 10092be:	mov    rsi,QWORD PTR [rsp+0xcf0]
 10092c6:	mov    rdi,QWORD PTR [rsp+0xcf8]
 10092ce:	xor    r15d,r15d
 10092d1:	mov    DWORD PTR [rsp+0x50],r15d
 10092d6:	mov    ebx,0x5f5
 10092db:	mov    DWORD PTR [rsp+0x40],ebx
 10092df:	lea    rax,[rsp+0x50]
 10092e4:	mov    QWORD PTR [rsp+0x38],rax
 10092e9:	lea    rax,[rsp+0x60]
 10092ee:	mov    QWORD PTR [rsp+0x30],rax
 10092f3:	mov    eax,DWORD PTR [rsp+0xce8]
 10092fa:	mov    DWORD PTR [rsp+0x28],eax
 10092fe:	mov    eax,DWORD PTR [rsp+0xce0]
 1009305:	mov    DWORD PTR [rsp+0x20],eax
 1009309:	call   0x100a550
 100930e:	movsxd rbp,DWORD PTR [rsp+0x50]
 1009313:	sub    ebx,ebp
 1009315:	movsxd r8,ebx
 1009318:	mov    ebx,0x605
 100931d:	mov    edx,ebx
 100931f:	sub    rdx,rbp
 1009322:	lea    rcx,[rsp+0x60]
 1009327:	lea    rcx,[rcx+rbp*2]
 100932b:	mov    QWORD PTR [rsp+0x20],rdi
 1009330:	mov    r9,rsi
 1009333:	call   QWORD PTR [rip+0xffffffffffff803f]        # 0x1001378
 1009339:	test   eax,eax
 100933b:	jle    0x100933f
 100933d:	add    ebp,eax
 100933f:	movsxd rcx,ebp
 1009342:	mov    edi,0x604
 1009347:	mov    eax,edi
 1009349:	sub    eax,ebp
 100934b:	movsxd r8,eax
 100934e:	sub    rbx,rcx
 1009351:	lea    rax,[rsp+0x60]
 1009356:	lea    rcx,[rax+rcx*2]
 100935a:	lea    r9,[rip+0xffffffffffff9a97]        # 0x1002df8
 1009361:	mov    rdx,rbx
 1009364:	call   QWORD PTR [rip+0xffffffffffff803e]        # 0x10013a8
 100936a:	test   eax,eax
 100936c:	jle    0x1009370
 100936e:	add    ebp,eax
 1009370:	cmp    ebp,edi
 1009372:	cmovg  ebp,edi
 1009375:	movsxd rax,ebp
 1009378:	add    rax,rax
 100937b:	cmp    rax,0xc0a
 1009381:	jae    0x10093f2
 1009383:	mov    WORD PTR [rsp+rax*1+0x60],r15w
 1009389:	lea    rbx,[r14+0x8]
 100938d:	mov    QWORD PTR [rsp+0x50],rbx
 1009392:	or     edx,0xffffffff
 1009395:	mov    rcx,QWORD PTR [rbx]
 1009398:	call   QWORD PTR [rip+0xffffffffffff7e02]        # 0x10011a0
 100939e:	test   eax,eax
 10093a0:	je     0x10093c0
 10093a2:	lea    rax,[rip+0xffffffffffff97ff]        # 0x1002ba8
 10093a9:	mov    QWORD PTR [rsp+0x50],rax
 10093ae:	lea    rdx,[rip+0x7f93]        # 0x1011348
 10093b5:	lea    rcx,[rsp+0x50]
 10093ba:	call   0x1004bf0
 10093bf:	nop
 10093c0:	cmp    DWORD PTR [r14],0x0
 10093c4:	je     0x10093e2
 10093c6:	mov    rax,QWORD PTR [r14+0x18]
 10093ca:	mov    rdx,QWORD PTR [rax+0x70]
 10093ce:	mov    r9d,ebp
 10093d1:	lea    r8,[rsp+0x60]
 10093d6:	mov    edx,DWORD PTR [rdx]
 10093d8:	mov    rcx,QWORD PTR [r14+0x20]
 10093dc:	call   0x100c4f0
 10093e1:	nop
 10093e2:	mov    rcx,QWORD PTR [rbx]
 10093e5:	test   rcx,rcx
 10093e8:	je     0x10093fa
 10093ea:	call   QWORD PTR [rip+0xffffffffffff7df8]        # 0x10011e8
 10093f0:	jmp    0x10093fa
 10093f2:	xor    ecx,ecx
 10093f4:	call   0x1004aa0
 10093f9:	int3   
 10093fa:	mov    rcx,QWORD PTR [rsp+0xc70]
 1009402:	xor    rcx,rsp
 1009405:	call   0x1004cb0
 100940a:	add    rsp,0xc88
 1009411:	pop    r15
 1009413:	pop    r14
 1009415:	pop    rdi
 1009416:	pop    rsi
 1009417:	pop    rbp
 1009418:	pop    rbx
 1009419:	ret    
 100941a:	int3   
 100941b:	int3   
 100941c:	int3   
 100941d:	int3   
 100941e:	int3   
 100941f:	int3   
 1009420:	rex push rbp
 1009422:	push   rbx
 1009423:	push   rsi
 1009424:	push   rdi
 1009425:	push   r12
 1009427:	push   r13
 1009429:	push   r14
 100942b:	push   r15
 100942d:	lea    rbp,[rsp-0xc18]
 1009435:	sub    rsp,0xd18
 100943c:	mov    QWORD PTR [rbp-0x68],0xfffffffffffffffe
 1009444:	mov    rax,QWORD PTR [rip+0x9d05]        # 0x1013150
 100944b:	xor    rax,rsp
 100944e:	mov    QWORD PTR [rbp+0xc00],rax
 1009455:	mov    rdi,rcx
 1009458:	mov    r12,QWORD PTR [rbp+0xc90]
 100945f:	xor    r13d,r13d
 1009462:	mov    DWORD PTR [rsp+0x50],r13d
 1009467:	mov    DWORD PTR [rsp+0x40],0x5f5
 100946f:	lea    rax,[rsp+0x50]
 1009474:	mov    QWORD PTR [rsp+0x38],rax
 1009479:	lea    rax,[rbp-0x10]
 100947d:	mov    QWORD PTR [rsp+0x30],rax
 1009482:	mov    eax,DWORD PTR [rbp+0xc88]
 1009488:	mov    DWORD PTR [rsp+0x28],eax
 100948c:	mov    eax,DWORD PTR [rbp+0xc80]
 1009492:	mov    DWORD PTR [rsp+0x20],eax
 1009496:	call   0x100a550
 100949b:	mov    r15d,DWORD PTR [rsp+0x50]
 10094a0:	mov    eax,0x604
 10094a5:	cmp    r15d,eax
 10094a8:	cmovg  r15d,eax
 10094ac:	movsxd rax,r15d
 10094af:	add    rax,rax
 10094b2:	cmp    rax,0xc0a
 10094b8:	jae    0x100983b
 10094be:	mov    WORD PTR [rbp+rax*1-0x10],r13w
 10094c4:	lea    rbx,[rdi+0x8]
 10094c8:	mov    QWORD PTR [rbp-0x70],rbx
 10094cc:	or     edx,0xffffffff
 10094cf:	mov    rcx,QWORD PTR [rbx]
 10094d2:	call   QWORD PTR [rip+0xffffffffffff7cc8]        # 0x10011a0
 10094d8:	test   eax,eax
 10094da:	je     0x10094fa
 10094dc:	lea    rax,[rip+0xffffffffffff96c5]        # 0x1002ba8
 10094e3:	mov    QWORD PTR [rsp+0x50],rax
 10094e8:	lea    rdx,[rip+0x7e59]        # 0x1011348
 10094ef:	lea    rcx,[rsp+0x50]
 10094f4:	call   0x1004bf0
 10094f9:	nop
 10094fa:	cmp    DWORD PTR [rdi],0x0
 10094fd:	je     0x100982b
 1009503:	mov    r14d,DWORD PTR [rbp+0xc98]
 100950a:	lea    eax,[r15+r14*1]
 100950e:	lea    r8d,[rax*2+0x20]
 1009516:	mov    rcx,QWORD PTR [rdi+0x20]
 100951a:	mov    esi,0x1
 100951f:	mov    edx,DWORD PTR [rcx+0xc8]
 1009525:	lea    eax,[rdx+r8*1]
 1009529:	cmp    eax,0x7ffe2
 100952e:	jbe    0x10097d7
 1009534:	cmp    r8d,0x7ffe2
 100953b:	jbe    0x1009545
 100953d:	cmp    edx,0x10
 1009540:	je     0x1009552
 1009542:	mov    esi,r13d
 1009545:	call   0x100c960
 100954a:	test   esi,esi
 100954c:	jne    0x10097d7
 1009552:	lea    rax,[rip+0xffffffffffff95df]        # 0x1002b38
 1009559:	mov    QWORD PTR [rbp-0x80],rax
 100955d:	mov    QWORD PTR [rbp-0x78],r13
 1009561:	lea    rdx,[rbp-0x80]
 1009565:	mov    rcx,QWORD PTR [rdi+0x20]
 1009569:	call   0x100c690
 100956e:	mov    DWORD PTR [rsp+0x50],r13d
 1009573:	mov    eax,0xfeff
 1009578:	mov    WORD PTR [rbp-0x38],ax
 100957c:	mov    r9d,0xe
 1009582:	lea    r8,[rip+0xffffffffffff988f]        # 0x1002e18
 1009589:	lea    edx,[r9+0x10]
 100958d:	lea    rcx,[rbp-0x36]
 1009591:	call   QWORD PTR [rip+0xffffffffffff7dd9]        # 0x1001370
 1009597:	mov    QWORD PTR [rsp+0x20],r13
 100959c:	lea    r9,[rsp+0x50]
 10095a1:	mov    r8d,0x10
 10095a7:	lea    rdx,[rbp-0x38]
 10095ab:	mov    rdi,QWORD PTR [rbp-0x78]
 10095af:	mov    rcx,rdi
 10095b2:	call   QWORD PTR [rip+0xffffffffffff7c38]        # 0x10011f0
 10095b8:	test   eax,eax
 10095ba:	jne    0x1009625
 10095bc:	call   QWORD PTR [rip+0xffffffffffff7d56]        # 0x1001318
 10095c2:	test   eax,eax
 10095c4:	jle    0x10095ce
 10095c6:	movzx  eax,ax
 10095c9:	or     eax,0x80070000
 10095ce:	mov    r9d,eax
 10095d1:	mov    r8d,0x381
 10095d7:	lea    rdx,[rip+0xffffffffffff9692]        # 0x1002c70
 10095de:	lea    rcx,[rbp-0x60]
 10095e2:	call   0x10036dc
 10095e7:	mov    rcx,QWORD PTR [rax]
 10095ea:	mov    QWORD PTR [rsp+0x58],rcx
 10095ef:	mov    rcx,QWORD PTR [rax+0x8]
 10095f3:	mov    QWORD PTR [rsp+0x60],rcx
 10095f8:	mov    rcx,QWORD PTR [rax+0x10]
 10095fc:	mov    QWORD PTR [rsp+0x68],rcx
 1009601:	mov    rcx,QWORD PTR [rax+0x18]
 1009605:	mov    QWORD PTR [rsp+0x70],rcx
 100960a:	mov    rax,QWORD PTR [rax+0x20]
 100960e:	mov    QWORD PTR [rsp+0x78],rax
 1009613:	lea    rdx,[rip+0x7cd6]        # 0x10112f0
 100961a:	lea    rcx,[rsp+0x58]
 100961f:	call   0x1004bf0
 1009624:	int3   
 1009625:	lea    r8d,[r15+r15*1]
 1009629:	mov    QWORD PTR [rsp+0x20],r13
 100962e:	lea    r9,[rsp+0x50]
 1009633:	lea    rdx,[rbp-0x10]
 1009637:	mov    rcx,rdi
 100963a:	call   QWORD PTR [rip+0xffffffffffff7bb0]        # 0x10011f0
 1009640:	test   eax,eax
 1009642:	jne    0x10096ad
 1009644:	call   QWORD PTR [rip+0xffffffffffff7cce]        # 0x1001318
 100964a:	test   eax,eax
 100964c:	jle    0x1009656
 100964e:	movzx  eax,ax
 1009651:	or     eax,0x80070000
 1009656:	mov    r9d,eax
 1009659:	mov    r8d,0x385
 100965f:	lea    rdx,[rip+0xffffffffffff960a]        # 0x1002c70
 1009666:	lea    rcx,[rbp-0x60]
 100966a:	call   0x10036dc
 100966f:	mov    rcx,QWORD PTR [rax]
 1009672:	mov    QWORD PTR [rsp+0x58],rcx
 1009677:	mov    rcx,QWORD PTR [rax+0x8]
 100967b:	mov    QWORD PTR [rsp+0x60],rcx
 1009680:	mov    rcx,QWORD PTR [rax+0x10]
 1009684:	mov    QWORD PTR [rsp+0x68],rcx
 1009689:	mov    rcx,QWORD PTR [rax+0x18]
 100968d:	mov    QWORD PTR [rsp+0x70],rcx
 1009692:	mov    rax,QWORD PTR [rax+0x20]
 1009696:	mov    QWORD PTR [rsp+0x78],rax
 100969b:	lea    rdx,[rip+0x7c4e]        # 0x10112f0
 10096a2:	lea    rcx,[rsp+0x58]
 10096a7:	call   0x1004bf0
 10096ac:	int3   
 10096ad:	lea    r8d,[r14+r14*1]
 10096b1:	mov    QWORD PTR [rsp+0x20],r13
 10096b6:	lea    r9,[rsp+0x50]
 10096bb:	mov    rdx,r12
 10096be:	mov    rcx,rdi
 10096c1:	call   QWORD PTR [rip+0xffffffffffff7b29]        # 0x10011f0
 10096c7:	test   eax,eax
 10096c9:	jne    0x1009734
 10096cb:	call   QWORD PTR [rip+0xffffffffffff7c47]        # 0x1001318
 10096d1:	test   eax,eax
 10096d3:	jle    0x10096dd
 10096d5:	movzx  eax,ax
 10096d8:	or     eax,0x80070000
 10096dd:	mov    r9d,eax
 10096e0:	mov    r8d,0x389
 10096e6:	lea    rdx,[rip+0xffffffffffff9583]        # 0x1002c70
 10096ed:	lea    rcx,[rbp-0x60]
 10096f1:	call   0x10036dc
 10096f6:	mov    rcx,QWORD PTR [rax]
 10096f9:	mov    QWORD PTR [rsp+0x58],rcx
 10096fe:	mov    rcx,QWORD PTR [rax+0x8]
 1009702:	mov    QWORD PTR [rsp+0x60],rcx
 1009707:	mov    rcx,QWORD PTR [rax+0x10]
 100970b:	mov    QWORD PTR [rsp+0x68],rcx
 1009710:	mov    rcx,QWORD PTR [rax+0x18]
 1009714:	mov    QWORD PTR [rsp+0x70],rcx
 1009719:	mov    rax,QWORD PTR [rax+0x20]
 100971d:	mov    QWORD PTR [rsp+0x78],rax
 1009722:	lea    rdx,[rip+0x7bc7]        # 0x10112f0
 1009729:	lea    rcx,[rsp+0x58]
 100972e:	call   0x1004bf0
 1009733:	int3   
 1009734:	mov    QWORD PTR [rsp+0x20],r13
 1009739:	lea    r9,[rsp+0x50]
 100973e:	mov    r8d,0x28
 1009744:	lea    rdx,[rip+0xffffffffffff96dd]        # 0x1002e28
 100974b:	mov    rcx,rdi
 100974e:	call   QWORD PTR [rip+0xffffffffffff7a9c]        # 0x10011f0
 1009754:	test   eax,eax
 1009756:	jne    0x10097c1
 1009758:	call   QWORD PTR [rip+0xffffffffffff7bba]        # 0x1001318
 100975e:	test   eax,eax
 1009760:	jle    0x100976a
 1009762:	movzx  eax,ax
 1009765:	or     eax,0x80070000
 100976a:	mov    r9d,eax
 100976d:	mov    r8d,0x38e
 1009773:	lea    rdx,[rip+0xffffffffffff94f6]        # 0x1002c70
 100977a:	lea    rcx,[rbp-0x60]
 100977e:	call   0x10036dc
 1009783:	mov    rcx,QWORD PTR [rax]
 1009786:	mov    QWORD PTR [rsp+0x58],rcx
 100978b:	mov    rcx,QWORD PTR [rax+0x8]
 100978f:	mov    QWORD PTR [rsp+0x60],rcx
 1009794:	mov    rcx,QWORD PTR [rax+0x10]
 1009798:	mov    QWORD PTR [rsp+0x68],rcx
 100979d:	mov    rcx,QWORD PTR [rax+0x18]
 10097a1:	mov    QWORD PTR [rsp+0x70],rcx
 10097a6:	mov    rax,QWORD PTR [rax+0x20]
 10097aa:	mov    QWORD PTR [rsp+0x78],rax
 10097af:	lea    rdx,[rip+0x7b3a]        # 0x10112f0
 10097b6:	lea    rcx,[rsp+0x58]
 10097bb:	call   0x1004bf0
 10097c0:	nop
 10097c1:	test   rdi,rdi
 10097c4:	je     0x100982b
 10097c6:	cmp    rdi,0xffffffffffffffff
 10097ca:	je     0x100982b
 10097cc:	mov    rcx,rdi
 10097cf:	call   QWORD PTR [rip+0xffffffffffff79c3]        # 0x1001198
 10097d5:	jmp    0x100982b
 10097d7:	mov    rax,QWORD PTR [rdi+0x18]
 10097db:	mov    rcx,QWORD PTR [rax+0x70]
 10097df:	mov    r9d,r15d
 10097e2:	lea    r8,[rbp-0x10]
 10097e6:	mov    edx,DWORD PTR [rcx]
 10097e8:	mov    rcx,QWORD PTR [rdi+0x20]
 10097ec:	call   0x100c4f0
 10097f1:	mov    r11,QWORD PTR [rdi+0x18]
 10097f5:	mov    rax,QWORD PTR [r11+0x70]
 10097f9:	mov    r9d,r14d
 10097fc:	mov    r8,r12
 10097ff:	mov    edx,DWORD PTR [rax]
 1009801:	mov    rcx,QWORD PTR [rdi+0x20]
 1009805:	call   0x100c4f0
 100980a:	mov    r11,QWORD PTR [rdi+0x18]
 100980e:	mov    rax,QWORD PTR [r11+0x70]
 1009812:	mov    r9d,0xe
 1009818:	lea    r8,[rip+0xffffffffffff95d9]        # 0x1002df8
 100981f:	mov    edx,DWORD PTR [rax]
 1009821:	mov    rcx,QWORD PTR [rdi+0x20]
 1009825:	call   0x100c4f0
 100982a:	nop
 100982b:	mov    rcx,QWORD PTR [rbx]
 100982e:	test   rcx,rcx
 1009831:	je     0x1009843
 1009833:	call   QWORD PTR [rip+0xffffffffffff79af]        # 0x10011e8
 1009839:	jmp    0x1009843
 100983b:	xor    ecx,ecx
 100983d:	call   0x1004aa0
 1009842:	int3   
 1009843:	mov    rcx,QWORD PTR [rbp+0xc00]
 100984a:	xor    rcx,rsp
 100984d:	call   0x1004cb0
 1009852:	add    rsp,0xd18
 1009859:	pop    r15
 100985b:	pop    r14
 100985d:	pop    r13
 100985f:	pop    r12
 1009861:	pop    rdi
 1009862:	pop    rsi
 1009863:	pop    rbx
 1009864:	pop    rbp
 1009865:	ret    
 1009866:	int3   
 1009867:	int3   
 1009868:	int3   
 1009869:	int3   
 100986a:	int3   
 100986b:	int3   
 100986c:	int3   
 100986d:	int3   
 100986e:	int3   
 100986f:	int3   
 1009870:	rex push rdi
 1009872:	sub    rsp,0x660
 1009879:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 1009882:	mov    QWORD PTR [rsp+0x688],rbx
 100988a:	mov    rax,QWORD PTR [rip+0x98bf]        # 0x1013150
 1009891:	xor    rax,rsp
 1009894:	mov    QWORD PTR [rsp+0x650],rax
 100989c:	mov    rdi,rcx
 100989f:	mov    QWORD PTR [rsp+0x20],r8
 10098a4:	mov    r9,rdx
 10098a7:	mov    edx,0x605
 10098ac:	lea    r8d,[rdx-0x1]
 10098b0:	lea    rcx,[rsp+0x40]
 10098b5:	call   QWORD PTR [rip+0xffffffffffff7ac5]        # 0x1001380
 10098bb:	test   eax,eax
 10098bd:	jle    0x100993b
 10098bf:	cdqe   
 10098c1:	cmp    rax,0x605
 10098c7:	jae    0x1009933
 10098c9:	mov    BYTE PTR [rsp+rax*1+0x40],0x0
 10098ce:	lea    rbx,[rdi+0x8]
 10098d2:	mov    QWORD PTR [rsp+0x30],rbx
 10098d7:	or     edx,0xffffffff
 10098da:	mov    rcx,QWORD PTR [rbx]
 10098dd:	call   QWORD PTR [rip+0xffffffffffff78bd]        # 0x10011a0
 10098e3:	test   eax,eax
 10098e5:	je     0x1009905
 10098e7:	lea    rax,[rip+0xffffffffffff92ba]        # 0x1002ba8
 10098ee:	mov    QWORD PTR [rsp+0x30],rax
 10098f3:	lea    rdx,[rip+0x7a4e]        # 0x1011348
 10098fa:	lea    rcx,[rsp+0x30]
 10098ff:	call   0x1004bf0
 1009904:	nop
 1009905:	cmp    DWORD PTR [rdi],0x0
 1009908:	je     0x1009923
 100990a:	mov    rax,QWORD PTR [rdi+0x18]
 100990e:	mov    rdx,QWORD PTR [rax+0x70]
 1009912:	lea    r8,[rsp+0x40]
 1009917:	mov    edx,DWORD PTR [rdx]
 1009919:	mov    rcx,QWORD PTR [rdi+0x20]
 100991d:	call   0x100c390
 1009922:	nop
 1009923:	mov    rcx,QWORD PTR [rbx]
 1009926:	test   rcx,rcx
 1009929:	je     0x100993b
 100992b:	call   QWORD PTR [rip+0xffffffffffff78b7]        # 0x10011e8
 1009931:	jmp    0x100993b
 1009933:	xor    ecx,ecx
 1009935:	call   0x1004aa0
 100993a:	int3   
 100993b:	mov    rcx,QWORD PTR [rsp+0x650]
 1009943:	xor    rcx,rsp
 1009946:	call   0x1004cb0
 100994b:	mov    rbx,QWORD PTR [rsp+0x688]
 1009953:	add    rsp,0x660
 100995a:	pop    rdi
 100995b:	ret    
 100995c:	int3   
 100995d:	int3   
 100995e:	int3   
 100995f:	int3   
 1009960:	int3   
 1009961:	int3   
 1009962:	int3   
 1009963:	int3   
 1009964:	int3   
 1009965:	int3   
 1009966:	int3   
 1009967:	int3   
 1009968:	int3   
 1009969:	int3   
 100996a:	int3   
 100996b:	int3   
 100996c:	int3   
 100996d:	int3   
 100996e:	int3   
 100996f:	int3   
 1009970:	rex push rbx
 1009972:	push   rsi
 1009973:	push   rdi
 1009974:	sub    rsp,0xc60
 100997b:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 1009984:	mov    rax,QWORD PTR [rip+0x97c5]        # 0x1013150
 100998b:	xor    rax,rsp
 100998e:	mov    QWORD PTR [rsp+0xc50],rax
 1009996:	mov    rdi,rcx
 1009999:	mov    QWORD PTR [rsp+0x20],r8
 100999e:	mov    r9,rdx
 10099a1:	mov    edx,0x605
 10099a6:	lea    r8d,[rdx-0x1]
 10099aa:	lea    rcx,[rsp+0x40]
 10099af:	call   QWORD PTR [rip+0xffffffffffff79c3]        # 0x1001378
 10099b5:	movsxd rsi,eax
 10099b8:	test   eax,eax
 10099ba:	jle    0x1009a46
 10099c0:	mov    rcx,rsi
 10099c3:	add    rcx,rcx
 10099c6:	cmp    rcx,0xc0a
 10099cd:	jae    0x1009a3e
 10099cf:	xor    eax,eax
 10099d1:	mov    WORD PTR [rsp+rcx*1+0x40],ax
 10099d6:	lea    rbx,[rdi+0x8]
 10099da:	mov    QWORD PTR [rsp+0x30],rbx
 10099df:	or     edx,0xffffffff
 10099e2:	mov    rcx,QWORD PTR [rbx]
 10099e5:	call   QWORD PTR [rip+0xffffffffffff77b5]        # 0x10011a0
 10099eb:	test   eax,eax
 10099ed:	je     0x1009a0d
 10099ef:	lea    rax,[rip+0xffffffffffff91b2]        # 0x1002ba8
 10099f6:	mov    QWORD PTR [rsp+0x30],rax
 10099fb:	lea    rdx,[rip+0x7946]        # 0x1011348
 1009a02:	lea    rcx,[rsp+0x30]
 1009a07:	call   0x1004bf0
 1009a0c:	nop
 1009a0d:	cmp    DWORD PTR [rdi],0x0
 1009a10:	je     0x1009a2e
 1009a12:	mov    rax,QWORD PTR [rdi+0x18]
 1009a16:	mov    rdx,QWORD PTR [rax+0x70]
 1009a1a:	mov    r9d,esi
 1009a1d:	lea    r8,[rsp+0x40]
 1009a22:	mov    edx,DWORD PTR [rdx]
 1009a24:	mov    rcx,QWORD PTR [rdi+0x20]
 1009a28:	call   0x100c4f0
 1009a2d:	nop
 1009a2e:	mov    rcx,QWORD PTR [rbx]
 1009a31:	test   rcx,rcx
 1009a34:	je     0x1009a46
 1009a36:	call   QWORD PTR [rip+0xffffffffffff77ac]        # 0x10011e8
 1009a3c:	jmp    0x1009a46
 1009a3e:	xor    ecx,ecx
 1009a40:	call   0x1004aa0
 1009a45:	int3   
 1009a46:	mov    rcx,QWORD PTR [rsp+0xc50]
 1009a4e:	xor    rcx,rsp
 1009a51:	call   0x1004cb0
 1009a56:	add    rsp,0xc60
 1009a5d:	pop    rdi
 1009a5e:	pop    rsi
 1009a5f:	pop    rbx
 1009a60:	ret    
 1009a61:	int3   
 1009a62:	int3   
 1009a63:	int3   
 1009a64:	int3   
 1009a65:	int3   
 1009a66:	int3   
 1009a67:	int3   
 1009a68:	int3   
 1009a69:	int3   
 1009a6a:	int3   
 1009a6b:	int3   
 1009a6c:	int3   
 1009a6d:	int3   
 1009a6e:	int3   
 1009a6f:	int3   
 1009a70:	sub    rsp,0x38
 1009a74:	mov    DWORD PTR [rsp+0x20],r9d
 1009a79:	mov    r9,r8
 1009a7c:	lea    r8,[rip+0xffffffffffff961f]        # 0x10030a2
 1009a83:	call   0x1009aa0
 1009a88:	add    rsp,0x38
 1009a8c:	ret    
 1009a8d:	int3   
 1009a8e:	int3   
 1009a8f:	int3   
 1009a90:	int3   
 1009a91:	int3   
 1009a92:	int3   
 1009a93:	int3   
 1009a94:	int3   
 1009a95:	int3   
 1009a96:	int3   
 1009a97:	int3   
 1009a98:	int3   
 1009a99:	int3   
 1009a9a:	int3   
 1009a9b:	int3   
 1009a9c:	int3   
 1009a9d:	int3   
 1009a9e:	int3   
 1009a9f:	int3   
 1009aa0:	mov    r11,rsp
 1009aa3:	push   rbp
 1009aa4:	push   rdi
 1009aa5:	push   r14
 1009aa7:	push   r15
 1009aa9:	sub    rsp,0x698
 1009ab0:	mov    rax,QWORD PTR [rip+0x9699]        # 0x1013150
 1009ab7:	xor    rax,rsp
 1009aba:	mov    QWORD PTR [rsp+0x670],rax
 1009ac2:	cmp    DWORD PTR [rcx],0x0
 1009ac5:	mov    r15,r9
 1009ac8:	mov    r14,r8
 1009acb:	mov    rbp,rdx
 1009ace:	mov    rdi,rcx
 1009ad1:	je     0x1009be8
 1009ad7:	mov    rax,QWORD PTR [rcx+0x18]
 1009adb:	mov    QWORD PTR [r11-0x28],rbx
 1009adf:	mov    QWORD PTR [r11-0x30],rsi
 1009ae3:	mov    rcx,QWORD PTR [rax+0x70]
 1009ae7:	mov    esi,DWORD PTR [rsp+0x6e0]
 1009aee:	mov    QWORD PTR [r11-0x38],r12
 1009af2:	mov    ebx,DWORD PTR [rcx+0x48]
 1009af5:	test   bl,0x1
 1009af8:	je     0x1009b32
 1009afa:	mov    QWORD PTR [rsp+0x40],rdx
 1009aff:	mov    QWORD PTR [rsp+0x38],r8
 1009b04:	lea    rax,[rip+0xffffffffffff94f5]        # 0x1003000
 1009b0b:	mov    QWORD PTR [rsp+0x30],rax
 1009b10:	mov    eax,DWORD PTR [rip+0x9bda]        # 0x10136f0
 1009b16:	mov    r9d,esi
 1009b19:	mov    DWORD PTR [rsp+0x28],eax
 1009b1d:	mov    r8,r15
 1009b20:	xor    edx,edx
 1009b22:	mov    rcx,rdi
 1009b25:	mov    DWORD PTR [rsp+0x20],0x2
 1009b2d:	call   0x1008c80
 1009b32:	call   QWORD PTR [rip+0xffffffffffff7598]        # 0x10010d0
 1009b38:	mov    r12d,eax
 1009b3b:	call   QWORD PTR [rip+0xffffffffffff75ff]        # 0x1001140
 1009b41:	mov    r11d,eax
 1009b44:	test   bl,0x4
 1009b47:	je     0x1009bb8
 1009b49:	mov    rax,QWORD PTR [rdi+0x18]
 1009b4d:	mov    DWORD PTR [rsp+0x50],esi
 1009b51:	mov    QWORD PTR [rsp+0x48],r15
 1009b56:	mov    rax,QWORD PTR [rax+0x40]
 1009b5a:	mov    DWORD PTR [rsp+0x40],r12d
 1009b5f:	mov    DWORD PTR [rsp+0x38],r11d
 1009b64:	mov    QWORD PTR [rsp+0x30],rax
 1009b69:	mov    edx,0x605
 1009b6e:	lea    r9,[rip+0xffffffffffff94bb]        # 0x1003030
 1009b75:	lea    rcx,[rsp+0x60]
 1009b7a:	lea    r8d,[rdx-0x1]
 1009b7e:	mov    QWORD PTR [rsp+0x28],rbp
 1009b83:	mov    QWORD PTR [rsp+0x20],r14
 1009b88:	call   QWORD PTR [rip+0xffffffffffff77fa]        # 0x1001388
 1009b8e:	mov    rax,QWORD PTR [rdi+0x18]
 1009b92:	mov    BYTE PTR [rsp+0x664],0x0
 1009b9a:	mov    r8,QWORD PTR [rax+0x40]
 1009b9e:	lea    rdx,[rsp+0x60]
 1009ba3:	mov    r9d,0x11
 1009ba9:	xor    ecx,ecx
 1009bab:	call   QWORD PTR [rip+0xffffffffffff793f]        # 0x10014f0
 1009bb1:	cmp    eax,0x2
 1009bb4:	jne    0x1009bd0
 1009bb6:	jmp    0x1009bbd
 1009bb8:	test   bl,0x2
 1009bbb:	je     0x1009bd0
 1009bbd:	xor    r9d,r9d
 1009bc0:	xor    r8d,r8d
 1009bc3:	xor    edx,edx
 1009bc5:	mov    ecx,0x42ac
 1009bca:	call   QWORD PTR [rip+0xffffffffffff7750]        # 0x1001320
 1009bd0:	mov    rsi,QWORD PTR [rsp+0x688]
 1009bd8:	mov    rbx,QWORD PTR [rsp+0x690]
 1009be0:	mov    r12,QWORD PTR [rsp+0x680]
 1009be8:	mov    rcx,QWORD PTR [rsp+0x670]
 1009bf0:	xor    rcx,rsp
 1009bf3:	call   0x1004cb0
 1009bf8:	add    rsp,0x698
 1009bff:	pop    r15
 1009c01:	pop    r14
 1009c03:	pop    rdi
 1009c04:	pop    rbp
 1009c05:	ret    
 1009c06:	int3   
 1009c07:	int3   
 1009c08:	int3   
 1009c09:	int3   
 1009c0a:	int3   
 1009c0b:	int3   
 1009c0c:	int3   
 1009c0d:	int3   
 1009c0e:	int3   
 1009c0f:	int3   
 1009c10:	mov    rcx,QWORD PTR [rcx+0x18]
 1009c14:	test   rcx,rcx
 1009c17:	je     0x1009c1e
 1009c19:	jmp    0x100b5d0
 1009c1e:	mov    eax,0x80070057
 1009c23:	ret    
 1009c24:	int3   
 1009c25:	int3   
 1009c26:	int3   
 1009c27:	int3   
 1009c28:	int3   
 1009c29:	int3   
 1009c2a:	int3   
 1009c2b:	int3   
 1009c2c:	int3   
 1009c2d:	int3   
 1009c2e:	int3   
 1009c2f:	int3   
 1009c30:	sub    rsp,0x28
 1009c34:	cmp    DWORD PTR [rcx],0x0
 1009c37:	je     0x1009c42
 1009c39:	mov    rcx,QWORD PTR [rcx+0x18]
 1009c3d:	call   0x100b680
 1009c42:	add    rsp,0x28
 1009c46:	ret    
 1009c47:	int3   
 1009c48:	int3   
 1009c49:	int3   
 1009c4a:	int3   
 1009c4b:	int3   
 1009c4c:	int3   
 1009c4d:	int3   
 1009c4e:	int3   
 1009c4f:	int3   
 1009c50:	mov    QWORD PTR [rsp+0x10],rbx
 1009c55:	mov    QWORD PTR [rsp+0x18],rsi
 1009c5a:	push   rdi
 1009c5b:	push   r14
 1009c5d:	push   r15
 1009c5f:	sub    rsp,0x60
 1009c63:	xor    ebx,ebx
 1009c65:	mov    r14d,r9d
 1009c68:	mov    r15,r8
 1009c6b:	mov    esi,edx
 1009c6d:	mov    rdi,rcx
 1009c70:	test   edx,edx
 1009c72:	jne    0x1009d54
 1009c78:	mov    eax,DWORD PTR [rip+0x9a82]        # 0x1013700
 1009c7e:	cmp    eax,0xffffffff
 1009c81:	je     0x1009d54
 1009c87:	mov    r10d,eax
 1009c8a:	mov    rax,QWORD PTR [rcx+0x10]
 1009c8e:	imul   r10,r10,0x44
 1009c92:	cmp    DWORD PTR [r10+rax*1],0x2
 1009c97:	jl     0x1009d54
 1009c9d:	mov    rax,QWORD PTR [rcx+0x18]
 1009ca1:	mov    rcx,QWORD PTR [rax+0x70]
 1009ca5:	cmp    DWORD PTR [rcx+0x24],0x2
 1009ca9:	jb     0x1009d54
 1009caf:	cmp    DWORD PTR [rcx],ebx
 1009cb1:	je     0x1009d54
 1009cb7:	mov    QWORD PTR [rsp+0x80],rbp
 1009cbf:	call   QWORD PTR [rip+0xffffffffffff7653]        # 0x1001318
 1009cc5:	mov    QWORD PTR [rsp+0x30],rbx
 1009cca:	mov    ebp,eax
 1009ccc:	lea    rax,[rsp+0x50]
 1009cd1:	mov    r9d,0x400
 1009cd7:	xor    edx,edx
 1009cd9:	mov    ecx,0x1100
 1009cde:	mov    r8d,ebp
 1009ce1:	mov    DWORD PTR [rsp+0x28],ebx
 1009ce5:	mov    QWORD PTR [rsp+0x50],rbx
 1009cea:	mov    QWORD PTR [rsp+0x20],rax
 1009cef:	call   QWORD PTR [rip+0xffffffffffff7513]        # 0x1001208
 1009cf5:	test   eax,eax
 1009cf7:	je     0x1009d41
 1009cf9:	mov    rax,QWORD PTR [rsp+0x50]
 1009cfe:	mov    r9d,r14d
 1009d01:	mov    r8,r15
 1009d04:	mov    QWORD PTR [rsp+0x48],rax
 1009d09:	mov    DWORD PTR [rsp+0x40],ebp
 1009d0d:	lea    rax,[rip+0xffffffffffff93e0]        # 0x10030f4
 1009d14:	mov    QWORD PTR [rsp+0x38],rax
 1009d19:	lea    rax,[rip+0xffffffffffff93e0]        # 0x1003100
 1009d20:	mov    edx,ebp
 1009d22:	mov    QWORD PTR [rsp+0x30],rax
 1009d27:	mov    eax,DWORD PTR [rip+0x99d3]        # 0x1013700
 1009d2d:	mov    rcx,rdi
 1009d30:	mov    DWORD PTR [rsp+0x28],eax
 1009d34:	mov    DWORD PTR [rsp+0x20],0x2
 1009d3c:	call   0x1008c80
 1009d41:	mov    rcx,QWORD PTR [rsp+0x50]
 1009d46:	call   QWORD PTR [rip+0xffffffffffff7494]        # 0x10011e0
 1009d4c:	mov    rbp,QWORD PTR [rsp+0x80]
 1009d54:	test   esi,esi
 1009d56:	lea    r11,[rsp+0x60]
 1009d5b:	mov    rsi,QWORD PTR [r11+0x30]
 1009d5f:	sete   bl
 1009d62:	mov    eax,ebx
 1009d64:	mov    rbx,QWORD PTR [r11+0x28]
 1009d68:	mov    rsp,r11
 1009d6b:	pop    r15
 1009d6d:	pop    r14
 1009d6f:	pop    rdi
 1009d70:	ret    
 1009d71:	int3   
 1009d72:	int3   
 1009d73:	int3   
 1009d74:	int3   
 1009d75:	int3   
 1009d76:	int3   
 1009d77:	int3   
 1009d78:	int3   
 1009d79:	int3   
 1009d7a:	int3   
 1009d7b:	int3   
 1009d7c:	int3   
 1009d7d:	int3   
 1009d7e:	int3   
 1009d7f:	int3   
 1009d80:	sub    rsp,0x48
 1009d84:	mov    r11,rcx
 1009d87:	test   rdx,rdx
 1009d8a:	jne    0x1009dea
 1009d8c:	mov    r10d,DWORD PTR [rip+0x995d]        # 0x10136f0
 1009d93:	cmp    r10d,0xffffffff
 1009d97:	je     0x1009de0
 1009d99:	mov    rax,QWORD PTR [rcx+0x10]
 1009d9d:	mov    edx,r10d
 1009da0:	imul   rdx,rdx,0x44
 1009da4:	cmp    DWORD PTR [rdx+rax*1],0x2
 1009da8:	jl     0x1009de0
 1009daa:	mov    rax,QWORD PTR [rcx+0x18]
 1009dae:	mov    rcx,QWORD PTR [rax+0x70]
 1009db2:	cmp    DWORD PTR [rcx+0x24],0x2
 1009db6:	jb     0x1009de0
 1009db8:	cmp    DWORD PTR [rcx],0x0
 1009dbb:	je     0x1009de0
 1009dbd:	lea    rax,[rip+0xffffffffffff92e4]        # 0x10030a8
 1009dc4:	xor    edx,edx
 1009dc6:	mov    rcx,r11
 1009dc9:	mov    QWORD PTR [rsp+0x30],rax
 1009dce:	mov    DWORD PTR [rsp+0x28],r10d
 1009dd3:	mov    DWORD PTR [rsp+0x20],0x2
 1009ddb:	call   0x1008c80
 1009de0:	mov    eax,0x1
 1009de5:	add    rsp,0x48
 1009de9:	ret    
 1009dea:	xor    eax,eax
 1009dec:	add    rsp,0x48
 1009df0:	ret    
 1009df1:	int3   
 1009df2:	int3   
 1009df3:	int3   
 1009df4:	int3   
 1009df5:	int3   
 1009df6:	int3   
 1009df7:	int3   
 1009df8:	int3   
 1009df9:	int3   
 1009dfa:	int3   
 1009dfb:	int3   
 1009dfc:	int3   
 1009dfd:	int3   
 1009dfe:	int3   
 1009dff:	int3   
 1009e00:	sub    rsp,0x48
 1009e04:	mov    r10,rcx
 1009e07:	test   rdx,rdx
 1009e0a:	je     0x1009e19
 1009e0c:	cmp    rdx,0xffffffffffffffff
 1009e10:	je     0x1009e19
 1009e12:	xor    eax,eax
 1009e14:	add    rsp,0x48
 1009e18:	ret    
 1009e19:	mov    edx,DWORD PTR [rip+0x98e1]        # 0x1013700
 1009e1f:	cmp    edx,0xffffffff
 1009e22:	je     0x1009e69
 1009e24:	mov    rax,QWORD PTR [r10+0x10]
 1009e28:	mov    ecx,edx
 1009e2a:	imul   rcx,rcx,0x44
 1009e2e:	cmp    DWORD PTR [rcx+rax*1],0x2
 1009e32:	jl     0x1009e69
 1009e34:	mov    rax,QWORD PTR [r10+0x18]
 1009e38:	mov    rcx,QWORD PTR [rax+0x70]
 1009e3c:	cmp    DWORD PTR [rcx+0x24],0x2
 1009e40:	jb     0x1009e69
 1009e42:	cmp    DWORD PTR [rcx],0x0
 1009e45:	je     0x1009e69
 1009e47:	lea    rax,[rip+0xffffffffffff927a]        # 0x10030c8
 1009e4e:	mov    rcx,r10
 1009e51:	mov    QWORD PTR [rsp+0x30],rax
 1009e56:	mov    DWORD PTR [rsp+0x28],edx
 1009e5a:	xor    edx,edx
 1009e5c:	mov    DWORD PTR [rsp+0x20],0x2
 1009e64:	call   0x1008c80
 1009e69:	mov    eax,0x1
 1009e6e:	add    rsp,0x48
 1009e72:	ret    
 1009e73:	int3   
 1009e74:	int3   
 1009e75:	int3   
 1009e76:	int3   
 1009e77:	int3   
 1009e78:	int3   
 1009e79:	int3   
 1009e7a:	int3   
 1009e7b:	int3   
 1009e7c:	int3   
 1009e7d:	int3   
 1009e7e:	int3   
 1009e7f:	int3   
 1009e80:	rex push rbx
 1009e82:	sub    rsp,0x40
 1009e86:	mov    ebx,edx
 1009e88:	test   edx,edx
 1009e8a:	jns    0x1009ee9
 1009e8c:	mov    r11d,DWORD PTR [rip+0x986d]        # 0x1013700
 1009e93:	cmp    r11d,0xffffffff
 1009e97:	je     0x1009ede
 1009e99:	mov    rax,QWORD PTR [rcx+0x10]
 1009e9d:	mov    r10d,r11d
 1009ea0:	imul   r10,r10,0x44
 1009ea4:	cmp    DWORD PTR [r10+rax*1],0x2
 1009ea9:	jl     0x1009ede
 1009eab:	mov    rax,QWORD PTR [rcx+0x18]
 1009eaf:	mov    rdx,QWORD PTR [rax+0x70]
 1009eb3:	cmp    DWORD PTR [rdx+0x24],0x2
 1009eb7:	jb     0x1009ede
 1009eb9:	cmp    DWORD PTR [rdx],0x0
 1009ebc:	je     0x1009ede
 1009ebe:	lea    rax,[rip+0xffffffffffff921b]        # 0x10030e0
 1009ec5:	mov    edx,ebx
 1009ec7:	mov    QWORD PTR [rsp+0x30],rax
 1009ecc:	mov    DWORD PTR [rsp+0x28],r11d
 1009ed1:	mov    DWORD PTR [rsp+0x20],0x2
 1009ed9:	call   0x1008c80
 1009ede:	mov    eax,0x1
 1009ee3:	add    rsp,0x40
 1009ee7:	pop    rbx
 1009ee8:	ret    
 1009ee9:	xor    eax,eax
 1009eeb:	add    rsp,0x40
 1009eef:	pop    rbx
 1009ef0:	ret    
 1009ef1:	int3   
 1009ef2:	int3   
 1009ef3:	int3   
 1009ef4:	int3   
 1009ef5:	int3   
 1009ef6:	int3   
 1009ef7:	int3   
 1009ef8:	int3   
 1009ef9:	int3   
 1009efa:	int3   
 1009efb:	int3   
 1009efc:	int3   
 1009efd:	int3   
 1009efe:	int3   
 1009eff:	int3   
 1009f00:	mov    r8,QWORD PTR [rcx+0x18]
 1009f04:	mov    eax,edx
 1009f06:	lea    rcx,[rax+rax*8]
 1009f0a:	mov    rax,QWORD PTR [r8+0x70]
 1009f0e:	mov    eax,DWORD PTR [rax+rcx*4]
 1009f11:	ret    
 1009f12:	int3   
 1009f13:	int3   
 1009f14:	int3   
 1009f15:	int3   
 1009f16:	int3   
 1009f17:	int3   
 1009f18:	int3   
 1009f19:	int3   
 1009f1a:	int3   
 1009f1b:	int3   
 1009f1c:	int3   
 1009f1d:	int3   
 1009f1e:	int3   
 1009f1f:	int3   
 1009f20:	mov    r9,QWORD PTR [rcx+0x18]
 1009f24:	mov    eax,edx
 1009f26:	not    r8d
 1009f29:	lea    rcx,[rax+rax*8]
 1009f2d:	mov    rax,QWORD PTR [r9+0x70]
 1009f31:	and    DWORD PTR [rax+rcx*4],r8d
 1009f35:	ret    
 1009f36:	int3   
 1009f37:	int3   
 1009f38:	int3   
 1009f39:	int3   
 1009f3a:	int3   
 1009f3b:	int3   
 1009f3c:	int3   
 1009f3d:	int3   
 1009f3e:	int3   
 1009f3f:	int3   
 1009f40:	mov    eax,DWORD PTR [rcx+0x28]
 1009f43:	ret    
 1009f44:	int3   
 1009f45:	int3   
 1009f46:	int3   
 1009f47:	int3   
 1009f48:	int3   
 1009f49:	int3   
 1009f4a:	int3   
 1009f4b:	int3   
 1009f4c:	int3   
 1009f4d:	int3   
 1009f4e:	int3   
 1009f4f:	int3   
 1009f50:	rex push rbx
 1009f52:	sub    rsp,0x20
 1009f56:	mov    eax,DWORD PTR [rip+0xb43c]        # 0x1015398
 1009f5c:	mov    rbx,rdx
 1009f5f:	test   al,0x1
 1009f61:	jne    0x1009f92
 1009f63:	mov    rcx,QWORD PTR [rip+0x976e]        # 0x10136d8
 1009f6a:	or     eax,0x1
 1009f6d:	mov    DWORD PTR [rip+0xb425],eax        # 0x1015398
 1009f73:	call   QWORD PTR [rip+0xffffffffffff72c7]        # 0x1001240
 1009f79:	lea    rdx,[rip+0xffffffffffff9110]        # 0x1003090
 1009f80:	mov    rcx,rax
 1009f83:	call   QWORD PTR [rip+0xffffffffffff72c7]        # 0x1001250
 1009f89:	mov    QWORD PTR [rip+0xb400],rax        # 0x1015390
 1009f90:	jmp    0x1009f99
 1009f92:	mov    rax,QWORD PTR [rip+0xb3f7]        # 0x1015390
 1009f99:	test   rax,rax
 1009f9c:	je     0x1009fb1
 1009f9e:	test   rbx,rbx
 1009fa1:	je     0x1009fa9
 1009fa3:	mov    DWORD PTR [rbx],0x1
 1009fa9:	add    rsp,0x20
 1009fad:	pop    rbx
 1009fae:	rex.W jmp rax
 1009fb1:	test   rbx,rbx
 1009fb4:	je     0x1009fbc
 1009fb6:	mov    DWORD PTR [rbx],0x0
 1009fbc:	xor    eax,eax
 1009fbe:	add    rsp,0x20
 1009fc2:	pop    rbx
 1009fc3:	ret    
 1009fc4:	int3   
 1009fc5:	int3   
 1009fc6:	int3   
 1009fc7:	int3   
 1009fc8:	int3   
 1009fc9:	int3   
 1009fca:	int3   
 1009fcb:	int3   
 1009fcc:	int3   
 1009fcd:	int3   
 1009fce:	int3   
 1009fcf:	int3   
 1009fd0:	rex push rbx
 1009fd2:	sub    rsp,0x190
 1009fd9:	mov    rax,QWORD PTR [rip+0x9170]        # 0x1013150
 1009fe0:	xor    rax,rsp
 1009fe3:	mov    QWORD PTR [rsp+0x180],rax
 1009feb:	mov    rbx,rcx
 1009fee:	lea    rdx,[rsp+0x70]
 1009ff3:	lea    rcx,[rip+0xffffffffffff8cce]        # 0x1002cc8
 1009ffa:	mov    r8d,0x105
 100a000:	call   QWORD PTR [rip+0xffffffffffff7242]        # 0x1001248
 100a006:	test   eax,eax
 100a008:	jne    0x100a01a
 100a00a:	lea    rcx,[rsp+0x70]
 100a00f:	mov    edx,0x105
 100a014:	call   QWORD PTR [rip+0xffffffffffff724e]        # 0x1001268
 100a01a:	cmp    eax,0x104
 100a01f:	jbe    0x100a07c
 100a021:	lea    rdx,[rip+0xffffffffffff8c48]        # 0x1002c70
 100a028:	lea    rcx,[rsp+0x48]
 100a02d:	mov    r9d,0x80070057
 100a033:	mov    r8d,0x103
 100a039:	call   0x10036dc
 100a03e:	lea    rdx,[rip+0x72ab]        # 0x10112f0
 100a045:	mov    rcx,QWORD PTR [rax]
 100a048:	mov    QWORD PTR [rsp+0x20],rcx
 100a04d:	mov    rcx,QWORD PTR [rax+0x8]
 100a051:	mov    QWORD PTR [rsp+0x28],rcx
 100a056:	mov    rcx,QWORD PTR [rax+0x10]
 100a05a:	mov    QWORD PTR [rsp+0x30],rcx
 100a05f:	mov    rcx,QWORD PTR [rax+0x18]
 100a063:	mov    QWORD PTR [rsp+0x38],rcx
 100a068:	mov    rax,QWORD PTR [rax+0x20]
 100a06c:	lea    rcx,[rsp+0x20]
 100a071:	mov    QWORD PTR [rsp+0x40],rax
 100a076:	call   0x1004bf0
 100a07b:	int3   
 100a07c:	cmp    eax,0x1
 100a07f:	jbe    0x100a0d9
 100a081:	cmp    BYTE PTR [rsp+0x71],0x3a
 100a086:	jne    0x100a0d9
 100a088:	mov    edx,0x104
 100a08d:	mov    rcx,rbx
 100a090:	mov    BYTE PTR [rsp+0x72],0x0
 100a095:	call   0x1007ef0
 100a09a:	lea    r8,[rsp+0x70]
 100a09f:	mov    edx,0x2
 100a0a4:	mov    rcx,rbx
 100a0a7:	call   0x1007f40
 100a0ac:	lea    r8,[rip+0xffffffffffff8c25]        # 0x1002cd8
 100a0b3:	mov    edx,0xb
 100a0b8:	mov    rcx,rbx
 100a0bb:	call   0x1008030
 100a0c0:	mov    rcx,QWORD PTR [rsp+0x180]
 100a0c8:	xor    rcx,rsp
 100a0cb:	call   0x1004cb0
 100a0d0:	add    rsp,0x190
 100a0d7:	pop    rbx
 100a0d8:	ret    
 100a0d9:	call   QWORD PTR [rip+0xffffffffffff7239]        # 0x1001318
 100a0df:	test   eax,eax
 100a0e1:	jle    0x100a0eb
 100a0e3:	movzx  eax,ax
 100a0e6:	or     eax,0x80070000
 100a0eb:	lea    rdx,[rip+0xffffffffffff8b7e]        # 0x1002c70
 100a0f2:	lea    rcx,[rsp+0x48]
 100a0f7:	mov    r9d,eax
 100a0fa:	mov    r8d,0x108
 100a100:	call   0x10036dc
 100a105:	lea    rdx,[rip+0x71e4]        # 0x10112f0
 100a10c:	mov    rcx,QWORD PTR [rax]
 100a10f:	mov    QWORD PTR [rsp+0x20],rcx
 100a114:	mov    rcx,QWORD PTR [rax+0x8]
 100a118:	mov    QWORD PTR [rsp+0x28],rcx
 100a11d:	mov    rcx,QWORD PTR [rax+0x10]
 100a121:	mov    QWORD PTR [rsp+0x30],rcx
 100a126:	mov    rcx,QWORD PTR [rax+0x18]
 100a12a:	mov    QWORD PTR [rsp+0x38],rcx
 100a12f:	mov    rax,QWORD PTR [rax+0x20]
 100a133:	lea    rcx,[rsp+0x20]
 100a138:	mov    QWORD PTR [rsp+0x40],rax
 100a13d:	call   0x1004bf0
 100a142:	int3   
 100a143:	int3   
 100a144:	int3   
 100a145:	int3   
 100a146:	int3   
 100a147:	int3   
 100a148:	int3   
 100a149:	int3   
 100a14a:	int3   
 100a14b:	int3   
 100a14c:	int3   
 100a14d:	int3   
 100a14e:	int3   
 100a14f:	int3   
 100a150:	mov    QWORD PTR [rsp+0x10],rbx
 100a155:	push   rdi
 100a156:	sub    rsp,0x190
 100a15d:	mov    rax,QWORD PTR [rip+0x8fec]        # 0x1013150
 100a164:	xor    rax,rsp
 100a167:	mov    QWORD PTR [rsp+0x180],rax
 100a16f:	mov    rdi,rcx
 100a172:	lea    rdx,[rsp+0x70]
 100a177:	mov    r8d,0x104
 100a17d:	xor    ecx,ecx
 100a17f:	call   QWORD PTR [rip+0xffffffffffff70b3]        # 0x1001238
 100a185:	mov    ebx,eax
 100a187:	test   eax,eax
 100a189:	jne    0x100a1f5
 100a18b:	call   QWORD PTR [rip+0xffffffffffff7187]        # 0x1001318
 100a191:	test   eax,eax
 100a193:	jle    0x100a19d
 100a195:	movzx  eax,ax
 100a198:	or     eax,0x80070000
 100a19d:	lea    rdx,[rip+0xffffffffffff8acc]        # 0x1002c70
 100a1a4:	lea    rcx,[rsp+0x48]
 100a1a9:	mov    r9d,eax
 100a1ac:	mov    r8d,0x129
 100a1b2:	call   0x10036dc
 100a1b7:	lea    rdx,[rip+0x7132]        # 0x10112f0
 100a1be:	mov    rcx,QWORD PTR [rax]
 100a1c1:	mov    QWORD PTR [rsp+0x20],rcx
 100a1c6:	mov    rcx,QWORD PTR [rax+0x8]
 100a1ca:	mov    QWORD PTR [rsp+0x28],rcx
 100a1cf:	mov    rcx,QWORD PTR [rax+0x10]
 100a1d3:	mov    QWORD PTR [rsp+0x30],rcx
 100a1d8:	mov    rcx,QWORD PTR [rax+0x18]
 100a1dc:	mov    QWORD PTR [rsp+0x38],rcx
 100a1e1:	mov    rax,QWORD PTR [rax+0x20]
 100a1e5:	lea    rcx,[rsp+0x20]
 100a1ea:	mov    QWORD PTR [rsp+0x40],rax
 100a1ef:	call   0x1004bf0
 100a1f4:	int3   
 100a1f5:	cmp    rbx,0x105
 100a1fc:	jae    0x100a2a5
 100a202:	lea    rcx,[rsp+rbx*1+0x6c]
 100a207:	lea    rdx,[rip+0xffffffffffff8ad6]        # 0x1002ce4
 100a20e:	mov    BYTE PTR [rsp+rbx*1+0x70],0x0
 100a213:	call   QWORD PTR [rip+0xffffffffffff7147]        # 0x1001360
 100a219:	test   eax,eax
 100a21b:	jne    0x100a22c
 100a21d:	lea    eax,[rbx-0x4]
 100a220:	cmp    eax,0x105
 100a225:	jae    0x100a268
 100a227:	mov    BYTE PTR [rsp+rax*1+0x70],0x0
 100a22c:	lea    rcx,[rsp+0x70]
 100a231:	mov    edx,0x5c
 100a236:	call   QWORD PTR [rip+0xffffffffffff7234]        # 0x1001470
 100a23c:	lea    r8,[rax+0x1]
 100a240:	test   rax,rax
 100a243:	jne    0x100a24a
 100a245:	lea    r8,[rsp+0x70]
 100a24a:	or     rax,0xffffffffffffffff
 100a24e:	mov    rcx,rax
 100a251:	inc    rcx
 100a254:	cmp    BYTE PTR [r8+rcx*1],0x0
 100a259:	jne    0x100a251
 100a25b:	cmp    rcx,0x20
 100a25f:	jbe    0x100a270
 100a261:	mov    eax,0x20
 100a266:	jmp    0x100a27a
 100a268:	xor    ecx,ecx
 100a26a:	call   0x1004aa0
 100a26f:	int3   
 100a270:	inc    rax
 100a273:	cmp    BYTE PTR [r8+rax*1],0x0
 100a278:	jne    0x100a270
 100a27a:	mov    edx,eax
 100a27c:	mov    rcx,rdi
 100a27f:	call   0x1007f40
 100a284:	mov    rcx,QWORD PTR [rsp+0x180]
 100a28c:	xor    rcx,rsp
 100a28f:	call   0x1004cb0
 100a294:	mov    rbx,QWORD PTR [rsp+0x1a8]
 100a29c:	add    rsp,0x190
 100a2a3:	pop    rdi
 100a2a4:	ret    
 100a2a5:	xor    ecx,ecx
 100a2a7:	call   0x1004aa0
 100a2ac:	int3   
 100a2ad:	int3   
 100a2ae:	int3   
 100a2af:	int3   
 100a2b0:	int3   
 100a2b1:	int3   
 100a2b2:	int3   
 100a2b3:	int3   
 100a2b4:	int3   
 100a2b5:	int3   
 100a2b6:	int3   
 100a2b7:	int3   
 100a2b8:	int3   
 100a2b9:	int3   
 100a2ba:	int3   
 100a2bb:	int3   
 100a2bc:	int3   
 100a2bd:	int3   
 100a2be:	int3   
 100a2bf:	int3   
 100a2c0:	mov    rax,rsp
 100a2c3:	push   rbp
 100a2c4:	lea    rbp,[rax-0x38]
 100a2c8:	sub    rsp,0x130
 100a2cf:	mov    QWORD PTR [rsp+0x78],0xfffffffffffffffe
 100a2d8:	mov    QWORD PTR [rax+0x8],rbx
 100a2dc:	mov    QWORD PTR [rax+0x10],rdi
 100a2e0:	mov    ebx,edx
 100a2e2:	mov    rdi,rcx
 100a2e5:	lea    rcx,[rbp-0x80]
 100a2e9:	call   0x10085d0
 100a2ee:	nop
 100a2ef:	test   ebx,ebx
 100a2f1:	jne    0x100a3b8
 100a2f7:	lea    rax,[rip+0xffffffffffff883a]        # 0x1002b38
 100a2fe:	mov    QWORD PTR [rsp+0x68],rax
 100a303:	xor    eax,eax
 100a305:	mov    QWORD PTR [rsp+0x70],rax
 100a30a:	mov    QWORD PTR [rsp+0x30],rax
 100a30f:	mov    DWORD PTR [rsp+0x28],0x2000000
 100a317:	mov    DWORD PTR [rsp+0x20],0x3
 100a31f:	lea    r9,[rbp-0x18]
 100a323:	xor    r8d,r8d
 100a326:	xor    edx,edx
 100a328:	mov    rcx,rdi
 100a32b:	call   QWORD PTR [rip+0xffffffffffff6f47]        # 0x1001278
 100a331:	test   rax,rax
 100a334:	je     0x100a34f
 100a336:	mov    QWORD PTR [rsp+0x70],rax
 100a33b:	cmp    rax,0xffffffffffffffff
 100a33f:	je     0x100a34f
 100a341:	mov    rcx,rax
 100a344:	call   QWORD PTR [rip+0xffffffffffff6e4e]        # 0x1001198
 100a34a:	jmp    0x100a439
 100a34f:	call   QWORD PTR [rip+0xffffffffffff6fc3]        # 0x1001318
 100a355:	test   eax,eax
 100a357:	jle    0x100a361
 100a359:	movzx  eax,ax
 100a35c:	or     eax,0x80070000
 100a361:	mov    r9d,eax
 100a364:	mov    r8d,0x160
 100a36a:	lea    rdx,[rip+0xffffffffffff88ff]        # 0x1002c70
 100a371:	lea    rcx,[rbp+0x0]
 100a375:	call   0x10036dc
 100a37a:	mov    rcx,QWORD PTR [rax]
 100a37d:	mov    QWORD PTR [rsp+0x40],rcx
 100a382:	mov    rcx,QWORD PTR [rax+0x8]
 100a386:	mov    QWORD PTR [rsp+0x48],rcx
 100a38b:	mov    rcx,QWORD PTR [rax+0x10]
 100a38f:	mov    QWORD PTR [rsp+0x50],rcx
 100a394:	mov    rcx,QWORD PTR [rax+0x18]
 100a398:	mov    QWORD PTR [rsp+0x58],rcx
 100a39d:	mov    rax,QWORD PTR [rax+0x20]
 100a3a1:	mov    QWORD PTR [rsp+0x60],rax
 100a3a6:	lea    rdx,[rip+0x6f43]        # 0x10112f0
 100a3ad:	lea    rcx,[rsp+0x40]
 100a3b2:	call   0x1004bf0
 100a3b7:	nop
 100a3b8:	lea    rdx,[rbp-0x18]
 100a3bc:	mov    rcx,rdi
 100a3bf:	call   QWORD PTR [rip+0xffffffffffff6eab]        # 0x1001270
 100a3c5:	test   eax,eax
 100a3c7:	jne    0x100a439
 100a3c9:	call   QWORD PTR [rip+0xffffffffffff6f49]        # 0x1001318
 100a3cf:	cmp    eax,0xb7
 100a3d4:	je     0x100a439
 100a3d6:	test   eax,eax
 100a3d8:	jle    0x100a3e2
 100a3da:	movzx  eax,ax
 100a3dd:	or     eax,0x80070000
 100a3e2:	mov    r9d,eax
 100a3e5:	mov    r8d,0x16a
 100a3eb:	lea    rdx,[rip+0xffffffffffff887e]        # 0x1002c70
 100a3f2:	lea    rcx,[rbp+0x0]
 100a3f6:	call   0x10036dc
 100a3fb:	mov    rcx,QWORD PTR [rax]
 100a3fe:	mov    QWORD PTR [rsp+0x40],rcx
 100a403:	mov    rcx,QWORD PTR [rax+0x8]
 100a407:	mov    QWORD PTR [rsp+0x48],rcx
 100a40c:	mov    rcx,QWORD PTR [rax+0x10]
 100a410:	mov    QWORD PTR [rsp+0x50],rcx
 100a415:	mov    rcx,QWORD PTR [rax+0x18]
 100a419:	mov    QWORD PTR [rsp+0x58],rcx
 100a41e:	mov    rax,QWORD PTR [rax+0x20]
 100a422:	mov    QWORD PTR [rsp+0x60],rax
 100a427:	lea    rdx,[rip+0x6ec2]        # 0x10112f0
 100a42e:	lea    rcx,[rsp+0x40]
 100a433:	call   0x1004bf0
 100a438:	nop
 100a439:	lea    rcx,[rbp-0x20]
 100a43d:	call   0x100d1a0
 100a442:	nop
 100a443:	lea    rcx,[rbp-0x28]
 100a447:	call   0x100d1a0
 100a44c:	nop
 100a44d:	mov    rcx,QWORD PTR [rbp-0x30]
 100a451:	call   0x10049c8
 100a456:	nop
 100a457:	lea    rcx,[rbp-0x38]
 100a45b:	call   0x100d1a0
 100a460:	nop
 100a461:	mov    rcx,QWORD PTR [rbp-0x40]
 100a465:	call   0x10049c8
 100a46a:	mov    rcx,QWORD PTR [rbp-0x48]
 100a46e:	call   0x10049c8
 100a473:	lea    rcx,[rbp-0x50]
 100a477:	call   0x100d1a0
 100a47c:	nop
 100a47d:	lea    rcx,[rbp-0x58]
 100a481:	call   0x100d1a0
 100a486:	lea    r11,[rsp+0x130]
 100a48e:	mov    rbx,QWORD PTR [r11+0x10]
 100a492:	mov    rdi,QWORD PTR [r11+0x18]
 100a496:	mov    rsp,r11
 100a499:	pop    rbp
 100a49a:	ret    
 100a49b:	int3   
 100a49c:	int3   
 100a49d:	int3   
 100a49e:	int3   
 100a49f:	int3   
 100a4a0:	int3   
 100a4a1:	int3   
 100a4a2:	int3   
 100a4a3:	int3   
 100a4a4:	int3   
 100a4a5:	int3   
 100a4a6:	int3   
 100a4a7:	int3   
 100a4a8:	int3   
 100a4a9:	int3   
 100a4aa:	int3   
 100a4ab:	int3   
 100a4ac:	int3   
 100a4ad:	int3   
 100a4ae:	int3   
 100a4af:	int3   
 100a4b0:	sub    rsp,0x48
 100a4b4:	cmp    r8d,0x1
 100a4b8:	jbe    0x100a4ec
 100a4ba:	lea    eax,[r8-0x1]
 100a4be:	mov    QWORD PTR [rsp+0x30],0x0
 100a4c7:	movzx  r8d,cx
 100a4cb:	mov    DWORD PTR [rsp+0x28],eax
 100a4cf:	mov    QWORD PTR [rsp+0x20],rdx
 100a4d4:	mov    r9d,0x400
 100a4da:	xor    edx,edx
 100a4dc:	mov    ecx,0x1000
 100a4e1:	call   QWORD PTR [rip+0xffffffffffff6d21]        # 0x1001208
 100a4e7:	add    rsp,0x48
 100a4eb:	ret    
 100a4ec:	xor    eax,eax
 100a4ee:	add    rsp,0x48
 100a4f2:	ret    
 100a4f3:	int3   
 100a4f4:	int3   
 100a4f5:	int3   
 100a4f6:	int3   
 100a4f7:	int3   
 100a4f8:	int3   
 100a4f9:	int3   
 100a4fa:	int3   
 100a4fb:	int3   
 100a4fc:	int3   
 100a4fd:	int3   
 100a4fe:	int3   
 100a4ff:	int3   
 100a500:	sub    rsp,0x48
 100a504:	cmp    r8d,0x1
 100a508:	jbe    0x100a53c
 100a50a:	lea    eax,[r8-0x1]
 100a50e:	mov    QWORD PTR [rsp+0x30],0x0
 100a517:	movzx  r8d,cx
 100a51b:	mov    DWORD PTR [rsp+0x28],eax
 100a51f:	mov    QWORD PTR [rsp+0x20],rdx
 100a524:	mov    r9d,0x400
 100a52a:	xor    edx,edx
 100a52c:	mov    ecx,0x1000
 100a531:	call   QWORD PTR [rip+0xffffffffffff6ca1]        # 0x10011d8
 100a537:	add    rsp,0x48
 100a53b:	ret    
 100a53c:	xor    eax,eax
 100a53e:	add    rsp,0x48
 100a542:	ret    
 100a543:	int3   
 100a544:	int3   
 100a545:	int3   
 100a546:	int3   
 100a547:	int3   
 100a548:	int3   
 100a549:	int3   
 100a54a:	int3   
 100a54b:	int3   
 100a54c:	int3   
 100a54d:	int3   
 100a54e:	int3   
 100a54f:	int3   
 100a550:	rex push rbx
 100a552:	push   rsi
 100a553:	push   r12
 100a555:	push   r13
 100a557:	push   r14
 100a559:	push   r15
 100a55b:	sub    rsp,0xa8
 100a562:	mov    rax,QWORD PTR [rip+0x8be7]        # 0x1013150
 100a569:	xor    rax,rsp
 100a56c:	mov    QWORD PTR [rsp+0x80],rax
 100a574:	mov    r14,QWORD PTR [rsp+0x118]
 100a57c:	mov    ebx,DWORD PTR [rsp+0x108]
 100a583:	mov    r15,QWORD PTR [rsp+0x110]
 100a58b:	mov    DWORD PTR [r14],0x0
 100a592:	cmp    QWORD PTR [rcx+0x18],0x0
 100a597:	mov    DWORD PTR [rsp+0x64],r9d
 100a59c:	mov    rsi,r8
 100a59f:	mov    QWORD PTR [rsp+0x68],r8
 100a5a4:	mov    r12d,edx
 100a5a7:	mov    r13,rcx
 100a5aa:	mov    DWORD PTR [rsp+0x60],ebx
 100a5ae:	je     0x100a9cd
 100a5b4:	lea    rcx,[rsp+0x70]
 100a5b9:	mov    QWORD PTR [rsp+0xa0],rbp
 100a5c1:	call   QWORD PTR [rip+0xffffffffffff6c39]        # 0x1001200
 100a5c7:	movsxd rbp,DWORD PTR [rsp+0x120]
 100a5cf:	lea    r8,[rip+0xffffffffffff8882]        # 0x1002e58
 100a5d6:	mov    rdx,rbp
 100a5d9:	mov    r9d,0x8
 100a5df:	mov    rcx,r15
 100a5e2:	call   QWORD PTR [rip+0xffffffffffff6d88]        # 0x1001370
 100a5e8:	mov    DWORD PTR [r14],0x4
 100a5ef:	mov    r8,QWORD PTR [r13+0x18]
 100a5f3:	mov    rax,QWORD PTR [r8+0x70]
 100a5f7:	cmp    DWORD PTR [rax+0x90],0x0
 100a5fe:	je     0x100a637
 100a600:	mov    r8,QWORD PTR [r8+0x40]
 100a604:	lea    eax,[rbp-0x4]
 100a607:	lea    rcx,[r15+0x8]
 100a60b:	movsxd rdx,eax
 100a60e:	mov    QWORD PTR [rsp+0x20],r8
 100a613:	lea    r9,[rip+0xffffffffffff884e]        # 0x1002e68
 100a61a:	mov    r8,rdx
 100a61d:	call   QWORD PTR [rip+0xffffffffffff6d85]        # 0x10013a8
 100a623:	test   eax,eax
 100a625:	jle    0x100a637
 100a627:	mov    edx,DWORD PTR [r14]
 100a62a:	mov    ecx,ebp
 100a62c:	sub    ecx,edx
 100a62e:	cmp    eax,ecx
 100a630:	jg     0x100a637
 100a632:	add    eax,edx
 100a634:	mov    DWORD PTR [r14],eax
 100a637:	mov    rax,QWORD PTR [r13+0x18]
 100a63b:	mov    QWORD PTR [rsp+0x98],rdi
 100a643:	mov    rcx,QWORD PTR [rax+0x70]
 100a647:	cmp    DWORD PTR [rcx+0xb4],0x0
 100a64e:	je     0x100a6d9
 100a654:	movsxd rcx,DWORD PTR [r14]
 100a657:	movzx  r8d,WORD PTR [rsp+0x7e]
 100a65d:	movzx  r9d,WORD PTR [rsp+0x7c]
 100a663:	movzx  edx,WORD PTR [rsp+0x76]
 100a668:	movzx  r10d,WORD PTR [rsp+0x7a]
 100a66e:	movzx  r11d,WORD PTR [rsp+0x78]
 100a674:	movzx  ebx,WORD PTR [rsp+0x72]
 100a679:	movzx  edi,WORD PTR [rsp+0x70]
 100a67e:	mov    DWORD PTR [rsp+0x50],r8d
 100a683:	mov    DWORD PTR [rsp+0x48],r9d
 100a688:	mov    DWORD PTR [rsp+0x40],r10d
 100a68d:	mov    DWORD PTR [rsp+0x38],r11d
 100a692:	mov    DWORD PTR [rsp+0x30],edx
 100a696:	mov    eax,ebp
 100a698:	lea    r9,[rip+0xffffffffffff87f1]        # 0x1002e90
 100a69f:	sub    eax,ecx
 100a6a1:	lea    rcx,[r15+rcx*2]
 100a6a5:	mov    DWORD PTR [rsp+0x28],ebx
 100a6a9:	movsxd rsi,eax
 100a6ac:	mov    DWORD PTR [rsp+0x20],edi
 100a6b0:	mov    r8,rsi
 100a6b3:	mov    rdx,rsi
 100a6b6:	call   QWORD PTR [rip+0xffffffffffff6cec]        # 0x10013a8
 100a6bc:	mov    ebx,DWORD PTR [rsp+0x60]
 100a6c0:	mov    rsi,QWORD PTR [rsp+0x68]
 100a6c5:	test   eax,eax
 100a6c7:	jle    0x100a6d9
 100a6c9:	mov    edx,DWORD PTR [r14]
 100a6cc:	mov    ecx,ebp
 100a6ce:	sub    ecx,edx
 100a6d0:	cmp    eax,ecx
 100a6d2:	jg     0x100a6d9
 100a6d4:	add    eax,edx
 100a6d6:	mov    DWORD PTR [r14],eax
 100a6d9:	mov    rax,QWORD PTR [r13+0x18]
 100a6dd:	mov    rcx,QWORD PTR [rax+0x70]
 100a6e1:	cmp    DWORD PTR [rcx+0xfc],0x0
 100a6e8:	je     0x100a727
 100a6ea:	movsxd rcx,DWORD PTR [r14]
 100a6ed:	mov    eax,ebp
 100a6ef:	lea    r9,[rip+0xffffffffffff87f2]        # 0x1002ee8
 100a6f6:	sub    eax,ecx
 100a6f8:	lea    rcx,[r15+rcx*2]
 100a6fc:	movsxd rdx,eax
 100a6ff:	mov    eax,DWORD PTR [rsp+0x100]
 100a706:	mov    r8,rdx
 100a709:	mov    DWORD PTR [rsp+0x20],eax
 100a70d:	call   QWORD PTR [rip+0xffffffffffff6c95]        # 0x10013a8
 100a713:	test   eax,eax
 100a715:	jle    0x100a727
 100a717:	mov    edx,DWORD PTR [r14]
 100a71a:	mov    ecx,ebp
 100a71c:	sub    ecx,edx
 100a71e:	cmp    eax,ecx
 100a720:	jg     0x100a727
 100a722:	add    eax,edx
 100a724:	mov    DWORD PTR [r14],eax
 100a727:	mov    rax,QWORD PTR [r13+0x18]
 100a72b:	mov    rcx,QWORD PTR [rax+0x70]
 100a72f:	cmp    DWORD PTR [rcx+0x120],0x0
 100a736:	je     0x100a76e
 100a738:	movsxd rcx,DWORD PTR [r14]
 100a73b:	mov    eax,ebp
 100a73d:	lea    r9,[rip+0xffffffffffff87bc]        # 0x1002f00
 100a744:	sub    eax,ecx
 100a746:	lea    rcx,[r15+rcx*2]
 100a74a:	mov    DWORD PTR [rsp+0x20],ebx
 100a74e:	movsxd rdx,eax
 100a751:	mov    r8,rdx
 100a754:	call   QWORD PTR [rip+0xffffffffffff6c4e]        # 0x10013a8
 100a75a:	test   eax,eax
 100a75c:	jle    0x100a76e
 100a75e:	mov    edx,DWORD PTR [r14]
 100a761:	mov    ecx,ebp
 100a763:	sub    ecx,edx
 100a765:	cmp    eax,ecx
 100a767:	jg     0x100a76e
 100a769:	add    eax,edx
 100a76b:	mov    DWORD PTR [r14],eax
 100a76e:	mov    rax,QWORD PTR [r13+0x18]
 100a772:	mov    rcx,QWORD PTR [rax+0x70]
 100a776:	cmp    DWORD PTR [rcx+0x144],0x0
 100a77d:	je     0x100a7c8
 100a77f:	movsxd r9,DWORD PTR [r14]
 100a782:	mov    r8,QWORD PTR [r13+0x10]
 100a786:	mov    eax,ebp
 100a788:	add    r8,0x4
 100a78c:	sub    eax,r9d
 100a78f:	mov    ecx,ebx
 100a791:	movsxd rdx,eax
 100a794:	imul   rcx,rcx,0x44
 100a798:	add    r8,rcx
 100a79b:	lea    rcx,[r15+r9*2]
 100a79f:	mov    QWORD PTR [rsp+0x20],r8
 100a7a4:	lea    r9,[rip+0xffffffffffff8775]        # 0x1002f20
 100a7ab:	mov    r8,rdx
 100a7ae:	call   QWORD PTR [rip+0xffffffffffff6bf4]        # 0x10013a8
 100a7b4:	test   eax,eax
 100a7b6:	jle    0x100a7c8
 100a7b8:	mov    edx,DWORD PTR [r14]
 100a7bb:	mov    ecx,ebp
 100a7bd:	sub    ecx,edx
 100a7bf:	cmp    eax,ecx
 100a7c1:	jg     0x100a7c8
 100a7c3:	add    eax,edx
 100a7c5:	mov    DWORD PTR [r14],eax
 100a7c8:	mov    rax,QWORD PTR [r13+0x18]
 100a7cc:	mov    rcx,QWORD PTR [rax+0x70]
 100a7d0:	cmp    DWORD PTR [rcx+0x168],0x0
 100a7d7:	je     0x100a818
 100a7d9:	movsxd rbx,DWORD PTR [r14]
 100a7dc:	mov    eax,ebp
 100a7de:	sub    eax,ebx
 100a7e0:	movsxd rdi,eax
 100a7e3:	call   QWORD PTR [rip+0xffffffffffff6957]        # 0x1001140
 100a7e9:	lea    rcx,[r15+rbx*2]
 100a7ed:	lea    r9,[rip+0xffffffffffff874c]        # 0x1002f40
 100a7f4:	mov    r8,rdi
 100a7f7:	mov    rdx,rdi
 100a7fa:	mov    DWORD PTR [rsp+0x20],eax
 100a7fe:	call   QWORD PTR [rip+0xffffffffffff6ba4]        # 0x10013a8
 100a804:	test   eax,eax
 100a806:	jle    0x100a818
 100a808:	mov    edx,DWORD PTR [r14]
 100a80b:	mov    ecx,ebp
 100a80d:	sub    ecx,edx
 100a80f:	cmp    eax,ecx
 100a811:	jg     0x100a818
 100a813:	add    eax,edx
 100a815:	mov    DWORD PTR [r14],eax
 100a818:	mov    rax,QWORD PTR [r13+0x18]
 100a81c:	mov    rcx,QWORD PTR [rax+0x70]
 100a820:	cmp    DWORD PTR [rcx+0xd8],0x0
 100a827:	je     0x100a868
 100a829:	movsxd rbx,DWORD PTR [r14]
 100a82c:	mov    eax,ebp
 100a82e:	sub    eax,ebx
 100a830:	movsxd rdi,eax
 100a833:	call   QWORD PTR [rip+0xffffffffffff6897]        # 0x10010d0
 100a839:	lea    rcx,[r15+rbx*2]
 100a83d:	lea    r9,[rip+0xffffffffffff8714]        # 0x1002f58
 100a844:	mov    r8,rdi
 100a847:	mov    rdx,rdi
 100a84a:	mov    DWORD PTR [rsp+0x20],eax
 100a84e:	call   QWORD PTR [rip+0xffffffffffff6b54]        # 0x10013a8
 100a854:	test   eax,eax
 100a856:	jle    0x100a868
 100a858:	mov    edx,DWORD PTR [r14]
 100a85b:	mov    ecx,ebp
 100a85d:	sub    ecx,edx
 100a85f:	cmp    eax,ecx
 100a861:	jg     0x100a868
 100a863:	add    eax,edx
 100a865:	mov    DWORD PTR [r14],eax
 100a868:	movsxd rcx,DWORD PTR [r14]
 100a86b:	mov    rdi,QWORD PTR [rsp+0x98]
 100a873:	lea    eax,[rcx+0x3]
 100a876:	cmp    eax,ebp
 100a878:	jge    0x100a89f
 100a87a:	mov    eax,ebp
 100a87c:	lea    r8,[rip+0xffffffffffff86ed]        # 0x1002f70
 100a883:	mov    r9d,0x6
 100a889:	sub    eax,ecx
 100a88b:	lea    rcx,[r15+rcx*2]
 100a88f:	movsxd rdx,eax
 100a892:	add    rdx,rdx
 100a895:	call   QWORD PTR [rip+0xffffffffffff6ad5]        # 0x1001370
 100a89b:	add    DWORD PTR [r14],0x3
 100a89f:	test   r12d,r12d
 100a8a2:	jne    0x100a8b6
 100a8a4:	mov    rax,QWORD PTR [r13+0x18]
 100a8a8:	mov    rcx,QWORD PTR [rax+0x70]
 100a8ac:	cmp    DWORD PTR [rcx+0x6c],r12d
 100a8b0:	je     0x100a995
 100a8b6:	test   rsi,rsi
 100a8b9:	je     0x100a8fa
 100a8bb:	movsxd rcx,DWORD PTR [r14]
 100a8be:	mov    eax,ebp
 100a8c0:	lea    r9,[rip+0xffffffffffff86b1]        # 0x1002f78
 100a8c7:	sub    eax,ecx
 100a8c9:	lea    rcx,[r15+rcx*2]
 100a8cd:	movsxd rdx,eax
 100a8d0:	mov    eax,DWORD PTR [rsp+0x64]
 100a8d4:	mov    DWORD PTR [rsp+0x28],eax
 100a8d8:	mov    r8,rdx
 100a8db:	mov    QWORD PTR [rsp+0x20],rsi
 100a8e0:	call   QWORD PTR [rip+0xffffffffffff6ac2]        # 0x10013a8
 100a8e6:	test   eax,eax
 100a8e8:	jle    0x100a8fa
 100a8ea:	mov    edx,DWORD PTR [r14]
 100a8ed:	mov    ecx,ebp
 100a8ef:	sub    ecx,edx
 100a8f1:	cmp    eax,ecx
 100a8f3:	jg     0x100a8fa
 100a8f5:	add    eax,edx
 100a8f7:	mov    DWORD PTR [r14],eax
 100a8fa:	test   r12d,r12d
 100a8fd:	je     0x100a995
 100a903:	movsxd rcx,DWORD PTR [r14]
 100a906:	mov    eax,ebp
 100a908:	lea    r9,[rip+0xffffffffffff86a1]        # 0x1002fb0
 100a90f:	sub    eax,ecx
 100a911:	lea    rcx,[r15+rcx*2]
 100a915:	mov    DWORD PTR [rsp+0x20],r12d
 100a91a:	movsxd rdx,eax
 100a91d:	mov    r8,rdx
 100a920:	call   QWORD PTR [rip+0xffffffffffff6a82]        # 0x10013a8
 100a926:	test   eax,eax
 100a928:	jle    0x100a93a
 100a92a:	mov    edx,DWORD PTR [r14]
 100a92d:	mov    ecx,ebp
 100a92f:	sub    ecx,edx
 100a931:	cmp    eax,ecx
 100a933:	jg     0x100a93a
 100a935:	add    eax,edx
 100a937:	mov    DWORD PTR [r14],eax
 100a93a:	movsxd rax,DWORD PTR [r14]
 100a93d:	cmp    eax,ebp
 100a93f:	jge    0x100a963
 100a941:	mov    r8d,ebp
 100a944:	lea    rdx,[r15+rax*2]
 100a948:	mov    ecx,r12d
 100a94b:	sub    r8d,eax
 100a94e:	call   0x100a500
 100a953:	mov    edx,DWORD PTR [r14]
 100a956:	mov    ecx,ebp
 100a958:	sub    ecx,edx
 100a95a:	cmp    eax,ecx
 100a95c:	jg     0x100a963
 100a95e:	add    eax,edx
 100a960:	mov    DWORD PTR [r14],eax
 100a963:	movsxd rcx,DWORD PTR [r14]
 100a966:	mov    eax,ebp
 100a968:	lea    r9,[rip+0xffffffffffff8669]        # 0x1002fd8
 100a96f:	sub    eax,ecx
 100a971:	lea    rcx,[r15+rcx*2]
 100a975:	movsxd rdx,eax
 100a978:	mov    r8,rdx
 100a97b:	call   QWORD PTR [rip+0xffffffffffff6a27]        # 0x10013a8
 100a981:	test   eax,eax
 100a983:	jle    0x100a995
 100a985:	mov    edx,DWORD PTR [r14]
 100a988:	mov    ecx,ebp
 100a98a:	sub    ecx,edx
 100a98c:	cmp    eax,ecx
 100a98e:	jg     0x100a995
 100a990:	add    eax,edx
 100a992:	mov    DWORD PTR [r14],eax
 100a995:	movsxd rcx,DWORD PTR [r14]
 100a998:	mov    eax,ebp
 100a99a:	lea    r9,[rip+0xffffffffffff864f]        # 0x1002ff0
 100a9a1:	sub    eax,ecx
 100a9a3:	lea    rcx,[r15+rcx*2]
 100a9a7:	movsxd rdx,eax
 100a9aa:	mov    r8,rdx
 100a9ad:	call   QWORD PTR [rip+0xffffffffffff69f5]        # 0x10013a8
 100a9b3:	test   eax,eax
 100a9b5:	jle    0x100a9c5
 100a9b7:	mov    ecx,DWORD PTR [r14]
 100a9ba:	sub    ebp,ecx
 100a9bc:	cmp    eax,ebp
 100a9be:	jg     0x100a9c5
 100a9c0:	add    eax,ecx
 100a9c2:	mov    DWORD PTR [r14],eax
 100a9c5:	mov    rbp,QWORD PTR [rsp+0xa0]
 100a9cd:	mov    rcx,QWORD PTR [rsp+0x80]
 100a9d5:	xor    rcx,rsp
 100a9d8:	call   0x1004cb0
 100a9dd:	add    rsp,0xa8
 100a9e4:	pop    r15
 100a9e6:	pop    r14
 100a9e8:	pop    r13
 100a9ea:	pop    r12
 100a9ec:	pop    rsi
 100a9ed:	pop    rbx
 100a9ee:	ret    
 100a9ef:	int3   
 100a9f0:	int3   
 100a9f1:	int3   
 100a9f2:	int3   
 100a9f3:	int3   
 100a9f4:	int3   
 100a9f5:	int3   
 100a9f6:	int3   
 100a9f7:	int3   
 100a9f8:	int3   
 100a9f9:	int3   
 100a9fa:	int3   
 100a9fb:	int3   
 100a9fc:	int3   
 100a9fd:	int3   
 100a9fe:	int3   
 100a9ff:	int3   
 100aa00:	mov    QWORD PTR [rsp+0x8],rbx
 100aa05:	mov    QWORD PTR [rsp+0x10],rsi
 100aa0a:	push   rdi
 100aa0b:	sub    rsp,0x20
 100aa0f:	mov    rdi,QWORD PTR [rcx+0x20]
 100aa13:	xor    esi,esi
 100aa15:	mov    rbx,rcx
 100aa18:	mov    DWORD PTR [rcx],esi
 100aa1a:	test   rdi,rdi
 100aa1d:	je     0x100aa33
 100aa1f:	mov    rcx,rdi
 100aa22:	call   0x100c2c0
 100aa27:	mov    rcx,rdi
 100aa2a:	call   0x10049c8
 100aa2f:	mov    QWORD PTR [rbx+0x20],rsi
 100aa33:	mov    rdi,QWORD PTR [rbx+0x18]
 100aa37:	test   rdi,rdi
 100aa3a:	je     0x100aa50
 100aa3c:	mov    rcx,rdi
 100aa3f:	call   0x100b320
 100aa44:	mov    rcx,rdi
 100aa47:	call   0x10049c8
 100aa4c:	mov    QWORD PTR [rbx+0x18],rsi
 100aa50:	mov    QWORD PTR [rbx+0x10],rsi
 100aa54:	mov    rcx,QWORD PTR [rbx+0x8]
 100aa58:	test   rcx,rcx
 100aa5b:	je     0x100aa67
 100aa5d:	call   QWORD PTR [rip+0xffffffffffff6735]        # 0x1001198
 100aa63:	mov    QWORD PTR [rbx+0x8],rsi
 100aa67:	mov    rbx,QWORD PTR [rsp+0x30]
 100aa6c:	mov    rsi,QWORD PTR [rsp+0x38]
 100aa71:	add    rsp,0x20
 100aa75:	pop    rdi
 100aa76:	ret    
 100aa77:	int3   
 100aa78:	int3   
 100aa79:	int3   
 100aa7a:	int3   
 100aa7b:	int3   
 100aa7c:	int3   
 100aa7d:	int3   
 100aa7e:	int3   
 100aa7f:	int3   
 100aa80:	mov    rax,QWORD PTR [rdx]
 100aa83:	mov    QWORD PTR [rcx],rax
 100aa86:	mov    rax,QWORD PTR [rdx+0x8]
 100aa8a:	mov    QWORD PTR [rcx+0x8],rax
 100aa8e:	mov    rax,QWORD PTR [rdx+0x10]
 100aa92:	mov    QWORD PTR [rcx+0x10],rax
 100aa96:	mov    rax,QWORD PTR [rdx+0x18]
 100aa9a:	mov    QWORD PTR [rcx+0x18],rax
 100aa9e:	mov    rax,QWORD PTR [rdx+0x20]
 100aaa2:	mov    QWORD PTR [rcx+0x20],rax
 100aaa6:	mov    rax,QWORD PTR [rdx+0x28]
 100aaaa:	mov    QWORD PTR [rcx+0x28],rax
 100aaae:	mov    rax,rcx
 100aab1:	ret    
 100aab2:	int3   
 100aab3:	int3   
 100aab4:	int3   
 100aab5:	int3   
 100aab6:	int3   
 100aab7:	int3   
 100aab8:	int3   
 100aab9:	int3   
 100aaba:	int3   
 100aabb:	int3   
 100aabc:	int3   
 100aabd:	int3   
 100aabe:	int3   
 100aabf:	int3   
 100aac0:	mov    QWORD PTR [rcx],r8
 100aac3:	mov    DWORD PTR [rcx+0x8],r9d
 100aac7:	mov    QWORD PTR [rcx+0x10],rdx
 100aacb:	mov    rax,rcx
 100aace:	ret    
 100aacf:	int3   
 100aad0:	int3   
 100aad1:	int3   
 100aad2:	int3   
 100aad3:	int3   
 100aad4:	int3   
 100aad5:	int3   
 100aad6:	int3   
 100aad7:	int3   
 100aad8:	int3   
 100aad9:	int3   
 100aada:	int3   
 100aadb:	int3   
 100aadc:	int3   
 100aadd:	int3   
 100aade:	int3   
 100aadf:	int3   
 100aae0:	mov    QWORD PTR [rsp+0x20],r9
 100aae5:	push   rbx
 100aae6:	push   rsi
 100aae7:	push   rdi
 100aae8:	sub    rsp,0x40
 100aaec:	mov    rsi,rcx
 100aaef:	mov    rcx,QWORD PTR [rip+0x8bea]        # 0x10136e0
 100aaf6:	mov    rbx,r8
 100aaf9:	cmp    DWORD PTR [rcx],0x0
 100aafc:	mov    edi,edx
 100aafe:	je     0x100ab88
 100ab04:	mov    r10d,DWORD PTR [r8]
 100ab07:	cmp    r10d,0xffffffff
 100ab0b:	jne    0x100ab28
 100ab0d:	mov    rdx,QWORD PTR [rbx+0x8]
 100ab11:	mov    rcx,QWORD PTR [rcx+0x18]
 100ab15:	call   0x100b680
 100ab1a:	mov    r10d,DWORD PTR [rbx]
 100ab1d:	cmp    r10d,0xffffffff
 100ab21:	je     0x100ab88
 100ab23:	mov    r9,QWORD PTR [rsp+0x78]
 100ab28:	mov    r11,QWORD PTR [rsi+0x10]
 100ab2c:	mov    ecx,r10d
 100ab2f:	mov    rax,QWORD PTR [r11+0x10]
 100ab33:	imul   rcx,rcx,0x44
 100ab37:	cmp    DWORD PTR [rcx+rax*1],edi
 100ab3a:	jl     0x100ab88
 100ab3c:	mov    rax,QWORD PTR [r11+0x18]
 100ab40:	mov    rcx,QWORD PTR [rax+0x70]
 100ab44:	cmp    DWORD PTR [rcx+0x24],edi
 100ab47:	jb     0x100ab88
 100ab49:	cmp    DWORD PTR [rcx],0x0
 100ab4c:	je     0x100ab88
 100ab4e:	mov    rax,QWORD PTR [rsi]
 100ab51:	lea    r8,[rip+0xffffffffffff85e0]        # 0x1003138
 100ab58:	mov    rcx,r11
 100ab5b:	test   rax,rax
 100ab5e:	cmovne r8,rax
 100ab62:	lea    rax,[rsp+0x80]
 100ab6a:	xor    edx,edx
 100ab6c:	mov    QWORD PTR [rsp+0x38],rax
 100ab71:	mov    QWORD PTR [rsp+0x30],r9
 100ab76:	mov    r9d,DWORD PTR [rsi+0x8]
 100ab7a:	mov    DWORD PTR [rsp+0x28],r10d
 100ab7f:	mov    DWORD PTR [rsp+0x20],edi
 100ab83:	call   0x1008d00
 100ab88:	add    rsp,0x40
 100ab8c:	pop    rdi
 100ab8d:	pop    rsi
 100ab8e:	pop    rbx
 100ab8f:	ret    
 100ab90:	int3   
 100ab91:	int3   
 100ab92:	int3   
 100ab93:	int3   
 100ab94:	int3   
 100ab95:	int3   
 100ab96:	int3   
 100ab97:	int3   
 100ab98:	int3   
 100ab99:	int3   
 100ab9a:	int3   
 100ab9b:	int3   
 100ab9c:	int3   
 100ab9d:	int3   
 100ab9e:	int3   
 100ab9f:	int3   
 100aba0:	mov    QWORD PTR [rsp+0x10],rdx
 100aba5:	mov    QWORD PTR [rsp+0x18],r8
 100abaa:	mov    QWORD PTR [rsp+0x20],r9
 100abaf:	sub    rsp,0x48
 100abb3:	mov    rax,QWORD PTR [rcx]
 100abb6:	mov    r9d,DWORD PTR [rcx+0x8]
 100abba:	lea    r8,[rip+0xffffffffffff8577]        # 0x1003138
 100abc1:	test   rax,rax
 100abc4:	cmovne r8,rax
 100abc8:	lea    rax,[rsp+0x60]
 100abcd:	mov    QWORD PTR [rsp+0x38],rax
 100abd2:	mov    eax,DWORD PTR [rcx+0xc]
 100abd5:	mov    QWORD PTR [rsp+0x30],rdx
 100abda:	mov    DWORD PTR [rsp+0x28],eax
 100abde:	mov    eax,DWORD PTR [rcx+0x10]
 100abe1:	mov    rcx,QWORD PTR [rcx+0x18]
 100abe5:	xor    edx,edx
 100abe7:	mov    DWORD PTR [rsp+0x20],eax
 100abeb:	call   0x1009290
 100abf0:	add    rsp,0x48
 100abf4:	ret    
 100abf5:	int3   
 100abf6:	int3   
 100abf7:	int3   
 100abf8:	int3   
 100abf9:	int3   
 100abfa:	int3   
 100abfb:	int3   
 100abfc:	int3   
 100abfd:	int3   
 100abfe:	int3   
 100abff:	int3   
 100ac00:	mov    QWORD PTR [rsp+0x8],rdi
 100ac05:	lea    rdi,[rcx+0x10]
 100ac09:	mov    rdx,rcx
 100ac0c:	add    rcx,0x80000
 100ac13:	cmp    rdi,rcx
 100ac16:	jae    0x100ac2c
 100ac18:	sub    rcx,rdi
 100ac1b:	mov    eax,0x200020
 100ac20:	dec    rcx
 100ac23:	shr    rcx,0x2
 100ac27:	inc    rcx
 100ac2a:	rep stos DWORD PTR es:[rdi],eax
 100ac2c:	mov    rax,QWORD PTR [rip+0xffffffffffff7f95]        # 0x1002bc8
 100ac33:	mov    rdi,QWORD PTR [rsp+0x8]
 100ac38:	mov    QWORD PTR [rdx+0x7fff0],rax
 100ac3f:	mov    rax,QWORD PTR [rip+0xffffffffffff7f8a]        # 0x1002bd0
 100ac46:	mov    QWORD PTR [rdx+0x7fff8],rax
 100ac4d:	ret    
 100ac4e:	int3   
 100ac4f:	int3   
 100ac50:	int3   
 100ac51:	int3   
 100ac52:	int3   
 100ac53:	int3   
 100ac54:	int3   
 100ac55:	int3   
 100ac56:	int3   
 100ac57:	int3   
 100ac58:	int3   
 100ac59:	int3   
 100ac5a:	int3   
 100ac5b:	int3   
 100ac5c:	int3   
 100ac5d:	int3   
 100ac5e:	int3   
 100ac5f:	int3   
 100ac60:	lea    rax,[rcx+0x7ffec]
 100ac67:	mov    rdx,rcx
 100ac6a:	cmp    DWORD PTR [rax],0x200020
 100ac70:	jne    0x100ac83
 100ac72:	cmp    rax,rcx
 100ac75:	jbe    0x100ac83
 100ac77:	sub    rax,0x4
 100ac7b:	cmp    DWORD PTR [rax],0x200020
 100ac81:	je     0x100ac72
 100ac83:	xor    ecx,ecx
 100ac85:	cmp    WORD PTR [rax],0x20
 100ac89:	je     0x100aca1
 100ac8b:	nop    DWORD PTR [rax+rax*1+0x0]
 100ac90:	cmp    ecx,0x2
 100ac93:	jge    0x100aca1
 100ac95:	add    rax,0x2
 100ac99:	inc    ecx
 100ac9b:	cmp    WORD PTR [rax],0x20
 100ac9f:	jne    0x100ac90
 100aca1:	sub    rax,rdx
 100aca4:	ret    
 100aca5:	int3   
 100aca6:	int3   
 100aca7:	int3   
 100aca8:	int3   
 100aca9:	int3   
 100acaa:	int3   
 100acab:	int3   
 100acac:	int3   
 100acad:	int3   
 100acae:	int3   
 100acaf:	int3   
 100acb0:	mov    rcx,QWORD PTR [rcx+0x10]
 100acb4:	jmp    0x10049c8
 100acb9:	int3   
 100acba:	int3   
 100acbb:	int3   
 100acbc:	int3   
 100acbd:	int3   
 100acbe:	int3   
 100acbf:	int3   
 100acc0:	mov    r9,rcx
 100acc3:	mov    ecx,DWORD PTR [rcx+0x4]
 100acc6:	test   ecx,ecx
 100acc8:	jne    0x100accd
 100acca:	xor    eax,eax
 100accc:	ret    
 100accd:	mov    edx,DWORD PTR [r9+0x8]
 100acd1:	mov    r8d,edx
 100acd4:	lea    eax,[rdx+0x1]
 100acd7:	xor    edx,edx
 100acd9:	div    DWORD PTR [r9]
 100acdc:	imul   r8,r8,0x53
 100ace0:	add    r8,QWORD PTR [r9+0x10]
 100ace4:	dec    ecx
 100ace6:	mov    DWORD PTR [r9+0x8],edx
 100acea:	mov    DWORD PTR [r9+0x4],ecx
 100acee:	mov    rax,r8
 100acf1:	ret    
 100acf2:	int3   
 100acf3:	int3   
 100acf4:	int3   
 100acf5:	int3   
 100acf6:	int3   
 100acf7:	int3   
 100acf8:	int3   
 100acf9:	int3   
 100acfa:	int3   
 100acfb:	int3   
 100acfc:	int3   
 100acfd:	int3   
 100acfe:	int3   
 100acff:	int3   
 100ad00:	mov    rax,rsp
 100ad03:	mov    DWORD PTR [rax+0x20],r9d
 100ad07:	mov    QWORD PTR [rax+0x18],r8
 100ad0b:	mov    QWORD PTR [rax+0x8],rcx
 100ad0f:	push   rbp
 100ad10:	push   rsi
 100ad11:	push   rdi
 100ad12:	push   r12
 100ad14:	push   r13
 100ad16:	push   r14
 100ad18:	push   r15
 100ad1a:	lea    rbp,[rax-0x78]
 100ad1e:	sub    rsp,0x140
 100ad25:	mov    QWORD PTR [rbp-0x50],0xfffffffffffffffe
 100ad2d:	mov    QWORD PTR [rax+0x10],rbx
 100ad31:	mov    r15d,r9d
 100ad34:	mov    r12,r8
 100ad37:	mov    rsi,rdx
 100ad3a:	mov    rbx,rcx
 100ad3d:	lea    rax,[rip+0xffffffffffff7df4]        # 0x1002b38
 100ad44:	mov    QWORD PTR [rcx],rax
 100ad47:	xor    edi,edi
 100ad49:	mov    QWORD PTR [rcx+0x8],rdi
 100ad4d:	mov    QWORD PTR [rcx+0x10],rax
 100ad51:	mov    QWORD PTR [rcx+0x18],rdi
 100ad55:	lea    rax,[rip+0xffffffffffff7de4]        # 0x1002b40
 100ad5c:	mov    QWORD PTR [rcx+0x28],rax
 100ad60:	mov    QWORD PTR [rcx+0x30],rdi
 100ad64:	mov    QWORD PTR [rcx+0x38],rdi
 100ad68:	add    rcx,0x40
 100ad6c:	mov    QWORD PTR [rcx],rdi
 100ad6f:	mov    QWORD PTR [rcx+0x8],rdi
 100ad73:	mov    DWORD PTR [rcx+0x10],edi
 100ad76:	mov    edx,DWORD PTR [r8+0x8]
 100ad7a:	sub    edx,DWORD PTR [r8]
 100ad7d:	mov    r8,QWORD PTR [r8]
 100ad80:	call   0x1007f40
 100ad85:	mov    r13d,edi
 100ad88:	mov    QWORD PTR [rsp+0x68],rdi
 100ad8d:	mov    QWORD PTR [rsp+0x70],rdi
 100ad92:	mov    DWORD PTR [rsp+0x78],edi
 100ad96:	test   r15d,r15d
 100ad99:	je     0x100b1c9
 100ad9f:	lea    rcx,[rbp-0x40]
 100ada3:	call   0x10085d0
 100ada8:	nop
 100ada9:	mov    edx,DWORD PTR [rsi+0x8]
 100adac:	sub    edx,DWORD PTR [rsi]
 100adae:	mov    r8,QWORD PTR [rsi]
 100adb1:	lea    rcx,[rsp+0x68]
 100adb6:	call   0x1007f40
 100adbb:	lea    r8,[rip+0xffffffffffff8386]        # 0x1003148
 100adc2:	mov    r15d,0x1
 100adc8:	mov    edx,r15d
 100adcb:	lea    rcx,[rsp+0x68]
 100add0:	call   0x1008030
 100add5:	mov    edx,DWORD PTR [r12+0x8]
 100adda:	sub    edx,DWORD PTR [r12]
 100adde:	mov    r8,QWORD PTR [r12]
 100ade2:	lea    rcx,[rsp+0x68]
 100ade7:	call   0x1008030
 100adec:	lea    r8,[rip+0xffffffffffff8359]        # 0x100314c
 100adf3:	lea    edx,[rdi+0x4]
 100adf6:	lea    rcx,[rsp+0x68]
 100adfb:	call   0x1008030
 100ae00:	mov    QWORD PTR [rsp+0x30],rdi
 100ae05:	mov    DWORD PTR [rsp+0x28],0x80
 100ae0d:	mov    DWORD PTR [rsp+0x20],0x4
 100ae15:	lea    r9,[rbp+0x28]
 100ae19:	mov    edx,0xc0000000
 100ae1e:	lea    r8d,[rdi+0x3]
 100ae22:	mov    r13,QWORD PTR [rsp+0x68]
 100ae27:	mov    rcx,r13
 100ae2a:	call   QWORD PTR [rip+0xffffffffffff6448]        # 0x1001278
 100ae30:	mov    rsi,rax
 100ae33:	mov    rcx,QWORD PTR [rbx+0x8]
 100ae37:	cmp    rcx,rax
 100ae3a:	je     0x100ae4b
 100ae3c:	test   rcx,rcx
 100ae3f:	je     0x100ae47
 100ae41:	call   QWORD PTR [rip+0xffffffffffff6351]        # 0x1001198
 100ae47:	mov    QWORD PTR [rbx+0x8],rsi
 100ae4b:	mov    rax,QWORD PTR [rbx+0x8]
 100ae4f:	test   rax,rax
 100ae52:	je     0x100b160
 100ae58:	cmp    rax,0xffffffffffffffff
 100ae5c:	je     0x100b160
 100ae62:	call   QWORD PTR [rip+0xffffffffffff64b0]        # 0x1001318
 100ae68:	xor    cl,cl
 100ae6a:	movzx  ecx,cl
 100ae6d:	cmp    eax,0xb7
 100ae72:	cmove  ecx,r15d
 100ae76:	mov    DWORD PTR [rbp-0x80],ecx
 100ae79:	mov    esi,edi
 100ae7b:	nop    DWORD PTR [rax+rax*1+0x0]
 100ae80:	test   r15d,r15d
 100ae83:	je     0x100afac
 100ae89:	mov    edx,DWORD PTR [r12+0x8]
 100ae8e:	sub    edx,DWORD PTR [r12]
 100ae92:	mov    r8,QWORD PTR [r12]
 100ae96:	lea    rcx,[rsp+0x68]
 100ae9b:	call   0x1007f40
 100aea0:	lea    rdx,[rsp+0x68]
 100aea5:	mov    rcx,rbx
 100aea8:	call   0x100b8b0
 100aead:	lea    r8,[rip+0xffffffffffff82a4]        # 0x1003158
 100aeb4:	mov    edx,0xd
 100aeb9:	lea    rcx,[rsp+0x68]
 100aebe:	call   0x1008030
 100aec3:	mov    r13,QWORD PTR [rsp+0x68]
 100aec8:	mov    QWORD PTR [rsp+0x28],r13
 100aecd:	mov    DWORD PTR [rsp+0x20],0x468c
 100aed5:	xor    r9d,r9d
 100aed8:	lea    r8d,[r9+0x4]
 100aedc:	lea    rdx,[rbp+0x28]
 100aee0:	mov    rcx,QWORD PTR [rbx+0x8]
 100aee4:	call   QWORD PTR [rip+0xffffffffffff633e]        # 0x1001228
 100aeea:	mov    r12,rax
 100aeed:	mov    rcx,QWORD PTR [rbx+0x18]
 100aef1:	cmp    rcx,rax
 100aef4:	je     0x100af05
 100aef6:	test   rcx,rcx
 100aef9:	je     0x100af01
 100aefb:	call   QWORD PTR [rip+0xffffffffffff6297]        # 0x1001198
 100af01:	mov    QWORD PTR [rbx+0x18],r12
 100af05:	mov    rax,QWORD PTR [rbx+0x18]
 100af09:	test   rax,rax
 100af0c:	je     0x100af43
 100af0e:	cmp    rax,0xffffffffffffffff
 100af12:	je     0x100af43
 100af14:	call   QWORD PTR [rip+0xffffffffffff63fe]        # 0x1001318
 100af1a:	cmp    eax,0xb7
 100af1f:	jne    0x100af2c
 100af21:	lea    rcx,[rbx+0x10]
 100af25:	call   0x1008230
 100af2a:	jmp    0x100af2f
 100af2c:	mov    r15d,edi
 100af2f:	inc    esi
 100af31:	cmp    esi,0x3
 100af34:	mov    r12,QWORD PTR [rbp+0x90]
 100af3b:	jl     0x100ae80
 100af41:	jmp    0x100afac
 100af43:	call   QWORD PTR [rip+0xffffffffffff63cf]        # 0x1001318
 100af49:	test   eax,eax
 100af4b:	jle    0x100af55
 100af4d:	movzx  eax,ax
 100af50:	or     eax,0x80070000
 100af55:	mov    r9d,eax
 100af58:	mov    r8d,0x782
 100af5e:	lea    rdx,[rip+0xffffffffffff7d0b]        # 0x1002c70
 100af65:	lea    rcx,[rbp-0x78]
 100af69:	call   0x10036dc
 100af6e:	mov    rcx,QWORD PTR [rax]
 100af71:	mov    QWORD PTR [rsp+0x40],rcx
 100af76:	mov    rcx,QWORD PTR [rax+0x8]
 100af7a:	mov    QWORD PTR [rsp+0x48],rcx
 100af7f:	mov    rcx,QWORD PTR [rax+0x10]
 100af83:	mov    QWORD PTR [rsp+0x50],rcx
 100af88:	mov    rcx,QWORD PTR [rax+0x18]
 100af8c:	mov    QWORD PTR [rsp+0x58],rcx
 100af91:	mov    rax,QWORD PTR [rax+0x20]
 100af95:	mov    QWORD PTR [rsp+0x60],rax
 100af9a:	lea    rdx,[rip+0x634f]        # 0x10112f0
 100afa1:	lea    rcx,[rsp+0x40]
 100afa6:	call   0x1004bf0
 100afab:	int3   
 100afac:	mov    rcx,QWORD PTR [rbx+0x18]
 100afb0:	test   rcx,rcx
 100afb3:	je     0x100b0f7
 100afb9:	cmp    rcx,0xffffffffffffffff
 100afbd:	je     0x100b0f7
 100afc3:	mov    QWORD PTR [rsp+0x20],rdi
 100afc8:	xor    r9d,r9d
 100afcb:	xor    r8d,r8d
 100afce:	mov    edx,0xf001f
 100afd3:	call   QWORD PTR [rip+0xffffffffffff6237]        # 0x1001210
 100afd9:	mov    rsi,rax
 100afdc:	test   rax,rax
 100afdf:	jne    0x100b04a
 100afe1:	call   QWORD PTR [rip+0xffffffffffff6331]        # 0x1001318
 100afe7:	test   eax,eax
 100afe9:	jle    0x100aff3
 100afeb:	movzx  eax,ax
 100afee:	or     eax,0x80070000
 100aff3:	mov    r9d,eax
 100aff6:	mov    r8d,0x79c
 100affc:	lea    rdx,[rip+0xffffffffffff7c6d]        # 0x1002c70
 100b003:	lea    rcx,[rbp-0x78]
 100b007:	call   0x10036dc
 100b00c:	mov    rcx,QWORD PTR [rax]
 100b00f:	mov    QWORD PTR [rsp+0x40],rcx
 100b014:	mov    rcx,QWORD PTR [rax+0x8]
 100b018:	mov    QWORD PTR [rsp+0x48],rcx
 100b01d:	mov    rcx,QWORD PTR [rax+0x10]
 100b021:	mov    QWORD PTR [rsp+0x50],rcx
 100b026:	mov    rcx,QWORD PTR [rax+0x18]
 100b02a:	mov    QWORD PTR [rsp+0x58],rcx
 100b02f:	mov    rax,QWORD PTR [rax+0x20]
 100b033:	mov    QWORD PTR [rsp+0x60],rax
 100b038:	lea    rdx,[rip+0x62b1]        # 0x10112f0
 100b03f:	lea    rcx,[rsp+0x40]
 100b044:	call   0x1004bf0
 100b049:	int3   
 100b04a:	mov    QWORD PTR [rbx+0x20],rax
 100b04e:	mov    rcx,QWORD PTR [rbx+0x30]
 100b052:	cmp    rcx,rax
 100b055:	je     0x100b06a
 100b057:	test   rcx,rcx
 100b05a:	je     0x100b066
 100b05c:	call   QWORD PTR [rip+0xffffffffffff61be]        # 0x1001220
 100b062:	mov    QWORD PTR [rbx+0x30],rdi
 100b066:	mov    QWORD PTR [rbx+0x30],rsi
 100b06a:	mov    r9d,0xc7
 100b070:	mov    r8,r13
 100b073:	mov    edx,0x468c
 100b078:	mov    rcx,QWORD PTR [rbx+0x20]
 100b07c:	call   QWORD PTR [rip+0xffffffffffff62ce]        # 0x1001350
 100b082:	mov    r11,QWORD PTR [rbx+0x20]
 100b086:	mov    BYTE PTR [r11+0xc7],0x0
 100b08e:	xor    edx,edx
 100b090:	mov    rcx,QWORD PTR [rbx+0x20]
 100b094:	call   QWORD PTR [rip+0xffffffffffff617e]        # 0x1001218
 100b09a:	nop
 100b09b:	lea    rcx,[rbp+0x20]
 100b09f:	call   0x100d1a0
 100b0a4:	nop
 100b0a5:	lea    rcx,[rbp+0x18]
 100b0a9:	call   0x100d1a0
 100b0ae:	nop
 100b0af:	mov    rcx,QWORD PTR [rbp+0x10]
 100b0b3:	call   0x10049c8
 100b0b8:	nop
 100b0b9:	lea    rcx,[rbp+0x8]
 100b0bd:	call   0x100d1a0
 100b0c2:	nop
 100b0c3:	mov    rcx,QWORD PTR [rbp+0x0]
 100b0c7:	call   0x10049c8
 100b0cc:	mov    rcx,QWORD PTR [rbp-0x8]
 100b0d0:	call   0x10049c8
 100b0d5:	lea    rcx,[rbp-0x10]
 100b0d9:	call   0x100d1a0
 100b0de:	nop
 100b0df:	lea    rcx,[rbp-0x18]
 100b0e3:	call   0x100d1a0
 100b0e8:	mov    esi,DWORD PTR [rbp-0x80]
 100b0eb:	mov    r15d,DWORD PTR [rbp+0x98]
 100b0f2:	jmp    0x100b1de
 100b0f7:	call   QWORD PTR [rip+0xffffffffffff621b]        # 0x1001318
 100b0fd:	test   eax,eax
 100b0ff:	jle    0x100b109
 100b101:	movzx  eax,ax
 100b104:	or     eax,0x80070000
 100b109:	mov    r9d,eax
 100b10c:	mov    r8d,0x791
 100b112:	lea    rdx,[rip+0xffffffffffff7b57]        # 0x1002c70
 100b119:	lea    rcx,[rbp-0x78]
 100b11d:	call   0x10036dc
 100b122:	mov    rcx,QWORD PTR [rax]
 100b125:	mov    QWORD PTR [rsp+0x40],rcx
 100b12a:	mov    rcx,QWORD PTR [rax+0x8]
 100b12e:	mov    QWORD PTR [rsp+0x48],rcx
 100b133:	mov    rcx,QWORD PTR [rax+0x10]
 100b137:	mov    QWORD PTR [rsp+0x50],rcx
 100b13c:	mov    rcx,QWORD PTR [rax+0x18]
 100b140:	mov    QWORD PTR [rsp+0x58],rcx
 100b145:	mov    rax,QWORD PTR [rax+0x20]
 100b149:	mov    QWORD PTR [rsp+0x60],rax
 100b14e:	lea    rdx,[rip+0x619b]        # 0x10112f0
 100b155:	lea    rcx,[rsp+0x40]
 100b15a:	call   0x1004bf0
 100b15f:	int3   
 100b160:	call   QWORD PTR [rip+0xffffffffffff61b2]        # 0x1001318
 100b166:	test   eax,eax
 100b168:	jle    0x100b172
 100b16a:	movzx  eax,ax
 100b16d:	or     eax,0x80070000
 100b172:	mov    r9d,eax
 100b175:	mov    r8d,0x769
 100b17b:	lea    rdx,[rip+0xffffffffffff7aee]        # 0x1002c70
 100b182:	lea    rcx,[rbp-0x78]
 100b186:	call   0x10036dc
 100b18b:	mov    rcx,QWORD PTR [rax]
 100b18e:	mov    QWORD PTR [rsp+0x40],rcx
 100b193:	mov    rcx,QWORD PTR [rax+0x8]
 100b197:	mov    QWORD PTR [rsp+0x48],rcx
 100b19c:	mov    rcx,QWORD PTR [rax+0x10]
 100b1a0:	mov    QWORD PTR [rsp+0x50],rcx
 100b1a5:	mov    rcx,QWORD PTR [rax+0x18]
 100b1a9:	mov    QWORD PTR [rsp+0x58],rcx
 100b1ae:	mov    rax,QWORD PTR [rax+0x20]
 100b1b2:	mov    QWORD PTR [rsp+0x60],rax
 100b1b7:	lea    rdx,[rip+0x6132]        # 0x10112f0
 100b1be:	lea    rcx,[rsp+0x40]
 100b1c3:	call   0x1004bf0
 100b1c8:	nop
 100b1c9:	xor    sil,sil
 100b1cc:	mov    ecx,0x4688
 100b1d1:	call   0x1004a94
 100b1d6:	mov    QWORD PTR [rbx+0x20],rax
 100b1da:	mov    QWORD PTR [rbx+0x38],rax
 100b1de:	test   sil,sil
 100b1e1:	je     0x100b272
 100b1e7:	mov    rdx,QWORD PTR [rbx+0x20]
 100b1eb:	mov    rcx,rbx
 100b1ee:	call   0x100b3c0
 100b1f3:	test   al,al
 100b1f5:	jne    0x100b251
 100b1f7:	mov    r9d,0x80004005
 100b1fd:	mov    r8d,0x7b3
 100b203:	lea    rdx,[rip+0xffffffffffff7a66]        # 0x1002c70
 100b20a:	lea    rcx,[rbp-0x78]
 100b20e:	call   0x10036dc
 100b213:	mov    rcx,QWORD PTR [rax]
 100b216:	mov    QWORD PTR [rsp+0x40],rcx
 100b21b:	mov    rcx,QWORD PTR [rax+0x8]
 100b21f:	mov    QWORD PTR [rsp+0x48],rcx
 100b224:	mov    rcx,QWORD PTR [rax+0x10]
 100b228:	mov    QWORD PTR [rsp+0x50],rcx
 100b22d:	mov    rcx,QWORD PTR [rax+0x18]
 100b231:	mov    QWORD PTR [rsp+0x58],rcx
 100b236:	mov    rax,QWORD PTR [rax+0x20]
 100b23a:	mov    QWORD PTR [rsp+0x60],rax
 100b23f:	lea    rdx,[rip+0x60aa]        # 0x10112f0
 100b246:	lea    rcx,[rsp+0x40]
 100b24b:	call   0x1004bf0
 100b250:	int3   
 100b251:	mov    rcx,rbx
 100b254:	call   0x100b780
 100b259:	test   eax,eax
 100b25b:	je     0x100b26d
 100b25d:	mov    rcx,rbx
 100b260:	call   0x100b7d0
 100b265:	test   eax,eax
 100b267:	jne    0x100b2f1
 100b26d:	mov    edi,0x1
 100b272:	mov    rdx,QWORD PTR [rbx+0x20]
 100b276:	mov    rcx,rbx
 100b279:	call   0x100b440
 100b27e:	test   al,al
 100b280:	jne    0x100b2dc
 100b282:	mov    r9d,0x80004005
 100b288:	mov    r8d,0x7c3
 100b28e:	lea    rdx,[rip+0xffffffffffff79db]        # 0x1002c70
 100b295:	lea    rcx,[rbp-0x78]
 100b299:	call   0x10036dc
 100b29e:	mov    rcx,QWORD PTR [rax]
 100b2a1:	mov    QWORD PTR [rsp+0x40],rcx
 100b2a6:	mov    rcx,QWORD PTR [rax+0x8]
 100b2aa:	mov    QWORD PTR [rsp+0x48],rcx
 100b2af:	mov    rcx,QWORD PTR [rax+0x10]
 100b2b3:	mov    QWORD PTR [rsp+0x50],rcx
 100b2b8:	mov    rcx,QWORD PTR [rax+0x18]
 100b2bc:	mov    QWORD PTR [rsp+0x58],rcx
 100b2c1:	mov    rax,QWORD PTR [rax+0x20]
 100b2c5:	mov    QWORD PTR [rsp+0x60],rax
 100b2ca:	lea    rdx,[rip+0x601f]        # 0x10112f0
 100b2d1:	lea    rcx,[rsp+0x40]
 100b2d6:	call   0x1004bf0
 100b2db:	int3   
 100b2dc:	test   edi,edi
 100b2de:	je     0x100b2f1
 100b2e0:	test   r15d,r15d
 100b2e3:	je     0x100b2f1
 100b2e5:	mov    rdx,r13
 100b2e8:	mov    rcx,rbx
 100b2eb:	call   0x100b860
 100b2f0:	nop
 100b2f1:	mov    rcx,r13
 100b2f4:	call   0x10049c8
 100b2f9:	nop
 100b2fa:	mov    rax,rbx
 100b2fd:	mov    rbx,QWORD PTR [rsp+0x188]
 100b305:	add    rsp,0x140
 100b30c:	pop    r15
 100b30e:	pop    r14
 100b310:	pop    r13
 100b312:	pop    r12
 100b314:	pop    rdi
 100b315:	pop    rsi
 100b316:	pop    rbp
 100b317:	ret    
 100b318:	int3   
 100b319:	int3   
 100b31a:	int3   
 100b31b:	int3   
 100b31c:	int3   
 100b31d:	int3   
 100b31e:	int3   
 100b31f:	int3   
 100b320:	mov    QWORD PTR [rsp+0x8],rbx
 100b325:	push   rsi
 100b326:	sub    rsp,0x20
 100b32a:	mov    rbx,rcx
 100b32d:	mov    rcx,QWORD PTR [rcx+0x40]
 100b331:	call   0x10049c8
 100b336:	mov    rcx,QWORD PTR [rbx+0x38]
 100b33a:	test   rcx,rcx
 100b33d:	je     0x100b344
 100b33f:	call   0x10049c8
 100b344:	mov    rcx,QWORD PTR [rbx+0x30]
 100b348:	lea    rax,[rip+0xffffffffffff77f1]        # 0x1002b40
 100b34f:	mov    QWORD PTR [rbx+0x28],rax
 100b353:	test   rcx,rcx
 100b356:	je     0x100b366
 100b358:	call   QWORD PTR [rip+0xffffffffffff5ec2]        # 0x1001220
 100b35e:	mov    QWORD PTR [rbx+0x30],0x0
 100b366:	mov    rcx,QWORD PTR [rbx+0x18]
 100b36a:	lea    rsi,[rip+0xffffffffffff77c7]        # 0x1002b38
 100b371:	mov    QWORD PTR [rbx+0x10],rsi
 100b375:	test   rcx,rcx
 100b378:	je     0x100b38e
 100b37a:	cmp    rcx,0xffffffffffffffff
 100b37e:	je     0x100b38e
 100b380:	call   QWORD PTR [rip+0xffffffffffff5e12]        # 0x1001198
 100b386:	mov    QWORD PTR [rbx+0x18],0x0
 100b38e:	mov    rcx,QWORD PTR [rbx+0x8]
 100b392:	mov    QWORD PTR [rbx],rsi
 100b395:	test   rcx,rcx
 100b398:	je     0x100b3ae
 100b39a:	cmp    rcx,0xffffffffffffffff
 100b39e:	je     0x100b3ae
 100b3a0:	call   QWORD PTR [rip+0xffffffffffff5df2]        # 0x1001198
 100b3a6:	mov    QWORD PTR [rbx+0x8],0x0
 100b3ae:	mov    rbx,QWORD PTR [rsp+0x30]
 100b3b3:	add    rsp,0x20
 100b3b7:	pop    rsi
 100b3b8:	ret    
 100b3b9:	int3   
 100b3ba:	int3   
 100b3bb:	int3   
 100b3bc:	int3   
 100b3bd:	int3   
 100b3be:	int3   
 100b3bf:	int3   
 100b3c0:	mov    QWORD PTR [rsp+0x8],rsi
 100b3c5:	push   rdi
 100b3c6:	sub    rsp,0x20
 100b3ca:	mov    r8,rcx
 100b3cd:	lea    rsi,[rdx+0xc8]
 100b3d4:	lea    rdi,[rip+0xffffffffffff77e9]        # 0x1002bc4
 100b3db:	mov    ecx,0x4
 100b3e0:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100b3e2:	jne    0x100b41c
 100b3e4:	mov    eax,DWORD PTR [rdx+0xcc]
 100b3ea:	mov    ecx,DWORD PTR [rdx+0xd0]
 100b3f0:	add    rax,rdx
 100b3f3:	mov    QWORD PTR [r8+0x68],rax
 100b3f7:	add    rax,0x4
 100b3fb:	mov    QWORD PTR [r8+0x70],rax
 100b3ff:	lea    rax,[rdx+rcx*1]
 100b403:	mov    QWORD PTR [r8+0x58],rax
 100b407:	add    rax,0x4
 100b40b:	mov    QWORD PTR [r8+0x60],rax
 100b40f:	mov    al,0x1
 100b411:	mov    rsi,QWORD PTR [rsp+0x30]
 100b416:	add    rsp,0x20
 100b41a:	pop    rdi
 100b41b:	ret    
 100b41c:	lea    rcx,[rip+0xffffffffffff7d4d]        # 0x1003170
 100b423:	call   QWORD PTR [rip+0xffffffffffff5e37]        # 0x1001260
 100b429:	mov    rsi,QWORD PTR [rsp+0x30]
 100b42e:	xor    al,al
 100b430:	add    rsp,0x20
 100b434:	pop    rdi
 100b435:	ret    
 100b436:	int3   
 100b437:	int3   
 100b438:	int3   
 100b439:	int3   
 100b43a:	int3   
 100b43b:	int3   
 100b43c:	int3   
 100b43d:	int3   
 100b43e:	int3   
 100b43f:	int3   
 100b440:	mov    QWORD PTR [rsp+0x8],rbx
 100b445:	mov    QWORD PTR [rsp+0x10],rbp
 100b44a:	mov    QWORD PTR [rsp+0x18],rsi
 100b44f:	mov    QWORD PTR [rsp+0x20],rdi
 100b454:	push   r12
 100b456:	push   r14
 100b458:	push   r15
 100b45a:	sub    rsp,0x20
 100b45e:	mov    rbx,rcx
 100b461:	lea    rcx,[rdx+0xc8]
 100b468:	mov    r15,rdx
 100b46b:	lea    r8,[rip+0xffffffffffff7752]        # 0x1002bc4
 100b472:	mov    edx,0x45c4
 100b477:	call   QWORD PTR [rip+0xffffffffffff5eeb]        # 0x1001368
 100b47d:	mov    DWORD PTR [r15+0xcc],0xd4
 100b488:	lea    rax,[r15+0xd4]
 100b48f:	mov    QWORD PTR [rbx+0x68],rax
 100b493:	mov    ebp,0xb
 100b498:	lea    r14,[rip+0x81e1]        # 0x1013680
 100b49f:	mov    DWORD PTR [rax],ebp
 100b4a1:	mov    rax,QWORD PTR [rbx+0x68]
 100b4a5:	add    rax,0x4
 100b4a9:	xor    r12d,r12d
 100b4ac:	mov    edi,r12d
 100b4af:	mov    esi,r12d
 100b4b2:	mov    QWORD PTR [rbx+0x70],rax
 100b4b6:	data16 nop WORD PTR [rax+rax*1+0x0]
 100b4c0:	mov    rax,QWORD PTR [rbx+0x70]
 100b4c4:	mov    edx,0x20
 100b4c9:	mov    DWORD PTR [rdi+rax*1],r12d
 100b4cd:	mov    rcx,QWORD PTR [rbx+0x70]
 100b4d1:	mov    r8,QWORD PTR [r14]
 100b4d4:	add    rcx,0x4
 100b4d8:	add    rcx,rsi
 100b4db:	call   QWORD PTR [rip+0xffffffffffff5e87]        # 0x1001368
 100b4e1:	add    rsi,0x24
 100b4e5:	add    rdi,0x24
 100b4e9:	add    r14,0x8
 100b4ed:	dec    rbp
 100b4f0:	jne    0x100b4c0
 100b4f2:	mov    rax,QWORD PTR [rbx+0x70]
 100b4f6:	mov    rbp,QWORD PTR [rsp+0x48]
 100b4fb:	mov    rsi,QWORD PTR [rsp+0x50]
 100b500:	mov    DWORD PTR [rax],0x1
 100b506:	mov    rax,QWORD PTR [rbx+0x70]
 100b50a:	mov    rdi,QWORD PTR [rsp+0x58]
 100b50f:	mov    DWORD PTR [rax+0x24],0x5
 100b516:	mov    rax,QWORD PTR [rbx+0x70]
 100b51a:	mov    DWORD PTR [rax+0x48],0x2
 100b521:	mov    rax,QWORD PTR [rbx+0x70]
 100b525:	mov    DWORD PTR [rax+0x6c],r12d
 100b529:	mov    rax,QWORD PTR [rbx+0x70]
 100b52d:	mov    DWORD PTR [rax+0x90],r12d
 100b534:	mov    rax,QWORD PTR [rbx+0x70]
 100b538:	mov    DWORD PTR [rax+0xb4],0x1
 100b542:	mov    rax,QWORD PTR [rbx+0x70]
 100b546:	mov    DWORD PTR [rax+0xd8],0x1
 100b550:	mov    rax,QWORD PTR [rbx+0x70]
 100b554:	mov    DWORD PTR [rax+0xfc],r12d
 100b55b:	mov    rax,QWORD PTR [rbx+0x70]
 100b55f:	mov    DWORD PTR [rax+0x120],r12d
 100b566:	mov    rax,QWORD PTR [rbx+0x70]
 100b56a:	mov    DWORD PTR [rax+0x144],0x1
 100b574:	mov    rax,QWORD PTR [rbx+0x70]
 100b578:	mov    DWORD PTR [rax+0x168],0x1
 100b582:	mov    rax,QWORD PTR [rbx+0x68]
 100b586:	mov    ecx,DWORD PTR [rax]
 100b588:	lea    ecx,[rcx+rcx*8]
 100b58b:	shl    ecx,0x2
 100b58e:	sub    ecx,r15d
 100b591:	add    ecx,DWORD PTR [rbx+0x70]
 100b594:	mov    DWORD PTR [r15+0xd0],ecx
 100b59b:	add    rcx,r15
 100b59e:	mov    QWORD PTR [rbx+0x58],rcx
 100b5a2:	mov    DWORD PTR [rcx],r12d
 100b5a5:	mov    rax,QWORD PTR [rbx+0x58]
 100b5a9:	add    rax,0x4
 100b5ad:	mov    QWORD PTR [rbx+0x60],rax
 100b5b1:	mov    rax,QWORD PTR [rbx+0x58]
 100b5b5:	mov    rbx,QWORD PTR [rsp+0x40]
 100b5ba:	mov    DWORD PTR [rax],r12d
 100b5bd:	mov    al,0x1
 100b5bf:	add    rsp,0x20
 100b5c3:	pop    r15
 100b5c5:	pop    r14
 100b5c7:	pop    r12
 100b5c9:	ret    
 100b5ca:	int3   
 100b5cb:	int3   
 100b5cc:	int3   
 100b5cd:	int3   
 100b5ce:	int3   
 100b5cf:	int3   
 100b5d0:	mov    QWORD PTR [rsp+0x10],rbp
 100b5d5:	mov    QWORD PTR [rsp+0x18],rsi
 100b5da:	push   rdi
 100b5db:	sub    rsp,0x20
 100b5df:	mov    rax,QWORD PTR [rcx+0x58]
 100b5e3:	mov    ebp,r8d
 100b5e6:	mov    rsi,rdx
 100b5e9:	mov    rdi,rcx
 100b5ec:	test   rax,rax
 100b5ef:	jne    0x100b606
 100b5f1:	mov    eax,0x80004005
 100b5f6:	mov    rbp,QWORD PTR [rsp+0x38]
 100b5fb:	mov    rsi,QWORD PTR [rsp+0x40]
 100b600:	add    rsp,0x20
 100b604:	pop    rdi
 100b605:	ret    
 100b606:	mov    QWORD PTR [rsp+0x30],rbx
 100b60b:	xor    ebx,ebx
 100b60d:	cmp    DWORD PTR [rax],ebx
 100b60f:	jbe    0x100b64e
 100b611:	data16 data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100b620:	mov    rdx,QWORD PTR [rdi+0x60]
 100b624:	mov    ecx,ebx
 100b626:	mov    r8d,0x3f
 100b62c:	add    rdx,0x4
 100b630:	imul   rcx,rcx,0x44
 100b634:	add    rdx,rcx
 100b637:	mov    rcx,rsi
 100b63a:	call   QWORD PTR [rip+0xffffffffffff5d18]        # 0x1001358
 100b640:	test   eax,eax
 100b642:	je     0x100b668
 100b644:	mov    rax,QWORD PTR [rdi+0x58]
 100b648:	inc    ebx
 100b64a:	cmp    ebx,DWORD PTR [rax]
 100b64c:	jb     0x100b620
 100b64e:	mov    eax,0x80070057
 100b653:	mov    rbx,QWORD PTR [rsp+0x30]
 100b658:	mov    rbp,QWORD PTR [rsp+0x38]
 100b65d:	mov    rsi,QWORD PTR [rsp+0x40]
 100b662:	add    rsp,0x20
 100b666:	pop    rdi
 100b667:	ret    
 100b668:	mov    rax,QWORD PTR [rdi+0x60]
 100b66c:	mov    ecx,ebx
 100b66e:	imul   rcx,rcx,0x44
 100b672:	mov    DWORD PTR [rcx+rax*1],ebp
 100b675:	xor    eax,eax
 100b677:	jmp    0x100b653
 100b679:	int3   
 100b67a:	int3   
 100b67b:	int3   
 100b67c:	int3   
 100b67d:	int3   
 100b67e:	int3   
 100b67f:	int3   
 100b680:	mov    QWORD PTR [rsp+0x8],rbx
 100b685:	mov    QWORD PTR [rsp+0x10],rsi
 100b68a:	mov    QWORD PTR [rsp+0x18],rdi
 100b68f:	push   r14
 100b691:	sub    rsp,0x20
 100b695:	mov    rax,QWORD PTR [rcx+0x58]
 100b699:	xor    ebx,ebx
 100b69b:	mov    r14,r8
 100b69e:	mov    rsi,rdx
 100b6a1:	mov    rdi,rcx
 100b6a4:	cmp    DWORD PTR [rax],ebx
 100b6a6:	jbe    0x100b6df
 100b6a8:	nop    DWORD PTR [rax+rax*1+0x0]
 100b6b0:	mov    rdx,QWORD PTR [rdi+0x60]
 100b6b4:	mov    r8d,ebx
 100b6b7:	mov    rcx,rsi
 100b6ba:	add    rdx,0x4
 100b6be:	imul   r8,r8,0x44
 100b6c2:	add    rdx,r8
 100b6c5:	mov    r8d,0x3f
 100b6cb:	call   QWORD PTR [rip+0xffffffffffff5c87]        # 0x1001358
 100b6d1:	test   eax,eax
 100b6d3:	je     0x100b6f6
 100b6d5:	mov    rax,QWORD PTR [rdi+0x58]
 100b6d9:	inc    ebx
 100b6db:	cmp    ebx,DWORD PTR [rax]
 100b6dd:	jb     0x100b6b0
 100b6df:	mov    rax,QWORD PTR [rdi+0x58]
 100b6e3:	cmp    DWORD PTR [rax],0x100
 100b6e9:	jb     0x100b6fb
 100b6eb:	mov    eax,DWORD PTR [rip+0x7fff]        # 0x10136f0
 100b6f1:	mov    DWORD PTR [r14],eax
 100b6f4:	jmp    0x100b757
 100b6f6:	mov    DWORD PTR [r14],ebx
 100b6f9:	jmp    0x100b757
 100b6fb:	mov    ecx,DWORD PTR [rax]
 100b6fd:	mov    rax,QWORD PTR [rdi+0x60]
 100b701:	mov    r9d,0x3f
 100b707:	lea    edx,[r9+0x1]
 100b70b:	mov    r8,rsi
 100b70e:	imul   rcx,rcx,0x44
 100b712:	mov    DWORD PTR [rcx+rax*1],0x2
 100b719:	mov    rax,QWORD PTR [rdi+0x58]
 100b71d:	mov    ecx,DWORD PTR [rax]
 100b71f:	mov    rax,QWORD PTR [rdi+0x60]
 100b723:	add    rax,0x4
 100b727:	imul   rcx,rcx,0x44
 100b72b:	add    rcx,rax
 100b72e:	call   QWORD PTR [rip+0xffffffffffff5c1c]        # 0x1001350
 100b734:	mov    r11,QWORD PTR [rdi+0x58]
 100b738:	mov    rax,QWORD PTR [rdi+0x60]
 100b73c:	mov    ecx,DWORD PTR [r11]
 100b73f:	imul   rcx,rcx,0x44
 100b743:	mov    BYTE PTR [rcx+rax*1+0x43],0x0
 100b748:	mov    rax,QWORD PTR [rdi+0x58]
 100b74c:	mov    ecx,DWORD PTR [rax]
 100b74e:	mov    DWORD PTR [r14],ecx
 100b751:	mov    rax,QWORD PTR [rdi+0x58]
 100b755:	inc    DWORD PTR [rax]
 100b757:	mov    rbx,QWORD PTR [rsp+0x30]
 100b75c:	mov    rsi,QWORD PTR [rsp+0x38]
 100b761:	mov    rdi,QWORD PTR [rsp+0x40]
 100b766:	add    rsp,0x20
 100b76a:	pop    r14
 100b76c:	ret    
 100b76d:	int3   
 100b76e:	int3   
 100b76f:	int3   
 100b770:	int3   
 100b771:	int3   
 100b772:	int3   
 100b773:	int3   
 100b774:	int3   
 100b775:	int3   
 100b776:	int3   
 100b777:	int3   
 100b778:	int3   
 100b779:	int3   
 100b77a:	int3   
 100b77b:	int3   
 100b77c:	int3   
 100b77d:	int3   
 100b77e:	int3   
 100b77f:	int3   
 100b780:	mov    rax,QWORD PTR [rcx+0x58]
 100b784:	mov    rdx,rcx
 100b787:	test   rax,rax
 100b78a:	jne    0x100b78f
 100b78c:	xor    eax,eax
 100b78e:	ret    
 100b78f:	mov    r8d,DWORD PTR [rax]
 100b792:	cmp    r8d,0x100
 100b799:	ja     0x100b78c
 100b79b:	xor    ecx,ecx
 100b79d:	test   r8d,r8d
 100b7a0:	je     0x100b7c2
 100b7a2:	mov    rax,QWORD PTR [rdx+0x60]
 100b7a6:	cmp    BYTE PTR [rax+0x4],0x0
 100b7aa:	je     0x100b78c
 100b7ac:	mov    edx,DWORD PTR [rax]
 100b7ae:	test   edx,edx
 100b7b0:	jle    0x100b78c
 100b7b2:	cmp    edx,0x6
 100b7b5:	jge    0x100b78c
 100b7b7:	inc    ecx
 100b7b9:	add    rax,0x44
 100b7bd:	cmp    ecx,r8d
 100b7c0:	jb     0x100b7a6
 100b7c2:	mov    eax,0x1
 100b7c7:	ret    
 100b7c8:	int3   
 100b7c9:	int3   
 100b7ca:	int3   
 100b7cb:	int3   
 100b7cc:	int3   
 100b7cd:	int3   
 100b7ce:	int3   
 100b7cf:	int3   
 100b7d0:	sub    rsp,0x8
 100b7d4:	mov    rax,QWORD PTR [rcx+0x68]
 100b7d8:	test   rax,rax
 100b7db:	je     0x100b852
 100b7dd:	cmp    DWORD PTR [rax],0xb
 100b7e0:	jne    0x100b852
 100b7e2:	mov    QWORD PTR [rsp],rbx
 100b7e6:	mov    rbx,QWORD PTR [rcx+0x70]
 100b7ea:	xor    r9d,r9d
 100b7ed:	mov    r10,rbx
 100b7f0:	lea    r11,[rip+0x7e89]        # 0x1013680
 100b7f7:	cmp    DWORD PTR [r10],0xf
 100b7fb:	ja     0x100b847
 100b7fd:	mov    r8,QWORD PTR [r11]
 100b800:	movsxd rax,r9d
 100b803:	lea    rax,[rax+rax*8]
 100b807:	inc    rax
 100b80a:	lea    rax,[rbx+rax*4]
 100b80e:	sub    r8,rax
 100b811:	movzx  edx,BYTE PTR [rax]
 100b814:	movzx  ecx,BYTE PTR [rax+r8*1]
 100b819:	sub    edx,ecx
 100b81b:	jne    0x100b824
 100b81d:	inc    rax
 100b820:	test   ecx,ecx
 100b822:	jne    0x100b811
 100b824:	test   edx,edx
 100b826:	jne    0x100b847
 100b828:	inc    r9d
 100b82b:	add    r10,0x24
 100b82f:	add    r11,0x8
 100b833:	cmp    r9d,0xb
 100b837:	jl     0x100b7f7
 100b839:	mov    eax,0x1
 100b83e:	mov    rbx,QWORD PTR [rsp]
 100b842:	add    rsp,0x8
 100b846:	ret    
 100b847:	xor    eax,eax
 100b849:	mov    rbx,QWORD PTR [rsp]
 100b84d:	add    rsp,0x8
 100b851:	ret    
 100b852:	xor    eax,eax
 100b854:	add    rsp,0x8
 100b858:	ret    
 100b859:	int3   
 100b85a:	int3   
 100b85b:	int3   
 100b85c:	int3   
 100b85d:	int3   
 100b85e:	int3   
 100b85f:	int3   
 100b860:	rex push rbx
 100b862:	sub    rsp,0x20
 100b866:	mov    rbx,rcx
 100b869:	mov    rcx,QWORD PTR [rcx+0x20]
 100b86d:	mov    r8,rdx
 100b870:	mov    r9d,0xc7
 100b876:	mov    edx,0x468c
 100b87b:	call   QWORD PTR [rip+0xffffffffffff5acf]        # 0x1001350
 100b881:	mov    r11,QWORD PTR [rbx+0x20]
 100b885:	xor    edx,edx
 100b887:	mov    BYTE PTR [r11+0xc7],0x0
 100b88f:	mov    rcx,QWORD PTR [rbx+0x20]
 100b893:	add    rsp,0x20
 100b897:	pop    rbx
 100b898:	rex.W jmp QWORD PTR [rip+0xffffffffffff5979]        # 0x1001218
 100b89f:	int3   
 100b8a0:	int3   
 100b8a1:	int3   
 100b8a2:	int3   
 100b8a3:	int3   
 100b8a4:	int3   
 100b8a5:	int3   
 100b8a6:	int3   
 100b8a7:	int3   
 100b8a8:	int3   
 100b8a9:	int3   
 100b8aa:	int3   
 100b8ab:	int3   
 100b8ac:	int3   
 100b8ad:	int3   
 100b8ae:	int3   
 100b8af:	int3   
 100b8b0:	mov    rax,rsp
 100b8b3:	push   rdi
 100b8b4:	sub    rsp,0x80
 100b8bb:	mov    QWORD PTR [rax-0x60],0xfffffffffffffffe
 100b8c3:	mov    QWORD PTR [rax+0x8],rbx
 100b8c7:	mov    QWORD PTR [rax+0x18],rbp
 100b8cb:	mov    QWORD PTR [rax+0x20],rsi
 100b8cf:	mov    rax,QWORD PTR [rip+0x787a]        # 0x1013150
 100b8d6:	xor    rax,rsp
 100b8d9:	mov    QWORD PTR [rsp+0x78],rax
 100b8de:	mov    rbp,rdx
 100b8e1:	call   QWORD PTR [rip+0xffffffffffff57f1]        # 0x10010d8
 100b8e7:	mov    ecx,eax
 100b8e9:	mov    r8d,0x10
 100b8ef:	lea    rdx,[rsp+0x40]
 100b8f4:	call   QWORD PTR [rip+0xffffffffffff5aa6]        # 0x10013a0
 100b8fa:	mov    BYTE PTR [rsp+0x71],0x0
 100b8ff:	lea    rcx,[rsp+0x40]
 100b904:	or     rdi,0xffffffffffffffff
 100b908:	mov    rax,rdi
 100b90b:	nop    DWORD PTR [rax+rax*1+0x0]
 100b910:	inc    rax
 100b913:	cmp    BYTE PTR [rcx+rax*1],0x0
 100b917:	jne    0x100b910
 100b919:	mov    edx,0x31
 100b91e:	cmp    rax,rdx
 100b921:	cmovb  edx,eax
 100b924:	lea    r8,[rsp+0x40]
 100b929:	mov    rcx,rbp
 100b92c:	call   0x1008030
 100b931:	lea    rcx,[rsp+0x30]
 100b936:	call   QWORD PTR [rip+0xffffffffffff5ba4]        # 0x10014e0
 100b93c:	xor    esi,esi
 100b93e:	mov    ebx,esi
 100b940:	mov    QWORD PTR [rsp+0x20],rbx
 100b945:	test   eax,eax
 100b947:	je     0x100b950
 100b949:	cmp    eax,0x720
 100b94e:	jne    0x100b9bd
 100b950:	lea    rdx,[rsp+0x20]
 100b955:	lea    rcx,[rsp+0x30]
 100b95a:	call   QWORD PTR [rip+0xffffffffffff5b78]        # 0x10014d8
 100b960:	test   eax,eax
 100b962:	jne    0x100b9b8
 100b964:	mov    rbx,QWORD PTR [rsp+0x20]
 100b969:	nop    DWORD PTR [rax+0x0]
 100b970:	inc    rdi
 100b973:	cmp    BYTE PTR [rbx+rdi*1],0x0
 100b977:	jne    0x100b970
 100b979:	test   edi,edi
 100b97b:	je     0x100b9bd
 100b97d:	nop    DWORD PTR [rax]
 100b980:	movzx  eax,BYTE PTR [rbx]
 100b983:	test   al,al
 100b985:	je     0x100b9b8
 100b987:	cmp    al,0x30
 100b989:	jl     0x100b98f
 100b98b:	cmp    al,0x39
 100b98d:	jle    0x100b99f
 100b98f:	cmp    al,0x61
 100b991:	jl     0x100b997
 100b993:	cmp    al,0x66
 100b995:	jle    0x100b99f
 100b997:	cmp    al,0x41
 100b999:	jl     0x100b9af
 100b99b:	cmp    al,0x46
 100b99d:	jg     0x100b9af
 100b99f:	mov    r8,rbx
 100b9a2:	mov    edx,0x1
 100b9a7:	mov    rcx,rbp
 100b9aa:	call   0x1008030
 100b9af:	inc    esi
 100b9b1:	inc    rbx
 100b9b4:	cmp    esi,edi
 100b9b6:	jb     0x100b980
 100b9b8:	mov    rbx,QWORD PTR [rsp+0x20]
 100b9bd:	test   rbx,rbx
 100b9c0:	je     0x100b9cd
 100b9c2:	lea    rcx,[rsp+0x20]
 100b9c7:	call   QWORD PTR [rip+0xffffffffffff5b03]        # 0x10014d0
 100b9cd:	mov    rcx,QWORD PTR [rsp+0x78]
 100b9d2:	xor    rcx,rsp
 100b9d5:	call   0x1004cb0
 100b9da:	lea    r11,[rsp+0x80]
 100b9e2:	mov    rbx,QWORD PTR [r11+0x10]
 100b9e6:	mov    rbp,QWORD PTR [r11+0x20]
 100b9ea:	mov    rsi,QWORD PTR [r11+0x28]
 100b9ee:	mov    rsp,r11
 100b9f1:	pop    rdi
 100b9f2:	ret    
 100b9f3:	int3   
 100b9f4:	int3   
 100b9f5:	int3   
 100b9f6:	int3   
 100b9f7:	int3   
 100b9f8:	int3   
 100b9f9:	int3   
 100b9fa:	int3   
 100b9fb:	int3   
 100b9fc:	int3   
 100b9fd:	int3   
 100b9fe:	int3   
 100b9ff:	int3   
 100ba00:	sub    rsp,0x28
 100ba04:	mov    rcx,QWORD PTR [rcx]
 100ba07:	test   rcx,rcx
 100ba0a:	je     0x100ba11
 100ba0c:	call   0x10049c8
 100ba11:	add    rsp,0x28
 100ba15:	ret    
 100ba16:	int3   
 100ba17:	int3   
 100ba18:	int3   
 100ba19:	int3   
 100ba1a:	int3   
 100ba1b:	int3   
 100ba1c:	int3   
 100ba1d:	int3   
 100ba1e:	int3   
 100ba1f:	int3   
 100ba20:	rex push rbp
 100ba22:	push   rbx
 100ba23:	push   rsi
 100ba24:	push   rdi
 100ba25:	push   r12
 100ba27:	push   r13
 100ba29:	push   r14
 100ba2b:	push   r15
 100ba2d:	lea    rbp,[rsp-0x798]
 100ba35:	sub    rsp,0x898
 100ba3c:	mov    QWORD PTR [rbp-0x80],0xfffffffffffffffe
 100ba44:	mov    rax,QWORD PTR [rip+0x7705]        # 0x1013150
 100ba4b:	xor    rax,rsp
 100ba4e:	mov    QWORD PTR [rbp+0x780],rax
 100ba55:	mov    DWORD PTR [rsp+0x44],r9d
 100ba5a:	mov    QWORD PTR [rsp+0x48],r8
 100ba5f:	mov    r13,rdx
 100ba62:	mov    r15,rcx
 100ba65:	mov    QWORD PTR [rsp+0x78],rcx
 100ba6a:	lea    rcx,[rip+0xffffffffffff70c7]        # 0x1002b38
 100ba71:	mov    QWORD PTR [r15],rcx
 100ba74:	xor    esi,esi
 100ba76:	mov    QWORD PTR [r15+0x8],rsi
 100ba7a:	mov    QWORD PTR [r15+0x10],rcx
 100ba7e:	mov    QWORD PTR [r15+0x18],rsi
 100ba82:	lea    rcx,[rip+0xffffffffffff70b7]        # 0x1002b40
 100ba89:	mov    QWORD PTR [r15+0x20],rcx
 100ba8d:	mov    QWORD PTR [r15+0x28],rsi
 100ba91:	mov    QWORD PTR [r15+0x30],rsi
 100ba95:	mov    QWORD PTR [r15+0x38],rsi
 100ba99:	mov    DWORD PTR [r15+0x40],esi
 100ba9d:	mov    QWORD PTR [r15+0x48],rsi
 100baa1:	mov    QWORD PTR [r15+0x50],rsi
 100baa5:	mov    DWORD PTR [r15+0x58],esi
 100baa9:	mov    QWORD PTR [r15+0x60],rsi
 100baad:	mov    QWORD PTR [r15+0x68],rsi
 100bab1:	mov    DWORD PTR [r15+0x70],esi
 100bab5:	mov    QWORD PTR [r15+0x78],rsi
 100bab9:	mov    QWORD PTR [r15+0x80],rsi
 100bac0:	mov    DWORD PTR [r15+0x88],esi
 100bac7:	mov    QWORD PTR [r15+0x90],rsi
 100bace:	mov    QWORD PTR [r15+0x98],rsi
 100bad5:	mov    DWORD PTR [r15+0xa0],esi
 100badc:	lea    rbx,[r15+0xa8]
 100bae3:	mov    QWORD PTR [rbx],rsi
 100bae6:	mov    QWORD PTR [rbx+0x8],rsi
 100baea:	mov    QWORD PTR [rbx+0x10],rsi
 100baee:	mov    ecx,r9d
 100baf1:	mov    eax,0x53
 100baf6:	mul    rcx
 100baf9:	mov    rcx,0xffffffffffffffff
 100bb00:	cmovo  rax,rcx
 100bb04:	mov    rcx,rax
 100bb07:	call   0x1004a94
 100bb0c:	mov    QWORD PTR [rbx+0x10],rax
 100bb10:	mov    eax,DWORD PTR [rsp+0x44]
 100bb14:	mov    DWORD PTR [rbx],eax
 100bb16:	mov    DWORD PTR [r15+0xd0],esi
 100bb1d:	mov    ecx,DWORD PTR [r13+0x8]
 100bb21:	mov    rax,QWORD PTR [rsp+0x48]
 100bb26:	sub    ecx,DWORD PTR [rax]
 100bb28:	sub    ecx,DWORD PTR [r13+0x0]
 100bb2c:	mov    eax,DWORD PTR [rax+0x8]
 100bb2f:	add    eax,0x32
 100bb32:	add    eax,ecx
 100bb34:	mov    DWORD PTR [rsp+0x40],eax
 100bb38:	mov    rcx,QWORD PTR [r15+0x60]
 100bb3c:	test   rcx,rcx
 100bb3f:	je     0x100bb4a
 100bb41:	call   0x10049c8
 100bb46:	mov    eax,DWORD PTR [rsp+0x40]
 100bb4a:	mov    ecx,eax
 100bb4c:	call   0x1004a94
 100bb51:	mov    QWORD PTR [r15+0x60],rax
 100bb55:	mov    QWORD PTR [r15+0x68],rax
 100bb59:	mov    ecx,DWORD PTR [rsp+0x40]
 100bb5d:	mov    DWORD PTR [r15+0x70],ecx
 100bb61:	mov    BYTE PTR [rax],0x0
 100bb64:	mov    ecx,DWORD PTR [r13+0x8]
 100bb68:	mov    rax,QWORD PTR [rsp+0x48]
 100bb6d:	sub    ecx,DWORD PTR [rax]
 100bb6f:	sub    ecx,DWORD PTR [r13+0x0]
 100bb73:	mov    eax,DWORD PTR [rax+0x8]
 100bb76:	add    eax,0x32
 100bb79:	add    eax,ecx
 100bb7b:	mov    DWORD PTR [rsp+0x40],eax
 100bb7f:	mov    rcx,QWORD PTR [r15+0x78]
 100bb83:	test   rcx,rcx
 100bb86:	je     0x100bb91
 100bb88:	call   0x10049c8
 100bb8d:	mov    eax,DWORD PTR [rsp+0x40]
 100bb91:	mov    ecx,eax
 100bb93:	call   0x1004a94
 100bb98:	mov    QWORD PTR [r15+0x78],rax
 100bb9c:	mov    QWORD PTR [r15+0x80],rax
 100bba3:	mov    ecx,DWORD PTR [rsp+0x40]
 100bba7:	mov    DWORD PTR [r15+0x88],ecx
 100bbae:	mov    BYTE PTR [rax],0x0
 100bbb1:	mov    ecx,DWORD PTR [r13+0x8]
 100bbb5:	mov    rax,QWORD PTR [rsp+0x48]
 100bbba:	sub    ecx,DWORD PTR [rax]
 100bbbc:	sub    ecx,DWORD PTR [r13+0x0]
 100bbc0:	mov    eax,DWORD PTR [rax+0x8]
 100bbc3:	add    eax,0x32
 100bbc6:	add    eax,ecx
 100bbc8:	mov    DWORD PTR [rsp+0x40],eax
 100bbcc:	mov    rcx,QWORD PTR [r15+0x90]
 100bbd3:	test   rcx,rcx
 100bbd6:	je     0x100bbe1
 100bbd8:	call   0x10049c8
 100bbdd:	mov    eax,DWORD PTR [rsp+0x40]
 100bbe1:	mov    ecx,eax
 100bbe3:	call   0x1004a94
 100bbe8:	mov    QWORD PTR [r15+0x90],rax
 100bbef:	mov    QWORD PTR [r15+0x98],rax
 100bbf6:	mov    ecx,DWORD PTR [rsp+0x40]
 100bbfa:	mov    DWORD PTR [r15+0xa0],ecx
 100bc01:	mov    BYTE PTR [rax],0x0
 100bc04:	mov    edx,DWORD PTR [r13+0x8]
 100bc08:	sub    edx,DWORD PTR [r13+0x0]
 100bc0c:	mov    r8,QWORD PTR [r13+0x0]
 100bc10:	lea    rcx,[r15+0x48]
 100bc14:	call   0x1007f40
 100bc19:	mov    rax,QWORD PTR [rsp+0x48]
 100bc1e:	mov    edx,DWORD PTR [rax+0x8]
 100bc21:	sub    edx,DWORD PTR [rax]
 100bc23:	mov    r8,QWORD PTR [rax]
 100bc26:	lea    rcx,[r15+0x30]
 100bc2a:	call   0x1007f40
 100bc2f:	mov    QWORD PTR [r15+0xc0],rsi
 100bc36:	lea    rcx,[rbp-0x50]
 100bc3a:	call   0x10085d0
 100bc3f:	nop
 100bc40:	mov    edx,DWORD PTR [r15+0x50]
 100bc44:	sub    edx,DWORD PTR [r15+0x48]
 100bc48:	mov    r8,QWORD PTR [r15+0x48]
 100bc4c:	lea    rcx,[r15+0x60]
 100bc50:	call   0x1007f40
 100bc55:	lea    r8,[rip+0xffffffffffff74ec]        # 0x1003148
 100bc5c:	mov    edx,0x1
 100bc61:	lea    rcx,[r15+0x60]
 100bc65:	call   0x1008030
 100bc6a:	mov    edx,DWORD PTR [r15+0x38]
 100bc6e:	sub    edx,DWORD PTR [r15+0x30]
 100bc72:	mov    r8,QWORD PTR [r15+0x30]
 100bc76:	lea    rcx,[r15+0x60]
 100bc7a:	call   0x1008030
 100bc7f:	lea    r8,[rip+0xffffffffffff754e]        # 0x10031d4
 100bc86:	mov    edx,0x4
 100bc8b:	lea    rcx,[r15+0x60]
 100bc8f:	call   0x1008030
 100bc94:	mov    rcx,QWORD PTR [r15+0x8]
 100bc98:	test   rcx,rcx
 100bc9b:	je     0x100bcad
 100bc9d:	cmp    rcx,0xffffffffffffffff
 100bca1:	je     0x100bcad
 100bca3:	call   QWORD PTR [rip+0xffffffffffff54ef]        # 0x1001198
 100bca9:	mov    QWORD PTR [r15+0x8],rsi
 100bcad:	mov    QWORD PTR [rsp+0x30],rsi
 100bcb2:	mov    DWORD PTR [rsp+0x28],0x80
 100bcba:	mov    DWORD PTR [rsp+0x20],0x4
 100bcc2:	lea    r9,[rbp+0x18]
 100bcc6:	mov    edx,0xc0000000
 100bccb:	mov    r8d,0x1
 100bcd1:	mov    rcx,QWORD PTR [r15+0x60]
 100bcd5:	call   QWORD PTR [rip+0xffffffffffff559d]        # 0x1001278
 100bcdb:	mov    r13,rax
 100bcde:	mov    rcx,QWORD PTR [r15+0x8]
 100bce2:	cmp    rcx,rax
 100bce5:	je     0x100bcf6
 100bce7:	test   rcx,rcx
 100bcea:	je     0x100bcf2
 100bcec:	call   QWORD PTR [rip+0xffffffffffff54a6]        # 0x1001198
 100bcf2:	mov    QWORD PTR [r15+0x8],r13
 100bcf6:	mov    rax,QWORD PTR [r15+0x8]
 100bcfa:	test   rax,rax
 100bcfd:	je     0x100c1e6
 100bd03:	cmp    rax,0xffffffffffffffff
 100bd07:	je     0x100c1e6
 100bd0d:	call   QWORD PTR [rip+0xffffffffffff5605]        # 0x1001318
 100bd13:	xor    cl,cl
 100bd15:	movzx  r13d,cl
 100bd19:	cmp    eax,0xb7
 100bd1e:	mov    eax,0x1
 100bd23:	cmove  r13d,eax
 100bd27:	mov    QWORD PTR [rsp+0x28],rsi
 100bd2c:	mov    DWORD PTR [rsp+0x20],0x80000
 100bd34:	xor    r9d,r9d
 100bd37:	lea    r8d,[rax+0x3]
 100bd3b:	lea    rdx,[rbp+0x18]
 100bd3f:	mov    rcx,QWORD PTR [r15+0x8]
 100bd43:	call   QWORD PTR [rip+0xffffffffffff54e7]        # 0x1001230
 100bd49:	mov    QWORD PTR [rsp+0x48],rax
 100bd4e:	mov    rcx,QWORD PTR [r15+0x18]
 100bd52:	cmp    rcx,rax
 100bd55:	je     0x100bd6b
 100bd57:	test   rcx,rcx
 100bd5a:	je     0x100bd67
 100bd5c:	call   QWORD PTR [rip+0xffffffffffff5436]        # 0x1001198
 100bd62:	mov    rax,QWORD PTR [rsp+0x48]
 100bd67:	mov    QWORD PTR [r15+0x18],rax
 100bd6b:	mov    rcx,QWORD PTR [r15+0x18]
 100bd6f:	test   rcx,rcx
 100bd72:	je     0x100c11d
 100bd78:	cmp    rcx,0xffffffffffffffff
 100bd7c:	je     0x100c11d
 100bd82:	mov    DWORD PTR [r15+0xcc],0x80000
 100bd8d:	mov    QWORD PTR [rsp+0x20],rsi
 100bd92:	xor    r9d,r9d
 100bd95:	xor    r8d,r8d
 100bd98:	mov    edx,0xf001f
 100bd9d:	call   QWORD PTR [rip+0xffffffffffff546d]        # 0x1001210
 100bda3:	mov    QWORD PTR [r15+0xc0],rax
 100bdaa:	test   rax,rax
 100bdad:	jne    0x100be6b
 100bdb3:	call   QWORD PTR [rip+0xffffffffffff555f]        # 0x1001318
 100bdb9:	mov    DWORD PTR [rsp+0x20],eax
 100bdbd:	lea    r9,[rip+0xffffffffffff749c]        # 0x1003260
 100bdc4:	lea    r8,[rip+0xffffffffffff7445]        # 0x1003210
 100bdcb:	mov    edx,0x604
 100bdd0:	lea    rcx,[rbp+0x170]
 100bdd7:	call   QWORD PTR [rip+0xffffffffffff561b]        # 0x10013f8
 100bddd:	lea    r8,[rbp+0x170]
 100bde4:	mov    edx,0x2
 100bde9:	mov    rcx,r15
 100bdec:	call   0x100c390
 100bdf1:	mov    rcx,r15
 100bdf4:	call   0x1008230
 100bdf9:	lea    rcx,[r15+0x10]
 100bdfd:	call   0x1008230
 100be02:	call   QWORD PTR [rip+0xffffffffffff5510]        # 0x1001318
 100be08:	test   eax,eax
 100be0a:	jle    0x100be14
 100be0c:	movzx  eax,ax
 100be0f:	or     eax,0x80070000
 100be14:	mov    r9d,eax
 100be17:	mov    r8d,0x97d
 100be1d:	lea    rdx,[rip+0xffffffffffff6e4c]        # 0x1002c70
 100be24:	lea    rcx,[rbp-0x78]
 100be28:	call   0x10036dc
 100be2d:	mov    rcx,QWORD PTR [rax]
 100be30:	mov    QWORD PTR [rsp+0x50],rcx
 100be35:	mov    rcx,QWORD PTR [rax+0x8]
 100be39:	mov    QWORD PTR [rsp+0x58],rcx
 100be3e:	mov    rcx,QWORD PTR [rax+0x10]
 100be42:	mov    QWORD PTR [rsp+0x60],rcx
 100be47:	mov    rcx,QWORD PTR [rax+0x18]
 100be4b:	mov    QWORD PTR [rsp+0x68],rcx
 100be50:	mov    rax,QWORD PTR [rax+0x20]
 100be54:	mov    QWORD PTR [rsp+0x70],rax
 100be59:	lea    rdx,[rip+0x5490]        # 0x10112f0
 100be60:	lea    rcx,[rsp+0x50]
 100be65:	call   0x1004bf0
 100be6a:	int3   
 100be6b:	mov    rdx,rax
 100be6e:	lea    rcx,[r15+0x20]
 100be72:	call   0x10082d0
 100be77:	test   r13b,r13b
 100be7a:	mov    r13d,DWORD PTR [rsp+0x44]
 100be7f:	je     0x100bf1f
 100be85:	test   r13d,r13d
 100be88:	je     0x100bf1f
 100be8e:	mov    r8,QWORD PTR [r15+0xc0]
 100be95:	cmp    BYTE PTR [r8],0xff
 100be99:	jne    0x100bf1f
 100be9f:	cmp    BYTE PTR [r8+0x1],0xfe
 100bea4:	jne    0x100bf1f
 100bea6:	lea    r9,[rip+0xffffffffffff4153]        # 0x1000000
 100bead:	mov    rdx,QWORD PTR [r8+0x2]
 100beb1:	cmp    rdx,QWORD PTR [r9+0x2e18]
 100beb8:	jne    0x100beda
 100beba:	mov    edx,DWORD PTR [r8+0xa]
 100bebe:	cmp    edx,DWORD PTR [r9+0x2e20]
 100bec5:	jne    0x100beda
 100bec7:	movzx  edx,WORD PTR [r8+0xe]
 100becc:	cmp    dx,WORD PTR [r9+0x2e24]
 100bed4:	jne    0x100beda
 100bed6:	mov    eax,esi
 100bed8:	jmp    0x100bedf
 100beda:	sbb    eax,eax
 100bedc:	sbb    eax,0xffffffff
 100bedf:	test   eax,eax
 100bee1:	jne    0x100bf1f
 100bee3:	mov    rdx,QWORD PTR [r8+0x7fff0]
 100beea:	cmp    rdx,QWORD PTR [r9+0x2bc8]
 100bef1:	jne    0x100bf03
 100bef3:	mov    rdx,QWORD PTR [r8+0x7fff8]
 100befa:	cmp    rdx,QWORD PTR [r9+0x2bd0]
 100bf01:	je     0x100bf0a
 100bf03:	sbb    eax,eax
 100bf05:	sbb    eax,0xffffffff
 100bf08:	mov    esi,eax
 100bf0a:	test   esi,esi
 100bf0c:	jne    0x100bf1f
 100bf0e:	mov    rcx,r8
 100bf11:	call   0x100ac60
 100bf16:	mov    DWORD PTR [r15+0xc8],eax
 100bf1d:	jmp    0x100bf61
 100bf1f:	mov    rcx,QWORD PTR [r15+0xc0]
 100bf26:	mov    WORD PTR [rcx],0xfeff
 100bf2b:	mov    rax,QWORD PTR [rip+0xffffffffffff6ee6]        # 0x1002e18
 100bf32:	mov    QWORD PTR [rcx+0x2],rax
 100bf36:	mov    eax,DWORD PTR [rip+0xffffffffffff6ee4]        # 0x1002e20
 100bf3c:	mov    DWORD PTR [rcx+0xa],eax
 100bf3f:	movzx  eax,WORD PTR [rip+0xffffffffffff6ede]        # 0x1002e24
 100bf46:	mov    WORD PTR [rcx+0xe],ax
 100bf4a:	mov    DWORD PTR [r15+0xc8],0x10
 100bf55:	mov    rcx,QWORD PTR [r15+0xc0]
 100bf5c:	call   0x100ac00
 100bf61:	mov    edx,DWORD PTR [r15+0x50]
 100bf65:	sub    edx,DWORD PTR [r15+0x48]
 100bf69:	mov    r8,QWORD PTR [r15+0x48]
 100bf6d:	lea    rcx,[r15+0x78]
 100bf71:	call   0x1007f40
 100bf76:	lea    r8,[rip+0xffffffffffff71cb]        # 0x1003148
 100bf7d:	mov    esi,0x1
 100bf82:	mov    edx,esi
 100bf84:	lea    rcx,[r15+0x78]
 100bf88:	call   0x1008030
 100bf8d:	mov    edx,DWORD PTR [r15+0x38]
 100bf91:	sub    edx,DWORD PTR [r15+0x30]
 100bf95:	mov    r8,QWORD PTR [r15+0x30]
 100bf99:	lea    rcx,[r15+0x78]
 100bf9d:	call   0x1008030
 100bfa2:	lea    r8,[rip+0xffffffffffff72f7]        # 0x10032a0
 100bfa9:	lea    edx,[rsi+0x5]
 100bfac:	lea    rcx,[r15+0x78]
 100bfb0:	call   0x1008030
 100bfb5:	lea    rdx,[rbp+0x30]
 100bfb9:	mov    rcx,QWORD PTR [r15+0x78]
 100bfbd:	call   QWORD PTR [rip+0xffffffffffff52c5]        # 0x1001288
 100bfc3:	mov    r12,rax
 100bfc6:	cmp    rax,0xffffffffffffffff
 100bfca:	je     0x100c0fc
 100bfd0:	movsxd r13,r13d
 100bfd3:	test   BYTE PTR [rbp+0x30],0x10
 100bfd7:	jne    0x100c0e7
 100bfdd:	test   r13,r13
 100bfe0:	je     0x100c097
 100bfe6:	mov    eax,DWORD PTR [rbx]
 100bfe8:	cmp    DWORD PTR [rbx+0x4],eax
 100bfeb:	jne    0x100c04a
 100bfed:	mov    rcx,rbx
 100bff0:	call   0x100acc0
 100bff5:	mov    rsi,rax
 100bff8:	mov    edx,DWORD PTR [r15+0x50]
 100bffc:	sub    edx,DWORD PTR [r15+0x48]
 100c000:	mov    r8,QWORD PTR [r15+0x48]
 100c004:	lea    rcx,[r15+0x60]
 100c008:	call   0x1007f40
 100c00d:	lea    r8,[rip+0xffffffffffff7134]        # 0x1003148
 100c014:	mov    edx,0x1
 100c019:	lea    rcx,[r15+0x60]
 100c01d:	call   0x1008030
 100c022:	or     rdx,0xffffffffffffffff
 100c026:	inc    rdx
 100c029:	cmp    BYTE PTR [rsi+rdx*1],0x0
 100c02d:	jne    0x100c026
 100c02f:	mov    r8,rsi
 100c032:	lea    rcx,[r15+0x60]
 100c036:	call   0x1008030
 100c03b:	mov    rcx,QWORD PTR [r15+0x60]
 100c03f:	call   QWORD PTR [rip+0xffffffffffff523b]        # 0x1001280
 100c045:	mov    esi,0x1
 100c04a:	mov    eax,DWORD PTR [rbx]
 100c04c:	cmp    DWORD PTR [rbx+0x4],eax
 100c04f:	je     0x100c0e7
 100c055:	mov    ecx,DWORD PTR [rbx+0xc]
 100c058:	imul   rcx,rcx,0x53
 100c05c:	add    rcx,QWORD PTR [rbx+0x10]
 100c060:	mov    r9d,0x52
 100c066:	lea    r8,[rbp+0x5c]
 100c06a:	lea    edx,[r9+0x1]
 100c06e:	call   QWORD PTR [rip+0xffffffffffff52dc]        # 0x1001350
 100c074:	mov    r11d,DWORD PTR [rbx+0xc]
 100c078:	imul   r11,r11,0x53
 100c07c:	mov    rax,QWORD PTR [rbx+0x10]
 100c080:	mov    BYTE PTR [r11+rax*1+0x52],0x0
 100c086:	inc    DWORD PTR [rbx+0x4]
 100c089:	mov    eax,DWORD PTR [rbx+0xc]
 100c08c:	inc    eax
 100c08e:	xor    edx,edx
 100c090:	div    DWORD PTR [rbx]
 100c092:	mov    DWORD PTR [rbx+0xc],edx
 100c095:	jmp    0x100c0e7
 100c097:	mov    edx,DWORD PTR [r15+0x50]
 100c09b:	sub    edx,DWORD PTR [r15+0x48]
 100c09f:	mov    r8,QWORD PTR [r15+0x48]
 100c0a3:	lea    rcx,[r15+0x60]
 100c0a7:	call   0x1007f40
 100c0ac:	lea    r8,[rip+0xffffffffffff7095]        # 0x1003148
 100c0b3:	mov    edx,esi
 100c0b5:	lea    rcx,[r15+0x60]
 100c0b9:	call   0x1008030
 100c0be:	lea    r11,[rbp+0x5c]
 100c0c2:	or     rdx,0xffffffffffffffff
 100c0c6:	inc    rdx
 100c0c9:	cmp    BYTE PTR [r11+rdx*1],0x0
 100c0ce:	jne    0x100c0c6
 100c0d0:	lea    r8,[rbp+0x5c]
 100c0d4:	lea    rcx,[r15+0x60]
 100c0d8:	call   0x1008030
 100c0dd:	mov    rcx,QWORD PTR [r15+0x60]
 100c0e1:	call   QWORD PTR [rip+0xffffffffffff5199]        # 0x1001280
 100c0e7:	lea    rdx,[rbp+0x30]
 100c0eb:	mov    rcx,r12
 100c0ee:	call   QWORD PTR [rip+0xffffffffffff519c]        # 0x1001290
 100c0f4:	test   eax,eax
 100c0f6:	jne    0x100bfd3
 100c0fc:	test   r12,r12
 100c0ff:	je     0x100c10b
 100c101:	mov    rcx,r12
 100c104:	call   QWORD PTR [rip+0xffffffffffff50ee]        # 0x10011f8
 100c10a:	nop
 100c10b:	lea    rcx,[rbp-0x50]
 100c10f:	call   0x1008720
 100c114:	nop
 100c115:	mov    rax,r15
 100c118:	jmp    0x100c296
 100c11d:	call   QWORD PTR [rip+0xffffffffffff51f5]        # 0x1001318
 100c123:	mov    DWORD PTR [rsp+0x20],eax
 100c127:	lea    r9,[rip+0xffffffffffff70f2]        # 0x1003220
 100c12e:	lea    r8,[rip+0xffffffffffff70db]        # 0x1003210
 100c135:	mov    edx,0x604
 100c13a:	lea    rcx,[rbp+0x170]
 100c141:	call   QWORD PTR [rip+0xffffffffffff52b1]        # 0x10013f8
 100c147:	call   QWORD PTR [rip+0xffffffffffff51cb]        # 0x1001318
 100c14d:	mov    ebx,eax
 100c14f:	lea    rcx,[rbp+0x170]
 100c156:	call   QWORD PTR [rip+0xffffffffffff50fc]        # 0x1001258
 100c15c:	mov    ecx,ebx
 100c15e:	call   QWORD PTR [rip+0xffffffffffff4ffc]        # 0x1001160
 100c164:	mov    rcx,QWORD PTR [r15+0x8]
 100c168:	test   rcx,rcx
 100c16b:	je     0x100c17d
 100c16d:	cmp    rcx,0xffffffffffffffff
 100c171:	je     0x100c17d
 100c173:	call   QWORD PTR [rip+0xffffffffffff501f]        # 0x1001198
 100c179:	mov    QWORD PTR [r15+0x8],rsi
 100c17d:	call   QWORD PTR [rip+0xffffffffffff5195]        # 0x1001318
 100c183:	test   eax,eax
 100c185:	jle    0x100c18f
 100c187:	movzx  eax,ax
 100c18a:	or     eax,0x80070000
 100c18f:	mov    r9d,eax
 100c192:	mov    r8d,0x967
 100c198:	lea    rdx,[rip+0xffffffffffff6ad1]        # 0x1002c70
 100c19f:	lea    rcx,[rbp-0x78]
 100c1a3:	call   0x10036dc
 100c1a8:	mov    rcx,QWORD PTR [rax]
 100c1ab:	mov    QWORD PTR [rsp+0x50],rcx
 100c1b0:	mov    rcx,QWORD PTR [rax+0x8]
 100c1b4:	mov    QWORD PTR [rsp+0x58],rcx
 100c1b9:	mov    rcx,QWORD PTR [rax+0x10]
 100c1bd:	mov    QWORD PTR [rsp+0x60],rcx
 100c1c2:	mov    rcx,QWORD PTR [rax+0x18]
 100c1c6:	mov    QWORD PTR [rsp+0x68],rcx
 100c1cb:	mov    rax,QWORD PTR [rax+0x20]
 100c1cf:	mov    QWORD PTR [rsp+0x70],rax
 100c1d4:	lea    rdx,[rip+0x5115]        # 0x10112f0
 100c1db:	lea    rcx,[rsp+0x50]
 100c1e0:	call   0x1004bf0
 100c1e5:	int3   
 100c1e6:	call   QWORD PTR [rip+0xffffffffffff512c]        # 0x1001318
 100c1ec:	mov    DWORD PTR [rsp+0x20],eax
 100c1f0:	lea    r9,[rip+0xffffffffffff6fe9]        # 0x10031e0
 100c1f7:	lea    r8,[rip+0xffffffffffff7012]        # 0x1003210
 100c1fe:	mov    edx,0x604
 100c203:	lea    rcx,[rbp+0x170]
 100c20a:	call   QWORD PTR [rip+0xffffffffffff51e8]        # 0x10013f8
 100c210:	call   QWORD PTR [rip+0xffffffffffff5102]        # 0x1001318
 100c216:	mov    ebx,eax
 100c218:	lea    rcx,[rbp+0x170]
 100c21f:	call   QWORD PTR [rip+0xffffffffffff5033]        # 0x1001258
 100c225:	mov    ecx,ebx
 100c227:	call   QWORD PTR [rip+0xffffffffffff4f33]        # 0x1001160
 100c22d:	call   QWORD PTR [rip+0xffffffffffff50e5]        # 0x1001318
 100c233:	test   eax,eax
 100c235:	jle    0x100c23f
 100c237:	movzx  eax,ax
 100c23a:	or     eax,0x80070000
 100c23f:	mov    r9d,eax
 100c242:	mov    r8d,0x94d
 100c248:	lea    rdx,[rip+0xffffffffffff6a21]        # 0x1002c70
 100c24f:	lea    rcx,[rbp-0x78]
 100c253:	call   0x10036dc
 100c258:	mov    rcx,QWORD PTR [rax]
 100c25b:	mov    QWORD PTR [rsp+0x50],rcx
 100c260:	mov    rcx,QWORD PTR [rax+0x8]
 100c264:	mov    QWORD PTR [rsp+0x58],rcx
 100c269:	mov    rcx,QWORD PTR [rax+0x10]
 100c26d:	mov    QWORD PTR [rsp+0x60],rcx
 100c272:	mov    rcx,QWORD PTR [rax+0x18]
 100c276:	mov    QWORD PTR [rsp+0x68],rcx
 100c27b:	mov    rax,QWORD PTR [rax+0x20]
 100c27f:	mov    QWORD PTR [rsp+0x70],rax
 100c284:	lea    rdx,[rip+0x5065]        # 0x10112f0
 100c28b:	lea    rcx,[rsp+0x50]
 100c290:	call   0x1004bf0
 100c295:	nop
 100c296:	mov    rcx,QWORD PTR [rbp+0x780]
 100c29d:	xor    rcx,rsp
 100c2a0:	call   0x1004cb0
 100c2a5:	add    rsp,0x898
 100c2ac:	pop    r15
 100c2ae:	pop    r14
 100c2b0:	pop    r13
 100c2b2:	pop    r12
 100c2b4:	pop    rdi
 100c2b5:	pop    rsi
 100c2b6:	pop    rbx
 100c2b7:	pop    rbp
 100c2b8:	ret    
 100c2b9:	int3   
 100c2ba:	int3   
 100c2bb:	int3   
 100c2bc:	int3   
 100c2bd:	int3   
 100c2be:	int3   
 100c2bf:	int3   
 100c2c0:	mov    QWORD PTR [rsp+0x8],rbx
 100c2c5:	push   rsi
 100c2c6:	sub    rsp,0x20
 100c2ca:	mov    rbx,rcx
 100c2cd:	mov    rcx,QWORD PTR [rcx+0xb8]
 100c2d4:	call   0x10049c8
 100c2d9:	mov    rcx,QWORD PTR [rbx+0x90]
 100c2e0:	call   0x10049c8
 100c2e5:	mov    rcx,QWORD PTR [rbx+0x78]
 100c2e9:	call   0x10049c8
 100c2ee:	mov    rcx,QWORD PTR [rbx+0x60]
 100c2f2:	call   0x10049c8
 100c2f7:	mov    rcx,QWORD PTR [rbx+0x48]
 100c2fb:	call   0x10049c8
 100c300:	mov    rcx,QWORD PTR [rbx+0x30]
 100c304:	call   0x10049c8
 100c309:	mov    rcx,QWORD PTR [rbx+0x28]
 100c30d:	lea    rax,[rip+0xffffffffffff682c]        # 0x1002b40
 100c314:	mov    QWORD PTR [rbx+0x20],rax
 100c318:	test   rcx,rcx
 100c31b:	je     0x100c32b
 100c31d:	call   QWORD PTR [rip+0xffffffffffff4efd]        # 0x1001220
 100c323:	mov    QWORD PTR [rbx+0x28],0x0
 100c32b:	mov    rcx,QWORD PTR [rbx+0x18]
 100c32f:	lea    rsi,[rip+0xffffffffffff6802]        # 0x1002b38
 100c336:	mov    QWORD PTR [rbx+0x10],rsi
 100c33a:	test   rcx,rcx
 100c33d:	je     0x100c353
 100c33f:	cmp    rcx,0xffffffffffffffff
 100c343:	je     0x100c353
 100c345:	call   QWORD PTR [rip+0xffffffffffff4e4d]        # 0x1001198
 100c34b:	mov    QWORD PTR [rbx+0x18],0x0
 100c353:	mov    rcx,QWORD PTR [rbx+0x8]
 100c357:	mov    QWORD PTR [rbx],rsi
 100c35a:	test   rcx,rcx
 100c35d:	je     0x100c373
 100c35f:	cmp    rcx,0xffffffffffffffff
 100c363:	je     0x100c373
 100c365:	call   QWORD PTR [rip+0xffffffffffff4e2d]        # 0x1001198
 100c36b:	mov    QWORD PTR [rbx+0x8],0x0
 100c373:	mov    rbx,QWORD PTR [rsp+0x30]
 100c378:	add    rsp,0x20
 100c37c:	pop    rsi
 100c37d:	ret    
 100c37e:	int3   
 100c37f:	int3   
 100c380:	int3   
 100c381:	int3   
 100c382:	int3   
 100c383:	int3   
 100c384:	int3   
 100c385:	int3   
 100c386:	int3   
 100c387:	int3   
 100c388:	int3   
 100c389:	int3   
 100c38a:	int3   
 100c38b:	int3   
 100c38c:	int3   
 100c38d:	int3   
 100c38e:	int3   
 100c38f:	int3   
 100c390:	rex push rdi
 100c392:	push   r14
 100c394:	sub    rsp,0x38
 100c398:	mov    QWORD PTR [rsp+0x58],rbp
 100c39d:	mov    QWORD PTR [rsp+0x60],rsi
 100c3a2:	mov    rdi,r8
 100c3a5:	mov    rsi,rcx
 100c3a8:	mov    ebp,edx
 100c3aa:	call   QWORD PTR [rip+0xffffffffffff4f68]        # 0x1001318
 100c3b0:	mov    r14d,eax
 100c3b3:	test   bpl,0x2
 100c3b7:	je     0x100c3c2
 100c3b9:	mov    rcx,rdi
 100c3bc:	call   QWORD PTR [rip+0xffffffffffff4e96]        # 0x1001258
 100c3c2:	test   bpl,0x1
 100c3c6:	je     0x100c483
 100c3cc:	mov    rcx,QWORD PTR [rsi+0xc0]
 100c3d3:	test   rcx,rcx
 100c3d6:	je     0x100c483
 100c3dc:	mov    QWORD PTR [rsp+0x50],rbx
 100c3e1:	mov    QWORD PTR [rsp+0x30],r15
 100c3e6:	or     rbx,0xffffffffffffffff
 100c3ea:	nop    WORD PTR [rax+rax*1+0x0]
 100c3f0:	inc    rbx
 100c3f3:	cmp    BYTE PTR [rdi+rbx*1],0x0
 100c3f7:	jne    0x100c3f0
 100c3f9:	mov    eax,DWORD PTR [rsi+0xc8]
 100c3ff:	mov    r9d,ebx
 100c402:	mov    r8,rdi
 100c405:	add    rax,rcx
 100c408:	mov    edx,0x9
 100c40d:	mov    ecx,0x4e4
 100c412:	mov    DWORD PTR [rsp+0x28],0x0
 100c41a:	mov    QWORD PTR [rsp+0x20],rax
 100c41f:	call   QWORD PTR [rip+0xffffffffffff4d6b]        # 0x1001190
 100c425:	mov    ecx,DWORD PTR [rsi+0xc8]
 100c42b:	movsxd r15,eax
 100c42e:	lea    r8,[rcx+r15*2]
 100c432:	cmp    r8,0x7ffe2
 100c439:	jbe    0x100c443
 100c43b:	mov    rcx,rsi
 100c43e:	call   0x100c960
 100c443:	mov    r8d,DWORD PTR [rsi+0xc8]
 100c44a:	mov    DWORD PTR [rsp+0x28],r15d
 100c44f:	mov    r9d,ebx
 100c452:	add    r8,QWORD PTR [rsi+0xc0]
 100c459:	mov    edx,0x9
 100c45e:	mov    ecx,0x4e4
 100c463:	mov    QWORD PTR [rsp+0x20],r8
 100c468:	mov    r8,rdi
 100c46b:	call   QWORD PTR [rip+0xffffffffffff4d1f]        # 0x1001190
 100c471:	mov    r15,QWORD PTR [rsp+0x30]
 100c476:	mov    rbx,QWORD PTR [rsp+0x50]
 100c47b:	add    eax,eax
 100c47d:	add    DWORD PTR [rsi+0xc8],eax
 100c483:	mov    rsi,QWORD PTR [rsp+0x60]
 100c488:	test   bpl,0x8
 100c48c:	je     0x100c4a8
 100c48e:	call   QWORD PTR [rip+0xffffffffffff4f04]        # 0x1001398
 100c494:	lea    rdx,[rip+0xffffffffffff6e09]        # 0x10032a4
 100c49b:	mov    r8,rdi
 100c49e:	lea    rcx,[rax+0x60]
 100c4a2:	call   QWORD PTR [rip+0xffffffffffff4ee8]        # 0x1001390
 100c4a8:	test   bpl,0x4
 100c4ac:	mov    rbp,QWORD PTR [rsp+0x58]
 100c4b1:	je     0x100c4cd
 100c4b3:	call   QWORD PTR [rip+0xffffffffffff4edf]        # 0x1001398
 100c4b9:	lea    rdx,[rip+0xffffffffffff6de4]        # 0x10032a4
 100c4c0:	mov    r8,rdi
 100c4c3:	lea    rcx,[rax+0x30]
 100c4c7:	call   QWORD PTR [rip+0xffffffffffff4ec3]        # 0x1001390
 100c4cd:	mov    ecx,r14d
 100c4d0:	add    rsp,0x38
 100c4d4:	pop    r14
 100c4d6:	pop    rdi
 100c4d7:	rex.W jmp QWORD PTR [rip+0xffffffffffff4c82]        # 0x1001160
 100c4de:	int3   
 100c4df:	int3   
 100c4e0:	int3   
 100c4e1:	int3   
 100c4e2:	int3   
 100c4e3:	int3   
 100c4e4:	int3   
 100c4e5:	int3   
 100c4e6:	int3   
 100c4e7:	int3   
 100c4e8:	int3   
 100c4e9:	int3   
 100c4ea:	int3   
 100c4eb:	int3   
 100c4ec:	int3   
 100c4ed:	int3   
 100c4ee:	int3   
 100c4ef:	int3   
 100c4f0:	mov    QWORD PTR [rsp+0x8],rbx
 100c4f5:	mov    QWORD PTR [rsp+0x10],rbp
 100c4fa:	mov    QWORD PTR [rsp+0x18],rsi
 100c4ff:	mov    QWORD PTR [rsp+0x20],rdi
 100c504:	push   r14
 100c506:	sub    rsp,0x20
 100c50a:	mov    ebx,r9d
 100c50d:	mov    rdi,r8
 100c510:	mov    esi,edx
 100c512:	mov    rbp,rcx
 100c515:	call   QWORD PTR [rip+0xffffffffffff4dfd]        # 0x1001318
 100c51b:	mov    r14d,eax
 100c51e:	test   sil,0x2
 100c522:	je     0x100c52d
 100c524:	mov    rcx,rdi
 100c527:	call   QWORD PTR [rip+0xffffffffffff4d33]        # 0x1001260
 100c52d:	test   sil,0x1
 100c531:	je     0x100c579
 100c533:	cmp    QWORD PTR [rbp+0xc0],0x0
 100c53b:	je     0x100c579
 100c53d:	test   ebx,ebx
 100c53f:	jne    0x100c54f
 100c541:	or     rbx,0xffffffffffffffff
 100c545:	inc    rbx
 100c548:	cmp    WORD PTR [rdi+rbx*2],0x0
 100c54d:	jne    0x100c545
 100c54f:	add    ebx,ebx
 100c551:	mov    rcx,rbp
 100c554:	mov    edx,ebx
 100c556:	call   0x100c5f0
 100c55b:	mov    ecx,DWORD PTR [rbp+0xc8]
 100c561:	mov    r8d,ebx
 100c564:	add    rcx,QWORD PTR [rbp+0xc0]
 100c56b:	mov    rdx,rdi
 100c56e:	call   0x1004cd6
 100c573:	add    DWORD PTR [rbp+0xc8],ebx
 100c579:	test   sil,0x8
 100c57d:	je     0x100c599
 100c57f:	call   QWORD PTR [rip+0xffffffffffff4e13]        # 0x1001398
 100c585:	lea    rdx,[rip+0xffffffffffff6d1c]        # 0x10032a8
 100c58c:	mov    r8,rdi
 100c58f:	lea    rcx,[rax+0x60]
 100c593:	call   QWORD PTR [rip+0xffffffffffff4df7]        # 0x1001390
 100c599:	test   sil,0x4
 100c59d:	je     0x100c5b9
 100c59f:	call   QWORD PTR [rip+0xffffffffffff4df3]        # 0x1001398
 100c5a5:	lea    rdx,[rip+0xffffffffffff6cfc]        # 0x10032a8
 100c5ac:	mov    r8,rdi
 100c5af:	lea    rcx,[rax+0x30]
 100c5b3:	call   QWORD PTR [rip+0xffffffffffff4dd7]        # 0x1001390
 100c5b9:	mov    ecx,r14d
 100c5bc:	mov    rbx,QWORD PTR [rsp+0x30]
 100c5c1:	mov    rbp,QWORD PTR [rsp+0x38]
 100c5c6:	mov    rsi,QWORD PTR [rsp+0x40]
 100c5cb:	mov    rdi,QWORD PTR [rsp+0x48]
 100c5d0:	add    rsp,0x20
 100c5d4:	pop    r14
 100c5d6:	rex.W jmp QWORD PTR [rip+0xffffffffffff4b83]        # 0x1001160
 100c5dd:	int3   
 100c5de:	int3   
 100c5df:	int3   
 100c5e0:	int3   
 100c5e1:	int3   
 100c5e2:	int3   
 100c5e3:	int3   
 100c5e4:	int3   
 100c5e5:	int3   
 100c5e6:	int3   
 100c5e7:	int3   
 100c5e8:	int3   
 100c5e9:	int3   
 100c5ea:	int3   
 100c5eb:	int3   
 100c5ec:	int3   
 100c5ed:	int3   
 100c5ee:	int3   
 100c5ef:	int3   
 100c5f0:	rex push rbx
 100c5f2:	sub    rsp,0x70
 100c5f6:	mov    r8d,DWORD PTR [rcx+0xc8]
 100c5fd:	mov    ebx,0x1
 100c602:	lea    eax,[r8+rdx*1]
 100c606:	cmp    eax,0x7ffe2
 100c60b:	jbe    0x100c681
 100c60d:	cmp    edx,0x7ffe2
 100c613:	jbe    0x100c61d
 100c615:	cmp    r8d,0x10
 100c619:	je     0x100c626
 100c61b:	xor    ebx,ebx
 100c61d:	call   0x100c960
 100c622:	test   ebx,ebx
 100c624:	jne    0x100c681
 100c626:	lea    rdx,[rip+0xffffffffffff65b3]        # 0x1002be0
 100c62d:	lea    rcx,[rsp+0x48]
 100c632:	mov    r9d,0x80070057
 100c638:	mov    r8d,0xf1
 100c63e:	call   0x10036dc
 100c643:	lea    rdx,[rip+0x4ca6]        # 0x10112f0
 100c64a:	mov    rcx,QWORD PTR [rax]
 100c64d:	mov    QWORD PTR [rsp+0x20],rcx
 100c652:	mov    rcx,QWORD PTR [rax+0x8]
 100c656:	mov    QWORD PTR [rsp+0x28],rcx
 100c65b:	mov    rcx,QWORD PTR [rax+0x10]
 100c65f:	mov    QWORD PTR [rsp+0x30],rcx
 100c664:	mov    rcx,QWORD PTR [rax+0x18]
 100c668:	mov    QWORD PTR [rsp+0x38],rcx
 100c66d:	mov    rax,QWORD PTR [rax+0x20]
 100c671:	lea    rcx,[rsp+0x20]
 100c676:	mov    QWORD PTR [rsp+0x40],rax
 100c67b:	call   0x1004bf0
 100c680:	int3   
 100c681:	add    rsp,0x70
 100c685:	pop    rbx
 100c686:	ret    
 100c687:	int3   
 100c688:	int3   
 100c689:	int3   
 100c68a:	int3   
 100c68b:	int3   
 100c68c:	int3   
 100c68d:	int3   
 100c68e:	int3   
 100c68f:	int3   
 100c690:	rex push rbp
 100c692:	push   rsi
 100c693:	push   rdi
 100c694:	push   r14
 100c696:	push   r15
 100c698:	lea    rbp,[rsp-0xa0]
 100c6a0:	sub    rsp,0x1a0
 100c6a7:	mov    QWORD PTR [rbp-0x78],0xfffffffffffffffe
 100c6af:	mov    QWORD PTR [rsp+0x1e0],rbx
 100c6b7:	mov    rax,QWORD PTR [rip+0x6a92]        # 0x1013150
 100c6be:	xor    rax,rsp
 100c6c1:	mov    QWORD PTR [rbp+0x90],rax
 100c6c8:	mov    rsi,rdx
 100c6cb:	mov    rdi,rcx
 100c6ce:	lea    rcx,[rbp+0x38]
 100c6d2:	call   QWORD PTR [rip+0xffffffffffff4b28]        # 0x1001200
 100c6d8:	mov    ebx,0x1
 100c6dd:	lock xadd DWORD PTR [rdi+0xd0],ebx
 100c6e5:	inc    ebx
 100c6e7:	movzx  eax,WORD PTR [rbp+0x46]
 100c6eb:	movzx  ecx,WORD PTR [rbp+0x44]
 100c6ef:	movzx  edx,WORD PTR [rbp+0x42]
 100c6f3:	movzx  r8d,WORD PTR [rbp+0x40]
 100c6f8:	movzx  r9d,WORD PTR [rbp+0x3e]
 100c6fd:	movzx  r10d,WORD PTR [rbp+0x3a]
 100c702:	movzx  r11d,WORD PTR [rbp+0x38]
 100c707:	mov    DWORD PTR [rsp+0x58],ebx
 100c70b:	mov    DWORD PTR [rsp+0x50],eax
 100c70f:	mov    DWORD PTR [rsp+0x48],ecx
 100c713:	mov    DWORD PTR [rsp+0x40],edx
 100c717:	mov    DWORD PTR [rsp+0x38],r8d
 100c71c:	mov    DWORD PTR [rsp+0x30],r9d
 100c721:	mov    DWORD PTR [rsp+0x28],r10d
 100c726:	mov    DWORD PTR [rsp+0x20],r11d
 100c72b:	lea    r9,[rip+0xffffffffffff6b7e]        # 0x10032b0
 100c732:	mov    edx,0x40
 100c737:	lea    r8d,[rdx-0x1]
 100c73b:	lea    rcx,[rbp+0x50]
 100c73f:	call   QWORD PTR [rip+0xffffffffffff4c43]        # 0x1001388
 100c745:	mov    BYTE PTR [rbp+0x8f],0x0
 100c74c:	mov    edx,DWORD PTR [rdi+0x50]
 100c74f:	sub    edx,DWORD PTR [rdi+0x48]
 100c752:	mov    r8,QWORD PTR [rdi+0x48]
 100c756:	lea    rcx,[rdi+0x78]
 100c75a:	call   0x1007f40
 100c75f:	lea    r8,[rip+0xffffffffffff69e2]        # 0x1003148
 100c766:	mov    edx,0x1
 100c76b:	lea    rcx,[rdi+0x78]
 100c76f:	call   0x1008030
 100c774:	mov    edx,DWORD PTR [rdi+0x38]
 100c777:	sub    edx,DWORD PTR [rdi+0x30]
 100c77a:	mov    r8,QWORD PTR [rdi+0x30]
 100c77e:	lea    rcx,[rdi+0x78]
 100c782:	call   0x1008030
 100c787:	lea    r11,[rbp+0x50]
 100c78b:	or     rbx,0xffffffffffffffff
 100c78f:	mov    rdx,rbx
 100c792:	inc    rdx
 100c795:	cmp    BYTE PTR [r11+rdx*1],0x0
 100c79a:	jne    0x100c792
 100c79c:	lea    r8,[rbp+0x50]
 100c7a0:	lea    rcx,[rdi+0x78]
 100c7a4:	call   0x1008030
 100c7a9:	lea    r8,[rip+0xffffffffffff6a24]        # 0x10031d4
 100c7b0:	mov    edx,0x4
 100c7b5:	lea    rcx,[rdi+0x78]
 100c7b9:	call   0x1008030
 100c7be:	mov    edx,DWORD PTR [rdi+0x38]
 100c7c1:	sub    edx,DWORD PTR [rdi+0x30]
 100c7c4:	mov    r8,QWORD PTR [rdi+0x30]
 100c7c8:	lea    rcx,[rdi+0x90]
 100c7cf:	call   0x1007f40
 100c7d4:	lea    r11,[rbp+0x50]
 100c7d8:	nop    DWORD PTR [rax+rax*1+0x0]
 100c7e0:	inc    rbx
 100c7e3:	cmp    BYTE PTR [r11+rbx*1],0x0
 100c7e8:	jne    0x100c7e0
 100c7ea:	mov    rdx,rbx
 100c7ed:	lea    r8,[rbp+0x50]
 100c7f1:	lea    rcx,[rdi+0x90]
 100c7f8:	call   0x1008030
 100c7fd:	lea    r8,[rip+0xffffffffffff69d0]        # 0x10031d4
 100c804:	mov    edx,0x4
 100c809:	lea    rcx,[rdi+0x90]
 100c810:	call   0x1008030
 100c815:	lea    rcx,[rbp-0x70]
 100c819:	call   0x10085d0
 100c81e:	nop
 100c81f:	mov    QWORD PTR [rsp+0x30],0x0
 100c828:	mov    DWORD PTR [rsp+0x28],0x80
 100c830:	mov    DWORD PTR [rsp+0x20],0x1
 100c838:	lea    r9,[rbp-0x8]
 100c83c:	mov    edx,0xc0000000
 100c841:	mov    r8d,0x1
 100c847:	mov    rcx,QWORD PTR [rdi+0x78]
 100c84b:	call   QWORD PTR [rip+0xffffffffffff4a27]        # 0x1001278
 100c851:	mov    rbx,rax
 100c854:	mov    rcx,QWORD PTR [rsi+0x8]
 100c858:	cmp    rcx,rax
 100c85b:	je     0x100c86c
 100c85d:	test   rcx,rcx
 100c860:	je     0x100c868
 100c862:	call   QWORD PTR [rip+0xffffffffffff4930]        # 0x1001198
 100c868:	mov    QWORD PTR [rsi+0x8],rbx
 100c86c:	cmp    QWORD PTR [rsi+0x8],0xffffffffffffffff
 100c871:	jne    0x100c8db
 100c873:	call   QWORD PTR [rip+0xffffffffffff4a9f]        # 0x1001318
 100c879:	test   eax,eax
 100c87b:	jle    0x100c885
 100c87d:	movzx  eax,ax
 100c880:	or     eax,0x80070000
 100c885:	mov    r9d,eax
 100c888:	mov    r8d,0xa8c
 100c88e:	lea    rdx,[rip+0xffffffffffff63db]        # 0x1002c70
 100c895:	lea    rcx,[rbp+0x10]
 100c899:	call   0x10036dc
 100c89e:	mov    rcx,QWORD PTR [rax]
 100c8a1:	mov    QWORD PTR [rsp+0x60],rcx
 100c8a6:	mov    rcx,QWORD PTR [rax+0x8]
 100c8aa:	mov    QWORD PTR [rsp+0x68],rcx
 100c8af:	mov    rcx,QWORD PTR [rax+0x10]
 100c8b3:	mov    QWORD PTR [rsp+0x70],rcx
 100c8b8:	mov    rcx,QWORD PTR [rax+0x18]
 100c8bc:	mov    QWORD PTR [rsp+0x78],rcx
 100c8c1:	mov    rax,QWORD PTR [rax+0x20]
 100c8c5:	mov    QWORD PTR [rbp-0x80],rax
 100c8c9:	lea    rdx,[rip+0x4a20]        # 0x10112f0
 100c8d0:	lea    rcx,[rsp+0x60]
 100c8d5:	call   0x1004bf0
 100c8da:	nop
 100c8db:	lea    rcx,[rbp-0x10]
 100c8df:	call   0x100d1a0
 100c8e4:	nop
 100c8e5:	lea    rcx,[rbp-0x18]
 100c8e9:	call   0x100d1a0
 100c8ee:	nop
 100c8ef:	mov    rcx,QWORD PTR [rbp-0x20]
 100c8f3:	call   0x10049c8
 100c8f8:	nop
 100c8f9:	lea    rcx,[rbp-0x28]
 100c8fd:	call   0x100d1a0
 100c902:	nop
 100c903:	mov    rcx,QWORD PTR [rbp-0x30]
 100c907:	call   0x10049c8
 100c90c:	mov    rcx,QWORD PTR [rbp-0x38]
 100c910:	call   0x10049c8
 100c915:	lea    rcx,[rbp-0x40]
 100c919:	call   0x100d1a0
 100c91e:	nop
 100c91f:	lea    rcx,[rbp-0x48]
 100c923:	call   0x100d1a0
 100c928:	mov    rcx,QWORD PTR [rbp+0x90]
 100c92f:	xor    rcx,rsp
 100c932:	call   0x1004cb0
 100c937:	mov    rbx,QWORD PTR [rsp+0x1e0]
 100c93f:	add    rsp,0x1a0
 100c946:	pop    r15
 100c948:	pop    r14
 100c94a:	pop    rdi
 100c94b:	pop    rsi
 100c94c:	pop    rbp
 100c94d:	ret    
 100c94e:	int3   
 100c94f:	int3   
 100c950:	int3   
 100c951:	int3   
 100c952:	int3   
 100c953:	int3   
 100c954:	int3   
 100c955:	int3   
 100c956:	int3   
 100c957:	int3   
 100c958:	int3   
 100c959:	int3   
 100c95a:	int3   
 100c95b:	int3   
 100c95c:	int3   
 100c95d:	int3   
 100c95e:	int3   
 100c95f:	int3   
 100c960:	rex push rdi
 100c962:	sub    rsp,0x40
 100c966:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100c96f:	mov    QWORD PTR [rsp+0x50],rbx
 100c974:	mov    QWORD PTR [rsp+0x58],rsi
 100c979:	mov    rbx,rcx
 100c97c:	mov    edx,DWORD PTR [rcx+0x50]
 100c97f:	sub    edx,DWORD PTR [rcx+0x48]
 100c982:	mov    r8,QWORD PTR [rcx+0x48]
 100c986:	add    rcx,0x60
 100c98a:	call   0x1007f40
 100c98f:	lea    r8,[rip+0xffffffffffff67b2]        # 0x1003148
 100c996:	mov    edx,0x1
 100c99b:	lea    rcx,[rbx+0x60]
 100c99f:	call   0x1008030
 100c9a4:	mov    edx,DWORD PTR [rbx+0x38]
 100c9a7:	sub    edx,DWORD PTR [rbx+0x30]
 100c9aa:	mov    r8,QWORD PTR [rbx+0x30]
 100c9ae:	lea    rcx,[rbx+0x60]
 100c9b2:	call   0x1008030
 100c9b7:	lea    r8,[rip+0xffffffffffff6816]        # 0x10031d4
 100c9be:	mov    edx,0x4
 100c9c3:	lea    rcx,[rbx+0x60]
 100c9c7:	call   0x1008030
 100c9cc:	lea    rdx,[rip+0xffffffffffff6165]        # 0x1002b38
 100c9d3:	mov    QWORD PTR [rsp+0x28],rdx
 100c9d8:	xor    edi,edi
 100c9da:	mov    QWORD PTR [rsp+0x30],rdi
 100c9df:	lea    rdx,[rsp+0x28]
 100c9e4:	mov    rcx,rbx
 100c9e7:	call   0x100c690
 100c9ec:	nop
 100c9ed:	mov    rcx,QWORD PTR [rsp+0x30]
 100c9f2:	test   rcx,rcx
 100c9f5:	je     0x100ca03
 100c9f7:	cmp    rcx,0xffffffffffffffff
 100c9fb:	je     0x100ca03
 100c9fd:	call   QWORD PTR [rip+0xffffffffffff4795]        # 0x1001198
 100ca03:	xor    r8d,r8d
 100ca06:	mov    rdx,QWORD PTR [rbx+0x78]
 100ca0a:	mov    rcx,QWORD PTR [rbx+0x60]
 100ca0e:	call   QWORD PTR [rip+0xffffffffffff4884]        # 0x1001298
 100ca14:	mov    eax,DWORD PTR [rbx+0xa8]
 100ca1a:	cmp    DWORD PTR [rbx+0xac],eax
 100ca20:	jne    0x100caaf
 100ca26:	mov    eax,DWORD PTR [rbx+0xac]
 100ca2c:	test   eax,eax
 100ca2e:	je     0x100ca5c
 100ca30:	mov    ecx,DWORD PTR [rbx+0xb0]
 100ca36:	mov    edi,ecx
 100ca38:	imul   rdi,rdi,0x53
 100ca3c:	add    rdi,QWORD PTR [rbx+0xb8]
 100ca43:	dec    eax
 100ca45:	mov    DWORD PTR [rbx+0xac],eax
 100ca4b:	lea    eax,[rcx+0x1]
 100ca4e:	xor    edx,edx
 100ca50:	div    DWORD PTR [rbx+0xa8]
 100ca56:	mov    DWORD PTR [rbx+0xb0],edx
 100ca5c:	mov    edx,DWORD PTR [rbx+0x50]
 100ca5f:	sub    edx,DWORD PTR [rbx+0x48]
 100ca62:	mov    r8,QWORD PTR [rbx+0x48]
 100ca66:	lea    rcx,[rbx+0x60]
 100ca6a:	call   0x1007f40
 100ca6f:	lea    r8,[rip+0xffffffffffff66d2]        # 0x1003148
 100ca76:	mov    edx,0x1
 100ca7b:	lea    rcx,[rbx+0x60]
 100ca7f:	call   0x1008030
 100ca84:	or     rdx,0xffffffffffffffff
 100ca88:	nop    DWORD PTR [rax+rax*1+0x0]
 100ca90:	inc    rdx
 100ca93:	cmp    BYTE PTR [rdi+rdx*1],0x0
 100ca97:	jne    0x100ca90
 100ca99:	mov    r8,rdi
 100ca9c:	lea    rcx,[rbx+0x60]
 100caa0:	call   0x1008030
 100caa5:	mov    rcx,QWORD PTR [rbx+0x60]
 100caa9:	call   QWORD PTR [rip+0xffffffffffff47d1]        # 0x1001280
 100caaf:	mov    eax,DWORD PTR [rbx+0xa8]
 100cab5:	cmp    DWORD PTR [rbx+0xac],eax
 100cabb:	je     0x100cb17
 100cabd:	mov    ecx,DWORD PTR [rbx+0xb4]
 100cac3:	imul   rcx,rcx,0x53
 100cac7:	add    rcx,QWORD PTR [rbx+0xb8]
 100cace:	mov    r9d,0x52
 100cad4:	mov    r8,QWORD PTR [rbx+0x90]
 100cadb:	lea    edx,[r9+0x1]
 100cadf:	call   QWORD PTR [rip+0xffffffffffff486b]        # 0x1001350
 100cae5:	mov    edx,DWORD PTR [rbx+0xb4]
 100caeb:	imul   rdx,rdx,0x53
 100caef:	mov    rax,QWORD PTR [rbx+0xb8]
 100caf6:	mov    BYTE PTR [rdx+rax*1+0x52],0x0
 100cafb:	inc    DWORD PTR [rbx+0xac]
 100cb01:	mov    eax,DWORD PTR [rbx+0xb4]
 100cb07:	inc    eax
 100cb09:	xor    edx,edx
 100cb0b:	div    DWORD PTR [rbx+0xa8]
 100cb11:	mov    DWORD PTR [rbx+0xb4],edx
 100cb17:	mov    rdx,QWORD PTR [rbx+0xc0]
 100cb1e:	lea    rdi,[rdx+0x10]
 100cb22:	lea    rcx,[rdx+0x80000]
 100cb29:	cmp    rdi,rcx
 100cb2c:	jae    0x100cb42
 100cb2e:	sub    rcx,rdi
 100cb31:	dec    rcx
 100cb34:	shr    rcx,0x2
 100cb38:	inc    rcx
 100cb3b:	mov    eax,0x200020
 100cb40:	rep stos DWORD PTR es:[rdi],eax
 100cb42:	mov    rax,QWORD PTR [rip+0xffffffffffff607f]        # 0x1002bc8
 100cb49:	mov    QWORD PTR [rdx+0x7fff0],rax
 100cb50:	mov    rax,QWORD PTR [rip+0xffffffffffff6079]        # 0x1002bd0
 100cb57:	mov    QWORD PTR [rdx+0x7fff8],rax
 100cb5e:	mov    DWORD PTR [rbx+0xc8],0x10
 100cb68:	mov    rbx,QWORD PTR [rsp+0x50]
 100cb6d:	mov    rsi,QWORD PTR [rsp+0x58]
 100cb72:	add    rsp,0x40
 100cb76:	pop    rdi
 100cb77:	ret    
 100cb78:	int3   
 100cb79:	int3   
 100cb7a:	int3   
 100cb7b:	int3   
 100cb7c:	int3   
 100cb7d:	int3   
 100cb7e:	int3   
 100cb7f:	int3   
 100cb80:	sub    rsp,0xd8
 100cb87:	mov    rax,QWORD PTR [rip+0x65c2]        # 0x1013150
 100cb8e:	xor    rax,rsp
 100cb91:	mov    QWORD PTR [rsp+0xc0],rax
 100cb99:	lea    rcx,[rsp+0x20]
 100cb9e:	mov    DWORD PTR [rsp+0x20],0x94
 100cba6:	call   QWORD PTR [rip+0xffffffffffff46f4]        # 0x10012a0
 100cbac:	test   eax,eax
 100cbae:	je     0x100cbd4
 100cbb0:	cmp    DWORD PTR [rsp+0x30],0x2
 100cbb5:	jne    0x100cbd4
 100cbb7:	mov    eax,0x1
 100cbbc:	mov    rcx,QWORD PTR [rsp+0xc0]
 100cbc4:	xor    rcx,rsp
 100cbc7:	call   0x1004cb0
 100cbcc:	add    rsp,0xd8
 100cbd3:	ret    
 100cbd4:	xor    eax,eax
 100cbd6:	mov    rcx,QWORD PTR [rsp+0xc0]
 100cbde:	xor    rcx,rsp
 100cbe1:	call   0x1004cb0
 100cbe6:	add    rsp,0xd8
 100cbed:	ret    
 100cbee:	int3   
 100cbef:	int3   
 100cbf0:	int3   
 100cbf1:	int3   
 100cbf2:	int3   
 100cbf3:	int3   
 100cbf4:	int3   
 100cbf5:	int3   
 100cbf6:	int3   
 100cbf7:	int3   
 100cbf8:	int3   
 100cbf9:	int3   
 100cbfa:	int3   
 100cbfb:	int3   
 100cbfc:	int3   
 100cbfd:	int3   
 100cbfe:	int3   
 100cbff:	int3   
 100cc00:	mov    rcx,QWORD PTR [rcx]
 100cc03:	jmp    0x10049c8
 100cc08:	int3   
 100cc09:	int3   
 100cc0a:	int3   
 100cc0b:	int3   
 100cc0c:	int3   
 100cc0d:	int3   
 100cc0e:	int3   
 100cc0f:	int3   
 100cc10:	mov    QWORD PTR [rsp+0x10],rbx
 100cc15:	mov    QWORD PTR [rsp+0x18],rbp
 100cc1a:	push   rsi
 100cc1b:	sub    rsp,0x70
 100cc1f:	mov    rbx,QWORD PTR [rcx+0x8]
 100cc23:	mov    ebp,edx
 100cc25:	mov    rsi,rcx
 100cc28:	sub    rbx,QWORD PTR [rcx]
 100cc2b:	sar    rbx,1
 100cc2e:	cmp    ebx,edx
 100cc30:	jb     0x100cc8d
 100cc32:	lea    rdx,[rip+0xffffffffffff5ea7]        # 0x1002ae0
 100cc39:	lea    rcx,[rsp+0x48]
 100cc3e:	mov    r9d,0x800700ce
 100cc44:	mov    r8d,0x114
 100cc4a:	call   0x10036dc
 100cc4f:	lea    rdx,[rip+0x469a]        # 0x10112f0
 100cc56:	mov    rcx,QWORD PTR [rax]
 100cc59:	mov    QWORD PTR [rsp+0x20],rcx
 100cc5e:	mov    rcx,QWORD PTR [rax+0x8]
 100cc62:	mov    QWORD PTR [rsp+0x28],rcx
 100cc67:	mov    rcx,QWORD PTR [rax+0x10]
 100cc6b:	mov    QWORD PTR [rsp+0x30],rcx
 100cc70:	mov    rcx,QWORD PTR [rax+0x18]
 100cc74:	mov    QWORD PTR [rsp+0x38],rcx
 100cc79:	mov    rax,QWORD PTR [rax+0x20]
 100cc7d:	lea    rcx,[rsp+0x20]
 100cc82:	mov    QWORD PTR [rsp+0x40],rax
 100cc87:	call   0x1004bf0
 100cc8c:	int3   
 100cc8d:	mov    rcx,0xffffffffffffffff
 100cc94:	mov    eax,0x2
 100cc99:	mov    QWORD PTR [rsp+0x80],rdi
 100cca1:	mul    rbp
 100cca4:	cmovo  rax,rcx
 100cca8:	mov    rcx,rax
 100ccab:	call   0x1004a94
 100ccb0:	mov    rdx,QWORD PTR [rsi]
 100ccb3:	mov    ecx,ebx
 100ccb5:	lea    rbx,[rcx+rcx*1]
 100ccb9:	mov    rcx,rax
 100ccbc:	mov    rdi,rax
 100ccbf:	mov    r8,rbx
 100ccc2:	call   0x1004cd6
 100ccc7:	mov    rcx,QWORD PTR [rsi]
 100ccca:	call   0x10049c8
 100cccf:	lea    rax,[rbx+rdi*1]
 100ccd3:	lea    r11,[rsp+0x70]
 100ccd8:	mov    rbx,QWORD PTR [r11+0x18]
 100ccdc:	mov    QWORD PTR [rsi],rdi
 100ccdf:	mov    rdi,QWORD PTR [rsp+0x80]
 100cce7:	mov    DWORD PTR [rsi+0x10],ebp
 100ccea:	mov    rbp,QWORD PTR [r11+0x20]
 100ccee:	xor    ecx,ecx
 100ccf0:	mov    QWORD PTR [rsi+0x8],rax
 100ccf4:	mov    WORD PTR [rax],cx
 100ccf7:	mov    rsp,r11
 100ccfa:	pop    rsi
 100ccfb:	ret    
 100ccfc:	int3   
 100ccfd:	int3   
 100ccfe:	int3   
 100ccff:	int3   
 100cd00:	int3   
 100cd01:	int3   
 100cd02:	int3   
 100cd03:	int3   
 100cd04:	int3   
 100cd05:	int3   
 100cd06:	int3   
 100cd07:	int3   
 100cd08:	int3   
 100cd09:	int3   
 100cd0a:	int3   
 100cd0b:	int3   
 100cd0c:	int3   
 100cd0d:	int3   
 100cd0e:	int3   
 100cd0f:	int3   
 100cd10:	sub    rsp,0x28
 100cd14:	lea    rcx,[rsp+0x30]
 100cd19:	call   0x100ce20
 100cd1e:	mov    rcx,QWORD PTR [rsp+0x30]
 100cd23:	test   rcx,rcx
 100cd26:	jne    0x100cd2f
 100cd28:	xor    eax,eax
 100cd2a:	add    rsp,0x28
 100cd2e:	ret    
 100cd2f:	lea    rdx,[rip+0xffffffffffff65fa]        # 0x1003330
 100cd36:	call   QWORD PTR [rip+0xffffffffffff4514]        # 0x1001250
 100cd3c:	test   rax,rax
 100cd3f:	je     0x100cd28
 100cd41:	lea    rcx,[rip+0x6998]        # 0x10136e0
 100cd48:	call   rax
 100cd4a:	mov    eax,0x1
 100cd4f:	add    rsp,0x28
 100cd53:	ret    
 100cd54:	int3   
 100cd55:	int3   
 100cd56:	int3   
 100cd57:	int3   
 100cd58:	int3   
 100cd59:	int3   
 100cd5a:	int3   
 100cd5b:	int3   
 100cd5c:	int3   
 100cd5d:	int3   
 100cd5e:	int3   
 100cd5f:	int3   
 100cd60:	mov    QWORD PTR [rsp+0x8],rbp
 100cd65:	mov    QWORD PTR [rsp+0x10],rsi
 100cd6a:	mov    QWORD PTR [rsp+0x18],rdi
 100cd6f:	push   r14
 100cd71:	sub    rsp,0x50
 100cd75:	mov    r14,rcx
 100cd78:	lea    rcx,[rsp+0x40]
 100cd7d:	mov    edi,r9d
 100cd80:	mov    rsi,r8
 100cd83:	mov    ebp,edx
 100cd85:	call   0x100ce20
 100cd8a:	cmp    QWORD PTR [rsp+0x40],0x0
 100cd90:	je     0x100cdf9
 100cd92:	mov    rcx,QWORD PTR [rsp+0x40]
 100cd97:	lea    rdx,[rip+0xffffffffffff65aa]        # 0x1003348
 100cd9e:	call   QWORD PTR [rip+0xffffffffffff44ac]        # 0x1001250
 100cda4:	test   rax,rax
 100cda7:	je     0x100cdd9
 100cda9:	mov    edx,DWORD PTR [rsp+0x90]
 100cdb0:	mov    r9d,edi
 100cdb3:	mov    r8,rsi
 100cdb6:	mov    DWORD PTR [rsp+0x30],edx
 100cdba:	mov    edx,DWORD PTR [rsp+0x88]
 100cdc1:	mov    rcx,r14
 100cdc4:	mov    DWORD PTR [rsp+0x28],edx
 100cdc8:	mov    rdx,QWORD PTR [rsp+0x80]
 100cdd0:	mov    QWORD PTR [rsp+0x20],rdx
 100cdd5:	mov    edx,ebp
 100cdd7:	call   rax
 100cdd9:	mov    rcx,QWORD PTR [rsp+0x40]
 100cdde:	lea    rdx,[rip+0xffffffffffff654b]        # 0x1003330
 100cde5:	call   QWORD PTR [rip+0xffffffffffff4465]        # 0x1001250
 100cdeb:	test   rax,rax
 100cdee:	je     0x100cdf9
 100cdf0:	lea    rcx,[rip+0x68e9]        # 0x10136e0
 100cdf7:	call   rax
 100cdf9:	mov    rbp,QWORD PTR [rsp+0x60]
 100cdfe:	mov    rsi,QWORD PTR [rsp+0x68]
 100ce03:	mov    rdi,QWORD PTR [rsp+0x70]
 100ce08:	add    rsp,0x50
 100ce0c:	pop    r14
 100ce0e:	ret    
 100ce0f:	int3   
 100ce10:	int3   
 100ce11:	int3   
 100ce12:	int3   
 100ce13:	int3   
 100ce14:	int3   
 100ce15:	int3   
 100ce16:	int3   
 100ce17:	int3   
 100ce18:	int3   
 100ce19:	int3   
 100ce1a:	int3   
 100ce1b:	int3   
 100ce1c:	int3   
 100ce1d:	int3   
 100ce1e:	int3   
 100ce1f:	int3   
 100ce20:	mov    rax,rsp
 100ce23:	push   rbp
 100ce24:	push   r14
 100ce26:	push   r15
 100ce28:	lea    rbp,[rax-0x5f]
 100ce2c:	sub    rsp,0x90
 100ce33:	mov    QWORD PTR [rbp+0x17],0xfffffffffffffffe
 100ce3b:	mov    QWORD PTR [rax+0x8],rbx
 100ce3f:	mov    QWORD PTR [rax+0x10],rsi
 100ce43:	mov    QWORD PTR [rax+0x18],rdi
 100ce47:	mov    QWORD PTR [rax+0x20],r12
 100ce4b:	mov    r15,rcx
 100ce4e:	xor    r12d,r12d
 100ce51:	mov    QWORD PTR [rbp-0x1],r12
 100ce55:	mov    QWORD PTR [rbp+0x7],r12
 100ce59:	mov    DWORD PTR [rbp+0xf],r12d
 100ce5d:	mov    eax,0x2
 100ce62:	mov    r14d,0x208
 100ce68:	mul    r14
 100ce6b:	mov    rcx,0xffffffffffffffff
 100ce72:	cmovo  rax,rcx
 100ce76:	mov    rcx,rax
 100ce79:	call   0x1004a94
 100ce7e:	mov    rbx,rax
 100ce81:	mov    QWORD PTR [rbp-0x1],rax
 100ce85:	mov    QWORD PTR [rbp+0x7],rax
 100ce89:	mov    DWORD PTR [rbp+0xf],r14d
 100ce8d:	mov    WORD PTR [rax],r12w
 100ce91:	lea    r8d,[r14-0x1]
 100ce95:	mov    rdx,rax
 100ce98:	xor    ecx,ecx
 100ce9a:	call   QWORD PTR [rip+0xffffffffffff42d0]        # 0x1001170
 100cea0:	cmp    eax,0xffffffff
 100cea3:	jbe    0x100cef9
 100cea5:	mov    r9d,0x800700ce
 100ceab:	mov    r8d,0xe7
 100ceb1:	lea    rdx,[rip+0xffffffffffff5c28]        # 0x1002ae0
 100ceb8:	lea    rcx,[rbp+0x1f]
 100cebc:	call   0x10036dc
 100cec1:	mov    rcx,QWORD PTR [rax]
 100cec4:	mov    QWORD PTR [rbp-0x29],rcx
 100cec8:	mov    rcx,QWORD PTR [rax+0x8]
 100cecc:	mov    QWORD PTR [rbp-0x21],rcx
 100ced0:	mov    rcx,QWORD PTR [rax+0x10]
 100ced4:	mov    QWORD PTR [rbp-0x19],rcx
 100ced8:	mov    rcx,QWORD PTR [rax+0x18]
 100cedc:	mov    QWORD PTR [rbp-0x11],rcx
 100cee0:	mov    rax,QWORD PTR [rax+0x20]
 100cee4:	mov    QWORD PTR [rbp-0x9],rax
 100cee8:	lea    rdx,[rip+0x4401]        # 0x10112f0
 100ceef:	lea    rcx,[rbp-0x29]
 100cef3:	call   0x1004bf0
 100cef8:	int3   
 100cef9:	mov    eax,eax
 100cefb:	lea    rdx,[rbx+rax*2]
 100ceff:	mov    QWORD PTR [rbp+0x7],rdx
 100cf03:	mov    WORD PTR [rdx],r12w
 100cf07:	sub    rdx,rbx
 100cf0a:	sar    rdx,1
 100cf0d:	movsxd rcx,edx
 100cf10:	mov    rax,rcx
 100cf13:	test   edx,edx
 100cf15:	js     0x100cf25
 100cf17:	cmp    WORD PTR [rbx+rax*2],0x5c
 100cf1c:	je     0x100cf25
 100cf1e:	dec    ecx
 100cf20:	dec    rax
 100cf23:	jns    0x100cf17
 100cf25:	lea    esi,[rcx+0x1]
 100cf28:	lea    eax,[rdx-0x1]
 100cf2b:	cmp    esi,eax
 100cf2d:	jbe    0x100cf83
 100cf2f:	mov    r9d,0x800700ce
 100cf35:	mov    r8d,0xe7
 100cf3b:	lea    rdx,[rip+0xffffffffffff5b9e]        # 0x1002ae0
 100cf42:	lea    rcx,[rbp+0x1f]
 100cf46:	call   0x10036dc
 100cf4b:	mov    rcx,QWORD PTR [rax]
 100cf4e:	mov    QWORD PTR [rbp-0x29],rcx
 100cf52:	mov    rcx,QWORD PTR [rax+0x8]
 100cf56:	mov    QWORD PTR [rbp-0x21],rcx
 100cf5a:	mov    rcx,QWORD PTR [rax+0x10]
 100cf5e:	mov    QWORD PTR [rbp-0x19],rcx
 100cf62:	mov    rcx,QWORD PTR [rax+0x18]
 100cf66:	mov    QWORD PTR [rbp-0x11],rcx
 100cf6a:	mov    rax,QWORD PTR [rax+0x20]
 100cf6e:	mov    QWORD PTR [rbp-0x9],rax
 100cf72:	lea    rdx,[rip+0x4377]        # 0x10112f0
 100cf79:	lea    rcx,[rbp-0x29]
 100cf7d:	call   0x1004bf0
 100cf82:	int3   
 100cf83:	lea    rdi,[rbx+rsi*2]
 100cf87:	mov    QWORD PTR [rbp+0x7],rdi
 100cf8b:	mov    WORD PTR [rdi],r12w
 100cf8f:	mov    rcx,rdi
 100cf92:	sub    rcx,rbx
 100cf95:	sar    rcx,1
 100cf98:	mov    eax,r14d
 100cf9b:	sub    eax,ecx
 100cf9d:	cmp    eax,0x7
 100cfa0:	jae    0x100d016
 100cfa2:	lea    eax,[rcx+0x6]
 100cfa5:	cmp    eax,0xffffffff
 100cfa8:	jb     0x100cffe
 100cfaa:	mov    r9d,0x800700ce
 100cfb0:	mov    r8d,0xcf
 100cfb6:	lea    rdx,[rip+0xffffffffffff5b23]        # 0x1002ae0
 100cfbd:	lea    rcx,[rbp+0x1f]
 100cfc1:	call   0x10036dc
 100cfc6:	mov    rcx,QWORD PTR [rax]
 100cfc9:	mov    QWORD PTR [rbp-0x29],rcx
 100cfcd:	mov    rcx,QWORD PTR [rax+0x8]
 100cfd1:	mov    QWORD PTR [rbp-0x21],rcx
 100cfd5:	mov    rcx,QWORD PTR [rax+0x10]
 100cfd9:	mov    QWORD PTR [rbp-0x19],rcx
 100cfdd:	mov    rcx,QWORD PTR [rax+0x18]
 100cfe1:	mov    QWORD PTR [rbp-0x11],rcx
 100cfe5:	mov    rax,QWORD PTR [rax+0x20]
 100cfe9:	mov    QWORD PTR [rbp-0x9],rax
 100cfed:	lea    rdx,[rip+0x42fc]        # 0x10112f0
 100cff4:	lea    rcx,[rbp-0x29]
 100cff8:	call   0x1004bf0
 100cffd:	int3   
 100cffe:	lea    edx,[rcx+0x7]
 100d001:	lea    rcx,[rbp-0x1]
 100d005:	call   0x100cc10
 100d00a:	mov    r14d,DWORD PTR [rbp+0xf]
 100d00e:	mov    rdi,QWORD PTR [rbp+0x7]
 100d012:	mov    rbx,QWORD PTR [rbp-0x1]
 100d016:	mov    r9d,0x6
 100d01c:	lea    r8,[rip+0xffffffffffff62dd]        # 0x1003300
 100d023:	lea    edx,[r9+0x1]
 100d027:	mov    rcx,rdi
 100d02a:	call   QWORD PTR [rip+0xffffffffffff43b0]        # 0x10013e0
 100d030:	add    rdi,0xc
 100d034:	mov    QWORD PTR [rbp+0x7],rdi
 100d038:	mov    WORD PTR [rdi],r12w
 100d03c:	mov    rcx,rbx
 100d03f:	call   QWORD PTR [rip+0xffffffffffff4263]        # 0x10012a8
 100d045:	mov    QWORD PTR [r15],rax
 100d048:	test   rax,rax
 100d04b:	jne    0x100d16a
 100d051:	sub    rdi,rbx
 100d054:	sar    rdi,1
 100d057:	dec    edi
 100d059:	cmp    esi,edi
 100d05b:	jbe    0x100d0b1
 100d05d:	mov    r9d,0x800700ce
 100d063:	mov    r8d,0xe7
 100d069:	lea    rdx,[rip+0xffffffffffff5a70]        # 0x1002ae0
 100d070:	lea    rcx,[rbp+0x1f]
 100d074:	call   0x10036dc
 100d079:	mov    rcx,QWORD PTR [rax]
 100d07c:	mov    QWORD PTR [rbp-0x29],rcx
 100d080:	mov    rcx,QWORD PTR [rax+0x8]
 100d084:	mov    QWORD PTR [rbp-0x21],rcx
 100d088:	mov    rcx,QWORD PTR [rax+0x10]
 100d08c:	mov    QWORD PTR [rbp-0x19],rcx
 100d090:	mov    rcx,QWORD PTR [rax+0x18]
 100d094:	mov    QWORD PTR [rbp-0x11],rcx
 100d098:	mov    rax,QWORD PTR [rax+0x20]
 100d09c:	mov    QWORD PTR [rbp-0x9],rax
 100d0a0:	lea    rdx,[rip+0x4249]        # 0x10112f0
 100d0a7:	lea    rcx,[rbp-0x29]
 100d0ab:	call   0x1004bf0
 100d0b0:	int3   
 100d0b1:	lea    rdi,[rbx+rsi*2]
 100d0b5:	mov    QWORD PTR [rbp+0x7],rdi
 100d0b9:	mov    WORD PTR [rdi],r12w
 100d0bd:	mov    rcx,rdi
 100d0c0:	sub    rcx,rbx
 100d0c3:	sar    rcx,1
 100d0c6:	sub    r14d,ecx
 100d0c9:	cmp    r14d,0xd
 100d0cd:	jae    0x100d13f
 100d0cf:	lea    eax,[rcx+0xc]
 100d0d2:	cmp    eax,0xffffffff
 100d0d5:	jb     0x100d12b
 100d0d7:	mov    r9d,0x800700ce
 100d0dd:	mov    r8d,0xcf
 100d0e3:	lea    rdx,[rip+0xffffffffffff59f6]        # 0x1002ae0
 100d0ea:	lea    rcx,[rbp+0x1f]
 100d0ee:	call   0x10036dc
 100d0f3:	mov    rcx,QWORD PTR [rax]
 100d0f6:	mov    QWORD PTR [rbp-0x29],rcx
 100d0fa:	mov    rcx,QWORD PTR [rax+0x8]
 100d0fe:	mov    QWORD PTR [rbp-0x21],rcx
 100d102:	mov    rcx,QWORD PTR [rax+0x10]
 100d106:	mov    QWORD PTR [rbp-0x19],rcx
 100d10a:	mov    rcx,QWORD PTR [rax+0x18]
 100d10e:	mov    QWORD PTR [rbp-0x11],rcx
 100d112:	mov    rax,QWORD PTR [rax+0x20]
 100d116:	mov    QWORD PTR [rbp-0x9],rax
 100d11a:	lea    rdx,[rip+0x41cf]        # 0x10112f0
 100d121:	lea    rcx,[rbp-0x29]
 100d125:	call   0x1004bf0
 100d12a:	int3   
 100d12b:	lea    edx,[rcx+0xd]
 100d12e:	lea    rcx,[rbp-0x1]
 100d132:	call   0x100cc10
 100d137:	mov    rdi,QWORD PTR [rbp+0x7]
 100d13b:	mov    rbx,QWORD PTR [rbp-0x1]
 100d13f:	mov    r9d,0xc
 100d145:	lea    r8,[rip+0xffffffffffff61c4]        # 0x1003310
 100d14c:	lea    edx,[r9+0x1]
 100d150:	mov    rcx,rdi
 100d153:	call   QWORD PTR [rip+0xffffffffffff4287]        # 0x10013e0
 100d159:	mov    WORD PTR [rdi+0x18],r12w
 100d15e:	mov    rcx,rbx
 100d161:	call   QWORD PTR [rip+0xffffffffffff4141]        # 0x10012a8
 100d167:	mov    QWORD PTR [r15],rax
 100d16a:	mov    rcx,rbx
 100d16d:	lea    r11,[rsp+0x90]
 100d175:	mov    rbx,QWORD PTR [r11+0x20]
 100d179:	mov    rsi,QWORD PTR [r11+0x28]
 100d17d:	mov    rdi,QWORD PTR [r11+0x30]
 100d181:	mov    r12,QWORD PTR [r11+0x38]
 100d185:	mov    rsp,r11
 100d188:	pop    r15
 100d18a:	pop    r14
 100d18c:	pop    rbp
 100d18d:	jmp    0x10049c8
 100d192:	int3   
 100d193:	int3   
 100d194:	int3   
 100d195:	int3   
 100d196:	int3   
 100d197:	int3   
 100d198:	int3   
 100d199:	int3   
 100d19a:	int3   
 100d19b:	int3   
 100d19c:	int3   
 100d19d:	int3   
 100d19e:	int3   
 100d19f:	int3   
 100d1a0:	sub    rsp,0x28
 100d1a4:	mov    rcx,QWORD PTR [rcx]
 100d1a7:	test   rcx,rcx
 100d1aa:	je     0x100d1b1
 100d1ac:	call   0x10049c8
 100d1b1:	add    rsp,0x28
 100d1b5:	ret    
 100d1b6:	int3   
 100d1b7:	int3   
 100d1b8:	int3   
 100d1b9:	int3   
 100d1ba:	int3   
 100d1bb:	int3   
 100d1bc:	int3   
 100d1bd:	int3   
 100d1be:	int3   
 100d1bf:	int3   
 100d1c0:	mov    rax,rsp
 100d1c3:	push   rdi
 100d1c4:	sub    rsp,0x80
 100d1cb:	mov    QWORD PTR [rax-0x68],0xfffffffffffffffe
 100d1d3:	mov    QWORD PTR [rax+0x8],rbx
 100d1d7:	mov    QWORD PTR [rax+0x10],rbp
 100d1db:	mov    QWORD PTR [rax+0x20],rsi
 100d1df:	mov    rbp,rdx
 100d1e2:	mov    rsi,rcx
 100d1e5:	mov    rcx,rdx
 100d1e8:	call   QWORD PTR [rip+0xffffffffffff3e92]        # 0x1001080
 100d1ee:	test   eax,eax
 100d1f0:	jne    0x100d24d
 100d1f2:	mov    r9d,0x80070057
 100d1f8:	mov    r8d,0x148
 100d1fe:	lea    rdx,[rip+0xffffffffffff627b]        # 0x1003480
 100d205:	lea    rcx,[rsp+0x50]
 100d20a:	call   0x10036dc
 100d20f:	mov    rcx,QWORD PTR [rax]
 100d212:	mov    QWORD PTR [rsp+0x28],rcx
 100d217:	mov    rcx,QWORD PTR [rax+0x8]
 100d21b:	mov    QWORD PTR [rsp+0x30],rcx
 100d220:	mov    rcx,QWORD PTR [rax+0x10]
 100d224:	mov    QWORD PTR [rsp+0x38],rcx
 100d229:	mov    rcx,QWORD PTR [rax+0x18]
 100d22d:	mov    QWORD PTR [rsp+0x40],rcx
 100d232:	mov    rax,QWORD PTR [rax+0x20]
 100d236:	mov    QWORD PTR [rsp+0x48],rax
 100d23b:	lea    rdx,[rip+0x40ae]        # 0x10112f0
 100d242:	lea    rcx,[rsp+0x28]
 100d247:	call   0x1004bf0
 100d24c:	int3   
 100d24d:	mov    rcx,QWORD PTR [rsi]
 100d250:	test   rcx,rcx
 100d253:	je     0x100d25a
 100d255:	call   0x10049c8
 100d25a:	xor    ebx,ebx
 100d25c:	mov    QWORD PTR [rsi],rbx
 100d25f:	mov    rcx,rbp
 100d262:	call   QWORD PTR [rip+0xffffffffffff3df8]        # 0x1001060
 100d268:	mov    edi,eax
 100d26a:	mov    QWORD PTR [rsp+0xa0],rbx
 100d272:	mov    ecx,eax
 100d274:	call   0x1004a94
 100d279:	mov    rbx,rax
 100d27c:	mov    QWORD PTR [rsp+0xa0],rax
 100d284:	mov    r8,rbp
 100d287:	mov    rdx,rax
 100d28a:	mov    ecx,edi
 100d28c:	call   QWORD PTR [rip+0xffffffffffff3dc6]        # 0x1001058
 100d292:	test   eax,eax
 100d294:	jne    0x100d300
 100d296:	call   QWORD PTR [rip+0xffffffffffff407c]        # 0x1001318
 100d29c:	test   eax,eax
 100d29e:	jle    0x100d2a8
 100d2a0:	movzx  eax,ax
 100d2a3:	or     eax,0x80070000
 100d2a8:	mov    r9d,eax
 100d2ab:	mov    r8d,0x157
 100d2b1:	lea    rdx,[rip+0xffffffffffff61c8]        # 0x1003480
 100d2b8:	lea    rcx,[rsp+0x50]
 100d2bd:	call   0x10036dc
 100d2c2:	mov    rcx,QWORD PTR [rax]
 100d2c5:	mov    QWORD PTR [rsp+0x28],rcx
 100d2ca:	mov    rcx,QWORD PTR [rax+0x8]
 100d2ce:	mov    QWORD PTR [rsp+0x30],rcx
 100d2d3:	mov    rcx,QWORD PTR [rax+0x10]
 100d2d7:	mov    QWORD PTR [rsp+0x38],rcx
 100d2dc:	mov    rcx,QWORD PTR [rax+0x18]
 100d2e0:	mov    QWORD PTR [rsp+0x40],rcx
 100d2e5:	mov    rax,QWORD PTR [rax+0x20]
 100d2e9:	mov    QWORD PTR [rsp+0x48],rax
 100d2ee:	lea    rdx,[rip+0x3ffb]        # 0x10112f0
 100d2f5:	lea    rcx,[rsp+0x28]
 100d2fa:	call   0x1004bf0
 100d2ff:	int3   
 100d300:	mov    QWORD PTR [rsi],rbx
 100d303:	lea    r11,[rsp+0x80]
 100d30b:	mov    rbx,QWORD PTR [r11+0x10]
 100d30f:	mov    rbp,QWORD PTR [r11+0x18]
 100d313:	mov    rsi,QWORD PTR [r11+0x28]
 100d317:	mov    rsp,r11
 100d31a:	pop    rdi
 100d31b:	ret    
 100d31c:	int3   
 100d31d:	int3   
 100d31e:	int3   
 100d31f:	int3   
 100d320:	int3   
 100d321:	int3   
 100d322:	int3   
 100d323:	int3   
 100d324:	int3   
 100d325:	int3   
 100d326:	int3   
 100d327:	int3   
 100d328:	int3   
 100d329:	int3   
 100d32a:	int3   
 100d32b:	int3   
 100d32c:	int3   
 100d32d:	int3   
 100d32e:	int3   
 100d32f:	int3   
 100d330:	push   r14
 100d332:	sub    rsp,0x30
 100d336:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d33f:	mov    QWORD PTR [rsp+0x48],rbx
 100d344:	mov    QWORD PTR [rsp+0x50],rsi
 100d349:	mov    QWORD PTR [rsp+0x58],rdi
 100d34e:	mov    r14,rcx
 100d351:	xor    edi,edi
 100d353:	mov    QWORD PTR [rcx],rdi
 100d356:	mov    QWORD PTR [rsp+0x40],rdi
 100d35b:	mov    cl,0x2
 100d35d:	call   QWORD PTR [rip+0xffffffffffff3d0d]        # 0x1001070
 100d363:	mov    ecx,eax
 100d365:	call   0x1004a94
 100d36a:	mov    rbx,rax
 100d36d:	mov    r8b,0x2
 100d370:	lea    rdx,[rip+0x6401]        # 0x1013778
 100d377:	mov    rcx,rax
 100d37a:	call   QWORD PTR [rip+0xffffffffffff3c80]        # 0x1001000
 100d380:	test   eax,eax
 100d382:	jne    0x100d393
 100d384:	test   rbx,rbx
 100d387:	je     0x100d3bd
 100d389:	mov    rcx,rbx
 100d38c:	call   0x10049c8
 100d391:	jmp    0x100d3bd
 100d393:	lea    rsi,[rip+0x63d6]        # 0x1013770
 100d39a:	nop    WORD PTR [rax+rax*1+0x0]
 100d3a0:	mov    edx,edi
 100d3a2:	mov    rcx,rbx
 100d3a5:	call   QWORD PTR [rip+0xffffffffffff3cbd]        # 0x1001068
 100d3ab:	mov    ecx,DWORD PTR [rsi]
 100d3ad:	mov    DWORD PTR [rax],ecx
 100d3af:	inc    edi
 100d3b1:	add    rsi,0x4
 100d3b5:	cmp    edi,0x2
 100d3b8:	jb     0x100d3a0
 100d3ba:	mov    QWORD PTR [r14],rbx
 100d3bd:	mov    rax,r14
 100d3c0:	mov    rbx,QWORD PTR [rsp+0x48]
 100d3c5:	mov    rsi,QWORD PTR [rsp+0x50]
 100d3ca:	mov    rdi,QWORD PTR [rsp+0x58]
 100d3cf:	add    rsp,0x30
 100d3d3:	pop    r14
 100d3d5:	ret    
 100d3d6:	int3   
 100d3d7:	int3   
 100d3d8:	int3   
 100d3d9:	int3   
 100d3da:	int3   
 100d3db:	int3   
 100d3dc:	int3   
 100d3dd:	int3   
 100d3de:	int3   
 100d3df:	int3   
 100d3e0:	rex push rdi
 100d3e2:	sub    rsp,0x30
 100d3e6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d3ef:	mov    QWORD PTR [rsp+0x48],rbx
 100d3f4:	mov    rdi,rcx
 100d3f7:	xor    eax,eax
 100d3f9:	mov    QWORD PTR [rcx],rax
 100d3fc:	mov    QWORD PTR [rsp+0x40],rax
 100d401:	mov    cl,0x1
 100d403:	call   QWORD PTR [rip+0xffffffffffff3c67]        # 0x1001070
 100d409:	mov    ecx,eax
 100d40b:	call   0x1004a94
 100d410:	mov    rbx,rax
 100d413:	mov    r8b,0x1
 100d416:	lea    rdx,[rip+0x6367]        # 0x1013784
 100d41d:	mov    rcx,rax
 100d420:	call   QWORD PTR [rip+0xffffffffffff3bda]        # 0x1001000
 100d426:	test   eax,eax
 100d428:	jne    0x100d440
 100d42a:	test   rbx,rbx
 100d42d:	je     0x100d456
 100d42f:	mov    rcx,rbx
 100d432:	call   0x10049c8
 100d437:	jmp    0x100d456
 100d439:	nop    DWORD PTR [rax+0x0]
 100d440:	xor    edx,edx
 100d442:	mov    rcx,rbx
 100d445:	call   QWORD PTR [rip+0xffffffffffff3c1d]        # 0x1001068
 100d44b:	mov    ecx,DWORD PTR [rip+0x632f]        # 0x1013780
 100d451:	mov    DWORD PTR [rax],ecx
 100d453:	mov    QWORD PTR [rdi],rbx
 100d456:	mov    rax,rdi
 100d459:	mov    rbx,QWORD PTR [rsp+0x48]
 100d45e:	add    rsp,0x30
 100d462:	pop    rdi
 100d463:	ret    
 100d464:	int3   
 100d465:	int3   
 100d466:	int3   
 100d467:	int3   
 100d468:	int3   
 100d469:	int3   
 100d46a:	int3   
 100d46b:	int3   
 100d46c:	int3   
 100d46d:	int3   
 100d46e:	int3   
 100d46f:	int3   
 100d470:	rex push rbp
 100d472:	push   rsi
 100d473:	push   rdi
 100d474:	push   r12
 100d476:	push   r13
 100d478:	push   r14
 100d47a:	push   r15
 100d47c:	lea    rbp,[rsp-0x17]
 100d481:	sub    rsp,0xc0
 100d488:	mov    QWORD PTR [rbp-0x31],0xfffffffffffffffe
 100d490:	mov    QWORD PTR [rsp+0x108],rbx
 100d498:	mov    rax,QWORD PTR [rip+0x5cb1]        # 0x1013150
 100d49f:	xor    rax,rsp
 100d4a2:	mov    QWORD PTR [rbp+0xf],rax
 100d4a6:	mov    r15,r9
 100d4a9:	mov    r12d,r8d
 100d4ac:	mov    r13,rcx
 100d4af:	mov    QWORD PTR [rbp-0x51],rcx
 100d4b3:	mov    rax,QWORD PTR [rbp+0x77]
 100d4b7:	mov    QWORD PTR [rsp+0x28],rax
 100d4bc:	xor    r14d,r14d
 100d4bf:	mov    esi,r14d
 100d4c2:	test   edx,edx
 100d4c4:	setne  sil
 100d4c8:	mov    DWORD PTR [rsp+0x20],esi
 100d4cc:	mov    rax,QWORD PTR [rip+0xffffffffffff3b55]        # 0x1001028
 100d4d3:	test   esi,esi
 100d4d5:	cmovne rax,QWORD PTR [rip+0xffffffffffff3b53]        # 0x1001030
 100d4dd:	mov    QWORD PTR [rbp-0x41],rax
 100d4e1:	mov    DWORD PTR [rbp+0x3],r14d
 100d4e5:	lea    r9d,[r14+0x2]
 100d4e9:	lea    r8d,[r14+0xc]
 100d4ed:	lea    rdx,[rbp-0x1]
 100d4f1:	mov    rcx,QWORD PTR [rcx]
 100d4f4:	call   QWORD PTR [rip+0xffffffffffff3b4e]        # 0x1001048
 100d4fa:	mov    r11d,DWORD PTR [rbp+0x3]
 100d4fe:	lea    edi,[r11+r12*8]
 100d502:	test   r12d,r12d
 100d505:	je     0x100d528
 100d507:	mov    rbx,r15
 100d50a:	mov    esi,r12d
 100d50d:	nop    DWORD PTR [rax]
 100d510:	mov    rcx,QWORD PTR [rbx]
 100d513:	call   QWORD PTR [rip+0xffffffffffff3b47]        # 0x1001060
 100d519:	add    edi,eax
 100d51b:	add    rbx,0x8
 100d51f:	dec    rsi
 100d522:	jne    0x100d510
 100d524:	mov    esi,DWORD PTR [rsp+0x20]
 100d528:	mov    ecx,edi
 100d52a:	call   0x1004a94
 100d52f:	mov    rbx,rax
 100d532:	mov    QWORD PTR [rbp-0x39],rax
 100d536:	mov    r8d,0x2
 100d53c:	mov    edx,edi
 100d53e:	mov    rcx,rax
 100d541:	call   QWORD PTR [rip+0xffffffffffff3b09]        # 0x1001050
 100d547:	test   eax,eax
 100d549:	jne    0x100d5ae
 100d54b:	call   QWORD PTR [rip+0xffffffffffff3dc7]        # 0x1001318
 100d551:	test   eax,eax
 100d553:	jle    0x100d55d
 100d555:	movzx  eax,ax
 100d558:	or     eax,0x80070000
 100d55d:	mov    r9d,eax
 100d560:	mov    r8d,0x1ec
 100d566:	lea    rdx,[rip+0xffffffffffff5f13]        # 0x1003480
 100d56d:	lea    rcx,[rbp-0x29]
 100d571:	call   0x10036dc
 100d576:	mov    rcx,QWORD PTR [rax]
 100d579:	mov    QWORD PTR [rbp-0x79],rcx
 100d57d:	mov    rcx,QWORD PTR [rax+0x8]
 100d581:	mov    QWORD PTR [rbp-0x71],rcx
 100d585:	mov    rcx,QWORD PTR [rax+0x10]
 100d589:	mov    QWORD PTR [rbp-0x69],rcx
 100d58d:	mov    rcx,QWORD PTR [rax+0x18]
 100d591:	mov    QWORD PTR [rbp-0x61],rcx
 100d595:	mov    rax,QWORD PTR [rax+0x20]
 100d599:	mov    QWORD PTR [rbp-0x59],rax
 100d59d:	lea    rdx,[rip+0x3d4c]        # 0x10112f0
 100d5a4:	lea    rcx,[rbp-0x79]
 100d5a8:	call   0x1004bf0
 100d5ad:	int3   
 100d5ae:	test   esi,esi
 100d5b0:	je     0x100d5be
 100d5b2:	mov    rdx,QWORD PTR [r13+0x0]
 100d5b6:	mov    rcx,rbx
 100d5b9:	call   0x100dd70
 100d5be:	test   r12d,r12d
 100d5c1:	je     0x100d6a5
 100d5c7:	mov    r13,QWORD PTR [rbp+0x7f]
 100d5cb:	mov    rdi,r13
 100d5ce:	mov    rax,QWORD PTR [rsp+0x28]
 100d5d3:	mov    rsi,rax
 100d5d6:	test   rax,rax
 100d5d9:	je     0x100d5e0
 100d5db:	mov    r8d,DWORD PTR [rsi]
 100d5de:	jmp    0x100d5e6
 100d5e0:	mov    r8d,0x101f0000
 100d5e6:	mov    r9,QWORD PTR [r15]
 100d5e9:	mov    edx,0x2
 100d5ee:	mov    rcx,rbx
 100d5f1:	call   QWORD PTR [rbp-0x41]
 100d5f4:	test   eax,eax
 100d5f6:	je     0x100d642
 100d5f8:	test   r13,r13
 100d5fb:	je     0x100d620
 100d5fd:	cmp    BYTE PTR [rdi],0x0
 100d600:	je     0x100d620
 100d602:	lea    r8,[rbp-0x49]
 100d606:	mov    edx,DWORD PTR [rbp-0x1]
 100d609:	mov    rcx,rbx
 100d60c:	call   QWORD PTR [rip+0xffffffffffff3a26]        # 0x1001038
 100d612:	test   eax,eax
 100d614:	je     0x100d620
 100d616:	movzx  ecx,BYTE PTR [rdi]
 100d619:	mov    rax,QWORD PTR [rbp-0x49]
 100d61d:	mov    BYTE PTR [rax+0x1],cl
 100d620:	inc    r14d
 100d623:	add    rsi,0x4
 100d627:	add    r15,0x8
 100d62b:	inc    rdi
 100d62e:	cmp    r14d,r12d
 100d631:	mov    rax,QWORD PTR [rsp+0x28]
 100d636:	jb     0x100d5d6
 100d638:	mov    r13,QWORD PTR [rbp-0x51]
 100d63c:	mov    esi,DWORD PTR [rsp+0x20]
 100d640:	jmp    0x100d6a5
 100d642:	call   QWORD PTR [rip+0xffffffffffff3cd0]        # 0x1001318
 100d648:	test   eax,eax
 100d64a:	jle    0x100d654
 100d64c:	movzx  eax,ax
 100d64f:	or     eax,0x80070000
 100d654:	mov    r9d,eax
 100d657:	mov    r8d,0x20d
 100d65d:	lea    rdx,[rip+0xffffffffffff5e1c]        # 0x1003480
 100d664:	lea    rcx,[rbp-0x29]
 100d668:	call   0x10036dc
 100d66d:	mov    rcx,QWORD PTR [rax]
 100d670:	mov    QWORD PTR [rbp-0x79],rcx
 100d674:	mov    rcx,QWORD PTR [rax+0x8]
 100d678:	mov    QWORD PTR [rbp-0x71],rcx
 100d67c:	mov    rcx,QWORD PTR [rax+0x10]
 100d680:	mov    QWORD PTR [rbp-0x69],rcx
 100d684:	mov    rcx,QWORD PTR [rax+0x18]
 100d688:	mov    QWORD PTR [rbp-0x61],rcx
 100d68c:	mov    rax,QWORD PTR [rax+0x20]
 100d690:	mov    QWORD PTR [rbp-0x59],rax
 100d694:	lea    rdx,[rip+0x3c55]        # 0x10112f0
 100d69b:	lea    rcx,[rbp-0x79]
 100d69f:	call   0x1004bf0
 100d6a4:	int3   
 100d6a5:	test   esi,esi
 100d6a7:	jne    0x100d6b5
 100d6a9:	mov    rdx,QWORD PTR [r13+0x0]
 100d6ad:	mov    rcx,rbx
 100d6b0:	call   0x100dd70
 100d6b5:	mov    rcx,QWORD PTR [r13+0x0]
 100d6b9:	call   0x10049c8
 100d6be:	mov    QWORD PTR [r13+0x0],rbx
 100d6c2:	mov    rcx,QWORD PTR [rbp+0xf]
 100d6c6:	xor    rcx,rsp
 100d6c9:	call   0x1004cb0
 100d6ce:	mov    rbx,QWORD PTR [rsp+0x108]
 100d6d6:	add    rsp,0xc0
 100d6dd:	pop    r15
 100d6df:	pop    r14
 100d6e1:	pop    r13
 100d6e3:	pop    r12
 100d6e5:	pop    rdi
 100d6e6:	pop    rsi
 100d6e7:	pop    rbp
 100d6e8:	ret    
 100d6e9:	int3   
 100d6ea:	int3   
 100d6eb:	int3   
 100d6ec:	int3   
 100d6ed:	int3   
 100d6ee:	int3   
 100d6ef:	int3   
 100d6f0:	sub    rsp,0x78
 100d6f4:	call   QWORD PTR [rip+0xffffffffffff391e]        # 0x1001018
 100d6fa:	test   eax,eax
 100d6fc:	jne    0x100d768
 100d6fe:	call   QWORD PTR [rip+0xffffffffffff3c14]        # 0x1001318
 100d704:	test   eax,eax
 100d706:	jle    0x100d710
 100d708:	movzx  eax,ax
 100d70b:	or     eax,0x80070000
 100d710:	lea    rdx,[rip+0xffffffffffff5d69]        # 0x1003480
 100d717:	lea    rcx,[rsp+0x48]
 100d71c:	mov    r9d,eax
 100d71f:	mov    r8d,0x4c
 100d725:	call   0x10036dc
 100d72a:	lea    rdx,[rip+0x3bbf]        # 0x10112f0
 100d731:	mov    rcx,QWORD PTR [rax]
 100d734:	mov    QWORD PTR [rsp+0x20],rcx
 100d739:	mov    rcx,QWORD PTR [rax+0x8]
 100d73d:	mov    QWORD PTR [rsp+0x28],rcx
 100d742:	mov    rcx,QWORD PTR [rax+0x10]
 100d746:	mov    QWORD PTR [rsp+0x30],rcx
 100d74b:	mov    rcx,QWORD PTR [rax+0x18]
 100d74f:	mov    QWORD PTR [rsp+0x38],rcx
 100d754:	mov    rax,QWORD PTR [rax+0x20]
 100d758:	lea    rcx,[rsp+0x20]
 100d75d:	mov    QWORD PTR [rsp+0x40],rax
 100d762:	call   0x1004bf0
 100d767:	int3   
 100d768:	add    rsp,0x78
 100d76c:	ret    
 100d76d:	int3   
 100d76e:	int3   
 100d76f:	int3   
 100d770:	int3   
 100d771:	int3   
 100d772:	int3   
 100d773:	int3   
 100d774:	int3   
 100d775:	int3   
 100d776:	int3   
 100d777:	int3   
 100d778:	int3   
 100d779:	int3   
 100d77a:	int3   
 100d77b:	int3   
 100d77c:	int3   
 100d77d:	int3   
 100d77e:	int3   
 100d77f:	int3   
 100d780:	mov    QWORD PTR [rsp+0x8],rbx
 100d785:	mov    QWORD PTR [rsp+0x10],rsi
 100d78a:	push   rdi
 100d78b:	sub    rsp,0x70
 100d78f:	mov    rsi,rcx
 100d792:	add    rcx,0x28
 100d796:	mov    edi,r8d
 100d799:	call   0x100d1c0
 100d79e:	mov    rdx,QWORD PTR [rsi+0x28]
 100d7a2:	mov    r8d,edi
 100d7a5:	mov    rcx,rsi
 100d7a8:	call   QWORD PTR [rip+0xffffffffffff3862]        # 0x1001010
 100d7ae:	test   eax,eax
 100d7b0:	jne    0x100d81c
 100d7b2:	call   QWORD PTR [rip+0xffffffffffff3b60]        # 0x1001318
 100d7b8:	test   eax,eax
 100d7ba:	jle    0x100d7c4
 100d7bc:	movzx  eax,ax
 100d7bf:	or     eax,0x80070000
 100d7c4:	lea    rdx,[rip+0xffffffffffff5cb5]        # 0x1003480
 100d7cb:	lea    rcx,[rsp+0x48]
 100d7d0:	mov    r9d,eax
 100d7d3:	mov    r8d,0x65
 100d7d9:	call   0x10036dc
 100d7de:	lea    rdx,[rip+0x3b0b]        # 0x10112f0
 100d7e5:	mov    rcx,QWORD PTR [rax]
 100d7e8:	mov    QWORD PTR [rsp+0x20],rcx
 100d7ed:	mov    rcx,QWORD PTR [rax+0x8]
 100d7f1:	mov    QWORD PTR [rsp+0x28],rcx
 100d7f6:	mov    rcx,QWORD PTR [rax+0x10]
 100d7fa:	mov    QWORD PTR [rsp+0x30],rcx
 100d7ff:	mov    rcx,QWORD PTR [rax+0x18]
 100d803:	mov    QWORD PTR [rsp+0x38],rcx
 100d808:	mov    rax,QWORD PTR [rax+0x20]
 100d80c:	lea    rcx,[rsp+0x20]
 100d811:	mov    QWORD PTR [rsp+0x40],rax
 100d816:	call   0x1004bf0
 100d81b:	int3   
 100d81c:	lea    r11,[rsp+0x70]
 100d821:	mov    rbx,QWORD PTR [r11+0x10]
 100d825:	mov    rsi,QWORD PTR [r11+0x18]
 100d829:	mov    rsp,r11
 100d82c:	pop    rdi
 100d82d:	ret    
 100d82e:	int3   
 100d82f:	int3   
 100d830:	int3   
 100d831:	int3   
 100d832:	int3   
 100d833:	int3   
 100d834:	int3   
 100d835:	int3   
 100d836:	int3   
 100d837:	int3   
 100d838:	int3   
 100d839:	int3   
 100d83a:	int3   
 100d83b:	int3   
 100d83c:	int3   
 100d83d:	int3   
 100d83e:	int3   
 100d83f:	int3   
 100d840:	mov    QWORD PTR [rsp+0x8],rbx
 100d845:	mov    QWORD PTR [rsp+0x10],rsi
 100d84a:	push   rdi
 100d84b:	sub    rsp,0x70
 100d84f:	mov    rsi,rcx
 100d852:	add    rcx,0x30
 100d856:	mov    edi,r8d
 100d859:	call   0x100d1c0
 100d85e:	mov    rdx,QWORD PTR [rsi+0x30]
 100d862:	mov    r8d,edi
 100d865:	mov    rcx,rsi
 100d868:	call   QWORD PTR [rip+0xffffffffffff379a]        # 0x1001008
 100d86e:	test   eax,eax
 100d870:	jne    0x100d8dc
 100d872:	call   QWORD PTR [rip+0xffffffffffff3aa0]        # 0x1001318
 100d878:	test   eax,eax
 100d87a:	jle    0x100d884
 100d87c:	movzx  eax,ax
 100d87f:	or     eax,0x80070000
 100d884:	lea    rdx,[rip+0xffffffffffff5bf5]        # 0x1003480
 100d88b:	lea    rcx,[rsp+0x48]
 100d890:	mov    r9d,eax
 100d893:	mov    r8d,0x6e
 100d899:	call   0x10036dc
 100d89e:	lea    rdx,[rip+0x3a4b]        # 0x10112f0
 100d8a5:	mov    rcx,QWORD PTR [rax]
 100d8a8:	mov    QWORD PTR [rsp+0x20],rcx
 100d8ad:	mov    rcx,QWORD PTR [rax+0x8]
 100d8b1:	mov    QWORD PTR [rsp+0x28],rcx
 100d8b6:	mov    rcx,QWORD PTR [rax+0x10]
 100d8ba:	mov    QWORD PTR [rsp+0x30],rcx
 100d8bf:	mov    rcx,QWORD PTR [rax+0x18]
 100d8c3:	mov    QWORD PTR [rsp+0x38],rcx
 100d8c8:	mov    rax,QWORD PTR [rax+0x20]
 100d8cc:	lea    rcx,[rsp+0x20]
 100d8d1:	mov    QWORD PTR [rsp+0x40],rax
 100d8d6:	call   0x1004bf0
 100d8db:	int3   
 100d8dc:	lea    r11,[rsp+0x70]
 100d8e1:	mov    rbx,QWORD PTR [r11+0x10]
 100d8e5:	mov    rsi,QWORD PTR [r11+0x18]
 100d8e9:	mov    rsp,r11
 100d8ec:	pop    rdi
 100d8ed:	ret    
 100d8ee:	int3   
 100d8ef:	int3   
 100d8f0:	int3   
 100d8f1:	int3   
 100d8f2:	int3   
 100d8f3:	int3   
 100d8f4:	int3   
 100d8f5:	int3   
 100d8f6:	int3   
 100d8f7:	int3   
 100d8f8:	int3   
 100d8f9:	int3   
 100d8fa:	int3   
 100d8fb:	int3   
 100d8fc:	int3   
 100d8fd:	int3   
 100d8fe:	int3   
 100d8ff:	int3   
 100d900:	mov    rax,rsp
 100d903:	push   rbp
 100d904:	push   rdi
 100d905:	push   r14
 100d907:	lea    rbp,[rax-0x5f]
 100d90b:	sub    rsp,0x90
 100d912:	mov    QWORD PTR [rbp-0x11],0xfffffffffffffffe
 100d91a:	mov    QWORD PTR [rax+0x8],rbx
 100d91e:	mov    QWORD PTR [rax+0x10],rsi
 100d922:	mov    rsi,rdx
 100d925:	mov    r14,rcx
 100d928:	xor    ebx,ebx
 100d92a:	mov    DWORD PTR [rbp+0x77],ebx
 100d92d:	lea    rax,[rbp+0x77]
 100d931:	mov    QWORD PTR [rsp+0x20],rax
 100d936:	xor    r9d,r9d
 100d939:	xor    r8d,r8d
 100d93c:	lea    edx,[rbx+0x1]
 100d93f:	mov    rcx,rsi
 100d942:	call   QWORD PTR [rip+0xffffffffffff3740]        # 0x1001088
 100d948:	test   eax,eax
 100d94a:	je     0x100d9a0
 100d94c:	mov    r9d,0x8000ffff
 100d952:	mov    r8d,0xa7
 100d958:	lea    rdx,[rip+0xffffffffffff5b21]        # 0x1003480
 100d95f:	lea    rcx,[rbp+0x1f]
 100d963:	call   0x10036dc
 100d968:	mov    rcx,QWORD PTR [rax]
 100d96b:	mov    QWORD PTR [rbp-0x9],rcx
 100d96f:	mov    rcx,QWORD PTR [rax+0x8]
 100d973:	mov    QWORD PTR [rbp-0x1],rcx
 100d977:	mov    rcx,QWORD PTR [rax+0x10]
 100d97b:	mov    QWORD PTR [rbp+0x7],rcx
 100d97f:	mov    rcx,QWORD PTR [rax+0x18]
 100d983:	mov    QWORD PTR [rbp+0xf],rcx
 100d987:	mov    rax,QWORD PTR [rax+0x20]
 100d98b:	mov    QWORD PTR [rbp+0x17],rax
 100d98f:	lea    rdx,[rip+0x395a]        # 0x10112f0
 100d996:	lea    rcx,[rbp-0x9]
 100d99a:	call   0x1004bf0
 100d99f:	int3   
 100d9a0:	call   QWORD PTR [rip+0xffffffffffff3972]        # 0x1001318
 100d9a6:	cmp    eax,0x7a
 100d9a9:	je     0x100da0e
 100d9ab:	call   QWORD PTR [rip+0xffffffffffff3967]        # 0x1001318
 100d9b1:	test   eax,eax
 100d9b3:	jle    0x100d9bd
 100d9b5:	movzx  eax,ax
 100d9b8:	or     eax,0x80070000
 100d9bd:	mov    r9d,eax
 100d9c0:	mov    r8d,0xac
 100d9c6:	lea    rdx,[rip+0xffffffffffff5ab3]        # 0x1003480
 100d9cd:	lea    rcx,[rbp+0x1f]
 100d9d1:	call   0x10036dc
 100d9d6:	mov    rcx,QWORD PTR [rax]
 100d9d9:	mov    QWORD PTR [rbp-0x9],rcx
 100d9dd:	mov    rcx,QWORD PTR [rax+0x8]
 100d9e1:	mov    QWORD PTR [rbp-0x1],rcx
 100d9e5:	mov    rcx,QWORD PTR [rax+0x10]
 100d9e9:	mov    QWORD PTR [rbp+0x7],rcx
 100d9ed:	mov    rcx,QWORD PTR [rax+0x18]
 100d9f1:	mov    QWORD PTR [rbp+0xf],rcx
 100d9f5:	mov    rax,QWORD PTR [rax+0x20]
 100d9f9:	mov    QWORD PTR [rbp+0x17],rax
 100d9fd:	lea    rdx,[rip+0x38ec]        # 0x10112f0
 100da04:	lea    rcx,[rbp-0x9]
 100da08:	call   0x1004bf0
 100da0d:	int3   
 100da0e:	mov    QWORD PTR [rbp+0x7f],rbx
 100da12:	mov    ecx,DWORD PTR [rbp+0x77]
 100da15:	call   0x1004a94
 100da1a:	mov    rdi,rax
 100da1d:	mov    QWORD PTR [rbp+0x7f],rax
 100da21:	lea    rax,[rbp+0x77]
 100da25:	mov    QWORD PTR [rsp+0x20],rax
 100da2a:	mov    r9d,DWORD PTR [rbp+0x77]
 100da2e:	mov    r8,rdi
 100da31:	mov    edx,0x1
 100da36:	mov    rcx,rsi
 100da39:	call   QWORD PTR [rip+0xffffffffffff3649]        # 0x1001088
 100da3f:	test   eax,eax
 100da41:	jne    0x100daa6
 100da43:	call   QWORD PTR [rip+0xffffffffffff38cf]        # 0x1001318
 100da49:	test   eax,eax
 100da4b:	jle    0x100da55
 100da4d:	movzx  eax,ax
 100da50:	or     eax,0x80070000
 100da55:	mov    r9d,eax
 100da58:	mov    r8d,0xb6
 100da5e:	lea    rdx,[rip+0xffffffffffff5a1b]        # 0x1003480
 100da65:	lea    rcx,[rbp+0x1f]
 100da69:	call   0x10036dc
 100da6e:	mov    rcx,QWORD PTR [rax]
 100da71:	mov    QWORD PTR [rbp-0x9],rcx
 100da75:	mov    rcx,QWORD PTR [rax+0x8]
 100da79:	mov    QWORD PTR [rbp-0x1],rcx
 100da7d:	mov    rcx,QWORD PTR [rax+0x10]
 100da81:	mov    QWORD PTR [rbp+0x7],rcx
 100da85:	mov    rcx,QWORD PTR [rax+0x18]
 100da89:	mov    QWORD PTR [rbp+0xf],rcx
 100da8d:	mov    rax,QWORD PTR [rax+0x20]
 100da91:	mov    QWORD PTR [rbp+0x17],rax
 100da95:	lea    rdx,[rip+0x3854]        # 0x10112f0
 100da9c:	lea    rcx,[rbp-0x9]
 100daa0:	call   0x1004bf0
 100daa5:	int3   
 100daa6:	xor    r8d,r8d
 100daa9:	mov    rdx,QWORD PTR [rdi]
 100daac:	mov    rcx,r14
 100daaf:	call   0x100d780
 100dab4:	mov    DWORD PTR [rbp+0x77],ebx
 100dab7:	lea    rax,[rbp+0x77]
 100dabb:	mov    QWORD PTR [rsp+0x20],rax
 100dac0:	xor    r9d,r9d
 100dac3:	xor    r8d,r8d
 100dac6:	lea    edx,[r9+0x5]
 100daca:	mov    rcx,rsi
 100dacd:	call   QWORD PTR [rip+0xffffffffffff35b5]        # 0x1001088
 100dad3:	test   eax,eax
 100dad5:	je     0x100db2b
 100dad7:	mov    r9d,0x8000ffff
 100dadd:	mov    r8d,0xc1
 100dae3:	lea    rdx,[rip+0xffffffffffff5996]        # 0x1003480
 100daea:	lea    rcx,[rbp+0x1f]
 100daee:	call   0x10036dc
 100daf3:	mov    rcx,QWORD PTR [rax]
 100daf6:	mov    QWORD PTR [rbp-0x9],rcx
 100dafa:	mov    rcx,QWORD PTR [rax+0x8]
 100dafe:	mov    QWORD PTR [rbp-0x1],rcx
 100db02:	mov    rcx,QWORD PTR [rax+0x10]
 100db06:	mov    QWORD PTR [rbp+0x7],rcx
 100db0a:	mov    rcx,QWORD PTR [rax+0x18]
 100db0e:	mov    QWORD PTR [rbp+0xf],rcx
 100db12:	mov    rax,QWORD PTR [rax+0x20]
 100db16:	mov    QWORD PTR [rbp+0x17],rax
 100db1a:	lea    rdx,[rip+0x37cf]        # 0x10112f0
 100db21:	lea    rcx,[rbp-0x9]
 100db25:	call   0x1004bf0
 100db2a:	int3   
 100db2b:	call   QWORD PTR [rip+0xffffffffffff37e7]        # 0x1001318
 100db31:	cmp    eax,0x7a
 100db34:	je     0x100db99
 100db36:	call   QWORD PTR [rip+0xffffffffffff37dc]        # 0x1001318
 100db3c:	test   eax,eax
 100db3e:	jle    0x100db48
 100db40:	movzx  eax,ax
 100db43:	or     eax,0x80070000
 100db48:	mov    r9d,eax
 100db4b:	mov    r8d,0xc6
 100db51:	lea    rdx,[rip+0xffffffffffff5928]        # 0x1003480
 100db58:	lea    rcx,[rbp+0x1f]
 100db5c:	call   0x10036dc
 100db61:	mov    rcx,QWORD PTR [rax]
 100db64:	mov    QWORD PTR [rbp-0x9],rcx
 100db68:	mov    rcx,QWORD PTR [rax+0x8]
 100db6c:	mov    QWORD PTR [rbp-0x1],rcx
 100db70:	mov    rcx,QWORD PTR [rax+0x10]
 100db74:	mov    QWORD PTR [rbp+0x7],rcx
 100db78:	mov    rcx,QWORD PTR [rax+0x18]
 100db7c:	mov    QWORD PTR [rbp+0xf],rcx
 100db80:	mov    rax,QWORD PTR [rax+0x20]
 100db84:	mov    QWORD PTR [rbp+0x17],rax
 100db88:	lea    rdx,[rip+0x3761]        # 0x10112f0
 100db8f:	lea    rcx,[rbp-0x9]
 100db93:	call   0x1004bf0
 100db98:	int3   
 100db99:	mov    QWORD PTR [rbp-0x19],rbx
 100db9d:	mov    ecx,DWORD PTR [rbp+0x77]
 100dba0:	call   0x1004a94
 100dba5:	mov    rbx,rax
 100dba8:	mov    QWORD PTR [rbp-0x19],rax
 100dbac:	lea    rax,[rbp+0x77]
 100dbb0:	mov    QWORD PTR [rsp+0x20],rax
 100dbb5:	mov    r9d,DWORD PTR [rbp+0x77]
 100dbb9:	mov    r8,rbx
 100dbbc:	mov    edx,0x5
 100dbc1:	mov    rcx,rsi
 100dbc4:	call   QWORD PTR [rip+0xffffffffffff34be]        # 0x1001088
 100dbca:	test   eax,eax
 100dbcc:	jne    0x100dc31
 100dbce:	call   QWORD PTR [rip+0xffffffffffff3744]        # 0x1001318
 100dbd4:	test   eax,eax
 100dbd6:	jle    0x100dbe0
 100dbd8:	movzx  eax,ax
 100dbdb:	or     eax,0x80070000
 100dbe0:	mov    r9d,eax
 100dbe3:	mov    r8d,0xd0
 100dbe9:	lea    rdx,[rip+0xffffffffffff5890]        # 0x1003480
 100dbf0:	lea    rcx,[rbp+0x1f]
 100dbf4:	call   0x10036dc
 100dbf9:	mov    rcx,QWORD PTR [rax]
 100dbfc:	mov    QWORD PTR [rbp-0x9],rcx
 100dc00:	mov    rcx,QWORD PTR [rax+0x8]
 100dc04:	mov    QWORD PTR [rbp-0x1],rcx
 100dc08:	mov    rcx,QWORD PTR [rax+0x10]
 100dc0c:	mov    QWORD PTR [rbp+0x7],rcx
 100dc10:	mov    rcx,QWORD PTR [rax+0x18]
 100dc14:	mov    QWORD PTR [rbp+0xf],rcx
 100dc18:	mov    rax,QWORD PTR [rax+0x20]
 100dc1c:	mov    QWORD PTR [rbp+0x17],rax
 100dc20:	lea    rdx,[rip+0x36c9]        # 0x10112f0
 100dc27:	lea    rcx,[rbp-0x9]
 100dc2b:	call   0x1004bf0
 100dc30:	int3   
 100dc31:	xor    r8d,r8d
 100dc34:	mov    rdx,QWORD PTR [rbx]
 100dc37:	mov    rcx,r14
 100dc3a:	call   0x100d840
 100dc3f:	nop
 100dc40:	mov    rcx,rbx
 100dc43:	call   0x10049c8
 100dc48:	nop
 100dc49:	mov    rcx,rdi
 100dc4c:	call   0x10049c8
 100dc51:	lea    r11,[rsp+0x90]
 100dc59:	mov    rbx,QWORD PTR [r11+0x20]
 100dc5d:	mov    rsi,QWORD PTR [r11+0x28]
 100dc61:	mov    rsp,r11
 100dc64:	pop    r14
 100dc66:	pop    rdi
 100dc67:	pop    rbp
 100dc68:	ret    
 100dc69:	int3   
 100dc6a:	int3   
 100dc6b:	int3   
 100dc6c:	int3   
 100dc6d:	int3   
 100dc6e:	int3   
 100dc6f:	int3   
 100dc70:	mov    rax,rsp
 100dc73:	push   rdi
 100dc74:	sub    rsp,0x90
 100dc7b:	mov    QWORD PTR [rax-0x78],0xfffffffffffffffe
 100dc83:	mov    QWORD PTR [rax+0x8],rbx
 100dc87:	mov    rbx,rcx
 100dc8a:	lea    rdi,[rip+0xffffffffffff4ea7]        # 0x1002b38
 100dc91:	mov    QWORD PTR [rax-0x70],rdi
 100dc95:	mov    QWORD PTR [rax-0x68],0x0
 100dc9d:	call   QWORD PTR [rip+0xffffffffffff347d]        # 0x1001120
 100dca3:	mov    rcx,rax
 100dca6:	lea    r8,[rsp+0x30]
 100dcab:	mov    edx,0x8
 100dcb0:	call   QWORD PTR [rip+0xffffffffffff33da]        # 0x1001090
 100dcb6:	test   eax,eax
 100dcb8:	jne    0x100dd24
 100dcba:	call   QWORD PTR [rip+0xffffffffffff3658]        # 0x1001318
 100dcc0:	test   eax,eax
 100dcc2:	jle    0x100dccc
 100dcc4:	movzx  eax,ax
 100dcc7:	or     eax,0x80070000
 100dccc:	mov    r9d,eax
 100dccf:	mov    r8d,0x77
 100dcd5:	lea    rdx,[rip+0xffffffffffff57a4]        # 0x1003480
 100dcdc:	lea    rcx,[rsp+0x60]
 100dce1:	call   0x10036dc
 100dce6:	mov    rcx,QWORD PTR [rax]
 100dce9:	mov    QWORD PTR [rsp+0x38],rcx
 100dcee:	mov    rcx,QWORD PTR [rax+0x8]
 100dcf2:	mov    QWORD PTR [rsp+0x40],rcx
 100dcf7:	mov    rcx,QWORD PTR [rax+0x10]
 100dcfb:	mov    QWORD PTR [rsp+0x48],rcx
 100dd00:	mov    rcx,QWORD PTR [rax+0x18]
 100dd04:	mov    QWORD PTR [rsp+0x50],rcx
 100dd09:	mov    rax,QWORD PTR [rax+0x20]
 100dd0d:	mov    QWORD PTR [rsp+0x58],rax
 100dd12:	lea    rdx,[rip+0x35d7]        # 0x10112f0
 100dd19:	lea    rcx,[rsp+0x38]
 100dd1e:	call   0x1004bf0
 100dd23:	int3   
 100dd24:	mov    rdx,QWORD PTR [rsp+0x30]
 100dd29:	mov    rcx,rbx
 100dd2c:	call   0x100d900
 100dd31:	nop
 100dd32:	mov    QWORD PTR [rsp+0x28],rdi
 100dd37:	mov    rcx,QWORD PTR [rsp+0x30]
 100dd3c:	test   rcx,rcx
 100dd3f:	je     0x100dd4d
 100dd41:	cmp    rcx,0xffffffffffffffff
 100dd45:	je     0x100dd4d
 100dd47:	call   QWORD PTR [rip+0xffffffffffff344b]        # 0x1001198
 100dd4d:	mov    rbx,QWORD PTR [rsp+0xa0]
 100dd55:	add    rsp,0x90
 100dd5c:	pop    rdi
 100dd5d:	ret    
 100dd5e:	int3   
 100dd5f:	int3   
 100dd60:	int3   
 100dd61:	int3   
 100dd62:	int3   
 100dd63:	int3   
 100dd64:	int3   
 100dd65:	int3   
 100dd66:	int3   
 100dd67:	int3   
 100dd68:	int3   
 100dd69:	int3   
 100dd6a:	int3   
 100dd6b:	int3   
 100dd6c:	int3   
 100dd6d:	int3   
 100dd6e:	int3   
 100dd6f:	int3   
 100dd70:	test   rdx,rdx
 100dd73:	je     0x100de8f
 100dd79:	push   rbp
 100dd7a:	push   rsi
 100dd7b:	push   rdi
 100dd7c:	lea    rbp,[rsp-0x47]
 100dd81:	sub    rsp,0xa0
 100dd88:	mov    rax,QWORD PTR [rip+0x53c1]        # 0x1013150
 100dd8f:	xor    rax,rsp
 100dd92:	mov    QWORD PTR [rbp+0x3f],rax
 100dd96:	mov    rdi,rdx
 100dd99:	mov    r9d,0x2
 100dd9f:	mov    rsi,rcx
 100dda2:	lea    r8d,[r9+0xa]
 100dda6:	lea    rdx,[rbp+0x2f]
 100ddaa:	mov    rcx,rdi
 100ddad:	call   QWORD PTR [rip+0xffffffffffff3295]        # 0x1001048
 100ddb3:	test   eax,eax
 100ddb5:	jne    0x100de1a
 100ddb7:	call   QWORD PTR [rip+0xffffffffffff355b]        # 0x1001318
 100ddbd:	test   eax,eax
 100ddbf:	jle    0x100ddc9
 100ddc1:	movzx  eax,ax
 100ddc4:	or     eax,0x80070000
 100ddc9:	lea    rdx,[rip+0xffffffffffff56b0]        # 0x1003480
 100ddd0:	lea    rcx,[rbp+0x7]
 100ddd4:	mov    r9d,eax
 100ddd7:	mov    r8d,0x2ee
 100dddd:	call   0x10036dc
 100dde2:	lea    rdx,[rip+0x3507]        # 0x10112f0
 100dde9:	mov    rcx,QWORD PTR [rax]
 100ddec:	mov    QWORD PTR [rbp-0x29],rcx
 100ddf0:	mov    rcx,QWORD PTR [rax+0x8]
 100ddf4:	mov    QWORD PTR [rbp-0x21],rcx
 100ddf8:	mov    rcx,QWORD PTR [rax+0x10]
 100ddfc:	mov    QWORD PTR [rbp-0x19],rcx
 100de00:	mov    rcx,QWORD PTR [rax+0x18]
 100de04:	mov    QWORD PTR [rbp-0x11],rcx
 100de08:	mov    rax,QWORD PTR [rax+0x20]
 100de0c:	lea    rcx,[rbp-0x29]
 100de10:	mov    QWORD PTR [rbp-0x9],rax
 100de14:	call   0x1004bf0
 100de19:	int3   
 100de1a:	mov    QWORD PTR [rsp+0xd0],rbx
 100de22:	xor    ebx,ebx
 100de24:	cmp    DWORD PTR [rbp+0x2f],ebx
 100de27:	jbe    0x100de71
 100de29:	nop    DWORD PTR [rax+0x0]
 100de30:	lea    r8,[rbp-0x1]
 100de34:	mov    edx,ebx
 100de36:	mov    rcx,rdi
 100de39:	call   QWORD PTR [rip+0xffffffffffff31f9]        # 0x1001038
 100de3f:	test   eax,eax
 100de41:	je     0x100def4
 100de47:	mov    r9,QWORD PTR [rbp-0x1]
 100de4b:	or     r8d,0xffffffff
 100de4f:	mov    edx,0x2
 100de54:	movzx  eax,WORD PTR [r9+0x2]
 100de59:	mov    rcx,rsi
 100de5c:	mov    DWORD PTR [rsp+0x20],eax
 100de60:	call   QWORD PTR [rip+0xffffffffffff31da]        # 0x1001040
 100de66:	test   eax,eax
 100de68:	je     0x100de91
 100de6a:	inc    ebx
 100de6c:	cmp    ebx,DWORD PTR [rbp+0x2f]
 100de6f:	jb     0x100de30
 100de71:	mov    rbx,QWORD PTR [rsp+0xd0]
 100de79:	mov    rcx,QWORD PTR [rbp+0x3f]
 100de7d:	xor    rcx,rsp
 100de80:	call   0x1004cb0
 100de85:	add    rsp,0xa0
 100de8c:	pop    rdi
 100de8d:	pop    rsi
 100de8e:	pop    rbp
 100de8f:	repz ret 
 100de91:	call   QWORD PTR [rip+0xffffffffffff3481]        # 0x1001318
 100de97:	test   eax,eax
 100de99:	jle    0x100dea3
 100de9b:	movzx  eax,ax
 100de9e:	or     eax,0x80070000
 100dea3:	lea    rdx,[rip+0xffffffffffff55d6]        # 0x1003480
 100deaa:	lea    rcx,[rbp+0x7]
 100deae:	mov    r9d,eax
 100deb1:	mov    r8d,0x2f9
 100deb7:	call   0x10036dc
 100debc:	lea    rdx,[rip+0x342d]        # 0x10112f0
 100dec3:	mov    rcx,QWORD PTR [rax]
 100dec6:	mov    QWORD PTR [rbp-0x29],rcx
 100deca:	mov    rcx,QWORD PTR [rax+0x8]
 100dece:	mov    QWORD PTR [rbp-0x21],rcx
 100ded2:	mov    rcx,QWORD PTR [rax+0x10]
 100ded6:	mov    QWORD PTR [rbp-0x19],rcx
 100deda:	mov    rcx,QWORD PTR [rax+0x18]
 100dede:	mov    QWORD PTR [rbp-0x11],rcx
 100dee2:	mov    rax,QWORD PTR [rax+0x20]
 100dee6:	lea    rcx,[rbp-0x29]
 100deea:	mov    QWORD PTR [rbp-0x9],rax
 100deee:	call   0x1004bf0
 100def3:	int3   
 100def4:	call   QWORD PTR [rip+0xffffffffffff341e]        # 0x1001318
 100defa:	test   eax,eax
 100defc:	jle    0x100df06
 100defe:	movzx  eax,ax
 100df01:	or     eax,0x80070000
 100df06:	lea    rdx,[rip+0xffffffffffff5573]        # 0x1003480
 100df0d:	lea    rcx,[rbp+0x7]
 100df11:	mov    r9d,eax
 100df14:	mov    r8d,0x2f4
 100df1a:	call   0x10036dc
 100df1f:	lea    rdx,[rip+0x33ca]        # 0x10112f0
 100df26:	mov    rcx,QWORD PTR [rax]
 100df29:	mov    QWORD PTR [rbp-0x29],rcx
 100df2d:	mov    rcx,QWORD PTR [rax+0x8]
 100df31:	mov    QWORD PTR [rbp-0x21],rcx
 100df35:	mov    rcx,QWORD PTR [rax+0x10]
 100df39:	mov    QWORD PTR [rbp-0x19],rcx
 100df3d:	mov    rcx,QWORD PTR [rax+0x18]
 100df41:	mov    QWORD PTR [rbp-0x11],rcx
 100df45:	mov    rax,QWORD PTR [rax+0x20]
 100df49:	lea    rcx,[rbp-0x29]
 100df4d:	mov    QWORD PTR [rbp-0x9],rax
 100df51:	call   0x1004bf0
 100df56:	int3   
 100df57:	int3   
 100df58:	int3   
 100df59:	int3   
 100df5a:	int3   
 100df5b:	int3   
 100df5c:	int3   
 100df5d:	int3   
 100df5e:	int3   
 100df5f:	int3   
 100df60:	rex push rbp
 100df62:	push   rsi
 100df63:	push   rdi
 100df64:	lea    rbp,[rsp-0x47]
 100df69:	sub    rsp,0xa0
 100df70:	mov    QWORD PTR [rbp-0x29],0xfffffffffffffffe
 100df78:	mov    QWORD PTR [rsp+0xd8],rbx
 100df80:	lea    rsi,[rip+0xffffffffffff4bb1]        # 0x1002b38
 100df87:	mov    QWORD PTR [rbp-0x21],rsi
 100df8b:	xor    ebx,ebx
 100df8d:	mov    QWORD PTR [rbp-0x19],rbx
 100df91:	call   QWORD PTR [rip+0xffffffffffff3189]        # 0x1001120
 100df97:	mov    rcx,rax
 100df9a:	lea    r8,[rbp-0x19]
 100df9e:	lea    edx,[rbx+0x8]
 100dfa1:	call   QWORD PTR [rip+0xffffffffffff30e9]        # 0x1001090
 100dfa7:	test   eax,eax
 100dfa9:	jne    0x100e00e
 100dfab:	call   QWORD PTR [rip+0xffffffffffff3367]        # 0x1001318
 100dfb1:	test   eax,eax
 100dfb3:	jle    0x100dfbd
 100dfb5:	movzx  eax,ax
 100dfb8:	or     eax,0x80070000
 100dfbd:	mov    r9d,eax
 100dfc0:	mov    r8d,0x2b0
 100dfc6:	lea    rdx,[rip+0xffffffffffff54b3]        # 0x1003480
 100dfcd:	lea    rcx,[rbp+0x17]
 100dfd1:	call   0x10036dc
 100dfd6:	mov    rcx,QWORD PTR [rax]
 100dfd9:	mov    QWORD PTR [rbp-0x11],rcx
 100dfdd:	mov    rcx,QWORD PTR [rax+0x8]
 100dfe1:	mov    QWORD PTR [rbp-0x9],rcx
 100dfe5:	mov    rcx,QWORD PTR [rax+0x10]
 100dfe9:	mov    QWORD PTR [rbp-0x1],rcx
 100dfed:	mov    rcx,QWORD PTR [rax+0x18]
 100dff1:	mov    QWORD PTR [rbp+0x7],rcx
 100dff5:	mov    rax,QWORD PTR [rax+0x20]
 100dff9:	mov    QWORD PTR [rbp+0xf],rax
 100dffd:	lea    rdx,[rip+0x32ec]        # 0x10112f0
 100e004:	lea    rcx,[rbp-0x11]
 100e008:	call   0x1004bf0
 100e00d:	int3   
 100e00e:	lea    rax,[rbp+0x67]
 100e012:	mov    QWORD PTR [rsp+0x20],rax
 100e017:	xor    r9d,r9d
 100e01a:	xor    r8d,r8d
 100e01d:	lea    edx,[r9+0x1]
 100e021:	mov    rcx,QWORD PTR [rbp-0x19]
 100e025:	call   QWORD PTR [rip+0xffffffffffff305d]        # 0x1001088
 100e02b:	test   eax,eax
 100e02d:	jne    0x100e227
 100e033:	call   QWORD PTR [rip+0xffffffffffff32df]        # 0x1001318
 100e039:	cmp    eax,0x7a
 100e03c:	je     0x100e0a1
 100e03e:	call   QWORD PTR [rip+0xffffffffffff32d4]        # 0x1001318
 100e044:	test   eax,eax
 100e046:	jle    0x100e050
 100e048:	movzx  eax,ax
 100e04b:	or     eax,0x80070000
 100e050:	mov    r9d,eax
 100e053:	mov    r8d,0x2bd
 100e059:	lea    rdx,[rip+0xffffffffffff5420]        # 0x1003480
 100e060:	lea    rcx,[rbp+0x17]
 100e064:	call   0x10036dc
 100e069:	mov    rcx,QWORD PTR [rax]
 100e06c:	mov    QWORD PTR [rbp-0x11],rcx
 100e070:	mov    rcx,QWORD PTR [rax+0x8]
 100e074:	mov    QWORD PTR [rbp-0x9],rcx
 100e078:	mov    rcx,QWORD PTR [rax+0x10]
 100e07c:	mov    QWORD PTR [rbp-0x1],rcx
 100e080:	mov    rcx,QWORD PTR [rax+0x18]
 100e084:	mov    QWORD PTR [rbp+0x7],rcx
 100e088:	mov    rax,QWORD PTR [rax+0x20]
 100e08c:	mov    QWORD PTR [rbp+0xf],rax
 100e090:	lea    rdx,[rip+0x3259]        # 0x10112f0
 100e097:	lea    rcx,[rbp-0x11]
 100e09b:	call   0x1004bf0
 100e0a0:	int3   
 100e0a1:	mov    QWORD PTR [rbp+0x6f],rbx
 100e0a5:	mov    ecx,DWORD PTR [rbp+0x67]
 100e0a8:	call   0x1004a94
 100e0ad:	mov    rdi,rax
 100e0b0:	mov    QWORD PTR [rbp+0x6f],rax
 100e0b4:	lea    rcx,[rbp+0x77]
 100e0b8:	call   0x100d3e0
 100e0bd:	nop
 100e0be:	lea    rax,[rbp+0x67]
 100e0c2:	mov    QWORD PTR [rsp+0x20],rax
 100e0c7:	mov    r9d,DWORD PTR [rbp+0x67]
 100e0cb:	mov    r8,rdi
 100e0ce:	mov    edx,0x1
 100e0d3:	mov    rcx,QWORD PTR [rbp-0x19]
 100e0d7:	call   QWORD PTR [rip+0xffffffffffff2fab]        # 0x1001088
 100e0dd:	test   eax,eax
 100e0df:	jne    0x100e144
 100e0e1:	call   QWORD PTR [rip+0xffffffffffff3231]        # 0x1001318
 100e0e7:	test   eax,eax
 100e0e9:	jle    0x100e0f3
 100e0eb:	movzx  eax,ax
 100e0ee:	or     eax,0x80070000
 100e0f3:	mov    r9d,eax
 100e0f6:	mov    r8d,0x2d3
 100e0fc:	lea    rdx,[rip+0xffffffffffff537d]        # 0x1003480
 100e103:	lea    rcx,[rbp+0x17]
 100e107:	call   0x10036dc
 100e10c:	mov    rcx,QWORD PTR [rax]
 100e10f:	mov    QWORD PTR [rbp-0x11],rcx
 100e113:	mov    rcx,QWORD PTR [rax+0x8]
 100e117:	mov    QWORD PTR [rbp-0x9],rcx
 100e11b:	mov    rcx,QWORD PTR [rax+0x10]
 100e11f:	mov    QWORD PTR [rbp-0x1],rcx
 100e123:	mov    rcx,QWORD PTR [rax+0x18]
 100e127:	mov    QWORD PTR [rbp+0x7],rcx
 100e12b:	mov    rax,QWORD PTR [rax+0x20]
 100e12f:	mov    QWORD PTR [rbp+0xf],rax
 100e133:	lea    rdx,[rip+0x31b6]        # 0x10112f0
 100e13a:	lea    rcx,[rbp-0x11]
 100e13e:	call   0x1004bf0
 100e143:	int3   
 100e144:	mov    rbx,QWORD PTR [rbp+0x77]
 100e148:	mov    rdx,rbx
 100e14b:	mov    rcx,QWORD PTR [rdi]
 100e14e:	call   QWORD PTR [rip+0xffffffffffff2f24]        # 0x1001078
 100e154:	test   eax,eax
 100e156:	je     0x100e192
 100e158:	test   rbx,rbx
 100e15b:	je     0x100e166
 100e15d:	mov    rcx,rbx
 100e160:	call   0x10049c8
 100e165:	nop
 100e166:	mov    rcx,rdi
 100e169:	call   0x10049c8
 100e16e:	nop
 100e16f:	mov    QWORD PTR [rbp-0x21],rsi
 100e173:	mov    rcx,QWORD PTR [rbp-0x19]
 100e177:	test   rcx,rcx
 100e17a:	je     0x100e188
 100e17c:	cmp    rcx,0xffffffffffffffff
 100e180:	je     0x100e188
 100e182:	call   QWORD PTR [rip+0xffffffffffff3010]        # 0x1001198
 100e188:	mov    eax,0x1
 100e18d:	jmp    0x100e27b
 100e192:	call   QWORD PTR [rip+0xffffffffffff3180]        # 0x1001318
 100e198:	cmp    eax,0x8007000e
 100e19d:	jne    0x100e1f3
 100e19f:	mov    r9d,0x8007000e
 100e1a5:	mov    r8d,0x2dd
 100e1ab:	lea    rdx,[rip+0xffffffffffff52ce]        # 0x1003480
 100e1b2:	lea    rcx,[rbp+0x17]
 100e1b6:	call   0x10036dc
 100e1bb:	mov    rcx,QWORD PTR [rax]
 100e1be:	mov    QWORD PTR [rbp-0x11],rcx
 100e1c2:	mov    rcx,QWORD PTR [rax+0x8]
 100e1c6:	mov    QWORD PTR [rbp-0x9],rcx
 100e1ca:	mov    rcx,QWORD PTR [rax+0x10]
 100e1ce:	mov    QWORD PTR [rbp-0x1],rcx
 100e1d2:	mov    rcx,QWORD PTR [rax+0x18]
 100e1d6:	mov    QWORD PTR [rbp+0x7],rcx
 100e1da:	mov    rax,QWORD PTR [rax+0x20]
 100e1de:	mov    QWORD PTR [rbp+0xf],rax
 100e1e2:	lea    rdx,[rip+0x3107]        # 0x10112f0
 100e1e9:	lea    rcx,[rbp-0x11]
 100e1ed:	call   0x1004bf0
 100e1f2:	nop
 100e1f3:	test   rbx,rbx
 100e1f6:	je     0x100e201
 100e1f8:	mov    rcx,rbx
 100e1fb:	call   0x10049c8
 100e200:	nop
 100e201:	mov    rcx,rdi
 100e204:	call   0x10049c8
 100e209:	nop
 100e20a:	mov    QWORD PTR [rbp-0x21],rsi
 100e20e:	mov    rcx,QWORD PTR [rbp-0x19]
 100e212:	test   rcx,rcx
 100e215:	je     0x100e223
 100e217:	cmp    rcx,0xffffffffffffffff
 100e21b:	je     0x100e223
 100e21d:	call   QWORD PTR [rip+0xffffffffffff2f75]        # 0x1001198
 100e223:	xor    eax,eax
 100e225:	jmp    0x100e27b
 100e227:	mov    r9d,0x8000ffff
 100e22d:	mov    r8d,0x2c3
 100e233:	lea    rdx,[rip+0xffffffffffff5246]        # 0x1003480
 100e23a:	lea    rcx,[rbp+0x17]
 100e23e:	call   0x10036dc
 100e243:	mov    rcx,QWORD PTR [rax]
 100e246:	mov    QWORD PTR [rbp-0x11],rcx
 100e24a:	mov    rcx,QWORD PTR [rax+0x8]
 100e24e:	mov    QWORD PTR [rbp-0x9],rcx
 100e252:	mov    rcx,QWORD PTR [rax+0x10]
 100e256:	mov    QWORD PTR [rbp-0x1],rcx
 100e25a:	mov    rcx,QWORD PTR [rax+0x18]
 100e25e:	mov    QWORD PTR [rbp+0x7],rcx
 100e262:	mov    rax,QWORD PTR [rax+0x20]
 100e266:	mov    QWORD PTR [rbp+0xf],rax
 100e26a:	lea    rdx,[rip+0x307f]        # 0x10112f0
 100e271:	lea    rcx,[rbp-0x11]
 100e275:	call   0x1004bf0
 100e27a:	nop
 100e27b:	mov    rbx,QWORD PTR [rsp+0xd8]
 100e283:	add    rsp,0xa0
 100e28a:	pop    rdi
 100e28b:	pop    rsi
 100e28c:	pop    rbp
 100e28d:	ret    
 100e28e:	int3   
 100e28f:	int3   
 100e290:	int3   
 100e291:	int3   
 100e292:	int3   
 100e293:	int3   
 100e294:	int3   
 100e295:	int3   
 100e296:	int3   
 100e297:	int3   
 100e298:	int3   
 100e299:	int3   
 100e29a:	int3   
 100e29b:	int3   
 100e29c:	int3   
 100e29d:	int3   
 100e29e:	int3   
 100e29f:	int3   
 100e2a0:	sub    rsp,0x28
 100e2a4:	mov    rcx,QWORD PTR [rcx]
 100e2a7:	test   rcx,rcx
 100e2aa:	je     0x100e2b1
 100e2ac:	call   0x10049c8
 100e2b1:	add    rsp,0x28
 100e2b5:	ret    
 100e2b6:	int3   
 100e2b7:	int3   
 100e2b8:	int3   
 100e2b9:	int3   
 100e2ba:	int3   
 100e2bb:	int3   
 100e2bc:	int3   
 100e2bd:	int3   
 100e2be:	int3   
 100e2bf:	int3   
 100e2c0:	rex push rdi
 100e2c2:	sub    rsp,0xb0
 100e2c9:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100e2d2:	mov    QWORD PTR [rsp+0xc8],rbx
 100e2da:	mov    rbx,rdx
 100e2dd:	mov    rdi,rcx
 100e2e0:	lea    rcx,[rsp+0x30]
 100e2e5:	call   0x10085d0
 100e2ea:	nop
 100e2eb:	mov    r8,rbx
 100e2ee:	xor    edx,edx
 100e2f0:	lea    rcx,[rsp+0x98]
 100e2f8:	call   QWORD PTR [rip+0xffffffffffff2fb2]        # 0x10012b0
 100e2fe:	mov    QWORD PTR [rdi],rax
 100e301:	test   rax,rax
 100e304:	jne    0x100e32a
 100e306:	lea    rax,[rip+0xffffffffffff51f3]        # 0x1003500
 100e30d:	mov    QWORD PTR [rsp+0xc0],rax
 100e315:	lea    rdx,[rip+0x302c]        # 0x1011348
 100e31c:	lea    rcx,[rsp+0xc0]
 100e324:	call   0x1004bf0
 100e329:	int3   
 100e32a:	call   QWORD PTR [rip+0xffffffffffff2fe8]        # 0x1001318
 100e330:	cmp    eax,0xb7
 100e335:	jne    0x100e36b
 100e337:	mov    rcx,QWORD PTR [rdi]
 100e33a:	call   QWORD PTR [rip+0xffffffffffff2e58]        # 0x1001198
 100e340:	mov    QWORD PTR [rdi],0x0
 100e347:	lea    rax,[rip+0xffffffffffff51ca]        # 0x1003518
 100e34e:	mov    QWORD PTR [rsp+0xc0],rax
 100e356:	lea    rdx,[rip+0x2feb]        # 0x1011348
 100e35d:	lea    rcx,[rsp+0xc0]
 100e365:	call   0x1004bf0
 100e36a:	nop
 100e36b:	lea    rcx,[rsp+0x90]
 100e373:	call   0x100d1a0
 100e378:	nop
 100e379:	lea    rcx,[rsp+0x88]
 100e381:	call   0x100d1a0
 100e386:	nop
 100e387:	mov    rcx,QWORD PTR [rsp+0x80]
 100e38f:	call   0x10049c8
 100e394:	nop
 100e395:	lea    rcx,[rsp+0x78]
 100e39a:	call   0x100d1a0
 100e39f:	nop
 100e3a0:	mov    rcx,QWORD PTR [rsp+0x70]
 100e3a5:	call   0x10049c8
 100e3aa:	mov    rcx,QWORD PTR [rsp+0x68]
 100e3af:	call   0x10049c8
 100e3b4:	lea    rcx,[rsp+0x60]
 100e3b9:	call   0x100d1a0
 100e3be:	nop
 100e3bf:	lea    rcx,[rsp+0x58]
 100e3c4:	call   0x100d1a0
 100e3c9:	mov    rbx,QWORD PTR [rsp+0xc8]
 100e3d1:	add    rsp,0xb0
 100e3d8:	pop    rdi
 100e3d9:	ret    
 100e3da:	int3   
 100e3db:	int3   
 100e3dc:	int3   
 100e3dd:	int3   
 100e3de:	int3   
 100e3df:	int3   
 100e3e0:	jmp    QWORD PTR [rip+0xffffffffffff312a]        # 0x1001510
 100e3e6:	int3   
 100e3e7:	int3   
 100e3e8:	int3   
 100e3e9:	int3   
 100e3ea:	int3   
 100e3eb:	int3   
 100e3ec:	jmp    QWORD PTR [rip+0xffffffffffff310e]        # 0x1001500
 100e3f2:	int3   
 100e3f3:	int3   
 100e3f4:	int3   
 100e3f5:	int3   
 100e3f6:	int3   
 100e3f7:	int3   
 100e3f8:	jmp    QWORD PTR [rip+0xffffffffffff310a]        # 0x1001508
 100e3fe:	int3   
 100e3ff:	int3   
 100e400:	int3   
 100e401:	int3   
 100e402:	int3   
 100e403:	int3   
 100e404:	mov    r11,rsp
 100e407:	mov    QWORD PTR [r11+0x20],rbx
 100e40b:	push   rbp
 100e40c:	push   rsi
 100e40d:	push   rdi
 100e40e:	push   r12
 100e410:	push   r13
 100e412:	push   r14
 100e414:	push   r15
 100e416:	sub    rsp,0x70
 100e41a:	mov    eax,DWORD PTR [rcx+0x4]
 100e41d:	mov    r9d,DWORD PTR [rcx]
 100e420:	mov    r12d,DWORD PTR [rcx+0x8]
 100e424:	mov    r10d,DWORD PTR [rcx+0xc]
 100e428:	mov    DWORD PTR [rsp+0x20],0x48
 100e430:	mov    rsi,rcx
 100e433:	mov    ecx,DWORD PTR [rcx+0x10]
 100e436:	mov    r14d,DWORD PTR [rsi+0x14]
 100e43a:	mov    r15d,DWORD PTR [rsi+0x1c]
 100e43e:	mov    r13,rdx
 100e441:	lea    rdx,[rip+0xffffffffffff1bb8]        # 0x1000000
 100e448:	mov    QWORD PTR [r11-0x80],rsi
 100e44c:	add    rax,rdx
 100e44f:	mov    QWORD PTR [r11-0x78],r13
 100e453:	and    r9d,0x1
 100e457:	mov    QWORD PTR [r11-0x70],rax
 100e45b:	and    DWORD PTR [rsp+0x40],0x0
 100e460:	xor    eax,eax
 100e462:	and    QWORD PTR [r11-0x58],rax
 100e466:	and    QWORD PTR [r11-0x50],rax
 100e46a:	mov    QWORD PTR [r11-0x60],rax
 100e46e:	and    DWORD PTR [rsp+0x60],eax
 100e472:	add    r12,rdx
 100e475:	add    r10,rdx
 100e478:	add    rcx,rdx
 100e47b:	add    r14,rdx
 100e47e:	test   r9b,r9b
 100e481:	jne    0x100e4a8
 100e483:	xor    edx,edx
 100e485:	lea    rax,[rsp+0x20]
 100e48a:	lea    r9,[r11+0x8]
 100e48e:	lea    r8d,[rdx+0x1]
 100e492:	mov    ecx,0xc06d0057
 100e497:	mov    QWORD PTR [r11+0x8],rax
 100e49b:	call   QWORD PTR [rip+0xffffffffffff2e7f]        # 0x1001320
 100e4a1:	xor    eax,eax
 100e4a3:	jmp    0x100e6da
 100e4a8:	mov    rdi,QWORD PTR [r12]
 100e4ac:	movabs rax,0x8000000000000000
 100e4b6:	mov    rbp,r13
 100e4b9:	sub    rbp,r10
 100e4bc:	sar    rbp,0x3
 100e4c0:	mov    ebp,ebp
 100e4c2:	test   QWORD PTR [rcx+rbp*8],rax
 100e4c6:	mov    eax,0x0
 100e4cb:	sete   al
 100e4ce:	mov    DWORD PTR [rsp+0x40],eax
 100e4d2:	test   eax,eax
 100e4d4:	je     0x100e4ea
 100e4d6:	mov    eax,DWORD PTR [rcx+rbp*8]
 100e4d9:	lea    rcx,[rip+0xffffffffffff1b22]        # 0x1000002
 100e4e0:	add    rax,rcx
 100e4e3:	mov    QWORD PTR [rsp+0x48],rax
 100e4e8:	jmp    0x100e4f2
 100e4ea:	movzx  eax,WORD PTR [rcx+rbp*8]
 100e4ee:	mov    DWORD PTR [rsp+0x48],eax
 100e4f2:	mov    rax,QWORD PTR [rip+0xffffffffffff356f]        # 0x1001a68
 100e4f9:	xor    ebx,ebx
 100e4fb:	test   rax,rax
 100e4fe:	je     0x100e51c
 100e500:	lea    rdx,[rsp+0x20]
 100e505:	xor    ecx,ecx
 100e507:	call   rax
 100e509:	mov    rbx,rax
 100e50c:	test   rax,rax
 100e50f:	jne    0x100e6b0
 100e515:	mov    rax,QWORD PTR [rip+0xffffffffffff354c]        # 0x1001a68
 100e51c:	test   rdi,rdi
 100e51f:	jne    0x100e5f3
 100e525:	test   rax,rax
 100e528:	je     0x100e53c
 100e52a:	lea    rdx,[rsp+0x20]
 100e52f:	lea    ecx,[rdi+0x1]
 100e532:	call   rax
 100e534:	mov    rdi,rax
 100e537:	test   rax,rax
 100e53a:	jne    0x100e5a7
 100e53c:	mov    rcx,QWORD PTR [rsp+0x38]
 100e541:	call   QWORD PTR [rip+0xffffffffffff2d81]        # 0x10012c8
 100e547:	mov    rdi,rax
 100e54a:	test   rax,rax
 100e54d:	jne    0x100e5a7
 100e54f:	call   QWORD PTR [rip+0xffffffffffff2dc3]        # 0x1001318
 100e555:	mov    DWORD PTR [rsp+0x60],eax
 100e559:	mov    rax,QWORD PTR [rip+0xffffffffffff3510]        # 0x1001a70
 100e560:	test   rax,rax
 100e563:	je     0x100e577
 100e565:	lea    rdx,[rsp+0x20]
 100e56a:	lea    ecx,[rdi+0x3]
 100e56d:	call   rax
 100e56f:	mov    rdi,rax
 100e572:	test   rax,rax
 100e575:	jne    0x100e5a7
 100e577:	xor    edx,edx
 100e579:	lea    rax,[rsp+0x20]
 100e57e:	lea    r9,[rsp+0xb8]
 100e586:	lea    r8d,[rdx+0x1]
 100e58a:	mov    ecx,0xc06d007e
 100e58f:	mov    QWORD PTR [rsp+0xb8],rax
 100e597:	call   QWORD PTR [rip+0xffffffffffff2d83]        # 0x1001320
 100e59d:	mov    rax,QWORD PTR [rsp+0x58]
 100e5a2:	jmp    0x100e6da
 100e5a7:	mov    rax,rdi
 100e5aa:	xchg   QWORD PTR [r12],rax
 100e5ae:	cmp    rax,rdi
 100e5b1:	je     0x100e5e3
 100e5b3:	cmp    DWORD PTR [rsi+0x18],0x0
 100e5b7:	je     0x100e5ec
 100e5b9:	mov    edx,0x10
 100e5be:	lea    ecx,[rdx+0x30]
 100e5c1:	call   QWORD PTR [rip+0xffffffffffff2cf1]        # 0x10012b8
 100e5c7:	test   rax,rax
 100e5ca:	je     0x100e5ec
 100e5cc:	mov    QWORD PTR [rax+0x8],rsi
 100e5d0:	mov    rcx,QWORD PTR [rip+0x6dd1]        # 0x10153a8
 100e5d7:	mov    QWORD PTR [rax],rcx
 100e5da:	mov    QWORD PTR [rip+0x6dc7],rax        # 0x10153a8
 100e5e1:	jmp    0x100e5ec
 100e5e3:	mov    rcx,rdi
 100e5e6:	call   QWORD PTR [rip+0xffffffffffff2cd4]        # 0x10012c0
 100e5ec:	mov    rax,QWORD PTR [rip+0xffffffffffff3475]        # 0x1001a68
 100e5f3:	mov    QWORD PTR [rsp+0x50],rdi
 100e5f8:	test   rax,rax
 100e5fb:	je     0x100e60c
 100e5fd:	lea    rdx,[rsp+0x20]
 100e602:	mov    ecx,0x2
 100e607:	call   rax
 100e609:	mov    rbx,rax
 100e60c:	test   rbx,rbx
 100e60f:	jne    0x100e6ac
 100e615:	cmp    DWORD PTR [rsi+0x14],ebx
 100e618:	je     0x100e643
 100e61a:	cmp    DWORD PTR [rsi+0x1c],ebx
 100e61d:	je     0x100e643
 100e61f:	movsxd rax,DWORD PTR [rdi+0x3c]
 100e623:	cmp    DWORD PTR [rax+rdi*1],0x4550
 100e62a:	jne    0x100e643
 100e62c:	cmp    DWORD PTR [rax+rdi*1+0x8],r15d
 100e631:	jne    0x100e643
 100e633:	cmp    rdi,QWORD PTR [rax+rdi*1+0x30]
 100e638:	jne    0x100e643
 100e63a:	mov    rbx,QWORD PTR [r14+rbp*8]
 100e63e:	test   rbx,rbx
 100e641:	jne    0x100e6ac
 100e643:	mov    rdx,QWORD PTR [rsp+0x48]
 100e648:	mov    rcx,rdi
 100e64b:	call   QWORD PTR [rip+0xffffffffffff2bff]        # 0x1001250
 100e651:	mov    rbx,rax
 100e654:	test   rax,rax
 100e657:	jne    0x100e6ac
 100e659:	call   QWORD PTR [rip+0xffffffffffff2cb9]        # 0x1001318
 100e65f:	mov    DWORD PTR [rsp+0x60],eax
 100e663:	mov    rax,QWORD PTR [rip+0xffffffffffff3406]        # 0x1001a70
 100e66a:	test   rax,rax
 100e66d:	je     0x100e67c
 100e66f:	lea    rdx,[rsp+0x20]
 100e674:	lea    ecx,[rbx+0x4]
 100e677:	call   rax
 100e679:	mov    rbx,rax
 100e67c:	test   rbx,rbx
 100e67f:	jne    0x100e6ac
 100e681:	lea    rax,[rsp+0x20]
 100e686:	lea    r9,[rsp+0xc0]
 100e68e:	lea    r8d,[rbx+0x1]
 100e692:	xor    edx,edx
 100e694:	mov    ecx,0xc06d007f
 100e699:	mov    QWORD PTR [rsp+0xc0],rax
 100e6a1:	call   QWORD PTR [rip+0xffffffffffff2c79]        # 0x1001320
 100e6a7:	mov    rbx,QWORD PTR [rsp+0x58]
 100e6ac:	mov    QWORD PTR [r13+0x0],rbx
 100e6b0:	mov    rax,QWORD PTR [rip+0xffffffffffff33b1]        # 0x1001a68
 100e6b7:	test   rax,rax
 100e6ba:	je     0x100e6d7
 100e6bc:	and    DWORD PTR [rsp+0x60],0x0
 100e6c1:	lea    rdx,[rsp+0x20]
 100e6c6:	mov    ecx,0x5
 100e6cb:	mov    QWORD PTR [rsp+0x50],rdi
 100e6d0:	mov    QWORD PTR [rsp+0x58],rbx
 100e6d5:	call   rax
 100e6d7:	mov    rax,rbx
 100e6da:	mov    rbx,QWORD PTR [rsp+0xc8]
 100e6e2:	add    rsp,0x70
 100e6e6:	pop    r15
 100e6e8:	pop    r14
 100e6ea:	pop    r13
 100e6ec:	pop    r12
 100e6ee:	pop    rdi
 100e6ef:	pop    rsi
 100e6f0:	pop    rbp
 100e6f1:	ret    
 100e6f2:	int3   
 100e6f3:	int3   
 100e6f4:	int3   
 100e6f5:	int3   
 100e6f6:	int3   
 100e6f7:	int3   
 100e6f8:	jmp    QWORD PTR [rip+0xffffffffffff2a02]        # 0x1001100
 100e6fe:	int3   
 100e6ff:	int3   
 100e700:	int3   
 100e701:	int3   
 100e702:	int3   
 100e703:	int3   
 100e704:	jmp    QWORD PTR [rip+0xffffffffffff2c2e]        # 0x1001338
 100e70a:	int3   
 100e70b:	int3   
 100e70c:	int3   
 100e70d:	int3   
 100e70e:	int3   
 100e70f:	int3   
 100e710:	mov    rax,rsp
 100e713:	mov    QWORD PTR [rax+0x8],rbx
 100e717:	mov    QWORD PTR [rax+0x10],rbp
 100e71b:	mov    QWORD PTR [rax+0x18],rsi
 100e71f:	mov    QWORD PTR [rax+0x20],rdi
 100e723:	push   r12
 100e725:	sub    rsp,0x20
 100e729:	mov    r10,QWORD PTR [r9+0x38]
 100e72d:	mov    rsi,rdx
 100e730:	mov    r12,r8
 100e733:	mov    eax,DWORD PTR [r10]
 100e736:	mov    rbp,rcx
 100e739:	mov    rdx,r9
 100e73c:	add    rax,rax
 100e73f:	mov    rcx,rsi
 100e742:	mov    rdi,r9
 100e745:	lea    rbx,[r10+rax*8+0x4]
 100e74a:	mov    r8,rbx
 100e74d:	call   0x100511c
 100e752:	mov    r11d,DWORD PTR [rbx]
 100e755:	mov    r10d,DWORD PTR [rbp+0x4]
 100e759:	mov    eax,r11d
 100e75c:	and    r11d,0x2
 100e760:	mov    edx,0x1
 100e765:	and    eax,edx
 100e767:	and    r10b,0x66
 100e76b:	cmove  r11d,eax
 100e76f:	test   r11d,r11d
 100e772:	je     0x100e787
 100e774:	mov    r9,rdi
 100e777:	mov    r8,r12
 100e77a:	mov    rdx,rsi
 100e77d:	mov    rcx,rbp
 100e780:	call   0x1004f1e
 100e785:	mov    edx,eax
 100e787:	mov    rbx,QWORD PTR [rsp+0x30]
 100e78c:	mov    rbp,QWORD PTR [rsp+0x38]
 100e791:	mov    rsi,QWORD PTR [rsp+0x40]
 100e796:	mov    rdi,QWORD PTR [rsp+0x48]
 100e79b:	mov    eax,edx
 100e79d:	add    rsp,0x20
 100e7a1:	pop    r12
 100e7a3:	ret    
 100e7a4:	int3   
 100e7a5:	int3   
 100e7a6:	int3   
 100e7a7:	int3   
 100e7a8:	int3   
 100e7a9:	int3   
 100e7aa:	jmp    QWORD PTR [rip+0xffffffffffff2c10]        # 0x10013c0
 100e7b0:	int3   
 100e7b1:	int3   
 100e7b2:	int3   
 100e7b3:	int3   
 100e7b4:	int3   
 100e7b5:	int3   
 100e7b6:	jmp    QWORD PTR [rip+0xffffffffffff2bf4]        # 0x10013b0
 100e7bc:	int3   
 100e7bd:	int3   
 100e7be:	int3   
 100e7bf:	int3   
 100e7c0:	int3   
 100e7c1:	int3   
 100e7c2:	int3   
 100e7c3:	int3   
 100e7c4:	int3   
 100e7c5:	int3   
 100e7c6:	mov    rcx,QWORD PTR [rdx+0x20]
 100e7cd:	jmp    0x1003790
 100e7d2:	int3   
 100e7d3:	int3   
 100e7d4:	int3   
 100e7d5:	int3   
 100e7d6:	int3   
 100e7d7:	int3   
 100e7d8:	mov    rcx,QWORD PTR [rdx+0x40]
 100e7df:	jmp    0x1003790
 100e7e4:	int3   
 100e7e5:	int3   
 100e7e6:	int3   
 100e7e7:	int3   
 100e7e8:	int3   
 100e7e9:	int3   
 100e7ea:	lea    rcx,[rdx+0x138]
 100e7f1:	jmp    0x10036cc
 100e7f6:	int3   
 100e7f7:	int3   
 100e7f8:	int3   
 100e7f9:	int3   
 100e7fa:	lea    rcx,[rdx+0x88]
 100e801:	jmp    0x1003914
 100e806:	int3   
 100e807:	int3   
 100e808:	int3   
 100e809:	int3   
 100e80a:	lea    rcx,[rdx+0x50]
 100e811:	jmp    0x1003790
 100e816:	int3   
 100e817:	int3   
 100e818:	int3   
 100e819:	int3   
 100e81a:	lea    rcx,[rdx+0x50]
 100e821:	jmp    0x1003848
 100e826:	int3   
 100e827:	int3   
 100e828:	int3   
 100e829:	int3   
 100e82a:	lea    rcx,[rdx+0xf0]
 100e831:	jmp    0x1003790
 100e836:	int3   
 100e837:	int3   
 100e838:	int3   
 100e839:	int3   
 100e83a:	lea    rcx,[rdx+0xf0]
 100e841:	jmp    0x1003848
 100e846:	int3   
 100e847:	int3   
 100e848:	int3   
 100e849:	int3   
 100e84a:	lea    rcx,[rdx+0x108]
 100e851:	jmp    0x1003790
 100e856:	int3   
 100e857:	int3   
 100e858:	int3   
 100e859:	int3   
 100e85a:	lea    rcx,[rdx+0x108]
 100e861:	jmp    0x1003848
 100e866:	int3   
 100e867:	int3   
 100e868:	int3   
 100e869:	int3   
 100e86a:	lea    rcx,[rdx+0x130]
 100e871:	jmp    0x10046cc
 100e876:	int3   
 100e877:	int3   
 100e878:	int3   
 100e879:	int3   
 100e87a:	lea    rcx,[rdx+0x68]
 100e881:	jmp    0x10046cc
 100e886:	int3   
 100e887:	int3   
 100e888:	int3   
 100e889:	int3   
 100e88a:	lea    rcx,[rdx+0x78]
 100e891:	jmp    0x10046cc
 100e896:	int3   
 100e897:	int3   
 100e898:	int3   
 100e899:	int3   
 100e89a:	lea    rcx,[rdx+0x108]
 100e8a1:	jmp    0x1003790
 100e8a6:	int3   
 100e8a7:	int3   
 100e8a8:	int3   
 100e8a9:	int3   
 100e8aa:	lea    rcx,[rdx+0xf0]
 100e8b1:	jmp    0x1003790
 100e8b6:	int3   
 100e8b7:	int3   
 100e8b8:	int3   
 100e8b9:	int3   
 100e8ba:	lea    rcx,[rdx+0x50]
 100e8c1:	jmp    0x1003790
 100e8c6:	int3   
 100e8c7:	int3   
 100e8c8:	int3   
 100e8c9:	int3   
 100e8ca:	lea    rcx,[rdx+0x300]
 100e8d1:	jmp    0x1007ad0
 100e8d6:	int3   
 100e8d7:	int3   
 100e8d8:	int3   
 100e8d9:	int3   
 100e8da:	mov    QWORD PTR [rsp+0x10],rdx
 100e8df:	push   rbx
 100e8e0:	push   rbp
 100e8e1:	sub    rsp,0x48
 100e8e5:	mov    rbp,rdx
 100e8e8:	mov    rax,QWORD PTR [rbp+0x1f8]
 100e8ef:	mov    ebx,DWORD PTR [rax]
 100e8f1:	mov    DWORD PTR [rbp+0x44],ebx
 100e8f4:	mov    r10,QWORD PTR [rip+0x4de5]        # 0x10136e0
 100e8fb:	cmp    DWORD PTR [r10],0x0
 100e8ff:	je     0x100e9e8
 100e905:	mov    eax,DWORD PTR [rip+0x4915]        # 0x1013220
 100e90b:	cmp    eax,0xffffffff
 100e90e:	jne    0x100e93c
 100e910:	lea    r8,[rip+0x4909]        # 0x1013220
 100e917:	mov    rdx,QWORD PTR [rip+0x490a]        # 0x1013228
 100e91e:	mov    rcx,r10
 100e921:	call   0x1009c30
 100e926:	mov    eax,DWORD PTR [rip+0x48f4]        # 0x1013220
 100e92c:	cmp    eax,0xffffffff
 100e92f:	je     0x100e9e1
 100e935:	mov    r10,QWORD PTR [rip+0x4da4]        # 0x10136e0
 100e93c:	mov    ecx,eax
 100e93e:	imul   rcx,rcx,0x44
 100e942:	mov    rax,QWORD PTR [r10+0x10]
 100e946:	cmp    DWORD PTR [rcx+rax*1],0x2
 100e94a:	jl     0x100e9e8
 100e950:	mov    edx,0x1
 100e955:	mov    rcx,r10
 100e958:	call   0x1009f00
 100e95d:	cmp    eax,0x2
 100e960:	jb     0x100e9e1
 100e962:	xor    edx,edx
 100e964:	mov    rcx,QWORD PTR [rip+0x4d75]        # 0x10136e0
 100e96b:	call   0x1009f00
 100e970:	test   eax,eax
 100e972:	je     0x100e9e1
 100e974:	lea    rax,[rip+0xffffffffffff2fc5]        # 0x1001940
 100e97b:	mov    QWORD PTR [rbp+0x1a8],rax
 100e982:	mov    DWORD PTR [rbp+0x1b0],0xe6
 100e98c:	mov    eax,DWORD PTR [rip+0x488e]        # 0x1013220
 100e992:	mov    DWORD PTR [rbp+0x1b4],eax
 100e998:	mov    DWORD PTR [rbp+0x1b8],0x2
 100e9a2:	mov    rax,QWORD PTR [rip+0x4d37]        # 0x10136e0
 100e9a9:	mov    QWORD PTR [rbp+0x1c0],rax
 100e9b0:	lea    rax,[rip+0xffffffffffff2f89]        # 0x1001940
 100e9b7:	mov    QWORD PTR [rsp+0x28],rax
 100e9bc:	mov    DWORD PTR [rsp+0x20],0xe6
 100e9c4:	mov    r9d,ebx
 100e9c7:	lea    r8,[rip+0xffffffffffff3042]        # 0x1001a10
 100e9ce:	lea    rdx,[rip+0xffffffffffff2efb]        # 0x10018d0
 100e9d5:	lea    rcx,[rbp+0x1a8]
 100e9dc:	call   0x100aba0
 100e9e1:	mov    r10,QWORD PTR [rip+0x4cf8]        # 0x10136e0
 100e9e8:	mov    r9d,0xe6
 100e9ee:	lea    r8,[rip+0xffffffffffff2f4b]        # 0x1001940
 100e9f5:	mov    rdx,r10
 100e9f8:	lea    rcx,[rbp+0x50]
 100e9fc:	call   0x100aac0
 100ea01:	lea    r9,[rip+0xffffffffffff3020]        # 0x1001a28
 100ea08:	lea    r8,[rip+0x4811]        # 0x1013220
 100ea0f:	mov    edx,0x2
 100ea14:	lea    rcx,[rbp+0x50]
 100ea18:	call   0x100aae0
 100ea1d:	nop
 100ea1e:	lea    rax,[rip+0xffffffffffff5a13]        # 0x1004438
 100ea25:	add    rsp,0x48
 100ea29:	pop    rbp
 100ea2a:	pop    rbx
 100ea2b:	ret    
 100ea2c:	int3   
 100ea2d:	int3   
 100ea2e:	int3   
 100ea2f:	int3   
 100ea30:	int3   
 100ea31:	int3   
 100ea32:	int3   
 100ea33:	int3   
 100ea34:	int3   
 100ea35:	int3   
 100ea36:	int3   
 100ea37:	int3   
 100ea38:	int3   
 100ea39:	int3   
 100ea3a:	mov    QWORD PTR [rsp+0x10],rdx
 100ea3f:	push   rbx
 100ea40:	push   rbp
 100ea41:	sub    rsp,0x48
 100ea45:	mov    rbp,rdx
 100ea48:	mov    rax,QWORD PTR [rbp+0x1e8]
 100ea4f:	mov    ebx,DWORD PTR [rax]
 100ea51:	mov    DWORD PTR [rbp+0x44],ebx
 100ea54:	mov    r10,QWORD PTR [rip+0x4c85]        # 0x10136e0
 100ea5b:	cmp    DWORD PTR [r10],0x0
 100ea5f:	je     0x100eb48
 100ea65:	mov    eax,DWORD PTR [rip+0x47b5]        # 0x1013220
 100ea6b:	cmp    eax,0xffffffff
 100ea6e:	jne    0x100ea9c
 100ea70:	lea    r8,[rip+0x47a9]        # 0x1013220
 100ea77:	mov    rdx,QWORD PTR [rip+0x47aa]        # 0x1013228
 100ea7e:	mov    rcx,r10
 100ea81:	call   0x1009c30
 100ea86:	mov    eax,DWORD PTR [rip+0x4794]        # 0x1013220
 100ea8c:	cmp    eax,0xffffffff
 100ea8f:	je     0x100eb41
 100ea95:	mov    r10,QWORD PTR [rip+0x4c44]        # 0x10136e0
 100ea9c:	mov    ecx,eax
 100ea9e:	imul   rcx,rcx,0x44
 100eaa2:	mov    rax,QWORD PTR [r10+0x10]
 100eaa6:	cmp    DWORD PTR [rcx+rax*1],0x2
 100eaaa:	jl     0x100eb48
 100eab0:	mov    edx,0x1
 100eab5:	mov    rcx,r10
 100eab8:	call   0x1009f00
 100eabd:	cmp    eax,0x2
 100eac0:	jb     0x100eb41
 100eac2:	xor    edx,edx
 100eac4:	mov    rcx,QWORD PTR [rip+0x4c15]        # 0x10136e0
 100eacb:	call   0x1009f00
 100ead0:	test   eax,eax
 100ead2:	je     0x100eb41
 100ead4:	lea    rax,[rip+0xffffffffffff2e65]        # 0x1001940
 100eadb:	mov    QWORD PTR [rbp+0xb8],rax
 100eae2:	mov    DWORD PTR [rbp+0xc0],0xf4
 100eaec:	mov    eax,DWORD PTR [rip+0x472e]        # 0x1013220
 100eaf2:	mov    DWORD PTR [rbp+0xc4],eax
 100eaf8:	mov    DWORD PTR [rbp+0xc8],0x2
 100eb02:	mov    rax,QWORD PTR [rip+0x4bd7]        # 0x10136e0
 100eb09:	mov    QWORD PTR [rbp+0xd0],rax
 100eb10:	lea    rax,[rip+0xffffffffffff2e29]        # 0x1001940
 100eb17:	mov    QWORD PTR [rsp+0x28],rax
 100eb1c:	mov    DWORD PTR [rsp+0x20],0xf4
 100eb24:	mov    r9d,ebx
 100eb27:	lea    r8,[rip+0xffffffffffff2ee2]        # 0x1001a10
 100eb2e:	lea    rdx,[rip+0xffffffffffff2d9b]        # 0x10018d0
 100eb35:	lea    rcx,[rbp+0xb8]
 100eb3c:	call   0x100aba0
 100eb41:	mov    r10,QWORD PTR [rip+0x4b98]        # 0x10136e0
 100eb48:	mov    r9d,0xf4
 100eb4e:	lea    r8,[rip+0xffffffffffff2deb]        # 0x1001940
 100eb55:	mov    rdx,r10
 100eb58:	lea    rcx,[rbp+0x50]
 100eb5c:	call   0x100aac0
 100eb61:	lea    r9,[rip+0xffffffffffff2ec0]        # 0x1001a28
 100eb68:	lea    r8,[rip+0x46b1]        # 0x1013220
 100eb6f:	mov    edx,0x2
 100eb74:	lea    rcx,[rbp+0x50]
 100eb78:	call   0x100aae0
 100eb7d:	nop
 100eb7e:	lea    rax,[rip+0xffffffffffff5aa3]        # 0x1004628
 100eb85:	add    rsp,0x48
 100eb89:	pop    rbp
 100eb8a:	pop    rbx
 100eb8b:	ret    
 100eb8c:	int3   
 100eb8d:	int3   
 100eb8e:	int3   
 100eb8f:	int3   
 100eb90:	int3   
 100eb91:	int3   
 100eb92:	int3   
 100eb93:	rex push rbp
 100eb95:	sub    rsp,0x20
 100eb99:	mov    rbp,rdx
 100eb9c:	mov    rax,QWORD PTR [rcx]
 100eb9f:	mov    rdx,rcx
 100eba2:	mov    ecx,DWORD PTR [rax]
 100eba4:	call   0x1004f2a
 100eba9:	nop
 100ebaa:	add    rsp,0x20
 100ebae:	pop    rbp
 100ebaf:	ret    
 100ebb0:	int3   
 100ebb1:	int3   
 100ebb2:	int3   
 100ebb3:	int3   
 100ebb4:	int3   
 100ebb5:	int3   
 100ebb6:	int3   
 100ebb7:	rex push rbp
 100ebb9:	sub    rsp,0x20
 100ebbd:	mov    rbp,rdx
 100ebc0:	mov    QWORD PTR [rbp+0x38],rcx
 100ebc4:	mov    QWORD PTR [rbp+0x28],rcx
 100ebc8:	mov    rax,QWORD PTR [rbp+0x28]
 100ebcc:	mov    rcx,QWORD PTR [rax]
 100ebcf:	mov    QWORD PTR [rbp+0x30],rcx
 100ebd3:	mov    rax,QWORD PTR [rbp+0x30]
 100ebd7:	cmp    DWORD PTR [rax],0xe06d7363
 100ebdd:	je     0x100ebeb
 100ebdf:	mov    DWORD PTR [rbp+0x20],0x0
 100ebe6:	mov    eax,DWORD PTR [rbp+0x20]
 100ebe9:	jmp    0x100ebf1
 100ebeb:	call   0x1005102
 100ebf0:	nop
 100ebf1:	add    rsp,0x20
 100ebf5:	pop    rbp
 100ebf6:	ret    
 100ebf7:	int3   
 100ebf8:	int3   
 100ebf9:	int3   
 100ebfa:	int3   
 100ebfb:	int3   
 100ebfc:	int3   
 100ebfd:	int3   
 100ebfe:	rex push rbp
 100ec00:	sub    rsp,0x20
 100ec04:	mov    rbp,rdx
 100ec07:	cmp    DWORD PTR [rbp+0x20],0x0
 100ec0b:	jne    0x100ec23
 100ec0d:	mov    r9,QWORD PTR [rbp+0x78]
 100ec11:	mov    r8d,DWORD PTR [rbp+0x70]
 100ec15:	mov    rdx,QWORD PTR [rbp+0x68]
 100ec19:	mov    rcx,QWORD PTR [rbp+0x60]
 100ec1d:	call   0x10049d4
 100ec22:	nop
 100ec23:	add    rsp,0x20
 100ec27:	pop    rbp
 100ec28:	ret    
 100ec29:	int3   
 100ec2a:	int3   
 100ec2b:	int3   
 100ec2c:	int3   
 100ec2d:	int3   
 100ec2e:	int3   
 100ec2f:	int3   
 100ec30:	rex push rbp
 100ec32:	sub    rsp,0x20
 100ec36:	mov    rbp,rdx
 100ec39:	mov    ecx,0x8
 100ec3e:	call   0x10051ac
 100ec43:	nop
 100ec44:	add    rsp,0x20
 100ec48:	pop    rbp
 100ec49:	ret    
 100ec4a:	int3   
 100ec4b:	int3   
 100ec4c:	int3   
 100ec4d:	int3   
 100ec4e:	int3   
 100ec4f:	int3   
 100ec50:	int3   
 100ec51:	int3   
 100ec52:	int3   
 100ec53:	int3   
 100ec54:	int3   
 100ec55:	int3   
 100ec56:	int3   
 100ec57:	int3   
 100ec58:	int3   
 100ec59:	int3   
 100ec5a:	int3   
 100ec5b:	int3   
 100ec5c:	int3   
 100ec5d:	int3   
 100ec5e:	int3   
 100ec5f:	int3   
 100ec60:	rex push rbp
 100ec62:	sub    rsp,0x20
 100ec66:	mov    rbp,rdx
 100ec69:	mov    rax,QWORD PTR [rcx]
 100ec6c:	xor    ecx,ecx
 100ec6e:	cmp    DWORD PTR [rax],0xc0000005
 100ec74:	sete   cl
 100ec77:	mov    eax,ecx
 100ec79:	mov    eax,ecx
 100ec7b:	add    rsp,0x20
 100ec7f:	pop    rbp
 100ec80:	ret    
 100ec81:	int3   
 100ec82:	int3   
 100ec83:	int3   
 100ec84:	int3   
 100ec85:	int3   
 100ec86:	int3   
 100ec87:	int3   
 100ec88:	int3   
 100ec89:	int3   
 100ec8a:	int3   
 100ec8b:	int3   
 100ec8c:	int3   
 100ec8d:	int3   
 100ec8e:	int3   
 100ec8f:	int3   
 100ec90:	mov    QWORD PTR [rsp+0x10],rdx
 100ec95:	push   rbp
 100ec96:	sub    rsp,0x30
 100ec9a:	mov    rbp,rdx
 100ec9d:	mov    DWORD PTR [rbp+0x30],0x2
 100eca4:	lea    rax,[rip+0xffffffffffff8442]        # 0x10070ed
 100ecab:	add    rsp,0x30
 100ecaf:	pop    rbp
 100ecb0:	ret    
 100ecb1:	int3   
 100ecb2:	int3   
 100ecb3:	int3   
 100ecb4:	int3   
 100ecb5:	int3   
 100ecb6:	int3   
 100ecb7:	int3   
 100ecb8:	int3   
 100ecb9:	int3   
 100ecba:	int3   
 100ecbb:	int3   
 100ecbc:	int3   
 100ecbd:	int3   
 100ecbe:	int3   
 100ecbf:	int3   
 100ecc0:	lea    rcx,[rip+0x56e9]        # 0x10143b0
 100ecc7:	jmp    0x1006eb0
 100eccc:	int3   
 100eccd:	int3   
 100ecce:	int3   
 100eccf:	int3   
 100ecd0:	int3   
 100ecd1:	int3   
 100ecd2:	int3   
 100ecd3:	int3   
 100ecd4:	int3   
 100ecd5:	int3   
 100ecd6:	int3   
 100ecd7:	int3   
 100ecd8:	int3   
 100ecd9:	int3   
 100ecda:	int3   
 100ecdb:	int3   
 100ecdc:	int3   
 100ecdd:	int3   
 100ecde:	int3   
 100ecdf:	int3   
 100ece0:	lea    rcx,[rip+0x56c9]        # 0x10143b0
 100ece7:	jmp    0x1006eb0
 100ecec:	int3   
 100eced:	int3   
 100ecee:	int3   
 100ecef:	int3   
 100ecf0:	int3   
 100ecf1:	int3   
 100ecf2:	int3   
 100ecf3:	int3   
 100ecf4:	int3   
 100ecf5:	int3   
 100ecf6:	int3   
 100ecf7:	int3   
 100ecf8:	int3   
 100ecf9:	int3   
 100ecfa:	int3   
 100ecfb:	int3   
 100ecfc:	int3   
 100ecfd:	int3   
 100ecfe:	int3   
 100ecff:	int3   
 100ed00:	lea    rcx,[rdx+0x68]
 100ed07:	jmp    0x1007450
 100ed0c:	int3   
 100ed0d:	int3   
 100ed0e:	int3   
 100ed0f:	int3   
 100ed10:	int3   
 100ed11:	int3   
 100ed12:	int3   
 100ed13:	int3   
 100ed14:	int3   
 100ed15:	int3   
 100ed16:	int3   
 100ed17:	int3   
 100ed18:	int3   
 100ed19:	int3   
 100ed1a:	int3   
 100ed1b:	int3   
 100ed1c:	int3   
 100ed1d:	int3   
 100ed1e:	int3   
 100ed1f:	int3   
 100ed20:	mov    rcx,QWORD PTR [rdx+0x38]
 100ed27:	jmp    0x1003790
 100ed2c:	int3   
 100ed2d:	int3   
 100ed2e:	int3   
 100ed2f:	int3   
 100ed30:	mov    rcx,QWORD PTR [rdx+0x60]
 100ed37:	add    rcx,0x18
 100ed3b:	jmp    0x10078d0
 100ed40:	int3   
 100ed41:	int3   
 100ed42:	int3   
 100ed43:	int3   
 100ed44:	int3   
 100ed45:	int3   
 100ed46:	int3   
 100ed47:	int3   
 100ed48:	int3   
 100ed49:	int3   
 100ed4a:	int3   
 100ed4b:	int3   
 100ed4c:	int3   
 100ed4d:	int3   
 100ed4e:	int3   
 100ed4f:	int3   
 100ed50:	mov    rcx,QWORD PTR [rdx+0x40]
 100ed57:	jmp    0x1003790
 100ed5c:	int3   
 100ed5d:	int3   
 100ed5e:	int3   
 100ed5f:	int3   
 100ed60:	int3   
 100ed61:	int3   
 100ed62:	int3   
 100ed63:	int3   
 100ed64:	int3   
 100ed65:	int3   
 100ed66:	int3   
 100ed67:	int3   
 100ed68:	int3   
 100ed69:	int3   
 100ed6a:	int3   
 100ed6b:	int3   
 100ed6c:	int3   
 100ed6d:	int3   
 100ed6e:	int3   
 100ed6f:	int3   
 100ed70:	mov    rcx,QWORD PTR [rdx+0x40]
 100ed77:	add    rcx,0x18
 100ed7b:	jmp    0x10078d0
 100ed80:	mov    rcx,QWORD PTR [rdx+0x40]
 100ed87:	jmp    0x1003790
 100ed8c:	int3   
 100ed8d:	int3   
 100ed8e:	int3   
 100ed8f:	int3   
 100ed90:	int3   
 100ed91:	int3   
 100ed92:	int3   
 100ed93:	int3   
 100ed94:	int3   
 100ed95:	int3   
 100ed96:	int3   
 100ed97:	int3   
 100ed98:	int3   
 100ed99:	int3   
 100ed9a:	int3   
 100ed9b:	int3   
 100ed9c:	int3   
 100ed9d:	int3   
 100ed9e:	int3   
 100ed9f:	int3   
 100eda0:	mov    rcx,QWORD PTR [rdx+0x40]
 100eda7:	jmp    0x1003790
 100edac:	int3   
 100edad:	int3   
 100edae:	int3   
 100edaf:	int3   
 100edb0:	int3   
 100edb1:	int3   
 100edb2:	int3   
 100edb3:	int3   
 100edb4:	int3   
 100edb5:	int3   
 100edb6:	int3   
 100edb7:	int3   
 100edb8:	int3   
 100edb9:	int3   
 100edba:	int3   
 100edbb:	int3   
 100edbc:	int3   
 100edbd:	int3   
 100edbe:	int3   
 100edbf:	int3   
 100edc0:	lea    rcx,[rip+0x48a1]        # 0x1013668
 100edc7:	jmp    0x1003790
 100edcc:	int3   
 100edcd:	int3   
 100edce:	int3   
 100edcf:	int3   
 100edd0:	int3   
 100edd1:	int3   
 100edd2:	int3   
 100edd3:	int3   
 100edd4:	int3   
 100edd5:	int3   
 100edd6:	int3   
 100edd7:	int3   
 100edd8:	int3   
 100edd9:	int3   
 100edda:	int3   
 100eddb:	int3   
 100eddc:	int3   
 100eddd:	int3   
 100edde:	int3   
 100eddf:	int3   
 100ede0:	lea    rcx,[rip+0x4881]        # 0x1013668
 100ede7:	jmp    0x1003790
 100edec:	int3   
 100eded:	int3   
 100edee:	int3   
 100edef:	int3   
 100edf0:	int3   
 100edf1:	int3   
 100edf2:	int3   
 100edf3:	int3   
 100edf4:	int3   
 100edf5:	int3   
 100edf6:	int3   
 100edf7:	int3   
 100edf8:	int3   
 100edf9:	int3   
 100edfa:	int3   
 100edfb:	int3   
 100edfc:	int3   
 100edfd:	int3   
 100edfe:	int3   
 100edff:	int3   
 100ee00:	lea    rcx,[rdx+0xa0]
 100ee07:	jmp    0x1008880
 100ee0c:	int3   
 100ee0d:	int3   
 100ee0e:	int3   
 100ee0f:	int3   
 100ee10:	lea    rcx,[rdx+0x48]
 100ee17:	jmp    0x1007ee0
 100ee1c:	int3   
 100ee1d:	int3   
 100ee1e:	int3   
 100ee1f:	int3   
 100ee20:	lea    rcx,[rdx+0x20]
 100ee27:	jmp    0x1007ee0
 100ee2c:	int3   
 100ee2d:	int3   
 100ee2e:	int3   
 100ee2f:	int3   
 100ee30:	mov    rcx,QWORD PTR [rdx+0x38]
 100ee37:	jmp    0x10049c8
 100ee3c:	int3   
 100ee3d:	int3   
 100ee3e:	int3   
 100ee3f:	int3   
 100ee40:	lea    rcx,[rdx+0x20]
 100ee47:	jmp    0x1007ee0
 100ee4c:	int3   
 100ee4d:	int3   
 100ee4e:	int3   
 100ee4f:	int3   
 100ee50:	mov    rcx,QWORD PTR [rdx+0x38]
 100ee57:	jmp    0x10049c8
 100ee5c:	int3   
 100ee5d:	int3   
 100ee5e:	int3   
 100ee5f:	int3   
 100ee60:	mov    QWORD PTR [rsp+0x10],rdx
 100ee65:	push   rbp
 100ee66:	sub    rsp,0x20
 100ee6a:	mov    rbp,rdx
 100ee6d:	mov    rcx,QWORD PTR [rbp+0xd0]
 100ee74:	call   0x1008c10
 100ee79:	mov    r11,QWORD PTR [rbp+0x98]
 100ee80:	mov    r9d,DWORD PTR [r11]
 100ee83:	mov    r8d,0x9c
 100ee89:	lea    rdx,[rip+0xffffffffffff3de0]        # 0x1002c70
 100ee90:	lea    rcx,[rbp+0x48]
 100ee94:	call   0x10036dc
 100ee99:	mov    rcx,QWORD PTR [rax]
 100ee9c:	mov    QWORD PTR [rbp+0x70],rcx
 100eea0:	mov    rcx,QWORD PTR [rax+0x8]
 100eea4:	mov    QWORD PTR [rbp+0x78],rcx
 100eea8:	mov    rcx,QWORD PTR [rax+0x10]
 100eeac:	mov    QWORD PTR [rbp+0x80],rcx
 100eeb3:	mov    rcx,QWORD PTR [rax+0x18]
 100eeb7:	mov    QWORD PTR [rbp+0x88],rcx
 100eebe:	mov    rax,QWORD PTR [rax+0x20]
 100eec2:	mov    QWORD PTR [rbp+0x90],rax
 100eec9:	lea    rdx,[rip+0x2420]        # 0x10112f0
 100eed0:	lea    rcx,[rbp+0x70]
 100eed4:	call   0x1004bf0
 100eed9:	nop
 100eeda:	int3   
 100eedb:	int3   
 100eedc:	int3   
 100eedd:	int3   
 100eede:	int3   
 100eedf:	int3   
 100eee0:	mov    rcx,QWORD PTR [rdx+0x40]
 100eee7:	add    rcx,0x8
 100eeeb:	jmp    0x1008810
 100eef0:	int3   
 100eef1:	int3   
 100eef2:	int3   
 100eef3:	int3   
 100eef4:	int3   
 100eef5:	int3   
 100eef6:	int3   
 100eef7:	int3   
 100eef8:	int3   
 100eef9:	int3   
 100eefa:	int3   
 100eefb:	int3   
 100eefc:	int3   
 100eefd:	int3   
 100eefe:	int3   
 100eeff:	int3   
 100ef00:	mov    rcx,QWORD PTR [rdx+0x78]
 100ef07:	jmp    0x10081f0
 100ef0c:	int3   
 100ef0d:	int3   
 100ef0e:	int3   
 100ef0f:	int3   
 100ef10:	mov    rcx,QWORD PTR [rdx+0x78]
 100ef17:	add    rcx,0x10
 100ef1b:	jmp    0x10081f0
 100ef20:	mov    rcx,QWORD PTR [rdx+0x78]
 100ef27:	add    rcx,0x20
 100ef2b:	jmp    0x1008320
 100ef30:	mov    rcx,QWORD PTR [rdx+0x78]
 100ef37:	add    rcx,0x30
 100ef3b:	jmp    0x1007ee0
 100ef40:	mov    rcx,QWORD PTR [rdx+0x78]
 100ef47:	add    rcx,0x48
 100ef4b:	jmp    0x1007ee0
 100ef50:	mov    rcx,QWORD PTR [rdx+0x78]
 100ef57:	add    rcx,0x60
 100ef5b:	jmp    0x1007ee0
 100ef60:	mov    rcx,QWORD PTR [rdx+0x78]
 100ef67:	add    rcx,0x78
 100ef6b:	jmp    0x1007ee0
 100ef70:	mov    rcx,QWORD PTR [rdx+0x78]
 100ef77:	add    rcx,0x90
 100ef7e:	jmp    0x1007ee0
 100ef83:	int3   
 100ef84:	int3   
 100ef85:	int3   
 100ef86:	int3   
 100ef87:	int3   
 100ef88:	int3   
 100ef89:	int3   
 100ef8a:	int3   
 100ef8b:	int3   
 100ef8c:	int3   
 100ef8d:	int3   
 100ef8e:	int3   
 100ef8f:	int3   
 100ef90:	mov    rcx,QWORD PTR [rdx+0x78]
 100ef97:	add    rcx,0xa8
 100ef9e:	jmp    0x100acb0
 100efa3:	int3   
 100efa4:	int3   
 100efa5:	int3   
 100efa6:	int3   
 100efa7:	int3   
 100efa8:	int3   
 100efa9:	int3   
 100efaa:	int3   
 100efab:	int3   
 100efac:	int3   
 100efad:	int3   
 100efae:	int3   
 100efaf:	int3   
 100efb0:	lea    rcx,[rdx+0xb0]
 100efb7:	jmp    0x1008720
 100efbc:	int3   
 100efbd:	int3   
 100efbe:	int3   
 100efbf:	int3   
 100efc0:	int3   
 100efc1:	int3   
 100efc2:	int3   
 100efc3:	int3   
 100efc4:	int3   
 100efc5:	int3   
 100efc6:	int3   
 100efc7:	int3   
 100efc8:	int3   
 100efc9:	int3   
 100efca:	int3   
 100efcb:	int3   
 100efcc:	int3   
 100efcd:	int3   
 100efce:	int3   
 100efcf:	int3   
 100efd0:	mov    rcx,QWORD PTR [rdx+0x180]
 100efd7:	jmp    0x10081f0
 100efdc:	int3   
 100efdd:	int3   
 100efde:	int3   
 100efdf:	int3   
 100efe0:	mov    rcx,QWORD PTR [rdx+0x180]
 100efe7:	add    rcx,0x10
 100efeb:	jmp    0x10081f0
 100eff0:	mov    rcx,QWORD PTR [rdx+0x180]
 100eff7:	add    rcx,0x28
 100effb:	jmp    0x1008320
 100f000:	mov    rcx,QWORD PTR [rdx+0x180]
 100f007:	add    rcx,0x38
 100f00b:	jmp    0x100ba00
 100f010:	mov    rcx,QWORD PTR [rdx+0x180]
 100f017:	add    rcx,0x40
 100f01b:	jmp    0x1007ee0
 100f020:	lea    rcx,[rdx+0x68]
 100f027:	jmp    0x1007ee0
 100f02c:	int3   
 100f02d:	int3   
 100f02e:	int3   
 100f02f:	int3   
 100f030:	lea    rcx,[rdx+0xc0]
 100f037:	jmp    0x1008720
 100f03c:	int3   
 100f03d:	int3   
 100f03e:	int3   
 100f03f:	int3   
 100f040:	lea    rcx,[rdx+0xc0]
 100f047:	jmp    0x1008580
 100f04c:	int3   
 100f04d:	int3   
 100f04e:	int3   
 100f04f:	int3   
 100f050:	lea    rcx,[rdx+0xc0]
 100f057:	add    rcx,0x48
 100f05b:	jmp    0x100d1a0
 100f060:	lea    rcx,[rdx+0xc0]
 100f067:	add    rcx,0x50
 100f06b:	jmp    0x10083e0
 100f070:	lea    rcx,[rdx+0xc0]
 100f077:	add    rcx,0x58
 100f07b:	jmp    0x10083d0
 100f080:	lea    rcx,[rdx+0xc0]
 100f087:	add    rcx,0x28
 100f08b:	jmp    0x100d1a0
 100f090:	int3   
 100f091:	int3   
 100f092:	int3   
 100f093:	int3   
 100f094:	int3   
 100f095:	int3   
 100f096:	int3   
 100f097:	int3   
 100f098:	int3   
 100f099:	int3   
 100f09a:	int3   
 100f09b:	int3   
 100f09c:	int3   
 100f09d:	int3   
 100f09e:	int3   
 100f09f:	int3   
 100f0a0:	mov    rcx,QWORD PTR [rdx+0x70]
 100f0a7:	jmp    0x1008580
 100f0ac:	int3   
 100f0ad:	int3   
 100f0ae:	int3   
 100f0af:	int3   
 100f0b0:	mov    rcx,QWORD PTR [rdx+0x70]
 100f0b7:	add    rcx,0x48
 100f0bb:	jmp    0x100d1a0
 100f0c0:	mov    rcx,QWORD PTR [rdx+0x70]
 100f0c7:	add    rcx,0x50
 100f0cb:	jmp    0x10083e0
 100f0d0:	mov    rcx,QWORD PTR [rdx+0x70]
 100f0d7:	add    rcx,0x58
 100f0db:	jmp    0x10083d0
 100f0e0:	mov    rcx,QWORD PTR [rdx+0x70]
 100f0e7:	add    rcx,0x60
 100f0eb:	jmp    0x10083c0
 100f0f0:	int3   
 100f0f1:	int3   
 100f0f2:	int3   
 100f0f3:	int3   
 100f0f4:	int3   
 100f0f5:	int3   
 100f0f6:	int3   
 100f0f7:	int3   
 100f0f8:	int3   
 100f0f9:	int3   
 100f0fa:	int3   
 100f0fb:	int3   
 100f0fc:	int3   
 100f0fd:	int3   
 100f0fe:	int3   
 100f0ff:	int3   
 100f100:	mov    rcx,QWORD PTR [rdx+0x90]
 100f107:	add    rcx,0x28
 100f10b:	jmp    0x100d1a0
 100f110:	mov    rcx,QWORD PTR [rdx+0x90]
 100f117:	add    rcx,0x30
 100f11b:	jmp    0x100d1a0
 100f120:	mov    rcx,QWORD PTR [rdx+0x90]
 100f127:	add    rcx,0x38
 100f12b:	jmp    0x10083e0
 100f130:	mov    rcx,QWORD PTR [rdx+0x90]
 100f137:	add    rcx,0x40
 100f13b:	jmp    0x10083e0
 100f140:	int3   
 100f141:	int3   
 100f142:	int3   
 100f143:	int3   
 100f144:	int3   
 100f145:	int3   
 100f146:	int3   
 100f147:	int3   
 100f148:	int3   
 100f149:	int3   
 100f14a:	int3   
 100f14b:	int3   
 100f14c:	int3   
 100f14d:	int3   
 100f14e:	int3   
 100f14f:	int3   
 100f150:	mov    rcx,QWORD PTR [rdx+0x40]
 100f157:	jmp    0x1008580
 100f15c:	int3   
 100f15d:	int3   
 100f15e:	int3   
 100f15f:	int3   
 100f160:	mov    rcx,QWORD PTR [rdx+0x40]
 100f167:	add    rcx,0x48
 100f16b:	jmp    0x100d1a0
 100f170:	mov    rcx,QWORD PTR [rdx+0x40]
 100f177:	add    rcx,0x50
 100f17b:	jmp    0x10083e0
 100f180:	mov    rcx,QWORD PTR [rdx+0x40]
 100f187:	add    rcx,0x58
 100f18b:	jmp    0x10083d0
 100f190:	mov    rcx,QWORD PTR [rdx+0x40]
 100f197:	add    rcx,0x28
 100f19b:	jmp    0x100d1a0
 100f1a0:	int3   
 100f1a1:	int3   
 100f1a2:	int3   
 100f1a3:	int3   
 100f1a4:	int3   
 100f1a5:	int3   
 100f1a6:	int3   
 100f1a7:	int3   
 100f1a8:	int3   
 100f1a9:	int3   
 100f1aa:	int3   
 100f1ab:	int3   
 100f1ac:	int3   
 100f1ad:	int3   
 100f1ae:	int3   
 100f1af:	int3   
 100f1b0:	mov    rcx,QWORD PTR [rdx+0x40]
 100f1b7:	add    rcx,0x28
 100f1bb:	jmp    0x100d1a0
 100f1c0:	int3   
 100f1c1:	int3   
 100f1c2:	int3   
 100f1c3:	int3   
 100f1c4:	int3   
 100f1c5:	int3   
 100f1c6:	int3   
 100f1c7:	int3   
 100f1c8:	int3   
 100f1c9:	int3   
 100f1ca:	int3   
 100f1cb:	int3   
 100f1cc:	int3   
 100f1cd:	int3   
 100f1ce:	int3   
 100f1cf:	int3   
 100f1d0:	lea    rcx,[rip+0x6189]        # 0x1015360
 100f1d7:	add    rcx,0x8
 100f1db:	jmp    0x1008810
 100f1e0:	int3   
 100f1e1:	int3   
 100f1e2:	int3   
 100f1e3:	int3   
 100f1e4:	int3   
 100f1e5:	int3   
 100f1e6:	int3   
 100f1e7:	int3   
 100f1e8:	int3   
 100f1e9:	int3   
 100f1ea:	int3   
 100f1eb:	int3   
 100f1ec:	int3   
 100f1ed:	int3   
 100f1ee:	int3   
 100f1ef:	int3   
 100f1f0:	lea    rcx,[rdx+0x20]
 100f1f7:	jmp    0x1008790
 100f1fc:	int3   
 100f1fd:	int3   
 100f1fe:	int3   
 100f1ff:	int3   
 100f200:	int3   
 100f201:	int3   
 100f202:	int3   
 100f203:	int3   
 100f204:	int3   
 100f205:	int3   
 100f206:	int3   
 100f207:	int3   
 100f208:	int3   
 100f209:	int3   
 100f20a:	int3   
 100f20b:	int3   
 100f20c:	int3   
 100f20d:	int3   
 100f20e:	int3   
 100f20f:	int3   
 100f210:	lea    rcx,[rdx+0x90]
 100f217:	jmp    0x1008720
 100f21c:	int3   
 100f21d:	int3   
 100f21e:	int3   
 100f21f:	int3   
 100f220:	lea    rcx,[rdx+0x90]
 100f227:	jmp    0x1008580
 100f22c:	int3   
 100f22d:	int3   
 100f22e:	int3   
 100f22f:	int3   
 100f230:	lea    rcx,[rdx+0x90]
 100f237:	add    rcx,0x48
 100f23b:	jmp    0x100d1a0
 100f240:	lea    rcx,[rdx+0x90]
 100f247:	add    rcx,0x50
 100f24b:	jmp    0x10083e0
 100f250:	lea    rcx,[rdx+0x90]
 100f257:	add    rcx,0x58
 100f25b:	jmp    0x10083d0
 100f260:	lea    rcx,[rdx+0x90]
 100f267:	add    rcx,0x28
 100f26b:	jmp    0x100d1a0
 100f270:	int3   
 100f271:	int3   
 100f272:	int3   
 100f273:	int3   
 100f274:	int3   
 100f275:	int3   
 100f276:	int3   
 100f277:	int3   
 100f278:	int3   
 100f279:	int3   
 100f27a:	int3   
 100f27b:	int3   
 100f27c:	int3   
 100f27d:	int3   
 100f27e:	int3   
 100f27f:	int3   
 100f280:	lea    rcx,[rdx+0x80]
 100f287:	jmp    0x1008720
 100f28c:	int3   
 100f28d:	int3   
 100f28e:	int3   
 100f28f:	int3   
 100f290:	lea    rcx,[rdx+0x68]
 100f297:	jmp    0x10081f0
 100f29c:	int3   
 100f29d:	int3   
 100f29e:	int3   
 100f29f:	int3   
 100f2a0:	lea    rcx,[rdx+0x80]
 100f2a7:	jmp    0x1008580
 100f2ac:	int3   
 100f2ad:	int3   
 100f2ae:	int3   
 100f2af:	int3   
 100f2b0:	lea    rcx,[rdx+0x80]
 100f2b7:	add    rcx,0x48
 100f2bb:	jmp    0x100d1a0
 100f2c0:	lea    rcx,[rdx+0x80]
 100f2c7:	add    rcx,0x50
 100f2cb:	jmp    0x10083e0
 100f2d0:	lea    rcx,[rdx+0x80]
 100f2d7:	add    rcx,0x58
 100f2db:	jmp    0x10083d0
 100f2e0:	lea    rcx,[rdx+0x80]
 100f2e7:	add    rcx,0x28
 100f2eb:	jmp    0x100d1a0
 100f2f0:	int3   
 100f2f1:	int3   
 100f2f2:	int3   
 100f2f3:	int3   
 100f2f4:	int3   
 100f2f5:	int3   
 100f2f6:	int3   
 100f2f7:	int3   
 100f2f8:	int3   
 100f2f9:	int3   
 100f2fa:	int3   
 100f2fb:	int3   
 100f2fc:	int3   
 100f2fd:	int3   
 100f2fe:	int3   
 100f2ff:	int3   
 100f300:	lea    rcx,[rdx+0x28]
 100f307:	jmp    0x10081f0
 100f30c:	int3   
 100f30d:	int3   
 100f30e:	int3   
 100f30f:	int3   
 100f310:	int3   
 100f311:	int3   
 100f312:	int3   
 100f313:	int3   
 100f314:	int3   
 100f315:	int3   
 100f316:	int3   
 100f317:	int3   
 100f318:	int3   
 100f319:	int3   
 100f31a:	int3   
 100f31b:	int3   
 100f31c:	int3   
 100f31d:	int3   
 100f31e:	int3   
 100f31f:	int3   
 100f320:	lea    rcx,[rdx+0x30]
 100f327:	jmp    0x1008880
 100f32c:	int3   
 100f32d:	int3   
 100f32e:	int3   
 100f32f:	int3   
 100f330:	int3   
 100f331:	int3   
 100f332:	int3   
 100f333:	int3   
 100f334:	int3   
 100f335:	int3   
 100f336:	int3   
 100f337:	int3   
 100f338:	int3   
 100f339:	int3   
 100f33a:	int3   
 100f33b:	int3   
 100f33c:	int3   
 100f33d:	int3   
 100f33e:	int3   
 100f33f:	int3   
 100f340:	lea    rcx,[rdx+0x30]
 100f347:	jmp    0x1008880
 100f34c:	int3   
 100f34d:	int3   
 100f34e:	int3   
 100f34f:	int3   
 100f350:	int3   
 100f351:	int3   
 100f352:	int3   
 100f353:	int3   
 100f354:	int3   
 100f355:	int3   
 100f356:	int3   
 100f357:	int3   
 100f358:	int3   
 100f359:	int3   
 100f35a:	int3   
 100f35b:	int3   
 100f35c:	int3   
 100f35d:	int3   
 100f35e:	int3   
 100f35f:	int3   
 100f360:	lea    rcx,[rdx+0x90]
 100f367:	jmp    0x1008880
 100f36c:	int3   
 100f36d:	int3   
 100f36e:	int3   
 100f36f:	int3   
 100f370:	lea    rcx,[rdx+0x80]
 100f377:	jmp    0x10081f0
 100f37c:	int3   
 100f37d:	int3   
 100f37e:	int3   
 100f37f:	int3   
 100f380:	int3   
 100f381:	int3   
 100f382:	int3   
 100f383:	int3   
 100f384:	int3   
 100f385:	int3   
 100f386:	int3   
 100f387:	int3   
 100f388:	int3   
 100f389:	int3   
 100f38a:	int3   
 100f38b:	int3   
 100f38c:	int3   
 100f38d:	int3   
 100f38e:	int3   
 100f38f:	int3   
 100f390:	lea    rcx,[rdx+0x68]
 100f397:	jmp    0x1008880
 100f39c:	int3   
 100f39d:	int3   
 100f39e:	int3   
 100f39f:	int3   
 100f3a0:	int3   
 100f3a1:	int3   
 100f3a2:	int3   
 100f3a3:	int3   
 100f3a4:	int3   
 100f3a5:	int3   
 100f3a6:	int3   
 100f3a7:	int3   
 100f3a8:	int3   
 100f3a9:	int3   
 100f3aa:	int3   
 100f3ab:	int3   
 100f3ac:	int3   
 100f3ad:	int3   
 100f3ae:	int3   
 100f3af:	int3   
 100f3b0:	lea    rcx,[rdx+0x50]
 100f3b7:	jmp    0x1008880
 100f3bc:	int3   
 100f3bd:	int3   
 100f3be:	int3   
 100f3bf:	int3   
 100f3c0:	int3   
 100f3c1:	int3   
 100f3c2:	int3   
 100f3c3:	int3   
 100f3c4:	int3   
 100f3c5:	int3   
 100f3c6:	int3   
 100f3c7:	int3   
 100f3c8:	int3   
 100f3c9:	int3   
 100f3ca:	int3   
 100f3cb:	int3   
 100f3cc:	int3   
 100f3cd:	int3   
 100f3ce:	int3   
 100f3cf:	int3   
 100f3d0:	lea    rcx,[rdx+0x48]
 100f3d7:	jmp    0x100cc00
 100f3dc:	int3   
 100f3dd:	int3   
 100f3de:	int3   
 100f3df:	int3   
 100f3e0:	int3   
 100f3e1:	int3   
 100f3e2:	int3   
 100f3e3:	int3   
 100f3e4:	int3   
 100f3e5:	int3   
 100f3e6:	int3   
 100f3e7:	int3   
 100f3e8:	int3   
 100f3e9:	int3   
 100f3ea:	int3   
 100f3eb:	int3   
 100f3ec:	int3   
 100f3ed:	int3   
 100f3ee:	int3   
 100f3ef:	int3   
 100f3f0:	lea    rcx,[rdx+0xa0]
 100f3f7:	jmp    0x100e2a0
 100f3fc:	int3   
 100f3fd:	int3   
 100f3fe:	int3   
 100f3ff:	int3   
 100f400:	int3   
 100f401:	int3   
 100f402:	int3   
 100f403:	int3   
 100f404:	int3   
 100f405:	int3   
 100f406:	int3   
 100f407:	int3   
 100f408:	int3   
 100f409:	int3   
 100f40a:	int3   
 100f40b:	int3   
 100f40c:	int3   
 100f40d:	int3   
 100f40e:	int3   
 100f40f:	int3   
 100f410:	lea    rcx,[rdx+0x70]
 100f417:	jmp    0x100e2a0
 100f41c:	int3   
 100f41d:	int3   
 100f41e:	int3   
 100f41f:	int3   
 100f420:	int3   
 100f421:	int3   
 100f422:	int3   
 100f423:	int3   
 100f424:	int3   
 100f425:	int3   
 100f426:	int3   
 100f427:	int3   
 100f428:	int3   
 100f429:	int3   
 100f42a:	int3   
 100f42b:	int3   
 100f42c:	int3   
 100f42d:	int3   
 100f42e:	int3   
 100f42f:	int3   
 100f430:	lea    rcx,[rdx+0x28]
 100f437:	jmp    0x10081f0
 100f43c:	int3   
 100f43d:	int3   
 100f43e:	int3   
 100f43f:	int3   
 100f440:	int3   
 100f441:	int3   
 100f442:	int3   
 100f443:	int3   
 100f444:	int3   
 100f445:	int3   
 100f446:	int3   
 100f447:	int3   
 100f448:	int3   
 100f449:	int3   
 100f44a:	int3   
 100f44b:	int3   
 100f44c:	int3   
 100f44d:	int3   
 100f44e:	int3   
 100f44f:	int3   
 100f450:	lea    rcx,[rdx+0xc8]
 100f457:	jmp    0x100ba00
 100f45c:	int3   
 100f45d:	int3   
 100f45e:	int3   
 100f45f:	int3   
 100f460:	lea    rcx,[rdx+0x30]
 100f467:	jmp    0x100ba00
 100f46c:	int3   
 100f46d:	int3   
 100f46e:	int3   
 100f46f:	int3   
 100f470:	int3   
 100f471:	int3   
 100f472:	int3   
 100f473:	int3   
 100f474:	int3   
 100f475:	int3   
 100f476:	int3   
 100f477:	int3   
 100f478:	int3   
 100f479:	int3   
 100f47a:	int3   
 100f47b:	int3   
 100f47c:	int3   
 100f47d:	int3   
 100f47e:	int3   
 100f47f:	int3   
 100f480:	lea    rcx,[rdx+0x38]
 100f487:	jmp    0x10081f0
 100f48c:	int3   
 100f48d:	int3   
 100f48e:	int3   
 100f48f:	int3   
 100f490:	lea    rcx,[rdx+0xc8]
 100f497:	jmp    0x100ba00
 100f49c:	int3   
 100f49d:	int3   
 100f49e:	int3   
 100f49f:	int3   
 100f4a0:	lea    rcx,[rdx+0xd0]
 100f4a7:	jmp    0x10083d0
 100f4ac:	int3   
 100f4ad:	int3   
 100f4ae:	int3   
 100f4af:	int3   
 100f4b0:	int3   
 100f4b1:	int3   
 100f4b2:	int3   
 100f4b3:	int3   
 100f4b4:	int3   
 100f4b5:	int3   
 100f4b6:	int3   
 100f4b7:	int3   
 100f4b8:	int3   
 100f4b9:	int3   
 100f4ba:	int3   
 100f4bb:	int3   
 100f4bc:	int3   
 100f4bd:	int3   
 100f4be:	int3   
 100f4bf:	int3   
 100f4c0:	lea    rcx,[rdx+0x40]
 100f4c7:	jmp    0x100e2a0
 100f4cc:	int3   
 100f4cd:	int3   
 100f4ce:	int3   
 100f4cf:	int3   
 100f4d0:	int3   
 100f4d1:	int3   
 100f4d2:	int3   
 100f4d3:	int3   
 100f4d4:	int3   
 100f4d5:	int3   
 100f4d6:	int3   
 100f4d7:	int3   
 100f4d8:	int3   
 100f4d9:	int3   
 100f4da:	int3   
 100f4db:	int3   
 100f4dc:	int3   
 100f4dd:	int3   
 100f4de:	int3   
 100f4df:	int3   
 100f4e0:	lea    rcx,[rdx+0x40]
 100f4e7:	jmp    0x100e2a0
 100f4ec:	int3   
 100f4ed:	int3   
 100f4ee:	int3   
 100f4ef:	int3   
 100f4f0:	int3   
 100f4f1:	int3   
 100f4f2:	int3   
 100f4f3:	int3   
 100f4f4:	int3   
 100f4f5:	int3   
 100f4f6:	int3   
 100f4f7:	int3   
 100f4f8:	int3   
 100f4f9:	int3   
 100f4fa:	int3   
 100f4fb:	int3   
 100f4fc:	int3   
 100f4fd:	int3   
 100f4fe:	int3   
 100f4ff:	int3   
 100f500:	lea    rcx,[rdx+0x30]
 100f507:	jmp    0x1008720
 100f50c:	int3   
 100f50d:	int3   
 100f50e:	int3   
 100f50f:	int3   
 100f510:	lea    rcx,[rdx+0x30]
 100f517:	jmp    0x1008580
 100f51c:	int3   
 100f51d:	int3   
 100f51e:	int3   
 100f51f:	int3   
 100f520:	lea    rcx,[rdx+0x30]
 100f527:	add    rcx,0x48
 100f52b:	jmp    0x100d1a0
 100f530:	lea    rcx,[rdx+0x30]
 100f537:	add    rcx,0x50
 100f53b:	jmp    0x10083e0
 100f540:	lea    rcx,[rdx+0x30]
 100f547:	add    rcx,0x58
 100f54b:	jmp    0x10083d0
 100f550:	lea    rcx,[rdx+0x30]
 100f557:	add    rcx,0x28
 100f55b:	jmp    0x100d1a0
 100f560:	int3   
 100f561:	int3   
 100f562:	int3   
 100f563:	int3   
 100f564:	int3   
 100f565:	int3   
 100f566:	int3   
 100f567:	int3   
 100f568:	int3   
 100f569:	int3   
 100f56a:	int3   
 100f56b:	int3   
 100f56c:	int3   
 100f56d:	int3   
 100f56e:	int3   
 100f56f:	int3   
 100f570:	sub    rsp,0x28
 100f574:	call   0x1006410
 100f579:	mov    DWORD PTR [rip+0x47f5],eax        # 0x1013d74
 100f57f:	add    rsp,0x28
 100f583:	ret    
 100f584:	int3   
 100f585:	int3   
 100f586:	int3   
 100f587:	int3   
 100f588:	int3   
 100f589:	int3   
 100f58a:	int3   
 100f58b:	int3   
 100f58c:	int3   
 100f58d:	int3   
 100f58e:	int3   
 100f58f:	int3   
 100f590:	sub    rsp,0x38
 100f594:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f59d:	xor    eax,eax
 100f59f:	mov    QWORD PTR [rip+0x4e0a],rax        # 0x10143b0
 100f5a6:	mov    QWORD PTR [rip+0x4e0b],rax        # 0x10143b8
 100f5ad:	mov    QWORD PTR [rip+0x4e0c],rax        # 0x10143c0
 100f5b4:	mov    QWORD PTR [rip+0x4e0d],rax        # 0x10143c8
 100f5bb:	mov    QWORD PTR [rip+0x4e0e],rax        # 0x10143d0
 100f5c2:	lea    rcx,[rip+0x147]        # 0x100f710
 100f5c9:	add    rsp,0x38
 100f5cd:	jmp    0x1004e80
 100f5d2:	int3   
 100f5d3:	int3   
 100f5d4:	int3   
 100f5d5:	int3   
 100f5d6:	int3   
 100f5d7:	int3   
 100f5d8:	int3   
 100f5d9:	int3   
 100f5da:	int3   
 100f5db:	int3   
 100f5dc:	int3   
 100f5dd:	int3   
 100f5de:	int3   
 100f5df:	int3   
 100f5e0:	sub    rsp,0x28
 100f5e4:	lea    rcx,[rip+0x4df5]        # 0x10143e0
 100f5eb:	xor    edx,edx
 100f5ed:	mov    r8d,0xf60
 100f5f3:	call   0x100e7b6
 100f5f8:	lea    rax,[rip+0x5ca1]        # 0x10152a0
 100f5ff:	mov    DWORD PTR [rip+0x5c97],0xc000010a        # 0x10152a0
 100f609:	mov    QWORD PTR [rip+0x5c80],rax        # 0x1015290
 100f610:	lea    rax,[rip+0x4d99]        # 0x10143b0
 100f617:	mov    QWORD PTR [rip+0x5c76],0x0        # 0x1015298
 100f622:	mov    QWORD PTR [rip+0x5d17],rax        # 0x1015340
 100f629:	mov    DWORD PTR [rip+0x5bdd],0x68        # 0x1015210
 100f633:	add    rsp,0x28
 100f637:	ret    
 100f638:	int3   
 100f639:	int3   
 100f63a:	int3   
 100f63b:	int3   
 100f63c:	int3   
 100f63d:	int3   
 100f63e:	int3   
 100f63f:	int3   
 100f640:	rex push rbx
 100f642:	sub    rsp,0x30
 100f646:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f64f:	lea    rbx,[rip+0xffffffffffff30da]        # 0x1002730
 100f656:	mov    rcx,rbx
 100f659:	call   QWORD PTR [rip+0xffffffffffff1c81]        # 0x10012e0
 100f65f:	mov    DWORD PTR [rip+0x4017],eax        # 0x101367c
 100f665:	mov    DWORD PTR [rip+0x400d],eax        # 0x1013678
 100f66b:	mov    QWORD PTR [rip+0x3ffe],rbx        # 0x1013670
 100f672:	lea    rax,[rip+0xffffffffffff2207]        # 0x1001880
 100f679:	mov    QWORD PTR [rip+0x3fe8],rax        # 0x1013668
 100f680:	lea    rcx,[rip+0xb9]        # 0x100f740
 100f687:	add    rsp,0x30
 100f68b:	pop    rbx
 100f68c:	jmp    0x1004e80
 100f691:	int3   
 100f692:	int3   
 100f693:	int3   
 100f694:	int3   
 100f695:	int3   
 100f696:	int3   
 100f697:	int3   
 100f698:	int3   
 100f699:	int3   
 100f69a:	int3   
 100f69b:	int3   
 100f69c:	int3   
 100f69d:	int3   
 100f69e:	int3   
 100f69f:	int3   
 100f6a0:	sub    rsp,0x38
 100f6a4:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f6ad:	xor    edx,edx
 100f6af:	lea    rcx,[rip+0x5cb2]        # 0x1015368
 100f6b6:	call   0x100e2c0
 100f6bb:	nop
 100f6bc:	lea    rcx,[rip+0xbd]        # 0x100f780
 100f6c3:	add    rsp,0x38
 100f6c7:	jmp    0x1004e80
 100f6cc:	int3   
 100f6cd:	int3   
 100f6ce:	int3   
 100f6cf:	int3   
 100f6d0:	int3   
 100f6d1:	int3   
 100f6d2:	int3   
 100f6d3:	int3   
 100f6d4:	int3   
 100f6d5:	int3   
 100f6d6:	int3   
 100f6d7:	int3   
 100f6d8:	int3   
 100f6d9:	int3   
 100f6da:	int3   
 100f6db:	int3   
 100f6dc:	int3   
 100f6dd:	int3   
 100f6de:	int3   
 100f6df:	int3   
 100f6e0:	sub    rsp,0x28
 100f6e4:	call   0x100cb80
 100f6e9:	mov    DWORD PTR [rip+0x3ff9],eax        # 0x10136e8
 100f6ef:	add    rsp,0x28
 100f6f3:	ret    
 100f6f4:	int3   
 100f6f5:	int3   
 100f6f6:	int3   
 100f6f7:	int3   
 100f6f8:	int3   
 100f6f9:	int3   
 100f6fa:	int3   
 100f6fb:	int3   
 100f6fc:	int3   
 100f6fd:	int3   
 100f6fe:	int3   
 100f6ff:	int3   
 100f700:	int3   
 100f701:	int3   
 100f702:	int3   
 100f703:	int3   
 100f704:	int3   
 100f705:	int3   
 100f706:	int3   
 100f707:	int3   
 100f708:	int3   
 100f709:	int3   
 100f70a:	int3   
 100f70b:	int3   
 100f70c:	int3   
 100f70d:	int3   
 100f70e:	int3   
 100f70f:	int3   
 100f710:	sub    rsp,0x38
 100f714:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f71d:	cmp    DWORD PTR [rip+0x4cb4],0x0        # 0x10143d8
 100f724:	je     0x100f733
 100f726:	lea    rcx,[rip+0x4c83]        # 0x10143b0
 100f72d:	call   QWORD PTR [rip+0xffffffffffff1bbd]        # 0x10012f0
 100f733:	add    rsp,0x38
 100f737:	ret    
 100f738:	int3   
 100f739:	int3   
 100f73a:	int3   
 100f73b:	int3   
 100f73c:	int3   
 100f73d:	int3   
 100f73e:	int3   
 100f73f:	int3   
 100f740:	sub    rsp,0x18
 100f744:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 100f74c:	lea    rax,[rip+0xffffffffffff212d]        # 0x1001880
 100f753:	mov    QWORD PTR [rip+0x3f0e],rax        # 0x1013668
 100f75a:	lea    rax,[rip+0xffffffffffff208f]        # 0x10017f0
 100f761:	mov    QWORD PTR [rip+0x3f00],rax        # 0x1013668
 100f768:	add    rsp,0x18
 100f76c:	ret    
 100f76d:	int3   
 100f76e:	int3   
 100f76f:	int3   
 100f770:	int3   
 100f771:	int3   
 100f772:	int3   
 100f773:	int3   
 100f774:	int3   
 100f775:	int3   
 100f776:	int3   
 100f777:	int3   
 100f778:	int3   
 100f779:	int3   
 100f77a:	int3   
 100f77b:	int3   
 100f77c:	int3   
 100f77d:	int3   
 100f77e:	int3   
 100f77f:	int3   
 100f780:	mov    QWORD PTR [rsp+0x8],rbx
 100f785:	push   rdi
 100f786:	sub    rsp,0x20
 100f78a:	mov    rbx,QWORD PTR [rip+0x5bef]        # 0x1015380
 100f791:	xor    edi,edi
 100f793:	mov    DWORD PTR [rip+0x5bc7],edi        # 0x1015360
 100f799:	test   rbx,rbx
 100f79c:	je     0x100f7b5
 100f79e:	mov    rcx,rbx
 100f7a1:	call   0x100c2c0
 100f7a6:	mov    rcx,rbx
 100f7a9:	call   0x10049c8
 100f7ae:	mov    QWORD PTR [rip+0x5bcb],rdi        # 0x1015380
 100f7b5:	mov    rbx,QWORD PTR [rip+0x5bbc]        # 0x1015378
 100f7bc:	test   rbx,rbx
 100f7bf:	je     0x100f7d8
 100f7c1:	mov    rcx,rbx
 100f7c4:	call   0x100b320
 100f7c9:	mov    rcx,rbx
 100f7cc:	call   0x10049c8
 100f7d1:	mov    QWORD PTR [rip+0x5ba0],rdi        # 0x1015378
 100f7d8:	mov    rcx,QWORD PTR [rip+0x5b89]        # 0x1015368
 100f7df:	mov    QWORD PTR [rip+0x5b8a],rdi        # 0x1015370
 100f7e6:	test   rcx,rcx
 100f7e9:	je     0x100f7f8
 100f7eb:	call   QWORD PTR [rip+0xffffffffffff19a7]        # 0x1001198
 100f7f1:	mov    QWORD PTR [rip+0x5b70],rdi        # 0x1015368
 100f7f8:	mov    rbx,QWORD PTR [rsp+0x30]
 100f7fd:	add    rsp,0x20
 100f801:	pop    rdi
 100f802:	ret    
 100f803:	int3   
 100f804:	int3   
 100f805:	int3   
 100f806:	int3   
 100f807:	int3   
 100f808:	add    DWORD PTR [rdx],ecx
 100f80a:	add    al,0x0
 100f80c:	or     dh,BYTE PTR [rsp+rcx*1]
 100f80f:	add    BYTE PTR [rdx],cl
 100f811:	xchg   edx,eax
 100f812:	(bad)  
 100f813:	jo     0x100f816
 100f815:	(bad)  
 100f816:	add    DWORD PTR [rax],eax
 100f818:	(bad)  
 100f819:	(bad)  
 100f81a:	add    BYTE PTR [rax],al
 100f81c:	add    DWORD PTR [rcx+rax*1],eax
 100f81f:	add    BYTE PTR [rdx+rax*4],al
 100f822:	add    BYTE PTR [rax],al
 100f824:	add    DWORD PTR [rsi],eax
 100f826:	add    al,BYTE PTR [rax]
 100f828:	(bad)  
 100f829:	xor    al,BYTE PTR [rdx]
 100f82b:	xor    BYTE PTR [rcx],dl
 100f82d:	adc    DWORD PTR [rcx],eax
 100f82f:	add    BYTE PTR [rcx],cl
 100f831:	and    al,BYTE PTR [rax]
 100f833:	add    ah,bh
 100f835:	rex.WXB add BYTE PTR [r8],al
 100f838:	(bad)  
 100f839:	(bad)  
 100f83a:	add    BYTE PTR [rax],al
 100f83c:	(bad)  
 100f83d:	(bad)  
 100f83e:	(bad)  
 100f83f:	inc    esi
 100f841:	out    0x0,eax
 100f843:	add    BYTE PTR [rax+0x38],cl
 100f846:	add    BYTE PTR [rax],al
 100f848:	(bad)  
 100f849:	(bad)  
 100f84a:	(bad)  
 100f84b:	inc    DWORD PTR [rcx]
 100f84d:	add    al,0x1
 100f84f:	add    BYTE PTR [rdx+riz*8],al
 100f852:	add    BYTE PTR [rax],al
 100f854:	adc    DWORD PTR [rbx],edx
 100f856:	add    al,BYTE PTR [rax]
 100f858:	or     dl,BYTE PTR [rdx+0x6]
 100f85b:	xor    ah,bh
 100f85d:	rex.WXB add BYTE PTR [r8],al
 100f860:	mov    BYTE PTR [rsi],dl
 100f862:	add    BYTE PTR [rax],al
 100f864:	(bad)  
 100f865:	(bad)  
 100f866:	(bad)  
 100f867:	(bad)  
 100f868:	fsub   st,st(7)
 100f86a:	add    BYTE PTR [rax],al
 100f86c:	sar    BYTE PTR [rax],1
 100f86e:	add    BYTE PTR [rax],al
 100f870:	(bad)  
 100f871:	(bad)  
 100f872:	(bad)  
 100f873:	inc    DWORD PTR [rcx]
 100f875:	add    al,0x1
 100f877:	add    BYTE PTR [rdx+rax*2],al
 100f87a:	add    BYTE PTR [rax],al
 100f87c:	sbb    DWORD PTR [rax],edi
 100f87e:	or     eax,DWORD PTR [rax]
 100f880:	(bad)
 100f885:	xor    al,0xc4
 100f887:	add    BYTE PTR [rbx],dl
 100f889:	add    DWORD PTR [rax+rax*1-0x1ff50ff4],edi
 100f890:	or     al,dl
 100f892:	(bad)  
 100f893:	rol    BYTE PTR [rax+rsi*2],0x0
 100f897:	add    BYTE PTR [rax],cl
 100f899:	rex.WR add BYTE PTR [rax],r8b
 100f89c:	mov    al,0x16
 100f89e:	add    BYTE PTR [rax],al
 100f8a0:	rol    DWORD PTR [rip+0xffffffffffff0000],cl        # 0xfff8a6
 100f8a6:	(bad)  
 100f8a7:	(bad)  
 100f8a8:	(bad)  
 100f8a9:	out    0x0,eax
 100f8ab:	add    BYTE PTR [rax],al
 100f8ad:	add    BYTE PTR [rax],al
 100f8af:	add    dl,bh
 100f8b1:	out    0x0,eax
 100f8b3:	add    BYTE PTR [rcx],al
 100f8b5:	add    BYTE PTR [rax],al
 100f8b7:	add    BYTE PTR [rax],al
 100f8b9:	add    BYTE PTR [rax],al
 100f8bb:	add    BYTE PTR [rdx],al
 100f8bd:	add    BYTE PTR [rax],al
 100f8bf:	add    BYTE PTR [rdx],cl
 100f8c1:	call   0x102f8c6
 100f8c6:	add    BYTE PTR [rax],al
 100f8c8:	sbb    ch,al
 100f8ca:	add    BYTE PTR [rax],al
 100f8cc:	add    al,0x0
 100f8ce:	add    BYTE PTR [rax],al
 100f8d0:	sub    ch,al
 100f8d2:	add    BYTE PTR [rax],al
 100f8d4:	add    al,0x0
 100f8d6:	add    BYTE PTR [rax],al
 100f8d8:	cmp    ch,al
 100f8da:	add    BYTE PTR [rax],al
 100f8dc:	(bad)  
 100f8dd:	add    BYTE PTR [rax],al
 100f8df:	add    BYTE PTR [rdx-0x18],cl
 100f8e2:	add    BYTE PTR [rax],al
 100f8e4:	(bad)  
 100f8e5:	add    BYTE PTR [rax],al
 100f8e7:	add    BYTE PTR [rdx-0x18],bl
 100f8ea:	add    BYTE PTR [rax],al
 100f8ec:	or     BYTE PTR [rax],al
 100f8ee:	add    BYTE PTR [rax],al
 100f8f0:	push   0xffffffffffffffe8
 100f8f2:	add    BYTE PTR [rax],al
 100f8f4:	or     DWORD PTR [rax],eax
 100f8f6:	add    BYTE PTR [rax],al
 100f8f8:	jp     0x100f8e2
 100f8fa:	add    BYTE PTR [rax],al
 100f8fc:	or     al,BYTE PTR [rax]
 100f8fe:	add    BYTE PTR [rax],al
 100f900:	mov    ch,al
 100f902:	add    BYTE PTR [rax],al
 100f904:	(bad)  
 100f905:	add    BYTE PTR [rax],al
 100f907:	add    BYTE PTR [rdx+0x40000e8],bl
 100f90d:	add    BYTE PTR [rax],al
 100f90f:	add    BYTE PTR [rdx+0x20000e8],ch
 100f915:	add    BYTE PTR [rax],al
 100f917:	add    BYTE PTR [rdx+0x20000e8],bh
 100f91d:	add    BYTE PTR [rax],al
 100f91f:	add    dl,cl
 100f921:	call   0x10ff926
 100f926:	add    BYTE PTR [rax],al
 100f928:	add    BYTE PTR [rax],al
 100f92a:	add    BYTE PTR [rax],al
 100f92c:	sldt   WORD PTR [rax]
 100f92f:	add    BYTE PTR [rax],al
 100f931:	add    BYTE PTR [rax],al
 100f933:	add    BYTE PTR [rcx],al
 100f935:	add    BYTE PTR [rax],al
 100f937:	add    BYTE PTR [rax],al
 100f939:	add    BYTE PTR [rax],al
 100f93b:	add    BYTE PTR [rax],dl
 100f93d:	add    BYTE PTR [rax],al
 100f93f:	add    BYTE PTR [rax],dl
 100f941:	add    BYTE PTR [rax],al
 100f943:	add    BYTE PTR [rcx],dl
 100f945:	add    BYTE PTR [rax],al
 100f947:	add    BYTE PTR [rcx],al
 100f949:	add    BYTE PTR [rax],al
 100f94b:	add    BYTE PTR [rcx+rdi*8+0x0],ah
 100f94f:	add    BYTE PTR [rdx],al
 100f951:	add    BYTE PTR [rax],al
 100f953:	add    BYTE PTR [rcx],dl
 100f955:	add    BYTE PTR [rax],al
 100f957:	add    BYTE PTR [rdx],dl
 100f959:	add    BYTE PTR [rax],al
 100f95b:	add    BYTE PTR [rcx],al
 100f95d:	add    BYTE PTR [rax],al
 100f95f:	add    BYTE PTR [rax-0x7],bh
 100f962:	add    BYTE PTR [rax],al
 100f964:	or     BYTE PTR [rax],al
 100f966:	add    BYTE PTR [rax],al
 100f968:	or     BYTE PTR [rcx],dh
 100f96a:	add    DWORD PTR [rax],eax
 100f96c:	clc    
 100f96d:	add    DWORD PTR [rax],eax
 100f96f:	add    dl,bl
 100f971:	call   0x168f976
 100f976:	add    BYTE PTR [rax],al
 100f978:	or     BYTE PTR [rax],al
 100f97a:	add    BYTE PTR [rax],al
 100f97c:	or     BYTE PTR [rcx],dh
 100f97e:	add    DWORD PTR [rax],eax
 100f980:	call   0x3b00f986
 100f985:	(bad)  
 100f986:	add    BYTE PTR [rax],al
 100f988:	push   0x30000000
 100f98d:	cmp    DWORD PTR [rax],eax
 100f98f:	add    bh,bh
 100f991:	(bad)  
 100f992:	(bad)  
 100f993:	(bad)  
 100f994:	jmp    0x100f9cf
 100f996:	add    BYTE PTR [rax],al
 100f998:	add    BYTE PTR [rax],al
 100f99a:	add    BYTE PTR [rax],al
 100f99c:	adc    eax,0x100003a
 100f9a1:	add    BYTE PTR [rax],al
 100f9a3:	add    BYTE PTR [rdx+rdi*1],ah
 100f9a6:	add    BYTE PTR [rax],al
 100f9a8:	add    al,BYTE PTR [rax]
 100f9aa:	add    BYTE PTR [rax],al
 100f9ac:	(bad)  
 100f9ad:	cmp    al,0x0
 100f9af:	add    BYTE PTR [rbx],al
 100f9b1:	add    BYTE PTR [rax],al
 100f9b3:	add    al,dl
 100f9b5:	cmp    al,0x0
 100f9b7:	add    BYTE PTR [rax+rax*1],al
 100f9ba:	add    BYTE PTR [rax],al
 100f9bc:	(bad)  
 100f9bd:	cmp    al,0x0
 100f9bf:	add    BYTE PTR [rip+0xd000000],al        # 0xe00f9c5
 100f9c5:	cmp    eax,0x60000
 100f9ca:	add    BYTE PTR [rax],al
 100f9cc:	rex.XB cmp eax,0x70000
 100f9d2:	add    BYTE PTR [rax],al
 100f9d4:	push   rdx
 100f9d5:	cmp    eax,0x80000
 100f9da:	add    BYTE PTR [rax],al
 100f9dc:	cmp    DWORD PTR [rip+0x90000],0x0        # 0x109f9e3
 100f9e3:	add    dl,dh
 100f9e5:	cmp    eax,0xa0000
 100f9ea:	add    BYTE PTR [rax],al
 100f9ec:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100f9ed:	add    BYTE PTR ds:[rax],al
 100f9f0:	or     eax,DWORD PTR [rax]
 100f9f2:	add    BYTE PTR [rax],al
 100f9f4:	or     edi,DWORD PTR [rdi]
 100f9f6:	add    BYTE PTR [rax],al
 100f9f8:	or     al,BYTE PTR [rax]
 100f9fa:	add    BYTE PTR [rax],al
 100f9fc:	(bad)  
 100f9fd:	(bad)  
 100f9fe:	add    BYTE PTR [rax],al
 100fa00:	or     DWORD PTR [rax],eax
 100fa02:	add    BYTE PTR [rax],al
 100fa04:	clc    
 100fa05:	(bad)  
 100fa06:	add    BYTE PTR [rax],al
 100fa08:	or     BYTE PTR [rax],al
 100fa0a:	add    BYTE PTR [rax],al
 100fa0c:	(bad)  
 100fa0d:	add    BYTE PTR [rax],al
 100fa10:	(bad)  
 100fa11:	add    BYTE PTR [rax],al
 100fa13:	add    BYTE PTR [rax+rax*2],ah
 100fa16:	add    BYTE PTR [rax],al
 100fa18:	add    al,0x0
 100fa1a:	add    BYTE PTR [rax],al
 100fa1c:	xor    al,0x40
 100fa1e:	add    BYTE PTR [rax],al
 100fa20:	add    al,BYTE PTR [rax]
 100fa22:	add    BYTE PTR [rax],al
 100fa24:	js     0x100fa68
 100fa26:	add    BYTE PTR [rax],al
 100fa28:	sldt   WORD PTR [rax]
 100fa2b:	add    BYTE PTR [rax],dl
 100fa2d:	add    BYTE PTR [rax],r8b
 100fa30:	adc    BYTE PTR [rax],al
 100fa32:	add    BYTE PTR [rax],al
 100fa34:	(bad)  
 100fa35:	add    BYTE PTR [rax],r8b
 100fa38:	sldt   WORD PTR [rax]
 100fa3b:	add    cl,dl
 100fa3d:	add    BYTE PTR [rax],r8b
 100fa40:	add    al,BYTE PTR [rax]
 100fa42:	add    BYTE PTR [rax],al
 100fa44:	fild   WORD PTR [rax+rax*1+0x0]
 100fa48:	add    DWORD PTR [rax],eax
 100fa4a:	add    BYTE PTR [rax],al
 100fa4c:	in     al,0x44
 100fa4e:	add    BYTE PTR [rax],al
 100fa50:	add    al,BYTE PTR [rax]
 100fa52:	add    BYTE PTR [rax],al
 100fa54:	sub    BYTE PTR [rsi+0x0],al
 100fa57:	add    BYTE PTR [rcx],al
 100fa59:	add    BYTE PTR [rax],al
 100fa5b:	add    BYTE PTR [rsi+0x46],dh
 100fa5e:	add    BYTE PTR [rax],al
 100fa60:	add    BYTE PTR [rax],al
 100fa62:	add    BYTE PTR [rax],al
 100fa64:	xchg   BYTE PTR [rsi+0x0],al
 100fa67:	add    bh,bh
 100fa69:	(bad)  
 100fa6a:	(bad)  
 100fa6b:	(bad)  
 100fa6c:	(bad)  
 100fa6e:	add    BYTE PTR [rax],al
 100fa70:	add    BYTE PTR [rax],al
 100fa72:	add    BYTE PTR [rax],al
 100fa74:	call   0x1200fb61
 100fa79:	add    BYTE PTR [rax],al
 100fa7b:	add    BYTE PTR [rsi],bl
 100fa7d:	(bad)  
 100fa7e:	add    BYTE PTR [rax],al
 100fa80:	add    BYTE PTR [rax],al
 100fa82:	add    BYTE PTR [rax],al
 100fa84:	rex.W (bad) 
 100fa86:	add    BYTE PTR [rax],al
 100fa88:	adc    al,BYTE PTR [rax]
 100fa8a:	add    BYTE PTR [rax],al
 100fa8c:	jle    0x100fa79
 100fa8e:	add    BYTE PTR [rax],al
 100fa90:	add    BYTE PTR [rax],al
 100fa92:	add    BYTE PTR [rax],al
 100fa94:	sbb    DWORD PTR [rbx],ecx
 100fa96:	add    eax,DWORD PTR [rax]
 100fa98:	or     eax,DWORD PTR [rdx+0x30065007]
 100fa9e:	add    BYTE PTR [rax],al
 100faa0:	cld    
 100faa1:	rex.WXB add BYTE PTR [r8],al
 100faa4:	mov    al,0x16
 100faa6:	add    BYTE PTR [rax],al
 100faa8:	sbb    DWORD PTR [rbx],ecx
 100faaa:	add    eax,DWORD PTR [rax]
 100faac:	or     eax,DWORD PTR [rdx+0x30065007]
 100fab2:	add    BYTE PTR [rax],al
 100fab4:	cld    
 100fab5:	rex.WXB add BYTE PTR [r8],al
 100fab8:	mov    al,0x16
 100faba:	add    BYTE PTR [rax],al
 100fabc:	add    DWORD PTR [rcx+rax*1],eax
 100fabf:	add    BYTE PTR [rdx+rax*2],al
 100fac2:	add    BYTE PTR [rax],al
 100fac4:	add    DWORD PTR [rcx+rax*1],eax
 100fac7:	add    BYTE PTR [rdx+riz*2],al
 100faca:	add    BYTE PTR [rax],al
 100facc:	add    DWORD PTR [rsi],eax
 100face:	add    al,BYTE PTR [rax]
 100fad0:	(bad)  
 100fad1:	xor    al,BYTE PTR [rdx]
 100fad3:	push   rax
 100fad4:	or     DWORD PTR [rdx],ecx
 100fad6:	add    al,0x0
 100fad8:	or     dh,BYTE PTR [rsi+rax*1]
 100fadb:	add    BYTE PTR [rdx],cl
 100fadd:	xor    al,BYTE PTR [rsi]
 100fadf:	jo     0x100faff
 100fae1:	rex.WRXB add BYTE PTR [r8],r8b
 100fae4:	add    DWORD PTR [rax],eax
 100fae6:	add    BYTE PTR [rax],al
 100fae8:	pop    rsi
 100fae9:	rex.RXB add BYTE PTR [r8],r8b
 100faec:	pushf  
 100faed:	rex.W add BYTE PTR [rax],al
 100faf0:	xchg   ebx,eax
 100faf1:	jmp    0x100faf3
 100faf3:	add    BYTE PTR [rax+rcx*2+0x4010000],bl
 100fafa:	add    DWORD PTR [rax],eax
 100fafc:	add    al,0x42
 100fafe:	add    BYTE PTR [rax],al
 100fb00:	add    DWORD PTR [rcx+rax*1],eax
 100fb03:	add    BYTE PTR [rdx+rax*2],al
 100fb06:	add    BYTE PTR [rax],al
 100fb08:	add    DWORD PTR [rsi],eax
 100fb0a:	add    al,BYTE PTR [rax]
 100fb0c:	(bad)  
 100fb0d:	xor    al,BYTE PTR [rdx]
 100fb0f:	push   rax
 100fb10:	or     DWORD PTR [rdi],edx
 100fb12:	(bad)  
 100fb13:	add    BYTE PTR [rdi],dl
 100fb15:	xor    al,0xd
 100fb17:	add    BYTE PTR [rdi],dl
 100fb19:	jb     0x100fb2e
 100fb1b:	rcl    BYTE PTR [rcx],0x70
 100fb1e:	adc    BYTE PTR [rax+0x1e],ah
 100fb21:	rex.WRXB add BYTE PTR [r8],r8b
 100fb24:	add    DWORD PTR [rax],eax
 100fb26:	add    BYTE PTR [rax],al
 100fb28:	test   DWORD PTR [rcx+0x0],0x4a1000
 100fb2f:	add    BYTE PTR [rdi+0x100000eb],dh
 100fb35:	rex.WX add BYTE PTR [rax],al
 100fb38:	add    DWORD PTR [rsi],eax
 100fb3a:	add    al,BYTE PTR [rax]
 100fb3c:	(bad)  
 100fb3d:	xor    al,BYTE PTR [rdx]
 100fb3f:	push   rax
 100fb40:	adc    DWORD PTR [rax],ebx
 100fb42:	add    eax,0x14621800
 100fb47:	rcl    BYTE PTR [rdx],0x70
 100fb4a:	adc    DWORD PTR [rax+0x10],esp
 100fb4d:	xor    BYTE PTR [rax],al
 100fb4f:	add    BYTE PTR [rsi],bl
 100fb51:	rex.WRXB add BYTE PTR [r8],r8b
 100fb54:	add    DWORD PTR [rax],eax
 100fb56:	add    BYTE PTR [rax],al
 100fb58:	push   rdi
 100fb59:	rex.WX add BYTE PTR [rax],al
 100fb5c:	ja     0x100fba8
 100fb5e:	add    BYTE PTR [rax],al
 100fb60:	(bad)  
 100fb61:	jmp    0x100fb63
 100fb63:	add    BYTE PTR [rax],al
 100fb65:	add    BYTE PTR [rax],al
 100fb67:	add    BYTE PTR [rcx],al
 100fb69:	or     al,0x2
 100fb6b:	add    BYTE PTR [rcx+rax*1],cl
 100fb6e:	adc    DWORD PTR [rax],eax
 100fb70:	add    DWORD PTR [rcx],ebx
 100fb72:	or     al,BYTE PTR [rax]
 100fb74:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 100fb78:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 100fb7c:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 100fb80:	sbb    DWORD PTR [rsi+rax*1],esi
 100fb83:	add    BYTE PTR [rcx],bl
 100fb85:	xor    dl,BYTE PTR [rip+0x1c0]        # 0x100fd4b
 100fb8b:	add    BYTE PTR [rcx],al
 100fb8d:	clts   
 100fb8f:	add    BYTE PTR [rdi],cl
 100fb91:	fs (bad) 
 100fb93:	add    BYTE PTR [rdi],cl
 100fb95:	xor    al,0x6
 100fb97:	add    BYTE PTR [rdi],cl
 100fb99:	xor    cl,BYTE PTR [rbx]
 100fb9b:	jo     0x100fb9e
 100fb9d:	add    al,0x1
 100fb9f:	add    BYTE PTR [rdx+rax*2],al
 100fba2:	add    BYTE PTR [rax],al
 100fba4:	add    DWORD PTR [rcx+rax*1],eax
 100fba7:	add    BYTE PTR [rdx+rax*2],al
 100fbaa:	add    BYTE PTR [rax],al
 100fbac:	add    DWORD PTR [rsi],eax
 100fbae:	add    al,BYTE PTR [rax]
 100fbb0:	(bad)  
 100fbb1:	xor    al,BYTE PTR [rdx]
 100fbb3:	push   rax
 100fbb4:	adc    DWORD PTR [rsi],eax
 100fbb6:	add    al,BYTE PTR [rax]
 100fbb8:	(bad)  
 100fbb9:	xor    al,BYTE PTR [rdx]
 100fbbb:	xor    BYTE PTR [rsi],bl
 100fbbd:	rex.WRXB add BYTE PTR [r8],r8b
 100fbc0:	add    DWORD PTR [rax],eax
 100fbc2:	add    BYTE PTR [rax],al
 100fbc4:	dec    DWORD PTR [rbp+0x0]
 100fbc7:	add    BYTE PTR [rbp+0x4e],ah
 100fbca:	add    BYTE PTR [rax],al
 100fbcc:	xor    ah,ch
 100fbce:	add    BYTE PTR [rax],al
 100fbd0:	add    BYTE PTR [rax],al
 100fbd2:	add    BYTE PTR [rax],al
 100fbd4:	add    DWORD PTR [rcx+rax*1],eax
 100fbd7:	add    BYTE PTR [rdx+rax*2],al
 100fbda:	add    BYTE PTR [rax],al
 100fbdc:	add    DWORD PTR [rdx],ecx
 100fbde:	add    al,0x0
 100fbe0:	or     dh,BYTE PTR [rsi+rax*1]
 100fbe3:	add    BYTE PTR [rdx],cl
 100fbe5:	xor    al,BYTE PTR [rsi]
 100fbe7:	jo     0x100fbea
 100fbe9:	or     al,BYTE PTR [rax+rax*1]
 100fbec:	or     dh,BYTE PTR [rsi+rax*1]
 100fbef:	add    BYTE PTR [rdx],cl
 100fbf1:	xor    al,BYTE PTR [rsi]
 100fbf3:	jo     0x100fbf6
 100fbf5:	(bad)  
 100fbf6:	add    al,BYTE PTR [rax]
 100fbf8:	(bad)  
 100fbf9:	xor    al,BYTE PTR [rdx]
 100fbfb:	push   rax
 100fbfc:	or     DWORD PTR [rcx+rax*1],eax
 100fbff:	add    BYTE PTR [rdx+rax*2],al
 100fc02:	add    BYTE PTR [rax],al
 100fc04:	(bad)  
 100fc05:	rex.WRXB add BYTE PTR [r8],r8b
 100fc08:	add    DWORD PTR [rax],eax
 100fc0a:	add    BYTE PTR [rax],al
 100fc0c:	xlat   BYTE PTR ds:[rbx]
 100fc0d:	rex.WRXB add BYTE PTR [r8],r8b
 100fc10:	or     dl,BYTE PTR [rax+0x0]
 100fc13:	add    BYTE PTR [rax-0x14],ah
 100fc16:	add    BYTE PTR [rax],al
 100fc18:	or     dl,BYTE PTR [rax+0x0]
 100fc1b:	add    BYTE PTR [rcx],al
 100fc1d:	or     al,BYTE PTR [rax+rax*1]
 100fc20:	or     dh,BYTE PTR [rax+rcx*1]
 100fc23:	add    BYTE PTR [rdx],cl
 100fc25:	xor    al,BYTE PTR [rsi]
 100fc27:	jo     0x100fc2a
 100fc29:	(bad)  
 100fc2a:	add    al,BYTE PTR [rax]
 100fc2c:	(bad)  
 100fc2d:	xor    al,BYTE PTR [rdx]
 100fc2f:	xor    BYTE PTR [rcx],al
 100fc31:	add    al,0x1
 100fc33:	add    BYTE PTR [rdx+rax*2],al
 100fc36:	add    BYTE PTR [rax],al
 100fc38:	add    DWORD PTR [rsi],eax
 100fc3a:	add    al,BYTE PTR [rax]
 100fc3c:	(bad)  
 100fc3d:	push   rdx
 100fc3e:	add    dl,BYTE PTR [rax+0x19]
 100fc41:	sbb    DWORD PTR [rdx],eax
 100fc43:	add    BYTE PTR [rdi],al
 100fc45:	add    DWORD PTR [rcx+0x0],esp
 100fc48:	adc    bh,ah
 100fc4a:	add    BYTE PTR [rax],al
 100fc4c:	add    DWORD PTR [rax],eax
 100fc4e:	add    BYTE PTR [rax],al
 100fc50:	ins    BYTE PTR es:[rdi],dx
 100fc51:	push   rdx
 100fc52:	add    BYTE PTR [rax],al
 100fc54:	pushf  
 100fc55:	pop    rcx
 100fc56:	add    BYTE PTR [rax],al
 100fc58:	rex pop rdx
 100fc5a:	add    BYTE PTR [rax],al
 100fc5c:	add    BYTE PTR [rax],al
 100fc5e:	add    BYTE PTR [rax],al
 100fc60:	cli    
 100fc61:	add    al,BYTE PTR [rax]
 100fc63:	add    BYTE PTR [rcx],al
 100fc65:	adc    eax,DWORD PTR [rcx]
 100fc67:	add    BYTE PTR [rbx],dl
 100fc69:	(bad)  
 100fc6a:	add    BYTE PTR [rax],al
 100fc6c:	add    DWORD PTR [rbx],edx
 100fc6e:	add    DWORD PTR [rax],eax
 100fc70:	adc    eax,DWORD PTR [rdx+0x13010000]
 100fc76:	add    DWORD PTR [rax],eax
 100fc78:	adc    esp,DWORD PTR [rdx]
 100fc7a:	add    BYTE PTR [rax],al
 100fc7c:	add    DWORD PTR [rax],ebx
 100fc7e:	add    DWORD PTR [rax],eax
 100fc80:	sbb    BYTE PTR [rdx+0x0],ah
 100fc83:	add    BYTE PTR [rcx],al
 100fc85:	adc    eax,DWORD PTR [rcx]
 100fc87:	add    BYTE PTR [rbx],dl
 100fc89:	and    al,BYTE PTR [rax]
 100fc8b:	add    BYTE PTR [rcx],al
 100fc8d:	sbb    BYTE PTR [rcx],al
 100fc8f:	add    BYTE PTR [rax],bl
 100fc91:	and    al,BYTE PTR [rax]
 100fc93:	add    BYTE PTR [rcx],al
 100fc95:	add    al,0x1
 100fc97:	add    BYTE PTR [rdx+riz*2],al
 100fc9a:	add    BYTE PTR [rax],al
 100fc9c:	add    DWORD PTR [rbx+rax*1],ecx
 100fc9f:	add    BYTE PTR [rdx+riz*4],cl
 100fca2:	or     al,ah
 100fca4:	(bad)  
 100fca5:	xor    BYTE PTR [rax],al
 100fca7:	add    BYTE PTR [rcx],ah
 100fca9:	or     al,BYTE PTR [rax+rax*1]
 100fcac:	or     ah,BYTE PTR [rdi+rcx*1+0x0]
 100fcb0:	add    eax,0xa0000e54
 100fcb5:	pop    rsi
 100fcb6:	add    BYTE PTR [rax],al
 100fcb8:	mov    edi,0x9c00005e
 100fcbd:	cld    
 100fcbe:	add    BYTE PTR [rax],al
 100fcc0:	and    DWORD PTR [rdi],ebp
 100fcc2:	or     BYTE PTR [rax],al
 100fcc4:	(bad)  
 100fcc5:	hlt    
 100fcc6:	or     BYTE PTR [rax],al
 100fcc8:	es (bad) 
 100fcca:	or     DWORD PTR [rax],eax
 100fccc:	or     eax,0x8000ac4
 100fcd1:	je     0x100fce3
 100fcd3:	add    BYTE PTR [rdi+0x1200005e],bh
 100fcd9:	pop    rdi
 100fcda:	add    BYTE PTR [rax],al
 100fcdc:	test   al,0xfc
 100fcde:	add    BYTE PTR [rax],al
 100fce0:	and    DWORD PTR [rax],eax
 100fce2:	add    BYTE PTR [rax],al
 100fce4:	mov    edi,0x1200005e
 100fce9:	pop    rdi
 100fcea:	add    BYTE PTR [rax],al
 100fcec:	test   al,0xfc
 100fcee:	add    BYTE PTR [rax],al
 100fcf0:	and    DWORD PTR [rax],eax
 100fcf2:	add    BYTE PTR [rax],al
 100fcf4:	movabs al,ds:0x9c00005ebf00005e
 100fcfd:	cld    
 100fcfe:	add    BYTE PTR [rax],al
 100fd00:	add    DWORD PTR [rax+0xe],edi
 100fd03:	add    BYTE PTR [rax-0x2c],bh
 100fd06:	(bad)  
 100fd07:	add    BYTE PTR [rbx+0x54],dh
 100fd0a:	or     al,0x0
 100fd0c:	xor    eax,0x300006e4
 100fd11:	(bad)  
 100fd12:	(bad)  
 100fd13:	add    BYTE PTR [rbx],ch
 100fd15:	je     0x100fd24
 100fd17:	add    BYTE PTR [rcx],cl
 100fd19:	jb     0x100fd20
 100fd1b:	lock add esp,DWORD PTR [rax+0x2]
 100fd1f:	xor    BYTE PTR [rcx],al
 100fd21:	add    al,0x1
 100fd23:	add    BYTE PTR [rdx+riz*4],al
 100fd26:	add    BYTE PTR [rax],al
 100fd28:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505fd30
 100fd2e:	or     al,BYTE PTR [rax]
 100fd30:	adc    BYTE PTR [rax+rax*1+0x0],ah
 100fd34:	ss add BYTE PTR fs:[rax],al
 100fd38:	and    ch,bh
 100fd3a:	add    BYTE PTR [rax],al
 100fd3c:	and    DWORD PTR [rax],eax
 100fd3e:	add    al,BYTE PTR [rax]
 100fd40:	add    BYTE PTR [rdx+rcx*1],dh
 100fd43:	add    BYTE PTR [rax],dl
 100fd45:	add    BYTE PTR fs:[rax],al
 100fd48:	ss add BYTE PTR fs:[rax],al
 100fd4c:	and    ch,bh
 100fd4e:	add    BYTE PTR [rax],al
 100fd50:	add    DWORD PTR [rcx+rax*1],eax
 100fd53:	add    BYTE PTR [rdx+rax*2],al
 100fd56:	add    BYTE PTR [rax],al
 100fd58:	add    DWORD PTR [rsi],eax
 100fd5a:	add    al,BYTE PTR [rax]
 100fd5c:	(bad)  
 100fd5d:	xor    al,BYTE PTR [rdx]
 100fd5f:	xor    BYTE PTR [rcx],al
 100fd61:	sbb    BYTE PTR [rdx],cl
 100fd63:	add    BYTE PTR [rax],bl
 100fd65:	or     al,BYTE PTR fs:[rax]
 100fd68:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 100fd6c:	sbb    BYTE PTR [rax+rcx*1],dh
 100fd6f:	add    BYTE PTR [rax],bl
 100fd71:	xor    dl,BYTE PTR [rax+rsi*8]
 100fd74:	adc    ah,al
 100fd76:	adc    BYTE PTR [rax+0x1],dh
 100fd79:	sbb    BYTE PTR [rdx],cl
 100fd7b:	add    BYTE PTR [rax],bl
 100fd7d:	fs or  eax,0xc541800
 100fd83:	add    BYTE PTR [rax],bl
 100fd85:	xor    al,0xb
 100fd87:	add    BYTE PTR [rax],bl
 100fd89:	push   rdx
 100fd8a:	adc    al,0xf0
 100fd8c:	adc    ah,al
 100fd8e:	adc    BYTE PTR [rax+0x21],dh
 100fd91:	add    eax,0xc4050002
 100fd96:	or     al,BYTE PTR [rax]
 100fd98:	and    BYTE PTR [rsi+0x0],ah
 100fd9b:	add    BYTE PTR [rdx+0x66],bh
 100fd9e:	add    BYTE PTR [rax],al
 100fda0:	js     0x100fd9f
 100fda2:	add    BYTE PTR [rax],al
 100fda4:	and    DWORD PTR [rax],eax
 100fda6:	add    BYTE PTR [rax],al
 100fda8:	and    BYTE PTR [rsi+0x0],ah
 100fdab:	add    BYTE PTR [rdx+0x66],bh
 100fdae:	add    BYTE PTR [rax],al
 100fdb0:	js     0x100fdaf
 100fdb2:	add    BYTE PTR [rax],al
 100fdb4:	add    DWORD PTR [rsi+rax*1],ecx
 100fdb7:	add    BYTE PTR [rsp+rsi*1],cl
 100fdba:	or     eax,0x8520c00
 100fdbf:	jo     0x100fdc8
 100fdc1:	(bad)  
 100fdc2:	(bad)  
 100fdc3:	push   rax
 100fdc4:	and    DWORD PTR [rdi],ecx
 100fdc6:	(bad)  
 100fdc7:	add    BYTE PTR [rdi],cl
 100fdc9:	hlt    
 100fdca:	or     al,0x0
 100fdcc:	or     ah,ah
 100fdce:	or     eax,DWORD PTR [rax]
 100fdd0:	add    eax,0x60000ac4
 100fdd5:	add    BYTE PTR [eax],al
 100fdd8:	(bad)  
 100fdd9:	add    BYTE PTR [eax],al
 100fddc:	mov    ah,0xfd
 100fdde:	add    BYTE PTR [rax],al
 100fde0:	and    DWORD PTR [rax],eax
 100fde2:	add    BYTE PTR [rax],al
 100fde4:	(bad)  
 100fde5:	add    BYTE PTR [eax],al
 100fde8:	(bad)  
 100fde9:	add    BYTE PTR [eax],al
 100fdec:	mov    ah,0xfd
 100fdee:	add    BYTE PTR [rax],al
 100fdf0:	add    DWORD PTR [rdx],ecx
 100fdf2:	add    al,0x0
 100fdf4:	or     dh,BYTE PTR [rdx+0x6]
 100fdf7:	rol    BYTE PTR [rax+rax*8],1
 100fdfa:	add    dh,BYTE PTR [rax+0x21]
 100fdfd:	(bad)  
 100fdfe:	or     al,BYTE PTR [rax]
 100fe00:	(bad)  
 100fe01:	hlt    
 100fe02:	(bad)  
 100fe03:	add    BYTE PTR [rcx],bl
 100fe05:	in     al,0x7
 100fe07:	add    BYTE PTR [rdi],cl
 100fe09:	fs (bad) 
 100fe0b:	add    BYTE PTR [rdx],cl
 100fe0d:	push   rsp
 100fe0e:	or     eax,0xc340500
 100fe13:	add    BYTE PTR [rax-0x2cffff98],ah
 100fe19:	push   0xfffffffffdf00000
 100fe1e:	add    BYTE PTR [rax],al
 100fe20:	and    DWORD PTR [rax],eax
 100fe22:	add    BYTE PTR [rax],al
 100fe24:	movabs al,ds:0xf0000068d3000068
 100fe2d:	std    
 100fe2e:	add    BYTE PTR [rax],al
 100fe30:	and    DWORD PTR [rax],eax
 100fe32:	or     al,BYTE PTR [rax]
 100fe34:	add    ah,dh
 100fe36:	(bad)  
 100fe37:	add    BYTE PTR [rax],al
 100fe39:	in     al,0x7
 100fe3b:	add    BYTE PTR [rax],al
 100fe3d:	fs (bad) 
 100fe3f:	add    BYTE PTR [rax],al
 100fe41:	push   rsp
 100fe42:	or     eax,0xc340000
 100fe47:	add    BYTE PTR [rax-0x2cffff98],ah
 100fe4d:	push   0xfffffffffdf00000
 100fe52:	add    BYTE PTR [rax],al
 100fe54:	add    DWORD PTR [rsi],eax
 100fe56:	add    al,BYTE PTR [rax]
 100fe58:	(bad)  
 100fe59:	xor    al,BYTE PTR [rdx]
 100fe5b:	xor    BYTE PTR [rcx],al
 100fe5d:	(bad)  
 100fe5e:	add    al,BYTE PTR [rax]
 100fe60:	(bad)  
 100fe61:	xor    al,BYTE PTR [rdx]
 100fe63:	jo     0x100fe86
 100fe65:	clts   
 100fe67:	add    BYTE PTR [rdi],cl
 100fe69:	or     BYTE PTR fs:[rax],al
 100fe6c:	or     dl,BYTE PTR [rdi+rax*1+0x0]
 100fe70:	add    eax,0x634
 100fe75:	imul   eax,DWORD PTR [rax],0x0
 100fe78:	imul   eax,DWORD PTR fs:[rax],0x0
 100fe7c:	pop    rsp
 100fe7d:	inc    BYTE PTR [rax]
 100fe7f:	add    BYTE PTR [rcx],ah
 100fe81:	add    BYTE PTR [rsi],al
 100fe83:	add    BYTE PTR [rax],al
 100fe85:	or     BYTE PTR fs:[rax],al
 100fe88:	add    BYTE PTR [rdi+rax*1+0x0],dl
 100fe8c:	add    BYTE PTR [rsi+rax*1],dh
 100fe8f:	add    BYTE PTR [rax],al
 100fe91:	imul   eax,DWORD PTR [rax],0x0
 100fe94:	imul   eax,DWORD PTR fs:[rax],0x0
 100fe98:	pop    rsp
 100fe99:	inc    BYTE PTR [rax]
 100fe9b:	add    BYTE PTR [rcx],ah
 100fe9d:	add    BYTE PTR [rax],al
 100fe9f:	add    BYTE PTR [rax],al
 100fea1:	imul   eax,DWORD PTR [rax],0x0
 100fea4:	imul   eax,DWORD PTR fs:[rax],0x0
 100fea8:	pop    rsp
 100fea9:	inc    BYTE PTR [rax]
 100feab:	add    BYTE PTR [rcx],al
 100fead:	(bad)  
 100feae:	add    al,BYTE PTR [rax]
 100feb0:	(bad)  
 100feb1:	xor    al,BYTE PTR [rdx]
 100feb3:	loopne 0x100fed6
 100feb5:	or     al,BYTE PTR [rax+rax*1]
 100feb8:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 100febc:	add    eax,0x10000634
 100fec1:	ins    BYTE PTR es:[rdi],dx
 100fec2:	add    BYTE PTR [rax],al
 100fec4:	cmp    DWORD PTR [rax+rax*1+0x0],ebp
 100fec8:	lods   al,BYTE PTR ds:[rsi]
 100fec9:	inc    BYTE PTR [rax]
 100fecb:	add    BYTE PTR [rcx],ah
 100fecd:	or     al,BYTE PTR [rsi]
 100fecf:	add    BYTE PTR [rdx],cl
 100fed1:	je     0x100fedb
 100fed3:	add    BYTE PTR [rax],al
 100fed5:	fs (bad) 
 100fed7:	add    BYTE PTR [rax],al
 100fed9:	xor    al,0x6
 100fedb:	add    BYTE PTR [rax],dl
 100fedd:	ins    BYTE PTR es:[rdi],dx
 100fede:	add    BYTE PTR [rax],al
 100fee0:	cmp    DWORD PTR [rax+rax*1+0x0],ebp
 100fee4:	lods   al,BYTE PTR ds:[rsi]
 100fee5:	inc    BYTE PTR [rax]
 100fee7:	add    BYTE PTR [rcx],ah
 100fee9:	add    BYTE PTR [rsi],al
 100feeb:	add    BYTE PTR [rax],al
 100feed:	je     0x100fef7
 100feef:	add    BYTE PTR [rax],al
 100fef1:	fs (bad) 
 100fef3:	add    BYTE PTR [rax],al
 100fef5:	xor    al,0x6
 100fef7:	add    BYTE PTR [rax],dl
 100fef9:	ins    BYTE PTR es:[rdi],dx
 100fefa:	add    BYTE PTR [rax],al
 100fefc:	cmp    DWORD PTR [rax+rax*1+0x0],ebp
 100ff00:	lods   al,BYTE PTR ds:[rsi]
 100ff01:	inc    BYTE PTR [rax]
 100ff03:	add    BYTE PTR [rcx],ah
 100ff05:	add    BYTE PTR [rax],al
 100ff07:	add    BYTE PTR [rax],dl
 100ff09:	ins    BYTE PTR es:[rdi],dx
 100ff0a:	add    BYTE PTR [rax],al
 100ff0c:	cmp    DWORD PTR [rax+rax*1+0x0],ebp
 100ff10:	lods   al,BYTE PTR ds:[rsi]
 100ff11:	inc    BYTE PTR [rax]
 100ff13:	add    BYTE PTR [rcx],al
 100ff15:	sbb    BYTE PTR [rcx],al
 100ff17:	add    BYTE PTR [rax],bl
 100ff19:	ret    0x0
 100ff1c:	add    DWORD PTR [rcx+rax*1],eax
 100ff1f:	add    BYTE PTR [rdx+rax*2],al
 100ff22:	add    BYTE PTR [rax],al
 100ff24:	add    DWORD PTR [rcx+rax*1],eax
 100ff27:	add    BYTE PTR [rdx+rax*2],al
 100ff2a:	add    BYTE PTR [rax],al
 100ff2c:	sbb    DWORD PTR [rip+0x1150005],ebx        # 0x215ff37
 100ff32:	sbb    al,0x0
 100ff34:	(bad)  
 100ff35:	jo     0x100ff44
 100ff37:	(bad)  
 100ff38:	or     al,0x30
 100ff3a:	add    BYTE PTR [rax],al
 100ff3c:	cld    
 100ff3d:	rex.WXB add BYTE PTR [r8],al
 100ff40:	mov    al,0x1e
 100ff42:	add    BYTE PTR [rax],al
 100ff44:	(bad)  
 100ff45:	(bad)  
 100ff46:	(bad)  
 100ff47:	inc    DWORD PTR [rax]
 100ff49:	add    BYTE PTR [rax],al
 100ff4b:	add    bh,bh
 100ff4d:	(bad)  
 100ff4e:	(bad)  
 100ff4f:	inc    DWORD PTR [rax]
	...
 100ff59:	add    BYTE PTR [rax],al
 100ff5b:	add    BYTE PTR [rcx],al
 100ff5d:	add    BYTE PTR [rax],al
 100ff5f:	add    BYTE PTR [rcx],al
 100ff61:	add    BYTE PTR [rax],al
 100ff63:	add    BYTE PTR [rax-0x1],ch
	...
 100ff72:	add    BYTE PTR [rax],al
 100ff74:	nop
 100ff75:	in     al,dx
 100ff76:	add    BYTE PTR [rax],al
 100ff78:	rex.W add BYTE PTR [rax],al
 100ff7b:	add    al,dl
 100ff7d:	outs   dx,BYTE PTR ds:[rsi]
 100ff7e:	add    BYTE PTR [rax],al
 100ff80:	(bad)  
 100ff81:	(bad)  
 100ff82:	(bad)  
 100ff83:	call   rax
 100ff85:	jo     0x100ff87
 100ff87:	add    BYTE PTR [rax],al
 100ff89:	add    BYTE PTR [rax],al
 100ff8b:	add    bl,ch
 100ff8d:	jo     0x100ff8f
 100ff8f:	add    bh,bh
 100ff91:	(bad)  
 100ff92:	(bad)  
 100ff93:	call   QWORD PTR [rax+0xec]
 100ff99:	add    BYTE PTR [rax],al
 100ff9b:	add    BYTE PTR [rbp+0x10000ec],bl
 100ffa1:	add    BYTE PTR [rax],al
 100ffa3:	add    BYTE PTR [rsp+rbp*8+0x0],ah
 100ffaa:	add    BYTE PTR [rax],al
 100ffac:	sbb    DWORD PTR [rdx],ecx
 100ffae:	add    al,BYTE PTR [rax]
 100ffb0:	or     dl,BYTE PTR [rdx+0x6]
 100ffb3:	push   rax
 100ffb4:	cld    
 100ffb5:	rex.WXB add BYTE PTR [r8],al
 100ffb8:	mov    al,0x1e
 100ffba:	add    BYTE PTR [rax],al
 100ffbc:	adc    DWORD PTR [rdi],esp
 100ffbe:	or     al,0x0
 100ffc0:	(bad)  
 100ffc1:	sbb    BYTE PTR fs:[rax],al
 100ffc4:	and    edx,DWORD PTR [rdi+rdx*1+0x0]
 100ffc8:	(bad)  
 100ffc9:	xor    al,0x16
 100ffcb:	add    BYTE PTR [rbx],dl
 100ffcd:	repnz or al,0xf0
 100ffd0:	or     ah,al
 100ffd2:	or     al,dl
 100ffd4:	(bad)  
 100ffd5:	rol    BYTE PTR [rax+rsi*2],0xfc
 100ffd9:	rex.WXB add BYTE PTR [r8],al
 100ffdc:	fcomp  DWORD PTR [rsi]
 100ffde:	add    BYTE PTR [rax],al
 100ffe0:	(bad)  
 100ffe1:	(bad)  
 100ffe2:	(bad)  
 100ffe3:	inc    DWORD PTR [rax]
 100ffe5:	in     eax,dx
 100ffe6:	add    BYTE PTR [rax],al
 100ffe8:	push   rax
 100ffe9:	jb     0x100ffeb
 100ffeb:	add    bh,bh
 100ffed:	(bad)  
 100ffee:	(bad)  
 100ffef:	call   FWORD PTR [rsi+0x72]
 100fff5:	add    BYTE PTR [rax],al
 100fff7:	add    BYTE PTR [rsp+rsi*2],dl
 100fffa:	add    BYTE PTR [rax],al
 100fffc:	(bad)  
 100fffd:	(bad)  
 100fffe:	(bad)  
 100ffff:	inc    DWORD PTR [rcx]
 1010001:	(bad)  
 1010002:	add    al,BYTE PTR [rax]
 1010004:	(bad)  
 1010005:	xor    al,BYTE PTR [rdx]
 1010007:	xor    BYTE PTR [rcx],al
 1010009:	or     eax,DWORD PTR [rbx]
 101000b:	add    BYTE PTR [rbx],cl
 101000d:	(bad)  
 101000e:	(bad)  
 101000f:	(bad)  
 1010010:	(bad)  
 1010011:	xor    BYTE PTR [rax],al
 1010013:	add    BYTE PTR [rcx],ah
 1010015:	add    eax,0x74050002
 101001a:	(bad)  
 101001b:	add    BYTE PTR [rax-0x51ffff8c],al
 1010021:	je     0x1010023
 1010023:	add    BYTE PTR [rax],cl
 1010025:	add    BYTE PTR [rcx],al
 1010027:	add    BYTE PTR [rcx],ah
 1010029:	add    BYTE PTR [rdx],al
 101002b:	add    BYTE PTR [rax],al
 101002d:	je     0x1010035
 101002f:	add    BYTE PTR [rax-0x51ffff8c],al
 1010035:	je     0x1010037
 1010037:	add    BYTE PTR [rax],cl
 1010039:	add    BYTE PTR [rcx],al
 101003b:	add    BYTE PTR [rcx],ah
 101003d:	add    BYTE PTR [rax],al
 101003f:	add    BYTE PTR [rax-0x51ffff8c],al
 1010045:	je     0x1010047
 1010047:	add    BYTE PTR [rax],cl
 1010049:	add    BYTE PTR [rcx],al
 101004b:	add    BYTE PTR [rcx],dl
 101004d:	or     eax,0x62040001
 1010052:	add    BYTE PTR [rax],al
 1010054:	cld    
 1010055:	rex.WXB add BYTE PTR [r8],al
 1010058:	add    BYTE PTR [rdi],bl
 101005a:	add    BYTE PTR [rax],al
 101005c:	(bad)  
 101005d:	(bad)  
 101005e:	(bad)  
 101005f:	inc    eax
 1010061:	in     al,dx
 1010062:	add    BYTE PTR [rax],al
 1010064:	nop
 1010065:	cmc    
 1010066:	add    BYTE PTR [rax],al
 1010068:	(bad)  
 1010069:	(bad)  
 101006a:	(bad)  
 101006b:	call   QWORD PTR [rcx]
 101006d:	or     eax,0x62040001
 1010072:	add    BYTE PTR [rax],al
 1010074:	cld    
 1010075:	rex.WXB add BYTE PTR [r8],al
 1010078:	sub    BYTE PTR [rdi],bl
 101007a:	add    BYTE PTR [rax],al
 101007c:	(bad)  
 101007d:	(bad)  
 101007e:	(bad)  
 101007f:	jmp    rax
 1010081:	in     al,dx
 1010082:	add    BYTE PTR [rax],al
 1010084:	adc    bh,dh
 1010086:	add    BYTE PTR [rax],al
 1010088:	(bad)  
 1010089:	(bad)  
 101008a:	(bad)  
 101008b:	inc    DWORD PTR [rcx]
 101008d:	add    al,0x1
 101008f:	add    BYTE PTR [rdx+rax*2],al
 1010092:	add    BYTE PTR [rax],al
 1010094:	add    DWORD PTR [rdx],ecx
 1010096:	add    al,0x0
 1010098:	or     dh,BYTE PTR [rcx+rdx*1]
 101009b:	add    BYTE PTR [rdx],cl
 101009d:	rol    BYTE PTR [rsi],cl
 101009f:	jo     0x10100c2
 10100a1:	or     BYTE PTR [rdx],al
 10100a3:	add    BYTE PTR [rax],cl
 10100a5:	adc    BYTE PTR fs:[rax],al
 10100a8:	adc    BYTE PTR [rbp+0x0],dh
 10100ab:	add    BYTE PTR [rbp-0x6bffff8b],cl
 10100b1:	add    BYTE PTR [rcx],al
 10100b3:	add    BYTE PTR [rcx],ah
 10100b5:	add    BYTE PTR [rax],al
 10100b7:	add    BYTE PTR [rax],dl
 10100b9:	jne    0x10100bb
 10100bb:	add    BYTE PTR [rbp-0x6bffff8b],cl
 10100c1:	add    BYTE PTR [rcx],al
 10100c3:	add    BYTE PTR [rcx],al
 10100c5:	adc    al,0x6
 10100c7:	add    BYTE PTR [rsp+riz*2],dl
 10100ca:	(bad)  
 10100cb:	add    BYTE PTR [rsp+rsi*1],dl
 10100ce:	(bad)  
 10100cf:	add    BYTE PTR [rdx+rsi*1],dl
 10100d2:	adc    BYTE PTR [rax+0x1],dh
 10100d5:	xchg   BYTE PTR [rdx],cl
 10100d7:	add    BYTE PTR [rsi+0x140010e4],al
 10100dd:	adc    eax,DWORD PTR fs:[rax]
 10100e0:	adc    al,0x54
 10100e2:	adc    al,BYTE PTR [rax]
 10100e4:	adc    al,0x34
 10100e6:	adc    DWORD PTR [rax],eax
 10100e8:	adc    al,0xd2
 10100ea:	adc    BYTE PTR [rax+0x1],dh
 10100ed:	adc    al,0x8
 10100ef:	add    BYTE PTR [rsp+riz*2],dl
 10100f2:	adc    al,BYTE PTR [rax]
 10100f4:	adc    al,0x54
 10100f6:	adc    DWORD PTR [rax],eax
 10100f8:	adc    al,0x34
 10100fa:	adc    BYTE PTR [rax],al
 10100fc:	adc    al,0xd2
 10100fe:	adc    BYTE PTR [rax+0x1],dh
 1010101:	add    al,0x1
 1010103:	add    BYTE PTR [rdx+riz*2],al
 1010106:	add    BYTE PTR [rax],al
 1010108:	add    DWORD PTR [rcx+rax*1],eax
 101010b:	add    BYTE PTR [rdx+rax*2],al
 101010e:	add    BYTE PTR [rax],al
 1010110:	adc    DWORD PTR [rbx],edx
 1010112:	add    al,BYTE PTR [rax]
 1010114:	or     dl,BYTE PTR [rdx+0x6]
 1010117:	xor    ah,bh
 1010119:	rex.WXB add BYTE PTR [r8],al
 101011c:	nop
 101011d:	and    BYTE PTR [rax],al
 101011f:	add    bh,bh
 1010121:	(bad)  
 1010122:	(bad)  
 1010123:	call   QWORD PTR [rax-0x13]
 1010126:	add    BYTE PTR [rax],al
 1010128:	sar    BYTE PTR [rax+0x0],1
 101012b:	add    bh,bh
 101012d:	(bad)  
 101012e:	(bad)  
 101012f:	push   rax
 1010131:	js     0x1010133
 1010133:	add    BYTE PTR [rax],al
 1010135:	add    BYTE PTR [rax],al
 1010137:	add    BYTE PTR [rax],cl
 1010139:	jns    0x101013b
 101013b:	add    bh,bh
 101013d:	(bad)  
 101013e:	(bad)  
 101013f:	call   QWORD PTR [rcx]
 1010141:	sbb    BYTE PTR [rax+rax*1],al
 1010144:	sbb    BYTE PTR [rcx+rcx*1],dh
 1010147:	add    BYTE PTR [rdx],cl
 1010149:	push   rdx
 101014a:	(bad)  
 101014b:	jo     0x1010149
 101014d:	rex.WXB add BYTE PTR [r8],al
 1010150:	mov    eax,0xff000020
 1010155:	(bad)  
 1010156:	(bad)  
 1010157:	jmp    QWORD PTR [rax+0x200000ed]
 101015d:	jns    0x101015f
 101015f:	add    bh,bh
 1010161:	(bad)  
 1010162:	(bad)  
 1010163:	inc    DWORD PTR [rdi+0x79]
 1010166:	add    BYTE PTR [rax],al
 1010168:	add    BYTE PTR [rax],al
 101016a:	add    BYTE PTR [rax],al
 101016c:	pop    rdi
 101016d:	jns    0x101016f
 101016f:	add    bh,bh
 1010171:	(bad)  
 1010172:	(bad)  
 1010173:	call   QWORD PTR [rcx]
 1010175:	or     al,BYTE PTR es:[rax]
 1010178:	es verr WORD PTR fs:[rcx]
 101017d:	push   rsp
 101017e:	(bad)  
 101017f:	add    BYTE PTR [rsp+rsi*1],bl
 1010182:	or     eax,0xa720e00
 1010187:	lock or al,ah
 101018a:	(bad)  
 101018b:	jo     0x1010189
 101018d:	rex.WXB add BYTE PTR [r8],al
 1010190:	loopne 0x10101b2
 1010192:	add    BYTE PTR [rax],al
 1010194:	(bad)  
 1010195:	(bad)  
 1010196:	(bad)  
 1010197:	jmp    QWORD PTR [rax]
 1010199:	in     eax,dx
 101019a:	add    BYTE PTR [rax],al
 101019c:	(bad)  
 101019d:	(bad)  
 101019e:	(bad)  
 101019f:	push   QWORD PTR [rax]
 10101a1:	in     eax,dx
 10101a2:	add    BYTE PTR [rax],al
 10101a4:	nop
 10101a5:	jns    0x10101a7
 10101a7:	add    bh,bh
 10101a9:	(bad)  
 10101aa:	(bad)  
 10101ab:	(bad)  
 10101ac:	std    
 10101ad:	jns    0x10101af
 10101af:	add    BYTE PTR [rax],al
 10101b1:	add    BYTE PTR [rax],al
 10101b3:	add    BYTE PTR [rdi],al
 10101b5:	jp     0x10101b7
 10101b7:	add    BYTE PTR [rcx],al
 10101b9:	add    BYTE PTR [rax],al
 10101bb:	add    BYTE PTR [rax-0xffff86],ah
 10101c1:	(bad)  
 10101c2:	(bad)  
 10101c3:	call   QWORD PTR [rcx]
 10101c5:	adc    eax,DWORD PTR [rdx]
 10101c7:	add    BYTE PTR [rdx],cl
 10101c9:	push   rdx
 10101ca:	(bad)  
 10101cb:	xor    ah,bh
 10101cd:	rex.WXB add BYTE PTR [r8],al
 10101d0:	or     BYTE PTR [rcx],ah
 10101d2:	add    BYTE PTR [rax],al
 10101d4:	(bad)  
 10101d5:	(bad)  
 10101d6:	(bad)  
 10101d7:	push   QWORD PTR [rax-0x13]
 10101da:	add    BYTE PTR [rax],al
 10101dc:	(bad)  
 10101dd:	(bad)  
 10101de:	(bad)  
 10101df:	inc    DWORD PTR [rax-0x2fffff13]
 10101e5:	jp     0x10101e7
 10101e7:	add    bh,bh
 10101e9:	(bad)  
 10101ea:	(bad)  
 10101eb:	push   rax
 10101ed:	jp     0x10101ef
 10101ef:	add    BYTE PTR [rax],al
 10101f1:	add    BYTE PTR [rax],al
 10101f3:	add    BYTE PTR [rsi],al
 10101f5:	jnp    0x10101f7
 10101f7:	add    bh,bh
 10101f9:	(bad)  
 10101fa:	(bad)  
 10101fb:	call   FWORD PTR [rcx]
 10101fd:	jnp    0x10101ff
 10101ff:	add    BYTE PTR [rcx],al
 1010201:	add    BYTE PTR [rax],al
 1010203:	add    BYTE PTR [rcx],dh
 1010205:	jnp    0x1010207
 1010207:	add    bh,bh
 1010209:	(bad)  
 101020a:	(bad)  
 101020b:	inc    DWORD PTR [rcx]
 101020d:	adc    al,0x8
 101020f:	add    BYTE PTR [rsp+riz*2],dl
 1010212:	or     al,BYTE PTR [rax]
 1010214:	adc    al,0x54
 1010216:	or     DWORD PTR [rax],eax
 1010218:	adc    al,0x34
 101021a:	or     BYTE PTR [rax],al
 101021c:	adc    al,0x52
 101021e:	adc    BYTE PTR [rax+0x1],dh
 1010221:	adc    al,0x8
 1010223:	add    BYTE PTR [rsp+riz*2],dl
 1010226:	or     eax,DWORD PTR [rax]
 1010228:	adc    al,0x54
 101022a:	or     al,BYTE PTR [rax]
 101022c:	adc    al,0x34
 101022e:	or     DWORD PTR [rax],eax
 1010230:	adc    al,0x52
 1010232:	adc    BYTE PTR [rax+0x1],dh
 1010235:	clts   
 1010237:	add    BYTE PTR [rdi],cl
 1010239:	fs or  al,0x0
 101023c:	sysenter 
 101023e:	or     eax,DWORD PTR [rax]
 1010240:	(bad)  
 1010242:	or     esi,DWORD PTR [rax+0x1]
 1010245:	or     al,BYTE PTR [rax+rax*1]
 1010248:	or     ah,BYTE PTR [rcx+rcx*1+0x0]
 101024c:	or     dl,BYTE PTR [rdx+0x6]
 101024f:	jo     0x1010272
 1010251:	add    eax,0x34050002
 1010256:	or     BYTE PTR [rax],al
 1010258:	(bad)  
 1010259:	jle    0x101025b
 101025b:	add    BYTE PTR [rbp+0x4400007e],cl
 1010261:	add    al,BYTE PTR [rcx]
 1010263:	add    BYTE PTR [rcx],ah
 1010265:	add    BYTE PTR [rdx],al
 1010267:	add    BYTE PTR [rax],al
 1010269:	xor    al,0x8
 101026b:	add    BYTE PTR [rax+0x7e],ah
 101026e:	add    BYTE PTR [rax],al
 1010270:	lea    edi,[rsi+0x0]
 1010273:	add    BYTE PTR [rdx+rax*1+0x1],al
 1010277:	add    BYTE PTR [rcx],ah
 1010279:	add    BYTE PTR [rax],al
 101027b:	add    BYTE PTR [rax+0x7e],ah
 101027e:	add    BYTE PTR [rax],al
 1010280:	lea    edi,[rsi+0x0]
 1010283:	add    BYTE PTR [rdx+rax*1+0x1],al
 1010287:	add    BYTE PTR [rcx],dl
 1010289:	lar    eax,WORD PTR [rax]
 101028c:	(bad)  
 101028d:	push   rdx
 101028e:	add    dh,BYTE PTR [rax]
 1010290:	cld    
 1010291:	rex.WXB add BYTE PTR [r8],al
 1010294:	loopne 0x10102bc
 1010296:	add    BYTE PTR [rax],al
 1010298:	(bad)  
 1010299:	(bad)  
 101029a:	(bad)  
 101029b:	inc    eax
 101029d:	in     eax,dx
 101029e:	add    BYTE PTR [rax],al
 10102a0:	rex test BYTE PTR [rax],0x0
 10102a4:	(bad)  
 10102a5:	(bad)  
 10102a6:	(bad)  
 10102a7:	push   QWORD PTR [rdx-0xa]
 10102aa:	add    BYTE PTR [rax],al
 10102ac:	add    BYTE PTR [rax],al
 10102ae:	add    BYTE PTR [rax],al
 10102b0:	xor    dh,0x0
 10102b3:	add    bh,bh
 10102b5:	(bad)  
 10102b6:	(bad)  
 10102b7:	call   QWORD PTR [rcx]
 10102b9:	or     al,0x1
 10102bb:	add    BYTE PTR [rdx+riz*1],al
 10102be:	add    BYTE PTR [rax],al
 10102c0:	cld    
 10102c1:	rex.WXB add BYTE PTR [r8],al
 10102c4:	or     BYTE PTR [rdi],ah
 10102c6:	add    BYTE PTR [rax],al
 10102c8:	(bad)  
 10102c9:	(bad)  
 10102ca:	(bad)  
 10102cb:	jmp    rax
 10102cd:	in     eax,dx
 10102ce:	add    BYTE PTR [rax],al
 10102d0:	rex test DWORD PTR [rax],0xffffff00
 10102d7:	inc    DWORD PTR [rcx]
 10102d9:	or     al,BYTE PTR [rax+rax*1]
 10102dc:	or     dh,BYTE PTR [rsi+rax*1]
 10102df:	add    BYTE PTR [rdx],cl
 10102e1:	xor    al,BYTE PTR [rsi]
 10102e3:	jo     0x10102e6
 10102e5:	jg     0x10102ef
 10102e7:	add    BYTE PTR [rdi+0x34],bh
 10102ea:	adc    BYTE PTR [rax],al
 10102ec:	pcmpgtb mm2,QWORD PTR [rdx]
 10102ef:	add    BYTE PTR [rdi],cl
 10102f1:	push   rsp
 10102f2:	adc    DWORD PTR [rax],eax
 10102f4:	psrld  mm1,QWORD PTR [rbx]
 10102f7:	jo     0x10102fa
 10102f9:	adc    al,0x8
 10102fb:	add    BYTE PTR [rsp+riz*2],dl
 10102fe:	adc    al,BYTE PTR [rax]
 1010300:	adc    al,0x54
 1010302:	adc    DWORD PTR [rax],eax
 1010304:	adc    al,0x34
 1010306:	adc    BYTE PTR [rax],al
 1010308:	adc    al,0xd2
 101030a:	adc    BYTE PTR [rax+0x1],dh
 101030d:	or     DWORD PTR [rax],0x0
 1010310:	xor    DWORD PTR [rax+rdx*1+0x0],0xf
 1010315:	push   rsp
 1010316:	adc    al,BYTE PTR [rax]
 1010318:	sysenter 
 101031a:	adc    DWORD PTR [rax],eax
 101031c:	psrld  mm1,QWORD PTR [rbx]
 101031f:	(bad)  
 1010320:	add    DWORD PTR [rsi],eax
 1010322:	add    al,BYTE PTR [rax]
 1010324:	(bad)  
 1010325:	xor    al,BYTE PTR [rdx]
 1010327:	xor    BYTE PTR [rcx],al
 1010329:	(bad)  
 101032a:	add    al,BYTE PTR [rax]
 101032c:	(bad)  
 101032d:	xor    al,BYTE PTR [rdx]
 101032f:	xor    BYTE PTR [rcx],al
 1010331:	or     al,BYTE PTR [rax+rax*1]
 1010334:	or     dh,BYTE PTR [rsi+rax*1]
 1010337:	add    BYTE PTR [rdx],cl
 1010339:	xor    al,BYTE PTR [rsi]
 101033b:	jo     0x101033e
 101033d:	or     al,BYTE PTR [rax+rax*1]
 1010340:	or     dh,BYTE PTR [rsi+rax*1]
 1010343:	add    BYTE PTR [rdx],cl
 1010345:	xor    al,BYTE PTR [rsi]
 1010347:	jo     0x101034a
 1010349:	(bad)  
 101034a:	add    al,BYTE PTR [rax]
 101034c:	(bad)  
 101034d:	xor    al,BYTE PTR [rdx]
 101034f:	xor    BYTE PTR [rcx],al
 1010351:	or     al,BYTE PTR [rax+rax*1]
 1010354:	or     dh,BYTE PTR [rsi+rax*1]
 1010357:	add    BYTE PTR [rdx],cl
 1010359:	xor    al,BYTE PTR [rsi]
 101035b:	jo     0x101035e
 101035d:	(bad)  
 101035e:	add    al,BYTE PTR [rax]
 1010360:	(bad)  
 1010361:	rol    BYTE PTR [rdx],cl
 1010363:	xor    BYTE PTR [rcx],dl
 1010365:	(bad)  
 1010366:	add    al,0x0
 1010368:	(bad)  
 1010369:	xor    al,0x13
 101036b:	add    BYTE PTR [rip+0xfffffffffc7006f2],cl        # 0xfffffffffd710a63
 1010371:	rex.WXB add BYTE PTR [r8],al
 1010374:	adc    BYTE PTR [rax],ch
 1010376:	add    BYTE PTR [rax],al
 1010378:	(bad)  
 1010379:	(bad)  
 101037a:	(bad)  
 101037b:	inc    DWORD PTR [rax]
 101037d:	icebp  
 101037e:	add    BYTE PTR [rax],al
 1010380:	add    BYTE PTR [rax],al
 1010382:	add    BYTE PTR [rax],al
 1010384:	adc    cl,dh
 1010386:	add    BYTE PTR [rax],al
 1010388:	add    DWORD PTR [rax],eax
 101038a:	add    BYTE PTR [rax],al
 101038c:	and    cl,dh
 101038e:	add    BYTE PTR [rax],al
 1010390:	add    al,BYTE PTR [rax]
 1010392:	add    BYTE PTR [rax],al
 1010394:	xor    cl,dh
 1010396:	add    BYTE PTR [rax],al
 1010398:	movabs al,ds:0xc7ffffffff000084
 10103a1:	test   BYTE PTR [rax],al
 10103a3:	add    BYTE PTR [rax],al
 10103a5:	add    BYTE PTR [rax],al
 10103a7:	add    bl,cl
 10103a9:	test   BYTE PTR [rax],al
 10103ab:	add    BYTE PTR [rcx],al
 10103ad:	add    BYTE PTR [rax],al
 10103af:	add    al,bl
 10103b1:	test   BYTE PTR [rax],al
 10103b3:	add    BYTE PTR [rdx],al
 10103b5:	add    BYTE PTR [rax],al
 10103b7:	add    ch,ah
 10103b9:	test   BYTE PTR [rax],al
 10103bb:	add    BYTE PTR [rbx],al
 10103bd:	add    BYTE PTR [rax],al
 10103bf:	add    BYTE PTR [rdi-0x7b],bl
 10103c2:	add    BYTE PTR [rax],al
 10103c4:	(bad)  
 10103c5:	(bad)  
 10103c6:	(bad)  
 10103c7:	call   QWORD PTR [rcx]
 10103c9:	adc    eax,DWORD PTR [rdx]
 10103cb:	add    BYTE PTR [rdx],cl
 10103cd:	push   rdx
 10103ce:	(bad)  
 10103cf:	xor    ah,bh
 10103d1:	rex.WXB add BYTE PTR [r8],al
 10103d4:	cmp    BYTE PTR [rax],ch
 10103d6:	add    BYTE PTR [rax],al
 10103d8:	(bad)  
 10103d9:	(bad)  
 10103da:	(bad)  
 10103db:	push   QWORD PTR [rax-0x7fffff0f]
 10103e1:	test   DWORD PTR [rax],eax
 10103e3:	add    bh,bh
 10103e5:	(bad)  
 10103e6:	(bad)  
 10103e7:	call   QWORD PTR [rsi+0x85]
 10103ed:	add    BYTE PTR [rax],al
 10103ef:	add    BYTE PTR [rdx-0xffff7b],dh
 10103f5:	(bad)  
 10103f6:	(bad)  
 10103f7:	call   QWORD PTR [rcx]
 10103f9:	(bad)  
 10103fa:	add    eax,0xa820e00
 10103ff:	loopne 0x1010409
 1010401:	jo     0x101040a
 1010403:	(bad)  
 1010404:	(bad)  
 1010405:	xor    BYTE PTR [rax],al
 1010407:	add    ah,bh
 1010409:	rex.WXB add BYTE PTR [r8],al
 101040c:	(bad)  
 101040d:	sub    BYTE PTR [rax],al
 101040f:	add    bh,bh
 1010411:	(bad)  
 1010412:	(bad)  
 1010413:	jmp    QWORD PTR [rax+0xf0]
 1010419:	add    BYTE PTR [rax],al
 101041b:	add    BYTE PTR [rax+0x10000f0],dh
 1010421:	add    BYTE PTR [rax],al
 1010423:	add    al,al
 1010425:	lock add BYTE PTR [rax],al
 1010428:	add    al,BYTE PTR [rax]
 101042a:	add    BYTE PTR [rax],al
 101042c:	shl    al,1
 101042e:	add    BYTE PTR [rax],al
 1010430:	add    eax,DWORD PTR [rax]
 1010432:	add    BYTE PTR [rax],al
 1010434:	loopne 0x1010426
 1010436:	add    BYTE PTR [rax],al
 1010438:	rol    BYTE PTR [rbp-0x10000],1
 101043e:	(bad)  
 101043f:	push   rax
 1010441:	test   DWORD PTR [rax],eax
 1010443:	add    BYTE PTR [rax],al
 1010445:	add    BYTE PTR [rax],al
 1010447:	add    al,bh
 1010449:	test   DWORD PTR [rax],eax
 101044b:	add    BYTE PTR [rcx],al
 101044d:	add    BYTE PTR [rax],al
 101044f:	add    BYTE PTR [rdx],cl
 1010451:	xchg   BYTE PTR [rax],al
 1010453:	add    BYTE PTR [rdx],al
 1010455:	add    BYTE PTR [rax],al
 1010457:	add    BYTE PTR [rsi+rax*4],dl
 101045a:	add    BYTE PTR [rax],al
 101045c:	add    eax,DWORD PTR [rax]
 101045e:	add    BYTE PTR [rax],al
 1010460:	(bad)  
 1010461:	xchg   BYTE PTR [rax],al
 1010463:	add    BYTE PTR [rax+rax*1],al
 1010466:	add    BYTE PTR [rax],al
 1010468:	inc    BYTE PTR [rsi-0x10000]
 101046e:	(bad)  
 101046f:	call   QWORD PTR [rcx]
 1010471:	adc    eax,DWORD PTR [rdx]
 1010473:	add    BYTE PTR [rdx],cl
 1010475:	push   rdx
 1010476:	(bad)  
 1010477:	xor    ah,bh
 1010479:	rex.WXB add BYTE PTR [r8],al
 101047c:	mov    BYTE PTR [rax],ch
 101047e:	add    BYTE PTR [rax],al
 1010480:	(bad)  
 1010481:	(bad)  
 1010482:	(bad)  
 1010483:	call   QWORD PTR [rax-0xf]
 1010486:	add    BYTE PTR [rax],al
 1010488:	add    BYTE PTR [rax],al
 101048a:	add    BYTE PTR [rax],al
 101048c:	(bad)  
 101048d:	icebp  
 101048e:	add    BYTE PTR [rax],al
 1010490:	add    DWORD PTR [rax],eax
 1010492:	add    BYTE PTR [rax],al
 1010494:	jo     0x1010487
 1010496:	add    BYTE PTR [rax],al
 1010498:	add    al,BYTE PTR [rax]
 101049a:	add    BYTE PTR [rax],al
 101049c:	xor    cl,0x0
 101049f:	add    bh,bh
 10104a1:	(bad)  
 10104a2:	(bad)  
 10104a3:	call   QWORD PTR [rax+0x200000f1]
 10104a9:	xchg   DWORD PTR [rax],eax
 10104ab:	add    bh,bh
 10104ad:	(bad)  
 10104ae:	(bad)  
 10104af:	push   QWORD PTR [rsi]
 10104b1:	xchg   DWORD PTR [rax],eax
 10104b3:	add    BYTE PTR [rbx],al
 10104b5:	add    BYTE PTR [rax],al
 10104b7:	add    BYTE PTR [rax-0x79],al
 10104ba:	add    BYTE PTR [rax],al
 10104bc:	add    al,BYTE PTR [rax]
 10104be:	add    BYTE PTR [rax],al
 10104c0:	rex.WX xchg QWORD PTR [rax],rax
 10104c3:	add    BYTE PTR [rcx],al
 10104c5:	add    BYTE PTR [rax],al
 10104c7:	add    BYTE PTR [rdi+rax*4+0x0],dl
 10104cb:	add    BYTE PTR [rax],al
 10104cd:	add    BYTE PTR [rax],al
 10104cf:	add    BYTE PTR [rsi-0x79],bl
 10104d2:	add    BYTE PTR [rax],al
 10104d4:	add    al,0x0
 10104d6:	add    BYTE PTR [rax],al
 10104d8:	jp     0x1010461
 10104da:	add    BYTE PTR [rax],al
 10104dc:	(bad)  
 10104dd:	(bad)  
 10104de:	(bad)  
 10104df:	inc    DWORD PTR [rcx]
 10104e1:	add    al,0x1
 10104e3:	add    BYTE PTR [rdx+rax*2],al
 10104e6:	add    BYTE PTR [rax],al
 10104e8:	add    DWORD PTR [rcx+rax*1],eax
 10104eb:	add    BYTE PTR [rdx+rax*2],al
 10104ee:	add    BYTE PTR [rax],al
 10104f0:	add    DWORD PTR [rsi],eax
 10104f2:	add    al,BYTE PTR [rax]
 10104f4:	(bad)  
 10104f5:	xor    al,BYTE PTR [rdx]
 10104f7:	xor    BYTE PTR [rcx],al
 10104f9:	(bad)  
 10104fa:	add    al,BYTE PTR [rax]
 10104fc:	(bad)  
 10104fd:	xor    al,BYTE PTR [rdx]
 10104ff:	xor    BYTE PTR [rcx],al
 1010501:	add    al,0x1
 1010503:	add    BYTE PTR [rdx+rax*2],al
 1010506:	add    BYTE PTR [rax],al
 1010508:	adc    DWORD PTR [rbx],edx
 101050a:	add    al,BYTE PTR [rax]
 101050c:	or     dl,BYTE PTR [rdx+0x6]
 101050f:	xor    ah,bh
 1010511:	rex.WXB add BYTE PTR [r8],al
 1010514:	mov    al,0x28
 1010516:	add    BYTE PTR [rax],al
 1010518:	(bad)  
 1010519:	(bad)  
 101051a:	(bad)  
 101051b:	jmp    rax
 101051d:	out    dx,al
 101051e:	add    BYTE PTR [rax],al
 1010520:	movabs al,ds:0xc1ffffffff000088
 1010529:	mov    BYTE PTR [rax],al
 101052b:	add    BYTE PTR [rax],al
 101052d:	add    BYTE PTR [rax],al
 101052f:	add    al,bl
 1010531:	mov    BYTE PTR [rax],al
 1010533:	add    bh,bh
 1010535:	(bad)  
 1010536:	(bad)  
 1010537:	inc    DWORD PTR [rcx]
 1010539:	(bad)  
 101053a:	add    al,BYTE PTR [rax]
 101053c:	(bad)  
 101053d:	xor    al,BYTE PTR [rdx]
 101053f:	xor    BYTE PTR [rcx],bl
 1010541:	sub    BYTE PTR [rbx],cl
 1010543:	add    BYTE PTR [rax],ch
 1010545:	je     0x1010564
 1010547:	add    BYTE PTR [rsp+riz*2],ah
 101054a:	sbb    al,0x0
 101054c:	and    BYTE PTR [rbx+rbx*1],dh
 101054f:	add    BYTE PTR [rcx+rax*1],dl
 1010552:	(bad)  
 1010553:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae11149
 1010559:	rol    BYTE PTR [rax],0x0
 101055c:	cld    
 101055d:	rex.WXB add BYTE PTR [r8],al
 1010560:	fsubr  DWORD PTR [rax]
 1010562:	add    BYTE PTR [rax],al
 1010564:	(bad)  
 1010565:	(bad)  
 1010566:	(bad)  
 1010567:	inc    DWORD PTR [rax]
 1010569:	out    dx,al
	...
 1010572:	add    BYTE PTR [rax],al
 1010574:	add    DWORD PTR [rax],eax
 1010576:	add    BYTE PTR [rax],al
 1010578:	adc    dh,ch
 101057a:	add    BYTE PTR [rax],al
 101057c:	add    al,BYTE PTR [rax]
 101057e:	add    BYTE PTR [rax],al
 1010580:	and    dh,ch
 1010582:	add    BYTE PTR [rax],al
 1010584:	add    eax,DWORD PTR [rax]
 1010586:	add    BYTE PTR [rax],al
 1010588:	xor    dh,ch
 101058a:	add    BYTE PTR [rax],al
 101058c:	add    al,BYTE PTR [rax]
 101058e:	add    BYTE PTR [rax],al
 1010590:	out    dx,al
 1010592:	add    BYTE PTR [rax],al
 1010594:	add    eax,0x50000000
 1010599:	out    dx,al
	...
 10105a2:	add    BYTE PTR [rax],al
 10105a4:	add    DWORD PTR [rax],eax
 10105a6:	add    BYTE PTR [rax],al
 10105a8:	(bad)  
 10105a9:	add    BYTE PTR [rax],al
 10105ab:	add    BYTE PTR [rdi],al
 10105ad:	add    BYTE PTR [rax],al
 10105af:	add    BYTE PTR [rcx],al
 10105b1:	add    BYTE PTR [rax],al
 10105b3:	add    BYTE PTR [rax+0x8000105],bh
 10105b9:	add    BYTE PTR [rax],al
 10105bb:	add    BYTE PTR [rax],cl
 10105bd:	xor    DWORD PTR [rcx],eax
 10105bf:	add    BYTE PTR [rax+0x60000000],bl
 10105c5:	out    dx,al
 10105c6:	add    BYTE PTR [rax],al
 10105c8:	cmp    BYTE PTR [rax],al
 10105ca:	add    BYTE PTR [rax],al
 10105cc:	xor    BYTE PTR [rcx-0x10000],cl
 10105d2:	(bad)  
 10105d3:	jmp    QWORD PTR [rax+0x1000089]
 10105d9:	add    BYTE PTR [rax],al
 10105db:	add    BYTE PTR [rax+0x2000089],dh
 10105e1:	add    BYTE PTR [rax],al
 10105e3:	add    BYTE PTR [rcx],al
 10105e5:	mov    al,BYTE PTR [rax]
 10105e7:	add    BYTE PTR [rbx],al
 10105e9:	add    BYTE PTR [rax],al
 10105eb:	add    BYTE PTR [rax-0x76],dl
 10105ee:	add    BYTE PTR [rax],al
 10105f0:	add    al,0x0
 10105f2:	add    BYTE PTR [rax],al
 10105f4:	je     0x1010580
 10105f6:	add    BYTE PTR [rax],al
 10105f8:	add    eax,DWORD PTR [rax]
 10105fa:	add    BYTE PTR [rax],al
 10105fc:	or     BYTE PTR [rdx+0x20000],0x0
 1010603:	add    BYTE PTR [rbp+0x500008a],ch
 1010609:	add    BYTE PTR [rax],al
 101060b:	add    cl,bh
 101060d:	mov    al,BYTE PTR [rax]
 101060f:	add    BYTE PTR [rsi],al
 1010611:	add    BYTE PTR [rax],al
 1010613:	add    BYTE PTR [rax],ah
 1010615:	mov    eax,DWORD PTR [rax]
 1010617:	add    BYTE PTR [rip+0x2b000000],al        # 0x2c01061d
 101061d:	mov    eax,DWORD PTR [rax]
 101061f:	add    BYTE PTR [rdx],al
 1010621:	add    BYTE PTR [rax],al
 1010623:	add    BYTE PTR [rbx+rcx*4],dh
 1010626:	add    BYTE PTR [rax],al
 1010628:	add    DWORD PTR [rax],eax
 101062a:	add    BYTE PTR [rax],al
 101062c:	(bad)  
 101062d:	mov    eax,DWORD PTR [rax]
 101062f:	add    bh,bh
 1010631:	(bad)  
 1010632:	(bad)  
 1010633:	jmp    QWORD PTR [rax-0x12]
 1010636:	add    BYTE PTR [rax],al
 1010638:	add    BYTE PTR [rax],al
 101063a:	add    BYTE PTR [rax],al
 101063c:	ins    DWORD PTR es:[rdi],dx
 101063d:	out    dx,al
 101063e:	add    BYTE PTR [rax],al
 1010640:	(bad)  
 1010641:	add    BYTE PTR [rax],al
 1010643:	add    BYTE PTR [rcx],bl
 1010645:	or     al,BYTE PTR [rdx]
 1010647:	add    BYTE PTR [rdx],cl
 1010649:	xor    al,BYTE PTR [rsi]
 101064b:	push   rax
 101064c:	cld    
 101064d:	rex.WXB add BYTE PTR [r8],al
 1010650:	fsubr  DWORD PTR [rax]
 1010652:	add    BYTE PTR [rax],al
 1010654:	add    DWORD PTR [rsi],eax
 1010656:	add    al,BYTE PTR [rax]
 1010658:	(bad)  
 1010659:	xor    al,BYTE PTR [rdx]
 101065b:	xor    BYTE PTR [rcx],ah
 101065d:	add    eax,0x74050002
 1010662:	(bad)  
 1010663:	add    BYTE PTR [rax-0x42ffff75],al
 1010669:	mov    eax,DWORD PTR [rax]
 101066b:	add    BYTE PTR [rsi+rax*1+0x1],dl
 101066f:	add    BYTE PTR [rcx],ah
 1010671:	add    BYTE PTR [rax],al
 1010673:	add    BYTE PTR [rax-0x42ffff75],al
 1010679:	mov    eax,DWORD PTR [rax]
 101067b:	add    BYTE PTR [rsi+rax*1+0x1],dl
 101067f:	add    BYTE PTR [rcx],al
 1010681:	(bad)  
 1010682:	add    al,BYTE PTR [rax]
 1010684:	(bad)  
 1010685:	xor    al,BYTE PTR [rdx]
 1010687:	xor    BYTE PTR [rcx],al
 1010689:	(bad)  
 101068a:	add    DWORD PTR [rax],eax
 101068c:	(bad)  
 101068d:	(bad)  
 101068e:	add    BYTE PTR [rax],al
 1010690:	add    DWORD PTR [rdi],eax
 1010692:	add    DWORD PTR [rax],eax
 1010694:	(bad)  
 1010695:	(bad)  
 1010696:	add    BYTE PTR [rax],al
 1010698:	sbb    DWORD PTR [rip+0x11c000a],esi        # 0x21d06a8
 101069e:	fld    DWORD PTR [rax]
 10106a0:	or     eax,0x9e00bf0
 10106a5:	rol    BYTE PTR [rdi],1
 10106a7:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4610b1e
 10106ae:	add    dl,BYTE PTR [rax+0x8]
 10106b1:	rex.WR add BYTE PTR [rax],r8b
 10106b4:	add    BYTE PTR [rcx],ch
 10106b6:	add    BYTE PTR [rax],al
 10106b8:	mov    dl,0x6
 10106ba:	add    BYTE PTR [rax],al
 10106bc:	(bad)  
 10106bd:	(bad)  
 10106be:	(bad)  
 10106bf:	call   QWORD PTR [rax+0xf3]
 10106c5:	lea    eax,[rax]
 10106c7:	add    bh,bh
 10106c9:	(bad)  
 10106ca:	(bad)  
 10106cb:	push   QWORD PTR [rax]
 10106cd:	xchg   edx,eax
 10106ce:	add    BYTE PTR [rax],al
 10106d0:	add    BYTE PTR [rax],al
 10106d2:	add    BYTE PTR [rax],al
 10106d4:	rex.WRXB xchg r10,rax
 10106d6:	add    BYTE PTR [rax],al
 10106d8:	(bad)  
 10106d9:	(bad)  
 10106da:	(bad)  
 10106db:	call   FWORD PTR [rcx]
 10106dd:	sub    ecx,DWORD PTR [rax]
 10106df:	add    BYTE PTR [rax],dl
 10106e1:	add    DWORD PTR [rcx+0x7f00901],edx
 10106e7:	loopne 0x10106ee
 10106e9:	jo     0x10106ef
 10106eb:	(bad)  
 10106ec:	add    edx,DWORD PTR [rax+0x2]
 10106ef:	xor    BYTE PTR [rax],cl
 10106f1:	rex.WR add BYTE PTR [rax],r8b
 10106f4:	sub    BYTE PTR [rcx],ch
 10106f6:	add    BYTE PTR [rax],al
 10106f8:	jb     0x1010706
 10106fa:	add    BYTE PTR [rax],al
 10106fc:	(bad)  
 10106fd:	(bad)  
 10106fe:	(bad)  
 10106ff:	push   QWORD PTR [rax-0x6fffff0d]
 1010705:	xchg   edx,eax
 1010706:	add    BYTE PTR [rax],al
 1010708:	(bad)  
 1010709:	(bad)  
 101070a:	(bad)  
 101070b:	inc    eax
 101070d:	xchg   ebx,eax
 101070e:	add    BYTE PTR [rax],al
 1010710:	add    BYTE PTR [rax],al
 1010712:	add    BYTE PTR [rax],al
 1010714:	loop   0x10106a9
 1010716:	add    BYTE PTR [rax],al
 1010718:	(bad)  
 1010719:	(bad)  
 101071a:	(bad)  
 101071b:	call   FWORD PTR [rcx]
 101071d:	xor    eax,0x11c000a
 1010722:	movabs ds:0x7d009e00bf00d01,eax
 101072b:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4610ba2
 1010732:	add    dl,BYTE PTR [rax+0x8]
 1010735:	rex.WR add BYTE PTR [rax],r8b
 1010738:	push   rax
 1010739:	sub    DWORD PTR [rax],eax
 101073b:	add    BYTE PTR [rdx],al
 101073d:	or     eax,0xffff0000
 1010742:	(bad)  
 1010743:	jmp    QWORD PTR [rax-0xd]
 1010746:	add    BYTE PTR [rax],al
 1010748:	add    BYTE PTR [rax],al
 101074a:	add    BYTE PTR [rax],al
 101074c:	jo     0x1010741
 101074e:	add    BYTE PTR [rax],al
 1010750:	and    BYTE PTR [rax+rax*1-0x100],dl
 1010757:	(bad)  
 1010758:	cli    
 1010759:	xchg   esp,eax
 101075a:	add    BYTE PTR [rax],al
 101075c:	add    BYTE PTR [rax],al
 101075e:	add    BYTE PTR [rax],al
 1010760:	(bad)  
 1010761:	xchg   ebp,eax
 1010762:	add    BYTE PTR [rax],al
 1010764:	add    DWORD PTR [rax],eax
 1010766:	add    BYTE PTR [rax],al
 1010768:	rcl    DWORD PTR [rdi+0x0],0x0
 101076f:	add    BYTE PTR [rbx],ch
 1010771:	cwde   
 1010772:	add    BYTE PTR [rax],al
 1010774:	(bad)  
 1010775:	(bad)  
 1010776:	(bad)  
 1010777:	call   FWORD PTR [rcx]
 1010779:	sub    al,0x5
 101077b:	add    BYTE PTR [rdx],bl
 101077d:	xor    al,0xd1
 101077f:	add    BYTE PTR [rcx],cl
 1010781:	add    esp,ecx
 1010783:	add    BYTE PTR [rdx],al
 1010785:	jo     0x1010787
 1010787:	add    BYTE PTR [rax],cl
 1010789:	rex.WR add BYTE PTR [rax],r8b
 101078c:	js     0x10107b7
 101078e:	add    BYTE PTR [rax],al
 1010790:	push   rdx
 1010791:	(bad)  
 1010792:	add    BYTE PTR [rax],al
 1010794:	(bad)  
 1010795:	(bad)  
 1010796:	(bad)  
 1010797:	jmp    QWORD PTR [rax]
 1010799:	repz add BYTE PTR [rax],al
 101079c:	jo     0x1010736
 101079e:	add    BYTE PTR [rax],al
 10107a0:	(bad)  
 10107a1:	(bad)  
 10107a2:	(bad)  
 10107a3:	inc    DWORD PTR [rip+0x99]        # 0x1010842
 10107a9:	add    BYTE PTR [rax],al
 10107ab:	add    BYTE PTR [rbx],ah
 10107ad:	cdq    
 10107ae:	add    BYTE PTR [rax],al
 10107b0:	(bad)  
 10107b1:	(bad)  
 10107b2:	(bad)  
 10107b3:	call   FWORD PTR [rcx]
 10107b5:	es add eax,0x8c010b00
 10107bb:	add    DWORD PTR [rax+rsi*2],eax
 10107be:	add    esp,DWORD PTR [rax+0x2]
 10107c1:	xor    BYTE PTR [rax],al
 10107c3:	add    BYTE PTR [rax],cl
 10107c5:	rex.WR add BYTE PTR [rax],r8b
 10107c8:	movabs al,ds:0xff00000c52000029
 10107d1:	(bad)  
 10107d2:	(bad)  
 10107d3:	inc    DWORD PTR [rax-0xd]
 10107d6:	add    BYTE PTR [rax],al
 10107d8:	jo     0x1010773
 10107da:	add    BYTE PTR [rax],al
 10107dc:	(bad)  
 10107dd:	(bad)  
 10107de:	(bad)  
 10107df:	dec    DWORD PTR [rip+0x9a]        # 0x101087f
 10107e5:	add    BYTE PTR [rax],al
 10107e7:	add    BYTE PTR [rsi],ch
 10107e9:	(bad)  
 10107ea:	add    BYTE PTR [rax],al
 10107ec:	(bad)  
 10107ed:	(bad)  
 10107ee:	(bad)  
 10107ef:	inc    DWORD PTR [rcx]
 10107f1:	add    al,0x1
 10107f3:	add    BYTE PTR [rdx+riz*2],al
 10107f6:	add    BYTE PTR [rax],al
 10107f8:	sbb    DWORD PTR [rdx],esp
 10107fa:	(bad)  
 10107fb:	add    BYTE PTR [rax],dl
 10107fd:	add    ebx,edx
 10107ff:	add    BYTE PTR [rcx],cl
 1010801:	lock (bad) 
 1010803:	loopne 0x101080a
 1010805:	jo     0x101080b
 1010807:	push   rax
 1010808:	mov    BYTE PTR [rcx+0x0],dl
 101080b:	add    BYTE PTR [rax+0x6],dh
 101080e:	add    BYTE PTR [rax],al
 1010810:	and    DWORD PTR [rdi],edx
 1010812:	(bad)  
 1010813:	add    BYTE PTR [rdi],dl
 1010815:	(bad)  
 1010816:	rol    BYTE PTR [rax],1
 1010818:	or     BYTE PTR [rcx+rdx*8+0x0],ah
 101081c:	add    al,0x34
 101081e:	rol    BYTE PTR [rax],cl
 1010820:	movabs al,ds:0xf800009adb00009a
 1010829:	(bad)  
 101082a:	add    DWORD PTR [rax],eax
 101082c:	and    DWORD PTR [rax],eax
 101082e:	add    BYTE PTR [rax],al
 1010830:	movabs al,ds:0xf800009adb00009a
 1010839:	(bad)  
 101083a:	add    DWORD PTR [rax],eax
 101083c:	add    DWORD PTR [rcx+rax*1],eax
 101083f:	add    BYTE PTR [rdx+rax*2],al
 1010842:	add    BYTE PTR [rax],al
 1010844:	add    DWORD PTR [rbx],edx
 1010846:	or     BYTE PTR [rax],al
 1010848:	adc    esp,DWORD PTR [rdx+rdx*1+0x0]
 101084c:	adc    esi,DWORD PTR [rcx+rdx*1]
 101084f:	add    BYTE PTR [rbx],dl
 1010851:	mov    dl,0xf
 1010853:	lock or eax,0x21700be0
 1010859:	or     BYTE PTR [rdx],al
 101085b:	add    BYTE PTR [rax],cl
 101085d:	push   rsp
 101085e:	adc    BYTE PTR [rax],al
 1010860:	push   rax
 1010861:	pushf  
 1010862:	add    BYTE PTR [rax],al
 1010864:	mov    bh,0x9c
 1010866:	add    BYTE PTR [rax],al
 1010868:	or     BYTE PTR [rcx],r8b
 101086b:	add    BYTE PTR [rcx],ah
 101086d:	add    BYTE PTR [rax],al
 101086f:	add    BYTE PTR [rax-0x64],dl
 1010872:	add    BYTE PTR [rax],al
 1010874:	mov    bh,0x9c
 1010876:	add    BYTE PTR [rax],al
 1010878:	or     BYTE PTR [rcx],r8b
 101087b:	add    BYTE PTR [rcx],al
 101087d:	add    al,0x1
 101087f:	add    BYTE PTR [rdx+rax*4],al
 1010882:	add    BYTE PTR [rax],al
 1010884:	add    DWORD PTR [rcx+rax*1],eax
 1010887:	add    BYTE PTR [rdx+rax*4],al
 101088a:	add    BYTE PTR [rax],al
 101088c:	add    DWORD PTR [rsi],eax
 101088e:	add    al,BYTE PTR [rax]
 1010890:	(bad)  
 1010891:	jb     0x1010895
 1010893:	xor    BYTE PTR [rcx],al
 1010895:	(bad)  
 1010896:	add    al,BYTE PTR [rax]
 1010898:	(bad)  
 1010899:	xor    al,BYTE PTR [rdx]
 101089b:	xor    BYTE PTR [rcx],bl
 101089d:	sbb    eax,DWORD PTR [rbx]
 101089f:	add    BYTE PTR [rcx],cl
 10108a1:	add    DWORD PTR [rdx],esi
 10108a3:	add    BYTE PTR [rdx],al
 10108a5:	xor    BYTE PTR [rax],al
 10108a7:	add    BYTE PTR [rax-0x7fffffaf],cl
 10108ad:	add    DWORD PTR [rax],eax
 10108af:	add    BYTE PTR [rcx],bl
 10108b1:	(bad)  
 10108b2:	add    eax,0x35340d00
 10108b7:	add    BYTE PTR [rip+0x6003201],cl        # 0x7013abe
 10108bd:	jo     0x10108bf
 10108bf:	add    BYTE PTR [rax-0x7fffffaf],cl
 10108c5:	add    DWORD PTR [rax],eax
 10108c7:	add    BYTE PTR [rcx],dl
 10108c9:	and    BYTE PTR [rdi],al
 10108cb:	add    BYTE PTR [rax],ah
 10108cd:	je     0x10108f8
 10108cf:	add    BYTE PTR [rsp+rsi*1],bl
 10108d2:	sub    BYTE PTR [rax],al
 10108d4:	smsw   WORD PTR [rsi]
 10108d7:	add    BYTE PTR [rax+rdx*2],al
 10108da:	add    BYTE PTR [rax],al
 10108dc:	cld    
 10108dd:	rex.WXB add BYTE PTR [r8],al
 10108e0:	enter  0x29,0x0
 10108e4:	(bad)  
 10108e5:	(bad)  
 10108e6:	(bad)  
 10108e7:	inc    DWORD PTR [rax+0xf2]
 10108ed:	add    BYTE PTR [rax],al
 10108ef:	add    BYTE PTR [rax-0xffff0e],dl
 10108f5:	(bad)  
 10108f6:	(bad)  
 10108f7:	jmp    QWORD PTR [rax+0x20000f2]
 10108fd:	add    BYTE PTR [rax],al
 10108ff:	add    BYTE PTR [rax+0x30000f2],dh
 1010905:	add    BYTE PTR [rax],al
 1010907:	add    al,al
 1010909:	repnz add BYTE PTR [rax],al
 101090c:	add    al,0x0
 101090e:	add    BYTE PTR [rax],al
 1010910:	shl    dl,1
 1010912:	add    BYTE PTR [rax],al
 1010914:	(bad)  
 1010915:	(bad)  
 1010916:	(bad)  
 1010917:	jmp    rax
 1010919:	repnz add BYTE PTR [rax],al
 101091c:	shl    BYTE PTR [rdx-0x10000],0xff
 1010923:	(bad)  
 1010924:	out    dx,eax
 1010925:	movabs ds:0xa30a000000000000,al
 101092e:	add    BYTE PTR [rax],al
 1010930:	add    DWORD PTR [rax],eax
 1010932:	add    BYTE PTR [rax],al
 1010934:	rex.B movabs ds:0xa34f000000000000,eax
 101093e:	add    BYTE PTR [rax],al
 1010940:	add    DWORD PTR [rax],eax
 1010942:	add    BYTE PTR [rax],al
 1010944:	mov    eax,0xa3
 1010949:	add    BYTE PTR [rax],al
 101094b:	add    BYTE PTR [rcx],bh
 101094d:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101094e:	add    BYTE PTR [rax],al
 1010950:	add    eax,0x43000000
 1010955:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1010956:	add    BYTE PTR [rax],al
 1010958:	add    al,0x0
 101095a:	add    BYTE PTR [rax],al
 101095c:	rex.WRB movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101095e:	add    BYTE PTR [rax],al
 1010960:	add    eax,DWORD PTR [rax]
 1010962:	add    BYTE PTR [rax],al
 1010964:	push   rdi
 1010965:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1010966:	add    BYTE PTR [rax],al
 1010968:	add    al,BYTE PTR [rax]
 101096a:	add    BYTE PTR [rax],al
 101096c:	(bad)  
 101096d:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101096e:	add    BYTE PTR [rax],al
 1010970:	(bad)  
 1010971:	add    BYTE PTR [rax],al
 1010973:	add    BYTE PTR [rbp-0x5c],bh
 1010976:	add    BYTE PTR [rax],al
 1010978:	(bad)  
 1010979:	(bad)  
 101097a:	(bad)  
 101097b:	inc    DWORD PTR [rcx]
 101097d:	add    al,0x1
 101097f:	add    BYTE PTR [rdx+rax*4],al
 1010982:	add    BYTE PTR [rax],al
 1010984:	add    DWORD PTR [rcx+rax*1],eax
 1010987:	add    BYTE PTR [rdx+rax*4],al
 101098a:	add    BYTE PTR [rax],al
 101098c:	sbb    DWORD PTR [rax+rcx*1],esp
 101098f:	add    BYTE PTR [rdx],dl
 1010991:	add    DWORD PTR [rip+0x9f00b00],edx        # 0xaf11497
 1010997:	loopne 0x10109a0
 1010999:	rol    BYTE PTR [rip+0x26003c0],1        # 0x3610d5f
 101099f:	xor    BYTE PTR [rax-0x7fffffaf],cl
 10109a5:	add    BYTE PTR [rax],al
 10109a7:	add    BYTE PTR [rcx],ah
 10109a9:	or     BYTE PTR [rdx],al
 10109ab:	add    BYTE PTR [rax],cl
 10109ad:	push   rsp
 10109ae:	adc    al,0x0
 10109b0:	push   rax
 10109b1:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10109b2:	add    BYTE PTR [rax],al
 10109b4:	mov    ecx,0x8c0000a5
 10109b9:	or     DWORD PTR [rcx],eax
 10109bb:	add    BYTE PTR [rcx],ah
 10109bd:	or     BYTE PTR [rdx],al
 10109bf:	add    BYTE PTR [rax],cl
 10109c1:	je     0x10109d6
 10109c3:	add    BYTE PTR [rcx+0x3b0000a5],bh
 10109c9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10109ca:	add    BYTE PTR [rax],al
 10109cc:	test   al,0x9
 10109ce:	add    DWORD PTR [rax],eax
 10109d0:	and    DWORD PTR [rax],eax
 10109d2:	add    BYTE PTR [rax],al
 10109d4:	mov    ecx,0x3b0000a5
 10109d9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10109da:	add    BYTE PTR [rax],al
 10109dc:	test   al,0x9
 10109de:	add    DWORD PTR [rax],eax
 10109e0:	and    DWORD PTR [rax],eax
 10109e2:	add    BYTE PTR [rax],al
 10109e4:	push   rax
 10109e5:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10109e6:	add    BYTE PTR [rax],al
 10109e8:	mov    ecx,0x8c0000a5
 10109ed:	or     DWORD PTR [rcx],eax
 10109ef:	add    BYTE PTR [rcx],al
 10109f1:	clts   
 10109f3:	add    BYTE PTR [rdi],cl
 10109f5:	fs (bad) 
 10109f7:	add    BYTE PTR [rdi],cl
 10109f9:	xor    al,0x6
 10109fb:	add    BYTE PTR [rdi],cl
 10109fd:	xor    cl,BYTE PTR [rbx]
 10109ff:	jo     0x1010a02
 1010a01:	or     al,0x4
 1010a03:	add    BYTE PTR [rdx+rsi*2],cl
 1010a06:	or     BYTE PTR [rax+0x7],dh
 1010a09:	(bad)  
 1010a0a:	(bad)  
 1010a0b:	xor    BYTE PTR [rcx],al
 1010a0d:	adc    eax,DWORD PTR [rcx]
 1010a0f:	add    BYTE PTR [rbx],dl
 1010a11:	(bad)  
 1010a12:	add    BYTE PTR [rax],al
 1010a14:	add    DWORD PTR [rip+0x74050002],eax        # 0x75060a1c
 1010a1a:	add    DWORD PTR [rax],eax
 1010a1c:	adc    DWORD PTR [rcx],esi
 1010a1e:	or     eax,DWORD PTR [rax]
 1010a20:	xor    DWORD PTR [rcx+rsi*1],esi
 1010a23:	add    BYTE PTR [rip+0x1a002801],ah        # 0x1b01322a
 1010a29:	lock sbb al,ah
 1010a2c:	(bad)  
 1010a2d:	rcl    BYTE PTR [rax+rax*8],1
 1010a30:	adc    dh,BYTE PTR [rax+0x11]
 1010a33:	(bad)  
 1010a34:	adc    BYTE PTR [rax+0x0],dl
 1010a37:	add    ah,bh
 1010a39:	rex.WXB add BYTE PTR [r8],al
 1010a3c:	lock sub DWORD PTR [rax],eax
 1010a3f:	add    bh,bh
 1010a41:	(bad)  
 1010a42:	(bad)  
 1010a43:	call   rax
 1010a45:	out    dx,eax
 1010a46:	add    BYTE PTR [rax],al
 1010a48:	add    BYTE PTR [rax],al
 1010a4a:	add    BYTE PTR [rax],al
 1010a4c:	loopne 0x1010a3d
 1010a4e:	add    BYTE PTR [rax],al
 1010a50:	add    DWORD PTR [rax],eax
 1010a52:	add    BYTE PTR [rax],al
 1010a54:	lock out dx,eax
 1010a56:	add    BYTE PTR [rax],al
 1010a58:	add    al,BYTE PTR [rax]
 1010a5a:	add    BYTE PTR [rax],al
 1010a5c:	add    al,dh
 1010a5e:	add    BYTE PTR [rax],al
 1010a60:	add    eax,DWORD PTR [rax]
 1010a62:	add    BYTE PTR [rax],al
 1010a64:	adc    al,dh
 1010a66:	add    BYTE PTR [rax],al
 1010a68:	add    al,0x0
 1010a6a:	add    BYTE PTR [rax],al
 1010a6c:	and    al,dh
 1010a6e:	add    BYTE PTR [rax],al
 1010a70:	add    eax,0x30000000
 1010a75:	lock add BYTE PTR [rax],al
 1010a78:	add    eax,0x40000000
 1010a7d:	lock add BYTE PTR [rax],al
 1010a80:	(bad)  
 1010a81:	add    BYTE PTR [rax],al
 1010a83:	add    BYTE PTR [rax-0x10],dl
 1010a86:	add    BYTE PTR [rax],al
 1010a88:	or     BYTE PTR [rax],al
 1010a8a:	add    BYTE PTR [rax],al
 1010a8c:	(bad)  
 1010a8d:	lock add BYTE PTR [rax],al
 1010a90:	or     DWORD PTR [rax],eax
 1010a92:	add    BYTE PTR [rax],al
 1010a94:	jo     0x1010a86
 1010a96:	add    BYTE PTR [rax],al
 1010a98:	add    eax,0x80000000
 1010a9d:	lock add BYTE PTR [rax],al
 1010aa0:	add    BYTE PTR [rbp-0x10000],ch
 1010aa6:	(bad)  
 1010aa7:	dec    DWORD PTR [rbp-0x53]
 1010aaa:	add    BYTE PTR [rax],al
 1010aac:	add    BYTE PTR [rax],al
 1010aae:	add    BYTE PTR [rax],al
 1010ab0:	push   rbp
 1010ab1:	lods   eax,DWORD PTR ds:[rsi]
 1010ab2:	add    BYTE PTR [rax],al
 1010ab4:	add    DWORD PTR [rax],eax
 1010ab6:	add    BYTE PTR [rax],al
 1010ab8:	lods   eax,DWORD PTR fs:[rsi]
 1010aba:	add    BYTE PTR [rax],al
 1010abc:	add    al,BYTE PTR [rax]
 1010abe:	add    BYTE PTR [rax],al
 1010ac0:	push   0x30000ad
 1010ac5:	add    BYTE PTR [rax],al
 1010ac7:	add    BYTE PTR [rsi-0x53],dh
 1010aca:	add    BYTE PTR [rax],al
 1010acc:	add    al,0x0
 1010ace:	add    BYTE PTR [rax],al
 1010ad0:	xchg   esi,eax
 1010ad1:	lods   eax,DWORD PTR ds:[rsi]
 1010ad2:	add    BYTE PTR [rax],al
 1010ad4:	add    eax,0xa9000000
 1010ad9:	lods   eax,DWORD PTR ds:[rsi]
 1010ada:	add    BYTE PTR [rax],al
 1010adc:	(bad)  
 1010add:	add    BYTE PTR [rax],al
 1010adf:	add    BYTE PTR [rbx+0xa0000b0],bl
 1010ae5:	add    BYTE PTR [rax],al
 1010ae7:	add    BYTE PTR [rbp+0x90000b0],ah
 1010aed:	add    BYTE PTR [rax],al
 1010aef:	add    BYTE PTR [rdi+0x80000b0],ch
 1010af5:	add    BYTE PTR [rax],al
 1010af7:	add    BYTE PTR [rcx+0x70000b0],bh
 1010afd:	add    BYTE PTR [rax],al
 1010aff:	add    bl,al
 1010b01:	mov    al,0x0
 1010b03:	add    BYTE PTR [rbx],cl
 1010b05:	add    BYTE PTR [rax],al
 1010b07:	add    bh,bl
 1010b09:	mov    al,0x0
 1010b0b:	add    BYTE PTR [rip+0xfffffffff7000000],al        # 0xfffffffff8010b11
 1010b11:	mov    al,0x0
 1010b13:	add    BYTE PTR [rsi],al
 1010b15:	add    BYTE PTR [rax],al
 1010b17:	add    cl,cl
 1010b19:	mov    cl,0x0
 1010b1b:	add    BYTE PTR [rip+0xfffffffff1000000],al        # 0xfffffffff2010b21
 1010b21:	mov    dl,0x0
 1010b23:	add    BYTE PTR [rax+rax*1],al
 1010b26:	add    BYTE PTR [rax],al
 1010b28:	cli    
 1010b29:	mov    dl,0x0
 1010b2b:	add    bh,bh
 1010b2d:	(bad)  
 1010b2e:	(bad)  
 1010b2f:	inc    DWORD PTR [rcx]
 1010b31:	or     al,BYTE PTR [rax+rax*1]
 1010b34:	or     dh,BYTE PTR [rsi+rax*1]
 1010b37:	add    BYTE PTR [rdx],cl
 1010b39:	xor    al,BYTE PTR [rsi]
 1010b3b:	(bad)  
 1010b3c:	add    DWORD PTR [rdx],ecx
 1010b3e:	add    al,0x0
 1010b40:	or     ah,BYTE PTR [rsi+rax*1+0x0]
 1010b44:	or     dh,BYTE PTR [rdx]
 1010b46:	(bad)  
 1010b47:	jo     0x1010b4a
 1010b49:	(bad)  
 1010b4a:	or     al,0x0
 1010b4c:	(bad)  
 1010b4d:	je     0x1010b5a
 1010b4f:	add    BYTE PTR [rsi],bl
 1010b51:	or     al,BYTE PTR fs:[rax]
 1010b54:	(bad)  
 1010b55:	push   rsp
 1010b56:	or     DWORD PTR [rax],eax
 1010b58:	(bad)  
 1010b59:	xor    al,0x8
 1010b5b:	add    BYTE PTR [rsi],bl
 1010b5d:	xor    bl,BYTE PTR [rdx]
 1010b5f:	lock sbb al,ah
 1010b62:	(bad)  
 1010b63:	rol    BYTE PTR [rcx],0xf
 1010b66:	(bad)  
 1010b67:	add    BYTE PTR [rdi],cl
 1010b69:	or     BYTE PTR fs:[rax],al
 1010b6c:	andps  xmm0,XMMWORD PTR [rdi]
 1010b6f:	add    BYTE PTR [rdi],cl
 1010b71:	xor    cl,BYTE PTR [rbx]
 1010b73:	jo     0x1010b96
 1010b75:	add    eax,0x34050002
 1010b7a:	(bad)  
 1010b7b:	add    al,dl
 1010b7d:	mov    ch,0x0
 1010b7f:	add    BYTE PTR [rsi],al
 1010b81:	mov    dh,0x0
 1010b83:	add    BYTE PTR [rbx+rcx*1+0x1],ah
 1010b87:	add    BYTE PTR [rcx],ah
 1010b89:	add    BYTE PTR [rdx],al
 1010b8b:	add    BYTE PTR [rax],al
 1010b8d:	xor    al,0x6
 1010b8f:	add    al,dl
 1010b91:	mov    ch,0x0
 1010b93:	add    BYTE PTR [rsi],al
 1010b95:	mov    dh,0x0
 1010b97:	add    BYTE PTR [rbx+rcx*1+0x1],ah
 1010b9b:	add    BYTE PTR [rcx],al
 1010b9d:	adc    eax,0x74150008
 1010ba2:	or     BYTE PTR [rax],al
 1010ba4:	adc    eax,0x15000764
 1010ba9:	xor    al,0x6
 1010bab:	add    BYTE PTR [rip+0x1e01132],dl        # 0x2e11ce3
 1010bb1:	add    al,0x1
 1010bb3:	add    BYTE PTR [rdx+rax*1],al
 1010bb6:	add    BYTE PTR [rax],al
 1010bb8:	and    DWORD PTR [rdx+rax*1],eax
 1010bbb:	add    BYTE PTR [rsp+rsi*1],al
 1010bbe:	add    BYTE PTR [rax],al
 1010bc0:	shl    BYTE PTR [rdi-0x481e0000],1
 1010bc6:	add    BYTE PTR [rax],al
 1010bc8:	mov    al,0xb
 1010bca:	add    DWORD PTR [rax],eax
 1010bcc:	and    DWORD PTR [rax],eax
 1010bce:	add    al,BYTE PTR [rax]
 1010bd0:	add    BYTE PTR [rax+rax*1],dh
 1010bd3:	add    al,dl
 1010bd5:	mov    bh,0x0
 1010bd7:	add    dl,ah
 1010bd9:	mov    bh,0x0
 1010bdb:	add    BYTE PTR [rax+0x2100010b],dh
 1010be1:	add    BYTE PTR [rax],al
 1010be3:	add    al,dl
 1010be5:	mov    bh,0x0
 1010be7:	add    dl,ah
 1010be9:	mov    bh,0x0
 1010beb:	add    BYTE PTR [rax+0x100010b],dh
 1010bf1:	(bad)  
 1010bf2:	add    al,BYTE PTR [rax]
 1010bf4:	(bad)  
 1010bf5:	xor    al,BYTE PTR [rdx]
 1010bf7:	xor    BYTE PTR [rcx],bl
 1010bf9:	or     BYTE PTR cs:[rax],al
 1010bfc:	(bad)  
 1010bfd:	fs adc eax,0x14541b00
 1010c03:	add    BYTE PTR [rdi],dl
 1010c05:	xor    al,0x12
 1010c07:	add    BYTE PTR [rbx],cl
 1010c09:	repnz add al,0x70
 1010c0c:	or     BYTE PTR [rax+rax*1+0x0],cl
 1010c10:	sbb    BYTE PTR [rdx],ch
 1010c12:	add    BYTE PTR [rax],al
 1010c14:	jp     0x1010c16
 1010c16:	add    BYTE PTR [rax],al
 1010c18:	(bad)  
 1010c19:	(bad)  
 1010c1a:	(bad)  
 1010c1b:	push   rax
 1010c1d:	icebp  
 1010c1e:	add    BYTE PTR [rax],al
 1010c20:	mov    al,0xb8
 1010c22:	add    BYTE PTR [rax],al
 1010c24:	(bad)  
 1010c25:	(bad)  
 1010c26:	(bad)  
 1010c27:	inc    DWORD PTR [rbp-0x47]
 1010c2a:	add    BYTE PTR [rax],al
 1010c2c:	add    BYTE PTR [rax],al
 1010c2e:	add    BYTE PTR [rax],al
 1010c30:	mov    ebp,0xff0000b9
 1010c35:	(bad)  
 1010c36:	(bad)  
 1010c37:	inc    DWORD PTR [rcx]
 1010c39:	add    al,0x1
 1010c3b:	add    BYTE PTR [rdx+rax*2],al
 1010c3e:	add    BYTE PTR [rax],al
 1010c40:	sbb    DWORD PTR [rip+0x11c000a],esi        # 0x21d0c50
 1010c46:	adc    eax,DWORD PTR [rcx]
 1010c48:	or     eax,0x9e00bf0
 1010c4d:	rol    BYTE PTR [rdi],1
 1010c4f:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x46110c6
 1010c56:	add    dl,BYTE PTR [rax+0x8]
 1010c59:	rex.WR add BYTE PTR [rax],r8b
 1010c5c:	sub    al,BYTE PTR [rax]
 1010c5f:	add    BYTE PTR [rdx-0xfffff8],al
 1010c65:	(bad)  
 1010c66:	(bad)  
 1010c67:	inc    DWORD PTR [rax]
 1010c69:	out    dx,eax
 1010c6a:	add    BYTE PTR [rax],al
 1010c6c:	add    BYTE PTR [rax],al
 1010c6e:	add    BYTE PTR [rax],al
 1010c70:	adc    bh,ch
 1010c72:	add    BYTE PTR [rax],al
 1010c74:	add    DWORD PTR [rax],eax
 1010c76:	add    BYTE PTR [rax],al
 1010c78:	and    bh,ch
 1010c7a:	add    BYTE PTR [rax],al
 1010c7c:	add    al,BYTE PTR [rax]
 1010c7e:	add    BYTE PTR [rax],al
 1010c80:	xor    bh,ch
 1010c82:	add    BYTE PTR [rax],al
 1010c84:	add    eax,DWORD PTR [rax]
 1010c86:	add    BYTE PTR [rax],al
 1010c88:	rex out dx,eax
 1010c8a:	add    BYTE PTR [rax],al
 1010c8c:	add    al,0x0
 1010c8e:	add    BYTE PTR [rax],al
 1010c90:	push   rax
 1010c91:	out    dx,eax
 1010c92:	add    BYTE PTR [rax],al
 1010c94:	add    eax,0x60000000
 1010c99:	out    dx,eax
 1010c9a:	add    BYTE PTR [rax],al
 1010c9c:	(bad)  
 1010c9d:	add    BYTE PTR [rax],al
 1010c9f:	add    BYTE PTR [rax-0x11],dh
 1010ca2:	add    BYTE PTR [rax],al
 1010ca4:	(bad)  
 1010ca5:	add    BYTE PTR [rax],al
 1010ca7:	add    BYTE PTR [rax+0x80000ef],dl
 1010cad:	add    BYTE PTR [rax],al
 1010caf:	add    BYTE PTR [rax+0x200000ef],dh
 1010cb5:	mov    edx,0xffff0000
 1010cba:	(bad)  
 1010cbb:	(bad)  
 1010cbc:	jp     0x1010c78
 1010cbe:	add    BYTE PTR [rax],al
 1010cc0:	add    BYTE PTR [rax],al
 1010cc2:	add    BYTE PTR [rax],al
 1010cc4:	(bad)  
 1010cc5:	mov    edx,0x10000
 1010cca:	add    BYTE PTR [rax],al
 1010ccc:	xchg   ecx,eax
 1010ccd:	mov    edx,0x20000
 1010cd2:	add    BYTE PTR [rax],al
 1010cd4:	popf   
 1010cd5:	mov    edx,0x30000
 1010cda:	add    BYTE PTR [rax],al
 1010cdc:	test   eax,0x40000ba
 1010ce1:	add    BYTE PTR [rax],al
 1010ce3:	add    BYTE PTR [rbp+0x50000ba],dh
 1010ce9:	add    BYTE PTR [rax],al
 1010ceb:	add    bh,al
 1010ced:	mov    edx,0x60000
 1010cf2:	add    BYTE PTR [rax],al
 1010cf4:	fdivr  QWORD PTR [rdx+0x70000]
 1010cfa:	add    BYTE PTR [rax],al
 1010cfc:	(bad)  
 1010cfd:	mov    ebx,0x80000
 1010d02:	add    BYTE PTR [rax],al
 1010d04:	rex mov esp,0x90000
 1010d0a:	add    BYTE PTR [rax],al
 1010d0c:	or     eax,ecx
 1010d0e:	add    BYTE PTR [rax],al
 1010d10:	or     BYTE PTR [rax],al
 1010d12:	add    BYTE PTR [rax],al
 1010d14:	adc    eax,0xff0000c1
 1010d19:	(bad)  
 1010d1a:	(bad)  
 1010d1b:	call   FWORD PTR [rip+0x90000c1]        # 0xa010de2
 1010d21:	add    BYTE PTR [rax],al
 1010d23:	add    BYTE PTR [rsi-0xffff3e],dl
 1010d29:	(bad)  
 1010d2a:	(bad)  
 1010d2b:	inc    DWORD PTR [rcx]
 1010d2d:	or     al,BYTE PTR [rax+rax*1]
 1010d30:	or     dh,BYTE PTR [rsi+rax*1]
 1010d33:	add    BYTE PTR [rdx],cl
 1010d35:	xor    al,BYTE PTR [rsi]
 1010d37:	(bad)  
 1010d38:	add    DWORD PTR [rax],ecx
 1010d3a:	add    eax,DWORD PTR [rax]
 1010d3c:	or     BYTE PTR [rdx+0x4],ah
 1010d3f:	loopne 0x1010d43
 1010d41:	jo     0x1010d43
 1010d43:	add    BYTE PTR [rcx],ah
 1010d45:	add    eax,0x54050002
 1010d4a:	or     eax,DWORD PTR [rax]
 1010d4c:	nop
 1010d4d:	ret    
 1010d4e:	add    BYTE PTR [rax],al
 1010d50:	cwde   
 1010d51:	ret    
 1010d52:	add    BYTE PTR [rax],al
 1010d54:	cmp    BYTE PTR [rip+0x5210001],cl        # 0x6220d5b
 1010d5a:	add    al,BYTE PTR [rax]
 1010d5c:	add    eax,0x98000c64
 1010d61:	ret    
 1010d62:	add    BYTE PTR [rax],al
 1010d64:	popf   
 1010d65:	ret    
 1010d66:	add    BYTE PTR [rax],al
 1010d68:	rex.R or eax,0xa210001
 1010d6e:	add    al,0x0
 1010d70:	or     dh,ah
 1010d72:	(bad)  
 1010d73:	add    BYTE PTR [rip+0xffffffff9d000a34],al        # 0xffffffff9e0117ad
 1010d79:	ret    
 1010d7a:	add    BYTE PTR [rax],al
 1010d7c:	fadd   st(3),st
 1010d7e:	add    BYTE PTR [rax],al
 1010d80:	pop    rax
 1010d81:	or     eax,0x210001
 1010d86:	add    BYTE PTR [rax],al
 1010d88:	popf   
 1010d89:	ret    
 1010d8a:	add    BYTE PTR [rax],al
 1010d8c:	fadd   st(3),st
 1010d8e:	add    BYTE PTR [rax],al
 1010d90:	pop    rax
 1010d91:	or     eax,0x210001
 1010d96:	add    BYTE PTR [rax],al
 1010d98:	cwde   
 1010d99:	ret    
 1010d9a:	add    BYTE PTR [rax],al
 1010d9c:	popf   
 1010d9d:	ret    
 1010d9e:	add    BYTE PTR [rax],al
 1010da0:	rex.R or eax,0x210001
 1010da6:	add    BYTE PTR [rax],al
 1010da8:	nop
 1010da9:	ret    
 1010daa:	add    BYTE PTR [rax],al
 1010dac:	cwde   
 1010dad:	ret    
 1010dae:	add    BYTE PTR [rax],al
 1010db0:	cmp    BYTE PTR [rip+0x1a010001],cl        # 0x1b020db7
 1010db6:	or     al,BYTE PTR [rax]
 1010db8:	sbb    dh,BYTE PTR [rcx+rcx*1+0x0]
 1010dbc:	sbb    ah,BYTE PTR [rax+rcx*1+0x0]
 1010dc0:	sbb    dl,BYTE PTR [rdi+rax*1+0x0]
 1010dc4:	sbb    dh,BYTE PTR [rsi+rax*1]
 1010dc7:	add    BYTE PTR [rdx],bl
 1010dc9:	xor    dl,BYTE PTR [rsi]
 1010dcb:	loopne 0x1010dce
 1010dcd:	(bad)  
 1010dce:	add    al,BYTE PTR [rax]
 1010dd0:	(bad)  
 1010dd1:	rol    BYTE PTR [rdx],cl
 1010dd3:	xor    BYTE PTR [rcx],bl
 1010dd5:	cmp    BYTE PTR [rcx],cl
 1010dd7:	add    BYTE PTR [rdi],ah
 1010dd9:	xor    al,0x3c
 1010ddb:	add    BYTE PTR [rdi],dl
 1010ddd:	add    DWORD PTR [rax+rax*1],esi
 1010de0:	or     al,dh
 1010de2:	(bad)  
 1010de3:	loopne 0x1010de9
 1010de5:	jo     0x1010dea
 1010de7:	(bad)  
 1010de8:	add    dl,BYTE PTR [rax+0x0]
 1010deb:	add    BYTE PTR [rax],cl
 1010ded:	rex.WR add BYTE PTR [rax],r8b
 1010df0:	push   0xffffffff9200002a
 1010df5:	add    DWORD PTR [rax],eax
 1010df7:	add    bh,bh
 1010df9:	(bad)  
 1010dfa:	(bad)  
 1010dfb:	call   QWORD PTR [rax]
 1010dfd:	repnz add BYTE PTR [rax],al
 1010e00:	(bad)  
 1010e01:	(bad)  
 1010e02:	(bad)  
 1010e03:	jmp    QWORD PTR [rax]
 1010e05:	repnz add BYTE PTR [rax],al
 1010e08:	add    DWORD PTR [rax],eax
 1010e0a:	add    BYTE PTR [rax],al
 1010e0c:	xor    dl,dh
 1010e0e:	add    BYTE PTR [rax],al
 1010e10:	add    al,BYTE PTR [rax]
 1010e12:	add    BYTE PTR [rax],al
 1010e14:	rex
 1010e15:	repnz add BYTE PTR [rax],al
 1010e18:	add    eax,DWORD PTR [rax]
 1010e1a:	add    BYTE PTR [rax],al
 1010e1c:	push   rax
 1010e1d:	repnz add BYTE PTR [rax],al
 1010e20:	(bad)  
 1010e21:	(bad)  
 1010e22:	(bad)  
 1010e23:	jmp    QWORD PTR [rax-0xe]
 1010e26:	add    BYTE PTR [rax],al
 1010e28:	nop
 1010e29:	mov    BYTE PTR [rax],0x0
 1010e2c:	(bad)  
 1010e2d:	(bad)  
 1010e2e:	(bad)  
 1010e2f:	call   FWORD PTR [rdi]
 1010e31:	enter  0x0,0x0
 1010e35:	add    BYTE PTR [rax],al
 1010e37:	add    bl,bl
 1010e39:	enter  0x0,0x4
 1010e3d:	add    BYTE PTR [rax],al
 1010e3f:	add    ch,ah
 1010e41:	enter  0x0,0x3
 1010e45:	add    BYTE PTR [rax],al
 1010e47:	add    bh,ch
 1010e49:	enter  0x0,0x2
 1010e4d:	add    BYTE PTR [rax],al
 1010e4f:	add    cl,bh
 1010e51:	enter  0x0,0x1
 1010e55:	add    BYTE PTR [rax],al
 1010e57:	add    BYTE PTR [rbx],al
 1010e59:	leave  
 1010e5a:	add    BYTE PTR [rax],al
 1010e5c:	add    eax,0x1f000000
 1010e61:	leave  
 1010e62:	add    BYTE PTR [rax],al
 1010e64:	(bad)  
 1010e65:	(bad)  
 1010e66:	(bad)  
 1010e67:	call   QWORD PTR [rcx]
 1010e69:	sbb    DWORD PTR [rsi],eax
 1010e6b:	add    BYTE PTR [rcx],bl
 1010e6d:	or     eax,DWORD PTR fs:[rax]
 1010e70:	adc    al,0x34
 1010e72:	or     al,BYTE PTR [rax]
 1010e74:	(bad)  
 1010e75:	jb     0x1010e79
 1010e77:	jo     0x1010e75
 1010e79:	rex.WXB add BYTE PTR [r8],al
 1010e7c:	nop
 1010e7d:	sub    al,BYTE PTR [rax]
 1010e7f:	add    bh,bh
 1010e81:	(bad)  
 1010e82:	(bad)  
 1010e83:	inc    DWORD PTR [rax]
 1010e85:	repz add BYTE PTR [rax],al
 1010e88:	(bad)  
 1010e89:	leave  
 1010e8a:	add    BYTE PTR [rax],al
 1010e8c:	(bad)  
 1010e8d:	(bad)  
 1010e8e:	(bad)  
 1010e8f:	(bad)  
 1010e90:	(bad)  
 1010e92:	add    BYTE PTR [rax],al
 1010e94:	add    BYTE PTR [rax],al
 1010e96:	add    BYTE PTR [rax],al
 1010e98:	in     eax,dx
 1010e99:	leave  
 1010e9a:	add    BYTE PTR [rax],al
 1010e9c:	(bad)  
 1010e9d:	(bad)  
 1010e9e:	(bad)  
 1010e9f:	call   FWORD PTR [rcx]
 1010ea1:	sbb    DWORD PTR [rdx],eax
 1010ea3:	add    BYTE PTR [rdi],al
 1010ea5:	add    DWORD PTR [rbx],ebx
 1010ea7:	add    BYTE PTR [rax-0x3fffffaf],cl
 1010ead:	add    BYTE PTR [rax],al
 1010eaf:	add    BYTE PTR [rcx],dl
 1010eb1:	or     eax,0x62040001
 1010eb6:	add    BYTE PTR [rax],al
 1010eb8:	cld    
 1010eb9:	rex.WXB add BYTE PTR [r8],al
 1010ebc:	mov    eax,0xff00002a
 1010ec1:	(bad)  
 1010ec2:	(bad)  
 1010ec3:	call   rax
 1010ec5:	icebp  
 1010ec6:	add    BYTE PTR [rax],al
 1010ec8:	movabs al,ds:0xadffffffff0000f6
 1010ed1:	test   BYTE PTR [rax],0x0
 1010ed4:	add    BYTE PTR [rax],al
 1010ed6:	add    BYTE PTR [rax],al
 1010ed8:	mov    esp,0xff0000f6
 1010edd:	(bad)  
 1010ede:	(bad)  
 1010edf:	inc    DWORD PTR [rcx]
 1010ee1:	or     al,BYTE PTR [rax+rax*1]
 1010ee4:	or     dh,BYTE PTR [rsi+rax*1]
 1010ee7:	add    BYTE PTR [rdx],cl
 1010ee9:	xor    al,BYTE PTR [rsi]
 1010eeb:	jo     0x1010eee
 1010eed:	add    al,0x1
 1010eef:	add    BYTE PTR [rdx+rax*2],al
 1010ef2:	add    BYTE PTR [rax],al
 1010ef4:	add    DWORD PTR [rcx+0x74910008],edx
 1010efa:	adc    BYTE PTR [rax],al
 1010efc:	andps  xmm2,XMMWORD PTR [rdx]
 1010eff:	add    BYTE PTR [rdi],cl
 1010f01:	xor    al,0x11
 1010f03:	add    BYTE PTR [rdi],cl
 1010f05:	ror    BYTE PTR [rbx],cl
 1010f07:	(bad)  
 1010f08:	add    DWORD PTR [rcx+rax*1],eax
 1010f0b:	add    BYTE PTR [rdx+rax*2],al
 1010f0e:	add    BYTE PTR [rax],al
 1010f10:	add    DWORD PTR [rip+0x74150008],edx        # 0x75160f1e
 1010f16:	(bad)  
 1010f17:	add    BYTE PTR [rip+0x15000d64],dl        # 0x16011c81
 1010f1d:	push   rsp
 1010f1e:	or     al,0x0
 1010f20:	adc    eax,0x11e01192
 1010f25:	sub    ecx,DWORD PTR [rip+0x19c42b00]        # 0x1ac53a2b
 1010f2b:	add    BYTE PTR [rdi],ah
 1010f2d:	je     0x1010f47
 1010f2f:	add    BYTE PTR [rbx],ah
 1010f31:	fs (bad) 
 1010f33:	add    BYTE PTR [rdi],bl
 1010f35:	xor    al,0x16
 1010f37:	add    BYTE PTR [rbx],dl
 1010f39:	add    DWORD PTR [rdx],edx
 1010f3b:	add    BYTE PTR [rax],cl
 1010f3d:	lock (bad) 
 1010f3f:	loopne 0x1010f45
 1010f41:	push   rax
 1010f42:	add    BYTE PTR [rax],al
 1010f44:	cld    
 1010f45:	rex.WXB add BYTE PTR [r8],al
 1010f48:	fdiv   DWORD PTR [rdx]
 1010f4a:	add    BYTE PTR [rax],al
 1010f4c:	(bad)  
 1010f4d:	(bad)  
 1010f4e:	(bad)  
 1010f4f:	call   rax
 1010f51:	repz add BYTE PTR [rax],al
 1010f54:	and    dh,cl
 1010f56:	add    BYTE PTR [rax],al
 1010f58:	(bad)  
 1010f59:	(bad)  
 1010f5a:	(bad)  
 1010f5b:	call   FWORD PTR [rbp-0x32]
 1010f5e:	add    BYTE PTR [rax],al
 1010f60:	add    BYTE PTR [rax],al
 1010f62:	add    BYTE PTR [rax],al
 1010f64:	push   0xffffffffffffffd1
 1010f66:	add    BYTE PTR [rax],al
 1010f68:	(bad)  
 1010f69:	(bad)  
 1010f6a:	(bad)  
 1010f6b:	inc    DWORD PTR [rcx]
 1010f6d:	add    al,0x1
 1010f6f:	add    BYTE PTR [rdx+rax*2],al
 1010f72:	add    BYTE PTR [rax],al
 1010f74:	adc    DWORD PTR [rdi],ebx
 1010f76:	or     BYTE PTR [rax],al
 1010f78:	(bad)  
 1010f79:	fs adc eax,0x13541b00
 1010f7f:	add    BYTE PTR [rdi],dl
 1010f81:	xor    al,0x12
 1010f83:	add    BYTE PTR [rbx],cl
 1010f85:	repnz add al,0x70
 1010f88:	cld    
 1010f89:	rex.WXB add BYTE PTR [r8],al
 1010f8c:	(bad)  
 1010f8d:	xor    eax,DWORD PTR [rax]
 1010f8f:	add    bh,bh
 1010f91:	(bad)  
 1010f92:	(bad)  
 1010f93:	push   rax
 1010f95:	repz add BYTE PTR [rax],al
 1010f98:	rcl    cl,0x0
 1010f9b:	add    bh,bh
 1010f9d:	(bad)  
 1010f9e:	(bad)  
 1010f9f:	push   QWORD PTR [rdx-0x2e]
 1010fa2:	add    BYTE PTR [rax],al
 1010fa4:	add    BYTE PTR [rax],al
 1010fa6:	add    BYTE PTR [rax],al
 1010fa8:	add    edx,ebx
 1010faa:	add    BYTE PTR [rax],al
 1010fac:	(bad)  
 1010fad:	(bad)  
 1010fae:	(bad)  
 1010faf:	call   QWORD PTR [rcx]
 1010fb1:	(bad)  
 1010fb2:	or     BYTE PTR [rax],al
 1010fb4:	(bad)  
 1010fb5:	je     0x1010fc2
 1010fb7:	add    BYTE PTR [rcx],bl
 1010fb9:	or     al,BYTE PTR fs:[rax]
 1010fbc:	adc    al,0x34
 1010fbe:	or     DWORD PTR [rax],eax
 1010fc0:	(bad)  
 1010fc1:	push   rdx
 1010fc2:	add    ah,al
 1010fc4:	cld    
 1010fc5:	rex.WXB add BYTE PTR [r8],al
 1010fc8:	mov    BYTE PTR [rbx],dh
 1010fca:	add    BYTE PTR [rax],al
 1010fcc:	(bad)  
 1010fcd:	(bad)  
 1010fce:	(bad)  
 1010fcf:	inc    eax
 1010fd1:	hlt    
 1010fd2:	add    BYTE PTR [rax],al
 1010fd4:	xor    bl,dl
 1010fd6:	add    BYTE PTR [rax],al
 1010fd8:	(bad)  
 1010fd9:	(bad)  
 1010fda:	(bad)  
 1010fdb:	call   FWORD PTR [rbx-0x2d]
 1010fde:	add    BYTE PTR [rax],al
 1010fe0:	add    BYTE PTR [rax],al
 1010fe2:	add    BYTE PTR [rax],al
 1010fe4:	test   bl,dl
 1010fe6:	add    BYTE PTR [rax],al
 1010fe8:	(bad)  
 1010fe9:	(bad)  
 1010fea:	(bad)  
 1010feb:	call   QWORD PTR [rbx+0xd3]
 1010ff1:	add    BYTE PTR [rax],al
 1010ff3:	add    BYTE PTR [rbp-0xffff2d],bh
 1010ff9:	(bad)  
 1010ffa:	(bad)  
 1010ffb:	call   QWORD PTR [rcx]
 1010ffd:	adc    al,0x4
 1010fff:	add    BYTE PTR [rsp+rsi*1],dl
 1011002:	or     DWORD PTR [rax],eax
 1011004:	(bad)  
 1011005:	push   rdx
 1011006:	add    dh,BYTE PTR [rax-0x4]
 1011009:	rex.WXB add BYTE PTR [r8],al
 101100c:	mov    al,0x33
 101100e:	add    BYTE PTR [rax],al
 1011010:	(bad)  
 1011011:	(bad)  
 1011012:	(bad)  
 1011013:	jmp    rax
 1011015:	hlt    
 1011016:	add    BYTE PTR [rax],al
 1011018:	loopne 0x1010fed
 101101a:	add    BYTE PTR [rax],al
 101101c:	(bad)  
 101101d:	(bad)  
 101101e:	(bad)  
 101101f:	inc    DWORD PTR [rcx]
 1011021:	(bad)  
 1011022:	add    BYTE PTR [rax],al
 1011024:	add    BYTE PTR [rax],al
 1011026:	add    BYTE PTR [rax],al
 1011028:	sub    dl,ah
 101102a:	add    BYTE PTR [rax],al
 101102c:	(bad)  
 101102d:	(bad)  
 101102e:	(bad)  
 101102f:	inc    DWORD PTR [rax-0x2c]
 1011032:	add    BYTE PTR [rax],al
 1011034:	add    BYTE PTR [rax],al
 1011036:	add    BYTE PTR [rax],al
 1011038:	push   rsi
 1011039:	(bad)  
 101103a:	add    BYTE PTR [rax],al
 101103c:	(bad)  
 101103d:	(bad)  
 101103e:	(bad)  
 101103f:	call   FWORD PTR [rcx]
 1011041:	or     eax,DWORD PTR ss:[rax]
 1011044:	sub    BYTE PTR [rcx+riz*1],dh
 1011047:	add    BYTE PTR [rax],bl
 1011049:	add    DWORD PTR [rax],ebx
 101104b:	add    BYTE PTR [rax+rsi*8],cl
 101104e:	or     ah,al
 1011050:	or     al,dl
 1011052:	(bad)  
 1011053:	rol    BYTE PTR [rax+rsi*2],0x3
 1011057:	(bad)  
 1011058:	add    dl,BYTE PTR [rax+0x0]
 101105b:	add    BYTE PTR [rax],cl
 101105d:	rex.WR add BYTE PTR [rax],r8b
 1011060:	fdiv   DWORD PTR [rbx]
 1011062:	add    BYTE PTR [rax],al
 1011064:	mov    edx,0xff000000
 1011069:	(bad)  
 101106a:	(bad)  
 101106b:	call   QWORD PTR [rax]
 101106d:	hlt    
 101106e:	add    BYTE PTR [rax],al
 1011070:	jo     0x1011046
 1011072:	add    BYTE PTR [rax],al
 1011074:	(bad)  
 1011075:	(bad)  
 1011076:	(bad)  
 1011077:	push   QWORD PTR [rsi]
 1011079:	(bad)  
 101107a:	add    BYTE PTR [rax],al
 101107c:	add    BYTE PTR [rax],al
 101107e:	add    BYTE PTR [rax],al
 1011080:	ret    0xd6
 1011083:	add    bh,bh
 1011085:	(bad)  
 1011086:	(bad)  
 1011087:	inc    DWORD PTR [rcx]
 1011089:	add    al,0x1
 101108b:	add    BYTE PTR [rdx+riz*8],al
 101108e:	add    BYTE PTR [rax],al
 1011090:	add    DWORD PTR [rdi],ecx
 1011092:	(bad)  
 1011093:	add    BYTE PTR [rdi],cl
 1011095:	adc    DWORD PTR fs:[rax],eax
 1011098:	sysenter 
 101109a:	adc    BYTE PTR [rax],al
 101109c:	psrld  mm1,QWORD PTR [rbx]
 101109f:	jo     0x10110a2
 10110a1:	clts   
 10110a3:	add    BYTE PTR [rdi],cl
 10110a5:	adc    DWORD PTR fs:[rax],eax
 10110a8:	sysenter 
 10110aa:	adc    BYTE PTR [rax],al
 10110ac:	psrld  mm1,QWORD PTR [rbx]
 10110af:	jo     0x10110c2
 10110b1:	and    cl,BYTE PTR [rcx]
 10110b3:	add    BYTE PTR [rdx],ah
 10110b5:	fs (bad) 
 10110b7:	add    BYTE PTR [rsi],bl
 10110b9:	xor    al,0x16
 10110bb:	add    BYTE PTR [rdx],dl
 10110bd:	add    DWORD PTR [rdx],edx
 10110bf:	add    BYTE PTR [rdi],al
 10110c1:	loopne 0x10110c8
 10110c3:	jo     0x10110c9
 10110c5:	push   rax
 10110c6:	add    BYTE PTR [rax],al
 10110c8:	cld    
 10110c9:	rex.WXB add BYTE PTR [r8],al
 10110cc:	add    BYTE PTR [rax+rax*1],dh
 10110cf:	add    bh,bh
 10110d1:	(bad)  
 10110d2:	(bad)  
 10110d3:	call   QWORD PTR [rax-0xc]
 10110d6:	add    BYTE PTR [rax],al
 10110d8:	add    BYTE PTR [rax],al
 10110da:	add    BYTE PTR [rax],al
 10110dc:	(bad)  
 10110dd:	hlt    
 10110de:	add    BYTE PTR [rax],al
 10110e0:	add    cl,bl
 10110e2:	add    BYTE PTR [rax],al
 10110e4:	(bad)  
 10110e5:	(bad)  
 10110e6:	(bad)  
 10110e7:	call   QWORD PTR [rdx]
 10110e9:	fiadd  DWORD PTR [rax]
 10110eb:	add    BYTE PTR [rax],al
 10110ed:	add    BYTE PTR [rax],al
 10110ef:	add    BYTE PTR [rbp+0x10000db],bl
 10110f5:	add    BYTE PTR [rax],al
 10110f7:	add    BYTE PTR [rax-0x24],al
 10110fa:	add    BYTE PTR [rax],al
 10110fc:	add    BYTE PTR [rax],al
 10110fe:	add    BYTE PTR [rax],al
 1011100:	rex.WB fadd QWORD PTR [r8]
 1011103:	add    bh,bh
 1011105:	(bad)  
 1011106:	(bad)  
 1011107:	call   QWORD PTR [rcx]
 1011109:	(bad)  
 101110a:	add    eax,0x14341700
 101110f:	add    BYTE PTR [rbx],cl
 1011111:	add    DWORD PTR [rdx],edx
 1011113:	add    BYTE PTR [rax+rsi*2],al
 1011116:	add    BYTE PTR [rax],al
 1011118:	cld    
 1011119:	rex.WXB add BYTE PTR [r8],al
 101111c:	sub    BYTE PTR [rax+rax*1],dh
 101111f:	add    bh,bh
 1011121:	(bad)  
 1011122:	(bad)  
 1011123:	push   QWORD PTR [rax]
 1011125:	hlt    
 1011126:	add    BYTE PTR [rax],al
 1011128:	jo     0x1011106
 101112a:	add    BYTE PTR [rax],al
 101112c:	(bad)  
 101112d:	(bad)  
 101112e:	(bad)  
 101112f:	call   FWORD PTR [rbp+0xdc]
 1011135:	add    BYTE PTR [rax],al
 1011137:	add    BYTE PTR [rdx],dh
 1011139:	fld    QWORD PTR [rax]
 101113b:	add    bh,bh
 101113d:	(bad)  
 101113e:	(bad)  
 101113f:	call   FWORD PTR [rcx]
 1011141:	es add eax,0x14011800
 1011147:	add    BYTE PTR [rax+rsi*2],cl
 101114a:	or     esp,DWORD PTR [rax+0xa]
 101114d:	push   rax
 101114e:	add    BYTE PTR [rax],al
 1011150:	mov    BYTE PTR [rcx+0x0],dl
 1011153:	add    BYTE PTR [rax+0x21000000],bl
 1011159:	or     BYTE PTR [rdx],al
 101115b:	add    BYTE PTR [rax],cl
 101115d:	xor    al,0x1a
 101115f:	add    BYTE PTR [rax-0x23],dh
 1011162:	add    BYTE PTR [rax],al
 1011164:	sbb    bl,dh
 1011166:	add    BYTE PTR [rax],al
 1011168:	rex adc DWORD PTR [rcx],eax
 101116b:	add    BYTE PTR [rcx],ah
 101116d:	add    BYTE PTR [rax],al
 101116f:	add    BYTE PTR [rax-0x23],dh
 1011172:	add    BYTE PTR [rax],al
 1011174:	sbb    bl,dh
 1011176:	add    BYTE PTR [rax],al
 1011178:	rex adc DWORD PTR [rcx],eax
 101117b:	add    BYTE PTR [rcx],ah
 101117d:	add    BYTE PTR [rdx],al
 101117f:	add    BYTE PTR [rax],al
 1011181:	xor    al,0x1a
 1011183:	add    BYTE PTR [rax-0x23],dh
 1011186:	add    BYTE PTR [rax],al
 1011188:	sbb    bl,dh
 101118a:	add    BYTE PTR [rax],al
 101118c:	rex adc DWORD PTR [rcx],eax
 101118f:	add    BYTE PTR [rcx],dl
 1011191:	and    BYTE PTR [rdi],al
 1011193:	add    BYTE PTR [rax],ah
 1011195:	xor    al,0x1b
 1011197:	add    BYTE PTR [rax],dl
 1011199:	add    DWORD PTR [rax+rax*1],edx
 101119c:	add    al,0x70
 101119e:	add    esp,DWORD PTR [rax+0x2]
 10111a1:	push   rax
 10111a2:	add    BYTE PTR [rax],al
 10111a4:	cld    
 10111a5:	rex.WXB add BYTE PTR [r8],al
 10111a8:	push   rax
 10111a9:	xor    al,0x0
 10111ab:	add    bh,bh
 10111ad:	(bad)  
 10111ae:	(bad)  
 10111af:	inc    DWORD PTR [rax+0xf4]
 10111b5:	add    BYTE PTR [rax],al
 10111b7:	add    BYTE PTR [rax+0x10000f4],dl
 10111bd:	add    BYTE PTR [rax],al
 10111bf:	add    BYTE PTR [rax+0x600000f4],ah
 10111c5:	fild   WORD PTR [rax]
 10111c7:	add    bh,bh
 10111c9:	(bad)  
 10111ca:	(bad)  
 10111cb:	call   QWORD PTR [rcx+0xdf]
 10111d1:	add    BYTE PTR [rax],al
 10111d3:	add    BYTE PTR [rbp+0x10000e0],ah
 10111d9:	add    BYTE PTR [rax],al
 10111db:	add    BYTE PTR [rsi+0x20000e0],bh
 10111e1:	add    BYTE PTR [rax],al
 10111e3:	add    BYTE PTR [rax-0x1f],bl
 10111e6:	add    BYTE PTR [rax],al
 10111e8:	add    DWORD PTR [rax],eax
 10111ea:	add    BYTE PTR [rax],al
 10111ec:	data16 loope 0x10111ef
 10111ef:	add    BYTE PTR [rax],al
 10111f1:	add    BYTE PTR [rax],al
 10111f3:	add    BYTE PTR [rdi-0x1f],ch
 10111f6:	add    BYTE PTR [rax],al
 10111f8:	(bad)  
 10111f9:	(bad)  
 10111fa:	(bad)  
 10111fb:	call   QWORD PTR [rdx+0x20000e1]
 1011201:	add    BYTE PTR [rax],al
 1011203:	add    bl,dh
 1011205:	loope  0x1011207
 1011207:	add    BYTE PTR [rcx],al
 1011209:	add    BYTE PTR [rax],al
 101120b:	add    BYTE PTR [rcx],al
 101120d:	loop   0x101120f
 101120f:	add    BYTE PTR [rax],al
 1011211:	add    BYTE PTR [rax],al
 1011213:	add    BYTE PTR [rdx],cl
 1011215:	loop   0x1011217
 1011217:	add    bh,bh
 1011219:	(bad)  
 101121a:	(bad)  
 101121b:	jmp    QWORD PTR [rdi]
 101121d:	loop   0x101121f
 101121f:	add    BYTE PTR [rax],al
 1011221:	add    BYTE PTR [rax],al
 1011223:	add    BYTE PTR [rbx-0x1e],bh
 1011226:	add    BYTE PTR [rax],al
 1011228:	(bad)  
 1011229:	(bad)  
 101122a:	(bad)  
 101122b:	inc    DWORD PTR [rcx]
 101122d:	add    al,0x1
 101122f:	add    BYTE PTR [rdx+rax*2],al
 1011232:	add    BYTE PTR [rax],al
 1011234:	adc    DWORD PTR [rdx],ebx
 1011236:	add    eax,0x19341a00
 101123b:	add    BYTE PTR [rcx],cl
 101123d:	add    DWORD PTR [rsi],edx
 101123f:	add    BYTE PTR [rdx],al
 1011241:	jo     0x1011243
 1011243:	add    ah,bh
 1011245:	rex.WXB add BYTE PTR [r8],al
 1011248:	fdiv   DWORD PTR [rax+rax*1]
 101124b:	add    bh,bh
 101124d:	(bad)  
 101124e:	(bad)  
 101124f:	inc    DWORD PTR [rax]
 1011251:	cmc    
 1011252:	add    BYTE PTR [rax],al
 1011254:	(bad)  
 1011255:	(bad)  
 1011256:	(bad)  
 1011257:	call   QWORD PTR [rax]
 1011259:	cmc    
 101125a:	add    BYTE PTR [rax],al
 101125c:	add    DWORD PTR [rax],eax
 101125e:	add    BYTE PTR [rax],al
 1011260:	and    ch,dh
 1011262:	add    BYTE PTR [rax],al
 1011264:	add    al,BYTE PTR [rax]
 1011266:	add    BYTE PTR [rax],al
 1011268:	xor    ch,dh
 101126a:	add    BYTE PTR [rax],al
 101126c:	add    eax,DWORD PTR [rax]
 101126e:	add    BYTE PTR [rax],al
 1011270:	rex cmc 
 1011272:	add    BYTE PTR [rax],al
 1011274:	(bad)  
 1011275:	(bad)  
 1011276:	(bad)  
 1011277:	call   QWORD PTR [rax-0xb]
 101127a:	add    BYTE PTR [rax],al
 101127c:	shl    dl,0x0
 101127f:	add    bh,bh
 1011281:	(bad)  
 1011282:	(bad)  
 1011283:	(bad)  
 1011284:	jmp    0x1011268
 1011286:	add    BYTE PTR [rax],al
 1011288:	add    BYTE PTR [rax],al
 101128a:	add    BYTE PTR [rax],al
 101128c:	imul   esp,ebx,0x0
 101128f:	add    BYTE PTR [rax+rax*1],al
 1011292:	add    BYTE PTR [rax],al
 1011294:	jns    0x1011279
 1011296:	add    BYTE PTR [rax],al
 1011298:	add    eax,DWORD PTR [rax]
 101129a:	add    BYTE PTR [rax],al
 101129c:	xchg   ebx,esp
 101129e:	add    BYTE PTR [rax],al
 10112a0:	add    al,BYTE PTR [rax]
 10112a2:	add    BYTE PTR [rax],al
 10112a4:	xchg   ebp,eax
 10112a5:	jrcxz  0x10112a7
 10112a7:	add    BYTE PTR [rcx],al
 10112a9:	add    BYTE PTR [rax],al
 10112ab:	add    BYTE PTR [rax+0x50000e3],ah
 10112b1:	add    BYTE PTR [rax],al
 10112b3:	add    BYTE PTR [rdi-0xffff1d],bh
 10112b9:	(bad)  
 10112ba:	(bad)  
 10112bb:	inc    DWORD PTR [rcx]
 10112bd:	(bad)  
 10112be:	or     al,BYTE PTR [rax]
 10112c0:	(bad)  
 10112c1:	xor    al,0x19
 10112c3:	add    BYTE PTR [rsi],dl
 10112c5:	rcl    BYTE PTR [rdx],cl
 10112c7:	lock adc al,ah
 10112ca:	(bad)  
 10112cb:	ror    BYTE PTR [rax+rax*8],1
 10112ce:	or     dh,BYTE PTR [rax+0x9]
 10112d1:	(bad)  
 10112d2:	or     BYTE PTR [rax+0x1],dl
 10112d5:	sbb    DWORD PTR [rdx],ecx
 10112d7:	add    BYTE PTR [rcx],bl
 10112d9:	je     0x10112e4
 10112db:	add    BYTE PTR [rcx],bl
 10112dd:	or     BYTE PTR fs:[rax],al
 10112e0:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 10112e4:	sbb    DWORD PTR [rsi+rax*1],esi
 10112e7:	add    BYTE PTR [rcx],bl
 10112e9:	xor    dl,BYTE PTR [rip+0xc0]        # 0x10113af
	...
 10112fb:	add    BYTE PTR [rax],dl
 10112fd:	adc    eax,DWORD PTR [rcx]
	...
 101130f:	add    BYTE PTR [rcx],al
 1011311:	add    BYTE PTR [rax],al
 1011313:	add    BYTE PTR [rax],ah
 1011315:	adc    eax,DWORD PTR [rcx]
	...
 1011323:	add    BYTE PTR [rax],cl
 1011325:	xor    DWORD PTR [rcx],eax
 1011327:	add    BYTE PTR [rax],al
 1011329:	add    BYTE PTR [rax],al
 101132b:	add    bh,bh
 101132d:	(bad)  
 101132e:	(bad)  
 101132f:	inc    DWORD PTR [rax]
 1011331:	add    BYTE PTR [rax],al
 1011333:	add    BYTE PTR [rax],ch
	...
 1011351:	add    BYTE PTR [rax],al
 1011353:	add    BYTE PTR [rax+0x13],ch
 1011356:	add    DWORD PTR [rax],eax
	...
 1011368:	add    al,BYTE PTR [rax]
 101136a:	add    BYTE PTR [rax],al
 101136c:	adc    BYTE PTR [rbx],0x1
 101136f:	add    BYTE PTR [rax+0x113],ch
	...
 101137d:	add    BYTE PTR [rax],al
 101137f:	add    BYTE PTR [rcx],al
 1011381:	add    BYTE PTR [rax],al
 1011383:	add    BYTE PTR [rax+0x37],al
 1011386:	add    DWORD PTR [rax],eax
 1011388:	add    BYTE PTR [rax],al
 101138a:	add    BYTE PTR [rax],al
 101138c:	(bad)  
 101138d:	(bad)  
 101138e:	(bad)  
 101138f:	inc    DWORD PTR [rax]
 1011391:	add    BYTE PTR [rax],al
 1011393:	add    BYTE PTR [rax],cl
	...
 10113a5:	add    BYTE PTR [rax],al
 10113a7:	add    BYTE PTR [rcx],al
 10113a9:	add    BYTE PTR [rax],al
 10113ab:	add    BYTE PTR [rax+0x37],bl
 10113ae:	add    DWORD PTR [rax],eax
 10113b0:	add    BYTE PTR [rax],al
 10113b2:	add    BYTE PTR [rax],al
 10113b4:	(bad)  
 10113b5:	(bad)  
 10113b6:	(bad)  
 10113b7:	inc    DWORD PTR [rax]
 10113b9:	add    BYTE PTR [rax],al
 10113bb:	add    BYTE PTR [rax],cl
	...
 10113cd:	add    BYTE PTR [rax],al
 10113cf:	add    BYTE PTR [rcx],al
 10113d1:	add    BYTE PTR [rax],al
 10113d3:	add    BYTE PTR [rax],al
 10113d5:	(bad)  
 10113d6:	add    BYTE PTR [rax],al
 10113d8:	test   al,0x43
 10113da:	add    DWORD PTR [rax],eax
 10113dc:	cwde   
 10113dd:	(bad)  
 10113de:	add    DWORD PTR [rax],eax
 10113e0:	adc    BYTE PTR [rcx+rax*1],dl
 10113e3:	add    BYTE PTR [rax],bh
 10113e5:	adc    al,0x1
	...
 101140f:	add    BYTE PTR [rax],ah
 1011411:	adc    al,0x1
	...
 101141f:	add    BYTE PTR [rax],al
 1011421:	add    BYTE PTR [rdi+0x65],al
 1011424:	je     0x101146f
 1011426:	outs   dx,BYTE PTR ds:[rsi]
 1011427:	jae    0x101149d
 1011429:	push   rdx
 101142a:	gs addr32 push rax
 101142d:	(bad)  
 101142e:	je     0x1011498
 1011430:	rex.X jns 0x101147c
 1011433:	add    BYTE PTR [rsi+0x0],r13b
	...
 1011447:	add    BYTE PTR [rax+0x115],bh
 101144d:	add    BYTE PTR [rax],al
 101144f:	add    BYTE PTR [rax],al
 1011451:	add    BYTE PTR [rax],al
 1011453:	add    BYTE PTR [rdx],dh
 1011455:	sbb    eax,DWORD PTR [rcx]
 1011457:	add    al,dl
 1011459:	adc    BYTE PTR [rax],al
 101145b:	add    BYTE PTR [rax],dh
 101145d:	sbb    BYTE PTR [rcx],al
	...
 1011467:	add    dl,ah
 1011469:	sbb    al,0x1
 101146b:	add    BYTE PTR [rax+0x13],cl
 101146e:	add    BYTE PTR [rax],al
 1011470:	or     BYTE PTR [rdx],bl
 1011472:	add    DWORD PTR [rax],eax
	...
 101147c:	sahf   
 101147d:	sbb    eax,0x15200001
 1011482:	add    BYTE PTR [rax],al
 1011484:	fcomp  DWORD PTR [rcx]
 1011486:	add    DWORD PTR [rax],eax
	...
 1011490:	mov    dh,0x1d
 1011492:	add    DWORD PTR [rax],eax
 1011494:	lock adc al,0x0
 1011497:	add    BYTE PTR [rax+0x119],bh
 101149d:	add    BYTE PTR [rax],al
 101149f:	add    BYTE PTR [rax],al
 10114a1:	add    BYTE PTR [rax],al
 10114a3:	add    dl,dh
 10114a5:	sbb    eax,0x14d00001
 10114aa:	add    BYTE PTR [rax],al
 10114ac:	call   0x10115ca
 10114b1:	add    BYTE PTR [rax],al
 10114b3:	add    BYTE PTR [rax],al
 10114b5:	add    BYTE PTR [rax],al
 10114b7:	add    BYTE PTR [rsi],bh
 10114b9:	(bad)  
 10114ba:	add    DWORD PTR [rax],eax
 10114bc:	add    BYTE PTR [rip+0x14e80000],dl        # 0x15e914c2
 10114c2:	add    DWORD PTR [rax],eax
	...
 10114cc:	and    BYTE PTR cs:[rcx],al
 10114cf:	add    BYTE PTR [rax],al
 10114d1:	adc    BYTE PTR [rax],al
	...
 10114e7:	add    ah,dh
 10114e9:	(bad)  
 10114ea:	add    DWORD PTR [rax],eax
 10114ec:	add    BYTE PTR [rax],al
 10114ee:	add    BYTE PTR [rax],al
 10114f0:	lock (bad) 
 10114f2:	add    DWORD PTR [rax],eax
 10114f4:	add    BYTE PTR [rax],al
 10114f6:	add    BYTE PTR [rax],al
 10114f8:	rcr    BYTE PTR [rdi],cl
 10114fa:	add    DWORD PTR [rax],eax
 10114fc:	add    BYTE PTR [rax],al
 10114fe:	add    BYTE PTR [rax],al
 1011500:	mov    dh,0x1f
 1011502:	add    DWORD PTR [rax],eax
 1011504:	add    BYTE PTR [rax],al
 1011506:	add    BYTE PTR [rax],al
 1011508:	cwde   
 1011509:	(bad)  
 101150a:	add    DWORD PTR [rax],eax
 101150c:	add    BYTE PTR [rax],al
 101150e:	add    BYTE PTR [rax],al
 1011510:	(bad)  
 1011511:	(bad)  
 1011512:	add    DWORD PTR [rax],eax
 1011514:	add    BYTE PTR [rax],al
 1011516:	add    BYTE PTR [rax],al
 1011518:	ins    BYTE PTR es:[rdi],dx
 1011519:	(bad)  
 101151a:	add    DWORD PTR [rax],eax
 101151c:	add    BYTE PTR [rax],al
 101151e:	add    BYTE PTR [rax],al
 1011520:	(bad)  
 1011521:	(bad)  
 1011522:	add    DWORD PTR [rax],eax
 1011524:	add    BYTE PTR [rax],al
 1011526:	add    BYTE PTR [rax],al
 1011528:	pop    rax
 1011529:	(bad)  
 101152a:	add    DWORD PTR [rax],eax
 101152c:	add    BYTE PTR [rax],al
 101152e:	add    BYTE PTR [rax],al
 1011530:	rex.R (bad) 
 1011532:	add    DWORD PTR [rax],eax
 1011534:	add    BYTE PTR [rax],al
 1011536:	add    BYTE PTR [rax],al
 1011538:	xor    al,0x1f
 101153a:	add    DWORD PTR [rax],eax
 101153c:	add    BYTE PTR [rax],al
 101153e:	add    BYTE PTR [rax],al
 1011540:	sub    bl,BYTE PTR [rdi]
 1011542:	add    DWORD PTR [rax],eax
 1011544:	add    BYTE PTR [rax],al
 1011546:	add    BYTE PTR [rax],al
 1011548:	sbb    bl,BYTE PTR [rdi]
 101154a:	add    DWORD PTR [rax],eax
 101154c:	add    BYTE PTR [rax],al
 101154e:	add    BYTE PTR [rax],al
 1011550:	add    al,0x1f
 1011552:	add    DWORD PTR [rax],eax
 1011554:	add    BYTE PTR [rax],al
 1011556:	add    BYTE PTR [rax],al
 1011558:	fcomp  QWORD PTR [rsi]
 101155a:	add    DWORD PTR [rax],eax
 101155c:	add    BYTE PTR [rax],al
 101155e:	add    BYTE PTR [rax],al
 1011560:	rcr    BYTE PTR [rsi],1
 1011562:	add    DWORD PTR [rax],eax
 1011564:	add    BYTE PTR [rax],al
 1011566:	add    BYTE PTR [rax],al
 1011568:	ret    0x11e
 101156b:	add    BYTE PTR [rax],al
 101156d:	add    BYTE PTR [rax],al
 101156f:	add    BYTE PTR [rsi+rbx*1+0x1],ch
 1011576:	add    BYTE PTR [rax],al
 1011578:	cwde   
 1011579:	(bad)  
 101157a:	add    DWORD PTR [rax],eax
 101157c:	add    BYTE PTR [rax],al
 101157e:	add    BYTE PTR [rax],al
 1011580:	xchg   BYTE PTR [rsi],bl
 1011582:	add    DWORD PTR [rax],eax
 1011584:	add    BYTE PTR [rax],al
 1011586:	add    BYTE PTR [rax],al
 1011588:	jb     0x10115a8
 101158a:	add    DWORD PTR [rax],eax
 101158c:	add    BYTE PTR [rax],al
 101158e:	add    BYTE PTR [rax],al
 1011590:	(bad)  
 1011591:	(bad)  
 1011592:	add    DWORD PTR [rax],eax
 1011594:	add    BYTE PTR [rax],al
 1011596:	add    BYTE PTR [rax],al
 1011598:	push   rsp
 1011599:	(bad)  
 101159a:	add    DWORD PTR [rax],eax
 101159c:	add    BYTE PTR [rax],al
 101159e:	add    BYTE PTR [rax],al
 10115a0:	rex.RX (bad) 
 10115a2:	add    DWORD PTR [rax],eax
 10115a4:	add    BYTE PTR [rax],al
 10115a6:	add    BYTE PTR [rax],al
 10115a8:	(bad)  
 10115a9:	and    BYTE PTR [rcx],al
	...
 10115b7:	add    BYTE PTR [rsi+0x21],al
 10115ba:	add    DWORD PTR [rax],eax
 10115bc:	add    BYTE PTR [rax],al
 10115be:	add    BYTE PTR [rax],al
 10115c0:	and    DWORD PTR ss:[rcx],eax
 10115c3:	add    BYTE PTR [rax],al
 10115c5:	add    BYTE PTR [rax],al
 10115c7:	add    BYTE PTR [rcx+riz*1],bl
 10115ca:	add    DWORD PTR [rax],eax
 10115cc:	add    BYTE PTR [rax],al
 10115ce:	add    BYTE PTR [rax],al
 10115d0:	or     al,0x21
 10115d2:	add    DWORD PTR [rax],eax
 10115d4:	add    BYTE PTR [rax],al
 10115d6:	add    BYTE PTR [rax],al
 10115d8:	clc    
 10115d9:	and    BYTE PTR [rcx],al
 10115db:	add    BYTE PTR [rax],al
 10115dd:	add    BYTE PTR [rax],al
 10115df:	add    al,al
 10115e1:	and    DWORD PTR [rcx],eax
 10115e3:	add    BYTE PTR [rax],al
 10115e5:	add    BYTE PTR [rax],al
 10115e7:	add    dl,cl
 10115e9:	and    BYTE PTR [rcx],al
 10115eb:	add    BYTE PTR [rax],al
 10115ed:	add    BYTE PTR [rax],al
 10115ef:	add    BYTE PTR [rsi+0x120],dh
 10115f5:	add    BYTE PTR [rax],al
 10115f7:	add    BYTE PTR [rax+0x120],bl
 10115fd:	add    BYTE PTR [rax],al
 10115ff:	add    BYTE PTR [rax+riz*1+0x1],bh
 1011603:	add    BYTE PTR [rax],al
 1011605:	add    BYTE PTR [rax],al
 1011607:	add    BYTE PTR [rax+0x20],ch
 101160a:	add    DWORD PTR [rax],eax
 101160c:	add    BYTE PTR [rax],al
 101160e:	add    BYTE PTR [rax],al
 1011610:	push   rsp
 1011611:	and    BYTE PTR [rcx],al
 1011613:	add    BYTE PTR [rax],al
 1011615:	add    BYTE PTR [rax],al
 1011617:	add    BYTE PTR [rax+riz*1+0x1],al
 101161b:	add    BYTE PTR [rax],al
 101161d:	add    BYTE PTR [rax],al
 101161f:	add    BYTE PTR [rax+riz*1],bh
 1011622:	add    DWORD PTR [rax],eax
 1011624:	add    BYTE PTR [rax],al
 1011626:	add    BYTE PTR [rax],al
 1011628:	pop    rsp
 1011629:	and    DWORD PTR [rcx],eax
 101162b:	add    BYTE PTR [rax],al
 101162d:	add    BYTE PTR [rax],al
 101162f:	add    dh,bl
 1011631:	and    DWORD PTR [rcx],eax
 1011633:	add    BYTE PTR [rax],al
 1011635:	add    BYTE PTR [rax],al
 1011637:	add    dl,ch
 1011639:	and    DWORD PTR [rcx],eax
 101163b:	add    BYTE PTR [rax],al
 101163d:	add    BYTE PTR [rax],al
 101163f:	add    al,bh
 1011641:	and    DWORD PTR [rcx],eax
 1011643:	add    BYTE PTR [rax],al
 1011645:	add    BYTE PTR [rax],al
 1011647:	add    BYTE PTR [rax],cl
 1011649:	and    al,BYTE PTR [rcx]
 101164b:	add    BYTE PTR [rax],al
 101164d:	add    BYTE PTR [rax],al
 101164f:	add    BYTE PTR [rax],bl
 1011651:	and    al,BYTE PTR [rcx]
 1011653:	add    BYTE PTR [rax],al
 1011655:	add    BYTE PTR [rax],al
 1011657:	add    BYTE PTR [rsi],ah
 1011659:	and    al,BYTE PTR [rcx]
 101165b:	add    BYTE PTR [rax],al
 101165d:	add    BYTE PTR [rax],al
 101165f:	add    BYTE PTR [rdx+riz*1],bh
 1011662:	add    DWORD PTR [rax],eax
 1011664:	add    BYTE PTR [rax],al
 1011666:	add    BYTE PTR [rax],al
 1011668:	pop    rax
 1011669:	and    al,BYTE PTR [rcx]
 101166b:	add    BYTE PTR [rax],al
 101166d:	add    BYTE PTR [rax],al
 101166f:	add    BYTE PTR [rdx+riz*1+0x1],dh
 1011673:	add    BYTE PTR [rax],al
 1011675:	add    BYTE PTR [rax],al
 1011677:	add    BYTE PTR [rdx+0x122],cl
 101167d:	add    BYTE PTR [rax],al
 101167f:	add    BYTE PTR [rax+0x122],ah
 1011685:	add    BYTE PTR [rax],al
 1011687:	add    BYTE PTR [rsi+0x122],ch
 101168d:	add    BYTE PTR [rax],al
 101168f:	add    ah,al
 1011691:	and    al,BYTE PTR [rcx]
 1011693:	add    BYTE PTR [rax],al
 1011695:	add    BYTE PTR [rax],al
 1011697:	add    BYTE PTR [rdx+0x21],dh
 101169a:	add    DWORD PTR [rax],eax
 101169c:	add    BYTE PTR [rax],al
 101169e:	add    BYTE PTR [rax],al
 10116a0:	mov    WORD PTR [rcx],fs
 10116a2:	add    DWORD PTR [rax],eax
 10116a4:	add    BYTE PTR [rax],al
 10116a6:	add    BYTE PTR [rax],al
 10116a8:	shl    BYTE PTR [rcx],cl
 10116aa:	add    DWORD PTR [rax],eax
 10116ac:	add    BYTE PTR [rax],al
 10116ae:	add    BYTE PTR [rax],al
 10116b0:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10116b1:	and    DWORD PTR [rcx],eax
 10116b3:	add    BYTE PTR [rax],al
 10116b5:	add    BYTE PTR [rax],al
 10116b7:	add    dh,dl
 10116b9:	and    al,BYTE PTR [rcx]
 10116bb:	add    BYTE PTR [rax],al
 10116bd:	add    BYTE PTR [rax],al
 10116bf:	add    dl,ah
 10116c1:	and    al,BYTE PTR [rcx]
 10116c3:	add    BYTE PTR [rax],al
 10116c5:	add    BYTE PTR [rax],al
 10116c7:	add    ah,dh
 10116c9:	and    al,BYTE PTR [rcx]
 10116cb:	add    BYTE PTR [rax],al
 10116cd:	add    BYTE PTR [rax],al
 10116cf:	add    BYTE PTR [rax],al
 10116d1:	and    eax,DWORD PTR [rcx]
 10116d3:	add    BYTE PTR [rax],al
 10116d5:	add    BYTE PTR [rax],al
 10116d7:	add    BYTE PTR [rax],dl
 10116d9:	and    eax,DWORD PTR [rcx]
 10116db:	add    BYTE PTR [rax],al
 10116dd:	add    BYTE PTR [rax],al
 10116df:	add    BYTE PTR [rbx+riz*1],bl
 10116e2:	add    DWORD PTR [rax],eax
 10116e4:	add    BYTE PTR [rax],al
 10116e6:	add    BYTE PTR [rax],al
 10116e8:	sub    BYTE PTR [rbx],ah
 10116ea:	add    DWORD PTR [rax],eax
 10116ec:	add    BYTE PTR [rax],al
 10116ee:	add    BYTE PTR [rax],al
 10116f0:	cmp    BYTE PTR [rbx],ah
 10116f2:	add    DWORD PTR [rax],eax
 10116f4:	add    BYTE PTR [rax],al
 10116f6:	add    BYTE PTR [rax],al
 10116f8:	rex.WX and rax,QWORD PTR [rcx]
 10116fb:	add    BYTE PTR [rax],al
 10116fd:	add    BYTE PTR [rax],al
 10116ff:	add    BYTE PTR [rdx+0x23],bl
 1011702:	add    DWORD PTR [rax],eax
 1011704:	add    BYTE PTR [rax],al
 1011706:	add    BYTE PTR [rax],al
 1011708:	ins    BYTE PTR es:[rdi],dx
 1011709:	and    eax,DWORD PTR [rcx]
 101170b:	add    BYTE PTR [rax],al
 101170d:	add    BYTE PTR [rax],al
 101170f:	add    BYTE PTR [rsi+0x23],bh
 1011712:	add    DWORD PTR [rax],eax
 1011714:	add    BYTE PTR [rax],al
 1011716:	add    BYTE PTR [rax],al
 1011718:	xchg   esp,eax
 1011719:	and    eax,DWORD PTR [rcx]
 101171b:	add    BYTE PTR [rax],al
 101171d:	add    BYTE PTR [rax],al
 101171f:	add    BYTE PTR [rdx+0x123],ch
 1011725:	add    BYTE PTR [rax],al
 1011727:	add    al,al
 1011729:	and    eax,DWORD PTR [rcx]
 101172b:	add    BYTE PTR [rax],al
 101172d:	add    BYTE PTR [rax],al
 101172f:	add    ah,dl
 1011731:	and    eax,DWORD PTR [rcx]
 1011733:	add    BYTE PTR [rax],al
 1011735:	add    BYTE PTR [rax],al
 1011737:	add    BYTE PTR [rax],ah
 1011739:	sbb    al,BYTE PTR [rcx]
 101173b:	add    BYTE PTR [rax],al
 101173d:	add    BYTE PTR [rax],al
 101173f:	add    dh,ch
 1011741:	and    eax,DWORD PTR [rcx]
 1011743:	add    BYTE PTR [rax],al
 1011745:	add    BYTE PTR [rax],al
 1011747:	add    BYTE PTR [rsp],al
 101174a:	add    DWORD PTR [rax],eax
 101174c:	add    BYTE PTR [rax],al
 101174e:	add    BYTE PTR [rax],al
 1011750:	sbb    ah,BYTE PTR [rcx+rax*1]
 1011753:	add    BYTE PTR [rax],al
 1011755:	add    BYTE PTR [rax],al
 1011757:	add    BYTE PTR [rax],dh
 1011759:	and    al,0x1
 101175b:	add    BYTE PTR [rax],al
 101175d:	add    BYTE PTR [rax],al
 101175f:	add    BYTE PTR [rsp+0x1],al
 1011763:	add    BYTE PTR [rax],al
 1011765:	add    BYTE PTR [rax],al
 1011767:	add    BYTE PTR [rdx+0x24],dl
 101176a:	add    DWORD PTR [rax],eax
 101176c:	add    BYTE PTR [rax],al
 101176e:	add    BYTE PTR [rax],al
 1011770:	(bad)  
 1011771:	and    al,0x1
 1011773:	add    BYTE PTR [rax],al
 1011775:	add    BYTE PTR [rax],al
 1011777:	add    BYTE PTR [rdx+0x24],dh
 101177a:	add    DWORD PTR [rax],eax
 101177c:	add    BYTE PTR [rax],al
 101177e:	add    BYTE PTR [rax],al
 1011780:	(bad)  
 1011781:	and    al,0x1
 1011783:	add    BYTE PTR [rax],al
 1011785:	add    BYTE PTR [rax],al
 1011787:	add    BYTE PTR [rsi+0x124],cl
 101178d:	add    BYTE PTR [rax],al
 101178f:	add    BYTE PTR [rsi+0x124],bl
 1011795:	add    BYTE PTR [rax],al
 1011797:	add    BYTE PTR [rsi+0x124],ch
 101179d:	add    BYTE PTR [rax],al
 101179f:	add    BYTE PTR [rsi+0x124],bh
 10117a5:	add    BYTE PTR [rax],al
 10117a7:	add    ah,cl
 10117a9:	and    al,0x1
 10117ab:	add    BYTE PTR [rax],al
 10117ad:	add    BYTE PTR [rax],al
 10117af:	add    dl,bl
 10117b1:	and    al,0x1
 10117b3:	add    BYTE PTR [rax],al
 10117b5:	add    BYTE PTR [rax],al
 10117b7:	add    BYTE PTR [rbx+rbx*1],bl
 10117ba:	add    DWORD PTR [rax],eax
 10117bc:	add    BYTE PTR [rax],al
 10117be:	add    BYTE PTR [rax],al
 10117c0:	or     BYTE PTR [rbx],bl
 10117c2:	add    DWORD PTR [rax],eax
 10117c4:	add    BYTE PTR [rax],al
 10117c6:	add    BYTE PTR [rax],al
 10117c8:	cld    
 10117c9:	sbb    al,BYTE PTR [rcx]
 10117cb:	add    BYTE PTR [rax],al
 10117cd:	add    BYTE PTR [rax],al
 10117cf:	add    al,dh
 10117d1:	sbb    al,BYTE PTR [rcx]
 10117d3:	add    BYTE PTR [rax],al
 10117d5:	add    BYTE PTR [rax],al
 10117d7:	add    al,bl
 10117d9:	sbb    al,BYTE PTR [rcx]
 10117db:	add    BYTE PTR [rax],al
 10117dd:	add    BYTE PTR [rax],al
 10117df:	add    al,al
 10117e1:	sbb    al,BYTE PTR [rcx]
 10117e3:	add    BYTE PTR [rax],al
 10117e5:	add    BYTE PTR [rax],al
 10117e7:	add    BYTE PTR [rax+0x11a],ch
 10117ed:	add    BYTE PTR [rax],al
 10117ef:	add    BYTE PTR [rdx+rbx*1+0x1],cl
 10117f6:	add    BYTE PTR [rax],al
 10117f8:	jl     0x1011814
 10117fa:	add    DWORD PTR [rax],eax
 10117fc:	add    BYTE PTR [rax],al
 10117fe:	add    BYTE PTR [rax],al
 1011800:	ins    BYTE PTR es:[rdi],dx
 1011801:	sbb    al,BYTE PTR [rcx]
 1011803:	add    BYTE PTR [rax],al
 1011805:	add    BYTE PTR [rax],al
 1011807:	add    BYTE PTR [rdx+0x1a],bl
 101180a:	add    DWORD PTR [rax],eax
 101180c:	add    BYTE PTR [rax],al
 101180e:	add    BYTE PTR [rax],al
 1011810:	sbb    r8b,BYTE PTR [rcx]
 1011813:	add    BYTE PTR [rax],al
 1011815:	add    BYTE PTR [rax],al
 1011817:	add    BYTE PTR [rdx],dh
 1011819:	sbb    al,BYTE PTR [rcx]
 101181b:	add    BYTE PTR [rax],al
 101181d:	add    BYTE PTR [rax],al
 101181f:	add    dh,bl
 1011821:	and    BYTE PTR [rcx],al
	...
 101182f:	add    BYTE PTR [rdx+0x11c],bh
 1011835:	add    BYTE PTR [rax],al
 1011837:	add    BYTE PTR [rax+0x125],ah
 101183d:	add    BYTE PTR [rax],al
 101183f:	add    BYTE PTR [rsi+0x125],dl
 1011845:	add    BYTE PTR [rax],al
 1011847:	add    BYTE PTR [rdx+0x125],cl
 101184d:	add    BYTE PTR [rax],al
 101184f:	add    BYTE PTR [rsi+0x25],bh
 1011852:	add    DWORD PTR [rax],eax
 1011854:	add    BYTE PTR [rax],al
 1011856:	add    BYTE PTR [rax],al
 1011858:	jb     0x101187f
 101185a:	add    DWORD PTR [rax],eax
 101185c:	add    BYTE PTR [rax],al
 101185e:	add    BYTE PTR [rax],al
 1011860:	(bad)  
 1011861:	and    eax,0x1
 1011866:	add    BYTE PTR [rax],al
 1011868:	push   rdx
 1011869:	and    eax,0x1
 101186e:	add    BYTE PTR [rax],al
 1011870:	rex.R and eax,0x1
 1011876:	add    BYTE PTR [rax],al
 1011878:	cmp    ah,BYTE PTR [rip+0x1]        # 0x101187f
 101187e:	add    BYTE PTR [rax],al
 1011880:	sub    al,0x25
 1011882:	add    DWORD PTR [rax],eax
 1011884:	add    BYTE PTR [rax],al
 1011886:	add    BYTE PTR [rax],al
 1011888:	and    al,0x25
 101188a:	add    DWORD PTR [rax],eax
 101188c:	add    BYTE PTR [rax],al
 101188e:	add    BYTE PTR [rax],al
 1011890:	adc    al,0x25
 1011892:	add    DWORD PTR [rax],eax
 1011894:	add    BYTE PTR [rax],al
 1011896:	add    BYTE PTR [rax],al
 1011898:	or     ah,BYTE PTR [rip+0x1]        # 0x101189f
 101189e:	add    BYTE PTR [rax],al
 10118a0:	cli    
 10118a1:	and    al,0x1
 10118a3:	add    BYTE PTR [rax],al
 10118a5:	add    BYTE PTR [rax],al
 10118a7:	add    dl,ch
 10118a9:	and    al,0x1
 10118ab:	add    BYTE PTR [rax],al
 10118ad:	add    BYTE PTR [rax],al
 10118af:	add    BYTE PTR [rax+0x1b],al
 10118b2:	add    DWORD PTR [rax],eax
 10118b4:	add    BYTE PTR [rax],al
 10118b6:	add    BYTE PTR [rax],al
 10118b8:	push   rax
 10118b9:	sbb    eax,DWORD PTR [rcx]
 10118bb:	add    BYTE PTR [rax],al
 10118bd:	add    BYTE PTR [rax],al
 10118bf:	add    BYTE PTR [rbx+rbx*1+0x1],bl
 10118c3:	add    BYTE PTR [rax],al
 10118c5:	add    BYTE PTR [rax],al
 10118c7:	add    BYTE PTR [rsi+0x1b],ch
 10118ca:	add    DWORD PTR [rax],eax
 10118cc:	add    BYTE PTR [rax],al
 10118ce:	add    BYTE PTR [rax],al
 10118d0:	jp     0x10118ed
 10118d2:	add    DWORD PTR [rax],eax
 10118d4:	add    BYTE PTR [rax],al
 10118d6:	add    BYTE PTR [rax],al
 10118d8:	(bad)  
 10118d9:	sbb    eax,DWORD PTR [rcx]
 10118db:	add    BYTE PTR [rax],al
 10118dd:	add    BYTE PTR [rax],al
 10118df:	add    dh,al
 10118e1:	sbb    eax,DWORD PTR [rcx]
 10118e3:	add    BYTE PTR [rax],al
 10118e5:	add    BYTE PTR [rax],al
 10118e7:	add    dl,dl
 10118e9:	sbb    eax,DWORD PTR [rcx]
 10118eb:	add    BYTE PTR [rax],al
 10118ed:	add    BYTE PTR [rax],al
 10118ef:	add    al,ch
 10118f1:	sbb    eax,DWORD PTR [rcx]
 10118f3:	add    BYTE PTR [rax],al
 10118f5:	add    BYTE PTR [rax],al
 10118f7:	add    dh,bh
 10118f9:	sbb    eax,DWORD PTR [rcx]
 10118fb:	add    BYTE PTR [rax],al
 10118fd:	add    BYTE PTR [rax],al
 10118ff:	add    BYTE PTR [rax],cl
 1011901:	sbb    al,0x1
 1011903:	add    BYTE PTR [rax],al
 1011905:	add    BYTE PTR [rax],al
 1011907:	add    BYTE PTR [rsi],dl
 1011909:	sbb    al,0x1
 101190b:	add    BYTE PTR [rax],al
 101190d:	add    BYTE PTR [rax],al
 101190f:	add    BYTE PTR [rbp+rbx*1+0x1],al
 1011913:	add    BYTE PTR [rax],al
 1011915:	add    BYTE PTR [rax],al
 1011917:	add    BYTE PTR [rdx],bh
 1011919:	sbb    eax,0x1
 101191e:	add    BYTE PTR [rax],al
 1011920:	xor    bl,BYTE PTR [rip+0x1]        # 0x1011927
 1011926:	add    BYTE PTR [rax],al
 1011928:	and    al,0x1d
 101192a:	add    DWORD PTR [rax],eax
 101192c:	add    BYTE PTR [rax],al
 101192e:	add    BYTE PTR [rax],al
 1011930:	sbb    bl,BYTE PTR [rip+0x1]        # 0x1011937
 1011936:	add    BYTE PTR [rax],al
 1011938:	add    al,0x1d
 101193a:	add    DWORD PTR [rax],eax
 101193c:	add    BYTE PTR [rax],al
 101193e:	add    BYTE PTR [rax],al
 1011940:	lock sbb al,0x1
 1011943:	add    BYTE PTR [rax],al
 1011945:	add    BYTE PTR [rax],al
 1011947:	add    al,dl
 1011949:	sbb    al,0x1
 101194b:	add    BYTE PTR [rax],al
 101194d:	add    BYTE PTR [rax],al
 101194f:	add    dh,al
 1011951:	sbb    al,0x1
 1011953:	add    BYTE PTR [rax],al
 1011955:	add    BYTE PTR [rax],al
 1011957:	add    BYTE PTR [rbp+riz*1+0x1],ch
 101195e:	add    BYTE PTR [rax],al
 1011960:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1011961:	sbb    al,0x1
 1011963:	add    BYTE PTR [rax],al
 1011965:	add    BYTE PTR [rax],al
 1011967:	add    BYTE PTR [rax+0x11c],dl
 101196d:	add    BYTE PTR [rax],al
 101196f:	add    BYTE PTR [rdx+0x11c],al
 1011975:	add    BYTE PTR [rax],al
 1011977:	add    BYTE PTR [rsi+0x1c],dh
 101197a:	add    DWORD PTR [rax],eax
 101197c:	add    BYTE PTR [rax],al
 101197e:	add    BYTE PTR [rax],al
 1011980:	push   0x11c
 1011985:	add    BYTE PTR [rax],al
 1011987:	add    BYTE PTR [rax+0x1c],ah
 101198a:	add    DWORD PTR [rax],eax
 101198c:	add    BYTE PTR [rax],al
 101198e:	add    BYTE PTR [rax],al
 1011990:	push   rsi
 1011991:	sbb    al,0x1
 1011993:	add    BYTE PTR [rax],al
 1011995:	add    BYTE PTR [rax],al
 1011997:	add    BYTE PTR [rsi+0x1c],cl
 101199a:	add    DWORD PTR [rax],eax
 101199c:	add    BYTE PTR [rax],al
 101199e:	add    BYTE PTR [rax],al
 10119a0:	sbb    al,0x1
 10119a3:	add    BYTE PTR [rax],al
 10119a5:	add    BYTE PTR [rax],al
 10119a7:	add    BYTE PTR [rax],ch
 10119a9:	sbb    al,0x1
	...
 10119b7:	add    al,dl
 10119b9:	sbb    eax,0x1
 10119be:	add    BYTE PTR [rax],al
 10119c0:	loop   0x10119df
 10119c2:	add    DWORD PTR [rax],eax
 10119c4:	add    BYTE PTR [rax],al
 10119c6:	add    BYTE PTR [rax],al
 10119c8:	ret    0x11d
	...
 10119d7:	add    BYTE PTR [rax+0x11d],ch
	...
 10119e5:	add    BYTE PTR [rax],al
 10119e7:	add    BYTE PTR [rsi],cl
 10119e9:	(bad)  
 10119ea:	add    DWORD PTR [rax],eax
 10119ec:	add    BYTE PTR [rax],al
 10119ee:	add    BYTE PTR [rax],al
 10119f0:	sub    BYTE PTR [rsi],bl
 10119f2:	add    DWORD PTR [rax],eax
 10119f4:	add    BYTE PTR [rax],al
 10119f6:	add    BYTE PTR [rax],al
 10119f8:	(bad)  
 10119f9:	sbb    eax,0x1
	...
 1011a06:	add    BYTE PTR [rax],al
 1011a08:	mov    WORD PTR [rip+0x1],ds        # 0x1011a0f
 1011a0e:	add    BYTE PTR [rax],al
 1011a10:	jp     0x1011a2f
 1011a12:	add    DWORD PTR [rax],eax
	...
 1011a20:	rex.WR add r8b,BYTE PTR [rdi+0x65]
 1011a24:	je     0x1011a76
 1011a26:	jb     0x1011a97
 1011a28:	movsxd eax,DWORD PTR [rcx+0x64]
 1011a2b:	fs jb  0x1011a93
 1011a2e:	jae    0x1011aa3
 1011a30:	add    BYTE PTR [rax],al
 1011a32:	push   rcx
 1011a33:	add    al,BYTE PTR [rdi+0x65]
 1011a36:	je     0x1011a88
 1011a38:	jb     0x1011aa9
 1011a3a:	movsxd esp,DWORD PTR [rbp+0x73]
 1011a3d:	jae    0x1011a87
 1011a3f:	gs (bad) 
 1011a41:	jo     0x1011a43
 1011a43:	add    bl,bl
 1011a45:	add    cl,BYTE PTR [rax+0x65]
 1011a48:	(bad)  
 1011a49:	jo     0x1011a9e
 1011a4b:	gs je  0x1011a97
 1011a4e:	outs   dx,BYTE PTR ds:[rsi]
 1011a4f:	outs   dx,WORD PTR ds:[rsi]
 1011a51:	jb     0x1011ac0
 1011a53:	(bad)  
 1011a54:	je     0x1011abf
 1011a56:	outs   dx,DWORD PTR ds:[rsi]
 1011a57:	outs   dx,BYTE PTR ds:[rsi]
 1011a58:	add    BYTE PTR [rax],al
 1011a5a:	mov    ah,0x3
 1011a5c:	push   rdx
 1011a5d:	(bad)  
 1011a5e:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 1011a65:	jo     0x1011adb
 1011a67:	imul   ebp,DWORD PTR [rdi+0x6e],0x2080000
 1011a6e:	rex.RXB
 1011a6f:	gs je  0x1011abe
 1011a72:	(bad)  
 1011a73:	jae    0x1011ae9
 1011a75:	rex.RB jb 0x1011aea
 1011a78:	outs   dx,DWORD PTR ds:[rsi]
 1011a79:	jb     0x1011a7b
 1011a7b:	add    BYTE PTR [rsi+0x4],ah
 1011a7e:	push   rbx
 1011a7f:	gs je  0x1011ac7
 1011a82:	jb     0x1011af6
 1011a84:	outs   dx,DWORD PTR ds:[rsi]
 1011a85:	jb     0x1011ad4
 1011a87:	outs   dx,DWORD PTR ds:[rsi]
 1011a88:	fs add BYTE PTR gs:[rax],al
 1011a8c:	(bad)  
 1011a8d:	add    cl,BYTE PTR [rcx+0x6e]
 1011a90:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1011a98:	rex.XB jb 0x1011b04
 1011a9b:	je     0x1011b06
 1011a9d:	movsxd esp,DWORD PTR [rcx+0x6c]
 1011aa0:	push   rbx
 1011aa1:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1011aa6:	outs   dx,BYTE PTR ds:[rsi]
 1011aa7:	add    dl,dh
 1011aa9:	add    BYTE PTR [rbp+0x6e],al
 1011aac:	je     0x1011b13
 1011aae:	jb     0x1011af3
 1011ab0:	jb     0x1011b1b
 1011ab2:	je     0x1011b1d
 1011ab4:	movsxd esp,DWORD PTR [rcx+0x6c]
 1011ab7:	push   rbx
 1011ab8:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1011abd:	outs   dx,BYTE PTR ds:[rsi]
 1011abe:	add    BYTE PTR [rax],al
 1011ac0:	cmp    eax,DWORD PTR [rbx]
 1011ac2:	rex.WR
 1011ac3:	gs (bad) 
 1011ac5:	jbe    0x1011b2c
 1011ac7:	rex.XB jb 0x1011b33
 1011aca:	je     0x1011b35
 1011acc:	movsxd esp,DWORD PTR [rcx+0x6c]
 1011acf:	push   rbx
 1011ad0:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1011ad5:	outs   dx,BYTE PTR ds:[rsi]
 1011ad6:	add    BYTE PTR [rax],al
 1011ad8:	rol    BYTE PTR [rax],cl
 1011ada:	rex.R
 1011adb:	gs ins BYTE PTR es:[rdi],dx
 1011add:	gs je  0x1011b45
 1011ae0:	rex.XB jb 0x1011b4c
 1011ae3:	je     0x1011b4e
 1011ae5:	movsxd esp,DWORD PTR [rcx+0x6c]
 1011ae8:	push   rbx
 1011ae9:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1011aee:	outs   dx,BYTE PTR ds:[rsi]
 1011aef:	add    BYTE PTR [rax+0x5],bl
 1011af2:	ins    BYTE PTR es:[rdi],dx
 1011af3:	jae    0x1011b69
 1011af5:	jb     0x1011b5a
 1011af7:	ins    DWORD PTR es:[rdi],dx
 1011af8:	jo     0x1011b63
 1011afa:	push   rdi
 1011afb:	add    BYTE PTR [rcx+0x5],ah
 1011afe:	ins    BYTE PTR es:[rdi],dx
 1011aff:	jae    0x1011b75
 1011b01:	jb     0x1011b6f
 1011b03:	outs   dx,BYTE PTR gs:[rsi]
 1011b05:	push   rdi
 1011b06:	add    BYTE PTR [rax],al
 1011b08:	(bad)  
 1011b09:	add    al,BYTE PTR [rdi+0x65]
 1011b0c:	je     0x1011b5b
 1011b0e:	outs   dx,DWORD PTR ds:[rsi]
 1011b0f:	fs jne 0x1011b7e
 1011b12:	gs rex.W (bad) 
 1011b15:	outs   dx,BYTE PTR ds:[rsi]
 1011b16:	fs ins BYTE PTR es:[rdi],dx
 1011b18:	gs push rdi
 1011b1a:	add    BYTE PTR [rax],al
 1011b1c:	and    BYTE PTR [rip+0x65646957],al        # 0x66658479
 1011b22:	rex.XB push 0x6f547261
 1011b28:	rex.WRB jne 0x1011b97
 1011b2b:	je     0x1011b96
 1011b2d:	rex.X jns 0x1011ba4
 1011b30:	add    BYTE PTR gs:[rbx+0x45],cl
 1011b34:	push   rdx
 1011b35:	rex.WRX
 1011b36:	rex.RB
 1011b37:	xor    r14,QWORD PTR [rdx]
 1011b3a:	cs fs ins BYTE PTR es:[rdi],dx
 1011b3d:	ins    BYTE PTR es:[rdi],dx
 1011b3e:	add    BYTE PTR [rax],al
 1011b40:	add    BYTE PTR gs:[rdi],bh
 1011b43:	(bad)  
 1011b44:	xor    eax,DWORD PTR [rax+0x59]
 1011b47:	pop    r8
 1011b49:	push   rax
 1011b4a:	rex.RB
 1011b4b:	pop    r8
 1011b4d:	rex pop rdx
 1011b4f:	add    BYTE PTR [rcx+0x75705f03],ch
 1011b55:	jb     0x1011bbc
 1011b57:	movsxd esp,DWORD PTR [rcx+0x6c]
 1011b5a:	ins    BYTE PTR es:[rdi],dx
 1011b5b:	add    BYTE PTR [rbx+0x0],ah
 1011b5e:	(bad)  
 1011b5f:	(bad)  
 1011b60:	xor    al,BYTE PTR [rax+0x59]
 1011b63:	push   r8
 1011b65:	rex.RB
 1011b66:	pop    r8
 1011b68:	pop    rdi
 1011b69:	rex.WXB
 1011b6a:	rex pop rdx
 1011b6c:	add    BYTE PTR [rax],al
 1011b6e:	(bad)  
 1011b6f:	(bad)  
 1011b70:	ja     0x1011bd5
 1011b72:	jae    0x1011be2
 1011b74:	movsxd esi,DWORD PTR [rax+0x79]
 1011b77:	pop    rdi
 1011b78:	jae    0x1011b7a
 1011b7a:	(bad)  
 1011b7b:	add    eax,0x6f74775f
 1011b80:	imul   eax,DWORD PTR [rax],0x5f3f00ec
 1011b86:	jae    0x1011bed
 1011b88:	je     0x1011be9
 1011b8a:	jae    0x1011bf1
 1011b8c:	pop    rdi
 1011b8d:	je     0x1011c01
 1011b8f:	(bad)  
 1011b90:	outs   dx,BYTE PTR ds:[rsi]
 1011b91:	jae    0x1011bff
 1011b93:	(bad)  
 1011b94:	je     0x1011c05
 1011b96:	jb     0x1011bd8
 1011b98:	rex pop rcx
 1011b9a:	push   r8
 1011b9c:	ss pop r8
 1011b9f:	rex.WB push r8
 1011ba1:	rex.RB
 1011ba2:	push   r13
 1011ba4:	pop    rdi
 1011ba5:	rex.RB pop r8
 1011ba7:	rex.XB
 1011ba8:	rex.RB push r8
 1011baa:	push   rsp
 1011bab:	rex.WB
 1011bac:	rex.WRXB
 1011bad:	rex.WRX pop rdi
 1011baf:	push   rax
 1011bb0:	rex.WRXB
 1011bb1:	rex.WB
 1011bb2:	rex.WRX push rsp
 1011bb4:	rex.RB push r10
 1011bb6:	push   rbx
 1011bb7:	rex
 1011bb8:	rex
 1011bb9:	rex pop rdx
 1011bbb:	push   rax
 1011bbc:	ss pop r8
 1011bbf:	rex.WB xor BYTE PTR [r8+0x5a],al
 1011bc3:	rex pop rdx
 1011bc5:	add    bh,cl
 1011bc7:	add    eax,0x69727073
 1011bcc:	outs   dx,BYTE PTR ds:[rsi]
 1011bcd:	je     0x1011c35
 1011bcf:	pop    rdi
 1011bd0:	jae    0x1011bd2
 1011bd2:	(bad)  
 1011bd3:	add    DWORD PTR [rdi+0x43],ebx
 1011bd6:	js     0x1011c50
 1011bd8:	push   rsp
 1011bd9:	push   0x45776f72
 1011bde:	js     0x1011c43
 1011be0:	gs jo  0x1011c57
 1011be3:	imul   ebp,DWORD PTR [rdi+0x6e],0x1280000
 1011bea:	pop    rdi
 1011beb:	pop    rdi
 1011bec:	rex.XB js 0x1011c67
 1011bef:	rex.RX jb 0x1011c53
 1011bf2:	ins    DWORD PTR es:[rdi],dx
 1011bf3:	gs rex.W (bad) 
 1011bf6:	outs   dx,BYTE PTR ds:[rsi]
 1011bf7:	fs ins BYTE PTR es:[rdi],dx
 1011bf9:	gs jb  0x1011c2f
 1011bfc:	add    BYTE PTR [rax],al
 1011bfe:	test   eax,0x6d656d05
 1011c03:	movsxd esi,DWORD PTR [rax+0x79]
 1011c06:	add    BYTE PTR [rax],al
 1011c08:	sahf   
 1011c09:	add    DWORD PTR [rdi+0x61],ebx
 1011c0c:	ins    DWORD PTR es:[rdi],dx
 1011c0d:	jae    0x1011c76
 1011c0f:	pop    rdi
 1011c10:	gs js  0x1011c7c
 1011c13:	je     0x1011c15
 1011c15:	add    BYTE PTR [rax+0x775f5f01],dl
 1011c1b:	addr32 gs je 0x1011c8c
 1011c1f:	(bad)  
 1011c20:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 1011c27:	add    BYTE PTR [rsi],bl
 1011c29:	add    DWORD PTR [rdi+0x5f],ebx
 1011c2c:	rex.XB pop r15
 1011c2e:	jae    0x1011ca0
 1011c30:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 1011c34:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 1011c3b:	ins    BYTE PTR es:[rdi],dx
 1011c3c:	gs jb  0x1011c3f
 1011c3f:	add    BYTE PTR [rdx],bl
 1011c41:	add    DWORD PTR [rdi+0x58],ebx
 1011c44:	movsxd esi,DWORD PTR [rax+0x74]
 1011c47:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 1011c50:	pop    rdi
 1011c51:	gs js  0x1011cbd
 1011c54:	je     0x1011c56
 1011c56:	mov    ch,0x1
 1011c58:	pop    rdi
 1011c59:	movsxd esp,DWORD PTR [rbp+0x78]
 1011c5c:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 1011c64:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0191
 1011c6c:	ja     0x1011cd7
 1011c6e:	outs   dx,BYTE PTR ds:[rsi]
 1011c6f:	imul   esi,DWORD PTR [rbp+riz*2+0x6e],0x86000076
 1011c77:	add    bl,BYTE PTR [rdi+0x69]
 1011c7a:	outs   dx,BYTE PTR ds:[rsi]
 1011c7b:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 1011c83:	add    bl,BYTE PTR [rdi+0x69]
 1011c86:	outs   dx,BYTE PTR ds:[rsi]
 1011c87:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 1011c8f:	add    ch,al
 1011c91:	add    DWORD PTR [rdi+0x63],ebx
 1011c94:	outs   dx,DWORD PTR ds:[rsi]
 1011c95:	outs   dx,BYTE PTR ds:[rsi]
 1011c96:	imul   sp,WORD PTR [rdi+0x74],0x7268
 1011c9c:	gs (bad) 
 1011c9e:	fs ins BYTE PTR es:[rdi],dx
 1011ca0:	outs   dx,DWORD PTR ds:[rsi]
 1011ca1:	movsxd esp,DWORD PTR [rcx+0x6c]
 1011ca4:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 1011ca9:	pop    rdi
 1011caa:	jae    0x1011d11
 1011cac:	je     0x1011d23
 1011cae:	jae    0x1011d15
 1011cb0:	jb     0x1011d1f
 1011cb2:	(bad)  
 1011cb3:	je     0x1011d1d
 1011cb5:	gs jb  0x1011d2a
 1011cb8:	add    BYTE PTR [rax],al
 1011cba:	(bad)
 1011cbe:	outs   dx,DWORD PTR ds:[rsi]
 1011cbf:	ins    DWORD PTR es:[rdi],dx
 1011cc0:	ins    DWORD PTR es:[rdi],dx
 1011cc1:	outs   dx,DWORD PTR ds:[rsi]
 1011cc2:	fs add BYTE PTR gs:[rax],al
 1011cc6:	sbb    al,0x2
 1011cc8:	pop    rdi
 1011cc9:	ins    WORD PTR es:[rdi],dx
 1011ccb:	outs   dx,DWORD PTR ds:[rsi]
 1011ccc:	fs add BYTE PTR gs:[rax],al
 1011cd0:	jns    0x1011cd3
 1011cd2:	pop    rdi
 1011cd3:	pop    rdi
 1011cd4:	jae    0x1011d3b
 1011cd6:	je     0x1011d37
 1011cd8:	(bad)  
 1011cd9:	jo     0x1011d4b
 1011cdb:	pop    rdi
 1011cdc:	je     0x1011d57
 1011cde:	jo     0x1011d45
 1011ce0:	add    BYTE PTR [rax],al
 1011ce2:	rex.WRB push r11
 1011ce4:	push   rsi
 1011ce5:	rex.XB push r10
 1011ce7:	xor    DWORD PTR [rax],esi
 1011ce9:	xor    BYTE PTR [rsi],ch
 1011ceb:	fs ins BYTE PTR es:[rdi],dx
 1011ced:	ins    BYTE PTR es:[rdi],dx
 1011cee:	add    BYTE PTR [rax],al
 1011cf0:	add    BYTE PTR [rcx],al
 1011cf2:	(bad)  
 1011cf3:	je     0x1011d5a
 1011cf5:	jb     0x1011d64
 1011cf7:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 1011cfe:	pop    rcx
 1011cff:	pop    r8
 1011d01:	pop    rax
 1011d02:	pop    rdx
 1011d03:	add    BYTE PTR [rsi+0x1],al
 1011d06:	pop    rdi
 1011d07:	pop    rdi
 1011d08:	movsxd esi,DWORD PTR [rdx+0x74]
 1011d0b:	pop    rdi
 1011d0c:	fs gs (bad) 
 1011d0f:	jne    0x1011d78
 1011d11:	addr32 gs jb 0x1011d74
 1011d15:	push   0x6b6f6f
 1011d1a:	pop    rbx
 1011d1b:	add    al,0x5f
 1011d1d:	jne    0x1011d8d
 1011d1f:	ins    BYTE PTR es:[rdi],dx
 1011d20:	outs   dx,DWORD PTR ds:[rsi]
 1011d21:	movsxd ebp,DWORD PTR [rbx+0x0]
 1011d24:	add    QWORD PTR [rdi+0x5f],rbx
 1011d28:	fs ins BYTE PTR es:[rdi],dx
 1011d2a:	ins    BYTE PTR es:[rdi],dx
 1011d2b:	outs   dx,DWORD PTR ds:[rsi]
 1011d2c:	outs   dx,BYTE PTR ds:[rsi]
 1011d2d:	gs js  0x1011d99
 1011d30:	je     0x1011d32
 1011d32:	test   BYTE PTR [rdx],0x5f
 1011d35:	ins    BYTE PTR es:[rdi],dx
 1011d36:	outs   dx,DWORD PTR ds:[rsi]
 1011d37:	movsxd ebp,DWORD PTR [rbx+0x0]
 1011d3a:	popf   
 1011d3b:	add    ebx,DWORD PTR [rdi+0x6f]
 1011d3e:	outs   dx,BYTE PTR ds:[rsi]
 1011d3f:	gs js  0x1011dab
 1011d42:	je     0x1011d44
 1011d44:	out    dx,al
 1011d45:	add    BYTE PTR [rdi],bh
 1011d47:	pop    rdi
 1011d48:	je     0x1011dc3
 1011d4a:	jo     0x1011db1
 1011d4c:	pop    rdi
 1011d4d:	imul   ebp,DWORD PTR [rsi+0x66],0x74645f6f
 1011d54:	outs   dx,DWORD PTR ds:[rsi]
 1011d55:	jb     0x1011db6
 1011d57:	imul   ebp,DWORD PTR [rsi+0x74],0x616e7265
 1011d5e:	ins    BYTE PTR es:[rdi],dx
 1011d5f:	pop    rdi
 1011d60:	ins    DWORD PTR es:[rdi],dx
 1011d61:	gs je  0x1011dcc
 1011d64:	outs   dx,DWORD PTR ds:[rsi]
 1011d65:	fs rex je 0x1011de2
 1011d69:	jo     0x1011dd0
 1011d6b:	pop    rdi
 1011d6c:	imul   ebp,DWORD PTR [rsi+0x66],0x5140406f
 1011d73:	rex.RB
 1011d74:	rex.B
 1011d75:	pop    r8
 1011d77:	pop    rax
 1011d78:	pop    rdx
 1011d79:	add    BYTE PTR [rax+0x0],dh
 1011d7c:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1011d7e:	push   rbp
 1011d7f:	outs   dx,BYTE PTR ds:[rsi]
 1011d80:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
 1011d87:	imul   edi,DWORD PTR [rdx+0x65],0x430000
 1011d8e:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1011d90:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1011d92:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1011d9a:	rex.RB js 0x1011d9d
 1011d9d:	add    BYTE PTR [rdi+0x6c],ch
 1011da0:	xor    esi,DWORD PTR gs:[rdx]
 1011da3:	cs fs ins BYTE PTR es:[rdi],dx
 1011da6:	ins    BYTE PTR es:[rdi],dx
 1011da7:	add    BYTE PTR [rdx+rax*1],dl
 1011daa:	rex.WRB
 1011dab:	gs jae 0x1011e21
 1011dae:	(bad)  
 1011daf:	rex.X outs dx,DWORD PTR gs:[esi]
 1011db3:	js     0x1011df6
 1011db5:	add    BYTE PTR [rbp+0x53],dl
 1011db8:	rex.RB push r10
 1011dba:	xor    esi,DWORD PTR [rdx]
 1011dbc:	cs fs ins BYTE PTR es:[rdi],dx
 1011dbf:	ins    BYTE PTR es:[rdi],dx
 1011dc0:	add    BYTE PTR [rax],al
 1011dc2:	add    eax,DWORD PTR [rdx]
 1011dc4:	push   rbp
 1011dc5:	jne    0x1011e30
 1011dc7:	fs rex.XB jb 0x1011e30
 1011dcb:	(bad)  
 1011dcc:	je     0x1011e33
 1011dce:	add    BYTE PTR [rax],al
 1011dd0:	stc    
 1011dd1:	add    DWORD PTR [rdx+0x70],edx
 1011dd4:	movsxd edx,DWORD PTR [rbx+0x74]
 1011dd7:	jb     0x1011e42
 1011dd9:	outs   dx,BYTE PTR ds:[rsi]
 1011dda:	addr32 rex.RX jb 0x1011e43
 1011dde:	add    BYTE PTR gs:[r8],al
 1011de2:	or     eax,DWORD PTR [rdx]
 1011de4:	push   rbp
 1011de5:	jne    0x1011e50
 1011de7:	fs push rsp
 1011de9:	outs   dx,DWORD PTR ds:[rsi]
 1011dea:	push   rbx
 1011deb:	je     0x1011e5f
 1011ded:	imul   ebp,DWORD PTR [rsi+0x67],0x50520041
 1011df4:	rex.XB push r10
 1011df6:	push   rsp
 1011df7:	xor    al,0x2e
 1011df9:	fs ins BYTE PTR es:[rdi],dx
 1011dfb:	ins    BYTE PTR es:[rdi],dx
 1011dfc:	add    BYTE PTR [rax],al
 1011dfe:	add    eax,0x74654700
 1011e03:	rex.RX
 1011e04:	rex.R push rbx
 1011e06:	gs jb  0x1011e7f
 1011e09:	imul   esp,DWORD PTR [rbx+0x65],0x80000
 1011e10:	push   rbp
 1011e11:	jae    0x1011e78
 1011e13:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1011e15:	ja     0x1011e5d
 1011e17:	jb     0x1011e7a
 1011e19:	ins    DWORD PTR es:[edi],dx
 1011e1b:	outs   dx,BYTE PTR gs:[rsi]
 1011e1d:	je     0x1011e80
 1011e1f:	je     0x1011e8a
 1011e21:	outs   dx,DWORD PTR ds:[rsi]
 1011e22:	outs   dx,BYTE PTR ds:[rsi]
 1011e23:	rex.W
 1011e24:	gs (bad) 
 1011e26:	jo     0x1011e28
 1011e28:	(bad)  
 1011e29:	add    BYTE PTR [rbx+0x65],dl
 1011e2c:	je     0x1011e77
 1011e2e:	outs   dx,BYTE PTR ds:[rsi]
 1011e2f:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x7269446c
 1011e37:	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
 1011e3c:	jns    0x1011e3e
 1011e3e:	data16 fs cs rex.R
 1011e42:	rex.WR
 1011e43:	rex.WR add BYTE PTR [rax],r8b
 1011e46:	xor    BYTE PTR [rdx],al
 1011e48:	push   rdx
 1011e49:	gs rex.XB ins BYTE PTR es:[edi],dx
 1011e4d:	outs   dx,DWORD PTR ds:[rsi]
 1011e4e:	jae    0x1011eb5
 1011e50:	rex.WXB
 1011e51:	gs jns 0x1011e54
 1011e54:	add    dl,BYTE PTR fs:[rdx+0x65]
 1011e58:	addr32 rex.WRXB jo 0x1011ec1
 1011e5c:	outs   dx,BYTE PTR ds:[rsi]
 1011e5d:	rex.WXB
 1011e5e:	gs jns 0x1011eb8
 1011e61:	add    BYTE PTR [rcx+0x2],ah
 1011e64:	push   rdx
 1011e65:	gs addr32 rex.WRXB jo 0x1011ecf
 1011e6a:	outs   dx,BYTE PTR ds:[rsi]
 1011e6b:	rex.WXB
 1011e6c:	gs jns 0x1011eb4
 1011e6f:	js     0x1011ec8
 1011e71:	add    BYTE PTR [rsi+0x2],ch
 1011e74:	push   rdx
 1011e75:	gs addr32 push rcx
 1011e78:	jne    0x1011edf
 1011e7a:	jb     0x1011ef5
 1011e7c:	push   rsi
 1011e7d:	(bad)  
 1011e7e:	ins    BYTE PTR es:[rdi],dx
 1011e7f:	jne    0x1011ee6
 1011e81:	rex.RB js 0x1011edb
 1011e84:	add    BYTE PTR [rax],al
 1011e86:	jle    0x1011e8a
 1011e88:	push   rdx
 1011e89:	gs addr32 push rbx
 1011e8c:	gs je  0x1011ee5
 1011e8f:	(bad)  
 1011e90:	ins    BYTE PTR es:[rdi],dx
 1011e91:	jne    0x1011ef8
 1011e93:	rex.RB js 0x1011eed
 1011e96:	add    BYTE PTR [rax],al
 1011e98:	test   DWORD PTR [rcx],0x6e65704f
 1011e9e:	push   rax
 1011e9f:	jb     0x1011f10
 1011ea1:	movsxd esp,DWORD PTR [rbp+0x73]
 1011ea4:	jae    0x1011efa
 1011ea6:	outs   dx,DWORD PTR ds:[rsi]
 1011ea7:	imul   esp,DWORD PTR [rbp+0x6e],0x0
 1011eab:	add    BYTE PTR [rdx+0x1],bl
 1011eae:	rex.RXB
 1011eaf:	gs je  0x1011f06
 1011eb2:	outs   dx,DWORD PTR ds:[rsi]
 1011eb3:	imul   esp,DWORD PTR [rbp+0x6e],0x49
 1011eb7:	outs   dx,BYTE PTR ds:[rsi]
 1011eb8:	outs   dx,WORD PTR ds:[rsi]
 1011eba:	jb     0x1011f29
 1011ebc:	(bad)  
 1011ebd:	je     0x1011f28
 1011ebf:	outs   dx,DWORD PTR ds:[rsi]
 1011ec0:	outs   dx,BYTE PTR ds:[rsi]
 1011ec1:	add    BYTE PTR [rsi+0x56734901],al
 1011ec7:	(bad)  
 1011ec8:	ins    BYTE PTR es:[rdi],dx
 1011ec9:	imul   esp,DWORD PTR [rbx+rdx*2+0x69],0x7000064
 1011ed1:	add    DWORD PTR [rbp+0x71],eax
 1011ed4:	jne    0x1011f37
 1011ed6:	ins    BYTE PTR es:[rdi],dx
 1011ed7:	push   rbx
 1011ed8:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x65470156
 1011ee0:	je     0x1011f35
 1011ee2:	imul   esp,DWORD PTR [rsp+rcx*2+0x65],0x6874676e
 1011eea:	push   rdx
 1011eeb:	gs jno 0x1011f63
 1011eee:	imul   esi,DWORD PTR [rdx+0x65],0x78000064
 1011ef5:	add    DWORD PTR [rcx+0x6e],ecx
 1011ef8:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1011f00:	push   rbx
 1011f01:	imul   esp,DWORD PTR [rax+rax*1+0x57],0x74654701
 1011f09:	push   rbx
 1011f0a:	imul   esp,DWORD PTR [rbx+rdx*2+0x75],0x74754162
 1011f12:	push   0x7469726f
 1011f17:	jns    0x1011f19
 1011f19:	add    BYTE PTR [rsi],dh
 1011f1b:	add    DWORD PTR [rdi+0x65],eax
 1011f1e:	je     0x1011f6c
 1011f20:	outs   dx,BYTE PTR gs:[rsi]
 1011f22:	addr32 je 0x1011f8d
 1011f25:	push   rbx
 1011f26:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x6f430076
 1011f2e:	jo     0x1011fa9
 1011f30:	push   rbx
 1011f31:	imul   esp,DWORD PTR [rax+rax*1+0x76],0x696e4901
 1011f39:	je     0x1011fa4
 1011f3b:	(bad)  
 1011f3c:	ins    BYTE PTR es:[rdi],dx
 1011f3d:	imul   edi,DWORD PTR [rdx+0x65],0x6c6341
 1011f44:	and    al,0x1
 1011f46:	rex.RXB
 1011f47:	gs je  0x1011f8b
 1011f4a:	movsxd ebp,DWORD PTR [rcx+rcx*2+0x6e]
 1011f4e:	outs   dx,WORD PTR ds:[rsi]
 1011f50:	jb     0x1011fbf
 1011f52:	(bad)  
 1011f53:	je     0x1011fbe
 1011f55:	outs   dx,DWORD PTR ds:[rsi]
 1011f56:	outs   dx,BYTE PTR ds:[rsi]
 1011f57:	add    BYTE PTR [rsi],dl
 1011f59:	add    BYTE PTR [rcx+0x64],al
 1011f5c:	movsxd esp,DWORD PTR fs:[r13+0x0]
 1011f61:	add    BYTE PTR [rbx],ah
 1011f63:	add    DWORD PTR [rdi+0x65],eax
 1011f66:	je     0x1011fa9
 1011f68:	movsxd esp,DWORD PTR [rbp+0x0]
 1011f6b:	add    BYTE PTR [rax],dl
 1011f6d:	add    BYTE PTR [rcx+0x64],al
 1011f70:	movsxd esp,DWORD PTR fs:[r11+0x65]
 1011f75:	jae    0x1011fea
 1011f77:	rex.B ins BYTE PTR es:[rdi],dx
 1011f79:	ins    BYTE PTR es:[rdi],dx
 1011f7a:	outs   dx,DWORD PTR ds:[rsi]
 1011f7b:	ja     0x1011fe2
 1011f7d:	movsxd esp,DWORD PTR fs:[r13+0x0]
 1011f82:	adc    eax,DWORD PTR [rax]
 1011f84:	rex.B
 1011f85:	fs movsxd esp,DWORD PTR fs:[r11+0x65]
 1011f8b:	jae    0x1012000
 1011f8d:	rex.R
 1011f8e:	outs   dx,BYTE PTR gs:[rsi]
 1011f90:	imul   esp,DWORD PTR [rbp+0x64],0x656341
 1011f97:	add    BYTE PTR [rdx+0x1],cl
 1011f9a:	rex.RXB
 1011f9b:	gs je  0x1011ff1
 1011f9e:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1011fa2:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 1011faa:	imul   esi,DWORD PTR [rax+0x74],0x654c726f
 1011fb1:	outs   dx,BYTE PTR ds:[rsi]
 1011fb2:	addr32 je 0x101201d
 1011fb5:	add    BYTE PTR [rsi+0x74655302],dh
 1011fbb:	push   rbx
 1011fbc:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1011fc0:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 1011fc8:	imul   esi,DWORD PTR [rax+0x74],0x6144726f
 1011fcf:	movsxd ebp,DWORD PTR [rax+rax*1-0x48]
 1011fd3:	add    dl,BYTE PTR [rbx+0x65]
 1011fd6:	je     0x101202b
 1011fd8:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1011fdc:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 1011fe4:	imul   esi,DWORD PTR [rax+0x74],0x774f726f
 1011feb:	outs   dx,BYTE PTR ds:[rsi]
 1011fec:	gs jb  0x1011fef
 1011fef:	add    BYTE PTR [rdi+0x74655302],dh
 1011ff5:	push   rbx
 1011ff6:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1011ffa:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 1012002:	imul   esi,DWORD PTR [rax+0x74],0x7247726f
 1012009:	outs   dx,DWORD PTR ds:[rsi]
 101200a:	jne    0x101207c
 101200c:	add    BYTE PTR [rax],al
 101200e:	ja     0x1012011
 1012010:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1012012:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 101201a:	push   rbx
 101201b:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 101201f:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 1012027:	imul   esi,DWORD PTR [rax+0x74],0x726f
 101202e:	rex.B
 101202f:	rex.R push rsi
 1012031:	push   r8
 1012033:	xor    rsi,QWORD PTR [r10]
 1012036:	cs fs ins BYTE PTR es:[rdi],dx
 1012039:	ins    BYTE PTR es:[rdi],dx
 101203a:	add    BYTE PTR [rax],al
 101203c:	rol    BYTE PTR [rbx+rdx*2],0x6c
 1012040:	gs gs jo 0x1012044
 1012044:	out    dx,al
 1012045:	add    BYTE PTR [rbp+0x6e],al
 1012048:	movsxd ebp,DWORD PTR [rdi+0x64]
 101204b:	gs push rax
 101204d:	outs   dx,DWORD PTR ds:[rsi]
 101204e:	imul   ebp,DWORD PTR [rsi+0x74],0xce007265
 1012055:	add    al,0x54
 1012057:	gs jb  0x10120c7
 101205a:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 1012061:	outs   dx,DWORD PTR ds:[rsi]
 1012062:	movsxd esp,DWORD PTR [rbp+0x73]
 1012065:	jae    0x1012067
 1012067:	add    dh,al
 1012069:	add    DWORD PTR [rdi+0x65],eax
 101206c:	je     0x10120b1
 101206e:	jne    0x10120e2
 1012070:	jb     0x10120d7
 1012072:	outs   dx,BYTE PTR ds:[rsi]
 1012073:	je     0x10120c5
 1012075:	jb     0x10120e6
 1012077:	movsxd esp,DWORD PTR [rbp+0x73]
 101207a:	jae    0x101207c
 101207c:	loop   0x1012082
 101207e:	push   rbp
 101207f:	outs   dx,BYTE PTR ds:[rsi]
 1012080:	push   0x6c646e61
 1012085:	gs fs rex.RB js 0x10120ed
 101208a:	gs jo  0x1012101
 101208d:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1012094:	gs jb  0x1012097
 1012097:	add    BYTE PTR [rbx+0x74655304],dh
 101209d:	push   rbp
 101209e:	outs   dx,BYTE PTR ds:[rsi]
 101209f:	push   0x6c646e61
 10120a4:	gs fs rex.RB js 0x101210c
 10120a9:	gs jo  0x1012120
 10120ac:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 10120b3:	gs jb  0x10120b6
 10120b6:	add    al,BYTE PTR [rbx]
 10120b8:	rex.WB jae 0x10120ff
 10120bb:	gs (bad) 
 10120bd:	jne    0x1012126
 10120bf:	addr32 gs jb 0x1012113
 10120c3:	jb     0x101212a
 10120c5:	jae    0x101212c
 10120c7:	outs   dx,BYTE PTR ds:[rsi]
 10120c8:	je     0x10120ca
 10120ca:	es add al,0x52
 10120cd:	je     0x101213b
 10120cf:	push   rsi
 10120d0:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 10120d7:	outs   dx,BYTE PTR ds:[rsi]
 10120d8:	ja     0x1012143
 10120da:	outs   dx,BYTE PTR ds:[rsi]
 10120db:	add    BYTE PTR fs:[rax],al
 10120de:	(bad)  
 10120df:	add    al,0x52
 10120e1:	je     0x101214f
 10120e3:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10120e5:	outs   dx,DWORD PTR ds:[rsi]
 10120e6:	imul   esi,DWORD PTR [rbp+0x70],0x46
 10120ea:	jne    0x101215a
 10120ec:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 10120f0:	outs   dx,BYTE PTR ds:[rsi]
 10120f1:	rex.RB outs dx,BYTE PTR ds:[rsi]
 10120f3:	je     0x1012167
 10120f5:	jns    0x10120f7
 10120f7:	add    BYTE PTR [rax],bl
 10120f9:	add    al,0x52
 10120fb:	je     0x1012169
 10120fd:	rex.XB (bad) 
 10120ff:	jo     0x1012175
 1012101:	jne    0x1012175
 1012103:	rex.XB outs dx,DWORD PTR gs:[rsi]
 1012106:	outs   dx,BYTE PTR ds:[rsi]
 1012107:	je     0x101216e
 1012109:	js     0x101217f
 101210b:	add    bl,cl
 101210d:	add    BYTE PTR [rbp+riz*2+0x63],al
 1012111:	outs   dx,DWORD PTR ds:[rsi]
 1012112:	fs gs push rax
 1012115:	outs   dx,DWORD PTR ds:[rsi]
 1012116:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 101211d:	add    edx,DWORD PTR [rcx+0x75]
 1012120:	gs jb  0x101219c
 1012123:	push   rax
 1012124:	gs jb  0x101218d
 1012127:	outs   dx,DWORD PTR ds:[rsi]
 1012128:	jb     0x1012197
 101212a:	(bad)  
 101212b:	outs   dx,BYTE PTR ds:[rsi]
 101212c:	movsxd esp,DWORD PTR [rbp+0x43]
 101212f:	outs   dx,DWORD PTR ds:[rsi]
 1012130:	jne    0x10121a0
 1012132:	je     0x1012199
 1012134:	jb     0x1012136
 1012136:	(bad)  
 1012137:	add    al,BYTE PTR [rdi+0x65]
 101213a:	je     0x1012190
 101213c:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 1012143:	je     0x1012145
 1012145:	add    bl,cl
 1012147:	add    DWORD PTR [rdi+0x65],eax
 101214a:	je     0x101218f
 101214c:	jne    0x10121c0
 101214e:	jb     0x10121b5
 1012150:	outs   dx,BYTE PTR ds:[rsi]
 1012151:	je     0x10121a7
 1012153:	push   0x64616572
 1012158:	rex.WB
 1012159:	add    BYTE PTR fs:[rax],al
 101215c:	mov    DWORD PTR [rcx],0x43746547
 1012162:	jne    0x10121d6
 1012164:	jb     0x10121cb
 1012166:	outs   dx,BYTE PTR ds:[rsi]
 1012167:	je     0x10121b9
 1012169:	jb     0x10121da
 101216b:	movsxd esp,DWORD PTR [rbp+0x73]
 101216e:	jae    0x10121b9
 1012170:	add    BYTE PTR fs:[rax+0x74654702],al
 1012177:	push   rbx
 1012178:	jns    0x10121ed
 101217a:	je     0x10121e1
 101217c:	ins    DWORD PTR es:[rdi],dx
 101217d:	push   rsp
 101217e:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 1012185:	ins    BYTE PTR es:[rdi],dx
 1012186:	gs push rsp
 1012188:	imul   ebp,DWORD PTR [rbp+0x65],0x53046500
 101218f:	gs je  0x10121d7
 1012192:	outs   dx,BYTE PTR ds:[rsi]
 1012193:	jbe    0x10121fe
 1012195:	jb     0x1012206
 1012197:	outs   dx,BYTE PTR ds:[rsi]
 1012198:	ins    DWORD PTR es:[rdi],dx
 1012199:	outs   dx,BYTE PTR gs:[rsi]
 101219b:	je     0x10121f3
 101219d:	(bad)  
 101219e:	jb     0x1012209
 10121a0:	(bad)  
 10121a1:	(bad)  
 10121a2:	ins    BYTE PTR es:[rdi],dx
 10121a3:	gs push rdi
 10121a5:	add    bl,ah
 10121a7:	add    DWORD PTR [rdi+0x65],eax
 10121aa:	je     0x10121f1
 10121ac:	outs   dx,BYTE PTR ds:[rsi]
 10121ad:	jbe    0x1012218
 10121af:	jb     0x1012220
 10121b1:	outs   dx,BYTE PTR ds:[rsi]
 10121b2:	ins    DWORD PTR es:[rdi],dx
 10121b3:	outs   dx,BYTE PTR gs:[rsi]
 10121b5:	je     0x101220d
 10121b7:	(bad)  
 10121b8:	jb     0x1012223
 10121ba:	(bad)  
 10121bb:	(bad)  
 10121bc:	ins    BYTE PTR es:[rdi],dx
 10121bd:	gs push rdi
 10121bf:	add    BYTE PTR [rax+rax*1+0x43],ah
 10121c3:	outs   dx,DWORD PTR ds:[rsi]
 10121c4:	ins    DWORD PTR es:[rdi],dx
 10121c5:	jo     0x1012228
 10121c7:	jb     0x101222e
 10121c9:	push   rbx
 10121ca:	je     0x101223e
 10121cc:	imul   ebp,DWORD PTR [rsi+0x67],0xd3000057
 10121d3:	add    cl,BYTE PTR [rax+0x65]
 10121d6:	(bad)  
 10121d7:	jo     0x101221a
 10121d9:	ins    BYTE PTR es:[rdi],dx
 10121da:	ins    BYTE PTR es:[rdi],dx
 10121db:	outs   dx,DWORD PTR ds:[rsi]
 10121dc:	movsxd eax,DWORD PTR [rax]
 10121de:	xlat   BYTE PTR ds:[rbx]
 10121df:	add    cl,BYTE PTR [rax+0x65]
 10121e2:	(bad)  
 10121e3:	jo     0x101222b
 10121e5:	jb     0x101224c
 10121e7:	add    BYTE PTR gs:[rax],al
 10121ea:	fiadd  DWORD PTR [rdx]
 10121ec:	rex.W
 10121ed:	gs (bad) 
 10121ef:	jo     0x1012243
 10121f1:	gs rex.B ins BYTE PTR es:[rdi],dx
 10121f4:	ins    BYTE PTR es:[rdi],dx
 10121f5:	outs   dx,DWORD PTR ds:[rsi]
 10121f6:	movsxd eax,DWORD PTR [rax]
 10121f8:	add    BYTE PTR [rip+0x74726956],al        # 0x75738b54
 10121fe:	jne    0x1012261
 1012200:	ins    BYTE PTR es:[rdi],dx
 1012201:	push   rcx
 1012202:	jne    0x1012269
 1012204:	jb     0x101227f
 1012206:	add    BYTE PTR [rax],al
 1012208:	add    BYTE PTR [rbx+rdx*2],0x65
 101220c:	je     0x101225a
 101220e:	(bad)  
 101220f:	jae    0x1012285
 1012211:	rex.RB jb 0x1012286
 1012214:	outs   dx,DWORD PTR ds:[rsi]
 1012215:	jb     0x1012217
 1012217:	add    al,cl
 1012219:	add    BYTE PTR [rbp+riz*2+0x62],al
 101221d:	jne    0x1012286
 101221f:	rex.X jb 0x1012287
 1012222:	(bad)  
 1012223:	imul   eax,DWORD PTR [rax],0x0
 1012226:	sbb    al,BYTE PTR [rdx]
 1012228:	rex.RXB
 1012229:	gs je  0x1012279
 101222c:	outs   dx,DWORD PTR ds:[rsi]
 101222d:	fs jne 0x101229c
 1012230:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 101223a:	add    BYTE PTR [rax],al
 101223c:	and    eax,DWORD PTR [rcx]
 101223e:	rex.RB js 0x10122b1
 1012241:	(bad)  
 1012242:	outs   dx,BYTE PTR ds:[rsi]
 1012243:	rex.RB outs dx,BYTE PTR fs:[rsi]
 1012246:	jbe    0x10122b1
 1012248:	jb     0x10122b9
 101224a:	outs   dx,BYTE PTR ds:[rsi]
 101224b:	ins    DWORD PTR es:[rdi],dx
 101224c:	outs   dx,BYTE PTR gs:[rsi]
 101224e:	je     0x10122a3
 1012250:	je     0x10122c4
 1012252:	imul   ebp,DWORD PTR [rsi+0x67],0x49005773
 1012259:	add    al,BYTE PTR [rdi+0x65]
 101225c:	je     0x10122ae
 101225e:	jb     0x10122c9
 1012260:	jbe    0x10122c3
 1012262:	je     0x10122c9
 1012264:	push   rax
 1012265:	jb     0x10122d6
 1012267:	imul   bp,WORD PTR [rbp+riz*2+0x53],0x7274
 101226e:	imul   ebp,DWORD PTR [rsi+0x67],0xf1000057
 1012275:	add    DWORD PTR [rdi+0x65],eax
 1012278:	je     0x10122c0
 101227a:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
 1012282:	(bad)  
 1012283:	jne    0x10122f9
 1012285:	gs jae 0x10122df
 1012288:	add    BYTE PTR [rax],al
 101228a:	imul   eax,DWORD PTR [rbx],0x746c754d
 1012290:	imul   eax,DWORD PTR [rdx+0x79],0x6f546574
 1012297:	push   rdi
 1012298:	imul   esp,DWORD PTR [rbp+riz*2+0x43],0x726168
 10122a0:	push   rdx
 10122a1:	add    BYTE PTR [rbx+0x6c],al
 10122a4:	outs   dx,DWORD PTR ds:[rsi]
 10122a5:	jae    0x101230c
 10122a7:	rex.W (bad) 
 10122a9:	outs   dx,BYTE PTR ds:[rsi]
 10122aa:	fs ins BYTE PTR es:[rdi],dx
 10122ac:	add    BYTE PTR gs:[rax],cl
 10122af:	add    eax,0x74696157
 10122b4:	rex.RX outs dx,DWORD PTR ds:[rsi]
 10122b6:	jb     0x101230b
 10122b8:	imul   ebp,DWORD PTR [rsi+0x67],0x624f656c
 10122bf:	push   0x65
 10122c1:	movsxd esi,DWORD PTR [rax+rax*1-0x58]
 10122c5:	add    BYTE PTR [rbx+0x72],al
 10122c8:	gs (bad) 
 10122ca:	je     0x1012331
 10122cc:	push   rax
 10122cd:	jb     0x101233e
 10122cf:	movsxd esp,DWORD PTR [rbp+0x73]
 10122d2:	jae    0x101232b
 10122d4:	add    BYTE PTR [rax],al
 10122d6:	(bad)  
 10122d7:	add    eax,0x7274736c
 10122dc:	ins    BYTE PTR es:[rdi],dx
 10122dd:	outs   dx,BYTE PTR gs:[rsi]
 10122df:	add    BYTE PTR [r8],al
 10122e2:	add    DWORD PTR fs:[rsi+0x6f],eax
 10122e6:	jb     0x1012355
 10122e8:	(bad)  
 10122e9:	je     0x1012338
 10122eb:	gs jae 0x1012361
 10122ee:	(bad)  
 10122ef:	addr32 gs push rdi
 10122f2:	add    BYTE PTR [rax],al
 10122f4:	add    rcx,QWORD PTR [rdi+r13*2+0x63]
 10122f9:	(bad)  
 10122fa:	ins    BYTE PTR es:[rdi],dx
 10122fb:	rex.RX jb 0x1012363
 10122fe:	gs add ch,bh
 1012301:	add    edx,DWORD PTR [rdx+0x65]
 1012304:	ins    BYTE PTR es:[rdi],dx
 1012305:	gs (bad) 
 1012307:	jae    0x101236e
 1012309:	rex.WRB jne 0x1012380
 101230c:	gs js  0x101230f
 101230f:	add    BYTE PTR [rax*1+0x74697257],dh
 1012316:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x0],0x69460134
 1012320:	outs   dx,BYTE PTR ds:[rsi]
 1012321:	fs rex.XB ins BYTE PTR es:[rdi],dx
 1012324:	outs   dx,DWORD PTR ds:[rsi]
 1012325:	jae    0x101238c
 1012327:	add    BYTE PTR [rcx],cl
 1012329:	add    al,BYTE PTR [rdi+0x65]
 101232c:	je     0x101237a
 101232e:	outs   dx,DWORD PTR ds:[rsi]
 101232f:	movsxd esp,DWORD PTR [rcx+0x6c]
 1012332:	push   rsp
 1012333:	imul   ebp,DWORD PTR [rbp+0x65],0x1630000
 101233a:	rex.RX outs dx,DWORD PTR ds:[rsi]
 101233c:	jb     0x10123ab
 101233e:	(bad)  
 101233f:	je     0x101238e
 1012341:	gs jae 0x10123b7
 1012344:	(bad)  
 1012345:	add    BYTE PTR gs:[r8d],al
 101234a:	pop    rcx
 101234b:	add    ecx,DWORD PTR [rbp+0x61]
 101234e:	jo     0x10123a6
 1012350:	imul   esp,DWORD PTR [rbp+0x77],0x6946664f
 1012357:	ins    BYTE PTR es:[rdi],dx
 1012358:	add    BYTE PTR gs:[rax+0x1],ah
 101235c:	rex.RX ins BYTE PTR es:[rdi],dx
 101235e:	jne    0x10123d3
 1012360:	push   0x77656956
 1012365:	rex.WRXB
 1012366:	imul   r13w,WORD PTR [rbp+r12*2+0x0],0x4e5
 101236e:	push   rbp
 101236f:	outs   dx,BYTE PTR ds:[rsi]
 1012370:	ins    DWORD PTR es:[rdi],dx
 1012371:	(bad)  
 1012372:	jo     0x10123ca
 1012374:	imul   esp,DWORD PTR [rbp+0x77],0x6946664f
 101237b:	ins    BYTE PTR es:[rdi],dx
 101237c:	add    BYTE PTR gs:[rcx+0x65724300],cl
 1012383:	(bad)  
 1012384:	je     0x10123eb
 1012386:	imul   r13d,DWORD PTR [rbp+r12*2+0x4d],0x69707061
 101238f:	outs   dx,BYTE PTR ds:[rsi]
 1012390:	add    BYTE PTR [r8d],al
 1012394:	mov    WORD PTR [rax],es
 1012396:	rex.XB jb 0x10123fe
 1012399:	(bad)  
 101239a:	je     0x1012401
 101239c:	imul   r13d,DWORD PTR [rbp+r12*2+0x4d],0x69707061
 10123a5:	outs   dx,BYTE PTR ds:[rsi]
 10123a6:	addr32 push rdi
 10123a8:	add    BYTE PTR [rax],al
 10123aa:	sbb    DWORD PTR [rdx],eax
 10123ac:	rex.RXB
 10123ad:	gs je  0x10123fd
 10123b0:	outs   dx,DWORD PTR ds:[rsi]
 10123b1:	fs jne 0x1012420
 10123b4:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x41656d61
 10123be:	add    BYTE PTR [rax],al
 10123c0:	sbb    eax,DWORD PTR [rdx]
 10123c2:	rex.RXB
 10123c3:	gs je  0x1012413
 10123c6:	outs   dx,DWORD PTR ds:[rsi]
 10123c7:	fs jne 0x1012436
 10123ca:	gs rex.W (bad) 
 10123cd:	outs   dx,BYTE PTR ds:[rsi]
 10123ce:	fs ins BYTE PTR es:[rdi],dx
 10123d0:	add    BYTE PTR gs:[r8],al
 10123d4:	loop   0x10123d7
 10123d6:	rex.RXB
 10123d7:	gs je  0x101241f
 10123da:	outs   dx,BYTE PTR ds:[rsi]
 10123db:	jbe    0x1012446
 10123dd:	jb     0x101244e
 10123df:	outs   dx,BYTE PTR ds:[rsi]
 10123e0:	ins    DWORD PTR es:[rdi],dx
 10123e1:	outs   dx,BYTE PTR gs:[rsi]
 10123e3:	je     0x101243b
 10123e5:	(bad)  
 10123e6:	jb     0x1012451
 10123e8:	(bad)  
 10123e9:	(bad)  
 10123ea:	ins    BYTE PTR es:[rdi],dx
 10123eb:	add    BYTE PTR gs:[r11+0x74754f03],cl
 10123f3:	jo     0x101246a
 10123f5:	je     0x101243b
 10123f7:	gs (bad) 
 10123f9:	jne    0x1012462
 10123fb:	push   rbx
 10123fc:	je     0x1012470
 10123fe:	imul   ebp,DWORD PTR [rsi+0x67],0x8c000041
 1012405:	add    ecx,DWORD PTR [rdi+0x75]
 1012408:	je     0x101247a
 101240a:	jne    0x1012480
 101240c:	rex.R
 101240d:	gs (bad) 
 101240f:	jne    0x1012478
 1012411:	push   rbx
 1012412:	je     0x1012486
 1012414:	imul   ebp,DWORD PTR [rsi+0x67],0x76000057
 101241b:	add    al,BYTE PTR [rdi+0x65]
 101241e:	je     0x1012473
 1012420:	jns    0x1012495
 1012422:	je     0x1012489
 1012424:	ins    DWORD PTR es:[rdi],dx
 1012425:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 101242d:	jns    0x1012470
 101242f:	add    BYTE PTR [rax+rax*1+0x43],bh
 1012433:	jb     0x101249a
 1012435:	(bad)  
 1012436:	je     0x101249d
 1012438:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1012440:	jns    0x1012483
 1012442:	add    BYTE PTR [rax],al
 1012444:	mov    BYTE PTR [rax],al
 1012446:	rex.XB jb 0x10124ae
 1012449:	(bad)  
 101244a:	je     0x10124b1
 101244c:	imul   r13d,DWORD PTR [rbp+r12*2+0x41],0x4400d400
 1012455:	gs ins BYTE PTR es:[rdi],dx
 1012457:	gs je  0x10124bf
 101245a:	imul   r13d,DWORD PTR [rbp+r12*2+0x41],0x46013800
 1012463:	imul   ebp,DWORD PTR [rsi+0x64],0x73726946
 101246a:	je     0x10124b2
 101246c:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x1490000
 1012474:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x7478654e
 101247c:	imul   r13d,DWORD PTR [rbp+r12*2+0x41],0x43007000
 1012485:	outs   dx,DWORD PTR ds:[rsi]
 1012486:	jo     0x1012501
 1012488:	imul   r13d,DWORD PTR [rbp+r12*2+0x41],0x4702ab00
 1012491:	gs je  0x10124ea
 1012494:	gs jb  0x101250a
 1012497:	imul   ebp,DWORD PTR [rdi+0x6e],0x417845
 101249e:	add    ecx,DWORD PTR [r15+rbp*2+0x61]
 10124a3:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 10124ac:	add    BYTE PTR [rax],al
 10124ae:	fwait
 10124af:	add    BYTE PTR [rbx+0x72],al
 10124b2:	gs (bad) 
 10124b4:	je     0x101251b
 10124b6:	rex.WRB jne 0x101252d
 10124b9:	gs js  0x10124fd
 10124bc:	add    BYTE PTR [rax],al
 10124be:	add    r9d,DWORD PTR [rdi+r13*2+0x63]
 10124c3:	(bad)  
 10124c4:	ins    BYTE PTR es:[rdi],dx
 10124c5:	rex.B ins BYTE PTR es:[rdi],dx
 10124c7:	ins    BYTE PTR es:[rdi],dx
 10124c8:	outs   dx,DWORD PTR ds:[rsi]
 10124c9:	movsxd eax,DWORD PTR [rax]
 10124cb:	add    BYTE PTR [rax+0x1],ch
 10124ce:	rex.RX jb 0x1012536
 10124d1:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 10124da:	add    ecx,DWORD PTR ds:[rdi+rbp*2+0x61]
 10124df:	imul   r12,QWORD PTR fs:[rdx+0x72],0x41797261
 10124e8:	add    BYTE PTR [rax],al
 10124ea:	cmp    BYTE PTR [rdi+rbx*2],al
 10124ed:	jae    0x1012566
 10124ef:	jae    0x1012554
 10124f1:	(bad)  
 10124f2:	outs   dx,BYTE PTR ds:[rsi]
 10124f3:	pop    di
 10124f5:	jae    0x1012556
 10124f7:	ins    BYTE PTR es:[rdi],dx
 10124f8:	add    BYTE PTR [rax],al
 10124fa:	xchg   BYTE PTR [rdi+rbx*2],al
 10124fd:	jbe    0x1012572
 10124ff:	outs   dx,BYTE PTR ds:[rsi]
 1012500:	ja     0x1012572
 1012502:	jb     0x101256d
 1012504:	outs   dx,BYTE PTR ds:[rsi]
 1012505:	je     0x101256d
 1012507:	pop    rdi
 1012508:	ins    BYTE PTR es:[rdi],dx
 1012509:	add    BYTE PTR [rbp+0x6d656d05],ch
 101250f:	jae    0x1012576
 1012511:	je     0x1012513
 1012513:	add    bl,ch
 1012515:	add    ebx,DWORD PTR [rdi+0x73]
 1012518:	outs   dx,BYTE PTR ds:[rsi]
 1012519:	ja     0x101258b
 101251b:	jb     0x1012586
 101251d:	outs   dx,BYTE PTR ds:[rsi]
 101251e:	je     0x1012586
 1012520:	pop    rdi
 1012521:	jae    0x1012523
 1012523:	add    BYTE PTR [rcx],al
 1012525:	add    ebx,DWORD PTR [rdi+0x6c]
 1012528:	je     0x1012599
 101252a:	(bad)  
 101252b:	add    BYTE PTR [rcx+rax*1+0x5f],dl
 101252f:	pop    rdi
 1012530:	imul   ebp,DWORD PTR [rdi+0x62],0x6e75665f
 1012537:	movsxd eax,DWORD PTR [rax]
 1012539:	add    BYTE PTR [rbx+0x5],bl
 101253c:	data16 jo 0x10125b1
 101253f:	imul   ebp,DWORD PTR [rsi+0x74],0x3e30066
 1012546:	pop    rdi
 1012547:	jae    0x10125b7
 1012549:	jo     0x10125bd
 101254b:	imul   ebp,DWORD PTR [rsi+0x74],0x735f66
 1012552:	add    DWORD PTR [rdi+rbx*2],0x76
 1012556:	jae    0x10125c6
 1012558:	jo     0x10125cc
 101255a:	imul   ebp,DWORD PTR [rsi+0x74],0x735f66
 1012561:	add    BYTE PTR [rdi+0x73765f04],al
 1012567:	outs   dx,BYTE PTR ds:[rsi]
 1012568:	ja     0x10125da
 101256a:	jb     0x10125d5
 101256c:	outs   dx,BYTE PTR ds:[rsi]
 101256d:	je     0x10125d5
 101256f:	pop    rdi
 1012570:	jae    0x1012572
 1012572:	stos   BYTE PTR es:[rdi],al
 1012573:	add    eax,0x636d656d
 1012578:	jo     0x10125f3
 101257a:	pop    rdi
 101257b:	jae    0x101257d
 101257d:	add    bl,bl
 101257f:	add    eax,0x63727473
 1012584:	jo     0x10125ff
 1012586:	pop    rdi
 1012587:	jae    0x1012589
 1012589:	add    BYTE PTR [rdi],cl
 101258b:	add    al,0x5f
 101258d:	jae    0x1012603
 101258f:	jb     0x10125fa
 1012591:	movsxd ebp,DWORD PTR [rbp+0x70]
 1012594:	add    BYTE PTR [rax],al
 1012596:	jrcxz  0x101259d
 1012598:	jae    0x101260e
 101259a:	jb     0x101260a
 101259c:	movsxd ebp,DWORD PTR [rbp+0x70]
 101259f:	add    ch,ah
 10125a1:	add    eax,0x6e727473
 10125a6:	movsxd esi,DWORD PTR [rax+0x79]
 10125a9:	pop    rdi
 10125aa:	jae    0x10125ac
 10125ac:	call   0x737598b6
 10125b1:	jb     0x1012616
 10125b3:	push   0x72
	...
 10125c4:	gs jmp 0x10125fc
 10125c7:	rex.WRXB add BYTE PTR [r8],r8b
 10125ca:	add    BYTE PTR [rax],al
 10125cc:	mov    WORD PTR [rdi],fs
 10125ce:	add    DWORD PTR [rax],eax
 10125d0:	add    DWORD PTR [rax],eax
 10125d2:	add    BYTE PTR [rax],al
 10125d4:	sub    al,BYTE PTR [rax]
 10125d6:	add    BYTE PTR [rax],al
 10125d8:	sub    al,BYTE PTR [rax]
 10125da:	add    BYTE PTR [rax],al
 10125dc:	call   0xffffffff91012706
 10125e1:	add    DWORD PTR es:[rax],eax
 10125e4:	cmp    BYTE PTR [rdi],ah
 10125e6:	add    DWORD PTR [rax],eax
 10125e8:	movabs al,ds:0xf0000087b0000088
 10125f1:	mov    BYTE PTR [rax],al
 10125f3:	add    BYTE PTR [rax],dl
 10125f5:	mov    BYTE PTR [rax],al
 10125f7:	add    BYTE PTR [rax+0x700000aa],al
 10125fd:	mov    BYTE PTR [rax],al
 10125ff:	add    al,dl
 1012601:	xchg   DWORD PTR [rax],eax
 1012603:	add    BYTE PTR [rax],al
 1012605:	stos   BYTE PTR es:[rdi],al
 1012606:	add    BYTE PTR [rax],al
 1012608:	mov    BYTE PTR [rax],al
 101260b:	add    BYTE PTR [rax-0x5b],dl
 101260e:	add    BYTE PTR [rax],al
 1012610:	shl    BYTE PTR [rdx-0x74800000],0x0
 1012617:	add    BYTE PTR [rax],dh
 1012619:	mov    DWORD PTR [rax],eax
 101261b:	add    al,dl
 101261d:	lahf   
 101261e:	add    BYTE PTR [rax],al
 1012620:	push   rax
 1012621:	movabs eax,ds:0xa5000000a4b00000
 101262a:	add    BYTE PTR [rax],al
 101262c:	add    BYTE PTR [rdi+0x36a80000],bl
 1012632:	add    BYTE PTR [rax],al
 1012634:	shl    dl,0x0
 1012637:	add    BYTE PTR [rax+0x9d],al
 101263d:	sahf   
 101263e:	add    BYTE PTR [rax],al
 1012640:	sbb    BYTE PTR [rsi+0x36c00000],0x0
 1012647:	add    BYTE PTR [rax-0x64],dl
 101264a:	add    BYTE PTR [rax],al
 101264c:	add    BYTE PTR [rax-0x60c00000],cl
 1012652:	add    BYTE PTR [rax],al
 1012654:	push   rax
 1012655:	lahf   
 1012656:	add    BYTE PTR [rax],al
 1012658:	jo     0x10125f2
 101265a:	add    BYTE PTR [rax],al
 101265c:	jo     0x10125f7
 101265e:	add    BYTE PTR [rax],al
 1012660:	xor    BYTE PTR [rax+rax*1+0x87e000],bl
 1012667:	add    BYTE PTR [rax],dl
 1012669:	mov    WORD PTR [rax],es
 101266b:	add    BYTE PTR [rax],dl
 101266d:	pushf  
 101266e:	add    BYTE PTR [rax],al
 1012670:	and    BYTE PTR [rdi-0x65900000],bl
 1012676:	add    BYTE PTR [rax],al
 1012678:	movabs al,ds:0xc000008c8000009a
 1012681:	mov    WORD PTR [rax],es
 1012683:	add    BYTE PTR [rax],ah
 1012685:	xchg   esp,eax
 1012686:	add    BYTE PTR [rax],al
 1012688:	add    BYTE PTR [rbp-0x6d700000],cl
 101268e:	add    BYTE PTR [rax],al
 1012690:	xchg   edi,eax
 1012691:	(bad)  
 1012692:	add    DWORD PTR [rax],eax
 1012694:	scas   eax,DWORD PTR es:[rdi]
 1012695:	(bad)  
 1012696:	add    DWORD PTR [rax],eax
 1012698:	ret    0x127
 101269b:	add    dl,bl
 101269d:	(bad)  
 101269e:	add    DWORD PTR [rax],eax
 10126a0:	in     eax,dx
 10126a1:	(bad)  
 10126a2:	add    DWORD PTR [rax],eax
 10126a4:	adc    BYTE PTR [rax],ch
 10126a6:	add    DWORD PTR [rax],eax
 10126a8:	sub    BYTE PTR cs:[rcx],al
 10126ab:	add    BYTE PTR [rax+rbp*1+0x1],al
 10126af:	add    BYTE PTR [rdx+0x28],ah
 10126b2:	add    DWORD PTR [rax],eax
 10126b4:	jns    0x10126de
 10126b6:	add    DWORD PTR [rax],eax
 10126b8:	leave  
 10126b9:	sub    BYTE PTR [rcx],al
 10126bb:	add    dl,bh
 10126bd:	sub    BYTE PTR [rcx],al
 10126bf:	add    BYTE PTR [rax],bl
 10126c1:	sub    DWORD PTR [rcx],eax
 10126c3:	add    BYTE PTR [rdi],bh
 10126c5:	sub    DWORD PTR [rcx],eax
 10126c7:	add    BYTE PTR [rax+0x29],bh
 10126ca:	add    DWORD PTR [rax],eax
 10126cc:	lods   al,BYTE PTR ds:[rsi]
 10126cd:	sub    DWORD PTR [rcx],eax
 10126cf:	add    ch,bl
 10126d1:	sub    DWORD PTR [rcx],eax
 10126d3:	add    BYTE PTR [rsi],cl
 10126d5:	sub    al,BYTE PTR [rcx]
 10126d7:	add    BYTE PTR [rdx],dh
 10126d9:	sub    al,BYTE PTR [rcx]
 10126db:	add    BYTE PTR [rbx+0x2a],ch
 10126de:	add    DWORD PTR [rax],eax
 10126e0:	test   DWORD PTR [rdx],ebp
 10126e2:	add    DWORD PTR [rax],eax
 10126e4:	scas   eax,DWORD PTR es:[rdi]
 10126e5:	sub    al,BYTE PTR [rcx]
 10126e7:	add    dl,bl
 10126e9:	sub    al,BYTE PTR [rcx]
 10126eb:	add    BYTE PTR [rdx],al
 10126ed:	sub    eax,DWORD PTR [rcx]
 10126ef:	add    BYTE PTR [rdx],ah
 10126f1:	sub    eax,DWORD PTR [rcx]
 10126f3:	add    BYTE PTR [rax+0x2b],cl
 10126f6:	add    DWORD PTR [rax],eax
 10126f8:	sub    eax,DWORD PTR [ecx]
 10126fb:	add    BYTE PTR [rax-0x3efffed5],dl
 1012701:	sub    eax,DWORD PTR [rcx]
 1012703:	add    ah,ch
 1012705:	sub    eax,DWORD PTR [rcx]
 1012707:	add    BYTE PTR [rdi],dl
 1012709:	sub    al,0x1
 101270b:	add    BYTE PTR [rbx+0x2c],al
 101270e:	add    DWORD PTR [rax],eax
 1012710:	pop    rsp
 1012711:	sub    al,0x1
 1012713:	add    BYTE PTR [rbp+0x2c],bh
 1012716:	add    DWORD PTR [rax],eax
 1012718:	mov    ch,0x2c
 101271a:	add    DWORD PTR [rax],eax
 101271c:	fild   QWORD PTR [rcx+rax*1]
 101271f:	add    BYTE PTR [rdi],al
 1012721:	sub    eax,0x2d320001
 1012726:	add    DWORD PTR [rax],eax
 1012728:	push   0xffffffffa100012d
 101272d:	sub    eax,0x2de00001
 1012732:	add    DWORD PTR [rax],eax
 1012734:	sbb    al,0x2e
 1012736:	add    DWORD PTR [rax],eax
 1012738:	add    BYTE PTR [rax],al
 101273a:	add    DWORD PTR [rax],eax
 101273c:	add    al,BYTE PTR [rax]
 101273e:	add    eax,DWORD PTR [rax]
 1012740:	add    al,0x0
 1012742:	add    eax,0x7000600
 1012747:	add    BYTE PTR [rax],cl
 1012749:	add    BYTE PTR [rcx],cl
 101274b:	add    BYTE PTR [rdx],cl
 101274d:	add    BYTE PTR [rbx],cl
 101274f:	add    BYTE PTR [rax+rax*1],cl
 1012752:	or     eax,0xf000e00
 1012757:	add    BYTE PTR [rax],dl
 1012759:	add    BYTE PTR [rcx],dl
 101275b:	add    BYTE PTR [rdx],dl
 101275d:	add    BYTE PTR [rbx],dl
 101275f:	add    BYTE PTR [rax+rax*1],dl
 1012762:	adc    eax,0x17001600
 1012767:	add    BYTE PTR [rax],bl
 1012769:	add    BYTE PTR [rcx],bl
 101276b:	add    BYTE PTR [rdx],bl
 101276d:	add    BYTE PTR [rbx],bl
 101276f:	add    BYTE PTR [rax+rax*1],bl
 1012772:	sbb    eax,0x1f001e00
 1012777:	add    BYTE PTR [rax],ah
 1012779:	add    BYTE PTR [rcx],ah
 101277b:	add    BYTE PTR [rdx],ah
 101277d:	add    BYTE PTR [rbx],ah
 101277f:	add    BYTE PTR [rax+rax*1],ah
 1012782:	and    eax,0x27002600
 1012787:	add    BYTE PTR [rax],ch
 1012789:	add    BYTE PTR [rcx],ch
 101278b:	add    BYTE PTR [rsi+0x64],ah
 101278e:	rex.W outs dx,DWORD PTR ds:[rsi]
 1012790:	jae    0x1012806
 1012792:	cs gs js 0x10127fb
 1012796:	add    BYTE PTR [rdi],bh
 1012798:	(bad)  
 1012799:	xor    BYTE PTR [rbx+0x4d],al
 101279c:	(bad)  
 101279d:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 10127a4:	jb     0x10127e6
 10127a6:	rex push rcx
 10127a8:	rex.RB
 10127a9:	rex.B
 10127aa:	rex.B
 10127ab:	rex pop rax
 10127ad:	pop    rdx
 10127ae:	add    BYTE PTR [rdi],bh
 10127b0:	(bad)  
 10127b1:	xor    BYTE PTR [rbx+0x4d],al
 10127b4:	jne    0x101282a
 10127b6:	gs js  0x10127f9
 10127b9:	rex push rcx
 10127bb:	rex.RB
 10127bc:	rex.B
 10127bd:	rex.B
 10127be:	rex pop rax
 10127c0:	pop    rdx
 10127c1:	add    BYTE PTR [rdi],bh
 10127c3:	(bad)  
 10127c4:	xor    DWORD PTR [rbx+0x4d],eax
 10127c7:	(bad)  
 10127c8:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 10127cf:	jb     0x1012811
 10127d1:	rex push rcx
 10127d3:	rex.RB
 10127d4:	rex.B
 10127d5:	rex.B
 10127d6:	rex pop rax
 10127d8:	pop    rdx
 10127d9:	add    BYTE PTR [rdi],bh
 10127db:	(bad)  
 10127dc:	xor    DWORD PTR [rbx+0x4d],eax
 10127df:	jne    0x1012855
 10127e1:	gs js  0x1012824
 10127e4:	rex push rcx
 10127e6:	rex.RB
 10127e7:	rex.B
 10127e8:	rex.B
 10127e9:	rex pop rax
 10127eb:	pop    rdx
 10127ec:	add    BYTE PTR [rdi],bh
 10127ee:	(bad)  
 10127ef:	xor    al,0x43
 10127f1:	rex.WRB (bad) 
 10127f3:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 10127fa:	jb     0x101283c
 10127fc:	rex push rcx
 10127fe:	rex.RB
 10127ff:	rex.B
 1012800:	rex.B
 1012801:	rex.B
 1012802:	rex.RB
 1012803:	push   r14
 1012805:	xor    BYTE PTR [rax+0x41],al
 1012808:	rex.RB
 1012809:	rex.X push rsi
 101280b:	xor    BYTE PTR [rax+0x40],al
 101280e:	pop    rdx
 101280f:	add    BYTE PTR [rdi],bh
 1012811:	(bad)  
 1012812:	xor    al,0x43
 1012814:	rex.WRB jne 0x101288b
 1012817:	gs js  0x101285a
 101281a:	rex push rcx
 101281c:	rex.RB
 101281d:	rex.B
 101281e:	rex.B
 101281f:	rex.B
 1012820:	rex.RB
 1012821:	push   r14
 1012823:	xor    BYTE PTR [rax+0x41],al
 1012826:	rex.RB
 1012827:	rex.X push rsi
 1012829:	xor    BYTE PTR [rax+0x40],al
 101282c:	pop    rdx
 101282d:	add    BYTE PTR [rdi],bh
 101282f:	(bad)  
 1012830:	rex.X
 1012831:	rex.XB
 1012832:	rex.WRB jne 0x10128a9
 1012835:	gs js  0x1012878
 1012838:	rex push rcx
 101283a:	rex.RB
 101283b:	rex.B
 101283c:	push   r8
 101283e:	rex.RB
 101283f:	pop    r8
 1012841:	pop    rax
 1012842:	pop    rdx
 1012843:	add    BYTE PTR [rdi],bh
 1012845:	rex.XB ins BYTE PTR es:[rdi],dx
 1012847:	gs (bad) 
 1012849:	outs   dx,BYTE PTR ds:[rsi]
 101284a:	push   rbp
 101284b:	jo     0x101288d
 101284d:	rex.XB
 101284e:	rex.WRB (bad) 
 1012850:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012857:	jb     0x1012899
 1012859:	rex
 101285a:	rex.B
 101285b:	rex.RB
 101285c:	rex.B
 101285d:	pop    r8
 101285f:	pop    rax
 1012860:	pop    rdx
 1012861:	add    BYTE PTR [rdi],bh
 1012863:	rex.XB ins BYTE PTR es:[rdi],dx
 1012865:	outs   dx,DWORD PTR ds:[rsi]
 1012866:	jae    0x10128cd
 1012868:	rex
 1012869:	rex.XB
 101286a:	rex.WRB jne 0x10128e1
 101286d:	gs js  0x10128b0
 1012870:	rex push rcx
 1012872:	rex.RB
 1012873:	rex.B
 1012874:	pop    r8
 1012876:	pop    rax
 1012877:	pop    rdx
 1012878:	add    BYTE PTR [rdi],bh
 101287a:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101287c:	ins    DWORD PTR es:[rdi],dx
 101287d:	jo     0x10128ee
 101287f:	jae    0x10128e6
 1012881:	push   rsp
 1012882:	jb     0x10128e5
 1012884:	movsxd esp,DWORD PTR [rbp+0x4d]
 1012887:	jae    0x10128f0
 1012889:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101288b:	ins    DWORD PTR es:[rdi],dx
 101288c:	jo     0x10128fd
 101288e:	outs   dx,BYTE PTR ds:[rsi]
 101288f:	outs   dx,BYTE PTR gs:[rsi]
 1012891:	je     0x1012906
 1012893:	rex
 1012894:	rex.XB
 1012895:	rex.WRB (bad) 
 1012897:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 101289e:	jb     0x10128e0
 10128a0:	rex
 10128a1:	rex.B
 10128a2:	rex.RB
 10128a3:	rex.B
 10128a4:	pop    r8
 10128a6:	rex.WXB push r8
 10128a8:	rex.RB
 10128a9:	rex.X
 10128aa:	rex.R
 10128ab:	rex.W push rdi
 10128ad:	xor    al,0x5f
 10128af:	rex.RB push r10
 10128b1:	push   rdx
 10128b2:	rex.WRXB push r10
 10128b4:	pop    rdi
 10128b5:	rex.WR
 10128b6:	rex.RB push r14
 10128b8:	rex.RB
 10128b9:	rex.WR
 10128ba:	rex
 10128bb:	rex
 10128bc:	rex.WXB push r8
 10128be:	rex.RB
 10128bf:	rex.B
 10128c0:	rex.RXB
 10128c1:	rex.B
 10128c2:	rex.RB
 10128c3:	rex.B
 10128c4:	rex.W
 10128c5:	rex.W
 10128c6:	rex pop rdx
 10128c8:	add    BYTE PTR [rdi],bh
 10128ca:	rex.XB jb 0x1012932
 10128cd:	(bad)  
 10128ce:	je     0x1012935
 10128d0:	rex.WRXB jb 0x1012929
 10128d3:	gs jb  0x101293f
 10128d6:	data16 jns 0x101291d
 10128d9:	imul   esi,DWORD PTR [rdx+0x65],0x726f7463
 10128e0:	jns    0x1012922
 10128e2:	rex.XB
 10128e3:	rex.WRB (bad) 
 10128e5:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 10128ec:	jb     0x101292e
 10128ee:	rex
 10128ef:	rex.XB
 10128f0:	pop    r8
 10128f2:	push   rax
 10128f3:	rex.RB
 10128f4:	rex.X
 10128f5:	rex.R
 10128f6:	rex.W
 10128f7:	rex pop rdx
 10128f9:	add    BYTE PTR [rdi],bh
 10128fb:	imul   r14d,DWORD PTR [rbx+0x61],0x40656c62
 1012903:	rex.XB
 1012904:	rex.WRB (bad) 
 1012906:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 101290d:	jb     0x101294f
 101290f:	rex push rcx
 1012911:	rex.RB
 1012912:	rex.B
 1012913:	pop    r8
 1012915:	pop    rax
 1012916:	pop    rdx
 1012917:	add    BYTE PTR [rdi],bh
 1012919:	rex.RB outs dx,BYTE PTR ds:[rsi]
 101291b:	(bad)  
 101291c:	(bad)  
 101291d:	ins    BYTE PTR es:[rdi],dx
 101291e:	gs rex
 1012920:	rex.XB
 1012921:	rex.WRB (bad) 
 1012923:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 101292a:	jb     0x101296c
 101292c:	rex push rcx
 101292e:	rex.RB
 101292f:	rex.B
 1012930:	pop    r8
 1012932:	push   rax
 1012933:	rex.RB
 1012934:	rex.X
 1012935:	rex.R
 1012936:	rex.W xor BYTE PTR [rax+0x30],cl
 101293a:	rex.W
 101293b:	rex.W
 101293c:	rex pop rdx
 101293e:	add    BYTE PTR [rdi],bh
 1012940:	rex.RXB
 1012941:	gs je  0x1012988
 1012944:	gs data16 (bad) 
 1012947:	jne    0x10129b5
 1012949:	je     0x101298f
 101294b:	imul   esi,DWORD PTR [rdx+0x65],0x726f7463
 1012952:	jns    0x1012994
 1012954:	rex.XB
 1012955:	rex.WRB (bad) 
 1012957:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 101295e:	jb     0x10129a0
 1012960:	rex
 1012961:	rex.XB
 1012962:	pop    r8
 1012964:	push   rax
 1012965:	rex.RB
 1012966:	push   r14
 1012968:	rex.XB
 1012969:	rex.B jne 0x10129e0
 101296c:	outs   dx,DWORD PTR ds:[rsi]
 101296d:	push   rbx
 101296e:	je     0x10129e2
 1012970:	imul   ebp,DWORD PTR [rsi+0x67],0x5a404040
 1012977:	add    BYTE PTR [rdi],bh
 1012979:	rex.RXB
 101297a:	gs je  0x10129c1
 101297d:	gs data16 (bad) 
 1012980:	jne    0x10129ee
 1012982:	je     0x10129d2
 1012984:	(bad)  
 1012985:	ins    DWORD PTR es:[rdi],dx
 1012986:	gs rex
 1012988:	rex.XB
 1012989:	rex.WRB (bad) 
 101298b:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012992:	jb     0x10129d4
 1012994:	rex
 1012995:	rex.XB
 1012996:	pop    r8
 1012998:	push   rax
 1012999:	rex.RB
 101299a:	push   r14
 101299c:	rex.XB
 101299d:	rex.B jne 0x1012a14
 10129a0:	outs   dx,DWORD PTR ds:[rsi]
 10129a1:	push   rbx
 10129a2:	je     0x1012a16
 10129a4:	imul   ebp,DWORD PTR [rsi+0x67],0x5a404040
 10129ab:	add    BYTE PTR [rdi],bh
 10129ad:	rex.RXB
 10129ae:	gs je  0x10129f6
 10129b1:	jb     0x1012a25
 10129b3:	outs   dx,DWORD PTR ds:[rsi]
 10129b4:	jb     0x1012a09
 10129b6:	je     0x1012a2a
 10129b8:	imul   ebp,DWORD PTR [rsi+0x67],0x6d6f7246
 10129bf:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10129c1:	fs gs rex
 10129c4:	rex.XB
 10129c5:	rex.WRB (bad) 
 10129c7:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 10129ce:	jb     0x1012a10
 10129d0:	rex
 10129d1:	rex.XB
 10129d2:	rex.B
 10129d3:	rex.WXB
 10129d4:	rex.WXB push r8
 10129d6:	rex.RB
 10129d7:	rex.B
 10129d8:	rex.R
 10129d9:	rex.WXB
 10129da:	rex pop rdx
 10129dc:	add    BYTE PTR [rdi],bh
 10129de:	rex.RXB
 10129df:	gs je  0x1012a27
 10129e2:	jb     0x1012a56
 10129e4:	outs   dx,DWORD PTR ds:[rsi]
 10129e5:	jb     0x1012a3a
 10129e7:	je     0x1012a5b
 10129e9:	imul   ebp,DWORD PTR [rsi+0x67],0x6d6f7246
 10129f0:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10129f2:	fs gs rex
 10129f5:	rex.XB
 10129f6:	rex.WRB (bad) 
 10129f8:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 10129ff:	jb     0x1012a41
 1012a01:	rex
 1012a02:	rex.XB
 1012a03:	rex.B
 1012a04:	rex.WXB
 1012a05:	rex.WXB push r8
 1012a07:	rex.RB
 1012a08:	rex.B
 1012a09:	rex.RXB
 1012a0a:	rex.WXB
 1012a0b:	rex pop rdx
 1012a0d:	add    BYTE PTR [rdi],bh
 1012a0f:	rex.RXB
 1012a10:	gs je  0x1012a59
 1012a13:	ins    BYTE PTR es:[rdi],dx
 1012a14:	(bad)  
 1012a15:	addr32 push rsi
 1012a17:	(bad)  
 1012a18:	ins    BYTE PTR es:[rdi],dx
 1012a19:	jne    0x1012a80
 1012a1b:	rex
 1012a1c:	rex.XB
 1012a1d:	rex.WRB (bad) 
 1012a1f:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012a26:	jb     0x1012a68
 1012a28:	rex push rcx
 1012a2a:	rex.RB
 1012a2b:	rex.X
 1012a2c:	rex.B
 1012a2d:	rex.WXB
 1012a2e:	rex.WXB
 1012a2f:	rex pop rdx
 1012a31:	add    BYTE PTR [rdi],bh
 1012a33:	rex.RXB
 1012a34:	gs je  0x1012a8b
 1012a37:	(bad)  
 1012a38:	addr32 rex.RB jb 0x1012aae
 1012a3c:	outs   dx,DWORD PTR ds:[rsi]
 1012a3d:	jb     0x1012a8b
 1012a3f:	gs jbe 0x1012aa7
 1012a42:	ins    BYTE PTR es:[rdi],dx
 1012a43:	rex
 1012a44:	rex.XB
 1012a45:	rex.WRB (bad) 
 1012a47:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012a4e:	jb     0x1012a90
 1012a50:	rex push rcx
 1012a52:	rex.RB
 1012a53:	rex.X
 1012a54:	rex.B (bad) 
 1012a56:	push   r15
 1012a58:	xor    al,0x5f
 1012a5a:	rex.RB push r10
 1012a5c:	push   rdx
 1012a5d:	rex.WRXB push r10
 1012a5f:	pop    rdi
 1012a60:	rex.WR
 1012a61:	rex.RB push r14
 1012a63:	rex.RB
 1012a64:	rex.WR
 1012a65:	rex
 1012a66:	rex
 1012a67:	rex.WXB
 1012a68:	rex pop rdx
 1012a6a:	add    BYTE PTR [rdi],bh
 1012a6c:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1012a6e:	imul   esi,DWORD PTR [rax+rax*2+0x43],0x6574754d
 1012a76:	js     0x1012ab8
 1012a78:	rex push rcx
 1012a7a:	rex.RB
 1012a7b:	rex.B
 1012a7c:	pop    r8
 1012a7e:	push   rax
 1012a7f:	rex.RB
 1012a80:	rex.B
 1012a81:	rex.R
 1012a82:	rex pop rdx
 1012a84:	add    BYTE PTR [rdi],bh
 1012a86:	rex.WB jae 0x1012acb
 1012a89:	(bad)  
 1012a8a:	fs rex.B ins BYTE PTR es:[rdi],dx
 1012a8d:	ins    BYTE PTR es:[rdi],dx
 1012a8e:	outs   dx,DWORD PTR ds:[rsi]
 1012a8f:	movsxd eax,DWORD PTR [rax+0x43]
 1012a92:	rex.WRB (bad) 
 1012a94:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012a9b:	jb     0x1012add
 1012a9d:	rex push rcx
 1012a9f:	rex.RB
 1012aa0:	rex.B
 1012aa1:	rex.B
 1012aa2:	rex.W push rax
 1012aa4:	rex.RB
 1012aa5:	pop    r8
 1012aa7:	push   rax
 1012aa8:	rex.RB
 1012aa9:	rex.X
 1012aaa:	rex.R
 1012aab:	rex.W
 1012aac:	rex pop rdx
 1012aae:	add    BYTE PTR [rdi],bh
 1012ab0:	rex.WB jae 0x1012af5
 1012ab3:	(bad)  
 1012ab4:	fs rex.W (bad) 
 1012ab7:	outs   dx,BYTE PTR ds:[rsi]
 1012ab8:	fs ins BYTE PTR es:[rdi],dx
 1012aba:	gs rex
 1012abc:	rex.XB
 1012abd:	rex.WRB (bad) 
 1012abf:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012ac6:	jb     0x1012b08
 1012ac8:	rex push rcx
 1012aca:	rex.RB
 1012acb:	rex.B
 1012acc:	rex.B
 1012acd:	rex.W push rax
 1012acf:	rex.RB
 1012ad0:	pop    r8
 1012ad2:	push   rax
 1012ad3:	rex.RB
 1012ad4:	rex.X
 1012ad5:	rex.R
 1012ad6:	rex.W
 1012ad7:	rex pop rdx
 1012ad9:	add    BYTE PTR [rdi],bh
 1012adb:	rex.WB jae 0x1012b20
 1012ade:	(bad)  
 1012adf:	fs push rdx
 1012ae1:	gs jae 0x1012b59
 1012ae4:	ins    BYTE PTR es:[rdi],dx
 1012ae5:	je     0x1012b27
 1012ae7:	rex.XB
 1012ae8:	rex.WRB (bad) 
 1012aea:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012af1:	jb     0x1012b33
 1012af3:	rex push rcx
 1012af5:	rex.RB
 1012af6:	rex.B
 1012af7:	rex.B
 1012af8:	rex.W
 1012af9:	rex.WX push rax
 1012afb:	rex.RB
 1012afc:	rex.X
 1012afd:	rex.R
 1012afe:	rex.W
 1012aff:	rex pop rdx
 1012b01:	add    BYTE PTR [rdi],bh
 1012b03:	rex.WB jae 0x1012b4b
 1012b06:	outs   dx,BYTE PTR ds:[rsi]
 1012b07:	(bad)  
 1012b08:	(bad)  
 1012b09:	ins    BYTE PTR es:[rdi],dx
 1012b0a:	gs fs rex
 1012b0d:	rex.XB
 1012b0e:	rex.WRB (bad) 
 1012b10:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012b17:	jb     0x1012b59
 1012b19:	rex push rcx
 1012b1b:	rex.RB
 1012b1c:	rex.X
 1012b1d:	rex.B
 1012b1e:	rex.W pop rax
 1012b20:	pop    rdx
 1012b21:	add    BYTE PTR [rdi],bh
 1012b23:	rex.WB jae 0x1012b6c
 1012b26:	(bad)  
 1012b27:	imul   ebp,DWORD PTR [rbp+rsi*2+0x72],0x4d434065
 1012b2f:	(bad)  
 1012b30:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012b37:	jb     0x1012b79
 1012b39:	rex push rcx
 1012b3b:	rex.RB
 1012b3c:	rex.B
 1012b3d:	rex.B
 1012b3e:	rex.W
 1012b3f:	rex.W push rax
 1012b41:	rex.RB
 1012b42:	rex.X
 1012b43:	rex.R
 1012b44:	rex.W
 1012b45:	rex pop rdx
 1012b47:	add    BYTE PTR [rdi],bh
 1012b49:	rex.WB jae 0x1012b95
 1012b4c:	outs   dx,BYTE PTR ds:[rsi]
 1012b4d:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1012b55:	fs rex
 1012b57:	rex.XB
 1012b58:	rex.WRB jne 0x1012bcf
 1012b5b:	gs js  0x1012b9e
 1012b5e:	rex push rcx
 1012b60:	rex.RB
 1012b61:	rex.B
 1012b62:	rex.B
 1012b63:	rex.W pop rax
 1012b65:	pop    rdx
 1012b66:	add    BYTE PTR [rdi],bh
 1012b68:	rex.WB jae 0x1012bbd
 1012b6b:	jne    0x1012bdb
 1012b6d:	outs   dx,BYTE PTR ds:[rsi]
 1012b6e:	imul   ebp,DWORD PTR [rsi+0x67],0x65537341
 1012b75:	jb     0x1012bed
 1012b77:	imul   esp,DWORD PTR [rbx+0x65],0x614d4340
 1012b7e:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012b85:	jb     0x1012bc7
 1012b87:	rex push rcx
 1012b89:	rex.RB
 1012b8a:	rex.X
 1012b8b:	rex.B
 1012b8c:	rex.W pop rax
 1012b8e:	pop    rdx
 1012b8f:	add    BYTE PTR [rdi],bh
 1012b91:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1012b93:	movsxd esp,DWORD PTR [rcx+0x6c]
 1012b96:	rex.WB jae 0x1012bdd
 1012b99:	gs (bad) 
 1012b9b:	jne    0x1012c04
 1012b9d:	addr32 gs jb 0x1012bf1
 1012ba1:	jb     0x1012c08
 1012ba3:	jae    0x1012c0a
 1012ba5:	outs   dx,BYTE PTR ds:[rsi]
 1012ba6:	je     0x1012be8
 1012ba8:	rex.XB
 1012ba9:	rex.WRB (bad) 
 1012bab:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012bb2:	jb     0x1012bf4
 1012bb4:	rex push rcx
 1012bb6:	rex.RB
 1012bb7:	rex.B
 1012bb8:	rex.B
 1012bb9:	rex.W push rax
 1012bbb:	rex.RB
 1012bbc:	rex.B
 1012bbd:	rex.W
 1012bbe:	rex pop rdx
 1012bc0:	add    BYTE PTR [rdi],bh
 1012bc2:	push   rdx
 1012bc3:	(bad)  
 1012bc4:	ja     0x1012c1c
 1012bc6:	(bad)  
 1012bc7:	push   rsp
 1012bc8:	jb     0x1012c2b
 1012bca:	movsxd esp,DWORD PTR [rbp+0x53]
 1012bcd:	pop    rdx
 1012bce:	rex
 1012bcf:	rex.XB
 1012bd0:	rex.WRB (bad) 
 1012bd2:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012bd9:	jb     0x1012c1b
 1012bdb:	rex push rcx
 1012bdd:	rex.RB
 1012bde:	rex.B
 1012bdf:	pop    r8
 1012be1:	push   rax
 1012be2:	rex.RB
 1012be3:	rex.X
 1012be4:	rex.R push rax
 1012be6:	rex.RB
 1012be7:	rex.B
 1012be8:	rex.R
 1012be9:	rex pop rdx
 1012beb:	add    BYTE PTR [rdi],bh
 1012bed:	push   rdx
 1012bee:	(bad)  
 1012bef:	ja     0x1012c47
 1012bf1:	(bad)  
 1012bf2:	push   rsp
 1012bf3:	jb     0x1012c56
 1012bf5:	movsxd esp,DWORD PTR [rbp+0x53]
 1012bf8:	pop    rdx
 1012bf9:	rex
 1012bfa:	rex.XB
 1012bfb:	rex.WRB (bad) 
 1012bfd:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012c04:	jb     0x1012c46
 1012c06:	rex push rcx
 1012c08:	rex.RB
 1012c09:	rex.B
 1012c0a:	pop    r8
 1012c0c:	push   rax
 1012c0d:	rex.RB
 1012c0e:	rex.X
 1012c0f:	rex.RXB push r8
 1012c11:	rex.RB
 1012c12:	rex.B
 1012c13:	rex.R
 1012c14:	rex pop rdx
 1012c16:	add    BYTE PTR [rdi],bh
 1012c18:	push   rdx
 1012c19:	imul   esi,DWORD PTR gs:[ebx+0x74],0x61547265
 1012c22:	addr32 push rbx
 1012c24:	pop    rdx
 1012c25:	rex
 1012c26:	rex.XB
 1012c27:	rex.WRB (bad) 
 1012c29:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012c30:	jb     0x1012c72
 1012c32:	rex push rcx
 1012c34:	rex.RB
 1012c35:	rex.B
 1012c36:	pop    r8
 1012c38:	push   rax
 1012c39:	rex.RB
 1012c3a:	rex.X
 1012c3b:	rex.R
 1012c3c:	rex.B
 1012c3d:	rex.RB
 1012c3e:	rex.B
 1012c3f:	rex.WXB
 1012c40:	rex pop rdx
 1012c42:	add    BYTE PTR [rdi],bh
 1012c44:	push   rdx
 1012c45:	gs ins BYTE PTR es:[rdi],dx
 1012c47:	gs (bad) 
 1012c49:	jae    0x1012cb0
 1012c4b:	rex
 1012c4c:	rex.XB
 1012c4d:	rex.WRB jne 0x1012cc4
 1012c50:	gs js  0x1012c93
 1012c53:	rex push rcx
 1012c55:	rex.RB
 1012c56:	rex.B
 1012c57:	pop    r8
 1012c59:	pop    rax
 1012c5a:	pop    rdx
 1012c5b:	add    BYTE PTR [rdi],bh
 1012c5d:	push   rdx
 1012c5e:	gs ins BYTE PTR es:[rdi],dx
 1012c60:	gs (bad) 
 1012c62:	jae    0x1012cc9
 1012c64:	rex.B ins BYTE PTR es:[rdi],dx
 1012c66:	ins    BYTE PTR es:[rdi],dx
 1012c67:	rex
 1012c68:	rex.XB
 1012c69:	rex.WRB (bad) 
 1012c6b:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012c72:	jb     0x1012cb4
 1012c74:	rex push rcx
 1012c76:	rex.RB
 1012c77:	rex.B
 1012c78:	pop    r8
 1012c7a:	pop    rax
 1012c7b:	pop    rdx
 1012c7c:	add    BYTE PTR [rdi],bh
 1012c7e:	push   rbx
 1012c7f:	gs je  0x1012cc7
 1012c82:	jb     0x1012cf6
 1012c84:	outs   dx,DWORD PTR ds:[rsi]
 1012c85:	jb     0x1012cd3
 1012c87:	gs jbe 0x1012cef
 1012c8a:	ins    BYTE PTR es:[rdi],dx
 1012c8b:	rex
 1012c8c:	rex.XB
 1012c8d:	rex.WRB (bad) 
 1012c8f:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012c96:	jb     0x1012cd8
 1012c98:	rex push rcx
 1012c9a:	rex.RB
 1012c9b:	rex.B
 1012c9c:	rex.B
 1012c9d:	rex.WX push rax
 1012c9f:	rex.RB
 1012ca0:	rex.X
 1012ca1:	rex.R push rdi
 1012ca3:	xor    al,0x5f
 1012ca5:	rex.RB push r10
 1012ca7:	push   rdx
 1012ca8:	rex.WRXB push r10
 1012caa:	pop    rdi
 1012cab:	rex.WR
 1012cac:	rex.RB push r14
 1012cae:	rex.RB
 1012caf:	rex.WR
 1012cb0:	rex
 1012cb1:	rex
 1012cb2:	rex pop rdx
 1012cb4:	add    BYTE PTR [rdi],bh
 1012cb6:	push   rbx
 1012cb7:	gs je  0x1012d00
 1012cba:	ins    BYTE PTR es:[rdi],dx
 1012cbb:	(bad)  
 1012cbc:	imul   esi,DWORD PTR [ebp+r9d*2+0x61],0x664f6b73
 1012cc6:	data16 rex
 1012cc8:	rex.XB
 1012cc9:	rex.WRB (bad) 
 1012ccb:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012cd2:	jb     0x1012d14
 1012cd4:	rex push rcx
 1012cd6:	rex.RB
 1012cd7:	rex.B
 1012cd8:	pop    r8
 1012cda:	rex.WXB
 1012cdb:	rex.WXB
 1012cdc:	rex pop rdx
 1012cde:	add    BYTE PTR [rdi],bh
 1012ce0:	push   rsp
 1012ce1:	jb     0x1012d44
 1012ce3:	movsxd esp,DWORD PTR [rbp+0x41]
 1012ce6:	jae    0x1012d5b
 1012ce8:	gs jb  0x1012d5f
 1012ceb:	rex
 1012cec:	rex.XB
 1012ced:	rex.WRB (bad) 
 1012cef:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012cf6:	jb     0x1012d38
 1012cf8:	rex push rcx
 1012cfa:	rex.RB
 1012cfb:	rex.B
 1012cfc:	pop    r8
 1012cfe:	push   rax
 1012cff:	rex.RB
 1012d00:	rex.X
 1012d01:	xor    BYTE PTR [rax+0x40],r9b
 1012d05:	pop    rdx
 1012d06:	add    BYTE PTR [rdi],bh
 1012d08:	push   rsp
 1012d09:	jb     0x1012d6c
 1012d0b:	movsxd esp,DWORD PTR [rbp+0x41]
 1012d0e:	jae    0x1012d83
 1012d10:	gs jb  0x1012d87
 1012d13:	push   rbx
 1012d14:	pop    rdx
 1012d15:	rex
 1012d16:	rex.XB
 1012d17:	rex.WRB (bad) 
 1012d19:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012d20:	jb     0x1012d62
 1012d22:	rex push rcx
 1012d24:	rex.RB
 1012d25:	rex.B
 1012d26:	pop    r8
 1012d28:	push   rax
 1012d29:	rex.RB
 1012d2a:	rex.X
 1012d2b:	xor    BYTE PTR [rax],r14b
 1012d2e:	rex.W
 1012d2f:	rex pop rdx
 1012d31:	add    BYTE PTR [rdi],bh
 1012d33:	push   rsp
 1012d34:	jb     0x1012d97
 1012d36:	movsxd esp,DWORD PTR [rbp+0x53]
 1012d39:	pop    rdx
 1012d3a:	rex
 1012d3b:	rex.XB
 1012d3c:	rex.WRB (bad) 
 1012d3e:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012d45:	jb     0x1012d87
 1012d47:	rex push rcx
 1012d49:	rex.RB
 1012d4a:	rex.B
 1012d4b:	pop    r8
 1012d4d:	rex.WXB push r8
 1012d4f:	rex.RB
 1012d50:	rex.X
 1012d51:	rex.R
 1012d52:	rex.W push rdi
 1012d54:	xor    al,0x5f
 1012d56:	rex.RB push r10
 1012d58:	push   rdx
 1012d59:	rex.WRXB push r10
 1012d5b:	pop    rdi
 1012d5c:	rex.WR
 1012d5d:	rex.RB push r14
 1012d5f:	rex.RB
 1012d60:	rex.WR
 1012d61:	rex
 1012d62:	rex
 1012d63:	rex.WXB xor BYTE PTR [r10+0x5a],bl
 1012d67:	add    BYTE PTR [rdi],bh
 1012d69:	push   rsp
 1012d6a:	jb     0x1012dcd
 1012d6c:	movsxd esp,DWORD PTR [rbp+0x53]
 1012d6f:	pop    rdx
 1012d70:	rex
 1012d71:	rex.XB
 1012d72:	rex.WRB (bad) 
 1012d74:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012d7b:	jb     0x1012dbd
 1012d7d:	rex push rcx
 1012d7f:	rex.RB
 1012d80:	rex.B
 1012d81:	pop    r8
 1012d83:	rex.WXB push r8
 1012d85:	rex.RB
 1012d86:	rex.X
 1012d87:	rex.R
 1012d88:	rex.W push rdi
 1012d8a:	xor    al,0x5f
 1012d8c:	rex.RB push r10
 1012d8e:	push   rdx
 1012d8f:	rex.WRXB push r10
 1012d91:	pop    rdi
 1012d92:	rex.WR
 1012d93:	rex.RB push r14
 1012d95:	rex.RB
 1012d96:	rex.WR
 1012d97:	rex
 1012d98:	rex
 1012d99:	rex.WXB push r8
 1012d9b:	rex.RB
 1012d9c:	rex.X
 1012d9d:	rex.RXB pop r10
 1012d9f:	pop    rdx
 1012da0:	add    BYTE PTR [rdi],bh
 1012da2:	push   rsp
 1012da3:	jb     0x1012e06
 1012da5:	movsxd esp,DWORD PTR [rbp+0x57]
 1012da8:	push   rbx
 1012da9:	je     0x1012e1d
 1012dab:	imul   ebp,DWORD PTR [rsi+0x67],0x614d4340
 1012db2:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012db9:	jb     0x1012dfb
 1012dbb:	rex push rcx
 1012dbd:	rex.RB
 1012dbe:	rex.B
 1012dbf:	pop    r8
 1012dc1:	rex.WXB push r8
 1012dc3:	rex.RB
 1012dc4:	rex.X
 1012dc5:	rex.R
 1012dc6:	rex.W push rdi
 1012dc8:	xor    al,0x5f
 1012dca:	rex.RB push r10
 1012dcc:	push   rdx
 1012dcd:	rex.WRXB push r10
 1012dcf:	pop    rdi
 1012dd0:	rex.WR
 1012dd1:	rex.RB push r14
 1012dd3:	rex.RB
 1012dd4:	rex.WR
 1012dd5:	rex
 1012dd6:	rex
 1012dd7:	rex.WXB push r8
 1012dd9:	rex.RB
 1012dda:	rex.X
 1012ddb:	rex.RXB
 1012ddc:	rex.W
 1012ddd:	rex pop rdx
 1012ddf:	add    BYTE PTR [rdi],bh
 1012de1:	push   rsi
 1012de2:	(bad)  
 1012de3:	push   rsp
 1012de4:	jb     0x1012e47
 1012de6:	movsxd esp,DWORD PTR [rbp+0x53]
 1012de9:	pop    rdx
 1012dea:	rex
 1012deb:	rex.XB
 1012dec:	rex.WRB (bad) 
 1012dee:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012df5:	jb     0x1012e37
 1012df7:	rex push rcx
 1012df9:	rex.RB
 1012dfa:	rex.B
 1012dfb:	pop    r8
 1012dfd:	rex.WXB push r8
 1012dff:	rex.RB
 1012e00:	rex.X
 1012e01:	rex.R
 1012e02:	rex.W push rdi
 1012e04:	xor    al,0x5f
 1012e06:	rex.RB push r10
 1012e08:	push   rdx
 1012e09:	rex.WRXB push r10
 1012e0b:	pop    rdi
 1012e0c:	rex.WR
 1012e0d:	rex.RB push r14
 1012e0f:	rex.RB
 1012e10:	rex.WR
 1012e11:	rex
 1012e12:	rex
 1012e13:	rex.WXB xor BYTE PTR [r8+0x45],dl
 1012e17:	rex.B
 1012e18:	rex.R
 1012e19:	rex pop rdx
 1012e1b:	add    BYTE PTR [rdi],bh
 1012e1d:	push   rsi
 1012e1e:	(bad)  
 1012e1f:	push   rsp
 1012e20:	jb     0x1012e83
 1012e22:	movsxd esp,DWORD PTR [rbp+0x53]
 1012e25:	pop    rdx
 1012e26:	rex
 1012e27:	rex.XB
 1012e28:	rex.WRB (bad) 
 1012e2a:	imul   ebp,DWORD PTR [rsi+0x54],0x65636172
 1012e31:	jb     0x1012e73
 1012e33:	rex push rcx
 1012e35:	rex.RB
 1012e36:	rex.B
 1012e37:	pop    r8
 1012e39:	rex.WXB push r8
 1012e3b:	rex.RB
 1012e3c:	rex.X
 1012e3d:	rex.R
 1012e3e:	rex.W push rdi
 1012e40:	xor    al,0x5f
 1012e42:	rex.RB push r10
 1012e44:	push   rdx
 1012e45:	rex.WRXB push r10
 1012e47:	pop    rdi
 1012e48:	rex.WR
 1012e49:	rex.RB push r14
 1012e4b:	rex.RB
 1012e4c:	rex.WR
 1012e4d:	rex
 1012e4e:	rex
 1012e4f:	rex.WXB push r8
 1012e51:	rex.RB
 1012e52:	rex.X
 1012e53:	rex.RXB push r8
 1012e55:	rex.RB
 1012e56:	rex.B
 1012e57:	rex.R
 1012e58:	rex pop rdx
	...
