
3a44fa455ada6aede5098355efc22825ac336a3faa18d7695054fcf3a7bbffc0.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	movabs al,ds:0xb40000000000004f
 1001009:	rex.WRXB add BYTE PTR [r8],r8b
 100100c:	add    BYTE PTR [rax],al
 100100e:	add    BYTE PTR [rax],al
 1001010:	(bad)  
 1001011:	rex.WRXB add BYTE PTR [r8],r8b
 1001014:	add    BYTE PTR [rax],al
 1001016:	add    BYTE PTR [rax],al
 1001018:	in     al,0x4f
 100101a:	add    BYTE PTR [rax],al
 100101c:	add    BYTE PTR [rax],al
 100101e:	add    BYTE PTR [rax],al
 1001020:	clc    
 1001021:	rex.WRXB add BYTE PTR [r8],r8b
 1001024:	add    BYTE PTR [rax],al
 1001026:	add    BYTE PTR [rax],al
 1001028:	or     BYTE PTR [rax+0x0],dl
 100102b:	add    BYTE PTR [rax],al
 100102d:	add    BYTE PTR [rax],al
 100102f:	add    BYTE PTR [rax],bl
 1001031:	push   rax
 1001032:	add    BYTE PTR [rax],al
 1001034:	add    BYTE PTR [rax],al
 1001036:	add    BYTE PTR [rax],al
 1001038:	sub    BYTE PTR [rax+0x0],dl
 100103b:	add    BYTE PTR [rax],al
 100103d:	add    BYTE PTR [rax],al
 100103f:	add    BYTE PTR [rdx+0x50],al
	...
 100104e:	add    BYTE PTR [rax],al
 1001050:	pop    rsi
 1001051:	push   rax
 1001052:	add    BYTE PTR [rax],al
 1001054:	add    BYTE PTR [rax],al
 1001056:	add    BYTE PTR [rax],al
 1001058:	jo     0x10010aa
 100105a:	add    BYTE PTR [rax],al
 100105c:	add    BYTE PTR [rax],al
 100105e:	add    BYTE PTR [rax],al
 1001060:	jle    0x10010b2
 1001062:	add    BYTE PTR [rax],al
 1001064:	add    BYTE PTR [rax],al
 1001066:	add    BYTE PTR [rax],al
 1001068:	nop
 1001069:	push   rax
 100106a:	add    BYTE PTR [rax],al
 100106c:	add    BYTE PTR [rax],al
 100106e:	add    BYTE PTR [rax],al
 1001070:	movabs al,ds:0xb800000000000050
 1001079:	push   rax
 100107a:	add    BYTE PTR [rax],al
 100107c:	add    BYTE PTR [rax],al
 100107e:	add    BYTE PTR [rax],al
 1001080:	retf   0x50
 1001083:	add    BYTE PTR [rax],al
 1001085:	add    BYTE PTR [rax],al
 1001087:	add    ah,bl
 1001089:	push   rax
 100108a:	add    BYTE PTR [rax],al
 100108c:	add    BYTE PTR [rax],al
 100108e:	add    BYTE PTR [rax],al
 1001090:	hlt    
 1001091:	push   rax
 1001092:	add    BYTE PTR [rax],al
 1001094:	add    BYTE PTR [rax],al
 1001096:	add    BYTE PTR [rax],al
 1001098:	or     dl,BYTE PTR [rcx+0x0]
 100109b:	add    BYTE PTR [rax],al
 100109d:	add    BYTE PTR [rax],al
 100109f:	add    BYTE PTR [rdx],bl
 10010a1:	push   rcx
 10010a2:	add    BYTE PTR [rax],al
 10010a4:	add    BYTE PTR [rax],al
 10010a6:	add    BYTE PTR [rax],al
 10010a8:	sub    al,0x51
 10010aa:	add    BYTE PTR [rax],al
 10010ac:	add    BYTE PTR [rax],al
 10010ae:	add    BYTE PTR [rax],al
 10010b0:	cmp    dl,BYTE PTR [rcx+0x0]
 10010b3:	add    BYTE PTR [rax],al
 10010b5:	add    BYTE PTR [rax],al
 10010b7:	add    BYTE PTR [rax+0x51],dl
 10010ba:	add    BYTE PTR [rax],al
 10010bc:	add    BYTE PTR [rax],al
 10010be:	add    BYTE PTR [rax],al
 10010c0:	push   0x51
 10010c2:	add    BYTE PTR [rax],al
 10010c4:	add    BYTE PTR [rax],al
 10010c6:	add    BYTE PTR [rax],al
 10010c8:	push   rsp
 10010c9:	push   rsp
 10010ca:	add    BYTE PTR [rax],al
 10010cc:	add    BYTE PTR [rax],al
 10010ce:	add    BYTE PTR [rax],al
 10010d0:	ds push rsp
 10010d2:	add    BYTE PTR [rax],al
 10010d4:	add    BYTE PTR [rax],al
 10010d6:	add    BYTE PTR [rax],al
 10010d8:	cs push rsp
 10010da:	add    BYTE PTR [rax],al
 10010dc:	add    BYTE PTR [rax],al
 10010de:	add    BYTE PTR [rax],al
 10010e0:	adc    al,0x54
 10010e2:	add    BYTE PTR [rax],al
 10010e4:	add    BYTE PTR [rax],al
 10010e6:	add    BYTE PTR [rax],al
 10010e8:	add    al,0x54
 10010ea:	add    BYTE PTR [rax],al
 10010ec:	add    BYTE PTR [rax],al
 10010ee:	add    BYTE PTR [rax],al
 10010f0:	lock push rbx
 10010f2:	add    BYTE PTR [rax],al
 10010f4:	add    BYTE PTR [rax],al
 10010f6:	add    BYTE PTR [rax],al
 10010f8:	(bad)  
 10010f9:	push   rbx
 10010fa:	add    BYTE PTR [rax],al
 10010fc:	add    BYTE PTR [rax],al
 10010fe:	add    BYTE PTR [rax],al
 1001100:	ret    0x53
 1001103:	add    BYTE PTR [rax],al
 1001105:	add    BYTE PTR [rax],al
 1001107:	add    BYTE PTR [rsi+0x53],ch
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    BYTE PTR [rax+0x53],dl
 1001115:	add    BYTE PTR [rax],al
 1001117:	add    BYTE PTR [rbx+rdx*2+0x0],dh
 100111b:	add    BYTE PTR [rax],al
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    BYTE PTR [rdx+0x54],ch
 1001122:	add    BYTE PTR [rax],al
 1001124:	add    BYTE PTR [rax],al
 1001126:	add    BYTE PTR [rax],al
 1001128:	(bad)  
 1001129:	push   rbx
 100112a:	add    BYTE PTR [rax],al
 100112c:	add    BYTE PTR [rax],al
 100112e:	add    BYTE PTR [rax],al
 1001130:	rex.WR push rbx
 1001132:	add    BYTE PTR [rax],al
 1001134:	add    BYTE PTR [rax],al
 1001136:	add    BYTE PTR [rax],al
 1001138:	cmp    al,0x53
 100113a:	add    BYTE PTR [rax],al
 100113c:	add    BYTE PTR [rax],al
 100113e:	add    BYTE PTR [rax],al
 1001140:	xor    al,0x53
	...
 100114e:	add    BYTE PTR [rax],al
 1001150:	push   rax
 1001151:	push   rdx
 1001152:	add    BYTE PTR [rax],al
 1001154:	add    BYTE PTR [rax],al
 1001156:	add    BYTE PTR [rax],al
 1001158:	pop    rax
 1001159:	push   rdx
 100115a:	add    BYTE PTR [rax],al
 100115c:	add    BYTE PTR [rax],al
 100115e:	add    BYTE PTR [rax],al
 1001160:	push   dx
 1001162:	add    BYTE PTR [rax],al
 1001164:	add    BYTE PTR [rax],al
 1001166:	add    BYTE PTR [rax],al
 1001168:	jb     0x10011bc
 100116a:	add    BYTE PTR [rax],al
 100116c:	add    BYTE PTR [rax],al
 100116e:	add    BYTE PTR [rax],al
 1001170:	adc    BYTE PTR [rdx+0x0],0x0
 1001174:	add    BYTE PTR [rax],al
 1001176:	add    BYTE PTR [rax],al
 1001178:	xchg   esi,eax
 1001179:	push   rdx
 100117a:	add    BYTE PTR [rax],al
 100117c:	add    BYTE PTR [rax],al
 100117e:	add    BYTE PTR [rax],al
 1001180:	stos   BYTE PTR es:[rdi],al
 1001181:	push   rdx
 1001182:	add    BYTE PTR [rax],al
 1001184:	add    BYTE PTR [rax],al
 1001186:	add    BYTE PTR [rax],al
 1001188:	mov    dh,0x52
 100118a:	add    BYTE PTR [rax],al
 100118c:	add    BYTE PTR [rax],al
 100118e:	add    BYTE PTR [rax],al
 1001190:	rcl    BYTE PTR [rdx+0x0],0x0
 1001194:	add    BYTE PTR [rax],al
 1001196:	add    BYTE PTR [rax],al
 1001198:	loopne 0x10011ec
 100119a:	add    BYTE PTR [rax],al
 100119c:	add    BYTE PTR [rax],al
 100119e:	add    BYTE PTR [rax],al
 10011a0:	not    BYTE PTR [rdx+0x0]
 10011a3:	add    BYTE PTR [rax],al
 10011a5:	add    BYTE PTR [rax],al
 10011a7:	add    BYTE PTR [rdx],cl
 10011a9:	push   rbx
 10011aa:	add    BYTE PTR [rax],al
 10011ac:	add    BYTE PTR [rax],al
 10011ae:	add    BYTE PTR [rax],al
 10011b0:	adc    al,0x53
 10011b2:	add    BYTE PTR [rax],al
 10011b4:	add    BYTE PTR [rax],al
 10011b6:	add    BYTE PTR [rax],al
 10011b8:	and    dl,BYTE PTR [rbx+0x0]
 10011bb:	add    BYTE PTR [rax],al
 10011bd:	add    BYTE PTR [rax],al
 10011bf:	add    BYTE PTR [rdx],ch
 10011c1:	push   rbx
 10011c2:	add    BYTE PTR [rax],al
 10011c4:	add    BYTE PTR [rax],al
 10011c6:	add    BYTE PTR [rax],al
 10011c8:	rex.RX push rdx
 10011ca:	add    BYTE PTR [rax],al
 10011cc:	add    BYTE PTR [rax],al
 10011ce:	add    BYTE PTR [rax],al
 10011d0:	ds push rdx
 10011d2:	add    BYTE PTR [rax],al
 10011d4:	add    BYTE PTR [rax],al
 10011d6:	add    BYTE PTR [rax],al
 10011d8:	xor    BYTE PTR [rdx+0x0],dl
 10011db:	add    BYTE PTR [rax],al
 10011dd:	add    BYTE PTR [rax],al
 10011df:	add    BYTE PTR [rax],bl
 10011e1:	push   rdx
 10011e2:	add    BYTE PTR [rax],al
 10011e4:	add    BYTE PTR [rax],al
 10011e6:	add    BYTE PTR [rax],al
 10011e8:	clc    
 10011e9:	push   rcx
 10011ea:	add    BYTE PTR [rax],al
 10011ec:	add    BYTE PTR [rax],al
 10011ee:	add    BYTE PTR [rax],al
 10011f0:	(bad)  
 10011f1:	push   rcx
 10011f2:	add    BYTE PTR [rax],al
 10011f4:	add    BYTE PTR [rax],al
 10011f6:	add    BYTE PTR [rax],al
 10011f8:	fcom   QWORD PTR [rcx+0x0]
 10011fb:	add    BYTE PTR [rax],al
 10011fd:	add    BYTE PTR [rax],al
 10011ff:	add    dl,dl
 1001201:	push   rcx
 1001202:	add    BYTE PTR [rax],al
 1001204:	add    BYTE PTR [rax],al
 1001206:	add    BYTE PTR [rax],al
 1001208:	enter  0x51,0x0
 100120c:	add    BYTE PTR [rax],al
 100120e:	add    BYTE PTR [rax],al
 1001210:	mov    edx,0x51
 1001215:	add    BYTE PTR [rax],al
 1001217:	add    BYTE PTR [rax+0x51],dh
 100121d:	add    BYTE PTR [rax],al
 100121f:	add    BYTE PTR [rax+0x51],ch
 1001225:	add    BYTE PTR [rax],al
 1001227:	add    BYTE PTR [rcx+rdx*2+0x0],bl
 100122e:	add    BYTE PTR [rax],al
 1001230:	nop
 1001231:	push   rcx
 1001232:	add    BYTE PTR [rax],al
 1001234:	add    BYTE PTR [rax],al
 1001236:	add    BYTE PTR [rax],al
 1001238:	test   BYTE PTR [rcx+0x0],dl
 100123b:	add    BYTE PTR [rax],al
 100123d:	add    BYTE PTR [rax],al
 100123f:	add    BYTE PTR [rsi],al
 1001241:	push   rdx
 1001242:	add    BYTE PTR [rax],al
 1001244:	add    BYTE PTR [rax],al
 1001246:	add    BYTE PTR [rax],al
 1001248:	test   BYTE PTR [rax+rax*1+0x0],dl
 100124c:	add    BYTE PTR [rax],al
 100124e:	add    BYTE PTR [rax],al
 1001250:	mov    ss,WORD PTR [rax+rax*1+0x0]
	...
 1001268:	loopne 0x10012a8
 100126a:	add    BYTE PTR [rcx],al
	...
 1001280:	(bad)  
 1001281:	add    BYTE PTR [rcx],al
 1001284:	add    BYTE PTR [rax],al
 1001286:	add    BYTE PTR [rax],al
 1001288:	nop
 1001289:	rex.XB add BYTE PTR [r9],al
	...
 10012a4:	sub    al,0xeb
 10012a6:	xor    eax,0x4f
 10012ab:	add    BYTE PTR [rdx],al
 10012ad:	add    BYTE PTR [rax],al
 10012af:	add    BYTE PTR [rdi],ah
 10012b1:	add    BYTE PTR [rax],al
 10012b3:	add    BYTE PTR [rax],cl
 10012b5:	sbb    eax,DWORD PTR [rax]
 10012b7:	add    BYTE PTR [rax],cl
 10012b9:	sldt   WORD PTR [rax]
 10012bc:	add    BYTE PTR [rax],al
 10012be:	add    BYTE PTR [rax],al
 10012c0:	push   rax
 10012c1:	(bad)  
 10012c2:	add    BYTE PTR [rcx],al
 10012c4:	add    BYTE PTR [rax],al
 10012c6:	add    BYTE PTR [rax],al
 10012c8:	lock (bad) 
 10012ca:	add    BYTE PTR [rcx],al
	...
 10012e0:	push   rbx
 10012e1:	add    BYTE PTR [rdi+0x0],cl
 10012e4:	add    BYTE PTR [rax+r8*1+0x57],r10b
 10012e9:	add    BYTE PTR [rcx+0x0],al
 10012ec:	push   rdx
 10012ed:	add    BYTE PTR [rbp+0x0],al
 10012f0:	pop    rsp
 10012f1:	add    BYTE PTR [rbp+0x0],cl
 10012f4:	imul   eax,DWORD PTR [rax],0x720063
 10012fa:	outs   dx,DWORD PTR ds:[rsi]
 10012fb:	add    BYTE PTR [rbx+0x0],dh
 10012fe:	outs   dx,DWORD PTR ds:[rsi]
 10012ff:	add    BYTE PTR [rsi+0x0],ah
 1001302:	je     0x1001304
 1001304:	pop    rsp
 1001305:	add    BYTE PTR [rbp+0x0],cl
 1001308:	imul   eax,DWORD PTR [rax],0x720063
 100130e:	outs   dx,DWORD PTR ds:[rsi]
 100130f:	add    BYTE PTR [rbx+0x0],dh
 1001312:	outs   dx,DWORD PTR ds:[rsi]
 1001313:	add    BYTE PTR [rsi+0x0],ah
 1001316:	je     0x1001318
 1001318:	and    BYTE PTR [rax],al
 100131a:	push   rbx
 100131b:	add    BYTE PTR [rcx+0x0],dl
 100131e:	rex.WR add BYTE PTR [rax],r12b
 1001321:	add    BYTE PTR [rbx+0x0],dl
 1001324:	add    BYTE PTR gs:[rdx+0x0],dh
 1001328:	jbe    0x100132a
 100132a:	add    BYTE PTR gs:[rdx+0x0],dh
 100132e:	and    BYTE PTR [rax],al
 1001330:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1001334:	movsxd eax,DWORD PTR [rax]
 1001336:	(bad)  
 1001337:	add    BYTE PTR [rax+rax*1+0x20],ch
 100133b:	add    BYTE PTR [rax+rax*1+0x42],al
 100133f:	add    BYTE PTR [rax+rax*1+0x49],bl
 1001343:	add    BYTE PTR [rsi+0x0],ch
 1001346:	jae    0x1001348
 1001348:	je     0x100134a
 100134a:	(bad)  
 100134b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100134f:	add    BYTE PTR [rbp+0x0],ah
 1001352:	add    BYTE PTR fs:[rax],ah
 1001355:	add    BYTE PTR [rsi+0x0],dl
 1001358:	add    BYTE PTR gs:[rdx+0x0],dh
 100135c:	jae    0x100135e
 100135e:	imul   eax,DWORD PTR [rax],0x6e006f
 1001364:	jae    0x1001366
 1001366:	add    BYTE PTR [rax],al
 1001368:	rex.WB add BYTE PTR [r14+0x0],bpl
 100136c:	jae    0x100136e
 100136e:	je     0x1001370
 1001370:	(bad)  
 1001371:	add    BYTE PTR [rsi+0x0],ch
 1001374:	movsxd eax,DWORD PTR [rax]
 1001376:	add    BYTE PTR gs:[rcx+0x0],al
 100137a:	push   rax
 100137b:	add    BYTE PTR [rcx+0x0],cl
 100137e:	push   rax
 100137f:	add    BYTE PTR [rcx+0x0],ah
 1001382:	je     0x1001384
 1001384:	push   0x4c000000
 1001389:	outs   dx,DWORD PTR ds:[rsi]
 100138a:	movsxd esp,DWORD PTR [rcx+0x6c]
 100138d:	rex.R
 100138e:	rex.X
 100138f:	rex.XB jb 0x10013f7
 1001392:	(bad)  
 1001393:	je     0x10013fa
 1001395:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1001397:	jae    0x100140d
 1001399:	(bad)  
 100139a:	outs   dx,BYTE PTR ds:[rsi]
 100139b:	movsxd esp,DWORD PTR [rbp+0x0]
 100139e:	add    BYTE PTR [rax],al
 10013a0:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10013a2:	movsxd esp,DWORD PTR [rcx+0x6c]
 10013a5:	rex.R
 10013a6:	rex.X push rbx
 10013a8:	je     0x100140b
 10013aa:	jb     0x1001420
 10013ac:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10013ae:	jae    0x1001424
 10013b0:	(bad)  
 10013b1:	outs   dx,BYTE PTR ds:[rsi]
 10013b2:	movsxd esp,DWORD PTR [rbp+0x0]
 10013b5:	add    BYTE PTR [rax],al
 10013b7:	add    BYTE PTR [rdi+rbp*2+0x63],cl
 10013bb:	(bad)  
 10013bc:	ins    BYTE PTR es:[rdi],dx
 10013bd:	rex.R
 10013be:	rex.X push rbx
 10013c0:	je     0x1001431
 10013c2:	jo     0x100140d
 10013c4:	outs   dx,BYTE PTR ds:[rsi]
 10013c5:	jae    0x100143b
 10013c7:	(bad)  
 10013c8:	outs   dx,BYTE PTR ds:[rsi]
 10013c9:	movsxd esp,DWORD PTR [rbp+0x0]
 10013cc:	add    BYTE PTR [rax],al
 10013ce:	add    BYTE PTR [rax],al
 10013d0:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10013d2:	movsxd esp,DWORD PTR [rcx+0x6c]
 10013d5:	rex.R
 10013d6:	rex.X
 10013d7:	rex.R
 10013d8:	gs ins BYTE PTR es:[rdi],dx
 10013da:	gs je  0x1001442
 10013dd:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10013df:	jae    0x1001455
 10013e1:	(bad)  
 10013e2:	outs   dx,BYTE PTR ds:[rsi]
 10013e3:	movsxd esp,DWORD PTR [rbp+0x0]
 10013e6:	add    BYTE PTR [rax],al
 10013e8:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10013ea:	movsxd esp,DWORD PTR [rcx+0x6c]
 10013ed:	rex.R
 10013ee:	rex.X
 10013ef:	rex.RX outs dx,DWORD PTR ds:[rsi]
 10013f1:	jb     0x1001460
 10013f3:	(bad)  
 10013f4:	je     0x1001443
 10013f6:	gs jae 0x100146c
 10013f9:	(bad)  
 10013fa:	add    BYTE PTR gs:[eax],al
 10013fe:	add    BYTE PTR [rax],al
 1001400:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1001402:	movsxd esp,DWORD PTR [rcx+0x6c]
 1001405:	rex.R
 1001406:	rex.X
 1001407:	rex.RXB
 1001408:	gs je  0x1001454
 100140b:	outs   dx,BYTE PTR ds:[rsi]
 100140c:	jae    0x1001482
 100140e:	(bad)  
 100140f:	outs   dx,BYTE PTR ds:[rsi]
 1001410:	movsxd esp,DWORD PTR [rbp+0x73]
 1001413:	add    BYTE PTR [rax],al
 1001415:	add    BYTE PTR [rax],al
 1001417:	add    BYTE PTR [rdi+rbp*2+0x63],cl
 100141b:	(bad)  
 100141c:	ins    BYTE PTR es:[rdi],dx
 100141d:	rex.R
 100141e:	rex.X
 100141f:	rex.RXB
 1001420:	gs je  0x100146c
 1001423:	outs   dx,BYTE PTR ds:[rsi]
 1001424:	jae    0x100149a
 1001426:	(bad)  
 1001427:	outs   dx,BYTE PTR ds:[rsi]
 1001428:	movsxd esp,DWORD PTR [rbp+0x49]
 100142b:	outs   dx,BYTE PTR ds:[rsi]
 100142c:	outs   dx,WORD PTR ds:[rsi]
 100142e:	add    BYTE PTR [rax],al
 1001430:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1001432:	movsxd esp,DWORD PTR [rcx+0x6c]
 1001435:	rex.R
 1001436:	rex.X push rbx
 1001438:	je     0x100149b
 100143a:	jb     0x10014b0
 100143c:	push   rsp
 100143d:	jb     0x10014a0
 100143f:	movsxd ebp,DWORD PTR [rcx+0x6e]
 1001442:	add    BYTE PTR [eax],al
 1001445:	add    BYTE PTR [rax],al
 1001447:	add    BYTE PTR [rdi+rbp*2+0x63],cl
 100144b:	(bad)  
 100144c:	ins    BYTE PTR es:[rdi],dx
 100144d:	rex.R
 100144e:	rex.X push rbx
 1001450:	je     0x10014c1
 1001452:	jo     0x10014a8
 1001454:	jb     0x10014b7
 1001456:	movsxd ebp,DWORD PTR [rcx+0x6e]
 1001459:	add    BYTE PTR [eax],al
 100145c:	add    BYTE PTR [rax],al
 100145e:	add    BYTE PTR [rax],al
 1001460:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1001462:	movsxd esp,DWORD PTR [rcx+0x6c]
 1001465:	rex.R
 1001466:	rex.X push rbx
 1001468:	push   0x49657261
 100146d:	outs   dx,BYTE PTR ds:[rsi]
 100146e:	jae    0x10014e4
 1001470:	(bad)  
 1001471:	outs   dx,BYTE PTR ds:[rsi]
 1001472:	movsxd esp,DWORD PTR [rbp+0x0]
 1001475:	add    BYTE PTR [rax],al
 1001477:	add    BYTE PTR [rdi+rbp*2+0x63],cl
 100147b:	(bad)  
 100147c:	ins    BYTE PTR es:[rdi],dx
 100147d:	rex.R
 100147e:	rex.X
 100147f:	rex.RXB
 1001480:	gs je  0x10014d9
 1001483:	gs jb  0x10014f9
 1001486:	imul   ebp,DWORD PTR [rdi+0x6e],0x73
 100148d:	add    BYTE PTR [rax],al
 100148f:	add    BYTE PTR [rdi+rbp*2+0x63],cl
 1001493:	(bad)  
 1001494:	ins    BYTE PTR es:[rdi],dx
 1001495:	rex.R
 1001496:	rex.X push rbp
 1001498:	outs   dx,BYTE PTR ds:[rsi]
 1001499:	jae    0x1001503
 100149b:	(bad)  
 100149c:	jb     0x1001503
 100149e:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10014a0:	jae    0x1001516
 10014a2:	(bad)  
 10014a3:	outs   dx,BYTE PTR ds:[rsi]
 10014a4:	movsxd esp,DWORD PTR [rbp+0x0]
 10014a7:	add    BYTE PTR [rdi+rbp*2+0x63],cl
 10014ab:	(bad)  
 10014ac:	ins    BYTE PTR es:[rdi],dx
 10014ad:	rex.R
 10014ae:	rex.X
 10014af:	rex.RXB
 10014b0:	gs je  0x1001509
 10014b3:	gs jb  0x1001529
 10014b6:	imul   ebp,DWORD PTR [rdi+0x6e],0x6f666e49
 10014bd:	add    BYTE PTR [rax],al
 10014bf:	add    BYTE PTR [rsi+0x0],al
 10014c2:	outs   dx,DWORD PTR ds:[rsi]
 10014c3:	add    BYTE PTR [rdx+0x0],dh
 10014c6:	ins    DWORD PTR es:[rdi],dx
 10014c7:	add    BYTE PTR [rcx+0x0],ah
 10014ca:	je     0x10014cc
 10014cc:	rex.WRB add BYTE PTR [r13+0x0],r12b
 10014d0:	jae    0x10014d2
 10014d2:	jae    0x10014d4
 10014d4:	(bad)  
 10014d5:	add    BYTE PTR [rdi+0x0],ah
 10014d8:	add    BYTE PTR gs:[rdi+0x0],dl
 10014dc:	and    BYTE PTR [rax],al
 10014de:	data16 add BYTE PTR [rcx+0x0],ah
 10014e2:	imul   eax,DWORD PTR [rax],0x65006c
 10014e8:	add    BYTE PTR fs:[rsi],ch
 10014eb:	add    BYTE PTR [rax],ah
 10014ed:	add    BYTE PTR [rbp+0x0],al
 10014f0:	jb     0x10014f2
 10014f2:	jb     0x10014f4
 10014f4:	outs   dx,DWORD PTR ds:[rsi]
 10014f5:	add    BYTE PTR [rdx+0x0],dh
 10014f8:	and    BYTE PTR [rax],al
 10014fa:	movsxd eax,DWORD PTR [rax]
 10014fc:	outs   dx,DWORD PTR ds:[rsi]
 10014fd:	add    BYTE PTR [rax+rax*1+0x65],ah
 1001501:	add    BYTE PTR [rax],ah
 1001503:	add    BYTE PTR [rdx+0x0],dh
 1001506:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 100150b:	add    BYTE PTR [rdx+0x0],dh
 100150e:	outs   dx,BYTE PTR ds:[rsi]
 100150f:	add    BYTE PTR [rbp+0x0],ah
 1001512:	add    BYTE PTR fs:[rdx],bh
 1001515:	add    BYTE PTR [rax],ah
 1001517:	add    BYTE PTR [rip+0xa007500],ah        # 0xb008a1d
 100151d:	add    BYTE PTR [rax],al
 100151f:	add    BYTE PTR [rip+0x7300],ah        # 0x1008825
 1001525:	add    BYTE PTR [rax],al
 1001527:	add    BYTE PTR [rbx+0x0],al
 100152a:	outs   dx,DWORD PTR ds:[rsi]
 100152b:	add    BYTE PTR [rsi+0x0],ch
 100152e:	jbe    0x1001530
 1001530:	add    BYTE PTR gs:[rdx+0x0],dh
 1001534:	je     0x1001536
 1001536:	push   rbx
 1001537:	add    BYTE PTR [rax+rax*1+0x72],dh
 100153b:	add    BYTE PTR [rcx+0x0],ch
 100153e:	outs   dx,BYTE PTR ds:[rsi]
 100153f:	add    BYTE PTR [rdi+0x0],ah
 1001542:	push   rbx
 1001543:	add    BYTE PTR [rcx+0x0],ch
 1001546:	add    BYTE PTR fs:[rax+rax*1+0x6f],dl
 100154b:	add    BYTE PTR [rbx+0x0],dl
 100154e:	imul   eax,DWORD PTR [rax],0x570064
 1001554:	add    BYTE PTR [rax],al
 1001556:	add    BYTE PTR [rax],al
 1001558:	rex.WR add BYTE PTR [rdi+0x0],r13b
 100155c:	outs   dx,DWORD PTR ds:[rsi]
 100155d:	add    BYTE PTR [rbx+0x0],ch
 1001560:	jne    0x1001562
 1001562:	jo     0x1001564
 1001564:	add    BYTE PTR [r11+0x0],spl
 1001568:	movsxd eax,DWORD PTR [rax]
 100156a:	outs   dx,DWORD PTR ds:[rsi]
 100156b:	add    BYTE PTR [rbp+0x0],dh
 100156e:	outs   dx,BYTE PTR ds:[rsi]
 100156f:	add    BYTE PTR [rax+rax*1+0x53],dh
 1001573:	add    BYTE PTR [rcx+0x0],ch
 1001576:	add    BYTE PTR fs:[rdi+0x0],dl
 100157a:	add    BYTE PTR [rax],al
 100157c:	add    BYTE PTR [rax],al
 100157e:	add    BYTE PTR [rax],al
 1001580:	and    eax,0x5c007300
 1001585:	add    BYTE PTR [rip+0x7300],ah        # 0x100888b
 100158b:	add    BYTE PTR [rax],al
 100158d:	add    BYTE PTR [rax],al
 100158f:	add    BYTE PTR [rbx+0x0],dl
 1001592:	je     0x1001594
 1001594:	jb     0x1001596
 1001596:	imul   eax,DWORD PTR [rax],0x67006e
 100159c:	rex.XB add BYTE PTR [r11+0x0],spl
 10015a0:	push   0x72005000
 10015a5:	add    BYTE PTR [rcx+0x0],ch
 10015a8:	outs   dx,BYTE PTR ds:[rsi]
 10015a9:	add    BYTE PTR [rax+rax*1+0x66],dh
 10015ad:	add    BYTE PTR [rdi+0x0],dl
	...
 10015b8:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10015bc:	ins    BYTE PTR es:[rdi],dx
 10015bd:	add    BYTE PTR [rbp+0x0],ah
 10015c0:	push   rsp
 10015c1:	add    BYTE PTR [rcx+0x0],ch
 10015c4:	ins    DWORD PTR es:[rdi],dx
 10015c5:	add    BYTE PTR [rbp+0x0],ah
 10015c8:	push   rsp
 10015c9:	add    BYTE PTR [rdi+0x0],ch
 10015cc:	rex.WR add BYTE PTR [rdi+0x0],r13b
 10015d0:	movsxd eax,DWORD PTR [rax]
 10015d2:	(bad)  
 10015d3:	add    BYTE PTR [rax+rax*1+0x46],ch
 10015d7:	add    BYTE PTR [rcx+0x0],ch
 10015da:	ins    BYTE PTR es:[rdi],dx
 10015db:	add    BYTE PTR [rbp+0x0],ah
 10015de:	push   rsp
 10015df:	add    BYTE PTR [rcx+0x0],ch
 10015e2:	ins    DWORD PTR es:[rdi],dx
 10015e3:	add    BYTE PTR [rbp+0x0],ah
 10015e6:	add    BYTE PTR [rax],al
 10015e8:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10015ec:	ins    BYTE PTR es:[rdi],dx
 10015ed:	add    BYTE PTR [rbp+0x0],ah
 10015f0:	push   rsp
 10015f1:	add    BYTE PTR [rcx+0x0],ch
 10015f4:	ins    DWORD PTR es:[rdi],dx
 10015f5:	add    BYTE PTR [rbp+0x0],ah
 10015f8:	push   rsp
 10015f9:	add    BYTE PTR [rdi+0x0],ch
 10015fc:	push   rbx
 10015fd:	add    BYTE PTR [rcx+0x0],bh
 1001600:	jae    0x1001602
 1001602:	je     0x1001604
 1001604:	add    BYTE PTR gs:[rbp+0x0],ch
 1001608:	push   rsp
 1001609:	add    BYTE PTR [rcx+0x0],ch
 100160c:	ins    DWORD PTR es:[rdi],dx
 100160d:	add    BYTE PTR [rbp+0x0],ah
	...
 1001618:	rex.RXB add BYTE PTR [r13+0x0],r12b
 100161c:	je     0x100161e
 100161e:	add    BYTE PTR [rcx+0x0],r12b
 1001622:	je     0x1001624
 1001624:	add    BYTE PTR gs:[rsi+0x0],al
 1001628:	outs   dx,DWORD PTR ds:[rsi]
 1001629:	add    BYTE PTR [rdx+0x0],dh
 100162c:	ins    DWORD PTR es:[rdi],dx
 100162d:	add    BYTE PTR [rcx+0x0],ah
 1001630:	je     0x1001632
 1001632:	push   rdi
 1001633:	add    BYTE PTR [rax],al
 1001635:	add    BYTE PTR [rax],al
 1001637:	add    BYTE PTR [rdi+0x0],al
 100163a:	add    BYTE PTR gs:[rax+rax*1+0x54],dh
 100163f:	add    BYTE PTR [rcx+0x0],ch
 1001642:	ins    DWORD PTR es:[rdi],dx
 1001643:	add    BYTE PTR [rbp+0x0],ah
 1001646:	rex.RX add BYTE PTR [rdi+0x0],r13b
 100164a:	jb     0x100164c
 100164c:	ins    DWORD PTR es:[rdi],dx
 100164d:	add    BYTE PTR [rcx+0x0],ah
 1001650:	je     0x1001652
 1001652:	push   rdi
 1001653:	add    BYTE PTR [rax],al
 1001655:	add    BYTE PTR [rax],al
 1001657:	add    BYTE PTR [rbx+0x0],dl
 100165a:	je     0x100165c
 100165c:	jb     0x100165e
 100165e:	imul   eax,DWORD PTR [rax],0x67006e
 1001664:	rex.XB add BYTE PTR [r11+0x0],spl
 1001668:	push   0x6f004300
 100166d:	add    BYTE PTR [rax+0x0],dh
 1001670:	jns    0x1001672
 1001672:	push   rdi
 1001673:	add    BYTE PTR [rax],al
 1001675:	add    BYTE PTR [rax],al
 1001677:	add    BYTE PTR [rip+0x2e007500],ah        # 0x2f008b7d
 100167d:	add    BYTE PTR [rip+0x7500],ah        # 0x1008b83
	...
 100168f:	add    BYTE PTR [rdi+0x0],al
 1001692:	add    BYTE PTR gs:[rax+rax*1+0x4d],dh
 1001697:	add    BYTE PTR [rdi+0x0],ch
 100169a:	add    BYTE PTR fs:[rbp+0x0],dh
 100169e:	ins    BYTE PTR es:[rdi],dx
 100169f:	add    BYTE PTR [rbp+0x0],ah
 10016a2:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10016a6:	ins    BYTE PTR es:[rdi],dx
 10016a7:	add    BYTE PTR [rbp+0x0],ah
 10016aa:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 10016ae:	ins    DWORD PTR es:[rdi],dx
 10016af:	add    BYTE PTR [rbp+0x0],ah
 10016b2:	push   rdi
 10016b3:	add    BYTE PTR [rax],ah
 10016b5:	add    BYTE PTR [rsi+0x0],ah
 10016b8:	(bad)  
 10016b9:	add    BYTE PTR [rcx+0x0],ch
 10016bc:	ins    BYTE PTR es:[rdi],dx
 10016bd:	add    BYTE PTR [rbp+0x0],ah
 10016c0:	add    BYTE PTR fs:[rsi],ch
 10016c3:	add    BYTE PTR [rax],ah
 10016c5:	add    BYTE PTR [rbp+0x0],al
 10016c8:	jb     0x10016ca
 10016ca:	jb     0x10016cc
 10016cc:	outs   dx,DWORD PTR ds:[rsi]
 10016cd:	add    BYTE PTR [rdx+0x0],dh
 10016d0:	and    BYTE PTR [rax],al
 10016d2:	movsxd eax,DWORD PTR [rax]
 10016d4:	outs   dx,DWORD PTR ds:[rsi]
 10016d5:	add    BYTE PTR [rax+rax*1+0x65],ah
 10016d9:	add    BYTE PTR [rdx],bh
 10016db:	add    BYTE PTR [rax],ah
 10016dd:	add    BYTE PTR [rip+0xa007500],ah        # 0xb008be3
	...
 10016ef:	add    BYTE PTR [rbx+0x0],al
 10016f2:	(bad)  
 10016f3:	add    BYTE PTR [rsi+0x0],ch
 10016f6:	outs   dx,BYTE PTR ds:[rsi]
 10016f7:	add    BYTE PTR [rdi+0x0],ch
 10016fa:	je     0x10016fc
 10016fc:	and    BYTE PTR [rax],al
 10016fe:	jb     0x1001700
 1001700:	add    BYTE PTR gs:[rax+rax*1+0x72],dh
 1001705:	add    BYTE PTR [rcx+0x0],ch
 1001708:	add    BYTE PTR gs:[rsi+0x0],dh
 100170c:	add    BYTE PTR gs:[rax],ah
 100170f:	add    BYTE PTR [rax+0x0],dh
 1001712:	jb     0x1001714
 1001714:	outs   dx,DWORD PTR ds:[rsi]
 1001715:	add    BYTE PTR [rbx+0x0],ah
 1001718:	add    BYTE PTR gs:[rbx+0x0],dh
 100171c:	jae    0x100171e
 100171e:	and    BYTE PTR [rax],al
 1001720:	data16 add BYTE PTR [rbp+0x0],dh
 1001724:	ins    BYTE PTR es:[rdi],dx
 1001725:	add    BYTE PTR [rax+rax*1+0x20],ch
 1001729:	add    BYTE PTR [rax+0x0],dh
 100172c:	(bad)  
 100172d:	add    BYTE PTR [rax+rax*1+0x68],dh
 1001731:	add    BYTE PTR [rsi],ch
 1001733:	add    BYTE PTR [rdx],cl
 1001735:	add    BYTE PTR [rax],al
 1001737:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d008a3d
 100173d:	add    BYTE PTR [rdx+0x0],dl
 1001740:	add    BYTE PTR gs:[rbx+0x0],dh
 1001744:	outs   dx,DWORD PTR ds:[rsi]
 1001745:	add    BYTE PTR [rbp+0x0],dh
 1001748:	jb     0x100174a
 100174a:	movsxd eax,DWORD PTR [rax]
 100174c:	add    BYTE PTR gs:[rbx+0x0],dh
 1001750:	pop    rsp
 1001751:	add    BYTE PTR [rip+0x2e007300],ah        # 0x2f008a57
 1001757:	add    BYTE PTR [rdx+0x0],dh
 100175a:	ins    BYTE PTR es:[rdi],dx
 100175b:	add    BYTE PTR [rax+rax*1+0x0],ch
 100175f:	add    BYTE PTR [rbx+0x0],al
 1001762:	(bad)  
 1001763:	add    BYTE PTR [rsi+0x0],ch
 1001766:	outs   dx,BYTE PTR ds:[rsi]
 1001767:	add    BYTE PTR [rdi+0x0],ch
 100176a:	je     0x100176c
 100176c:	and    BYTE PTR [rax],al
 100176e:	movsxd eax,DWORD PTR [rax]
 1001770:	jb     0x1001772
 1001772:	add    BYTE PTR gs:[rcx+0x0],ah
 1001776:	je     0x1001778
 1001778:	add    BYTE PTR gs:[rax],ah
 100177b:	add    BYTE PTR [rdx+0x0],dh
 100177e:	add    BYTE PTR gs:[rbx+0x0],dh
 1001782:	outs   dx,DWORD PTR ds:[rsi]
 1001783:	add    BYTE PTR [rbp+0x0],dh
 1001786:	jb     0x1001788
 1001788:	movsxd eax,DWORD PTR [rax]
 100178a:	add    BYTE PTR gs:[rbx+0x0],dh
 100178e:	and    BYTE PTR [rax],al
 1001790:	data16 add BYTE PTR [rbp+0x0],dh
 1001794:	ins    BYTE PTR es:[rdi],dx
 1001795:	add    BYTE PTR [rax+rax*1+0x20],ch
 1001799:	add    BYTE PTR [rax+0x0],dh
 100179c:	(bad)  
 100179d:	add    BYTE PTR [rax+rax*1+0x68],dh
 10017a1:	add    BYTE PTR [rsi],ch
 10017a3:	add    BYTE PTR [rdx],cl
	...
 10017ad:	add    BYTE PTR [rax],al
 10017af:	add    BYTE PTR [rbx+0x0],al
 10017b2:	(bad)  
 10017b3:	add    BYTE PTR [rsi+0x0],ch
 10017b6:	outs   dx,BYTE PTR ds:[rsi]
 10017b7:	add    BYTE PTR [rdi+0x0],ch
 10017ba:	je     0x10017bc
 10017bc:	and    BYTE PTR [rax],al
 10017be:	ins    BYTE PTR es:[rdi],dx
 10017bf:	add    BYTE PTR [rdi+0x0],ch
 10017c2:	(bad)  
 10017c3:	add    BYTE PTR [rax+rax*1+0x20],ah
 10017c7:	add    BYTE PTR [rdx+0x0],dh
 10017ca:	add    BYTE PTR gs:[rbx+0x0],dh
 10017ce:	outs   dx,DWORD PTR ds:[rsi]
 10017cf:	add    BYTE PTR [rbp+0x0],dh
 10017d2:	jb     0x10017d4
 10017d4:	movsxd eax,DWORD PTR [rax]
 10017d6:	add    BYTE PTR gs:[rbx+0x0],dh
 10017da:	add    BYTE PTR cs:[rax],ah
 10017dd:	add    BYTE PTR [rax+rax*1+0x6f],cl
 10017e1:	add    BYTE PTR [rcx+0x0],ah
 10017e4:	add    BYTE PTR fs:[rax+rax*1+0x69],cl
 10017e9:	add    BYTE PTR [rdx+0x0],ah
 10017ec:	jb     0x10017ee
 10017ee:	(bad)  
 10017ef:	add    BYTE PTR [rdx+0x0],dh
 10017f2:	jns    0x10017f4
 10017f4:	add    BYTE PTR [r8+0x0],r15b
 10017f8:	push   rdi
 10017f9:	add    BYTE PTR [rax],ah
 10017fb:	add    BYTE PTR [rdx+0x0],dh
 10017fe:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1001803:	add    BYTE PTR [rdx+0x0],dh
 1001806:	outs   dx,BYTE PTR ds:[rsi]
 1001807:	add    BYTE PTR [rbp+0x0],ah
 100180a:	add    BYTE PTR fs:[rax],ah
 100180d:	add    BYTE PTR [rbp+0x0],ah
 1001810:	jb     0x1001812
 1001812:	jb     0x1001814
 1001814:	outs   dx,DWORD PTR ds:[rsi]
 1001815:	add    BYTE PTR [rdx+0x0],dh
 1001818:	and    BYTE PTR [rax],al
 100181a:	movsxd eax,DWORD PTR [rax]
 100181c:	outs   dx,DWORD PTR ds:[rsi]
 100181d:	add    BYTE PTR [rax+rax*1+0x65],ah
 1001821:	add    BYTE PTR [rdx],bh
 1001823:	add    BYTE PTR [rax],ah
 1001825:	add    BYTE PTR [rip+0xa007500],ah        # 0xb008d2b
 100182b:	add    BYTE PTR [rax],al
 100182d:	add    BYTE PTR [rax],al
 100182f:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1001833:	add    BYTE PTR [rdi+0x0],ch
 1001836:	imul   eax,DWORD PTR [rax],0x75
 1001839:	add    BYTE PTR [rax+0x0],dh
 100183c:	add    BYTE PTR [r11+0x0],spl
 1001840:	movsxd eax,DWORD PTR [rax]
 1001842:	outs   dx,DWORD PTR ds:[rsi]
 1001843:	add    BYTE PTR [rbp+0x0],dh
 1001846:	outs   dx,BYTE PTR ds:[rsi]
 1001847:	add    BYTE PTR [rax+rax*1+0x4e],dh
 100184b:	add    BYTE PTR [rcx+0x0],ah
 100184e:	ins    DWORD PTR es:[rdi],dx
 100184f:	add    BYTE PTR [rbp+0x0],ah
 1001852:	push   rdi
 1001853:	add    BYTE PTR [rax],al
 1001855:	add    BYTE PTR [rax],al
 1001857:	add    BYTE PTR [rax+rax*1+0x6f],cl
 100185b:	add    BYTE PTR [rbx+0x0],ah
 100185e:	(bad)  
 100185f:	add    BYTE PTR [rax+rax*1+0x41],ch
 1001863:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1001867:	add    BYTE PTR [rdi+0x0],ch
 100186a:	movsxd eax,DWORD PTR [rax]
 100186c:	add    BYTE PTR [rax],al
 100186e:	add    BYTE PTR [rax],al
 1001870:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001874:	outs   dx,BYTE PTR ds:[rsi]
 1001875:	add    BYTE PTR [rsi+0x0],dh
 1001878:	add    BYTE PTR gs:[rdx+0x0],dh
 100187c:	je     0x100187e
 100187e:	push   rbx
 100187f:	add    BYTE PTR [rcx+0x0],ch
 1001882:	add    BYTE PTR fs:[rax+rax*1+0x6f],dl
 1001887:	add    BYTE PTR [rbx+0x0],dl
 100188a:	je     0x100188c
 100188c:	jb     0x100188e
 100188e:	imul   eax,DWORD PTR [rax],0x67006e
 1001894:	push   rbx
 1001895:	add    BYTE PTR [rcx+0x0],ch
 1001898:	add    BYTE PTR fs:[rdi+0x0],dl
 100189c:	add    BYTE PTR [rax],al
 100189e:	add    BYTE PTR [rax],al
 10018a0:	add    BYTE PTR cs:[rax+rax*1+0x25],bl
 10018a5:	add    BYTE PTR [rbx+0x0],dh
	...
 10018b0:	rex.W add BYTE PTR [rbp+0x0],spl
 10018b4:	(bad)  
 10018b5:	add    BYTE PTR [rax+0x0],dh
 10018b8:	push   rbx
 10018b9:	add    BYTE PTR [rbp+0x0],ah
 10018bc:	je     0x10018be
 10018be:	rex.WB add BYTE PTR [r14+0x0],bpl
 10018c2:	data16 add BYTE PTR [rdi+0x0],ch
 10018c6:	jb     0x10018c8
 10018c8:	ins    DWORD PTR es:[rdi],dx
 10018c9:	add    BYTE PTR [rcx+0x0],ah
 10018cc:	je     0x10018ce
 10018ce:	imul   eax,DWORD PTR [rax],0x6e006f
 10018d4:	add    BYTE PTR [rax],al
 10018d6:	add    BYTE PTR [rax],al
 10018d8:	movsxd eax,DWORD PTR [rax]
 10018da:	add    BYTE PTR [rax],al
 10018dc:	add    BYTE PTR [rax],al
 10018de:	add    BYTE PTR [rax],al
 10018e0:	movsxd eax,DWORD PTR [rax]
 10018e2:	jb     0x10018e4
 10018e4:	add    BYTE PTR gs:[rcx+0x0],ah
 10018e8:	je     0x10018ea
 10018ea:	add    BYTE PTR gs:[rax],al
 10018ed:	add    BYTE PTR [rax],al
 10018ef:	add    BYTE PTR [rcx],dh
 10018f1:	add    BYTE PTR [rcx],dh
 10018f3:	add    BYTE PTR [rsi],ch
 10018f5:	add    BYTE PTR [rax],dh
 10018f7:	add    BYTE PTR [rax],al
 10018f9:	add    BYTE PTR [rax],al
 10018fb:	add    BYTE PTR [rbx+0x0],dh
 10018fe:	add    BYTE PTR [rax],al
 1001900:	jae    0x1001902
 1001902:	je     0x1001904
 1001904:	(bad)  
 1001905:	add    BYTE PTR [rdx+0x0],dh
 1001908:	je     0x100190a
 100190a:	add    BYTE PTR [rax],al
 100190c:	jo     0x100190e
 100190e:	add    BYTE PTR [rax],al
 1001910:	jae    0x1001912
 1001912:	je     0x1001914
 1001914:	outs   dx,DWORD PTR ds:[rsi]
 1001915:	add    BYTE PTR [rax+0x0],dh
 1001918:	add    BYTE PTR [rax],al
 100191a:	add    BYTE PTR [rax],al
 100191c:	add    BYTE PTR fs:[rax],al
 100191f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1001923:	add    BYTE PTR [rax+rax*1+0x65],ch
 1001927:	add    BYTE PTR [rax+rax*1+0x65],dh
 100192b:	add    BYTE PTR [rax],al
 100192d:	add    BYTE PTR [rax],al
 100192f:	add    BYTE PTR [rcx+0x0],ch
 1001932:	add    BYTE PTR [rax],al
 1001934:	add    BYTE PTR [rax],al
 1001936:	add    BYTE PTR [rax],al
 1001938:	imul   eax,DWORD PTR [rax],0x66006e
 100193e:	outs   dx,DWORD PTR ds:[rsi]
	...
 1001947:	add    BYTE PTR [rip+0xa007300],ah        # 0xb008c4d
 100194d:	add    BYTE PTR [rax],al
 100194f:	add    BYTE PTR [rax+rax*1+0x0],dh
 1001953:	add    BYTE PTR [rax],al
 1001955:	add    BYTE PTR [rax],al
 1001957:	add    BYTE PTR [rax+rax*1+0x72],dh
 100195b:	add    BYTE PTR [rcx+0x0],ah
 100195e:	movsxd eax,DWORD PTR [rax]
 1001960:	add    BYTE PTR gs:[rax],al
 1001963:	add    BYTE PTR [rdi+0x0],ch
 1001966:	outs   dx,BYTE PTR ds:[rsi]
	...
 100196f:	add    BYTE PTR [rdi+0x0],ch
 1001972:	data16 add BYTE PTR [rsi+0x0],ah
 1001976:	add    BYTE PTR [rax],al
 1001978:	push   0x0
 100197d:	add    BYTE PTR [rax],al
 100197f:	add    BYTE PTR [rbx+0x0],dh
 1001982:	push   0x72006100
 1001987:	add    BYTE PTR [rbp+0x0],ah
 100198a:	add    BYTE PTR [rax],al
 100198c:	jne    0x100198e
 100198e:	add    BYTE PTR [rax],al
 1001990:	jne    0x1001992
 1001992:	outs   dx,BYTE PTR ds:[rsi]
 1001993:	add    BYTE PTR [rbx+0x0],dh
 1001996:	push   0x72006100
 100199b:	add    BYTE PTR [rbp+0x0],ah
 100199e:	add    BYTE PTR [rax],al
 10019a0:	jbe    0x10019a2
 10019a2:	add    BYTE PTR [rax],al
 10019a4:	add    BYTE PTR [rax],al
 10019a6:	add    BYTE PTR [rax],al
 10019a8:	jbe    0x10019aa
 10019aa:	add    BYTE PTR gs:[rdx+0x0],dh
 10019ae:	jae    0x10019b0
 10019b0:	imul   eax,DWORD PTR [rax],0x6e006f
 10019b6:	jae    0x10019b8
	...
 10019c0:	and    eax,0x5c007300
 10019c5:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f007dcb
 10019cb:	add    BYTE PTR [rip+0x6400],ah        # 0x1007dd1
 10019d1:	add    BYTE PTR [rax],al
 10019d3:	add    BYTE PTR [rax],al
 10019d5:	add    BYTE PTR [rax],al
 10019d7:	add    BYTE PTR [rdx+0x0],dl
 10019da:	add    BYTE PTR gs:[rdi+0x0],ah
 10019de:	rex.RXB add BYTE PTR [r13+0x0],r12b
 10019e2:	je     0x10019e4
 10019e4:	push   rsi
 10019e5:	add    BYTE PTR [rcx+0x0],ah
 10019e8:	ins    BYTE PTR es:[rdi],dx
 10019e9:	add    BYTE PTR [rbp+0x0],dh
 10019ec:	add    BYTE PTR gs:[rdi+0x0],dl
	...
 10019f8:	rex.WR add BYTE PTR [rdi+0x0],r13b
 10019fc:	(bad)  
 10019fd:	add    BYTE PTR [rax+rax*1+0x4c],ah
 1001a01:	add    BYTE PTR [rcx+0x0],ch
 1001a04:	(bad)  
 1001a05:	add    BYTE PTR [rdx+0x0],dh
 1001a08:	(bad)  
 1001a09:	add    BYTE PTR [rdx+0x0],dh
 1001a0c:	jns    0x1001a0e
 1001a0e:	push   rdi
	...
 1001a17:	add    BYTE PTR [rdi+rcx*2+0x43],cl
 1001a1b:	rex.B
 1001a1c:	rex.WR
 1001a1d:	rex.R
 1001a1e:	rex.X pop rdi
 1001a20:	push   rax
 1001a21:	push   rdx
 1001a22:	rex.WRXB
 1001a23:	rex.R push rbp
 1001a25:	rex.XB push r12
 1001a27:	pop    rdi
 1001a28:	rex.WRX
 1001a29:	rex.B
 1001a2a:	rex.WRB
 1001a2b:	add    BYTE PTR [r8],r8b
 1001a2e:	add    BYTE PTR [rax],al
 1001a30:	rex.RXB add BYTE PTR [r13+0x0],r12b
 1001a34:	je     0x1001a36
 1001a36:	push   rax
 1001a37:	add    BYTE PTR [rdx+0x0],dh
 1001a3a:	outs   dx,DWORD PTR ds:[rsi]
 1001a3b:	add    BYTE PTR [rbx+0x0],ah
 1001a3e:	add    BYTE PTR [r8+rax*1+0x64],spl
 1001a43:	add    BYTE PTR [rdx+0x0],dh
 1001a46:	add    BYTE PTR gs:[rbx+0x0],dh
 1001a4a:	jae    0x1001a4c
 1001a4c:	add    BYTE PTR [rax],al
 1001a4e:	add    BYTE PTR [rax],al
 1001a50:	and    eax,0x20007300
 1001a55:	add    BYTE PTR [rax],ch
 1001a57:	add    BYTE PTR [rip+0x29007300],ah        # 0x2a008d5d
 1001a5d:	add    BYTE PTR [rdx],cl
	...
 1001a67:	add    BYTE PTR [rsi+0x0],al
 1001a6a:	jb     0x1001a6c
 1001a6c:	add    BYTE PTR gs:[rbp+0x0],ah
 1001a70:	rex.WR add BYTE PTR [rcx+0x0],r13b
 1001a74:	(bad)  
 1001a75:	add    BYTE PTR [rdx+0x0],dh
 1001a78:	(bad)  
 1001a79:	add    BYTE PTR [rdx+0x0],dh
 1001a7c:	jns    0x1001a7e
 1001a7e:	add    BYTE PTR [rax],al
 1001a80:	push   rbx
 1001a81:	add    BYTE PTR [rdi+0x0],cl
 1001a84:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1001a89:	add    BYTE PTR [rcx+0x0],al
 1001a8c:	push   rdx
 1001a8d:	add    BYTE PTR [rbp+0x0],al
 1001a90:	pop    rsp
 1001a91:	add    BYTE PTR [rbp+0x0],cl
 1001a94:	imul   eax,DWORD PTR [rax],0x720063
 1001a9a:	outs   dx,DWORD PTR ds:[rsi]
 1001a9b:	add    BYTE PTR [rbx+0x0],dh
 1001a9e:	outs   dx,DWORD PTR ds:[rsi]
 1001a9f:	add    BYTE PTR [rsi+0x0],ah
 1001aa2:	je     0x1001aa4
 1001aa4:	pop    rsp
 1001aa5:	add    BYTE PTR [rbp+0x0],cl
 1001aa8:	imul   eax,DWORD PTR [rax],0x720063
 1001aae:	outs   dx,DWORD PTR ds:[rsi]
 1001aaf:	add    BYTE PTR [rbx+0x0],dh
 1001ab2:	outs   dx,DWORD PTR ds:[rsi]
 1001ab3:	add    BYTE PTR [rsi+0x0],ah
 1001ab6:	je     0x1001ab8
 1001ab8:	and    BYTE PTR [rax],al
 1001aba:	push   rbx
 1001abb:	add    BYTE PTR [rcx+0x0],dl
 1001abe:	rex.WR add BYTE PTR [rax],r12b
 1001ac1:	add    BYTE PTR [rbx+0x0],dl
 1001ac4:	add    BYTE PTR gs:[rdx+0x0],dh
 1001ac8:	jbe    0x1001aca
 1001aca:	add    BYTE PTR gs:[rdx+0x0],dh
 1001ace:	and    BYTE PTR [rax],al
 1001ad0:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1001ad4:	movsxd eax,DWORD PTR [rax]
 1001ad6:	(bad)  
 1001ad7:	add    BYTE PTR [rax+rax*1+0x20],ch
 1001adb:	add    BYTE PTR [rax+rax*1+0x42],al
 1001adf:	add    BYTE PTR [rax+rax*1+0x49],bl
 1001ae3:	add    BYTE PTR [rsi+0x0],ch
 1001ae6:	jae    0x1001ae8
 1001ae8:	je     0x1001aea
 1001aea:	(bad)  
 1001aeb:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1001aef:	add    BYTE PTR [rbp+0x0],ah
 1001af2:	add    BYTE PTR fs:[rax],ah
 1001af5:	add    BYTE PTR [rsi+0x0],dl
 1001af8:	add    BYTE PTR gs:[rdx+0x0],dh
 1001afc:	jae    0x1001afe
 1001afe:	imul   eax,DWORD PTR [rax],0x6e006f
 1001b04:	jae    0x1001b06
 1001b06:	add    BYTE PTR [rax],al
 1001b08:	push   rdx
 1001b09:	push   rbx
 1001b0a:	rex.R push rbx
 1001b0c:	ret    0xebc8
 1001b0f:	sub    DWORD PTR [rsi+0x32],ebx
 1001b12:	and    al,0x4b
 1001b14:	test   BYTE PTR [rdx+rcx*8-0x74],ch
 1001b18:	fsub   st,st(4)
 1001b1a:	pop    rax
 1001b1b:	mov    edi,0x1
 1001b20:	push   rbx
 1001b21:	jno    0x1001b8f
 1001b23:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1001b25:	movsxd esp,DWORD PTR [rcx+0x6c]
 1001b28:	rex.R
 1001b29:	rex.X
 1001b2a:	cs jo  0x1001b91
 1001b2d:	(bad)  
	...
 1001bae:	add    BYTE PTR [rax],al
 1001bb0:	mov    QWORD PTR [rsp+0x18],r8
 1001bb5:	mov    QWORD PTR [rsp+0x20],r9
 1001bba:	push   rbx
 1001bbb:	push   rsi
 1001bbc:	sub    rsp,0x28
 1001bc0:	xor    ebx,ebx
 1001bc2:	mov    rsi,rcx
 1001bc5:	mov    eax,ebx
 1001bc7:	test   rdx,rdx
 1001bca:	je     0x1001bd5
 1001bcc:	cmp    rdx,0x7fffffff
 1001bd3:	jbe    0x1001bda
 1001bd5:	mov    eax,0x80070057
 1001bda:	test   eax,eax
 1001bdc:	js     0x1001c24
 1001bde:	mov    QWORD PTR [rsp+0x20],rdi
 1001be3:	lea    rdi,[rdx-0x1]
 1001be7:	lea    r9,[rsp+0x58]
 1001bec:	mov    rdx,rdi
 1001bef:	call   QWORD PTR [rip+0xfffffffffffff603]        # 0x10011f8
 1001bf5:	test   eax,eax
 1001bf7:	js     0x1001c14
 1001bf9:	cdqe   
 1001bfb:	cmp    rax,rdi
 1001bfe:	ja     0x1001c14
 1001c00:	jne    0x1001c1d
 1001c02:	mov    WORD PTR [rsi+rdi*2],bx
 1001c06:	mov    rdi,QWORD PTR [rsp+0x20]
 1001c0b:	mov    eax,ebx
 1001c0d:	add    rsp,0x28
 1001c11:	pop    rsi
 1001c12:	pop    rbx
 1001c13:	ret    
 1001c14:	mov    WORD PTR [rsi+rdi*2],bx
 1001c18:	mov    ebx,0x8007007a
 1001c1d:	mov    rdi,QWORD PTR [rsp+0x20]
 1001c22:	mov    eax,ebx
 1001c24:	add    rsp,0x28
 1001c28:	pop    rsi
 1001c29:	pop    rbx
 1001c2a:	ret    
 1001c2b:	int3   
 1001c2c:	int3   
 1001c2d:	int3   
 1001c2e:	int3   
 1001c2f:	int3   
 1001c30:	int3   
 1001c31:	int3   
 1001c32:	int3   
 1001c33:	int3   
 1001c34:	int3   
 1001c35:	int3   
 1001c36:	int3   
 1001c37:	int3   
 1001c38:	int3   
 1001c39:	int3   
 1001c3a:	int3   
 1001c3b:	int3   
 1001c3c:	int3   
 1001c3d:	int3   
 1001c3e:	int3   
 1001c3f:	int3   
 1001c40:	rex push rbp
 1001c42:	push   rbx
 1001c43:	push   rsi
 1001c44:	push   r14
 1001c46:	push   r15
 1001c48:	lea    rbp,[rsp-0x5b0]
 1001c50:	sub    rsp,0x6b0
 1001c57:	mov    rax,QWORD PTR [rip+0x44b2]        # 0x1006110
 1001c5e:	xor    rax,rsp
 1001c61:	mov    QWORD PTR [rbp+0x5a0],rax
 1001c68:	mov    rax,QWORD PTR [rip+0x4a81]        # 0x10066f0
 1001c6f:	mov    rsi,rdx
 1001c72:	mov    r14,rcx
 1001c75:	test   rax,rax
 1001c78:	jne    0x1001f66
 1001c7e:	xor    r15d,r15d
 1001c81:	lea    rcx,[rbp+0x188]
 1001c88:	xor    edx,edx
 1001c8a:	mov    r8d,0x200
 1001c90:	mov    QWORD PTR [rsp+0x48],r15
 1001c95:	mov    QWORD PTR [rsp+0x58],r15
 1001c9a:	mov    QWORD PTR [rbp+0x180],r15
 1001ca1:	call   0x1004850
 1001ca6:	lea    rax,[rsp+0x48]
 1001cab:	lea    rdx,[rip+0xfffffffffffff62e]        # 0x10012e0
 1001cb2:	mov    r9d,0x20019
 1001cb8:	xor    r8d,r8d
 1001cbb:	mov    rcx,0xffffffff80000002
 1001cc2:	mov    QWORD PTR [rsp+0x20],rax
 1001cc7:	mov    DWORD PTR [rsp+0x50],0x208
 1001ccf:	call   QWORD PTR [rip+0xfffffffffffff353]        # 0x1001028
 1001cd5:	mov    ebx,eax
 1001cd7:	test   eax,eax
 1001cd9:	jne    0x1001e41
 1001cdf:	mov    rcx,QWORD PTR [rsp+0x48]
 1001ce4:	mov    QWORD PTR [rsp+0x38],r15
 1001ce9:	mov    QWORD PTR [rsp+0x30],r15
 1001cee:	lea    r9,[rsp+0x40]
 1001cf3:	lea    r8,[rsp+0x78]
 1001cf8:	xor    edx,edx
 1001cfa:	mov    QWORD PTR [rsp+0x6f0],rdi
 1001d02:	mov    QWORD PTR [rsp+0x28],r15
 1001d07:	mov    DWORD PTR [rsp+0x40],0x100
 1001d0f:	mov    edi,r15d
 1001d12:	mov    QWORD PTR [rsp+0x20],r15
 1001d17:	call   QWORD PTR [rip+0xfffffffffffff313]        # 0x1001030
 1001d1d:	mov    ebx,eax
 1001d1f:	test   eax,eax
 1001d21:	jne    0x1001e22
 1001d27:	nop    WORD PTR [rax+rax*1+0x0]
 1001d30:	mov    QWORD PTR [rsp+0x70],r15
 1001d35:	lea    r8,[rsp+0x78]
 1001d3a:	mov    r10,r15
 1001d3d:	nop    DWORD PTR [rax]
 1001d40:	movzx  eax,WORD PTR [r8]
 1001d44:	mov    r9,r15
 1001d47:	mov    ecx,r15d
 1001d4a:	cmp    ax,0x30
 1001d4e:	jb     0x1001de3
 1001d54:	cmp    ax,0x39
 1001d58:	ja     0x1001d89
 1001d5a:	movzx  ecx,ax
 1001d5d:	lea    rax,[r9+r9*4]
 1001d61:	add    r8,0x2
 1001d65:	sub    ecx,0x30
 1001d68:	movsxd rdx,ecx
 1001d6b:	mov    ecx,0x1
 1001d70:	lea    r9,[rdx+rax*2]
 1001d74:	cmp    r9,0x7fffffff
 1001d7b:	jg     0x1001de3
 1001d7d:	movzx  eax,WORD PTR [r8]
 1001d81:	cmp    ax,0x30
 1001d85:	jae    0x1001d54
 1001d87:	jmp    0x1001d8d
 1001d89:	test   ecx,ecx
 1001d8b:	je     0x1001de3
 1001d8d:	mov    DWORD PTR [rsp+r10*4+0x70],r9d
 1001d92:	movzx  eax,WORD PTR [r8]
 1001d96:	test   ax,ax
 1001d99:	je     0x1001db0
 1001d9b:	cmp    ax,0x2e
 1001d9f:	jne    0x1001de3
 1001da1:	inc    r10
 1001da4:	add    r8,0x2
 1001da8:	cmp    r10,0x2
 1001dac:	jl     0x1001d40
 1001dae:	jmp    0x1001de3
 1001db0:	mov    eax,DWORD PTR [rsp+0x70]
 1001db4:	mov    ecx,DWORD PTR [rbp+0x180]
 1001dba:	cmp    eax,ecx
 1001dbc:	ja     0x1001dcc
 1001dbe:	jne    0x1001de3
 1001dc0:	mov    eax,DWORD PTR [rbp+0x184]
 1001dc6:	cmp    DWORD PTR [rsp+0x74],eax
 1001dca:	jbe    0x1001de3
 1001dcc:	lea    rcx,[rbp+0x180]
 1001dd3:	lea    rdx,[rsp+0x70]
 1001dd8:	mov    r8d,0x208
 1001dde:	call   0x1004844
 1001de3:	mov    rcx,QWORD PTR [rsp+0x48]
 1001de8:	mov    QWORD PTR [rsp+0x38],r15
 1001ded:	mov    QWORD PTR [rsp+0x30],r15
 1001df2:	inc    edi
 1001df4:	lea    r9,[rsp+0x40]
 1001df9:	lea    r8,[rsp+0x78]
 1001dfe:	mov    edx,edi
 1001e00:	mov    QWORD PTR [rsp+0x28],r15
 1001e05:	mov    DWORD PTR [rsp+0x40],0x100
 1001e0d:	mov    QWORD PTR [rsp+0x20],r15
 1001e12:	call   QWORD PTR [rip+0xfffffffffffff218]        # 0x1001030
 1001e18:	mov    ebx,eax
 1001e1a:	test   eax,eax
 1001e1c:	je     0x1001d30
 1001e22:	mov    rdi,QWORD PTR [rsp+0x6f0]
 1001e2a:	cmp    ebx,0x103
 1001e30:	jne    0x1001e41
 1001e32:	cmp    WORD PTR [rbp+0x188],r15w
 1001e3a:	jne    0x1001e74
 1001e3c:	mov    ebx,0x2
 1001e41:	mov    rcx,QWORD PTR [rsp+0x58]
 1001e46:	test   rcx,rcx
 1001e49:	je     0x1001e51
 1001e4b:	call   QWORD PTR [rip+0xfffffffffffff1ef]        # 0x1001040
 1001e51:	mov    rcx,QWORD PTR [rsp+0x48]
 1001e56:	test   rcx,rcx
 1001e59:	je     0x1001e61
 1001e5b:	call   QWORD PTR [rip+0xfffffffffffff1df]        # 0x1001040
 1001e61:	cmp    ebx,0x2
 1001e64:	jne    0x1001f53
 1001e6a:	mov    eax,0x89c50116
 1001e6f:	jmp    0x1001f94
 1001e74:	mov    rcx,QWORD PTR [rsp+0x48]
 1001e79:	lea    rax,[rsp+0x58]
 1001e7e:	lea    rdx,[rbp+0x188]
 1001e85:	mov    r9d,0x20019
 1001e8b:	xor    r8d,r8d
 1001e8e:	mov    QWORD PTR [rsp+0x20],rax
 1001e93:	call   QWORD PTR [rip+0xfffffffffffff18f]        # 0x1001028
 1001e99:	mov    ebx,eax
 1001e9b:	test   eax,eax
 1001e9d:	jne    0x1001e41
 1001e9f:	mov    rcx,QWORD PTR [rsp+0x58]
 1001ea4:	lea    rax,[rsp+0x50]
 1001ea9:	lea    r9,[rsp+0x60]
 1001eae:	mov    QWORD PTR [rsp+0x28],rax
 1001eb3:	lea    rax,[rbp+0x390]
 1001eba:	lea    rdx,[rip+0xfffffffffffff4a7]        # 0x1001368
 1001ec1:	xor    r8d,r8d
 1001ec4:	mov    QWORD PTR [rsp+0x20],rax
 1001ec9:	call   QWORD PTR [rip+0xfffffffffffff131]        # 0x1001000
 1001ecf:	mov    ebx,eax
 1001ed1:	test   eax,eax
 1001ed3:	jne    0x1001e41
 1001ed9:	cmp    DWORD PTR [rsp+0x60],0x1
 1001ede:	je     0x1001ee8
 1001ee0:	lea    ebx,[rax+0xd]
 1001ee3:	jmp    0x1001e41
 1001ee8:	mov    eax,DWORD PTR [rsp+0x50]
 1001eec:	shr    rax,1
 1001eef:	add    rax,rax
 1001ef2:	cmp    rax,0x20a
 1001ef8:	jae    0x1001f4b
 1001efa:	lea    rcx,[rbp+0x390]
 1001f01:	mov    WORD PTR [rbp+rax*1+0x390],r15w
 1001f0a:	call   QWORD PTR [rip+0xfffffffffffff158]        # 0x1001068
 1001f10:	mov    rcx,rax
 1001f13:	test   rax,rax
 1001f16:	jne    0x1001f25
 1001f18:	call   QWORD PTR [rip+0xfffffffffffff17a]        # 0x1001098
 1001f1e:	mov    ebx,eax
 1001f20:	jmp    0x1001e41
 1001f25:	xor    eax,eax
 1001f27:	lock cmpxchg QWORD PTR [rip+0x47c0],rcx        # 0x10066f0
 1001f30:	cmove  rcx,r15
 1001f34:	mov    ebx,r15d
 1001f37:	test   rcx,rcx
 1001f3a:	je     0x1001e41
 1001f40:	call   QWORD PTR [rip+0xfffffffffffff112]        # 0x1001058
 1001f46:	jmp    0x1001e41
 1001f4b:	xor    ecx,ecx
 1001f4d:	call   0x10041f8
 1001f52:	int3   
 1001f53:	test   ebx,ebx
 1001f55:	je     0x1001f66
 1001f57:	jle    0x1001f62
 1001f59:	movzx  ebx,bx
 1001f5c:	or     ebx,0x80070000
 1001f62:	mov    eax,ebx
 1001f64:	jmp    0x1001f94
 1001f66:	mov    rcx,QWORD PTR [rip+0x4783]        # 0x10066f0
 1001f6d:	mov    rdx,r14
 1001f70:	call   QWORD PTR [rip+0xfffffffffffff12a]        # 0x10010a0
 1001f76:	test   rax,rax
 1001f79:	jne    0x1001f8f
 1001f7b:	call   QWORD PTR [rip+0xfffffffffffff117]        # 0x1001098
 1001f81:	test   eax,eax
 1001f83:	jle    0x1001f94
 1001f85:	movzx  eax,ax
 1001f88:	or     eax,0x80070000
 1001f8d:	jmp    0x1001f94
 1001f8f:	mov    QWORD PTR [rsi],rax
 1001f92:	xor    eax,eax
 1001f94:	mov    rcx,QWORD PTR [rbp+0x5a0]
 1001f9b:	xor    rcx,rsp
 1001f9e:	call   0x10041d0
 1001fa3:	add    rsp,0x6b0
 1001faa:	pop    r15
 1001fac:	pop    r14
 1001fae:	pop    rsi
 1001faf:	pop    rbx
 1001fb0:	pop    rbp
 1001fb1:	ret    
 1001fb2:	int3   
 1001fb3:	int3   
 1001fb4:	int3   
 1001fb5:	int3   
 1001fb6:	int3   
 1001fb7:	int3   
 1001fb8:	int3   
 1001fb9:	int3   
 1001fba:	int3   
 1001fbb:	int3   
 1001fbc:	int3   
 1001fbd:	int3   
 1001fbe:	int3   
 1001fbf:	int3   
 1001fc0:	rex push rbx
 1001fc2:	sub    rsp,0x20
 1001fc6:	mov    rax,QWORD PTR [rip+0x4733]        # 0x1006700
 1001fcd:	mov    rbx,rcx
 1001fd0:	test   rax,rax
 1001fd3:	jne    0x1001ff3
 1001fd5:	lea    rdx,[rip+0x4724]        # 0x1006700
 1001fdc:	lea    rcx,[rip+0xfffffffffffff3bd]        # 0x10013a0
 1001fe3:	call   0x1001c40
 1001fe8:	test   eax,eax
 1001fea:	js     0x1002000
 1001fec:	mov    rax,QWORD PTR [rip+0x470d]        # 0x1006700
 1001ff3:	xor    r9d,r9d
 1001ff6:	xor    r8d,r8d
 1001ff9:	xor    edx,edx
 1001ffb:	mov    rcx,rbx
 1001ffe:	call   rax
 1002000:	add    rsp,0x20
 1002004:	pop    rbx
 1002005:	ret    
 1002006:	int3   
 1002007:	int3   
 1002008:	int3   
 1002009:	int3   
 100200a:	int3   
 100200b:	int3   
 100200c:	int3   
 100200d:	int3   
 100200e:	int3   
 100200f:	int3   
 1002010:	mov    QWORD PTR [rsp+0x18],r8
 1002015:	push   rbx
 1002016:	sub    rsp,0x40
 100201a:	mov    rbx,rcx
 100201d:	xor    ecx,ecx
 100201f:	lea    rax,[rsp+0x60]
 1002024:	mov    QWORD PTR [rsp+0x30],rax
 1002029:	mov    DWORD PTR [rsp+0x28],ecx
 100202d:	mov    r8d,edx
 1002030:	mov    rdx,QWORD PTR [rip+0x46a9]        # 0x10066e0
 1002037:	lea    rax,[rsp+0x68]
 100203c:	mov    QWORD PTR [rsp+0x68],rcx
 1002041:	xor    r9d,r9d
 1002044:	mov    ecx,0x900
 1002049:	mov    QWORD PTR [rsp+0x20],rax
 100204e:	call   QWORD PTR [rip+0xfffffffffffff024]        # 0x1001078
 1002054:	test   eax,eax
 1002056:	jne    0x100207c
 1002058:	call   QWORD PTR [rip+0xfffffffffffff03a]        # 0x1001098
 100205e:	mov    ebx,eax
 1002060:	call   QWORD PTR [rip+0xfffffffffffff1aa]        # 0x1001210
 1002066:	lea    rdx,[rip+0xfffffffffffff453]        # 0x10014c0
 100206d:	lea    rcx,[rax+0x60]
 1002071:	mov    r8d,ebx
 1002074:	call   QWORD PTR [rip+0xfffffffffffff1ae]        # 0x1001228
 100207a:	jmp    0x1002091
 100207c:	mov    r8,QWORD PTR [rsp+0x68]
 1002081:	lea    rdx,[rip+0xfffffffffffff498]        # 0x1001520
 1002088:	mov    rcx,rbx
 100208b:	call   QWORD PTR [rip+0xfffffffffffff197]        # 0x1001228
 1002091:	mov    rcx,QWORD PTR [rsp+0x68]
 1002096:	test   rcx,rcx
 1002099:	je     0x10020a1
 100209b:	call   QWORD PTR [rip+0xfffffffffffff01f]        # 0x10010c0
 10020a1:	add    rsp,0x40
 10020a5:	pop    rbx
 10020a6:	ret    
 10020a7:	int3   
 10020a8:	int3   
 10020a9:	int3   
 10020aa:	int3   
 10020ab:	int3   
 10020ac:	int3   
 10020ad:	int3   
 10020ae:	int3   
 10020af:	int3   
 10020b0:	mov    DWORD PTR [rsp+0x10],edx
 10020b4:	mov    QWORD PTR [rsp+0x18],r8
 10020b9:	mov    QWORD PTR [rsp+0x20],r9
 10020be:	sub    rsp,0x38
 10020c2:	lea    r8,[rsp+0x50]
 10020c7:	mov    QWORD PTR [rsp+0x20],0x0
 10020d0:	call   0x1002010
 10020d5:	add    rsp,0x38
 10020d9:	ret    
 10020da:	int3   
 10020db:	int3   
 10020dc:	int3   
 10020dd:	int3   
 10020de:	int3   
 10020df:	int3   
 10020e0:	test   ecx,ecx
 10020e2:	jns    0x10021f2
 10020e8:	mov    DWORD PTR [rsp+0x10],edx
 10020ec:	mov    r11,rsp
 10020ef:	mov    QWORD PTR [r11+0x18],r8
 10020f3:	mov    QWORD PTR [r11+0x20],r9
 10020f7:	push   rsi
 10020f8:	push   rdi
 10020f9:	sub    rsp,0x828
 1002100:	mov    rax,QWORD PTR [rip+0x4009]        # 0x1006110
 1002107:	xor    rax,rsp
 100210a:	mov    QWORD PTR [rsp+0x810],rax
 1002112:	mov    rax,QWORD PTR [rip+0x45df]        # 0x10066f8
 1002119:	mov    QWORD PTR [rsp+0x30],0x0
 1002122:	mov    edi,ecx
 1002124:	lea    rsi,[r11+0x18]
 1002128:	mov    QWORD PTR [r11-0x18],rbx
 100212c:	mov    DWORD PTR [rsp+0x30],0x3e8
 1002134:	test   rax,rax
 1002137:	jne    0x1002159
 1002139:	lea    rdx,[rip+0x45b8]        # 0x10066f8
 1002140:	lea    rcx,[rip+0xfffffffffffff2a1]        # 0x10013e8
 1002147:	call   0x1001c40
 100214c:	mov    ebx,eax
 100214e:	test   eax,eax
 1002150:	js     0x1002175
 1002152:	mov    rax,QWORD PTR [rip+0x459f]        # 0x10066f8
 1002159:	lea    rcx,[rsp+0x30]
 100215e:	xor    r8d,r8d
 1002161:	lea    r9,[rsp+0x40]
 1002166:	mov    QWORD PTR [rsp+0x20],rcx
 100216b:	lea    edx,[r8+0x1]
 100216f:	mov    ecx,edi
 1002171:	call   rax
 1002173:	mov    ebx,eax
 1002175:	call   QWORD PTR [rip+0xfffffffffffff095]        # 0x1001210
 100217b:	lea    rcx,[rax+0x60]
 100217f:	test   ebx,ebx
 1002181:	js     0x10021ad
 1002183:	mov    edx,DWORD PTR [rsp+0x848]
 100218a:	mov    r8,rsi
 100218d:	call   0x1002010
 1002192:	call   QWORD PTR [rip+0xfffffffffffff078]        # 0x1001210
 1002198:	lea    r8,[rsp+0x40]
 100219d:	lea    rcx,[rax+0x60]
 10021a1:	mov    edx,0x89c5500a
 10021a6:	call   0x10020b0
 10021ab:	jmp    0x10021d1
 10021ad:	mov    r8d,edi
 10021b0:	mov    edx,0x89c5500b
 10021b5:	call   0x10020b0
 10021ba:	call   QWORD PTR [rip+0xfffffffffffff050]        # 0x1001210
 10021c0:	mov    r8d,ebx
 10021c3:	lea    rcx,[rax+0x60]
 10021c7:	mov    edx,0x89c5500c
 10021cc:	call   0x10020b0
 10021d1:	mov    rbx,QWORD PTR [rsp+0x820]
 10021d9:	mov    rcx,QWORD PTR [rsp+0x810]
 10021e1:	xor    rcx,rsp
 10021e4:	call   0x10041d0
 10021e9:	add    rsp,0x828
 10021f0:	pop    rdi
 10021f1:	pop    rsi
 10021f2:	repz ret 
 10021f4:	int3   
 10021f5:	int3   
 10021f6:	int3   
 10021f7:	int3   
 10021f8:	int3   
 10021f9:	int3   
 10021fa:	int3   
 10021fb:	int3   
 10021fc:	int3   
 10021fd:	int3   
 10021fe:	int3   
 10021ff:	int3   
 1002200:	mov    r11,rsp
 1002203:	push   rbx
 1002204:	sub    rsp,0x2b0
 100220b:	mov    rax,QWORD PTR [rip+0x3efe]        # 0x1006110
 1002212:	xor    rax,rsp
 1002215:	mov    QWORD PTR [rsp+0x290],rax
 100221d:	mov    QWORD PTR [r11+0x18],rbp
 1002221:	mov    rbp,rdx
 1002224:	mov    QWORD PTR [r11-0x10],rsi
 1002228:	lea    rdx,[rsp+0x48]
 100222d:	xor    ebx,ebx
 100222f:	mov    rsi,rcx
 1002232:	mov    DWORD PTR [rsp+0x50],0x10
 100223a:	mov    DWORD PTR [rsp+0x40],0x101
 1002242:	mov    QWORD PTR [rsp+0x48],rbx
 1002247:	call   QWORD PTR [rip+0xffffffffffffedbb]        # 0x1001008
 100224d:	test   eax,eax
 100224f:	jne    0x100228e
 1002251:	call   QWORD PTR [rip+0xffffffffffffee41]        # 0x1001098
 1002257:	mov    ebx,eax
 1002259:	test   eax,eax
 100225b:	jle    0x1002266
 100225d:	movzx  ebx,ax
 1002260:	or     ebx,0x80070000
 1002266:	call   QWORD PTR [rip+0xffffffffffffefa4]        # 0x1001210
 100226c:	lea    r8,[rip+0xfffffffffffff2b5]        # 0x1001528
 1002273:	mov    r9d,ebx
 1002276:	lea    rcx,[rax+0x60]
 100227a:	mov    edx,0x89c5501d
 100227f:	call   0x10020b0
 1002284:	mov    ebx,0x89c5501d
 1002289:	jmp    0x1002377
 100228e:	mov    rdx,QWORD PTR [rsp+0x48]
 1002293:	lea    rax,[rsp+0x54]
 1002298:	lea    r9,[rsp+0x40]
 100229d:	mov    QWORD PTR [rsp+0x30],rax
 10022a2:	lea    rax,[rsp+0x50]
 10022a7:	lea    r8,[rsp+0x80]
 10022af:	mov    QWORD PTR [rsp+0x28],rax
 10022b4:	lea    rax,[rsp+0x58]
 10022b9:	xor    ecx,ecx
 10022bb:	mov    QWORD PTR [rsp+0x20],rax
 10022c0:	mov    QWORD PTR [rsp+0x2a0],rdi
 10022c8:	call   QWORD PTR [rip+0xffffffffffffed4a]        # 0x1001018
 10022ce:	test   eax,eax
 10022d0:	jne    0x1002320
 10022d2:	call   QWORD PTR [rip+0xffffffffffffedc0]        # 0x1001098
 10022d8:	mov    edi,eax
 10022da:	cmp    eax,0x534
 10022df:	jne    0x10022ff
 10022e1:	call   QWORD PTR [rip+0xffffffffffffef29]        # 0x1001210
 10022e7:	mov    r8,rsi
 10022ea:	mov    edx,0x89c55023
 10022ef:	lea    rcx,[rax+0x60]
 10022f3:	call   0x10020b0
 10022f8:	mov    ebx,0x89c55023
 10022fd:	jmp    0x100236f
 10022ff:	cmp    eax,0x7a
 1002302:	je     0x1002320
 1002304:	test   eax,eax
 1002306:	jle    0x1002311
 1002308:	movzx  edi,ax
 100230b:	or     edi,0x80070000
 1002311:	call   QWORD PTR [rip+0xffffffffffffeef9]        # 0x1001210
 1002317:	lea    r8,[rip+0xfffffffffffff23a]        # 0x1001558
 100231e:	jmp    0x1002359
 1002320:	lea    rax,[rsp+0x80]
 1002328:	lea    r9,[rsp+0x58]
 100232d:	lea    r8,[rip+0xfffffffffffff24c]        # 0x1001580
 1002334:	mov    edx,0x111
 1002339:	mov    rcx,rbp
 100233c:	mov    QWORD PTR [rsp+0x20],rax
 1002341:	call   0x1001bb0
 1002346:	mov    edi,eax
 1002348:	test   eax,eax
 100234a:	jns    0x100236f
 100234c:	call   QWORD PTR [rip+0xffffffffffffeebe]        # 0x1001210
 1002352:	lea    r8,[rip+0xfffffffffffff237]        # 0x1001590
 1002359:	lea    rcx,[rax+0x60]
 100235d:	mov    r9d,edi
 1002360:	mov    edx,0x89c5501d
 1002365:	call   0x10020b0
 100236a:	mov    ebx,0x89c5501d
 100236f:	mov    rdi,QWORD PTR [rsp+0x2a0]
 1002377:	mov    rcx,QWORD PTR [rsp+0x48]
 100237c:	mov    rsi,QWORD PTR [rsp+0x2a8]
 1002384:	mov    rbp,QWORD PTR [rsp+0x2d0]
 100238c:	test   rcx,rcx
 100238f:	je     0x1002397
 1002391:	call   QWORD PTR [rip+0xffffffffffffed29]        # 0x10010c0
 1002397:	mov    eax,ebx
 1002399:	mov    rcx,QWORD PTR [rsp+0x290]
 10023a1:	xor    rcx,rsp
 10023a4:	call   0x10041d0
 10023a9:	add    rsp,0x2b0
 10023b0:	pop    rbx
 10023b1:	ret    
 10023b2:	int3   
 10023b3:	int3   
 10023b4:	int3   
 10023b5:	int3   
 10023b6:	int3   
 10023b7:	int3   
 10023b8:	int3   
 10023b9:	int3   
 10023ba:	int3   
 10023bb:	int3   
 10023bc:	int3   
 10023bd:	int3   
 10023be:	int3   
 10023bf:	int3   
 10023c0:	rex push rbp
 10023c2:	push   rdi
 10023c3:	lea    rbp,[rsp-0x978]
 10023cb:	sub    rsp,0xa78
 10023d2:	mov    rax,QWORD PTR [rip+0x3d37]        # 0x1006110
 10023d9:	xor    rax,rsp
 10023dc:	mov    QWORD PTR [rbp+0x960],rax
 10023e3:	mov    rax,QWORD PTR [rip+0x433e]        # 0x1006728
 10023ea:	mov    rdi,rcx
 10023ed:	test   rax,rax
 10023f0:	jne    0x1002414
 10023f2:	lea    rdx,[rip+0x432f]        # 0x1006728
 10023f9:	lea    rcx,[rip+0xfffffffffffff018]        # 0x1001418
 1002400:	call   0x1001c40
 1002405:	test   eax,eax
 1002407:	js     0x10029d2
 100240d:	mov    rax,QWORD PTR [rip+0x4314]        # 0x1006728
 1002414:	lea    rdx,[rsp+0x70]
 1002419:	mov    r8d,0x5b4
 100241f:	mov    rcx,rdi
 1002422:	call   rax
 1002424:	test   eax,eax
 1002426:	js     0x10029d2
 100242c:	cmp    DWORD PTR [rbp+0x78],0x0
 1002430:	mov    QWORD PTR [rsp+0xa98],rbx
 1002438:	je     0x10027c6
 100243e:	cmp    DWORD PTR [rbp+0x7c],0x0
 1002442:	je     0x1002477
 1002444:	call   QWORD PTR [rip+0xffffffffffffedc6]        # 0x1001210
 100244a:	mov    r8,rdi
 100244d:	mov    edx,0x9c5501a
 1002452:	lea    rcx,[rax+0x30]
 1002456:	call   0x10020b0
 100245b:	call   QWORD PTR [rip+0xffffffffffffedaf]        # 0x1001210
 1002461:	mov    r8,rdi
 1002464:	lea    rcx,[rax+0x30]
 1002468:	mov    edx,0x89c5500d
 100246d:	call   0x10020b0
 1002472:	jmp    0x100296d
 1002477:	lea    rdx,[rsp+0x50]
 100247c:	lea    rcx,[rbp+0x94]
 1002483:	call   QWORD PTR [rip+0xffffffffffffec2f]        # 0x10010b8
 1002489:	test   eax,eax
 100248b:	jne    0x10024c5
 100248d:	call   QWORD PTR [rip+0xffffffffffffec05]        # 0x1001098
 1002493:	mov    ebx,eax
 1002495:	test   eax,eax
 1002497:	jle    0x10024a2
 1002499:	movzx  ebx,ax
 100249c:	or     ebx,0x80070000
 10024a2:	call   QWORD PTR [rip+0xffffffffffffed68]        # 0x1001210
 10024a8:	lea    r8,[rip+0xfffffffffffff109]        # 0x10015b8
 10024af:	mov    r9d,ebx
 10024b2:	lea    rcx,[rax+0x60]
 10024b6:	mov    edx,0x89c5501d
 10024bb:	call   0x10020b0
 10024c0:	jmp    0x100296d
 10024c5:	lea    rdx,[rsp+0x58]
 10024ca:	lea    rcx,[rsp+0x50]
 10024cf:	call   QWORD PTR [rip+0xffffffffffffebb3]        # 0x1001088
 10024d5:	test   eax,eax
 10024d7:	jne    0x1002511
 10024d9:	call   QWORD PTR [rip+0xffffffffffffebb9]        # 0x1001098
 10024df:	mov    ebx,eax
 10024e1:	test   eax,eax
 10024e3:	jle    0x10024ee
 10024e5:	movzx  ebx,ax
 10024e8:	or     ebx,0x80070000
 10024ee:	call   QWORD PTR [rip+0xffffffffffffed1c]        # 0x1001210
 10024f4:	lea    r8,[rip+0xfffffffffffff0ed]        # 0x10015e8
 10024fb:	mov    r9d,ebx
 10024fe:	lea    rcx,[rax+0x60]
 1002502:	mov    edx,0x89c5501d
 1002507:	call   0x10020b0
 100250c:	jmp    0x100296d
 1002511:	xor    r9d,r9d
 1002514:	lea    rax,[rbp+0x660]
 100251b:	lea    r8,[rsp+0x58]
 1002520:	lea    edx,[r9+0x1]
 1002524:	mov    ecx,0x400
 1002529:	mov    DWORD PTR [rsp+0x28],0x64
 1002531:	mov    QWORD PTR [rsp+0x20],rax
 1002536:	call   QWORD PTR [rip+0xffffffffffffeb14]        # 0x1001050
 100253c:	test   eax,eax
 100253e:	jne    0x1002578
 1002540:	call   QWORD PTR [rip+0xffffffffffffeb52]        # 0x1001098
 1002546:	mov    ebx,eax
 1002548:	test   eax,eax
 100254a:	jle    0x1002555
 100254c:	movzx  ebx,ax
 100254f:	or     ebx,0x80070000
 1002555:	call   QWORD PTR [rip+0xffffffffffffecb5]        # 0x1001210
 100255b:	lea    r8,[rip+0xfffffffffffff0b6]        # 0x1001618
 1002562:	mov    r9d,ebx
 1002565:	lea    rcx,[rax+0x60]
 1002569:	mov    edx,0x89c5501d
 100256e:	call   0x10020b0
 1002573:	jmp    0x100296d
 1002578:	lea    rax,[rbp+0x590]
 100257f:	lea    r8,[rsp+0x58]
 1002584:	xor    r9d,r9d
 1002587:	xor    edx,edx
 1002589:	mov    ecx,0x400
 100258e:	mov    DWORD PTR [rsp+0x28],0x64
 1002596:	mov    QWORD PTR [rsp+0x20],rax
 100259b:	call   QWORD PTR [rip+0xffffffffffffeadf]        # 0x1001080
 10025a1:	test   eax,eax
 10025a3:	jne    0x10025dd
 10025a5:	call   QWORD PTR [rip+0xffffffffffffeaed]        # 0x1001098
 10025ab:	mov    ebx,eax
 10025ad:	test   eax,eax
 10025af:	jle    0x10025ba
 10025b1:	movzx  ebx,ax
 10025b4:	or     ebx,0x80070000
 10025ba:	call   QWORD PTR [rip+0xffffffffffffec50]        # 0x1001210
 10025c0:	lea    r8,[rip+0xfffffffffffff071]        # 0x1001638
 10025c7:	mov    r9d,ebx
 10025ca:	lea    rcx,[rax+0x60]
 10025ce:	mov    edx,0x89c5501d
 10025d3:	call   0x10020b0
 10025d8:	jmp    0x100296d
 10025dd:	lea    rdx,[rbp+0x730]
 10025e4:	lea    rcx,[rbp+0x3aa]
 10025eb:	call   0x1002200
 10025f0:	test   eax,eax
 10025f2:	jns    0x100267c
 10025f8:	xor    ebx,ebx
 10025fa:	lea    r8,[rbp+0x3aa]
 1002601:	lea    rax,[rbp+0x730]
 1002608:	mov    edx,0x111
 100260d:	lea    rcx,[rbp+0x730]
 1002614:	sub    r8,rax
 1002617:	mov    edi,ebx
 1002619:	nop    DWORD PTR [rax+0x0]
 1002620:	lea    rax,[rdx+0x7ffffeed]
 1002627:	test   rax,rax
 100262a:	je     0x1002644
 100262c:	movzx  eax,WORD PTR [r8+rcx*1]
 1002631:	test   ax,ax
 1002634:	je     0x1002644
 1002636:	mov    WORD PTR [rcx],ax
 1002639:	add    rcx,0x2
 100263d:	dec    rdx
 1002640:	jne    0x1002620
 1002642:	jmp    0x1002649
 1002644:	test   rdx,rdx
 1002647:	jne    0x1002652
 1002649:	sub    rcx,0x2
 100264d:	mov    edi,0x8007007a
 1002652:	mov    WORD PTR [rcx],bx
 1002655:	test   edi,edi
 1002657:	jns    0x100267c
 1002659:	call   QWORD PTR [rip+0xffffffffffffebb1]        # 0x1001210
 100265f:	lea    r8,[rip+0xffffffffffffeff2]        # 0x1001658
 1002666:	mov    r9d,edi
 1002669:	lea    rcx,[rax+0x60]
 100266d:	mov    edx,0x89c5501d
 1002672:	call   0x10020b0
 1002677:	jmp    0x100296d
 100267c:	cmp    DWORD PTR [rbp+0x2a4],0x0
 1002683:	je     0x10026c8
 1002685:	cmp    DWORD PTR [rbp+0x94],0x0
 100268c:	jne    0x10026c8
 100268e:	cmp    DWORD PTR [rbp+0x98],0x0
 1002695:	jne    0x10026c8
 1002697:	call   QWORD PTR [rip+0xffffffffffffeb73]        # 0x1001210
 100269d:	lea    rcx,[rbp+0x730]
 10026a4:	lea    r9,[rbp+0x2a8]
 10026ab:	mov    QWORD PTR [rsp+0x20],rcx
 10026b0:	lea    r8,[rsp+0x74]
 10026b5:	lea    rcx,[rax+0x30]
 10026b9:	mov    edx,0x9c55024
 10026be:	call   0x10020b0
 10026c3:	jmp    0x10027a6
 10026c8:	call   QWORD PTR [rip+0xffffffffffffeb42]        # 0x1001210
 10026ce:	mov    r9d,DWORD PTR [rbp+0x84]
 10026d5:	lea    rcx,[rbp+0x730]
 10026dc:	mov    QWORD PTR [rsp+0x40],rcx
 10026e1:	lea    rcx,[rbp+0x2a8]
 10026e8:	lea    r8,[rsp+0x74]
 10026ed:	mov    QWORD PTR [rsp+0x38],rcx
 10026f2:	mov    ecx,DWORD PTR [rbp+0x90]
 10026f8:	mov    edx,0x89c5500e
 10026fd:	mov    DWORD PTR [rsp+0x30],ecx
 1002701:	mov    ecx,DWORD PTR [rbp+0x8c]
 1002707:	mov    DWORD PTR [rsp+0x28],ecx
 100270b:	mov    ecx,DWORD PTR [rbp+0x88]
 1002711:	mov    DWORD PTR [rsp+0x20],ecx
 1002715:	lea    rcx,[rax+0x30]
 1002719:	call   0x10020b0
 100271e:	cmp    DWORD PTR [rbp+0x520],0x0
 1002725:	je     0x1002734
 1002727:	call   QWORD PTR [rip+0xffffffffffffeae3]        # 0x1001210
 100272d:	mov    edx,0x9c5502c
 1002732:	jmp    0x100273f
 1002734:	call   QWORD PTR [rip+0xffffffffffffead6]        # 0x1001210
 100273a:	mov    edx,0x9c5502d
 100273f:	lea    rcx,[rax+0x30]
 1002743:	call   0x10020b0
 1002748:	cmp    DWORD PTR [rbp+0x80],0x0
 100274f:	je     0x100275e
 1002751:	call   QWORD PTR [rip+0xffffffffffffeab9]        # 0x1001210
 1002757:	mov    edx,0x9c5500f
 100275c:	jmp    0x1002769
 100275e:	call   QWORD PTR [rip+0xffffffffffffeaac]        # 0x1001210
 1002764:	mov    edx,0x9c55010
 1002769:	lea    rcx,[rax+0x30]
 100276d:	call   0x10020b0
 1002772:	cmp    DWORD PTR [rbp+0x94],0x0
 1002779:	ja     0x1002784
 100277b:	cmp    DWORD PTR [rbp+0x98],0x0
 1002782:	jbe    0x10027a6
 1002784:	call   QWORD PTR [rip+0xffffffffffffea86]        # 0x1001210
 100278a:	lea    r9,[rbp+0x590]
 1002791:	lea    r8,[rbp+0x660]
 1002798:	lea    rcx,[rax+0x30]
 100279c:	mov    edx,0x9c55011
 10027a1:	call   0x10020b0
 10027a6:	call   QWORD PTR [rip+0xffffffffffffea64]        # 0x1001210
 10027ac:	lea    r8,[rbp+0x9c]
 10027b3:	mov    edx,0x9c55025
 10027b8:	lea    rcx,[rax+0x30]
 10027bc:	call   0x10020b0
 10027c1:	jmp    0x100296d
 10027c6:	cmp    DWORD PTR [rbp+0x520],0x0
 10027cd:	je     0x10029a2
 10027d3:	mov    rax,QWORD PTR [rip+0x3f2e]        # 0x1006708
 10027da:	xor    ebx,ebx
 10027dc:	mov    DWORD PTR [rsp+0x50],ebx
 10027e0:	test   rax,rax
 10027e3:	jne    0x1002803
 10027e5:	lea    rdx,[rip+0x3f1c]        # 0x1006708
 10027ec:	lea    rcx,[rip+0xffffffffffffec85]        # 0x1001478
 10027f3:	call   0x1001c40
 10027f8:	test   eax,eax
 10027fa:	js     0x1002810
 10027fc:	mov    rax,QWORD PTR [rip+0x3f05]        # 0x1006708
 1002803:	lea    rdx,[rsp+0x50]
 1002808:	xor    ecx,ecx
 100280a:	call   rax
 100280c:	test   eax,eax
 100280e:	jns    0x1002828
 1002810:	cmp    eax,0x89c50114
 1002815:	je     0x1002828
 1002817:	mov    edx,0x9c55027
 100281c:	mov    ecx,eax
 100281e:	call   0x10020e0
 1002823:	jmp    0x100296d
 1002828:	mov    ecx,DWORD PTR [rsp+0x50]
 100282c:	mov    QWORD PTR [rsp+0xaa0],rsi
 1002834:	imul   rcx,rcx,0x58
 1002838:	call   QWORD PTR [rip+0xffffffffffffe9da]        # 0x1001218
 100283e:	mov    rsi,rax
 1002841:	test   rax,rax
 1002844:	jne    0x100285f
 1002846:	call   QWORD PTR [rip+0xffffffffffffe9c4]        # 0x1001210
 100284c:	mov    edx,0x89c55005
 1002851:	lea    rcx,[rax+0x60]
 1002855:	call   0x10020b0
 100285a:	jmp    0x1002965
 100285f:	mov    rax,QWORD PTR [rip+0x3ea2]        # 0x1006708
 1002866:	test   rax,rax
 1002869:	jne    0x1002889
 100286b:	lea    rdx,[rip+0x3e96]        # 0x1006708
 1002872:	lea    rcx,[rip+0xffffffffffffebff]        # 0x1001478
 1002879:	call   0x1001c40
 100287e:	test   eax,eax
 1002880:	js     0x1002897
 1002882:	mov    rax,QWORD PTR [rip+0x3e7f]        # 0x1006708
 1002889:	lea    rdx,[rsp+0x50]
 100288e:	mov    rcx,rsi
 1002891:	call   rax
 1002893:	test   eax,eax
 1002895:	jns    0x10028a8
 1002897:	mov    edx,0x9c55027
 100289c:	mov    ecx,eax
 100289e:	call   0x10020e0
 10028a3:	jmp    0x1002965
 10028a8:	mov    eax,DWORD PTR [rbp+0x88]
 10028ae:	mov    r9d,DWORD PTR [rbp+0x84]
 10028b5:	lea    r8,[rip+0xffffffffffffedbc]        # 0x1001678
 10028bc:	lea    rcx,[rbp+0x530]
 10028c3:	mov    edx,0x2c
 10028c8:	mov    DWORD PTR [rsp+0x20],eax
 10028cc:	mov    QWORD PTR [rsp+0xa70],r14
 10028d4:	call   0x1001bb0
 10028d9:	mov    r14d,eax
 10028dc:	test   eax,eax
 10028de:	jns    0x1002900
 10028e0:	call   QWORD PTR [rip+0xffffffffffffe92a]        # 0x1001210
 10028e6:	lea    r8,[rip+0xffffffffffffeca3]        # 0x1001590
 10028ed:	mov    r9d,r14d
 10028f0:	lea    rcx,[rax+0x60]
 10028f4:	mov    edx,0x89c5501d
 10028f9:	call   0x10020b0
 10028fe:	jmp    0x100295d
 1002900:	cmp    DWORD PTR [rsp+0x50],ebx
 1002904:	jbe    0x1002942
 1002906:	data16 nop WORD PTR [rax+rax*1+0x0]
 1002910:	or     r9d,0xffffffff
 1002914:	mov    ecx,ebx
 1002916:	lea    r8,[rbp+0x530]
 100291d:	or     edx,r9d
 1002920:	mov    DWORD PTR [rsp+0x20],0x1
 1002928:	imul   rcx,rcx,0x58
 100292c:	add    rcx,rsi
 100292f:	call   QWORD PTR [rip+0xffffffffffffe73b]        # 0x1001070
 1002935:	cmp    eax,0x2
 1002938:	je     0x100298e
 100293a:	inc    ebx
 100293c:	cmp    ebx,DWORD PTR [rsp+0x50]
 1002940:	jb     0x1002910
 1002942:	call   QWORD PTR [rip+0xffffffffffffe8c8]        # 0x1001210
 1002948:	lea    r8,[rbp+0x530]
 100294f:	mov    edx,0x9c55028
 1002954:	lea    rcx,[rax+0x60]
 1002958:	call   0x10020b0
 100295d:	mov    r14,QWORD PTR [rsp+0xa70]
 1002965:	mov    rsi,QWORD PTR [rsp+0xaa0]
 100296d:	mov    rbx,QWORD PTR [rsp+0xa98]
 1002975:	mov    rcx,QWORD PTR [rbp+0x960]
 100297c:	xor    rcx,rsp
 100297f:	call   0x10041d0
 1002984:	add    rsp,0xa78
 100298b:	pop    rdi
 100298c:	pop    rbp
 100298d:	ret    
 100298e:	call   QWORD PTR [rip+0xffffffffffffe87c]        # 0x1001210
 1002994:	mov    r8,rdi
 1002997:	mov    edx,0x89c55026
 100299c:	lea    rcx,[rax+0x30]
 10029a0:	jmp    0x1002958
 10029a2:	call   QWORD PTR [rip+0xffffffffffffe868]        # 0x1001210
 10029a8:	mov    r8,rdi
 10029ab:	mov    edx,0x9c5501a
 10029b0:	lea    rcx,[rax+0x30]
 10029b4:	call   0x10020b0
 10029b9:	call   QWORD PTR [rip+0xffffffffffffe851]        # 0x1001210
 10029bf:	mov    r8,rdi
 10029c2:	lea    rcx,[rax+0x30]
 10029c6:	mov    edx,0x89c55012
 10029cb:	call   0x10020b0
 10029d0:	jmp    0x100296d
 10029d2:	mov    r8,rdi
 10029d5:	mov    edx,0x9c5501a
 10029da:	mov    ecx,eax
 10029dc:	call   0x10020e0
 10029e1:	jmp    0x1002975
 10029e3:	int3   
 10029e4:	int3   
 10029e5:	int3   
 10029e6:	int3   
 10029e7:	int3   
 10029e8:	int3   
 10029e9:	int3   
 10029ea:	int3   
 10029eb:	int3   
 10029ec:	int3   
 10029ed:	int3   
 10029ee:	int3   
 10029ef:	int3   
 10029f0:	mov    QWORD PTR [rsp+0x8],rbx
 10029f5:	push   rdi
 10029f6:	sub    rsp,0x460
 10029fd:	mov    rax,QWORD PTR [rip+0x370c]        # 0x1006110
 1002a04:	xor    rax,rsp
 1002a07:	mov    QWORD PTR [rsp+0x450],rax
 1002a0f:	lea    rcx,[rsp+0x32]
 1002a14:	xor    edi,edi
 1002a16:	xor    edx,edx
 1002a18:	mov    r8d,0x206
 1002a1e:	mov    WORD PTR [rsp+0x30],di
 1002a23:	call   0x1004850
 1002a28:	lea    rcx,[rsp+0x242]
 1002a30:	xor    edx,edx
 1002a32:	mov    r8d,0x206
 1002a38:	mov    WORD PTR [rsp+0x240],di
 1002a40:	call   0x1004850
 1002a45:	lea    rdx,[rsp+0x30]
 1002a4a:	mov    r8d,0x104
 1002a50:	xor    ecx,ecx
 1002a52:	call   QWORD PTR [rip+0xffffffffffffe638]        # 0x1001090
 1002a58:	test   eax,eax
 1002a5a:	jne    0x1002a85
 1002a5c:	call   QWORD PTR [rip+0xffffffffffffe636]        # 0x1001098
 1002a62:	mov    ebx,eax
 1002a64:	call   QWORD PTR [rip+0xffffffffffffe7a6]        # 0x1001210
 1002a6a:	lea    rdx,[rip+0xffffffffffffec1f]        # 0x1001690
 1002a71:	lea    rcx,[rax+0x60]
 1002a75:	mov    r8d,ebx
 1002a78:	call   QWORD PTR [rip+0xffffffffffffe7aa]        # 0x1001228
 1002a7e:	xor    eax,eax
 1002a80:	jmp    0x1002b65
 1002a85:	lea    rcx,[rsp+0x30]
 1002a8a:	mov    edx,0x5c
 1002a8f:	call   QWORD PTR [rip+0xffffffffffffe76b]        # 0x1001200
 1002a95:	mov    rbx,rax
 1002a98:	test   rax,rax
 1002a9b:	jne    0x1002abb
 1002a9d:	call   QWORD PTR [rip+0xffffffffffffe76d]        # 0x1001210
 1002aa3:	lea    rdx,[rip+0xffffffffffffec46]        # 0x10016f0
 1002aaa:	lea    rcx,[rax+0x60]
 1002aae:	call   QWORD PTR [rip+0xffffffffffffe774]        # 0x1001228
 1002ab4:	xor    eax,eax
 1002ab6:	jmp    0x1002b65
 1002abb:	add    rbx,0x2
 1002abf:	mov    edx,0x2e
 1002ac4:	mov    WORD PTR [rax],di
 1002ac7:	mov    rcx,rbx
 1002aca:	call   QWORD PTR [rip+0xffffffffffffe730]        # 0x1001200
 1002ad0:	test   rax,rax
 1002ad3:	je     0x1002ad8
 1002ad5:	mov    WORD PTR [rax],di
 1002ad8:	lea    r9,[rsp+0x30]
 1002add:	lea    r8,[rip+0xffffffffffffec54]        # 0x1001738
 1002ae4:	lea    rcx,[rsp+0x240]
 1002aec:	mov    edx,0x104
 1002af1:	mov    QWORD PTR [rsp+0x20],rbx
 1002af6:	call   0x1001bb0
 1002afb:	test   eax,eax
 1002afd:	jns    0x1002b1a
 1002aff:	call   QWORD PTR [rip+0xffffffffffffe70b]        # 0x1001210
 1002b05:	lea    rdx,[rip+0xffffffffffffec54]        # 0x1001760
 1002b0c:	lea    rcx,[rax+0x60]
 1002b10:	call   QWORD PTR [rip+0xffffffffffffe712]        # 0x1001228
 1002b16:	xor    eax,eax
 1002b18:	jmp    0x1002b65
 1002b1a:	xor    edx,edx
 1002b1c:	lea    rcx,[rsp+0x240]
 1002b24:	lea    r8d,[rdx+0x22]
 1002b28:	call   QWORD PTR [rip+0xffffffffffffe532]        # 0x1001060
 1002b2e:	mov    QWORD PTR [rip+0x3bab],rax        # 0x10066e0
 1002b35:	test   rax,rax
 1002b38:	jne    0x1002b60
 1002b3a:	call   QWORD PTR [rip+0xffffffffffffe558]        # 0x1001098
 1002b40:	mov    ebx,eax
 1002b42:	call   QWORD PTR [rip+0xffffffffffffe6c8]        # 0x1001210
 1002b48:	lea    rdx,[rip+0xffffffffffffec61]        # 0x10017b0
 1002b4f:	lea    rcx,[rax+0x60]
 1002b53:	mov    r8d,ebx
 1002b56:	call   QWORD PTR [rip+0xffffffffffffe6cc]        # 0x1001228
 1002b5c:	xor    eax,eax
 1002b5e:	jmp    0x1002b65
 1002b60:	mov    eax,0x1
 1002b65:	mov    rcx,QWORD PTR [rsp+0x450]
 1002b6d:	xor    rcx,rsp
 1002b70:	call   0x10041d0
 1002b75:	mov    rbx,QWORD PTR [rsp+0x470]
 1002b7d:	add    rsp,0x460
 1002b84:	pop    rdi
 1002b85:	ret    
 1002b86:	int3   
 1002b87:	int3   
 1002b88:	int3   
 1002b89:	int3   
 1002b8a:	int3   
 1002b8b:	int3   
 1002b8c:	int3   
 1002b8d:	int3   
 1002b8e:	int3   
 1002b8f:	int3   
 1002b90:	mov    QWORD PTR [rsp+0x20],rbx
 1002b95:	push   rbp
 1002b96:	push   rsi
 1002b97:	push   rdi
 1002b98:	push   r14
 1002b9a:	push   r15
 1002b9c:	sub    rsp,0x870
 1002ba3:	mov    rax,QWORD PTR [rip+0x3566]        # 0x1006110
 1002baa:	xor    rax,rsp
 1002bad:	mov    QWORD PTR [rsp+0x860],rax
 1002bb5:	xor    edi,edi
 1002bb7:	lea    rax,[rsp+0x48]
 1002bbc:	mov    r15,rdx
 1002bbf:	mov    QWORD PTR [rsp+0x30],rax
 1002bc4:	lea    rax,[rsp+0x40]
 1002bc9:	mov    rbx,r8
 1002bcc:	mov    r14,rcx
 1002bcf:	mov    rdx,rcx
 1002bd2:	mov    QWORD PTR [rsp+0x28],rax
 1002bd7:	lea    r9,[rsp+0x44]
 1002bdc:	mov    esi,0x400
 1002be1:	xor    r8d,r8d
 1002be4:	xor    ecx,ecx
 1002be6:	mov    QWORD PTR [rsp+0x20],rdi
 1002beb:	mov    DWORD PTR [rsp+0x44],edi
 1002bef:	mov    DWORD PTR [rsp+0x40],esi
 1002bf3:	mov    QWORD PTR [rsp+0x50],rdi
 1002bf8:	call   QWORD PTR [rip+0xffffffffffffe412]        # 0x1001010
 1002bfe:	call   QWORD PTR [rip+0xffffffffffffe494]        # 0x1001098
 1002c04:	mov    ebp,eax
 1002c06:	cmp    eax,0x534
 1002c0b:	je     0x1002ca9
 1002c11:	cmp    eax,0x7a
 1002c14:	je     0x1002c38
 1002c16:	test   eax,eax
 1002c18:	jle    0x1002c23
 1002c1a:	movzx  ebp,ax
 1002c1d:	or     ebp,0x80070000
 1002c23:	call   QWORD PTR [rip+0xffffffffffffe5e7]        # 0x1001210
 1002c29:	mov    r9d,ebp
 1002c2c:	lea    r8,[rip+0xffffffffffffebfd]        # 0x1001830
 1002c33:	jmp    0x1002d67
 1002c38:	mov    edx,DWORD PTR [rsp+0x44]
 1002c3c:	mov    ecx,0x40
 1002c41:	call   QWORD PTR [rip+0xffffffffffffe461]        # 0x10010a8
 1002c47:	mov    rbp,rax
 1002c4a:	test   rax,rax
 1002c4d:	jne    0x1002c67
 1002c4f:	call   QWORD PTR [rip+0xffffffffffffe5bb]        # 0x1001210
 1002c55:	mov    r9d,0x80070008
 1002c5b:	lea    r8,[rip+0xffffffffffffebf6]        # 0x1001858
 1002c62:	jmp    0x1002d67
 1002c67:	lea    rax,[rsp+0x48]
 1002c6c:	lea    r9,[rsp+0x44]
 1002c71:	mov    r8,rbp
 1002c74:	mov    QWORD PTR [rsp+0x30],rax
 1002c79:	lea    rax,[rsp+0x40]
 1002c7e:	mov    rdx,r14
 1002c81:	mov    QWORD PTR [rsp+0x28],rax
 1002c86:	lea    rax,[rsp+0x60]
 1002c8b:	xor    ecx,ecx
 1002c8d:	mov    QWORD PTR [rsp+0x20],rax
 1002c92:	mov    DWORD PTR [rsp+0x40],esi
 1002c96:	call   QWORD PTR [rip+0xffffffffffffe374]        # 0x1001010
 1002c9c:	mov    rcx,rbp
 1002c9f:	test   eax,eax
 1002ca1:	jne    0x1002cca
 1002ca3:	call   QWORD PTR [rip+0xffffffffffffe417]        # 0x10010c0
 1002ca9:	call   QWORD PTR [rip+0xffffffffffffe561]        # 0x1001210
 1002caf:	mov    r8,r14
 1002cb2:	mov    edx,0x89c55023
 1002cb7:	lea    rcx,[rax+0x60]
 1002cbb:	call   0x10020b0
 1002cc0:	mov    edi,0x89c55023
 1002cc5:	jmp    0x1002d7f
 1002cca:	lea    rdx,[rsp+0x50]
 1002ccf:	call   QWORD PTR [rip+0xffffffffffffe363]        # 0x1001038
 1002cd5:	test   eax,eax
 1002cd7:	jne    0x1002d09
 1002cd9:	mov    rcx,rbp
 1002cdc:	call   QWORD PTR [rip+0xffffffffffffe3de]        # 0x10010c0
 1002ce2:	call   QWORD PTR [rip+0xffffffffffffe3b0]        # 0x1001098
 1002ce8:	mov    ebx,eax
 1002cea:	test   eax,eax
 1002cec:	jle    0x1002cf7
 1002cee:	movzx  ebx,ax
 1002cf1:	or     ebx,0x80070000
 1002cf7:	call   QWORD PTR [rip+0xffffffffffffe513]        # 0x1001210
 1002cfd:	mov    r9d,ebx
 1002d00:	lea    r8,[rip+0xffffffffffffeb69]        # 0x1001870
 1002d07:	jmp    0x1002d67
 1002d09:	mov    rcx,QWORD PTR [rsp+0x50]
 1002d0e:	mov    r14d,edi
 1002d11:	sub    rcx,rbx
 1002d14:	lea    rax,[rsi+0x7ffffbfe]
 1002d1b:	test   rax,rax
 1002d1e:	je     0x1002d37
 1002d20:	movzx  eax,WORD PTR [rcx+rbx*1]
 1002d24:	test   ax,ax
 1002d27:	je     0x1002d37
 1002d29:	mov    WORD PTR [rbx],ax
 1002d2c:	add    rbx,0x2
 1002d30:	dec    rsi
 1002d33:	jne    0x1002d14
 1002d35:	jmp    0x1002d3c
 1002d37:	test   rsi,rsi
 1002d3a:	jne    0x1002d46
 1002d3c:	sub    rbx,0x2
 1002d40:	mov    r14d,0x8007007a
 1002d46:	mov    WORD PTR [rbx],di
 1002d49:	test   r14d,r14d
 1002d4c:	jns    0x1002d7c
 1002d4e:	mov    rcx,rbp
 1002d51:	call   QWORD PTR [rip+0xffffffffffffe369]        # 0x10010c0
 1002d57:	call   QWORD PTR [rip+0xffffffffffffe4b3]        # 0x1001210
 1002d5d:	mov    r9d,r14d
 1002d60:	lea    r8,[rip+0xffffffffffffe8f1]        # 0x1001658
 1002d67:	lea    rcx,[rax+0x60]
 1002d6b:	mov    edx,0x89c5501d
 1002d70:	call   0x10020b0
 1002d75:	mov    edi,0x89c5501d
 1002d7a:	jmp    0x1002d7f
 1002d7c:	mov    QWORD PTR [r15],rbp
 1002d7f:	mov    rcx,QWORD PTR [rsp+0x50]
 1002d84:	test   rcx,rcx
 1002d87:	je     0x1002d8f
 1002d89:	call   QWORD PTR [rip+0xffffffffffffe331]        # 0x10010c0
 1002d8f:	mov    eax,edi
 1002d91:	mov    rcx,QWORD PTR [rsp+0x860]
 1002d99:	xor    rcx,rsp
 1002d9c:	call   0x10041d0
 1002da1:	mov    rbx,QWORD PTR [rsp+0x8b8]
 1002da9:	add    rsp,0x870
 1002db0:	pop    r15
 1002db2:	pop    r14
 1002db4:	pop    rdi
 1002db5:	pop    rsi
 1002db6:	pop    rbp
 1002db7:	ret    
 1002db8:	int3   
 1002db9:	int3   
 1002dba:	int3   
 1002dbb:	int3   
 1002dbc:	int3   
 1002dbd:	int3   
 1002dbe:	int3   
 1002dbf:	int3   
 1002dc0:	mov    QWORD PTR [rsp+0x18],rbx
 1002dc5:	push   rdi
 1002dc6:	sub    rsp,0x5f0
 1002dcd:	mov    rax,QWORD PTR [rip+0x333c]        # 0x1006110
 1002dd4:	xor    rax,rsp
 1002dd7:	mov    QWORD PTR [rsp+0x5e0],rax
 1002ddf:	mov    rax,QWORD PTR [rip+0x3942]        # 0x1006728
 1002de6:	mov    rbx,rdx
 1002de9:	mov    rdi,rcx
 1002dec:	test   rax,rax
 1002def:	jne    0x1002e13
 1002df1:	lea    rdx,[rip+0x3930]        # 0x1006728
 1002df8:	lea    rcx,[rip+0xffffffffffffe619]        # 0x1001418
 1002dff:	call   0x1001c40
 1002e04:	test   eax,eax
 1002e06:	js     0x1002f01
 1002e0c:	mov    rax,QWORD PTR [rip+0x3915]        # 0x1006728
 1002e13:	lea    rdx,[rsp+0x20]
 1002e18:	mov    r8d,0x5b4
 1002e1e:	mov    rcx,rdi
 1002e21:	call   rax
 1002e23:	test   eax,eax
 1002e25:	js     0x1002f01
 1002e2b:	cmp    DWORD PTR [rsp+0x128],0x0
 1002e33:	je     0x1002efc
 1002e39:	cmp    WORD PTR [rdi],0x2e
 1002e3d:	jne    0x1002e8e
 1002e3f:	cmp    WORD PTR [rdi+0x2],0x5c
 1002e44:	jne    0x1002e8e
 1002e46:	lea    r9,[rsp+0x358]
 1002e4e:	lea    r8,[rip+0xffffffffffffea4b]        # 0x10018a0
 1002e55:	mov    edx,0x83
 1002e5a:	mov    rcx,rbx
 1002e5d:	call   0x1001bb0
 1002e62:	mov    ebx,eax
 1002e64:	test   eax,eax
 1002e66:	jns    0x1002f01
 1002e6c:	call   QWORD PTR [rip+0xffffffffffffe39e]        # 0x1001210
 1002e72:	lea    r8,[rip+0xffffffffffffe717]        # 0x1001590
 1002e79:	mov    r9d,ebx
 1002e7c:	lea    rcx,[rax+0x60]
 1002e80:	mov    edx,0x89c5501d
 1002e85:	call   0x10020b0
 1002e8a:	mov    eax,ebx
 1002e8c:	jmp    0x1002f01
 1002e8e:	xor    r8d,r8d
 1002e91:	lea    rdx,[rsp+0x24]
 1002e96:	mov    ecx,0x81
 1002e9b:	sub    rdx,rbx
 1002e9e:	mov    edi,r8d
 1002ea1:	lea    rax,[rcx+0x7fffff7d]
 1002ea8:	test   rax,rax
 1002eab:	je     0x1002ec4
 1002ead:	movzx  eax,WORD PTR [rdx+rbx*1]
 1002eb1:	test   ax,ax
 1002eb4:	je     0x1002ec4
 1002eb6:	mov    WORD PTR [rbx],ax
 1002eb9:	add    rbx,0x2
 1002ebd:	dec    rcx
 1002ec0:	jne    0x1002ea1
 1002ec2:	jmp    0x1002ec9
 1002ec4:	test   rcx,rcx
 1002ec7:	jne    0x1002ed2
 1002ec9:	sub    rbx,0x2
 1002ecd:	mov    edi,0x8007007a
 1002ed2:	mov    WORD PTR [rbx],r8w
 1002ed6:	test   edi,edi
 1002ed8:	jns    0x1002ef8
 1002eda:	call   QWORD PTR [rip+0xffffffffffffe330]        # 0x1001210
 1002ee0:	lea    r8,[rip+0xffffffffffffe6a9]        # 0x1001590
 1002ee7:	mov    r9d,edi
 1002eea:	lea    rcx,[rax+0x60]
 1002eee:	mov    edx,0x89c5501d
 1002ef3:	call   0x10020b0
 1002ef8:	mov    eax,edi
 1002efa:	jmp    0x1002f01
 1002efc:	mov    eax,0x89c50107
 1002f01:	mov    rcx,QWORD PTR [rsp+0x5e0]
 1002f09:	xor    rcx,rsp
 1002f0c:	call   0x10041d0
 1002f11:	mov    rbx,QWORD PTR [rsp+0x610]
 1002f19:	add    rsp,0x5f0
 1002f20:	pop    rdi
 1002f21:	ret    
 1002f22:	int3   
 1002f23:	int3   
 1002f24:	int3   
 1002f25:	int3   
 1002f26:	int3   
 1002f27:	int3   
 1002f28:	int3   
 1002f29:	int3   
 1002f2a:	int3   
 1002f2b:	int3   
 1002f2c:	int3   
 1002f2d:	int3   
 1002f2e:	int3   
 1002f2f:	int3   
 1002f30:	mov    QWORD PTR [rsp+0x10],rsi
 1002f35:	push   rdi
 1002f36:	sub    rsp,0x20
 1002f3a:	movzx  esi,dx
 1002f3d:	mov    rdi,rcx
 1002f40:	test   rcx,rcx
 1002f43:	je     0x1002f90
 1002f45:	movzx  eax,WORD PTR [rcx]
 1002f48:	cmp    ax,0x2d
 1002f4c:	je     0x1002f54
 1002f4e:	cmp    ax,0x2f
 1002f52:	jne    0x1002f90
 1002f54:	movzx  ecx,WORD PTR [rcx+0x2]
 1002f58:	mov    QWORD PTR [rsp+0x30],rbx
 1002f5d:	call   QWORD PTR [rip+0xffffffffffffe2cd]        # 0x1001230
 1002f63:	movzx  ecx,si
 1002f66:	movzx  ebx,ax
 1002f69:	call   QWORD PTR [rip+0xffffffffffffe2c1]        # 0x1001230
 1002f6f:	cmp    bx,ax
 1002f72:	mov    rbx,QWORD PTR [rsp+0x30]
 1002f77:	jne    0x1002f90
 1002f79:	cmp    WORD PTR [rdi+0x4],0x0
 1002f7e:	jne    0x1002f90
 1002f80:	mov    eax,0x1
 1002f85:	mov    rsi,QWORD PTR [rsp+0x38]
 1002f8a:	add    rsp,0x20
 1002f8e:	pop    rdi
 1002f8f:	ret    
 1002f90:	xor    eax,eax
 1002f92:	mov    rsi,QWORD PTR [rsp+0x38]
 1002f97:	add    rsp,0x20
 1002f9b:	pop    rdi
 1002f9c:	ret    
 1002f9d:	int3   
 1002f9e:	int3   
 1002f9f:	int3   
 1002fa0:	int3   
 1002fa1:	int3   
 1002fa2:	int3   
 1002fa3:	int3   
 1002fa4:	int3   
 1002fa5:	int3   
 1002fa6:	int3   
 1002fa7:	int3   
 1002fa8:	int3   
 1002fa9:	int3   
 1002faa:	int3   
 1002fab:	int3   
 1002fac:	int3   
 1002fad:	int3   
 1002fae:	int3   
 1002faf:	int3   
 1002fb0:	rex push rbp
 1002fb2:	push   rbx
 1002fb3:	lea    rbp,[rsp-0x1838]
 1002fbb:	mov    eax,0x1938
 1002fc0:	call   0x10047f0
 1002fc5:	sub    rsp,rax
 1002fc8:	mov    rax,QWORD PTR [rip+0x3141]        # 0x1006110
 1002fcf:	xor    rax,rsp
 1002fd2:	mov    QWORD PTR [rbp+0x1810],rax
 1002fd9:	mov    QWORD PTR [rsp+0x1950],rsi
 1002fe1:	mov    QWORD PTR [rsp+0x1960],rdi
 1002fe9:	mov    rdi,rdx
 1002fec:	mov    esi,ecx
 1002fee:	call   0x10029f0
 1002ff3:	test   eax,eax
 1002ff5:	jne    0x1003001
 1002ff7:	mov    ebx,0x89c5501e
 1002ffc:	jmp    0x10031a5
 1003001:	xor    r9d,r9d
 1003004:	xor    r8d,r8d
 1003007:	xor    ecx,ecx
 1003009:	lea    edx,[r9+0x1]
 100300d:	call   QWORD PTR [rip+0xffffffffffffe09d]        # 0x10010b0
 1003013:	test   eax,eax
 1003015:	jne    0x1003054
 1003017:	call   QWORD PTR [rip+0xffffffffffffe07b]        # 0x1001098
 100301d:	mov    ebx,eax
 100301f:	test   eax,eax
 1003021:	jle    0x100302c
 1003023:	movzx  ebx,ax
 1003026:	or     ebx,0x80070000
 100302c:	call   QWORD PTR [rip+0xffffffffffffe1de]        # 0x1001210
 1003032:	lea    r8,[rip+0xffffffffffffe877]        # 0x10018b0
 1003039:	mov    r9d,ebx
 100303c:	lea    rcx,[rax+0x60]
 1003040:	mov    edx,0x89c5501d
 1003045:	call   0x10020b0
 100304a:	mov    ebx,0x89c5501d
 100304f:	jmp    0x10031a5
 1003054:	mov    rax,QWORD PTR [rip+0x36e5]        # 0x1006740
 100305b:	mov    QWORD PTR [rsp+0x1930],r12
 1003063:	xor    r12d,r12d
 1003066:	mov    DWORD PTR [rsp+0x40],r12d
 100306b:	test   rax,rax
 100306e:	jne    0x1003090
 1003070:	lea    rdx,[rip+0x36c9]        # 0x1006740
 1003077:	lea    rcx,[rip+0xffffffffffffe382]        # 0x1001400
 100307e:	call   0x1001c40
 1003083:	mov    ebx,eax
 1003085:	test   eax,eax
 1003087:	js     0x100309b
 1003089:	mov    rax,QWORD PTR [rip+0x36b0]        # 0x1006740
 1003090:	lea    rdx,[rsp+0x40]
 1003095:	xor    ecx,ecx
 1003097:	call   rax
 1003099:	mov    ebx,eax
 100309b:	test   ebx,ebx
 100309d:	jns    0x10030d1
 100309f:	mov    eax,ebx
 10030a1:	and    eax,0x1fff0000
 10030a6:	cmp    eax,0x70000
 10030ab:	jne    0x10030d1
 10030ad:	movzx  ebx,bx
 10030b0:	call   QWORD PTR [rip+0xffffffffffffe15a]        # 0x1001210
 10030b6:	mov    r8d,ebx
 10030b9:	lea    rcx,[rax+0x60]
 10030bd:	mov    edx,0x89c55000
 10030c2:	call   0x10020b0
 10030c7:	mov    ebx,0x89c55000
 10030cc:	jmp    0x100319d
 10030d1:	lea    rdx,[rip+0xffffffffffffe1f8]        # 0x10012d0
 10030d8:	xor    ecx,ecx
 10030da:	mov    QWORD PTR [rsp+0x1928],r14
 10030e2:	mov    QWORD PTR [rsp+0x1920],r15
 10030ea:	call   QWORD PTR [rip+0xffffffffffffe100]        # 0x10011f0
 10030f0:	cmp    esi,0x2
 10030f3:	jl     0x1003162
 10030f5:	mov    rcx,QWORD PTR [rdi+0x8]
 10030f9:	mov    edx,0x3f
 10030fe:	call   0x1002f30
 1003103:	test   eax,eax
 1003105:	jne    0x1003162
 1003107:	mov    r14,QWORD PTR [rdi+0x8]
 100310b:	test   r14,r14
 100310e:	je     0x100333c
 1003114:	lea    rdx,[rip+0xffffffffffffe7c5]        # 0x10018e0
 100311b:	mov    rcx,r14
 100311e:	call   QWORD PTR [rip+0xffffffffffffe114]        # 0x1001238
 1003124:	test   eax,eax
 1003126:	je     0x1003140
 1003128:	lea    rdx,[rip+0xffffffffffffe7a9]        # 0x10018d8
 100312f:	mov    rcx,r14
 1003132:	call   QWORD PTR [rip+0xffffffffffffe100]        # 0x1001238
 1003138:	test   eax,eax
 100313a:	jne    0x100333c
 1003140:	cmp    esi,0x3
 1003143:	jl     0x1003162
 1003145:	cmp    esi,0x5
 1003148:	jne    0x10031e2
 100314e:	mov    rcx,QWORD PTR [rdi+0x20]
 1003152:	lea    edx,[rsi+0x6e]
 1003155:	call   0x1002f30
 100315a:	test   eax,eax
 100315c:	jne    0x10031e8
 1003162:	call   QWORD PTR [rip+0xffffffffffffe0a8]        # 0x1001210
 1003168:	xor    r9d,r9d
 100316b:	mov    edx,0x9c55013
 1003170:	lea    rcx,[rax+0x30]
 1003174:	lea    r8d,[r9+0xb]
 1003178:	mov    DWORD PTR [rsp+0x28],0x3c
 1003180:	mov    DWORD PTR [rsp+0x20],0x834
 1003188:	call   0x10020b0
 100318d:	mov    r14,QWORD PTR [rsp+0x1928]
 1003195:	mov    r15,QWORD PTR [rsp+0x1920]
 100319d:	mov    r12,QWORD PTR [rsp+0x1930]
 10031a5:	mov    rcx,QWORD PTR [rip+0x3534]        # 0x10066e0
 10031ac:	mov    rdi,QWORD PTR [rsp+0x1960]
 10031b4:	mov    rsi,QWORD PTR [rsp+0x1950]
 10031bc:	test   rcx,rcx
 10031bf:	je     0x10031c7
 10031c1:	call   QWORD PTR [rip+0xffffffffffffde91]        # 0x1001058
 10031c7:	mov    eax,ebx
 10031c9:	mov    rcx,QWORD PTR [rbp+0x1810]
 10031d0:	xor    rcx,rsp
 10031d3:	call   0x10041d0
 10031d8:	add    rsp,0x1938
 10031df:	pop    rbx
 10031e0:	pop    rbp
 10031e1:	ret    
 10031e2:	jg     0x1003162
 10031e8:	lea    r14,[rip+0xffffffffffffe701]        # 0x10018f0
 10031ef:	cmp    esi,0x4
 10031f2:	jl     0x100320a
 10031f4:	mov    rcx,QWORD PTR [rdi+0x18]
 10031f8:	mov    edx,0x73
 10031fd:	call   0x1002f30
 1003202:	test   eax,eax
 1003204:	jne    0x100320a
 1003206:	mov    r14,QWORD PTR [rdi+0x18]
 100320a:	mov    rax,QWORD PTR [rip+0x34c7]        # 0x10066d8
 1003211:	mov    rbx,QWORD PTR [rdi+0x10]
 1003215:	test   rax,rax
 1003218:	jne    0x100323c
 100321a:	lea    rdx,[rip+0x34b7]        # 0x10066d8
 1003221:	lea    rcx,[rip+0xffffffffffffe160]        # 0x1001388
 1003228:	call   0x1001c40
 100322d:	test   eax,eax
 100322f:	js     0x1003321
 1003235:	mov    rax,QWORD PTR [rip+0x349c]        # 0x10066d8
 100323c:	xor    r8d,r8d
 100323f:	mov    rdx,rbx
 1003242:	mov    rcx,r14
 1003245:	call   rax
 1003247:	test   eax,eax
 1003249:	js     0x1003321
 100324f:	mov    rax,QWORD PTR [rip+0x34d2]        # 0x1006728
 1003256:	mov    rbx,QWORD PTR [rdi+0x10]
 100325a:	test   rax,rax
 100325d:	jne    0x100327d
 100325f:	lea    rdx,[rip+0x34c2]        # 0x1006728
 1003266:	lea    rcx,[rip+0xffffffffffffe1ab]        # 0x1001418
 100326d:	call   0x1001c40
 1003272:	test   eax,eax
 1003274:	js     0x10032a2
 1003276:	mov    rax,QWORD PTR [rip+0x34ab]        # 0x1006728
 100327d:	lea    rdx,[rbp-0x30]
 1003281:	mov    r8d,0x5b4
 1003287:	mov    rcx,rbx
 100328a:	call   rax
 100328c:	test   eax,eax
 100328e:	js     0x10032a2
 1003290:	cmp    DWORD PTR [rbp+0xd8],r12d
 1003297:	lea    rax,[rbp-0x2c]
 100329b:	cmove  rax,rbx
 100329f:	mov    rbx,rax
 10032a2:	call   QWORD PTR [rip+0xffffffffffffdf68]        # 0x1001210
 10032a8:	mov    r9,r14
 10032ab:	mov    r8,rbx
 10032ae:	lea    rcx,[rax+0x30]
 10032b2:	mov    edx,0x9c55001
 10032b7:	call   0x10020b0
 10032bc:	cmp    esi,0x4
 10032bf:	jl     0x10032d3
 10032c1:	mov    rcx,QWORD PTR [rdi+0x18]
 10032c5:	mov    edx,0x73
 10032ca:	call   0x1002f30
 10032cf:	test   eax,eax
 10032d1:	jne    0x10032f2
 10032d3:	cmp    esi,0x5
 10032d6:	jl     0x10036f6
 10032dc:	mov    rcx,QWORD PTR [rdi+0x20]
 10032e0:	mov    edx,0x73
 10032e5:	call   0x1002f30
 10032ea:	test   eax,eax
 10032ec:	je     0x10036f6
 10032f2:	mov    rcx,rbx
 10032f5:	call   0x1001fc0
 10032fa:	test   eax,eax
 10032fc:	js     0x100339b
 1003302:	call   QWORD PTR [rip+0xffffffffffffdf08]        # 0x1001210
 1003308:	mov    edx,0x9c55014
 100330d:	mov    r8,rbx
 1003310:	lea    rcx,[rax+0x30]
 1003314:	call   0x10020b0
 1003319:	mov    ebx,r12d
 100331c:	jmp    0x100318d
 1003321:	mov    r9,QWORD PTR [rdi+0x10]
 1003325:	mov    r8,r14
 1003328:	mov    edx,0x9c55015
 100332d:	mov    ecx,eax
 100332f:	call   0x10020e0
 1003334:	mov    ebx,r12d
 1003337:	jmp    0x100318d
 100333c:	mov    r14,QWORD PTR [rdi+0x8]
 1003340:	test   r14,r14
 1003343:	je     0x10033b2
 1003345:	lea    rdx,[rip+0xffffffffffffe5b4]        # 0x1001900
 100334c:	mov    rcx,r14
 100334f:	call   QWORD PTR [rip+0xffffffffffffdee3]        # 0x1001238
 1003355:	test   eax,eax
 1003357:	je     0x100336d
 1003359:	lea    rdx,[rip+0xffffffffffffe59c]        # 0x10018fc
 1003360:	mov    rcx,r14
 1003363:	call   QWORD PTR [rip+0xffffffffffffdecf]        # 0x1001238
 1003369:	test   eax,eax
 100336b:	jne    0x10033b2
 100336d:	mov    rdi,QWORD PTR [rdi+0x10]
 1003371:	cmp    esi,0x3
 1003374:	jne    0x1003162
 100337a:	lea    rdx,[rbp+0x8c0]
 1003381:	mov    rcx,rdi
 1003384:	call   0x1002dc0
 1003389:	lea    rbx,[rbp+0x8c0]
 1003390:	test   eax,eax
 1003392:	cmovs  rbx,rdi
 1003396:	jmp    0x10032f2
 100339b:	mov    r8,rbx
 100339e:	mov    edx,0x9c55017
 10033a3:	mov    ecx,eax
 10033a5:	call   0x10020e0
 10033aa:	mov    ebx,r12d
 10033ad:	jmp    0x100318d
 10033b2:	mov    r14,QWORD PTR [rdi+0x8]
 10033b6:	test   r14,r14
 10033b9:	je     0x10034d5
 10033bf:	lea    rdx,[rip+0xffffffffffffe54a]        # 0x1001910
 10033c6:	mov    rcx,r14
 10033c9:	call   QWORD PTR [rip+0xffffffffffffde69]        # 0x1001238
 10033cf:	test   eax,eax
 10033d1:	je     0x10033eb
 10033d3:	lea    rdx,[rip+0xffffffffffffe532]        # 0x100190c
 10033da:	mov    rcx,r14
 10033dd:	call   QWORD PTR [rip+0xffffffffffffde55]        # 0x1001238
 10033e3:	test   eax,eax
 10033e5:	jne    0x10034d5
 10033eb:	mov    r14,QWORD PTR [rdi+0x10]
 10033ef:	lea    eax,[rsi-0x3]
 10033f2:	mov    r15d,r12d
 10033f5:	cmp    eax,0x1
 10033f8:	ja     0x1003162
 10033fe:	cmp    esi,0x4
 1003401:	jl     0x100341b
 1003403:	mov    rcx,QWORD PTR [rdi+0x18]
 1003407:	mov    edx,0x6b
 100340c:	call   0x1002f30
 1003411:	test   eax,eax
 1003413:	je     0x1003492
 1003415:	mov    r15d,0x1
 100341b:	lea    rdx,[rbp+0x590]
 1003422:	mov    rcx,r14
 1003425:	call   0x1002dc0
 100342a:	lea    rbx,[rbp+0x590]
 1003431:	test   eax,eax
 1003433:	mov    rax,QWORD PTR [rip+0x32de]        # 0x1006718
 100343a:	cmovs  rbx,r14
 100343e:	test   rax,rax
 1003441:	jne    0x1003461
 1003443:	lea    rdx,[rip+0x32ce]        # 0x1006718
 100344a:	lea    rcx,[rip+0xffffffffffffdf67]        # 0x10013b8
 1003451:	call   0x1001c40
 1003456:	test   eax,eax
 1003458:	js     0x10034be
 100345a:	mov    rax,QWORD PTR [rip+0x32b7]        # 0x1006718
 1003461:	mov    r8d,0x12c
 1003467:	mov    edx,r15d
 100346a:	mov    rcx,rbx
 100346d:	call   rax
 100346f:	test   eax,eax
 1003471:	js     0x10034be
 1003473:	call   QWORD PTR [rip+0xffffffffffffdd97]        # 0x1001210
 1003479:	mov    edx,0x9c55003
 100347e:	mov    r8,rbx
 1003481:	lea    rcx,[rax+0x30]
 1003485:	call   0x10020b0
 100348a:	mov    ebx,r12d
 100348d:	jmp    0x100318d
 1003492:	mov    rcx,QWORD PTR [rdi+0x18]
 1003496:	mov    edx,0x69
 100349b:	call   0x1002f30
 10034a0:	test   eax,eax
 10034a2:	je     0x10034af
 10034a4:	mov    r15d,0x2
 10034aa:	jmp    0x100341b
 10034af:	call   QWORD PTR [rip+0xffffffffffffdd5b]        # 0x1001210
 10034b5:	mov    r8,QWORD PTR [rdi+0x18]
 10034b9:	jmp    0x10038d0
 10034be:	mov    r8,rbx
 10034c1:	mov    edx,0x9c55018
 10034c6:	mov    ecx,eax
 10034c8:	call   0x10020e0
 10034cd:	mov    ebx,r12d
 10034d0:	jmp    0x100318d
 10034d5:	mov    r14,QWORD PTR [rdi+0x8]
 10034d9:	test   r14,r14
 10034dc:	je     0x10035a2
 10034e2:	lea    rdx,[rip+0xffffffffffffe437]        # 0x1001920
 10034e9:	mov    rcx,r14
 10034ec:	call   QWORD PTR [rip+0xffffffffffffdd46]        # 0x1001238
 10034f2:	test   eax,eax
 10034f4:	je     0x100350e
 10034f6:	lea    rdx,[rip+0xffffffffffffe41f]        # 0x100191c
 10034fd:	mov    rcx,r14
 1003500:	call   QWORD PTR [rip+0xffffffffffffdd32]        # 0x1001238
 1003506:	test   eax,eax
 1003508:	jne    0x10035a2
 100350e:	mov    rdi,QWORD PTR [rdi+0x10]
 1003512:	cmp    esi,0x3
 1003515:	jne    0x1003162
 100351b:	lea    rdx,[rbp+0x7b0]
 1003522:	mov    rcx,rdi
 1003525:	call   0x1002dc0
 100352a:	lea    rbx,[rbp+0x7b0]
 1003531:	test   eax,eax
 1003533:	mov    rax,QWORD PTR [rip+0x3196]        # 0x10066d0
 100353a:	cmovs  rbx,rdi
 100353e:	test   rax,rax
 1003541:	jne    0x1003561
 1003543:	lea    rdx,[rip+0x3186]        # 0x10066d0
 100354a:	lea    rcx,[rip+0xffffffffffffde7f]        # 0x10013d0
 1003551:	call   0x1001c40
 1003556:	test   eax,eax
 1003558:	js     0x100358b
 100355a:	mov    rax,QWORD PTR [rip+0x316f]        # 0x10066d0
 1003561:	xor    edx,edx
 1003563:	mov    rcx,rbx
 1003566:	call   rax
 1003568:	test   eax,eax
 100356a:	js     0x100358b
 100356c:	call   QWORD PTR [rip+0xffffffffffffdc9e]        # 0x1001210
 1003572:	mov    edx,0x9c55004
 1003577:	mov    r8,rbx
 100357a:	lea    rcx,[rax+0x30]
 100357e:	call   0x10020b0
 1003583:	mov    ebx,r12d
 1003586:	jmp    0x100318d
 100358b:	mov    r8,rbx
 100358e:	mov    edx,0x9c55016
 1003593:	mov    ecx,eax
 1003595:	call   0x10020e0
 100359a:	mov    ebx,r12d
 100359d:	jmp    0x100318d
 10035a2:	cmp    esi,0x2
 10035a5:	jne    0x100375f
 10035ab:	mov    r14,QWORD PTR [rdi+0x8]
 10035af:	test   r14,r14
 10035b2:	je     0x100375f
 10035b8:	lea    rdx,[rip+0xffffffffffffe379]        # 0x1001938
 10035bf:	mov    rcx,r14
 10035c2:	call   QWORD PTR [rip+0xffffffffffffdc70]        # 0x1001238
 10035c8:	test   eax,eax
 10035ca:	je     0x10035e4
 10035cc:	lea    rdx,[rip+0xffffffffffffe35d]        # 0x1001930
 10035d3:	mov    rcx,r14
 10035d6:	call   QWORD PTR [rip+0xffffffffffffdc5c]        # 0x1001238
 10035dc:	test   eax,eax
 10035de:	jne    0x100375f
 10035e4:	mov    rax,QWORD PTR [rip+0x3155]        # 0x1006740
 10035eb:	mov    DWORD PTR [rsp+0x44],r12d
 10035f0:	test   rax,rax
 10035f3:	jne    0x1003613
 10035f5:	lea    rdx,[rip+0x3144]        # 0x1006740
 10035fc:	lea    rcx,[rip+0xffffffffffffddfd]        # 0x1001400
 1003603:	call   0x1001c40
 1003608:	test   eax,eax
 100360a:	js     0x1003620
 100360c:	mov    rax,QWORD PTR [rip+0x312d]        # 0x1006740
 1003613:	lea    rdx,[rsp+0x44]
 1003618:	xor    ecx,ecx
 100361a:	call   rax
 100361c:	test   eax,eax
 100361e:	jns    0x100363b
 1003620:	cmp    eax,0x89c50114
 1003625:	je     0x100363b
 1003627:	mov    edx,0x9c55019
 100362c:	mov    ecx,eax
 100362e:	call   0x10020e0
 1003633:	mov    ebx,r12d
 1003636:	jmp    0x100318d
 100363b:	mov    eax,DWORD PTR [rsp+0x44]
 100363f:	test   eax,eax
 1003641:	jne    0x100365f
 1003643:	call   QWORD PTR [rip+0xffffffffffffdbc7]        # 0x1001210
 1003649:	mov    edx,0x9c5501c
 100364e:	lea    rcx,[rax+0x30]
 1003652:	call   0x10020b0
 1003657:	mov    ebx,r12d
 100365a:	jmp    0x100318d
 100365f:	mov    rcx,rax
 1003662:	imul   rcx,rcx,0x102
 1003669:	call   QWORD PTR [rip+0xffffffffffffdba9]        # 0x1001218
 100366f:	mov    rdi,rax
 1003672:	test   rax,rax
 1003675:	jne    0x1003695
 1003677:	call   QWORD PTR [rip+0xffffffffffffdb93]        # 0x1001210
 100367d:	mov    edx,0x89c55005
 1003682:	lea    rcx,[rax+0x60]
 1003686:	call   0x10020b0
 100368b:	mov    ebx,0x89c55005
 1003690:	jmp    0x100318d
 1003695:	mov    rax,QWORD PTR [rip+0x30a4]        # 0x1006740
 100369c:	test   rax,rax
 100369f:	jne    0x10036c3
 10036a1:	lea    rdx,[rip+0x3098]        # 0x1006740
 10036a8:	lea    rcx,[rip+0xffffffffffffdd51]        # 0x1001400
 10036af:	call   0x1001c40
 10036b4:	test   eax,eax
 10036b6:	js     0x1003742
 10036bc:	mov    rax,QWORD PTR [rip+0x307d]        # 0x1006740
 10036c3:	lea    rdx,[rsp+0x44]
 10036c8:	mov    rcx,rdi
 10036cb:	call   rax
 10036cd:	test   eax,eax
 10036cf:	js     0x1003742
 10036d1:	mov    eax,DWORD PTR [rsp+0x44]
 10036d5:	test   eax,eax
 10036d7:	jne    0x10036fe
 10036d9:	call   QWORD PTR [rip+0xffffffffffffdb31]        # 0x1001210
 10036df:	mov    edx,0x9c5501c
 10036e4:	lea    rcx,[rax+0x30]
 10036e8:	call   0x10020b0
 10036ed:	mov    rcx,rdi
 10036f0:	call   QWORD PTR [rip+0xffffffffffffdb2a]        # 0x1001220
 10036f6:	mov    ebx,r12d
 10036f9:	jmp    0x100318d
 10036fe:	mov    ebx,r12d
 1003701:	test   eax,eax
 1003703:	je     0x10036ed
 1003705:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1003710:	mov    edx,ebx
 1003712:	lea    rcx,[rip+0xffffffffffffe22f]        # 0x1001948
 1003719:	imul   rdx,rdx,0x102
 1003720:	add    rdx,rdi
 1003723:	call   QWORD PTR [rip+0xffffffffffffdadf]        # 0x1001208
 1003729:	inc    ebx
 100372b:	cmp    ebx,DWORD PTR [rsp+0x44]
 100372f:	jb     0x1003710
 1003731:	mov    rcx,rdi
 1003734:	call   QWORD PTR [rip+0xffffffffffffdae6]        # 0x1001220
 100373a:	mov    ebx,r12d
 100373d:	jmp    0x100318d
 1003742:	mov    edx,0x9c55019
 1003747:	mov    ecx,eax
 1003749:	call   0x10020e0
 100374e:	mov    rcx,rdi
 1003751:	call   QWORD PTR [rip+0xffffffffffffdac9]        # 0x1001220
 1003757:	mov    ebx,r12d
 100375a:	jmp    0x100318d
 100375f:	mov    r14,QWORD PTR [rdi+0x8]
 1003763:	test   r14,r14
 1003766:	je     0x10037aa
 1003768:	lea    rdx,[rip+0xffffffffffffe1c9]        # 0x1001938
 100376f:	mov    rcx,r14
 1003772:	call   QWORD PTR [rip+0xffffffffffffdac0]        # 0x1001238
 1003778:	test   eax,eax
 100377a:	je     0x1003790
 100377c:	lea    rdx,[rip+0xffffffffffffe1ad]        # 0x1001930
 1003783:	mov    rcx,r14
 1003786:	call   QWORD PTR [rip+0xffffffffffffdaac]        # 0x1001238
 100378c:	test   eax,eax
 100378e:	jne    0x10037aa
 1003790:	cmp    esi,0x3
 1003793:	jne    0x1003162
 1003799:	mov    rcx,QWORD PTR [rdi+0x10]
 100379d:	call   0x10023c0
 10037a2:	mov    ebx,r12d
 10037a5:	jmp    0x100318d
 10037aa:	mov    r14,QWORD PTR [rdi+0x8]
 10037ae:	test   r14,r14
 10037b1:	je     0x10038ec
 10037b7:	lea    rdx,[rip+0xffffffffffffe19a]        # 0x1001958
 10037be:	mov    rcx,r14
 10037c1:	call   QWORD PTR [rip+0xffffffffffffda71]        # 0x1001238
 10037c7:	test   eax,eax
 10037c9:	je     0x10037e3
 10037cb:	lea    rdx,[rip+0xffffffffffffe17e]        # 0x1001950
 10037d2:	mov    rcx,r14
 10037d5:	call   QWORD PTR [rip+0xffffffffffffda5d]        # 0x1001238
 10037db:	test   eax,eax
 10037dd:	jne    0x10038ec
 10037e3:	cmp    esi,0x3
 10037e6:	jne    0x1003162
 10037ec:	mov    rcx,QWORD PTR [rdi+0x10]
 10037f0:	lea    rdx,[rip+0xffffffffffffe16d]        # 0x1001964
 10037f7:	call   QWORD PTR [rip+0xffffffffffffda3b]        # 0x1001238
 10037fd:	test   eax,eax
 10037ff:	jne    0x1003851
 1003801:	mov    rax,QWORD PTR [rip+0x2f28]        # 0x1006730
 1003808:	test   rax,rax
 100380b:	jne    0x100382f
 100380d:	lea    rdx,[rip+0x2f1c]        # 0x1006730
 1003814:	lea    rcx,[rip+0xffffffffffffdc15]        # 0x1001430
 100381b:	call   0x1001c40
 1003820:	test   eax,eax
 1003822:	js     0x10038b2
 1003828:	mov    rax,QWORD PTR [rip+0x2f01]        # 0x1006730
 100382f:	call   rax
 1003831:	test   eax,eax
 1003833:	js     0x10038b2
 1003835:	call   QWORD PTR [rip+0xffffffffffffd9d5]        # 0x1001210
 100383b:	mov    edx,0x9c55006
 1003840:	lea    rcx,[rax+0x30]
 1003844:	call   0x10020b0
 1003849:	mov    ebx,r12d
 100384c:	jmp    0x100318d
 1003851:	mov    rcx,QWORD PTR [rdi+0x10]
 1003855:	lea    rdx,[rip+0xffffffffffffe114]        # 0x1001970
 100385c:	call   QWORD PTR [rip+0xffffffffffffd9d6]        # 0x1001238
 1003862:	test   eax,eax
 1003864:	jne    0x10038c6
 1003866:	mov    rax,QWORD PTR [rip+0x2eb3]        # 0x1006720
 100386d:	test   rax,rax
 1003870:	jne    0x1003890
 1003872:	lea    rdx,[rip+0x2ea7]        # 0x1006720
 1003879:	lea    rcx,[rip+0xffffffffffffdbc8]        # 0x1001448
 1003880:	call   0x1001c40
 1003885:	test   eax,eax
 1003887:	js     0x10038b2
 1003889:	mov    rax,QWORD PTR [rip+0x2e90]        # 0x1006720
 1003890:	call   rax
 1003892:	test   eax,eax
 1003894:	js     0x10038b2
 1003896:	call   QWORD PTR [rip+0xffffffffffffd974]        # 0x1001210
 100389c:	mov    edx,0x9c55007
 10038a1:	lea    rcx,[rax+0x30]
 10038a5:	call   0x10020b0
 10038aa:	mov    ebx,r12d
 10038ad:	jmp    0x100318d
 10038b2:	mov    edx,0x9c5501b
 10038b7:	mov    ecx,eax
 10038b9:	call   0x10020e0
 10038be:	mov    ebx,r12d
 10038c1:	jmp    0x100318d
 10038c6:	call   QWORD PTR [rip+0xffffffffffffd944]        # 0x1001210
 10038cc:	mov    r8,QWORD PTR [rdi+0x10]
 10038d0:	mov    r9,QWORD PTR [rdi+0x8]
 10038d4:	lea    rcx,[rax+0x60]
 10038d8:	mov    edx,0x89c55008
 10038dd:	call   0x10020b0
 10038e2:	mov    ebx,0x89c55008
 10038e7:	jmp    0x100318d
 10038ec:	mov    r14,QWORD PTR [rdi+0x8]
 10038f0:	test   r14,r14
 10038f3:	je     0x1003a84
 10038f9:	lea    rdx,[rip+0xffffffffffffe080]        # 0x1001980
 1003900:	mov    rcx,r14
 1003903:	call   QWORD PTR [rip+0xffffffffffffd92f]        # 0x1001238
 1003909:	test   eax,eax
 100390b:	je     0x1003925
 100390d:	lea    rdx,[rip+0xffffffffffffe064]        # 0x1001978
 1003914:	mov    rcx,r14
 1003917:	call   QWORD PTR [rip+0xffffffffffffd91b]        # 0x1001238
 100391d:	test   eax,eax
 100391f:	jne    0x1003a84
 1003925:	lea    rcx,[rbp+0x9d2]
 100392c:	xor    edx,edx
 100392e:	mov    r8d,0x220
 1003934:	mov    r15,r12
 1003937:	mov    QWORD PTR [rsp+0x48],r12
 100393c:	mov    r14,r12
 100393f:	mov    WORD PTR [rbp+0x9d0],r12w
 1003947:	call   0x1004850
 100394c:	cmp    esi,0x4
 100394f:	jne    0x100395b
 1003951:	mov    rbx,QWORD PTR [rdi+0x10]
 1003955:	mov    rdi,QWORD PTR [rdi+0x18]
 1003959:	jmp    0x10039cc
 100395b:	cmp    esi,0x5
 100395e:	jne    0x1003162
 1003964:	mov    rbx,QWORD PTR [rdi+0x10]
 1003968:	lea    rdx,[rsp+0x48]
 100396d:	mov    rcx,rbx
 1003970:	call   QWORD PTR [rip+0xffffffffffffd692]        # 0x1001008
 1003976:	test   eax,eax
 1003978:	jne    0x100399f
 100397a:	lea    r8,[rbp+0x1010]
 1003981:	lea    rdx,[rsp+0x48]
 1003986:	mov    rcx,rbx
 1003989:	call   0x1002b90
 100398e:	mov    ebx,eax
 1003990:	test   eax,eax
 1003992:	js     0x100318d
 1003998:	lea    rbx,[rbp+0x1010]
 100399f:	lea    rdx,[rbp+0x9d0]
 10039a6:	mov    rcx,rbx
 10039a9:	call   0x1002200
 10039ae:	mov    ebx,eax
 10039b0:	test   eax,eax
 10039b2:	js     0x100318d
 10039b8:	mov    rbx,QWORD PTR [rdi+0x18]
 10039bc:	mov    r15,QWORD PTR [rsp+0x48]
 10039c1:	mov    rdi,QWORD PTR [rdi+0x20]
 10039c5:	lea    r14,[rbp+0x9d0]
 10039cc:	mov    rax,QWORD PTR [rip+0x2d3d]        # 0x1006710
 10039d3:	test   rax,rax
 10039d6:	jne    0x10039f6
 10039d8:	lea    rdx,[rip+0x2d31]        # 0x1006710
 10039df:	lea    rcx,[rip+0xffffffffffffda7a]        # 0x1001460
 10039e6:	call   0x1001c40
 10039eb:	test   eax,eax
 10039ed:	js     0x1003a3d
 10039ef:	mov    rax,QWORD PTR [rip+0x2d1a]        # 0x1006710
 10039f6:	xor    r9d,r9d
 10039f9:	mov    r8,rdi
 10039fc:	mov    rdx,rbx
 10039ff:	mov    rcx,r15
 1003a02:	call   rax
 1003a04:	test   eax,eax
 1003a06:	js     0x1003a3d
 1003a08:	call   QWORD PTR [rip+0xffffffffffffd802]        # 0x1001210
 1003a0e:	mov    r8,rbx
 1003a11:	lea    rcx,[rax+0x30]
 1003a15:	test   r14,r14
 1003a18:	jne    0x1003a29
 1003a1a:	mov    r9,rdi
 1003a1d:	mov    edx,0x9c5501f
 1003a22:	call   0x10020b0
 1003a27:	jmp    0x1003a68
 1003a29:	mov    r9,r14
 1003a2c:	mov    edx,0x9c55020
 1003a31:	mov    QWORD PTR [rsp+0x20],rdi
 1003a36:	call   0x10020b0
 1003a3b:	jmp    0x1003a68
 1003a3d:	mov    r8,rbx
 1003a40:	mov    ecx,eax
 1003a42:	test   r14,r14
 1003a45:	jne    0x1003a56
 1003a47:	mov    r9,rdi
 1003a4a:	mov    edx,0x9c55021
 1003a4f:	call   0x10020e0
 1003a54:	jmp    0x1003a68
 1003a56:	mov    r9,r14
 1003a59:	mov    edx,0x9c55022
 1003a5e:	mov    QWORD PTR [rsp+0x20],rdi
 1003a63:	call   0x10020e0
 1003a68:	mov    rcx,QWORD PTR [rsp+0x48]
 1003a6d:	test   rcx,rcx
 1003a70:	je     0x10036f6
 1003a76:	call   QWORD PTR [rip+0xffffffffffffd644]        # 0x10010c0
 1003a7c:	mov    ebx,r12d
 1003a7f:	jmp    0x100318d
 1003a84:	mov    r14,QWORD PTR [rdi+0x8]
 1003a88:	test   r14,r14
 1003a8b:	je     0x1003b51
 1003a91:	lea    rdx,[rip+0xffffffffffffdef8]        # 0x1001990
 1003a98:	mov    rcx,r14
 1003a9b:	call   QWORD PTR [rip+0xffffffffffffd797]        # 0x1001238
 1003aa1:	test   eax,eax
 1003aa3:	je     0x1003abd
 1003aa5:	lea    rdx,[rip+0xffffffffffffdee0]        # 0x100198c
 1003aac:	mov    rcx,r14
 1003aaf:	call   QWORD PTR [rip+0xffffffffffffd783]        # 0x1001238
 1003ab5:	test   eax,eax
 1003ab7:	jne    0x1003b51
 1003abd:	mov    rdi,QWORD PTR [rdi+0x10]
 1003ac1:	cmp    esi,0x3
 1003ac4:	jne    0x1003162
 1003aca:	lea    rdx,[rbp+0x6a0]
 1003ad1:	mov    rcx,rdi
 1003ad4:	call   0x1002dc0
 1003ad9:	lea    rbx,[rbp+0x6a0]
 1003ae0:	test   eax,eax
 1003ae2:	mov    rax,QWORD PTR [rip+0x2bff]        # 0x10066e8
 1003ae9:	cmovs  rbx,rdi
 1003aed:	test   rax,rax
 1003af0:	jne    0x1003b10
 1003af2:	lea    rdx,[rip+0x2bef]        # 0x10066e8
 1003af9:	lea    rcx,[rip+0xffffffffffffd990]        # 0x1001490
 1003b00:	call   0x1001c40
 1003b05:	test   eax,eax
 1003b07:	js     0x1003b3a
 1003b09:	mov    rax,QWORD PTR [rip+0x2bd8]        # 0x10066e8
 1003b10:	xor    edx,edx
 1003b12:	mov    rcx,rbx
 1003b15:	call   rax
 1003b17:	test   eax,eax
 1003b19:	js     0x1003b3a
 1003b1b:	call   QWORD PTR [rip+0xffffffffffffd6ef]        # 0x1001210
 1003b21:	mov    edx,0x9c55029
 1003b26:	mov    r8,rbx
 1003b29:	lea    rcx,[rax+0x30]
 1003b2d:	call   0x10020b0
 1003b32:	mov    ebx,r12d
 1003b35:	jmp    0x100318d
 1003b3a:	mov    r8,rbx
 1003b3d:	mov    edx,0x9c5502a
 1003b42:	mov    ecx,eax
 1003b44:	call   0x10020e0
 1003b49:	mov    ebx,r12d
 1003b4c:	jmp    0x100318d
 1003b51:	mov    r14,QWORD PTR [rdi+0x8]
 1003b55:	test   r14,r14
 1003b58:	je     0x1003eb8
 1003b5e:	lea    rdx,[rip+0xffffffffffffde43]        # 0x10019a8
 1003b65:	mov    rcx,r14
 1003b68:	call   QWORD PTR [rip+0xffffffffffffd6ca]        # 0x1001238
 1003b6e:	test   eax,eax
 1003b70:	je     0x1003b8a
 1003b72:	lea    rdx,[rip+0xffffffffffffde27]        # 0x10019a0
 1003b79:	mov    rcx,r14
 1003b7c:	call   QWORD PTR [rip+0xffffffffffffd6b6]        # 0x1001238
 1003b82:	test   eax,eax
 1003b84:	jne    0x1003eb8
 1003b8a:	mov    DWORD PTR [rsp+0x40],r12d
 1003b8f:	cmp    esi,0x2
 1003b92:	jg     0x1003162
 1003b98:	mov    rax,QWORD PTR [rip+0x2b69]        # 0x1006708
 1003b9f:	test   rax,rax
 1003ba2:	jne    0x1003bc4
 1003ba4:	lea    rdx,[rip+0x2b5d]        # 0x1006708
 1003bab:	lea    rcx,[rip+0xffffffffffffd8c6]        # 0x1001478
 1003bb2:	call   0x1001c40
 1003bb7:	mov    ebx,eax
 1003bb9:	test   eax,eax
 1003bbb:	js     0x1003bcf
 1003bbd:	mov    rax,QWORD PTR [rip+0x2b44]        # 0x1006708
 1003bc4:	lea    rdx,[rsp+0x40]
 1003bc9:	xor    ecx,ecx
 1003bcb:	call   rax
 1003bcd:	mov    ebx,eax
 1003bcf:	test   ebx,ebx
 1003bd1:	jns    0x1003bec
 1003bd3:	cmp    ebx,0x89c50114
 1003bd9:	je     0x1003bec
 1003bdb:	mov    edx,0x9c55027
 1003be0:	mov    ecx,ebx
 1003be2:	call   0x10020e0
 1003be7:	jmp    0x100318d
 1003bec:	mov    ecx,DWORD PTR [rsp+0x40]
 1003bf0:	imul   rcx,rcx,0x58
 1003bf4:	call   QWORD PTR [rip+0xffffffffffffd61e]        # 0x1001218
 1003bfa:	mov    rdi,rax
 1003bfd:	test   rax,rax
 1003c00:	jne    0x1003c1b
 1003c02:	call   QWORD PTR [rip+0xffffffffffffd608]        # 0x1001210
 1003c08:	mov    edx,0x89c55005
 1003c0d:	lea    rcx,[rax+0x60]
 1003c11:	call   0x10020b0
 1003c16:	jmp    0x100318d
 1003c1b:	mov    rax,QWORD PTR [rip+0x2ae6]        # 0x1006708
 1003c22:	test   rax,rax
 1003c25:	jne    0x1003c47
 1003c27:	lea    rdx,[rip+0x2ada]        # 0x1006708
 1003c2e:	lea    rcx,[rip+0xffffffffffffd843]        # 0x1001478
 1003c35:	call   0x1001c40
 1003c3a:	mov    ebx,eax
 1003c3c:	test   eax,eax
 1003c3e:	js     0x1003c53
 1003c40:	mov    rax,QWORD PTR [rip+0x2ac1]        # 0x1006708
 1003c47:	lea    rdx,[rsp+0x40]
 1003c4c:	mov    rcx,rdi
 1003c4f:	call   rax
 1003c51:	mov    ebx,eax
 1003c53:	test   ebx,ebx
 1003c55:	jns    0x1003c71
 1003c57:	mov    rcx,rdi
 1003c5a:	call   QWORD PTR [rip+0xffffffffffffd5c0]        # 0x1001220
 1003c60:	mov    edx,0x9c55027
 1003c65:	mov    ecx,ebx
 1003c67:	call   0x10020e0
 1003c6c:	jmp    0x100318d
 1003c71:	mov    esi,r12d
 1003c74:	cmp    DWORD PTR [rsp+0x40],r12d
 1003c79:	jbe    0x10036ed
 1003c7f:	mov    r15d,0x2
 1003c85:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1003c90:	xor    edx,edx
 1003c92:	lea    rcx,[rsp+0x64]
 1003c97:	mov    DWORD PTR [rsp+0x60],r12d
 1003c9c:	lea    r8d,[rdx+0x6c]
 1003ca0:	call   0x1004850
 1003ca5:	mov    r11,QWORD PTR [rip+0x2a8c]        # 0x1006738
 1003cac:	test   r11,r11
 1003caf:	jne    0x1003ccf
 1003cb1:	lea    rdx,[rip+0x2a80]        # 0x1006738
 1003cb8:	lea    rcx,[rip+0xffffffffffffd7e9]        # 0x10014a8
 1003cbf:	call   0x1001c40
 1003cc4:	test   eax,eax
 1003cc6:	js     0x1003cea
 1003cc8:	mov    r11,QWORD PTR [rip+0x2a69]        # 0x1006738
 1003ccf:	mov    ecx,esi
 1003cd1:	lea    rdx,[rsp+0x60]
 1003cd6:	mov    r8d,0x70
 1003cdc:	imul   rcx,rcx,0x58
 1003ce0:	add    rcx,rdi
 1003ce3:	call   r11
 1003ce6:	test   eax,eax
 1003ce8:	jns    0x1003cfb
 1003cea:	mov    edx,0x9c5502b
 1003cef:	mov    ecx,eax
 1003cf1:	call   0x10020e0
 1003cf6:	jmp    0x1003def
 1003cfb:	cmp    DWORD PTR [rbp-0x44],r12d
 1003cff:	jne    0x1003d1f
 1003d01:	call   QWORD PTR [rip+0xffffffffffffd509]        # 0x1001210
 1003d07:	lea    r8,[rsp+0x64]
 1003d0c:	mov    edx,0x9c55028
 1003d11:	lea    rcx,[rax+0x60]
 1003d15:	call   0x10020b0
 1003d1a:	jmp    0x1003def
 1003d1f:	mov    eax,DWORD PTR [rbp-0x3c]
 1003d22:	lea    r9,[rip+0xffffffffffffdd57]        # 0x1001a80
 1003d29:	lea    r8,[rip+0xffffffffffffdc90]        # 0x10019c0
 1003d30:	mov    DWORD PTR [rsp+0x28],eax
 1003d34:	mov    eax,DWORD PTR [rbp-0x40]
 1003d37:	lea    rcx,[rbp+0xe10]
 1003d3e:	mov    edx,0x100
 1003d43:	mov    DWORD PTR [rsp+0x50],0x208
 1003d4b:	mov    DWORD PTR [rsp+0x20],eax
 1003d4f:	call   0x1001bb0
 1003d54:	mov    ebx,eax
 1003d56:	test   eax,eax
 1003d58:	js     0x1003e87
 1003d5e:	lea    rax,[rsp+0x50]
 1003d63:	lea    r8,[rip+0xffffffffffffd5fe]        # 0x1001368
 1003d6a:	lea    rdx,[rbp+0xe10]
 1003d71:	mov    QWORD PTR [rsp+0x30],rax
 1003d76:	lea    rax,[rbp+0xc00]
 1003d7d:	mov    r9d,r15d
 1003d80:	mov    QWORD PTR [rsp+0x28],rax
 1003d85:	mov    rcx,0xffffffff80000002
 1003d8c:	mov    QWORD PTR [rsp+0x20],r12
 1003d91:	call   QWORD PTR [rip+0xffffffffffffd289]        # 0x1001020
 1003d97:	test   eax,eax
 1003d99:	jne    0x1003e78
 1003d9f:	lea    rcx,[rbp+0xc00]
 1003da6:	call   QWORD PTR [rip+0xffffffffffffd2bc]        # 0x1001068
 1003dac:	mov    rbx,rax
 1003daf:	test   rax,rax
 1003db2:	je     0x1003e54
 1003db8:	lea    rdx,[rip+0xffffffffffffdc59]        # 0x1001a18
 1003dbf:	mov    rcx,rax
 1003dc2:	call   QWORD PTR [rip+0xffffffffffffd2d8]        # 0x10010a0
 1003dc8:	test   rax,rax
 1003dcb:	je     0x1003e30
 1003dcd:	lea    r8,[rsp+0x64]
 1003dd2:	lea    rcx,[rip+0xffffffffffffdc77]        # 0x1001a50
 1003dd9:	mov    rdx,rax
 1003ddc:	call   QWORD PTR [rip+0xffffffffffffd426]        # 0x1001208
 1003de2:	mov    rcx,rbx
 1003de5:	call   QWORD PTR [rip+0xffffffffffffd26d]        # 0x1001058
 1003deb:	test   eax,eax
 1003ded:	je     0x1003e0c
 1003def:	inc    esi
 1003df1:	cmp    esi,DWORD PTR [rsp+0x40]
 1003df5:	jb     0x1003c90
 1003dfb:	mov    rcx,rdi
 1003dfe:	call   QWORD PTR [rip+0xffffffffffffd41c]        # 0x1001220
 1003e04:	mov    ebx,r12d
 1003e07:	jmp    0x100318d
 1003e0c:	call   QWORD PTR [rip+0xffffffffffffd286]        # 0x1001098
 1003e12:	mov    ebx,eax
 1003e14:	test   eax,eax
 1003e16:	jle    0x1003e21
 1003e18:	movzx  ebx,ax
 1003e1b:	or     ebx,0x80070000
 1003e21:	call   QWORD PTR [rip+0xffffffffffffd3e9]        # 0x1001210
 1003e27:	lea    r8,[rip+0xffffffffffffdc3a]        # 0x1001a68
 1003e2e:	jmp    0x1003e94
 1003e30:	call   QWORD PTR [rip+0xffffffffffffd262]        # 0x1001098
 1003e36:	mov    ebx,eax
 1003e38:	test   eax,eax
 1003e3a:	jle    0x1003e45
 1003e3c:	movzx  ebx,ax
 1003e3f:	or     ebx,0x80070000
 1003e45:	call   QWORD PTR [rip+0xffffffffffffd3c5]        # 0x1001210
 1003e4b:	lea    r8,[rip+0xffffffffffffdbde]        # 0x1001a30
 1003e52:	jmp    0x1003e94
 1003e54:	call   QWORD PTR [rip+0xffffffffffffd23e]        # 0x1001098
 1003e5a:	mov    ebx,eax
 1003e5c:	test   eax,eax
 1003e5e:	jle    0x1003e69
 1003e60:	movzx  ebx,ax
 1003e63:	or     ebx,0x80070000
 1003e69:	call   QWORD PTR [rip+0xffffffffffffd3a1]        # 0x1001210
 1003e6f:	lea    r8,[rip+0xffffffffffffdb82]        # 0x10019f8
 1003e76:	jmp    0x1003e94
 1003e78:	call   QWORD PTR [rip+0xffffffffffffd392]        # 0x1001210
 1003e7e:	lea    r8,[rip+0xffffffffffffdb53]        # 0x10019d8
 1003e85:	jmp    0x1003e94
 1003e87:	call   QWORD PTR [rip+0xffffffffffffd383]        # 0x1001210
 1003e8d:	lea    r8,[rip+0xffffffffffffd6fc]        # 0x1001590
 1003e94:	lea    rcx,[rax+0x60]
 1003e98:	mov    r9d,ebx
 1003e9b:	mov    edx,0x89c5501d
 1003ea0:	call   0x10020b0
 1003ea5:	mov    rcx,rdi
 1003ea8:	mov    ebx,0x89c5501d
 1003ead:	call   QWORD PTR [rip+0xffffffffffffd36d]        # 0x1001220
 1003eb3:	jmp    0x100318d
 1003eb8:	call   QWORD PTR [rip+0xffffffffffffd352]        # 0x1001210
 1003ebe:	mov    r8,QWORD PTR [rdi+0x8]
 1003ec2:	mov    edx,0x89c55009
 1003ec7:	lea    rcx,[rax+0x60]
 1003ecb:	call   0x10020b0
 1003ed0:	mov    ebx,0x89c55009
 1003ed5:	jmp    0x100318d
 1003eda:	int3   
 1003edb:	int3   
 1003edc:	int3   
 1003edd:	int3   
 1003ede:	int3   
 1003edf:	int3   
 1003ee0:	sub    rsp,0x38
 1003ee4:	lea    rcx,[rip+0x5e9]        # 0x10044d4
 1003eeb:	call   0x1004474
 1003ef0:	mov    r11d,DWORD PTR [rip+0x27cd]        # 0x10066c4
 1003ef7:	mov    r9d,DWORD PTR [rip+0x27c2]        # 0x10066c0
 1003efe:	lea    rax,[rip+0x2237]        # 0x100613c
 1003f05:	lea    r8,[rip+0x221c]        # 0x1006128
 1003f0c:	lea    rdx,[rip+0x221d]        # 0x1006130
 1003f13:	lea    rcx,[rip+0x2206]        # 0x1006120
 1003f1a:	mov    DWORD PTR [rip+0x221b],r11d        # 0x100613c
 1003f21:	mov    QWORD PTR [rsp+0x20],rax
 1003f26:	call   QWORD PTR [rip+0xffffffffffffd314]        # 0x1001240
 1003f2c:	mov    DWORD PTR [rip+0x2206],eax        # 0x1006138
 1003f32:	test   eax,eax
 1003f34:	jns    0x1003f40
 1003f36:	mov    ecx,0x8
 1003f3b:	call   0x10043ae
 1003f40:	add    rsp,0x38
 1003f44:	ret    
 1003f45:	int3   
 1003f46:	int3   
 1003f47:	int3   
 1003f48:	int3   
 1003f49:	int3   
 1003f4a:	int3   
 1003f4b:	int3   
 1003f4c:	mov    QWORD PTR [rsp+0x8],rbx
 1003f51:	push   rdi
 1003f52:	sub    rsp,0x20
 1003f56:	mov    rax,QWORD PTR gs:0x30
 1003f5f:	mov    rbx,QWORD PTR [rax+0x8]
 1003f63:	xor    edi,edi
 1003f65:	xor    eax,eax
 1003f67:	lock cmpxchg QWORD PTR [rip+0x27e0],rbx        # 0x1006750
 1003f70:	je     0x1003f8d
 1003f72:	cmp    rax,rbx
 1003f75:	jne    0x1003f80
 1003f77:	mov    ebx,0x1
 1003f7c:	mov    edi,ebx
 1003f7e:	jmp    0x1003f92
 1003f80:	mov    ecx,0x3e8
 1003f85:	call   QWORD PTR [rip+0xffffffffffffd1b5]        # 0x1001140
 1003f8b:	jmp    0x1003f65
 1003f8d:	mov    ebx,0x1
 1003f92:	mov    eax,DWORD PTR [rip+0x27b0]        # 0x1006748
 1003f98:	cmp    eax,ebx
 1003f9a:	jne    0x1003fa8
 1003f9c:	mov    ecx,0x1f
 1003fa1:	call   0x10043ae
 1003fa6:	jmp    0x1003fdf
 1003fa8:	mov    eax,DWORD PTR [rip+0x279a]        # 0x1006748
 1003fae:	test   eax,eax
 1003fb0:	jne    0x1003fd9
 1003fb2:	mov    DWORD PTR [rip+0x2790],ebx        # 0x1006748
 1003fb8:	lea    rdx,[rip+0xffffffffffffd2d1]        # 0x1001290
 1003fbf:	lea    rcx,[rip+0xffffffffffffd2b2]        # 0x1001278
 1003fc6:	call   0x1004614
 1003fcb:	test   eax,eax
 1003fcd:	je     0x1003fdf
 1003fcf:	mov    eax,0xff
 1003fd4:	jmp    0x10040c1
 1003fd9:	mov    DWORD PTR [rip+0x2165],ebx        # 0x1006144
 1003fdf:	mov    eax,DWORD PTR [rip+0x2763]        # 0x1006748
 1003fe5:	cmp    eax,ebx
 1003fe7:	jne    0x1004006
 1003fe9:	lea    rdx,[rip+0xffffffffffffd280]        # 0x1001270
 1003ff0:	lea    rcx,[rip+0xffffffffffffd269]        # 0x1001260
 1003ff7:	call   0x1004608
 1003ffc:	mov    DWORD PTR [rip+0x2742],0x2        # 0x1006748
 1004006:	test   edi,edi
 1004008:	jne    0x1004013
 100400a:	xor    eax,eax
 100400c:	xchg   QWORD PTR [rip+0x273d],rax        # 0x1006750
 1004013:	cmp    QWORD PTR [rip+0x274d],0x0        # 0x1006768
 100401b:	je     0x100403c
 100401d:	lea    rcx,[rip+0x2744]        # 0x1006768
 1004024:	call   0x10045c0
 1004029:	test   eax,eax
 100402b:	je     0x100403c
 100402d:	xor    r8d,r8d
 1004030:	lea    edx,[r8+0x2]
 1004034:	xor    ecx,ecx
 1004036:	call   QWORD PTR [rip+0x272c]        # 0x1006768
 100403c:	mov    rcx,QWORD PTR [rip+0xffffffffffffd115]        # 0x1001158
 1004043:	mov    rax,QWORD PTR [rip+0x20de]        # 0x1006128
 100404a:	mov    QWORD PTR [rcx],rax
 100404d:	mov    r8,QWORD PTR [rip+0x20d4]        # 0x1006128
 1004054:	mov    rdx,QWORD PTR [rip+0x20d5]        # 0x1006130
 100405b:	mov    ecx,DWORD PTR [rip+0x20bf]        # 0x1006120
 1004061:	call   0x1002fb0
 1004066:	mov    DWORD PTR [rip+0x20d4],eax        # 0x1006140
 100406c:	cmp    DWORD PTR [rip+0x20b1],0x0        # 0x1006124
 1004073:	jne    0x100407d
 1004075:	mov    ecx,eax
 1004077:	call   QWORD PTR [rip+0xffffffffffffd0d3]        # 0x1001150
 100407d:	cmp    DWORD PTR [rip+0x20c0],0x0        # 0x1006144
 1004084:	jne    0x1004092
 1004086:	call   QWORD PTR [rip+0xffffffffffffd13c]        # 0x10011c8
 100408c:	mov    eax,DWORD PTR [rip+0x20ae]        # 0x1006140
 1004092:	jmp    0x10040c1
 1004094:	mov    DWORD PTR [rip+0x20a6],eax        # 0x1006140
 100409a:	cmp    DWORD PTR [rip+0x2083],0x0        # 0x1006124
 10040a1:	jne    0x10040ac
 10040a3:	mov    ecx,eax
 10040a5:	call   QWORD PTR [rip+0xffffffffffffd125]        # 0x10011d0
 10040ab:	int3   
 10040ac:	cmp    DWORD PTR [rip+0x2091],0x0        # 0x1006144
 10040b3:	jne    0x10040c1
 10040b5:	call   QWORD PTR [rip+0xffffffffffffd10d]        # 0x10011c8
 10040bb:	mov    eax,DWORD PTR [rip+0x207f]        # 0x1006140
 10040c1:	mov    rbx,QWORD PTR [rsp+0x30]
 10040c6:	add    rsp,0x20
 10040ca:	pop    rdi
 10040cb:	ret    
 10040cc:	int3   
 10040cd:	int3   
 10040ce:	int3   
 10040cf:	int3   
 10040d0:	int3   
 10040d1:	int3   
 10040d2:	int3   
 10040d3:	int3   
 10040d4:	sub    rsp,0x28
 10040d8:	mov    eax,0x5a4d
 10040dd:	cmp    WORD PTR [rip+0xffffffffffffbf1c],ax        # 0x1000000
 10040e4:	je     0x10040ea
 10040e6:	xor    ecx,ecx
 10040e8:	jmp    0x1004122
 10040ea:	movsxd rax,DWORD PTR [rip+0xffffffffffffbf4b]        # 0x100003c
 10040f1:	lea    rcx,[rip+0xffffffffffffbf08]        # 0x1000000
 10040f8:	add    rax,rcx
 10040fb:	cmp    DWORD PTR [rax],0x4550
 1004101:	jne    0x10040e6
 1004103:	mov    ecx,0x20b
 1004108:	cmp    WORD PTR [rax+0x18],cx
 100410c:	jne    0x10040e6
 100410e:	xor    ecx,ecx
 1004110:	cmp    DWORD PTR [rax+0x84],0xe
 1004117:	jbe    0x1004122
 1004119:	cmp    DWORD PTR [rax+0xf8],ecx
 100411f:	setne  cl
 1004122:	mov    DWORD PTR [rip+0x1ffc],ecx        # 0x1006124
 1004128:	mov    ecx,0x1
 100412d:	call   QWORD PTR [rip+0xffffffffffffd05d]        # 0x1001190
 1004133:	or     rcx,0xffffffffffffffff
 1004137:	call   QWORD PTR [rip+0xffffffffffffcffb]        # 0x1001138
 100413d:	mov    rcx,QWORD PTR [rip+0xffffffffffffd044]        # 0x1001188
 1004144:	mov    QWORD PTR [rip+0x260d],rax        # 0x1006758
 100414b:	mov    QWORD PTR [rip+0x260e],rax        # 0x1006760
 1004152:	mov    eax,DWORD PTR [rip+0x2574]        # 0x10066cc
 1004158:	mov    DWORD PTR [rcx],eax
 100415a:	mov    rdx,QWORD PTR [rip+0xffffffffffffd01f]        # 0x1001180
 1004161:	mov    eax,DWORD PTR [rip+0x2561]        # 0x10066c8
 1004167:	mov    DWORD PTR [rdx],eax
 1004169:	call   0x1004494
 100416e:	call   0x100462c
 1004173:	cmp    DWORD PTR [rip+0x1f92],0x0        # 0x100610c
 100417a:	jne    0x1004189
 100417c:	lea    rcx,[rip+0x49d]        # 0x1004620
 1004183:	call   QWORD PTR [rip+0xffffffffffffcfef]        # 0x1001178
 1004189:	cmp    DWORD PTR [rip+0x1f78],0xffffffff        # 0x1006108
 1004190:	jne    0x100419b
 1004192:	or     ecx,0xffffffff
 1004195:	call   QWORD PTR [rip+0xffffffffffffcfd5]        # 0x1001170
 100419b:	xor    eax,eax
 100419d:	add    rsp,0x28
 10041a1:	ret    
 10041a2:	int3   
 10041a3:	int3   
 10041a4:	int3   
 10041a5:	int3   
 10041a6:	int3   
 10041a7:	int3   
 10041a8:	sub    rsp,0x28
 10041ac:	call   0x1004638
 10041b1:	add    rsp,0x28
 10041b5:	jmp    0x1003f4c
 10041ba:	int3   
 10041bb:	int3   
 10041bc:	int3   
 10041bd:	int3   
 10041be:	int3   
 10041bf:	int3   
 10041c0:	int3   
 10041c1:	int3   
 10041c2:	int3   
 10041c3:	int3   
 10041c4:	int3   
 10041c5:	int3   
 10041c6:	data16 nop WORD PTR [rax+rax*1+0x0]
 10041d0:	cmp    rcx,QWORD PTR [rip+0x1f39]        # 0x1006110
 10041d7:	jne    0x10041ea
 10041d9:	rol    rcx,0x10
 10041dd:	test   cx,0xffff
 10041e2:	jne    0x10041e6
 10041e4:	repz ret 
 10041e6:	ror    rcx,0x10
 10041ea:	jmp    0x10041f8
 10041ef:	int3   
 10041f0:	int3   
 10041f1:	int3   
 10041f2:	int3   
 10041f3:	int3   
 10041f4:	int3   
 10041f5:	int3   
 10041f6:	int3   
 10041f7:	int3   
 10041f8:	mov    QWORD PTR [rsp+0x8],rcx
 10041fd:	sub    rsp,0x88
 1004204:	lea    rcx,[rip+0x1fe5]        # 0x10061f0
 100420b:	call   QWORD PTR [rip+0xffffffffffffcedf]        # 0x10010f0
 1004211:	mov    rax,QWORD PTR [rip+0x20d0]        # 0x10062e8
 1004218:	mov    QWORD PTR [rsp+0x58],rax
 100421d:	xor    r8d,r8d
 1004220:	lea    rdx,[rsp+0x60]
 1004225:	mov    rcx,QWORD PTR [rsp+0x58]
 100422a:	call   0x100473a
 100422f:	mov    QWORD PTR [rsp+0x50],rax
 1004234:	cmp    QWORD PTR [rsp+0x50],0x0
 100423a:	je     0x100427d
 100423c:	mov    QWORD PTR [rsp+0x38],0x0
 1004245:	lea    rax,[rsp+0x48]
 100424a:	mov    QWORD PTR [rsp+0x30],rax
 100424f:	lea    rax,[rsp+0x40]
 1004254:	mov    QWORD PTR [rsp+0x28],rax
 1004259:	lea    rax,[rip+0x1f90]        # 0x10061f0
 1004260:	mov    QWORD PTR [rsp+0x20],rax
 1004265:	mov    r9,QWORD PTR [rsp+0x50]
 100426a:	mov    r8,QWORD PTR [rsp+0x58]
 100426f:	mov    rdx,QWORD PTR [rsp+0x60]
 1004274:	xor    ecx,ecx
 1004276:	call   0x100472e
 100427b:	jmp    0x100429f
 100427d:	mov    rax,QWORD PTR [rsp+0x88]
 1004285:	mov    QWORD PTR [rip+0x205c],rax        # 0x10062e8
 100428c:	lea    rax,[rsp+0x88]
 1004294:	add    rax,0x8
 1004298:	mov    QWORD PTR [rip+0x1fe9],rax        # 0x1006288
 100429f:	mov    rax,QWORD PTR [rip+0x2042]        # 0x10062e8
 10042a6:	mov    QWORD PTR [rip+0x1eb3],rax        # 0x1006160
 10042ad:	mov    rax,QWORD PTR [rsp+0x90]
 10042b5:	mov    QWORD PTR [rip+0x1fb4],rax        # 0x1006270
 10042bc:	mov    DWORD PTR [rip+0x1e8a],0xc0000409        # 0x1006150
 10042c6:	mov    DWORD PTR [rip+0x1e84],0x1        # 0x1006154
 10042d0:	mov    rax,QWORD PTR [rip+0x1e39]        # 0x1006110
 10042d7:	mov    QWORD PTR [rsp+0x68],rax
 10042dc:	mov    rax,QWORD PTR [rip+0x1e35]        # 0x1006118
 10042e3:	mov    QWORD PTR [rsp+0x70],rax
 10042e8:	call   QWORD PTR [rip+0xffffffffffffce1a]        # 0x1001108
 10042ee:	mov    DWORD PTR [rip+0x1ef4],eax        # 0x10061e8
 10042f4:	mov    ecx,0x1
 10042f9:	call   0x10046f2
 10042fe:	xor    ecx,ecx
 1004300:	call   QWORD PTR [rip+0xffffffffffffce0a]        # 0x1001110
 1004306:	lea    rcx,[rip+0xffffffffffffcfb3]        # 0x10012c0
 100430d:	call   QWORD PTR [rip+0xffffffffffffce05]        # 0x1001118
 1004313:	cmp    DWORD PTR [rip+0x1ece],0x0        # 0x10061e8
 100431a:	jne    0x1004326
 100431c:	mov    ecx,0x1
 1004321:	call   0x10046f2
 1004326:	call   QWORD PTR [rip+0xffffffffffffcdfc]        # 0x1001128
 100432c:	mov    edx,0xc0000409
 1004331:	mov    rcx,rax
 1004334:	call   QWORD PTR [rip+0xffffffffffffcdf6]        # 0x1001130
 100433a:	add    rsp,0x88
 1004341:	ret    
 1004342:	int3   
 1004343:	int3   
 1004344:	int3   
 1004345:	int3   
 1004346:	int3   
 1004347:	int3   
 1004348:	sub    rsp,0x28
 100434c:	mov    rax,QWORD PTR [rcx]
 100434f:	cmp    DWORD PTR [rax],0xe06d7363
 1004355:	jne    0x1004382
 1004357:	cmp    DWORD PTR [rax+0x18],0x4
 100435b:	jne    0x1004382
 100435d:	mov    eax,DWORD PTR [rax+0x20]
 1004360:	cmp    eax,0x19930520
 1004365:	je     0x100437c
 1004367:	cmp    eax,0x19930521
 100436c:	je     0x100437c
 100436e:	cmp    eax,0x19930522
 1004373:	je     0x100437c
 1004375:	cmp    eax,0x1994000
 100437a:	jne    0x1004382
 100437c:	call   0x10046fe
 1004381:	int3   
 1004382:	xor    eax,eax
 1004384:	add    rsp,0x28
 1004388:	ret    
 1004389:	int3   
 100438a:	int3   
 100438b:	int3   
 100438c:	int3   
 100438d:	int3   
 100438e:	int3   
 100438f:	int3   
 1004390:	sub    rsp,0x28
 1004394:	lea    rcx,[rip+0xffffffffffffffad]        # 0x1004348
 100439b:	call   QWORD PTR [rip+0xffffffffffffcd6f]        # 0x1001110
 10043a1:	xor    eax,eax
 10043a3:	add    rsp,0x28
 10043a7:	ret    
 10043a8:	int3   
 10043a9:	int3   
 10043aa:	int3   
 10043ab:	int3   
 10043ac:	int3   
 10043ad:	int3   
 10043ae:	jmp    QWORD PTR [rip+0xffffffffffffce34]        # 0x10011e8
 10043b4:	int3   
 10043b5:	int3   
 10043b6:	int3   
 10043b7:	int3   
 10043b8:	int3   
 10043b9:	int3   
 10043ba:	int3   
 10043bb:	int3   
 10043bc:	rex push rbx
 10043be:	sub    rsp,0x20
 10043c2:	mov    rbx,rcx
 10043c5:	mov    rcx,QWORD PTR [rip+0x2394]        # 0x1006760
 10043cc:	call   QWORD PTR [rip+0xffffffffffffcd16]        # 0x10010e8
 10043d2:	mov    QWORD PTR [rsp+0x38],rax
 10043d7:	cmp    rax,0xffffffffffffffff
 10043db:	jne    0x10043e8
 10043dd:	mov    rcx,rbx
 10043e0:	call   QWORD PTR [rip+0xffffffffffffcdda]        # 0x10011c0
 10043e6:	jmp    0x1004466
 10043e8:	mov    ecx,0x8
 10043ed:	call   0x1004722
 10043f2:	nop
 10043f3:	mov    rcx,QWORD PTR [rip+0x2366]        # 0x1006760
 10043fa:	call   QWORD PTR [rip+0xffffffffffffcce8]        # 0x10010e8
 1004400:	mov    QWORD PTR [rsp+0x38],rax
 1004405:	mov    rcx,QWORD PTR [rip+0x234c]        # 0x1006758
 100440c:	call   QWORD PTR [rip+0xffffffffffffccd6]        # 0x10010e8
 1004412:	mov    QWORD PTR [rsp+0x40],rax
 1004417:	mov    rcx,rbx
 100441a:	call   QWORD PTR [rip+0xffffffffffffcd18]        # 0x1001138
 1004420:	mov    rcx,rax
 1004423:	lea    r8,[rsp+0x40]
 1004428:	lea    rdx,[rsp+0x38]
 100442d:	call   0x1004716
 1004432:	mov    rbx,rax
 1004435:	mov    rcx,QWORD PTR [rsp+0x38]
 100443a:	call   QWORD PTR [rip+0xffffffffffffccf8]        # 0x1001138
 1004440:	mov    QWORD PTR [rip+0x2319],rax        # 0x1006760
 1004447:	mov    rcx,QWORD PTR [rsp+0x40]
 100444c:	call   QWORD PTR [rip+0xffffffffffffcce6]        # 0x1001138
 1004452:	mov    QWORD PTR [rip+0x22ff],rax        # 0x1006758
 1004459:	mov    ecx,0x8
 100445e:	call   0x100470a
 1004463:	mov    rax,rbx
 1004466:	add    rsp,0x20
 100446a:	pop    rbx
 100446b:	ret    
 100446c:	int3   
 100446d:	int3   
 100446e:	int3   
 100446f:	int3   
 1004470:	int3   
 1004471:	int3   
 1004472:	int3   
 1004473:	int3   
 1004474:	sub    rsp,0x28
 1004478:	call   0x10043bc
 100447d:	neg    rax
 1004480:	sbb    eax,eax
 1004482:	neg    eax
 1004484:	dec    eax
 1004486:	add    rsp,0x28
 100448a:	ret    
 100448b:	int3   
 100448c:	int3   
 100448d:	int3   
 100448e:	int3   
 100448f:	int3   
 1004490:	int3   
 1004491:	int3   
 1004492:	int3   
 1004493:	int3   
 1004494:	mov    QWORD PTR [rsp+0x8],rbx
 1004499:	push   rdi
 100449a:	sub    rsp,0x20
 100449e:	lea    rbx,[rip+0xffffffffffffd6e3]        # 0x1001b88
 10044a5:	lea    rdi,[rip+0xffffffffffffd6dc]        # 0x1001b88
 10044ac:	jmp    0x10044bc
 10044ae:	mov    rax,QWORD PTR [rbx]
 10044b1:	test   rax,rax
 10044b4:	je     0x10044b8
 10044b6:	call   rax
 10044b8:	add    rbx,0x8
 10044bc:	cmp    rbx,rdi
 10044bf:	jb     0x10044ae
 10044c1:	mov    rbx,QWORD PTR [rsp+0x30]
 10044c6:	add    rsp,0x20
 10044ca:	pop    rdi
 10044cb:	ret    
 10044cc:	int3   
 10044cd:	int3   
 10044ce:	int3   
 10044cf:	int3   
 10044d0:	int3   
 10044d1:	int3   
 10044d2:	int3   
 10044d3:	int3   
 10044d4:	mov    QWORD PTR [rsp+0x8],rbx
 10044d9:	push   rdi
 10044da:	sub    rsp,0x20
 10044de:	lea    rbx,[rip+0xffffffffffffd6b3]        # 0x1001b98
 10044e5:	lea    rdi,[rip+0xffffffffffffd6ac]        # 0x1001b98
 10044ec:	jmp    0x10044fc
 10044ee:	mov    rax,QWORD PTR [rbx]
 10044f1:	test   rax,rax
 10044f4:	je     0x10044f8
 10044f6:	call   rax
 10044f8:	add    rbx,0x8
 10044fc:	cmp    rbx,rdi
 10044ff:	jb     0x10044ee
 1004501:	mov    rbx,QWORD PTR [rsp+0x30]
 1004506:	add    rsp,0x20
 100450a:	pop    rdi
 100450b:	ret    
 100450c:	int3   
 100450d:	int3   
 100450e:	int3   
 100450f:	int3   
 1004510:	int3   
 1004511:	int3   
 1004512:	jmp    QWORD PTR [rip+0xffffffffffffccc8]        # 0x10011e0
 1004518:	int3   
 1004519:	int3   
 100451a:	int3   
 100451b:	int3   
 100451c:	int3   
 100451d:	int3   
 100451e:	jmp    QWORD PTR [rip+0xffffffffffffccb4]        # 0x10011d8
 1004524:	int3   
 1004525:	int3   
 1004526:	int3   
 1004527:	int3   
 1004528:	int3   
 1004529:	int3   
 100452a:	int3   
 100452b:	int3   
 100452c:	int3   
 100452d:	int3   
 100452e:	int3   
 100452f:	int3   
 1004530:	mov    rax,rcx
 1004533:	mov    ecx,0x5a4d
 1004538:	cmp    WORD PTR [rax],cx
 100453b:	je     0x1004540
 100453d:	xor    eax,eax
 100453f:	ret    
 1004540:	movsxd rcx,DWORD PTR [rax+0x3c]
 1004544:	add    rcx,rax
 1004547:	xor    eax,eax
 1004549:	cmp    DWORD PTR [rcx],0x4550
 100454f:	jne    0x100455d
 1004551:	mov    edx,0x20b
 1004556:	cmp    WORD PTR [rcx+0x18],dx
 100455a:	sete   al
 100455d:	repz ret 
 100455f:	int3   
 1004560:	int3   
 1004561:	int3   
 1004562:	int3   
 1004563:	int3   
 1004564:	int3   
 1004565:	int3   
 1004566:	int3   
 1004567:	int3   
 1004568:	int3   
 1004569:	int3   
 100456a:	int3   
 100456b:	int3   
 100456c:	int3   
 100456d:	int3   
 100456e:	int3   
 100456f:	int3   
 1004570:	movsxd r8,DWORD PTR [rcx+0x3c]
 1004574:	xor    r9d,r9d
 1004577:	mov    r10,rdx
 100457a:	add    r8,rcx
 100457d:	movzx  eax,WORD PTR [r8+0x14]
 1004582:	movzx  r11d,WORD PTR [r8+0x6]
 1004587:	lea    rcx,[rax+r8*1+0x18]
 100458c:	test   r11d,r11d
 100458f:	je     0x10045af
 1004591:	mov    edx,DWORD PTR [rcx+0xc]
 1004594:	cmp    r10,rdx
 1004597:	jb     0x10045a3
 1004599:	mov    eax,DWORD PTR [rcx+0x8]
 100459c:	add    eax,edx
 100459e:	cmp    r10,rax
 10045a1:	jb     0x10045b2
 10045a3:	inc    r9d
 10045a6:	add    rcx,0x28
 10045aa:	cmp    r9d,r11d
 10045ad:	jb     0x1004591
 10045af:	xor    eax,eax
 10045b1:	ret    
 10045b2:	mov    rax,rcx
 10045b5:	ret    
 10045b6:	int3   
 10045b7:	int3   
 10045b8:	int3   
 10045b9:	int3   
 10045ba:	int3   
 10045bb:	int3   
 10045bc:	int3   
 10045bd:	int3   
 10045be:	int3   
 10045bf:	int3   
 10045c0:	sub    rsp,0x28
 10045c4:	mov    r8,rcx
 10045c7:	lea    r9,[rip+0xffffffffffffba32]        # 0x1000000
 10045ce:	mov    rcx,r9
 10045d1:	call   0x1004530
 10045d6:	test   eax,eax
 10045d8:	je     0x10045fc
 10045da:	sub    r8,r9
 10045dd:	mov    rdx,r8
 10045e0:	mov    rcx,r9
 10045e3:	call   0x1004570
 10045e8:	test   rax,rax
 10045eb:	je     0x10045fc
 10045ed:	mov    eax,DWORD PTR [rax+0x24]
 10045f0:	shr    eax,0x1f
 10045f3:	not    eax
 10045f5:	and    eax,0x1
 10045f8:	jmp    0x10045fc
 10045fa:	xor    eax,eax
 10045fc:	add    rsp,0x28
 1004600:	ret    
 1004601:	int3   
 1004602:	int3   
 1004603:	int3   
 1004604:	int3   
 1004605:	int3   
 1004606:	int3   
 1004607:	int3   
 1004608:	jmp    QWORD PTR [rip+0xffffffffffffcb52]        # 0x1001160
 100460e:	int3   
 100460f:	int3   
 1004610:	int3   
 1004611:	int3   
 1004612:	int3   
 1004613:	int3   
 1004614:	jmp    QWORD PTR [rip+0xffffffffffffcb4e]        # 0x1001168
 100461a:	int3   
 100461b:	int3   
 100461c:	int3   
 100461d:	int3   
 100461e:	int3   
 100461f:	int3   
 1004620:	xor    eax,eax
 1004622:	ret    
 1004623:	int3   
 1004624:	int3   
 1004625:	int3   
 1004626:	int3   
 1004627:	int3   
 1004628:	int3   
 1004629:	int3   
 100462a:	int3   
 100462b:	int3   
 100462c:	xor    eax,eax
 100462e:	ret    
 100462f:	int3   
 1004630:	int3   
 1004631:	int3   
 1004632:	int3   
 1004633:	int3   
 1004634:	int3   
 1004635:	int3   
 1004636:	int3   
 1004637:	int3   
 1004638:	mov    QWORD PTR [rsp+0x18],rbx
 100463d:	push   rdi
 100463e:	sub    rsp,0x20
 1004642:	mov    rax,QWORD PTR [rip+0x1ac7]        # 0x1006110
 1004649:	and    QWORD PTR [rsp+0x30],0x0
 100464f:	movabs rdi,0x2b992ddfa232
 1004659:	cmp    rax,rdi
 100465c:	je     0x100466a
 100465e:	not    rax
 1004661:	mov    QWORD PTR [rip+0x1ab0],rax        # 0x1006118
 1004668:	jmp    0x10046e0
 100466a:	lea    rcx,[rsp+0x30]
 100466f:	call   QWORD PTR [rip+0xffffffffffffcaab]        # 0x1001120
 1004675:	mov    rbx,QWORD PTR [rsp+0x30]
 100467a:	call   QWORD PTR [rip+0xffffffffffffca48]        # 0x10010c8
 1004680:	mov    r11d,eax
 1004683:	xor    rbx,r11
 1004686:	call   QWORD PTR [rip+0xffffffffffffca44]        # 0x10010d0
 100468c:	mov    r11d,eax
 100468f:	xor    rbx,r11
 1004692:	call   QWORD PTR [rip+0xffffffffffffca40]        # 0x10010d8
 1004698:	lea    rcx,[rsp+0x38]
 100469d:	mov    r11d,eax
 10046a0:	xor    rbx,r11
 10046a3:	call   QWORD PTR [rip+0xffffffffffffca37]        # 0x10010e0
 10046a9:	mov    r11,QWORD PTR [rsp+0x38]
 10046ae:	xor    r11,rbx
 10046b1:	movabs rax,0xffffffffffff
 10046bb:	and    r11,rax
 10046be:	movabs rax,0x2b992ddfa233
 10046c8:	cmp    r11,rdi
 10046cb:	cmove  r11,rax
 10046cf:	mov    QWORD PTR [rip+0x1a3a],r11        # 0x1006110
 10046d6:	not    r11
 10046d9:	mov    QWORD PTR [rip+0x1a38],r11        # 0x1006118
 10046e0:	mov    rbx,QWORD PTR [rsp+0x40]
 10046e5:	add    rsp,0x20
 10046e9:	pop    rdi
 10046ea:	ret    
 10046eb:	int3   
 10046ec:	int3   
 10046ed:	int3   
 10046ee:	int3   
 10046ef:	int3   
 10046f0:	int3   
 10046f1:	int3   
 10046f2:	jmp    QWORD PTR [rip+0xffffffffffffcaa0]        # 0x1001198
 10046f8:	int3   
 10046f9:	int3   
 10046fa:	int3   
 10046fb:	int3   
 10046fc:	int3   
 10046fd:	int3   
 10046fe:	jmp    QWORD PTR [rip+0xffffffffffffca9c]        # 0x10011a0
 1004704:	int3   
 1004705:	int3   
 1004706:	int3   
 1004707:	int3   
 1004708:	int3   
 1004709:	int3   
 100470a:	jmp    QWORD PTR [rip+0xffffffffffffca98]        # 0x10011a8
 1004710:	int3   
 1004711:	int3   
 1004712:	int3   
 1004713:	int3   
 1004714:	int3   
 1004715:	int3   
 1004716:	jmp    QWORD PTR [rip+0xffffffffffffca94]        # 0x10011b0
 100471c:	int3   
 100471d:	int3   
 100471e:	int3   
 100471f:	int3   
 1004720:	int3   
 1004721:	int3   
 1004722:	jmp    QWORD PTR [rip+0xffffffffffffca90]        # 0x10011b8
 1004728:	int3   
 1004729:	int3   
 100472a:	int3   
 100472b:	int3   
 100472c:	int3   
 100472d:	int3   
 100472e:	jmp    QWORD PTR [rip+0xffffffffffffc9cc]        # 0x1001100
 1004734:	int3   
 1004735:	int3   
 1004736:	int3   
 1004737:	int3   
 1004738:	int3   
 1004739:	int3   
 100473a:	jmp    QWORD PTR [rip+0xffffffffffffc9b8]        # 0x10010f8
 1004740:	int3   
 1004741:	int3   
 1004742:	int3   
 1004743:	int3   
 1004744:	int3   
 1004745:	int3   
 1004746:	int3   
 1004747:	int3   
 1004748:	rex push rbx
 100474a:	sub    rsp,0x20
 100474e:	mov    r11d,DWORD PTR [r8]
 1004751:	mov    rbx,rdx
 1004754:	mov    r9,rcx
 1004757:	and    r11d,0xfffffff8
 100475b:	test   BYTE PTR [r8],0x4
 100475f:	mov    r10,rcx
 1004762:	je     0x1004777
 1004764:	mov    eax,DWORD PTR [r8+0x8]
 1004768:	movsxd r10,DWORD PTR [r8+0x4]
 100476c:	neg    eax
 100476e:	add    r10,rcx
 1004771:	movsxd rcx,eax
 1004774:	and    r10,rcx
 1004777:	movsxd rax,r11d
 100477a:	mov    rdx,QWORD PTR [rax+r10*1]
 100477e:	mov    rax,QWORD PTR [rbx+0x10]
 1004782:	mov    ecx,DWORD PTR [rax+0x8]
 1004785:	add    rcx,QWORD PTR [rbx+0x8]
 1004789:	test   BYTE PTR [rcx+0x3],0xf
 100478d:	je     0x100479b
 100478f:	movzx  eax,BYTE PTR [rcx+0x3]
 1004793:	and    eax,0xfffffff0
 1004796:	cdqe   
 1004798:	add    r9,rax
 100479b:	xor    r9,rdx
 100479e:	mov    rcx,r9
 10047a1:	add    rsp,0x20
 10047a5:	pop    rbx
 10047a6:	jmp    0x10041d0
 10047ab:	int3   
 10047ac:	int3   
 10047ad:	int3   
 10047ae:	int3   
 10047af:	int3   
 10047b0:	int3   
 10047b1:	int3   
 10047b2:	int3   
 10047b3:	int3   
 10047b4:	sub    rsp,0x28
 10047b8:	mov    r8,QWORD PTR [r9+0x38]
 10047bc:	mov    rcx,rdx
 10047bf:	mov    rdx,r9
 10047c2:	call   0x1004748
 10047c7:	mov    eax,0x1
 10047cc:	add    rsp,0x28
 10047d0:	ret    
 10047d1:	int3   
 10047d2:	int3   
 10047d3:	int3   
 10047d4:	int3   
 10047d5:	int3   
 10047d6:	int3   
 10047d7:	int3   
 10047d8:	int3   
 10047d9:	int3   
 10047da:	int3   
 10047db:	int3   
 10047dc:	int3   
 10047dd:	int3   
 10047de:	int3   
 10047df:	int3   
 10047e0:	int3   
 10047e1:	int3   
 10047e2:	int3   
 10047e3:	int3   
 10047e4:	int3   
 10047e5:	int3   
 10047e6:	data16 nop WORD PTR [rax+rax*1+0x0]
 10047f0:	sub    rsp,0x10
 10047f4:	mov    QWORD PTR [rsp],r10
 10047f8:	mov    QWORD PTR [rsp+0x8],r11
 10047fd:	xor    r11,r11
 1004800:	lea    r10,[rsp+0x18]
 1004805:	sub    r10,rax
 1004808:	cmovb  r10,r11
 100480c:	mov    r11,QWORD PTR gs:0x10
 1004815:	cmp    r10,r11
 1004818:	jae    0x1004830
 100481a:	and    r10w,0xf000
 1004820:	lea    r11,[r11-0x1000]
 1004827:	mov    BYTE PTR [r11],0x0
 100482b:	cmp    r10,r11
 100482e:	jne    0x1004820
 1004830:	mov    r10,QWORD PTR [rsp]
 1004834:	mov    r11,QWORD PTR [rsp+0x8]
 1004839:	add    rsp,0x10
 100483d:	ret    
 100483e:	int3   
 100483f:	int3   
 1004840:	int3   
 1004841:	int3   
 1004842:	int3   
 1004843:	int3   
 1004844:	jmp    QWORD PTR [rip+0xffffffffffffc9fe]        # 0x1001248
 100484a:	int3   
 100484b:	int3   
 100484c:	int3   
 100484d:	int3   
 100484e:	int3   
 100484f:	int3   
 1004850:	jmp    QWORD PTR [rip+0xffffffffffffc9fa]        # 0x1001250
 1004856:	int3   
 1004857:	int3   
 1004858:	int3   
 1004859:	int3   
 100485a:	int3   
 100485b:	int3   
 100485c:	int3   
 100485d:	int3   
 100485e:	int3   
 100485f:	int3   
 1004860:	int3   
 1004861:	int3   
 1004862:	int3   
 1004863:	int3   
 1004864:	int3   
 1004865:	int3   
 1004866:	rex push rbp
 1004868:	sub    rsp,0x20
 100486c:	mov    rbp,rdx
 100486f:	mov    rax,QWORD PTR [rcx]
 1004872:	mov    rdx,rcx
 1004875:	mov    ecx,DWORD PTR [rax]
 1004877:	call   0x100451e
 100487c:	nop
 100487d:	add    rsp,0x20
 1004881:	pop    rbp
 1004882:	ret    
 1004883:	int3   
 1004884:	int3   
 1004885:	int3   
 1004886:	int3   
 1004887:	int3   
 1004888:	int3   
 1004889:	int3   
 100488a:	rex push rbp
 100488c:	sub    rsp,0x20
 1004890:	mov    rbp,rdx
 1004893:	mov    ecx,0x8
 1004898:	call   0x100470a
 100489d:	nop
 100489e:	add    rsp,0x20
 10048a2:	pop    rbp
 10048a3:	ret    
 10048a4:	int3   
 10048a5:	int3   
 10048a6:	int3   
 10048a7:	int3   
 10048a8:	int3   
 10048a9:	int3   
 10048aa:	int3   
 10048ab:	int3   
 10048ac:	int3   
 10048ad:	int3   
 10048ae:	int3   
 10048af:	int3   
 10048b0:	rex push rbp
 10048b2:	sub    rsp,0x20
 10048b6:	mov    rbp,rdx
 10048b9:	mov    rax,QWORD PTR [rcx]
 10048bc:	xor    ecx,ecx
 10048be:	cmp    DWORD PTR [rax],0xc0000005
 10048c4:	sete   cl
 10048c7:	mov    eax,ecx
 10048c9:	mov    eax,ecx
 10048cb:	add    rsp,0x20
 10048cf:	pop    rbp
 10048d0:	ret    
 10048d1:	int3   
 10048d2:	int3   
 10048d3:	int3   
 10048d4:	int3   
 10048d5:	int3   
 10048d6:	int3   
 10048d7:	int3   
 10048d8:	add    DWORD PTR [rcx+rax*1],eax
 10048db:	add    BYTE PTR [rdx+riz*2],al
 10048de:	add    BYTE PTR [rax],al
 10048e0:	add    DWORD PTR [rsi],eax
 10048e2:	add    al,BYTE PTR [rax]
 10048e4:	(bad)  
 10048e5:	xor    al,BYTE PTR [rdx]
 10048e7:	push   rax
 10048e8:	or     DWORD PTR [rdx],ecx
 10048ea:	add    al,0x0
 10048ec:	or     dh,BYTE PTR [rsi+rax*1]
 10048ef:	add    BYTE PTR [rdx],cl
 10048f1:	xor    al,BYTE PTR [rsi]
 10048f3:	jo     0x1004907
 10048f5:	add    BYTE PTR [r8],r8b
 10048f8:	add    DWORD PTR [rax],eax
 10048fa:	add    BYTE PTR [rax],al
 10048fc:	push   rsi
 10048fd:	(bad)  
 10048fe:	add    BYTE PTR [rax],al
 1004900:	xchg   esp,eax
 1004901:	add    BYTE PTR [rax],al
 1004904:	data16 rex.W add BYTE PTR [rax],al
 1004908:	xchg   esp,eax
 1004909:	add    BYTE PTR [rax],al
 100490c:	add    DWORD PTR [rcx+rax*1],eax
 100490f:	add    BYTE PTR [rdx+rax*2],al
 1004912:	add    BYTE PTR [rax],al
 1004914:	add    DWORD PTR [rcx+rax*1],eax
 1004917:	add    BYTE PTR [rdx+rax*2],al
 100491a:	add    BYTE PTR [rax],al
 100491c:	add    BYTE PTR [rax],al
 100491e:	add    BYTE PTR [rax],al
 1004920:	add    DWORD PTR [rax],eax
 1004922:	add    BYTE PTR [rax],al
 1004924:	add    DWORD PTR [rdx+rax*1],ecx
 1004927:	add    BYTE PTR [rcx+rax*1],cl
 100492a:	adc    DWORD PTR [rax],eax
 100492c:	add    DWORD PTR [rcx+rax*1],eax
 100492f:	add    BYTE PTR [rdx+rax*2],al
 1004932:	add    BYTE PTR [rax],al
 1004934:	add    DWORD PTR [rcx+rax*1],eax
 1004937:	add    BYTE PTR [rdx+rax*2],al
 100493a:	add    BYTE PTR [rax],al
 100493c:	add    DWORD PTR [rsi],eax
 100493e:	add    al,BYTE PTR [rax]
 1004940:	(bad)  
 1004941:	xor    al,BYTE PTR [rdx]
 1004943:	push   rax
 1004944:	adc    DWORD PTR [rsi],eax
 1004946:	add    al,BYTE PTR [rax]
 1004948:	(bad)  
 1004949:	xor    al,BYTE PTR [rdx]
 100494b:	xor    BYTE PTR [rdx],dl
 100494d:	add    BYTE PTR [r8],r8b
 1004950:	add    DWORD PTR [rax],eax
 1004952:	add    BYTE PTR [rax],al
 1004954:	repz rex.XB add BYTE PTR [r8],al
 1004958:	pop    rcx
 1004959:	add    BYTE PTR [rax],r8b
 100495c:	mov    cl,BYTE PTR [rax+0x0]
 100495f:	add    BYTE PTR [rax],al
 1004961:	add    BYTE PTR [rax],al
 1004963:	add    BYTE PTR [rcx],al
 1004965:	add    al,0x1
 1004967:	add    BYTE PTR [rdx+rax*2],al
 100496a:	add    BYTE PTR [rax],al
 100496c:	add    DWORD PTR [rdx],ecx
 100496e:	add    al,0x0
 1004970:	or     dh,BYTE PTR [rsi+rax*1]
 1004973:	add    BYTE PTR [rdx],cl
 1004975:	xor    al,BYTE PTR [rsi]
 1004977:	jo     0x100497a
 1004979:	or     al,BYTE PTR [rax+rax*1]
 100497c:	or     dh,BYTE PTR [rsi+rax*1]
 100497f:	add    BYTE PTR [rdx],cl
 1004981:	xor    al,BYTE PTR [rsi]
 1004983:	jo     0x1004986
 1004985:	(bad)  
 1004986:	add    al,BYTE PTR [rax]
 1004988:	(bad)  
 1004989:	xor    al,BYTE PTR [rdx]
 100498b:	push   rax
 100498c:	or     DWORD PTR [rcx+rax*1],eax
 100498f:	add    BYTE PTR [rdx+rax*2],al
 1004992:	add    BYTE PTR [rax],al
 1004994:	adc    al,BYTE PTR [rbp+0x0]
 1004997:	add    BYTE PTR [rcx],al
 1004999:	add    BYTE PTR [rax],al
 100499b:	add    bh,al
 100499d:	add    BYTE PTR [r8],r8b
 10049a0:	cli    
 10049a1:	add    BYTE PTR [r8],r8b
 10049a4:	mov    al,0x48
 10049a6:	add    BYTE PTR [rax],al
 10049a8:	cli    
 10049a9:	add    BYTE PTR [r8],r8b
 10049ac:	add    DWORD PTR [rdx],ecx
 10049ae:	add    al,0x0
 10049b0:	or     dh,BYTE PTR [rax+rcx*1]
 10049b3:	add    BYTE PTR [rdx],cl
 10049b5:	xor    al,BYTE PTR [rsi]
 10049b7:	jo     0x10049d2
 10049b9:	sub    DWORD PTR [rax+rax*1],eax
 10049bc:	sbb    BYTE PTR [rcx],al
 10049be:	(bad)  
 10049bf:	add    eax,DWORD PTR [rbx]
 10049c1:	xor    BYTE PTR [rdx],al
 10049c3:	push   rax
 10049c4:	mov    ah,0x47
 10049c6:	add    BYTE PTR [rax],al
 10049c8:	adc    BYTE PTR [rcx],bl
 10049ca:	add    BYTE PTR [rax],al
 10049cc:	and    DWORD PTR [rax],edx
 10049ce:	add    al,0x0
 10049d0:	adc    BYTE PTR [rsp+rbp*1+0x3],dh
 10049d4:	or     BYTE PTR [rdx+rbp*1+0x3],ah
 10049d8:	mov    al,0x2f
 10049da:	add    BYTE PTR [rax],al
 10049dc:	fldcw  WORD PTR [rdi]
 10049de:	add    BYTE PTR [rax],al
 10049e0:	mov    eax,0x21000049
 10049e5:	or     BYTE PTR [rdx],al
 10049e7:	add    BYTE PTR [rax],cl
 10049e9:	(bad)  
 10049ea:	es add ebx,ecx
 10049ed:	(bad)  
 10049ee:	add    BYTE PTR [rax],al
 10049f0:	pop    rbx
 10049f1:	xor    BYTE PTR [rax],al
 10049f3:	add    ah,cl
 10049f5:	rex.WB add BYTE PTR [r8],al
 10049f8:	and    DWORD PTR [rax],edx
 10049fa:	add    al,0x0
 10049fc:	adc    ah,dh
 10049fe:	and    al,0x3
 1004a00:	or     ah,ah
 1004a02:	and    eax,0x305b03
 1004a07:	add    dl,bl
 1004a09:	xor    BYTE PTR [rax],al
 1004a0b:	add    ah,ah
 1004a0d:	rex.WB add BYTE PTR [r8],al
 1004a10:	and    DWORD PTR [rax],eax
 1004a12:	add    BYTE PTR [rax],al
 1004a14:	pop    rbx
 1004a15:	xor    BYTE PTR [rax],al
 1004a17:	add    dl,bl
 1004a19:	xor    BYTE PTR [rax],al
 1004a1b:	add    ah,ah
 1004a1d:	rex.WB add BYTE PTR [r8],al
 1004a20:	and    DWORD PTR [rax],eax
 1004a22:	add    BYTE PTR [rax],al
 1004a24:	fldcw  WORD PTR [rdi]
 1004a26:	add    BYTE PTR [rax],al
 1004a28:	pop    rbx
 1004a29:	xor    BYTE PTR [rax],al
 1004a2b:	add    ah,cl
 1004a2d:	rex.WB add BYTE PTR [r8],al
 1004a30:	and    DWORD PTR [rax],eax
 1004a32:	add    BYTE PTR [rax],al
 1004a34:	mov    al,0x2f
 1004a36:	add    BYTE PTR [rax],al
 1004a38:	fldcw  WORD PTR [rdi]
 1004a3a:	add    BYTE PTR [rax],al
 1004a3c:	mov    eax,0x21000049
 1004a41:	add    BYTE PTR [rdx],cl
 1004a43:	add    BYTE PTR [rax],al
 1004a45:	hlt    
 1004a46:	and    al,0x3
 1004a48:	add    ah,ah
 1004a4a:	and    eax,0x26c40003
 1004a4f:	add    eax,DWORD PTR [rax]
 1004a51:	je     0x1004a7f
 1004a53:	add    eax,DWORD PTR [rax]
 1004a55:	sub    al,BYTE PTR fs:[rbx]
 1004a58:	mov    al,0x2f
 1004a5a:	add    BYTE PTR [rax],al
 1004a5c:	fldcw  WORD PTR [rdi]
 1004a5e:	add    BYTE PTR [rax],al
 1004a60:	mov    eax,0x1000049
 1004a65:	or     al,BYTE PTR [rax+rax*1]
 1004a68:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 1004a6c:	or     dh,BYTE PTR [rdx]
 1004a6e:	(bad)  
 1004a6f:	jo     0x1004a92
 1004a71:	add    eax,0x34050002
 1004a76:	(bad)  
 1004a77:	add    BYTE PTR [rax],dh
 1004a79:	(bad)  
 1004a7a:	add    BYTE PTR [rax],al
 1004a7c:	pop    rax
 1004a7d:	(bad)  
 1004a7e:	add    BYTE PTR [rax],al
 1004a80:	rex.WX add BYTE PTR fs:[rax],al
 1004a84:	and    DWORD PTR [rax],eax
 1004a86:	add    BYTE PTR [rax],al
 1004a88:	xor    BYTE PTR [rdi],ch
 1004a8a:	add    BYTE PTR [rax],al
 1004a8c:	pop    rax
 1004a8d:	(bad)  
 1004a8e:	add    BYTE PTR [rax],al
 1004a90:	rex.WX add BYTE PTR fs:[rax],al
 1004a94:	sbb    DWORD PTR [rdi],ebx
 1004a96:	add    eax,0xc2340d00
 1004a9b:	add    BYTE PTR [rip+0x600be01],cl        # 0x70108a2
 1004aa1:	jo     0x1004aa3
 1004aa3:	add    BYTE PTR [rdi+rax*2+0x5e00000],dh
 1004aaa:	add    BYTE PTR [rax],al
 1004aac:	sbb    DWORD PTR [rip+0x34130009],esp        # 0x35134abb
 1004ab2:	(bad)  
 1004ab3:	add    DWORD PTR [rbx],edx
 1004ab5:	add    DWORD PTR [rsi],ecx
 1004ab7:	add    DWORD PTR [rax+rsi*8],ecx
 1004aba:	or     ah,al
 1004abc:	or     BYTE PTR [rax+0x7],dh
 1004abf:	(bad)  
 1004ac0:	(bad)  
 1004ac1:	push   rax
 1004ac2:	add    BYTE PTR [rax],al
 1004ac4:	mov    ah,0x47
 1004ac6:	add    BYTE PTR [rax],al
 1004ac8:	(bad)  
 1004ac9:	or     BYTE PTR [rax],al
 1004acb:	add    BYTE PTR [rcx],bl
 1004acd:	(bad)  
 1004ace:	add    eax,0x8e340d00
 1004ad3:	add    BYTE PTR [rip+0x6008c01],cl        # 0x700d6da
 1004ad9:	jo     0x1004adb
 1004adb:	add    BYTE PTR [rdi+rax*2+0x4500000],dh
 1004ae2:	add    BYTE PTR [rax],al
 1004ae4:	sbb    DWORD PTR [rbx],esp
 1004ae6:	add    al,0x0
 1004ae8:	adc    al,BYTE PTR [rcx]
 1004aea:	rex.WRXB add QWORD PTR [r11],r8
 1004aed:	jo     0x1004af1
 1004aef:	push   rax
 1004af0:	mov    ah,0x47
 1004af2:	add    BYTE PTR [rax],al
 1004af4:	(bad)  
 1004af5:	or     al,BYTE PTR [rax]
 1004af7:	add    BYTE PTR [rcx],ah
 1004af9:	or     BYTE PTR [rdx],al
 1004afb:	add    BYTE PTR [rax],cl
 1004afd:	xor    al,0x53
 1004aff:	add    eax,eax
 1004b01:	and    eax,DWORD PTR [rax]
 1004b03:	add    BYTE PTR [rax],dh
 1004b05:	and    al,0x0
 1004b07:	add    ah,ah
 1004b09:	rex.WX add BYTE PTR [rax],al
 1004b0c:	and    DWORD PTR [rax],ecx
 1004b0e:	add    al,BYTE PTR [rax]
 1004b10:	or     BYTE PTR [rsp+rdx*2+0x1],ah
 1004b14:	xor    BYTE PTR [rax+rax*1],ah
 1004b17:	add    BYTE PTR [rax+rbp*1],ch
 1004b1a:	add    BYTE PTR [rax],al
 1004b1c:	clc    
 1004b1d:	rex.WX add BYTE PTR [rax],al
 1004b20:	and    DWORD PTR [rax],ecx
 1004b22:	add    al,BYTE PTR [rax]
 1004b24:	or     ah,ah
 1004b26:	add    QWORD PTR [rax+r13*1],r13
 1004b2a:	add    BYTE PTR [rax],al
 1004b2c:	int3   
 1004b2d:	sub    BYTE PTR [rax],al
 1004b2f:	add    BYTE PTR [rbx+rcx*2],cl
 1004b32:	add    BYTE PTR [rax],al
 1004b34:	and    DWORD PTR [rax],eax
 1004b36:	add    BYTE PTR [rax],al
 1004b38:	sub    al,0x28
 1004b3a:	add    BYTE PTR [rax],al
 1004b3c:	int3   
 1004b3d:	sub    BYTE PTR [rax],al
 1004b3f:	add    BYTE PTR [rbx+rcx*2],cl
 1004b42:	add    BYTE PTR [rax],al
 1004b44:	and    DWORD PTR [rax],eax
 1004b46:	add    BYTE PTR [rax],al
 1004b48:	xor    BYTE PTR [rax+rax*1],ah
 1004b4b:	add    BYTE PTR [rax+rbp*1],ch
 1004b4e:	add    BYTE PTR [rax],al
 1004b50:	clc    
 1004b51:	rex.WX add BYTE PTR [rax],al
 1004b54:	and    DWORD PTR [rax],eax
 1004b56:	add    BYTE PTR [rax],al
 1004b58:	shl    BYTE PTR [rbx],0x0
 1004b5b:	add    BYTE PTR [rax],dh
 1004b5d:	and    al,0x0
 1004b5f:	add    ah,ah
 1004b61:	rex.WX add BYTE PTR [rax],al
 1004b64:	and    DWORD PTR [rax],eax
 1004b66:	(bad)  
 1004b67:	add    BYTE PTR [rax],al
 1004b69:	in     al,0x4e
 1004b6b:	add    DWORD PTR [rax],eax
 1004b6d:	fs push rsp
 1004b6f:	add    DWORD PTR [rax],eax
 1004b71:	xor    al,0x53
 1004b73:	add    eax,eax
 1004b75:	and    eax,DWORD PTR [rax]
 1004b77:	add    BYTE PTR [rax],dh
 1004b79:	and    al,0x0
 1004b7b:	add    ah,ah
 1004b7d:	rex.WX add BYTE PTR [rax],al
 1004b80:	and    DWORD PTR [rax],eax
 1004b82:	add    al,BYTE PTR [rax]
 1004b84:	add    BYTE PTR [rbx+rdx*2],dh
 1004b87:	add    eax,eax
 1004b89:	and    eax,DWORD PTR [rax]
 1004b8b:	add    BYTE PTR [rax],dh
 1004b8d:	and    al,0x0
 1004b8f:	add    ah,ah
 1004b91:	rex.WX add BYTE PTR [rax],al
 1004b94:	and    DWORD PTR [rax],eax
 1004b96:	add    BYTE PTR [rax],al
 1004b98:	shl    BYTE PTR [rbx],0x0
 1004b9b:	add    BYTE PTR [rax],dh
 1004b9d:	and    al,0x0
 1004b9f:	add    ah,ah
 1004ba1:	rex.WX add BYTE PTR [rax],al
 1004ba4:	sbb    DWORD PTR [rip+0x10b0003],ebx        # 0x20b4bad
 1004baa:	push   rsi
 1004bab:	add    BYTE PTR [rax+rsi*1],al
 1004bae:	add    BYTE PTR [rax],al
 1004bb0:	mov    ah,0x47
 1004bb2:	add    BYTE PTR [rax],al
 1004bb4:	nop
 1004bb5:	add    al,BYTE PTR [rax]
 1004bb7:	add    BYTE PTR [rcx],ah
 1004bb9:	or     eax,DWORD PTR [rax+rax*1]
 1004bbc:	or     esp,DWORD PTR [rbp+rdx*2+0x0]
 1004bc0:	add    al,0x54
 1004bc2:	pop    rdx
 1004bc3:	add    BYTE PTR [rax],al
 1004bc5:	and    al,BYTE PTR [rax]
 1004bc7:	add    BYTE PTR [rip+0xffffffffa4000022],bl        # 0xffffffffa5004bef
 1004bcd:	rex.WXB add BYTE PTR [r8],al
 1004bd0:	and    DWORD PTR [rax],ecx
 1004bd2:	add    al,BYTE PTR [rax]
 1004bd4:	or     BYTE PTR [rsp+rdx*2+0x0],dh
 1004bd8:	sbb    eax,0xc0000022
 1004bdd:	and    al,BYTE PTR [rax]
 1004bdf:	add    BYTE PTR [rax+0x2100004b],bh
 1004be5:	add    BYTE PTR [rax],al
 1004be7:	add    BYTE PTR [rip+0xffffffffc0000022],bl        # 0xffffffffc1004c0f
 1004bed:	and    al,BYTE PTR [rax]
 1004bef:	add    BYTE PTR [rax+0x2100004b],bh
 1004bf5:	add    BYTE PTR [rax],al
 1004bf7:	add    BYTE PTR [rax],al
 1004bf9:	and    al,BYTE PTR [rax]
 1004bfb:	add    BYTE PTR [rip+0xffffffffa4000022],bl        # 0xffffffffa5004c23
 1004c01:	rex.WXB add BYTE PTR [r8],al
 1004c04:	sbb    DWORD PTR [rdx],esi
 1004c06:	add    al,0x0
 1004c08:	and    BYTE PTR [rcx],al
 1004c0a:	add    eax,0x18701901
 1004c0f:	(bad)  
 1004c10:	mov    ah,0x47
 1004c12:	add    BYTE PTR [rax],al
 1004c14:	adc    BYTE PTR [rax],cl
 1004c16:	add    BYTE PTR [rax],al
 1004c18:	and    DWORD PTR [rdx+rax*1],eax
 1004c1b:	add    BYTE PTR [rsp+rsi*1],al
 1004c1e:	add    al,0x1
 1004c20:	loopne 0x1004c42
 1004c22:	add    BYTE PTR [rax],al
 1004c24:	sub    BYTE PTR [rcx],ah
 1004c26:	add    BYTE PTR [rax],al
 1004c28:	add    al,0x4c
 1004c2a:	add    BYTE PTR [rax],al
 1004c2c:	and    DWORD PTR [rax],eax
 1004c2e:	add    BYTE PTR [rax],al
 1004c30:	loopne 0x1004c52
 1004c32:	add    BYTE PTR [rax],al
 1004c34:	sub    BYTE PTR [rcx],ah
 1004c36:	add    BYTE PTR [rax],al
 1004c38:	add    al,0x4c
 1004c3a:	add    BYTE PTR [rax],al
 1004c3c:	add    DWORD PTR [rdx],edx
 1004c3e:	add    DWORD PTR [rax],eax
 1004c40:	adc    ah,BYTE PTR [rdx+0x0]
 1004c43:	add    BYTE PTR [rcx],al
 1004c45:	or     al,BYTE PTR [rdx]
 1004c47:	add    BYTE PTR [rdx],cl
 1004c49:	jb     0x1004c51
 1004c4b:	xor    BYTE PTR [rcx],al
 1004c4d:	(bad)  
 1004c4e:	add    al,BYTE PTR [rax]
 1004c50:	(bad)  
 1004c51:	xor    al,BYTE PTR [rdx]
 1004c53:	xor    BYTE PTR [rcx],bl
 1004c55:	sub    BYTE PTR [rdi],al
 1004c57:	add    BYTE PTR [rdi],dl
 1004c59:	add    esi,edx
 1004c5b:	add    BYTE PTR [rax],cl
 1004c5d:	lock (bad) 
 1004c5f:	loopne 0x1004c65
 1004c61:	(bad)  
 1004c62:	add    esi,DWORD PTR [rax]
 1004c64:	add    dl,BYTE PTR [rax+0x0]
 1004c67:	add    BYTE PTR [rdi+rax*2+0x6a00000],dh
 1004c6e:	add    BYTE PTR [rax],al
 1004c70:	and    DWORD PTR [rax],ecx
 1004c72:	add    al,BYTE PTR [rax]
 1004c74:	or     BYTE PTR [rsi+rbx*8+0x0],dh
 1004c78:	sbb    al,0x0
 1004c7b:	add    dl,bh
 1004c7d:	sbb    al,0x0
 1004c7f:	add    BYTE PTR [rsp+rcx*2+0x0],dl
 1004c83:	add    BYTE PTR [rcx],ah
 1004c85:	add    BYTE PTR [rax],al
 1004c87:	add    BYTE PTR [rax+0x1c],al
 1004c8a:	add    BYTE PTR [rax],al
 1004c8c:	cli    
 1004c8d:	sbb    al,0x0
 1004c8f:	add    BYTE PTR [rsp+rcx*2+0x0],dl
 1004c93:	add    BYTE PTR [rcx],al
 1004c95:	adc    BYTE PTR [rbx],al
 1004c97:	add    BYTE PTR [rax],dl
 1004c99:	rex.X or al,0x60
 1004c9c:	or     esi,DWORD PTR [rax]
 1004c9e:	add    BYTE PTR [rax],al
 1004ca0:	and    DWORD PTR [rip+0x74050002],eax        # 0x75054ca8
 1004ca6:	add    al,0x0
 1004ca8:	mov    al,0x1b
 1004caa:	add    BYTE PTR [rax],al
 1004cac:	ficomp WORD PTR [rbx]
 1004cae:	add    BYTE PTR [rax],al
 1004cb0:	xchg   esp,eax
 1004cb1:	rex.WR add BYTE PTR [rax],r8b
 1004cb4:	and    DWORD PTR [rax],eax
 1004cb6:	add    al,BYTE PTR [rax]
 1004cb8:	add    BYTE PTR [rsp+rax*1+0x0],dh
 1004cbc:	mov    al,0x1b
 1004cbe:	add    BYTE PTR [rax],al
 1004cc0:	ficomp WORD PTR [rbx]
 1004cc2:	add    BYTE PTR [rax],al
 1004cc4:	xchg   esp,eax
 1004cc5:	rex.WR add BYTE PTR [rax],r8b
 1004cc8:	and    DWORD PTR [rax],eax
 1004cca:	add    BYTE PTR [rax],al
 1004ccc:	mov    al,0x1b
 1004cce:	add    BYTE PTR [rax],al
 1004cd0:	ficomp WORD PTR [rbx]
 1004cd2:	add    BYTE PTR [rax],al
 1004cd4:	xchg   esp,eax
 1004cd5:	rex.WR add BYTE PTR [rax],r8b
 1004cd8:	add    DWORD PTR [rsi],eax
 1004cda:	add    al,BYTE PTR [rax]
 1004cdc:	(bad)  
 1004cdd:	xor    al,BYTE PTR [rdx]
 1004cdf:	xor    BYTE PTR [rcx],al
 1004ce1:	add    al,0x1
 1004ce3:	add    BYTE PTR [rdx+rax*2],al
 1004ce6:	add    BYTE PTR [rax],al
 1004ce8:	add    DWORD PTR [rcx+rax*1],eax
 1004ceb:	add    BYTE PTR [rdx+rdx*1],al
 1004cee:	add    BYTE PTR [rax],al
 1004cf0:	rex
 1004cf1:	rex.WRB add BYTE PTR [r8],r8b
	...
 1004cfc:	push   rax
 1004cfd:	push   rax
 1004cfe:	add    BYTE PTR [rax],al
 1004d00:	add    BYTE PTR [rax],dl
 1004d02:	add    BYTE PTR [rax],al
 1004d04:	nop
 1004d05:	rex.WRB add BYTE PTR [r8],r8b
	...
 1004d10:	jbe    0x1004d63
 1004d12:	add    BYTE PTR [rax],al
 1004d14:	push   rax
 1004d15:	adc    BYTE PTR [rax],al
 1004d17:	add    BYTE PTR [rax+0x4e],dl
 1004d1d:	add    BYTE PTR [rax],al
 1004d1f:	add    BYTE PTR [rax],al
 1004d21:	add    BYTE PTR [rax],al
 1004d23:	add    dl,dl
 1004d25:	push   rdx
 1004d26:	add    BYTE PTR [rax],al
 1004d28:	push   rax
 1004d29:	adc    DWORD PTR [rax],eax
	...
 1004d3f:	add    BYTE PTR [rax+0x4f],ah
 1004d45:	add    BYTE PTR [rax],al
 1004d47:	add    BYTE PTR [rdi+rcx*2+0x0],dh
 1004d4e:	add    BYTE PTR [rax],al
 1004d50:	(bad)  
 1004d51:	rex.WRXB add BYTE PTR [r8],r8b
 1004d54:	add    BYTE PTR [rax],al
 1004d56:	add    BYTE PTR [rax],al
 1004d58:	in     al,0x4f
 1004d5a:	add    BYTE PTR [rax],al
 1004d5c:	add    BYTE PTR [rax],al
 1004d5e:	add    BYTE PTR [rax],al
 1004d60:	clc    
 1004d61:	rex.WRXB add BYTE PTR [r8],r8b
 1004d64:	add    BYTE PTR [rax],al
 1004d66:	add    BYTE PTR [rax],al
 1004d68:	or     BYTE PTR [rax+0x0],dl
 1004d6b:	add    BYTE PTR [rax],al
 1004d6d:	add    BYTE PTR [rax],al
 1004d6f:	add    BYTE PTR [rax],bl
 1004d71:	push   rax
 1004d72:	add    BYTE PTR [rax],al
 1004d74:	add    BYTE PTR [rax],al
 1004d76:	add    BYTE PTR [rax],al
 1004d78:	sub    BYTE PTR [rax+0x0],dl
 1004d7b:	add    BYTE PTR [rax],al
 1004d7d:	add    BYTE PTR [rax],al
 1004d7f:	add    BYTE PTR [rdx+0x50],al
	...
 1004d8e:	add    BYTE PTR [rax],al
 1004d90:	pop    rsi
 1004d91:	push   rax
 1004d92:	add    BYTE PTR [rax],al
 1004d94:	add    BYTE PTR [rax],al
 1004d96:	add    BYTE PTR [rax],al
 1004d98:	jo     0x1004dea
 1004d9a:	add    BYTE PTR [rax],al
 1004d9c:	add    BYTE PTR [rax],al
 1004d9e:	add    BYTE PTR [rax],al
 1004da0:	jle    0x1004df2
 1004da2:	add    BYTE PTR [rax],al
 1004da4:	add    BYTE PTR [rax],al
 1004da6:	add    BYTE PTR [rax],al
 1004da8:	nop
 1004da9:	push   rax
 1004daa:	add    BYTE PTR [rax],al
 1004dac:	add    BYTE PTR [rax],al
 1004dae:	add    BYTE PTR [rax],al
 1004db0:	movabs al,ds:0xb800000000000050
 1004db9:	push   rax
 1004dba:	add    BYTE PTR [rax],al
 1004dbc:	add    BYTE PTR [rax],al
 1004dbe:	add    BYTE PTR [rax],al
 1004dc0:	retf   0x50
 1004dc3:	add    BYTE PTR [rax],al
 1004dc5:	add    BYTE PTR [rax],al
 1004dc7:	add    ah,bl
 1004dc9:	push   rax
 1004dca:	add    BYTE PTR [rax],al
 1004dcc:	add    BYTE PTR [rax],al
 1004dce:	add    BYTE PTR [rax],al
 1004dd0:	hlt    
 1004dd1:	push   rax
 1004dd2:	add    BYTE PTR [rax],al
 1004dd4:	add    BYTE PTR [rax],al
 1004dd6:	add    BYTE PTR [rax],al
 1004dd8:	or     dl,BYTE PTR [rcx+0x0]
 1004ddb:	add    BYTE PTR [rax],al
 1004ddd:	add    BYTE PTR [rax],al
 1004ddf:	add    BYTE PTR [rdx],bl
 1004de1:	push   rcx
 1004de2:	add    BYTE PTR [rax],al
 1004de4:	add    BYTE PTR [rax],al
 1004de6:	add    BYTE PTR [rax],al
 1004de8:	sub    al,0x51
 1004dea:	add    BYTE PTR [rax],al
 1004dec:	add    BYTE PTR [rax],al
 1004dee:	add    BYTE PTR [rax],al
 1004df0:	cmp    dl,BYTE PTR [rcx+0x0]
 1004df3:	add    BYTE PTR [rax],al
 1004df5:	add    BYTE PTR [rax],al
 1004df7:	add    BYTE PTR [rax+0x51],dl
 1004dfa:	add    BYTE PTR [rax],al
 1004dfc:	add    BYTE PTR [rax],al
 1004dfe:	add    BYTE PTR [rax],al
 1004e00:	push   0x51
 1004e02:	add    BYTE PTR [rax],al
 1004e04:	add    BYTE PTR [rax],al
 1004e06:	add    BYTE PTR [rax],al
 1004e08:	push   rsp
 1004e09:	push   rsp
 1004e0a:	add    BYTE PTR [rax],al
 1004e0c:	add    BYTE PTR [rax],al
 1004e0e:	add    BYTE PTR [rax],al
 1004e10:	ds push rsp
 1004e12:	add    BYTE PTR [rax],al
 1004e14:	add    BYTE PTR [rax],al
 1004e16:	add    BYTE PTR [rax],al
 1004e18:	cs push rsp
 1004e1a:	add    BYTE PTR [rax],al
 1004e1c:	add    BYTE PTR [rax],al
 1004e1e:	add    BYTE PTR [rax],al
 1004e20:	adc    al,0x54
 1004e22:	add    BYTE PTR [rax],al
 1004e24:	add    BYTE PTR [rax],al
 1004e26:	add    BYTE PTR [rax],al
 1004e28:	add    al,0x54
 1004e2a:	add    BYTE PTR [rax],al
 1004e2c:	add    BYTE PTR [rax],al
 1004e2e:	add    BYTE PTR [rax],al
 1004e30:	lock push rbx
 1004e32:	add    BYTE PTR [rax],al
 1004e34:	add    BYTE PTR [rax],al
 1004e36:	add    BYTE PTR [rax],al
 1004e38:	(bad)  
 1004e39:	push   rbx
 1004e3a:	add    BYTE PTR [rax],al
 1004e3c:	add    BYTE PTR [rax],al
 1004e3e:	add    BYTE PTR [rax],al
 1004e40:	ret    0x53
 1004e43:	add    BYTE PTR [rax],al
 1004e45:	add    BYTE PTR [rax],al
 1004e47:	add    BYTE PTR [rsi+0x53],ch
 1004e4d:	add    BYTE PTR [rax],al
 1004e4f:	add    BYTE PTR [rax+0x53],dl
 1004e55:	add    BYTE PTR [rax],al
 1004e57:	add    BYTE PTR [rbx+rdx*2+0x0],dh
 1004e5b:	add    BYTE PTR [rax],al
 1004e5d:	add    BYTE PTR [rax],al
 1004e5f:	add    BYTE PTR [rdx+0x54],ch
 1004e62:	add    BYTE PTR [rax],al
 1004e64:	add    BYTE PTR [rax],al
 1004e66:	add    BYTE PTR [rax],al
 1004e68:	(bad)  
 1004e69:	push   rbx
 1004e6a:	add    BYTE PTR [rax],al
 1004e6c:	add    BYTE PTR [rax],al
 1004e6e:	add    BYTE PTR [rax],al
 1004e70:	rex.WR push rbx
 1004e72:	add    BYTE PTR [rax],al
 1004e74:	add    BYTE PTR [rax],al
 1004e76:	add    BYTE PTR [rax],al
 1004e78:	cmp    al,0x53
 1004e7a:	add    BYTE PTR [rax],al
 1004e7c:	add    BYTE PTR [rax],al
 1004e7e:	add    BYTE PTR [rax],al
 1004e80:	xor    al,0x53
	...
 1004e8e:	add    BYTE PTR [rax],al
 1004e90:	push   rax
 1004e91:	push   rdx
 1004e92:	add    BYTE PTR [rax],al
 1004e94:	add    BYTE PTR [rax],al
 1004e96:	add    BYTE PTR [rax],al
 1004e98:	pop    rax
 1004e99:	push   rdx
 1004e9a:	add    BYTE PTR [rax],al
 1004e9c:	add    BYTE PTR [rax],al
 1004e9e:	add    BYTE PTR [rax],al
 1004ea0:	push   dx
 1004ea2:	add    BYTE PTR [rax],al
 1004ea4:	add    BYTE PTR [rax],al
 1004ea6:	add    BYTE PTR [rax],al
 1004ea8:	jb     0x1004efc
 1004eaa:	add    BYTE PTR [rax],al
 1004eac:	add    BYTE PTR [rax],al
 1004eae:	add    BYTE PTR [rax],al
 1004eb0:	adc    BYTE PTR [rdx+0x0],0x0
 1004eb4:	add    BYTE PTR [rax],al
 1004eb6:	add    BYTE PTR [rax],al
 1004eb8:	xchg   esi,eax
 1004eb9:	push   rdx
 1004eba:	add    BYTE PTR [rax],al
 1004ebc:	add    BYTE PTR [rax],al
 1004ebe:	add    BYTE PTR [rax],al
 1004ec0:	stos   BYTE PTR es:[rdi],al
 1004ec1:	push   rdx
 1004ec2:	add    BYTE PTR [rax],al
 1004ec4:	add    BYTE PTR [rax],al
 1004ec6:	add    BYTE PTR [rax],al
 1004ec8:	mov    dh,0x52
 1004eca:	add    BYTE PTR [rax],al
 1004ecc:	add    BYTE PTR [rax],al
 1004ece:	add    BYTE PTR [rax],al
 1004ed0:	rcl    BYTE PTR [rdx+0x0],0x0
 1004ed4:	add    BYTE PTR [rax],al
 1004ed6:	add    BYTE PTR [rax],al
 1004ed8:	loopne 0x1004f2c
 1004eda:	add    BYTE PTR [rax],al
 1004edc:	add    BYTE PTR [rax],al
 1004ede:	add    BYTE PTR [rax],al
 1004ee0:	not    BYTE PTR [rdx+0x0]
 1004ee3:	add    BYTE PTR [rax],al
 1004ee5:	add    BYTE PTR [rax],al
 1004ee7:	add    BYTE PTR [rdx],cl
 1004ee9:	push   rbx
 1004eea:	add    BYTE PTR [rax],al
 1004eec:	add    BYTE PTR [rax],al
 1004eee:	add    BYTE PTR [rax],al
 1004ef0:	adc    al,0x53
 1004ef2:	add    BYTE PTR [rax],al
 1004ef4:	add    BYTE PTR [rax],al
 1004ef6:	add    BYTE PTR [rax],al
 1004ef8:	and    dl,BYTE PTR [rbx+0x0]
 1004efb:	add    BYTE PTR [rax],al
 1004efd:	add    BYTE PTR [rax],al
 1004eff:	add    BYTE PTR [rdx],ch
 1004f01:	push   rbx
 1004f02:	add    BYTE PTR [rax],al
 1004f04:	add    BYTE PTR [rax],al
 1004f06:	add    BYTE PTR [rax],al
 1004f08:	rex.RX push rdx
 1004f0a:	add    BYTE PTR [rax],al
 1004f0c:	add    BYTE PTR [rax],al
 1004f0e:	add    BYTE PTR [rax],al
 1004f10:	ds push rdx
 1004f12:	add    BYTE PTR [rax],al
 1004f14:	add    BYTE PTR [rax],al
 1004f16:	add    BYTE PTR [rax],al
 1004f18:	xor    BYTE PTR [rdx+0x0],dl
 1004f1b:	add    BYTE PTR [rax],al
 1004f1d:	add    BYTE PTR [rax],al
 1004f1f:	add    BYTE PTR [rax],bl
 1004f21:	push   rdx
 1004f22:	add    BYTE PTR [rax],al
 1004f24:	add    BYTE PTR [rax],al
 1004f26:	add    BYTE PTR [rax],al
 1004f28:	clc    
 1004f29:	push   rcx
 1004f2a:	add    BYTE PTR [rax],al
 1004f2c:	add    BYTE PTR [rax],al
 1004f2e:	add    BYTE PTR [rax],al
 1004f30:	(bad)  
 1004f31:	push   rcx
 1004f32:	add    BYTE PTR [rax],al
 1004f34:	add    BYTE PTR [rax],al
 1004f36:	add    BYTE PTR [rax],al
 1004f38:	fcom   QWORD PTR [rcx+0x0]
 1004f3b:	add    BYTE PTR [rax],al
 1004f3d:	add    BYTE PTR [rax],al
 1004f3f:	add    dl,dl
 1004f41:	push   rcx
 1004f42:	add    BYTE PTR [rax],al
 1004f44:	add    BYTE PTR [rax],al
 1004f46:	add    BYTE PTR [rax],al
 1004f48:	enter  0x51,0x0
 1004f4c:	add    BYTE PTR [rax],al
 1004f4e:	add    BYTE PTR [rax],al
 1004f50:	mov    edx,0x51
 1004f55:	add    BYTE PTR [rax],al
 1004f57:	add    BYTE PTR [rax+0x51],dh
 1004f5d:	add    BYTE PTR [rax],al
 1004f5f:	add    BYTE PTR [rax+0x51],ch
 1004f65:	add    BYTE PTR [rax],al
 1004f67:	add    BYTE PTR [rcx+rdx*2+0x0],bl
 1004f6e:	add    BYTE PTR [rax],al
 1004f70:	nop
 1004f71:	push   rcx
 1004f72:	add    BYTE PTR [rax],al
 1004f74:	add    BYTE PTR [rax],al
 1004f76:	add    BYTE PTR [rax],al
 1004f78:	test   BYTE PTR [rcx+0x0],dl
 1004f7b:	add    BYTE PTR [rax],al
 1004f7d:	add    BYTE PTR [rax],al
 1004f7f:	add    BYTE PTR [rsi],al
 1004f81:	push   rdx
 1004f82:	add    BYTE PTR [rax],al
 1004f84:	add    BYTE PTR [rax],al
 1004f86:	add    BYTE PTR [rax],al
 1004f88:	test   BYTE PTR [rax+rax*1+0x0],dl
 1004f8c:	add    BYTE PTR [rax],al
 1004f8e:	add    BYTE PTR [rax],al
 1004f90:	mov    ss,WORD PTR [rax+rax*1+0x0]
	...
 1004fa0:	outs   dx,BYTE PTR ds:[rsi]
 1004fa1:	add    dl,BYTE PTR [rdx+0x65]
 1004fa4:	addr32 push rcx
 1004fa6:	jne    0x100500d
 1004fa8:	jb     0x1005023
 1004faa:	push   rsi
 1004fab:	(bad)  
 1004fac:	ins    BYTE PTR es:[rdi],dx
 1004fad:	jne    0x1005014
 1004faf:	rex.RB js 0x1005009
 1004fb2:	add    BYTE PTR [rax],al
 1004fb4:	je     0x1004fb6
 1004fb6:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1004fb8:	outs   dx,BYTE PTR ds:[rsi]
 1004fb9:	jbe    0x1005020
 1004fbb:	jb     0x1005031
 1004fbd:	push   rbx
 1004fbe:	je     0x1005032
 1004fc0:	imul   ebp,DWORD PTR [rsi+0x67],0x54646953
 1004fc7:	outs   dx,DWORD PTR ds:[rsi]
 1004fc8:	push   rbx
 1004fc9:	imul   esp,DWORD PTR [rdi+rdx*2+0x0],0x4c018f00
 1004fd1:	outs   dx,DWORD PTR ds:[rsi]
 1004fd2:	outs   dx,DWORD PTR ds:[rsi]
 1004fd3:	imul   esi,DWORD PTR [rbp+0x70],0x41
 1004fd7:	movsxd esp,DWORD PTR [rbx+0x6f]
 1004fda:	jne    0x100504a
 1004fdc:	je     0x100502c
 1004fde:	(bad)  
 1004fdf:	ins    DWORD PTR es:[rdi],dx
 1004fe0:	gs push rdi
 1004fe2:	add    BYTE PTR [rax],al
 1004fe4:	xchg   ecx,eax
 1004fe5:	add    DWORD PTR [rdi+rbp*2+0x6f],ecx
 1004fe9:	imul   esi,DWORD PTR [rbp+0x70],0x41
 1004fed:	movsxd esp,DWORD PTR [rbx+0x6f]
 1004ff0:	jne    0x1005060
 1004ff2:	je     0x1005047
 1004ff4:	imul   esp,DWORD PTR [rdi+rdx*2+0x0],0x65520256
 1004ffc:	addr32 rex.RXB
 1004ffe:	gs je  0x1005057
 1005001:	(bad)  
 1005002:	ins    BYTE PTR es:[rdi],dx
 1005003:	jne    0x100506a
 1005005:	push   rdi
 1005006:	add    BYTE PTR [rax],al
 1005008:	(bad)  
 1005009:	add    dl,BYTE PTR [rdx+0x65]
 100500c:	addr32 rex.WRXB jo 0x1005075
 1005010:	outs   dx,BYTE PTR ds:[rsi]
 1005011:	rex.WXB
 1005012:	gs jns 0x100505a
 1005015:	js     0x100506e
 1005017:	add    BYTE PTR [rdi+0x2],cl
 100501a:	push   rdx
 100501b:	rex.RB outs dx,BYTE PTR gs:[esi]
 100501f:	jne    0x100508e
 1005021:	rex.WXB
 1005022:	gs jns 0x100506a
 1005025:	js     0x100507e
 1005027:	add    BYTE PTR [rax+rax*1+0x43],ch
 100502b:	outs   dx,DWORD PTR ds:[rsi]
 100502c:	outs   dx,BYTE PTR ds:[rsi]
 100502d:	jbe    0x1005094
 100502f:	jb     0x10050a5
 1005031:	push   rbx
 1005032:	imul   esp,DWORD PTR [rsp+rdx*2+0x6f],0x69727453
 100503a:	outs   dx,BYTE PTR ds:[rsi]
 100503b:	addr32 push rbx
 100503d:	imul   esp,DWORD PTR [rdi+rdx*2+0x0],0x52023000
 1005045:	gs rex.XB ins BYTE PTR es:[edi],dx
 1005049:	outs   dx,DWORD PTR ds:[rsi]
 100504a:	jae    0x10050b1
 100504c:	rex.WXB
 100504d:	gs jns 0x1005050
 1005050:	rex.B
 1005051:	rex.R push rsi
 1005053:	push   r8
 1005055:	xor    rsi,QWORD PTR [r10]
 1005058:	cs fs ins BYTE PTR es:[rdi],dx
 100505b:	ins    BYTE PTR es:[rdi],dx
 100505c:	add    BYTE PTR [rax],al
 100505e:	iret   
 100505f:	add    DWORD PTR [rdi+0x65],eax
 1005062:	je     0x10050a8
 1005064:	(bad)  
 1005065:	je     0x10050cc
 1005067:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1005069:	jb     0x10050d8
 100506b:	(bad)  
 100506c:	je     0x10050c5
 100506e:	add    BYTE PTR [rax],al
 1005070:	push   0x65724601
 1005075:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 100507e:	rex add ecx,DWORD PTR [rdi+rbp*2+0x61]
 1005083:	imul   r12,QWORD PTR fs:[rdx+0x72],0x45797261
 100508c:	js     0x10050e5
 100508e:	add    BYTE PTR [rax],al
 1005090:	add    ecx,DWORD PTR [r15+rbp*2+0x61]
 1005095:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 100509e:	add    BYTE PTR [rax],al
 10050a0:	movsxd eax,DWORD PTR [rax]
 10050a2:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10050a4:	ins    DWORD PTR es:[rdi],dx
 10050a5:	jo     0x1005108
 10050a7:	jb     0x100510e
 10050a9:	push   rbx
 10050aa:	je     0x100511e
 10050ac:	imul   ebp,DWORD PTR [rsi+0x67],0x6964724f
 10050b3:	outs   dx,BYTE PTR ds:[rsi]
 10050b4:	(bad)  
 10050b5:	ins    BYTE PTR es:[rdi],dx
 10050b6:	add    BYTE PTR [rax],al
 10050b8:	add    DWORD PTR fs:[rsi+0x6f],eax
 10050bc:	jb     0x100512b
 10050be:	(bad)  
 10050bf:	je     0x100510e
 10050c1:	gs jae 0x1005137
 10050c4:	(bad)  
 10050c5:	addr32 gs push rdi
 10050c8:	add    BYTE PTR [rax],al
 10050ca:	sahf   
 10050cb:	add    al,BYTE PTR [rdi+0x65]
 10050ce:	je     0x1005124
 10050d0:	imul   ebp,DWORD PTR [rbp+0x65],0x6d726f46
 10050d7:	(bad)  
 10050d8:	je     0x1005131
 10050da:	add    BYTE PTR [rax],al
 10050dc:	sub    eax,DWORD PTR [rcx]
 10050de:	imul   r13d,DWORD PTR [rbp+r12*2+0x54],0x54656d69
 10050e7:	outs   dx,DWORD PTR ds:[rsi]
 10050e8:	push   rbx
 10050e9:	jns    0x100515e
 10050eb:	je     0x1005152
 10050ed:	ins    DWORD PTR es:[rdi],dx
 10050ee:	push   rsp
 10050ef:	imul   ebp,DWORD PTR [rbp+0x65],0x21a0000
 10050f6:	rex.RXB
 10050f7:	gs je  0x1005147
 10050fa:	outs   dx,DWORD PTR ds:[rsi]
 10050fb:	fs jne 0x100516a
 10050fe:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 1005108:	add    BYTE PTR [rax],al
 100510a:	or     BYTE PTR [rdx],al
 100510c:	rex.RXB
 100510d:	gs je  0x100515c
 1005110:	(bad)  
 1005111:	jae    0x1005187
 1005113:	rex.RB jb 0x1005188
 1005116:	outs   dx,DWORD PTR ds:[rsi]
 1005117:	jb     0x1005119
 1005119:	add    BYTE PTR [rdx+rax*1+0x47],cl
 100511d:	gs je  0x1005170
 1005120:	jb     0x1005191
 1005122:	movsxd eax,DWORD PTR [rcx+0x64]
 1005125:	fs jb  0x100518d
 1005128:	jae    0x100519d
 100512a:	add    BYTE PTR [rax],al
 100512c:	add    r9d,DWORD PTR [rdi+r13*2+0x63]
 1005131:	(bad)  
 1005132:	ins    BYTE PTR es:[rdi],dx
 1005133:	rex.B ins BYTE PTR es:[rdi],dx
 1005135:	ins    BYTE PTR es:[rdi],dx
 1005136:	outs   dx,DWORD PTR ds:[rsi]
 1005137:	movsxd eax,DWORD PTR [rax]
 1005139:	add    bl,bl
 100513b:	add    cl,BYTE PTR [rax+0x65]
 100513e:	(bad)  
 100513f:	jo     0x1005194
 1005141:	gs je  0x100518d
 1005144:	outs   dx,BYTE PTR ds:[rsi]
 1005145:	outs   dx,WORD PTR ds:[rsi]
 1005147:	jb     0x10051b6
 1005149:	(bad)  
 100514a:	je     0x10051b5
 100514c:	outs   dx,DWORD PTR ds:[rsi]
 100514d:	outs   dx,BYTE PTR ds:[rsi]
 100514e:	add    BYTE PTR [rax],al
 1005150:	sub    al,BYTE PTR [rcx]
 1005152:	imul   r13d,DWORD PTR [rbp+r12*2+0x54],0x54656d69
 100515b:	outs   dx,DWORD PTR ds:[rsi]
 100515c:	rex.WR outs dx,DWORD PTR ds:[rsi]
 100515e:	movsxd esp,DWORD PTR [rcx+0x6c]
 1005161:	imul   r13d,DWORD PTR [rbp+r12*2+0x54],0x656d69
 100516a:	add    rcx,QWORD PTR [rdi+r13*2+0x63]
 100516f:	(bad)  
 1005170:	ins    BYTE PTR es:[rdi],dx
 1005171:	rex.RX jb 0x10051d9
 1005174:	add    BYTE PTR gs:[rbx+0x45],cl
 1005178:	push   rdx
 1005179:	rex.WRX
 100517a:	rex.RB
 100517b:	xor    r14,QWORD PTR [rdx]
 100517e:	cs fs ins BYTE PTR es:[rdi],dx
 1005181:	ins    BYTE PTR es:[rdi],dx
 1005182:	add    BYTE PTR [rax],al
 1005184:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1005185:	add    al,0x5f
 1005187:	ja     0x10051ec
 1005189:	jae    0x10051f4
 100518b:	movsxd ebp,DWORD PTR [rbp+0x70]
 100518e:	add    BYTE PTR [rax],al
 1005190:	inc    DWORD PTR [rip+0x6c776f74]        # 0x6d77c10a
 1005196:	outs   dx,DWORD PTR ds:[rsi]
 1005197:	ja     0x10051fe
 1005199:	jb     0x100519b
 100519b:	add    BYTE PTR [rbp+rax*1+0x66],ch
 100519f:	ja     0x1005211
 10051a1:	jb     0x100520c
 10051a3:	outs   dx,BYTE PTR ds:[rsi]
 10051a4:	je     0x100520c
 10051a6:	add    BYTE PTR [rax],al
 10051a8:	movsxd eax,DWORD PTR [rip+0x65657266]        # 0x6665c414
 10051ae:	add    BYTE PTR [rax],al
 10051b0:	sahf   
 10051b1:	add    eax,0x6c6c616d
 10051b6:	outs   dx,DWORD PTR ds:[rsi]
 10051b7:	movsxd eax,DWORD PTR [rax]
 10051b9:	add    BYTE PTR [rcx+rax*1+0x5f],dl
 10051bd:	pop    rdi
 10051be:	imul   ebp,DWORD PTR [rdi+0x62],0x6e75665f
 10051c5:	movsxd eax,DWORD PTR [rax]
 10051c7:	add    BYTE PTR [rbx],dh
 10051c9:	(bad)  
 10051ca:	ja     0x100523c
 10051cc:	jb     0x1005237
 10051ce:	outs   dx,BYTE PTR ds:[rsi]
 10051cf:	je     0x1005237
 10051d1:	add    BYTE PTR [rcx],ah
 10051d3:	(bad)  
 10051d4:	ja     0x1005239
 10051d6:	jae    0x100524a
 10051d8:	movsxd ebp,DWORD PTR [rax+0x72]
 10051db:	add    BYTE PTR [rbp+0x73765f04],al
 10051e1:	outs   dx,BYTE PTR ds:[rsi]
 10051e2:	ja     0x1005254
 10051e4:	jb     0x100524f
 10051e6:	outs   dx,BYTE PTR ds:[rsi]
 10051e7:	je     0x100524f
 10051e9:	add    BYTE PTR [rbx],al
 10051eb:	add    eax,0x6573775f
 10051f0:	je     0x100525e
 10051f2:	outs   dx,DWORD PTR ds:[rsi]
 10051f3:	movsxd esp,DWORD PTR [rcx+0x6c]
 10051f6:	add    BYTE PTR gs:[rsi+0x6d615f01],bl
 10051fd:	jae    0x1005266
 10051ff:	pop    rdi
 1005200:	gs js  0x100526c
 1005203:	je     0x1005205
 1005205:	add    BYTE PTR [rax+0x775f5f01],dl
 100520b:	addr32 gs je 0x100527c
 100520f:	(bad)  
 1005210:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 1005217:	add    BYTE PTR [rsi],bl
 1005219:	add    DWORD PTR [rdi+0x5f],ebx
 100521c:	rex.XB pop r15
 100521e:	jae    0x1005290
 1005220:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 1005224:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 100522b:	ins    BYTE PTR es:[rdi],dx
 100522c:	gs jb  0x100522f
 100522f:	add    BYTE PTR [rdx],bl
 1005231:	add    DWORD PTR [rdi+0x58],ebx
 1005234:	movsxd esi,DWORD PTR [rax+0x74]
 1005237:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 1005240:	pop    rdi
 1005241:	gs js  0x10052ad
 1005244:	je     0x1005246
 1005246:	mov    ch,0x1
 1005248:	pop    rdi
 1005249:	movsxd esp,DWORD PTR [rbp+0x78]
 100524c:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 1005254:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0191
 100525c:	ja     0x10052c7
 100525e:	outs   dx,BYTE PTR ds:[rsi]
 100525f:	imul   esi,DWORD PTR [rbp+riz*2+0x6e],0x86000076
 1005267:	add    bl,BYTE PTR [rdi+0x69]
 100526a:	outs   dx,BYTE PTR ds:[rsi]
 100526b:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 1005273:	add    bl,BYTE PTR [rdi+0x69]
 1005276:	outs   dx,BYTE PTR ds:[rsi]
 1005277:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 100527f:	add    ch,al
 1005281:	add    DWORD PTR [rdi+0x63],ebx
 1005284:	outs   dx,DWORD PTR ds:[rsi]
 1005285:	outs   dx,BYTE PTR ds:[rsi]
 1005286:	imul   sp,WORD PTR [rdi+0x74],0x7268
 100528c:	gs (bad) 
 100528e:	fs ins BYTE PTR es:[rdi],dx
 1005290:	outs   dx,DWORD PTR ds:[rsi]
 1005291:	movsxd esp,DWORD PTR [rcx+0x6c]
 1005294:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 1005299:	pop    rdi
 100529a:	jae    0x1005301
 100529c:	je     0x1005313
 100529e:	jae    0x1005305
 10052a0:	jb     0x100530f
 10052a2:	(bad)  
 10052a3:	je     0x100530d
 10052a5:	gs jb  0x100531a
 10052a8:	add    BYTE PTR [rax],al
 10052aa:	(bad)
 10052ae:	outs   dx,DWORD PTR ds:[rsi]
 10052af:	ins    DWORD PTR es:[rdi],dx
 10052b0:	ins    DWORD PTR es:[rdi],dx
 10052b1:	outs   dx,DWORD PTR ds:[rsi]
 10052b2:	fs add BYTE PTR gs:[rax],al
 10052b6:	sbb    al,0x2
 10052b8:	pop    rdi
 10052b9:	ins    WORD PTR es:[rdi],dx
 10052bb:	outs   dx,DWORD PTR ds:[rsi]
 10052bc:	fs add BYTE PTR gs:[rax],al
 10052c0:	jns    0x10052c3
 10052c2:	pop    rdi
 10052c3:	pop    rdi
 10052c4:	jae    0x100532b
 10052c6:	je     0x1005327
 10052c8:	(bad)  
 10052c9:	jo     0x100533b
 10052cb:	pop    rdi
 10052cc:	je     0x1005347
 10052ce:	jo     0x1005335
 10052d0:	add    BYTE PTR [rax],al
 10052d2:	rex.WRB push r11
 10052d4:	push   rsi
 10052d5:	rex.XB push r10
 10052d7:	xor    DWORD PTR [rax],esi
 10052d9:	xor    BYTE PTR [rsi],ch
 10052db:	fs ins BYTE PTR es:[rdi],dx
 10052dd:	ins    BYTE PTR es:[rdi],dx
 10052de:	add    BYTE PTR [rax],al
 10052e0:	rex.RX add DWORD PTR [rdi+0x5f],r11d
 10052e4:	movsxd esi,DWORD PTR [rdx+0x74]
 10052e7:	pop    rdi
 10052e8:	fs gs (bad) 
 10052eb:	jne    0x1005354
 10052ed:	addr32 gs jb 0x1005350
 10052f1:	push   0x6b6f6f
 10052f6:	add    BYTE PTR [rcx],al
 10052f8:	(bad)  
 10052f9:	je     0x1005360
 10052fb:	jb     0x100536a
 10052fd:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 1005304:	pop    rcx
 1005305:	pop    r8
 1005307:	pop    rax
 1005308:	pop    rdx
 1005309:	add    BYTE PTR [rbx+0x4],bl
 100530c:	pop    rdi
 100530d:	jne    0x100537d
 100530f:	ins    BYTE PTR es:[rdi],dx
 1005310:	outs   dx,DWORD PTR ds:[rsi]
 1005311:	movsxd ebp,DWORD PTR [rbx+0x0]
 1005314:	add    QWORD PTR [rdi+0x5f],rbx
 1005318:	fs ins BYTE PTR es:[rdi],dx
 100531a:	ins    BYTE PTR es:[rdi],dx
 100531b:	outs   dx,DWORD PTR ds:[rsi]
 100531c:	outs   dx,BYTE PTR ds:[rsi]
 100531d:	gs js  0x1005389
 1005320:	je     0x1005322
 1005322:	test   BYTE PTR [rdx],0x5f
 1005325:	ins    BYTE PTR es:[rdi],dx
 1005326:	outs   dx,DWORD PTR ds:[rsi]
 1005327:	movsxd ebp,DWORD PTR [rbx+0x0]
 100532a:	popf   
 100532b:	add    ebx,DWORD PTR [rdi+0x6f]
 100532e:	outs   dx,BYTE PTR ds:[rsi]
 100532f:	gs js  0x100539b
 1005332:	je     0x1005334
 1005334:	rol    BYTE PTR [rbx+rdx*2],0x6c
 1005338:	gs gs jo 0x100533c
 100533c:	out    dx,al
 100533d:	add    BYTE PTR [rbp+0x6e],al
 1005340:	movsxd ebp,DWORD PTR [rdi+0x64]
 1005343:	gs push rax
 1005345:	outs   dx,DWORD PTR ds:[rsi]
 1005346:	imul   ebp,DWORD PTR [rsi+0x74],0xce007265
 100534d:	add    al,0x54
 100534f:	gs jb  0x10053bf
 1005352:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 1005359:	outs   dx,DWORD PTR ds:[rsi]
 100535a:	movsxd esp,DWORD PTR [rbp+0x73]
 100535d:	jae    0x100535f
 100535f:	add    dh,al
 1005361:	add    DWORD PTR [rdi+0x65],eax
 1005364:	je     0x10053a9
 1005366:	jne    0x10053da
 1005368:	jb     0x10053cf
 100536a:	outs   dx,BYTE PTR ds:[rsi]
 100536b:	je     0x10053bd
 100536d:	jb     0x10053de
 100536f:	movsxd esp,DWORD PTR [rbp+0x73]
 1005372:	jae    0x1005374
 1005374:	loop   0x100537a
 1005376:	push   rbp
 1005377:	outs   dx,BYTE PTR ds:[rsi]
 1005378:	push   0x6c646e61
 100537d:	gs fs rex.RB js 0x10053e5
 1005382:	gs jo  0x10053f9
 1005385:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 100538c:	gs jb  0x100538f
 100538f:	add    BYTE PTR [rbx+0x74655304],dh
 1005395:	push   rbp
 1005396:	outs   dx,BYTE PTR ds:[rsi]
 1005397:	push   0x6c646e61
 100539c:	gs fs rex.RB js 0x1005404
 10053a1:	gs jo  0x1005418
 10053a4:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 10053ab:	gs jb  0x10053ae
 10053ae:	add    al,BYTE PTR [rbx]
 10053b0:	rex.WB jae 0x10053f7
 10053b3:	gs (bad) 
 10053b5:	jne    0x100541e
 10053b7:	addr32 gs jb 0x100540b
 10053bb:	jb     0x1005422
 10053bd:	jae    0x1005424
 10053bf:	outs   dx,BYTE PTR ds:[rsi]
 10053c0:	je     0x10053c2
 10053c2:	es add al,0x52
 10053c5:	je     0x1005433
 10053c7:	push   rsi
 10053c8:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 10053cf:	outs   dx,BYTE PTR ds:[rsi]
 10053d0:	ja     0x100543b
 10053d2:	outs   dx,BYTE PTR ds:[rsi]
 10053d3:	add    BYTE PTR fs:[rax],al
 10053d6:	(bad)  
 10053d7:	add    al,0x52
 10053d9:	je     0x1005447
 10053db:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10053dd:	outs   dx,DWORD PTR ds:[rsi]
 10053de:	imul   esi,DWORD PTR [rbp+0x70],0x46
 10053e2:	jne    0x1005452
 10053e4:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 10053e8:	outs   dx,BYTE PTR ds:[rsi]
 10053e9:	rex.RB outs dx,BYTE PTR ds:[rsi]
 10053eb:	je     0x100545f
 10053ed:	jns    0x10053ef
 10053ef:	add    BYTE PTR [rax],bl
 10053f1:	add    al,0x52
 10053f3:	je     0x1005461
 10053f5:	rex.XB (bad) 
 10053f7:	jo     0x100546d
 10053f9:	jne    0x100546d
 10053fb:	rex.XB outs dx,DWORD PTR gs:[rsi]
 10053fe:	outs   dx,BYTE PTR ds:[rsi]
 10053ff:	je     0x1005466
 1005401:	js     0x1005477
 1005403:	add    bl,cl
 1005405:	add    BYTE PTR [rbp+riz*2+0x63],al
 1005409:	outs   dx,DWORD PTR ds:[rsi]
 100540a:	fs gs push rax
 100540d:	outs   dx,DWORD PTR ds:[rsi]
 100540e:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 1005415:	add    edx,DWORD PTR [rcx+0x75]
 1005418:	gs jb  0x1005494
 100541b:	push   rax
 100541c:	gs jb  0x1005485
 100541f:	outs   dx,DWORD PTR ds:[rsi]
 1005420:	jb     0x100548f
 1005422:	(bad)  
 1005423:	outs   dx,BYTE PTR ds:[rsi]
 1005424:	movsxd esp,DWORD PTR [rbp+0x43]
 1005427:	outs   dx,DWORD PTR ds:[rsi]
 1005428:	jne    0x1005498
 100542a:	je     0x1005491
 100542c:	jb     0x100542e
 100542e:	(bad)  
 100542f:	add    al,BYTE PTR [rdi+0x65]
 1005432:	je     0x1005488
 1005434:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 100543b:	je     0x100543d
 100543d:	add    bl,cl
 100543f:	add    DWORD PTR [rdi+0x65],eax
 1005442:	je     0x1005487
 1005444:	jne    0x10054b8
 1005446:	jb     0x10054ad
 1005448:	outs   dx,BYTE PTR ds:[rsi]
 1005449:	je     0x100549f
 100544b:	push   0x64616572
 1005450:	rex.WB
 1005451:	add    BYTE PTR fs:[rax],al
 1005454:	mov    DWORD PTR [rcx],0x43746547
 100545a:	jne    0x10054ce
 100545c:	jb     0x10054c3
 100545e:	outs   dx,BYTE PTR ds:[rsi]
 100545f:	je     0x10054b1
 1005461:	jb     0x10054d2
 1005463:	movsxd esp,DWORD PTR [rbp+0x73]
 1005466:	jae    0x10054b1
 1005468:	add    BYTE PTR fs:[rax+0x74654702],al
 100546f:	push   rbx
 1005470:	jns    0x10054e5
 1005472:	je     0x10054d9
 1005474:	ins    DWORD PTR es:[rdi],dx
 1005475:	push   rsp
 1005476:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 100547d:	ins    BYTE PTR es:[rdi],dx
 100547e:	gs push rsp
 1005480:	imul   ebp,DWORD PTR [rbp+0x65],0x6d05a900
 1005487:	gs ins DWORD PTR es:[rdi],dx
 1005489:	movsxd esi,DWORD PTR [rax+0x79]
 100548c:	add    BYTE PTR [rax],al
 100548e:	lods   eax,DWORD PTR ds:[rsi]
 100548f:	add    eax,0x736d656d
 1005494:	gs je  0x1005497
	...
