
a3275735b0d0b68818b527f8f11ed623b095905dc66e8b50f46861d1158290c0.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	clc    
 1001001:	(bad)  
 1001002:	add    DWORD PTR [rax],eax
 1001004:	add    BYTE PTR [rax],al
 1001006:	add    BYTE PTR [rax],al
 1001008:	(bad)  
 1001009:	fwait
 100100a:	add    DWORD PTR [rax],eax
 100100c:	add    BYTE PTR [rax],al
 100100e:	add    BYTE PTR [rax],al
 1001010:	(bad)  
 1001011:	fwait
 1001012:	add    DWORD PTR [rax],eax
 1001014:	add    BYTE PTR [rax],al
 1001016:	add    BYTE PTR [rax],al
 1001018:	movs   DWORD PTR es:[rdi],DWORD PTR fs:[rsi]
 100101a:	add    DWORD PTR [rax],eax
 100101c:	add    BYTE PTR [rax],al
 100101e:	add    BYTE PTR [rax],al
 1001020:	push   rsp
 1001021:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1001022:	add    DWORD PTR [rax],eax
	...
 1001030:	(bad)  
 1001031:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1001032:	add    DWORD PTR [rax],eax
 1001034:	add    BYTE PTR [rax],al
 1001036:	add    BYTE PTR [rax],al
 1001038:	test   al,0xa4
 100103a:	add    DWORD PTR [rax],eax
 100103c:	add    BYTE PTR [rax],al
 100103e:	add    BYTE PTR [rax],al
 1001040:	push   rsp
 1001041:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001042:	add    DWORD PTR [rax],eax
 1001044:	add    BYTE PTR [rax],al
 1001046:	add    BYTE PTR [rax],al
 1001048:	xor    ah,BYTE PTR [rcx+rax*1+0x0]
 100104f:	add    BYTE PTR [rsp+riz*4],cl
 1001052:	add    DWORD PTR [rax],eax
 1001054:	add    BYTE PTR [rax],al
 1001056:	add    BYTE PTR [rax],al
 1001058:	mul    BYTE PTR [rbx+0x1]
 100105e:	add    BYTE PTR [rax],al
 1001060:	loopne 0x1001005
 1001062:	add    DWORD PTR [rax],eax
 1001064:	add    BYTE PTR [rax],al
 1001066:	add    BYTE PTR [rax],al
 1001068:	jle    0x100100e
 100106a:	add    DWORD PTR [rax],eax
 100106c:	add    BYTE PTR [rax],al
 100106e:	add    BYTE PTR [rax],al
 1001070:	je     0x1001015
 1001072:	add    DWORD PTR [rax],eax
	...
 1001080:	call   0x1001222
 1001085:	add    BYTE PTR [rax],al
 1001087:	add    ah,dh
 1001089:	popf   
 100108a:	add    DWORD PTR [rax],eax
 100108c:	add    BYTE PTR [rax],al
 100108e:	add    BYTE PTR [rax],al
 1001090:	add    BYTE PTR [rsi+0x1],bl
 1001096:	add    BYTE PTR [rax],al
 1001098:	(bad)  
 1001099:	sahf   
 100109a:	add    DWORD PTR [rax],eax
 100109c:	add    BYTE PTR [rax],al
 100109e:	add    BYTE PTR [rax],al
 10010a0:	and    al,0x9e
 10010a2:	add    DWORD PTR [rax],eax
 10010a4:	add    BYTE PTR [rax],al
 10010a6:	add    BYTE PTR [rax],al
 10010a8:	xor    BYTE PTR [rsi+0x1],bl
 10010ae:	add    BYTE PTR [rax],al
 10010b0:	ds sahf 
 10010b2:	add    DWORD PTR [rax],eax
 10010b4:	add    BYTE PTR [rax],al
 10010b6:	add    BYTE PTR [rax],al
 10010b8:	pop    rax
 10010b9:	stos   BYTE PTR es:[rdi],al
 10010ba:	add    DWORD PTR [rax],eax
 10010bc:	add    BYTE PTR [rax],al
 10010be:	add    BYTE PTR [rax],al
 10010c0:	rex.R stos BYTE PTR es:[rdi],al
 10010c2:	add    DWORD PTR [rax],eax
 10010c4:	add    BYTE PTR [rax],al
 10010c6:	add    BYTE PTR [rax],al
 10010c8:	cmp    BYTE PTR [rdx+0x1],ch
 10010ce:	add    BYTE PTR [rax],al
 10010d0:	pop    rdx
 10010d1:	test   eax,0x1
 10010d6:	add    BYTE PTR [rax],al
 10010d8:	rex.WR test rax,0x1
 10010de:	add    BYTE PTR [rax],al
 10010e0:	cmp    BYTE PTR [rcx+0x1],ch
 10010e6:	add    BYTE PTR [rax],al
 10010e8:	and    al,0xa9
 10010ea:	add    DWORD PTR [rax],eax
 10010ec:	add    BYTE PTR [rax],al
 10010ee:	add    BYTE PTR [rax],al
 10010f0:	adc    BYTE PTR [rcx+0x1],ch
 10010f6:	add    BYTE PTR [rax],al
 10010f8:	(bad)  
 10010f9:	test   al,0x1
 10010fb:	add    BYTE PTR [rax],al
 10010fd:	add    BYTE PTR [rax],al
 10010ff:	add    ah,ch
 1001101:	test   al,0x1
 1001103:	add    BYTE PTR [rax],al
 1001105:	add    BYTE PTR [rax],al
 1001107:	add    dh,dl
 1001109:	test   al,0x1
 100110b:	add    BYTE PTR [rax],al
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    al,cl
 1001111:	test   al,0x1
 1001113:	add    BYTE PTR [rax],al
 1001115:	add    BYTE PTR [rax],al
 1001117:	add    BYTE PTR [rax+0x1a8],bh
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    BYTE PTR [rax+0x1a8],ch
 1001125:	add    BYTE PTR [rax],al
 1001127:	add    BYTE PTR [rax+0x1a8],dl
 100112d:	add    BYTE PTR [rax],al
 100112f:	add    BYTE PTR [rax+0x1a8],al
 1001135:	add    BYTE PTR [rax],al
 1001137:	add    BYTE PTR [rax+rbp*4+0x1],ah
 100113b:	add    BYTE PTR [rax],al
 100113d:	add    BYTE PTR [rax],al
 100113f:	add    BYTE PTR [rax-0x58],cl
 1001142:	add    DWORD PTR [rax],eax
 1001144:	add    BYTE PTR [rax],al
 1001146:	add    BYTE PTR [rax],al
 1001148:	cmp    ch,BYTE PTR [rax+0x1]
 100114e:	add    BYTE PTR [rax],al
 1001150:	sub    ch,BYTE PTR [rax+0x1]
 1001156:	add    BYTE PTR [rax],al
 1001158:	sbb    ch,BYTE PTR [rax+0x1]
 100115e:	add    BYTE PTR [rax],al
 1001160:	add    BYTE PTR [rax+0x1],ch
 1001166:	add    BYTE PTR [rax],al
 1001168:	ficomp DWORD PTR [rbp+0x1]
 100116e:	add    BYTE PTR [rax],al
 1001170:	(bad)  
 1001171:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1001172:	add    DWORD PTR [rax],eax
 1001174:	add    BYTE PTR [rax],al
 1001176:	add    BYTE PTR [rax],al
 1001178:	ret    0x1a7
 100117b:	add    BYTE PTR [rax],al
 100117d:	add    BYTE PTR [rax],al
 100117f:	add    BYTE PTR [rdx+0x1a7],dh
 1001185:	add    BYTE PTR [rax],al
 1001187:	add    BYTE PTR [rax+0x1a7],ah
 100118d:	add    BYTE PTR [rax],al
 100118f:	add    BYTE PTR [rax+0x1a7],dl
 1001195:	add    BYTE PTR [rax],al
 1001197:	add    BYTE PTR [rdi+riz*4+0x1],bh
 100119b:	add    BYTE PTR [rax],al
 100119d:	add    BYTE PTR [rax],al
 100119f:	add    BYTE PTR [rsi-0x59],ah
 10011a2:	add    DWORD PTR [rax],eax
 10011a4:	add    BYTE PTR [rax],al
 10011a6:	add    BYTE PTR [rax],al
 10011a8:	push   rax
 10011a9:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10011aa:	add    DWORD PTR [rax],eax
 10011ac:	add    BYTE PTR [rax],al
 10011ae:	add    BYTE PTR [rax],al
 10011b0:	cmp    ah,BYTE PTR [rdi+0x1]
 10011b6:	add    BYTE PTR [rax],al
 10011b8:	(bad)  
 10011b9:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10011ba:	add    DWORD PTR [rax],eax
 10011bc:	add    BYTE PTR [rax],al
 10011be:	add    BYTE PTR [rax],al
 10011c0:	or     BYTE PTR [rdi+0x1],ah
 10011c6:	add    BYTE PTR [rax],al
 10011c8:	hlt    
 10011c9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10011ca:	add    DWORD PTR [rax],eax
 10011cc:	add    BYTE PTR [rax],al
 10011ce:	add    BYTE PTR [rax],al
 10011d0:	loop   0x1001178
 10011d2:	add    DWORD PTR [rax],eax
 10011d4:	add    BYTE PTR [rax],al
 10011d6:	add    BYTE PTR [rax],al
 10011d8:	(bad)  
 10011d9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10011da:	add    DWORD PTR [rax],eax
 10011dc:	add    BYTE PTR [rax],al
 10011de:	add    BYTE PTR [rax],al
 10011e0:	enter  0x1a6,0x0
 10011e4:	add    BYTE PTR [rax],al
 10011e6:	add    BYTE PTR [rax],al
 10011e8:	mov    esp,0x1a6
 10011ed:	add    BYTE PTR [rax],al
 10011ef:	add    BYTE PTR [rax+0x1a6],dh
 10011f5:	add    BYTE PTR [rax],al
 10011f7:	add    BYTE PTR [rdx+0x1a6],ah
 10011fd:	add    BYTE PTR [rax],al
 10011ff:	add    BYTE PTR [rdx-0x5a],bh
 1001202:	add    DWORD PTR [rax],eax
 1001204:	add    BYTE PTR [rax],al
 1001206:	add    BYTE PTR [rax],al
 1001208:	(bad)  
 1001209:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100120a:	add    DWORD PTR [rax],eax
 100120c:	add    BYTE PTR [rax],al
 100120e:	add    BYTE PTR [rax],al
 1001210:	rex.WX cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1001212:	add    DWORD PTR [rax],eax
 1001214:	add    BYTE PTR [rax],al
 1001216:	add    BYTE PTR [rax],al
 1001218:	cmp    ah,BYTE PTR [rsi+0x1]
 100121e:	add    BYTE PTR [rax],al
 1001220:	and    BYTE PTR [rsi+0x1],ah
 1001226:	add    BYTE PTR [rax],al
 1001228:	adc    BYTE PTR [rsi+0x1],ah
 100122e:	add    BYTE PTR [rax],al
 1001230:	cld    
 1001231:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1001232:	add    DWORD PTR [rax],eax
 1001234:	add    BYTE PTR [rax],al
 1001236:	add    BYTE PTR [rax],al
 1001238:	loop   0x10011df
 100123a:	add    DWORD PTR [rax],eax
 100123c:	add    BYTE PTR [rax],al
 100123e:	add    BYTE PTR [rax],al
 1001240:	(bad)  
 1001241:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1001242:	add    DWORD PTR [rax],eax
 1001244:	add    BYTE PTR [rax],al
 1001246:	add    BYTE PTR [rax],al
 1001248:	mov    edx,0x1a5
 100124d:	add    BYTE PTR [rax],al
 100124f:	add    BYTE PTR [rsi+0x1a5],bl
 1001255:	add    BYTE PTR [rax],al
 1001257:	add    BYTE PTR [rdx+0x1a5],cl
 100125d:	add    BYTE PTR [rax],al
 100125f:	add    BYTE PTR [rdx-0x5b],bh
 1001262:	add    DWORD PTR [rax],eax
 1001264:	add    BYTE PTR [rax],al
 1001266:	add    BYTE PTR [rax],al
 1001268:	jb     0x100120f
 100126a:	add    DWORD PTR [rax],eax
 100126c:	add    BYTE PTR [rax],al
 100126e:	add    BYTE PTR [rax],al
 1001270:	enter  0x19d,0x0
 1001274:	add    BYTE PTR [rax],al
 1001276:	add    BYTE PTR [rax],al
 1001278:	mov    dh,0x9d
 100127a:	add    DWORD PTR [rax],eax
 100127c:	add    BYTE PTR [rax],al
 100127e:	add    BYTE PTR [rax],al
 1001280:	stos   BYTE PTR es:[rdi],al
 1001281:	popf   
 1001282:	add    DWORD PTR [rax],eax
 1001284:	add    BYTE PTR [rax],al
 1001286:	add    BYTE PTR [rax],al
 1001288:	cwde   
 1001289:	popf   
 100128a:	add    DWORD PTR [rax],eax
 100128c:	add    BYTE PTR [rax],al
 100128e:	add    BYTE PTR [rax],al
 1001290:	mov    BYTE PTR [rbp+0x1],bl
 1001296:	add    BYTE PTR [rax],al
 1001298:	jbe    0x1001237
 100129a:	add    DWORD PTR [rax],eax
 100129c:	add    BYTE PTR [rax],al
 100129e:	add    BYTE PTR [rax],al
 10012a0:	fs popf 
 10012a2:	add    DWORD PTR [rax],eax
 10012a4:	add    BYTE PTR [rax],al
 10012a6:	add    BYTE PTR [rax],al
 10012a8:	push   rdx
 10012a9:	popf   
 10012aa:	add    DWORD PTR [rax],eax
 10012ac:	add    BYTE PTR [rax],al
 10012ae:	add    BYTE PTR [rax],al
 10012b0:	rex.X popf 
 10012b2:	add    DWORD PTR [rax],eax
 10012b4:	add    BYTE PTR [rax],al
 10012b6:	add    BYTE PTR [rax],al
 10012b8:	sub    al,0x9d
 10012ba:	add    DWORD PTR [rax],eax
 10012bc:	add    BYTE PTR [rax],al
 10012be:	add    BYTE PTR [rax],al
 10012c0:	sbb    al,0x9d
 10012c2:	add    DWORD PTR [rax],eax
 10012c4:	add    BYTE PTR [rax],al
 10012c6:	add    BYTE PTR [rax],al
 10012c8:	or     al,0x9d
 10012ca:	add    DWORD PTR [rax],eax
 10012cc:	add    BYTE PTR [rax],al
 10012ce:	add    BYTE PTR [rax],al
 10012d0:	neg    BYTE PTR [rcx+rax*1+0x0]
 10012d7:	add    dl,ah
 10012d9:	pushf  
 10012da:	add    DWORD PTR [rax],eax
 10012dc:	add    BYTE PTR [rax],al
 10012de:	add    BYTE PTR [rax],al
 10012e0:	(bad)  
 10012e1:	pushf  
 10012e2:	add    DWORD PTR [rax],eax
 10012e4:	add    BYTE PTR [rax],al
 10012e6:	add    BYTE PTR [rax],al
 10012e8:	mov    eax,0x19c
 10012ed:	add    BYTE PTR [rax],al
 10012ef:	add    BYTE PTR [rsp+rbx*4+0x1],ah
 10012f6:	add    BYTE PTR [rax],al
 10012f8:	xchg   esi,eax
 10012f9:	pushf  
 10012fa:	add    DWORD PTR [rax],eax
 10012fc:	add    BYTE PTR [rax],al
 10012fe:	add    BYTE PTR [rax],al
 1001300:	xchg   BYTE PTR [rcx+rax*1+0x0],bl
 1001307:	add    BYTE PTR [rsp+rbx*4+0x1],dh
 100130b:	add    BYTE PTR [rax],al
 100130d:	add    BYTE PTR [rax],al
 100130f:	add    BYTE PTR [rax-0x64],ch
 1001312:	add    DWORD PTR [rax],eax
 1001314:	add    BYTE PTR [rax],al
 1001316:	add    BYTE PTR [rax],al
 1001318:	pop    rdx
 1001319:	pushf  
 100131a:	add    DWORD PTR [rax],eax
 100131c:	add    BYTE PTR [rax],al
 100131e:	add    BYTE PTR [rax],al
 1001320:	rex.WX pushf 
 1001322:	add    DWORD PTR [rax],eax
 1001324:	add    BYTE PTR [rax],al
 1001326:	add    BYTE PTR [rax],al
 1001328:	cmp    al,0x9c
 100132a:	add    DWORD PTR [rax],eax
 100132c:	add    BYTE PTR [rax],al
 100132e:	add    BYTE PTR [rax],al
 1001330:	cs pushf 
 1001332:	add    DWORD PTR [rax],eax
 1001334:	add    BYTE PTR [rax],al
 1001336:	add    BYTE PTR [rax],al
 1001338:	(bad)  
 1001339:	pushf  
 100133a:	add    DWORD PTR [rax],eax
 100133c:	add    BYTE PTR [rax],al
 100133e:	add    BYTE PTR [rax],al
 1001340:	(bad)  
 1001341:	fwait
 1001342:	add    DWORD PTR [rax],eax
 1001344:	add    BYTE PTR [rax],al
 1001346:	add    BYTE PTR [rax],al
 1001348:	loop   0x10012e5
 100134a:	add    DWORD PTR [rax],eax
 100134c:	add    BYTE PTR [rax],al
 100134e:	add    BYTE PTR [rax],al
 1001350:	rcr    BYTE PTR [rbx+0x1],cl
 1001356:	add    BYTE PTR [rax],al
 1001358:	mov    esp,0x19b
 100135d:	add    BYTE PTR [rax],al
 100135f:	add    BYTE PTR [rsi+0x19b],bl
 1001365:	add    BYTE PTR [rax],al
 1001367:	add    BYTE PTR [rax+0x19b],cl
 100136d:	add    BYTE PTR [rax],al
 100136f:	add    BYTE PTR [rbx+rbx*4+0x1],dh
 1001373:	add    BYTE PTR [rax],al
 1001375:	add    BYTE PTR [rax],al
 1001377:	add    BYTE PTR [rbx+rbx*4+0x1],bl
 100137b:	add    BYTE PTR [rax],al
 100137d:	add    BYTE PTR [rax],al
 100137f:	add    BYTE PTR [rdx-0x65],cl
 1001382:	add    DWORD PTR [rax],eax
 1001384:	add    BYTE PTR [rax],al
 1001386:	add    BYTE PTR [rax],al
 1001388:	cmp    BYTE PTR [rbx+0x1],bl
 100138e:	add    BYTE PTR [rax],al
 1001390:	out    0xa7,al
 1001392:	add    DWORD PTR [rax],eax
 1001394:	add    BYTE PTR [rax],al
 1001396:	add    BYTE PTR [rax],al
 1001398:	push   0xffffffffffffffaa
 100139a:	add    DWORD PTR [rax],eax
	...
 10013a8:	mov    fs,WORD PTR [rcx+0x1]
 10013ae:	add    BYTE PTR [rax],al
 10013b0:	xor    al,0xa2
 10013b2:	add    DWORD PTR [rax],eax
 10013b4:	add    BYTE PTR [rax],al
 10013b6:	add    BYTE PTR [rax],al
 10013b8:	or     BYTE PTR [rdx+0x1],ah
 10013be:	add    BYTE PTR [rax],al
 10013c0:	out    0xa1,al
 10013c2:	add    DWORD PTR [rax],eax
 10013c4:	add    BYTE PTR [rax],al
 10013c6:	add    BYTE PTR [rax],al
 10013c8:	(bad)
 10013cc:	add    BYTE PTR [rax],al
 10013ce:	add    BYTE PTR [rax],al
 10013d0:	stos   BYTE PTR es:[rdi],al
 10013d1:	movabs eax,ds:0x1
 10013da:	add    BYTE PTR [rax],al
 10013dc:	add    BYTE PTR [rax],al
 10013de:	add    BYTE PTR [rax],al
 10013e0:	jb     0x1001380
 10013e2:	add    DWORD PTR [rax],eax
 10013e4:	add    BYTE PTR [rax],al
 10013e6:	add    BYTE PTR [rax],al
 10013e8:	pop    rax
 10013e9:	movabs eax,ds:0xa14e000000000001
 10013f2:	add    DWORD PTR [rax],eax
 10013f4:	add    BYTE PTR [rax],al
 10013f6:	add    BYTE PTR [rax],al
 10013f8:	rex.RX movabs eax,ds:0xa138000000000001
 1001402:	add    DWORD PTR [rax],eax
 1001404:	add    BYTE PTR [rax],al
 1001406:	add    BYTE PTR [rax],al
 1001408:	movabs eax,cs:0xa104000000000001
 1001412:	add    DWORD PTR [rax],eax
 1001414:	add    BYTE PTR [rax],al
 1001416:	add    BYTE PTR [rax],al
 1001418:	in     al,0xa0
 100141a:	add    DWORD PTR [rax],eax
 100141c:	add    BYTE PTR [rax],al
 100141e:	add    BYTE PTR [rax],al
 1001420:	fisub  DWORD PTR [rax+0x1]
 1001426:	add    BYTE PTR [rax],al
 1001428:	(bad)  
 1001429:	movabs al,ds:0xa0ba000000000001
 1001432:	add    DWORD PTR [rax],eax
 1001434:	add    BYTE PTR [rax],al
 1001436:	add    BYTE PTR [rax],al
 1001438:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001439:	movabs al,ds:0xa096000000000001
 1001442:	add    DWORD PTR [rax],eax
 1001444:	add    BYTE PTR [rax],al
 1001446:	add    BYTE PTR [rax],al
 1001448:	mov    ah,BYTE PTR [rax+0x1]
 100144e:	add    BYTE PTR [rax],al
 1001450:	jl     0x10013f2
 1001452:	add    DWORD PTR [rax],eax
 1001454:	add    BYTE PTR [rax],al
 1001456:	add    BYTE PTR [rax],al
 1001458:	je     0x10013fa
 100145a:	add    DWORD PTR [rax],eax
 100145c:	add    BYTE PTR [rax],al
 100145e:	add    BYTE PTR [rax],al
 1001460:	push   0xffffffffffffffa0
 1001462:	add    DWORD PTR [rax],eax
 1001464:	add    BYTE PTR [rax],al
 1001466:	add    BYTE PTR [rax],al
 1001468:	(bad)  
 1001469:	movabs al,ds:0xa054000000000001
 1001472:	add    DWORD PTR [rax],eax
 1001474:	add    BYTE PTR [rax],al
 1001476:	add    BYTE PTR [rax],al
 1001478:	cmp    al,0xa0
 100147a:	add    DWORD PTR [rax],eax
 100147c:	add    BYTE PTR [rax],al
 100147e:	add    BYTE PTR [rax],al
 1001480:	sub    ah,BYTE PTR [rax+0x1]
 1001486:	add    BYTE PTR [rax],al
 1001488:	sbb    al,0xa0
 100148a:	add    DWORD PTR [rax],eax
 100148c:	add    BYTE PTR [rax],al
 100148e:	add    BYTE PTR [rax],al
 1001490:	adc    ah,BYTE PTR [rax+0x1]
 1001496:	add    BYTE PTR [rax],al
 1001498:	(bad)  
 1001499:	movabs al,ds:0x9ffc000000000001
 10014a2:	add    DWORD PTR [rax],eax
 10014a4:	add    BYTE PTR [rax],al
 10014a6:	add    BYTE PTR [rax],al
 10014a8:	out    0x9f,al
 10014aa:	add    DWORD PTR [rax],eax
 10014ac:	add    BYTE PTR [rax],al
 10014ae:	add    BYTE PTR [rax],al
 10014b0:	(bad)  
 10014b1:	lahf   
 10014b2:	add    DWORD PTR [rax],eax
 10014b4:	add    BYTE PTR [rax],al
 10014b6:	add    BYTE PTR [rax],al
 10014b8:	(bad)  
 10014b9:	sahf   
 10014ba:	add    DWORD PTR [rax],eax
 10014bc:	add    BYTE PTR [rax],al
 10014be:	add    BYTE PTR [rax],al
 10014c0:	test   al,0x9f
 10014c2:	add    DWORD PTR [rax],eax
 10014c4:	add    BYTE PTR [rax],al
 10014c6:	add    BYTE PTR [rax],al
 10014c8:	test   BYTE PTR [rdi+0x1],bl
 10014ce:	add    BYTE PTR [rax],al
 10014d0:	(bad)  
 10014d1:	lahf   
 10014d2:	add    DWORD PTR [rax],eax
 10014d4:	add    BYTE PTR [rax],al
 10014d6:	add    BYTE PTR [rax],al
 10014d8:	rex.WRX lahf 
 10014da:	add    DWORD PTR [rax],eax
 10014dc:	add    BYTE PTR [rax],al
 10014de:	add    BYTE PTR [rax],al
 10014e0:	rex.X lahf 
 10014e2:	add    DWORD PTR [rax],eax
 10014e4:	add    BYTE PTR [rax],al
 10014e6:	add    BYTE PTR [rax],al
 10014e8:	ss lahf 
 10014ea:	add    DWORD PTR [rax],eax
 10014ec:	add    BYTE PTR [rax],al
 10014ee:	add    BYTE PTR [rax],al
 10014f0:	sub    al,0x9f
 10014f2:	add    DWORD PTR [rax],eax
 10014f4:	add    BYTE PTR [rax],al
 10014f6:	add    BYTE PTR [rax],al
 10014f8:	and    al,0x9f
 10014fa:	add    DWORD PTR [rax],eax
 10014fc:	add    BYTE PTR [rax],al
 10014fe:	add    BYTE PTR [rax],al
 1001500:	sbb    bl,BYTE PTR [rdi+0x1]
 1001506:	add    BYTE PTR [rax],al
 1001508:	adc    BYTE PTR [rdi+0x1],bl
 100150e:	add    BYTE PTR [rax],al
 1001510:	add    al,0x9f
 1001512:	add    DWORD PTR [rax],eax
 1001514:	add    BYTE PTR [rax],al
 1001516:	add    BYTE PTR [rax],al
 1001518:	clc    
 1001519:	sahf   
 100151a:	add    DWORD PTR [rax],eax
 100151c:	add    BYTE PTR [rax],al
 100151e:	add    BYTE PTR [rax],al
 1001520:	in     al,dx
 1001521:	sahf   
 1001522:	add    DWORD PTR [rax],eax
 1001524:	add    BYTE PTR [rax],al
 1001526:	add    BYTE PTR [rax],al
 1001528:	ficomp DWORD PTR [rsi+0x1]
 100152e:	add    BYTE PTR [rax],al
 1001530:	rcr    BYTE PTR [rsi+0x1],1
 1001536:	add    BYTE PTR [rax],al
 1001538:	enter  0x19e,0x0
 100153c:	add    BYTE PTR [rax],al
 100153e:	add    BYTE PTR [rax],al
 1001540:	mov    edx,0x19e
 1001545:	add    BYTE PTR [rax],al
 1001547:	add    BYTE PTR [rax+0x19e],dh
 100154d:	add    BYTE PTR [rax],al
 100154f:	add    BYTE PTR [rdx+0x19e],ah
 1001555:	add    BYTE PTR [rax],al
 1001557:	add    BYTE PTR [rsi+rbx*4+0x1],cl
 100155e:	add    BYTE PTR [rax],al
 1001560:	jp     0x1001500
 1001562:	add    DWORD PTR [rax],eax
 1001564:	add    BYTE PTR [rax],al
 1001566:	add    BYTE PTR [rax],al
 1001568:	push   0xffffffffffffffa9
 100156a:	add    DWORD PTR [rax],eax
 100156c:	add    BYTE PTR [rax],al
 100156e:	add    BYTE PTR [rax],al
 1001570:	js     0x100151b
 1001572:	add    DWORD PTR [rax],eax
 1001574:	add    BYTE PTR [rax],al
 1001576:	add    BYTE PTR [rax],al
 1001578:	(bad)  
 1001579:	test   eax,0x1
 100157e:	add    BYTE PTR [rax],al
 1001580:	mov    ch,BYTE PTR [rcx+0x1]
 1001586:	add    BYTE PTR [rax],al
 1001588:	xchg   esi,eax
 1001589:	test   eax,0x1
 100158e:	add    BYTE PTR [rax],al
 1001590:	movabs al,ds:0xaa000000000001a9
 1001599:	test   eax,0x1
 100159e:	add    BYTE PTR [rax],al
 10015a0:	mov    ah,0xa9
 10015a2:	add    DWORD PTR [rax],eax
 10015a4:	add    BYTE PTR [rax],al
 10015a6:	add    BYTE PTR [rax],al
 10015a8:	(bad)  
 10015a9:	test   eax,0x1
 10015ae:	add    BYTE PTR [rax],al
 10015b0:	(bad)  
 10015b1:	test   eax,0x1
 10015b6:	add    BYTE PTR [rax],al
 10015b8:	in     al,0xa9
 10015ba:	add    DWORD PTR [rax],eax
 10015bc:	add    BYTE PTR [rax],al
 10015be:	add    BYTE PTR [rax],al
 10015c0:	hlt    
 10015c1:	test   eax,0x1
 10015c6:	add    BYTE PTR [rax],al
 10015c8:	sbb    BYTE PTR [rcx+0x1],ah
	...
 10015d6:	add    BYTE PTR [rax],al
 10015d8:	(bad)  
 10015d9:	add    BYTE PTR [rax],al
 10015db:	add    BYTE PTR [rax],al
 10015dd:	add    BYTE PTR [rax],al
 10015df:	add    BYTE PTR [rdi],0x0
 10015e2:	add    BYTE PTR [rax],al
 10015e4:	add    BYTE PTR [rax],al
 10015e6:	add    BYTE PTR [rax+0x2],al
 10015ec:	add    BYTE PTR [rax],al
 10015ee:	add    BYTE PTR [rax+0xc8],al
 10015f4:	add    BYTE PTR [rax],al
 10015f6:	add    BYTE PTR [rax+0x4],al
 10015fc:	add    BYTE PTR [rax],al
 10015fe:	add    BYTE PTR [rax+0x8],al
 1001604:	add    BYTE PTR [rax],al
 1001606:	add    BYTE PTR [rax+0x13a],al
 100160c:	add    BYTE PTR [rax],al
 100160e:	add    BYTE PTR [rax+0x139],al
 1001614:	add    BYTE PTR [rax],al
 1001616:	add    BYTE PTR [rax+0x96],al
 100161c:	add    BYTE PTR [rax],al
 100161e:	add    BYTE PTR [rax+0x95],al
 1001624:	add    BYTE PTR [rax],al
 1001626:	add    BYTE PTR [rax+0x18],al
 100162c:	add    BYTE PTR [rax],al
 100162e:	add    BYTE PTR [rax+0x17],al
 1001634:	add    BYTE PTR [rax],al
 1001636:	add    BYTE PTR [rax+0x10],al
 100163c:	add    BYTE PTR [rax],al
 100163e:	add    BYTE PTR [rax+0xf],al
 1001644:	add    BYTE PTR [rax],al
 1001646:	add    BYTE PTR [rax+0x14b],al
 100164c:	add    BYTE PTR [rax],al
 100164e:	add    BYTE PTR [rax+0x9],al
 1001654:	add    BYTE PTR [rax],al
 1001656:	add    BYTE PTR [rax+0x0],al
 100165c:	add    BYTE PTR [rax],al
 100165e:	add    BYTE PTR [rax],al
 1001660:	cmp    ah,BYTE PTR [rbx+0x1]
 1001666:	add    BYTE PTR [rax],al
 1001668:	push   rdx
 1001669:	movabs ds:0xa324000000000001,eax
 1001672:	add    DWORD PTR [rax],eax
	...
 1001680:	add    al,0xaa
 1001682:	add    DWORD PTR [rax],eax
 1001684:	add    BYTE PTR [rax],al
 1001686:	add    BYTE PTR [rax],al
 1001688:	sbb    ch,BYTE PTR [rdx+0x1]
	...
 1001696:	add    BYTE PTR [rax],al
 1001698:	or     BYTE PTR [rbx+0x1],ah
 100169e:	add    BYTE PTR [rax],al
 10016a0:	enter  0x1a2,0x0
 10016a4:	add    BYTE PTR [rax],al
 10016a6:	add    BYTE PTR [rax],al
 10016a8:	repnz movabs ds:0xa2de000000000001,al
 10016b2:	add    DWORD PTR [rax],eax
 10016b4:	add    BYTE PTR [rax],al
 10016b6:	add    BYTE PTR [rax],al
 10016b8:	movabs ds:0x90000000000001a2,al
 10016c1:	movabs ds:0xa27e000000000001,al
 10016ca:	add    DWORD PTR [rax],eax
 10016cc:	add    BYTE PTR [rax],al
 10016ce:	add    BYTE PTR [rax],al
 10016d0:	mov    dh,0xa2
 10016d2:	add    DWORD PTR [rax],eax
	...
 10016e8:	xor    al,0xd5
 10016ea:	add    BYTE PTR [rcx],al
 10016ec:	add    BYTE PTR [rax],al
 10016ee:	add    BYTE PTR [rax],al
 10016f0:	cwde   
 10016f1:	add    WORD PTR [rcx],ax
 10016f4:	add    BYTE PTR [rax],al
 10016f6:	add    BYTE PTR [rax],al
 10016f8:	mov    eax,0x10166
 10016fd:	add    BYTE PTR [rax],al
 10016ff:	add    ah,ah
 1001701:	add    WORD PTR [rcx],ax
 1001704:	add    BYTE PTR [rax],al
 1001706:	add    BYTE PTR [rax],al
 1001708:	sub    BYTE PTR [rdi+0x1],ah
 100170b:	add    DWORD PTR [rax],eax
 100170d:	add    BYTE PTR [rax],al
 100170f:	add    BYTE PTR [rax+0x67],dl
 1001712:	add    DWORD PTR [rcx],eax
	...
 1001728:	sub    bh,dl
 100172a:	add    BYTE PTR [rcx],al
 100172c:	add    BYTE PTR [rax],al
 100172e:	add    BYTE PTR [rax],al
 1001730:	fld    QWORD PTR fs:[rax]
 1001733:	add    DWORD PTR [rax],eax
	...
 1001741:	add    BYTE PTR [rax],al
 1001743:	add    bh,ah
 1001745:	(bad)  
 1001746:	xor    eax,0x4f
 100174b:	add    BYTE PTR [rdx],al
 100174d:	add    BYTE PTR [rax],al
 100174f:	add    BYTE PTR [rbx],ah
 1001751:	add    BYTE PTR [rax],al
 1001753:	add    BYTE PTR [rbp+rcx*2+0x419c0000],bl
 100175a:	add    BYTE PTR [rax],al
 100175c:	add    BYTE PTR [rax],al
 100175e:	add    BYTE PTR [rax],al
 1001760:	(bad)  
 1001761:	add    eax,0x0
 1001766:	adc    BYTE PTR [rax],al
 1001768:	add    BYTE PTR [rax],0x0
 100176b:	stos   BYTE PTR es:[rdi],al
 100176c:	add    BYTE PTR [rbp+0x2e],ch
 100176f:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001770:	mov    ebp,0xd1b08400
 1001775:	stc    
 1001776:	add    cl,BYTE PTR [rbp-0x48]
 1001779:	push   rsi
 100177a:	jno    0x1001751
 100177c:	(bad)  [rcx+0x64e923]
 1001782:	je     0x1001784
 1001784:	jae    0x1001786
 1001786:	jo     0x1001788
 1001788:	imul   eax,DWORD PTR [rax],0x650070
 100178e:	ins    BYTE PTR es:[rdi],dx
 100178f:	add    BYTE PTR [rcx+0x0],ch
 1001792:	outs   dx,BYTE PTR ds:[rsi]
 1001793:	add    BYTE PTR [rbp+0x0],ah
 1001796:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 100179b:	add    BYTE PTR [rax+rax*1+0x0],ch
 100179f:	add    BYTE PTR [rdx],ah
 10017a1:	add    eax,0x11993
 10017a6:	add    BYTE PTR [rax],al
 10017a8:	xchg   esp,eax
 10017a9:	push   0x1
 10017ae:	add    BYTE PTR [rax],al
 10017b0:	add    BYTE PTR [rax],al
 10017b2:	add    BYTE PTR [rax],al
 10017b4:	add    eax,DWORD PTR [rax]
 10017b6:	add    BYTE PTR [rax],al
 10017b8:	pushf  
 10017b9:	push   0x200001
 10017be:	add    BYTE PTR [rax],al
 10017c0:	add    BYTE PTR [rax],al
 10017c2:	add    BYTE PTR [rax],al
 10017c4:	add    DWORD PTR [rax],eax
 10017c6:	add    BYTE PTR [rax],al
 10017c8:	add    BYTE PTR [r8+rax*1+0x76],spl
 10017cd:	add    BYTE PTR [rcx+0x0],ah
 10017d0:	jo     0x10017d2
 10017d2:	imul   eax,DWORD PTR [rax],0x320033
 10017d8:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 10017dd:	add    BYTE PTR [rax+rax*1+0x0],ch
 10017e1:	add    BYTE PTR [rax],al
 10017e3:	add    BYTE PTR [rax],al
 10017e5:	add    BYTE PTR [rax],al
 10017e7:	add    BYTE PTR [rdx+0x65],dl
 10017ea:	addr32 rex.WRXB jo 0x1001853
 10017ee:	outs   dx,BYTE PTR ds:[rsi]
 10017ef:	rex.WXB
 10017f0:	gs jns 0x1001847
 10017f3:	jb     0x1001856
 10017f5:	outs   dx,BYTE PTR ds:[rsi]
 10017f6:	jae    0x1001859
 10017f8:	movsxd esi,DWORD PTR [rbp+riz*2+0x64]
 10017fc:	push   rdi
 10017fd:	add    BYTE PTR [rax],al
 10017ff:	add    BYTE PTR [rbp+rbp*2+0x70],al
 1001803:	rex.RXB
 1001804:	gs je  0x100184a
 1001807:	ins    BYTE PTR es:[rdi],dx
 1001808:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 100180f:	outs   dx,DWORD PTR ds:[rsi]
 1001810:	jb     0x1001886
 1001812:	add    BYTE PTR [rax],al
 1001814:	add    BYTE PTR [rax],al
 1001816:	add    BYTE PTR [rax],al
 1001818:	and    eax,0x25007300
 100181d:	add    BYTE PTR [rbx+0x0],dh
 1001820:	pop    rdi
 1001821:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f007c27
 1001827:	add    BYTE PTR [rax+rax*1+0x6d],dh
 100182b:	add    BYTE PTR [rax+0x0],dh
 100182e:	add    BYTE PTR [rax],al
 1001830:	and    eax,0x25007300
 1001835:	add    BYTE PTR [rbx+0x0],dh
 1001838:	pop    rdi
 1001839:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f007c3f
 100183f:	add    BYTE PTR [rbp+0x0],ch
 1001842:	add    BYTE PTR fs:[rbp+0x0],ch
 1001846:	jo     0x1001848
	...
 1001850:	push   rbx
 1001851:	add    BYTE PTR [rdi+0x0],cl
 1001854:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1001859:	add    BYTE PTR [rcx+0x0],al
 100185c:	push   rdx
 100185d:	add    BYTE PTR [rbp+0x0],al
 1001860:	pop    rsp
 1001861:	add    BYTE PTR [rbp+0x0],cl
 1001864:	imul   eax,DWORD PTR [rax],0x720063
 100186a:	outs   dx,DWORD PTR ds:[rsi]
 100186b:	add    BYTE PTR [rbx+0x0],dh
 100186e:	outs   dx,DWORD PTR ds:[rsi]
 100186f:	add    BYTE PTR [rsi+0x0],ah
 1001872:	je     0x1001874
 1001874:	pop    rsp
 1001875:	add    BYTE PTR [rbp+0x0],cl
 1001878:	imul   eax,DWORD PTR [rax],0x720063
 100187e:	outs   dx,DWORD PTR ds:[rsi]
 100187f:	add    BYTE PTR [rbx+0x0],dh
 1001882:	outs   dx,DWORD PTR ds:[rsi]
 1001883:	add    BYTE PTR [rsi+0x0],ah
 1001886:	je     0x1001888
 1001888:	and    BYTE PTR [rax],al
 100188a:	push   rbx
 100188b:	add    BYTE PTR [rcx+0x0],dl
 100188e:	rex.WR add BYTE PTR [rax],r12b
 1001891:	add    BYTE PTR [rbx+0x0],dl
 1001894:	add    BYTE PTR gs:[rdx+0x0],dh
 1001898:	jbe    0x100189a
 100189a:	add    BYTE PTR gs:[rdx+0x0],dh
 100189e:	pop    rsp
 100189f:	add    BYTE PTR [rcx],dh
 10018a1:	add    BYTE PTR [rcx],dh
 10018a3:	add    BYTE PTR [rax],dh
 10018a5:	add    BYTE PTR [rax+rax*1+0x53],bl
 10018a9:	add    BYTE PTR [rbx+0x0],dl
 10018ac:	rex.WB add BYTE PTR [r11+0x0],dl
 10018b0:	pop    rsp
 10018b1:	add    BYTE PTR [rbx+0x0],dl
 10018b4:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 10018b9:	add    BYTE PTR [rax+0x0],dh
 10018bc:	pop    rsp
 10018bd:	add    BYTE PTR [rax+rax*1+0x74],al
 10018c1:	add    BYTE PTR [rbx+0x0],dh
 10018c4:	push   rax
 10018c5:	add    BYTE PTR [rcx+0x0],ah
 10018c8:	je     0x10018ca
 10018ca:	push   0x0
 10018cf:	add    BYTE PTR [rbx+0x0],dl
 10018d2:	jno    0x10018d4
 10018d4:	ins    BYTE PTR es:[rdi],dx
 10018d5:	add    BYTE PTR [rax+rax*1+0x75],al
 10018d9:	add    BYTE PTR [rbp+0x0],ch
 10018dc:	jo     0x10018de
 10018de:	add    BYTE PTR gs:[rdx+0x0],dh
 10018e2:	add    BYTE PTR [rax+r8*1+0x61],r13b
 10018e7:	add    BYTE PTR [rdi+0x0],ah
 10018ea:	jae    0x10018ec
 10018ec:	add    BYTE PTR [rax],al
 10018ee:	add    BYTE PTR [rax],al
 10018f0:	push   rbx
 10018f1:	add    BYTE PTR [rcx+0x0],dh
 10018f4:	ins    BYTE PTR es:[rdi],dx
 10018f5:	add    BYTE PTR [rax+rax*1+0x75],al
 10018f9:	add    BYTE PTR [rbp+0x0],ch
 10018fc:	jo     0x10018fe
 10018fe:	add    BYTE PTR gs:[rdx+0x0],dh
 1001902:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1001906:	outs   dx,BYTE PTR ds:[rsi]
 1001907:	add    BYTE PTR [rcx+0x0],ch
 100190a:	add    BYTE PTR fs:[rbp+0x0],dh
 100190e:	ins    DWORD PTR es:[rdi],dx
 100190f:	add    BYTE PTR [rax+0x0],dh
 1001912:	add    BYTE PTR [rax+r8*1+0x61],r13b
 1001917:	add    BYTE PTR [rdi+0x0],ah
 100191a:	jae    0x100191c
 100191c:	add    BYTE PTR [rax],al
 100191e:	add    BYTE PTR [rax],al
 1001920:	xor    DWORD PTR [rax],eax
 1001922:	xor    DWORD PTR [rax],eax
 1001924:	add    BYTE PTR cs:[rax],dh
 1001927:	add    BYTE PTR [rsi],ch
 1001929:	add    BYTE PTR [rdx],dh
 100192b:	add    BYTE PTR [rcx],dh
 100192d:	add    BYTE PTR [rax],dh
 100192f:	add    BYTE PTR [rax],dh
 1001931:	add    BYTE PTR [rsi],ch
 1001933:	add    BYTE PTR [rsi],dh
 1001935:	add    BYTE PTR [rax],dh
	...
 100193f:	add    BYTE PTR [rsp+rdx*2+0x55],al
 1001943:	je     0x10019ae
 1001945:	ins    BYTE PTR es:[rdi],dx
 1001946:	rex.WRB (bad) 
 1001948:	imul   ebp,DWORD PTR [rsi+0x0],0x0
 100194f:	add    BYTE PTR [rdx],ah
 1001951:	add    eax,0x41993
 1001956:	add    BYTE PTR [rax],al
 1001958:	test   al,0x6a
 100195a:	add    DWORD PTR [rax],eax
 100195c:	add    al,BYTE PTR [rax]
 100195e:	add    BYTE PTR [rax],al
 1001960:	enter  0x16a,0x0
 1001964:	or     BYTE PTR [rax],al
 1001966:	add    BYTE PTR [rax],al
 1001968:	sbb    BYTE PTR [rbx+0x1],ch
 100196b:	add    BYTE PTR [rax],ah
 100196d:	add    BYTE PTR [rax],al
 100196f:	add    BYTE PTR [rax],al
 1001971:	add    BYTE PTR [rax],al
 1001973:	add    BYTE PTR [rcx],al
 1001975:	add    BYTE PTR [rax],al
 1001977:	add    BYTE PTR [rdx],ah
 1001979:	add    eax,0x61993
 100197e:	add    BYTE PTR [rax],al
 1001980:	movabs al,ds:0x16b
 1001989:	add    BYTE PTR [rax],al
 100198b:	add    BYTE PTR [rax],dl
 100198d:	add    BYTE PTR [rax],al
 100198f:	add    al,dl
 1001991:	imul   eax,DWORD PTR [rcx],0x0
 1001994:	push   rax
 1001995:	add    BYTE PTR [rax],al
 1001997:	add    BYTE PTR [rax],al
 1001999:	add    BYTE PTR [rax],al
 100199b:	add    BYTE PTR [rcx],al
 100199d:	add    BYTE PTR [rax],al
 100199f:	add    BYTE PTR [rdx],ah
 10019a1:	add    eax,0x11993
 10019a6:	add    BYTE PTR [rax],al
 10019a8:	js     0x1001a16
 10019aa:	add    DWORD PTR [rax],eax
	...
 10019b4:	add    al,BYTE PTR [rax]
 10019b6:	add    BYTE PTR [rax],al
 10019b8:	sub    BYTE PTR [rcx+rax*1+0x0],0x28
 10019bd:	add    BYTE PTR [rax],al
 10019bf:	add    BYTE PTR [rax],al
 10019c1:	add    BYTE PTR [rax],al
 10019c3:	add    BYTE PTR [rcx],al
 10019c5:	add    BYTE PTR [rax],al
 10019c7:	add    BYTE PTR [rdx],ah
 10019c9:	add    eax,0x81993
 10019ce:	add    BYTE PTR [rax],al
 10019d0:	hlt    
 10019d1:	ins    BYTE PTR es:[rdi],dx
 10019d2:	add    DWORD PTR [rax],eax
 10019d4:	add    DWORD PTR [rax],eax
 10019d6:	add    BYTE PTR [rax],al
 10019d8:	xor    al,0x6d
 10019da:	add    DWORD PTR [rax],eax
 10019dc:	adc    BYTE PTR [rax],al
 10019de:	add    BYTE PTR [rax],al
 10019e0:	pop    rsp
 10019e1:	ins    DWORD PTR es:[rdi],dx
 10019e2:	add    DWORD PTR [rax],eax
 10019e4:	sub    BYTE PTR [rax],al
 10019e6:	add    BYTE PTR [rax],al
 10019e8:	add    BYTE PTR [rax],al
 10019ea:	add    BYTE PTR [rax],al
 10019ec:	add    DWORD PTR [rax],eax
 10019ee:	add    BYTE PTR [rax],al
 10019f0:	movsxd eax,DWORD PTR [rax]
 10019f2:	outs   dx,DWORD PTR ds:[rsi]
 10019f3:	add    BYTE PTR [rax+0x0],dh
 10019f6:	jns    0x10019f8
	...
 1001a00:	add    BYTE PTR fs:[rbp+0x0],ah
 1001a04:	ins    BYTE PTR es:[rdi],dx
 1001a05:	add    BYTE PTR [rbp+0x0],ah
 1001a08:	je     0x1001a0a
 1001a0a:	add    BYTE PTR gs:[rax],al
 1001a0d:	add    BYTE PTR [rax],al
 1001a0f:	add    BYTE PTR [rax+rax*1+0x74],ah
 1001a13:	add    BYTE PTR [rbx+0x0],dh
 1001a16:	add    BYTE PTR [rax],al
 1001a18:	add    BYTE PTR gs:[rsi+0x0],ch
 1001a1c:	movsxd eax,DWORD PTR [rax]
 1001a1e:	jb     0x1001a20
 1001a20:	jns    0x1001a22
 1001a22:	jo     0x1001a24
 1001a24:	je     0x1001a26
 1001a26:	add    BYTE PTR [rax],al
 1001a28:	add    BYTE PTR gs:[rax+0x0],bh
 1001a2c:	imul   eax,DWORD PTR [rax],0x740073
 1001a32:	jae    0x1001a34
 1001a34:	add    BYTE PTR [rax],al
 1001a36:	add    BYTE PTR [rax],al
 1001a38:	data16 add BYTE PTR [rcx+0x0],ch
 1001a3c:	ins    BYTE PTR es:[rdi],dx
 1001a3d:	add    BYTE PTR [rbp+0x0],ah
	...
 1001a48:	imul   eax,DWORD PTR [rax],0x720064
 1001a4e:	add    BYTE PTR gs:[rdi+0x0],ah
 1001a52:	add    BYTE PTR gs:[rsi+0x0],ch
 1001a56:	add    BYTE PTR gs:[rdx+0x0],dh
 1001a5a:	(bad)  
 1001a5b:	add    BYTE PTR [rax+rax*1+0x65],dh
	...
 1001a67:	add    BYTE PTR [rbp+0x0],ch
 1001a6a:	outs   dx,DWORD PTR ds:[rsi]
 1001a6b:	add    BYTE PTR [rsi+0x0],dh
 1001a6e:	add    BYTE PTR gs:[rax],al
 1001a71:	add    BYTE PTR [rax],al
 1001a73:	add    BYTE PTR [rax],al
 1001a75:	add    BYTE PTR [rax],al
 1001a77:	add    BYTE PTR [rcx+0x0],dh
 1001a7a:	jne    0x1001a7c
 1001a7c:	imul   eax,DWORD PTR [rax],0x740065
 1001a82:	add    BYTE PTR [rax],al
 1001a84:	add    BYTE PTR [rax],al
 1001a86:	add    BYTE PTR [rax],al
 1001a88:	jae    0x1001a8a
 1001a8a:	imul   eax,DWORD PTR [rax],0x6e0067
	...
 1001a98:	jae    0x1001a9a
 1001a9a:	jno    0x1001a9c
 1001a9c:	ins    BYTE PTR es:[rdi],dx
 1001a9d:	add    BYTE PTR [rax],al
 1001a9f:	add    BYTE PTR [rsi+0x0],ah
 1001aa2:	movsxd eax,DWORD PTR [rax]
 1001aa4:	jb     0x1001aa6
 1001aa6:	add    BYTE PTR gs:[rcx+0x0],ah
 1001aaa:	je     0x1001aac
 1001aac:	add    BYTE PTR gs:[rax],al
 1001aaf:	add    BYTE PTR [rsi+0x0],ah
 1001ab2:	add    BYTE PTR fs:[rbp+0x0],ah
 1001ab6:	ins    BYTE PTR es:[rdi],dx
 1001ab7:	add    BYTE PTR [rbp+0x0],ah
 1001aba:	je     0x1001abc
 1001abc:	add    BYTE PTR gs:[rax],al
 1001abf:	add    BYTE PTR [rsi+0x0],ah
 1001ac2:	add    BYTE PTR gs:[rax+0x0],bh
 1001ac6:	imul   eax,DWORD PTR [rax],0x740073
 1001acc:	jae    0x1001ace
 1001ace:	add    BYTE PTR [rax],al
 1001ad0:	data16 add BYTE PTR [rdx+0x0],dh
 1001ad4:	add    BYTE PTR gs:[rsi+0x0],ch
 1001ad8:	(bad)  
 1001ad9:	add    BYTE PTR [rbp+0x0],ch
 1001adc:	add    BYTE PTR gs:[rax],al
 1001adf:	add    BYTE PTR [rsi+0x0],ah
 1001ae2:	add    BYTE PTR fs:[rcx+0x0],ch
 1001ae6:	jb     0x1001ae8
 1001ae8:	add    BYTE PTR gs:[rbx+0x0],ah
 1001aec:	je     0x1001aee
 1001aee:	outs   dx,DWORD PTR ds:[rsi]
 1001aef:	add    BYTE PTR [rdx+0x0],dh
 1001af2:	jns    0x1001af4
 1001af4:	add    BYTE PTR [rax],al
 1001af6:	add    BYTE PTR [rax],al
 1001af8:	add    BYTE PTR fs:[rbp+0x0],dh
 1001afc:	ins    DWORD PTR es:[rdi],dx
 1001afd:	add    BYTE PTR [rax+0x0],dh
 1001b00:	add    BYTE PTR [rax],al
 1001b02:	add    BYTE PTR [rax],al
 1001b04:	pop    rcx
 1001b05:	add    BYTE PTR [rsi+0x0],cl
 1001b08:	add    BYTE PTR [rax],al
 1001b0a:	add    BYTE PTR [rax],al
 1001b0c:	or     BYTE PTR [rax],al
 1001b0e:	add    BYTE PTR [rax],al
 1001b10:	or     al,BYTE PTR [rax]
 1001b12:	add    BYTE PTR [rax],al
 1001b14:	or     al,BYTE PTR [rax]
 1001b16:	or     eax,0x0
 1001b1b:	add    BYTE PTR [rax],al
 1001b1d:	add    BYTE PTR [rax],al
 1001b1f:	add    BYTE PTR [rbx+0x53],dl
 1001b22:	rex.WB push r11
 1001b24:	rex.X
 1001b25:	imul   ebp,DWORD PTR gs:[esi+0x44],0x706d75
 1001b2e:	add    BYTE PTR [rax],al
 1001b30:	imul   ebp,DWORD PTR [rsi+0x76],0x64696c61
 1001b37:	and    BYTE PTR [rbx+0x74],dh
 1001b3a:	jb     0x1001ba5
 1001b3c:	outs   dx,BYTE PTR ds:[rsi]
 1001b3d:	and    BYTE PTR [eax+0x6f],dh
 1001b41:	jae    0x1001bac
 1001b43:	je     0x1001bae
 1001b45:	outs   dx,DWORD PTR ds:[rsi]
 1001b46:	outs   dx,BYTE PTR ds:[rsi]
 1001b47:	add    BYTE PTR [rbx+0x74],dh
 1001b4a:	jb     0x1001bb5
 1001b4c:	outs   dx,BYTE PTR ds:[rsi]
 1001b4d:	and    BYTE PTR [edi+ebp*2+0x6f],dh
 1001b52:	and    BYTE PTR [rdi+rbp*2+0x6e],ch
 1001b56:	add    BYTE PTR [edx],ah
 1001b59:	add    eax,0x21993
 1001b5e:	add    BYTE PTR [rax],al
 1001b60:	and    BYTE PTR [rax+0x1],dh
	...
 1001b6b:	add    BYTE PTR [rip+0x30000000],al        # 0x31001b71
 1001b71:	jo     0x1001b74
 1001b73:	add    al,ch
 1001b75:	add    BYTE PTR [rax],al
 1001b77:	add    BYTE PTR [rax],al
 1001b79:	add    BYTE PTR [rax],al
 1001b7b:	add    BYTE PTR [rcx],al
 1001b7d:	add    BYTE PTR [rax],al
 1001b7f:	add    BYTE PTR [rdx],ah
 1001b81:	add    eax,0x91993
 1001b86:	add    BYTE PTR [rax],al
 1001b88:	js     0x1001bfa
 1001b8a:	add    DWORD PTR [rax],eax
 1001b8c:	add    DWORD PTR [rax],eax
 1001b8e:	add    BYTE PTR [rax],al
 1001b90:	shl    BYTE PTR [rax+0x1],0x0
 1001b94:	adc    eax,DWORD PTR [rax]
 1001b96:	add    BYTE PTR [rax],al
 1001b98:	call   0xffffffffa1001d0d
 1001b9d:	add    BYTE PTR [rax],al
 1001b9f:	add    BYTE PTR [rax],al
 1001ba1:	add    BYTE PTR [rax],al
 1001ba3:	add    BYTE PTR [rcx],al
 1001ba5:	add    BYTE PTR [rax],al
 1001ba7:	add    BYTE PTR [rdx],ah
 1001ba9:	add    eax,0x21993
 1001bae:	add    BYTE PTR [rax],al
 1001bb0:	mov    esp,0x1000171
 1001bb5:	add    BYTE PTR [rax],al
 1001bb7:	add    ah,cl
 1001bb9:	jno    0x1001bbc
 1001bbb:	add    BYTE PTR [rip+0xfffffffff4000000],al        # 0xfffffffff5001bc1
 1001bc1:	jno    0x1001bc4
 1001bc3:	add    BYTE PTR [rax],dh
 1001bc5:	add    BYTE PTR [rax],al
 1001bc7:	add    BYTE PTR [rax],al
 1001bc9:	add    BYTE PTR [rax],al
 1001bcb:	add    BYTE PTR [rcx],al
 1001bcd:	add    BYTE PTR [rax],al
 1001bcf:	add    BYTE PTR [rdx],ah
 1001bd1:	add    eax,0x21993
 1001bd6:	add    BYTE PTR [rax],al
 1001bd8:	rex jb 0x1001bdc
	...
 1001be3:	add    BYTE PTR [rip+0x50000000],al        # 0x51001be9
 1001be9:	jb     0x1001bec
 1001beb:	add    BYTE PTR [rax],ah
 1001bed:	add    BYTE PTR [rax],al
 1001bef:	add    BYTE PTR [rax],al
 1001bf1:	add    BYTE PTR [rax],al
 1001bf3:	add    BYTE PTR [rcx],al
 1001bf5:	add    BYTE PTR [rax],al
 1001bf7:	add    BYTE PTR [rdx],ah
 1001bf9:	add    eax,0x31993
 1001bfe:	add    BYTE PTR [rax],al
 1001c00:	or     al,0x73
 1001c02:	add    DWORD PTR [rax],eax
 1001c04:	add    DWORD PTR [rax],eax
 1001c06:	add    BYTE PTR [rax],al
 1001c08:	and    al,0x73
 1001c0a:	add    DWORD PTR [rax],eax
 1001c0c:	(bad)  
 1001c0d:	add    BYTE PTR [rax],al
 1001c0f:	add    BYTE PTR [rbx+rsi*2+0x1],cl
 1001c13:	add    BYTE PTR [rax],ah
 1001c15:	add    BYTE PTR [rax],al
 1001c17:	add    BYTE PTR [rax],al
 1001c19:	add    BYTE PTR [rax],al
 1001c1b:	add    BYTE PTR [rcx],al
 1001c1d:	add    BYTE PTR [rax],al
 1001c1f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1001c23:	add    BYTE PTR [rbx+0x0],dh
 1001c26:	je     0x1001c28
 1001c28:	jo     0x1001c2a
 1001c2a:	(bad)  
 1001c2b:	add    BYTE PTR [rbx+0x0],dh
 1001c2e:	jae    0x1001c30
 1001c30:	ja     0x1001c32
 1001c32:	outs   dx,DWORD PTR ds:[rsi]
 1001c33:	add    BYTE PTR [rdx+0x0],dh
 1001c36:	add    BYTE PTR fs:[rax],al
 1001c39:	add    BYTE PTR [rax],al
 1001c3b:	add    BYTE PTR [rax],al
 1001c3d:	add    BYTE PTR [rax],al
 1001c3f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1001c43:	add    BYTE PTR [rbx+0x0],dh
 1001c46:	je     0x1001c48
 1001c48:	jae    0x1001c4a
 1001c4a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001c4e:	jbe    0x1001c50
 1001c50:	add    BYTE PTR gs:[rdx+0x0],dh
 1001c54:	add    BYTE PTR [rax],al
 1001c56:	add    BYTE PTR [rax],al
 1001c58:	add    BYTE PTR fs:[rbp+0x0],ah
 1001c5c:	jae    0x1001c5e
 1001c5e:	je     0x1001c60
 1001c60:	jne    0x1001c62
 1001c62:	jae    0x1001c64
 1001c64:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1001c70:	jae    0x1001c72
 1001c72:	outs   dx,DWORD PTR ds:[rsi]
 1001c73:	add    BYTE PTR [rbp+0x0],dh
 1001c76:	jb     0x1001c78
 1001c78:	movsxd eax,DWORD PTR [rax]
 1001c7a:	add    BYTE PTR gs:[rax+0x0],dh
 1001c7e:	(bad)  
 1001c7f:	add    BYTE PTR [rbx+0x0],dh
 1001c82:	jae    0x1001c84
 1001c84:	ja     0x1001c86
 1001c86:	outs   dx,DWORD PTR ds:[rsi]
 1001c87:	add    BYTE PTR [rdx+0x0],dh
 1001c8a:	add    BYTE PTR fs:[rax],al
 1001c8d:	add    BYTE PTR [rax],al
 1001c8f:	add    BYTE PTR [rbx+0x0],dh
 1001c92:	outs   dx,DWORD PTR ds:[rsi]
 1001c93:	add    BYTE PTR [rbp+0x0],dh
 1001c96:	jb     0x1001c98
 1001c98:	movsxd eax,DWORD PTR [rax]
 1001c9a:	add    BYTE PTR gs:[rbx+0x0],dh
 1001c9e:	add    BYTE PTR gs:[rdx+0x0],dh
 1001ca2:	jbe    0x1001ca4
 1001ca4:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1001cb0:	jae    0x1001cb2
 1001cb2:	outs   dx,DWORD PTR ds:[rsi]
 1001cb3:	add    BYTE PTR [rbp+0x0],dh
 1001cb6:	jb     0x1001cb8
 1001cb8:	movsxd eax,DWORD PTR [rax]
 1001cba:	add    BYTE PTR gs:[rbp+0x0],dh
 1001cbe:	jae    0x1001cc0
 1001cc0:	add    BYTE PTR gs:[rdx+0x0],dh
 1001cc4:	add    BYTE PTR [rax],al
 1001cc6:	add    BYTE PTR [rax],al
 1001cc8:	pop    rsp
 1001cc9:	add    BYTE PTR [rax],al
 1001ccb:	add    BYTE PTR [rax],al
 1001ccd:	add    BYTE PTR [rax],al
 1001ccf:	add    BYTE PTR [rsi],dl
 1001cd1:	es adc al,ch
 1001cd4:	and    al,0x3e
 1001cd6:	(bad)  
 1001cd7:	test   QWORD PTR [rdx+0x1be79748],rsi
 1001cde:	pop    rcx
 1001cdf:	mov    esi,DWORD PTR [rsi+0x65]
 1001ce2:	movsxd esi,DWORD PTR [rdi+rbp*2+0x72]
 1001ce6:	cmp    al,0x54
 1001ce8:	and    BYTE PTR ds:[rdi+rbp*2+0x6f],dh
 1001ced:	and    BYTE PTR [rdi+rbp*2+0x6e],ch
 1001cf1:	add    BYTE PTR [eax],al
 1001cf4:	add    BYTE PTR [rax],al
 1001cf6:	add    BYTE PTR [rax],al
 1001cf8:	and    al,BYTE PTR [rip+0x31993]        # 0x1033691
 1001cfe:	add    BYTE PTR [rax],al
 1001d00:	fdiv   QWORD PTR [rcx+rax*1+0x0]
	...
 1001d0c:	or     eax,DWORD PTR [rax]
 1001d0e:	add    BYTE PTR [rax],al
 1001d10:	hlt    
 1001d11:	je     0x1001d14
 1001d13:	add    al,bl
 1001d15:	add    BYTE PTR [rax],al
 1001d17:	add    BYTE PTR [rax],al
 1001d19:	add    BYTE PTR [rax],al
 1001d1b:	add    BYTE PTR [rcx],al
 1001d1d:	add    BYTE PTR [rax],al
 1001d1f:	add    BYTE PTR [rdx],ah
 1001d21:	add    eax,0x21993
 1001d26:	add    BYTE PTR [rax],al
 1001d28:	jo     0x1001d9f
 1001d2a:	add    DWORD PTR [rax],eax
	...
 1001d34:	(bad)  
 1001d35:	add    BYTE PTR [rax],al
 1001d37:	add    BYTE PTR [rax-0x77fffe8b],al
 1001d3d:	add    BYTE PTR [rax],al
 1001d3f:	add    BYTE PTR [rax],al
 1001d41:	add    BYTE PTR [rax],al
 1001d43:	add    BYTE PTR [rcx],al
 1001d45:	add    BYTE PTR [rax],al
 1001d47:	add    BYTE PTR [rdx],ah
 1001d49:	add    eax,0xd1993
 1001d4e:	add    BYTE PTR [rax],al
 1001d50:	fdiv   QWORD PTR [rbp+0x1]
 1001d53:	add    BYTE PTR [rcx],al
 1001d55:	add    BYTE PTR [rax],al
 1001d57:	add    BYTE PTR [rsi+rsi*2+0x1],al
 1001d5b:	add    BYTE PTR [rax+rax*1],bl
 1001d5e:	add    BYTE PTR [rax],al
 1001d60:	ins    BYTE PTR es:[rdi],dx
 1001d61:	jbe    0x1001d64
 1001d63:	add    al,dl
 1001d65:	add    BYTE PTR [rax],al
 1001d67:	add    BYTE PTR [rax],al
 1001d69:	add    BYTE PTR [rax],al
 1001d6b:	add    BYTE PTR [rcx],al
 1001d6d:	add    BYTE PTR [rax],al
 1001d6f:	add    BYTE PTR [rdx],ah
 1001d71:	add    eax,0x11993
 1001d76:	add    BYTE PTR [rax],al
 1001d78:	xor    BYTE PTR [rdi+0x1],0x0
	...
 1001d84:	add    eax,DWORD PTR [rax]
 1001d86:	add    BYTE PTR [rax],al
 1001d88:	mov    BYTE PTR [rdi+0x1],dh
 1001d8b:	add    BYTE PTR [rax],dh
 1001d8d:	add    BYTE PTR [rax],al
 1001d8f:	add    BYTE PTR [rax],al
 1001d91:	add    BYTE PTR [rax],al
 1001d93:	add    BYTE PTR [rcx],al
	...
 1001d9d:	add    BYTE PTR [rax],al
 1001d9f:	add    BYTE PTR [rax+0x72],dl
 1001da2:	outs   dx,DWORD PTR ds:[rsi]
 1001da3:	jbe    0x1001e0e
 1001da5:	fs gs jb 0x1001de6
 1001da9:	push   rbx
 1001daa:	push   rcx
 1001dab:	rex.WR
 1001dac:	rex.WRX
 1001dad:	rex.XB
 1001dae:	rex.WR
 1001daf:	xor    QWORD PTR [r9],rsi
 1001db2:	cmp    esp,DWORD PTR [rax]
 1001db4:	push   rbp
 1001db5:	jae    0x1001e1c
 1001db7:	and    BYTE PTR [rbp+0x6e],al
 1001dba:	movsxd esi,DWORD PTR [rdx+0x79]
 1001dbd:	jo     0x1001e33
 1001dbf:	imul   ebp,DWORD PTR [rdi+0x6e],0x726f6620
 1001dc6:	and    BYTE PTR [rcx+riz*2+0x74],al
 1001dca:	(bad)  
 1001dcb:	cmp    eax,0x65757254
 1001dd0:	cmp    esp,DWORD PTR [rax]
 1001dd2:	push   rsp
 1001dd3:	jb     0x1001e4a
 1001dd5:	jae    0x1001e4b
 1001dd7:	and    BYTE PTR [rbx+0x65],dl
 1001dda:	jb     0x1001e52
 1001ddc:	gs jb  0x1001dff
 1001ddf:	rex.XB
 1001de0:	gs jb  0x1001e57
 1001de3:	imul   esp,DWORD PTR [rsi+0x69],0x65746163
 1001dea:	cmp    eax,0x65757254
 1001def:	cmp    esp,DWORD PTR [rax]
 1001df1:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1001df3:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x6143206c
 1001dfb:	je     0x1001e5e
 1001dfd:	ins    BYTE PTR es:[rdi],dx
 1001dfe:	outs   dx,DWORD PTR ds:[rsi]
 1001dff:	addr32 cmp eax,0x6264736d
 1001e05:	add    BYTE PTR [rax],al
 1001e07:	add    BYTE PTR [rbx],bh
 1001e09:	and    BYTE PTR [rcx+riz*2+0x74],al
 1001e0d:	(bad)  
 1001e0e:	and    BYTE PTR [rbx+0x6f],dl
 1001e11:	jne    0x1001e85
 1001e13:	movsxd esp,DWORD PTR [rbp+0x3d]
 1001e16:	(bad)  
 1001e17:	add    BYTE PTR [rdi],ah
 1001e19:	add    BYTE PTR [rax],al
 1001e1b:	add    BYTE PTR [rax],al
 1001e1d:	add    BYTE PTR [rax],al
 1001e1f:	add    BYTE PTR [rbx],bh
 1001e21:	and    BYTE PTR [rcx+0x6e],cl
 1001e24:	je     0x1001e8b
 1001e26:	addr32 jb 0x1001e8a
 1001e29:	je     0x1001e90
 1001e2b:	and    BYTE PTR fs:[rbx+0x65],dl
 1001e2f:	movsxd esi,DWORD PTR [rbp+0x72]
 1001e32:	imul   esi,DWORD PTR [rcx+rdi*2+0x3d],0x49505353
 1001e3a:	add    BYTE PTR [rax],al
 1001e3c:	add    BYTE PTR [rax],al
 1001e3e:	add    BYTE PTR [rax],al
 1001e40:	cmp    esp,DWORD PTR [rax]
 1001e42:	push   rbp
 1001e43:	jae    0x1001eaa
 1001e45:	jb     0x1001e67
 1001e47:	rex.WB
 1001e48:	rex.R cmp eax,0x27
 1001e4e:	add    BYTE PTR [rax],al
 1001e50:	cmp    esp,DWORD PTR [rax]
 1001e52:	push   rax
 1001e53:	(bad)  
 1001e54:	jae    0x1001ec9
 1001e56:	ja     0x1001ec7
 1001e58:	jb     0x1001ebe
 1001e5a:	cmp    eax,0x27
 1001e5f:	add    BYTE PTR [rbx+0x0],dh
 1001e62:	jo     0x1001e64
 1001e64:	pop    rdi
 1001e65:	add    BYTE PTR [rbx+0x0],dh
 1001e68:	jae    0x1001e6a
 1001e6a:	imul   eax,DWORD PTR [rax],0x5f0073
 1001e70:	add    BYTE PTR [ebp+0x0],ah
 1001e74:	je     0x1001e76
 1001e76:	jo     0x1001e78
 1001e78:	(bad)  
 1001e79:	add    BYTE PTR [rbx+0x0],ah
 1001e7c:	imul   eax,DWORD PTR [rax],0x61
 1001e7f:	add    BYTE PTR [rdi+0x0],ah
 1001e82:	add    BYTE PTR gs:[rax],al
 1001e85:	add    BYTE PTR [rax],al
 1001e87:	add    BYTE PTR [rbx+0x0],dh
 1001e8a:	jo     0x1001e8c
 1001e8c:	pop    rdi
 1001e8d:	add    BYTE PTR [rbx+0x0],dh
 1001e90:	jae    0x1001e92
 1001e92:	imul   eax,DWORD PTR [rax],0x5f0073
 1001e98:	jo     0x1001e9a
 1001e9a:	jne    0x1001e9c
 1001e9c:	je     0x1001e9e
 1001e9e:	jo     0x1001ea0
 1001ea0:	(bad)  
 1001ea1:	add    BYTE PTR [rbx+0x0],ah
 1001ea4:	imul   eax,DWORD PTR [rax],0x61
 1001ea7:	add    BYTE PTR [rdi+0x0],ah
 1001eaa:	add    BYTE PTR gs:[rax],al
 1001ead:	add    BYTE PTR [rax],al
 1001eaf:	add    BYTE PTR [rdx+rcx*4-0x27687e54],dl
 1001eb6:	rex.WR movabs ds:0x2228d4e475e56690,al
 1001ec1:	add    eax,0x11993
 1001ec6:	add    BYTE PTR [rax],al
 1001ec8:	push   rsp
 1001ec9:	js     0x1001ecc
	...
 1001ed3:	add    BYTE PTR [rbx],al
 1001ed5:	add    BYTE PTR [rax],al
 1001ed7:	add    BYTE PTR [rax+rdi*2+0x1],bl
 1001edb:	add    al,cl
 1001edd:	add    BYTE PTR [rax],al
 1001edf:	add    BYTE PTR [rax],al
 1001ee1:	add    BYTE PTR [rax],al
 1001ee3:	add    BYTE PTR [rcx],al
 1001ee5:	add    BYTE PTR [rax],al
 1001ee7:	add    BYTE PTR [rdx],ah
 1001ee9:	add    eax,0x11993
 1001eee:	add    BYTE PTR [rax],al
 1001ef0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001ef1:	js     0x1001ef4
	...
 1001efb:	add    BYTE PTR [rbx],al
 1001efd:	add    BYTE PTR [rax],al
 1001eff:	add    BYTE PTR [rax+rdi*2+0x480001],ch
 1001f06:	add    BYTE PTR [rax],al
 1001f08:	add    BYTE PTR [rax],al
 1001f0a:	add    BYTE PTR [rax],al
 1001f0c:	add    DWORD PTR [rax],eax
 1001f0e:	add    BYTE PTR [rax],al
 1001f10:	(bad)  
 1001f11:	and    dh,BYTE PTR [rsi+0x3c]
 1001f14:	shrd   DWORD PTR cs:[rbp-0x7b],ecx,cl
 1001f19:	sub    eax,0xb21ff3bd
 1001f1e:	(bad)  
 1001f1f:	sub    ch,BYTE PTR [rsi]
 1001f21:	add    BYTE PTR [rax],al
 1001f23:	add    BYTE PTR [rax],al
 1001f25:	add    BYTE PTR [rax],al
 1001f27:	add    BYTE PTR [rdx],ah
 1001f29:	popf   
 1001f2a:	pop    rdi
 1001f2b:	cmps   QWORD PTR ds:[rsi],QWORD PTR es:[rdi]
 1001f2d:	mov    bh,0x6b
 1001f2f:	rex.R mov ebx,0x6b7023cb
 1001f35:	es and al,0xe3
 1001f38:	and    al,BYTE PTR [rip+0x11993]        # 0x10138d1
 1001f3e:	add    BYTE PTR [rax],al
 1001f40:	in     al,0x78
 1001f42:	add    DWORD PTR [rax],eax
	...
 1001f4c:	add    eax,DWORD PTR [rax]
 1001f4e:	add    BYTE PTR [rax],al
 1001f50:	in     al,dx
 1001f51:	js     0x1001f54
 1001f53:	add    BYTE PTR [rax+0x0],cl
 1001f56:	add    BYTE PTR [rax],al
 1001f58:	add    BYTE PTR [rax],al
 1001f5a:	add    BYTE PTR [rax],al
 1001f5c:	add    DWORD PTR [rax],eax
 1001f5e:	add    BYTE PTR [rax],al
 1001f60:	and    al,BYTE PTR [rip+0x41993]        # 0x10438f9
 1001f66:	add    BYTE PTR [rax],al
 1001f68:	jo     0x1001fe3
 1001f6a:	add    DWORD PTR [rax],eax
 1001f6c:	add    DWORD PTR [rax],eax
 1001f6e:	add    BYTE PTR [rax],al
 1001f70:	nop
 1001f71:	jns    0x1001f74
 1001f73:	add    BYTE PTR [rbx],cl
 1001f75:	add    BYTE PTR [rax],al
 1001f77:	add    BYTE PTR [rax+0x40000179],bh
 1001f7d:	add    BYTE PTR [rax],al
 1001f7f:	add    BYTE PTR [rax],al
 1001f81:	add    BYTE PTR [rax],al
 1001f83:	add    BYTE PTR [rcx],al
 1001f85:	add    BYTE PTR [rax],al
 1001f87:	add    BYTE PTR [rdx],ah
 1001f89:	add    eax,0x31993
 1001f8e:	add    BYTE PTR [rax],al
 1001f90:	cmp    al,0x7a
 1001f92:	add    DWORD PTR [rax],eax
 1001f94:	add    DWORD PTR [rax],eax
 1001f96:	add    BYTE PTR [rax],al
 1001f98:	push   rsp
 1001f99:	jp     0x1001f9c
 1001f9b:	add    BYTE PTR [rax],cl
 1001f9d:	add    BYTE PTR [rax],al
 1001f9f:	add    BYTE PTR [rdx+rdi*2+0x1],bh
 1001fa3:	add    BYTE PTR [rax],bh
 1001fa5:	add    BYTE PTR [rax],al
 1001fa7:	add    BYTE PTR [rax],al
 1001fa9:	add    BYTE PTR [rax],al
 1001fab:	add    BYTE PTR [rcx],al
 1001fad:	add    BYTE PTR [rax],al
 1001faf:	add    BYTE PTR [rdx],ah
 1001fb1:	add    eax,0x61993
 1001fb6:	add    BYTE PTR [rax],al
 1001fb8:	in     al,dx
 1001fb9:	jp     0x1001fbc
 1001fbb:	add    BYTE PTR [rcx],al
 1001fbd:	add    BYTE PTR [rax],al
 1001fbf:	add    BYTE PTR [rbx+rdi*2],bl
 1001fc2:	add    DWORD PTR [rax],eax
 1001fc4:	or     eax,0x44000000
 1001fc9:	jnp    0x1001fcc
 1001fcb:	add    BYTE PTR [rax+0x0],dl
 1001fd1:	add    BYTE PTR [rax],al
 1001fd3:	add    BYTE PTR [rcx],al
 1001fd5:	add    BYTE PTR [rax],al
 1001fd7:	add    BYTE PTR [rdx],ah
 1001fd9:	add    eax,0x41993
 1001fde:	add    BYTE PTR [rax],al
 1001fe0:	loopne 0x100205d
 1001fe2:	add    DWORD PTR [rax],eax
 1001fe4:	add    DWORD PTR [rax],eax
 1001fe6:	add    BYTE PTR [rax],al
 1001fe8:	add    BYTE PTR [rcx+rax*1+0x0],bh
 1001fec:	or     al,BYTE PTR [rax]
 1001fee:	add    BYTE PTR [rax],al
 1001ff0:	sub    BYTE PTR [rcx+rax*1+0x0],bh
 1001ff4:	add    BYTE PTR [rax],al
 1001ff7:	add    BYTE PTR [rax],al
 1001ff9:	add    BYTE PTR [rax],al
 1001ffb:	add    BYTE PTR [rcx],al
 1001ffd:	add    BYTE PTR [rax],al
 1001fff:	add    BYTE PTR [rdx],ah
 1002001:	add    eax,0x41993
 1002006:	add    BYTE PTR [rax],al
 1002008:	test   al,0x7c
 100200a:	add    DWORD PTR [rax],eax
 100200c:	add    DWORD PTR [rax],eax
 100200e:	add    BYTE PTR [rax],al
 1002010:	enter  0x17c,0x0
 1002014:	(bad)  
 1002015:	add    BYTE PTR [rax],al
 1002017:	add    al,dh
 1002019:	jl     0x100201c
 100201b:	add    BYTE PTR [rax+0x0],al
 100201e:	add    BYTE PTR [rax],al
 1002020:	add    BYTE PTR [rax],al
 1002022:	add    BYTE PTR [rax],al
 1002024:	add    DWORD PTR [rax],eax
 1002026:	add    BYTE PTR [rax],al
 1002028:	and    al,BYTE PTR [rip+0x31993]        # 0x10339c1
 100202e:	add    BYTE PTR [rax],al
 1002030:	fdivr  DWORD PTR [rbp+0x1]
 1002033:	add    BYTE PTR [rcx],al
 1002035:	add    BYTE PTR [rax],al
 1002037:	add    al,dh
 1002039:	jge    0x100203c
 100203b:	add    BYTE PTR [rax],cl
 100203d:	add    BYTE PTR [rax],al
 100203f:	add    BYTE PTR [rax],bl
 1002041:	jle    0x1002044
 1002043:	add    BYTE PTR [rax],dh
 1002045:	add    BYTE PTR [rax],al
 1002047:	add    BYTE PTR [rax],al
 1002049:	add    BYTE PTR [rax],al
 100204b:	add    BYTE PTR [rcx],al
 100204d:	add    BYTE PTR [rax],al
 100204f:	add    BYTE PTR [rdx],ah
 1002051:	add    eax,0x61993
 1002056:	add    BYTE PTR [rax],al
 1002058:	mov    BYTE PTR [rsi+0x1],bh
 100205b:	add    BYTE PTR [rcx],al
 100205d:	add    BYTE PTR [rax],al
 100205f:	add    BYTE PTR [rax+0xd00017e],bh
 1002065:	add    BYTE PTR [rax],al
 1002067:	add    al,ah
 1002069:	jle    0x100206c
 100206b:	add    BYTE PTR [rax+0x0],dl
 1002071:	add    BYTE PTR [rax],al
 1002073:	add    BYTE PTR [rcx],al
 1002075:	add    BYTE PTR [rax],al
 1002077:	add    BYTE PTR [rdx],ah
 1002079:	add    eax,0x41993
 100207e:	add    BYTE PTR [rax],al
 1002080:	jl     0x1002101
 1002082:	add    DWORD PTR [rax],eax
 1002084:	add    DWORD PTR [rax],eax
 1002086:	add    BYTE PTR [rax],al
 1002088:	pushf  
 1002089:	jg     0x100208c
 100208b:	add    BYTE PTR [rdx],cl
 100208d:	add    BYTE PTR [rax],al
 100208f:	add    ah,al
 1002091:	jg     0x1002094
 1002093:	add    BYTE PTR [rax+0x0],al
 1002096:	add    BYTE PTR [rax],al
 1002098:	add    BYTE PTR [rax],al
 100209a:	add    BYTE PTR [rax],al
 100209c:	add    DWORD PTR [rax],eax
 100209e:	add    BYTE PTR [rax],al
 10020a0:	and    al,BYTE PTR [rip+0x11993]        # 0x1013a39
 10020a6:	add    BYTE PTR [rax],al
 10020a8:	(bad)  
 10020a9:	add    BYTE PTR [rcx],0x0
	...
 10020b4:	add    eax,DWORD PTR [rax]
 10020b6:	add    BYTE PTR [rax],al
 10020b8:	push   0x40000180
 10020bd:	add    BYTE PTR [rax],al
 10020bf:	add    BYTE PTR [rax],al
 10020c1:	add    BYTE PTR [rax],al
 10020c3:	add    BYTE PTR [rcx],al
 10020c5:	add    BYTE PTR [rax],al
 10020c7:	add    BYTE PTR [rdx],ah
 10020c9:	add    eax,0x11993
 10020ce:	add    BYTE PTR [rax],al
 10020d0:	pushf  
 10020d1:	add    BYTE PTR [rcx],0x0
	...
 10020dc:	add    eax,DWORD PTR [rax]
 10020de:	add    BYTE PTR [rax],al
 10020e0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10020e1:	add    BYTE PTR [rcx],0x0
 10020e4:	cmp    BYTE PTR [rax],al
 10020e6:	add    BYTE PTR [rax],al
 10020e8:	add    BYTE PTR [rax],al
 10020ea:	add    BYTE PTR [rax],al
 10020ec:	add    DWORD PTR [rax],eax
 10020ee:	add    BYTE PTR [rax],al
 10020f0:	add    BYTE PTR fs:[rbp+0x0],ah
 10020f4:	movsxd eax,DWORD PTR [rax]
 10020f6:	jb     0x10020f8
 10020f8:	jns    0x10020fa
 10020fa:	jo     0x10020fc
 10020fc:	je     0x10020fe
 10020fe:	add    BYTE PTR [rax],al
 1002100:	add    BYTE PTR fs:[rbp+0x0],ah
 1002104:	jae    0x1002106
 1002106:	je     0x1002108
 1002108:	jae    0x100210a
 100210a:	jno    0x100210c
 100210c:	ins    BYTE PTR es:[rdi],dx
 100210d:	add    BYTE PTR [rbx+0x0],dh
 1002110:	add    BYTE PTR gs:[rdx+0x0],dh
 1002114:	jbe    0x1002116
 1002116:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 100212e:	add    BYTE PTR [rax],al
 1002130:	(bad)  
 1002131:	mov    ch,0x1
 1002133:	add    DWORD PTR [rax],eax
 1002135:	add    BYTE PTR [rax],al
 1002137:	add    BYTE PTR [rax],al
 1002139:	mov    dh,0x1
 100213b:	add    DWORD PTR [rax],eax
 100213d:	add    BYTE PTR [rax],al
 100213f:	add    BYTE PTR [rax],cl
 1002141:	rex.WRX add BYTE PTR [rcx],r8b
 1002144:	add    BYTE PTR [rax],al
 1002146:	add    BYTE PTR [rax],al
 1002148:	sbb    bl,bl
 100214a:	add    BYTE PTR [rcx],al
 100214c:	add    BYTE PTR [rax],al
 100214e:	add    BYTE PTR [rax],al
 1002150:	and    al,BYTE PTR [rip+0x11993]        # 0x1013ae9
 1002156:	add    BYTE PTR [rax],al
 1002158:	pop    rsp
 1002159:	(bad)  
 100215a:	add    DWORD PTR [rax],eax
	...
 1002164:	add    eax,DWORD PTR [rax]
 1002166:	add    BYTE PTR [rax],al
 1002168:	fs (bad) 
 100216a:	add    DWORD PTR [rax],eax
 100216c:	and    BYTE PTR [rax],al
 100216e:	add    BYTE PTR [rax],al
 1002170:	add    BYTE PTR [rax],al
 1002172:	add    BYTE PTR [rax],al
 1002174:	add    DWORD PTR [rax],eax
 1002176:	add    BYTE PTR [rax],al
 1002178:	adc    BYTE PTR [rcx+0x2f],bl
 100217b:	mov    dh,0x28
 100217d:	rcl    DWORD PTR gs:[rcx],1
 1002180:	xchg   esi,eax
 1002181:	adc    DWORD PTR [rax],eax
 1002183:	add    al,bh
 1002185:	(bad)  
 1002186:	or     eax,0x4c3de00d
 100218b:	cmp    DWORD PTR [rdi+0x3c],ebp
 100218e:	rcl    BYTE PTR [rcx],cl
 1002190:	cmp    DWORD PTR [rbx+0x0],0x7a794fc0
 1002197:	mov    bh,0xca
 1002199:	test   eax,0x92a25dc0
 100219e:	add    al,0x42
 10021a0:	nop
 10021a1:	add    esp,esp
 10021a3:	(bad)  
 10021a4:	pop    rdi
 10021a5:	adc    ecx,esp
 10021a7:	test   al,0x14
 10021a9:	jrcxz  0x10021ab
 10021ab:	add    DWORD PTR [rax],eax
 10021ad:	add    BYTE PTR [rax],al
 10021af:	add    BYTE PTR [rax],bh
 10021b1:	jrcxz  0x10021b3
 10021b3:	add    DWORD PTR [rax],eax
 10021b5:	add    BYTE PTR [rax],al
 10021b7:	add    BYTE PTR [rax-0x1d],ah
 10021ba:	add    BYTE PTR [rcx],al
 10021bc:	add    BYTE PTR [rax],al
 10021be:	add    BYTE PTR [rax],al
 10021c0:	mov    al,0xe3
 10021c2:	add    BYTE PTR [rcx],al
 10021c4:	add    BYTE PTR [rax],al
 10021c6:	add    BYTE PTR [rax],al
 10021c8:	(bad)  
 10021c9:	jrcxz  0x10021cb
 10021cb:	add    DWORD PTR [rax],eax
 10021cd:	add    BYTE PTR [rax],al
 10021cf:	add    BYTE PTR [rsp+riz*8+0x100],dh
 10021d6:	add    BYTE PTR [rax],al
 10021d8:	xor    al,0xe4
 10021da:	add    BYTE PTR [rcx],al
 10021dc:	add    BYTE PTR [rax],al
 10021de:	add    BYTE PTR [rax],al
 10021e0:	cmp    al,0xe5
 10021e2:	add    BYTE PTR [rcx],al
 10021e4:	add    BYTE PTR [rax],al
 10021e6:	add    BYTE PTR [rax],al
 10021e8:	push   rsp
 10021e9:	in     al,0x0
 10021eb:	add    DWORD PTR [rax],eax
 10021ed:	add    BYTE PTR [rax],al
 10021ef:	add    BYTE PTR [rsp+riz*8+0x0],ch
 10021f3:	add    DWORD PTR [rax],eax
 10021f5:	add    BYTE PTR [rax],al
 10021f7:	add    BYTE PTR [rsp+riz*8+0x0],bh
 10021fb:	add    DWORD PTR [rax],eax
	...
 100220d:	add    BYTE PTR [rax],al
 100220f:	add    BYTE PTR [rdi+0x56],ah
 1002212:	xor    ch,BYTE PTR [rsi+0x49fb5ec7]
 1002218:	lods   al,BYTE PTR ds:[rsi]
 1002219:	cmp    esp,esi
 100221b:	in     eax,dx
 100221c:	test   DWORD PTR [rcx-0x18ca9b50],ebp
 1002222:	rcr    esi,cl
 1002224:	out    0x56,al
 1002226:	jp     0x1002268
 1002228:	fwait
 1002229:	mov    ebp,0x4455015b
 100222e:	sbb    bh,BYTE PTR [rdi-0x4f]
 1002231:	(bad)  
 1002232:	rex.RX xchg ecx,eax
 1002234:	mov    ecx,0xb44734c5
 1002239:	mov    edx,0xb3d0457d
 100223e:	(bad)  
 100223f:	ror    DWORD PTR [rip+0xffffffffdd8ca21a],1        # 0xffffffffde8cc45f
 1002245:	jnp    0x10021f4
 1002247:	rex.WRB movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002249:	xor    DWORD PTR [rcx],eax
 100224b:	(bad)  
 100224c:	add    ebx,DWORD PTR [rdx]
 100224e:	xchg   esp,eax
 100224f:	push   rbp
 1002250:	xchg   edx,eax
 1002251:	sbb    ch,bh
 1002253:	add    BYTE PTR [rdi-0x7fba581d],0x94
 100225a:	xchg   edi,eax
 100225b:	clc    
 100225c:	xor    DWORD PTR [rax],ecx
 100225e:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002260:	sbb    eax,0x4deabbde
 1002265:	xlat   BYTE PTR ds:[rbx]
 1002266:	jmp    0xffffffffa874cdac
 100226b:	and    ah,bh
 100226d:	in     al,dx
 100226e:	ss int3 
 1002270:	test   BYTE PTR [rdi-0x7d],ah
 1002273:	add    eax,0x4aa59b51
 1002278:	pushf  
 1002279:	pop    rdi
 100227a:	jmp    0x712ad93f
 100227f:	add    DWORD PTR [rbx-0x66f4b50f],ecx
 1002285:	test   BYTE PTR ss:[rdx-0x65],al
 1002289:	test   edx,0x783dbe9d
 100228f:	mov    edi,0x888c05e0
 1002294:	cs retf 
 1002296:	test   BYTE PTR [rcx-0x47],cl
 1002299:	movsxd esp,DWORD PTR [rdx+rsi*4+0x14b05045]
 10022a0:	jbe    0x100227a
 10022a2:	imul   esp,DWORD PTR [rax+0x42b00ff5],0xffffff83
 10022a9:	lahf   
 10022aa:	cmp    ecx,DWORD PTR ss:[rdx]
 10022ad:	loope  0x10022a2
 10022af:	rex.RX xor al,0xdb
 10022b2:	rex.WRXB
 10022b3:	fwait
 10022b4:	mov    BYTE PTR [rdx],dh
 10022b6:	cmp    BYTE PTR [rsi-0x4d],cl
 10022b9:	or     eax,0x69a787d
 10022be:	shl    BYTE PTR [rax],0x6f
 10022c1:	mov    esp,0x4871de6f
 10022c6:	in     eax,dx
 10022c7:	rex.WR mov ?,WORD PTR [rdi+rdx*8+0x42dc96dd]
 10022cf:	dec    DWORD PTR [rcx]
 10022d1:	adc    DWORD PTR [rbx-0x4c093d55],esi
 10022d7:	rex.WRB mov r15b,0x57
 10022da:	rex.WR
 10022db:	rex.X imul ebp,DWORD PTR [rdx-0x14],0xffffffd1
 10022e0:	rex.WB cmp al,0x37
 10022e3:	rex.WR cmp al,0x7e
 10022e6:	rex.WB
 10022e7:	rex.RB mov r9d,0xe7a12067
 10022ed:	cwde   
 10022ee:	pop    rdi
 10022ef:	add    DWORD PTR [rbp+0x3203e24],edi
 10022f5:	push   rdx
 10022f6:	jbe    0x1002344
 10022f8:	scas   eax,DWORD PTR es:[rdi]
 10022f9:	(bad)  
 10022fa:	jl     0x1002281
 10022fc:	rex.RB jmp 0x10022a0
 10022ff:	movabs al,ds:0x42f1feadc93bc9f0
 1002308:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002309:	pop    rdi
 100230a:	mov    bl,0xb8
 100230c:	xchg   BYTE PTR [rcx],ah
 100230e:	cmp    bl,cl
 1002310:	fucomi st,st(1)
 1002312:	shl    DWORD PTR [rbp+0x43162dd4],cl
 1002318:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002319:	pop    rsp
 100231a:	sub    ah,BYTE PTR [rdx-0x56b5e31f]
 1002320:	rex.WRB shl BYTE PTR [r9],0xfe
 1002324:	test   DWORD PTR [rbx-0x77],edi
 1002327:	rex.WRX xchg BYTE PTR [rax-0x8],r12b
 100232b:	js     0x10022d6
 100232d:	add    ebx,DWORD PTR [rbx]
 100232f:	(bad)  
 1002330:	pop    rsi
 1002331:	outs   dx,BYTE PTR ds:[rsi]
 1002332:	and    DWORD PTR [rax+0x4b2850cf],0xffffff95
 1002339:	ja     0x100231d
 100233b:	push   rcx
 100233c:	jae    0x10023b0
 100233e:	pop    rdi
 100233f:	or     edi,DWORD PTR [rbx]
 1002341:	clc    
 1002342:	fs sub al,0x7f
 1002345:	mov    es,esi
 1002347:	rex.WX xchg rcx,rax
 1002349:	cmp    BYTE PTR [rbp-0x41],dh
 100234c:	xor    BYTE PTR ss:[rdx],al
 100234f:	out    dx,al
 1002350:	(bad)  
 1002351:	lahf   
 1002352:	lods   eax,DWORD PTR ds:[rsi]
 1002353:	rex.RB fld DWORD PTR [r11+0x228147e0]
 100235a:	scas   eax,DWORD PTR es:[rdi]
 100235b:	lahf   
 100235c:	xchg   ecx,eax
 100235d:	cs rex.WR iretq 
 1002360:	(bad)  
 1002361:	rex.B (bad) 
 1002363:	add    r15d,DWORD PTR [rcx]
 1002366:	rex.R
 1002367:	rex.B (bad) 
 1002369:	pop    rdi
 100236a:	div    dl
 100236c:	xor    al,0xff
 100236e:	xchg   esi,eax
 100236f:	popf   
 1002370:	mov    al,0x46
 1002372:	adc    BYTE PTR [rdi+0x63],ah
 1002375:	stos   BYTE PTR es:[rdi],al
 1002376:	lahf   
 1002377:	rex.WR xchg rax,rax
 1002379:	in     al,0xc0
 100237b:	outs   dx,BYTE PTR ds:[rsi]
 100237c:	or     esi,DWORD PTR [rcx+0xc]
 100237f:	jrcxz  0x1002325
 1002381:	jo     0x1002341
 1002383:	mov    dh,BYTE PTR [rdi-0x49b1bd99]
 1002389:	(bad)  
 100238a:	test   eax,0x83fe6fa0
 100238f:	cmp    ebx,eax
 1002391:	and    esp,DWORD PTR [riz*2+0x4d2f95b6]
 1002398:	movabs al,ds:0xb7e622a596737c96
 10023a1:	hlt    
 10023a2:	rex.XB push r15
 10023a4:	retf   
 10023a5:	mov    esp,0xf3b24699
 10023aa:	int3   
 10023ab:	push   rdx
 10023ac:	xchg   esi,eax
 10023ad:	pop    rcx
 10023ae:	rex.W cld 
 10023b0:	fimul  DWORD PTR [rax-0xdcf7da6]
 10023b6:	jp     0x10023fd
 10023b8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10023b9:	rex.WRXB leave 
 10023bb:	xchg   ebp,eax
 10023bc:	test   al,0xb0
 10023be:	not    DWORD PTR [rcx-0x18]
 10023c1:	rex.WRXB push r10
 10023c3:	loop   0x10023fb
 10023c5:	movabs eax,ds:0xea9ca314bda24457
 10023ce:	outs   dx,BYTE PTR ds:[rsi]
 10023cf:	cli    
 10023d0:	cmc    
 10023d1:	(bad)  
 10023d2:	xchg   ecx,eax
 10023d3:	sub    eax,0x452f349e
 10023d8:	and    ah,0xe7
 10023db:	jns    0x100241c
 10023dd:	or     al,cl
 10023df:	rex.XB
 10023e0:	rex movsxd esi,DWORD PTR [rsi-0x5155ba39]
 10023e7:	rex xchg eax,eax
 10023e9:	loop   0x10023ac
 10023eb:	mov    ch,ch
 10023ed:	jle    0x100239e
 10023ef:	(bad)  
 10023f1:	loope  0x10023dc
 10023f3:	rex.WX in al,dx
 10023f5:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10023f6:	test   BYTE PTR [rbp+riz*4-0x6],cl
 10023fa:	(bad)  
 10023fb:	jp     0x10023a7
 10023fd:	in     al,0x9a
 10023ff:	cwde   
 1002400:	rcl    BYTE PTR [rdx],1
 1002402:	shufps xmm6,XMMWORD PTR [rbp+riz*1-0x73],0x40
 1002408:	xchg   esp,eax
 1002409:	push   rdx
 100240a:	(bad)  
 100240b:	jb     0x10023d1
 100240d:	(bad)  
 100240e:	push   0xffffffffffffffde
 1002410:	(bad)  
 1002411:	out    dx,eax
 1002412:	rex.WRB (bad) 
 1002414:	pop    rsp
 1002415:	add    ch,BYTE PTR [rsi+rcx*2-0x73]
 1002419:	std    
 100241a:	(bad)  
 100241b:	rex.W mov bl,0xf8
 100241e:	(bad)  
 100241f:	mov    esp,0xa4123393
 1002424:	xor    eax,0x934540ea
 1002429:	scas   al,BYTE PTR es:[rdi]
 100242a:	rex.W (bad) 
 100242c:	rex.WRXB xchg BYTE PTR [r14-0x5],r11b
 1002430:	pop    rdx
 1002431:	ficom  DWORD PTR [rdx-0x4c]
 1002434:	loop   0x100248a
 1002436:	movsxd ecx,DWORD PTR [rdi-0x73]
 1002439:	(bad)  
 100243a:	sbb    ebx,DWORD PTR [rcx]
 100243c:	(bad)  
 100243d:	rex.R xchg eax,eax
 100243f:	rex.WRB clc 
 1002441:	(bad)  
 1002442:	sbb    DWORD PTR [rsi*2-0x65bd65f0],ebx
 1002449:	fst    DWORD PTR [rdi-0x4e]
 100244c:	ret    
 100244d:	neg    DWORD PTR [rax]
 100244f:	test   BYTE PTR [rdi],ah
 1002451:	(bad)  
 1002452:	lock rex.WR je 0x1002481
 1002456:	ret    0xb647
 1002459:	gs pop rsi
 100245b:	or     ch,BYTE PTR [rbx]
 100245d:	and    eax,0x449f09e4
 1002462:	in     eax,0x92
 1002464:	adc    eax,0xaa493b03
 1002469:	push   rdx
 100246a:	(bad)  
 100246b:	scas   eax,DWORD PTR es:[rdi]
 100246c:	ror    edx,1
 100246e:	test   al,0x86
 1002470:	mov    bl,0x18
 1002472:	ret    
 1002473:	test   WORD PTR [rbx+rdi*8+0x48],sp
 1002478:	mov    cl,0xaf
 100247a:	add    BYTE PTR [rbx+rcx*8+0x3e],dh
 100247e:	out    dx,al
 100247f:	fistp  DWORD PTR [rsi+0x1a6ec6d]
 1002485:	test   al,0x84
 1002487:	rex xor DWORD PTR [rdi-0x4a],0xa4cbe5e
 100248f:	pop    rdi
 1002490:	(bad)  
 1002491:	mov    esi,0x5f325d77
 1002496:	mov    ecx,0x1d83854b
 100249b:	fnclex 
 100249d:	xor    BYTE PTR [rdx],cl
 100249f:	add    eax,0xf015652a
 10024a4:	mov    ebx,0x8b41b25d
 10024a9:	mov    dh,0xaa
 10024ab:	sahf   
 10024ac:	mov    WORD PTR [rax-0x43f66e79],?
 10024b2:	lea    ecx,[rcx+0x4587e7c9]
 10024b8:	xchg   esi,eax
 10024b9:	sub    DWORD PTR [rdx+0x6d],ecx
 10024bc:	movsxd ebp,DWORD PTR [rdi]
 10024be:	cmp    eax,0x1d51c3f4
 10024c3:	adc    dl,BYTE PTR [rdx+rdx*4+0x31]
 10024c7:	rex.RXB cwde 
 10024c9:	rex.X out dx,al
 10024cb:	adc    eax,0xf6185f87
 10024d0:	rex.WRXB jmp 0xffffffff94e8bb8a
 10024d6:	ins    BYTE PTR es:[rdi],dx
 10024d7:	rex.XB xchg r11d,eax
 10024d9:	xchg   edi,eax
 10024da:	(bad)  
 10024db:	jne    0x100246f
 10024dd:	movabs ds:0x8c2e124414cdf638,al
 10024e6:	xor    BYTE PTR [rcx-0x70],al
 10024e9:	(bad)  
 10024ea:	fisubr WORD PTR [rdi+0x2]
 10024ed:	addr32 out dx,eax
 10024ef:	push   0xffffffffa92f23fc
 10024f4:	pop    rdx
 10024f5:	mov    esp,0xbfaa4d68
 10024fa:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10024fb:	push   rbx
 10024fc:	repz adc DWORD PTR [rdx+0x4b],ecx
 1002500:	fld    DWORD PTR [rax+rax*1+0x17c38b20]
 1002507:	rex.WRB movabs r13,0x195deda5f662479
 1002511:	imul   ecx,ecx,0xffffff87
 1002514:	jbe    0x10024e7
 1002516:	gs rex.X popf 
 1002519:	(bad)  
 100251a:	movabs ds:0xe3a50c9c03d808d2,eax
 1002523:	add    al,0xf4
 1002525:	jb     0x10024fe
 1002527:	rex.WXB mov rcx,QWORD PTR [r15+0x32143da9]
 100252e:	xchg   esi,eax
 100252f:	and    al,0x25
 1002531:	(bad)  
 1002532:	(bad)  
 1002533:	or     al,0x6b
 1002535:	pop    rcx
 1002536:	test   BYTE PTR [rbp-0x52],0xe3
 100253a:	adc    eax,0xa9b8baba
 100253f:	pop    rsp
 1002540:	lea    eax,[rdi-0x7ff301ba]
 1002546:	jno    0x1002588
 1002548:	cdq    
 1002549:	imul   edx,ecx,0xffffffd7
 100254c:	(bad)  
 100254d:	lods   eax,DWORD PTR ds:[rsi]
 100254e:	cmp    eax,0x966192be
 1002553:	rex.RB js 0x10024fa
 1002556:	mov    eax,0x6a9eaa40
 100255b:	xchg   esp,eax
 100255c:	(bad)  
 100255d:	ja     0x1002571
 100255f:	and    ecx,DWORD PTR [rip+0xffffffffb06223c9]        # 0xffffffffb162492e
 1002565:	call   0x45bd658d
 100256a:	(bad)  
 100256b:	cmp    ebx,esp
 100256d:	mov    ch,0xdb
 100256f:	push   rsi
 1002570:	(bad)  
 1002571:	out    0x40,eax
 1002573:	movabs ds:0x398e2dab430eb8c0,eax
 100257c:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100257d:	(bad)  
 100257e:	shl    DWORD PTR [rbx],cl
 1002580:	rex.B jg 0x100250c
 1002583:	xchg   ebx,edx
 1002585:	cmp    ecx,DWORD PTR [rbx]
 1002587:	rex.WRXB mov r11b,0x23
 100258a:	push   rsp
 100258b:	lods   eax,DWORD PTR ds:[rsi]
 100258c:	and    bl,bl
 100258e:	mov    ebx,edi
 1002590:	(bad)  
 1002591:	(bad)  
 1002592:	add    eax,0xbb1f3449
 1002597:	rex.R and BYTE PTR [rbx+0x15],0x2f
 100259c:	out    dx,eax
 100259d:	out    dx,al
 100259e:	rex.WRB add BYTE PTR [r8-0x63],r13b
 10025a2:	sbb    ebp,DWORD PTR [rdx+rbp*2]
 10025a5:	in     al,dx
 10025a6:	mov    WORD PTR [rbx-0x4b],es
 10025a9:	(bad)  
 10025aa:	jrcxz  0x10025be
 10025ac:	jge    0x1002590
 10025ae:	mov    edx,0x244d48ae
 10025b3:	and    al,0x64
 10025b5:	(bad)  
 10025b6:	jns    0x1002607
 10025b8:	mov    ?,WORD PTR [rbx]
 10025ba:	rex.WR (bad) 
 10025bc:	jnp    0x100254b
 10025be:	rex.WRX sub rax,0x4a5411b3
 10025c4:	(bad)  
 10025c5:	(bad)  
 10025c6:	iret   
 10025c7:	rex.XB test eax,0x963400c4
 10025cd:	imul   ebp,DWORD PTR [rdx-0xe9ff8b9],0x1a76fd4
 10025d7:	rex.RXB mov r13b,r14b
 10025da:	mov    ah,0x56
 10025dc:	ret    
 10025dd:	rex.RX cmp r9d,DWORD PTR [rdi]
 10025e0:	mov    dl,0x52
 10025e2:	sub    edx,DWORD PTR [rsi+rbp*1-0x7bb99a13]
 10025e9:	test   al,0xfe
 10025eb:	outs   dx,DWORD PTR ds:[rsi]
 10025ec:	(bad)  
 10025ed:	xchg   ebp,eax
 10025ee:	sti    
 10025ef:	sti    
 10025f0:	js     0x10025a8
 10025f2:	mov    edi,0xc7720c8
 10025f7:	rex.XB movabs al,ds:0xc9fa183b632c9d23
 1002601:	movabs eax,ds:0xfc9e45d1c2b4dedc
 100260a:	(bad)  
 100260b:	iret   
 100260c:	xchg   ecx,eax
 100260d:	(bad)  
 100260e:	mov    WORD PTR [rbp-0x32],es
 1002611:	jbe    0x100268b
 1002613:	cmc    
 1002614:	(bad)  
 1002615:	ja     0x10025be
 1002617:	mov    r14,rsi
 100261a:	push   rax
 100261b:	(bad)  
 100261c:	movabs eax,ds:0x6aaa82becd135d5
 1002625:	push   rbp
 1002626:	or     eax,0x3e7d8f45
 100262b:	pop    rsi
 100262c:	rex.WB pop r10
 100262e:	neg    BYTE PTR [rbp+0x3c7fcbe0]
 1002634:	xchg   DWORD PTR [rdx+0x32b64b97],eax
 100263a:	jl     0x100269c
 100263c:	(bad)  
 100263d:	cmp    eax,0xdae0f4aa
 1002642:	rex.R xchg edi,eax
 1002644:	jp     0x100263e
 1002646:	cld    
 1002647:	rex.RB mov r12b,0x44
 100264a:	mov    esi,esp
 100264c:	pop    rsp
 100264d:	je     0x100260a
 100264f:	not    BYTE PTR [rcx-0x1e]
 1002652:	push   rbx
 1002653:	rex.RX outs dx,BYTE PTR ds:[rsi]
 1002655:	(bad)  
 1002657:	rex.RX (bad) 
 1002659:	mov    ah,0xa2
 100265b:	rex.WXB mov r14b,0xc6
 100265e:	shl    BYTE PTR [rcx+0x4f],1
 1002661:	xor    esi,DWORD PTR [rcx+0x249d6fe5]
 1002667:	mov    r15d,0x7bf56517
 100266d:	ret    0xb4c4
 1002670:	jae    0x1002605
 1002672:	rex.WR
 1002673:	rex.XB std 
 1002675:	adc    al,BYTE PTR [rsi+rax*2-0x7171360]
 100267c:	hlt    
 100267d:	and    dl,ah
 100267f:	test   esp,ebp
 1002681:	sbb    DWORD PTR [rax-0x55],ebp
 1002684:	sub    al,BYTE PTR [rcx-0x18]
 1002687:	mov    cl,0x74
 100268a:	or     ah,BYTE PTR [rbp+rbx*1-0x11900ae6]
 1002691:	rex.WXB mov r11b,0xd8
 1002694:	sbb    ebx,DWORD PTR [rdi+0x65]
 1002697:	rex xchg eax,eax
 1002699:	or     DWORD PTR [rdx-0x4c],ebp
 100269c:	test   eax,0xf47692b4
 10026a1:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10026a2:	(bad)  
 10026a3:	cmp    al,0xc5
 10026a5:	cmp    al,0xee
 10026a7:	rex.RXB cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10026a9:	add    esi,DWORD PTR [rax-0x3e]
 10026ac:	jbe    0x1002697
 10026ae:	rex.WX (bad) 
 10026b0:	in     al,dx
 10026b1:	(bad)  
 10026b2:	xchg   esp,eax
 10026b3:	mov    esp,0x46652cea
 10026b8:	movabs ds:0x7d9f950c0a203891,al
 10026c1:	repz loop 0x100270f
 10026c4:	xchg   esi,eax
 10026c5:	(bad)  
 10026c6:	xor    eax,DWORD PTR [rsi-0x68]
 10026c9:	(bad)  
 10026ca:	pop    rdi
 10026cb:	fwait
 10026cc:	or     eax,0x1c6bd6e0
 10026d1:	xchg   ebx,eax
 10026d2:	pop    rdi
 10026d3:	mov    ah,0xcd
 10026d5:	cmc    
 10026d6:	mov    ah,0x4f
 10026d8:	mov    bl,0x49
 10026da:	mov    BYTE PTR [rbp+0x5c],cl
 10026dd:	in     al,dx
 10026de:	xor    al,0x4b
 10026e0:	fiadd  WORD PTR [rdi-0x59d41b29]
 10026e6:	or     DWORD PTR [rcx-0x59],eax
 10026e9:	pop    rbx
 10026ea:	push   rdi
 10026eb:	sbb    dl,BYTE PTR [rsi+0x3b]
 10026ee:	in     al,0xb9
 10026f0:	push   rdx
 10026f1:	jge    0x1002686
 10026f3:	jp     0x10026e9
 10026f5:	mov    bh,0x7d
 10026f7:	rex.WR xchg rdi,rax
 10026f9:	fcom   QWORD PTR [rsi]
 10026fb:	jmp    FWORD PTR [rcx-0x3f3222d7]
 1002701:	(bad)  
 1002702:	jb     0x10026e1
 1002704:	sbb    ebp,0xd29e4b2a
 100270a:	mov    DWORD PTR [rsi+rbx*4-0xde5e3aa],0x1d070750
 1002715:	movsxd edi,DWORD PTR [rsi]
 1002717:	rex.WRX (bad) 
 1002719:	in     eax,0xbe
 100271b:	imul   ebx,DWORD PTR [rdi+rbx*8],0x26
 100271f:	xor    ah,BYTE PTR [rcx]
 1002721:	shl    dh,cl
 1002723:	mov    dh,0x27
 1002725:	cld    
 1002726:	jno    0x1002777
 1002728:	mov    ch,0xa0
 100272a:	pop    rcx
 100272b:	jne    0x10026b0
 100272d:	cwde   
 100272e:	ins    BYTE PTR es:[rdi],dx
 100272f:	sub    BYTE PTR [rbx+0x74],ch
 1002732:	mov    esp,0x3a6b251d
 1002737:	xchg   r14,rax
 1002739:	(bad)  
 100273a:	and    DWORD PTR [rdi-0x38b801eb],edx
 1002740:	cmp    esi,DWORD PTR [rax+0x1791cf04]
 1002746:	jb     0x1002797
 1002748:	xchg   BYTE PTR [rcx],al
 100274a:	xor    BYTE PTR [rax],bh
 100274c:	xchg   edi,eax
 100274d:	movabs ds:0xbbcfd5ddb62c2e76,al
 1002756:	lahf   
 1002757:	rex.RXB mov r10d,0xa98243c2
 100275d:	push   rax
 100275e:	mov    bl,0x56
 1002760:	pop    rsi
 1002761:	add    BYTE PTR [rdi+rcx*1+0x4d1e5abd],ch
 1002768:	fwait
 1002769:	and    DWORD PTR [rax],ebx
 100276b:	repz fisub WORD PTR [rdx+0x2b]
 100276f:	and    al,0x41
 1002771:	test   al,0x5f
 1002773:	in     al,0xf5
 1002775:	jno    0x100278e
 1002777:	rex.XB mov r11b,0xf
 100277a:	mov    eax,0xf7bb1d9e
 100277f:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002780:	xor    ch,ch
 1002782:	jl     0x100272f
 1002784:	sub    DWORD PTR [rax+0x6f],edx
 1002787:	rex.WX cmp rbx,0x7d
 100278b:	sbb    al,0xe9
 100278d:	(bad)  
 100278e:	movsxd esi,DWORD PTR [rdi-0x74]
 1002791:	xor    al,0x13
 1002793:	repnz (bad) 
 1002795:	mov    ebx,0x12b14243
 100279a:	stos   BYTE PTR es:[rdi],al
 100279b:	(bad)  
 100279c:	mov    es,WORD PTR [rdx]
 100279e:	imul   bh
 10027a0:	jmp    0xffffffff9729342d
 10027a5:	sbb    ch,BYTE PTR [rdx]
 10027a7:	rex.WX pop QWORD PTR [rcx+0x45]
 10027ab:	rex.WXB
 10027ac:	rex.W lods al,BYTE PTR ds:[rsi]
 10027ae:	nop
 10027af:	scas   al,BYTE PTR es:[rdi]
 10027b0:	and    BYTE PTR [rax+rdi*2],bl
 10027b3:	clc    
 10027b4:	xchg   ecx,eax
 10027b5:	out    dx,eax
 10027b6:	(bad)  
 10027b7:	xchg   rdx,rax
 10027b9:	lods   al,BYTE PTR ds:[rsi]
 10027ba:	movabs ds:0xce8f043c3fe19df0,al
 10027c3:	lods   eax,DWORD PTR ds:[rsi]
 10027c4:	lods   eax,DWORD PTR ds:[rsi]
 10027c5:	and    edi,ebp
 10027c7:	rex.WR mov bpl,0x47
 10027ca:	movabs al,ds:0x2b5304275b92d0c2
 10027d3:	(bad)  
 10027d4:	push   0xffffffffa34a01fd
 10027d9:	(bad)  
 10027da:	(bad)  
 10027db:	ss rex.XB stc 
 10027de:	es iret 
 10027e0:	vminsd xmm3,xmm8,QWORD PTR [rcx+0x1b]
 10027e5:	or     BYTE PTR [rdi-0xec95bb8],ch
 10027eb:	push   0xffffffffd6cd4257
 10027f0:	add    al,BYTE PTR [rax-0x8]
 10027f3:	ja     0x100286d
 10027f5:	enter  0x4b38,0x84
 10027f9:	sub    eax,0x9f5ae2b1
 10027fe:	mov    esp,0x43fc2dc8
 1002803:	adc    al,0x41
 1002805:	(bad)  
 1002806:	(bad)  
 1002807:	mov    r10,QWORD PTR [r8]
 100280a:	jno    0x100284d
 100280c:	(bad)  
 100280e:	loop   0x10027df
 1002810:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1002811:	(bad)  
 1002812:	popf   
 1002813:	push   0x489b08da
 1002818:	mov    bl,0xe2
 100281a:	sub    al,0x37
 100281c:	(bad)  
 100281d:	fs mov al,0x5f
 1002820:	(bad)  
 1002821:	repz cdq 
 1002823:	movabs eax,ds:0x6eb8f08748e40141
 100282c:	ins    DWORD PTR es:[rdi],dx
 100282d:	loope  0x10027e5
 100282f:	push   0xffffffffffffffe8
 1002831:	retf   0xadc8
 1002834:	xchg   ebp,eax
 1002835:	sbb    al,0x65
 1002837:	mov    al,0x49
 100283a:	add    al,0x59
 100283c:	adc    ebx,DWORD PTR [rbp+0x144eb421]
 1002842:	int    0x5c
 1002844:	lods   eax,DWORD PTR ds:[rsi]
 1002845:	push   rcx
 1002846:	(bad)  
 1002847:	rex.B test eax,0x50aee9d4
 100284d:	(bad)  
 100284e:	push   rax
 100284f:	hlt    
 1002850:	in     eax,dx
 1002851:	add    dl,BYTE PTR [rbp-0x4fa56654]
 1002857:	rex.WR movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002859:	addr32 mov dl,0xab
 100285c:	pop    rdx
 100285d:	adc    eax,0x5b3e707e
 1002862:	jb     0x100282e
 1002864:	push   rcx
 1002865:	add    dl,ch
 1002867:	rex.WXB movabs r15,0x73b47f74f9ecaba3
 1002871:	idiv   BYTE PTR [rbx]
 1002873:	(bad)  
 1002874:	fst    QWORD PTR [rbp-0x6852b71a]
 100287a:	rex.RB
 100287b:	rex.WRX movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100287d:	jnp    0x100282c
 100287f:	cs push 0x5e663ba9
 1002885:	xor    al,0x39
 1002887:	rex.RB popf 
 1002889:	(bad)  
 100288a:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100288b:	(bad)  
 100288c:	cmp    BYTE PTR [rdx+0xe],ah
 100288f:	rol    BYTE PTR [rax+rbx*1+0x1a6dcb1a],1
 1002896:	retf   
 1002897:	rex.RXB (bad) 
 1002899:	(bad)  
 100289a:	push   rax
 100289b:	fwait
 100289c:	sbb    al,0x7b
 100289e:	scas   eax,DWORD PTR es:[rdi]
 100289f:	pop    rdx
 10028a0:	test   dh,dh
 10028a2:	rex.R cdq 
 10028a4:	(bad)  
 10028a5:	rex.WB push r12
 10028a7:	rex.XB stos DWORD PTR es:[rdi],eax
 10028a9:	jg     0x1002899
 10028ab:	rex.X sub spl,BYTE PTR [rbp+0xe]
 10028af:	(bad)  
 10028b0:	xchg   esp,eax
 10028b1:	xor    eax,DWORD PTR [rsi-0x2f87922a]
 10028b7:	rex.WRX movabs ds:0xd8b5a5cd9546a7fd,rax
 10028c1:	test   al,0xa4
 10028c3:	(bad)  
 10028c4:	cmp    esi,DWORD PTR fs:[rax+0x6a77ba4e]
 10028cb:	out    0x79,al
 10028cd:	cwde   
 10028ce:	push   rdx
 10028cf:	pop    rcx
 10028d0:	sub    al,0x72
 10028d2:	or     eax,0x7a2e0073
 10028d7:	rex.WR xchg BYTE PTR [rcx+0xd],r8b
 10028db:	(bad)  
 10028dc:	adc    DWORD PTR [rbx-0x57],0x44
 10028e0:	cwde   
 10028e1:	jne    0x1002925
 10028e3:	mov    esp,0x4ecb5fad
 10028e8:	mov    dh,0xf4
 10028ea:	xor    bl,al
 10028ec:	movabs eax,ds:0x97313b935a6db147
 10028f5:	(bad)  
 10028f6:	or     BYTE PTR [rbp-0x72],al
 10028f9:	rex and eax,0x8b1af5ad
 10028ff:	(bad)  
 1002903:	fs rex.RXB (bad) 
 1002906:	(bad)  
 1002907:	rex.RX movabs eax,ds:0xff6f631385e37cec
 1002911:	out    dx,eax
 1002912:	(bad)  
 1002913:	(bad)  
 1002914:	loop   0x10028f3
 1002916:	(bad)  
 1002917:	rex.RX movabs al,ds:0x359741b2f3aa2b91
 1002921:	repnz imul ebx,esp,0x48
 1002925:	movabs ds:0xe9ca9590c7ae46fc,eax
 100292e:	std    
 100292f:	xchg   ebx,eax
 1002930:	retf   0xd16b
 1002933:	nop
 1002934:	jp     0x10028ea
 1002936:	mov    ebp,0xb126bb43
 100293b:	jne    0x100298d
 100293d:	nop
 100293e:	xchg   edx,eax
 100293f:	sub    dl,BYTE PTR [rdi-0x2a]
 1002942:	repz cli 
 1002944:	or     eax,0x8241b79e
 1002949:	out    0xeb,al
 100294b:	repnz leave 
 100294d:	(bad)  
 100294e:	(bad)  
 1002950:	mov    ebp,0x506a331e
 1002955:	test   eax,0xa28343b5
 100295a:	add    esi,DWORD PTR [rip+0xfffffffff717f485]        # 0xfffffffff8181de5
 1002960:	out    dx,al
 1002961:	ds cs xchg esp,eax
 1002964:	cmp    ebp,DWORD PTR [rdx+0x519e4895]
 100296a:	mov    dh,0xfb
 100296c:	sbb    dh,BYTE PTR [rbp+rax*2-0x72ae19dc]
 1002973:	jne    0x1002948
 1002975:	cli    
 1002976:	sub    al,BYTE PTR [rdx-0x51]
 1002979:	mul    DWORD PTR [rdx]
 100297b:	(bad)  
 100297c:	lods   al,BYTE PTR cs:[rsi]
 100297e:	or     BYTE PTR [rax+0x4b],al
 1002981:	add    BYTE PTR [rsp+rbp*1],dl
 1002984:	shl    edx,cl
 1002986:	scas   eax,DWORD PTR es:[rdi]
 1002987:	rex.XB xchg r13d,eax
 1002989:	fcomp  st(2)
 100298b:	imul   BYTE PTR [rsi+0x33]
 100298e:	(bad)
 1002991:	rol    DWORD PTR [rbx],0xe7
 1002994:	push   rbp
 1002995:	mov    ebx,0xbeaa4604
 100299a:	add    eax,DWORD PTR [rcx+rsi*1]
 100299d:	iret   
 100299e:	push   rax
 100299f:	cmp    BYTE PTR [rbp+rdx*1+0x71f26af4],al
 10029a6:	(bad)  
 10029a7:	mov    cl,0x3e
 10029aa:	(bad)  
 10029ab:	js     0x1002966
 10029ad:	sub    eax,0xa57d5a3a
 10029b2:	pop    rbp
 10029b3:	rex.W
 10029b4:	es xchg esp,eax
 10029b6:	or     DWORD PTR [rdx-0x60],0x52
 10029ba:	enter  0x74d1,0x46
 10029be:	pop    rdx
 10029bf:	rex.WRX cmp BYTE PTR [rsi],r11b
 10029c2:	rex.WR fmulp st(2),st
 10029c5:	(bad)  
 10029c6:	ins    BYTE PTR es:[rdi],dx
 10029c7:	xchg   rbx,rax
 10029c9:	stc    
 10029ca:	dec    DWORD PTR [rdi+0x64ef3341]
 10029d0:	rex.WRB or rax,0x3ea562f5
 10029d6:	pop    rcx
 10029d7:	rex.W cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10029d9:	(bad)  
 10029da:	xchg   ebp,eax
 10029db:	retf   0xdd9f
 10029de:	ret    
 10029df:	push   rsi
 10029e0:	(bad)  
 10029e1:	test   al,0x97
 10029e3:	and    al,0xc7
 10029e5:	lahf   
 10029e6:	stos   BYTE PTR es:[rdi],al
 10029e7:	rex.WRX mov dl,r11b
 10029ea:	(bad)
 10029ed:	adc    DWORD PTR [rdi-0x1cb96b97],0xd290e345
 10029f7:	rex.WXB mov r10b,0x15
 10029fa:	(bad)  
 10029fb:	adc    bh,BYTE PTR [rcx-0x39]
 10029fe:	mov    ebx,0xa8473675
 1002a03:	sub    edx,ebp
 1002a05:	mov    ch,0xd0
 1002a07:	rex.WX movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
 1002a09:	movabs eax,ds:0x2ab3ba209cd26f12
 1002a12:	add    ch,BYTE PTR [rdx+0x44]
 1002a15:	xor    DWORD PTR [rbx+0x41],0xffffff8d
 1002a19:	scas   al,BYTE PTR es:[rdi]
 1002a1a:	ins    DWORD PTR es:[rdi],dx
 1002a1b:	sub    cl,BYTE PTR [rip+0x68a53ce]        # 0x78a7def
 1002a21:	jrcxz  0x10029db
 1002a23:	mov    DWORD PTR [rdx],ebp
 1002a25:	jl     0x1002a56
 1002a27:	rex.RXB mov BYTE PTR [r8+0x72],r10b
 1002a2b:	add    dh,BYTE PTR [rdx+rbx*8-0x1574840f]
 1002a32:	(bad)  
 1002a33:	test   al,0xaa
 1002a35:	scas   al,BYTE PTR es:[rdi]
 1002a36:	(bad)  
 1002a37:	rex.WXB mov r11b,0xf2
 1002a3a:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002a3b:	icebp  
 1002a3c:	mov    eax,DWORD PTR [rbp-0x3c]
 1002a3f:	pop    rbp
 1002a40:	(bad)  
 1002a41:	pop    rbx
 1002a42:	lods   al,BYTE PTR ds:[rsi]
 1002a43:	adc    ch,BYTE PTR [rdx+riz*1]
 1002a46:	mov    ah,0x4b
 1002a48:	mov    esi,0x30ec6527
 1002a4d:	pop    rbx
 1002a4e:	sub    bl,ch
 1002a50:	cmp    ch,BYTE PTR [rdx+0x47]
 1002a53:	stos   BYTE PTR es:[rdi],al
 1002a54:	push   rdx
 1002a55:	cmp    eax,0x9f814ae4
 1002a5a:	(bad)  
 1002a5b:	(bad)  
 1002a5c:	jb     0x1002a84
 1002a5e:	(bad)  
 1002a5f:	rex.WX outs dx,DWORD PTR ds:[rsi]
 1002a61:	(bad)  
 1002a62:	lods   eax,DWORD PTR ds:[rsi]
 1002a63:	pop    gs
 1002a65:	(bad)  
 1002a66:	scas   al,BYTE PTR es:[rdi]
 1002a67:	rex.WR xchg rdi,rax
 1002a69:	mov    es,WORD PTR [rbp-0x138e357a]
 1002a6f:	cmc    
 1002a70:	(bad)  [rbp-0x4f]
 1002a73:	jbe    0x1002a75
 1002a75:	(bad)  
 1002a76:	(bad)  
 1002a77:	rex.RB mov r12d,0x3b687392
 1002a7d:	jge    0x1002a5d
 1002a7f:	push   rsi
 1002a80:	xor    ecx,esp
 1002a82:	or     bl,bl
 1002a84:	out    dx,eax
 1002a85:	rex.W pop rsp
 1002a87:	movabs ds:0x7e318ebecd45831e,rax
 1002a91:	out    0xa3,eax
 1002a93:	rex.R cmc 
 1002a95:	push   rsi
 1002a96:	cwde   
 1002a97:	rex.WRXB pop QWORD PTR [r15+0x65dfe3a1]
 1002a9e:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002a9f:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002aa0:	rex.WX sub QWORD PTR ss:[rsi+0x49bec48d],rdi
 1002aa8:	and    DWORD PTR [rbx+0x10169b88],0xffffffc2
 1002aaf:	xchg   ebx,eax
 1002ab0:	ins    BYTE PTR es:[rdi],dx
 1002ab1:	jo     0x1002ab3
 1002ab3:	out    0x3c,eax
 1002ab5:	repnz or al,BYTE PTR [rax-0x43]
 1002ab9:	(bad)  
 1002aba:	lods   al,BYTE PTR ds:[rsi]
 1002abb:	jbe    0x1002ac8
 1002abd:	adc    DWORD PTR [rcx-0x32cbc47b],edi
 1002ac3:	push   rax
 1002ac4:	rex.RX
 1002ac5:	lock sbb DWORD PTR [rdi-0x7e],ecx
 1002ac9:	sub    esp,DWORD PTR [rdi+0x308d5c75]
 1002acf:	pop    rax
 1002ad0:	rex.RX mov edi,0x30638e98
 1002ad6:	and    al,0x43
 1002ad8:	(bad)  
 1002ad9:	jns    0x1002ab3
 1002adb:	or     al,0x6
 1002add:	pushf  
 1002ade:	sbb    eax,DWORD PTR [rdx]
 1002ae0:	test   eax,0xf8202f02
 1002ae5:	push   rbx
 1002ae6:	or     eax,0xac02b842
 1002aeb:	adc    ebx,DWORD PTR [rax]
 1002aed:	out    0xd3,eax
 1002aef:	cmp    BYTE PTR [rbp-0x438eaf21],dh
 1002af5:	(bad)  
 1002af7:	rex.WR (bad) 
 1002af9:	or     DWORD PTR [rdx-0x56],eax
 1002afc:	add    DWORD PTR [rcx+r13*8-0x59],r10d
 1002b01:	rex jno 0x1002b1e
 1002b04:	lock jnp 0x1002aca
 1002b07:	rex.RB cwde 
 1002b09:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002b0a:	(bad)  
 1002b0b:	jrcxz  0x1002b36
 1002b0d:	xchg   edx,eax
 1002b0e:	mov    bl,0x84
 1002b10:	xchg   ebx,eax
 1002b11:	je     0x1002ab0
 1002b13:	pop    rdx
 1002b14:	jp     0x1002aac
 1002b16:	jg     0x1002b5d
 1002b18:	lods   al,BYTE PTR ds:[rsi]
 1002b19:	std    
 1002b1a:	(bad)  
 1002b1b:	(bad)  
 1002b1c:	mul    ch
 1002b1e:	mov    ecx,0xfd1dfcaf
 1002b23:	xlat   BYTE PTR ds:[rbx]
 1002b24:	rex.WRX
 1002b25:	ss mov bl,0x47
 1002b28:	xchg   ebp,eax
 1002b29:	(bad)  
 1002b2a:	(bad)  
 1002b2b:	ins    BYTE PTR es:[rdi],dx
 1002b2c:	sbb    eax,0xc2a53ddb
 1002b31:	mov    WORD PTR [rbx],es
 1002b33:	(bad)  
 1002b34:	clc    
 1002b35:	std    
 1002b36:	jne    0x1002b83
 1002b38:	stos   BYTE PTR es:[rdi],al
 1002b39:	(bad)  
 1002b3a:	push   rdi
 1002b3b:	xchg   edi,edi
 1002b3d:	(bad)  
 1002b3e:	mov    edi,0xa494216d
 1002b43:	lea    esp,[rdi-0x49be2839]
 1002b49:	jo     0x1002b0c
 1002b4b:	movabs eax,ds:0x4555b0a5d454becb
 1002b54:	xlat   BYTE PTR ds:[rbx]
 1002b55:	call   0xffffffff9ab27517
 1002b5a:	xor    DWORD PTR [rax-0x3d],eax
 1002b5d:	rex.WRB (bad) 
 1002b5f:	imul   ebp,DWORD PTR [rip+0x4b8bf657],0x90494e67        # 0x4c8c21c0
 1002b69:	rex.RXB fst st(0)
 1002b6c:	loop   0x1002bb9
 1002b6e:	mov    bh,0x85
 1002b70:	ret    0x85fc
 1002b73:	mov    es,WORD PTR [rax]
 1002b75:	mov    DWORD PTR [rcx+0x46],ecx
 1002b78:	mov    ch,0x6f
 1002b7a:	jb     0x1002bbf
 1002b7c:	xor    eax,0x5cc4fe78
 1002b81:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1002b82:	mov    edx,0x1014c122
 1002b87:	rex.X xchg ecx,eax
 1002b89:	(bad)  
 1002b8a:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1002b8b:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002b8c:	mov    dh,0x67
 1002b8e:	clc    
 1002b8f:	ret    0x9262
 1002b92:	mov    dh,0x26
 1002b94:	(bad)  
 1002b95:	jp     0x1002ba0
 1002b97:	rex.WRXB scas al,BYTE PTR es:[rdi]
 1002b99:	pop    rax
 1002b9a:	xchg   esi,eax
 1002b9b:	sbb    eax,0xc55bc2cd
 1002ba0:	rex.WX
 1002ba1:	rex.R push 0xffffffff95a60f17
 1002ba7:	rex.WXB sub r13b,0x44
 1002bab:	out    0xab,eax
 1002bad:	push   0xffffffff84044d0b
 1002bb2:	(bad)  
 1002bb3:	(bad)  
 1002bb5:	rcl    ebp,cl
 1002bb7:	rex.WR pushf 
 1002bb9:	(bad)  
 1002bba:	xchg   esp,eax
 1002bbb:	rex int 0x5c
 1002bbe:	and    ch,ah
 1002bc0:	(bad)  
 1002bc1:	xor    al,0x7e
 1002bc3:	push   rcx
 1002bc4:	rex.RXB
 1002bc5:	ss xchg ebp,eax
 1002bc7:	rex.WRXB mov r8b,0xe9
 1002bca:	ja     0x1002c4b
 1002bcc:	fiadd  DWORD PTR [rax]
 1002bce:	adc    edx,DWORD PTR [rbp+0x6920f08]
 1002bd4:	mov    BYTE PTR [rdx+rax*1+0x4a],ah
 1002bd8:	mov    edx,?
 1002bda:	(bad)  
 1002bdb:	cmp    al,0x50
 1002bdd:	sbb    dh,BYTE PTR [rsi+0x263d5b9]
 1002be3:	cmp    bl,BYTE PTR [rbp-0x79]
 1002be6:	(bad)  
 1002be7:	rex.WXB movabs rax,ds:0x6534e4babf2efc33
 1002bf1:	(bad)  
 1002bf2:	pop    rsi
 1002bf3:	loop   0x1002ba5
 1002bf5:	jge    0x1002bf0
 1002bf7:	mov    r8b,0xfc
 1002bfa:	in     eax,0x83
 1002bfc:	sbb    dl,bl
 1002bfe:	fs mov esp,0xb8e051b0
 1002c04:	add    eax,0xa649c72b
 1002c09:	mov    rax,cr5
 1002c0c:	ja     0x1002c47
 1002c0e:	sub    eax,0x4b8c445e
 1002c13:	(bad)  
 1002c14:	rex.WR div BYTE PTR [rdi+rax*2-0x1b1cb255]
 1002c1c:	pop    rdi
 1002c1d:	enter  0xe2aa,0x93
 1002c21:	mov    BYTE PTR [rdx-0x27],al
 1002c24:	xchg   ebp,eax
 1002c25:	mov    bh,ch
 1002c27:	rex.WRB (bad) 
 1002c29:	ins    BYTE PTR es:[rdi],dx
 1002c2a:	rex xor eax,0x608c72e5
 1002c30:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1002c31:	and    DWORD PTR [rdi-0x3a],eax
 1002c34:	rex.RXB
 1002c35:	rex.WB push r13
 1002c37:	rex mov ebx,ebp
 1002c3a:	nop
 1002c3b:	rex.R jmp 0x1002c6b
 1002c3e:	rcl    edx,cl
 1002c40:	sub    bh,BYTE PTR [rdi+0x35]
 1002c43:	mov    ch,0xd8
 1002c45:	xor    eax,0x59b94f58
 1002c4a:	rcr    DWORD PTR [rdi],cl
 1002c4c:	adc    al,BYTE PTR [rdx]
 1002c4e:	outs   dx,DWORD PTR ds:[rsi]
 1002c4f:	(bad)  
 1002c50:	rol    DWORD PTR [rbp+0x42],1
 1002c53:	addr32 mov dl,0xb1
 1002c56:	sbb    eax,0xc93eb84a
 1002c5b:	rex.R cli 
 1002c5d:	mov    ah,0x28
 1002c5f:	xor    al,0xd7
 1002c61:	sti    
 1002c62:	imul   esi,DWORD PTR [rdx],0x4cdf897b
 1002c68:	mov    DWORD PTR [rax-0x4edbe5d2],ecx
 1002c6e:	btc    DWORD PTR [rsi],eax
 1002c71:	(bad)  
 1002c72:	(bad)  
 1002c73:	jrcxz  0x1002cf0
 1002c75:	cdq    
 1002c76:	test   BYTE PTR [rsi-0x70],0xad
 1002c7a:	rex.XB
 1002c7b:	rex.W cmp dil,BYTE PTR [rax-0x74]
 1002c7f:	ret    
 1002c80:	xchg   edi,eax
 1002c81:	out    dx,eax
 1002c82:	xchg   DWORD PTR [rax-0x25],ecx
 1002c85:	xchg   ebx,eax
 1002c86:	in     al,dx
 1002c87:	rex.R xchg edx,eax
 1002c89:	sahf   
 1002c8a:	stos   DWORD PTR es:[rdi],eax
 1002c8b:	fnstcw WORD PTR [rsi+0x3f]
 1002c8e:	xor    al,0xf3
 1002c90:	(bad)  
 1002c91:	add    DWORD PTR [rax+0x1c2afc32],0x4e
 1002c98:	movabs al,ds:0x86babda377849f3a
 1002ca1:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002ca2:	jmp    FWORD PTR [rax-0x5b]
 1002ca5:	(bad)  
 1002ca6:	fadd   QWORD PTR [rcx-0x72]
 1002ca9:	ficom  WORD PTR [rbx]
 1002cab:	adc    BYTE PTR [rax],ah
 1002cad:	xchg   edi,ebp
 1002caf:	xor    edi,DWORD PTR [rdi]
 1002cb1:	jp     0x1002c37
 1002cb3:	mov    ecx,?
 1002cb5:	(bad)  
 1002cb6:	rex.RX
 1002cb7:	rex.WXB xchg r12,rax
 1002cb9:	mov    cl,0x21
 1002cbb:	in     al,0x7f
 1002cbd:	pop    rbx
 1002cbe:	(bad)  
 1002cbf:	(bad)
 1002cc3:	cmp    DWORD PTR [rdx-0x5ab3ce9b],eax
 1002cc9:	mov    BYTE PTR [rax+0x5a],0x86
 1002ccd:	(bad)  
 1002cce:	out    dx,al
 1002ccf:	shr    DWORD PTR [rdi+0x66],0x8
 1002cd3:	jnp    0x1002c73
 1002cd5:	(bad)  
 1002cd6:	(bad)  
 1002cd7:	rex.WX sub QWORD PTR [rbp+0x6d3e221c],0xffffffff8de54b96
 1002ce2:	jl     0x1002d24
 1002ce4:	mov    dh,0x65
 1002ce6:	fiadd  DWORD PTR [rbx-0x49]
 1002ce9:	ins    BYTE PTR es:[rdi],dx
 1002cea:	jae    0x1002d4d
 1002cec:	(bad)  
 1002ced:	ins    BYTE PTR es:[rdi],dx
 1002cee:	adc    bl,BYTE PTR [rsi]
 1002cf0:	nop
 1002cf1:	(bad)  
 1002cf2:	push   0xffffffffb07d5f33
 1002cf7:	scas   al,BYTE PTR es:[rdi]
 1002cf9:	sub    ebp,esi
 1002cfb:	xchg   edi,eax
 1002cfc:	jb     0x1002cbf
 1002cfe:	xchg   bh,bl
 1002d00:	jb     0x1002d18
 1002d02:	icebp  
 1002d03:	jl     0x1002ce5
 1002d05:	sbb    eax,0x239145ac
 1002d0a:	movabs ds:0x540458970891b72a,al
 1002d13:	mul    BYTE PTR [rax]
 1002d15:	jno    0x1002cf0
 1002d17:	rex.X mov esp,0xee9dc5ec
 1002d1d:	xchg   ebp,eax
 1002d1e:	mov    bh,0xdd
 1002d20:	sub    bh,BYTE PTR [rbx+0x33]
 1002d23:	(bad)
 1002d26:	fimul  DWORD PTR [rcx+rdi*4+0x77]
 1002d2a:	(bad)  
 1002d2b:	mov    bl,BYTE PTR [rcx]
 1002d2d:	sub    ah,BYTE PTR [rbx]
 1002d2f:	xchg   edx,eax
 1002d30:	ins    DWORD PTR es:[rdi],dx
 1002d31:	(bad)  
 1002d32:	rex.WRXB (bad) 
 1002d34:	sub    bh,BYTE PTR [rax]
 1002d36:	adc    cl,BYTE PTR [rax-0x72]
 1002d39:	or     ch,al
 1002d3b:	(bad)  
 1002d3c:	movabs al,ds:0x2203e07f2d98fe4f
 1002d45:	(bad)  
 1002d46:	or     eax,DWORD PTR [rbp+rcx*4-0x17]
 1002d4a:	mov    ch,0x6a
 1002d4c:	and    dh,al
 1002d4e:	jmp    0x1492ef52
 1002d53:	popf   
 1002d54:	rol    BYTE PTR [rcx],0x48
 1002d57:	rex.B movabs ds:0x5f3eeae4f60af258,al
 1002d61:	rex.RB (bad) 
 1002d63:	fwait
 1002d64:	cwde   
 1002d65:	jnp    0x1002ce7
 1002d67:	rex.X (bad) 
 1002d69:	test   eax,0xb4c82e93
 1002d6e:	adc    ecx,ebx
 1002d70:	xchg   esi,eax
 1002d71:	addr32 (bad) 
 1002d73:	jrcxz  0x1002d9e
 1002d75:	rex.R cdq 
 1002d77:	rex.B sahf 
 1002d79:	xor    DWORD PTR [rdi-0x16],ebx
 1002d7c:	and    eax,0xd1e8d84d
 1002d81:	or     al,0x1d
 1002d83:	(bad)  
 1002d84:	cs addr32 (bad) 
 1002d87:	rex.WRXB movabs r10,0x726000ceb5f7bf58
 1002d91:	mov    bh,0x72
 1002d93:	push   rbp
 1002d94:	lods   al,BYTE PTR ds:[rsi]
 1002d95:	mov    BYTE PTR [rip+0xffffffffe2f8964a],dh        # 0xffffffffe3f8c3e5
 1002d9b:	xchg   BYTE PTR [rsi],ah
 1002d9d:	lods   al,BYTE PTR ds:[rsi]
 1002d9e:	jle    0x1002d2f
 1002da0:	out    0x5e,eax
 1002da2:	(bad)  
 1002da3:	rex.XB mov r9d,0x9c4c984e
 1002da9:	jmp    0xffffffff9aaa4004
 1002dae:	or     dh,al
 1002db0:	mov    al,0x6
 1002db2:	cli    
 1002db3:	fdivrp st(0),st
 1002db5:	popf   
 1002db6:	mov    ah,0x47
 1002db8:	mov    edi,0x2a6b857
 1002dbd:	stc    
 1002dbe:	sahf   
 1002dbf:	xchg   ecx,eax
 1002dc0:	imul   ebp,eax,0xffffff9e
 1002dc3:	ret    0x9d47
 1002dc6:	mov    edx,0xe35b9647
 1002dcb:	fs jae 0x1002dea
 1002dce:	mov    ch,BYTE PTR [rdx]
 1002dd0:	mov    edx,0xa87ed456
 1002dd5:	(bad)  
 1002dd6:	(bad)  
 1002dd7:	test   BYTE PTR [rdx+rdx*8],r14b
 1002ddb:	and    eax,0x822249f9
 1002de0:	and    ebp,edx
 1002de2:	rex.X xor al,0xc4
 1002de5:	sbb    BYTE PTR [rax],al
 1002de7:	rex.WX mov dil,BYTE PTR [rbp-0x7f87ea3c]
 1002dee:	retf   0x40a7
 1002df1:	and    edx,esi
 1002df3:	rex.WRXB pop r8
 1002df5:	ret    0x42c0
 1002df8:	xchg   esp,eax
 1002df9:	mov    al,0xb4
 1002dfb:	leave  
 1002dfc:	cmp    eax,0x339920d2
 1002e01:	(bad)  
 1002e02:	shr    DWORD PTR [rbx+rbp*2-0x76bcb924],1
 1002e09:	(bad)  
 1002e0b:	adc    dh,bh
 1002e0d:	(bad)  
 1002e0e:	(bad)  
 1002e0f:	push   rsp
 1002e10:	ret    0xc285
 1002e13:	xor    eax,0x470947f4
 1002e18:	lahf   
 1002e19:	nop
 1002e1a:	push   rax
 1002e1b:	push   rax
 1002e1c:	(bad)  
 1002e1d:	rex.WB push r11
 1002e1f:	shl    dl,1
 1002e21:	xchg   esp,eax
 1002e22:	jrcxz  0x1002e1e
 1002e24:	xor    DWORD PTR [rsi-0x7c],esi
 1002e27:	rex.X movabs ds:0x16e7339f55c43b63,eax
 1002e31:	(bad)  
 1002e32:	movabs ds:0xaf994926e88502,eax
 1002e3b:	movabs ds:0x9e24c6d5934c78b7,eax
 1002e44:	(bad)  
 1002e45:	fadd   DWORD PTR [rax+rax*2-0x59704345]
 1002e4c:	mov    DWORD PTR [rax+0x2],edi
 1002e4f:	cmp    DWORD PTR [rcx+rax*1],ebp
 1002e52:	(bad)
 1002e55:	call   0x1d94799c
 1002e5a:	pop    rcx
 1002e5b:	push   rax
 1002e5c:	rex.RX adc BYTE PTR [rdx+0x5c],r15b
 1002e60:	mov    dh,0x56
 1002e62:	jmp    0x30e97b9a
 1002e67:	rex.R cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002e69:	rex.WB stc 
 1002e6b:	test   BYTE PTR [rbx],bl
 1002e6d:	or     eax,0xf5557314
 1002e72:	xor    dl,bh
 1002e74:	xor    eax,0xa4428c77
 1002e79:	jle    0x1002e5c
 1002e7b:	pop    rdx
 1002e7c:	(bad)  
 1002e7d:	shr    DWORD PTR [rsi-0x31],cl
 1002e80:	sti    
 1002e81:	jl     0x1002ecc
 1002e83:	in     al,0x44
 1002e85:	lock fisttp QWORD PTR [rax-0x6d]
 1002e89:	xchg   esi,eax
 1002e8a:	(bad)  
 1002e8b:	test   DWORD PTR [rsi+0x26],eax
 1002e8e:	xor    dl,al
 1002e90:	(bad)  
 1002e91:	sar    BYTE PTR [rbx-0x78],1
 1002e94:	(bad)  
 1002e95:	(bad)  
 1002e96:	(bad)  
 1002e97:	rex.WRXB movabs ds:0xc796f8e7427d3322,al
 1002ea1:	jno    0x1002e2f
 1002ea3:	(bad)  
 1002ea4:	stc    
 1002ea5:	cdq    
 1002ea6:	icebp  
 1002ea7:	test   QWORD PTR [r13+0x77],rax
 1002eab:	xor    DWORD PTR [rax+0x10],ebp
 1002eae:	xor    al,0xcb
 1002eb0:	je     0x1002ee7
 1002eb2:	test   DWORD PTR [rsi-0x1d],ecx
 1002eb5:	ret    0x4cae
 1002eb8:	mov    bh,0x91
 1002eba:	sub    eax,0xc1d5d4a
 1002ebf:	cwde   
 1002ec0:	(bad)  
 1002ec1:	call   0x1e0030b8
 1002ec6:	jle    0x1002f13
 1002ec8:	movabs ds:0x9d8140fe2a120c97,al
 1002ed1:	and    eax,0x1eec6100
 1002ed6:	push   rbp
 1002ed7:	rex.WXB xchg r9,rax
 1002eda:	clc    
 1002edb:	or     eax,DWORD PTR [rip+0x12560849]        # 0x1356372a
 1002ee1:	xor    edi,ebx
 1002ee3:	shl    BYTE PTR [rsi],1
 1002ee5:	fwait
 1002ee6:	adc    cl,BYTE PTR [rbp+rbp*4+0x60]
 1002eea:	fs push rax
 1002eec:	cmp    al,dl
 1002eee:	vminps xmm5,xmm0,XMMWORD PTR [rdx]
 1002ef2:	xlat   BYTE PTR ds:[rbx]
 1002ef3:	push   rbp
 1002ef4:	cmp    dh,ch
 1002ef6:	jbe    0x1002f43
 1002ef8:	test   al,al
 1002efa:	pop    QWORD PTR [rdx-0x24]
 1002efd:	jae    0x1002e85
 1002eff:	jb     0x1002f2d
 1002f01:	(bad)  
 1002f02:	and    DWORD PTR [rsi],esp
 1002f04:	leave  
 1002f05:	mov    ebp,0x1eb742a8
 1002f0a:	cld    
 1002f0b:	loopne 0x1002f7e
 1002f0d:	es in  eax,dx
 1002f0f:	rex.WRX
 1002f10:	rex.XB adc al,0x28
 1002f13:	shl    BYTE PTR [rcx+rcx*4-0x4b],cl
 1002f17:	rex.WB xchg BYTE PTR [r8-0x54],sil
 1002f1b:	xor    bl,BYTE PTR [rbx]
 1002f1d:	jne    0x1002eaf
 1002f1f:	outs   dx,BYTE PTR ds:[rsi]
 1002f20:	lock (bad) 
 1002f22:	loopne 0x1002ea6
 1002f24:	sub    al,BYTE PTR [rcx-0x4b]
 1002f27:	rex.R mov esp,0x5709252
 1002f2d:	and    al,0xf5
 1002f2f:	jrcxz  0x1002f88
 1002f31:	pop    rbp
 1002f32:	sub    edx,ebx
 1002f34:	adc    eax,0x894abd3d
 1002f39:	rex.WRXB cdqe 
 1002f3b:	cmp    dh,BYTE PTR [rdi]
 1002f3d:	retf   0x602a
 1002f40:	jg     0x1002ecc
 1002f42:	imul   esp,esp,0x47ad9e40
 1002f48:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002f49:	(bad)  
 1002f4a:	js     0x1002f97
 1002f4c:	cli    
 1002f4d:	retf   0xa90c
 1002f50:	mov    ecx,0x699d3338
 1002f55:	shl    eax,cl
 1002f57:	rex.WX movabs ds:0x4c3c485f1ccd9214,rax
 1002f61:	and    ebx,DWORD PTR [rsi-0x1e]
 1002f64:	(bad)  
 1002f65:	cvtps2pi mm1,QWORD PTR [rdx-0x6d]
 1002f69:	test   al,0x1a
 1002f6b:	movabs al,ds:0xb008e5cb5c35e697
 1002f74:	fmul   DWORD PTR [rdx+rbp*1]
 1002f77:	rex.WRXB xchg r10,rax
 1002f79:	xchg   esi,edx
 1002f7b:	rex.XB (bad) 
 1002f7d:	movabs ds:0x26b9be4349e31d4d,al
 1002f86:	mov    dh,0x4e
 1002f88:	sub    BYTE PTR [rdx],0x48
 1002f8b:	sahf   
 1002f8c:	xchg   ebp,eax
 1002f8d:	(bad)
 1002f90:	(bad)  
 1002f91:	test   ebx,edx
 1002f93:	es add al,0x13
 1002f96:	(bad)  
 1002f97:	rex.WX lods rax,QWORD PTR ds:[rsi]
 1002f99:	adc    al,0x8d
 1002f9b:	enter  0x9ec0,0x62
 1002f9f:	xor    ebx,DWORD PTR [rbx+0x10]
 1002fa2:	scas   eax,DWORD PTR es:[rdi]
 1002fa3:	mov    cl,0x19
 1002fa5:	xchg   edx,eax
 1002fa6:	xchg   esp,eax
 1002fa7:	rex.WXB stos QWORD PTR es:[rdi],rax
 1002fa9:	(bad)  
 1002faa:	(bad)  
 1002fab:	ja     0x1002f8e
 1002fad:	cmp    al,BYTE PTR [rsi-0x45]
 1002fb0:	xor    al,0xb1
 1002fb2:	scas   al,BYTE PTR es:[rdi]
 1002fb3:	fsincos 
 1002fb5:	pop    rdx
 1002fb6:	push   rdx
 1002fb7:	rex.WRX test rax,0x5c04dcb5
 1002fbd:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002fbe:	xor    eax,edi
 1002fc0:	movabs ds:0xa44e7db096c040d4,eax
 1002fc9:	or     al,0xf1
 1002fcb:	jne    0x1002fdf
 1002fcd:	cmp    bl,ch
 1002fcf:	adc    ebp,DWORD PTR [rdx]
 1002fd1:	xor    ah,bh
 1002fd3:	xor    eax,0x43e4d009
 1002fd8:	movabs eax,ds:0xe96654ef0abfb7ea
 1002fe1:	xchg   ecx,eax
 1002fe2:	(bad)  
 1002fe3:	rex.B
 1002fe4:	rex.RB sub al,0x7a
 1002fe7:	test   QWORD PTR [rdx],rbx
 1002fea:	pop    rbx
 1002feb:	cmp    eax,0x297374fe
 1002ff0:	cld    
 1002ff1:	movsxd esp,DWORD PTR [rdx]
 1002ff3:	adc    DWORD PTR [rdi-0x4db7ee89],ebp
 1002ff9:	int3   
 1002ffa:	icebp  
 1002ffb:	xor    al,0xeb
 1002ffd:	jmp    0xffffffff98b0ab72
 1003002:	rex.WRX clc 
 1003004:	xlat   BYTE PTR ds:[rbx]
 1003005:	repz dec DWORD PTR [rsi-0x54]
 1003009:	stos   BYTE PTR es:[rdi],al
 100300a:	cmp    BYTE PTR [rax],0x5e
 100300d:	adc    ebp,ebx
 100300f:	xor    al,0x14
 1003011:	cwde   
 1003012:	sbb    cl,BYTE PTR [rsp+rbp*1-0x5d]
 1003016:	jle    0x1003067
 1003018:	cdq    
 1003019:	mov    ebp,0x2005eaaf
 100301e:	loop   0x100307e
 1003020:	cmp    al,0x61
 1003022:	enter  0x685e,0x6c
 1003026:	adc    al,0x4a
 1003028:	mov    ebx,0xb8f4bc6d
 100302d:	sar    DWORD PTR [rip+0xffffffff9f29a416],1        # 0xffffffffa029d449
 1003033:	sub    DWORD PTR [rdx-0x9],edx
 1003036:	sub    eax,DWORD PTR [rsi-0x68]
 1003039:	push   rbp
 100303a:	data16 rex.W movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100303d:	push   rcx
 100303e:	data16 stc 
 1003040:	sub    dl,0x1e
 1003043:	sbb    ch,ah
 1003045:	retf   0x408b
 1003048:	mov    edi,?
 100304a:	ja     0x1002fcd
 100304c:	sub    al,BYTE PTR [rsp+riz*8-0x368c30d6]
 1003053:	loopne 0x100300d
 1003055:	lahf   
 1003056:	xlat   BYTE PTR ds:[rbx]
 1003057:	rex.RB xchg r15d,eax
 1003059:	sbb    eax,0x5cf56606
 100305e:	cmovl  esp,DWORD PTR [rsi]
 1003061:	mov    cl,cl
 1003063:	enterw 0x5911,0x43
 1003068:	or     edi,0xf60a27ae
 100306e:	adc    eax,0xca72da19
 1003073:	xlat   BYTE PTR ds:[rbx]
 1003074:	rex.WX (bad) 
 1003076:	push   rsi
 1003077:	rex.W pushf 
 1003079:	fistp  DWORD PTR [rax-0x5919fe0b]
 100307f:	movabs ds:0x41d2895b3a199961,al
 1003088:	movabs ds:0xf18f251e710b3e04,eax
 1003091:	rcr    DWORD PTR [rbp-0x1],cl
 1003094:	rcr    DWORD PTR [rcx-0x684fb005],0x1b
 100309b:	sbb    ebp,DWORD PTR [rbx]
 100309d:	sahf   
 100309e:	fwait
 100309f:	sub    eax,0xe2c1cc88
 10030a4:	rex.WRX
 10030a5:	lock test eax,0x4518ab49
 10030ab:	rex.RB jmp 0x10030e3
 10030ae:	(bad)  
 10030af:	es mov eax,0x941b6a2e
 10030b5:	imul   esp,DWORD PTR [rcx],0xcdb78840
 10030bb:	jmp    0x6a54718
 10030c0:	sbb    esp,DWORD PTR [rip+0x29705918]        # 0x2a7089de
 10030c6:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10030c7:	rex.RB stos DWORD PTR es:[rdi],eax
 10030c9:	pop    rdi
 10030ca:	add    ebx,eax
 10030cc:	(bad)
 10030cf:	pop    rdx
 10030d0:	xchg   ebp,eax
 10030d1:	jne    0x1003122
 10030d3:	xchg   DWORD PTR [rdi-0x5],ebx
 10030d6:	inc    DWORD PTR [rax-0x6a]
 10030d9:	scas   eax,DWORD PTR es:[rdi]
 10030da:	sti    
 10030db:	inc    DWORD PTR [rdx+0xaefe350]
 10030e1:	mov    ch,0x3
 10030e3:	xor    rsp,QWORD PTR gs:[r11+0x4f]
 10030e8:	mov    dl,0xb0
 10030ea:	movabs ds:0x1026167b9599a310,eax
 10030f3:	call   0x49276f1c
 10030f8:	test   DWORD PTR [rdx+0x1be79748],esi
 10030fe:	pop    rcx
 10030ff:	mov    eax,DWORD PTR [rsi]
 1003101:	test   al,0xa3
 1003103:	ins    BYTE PTR es:[rdi],dx
 1003104:	mov    esi,ebx
 1003106:	stc    
 1003107:	rex.RX xchg esi,eax
 1003109:	cmc    
 100310a:	(bad)  
 100310b:	mov    edx,0x438ea37d
 1003110:	rex (bad) 
 1003112:	(bad)  
 1003113:	push   QWORD PTR es:[rsi+rax*4-0x6fe473b5]
 100311b:	push   rax
 100311c:	ror    BYTE PTR [rsi-0x49fe4f7d],cl
 1003122:	movabs al,ds:0xf6e4b9434afdef9b
 100312b:	shl    BYTE PTR [rsp+rdi*8+0x74],1
 100312f:	sub    al,0x22
 1003131:	cld    
 1003132:	loope  0x1003168
 1003134:	rex.RX frstor [rip+0x202ea94a]        # 0x212eda85
 100313b:	fwait
 100313c:	rex.XB cwde 
 100313e:	lock (bad) 
 1003140:	xor    ecx,ecx
 1003142:	(bad)  
 1003143:	and    BYTE PTR [rdx-0x57b865e9],bh
 1003149:	pop    rbx
 100314a:	jno    0x1003166
 100314c:	push   rsi
 100314d:	loop   0x100310f
 100314f:	push   rsp
 1003150:	and    edi,ecx
 1003152:	pop    rsi
 1003153:	(bad)  
 1003154:	cmp    ah,BYTE PTR [rcx-0x467ebaee]
 100315a:	fcomp  DWORD PTR [rsi+rax*4+0x3b]
 100315e:	pop    rsp
 100315f:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1003160:	or     al,ah
 1003162:	pushf  
 1003163:	jg     0x1003184
 1003165:	(bad)  
 1003166:	adc    al,0x43
 1003168:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1003169:	stc    
 100316a:	jle    0x10031e5
 100316c:	mov    dl,0x43
 100316e:	push   rcx
 100316f:	(bad)  
 1003170:	ins    BYTE PTR es:[rdi],dx
 1003171:	sbb    ebp,DWORD PTR [rax-0x2f8d35b9]
 1003177:	rex.X mov edi,0xa9c36d1f
 100317d:	mov    esp,0xf64e9d76
 1003182:	mov    QWORD PTR [rcx+0xd],r10
 1003186:	rex.W
 1003187:	rex.RB lods eax,DWORD PTR ds:[rsi]
 1003189:	cwde   
 100318a:	or     esi,DWORD PTR [rsp+rcx*8+0x238444a7]
 1003191:	mov    ebp,0xb9796c5d
 1003196:	or     cl,BYTE PTR [rax-0x7e]
 1003199:	(bad)  
 100319a:	je     0x100312a
 100319c:	cmc    
 100319d:	test   al,0x99
 100319f:	adc    DWORD PTR [rdx+rcx*4-0x27687e54],0x90a24c3e
 10031aa:	in     ax,0x75
 10031ad:	in     al,0xd4
 10031af:	sub    BYTE PTR [rdi-0x13],bl
 10031b2:	retf   0x1174
 10031b5:	rex.RXB ins DWORD PTR es:[rdi],dx
 10031b7:	rex.X mov bpl,BYTE PTR [rax-0x3decb300]
 10031be:	rex.WR jmp 0x100317b
 10031c1:	(bad)  
 10031c2:	sub    cl,BYTE PTR [rdx+0x4aac91da]
 10031c8:	lahf   
 10031c9:	sbb    DWORD PTR [rbx-0x6],esi
 10031cc:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10031cd:	leave  
 10031ce:	jns    0x100315a
 10031d0:	sub    al,BYTE PTR [rsi-0x40]
 10031d3:	add    ebp,esp
 10031d5:	outs   dx,BYTE PTR ds:[rsi]
 10031d6:	je     0x1003224
 10031d8:	lea    ebx,[rdi]
 10031da:	mov    esi,0x34493a69
 10031df:	(bad)  
 10031e0:	lods   eax,DWORD PTR ds:[rsi]
 10031e1:	rex.X or ecx,edx
 10031e4:	adc    dh,BYTE PTR [rax]
 10031e6:	rex.R
 10031e7:	rex.WRX mov sil,0x2e
 10031ea:	xchg   ecx,eax
 10031eb:	xlat   BYTE PTR ds:[rbx]
 10031ec:	int3   
 10031ed:	adc    al,0xca
 10031ef:	rex.WRB add BYTE PTR [r9d+0x0],r12b
 10031f4:	imul   eax,DWORD PTR [rax],0x53006c
 10031fa:	ins    BYTE PTR es:[rdi],dx
 10031fb:	add    BYTE PTR [rdi+0x0],ch
 10031fe:	je     0x1003200
 1003200:	push   rax
 1003201:	add    BYTE PTR [rdx+0x0],dh
 1003204:	add    BYTE PTR gs:[rsi+0x0],ah
 1003208:	imul   eax,DWORD PTR [rax],0x78
 100320e:	add    BYTE PTR [rax],al
 1003210:	push   rsp
 1003211:	add    BYTE PTR [rcx+0x0],ch
 1003214:	ins    DWORD PTR es:[rdi],dx
 1003215:	add    BYTE PTR [rbp+0x0],ah
 1003218:	outs   dx,DWORD PTR ds:[rsi]
 1003219:	add    BYTE PTR [rbp+0x0],dh
 100321c:	je     0x100321e
 100321e:	add    BYTE PTR [rax],al
 1003220:	pop    rsp
 1003221:	add    BYTE PTR [rax+rax*1+0x2e],bl
 1003225:	add    BYTE PTR [rax+rax*1+0x6d],bl
 1003229:	add    BYTE PTR [rcx+0x0],ah
 100322c:	imul   eax,DWORD PTR [rax],0x73006c
 1003232:	ins    BYTE PTR es:[rdi],dx
 1003233:	add    BYTE PTR [rdi+0x0],ch
 1003236:	je     0x1003238
 1003238:	pop    rsp
 1003239:	add    BYTE PTR [rdi+0x0],dl
 100323c:	add    BYTE PTR [r9+0x0],cl
 1003240:	push   rsp
 1003241:	add    BYTE PTR [rsi+0x0],al
 1003244:	rex.WRXB add BYTE PTR [r10+0x0],r10b
 1003248:	add    BYTE PTR cs:[rbp+0x0],al
 100324c:	pop    rax
 100324d:	add    BYTE PTR [rbp+0x0],al
 1003250:	pop    rsp
	...
 100325d:	add    BYTE PTR [rax],al
 100325f:	add    BYTE PTR [rbx+0x0],dl
 1003262:	rex.WRXB add BYTE PTR [r14+0x0],r8b
 1003266:	push   rsp
 1003267:	add    BYTE PTR [rdi+0x0],dl
 100326a:	add    BYTE PTR [r10+0x0],dl
 100326e:	add    BYTE PTR [r8+rax*1+0x4d],r11b
 1003273:	add    BYTE PTR [rcx+0x0],ch
 1003276:	movsxd eax,DWORD PTR [rax]
 1003278:	jb     0x100327a
 100327a:	outs   dx,DWORD PTR ds:[rsi]
 100327b:	add    BYTE PTR [rbx+0x0],dh
 100327e:	outs   dx,DWORD PTR ds:[rsi]
 100327f:	add    BYTE PTR [rsi+0x0],ah
 1003282:	je     0x1003284
 1003284:	pop    rsp
 1003285:	add    BYTE PTR [rbp+0x0],cl
 1003288:	imul   eax,DWORD PTR [rax],0x720063
 100328e:	outs   dx,DWORD PTR ds:[rsi]
 100328f:	add    BYTE PTR [rbx+0x0],dh
 1003292:	outs   dx,DWORD PTR ds:[rsi]
 1003293:	add    BYTE PTR [rsi+0x0],ah
 1003296:	je     0x1003298
 1003298:	and    BYTE PTR [rax],al
 100329a:	push   rbx
 100329b:	add    BYTE PTR [rcx+0x0],dl
 100329e:	rex.WR add BYTE PTR [rax],r12b
 10032a1:	add    BYTE PTR [rbx+0x0],dl
 10032a4:	add    BYTE PTR gs:[rdx+0x0],dh
 10032a8:	jbe    0x10032aa
 10032aa:	add    BYTE PTR gs:[rdx+0x0],dh
 10032ae:	pop    rsp
 10032af:	add    BYTE PTR [rcx],dh
 10032b1:	add    BYTE PTR [rcx],dh
 10032b3:	add    BYTE PTR [rax],dh
 10032b5:	add    BYTE PTR [rax+rax*1+0x53],bl
 10032b9:	add    BYTE PTR [rbx+0x0],dl
 10032bc:	rex.WB add BYTE PTR [r11+0x0],dl
 10032c0:	pop    rsp
 10032c1:	add    BYTE PTR [rdi+0x0],dl
 10032c4:	(bad)  
 10032c5:	add    BYTE PTR [rcx+0x0],ch
 10032c8:	je     0x10032ca
 10032ca:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 10032ce:	push   rbx
 10032cf:	add    BYTE PTR [rax+rax*1+0x61],dh
 10032d3:	add    BYTE PTR [rdx+0x0],dh
 10032d6:	je     0x10032d8
 10032d8:	jne    0x10032da
 10032da:	jo     0x10032dc
 10032dc:	add    BYTE PTR [rax],al
 10032de:	add    BYTE PTR [rax],al
 10032e0:	push   rbx
 10032e1:	add    BYTE PTR [rdi+0x0],cl
 10032e4:	add    BYTE PTR [rax+r8*1+0x57],r10b
 10032e9:	add    BYTE PTR [rcx+0x0],al
 10032ec:	push   rdx
 10032ed:	add    BYTE PTR [rbp+0x0],al
 10032f0:	pop    rsp
 10032f1:	add    BYTE PTR [rbp+0x0],cl
 10032f4:	imul   eax,DWORD PTR [rax],0x720063
 10032fa:	outs   dx,DWORD PTR ds:[rsi]
 10032fb:	add    BYTE PTR [rbx+0x0],dh
 10032fe:	outs   dx,DWORD PTR ds:[rsi]
 10032ff:	add    BYTE PTR [rsi+0x0],ah
 1003302:	je     0x1003304
 1003304:	pop    rsp
 1003305:	add    BYTE PTR [rbp+0x0],cl
 1003308:	imul   eax,DWORD PTR [rax],0x720063
 100330e:	outs   dx,DWORD PTR ds:[rsi]
 100330f:	add    BYTE PTR [rbx+0x0],dh
 1003312:	outs   dx,DWORD PTR ds:[rsi]
 1003313:	add    BYTE PTR [rsi+0x0],ah
 1003316:	je     0x1003318
 1003318:	and    BYTE PTR [rax],al
 100331a:	push   rbx
 100331b:	add    BYTE PTR [rcx+0x0],dl
 100331e:	rex.WR add BYTE PTR [rax],r12b
 1003321:	add    BYTE PTR [rbx+0x0],dl
 1003324:	add    BYTE PTR gs:[rdx+0x0],dh
 1003328:	jbe    0x100332a
 100332a:	add    BYTE PTR gs:[rdx+0x0],dh
 100332e:	pop    rsp
 100332f:	add    BYTE PTR [rcx],dh
 1003331:	add    BYTE PTR [rcx],dh
 1003333:	add    BYTE PTR [rax],dh
 1003335:	add    BYTE PTR [rax+rax*1+0x53],bl
 1003339:	add    BYTE PTR [rbx+0x0],dl
 100333c:	rex.WB add BYTE PTR [r11+0x0],dl
 1003340:	pop    rsp
 1003341:	add    BYTE PTR [rdi+0x0],dl
 1003344:	(bad)  
 1003345:	add    BYTE PTR [rcx+0x0],ch
 1003348:	je     0x100334a
 100334a:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 100334e:	push   rbx
 100334f:	add    BYTE PTR [rax+rax*1+0x61],dh
 1003353:	add    BYTE PTR [rdx+0x0],dh
 1003356:	je     0x1003358
 1003358:	jne    0x100335a
 100335a:	jo     0x100335c
 100335c:	pop    rsp
 100335d:	add    BYTE PTR [rcx+0x0],cl
 1003360:	push   rbx
 1003361:	add    BYTE PTR [rbx+0x0],dl
 1003364:	add    BYTE PTR gs:[rdx+0x0],dh
 1003368:	jbe    0x100336a
 100336a:	add    BYTE PTR gs:[rdx+0x0],dh
 100336e:	add    BYTE PTR [rax],al
 1003370:	push   rbx
 1003371:	add    BYTE PTR [rdi+0x0],cl
 1003374:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1003379:	add    BYTE PTR [rcx+0x0],al
 100337c:	push   rdx
 100337d:	add    BYTE PTR [rbp+0x0],al
 1003380:	pop    rsp
 1003381:	add    BYTE PTR [rbp+0x0],cl
 1003384:	imul   eax,DWORD PTR [rax],0x720063
 100338a:	outs   dx,DWORD PTR ds:[rsi]
 100338b:	add    BYTE PTR [rbx+0x0],dh
 100338e:	outs   dx,DWORD PTR ds:[rsi]
 100338f:	add    BYTE PTR [rsi+0x0],ah
 1003392:	je     0x1003394
 1003394:	pop    rsp
 1003395:	add    BYTE PTR [rbp+0x0],cl
 1003398:	imul   eax,DWORD PTR [rax],0x720063
 100339e:	outs   dx,DWORD PTR ds:[rsi]
 100339f:	add    BYTE PTR [rbx+0x0],dh
 10033a2:	outs   dx,DWORD PTR ds:[rsi]
 10033a3:	add    BYTE PTR [rsi+0x0],ah
 10033a6:	je     0x10033a8
 10033a8:	and    BYTE PTR [rax],al
 10033aa:	push   rbx
 10033ab:	add    BYTE PTR [rcx+0x0],dl
 10033ae:	rex.WR add BYTE PTR [rax],r12b
 10033b1:	add    BYTE PTR [rbx+0x0],dl
 10033b4:	add    BYTE PTR gs:[rdx+0x0],dh
 10033b8:	jbe    0x10033ba
 10033ba:	add    BYTE PTR gs:[rdx+0x0],dh
 10033be:	pop    rsp
 10033bf:	add    BYTE PTR [rcx],dh
 10033c1:	add    BYTE PTR [rcx],dh
 10033c3:	add    BYTE PTR [rax],dh
 10033c5:	add    BYTE PTR [rax+rax*1+0x53],bl
 10033c9:	add    BYTE PTR [rbx+0x0],dl
 10033cc:	rex.WB add BYTE PTR [r11+0x0],dl
 10033d0:	pop    rsp
 10033d1:	add    BYTE PTR [rdi+0x0],dl
 10033d4:	(bad)  
 10033d5:	add    BYTE PTR [rcx+0x0],ch
 10033d8:	je     0x10033da
 10033da:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 10033de:	push   rbx
 10033df:	add    BYTE PTR [rax+rax*1+0x61],dh
 10033e3:	add    BYTE PTR [rdx+0x0],dh
 10033e6:	je     0x10033e8
 10033e8:	jne    0x10033ea
 10033ea:	jo     0x10033ec
 10033ec:	pop    rsp
 10033ed:	add    BYTE PTR [rsi+0x0],al
 10033f0:	imul   eax,DWORD PTR [rax],0x65006c
	...
 10033fe:	add    BYTE PTR [rax],al
 1003400:	push   rbx
 1003401:	add    BYTE PTR [rdi+0x0],cl
 1003404:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1003409:	add    BYTE PTR [rcx+0x0],al
 100340c:	push   rdx
 100340d:	add    BYTE PTR [rbp+0x0],al
 1003410:	pop    rsp
 1003411:	add    BYTE PTR [rbp+0x0],cl
 1003414:	imul   eax,DWORD PTR [rax],0x720063
 100341a:	outs   dx,DWORD PTR ds:[rsi]
 100341b:	add    BYTE PTR [rbx+0x0],dh
 100341e:	outs   dx,DWORD PTR ds:[rsi]
 100341f:	add    BYTE PTR [rsi+0x0],ah
 1003422:	je     0x1003424
 1003424:	pop    rsp
 1003425:	add    BYTE PTR [rbp+0x0],cl
 1003428:	imul   eax,DWORD PTR [rax],0x720063
 100342e:	outs   dx,DWORD PTR ds:[rsi]
 100342f:	add    BYTE PTR [rbx+0x0],dh
 1003432:	outs   dx,DWORD PTR ds:[rsi]
 1003433:	add    BYTE PTR [rsi+0x0],ah
 1003436:	je     0x1003438
 1003438:	and    BYTE PTR [rax],al
 100343a:	push   rbx
 100343b:	add    BYTE PTR [rcx+0x0],dl
 100343e:	rex.WR add BYTE PTR [rax],r12b
 1003441:	add    BYTE PTR [rbx+0x0],dl
 1003444:	add    BYTE PTR gs:[rdx+0x0],dh
 1003448:	jbe    0x100344a
 100344a:	add    BYTE PTR gs:[rdx+0x0],dh
 100344e:	pop    rsp
 100344f:	add    BYTE PTR [rcx],dh
 1003451:	add    BYTE PTR [rcx],dh
 1003453:	add    BYTE PTR [rax],dh
 1003455:	add    BYTE PTR [rax+rax*1+0x53],bl
 1003459:	add    BYTE PTR [rbx+0x0],dl
 100345c:	rex.WB add BYTE PTR [r11+0x0],dl
 1003460:	pop    rsp
 1003461:	add    BYTE PTR [rdi+0x0],dl
 1003464:	(bad)  
 1003465:	add    BYTE PTR [rcx+0x0],ch
 1003468:	je     0x100346a
 100346a:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 100346e:	push   rbx
 100346f:	add    BYTE PTR [rax+rax*1+0x61],dh
 1003473:	add    BYTE PTR [rdx+0x0],dh
 1003476:	je     0x1003478
 1003478:	jne    0x100347a
 100347a:	jo     0x100347c
 100347c:	pop    rsp
 100347d:	add    BYTE PTR [rbx+0x0],dl
 1003480:	push   rcx
 1003481:	add    BYTE PTR [rax+rax*1+0x0],cl
	...
 100348d:	add    BYTE PTR [rax],al
 100348f:	add    BYTE PTR [rbx+0x0],dl
 1003492:	rex.WRXB add BYTE PTR [r14+0x0],r8b
 1003496:	push   rsp
 1003497:	add    BYTE PTR [rdi+0x0],dl
 100349a:	add    BYTE PTR [r10+0x0],dl
 100349e:	add    BYTE PTR [r8+rax*1+0x4d],r11b
 10034a3:	add    BYTE PTR [rcx+0x0],ch
 10034a6:	movsxd eax,DWORD PTR [rax]
 10034a8:	jb     0x10034aa
 10034aa:	outs   dx,DWORD PTR ds:[rsi]
 10034ab:	add    BYTE PTR [rbx+0x0],dh
 10034ae:	outs   dx,DWORD PTR ds:[rsi]
 10034af:	add    BYTE PTR [rsi+0x0],ah
 10034b2:	je     0x10034b4
 10034b4:	pop    rsp
 10034b5:	add    BYTE PTR [rbp+0x0],cl
 10034b8:	imul   eax,DWORD PTR [rax],0x720063
 10034be:	outs   dx,DWORD PTR ds:[rsi]
 10034bf:	add    BYTE PTR [rbx+0x0],dh
 10034c2:	outs   dx,DWORD PTR ds:[rsi]
 10034c3:	add    BYTE PTR [rsi+0x0],ah
 10034c6:	je     0x10034c8
 10034c8:	and    BYTE PTR [rax],al
 10034ca:	push   rbx
 10034cb:	add    BYTE PTR [rcx+0x0],dl
 10034ce:	rex.WR add BYTE PTR [rax],r12b
 10034d1:	add    BYTE PTR [rbx+0x0],dl
 10034d4:	add    BYTE PTR gs:[rdx+0x0],dh
 10034d8:	jbe    0x10034da
 10034da:	add    BYTE PTR gs:[rdx+0x0],dh
 10034de:	pop    rsp
 10034df:	add    BYTE PTR [rcx],dh
 10034e1:	add    BYTE PTR [rcx],dh
 10034e3:	add    BYTE PTR [rax],dh
 10034e5:	add    BYTE PTR [rax+rax*1+0x53],bl
 10034e9:	add    BYTE PTR [rbx+0x0],dl
 10034ec:	rex.WB add BYTE PTR [r11+0x0],dl
 10034f0:	pop    rsp
 10034f1:	add    BYTE PTR [rdi+0x0],dl
 10034f4:	(bad)  
 10034f5:	add    BYTE PTR [rcx+0x0],ch
 10034f8:	je     0x10034fa
 10034fa:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 10034fe:	push   rbx
 10034ff:	add    BYTE PTR [rax+rax*1+0x61],dh
 1003503:	add    BYTE PTR [rdx+0x0],dh
 1003506:	je     0x1003508
 1003508:	jne    0x100350a
 100350a:	jo     0x100350c
 100350c:	pop    rsp
 100350d:	add    BYTE PTR [rax+0x0],dl
 1003510:	jb     0x1003512
 1003512:	outs   dx,DWORD PTR ds:[rsi]
 1003513:	add    BYTE PTR [rdx+0x0],ch
 1003516:	add    BYTE PTR gs:[rbx+0x0],ah
 100351a:	je     0x100351c
 100351c:	add    BYTE PTR [rax],al
 100351e:	add    BYTE PTR [rax],al
 1003520:	and    al,BYTE PTR [rip+0x31993]        # 0x1034eb9
 1003526:	add    BYTE PTR [rax],al
 1003528:	ins    BYTE PTR es:[rdi],dx
 1003529:	add    DWORD PTR [rcx],0x0
 100352c:	add    DWORD PTR [rax],eax
 100352e:	add    BYTE PTR [rax],al
 1003530:	test   BYTE PTR [rbx+0x60001],al
 1003536:	add    BYTE PTR [rax],al
 1003538:	rol    BYTE PTR [rbx+0x580001],0x0
 100353f:	add    BYTE PTR [rax],al
 1003541:	add    BYTE PTR [rax],al
 1003543:	add    BYTE PTR [rcx],al
	...
 100354d:	add    BYTE PTR [rax],al
 100354f:	add    BYTE PTR [rbx+0x0],al
 1003552:	outs   dx,DWORD PTR ds:[rsi]
 1003553:	add    BYTE PTR [rbp+0x0],dh
 1003556:	ins    BYTE PTR es:[rdi],dx
 1003557:	add    BYTE PTR [rax+rax*1+0x20],ah
 100355b:	add    BYTE PTR [rsi+0x0],ch
 100355e:	outs   dx,DWORD PTR ds:[rsi]
 100355f:	add    BYTE PTR [rax+rax*1+0x20],dh
 1003563:	add    BYTE PTR [rsi+0x0],ah
 1003566:	imul   eax,DWORD PTR [rax],0x64006e
 100356c:	and    BYTE PTR [rax],al
 100356e:	jae    0x1003570
 1003570:	je     0x1003572
 1003572:	jb     0x1003574
 1003574:	imul   eax,DWORD PTR [rax],0x67006e
 100357a:	and    BYTE PTR [rax],al
 100357c:	and    eax,0x20006400
 1003581:	add    BYTE PTR [rcx+0x0],ch
 1003584:	outs   dx,BYTE PTR ds:[rsi]
 1003585:	add    BYTE PTR [rax],ah
 1003587:	add    BYTE PTR [rbp+0x0],ch
 100358a:	outs   dx,DWORD PTR ds:[rsi]
 100358b:	add    BYTE PTR [rax+rax*1+0x75],ah
 100358f:	add    BYTE PTR [rax+rax*1+0x65],ch
 1003593:	add    BYTE PTR [rax],ah
 1003595:	add    BYTE PTR [rip+0xa007000],ah        # 0xb00a59b
 100359b:	add    BYTE PTR [rax],al
 100359d:	add    BYTE PTR [rax],al
 100359f:	add    BYTE PTR [rbx+0x53],dl
 10035a2:	rex.WB push r11
 10035a4:	rex.RXB
 10035a5:	gs je  0x10035ed
 10035a8:	js     0x100361e
 10035aa:	jb     0x100360d
 10035ac:	rex.R jne 0x100361c
 10035af:	jo     0x10035f7
 10035b1:	imul   ebp,DWORD PTR [rbp+riz*2+0x48],0x6c646e61
 10035b9:	add    BYTE PTR gs:[rax],al
	...
 10035c8:	rol    BYTE PTR [rax],0x0
 10035cb:	add    BYTE PTR [rax],al
 10035cd:	add    BYTE PTR [rax],al
 10035cf:	rex.RX ror BYTE PTR [rsi+0x0],1
 10035d3:	add    DWORD PTR [rax],eax
 10035d5:	add    BYTE PTR [rax],al
 10035d7:	add    BYTE PTR [rax],dl
 10035d9:	pop    rdi
 10035da:	add    BYTE PTR [rcx],al
 10035dc:	add    BYTE PTR [rax],al
 10035de:	add    BYTE PTR [rax],al
 10035e0:	neg    ah
 10035e2:	add    BYTE PTR [rcx],al
 10035e4:	add    BYTE PTR [rax],al
 10035e6:	add    BYTE PTR [rax],al
 10035e8:	xor    al,0x11
 10035ea:	sbb    ecx,esp
 10035ec:	jmp    0x100357d
 10035ee:	pop    rdi
 10035ef:	rex.WX cdqe 
 10035f1:	xor    DWORD PTR [rax+0x60],esi
 10035f4:	xchg   ecx,eax
 10035f5:	rex.W jns 0x10035ff
	...
 1003600:	push   rbx
 1003601:	add    BYTE PTR [rdi+0x0],cl
 1003604:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1003609:	add    BYTE PTR [rcx+0x0],al
 100360c:	push   rdx
 100360d:	add    BYTE PTR [rbp+0x0],al
 1003610:	pop    rsp
 1003611:	add    BYTE PTR [rbp+0x0],cl
 1003614:	imul   eax,DWORD PTR [rax],0x720063
 100361a:	outs   dx,DWORD PTR ds:[rsi]
 100361b:	add    BYTE PTR [rbx+0x0],dh
 100361e:	outs   dx,DWORD PTR ds:[rsi]
 100361f:	add    BYTE PTR [rsi+0x0],ah
 1003622:	je     0x1003624
 1003624:	pop    rsp
 1003625:	add    BYTE PTR [rbp+0x0],cl
 1003628:	imul   eax,DWORD PTR [rax],0x720063
 100362e:	outs   dx,DWORD PTR ds:[rsi]
 100362f:	add    BYTE PTR [rbx+0x0],dh
 1003632:	outs   dx,DWORD PTR ds:[rsi]
 1003633:	add    BYTE PTR [rsi+0x0],ah
 1003636:	je     0x1003638
 1003638:	and    BYTE PTR [rax],al
 100363a:	push   rbx
 100363b:	add    BYTE PTR [rcx+0x0],dl
 100363e:	rex.WR add BYTE PTR [rax],r12b
 1003641:	add    BYTE PTR [rbx+0x0],dl
 1003644:	add    BYTE PTR gs:[rdx+0x0],dh
 1003648:	jbe    0x100364a
 100364a:	add    BYTE PTR gs:[rdx+0x0],dh
 100364e:	pop    rsp
 100364f:	add    BYTE PTR [rcx],dh
 1003651:	add    BYTE PTR [rcx],dh
 1003653:	add    BYTE PTR [rax],dh
 1003655:	add    BYTE PTR [rax],al
 1003657:	add    BYTE PTR [rbp+0x0],al
 100365a:	jb     0x100365c
 100365c:	jb     0x100365e
 100365e:	outs   dx,DWORD PTR ds:[rsi]
 100365f:	add    BYTE PTR [rdx+0x0],dh
 1003662:	push   rdx
 1003663:	add    BYTE PTR [rbp+0x0],ah
 1003666:	jo     0x1003668
 1003668:	outs   dx,DWORD PTR ds:[rsi]
 1003669:	add    BYTE PTR [rdx+0x0],dh
 100366c:	je     0x100366e
 100366e:	imul   eax,DWORD PTR [rax],0x67006e
 1003674:	add    BYTE PTR [rcx+0x0],r13b
 1003678:	jb     0x100367a
 100367a:	add    BYTE PTR [rax],al
 100367c:	add    BYTE PTR [rax],al
 100367e:	add    BYTE PTR [rax],al
 1003680:	rex.WB add BYTE PTR [r11+0x0],dl
 1003684:	add    BYTE PTR [rax],r8b
 1003687:	add    BYTE PTR [rcx+0x0],bh
 100368a:	jns    0x100368c
 100368c:	jns    0x100368e
 100368e:	jns    0x1003690
 1003690:	sub    eax,0x4d004d00
 1003695:	add    BYTE PTR [rip+0x64006400],ch        # 0x65009a9b
 100369b:	add    BYTE PTR [rax],al
 100369d:	add    BYTE PTR [rax],al
 100369f:	add    BYTE PTR [rax+0x0],cl
 10036a2:	rex.W add BYTE PTR [rdx],dil
 10036a5:	add    BYTE PTR [rbp+0x0],ch
 10036a8:	ins    DWORD PTR es:[rdi],dx
 10036a9:	add    BYTE PTR [rdx],bh
 10036ab:	add    BYTE PTR [rbx+0x0],dh
 10036ae:	jae    0x10036b0
	...
 10036c0:	and    eax,DWORD PTR [rax]
 10036c2:	and    BYTE PTR [rax],al
 10036c4:	push   rbx
 10036c5:	add    BYTE PTR [rbx+0x0],dl
 10036c8:	rex.WB add BYTE PTR [r11+0x0],dl
 10036cc:	and    BYTE PTR [rax],al
 10036ce:	push   rsp
 10036cf:	add    BYTE PTR [rbp+0x0],ah
 10036d2:	js     0x10036d4
 10036d4:	je     0x10036d6
 10036d6:	jne    0x10036d8
 10036d8:	(bad)  
 10036d9:	add    BYTE PTR [rax+rax*1+0x20],ch
 10036dd:	add    BYTE PTR [rax+rax*1+0x75],al
 10036e1:	add    BYTE PTR [rbp+0x0],ch
 10036e4:	jo     0x10036e6
 10036e6:	and    BYTE PTR [rax],al
 10036e8:	je     0x10036ea
 10036ea:	(bad)  
 10036eb:	add    BYTE PTR [rbx+0x0],ch
 10036ee:	add    BYTE PTR gs:[rsi+0x0],ch
 10036f2:	and    BYTE PTR [rax],al
 10036f4:	(bad)  
 10036f5:	add    BYTE PTR [rax+rax*1+0x20],dh
 10036f9:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100a9ff
 10036ff:	add    BYTE PTR [rip+0xd007300],ah        # 0xe00aa05
 1003705:	add    BYTE PTR [rdx],cl
	...
 100370f:	add    BYTE PTR [rbx],ah
 1003711:	add    BYTE PTR [rax],ah
 1003713:	add    BYTE PTR [rax+0x0],dl
 1003716:	rex.WB add BYTE PTR [r8+rax*1+0x20],al
 100371b:	add    BYTE PTR [rip+0xd006400],ah        # 0xe009b21
 1003721:	add    BYTE PTR [rdx],cl
 1003723:	add    BYTE PTR [rax],al
 1003725:	add    BYTE PTR [rax],al
 1003727:	add    BYTE PTR [rbx],ah
 1003729:	add    BYTE PTR [rax],ah
 100372b:	add    BYTE PTR [rcx+0x0],cl
 100372e:	ins    DWORD PTR es:[rdi],dx
 100372f:	add    BYTE PTR [rcx+0x0],ah
 1003732:	add    BYTE PTR [ebp+0x0],ah
 1003736:	and    BYTE PTR [rax],al
 1003738:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 100373c:	ins    DWORD PTR es:[rdi],dx
 100373d:	add    BYTE PTR [rbp+0x0],ah
 1003740:	and    BYTE PTR [rax],al
 1003742:	pop    rbx
 1003743:	add    BYTE PTR [rip+0x5d007300],ah        # 0x5e00aa49
 1003749:	add    BYTE PTR [rip+0xa00],cl        # 0x100414f
 100374f:	add    BYTE PTR [rbx],ah
 1003751:	add    BYTE PTR [rax],ah
 1003753:	add    BYTE PTR [rdi+0x0],cl
 1003756:	push   rbx
 1003757:	add    BYTE PTR [rax],ah
 1003759:	add    BYTE PTR [rbp+0x0],ch
 100375c:	(bad)  
 100375d:	add    BYTE PTR [rdx+0x0],ch
 1003760:	outs   dx,DWORD PTR ds:[rsi]
 1003761:	add    BYTE PTR [rdx+0x0],dh
 1003764:	cmp    eax,0x64002500
 1003769:	add    BYTE PTR [rax],ah
 100376b:	add    BYTE PTR [rbp+0x0],ch
 100376e:	imul   eax,DWORD PTR [rax],0x6f006e
 1003774:	jb     0x1003776
 1003776:	cmp    eax,0x64002500
 100377b:	add    BYTE PTR [rax],ah
 100377d:	add    BYTE PTR [rdx+0x0],ah
 1003780:	jne    0x1003782
 1003782:	imul   eax,DWORD PTR [rax],0x64006c
 1003788:	cmp    eax,0x64002500
 100378d:	add    BYTE PTR [rax],ah
 100378f:	add    BYTE PTR [rip+0xd007300],ah        # 0xe00aa95
 1003795:	add    BYTE PTR [rdx],cl
	...
 100379f:	add    BYTE PTR [rcx+0x0],ah
 10037a2:	ins    DWORD PTR es:[rdi],dx
 10037a3:	add    BYTE PTR [rax+rax*1+0x36],ah
 10037a7:	add    BYTE PTR [rax+rax*1],dh
 10037aa:	add    BYTE PTR [rax],al
 10037ac:	add    BYTE PTR [rax],al
 10037ae:	add    BYTE PTR [rax],al
 10037b0:	imul   eax,DWORD PTR [rax],0x360061
 10037b6:	xor    al,0x0
	...
 10037c0:	js     0x10037c2
 10037c2:	cmp    BYTE PTR [rax],al
 10037c4:	add    BYTE PTR ss:[rax],al
 10037c7:	add    BYTE PTR [rbp+0x0],dh
 10037ca:	outs   dx,BYTE PTR ds:[rsi]
 10037cb:	add    BYTE PTR [rbx+0x0],ch
 10037ce:	outs   dx,BYTE PTR ds:[rsi]
 10037cf:	add    BYTE PTR [rdi+0x0],ch
 10037d2:	ja     0x10037d4
 10037d4:	outs   dx,BYTE PTR ds:[rsi]
 10037d5:	add    BYTE PTR [rdi],bh
	...
 10037df:	add    BYTE PTR [rbp+0x0],dh
 10037e2:	outs   dx,BYTE PTR ds:[rsi]
 10037e3:	add    BYTE PTR [rax+rax*1+0x65],ah
 10037e7:	add    BYTE PTR [rdx+0x0],dh
 10037ea:	and    BYTE PTR [rax],al
 10037ec:	push   rdi
 10037ed:	add    BYTE PTR [rdi+0x0],cl
 10037f0:	push   rdi
 10037f1:	add    BYTE PTR [rsi],dh
 10037f3:	add    BYTE PTR [rax+rax*1],dh
 10037f6:	add    BYTE PTR [rax],al
 10037f8:	jo     0x10037fa
 10037fa:	jb     0x10037fc
 10037fc:	outs   dx,DWORD PTR ds:[rsi]
 10037fd:	add    BYTE PTR [rbx+0x0],ah
 1003800:	add    BYTE PTR gs:[rbx+0x0],dh
 1003804:	jae    0x1003806
 1003806:	outs   dx,DWORD PTR ds:[rsi]
 1003807:	add    BYTE PTR [rdx+0x0],dh
 100380a:	jae    0x100380c
 100380c:	add    BYTE PTR [rax],al
 100380e:	add    BYTE PTR [rax],al
 1003810:	jo     0x1003812
 1003812:	jb     0x1003814
 1003814:	outs   dx,DWORD PTR ds:[rsi]
 1003815:	add    BYTE PTR [rbx+0x0],ah
 1003818:	add    BYTE PTR gs:[rbx+0x0],dh
 100381c:	jae    0x100381e
 100381e:	outs   dx,DWORD PTR ds:[rsi]
 100381f:	add    BYTE PTR [rdx+0x0],dh
 1003822:	add    BYTE PTR [rax],al
 1003824:	add    BYTE PTR [rax],al
 1003826:	add    BYTE PTR [rax],al
 1003828:	and    eax,DWORD PTR [rax]
 100382a:	and    BYTE PTR [rax],al
 100382c:	push   rdx
 100382d:	add    BYTE PTR [rbp+0x0],dh
 1003830:	outs   dx,BYTE PTR ds:[rsi]
 1003831:	add    BYTE PTR [rsi+0x0],ch
 1003834:	imul   eax,DWORD PTR [rax],0x67006e
 100383a:	and    BYTE PTR [rax],al
 100383c:	outs   dx,DWORD PTR ds:[rsi]
 100383d:	add    BYTE PTR [rsi+0x0],ch
 1003840:	and    BYTE PTR [rax],al
 1003842:	and    eax,0x20006400
 1003847:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100ab4d
 100384d:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100ab53
 1003853:	add    BYTE PTR [rip+0xd007300],ah        # 0xe00ab59
 1003859:	add    BYTE PTR [rdx],cl
 100385b:	add    BYTE PTR [rax],al
 100385d:	add    BYTE PTR [rax],al
 100385f:	add    BYTE PTR [rbx],ah
 1003861:	add    BYTE PTR [rax],ah
 1003863:	add    BYTE PTR [rbp+0x0],cl
 1003866:	add    BYTE PTR gs:[rbp+0x0],ch
 100386a:	outs   dx,DWORD PTR ds:[rsi]
 100386b:	add    BYTE PTR [rdx+0x0],dh
 100386e:	jns    0x1003870
 1003870:	cmp    al,BYTE PTR [rax]
 1003872:	and    BYTE PTR [rax],al
 1003874:	and    eax,0x25006400
 1003879:	add    BYTE PTR [rip+0x69002000],ah        # 0x6a00587f
 100387f:	add    BYTE PTR [rsi+0x0],ch
 1003882:	and    BYTE PTR [rax],al
 1003884:	jne    0x1003886
 1003886:	jae    0x1003888
 1003888:	add    BYTE PTR gs:[rsi],ch
 100388b:	add    BYTE PTR [rax],ah
 100388d:	add    BYTE PTR [rax+0x0],dl
 1003890:	push   0x73007900
 1003895:	add    BYTE PTR [rcx+0x0],ch
 1003898:	movsxd eax,DWORD PTR [rax]
 100389a:	(bad)  
 100389b:	add    BYTE PTR [rax+rax*1+0x3a],ch
 100389f:	add    BYTE PTR [rax],ah
 10038a1:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500a4a7
 10038a7:	add    BYTE PTR [rbp+0x0],cl
 10038aa:	(bad)  
 10038ab:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500a4b1
 10038b1:	add    BYTE PTR [rbp+0x0],cl
 10038b4:	and    BYTE PTR [rax],al
 10038b6:	and    BYTE PTR [rax],al
 10038b8:	push   rax
 10038b9:	add    BYTE PTR [rcx+0x0],ah
 10038bc:	add    BYTE PTR [ecx+0x0],ch
 10038c0:	outs   dx,BYTE PTR ds:[rsi]
 10038c1:	add    BYTE PTR [rdi+0x0],ah
 10038c4:	cmp    al,BYTE PTR [rax]
 10038c6:	and    BYTE PTR [rax],al
 10038c8:	and    eax,0x4d006400
 10038cd:	add    BYTE PTR [rdi],ch
 10038cf:	add    BYTE PTR [rip+0x4d006400],ah        # 0x4e009cd5
 10038d5:	add    BYTE PTR [rax],ah
 10038d7:	add    BYTE PTR [rax],ch
 10038d9:	add    BYTE PTR [rcx+0x0],ah
 10038dc:	jbe    0x10038de
 10038de:	(bad)  
 10038df:	add    BYTE PTR [rcx+0x0],ch
 10038e2:	ins    BYTE PTR es:[rdi],dx
 10038e3:	add    BYTE PTR [rdi],ch
 10038e5:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10038e9:	add    BYTE PTR [rax+rax*1+0x61],dh
 10038ed:	add    BYTE PTR [rax+rax*1+0x29],ch
 10038f1:	add    BYTE PTR [rip+0xa00],cl        # 0x10042f7
	...
 10038ff:	add    BYTE PTR [rbx],ah
 1003901:	add    BYTE PTR [rax],ah
 1003903:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1003907:	add    BYTE PTR [rcx+0x0],ah
 100390a:	add    BYTE PTR fs:[rbp+0x0],ah
 100390e:	add    BYTE PTR fs:[rax],ah
 1003911:	add    BYTE PTR [rbp+0x0],cl
 1003914:	outs   dx,DWORD PTR ds:[rsi]
 1003915:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003919:	add    BYTE PTR [rax+rax*1+0x65],ch
 100391d:	add    BYTE PTR [rdx],bh
 100391f:	add    BYTE PTR [rax],ah
 1003921:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100ac27
 1003927:	add    BYTE PTR [rax],ch
 1003929:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500a52f
 100392f:	add    BYTE PTR [rsi],ch
 1003931:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500a537
 1003937:	add    BYTE PTR [rsi],ch
 1003939:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500a53f
 100393f:	add    BYTE PTR [rsi],ch
 1003941:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500a547
 1003947:	add    BYTE PTR [rcx],ch
 1003949:	add    BYTE PTR [rip+0xa00],cl        # 0x100434f
 100394f:	add    BYTE PTR [rbx],ah
 1003951:	add    BYTE PTR [rax],ah
 1003953:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1003957:	add    BYTE PTR [rcx+0x0],ah
 100395a:	add    BYTE PTR fs:[rbp+0x0],ah
 100395e:	add    BYTE PTR fs:[rax],ah
 1003961:	add    BYTE PTR [rbp+0x0],cl
 1003964:	outs   dx,DWORD PTR ds:[rsi]
 1003965:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003969:	add    BYTE PTR [rax+rax*1+0x65],ch
 100396d:	add    BYTE PTR [rdx],bh
 100396f:	add    BYTE PTR [rax],ah
 1003971:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100ac77
 1003977:	add    BYTE PTR [rax],ch
 1003979:	add    BYTE PTR [rbp+0x0],dh
 100397c:	outs   dx,BYTE PTR ds:[rsi]
 100397d:	add    BYTE PTR [rbx+0x0],ch
 1003980:	outs   dx,BYTE PTR ds:[rsi]
 1003981:	add    BYTE PTR [rdi+0x0],ch
 1003984:	ja     0x1003986
 1003986:	outs   dx,BYTE PTR ds:[rsi]
 1003987:	add    BYTE PTR [rax],ah
 1003989:	add    BYTE PTR [rsi+0x0],dh
 100398c:	add    BYTE PTR gs:[rdx+0x0],dh
 1003990:	jae    0x1003992
 1003992:	imul   eax,DWORD PTR [rax],0x6e006f
 1003998:	sub    DWORD PTR [rax],eax
 100399a:	or     eax,0xa00
 100399f:	add    BYTE PTR [rbx+0x0],ch
 10039a2:	add    BYTE PTR gs:[rdx+0x0],dh
 10039a6:	outs   dx,BYTE PTR ds:[rsi]
 10039a7:	add    BYTE PTR [rbp+0x0],ah
 10039aa:	ins    BYTE PTR es:[rdi],dx
 10039ab:	add    BYTE PTR [rbx],dh
 10039ad:	add    BYTE PTR [rdx],dh
 10039af:	add    BYTE PTR [rsi],ch
 10039b1:	add    BYTE PTR [rax+rax*1+0x6c],ah
 10039b5:	add    BYTE PTR [rax+rax*1+0x0],ch
 10039b9:	add    BYTE PTR [rax],al
 10039bb:	add    BYTE PTR [rax],al
 10039bd:	add    BYTE PTR [rax],al
 10039bf:	add    BYTE PTR [rcx+0x75],dl
 10039c2:	gs jb  0x1003a3e
 10039c5:	push   rax
 10039c6:	jb     0x1003a37
 10039c8:	fs jne 0x1003a2e
 10039cb:	je     0x1003a23
 10039cd:	(bad)  
 10039ce:	ins    BYTE PTR es:[rdi],dx
 10039cf:	jne    0x1003a36
 10039d1:	add    BYTE PTR [rax],al
 10039d3:	add    BYTE PTR [rax],al
 10039d5:	add    BYTE PTR [rax],al
 10039d7:	add    BYTE PTR [rbp+0x0],cl
 10039da:	push   rbx
 10039db:	add    BYTE PTR [rbx+0x0],dl
 10039de:	push   rcx
 10039df:	add    BYTE PTR [rax+rax*1+0x31],cl
 10039e3:	add    BYTE PTR [rcx],dh
 10039e5:	add    BYTE PTR [rax],al
 10039e7:	add    BYTE PTR [rcx+0x73],cl
 10039ea:	push   rdi
 10039eb:	outs   dx,DWORD PTR ds:[rsi]
 10039ec:	ja     0x1003a24
 10039ee:	xor    al,0x50
 10039f0:	jb     0x1003a61
 10039f2:	movsxd esp,DWORD PTR [rbp+0x73]
 10039f5:	jae    0x10039f7
	...
 10039ff:	add    BYTE PTR [rbx+0x0],dl
 1003a02:	rex.WRXB add BYTE PTR [r14+0x0],r8b
 1003a06:	push   rsp
 1003a07:	add    BYTE PTR [rdi+0x0],dl
 1003a0a:	add    BYTE PTR [r10+0x0],dl
 1003a0e:	add    BYTE PTR [r8+rax*1+0x4d],r11b
 1003a13:	add    BYTE PTR [rcx+0x0],ch
 1003a16:	movsxd eax,DWORD PTR [rax]
 1003a18:	jb     0x1003a1a
 1003a1a:	outs   dx,DWORD PTR ds:[rsi]
 1003a1b:	add    BYTE PTR [rbx+0x0],dh
 1003a1e:	outs   dx,DWORD PTR ds:[rsi]
 1003a1f:	add    BYTE PTR [rsi+0x0],ah
 1003a22:	je     0x1003a24
 1003a24:	pop    rsp
 1003a25:	add    BYTE PTR [rbp+0x0],cl
 1003a28:	imul   eax,DWORD PTR [rax],0x720063
 1003a2e:	outs   dx,DWORD PTR ds:[rsi]
 1003a2f:	add    BYTE PTR [rbx+0x0],dh
 1003a32:	outs   dx,DWORD PTR ds:[rsi]
 1003a33:	add    BYTE PTR [rsi+0x0],ah
 1003a36:	je     0x1003a38
 1003a38:	and    BYTE PTR [rax],al
 1003a3a:	push   rbx
 1003a3b:	add    BYTE PTR [rcx+0x0],dl
 1003a3e:	rex.WR add BYTE PTR [rax],r12b
 1003a41:	add    BYTE PTR [rbx+0x0],dl
 1003a44:	add    BYTE PTR gs:[rdx+0x0],dh
 1003a48:	jbe    0x1003a4a
 1003a4a:	add    BYTE PTR gs:[rdx+0x0],dh
 1003a4e:	pop    rsp
 1003a4f:	add    BYTE PTR [rcx+0x0],cl
 1003a52:	outs   dx,BYTE PTR ds:[rsi]
 1003a53:	add    BYTE PTR [rbx+0x0],dh
 1003a56:	je     0x1003a58
 1003a58:	(bad)  
 1003a59:	add    BYTE PTR [rsi+0x0],ch
 1003a5c:	movsxd eax,DWORD PTR [rax]
 1003a5e:	add    BYTE PTR gs:[rax],ah
 1003a61:	add    BYTE PTR [rsi+0x0],cl
 1003a64:	(bad)  
 1003a65:	add    BYTE PTR [rbp+0x0],ch
 1003a68:	add    BYTE PTR gs:[rbx+0x0],dh
 1003a6c:	pop    rsp
 1003a6d:	add    BYTE PTR [rbx+0x0],dl
 1003a70:	push   rcx
 1003a71:	add    BYTE PTR [rax+rax*1+0x0],cl
 1003a75:	add    BYTE PTR [rax],al
 1003a77:	add    BYTE PTR [rax+rax*1+0x53],bl
 1003a7b:	add    BYTE PTR [rcx+0x0],dl
 1003a7e:	rex.WR add BYTE PTR [rdx+0x0],r8b
 1003a82:	outs   dx,DWORD PTR ds:[rsi]
 1003a83:	add    BYTE PTR [rdi+0x0],ch
 1003a86:	je     0x1003a88
 1003a88:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 1003a8d:	add    BYTE PTR [rax+rax*1+0x0],ch
 1003a91:	add    BYTE PTR [rax],al
 1003a93:	add    BYTE PTR [rax],al
 1003a95:	add    BYTE PTR [rax],al
 1003a97:	add    BYTE PTR [rbx+0x0],dl
 1003a9a:	push   0x72006100
 1003a9f:	add    BYTE PTR [rbp+0x0],ah
 1003aa2:	add    BYTE PTR fs:[rbx+0x0],al
 1003aa6:	outs   dx,DWORD PTR ds:[rsi]
 1003aa7:	add    BYTE PTR [rax+rax*1+0x65],ah
 1003aab:	add    BYTE PTR [rax],al
 1003aad:	add    BYTE PTR [rax],al
 1003aaf:	add    BYTE PTR [rax+rax*1+0x54],al
 1003ab3:	add    BYTE PTR [rbx+0x0],dl
 1003ab6:	add    BYTE PTR [rbp+0x0],r12b
 1003aba:	(bad)  
 1003abb:	add    BYTE PTR [rbp+0x0],dh
 1003abe:	add    BYTE PTR [eax+0x0],cl
 1003ac2:	outs   dx,DWORD PTR ds:[rsi]
 1003ac3:	add    BYTE PTR [rbx+0x0],dh
 1003ac6:	je     0x1003ac8
 1003ac8:	add    BYTE PTR cs:[rbp+0x0],ah
 1003acc:	js     0x1003ace
 1003ace:	add    BYTE PTR gs:[rax],al
 1003ad1:	add    BYTE PTR [rax],al
 1003ad3:	add    BYTE PTR [rax],al
 1003ad5:	add    BYTE PTR [rax],al
 1003ad7:	add    BYTE PTR [rax+rax*1+0x63],ah
 1003adb:	add    BYTE PTR [rbp+0x0],ah
 1003ade:	js     0x1003ae0
 1003ae0:	add    BYTE PTR gs:[rbx+0x0],ah
 1003ae4:	add    BYTE PTR cs:[rbp+0x0],ah
 1003ae8:	js     0x1003aea
 1003aea:	add    BYTE PTR gs:[rax],al
 1003aed:	add    BYTE PTR [rax],al
 1003aef:	add    BYTE PTR [rax+rax*1+0x65],ah
 1003af3:	add    BYTE PTR [rsi+0x0],dh
 1003af6:	add    BYTE PTR gs:[rsi+0x0],ch
 1003afa:	jbe    0x1003afc
 1003afc:	add    BYTE PTR cs:[rbp+0x0],ah
 1003b00:	js     0x1003b02
 1003b02:	add    BYTE PTR gs:[rax],al
 1003b05:	add    BYTE PTR [rax],al
 1003b07:	add    BYTE PTR [rdx],ah
 1003b09:	add    eax,0x31993
 1003b0e:	add    BYTE PTR [rax],al
 1003b10:	and    al,0x86
 1003b12:	add    DWORD PTR [rax],eax
 1003b14:	add    DWORD PTR [rax],eax
 1003b16:	add    BYTE PTR [rax],al
 1003b18:	cmp    al,0x86
 1003b1a:	add    DWORD PTR [rax],eax
 1003b1c:	or     al,BYTE PTR [rax]
 1003b1e:	add    BYTE PTR [rax],al
 1003b20:	xchg   BYTE PTR fs:[rcx],al
 1003b23:	add    BYTE PTR [rax],bh
 1003b25:	add    BYTE PTR [rax],al
 1003b27:	add    BYTE PTR [rax],al
 1003b29:	add    BYTE PTR [rax],al
 1003b2b:	add    BYTE PTR [rcx],al
 1003b2d:	add    BYTE PTR [rax],al
 1003b2f:	add    BYTE PTR [rdi],ch
 1003b31:	add    BYTE PTR [rax+rax*1+0x3a],bl
 1003b35:	add    BYTE PTR [rbx+0x0],bl
 1003b38:	pop    rbp
 1003b39:	add    BYTE PTR [rsi],ch
 1003b3b:	add    BYTE PTR [rip+0x2f000000],bh        # 0x30003b41
 1003b41:	add    BYTE PTR [rax+rax*1+0x3a],bl
 1003b45:	add    BYTE PTR [rdi],bh
 1003b47:	add    BYTE PTR [rdx],ah
 1003b49:	add    BYTE PTR [rax+rax*1],bh
 1003b4c:	add    BYTE PTR ds:[rax+rax*1+0x0],bh
	...
 1003b5d:	add    BYTE PTR [rax],al
 1003b5f:	add    BYTE PTR [rcx+0x6e],ch
 1003b62:	jae    0x1003bd8
 1003b64:	(bad)  
 1003b65:	jo     0x1003bd0
 1003b67:	xor    DWORD PTR [rcx],esi
 1003b69:	xor    BYTE PTR [rsi],ch
 1003b6b:	fs ins BYTE PTR es:[rdi],dx
 1003b6d:	ins    BYTE PTR es:[rdi],dx
 1003b6e:	add    BYTE PTR [rax],al
 1003b70:	cmp    eax,DWORD PTR [rax]
 1003b72:	add    BYTE PTR [rax],al
 1003b74:	add    BYTE PTR [rax],al
 1003b76:	add    BYTE PTR [rax],al
 1003b78:	push   rax
 1003b79:	add    BYTE PTR [rcx+0x0],ah
 1003b7c:	je     0x1003b7e
 1003b7e:	push   0x0
 1003b83:	add    BYTE PTR [rax],al
 1003b85:	add    BYTE PTR [rax],al
 1003b87:	add    BYTE PTR [rdi+0x65],al
 1003b8a:	je     0x1003bd0
 1003b8c:	ins    BYTE PTR es:[rdi],dx
 1003b8d:	ins    BYTE PTR es:[rdi],dx
 1003b8e:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1003b96:	jns    0x1003bef
	...
 1003ba0:	push   rbx
 1003ba1:	gs je  0x1003be8
 1003ba4:	ins    BYTE PTR es:[rdi],dx
 1003ba5:	ins    BYTE PTR es:[rdi],dx
 1003ba6:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1003bae:	jns    0x1003c07
	...
 1003bc0:	push   rbx
 1003bc1:	add    BYTE PTR [rdi+0x0],ch
 1003bc4:	data16 add BYTE PTR [rax+rax*1+0x77],dh
 1003bc9:	add    BYTE PTR [rcx+0x0],ah
 1003bcc:	jb     0x1003bce
 1003bce:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 1003bd3:	add    BYTE PTR [rcx+0x0],ch
 1003bd6:	movsxd eax,DWORD PTR [rax]
 1003bd8:	jb     0x1003bda
 1003bda:	outs   dx,DWORD PTR ds:[rsi]
 1003bdb:	add    BYTE PTR [rbx+0x0],dh
 1003bde:	outs   dx,DWORD PTR ds:[rsi]
 1003bdf:	add    BYTE PTR [rsi+0x0],ah
 1003be2:	je     0x1003be4
 1003be4:	pop    rsp
 1003be5:	add    BYTE PTR [rbp+0x0],cl
 1003be8:	imul   eax,DWORD PTR [rax],0x720063
 1003bee:	outs   dx,DWORD PTR ds:[rsi]
 1003bef:	add    BYTE PTR [rbx+0x0],dh
 1003bf2:	outs   dx,DWORD PTR ds:[rsi]
 1003bf3:	add    BYTE PTR [rsi+0x0],ah
 1003bf6:	je     0x1003bf8
 1003bf8:	and    BYTE PTR [rax],al
 1003bfa:	push   rbx
 1003bfb:	add    BYTE PTR [rcx+0x0],dl
 1003bfe:	rex.WR add BYTE PTR [rax],r12b
 1003c01:	add    BYTE PTR [rbx+0x0],dl
 1003c04:	add    BYTE PTR gs:[rdx+0x0],dh
 1003c08:	jbe    0x1003c0a
 1003c0a:	add    BYTE PTR gs:[rdx+0x0],dh
 1003c0e:	pop    rsp
 1003c0f:	add    BYTE PTR [rcx],dh
 1003c11:	add    BYTE PTR [rcx],dh
 1003c13:	add    BYTE PTR [rax],dh
 1003c15:	add    BYTE PTR [rax],al
 1003c17:	add    BYTE PTR [rip+0x64007e00],ah        # 0x6500ba1d
 1003c1d:	add    BYTE PTR [rax+0x0],dh
 1003c20:	and    eax,0xff000000
 1003c25:	inc    DWORD PTR [rax]
 1003c27:	add    BYTE PTR [rsi],ch
 1003c29:	add    BYTE PTR [rbp+0x0],ah
 1003c2c:	js     0x1003c2e
 1003c2e:	je     0x1003c30
	...
 1003c38:	ins    DWORD PTR es:[rdi],dx
 1003c39:	add    BYTE PTR [rbx+0x0],dh
 1003c3c:	ins    DWORD PTR es:[rdi],dx
 1003c3d:	add    BYTE PTR [rax+rax*1+0x73],ah
 1003c41:	add    BYTE PTR [rdx+0x0],dh
 1003c44:	jbe    0x1003c46
 1003c46:	add    BYTE PTR cs:[rbp+0x0],ah
 1003c4a:	js     0x1003c4c
 1003c4c:	add    BYTE PTR gs:[rax],al
 1003c4f:	add    BYTE PTR [rax+0x0],cl
 1003c52:	rex.WXB add BYTE PTR [r13+0x0],al
 1003c56:	pop    rcx
 1003c57:	add    BYTE PTR [rdi+0x0],bl
 1003c5a:	rex.WR add BYTE PTR [rdi+0x0],r9b
 1003c5e:	rex.XB add BYTE PTR [r9+0x0],al
 1003c62:	rex.WR add BYTE PTR [rdi+0x0],r11b
 1003c66:	rex.WRB add BYTE PTR [r9+0x0],r8b
 1003c6a:	rex.XB add BYTE PTR [r8+0x0],cl
 1003c6e:	rex.WB add BYTE PTR [r14+0x0],cl
 1003c72:	add    BYTE PTR [r8+rax*1+0x53],r11b
 1003c77:	add    BYTE PTR [rdi+0x0],cl
 1003c7a:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1003c7f:	add    BYTE PTR [rcx+0x0],al
 1003c82:	push   rdx
 1003c83:	add    BYTE PTR [rbp+0x0],al
 1003c86:	pop    rsp
 1003c87:	add    BYTE PTR [rbp+0x0],cl
 1003c8a:	imul   eax,DWORD PTR [rax],0x720063
 1003c90:	outs   dx,DWORD PTR ds:[rsi]
 1003c91:	add    BYTE PTR [rbx+0x0],dh
 1003c94:	outs   dx,DWORD PTR ds:[rsi]
 1003c95:	add    BYTE PTR [rsi+0x0],ah
 1003c98:	je     0x1003c9a
 1003c9a:	pop    rsp
 1003c9b:	add    BYTE PTR [rbp+0x0],cl
 1003c9e:	imul   eax,DWORD PTR [rax],0x720063
 1003ca4:	outs   dx,DWORD PTR ds:[rsi]
 1003ca5:	add    BYTE PTR [rbx+0x0],dh
 1003ca8:	outs   dx,DWORD PTR ds:[rsi]
 1003ca9:	add    BYTE PTR [rsi+0x0],ah
 1003cac:	je     0x1003cae
 1003cae:	and    BYTE PTR [rax],al
 1003cb0:	push   rbx
 1003cb1:	add    BYTE PTR [rcx+0x0],dl
 1003cb4:	rex.WR add BYTE PTR [rax],r12b
 1003cb7:	add    BYTE PTR [rbx+0x0],dl
 1003cba:	add    BYTE PTR gs:[rdx+0x0],dh
 1003cbe:	jbe    0x1003cc0
 1003cc0:	add    BYTE PTR gs:[rdx+0x0],dh
 1003cc4:	pop    rsp
 1003cc5:	add    BYTE PTR [rcx+0x0],cl
 1003cc8:	outs   dx,BYTE PTR ds:[rsi]
 1003cc9:	add    BYTE PTR [rbx+0x0],dh
 1003ccc:	je     0x1003cce
 1003cce:	(bad)  
 1003ccf:	add    BYTE PTR [rsi+0x0],ch
 1003cd2:	movsxd eax,DWORD PTR [rax]
 1003cd4:	add    BYTE PTR gs:[rax],ah
 1003cd7:	add    BYTE PTR [rsi+0x0],cl
 1003cda:	(bad)  
 1003cdb:	add    BYTE PTR [rbp+0x0],ch
 1003cde:	add    BYTE PTR gs:[rbx+0x0],dh
 1003ce2:	pop    rsp
 1003ce3:	add    BYTE PTR [rbx+0x0],dl
 1003ce6:	push   rcx
 1003ce7:	add    BYTE PTR [rax+rax*1+0x0],cl
 1003ceb:	add    BYTE PTR [rax],al
 1003ced:	add    BYTE PTR [rax],al
 1003cef:	add    BYTE PTR [rip+0x51005300],ah        # 0x52008ff5
 1003cf5:	add    BYTE PTR [rax+rax*1+0x53],cl
 1003cf9:	add    BYTE PTR [rbp+0x0],al
 1003cfc:	push   rdx
 1003cfd:	add    BYTE PTR [rsi+0x0],dl
 1003d00:	push   rdx
 1003d01:	add    BYTE PTR [rdi+0x0],bl
 1003d04:	rex.WB add BYTE PTR [r14+0x0],cl
 1003d08:	push   rbx
 1003d09:	add    BYTE PTR [rax+rax*1+0x4e],dl
 1003d0d:	add    BYTE PTR [rcx+0x0],al
 1003d10:	rex.WRB add BYTE PTR [r13+0x0],r8b
 1003d14:	and    eax,0x69000000
 1003d19:	add    BYTE PTR [rsi+0x0],ch
 1003d1c:	imul   eax,DWORD PTR [rax],0x730000
 1003d22:	jno    0x1003d24
 1003d24:	ins    BYTE PTR es:[rdi],dx
 1003d25:	add    BYTE PTR [rbx+0x0],dh
 1003d28:	add    BYTE PTR gs:[rdx+0x0],dh
 1003d2c:	jbe    0x1003d2e
 1003d2e:	jb     0x1003d30
 1003d30:	add    BYTE PTR cs:[rcx+0x0],ch
 1003d34:	outs   dx,BYTE PTR ds:[rsi]
 1003d35:	add    BYTE PTR [rcx+0x0],ch
	...
 1003d40:	rex.W add BYTE PTR [rbx+0x0],cl
 1003d44:	add    BYTE PTR [r9+0x0],r11b
 1003d48:	pop    rdi
 1003d49:	add    BYTE PTR [rbx+0x0],al
 1003d4c:	rex.WR add BYTE PTR [rcx+0x0],r8b
 1003d50:	push   rbx
 1003d51:	add    BYTE PTR [rbx+0x0],dl
 1003d54:	add    BYTE PTR [r11+0x0],r10b
 1003d58:	pop    rdi
 1003d59:	add    BYTE PTR [rdx+0x0],dl
 1003d5c:	rex.WRXB add BYTE PTR [r15+0x0],r9b
 1003d60:	push   rsp
 1003d61:	add    BYTE PTR [rax],al
 1003d63:	add    BYTE PTR [rax],al
 1003d65:	add    BYTE PTR [rax],al
 1003d67:	add    BYTE PTR [rax+0x0],cl
 1003d6a:	rex.WXB add BYTE PTR [r13+0x0],al
 1003d6e:	pop    rcx
 1003d6f:	add    BYTE PTR [rdi+0x0],bl
 1003d72:	rex.XB add BYTE PTR [r13+0x0],dl
 1003d76:	push   rdx
 1003d77:	add    BYTE PTR [rdx+0x0],dl
 1003d7a:	add    BYTE PTR [r14+0x0],r9b
 1003d7e:	push   rsp
 1003d7f:	add    BYTE PTR [rdi+0x0],bl
 1003d82:	push   rbp
 1003d83:	add    BYTE PTR [rbx+0x0],dl
 1003d86:	add    BYTE PTR [r10+0x0],r10b
 1003d8a:	add    BYTE PTR [rax],al
 1003d8c:	add    BYTE PTR [rax],al
 1003d8e:	add    BYTE PTR [rax],al
 1003d90:	rex.W add BYTE PTR [rbx+0x0],cl
 1003d94:	add    BYTE PTR [r9+0x0],r11b
 1003d98:	pop    rdi
 1003d99:	add    BYTE PTR [rax+rax*1+0x4f],cl
 1003d9d:	add    BYTE PTR [rbx+0x0],al
 1003da0:	add    BYTE PTR [r8+rax*1+0x5f],cl
 1003da5:	add    BYTE PTR [rbp+0x0],cl
 1003da8:	add    BYTE PTR [r11+0x0],al
 1003dac:	rex.W add BYTE PTR [rcx+0x0],cl
 1003db0:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 1003db4:	add    BYTE PTR [rax],al
 1003db6:	add    BYTE PTR [rax],al
 1003db8:	rex.W add BYTE PTR [rbx+0x0],cl
 1003dbc:	add    BYTE PTR [r9+0x0],r11b
 1003dc0:	pop    rdi
 1003dc1:	add    BYTE PTR [rbp+0x0],dl
 1003dc4:	push   rbx
 1003dc5:	add    BYTE PTR [rbp+0x0],al
 1003dc8:	push   rdx
 1003dc9:	add    BYTE PTR [rbx+0x0],dl
 1003dcc:	add    BYTE PTR [rax],al
 1003dce:	add    BYTE PTR [rax],al
 1003dd0:	rex.W add BYTE PTR [rbx+0x0],cl
 1003dd4:	add    BYTE PTR [r9+0x0],r11b
 1003dd8:	pop    rdi
 1003dd9:	add    BYTE PTR [rax+0x0],dl
 1003ddc:	add    BYTE PTR [r10+0x0],r10b
 1003de0:	rex.RX add BYTE PTR [rdi+0x0],r9b
 1003de4:	push   rdx
 1003de5:	add    BYTE PTR [rbp+0x0],cl
 1003de8:	add    BYTE PTR [r14+0x0],cl
 1003dec:	rex.XB add BYTE PTR [r13+0x0],al
 1003df0:	pop    rdi
 1003df1:	add    BYTE PTR [rax+rax*1+0x41],al
 1003df5:	add    BYTE PTR [rax+rax*1+0x41],dl
 1003df9:	add    BYTE PTR [rax],al
 1003dfb:	add    BYTE PTR [rax],al
 1003dfd:	add    BYTE PTR [rax],al
 1003dff:	add    BYTE PTR [rax+0x0],cl
 1003e02:	rex.WXB add BYTE PTR [r13+0x0],al
 1003e06:	pop    rcx
 1003e07:	add    BYTE PTR [rdi+0x0],bl
 1003e0a:	rex.XB add BYTE PTR [r13+0x0],dl
 1003e0e:	push   rdx
 1003e0f:	add    BYTE PTR [rdx+0x0],dl
 1003e12:	add    BYTE PTR [r14+0x0],r9b
 1003e16:	push   rsp
 1003e17:	add    BYTE PTR [rdi+0x0],bl
 1003e1a:	rex.XB add BYTE PTR [r15+0x0],cl
 1003e1e:	rex.WRX add BYTE PTR [rsi+0x0],r8b
 1003e22:	rex.WB add BYTE PTR [r15+0x0],al
 1003e26:	add    BYTE PTR [rax],al
 1003e28:	rex.W add BYTE PTR [rbx+0x0],cl
 1003e2c:	add    BYTE PTR [r9+0x0],r11b
 1003e30:	pop    rdi
 1003e31:	add    BYTE PTR [rax+rax*1+0x59],al
 1003e35:	add    BYTE PTR [rsi+0x0],cl
 1003e38:	pop    rdi
 1003e39:	add    BYTE PTR [rax+rax*1+0x41],al
 1003e3d:	add    BYTE PTR [rax+rax*1+0x41],dl
 1003e41:	add    BYTE PTR [rax],al
 1003e43:	add    BYTE PTR [rax+0x0],al
 1003e46:	add    BYTE PTR [rax],al
 1003e48:	add    BYTE PTR fs:[rdi+0x0],dh
 1003e4c:	outs   dx,DWORD PTR ds:[rsi]
 1003e4d:	add    BYTE PTR [rdx+0x0],dh
 1003e50:	add    BYTE PTR fs:[rdx],bh
 1003e53:	add    BYTE PTR [rip+0x38003000],ah        # 0x39006e59
 1003e59:	add    BYTE PTR [rax+0x0],bh
 1003e5c:	add    BYTE PTR [rax],al
 1003e5e:	add    BYTE PTR [rax],al
 1003e60:	push   0x78006500
 1003e65:	add    BYTE PTR [rdx],bh
	...
 1003e6f:	add    BYTE PTR [rax+0x0],ch
 1003e72:	add    BYTE PTR gs:[rax+0x0],bh
 1003e76:	sub    BYTE PTR [rax],al
	...
 1003e80:	and    eax,0x29006400
 1003e85:	add    BYTE PTR [rdx],bh
	...
 1003e8f:	add    BYTE PTR [rip+0x38003000],ah        # 0x39006e95
 1003e95:	add    BYTE PTR [rax+0x0],bh
	...
 1003eb0:	push   rbx
 1003eb1:	add    BYTE PTR [rdi+0x0],cl
 1003eb4:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1003eb9:	add    BYTE PTR [rcx+0x0],al
 1003ebc:	push   rdx
 1003ebd:	add    BYTE PTR [rbp+0x0],al
 1003ec0:	pop    rsp
 1003ec1:	add    BYTE PTR [rbp+0x0],cl
 1003ec4:	imul   eax,DWORD PTR [rax],0x720063
 1003eca:	outs   dx,DWORD PTR ds:[rsi]
 1003ecb:	add    BYTE PTR [rbx+0x0],dh
 1003ece:	outs   dx,DWORD PTR ds:[rsi]
 1003ecf:	add    BYTE PTR [rsi+0x0],ah
 1003ed2:	je     0x1003ed4
 1003ed4:	pop    rsp
 1003ed5:	add    BYTE PTR [rbp+0x0],cl
 1003ed8:	imul   eax,DWORD PTR [rax],0x720063
 1003ede:	outs   dx,DWORD PTR ds:[rsi]
 1003edf:	add    BYTE PTR [rbx+0x0],dh
 1003ee2:	outs   dx,DWORD PTR ds:[rsi]
 1003ee3:	add    BYTE PTR [rsi+0x0],ah
 1003ee6:	je     0x1003ee8
 1003ee8:	and    BYTE PTR [rax],al
 1003eea:	push   rbx
 1003eeb:	add    BYTE PTR [rcx+0x0],dl
 1003eee:	rex.WR add BYTE PTR [rax],r12b
 1003ef1:	add    BYTE PTR [rbx+0x0],dl
 1003ef4:	add    BYTE PTR gs:[rdx+0x0],dh
 1003ef8:	jbe    0x1003efa
 1003efa:	add    BYTE PTR gs:[rdx+0x0],dh
 1003efe:	pop    rsp
 1003eff:	add    BYTE PTR [rcx],dh
 1003f01:	add    BYTE PTR [rcx],dh
 1003f03:	add    BYTE PTR [rax],dh
 1003f05:	add    BYTE PTR [rax],al
 1003f07:	add    BYTE PTR [rbx+0x0],dl
 1003f0a:	push   rcx
 1003f0b:	add    BYTE PTR [rax+rax*1+0x44],cl
 1003f0f:	add    BYTE PTR [rbp+0x0],dl
 1003f12:	rex.WRB add BYTE PTR [r8+0x0],r10b
 1003f16:	add    BYTE PTR [r10+0x0],r10b
 1003f1a:	add    BYTE PTR cs:[rbp+0x0],al
 1003f1e:	pop    rax
 1003f1f:	add    BYTE PTR [rbp+0x0],al
 1003f22:	add    BYTE PTR [rax],al
 1003f24:	add    BYTE PTR [rax],al
 1003f26:	add    BYTE PTR [rax],al
 1003f28:	ja     0x1003f16
 1003f2a:	enter  0x7bf4,0x7d
 1003f2e:	mov    ecx,0x42cd8c4d
 1003f33:	rex (bad) 
 1003f35:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1003f36:	pop    rdx
 1003f37:	stc    
 1003f38:	and    eax,0x73006c00
 1003f3d:	add    BYTE PTR [rax+rax*1+0x25],bl
 1003f41:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1003f4d:	add    BYTE PTR [rax],al
 1003f4f:	add    BYTE PTR [rax+0x1b],dh
 1003f52:	add    DWORD PTR [rcx],eax
 1003f54:	add    BYTE PTR [rax],al
 1003f56:	add    BYTE PTR [rax],al
 1003f58:	adc    BYTE PTR [rcx+rax*1],bl
 1003f5b:	add    DWORD PTR [rax],eax
 1003f5d:	add    BYTE PTR [rax],al
 1003f5f:	add    BYTE PTR [rax],ah
 1003f61:	sbb    al,0x1
 1003f63:	add    DWORD PTR [rax],eax
 1003f65:	add    BYTE PTR [rax],al
 1003f67:	add    BYTE PTR [rax+0x27],ah
 1003f6a:	add    DWORD PTR [rcx],eax
 1003f6c:	add    BYTE PTR [rax],al
 1003f6e:	add    BYTE PTR [rax],al
 1003f70:	adc    BYTE PTR [rbx],bl
 1003f72:	add    DWORD PTR [rcx],eax
 1003f74:	add    BYTE PTR [rax],al
 1003f76:	add    BYTE PTR [rax],al
 1003f78:	rex and eax,DWORD PTR [rcx]
 1003f7b:	add    DWORD PTR [rax],eax
 1003f7d:	add    BYTE PTR [rax],al
 1003f7f:	add    al,dl
 1003f81:	sub    DWORD PTR [rcx],eax
 1003f83:	add    DWORD PTR [rax],eax
 1003f85:	add    BYTE PTR [rax],al
 1003f87:	add    al,al
 1003f89:	sbb    eax,0x101
 1003f8e:	add    BYTE PTR [rax],al
 1003f90:	xor    BYTE PTR [rcx+rax*1],bl
 1003f93:	add    DWORD PTR [rax],eax
 1003f95:	add    BYTE PTR [rax],al
 1003f97:	add    BYTE PTR [rax+0x1c],dh
 1003f9a:	add    DWORD PTR [rcx],eax
 1003f9c:	add    BYTE PTR [rax],al
 1003f9e:	add    BYTE PTR [rax],al
 1003fa0:	jo     0x1003fc4
 1003fa2:	add    DWORD PTR [rcx],eax
	...
 1003fb4:	xchg   esi,eax
 1003fb5:	xor    BYTE PTR [rdi],al
 1003fb7:	ja     0x1003fe5
 1003fb9:	(bad)  
 1003fba:	(bad)  
 1003fbb:	out    dx,al
 1003fbc:	mov    edx,0x19990951
 1003fc1:	(bad)  
 1003fc2:	ins    DWORD PTR es:[rdi],dx
 1003fc3:	(bad)  
 1003fc4:	(bad)  
 1003fc5:	hlt    
 1003fc6:	push   0x70
 1003fc8:	xor    eax,0xa3e963a5
 1003fcd:	xchg   ebp,eax
 1003fce:	fs sahf 
 1003fd0:	xor    cl,BYTE PTR [rax-0x475bf125]
 1003fd6:	fdivr  QWORD PTR [rcx+0x1e]
 1003fd9:	jmp    0xffffffffda8920b3
 1003fde:	rcl    BYTE PTR [rdi+0x9b64c2b],cl
 1003fe4:	mov    ebp,0x77eb17c
 1003fe9:	sub    eax,0x1d91e7b8
 1003fee:	mov    edi,0xb7106490
 1003ff3:	sbb    eax,0x6ab020f2
 1003ff8:	rex.W jno 0x1003fb4
 1003ffb:	repz fiadd WORD PTR [rcx-0x42]
 1003fff:	test   BYTE PTR [rbp-0x2c],bh
 1004002:	ficomp DWORD PTR [rdx]
 1004004:	jmp    0x1003fea
 1004006:	(bad)  [rbp+0x51]
 1004009:	mov    ch,0xd4
 100400b:	hlt    
 100400c:	mov    DWORD PTR [rbp-0x67a97c2d],0xa8c0136c
 1004016:	imul   esp,DWORD PTR [rdx+rdi*2-0x7],0x62
 100401b:	std    
 100401c:	in     al,dx
 100401d:	leave  
 100401e:	mov    cl,BYTE PTR gs:[rdi+0x5c]
 1004022:	add    DWORD PTR [rcx+rbx*8],edx
 1004025:	ins    BYTE PTR es:[rdi],dx
 1004026:	(bad)  
 1004027:	movsxd esp,DWORD PTR [rbx+0x3d]
 100402a:	psubd  mm6,mm5
 100402d:	or     eax,0x20c88d08
 1004032:	outs   dx,BYTE PTR ds:[rsi]
 1004033:	cmp    ebx,DWORD PTR [rsi+0x10]
 1004036:	imul   ecx,DWORD PTR [rsp+riz*8+0x41],0x7172d560
 100403e:	addr32 mov ds:0x3c03e4d1,al
 1004044:	rex.RXB (bad) 
 1004046:	add    al,0x4b
 1004048:	std    
 1004049:	test   DWORD PTR [rip+0xab56bd2],ecx        # 0xbb5ac21
 100404f:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1004050:	cli    
 1004051:	test   al,0xb5
 1004053:	xor    eax,0x42b2986c
 1004058:	(bad)  
 1004059:	leave  
 100405a:	mov    ebx,0xbcf940db
 100405f:	lods   al,BYTE PTR ds:[rsi]
 1004060:	jrcxz  0x10040ce
 1004062:	fdiv   DWORD PTR [rdx]
 1004064:	jne    0x10040c2
 1004066:	fild   WORD PTR [rbp-0x31]
 1004069:	or     eax,0x3d59dcd6
 100406e:	shr    DWORD PTR [rbx+0x26d930ac],1
 1004074:	cmp    al,BYTE PTR [rax]
 1004076:	ficom  WORD PTR [rcx-0x80]
 1004079:	push   rcx
 100407a:	xlat   BYTE PTR ds:[rbx]
 100407b:	enter  0x6116,0xd0
 100407f:	mov    edi,0x21b4f4b5
 1004084:	and    eax,esp
 1004086:	mov    bl,0x56
 1004088:	cdq    
 1004089:	xchg   ebp,eax
 100408a:	mov    edx,0xbda50fcf
 100408f:	mov    eax,0x2802b89e
 1004094:	or     BYTE PTR [rax-0x264da0fb],cl
 100409a:	or     al,0xc6
 100409c:	and    al,0xe9
 100409e:	or     esi,DWORD PTR [rcx+0x2f6f7c87]
 10040a4:	adc    DWORD PTR [rax+rbp*2+0x58],ecx
 10040a8:	stos   DWORD PTR es:[rdi],eax
 10040a9:	sbb    eax,0x2d3dc161
 10040ae:	data16 mov dh,0x90
 10040b1:	fdiv   QWORD PTR [r14+0x6]
 10040b5:	jno    0x1004092
 10040b7:	add    DWORD PTR [rax+riz*1+0x102a98d2],edi
 10040be:	(bad)  
 10040bf:	out    dx,eax
 10040c0:	mov    DWORD PTR [rbp-0x4ae08e4f],eax
 10040c6:	mov    dh,0x6
 10040c8:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10040c9:	in     al,0xbf
 10040cb:	lahf   
 10040cc:	xor    edx,esp
 10040ce:	mov    eax,0x7c9a2e8
 10040d3:	js     0x1004109
 10040d5:	stc    
 10040d6:	add    BYTE PTR [rdi],cl
 10040d8:	mov    gs,WORD PTR [rax-0x67e769f7]
 10040de:	(bad)  
 10040df:	loope  0x100409c
 10040e1:	or     eax,0x3d2d7f6a
 10040e6:	ins    DWORD PTR es:[rdi],dx
 10040e7:	or     BYTE PTR [rdi+0x191646c],dl
 10040ed:	pop    rsp
 10040ee:	movsxd esp,esi
 10040f0:	hlt    
 10040f1:	push   rcx
 10040f2:	imul   ebp,DWORD PTR [rbx+0x62],0x61
 10040f6:	ins    BYTE PTR es:[rdi],dx
 10040f7:	sbb    al,0xd8
 10040f9:	xor    BYTE PTR [rbp-0x7b],ah
 10040fc:	rex.WRX add BYTE PTR [rdx-0xe],r12b
 1004100:	in     eax,dx
 1004101:	xchg   ebp,eax
 1004102:	(bad)  
 1004103:	ins    BYTE PTR es:[rdi],dx
 1004104:	jnp    0x10040ab
 1004106:	add    DWORD PTR [rbx],ebx
 1004108:	shl    esp,0x8
 100410b:	(bad)  
 100410c:	push   rdi
 100410d:	(bad)  
 100410e:	pmaddwd mm0,mm6
 1004111:	fnstenv [rax-0x4816af9b]
 1004117:	adc    ch,dl
 1004119:	mov    eax,0x887c8bbe
 100411e:	mov    ecx,0xdd1ddffc
 1004123:	(bad)  
 1004124:	rex.WB sub rax,0x7cf315da
 100412a:	ror    DWORD PTR [rbp+riz*2+0x58fbd44c],cl
 1004131:	(bad)  
 1004132:	mov    dl,0x4d
 1004134:	(bad)  
 1004135:	push   rcx
 1004136:	mov    ch,0x3a
 1004138:	je     0x100413a
 100413a:	mov    esp,0xbb30e2a3
 100413f:	(bad)  
 1004140:	rex.B movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1004142:	fisttp WORD PTR [rdx-0x29]
 1004145:	xchg   ebp,eax
 1004146:	fdivr  DWORD PTR [rip+0xffffffffa4d1c46d]        # 0xffffffffa5d205b9
 100414c:	sti    
 100414d:	hlt    
 100414e:	(bad)  
 100414f:	shr    DWORD PTR [rdx-0x17],cl
 1004152:	imul   eax,DWORD PTR [rbx-0x4],0x46346ed9
 1004159:	mov    BYTE PTR [rdi-0x53],ah
 100415c:	sar    BYTE PTR [rax+0x2d73da60],1
 1004162:	add    al,0x44
 1004164:	in     eax,0x1d
 1004166:	add    esi,DWORD PTR [rbx]
 1004168:	pop    rdi
 1004169:	rex.WR or r13b,BYTE PTR [rdx-0x22f28337]
 1004170:	cmp    al,0x71
 1004172:	add    eax,0x241aa50
 1004177:	(bad)  
 1004178:	adc    BYTE PTR [rax],dl
 100417a:	or     edi,DWORD PTR [rsi-0x36f3df7a]
 1004180:	and    eax,0xb35768b5
 1004185:	test   DWORD PTR [rdi+0x20],ebp
 1004188:	or     esp,edx
 100418a:	mov    cx,0xe49f
 100418e:	(bad)  
 100418f:	(bad)  
 1004190:	(bad)  
 1004191:	stc    
 1004192:	ficomp WORD PTR [rsi-0x68]
 1004195:	leave  
 1004196:	fldcw  WORD PTR [rcx]
 1004198:	and    bl,BYTE PTR [rax-0x574b4f30]
 100419e:	xlat   BYTE PTR ds:[rbx]
 100419f:	(bad)  
 10041a0:	(bad)  
 10041a1:	cmp    eax,0xd8159b3
 10041a6:	mov    ah,0x2e
 10041a8:	cmp    ebx,DWORD PTR [rbp+rdi*4-0x49]
 10041ac:	lods   eax,DWORD PTR ds:[rsi]
 10041ad:	ins    BYTE PTR es:[rdi],dx
 10041ae:	mov    edx,0xb88320c0
 10041b3:	in     eax,dx
 10041b4:	mov    dh,0xb3
 10041b6:	mov    edi,0xb6e20c9a
 10041bb:	add    ebx,DWORD PTR [rdx+0x3974b1d2]
 10041c1:	rex.RXB (bad) 
 10041c3:	(bad)  
 10041c4:	scas   eax,DWORD PTR es:[rdi]
 10041c5:	ja     0x1004199
 10041c7:	popf   
 10041c8:	adc    eax,0x8304db26
 10041cd:	(bad)  
 10041ce:	fdiv   QWORD PTR [rbx+0x12]
 10041d1:	or     esp,DWORD PTR [rbx-0x1d]
 10041d4:	test   BYTE PTR [rbx],bh
 10041d6:	fs xchg esp,eax
 10041d8:	ds push 0x6d
 10041db:	or     eax,0x7a6a5aa8
 10041e0:	or     ecx,edi
 10041e2:	(bad)  
 10041e3:	in     al,0x9d
 10041e5:	dec    DWORD PTR [rcx]
 10041e7:	xchg   ebx,eax
 10041e8:	(bad)  
 10041e9:	scas   al,BYTE PTR es:[rdi]
 10041ea:	add    BYTE PTR [rdx],cl
 10041ec:	mov    cl,0x9e
 10041ee:	(bad)  
 10041ef:	jge    0x1004235
 10041f1:	xchg   ebx,eax
 10041f2:	(bad)  
 10041f4:	shl    BYTE PTR [rbx-0xd9778f8],cl
 10041fa:	add    DWORD PTR [rsi],ebx
 10041fc:	inc    dl
 10041fe:	(bad)  
 10041ff:	imul   ebx,DWORD PTR [rbp+0x57],0x67cbf762
 1004206:	xor    BYTE PTR gs:[rcx+0x36],0x6c
 100420b:	sbb    edi,esp
 100420d:	(bad)  
 100420e:	imul   ebp,DWORD PTR [rsi+0x76],0x1b
 1004212:	(bad)  
 1004213:	(bad)  
 1004214:	loopne 0x1004241
 1004216:	ror    DWORD PTR [rcx+0x10da7a5a],cl
 100421c:	int3   
 100421d:	rex.WX frstor [rdi+0x6f]
 1004221:	fistp  QWORD PTR [rcx-0x41100607]
 1004227:	mov    es,WORD PTR [rbx-0x42]
 100422a:	mov    bh,0x17
 100422c:	(bad)  
 100422d:	mov    ?,WORD PTR [rax-0x295c17a0]
 1004233:	(bad)  
 1004234:	jle    0x10041c9
 1004236:	shl    DWORD PTR [rcx+0x38d8c2c4],1
 100423c:	push   rdx
 100423d:	repnz fisttp WORD PTR [rdi-0xf]
 1004241:	addr32 mov ebx,0xbc5767d1
 1004247:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1004248:	fld    QWORD PTR [rsi]
 100424a:	mov    ch,0x3f
 100424c:	rex.WXB
 100424d:	ss mov dl,0x48
 1004250:	fisubr DWORD PTR [rbx]
 1004252:	or     eax,0xa1b4cd8
 1004257:	scas   eax,DWORD PTR es:[rdi]
 1004258:	test   BYTE PTR [rdx+0x3],0x36
 100425c:	(bad)  
 100425d:	jp     0x1004263
 100425f:	rex.B ret 
 1004261:	out    dx,eax
 1004262:	(bad)  
 1004263:	fist   WORD PTR [rbp-0x21]
 1004266:	addr32 test al,0xef
 1004269:	mov    gs,WORD PTR [rsi+0x31]
 100426c:	jns    0x100422c
 100426e:	imul   eax,DWORD PTR [rsi-0x74],0x1acb61b3
 1004275:	and    DWORD PTR [rsi-0x44],0xffffffa0
 1004279:	shr    BYTE PTR [rdi+0x25],cl
 100427c:	ss loop 0x10042e7
 100427f:	push   rdx
 1004280:	xchg   ebp,eax
 1004281:	ja     0x100428f
 1004283:	int3   
 1004284:	add    eax,DWORD PTR [rdi+0xb]
 1004287:	mov    ebx,0x220216b9
 100428c:	(bad)  
 100428d:	es add eax,0xba3bbe55
 1004293:	(bad)
 1004296:	mov    ebp,0xb45a92b2
 100429b:	sub    eax,DWORD PTR [rdx+rbp*2]
 100429e:	mov    bl,0x5c
 10042a0:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10042a1:	call   rdi
 10042a3:	ret    0xcf31
 10042a6:	shl    BYTE PTR [rbp+0x2cd99e8b],1
 10042ac:	sbb    eax,0xb05bdeae
 10042b1:	ret    0x9b64
 10042b4:	es repnz movsxd ebp,esp
 10042b8:	pushf  
 10042b9:	movabs ds:0x6a9026d930a756a,eax
 10042c2:	or     DWORD PTR [rdi+rdi*1-0x7a14f1ca],ebx
 10042c9:	addr32 (bad) 
 10042cb:	jb     0x10042e0
 10042cd:	push   rdi
 10042ce:	add    BYTE PTR [rip+0xffffffff95bf4a82],al        # 0xffffffff96bf8d56
 10042d4:	adc    al,0x7a
 10042d6:	mov    eax,0xb12baee2
 10042db:	jnp    0x1004315
 10042dd:	sbb    esi,DWORD PTR [rsi-0x2d7164f4]
 10042e3:	xchg   edx,eax
 10042e4:	or     eax,0xb7e5d5be
 10042e9:	out    dx,eax
 10042ea:	fdivr  QWORD PTR [rcx+riz*1-0x21]
 10042ee:	fisttp DWORD PTR [rbx]
 10042f0:	(bad)  
 10042f1:	rcl    bl,cl
 10042f3:	xchg   BYTE PTR [rdx-0x1e],al
 10042f6:	(bad)  
 10042f7:	icebp  
 10042f8:	clc    
 10042f9:	mov    bl,0xdd
 10042fb:	push   0x1fda836e
 1004300:	int    0x16
 1004302:	mov    esi,0xb9265b81
 1004307:	mul    cl
 1004309:	ja     0x10042bb
 100430b:	outs   dx,DWORD PTR ds:[rsi]
 100430c:	ja     0x1004355
 100430e:	mov    bh,0x18
 1004310:	out    0x5a,al
 1004312:	or     BYTE PTR [rax-0xf09590],cl
 1004318:	retf   0x63b
 100431b:	pop    sp
 100431d:	or     eax,DWORD PTR [rcx]
 100431f:	adc    edi,edi
 1004321:	sahf   
 1004322:	(bad)
 1004327:	clc    
 1004328:	sar    edi,cl
 100432a:	imul   esp,DWORD PTR [rcx+0x45],0xffffffcf
 100432e:	ins    BYTE PTR es:[rdi],dx
 100432f:	(bad)  
 1004330:	js     0x1004314
 1004332:	or     ah,BYTE PTR [rax-0x28f22d12]
 1004338:	push   rsp
 1004339:	add    DWORD PTR [rsi+rcx*2],0xffffffc2
 100433d:	mov    bl,0x3
 100433f:	cmp    DWORD PTR [rcx+0x26],esp
 1004342:	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 1004344:	not    DWORD PTR [rsi]
 1004346:	(bad)  
 1004347:	ror    BYTE PTR [rbp+0x47],1
 100434a:	imul   ecx,DWORD PTR [rcx-0x25],0x4a3e6e77
 1004351:	push   0xffffffffffffffd1
 1004353:	scas   al,BYTE PTR es:[rdi]
 1004354:	fcomp  QWORD PTR [rdx-0x2a]
 1004357:	fldenv [rsi+0xb]
 100435a:	fild   WORD PTR [rax-0x10]
 100435d:	cmp    ebx,eax
 100435f:	(bad)  
 1004360:	push   rbx
 1004361:	scas   al,BYTE PTR es:[rdi]
 1004362:	mov    esp,0xbb9ec5a9
 1004367:	fidivr WORD PTR [rdi-0x31]
 100436a:	mov    dl,0x47
 100436c:	jmp    0x1d30f970
 1004371:	repnz mov ebp,0xbac28abd
 1004377:	retf   0x9330
 100437a:	mov    bl,0x53
 100437c:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100437d:	movabs ds:0x693bad0360524b4,eax
 1004386:	xlat   BYTE PTR ds:[rbx]
 1004387:	int    0x29
 1004389:	push   rdi
 100438a:	ficom  WORD PTR [rdi+rdi*4+0x67]
 100438e:	fldenv [rbx]
 1004390:	cs jp  0x10043f9
 1004393:	mov    bl,0xb8
 1004395:	rex.WX (bad) 
 1004397:	(bad)
 100439b:	pop    rbp
 100439c:	xchg   esp,eax
 100439d:	sub    ebp,DWORD PTR [rdi+0x2a]
 10043a0:	(bad)  
 10043a1:	mov    esi,0x8ea1b40b
 10043a6:	or     al,0xc3
 10043a8:	sbb    ebx,edi
 10043aa:	add    eax,0x2ef8d5a
 10043af:	sub    eax,0x72657551
 10043b4:	jns    0x100440d
 10043b6:	outs   dx,DWORD PTR ds:[rsi]
 10043b7:	jb     0x1004424
 10043b9:	imul   ebp,DWORD PTR [rsi+0x67],0x45746553
 10043c0:	js     0x10043c2
 10043c2:	add    BYTE PTR [rax],al
 10043c4:	add    BYTE PTR [rax],al
 10043c6:	add    BYTE PTR [rax],al
 10043c8:	jo     0x10043ca
 10043ca:	jae    0x10043cc
 10043cc:	(bad)  
 10043cd:	add    BYTE PTR [rax+0x0],dh
 10043d0:	imul   eax,DWORD PTR [rax],0x64002e
 10043d6:	ins    BYTE PTR es:[rdi],dx
 10043d7:	add    BYTE PTR [rax+rax*1+0x0],ch
	...
 10043e7:	add    BYTE PTR [rbx+0x0],dl
 10043ea:	push   rcx
 10043eb:	add    BYTE PTR [rax+rax*1+0x44],cl
 10043ef:	add    BYTE PTR [rbp+0x0],dl
 10043f2:	rex.WRB add BYTE PTR [r8+0x0],r10b
 10043f6:	add    BYTE PTR [r10+0x0],r10b
 10043fa:	add    BYTE PTR cs:[rbp+0x0],al
 10043fe:	pop    rax
 10043ff:	add    BYTE PTR [rbp+0x0],al
 1004402:	add    BYTE PTR [rax],al
 1004404:	add    BYTE PTR [rax],al
 1004406:	add    BYTE PTR [rax],al
 1004408:	(bad)  
 1004409:	(bad)  
 100440a:	ret    
 100440b:	sbb    edx,DWORD PTR [rcx-0x61b65b7b]
 1004411:	movabs ds:0xe6b57640b44f,al
 100441a:	add    BYTE PTR [rax],al
 100441c:	add    BYTE PTR [rax],al
 100441e:	add    BYTE PTR [rax],al
 1004420:	add    BYTE PTR [rax],dl
 1004422:	add    BYTE PTR [rax],ah
 1004424:	add    BYTE PTR [rax],al
 1004426:	add    BYTE PTR [rax],al
 1004428:	push   rax
 1004429:	rex.RX add BYTE PTR [rcx],r8b
 100442c:	add    BYTE PTR [rax],al
 100442e:	add    BYTE PTR [rax],al
 1004430:	add    al,BYTE PTR [rax]
 1004432:	add    BYTE PTR [rax],ah
 1004434:	add    BYTE PTR [rax],al
 1004436:	add    BYTE PTR [rax],al
 1004438:	movabs al,ds:0x400000000010046
 1004441:	add    BYTE PTR [rax],al
 1004443:	and    BYTE PTR [rax],al
 1004445:	add    BYTE PTR [rax],al
 1004447:	add    al,dh
 1004449:	rex.RX add BYTE PTR [rcx],r8b
 100444c:	add    BYTE PTR [rax],al
 100444e:	add    BYTE PTR [rax],al
 1004450:	or     BYTE PTR [rax],al
 1004452:	add    BYTE PTR [rax],ah
 1004454:	add    BYTE PTR [rax],al
 1004456:	add    BYTE PTR [rax],al
 1004458:	push   rax
 1004459:	rex.RXB add BYTE PTR [r9],r8b
 100445c:	add    BYTE PTR [rax],al
 100445e:	add    BYTE PTR [rax],al
 1004460:	adc    BYTE PTR [rax],al
 1004462:	add    BYTE PTR [rax],ah
 1004464:	add    BYTE PTR [rax],al
 1004466:	add    BYTE PTR [rax],al
 1004468:	movabs al,ds:0x2000000000010047
 1004471:	add    BYTE PTR [rax],al
 1004473:	and    BYTE PTR [rax],al
 1004475:	add    BYTE PTR [rax],al
 1004477:	add    BYTE PTR [rax],al
 1004479:	rex.W add BYTE PTR [rcx],al
 100447c:	add    BYTE PTR [rax],al
 100447e:	add    BYTE PTR [rax],al
 1004480:	add    BYTE PTR [rax],al
 1004483:	and    BYTE PTR [rax],al
 1004485:	add    BYTE PTR [rax],al
 1004487:	add    BYTE PTR [rax+0x48],dl
 100448a:	add    BYTE PTR [rcx],al
 100448c:	add    BYTE PTR [rax],al
 100448e:	add    BYTE PTR [rax],al
 1004490:	add    BYTE PTR [rax],0x0
 1004493:	and    BYTE PTR [rax],al
 1004495:	add    BYTE PTR [rax],al
 1004497:	add    BYTE PTR [rax+0x10048],dh
 100449d:	add    BYTE PTR [rax],al
 100449f:	add    BYTE PTR [rax],al
 10044a1:	add    DWORD PTR [rax],eax
 10044a3:	and    BYTE PTR [rax],al
 10044a5:	add    BYTE PTR [rax],al
 10044a7:	add    BYTE PTR [rax],dl
 10044a9:	rex.WB add BYTE PTR [r9],al
 10044ac:	add    BYTE PTR [rax],al
 10044ae:	add    BYTE PTR [rax],al
 10044b0:	add    BYTE PTR [rdx],al
 10044b2:	add    BYTE PTR [rax],ah
 10044b4:	add    BYTE PTR [rax],al
 10044b6:	add    BYTE PTR [rax],al
 10044b8:	(bad)  
 10044b9:	rex.WB add BYTE PTR [r9],al
 10044bc:	add    BYTE PTR [rax],al
 10044be:	add    BYTE PTR [rax],al
 10044c0:	add    BYTE PTR [rax+rax*1],al
 10044c3:	and    BYTE PTR [rax],al
 10044c5:	add    BYTE PTR [rax],al
 10044c7:	add    BYTE PTR [rax+0x10049],dh
 10044cd:	add    BYTE PTR [rax],al
 10044cf:	add    BYTE PTR [rax],al
 10044d1:	or     BYTE PTR [rax],al
 10044d3:	and    BYTE PTR [rax],al
 10044d5:	add    BYTE PTR [rax],al
 10044d7:	add    BYTE PTR [rax],dl
 10044d9:	rex.WX add BYTE PTR [rcx],al
 10044dc:	add    BYTE PTR [rax],al
 10044de:	add    BYTE PTR [rax],al
 10044e0:	add    BYTE PTR [rax],ah
 10044e2:	add    BYTE PTR [rax],ah
 10044e4:	add    BYTE PTR [rax],al
 10044e6:	add    BYTE PTR [rax],al
 10044e8:	jo     0x1004534
 10044ea:	add    BYTE PTR [rcx],al
 10044ec:	add    BYTE PTR [rax],al
 10044ee:	add    BYTE PTR [rax],al
 10044f0:	add    BYTE PTR [rax+0x2000],al
 10044f6:	add    BYTE PTR [rax],al
 10044f8:	add    BYTE PTR [rbx+0x0],cl
 10044fb:	add    DWORD PTR [rax],eax
 10044fd:	add    BYTE PTR [rax],al
 10044ff:	add    BYTE PTR [rbp+0x0],al
 1004502:	jb     0x1004504
 1004504:	jb     0x1004506
 1004506:	outs   dx,DWORD PTR ds:[rsi]
 1004507:	add    BYTE PTR [rdx+0x0],dh
 100450a:	and    BYTE PTR [rax],al
 100450c:	sub    eax,0x44002000
 1004511:	add    BYTE PTR [rbp+0x0],dh
 1004514:	ins    DWORD PTR es:[rdi],dx
 1004515:	add    BYTE PTR [rax+0x0],dh
 1004518:	imul   eax,DWORD PTR [rax],0x67006e
 100451e:	and    BYTE PTR [rax],al
 1004520:	jo     0x1004522
 1004522:	jb     0x1004524
 1004524:	outs   dx,DWORD PTR ds:[rsi]
 1004525:	add    BYTE PTR [rbx+0x0],ah
 1004528:	add    BYTE PTR gs:[rbx+0x0],dh
 100452c:	jae    0x100452e
 100452e:	and    BYTE PTR [rax],al
 1004530:	ja     0x1004532
 1004532:	(bad)  
 1004533:	add    BYTE PTR [rbx+0x0],dh
 1004536:	and    BYTE PTR [rax],al
 1004538:	outs   dx,BYTE PTR ds:[rsi]
 1004539:	add    BYTE PTR [rdi+0x0],ch
 100453c:	je     0x100453e
 100453e:	and    BYTE PTR [rax],al
 1004540:	jae    0x1004542
 1004542:	je     0x1004544
 1004544:	(bad)  
 1004545:	add    BYTE PTR [rdx+0x0],dh
 1004548:	je     0x100454a
 100454a:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100454f:	add    BYTE PTR [rdi+0x0],ch
 1004552:	jb     0x1004554
 1004554:	and    BYTE PTR [rax],al
 1004556:	je     0x1004558
 1004558:	add    BYTE PTR gs:[rdx+0x0],dh
 100455c:	ins    DWORD PTR es:[rdi],dx
 100455d:	add    BYTE PTR [rcx+0x0],ch
 1004560:	outs   dx,BYTE PTR ds:[rsi]
 1004561:	add    BYTE PTR [rcx+0x0],ah
 1004564:	je     0x1004566
 1004566:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100456b:	add    BYTE PTR [rax+0x0],dh
 100456e:	jb     0x1004570
 1004570:	add    BYTE PTR gs:[rbp+0x0],ch
 1004574:	(bad)  
 1004575:	add    BYTE PTR [rax+rax*1+0x75],dh
 1004579:	add    BYTE PTR [rdx+0x0],dh
 100457c:	add    BYTE PTR gs:[rax+rax*1+0x79],ch
 1004581:	add    BYTE PTR [rsi],ch
 1004583:	add    BYTE PTR [rip+0xa00],cl        # 0x1004f89
 1004589:	add    BYTE PTR [rax],al
 100458b:	add    BYTE PTR [rax],al
 100458d:	add    BYTE PTR [rax],al
 100458f:	add    BYTE PTR [rbp+0x0],al
 1004592:	js     0x1004594
 1004594:	je     0x1004596
 1004596:	add    BYTE PTR gs:[rdx+0x0],dh
 100459a:	outs   dx,BYTE PTR ds:[rsi]
 100459b:	add    BYTE PTR [rcx+0x0],ah
 100459e:	ins    BYTE PTR es:[rdi],dx
 100459f:	add    BYTE PTR [rax],ah
 10045a1:	add    BYTE PTR [rax+rax*1+0x75],ah
 10045a5:	add    BYTE PTR [rbp+0x0],ch
 10045a8:	jo     0x10045aa
 10045aa:	and    BYTE PTR [rax],al
 10045ac:	jo     0x10045ae
 10045ae:	jb     0x10045b0
 10045b0:	outs   dx,DWORD PTR ds:[rsi]
 10045b1:	add    BYTE PTR [rbx+0x0],ah
 10045b4:	add    BYTE PTR gs:[rbx+0x0],dh
 10045b8:	jae    0x10045ba
 10045ba:	and    BYTE PTR [rax],al
 10045bc:	jb     0x10045be
 10045be:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 10045c3:	add    BYTE PTR [rdx+0x0],dh
 10045c6:	outs   dx,BYTE PTR ds:[rsi]
 10045c7:	add    BYTE PTR [rbp+0x0],ah
 10045ca:	add    BYTE PTR fs:[rax],ah
 10045cd:	add    BYTE PTR [rsi+0x0],ch
 10045d0:	outs   dx,DWORD PTR ds:[rsi]
 10045d1:	add    BYTE PTR [rax],ah
 10045d3:	add    BYTE PTR [rbp+0x0],ah
 10045d6:	jb     0x10045d8
 10045d8:	jb     0x10045da
 10045da:	outs   dx,DWORD PTR ds:[rsi]
 10045db:	add    BYTE PTR [rdx+0x0],dh
 10045de:	jae    0x10045e0
 10045e0:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004fe7
	...
 10045ef:	add    BYTE PTR [rbp+0x0],al
 10045f2:	js     0x10045f4
 10045f4:	je     0x10045f6
 10045f6:	add    BYTE PTR gs:[rdx+0x0],dh
 10045fa:	outs   dx,BYTE PTR ds:[rsi]
 10045fb:	add    BYTE PTR [rcx+0x0],ah
 10045fe:	ins    BYTE PTR es:[rdi],dx
 10045ff:	add    BYTE PTR [rax],ah
 1004601:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004605:	add    BYTE PTR [rbp+0x0],ch
 1004608:	jo     0x100460a
 100460a:	and    BYTE PTR [rax],al
 100460c:	jo     0x100460e
 100460e:	jb     0x1004610
 1004610:	outs   dx,DWORD PTR ds:[rsi]
 1004611:	add    BYTE PTR [rbx+0x0],ah
 1004614:	add    BYTE PTR gs:[rbx+0x0],dh
 1004618:	jae    0x100461a
 100461a:	and    BYTE PTR [rax],al
 100461c:	jb     0x100461e
 100461e:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1004623:	add    BYTE PTR [rdx+0x0],dh
 1004626:	outs   dx,BYTE PTR ds:[rsi]
 1004627:	add    BYTE PTR [rax],ah
 1004629:	add    BYTE PTR [rbx+0x0],ah
 100462c:	outs   dx,DWORD PTR ds:[rsi]
 100462d:	add    BYTE PTR [rax+rax*1+0x65],ah
 1004631:	add    BYTE PTR [rax],ah
 1004633:	add    BYTE PTR [rax],dh
 1004635:	add    BYTE PTR [rax+0x0],bh
 1004638:	and    eax,0x2e007800
 100463d:	add    BYTE PTR [rip+0xa00],cl        # 0x1005043
	...
 100464f:	add    BYTE PTR [rbp+0x0],al
 1004652:	jb     0x1004654
 1004654:	jb     0x1004656
 1004656:	outs   dx,DWORD PTR ds:[rsi]
 1004657:	add    BYTE PTR [rdx+0x0],dh
 100465a:	and    BYTE PTR [rax],al
 100465c:	sub    eax,0x49002000
 1004661:	add    BYTE PTR [rsi+0x0],ch
 1004664:	jo     0x1004666
 1004666:	jne    0x1004668
 1004668:	je     0x100466a
 100466a:	and    BYTE PTR [rax],al
 100466c:	jo     0x100466e
 100466e:	(bad)  
 100466f:	add    BYTE PTR [rdx+0x0],dh
 1004672:	(bad)  
 1004673:	add    BYTE PTR [rbp+0x0],ch
 1004676:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100467b:	add    BYTE PTR [rdx+0x0],dh
 100467e:	jae    0x1004680
 1004680:	and    BYTE PTR [rax],al
 1004682:	imul   eax,DWORD PTR [rax],0x76006e
 1004688:	(bad)  
 1004689:	add    BYTE PTR [rax+rax*1+0x69],ch
 100468d:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1004691:	add    BYTE PTR [rip+0xa00],cl        # 0x1005097
	...
 100469f:	add    BYTE PTR [rbp+0x0],al
 10046a2:	jb     0x10046a4
 10046a4:	jb     0x10046a6
 10046a6:	outs   dx,DWORD PTR ds:[rsi]
 10046a7:	add    BYTE PTR [rdx+0x0],dh
 10046aa:	and    BYTE PTR [rax],al
 10046ac:	sub    eax,0x46002000
 10046b1:	add    BYTE PTR [rcx+0x0],ah
 10046b4:	imul   eax,DWORD PTR [rax],0x65006c
 10046ba:	add    BYTE PTR fs:[rax],ah
 10046bd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10046c1:	add    BYTE PTR [rax],ah
 10046c3:	add    BYTE PTR [rbx+0x0],ah
 10046c6:	jb     0x10046c8
 10046c8:	add    BYTE PTR gs:[rcx+0x0],ah
 10046cc:	je     0x10046ce
 10046ce:	add    BYTE PTR gs:[rax],ah
 10046d1:	add    BYTE PTR [rax+rax*1+0x75],ah
 10046d5:	add    BYTE PTR [rbp+0x0],ch
 10046d8:	jo     0x10046da
 10046da:	and    BYTE PTR [rax],al
 10046dc:	data16 add BYTE PTR [rcx+0x0],ch
 10046e0:	ins    BYTE PTR es:[rdi],dx
 10046e1:	add    BYTE PTR [rbp+0x0],ah
 10046e4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10050eb
 10046eb:	add    BYTE PTR [rax],al
 10046ed:	add    BYTE PTR [rax],al
 10046ef:	add    BYTE PTR [rbp+0x0],al
 10046f2:	jb     0x10046f4
 10046f4:	jb     0x10046f6
 10046f6:	outs   dx,DWORD PTR ds:[rsi]
 10046f7:	add    BYTE PTR [rdx+0x0],dh
 10046fa:	and    BYTE PTR [rax],al
 10046fc:	sub    eax,0x46002000
 1004701:	add    BYTE PTR [rcx+0x0],ah
 1004704:	imul   eax,DWORD PTR [rax],0x65006c
 100470a:	add    BYTE PTR fs:[rax],ah
 100470d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004711:	add    BYTE PTR [rax],ah
 1004713:	add    BYTE PTR [rbx+0x0],ah
 1004716:	jb     0x1004718
 1004718:	add    BYTE PTR gs:[rcx+0x0],ah
 100471c:	je     0x100471e
 100471e:	add    BYTE PTR gs:[rax],ah
 1004721:	add    BYTE PTR [rbp+0x0],ch
 1004724:	(bad)  
 1004725:	add    BYTE PTR [rsi+0x0],ch
 1004728:	imul   eax,DWORD PTR [rax],0x650066
 100472e:	jae    0x1004730
 1004730:	je     0x1004732
 1004732:	and    BYTE PTR [rax],al
 1004734:	data16 add BYTE PTR [rcx+0x0],ch
 1004738:	ins    BYTE PTR es:[rdi],dx
 1004739:	add    BYTE PTR [rbp+0x0],ah
 100473c:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1005143
	...
 100474f:	add    BYTE PTR [rbp+0x0],al
 1004752:	jb     0x1004754
 1004754:	jb     0x1004756
 1004756:	outs   dx,DWORD PTR ds:[rsi]
 1004757:	add    BYTE PTR [rdx+0x0],dh
 100475a:	and    BYTE PTR [rax],al
 100475c:	sub    eax,0x46002000
 1004761:	add    BYTE PTR [rcx+0x0],ah
 1004764:	imul   eax,DWORD PTR [rax],0x65006c
 100476a:	add    BYTE PTR fs:[rax],ah
 100476d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004771:	add    BYTE PTR [rax],ah
 1004773:	add    BYTE PTR [rdi+0x0],ch
 1004776:	jo     0x1004778
 1004778:	add    BYTE PTR gs:[rsi+0x0],ch
 100477c:	and    BYTE PTR [rax],al
 100477e:	add    BYTE PTR fs:[rbp+0x0],ah
 1004782:	(bad)  
 1004783:	add    BYTE PTR [rbp+0x0],dh
 1004786:	add    BYTE PTR [eax],ah
 1004789:	add    BYTE PTR [rax+0x0],dh
 100478c:	jb     0x100478e
 100478e:	outs   dx,DWORD PTR ds:[rsi]
 100478f:	add    BYTE PTR [rbx+0x0],ah
 1004792:	add    BYTE PTR gs:[rbx+0x0],dh
 1004796:	jae    0x1004798
 1004798:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100519f
 100479f:	add    BYTE PTR [rbp+0x0],al
 10047a2:	jb     0x10047a4
 10047a4:	jb     0x10047a6
 10047a6:	outs   dx,DWORD PTR ds:[rsi]
 10047a7:	add    BYTE PTR [rdx+0x0],dh
 10047aa:	and    BYTE PTR [rax],al
 10047ac:	sub    eax,0x46002000
 10047b1:	add    BYTE PTR [rcx+0x0],ah
 10047b4:	imul   eax,DWORD PTR [rax],0x65006c
 10047ba:	add    BYTE PTR fs:[rax],ah
 10047bd:	add    BYTE PTR [rdi+0x0],dh
 10047c0:	push   0x6c006900
 10047c5:	add    BYTE PTR [rbp+0x0],ah
 10047c8:	and    BYTE PTR [rax],al
 10047ca:	ja     0x10047cc
 10047cc:	jb     0x10047ce
 10047ce:	imul   eax,DWORD PTR [rax],0x690074
 10047d4:	outs   dx,BYTE PTR ds:[rsi]
 10047d5:	add    BYTE PTR [rdi+0x0],ah
 10047d8:	and    BYTE PTR [rax],al
 10047da:	ins    DWORD PTR es:[rdi],dx
 10047db:	add    BYTE PTR [rcx+0x0],ch
 10047de:	outs   dx,BYTE PTR ds:[rsi]
 10047df:	add    BYTE PTR [rcx+0x0],ch
 10047e2:	and    BYTE PTR [rax],al
 10047e4:	add    BYTE PTR fs:[rbp+0x0],dh
 10047e8:	ins    DWORD PTR es:[rdi],dx
 10047e9:	add    BYTE PTR [rax+0x0],dh
 10047ec:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10051f3
	...
 10047ff:	add    BYTE PTR [rbp+0x0],al
 1004802:	jb     0x1004804
 1004804:	jb     0x1004806
 1004806:	outs   dx,DWORD PTR ds:[rsi]
 1004807:	add    BYTE PTR [rdx+0x0],dh
 100480a:	and    BYTE PTR [rax],al
 100480c:	sub    eax,0x46002000
 1004811:	add    BYTE PTR [rcx+0x0],ah
 1004814:	imul   eax,DWORD PTR [rax],0x65006c
 100481a:	add    BYTE PTR fs:[rax],ah
 100481d:	add    BYTE PTR [rdx+0x0],dh
 1004820:	add    BYTE PTR gs:[rcx+0x0],ah
 1004824:	add    BYTE PTR fs:[rcx+0x0],ch
 1004828:	outs   dx,BYTE PTR ds:[rsi]
 1004829:	add    BYTE PTR [rdi+0x0],ah
 100482c:	and    BYTE PTR [rax],al
 100482e:	jb     0x1004830
 1004830:	add    BYTE PTR gs:[rdi+0x0],ah
 1004834:	imul   eax,DWORD PTR [rax],0x740073
 100483a:	jb     0x100483c
 100483c:	jns    0x100483e
 100483e:	and    BYTE PTR [rax],al
 1004840:	imul   eax,DWORD PTR [rax],0x65
 1004843:	add    BYTE PTR [rcx+0x0],bh
 1004846:	jae    0x1004848
 1004848:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100524f
 100484f:	add    BYTE PTR [rbp+0x0],al
 1004852:	jb     0x1004854
 1004854:	jb     0x1004856
 1004856:	outs   dx,DWORD PTR ds:[rsi]
 1004857:	add    BYTE PTR [rdx+0x0],dh
 100485a:	and    BYTE PTR [rax],al
 100485c:	sub    eax,0x46002000
 1004861:	add    BYTE PTR [rcx+0x0],ah
 1004864:	imul   eax,DWORD PTR [rax],0x65006c
 100486a:	add    BYTE PTR fs:[rax],ah
 100486d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004871:	add    BYTE PTR [rax],ah
 1004873:	add    BYTE PTR [rbx+0x0],dh
 1004876:	je     0x1004878
 1004878:	(bad)  
 1004879:	add    BYTE PTR [rdx+0x0],dh
 100487c:	je     0x100487e
 100487e:	and    BYTE PTR [rax],al
 1004880:	push   rdi
 1004881:	add    BYTE PTR [rcx+0x0],ah
 1004884:	je     0x1004886
 1004886:	jae    0x1004888
 1004888:	outs   dx,DWORD PTR ds:[rsi]
 1004889:	add    BYTE PTR [rsi+0x0],ch
 100488c:	and    BYTE PTR [rax],al
 100488e:	jo     0x1004890
 1004890:	jb     0x1004892
 1004892:	outs   dx,DWORD PTR ds:[rsi]
 1004893:	add    BYTE PTR [rbx+0x0],ah
 1004896:	add    BYTE PTR gs:[rbx+0x0],dh
 100489a:	jae    0x100489c
 100489c:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10052a3
	...
 10048af:	add    BYTE PTR [rbp+0x0],al
 10048b2:	jb     0x10048b4
 10048b4:	jb     0x10048b6
 10048b6:	outs   dx,DWORD PTR ds:[rsi]
 10048b7:	add    BYTE PTR [rdx+0x0],dh
 10048ba:	and    BYTE PTR [rax],al
 10048bc:	sub    eax,0x46002000
 10048c1:	add    BYTE PTR [rcx+0x0],ah
 10048c4:	imul   eax,DWORD PTR [rax],0x65006c
 10048ca:	add    BYTE PTR fs:[rax],ah
 10048cd:	add    BYTE PTR [rdi+0x0],dh
 10048d0:	jb     0x10048d2
 10048d2:	imul   eax,DWORD PTR [rax],0x690074
 10048d8:	outs   dx,BYTE PTR ds:[rsi]
 10048d9:	add    BYTE PTR [rdi+0x0],ah
 10048dc:	and    BYTE PTR [rax],al
 10048de:	je     0x10048e0
 10048e0:	push   0x20006500
 10048e5:	add    BYTE PTR [rdi+0x0],dl
 10048e8:	(bad)  
 10048e9:	add    BYTE PTR [rax+rax*1+0x73],dh
 10048ed:	add    BYTE PTR [rdi+0x0],ch
 10048f0:	outs   dx,BYTE PTR ds:[rsi]
 10048f1:	add    BYTE PTR [rax],ah
 10048f3:	add    BYTE PTR [rbp+0x0],ch
 10048f6:	(bad)  
 10048f7:	add    BYTE PTR [rsi+0x0],ch
 10048fa:	imul   eax,DWORD PTR [rax],0x650066
 1004900:	jae    0x1004902
 1004902:	je     0x1004904
 1004904:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100530b
 100490b:	add    BYTE PTR [rax],al
 100490d:	add    BYTE PTR [rax],al
 100490f:	add    BYTE PTR [rbp+0x0],al
 1004912:	jb     0x1004914
 1004914:	jb     0x1004916
 1004916:	outs   dx,DWORD PTR ds:[rsi]
 1004917:	add    BYTE PTR [rdx+0x0],dh
 100491a:	and    BYTE PTR [rax],al
 100491c:	sub    eax,0x56002000
 1004921:	add    BYTE PTR [rbp+0x0],ah
 1004924:	jb     0x1004926
 1004926:	jae    0x1004928
 1004928:	imul   eax,DWORD PTR [rax],0x6e006f
 100492e:	and    BYTE PTR [rax],al
 1004930:	ins    DWORD PTR es:[rdi],dx
 1004931:	add    BYTE PTR [rcx+0x0],ch
 1004934:	jae    0x1004936
 1004936:	ins    DWORD PTR es:[rdi],dx
 1004937:	add    BYTE PTR [rcx+0x0],ah
 100493a:	je     0x100493c
 100493c:	movsxd eax,DWORD PTR [rax]
 100493e:	push   0x64002000
 1004943:	add    BYTE PTR [rbp+0x0],ah
 1004946:	je     0x1004948
 1004948:	add    BYTE PTR gs:[rbx+0x0],ah
 100494c:	je     0x100494e
 100494e:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1004953:	add    BYTE PTR [rip+0xa00],cl        # 0x1005359
 1004959:	add    BYTE PTR [rax],al
 100495b:	add    BYTE PTR [rax],al
 100495d:	add    BYTE PTR [rax],al
 100495f:	add    BYTE PTR [rbp+0x0],al
 1004962:	jb     0x1004964
 1004964:	jb     0x1004966
 1004966:	outs   dx,DWORD PTR ds:[rsi]
 1004967:	add    BYTE PTR [rdx+0x0],dh
 100496a:	and    BYTE PTR [rax],al
 100496c:	sub    eax,0x52002000
 1004971:	add    BYTE PTR [rbp+0x0],ah
 1004974:	ins    DWORD PTR es:[rdi],dx
 1004975:	add    BYTE PTR [rdi+0x0],ch
 1004978:	je     0x100497a
 100497a:	add    BYTE PTR gs:[rax],ah
 100497d:	add    BYTE PTR [rbp+0x0],ch
 1004980:	add    BYTE PTR gs:[rbp+0x0],ch
 1004984:	outs   dx,DWORD PTR ds:[rsi]
 1004985:	add    BYTE PTR [rdx+0x0],dh
 1004988:	jns    0x100498a
 100498a:	and    BYTE PTR [rax],al
 100498c:	jb     0x100498e
 100498e:	add    BYTE PTR gs:[rcx+0x0],ah
 1004992:	add    BYTE PTR fs:[rax],ah
 1004995:	add    BYTE PTR [rsi+0x0],ah
 1004998:	(bad)  
 1004999:	add    BYTE PTR [rcx+0x0],ch
 100499c:	ins    BYTE PTR es:[rdi],dx
 100499d:	add    BYTE PTR [rbp+0x0],ah
 10049a0:	add    BYTE PTR fs:[rsi],ch
 10049a3:	add    BYTE PTR [rip+0xa00],cl        # 0x10053a9
 10049a9:	add    BYTE PTR [rax],al
 10049ab:	add    BYTE PTR [rax],al
 10049ad:	add    BYTE PTR [rax],al
 10049af:	add    BYTE PTR [rbp+0x0],al
 10049b2:	jb     0x10049b4
 10049b4:	jb     0x10049b6
 10049b6:	outs   dx,DWORD PTR ds:[rsi]
 10049b7:	add    BYTE PTR [rdx+0x0],dh
 10049ba:	and    BYTE PTR [rax],al
 10049bc:	sub    eax,0x52002000
 10049c1:	add    BYTE PTR [rbp+0x0],ah
 10049c4:	ins    DWORD PTR es:[rdi],dx
 10049c5:	add    BYTE PTR [rdi+0x0],ch
 10049c8:	je     0x10049ca
 10049ca:	add    BYTE PTR gs:[rax],ah
 10049cd:	add    BYTE PTR [rbp+0x0],ch
 10049d0:	add    BYTE PTR gs:[rbp+0x0],ch
 10049d4:	outs   dx,DWORD PTR ds:[rsi]
 10049d5:	add    BYTE PTR [rdx+0x0],dh
 10049d8:	jns    0x10049da
 10049da:	and    BYTE PTR [rax],al
 10049dc:	data16 add BYTE PTR [rcx+0x0],ah
 10049e0:	imul   eax,DWORD PTR [rax],0x65006c
 10049e6:	add    BYTE PTR fs:[rax],ah
 10049e9:	add    BYTE PTR [rbx+0x0],ah
 10049ec:	push   0x63006500
 10049f1:	add    BYTE PTR [rbx+0x0],ch
 10049f4:	jae    0x10049f6
 10049f6:	jne    0x10049f8
 10049f8:	ins    DWORD PTR es:[rdi],dx
 10049f9:	add    BYTE PTR [rsi],ch
 10049fb:	add    BYTE PTR [rip+0xa00],cl        # 0x1005401
	...
 1004a0d:	add    BYTE PTR [rax],al
 1004a0f:	add    BYTE PTR [rbp+0x0],al
 1004a12:	jb     0x1004a14
 1004a14:	jb     0x1004a16
 1004a16:	outs   dx,DWORD PTR ds:[rsi]
 1004a17:	add    BYTE PTR [rdx+0x0],dh
 1004a1a:	and    BYTE PTR [rax],al
 1004a1c:	sub    eax,0x52002000
 1004a21:	add    BYTE PTR [rbp+0x0],ah
 1004a24:	ins    DWORD PTR es:[rdi],dx
 1004a25:	add    BYTE PTR [rdi+0x0],ch
 1004a28:	je     0x1004a2a
 1004a2a:	add    BYTE PTR gs:[rax],ah
 1004a2d:	add    BYTE PTR [rbp+0x0],ch
 1004a30:	add    BYTE PTR gs:[rbp+0x0],ch
 1004a34:	outs   dx,DWORD PTR ds:[rsi]
 1004a35:	add    BYTE PTR [rdx+0x0],dh
 1004a38:	jns    0x1004a3a
 1004a3a:	and    BYTE PTR [rax],al
 1004a3c:	data16 add BYTE PTR [rcx+0x0],ah
 1004a40:	imul   eax,DWORD PTR [rax],0x65006c
 1004a46:	add    BYTE PTR fs:[rax],ah
 1004a49:	add    BYTE PTR [rbx+0x0],dh
 1004a4c:	(bad)  
 1004a4d:	add    BYTE PTR [rsi+0x0],ch
 1004a50:	imul   eax,DWORD PTR [rax],0x790074
 1004a56:	and    BYTE PTR [rax],al
 1004a58:	movsxd eax,DWORD PTR [rax]
 1004a5a:	push   0x63006500
 1004a5f:	add    BYTE PTR [rbx+0x0],ch
 1004a62:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1005469
 1004a69:	add    BYTE PTR [rax],al
 1004a6b:	add    BYTE PTR [rax],al
 1004a6d:	add    BYTE PTR [rax],al
 1004a6f:	add    BYTE PTR [rax+rax*1+0x68],dl
 1004a73:	add    BYTE PTR [rbp+0x0],ah
 1004a76:	and    BYTE PTR [rax],al
 1004a78:	add    BYTE PTR gs:[rdx+0x0],dh
 1004a7c:	jb     0x1004a7e
 1004a7e:	outs   dx,DWORD PTR ds:[rsi]
 1004a7f:	add    BYTE PTR [rdx+0x0],dh
 1004a82:	and    BYTE PTR [rax],al
 1004a84:	imul   eax,DWORD PTR [rax],0x66006e
 1004a8a:	outs   dx,DWORD PTR ds:[rsi]
 1004a8b:	add    BYTE PTR [rdx+0x0],dh
 1004a8e:	ins    DWORD PTR es:[rdi],dx
 1004a8f:	add    BYTE PTR [rcx+0x0],ah
 1004a92:	je     0x1004a94
 1004a94:	imul   eax,DWORD PTR [rax],0x6e006f
 1004a9a:	and    BYTE PTR [rax],al
 1004a9c:	push   0x73006100
 1004aa1:	add    BYTE PTR [rax],ah
 1004aa3:	add    BYTE PTR [rdx+0x0],ah
 1004aa6:	add    BYTE PTR gs:[rbp+0x0],ah
 1004aaa:	outs   dx,BYTE PTR ds:[rsi]
 1004aab:	add    BYTE PTR [rax],ah
 1004aad:	add    BYTE PTR [rbx+0x0],dh
 1004ab0:	jne    0x1004ab2
 1004ab2:	(bad)  
 1004ab3:	add    BYTE PTR [rbp+0x0],ch
 1004ab6:	imul   eax,DWORD PTR [rax],0x740074
 1004abc:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1004ac1:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004ac5:	add    BYTE PTR [rax],ah
 1004ac7:	add    BYTE PTR [rdi+0x0],dl
 1004aca:	(bad)  
 1004acb:	add    BYTE PTR [rax+rax*1+0x73],dh
 1004acf:	add    BYTE PTR [rdi+0x0],ch
 1004ad2:	outs   dx,BYTE PTR ds:[rsi]
 1004ad3:	add    BYTE PTR [rax],ah
 1004ad5:	add    BYTE PTR [rbp+0x0],ah
 1004ad8:	jb     0x1004ada
 1004ada:	jb     0x1004adc
 1004adc:	outs   dx,DWORD PTR ds:[rsi]
 1004add:	add    BYTE PTR [rdx+0x0],dh
 1004ae0:	and    BYTE PTR [rax],al
 1004ae2:	jb     0x1004ae4
 1004ae4:	add    BYTE PTR gs:[rax+0x0],dh
 1004ae8:	outs   dx,DWORD PTR ds:[rsi]
 1004ae9:	add    BYTE PTR [rdx+0x0],dh
 1004aec:	je     0x1004aee
 1004aee:	imul   eax,DWORD PTR [rax],0x67006e
 1004af4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10054fb
 1004afb:	add    BYTE PTR [rax],al
 1004afd:	add    BYTE PTR [rax],al
 1004aff:	add    BYTE PTR [rbp+0x0],al
 1004b02:	jb     0x1004b04
 1004b04:	jb     0x1004b06
 1004b06:	outs   dx,DWORD PTR ds:[rsi]
 1004b07:	add    BYTE PTR [rdx+0x0],dh
 1004b0a:	and    BYTE PTR [rax],al
 1004b0c:	sub    eax,0x73002000
 1004b11:	add    BYTE PTR [rdi+0x0],ch
 1004b14:	ins    DWORD PTR es:[rdi],dx
 1004b15:	add    BYTE PTR [rbp+0x0],ah
 1004b18:	and    BYTE PTR [rax],al
 1004b1a:	outs   dx,DWORD PTR ds:[rsi]
 1004b1b:	add    BYTE PTR [rsi+0x0],ah
 1004b1e:	and    BYTE PTR [rax],al
 1004b20:	je     0x1004b22
 1004b22:	push   0x20006500
 1004b27:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004b2b:	add    BYTE PTR [rbp+0x0],ch
 1004b2e:	jo     0x1004b30
 1004b30:	and    BYTE PTR [rax],al
 1004b32:	data16 add BYTE PTR [rcx+0x0],ch
 1004b36:	ins    BYTE PTR es:[rdi],dx
 1004b37:	add    BYTE PTR [rbp+0x0],ah
 1004b3a:	jae    0x1004b3c
 1004b3c:	and    BYTE PTR [rax],al
 1004b3e:	ja     0x1004b40
 1004b40:	add    BYTE PTR gs:[rdx+0x0],dh
 1004b44:	add    BYTE PTR gs:[rax],ah
 1004b47:	add    BYTE PTR [rsi+0x0],ch
 1004b4a:	outs   dx,DWORD PTR ds:[rsi]
 1004b4b:	add    BYTE PTR [rax+rax*1+0x20],dh
 1004b4f:	add    BYTE PTR [rdi+0x0],ah
 1004b52:	add    BYTE PTR gs:[rsi+0x0],ch
 1004b56:	add    BYTE PTR gs:[rdx+0x0],dh
 1004b5a:	(bad)  
 1004b5b:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004b5f:	add    BYTE PTR [rax+rax*1+0x20],ah
 1004b63:	add    BYTE PTR [rdi+0x0],ch
 1004b66:	outs   dx,BYTE PTR ds:[rsi]
 1004b67:	add    BYTE PTR [rax],ah
 1004b69:	add    BYTE PTR [rdx+0x0],dh
 1004b6c:	add    BYTE PTR gs:[rbp+0x0],ch
 1004b70:	outs   dx,DWORD PTR ds:[rsi]
 1004b71:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004b75:	add    BYTE PTR [rax],ah
 1004b77:	add    BYTE PTR [rsi+0x0],ch
 1004b7a:	outs   dx,DWORD PTR ds:[rsi]
 1004b7b:	add    BYTE PTR [rax+rax*1+0x65],ah
 1004b7f:	add    BYTE PTR [rbx+0x0],dh
 1004b82:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1005589
 1004b89:	add    BYTE PTR [rax],al
 1004b8b:	add    BYTE PTR [rax],al
 1004b8d:	add    BYTE PTR [rax],al
 1004b8f:	add    al,dl
 1004b91:	xor    eax,0x101
 1004b96:	add    BYTE PTR [rax],al
 1004b98:	jo     0x1004bd0
 1004b9a:	add    DWORD PTR [rcx],eax
 1004b9c:	add    BYTE PTR [rax],al
 1004b9e:	add    BYTE PTR [rax],al
 1004ba0:	nop
 1004ba1:	add    DWORD PTR ss:[rcx],eax
 1004ba4:	add    BYTE PTR [rax],al
 1004ba6:	add    BYTE PTR [rax],al
 1004ba8:	lock add QWORD PTR [r9],rax
 1004bac:	add    BYTE PTR [rax],al
 1004bae:	add    BYTE PTR [rax],al
 1004bb0:	(bad)  
 1004bb1:	xor    al,0x1
 1004bb3:	add    DWORD PTR [rax],eax
 1004bb5:	add    BYTE PTR [rax],al
 1004bb7:	add    BYTE PTR [rax+0x34],al
 1004bba:	add    DWORD PTR [rcx],eax
 1004bbc:	add    BYTE PTR [rax],al
 1004bbe:	add    BYTE PTR [rax],al
 1004bc0:	xor    BYTE PTR [rbx],0x1
 1004bc3:	add    DWORD PTR [rax],eax
 1004bc5:	add    BYTE PTR [rax],al
 1004bc7:	add    BYTE PTR [rax+0x10137],dh
 1004bcd:	add    BYTE PTR [rax],al
 1004bcf:	add    al,dl
 1004bd1:	xor    al,0x1
 1004bd3:	add    DWORD PTR [rax],eax
 1004bd5:	add    BYTE PTR [rax],al
 1004bd7:	add    BYTE PTR [rax+0x33],ah
 1004bda:	add    DWORD PTR [rcx],eax
 1004bdc:	add    BYTE PTR [rax],al
 1004bde:	add    BYTE PTR [rax],al
 1004be0:	movabs al,ds:0xa000000000010140
 1004be9:	add    DWORD PTR [r9],eax
 1004bec:	add    BYTE PTR [rax],al
 1004bee:	add    BYTE PTR [rax],al
 1004bf0:	nop
 1004bf1:	xor    eax,DWORD PTR [rcx]
 1004bf3:	add    DWORD PTR [rax],eax
 1004bf5:	add    BYTE PTR [rax],al
 1004bf7:	add    BYTE PTR [rax],dl
 1004bf9:	xor    al,0x1
 1004bfb:	add    DWORD PTR [rax],eax
 1004bfd:	add    BYTE PTR [rax],al
 1004bff:	add    al,al
 1004c01:	xor    al,0x1
 1004c03:	add    DWORD PTR [rax],eax
 1004c05:	add    BYTE PTR [rax],al
 1004c07:	add    BYTE PTR [rax+0x10134],dh
 1004c0d:	add    BYTE PTR [rax],al
 1004c0f:	add    BYTE PTR [rax],dh
 1004c11:	xor    eax,0x101
 1004c16:	add    BYTE PTR [rax],al
 1004c18:	rex xor eax,0x101
 1004c1e:	add    BYTE PTR [rax],al
 1004c20:	and    BYTE PTR [rip+0x101],dh        # 0x1004d27
 1004c26:	add    BYTE PTR [rax],al
 1004c28:	lock xor al,0x1
 1004c2b:	add    DWORD PTR [rax],eax
 1004c2d:	add    BYTE PTR [rax],al
 1004c2f:	add    BYTE PTR [rax],al
 1004c31:	xor    eax,0x101
 1004c36:	add    BYTE PTR [rax],al
 1004c38:	adc    BYTE PTR [rip+0x101],dh        # 0x1004d3f
 1004c3e:	add    BYTE PTR [rax],al
 1004c40:	add    BYTE PTR [rcx+rax*1],dh
 1004c43:	add    DWORD PTR [rax],eax
 1004c45:	add    BYTE PTR [rax],al
 1004c47:	add    al,al
 1004c49:	rex.RXB add DWORD PTR [r9],r8d
 1004c4c:	add    BYTE PTR [rax],al
 1004c4e:	add    BYTE PTR [rax],al
 1004c50:	nop
 1004c51:	xor    eax,0x101
 1004c56:	add    BYTE PTR [rax],al
 1004c58:	xor    BYTE PTR [rip+0x101],0x0        # 0x1004d60
 1004c5f:	add    BYTE PTR [rax+0x35],ah
 1004c62:	add    DWORD PTR [rcx],eax
 1004c64:	add    BYTE PTR [rax],al
 1004c66:	add    BYTE PTR [rax],al
 1004c68:	jo     0x1004c9f
 1004c6a:	add    DWORD PTR [rcx],eax
 1004c6c:	add    BYTE PTR [rax],al
 1004c6e:	add    BYTE PTR [rax],al
 1004c70:	and    BYTE PTR [rcx+rax*1],dh
 1004c73:	add    DWORD PTR [rax],eax
 1004c75:	add    BYTE PTR [rax],al
 1004c77:	add    BYTE PTR [rax+0x3b],dh
 1004c7a:	add    DWORD PTR [rcx],eax
 1004c7c:	add    BYTE PTR [rax],al
 1004c7e:	add    BYTE PTR [rax],al
 1004c80:	movabs al,ds:0x2500000000010142
 1004c89:	add    BYTE PTR [rax+rax*1+0x73],ch
 1004c8d:	add    BYTE PTR [rax],ah
 1004c8f:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500b895
 1004c95:	add    BYTE PTR [rax],ah
 1004c97:	add    BYTE PTR [rax],dh
 1004c99:	add    BYTE PTR [rax],ah
 1004c9b:	add    BYTE PTR [rax],dh
 1004c9d:	add    BYTE PTR [rdx],bh
 1004c9f:	add    BYTE PTR [rax],dh
 1004ca1:	add    BYTE PTR [rax],ah
 1004ca3:	add    BYTE PTR [rip+0x7000],ah        # 0x100bca9
 1004ca9:	add    BYTE PTR [rax],al
 1004cab:	add    BYTE PTR [rax],al
 1004cad:	add    BYTE PTR [rax],al
 1004caf:	add    BYTE PTR [rax+rax*1+0x69],dl
 1004cb3:	add    BYTE PTR [rbp+0x0],ch
 1004cb6:	add    BYTE PTR gs:[rdi+0x0],ch
 1004cba:	jne    0x1004cbc
 1004cbc:	je     0x1004cbe
 1004cbe:	and    BYTE PTR [rax],al
 1004cc0:	ja     0x1004cc2
 1004cc2:	(bad)  
 1004cc3:	add    BYTE PTR [rcx+0x0],ch
 1004cc6:	je     0x1004cc8
 1004cc8:	imul   eax,DWORD PTR [rax],0x67006e
 1004cce:	and    BYTE PTR [rax],al
 1004cd0:	data16 add BYTE PTR [rdi+0x0],ch
 1004cd4:	jb     0x1004cd6
 1004cd6:	and    BYTE PTR [rax],al
 1004cd8:	add    BYTE PTR gs:[rax+0x0],bh
 1004cdc:	je     0x1004cde
 1004cde:	add    BYTE PTR gs:[rdx+0x0],dh
 1004ce2:	outs   dx,BYTE PTR ds:[rsi]
 1004ce3:	add    BYTE PTR [rcx+0x0],ah
 1004ce6:	ins    BYTE PTR es:[rdi],dx
 1004ce7:	add    BYTE PTR [rax],ah
 1004ce9:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004ced:	add    BYTE PTR [rbp+0x0],ch
 1004cf0:	jo     0x1004cf2
 1004cf2:	and    BYTE PTR [rax],al
 1004cf4:	jo     0x1004cf6
 1004cf6:	jb     0x1004cf8
 1004cf8:	outs   dx,DWORD PTR ds:[rsi]
 1004cf9:	add    BYTE PTR [rbx+0x0],ah
 1004cfc:	add    BYTE PTR gs:[rbx+0x0],dh
 1004d00:	jae    0x1004d02
 1004d02:	and    BYTE PTR [rax],al
 1004d04:	and    eax,0x2e006400
 1004d09:	add    BYTE PTR [rip+0xa00],cl        # 0x100570f
 1004d0f:	add    BYTE PTR [rbp+0x0],al
 1004d12:	js     0x1004d14
 1004d14:	je     0x1004d16
 1004d16:	add    BYTE PTR gs:[rdx+0x0],dh
 1004d1a:	outs   dx,BYTE PTR ds:[rsi]
 1004d1b:	add    BYTE PTR [rcx+0x0],ah
 1004d1e:	ins    BYTE PTR es:[rdi],dx
 1004d1f:	add    BYTE PTR [rax],ah
 1004d21:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004d25:	add    BYTE PTR [rbp+0x0],ch
 1004d28:	jo     0x1004d2a
 1004d2a:	and    BYTE PTR [rax],al
 1004d2c:	jo     0x1004d2e
 1004d2e:	jb     0x1004d30
 1004d30:	outs   dx,DWORD PTR ds:[rsi]
 1004d31:	add    BYTE PTR [rbx+0x0],ah
 1004d34:	add    BYTE PTR gs:[rbx+0x0],dh
 1004d38:	jae    0x1004d3a
 1004d3a:	and    BYTE PTR [rax],al
 1004d3c:	outs   dx,BYTE PTR ds:[rsi]
 1004d3d:	add    BYTE PTR [rdi+0x0],ch
 1004d40:	je     0x1004d42
 1004d42:	and    BYTE PTR [rax],al
 1004d44:	add    BYTE PTR gs:[rax+0x0],bh
 1004d48:	add    BYTE PTR gs:[rbx+0x0],ah
 1004d4c:	jne    0x1004d4e
 1004d4e:	je     0x1004d50
 1004d50:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1004d55:	add    BYTE PTR [rip+0xa00],cl        # 0x100575b
 1004d5b:	add    BYTE PTR [rax],al
 1004d5d:	add    BYTE PTR [rax],al
 1004d5f:	add    BYTE PTR [rsi],ch
 1004d61:	add    BYTE PTR [rdx+0x0],dh
 1004d64:	ins    BYTE PTR es:[rdi],dx
 1004d65:	add    BYTE PTR [rax+rax*1+0x0],ch
 1004d69:	add    BYTE PTR [rax],al
 1004d6b:	add    BYTE PTR [rax],al
 1004d6d:	add    BYTE PTR [rax],al
 1004d6f:	add    BYTE PTR [rdx+0x0],dh
 1004d72:	add    BYTE PTR gs:[rbx+0x0],dh
 1004d76:	outs   dx,DWORD PTR ds:[rsi]
 1004d77:	add    BYTE PTR [rbp+0x0],dh
 1004d7a:	jb     0x1004d7c
 1004d7c:	movsxd eax,DWORD PTR [rax]
 1004d7e:	add    BYTE PTR gs:[rbx+0x0],dh
 1004d82:	add    BYTE PTR [rax],al
 1004d84:	add    BYTE PTR [rax],al
 1004d86:	add    BYTE PTR [rax],al
 1004d88:	push   rdx
 1004d89:	add    BYTE PTR [rbp+0x0],ah
 1004d8c:	jae    0x1004d8e
 1004d8e:	outs   dx,DWORD PTR ds:[rsi]
 1004d8f:	add    BYTE PTR [rbp+0x0],dh
 1004d92:	jb     0x1004d94
 1004d94:	movsxd eax,DWORD PTR [rax]
 1004d96:	add    BYTE PTR gs:[rbx+0x0],dh
 1004d9a:	add    BYTE PTR [rax],al
 1004d9c:	push   rdx
 1004d9d:	push   rbx
 1004d9e:	rex.R push rbx
 1004da0:	push   0xffffffffffffff91
 1004da2:	add    eax,0x86c71d3e
 1004da7:	rex.WRXB scas al,BYTE PTR es:[rdi]
 1004da9:	(bad)  
 1004daa:	or     eax,DWORD PTR [rax]
 1004dac:	(bad)  
 1004dad:	sub    dh,cl
 1004daf:	xchg   BYTE PTR [rcx],al
 1004db1:	add    BYTE PTR [rax],al
 1004db3:	add    BYTE PTR [rsp+rdx*2+0x55],al
 1004db7:	je     0x1004e22
 1004db9:	ins    BYTE PTR es:[rdi],dx
 1004dba:	cs jo  0x1004e21
 1004dbd:	(bad)  
	...
 1004e06:	add    BYTE PTR [rax],al
 1004e08:	add    DWORD PTR [rax],eax
	...
 1004e12:	add    BYTE PTR [rax],al
 1004e14:	shl    BYTE PTR [rcx+0x4e300001],0x0
 1004e1b:	add    BYTE PTR [rax],cl
 1004e1d:	rex.WRX add BYTE PTR [rax],r8b
	...
 1004e38:	add    DWORD PTR [rax],eax
 1004e3a:	add    BYTE PTR [rax],al
 1004e3c:	rex.W
 1004e3d:	rex.WRX add BYTE PTR [rax],r8b
	...
 1004e48:	pop    rax
 1004e49:	rex.WRX add BYTE PTR [rax],r8b
	...
 1004e58:	shl    BYTE PTR [rcx+0x1],0x0
 1004e5f:	add    BYTE PTR [rax],al
 1004e61:	add    BYTE PTR [rax],al
 1004e63:	add    bh,bh
 1004e65:	(bad)  
 1004e66:	(bad)  
 1004e67:	inc    DWORD PTR [rax]
 1004e69:	add    BYTE PTR [rax],al
 1004e6b:	add    BYTE PTR [rax+0x0],al
 1004e6e:	add    BYTE PTR [rax],al
 1004e70:	xor    BYTE PTR [rsi+0x0],cl
	...
 1004e7f:	add    BYTE PTR [rax-0x4f],al
 1004e82:	add    DWORD PTR [rax],eax
	...
 1004e8c:	(bad)  
 1004e8d:	(bad)  
 1004e8e:	(bad)  
 1004e8f:	inc    DWORD PTR [rax]
 1004e91:	add    BYTE PTR [rax],al
 1004e93:	add    BYTE PTR [rax+0x0],al
 1004e96:	add    BYTE PTR [rax],al
 1004e98:	test   al,0x4e
	...
 1004eae:	add    BYTE PTR [rax],al
 1004eb0:	add    DWORD PTR [rax],eax
 1004eb2:	add    BYTE PTR [rax],al
 1004eb4:	ror    BYTE PTR [rsi+0x0],0x0
	...
 1004ec0:	or     BYTE PTR [rsi+0x0],0x0
	...
 1004ed0:	add    DWORD PTR [rax],eax
	...
 1004eda:	add    BYTE PTR [rax],al
 1004edc:	push   0xfffffffff80001b1
 1004ee1:	rex.WRX add BYTE PTR [rax],r8b
 1004ee4:	ror    BYTE PTR [rsi+0x0],1
	...
 1004eff:	add    BYTE PTR [rdx],al
 1004f01:	add    BYTE PTR [rax],al
 1004f03:	add    BYTE PTR [rax],dl
 1004f05:	rex.WRXB add BYTE PTR [r8],r8b
	...
 1004f10:	sub    BYTE PTR [rdi+0x0],cl
 1004f13:	add    BYTE PTR [rax+0x4e],al
	...
 1004f25:	add    BYTE PTR [rax],al
 1004f27:	add    BYTE PTR [rax-0x4f],ch
 1004f2a:	add    DWORD PTR [rax],eax
 1004f2c:	add    DWORD PTR [rax],eax
 1004f2e:	add    BYTE PTR [rax],al
 1004f30:	add    BYTE PTR [rax],al
 1004f32:	add    BYTE PTR [rax],al
 1004f34:	(bad)  
 1004f35:	(bad)  
 1004f36:	(bad)  
 1004f37:	inc    DWORD PTR [rax]
 1004f39:	add    BYTE PTR [rax],al
 1004f3b:	add    BYTE PTR [rax+0x0],al
 1004f3e:	add    BYTE PTR [rax],al
 1004f40:	clc    
 1004f41:	rex.WRX add BYTE PTR [rax],r8b
	...
 1004f80:	sub    rsp,0x28
 1004f84:	mov    DWORD PTR [rsp+0x30],ecx
 1004f88:	lea    rdx,[rip+0x14261]        # 0x10191f0
 1004f8f:	lea    rcx,[rsp+0x30]
 1004f94:	call   0x100da3c
 1004f99:	int3   
 1004f9a:	int3   
 1004f9b:	int3   
 1004f9c:	int3   
 1004f9d:	int3   
 1004f9e:	int3   
 1004f9f:	int3   
 1004fa0:	mov    rcx,QWORD PTR [rcx]
 1004fa3:	rex.W jmp QWORD PTR [rip+0xffffffffffffc62e]        # 0x10015d8
 1004faa:	int3   
 1004fab:	int3   
 1004fac:	int3   
 1004fad:	int3   
 1004fae:	int3   
 1004faf:	int3   
 1004fb0:	mov    QWORD PTR [rsp+0x10],rbx
 1004fb5:	mov    QWORD PTR [rsp+0x18],rbp
 1004fba:	push   rsi
 1004fbb:	push   rdi
 1004fbc:	push   r14
 1004fbe:	sub    rsp,0x40
 1004fc2:	mov    rsi,QWORD PTR [rcx+0x10]
 1004fc6:	mov    edi,r9d
 1004fc9:	mov    rbp,r8
 1004fcc:	mov    r14,rdx
 1004fcf:	mov    rbx,rcx
 1004fd2:	mov    QWORD PTR [rsp+0x60],0x0
 1004fdb:	test   rsi,rsi
 1004fde:	je     0x100504c
 1004fe0:	cmp    QWORD PTR [rsi],0x0
 1004fe4:	je     0x100503f
 1004fe6:	lea    rcx,[rip+0xffffffffffffc7db]        # 0x10017c8
 1004fed:	call   QWORD PTR [rip+0xffffffffffffc37d]        # 0x1001370
 1004ff3:	test   rax,rax
 1004ff6:	jne    0x1004fff
 1004ff8:	mov    eax,0x1
 1004ffd:	jmp    0x1005065
 1004fff:	lea    rdx,[rip+0xffffffffffffc7e2]        # 0x10017e8
 1005006:	mov    rcx,rax
 1005009:	call   QWORD PTR [rip+0xffffffffffffc379]        # 0x1001388
 100500f:	test   rax,rax
 1005012:	je     0x1005045
 1005014:	mov    rcx,QWORD PTR [rsi]
 1005017:	mov    QWORD PTR [rsp+0x30],0x0
 1005020:	mov    r9d,edi
 1005023:	mov    QWORD PTR [rsp+0x28],rcx
 1005028:	lea    rcx,[rsp+0x60]
 100502d:	xor    r8d,r8d
 1005030:	mov    QWORD PTR [rsp+0x20],rcx
 1005035:	mov    rcx,r14
 1005038:	mov    rdx,rbp
 100503b:	call   rax
 100503d:	jmp    0x1005065
 100503f:	cmp    DWORD PTR [rsi+0x8],0x0
 1005043:	jne    0x100504c
 1005045:	mov    eax,0x1
 100504a:	jmp    0x1005065
 100504c:	lea    rax,[rsp+0x60]
 1005051:	xor    r8d,r8d
 1005054:	mov    rdx,rbp
 1005057:	mov    rcx,r14
 100505a:	mov    QWORD PTR [rsp+0x20],rax
 100505f:	call   QWORD PTR [rip+0xffffffffffffbfa3]        # 0x1001008
 1005065:	test   eax,eax
 1005067:	jne    0x100508f
 1005069:	mov    rcx,QWORD PTR [rbx]
 100506c:	test   rcx,rcx
 100506f:	je     0x100507e
 1005071:	call   QWORD PTR [rip+0xffffffffffffbf89]        # 0x1001000
 1005077:	mov    QWORD PTR [rbx],0x0
 100507e:	mov    rcx,QWORD PTR [rsp+0x60]
 1005083:	and    edi,0x300
 1005089:	mov    QWORD PTR [rbx],rcx
 100508c:	mov    DWORD PTR [rbx+0x8],edi
 100508f:	mov    rbx,QWORD PTR [rsp+0x68]
 1005094:	mov    rbp,QWORD PTR [rsp+0x70]
 1005099:	add    rsp,0x40
 100509d:	pop    r14
 100509f:	pop    rdi
 10050a0:	pop    rsi
 10050a1:	ret    
 10050a2:	int3   
 10050a3:	int3   
 10050a4:	int3   
 10050a5:	int3   
 10050a6:	int3   
 10050a7:	int3   
 10050a8:	int3   
 10050a9:	int3   
 10050aa:	int3   
 10050ab:	int3   
 10050ac:	int3   
 10050ad:	int3   
 10050ae:	int3   
 10050af:	int3   
 10050b0:	xor    r11d,r11d
 10050b3:	mov    eax,r11d
 10050b6:	test   rdx,rdx
 10050b9:	je     0x10050c4
 10050bb:	cmp    rdx,0x7fffffff
 10050c2:	jbe    0x10050c9
 10050c4:	mov    eax,0x80070057
 10050c9:	test   eax,eax
 10050cb:	js     0x1005128
 10050cd:	mov    r10d,r11d
 10050d0:	test   rdx,rdx
 10050d3:	je     0x1005117
 10050d5:	mov    r9d,0x7ffffffe
 10050db:	sub    r9,rdx
 10050de:	sub    r8,rcx
 10050e1:	lea    rax,[r9+rdx*1]
 10050e5:	test   rax,rax
 10050e8:	je     0x1005112
 10050ea:	movzx  eax,WORD PTR [r8+rcx*1]
 10050ef:	test   ax,ax
 10050f2:	je     0x1005112
 10050f4:	mov    WORD PTR [rcx],ax
 10050f7:	add    rcx,0x2
 10050fb:	dec    rdx
 10050fe:	jne    0x10050e1
 1005100:	sub    rcx,0x2
 1005104:	mov    r10d,0x8007007a
 100510a:	mov    WORD PTR [rcx],r11w
 100510e:	mov    eax,r10d
 1005111:	ret    
 1005112:	test   rdx,rdx
 1005115:	jne    0x1005121
 1005117:	sub    rcx,0x2
 100511b:	mov    r10d,0x8007007a
 1005121:	mov    WORD PTR [rcx],r11w
 1005125:	mov    eax,r10d
 1005128:	repz ret 
 100512a:	int3   
 100512b:	int3   
 100512c:	int3   
 100512d:	int3   
 100512e:	int3   
 100512f:	int3   
 1005130:	mov    QWORD PTR [rsp+0x18],rbx
 1005135:	mov    QWORD PTR [rsp+0x20],rsi
 100513a:	push   rdi
 100513b:	push   r14
 100513d:	push   r15
 100513f:	sub    rsp,0x6a0
 1005146:	mov    rax,QWORD PTR [rip+0x16093]        # 0x101b1e0
 100514d:	xor    rax,rsp
 1005150:	mov    QWORD PTR [rsp+0x690],rax
 1005158:	mov    rdi,rdx
 100515b:	mov    rsi,rcx
 100515e:	mov    r14,QWORD PTR [rip+0x1617b]        # 0x101b2e0
 1005165:	test   r14,r14
 1005168:	je     0x10053f3
 100516e:	xor    r15d,r15d
 1005171:	mov    QWORD PTR [rsp+0x40],r15
 1005176:	mov    QWORD PTR [rsp+0x48],r15
 100517b:	mov    rax,QWORD PTR [r14]
 100517e:	lea    rdx,[rsp+0x40]
 1005183:	mov    rcx,r14
 1005186:	call   QWORD PTR [rax+0x28]
 1005189:	mov    DWORD PTR [rsp+0x50],eax
 100518d:	test   eax,eax
 100518f:	js     0x10053f3
 1005195:	lea    rcx,[rip+0x16154]        # 0x101b2f0
 100519c:	call   QWORD PTR [rip+0xffffffffffffc19e]        # 0x1001340
 10051a2:	nop
 10051a3:	lea    r8,[rsp+0x48]
 10051a8:	mov    edx,0x1389
 10051ad:	mov    rcx,QWORD PTR [rip+0x16944]        # 0x101baf8
 10051b4:	call   0x100e780
 10051b9:	mov    rdx,QWORD PTR [rsp+0x48]
 10051be:	test   rdx,rdx
 10051c1:	je     0x10051d1
 10051c3:	mov    rcx,QWORD PTR [rsp+0x40]
 10051c8:	mov    rax,QWORD PTR [rcx]
 10051cb:	call   QWORD PTR [rax+0x90]
 10051d1:	mov    rcx,QWORD PTR [rsp+0x40]
 10051d6:	mov    edx,DWORD PTR [rip+0x15f4c]        # 0x101b128
 10051dc:	mov    rax,QWORD PTR [rcx]
 10051df:	test   rsi,rsi
 10051e2:	je     0x10051e9
 10051e4:	xor    r8d,r8d
 10051e7:	jmp    0x10051f3
 10051e9:	btr    edx,0xa
 10051ed:	mov    r8d,0x400
 10051f3:	call   QWORD PTR [rax+0x20]
 10051f6:	mov    edx,DWORD PTR [rip+0x15f30]        # 0x101b12c
 10051fc:	test   edx,edx
 10051fe:	je     0x100520e
 1005200:	mov    rcx,QWORD PTR [rsp+0x40]
 1005205:	mov    rax,QWORD PTR [rcx]
 1005208:	xor    r8d,r8d
 100520b:	call   QWORD PTR [rax+0x28]
 100520e:	test   rsi,rsi
 1005211:	je     0x1005234
 1005213:	mov    rax,QWORD PTR [rsp+0x40]
 1005218:	mov    rbx,QWORD PTR [rax]
 100521b:	call   QWORD PTR [rip+0xffffffffffffc137]        # 0x1001358
 1005221:	mov    edx,eax
 1005223:	mov    r9,QWORD PTR [rsi+0x8]
 1005227:	mov    r8,QWORD PTR [rsi]
 100522a:	mov    rcx,QWORD PTR [rsp+0x40]
 100522f:	call   QWORD PTR [rbx+0x40]
 1005232:	jmp    0x100524a
 1005234:	mov    rcx,QWORD PTR [rsp+0x40]
 1005239:	mov    rax,QWORD PTR [rcx]
 100523c:	mov    rdx,QWORD PTR [rsp+0x6b8]
 1005244:	call   QWORD PTR [rax+0xc8]
 100524a:	mov    edx,0x104
 100524f:	cmp    WORD PTR [rip+0x160c9],0x0        # 0x101b320
 1005257:	je     0x100530a
 100525d:	lea    rcx,[rsp+0x270]
 1005265:	call   0x100ea40
 100526a:	mov    r11d,DWORD PTR [rip+0x160a7]        # 0x101b318
 1005271:	mov    DWORD PTR [rsp+0x28],r11d
 1005276:	lea    rbx,[rip+0x160a3]        # 0x101b320
 100527d:	mov    QWORD PTR [rsp+0x20],rbx
 1005282:	lea    r9,[rsp+0x270]
 100528a:	lea    r8,[rip+0xffffffffffffc587]        # 0x1001818
 1005291:	mov    edx,0x104
 1005296:	lea    rcx,[rsp+0x60]
 100529b:	call   QWORD PTR [rip+0xffffffffffffc29f]        # 0x1001540
 10052a1:	mov    r11d,DWORD PTR [rip+0x16070]        # 0x101b318
 10052a8:	mov    DWORD PTR [rsp+0x28],r11d
 10052ad:	mov    QWORD PTR [rsp+0x20],rbx
 10052b2:	lea    r9,[rsp+0x270]
 10052ba:	lea    r8,[rip+0xffffffffffffc56f]        # 0x1001830
 10052c1:	mov    edx,0x104
 10052c6:	lea    rcx,[rsp+0x480]
 10052ce:	call   QWORD PTR [rip+0xffffffffffffc26c]        # 0x1001540
 10052d4:	mov    rcx,QWORD PTR [rsp+0x40]
 10052d9:	mov    rax,QWORD PTR [rcx]
 10052dc:	lea    rdx,[rsp+0x480]
 10052e4:	call   QWORD PTR [rax+0x70]
 10052e7:	test   rdi,rdi
 10052ea:	je     0x1005301
 10052ec:	lea    r8,[rsp+0x480]
 10052f4:	mov    edx,0x104
 10052f9:	mov    rcx,rdi
 10052fc:	call   0x10050b0
 1005301:	lock inc DWORD PTR [rip+0x16010]        # 0x101b318
 1005308:	jmp    0x1005314
 100530a:	lea    rcx,[rsp+0x60]
 100530f:	call   0x100ebb0
 1005314:	mov    QWORD PTR [rsp+0x30],r15
 1005319:	mov    DWORD PTR [rsp+0x28],0x80
 1005321:	mov    DWORD PTR [rsp+0x20],0x2
 1005329:	xor    r9d,r9d
 100532c:	mov    edx,0x40000000
 1005331:	lea    r8d,[r9+0x1]
 1005335:	lea    rcx,[rsp+0x60]
 100533a:	call   QWORD PTR [rip+0xffffffffffffbfe8]        # 0x1001328
 1005340:	mov    QWORD PTR [rip+0x15fa1],rax        # 0x101b2e8
 1005347:	test   rax,rax
 100534a:	je     0x1005383
 100534c:	mov    rcx,QWORD PTR [rsp+0x40]
 1005351:	mov    rax,QWORD PTR [rcx]
 1005354:	lea    rdx,[rsp+0x60]
 1005359:	call   QWORD PTR [rax+0x68]
 100535c:	mov    rcx,QWORD PTR [rip+0x15f85]        # 0x101b2e8
 1005363:	call   0x100ecb0
 1005368:	test   rdi,rdi
 100536b:	je     0x1005383
 100536d:	lea    rcx,[rdi+0x208]
 1005374:	lea    r8,[rsp+0x60]
 1005379:	mov    edx,0x104
 100537e:	call   0x10050b0
 1005383:	test   DWORD PTR [rip+0x15d9b],0x8000        # 0x101b128
 100538d:	je     0x100539c
 100538f:	mov    rdx,QWORD PTR [rsp+0x40]
 1005394:	mov    rcx,r14
 1005397:	call   0x1012180
 100539c:	mov    rcx,QWORD PTR [rsp+0x40]
 10053a1:	mov    rax,QWORD PTR [rcx]
 10053a4:	call   QWORD PTR [rax+0x18]
 10053a7:	test   rdi,rdi
 10053aa:	je     0x10053b2
 10053ac:	mov    DWORD PTR [rdi+0x410],eax
 10053b2:	mov    rcx,QWORD PTR [rsp+0x40]
 10053b7:	mov    rax,QWORD PTR [rcx]
 10053ba:	call   QWORD PTR [rax+0x10]
 10053bd:	mov    rcx,QWORD PTR [rsp+0x48]
 10053c2:	test   rcx,rcx
 10053c5:	je     0x10053d2
 10053c7:	call   QWORD PTR [rip+0xffffffffffffc20b]        # 0x10015d8
 10053cd:	mov    QWORD PTR [rsp+0x48],r15
 10053d2:	mov    rcx,QWORD PTR [rip+0x15f0f]        # 0x101b2e8
 10053d9:	call   QWORD PTR [rip+0xffffffffffffbf51]        # 0x1001330
 10053df:	mov    QWORD PTR [rip+0x15f02],r15        # 0x101b2e8
 10053e6:	lea    rcx,[rip+0x15f03]        # 0x101b2f0
 10053ed:	call   QWORD PTR [rip+0xffffffffffffbf45]        # 0x1001338
 10053f3:	mov    eax,0x1
 10053f8:	mov    rcx,QWORD PTR [rsp+0x690]
 1005400:	xor    rcx,rsp
 1005403:	call   0x100daf0
 1005408:	lea    r11,[rsp+0x6a0]
 1005410:	mov    rbx,QWORD PTR [r11+0x30]
 1005414:	mov    rsi,QWORD PTR [r11+0x38]
 1005418:	mov    rsp,r11
 100541b:	pop    r15
 100541d:	pop    r14
 100541f:	pop    rdi
 1005420:	ret    
 1005421:	int3   
 1005422:	int3   
 1005423:	int3   
 1005424:	int3   
 1005425:	int3   
 1005426:	int3   
 1005427:	int3   
 1005428:	int3   
 1005429:	int3   
 100542a:	int3   
 100542b:	int3   
 100542c:	int3   
 100542d:	int3   
 100542e:	int3   
 100542f:	int3   
 1005430:	xor    edx,edx
 1005432:	jmp    0x1005130
 1005437:	int3   
 1005438:	int3   
 1005439:	int3   
 100543a:	int3   
 100543b:	int3   
 100543c:	int3   
 100543d:	int3   
 100543e:	int3   
 100543f:	int3   
 1005440:	rex push rbx
 1005442:	push   rsi
 1005443:	push   rdi
 1005444:	sub    rsp,0x50
 1005448:	xor    r9d,r9d
 100544b:	mov    rdi,rcx
 100544e:	xor    r8d,r8d
 1005451:	lea    edx,[r9+0x1]
 1005455:	xor    ecx,ecx
 1005457:	call   QWORD PTR [rip+0xffffffffffffbf0b]        # 0x1001368
 100545d:	lea    rcx,[rip+0x15e8c]        # 0x101b2f0
 1005464:	call   QWORD PTR [rip+0xffffffffffffbede]        # 0x1001348
 100546a:	lea    rcx,[rip+0x15eaf]        # 0x101b320
 1005471:	xor    esi,esi
 1005473:	xor    edx,edx
 1005475:	mov    r8d,0x208
 100547b:	mov    QWORD PTR [rip+0x15e66],rsi        # 0x101b2e8
 1005482:	call   0x100dcba
 1005487:	xor    ecx,ecx
 1005489:	mov    QWORD PTR [rsp+0x88],rsi
 1005491:	call   QWORD PTR [rip+0xffffffffffffbed9]        # 0x1001370
 1005497:	test   rax,rax
 100549a:	je     0x10054bf
 100549c:	lea    rdx,[rip+0xffffffffffffc35d]        # 0x1001800
 10054a3:	mov    rcx,rax
 10054a6:	call   QWORD PTR [rip+0xffffffffffffbedc]        # 0x1001388
 10054ac:	test   rax,rax
 10054af:	je     0x10054bf
 10054b1:	lea    rcx,[rsp+0x88]
 10054b9:	call   rax
 10054bb:	mov    ebx,eax
 10054bd:	jmp    0x10054d4
 10054bf:	call   QWORD PTR [rip+0xffffffffffffbe8b]        # 0x1001350
 10054c5:	mov    ebx,eax
 10054c7:	test   eax,eax
 10054c9:	jle    0x10054d4
 10054cb:	movzx  ebx,ax
 10054ce:	or     ebx,0x80070000
 10054d4:	test   ebx,ebx
 10054d6:	js     0x1005605
 10054dc:	mov    rcx,QWORD PTR [rsp+0x88]
 10054e4:	mov    rax,QWORD PTR [rcx]
 10054e7:	call   QWORD PTR [rax+0x20]
 10054ea:	mov    rcx,QWORD PTR [rsp+0x88]
 10054f2:	mov    ebx,eax
 10054f4:	test   eax,eax
 10054f6:	js     0x10055ff
 10054fc:	mov    QWORD PTR [rip+0x15ddd],rcx        # 0x101b2e0
 1005503:	test   rdi,rdi
 1005506:	je     0x1005548
 1005508:	lea    rdx,[rsp+0x80]
 1005510:	lea    rcx,[rsp+0x78]
 1005515:	mov    DWORD PTR [rsp+0x78],esi
 1005519:	mov    DWORD PTR [rsp+0x80],esi
 1005520:	call   rdi
 1005522:	mov    ebx,eax
 1005524:	test   eax,eax
 1005526:	js     0x1005605
 100552c:	mov    eax,DWORD PTR [rsp+0x78]
 1005530:	mov    DWORD PTR [rip+0x15bf2],eax        # 0x101b128
 1005536:	mov    eax,DWORD PTR [rsp+0x80]
 100553d:	mov    DWORD PTR [rip+0x15be9],eax        # 0x101b12c
 1005543:	jmp    0x1005605
 1005548:	lea    r8,[rip+0xffffffffffffc301]        # 0x1001850
 100554f:	lea    rcx,[rsp+0x30]
 1005554:	mov    r9d,0x20019
 100555a:	mov    rdx,0xffffffff80000002
 1005561:	mov    QWORD PTR [rsp+0x30],rsi
 1005566:	mov    DWORD PTR [rsp+0x38],esi
 100556a:	mov    QWORD PTR [rsp+0x40],rsi
 100556f:	call   0x1004fb0
 1005574:	mov    rdi,QWORD PTR [rsp+0x30]
 1005579:	test   eax,eax
 100557b:	jne    0x10055ef
 100557d:	lea    rax,[rsp+0x78]
 1005582:	lea    r9,[rsp+0x80]
 100558a:	lea    rdx,[rip+0xffffffffffffc33f]        # 0x10018d0
 1005591:	mov    QWORD PTR [rsp+0x28],rax
 1005596:	lea    rax,[rip+0x15b8b]        # 0x101b128
 100559d:	xor    r8d,r8d
 10055a0:	mov    rcx,rdi
 10055a3:	mov    DWORD PTR [rsp+0x78],0x4
 10055ab:	mov    QWORD PTR [rsp+0x20],rax
 10055b0:	call   QWORD PTR [rip+0xffffffffffffba5a]        # 0x1001010
 10055b6:	lea    rax,[rsp+0x78]
 10055bb:	lea    r9,[rsp+0x80]
 10055c3:	mov    QWORD PTR [rsp+0x28],rax
 10055c8:	lea    rax,[rip+0x15b5d]        # 0x101b12c
 10055cf:	lea    rdx,[rip+0xffffffffffffc31a]        # 0x10018f0
 10055d6:	xor    r8d,r8d
 10055d9:	mov    rcx,rdi
 10055dc:	mov    DWORD PTR [rsp+0x78],0x4
 10055e4:	mov    QWORD PTR [rsp+0x20],rax
 10055e9:	call   QWORD PTR [rip+0xffffffffffffba21]        # 0x1001010
 10055ef:	test   rdi,rdi
 10055f2:	je     0x1005605
 10055f4:	mov    rcx,rdi
 10055f7:	call   QWORD PTR [rip+0xffffffffffffba03]        # 0x1001000
 10055fd:	jmp    0x1005605
 10055ff:	mov    rax,QWORD PTR [rcx]
 1005602:	call   QWORD PTR [rax+0x10]
 1005605:	lea    rcx,[rip+0xfffffffffffffe24]        # 0x1005430
 100560c:	call   QWORD PTR [rip+0xffffffffffffbd4e]        # 0x1001360
 1005612:	mov    eax,ebx
 1005614:	add    rsp,0x50
 1005618:	pop    rdi
 1005619:	pop    rsi
 100561a:	pop    rbx
 100561b:	ret    
 100561c:	int3   
 100561d:	int3   
 100561e:	int3   
 100561f:	int3   
 1005620:	int3   
 1005621:	int3   
 1005622:	int3   
 1005623:	int3   
 1005624:	int3   
 1005625:	int3   
 1005626:	int3   
 1005627:	int3   
 1005628:	int3   
 1005629:	int3   
 100562a:	int3   
 100562b:	int3   
 100562c:	int3   
 100562d:	int3   
 100562e:	int3   
 100562f:	int3   
 1005630:	mov    rax,QWORD PTR [rip+0x15cb1]        # 0x101b2e8
 1005637:	ret    
 1005638:	int3   
 1005639:	int3   
 100563a:	int3   
 100563b:	int3   
 100563c:	int3   
 100563d:	int3   
 100563e:	int3   
 100563f:	int3   
 1005640:	xor    eax,eax
 1005642:	ret    
 1005643:	int3   
 1005644:	int3   
 1005645:	int3   
 1005646:	int3   
 1005647:	int3   
 1005648:	int3   
 1005649:	int3   
 100564a:	int3   
 100564b:	int3   
 100564c:	int3   
 100564d:	int3   
 100564e:	int3   
 100564f:	int3   
 1005650:	sub    rsp,0x28
 1005654:	cmp    BYTE PTR [rip+0x15ecd],0x0        # 0x101b528
 100565b:	jne    0x1005689
 100565d:	mov    ecx,0x65
 1005662:	mov    BYTE PTR [rip+0x15ebf],0x1        # 0x101b528
 1005669:	call   0x100e600
 100566e:	lea    rdx,[rip+0xffffffffffffc2ab]        # 0x1001920
 1005675:	mov    ecx,0x66
 100567a:	call   0x100e600
 100567f:	mov    ecx,0x67
 1005684:	call   0x100e600
 1005689:	add    rsp,0x28
 100568d:	ret    
 100568e:	int3   
 100568f:	int3   
 1005690:	int3   
 1005691:	int3   
 1005692:	int3   
 1005693:	int3   
 1005694:	int3   
 1005695:	int3   
 1005696:	int3   
 1005697:	int3   
 1005698:	int3   
 1005699:	int3   
 100569a:	int3   
 100569b:	int3   
 100569c:	int3   
 100569d:	int3   
 100569e:	int3   
 100569f:	int3   
 10056a0:	mov    rax,rsp
 10056a3:	push   rdi
 10056a4:	sub    rsp,0x4e0
 10056ab:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10056b4:	mov    QWORD PTR [rax+0x18],rbx
 10056b8:	mov    QWORD PTR [rax+0x20],rsi
 10056bc:	mov    rax,QWORD PTR [rip+0x15b1d]        # 0x101b1e0
 10056c3:	xor    rax,rsp
 10056c6:	mov    QWORD PTR [rsp+0x4d0],rax
 10056ce:	mov    rsi,rdx
 10056d1:	mov    edi,ecx
 10056d3:	call   0x100f400
 10056d8:	cmp    eax,0xa
 10056db:	jg     0x1005714
 10056dd:	call   0x100f4d0
 10056e2:	cmp    eax,0xa
 10056e5:	jg     0x1005714
 10056e7:	call   0x100f570
 10056ec:	cmp    eax,0xa
 10056ef:	jg     0x1005714
 10056f1:	call   0x100f610
 10056f6:	cmp    eax,0xa
 10056f9:	jg     0x1005714
 10056fb:	call   0x1005650
 1005700:	mov    ecx,0xa8
 1005705:	call   0x100e600
 100570a:	mov    eax,0x1
 100570f:	jmp    0x100583d
 1005714:	lea    rcx,[rsp+0xa0]
 100571c:	call   QWORD PTR [rip+0xffffffffffffb93e]        # 0x1001060
 1005722:	nop
 1005723:	lea    rdx,[rip+0xffffffffffffc216]        # 0x1001940
 100572a:	or     ecx,0xffffffff
 100572d:	call   0x100e5e0
 1005732:	lea    rcx,[rip+0xffffffffffffc207]        # 0x1001940
 1005739:	call   0x100e5f0
 100573e:	xor    ecx,ecx
 1005740:	call   0x1005440
 1005745:	cmp    BYTE PTR [rip+0x15ddc],0x0        # 0x101b528
 100574c:	jne    0x100577a
 100574e:	mov    BYTE PTR [rip+0x15dd3],0x1        # 0x101b528
 1005755:	mov    ecx,0x65
 100575a:	call   0x100e600
 100575f:	lea    rdx,[rip+0xffffffffffffc1ba]        # 0x1001920
 1005766:	mov    ecx,0x66
 100576b:	call   0x100e600
 1005770:	mov    ecx,0x67
 1005775:	call   0x100e600
 100577a:	lea    rcx,[rsp+0xa0]
 1005782:	call   QWORD PTR [rip+0xffffffffffffb8e0]        # 0x1001068
 1005788:	xor    r8d,r8d
 100578b:	mov    rdx,QWORD PTR [rip+0xffffffffffffb8de]        # 0x1001070
 1005792:	lea    rcx,[rsp+0xa0]
 100579a:	call   QWORD PTR [rip+0xffffffffffffb898]        # 0x1001038
 10057a0:	call   QWORD PTR [rip+0xffffffffffffbdaa]        # 0x1001550
 10057a6:	mov    rcx,rax
 10057a9:	call   QWORD PTR [rip+0xffffffffffffbd99]        # 0x1001548
 10057af:	mov    ecx,eax
 10057b1:	call   QWORD PTR [rip+0xffffffffffffbd81]        # 0x1001538
 10057b7:	test   eax,eax
 10057b9:	jne    0x10057d8
 10057bb:	call   QWORD PTR [rip+0xffffffffffffbd8f]        # 0x1001550
 10057c1:	mov    rdx,rax
 10057c4:	lea    rcx,[rsp+0xa0]
 10057cc:	call   QWORD PTR [rip+0xffffffffffffb87e]        # 0x1001050
 10057d2:	mov    ebx,eax
 10057d4:	test   eax,eax
 10057d6:	jne    0x1005825
 10057d8:	mov    r8,rsi
 10057db:	mov    edx,edi
 10057dd:	lea    rcx,[rsp+0xa0]
 10057e5:	call   QWORD PTR [rip+0xffffffffffffb85d]        # 0x1001048
 10057eb:	mov    ebx,eax
 10057ed:	test   eax,eax
 10057ef:	jne    0x1005825
 10057f1:	lea    rcx,[rsp+0xa0]
 10057f9:	call   QWORD PTR [rip+0xffffffffffffb841]        # 0x1001040
 10057ff:	mov    ebx,eax
 1005801:	test   eax,eax
 1005803:	jne    0x1005825
 1005805:	lea    rdx,[rsp+0xa0]
 100580d:	lea    rcx,[rsp+0x30]
 1005812:	call   0x1006540
 1005817:	lea    rcx,[rsp+0x30]
 100581c:	call   0x1006560
 1005821:	mov    ebx,eax
 1005823:	jmp    0x100582d
 1005825:	xor    eax,eax
 1005827:	cmp    ebx,0xa
 100582a:	cmove  ebx,eax
 100582d:	lea    rcx,[rsp+0xa0]
 1005835:	call   QWORD PTR [rip+0xffffffffffffb81d]        # 0x1001058
 100583b:	mov    eax,ebx
 100583d:	mov    rcx,QWORD PTR [rsp+0x4d0]
 1005845:	xor    rcx,rsp
 1005848:	call   0x100daf0
 100584d:	lea    r11,[rsp+0x4e0]
 1005855:	mov    rbx,QWORD PTR [r11+0x20]
 1005859:	mov    rsi,QWORD PTR [r11+0x28]
 100585d:	mov    rsp,r11
 1005860:	pop    rdi
 1005861:	ret    
 1005862:	int3   
 1005863:	int3   
 1005864:	int3   
 1005865:	int3   
 1005866:	int3   
 1005867:	int3   
 1005868:	int3   
 1005869:	int3   
 100586a:	int3   
 100586b:	int3   
 100586c:	int3   
 100586d:	int3   
 100586e:	int3   
 100586f:	int3   
 1005870:	mov    QWORD PTR [rsp+0x10],rbp
 1005875:	mov    QWORD PTR [rsp+0x18],rsi
 100587a:	push   rdi
 100587b:	sub    rsp,0x20
 100587f:	mov    edi,r8d
 1005882:	mov    rsi,rdx
 1005885:	mov    rbp,rcx
 1005888:	call   QWORD PTR [rip+0xffffffffffffba22]        # 0x10012b0
 100588e:	test   rax,rax
 1005891:	jne    0x10058a3
 1005893:	mov    rbp,QWORD PTR [rsp+0x38]
 1005898:	mov    rsi,QWORD PTR [rsp+0x40]
 100589d:	add    rsp,0x20
 10058a1:	pop    rdi
 10058a2:	ret    
 10058a3:	mov    rcx,rax
 10058a6:	mov    QWORD PTR [rsp+0x30],rbx
 10058ab:	call   QWORD PTR [rip+0xffffffffffffba6f]        # 0x1001320
 10058b1:	mov    rbx,rax
 10058b4:	test   rax,rax
 10058b7:	je     0x10058e9
 10058b9:	mov    rdx,rsi
 10058bc:	mov    rcx,rbp
 10058bf:	call   QWORD PTR [rip+0xffffffffffffb9e3]        # 0x10012a8
 10058c5:	mov    r11d,eax
 10058c8:	add    r11,rbx
 10058cb:	and    edi,0xf
 10058ce:	jbe    0x10058e4
 10058d0:	cmp    rbx,r11
 10058d3:	jae    0x10058e9
 10058d5:	movzx  eax,WORD PTR [rbx]
 10058d8:	lea    rbx,[rbx+rax*2]
 10058dc:	add    rbx,0x2
 10058e0:	dec    edi
 10058e2:	jne    0x10058d0
 10058e4:	cmp    rbx,r11
 10058e7:	jb     0x10058ed
 10058e9:	xor    eax,eax
 10058eb:	jmp    0x10058f9
 10058ed:	xor    eax,eax
 10058ef:	cmp    WORD PTR [rbx],ax
 10058f2:	cmove  rbx,rax
 10058f6:	mov    rax,rbx
 10058f9:	mov    rbx,QWORD PTR [rsp+0x30]
 10058fe:	mov    rbp,QWORD PTR [rsp+0x38]
 1005903:	mov    rsi,QWORD PTR [rsp+0x40]
 1005908:	add    rsp,0x20
 100590c:	pop    rdi
 100590d:	ret    
 100590e:	int3   
 100590f:	int3   
 1005910:	int3   
 1005911:	int3   
 1005912:	int3   
 1005913:	int3   
 1005914:	int3   
 1005915:	int3   
 1005916:	int3   
 1005917:	int3   
 1005918:	int3   
 1005919:	int3   
 100591a:	int3   
 100591b:	int3   
 100591c:	int3   
 100591d:	int3   
 100591e:	int3   
 100591f:	int3   
 1005920:	mov    QWORD PTR [rsp+0x8],rbx
 1005925:	mov    QWORD PTR [rsp+0x10],rbp
 100592a:	mov    QWORD PTR [rsp+0x18],rsi
 100592f:	mov    QWORD PTR [rsp+0x20],rdi
 1005934:	push   r14
 1005936:	sub    rsp,0x20
 100593a:	mov    ebp,ecx
 100593c:	movzx  r14d,dx
 1005940:	lea    rcx,[rip+0x161a9]        # 0x101baf0
 1005947:	xor    edx,edx
 1005949:	xor    ebx,ebx
 100594b:	call   0x100e1d4
 1005950:	lea    esi,[rbx+0x1]
 1005953:	mov    rdi,rax
 1005956:	test   rax,rax
 1005959:	je     0x10059b4
 100595b:	nop    DWORD PTR [rax+rax*1+0x0]
 1005960:	test   rbx,rbx
 1005963:	jne    0x10059b4
 1005965:	mov    eax,ebp
 1005967:	lea    edx,[rbx+0x6]
 100596a:	movzx  r9d,r14w
 100596e:	shr    eax,0x4
 1005971:	mov    rcx,rdi
 1005974:	inc    ax
 1005977:	movzx  r8d,ax
 100597b:	call   QWORD PTR [rip+0xffffffffffffb907]        # 0x1001288
 1005981:	test   rax,rax
 1005984:	je     0x100599c
 1005986:	mov    r8d,ebp
 1005989:	mov    rdx,rax
 100598c:	mov    rcx,rdi
 100598f:	call   0x1005870
 1005994:	mov    rbx,rax
 1005997:	test   rax,rax
 100599a:	jne    0x10059d1
 100599c:	lea    rcx,[rip+0x1614d]        # 0x101baf0
 10059a3:	mov    edx,esi
 10059a5:	call   0x100e1d4
 10059aa:	inc    esi
 10059ac:	mov    rdi,rax
 10059af:	test   rax,rax
 10059b2:	jne    0x1005960
 10059b4:	xor    eax,eax
 10059b6:	mov    rbx,QWORD PTR [rsp+0x30]
 10059bb:	mov    rbp,QWORD PTR [rsp+0x38]
 10059c0:	mov    rsi,QWORD PTR [rsp+0x40]
 10059c5:	mov    rdi,QWORD PTR [rsp+0x48]
 10059ca:	add    rsp,0x20
 10059ce:	pop    r14
 10059d0:	ret    
 10059d1:	mov    rax,rdi
 10059d4:	jmp    0x10059b6
 10059d6:	int3   
 10059d7:	int3   
 10059d8:	int3   
 10059d9:	int3   
 10059da:	int3   
 10059db:	int3   
 10059dc:	int3   
 10059dd:	int3   
 10059de:	int3   
 10059df:	int3   
 10059e0:	sub    rsp,0x28
 10059e4:	mov    rdx,QWORD PTR [rcx]
 10059e7:	sub    rdx,0x18
 10059eb:	or     eax,0xffffffff
 10059ee:	lock xadd DWORD PTR [rdx+0x10],eax
 10059f3:	dec    eax
 10059f5:	test   eax,eax
 10059f7:	jg     0x1005a02
 10059f9:	mov    rcx,QWORD PTR [rdx]
 10059fc:	mov    rax,QWORD PTR [rcx]
 10059ff:	call   QWORD PTR [rax+0x8]
 1005a02:	add    rsp,0x28
 1005a06:	ret    
 1005a07:	int3   
 1005a08:	int3   
 1005a09:	int3   
 1005a0a:	int3   
 1005a0b:	int3   
 1005a0c:	int3   
 1005a0d:	int3   
 1005a0e:	int3   
 1005a0f:	int3   
 1005a10:	mov    QWORD PTR [rsp+0x8],rbx
 1005a15:	push   rdi
 1005a16:	sub    rsp,0x20
 1005a1a:	mov    rax,QWORD PTR [rcx]
 1005a1d:	mov    rbx,rcx
 1005a20:	cmp    DWORD PTR [rax-0x10],0x0
 1005a24:	mov    rdi,QWORD PTR [rax-0x18]
 1005a28:	lea    rdx,[rax-0x18]
 1005a2c:	je     0x1005a82
 1005a2e:	cmp    DWORD PTR [rdx+0x10],0x0
 1005a32:	jge    0x1005a5b
 1005a34:	cmp    DWORD PTR [rax-0xc],0x0
 1005a38:	jge    0x1005a45
 1005a3a:	mov    ecx,0x80070057
 1005a3f:	call   0x1004f80
 1005a44:	int3   
 1005a45:	xor    ecx,ecx
 1005a47:	mov    DWORD PTR [rax-0x10],ecx
 1005a4a:	mov    rax,QWORD PTR [rbx]
 1005a4d:	mov    WORD PTR [rax],cx
 1005a50:	mov    rbx,QWORD PTR [rsp+0x30]
 1005a55:	add    rsp,0x20
 1005a59:	pop    rdi
 1005a5a:	ret    
 1005a5b:	or     eax,0xffffffff
 1005a5e:	lock xadd DWORD PTR [rdx+0x10],eax
 1005a63:	dec    eax
 1005a65:	test   eax,eax
 1005a67:	jg     0x1005a72
 1005a69:	mov    rcx,QWORD PTR [rdx]
 1005a6c:	mov    rax,QWORD PTR [rcx]
 1005a6f:	call   QWORD PTR [rax+0x8]
 1005a72:	mov    rax,QWORD PTR [rdi]
 1005a75:	mov    rcx,rdi
 1005a78:	call   QWORD PTR [rax+0x18]
 1005a7b:	add    rax,0x18
 1005a7f:	mov    QWORD PTR [rbx],rax
 1005a82:	mov    rbx,QWORD PTR [rsp+0x30]
 1005a87:	add    rsp,0x20
 1005a8b:	pop    rdi
 1005a8c:	ret    
 1005a8d:	int3   
 1005a8e:	int3   
 1005a8f:	int3   
 1005a90:	int3   
 1005a91:	int3   
 1005a92:	int3   
 1005a93:	int3   
 1005a94:	int3   
 1005a95:	int3   
 1005a96:	int3   
 1005a97:	int3   
 1005a98:	int3   
 1005a99:	int3   
 1005a9a:	int3   
 1005a9b:	int3   
 1005a9c:	int3   
 1005a9d:	int3   
 1005a9e:	int3   
 1005a9f:	int3   
 1005aa0:	mov    QWORD PTR [rsp+0x18],rbx
 1005aa5:	mov    QWORD PTR [rsp+0x20],rbp
 1005aaa:	push   rdi
 1005aab:	sub    rsp,0x20
 1005aaf:	movsxd rbx,r8d
 1005ab2:	mov    rbp,rdx
 1005ab5:	mov    rdi,rcx
 1005ab8:	test   r8d,r8d
 1005abb:	jne    0x1005ad1
 1005abd:	mov    rbx,QWORD PTR [rsp+0x40]
 1005ac2:	mov    rbp,QWORD PTR [rsp+0x48]
 1005ac7:	add    rsp,0x20
 1005acb:	pop    rdi
 1005acc:	jmp    0x1005a10
 1005ad1:	test   rdx,rdx
 1005ad4:	jne    0x1005ae1
 1005ad6:	mov    ecx,0x80070057
 1005adb:	call   0x1004f80
 1005ae0:	int3   
 1005ae1:	mov    rax,QWORD PTR [rcx]
 1005ae4:	mov    QWORD PTR [rsp+0x30],rsi
 1005ae9:	mov    rsi,rdx
 1005aec:	sub    rsi,rax
 1005aef:	mov    QWORD PTR [rsp+0x38],r14
 1005af4:	mov    r14d,DWORD PTR [rax-0x10]
 1005af8:	sar    rsi,1
 1005afb:	test   r8d,r8d
 1005afe:	jns    0x1005b0b
 1005b00:	mov    ecx,0x80070057
 1005b05:	call   0x1004f80
 1005b0a:	int3   
 1005b0b:	mov    ecx,0x1
 1005b10:	sub    ecx,DWORD PTR [rax-0x8]
 1005b13:	mov    eax,DWORD PTR [rax-0xc]
 1005b16:	sub    eax,ebx
 1005b18:	or     ecx,eax
 1005b1a:	jge    0x1005b26
 1005b1c:	mov    edx,ebx
 1005b1e:	mov    rcx,rdi
 1005b21:	call   0x1005c80
 1005b26:	mov    rcx,QWORD PTR [rdi]
 1005b29:	movsxd rdx,DWORD PTR [rcx-0xc]
 1005b2d:	add    rdx,rdx
 1005b30:	cmp    rsi,r14
 1005b33:	lea    r14,[rbx+rbx*1]
 1005b37:	mov    r9,r14
 1005b3a:	ja     0x1005b48
 1005b3c:	lea    r8,[rcx+rsi*2]
 1005b40:	call   QWORD PTR [rip+0xffffffffffffb9ca]        # 0x1001510
 1005b46:	jmp    0x1005b51
 1005b48:	mov    r8,rbp
 1005b4b:	call   QWORD PTR [rip+0xffffffffffffb9c7]        # 0x1001518
 1005b51:	mov    rax,QWORD PTR [rdi]
 1005b54:	cmp    ebx,DWORD PTR [rax-0xc]
 1005b57:	jg     0x1005b80
 1005b59:	mov    rsi,QWORD PTR [rsp+0x30]
 1005b5e:	mov    rbp,QWORD PTR [rsp+0x48]
 1005b63:	mov    DWORD PTR [rax-0x10],ebx
 1005b66:	mov    rax,QWORD PTR [rdi]
 1005b69:	mov    rbx,QWORD PTR [rsp+0x40]
 1005b6e:	xor    ecx,ecx
 1005b70:	mov    WORD PTR [r14+rax*1],cx
 1005b75:	mov    r14,QWORD PTR [rsp+0x38]
 1005b7a:	add    rsp,0x20
 1005b7e:	pop    rdi
 1005b7f:	ret    
 1005b80:	mov    ecx,0x80070057
 1005b85:	call   0x1004f80
 1005b8a:	int3   
 1005b8b:	int3   
 1005b8c:	int3   
 1005b8d:	int3   
 1005b8e:	int3   
 1005b8f:	int3   
 1005b90:	int3   
 1005b91:	int3   
 1005b92:	int3   
 1005b93:	int3   
 1005b94:	int3   
 1005b95:	int3   
 1005b96:	int3   
 1005b97:	int3   
 1005b98:	int3   
 1005b99:	int3   
 1005b9a:	int3   
 1005b9b:	int3   
 1005b9c:	int3   
 1005b9d:	int3   
 1005b9e:	int3   
 1005b9f:	int3   
 1005ba0:	sub    rsp,0x28
 1005ba4:	mov    ecx,0x8007000e
 1005ba9:	call   0x1004f80
 1005bae:	int3   
 1005baf:	int3   
 1005bb0:	int3   
 1005bb1:	int3   
 1005bb2:	int3   
 1005bb3:	int3   
 1005bb4:	int3   
 1005bb5:	int3   
 1005bb6:	int3   
 1005bb7:	int3   
 1005bb8:	int3   
 1005bb9:	int3   
 1005bba:	int3   
 1005bbb:	int3   
 1005bbc:	int3   
 1005bbd:	int3   
 1005bbe:	int3   
 1005bbf:	int3   
 1005bc0:	mov    QWORD PTR [rsp+0x8],rbx
 1005bc5:	mov    QWORD PTR [rsp+0x10],rbp
 1005bca:	mov    QWORD PTR [rsp+0x18],rsi
 1005bcf:	mov    QWORD PTR [rsp+0x20],rdi
 1005bd4:	push   r14
 1005bd6:	sub    rsp,0x20
 1005bda:	mov    rbx,QWORD PTR [rcx]
 1005bdd:	mov    rsi,rcx
 1005be0:	mov    edi,edx
 1005be2:	mov    rcx,QWORD PTR [rbx-0x18]
 1005be6:	mov    ebp,DWORD PTR [rbx-0x10]
 1005be9:	mov    rax,QWORD PTR [rcx]
 1005bec:	call   QWORD PTR [rax+0x20]
 1005bef:	mov    r8d,0x2
 1005bf5:	mov    edx,edi
 1005bf7:	mov    r9,QWORD PTR [rax]
 1005bfa:	mov    rcx,rax
 1005bfd:	call   QWORD PTR [r9]
 1005c00:	mov    r14,rax
 1005c03:	test   rax,rax
 1005c06:	jne    0x1005c0e
 1005c08:	call   0x1005ba0
 1005c0d:	int3   
 1005c0e:	cmp    ebp,edi
 1005c10:	mov    r8,rbx
 1005c13:	cmovl  edi,ebp
 1005c16:	inc    edi
 1005c18:	movsxd rdx,edi
 1005c1b:	lea    rdi,[rax+0x18]
 1005c1f:	add    rdx,rdx
 1005c22:	mov    rcx,rdi
 1005c25:	mov    r9,rdx
 1005c28:	call   QWORD PTR [rip+0xffffffffffffb8ea]        # 0x1001518
 1005c2e:	mov    DWORD PTR [r14+0x8],ebp
 1005c32:	or     eax,0xffffffff
 1005c35:	lock xadd DWORD PTR [rbx-0x8],eax
 1005c3a:	dec    eax
 1005c3c:	test   eax,eax
 1005c3e:	jg     0x1005c4e
 1005c40:	mov    rcx,QWORD PTR [rbx-0x18]
 1005c44:	lea    rdx,[rbx-0x18]
 1005c48:	mov    rax,QWORD PTR [rcx]
 1005c4b:	call   QWORD PTR [rax+0x8]
 1005c4e:	mov    rbx,QWORD PTR [rsp+0x30]
 1005c53:	mov    rbp,QWORD PTR [rsp+0x38]
 1005c58:	mov    QWORD PTR [rsi],rdi
 1005c5b:	mov    rsi,QWORD PTR [rsp+0x40]
 1005c60:	mov    rdi,QWORD PTR [rsp+0x48]
 1005c65:	add    rsp,0x20
 1005c69:	pop    r14
 1005c6b:	ret    
 1005c6c:	int3   
 1005c6d:	int3   
 1005c6e:	int3   
 1005c6f:	int3   
 1005c70:	int3   
 1005c71:	int3   
 1005c72:	int3   
 1005c73:	int3   
 1005c74:	int3   
 1005c75:	int3   
 1005c76:	int3   
 1005c77:	int3   
 1005c78:	int3   
 1005c79:	int3   
 1005c7a:	int3   
 1005c7b:	int3   
 1005c7c:	int3   
 1005c7d:	int3   
 1005c7e:	int3   
 1005c7f:	int3   
 1005c80:	sub    rsp,0x28
 1005c84:	mov    r8d,edx
 1005c87:	mov    rdx,QWORD PTR [rcx]
 1005c8a:	mov    r9,rcx
 1005c8d:	mov    eax,DWORD PTR [rdx-0x10]
 1005c90:	cmp    eax,r8d
 1005c93:	cmovg  r8d,eax
 1005c97:	cmp    DWORD PTR [rdx-0x8],0x1
 1005c9b:	jle    0x1005ca9
 1005c9d:	mov    edx,r8d
 1005ca0:	add    rsp,0x28
 1005ca4:	jmp    0x1005bc0
 1005ca9:	mov    ecx,DWORD PTR [rdx-0xc]
 1005cac:	cmp    ecx,r8d
 1005caf:	jge    0x1005cdb
 1005cb1:	cmp    ecx,0x40000000
 1005cb7:	jle    0x1005cc1
 1005cb9:	add    ecx,0x100000
 1005cbf:	jmp    0x1005cca
 1005cc1:	mov    eax,ecx
 1005cc3:	cdq    
 1005cc4:	sub    eax,edx
 1005cc6:	sar    eax,1
 1005cc8:	add    ecx,eax
 1005cca:	cmp    ecx,r8d
 1005ccd:	cmovl  ecx,r8d
 1005cd1:	mov    edx,ecx
 1005cd3:	mov    rcx,r9
 1005cd6:	call   0x1005cf0
 1005cdb:	add    rsp,0x28
 1005cdf:	ret    
 1005ce0:	int3   
 1005ce1:	int3   
 1005ce2:	int3   
 1005ce3:	int3   
 1005ce4:	int3   
 1005ce5:	int3   
 1005ce6:	int3   
 1005ce7:	int3   
 1005ce8:	int3   
 1005ce9:	int3   
 1005cea:	int3   
 1005ceb:	int3   
 1005cec:	int3   
 1005ced:	int3   
 1005cee:	int3   
 1005cef:	int3   
 1005cf0:	rex push rbx
 1005cf2:	sub    rsp,0x20
 1005cf6:	mov    r8d,edx
 1005cf9:	mov    rdx,QWORD PTR [rcx]
 1005cfc:	mov    rbx,rcx
 1005cff:	mov    rcx,QWORD PTR [rdx-0x18]
 1005d03:	sub    rdx,0x18
 1005d07:	cmp    DWORD PTR [rdx+0xc],r8d
 1005d0b:	jge    0x1005d36
 1005d0d:	test   r8d,r8d
 1005d10:	jle    0x1005d36
 1005d12:	mov    rax,QWORD PTR [rcx]
 1005d15:	mov    r9d,0x2
 1005d1b:	call   QWORD PTR [rax+0x10]
 1005d1e:	test   rax,rax
 1005d21:	jne    0x1005d29
 1005d23:	call   0x1005ba0
 1005d28:	int3   
 1005d29:	add    rax,0x18
 1005d2d:	mov    QWORD PTR [rbx],rax
 1005d30:	add    rsp,0x20
 1005d34:	pop    rbx
 1005d35:	ret    
 1005d36:	call   0x1005ba0
 1005d3b:	int3   
 1005d3c:	int3   
 1005d3d:	int3   
 1005d3e:	int3   
 1005d3f:	int3   
 1005d40:	int3   
 1005d41:	int3   
 1005d42:	int3   
 1005d43:	int3   
 1005d44:	int3   
 1005d45:	int3   
 1005d46:	int3   
 1005d47:	int3   
 1005d48:	int3   
 1005d49:	int3   
 1005d4a:	int3   
 1005d4b:	int3   
 1005d4c:	int3   
 1005d4d:	int3   
 1005d4e:	int3   
 1005d4f:	int3   
 1005d50:	sub    rsp,0x28
 1005d54:	mov    rdx,QWORD PTR [rcx]
 1005d57:	sub    rdx,0x18
 1005d5b:	or     eax,0xffffffff
 1005d5e:	lock xadd DWORD PTR [rdx+0x10],eax
 1005d63:	dec    eax
 1005d65:	test   eax,eax
 1005d67:	jg     0x1005d72
 1005d69:	mov    rcx,QWORD PTR [rdx]
 1005d6c:	mov    rax,QWORD PTR [rcx]
 1005d6f:	call   QWORD PTR [rax+0x8]
 1005d72:	add    rsp,0x28
 1005d76:	ret    
 1005d77:	int3   
 1005d78:	int3   
 1005d79:	int3   
 1005d7a:	int3   
 1005d7b:	int3   
 1005d7c:	int3   
 1005d7d:	int3   
 1005d7e:	int3   
 1005d7f:	int3   
 1005d80:	mov    QWORD PTR [rsp+0x8],rbx
 1005d85:	mov    QWORD PTR [rsp+0x10],rsi
 1005d8a:	push   rdi
 1005d8b:	sub    rsp,0x20
 1005d8f:	mov    eax,r8d
 1005d92:	mov    rdi,rdx
 1005d95:	mov    ebx,r8d
 1005d98:	shr    eax,0x4
 1005d9b:	mov    rsi,rcx
 1005d9e:	mov    r8d,0x6
 1005da4:	inc    ax
 1005da7:	mov    rcx,rdi
 1005daa:	movzx  edx,ax
 1005dad:	call   QWORD PTR [rip+0xffffffffffffb4dd]        # 0x1001290
 1005db3:	test   rax,rax
 1005db6:	je     0x1005ea6
 1005dbc:	mov    r8d,ebx
 1005dbf:	mov    rdx,rax
 1005dc2:	mov    rcx,rdi
 1005dc5:	call   0x1005870
 1005dca:	mov    rdi,rax
 1005dcd:	test   rax,rax
 1005dd0:	je     0x1005ea6
 1005dd6:	movzx  ebx,WORD PTR [rax]
 1005dd9:	test   ebx,ebx
 1005ddb:	jns    0x1005de8
 1005ddd:	mov    ecx,0x80070057
 1005de2:	call   0x1004f80
 1005de7:	int3   
 1005de8:	mov    rax,QWORD PTR [rsi]
 1005deb:	mov    ecx,0x1
 1005df0:	sub    ecx,DWORD PTR [rax-0x8]
 1005df3:	mov    eax,DWORD PTR [rax-0xc]
 1005df6:	sub    eax,ebx
 1005df8:	or     ecx,eax
 1005dfa:	jge    0x1005e06
 1005dfc:	mov    edx,ebx
 1005dfe:	mov    rcx,rsi
 1005e01:	call   0x1005c80
 1005e06:	movzx  eax,WORD PTR [rdi]
 1005e09:	lea    r8,[rdi+0x2]
 1005e0d:	cmp    eax,0xffffffff
 1005e10:	jne    0x1005e2d
 1005e12:	or     rax,0xffffffffffffffff
 1005e16:	data16 nop WORD PTR [rax+rax*1+0x0]
 1005e20:	inc    rax
 1005e23:	cmp    WORD PTR [r8+rax*2],0x0
 1005e29:	jne    0x1005e20
 1005e2b:	inc    eax
 1005e2d:	mov    rcx,QWORD PTR [rsi]
 1005e30:	movsxd r9,eax
 1005e33:	mov    rdx,rbx
 1005e36:	call   0x100dcd2
 1005e3b:	test   eax,eax
 1005e3d:	je     0x1005e74
 1005e3f:	cmp    eax,0xc
 1005e42:	je     0x1005e69
 1005e44:	cmp    eax,0x16
 1005e47:	je     0x1005e5e
 1005e49:	cmp    eax,0x22
 1005e4c:	je     0x1005e5e
 1005e4e:	cmp    eax,0x50
 1005e51:	je     0x1005e74
 1005e53:	mov    ecx,0x80004005
 1005e58:	call   0x1004f80
 1005e5d:	int3   
 1005e5e:	mov    ecx,0x80070057
 1005e63:	call   0x1004f80
 1005e68:	int3   
 1005e69:	mov    ecx,0x8007000e
 1005e6e:	call   0x1004f80
 1005e73:	int3   
 1005e74:	mov    rcx,QWORD PTR [rsi]
 1005e77:	cmp    ebx,DWORD PTR [rcx-0xc]
 1005e7a:	jg     0x1005e9b
 1005e7c:	mov    DWORD PTR [rcx-0x10],ebx
 1005e7f:	mov    rcx,QWORD PTR [rsi]
 1005e82:	xor    edx,edx
 1005e84:	mov    WORD PTR [rcx+rbx*2],dx
 1005e88:	lea    eax,[rdx+0x1]
 1005e8b:	mov    rbx,QWORD PTR [rsp+0x30]
 1005e90:	mov    rsi,QWORD PTR [rsp+0x38]
 1005e95:	add    rsp,0x20
 1005e99:	pop    rdi
 1005e9a:	ret    
 1005e9b:	mov    ecx,0x80070057
 1005ea0:	call   0x1004f80
 1005ea5:	int3   
 1005ea6:	mov    rbx,QWORD PTR [rsp+0x30]
 1005eab:	mov    rsi,QWORD PTR [rsp+0x38]
 1005eb0:	xor    eax,eax
 1005eb2:	add    rsp,0x20
 1005eb6:	pop    rdi
 1005eb7:	ret    
 1005eb8:	int3   
 1005eb9:	int3   
 1005eba:	int3   
 1005ebb:	int3   
 1005ebc:	int3   
 1005ebd:	int3   
 1005ebe:	int3   
 1005ebf:	int3   
 1005ec0:	lea    rax,[rip+0xffffffffffffd711]        # 0x10035d8
 1005ec7:	mov    QWORD PTR [rcx],rax
 1005eca:	rex.W jmp QWORD PTR [rip+0xffffffffffffb5ef]        # 0x10014c0
 1005ed1:	int3   
 1005ed2:	int3   
 1005ed3:	int3   
 1005ed4:	int3   
 1005ed5:	int3   
 1005ed6:	int3   
 1005ed7:	int3   
 1005ed8:	int3   
 1005ed9:	int3   
 1005eda:	int3   
 1005edb:	int3   
 1005edc:	int3   
 1005edd:	int3   
 1005ede:	int3   
 1005edf:	int3   
 1005ee0:	rex push rbx
 1005ee2:	sub    rsp,0x20
 1005ee6:	mov    rbx,rcx
 1005ee9:	call   QWORD PTR [rip+0xffffffffffffb5d9]        # 0x10014c8
 1005eef:	lea    r11,[rip+0xffffffffffffd6e2]        # 0x10035d8
 1005ef6:	mov    QWORD PTR [rbx],r11
 1005ef9:	mov    rax,rbx
 1005efc:	add    rsp,0x20
 1005f00:	pop    rbx
 1005f01:	ret    
 1005f02:	int3   
 1005f03:	int3   
 1005f04:	int3   
 1005f05:	int3   
 1005f06:	int3   
 1005f07:	int3   
 1005f08:	int3   
 1005f09:	int3   
 1005f0a:	int3   
 1005f0b:	int3   
 1005f0c:	int3   
 1005f0d:	int3   
 1005f0e:	int3   
 1005f0f:	int3   
 1005f10:	mov    QWORD PTR [rsp+0x8],rbx
 1005f15:	push   rdi
 1005f16:	sub    rsp,0x20
 1005f1a:	lea    rax,[rip+0xffffffffffffd6b7]        # 0x10035d8
 1005f21:	mov    ebx,edx
 1005f23:	mov    rdi,rcx
 1005f26:	mov    QWORD PTR [rcx],rax
 1005f29:	call   QWORD PTR [rip+0xffffffffffffb591]        # 0x10014c0
 1005f2f:	test   bl,0x1
 1005f32:	je     0x1005f3c
 1005f34:	mov    rcx,rdi
 1005f37:	call   0x100d814
 1005f3c:	mov    rax,rdi
 1005f3f:	mov    rbx,QWORD PTR [rsp+0x30]
 1005f44:	add    rsp,0x20
 1005f48:	pop    rdi
 1005f49:	ret    
 1005f4a:	int3   
 1005f4b:	int3   
 1005f4c:	int3   
 1005f4d:	int3   
 1005f4e:	int3   
 1005f4f:	int3   
 1005f50:	sub    rsp,0x48
 1005f54:	xor    eax,eax
 1005f56:	test   rdx,rdx
 1005f59:	je     0x1005faf
 1005f5b:	movabs rax,0x7fffffffffffffff
 1005f65:	cmp    rdx,rax
 1005f68:	ja     0x1005f78
 1005f6a:	lea    rcx,[rdx+rdx*1]
 1005f6e:	call   0x100dcc6
 1005f73:	test   rax,rax
 1005f76:	jne    0x1005faf
 1005f78:	lea    rdx,[rsp+0x58]
 1005f7d:	lea    rcx,[rsp+0x20]
 1005f82:	mov    QWORD PTR [rsp+0x58],0x0
 1005f8b:	call   QWORD PTR [rip+0xffffffffffffb53f]        # 0x10014d0
 1005f91:	lea    r11,[rip+0xffffffffffffd640]        # 0x10035d8
 1005f98:	lea    rdx,[rip+0x132d1]        # 0x1019270
 1005f9f:	lea    rcx,[rsp+0x20]
 1005fa4:	mov    QWORD PTR [rsp+0x20],r11
 1005fa9:	call   0x100da3c
 1005fae:	int3   
 1005faf:	add    rsp,0x48
 1005fb3:	ret    
 1005fb4:	int3   
 1005fb5:	int3   
 1005fb6:	int3   
 1005fb7:	int3   
 1005fb8:	int3   
 1005fb9:	int3   
 1005fba:	int3   
 1005fbb:	int3   
 1005fbc:	int3   
 1005fbd:	int3   
 1005fbe:	int3   
 1005fbf:	int3   
 1005fc0:	mov    QWORD PTR [rsp+0x10],rbx
 1005fc5:	push   rdi
 1005fc6:	sub    rsp,0x20
 1005fca:	mov    rdi,rdx
 1005fcd:	mov    rbx,rcx
 1005fd0:	cmp    rcx,rdx
 1005fd3:	je     0x1006041
 1005fd5:	cmp    QWORD PTR [rcx+0x18],0x8
 1005fda:	mov    QWORD PTR [rsp+0x30],rsi
 1005fdf:	jb     0x1005fe9
 1005fe1:	mov    rcx,QWORD PTR [rcx]
 1005fe4:	call   0x100d814
 1005fe9:	xor    esi,esi
 1005feb:	mov    QWORD PTR [rbx+0x18],0x7
 1005ff3:	mov    QWORD PTR [rbx+0x10],rsi
 1005ff7:	mov    WORD PTR [rbx],si
 1005ffa:	cmp    QWORD PTR [rdi+0x18],0x8
 1005fff:	jae    0x100601b
 1006001:	mov    r8,QWORD PTR [rdi+0x10]
 1006005:	mov    rdx,rdi
 1006008:	mov    rcx,rbx
 100600b:	lea    r8,[r8*2+0x2]
 1006013:	call   QWORD PTR [rip+0xffffffffffffb4ef]        # 0x1001508
 1006019:	jmp    0x1006024
 100601b:	mov    rax,QWORD PTR [rdi]
 100601e:	mov    QWORD PTR [rbx],rax
 1006021:	mov    QWORD PTR [rdi],rsi
 1006024:	mov    rax,QWORD PTR [rdi+0x10]
 1006028:	mov    QWORD PTR [rbx+0x10],rax
 100602c:	mov    rax,QWORD PTR [rdi+0x18]
 1006030:	mov    QWORD PTR [rbx+0x18],rax
 1006034:	mov    QWORD PTR [rdi+0x10],rsi
 1006038:	mov    QWORD PTR [rdi+0x18],rsi
 100603c:	mov    rsi,QWORD PTR [rsp+0x30]
 1006041:	mov    rax,rbx
 1006044:	mov    rbx,QWORD PTR [rsp+0x38]
 1006049:	add    rsp,0x20
 100604d:	pop    rdi
 100604e:	ret    
 100604f:	int3   
 1006050:	int3   
 1006051:	int3   
 1006052:	int3   
 1006053:	int3   
 1006054:	int3   
 1006055:	int3   
 1006056:	int3   
 1006057:	int3   
 1006058:	int3   
 1006059:	int3   
 100605a:	int3   
 100605b:	int3   
 100605c:	int3   
 100605d:	int3   
 100605e:	int3   
 100605f:	int3   
 1006060:	rex push rbx
 1006062:	sub    rsp,0x20
 1006066:	cmp    QWORD PTR [rcx+0x18],0x8
 100606b:	mov    rbx,rcx
 100606e:	jb     0x1006078
 1006070:	mov    rcx,QWORD PTR [rcx]
 1006073:	call   0x100d814
 1006078:	xor    eax,eax
 100607a:	mov    QWORD PTR [rbx+0x18],0x7
 1006082:	mov    QWORD PTR [rbx+0x10],rax
 1006086:	mov    WORD PTR [rbx],ax
 1006089:	add    rsp,0x20
 100608d:	pop    rbx
 100608e:	ret    
 100608f:	int3   
 1006090:	int3   
 1006091:	int3   
 1006092:	int3   
 1006093:	int3   
 1006094:	int3   
 1006095:	int3   
 1006096:	int3   
 1006097:	int3   
 1006098:	int3   
 1006099:	int3   
 100609a:	int3   
 100609b:	int3   
 100609c:	int3   
 100609d:	int3   
 100609e:	int3   
 100609f:	int3   
 10060a0:	mov    QWORD PTR [rsp+0x10],rbx
 10060a5:	mov    QWORD PTR [rsp+0x18],rbp
 10060aa:	mov    QWORD PTR [rsp+0x20],rsi
 10060af:	push   rdi
 10060b0:	sub    rsp,0x20
 10060b4:	mov    rdi,QWORD PTR [rdx+0x10]
 10060b8:	mov    rbp,r8
 10060bb:	mov    rsi,rdx
 10060be:	mov    rbx,rcx
 10060c1:	cmp    rdi,r8
 10060c4:	jae    0x10060d4
 10060c6:	lea    rcx,[rip+0xffffffffffffba63]        # 0x1001b30
 10060cd:	call   QWORD PTR [rip+0xffffffffffffb2ed]        # 0x10013c0
 10060d3:	int3   
 10060d4:	sub    rdi,r8
 10060d7:	cmp    r9,rdi
 10060da:	cmovb  rdi,r9
 10060de:	cmp    rcx,rdx
 10060e1:	jne    0x1006102
 10060e3:	lea    rdx,[rdi+r8*1]
 10060e7:	or     r8,0xffffffffffffffff
 10060eb:	call   0x1006330
 10060f0:	mov    r8,rbp
 10060f3:	xor    edx,edx
 10060f5:	mov    rcx,rbx
 10060f8:	call   0x1006330
 10060fd:	jmp    0x10061aa
 1006102:	movabs rax,0x7ffffffffffffffe
 100610c:	cmp    rdi,rax
 100610f:	jbe    0x100611f
 1006111:	lea    rcx,[rip+0xffffffffffffba30]        # 0x1001b48
 1006118:	call   QWORD PTR [rip+0xffffffffffffb2aa]        # 0x10013c8
 100611e:	int3   
 100611f:	mov    rcx,QWORD PTR [rcx+0x18]
 1006123:	cmp    rcx,rdi
 1006126:	jae    0x1006157
 1006128:	mov    r8,QWORD PTR [rbx+0x10]
 100612c:	mov    rdx,rdi
 100612f:	mov    rcx,rbx
 1006132:	call   0x10063e0
 1006137:	test   rdi,rdi
 100613a:	je     0x10061aa
 100613c:	cmp    QWORD PTR [rsi+0x18],0x8
 1006141:	mov    QWORD PTR [rsp+0x30],r14
 1006146:	jb     0x100614b
 1006148:	mov    rsi,QWORD PTR [rsi]
 100614b:	cmp    QWORD PTR [rbx+0x18],0x8
 1006150:	jb     0x1006178
 1006152:	mov    rcx,QWORD PTR [rbx]
 1006155:	jmp    0x100617b
 1006157:	test   rdi,rdi
 100615a:	jne    0x100613c
 100615c:	xor    eax,eax
 100615e:	mov    QWORD PTR [rbx+0x10],rax
 1006162:	cmp    rcx,0x8
 1006166:	jb     0x1006170
 1006168:	mov    rcx,QWORD PTR [rbx]
 100616b:	mov    WORD PTR [rcx],ax
 100616e:	jmp    0x10061aa
 1006170:	mov    rcx,rbx
 1006173:	mov    WORD PTR [rbx],ax
 1006176:	jmp    0x10061aa
 1006178:	mov    rcx,rbx
 100617b:	lea    r14,[rdi+rdi*1]
 100617f:	lea    rdx,[rsi+rbp*2]
 1006183:	mov    r8,r14
 1006186:	call   0x100dd0e
 100618b:	cmp    QWORD PTR [rbx+0x18],0x8
 1006190:	mov    QWORD PTR [rbx+0x10],rdi
 1006194:	jb     0x100619b
 1006196:	mov    rcx,QWORD PTR [rbx]
 1006199:	jmp    0x100619e
 100619b:	mov    rcx,rbx
 100619e:	xor    eax,eax
 10061a0:	mov    WORD PTR [r14+rcx*1],ax
 10061a5:	mov    r14,QWORD PTR [rsp+0x30]
 10061aa:	mov    rbp,QWORD PTR [rsp+0x40]
 10061af:	mov    rsi,QWORD PTR [rsp+0x48]
 10061b4:	mov    rax,rbx
 10061b7:	mov    rbx,QWORD PTR [rsp+0x38]
 10061bc:	add    rsp,0x20
 10061c0:	pop    rdi
 10061c1:	ret    
 10061c2:	int3   
 10061c3:	int3   
 10061c4:	int3   
 10061c5:	int3   
 10061c6:	int3   
 10061c7:	int3   
 10061c8:	int3   
 10061c9:	int3   
 10061ca:	int3   
 10061cb:	int3   
 10061cc:	int3   
 10061cd:	int3   
 10061ce:	int3   
 10061cf:	int3   
 10061d0:	mov    QWORD PTR [rsp+0x10],rbx
 10061d5:	mov    QWORD PTR [rsp+0x18],rsi
 10061da:	push   rdi
 10061db:	sub    rsp,0x20
 10061df:	mov    rdi,r8
 10061e2:	mov    rsi,rdx
 10061e5:	mov    rbx,rcx
 10061e8:	test   rdx,rdx
 10061eb:	je     0x100624e
 10061ed:	mov    rdx,QWORD PTR [rcx+0x18]
 10061f1:	cmp    rdx,0x8
 10061f5:	jb     0x10061fc
 10061f7:	mov    rax,QWORD PTR [rcx]
 10061fa:	jmp    0x10061ff
 10061fc:	mov    rax,rcx
 10061ff:	cmp    rsi,rax
 1006202:	jb     0x100624e
 1006204:	cmp    rdx,0x8
 1006208:	jb     0x100620d
 100620a:	mov    rcx,QWORD PTR [rcx]
 100620d:	mov    rax,QWORD PTR [rbx+0x10]
 1006211:	lea    rcx,[rcx+rax*2]
 1006215:	cmp    rcx,rsi
 1006218:	jbe    0x100624e
 100621a:	cmp    rdx,0x8
 100621e:	jb     0x1006225
 1006220:	mov    rax,QWORD PTR [rbx]
 1006223:	jmp    0x1006228
 1006225:	mov    rax,rbx
 1006228:	sub    rsi,rax
 100622b:	mov    r9,r8
 100622e:	mov    rdx,rbx
 1006231:	sar    rsi,1
 1006234:	mov    rcx,rbx
 1006237:	mov    r8,rsi
 100623a:	mov    rbx,QWORD PTR [rsp+0x38]
 100623f:	mov    rsi,QWORD PTR [rsp+0x40]
 1006244:	add    rsp,0x20
 1006248:	pop    rdi
 1006249:	jmp    0x10060a0
 100624e:	movabs rax,0x7ffffffffffffffe
 1006258:	cmp    r8,rax
 100625b:	jbe    0x100626b
 100625d:	lea    rcx,[rip+0xffffffffffffb8e4]        # 0x1001b48
 1006264:	call   QWORD PTR [rip+0xffffffffffffb15e]        # 0x10013c8
 100626a:	int3   
 100626b:	mov    rcx,QWORD PTR [rbx+0x18]
 100626f:	cmp    rcx,r8
 1006272:	jae    0x100629d
 1006274:	mov    r8,QWORD PTR [rbx+0x10]
 1006278:	mov    rdx,rdi
 100627b:	mov    rcx,rbx
 100627e:	call   0x10063e0
 1006283:	test   rdi,rdi
 1006286:	je     0x1006311
 100628c:	cmp    QWORD PTR [rbx+0x18],0x8
 1006291:	mov    QWORD PTR [rsp+0x30],r14
 1006296:	jb     0x10062e0
 1006298:	mov    rcx,QWORD PTR [rbx]
 100629b:	jmp    0x10062e3
 100629d:	test   r8,r8
 10062a0:	jne    0x1006283
 10062a2:	xor    eax,eax
 10062a4:	mov    QWORD PTR [rbx+0x10],rax
 10062a8:	cmp    rcx,0x8
 10062ac:	jb     0x10062c7
 10062ae:	mov    rcx,QWORD PTR [rbx]
 10062b1:	mov    WORD PTR [rcx],ax
 10062b4:	mov    rax,rbx
 10062b7:	mov    rbx,QWORD PTR [rsp+0x38]
 10062bc:	mov    rsi,QWORD PTR [rsp+0x40]
 10062c1:	add    rsp,0x20
 10062c5:	pop    rdi
 10062c6:	ret    
 10062c7:	mov    WORD PTR [rbx],ax
 10062ca:	mov    rcx,rbx
 10062cd:	mov    rax,rbx
 10062d0:	mov    rbx,QWORD PTR [rsp+0x38]
 10062d5:	mov    rsi,QWORD PTR [rsp+0x40]
 10062da:	add    rsp,0x20
 10062de:	pop    rdi
 10062df:	ret    
 10062e0:	mov    rcx,rbx
 10062e3:	lea    r14,[rdi+rdi*1]
 10062e7:	mov    rdx,rsi
 10062ea:	mov    r8,r14
 10062ed:	call   0x100dd0e
 10062f2:	cmp    QWORD PTR [rbx+0x18],0x8
 10062f7:	mov    QWORD PTR [rbx+0x10],rdi
 10062fb:	jb     0x1006302
 10062fd:	mov    rcx,QWORD PTR [rbx]
 1006300:	jmp    0x1006305
 1006302:	mov    rcx,rbx
 1006305:	xor    eax,eax
 1006307:	mov    WORD PTR [r14+rcx*1],ax
 100630c:	mov    r14,QWORD PTR [rsp+0x30]
 1006311:	mov    rsi,QWORD PTR [rsp+0x40]
 1006316:	mov    rax,rbx
 1006319:	mov    rbx,QWORD PTR [rsp+0x38]
 100631e:	add    rsp,0x20
 1006322:	pop    rdi
 1006323:	ret    
 1006324:	int3   
 1006325:	int3   
 1006326:	int3   
 1006327:	int3   
 1006328:	int3   
 1006329:	int3   
 100632a:	int3   
 100632b:	int3   
 100632c:	int3   
 100632d:	int3   
 100632e:	int3   
 100632f:	int3   
 1006330:	mov    QWORD PTR [rsp+0x8],rbx
 1006335:	push   rdi
 1006336:	sub    rsp,0x20
 100633a:	mov    rdi,r8
 100633d:	mov    r8,QWORD PTR [rcx+0x10]
 1006341:	mov    r9,rdx
 1006344:	mov    rbx,rcx
 1006347:	cmp    r8,rdx
 100634a:	jae    0x100635a
 100634c:	lea    rcx,[rip+0xffffffffffffb7dd]        # 0x1001b30
 1006353:	call   QWORD PTR [rip+0xffffffffffffb067]        # 0x10013c0
 1006359:	int3   
 100635a:	sub    r8,rdx
 100635d:	cmp    r8,rdi
 1006360:	cmovb  rdi,r8
 1006364:	test   rdi,rdi
 1006367:	je     0x10063bd
 1006369:	mov    rax,QWORD PTR [rcx+0x18]
 100636d:	cmp    rax,0x8
 1006371:	jb     0x1006378
 1006373:	mov    rdx,QWORD PTR [rcx]
 1006376:	jmp    0x100637b
 1006378:	mov    rdx,rcx
 100637b:	cmp    rax,0x8
 100637f:	jb     0x1006384
 1006381:	mov    rcx,QWORD PTR [rcx]
 1006384:	lea    rax,[r9+rdi*1]
 1006388:	sub    r8,rdi
 100638b:	lea    rcx,[rcx+r9*2]
 100638f:	lea    rdx,[rdx+rax*2]
 1006393:	add    r8,r8
 1006396:	call   QWORD PTR [rip+0xffffffffffffb16c]        # 0x1001508
 100639c:	mov    r11,QWORD PTR [rbx+0x10]
 10063a0:	sub    r11,rdi
 10063a3:	cmp    QWORD PTR [rbx+0x18],0x8
 10063a8:	mov    QWORD PTR [rbx+0x10],r11
 10063ac:	jb     0x10063b3
 10063ae:	mov    rax,QWORD PTR [rbx]
 10063b1:	jmp    0x10063b6
 10063b3:	mov    rax,rbx
 10063b6:	xor    ecx,ecx
 10063b8:	mov    WORD PTR [rax+r11*2],cx
 10063bd:	mov    rax,rbx
 10063c0:	mov    rbx,QWORD PTR [rsp+0x30]
 10063c5:	add    rsp,0x20
 10063c9:	pop    rdi
 10063ca:	ret    
 10063cb:	int3   
 10063cc:	int3   
 10063cd:	int3   
 10063ce:	int3   
 10063cf:	int3   
 10063d0:	int3   
 10063d1:	int3   
 10063d2:	int3   
 10063d3:	int3   
 10063d4:	int3   
 10063d5:	int3   
 10063d6:	int3   
 10063d7:	int3   
 10063d8:	int3   
 10063d9:	int3   
 10063da:	int3   
 10063db:	int3   
 10063dc:	int3   
 10063dd:	int3   
 10063de:	int3   
 10063df:	int3   
 10063e0:	mov    QWORD PTR [rsp+0x18],r8
 10063e5:	mov    QWORD PTR [rsp+0x10],rdx
 10063ea:	mov    QWORD PTR [rsp+0x8],rcx
 10063ef:	push   rbx
 10063f0:	push   rsi
 10063f1:	push   rdi
 10063f2:	push   r14
 10063f4:	push   r15
 10063f6:	sub    rsp,0x40
 10063fa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1006403:	mov    r15,r8
 1006406:	mov    rbx,rcx
 1006409:	mov    rdi,rdx
 100640c:	or     rdi,0x7
 1006410:	movabs r9,0x7ffffffffffffffe
 100641a:	cmp    rdi,r9
 100641d:	jbe    0x1006424
 100641f:	mov    rdi,rdx
 1006422:	jmp    0x1006455
 1006424:	mov    r8,QWORD PTR [rcx+0x18]
 1006428:	mov    rcx,r8
 100642b:	shr    rcx,1
 100642e:	movabs rax,0xaaaaaaaaaaaaaaab
 1006438:	mul    rdi
 100643b:	shr    rdx,1
 100643e:	cmp    rcx,rdx
 1006441:	jbe    0x1006455
 1006443:	mov    rax,r9
 1006446:	sub    rax,rcx
 1006449:	cmp    r8,rax
 100644c:	lea    rdi,[rcx+r8*1]
 1006450:	jbe    0x1006455
 1006452:	mov    rdi,r9
 1006455:	lea    rcx,[rdi+0x1]
 1006459:	xor    r14d,r14d
 100645c:	mov    esi,r14d
 100645f:	test   rcx,rcx
 1006462:	je     0x10064bc
 1006464:	movabs rax,0x7fffffffffffffff
 100646e:	cmp    rcx,rax
 1006471:	ja     0x1006483
 1006473:	add    rcx,rcx
 1006476:	call   0x100dcc6
 100647b:	mov    rsi,rax
 100647e:	test   rax,rax
 1006481:	jne    0x10064bc
 1006483:	mov    QWORD PTR [rsp+0x88],r14
 100648b:	lea    rdx,[rsp+0x88]
 1006493:	lea    rcx,[rsp+0x28]
 1006498:	call   QWORD PTR [rip+0xffffffffffffb032]        # 0x10014d0
 100649e:	lea    rax,[rip+0xffffffffffffd133]        # 0x10035d8
 10064a5:	mov    QWORD PTR [rsp+0x28],rax
 10064aa:	lea    rdx,[rip+0x12dbf]        # 0x1019270
 10064b1:	lea    rcx,[rsp+0x28]
 10064b6:	call   0x100da3c
 10064bb:	nop
 10064bc:	jmp    0x10064db
 10064be:	xor    r14d,r14d
 10064c1:	mov    rbx,QWORD PTR [rsp+0x70]
 10064c6:	mov    r15,QWORD PTR [rsp+0x80]
 10064ce:	mov    rdi,QWORD PTR [rsp+0x78]
 10064d3:	mov    rsi,QWORD PTR [rsp+0x88]
 10064db:	test   r15,r15
 10064de:	je     0x10064fb
 10064e0:	cmp    QWORD PTR [rbx+0x18],0x8
 10064e5:	jb     0x10064ec
 10064e7:	mov    rdx,QWORD PTR [rbx]
 10064ea:	jmp    0x10064ef
 10064ec:	mov    rdx,rbx
 10064ef:	lea    r8,[r15+r15*1]
 10064f3:	mov    rcx,rsi
 10064f6:	call   0x100dd0e
 10064fb:	cmp    QWORD PTR [rbx+0x18],0x8
 1006500:	jb     0x100650a
 1006502:	mov    rcx,QWORD PTR [rbx]
 1006505:	call   0x100d814
 100650a:	mov    QWORD PTR [rbx],rsi
 100650d:	mov    QWORD PTR [rbx+0x18],rdi
 1006511:	mov    QWORD PTR [rbx+0x10],r15
 1006515:	cmp    rdi,0x8
 1006519:	cmovae rbx,rsi
 100651d:	mov    WORD PTR [rbx+r15*2],r14w
 1006522:	add    rsp,0x40
 1006526:	pop    r15
 1006528:	pop    r14
 100652a:	pop    rdi
 100652b:	pop    rsi
 100652c:	pop    rbx
 100652d:	ret    
 100652e:	int3   
 100652f:	int3   
 1006530:	int3   
 1006531:	int3   
 1006532:	int3   
 1006533:	int3   
 1006534:	int3   
 1006535:	int3   
 1006536:	int3   
 1006537:	int3   
 1006538:	int3   
 1006539:	int3   
 100653a:	int3   
 100653b:	int3   
 100653c:	int3   
 100653d:	int3   
 100653e:	int3   
 100653f:	int3   
 1006540:	mov    QWORD PTR [rcx],rdx
 1006543:	mov    BYTE PTR [rcx+0x58],0x0
 1006547:	mov    DWORD PTR [rcx+0x68],0x0
 100654e:	mov    rax,rcx
 1006551:	ret    
 1006552:	int3   
 1006553:	int3   
 1006554:	int3   
 1006555:	int3   
 1006556:	int3   
 1006557:	int3   
 1006558:	int3   
 1006559:	int3   
 100655a:	int3   
 100655b:	int3   
 100655c:	int3   
 100655d:	int3   
 100655e:	int3   
 100655f:	int3   
 1006560:	mov    rax,rsp
 1006563:	push   rbp
 1006564:	push   rdi
 1006565:	push   r14
 1006567:	lea    rbp,[rax-0x48]
 100656b:	sub    rsp,0x130
 1006572:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
 100657b:	mov    QWORD PTR [rax+0x10],rbx
 100657f:	mov    QWORD PTR [rax+0x18],rsi
 1006583:	mov    rax,QWORD PTR [rip+0x14c56]        # 0x101b1e0
 100658a:	xor    rax,rsp
 100658d:	mov    QWORD PTR [rbp+0x20],rax
 1006591:	mov    rbx,rcx
 1006594:	mov    QWORD PTR [rbp-0x68],0x7
 100659c:	xor    r14d,r14d
 100659f:	mov    QWORD PTR [rbp-0x70],r14
 10065a3:	mov    WORD PTR [rbp-0x80],r14w
 10065a8:	mov    QWORD PTR [rsp+0x70],0x7
 10065b1:	mov    QWORD PTR [rsp+0x68],r14
 10065b6:	mov    WORD PTR [rsp+0x58],r14w
 10065bc:	xor    edx,edx
 10065be:	xor    ecx,ecx
 10065c0:	call   QWORD PTR [rip+0xffffffffffffb0fa]        # 0x10016c0
 10065c6:	mov    rcx,rbx
 10065c9:	call   0x1006b90
 10065ce:	mov    rcx,rbx
 10065d1:	test   eax,eax
 10065d3:	jne    0x1006a52
 10065d9:	call   0x1007010
 10065de:	mov    edi,eax
 10065e0:	test   eax,eax
 10065e2:	jne    0x1006a2c
 10065e8:	lea    r8,[rip+0xffffffffffffb489]        # 0x1001a78
 10065ef:	lea    rdx,[rbp-0x30]
 10065f3:	mov    rcx,QWORD PTR [rbx]
 10065f6:	call   QWORD PTR [rip+0xffffffffffffaa34]        # 0x1001030
 10065fc:	mov    rcx,QWORD PTR [rax]
 10065ff:	mov    QWORD PTR [rbp-0x58],rcx
 1006603:	mov    rdx,QWORD PTR [rax+0x8]
 1006607:	mov    rcx,QWORD PTR [rax+0x10]
 100660b:	mov    QWORD PTR [rbp-0x48],rcx
 100660f:	mov    rcx,QWORD PTR [rax+0x18]
 1006613:	mov    QWORD PTR [rbp-0x40],rcx
 1006617:	mov    rax,QWORD PTR [rax+0x20]
 100661b:	mov    QWORD PTR [rbp-0x38],rax
 100661f:	mov    BYTE PTR [rbx+0x58],dl
 1006622:	lea    r8,[rbx+0x30]
 1006626:	lea    rdx,[rbp-0x58]
 100662a:	mov    rcx,rbx
 100662d:	call   0x1007130
 1006632:	mov    rsi,rax
 1006635:	lea    rax,[rbp-0x80]
 1006639:	cmp    rax,rsi
 100663c:	je     0x10066a1
 100663e:	cmp    QWORD PTR [rbp-0x68],0x8
 1006643:	jb     0x100664e
 1006645:	mov    rcx,QWORD PTR [rbp-0x80]
 1006649:	call   0x100d814
 100664e:	mov    QWORD PTR [rbp-0x68],0x7
 1006656:	mov    QWORD PTR [rbp-0x70],r14
 100665a:	mov    WORD PTR [rbp-0x80],r14w
 100665f:	cmp    QWORD PTR [rsi+0x18],0x8
 1006664:	jae    0x100667f
 1006666:	mov    r8,QWORD PTR [rsi+0x10]
 100666a:	inc    r8
 100666d:	add    r8,r8
 1006670:	mov    rdx,rsi
 1006673:	lea    rcx,[rbp-0x80]
 1006677:	call   QWORD PTR [rip+0xffffffffffffae8b]        # 0x1001508
 100667d:	jmp    0x1006689
 100667f:	mov    rax,QWORD PTR [rsi]
 1006682:	mov    QWORD PTR [rbp-0x80],rax
 1006686:	mov    QWORD PTR [rsi],r14
 1006689:	mov    rax,QWORD PTR [rsi+0x10]
 100668d:	mov    QWORD PTR [rbp-0x70],rax
 1006691:	mov    rax,QWORD PTR [rsi+0x18]
 1006695:	mov    QWORD PTR [rbp-0x68],rax
 1006699:	mov    QWORD PTR [rsi+0x10],r14
 100669d:	mov    QWORD PTR [rsi+0x18],r14
 10066a1:	cmp    QWORD PTR [rbp-0x40],0x8
 10066a6:	jb     0x10066b1
 10066a8:	mov    rcx,QWORD PTR [rbp-0x58]
 10066ac:	call   0x100d814
 10066b1:	movsxd rax,DWORD PTR [rbx+0x5c]
 10066b5:	cmp    eax,0x7
 10066b8:	ja     0x1006a6b
 10066be:	lea    rdx,[rip+0xffffffffffff993b]        # 0x1000000
 10066c5:	mov    ecx,DWORD PTR [rdx+rax*4+0x6b64]
 10066cc:	add    rcx,rdx
 10066cf:	jmp    rcx
 10066d1:	lea    r8,[rbx+0x8]
 10066d5:	lea    rdx,[rbp-0x8]
 10066d9:	mov    rcx,rbx
 10066dc:	call   0x1007130
 10066e1:	mov    rdi,rax
 10066e4:	lea    rax,[rsp+0x58]
 10066e9:	cmp    rax,rdi
 10066ec:	je     0x100675a
 10066ee:	cmp    QWORD PTR [rsp+0x70],0x8
 10066f4:	jb     0x1006700
 10066f6:	mov    rcx,QWORD PTR [rsp+0x58]
 10066fb:	call   0x100d814
 1006700:	mov    QWORD PTR [rsp+0x70],0x7
 1006709:	mov    QWORD PTR [rsp+0x68],r14
 100670e:	mov    WORD PTR [rsp+0x58],r14w
 1006714:	cmp    QWORD PTR [rdi+0x18],0x8
 1006719:	jae    0x1006735
 100671b:	mov    r8,QWORD PTR [rdi+0x10]
 100671f:	inc    r8
 1006722:	add    r8,r8
 1006725:	mov    rdx,rdi
 1006728:	lea    rcx,[rsp+0x58]
 100672d:	call   QWORD PTR [rip+0xffffffffffffadd5]        # 0x1001508
 1006733:	jmp    0x1006740
 1006735:	mov    rax,QWORD PTR [rdi]
 1006738:	mov    QWORD PTR [rsp+0x58],rax
 100673d:	mov    QWORD PTR [rdi],r14
 1006740:	mov    rax,QWORD PTR [rdi+0x10]
 1006744:	mov    QWORD PTR [rsp+0x68],rax
 1006749:	mov    rax,QWORD PTR [rdi+0x18]
 100674d:	mov    QWORD PTR [rsp+0x70],rax
 1006752:	mov    QWORD PTR [rdi+0x10],r14
 1006756:	mov    QWORD PTR [rdi+0x18],r14
 100675a:	cmp    QWORD PTR [rbp+0x10],0x8
 100675f:	jb     0x100676a
 1006761:	mov    rcx,QWORD PTR [rbp-0x8]
 1006765:	call   0x100d814
 100676a:	mov    QWORD PTR [rbp+0x10],0x7
 1006772:	mov    QWORD PTR [rbp+0x8],r14
 1006776:	mov    WORD PTR [rbp-0x8],r14w
 100677b:	cmp    DWORD PTR [rbx+0x60],0x2
 100677f:	jne    0x10067b3
 1006781:	cmp    DWORD PTR [rbx+0x10],0x2
 1006785:	jne    0x10067b3
 1006787:	lea    r8,[rbp-0x80]
 100678b:	cmp    QWORD PTR [rbp-0x68],0x8
 1006790:	cmovae r8,QWORD PTR [rbp-0x80]
 1006795:	lea    rdx,[rsp+0x58]
 100679a:	cmp    QWORD PTR [rsp+0x70],0x8
 10067a0:	cmovae rdx,QWORD PTR [rsp+0x58]
 10067a6:	mov    rcx,rbx
 10067a9:	call   0x1009b10
 10067ae:	jmp    0x1006a65
 10067b3:	lea    r8,[rbp-0x80]
 10067b7:	cmp    QWORD PTR [rbp-0x68],0x8
 10067bc:	cmovae r8,QWORD PTR [rbp-0x80]
 10067c1:	lea    rdx,[rsp+0x58]
 10067c6:	cmp    QWORD PTR [rsp+0x70],0x8
 10067cc:	cmovae rdx,QWORD PTR [rsp+0x58]
 10067d2:	mov    rcx,rbx
 10067d5:	call   0x1008070
 10067da:	jmp    0x1006a65
 10067df:	lea    r8,[rbp-0x80]
 10067e3:	mov    rcx,rbx
 10067e6:	cmp    DWORD PTR [rbx+0x60],0x2
 10067ea:	jne    0x10067ff
 10067ec:	cmp    QWORD PTR [rbp-0x68],0x8
 10067f1:	cmovae r8,QWORD PTR [rbp-0x80]
 10067f6:	xor    edx,edx
 10067f8:	call   0x1009b10
 10067fd:	jmp    0x1006810
 10067ff:	cmp    QWORD PTR [rbp-0x68],0x8
 1006804:	cmovae r8,QWORD PTR [rbp-0x80]
 1006809:	xor    edx,edx
 100680b:	call   0x1008070
 1006810:	mov    edi,eax
 1006812:	cmp    DWORD PTR [rbx+0x5c],0x2
 1006816:	jne    0x1006a67
 100681c:	test   eax,eax
 100681e:	jne    0x100682f
 1006820:	mov    ecx,0x82
 1006825:	call   0x100e600
 100682a:	jmp    0x1006a6b
 100682f:	mov    ecx,0x83
 1006834:	call   0x100e600
 1006839:	jmp    0x1006a67
 100683e:	lea    r8,[rbx+0x8]
 1006842:	lea    rdx,[rbp-0x30]
 1006846:	mov    rcx,rbx
 1006849:	call   0x1007130
 100684e:	mov    rdi,rax
 1006851:	lea    rax,[rsp+0x58]
 1006856:	cmp    rax,rdi
 1006859:	je     0x10068c7
 100685b:	cmp    QWORD PTR [rsp+0x70],0x8
 1006861:	jb     0x100686d
 1006863:	mov    rcx,QWORD PTR [rsp+0x58]
 1006868:	call   0x100d814
 100686d:	mov    QWORD PTR [rsp+0x70],0x7
 1006876:	mov    QWORD PTR [rsp+0x68],r14
 100687b:	mov    WORD PTR [rsp+0x58],r14w
 1006881:	cmp    QWORD PTR [rdi+0x18],0x8
 1006886:	jae    0x10068a2
 1006888:	mov    r8,QWORD PTR [rdi+0x10]
 100688c:	inc    r8
 100688f:	add    r8,r8
 1006892:	mov    rdx,rdi
 1006895:	lea    rcx,[rsp+0x58]
 100689a:	call   QWORD PTR [rip+0xffffffffffffac68]        # 0x1001508
 10068a0:	jmp    0x10068ad
 10068a2:	mov    rax,QWORD PTR [rdi]
 10068a5:	mov    QWORD PTR [rsp+0x58],rax
 10068aa:	mov    QWORD PTR [rdi],r14
 10068ad:	mov    rax,QWORD PTR [rdi+0x10]
 10068b1:	mov    QWORD PTR [rsp+0x68],rax
 10068b6:	mov    rax,QWORD PTR [rdi+0x18]
 10068ba:	mov    QWORD PTR [rsp+0x70],rax
 10068bf:	mov    QWORD PTR [rdi+0x10],r14
 10068c3:	mov    QWORD PTR [rdi+0x18],r14
 10068c7:	cmp    QWORD PTR [rbp-0x18],0x8
 10068cc:	jb     0x10068d7
 10068ce:	mov    rcx,QWORD PTR [rbp-0x30]
 10068d2:	call   0x100d814
 10068d7:	mov    QWORD PTR [rbp-0x18],0x7
 10068df:	mov    QWORD PTR [rbp-0x20],r14
 10068e3:	mov    WORD PTR [rbp-0x30],r14w
 10068e8:	mov    rax,QWORD PTR [rbx+0x20]
 10068ec:	cmp    QWORD PTR [rax+0x18],0x8
 10068f1:	jb     0x10068f6
 10068f3:	mov    rax,QWORD PTR [rax]
 10068f6:	lea    r9,[rbp-0x80]
 10068fa:	cmp    QWORD PTR [rbp-0x68],0x8
 10068ff:	cmovae r9,QWORD PTR [rbp-0x80]
 1006904:	lea    rdx,[rsp+0x58]
 1006909:	cmp    QWORD PTR [rsp+0x70],0x8
 100690f:	cmovae rdx,QWORD PTR [rsp+0x58]
 1006915:	mov    QWORD PTR [rsp+0x28],rax
 100691a:	mov    eax,DWORD PTR [rbx+0x60]
 100691d:	mov    DWORD PTR [rsp+0x20],eax
 1006921:	mov    r8d,DWORD PTR [rbx+0x10]
 1006925:	mov    rcx,rbx
 1006928:	call   0x100bfd0
 100692d:	jmp    0x1006a65
 1006932:	lea    r8,[rbx+0x8]
 1006936:	lea    rdx,[rbp-0x58]
 100693a:	mov    rcx,rbx
 100693d:	call   0x1007130
 1006942:	mov    rdi,rax
 1006945:	lea    rax,[rsp+0x58]
 100694a:	cmp    rax,rdi
 100694d:	je     0x10069bb
 100694f:	cmp    QWORD PTR [rsp+0x70],0x8
 1006955:	jb     0x1006961
 1006957:	mov    rcx,QWORD PTR [rsp+0x58]
 100695c:	call   0x100d814
 1006961:	mov    QWORD PTR [rsp+0x70],0x7
 100696a:	mov    QWORD PTR [rsp+0x68],r14
 100696f:	mov    WORD PTR [rsp+0x58],r14w
 1006975:	cmp    QWORD PTR [rdi+0x18],0x8
 100697a:	jae    0x1006996
 100697c:	mov    r8,QWORD PTR [rdi+0x10]
 1006980:	inc    r8
 1006983:	add    r8,r8
 1006986:	mov    rdx,rdi
 1006989:	lea    rcx,[rsp+0x58]
 100698e:	call   QWORD PTR [rip+0xffffffffffffab74]        # 0x1001508
 1006994:	jmp    0x10069a1
 1006996:	mov    rax,QWORD PTR [rdi]
 1006999:	mov    QWORD PTR [rsp+0x58],rax
 100699e:	mov    QWORD PTR [rdi],r14
 10069a1:	mov    rax,QWORD PTR [rdi+0x10]
 10069a5:	mov    QWORD PTR [rsp+0x68],rax
 10069aa:	mov    rax,QWORD PTR [rdi+0x18]
 10069ae:	mov    QWORD PTR [rsp+0x70],rax
 10069b3:	mov    QWORD PTR [rdi+0x10],r14
 10069b7:	mov    QWORD PTR [rdi+0x18],r14
 10069bb:	cmp    QWORD PTR [rbp-0x40],0x8
 10069c0:	jb     0x10069cb
 10069c2:	mov    rcx,QWORD PTR [rbp-0x58]
 10069c6:	call   0x100d814
 10069cb:	mov    QWORD PTR [rbp-0x40],0x7
 10069d3:	mov    QWORD PTR [rbp-0x48],r14
 10069d7:	mov    WORD PTR [rbp-0x58],r14w
 10069dc:	lea    r9,[rbp-0x80]
 10069e0:	cmp    QWORD PTR [rbp-0x68],0x8
 10069e5:	cmovae r9,QWORD PTR [rbp-0x80]
 10069ea:	lea    rdx,[rsp+0x58]
 10069ef:	cmp    QWORD PTR [rsp+0x70],0x8
 10069f5:	cmovae rdx,QWORD PTR [rsp+0x58]
 10069fb:	mov    eax,DWORD PTR [rbx+0x60]
 10069fe:	mov    DWORD PTR [rsp+0x20],eax
 1006a02:	mov    r8d,DWORD PTR [rbx+0x10]
 1006a06:	mov    rcx,rbx
 1006a09:	call   0x100c1a0
 1006a0e:	jmp    0x1006a65
 1006a10:	lea    rdx,[rbp-0x80]
 1006a14:	cmp    QWORD PTR [rbp-0x68],0x8
 1006a19:	cmovae rdx,QWORD PTR [rbp-0x80]
 1006a1e:	mov    r8d,DWORD PTR [rbx+0x60]
 1006a22:	mov    rcx,rbx
 1006a25:	call   0x100c220
 1006a2a:	jmp    0x1006a65
 1006a2c:	cmp    DWORD PTR [rbx+0x5c],0x8
 1006a30:	jne    0x1006a67
 1006a32:	mov    rcx,QWORD PTR [rbx+0x10]
 1006a36:	cmp    QWORD PTR [rcx+0x18],0x8
 1006a3b:	jb     0x1006a40
 1006a3d:	mov    rcx,QWORD PTR [rcx]
 1006a40:	call   QWORD PTR [rip+0xffffffffffffaab2]        # 0x10014f8
 1006a46:	mov    edx,eax
 1006a48:	mov    rcx,rbx
 1006a4b:	call   0x1007340
 1006a50:	jmp    0x1006a67
 1006a52:	call   0x1006e60
 1006a57:	mov    edi,eax
 1006a59:	test   eax,eax
 1006a5b:	jne    0x1006a81
 1006a5d:	mov    rcx,rbx
 1006a60:	call   0x1008d20
 1006a65:	mov    edi,eax
 1006a67:	test   edi,edi
 1006a69:	jne    0x1006a81
 1006a6b:	cmp    DWORD PTR [rbx+0x5c],0x2
 1006a6f:	je     0x1006afe
 1006a75:	mov    ecx,0x6d
 1006a7a:	call   0x100e600
 1006a7f:	jmp    0x1006afe
 1006a81:	mov    QWORD PTR [rsp+0x40],r14
 1006a86:	lea    rdx,[rsp+0x40]
 1006a8b:	xor    ecx,ecx
 1006a8d:	call   QWORD PTR [rip+0xffffffffffffab5d]        # 0x10015f0
 1006a93:	test   eax,eax
 1006a95:	js     0x1006ab3
 1006a97:	mov    rcx,QWORD PTR [rsp+0x40]
 1006a9c:	test   rcx,rcx
 1006a9f:	je     0x1006ab3
 1006aa1:	call   0x1007440
 1006aa6:	mov    rcx,QWORD PTR [rsp+0x40]
 1006aab:	mov    rax,QWORD PTR [rcx]
 1006aae:	call   QWORD PTR [rax+0x10]
 1006ab1:	jmp    0x1006afe
 1006ab3:	mov    r8d,DWORD PTR [rbx+0x68]
 1006ab7:	test   r8d,r8d
 1006aba:	je     0x1006afe
 1006abc:	mov    QWORD PTR [rsp+0x30],r14
 1006ac1:	mov    DWORD PTR [rsp+0x28],r14d
 1006ac6:	lea    rax,[rsp+0x48]
 1006acb:	mov    QWORD PTR [rsp+0x20],rax
 1006ad0:	xor    r9d,r9d
 1006ad3:	xor    edx,edx
 1006ad5:	mov    ecx,0x1300
 1006ada:	call   QWORD PTR [rip+0xffffffffffffa7c0]        # 0x10012a0
 1006ae0:	test   eax,eax
 1006ae2:	je     0x1006afe
 1006ae4:	mov    rdx,QWORD PTR [rsp+0x48]
 1006ae9:	mov    ecx,0x8a
 1006aee:	call   0x100e600
 1006af3:	mov    rcx,QWORD PTR [rsp+0x48]
 1006af8:	call   QWORD PTR [rip+0xffffffffffffa812]        # 0x1001310
 1006afe:	call   QWORD PTR [rip+0xffffffffffffabc4]        # 0x10016c8
 1006b04:	nop
 1006b05:	cmp    QWORD PTR [rsp+0x70],0x8
 1006b0b:	jb     0x1006b17
 1006b0d:	mov    rcx,QWORD PTR [rsp+0x58]
 1006b12:	call   0x100d814
 1006b17:	mov    QWORD PTR [rsp+0x70],0x7
 1006b20:	mov    QWORD PTR [rsp+0x68],r14
 1006b25:	mov    WORD PTR [rsp+0x58],r14w
 1006b2b:	cmp    QWORD PTR [rbp-0x68],0x8
 1006b30:	jb     0x1006b3b
 1006b32:	mov    rcx,QWORD PTR [rbp-0x80]
 1006b36:	call   0x100d814
 1006b3b:	mov    eax,edi
 1006b3d:	mov    rcx,QWORD PTR [rbp+0x20]
 1006b41:	xor    rcx,rsp
 1006b44:	call   0x100daf0
 1006b49:	lea    r11,[rsp+0x130]
 1006b51:	mov    rbx,QWORD PTR [r11+0x28]
 1006b55:	mov    rsi,QWORD PTR [r11+0x30]
 1006b59:	mov    rsp,r11
 1006b5c:	pop    r14
 1006b5e:	pop    rdi
 1006b5f:	pop    rbp
 1006b60:	ret    
 1006b61:	nop    DWORD PTR [rax]
 1006b64:	shl    DWORD PTR [rsi+0x0],1
 1006b67:	add    bh,bl
 1006b69:	add    BYTE PTR [eax],al
 1006b6c:	fbld   TBYTE PTR [rdi+0x0]
 1006b6f:	add    cl,dl
 1006b71:	data16 add BYTE PTR [rax],al
 1006b74:	ds push 0x6a6b0000
 1006b7a:	add    BYTE PTR [rax],al
 1006b7c:	xor    ch,BYTE PTR [rcx+0x0]
 1006b7f:	add    BYTE PTR [rax],dl
 1006b81:	push   0x0
 1006b83:	add    ah,cl
 1006b85:	int3   
 1006b86:	int3   
 1006b87:	int3   
 1006b88:	int3   
 1006b89:	int3   
 1006b8a:	int3   
 1006b8b:	int3   
 1006b8c:	int3   
 1006b8d:	int3   
 1006b8e:	int3   
 1006b8f:	int3   
 1006b90:	rex push rbx
 1006b92:	sub    rsp,0x50
 1006b96:	mov    rbx,rcx
 1006b99:	mov    rcx,QWORD PTR [rcx]
 1006b9c:	lea    r8,[rip+0xffffffffffffaf55]        # 0x1001af8
 1006ba3:	lea    rdx,[rsp+0x20]
 1006ba8:	call   QWORD PTR [rip+0xffffffffffffa482]        # 0x1001030
 1006bae:	mov    rdx,QWORD PTR [rax]
 1006bb1:	mov    QWORD PTR [rbx+0x8],rdx
 1006bb5:	mov    rdx,QWORD PTR [rax+0x8]
 1006bb9:	mov    QWORD PTR [rbx+0x10],rdx
 1006bbd:	mov    rdx,QWORD PTR [rax+0x10]
 1006bc1:	mov    QWORD PTR [rbx+0x18],rdx
 1006bc5:	mov    rcx,QWORD PTR [rax+0x18]
 1006bc9:	mov    QWORD PTR [rbx+0x20],rcx
 1006bcd:	mov    rax,QWORD PTR [rax+0x20]
 1006bd1:	mov    QWORD PTR [rbx+0x28],rax
 1006bd5:	mov    rax,QWORD PTR [rbx+0x10]
 1006bd9:	cmp    QWORD PTR [rax+0x10],0x0
 1006bde:	je     0x1006bef
 1006be0:	mov    DWORD PTR [rbx+0x5c],0x8
 1006be7:	xor    eax,eax
 1006be9:	add    rsp,0x50
 1006bed:	pop    rbx
 1006bee:	ret    
 1006bef:	mov    rcx,QWORD PTR [rbx]
 1006bf2:	lea    r8,[rip+0xffffffffffffadf7]        # 0x10019f0
 1006bf9:	lea    rdx,[rsp+0x20]
 1006bfe:	call   QWORD PTR [rip+0xffffffffffffa42c]        # 0x1001030
 1006c04:	mov    rcx,QWORD PTR [rax]
 1006c07:	mov    QWORD PTR [rbx+0x8],rcx
 1006c0b:	mov    rcx,QWORD PTR [rax+0x8]
 1006c0f:	mov    QWORD PTR [rbx+0x10],rcx
 1006c13:	mov    rcx,QWORD PTR [rax+0x10]
 1006c17:	mov    QWORD PTR [rbx+0x18],rcx
 1006c1b:	mov    rcx,QWORD PTR [rax+0x18]
 1006c1f:	mov    QWORD PTR [rbx+0x20],rcx
 1006c23:	mov    rax,QWORD PTR [rax+0x20]
 1006c27:	mov    QWORD PTR [rbx+0x28],rax
 1006c2b:	mov    eax,DWORD PTR [rbx+0x10]
 1006c2e:	test   eax,eax
 1006c30:	je     0x1006c44
 1006c32:	mov    DWORD PTR [rbx+0x64],eax
 1006c35:	mov    DWORD PTR [rbx+0x5c],0x0
 1006c3c:	xor    eax,eax
 1006c3e:	add    rsp,0x50
 1006c42:	pop    rbx
 1006c43:	ret    
 1006c44:	mov    rcx,QWORD PTR [rbx]
 1006c47:	lea    r8,[rip+0xffffffffffffae1a]        # 0x1001a68
 1006c4e:	lea    rdx,[rsp+0x20]
 1006c53:	call   QWORD PTR [rip+0xffffffffffffa3d7]        # 0x1001030
 1006c59:	mov    rcx,QWORD PTR [rax]
 1006c5c:	mov    QWORD PTR [rbx+0x8],rcx
 1006c60:	mov    rcx,QWORD PTR [rax+0x8]
 1006c64:	mov    QWORD PTR [rbx+0x10],rcx
 1006c68:	mov    rcx,QWORD PTR [rax+0x10]
 1006c6c:	mov    QWORD PTR [rbx+0x18],rcx
 1006c70:	mov    rcx,QWORD PTR [rax+0x18]
 1006c74:	mov    QWORD PTR [rbx+0x20],rcx
 1006c78:	mov    rax,QWORD PTR [rax+0x20]
 1006c7c:	mov    QWORD PTR [rbx+0x28],rax
 1006c80:	mov    eax,DWORD PTR [rbx+0x10]
 1006c83:	test   eax,eax
 1006c85:	je     0x1006c99
 1006c87:	mov    DWORD PTR [rbx+0x64],eax
 1006c8a:	mov    DWORD PTR [rbx+0x5c],0x3
 1006c91:	xor    eax,eax
 1006c93:	add    rsp,0x50
 1006c97:	pop    rbx
 1006c98:	ret    
 1006c99:	mov    rcx,QWORD PTR [rbx]
 1006c9c:	lea    r8,[rip+0xffffffffffffade5]        # 0x1001a88
 1006ca3:	lea    rdx,[rsp+0x20]
 1006ca8:	call   QWORD PTR [rip+0xffffffffffffa382]        # 0x1001030
 1006cae:	mov    rcx,QWORD PTR [rax]
 1006cb1:	mov    QWORD PTR [rbx+0x8],rcx
 1006cb5:	mov    rcx,QWORD PTR [rax+0x8]
 1006cb9:	mov    QWORD PTR [rbx+0x10],rcx
 1006cbd:	mov    rcx,QWORD PTR [rax+0x10]
 1006cc1:	mov    QWORD PTR [rbx+0x18],rcx
 1006cc5:	mov    rcx,QWORD PTR [rax+0x18]
 1006cc9:	mov    QWORD PTR [rbx+0x20],rcx
 1006ccd:	mov    rax,QWORD PTR [rax+0x20]
 1006cd1:	mov    QWORD PTR [rbx+0x28],rax
 1006cd5:	mov    eax,DWORD PTR [rbx+0x10]
 1006cd8:	test   eax,eax
 1006cda:	je     0x1006cee
 1006cdc:	mov    DWORD PTR [rbx+0x64],eax
 1006cdf:	mov    DWORD PTR [rbx+0x5c],0x4
 1006ce6:	xor    eax,eax
 1006ce8:	add    rsp,0x50
 1006cec:	pop    rbx
 1006ced:	ret    
 1006cee:	mov    rcx,QWORD PTR [rbx]
 1006cf1:	lea    r8,[rip+0xffffffffffffad08]        # 0x1001a00
 1006cf8:	lea    rdx,[rsp+0x20]
 1006cfd:	call   QWORD PTR [rip+0xffffffffffffa32d]        # 0x1001030
 1006d03:	mov    rcx,QWORD PTR [rax]
 1006d06:	mov    QWORD PTR [rbx+0x8],rcx
 1006d0a:	mov    rcx,QWORD PTR [rax+0x8]
 1006d0e:	mov    QWORD PTR [rbx+0x10],rcx
 1006d12:	mov    rcx,QWORD PTR [rax+0x10]
 1006d16:	mov    QWORD PTR [rbx+0x18],rcx
 1006d1a:	mov    rcx,QWORD PTR [rax+0x18]
 1006d1e:	mov    QWORD PTR [rbx+0x20],rcx
 1006d22:	mov    rax,QWORD PTR [rax+0x20]
 1006d26:	mov    QWORD PTR [rbx+0x28],rax
 1006d2a:	cmp    BYTE PTR [rbx+0x10],0x0
 1006d2e:	je     0x1006d46
 1006d30:	mov    DWORD PTR [rbx+0x5c],0x1
 1006d37:	mov    DWORD PTR [rbx+0x64],0x0
 1006d3e:	xor    eax,eax
 1006d40:	add    rsp,0x50
 1006d44:	pop    rbx
 1006d45:	ret    
 1006d46:	mov    rcx,QWORD PTR [rbx]
 1006d49:	lea    r8,[rip+0xffffffffffffacd8]        # 0x1001a28
 1006d50:	lea    rdx,[rsp+0x20]
 1006d55:	call   QWORD PTR [rip+0xffffffffffffa2d5]        # 0x1001030
 1006d5b:	mov    rcx,QWORD PTR [rax]
 1006d5e:	mov    QWORD PTR [rbx+0x8],rcx
 1006d62:	mov    rcx,QWORD PTR [rax+0x8]
 1006d66:	mov    QWORD PTR [rbx+0x10],rcx
 1006d6a:	mov    rcx,QWORD PTR [rax+0x10]
 1006d6e:	mov    QWORD PTR [rbx+0x18],rcx
 1006d72:	mov    rcx,QWORD PTR [rax+0x18]
 1006d76:	mov    QWORD PTR [rbx+0x20],rcx
 1006d7a:	mov    rax,QWORD PTR [rax+0x20]
 1006d7e:	mov    QWORD PTR [rbx+0x28],rax
 1006d82:	cmp    BYTE PTR [rbx+0x10],0x0
 1006d86:	je     0x1006d9e
 1006d88:	mov    DWORD PTR [rbx+0x5c],0x2
 1006d8f:	mov    DWORD PTR [rbx+0x64],0x0
 1006d96:	xor    eax,eax
 1006d98:	add    rsp,0x50
 1006d9c:	pop    rbx
 1006d9d:	ret    
 1006d9e:	mov    rcx,QWORD PTR [rbx]
 1006da1:	lea    r8,[rip+0xffffffffffffac70]        # 0x1001a18
 1006da8:	lea    rdx,[rsp+0x20]
 1006dad:	call   QWORD PTR [rip+0xffffffffffffa27d]        # 0x1001030
 1006db3:	mov    rcx,QWORD PTR [rax]
 1006db6:	mov    QWORD PTR [rbx+0x8],rcx
 1006dba:	mov    rcx,QWORD PTR [rax+0x8]
 1006dbe:	mov    QWORD PTR [rbx+0x10],rcx
 1006dc2:	mov    rcx,QWORD PTR [rax+0x10]
 1006dc6:	mov    QWORD PTR [rbx+0x18],rcx
 1006dca:	mov    rcx,QWORD PTR [rax+0x18]
 1006dce:	mov    QWORD PTR [rbx+0x20],rcx
 1006dd2:	mov    rax,QWORD PTR [rax+0x20]
 1006dd6:	mov    QWORD PTR [rbx+0x28],rax
 1006dda:	cmp    BYTE PTR [rbx+0x10],0x0
 1006dde:	je     0x1006df5
 1006de0:	mov    eax,DWORD PTR [rbx+0x10]
 1006de3:	mov    DWORD PTR [rbx+0x5c],0x6
 1006dea:	mov    DWORD PTR [rbx+0x64],eax
 1006ded:	xor    eax,eax
 1006def:	add    rsp,0x50
 1006df3:	pop    rbx
 1006df4:	ret    
 1006df5:	mov    rcx,QWORD PTR [rbx]
 1006df8:	lea    r8,[rip+0xffffffffffffac49]        # 0x1001a48
 1006dff:	lea    rdx,[rsp+0x20]
 1006e04:	call   QWORD PTR [rip+0xffffffffffffa226]        # 0x1001030
 1006e0a:	mov    rcx,QWORD PTR [rax]
 1006e0d:	mov    QWORD PTR [rbx+0x8],rcx
 1006e11:	mov    rcx,QWORD PTR [rax+0x8]
 1006e15:	mov    QWORD PTR [rbx+0x10],rcx
 1006e19:	mov    rcx,QWORD PTR [rax+0x10]
 1006e1d:	mov    QWORD PTR [rbx+0x18],rcx
 1006e21:	mov    rcx,QWORD PTR [rax+0x18]
 1006e25:	mov    QWORD PTR [rbx+0x20],rcx
 1006e29:	mov    rax,QWORD PTR [rax+0x20]
 1006e2d:	mov    QWORD PTR [rbx+0x28],rax
 1006e31:	cmp    BYTE PTR [rbx+0x10],0x0
 1006e35:	je     0x1006e4d
 1006e37:	mov    DWORD PTR [rbx+0x5c],0x7
 1006e3e:	mov    DWORD PTR [rbx+0x64],0x0
 1006e45:	xor    eax,eax
 1006e47:	add    rsp,0x50
 1006e4b:	pop    rbx
 1006e4c:	ret    
 1006e4d:	mov    eax,0x6
 1006e52:	add    rsp,0x50
 1006e56:	pop    rbx
 1006e57:	ret    
 1006e58:	int3   
 1006e59:	int3   
 1006e5a:	int3   
 1006e5b:	int3   
 1006e5c:	int3   
 1006e5d:	int3   
 1006e5e:	int3   
 1006e5f:	int3   
 1006e60:	rex push rbx
 1006e62:	sub    rsp,0x50
 1006e66:	mov    rbx,rcx
 1006e69:	mov    rcx,QWORD PTR [rcx]
 1006e6c:	lea    r8,[rip+0xffffffffffffac2d]        # 0x1001aa0
 1006e73:	lea    rdx,[rsp+0x20]
 1006e78:	call   QWORD PTR [rip+0xffffffffffffa1b2]        # 0x1001030
 1006e7e:	mov    rdx,QWORD PTR [rax]
 1006e81:	mov    QWORD PTR [rbx+0x8],rdx
 1006e85:	mov    rdx,QWORD PTR [rax+0x8]
 1006e89:	mov    QWORD PTR [rbx+0x10],rdx
 1006e8d:	mov    rdx,QWORD PTR [rax+0x10]
 1006e91:	mov    QWORD PTR [rbx+0x18],rdx
 1006e95:	mov    rcx,QWORD PTR [rax+0x18]
 1006e99:	mov    QWORD PTR [rbx+0x20],rcx
 1006e9d:	mov    rax,QWORD PTR [rax+0x20]
 1006ea1:	mov    QWORD PTR [rbx+0x28],rax
 1006ea5:	cmp    DWORD PTR [rbx+0x10],0x0
 1006ea9:	je     0x1006eba
 1006eab:	mov    DWORD PTR [rbx+0x5c],0x0
 1006eb2:	xor    eax,eax
 1006eb4:	add    rsp,0x50
 1006eb8:	pop    rbx
 1006eb9:	ret    
 1006eba:	mov    rcx,QWORD PTR [rbx]
 1006ebd:	lea    r8,[rip+0xffffffffffffac0c]        # 0x1001ad0
 1006ec4:	lea    rdx,[rsp+0x20]
 1006ec9:	call   QWORD PTR [rip+0xffffffffffffa161]        # 0x1001030
 1006ecf:	mov    rcx,QWORD PTR [rax]
 1006ed2:	mov    QWORD PTR [rbx+0x8],rcx
 1006ed6:	mov    rcx,QWORD PTR [rax+0x8]
 1006eda:	mov    QWORD PTR [rbx+0x10],rcx
 1006ede:	mov    rcx,QWORD PTR [rax+0x10]
 1006ee2:	mov    QWORD PTR [rbx+0x18],rcx
 1006ee6:	mov    rcx,QWORD PTR [rax+0x18]
 1006eea:	mov    QWORD PTR [rbx+0x20],rcx
 1006eee:	mov    rax,QWORD PTR [rax+0x20]
 1006ef2:	mov    QWORD PTR [rbx+0x28],rax
 1006ef6:	cmp    DWORD PTR [rbx+0x10],0x0
 1006efa:	je     0x1006f0b
 1006efc:	mov    DWORD PTR [rbx+0x5c],0x3
 1006f03:	xor    eax,eax
 1006f05:	add    rsp,0x50
 1006f09:	pop    rbx
 1006f0a:	ret    
 1006f0b:	mov    rcx,QWORD PTR [rbx]
 1006f0e:	lea    r8,[rip+0xffffffffffffab9b]        # 0x1001ab0
 1006f15:	lea    rdx,[rsp+0x20]
 1006f1a:	call   QWORD PTR [rip+0xffffffffffffa110]        # 0x1001030
 1006f20:	mov    rcx,QWORD PTR [rax]
 1006f23:	mov    QWORD PTR [rbx+0x8],rcx
 1006f27:	mov    rcx,QWORD PTR [rax+0x8]
 1006f2b:	mov    QWORD PTR [rbx+0x10],rcx
 1006f2f:	mov    rcx,QWORD PTR [rax+0x10]
 1006f33:	mov    QWORD PTR [rbx+0x18],rcx
 1006f37:	mov    rcx,QWORD PTR [rax+0x18]
 1006f3b:	mov    QWORD PTR [rbx+0x20],rcx
 1006f3f:	mov    rax,QWORD PTR [rax+0x20]
 1006f43:	mov    QWORD PTR [rbx+0x28],rax
 1006f47:	cmp    DWORD PTR [rbx+0x10],0x0
 1006f4b:	je     0x1006f5c
 1006f4d:	mov    DWORD PTR [rbx+0x5c],0x1
 1006f54:	xor    eax,eax
 1006f56:	add    rsp,0x50
 1006f5a:	pop    rbx
 1006f5b:	ret    
 1006f5c:	mov    rcx,QWORD PTR [rbx]
 1006f5f:	lea    r8,[rip+0xffffffffffffab5a]        # 0x1001ac0
 1006f66:	lea    rdx,[rsp+0x20]
 1006f6b:	call   QWORD PTR [rip+0xffffffffffffa0bf]        # 0x1001030
 1006f71:	mov    rcx,QWORD PTR [rax]
 1006f74:	mov    QWORD PTR [rbx+0x8],rcx
 1006f78:	mov    rcx,QWORD PTR [rax+0x8]
 1006f7c:	mov    QWORD PTR [rbx+0x10],rcx
 1006f80:	mov    rcx,QWORD PTR [rax+0x10]
 1006f84:	mov    QWORD PTR [rbx+0x18],rcx
 1006f88:	mov    rcx,QWORD PTR [rax+0x18]
 1006f8c:	mov    QWORD PTR [rbx+0x20],rcx
 1006f90:	mov    rax,QWORD PTR [rax+0x20]
 1006f94:	mov    QWORD PTR [rbx+0x28],rax
 1006f98:	cmp    DWORD PTR [rbx+0x10],0x0
 1006f9c:	je     0x1006fad
 1006f9e:	mov    DWORD PTR [rbx+0x5c],0x2
 1006fa5:	xor    eax,eax
 1006fa7:	add    rsp,0x50
 1006fab:	pop    rbx
 1006fac:	ret    
 1006fad:	mov    rcx,QWORD PTR [rbx]
 1006fb0:	lea    r8,[rip+0xffffffffffffab29]        # 0x1001ae0
 1006fb7:	lea    rdx,[rsp+0x20]
 1006fbc:	call   QWORD PTR [rip+0xffffffffffffa06e]        # 0x1001030
 1006fc2:	mov    rcx,QWORD PTR [rax]
 1006fc5:	mov    QWORD PTR [rbx+0x8],rcx
 1006fc9:	mov    rcx,QWORD PTR [rax+0x8]
 1006fcd:	mov    QWORD PTR [rbx+0x10],rcx
 1006fd1:	mov    rcx,QWORD PTR [rax+0x10]
 1006fd5:	mov    QWORD PTR [rbx+0x18],rcx
 1006fd9:	mov    rcx,QWORD PTR [rax+0x18]
 1006fdd:	mov    QWORD PTR [rbx+0x20],rcx
 1006fe1:	mov    rax,QWORD PTR [rax+0x20]
 1006fe5:	mov    QWORD PTR [rbx+0x28],rax
 1006fe9:	cmp    DWORD PTR [rbx+0x10],0x0
 1006fed:	je     0x1006ffe
 1006fef:	mov    DWORD PTR [rbx+0x5c],0x5
 1006ff6:	xor    eax,eax
 1006ff8:	add    rsp,0x50
 1006ffc:	pop    rbx
 1006ffd:	ret    
 1006ffe:	mov    eax,0x6
 1007003:	add    rsp,0x50
 1007007:	pop    rbx
 1007008:	ret    
 1007009:	int3   
 100700a:	int3   
 100700b:	int3   
 100700c:	int3   
 100700d:	int3   
 100700e:	int3   
 100700f:	int3   
 1007010:	rex push rbx
 1007012:	sub    rsp,0x50
 1007016:	mov    rbx,rcx
 1007019:	mov    rcx,QWORD PTR [rcx]
 100701c:	lea    r8,[rip+0xffffffffffffaa15]        # 0x1001a38
 1007023:	lea    rdx,[rsp+0x20]
 1007028:	call   QWORD PTR [rip+0xffffffffffffa002]        # 0x1001030
 100702e:	mov    rdx,QWORD PTR [rax]
 1007031:	mov    QWORD PTR [rbx+0x30],rdx
 1007035:	mov    rdx,QWORD PTR [rax+0x8]
 1007039:	mov    QWORD PTR [rbx+0x38],rdx
 100703d:	mov    rdx,QWORD PTR [rax+0x10]
 1007041:	mov    QWORD PTR [rbx+0x40],rdx
 1007045:	mov    rcx,QWORD PTR [rax+0x18]
 1007049:	mov    QWORD PTR [rbx+0x48],rcx
 100704d:	mov    rax,QWORD PTR [rax+0x20]
 1007051:	mov    QWORD PTR [rbx+0x50],rax
 1007055:	mov    rax,QWORD PTR [rbx+0x38]
 1007059:	cmp    QWORD PTR [rax+0x10],0x0
 100705e:	je     0x100706f
 1007060:	mov    DWORD PTR [rbx+0x60],0x2
 1007067:	xor    eax,eax
 1007069:	add    rsp,0x50
 100706d:	pop    rbx
 100706e:	ret    
 100706f:	mov    rcx,QWORD PTR [rbx]
 1007072:	lea    r8,[rip+0xffffffffffffaa1f]        # 0x1001a98
 1007079:	lea    rdx,[rsp+0x20]
 100707e:	call   QWORD PTR [rip+0xffffffffffff9fac]        # 0x1001030
 1007084:	mov    rcx,QWORD PTR [rax]
 1007087:	mov    QWORD PTR [rbx+0x30],rcx
 100708b:	mov    rcx,QWORD PTR [rax+0x8]
 100708f:	mov    QWORD PTR [rbx+0x38],rcx
 1007093:	mov    rcx,QWORD PTR [rax+0x10]
 1007097:	mov    QWORD PTR [rbx+0x40],rcx
 100709b:	mov    rcx,QWORD PTR [rax+0x18]
 100709f:	mov    QWORD PTR [rbx+0x48],rcx
 10070a3:	mov    rax,QWORD PTR [rax+0x20]
 10070a7:	mov    QWORD PTR [rbx+0x50],rax
 10070ab:	mov    rax,QWORD PTR [rbx+0x38]
 10070af:	cmp    QWORD PTR [rax+0x10],0x0
 10070b4:	je     0x10070c5
 10070b6:	mov    DWORD PTR [rbx+0x60],0x1
 10070bd:	xor    eax,eax
 10070bf:	add    rsp,0x50
 10070c3:	pop    rbx
 10070c4:	ret    
 10070c5:	mov    rcx,QWORD PTR [rbx]
 10070c8:	lea    r8,[rip+0xffffffffffffa941]        # 0x1001a10
 10070cf:	lea    rdx,[rsp+0x20]
 10070d4:	call   QWORD PTR [rip+0xffffffffffff9f56]        # 0x1001030
 10070da:	mov    rcx,QWORD PTR [rax]
 10070dd:	mov    QWORD PTR [rbx+0x30],rcx
 10070e1:	mov    rcx,QWORD PTR [rax+0x8]
 10070e5:	mov    QWORD PTR [rbx+0x38],rcx
 10070e9:	mov    rcx,QWORD PTR [rax+0x10]
 10070ed:	mov    QWORD PTR [rbx+0x40],rcx
 10070f1:	mov    rcx,QWORD PTR [rax+0x18]
 10070f5:	mov    QWORD PTR [rbx+0x48],rcx
 10070f9:	mov    rax,QWORD PTR [rax+0x20]
 10070fd:	mov    QWORD PTR [rbx+0x50],rax
 1007101:	mov    rax,QWORD PTR [rbx+0x38]
 1007105:	cmp    QWORD PTR [rax+0x10],0x0
 100710a:	je     0x100711b
 100710c:	mov    DWORD PTR [rbx+0x60],0x3
 1007113:	xor    eax,eax
 1007115:	add    rsp,0x50
 1007119:	pop    rbx
 100711a:	ret    
 100711b:	mov    eax,0x6
 1007120:	add    rsp,0x50
 1007124:	pop    rbx
 1007125:	ret    
 1007126:	int3   
 1007127:	int3   
 1007128:	int3   
 1007129:	int3   
 100712a:	int3   
 100712b:	int3   
 100712c:	int3   
 100712d:	int3   
 100712e:	int3   
 100712f:	int3   
 1007130:	mov    QWORD PTR [rsp+0x10],rdx
 1007135:	push   rbx
 1007136:	sub    rsp,0x30
 100713a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1007143:	mov    rbx,rdx
 1007146:	xor    eax,eax
 1007148:	mov    DWORD PTR [rsp+0x20],eax
 100714c:	mov    QWORD PTR [rdx+0x18],0x7
 1007154:	mov    QWORD PTR [rdx+0x10],rax
 1007158:	mov    WORD PTR [rdx],ax
 100715b:	mov    DWORD PTR [rsp+0x20],0x1
 1007163:	mov    eax,DWORD PTR [r8]
 1007166:	cmp    eax,0x1
 1007169:	je     0x10071ed
 100716f:	cmp    eax,0x3
 1007172:	je     0x10071cd
 1007174:	jle    0x1007213
 100717a:	cmp    eax,0x5
 100717d:	jle    0x10071ad
 100717f:	cmp    eax,0x7
 1007182:	jne    0x1007213
 1007188:	mov    rdx,QWORD PTR [r8+0x10]
 100718c:	cmp    QWORD PTR [rdx+0x18],0x8
 1007191:	jb     0x1007196
 1007193:	mov    rdx,QWORD PTR [rdx]
 1007196:	or     r8,0xffffffffffffffff
 100719a:	nop    WORD PTR [rax+rax*1+0x0]
 10071a0:	inc    r8
 10071a3:	cmp    WORD PTR [rdx+r8*2],0x0
 10071a9:	jne    0x10071a0
 10071ab:	jmp    0x100720b
 10071ad:	mov    rdx,QWORD PTR [r8+0x10]
 10071b1:	cmp    QWORD PTR [rdx+0x18],0x8
 10071b6:	jb     0x10071bb
 10071b8:	mov    rdx,QWORD PTR [rdx]
 10071bb:	or     r8,0xffffffffffffffff
 10071bf:	nop
 10071c0:	inc    r8
 10071c3:	cmp    WORD PTR [rdx+r8*2],0x0
 10071c9:	jne    0x10071c0
 10071cb:	jmp    0x100720b
 10071cd:	mov    rdx,QWORD PTR [r8+0x10]
 10071d1:	cmp    QWORD PTR [rdx+0x18],0x8
 10071d6:	jb     0x10071db
 10071d8:	mov    rdx,QWORD PTR [rdx]
 10071db:	or     r8,0xffffffffffffffff
 10071df:	nop
 10071e0:	inc    r8
 10071e3:	cmp    WORD PTR [rdx+r8*2],0x0
 10071e9:	jne    0x10071e0
 10071eb:	jmp    0x100720b
 10071ed:	mov    rdx,QWORD PTR [r8+0x8]
 10071f1:	cmp    QWORD PTR [rdx+0x18],0x8
 10071f6:	jb     0x10071fb
 10071f8:	mov    rdx,QWORD PTR [rdx]
 10071fb:	or     r8,0xffffffffffffffff
 10071ff:	nop
 1007200:	inc    r8
 1007203:	cmp    WORD PTR [rdx+r8*2],0x0
 1007209:	jne    0x1007200
 100720b:	mov    rcx,rbx
 100720e:	call   0x10061d0
 1007213:	mov    rax,rbx
 1007216:	add    rsp,0x30
 100721a:	pop    rbx
 100721b:	ret    
 100721c:	int3   
 100721d:	int3   
 100721e:	int3   
 100721f:	int3   
 1007220:	int3   
 1007221:	int3   
 1007222:	int3   
 1007223:	int3   
 1007224:	int3   
 1007225:	int3   
 1007226:	int3   
 1007227:	int3   
 1007228:	int3   
 1007229:	int3   
 100722a:	int3   
 100722b:	int3   
 100722c:	int3   
 100722d:	int3   
 100722e:	int3   
 100722f:	int3   
 1007230:	sub    rsp,0x28
 1007234:	mov    ecx,0x71
 1007239:	call   0x100e600
 100723e:	xor    ecx,ecx
 1007240:	call   QWORD PTR [rip+0xffffffffffffa12a]        # 0x1001370
 1007246:	lea    r8,[rsp+0x40]
 100724b:	mov    edx,0x72
 1007250:	mov    rcx,rax
 1007253:	call   0x100e780
 1007258:	test   eax,eax
 100725a:	jne    0x1007273
 100725c:	lea    rcx,[rip+0xffffffffffffa8a1]        # 0x1001b04
 1007263:	call   QWORD PTR [rip+0xffffffffffffa37f]        # 0x10015e8
 1007269:	mov    r11,rax
 100726c:	mov    QWORD PTR [rsp+0x40],rax
 1007271:	jmp    0x1007278
 1007273:	mov    r11,QWORD PTR [rsp+0x40]
 1007278:	test   r11,r11
 100727b:	je     0x100732a
 1007281:	or     rax,0xffffffffffffffff
 1007285:	inc    rax
 1007288:	cmp    WORD PTR [r11+rax*2],0x0
 100728e:	jne    0x1007285
 1007290:	cmp    rax,0x2
 1007294:	jb     0x100732a
 100729a:	movzx  ecx,WORD PTR [r11]
 100729e:	mov    QWORD PTR [rsp+0x20],rbx
 10072a3:	call   QWORD PTR [rip+0xffffffffffffa277]        # 0x1001520
 10072a9:	mov    rcx,QWORD PTR [rsp+0x40]
 10072ae:	mov    WORD PTR [rcx],ax
 10072b1:	mov    rax,QWORD PTR [rsp+0x40]
 10072b6:	movzx  ecx,WORD PTR [rax+0x2]
 10072ba:	call   QWORD PTR [rip+0xffffffffffffa260]        # 0x1001520
 10072c0:	mov    rcx,QWORD PTR [rsp+0x40]
 10072c5:	mov    WORD PTR [rcx+0x2],ax
 10072c9:	nop    DWORD PTR [rax+0x0]
 10072d0:	lea    rcx,[rip+0xffffffffffffa835]        # 0x1001b0c
 10072d7:	call   QWORD PTR [rip+0xffffffffffffa213]        # 0x10014f0
 10072dd:	call   QWORD PTR [rip+0xffffffffffffa205]        # 0x10014e8
 10072e3:	movzx  ecx,ax
 10072e6:	call   QWORD PTR [rip+0xffffffffffffa234]        # 0x1001520
 10072ec:	movzx  ebx,ax
 10072ef:	mov    rax,QWORD PTR [rsp+0x40]
 10072f4:	cmp    bx,WORD PTR [rax]
 10072f7:	je     0x10072ff
 10072f9:	cmp    bx,WORD PTR [rax+0x2]
 10072fd:	jne    0x10072d0
 10072ff:	lea    rcx,[rip+0xffffffffffffa80a]        # 0x1001b10
 1007306:	call   QWORD PTR [rip+0xffffffffffffa1e4]        # 0x10014f0
 100730c:	mov    rcx,QWORD PTR [rsp+0x40]
 1007311:	cmp    bx,WORD PTR [rcx]
 1007314:	sete   bl
 1007317:	call   QWORD PTR [rip+0xffffffffffffa2bb]        # 0x10015d8
 100731d:	movzx  eax,bl
 1007320:	mov    rbx,QWORD PTR [rsp+0x20]
 1007325:	add    rsp,0x28
 1007329:	ret    
 100732a:	xor    al,al
 100732c:	add    rsp,0x28
 1007330:	ret    
 1007331:	int3   
 1007332:	int3   
 1007333:	int3   
 1007334:	int3   
 1007335:	int3   
 1007336:	int3   
 1007337:	int3   
 1007338:	int3   
 1007339:	int3   
 100733a:	int3   
 100733b:	int3   
 100733c:	int3   
 100733d:	int3   
 100733e:	int3   
 100733f:	int3   
 1007340:	rex push rbx
 1007342:	sub    rsp,0x480
 1007349:	mov    rax,QWORD PTR [rip+0x13e90]        # 0x101b1e0
 1007350:	xor    rax,rsp
 1007353:	mov    QWORD PTR [rsp+0x470],rax
 100735b:	mov    r8d,edx
 100735e:	mov    ecx,0x1f0fff
 1007363:	xor    edx,edx
 1007365:	call   QWORD PTR [rip+0xffffffffffff9f8d]        # 0x10012f8
 100736b:	mov    rbx,rax
 100736e:	test   rax,rax
 1007371:	jne    0x1007382
 1007373:	mov    ecx,0xa5
 1007378:	call   0x100e600
 100737d:	jmp    0x100741a
 1007382:	xor    eax,eax
 1007384:	lea    rcx,[rsp+0x50]
 1007389:	xor    edx,edx
 100738b:	mov    r8d,0x414
 1007391:	mov    QWORD PTR [rsp+0x30],rax
 1007396:	mov    QWORD PTR [rsp+0x38],rax
 100739b:	mov    QWORD PTR [rsp+0x40],rax
 10073a0:	call   0x100dcba
 10073a5:	lea    r9,[rsp+0x50]
 10073aa:	lea    r8,[rip+0xffffffffffffa76f]        # 0x1001b20
 10073b1:	lea    rcx,[rsp+0x30]
 10073b6:	mov    rdx,rbx
 10073b9:	mov    DWORD PTR [rsp+0x28],0x493e0
 10073c1:	mov    QWORD PTR [rsp+0x20],0x414
 10073ca:	call   0x10077b0
 10073cf:	test   eax,eax
 10073d1:	je     0x1007411
 10073d3:	mov    edx,DWORD PTR [rsp+0x460]
 10073da:	test   edx,edx
 10073dc:	jns    0x10073ea
 10073de:	mov    ecx,0xa6
 10073e3:	call   0x100e600
 10073e8:	jmp    0x10073f4
 10073ea:	mov    ecx,0x6d
 10073ef:	call   0x100e600
 10073f4:	cmp    WORD PTR [rsp+0x258],0x0
 10073fd:	je     0x1007411
 10073ff:	lea    rdx,[rsp+0x258]
 1007407:	mov    ecx,0xa7
 100740c:	call   0x100e600
 1007411:	mov    rcx,rbx
 1007414:	call   QWORD PTR [rip+0xffffffffffff9f16]        # 0x1001330
 100741a:	mov    rcx,QWORD PTR [rsp+0x470]
 1007422:	xor    rcx,rsp
 1007425:	call   0x100daf0
 100742a:	add    rsp,0x480
 1007431:	pop    rbx
 1007432:	ret    
 1007433:	int3   
 1007434:	int3   
 1007435:	int3   
 1007436:	int3   
 1007437:	int3   
 1007438:	int3   
 1007439:	int3   
 100743a:	int3   
 100743b:	int3   
 100743c:	int3   
 100743d:	int3   
 100743e:	int3   
 100743f:	int3   
 1007440:	mov    r11,rsp
 1007443:	push   rbx
 1007444:	push   rsi
 1007445:	push   rdi
 1007446:	push   r12
 1007448:	push   r13
 100744a:	push   r14
 100744c:	push   r15
 100744e:	sub    rsp,0x30
 1007452:	mov    QWORD PTR [r11-0x40],0xfffffffffffffffe
 100745a:	mov    rbx,rcx
 100745d:	xor    r13d,r13d
 1007460:	mov    QWORD PTR [r11+0x20],r13
 1007464:	mov    QWORD PTR [r11+0x18],r13
 1007468:	mov    rax,QWORD PTR [rcx]
 100746b:	lea    rdx,[r11+0x20]
 100746f:	call   QWORD PTR [rax+0x28]
 1007472:	test   eax,eax
 1007474:	jns    0x100748c
 1007476:	mov    rcx,QWORD PTR [rsp+0x88]
 100747e:	call   QWORD PTR [rip+0xffffffffffffa154]        # 0x10015d8
 1007484:	mov    QWORD PTR [rsp+0x88],r13
 100748c:	mov    rax,QWORD PTR [rbx]
 100748f:	lea    rdx,[rsp+0x80]
 1007497:	mov    rcx,rbx
 100749a:	call   QWORD PTR [rax+0x20]
 100749d:	test   eax,eax
 100749f:	jns    0x10074b7
 10074a1:	mov    rcx,QWORD PTR [rsp+0x80]
 10074a9:	call   QWORD PTR [rip+0xffffffffffffa129]        # 0x10015d8
 10074af:	mov    QWORD PTR [rsp+0x80],r13
 10074b7:	mov    rbx,QWORD PTR [rsp+0x88]
 10074bf:	lea    rcx,[rip+0x13d42]        # 0x101b208
 10074c6:	mov    rax,QWORD PTR [rip+0x13d3b]        # 0x101b208
 10074cd:	call   QWORD PTR [rax+0x18]
 10074d0:	lea    rdi,[rax+0x18]
 10074d4:	mov    QWORD PTR [rsp+0x70],rdi
 10074d9:	test   rbx,rbx
 10074dc:	je     0x100752c
 10074de:	test   rbx,0xffffffffffff0000
 10074e5:	jne    0x1007514
 10074e7:	movzx  ebx,bx
 10074ea:	xor    edx,edx
 10074ec:	mov    ecx,ebx
 10074ee:	call   0x1005920
 10074f3:	test   rax,rax
 10074f6:	je     0x100750e
 10074f8:	mov    r8d,ebx
 10074fb:	mov    rdx,rax
 10074fe:	lea    rcx,[rsp+0x70]
 1007503:	call   0x1005d80
 1007508:	or     r15,0xffffffffffffffff
 100750c:	jmp    0x1007543
 100750e:	or     r15,0xffffffffffffffff
 1007512:	jmp    0x1007548
 1007514:	or     r15,0xffffffffffffffff
 1007518:	mov    rax,r15
 100751b:	nop    DWORD PTR [rax+rax*1+0x0]
 1007520:	inc    rax
 1007523:	cmp    WORD PTR [rbx+rax*2],0x0
 1007528:	jne    0x1007520
 100752a:	jmp    0x1007533
 100752c:	mov    eax,r13d
 100752f:	or     r15,0xffffffffffffffff
 1007533:	mov    r8d,eax
 1007536:	mov    rdx,rbx
 1007539:	lea    rcx,[rsp+0x70]
 100753e:	call   0x1005aa0
 1007543:	mov    rdi,QWORD PTR [rsp+0x70]
 1007548:	mov    rsi,rdi
 100754b:	mov    rbx,r13
 100754e:	xchg   ax,ax
 1007550:	movzx  edx,WORD PTR [rsi]
 1007553:	test   dx,dx
 1007556:	je     0x100757d
 1007558:	lea    rcx,[rip+0xffffffffffffa5b5]        # 0x1001b14
 100755f:	call   QWORD PTR [rip+0xffffffffffff9f9b]        # 0x1001500
 1007565:	test   rax,rax
 1007568:	je     0x1007574
 100756a:	test   rbx,rbx
 100756d:	jne    0x1007577
 100756f:	mov    rbx,rsi
 1007572:	jmp    0x1007577
 1007574:	mov    rbx,r13
 1007577:	add    rsi,0x2
 100757b:	jmp    0x1007550
 100757d:	test   rbx,rbx
 1007580:	je     0x10075d8
 1007582:	sub    rbx,rdi
 1007585:	sar    rbx,1
 1007588:	test   ebx,ebx
 100758a:	jns    0x1007596
 100758c:	mov    ecx,0x80070057
 1007591:	call   0x1004f80
 1007596:	mov    r12d,0x1
 100759c:	mov    ecx,r12d
 100759f:	sub    ecx,DWORD PTR [rdi-0x8]
 10075a2:	mov    eax,DWORD PTR [rdi-0xc]
 10075a5:	sub    eax,ebx
 10075a7:	or     eax,ecx
 10075a9:	jge    0x10075bc
 10075ab:	mov    edx,ebx
 10075ad:	lea    rcx,[rsp+0x70]
 10075b2:	call   0x1005c80
 10075b7:	mov    rdi,QWORD PTR [rsp+0x70]
 10075bc:	cmp    ebx,DWORD PTR [rdi-0xc]
 10075bf:	jg     0x10075ce
 10075c1:	mov    DWORD PTR [rdi-0x10],ebx
 10075c4:	movsxd rax,ebx
 10075c7:	mov    WORD PTR [rdi+rax*2],r13w
 10075cc:	jmp    0x10075de
 10075ce:	mov    ecx,0x80070057
 10075d3:	call   0x1004f80
 10075d8:	mov    r12d,0x1
 10075de:	mov    rsi,QWORD PTR [rsp+0x80]
 10075e6:	lea    rcx,[rip+0x13c1b]        # 0x101b208
 10075ed:	mov    rax,QWORD PTR [rip+0x13c14]        # 0x101b208
 10075f4:	call   QWORD PTR [rax+0x18]
 10075f7:	lea    rbx,[rax+0x18]
 10075fb:	mov    QWORD PTR [rsp+0x78],rbx
 1007600:	test   rsi,rsi
 1007603:	je     0x1007640
 1007605:	test   rsi,0xffffffffffff0000
 100760c:	jne    0x1007631
 100760e:	movzx  esi,si
 1007611:	xor    edx,edx
 1007613:	mov    ecx,esi
 1007615:	call   0x1005920
 100761a:	test   rax,rax
 100761d:	je     0x1007658
 100761f:	mov    r8d,esi
 1007622:	mov    rdx,rax
 1007625:	lea    rcx,[rsp+0x78]
 100762a:	call   0x1005d80
 100762f:	jmp    0x1007653
 1007631:	mov    rax,r15
 1007634:	inc    rax
 1007637:	cmp    WORD PTR [rsi+rax*2],0x0
 100763c:	jne    0x1007634
 100763e:	jmp    0x1007643
 1007640:	mov    eax,r13d
 1007643:	mov    r8d,eax
 1007646:	mov    rdx,rsi
 1007649:	lea    rcx,[rsp+0x78]
 100764e:	call   0x1005aa0
 1007653:	mov    rbx,QWORD PTR [rsp+0x78]
 1007658:	mov    r14,rbx
 100765b:	mov    rsi,r13
 100765e:	xchg   ax,ax
 1007660:	movzx  edx,WORD PTR [r14]
 1007664:	test   dx,dx
 1007667:	je     0x100768e
 1007669:	lea    rcx,[rip+0xffffffffffffa4a4]        # 0x1001b14
 1007670:	call   QWORD PTR [rip+0xffffffffffff9e8a]        # 0x1001500
 1007676:	test   rax,rax
 1007679:	je     0x1007685
 100767b:	test   rsi,rsi
 100767e:	jne    0x1007688
 1007680:	mov    rsi,r14
 1007683:	jmp    0x1007688
 1007685:	mov    rsi,r13
 1007688:	add    r14,0x2
 100768c:	jmp    0x1007660
 100768e:	test   rsi,rsi
 1007691:	je     0x10076e2
 1007693:	sub    rsi,rbx
 1007696:	sar    rsi,1
 1007699:	test   esi,esi
 100769b:	jns    0x10076a7
 100769d:	mov    ecx,0x80070057
 10076a2:	call   0x1004f80
 10076a7:	sub    r12d,DWORD PTR [rbx-0x8]
 10076ab:	mov    eax,DWORD PTR [rbx-0xc]
 10076ae:	sub    eax,esi
 10076b0:	or     eax,r12d
 10076b3:	jge    0x10076c6
 10076b5:	mov    edx,esi
 10076b7:	lea    rcx,[rsp+0x78]
 10076bc:	call   0x1005c80
 10076c1:	mov    rbx,QWORD PTR [rsp+0x78]
 10076c6:	cmp    esi,DWORD PTR [rbx-0xc]
 10076c9:	jg     0x10076d8
 10076cb:	mov    DWORD PTR [rbx-0x10],esi
 10076ce:	movsxd rax,esi
 10076d1:	mov    WORD PTR [rbx+rax*2],r13w
 10076d6:	jmp    0x10076e2
 10076d8:	mov    ecx,0x80070057
 10076dd:	call   0x1004f80
 10076e2:	mov    rdx,rdi
 10076e5:	mov    ecx,0x8a
 10076ea:	call   0x100e600
 10076ef:	mov    rdx,rbx
 10076f2:	mov    ecx,0x8b
 10076f7:	call   0x100e600
 10076fc:	nop
 10076fd:	lea    rdx,[rbx-0x18]
 1007701:	mov    eax,r15d
 1007704:	lock xadd DWORD PTR [rdx+0x10],eax
 1007709:	dec    eax
 100770b:	test   eax,eax
 100770d:	jg     0x1007719
 100770f:	mov    rcx,QWORD PTR [rdx]
 1007712:	mov    rax,QWORD PTR [rcx]
 1007715:	call   QWORD PTR [rax+0x8]
 1007718:	nop
 1007719:	mov    rdx,QWORD PTR [rsp+0x70]
 100771e:	add    rdx,0xffffffffffffffe8
 1007722:	lock xadd DWORD PTR [rdx+0x10],r15d
 1007728:	dec    r15d
 100772b:	test   r15d,r15d
 100772e:	jg     0x100773a
 1007730:	mov    rcx,QWORD PTR [rdx]
 1007733:	mov    rax,QWORD PTR [rcx]
 1007736:	call   QWORD PTR [rax+0x8]
 1007739:	nop
 100773a:	mov    rcx,QWORD PTR [rsp+0x80]
 1007742:	call   QWORD PTR [rip+0xffffffffffff9e90]        # 0x10015d8
 1007748:	nop
 1007749:	mov    rcx,QWORD PTR [rsp+0x88]
 1007751:	call   QWORD PTR [rip+0xffffffffffff9e81]        # 0x10015d8
 1007757:	nop
 1007758:	add    rsp,0x30
 100775c:	pop    r15
 100775e:	pop    r14
 1007760:	pop    r13
 1007762:	pop    r12
 1007764:	pop    rdi
 1007765:	pop    rsi
 1007766:	pop    rbx
 1007767:	ret    
 1007768:	int3   
 1007769:	int3   
 100776a:	int3   
 100776b:	int3   
 100776c:	int3   
 100776d:	int3   
 100776e:	int3   
 100776f:	int3   
 1007770:	rex push rbx
 1007772:	sub    rsp,0x20
 1007776:	mov    rbx,rcx
 1007779:	mov    rcx,QWORD PTR [rcx+0x8]
 100777d:	test   rcx,rcx
 1007780:	je     0x1007788
 1007782:	call   QWORD PTR [rip+0xffffffffffff9ba8]        # 0x1001330
 1007788:	mov    rdx,QWORD PTR [rbx+0x10]
 100778c:	test   rdx,rdx
 100778f:	je     0x10077a3
 1007791:	mov    rcx,QWORD PTR [rbx]
 1007794:	mov    r9d,0x8000
 100779a:	xor    r8d,r8d
 100779d:	call   QWORD PTR [rip+0xffffffffffff9b5d]        # 0x1001300
 10077a3:	add    rsp,0x20
 10077a7:	pop    rbx
 10077a8:	ret    
 10077a9:	int3   
 10077aa:	int3   
 10077ab:	int3   
 10077ac:	int3   
 10077ad:	int3   
 10077ae:	int3   
 10077af:	int3   
 10077b0:	mov    QWORD PTR [rsp+0x18],rbx
 10077b5:	push   rbp
 10077b6:	push   rsi
 10077b7:	push   rdi
 10077b8:	push   r14
 10077ba:	push   r15
 10077bc:	sub    rsp,0x50
 10077c0:	mov    rsi,rdx
 10077c3:	mov    QWORD PTR [rcx],rdx
 10077c6:	mov    rbx,rcx
 10077c9:	lea    rdx,[rsp+0x40]
 10077ce:	mov    rcx,rsi
 10077d1:	mov    r15,r9
 10077d4:	mov    rdi,r8
 10077d7:	call   0x1007a40
 10077dc:	mov    r14,rax
 10077df:	test   rax,rax
 10077e2:	je     0x100791d
 10077e8:	mov    rdx,rdi
 10077eb:	mov    rcx,rax
 10077ee:	call   QWORD PTR [rip+0xffffffffffff9b94]        # 0x1001388
 10077f4:	mov    rdi,rax
 10077f7:	test   rax,rax
 10077fa:	je     0x1007913
 1007800:	sub    rdi,QWORD PTR [rsp+0x40]
 1007805:	je     0x1007913
 100780b:	mov    rbp,QWORD PTR [rsp+0xa0]
 1007813:	mov    r9d,0x3000
 1007819:	xor    edx,edx
 100781b:	mov    rcx,rsi
 100781e:	mov    r8,rbp
 1007821:	mov    DWORD PTR [rsp+0x20],0x4
 1007829:	call   QWORD PTR [rip+0xffffffffffff9ad9]        # 0x1001308
 100782f:	mov    QWORD PTR [rbx+0x10],rax
 1007833:	test   rax,rax
 1007836:	jne    0x1007842
 1007838:	mov    ecx,0xa3
 100783d:	jmp    0x1007918
 1007842:	lea    rcx,[rsp+0x88]
 100784a:	mov    r9,rbp
 100784d:	mov    r8,r15
 1007850:	mov    QWORD PTR [rsp+0x20],rcx
 1007855:	mov    rdx,rax
 1007858:	mov    rcx,rsi
 100785b:	mov    QWORD PTR [rsp+0x88],0x0
 1007867:	call   QWORD PTR [rip+0xffffffffffff9a63]        # 0x10012d0
 100786d:	test   eax,eax
 100786f:	je     0x1007838
 1007871:	cmp    QWORD PTR [rsp+0x88],rbp
 1007879:	jne    0x1007838
 100787b:	lea    rax,[rsp+0x80]
 1007883:	mov    r9,rdi
 1007886:	xor    r8d,r8d
 1007889:	mov    QWORD PTR [rsp+0x30],rax
 100788e:	mov    rax,QWORD PTR [rbx+0x10]
 1007892:	xor    edx,edx
 1007894:	mov    rcx,rsi
 1007897:	mov    DWORD PTR [rsp+0x28],0x0
 100789f:	mov    QWORD PTR [rsp+0x20],rax
 10078a4:	call   QWORD PTR [rip+0xffffffffffff9a3e]        # 0x10012e8
 10078aa:	mov    QWORD PTR [rbx+0x8],rax
 10078ae:	test   rax,rax
 10078b1:	je     0x100790c
 10078b3:	mov    edx,DWORD PTR [rsp+0xa8]
 10078ba:	mov    rcx,rbx
 10078bd:	call   0x1007970
 10078c2:	test   eax,eax
 10078c4:	je     0x100790c
 10078c6:	mov    rdx,QWORD PTR [rbx+0x10]
 10078ca:	lea    rax,[rsp+0x88]
 10078d2:	mov    r9,rbp
 10078d5:	mov    r8,r15
 10078d8:	mov    rcx,rsi
 10078db:	mov    QWORD PTR [rsp+0x20],rax
 10078e0:	call   QWORD PTR [rip+0xffffffffffff99f2]        # 0x10012d8
 10078e6:	test   eax,eax
 10078e8:	jne    0x10078f4
 10078ea:	mov    ecx,0xa3
 10078ef:	call   0x100e600
 10078f4:	mov    rcx,rbx
 10078f7:	call   0x1007770
 10078fc:	mov    rcx,r14
 10078ff:	call   QWORD PTR [rip+0xffffffffffff9a13]        # 0x1001318
 1007905:	mov    eax,0x1
 100790a:	jmp    0x1007949
 100790c:	mov    ecx,0xa4
 1007911:	jmp    0x1007918
 1007913:	mov    ecx,0xa2
 1007918:	call   0x100e600
 100791d:	mov    rcx,QWORD PTR [rbx+0x8]
 1007921:	test   rcx,rcx
 1007924:	je     0x100792c
 1007926:	call   QWORD PTR [rip+0xffffffffffff9a04]        # 0x1001330
 100792c:	mov    rdx,QWORD PTR [rbx+0x10]
 1007930:	test   rdx,rdx
 1007933:	je     0x1007947
 1007935:	mov    rcx,QWORD PTR [rbx]
 1007938:	mov    r9d,0x8000
 100793e:	xor    r8d,r8d
 1007941:	call   QWORD PTR [rip+0xffffffffffff99b9]        # 0x1001300
 1007947:	xor    eax,eax
 1007949:	mov    rbx,QWORD PTR [rsp+0x90]
 1007951:	add    rsp,0x50
 1007955:	pop    r15
 1007957:	pop    r14
 1007959:	pop    rdi
 100795a:	pop    rsi
 100795b:	pop    rbp
 100795c:	ret    
 100795d:	int3   
 100795e:	int3   
 100795f:	int3   
 1007960:	int3   
 1007961:	int3   
 1007962:	int3   
 1007963:	int3   
 1007964:	int3   
 1007965:	int3   
 1007966:	int3   
 1007967:	int3   
 1007968:	int3   
 1007969:	int3   
 100796a:	int3   
 100796b:	int3   
 100796c:	int3   
 100796d:	int3   
 100796e:	int3   
 100796f:	int3   
 1007970:	mov    QWORD PTR [rsp+0x18],rbx
 1007975:	push   rbp
 1007976:	push   rsi
 1007977:	push   r12
 1007979:	push   r14
 100797b:	push   r15
 100797d:	sub    rsp,0x20
 1007981:	xor    esi,esi
 1007983:	xor    r15d,r15d
 1007986:	xor    ebx,ebx
 1007988:	mov    r12d,edx
 100798b:	mov    r14,rcx
 100798e:	lea    ebp,[rsi+0x1]
 1007991:	test   edx,edx
 1007993:	je     0x10079d2
 1007995:	mov    QWORD PTR [rsp+0x50],rdi
 100799a:	nop    WORD PTR [rax+rax*1+0x0]
 10079a0:	test   ebx,ebx
 10079a2:	jne    0x10079cd
 10079a4:	mov    rcx,QWORD PTR [r14+0x8]
 10079a8:	lea    edx,[rbx+0x64]
 10079ab:	call   QWORD PTR [rip+0xffffffffffff9907]        # 0x10012b8
 10079b1:	test   eax,eax
 10079b3:	je     0x10079be
 10079b5:	cmp    eax,0x102
 10079ba:	je     0x10079fd
 10079bc:	xor    ebp,ebp
 10079be:	mov    ebx,0x1
 10079c3:	mov    ecx,r15d
 10079c6:	sub    ecx,esi
 10079c8:	cmp    ecx,r12d
 10079cb:	jb     0x10079a0
 10079cd:	mov    rdi,QWORD PTR [rsp+0x50]
 10079d2:	mov    rcx,QWORD PTR [r14+0x8]
 10079d6:	lea    rdx,[rsp+0x58]
 10079db:	mov    DWORD PTR [rsp+0x58],0x0
 10079e3:	call   QWORD PTR [rip+0xffffffffffff98f7]        # 0x10012e0
 10079e9:	mov    rbx,QWORD PTR [rsp+0x60]
 10079ee:	mov    eax,ebp
 10079f0:	add    rsp,0x20
 10079f4:	pop    r15
 10079f6:	pop    r14
 10079f8:	pop    r12
 10079fa:	pop    rsi
 10079fb:	pop    rbp
 10079fc:	ret    
 10079fd:	mov    rcx,QWORD PTR [r14+0x8]
 1007a01:	add    r15d,0x64
 1007a05:	call   QWORD PTR [rip+0xffffffffffff98bd]        # 0x10012c8
 1007a0b:	mov    edi,eax
 1007a0d:	cmp    eax,0xffffffff
 1007a10:	je     0x10079c3
 1007a12:	mov    rcx,QWORD PTR [r14+0x8]
 1007a16:	call   QWORD PTR [rip+0xffffffffffff98a4]        # 0x10012c0
 1007a1c:	cmp    eax,0xffffffff
 1007a1f:	jne    0x1007a28
 1007a21:	mov    ebx,0x1
 1007a26:	xor    ebp,ebp
 1007a28:	cmp    edi,0x2
 1007a2b:	jbe    0x10079c3
 1007a2d:	add    esi,0x64
 1007a30:	jmp    0x10079c3
 1007a32:	int3   
 1007a33:	int3   
 1007a34:	int3   
 1007a35:	int3   
 1007a36:	int3   
 1007a37:	int3   
 1007a38:	int3   
 1007a39:	int3   
 1007a3a:	int3   
 1007a3b:	int3   
 1007a3c:	int3   
 1007a3d:	int3   
 1007a3e:	int3   
 1007a3f:	int3   
 1007a40:	rex push rbp
 1007a42:	push   r12
 1007a44:	push   r15
 1007a46:	sub    rsp,0x2a0
 1007a4d:	mov    rax,QWORD PTR [rip+0x1378c]        # 0x101b1e0
 1007a54:	xor    rax,rsp
 1007a57:	mov    QWORD PTR [rsp+0x270],rax
 1007a5f:	mov    r15,rdx
 1007a62:	mov    r12,r8
 1007a65:	lea    r9,[rsp+0x20]
 1007a6a:	lea    rdx,[rsp+0x28]
 1007a6f:	mov    r8d,0x8
 1007a75:	mov    rbp,rcx
 1007a78:	call   0x100e5b8
 1007a7d:	test   eax,eax
 1007a7f:	jne    0x1007a88
 1007a81:	xor    eax,eax
 1007a83:	jmp    0x1007c0d
 1007a88:	mov    ecx,DWORD PTR [rsp+0x20]
 1007a8c:	mov    QWORD PTR [rsp+0x298],rbx
 1007a94:	mov    QWORD PTR [rsp+0x290],rsi
 1007a9c:	shr    rcx,0x3
 1007aa0:	mov    eax,0x8
 1007aa5:	mov    QWORD PTR [rsp+0x288],rdi
 1007aad:	mov    QWORD PTR [rsp+0x280],r14
 1007ab5:	mul    rcx
 1007ab8:	mov    rcx,0xffffffffffffffff
 1007abf:	cmovo  rax,rcx
 1007ac3:	mov    rcx,rax
 1007ac6:	call   0x100dcde
 1007acb:	mov    r8d,DWORD PTR [rsp+0x20]
 1007ad0:	lea    r9,[rsp+0x20]
 1007ad5:	mov    rdx,rax
 1007ad8:	mov    rcx,rbp
 1007adb:	mov    r14,rax
 1007ade:	call   0x100e5b8
 1007ae3:	test   eax,eax
 1007ae5:	je     0x1007bcf
 1007aeb:	xor    esi,esi
 1007aed:	test   DWORD PTR [rsp+0x20],0xfffffff8
 1007af5:	jbe    0x1007bd9
 1007afb:	mov    rdi,r14
 1007afe:	xchg   ax,ax
 1007b00:	mov    rdx,QWORD PTR [rdi]
 1007b03:	lea    r8,[rsp+0x48]
 1007b08:	mov    r9d,0x18
 1007b0e:	mov    rcx,rbp
 1007b11:	call   0x100e5d0
 1007b16:	test   eax,eax
 1007b18:	je     0x1007ba1
 1007b1e:	mov    rdx,QWORD PTR [rdi]
 1007b21:	lea    r8,[rsp+0x60]
 1007b26:	mov    r9d,0x104
 1007b2c:	mov    rcx,rbp
 1007b2f:	call   0x100e5c4
 1007b34:	test   eax,eax
 1007b36:	je     0x1007ba1
 1007b38:	xor    edx,edx
 1007b3a:	lea    rcx,[rsp+0x60]
 1007b3f:	lea    r8d,[rdx+0x1]
 1007b43:	call   QWORD PTR [rip+0xffffffffffff974f]        # 0x1001298
 1007b49:	mov    rbx,rax
 1007b4c:	test   rax,rax
 1007b4f:	jne    0x1007b58
 1007b51:	mov    ecx,0xa0
 1007b56:	jmp    0x1007ba6
 1007b58:	call   QWORD PTR [rip+0xffffffffffff9792]        # 0x10012f0
 1007b5e:	lea    r8,[rsp+0x30]
 1007b63:	mov    r9d,0x18
 1007b69:	mov    rcx,rax
 1007b6c:	mov    rdx,rbx
 1007b6f:	call   0x100e5d0
 1007b74:	test   eax,eax
 1007b76:	je     0x1007b96
 1007b78:	mov    rax,QWORD PTR [rsp+0x30]
 1007b7d:	mov    rdx,r12
 1007b80:	mov    rcx,rbx
 1007b83:	sub    rax,QWORD PTR [rsp+0x48]
 1007b88:	mov    QWORD PTR [r15],rax
 1007b8b:	call   QWORD PTR [rip+0xffffffffffff97f7]        # 0x1001388
 1007b91:	test   rax,rax
 1007b94:	jne    0x1007bc2
 1007b96:	mov    rcx,rbx
 1007b99:	call   QWORD PTR [rip+0xffffffffffff9779]        # 0x1001318
 1007b9f:	jmp    0x1007bab
 1007ba1:	mov    ecx,0x9f
 1007ba6:	call   0x100e600
 1007bab:	mov    eax,DWORD PTR [rsp+0x20]
 1007baf:	inc    esi
 1007bb1:	add    rdi,0x8
 1007bb5:	shr    eax,0x3
 1007bb8:	cmp    esi,eax
 1007bba:	jb     0x1007b00
 1007bc0:	jmp    0x1007bd9
 1007bc2:	mov    rcx,r14
 1007bc5:	call   0x100da30
 1007bca:	mov    rax,rbx
 1007bcd:	jmp    0x1007bed
 1007bcf:	mov    ecx,0xa1
 1007bd4:	call   0x100e600
 1007bd9:	mov    rcx,r14
 1007bdc:	call   0x100da30
 1007be1:	mov    ecx,0xa2
 1007be6:	call   0x100e600
 1007beb:	xor    eax,eax
 1007bed:	mov    rdi,QWORD PTR [rsp+0x288]
 1007bf5:	mov    rsi,QWORD PTR [rsp+0x290]
 1007bfd:	mov    rbx,QWORD PTR [rsp+0x298]
 1007c05:	mov    r14,QWORD PTR [rsp+0x280]
 1007c0d:	mov    rcx,QWORD PTR [rsp+0x270]
 1007c15:	xor    rcx,rsp
 1007c18:	call   0x100daf0
 1007c1d:	add    rsp,0x2a0
 1007c24:	pop    r15
 1007c26:	pop    r12
 1007c28:	pop    rbp
 1007c29:	ret    
 1007c2a:	int3   
 1007c2b:	int3   
 1007c2c:	int3   
 1007c2d:	int3   
 1007c2e:	int3   
 1007c2f:	int3   
 1007c30:	sub    rsp,0x28
 1007c34:	call   QWORD PTR [rip+0xffffffffffff98de]        # 0x1001518
 1007c3a:	test   eax,eax
 1007c3c:	je     0x1007c73
 1007c3e:	cmp    eax,0xc
 1007c41:	je     0x1007c68
 1007c43:	cmp    eax,0x16
 1007c46:	je     0x1007c5d
 1007c48:	cmp    eax,0x22
 1007c4b:	je     0x1007c5d
 1007c4d:	cmp    eax,0x50
 1007c50:	je     0x1007c73
 1007c52:	mov    ecx,0x80004005
 1007c57:	call   0x1004f80
 1007c5c:	int3   
 1007c5d:	mov    ecx,0x80070057
 1007c62:	call   0x1004f80
 1007c67:	int3   
 1007c68:	mov    ecx,0x8007000e
 1007c6d:	call   0x1004f80
 1007c72:	int3   
 1007c73:	add    rsp,0x28
 1007c77:	ret    
 1007c78:	int3   
 1007c79:	int3   
 1007c7a:	int3   
 1007c7b:	int3   
 1007c7c:	int3   
 1007c7d:	int3   
 1007c7e:	int3   
 1007c7f:	int3   
 1007c80:	rex push rbx
 1007c82:	push   rbp
 1007c83:	push   rdi
 1007c84:	sub    rsp,0x20
 1007c88:	movsxd rbx,r8d
 1007c8b:	mov    rbp,rdx
 1007c8e:	mov    rdi,rcx
 1007c91:	test   rdx,rdx
 1007c94:	je     0x1007d99
 1007c9a:	mov    rcx,QWORD PTR [rcx]
 1007c9d:	test   rcx,rcx
 1007ca0:	je     0x1007cab
 1007ca2:	test   r8d,r8d
 1007ca5:	je     0x1007d99
 1007cab:	test   r8d,r8d
 1007cae:	jns    0x1007cbd
 1007cb0:	mov    eax,0x80070057
 1007cb5:	add    rsp,0x20
 1007cb9:	pop    rdi
 1007cba:	pop    rbp
 1007cbb:	pop    rbx
 1007cbc:	ret    
 1007cbd:	call   QWORD PTR [rip+0xffffffffffff991d]        # 0x10015e0
 1007cc3:	mov    r8d,0xffffffff
 1007cc9:	mov    ecx,r8d
 1007ccc:	sub    ecx,eax
 1007cce:	cmp    ecx,ebx
 1007cd0:	jb     0x1007d8c
 1007cd6:	lea    edx,[rax+rbx*1]
 1007cd9:	mov    QWORD PTR [rsp+0x48],r14
 1007cde:	lea    r14,[rdx+rdx*1]
 1007ce2:	cmp    r14,r8
 1007ce5:	jbe    0x1007cf9
 1007ce7:	mov    eax,0x80070216
 1007cec:	mov    r14,QWORD PTR [rsp+0x48]
 1007cf1:	add    rsp,0x20
 1007cf5:	pop    rdi
 1007cf6:	pop    rbp
 1007cf7:	pop    rbx
 1007cf8:	ret    
 1007cf9:	mov    eax,eax
 1007cfb:	mov    QWORD PTR [rsp+0x50],r15
 1007d00:	lea    r15,[rax+rax*1]
 1007d04:	cmp    r15,r8
 1007d07:	jbe    0x1007d10
 1007d09:	mov    eax,0x80070216
 1007d0e:	jmp    0x1007d2f
 1007d10:	xor    ecx,ecx
 1007d12:	mov    QWORD PTR [rsp+0x40],rsi
 1007d17:	call   QWORD PTR [rip+0xffffffffffff98db]        # 0x10015f8
 1007d1d:	mov    rsi,rax
 1007d20:	test   rax,rax
 1007d23:	jne    0x1007d41
 1007d25:	mov    eax,0x8007000e
 1007d2a:	mov    rsi,QWORD PTR [rsp+0x40]
 1007d2f:	mov    r15,QWORD PTR [rsp+0x50]
 1007d34:	mov    r14,QWORD PTR [rsp+0x48]
 1007d39:	add    rsp,0x20
 1007d3d:	pop    rdi
 1007d3e:	pop    rbp
 1007d3f:	pop    rbx
 1007d40:	ret    
 1007d41:	mov    rcx,QWORD PTR [rdi]
 1007d44:	call   QWORD PTR [rip+0xffffffffffff9896]        # 0x10015e0
 1007d4a:	test   eax,eax
 1007d4c:	je     0x1007d5f
 1007d4e:	mov    r8,QWORD PTR [rdi]
 1007d51:	mov    r9d,r15d
 1007d54:	mov    edx,r14d
 1007d57:	mov    rcx,rsi
 1007d5a:	call   0x1007c30
 1007d5f:	mov    rdx,rbx
 1007d62:	lea    rcx,[r15+rsi*1]
 1007d66:	mov    r8,rbp
 1007d69:	add    rdx,rdx
 1007d6c:	mov    r9,rdx
 1007d6f:	call   0x1007c30
 1007d74:	xor    r11d,r11d
 1007d77:	mov    WORD PTR [r14+rsi*1],r11w
 1007d7c:	mov    rcx,QWORD PTR [rdi]
 1007d7f:	call   QWORD PTR [rip+0xffffffffffff9853]        # 0x10015d8
 1007d85:	mov    QWORD PTR [rdi],rsi
 1007d88:	xor    eax,eax
 1007d8a:	jmp    0x1007d2a
 1007d8c:	mov    eax,0x80070216
 1007d91:	add    rsp,0x20
 1007d95:	pop    rdi
 1007d96:	pop    rbp
 1007d97:	pop    rbx
 1007d98:	ret    
 1007d99:	xor    eax,eax
 1007d9b:	add    rsp,0x20
 1007d9f:	pop    rdi
 1007da0:	pop    rbp
 1007da1:	pop    rbx
 1007da2:	ret    
 1007da3:	int3   
 1007da4:	int3   
 1007da5:	int3   
 1007da6:	int3   
 1007da7:	int3   
 1007da8:	int3   
 1007da9:	int3   
 1007daa:	int3   
 1007dab:	int3   
 1007dac:	int3   
 1007dad:	int3   
 1007dae:	int3   
 1007daf:	int3   
 1007db0:	ret    0x0
 1007db3:	int3   
 1007db4:	int3   
 1007db5:	int3   
 1007db6:	int3   
 1007db7:	int3   
 1007db8:	int3   
 1007db9:	int3   
 1007dba:	int3   
 1007dbb:	int3   
 1007dbc:	int3   
 1007dbd:	int3   
 1007dbe:	int3   
 1007dbf:	int3   
 1007dc0:	mov    QWORD PTR [rsp+0x10],rbx
 1007dc5:	mov    QWORD PTR [rsp+0x18],rbp
 1007dca:	mov    QWORD PTR [rsp+0x20],rsi
 1007dcf:	push   r14
 1007dd1:	sub    rsp,0x20
 1007dd5:	mov    rax,QWORD PTR [rdx+0x10]
 1007dd9:	mov    rsi,r9
 1007ddc:	mov    rbp,r8
 1007ddf:	mov    r14,rdx
 1007de2:	mov    rbx,rcx
 1007de5:	cmp    rax,r8
 1007de8:	jae    0x1007df8
 1007dea:	lea    rcx,[rip+0xffffffffffff9d3f]        # 0x1001b30
 1007df1:	call   QWORD PTR [rip+0xffffffffffff95c9]        # 0x10013c0
 1007df7:	int3   
 1007df8:	sub    rax,r8
 1007dfb:	mov    r8,QWORD PTR [rcx+0x10]
 1007dff:	cmp    rax,r9
 1007e02:	cmovb  rsi,rax
 1007e06:	or     rax,0xffffffffffffffff
 1007e0a:	sub    rax,r8
 1007e0d:	cmp    rax,rsi
 1007e10:	ja     0x1007e20
 1007e12:	lea    rcx,[rip+0xffffffffffff9d2f]        # 0x1001b48
 1007e19:	call   QWORD PTR [rip+0xffffffffffff95a9]        # 0x10013c8
 1007e1f:	int3   
 1007e20:	mov    QWORD PTR [rsp+0x30],rdi
 1007e25:	test   rsi,rsi
 1007e28:	je     0x1007ed0
 1007e2e:	lea    rdi,[r8+rsi*1]
 1007e32:	movabs rax,0x7ffffffffffffffe
 1007e3c:	cmp    rdi,rax
 1007e3f:	jbe    0x1007e4f
 1007e41:	lea    rcx,[rip+0xffffffffffff9d00]        # 0x1001b48
 1007e48:	call   QWORD PTR [rip+0xffffffffffff957a]        # 0x10013c8
 1007e4e:	int3   
 1007e4f:	mov    rcx,QWORD PTR [rcx+0x18]
 1007e53:	cmp    rcx,rdi
 1007e56:	jae    0x1007e7e
 1007e58:	mov    rdx,rdi
 1007e5b:	mov    rcx,rbx
 1007e5e:	call   0x10063e0
 1007e63:	test   rdi,rdi
 1007e66:	je     0x1007ed0
 1007e68:	cmp    QWORD PTR [r14+0x18],0x8
 1007e6d:	jb     0x1007e72
 1007e6f:	mov    r14,QWORD PTR [r14]
 1007e72:	cmp    QWORD PTR [rbx+0x18],0x8
 1007e77:	jb     0x1007e9f
 1007e79:	mov    rcx,QWORD PTR [rbx]
 1007e7c:	jmp    0x1007ea2
 1007e7e:	test   rdi,rdi
 1007e81:	jne    0x1007e68
 1007e83:	xor    eax,eax
 1007e85:	mov    QWORD PTR [rbx+0x10],rax
 1007e89:	cmp    rcx,0x8
 1007e8d:	jb     0x1007e97
 1007e8f:	mov    rcx,QWORD PTR [rbx]
 1007e92:	mov    WORD PTR [rcx],ax
 1007e95:	jmp    0x1007ed0
 1007e97:	mov    rcx,rbx
 1007e9a:	mov    WORD PTR [rbx],ax
 1007e9d:	jmp    0x1007ed0
 1007e9f:	mov    rcx,rbx
 1007ea2:	mov    rax,QWORD PTR [rbx+0x10]
 1007ea6:	lea    r8,[rsi+rsi*1]
 1007eaa:	lea    rdx,[r14+rbp*2]
 1007eae:	lea    rcx,[rcx+rax*2]
 1007eb2:	call   0x100dd0e
 1007eb7:	cmp    QWORD PTR [rbx+0x18],0x8
 1007ebc:	mov    QWORD PTR [rbx+0x10],rdi
 1007ec0:	jb     0x1007ec7
 1007ec2:	mov    rcx,QWORD PTR [rbx]
 1007ec5:	jmp    0x1007eca
 1007ec7:	mov    rcx,rbx
 1007eca:	xor    eax,eax
 1007ecc:	mov    WORD PTR [rcx+rdi*2],ax
 1007ed0:	mov    rdi,QWORD PTR [rsp+0x30]
 1007ed5:	mov    rbp,QWORD PTR [rsp+0x40]
 1007eda:	mov    rsi,QWORD PTR [rsp+0x48]
 1007edf:	mov    rax,rbx
 1007ee2:	mov    rbx,QWORD PTR [rsp+0x38]
 1007ee7:	add    rsp,0x20
 1007eeb:	pop    r14
 1007eed:	ret    
 1007eee:	int3   
 1007eef:	int3   
 1007ef0:	int3   
 1007ef1:	int3   
 1007ef2:	int3   
 1007ef3:	int3   
 1007ef4:	int3   
 1007ef5:	int3   
 1007ef6:	int3   
 1007ef7:	int3   
 1007ef8:	int3   
 1007ef9:	int3   
 1007efa:	int3   
 1007efb:	int3   
 1007efc:	int3   
 1007efd:	int3   
 1007efe:	int3   
 1007eff:	int3   
 1007f00:	mov    QWORD PTR [rsp+0x10],rbx
 1007f05:	mov    QWORD PTR [rsp+0x18],rsi
 1007f0a:	push   r14
 1007f0c:	sub    rsp,0x20
 1007f10:	mov    r14,r8
 1007f13:	mov    rsi,rdx
 1007f16:	mov    rbx,rcx
 1007f19:	test   rdx,rdx
 1007f1c:	je     0x1007f80
 1007f1e:	mov    rdx,QWORD PTR [rcx+0x18]
 1007f22:	cmp    rdx,0x8
 1007f26:	jb     0x1007f2d
 1007f28:	mov    rax,QWORD PTR [rcx]
 1007f2b:	jmp    0x1007f30
 1007f2d:	mov    rax,rcx
 1007f30:	cmp    rsi,rax
 1007f33:	jb     0x1007f80
 1007f35:	cmp    rdx,0x8
 1007f39:	jb     0x1007f3e
 1007f3b:	mov    rcx,QWORD PTR [rcx]
 1007f3e:	mov    rax,QWORD PTR [rbx+0x10]
 1007f42:	lea    rcx,[rcx+rax*2]
 1007f46:	cmp    rcx,rsi
 1007f49:	jbe    0x1007f80
 1007f4b:	cmp    rdx,0x8
 1007f4f:	jb     0x1007f56
 1007f51:	mov    rax,QWORD PTR [rbx]
 1007f54:	jmp    0x1007f59
 1007f56:	mov    rax,rbx
 1007f59:	sub    rsi,rax
 1007f5c:	mov    r9,r8
 1007f5f:	mov    rdx,rbx
 1007f62:	sar    rsi,1
 1007f65:	mov    rcx,rbx
 1007f68:	mov    r8,rsi
 1007f6b:	mov    rbx,QWORD PTR [rsp+0x38]
 1007f70:	mov    rsi,QWORD PTR [rsp+0x40]
 1007f75:	add    rsp,0x20
 1007f79:	pop    r14
 1007f7b:	jmp    0x1007dc0
 1007f80:	mov    r8,QWORD PTR [rbx+0x10]
 1007f84:	or     rax,0xffffffffffffffff
 1007f88:	sub    rax,r8
 1007f8b:	cmp    rax,r14
 1007f8e:	ja     0x1007f9e
 1007f90:	lea    rcx,[rip+0xffffffffffff9bb1]        # 0x1001b48
 1007f97:	call   QWORD PTR [rip+0xffffffffffff942b]        # 0x10013c8
 1007f9d:	int3   
 1007f9e:	mov    QWORD PTR [rsp+0x30],rdi
 1007fa3:	test   r14,r14
 1007fa6:	je     0x1008043
 1007fac:	lea    rdi,[r8+r14*1]
 1007fb0:	movabs rax,0x7ffffffffffffffe
 1007fba:	cmp    rdi,rax
 1007fbd:	jbe    0x1007fcd
 1007fbf:	lea    rcx,[rip+0xffffffffffff9b82]        # 0x1001b48
 1007fc6:	call   QWORD PTR [rip+0xffffffffffff93fc]        # 0x10013c8
 1007fcc:	int3   
 1007fcd:	mov    rcx,QWORD PTR [rbx+0x18]
 1007fd1:	cmp    rcx,rdi
 1007fd4:	jae    0x1007ff2
 1007fd6:	mov    rdx,rdi
 1007fd9:	mov    rcx,rbx
 1007fdc:	call   0x10063e0
 1007fe1:	test   rdi,rdi
 1007fe4:	je     0x1008043
 1007fe6:	cmp    QWORD PTR [rbx+0x18],0x8
 1007feb:	jb     0x1008013
 1007fed:	mov    rcx,QWORD PTR [rbx]
 1007ff0:	jmp    0x1008016
 1007ff2:	test   rdi,rdi
 1007ff5:	jne    0x1007fe6
 1007ff7:	xor    eax,eax
 1007ff9:	mov    QWORD PTR [rbx+0x10],rax
 1007ffd:	cmp    rcx,0x8
 1008001:	jb     0x100800b
 1008003:	mov    rcx,QWORD PTR [rbx]
 1008006:	mov    WORD PTR [rcx],ax
 1008009:	jmp    0x1008043
 100800b:	mov    rcx,rbx
 100800e:	mov    WORD PTR [rbx],ax
 1008011:	jmp    0x1008043
 1008013:	mov    rcx,rbx
 1008016:	mov    rax,QWORD PTR [rbx+0x10]
 100801a:	lea    r8,[r14+r14*1]
 100801e:	mov    rdx,rsi
 1008021:	lea    rcx,[rcx+rax*2]
 1008025:	call   0x100dd0e
 100802a:	cmp    QWORD PTR [rbx+0x18],0x8
 100802f:	mov    QWORD PTR [rbx+0x10],rdi
 1008033:	jb     0x100803a
 1008035:	mov    rcx,QWORD PTR [rbx]
 1008038:	jmp    0x100803d
 100803a:	mov    rcx,rbx
 100803d:	xor    eax,eax
 100803f:	mov    WORD PTR [rcx+rdi*2],ax
 1008043:	mov    rdi,QWORD PTR [rsp+0x30]
 1008048:	mov    rsi,QWORD PTR [rsp+0x40]
 100804d:	mov    rax,rbx
 1008050:	mov    rbx,QWORD PTR [rsp+0x38]
 1008055:	add    rsp,0x20
 1008059:	pop    r14
 100805b:	ret    
 100805c:	int3   
 100805d:	int3   
 100805e:	int3   
 100805f:	int3   
 1008060:	int3   
 1008061:	int3   
 1008062:	int3   
 1008063:	int3   
 1008064:	int3   
 1008065:	int3   
 1008066:	int3   
 1008067:	int3   
 1008068:	int3   
 1008069:	int3   
 100806a:	int3   
 100806b:	int3   
 100806c:	int3   
 100806d:	int3   
 100806e:	int3   
 100806f:	int3   
 1008070:	mov    r9d,DWORD PTR [rcx+0x5c]
 1008074:	mov    r10,r8
 1008077:	test   r9d,r9d
 100807a:	je     0x10080ac
 100807c:	dec    r9d
 100807f:	je     0x10080a4
 1008081:	dec    r9d
 1008084:	je     0x1008099
 1008086:	dec    r9d
 1008089:	je     0x1008091
 100808b:	mov    eax,0x6
 1008090:	ret    
 1008091:	mov    r9b,0x1
 1008094:	jmp    0x1008560
 1008099:	mov    r8b,0x1
 100809c:	mov    rdx,r10
 100809f:	jmp    0x1008300
 10080a4:	mov    rdx,r8
 10080a7:	jmp    0x10080c0
 10080ac:	xor    r9d,r9d
 10080af:	jmp    0x1008560
 10080b4:	int3   
 10080b5:	int3   
 10080b6:	int3   
 10080b7:	int3   
 10080b8:	int3   
 10080b9:	int3   
 10080ba:	int3   
 10080bb:	int3   
 10080bc:	int3   
 10080bd:	int3   
 10080be:	int3   
 10080bf:	int3   
 10080c0:	mov    QWORD PTR [rsp+0x10],rdx
 10080c5:	push   rbp
 10080c6:	push   rdi
 10080c7:	push   r13
 10080c9:	push   r14
 10080cb:	sub    rsp,0x88
 10080d2:	mov    rdi,rcx
 10080d5:	mov    rcx,rdx
 10080d8:	mov    ebp,0x6
 10080dd:	call   QWORD PTR [rip+0xffffffffffff9505]        # 0x10015e8
 10080e3:	mov    rcx,QWORD PTR [rdi]
 10080e6:	lea    r8,[rip+0xffffffffffff9ba3]        # 0x1001c90
 10080ed:	lea    rdx,[rsp+0x58]
 10080f2:	mov    r13,rax
 10080f5:	call   QWORD PTR [rip+0xffffffffffff8f35]        # 0x1001030
 10080fb:	mov    rcx,rax
 10080fe:	mov    rax,QWORD PTR [rax]
 1008101:	mov    rdx,QWORD PTR [rcx+0x8]
 1008105:	mov    QWORD PTR [rsp+0x30],rax
 100810a:	mov    rax,QWORD PTR [rcx+0x10]
 100810e:	cmp    QWORD PTR [rdx+0x10],0x0
 1008113:	mov    QWORD PTR [rsp+0x40],rax
 1008118:	mov    rax,QWORD PTR [rcx+0x18]
 100811c:	mov    QWORD PTR [rsp+0x48],rax
 1008121:	mov    rax,QWORD PTR [rcx+0x20]
 1008125:	mov    QWORD PTR [rsp+0x50],rax
 100812a:	jne    0x1008131
 100812c:	xor    r14d,r14d
 100812f:	jmp    0x1008147
 1008131:	cmp    QWORD PTR [rdx+0x18],0x8
 1008136:	jb     0x100813b
 1008138:	mov    rdx,QWORD PTR [rdx]
 100813b:	mov    rcx,rdx
 100813e:	call   QWORD PTR [rip+0xffffffffffff94a4]        # 0x10015e8
 1008144:	mov    r14,rax
 1008147:	mov    rcx,QWORD PTR [rdi]
 100814a:	lea    r8,[rip+0xffffffffffff9b5f]        # 0x1001cb0
 1008151:	lea    rdx,[rsp+0x58]
 1008156:	mov    QWORD PTR [rsp+0xb0],rbx
 100815e:	mov    QWORD PTR [rsp+0xc8],r12
 1008166:	call   QWORD PTR [rip+0xffffffffffff8ec4]        # 0x1001030
 100816c:	mov    rdx,rax
 100816f:	mov    rax,QWORD PTR [rax]
 1008172:	mov    rcx,QWORD PTR [rdx+0x8]
 1008176:	mov    QWORD PTR [rsp+0x30],rax
 100817b:	mov    rax,QWORD PTR [rdx+0x10]
 100817f:	cmp    QWORD PTR [rcx+0x10],0x0
 1008184:	mov    QWORD PTR [rsp+0x40],rax
 1008189:	mov    rax,QWORD PTR [rdx+0x18]
 100818d:	mov    QWORD PTR [rsp+0x48],rax
 1008192:	mov    rax,QWORD PTR [rdx+0x20]
 1008196:	mov    QWORD PTR [rsp+0x50],rax
 100819b:	jne    0x10081a4
 100819d:	xor    ebx,ebx
 100819f:	xor    r12d,r12d
 10081a2:	jmp    0x1008214
 10081a4:	cmp    QWORD PTR [rcx+0x18],0x8
 10081a9:	jb     0x10081ae
 10081ab:	mov    rcx,QWORD PTR [rcx]
 10081ae:	call   QWORD PTR [rip+0xffffffffffff9434]        # 0x10015e8
 10081b4:	mov    rcx,QWORD PTR [rdi]
 10081b7:	lea    r8,[rip+0xffffffffffff9ab2]        # 0x1001c70
 10081be:	lea    rdx,[rsp+0x58]
 10081c3:	mov    r12,rax
 10081c6:	call   QWORD PTR [rip+0xffffffffffff8e64]        # 0x1001030
 10081cc:	mov    rdx,rax
 10081cf:	mov    rax,QWORD PTR [rax]
 10081d2:	mov    rcx,QWORD PTR [rdx+0x8]
 10081d6:	mov    QWORD PTR [rsp+0x30],rax
 10081db:	mov    rax,QWORD PTR [rdx+0x10]
 10081df:	cmp    QWORD PTR [rcx+0x10],0x0
 10081e4:	mov    QWORD PTR [rsp+0x40],rax
 10081e9:	mov    rax,QWORD PTR [rdx+0x18]
 10081ed:	mov    QWORD PTR [rsp+0x48],rax
 10081f2:	mov    rax,QWORD PTR [rdx+0x20]
 10081f6:	mov    QWORD PTR [rsp+0x50],rax
 10081fb:	jne    0x1008201
 10081fd:	xor    ebx,ebx
 10081ff:	jmp    0x1008214
 1008201:	cmp    QWORD PTR [rcx+0x18],0x8
 1008206:	jb     0x100820b
 1008208:	mov    rcx,QWORD PTR [rcx]
 100820b:	call   QWORD PTR [rip+0xffffffffffff93d7]        # 0x10015e8
 1008211:	mov    rbx,rax
 1008214:	mov    ecx,DWORD PTR [rdi+0x60]
 1008217:	mov    QWORD PTR [rsp+0xc0],rsi
 100821f:	mov    QWORD PTR [rsp+0x80],r15
 1008227:	dec    ecx
 1008229:	je     0x100824a
 100822b:	cmp    ecx,0x2
 100822e:	jne    0x10082bb
 1008234:	mov    r8,r14
 1008237:	mov    rdx,r13
 100823a:	mov    rcx,rdi
 100823d:	mov    r15d,0x99
 1008243:	call   0x100bda0
 1008248:	jmp    0x1008266
 100824a:	mov    r9,r12
 100824d:	mov    r8,r14
 1008250:	mov    rdx,r13
 1008253:	mov    rcx,rdi
 1008256:	mov    r15d,0x85
 100825c:	mov    QWORD PTR [rsp+0x20],rbx
 1008261:	call   0x100d480
 1008266:	mov    rcx,rbx
 1008269:	mov    esi,eax
 100826b:	call   QWORD PTR [rip+0xffffffffffff936f]        # 0x10015e0
 1008271:	mov    rdi,rbx
 1008274:	mov    ecx,eax
 1008276:	xor    eax,eax
 1008278:	add    rcx,rcx
 100827b:	rep stos BYTE PTR es:[rdi],al
 100827d:	mov    rcx,r13
 1008280:	call   QWORD PTR [rip+0xffffffffffff9352]        # 0x10015d8
 1008286:	mov    rcx,r14
 1008289:	call   QWORD PTR [rip+0xffffffffffff9349]        # 0x10015d8
 100828f:	mov    rcx,r12
 1008292:	call   QWORD PTR [rip+0xffffffffffff9340]        # 0x10015d8
 1008298:	mov    rcx,rbx
 100829b:	call   QWORD PTR [rip+0xffffffffffff9337]        # 0x10015d8
 10082a1:	test   esi,esi
 10082a3:	jns    0x10082b9
 10082a5:	mov    r8,QWORD PTR [rsp+0xb8]
 10082ad:	mov    edx,esi
 10082af:	mov    ecx,r15d
 10082b2:	call   0x100e600
 10082b7:	jmp    0x10082bb
 10082b9:	xor    ebp,ebp
 10082bb:	mov    r15,QWORD PTR [rsp+0x80]
 10082c3:	mov    r12,QWORD PTR [rsp+0xc8]
 10082cb:	mov    rsi,QWORD PTR [rsp+0xc0]
 10082d3:	mov    rbx,QWORD PTR [rsp+0xb0]
 10082db:	mov    eax,ebp
 10082dd:	add    rsp,0x88
 10082e4:	pop    r14
 10082e6:	pop    r13
 10082e8:	pop    rdi
 10082e9:	pop    rbp
 10082ea:	ret    
 10082eb:	int3   
 10082ec:	int3   
 10082ed:	int3   
 10082ee:	int3   
 10082ef:	int3   
 10082f0:	int3   
 10082f1:	int3   
 10082f2:	int3   
 10082f3:	int3   
 10082f4:	int3   
 10082f5:	int3   
 10082f6:	int3   
 10082f7:	int3   
 10082f8:	int3   
 10082f9:	int3   
 10082fa:	int3   
 10082fb:	int3   
 10082fc:	int3   
 10082fd:	int3   
 10082fe:	int3   
 10082ff:	int3   
 1008300:	mov    QWORD PTR [rsp+0x10],rdx
 1008305:	push   rbp
 1008306:	push   rsi
 1008307:	push   rdi
 1008308:	push   r13
 100830a:	push   r14
 100830c:	sub    rsp,0x80
 1008313:	mov    rdi,rcx
 1008316:	mov    rcx,rdx
 1008319:	movzx  esi,r8b
 100831d:	mov    ebp,0x6
 1008322:	call   QWORD PTR [rip+0xffffffffffff92c0]        # 0x10015e8
 1008328:	mov    rcx,QWORD PTR [rdi]
 100832b:	mov    r13,rax
 100832e:	lea    rax,[rip+0xffffffffffff995b]        # 0x1001c90
 1008335:	lea    r8,[rip+0xffffffffffff9904]        # 0x1001c40
 100833c:	test   sil,sil
 100833f:	lea    rdx,[rsp+0x58]
 1008344:	cmovne r8,rax
 1008348:	call   QWORD PTR [rip+0xffffffffffff8ce2]        # 0x1001030
 100834e:	mov    rdx,rax
 1008351:	mov    rax,QWORD PTR [rax]
 1008354:	mov    rcx,QWORD PTR [rdx+0x8]
 1008358:	mov    QWORD PTR [rsp+0x30],rax
 100835d:	mov    rax,QWORD PTR [rdx+0x10]
 1008361:	cmp    QWORD PTR [rcx+0x10],0x0
 1008366:	mov    QWORD PTR [rsp+0x40],rax
 100836b:	mov    rax,QWORD PTR [rdx+0x18]
 100836f:	mov    QWORD PTR [rsp+0x48],rax
 1008374:	mov    rax,QWORD PTR [rdx+0x20]
 1008378:	mov    QWORD PTR [rsp+0x50],rax
 100837d:	jne    0x1008384
 100837f:	xor    r14d,r14d
 1008382:	jmp    0x1008397
 1008384:	cmp    QWORD PTR [rcx+0x18],0x8
 1008389:	jb     0x100838e
 100838b:	mov    rcx,QWORD PTR [rcx]
 100838e:	call   QWORD PTR [rip+0xffffffffffff9254]        # 0x10015e8
 1008394:	mov    r14,rax
 1008397:	mov    rcx,QWORD PTR [rdi]
 100839a:	lea    rax,[rip+0xffffffffffff990f]        # 0x1001cb0
 10083a1:	lea    r8,[rip+0xffffffffffff98b0]        # 0x1001c58
 10083a8:	test   sil,sil
 10083ab:	lea    rdx,[rsp+0x58]
 10083b0:	mov    QWORD PTR [rsp+0xb0],rbx
 10083b8:	cmovne r8,rax
 10083bc:	mov    QWORD PTR [rsp+0xc0],r12
 10083c4:	call   QWORD PTR [rip+0xffffffffffff8c66]        # 0x1001030
 10083ca:	mov    rdx,rax
 10083cd:	mov    rax,QWORD PTR [rax]
 10083d0:	mov    rcx,QWORD PTR [rdx+0x8]
 10083d4:	mov    QWORD PTR [rsp+0x30],rax
 10083d9:	mov    rax,QWORD PTR [rdx+0x10]
 10083dd:	cmp    QWORD PTR [rcx+0x10],0x0
 10083e2:	mov    QWORD PTR [rsp+0x40],rax
 10083e7:	mov    rax,QWORD PTR [rdx+0x18]
 10083eb:	mov    QWORD PTR [rsp+0x48],rax
 10083f0:	mov    rax,QWORD PTR [rdx+0x20]
 10083f4:	mov    QWORD PTR [rsp+0x50],rax
 10083f9:	jne    0x1008402
 10083fb:	xor    ebx,ebx
 10083fd:	xor    r12d,r12d
 1008400:	jmp    0x1008480
 1008402:	cmp    QWORD PTR [rcx+0x18],0x8
 1008407:	jb     0x100840c
 1008409:	mov    rcx,QWORD PTR [rcx]
 100840c:	call   QWORD PTR [rip+0xffffffffffff91d6]        # 0x10015e8
 1008412:	mov    rcx,QWORD PTR [rdi]
 1008415:	lea    r8,[rip+0xffffffffffff9804]        # 0x1001c20
 100841c:	mov    r12,rax
 100841f:	lea    rax,[rip+0xffffffffffff984a]        # 0x1001c70
 1008426:	test   sil,sil
 1008429:	lea    rdx,[rsp+0x58]
 100842e:	cmovne r8,rax
 1008432:	call   QWORD PTR [rip+0xffffffffffff8bf8]        # 0x1001030
 1008438:	mov    rdx,rax
 100843b:	mov    rax,QWORD PTR [rax]
 100843e:	mov    rcx,QWORD PTR [rdx+0x8]
 1008442:	mov    QWORD PTR [rsp+0x30],rax
 1008447:	mov    rax,QWORD PTR [rdx+0x10]
 100844b:	cmp    QWORD PTR [rcx+0x10],0x0
 1008450:	mov    QWORD PTR [rsp+0x40],rax
 1008455:	mov    rax,QWORD PTR [rdx+0x18]
 1008459:	mov    QWORD PTR [rsp+0x48],rax
 100845e:	mov    rax,QWORD PTR [rdx+0x20]
 1008462:	mov    QWORD PTR [rsp+0x50],rax
 1008467:	jne    0x100846d
 1008469:	xor    ebx,ebx
 100846b:	jmp    0x1008480
 100846d:	cmp    QWORD PTR [rcx+0x18],0x8
 1008472:	jb     0x1008477
 1008474:	mov    rcx,QWORD PTR [rcx]
 1008477:	call   QWORD PTR [rip+0xffffffffffff916b]        # 0x10015e8
 100847d:	mov    rbx,rax
 1008480:	test   sil,sil
 1008483:	je     0x100848a
 1008485:	mov    ecx,DWORD PTR [rdi+0x60]
 1008488:	jmp    0x100848d
 100848a:	mov    ecx,DWORD PTR [rdi+0x64]
 100848d:	mov    QWORD PTR [rsp+0xc8],r15
 1008495:	dec    ecx
 1008497:	je     0x10084b8
 1008499:	cmp    ecx,0x2
 100849c:	jne    0x100852f
 10084a2:	mov    r8,r14
 10084a5:	mov    rdx,r13
 10084a8:	mov    rcx,rdi
 10084ab:	mov    r15d,0x9a
 10084b1:	call   0x100b9e0
 10084b6:	jmp    0x10084d4
 10084b8:	mov    r9,r12
 10084bb:	mov    r8,r14
 10084be:	mov    rdx,r13
 10084c1:	mov    rcx,rdi
 10084c4:	mov    r15d,0x84
 10084ca:	mov    QWORD PTR [rsp+0x20],rbx
 10084cf:	call   0x100d3b0
 10084d4:	mov    rcx,rbx
 10084d7:	mov    esi,eax
 10084d9:	call   QWORD PTR [rip+0xffffffffffff9101]        # 0x10015e0
 10084df:	mov    rdi,rbx
 10084e2:	mov    ecx,eax
 10084e4:	xor    eax,eax
 10084e6:	add    rcx,rcx
 10084e9:	rep stos BYTE PTR es:[rdi],al
 10084eb:	mov    rcx,r13
 10084ee:	call   QWORD PTR [rip+0xffffffffffff90e4]        # 0x10015d8
 10084f4:	mov    rcx,r14
 10084f7:	call   QWORD PTR [rip+0xffffffffffff90db]        # 0x10015d8
 10084fd:	mov    rcx,r12
 1008500:	call   QWORD PTR [rip+0xffffffffffff90d2]        # 0x10015d8
 1008506:	mov    rcx,rbx
 1008509:	call   QWORD PTR [rip+0xffffffffffff90c9]        # 0x10015d8
 100850f:	test   esi,esi
 1008511:	jns    0x1008527
 1008513:	mov    r8,QWORD PTR [rsp+0xb8]
 100851b:	mov    edx,esi
 100851d:	mov    ecx,r15d
 1008520:	call   0x100e600
 1008525:	jmp    0x100852f
 1008527:	xor    ebp,ebp
 1008529:	test   esi,esi
 100852b:	setne  bpl
 100852f:	mov    r15,QWORD PTR [rsp+0xc8]
 1008537:	mov    r12,QWORD PTR [rsp+0xc0]
 100853f:	mov    rbx,QWORD PTR [rsp+0xb0]
 1008547:	mov    eax,ebp
 1008549:	add    rsp,0x80
 1008550:	pop    r14
 1008552:	pop    r13
 1008554:	pop    rdi
 1008555:	pop    rsi
 1008556:	pop    rbp
 1008557:	ret    
 1008558:	int3   
 1008559:	int3   
 100855a:	int3   
 100855b:	int3   
 100855c:	int3   
 100855d:	int3   
 100855e:	int3   
 100855f:	int3   
 1008560:	mov    QWORD PTR [rsp+0x8],rbx
 1008565:	mov    QWORD PTR [rsp+0x10],rbp
 100856a:	mov    QWORD PTR [rsp+0x18],rsi
 100856f:	mov    QWORD PTR [rsp+0x20],rdi
 1008574:	push   r14
 1008576:	sub    rsp,0x50
 100857a:	mov    rdi,rcx
 100857d:	lea    rcx,[rsp+0x30]
 1008582:	movzx  r14d,r9b
 1008586:	mov    rbp,r8
 1008589:	mov    rbx,rdx
 100858c:	call   QWORD PTR [rip+0xffffffffffff906e]        # 0x1001600
 1008592:	mov    ecx,DWORD PTR [rdi+0x60]
 1008595:	dec    ecx
 1008597:	je     0x10085cf
 1008599:	dec    ecx
 100859b:	je     0x10085bd
 100859d:	dec    ecx
 100859f:	je     0x10085ab
 10085a1:	mov    eax,0x6
 10085a6:	jmp    0x10086b2
 10085ab:	lea    r8,[rsp+0x30]
 10085b0:	mov    rdx,rbp
 10085b3:	mov    rcx,rdi
 10085b6:	call   0x100b660
 10085bb:	jmp    0x10085df
 10085bd:	lea    r8,[rsp+0x30]
 10085c2:	mov    rdx,rbp
 10085c5:	mov    rcx,rdi
 10085c8:	call   0x1009d00
 10085cd:	jmp    0x10085df
 10085cf:	lea    r8,[rsp+0x30]
 10085d4:	mov    rdx,rbp
 10085d7:	mov    rcx,rdi
 10085da:	call   0x100a260
 10085df:	mov    esi,eax
 10085e1:	test   eax,eax
 10085e3:	jne    0x100864f
 10085e5:	mov    ecx,DWORD PTR [rdi+0x64]
 10085e8:	dec    ecx
 10085ea:	je     0x1008633
 10085ec:	dec    ecx
 10085ee:	je     0x1008610
 10085f0:	dec    ecx
 10085f2:	jne    0x1008667
 10085f4:	mov    eax,DWORD PTR [rdi+0x60]
 10085f7:	lea    r8,[rsp+0x30]
 10085fc:	mov    r9,rbp
 10085ff:	mov    rdx,rbx
 1008602:	mov    rcx,rdi
 1008605:	mov    DWORD PTR [rsp+0x20],eax
 1008609:	call   0x100b750
 100860e:	jmp    0x100864d
 1008610:	mov    rdx,rbp
 1008613:	mov    rcx,rdi
 1008616:	call   0x10086e0
 100861b:	mov    esi,eax
 100861d:	test   eax,eax
 100861f:	jne    0x100864f
 1008621:	lea    r8,[rsp+0x30]
 1008626:	mov    rdx,rbx
 1008629:	mov    rcx,rdi
 100862c:	call   0x1009eb0
 1008631:	jmp    0x100864d
 1008633:	mov    eax,DWORD PTR [rdi+0x60]
 1008636:	lea    r8,[rsp+0x30]
 100863b:	mov    r9,rbp
 100863e:	mov    rdx,rbx
 1008641:	mov    rcx,rdi
 1008644:	mov    DWORD PTR [rsp+0x20],eax
 1008648:	call   0x100a640
 100864d:	mov    esi,eax
 100864f:	test   r14b,r14b
 1008652:	je     0x10086a5
 1008654:	test   esi,esi
 1008656:	jne    0x10086a5
 1008658:	mov    ecx,DWORD PTR [rdi+0x60]
 100865b:	dec    ecx
 100865d:	je     0x1008687
 100865f:	dec    ecx
 1008661:	je     0x100866b
 1008663:	dec    ecx
 1008665:	je     0x1008687
 1008667:	xor    eax,eax
 1008669:	jmp    0x10086b2
 100866b:	mov    ebx,DWORD PTR [rdi+0x5c]
 100866e:	mov    r8,rbp
 1008671:	xor    edx,edx
 1008673:	mov    rcx,rdi
 1008676:	mov    DWORD PTR [rdi+0x5c],0x1
 100867d:	call   0x1009b10
 1008682:	mov    DWORD PTR [rdi+0x5c],ebx
 1008685:	jmp    0x1008692
 1008687:	mov    rdx,rbp
 100868a:	mov    rcx,rdi
 100868d:	call   0x10080c0
 1008692:	mov    esi,eax
 1008694:	test   eax,eax
 1008696:	je     0x10086a5
 1008698:	mov    rdx,rbp
 100869b:	mov    ecx,0x98
 10086a0:	call   0x100e600
 10086a5:	lea    rcx,[rsp+0x30]
 10086aa:	call   QWORD PTR [rip+0xffffffffffff8fa0]        # 0x1001650
 10086b0:	mov    eax,esi
 10086b2:	mov    rbx,QWORD PTR [rsp+0x60]
 10086b7:	mov    rbp,QWORD PTR [rsp+0x68]
 10086bc:	mov    rsi,QWORD PTR [rsp+0x70]
 10086c1:	mov    rdi,QWORD PTR [rsp+0x78]
 10086c6:	add    rsp,0x50
 10086ca:	pop    r14
 10086cc:	ret    
 10086cd:	int3   
 10086ce:	int3   
 10086cf:	int3   
 10086d0:	int3   
 10086d1:	int3   
 10086d2:	int3   
 10086d3:	int3   
 10086d4:	int3   
 10086d5:	int3   
 10086d6:	int3   
 10086d7:	int3   
 10086d8:	int3   
 10086d9:	int3   
 10086da:	int3   
 10086db:	int3   
 10086dc:	int3   
 10086dd:	int3   
 10086de:	int3   
 10086df:	int3   
 10086e0:	rex push rdi
 10086e2:	sub    rsp,0x20
 10086e6:	mov    r8d,DWORD PTR [rcx+0x60]
 10086ea:	lea    r9,[rsp+0x40]
 10086ef:	mov    rdi,rdx
 10086f2:	call   0x100c320
 10086f7:	test   eax,eax
 10086f9:	js     0x1008748
 10086fb:	mov    rcx,QWORD PTR [rsp+0x40]
 1008700:	lea    rdx,[rsp+0x30]
 1008705:	mov    QWORD PTR [rsp+0x38],rbx
 100870a:	mov    rax,QWORD PTR [rcx]
 100870d:	call   QWORD PTR [rax+0x1f0]
 1008713:	cmp    DWORD PTR [rsp+0x30],0x5
 1008718:	jne    0x100872e
 100871a:	mov    rdx,rdi
 100871d:	mov    ecx,0x9e
 1008722:	mov    ebx,0x1
 1008727:	call   0x100e600
 100872c:	jmp    0x1008730
 100872e:	xor    ebx,ebx
 1008730:	mov    rcx,QWORD PTR [rsp+0x40]
 1008735:	mov    rdx,QWORD PTR [rcx]
 1008738:	call   QWORD PTR [rdx+0x10]
 100873b:	mov    eax,ebx
 100873d:	mov    rbx,QWORD PTR [rsp+0x38]
 1008742:	add    rsp,0x20
 1008746:	pop    rdi
 1008747:	ret    
 1008748:	mov    eax,0x6
 100874d:	add    rsp,0x20
 1008751:	pop    rdi
 1008752:	ret    
 1008753:	int3   
 1008754:	int3   
 1008755:	int3   
 1008756:	int3   
 1008757:	int3   
 1008758:	int3   
 1008759:	int3   
 100875a:	int3   
 100875b:	int3   
 100875c:	int3   
 100875d:	int3   
 100875e:	int3   
 100875f:	int3   
 1008760:	rex push rbx
 1008762:	sub    rsp,0x20
 1008766:	mov    rax,QWORD PTR [rdx]
 1008769:	mov    rcx,rdx
 100876c:	lea    rdx,[rsp+0x38]
 1008771:	mov    rbx,r8
 1008774:	call   QWORD PTR [rax+0x1f0]
 100877a:	cmp    DWORD PTR [rsp+0x38],0x5
 100877f:	jne    0x1008799
 1008781:	mov    rdx,rbx
 1008784:	mov    ecx,0x9e
 1008789:	call   0x100e600
 100878e:	mov    eax,0x1
 1008793:	add    rsp,0x20
 1008797:	pop    rbx
 1008798:	ret    
 1008799:	xor    eax,eax
 100879b:	add    rsp,0x20
 100879f:	pop    rbx
 10087a0:	ret    
 10087a1:	int3   
 10087a2:	int3   
 10087a3:	int3   
 10087a4:	int3   
 10087a5:	int3   
 10087a6:	int3   
 10087a7:	int3   
 10087a8:	int3   
 10087a9:	int3   
 10087aa:	int3   
 10087ab:	int3   
 10087ac:	int3   
 10087ad:	int3   
 10087ae:	int3   
 10087af:	int3   
 10087b0:	rex push rbp
 10087b2:	push   rbx
 10087b3:	push   rsi
 10087b4:	push   rdi
 10087b5:	lea    rbp,[rsp-0x1d8]
 10087bd:	sub    rsp,0x2d8
 10087c4:	mov    QWORD PTR [rbp-0x18],0xfffffffffffffffe
 10087cc:	movaps XMMWORD PTR [rsp+0x2c0],xmm6
 10087d4:	mov    rax,QWORD PTR [rip+0x12a05]        # 0x101b1e0
 10087db:	xor    rax,rsp
 10087de:	mov    QWORD PTR [rbp+0x1b0],rax
 10087e5:	mov    BYTE PTR [rsp+0x41],r9b
 10087ea:	mov    BYTE PTR [rsp+0x40],r8b
 10087ef:	mov    rbx,rdx
 10087f2:	mov    QWORD PTR [rbp-0x38],rdx
 10087f6:	mov    QWORD PTR [rbp-0x28],rcx
 10087fa:	mov    rdi,QWORD PTR [rbp+0x220]
 1008801:	mov    rsi,QWORD PTR [rbp+0x228]
 1008808:	mov    QWORD PTR [rbp-0x20],rsi
 100880c:	mov    rax,QWORD PTR [rbp+0x230]
 1008813:	mov    QWORD PTR [rbp-0x58],rax
 1008817:	mov    rax,QWORD PTR [rbp+0x238]
 100881e:	mov    QWORD PTR [rbp-0x60],rax
 1008822:	xor    ecx,ecx
 1008824:	mov    QWORD PTR [rbp-0x80],rcx
 1008828:	mov    QWORD PTR [rbp-0x78],rcx
 100882c:	mov    QWORD PTR [rbp-0x70],rcx
 1008830:	mov    QWORD PTR [rbp+0x28],0x7
 1008838:	mov    QWORD PTR [rbp+0x20],rcx
 100883c:	mov    WORD PTR [rbp+0x10],cx
 1008840:	mov    eax,0x3
 1008845:	mov    WORD PTR [rbp-0x50],ax
 1008849:	mov    DWORD PTR [rsp+0x50],ecx
 100884d:	mov    DWORD PTR [rsp+0x44],ecx
 1008851:	mov    rdx,rdi
 1008854:	mov    ecx,0x90
 1008859:	call   0x100e600
 100885e:	mov    rax,QWORD PTR [rbx]
 1008861:	mov    r8,rsi
 1008864:	mov    rdx,rdi
 1008867:	cmp    BYTE PTR [rsp+0x40],0x0
 100886c:	je     0x100887e
 100886e:	lea    r9,[rsp+0x60]
 1008873:	mov    rcx,rbx
 1008876:	call   QWORD PTR [rax+0x178]
 100887c:	jmp    0x100889b
 100887e:	lea    rcx,[rsp+0x60]
 1008883:	mov    QWORD PTR [rsp+0x28],rcx
 1008888:	mov    rcx,QWORD PTR [rbp-0x60]
 100888c:	mov    QWORD PTR [rsp+0x20],rcx
 1008891:	mov    r9,QWORD PTR [rbp-0x58]
 1008895:	mov    rcx,rbx
 1008898:	call   QWORD PTR [rax+0x60]
 100889b:	mov    esi,eax
 100889d:	test   eax,eax
 100889f:	js     0x1008c6a
 10088a5:	mov    rcx,QWORD PTR [rsp+0x60]
 10088aa:	mov    rax,QWORD PTR [rcx]
 10088ad:	lea    rdx,[rsp+0x54]
 10088b2:	call   QWORD PTR [rax+0x40]
 10088b5:	xor    ebx,ebx
 10088b7:	mov    DWORD PTR [rbp-0x48],ebx
 10088ba:	cmp    DWORD PTR [rsp+0x54],ebx
 10088be:	jle    0x1008bb8
 10088c4:	movsd  xmm6,QWORD PTR [rbp-0x40]
 10088c9:	nop    DWORD PTR [rax+0x0]
 10088d0:	movups xmm0,XMMWORD PTR [rbp-0x50]
 10088d4:	movaps XMMWORD PTR [rbp-0x10],xmm0
 10088d8:	movsd  QWORD PTR [rbp+0x0],xmm6
 10088dd:	mov    rcx,QWORD PTR [rsp+0x60]
 10088e2:	mov    rax,QWORD PTR [rcx]
 10088e5:	lea    r8,[rsp+0x48]
 10088ea:	lea    rdx,[rbp-0x10]
 10088ee:	call   QWORD PTR [rax+0x38]
 10088f1:	mov    esi,eax
 10088f3:	test   eax,eax
 10088f5:	js     0x1008bb8
 10088fb:	mov    rcx,QWORD PTR [rsp+0x48]
 1008900:	mov    rax,QWORD PTR [rcx]
 1008903:	lea    rdx,[rsp+0x6c]
 1008908:	call   QWORD PTR [rax+0x90]
 100890e:	mov    rcx,QWORD PTR [rsp+0x48]
 1008913:	mov    rax,QWORD PTR [rcx]
 1008916:	lea    rdx,[rsp+0x58]
 100891b:	call   QWORD PTR [rax+0x40]
 100891e:	mov    esi,eax
 1008920:	test   eax,eax
 1008922:	js     0x1008bb8
 1008928:	cmp    DWORD PTR [rsp+0x6c],0x1
 100892d:	jne    0x1008a3a
 1008933:	mov    rcx,QWORD PTR [rsp+0x48]
 1008938:	mov    rax,QWORD PTR [rcx]
 100893b:	lea    rdx,[rsp+0x70]
 1008940:	call   QWORD PTR [rax+0x60]
 1008943:	mov    rcx,QWORD PTR [rsp+0x48]
 1008948:	mov    rax,QWORD PTR [rcx]
 100894b:	lea    rdx,[rsp+0x74]
 1008950:	call   QWORD PTR [rax+0x68]
 1008953:	mov    rcx,QWORD PTR [rsp+0x48]
 1008958:	mov    rax,QWORD PTR [rcx]
 100895b:	lea    rdx,[rsp+0x78]
 1008960:	call   QWORD PTR [rax+0x70]
 1008963:	mov    rcx,QWORD PTR [rsp+0x48]
 1008968:	mov    rax,QWORD PTR [rcx]
 100896b:	lea    rdx,[rsp+0x68]
 1008970:	call   QWORD PTR [rax+0x78]
 1008973:	mov    rcx,QWORD PTR [rsp+0x48]
 1008978:	mov    rax,QWORD PTR [rcx]
 100897b:	lea    rdx,[rbp-0x30]
 100897f:	call   QWORD PTR [rax+0x58]
 1008982:	xor    eax,eax
 1008984:	mov    WORD PTR [rbp+0x50],ax
 1008988:	mov    WORD PTR [rbp+0x100],ax
 100898f:	lea    r8,[rbp+0x38]
 1008993:	xor    edx,edx
 1008995:	movsd  xmm0,QWORD PTR [rbp-0x30]
 100899a:	call   QWORD PTR [rip+0xffffffffffff8ca8]        # 0x1001648
 10089a0:	test   eax,eax
 10089a2:	js     0x10089f3
 10089a4:	mov    DWORD PTR [rsp+0x28],0x51
 10089ac:	lea    rax,[rbp+0x100]
 10089b3:	mov    QWORD PTR [rsp+0x20],rax
 10089b8:	xor    r9d,r9d
 10089bb:	lea    r8,[rbp+0x38]
 10089bf:	lea    edx,[r9+0x1]
 10089c3:	mov    ecx,0x400
 10089c8:	call   QWORD PTR [rip+0xffffffffffff88a2]        # 0x1001270
 10089ce:	mov    DWORD PTR [rsp+0x28],0x51
 10089d6:	lea    rax,[rbp+0x50]
 10089da:	mov    QWORD PTR [rsp+0x20],rax
 10089df:	xor    r9d,r9d
 10089e2:	lea    r8,[rbp+0x38]
 10089e6:	xor    edx,edx
 10089e8:	mov    ecx,0x400
 10089ed:	call   QWORD PTR [rip+0xffffffffffff8885]        # 0x1001278
 10089f3:	lea    rax,[rbp+0x50]
 10089f7:	mov    QWORD PTR [rsp+0x38],rax
 10089fc:	lea    rax,[rbp+0x100]
 1008a03:	mov    QWORD PTR [rsp+0x30],rax
 1008a08:	mov    eax,DWORD PTR [rsp+0x68]
 1008a0c:	mov    DWORD PTR [rsp+0x28],eax
 1008a10:	mov    eax,DWORD PTR [rsp+0x78]
 1008a14:	mov    DWORD PTR [rsp+0x20],eax
 1008a18:	mov    r9d,DWORD PTR [rsp+0x74]
 1008a1d:	mov    r8d,DWORD PTR [rsp+0x70]
 1008a22:	mov    rdx,QWORD PTR [rsp+0x58]
 1008a27:	mov    ecx,0x8e
 1008a2c:	call   0x100e600
 1008a31:	inc    DWORD PTR [rsp+0x50]
 1008a35:	jmp    0x1008b76
 1008a3a:	mov    rdx,QWORD PTR [rsp+0x58]
 1008a3f:	mov    ecx,0x8f
 1008a44:	call   0x100e600
 1008a49:	inc    DWORD PTR [rsp+0x44]
 1008a4d:	cmp    BYTE PTR [rsp+0x41],0x0
 1008a52:	je     0x1008b76
 1008a58:	or     r8,0xffffffffffffffff
 1008a5c:	nop    DWORD PTR [rax+0x0]
 1008a60:	inc    r8
 1008a63:	cmp    WORD PTR [rdi+r8*2],0x0
 1008a69:	jne    0x1008a60
 1008a6b:	mov    rdx,rdi
 1008a6e:	lea    rcx,[rbp+0x10]
 1008a72:	call   0x10061d0
 1008a77:	lea    r11,[rbp+0x10]
 1008a7b:	mov    r8,QWORD PTR [rbp+0x10]
 1008a7f:	mov    rdx,QWORD PTR [rbp+0x28]
 1008a83:	cmp    rdx,0x8
 1008a87:	cmovae r11,r8
 1008a8b:	mov    rcx,QWORD PTR [rbp+0x20]
 1008a8f:	cmp    WORD PTR [r11+rcx*2-0x2],0x5c
 1008a96:	je     0x1008b4c
 1008a9c:	or     rax,0xffffffffffffffff
 1008aa0:	sub    rax,rcx
 1008aa3:	cmp    rax,0x1
 1008aa7:	jbe    0x1008baa
 1008aad:	lea    rbx,[rcx+0x1]
 1008ab1:	movabs rax,0x7ffffffffffffffe
 1008abb:	cmp    rbx,rax
 1008abe:	ja     0x1008b9c
 1008ac4:	cmp    rdx,rbx
 1008ac7:	jae    0x1008ae6
 1008ac9:	mov    r8,rcx
 1008acc:	mov    rdx,rbx
 1008acf:	lea    rcx,[rbp+0x10]
 1008ad3:	call   0x10063e0
 1008ad8:	mov    rdx,QWORD PTR [rbp+0x28]
 1008adc:	mov    rcx,QWORD PTR [rbp+0x20]
 1008ae0:	mov    r8,QWORD PTR [rbp+0x10]
 1008ae4:	jmp    0x1008b10
 1008ae6:	test   rbx,rbx
 1008ae9:	jne    0x1008b10
 1008aeb:	xor    r9d,r9d
 1008aee:	mov    QWORD PTR [rbp+0x20],r9
 1008af2:	lea    rax,[rbp+0x10]
 1008af6:	cmp    rdx,0x8
 1008afa:	cmovae rax,r8
 1008afe:	mov    WORD PTR [rax],r9w
 1008b02:	mov    rdx,QWORD PTR [rbp+0x28]
 1008b06:	mov    rcx,QWORD PTR [rbp+0x20]
 1008b0a:	mov    r8,QWORD PTR [rbp+0x10]
 1008b0e:	jmp    0x1008b13
 1008b10:	xor    r9d,r9d
 1008b13:	test   rbx,rbx
 1008b16:	setne  al
 1008b19:	test   al,al
 1008b1b:	je     0x1008b49
 1008b1d:	lea    rax,[rbp+0x10]
 1008b21:	cmp    rdx,0x8
 1008b25:	cmovae rax,r8
 1008b29:	mov    edx,0x5c
 1008b2e:	mov    WORD PTR [rax+rcx*2],dx
 1008b32:	mov    QWORD PTR [rbp+0x20],rbx
 1008b36:	lea    rax,[rbp+0x10]
 1008b3a:	cmp    QWORD PTR [rbp+0x28],0x8
 1008b3f:	cmovae rax,QWORD PTR [rbp+0x10]
 1008b44:	mov    WORD PTR [rax+rbx*2],r9w
 1008b49:	mov    ebx,DWORD PTR [rbp-0x48]
 1008b4c:	mov    rdx,QWORD PTR [rsp+0x58]
 1008b51:	or     r8,0xffffffffffffffff
 1008b55:	inc    r8
 1008b58:	cmp    WORD PTR [rdx+r8*2],0x0
 1008b5e:	jne    0x1008b55
 1008b60:	lea    rcx,[rbp+0x10]
 1008b64:	call   0x1007f00
 1008b69:	lea    rdx,[rbp+0x10]
 1008b6d:	lea    rcx,[rbp-0x80]
 1008b71:	call   0x10097b0
 1008b76:	mov    rcx,QWORD PTR [rsp+0x58]
 1008b7b:	call   QWORD PTR [rip+0xffffffffffff8a57]        # 0x10015d8
 1008b81:	mov    rcx,QWORD PTR [rsp+0x48]
 1008b86:	mov    rax,QWORD PTR [rcx]
 1008b89:	call   QWORD PTR [rax+0x10]
 1008b8c:	inc    ebx
 1008b8e:	mov    DWORD PTR [rbp-0x48],ebx
 1008b91:	cmp    ebx,DWORD PTR [rsp+0x54]
 1008b95:	jge    0x1008bb8
 1008b97:	jmp    0x10088d0
 1008b9c:	lea    rcx,[rip+0xffffffffffff8fa5]        # 0x1001b48
 1008ba3:	call   QWORD PTR [rip+0xffffffffffff881f]        # 0x10013c8
 1008ba9:	int3   
 1008baa:	lea    rcx,[rip+0xffffffffffff8f97]        # 0x1001b48
 1008bb1:	call   QWORD PTR [rip+0xffffffffffff8811]        # 0x10013c8
 1008bb7:	int3   
 1008bb8:	mov    rcx,QWORD PTR [rsp+0x60]
 1008bbd:	mov    rax,QWORD PTR [rcx]
 1008bc0:	call   QWORD PTR [rax+0x10]
 1008bc3:	test   esi,esi
 1008bc5:	js     0x1008c6a
 1008bcb:	mov    eax,DWORD PTR [rsp+0x50]
 1008bcf:	mov    r8d,DWORD PTR [rsp+0x44]
 1008bd4:	test   eax,eax
 1008bd6:	jg     0x1008be9
 1008bd8:	test   r8d,r8d
 1008bdb:	jg     0x1008be9
 1008bdd:	mov    ecx,0x91
 1008be2:	call   0x100e600
 1008be7:	jmp    0x1008bf5
 1008be9:	mov    edx,eax
 1008beb:	mov    ecx,0x92
 1008bf0:	call   0x100e600
 1008bf5:	mov    rbx,QWORD PTR [rbp-0x80]
 1008bf9:	cmp    rbx,QWORD PTR [rbp-0x78]
 1008bfd:	je     0x1008c6e
 1008bff:	nop
 1008c00:	cmp    QWORD PTR [rbx+0x18],0x8
 1008c05:	jb     0x1008c0c
 1008c07:	mov    rcx,QWORD PTR [rbx]
 1008c0a:	jmp    0x1008c0f
 1008c0c:	mov    rcx,rbx
 1008c0f:	call   QWORD PTR [rip+0xffffffffffff89d3]        # 0x10015e8
 1008c15:	mov    rdi,rax
 1008c18:	mov    rax,QWORD PTR [rbp-0x60]
 1008c1c:	mov    QWORD PTR [rsp+0x38],rax
 1008c21:	mov    rax,QWORD PTR [rbp-0x58]
 1008c25:	mov    QWORD PTR [rsp+0x30],rax
 1008c2a:	mov    rax,QWORD PTR [rbp-0x20]
 1008c2e:	mov    QWORD PTR [rsp+0x28],rax
 1008c33:	mov    QWORD PTR [rsp+0x20],rdi
 1008c38:	movzx  r9d,BYTE PTR [rsp+0x41]
 1008c3e:	movzx  r8d,BYTE PTR [rsp+0x40]
 1008c44:	mov    rdx,QWORD PTR [rbp-0x38]
 1008c48:	mov    rcx,QWORD PTR [rbp-0x28]
 1008c4c:	call   0x10087b0
 1008c51:	mov    esi,eax
 1008c53:	mov    rcx,rdi
 1008c56:	call   QWORD PTR [rip+0xffffffffffff897c]        # 0x10015d8
 1008c5c:	test   esi,esi
 1008c5e:	js     0x1008c6a
 1008c60:	add    rbx,0x28
 1008c64:	cmp    rbx,QWORD PTR [rbp-0x78]
 1008c68:	jne    0x1008c00
 1008c6a:	mov    rbx,QWORD PTR [rbp-0x80]
 1008c6e:	cmp    QWORD PTR [rbp+0x28],0x8
 1008c73:	jb     0x1008c82
 1008c75:	mov    rcx,QWORD PTR [rbp+0x10]
 1008c79:	call   0x100d814
 1008c7e:	mov    rbx,QWORD PTR [rbp-0x80]
 1008c82:	mov    QWORD PTR [rbp+0x28],0x7
 1008c8a:	xor    eax,eax
 1008c8c:	mov    QWORD PTR [rbp+0x20],rax
 1008c90:	mov    WORD PTR [rbp+0x10],ax
 1008c94:	test   rbx,rbx
 1008c97:	je     0x1008ce7
 1008c99:	lea    rcx,[rbp-0x80]
 1008c9d:	call   QWORD PTR [rip+0xffffffffffff870d]        # 0x10013b0
 1008ca3:	mov    rdi,QWORD PTR [rbp-0x78]
 1008ca7:	mov    rbx,QWORD PTR [rbp-0x80]
 1008cab:	cmp    rbx,rdi
 1008cae:	je     0x1008cdf
 1008cb0:	xor    eax,eax
 1008cb2:	cmp    QWORD PTR [rbx+0x18],0x8
 1008cb7:	jb     0x1008cc3
 1008cb9:	mov    rcx,QWORD PTR [rbx]
 1008cbc:	call   0x100d814
 1008cc1:	xor    eax,eax
 1008cc3:	mov    QWORD PTR [rbx+0x18],0x7
 1008ccb:	mov    QWORD PTR [rbx+0x10],rax
 1008ccf:	mov    WORD PTR [rbx],ax
 1008cd2:	add    rbx,0x28
 1008cd6:	cmp    rbx,rdi
 1008cd9:	jne    0x1008cb2
 1008cdb:	mov    rbx,QWORD PTR [rbp-0x80]
 1008cdf:	mov    rcx,rbx
 1008ce2:	call   0x100d814
 1008ce7:	mov    eax,esi
 1008ce9:	mov    rcx,QWORD PTR [rbp+0x1b0]
 1008cf0:	xor    rcx,rsp
 1008cf3:	call   0x100daf0
 1008cf8:	movaps xmm6,XMMWORD PTR [rsp+0x2c0]
 1008d00:	add    rsp,0x2d8
 1008d07:	pop    rdi
 1008d08:	pop    rsi
 1008d09:	pop    rbx
 1008d0a:	pop    rbp
 1008d0b:	ret    
 1008d0c:	int3   
 1008d0d:	int3   
 1008d0e:	int3   
 1008d0f:	int3   
 1008d10:	int3   
 1008d11:	int3   
 1008d12:	int3   
 1008d13:	int3   
 1008d14:	int3   
 1008d15:	int3   
 1008d16:	int3   
 1008d17:	int3   
 1008d18:	int3   
 1008d19:	int3   
 1008d1a:	int3   
 1008d1b:	int3   
 1008d1c:	int3   
 1008d1d:	int3   
 1008d1e:	int3   
 1008d1f:	int3   
 1008d20:	mov    rax,rsp
 1008d23:	push   rbx
 1008d24:	push   rsi
 1008d25:	push   rdi
 1008d26:	push   r12
 1008d28:	push   r13
 1008d2a:	push   r14
 1008d2c:	push   r15
 1008d2e:	sub    rsp,0xe0
 1008d35:	mov    QWORD PTR [rax-0x78],0xfffffffffffffffe
 1008d3d:	mov    rdi,rcx
 1008d40:	mov    ebx,0x6
 1008d45:	mov    DWORD PTR [rsp+0x130],ebx
 1008d4c:	mov    QWORD PTR [rax+0x20],0x0
 1008d54:	lea    rax,[rax+0x20]
 1008d58:	mov    QWORD PTR [rsp+0x20],rax
 1008d5d:	lea    r9,[rip+0xffffffffffff8f6c]        # 0x1001cd0
 1008d64:	xor    edx,edx
 1008d66:	lea    r8d,[rbx+0x11]
 1008d6a:	lea    rcx,[rip+0xffffffffffffa01f]        # 0x1002d90
 1008d71:	call   QWORD PTR [rip+0xffffffffffff8941]        # 0x10016b8
 1008d77:	test   eax,eax
 1008d79:	jns    0x1008d8a
 1008d7b:	mov    edx,eax
 1008d7d:	lea    ecx,[rbx+0x76]
 1008d80:	call   0x100e600
 1008d85:	jmp    0x10095a3
 1008d8a:	xor    ebx,ebx
 1008d8c:	mov    QWORD PTR [rsp+0x48],rbx
 1008d91:	xor    r15d,r15d
 1008d94:	mov    QWORD PTR [rsp+0x50],r15
 1008d99:	xor    r13d,r13d
 1008d9c:	mov    QWORD PTR [rsp+0x68],r13
 1008da1:	xor    r14d,r14d
 1008da4:	mov    QWORD PTR [rsp+0x58],r14
 1008da9:	xor    r12d,r12d
 1008dac:	mov    QWORD PTR [rsp+0x70],r12
 1008db1:	xor    esi,esi
 1008db3:	mov    QWORD PTR [rsp+0x60],rsi
 1008db8:	lea    r8,[rip+0xffffffffffff8ef1]        # 0x1001cb0
 1008dbf:	lea    rdx,[rsp+0xa8]
 1008dc7:	mov    rcx,QWORD PTR [rdi]
 1008dca:	call   QWORD PTR [rip+0xffffffffffff8260]        # 0x1001030
 1008dd0:	mov    r11,rax
 1008dd3:	mov    rax,QWORD PTR [rax]
 1008dd6:	mov    QWORD PTR [rsp+0x78],rax
 1008ddb:	mov    rcx,QWORD PTR [r11+0x8]
 1008ddf:	mov    QWORD PTR [rsp+0x40],rcx
 1008de4:	mov    rax,QWORD PTR [r11+0x10]
 1008de8:	mov    QWORD PTR [rsp+0x88],rax
 1008df0:	mov    rax,QWORD PTR [r11+0x18]
 1008df4:	mov    QWORD PTR [rsp+0x90],rax
 1008dfc:	mov    rax,QWORD PTR [r11+0x20]
 1008e00:	mov    QWORD PTR [rsp+0x98],rax
 1008e08:	cmp    QWORD PTR [rcx+0x18],0x8
 1008e0d:	jb     0x1008e17
 1008e0f:	mov    rcx,QWORD PTR [rcx]
 1008e12:	mov    QWORD PTR [rsp+0x40],rcx
 1008e17:	test   rcx,rcx
 1008e1a:	je     0x1008e46
 1008e1c:	xor    ecx,ecx
 1008e1e:	call   QWORD PTR [rip+0xffffffffffff87b4]        # 0x10015d8
 1008e24:	mov    rcx,QWORD PTR [rsp+0x40]
 1008e29:	call   QWORD PTR [rip+0xffffffffffff87b9]        # 0x10015e8
 1008e2f:	mov    r14,rax
 1008e32:	mov    QWORD PTR [rsp+0x58],rax
 1008e37:	test   rax,rax
 1008e3a:	jne    0x1008e46
 1008e3c:	mov    ecx,0x8007000e
 1008e41:	call   0x1004f80
 1008e46:	lea    r8,[rip+0xffffffffffff8e23]        # 0x1001c70
 1008e4d:	lea    rdx,[rsp+0xa8]
 1008e55:	mov    rcx,QWORD PTR [rdi]
 1008e58:	call   QWORD PTR [rip+0xffffffffffff81d2]        # 0x1001030
 1008e5e:	mov    r11,rax
 1008e61:	mov    rax,QWORD PTR [rax]
 1008e64:	mov    QWORD PTR [rsp+0x78],rax
 1008e69:	mov    rcx,QWORD PTR [r11+0x8]
 1008e6d:	mov    QWORD PTR [rsp+0x40],rcx
 1008e72:	mov    rax,QWORD PTR [r11+0x10]
 1008e76:	mov    QWORD PTR [rsp+0x88],rax
 1008e7e:	mov    rax,QWORD PTR [r11+0x18]
 1008e82:	mov    QWORD PTR [rsp+0x90],rax
 1008e8a:	mov    rax,QWORD PTR [r11+0x20]
 1008e8e:	mov    QWORD PTR [rsp+0x98],rax
 1008e96:	cmp    QWORD PTR [rcx+0x18],0x8
 1008e9b:	jb     0x1008ea5
 1008e9d:	mov    rcx,QWORD PTR [rcx]
 1008ea0:	mov    QWORD PTR [rsp+0x40],rcx
 1008ea5:	test   rcx,rcx
 1008ea8:	je     0x1008ed4
 1008eaa:	xor    ecx,ecx
 1008eac:	call   QWORD PTR [rip+0xffffffffffff8726]        # 0x10015d8
 1008eb2:	mov    rcx,QWORD PTR [rsp+0x40]
 1008eb7:	call   QWORD PTR [rip+0xffffffffffff872b]        # 0x10015e8
 1008ebd:	mov    r12,rax
 1008ec0:	mov    QWORD PTR [rsp+0x70],rax
 1008ec5:	test   rax,rax
 1008ec8:	jne    0x1008ed4
 1008eca:	mov    ecx,0x8007000e
 1008ecf:	call   0x1004f80
 1008ed4:	lea    r8,[rip+0xffffffffffff8db5]        # 0x1001c90
 1008edb:	lea    rdx,[rsp+0xa8]
 1008ee3:	mov    rcx,QWORD PTR [rdi]
 1008ee6:	call   QWORD PTR [rip+0xffffffffffff8144]        # 0x1001030
 1008eec:	mov    r11,rax
 1008eef:	mov    rax,QWORD PTR [rax]
 1008ef2:	mov    QWORD PTR [rsp+0x78],rax
 1008ef7:	mov    rcx,QWORD PTR [r11+0x8]
 1008efb:	mov    QWORD PTR [rsp+0x40],rcx
 1008f00:	mov    rax,QWORD PTR [r11+0x10]
 1008f04:	mov    QWORD PTR [rsp+0x88],rax
 1008f0c:	mov    rax,QWORD PTR [r11+0x18]
 1008f10:	mov    QWORD PTR [rsp+0x90],rax
 1008f18:	mov    rax,QWORD PTR [r11+0x20]
 1008f1c:	mov    QWORD PTR [rsp+0x98],rax
 1008f24:	cmp    QWORD PTR [rcx+0x18],0x8
 1008f29:	jb     0x1008f33
 1008f2b:	mov    rcx,QWORD PTR [rcx]
 1008f2e:	mov    QWORD PTR [rsp+0x40],rcx
 1008f33:	test   rcx,rcx
 1008f36:	je     0x1008f62
 1008f38:	xor    ecx,ecx
 1008f3a:	call   QWORD PTR [rip+0xffffffffffff8698]        # 0x10015d8
 1008f40:	mov    rcx,QWORD PTR [rsp+0x40]
 1008f45:	call   QWORD PTR [rip+0xffffffffffff869d]        # 0x10015e8
 1008f4b:	mov    rsi,rax
 1008f4e:	mov    QWORD PTR [rsp+0x60],rax
 1008f53:	test   rax,rax
 1008f56:	jne    0x1008f62
 1008f58:	mov    ecx,0x8007000e
 1008f5d:	call   0x1004f80
 1008f62:	mov    ecx,DWORD PTR [rdi+0x5c]
 1008f65:	test   ecx,ecx
 1008f67:	je     0x1009402
 1008f6d:	dec    ecx
 1008f6f:	je     0x10092e7
 1008f75:	dec    ecx
 1008f77:	je     0x10091d5
 1008f7d:	dec    ecx
 1008f7f:	je     0x1009054
 1008f85:	cmp    ecx,0x2
 1008f88:	jne    0x100951e
 1008f8e:	mov    rax,QWORD PTR [rdi+0x18]
 1008f92:	mov    QWORD PTR [rsp+0x130],rax
 1008f9a:	cmp    QWORD PTR [rax+0x18],0x8
 1008f9f:	jb     0x1008fac
 1008fa1:	mov    rax,QWORD PTR [rax]
 1008fa4:	mov    QWORD PTR [rsp+0x130],rax
 1008fac:	test   rax,rax
 1008faf:	je     0x1008fde
 1008fb1:	xor    ecx,ecx
 1008fb3:	call   QWORD PTR [rip+0xffffffffffff861f]        # 0x10015d8
 1008fb9:	mov    rcx,QWORD PTR [rsp+0x130]
 1008fc1:	call   QWORD PTR [rip+0xffffffffffff8621]        # 0x10015e8
 1008fc7:	mov    rbx,rax
 1008fca:	mov    QWORD PTR [rsp+0x48],rax
 1008fcf:	test   rax,rax
 1008fd2:	jne    0x1008fde
 1008fd4:	mov    ecx,0x8007000e
 1008fd9:	call   0x1004f80
 1008fde:	cmp    DWORD PTR [rdi+0x10],0x1
 1008fe2:	jne    0x1009036
 1008fe4:	mov    rcx,r14
 1008fe7:	call   QWORD PTR [rip+0xffffffffffff85f3]        # 0x10015e0
 1008fed:	mov    r9,rsi
 1008ff0:	mov    r8,rbx
 1008ff3:	movzx  edx,BYTE PTR [rdi+0x20]
 1008ff7:	mov    rcx,rdi
 1008ffa:	test   eax,eax
 1008ffc:	jne    0x100901b
 1008ffe:	xor    eax,eax
 1009000:	mov    QWORD PTR [rsp+0x28],rax
 1009005:	mov    QWORD PTR [rsp+0x20],rax
 100900a:	call   0x100bef0
 100900f:	mov    DWORD PTR [rsp+0x130],eax
 1009016:	jmp    0x100951e
 100901b:	mov    QWORD PTR [rsp+0x28],r12
 1009020:	mov    QWORD PTR [rsp+0x20],r14
 1009025:	call   0x100bef0
 100902a:	mov    DWORD PTR [rsp+0x130],eax
 1009031:	jmp    0x100951e
 1009036:	mov    r9,rsi
 1009039:	mov    r8,rbx
 100903c:	movzx  edx,BYTE PTR [rdi+0x20]
 1009040:	mov    rcx,rdi
 1009043:	call   0x100be20
 1009048:	mov    DWORD PTR [rsp+0x130],eax
 100904f:	jmp    0x100951e
 1009054:	mov    rax,QWORD PTR [rdi+0x18]
 1009058:	mov    QWORD PTR [rsp+0x40],rax
 100905d:	cmp    QWORD PTR [rax+0x18],0x8
 1009062:	jb     0x100906c
 1009064:	mov    rax,QWORD PTR [rax]
 1009067:	mov    QWORD PTR [rsp+0x40],rax
 100906c:	test   rax,rax
 100906f:	je     0x100909b
 1009071:	xor    ecx,ecx
 1009073:	call   QWORD PTR [rip+0xffffffffffff855f]        # 0x10015d8
 1009079:	mov    rcx,QWORD PTR [rsp+0x40]
 100907e:	call   QWORD PTR [rip+0xffffffffffff8564]        # 0x10015e8
 1009084:	mov    rbx,rax
 1009087:	mov    QWORD PTR [rsp+0x48],rax
 100908c:	test   rax,rax
 100908f:	jne    0x100909b
 1009091:	mov    ecx,0x8007000e
 1009096:	call   0x1004f80
 100909b:	mov    rax,QWORD PTR [rdi+0x20]
 100909f:	mov    QWORD PTR [rsp+0x40],rax
 10090a4:	cmp    QWORD PTR [rax+0x18],0x8
 10090a9:	jb     0x10090b3
 10090ab:	mov    rax,QWORD PTR [rax]
 10090ae:	mov    QWORD PTR [rsp+0x40],rax
 10090b3:	test   rax,rax
 10090b6:	je     0x10090e2
 10090b8:	xor    ecx,ecx
 10090ba:	call   QWORD PTR [rip+0xffffffffffff8518]        # 0x10015d8
 10090c0:	mov    rcx,QWORD PTR [rsp+0x40]
 10090c5:	call   QWORD PTR [rip+0xffffffffffff851d]        # 0x10015e8
 10090cb:	mov    r15,rax
 10090ce:	mov    QWORD PTR [rsp+0x50],rax
 10090d3:	test   rax,rax
 10090d6:	jne    0x10090e2
 10090d8:	mov    ecx,0x8007000e
 10090dd:	call   0x1004f80
 10090e2:	mov    rax,QWORD PTR [rdi+0x28]
 10090e6:	mov    QWORD PTR [rsp+0x40],rax
 10090eb:	cmp    QWORD PTR [rax+0x18],0x8
 10090f0:	jb     0x10090fa
 10090f2:	mov    rax,QWORD PTR [rax]
 10090f5:	mov    QWORD PTR [rsp+0x40],rax
 10090fa:	test   rax,rax
 10090fd:	je     0x1009129
 10090ff:	xor    ecx,ecx
 1009101:	call   QWORD PTR [rip+0xffffffffffff84d1]        # 0x10015d8
 1009107:	mov    rcx,QWORD PTR [rsp+0x40]
 100910c:	call   QWORD PTR [rip+0xffffffffffff84d6]        # 0x10015e8
 1009112:	mov    r13,rax
 1009115:	mov    QWORD PTR [rsp+0x68],rax
 100911a:	test   rax,rax
 100911d:	jne    0x1009129
 100911f:	mov    ecx,0x8007000e
 1009124:	call   0x1004f80
 1009129:	cmp    DWORD PTR [rdi+0x10],0x1
 100912d:	jne    0x1009186
 100912f:	mov    rcx,r14
 1009132:	call   QWORD PTR [rip+0xffffffffffff84a8]        # 0x10015e0
 1009138:	mov    rcx,QWORD PTR [rsp+0x138]
 1009140:	mov    r9,r13
 1009143:	mov    r8,r15
 1009146:	mov    rdx,rbx
 1009149:	test   eax,eax
 100914b:	mov    rax,QWORD PTR [rcx]
 100914e:	jne    0x100916f
 1009150:	mov    QWORD PTR [rsp+0x30],0x0
 1009159:	mov    QWORD PTR [rsp+0x28],0x0
 1009162:	mov    QWORD PTR [rsp+0x20],rsi
 1009167:	call   QWORD PTR [rax+0xc8]
 100916d:	jmp    0x10091a5
 100916f:	mov    QWORD PTR [rsp+0x30],r12
 1009174:	mov    QWORD PTR [rsp+0x28],r14
 1009179:	mov    QWORD PTR [rsp+0x20],rsi
 100917e:	call   QWORD PTR [rax+0xc8]
 1009184:	jmp    0x10091a5
 1009186:	mov    rcx,QWORD PTR [rsp+0x138]
 100918e:	mov    rax,QWORD PTR [rcx]
 1009191:	mov    QWORD PTR [rsp+0x20],rsi
 1009196:	mov    r9,r13
 1009199:	mov    r8,r15
 100919c:	mov    rdx,rbx
 100919f:	call   QWORD PTR [rax+0x140]
 10091a5:	test   eax,eax
 10091a7:	jns    0x10091c5
 10091a9:	mov    QWORD PTR [rsp+0x20],r13
 10091ae:	mov    r9,r15
 10091b1:	mov    r8,rbx
 10091b4:	mov    edx,eax
 10091b6:	mov    ecx,0x87
 10091bb:	call   0x100e600
 10091c0:	jmp    0x100951e
 10091c5:	mov    DWORD PTR [rsp+0x130],0x0
 10091d0:	jmp    0x100951e
 10091d5:	mov    rax,QWORD PTR [rdi+0x18]
 10091d9:	mov    QWORD PTR [rsp+0x40],rax
 10091de:	cmp    QWORD PTR [rax+0x18],0x8
 10091e3:	jb     0x10091ed
 10091e5:	mov    rax,QWORD PTR [rax]
 10091e8:	mov    QWORD PTR [rsp+0x40],rax
 10091ed:	test   rax,rax
 10091f0:	je     0x100921c
 10091f2:	xor    ecx,ecx
 10091f4:	call   QWORD PTR [rip+0xffffffffffff83de]        # 0x10015d8
 10091fa:	mov    rcx,QWORD PTR [rsp+0x40]
 10091ff:	call   QWORD PTR [rip+0xffffffffffff83e3]        # 0x10015e8
 1009205:	mov    rbx,rax
 1009208:	mov    QWORD PTR [rsp+0x48],rax
 100920d:	test   rax,rax
 1009210:	jne    0x100921c
 1009212:	mov    ecx,0x8007000e
 1009217:	call   0x1004f80
 100921c:	cmp    DWORD PTR [rdi+0x10],0x1
 1009220:	jne    0x1009271
 1009222:	mov    rcx,r14
 1009225:	call   QWORD PTR [rip+0xffffffffffff83b5]        # 0x10015e0
 100922b:	mov    rcx,QWORD PTR [rsp+0x138]
 1009233:	lea    rdx,[rsp+0x128]
 100923b:	mov    r8,rsi
 100923e:	mov    QWORD PTR [rsp+0x28],rdx
 1009243:	mov    rdx,rbx
 1009246:	test   eax,eax
 1009248:	mov    rax,QWORD PTR [rcx]
 100924b:	jne    0x1009261
 100924d:	mov    QWORD PTR [rsp+0x20],0x0
 1009256:	xor    r9d,r9d
 1009259:	call   QWORD PTR [rax+0xd8]
 100925f:	jmp    0x1009290
 1009261:	mov    QWORD PTR [rsp+0x20],r12
 1009266:	mov    r9,r14
 1009269:	call   QWORD PTR [rax+0xd8]
 100926f:	jmp    0x1009290
 1009271:	mov    rcx,QWORD PTR [rsp+0x138]
 1009279:	mov    rax,QWORD PTR [rcx]
 100927c:	lea    r9,[rsp+0x128]
 1009284:	mov    r8,rsi
 1009287:	mov    rdx,rbx
 100928a:	call   QWORD PTR [rax+0x150]
 1009290:	test   eax,eax
 1009292:	jns    0x10092a8
 1009294:	mov    r8,rbx
 1009297:	mov    edx,eax
 1009299:	mov    ecx,0x89
 100929e:	call   0x100e600
 10092a3:	jmp    0x100951e
 10092a8:	cmp    WORD PTR [rsp+0x128],0x0
 10092b1:	je     0x10092cd
 10092b3:	mov    DWORD PTR [rsp+0x130],0x0
 10092be:	mov    ecx,0x94
 10092c3:	call   0x100e600
 10092c8:	jmp    0x100951e
 10092cd:	mov    DWORD PTR [rsp+0x130],0x1
 10092d8:	mov    ecx,0x95
 10092dd:	call   0x100e600
 10092e2:	jmp    0x100951e
 10092e7:	mov    rbx,QWORD PTR [rdi+0x18]
 10092eb:	cmp    QWORD PTR [rbx+0x18],0x8
 10092f0:	jb     0x10092f5
 10092f2:	mov    rbx,QWORD PTR [rbx]
 10092f5:	test   rbx,rbx
 10092f8:	je     0x100931f
 10092fa:	xor    ecx,ecx
 10092fc:	call   QWORD PTR [rip+0xffffffffffff82d6]        # 0x10015d8
 1009302:	mov    rcx,rbx
 1009305:	call   QWORD PTR [rip+0xffffffffffff82dd]        # 0x10015e8
 100930b:	mov    QWORD PTR [rsp+0x48],rax
 1009310:	test   rax,rax
 1009313:	jne    0x100931f
 1009315:	mov    ecx,0x8007000e
 100931a:	call   0x1004f80
 100931f:	lea    rcx,[rip+0xffffffffffff89a2]        # 0x1001cc8
 1009326:	call   QWORD PTR [rip+0xffffffffffff7f54]        # 0x1001280
 100932c:	mov    r8d,eax
 100932f:	lea    rdx,[rip+0xffffffffffff8992]        # 0x1001cc8
 1009336:	lea    rcx,[rsp+0x48]
 100933b:	call   0x1007c80
 1009340:	test   eax,eax
 1009342:	jns    0x100934b
 1009344:	mov    ecx,eax
 1009346:	call   0x1004f80
 100934b:	mov    rbx,QWORD PTR [rdi+0x20]
 100934f:	cmp    QWORD PTR [rbx+0x18],0x8
 1009354:	jb     0x1009359
 1009356:	mov    rbx,QWORD PTR [rbx]
 1009359:	mov    rcx,rbx
 100935c:	call   QWORD PTR [rip+0xffffffffffff7f1e]        # 0x1001280
 1009362:	mov    r8d,eax
 1009365:	mov    rdx,rbx
 1009368:	lea    rcx,[rsp+0x48]
 100936d:	call   0x1007c80
 1009372:	test   eax,eax
 1009374:	jns    0x100937d
 1009376:	mov    ecx,eax
 1009378:	call   0x1004f80
 100937d:	cmp    DWORD PTR [rdi+0x10],0x1
 1009381:	jne    0x10093ca
 1009383:	mov    rcx,r14
 1009386:	call   QWORD PTR [rip+0xffffffffffff8254]        # 0x10015e0
 100938c:	mov    rcx,QWORD PTR [rsp+0x138]
 1009394:	mov    r8,rsi
 1009397:	mov    rbx,QWORD PTR [rsp+0x48]
 100939c:	mov    rdx,rbx
 100939f:	test   eax,eax
 10093a1:	mov    rax,QWORD PTR [rcx]
 10093a4:	jne    0x10093ba
 10093a6:	mov    QWORD PTR [rsp+0x20],0x0
 10093af:	xor    r9d,r9d
 10093b2:	call   QWORD PTR [rax+0xd0]
 10093b8:	jmp    0x10093e6
 10093ba:	mov    QWORD PTR [rsp+0x20],r12
 10093bf:	mov    r9,r14
 10093c2:	call   QWORD PTR [rax+0xd0]
 10093c8:	jmp    0x10093e6
 10093ca:	mov    rcx,QWORD PTR [rsp+0x138]
 10093d2:	mov    rax,QWORD PTR [rcx]
 10093d5:	mov    r8,rsi
 10093d8:	mov    rbx,QWORD PTR [rsp+0x48]
 10093dd:	mov    rdx,rbx
 10093e0:	call   QWORD PTR [rax+0x148]
 10093e6:	test   eax,eax
 10093e8:	jns    0x10091c5
 10093ee:	mov    r8,rbx
 10093f1:	mov    edx,eax
 10093f3:	mov    ecx,0x88
 10093f8:	call   0x100e600
 10093fd:	jmp    0x100951e
 1009402:	mov    rax,QWORD PTR [rdi+0x18]
 1009406:	mov    QWORD PTR [rsp+0x40],rax
 100940b:	cmp    QWORD PTR [rax+0x18],0x8
 1009410:	jb     0x100941a
 1009412:	mov    rax,QWORD PTR [rax]
 1009415:	mov    QWORD PTR [rsp+0x40],rax
 100941a:	test   rax,rax
 100941d:	je     0x1009449
 100941f:	xor    ecx,ecx
 1009421:	call   QWORD PTR [rip+0xffffffffffff81b1]        # 0x10015d8
 1009427:	mov    rcx,QWORD PTR [rsp+0x40]
 100942c:	call   QWORD PTR [rip+0xffffffffffff81b6]        # 0x10015e8
 1009432:	mov    rbx,rax
 1009435:	mov    QWORD PTR [rsp+0x48],rax
 100943a:	test   rax,rax
 100943d:	jne    0x1009449
 100943f:	mov    ecx,0x8007000e
 1009444:	call   0x1004f80
 1009449:	mov    rax,QWORD PTR [rdi+0x20]
 100944d:	mov    QWORD PTR [rsp+0x40],rax
 1009452:	cmp    QWORD PTR [rax+0x18],0x8
 1009457:	jb     0x1009461
 1009459:	mov    rax,QWORD PTR [rax]
 100945c:	mov    QWORD PTR [rsp+0x40],rax
 1009461:	test   rax,rax
 1009464:	je     0x1009490
 1009466:	xor    ecx,ecx
 1009468:	call   QWORD PTR [rip+0xffffffffffff816a]        # 0x10015d8
 100946e:	mov    rcx,QWORD PTR [rsp+0x40]
 1009473:	call   QWORD PTR [rip+0xffffffffffff816f]        # 0x10015e8
 1009479:	mov    r15,rax
 100947c:	mov    QWORD PTR [rsp+0x50],rax
 1009481:	test   rax,rax
 1009484:	jne    0x1009490
 1009486:	mov    ecx,0x8007000e
 100948b:	call   0x1004f80
 1009490:	cmp    DWORD PTR [rdi+0x10],0x1
 1009494:	jne    0x10094e3
 1009496:	mov    rcx,r14
 1009499:	call   QWORD PTR [rip+0xffffffffffff8141]        # 0x10015e0
 100949f:	mov    rcx,QWORD PTR [rsp+0x138]
 10094a7:	mov    r9,rsi
 10094aa:	mov    r8,r15
 10094ad:	mov    rdx,rbx
 10094b0:	test   eax,eax
 10094b2:	mov    rax,QWORD PTR [rcx]
 10094b5:	jne    0x10094d1
 10094b7:	mov    QWORD PTR [rsp+0x28],0x0
 10094c0:	mov    QWORD PTR [rsp+0x20],0x0
 10094c9:	call   QWORD PTR [rax+0xc0]
 10094cf:	jmp    0x10094fd
 10094d1:	mov    QWORD PTR [rsp+0x28],r12
 10094d6:	mov    QWORD PTR [rsp+0x20],r14
 10094db:	call   QWORD PTR [rax+0xc0]
 10094e1:	jmp    0x10094fd
 10094e3:	mov    rcx,QWORD PTR [rsp+0x138]
 10094eb:	mov    rax,QWORD PTR [rcx]
 10094ee:	mov    r9,rsi
 10094f1:	mov    r8,r15
 10094f4:	mov    rdx,rbx
 10094f7:	call   QWORD PTR [rax+0x138]
 10094fd:	test   eax,eax
 10094ff:	jns    0x1009515
 1009501:	mov    r9,r15
 1009504:	mov    r8,rbx
 1009507:	mov    edx,eax
 1009509:	mov    ecx,0x86
 100950e:	call   0x100e600
 1009513:	jmp    0x100951e
 1009515:	xor    eax,eax
 1009517:	mov    DWORD PTR [rsp+0x130],eax
 100951e:	jmp    0x100954c
 1009520:	mov    eax,DWORD PTR [rsp+0x130]
 1009527:	mov    DWORD PTR [rsp+0x130],eax
 100952e:	mov    rbx,QWORD PTR [rsp+0x48]
 1009533:	mov    r15,QWORD PTR [rsp+0x50]
 1009538:	mov    r13,QWORD PTR [rsp+0x68]
 100953d:	mov    r14,QWORD PTR [rsp+0x58]
 1009542:	mov    r12,QWORD PTR [rsp+0x70]
 1009547:	mov    rsi,QWORD PTR [rsp+0x60]
 100954c:	mov    rcx,r12
 100954f:	call   QWORD PTR [rip+0xffffffffffff808b]        # 0x10015e0
 1009555:	mov    ecx,eax
 1009557:	add    rcx,rcx
 100955a:	mov    rdi,r12
 100955d:	xor    eax,eax
 100955f:	rep stos BYTE PTR es:[rdi],al
 1009561:	mov    rcx,rsi
 1009564:	call   QWORD PTR [rip+0xffffffffffff806e]        # 0x10015d8
 100956a:	nop
 100956b:	mov    rcx,r12
 100956e:	call   QWORD PTR [rip+0xffffffffffff8064]        # 0x10015d8
 1009574:	nop
 1009575:	mov    rcx,r14
 1009578:	call   QWORD PTR [rip+0xffffffffffff805a]        # 0x10015d8
 100957e:	nop
 100957f:	mov    rcx,r13
 1009582:	call   QWORD PTR [rip+0xffffffffffff8050]        # 0x10015d8
 1009588:	nop
 1009589:	mov    rcx,r15
 100958c:	call   QWORD PTR [rip+0xffffffffffff8046]        # 0x10015d8
 1009592:	nop
 1009593:	mov    rcx,rbx
 1009596:	call   QWORD PTR [rip+0xffffffffffff803c]        # 0x10015d8
 100959c:	mov    ebx,DWORD PTR [rsp+0x130]
 10095a3:	mov    rcx,QWORD PTR [rsp+0x138]
 10095ab:	test   rcx,rcx
 10095ae:	je     0x10095b6
 10095b0:	mov    rdx,QWORD PTR [rcx]
 10095b3:	call   QWORD PTR [rdx+0x10]
 10095b6:	mov    eax,ebx
 10095b8:	add    rsp,0xe0
 10095bf:	pop    r15
 10095c1:	pop    r14
 10095c3:	pop    r13
 10095c5:	pop    r12
 10095c7:	pop    rdi
 10095c8:	pop    rsi
 10095c9:	pop    rbx
 10095ca:	ret    
 10095cb:	int3   
 10095cc:	int3   
 10095cd:	int3   
 10095ce:	int3   
 10095cf:	int3   
 10095d0:	int3   
 10095d1:	int3   
 10095d2:	int3   
 10095d3:	int3   
 10095d4:	int3   
 10095d5:	int3   
 10095d6:	int3   
 10095d7:	int3   
 10095d8:	int3   
 10095d9:	int3   
 10095da:	int3   
 10095db:	int3   
 10095dc:	int3   
 10095dd:	int3   
 10095de:	int3   
 10095df:	int3   
 10095e0:	sub    rsp,0x28
 10095e4:	mov    rcx,QWORD PTR [rcx]
 10095e7:	test   rcx,rcx
 10095ea:	je     0x10095f2
 10095ec:	mov    rax,QWORD PTR [rcx]
 10095ef:	call   QWORD PTR [rax+0x10]
 10095f2:	add    rsp,0x28
 10095f6:	ret    
 10095f7:	int3   
 10095f8:	int3   
 10095f9:	int3   
 10095fa:	int3   
 10095fb:	int3   
 10095fc:	int3   
 10095fd:	int3   
 10095fe:	int3   
 10095ff:	int3   
 1009600:	sub    rsp,0x48
 1009604:	xor    eax,eax
 1009606:	test   rdx,rdx
 1009609:	je     0x1009663
 100960b:	movabs rax,0x666666666666666
 1009615:	cmp    rdx,rax
 1009618:	ja     0x100962c
 100961a:	lea    rcx,[rdx+rdx*4]
 100961e:	shl    rcx,0x3
 1009622:	call   0x100dcc6
 1009627:	test   rax,rax
 100962a:	jne    0x1009663
 100962c:	lea    rdx,[rsp+0x58]
 1009631:	lea    rcx,[rsp+0x20]
 1009636:	mov    QWORD PTR [rsp+0x58],0x0
 100963f:	call   QWORD PTR [rip+0xffffffffffff7e8b]        # 0x10014d0
 1009645:	lea    r11,[rip+0xffffffffffff9f8c]        # 0x10035d8
 100964c:	lea    rdx,[rip+0xfc1d]        # 0x1019270
 1009653:	lea    rcx,[rsp+0x20]
 1009658:	mov    QWORD PTR [rsp+0x20],r11
 100965d:	call   0x100da3c
 1009662:	int3   
 1009663:	add    rsp,0x48
 1009667:	ret    
 1009668:	int3   
 1009669:	int3   
 100966a:	int3   
 100966b:	int3   
 100966c:	int3   
 100966d:	int3   
 100966e:	int3   
 100966f:	int3   
 1009670:	jmp    0x10099c0
 1009675:	int3   
 1009676:	int3   
 1009677:	int3   
 1009678:	int3   
 1009679:	int3   
 100967a:	int3   
 100967b:	int3   
 100967c:	int3   
 100967d:	int3   
 100967e:	int3   
 100967f:	int3   
 1009680:	rex push rdi
 1009682:	push   r14
 1009684:	push   r15
 1009686:	sub    rsp,0x40
 100968a:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1009693:	mov    QWORD PTR [rsp+0x60],rbx
 1009698:	mov    QWORD PTR [rsp+0x70],rsi
 100969d:	mov    rdi,rdx
 10096a0:	mov    rbx,rcx
 10096a3:	movabs rax,0x666666666666666
 10096ad:	cmp    rdx,rax
 10096b0:	jbe    0x10096c0
 10096b2:	lea    rcx,[rip+0xffffffffffff8627]        # 0x1001ce0
 10096b9:	call   QWORD PTR [rip+0xffffffffffff7d09]        # 0x10013c8
 10096bf:	int3   
 10096c0:	mov    rcx,QWORD PTR [rcx+0x10]
 10096c4:	sub    rcx,QWORD PTR [rbx]
 10096c7:	movabs r15,0x6666666666666667
 10096d1:	mov    rax,r15
 10096d4:	imul   rcx
 10096d7:	sar    rdx,0x4
 10096db:	mov    rax,rdx
 10096de:	shr    rax,0x3f
 10096e2:	add    rdx,rax
 10096e5:	cmp    rdx,rdi
 10096e8:	jae    0x1009788
 10096ee:	mov    rdx,rdi
 10096f1:	lea    rcx,[rbx+0x18]
 10096f5:	call   0x1009600
 10096fa:	mov    rsi,rax
 10096fd:	mov    QWORD PTR [rsp+0x68],rax
 1009702:	movzx  eax,BYTE PTR [rsp+0x68]
 1009707:	mov    BYTE PTR [rsp+0x28],al
 100970b:	mov    QWORD PTR [rsp+0x20],0x0
 1009714:	lea    r9,[rbx+0x18]
 1009718:	mov    r8,rsi
 100971b:	mov    rdx,QWORD PTR [rbx+0x8]
 100971f:	mov    rcx,QWORD PTR [rbx]
 1009722:	call   0x1009a50
 1009727:	nop
 1009728:	mov    r8,QWORD PTR [rbx+0x8]
 100972c:	mov    r9,QWORD PTR [rbx]
 100972f:	mov    rcx,r8
 1009732:	sub    rcx,r9
 1009735:	mov    rax,r15
 1009738:	imul   rcx
 100973b:	mov    r14,rdx
 100973e:	sar    r14,0x4
 1009742:	mov    rax,r14
 1009745:	shr    rax,0x3f
 1009749:	add    r14,rax
 100974c:	test   r9,r9
 100974f:	je     0x1009764
 1009751:	mov    rdx,r9
 1009754:	mov    rcx,rbx
 1009757:	call   0x10098b0
 100975c:	mov    rcx,QWORD PTR [rbx]
 100975f:	call   0x100d814
 1009764:	mov    rcx,rbx
 1009767:	call   QWORD PTR [rip+0xffffffffffff7c43]        # 0x10013b0
 100976d:	lea    rax,[rdi+rdi*4]
 1009771:	lea    rcx,[rsi+rax*8]
 1009775:	mov    QWORD PTR [rbx+0x10],rcx
 1009779:	lea    rax,[r14+r14*4]
 100977d:	lea    rcx,[rsi+rax*8]
 1009781:	mov    QWORD PTR [rbx+0x8],rcx
 1009785:	mov    QWORD PTR [rbx],rsi
 1009788:	mov    rbx,QWORD PTR [rsp+0x60]
 100978d:	mov    rsi,QWORD PTR [rsp+0x70]
 1009792:	add    rsp,0x40
 1009796:	pop    r15
 1009798:	pop    r14
 100979a:	pop    rdi
 100979b:	ret    
 100979c:	int3   
 100979d:	int3   
 100979e:	int3   
 100979f:	int3   
 10097a0:	int3   
 10097a1:	int3   
 10097a2:	int3   
 10097a3:	int3   
 10097a4:	int3   
 10097a5:	int3   
 10097a6:	int3   
 10097a7:	int3   
 10097a8:	int3   
 10097a9:	int3   
 10097aa:	int3   
 10097ab:	int3   
 10097ac:	int3   
 10097ad:	int3   
 10097ae:	int3   
 10097af:	int3   
 10097b0:	rex push rdi
 10097b2:	sub    rsp,0x30
 10097b6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10097bf:	mov    QWORD PTR [rsp+0x50],rbx
 10097c4:	mov    rdi,rdx
 10097c7:	mov    rbx,rcx
 10097ca:	mov    rcx,QWORD PTR [rcx+0x8]
 10097ce:	cmp    rdx,rcx
 10097d1:	jae    0x100984d
 10097d3:	mov    rax,QWORD PTR [rbx]
 10097d6:	cmp    rax,rdx
 10097d9:	ja     0x100984d
 10097db:	sub    rdi,rax
 10097de:	movabs rax,0x6666666666666667
 10097e8:	imul   rdi
 10097eb:	mov    rdi,rdx
 10097ee:	sar    rdi,0x4
 10097f2:	mov    rax,rdi
 10097f5:	shr    rax,0x3f
 10097f9:	add    rdi,rax
 10097fc:	cmp    rcx,QWORD PTR [rbx+0x10]
 1009800:	jne    0x100980f
 1009802:	mov    edx,0x1
 1009807:	mov    rcx,rbx
 100980a:	call   0x1009910
 100980f:	lea    rcx,[rdi+rdi*4]
 1009813:	mov    rax,QWORD PTR [rbx]
 1009816:	lea    rdx,[rax+rcx*8]
 100981a:	mov    rcx,QWORD PTR [rbx+0x8]
 100981e:	mov    QWORD PTR [rsp+0x40],rcx
 1009823:	mov    QWORD PTR [rsp+0x48],rcx
 1009828:	test   rcx,rcx
 100982b:	je     0x100984b
 100982d:	mov    QWORD PTR [rcx+0x18],0x7
 1009835:	xor    eax,eax
 1009837:	mov    QWORD PTR [rcx+0x10],rax
 100983b:	mov    WORD PTR [rcx],ax
 100983e:	or     r9,0xffffffffffffffff
 1009842:	xor    r8d,r8d
 1009845:	call   0x10060a0
 100984a:	nop
 100984b:	jmp    0x1009894
 100984d:	cmp    rcx,QWORD PTR [rbx+0x10]
 1009851:	jne    0x1009860
 1009853:	mov    edx,0x1
 1009858:	mov    rcx,rbx
 100985b:	call   0x1009910
 1009860:	mov    rcx,QWORD PTR [rbx+0x8]
 1009864:	mov    QWORD PTR [rsp+0x40],rcx
 1009869:	mov    QWORD PTR [rsp+0x48],rcx
 100986e:	test   rcx,rcx
 1009871:	je     0x1009894
 1009873:	mov    QWORD PTR [rcx+0x18],0x7
 100987b:	xor    eax,eax
 100987d:	mov    QWORD PTR [rcx+0x10],rax
 1009881:	mov    WORD PTR [rcx],ax
 1009884:	or     r9,0xffffffffffffffff
 1009888:	xor    r8d,r8d
 100988b:	mov    rdx,rdi
 100988e:	call   0x10060a0
 1009893:	nop
 1009894:	add    QWORD PTR [rbx+0x8],0x28
 1009899:	mov    rbx,QWORD PTR [rsp+0x50]
 100989e:	add    rsp,0x30
 10098a2:	pop    rdi
 10098a3:	ret    
 10098a4:	int3   
 10098a5:	int3   
 10098a6:	int3   
 10098a7:	int3   
 10098a8:	int3   
 10098a9:	int3   
 10098aa:	int3   
 10098ab:	int3   
 10098ac:	int3   
 10098ad:	int3   
 10098ae:	int3   
 10098af:	int3   
 10098b0:	cmp    rdx,r8
 10098b3:	je     0x1009906
 10098b5:	mov    QWORD PTR [rsp+0x10],rbx
 10098ba:	push   rdi
 10098bb:	sub    rsp,0x20
 10098bf:	mov    QWORD PTR [rsp+0x30],rsi
 10098c4:	mov    rdi,r8
 10098c7:	mov    rbx,rdx
 10098ca:	xor    esi,esi
 10098cc:	nop    DWORD PTR [rax+0x0]
 10098d0:	cmp    QWORD PTR [rbx+0x18],0x8
 10098d5:	jb     0x10098df
 10098d7:	mov    rcx,QWORD PTR [rbx]
 10098da:	call   0x100d814
 10098df:	mov    QWORD PTR [rbx+0x18],0x7
 10098e7:	mov    QWORD PTR [rbx+0x10],rsi
 10098eb:	mov    WORD PTR [rbx],si
 10098ee:	add    rbx,0x28
 10098f2:	cmp    rbx,rdi
 10098f5:	jne    0x10098d0
 10098f7:	mov    rsi,QWORD PTR [rsp+0x30]
 10098fc:	mov    rbx,QWORD PTR [rsp+0x38]
 1009901:	add    rsp,0x20
 1009905:	pop    rdi
 1009906:	repz ret 
 1009908:	int3   
 1009909:	int3   
 100990a:	int3   
 100990b:	int3   
 100990c:	int3   
 100990d:	int3   
 100990e:	int3   
 100990f:	int3   
 1009910:	rex push rdi
 1009912:	sub    rsp,0x20
 1009916:	mov    r8,QWORD PTR [rcx+0x8]
 100991a:	mov    r11,rdx
 100991d:	movabs rdi,0x6666666666666667
 1009927:	sub    r8,QWORD PTR [rcx]
 100992a:	mov    rax,rdi
 100992d:	movabs r9,0x666666666666666
 1009937:	mov    r10,rcx
 100993a:	imul   r8
 100993d:	mov    r8,rdx
 1009940:	sar    r8,0x4
 1009944:	mov    rax,r8
 1009947:	shr    rax,0x3f
 100994b:	add    r8,rax
 100994e:	mov    rax,r9
 1009951:	sub    rax,r11
 1009954:	cmp    rax,r8
 1009957:	jae    0x1009967
 1009959:	lea    rcx,[rip+0xffffffffffff8380]        # 0x1001ce0
 1009960:	call   QWORD PTR [rip+0xffffffffffff7a62]        # 0x10013c8
 1009966:	int3   
 1009967:	mov    rcx,QWORD PTR [rcx+0x10]
 100996b:	mov    rax,rdi
 100996e:	add    r8,r11
 1009971:	sub    rcx,QWORD PTR [r10]
 1009974:	imul   rcx
 1009977:	sar    rdx,0x4
 100997b:	mov    rax,rdx
 100997e:	shr    rax,0x3f
 1009982:	add    rdx,rax
 1009985:	cmp    r8,rdx
 1009988:	jbe    0x10099ae
 100998a:	mov    rax,rdx
 100998d:	shr    rax,1
 1009990:	sub    r9,rax
 1009993:	cmp    r9,rdx
 1009996:	jae    0x100999c
 1009998:	xor    edx,edx
 100999a:	jmp    0x100999f
 100999c:	add    rdx,rax
 100999f:	cmp    rdx,r8
 10099a2:	mov    rcx,r10
 10099a5:	cmovb  rdx,r8
 10099a9:	call   0x1009680
 10099ae:	add    rsp,0x20
 10099b2:	pop    rdi
 10099b3:	ret    
 10099b4:	int3   
 10099b5:	int3   
 10099b6:	int3   
 10099b7:	int3   
 10099b8:	int3   
 10099b9:	int3   
 10099ba:	int3   
 10099bb:	int3   
 10099bc:	int3   
 10099bd:	int3   
 10099be:	int3   
 10099bf:	int3   
 10099c0:	mov    QWORD PTR [rsp+0x18],rbp
 10099c5:	push   rdi
 10099c6:	sub    rsp,0x20
 10099ca:	xor    ebp,ebp
 10099cc:	mov    rdi,rcx
 10099cf:	cmp    QWORD PTR [rcx],rbp
 10099d2:	je     0x1009a29
 10099d4:	mov    QWORD PTR [rsp+0x30],rbx
 10099d9:	mov    QWORD PTR [rsp+0x38],rsi
 10099de:	call   QWORD PTR [rip+0xffffffffffff79cc]        # 0x10013b0
 10099e4:	mov    rsi,QWORD PTR [rdi+0x8]
 10099e8:	mov    rbx,QWORD PTR [rdi]
 10099eb:	cmp    rbx,rsi
 10099ee:	je     0x1009a17
 10099f0:	cmp    QWORD PTR [rbx+0x18],0x8
 10099f5:	jb     0x10099ff
 10099f7:	mov    rcx,QWORD PTR [rbx]
 10099fa:	call   0x100d814
 10099ff:	mov    QWORD PTR [rbx+0x18],0x7
 1009a07:	mov    QWORD PTR [rbx+0x10],rbp
 1009a0b:	mov    WORD PTR [rbx],bp
 1009a0e:	add    rbx,0x28
 1009a12:	cmp    rbx,rsi
 1009a15:	jne    0x10099f0
 1009a17:	mov    rcx,QWORD PTR [rdi]
 1009a1a:	call   0x100d814
 1009a1f:	mov    rsi,QWORD PTR [rsp+0x38]
 1009a24:	mov    rbx,QWORD PTR [rsp+0x30]
 1009a29:	mov    QWORD PTR [rdi],rbp
 1009a2c:	mov    QWORD PTR [rdi+0x8],rbp
 1009a30:	mov    QWORD PTR [rdi+0x10],rbp
 1009a34:	mov    rbp,QWORD PTR [rsp+0x40]
 1009a39:	add    rsp,0x20
 1009a3d:	pop    rdi
 1009a3e:	ret    
 1009a3f:	int3   
 1009a40:	int3   
 1009a41:	int3   
 1009a42:	int3   
 1009a43:	int3   
 1009a44:	int3   
 1009a45:	int3   
 1009a46:	int3   
 1009a47:	int3   
 1009a48:	int3   
 1009a49:	int3   
 1009a4a:	int3   
 1009a4b:	int3   
 1009a4c:	int3   
 1009a4d:	int3   
 1009a4e:	int3   
 1009a4f:	int3   
 1009a50:	mov    QWORD PTR [rsp+0x20],r9
 1009a55:	mov    QWORD PTR [rsp+0x18],r8
 1009a5a:	push   rbx
 1009a5b:	push   rsi
 1009a5c:	push   rdi
 1009a5d:	push   r14
 1009a5f:	sub    rsp,0x38
 1009a63:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1009a6c:	mov    rbx,r8
 1009a6f:	mov    rsi,rdx
 1009a72:	mov    rdi,rcx
 1009a75:	mov    QWORD PTR [rsp+0x60],rbx
 1009a7a:	xor    r14d,r14d
 1009a7d:	nop    DWORD PTR [rax]
 1009a80:	cmp    rdi,rsi
 1009a83:	je     0x1009aba
 1009a85:	mov    QWORD PTR [rsp+0x68],rbx
 1009a8a:	test   rbx,rbx
 1009a8d:	je     0x1009aab
 1009a8f:	mov    QWORD PTR [rbx+0x18],0x7
 1009a97:	mov    QWORD PTR [rbx+0x10],r14
 1009a9b:	mov    WORD PTR [rbx],r14w
 1009a9f:	mov    rdx,rdi
 1009aa2:	mov    rcx,rbx
 1009aa5:	call   0x1005fc0
 1009aaa:	nop
 1009aab:	add    rbx,0x28
 1009aaf:	mov    QWORD PTR [rsp+0x70],rbx
 1009ab4:	add    rdi,0x28
 1009ab8:	jmp    0x1009a80
 1009aba:	mov    rax,rbx
 1009abd:	add    rsp,0x38
 1009ac1:	pop    r14
 1009ac3:	pop    rdi
 1009ac4:	pop    rsi
 1009ac5:	pop    rbx
 1009ac6:	ret    
 1009ac7:	int3   
 1009ac8:	int3   
 1009ac9:	int3   
 1009aca:	int3   
 1009acb:	int3   
 1009acc:	int3   
 1009acd:	int3   
 1009ace:	int3   
 1009acf:	int3   
 1009ad0:	rex push rbx
 1009ad2:	sub    rsp,0x20
 1009ad6:	cmp    QWORD PTR [rdx+0x18],0x8
 1009adb:	mov    rbx,rdx
 1009ade:	jb     0x1009ae8
 1009ae0:	mov    rcx,QWORD PTR [rdx]
 1009ae3:	call   0x100d814
 1009ae8:	xor    eax,eax
 1009aea:	mov    QWORD PTR [rbx+0x18],0x7
 1009af2:	mov    QWORD PTR [rbx+0x10],rax
 1009af6:	mov    WORD PTR [rbx],ax
 1009af9:	add    rsp,0x20
 1009afd:	pop    rbx
 1009afe:	ret    
 1009aff:	int3   
 1009b00:	int3   
 1009b01:	int3   
 1009b02:	int3   
 1009b03:	int3   
 1009b04:	int3   
 1009b05:	int3   
 1009b06:	int3   
 1009b07:	int3   
 1009b08:	int3   
 1009b09:	int3   
 1009b0a:	int3   
 1009b0b:	int3   
 1009b0c:	int3   
 1009b0d:	int3   
 1009b0e:	int3   
 1009b0f:	int3   
 1009b10:	mov    QWORD PTR [rsp+0x8],rbx
 1009b15:	mov    QWORD PTR [rsp+0x10],rbp
 1009b1a:	mov    QWORD PTR [rsp+0x18],rsi
 1009b1f:	push   rdi
 1009b20:	sub    rsp,0x20
 1009b24:	xor    ebx,ebx
 1009b26:	mov    rdi,r8
 1009b29:	mov    rbp,rdx
 1009b2c:	mov    rsi,rcx
 1009b2f:	test   r8,r8
 1009b32:	je     0x1009ce0
 1009b38:	cmp    WORD PTR [r8],bx
 1009b3c:	je     0x1009ce0
 1009b42:	mov    r9d,DWORD PTR [rcx+0x5c]
 1009b46:	test   r9d,r9d
 1009b49:	je     0x1009b51
 1009b4b:	cmp    r9d,0x3
 1009b4f:	jne    0x1009b63
 1009b51:	test   rdx,rdx
 1009b54:	je     0x1009ce0
 1009b5a:	cmp    WORD PTR [rdx],bx
 1009b5d:	je     0x1009ce0
 1009b63:	test   r9d,r9d
 1009b66:	je     0x1009bba
 1009b68:	dec    r9d
 1009b6b:	je     0x1009baf
 1009b6d:	dec    r9d
 1009b70:	je     0x1009b94
 1009b72:	dec    r9d
 1009b75:	jne    0x1009ce0
 1009b7b:	cmp    BYTE PTR [rcx+0x58],bl
 1009b7e:	mov    r8d,ebx
 1009b81:	mov    rcx,rdi
 1009b84:	setne  r8b
 1009b88:	add    r8d,0x2
 1009b8c:	call   QWORD PTR [rip+0xffffffffffff7516]        # 0x10010a8
 1009b92:	jmp    0x1009bcd
 1009b94:	mov    rcx,r8
 1009b97:	call   QWORD PTR [rip+0xffffffffffff74f3]        # 0x1001090
 1009b9d:	mov    ecx,0x1
 1009ba2:	cmp    eax,0xffffffff
 1009ba5:	cmove  ebx,ecx
 1009ba8:	mov    eax,ebx
 1009baa:	jmp    0x1009ce5
 1009baf:	mov    rcx,r8
 1009bb2:	call   QWORD PTR [rip+0xffffffffffff74e0]        # 0x1001098
 1009bb8:	jmp    0x1009bcd
 1009bba:	cmp    BYTE PTR [rcx+0x58],bl
 1009bbd:	mov    r8d,ebx
 1009bc0:	mov    rcx,rdi
 1009bc3:	sete   r8b
 1009bc7:	call   QWORD PTR [rip+0xffffffffffff74d3]        # 0x10010a0
 1009bcd:	test   eax,eax
 1009bcf:	jne    0x1009cdc
 1009bd5:	call   QWORD PTR [rip+0xffffffffffff7775]        # 0x1001350
 1009bdb:	mov    edx,eax
 1009bdd:	cmp    BYTE PTR [rsi+0x58],bl
 1009be0:	jne    0x1009c35
 1009be2:	cmp    eax,0x50
 1009be5:	je     0x1009bee
 1009be7:	cmp    eax,0xb7
 1009bec:	jne    0x1009c35
 1009bee:	mov    rdx,rbp
 1009bf1:	mov    rcx,rsi
 1009bf4:	call   0x1007230
 1009bf9:	test   al,al
 1009bfb:	je     0x1009ce0
 1009c01:	mov    eax,DWORD PTR [rsi+0x5c]
 1009c04:	test   eax,eax
 1009c06:	je     0x1009c1e
 1009c08:	cmp    eax,0x3
 1009c0b:	jne    0x1009c2d
 1009c0d:	mov    r8d,eax
 1009c10:	mov    rdx,rbp
 1009c13:	mov    rcx,rdi
 1009c16:	call   QWORD PTR [rip+0xffffffffffff748c]        # 0x10010a8
 1009c1c:	jmp    0x1009c2d
 1009c1e:	xor    r8d,r8d
 1009c21:	mov    rdx,rbp
 1009c24:	mov    rcx,rdi
 1009c27:	call   QWORD PTR [rip+0xffffffffffff7473]        # 0x10010a0
 1009c2d:	call   QWORD PTR [rip+0xffffffffffff771d]        # 0x1001350
 1009c33:	mov    edx,eax
 1009c35:	mov    eax,edx
 1009c37:	test   edx,edx
 1009c39:	je     0x1009cdc
 1009c3f:	sub    eax,0x2
 1009c42:	je     0x1009ccc
 1009c48:	sub    eax,0x4e
 1009c4b:	je     0x1009cb8
 1009c4d:	cmp    eax,0x67
 1009c50:	je     0x1009cb8
 1009c52:	mov    ecx,DWORD PTR [rsi+0x5c]
 1009c55:	mov    DWORD PTR [rsi+0x68],edx
 1009c58:	mov    ebx,0x6
 1009c5d:	test   ecx,ecx
 1009c5f:	je     0x1009ca4
 1009c61:	dec    ecx
 1009c63:	je     0x1009c90
 1009c65:	cmp    ecx,0x2
 1009c68:	je     0x1009c7c
 1009c6a:	lea    ecx,[rbx+0x6f]
 1009c6d:	mov    r9,rbp
 1009c70:	mov    r8,rdi
 1009c73:	call   0x100e600
 1009c78:	mov    eax,ebx
 1009c7a:	jmp    0x1009ce5
 1009c7c:	mov    ecx,0x73
 1009c81:	mov    r9,rbp
 1009c84:	mov    r8,rdi
 1009c87:	call   0x100e600
 1009c8c:	mov    eax,ebx
 1009c8e:	jmp    0x1009ce5
 1009c90:	mov    ecx,0x74
 1009c95:	mov    r9,rbp
 1009c98:	mov    r8,rdi
 1009c9b:	call   0x100e600
 1009ca0:	mov    eax,ebx
 1009ca2:	jmp    0x1009ce5
 1009ca4:	mov    ecx,0x70
 1009ca9:	mov    r9,rbp
 1009cac:	mov    r8,rdi
 1009caf:	call   0x100e600
 1009cb4:	mov    eax,ebx
 1009cb6:	jmp    0x1009ce5
 1009cb8:	mov    ebx,0x6
 1009cbd:	mov    rdx,rbp
 1009cc0:	lea    ecx,[rbx+0x68]
 1009cc3:	call   0x100e600
 1009cc8:	mov    eax,ebx
 1009cca:	jmp    0x1009ce5
 1009ccc:	mov    ebx,0x4
 1009cd1:	mov    rdx,rdi
 1009cd4:	lea    ecx,[rbx+0x6b]
 1009cd7:	call   0x100e600
 1009cdc:	mov    eax,ebx
 1009cde:	jmp    0x1009ce5
 1009ce0:	mov    eax,0x6
 1009ce5:	mov    rbx,QWORD PTR [rsp+0x30]
 1009cea:	mov    rbp,QWORD PTR [rsp+0x38]
 1009cef:	mov    rsi,QWORD PTR [rsp+0x40]
 1009cf4:	add    rsp,0x20
 1009cf8:	pop    rdi
 1009cf9:	ret    
 1009cfa:	int3   
 1009cfb:	int3   
 1009cfc:	int3   
 1009cfd:	int3   
 1009cfe:	int3   
 1009cff:	int3   
 1009d00:	mov    QWORD PTR [rsp+0x18],rbx
 1009d05:	push   rsi
 1009d06:	push   r12
 1009d08:	push   r13
 1009d0a:	push   r14
 1009d0c:	push   r15
 1009d0e:	sub    rsp,0x50
 1009d12:	mov    r13,rcx
 1009d15:	mov    rcx,r8
 1009d18:	mov    r15,r8
 1009d1b:	mov    rsi,rdx
 1009d1e:	mov    r14d,0x6
 1009d24:	call   QWORD PTR [rip+0xffffffffffff78d6]        # 0x1001600
 1009d2a:	xor    ebx,ebx
 1009d2c:	lea    r8d,[r14-0x5]
 1009d30:	xor    r9d,r9d
 1009d33:	mov    QWORD PTR [rsp+0x30],rbx
 1009d38:	mov    edx,0x80000000
 1009d3d:	mov    rcx,rsi
 1009d40:	mov    DWORD PTR [rsp+0x28],0x100080
 1009d48:	mov    DWORD PTR [rsp+0x20],0x3
 1009d50:	call   QWORD PTR [rip+0xffffffffffff75d2]        # 0x1001328
 1009d56:	mov    r12,rax
 1009d59:	cmp    rax,0xffffffffffffffff
 1009d5d:	jne    0x1009d97
 1009d5f:	call   QWORD PTR [rip+0xffffffffffff75eb]        # 0x1001350
 1009d65:	cmp    eax,0x2
 1009d68:	je     0x1009d80
 1009d6a:	lea    ecx,[rbx+0x77]
 1009d6d:	mov    r8,rsi
 1009d70:	mov    edx,eax
 1009d72:	mov    DWORD PTR [r13+0x68],eax
 1009d76:	call   0x100e600
 1009d7b:	jmp    0x1009e89
 1009d80:	mov    rdx,rsi
 1009d83:	mov    ecx,0x6f
 1009d88:	call   0x100e600
 1009d8d:	mov    eax,0x4
 1009d92:	jmp    0x1009e8c
 1009d97:	xor    edx,edx
 1009d99:	mov    rcx,rax
 1009d9c:	mov    QWORD PTR [rsp+0x80],rbp
 1009da4:	mov    QWORD PTR [rsp+0x88],rdi
 1009dac:	mov    DWORD PTR [rsp+0x44],ebx
 1009db0:	call   QWORD PTR [rip+0xffffffffffff73b2]        # 0x1001168
 1009db6:	mov    ecx,0x11
 1009dbb:	lea    r8,[rsp+0x40]
 1009dc0:	mov    ebp,eax
 1009dc2:	lea    edx,[rcx-0x10]
 1009dc5:	mov    DWORD PTR [rsp+0x40],eax
 1009dc9:	call   QWORD PTR [rip+0xffffffffffff7871]        # 0x1001640
 1009dcf:	mov    rdi,rax
 1009dd2:	test   rax,rax
 1009dd5:	jne    0x1009de6
 1009dd7:	lea    ecx,[rax+0x78]
 1009dda:	mov    edx,ebp
 1009ddc:	call   0x100e600
 1009de1:	jmp    0x1009e70
 1009de6:	lea    rdx,[rsp+0x48]
 1009deb:	mov    rcx,rax
 1009dee:	call   QWORD PTR [rip+0xffffffffffff783c]        # 0x1001630
 1009df4:	test   eax,eax
 1009df6:	jns    0x1009e06
 1009df8:	mov    edx,eax
 1009dfa:	mov    ecx,0x7a
 1009dff:	call   0x100e600
 1009e04:	jmp    0x1009e67
 1009e06:	mov    rdx,QWORD PTR [rsp+0x48]
 1009e0b:	lea    r9,[rsp+0x98]
 1009e13:	mov    r8d,ebp
 1009e16:	mov    rcx,r12
 1009e19:	mov    QWORD PTR [rsp+0x20],rbx
 1009e1e:	call   QWORD PTR [rip+0xffffffffffff7264]        # 0x1001088
 1009e24:	mov    rcx,rdi
 1009e27:	mov    ebx,eax
 1009e29:	call   QWORD PTR [rip+0xffffffffffff77f9]        # 0x1001628
 1009e2f:	test   ebx,ebx
 1009e31:	je     0x1009e4e
 1009e33:	cmp    DWORD PTR [rsp+0x98],ebp
 1009e3a:	jne    0x1009e4e
 1009e3c:	mov    eax,0x2011
 1009e41:	xor    r14d,r14d
 1009e44:	mov    QWORD PTR [r15+0x8],rdi
 1009e48:	mov    WORD PTR [r15],ax
 1009e4c:	jmp    0x1009e70
 1009e4e:	call   QWORD PTR [rip+0xffffffffffff74fc]        # 0x1001350
 1009e54:	mov    r8,rsi
 1009e57:	mov    ecx,0x79
 1009e5c:	mov    edx,eax
 1009e5e:	mov    DWORD PTR [r13+0x68],eax
 1009e62:	call   0x100e600
 1009e67:	mov    rcx,rdi
 1009e6a:	call   QWORD PTR [rip+0xffffffffffff77c8]        # 0x1001638
 1009e70:	mov    rcx,r12
 1009e73:	call   QWORD PTR [rip+0xffffffffffff74b7]        # 0x1001330
 1009e79:	mov    rdi,QWORD PTR [rsp+0x88]
 1009e81:	mov    rbp,QWORD PTR [rsp+0x80]
 1009e89:	mov    eax,r14d
 1009e8c:	mov    rbx,QWORD PTR [rsp+0x90]
 1009e94:	add    rsp,0x50
 1009e98:	pop    r15
 1009e9a:	pop    r14
 1009e9c:	pop    r13
 1009e9e:	pop    r12
 1009ea0:	pop    rsi
 1009ea1:	ret    
 1009ea2:	int3   
 1009ea3:	int3   
 1009ea4:	int3   
 1009ea5:	int3   
 1009ea6:	int3   
 1009ea7:	int3   
 1009ea8:	int3   
 1009ea9:	int3   
 1009eaa:	int3   
 1009eab:	int3   
 1009eac:	int3   
 1009ead:	int3   
 1009eae:	int3   
 1009eaf:	int3   
 1009eb0:	rex push rbp
 1009eb2:	push   rsi
 1009eb3:	push   rdi
 1009eb4:	push   r13
 1009eb6:	push   r14
 1009eb8:	sub    rsp,0x40
 1009ebc:	xor    edi,edi
 1009ebe:	mov    rsi,rdx
 1009ec1:	mov    r13,r8
 1009ec4:	mov    eax,edi
 1009ec6:	mov    r14,rcx
 1009ec9:	mov    QWORD PTR [rsp+0x30],rdi
 1009ece:	cmp    BYTE PTR [rcx+0x58],al
 1009ed1:	mov    edx,0x40000000
 1009ed6:	mov    rcx,rsi
 1009ed9:	setne  al
 1009edc:	xor    r9d,r9d
 1009edf:	xor    r8d,r8d
 1009ee2:	inc    eax
 1009ee4:	mov    DWORD PTR [rsp+0x28],0x100080
 1009eec:	mov    DWORD PTR [rsp+0x20],eax
 1009ef0:	call   QWORD PTR [rip+0xffffffffffff7432]        # 0x1001328
 1009ef6:	mov    rbp,rax
 1009ef9:	cmp    rax,0xffffffffffffffff
 1009efd:	jne    0x1009fe6
 1009f03:	call   QWORD PTR [rip+0xffffffffffff7447]        # 0x1001350
 1009f09:	cmp    BYTE PTR [r14+0x58],dil
 1009f0d:	jne    0x1009f60
 1009f0f:	cmp    eax,0x50
 1009f12:	je     0x1009f1b
 1009f14:	cmp    eax,0xb7
 1009f19:	jne    0x1009f60
 1009f1b:	mov    rdx,rsi
 1009f1e:	mov    rcx,r14
 1009f21:	call   0x1007230
 1009f26:	test   al,al
 1009f28:	je     0x1009f99
 1009f2a:	mov    QWORD PTR [rsp+0x30],rdi
 1009f2f:	xor    r9d,r9d
 1009f32:	xor    r8d,r8d
 1009f35:	mov    edx,0x40000000
 1009f3a:	mov    rcx,rsi
 1009f3d:	mov    DWORD PTR [rsp+0x28],0x100080
 1009f45:	mov    DWORD PTR [rsp+0x20],0x2
 1009f4d:	call   QWORD PTR [rip+0xffffffffffff73d5]        # 0x1001328
 1009f53:	mov    rbp,rax
 1009f56:	cmp    rax,0xffffffffffffffff
 1009f5a:	jne    0x1009fe6
 1009f60:	call   QWORD PTR [rip+0xffffffffffff73ea]        # 0x1001350
 1009f66:	mov    edx,eax
 1009f68:	sub    eax,0x2
 1009f6b:	je     0x1009fc8
 1009f6d:	sub    eax,0x4e
 1009f70:	je     0x1009faa
 1009f72:	cmp    eax,0x67
 1009f75:	je     0x1009faa
 1009f77:	mov    edi,0x6
 1009f7c:	mov    r8,rsi
 1009f7f:	mov    DWORD PTR [r14+0x68],edx
 1009f83:	lea    ecx,[rdi+0x71]
 1009f86:	call   0x100e600
 1009f8b:	mov    eax,edi
 1009f8d:	add    rsp,0x40
 1009f91:	pop    r14
 1009f93:	pop    r13
 1009f95:	pop    rdi
 1009f96:	pop    rsi
 1009f97:	pop    rbp
 1009f98:	ret    
 1009f99:	mov    eax,0x6
 1009f9e:	add    rsp,0x40
 1009fa2:	pop    r14
 1009fa4:	pop    r13
 1009fa6:	pop    rdi
 1009fa7:	pop    rsi
 1009fa8:	pop    rbp
 1009fa9:	ret    
 1009faa:	mov    edi,0x6
 1009faf:	mov    rdx,rsi
 1009fb2:	lea    ecx,[rdi+0x68]
 1009fb5:	call   0x100e600
 1009fba:	mov    eax,edi
 1009fbc:	add    rsp,0x40
 1009fc0:	pop    r14
 1009fc2:	pop    r13
 1009fc4:	pop    rdi
 1009fc5:	pop    rsi
 1009fc6:	pop    rbp
 1009fc7:	ret    
 1009fc8:	mov    edi,0x4
 1009fcd:	mov    rdx,rsi
 1009fd0:	lea    ecx,[rdi+0x6b]
 1009fd3:	call   0x100e600
 1009fd8:	mov    eax,edi
 1009fda:	add    rsp,0x40
 1009fde:	pop    r14
 1009fe0:	pop    r13
 1009fe2:	pop    rdi
 1009fe3:	pop    rsi
 1009fe4:	pop    rbp
 1009fe5:	ret    
 1009fe6:	mov    rcx,QWORD PTR [r13+0x8]
 1009fea:	lea    rdx,[rsp+0x88]
 1009ff2:	mov    QWORD PTR [rsp+0x80],r15
 1009ffa:	mov    r15d,DWORD PTR [rcx+0x18]
 1009ffe:	call   QWORD PTR [rip+0xffffffffffff762c]        # 0x1001630
 100a004:	test   eax,eax
 100a006:	jns    0x100a019
 100a008:	mov    edi,0x6
 100a00d:	mov    edx,eax
 100a00f:	lea    ecx,[rdi+0x74]
 100a012:	call   0x100e600
 100a017:	jmp    0x100a074
 100a019:	mov    rdx,QWORD PTR [rsp+0x88]
 100a021:	lea    r9,[rsp+0x70]
 100a026:	mov    r8d,r15d
 100a029:	mov    rcx,rbp
 100a02c:	mov    QWORD PTR [rsp+0x78],rbx
 100a031:	mov    QWORD PTR [rsp+0x20],rdi
 100a036:	call   QWORD PTR [rip+0xffffffffffff7044]        # 0x1001080
 100a03c:	mov    rcx,QWORD PTR [r13+0x8]
 100a040:	mov    ebx,eax
 100a042:	call   QWORD PTR [rip+0xffffffffffff75e0]        # 0x1001628
 100a048:	test   ebx,ebx
 100a04a:	mov    rbx,QWORD PTR [rsp+0x78]
 100a04f:	je     0x100a058
 100a051:	cmp    DWORD PTR [rsp+0x70],r15d
 100a056:	je     0x100a07d
 100a058:	mov    edi,0x6
 100a05d:	call   QWORD PTR [rip+0xffffffffffff72ed]        # 0x1001350
 100a063:	lea    ecx,[rdi+0x73]
 100a066:	mov    edx,eax
 100a068:	mov    r8,rsi
 100a06b:	mov    DWORD PTR [r14+0x68],eax
 100a06f:	call   0x100e600
 100a074:	mov    rcx,rsi
 100a077:	call   QWORD PTR [rip+0xffffffffffff701b]        # 0x1001098
 100a07d:	mov    rcx,rbp
 100a080:	call   QWORD PTR [rip+0xffffffffffff72aa]        # 0x1001330
 100a086:	mov    r15,QWORD PTR [rsp+0x80]
 100a08e:	mov    eax,edi
 100a090:	add    rsp,0x40
 100a094:	pop    r14
 100a096:	pop    r13
 100a098:	pop    rdi
 100a099:	pop    rsi
 100a09a:	pop    rbp
 100a09b:	ret    
 100a09c:	int3   
 100a09d:	int3   
 100a09e:	int3   
 100a09f:	int3   
 100a0a0:	int3   
 100a0a1:	int3   
 100a0a2:	int3   
 100a0a3:	int3   
 100a0a4:	int3   
 100a0a5:	int3   
 100a0a6:	int3   
 100a0a7:	int3   
 100a0a8:	int3   
 100a0a9:	int3   
 100a0aa:	int3   
 100a0ab:	int3   
 100a0ac:	int3   
 100a0ad:	int3   
 100a0ae:	int3   
 100a0af:	int3   
 100a0b0:	mov    QWORD PTR [rsp+0x18],rbx
 100a0b5:	mov    QWORD PTR [rsp+0x20],rbp
 100a0ba:	push   rdi
 100a0bb:	sub    rsp,0x30
 100a0bf:	xor    ebx,ebx
 100a0c1:	mov    rbp,rdx
 100a0c4:	mov    rdi,rcx
 100a0c7:	test   rdx,rdx
 100a0ca:	je     0x100a157
 100a0d0:	mov    r8,rdx
 100a0d3:	lea    ecx,[rbx+0x3]
 100a0d6:	or     r9d,0xffffffff
 100a0da:	xor    edx,edx
 100a0dc:	mov    QWORD PTR [rsp+0x40],rsi
 100a0e1:	mov    DWORD PTR [rsp+0x28],ebx
 100a0e5:	mov    QWORD PTR [rsp+0x48],r14
 100a0ea:	mov    QWORD PTR [rsp+0x20],rbx
 100a0ef:	call   QWORD PTR [rip+0xffffffffffff6fbb]        # 0x10010b0
 100a0f5:	lea    edx,[rax-0x1]
 100a0f8:	xor    ecx,ecx
 100a0fa:	mov    r14d,eax
 100a0fd:	call   QWORD PTR [rip+0xffffffffffff74f5]        # 0x10015f8
 100a103:	mov    rsi,rax
 100a106:	test   rax,rax
 100a109:	je     0x100a137
 100a10b:	lea    ecx,[rbx+0x3]
 100a10e:	or     r9d,0xffffffff
 100a112:	mov    r8,rbp
 100a115:	xor    edx,edx
 100a117:	mov    DWORD PTR [rsp+0x28],r14d
 100a11c:	mov    QWORD PTR [rsp+0x20],rax
 100a121:	call   QWORD PTR [rip+0xffffffffffff6f89]        # 0x10010b0
 100a127:	cmp    eax,r14d
 100a12a:	je     0x100a137
 100a12c:	mov    rcx,rsi
 100a12f:	call   QWORD PTR [rip+0xffffffffffff74a3]        # 0x10015d8
 100a135:	jmp    0x100a13a
 100a137:	mov    rbx,rsi
 100a13a:	mov    r14,QWORD PTR [rsp+0x48]
 100a13f:	mov    rsi,QWORD PTR [rsp+0x40]
 100a144:	mov    QWORD PTR [rdi],rbx
 100a147:	test   rbx,rbx
 100a14a:	jne    0x100a15a
 100a14c:	mov    ecx,0x8007000e
 100a151:	call   0x1004f80
 100a156:	int3   
 100a157:	mov    QWORD PTR [rcx],rbx
 100a15a:	mov    rbx,QWORD PTR [rsp+0x50]
 100a15f:	mov    rbp,QWORD PTR [rsp+0x58]
 100a164:	mov    rax,rdi
 100a167:	add    rsp,0x30
 100a16b:	pop    rdi
 100a16c:	ret    
 100a16d:	int3   
 100a16e:	int3   
 100a16f:	int3   
 100a170:	int3   
 100a171:	int3   
 100a172:	int3   
 100a173:	int3   
 100a174:	int3   
 100a175:	int3   
 100a176:	int3   
 100a177:	int3   
 100a178:	int3   
 100a179:	int3   
 100a17a:	int3   
 100a17b:	int3   
 100a17c:	int3   
 100a17d:	int3   
 100a17e:	int3   
 100a17f:	int3   
 100a180:	mov    QWORD PTR [rsp+0x20],rsi
 100a185:	push   rdi
 100a186:	sub    rsp,0x30
 100a18a:	mov    rdi,rcx
 100a18d:	mov    rcx,QWORD PTR [rcx]
 100a190:	mov    QWORD PTR [rsp+0x40],rbx
 100a195:	mov    QWORD PTR [rsp+0x48],rbp
 100a19a:	mov    rsi,rdx
 100a19d:	mov    QWORD PTR [rsp+0x50],r14
 100a1a2:	call   QWORD PTR [rip+0xffffffffffff7430]        # 0x10015d8
 100a1a8:	xor    ebx,ebx
 100a1aa:	test   rsi,rsi
 100a1ad:	je     0x100a20f
 100a1af:	lea    ecx,[rbx+0x3]
 100a1b2:	or     r9d,0xffffffff
 100a1b6:	mov    r8,rsi
 100a1b9:	xor    edx,edx
 100a1bb:	mov    DWORD PTR [rsp+0x28],ebx
 100a1bf:	mov    QWORD PTR [rsp+0x20],rbx
 100a1c4:	call   QWORD PTR [rip+0xffffffffffff6ee6]        # 0x10010b0
 100a1ca:	xor    ecx,ecx
 100a1cc:	lea    edx,[rax-0x1]
 100a1cf:	mov    r14d,eax
 100a1d2:	call   QWORD PTR [rip+0xffffffffffff7420]        # 0x10015f8
 100a1d8:	mov    rbp,rax
 100a1db:	test   rax,rax
 100a1de:	je     0x100a20c
 100a1e0:	lea    ecx,[rbx+0x3]
 100a1e3:	or     r9d,0xffffffff
 100a1e7:	mov    r8,rsi
 100a1ea:	xor    edx,edx
 100a1ec:	mov    DWORD PTR [rsp+0x28],r14d
 100a1f1:	mov    QWORD PTR [rsp+0x20],rax
 100a1f6:	call   QWORD PTR [rip+0xffffffffffff6eb4]        # 0x10010b0
 100a1fc:	cmp    eax,r14d
 100a1ff:	je     0x100a20c
 100a201:	mov    rcx,rbp
 100a204:	call   QWORD PTR [rip+0xffffffffffff73ce]        # 0x10015d8
 100a20a:	jmp    0x100a20f
 100a20c:	mov    rbx,rbp
 100a20f:	mov    r14,QWORD PTR [rsp+0x50]
 100a214:	mov    rbp,QWORD PTR [rsp+0x48]
 100a219:	mov    QWORD PTR [rdi],rbx
 100a21c:	test   rbx,rbx
 100a21f:	mov    rbx,QWORD PTR [rsp+0x40]
 100a224:	jne    0x100a236
 100a226:	test   rsi,rsi
 100a229:	je     0x100a236
 100a22b:	mov    ecx,0x8007000e
 100a230:	call   0x1004f80
 100a235:	int3   
 100a236:	mov    rax,rdi
 100a239:	mov    rsi,QWORD PTR [rsp+0x58]
 100a23e:	add    rsp,0x30
 100a242:	pop    rdi
 100a243:	ret    
 100a244:	int3   
 100a245:	int3   
 100a246:	int3   
 100a247:	int3   
 100a248:	int3   
 100a249:	int3   
 100a24a:	int3   
 100a24b:	int3   
 100a24c:	int3   
 100a24d:	int3   
 100a24e:	int3   
 100a24f:	int3   
 100a250:	rex.W jmp QWORD PTR [rip+0xffffffffffff73f9]        # 0x1001650
 100a257:	int3   
 100a258:	int3   
 100a259:	int3   
 100a25a:	int3   
 100a25b:	int3   
 100a25c:	int3   
 100a25d:	int3   
 100a25e:	int3   
 100a25f:	int3   
 100a260:	rex push rbp
 100a262:	push   rsi
 100a263:	push   rdi
 100a264:	push   r12
 100a266:	push   r13
 100a268:	push   r14
 100a26a:	push   r15
 100a26c:	lea    rbp,[rsp-0xa0]
 100a274:	sub    rsp,0x1a0
 100a27b:	mov    QWORD PTR [rbp-0x28],0xfffffffffffffffe
 100a283:	mov    QWORD PTR [rsp+0x1f8],rbx
 100a28b:	mov    rax,QWORD PTR [rip+0x10f4e]        # 0x101b1e0
 100a292:	xor    rax,rsp
 100a295:	mov    QWORD PTR [rbp+0x90],rax
 100a29c:	mov    r14,r8
 100a29f:	mov    r12,rdx
 100a2a2:	mov    rdi,rcx
 100a2a5:	mov    rax,QWORD PTR [rip+0xffffffffffff7bb4]        # 0x1001e60
 100a2ac:	mov    QWORD PTR [rbp+0x10],rax
 100a2b0:	mov    rax,QWORD PTR [rip+0xffffffffffff7bb1]        # 0x1001e68
 100a2b7:	mov    QWORD PTR [rbp+0x18],rax
 100a2bb:	mov    rax,QWORD PTR [rip+0xffffffffffff7bae]        # 0x1001e70
 100a2c2:	mov    QWORD PTR [rbp+0x20],rax
 100a2c6:	mov    rax,QWORD PTR [rip+0xffffffffffff7bab]        # 0x1001e78
 100a2cd:	mov    QWORD PTR [rbp+0x28],rax
 100a2d1:	mov    eax,DWORD PTR [rip+0xffffffffffff7ba9]        # 0x1001e80
 100a2d7:	mov    DWORD PTR [rbp+0x30],eax
 100a2da:	movzx  eax,WORD PTR [rip+0xffffffffffff7ba3]        # 0x1001e84
 100a2e1:	mov    WORD PTR [rbp+0x34],ax
 100a2e5:	xor    r13d,r13d
 100a2e8:	mov    DWORD PTR [rsp+0x54],r13d
 100a2ed:	mov    QWORD PTR [rbp-0x60],r13
 100a2f1:	lea    rcx,[rsp+0x60]
 100a2f6:	call   QWORD PTR [rip+0xffffffffffff7304]        # 0x1001600
 100a2fc:	nop
 100a2fd:	lea    rcx,[rbp-0x80]
 100a301:	call   QWORD PTR [rip+0xffffffffffff72f9]        # 0x1001600
 100a307:	nop
 100a308:	mov    ebx,r13d
 100a30b:	nop    DWORD PTR [rax+rax*1+0x0]
 100a310:	movsxd rax,ebx
 100a313:	lea    rcx,[rax+rax*2]
 100a317:	lea    rcx,[rbp+rcx*8-0x58]
 100a31c:	call   QWORD PTR [rip+0xffffffffffff72de]        # 0x1001600
 100a322:	inc    ebx
 100a324:	cmp    ebx,0x2
 100a327:	jb     0x100a310
 100a329:	lea    rax,[rbp-0x68]
 100a32d:	mov    QWORD PTR [rsp+0x20],rax
 100a332:	lea    r9,[rbp+0x0]
 100a336:	mov    r8b,0x1
 100a339:	mov    rdx,r12
 100a33c:	mov    rcx,rdi
 100a33f:	call   0x100b330
 100a344:	mov    ebx,eax
 100a346:	test   eax,eax
 100a348:	je     0x100a370
 100a34a:	lea    rcx,[rbp-0x80]
 100a34e:	call   QWORD PTR [rip+0xffffffffffff72fc]        # 0x1001650
 100a354:	nop
 100a355:	lea    rcx,[rsp+0x60]
 100a35a:	call   QWORD PTR [rip+0xffffffffffff72f0]        # 0x1001650
 100a360:	nop
 100a361:	xor    ecx,ecx
 100a363:	call   QWORD PTR [rip+0xffffffffffff726f]        # 0x10015d8
 100a369:	mov    eax,ebx
 100a36b:	jmp    0x100a60e
 100a370:	mov    eax,0x8
 100a375:	mov    WORD PTR [rbp-0x58],ax
 100a379:	mov    WORD PTR [rbp-0x40],ax
 100a37d:	mov    rsi,QWORD PTR [rbp-0x68]
 100a381:	mov    rcx,rsi
 100a384:	call   QWORD PTR [rip+0xffffffffffff725e]        # 0x10015e8
 100a38a:	mov    QWORD PTR [rbp-0x50],rax
 100a38e:	mov    r8d,0x27
 100a394:	lea    rdx,[rbp+0x40]
 100a398:	lea    rcx,[rbp+0x0]
 100a39c:	call   QWORD PTR [rip+0xffffffffffff732e]        # 0x10016d0
 100a3a2:	lea    rcx,[rbp+0x40]
 100a3a6:	call   QWORD PTR [rip+0xffffffffffff723c]        # 0x10015e8
 100a3ac:	mov    QWORD PTR [rbp-0x38],rax
 100a3b0:	xor    ecx,ecx
 100a3b2:	lea    r15d,[rcx+0x6]
 100a3b6:	call   QWORD PTR [rip+0xffffffffffff721c]        # 0x10015d8
 100a3bc:	lea    rcx,[rbp+0x10]
 100a3c0:	call   QWORD PTR [rip+0xffffffffffff7222]        # 0x10015e8
 100a3c6:	mov    rbx,rax
 100a3c9:	mov    QWORD PTR [rbp-0x60],rax
 100a3cd:	test   rax,rax
 100a3d0:	jne    0x100a3dd
 100a3d2:	mov    ecx,0x8007000e
 100a3d7:	call   0x1004f80
 100a3dc:	int3   
 100a3dd:	mov    DWORD PTR [rsp+0x40],0x2
 100a3e5:	lea    rax,[rbp-0x58]
 100a3e9:	mov    QWORD PTR [rsp+0x38],rax
 100a3ee:	lea    rax,[rsp+0x54]
 100a3f3:	mov    QWORD PTR [rsp+0x30],rax
 100a3f8:	mov    QWORD PTR [rsp+0x28],r13
 100a3fd:	mov    BYTE PTR [rsp+0x20],0x1
 100a402:	mov    r9d,0x4
 100a408:	mov    r8,rsi
 100a40b:	mov    rdx,rbx
 100a40e:	mov    rcx,rdi
 100a411:	call   0x100aa70
 100a416:	mov    rdi,rax
 100a419:	test   rax,rax
 100a41c:	je     0x100a544
 100a422:	mov    r8,QWORD PTR [rax]
 100a425:	lea    rdx,[rsp+0x50]
 100a42a:	mov    rcx,rax
 100a42d:	call   QWORD PTR [r8+0xa0]
 100a434:	mov    esi,eax
 100a436:	test   eax,eax
 100a438:	jns    0x100a448
 100a43a:	mov    rdx,QWORD PTR [rdi]
 100a43d:	mov    rcx,rdi
 100a440:	call   QWORD PTR [rdx+0x10]
 100a443:	jmp    0x100a548
 100a448:	cmp    WORD PTR [rsp+0x50],0x0
 100a44e:	je     0x100a467
 100a450:	mov    r15d,0x4
 100a456:	mov    rdx,r12
 100a459:	lea    ecx,[r15+0x6b]
 100a45d:	call   0x100e600
 100a462:	jmp    0x100a539
 100a467:	mov    rax,QWORD PTR [rdi]
 100a46a:	lea    rdx,[rsp+0x58]
 100a46f:	mov    rcx,rdi
 100a472:	call   QWORD PTR [rax+0xa8]
 100a478:	mov    esi,eax
 100a47a:	test   eax,eax
 100a47c:	jns    0x100a48c
 100a47e:	mov    rax,QWORD PTR [rdi]
 100a481:	mov    rcx,rdi
 100a484:	call   QWORD PTR [rax+0x10]
 100a487:	jmp    0x100a548
 100a48c:	cmp    WORD PTR [rsp+0x60],0x3
 100a492:	je     0x100a4b5
 100a494:	lea    rcx,[rsp+0x60]
 100a499:	call   QWORD PTR [rip+0xffffffffffff71b1]        # 0x1001650
 100a49f:	test   eax,eax
 100a4a1:	jns    0x100a4ab
 100a4a3:	mov    ecx,eax
 100a4a5:	call   0x1004f80
 100a4aa:	int3   
 100a4ab:	mov    eax,0x3
 100a4b0:	mov    WORD PTR [rsp+0x60],ax
 100a4b5:	mov    DWORD PTR [rsp+0x68],r13d
 100a4ba:	movups xmm0,XMMWORD PTR [rsp+0x60]
 100a4bf:	movaps XMMWORD PTR [rbp-0x20],xmm0
 100a4c3:	movsd  xmm1,QWORD PTR [rsp+0x70]
 100a4c9:	movsd  QWORD PTR [rbp-0x10],xmm1
 100a4ce:	mov    rcx,QWORD PTR [rsp+0x58]
 100a4d3:	mov    rax,QWORD PTR [rcx]
 100a4d6:	lea    r8,[rsp+0x78]
 100a4db:	lea    rdx,[rbp-0x20]
 100a4df:	call   QWORD PTR [rax+0x50]
 100a4e2:	mov    esi,eax
 100a4e4:	test   eax,eax
 100a4e6:	jns    0x100a4ff
 100a4e8:	mov    rcx,QWORD PTR [rsp+0x58]
 100a4ed:	mov    rax,QWORD PTR [rcx]
 100a4f0:	call   QWORD PTR [rax+0x10]
 100a4f3:	mov    r11,QWORD PTR [rdi]
 100a4f6:	mov    rcx,rdi
 100a4f9:	call   QWORD PTR [r11+0x10]
 100a4fd:	jmp    0x100a548
 100a4ff:	mov    rcx,QWORD PTR [rsp+0x78]
 100a504:	mov    rax,QWORD PTR [rcx]
 100a507:	lea    rdx,[rbp-0x80]
 100a50b:	call   QWORD PTR [rax+0x68]
 100a50e:	mov    esi,eax
 100a510:	test   eax,eax
 100a512:	jns    0x100a520
 100a514:	lea    rcx,[rbp-0x80]
 100a518:	call   QWORD PTR [rip+0xffffffffffff7132]        # 0x1001650
 100a51e:	jmp    0x100a523
 100a520:	mov    r15d,r13d
 100a523:	mov    rcx,QWORD PTR [rsp+0x78]
 100a528:	mov    rax,QWORD PTR [rcx]
 100a52b:	call   QWORD PTR [rax+0x10]
 100a52e:	mov    rcx,QWORD PTR [rsp+0x58]
 100a533:	mov    rax,QWORD PTR [rcx]
 100a536:	call   QWORD PTR [rax+0x10]
 100a539:	mov    rax,QWORD PTR [rdi]
 100a53c:	mov    rcx,rdi
 100a53f:	call   QWORD PTR [rax+0x10]
 100a542:	jmp    0x100a548
 100a544:	mov    esi,DWORD PTR [rsp+0x54]
 100a548:	mov    edi,r13d
 100a54b:	nop    DWORD PTR [rax+rax*1+0x0]
 100a550:	movsxd rax,edi
 100a553:	lea    rcx,[rax+rax*2]
 100a557:	lea    rcx,[rbp+rcx*8-0x58]
 100a55c:	call   QWORD PTR [rip+0xffffffffffff70ee]        # 0x1001650
 100a562:	inc    edi
 100a564:	cmp    edi,0x2
 100a567:	jb     0x100a550
 100a569:	test   esi,esi
 100a56b:	jns    0x100a57c
 100a56d:	mov    r8,r12
 100a570:	mov    edx,esi
 100a572:	mov    ecx,0x76
 100a577:	call   0x100e600
 100a57c:	mov    rcx,r14
 100a57f:	call   QWORD PTR [rip+0xffffffffffff707b]        # 0x1001600
 100a585:	test   r14,r14
 100a588:	je     0x100a5eb
 100a58a:	mov    rcx,r14
 100a58d:	call   QWORD PTR [rip+0xffffffffffff70bd]        # 0x1001650
 100a593:	test   eax,eax
 100a595:	js     0x100a5eb
 100a597:	mov    r9d,0x18
 100a59d:	lea    r8,[rbp-0x80]
 100a5a1:	mov    edx,r9d
 100a5a4:	mov    rcx,r14
 100a5a7:	call   QWORD PTR [rip+0xffffffffffff6f6b]        # 0x1001518
 100a5ad:	test   eax,eax
 100a5af:	je     0x100a5e6
 100a5b1:	cmp    eax,0xc
 100a5b4:	je     0x100a5db
 100a5b6:	cmp    eax,0x16
 100a5b9:	je     0x100a5d0
 100a5bb:	cmp    eax,0x22
 100a5be:	je     0x100a5d0
 100a5c0:	cmp    eax,0x50
 100a5c3:	je     0x100a5e6
 100a5c5:	mov    ecx,0x80004005
 100a5ca:	call   0x1004f80
 100a5cf:	int3   
 100a5d0:	mov    ecx,0x80070057
 100a5d5:	call   0x1004f80
 100a5da:	int3   
 100a5db:	mov    ecx,0x8007000e
 100a5e0:	call   0x1004f80
 100a5e5:	int3   
 100a5e6:	mov    WORD PTR [rbp-0x80],r13w
 100a5eb:	lea    rcx,[rbp-0x80]
 100a5ef:	call   QWORD PTR [rip+0xffffffffffff705b]        # 0x1001650
 100a5f5:	nop
 100a5f6:	lea    rcx,[rsp+0x60]
 100a5fb:	call   QWORD PTR [rip+0xffffffffffff704f]        # 0x1001650
 100a601:	nop
 100a602:	mov    rcx,rbx
 100a605:	call   QWORD PTR [rip+0xffffffffffff6fcd]        # 0x10015d8
 100a60b:	mov    eax,r15d
 100a60e:	mov    rcx,QWORD PTR [rbp+0x90]
 100a615:	xor    rcx,rsp
 100a618:	call   0x100daf0
 100a61d:	mov    rbx,QWORD PTR [rsp+0x1f8]
 100a625:	add    rsp,0x1a0
 100a62c:	pop    r15
 100a62e:	pop    r14
 100a630:	pop    r13
 100a632:	pop    r12
 100a634:	pop    rdi
 100a635:	pop    rsi
 100a636:	pop    rbp
 100a637:	ret    
 100a638:	int3   
 100a639:	int3   
 100a63a:	int3   
 100a63b:	int3   
 100a63c:	int3   
 100a63d:	int3   
 100a63e:	int3   
 100a63f:	int3   
 100a640:	rex push rbp
 100a642:	push   rbx
 100a643:	push   rsi
 100a644:	push   rdi
 100a645:	push   r12
 100a647:	push   r13
 100a649:	push   r14
 100a64b:	push   r15
 100a64d:	lea    rbp,[rsp-0x178]
 100a655:	sub    rsp,0x278
 100a65c:	mov    QWORD PTR [rbp-0x78],0xfffffffffffffffe
 100a664:	mov    rax,QWORD PTR [rip+0x10b75]        # 0x101b1e0
 100a66b:	xor    rax,rsp
 100a66e:	mov    QWORD PTR [rbp+0x160],rax
 100a675:	mov    r13,r9
 100a678:	mov    QWORD PTR [rsp+0x70],r8
 100a67d:	mov    r12,rdx
 100a680:	mov    r14,rcx
 100a683:	mov    rax,QWORD PTR [rip+0xffffffffffff77fe]        # 0x1001e88
 100a68a:	mov    QWORD PTR [rbp+0xe0],rax
 100a691:	mov    rax,QWORD PTR [rip+0xffffffffffff77f8]        # 0x1001e90
 100a698:	mov    QWORD PTR [rbp+0xe8],rax
 100a69f:	mov    rax,QWORD PTR [rip+0xffffffffffff77f2]        # 0x1001e98
 100a6a6:	mov    QWORD PTR [rbp+0xf0],rax
 100a6ad:	mov    rax,QWORD PTR [rip+0xffffffffffff77ec]        # 0x1001ea0
 100a6b4:	mov    QWORD PTR [rbp+0xf8],rax
 100a6bb:	mov    eax,DWORD PTR [rip+0xffffffffffff77e7]        # 0x1001ea8
 100a6c1:	mov    DWORD PTR [rbp+0x100],eax
 100a6c7:	movzx  eax,WORD PTR [rip+0xffffffffffff77de]        # 0x1001eac
 100a6ce:	mov    WORD PTR [rbp+0x104],ax
 100a6d5:	xor    edi,edi
 100a6d7:	mov    ebx,edi
 100a6d9:	mov    QWORD PTR [rbp-0x80],rbx
 100a6dd:	mov    esi,edi
 100a6df:	nop
 100a6e0:	movsxd rax,esi
 100a6e3:	lea    rcx,[rax+rax*2]
 100a6e7:	lea    rcx,[rbp+rcx*8-0x60]
 100a6ec:	call   QWORD PTR [rip+0xffffffffffff6f0e]        # 0x1001600
 100a6f2:	inc    esi
 100a6f4:	cmp    esi,0xd
 100a6f7:	jb     0x100a6e0
 100a6f9:	lea    rax,[rsp+0x60]
 100a6fe:	mov    QWORD PTR [rsp+0x20],rax
 100a703:	lea    r9,[rbp-0x70]
 100a707:	xor    r8d,r8d
 100a70a:	mov    rdx,r12
 100a70d:	mov    rcx,r14
 100a710:	call   0x100b330
 100a715:	mov    esi,eax
 100a717:	test   eax,eax
 100a719:	je     0x100a722
 100a71b:	xor    ecx,ecx
 100a71d:	jmp    0x100aa34
 100a722:	mov    esi,0x6
 100a727:	xor    r8d,r8d
 100a72a:	mov    edx,0x13e
 100a72f:	mov    r15,QWORD PTR [rsp+0x60]
 100a734:	mov    rcx,r15
 100a737:	call   0x100fab0
 100a73c:	test   eax,eax
 100a73e:	jns    0x100a752
 100a740:	mov    rdx,r15
 100a743:	mov    ecx,0x96
 100a748:	call   0x100e600
 100a74d:	jmp    0x100aa10
 100a752:	mov    rcx,r15
 100a755:	call   QWORD PTR [rip+0xffffffffffff6b25]        # 0x1001280
 100a75b:	cmp    eax,0x80
 100a760:	jle    0x100a774
 100a762:	mov    rdx,r15
 100a765:	mov    ecx,0x97
 100a76a:	call   0x100e600
 100a76f:	jmp    0x100aa10
 100a774:	mov    r8d,0x27
 100a77a:	lea    rdx,[rbp+0x110]
 100a781:	lea    rcx,[rbp-0x70]
 100a785:	call   QWORD PTR [rip+0xffffffffffff6f45]        # 0x10016d0
 100a78b:	cmp    BYTE PTR [r14+0x58],0x0
 100a790:	jne    0x100a7b7
 100a792:	xor    r8d,r8d
 100a795:	mov    rdx,r12
 100a798:	mov    rcx,r14
 100a79b:	call   0x1008300
 100a7a0:	test   eax,eax
 100a7a2:	jne    0x100a7b7
 100a7a4:	mov    rdx,r12
 100a7a7:	mov    rcx,r14
 100a7aa:	call   0x1007230
 100a7af:	test   al,al
 100a7b1:	je     0x100aa10
 100a7b7:	lea    r9,[rsp+0x50]
 100a7bc:	mov    r8d,DWORD PTR [rbp+0x1e0]
 100a7c3:	mov    rdx,r13
 100a7c6:	mov    rcx,r14
 100a7c9:	call   0x100c320
 100a7ce:	mov    DWORD PTR [rsp+0x68],eax
 100a7d2:	test   eax,eax
 100a7d4:	js     0x100aa10
 100a7da:	mov    QWORD PTR [rsp+0x60],rdi
 100a7df:	mov    rcx,QWORD PTR [rsp+0x50]
 100a7e4:	test   rcx,rcx
 100a7e7:	je     0x100a7ff
 100a7e9:	mov    rax,QWORD PTR [rcx]
 100a7ec:	lea    r8,[rsp+0x60]
 100a7f1:	lea    rdx,[rip+0xffffffffffff76b8]        # 0x1001eb0
 100a7f8:	call   QWORD PTR [rax]
 100a7fa:	mov    rcx,QWORD PTR [rsp+0x50]
 100a7ff:	mov    edx,0x8
 100a804:	mov    WORD PTR [rbp-0x60],dx
 100a808:	mov    WORD PTR [rbp-0x48],dx
 100a80c:	mov    WORD PTR [rbp-0x30],dx
 100a810:	mov    ebx,0x7
 100a815:	mov    WORD PTR [rbp-0x18],bx
 100a819:	mov    WORD PTR [rbp+0x0],dx
 100a81d:	mov    eax,0x13
 100a822:	mov    WORD PTR [rbp+0x30],ax
 100a826:	mov    WORD PTR [rbp+0x48],ax
 100a82a:	mov    eax,0x3
 100a82f:	mov    WORD PTR [rbp+0x60],ax
 100a833:	mov    WORD PTR [rbp+0x78],ax
 100a837:	mov    WORD PTR [rbp+0x90],ax
 100a83e:	mov    WORD PTR [rbp+0xa8],dx
 100a845:	mov    WORD PTR [rbp+0xc0],dx
 100a84c:	mov    rax,QWORD PTR [rcx]
 100a84f:	lea    rdx,[rsp+0x78]
 100a854:	call   QWORD PTR [rax+0x88]
 100a85a:	movsd  xmm5,QWORD PTR [rsp+0x78]
 100a860:	movsd  QWORD PTR [rbp-0x10],xmm5
 100a865:	mov    WORD PTR [rbp-0x18],bx
 100a869:	mov    rcx,QWORD PTR [rsp+0x50]
 100a86e:	mov    rax,QWORD PTR [rcx]
 100a871:	lea    rdx,[rbp+0x50]
 100a875:	call   QWORD PTR [rax+0x58]
 100a878:	mov    rcx,QWORD PTR [rsp+0x50]
 100a87d:	mov    rax,QWORD PTR [rcx]
 100a880:	lea    rdx,[rbp+0x68]
 100a884:	call   QWORD PTR [rax+0xb8]
 100a88a:	mov    rcx,QWORD PTR [rsp+0x50]
 100a88f:	mov    rax,QWORD PTR [rcx]
 100a892:	lea    rdx,[rbp+0x80]
 100a899:	call   QWORD PTR [rax+0xc8]
 100a89f:	mov    rcx,QWORD PTR [rsp+0x50]
 100a8a4:	mov    rax,QWORD PTR [rcx]
 100a8a7:	lea    rdx,[rbp+0x98]
 100a8ae:	call   QWORD PTR [rax+0xd8]
 100a8b4:	mov    rcx,QWORD PTR [rsp+0x50]
 100a8b9:	mov    rax,QWORD PTR [rcx]
 100a8bc:	lea    rdx,[rsp+0x58]
 100a8c1:	call   QWORD PTR [rax+0xe8]
 100a8c7:	mov    r11,QWORD PTR [rsp+0x58]
 100a8cc:	mov    QWORD PTR [rbp+0xb0],r11
 100a8d3:	mov    rcx,QWORD PTR [rsp+0x50]
 100a8d8:	mov    rax,QWORD PTR [rcx]
 100a8db:	lea    rdx,[rsp+0x58]
 100a8e0:	call   QWORD PTR [rax+0xf8]
 100a8e6:	mov    r11,QWORD PTR [rsp+0x58]
 100a8eb:	mov    QWORD PTR [rbp+0xc8],r11
 100a8f2:	mov    rcx,QWORD PTR [rsp+0x60]
 100a8f7:	mov    rax,QWORD PTR [rcx]
 100a8fa:	lea    rdx,[rsp+0x58]
 100a8ff:	call   QWORD PTR [rax+0x38]
 100a902:	mov    r11,QWORD PTR [rsp+0x58]
 100a907:	mov    QWORD PTR [rbp-0x40],r11
 100a90b:	mov    rcx,QWORD PTR [rsp+0x60]
 100a910:	mov    rax,QWORD PTR [rcx]
 100a913:	lea    rdx,[rsp+0x58]
 100a918:	call   QWORD PTR [rax+0x58]
 100a91b:	mov    r11,QWORD PTR [rsp+0x58]
 100a920:	mov    QWORD PTR [rbp-0x28],r11
 100a924:	mov    rcx,QWORD PTR [rsp+0x70]
 100a929:	mov    rax,QWORD PTR [rcx]
 100a92c:	mov    QWORD PTR [rbp+0x18],rax
 100a930:	mov    rax,QWORD PTR [rcx+0x8]
 100a934:	mov    QWORD PTR [rbp+0x20],rax
 100a938:	mov    rax,QWORD PTR [rcx+0x10]
 100a93c:	mov    QWORD PTR [rbp+0x28],rax
 100a940:	mov    rcx,r15
 100a943:	call   QWORD PTR [rip+0xffffffffffff6c9f]        # 0x10015e8
 100a949:	mov    QWORD PTR [rbp-0x58],rax
 100a94d:	mov    DWORD PTR [rbp+0x38],edi
 100a950:	lea    rcx,[rbp+0x110]
 100a957:	call   QWORD PTR [rip+0xffffffffffff6c8b]        # 0x10015e8
 100a95d:	mov    QWORD PTR [rbp+0x8],rax
 100a961:	mov    rcx,QWORD PTR [rsp+0x50]
 100a966:	mov    rax,QWORD PTR [rcx]
 100a969:	call   QWORD PTR [rax+0x10]
 100a96c:	xor    ecx,ecx
 100a96e:	call   QWORD PTR [rip+0xffffffffffff6c64]        # 0x10015d8
 100a974:	lea    rcx,[rbp+0xe0]
 100a97b:	call   QWORD PTR [rip+0xffffffffffff6c67]        # 0x10015e8
 100a981:	mov    rbx,rax
 100a984:	mov    QWORD PTR [rbp-0x80],rax
 100a988:	test   rax,rax
 100a98b:	jne    0x100a998
 100a98d:	mov    ecx,0x8007000e
 100a992:	call   0x1004f80
 100a997:	int3   
 100a998:	mov    DWORD PTR [rsp+0x40],0xd
 100a9a0:	lea    rax,[rbp-0x60]
 100a9a4:	mov    QWORD PTR [rsp+0x38],rax
 100a9a9:	lea    rax,[rsp+0x68]
 100a9ae:	mov    QWORD PTR [rsp+0x30],rax
 100a9b3:	lea    rax,[rsp+0x70]
 100a9b8:	mov    QWORD PTR [rsp+0x28],rax
 100a9bd:	mov    BYTE PTR [rsp+0x20],0x0
 100a9c2:	mov    r9d,0x4
 100a9c8:	mov    r8,r15
 100a9cb:	mov    rdx,rbx
 100a9ce:	mov    rcx,r14
 100a9d1:	call   0x100aa70
 100a9d6:	test   rax,rax
 100a9d9:	je     0x100a9e4
 100a9db:	mov    rdx,QWORD PTR [rax]
 100a9de:	mov    rcx,rax
 100a9e1:	call   QWORD PTR [rdx+0x10]
 100a9e4:	mov    r8d,DWORD PTR [rsp+0x68]
 100a9e9:	test   r8d,r8d
 100a9ec:	js     0x100a9f2
 100a9ee:	mov    esi,edi
 100a9f0:	jmp    0x100aa00
 100a9f2:	mov    rdx,r12
 100a9f5:	mov    ecx,0x7e
 100a9fa:	call   0x100e600
 100a9ff:	nop
 100aa00:	mov    rcx,QWORD PTR [rsp+0x60]
 100aa05:	test   rcx,rcx
 100aa08:	je     0x100aa10
 100aa0a:	mov    rax,QWORD PTR [rcx]
 100aa0d:	call   QWORD PTR [rax+0x10]
 100aa10:	cmp    edi,0x5
 100aa13:	je     0x100aa2a
 100aa15:	movsxd rcx,edi
 100aa18:	lea    rdx,[rcx+rcx*2]
 100aa1c:	lea    rcx,[rbp-0x60]
 100aa20:	lea    rcx,[rcx+rdx*8]
 100aa24:	call   QWORD PTR [rip+0xffffffffffff6c26]        # 0x1001650
 100aa2a:	inc    edi
 100aa2c:	cmp    edi,0xd
 100aa2f:	jb     0x100aa10
 100aa31:	mov    rcx,rbx
 100aa34:	call   QWORD PTR [rip+0xffffffffffff6b9e]        # 0x10015d8
 100aa3a:	mov    eax,esi
 100aa3c:	mov    rcx,QWORD PTR [rbp+0x160]
 100aa43:	xor    rcx,rsp
 100aa46:	call   0x100daf0
 100aa4b:	add    rsp,0x278
 100aa52:	pop    r15
 100aa54:	pop    r14
 100aa56:	pop    r13
 100aa58:	pop    r12
 100aa5a:	pop    rdi
 100aa5b:	pop    rsi
 100aa5c:	pop    rbx
 100aa5d:	pop    rbp
 100aa5e:	ret    
 100aa5f:	int3   
 100aa60:	int3   
 100aa61:	int3   
 100aa62:	int3   
 100aa63:	int3   
 100aa64:	int3   
 100aa65:	int3   
 100aa66:	int3   
 100aa67:	int3   
 100aa68:	int3   
 100aa69:	int3   
 100aa6a:	int3   
 100aa6b:	int3   
 100aa6c:	int3   
 100aa6d:	int3   
 100aa6e:	int3   
 100aa6f:	int3   
 100aa70:	mov    rax,rsp
 100aa73:	mov    DWORD PTR [rax+0x20],r9d
 100aa77:	mov    QWORD PTR [rax+0x10],rdx
 100aa7b:	push   rdi
 100aa7c:	push   r12
 100aa7e:	push   r13
 100aa80:	push   r14
 100aa82:	push   r15
 100aa84:	sub    rsp,0x110
 100aa8b:	mov    QWORD PTR [rax-0x68],0xfffffffffffffffe
 100aa93:	mov    QWORD PTR [rax+0x8],rbx
 100aa97:	mov    QWORD PTR [rax+0x18],rsi
 100aa9b:	mov    r13,r8
 100aa9e:	mov    r14,rdx
 100aaa1:	mov    r15,rcx
 100aaa4:	mov    QWORD PTR [rsp+0x60],0x0
 100aaad:	xor    ebx,ebx
 100aaaf:	mov    QWORD PTR [rsp+0x50],rbx
 100aab4:	lea    rcx,[rip+0xffffffffffff72dd]        # 0x1001d98
 100aabb:	call   QWORD PTR [rip+0xffffffffffff6b27]        # 0x10015e8
 100aac1:	mov    rdi,rax
 100aac4:	mov    QWORD PTR [rsp+0xd8],rax
 100aacc:	test   rax,rax
 100aacf:	jne    0x100aadc
 100aad1:	mov    ecx,0x8007000e
 100aad6:	call   0x1004f80
 100aadb:	nop
 100aadc:	lea    rcx,[rsp+0x68]
 100aae1:	call   QWORD PTR [rip+0xffffffffffff6b19]        # 0x1001600
 100aae7:	nop
 100aae8:	lea    rcx,[rsp+0xb8]
 100aaf0:	call   QWORD PTR [rip+0xffffffffffff6b0a]        # 0x1001600
 100aaf6:	nop
 100aaf7:	lea    rax,[rsp+0x58]
 100aafc:	mov    QWORD PTR [rsp+0x20],rax
 100ab01:	lea    r9,[rip+0xffffffffffff6c68]        # 0x1001770
 100ab08:	xor    edx,edx
 100ab0a:	lea    r8d,[rdx+0x1]
 100ab0e:	lea    rcx,[rip+0xffffffffffff6c4b]        # 0x1001760
 100ab15:	call   QWORD PTR [rip+0xffffffffffff6b9d]        # 0x10016b8
 100ab1b:	mov    esi,eax
 100ab1d:	test   eax,eax
 100ab1f:	js     0x100b2c4
 100ab25:	lea    rdx,[rip+0xffffffffffff7274]        # 0x1001da0
 100ab2c:	lea    rcx,[rsp+0x50]
 100ab31:	call   0x100a180
 100ab36:	movzx  r12d,BYTE PTR [rsp+0x160]
 100ab3f:	lea    rax,[rip+0xffffffffffff714a]        # 0x1001c90
 100ab46:	lea    r8,[rip+0xffffffffffff70f3]        # 0x1001c40
 100ab4d:	test   r12b,r12b
 100ab50:	cmovne r8,rax
 100ab54:	lea    rdx,[rsp+0xe0]
 100ab5c:	mov    rcx,QWORD PTR [r15]
 100ab5f:	call   QWORD PTR [rip+0xffffffffffff64cb]        # 0x1001030
 100ab65:	mov    rcx,QWORD PTR [rax]
 100ab68:	mov    QWORD PTR [rsp+0x80],rcx
 100ab70:	mov    rsi,QWORD PTR [rax+0x8]
 100ab74:	mov    rcx,QWORD PTR [rax+0x10]
 100ab78:	mov    QWORD PTR [rsp+0x90],rcx
 100ab80:	mov    rcx,QWORD PTR [rax+0x18]
 100ab84:	mov    QWORD PTR [rsp+0x98],rcx
 100ab8c:	mov    rax,QWORD PTR [rax+0x20]
 100ab90:	mov    QWORD PTR [rsp+0xa0],rax
 100ab98:	cmp    QWORD PTR [rsi+0x10],0x0
 100ab9d:	je     0x100acb3
 100aba3:	lea    rdx,[rip+0xffffffffffff725e]        # 0x1001e08
 100abaa:	lea    rcx,[rsp+0x40]
 100abaf:	call   0x100a0b0
 100abb4:	nop
 100abb5:	mov    rbx,QWORD PTR [rsp+0x40]
 100abba:	mov    rcx,rbx
 100abbd:	call   QWORD PTR [rip+0xffffffffffff6a1d]        # 0x10015e0
 100abc3:	test   eax,eax
 100abc5:	je     0x100ac06
 100abc7:	mov    QWORD PTR [rsp+0x48],0x0
 100abd0:	lea    r8,[rsp+0x48]
 100abd5:	mov    rdx,rbx
 100abd8:	mov    rbx,QWORD PTR [rsp+0x50]
 100abdd:	mov    rcx,rbx
 100abe0:	call   0x100e5a0
 100abe5:	test   eax,eax
 100abe7:	js     0x100abfe
 100abe9:	mov    rcx,rbx
 100abec:	call   QWORD PTR [rip+0xffffffffffff69e6]        # 0x10015d8
 100abf2:	mov    r11,QWORD PTR [rsp+0x48]
 100abf7:	mov    QWORD PTR [rsp+0x50],r11
 100abfc:	jmp    0x100ac06
 100abfe:	mov    ecx,eax
 100ac00:	call   0x1004f80
 100ac05:	nop
 100ac06:	mov    rcx,QWORD PTR [rsp+0x40]
 100ac0b:	call   QWORD PTR [rip+0xffffffffffff69c7]        # 0x10015d8
 100ac11:	cmp    QWORD PTR [rsi+0x18],0x8
 100ac16:	jb     0x100ac1b
 100ac18:	mov    rsi,QWORD PTR [rsi]
 100ac1b:	mov    rcx,rsi
 100ac1e:	call   QWORD PTR [rip+0xffffffffffff665c]        # 0x1001280
 100ac24:	mov    r8d,eax
 100ac27:	mov    rdx,rsi
 100ac2a:	lea    rcx,[rsp+0x50]
 100ac2f:	call   0x1007c80
 100ac34:	test   eax,eax
 100ac36:	jns    0x100ac3f
 100ac38:	mov    ecx,eax
 100ac3a:	call   0x1004f80
 100ac3f:	lea    rdx,[rip+0xffffffffffff71d2]        # 0x1001e18
 100ac46:	lea    rcx,[rsp+0x48]
 100ac4b:	call   0x100a0b0
 100ac50:	nop
 100ac51:	mov    rbx,QWORD PTR [rsp+0x48]
 100ac56:	mov    rcx,rbx
 100ac59:	call   QWORD PTR [rip+0xffffffffffff6981]        # 0x10015e0
 100ac5f:	test   eax,eax
 100ac61:	je     0x100aca1
 100ac63:	mov    QWORD PTR [rsp+0x40],0x0
 100ac6c:	lea    r8,[rsp+0x40]
 100ac71:	mov    rdx,rbx
 100ac74:	mov    rbx,QWORD PTR [rsp+0x50]
 100ac79:	mov    rcx,rbx
 100ac7c:	call   0x100e5a0
 100ac81:	test   eax,eax
 100ac83:	js     0x100ac9a
 100ac85:	mov    rcx,rbx
 100ac88:	call   QWORD PTR [rip+0xffffffffffff694a]        # 0x10015d8
 100ac8e:	mov    rbx,QWORD PTR [rsp+0x40]
 100ac93:	mov    QWORD PTR [rsp+0x50],rbx
 100ac98:	jmp    0x100aca6
 100ac9a:	mov    ecx,eax
 100ac9c:	call   0x1004f80
 100aca1:	mov    rbx,QWORD PTR [rsp+0x50]
 100aca6:	mov    rcx,QWORD PTR [rsp+0x48]
 100acab:	call   QWORD PTR [rip+0xffffffffffff6927]        # 0x10015d8
 100acb1:	jmp    0x100acb8
 100acb3:	mov    rbx,QWORD PTR [rsp+0x50]
 100acb8:	lea    rax,[rip+0xffffffffffff6ff1]        # 0x1001cb0
 100acbf:	lea    r8,[rip+0xffffffffffff6f92]        # 0x1001c58
 100acc6:	test   r12b,r12b
 100acc9:	cmovne r8,rax
 100accd:	lea    rdx,[rsp+0xe0]
 100acd5:	mov    rcx,QWORD PTR [r15]
 100acd8:	call   QWORD PTR [rip+0xffffffffffff6352]        # 0x1001030
 100acde:	mov    rcx,QWORD PTR [rax]
 100ace1:	mov    QWORD PTR [rsp+0x80],rcx
 100ace9:	mov    rsi,QWORD PTR [rax+0x8]
 100aced:	mov    rcx,QWORD PTR [rax+0x10]
 100acf1:	mov    QWORD PTR [rsp+0x90],rcx
 100acf9:	mov    rcx,QWORD PTR [rax+0x18]
 100acfd:	mov    QWORD PTR [rsp+0x98],rcx
 100ad05:	mov    rax,QWORD PTR [rax+0x20]
 100ad09:	mov    QWORD PTR [rsp+0xa0],rax
 100ad11:	lea    rcx,[rsp+0x48]
 100ad16:	cmp    QWORD PTR [rsi+0x10],0x0
 100ad1b:	jne    0x100ad86
 100ad1d:	lea    rdx,[rip+0xffffffffffff70fc]        # 0x1001e20
 100ad24:	call   0x100a0b0
 100ad29:	nop
 100ad2a:	mov    rsi,QWORD PTR [rsp+0x48]
 100ad2f:	mov    rcx,rsi
 100ad32:	call   QWORD PTR [rip+0xffffffffffff68a8]        # 0x10015e0
 100ad38:	test   eax,eax
 100ad3a:	je     0x100ad76
 100ad3c:	mov    QWORD PTR [rsp+0x40],0x0
 100ad45:	lea    r8,[rsp+0x40]
 100ad4a:	mov    rdx,rsi
 100ad4d:	mov    rcx,rbx
 100ad50:	call   0x100e5a0
 100ad55:	test   eax,eax
 100ad57:	js     0x100ad6e
 100ad59:	mov    rcx,rbx
 100ad5c:	call   QWORD PTR [rip+0xffffffffffff6876]        # 0x10015d8
 100ad62:	mov    rbx,QWORD PTR [rsp+0x40]
 100ad67:	mov    QWORD PTR [rsp+0x50],rbx
 100ad6c:	jmp    0x100ad76
 100ad6e:	mov    ecx,eax
 100ad70:	call   0x1004f80
 100ad75:	nop
 100ad76:	mov    rcx,QWORD PTR [rsp+0x48]
 100ad7b:	call   QWORD PTR [rip+0xffffffffffff6857]        # 0x10015d8
 100ad81:	jmp    0x100afff
 100ad86:	lea    rdx,[rip+0xffffffffffff70b3]        # 0x1001e40
 100ad8d:	call   0x100a0b0
 100ad92:	nop
 100ad93:	mov    r14,QWORD PTR [rsp+0x48]
 100ad98:	mov    rcx,r14
 100ad9b:	call   QWORD PTR [rip+0xffffffffffff683f]        # 0x10015e0
 100ada1:	test   eax,eax
 100ada3:	je     0x100addf
 100ada5:	mov    QWORD PTR [rsp+0x40],0x0
 100adae:	lea    r8,[rsp+0x40]
 100adb3:	mov    rdx,r14
 100adb6:	mov    rcx,rbx
 100adb9:	call   0x100e5a0
 100adbe:	test   eax,eax
 100adc0:	js     0x100add7
 100adc2:	mov    rcx,rbx
 100adc5:	call   QWORD PTR [rip+0xffffffffffff680d]        # 0x10015d8
 100adcb:	mov    r11,QWORD PTR [rsp+0x40]
 100add0:	mov    QWORD PTR [rsp+0x50],r11
 100add5:	jmp    0x100addf
 100add7:	mov    ecx,eax
 100add9:	call   0x1004f80
 100adde:	nop
 100addf:	mov    rcx,QWORD PTR [rsp+0x48]
 100ade4:	call   QWORD PTR [rip+0xffffffffffff67ee]        # 0x10015d8
 100adea:	cmp    QWORD PTR [rsi+0x18],0x8
 100adef:	jb     0x100adf4
 100adf1:	mov    rsi,QWORD PTR [rsi]
 100adf4:	mov    rcx,rsi
 100adf7:	call   QWORD PTR [rip+0xffffffffffff6483]        # 0x1001280
 100adfd:	mov    r8d,eax
 100ae00:	mov    rdx,rsi
 100ae03:	lea    rcx,[rsp+0x50]
 100ae08:	call   0x1007c80
 100ae0d:	test   eax,eax
 100ae0f:	jns    0x100ae18
 100ae11:	mov    ecx,eax
 100ae13:	call   0x1004f80
 100ae18:	lea    rdx,[rip+0xffffffffffff6ff9]        # 0x1001e18
 100ae1f:	lea    rcx,[rsp+0x48]
 100ae24:	call   0x100a0b0
 100ae29:	nop
 100ae2a:	mov    rbx,QWORD PTR [rsp+0x48]
 100ae2f:	mov    rcx,rbx
 100ae32:	call   QWORD PTR [rip+0xffffffffffff67a8]        # 0x10015e0
 100ae38:	test   eax,eax
 100ae3a:	je     0x100ae7a
 100ae3c:	mov    QWORD PTR [rsp+0x40],0x0
 100ae45:	lea    r8,[rsp+0x40]
 100ae4a:	mov    rdx,rbx
 100ae4d:	mov    rbx,QWORD PTR [rsp+0x50]
 100ae52:	mov    rcx,rbx
 100ae55:	call   0x100e5a0
 100ae5a:	test   eax,eax
 100ae5c:	js     0x100ae73
 100ae5e:	mov    rcx,rbx
 100ae61:	call   QWORD PTR [rip+0xffffffffffff6771]        # 0x10015d8
 100ae67:	mov    rbx,QWORD PTR [rsp+0x40]
 100ae6c:	mov    QWORD PTR [rsp+0x50],rbx
 100ae71:	jmp    0x100ae7f
 100ae73:	mov    ecx,eax
 100ae75:	call   0x1004f80
 100ae7a:	mov    rbx,QWORD PTR [rsp+0x50]
 100ae7f:	mov    rcx,QWORD PTR [rsp+0x48]
 100ae84:	call   QWORD PTR [rip+0xffffffffffff674e]        # 0x10015d8
 100ae8a:	lea    rax,[rip+0xffffffffffff6ddf]        # 0x1001c70
 100ae91:	lea    r8,[rip+0xffffffffffff6d88]        # 0x1001c20
 100ae98:	test   r12b,r12b
 100ae9b:	cmovne r8,rax
 100ae9f:	lea    rdx,[rsp+0xe0]
 100aea7:	mov    rcx,QWORD PTR [r15]
 100aeaa:	call   QWORD PTR [rip+0xffffffffffff6180]        # 0x1001030
 100aeb0:	mov    rcx,QWORD PTR [rax]
 100aeb3:	mov    QWORD PTR [rsp+0x80],rcx
 100aebb:	mov    rsi,QWORD PTR [rax+0x8]
 100aebf:	mov    rcx,QWORD PTR [rax+0x10]
 100aec3:	mov    QWORD PTR [rsp+0x90],rcx
 100aecb:	mov    rcx,QWORD PTR [rax+0x18]
 100aecf:	mov    QWORD PTR [rsp+0x98],rcx
 100aed7:	mov    rax,QWORD PTR [rax+0x20]
 100aedb:	mov    QWORD PTR [rsp+0xa0],rax
 100aee3:	cmp    QWORD PTR [rsi+0x10],0x0
 100aee8:	je     0x100aff7
 100aeee:	lea    rdx,[rip+0xffffffffffff6f5b]        # 0x1001e50
 100aef5:	lea    rcx,[rsp+0x48]
 100aefa:	call   0x100a0b0
 100aeff:	nop
 100af00:	mov    r14,QWORD PTR [rsp+0x48]
 100af05:	mov    rcx,r14
 100af08:	call   QWORD PTR [rip+0xffffffffffff66d2]        # 0x10015e0
 100af0e:	test   eax,eax
 100af10:	je     0x100af4c
 100af12:	mov    QWORD PTR [rsp+0x40],0x0
 100af1b:	lea    r8,[rsp+0x40]
 100af20:	mov    rdx,r14
 100af23:	mov    rcx,rbx
 100af26:	call   0x100e5a0
 100af2b:	test   eax,eax
 100af2d:	js     0x100af44
 100af2f:	mov    rcx,rbx
 100af32:	call   QWORD PTR [rip+0xffffffffffff66a0]        # 0x10015d8
 100af38:	mov    r11,QWORD PTR [rsp+0x40]
 100af3d:	mov    QWORD PTR [rsp+0x50],r11
 100af42:	jmp    0x100af4c
 100af44:	mov    ecx,eax
 100af46:	call   0x1004f80
 100af4b:	nop
 100af4c:	mov    rcx,QWORD PTR [rsp+0x48]
 100af51:	call   QWORD PTR [rip+0xffffffffffff6681]        # 0x10015d8
 100af57:	cmp    QWORD PTR [rsi+0x18],0x8
 100af5c:	jb     0x100af61
 100af5e:	mov    rsi,QWORD PTR [rsi]
 100af61:	mov    rcx,rsi
 100af64:	call   QWORD PTR [rip+0xffffffffffff6316]        # 0x1001280
 100af6a:	mov    r8d,eax
 100af6d:	mov    rdx,rsi
 100af70:	lea    rcx,[rsp+0x50]
 100af75:	call   0x1007c80
 100af7a:	test   eax,eax
 100af7c:	jns    0x100af85
 100af7e:	mov    ecx,eax
 100af80:	call   0x1004f80
 100af85:	lea    rdx,[rip+0xffffffffffff6e8c]        # 0x1001e18
 100af8c:	lea    rcx,[rsp+0x48]
 100af91:	call   0x100a0b0
 100af96:	nop
 100af97:	mov    rbx,QWORD PTR [rsp+0x48]
 100af9c:	mov    rcx,rbx
 100af9f:	call   QWORD PTR [rip+0xffffffffffff663b]        # 0x10015e0
 100afa5:	test   eax,eax
 100afa7:	je     0x100afe7
 100afa9:	mov    QWORD PTR [rsp+0x40],0x0
 100afb2:	lea    r8,[rsp+0x40]
 100afb7:	mov    rdx,rbx
 100afba:	mov    rbx,QWORD PTR [rsp+0x50]
 100afbf:	mov    rcx,rbx
 100afc2:	call   0x100e5a0
 100afc7:	test   eax,eax
 100afc9:	js     0x100afe0
 100afcb:	mov    rcx,rbx
 100afce:	call   QWORD PTR [rip+0xffffffffffff6604]        # 0x10015d8
 100afd4:	mov    rbx,QWORD PTR [rsp+0x40]
 100afd9:	mov    QWORD PTR [rsp+0x50],rbx
 100afde:	jmp    0x100afec
 100afe0:	mov    ecx,eax
 100afe2:	call   0x1004f80
 100afe7:	mov    rbx,QWORD PTR [rsp+0x50]
 100afec:	mov    rcx,QWORD PTR [rsp+0x48]
 100aff1:	call   QWORD PTR [rip+0xffffffffffff65e1]        # 0x10015d8
 100aff7:	mov    r14,QWORD PTR [rsp+0x148]
 100afff:	lea    rcx,[rsp+0x68]
 100b004:	call   QWORD PTR [rip+0xffffffffffff6646]        # 0x1001650
 100b00a:	test   eax,eax
 100b00c:	jns    0x100b015
 100b00e:	mov    ecx,eax
 100b010:	call   0x1004f80
 100b015:	mov    r15d,0x8
 100b01b:	mov    WORD PTR [rsp+0x68],r15w
 100b021:	test   rbx,rbx
 100b024:	jne    0x100b02a
 100b026:	xor    eax,eax
 100b028:	jmp    0x100b03e
 100b02a:	mov    rcx,rbx
 100b02d:	call   QWORD PTR [rip+0xffffffffffff65ed]        # 0x1001620
 100b033:	mov    edx,eax
 100b035:	mov    rcx,rbx
 100b038:	call   QWORD PTR [rip+0xffffffffffff65da]        # 0x1001618
 100b03e:	mov    QWORD PTR [rsp+0x70],rax
 100b043:	test   rax,rax
 100b046:	jne    0x100b069
 100b048:	test   rbx,rbx
 100b04b:	je     0x100b069
 100b04d:	mov    eax,0xa
 100b052:	mov    WORD PTR [rsp+0x68],ax
 100b057:	mov    DWORD PTR [rsp+0x70],0x8007000e
 100b05f:	mov    ecx,0x8007000e
 100b064:	call   0x1004f80
 100b069:	movups xmm0,XMMWORD PTR [rsp+0x68]
 100b06e:	movaps XMMWORD PTR [rsp+0x80],xmm0
 100b076:	movsd  xmm1,QWORD PTR [rsp+0x78]
 100b07c:	movsd  QWORD PTR [rsp+0x90],xmm1
 100b085:	mov    rcx,QWORD PTR [rsp+0x58]
 100b08a:	mov    rax,QWORD PTR [rcx]
 100b08d:	lea    rdx,[rsp+0x80]
 100b095:	call   QWORD PTR [rax+0x50]
 100b098:	mov    esi,eax
 100b09a:	test   eax,eax
 100b09c:	js     0x100b2b8
 100b0a2:	mov    rcx,QWORD PTR [rsp+0x58]
 100b0a7:	mov    rax,QWORD PTR [rcx]
 100b0aa:	mov    rdx,r14
 100b0ad:	call   QWORD PTR [rax+0x60]
 100b0b0:	mov    esi,eax
 100b0b2:	test   eax,eax
 100b0b4:	js     0x100b2b8
 100b0ba:	mov    r14,QWORD PTR [rsp+0x178]
 100b0c2:	test   r14,r14
 100b0c5:	jne    0x100b14f
 100b0cb:	lea    rcx,[rsp+0x68]
 100b0d0:	call   QWORD PTR [rip+0xffffffffffff657a]        # 0x1001650
 100b0d6:	test   eax,eax
 100b0d8:	jns    0x100b0e1
 100b0da:	mov    ecx,eax
 100b0dc:	call   0x1004f80
 100b0e1:	mov    WORD PTR [rsp+0x68],r15w
 100b0e7:	mov    rcx,r13
 100b0ea:	call   QWORD PTR [rip+0xffffffffffff64f8]        # 0x10015e8
 100b0f0:	mov    QWORD PTR [rsp+0x70],rax
 100b0f5:	test   rax,rax
 100b0f8:	jne    0x100b11b
 100b0fa:	test   r13,r13
 100b0fd:	je     0x100b11b
 100b0ff:	mov    eax,0xa
 100b104:	mov    WORD PTR [rsp+0x68],ax
 100b109:	mov    DWORD PTR [rsp+0x70],0x8007000e
 100b111:	mov    ecx,0x8007000e
 100b116:	call   0x1004f80
 100b11b:	mov    rcx,QWORD PTR [rsp+0x58]
 100b120:	mov    rax,QWORD PTR [rcx]
 100b123:	lea    rdx,[rsp+0x60]
 100b128:	mov    QWORD PTR [rsp+0x20],rdx
 100b12d:	mov    r9d,DWORD PTR [rsp+0x158]
 100b135:	lea    r8,[rsp+0x68]
 100b13a:	lea    rdx,[rsp+0xb8]
 100b142:	call   QWORD PTR [rax+0x88]
 100b148:	mov    esi,eax
 100b14a:	jmp    0x100b293
 100b14f:	mov    rcx,QWORD PTR [rsp+0x58]
 100b154:	mov    rax,QWORD PTR [rcx]
 100b157:	lea    rdx,[rsp+0x48]
 100b15c:	call   QWORD PTR [rax+0x98]
 100b162:	mov    esi,eax
 100b164:	test   eax,eax
 100b166:	js     0x100b2af
 100b16c:	xor    r15d,r15d
 100b16f:	mov    r12d,DWORD PTR [rsp+0x180]
 100b177:	cmp    r15d,r12d
 100b17a:	jae    0x100b257
 100b180:	movzx  ecx,WORD PTR [r14]
 100b184:	sub    ecx,0x3
 100b187:	je     0x100b1c8
 100b189:	sub    ecx,0x4
 100b18c:	je     0x100b1be
 100b18e:	dec    ecx
 100b190:	je     0x100b1ad
 100b192:	sub    ecx,0xb
 100b195:	je     0x100b1c8
 100b197:	cmp    ecx,0x1ffe
 100b19d:	jne    0x100b1c8
 100b19f:	mov    esi,0xcc
 100b1a4:	mov    rax,QWORD PTR [r14+0x8]
 100b1a8:	mov    eax,DWORD PTR [rax+0x18]
 100b1ab:	jmp    0x100b1d0
 100b1ad:	mov    esi,0x8
 100b1b2:	mov    rcx,QWORD PTR [r14+0x8]
 100b1b6:	call   QWORD PTR [rip+0xffffffffffff6424]        # 0x10015e0
 100b1bc:	jmp    0x100b1d0
 100b1be:	mov    esi,0x7
 100b1c3:	lea    eax,[rsi+0x1]
 100b1c6:	jmp    0x100b1d0
 100b1c8:	mov    eax,0x4
 100b1cd:	lea    esi,[rax-0x1]
 100b1d0:	movups xmm0,XMMWORD PTR [r14]
 100b1d4:	movaps XMMWORD PTR [rsp+0x80],xmm0
 100b1dc:	movsd  xmm1,QWORD PTR [r14+0x10]
 100b1e2:	movsd  QWORD PTR [rsp+0x90],xmm1
 100b1eb:	mov    rcx,QWORD PTR [rsp+0x58]
 100b1f0:	mov    r10,QWORD PTR [rcx]
 100b1f3:	mov    eax,eax
 100b1f5:	lea    rdx,[rsp+0x40]
 100b1fa:	mov    QWORD PTR [rsp+0x30],rdx
 100b1ff:	lea    rdx,[rsp+0x80]
 100b207:	mov    QWORD PTR [rsp+0x28],rdx
 100b20c:	mov    QWORD PTR [rsp+0x20],rax
 100b211:	mov    r9d,0x1
 100b217:	mov    r8d,esi
 100b21a:	mov    rdx,rdi
 100b21d:	call   QWORD PTR [r10+0x90]
 100b224:	mov    esi,eax
 100b226:	test   eax,eax
 100b228:	js     0x100b288
 100b22a:	mov    rcx,QWORD PTR [rsp+0x48]
 100b22f:	mov    rax,QWORD PTR [rcx]
 100b232:	mov    rdx,QWORD PTR [rsp+0x40]
 100b237:	call   QWORD PTR [rax+0x50]
 100b23a:	mov    esi,eax
 100b23c:	mov    rcx,QWORD PTR [rsp+0x40]
 100b241:	mov    rax,QWORD PTR [rcx]
 100b244:	call   QWORD PTR [rax+0x10]
 100b247:	test   esi,esi
 100b249:	js     0x100b288
 100b24b:	inc    r15d
 100b24e:	add    r14,0x18
 100b252:	jmp    0x100b177
 100b257:	test   esi,esi
 100b259:	js     0x100b288
 100b25b:	mov    rcx,QWORD PTR [rsp+0x58]
 100b260:	mov    rax,QWORD PTR [rcx]
 100b263:	lea    rdx,[rsp+0x60]
 100b268:	mov    QWORD PTR [rsp+0x20],rdx
 100b26d:	mov    r9d,DWORD PTR [rsp+0x158]
 100b275:	xor    r8d,r8d
 100b278:	lea    rdx,[rsp+0xb8]
 100b280:	call   QWORD PTR [rax+0x88]
 100b286:	mov    esi,eax
 100b288:	mov    rcx,QWORD PTR [rsp+0x48]
 100b28d:	mov    rax,QWORD PTR [rcx]
 100b290:	call   QWORD PTR [rax+0x10]
 100b293:	test   esi,esi
 100b295:	js     0x100b2af
 100b297:	mov    rcx,QWORD PTR [rsp+0x168]
 100b29f:	test   rcx,rcx
 100b2a2:	je     0x100b2b8
 100b2a4:	mov    eax,DWORD PTR [rsp+0xc0]
 100b2ab:	mov    DWORD PTR [rcx],eax
 100b2ad:	jmp    0x100b2b8
 100b2af:	mov    QWORD PTR [rsp+0x60],0x0
 100b2b8:	mov    rcx,QWORD PTR [rsp+0x58]
 100b2bd:	mov    rax,QWORD PTR [rcx]
 100b2c0:	call   QWORD PTR [rax+0x10]
 100b2c3:	nop
 100b2c4:	lea    rcx,[rsp+0xb8]
 100b2cc:	call   QWORD PTR [rip+0xffffffffffff637e]        # 0x1001650
 100b2d2:	nop
 100b2d3:	lea    rcx,[rsp+0x68]
 100b2d8:	call   QWORD PTR [rip+0xffffffffffff6372]        # 0x1001650
 100b2de:	nop
 100b2df:	mov    rcx,rdi
 100b2e2:	call   QWORD PTR [rip+0xffffffffffff62f0]        # 0x10015d8
 100b2e8:	nop
 100b2e9:	mov    rcx,rbx
 100b2ec:	call   QWORD PTR [rip+0xffffffffffff62e6]        # 0x10015d8
 100b2f2:	nop
 100b2f3:	jmp    0x100b2f9
 100b2f5:	mov    esi,DWORD PTR [rsp+0x50]
 100b2f9:	mov    rax,QWORD PTR [rsp+0x170]
 100b301:	test   rax,rax
 100b304:	je     0x100b308
 100b306:	mov    DWORD PTR [rax],esi
 100b308:	mov    rax,QWORD PTR [rsp+0x60]
 100b30d:	lea    r11,[rsp+0x110]
 100b315:	mov    rbx,QWORD PTR [r11+0x30]
 100b319:	mov    rsi,QWORD PTR [r11+0x40]
 100b31d:	mov    rsp,r11
 100b320:	pop    r15
 100b322:	pop    r14
 100b324:	pop    r13
 100b326:	pop    r12
 100b328:	pop    rdi
 100b329:	ret    
 100b32a:	int3   
 100b32b:	int3   
 100b32c:	int3   
 100b32d:	int3   
 100b32e:	int3   
 100b32f:	int3   
 100b330:	mov    QWORD PTR [rsp+0x8],rcx
 100b335:	push   rbp
 100b336:	push   rsi
 100b337:	push   rdi
 100b338:	push   r12
 100b33a:	push   r13
 100b33c:	push   r14
 100b33e:	push   r15
 100b340:	sub    rsp,0x90
 100b347:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 100b350:	mov    QWORD PTR [rsp+0xe0],rbx
 100b358:	mov    rbx,r9
 100b35b:	movzx  r13d,r8b
 100b35f:	mov    r9,rdx
 100b362:	mov    r15d,0x6
 100b368:	xor    r14d,r14d
 100b36b:	xor    r12d,r12d
 100b36e:	xor    esi,esi
 100b370:	xor    edi,edi
 100b372:	mov    rcx,rdx
 100b375:	movzx  eax,WORD PTR [rdx]
 100b378:	test   ax,ax
 100b37b:	je     0x100b5e1
 100b381:	cmp    ax,0x2f
 100b385:	je     0x100b38d
 100b387:	cmp    ax,0x5c
 100b38b:	jne    0x100b391
 100b38d:	lea    rdi,[rcx+0x2]
 100b391:	add    rcx,0x2
 100b395:	movzx  eax,WORD PTR [rcx]
 100b398:	test   ax,ax
 100b39b:	jne    0x100b381
 100b39d:	test   rdi,rdi
 100b3a0:	je     0x100b5e1
 100b3a6:	mov    rdx,rdi
 100b3a9:	sub    rdx,r9
 100b3ac:	sar    rdx,1
 100b3af:	mov    rcx,r9
 100b3b2:	call   QWORD PTR [rip+0xffffffffffff6240]        # 0x10015f8
 100b3b8:	mov    rbp,rax
 100b3bb:	mov    rax,QWORD PTR [rsp+0xf0]
 100b3c3:	mov    QWORD PTR [rax],rdi
 100b3c6:	lea    rax,[rip+0xffffffffffff68c3]        # 0x1001c90
 100b3cd:	lea    r8,[rip+0xffffffffffff686c]        # 0x1001c40
 100b3d4:	test   r13b,r13b
 100b3d7:	cmovne r8,rax
 100b3db:	lea    rdx,[rsp+0x60]
 100b3e0:	mov    rdi,QWORD PTR [rsp+0xd0]
 100b3e8:	mov    rcx,QWORD PTR [rdi]
 100b3eb:	call   QWORD PTR [rip+0xffffffffffff5c3f]        # 0x1001030
 100b3f1:	mov    rdx,rax
 100b3f4:	mov    rcx,QWORD PTR [rax+0x8]
 100b3f8:	mov    rax,QWORD PTR [rax+0x10]
 100b3fc:	mov    QWORD PTR [rsp+0x48],rax
 100b401:	mov    rax,QWORD PTR [rdx+0x18]
 100b405:	mov    QWORD PTR [rsp+0x50],rax
 100b40a:	mov    rax,QWORD PTR [rdx+0x20]
 100b40e:	mov    QWORD PTR [rsp+0x58],rax
 100b413:	cmp    DWORD PTR [rdx],0x1
 100b416:	jne    0x100b436
 100b418:	test   rcx,rcx
 100b41b:	je     0x100b436
 100b41d:	cmp    QWORD PTR [rcx+0x10],rsi
 100b421:	je     0x100b436
 100b423:	cmp    QWORD PTR [rcx+0x18],0x8
 100b428:	jb     0x100b42d
 100b42a:	mov    rcx,QWORD PTR [rcx]
 100b42d:	call   QWORD PTR [rip+0xffffffffffff61b5]        # 0x10015e8
 100b433:	mov    r14,rax
 100b436:	lea    rax,[rip+0xffffffffffff6873]        # 0x1001cb0
 100b43d:	lea    r8,[rip+0xffffffffffff6814]        # 0x1001c58
 100b444:	test   r13b,r13b
 100b447:	cmovne r8,rax
 100b44b:	lea    rdx,[rsp+0x60]
 100b450:	mov    rcx,QWORD PTR [rdi]
 100b453:	call   QWORD PTR [rip+0xffffffffffff5bd7]        # 0x1001030
 100b459:	mov    rdx,rax
 100b45c:	mov    rcx,QWORD PTR [rax+0x8]
 100b460:	mov    rax,QWORD PTR [rax+0x10]
 100b464:	mov    QWORD PTR [rsp+0x48],rax
 100b469:	mov    rax,QWORD PTR [rdx+0x18]
 100b46d:	mov    QWORD PTR [rsp+0x50],rax
 100b472:	mov    rax,QWORD PTR [rdx+0x20]
 100b476:	mov    QWORD PTR [rsp+0x58],rax
 100b47b:	cmp    DWORD PTR [rdx],0x1
 100b47e:	jne    0x100b50e
 100b484:	test   rcx,rcx
 100b487:	je     0x100b50e
 100b48d:	cmp    QWORD PTR [rcx+0x10],rsi
 100b491:	je     0x100b50e
 100b493:	cmp    QWORD PTR [rcx+0x18],0x8
 100b498:	jb     0x100b49d
 100b49a:	mov    rcx,QWORD PTR [rcx]
 100b49d:	call   QWORD PTR [rip+0xffffffffffff6145]        # 0x10015e8
 100b4a3:	mov    r12,rax
 100b4a6:	lea    rax,[rip+0xffffffffffff67c3]        # 0x1001c70
 100b4ad:	lea    r8,[rip+0xffffffffffff676c]        # 0x1001c20
 100b4b4:	test   r13b,r13b
 100b4b7:	cmovne r8,rax
 100b4bb:	lea    rdx,[rsp+0x60]
 100b4c0:	mov    rcx,QWORD PTR [rdi]
 100b4c3:	call   QWORD PTR [rip+0xffffffffffff5b67]        # 0x1001030
 100b4c9:	mov    rdx,rax
 100b4cc:	mov    rcx,QWORD PTR [rax+0x8]
 100b4d0:	mov    rax,QWORD PTR [rax+0x10]
 100b4d4:	mov    QWORD PTR [rsp+0x48],rax
 100b4d9:	mov    rax,QWORD PTR [rdx+0x18]
 100b4dd:	mov    QWORD PTR [rsp+0x50],rax
 100b4e2:	mov    rax,QWORD PTR [rdx+0x20]
 100b4e6:	mov    QWORD PTR [rsp+0x58],rax
 100b4eb:	cmp    DWORD PTR [rdx],0x1
 100b4ee:	jne    0x100b50e
 100b4f0:	test   rcx,rcx
 100b4f3:	je     0x100b50e
 100b4f5:	cmp    QWORD PTR [rcx+0x10],rsi
 100b4f9:	je     0x100b50e
 100b4fb:	cmp    QWORD PTR [rcx+0x18],0x8
 100b500:	jb     0x100b505
 100b502:	mov    rcx,QWORD PTR [rcx]
 100b505:	call   QWORD PTR [rip+0xffffffffffff60dd]        # 0x10015e8
 100b50b:	mov    rsi,rax
 100b50e:	mov    QWORD PTR [rsp+0xd8],0x0
 100b51a:	lea    rax,[rsp+0xd8]
 100b522:	mov    QWORD PTR [rsp+0x20],rax
 100b527:	lea    r9,[rip+0xffffffffffff67a2]        # 0x1001cd0
 100b52e:	xor    edx,edx
 100b530:	lea    r8d,[rdx+0x17]
 100b534:	lea    rcx,[rip+0xffffffffffff7855]        # 0x1002d90
 100b53b:	call   QWORD PTR [rip+0xffffffffffff6177]        # 0x10016b8
 100b541:	test   eax,eax
 100b543:	jns    0x100b553
 100b545:	mov    edx,eax
 100b547:	mov    ecx,0x7c
 100b54c:	call   0x100e600
 100b551:	jmp    0x100b58f
 100b553:	mov    rcx,QWORD PTR [rsp+0xd8]
 100b55b:	mov    rax,QWORD PTR [rcx]
 100b55e:	mov    QWORD PTR [rsp+0x28],rbx
 100b563:	mov    QWORD PTR [rsp+0x20],rsi
 100b568:	mov    r9,r12
 100b56b:	mov    r8,r14
 100b56e:	mov    rdx,rbp
 100b571:	call   QWORD PTR [rax+0xe8]
 100b577:	test   eax,eax
 100b579:	jns    0x100b58c
 100b57b:	mov    r8,rbp
 100b57e:	mov    edx,eax
 100b580:	mov    ecx,0x8d
 100b585:	call   0x100e600
 100b58a:	jmp    0x100b58f
 100b58c:	xor    r15d,r15d
 100b58f:	mov    rcx,rsi
 100b592:	call   QWORD PTR [rip+0xffffffffffff6048]        # 0x10015e0
 100b598:	mov    ecx,eax
 100b59a:	add    rcx,rcx
 100b59d:	mov    rdi,rsi
 100b5a0:	xor    eax,eax
 100b5a2:	rep stos BYTE PTR es:[rdi],al
 100b5a4:	mov    rcx,rbp
 100b5a7:	call   QWORD PTR [rip+0xffffffffffff602b]        # 0x10015d8
 100b5ad:	mov    rcx,r14
 100b5b0:	call   QWORD PTR [rip+0xffffffffffff6022]        # 0x10015d8
 100b5b6:	mov    rcx,r12
 100b5b9:	call   QWORD PTR [rip+0xffffffffffff6019]        # 0x10015d8
 100b5bf:	mov    rcx,rsi
 100b5c2:	call   QWORD PTR [rip+0xffffffffffff6010]        # 0x10015d8
 100b5c8:	nop
 100b5c9:	mov    rcx,QWORD PTR [rsp+0xd8]
 100b5d1:	test   rcx,rcx
 100b5d4:	je     0x100b5dc
 100b5d6:	mov    rdx,QWORD PTR [rcx]
 100b5d9:	call   QWORD PTR [rdx+0x10]
 100b5dc:	mov    eax,r15d
 100b5df:	jmp    0x100b611
 100b5e1:	mov    eax,DWORD PTR [rip+0xffffffffffff6c19]        # 0x1002200
 100b5e7:	mov    DWORD PTR [rbx],eax
 100b5e9:	mov    eax,DWORD PTR [rip+0xffffffffffff6c15]        # 0x1002204
 100b5ef:	mov    DWORD PTR [rbx+0x4],eax
 100b5f2:	mov    eax,DWORD PTR [rip+0xffffffffffff6c10]        # 0x1002208
 100b5f8:	mov    DWORD PTR [rbx+0x8],eax
 100b5fb:	mov    eax,DWORD PTR [rip+0xffffffffffff6c0b]        # 0x100220c
 100b601:	mov    DWORD PTR [rbx+0xc],eax
 100b604:	mov    rax,QWORD PTR [rsp+0xf0]
 100b60c:	mov    QWORD PTR [rax],rdx
 100b60f:	xor    eax,eax
 100b611:	mov    rbx,QWORD PTR [rsp+0xe0]
 100b619:	add    rsp,0x90
 100b620:	pop    r15
 100b622:	pop    r14
 100b624:	pop    r13
 100b626:	pop    r12
 100b628:	pop    rdi
 100b629:	pop    rsi
 100b62a:	pop    rbp
 100b62b:	ret    
 100b62c:	int3   
 100b62d:	int3   
 100b62e:	int3   
 100b62f:	int3   
 100b630:	int3   
 100b631:	int3   
 100b632:	int3   
 100b633:	int3   
 100b634:	int3   
 100b635:	int3   
 100b636:	int3   
 100b637:	int3   
 100b638:	int3   
 100b639:	int3   
 100b63a:	int3   
 100b63b:	int3   
 100b63c:	int3   
 100b63d:	int3   
 100b63e:	int3   
 100b63f:	int3   
 100b640:	sub    rsp,0x28
 100b644:	mov    rcx,QWORD PTR [rcx]
 100b647:	test   rcx,rcx
 100b64a:	je     0x100b652
 100b64c:	mov    rax,QWORD PTR [rcx]
 100b64f:	call   QWORD PTR [rax+0x10]
 100b652:	add    rsp,0x28
 100b656:	ret    
 100b657:	int3   
 100b658:	int3   
 100b659:	int3   
 100b65a:	int3   
 100b65b:	int3   
 100b65c:	int3   
 100b65d:	int3   
 100b65e:	int3   
 100b65f:	int3   
 100b660:	mov    QWORD PTR [rsp+0x8],rbx
 100b665:	mov    QWORD PTR [rsp+0x10],rbp
 100b66a:	mov    QWORD PTR [rsp+0x18],rsi
 100b66f:	push   rdi
 100b670:	push   r14
 100b672:	push   r15
 100b674:	sub    rsp,0x70
 100b678:	mov    r14,rcx
 100b67b:	mov    rcx,QWORD PTR [rcx]
 100b67e:	mov    r15,r8
 100b681:	mov    rbx,rdx
 100b684:	lea    r8,[rip+0xffffffffffff6605]        # 0x1001c90
 100b68b:	lea    rdx,[rsp+0x48]
 100b690:	mov    esi,0x6
 100b695:	call   QWORD PTR [rip+0xffffffffffff5995]        # 0x1001030
 100b69b:	mov    rcx,rbx
 100b69e:	mov    r11,rax
 100b6a1:	mov    rax,QWORD PTR [rax]
 100b6a4:	mov    rdi,QWORD PTR [r11+0x8]
 100b6a8:	mov    QWORD PTR [rsp+0x20],rax
 100b6ad:	mov    rax,QWORD PTR [r11+0x10]
 100b6b1:	mov    QWORD PTR [rsp+0x30],rax
 100b6b6:	mov    rax,QWORD PTR [r11+0x18]
 100b6ba:	mov    QWORD PTR [rsp+0x38],rax
 100b6bf:	mov    rax,QWORD PTR [r11+0x20]
 100b6c3:	mov    QWORD PTR [rsp+0x40],rax
 100b6c8:	call   QWORD PTR [rip+0xffffffffffff5f1a]        # 0x10015e8
 100b6ce:	cmp    QWORD PTR [rdi+0x10],0x0
 100b6d3:	mov    rbp,rax
 100b6d6:	jne    0x100b6e1
 100b6d8:	lea    rcx,[rip+0xffffffffffff66b9]        # 0x1001d98
 100b6df:	jmp    0x100b6ee
 100b6e1:	cmp    QWORD PTR [rdi+0x18],0x8
 100b6e6:	jb     0x100b6eb
 100b6e8:	mov    rdi,QWORD PTR [rdi]
 100b6eb:	mov    rcx,rdi
 100b6ee:	call   QWORD PTR [rip+0xffffffffffff5ef4]        # 0x10015e8
 100b6f4:	mov    rbx,rax
 100b6f7:	test   rbp,rbp
 100b6fa:	je     0x100b719
 100b6fc:	test   rax,rax
 100b6ff:	je     0x100b719
 100b701:	mov    r9,r15
 100b704:	mov    r8,rax
 100b707:	mov    rdx,rbp
 100b70a:	mov    rcx,r14
 100b70d:	call   0x100ba70
 100b712:	xor    ecx,ecx
 100b714:	test   eax,eax
 100b716:	cmovns esi,ecx
 100b719:	mov    rcx,rbp
 100b71c:	call   QWORD PTR [rip+0xffffffffffff5eb6]        # 0x10015d8
 100b722:	mov    rcx,rbx
 100b725:	call   QWORD PTR [rip+0xffffffffffff5ead]        # 0x10015d8
 100b72b:	lea    r11,[rsp+0x70]
 100b730:	mov    eax,esi
 100b732:	mov    rbx,QWORD PTR [r11+0x20]
 100b736:	mov    rbp,QWORD PTR [r11+0x28]
 100b73a:	mov    rsi,QWORD PTR [r11+0x30]
 100b73e:	mov    rsp,r11
 100b741:	pop    r15
 100b743:	pop    r14
 100b745:	pop    rdi
 100b746:	ret    
 100b747:	int3   
 100b748:	int3   
 100b749:	int3   
 100b74a:	int3   
 100b74b:	int3   
 100b74c:	int3   
 100b74d:	int3   
 100b74e:	int3   
 100b74f:	int3   
 100b750:	mov    QWORD PTR [rsp+0x8],rbx
 100b755:	mov    QWORD PTR [rsp+0x10],rbp
 100b75a:	mov    QWORD PTR [rsp+0x18],rsi
 100b75f:	mov    QWORD PTR [rsp+0x20],rdi
 100b764:	push   r12
 100b766:	push   r14
 100b768:	push   r15
 100b76a:	sub    rsp,0x80
 100b771:	mov    rsi,rcx
 100b774:	mov    rcx,QWORD PTR [rcx]
 100b777:	mov    r12,r8
 100b77a:	mov    r14,rdx
 100b77d:	lea    r8,[rip+0xffffffffffff64bc]        # 0x1001c40
 100b784:	lea    rdx,[rsp+0x58]
 100b789:	mov    r15,r9
 100b78c:	mov    ebx,0x6
 100b791:	call   QWORD PTR [rip+0xffffffffffff5899]        # 0x1001030
 100b797:	mov    r11,rax
 100b79a:	mov    rax,QWORD PTR [rax]
 100b79d:	mov    rcx,r14
 100b7a0:	mov    rdi,QWORD PTR [r11+0x8]
 100b7a4:	mov    QWORD PTR [rsp+0x30],rax
 100b7a9:	mov    rax,QWORD PTR [r11+0x10]
 100b7ad:	mov    QWORD PTR [rsp+0x40],rax
 100b7b2:	mov    rax,QWORD PTR [r11+0x18]
 100b7b6:	mov    QWORD PTR [rsp+0x48],rax
 100b7bb:	mov    rax,QWORD PTR [r11+0x20]
 100b7bf:	mov    QWORD PTR [rsp+0x50],rax
 100b7c4:	call   QWORD PTR [rip+0xffffffffffff5e1e]        # 0x10015e8
 100b7ca:	cmp    QWORD PTR [rdi+0x10],0x0
 100b7cf:	mov    rbp,rax
 100b7d2:	jne    0x100b7dd
 100b7d4:	lea    rcx,[rip+0xffffffffffff65bd]        # 0x1001d98
 100b7db:	jmp    0x100b7ea
 100b7dd:	cmp    QWORD PTR [rdi+0x18],0x8
 100b7e2:	jb     0x100b7e7
 100b7e4:	mov    rdi,QWORD PTR [rdi]
 100b7e7:	mov    rcx,rdi
 100b7ea:	call   QWORD PTR [rip+0xffffffffffff5df8]        # 0x10015e8
 100b7f0:	cmp    BYTE PTR [rsi+0x58],0x0
 100b7f4:	mov    rdi,rax
 100b7f7:	jne    0x100b81a
 100b7f9:	xor    r8d,r8d
 100b7fc:	mov    rdx,r14
 100b7ff:	mov    rcx,rsi
 100b802:	call   0x1008300
 100b807:	test   eax,eax
 100b809:	jne    0x100b81a
 100b80b:	mov    rdx,r14
 100b80e:	mov    rcx,rsi
 100b811:	call   0x1007230
 100b816:	test   al,al
 100b818:	je     0x100b841
 100b81a:	test   rbp,rbp
 100b81d:	je     0x100b841
 100b81f:	test   rdi,rdi
 100b822:	je     0x100b841
 100b824:	mov    r9,r12
 100b827:	mov    r8,rdi
 100b82a:	mov    rdx,rbp
 100b82d:	mov    rcx,rsi
 100b830:	mov    QWORD PTR [rsp+0x20],r15
 100b835:	call   0x100bb30
 100b83a:	xor    ecx,ecx
 100b83c:	test   eax,eax
 100b83e:	cmovns ebx,ecx
 100b841:	mov    rcx,rbp
 100b844:	call   QWORD PTR [rip+0xffffffffffff5d8e]        # 0x10015d8
 100b84a:	mov    rcx,rdi
 100b84d:	call   QWORD PTR [rip+0xffffffffffff5d85]        # 0x10015d8
 100b853:	lea    r11,[rsp+0x80]
 100b85b:	mov    eax,ebx
 100b85d:	mov    rbx,QWORD PTR [r11+0x20]
 100b861:	mov    rbp,QWORD PTR [r11+0x28]
 100b865:	mov    rsi,QWORD PTR [r11+0x30]
 100b869:	mov    rdi,QWORD PTR [r11+0x38]
 100b86d:	mov    rsp,r11
 100b870:	pop    r15
 100b872:	pop    r14
 100b874:	pop    r12
 100b876:	ret    
 100b877:	int3   
 100b878:	int3   
 100b879:	int3   
 100b87a:	int3   
 100b87b:	int3   
 100b87c:	int3   
 100b87d:	int3   
 100b87e:	int3   
 100b87f:	int3   
 100b880:	mov    r11,rsp
 100b883:	push   rbp
 100b884:	push   rbx
 100b885:	push   rdi
 100b886:	push   r14
 100b888:	push   r15
 100b88a:	mov    rbp,rsp
 100b88d:	sub    rsp,0x80
 100b894:	xor    eax,eax
 100b896:	xor    r15d,r15d
 100b899:	mov    r14,r8
 100b89c:	mov    QWORD PTR [rbp-0x38],rax
 100b8a0:	mov    QWORD PTR [rbp-0x20],rax
 100b8a4:	mov    QWORD PTR [rbp-0x18],rax
 100b8a8:	mov    QWORD PTR [rbp-0x10],rax
 100b8ac:	mov    QWORD PTR [rbp-0x8],rax
 100b8b0:	mov    QWORD PTR [rbp-0x30],rax
 100b8b4:	mov    QWORD PTR [rbp-0x28],rax
 100b8b8:	lea    rax,[rip+0xffffffffffff6651]        # 0x1001f10
 100b8bf:	mov    rbx,rcx
 100b8c2:	mov    QWORD PTR [r8],r15
 100b8c5:	mov    QWORD PTR [rbp-0x38],rax
 100b8c9:	test   rdx,rdx
 100b8cc:	je     0x100b8ee
 100b8ce:	mov    QWORD PTR [r11+0x8],rsi
 100b8d2:	lea    rsi,[rip+0xffffffffffff6647]        # 0x1001f20
 100b8d9:	mov    rdi,rdx
 100b8dc:	mov    ecx,0x2
 100b8e1:	mov    QWORD PTR [rbp-0x18],rdx
 100b8e5:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 100b8e8:	mov    rsi,QWORD PTR [r11+0x8]
 100b8ec:	jne    0x100b8f2
 100b8ee:	mov    QWORD PTR [rbp-0x18],r15
 100b8f2:	xor    edx,edx
 100b8f4:	lea    rax,[rbp-0x38]
 100b8f8:	lea    r9,[rbp-0x20]
 100b8fc:	mov    QWORD PTR [rsp+0x28],rax
 100b901:	lea    r8d,[rdx+0x14]
 100b905:	lea    rcx,[rip+0xffffffffffff661c]        # 0x1001f28
 100b90c:	mov    DWORD PTR [rsp+0x20],0x1
 100b914:	call   QWORD PTR [rip+0xffffffffffff5d8e]        # 0x10016a8
 100b91a:	test   eax,eax
 100b91c:	js     0x100b9c1
 100b922:	mov    rcx,QWORD PTR [rbp-0x30]
 100b926:	lea    rax,[rbp+0x40]
 100b92a:	lea    r8,[rbp-0x40]
 100b92e:	mov    QWORD PTR [rsp+0x38],rax
 100b933:	lea    rax,[rbp+0x38]
 100b937:	mov    QWORD PTR [rsp+0x30],r15
 100b93c:	mov    QWORD PTR [rsp+0x28],rax
 100b941:	lea    rax,[rbp+0x48]
 100b945:	lea    rdx,[rbp-0x3c]
 100b949:	xor    r9d,r9d
 100b94c:	mov    QWORD PTR [rsp+0x20],rax
 100b951:	call   QWORD PTR [rip+0xffffffffffff5d49]        # 0x10016a0
 100b957:	mov    edi,eax
 100b959:	test   eax,eax
 100b95b:	js     0x100b9a6
 100b95d:	mov    eax,DWORD PTR [rbp+0x40]
 100b960:	mov    r8d,DWORD PTR [rbp-0x40]
 100b964:	mov    edx,DWORD PTR [rbp-0x3c]
 100b967:	mov    rcx,QWORD PTR [rbp-0x30]
 100b96b:	mov    DWORD PTR [rsp+0x38],eax
 100b96f:	mov    eax,DWORD PTR [rbp+0x48]
 100b972:	mov    QWORD PTR [rsp+0x30],r15
 100b977:	xor    r9d,r9d
 100b97a:	mov    DWORD PTR [rsp+0x28],0x3
 100b982:	mov    DWORD PTR [rsp+0x20],eax
 100b986:	mov    DWORD PTR [rbp+0x38],0x3
 100b98d:	call   QWORD PTR [rip+0xffffffffffff5d1d]        # 0x10016b0
 100b993:	mov    edi,eax
 100b995:	test   eax,eax
 100b997:	js     0x100b9a6
 100b999:	mov    rcx,QWORD PTR [rbp-0x30]
 100b99d:	mov    QWORD PTR [r14],rcx
 100b9a0:	mov    rax,QWORD PTR [rcx]
 100b9a3:	call   QWORD PTR [rax+0x8]
 100b9a6:	mov    rcx,QWORD PTR [rbp-0x30]
 100b9aa:	mov    rax,QWORD PTR [rcx]
 100b9ad:	call   QWORD PTR [rax+0x10]
 100b9b0:	mov    eax,edi
 100b9b2:	add    rsp,0x80
 100b9b9:	pop    r15
 100b9bb:	pop    r14
 100b9bd:	pop    rdi
 100b9be:	pop    rbx
 100b9bf:	pop    rbp
 100b9c0:	ret    
 100b9c1:	mov    DWORD PTR [rbx+0x68],eax
 100b9c4:	add    rsp,0x80
 100b9cb:	pop    r15
 100b9cd:	pop    r14
 100b9cf:	pop    rdi
 100b9d0:	pop    rbx
 100b9d1:	pop    rbp
 100b9d2:	ret    
 100b9d3:	int3   
 100b9d4:	int3   
 100b9d5:	int3   
 100b9d6:	int3   
 100b9d7:	int3   
 100b9d8:	int3   
 100b9d9:	int3   
 100b9da:	int3   
 100b9db:	int3   
 100b9dc:	int3   
 100b9dd:	int3   
 100b9de:	int3   
 100b9df:	int3   
 100b9e0:	mov    QWORD PTR [rsp+0x10],rbx
 100b9e5:	push   rsi
 100b9e6:	sub    rsp,0x30
 100b9ea:	mov    rax,r8
 100b9ed:	mov    rsi,rdx
 100b9f0:	lea    r8,[rsp+0x20]
 100b9f5:	mov    rdx,rax
 100b9f8:	call   0x100b880
 100b9fd:	mov    ebx,eax
 100b9ff:	test   eax,eax
 100ba01:	jns    0x100ba1c
 100ba03:	mov    edx,eax
 100ba05:	mov    ecx,0x9b
 100ba0a:	call   0x100e600
 100ba0f:	mov    eax,ebx
 100ba11:	mov    rbx,QWORD PTR [rsp+0x48]
 100ba16:	add    rsp,0x30
 100ba1a:	pop    rsi
 100ba1b:	ret    
 100ba1c:	mov    QWORD PTR [rsp+0x40],rdi
 100ba21:	mov    rdi,QWORD PTR [rsp+0x20]
 100ba26:	lea    r8,[rsp+0x58]
 100ba2b:	mov    rax,QWORD PTR [rdi]
 100ba2e:	mov    rdx,rsi
 100ba31:	mov    rcx,rdi
 100ba34:	call   QWORD PTR [rax+0x50]
 100ba37:	mov    ebx,eax
 100ba39:	test   eax,eax
 100ba3b:	js     0x100ba47
 100ba3d:	xor    ebx,ebx
 100ba3f:	cmp    WORD PTR [rsp+0x58],bx
 100ba44:	sete   bl
 100ba47:	mov    rax,QWORD PTR [rdi]
 100ba4a:	mov    rcx,rdi
 100ba4d:	call   QWORD PTR [rax+0x10]
 100ba50:	mov    rdi,QWORD PTR [rsp+0x40]
 100ba55:	mov    eax,ebx
 100ba57:	mov    rbx,QWORD PTR [rsp+0x48]
 100ba5c:	add    rsp,0x30
 100ba60:	pop    rsi
 100ba61:	ret    
 100ba62:	int3   
 100ba63:	int3   
 100ba64:	int3   
 100ba65:	int3   
 100ba66:	int3   
 100ba67:	int3   
 100ba68:	int3   
 100ba69:	int3   
 100ba6a:	int3   
 100ba6b:	int3   
 100ba6c:	int3   
 100ba6d:	int3   
 100ba6e:	int3   
 100ba6f:	int3   
 100ba70:	mov    QWORD PTR [rsp+0x10],rbx
 100ba75:	mov    QWORD PTR [rsp+0x18],rbp
 100ba7a:	push   rsi
 100ba7b:	sub    rsp,0x30
 100ba7f:	mov    rax,r8
 100ba82:	mov    rbp,rdx
 100ba85:	lea    r8,[rsp+0x20]
 100ba8a:	mov    rdx,rax
 100ba8d:	mov    rsi,r9
 100ba90:	call   0x100b880
 100ba95:	mov    ebx,eax
 100ba97:	test   eax,eax
 100ba99:	jns    0x100bab9
 100ba9b:	mov    edx,eax
 100ba9d:	mov    ecx,0x9b
 100baa2:	call   0x100e600
 100baa7:	mov    eax,ebx
 100baa9:	mov    rbx,QWORD PTR [rsp+0x48]
 100baae:	mov    rbp,QWORD PTR [rsp+0x50]
 100bab3:	add    rsp,0x30
 100bab7:	pop    rsi
 100bab8:	ret    
 100bab9:	mov    rcx,rsi
 100babc:	mov    QWORD PTR [rsp+0x40],rdi
 100bac1:	call   QWORD PTR [rip+0xffffffffffff5b39]        # 0x1001600
 100bac7:	mov    rbx,QWORD PTR [rsp+0x20]
 100bacc:	lea    r8,[rsp+0x28]
 100bad1:	mov    rax,QWORD PTR [rbx]
 100bad4:	mov    rdx,rbp
 100bad7:	mov    rcx,rbx
 100bada:	call   QWORD PTR [rax+0x38]
 100badd:	mov    edi,eax
 100badf:	test   eax,eax
 100bae1:	js     0x100baf6
 100bae3:	mov    rcx,QWORD PTR [rsp+0x28]
 100bae8:	mov    eax,0x2011
 100baed:	mov    QWORD PTR [rsi+0x8],rcx
 100baf1:	mov    WORD PTR [rsi],ax
 100baf4:	jmp    0x100bb05
 100baf6:	mov    r8,rbp
 100baf9:	mov    edx,eax
 100bafb:	mov    ecx,0x9c
 100bb00:	call   0x100e600
 100bb05:	mov    rax,QWORD PTR [rbx]
 100bb08:	mov    rcx,rbx
 100bb0b:	call   QWORD PTR [rax+0x10]
 100bb0e:	mov    rbx,QWORD PTR [rsp+0x48]
 100bb13:	mov    rbp,QWORD PTR [rsp+0x50]
 100bb18:	mov    eax,edi
 100bb1a:	mov    rdi,QWORD PTR [rsp+0x40]
 100bb1f:	add    rsp,0x30
 100bb23:	pop    rsi
 100bb24:	ret    
 100bb25:	int3   
 100bb26:	int3   
 100bb27:	int3   
 100bb28:	int3   
 100bb29:	int3   
 100bb2a:	int3   
 100bb2b:	int3   
 100bb2c:	int3   
 100bb2d:	int3   
 100bb2e:	int3   
 100bb2f:	int3   
 100bb30:	rex push rbp
 100bb32:	push   rbx
 100bb33:	push   rsi
 100bb34:	push   rdi
 100bb35:	push   r14
 100bb37:	push   r15
 100bb39:	lea    rbp,[rsp-0x8]
 100bb3e:	sub    rsp,0x108
 100bb45:	mov    QWORD PTR [rbp-0x38],0xfffffffffffffffe
 100bb4d:	mov    rax,QWORD PTR [rip+0xf68c]        # 0x101b1e0
 100bb54:	xor    rax,rsp
 100bb57:	mov    QWORD PTR [rbp-0x10],rax
 100bb5b:	mov    r15,r9
 100bb5e:	mov    rax,r8
 100bb61:	mov    rsi,rdx
 100bb64:	mov    rdi,rcx
 100bb67:	mov    r14,QWORD PTR [rbp+0x60]
 100bb6b:	lea    r8,[rbp-0x80]
 100bb6f:	mov    rdx,rax
 100bb72:	call   0x100b880
 100bb77:	mov    ebx,eax
 100bb79:	test   eax,eax
 100bb7b:	jns    0x100bb8e
 100bb7d:	mov    edx,eax
 100bb7f:	mov    ecx,0x9b
 100bb84:	call   0x100e600
 100bb89:	jmp    0x100bd7a
 100bb8e:	lea    r9,[rsp+0x70]
 100bb93:	mov    r8d,DWORD PTR [rdi+0x60]
 100bb97:	mov    rdx,r14
 100bb9a:	mov    rcx,rdi
 100bb9d:	call   0x100c320
 100bba2:	mov    ebx,eax
 100bba4:	mov    rdi,QWORD PTR [rbp-0x80]
 100bba8:	test   eax,eax
 100bbaa:	js     0x100bd71
 100bbb0:	xor    ebx,ebx
 100bbb2:	mov    QWORD PTR [rbp-0x78],rbx
 100bbb6:	mov    rcx,QWORD PTR [rsp+0x70]
 100bbbb:	test   rcx,rcx
 100bbbe:	je     0x100bbd5
 100bbc0:	mov    rax,QWORD PTR [rcx]
 100bbc3:	lea    r8,[rbp-0x78]
 100bbc7:	lea    rdx,[rip+0xffffffffffff62e2]        # 0x1001eb0
 100bbce:	call   QWORD PTR [rax]
 100bbd0:	mov    rcx,QWORD PTR [rsp+0x70]
 100bbd5:	mov    QWORD PTR [rbp-0x80],rbx
 100bbd9:	mov    QWORD PTR [rbp-0x68],rbx
 100bbdd:	mov    QWORD PTR [rbp-0x50],rbx
 100bbe1:	mov    QWORD PTR [rbp-0x70],rbx
 100bbe5:	mov    rax,QWORD PTR [rcx]
 100bbe8:	lea    rdx,[rbp-0x40]
 100bbec:	call   QWORD PTR [rax+0x88]
 100bbf2:	mov    rcx,QWORD PTR [rsp+0x70]
 100bbf7:	mov    rax,QWORD PTR [rcx]
 100bbfa:	lea    rdx,[rsp+0x78]
 100bbff:	call   QWORD PTR [rax+0x58]
 100bc02:	mov    rcx,QWORD PTR [rsp+0x70]
 100bc07:	mov    rax,QWORD PTR [rcx]
 100bc0a:	lea    rdx,[rsp+0x78]
 100bc0f:	call   QWORD PTR [rax+0x58]
 100bc12:	mov    rcx,QWORD PTR [rsp+0x70]
 100bc17:	mov    rax,QWORD PTR [rcx]
 100bc1a:	lea    rdx,[rbp-0x60]
 100bc1e:	call   QWORD PTR [rax+0xb8]
 100bc24:	mov    rcx,QWORD PTR [rsp+0x70]
 100bc29:	mov    rax,QWORD PTR [rcx]
 100bc2c:	lea    rdx,[rbp-0x48]
 100bc30:	call   QWORD PTR [rax+0xc8]
 100bc36:	mov    rcx,QWORD PTR [rsp+0x70]
 100bc3b:	mov    rax,QWORD PTR [rcx]
 100bc3e:	lea    rdx,[rbp-0x5c]
 100bc42:	call   QWORD PTR [rax+0xd8]
 100bc48:	mov    rcx,QWORD PTR [rsp+0x70]
 100bc4d:	mov    rax,QWORD PTR [rcx]
 100bc50:	lea    rdx,[rbp-0x70]
 100bc54:	call   QWORD PTR [rax+0xe8]
 100bc5a:	mov    rcx,QWORD PTR [rsp+0x70]
 100bc5f:	mov    rax,QWORD PTR [rcx]
 100bc62:	lea    rdx,[rbp-0x50]
 100bc66:	call   QWORD PTR [rax+0xf8]
 100bc6c:	mov    rcx,QWORD PTR [rsp+0x70]
 100bc71:	mov    rax,QWORD PTR [rcx]
 100bc74:	lea    rdx,[rbp-0x58]
 100bc78:	call   QWORD PTR [rax+0x1f0]
 100bc7e:	mov    rcx,QWORD PTR [rbp-0x78]
 100bc82:	mov    rax,QWORD PTR [rcx]
 100bc85:	lea    rdx,[rbp-0x68]
 100bc89:	call   QWORD PTR [rax+0x38]
 100bc8c:	mov    rcx,QWORD PTR [rbp-0x78]
 100bc90:	mov    rax,QWORD PTR [rcx]
 100bc93:	lea    rdx,[rbp-0x80]
 100bc97:	call   QWORD PTR [rax+0x58]
 100bc9a:	mov    rcx,QWORD PTR [rsp+0x70]
 100bc9f:	mov    rax,QWORD PTR [rcx]
 100bca2:	call   QWORD PTR [rax+0x10]
 100bca5:	lea    rdx,[rbp-0x30]
 100bca9:	mov    rcx,QWORD PTR [rbp-0x50]
 100bcad:	call   QWORD PTR [rip+0xffffffffffff59e5]        # 0x1001698
 100bcb3:	lea    rdx,[rbp-0x20]
 100bcb7:	mov    rcx,QWORD PTR [rbp-0x68]
 100bcbb:	call   QWORD PTR [rip+0xffffffffffff59d7]        # 0x1001698
 100bcc1:	mov    r11,QWORD PTR [rdi]
 100bcc4:	mov    eax,DWORD PTR [rbp-0x58]
 100bcc7:	mov    DWORD PTR [rsp+0x68],eax
 100bccb:	mov    rax,QWORD PTR [r15+0x8]
 100bccf:	mov    QWORD PTR [rsp+0x60],rax
 100bcd4:	lea    rax,[rbp-0x30]
 100bcd8:	mov    QWORD PTR [rsp+0x58],rax
 100bcdd:	mov    rax,QWORD PTR [rbp-0x70]
 100bce1:	mov    QWORD PTR [rsp+0x50],rax
 100bce6:	mov    eax,DWORD PTR [rbp-0x5c]
 100bce9:	mov    DWORD PTR [rsp+0x48],eax
 100bced:	mov    eax,DWORD PTR [rbp-0x48]
 100bcf0:	mov    DWORD PTR [rsp+0x40],eax
 100bcf4:	mov    eax,DWORD PTR [rbp-0x60]
 100bcf7:	mov    DWORD PTR [rsp+0x38],eax
 100bcfb:	mov    eax,DWORD PTR [rsp+0x78]
 100bcff:	mov    DWORD PTR [rsp+0x30],eax
 100bd03:	mov    DWORD PTR [rsp+0x28],ebx
 100bd07:	movsd  xmm0,QWORD PTR [rbp-0x40]
 100bd0c:	movsd  QWORD PTR [rsp+0x20],xmm0
 100bd12:	mov    r9,QWORD PTR [rbp-0x80]
 100bd16:	lea    r8,[rbp-0x20]
 100bd1a:	mov    rdx,rsi
 100bd1d:	mov    rcx,rdi
 100bd20:	call   QWORD PTR [r11+0x40]
 100bd24:	mov    ebx,eax
 100bd26:	test   eax,eax
 100bd28:	jns    0x100bd39
 100bd2a:	mov    r8,rsi
 100bd2d:	mov    edx,eax
 100bd2f:	mov    ecx,0x9d
 100bd34:	call   0x100e600
 100bd39:	mov    rcx,QWORD PTR [rbp-0x70]
 100bd3d:	call   QWORD PTR [rip+0xffffffffffff5895]        # 0x10015d8
 100bd43:	mov    rcx,QWORD PTR [rbp-0x50]
 100bd47:	call   QWORD PTR [rip+0xffffffffffff588b]        # 0x10015d8
 100bd4d:	mov    rcx,QWORD PTR [rbp-0x68]
 100bd51:	call   QWORD PTR [rip+0xffffffffffff5881]        # 0x10015d8
 100bd57:	mov    rcx,QWORD PTR [rbp-0x80]
 100bd5b:	call   QWORD PTR [rip+0xffffffffffff5877]        # 0x10015d8
 100bd61:	nop
 100bd62:	mov    rcx,QWORD PTR [rbp-0x78]
 100bd66:	test   rcx,rcx
 100bd69:	je     0x100bd71
 100bd6b:	mov    rax,QWORD PTR [rcx]
 100bd6e:	call   QWORD PTR [rax+0x10]
 100bd71:	mov    rax,QWORD PTR [rdi]
 100bd74:	mov    rcx,rdi
 100bd77:	call   QWORD PTR [rax+0x10]
 100bd7a:	mov    eax,ebx
 100bd7c:	mov    rcx,QWORD PTR [rbp-0x10]
 100bd80:	xor    rcx,rsp
 100bd83:	call   0x100daf0
 100bd88:	add    rsp,0x108
 100bd8f:	pop    r15
 100bd91:	pop    r14
 100bd93:	pop    rdi
 100bd94:	pop    rsi
 100bd95:	pop    rbx
 100bd96:	pop    rbp
 100bd97:	ret    
 100bd98:	int3   
 100bd99:	int3   
 100bd9a:	int3   
 100bd9b:	int3   
 100bd9c:	int3   
 100bd9d:	int3   
 100bd9e:	int3   
 100bd9f:	int3   
 100bda0:	mov    QWORD PTR [rsp+0x10],rbx
 100bda5:	push   rsi
 100bda6:	sub    rsp,0x20
 100bdaa:	mov    rax,r8
 100bdad:	mov    rsi,rdx
 100bdb0:	lea    r8,[rsp+0x48]
 100bdb5:	mov    rdx,rax
 100bdb8:	call   0x100b880
 100bdbd:	mov    ebx,eax
 100bdbf:	test   eax,eax
 100bdc1:	jns    0x100bddc
 100bdc3:	mov    edx,eax
 100bdc5:	mov    ecx,0x9b
 100bdca:	call   0x100e600
 100bdcf:	mov    eax,ebx
 100bdd1:	mov    rbx,QWORD PTR [rsp+0x38]
 100bdd6:	add    rsp,0x20
 100bdda:	pop    rsi
 100bddb:	ret    
 100bddc:	mov    QWORD PTR [rsp+0x30],rdi
 100bde1:	mov    rdi,QWORD PTR [rsp+0x48]
 100bde6:	mov    rdx,rsi
 100bde9:	mov    rax,QWORD PTR [rdi]
 100bdec:	mov    rcx,rdi
 100bdef:	call   QWORD PTR [rax+0x48]
 100bdf2:	mov    rdx,QWORD PTR [rdi]
 100bdf5:	mov    rcx,rdi
 100bdf8:	mov    ebx,eax
 100bdfa:	call   QWORD PTR [rdx+0x10]
 100bdfd:	mov    rdi,QWORD PTR [rsp+0x30]
 100be02:	mov    eax,ebx
 100be04:	mov    rbx,QWORD PTR [rsp+0x38]
 100be09:	add    rsp,0x20
 100be0d:	pop    rsi
 100be0e:	ret    
 100be0f:	int3   
 100be10:	int3   
 100be11:	int3   
 100be12:	int3   
 100be13:	int3   
 100be14:	int3   
 100be15:	int3   
 100be16:	int3   
 100be17:	int3   
 100be18:	int3   
 100be19:	int3   
 100be1a:	int3   
 100be1b:	int3   
 100be1c:	int3   
 100be1d:	int3   
 100be1e:	int3   
 100be1f:	int3   
 100be20:	mov    r11,rsp
 100be23:	push   rdi
 100be24:	push   r14
 100be26:	push   r15
 100be28:	sub    rsp,0x50
 100be2c:	mov    QWORD PTR [r11-0x20],0xfffffffffffffffe
 100be34:	mov    QWORD PTR [r11+0x8],rbx
 100be38:	mov    QWORD PTR [r11+0x10],rbp
 100be3c:	mov    QWORD PTR [r11+0x18],rsi
 100be40:	mov    rsi,r9
 100be43:	mov    rbp,r8
 100be46:	movzx  r14d,dl
 100be4a:	mov    r15,rcx
 100be4d:	xor    ebx,ebx
 100be4f:	mov    QWORD PTR [r11-0x28],rbx
 100be53:	lea    rax,[r11-0x28]
 100be57:	mov    QWORD PTR [r11-0x48],rax
 100be5b:	lea    r9,[rip+0xffffffffffff5e6e]        # 0x1001cd0
 100be62:	xor    edx,edx
 100be64:	lea    r8d,[rbx+0x17]
 100be68:	lea    rcx,[rip+0xffffffffffff6f21]        # 0x1002d90
 100be6f:	call   QWORD PTR [rip+0xffffffffffff5843]        # 0x10016b8
 100be75:	mov    edi,eax
 100be77:	test   eax,eax
 100be79:	jns    0x100be87
 100be7b:	mov    edx,eax
 100be7d:	lea    ecx,[rbx+0x7c]
 100be80:	call   0x100e600
 100be85:	jmp    0x100beb1
 100be87:	mov    QWORD PTR [rsp+0x38],rbx
 100be8c:	mov    QWORD PTR [rsp+0x30],rbx
 100be91:	mov    QWORD PTR [rsp+0x28],rsi
 100be96:	mov    QWORD PTR [rsp+0x20],rbp
 100be9b:	movzx  r9d,r14b
 100be9f:	mov    r8b,0x1
 100bea2:	mov    rdx,QWORD PTR [rsp+0x40]
 100bea7:	mov    rcx,r15
 100beaa:	call   0x10087b0
 100beaf:	mov    edi,eax
 100beb1:	mov    eax,0x6
 100beb6:	test   edi,edi
 100beb8:	cmovs  ebx,eax
 100bebb:	mov    rcx,QWORD PTR [rsp+0x40]
 100bec0:	test   rcx,rcx
 100bec3:	je     0x100becb
 100bec5:	mov    rdx,QWORD PTR [rcx]
 100bec8:	call   QWORD PTR [rdx+0x10]
 100becb:	mov    eax,ebx
 100becd:	mov    rbx,QWORD PTR [rsp+0x70]
 100bed2:	mov    rbp,QWORD PTR [rsp+0x78]
 100bed7:	mov    rsi,QWORD PTR [rsp+0x80]
 100bedf:	add    rsp,0x50
 100bee3:	pop    r15
 100bee5:	pop    r14
 100bee7:	pop    rdi
 100bee8:	ret    
 100bee9:	int3   
 100beea:	int3   
 100beeb:	int3   
 100beec:	int3   
 100beed:	int3   
 100beee:	int3   
 100beef:	int3   
 100bef0:	mov    r11,rsp
 100bef3:	push   rdi
 100bef4:	push   r14
 100bef6:	push   r15
 100bef8:	sub    rsp,0x50
 100befc:	mov    QWORD PTR [r11-0x20],0xfffffffffffffffe
 100bf04:	mov    QWORD PTR [r11+0x8],rbx
 100bf08:	mov    QWORD PTR [r11+0x10],rbp
 100bf0c:	mov    QWORD PTR [r11+0x18],rsi
 100bf10:	mov    rsi,r9
 100bf13:	mov    rbp,r8
 100bf16:	movzx  r14d,dl
 100bf1a:	mov    r15,rcx
 100bf1d:	xor    ebx,ebx
 100bf1f:	mov    QWORD PTR [r11-0x28],rbx
 100bf23:	lea    rax,[r11-0x28]
 100bf27:	mov    QWORD PTR [r11-0x48],rax
 100bf2b:	lea    r9,[rip+0xffffffffffff5d9e]        # 0x1001cd0
 100bf32:	xor    edx,edx
 100bf34:	lea    r8d,[rbx+0x17]
 100bf38:	lea    rcx,[rip+0xffffffffffff6e51]        # 0x1002d90
 100bf3f:	call   QWORD PTR [rip+0xffffffffffff5773]        # 0x10016b8
 100bf45:	mov    edi,eax
 100bf47:	test   eax,eax
 100bf49:	jns    0x100bf57
 100bf4b:	mov    edx,eax
 100bf4d:	lea    ecx,[rbx+0x7c]
 100bf50:	call   0x100e600
 100bf55:	jmp    0x100bf91
 100bf57:	mov    rax,QWORD PTR [rsp+0x98]
 100bf5f:	mov    QWORD PTR [rsp+0x38],rax
 100bf64:	mov    rax,QWORD PTR [rsp+0x90]
 100bf6c:	mov    QWORD PTR [rsp+0x30],rax
 100bf71:	mov    QWORD PTR [rsp+0x28],rsi
 100bf76:	mov    QWORD PTR [rsp+0x20],rbp
 100bf7b:	movzx  r9d,r14b
 100bf7f:	xor    r8d,r8d
 100bf82:	mov    rdx,QWORD PTR [rsp+0x40]
 100bf87:	mov    rcx,r15
 100bf8a:	call   0x10087b0
 100bf8f:	mov    edi,eax
 100bf91:	mov    eax,0x6
 100bf96:	test   edi,edi
 100bf98:	cmovs  ebx,eax
 100bf9b:	mov    rcx,QWORD PTR [rsp+0x40]
 100bfa0:	test   rcx,rcx
 100bfa3:	je     0x100bfab
 100bfa5:	mov    rdx,QWORD PTR [rcx]
 100bfa8:	call   QWORD PTR [rdx+0x10]
 100bfab:	mov    eax,ebx
 100bfad:	mov    rbx,QWORD PTR [rsp+0x70]
 100bfb2:	mov    rbp,QWORD PTR [rsp+0x78]
 100bfb7:	mov    rsi,QWORD PTR [rsp+0x80]
 100bfbf:	add    rsp,0x50
 100bfc3:	pop    r15
 100bfc5:	pop    r14
 100bfc7:	pop    rdi
 100bfc8:	ret    
 100bfc9:	int3   
 100bfca:	int3   
 100bfcb:	int3   
 100bfcc:	int3   
 100bfcd:	int3   
 100bfce:	int3   
 100bfcf:	int3   
 100bfd0:	mov    QWORD PTR [rsp+0x8],rbx
 100bfd5:	mov    QWORD PTR [rsp+0x10],rbp
 100bfda:	mov    QWORD PTR [rsp+0x18],rsi
 100bfdf:	push   rdi
 100bfe0:	push   r14
 100bfe2:	push   r15
 100bfe4:	sub    rsp,0x50
 100bfe8:	mov    edi,DWORD PTR [rsp+0x90]
 100bfef:	mov    rbp,r9
 100bff2:	mov    r14d,r8d
 100bff5:	mov    r15,rdx
 100bff8:	lea    r9,[rsp+0x28]
 100bffd:	mov    r8d,edi
 100c000:	mov    rdx,rbp
 100c003:	mov    rsi,rcx
 100c006:	mov    ebx,0x6
 100c00b:	call   0x100c320
 100c010:	test   eax,eax
 100c012:	js     0x100c176
 100c018:	cmp    edi,0x2
 100c01b:	je     0x100c04b
 100c01d:	cmp    r14d,0x2
 100c021:	jne    0x100c04b
 100c023:	mov    rdx,QWORD PTR [rsp+0x28]
 100c028:	mov    r8,rbp
 100c02b:	mov    rcx,rsi
 100c02e:	call   0x1008760
 100c033:	mov    edi,eax
 100c035:	test   eax,eax
 100c037:	je     0x100c04b
 100c039:	mov    rcx,QWORD PTR [rsp+0x28]
 100c03e:	mov    rdx,QWORD PTR [rcx]
 100c041:	call   QWORD PTR [rdx+0x10]
 100c044:	mov    eax,edi
 100c046:	jmp    0x100c178
 100c04b:	mov    rdi,QWORD PTR [rsp+0x98]
 100c053:	xor    ebp,ebp
 100c055:	mov    rcx,rdi
 100c058:	mov    DWORD PTR [rsp+0x34],ebp
 100c05c:	call   QWORD PTR [rip+0xffffffffffff521e]        # 0x1001280
 100c062:	lea    ecx,[rbp+0x11]
 100c065:	lea    r8,[rsp+0x30]
 100c06a:	cdq    
 100c06b:	sub    eax,edx
 100c06d:	lea    edx,[rbp+0x1]
 100c070:	sar    eax,1
 100c072:	mov    DWORD PTR [rsp+0x30],eax
 100c076:	call   QWORD PTR [rip+0xffffffffffff55c4]        # 0x1001640
 100c07c:	mov    QWORD PTR [rsp+0x20],rax
 100c081:	test   rax,rax
 100c084:	jne    0x100c097
 100c086:	mov    edx,DWORD PTR [rsp+0x30]
 100c08a:	lea    ecx,[rbp+0x78]
 100c08d:	call   0x100e600
 100c092:	jmp    0x100c16b
 100c097:	lea    rdx,[rsp+0x38]
 100c09c:	mov    rcx,rax
 100c09f:	call   QWORD PTR [rip+0xffffffffffff558b]        # 0x1001630
 100c0a5:	test   eax,eax
 100c0a7:	jns    0x100c0ba
 100c0a9:	mov    edx,eax
 100c0ab:	mov    ecx,0x7a
 100c0b0:	call   0x100e600
 100c0b5:	jmp    0x100c160
 100c0ba:	mov    rax,QWORD PTR [rsp+0x20]
 100c0bf:	mov    rcx,QWORD PTR [rsp+0x38]
 100c0c4:	xor    edx,edx
 100c0c6:	mov    r8d,DWORD PTR [rax+0x18]
 100c0ca:	call   0x100dcba
 100c0cf:	mov    r11,QWORD PTR [rsp+0x20]
 100c0d4:	mov    rdx,QWORD PTR [rsp+0x38]
 100c0d9:	mov    r8d,DWORD PTR [r11+0x18]
 100c0dd:	mov    r9,rdi
 100c0e0:	mov    rcx,rsi
 100c0e3:	call   0x100d290
 100c0e8:	mov    rcx,QWORD PTR [rsp+0x20]
 100c0ed:	mov    edi,eax
 100c0ef:	call   QWORD PTR [rip+0xffffffffffff5533]        # 0x1001628
 100c0f5:	test   edi,edi
 100c0f7:	je     0x100c160
 100c0f9:	mov    rcx,QWORD PTR [rsp+0x20]
 100c0fe:	lea    r8,[rsp+0x40]
 100c103:	lea    rdx,[rip+0xffffffffffff7066]        # 0x1003170
 100c10a:	mov    DWORD PTR [rcx+0x18],edi
 100c10d:	mov    rcx,QWORD PTR [rsp+0x28]
 100c112:	mov    rax,QWORD PTR [rcx]
 100c115:	call   QWORD PTR [rax]
 100c117:	test   eax,eax
 100c119:	js     0x100c160
 100c11b:	mov    rcx,QWORD PTR [rsp+0x40]
 100c120:	lea    rdx,[rsp+0x20]
 100c125:	mov    rax,QWORD PTR [rcx]
 100c128:	call   QWORD PTR [rax+0x48]
 100c12b:	test   eax,eax
 100c12d:	jns    0x100c13d
 100c12f:	mov    edx,eax
 100c131:	mov    ecx,0x7f
 100c136:	call   0x100e600
 100c13b:	jmp    0x100c155
 100c13d:	mov    r9,QWORD PTR [rsp+0x28]
 100c142:	mov    r8d,r14d
 100c145:	mov    rdx,r15
 100c148:	mov    rcx,rsi
 100c14b:	call   0x100ca10
 100c150:	test   eax,eax
 100c152:	cmovns ebx,ebp
 100c155:	mov    rcx,QWORD PTR [rsp+0x40]
 100c15a:	mov    rdx,QWORD PTR [rcx]
 100c15d:	call   QWORD PTR [rdx+0x10]
 100c160:	mov    rcx,QWORD PTR [rsp+0x20]
 100c165:	call   QWORD PTR [rip+0xffffffffffff54cd]        # 0x1001638
 100c16b:	mov    rcx,QWORD PTR [rsp+0x28]
 100c170:	mov    rdx,QWORD PTR [rcx]
 100c173:	call   QWORD PTR [rdx+0x10]
 100c176:	mov    eax,ebx
 100c178:	mov    rbx,QWORD PTR [rsp+0x70]
 100c17d:	mov    rbp,QWORD PTR [rsp+0x78]
 100c182:	mov    rsi,QWORD PTR [rsp+0x80]
 100c18a:	add    rsp,0x50
 100c18e:	pop    r15
 100c190:	pop    r14
 100c192:	pop    rdi
 100c193:	ret    
 100c194:	int3   
 100c195:	int3   
 100c196:	int3   
 100c197:	int3   
 100c198:	int3   
 100c199:	int3   
 100c19a:	int3   
 100c19b:	int3   
 100c19c:	int3   
 100c19d:	int3   
 100c19e:	int3   
 100c19f:	int3   
 100c1a0:	mov    QWORD PTR [rsp+0x8],rbx
 100c1a5:	mov    QWORD PTR [rsp+0x10],rbp
 100c1aa:	mov    QWORD PTR [rsp+0x18],rsi
 100c1af:	push   rdi
 100c1b0:	sub    rsp,0x30
 100c1b4:	mov    rax,r9
 100c1b7:	mov    esi,r8d
 100c1ba:	mov    r8d,DWORD PTR [rsp+0x60]
 100c1bf:	mov    rbp,rdx
 100c1c2:	lea    r9,[rsp+0x20]
 100c1c7:	mov    rdx,rax
 100c1ca:	mov    rdi,rcx
 100c1cd:	mov    ebx,0x6
 100c1d2:	call   0x100c320
 100c1d7:	test   eax,eax
 100c1d9:	js     0x100c200
 100c1db:	mov    r9,QWORD PTR [rsp+0x20]
 100c1e0:	mov    r8d,esi
 100c1e3:	mov    rdx,rbp
 100c1e6:	mov    rcx,rdi
 100c1e9:	call   0x100ca10
 100c1ee:	xor    ecx,ecx
 100c1f0:	test   eax,eax
 100c1f2:	cmovns ebx,ecx
 100c1f5:	mov    rcx,QWORD PTR [rsp+0x20]
 100c1fa:	mov    rdx,QWORD PTR [rcx]
 100c1fd:	call   QWORD PTR [rdx+0x10]
 100c200:	mov    rbp,QWORD PTR [rsp+0x48]
 100c205:	mov    rsi,QWORD PTR [rsp+0x50]
 100c20a:	mov    eax,ebx
 100c20c:	mov    rbx,QWORD PTR [rsp+0x40]
 100c211:	add    rsp,0x30
 100c215:	pop    rdi
 100c216:	ret    
 100c217:	int3   
 100c218:	int3   
 100c219:	int3   
 100c21a:	int3   
 100c21b:	int3   
 100c21c:	int3   
 100c21d:	int3   
 100c21e:	int3   
 100c21f:	int3   
 100c220:	sub    rsp,0x38
 100c224:	mov    r9,rdx
 100c227:	mov    BYTE PTR [rsp+0x28],0x1
 100c22c:	mov    DWORD PTR [rsp+0x20],r8d
 100c231:	call   0x100c250
 100c236:	add    rsp,0x38
 100c23a:	ret    
 100c23b:	int3   
 100c23c:	int3   
 100c23d:	int3   
 100c23e:	int3   
 100c23f:	int3   
 100c240:	int3   
 100c241:	int3   
 100c242:	int3   
 100c243:	int3   
 100c244:	int3   
 100c245:	int3   
 100c246:	int3   
 100c247:	int3   
 100c248:	int3   
 100c249:	int3   
 100c24a:	int3   
 100c24b:	int3   
 100c24c:	int3   
 100c24d:	int3   
 100c24e:	int3   
 100c24f:	int3   
 100c250:	mov    QWORD PTR [rsp+0x8],rbx
 100c255:	mov    QWORD PTR [rsp+0x10],rbp
 100c25a:	mov    QWORD PTR [rsp+0x18],rsi
 100c25f:	mov    QWORD PTR [rsp+0x20],rdi
 100c264:	push   r14
 100c266:	sub    rsp,0x30
 100c26a:	mov    rax,r9
 100c26d:	mov    ebp,r8d
 100c270:	mov    r8d,DWORD PTR [rsp+0x60]
 100c275:	mov    r14,rdx
 100c278:	lea    r9,[rsp+0x20]
 100c27d:	mov    rdx,rax
 100c280:	mov    rsi,rcx
 100c283:	mov    ebx,0x6
 100c288:	call   0x100c320
 100c28d:	mov    edi,eax
 100c28f:	test   eax,eax
 100c291:	js     0x100c2fc
 100c293:	cmp    BYTE PTR [rsp+0x68],0x0
 100c298:	je     0x100c2d3
 100c29a:	mov    rcx,QWORD PTR [rsp+0x20]
 100c29f:	mov    BYTE PTR [rsi+0x58],0x1
 100c2a3:	lea    r8,[rsp+0x28]
 100c2a8:	mov    rax,QWORD PTR [rcx]
 100c2ab:	lea    rdx,[rip+0xffffffffffff638e]        # 0x1002640
 100c2b2:	call   QWORD PTR [rax]
 100c2b4:	test   eax,eax
 100c2b6:	js     0x100c2f1
 100c2b8:	mov    rcx,QWORD PTR [rsp+0x28]
 100c2bd:	mov    rax,QWORD PTR [rcx]
 100c2c0:	call   QWORD PTR [rax+0x138]
 100c2c6:	mov    rcx,QWORD PTR [rsp+0x28]
 100c2cb:	mov    edi,eax
 100c2cd:	mov    rax,QWORD PTR [rcx]
 100c2d0:	call   QWORD PTR [rax+0x10]
 100c2d3:	test   edi,edi
 100c2d5:	js     0x100c2f1
 100c2d7:	mov    r9,QWORD PTR [rsp+0x20]
 100c2dc:	mov    r8d,ebp
 100c2df:	mov    rdx,r14
 100c2e2:	mov    rcx,rsi
 100c2e5:	call   0x100ca10
 100c2ea:	xor    ecx,ecx
 100c2ec:	test   eax,eax
 100c2ee:	cmovns ebx,ecx
 100c2f1:	mov    rcx,QWORD PTR [rsp+0x20]
 100c2f6:	mov    rdx,QWORD PTR [rcx]
 100c2f9:	call   QWORD PTR [rdx+0x10]
 100c2fc:	mov    rbp,QWORD PTR [rsp+0x48]
 100c301:	mov    rsi,QWORD PTR [rsp+0x50]
 100c306:	mov    rdi,QWORD PTR [rsp+0x58]
 100c30b:	mov    eax,ebx
 100c30d:	mov    rbx,QWORD PTR [rsp+0x40]
 100c312:	add    rsp,0x30
 100c316:	pop    r14
 100c318:	ret    
 100c319:	int3   
 100c31a:	int3   
 100c31b:	int3   
 100c31c:	int3   
 100c31d:	int3   
 100c31e:	int3   
 100c31f:	int3   
 100c320:	mov    r11,rsp
 100c323:	push   r12
 100c325:	push   r14
 100c327:	push   r15
 100c329:	sub    rsp,0x70
 100c32d:	mov    QWORD PTR [r11-0x48],0xfffffffffffffffe
 100c335:	mov    QWORD PTR [r11+0x8],rbx
 100c339:	mov    QWORD PTR [r11+0x10],rsi
 100c33d:	mov    QWORD PTR [r11+0x18],rdi
 100c341:	mov    r15,r9
 100c344:	mov    edi,r8d
 100c347:	mov    r12,rdx
 100c34a:	mov    r14,rcx
 100c34d:	xor    ebx,ebx
 100c34f:	mov    QWORD PTR [r11+0x20],rbx
 100c353:	mov    QWORD PTR [r9],rbx
 100c356:	lea    rax,[r11+0x20]
 100c35a:	mov    QWORD PTR [r11-0x68],rax
 100c35e:	lea    r9,[rip+0xffffffffffff596b]        # 0x1001cd0
 100c365:	xor    edx,edx
 100c367:	lea    r8d,[rbx+0x17]
 100c36b:	lea    rcx,[rip+0xffffffffffff6a1e]        # 0x1002d90
 100c372:	call   QWORD PTR [rip+0xffffffffffff5340]        # 0x10016b8
 100c378:	mov    esi,eax
 100c37a:	test   eax,eax
 100c37c:	jns    0x100c38d
 100c37e:	mov    edx,eax
 100c380:	lea    ecx,[rbx+0x7c]
 100c383:	call   0x100e600
 100c388:	jmp    0x100c4a8
 100c38d:	lea    r8,[rip+0xffffffffffff5d5c]        # 0x10020f0
 100c394:	lea    rdx,[rsp+0x48]
 100c399:	mov    rcx,QWORD PTR [r14]
 100c39c:	call   QWORD PTR [rip+0xffffffffffff4c8e]        # 0x1001030
 100c3a2:	mov    r11,QWORD PTR [rsp+0x50]
 100c3a7:	cmp    QWORD PTR [r11+0x10],0x0
 100c3ac:	je     0x100c44d
 100c3b2:	mov    rcx,QWORD PTR [rsp+0x50]
 100c3b7:	cmp    QWORD PTR [rcx+0x18],0x8
 100c3bc:	jb     0x100c3c1
 100c3be:	mov    rcx,QWORD PTR [rcx]
 100c3c1:	test   rcx,rcx
 100c3c4:	jne    0x100c3cd
 100c3c6:	mov    QWORD PTR [rsp+0x38],rbx
 100c3cb:	jmp    0x100c3eb
 100c3cd:	call   QWORD PTR [rip+0xffffffffffff5215]        # 0x10015e8
 100c3d3:	mov    rbx,rax
 100c3d6:	mov    QWORD PTR [rsp+0x38],rax
 100c3db:	test   rax,rax
 100c3de:	jne    0x100c3eb
 100c3e0:	mov    ecx,0x8007000e
 100c3e5:	call   0x1004f80
 100c3ea:	nop
 100c3eb:	mov    rcx,QWORD PTR [rsp+0xa8]
 100c3f3:	mov    rax,QWORD PTR [rcx]
 100c3f6:	mov    rdx,rbx
 100c3f9:	call   QWORD PTR [rax+0x130]
 100c3ff:	mov    esi,eax
 100c401:	test   eax,eax
 100c403:	jns    0x100c429
 100c405:	mov    rcx,rbx
 100c408:	call   QWORD PTR [rip+0xffffffffffff51ca]        # 0x10015d8
 100c40e:	nop
 100c40f:	mov    rcx,QWORD PTR [rsp+0xa8]
 100c417:	test   rcx,rcx
 100c41a:	je     0x100c422
 100c41c:	mov    rdx,QWORD PTR [rcx]
 100c41f:	call   QWORD PTR [rdx+0x10]
 100c422:	mov    eax,esi
 100c424:	jmp    0x100c4bd
 100c429:	mov    rcx,rbx
 100c42c:	call   QWORD PTR [rip+0xffffffffffff51a6]        # 0x10015d8
 100c432:	jmp    0x100c44d
 100c434:	mov    rcx,QWORD PTR [rsp+0xa8]
 100c43c:	test   rcx,rcx
 100c43f:	je     0x100c447
 100c441:	mov    rax,QWORD PTR [rcx]
 100c444:	call   QWORD PTR [rax+0x10]
 100c447:	mov    eax,DWORD PTR [rsp+0x30]
 100c44b:	jmp    0x100c4bd
 100c44d:	dec    edi
 100c44f:	je     0x100c490
 100c451:	dec    edi
 100c453:	je     0x100c478
 100c455:	dec    edi
 100c457:	je     0x100c460
 100c459:	mov    esi,0x8000ffff
 100c45e:	jmp    0x100c4a8
 100c460:	mov    r9,r15
 100c463:	mov    r8,r12
 100c466:	mov    rdx,QWORD PTR [rsp+0xa8]
 100c46e:	mov    rcx,r14
 100c471:	call   0x100c8b0
 100c476:	jmp    0x100c4a6
 100c478:	mov    r9,r15
 100c47b:	mov    r8,r12
 100c47e:	mov    rdx,QWORD PTR [rsp+0xa8]
 100c486:	mov    rcx,r14
 100c489:	call   0x100c4e0
 100c48e:	jmp    0x100c4a6
 100c490:	mov    r9,r15
 100c493:	mov    r8,r12
 100c496:	mov    rdx,QWORD PTR [rsp+0xa8]
 100c49e:	mov    rcx,r14
 100c4a1:	call   0x100c5a0
 100c4a6:	mov    esi,eax
 100c4a8:	mov    rcx,QWORD PTR [rsp+0xa8]
 100c4b0:	test   rcx,rcx
 100c4b3:	je     0x100c4bb
 100c4b5:	mov    rax,QWORD PTR [rcx]
 100c4b8:	call   QWORD PTR [rax+0x10]
 100c4bb:	mov    eax,esi
 100c4bd:	lea    r11,[rsp+0x70]
 100c4c2:	mov    rbx,QWORD PTR [r11+0x20]
 100c4c6:	mov    rsi,QWORD PTR [r11+0x28]
 100c4ca:	mov    rdi,QWORD PTR [r11+0x30]
 100c4ce:	mov    rsp,r11
 100c4d1:	pop    r15
 100c4d3:	pop    r14
 100c4d5:	pop    r12
 100c4d7:	ret    
 100c4d8:	int3   
 100c4d9:	int3   
 100c4da:	int3   
 100c4db:	int3   
 100c4dc:	int3   
 100c4dd:	int3   
 100c4de:	int3   
 100c4df:	int3   
 100c4e0:	push   r14
 100c4e2:	sub    rsp,0x40
 100c4e6:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 100c4ef:	mov    QWORD PTR [rsp+0x50],rbx
 100c4f4:	mov    QWORD PTR [rsp+0x58],rsi
 100c4f9:	mov    QWORD PTR [rsp+0x68],rdi
 100c4fe:	mov    r14,r9
 100c501:	mov    rsi,r8
 100c504:	mov    rdi,rdx
 100c507:	test   r8,r8
 100c50a:	jne    0x100c515
 100c50c:	xor    ebx,ebx
 100c50e:	mov    QWORD PTR [rsp+0x60],rbx
 100c513:	jmp    0x100c536
 100c515:	mov    rcx,r8
 100c518:	call   QWORD PTR [rip+0xffffffffffff50ca]        # 0x10015e8
 100c51e:	mov    rbx,rax
 100c521:	mov    QWORD PTR [rsp+0x60],rax
 100c526:	test   rax,rax
 100c529:	jne    0x100c536
 100c52b:	mov    ecx,0x8007000e
 100c530:	call   0x1004f80
 100c535:	nop
 100c536:	mov    rax,QWORD PTR [rdi]
 100c539:	xor    r8d,r8d
 100c53c:	mov    QWORD PTR [rsp+0x20],r14
 100c541:	xor    r9d,r9d
 100c544:	mov    rdx,rbx
 100c547:	mov    rcx,rdi
 100c54a:	call   QWORD PTR [rax+0x78]
 100c54d:	mov    edi,eax
 100c54f:	test   eax,eax
 100c551:	jns    0x100c564
 100c553:	mov    r8d,eax
 100c556:	mov    rdx,rsi
 100c559:	mov    ecx,0x7d
 100c55e:	call   0x100e600
 100c563:	nop
 100c564:	mov    rcx,rbx
 100c567:	call   QWORD PTR [rip+0xffffffffffff506b]        # 0x10015d8
 100c56d:	nop
 100c56e:	jmp    0x100c574
 100c570:	mov    edi,DWORD PTR [rsp+0x60]
 100c574:	mov    eax,edi
 100c576:	mov    rbx,QWORD PTR [rsp+0x50]
 100c57b:	mov    rsi,QWORD PTR [rsp+0x58]
 100c580:	mov    rdi,QWORD PTR [rsp+0x68]
 100c585:	add    rsp,0x40
 100c589:	pop    r14
 100c58b:	ret    
 100c58c:	int3   
 100c58d:	int3   
 100c58e:	int3   
 100c58f:	int3   
 100c590:	int3   
 100c591:	int3   
 100c592:	int3   
 100c593:	int3   
 100c594:	int3   
 100c595:	int3   
 100c596:	int3   
 100c597:	int3   
 100c598:	int3   
 100c599:	int3   
 100c59a:	int3   
 100c59b:	int3   
 100c59c:	int3   
 100c59d:	int3   
 100c59e:	int3   
 100c59f:	int3   
 100c5a0:	mov    QWORD PTR [rsp+0x20],r9
 100c5a5:	mov    QWORD PTR [rsp+0x10],rdx
 100c5aa:	push   rbx
 100c5ab:	push   rsi
 100c5ac:	push   rdi
 100c5ad:	push   r12
 100c5af:	push   r13
 100c5b1:	push   r14
 100c5b3:	push   r15
 100c5b5:	sub    rsp,0xc0
 100c5bc:	mov    QWORD PTR [rsp+0x90],0xfffffffffffffffe
 100c5c8:	mov    r13,r8
 100c5cb:	mov    r12,rcx
 100c5ce:	xor    eax,eax
 100c5d0:	mov    esi,eax
 100c5d2:	mov    QWORD PTR [rsp+0x50],rax
 100c5d7:	mov    r15d,eax
 100c5da:	mov    QWORD PTR [rsp+0x58],rax
 100c5df:	mov    ebx,eax
 100c5e1:	mov    QWORD PTR [rsp+0x40],rax
 100c5e6:	mov    r14d,eax
 100c5e9:	mov    QWORD PTR [rsp+0x48],rax
 100c5ee:	test   r8,r8
 100c5f1:	je     0x100c61b
 100c5f3:	xor    ecx,ecx
 100c5f5:	call   QWORD PTR [rip+0xffffffffffff4fdd]        # 0x10015d8
 100c5fb:	mov    rcx,r13
 100c5fe:	call   QWORD PTR [rip+0xffffffffffff4fe4]        # 0x10015e8
 100c604:	mov    rsi,rax
 100c607:	mov    QWORD PTR [rsp+0x50],rax
 100c60c:	test   rax,rax
 100c60f:	jne    0x100c61b
 100c611:	mov    ecx,0x8007000e
 100c616:	call   0x1004f80
 100c61b:	lea    r8,[rip+0xffffffffffff568e]        # 0x1001cb0
 100c622:	lea    rdx,[rsp+0x98]
 100c62a:	mov    rcx,QWORD PTR [r12]
 100c62e:	call   QWORD PTR [rip+0xffffffffffff49fc]        # 0x1001030
 100c634:	mov    rcx,QWORD PTR [rax]
 100c637:	mov    QWORD PTR [rsp+0x60],rcx
 100c63c:	mov    rdi,QWORD PTR [rax+0x8]
 100c640:	mov    rcx,QWORD PTR [rax+0x10]
 100c644:	mov    QWORD PTR [rsp+0x70],rcx
 100c649:	mov    rcx,QWORD PTR [rax+0x18]
 100c64d:	mov    QWORD PTR [rsp+0x78],rcx
 100c652:	mov    rax,QWORD PTR [rax+0x20]
 100c656:	mov    QWORD PTR [rsp+0x80],rax
 100c65e:	cmp    QWORD PTR [rdi+0x18],0x8
 100c663:	jb     0x100c668
 100c665:	mov    rdi,QWORD PTR [rdi]
 100c668:	test   rdi,rdi
 100c66b:	je     0x100c695
 100c66d:	xor    ecx,ecx
 100c66f:	call   QWORD PTR [rip+0xffffffffffff4f63]        # 0x10015d8
 100c675:	mov    rcx,rdi
 100c678:	call   QWORD PTR [rip+0xffffffffffff4f6a]        # 0x10015e8
 100c67e:	mov    r15,rax
 100c681:	mov    QWORD PTR [rsp+0x58],rax
 100c686:	test   rax,rax
 100c689:	jne    0x100c695
 100c68b:	mov    ecx,0x8007000e
 100c690:	call   0x1004f80
 100c695:	lea    r8,[rip+0xffffffffffff55d4]        # 0x1001c70
 100c69c:	lea    rdx,[rsp+0x98]
 100c6a4:	mov    rcx,QWORD PTR [r12]
 100c6a8:	call   QWORD PTR [rip+0xffffffffffff4982]        # 0x1001030
 100c6ae:	mov    rcx,QWORD PTR [rax]
 100c6b1:	mov    QWORD PTR [rsp+0x60],rcx
 100c6b6:	mov    rdi,QWORD PTR [rax+0x8]
 100c6ba:	mov    rcx,QWORD PTR [rax+0x10]
 100c6be:	mov    QWORD PTR [rsp+0x70],rcx
 100c6c3:	mov    rcx,QWORD PTR [rax+0x18]
 100c6c7:	mov    QWORD PTR [rsp+0x78],rcx
 100c6cc:	mov    rax,QWORD PTR [rax+0x20]
 100c6d0:	mov    QWORD PTR [rsp+0x80],rax
 100c6d8:	cmp    QWORD PTR [rdi+0x18],0x8
 100c6dd:	jb     0x100c6e2
 100c6df:	mov    rdi,QWORD PTR [rdi]
 100c6e2:	test   rdi,rdi
 100c6e5:	je     0x100c70f
 100c6e7:	xor    ecx,ecx
 100c6e9:	call   QWORD PTR [rip+0xffffffffffff4ee9]        # 0x10015d8
 100c6ef:	mov    rcx,rdi
 100c6f2:	call   QWORD PTR [rip+0xffffffffffff4ef0]        # 0x10015e8
 100c6f8:	mov    rbx,rax
 100c6fb:	mov    QWORD PTR [rsp+0x40],rax
 100c700:	test   rax,rax
 100c703:	jne    0x100c70f
 100c705:	mov    ecx,0x8007000e
 100c70a:	call   0x1004f80
 100c70f:	lea    r8,[rip+0xffffffffffff557a]        # 0x1001c90
 100c716:	lea    rdx,[rsp+0x98]
 100c71e:	mov    rcx,QWORD PTR [r12]
 100c722:	call   QWORD PTR [rip+0xffffffffffff4908]        # 0x1001030
 100c728:	mov    rcx,QWORD PTR [rax]
 100c72b:	mov    QWORD PTR [rsp+0x60],rcx
 100c730:	mov    rdi,QWORD PTR [rax+0x8]
 100c734:	mov    rcx,QWORD PTR [rax+0x10]
 100c738:	mov    QWORD PTR [rsp+0x70],rcx
 100c73d:	mov    rcx,QWORD PTR [rax+0x18]
 100c741:	mov    QWORD PTR [rsp+0x78],rcx
 100c746:	mov    rax,QWORD PTR [rax+0x20]
 100c74a:	mov    QWORD PTR [rsp+0x80],rax
 100c752:	cmp    QWORD PTR [rdi+0x18],0x8
 100c757:	jb     0x100c75c
 100c759:	mov    rdi,QWORD PTR [rdi]
 100c75c:	test   rdi,rdi
 100c75f:	je     0x100c789
 100c761:	xor    ecx,ecx
 100c763:	call   QWORD PTR [rip+0xffffffffffff4e6f]        # 0x10015d8
 100c769:	mov    rcx,rdi
 100c76c:	call   QWORD PTR [rip+0xffffffffffff4e76]        # 0x10015e8
 100c772:	mov    r14,rax
 100c775:	mov    QWORD PTR [rsp+0x48],rax
 100c77a:	test   rax,rax
 100c77d:	jne    0x100c789
 100c77f:	mov    ecx,0x8007000e
 100c784:	call   0x1004f80
 100c789:	lea    rcx,[rip+0xffffffffffff5608]        # 0x1001d98
 100c790:	call   QWORD PTR [rip+0xffffffffffff4e52]        # 0x10015e8
 100c796:	mov    rdi,rax
 100c799:	test   rax,rax
 100c79c:	jne    0x100c7a8
 100c79e:	mov    ecx,0x8007000e
 100c7a3:	call   0x1004f80
 100c7a8:	xor    r9d,r9d
 100c7ab:	mov    r8d,0x400
 100c7b1:	mov    rdx,rax
 100c7b4:	mov    rcx,r15
 100c7b7:	call   0x100e5ac
 100c7bc:	cmp    eax,0x1
 100c7bf:	sete   r12b
 100c7c3:	mov    rcx,rdi
 100c7c6:	call   QWORD PTR [rip+0xffffffffffff4e0c]        # 0x10015d8
 100c7cc:	mov    rcx,QWORD PTR [rsp+0x108]
 100c7d4:	mov    rdx,QWORD PTR [rsp+0x118]
 100c7dc:	mov    r8,r14
 100c7df:	mov    rax,QWORD PTR [rcx]
 100c7e2:	mov    QWORD PTR [rsp+0x38],rdx
 100c7e7:	xor    edx,edx
 100c7e9:	mov    QWORD PTR [rsp+0x30],rdx
 100c7ee:	mov    WORD PTR [rsp+0x28],dx
 100c7f3:	test   r12b,r12b
 100c7f6:	je     0x100c80e
 100c7f8:	mov    QWORD PTR [rsp+0x20],rdx
 100c7fd:	xor    r9d,r9d
 100c800:	mov    rdx,rsi
 100c803:	call   QWORD PTR [rax+0xa0]
 100c809:	mov    r12d,eax
 100c80c:	jmp    0x100c822
 100c80e:	mov    QWORD PTR [rsp+0x20],rbx
 100c813:	mov    r9,r15
 100c816:	mov    rdx,rsi
 100c819:	call   QWORD PTR [rax+0xa0]
 100c81f:	mov    r12d,eax
 100c822:	test   r12d,r12d
 100c825:	jns    0x100c838
 100c827:	mov    r8d,r12d
 100c82a:	mov    rdx,r13
 100c82d:	mov    ecx,0x7d
 100c832:	call   0x100e600
 100c837:	nop
 100c838:	jmp    0x100c856
 100c83a:	mov    r12d,DWORD PTR [rsp+0x110]
 100c842:	mov    rsi,QWORD PTR [rsp+0x50]
 100c847:	mov    r15,QWORD PTR [rsp+0x58]
 100c84c:	mov    rbx,QWORD PTR [rsp+0x40]
 100c851:	mov    r14,QWORD PTR [rsp+0x48]
 100c856:	mov    rcx,rbx
 100c859:	call   QWORD PTR [rip+0xffffffffffff4d81]        # 0x10015e0
 100c85f:	mov    ecx,eax
 100c861:	add    rcx,rcx
 100c864:	mov    rdi,rbx
 100c867:	xor    eax,eax
 100c869:	rep stos BYTE PTR es:[rdi],al
 100c86b:	mov    rcx,r14
 100c86e:	call   QWORD PTR [rip+0xffffffffffff4d64]        # 0x10015d8
 100c874:	nop
 100c875:	mov    rcx,rbx
 100c878:	call   QWORD PTR [rip+0xffffffffffff4d5a]        # 0x10015d8
 100c87e:	nop
 100c87f:	mov    rcx,r15
 100c882:	call   QWORD PTR [rip+0xffffffffffff4d50]        # 0x10015d8
 100c888:	nop
 100c889:	mov    rcx,rsi
 100c88c:	call   QWORD PTR [rip+0xffffffffffff4d46]        # 0x10015d8
 100c892:	mov    eax,r12d
 100c895:	add    rsp,0xc0
 100c89c:	pop    r15
 100c89e:	pop    r14
 100c8a0:	pop    r13
 100c8a2:	pop    r12
 100c8a4:	pop    rdi
 100c8a5:	pop    rsi
 100c8a6:	pop    rbx
 100c8a7:	ret    
 100c8a8:	int3   
 100c8a9:	int3   
 100c8aa:	int3   
 100c8ab:	int3   
 100c8ac:	int3   
 100c8ad:	int3   
 100c8ae:	int3   
 100c8af:	int3   
 100c8b0:	mov    rax,rsp
 100c8b3:	push   r12
 100c8b5:	push   r14
 100c8b7:	push   r15
 100c8b9:	sub    rsp,0xa0
 100c8c0:	mov    QWORD PTR [rax-0x78],0xfffffffffffffffe
 100c8c8:	mov    QWORD PTR [rax+0x8],rbx
 100c8cc:	mov    QWORD PTR [rax+0x10],rsi
 100c8d0:	mov    QWORD PTR [rax+0x20],rdi
 100c8d4:	mov    r12,r9
 100c8d7:	mov    r14,r8
 100c8da:	mov    r15,rdx
 100c8dd:	mov    rsi,rcx
 100c8e0:	xor    ebx,ebx
 100c8e2:	mov    QWORD PTR [rax+0x18],rbx
 100c8e6:	xor    edi,edi
 100c8e8:	mov    QWORD PTR [rax-0x80],rdi
 100c8ec:	test   r8,r8
 100c8ef:	je     0x100c91c
 100c8f1:	xor    ecx,ecx
 100c8f3:	call   QWORD PTR [rip+0xffffffffffff4cdf]        # 0x10015d8
 100c8f9:	mov    rcx,r14
 100c8fc:	call   QWORD PTR [rip+0xffffffffffff4ce6]        # 0x10015e8
 100c902:	mov    rbx,rax
 100c905:	mov    QWORD PTR [rsp+0xd0],rax
 100c90d:	test   rax,rax
 100c910:	jne    0x100c91c
 100c912:	mov    ecx,0x8007000e
 100c917:	call   0x1004f80
 100c91c:	lea    r8,[rip+0xffffffffffff536d]        # 0x1001c90
 100c923:	lea    rdx,[rsp+0x70]
 100c928:	mov    rcx,QWORD PTR [rsi]
 100c92b:	call   QWORD PTR [rip+0xffffffffffff46ff]        # 0x1001030
 100c931:	mov    rcx,QWORD PTR [rax]
 100c934:	mov    QWORD PTR [rsp+0x48],rcx
 100c939:	mov    rsi,QWORD PTR [rax+0x8]
 100c93d:	mov    rcx,QWORD PTR [rax+0x10]
 100c941:	mov    QWORD PTR [rsp+0x58],rcx
 100c946:	mov    rcx,QWORD PTR [rax+0x18]
 100c94a:	mov    QWORD PTR [rsp+0x60],rcx
 100c94f:	mov    rax,QWORD PTR [rax+0x20]
 100c953:	mov    QWORD PTR [rsp+0x68],rax
 100c958:	cmp    QWORD PTR [rsi+0x18],0x8
 100c95d:	jb     0x100c962
 100c95f:	mov    rsi,QWORD PTR [rsi]
 100c962:	test   rsi,rsi
 100c965:	je     0x100c98f
 100c967:	xor    ecx,ecx
 100c969:	call   QWORD PTR [rip+0xffffffffffff4c69]        # 0x10015d8
 100c96f:	mov    rcx,rsi
 100c972:	call   QWORD PTR [rip+0xffffffffffff4c70]        # 0x10015e8
 100c978:	mov    rdi,rax
 100c97b:	mov    QWORD PTR [rsp+0x38],rax
 100c980:	test   rax,rax
 100c983:	jne    0x100c98f
 100c985:	mov    ecx,0x8007000e
 100c98a:	call   0x1004f80
 100c98f:	mov    rax,QWORD PTR [r15]
 100c992:	xor    r9d,r9d
 100c995:	mov    QWORD PTR [rsp+0x28],r12
 100c99a:	mov    QWORD PTR [rsp+0x20],r9
 100c99f:	mov    r8,rdi
 100c9a2:	mov    rdx,rbx
 100c9a5:	mov    rcx,r15
 100c9a8:	call   QWORD PTR [rax+0x168]
 100c9ae:	mov    esi,eax
 100c9b0:	test   eax,eax
 100c9b2:	jns    0x100c9c5
 100c9b4:	mov    r8d,eax
 100c9b7:	mov    rdx,r14
 100c9ba:	mov    ecx,0x7d
 100c9bf:	call   0x100e600
 100c9c4:	nop
 100c9c5:	mov    rcx,rdi
 100c9c8:	call   QWORD PTR [rip+0xffffffffffff4c0a]        # 0x10015d8
 100c9ce:	nop
 100c9cf:	mov    rcx,rbx
 100c9d2:	call   QWORD PTR [rip+0xffffffffffff4c00]        # 0x10015d8
 100c9d8:	nop
 100c9d9:	jmp    0x100c9e2
 100c9db:	mov    esi,DWORD PTR [rsp+0xd0]
 100c9e2:	mov    eax,esi
 100c9e4:	lea    r11,[rsp+0xa0]
 100c9ec:	mov    rbx,QWORD PTR [r11+0x20]
 100c9f0:	mov    rsi,QWORD PTR [r11+0x28]
 100c9f4:	mov    rdi,QWORD PTR [r11+0x38]
 100c9f8:	mov    rsp,r11
 100c9fb:	pop    r15
 100c9fd:	pop    r14
 100c9ff:	pop    r12
 100ca01:	ret    
 100ca02:	int3   
 100ca03:	int3   
 100ca04:	int3   
 100ca05:	int3   
 100ca06:	int3   
 100ca07:	int3   
 100ca08:	int3   
 100ca09:	int3   
 100ca0a:	int3   
 100ca0b:	int3   
 100ca0c:	int3   
 100ca0d:	int3   
 100ca0e:	int3   
 100ca0f:	int3   
 100ca10:	mov    rax,rsp
 100ca13:	push   rdi
 100ca14:	push   r12
 100ca16:	push   r13
 100ca18:	push   r14
 100ca1a:	push   r15
 100ca1c:	sub    rsp,0x70
 100ca20:	mov    QWORD PTR [rax-0x58],0xfffffffffffffffe
 100ca28:	mov    QWORD PTR [rax+0x10],rbx
 100ca2c:	mov    QWORD PTR [rax+0x18],rsi
 100ca30:	mov    r15,r9
 100ca33:	mov    esi,r8d
 100ca36:	mov    r13,rdx
 100ca39:	mov    r14,rcx
 100ca3c:	xor    ebx,ebx
 100ca3e:	mov    QWORD PTR [rax+0x8],rbx
 100ca42:	cmp    BYTE PTR [rcx+0x58],bl
 100ca45:	jne    0x100cace
 100ca4b:	mov    edi,DWORD PTR [rcx+0x5c]
 100ca4e:	mov    r12d,DWORD PTR [rcx+0x64]
 100ca52:	mov    ecx,r8d
 100ca55:	dec    ecx
 100ca57:	je     0x100ca86
 100ca59:	dec    ecx
 100ca5b:	je     0x100ca6b
 100ca5d:	dec    ecx
 100ca5f:	je     0x100ca86
 100ca61:	mov    eax,0x8000ffff
 100ca66:	jmp    0x100cd15
 100ca6b:	mov    DWORD PTR [r14+0x5c],0x2
 100ca73:	mov    r8,rdx
 100ca76:	xor    edx,edx
 100ca78:	mov    rcx,r14
 100ca7b:	call   0x1009b10
 100ca80:	mov    DWORD PTR [r14+0x5c],edi
 100ca84:	jmp    0x100ca99
 100ca86:	mov    DWORD PTR [r14+0x64],r8d
 100ca8a:	xor    r8d,r8d
 100ca8d:	mov    rcx,r14
 100ca90:	call   0x1008300
 100ca95:	mov    DWORD PTR [r14+0x64],r12d
 100ca99:	test   eax,eax
 100ca9b:	sete   al
 100ca9e:	test   al,al
 100caa0:	je     0x100cace
 100caa2:	mov    rdx,r13
 100caa5:	mov    rcx,r14
 100caa8:	call   0x1007230
 100caad:	test   al,al
 100caaf:	jne    0x100cace
 100cab1:	mov    rcx,QWORD PTR [rsp+0xa0]
 100cab9:	test   rcx,rcx
 100cabc:	je     0x100cac4
 100cabe:	mov    rax,QWORD PTR [rcx]
 100cac1:	call   QWORD PTR [rax+0x10]
 100cac4:	mov    eax,0x80004005
 100cac9:	jmp    0x100cd15
 100cace:	lea    rax,[rsp+0xa0]
 100cad6:	mov    QWORD PTR [rsp+0x20],rax
 100cadb:	lea    r9,[rip+0xffffffffffff51ee]        # 0x1001cd0
 100cae2:	xor    edx,edx
 100cae4:	lea    r8d,[rdx+0x17]
 100cae8:	lea    rcx,[rip+0xffffffffffff62a1]        # 0x1002d90
 100caef:	call   QWORD PTR [rip+0xffffffffffff4bc3]        # 0x10016b8
 100caf5:	mov    edi,eax
 100caf7:	test   eax,eax
 100caf9:	jns    0x100cb0c
 100cafb:	mov    edx,eax
 100cafd:	mov    ecx,0x7c
 100cb02:	call   0x100e600
 100cb07:	jmp    0x100cd00
 100cb0c:	lea    r8,[rip+0xffffffffffff4f05]        # 0x1001a18
 100cb13:	lea    rdx,[rsp+0x48]
 100cb18:	mov    rcx,QWORD PTR [r14]
 100cb1b:	call   QWORD PTR [rip+0xffffffffffff450f]        # 0x1001030
 100cb21:	cmp    DWORD PTR [rsp+0x60],0xffffffff
 100cb26:	je     0x100cca5
 100cb2c:	mov    QWORD PTR [rsp+0x38],rbx
 100cb31:	mov    rdi,QWORD PTR [rsp+0x68]
 100cb36:	cmp    QWORD PTR [rdi+0x18],0x8
 100cb3b:	jb     0x100cb40
 100cb3d:	mov    rdi,QWORD PTR [rdi]
 100cb40:	test   rdi,rdi
 100cb43:	je     0x100cb6d
 100cb45:	xor    ecx,ecx
 100cb47:	call   QWORD PTR [rip+0xffffffffffff4a8b]        # 0x10015d8
 100cb4d:	mov    rcx,rdi
 100cb50:	call   QWORD PTR [rip+0xffffffffffff4a92]        # 0x10015e8
 100cb56:	mov    rbx,rax
 100cb59:	mov    QWORD PTR [rsp+0x38],rax
 100cb5e:	test   rax,rax
 100cb61:	jne    0x100cb6d
 100cb63:	mov    ecx,0x8007000e
 100cb68:	call   0x1004f80
 100cb6d:	mov    rcx,QWORD PTR [rsp+0xa0]
 100cb75:	mov    rax,QWORD PTR [rcx]
 100cb78:	mov    rdx,rbx
 100cb7b:	call   QWORD PTR [rax+0x130]
 100cb81:	mov    r12d,eax
 100cb84:	test   eax,eax
 100cb86:	jns    0x100cbc2
 100cb88:	mov    rcx,rbx
 100cb8b:	call   QWORD PTR [rip+0xffffffffffff4a4f]        # 0x10015e0
 100cb91:	mov    ecx,eax
 100cb93:	add    rcx,rcx
 100cb96:	mov    rdi,rbx
 100cb99:	xor    eax,eax
 100cb9b:	rep stos BYTE PTR es:[rdi],al
 100cb9d:	mov    rcx,rbx
 100cba0:	call   QWORD PTR [rip+0xffffffffffff4a32]        # 0x10015d8
 100cba6:	nop
 100cba7:	mov    rcx,QWORD PTR [rsp+0xa0]
 100cbaf:	test   rcx,rcx
 100cbb2:	je     0x100cbba
 100cbb4:	mov    rdx,QWORD PTR [rcx]
 100cbb7:	call   QWORD PTR [rdx+0x10]
 100cbba:	mov    eax,r12d
 100cbbd:	jmp    0x100cd15
 100cbc2:	mov    rax,QWORD PTR [r15]
 100cbc5:	mov    rdx,rbx
 100cbc8:	mov    rcx,r15
 100cbcb:	call   QWORD PTR [rax+0x200]
 100cbd1:	mov    r12d,eax
 100cbd4:	test   eax,eax
 100cbd6:	jns    0x100cc12
 100cbd8:	mov    rcx,rbx
 100cbdb:	call   QWORD PTR [rip+0xffffffffffff49ff]        # 0x10015e0
 100cbe1:	mov    ecx,eax
 100cbe3:	add    rcx,rcx
 100cbe6:	mov    rdi,rbx
 100cbe9:	xor    eax,eax
 100cbeb:	rep stos BYTE PTR es:[rdi],al
 100cbed:	mov    rcx,rbx
 100cbf0:	call   QWORD PTR [rip+0xffffffffffff49e2]        # 0x10015d8
 100cbf6:	nop
 100cbf7:	mov    rcx,QWORD PTR [rsp+0xa0]
 100cbff:	test   rcx,rcx
 100cc02:	je     0x100cc0a
 100cc04:	mov    rdx,QWORD PTR [rcx]
 100cc07:	call   QWORD PTR [rdx+0x10]
 100cc0a:	mov    eax,r12d
 100cc0d:	jmp    0x100cd15
 100cc12:	mov    rax,QWORD PTR [r15]
 100cc15:	mov    edx,DWORD PTR [rsp+0x60]
 100cc19:	mov    rcx,r15
 100cc1c:	call   QWORD PTR [rax+0x1f8]
 100cc22:	mov    r12d,eax
 100cc25:	mov    rcx,rbx
 100cc28:	test   eax,eax
 100cc2a:	jns    0x100cc63
 100cc2c:	call   QWORD PTR [rip+0xffffffffffff49ae]        # 0x10015e0
 100cc32:	mov    ecx,eax
 100cc34:	add    rcx,rcx
 100cc37:	mov    rdi,rbx
 100cc3a:	xor    eax,eax
 100cc3c:	rep stos BYTE PTR es:[rdi],al
 100cc3e:	mov    rcx,rbx
 100cc41:	call   QWORD PTR [rip+0xffffffffffff4991]        # 0x10015d8
 100cc47:	nop
 100cc48:	mov    rcx,QWORD PTR [rsp+0xa0]
 100cc50:	test   rcx,rcx
 100cc53:	je     0x100cc5b
 100cc55:	mov    rdx,QWORD PTR [rcx]
 100cc58:	call   QWORD PTR [rdx+0x10]
 100cc5b:	mov    eax,r12d
 100cc5e:	jmp    0x100cd15
 100cc63:	call   QWORD PTR [rip+0xffffffffffff4977]        # 0x10015e0
 100cc69:	mov    ecx,eax
 100cc6b:	add    rcx,rcx
 100cc6e:	mov    rdi,rbx
 100cc71:	xor    eax,eax
 100cc73:	rep stos BYTE PTR es:[rdi],al
 100cc75:	mov    rcx,rbx
 100cc78:	call   QWORD PTR [rip+0xffffffffffff495a]        # 0x10015d8
 100cc7e:	jmp    0x100cca5
 100cc80:	mov    rcx,QWORD PTR [rsp+0x38]
 100cc85:	call   QWORD PTR [rip+0xffffffffffff494d]        # 0x10015d8
 100cc8b:	nop
 100cc8c:	mov    rcx,QWORD PTR [rsp+0xa0]
 100cc94:	test   rcx,rcx
 100cc97:	je     0x100cc9f
 100cc99:	mov    rax,QWORD PTR [rcx]
 100cc9c:	call   QWORD PTR [rax+0x10]
 100cc9f:	mov    eax,DWORD PTR [rsp+0x30]
 100cca3:	jmp    0x100cd15
 100cca5:	dec    esi
 100cca7:	je     0x100cce8
 100cca9:	dec    esi
 100ccab:	je     0x100ccd0
 100ccad:	dec    esi
 100ccaf:	je     0x100ccb8
 100ccb1:	mov    edi,0x8000ffff
 100ccb6:	jmp    0x100cd00
 100ccb8:	mov    r9,r15
 100ccbb:	mov    r8,r13
 100ccbe:	mov    rdx,QWORD PTR [rsp+0xa0]
 100ccc6:	mov    rcx,r14
 100ccc9:	call   0x100d130
 100ccce:	jmp    0x100ccfe
 100ccd0:	mov    r9,r15
 100ccd3:	mov    r8,r13
 100ccd6:	mov    rdx,QWORD PTR [rsp+0xa0]
 100ccde:	mov    rcx,r14
 100cce1:	call   0x100cd40
 100cce6:	jmp    0x100ccfe
 100cce8:	mov    r9,r15
 100cceb:	mov    r8,r13
 100ccee:	mov    rdx,QWORD PTR [rsp+0xa0]
 100ccf6:	mov    rcx,r14
 100ccf9:	call   0x100ce20
 100ccfe:	mov    edi,eax
 100cd00:	mov    rcx,QWORD PTR [rsp+0xa0]
 100cd08:	test   rcx,rcx
 100cd0b:	je     0x100cd13
 100cd0d:	mov    rax,QWORD PTR [rcx]
 100cd10:	call   QWORD PTR [rax+0x10]
 100cd13:	mov    eax,edi
 100cd15:	lea    r11,[rsp+0x70]
 100cd1a:	mov    rbx,QWORD PTR [r11+0x38]
 100cd1e:	mov    rsi,QWORD PTR [r11+0x40]
 100cd22:	mov    rsp,r11
 100cd25:	pop    r15
 100cd27:	pop    r14
 100cd29:	pop    r13
 100cd2b:	pop    r12
 100cd2d:	pop    rdi
 100cd2e:	ret    
 100cd2f:	int3   
 100cd30:	int3   
 100cd31:	int3   
 100cd32:	int3   
 100cd33:	int3   
 100cd34:	int3   
 100cd35:	int3   
 100cd36:	int3   
 100cd37:	int3   
 100cd38:	int3   
 100cd39:	int3   
 100cd3a:	int3   
 100cd3b:	int3   
 100cd3c:	int3   
 100cd3d:	int3   
 100cd3e:	int3   
 100cd3f:	int3   
 100cd40:	push   r14
 100cd42:	sub    rsp,0x40
 100cd46:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 100cd4f:	mov    QWORD PTR [rsp+0x50],rbx
 100cd54:	mov    QWORD PTR [rsp+0x58],rsi
 100cd59:	mov    QWORD PTR [rsp+0x68],rdi
 100cd5e:	mov    rdi,r9
 100cd61:	mov    rsi,r8
 100cd64:	mov    r14,rdx
 100cd67:	test   r8,r8
 100cd6a:	jne    0x100cd75
 100cd6c:	xor    ebx,ebx
 100cd6e:	mov    QWORD PTR [rsp+0x60],rbx
 100cd73:	jmp    0x100cd96
 100cd75:	mov    rcx,r8
 100cd78:	call   QWORD PTR [rip+0xffffffffffff486a]        # 0x10015e8
 100cd7e:	mov    rbx,rax
 100cd81:	mov    QWORD PTR [rsp+0x60],rax
 100cd86:	test   rax,rax
 100cd89:	jne    0x100cd96
 100cd8b:	mov    ecx,0x8007000e
 100cd90:	call   0x1004f80
 100cd95:	nop
 100cd96:	mov    rax,QWORD PTR [rdi]
 100cd99:	lea    r8,[rsp+0x28]
 100cd9e:	lea    rdx,[rip+0xffffffffffff5b5b]        # 0x1002900
 100cda5:	mov    rcx,rdi
 100cda8:	call   QWORD PTR [rax]
 100cdaa:	mov    edi,eax
 100cdac:	test   eax,eax
 100cdae:	jns    0x100cdbe
 100cdb0:	mov    edx,eax
 100cdb2:	mov    ecx,0x80
 100cdb7:	call   0x100e600
 100cdbc:	jmp    0x100cdec
 100cdbe:	mov    rax,QWORD PTR [r14]
 100cdc1:	xor    r9d,r9d
 100cdc4:	mov    r8,QWORD PTR [rsp+0x28]
 100cdc9:	mov    rdx,rbx
 100cdcc:	mov    rcx,r14
 100cdcf:	call   QWORD PTR [rax+0x80]
 100cdd5:	mov    edi,eax
 100cdd7:	test   eax,eax
 100cdd9:	jns    0x100cdec
 100cddb:	mov    r8d,eax
 100cdde:	mov    rdx,rsi
 100cde1:	mov    ecx,0x7e
 100cde6:	call   0x100e600
 100cdeb:	nop
 100cdec:	mov    rcx,rbx
 100cdef:	call   QWORD PTR [rip+0xffffffffffff47e3]        # 0x10015d8
 100cdf5:	nop
 100cdf6:	jmp    0x100cdfc
 100cdf8:	mov    edi,DWORD PTR [rsp+0x60]
 100cdfc:	mov    eax,edi
 100cdfe:	mov    rbx,QWORD PTR [rsp+0x50]
 100ce03:	mov    rsi,QWORD PTR [rsp+0x58]
 100ce08:	mov    rdi,QWORD PTR [rsp+0x68]
 100ce0d:	add    rsp,0x40
 100ce11:	pop    r14
 100ce13:	ret    
 100ce14:	int3   
 100ce15:	int3   
 100ce16:	int3   
 100ce17:	int3   
 100ce18:	int3   
 100ce19:	int3   
 100ce1a:	int3   
 100ce1b:	int3   
 100ce1c:	int3   
 100ce1d:	int3   
 100ce1e:	int3   
 100ce1f:	int3   
 100ce20:	mov    QWORD PTR [rsp+0x20],r9
 100ce25:	mov    QWORD PTR [rsp+0x10],rdx
 100ce2a:	push   rbx
 100ce2b:	push   rsi
 100ce2c:	push   rdi
 100ce2d:	push   r12
 100ce2f:	push   r13
 100ce31:	push   r14
 100ce33:	push   r15
 100ce35:	sub    rsp,0xc0
 100ce3c:	mov    QWORD PTR [rsp+0x90],0xfffffffffffffffe
 100ce48:	mov    r13,r8
 100ce4b:	mov    r12,rcx
 100ce4e:	xor    ebx,ebx
 100ce50:	mov    QWORD PTR [rsp+0x50],rbx
 100ce55:	xor    r15d,r15d
 100ce58:	mov    QWORD PTR [rsp+0x58],r15
 100ce5d:	xor    r14d,r14d
 100ce60:	mov    QWORD PTR [rsp+0x40],r14
 100ce65:	xor    esi,esi
 100ce67:	mov    QWORD PTR [rsp+0x48],rsi
 100ce6c:	test   r8,r8
 100ce6f:	je     0x100ce99
 100ce71:	xor    ecx,ecx
 100ce73:	call   QWORD PTR [rip+0xffffffffffff475f]        # 0x10015d8
 100ce79:	mov    rcx,r13
 100ce7c:	call   QWORD PTR [rip+0xffffffffffff4766]        # 0x10015e8
 100ce82:	mov    rbx,rax
 100ce85:	mov    QWORD PTR [rsp+0x50],rax
 100ce8a:	test   rax,rax
 100ce8d:	jne    0x100ce99
 100ce8f:	mov    ecx,0x8007000e
 100ce94:	call   0x1004f80
 100ce99:	lea    r8,[rip+0xffffffffffff4db8]        # 0x1001c58
 100cea0:	lea    rdx,[rsp+0x98]
 100cea8:	mov    rcx,QWORD PTR [r12]
 100ceac:	call   QWORD PTR [rip+0xffffffffffff417e]        # 0x1001030
 100ceb2:	mov    rcx,QWORD PTR [rax]
 100ceb5:	mov    QWORD PTR [rsp+0x60],rcx
 100ceba:	mov    rdi,QWORD PTR [rax+0x8]
 100cebe:	mov    rcx,QWORD PTR [rax+0x10]
 100cec2:	mov    QWORD PTR [rsp+0x70],rcx
 100cec7:	mov    rcx,QWORD PTR [rax+0x18]
 100cecb:	mov    QWORD PTR [rsp+0x78],rcx
 100ced0:	mov    rax,QWORD PTR [rax+0x20]
 100ced4:	mov    QWORD PTR [rsp+0x80],rax
 100cedc:	cmp    QWORD PTR [rdi+0x18],0x8
 100cee1:	jb     0x100cee6
 100cee3:	mov    rdi,QWORD PTR [rdi]
 100cee6:	test   rdi,rdi
 100cee9:	je     0x100cf13
 100ceeb:	xor    ecx,ecx
 100ceed:	call   QWORD PTR [rip+0xffffffffffff46e5]        # 0x10015d8
 100cef3:	mov    rcx,rdi
 100cef6:	call   QWORD PTR [rip+0xffffffffffff46ec]        # 0x10015e8
 100cefc:	mov    r15,rax
 100ceff:	mov    QWORD PTR [rsp+0x58],rax
 100cf04:	test   rax,rax
 100cf07:	jne    0x100cf13
 100cf09:	mov    ecx,0x8007000e
 100cf0e:	call   0x1004f80
 100cf13:	lea    r8,[rip+0xffffffffffff4d06]        # 0x1001c20
 100cf1a:	lea    rdx,[rsp+0x98]
 100cf22:	mov    rcx,QWORD PTR [r12]
 100cf26:	call   QWORD PTR [rip+0xffffffffffff4104]        # 0x1001030
 100cf2c:	mov    rcx,QWORD PTR [rax]
 100cf2f:	mov    QWORD PTR [rsp+0x60],rcx
 100cf34:	mov    rdi,QWORD PTR [rax+0x8]
 100cf38:	mov    rcx,QWORD PTR [rax+0x10]
 100cf3c:	mov    QWORD PTR [rsp+0x70],rcx
 100cf41:	mov    rcx,QWORD PTR [rax+0x18]
 100cf45:	mov    QWORD PTR [rsp+0x78],rcx
 100cf4a:	mov    rax,QWORD PTR [rax+0x20]
 100cf4e:	mov    QWORD PTR [rsp+0x80],rax
 100cf56:	cmp    QWORD PTR [rdi+0x18],0x8
 100cf5b:	jb     0x100cf60
 100cf5d:	mov    rdi,QWORD PTR [rdi]
 100cf60:	test   rdi,rdi
 100cf63:	je     0x100cf8d
 100cf65:	xor    ecx,ecx
 100cf67:	call   QWORD PTR [rip+0xffffffffffff466b]        # 0x10015d8
 100cf6d:	mov    rcx,rdi
 100cf70:	call   QWORD PTR [rip+0xffffffffffff4672]        # 0x10015e8
 100cf76:	mov    r14,rax
 100cf79:	mov    QWORD PTR [rsp+0x40],rax
 100cf7e:	test   rax,rax
 100cf81:	jne    0x100cf8d
 100cf83:	mov    ecx,0x8007000e
 100cf88:	call   0x1004f80
 100cf8d:	lea    r8,[rip+0xffffffffffff4cac]        # 0x1001c40
 100cf94:	lea    rdx,[rsp+0x98]
 100cf9c:	mov    rcx,QWORD PTR [r12]
 100cfa0:	call   QWORD PTR [rip+0xffffffffffff408a]        # 0x1001030
 100cfa6:	mov    rcx,QWORD PTR [rax]
 100cfa9:	mov    QWORD PTR [rsp+0x60],rcx
 100cfae:	mov    rdi,QWORD PTR [rax+0x8]
 100cfb2:	mov    rcx,QWORD PTR [rax+0x10]
 100cfb6:	mov    QWORD PTR [rsp+0x70],rcx
 100cfbb:	mov    rcx,QWORD PTR [rax+0x18]
 100cfbf:	mov    QWORD PTR [rsp+0x78],rcx
 100cfc4:	mov    rax,QWORD PTR [rax+0x20]
 100cfc8:	mov    QWORD PTR [rsp+0x80],rax
 100cfd0:	cmp    QWORD PTR [rdi+0x18],0x8
 100cfd5:	jb     0x100cfda
 100cfd7:	mov    rdi,QWORD PTR [rdi]
 100cfda:	test   rdi,rdi
 100cfdd:	je     0x100d007
 100cfdf:	xor    ecx,ecx
 100cfe1:	call   QWORD PTR [rip+0xffffffffffff45f1]        # 0x10015d8
 100cfe7:	mov    rcx,rdi
 100cfea:	call   QWORD PTR [rip+0xffffffffffff45f8]        # 0x10015e8
 100cff0:	mov    rsi,rax
 100cff3:	mov    QWORD PTR [rsp+0x48],rax
 100cff8:	test   rax,rax
 100cffb:	jne    0x100d007
 100cffd:	mov    ecx,0x8007000e
 100d002:	call   0x1004f80
 100d007:	lea    rcx,[rip+0xffffffffffff4d8a]        # 0x1001d98
 100d00e:	call   QWORD PTR [rip+0xffffffffffff45d4]        # 0x10015e8
 100d014:	mov    rdi,rax
 100d017:	test   rax,rax
 100d01a:	jne    0x100d026
 100d01c:	mov    ecx,0x8007000e
 100d021:	call   0x1004f80
 100d026:	xor    r9d,r9d
 100d029:	mov    r8d,0x400
 100d02f:	mov    rdx,rax
 100d032:	mov    rcx,r15
 100d035:	call   0x100e5ac
 100d03a:	cmp    eax,0x1
 100d03d:	sete   r12b
 100d041:	mov    rcx,rdi
 100d044:	call   QWORD PTR [rip+0xffffffffffff458e]        # 0x10015d8
 100d04a:	mov    rcx,QWORD PTR [rsp+0x108]
 100d052:	mov    r9,rbx
 100d055:	xor    r8d,r8d
 100d058:	mov    rax,QWORD PTR [rcx]
 100d05b:	test   r12b,r12b
 100d05e:	je     0x100d084
 100d060:	xor    edx,edx
 100d062:	mov    QWORD PTR [rsp+0x30],rdx
 100d067:	mov    QWORD PTR [rsp+0x28],rdx
 100d06c:	mov    QWORD PTR [rsp+0x20],rsi
 100d071:	mov    rdx,QWORD PTR [rsp+0x118]
 100d079:	call   QWORD PTR [rax+0x98]
 100d07f:	mov    r12d,eax
 100d082:	jmp    0x100d0a4
 100d084:	mov    QWORD PTR [rsp+0x30],r14
 100d089:	mov    QWORD PTR [rsp+0x28],r15
 100d08e:	mov    QWORD PTR [rsp+0x20],rsi
 100d093:	mov    rdx,QWORD PTR [rsp+0x118]
 100d09b:	call   QWORD PTR [rax+0x98]
 100d0a1:	mov    r12d,eax
 100d0a4:	test   r12d,r12d
 100d0a7:	jns    0x100d0ba
 100d0a9:	mov    r8d,r12d
 100d0ac:	mov    rdx,r13
 100d0af:	mov    ecx,0x7e
 100d0b4:	call   0x100e600
 100d0b9:	nop
 100d0ba:	jmp    0x100d0d8
 100d0bc:	mov    r12d,DWORD PTR [rsp+0x110]
 100d0c4:	mov    rbx,QWORD PTR [rsp+0x50]
 100d0c9:	mov    r15,QWORD PTR [rsp+0x58]
 100d0ce:	mov    r14,QWORD PTR [rsp+0x40]
 100d0d3:	mov    rsi,QWORD PTR [rsp+0x48]
 100d0d8:	mov    rcx,r14
 100d0db:	call   QWORD PTR [rip+0xffffffffffff44ff]        # 0x10015e0
 100d0e1:	mov    ecx,eax
 100d0e3:	add    rcx,rcx
 100d0e6:	mov    rdi,r14
 100d0e9:	xor    eax,eax
 100d0eb:	rep stos BYTE PTR es:[rdi],al
 100d0ed:	mov    rcx,rsi
 100d0f0:	call   QWORD PTR [rip+0xffffffffffff44e2]        # 0x10015d8
 100d0f6:	nop
 100d0f7:	mov    rcx,r14
 100d0fa:	call   QWORD PTR [rip+0xffffffffffff44d8]        # 0x10015d8
 100d100:	nop
 100d101:	mov    rcx,r15
 100d104:	call   QWORD PTR [rip+0xffffffffffff44ce]        # 0x10015d8
 100d10a:	nop
 100d10b:	mov    rcx,rbx
 100d10e:	call   QWORD PTR [rip+0xffffffffffff44c4]        # 0x10015d8
 100d114:	mov    eax,r12d
 100d117:	add    rsp,0xc0
 100d11e:	pop    r15
 100d120:	pop    r14
 100d122:	pop    r13
 100d124:	pop    r12
 100d126:	pop    rdi
 100d127:	pop    rsi
 100d128:	pop    rbx
 100d129:	ret    
 100d12a:	int3   
 100d12b:	int3   
 100d12c:	int3   
 100d12d:	int3   
 100d12e:	int3   
 100d12f:	int3   
 100d130:	mov    rax,rsp
 100d133:	push   r12
 100d135:	push   r14
 100d137:	push   r15
 100d139:	sub    rsp,0xa0
 100d140:	mov    QWORD PTR [rax-0x78],0xfffffffffffffffe
 100d148:	mov    QWORD PTR [rax+0x8],rbx
 100d14c:	mov    QWORD PTR [rax+0x10],rsi
 100d150:	mov    QWORD PTR [rax+0x20],rdi
 100d154:	mov    r12,r9
 100d157:	mov    r14,r8
 100d15a:	mov    r15,rdx
 100d15d:	mov    rsi,rcx
 100d160:	xor    ebx,ebx
 100d162:	mov    QWORD PTR [rax+0x18],rbx
 100d166:	mov    edi,ebx
 100d168:	mov    QWORD PTR [rax-0x80],rbx
 100d16c:	test   r8,r8
 100d16f:	je     0x100d19c
 100d171:	xor    ecx,ecx
 100d173:	call   QWORD PTR [rip+0xffffffffffff445f]        # 0x10015d8
 100d179:	mov    rcx,r14
 100d17c:	call   QWORD PTR [rip+0xffffffffffff4466]        # 0x10015e8
 100d182:	mov    rbx,rax
 100d185:	mov    QWORD PTR [rsp+0xd0],rax
 100d18d:	test   rax,rax
 100d190:	jne    0x100d19c
 100d192:	mov    ecx,0x8007000e
 100d197:	call   0x1004f80
 100d19c:	lea    r8,[rip+0xffffffffffff4f5d]        # 0x1002100
 100d1a3:	lea    rdx,[rsp+0x70]
 100d1a8:	mov    rcx,QWORD PTR [rsi]
 100d1ab:	call   QWORD PTR [rip+0xffffffffffff3e7f]        # 0x1001030
 100d1b1:	mov    rcx,QWORD PTR [rax]
 100d1b4:	mov    QWORD PTR [rsp+0x48],rcx
 100d1b9:	mov    rsi,QWORD PTR [rax+0x8]
 100d1bd:	mov    rcx,QWORD PTR [rax+0x10]
 100d1c1:	mov    QWORD PTR [rsp+0x58],rcx
 100d1c6:	mov    rcx,QWORD PTR [rax+0x18]
 100d1ca:	mov    QWORD PTR [rsp+0x60],rcx
 100d1cf:	mov    rax,QWORD PTR [rax+0x20]
 100d1d3:	mov    QWORD PTR [rsp+0x68],rax
 100d1d8:	cmp    QWORD PTR [rsi+0x18],0x8
 100d1dd:	jb     0x100d1e2
 100d1df:	mov    rsi,QWORD PTR [rsi]
 100d1e2:	test   rsi,rsi
 100d1e5:	je     0x100d20f
 100d1e7:	xor    ecx,ecx
 100d1e9:	call   QWORD PTR [rip+0xffffffffffff43e9]        # 0x10015d8
 100d1ef:	mov    rcx,rsi
 100d1f2:	call   QWORD PTR [rip+0xffffffffffff43f0]        # 0x10015e8
 100d1f8:	mov    rdi,rax
 100d1fb:	mov    QWORD PTR [rsp+0x38],rax
 100d200:	test   rax,rax
 100d203:	jne    0x100d20f
 100d205:	mov    ecx,0x8007000e
 100d20a:	call   0x1004f80
 100d20f:	mov    rax,QWORD PTR [r15]
 100d212:	mov    QWORD PTR [rsp+0x20],rdi
 100d217:	mov    r9,rbx
 100d21a:	xor    r8d,r8d
 100d21d:	mov    rdx,r12
 100d220:	mov    rcx,r15
 100d223:	call   QWORD PTR [rax+0x158]
 100d229:	mov    esi,eax
 100d22b:	test   eax,eax
 100d22d:	jns    0x100d240
 100d22f:	mov    r8d,eax
 100d232:	mov    rdx,r14
 100d235:	mov    ecx,0x7e
 100d23a:	call   0x100e600
 100d23f:	nop
 100d240:	mov    rcx,rdi
 100d243:	call   QWORD PTR [rip+0xffffffffffff438f]        # 0x10015d8
 100d249:	nop
 100d24a:	mov    rcx,rbx
 100d24d:	call   QWORD PTR [rip+0xffffffffffff4385]        # 0x10015d8
 100d253:	nop
 100d254:	jmp    0x100d25d
 100d256:	mov    esi,DWORD PTR [rsp+0xd0]
 100d25d:	mov    eax,esi
 100d25f:	lea    r11,[rsp+0xa0]
 100d267:	mov    rbx,QWORD PTR [r11+0x20]
 100d26b:	mov    rsi,QWORD PTR [r11+0x28]
 100d26f:	mov    rdi,QWORD PTR [r11+0x38]
 100d273:	mov    rsp,r11
 100d276:	pop    r15
 100d278:	pop    r14
 100d27a:	pop    r12
 100d27c:	ret    
 100d27d:	int3   
 100d27e:	int3   
 100d27f:	int3   
 100d280:	int3   
 100d281:	int3   
 100d282:	int3   
 100d283:	int3   
 100d284:	int3   
 100d285:	int3   
 100d286:	int3   
 100d287:	int3   
 100d288:	int3   
 100d289:	int3   
 100d28a:	int3   
 100d28b:	int3   
 100d28c:	int3   
 100d28d:	int3   
 100d28e:	int3   
 100d28f:	int3   
 100d290:	mov    QWORD PTR [rsp+0x8],rbx
 100d295:	push   rbp
 100d296:	push   rsi
 100d297:	push   rdi
 100d298:	push   r12
 100d29a:	push   r13
 100d29c:	push   r14
 100d29e:	push   r15
 100d2a0:	sub    rsp,0x40
 100d2a4:	mov    rax,QWORD PTR [rip+0xdf35]        # 0x101b1e0
 100d2ab:	xor    rax,rsp
 100d2ae:	mov    QWORD PTR [rsp+0x30],rax
 100d2b3:	xor    r13d,r13d
 100d2b6:	mov    r14,r9
 100d2b9:	mov    r12,r8
 100d2bc:	mov    esi,r13d
 100d2bf:	mov    r15,rdx
 100d2c2:	mov    rbx,r9
 100d2c5:	mov    WORD PTR [rsp+0x2c],r13w
 100d2cb:	mov    edi,r13d
 100d2ce:	mov    ebp,r13d
 100d2d1:	cmp    WORD PTR [r9],si
 100d2d5:	je     0x100d379
 100d2db:	nop    DWORD PTR [rax+rax*1+0x0]
 100d2e0:	cmp    edi,0x3
 100d2e3:	jae    0x100d356
 100d2e5:	mov    eax,esi
 100d2e7:	cmp    rax,r12
 100d2ea:	jae    0x100d356
 100d2ec:	movzx  ecx,WORD PTR [rbx]
 100d2ef:	call   QWORD PTR [rip+0xffffffffffff41a3]        # 0x1001498
 100d2f5:	test   eax,eax
 100d2f7:	je     0x100d331
 100d2f9:	movzx  eax,WORD PTR [rbx]
 100d2fc:	inc    edi
 100d2fe:	inc    rbp
 100d301:	mov    WORD PTR [rsp+rbp*2+0x26],ax
 100d306:	cmp    edi,0x2
 100d309:	jne    0x100d337
 100d30b:	lea    rdx,[rsp+0x20]
 100d310:	lea    rcx,[rsp+0x28]
 100d315:	mov    r8d,0x10
 100d31b:	mov    edi,r13d
 100d31e:	mov    rbp,r13
 100d321:	call   QWORD PTR [rip+0xffffffffffff4169]        # 0x1001490
 100d327:	mov    BYTE PTR [r15],al
 100d32a:	inc    r15
 100d32d:	inc    esi
 100d32f:	jmp    0x100d337
 100d331:	cmp    WORD PTR [rbx],0x20
 100d335:	jne    0x100d343
 100d337:	add    rbx,0x2
 100d33b:	cmp    WORD PTR [rbx],r13w
 100d33f:	jne    0x100d2e0
 100d341:	jmp    0x100d356
 100d343:	movzx  edx,WORD PTR [rbx]
 100d346:	mov    r8,r14
 100d349:	mov    ecx,0x81
 100d34e:	mov    esi,r13d
 100d351:	call   0x100e600
 100d356:	test   edi,edi
 100d358:	je     0x100d379
 100d35a:	cmp    rbx,r14
 100d35d:	jbe    0x100d365
 100d35f:	movzx  eax,WORD PTR [rbx-0x2]
 100d363:	jmp    0x100d369
 100d365:	movzx  eax,WORD PTR [r14]
 100d369:	movzx  edx,ax
 100d36c:	mov    r8,r14
 100d36f:	mov    ecx,0x81
 100d374:	call   0x100e600
 100d379:	mov    eax,esi
 100d37b:	mov    rcx,QWORD PTR [rsp+0x30]
 100d380:	xor    rcx,rsp
 100d383:	call   0x100daf0
 100d388:	mov    rbx,QWORD PTR [rsp+0x80]
 100d390:	add    rsp,0x40
 100d394:	pop    r15
 100d396:	pop    r14
 100d398:	pop    r13
 100d39a:	pop    r12
 100d39c:	pop    rdi
 100d39d:	pop    rsi
 100d39e:	pop    rbp
 100d39f:	ret    
 100d3a0:	int3   
 100d3a1:	int3   
 100d3a2:	int3   
 100d3a3:	int3   
 100d3a4:	int3   
 100d3a5:	int3   
 100d3a6:	int3   
 100d3a7:	int3   
 100d3a8:	int3   
 100d3a9:	int3   
 100d3aa:	int3   
 100d3ab:	int3   
 100d3ac:	int3   
 100d3ad:	int3   
 100d3ae:	int3   
 100d3af:	int3   
 100d3b0:	mov    r11,rsp
 100d3b3:	push   rdi
 100d3b4:	sub    rsp,0x50
 100d3b8:	mov    QWORD PTR [r11-0x18],0xfffffffffffffffe
 100d3c0:	mov    QWORD PTR [r11+0x8],rbx
 100d3c4:	mov    QWORD PTR [r11+0x10],rbp
 100d3c8:	mov    QWORD PTR [r11+0x18],rsi
 100d3cc:	mov    rdi,r9
 100d3cf:	mov    rsi,r8
 100d3d2:	mov    rbp,rdx
 100d3d5:	mov    QWORD PTR [r11-0x20],0x0
 100d3dd:	lea    rax,[r11-0x20]
 100d3e1:	mov    QWORD PTR [r11-0x38],rax
 100d3e5:	lea    r9,[rip+0xffffffffffff48e4]        # 0x1001cd0
 100d3ec:	xor    edx,edx
 100d3ee:	lea    r8d,[rdx+0x17]
 100d3f2:	lea    rcx,[rip+0xffffffffffff5997]        # 0x1002d90
 100d3f9:	call   QWORD PTR [rip+0xffffffffffff42b9]        # 0x10016b8
 100d3ff:	mov    ebx,eax
 100d401:	test   eax,eax
 100d403:	jns    0x100d413
 100d405:	mov    edx,eax
 100d407:	mov    ecx,0x7c
 100d40c:	call   0x100e600
 100d411:	jmp    0x100d452
 100d413:	mov    rcx,QWORD PTR [rsp+0x38]
 100d418:	mov    r10,QWORD PTR [rcx]
 100d41b:	lea    rax,[rsp+0x30]
 100d420:	mov    QWORD PTR [rsp+0x28],rax
 100d425:	mov    rax,QWORD PTR [rsp+0x80]
 100d42d:	mov    QWORD PTR [rsp+0x20],rax
 100d432:	mov    r9,rdi
 100d435:	mov    r8,rsi
 100d438:	mov    rdx,rbp
 100d43b:	call   QWORD PTR [r10+0xa8]
 100d442:	mov    ebx,eax
 100d444:	test   eax,eax
 100d446:	js     0x100d452
 100d448:	xor    ebx,ebx
 100d44a:	cmp    WORD PTR [rsp+0x30],bx
 100d44f:	sete   bl
 100d452:	mov    rcx,QWORD PTR [rsp+0x38]
 100d457:	test   rcx,rcx
 100d45a:	je     0x100d462
 100d45c:	mov    rax,QWORD PTR [rcx]
 100d45f:	call   QWORD PTR [rax+0x10]
 100d462:	mov    eax,ebx
 100d464:	mov    rbx,QWORD PTR [rsp+0x60]
 100d469:	mov    rbp,QWORD PTR [rsp+0x68]
 100d46e:	mov    rsi,QWORD PTR [rsp+0x70]
 100d473:	add    rsp,0x50
 100d477:	pop    rdi
 100d478:	ret    
 100d479:	int3   
 100d47a:	int3   
 100d47b:	int3   
 100d47c:	int3   
 100d47d:	int3   
 100d47e:	int3   
 100d47f:	int3   
 100d480:	mov    r11,rsp
 100d483:	push   rdi
 100d484:	sub    rsp,0x40
 100d488:	mov    QWORD PTR [r11-0x10],0xfffffffffffffffe
 100d490:	mov    QWORD PTR [r11+0x8],rbx
 100d494:	mov    QWORD PTR [r11+0x10],rbp
 100d498:	mov    QWORD PTR [r11+0x18],rsi
 100d49c:	mov    rdi,r9
 100d49f:	mov    rsi,r8
 100d4a2:	mov    rbp,rdx
 100d4a5:	mov    QWORD PTR [r11-0x18],0x0
 100d4ad:	lea    rax,[r11-0x18]
 100d4b1:	mov    QWORD PTR [r11-0x28],rax
 100d4b5:	lea    r9,[rip+0xffffffffffff4814]        # 0x1001cd0
 100d4bc:	xor    edx,edx
 100d4be:	lea    r8d,[rdx+0x17]
 100d4c2:	lea    rcx,[rip+0xffffffffffff58c7]        # 0x1002d90
 100d4c9:	call   QWORD PTR [rip+0xffffffffffff41e9]        # 0x10016b8
 100d4cf:	mov    ebx,eax
 100d4d1:	test   eax,eax
 100d4d3:	jns    0x100d4e3
 100d4d5:	mov    edx,eax
 100d4d7:	mov    ecx,0x7c
 100d4dc:	call   0x100e600
 100d4e1:	jmp    0x100d507
 100d4e3:	mov    rcx,QWORD PTR [rsp+0x30]
 100d4e8:	mov    r10,QWORD PTR [rcx]
 100d4eb:	mov    rax,QWORD PTR [rsp+0x70]
 100d4f0:	mov    QWORD PTR [rsp+0x20],rax
 100d4f5:	mov    r9,rdi
 100d4f8:	mov    r8,rsi
 100d4fb:	mov    rdx,rbp
 100d4fe:	call   QWORD PTR [r10+0x88]
 100d505:	mov    ebx,eax
 100d507:	mov    rcx,QWORD PTR [rsp+0x30]
 100d50c:	test   rcx,rcx
 100d50f:	je     0x100d517
 100d511:	mov    rax,QWORD PTR [rcx]
 100d514:	call   QWORD PTR [rax+0x10]
 100d517:	mov    eax,ebx
 100d519:	mov    rbx,QWORD PTR [rsp+0x50]
 100d51e:	mov    rbp,QWORD PTR [rsp+0x58]
 100d523:	mov    rsi,QWORD PTR [rsp+0x60]
 100d528:	add    rsp,0x40
 100d52c:	pop    rdi
 100d52d:	ret    
 100d52e:	int3   
 100d52f:	int3   
 100d530:	int3   
 100d531:	int3   
 100d532:	int3   
 100d533:	int3   
 100d534:	sub    rsp,0x38
 100d538:	lea    rcx,[rip+0x969]        # 0x100dea8
 100d53f:	call   0x100de48
 100d544:	mov    r11d,DWORD PTR [rip+0xe589]        # 0x101bad4
 100d54b:	mov    r9d,DWORD PTR [rip+0xe57e]        # 0x101bad0
 100d552:	lea    rax,[rip+0xdff3]        # 0x101b54c
 100d559:	lea    r8,[rip+0xdfd8]        # 0x101b538
 100d560:	lea    rdx,[rip+0xdfd9]        # 0x101b540
 100d567:	lea    rcx,[rip+0xdfc2]        # 0x101b530
 100d56e:	mov    DWORD PTR [rip+0xdfd7],r11d        # 0x101b54c
 100d575:	mov    QWORD PTR [rsp+0x20],rax
 100d57a:	call   QWORD PTR [rip+0xffffffffffff3f00]        # 0x1001480
 100d580:	mov    DWORD PTR [rip+0xdfc2],eax        # 0x101b548
 100d586:	test   eax,eax
 100d588:	jns    0x100d594
 100d58a:	mov    ecx,0x8
 100d58f:	call   0x100dd82
 100d594:	add    rsp,0x38
 100d598:	ret    
 100d599:	int3   
 100d59a:	int3   
 100d59b:	int3   
 100d59c:	int3   
 100d59d:	int3   
 100d59e:	int3   
 100d59f:	int3   
 100d5a0:	mov    QWORD PTR [rsp+0x8],rbx
 100d5a5:	push   rdi
 100d5a6:	sub    rsp,0x20
 100d5aa:	mov    rax,QWORD PTR gs:0x30
 100d5b3:	mov    rbx,QWORD PTR [rax+0x8]
 100d5b7:	xor    edi,edi
 100d5b9:	xor    eax,eax
 100d5bb:	lock cmpxchg QWORD PTR [rip+0x107bc],rbx        # 0x101dd80
 100d5c4:	je     0x100d5e1
 100d5c6:	cmp    rax,rbx
 100d5c9:	jne    0x100d5d4
 100d5cb:	mov    ebx,0x1
 100d5d0:	mov    edi,ebx
 100d5d2:	jmp    0x100d5e6
 100d5d4:	mov    ecx,0x3e8
 100d5d9:	call   QWORD PTR [rip+0xffffffffffff3c89]        # 0x1001268
 100d5df:	jmp    0x100d5b9
 100d5e1:	mov    ebx,0x1
 100d5e6:	mov    eax,DWORD PTR [rip+0x1078c]        # 0x101dd78
 100d5ec:	cmp    eax,ebx
 100d5ee:	jne    0x100d5fc
 100d5f0:	mov    ecx,0x1f
 100d5f5:	call   0x100dd82
 100d5fa:	jmp    0x100d633
 100d5fc:	mov    eax,DWORD PTR [rip+0x10776]        # 0x101dd78
 100d602:	test   eax,eax
 100d604:	jne    0x100d62d
 100d606:	mov    DWORD PTR [rip+0x1076c],ebx        # 0x101dd78
 100d60c:	lea    rdx,[rip+0xffffffffffff4125]        # 0x1001738
 100d613:	lea    rcx,[rip+0xffffffffffff4106]        # 0x1001720
 100d61a:	call   0x100dfe4
 100d61f:	test   eax,eax
 100d621:	je     0x100d633
 100d623:	mov    eax,0xff
 100d628:	jmp    0x100d715
 100d62d:	mov    DWORD PTR [rip+0xdf21],ebx        # 0x101b554
 100d633:	mov    eax,DWORD PTR [rip+0x1073f]        # 0x101dd78
 100d639:	cmp    eax,ebx
 100d63b:	jne    0x100d65a
 100d63d:	lea    rdx,[rip+0xffffffffffff40d4]        # 0x1001718
 100d644:	lea    rcx,[rip+0xffffffffffff4095]        # 0x10016e0
 100d64b:	call   0x100dfd8
 100d650:	mov    DWORD PTR [rip+0x1071e],0x2        # 0x101dd78
 100d65a:	test   edi,edi
 100d65c:	jne    0x100d667
 100d65e:	xor    eax,eax
 100d660:	xchg   QWORD PTR [rip+0x10719],rax        # 0x101dd80
 100d667:	cmp    QWORD PTR [rip+0x10729],0x0        # 0x101dd98
 100d66f:	je     0x100d690
 100d671:	lea    rcx,[rip+0x10720]        # 0x101dd98
 100d678:	call   0x100df90
 100d67d:	test   eax,eax
 100d67f:	je     0x100d690
 100d681:	xor    r8d,r8d
 100d684:	lea    edx,[r8+0x2]
 100d688:	xor    ecx,ecx
 100d68a:	call   QWORD PTR [rip+0x10708]        # 0x101dd98
 100d690:	mov    rcx,QWORD PTR [rip+0xffffffffffff3db9]        # 0x1001450
 100d697:	mov    rax,QWORD PTR [rip+0xde9a]        # 0x101b538
 100d69e:	mov    QWORD PTR [rcx],rax
 100d6a1:	mov    r8,QWORD PTR [rip+0xde90]        # 0x101b538
 100d6a8:	mov    rdx,QWORD PTR [rip+0xde91]        # 0x101b540
 100d6af:	mov    ecx,DWORD PTR [rip+0xde7b]        # 0x101b530
 100d6b5:	call   0x10056a0
 100d6ba:	mov    DWORD PTR [rip+0xde90],eax        # 0x101b550
 100d6c0:	cmp    DWORD PTR [rip+0xde6d],0x0        # 0x101b534
 100d6c7:	jne    0x100d6d1
 100d6c9:	mov    ecx,eax
 100d6cb:	call   QWORD PTR [rip+0xffffffffffff3d87]        # 0x1001458
 100d6d1:	cmp    DWORD PTR [rip+0xde7c],0x0        # 0x101b554
 100d6d8:	jne    0x100d6e6
 100d6da:	call   QWORD PTR [rip+0xffffffffffff3d80]        # 0x1001460
 100d6e0:	mov    eax,DWORD PTR [rip+0xde6a]        # 0x101b550
 100d6e6:	jmp    0x100d715
 100d6e8:	mov    DWORD PTR [rip+0xde62],eax        # 0x101b550
 100d6ee:	cmp    DWORD PTR [rip+0xde3f],0x0        # 0x101b534
 100d6f5:	jne    0x100d700
 100d6f7:	mov    ecx,eax
 100d6f9:	call   QWORD PTR [rip+0xffffffffffff3d69]        # 0x1001468
 100d6ff:	int3   
 100d700:	cmp    DWORD PTR [rip+0xde4d],0x0        # 0x101b554
 100d707:	jne    0x100d715
 100d709:	call   QWORD PTR [rip+0xffffffffffff3d51]        # 0x1001460
 100d70f:	mov    eax,DWORD PTR [rip+0xde3b]        # 0x101b550
 100d715:	mov    rbx,QWORD PTR [rsp+0x30]
 100d71a:	add    rsp,0x20
 100d71e:	pop    rdi
 100d71f:	ret    
 100d720:	int3   
 100d721:	int3   
 100d722:	int3   
 100d723:	int3   
 100d724:	int3   
 100d725:	int3   
 100d726:	int3   
 100d727:	int3   
 100d728:	sub    rsp,0x28
 100d72c:	mov    eax,0x5a4d
 100d731:	cmp    WORD PTR [rip+0xffffffffffff28c8],ax        # 0x1000000
 100d738:	je     0x100d73e
 100d73a:	xor    ecx,ecx
 100d73c:	jmp    0x100d776
 100d73e:	movsxd rax,DWORD PTR [rip+0xffffffffffff28f7]        # 0x100003c
 100d745:	lea    rcx,[rip+0xffffffffffff28b4]        # 0x1000000
 100d74c:	add    rax,rcx
 100d74f:	cmp    DWORD PTR [rax],0x4550
 100d755:	jne    0x100d73a
 100d757:	mov    ecx,0x20b
 100d75c:	cmp    WORD PTR [rax+0x18],cx
 100d760:	jne    0x100d73a
 100d762:	xor    ecx,ecx
 100d764:	cmp    DWORD PTR [rax+0x84],0xe
 100d76b:	jbe    0x100d776
 100d76d:	cmp    DWORD PTR [rax+0xf8],ecx
 100d773:	setne  cl
 100d776:	mov    DWORD PTR [rip+0xddb8],ecx        # 0x101b534
 100d77c:	mov    ecx,0x1
 100d781:	call   QWORD PTR [rip+0xffffffffffff3c91]        # 0x1001418
 100d787:	or     rcx,0xffffffffffffffff
 100d78b:	call   QWORD PTR [rip+0xffffffffffff3acf]        # 0x1001260
 100d791:	mov    rcx,QWORD PTR [rip+0xffffffffffff3c88]        # 0x1001420
 100d798:	mov    QWORD PTR [rip+0x105e9],rax        # 0x101dd88
 100d79f:	mov    QWORD PTR [rip+0x105ea],rax        # 0x101dd90
 100d7a6:	mov    eax,DWORD PTR [rip+0xe330]        # 0x101badc
 100d7ac:	mov    DWORD PTR [rcx],eax
 100d7ae:	mov    rdx,QWORD PTR [rip+0xffffffffffff3c73]        # 0x1001428
 100d7b5:	mov    eax,DWORD PTR [rip+0xe31d]        # 0x101bad8
 100d7bb:	mov    DWORD PTR [rdx],eax
 100d7bd:	call   0x100de68
 100d7c2:	call   0x100dffc
 100d7c7:	cmp    DWORD PTR [rip+0xda32],0x0        # 0x101b200
 100d7ce:	jne    0x100d7dd
 100d7d0:	lea    rcx,[rip+0x819]        # 0x100dff0
 100d7d7:	call   QWORD PTR [rip+0xffffffffffff3c53]        # 0x1001430
 100d7dd:	cmp    DWORD PTR [rip+0xda18],0xffffffff        # 0x101b1fc
 100d7e4:	jne    0x100d7ef
 100d7e6:	or     ecx,0xffffffff
 100d7e9:	call   QWORD PTR [rip+0xffffffffffff3c49]        # 0x1001438
 100d7ef:	xor    eax,eax
 100d7f1:	add    rsp,0x28
 100d7f5:	ret    
 100d7f6:	int3   
 100d7f7:	int3   
 100d7f8:	int3   
 100d7f9:	int3   
 100d7fa:	int3   
 100d7fb:	int3   
 100d7fc:	sub    rsp,0x28
 100d800:	call   0x100e008
 100d805:	add    rsp,0x28
 100d809:	jmp    0x100d5a0
 100d80e:	int3   
 100d80f:	int3   
 100d810:	int3   
 100d811:	int3   
 100d812:	int3   
 100d813:	int3   
 100d814:	jmp    QWORD PTR [rip+0xffffffffffff3c9e]        # 0x10014b8
 100d81a:	int3   
 100d81b:	int3   
 100d81c:	int3   
 100d81d:	int3   
 100d81e:	int3   
 100d81f:	int3   
 100d820:	mov    QWORD PTR [rsp+0x10],rbx
 100d825:	mov    DWORD PTR [rsp+0x18],r8d
 100d82a:	mov    QWORD PTR [rsp+0x8],rcx
 100d82f:	push   rsi
 100d830:	push   rdi
 100d831:	push   r12
 100d833:	sub    rsp,0x40
 100d837:	mov    rsi,r9
 100d83a:	mov    edi,r8d
 100d83d:	mov    r12,rdx
 100d840:	mov    rbx,rcx
 100d843:	dec    edi
 100d845:	mov    DWORD PTR [rsp+0x70],edi
 100d849:	js     0x100d85a
 100d84b:	sub    rbx,r12
 100d84e:	mov    QWORD PTR [rsp+0x60],rbx
 100d853:	mov    rcx,rbx
 100d856:	call   rsi
 100d858:	jmp    0x100d843
 100d85a:	jmp    0x100d85c
 100d85c:	mov    rbx,QWORD PTR [rsp+0x68]
 100d861:	add    rsp,0x40
 100d865:	pop    r12
 100d867:	pop    rdi
 100d868:	pop    rsi
 100d869:	ret    
 100d86a:	int3   
 100d86b:	int3   
 100d86c:	int3   
 100d86d:	int3   
 100d86e:	int3   
 100d86f:	int3   
 100d870:	mov    rax,rsp
 100d873:	mov    QWORD PTR [rax+0x20],r9
 100d877:	mov    DWORD PTR [rax+0x18],r8d
 100d87b:	mov    QWORD PTR [rax+0x10],rdx
 100d87f:	push   rbx
 100d880:	push   rsi
 100d881:	push   rdi
 100d882:	push   r12
 100d884:	sub    rsp,0x38
 100d888:	mov    r12,r9
 100d88b:	movsxd rdi,r8d
 100d88e:	mov    rsi,rdx
 100d891:	and    DWORD PTR [rax-0x38],0x0
 100d895:	mov    rbx,rdi
 100d898:	imul   rbx,rdx
 100d89c:	add    rbx,rcx
 100d89f:	mov    QWORD PTR [rax+0x8],rbx
 100d8a3:	dec    edi
 100d8a5:	mov    DWORD PTR [rsp+0x70],edi
 100d8a9:	js     0x100d8bb
 100d8ab:	sub    rbx,rsi
 100d8ae:	mov    QWORD PTR [rsp+0x60],rbx
 100d8b3:	mov    rcx,rbx
 100d8b6:	call   r12
 100d8b9:	jmp    0x100d8a3
 100d8bb:	mov    DWORD PTR [rsp+0x20],0x1
 100d8c3:	add    rsp,0x38
 100d8c7:	pop    r12
 100d8c9:	pop    rdi
 100d8ca:	pop    rsi
 100d8cb:	pop    rbx
 100d8cc:	ret    
 100d8cd:	int3   
 100d8ce:	int3   
 100d8cf:	int3   
 100d8d0:	int3   
 100d8d1:	int3   
 100d8d2:	int3   
 100d8d3:	int3   
 100d8d4:	mov    QWORD PTR [rsp+0x8],rcx
 100d8d9:	sub    rsp,0x88
 100d8e0:	lea    rcx,[rip+0xdd19]        # 0x101b600
 100d8e7:	call   QWORD PTR [rip+0xffffffffffff3943]        # 0x1001230
 100d8ed:	mov    rax,QWORD PTR [rip+0xde04]        # 0x101b6f8
 100d8f4:	mov    QWORD PTR [rsp+0x58],rax
 100d8f9:	xor    r8d,r8d
 100d8fc:	lea    rdx,[rsp+0x60]
 100d901:	mov    rcx,QWORD PTR [rsp+0x58]
 100d906:	call   0x1014d78
 100d90b:	mov    QWORD PTR [rsp+0x50],rax
 100d910:	cmp    QWORD PTR [rsp+0x50],0x0
 100d916:	je     0x100d959
 100d918:	mov    QWORD PTR [rsp+0x38],0x0
 100d921:	lea    rax,[rsp+0x48]
 100d926:	mov    QWORD PTR [rsp+0x30],rax
 100d92b:	lea    rax,[rsp+0x40]
 100d930:	mov    QWORD PTR [rsp+0x28],rax
 100d935:	lea    rax,[rip+0xdcc4]        # 0x101b600
 100d93c:	mov    QWORD PTR [rsp+0x20],rax
 100d941:	mov    r9,QWORD PTR [rsp+0x50]
 100d946:	mov    r8,QWORD PTR [rsp+0x58]
 100d94b:	mov    rdx,QWORD PTR [rsp+0x60]
 100d950:	xor    ecx,ecx
 100d952:	call   0x1014d6c
 100d957:	jmp    0x100d97b
 100d959:	mov    rax,QWORD PTR [rsp+0x88]
 100d961:	mov    QWORD PTR [rip+0xdd90],rax        # 0x101b6f8
 100d968:	lea    rax,[rsp+0x88]
 100d970:	add    rax,0x8
 100d974:	mov    QWORD PTR [rip+0xdd1d],rax        # 0x101b698
 100d97b:	mov    rax,QWORD PTR [rip+0xdd76]        # 0x101b6f8
 100d982:	mov    QWORD PTR [rip+0xdbe7],rax        # 0x101b570
 100d989:	mov    rax,QWORD PTR [rsp+0x90]
 100d991:	mov    QWORD PTR [rip+0xdce8],rax        # 0x101b680
 100d998:	mov    DWORD PTR [rip+0xdbbe],0xc0000409        # 0x101b560
 100d9a2:	mov    DWORD PTR [rip+0xdbb8],0x1        # 0x101b564
 100d9ac:	mov    rax,QWORD PTR [rip+0xd82d]        # 0x101b1e0
 100d9b3:	mov    QWORD PTR [rsp+0x68],rax
 100d9b8:	mov    rax,QWORD PTR [rip+0xd829]        # 0x101b1e8
 100d9bf:	mov    QWORD PTR [rsp+0x70],rax
 100d9c4:	call   QWORD PTR [rip+0xffffffffffff387e]        # 0x1001248
 100d9ca:	mov    DWORD PTR [rip+0xdc28],eax        # 0x101b5f8
 100d9d0:	mov    ecx,0x1
 100d9d5:	call   0x100e0ce
 100d9da:	xor    ecx,ecx
 100d9dc:	call   QWORD PTR [rip+0xffffffffffff397e]        # 0x1001360
 100d9e2:	lea    rcx,[rip+0xffffffffffff4747]        # 0x1002130
 100d9e9:	call   QWORD PTR [rip+0xffffffffffff3861]        # 0x1001250
 100d9ef:	cmp    DWORD PTR [rip+0xdc02],0x0        # 0x101b5f8
 100d9f6:	jne    0x100da02
 100d9f8:	mov    ecx,0x1
 100d9fd:	call   0x100e0ce
 100da02:	call   QWORD PTR [rip+0xffffffffffff38e8]        # 0x10012f0
 100da08:	mov    edx,0xc0000409
 100da0d:	mov    rcx,rax
 100da10:	call   QWORD PTR [rip+0xffffffffffff3842]        # 0x1001258
 100da16:	add    rsp,0x88
 100da1d:	ret    
 100da1e:	int3   
 100da1f:	int3   
 100da20:	int3   
 100da21:	int3   
 100da22:	int3   
 100da23:	int3   
 100da24:	jmp    QWORD PTR [rip+0xffffffffffff39b6]        # 0x10013e0
 100da2a:	int3   
 100da2b:	int3   
 100da2c:	int3   
 100da2d:	int3   
 100da2e:	int3   
 100da2f:	int3   
 100da30:	jmp    QWORD PTR [rip+0xffffffffffff3b2a]        # 0x1001560
 100da36:	int3   
 100da37:	int3   
 100da38:	int3   
 100da39:	int3   
 100da3a:	int3   
 100da3b:	int3   
 100da3c:	jmp    QWORD PTR [rip+0xffffffffffff3b16]        # 0x1001558
 100da42:	int3   
 100da43:	int3   
 100da44:	int3   
 100da45:	int3   
 100da46:	int3   
 100da47:	int3   
 100da48:	rex push rbx
 100da4a:	sub    rsp,0x20
 100da4e:	mov    r11d,DWORD PTR [r8]
 100da51:	mov    rbx,rdx
 100da54:	mov    r9,rcx
 100da57:	and    r11d,0xfffffff8
 100da5b:	test   BYTE PTR [r8],0x4
 100da5f:	mov    r10,rcx
 100da62:	je     0x100da77
 100da64:	mov    eax,DWORD PTR [r8+0x8]
 100da68:	movsxd r10,DWORD PTR [r8+0x4]
 100da6c:	neg    eax
 100da6e:	add    r10,rcx
 100da71:	movsxd rcx,eax
 100da74:	and    r10,rcx
 100da77:	movsxd rax,r11d
 100da7a:	mov    rdx,QWORD PTR [rax+r10*1]
 100da7e:	mov    rax,QWORD PTR [rbx+0x10]
 100da82:	mov    ecx,DWORD PTR [rax+0x8]
 100da85:	add    rcx,QWORD PTR [rbx+0x8]
 100da89:	test   BYTE PTR [rcx+0x3],0xf
 100da8d:	je     0x100da9b
 100da8f:	movzx  eax,BYTE PTR [rcx+0x3]
 100da93:	and    eax,0xfffffff0
 100da96:	cdqe   
 100da98:	add    r9,rax
 100da9b:	xor    r9,rdx
 100da9e:	mov    rcx,r9
 100daa1:	add    rsp,0x20
 100daa5:	pop    rbx
 100daa6:	jmp    0x100daf0
 100daab:	int3   
 100daac:	int3   
 100daad:	int3   
 100daae:	int3   
 100daaf:	int3   
 100dab0:	int3   
 100dab1:	int3   
 100dab2:	int3   
 100dab3:	int3   
 100dab4:	sub    rsp,0x28
 100dab8:	mov    r8,QWORD PTR [r9+0x38]
 100dabc:	mov    rcx,rdx
 100dabf:	mov    rdx,r9
 100dac2:	call   0x100da48
 100dac7:	mov    eax,0x1
 100dacc:	add    rsp,0x28
 100dad0:	ret    
 100dad1:	int3   
 100dad2:	int3   
 100dad3:	int3   
 100dad4:	int3   
 100dad5:	int3   
 100dad6:	int3   
 100dad7:	int3   
 100dad8:	int3   
 100dad9:	int3   
 100dada:	int3   
 100dadb:	int3   
 100dadc:	int3   
 100dadd:	int3   
 100dade:	int3   
 100dadf:	int3   
 100dae0:	int3   
 100dae1:	int3   
 100dae2:	int3   
 100dae3:	int3   
 100dae4:	int3   
 100dae5:	int3   
 100dae6:	data16 nop WORD PTR [rax+rax*1+0x0]
 100daf0:	cmp    rcx,QWORD PTR [rip+0xd6e9]        # 0x101b1e0
 100daf7:	jne    0x100db0a
 100daf9:	rol    rcx,0x10
 100dafd:	test   cx,0xffff
 100db02:	jne    0x100db06
 100db04:	repz ret 
 100db06:	ror    rcx,0x10
 100db0a:	jmp    0x100d8d4
 100db0f:	int3   
 100db10:	int3   
 100db11:	int3   
 100db12:	int3   
 100db13:	int3   
 100db14:	int3   
 100db15:	int3   
 100db16:	int3   
 100db17:	int3   
 100db18:	mov    QWORD PTR [rsp+0x8],rbx
 100db1d:	mov    QWORD PTR [rsp+0x10],rsi
 100db22:	push   rdi
 100db23:	sub    rsp,0x20
 100db27:	mov    esi,edx
 100db29:	mov    rbx,rcx
 100db2c:	test   dl,0x2
 100db2f:	je     0x100db5b
 100db31:	mov    r8d,DWORD PTR [rcx-0x8]
 100db35:	lea    r9,[rip+0x5c2]        # 0x100e0fe
 100db3c:	mov    edx,0x18
 100db41:	call   0x100d870
 100db46:	test   sil,0x1
 100db4a:	je     0x100db55
 100db4c:	lea    rcx,[rbx-0x8]
 100db50:	call   0x100d814
 100db55:	lea    rax,[rbx-0x8]
 100db59:	jmp    0x100db71
 100db5b:	call   0x100e0fe
 100db60:	test   sil,0x1
 100db64:	je     0x100db6e
 100db66:	mov    rcx,rbx
 100db69:	call   0x100d814
 100db6e:	mov    rax,rbx
 100db71:	mov    rbx,QWORD PTR [rsp+0x30]
 100db76:	mov    rsi,QWORD PTR [rsp+0x38]
 100db7b:	add    rsp,0x20
 100db7f:	pop    rdi
 100db80:	ret    
 100db81:	int3   
 100db82:	int3   
 100db83:	int3   
 100db84:	int3   
 100db85:	int3   
 100db86:	int3   
 100db87:	int3   
 100db88:	mov    rax,rsp
 100db8b:	mov    QWORD PTR [rax+0x8],rbx
 100db8f:	mov    QWORD PTR [rax+0x10],rbp
 100db93:	mov    QWORD PTR [rax+0x18],rsi
 100db97:	mov    QWORD PTR [rax+0x20],rdi
 100db9b:	push   r12
 100db9d:	sub    rsp,0x20
 100dba1:	mov    rbx,QWORD PTR [r9+0x38]
 100dba5:	mov    rsi,rdx
 100dba8:	mov    r12,r8
 100dbab:	mov    rbp,rcx
 100dbae:	lea    r8,[rbx+0x4]
 100dbb2:	mov    rdx,r9
 100dbb5:	mov    rcx,rsi
 100dbb8:	mov    rdi,r9
 100dbbb:	call   0x100da48
 100dbc0:	mov    r11d,DWORD PTR [rbx+0x4]
 100dbc4:	mov    r10d,DWORD PTR [rbp+0x4]
 100dbc8:	mov    eax,r11d
 100dbcb:	and    r11d,0x2
 100dbcf:	mov    r8d,0x1
 100dbd5:	and    eax,r8d
 100dbd8:	and    r10b,0x66
 100dbdc:	cmove  r11d,eax
 100dbe0:	test   r11d,r11d
 100dbe3:	je     0x100dbf9
 100dbe5:	mov    r9,rdi
 100dbe8:	mov    r8,r12
 100dbeb:	mov    rdx,rsi
 100dbee:	mov    rcx,rbp
 100dbf1:	call   0x100dd02
 100dbf6:	mov    r8d,eax
 100dbf9:	mov    rbx,QWORD PTR [rsp+0x30]
 100dbfe:	mov    rbp,QWORD PTR [rsp+0x38]
 100dc03:	mov    rsi,QWORD PTR [rsp+0x40]
 100dc08:	mov    rdi,QWORD PTR [rsp+0x48]
 100dc0d:	mov    eax,r8d
 100dc10:	add    rsp,0x20
 100dc14:	pop    r12
 100dc16:	ret    
 100dc17:	int3   
 100dc18:	int3   
 100dc19:	int3   
 100dc1a:	int3   
 100dc1b:	int3   
 100dc1c:	int3   
 100dc1d:	int3   
 100dc1e:	int3   
 100dc1f:	int3   
 100dc20:	mov    rax,rsp
 100dc23:	mov    QWORD PTR [rax+0x8],rbx
 100dc27:	mov    QWORD PTR [rax+0x10],rbp
 100dc2b:	mov    QWORD PTR [rax+0x18],rsi
 100dc2f:	mov    QWORD PTR [rax+0x20],rdi
 100dc33:	push   r12
 100dc35:	sub    rsp,0x20
 100dc39:	mov    r10,QWORD PTR [r9+0x38]
 100dc3d:	mov    rsi,rdx
 100dc40:	mov    r12,r8
 100dc43:	mov    eax,DWORD PTR [r10]
 100dc46:	mov    rbp,rcx
 100dc49:	mov    rdx,r9
 100dc4c:	add    rax,rax
 100dc4f:	mov    rcx,rsi
 100dc52:	mov    rdi,r9
 100dc55:	lea    rbx,[r10+rax*8+0x4]
 100dc5a:	mov    r8,rbx
 100dc5d:	call   0x100da48
 100dc62:	mov    r11d,DWORD PTR [rbx]
 100dc65:	mov    r10d,DWORD PTR [rbp+0x4]
 100dc69:	mov    eax,r11d
 100dc6c:	and    r11d,0x2
 100dc70:	mov    edx,0x1
 100dc75:	and    eax,edx
 100dc77:	and    r10b,0x66
 100dc7b:	cmove  r11d,eax
 100dc7f:	test   r11d,r11d
 100dc82:	je     0x100dc97
 100dc84:	mov    r9,rdi
 100dc87:	mov    r8,r12
 100dc8a:	mov    rdx,rsi
 100dc8d:	mov    rcx,rbp
 100dc90:	call   0x100dee6
 100dc95:	mov    edx,eax
 100dc97:	mov    rbx,QWORD PTR [rsp+0x30]
 100dc9c:	mov    rbp,QWORD PTR [rsp+0x38]
 100dca1:	mov    rsi,QWORD PTR [rsp+0x40]
 100dca6:	mov    rdi,QWORD PTR [rsp+0x48]
 100dcab:	mov    eax,edx
 100dcad:	add    rsp,0x20
 100dcb1:	pop    r12
 100dcb3:	ret    
 100dcb4:	int3   
 100dcb5:	int3   
 100dcb6:	int3   
 100dcb7:	int3   
 100dcb8:	int3   
 100dcb9:	int3   
 100dcba:	jmp    QWORD PTR [rip+0xffffffffffff3870]        # 0x1001530
 100dcc0:	int3   
 100dcc1:	int3   
 100dcc2:	int3   
 100dcc3:	int3   
 100dcc4:	int3   
 100dcc5:	int3   
 100dcc6:	jmp    QWORD PTR [rip+0xffffffffffff385c]        # 0x1001528
 100dccc:	int3   
 100dccd:	int3   
 100dcce:	int3   
 100dccf:	int3   
 100dcd0:	int3   
 100dcd1:	int3   
 100dcd2:	jmp    QWORD PTR [rip+0xffffffffffff3808]        # 0x10014e0
 100dcd8:	int3   
 100dcd9:	int3   
 100dcda:	int3   
 100dcdb:	int3   
 100dcdc:	int3   
 100dcdd:	int3   
 100dcde:	jmp    QWORD PTR [rip+0xffffffffffff37f4]        # 0x10014d8
 100dce4:	int3   
 100dce5:	int3   
 100dce6:	int3   
 100dce7:	int3   
 100dce8:	int3   
 100dce9:	int3   
 100dcea:	jmp    QWORD PTR [rip+0xffffffffffff37d8]        # 0x10014c8
 100dcf0:	int3   
 100dcf1:	int3   
 100dcf2:	int3   
 100dcf3:	int3   
 100dcf4:	int3   
 100dcf5:	int3   
 100dcf6:	jmp    QWORD PTR [rip+0xffffffffffff37b4]        # 0x10014b0
 100dcfc:	int3   
 100dcfd:	int3   
 100dcfe:	int3   
 100dcff:	int3   
 100dd00:	int3   
 100dd01:	int3   
 100dd02:	jmp    QWORD PTR [rip+0xffffffffffff37a0]        # 0x10014a8
 100dd08:	int3   
 100dd09:	int3   
 100dd0a:	int3   
 100dd0b:	int3   
 100dd0c:	int3   
 100dd0d:	int3   
 100dd0e:	jmp    QWORD PTR [rip+0xffffffffffff378c]        # 0x10014a0
 100dd14:	int3   
 100dd15:	int3   
 100dd16:	int3   
 100dd17:	int3   
 100dd18:	int3   
 100dd19:	int3   
 100dd1a:	int3   
 100dd1b:	int3   
 100dd1c:	sub    rsp,0x28
 100dd20:	mov    rax,QWORD PTR [rcx]
 100dd23:	cmp    DWORD PTR [rax],0xe06d7363
 100dd29:	jne    0x100dd56
 100dd2b:	cmp    DWORD PTR [rax+0x18],0x4
 100dd2f:	jne    0x100dd56
 100dd31:	mov    eax,DWORD PTR [rax+0x20]
 100dd34:	cmp    eax,0x19930520
 100dd39:	je     0x100dd50
 100dd3b:	cmp    eax,0x19930521
 100dd40:	je     0x100dd50
 100dd42:	cmp    eax,0x19930522
 100dd47:	je     0x100dd50
 100dd49:	cmp    eax,0x1994000
 100dd4e:	jne    0x100dd56
 100dd50:	call   0x100e0c2
 100dd55:	int3   
 100dd56:	xor    eax,eax
 100dd58:	add    rsp,0x28
 100dd5c:	ret    
 100dd5d:	int3   
 100dd5e:	int3   
 100dd5f:	int3   
 100dd60:	int3   
 100dd61:	int3   
 100dd62:	int3   
 100dd63:	int3   
 100dd64:	sub    rsp,0x28
 100dd68:	lea    rcx,[rip+0xffffffffffffffad]        # 0x100dd1c
 100dd6f:	call   QWORD PTR [rip+0xffffffffffff35eb]        # 0x1001360
 100dd75:	xor    eax,eax
 100dd77:	add    rsp,0x28
 100dd7b:	ret    
 100dd7c:	int3   
 100dd7d:	int3   
 100dd7e:	int3   
 100dd7f:	int3   
 100dd80:	int3   
 100dd81:	int3   
 100dd82:	jmp    QWORD PTR [rip+0xffffffffffff3700]        # 0x1001488
 100dd88:	int3   
 100dd89:	int3   
 100dd8a:	int3   
 100dd8b:	int3   
 100dd8c:	int3   
 100dd8d:	int3   
 100dd8e:	int3   
 100dd8f:	int3   
 100dd90:	rex push rbx
 100dd92:	sub    rsp,0x20
 100dd96:	mov    rbx,rcx
 100dd99:	mov    rcx,QWORD PTR [rip+0xfff0]        # 0x101dd90
 100dda0:	call   QWORD PTR [rip+0xffffffffffff3482]        # 0x1001228
 100dda6:	mov    QWORD PTR [rsp+0x38],rax
 100ddab:	cmp    rax,0xffffffffffffffff
 100ddaf:	jne    0x100ddbc
 100ddb1:	mov    rcx,rbx
 100ddb4:	call   QWORD PTR [rip+0xffffffffffff3636]        # 0x10013f0
 100ddba:	jmp    0x100de3a
 100ddbc:	mov    ecx,0x8
 100ddc1:	call   0x100e0f2
 100ddc6:	nop
 100ddc7:	mov    rcx,QWORD PTR [rip+0xffc2]        # 0x101dd90
 100ddce:	call   QWORD PTR [rip+0xffffffffffff3454]        # 0x1001228
 100ddd4:	mov    QWORD PTR [rsp+0x38],rax
 100ddd9:	mov    rcx,QWORD PTR [rip+0xffa8]        # 0x101dd88
 100dde0:	call   QWORD PTR [rip+0xffffffffffff3442]        # 0x1001228
 100dde6:	mov    QWORD PTR [rsp+0x40],rax
 100ddeb:	mov    rcx,rbx
 100ddee:	call   QWORD PTR [rip+0xffffffffffff346c]        # 0x1001260
 100ddf4:	mov    rcx,rax
 100ddf7:	lea    r8,[rsp+0x40]
 100ddfc:	lea    rdx,[rsp+0x38]
 100de01:	call   0x100e0e6
 100de06:	mov    rbx,rax
 100de09:	mov    rcx,QWORD PTR [rsp+0x38]
 100de0e:	call   QWORD PTR [rip+0xffffffffffff344c]        # 0x1001260
 100de14:	mov    QWORD PTR [rip+0xff75],rax        # 0x101dd90
 100de1b:	mov    rcx,QWORD PTR [rsp+0x40]
 100de20:	call   QWORD PTR [rip+0xffffffffffff343a]        # 0x1001260
 100de26:	mov    QWORD PTR [rip+0xff5b],rax        # 0x101dd88
 100de2d:	mov    ecx,0x8
 100de32:	call   0x100e0da
 100de37:	mov    rax,rbx
 100de3a:	add    rsp,0x20
 100de3e:	pop    rbx
 100de3f:	ret    
 100de40:	int3   
 100de41:	int3   
 100de42:	int3   
 100de43:	int3   
 100de44:	int3   
 100de45:	int3   
 100de46:	int3   
 100de47:	int3   
 100de48:	sub    rsp,0x28
 100de4c:	call   0x100dd90
 100de51:	neg    rax
 100de54:	sbb    eax,eax
 100de56:	neg    eax
 100de58:	dec    eax
 100de5a:	add    rsp,0x28
 100de5e:	ret    
 100de5f:	int3   
 100de60:	int3   
 100de61:	int3   
 100de62:	int3   
 100de63:	int3   
 100de64:	int3   
 100de65:	int3   
 100de66:	int3   
 100de67:	int3   
 100de68:	mov    QWORD PTR [rsp+0x8],rbx
 100de6d:	push   rdi
 100de6e:	sub    rsp,0x20
 100de72:	lea    rbx,[rip+0xffffffffffff70df]        # 0x1004f58
 100de79:	lea    rdi,[rip+0xffffffffffff70d8]        # 0x1004f58
 100de80:	jmp    0x100de90
 100de82:	mov    rax,QWORD PTR [rbx]
 100de85:	test   rax,rax
 100de88:	je     0x100de8c
 100de8a:	call   rax
 100de8c:	add    rbx,0x8
 100de90:	cmp    rbx,rdi
 100de93:	jb     0x100de82
 100de95:	mov    rbx,QWORD PTR [rsp+0x30]
 100de9a:	add    rsp,0x20
 100de9e:	pop    rdi
 100de9f:	ret    
 100dea0:	int3   
 100dea1:	int3   
 100dea2:	int3   
 100dea3:	int3   
 100dea4:	int3   
 100dea5:	int3   
 100dea6:	int3   
 100dea7:	int3   
 100dea8:	mov    QWORD PTR [rsp+0x8],rbx
 100dead:	push   rdi
 100deae:	sub    rsp,0x20
 100deb2:	lea    rbx,[rip+0xffffffffffff70af]        # 0x1004f68
 100deb9:	lea    rdi,[rip+0xffffffffffff70a8]        # 0x1004f68
 100dec0:	jmp    0x100ded0
 100dec2:	mov    rax,QWORD PTR [rbx]
 100dec5:	test   rax,rax
 100dec8:	je     0x100decc
 100deca:	call   rax
 100decc:	add    rbx,0x8
 100ded0:	cmp    rbx,rdi
 100ded3:	jb     0x100dec2
 100ded5:	mov    rbx,QWORD PTR [rsp+0x30]
 100deda:	add    rsp,0x20
 100dede:	pop    rdi
 100dedf:	ret    
 100dee0:	int3   
 100dee1:	int3   
 100dee2:	int3   
 100dee3:	int3   
 100dee4:	int3   
 100dee5:	int3   
 100dee6:	jmp    QWORD PTR [rip+0xffffffffffff358c]        # 0x1001478
 100deec:	int3   
 100deed:	int3   
 100deee:	int3   
 100deef:	int3   
 100def0:	int3   
 100def1:	int3   
 100def2:	jmp    QWORD PTR [rip+0xffffffffffff3578]        # 0x1001470
 100def8:	int3   
 100def9:	int3   
 100defa:	int3   
 100defb:	int3   
 100defc:	int3   
 100defd:	int3   
 100defe:	int3   
 100deff:	int3   
 100df00:	mov    rax,rcx
 100df03:	mov    ecx,0x5a4d
 100df08:	cmp    WORD PTR [rax],cx
 100df0b:	je     0x100df10
 100df0d:	xor    eax,eax
 100df0f:	ret    
 100df10:	movsxd rcx,DWORD PTR [rax+0x3c]
 100df14:	add    rcx,rax
 100df17:	xor    eax,eax
 100df19:	cmp    DWORD PTR [rcx],0x4550
 100df1f:	jne    0x100df2d
 100df21:	mov    edx,0x20b
 100df26:	cmp    WORD PTR [rcx+0x18],dx
 100df2a:	sete   al
 100df2d:	repz ret 
 100df2f:	int3   
 100df30:	int3   
 100df31:	int3   
 100df32:	int3   
 100df33:	int3   
 100df34:	int3   
 100df35:	int3   
 100df36:	int3   
 100df37:	int3   
 100df38:	int3   
 100df39:	int3   
 100df3a:	int3   
 100df3b:	int3   
 100df3c:	int3   
 100df3d:	int3   
 100df3e:	int3   
 100df3f:	int3   
 100df40:	movsxd r8,DWORD PTR [rcx+0x3c]
 100df44:	xor    r9d,r9d
 100df47:	mov    r10,rdx
 100df4a:	add    r8,rcx
 100df4d:	movzx  eax,WORD PTR [r8+0x14]
 100df52:	movzx  r11d,WORD PTR [r8+0x6]
 100df57:	lea    rcx,[rax+r8*1+0x18]
 100df5c:	test   r11d,r11d
 100df5f:	je     0x100df7f
 100df61:	mov    edx,DWORD PTR [rcx+0xc]
 100df64:	cmp    r10,rdx
 100df67:	jb     0x100df73
 100df69:	mov    eax,DWORD PTR [rcx+0x8]
 100df6c:	add    eax,edx
 100df6e:	cmp    r10,rax
 100df71:	jb     0x100df82
 100df73:	inc    r9d
 100df76:	add    rcx,0x28
 100df7a:	cmp    r9d,r11d
 100df7d:	jb     0x100df61
 100df7f:	xor    eax,eax
 100df81:	ret    
 100df82:	mov    rax,rcx
 100df85:	ret    
 100df86:	int3   
 100df87:	int3   
 100df88:	int3   
 100df89:	int3   
 100df8a:	int3   
 100df8b:	int3   
 100df8c:	int3   
 100df8d:	int3   
 100df8e:	int3   
 100df8f:	int3   
 100df90:	sub    rsp,0x28
 100df94:	mov    r8,rcx
 100df97:	lea    r9,[rip+0xffffffffffff2062]        # 0x1000000
 100df9e:	mov    rcx,r9
 100dfa1:	call   0x100df00
 100dfa6:	test   eax,eax
 100dfa8:	je     0x100dfcc
 100dfaa:	sub    r8,r9
 100dfad:	mov    rdx,r8
 100dfb0:	mov    rcx,r9
 100dfb3:	call   0x100df40
 100dfb8:	test   rax,rax
 100dfbb:	je     0x100dfcc
 100dfbd:	mov    eax,DWORD PTR [rax+0x24]
 100dfc0:	shr    eax,0x1f
 100dfc3:	not    eax
 100dfc5:	and    eax,0x1
 100dfc8:	jmp    0x100dfcc
 100dfca:	xor    eax,eax
 100dfcc:	add    rsp,0x28
 100dfd0:	ret    
 100dfd1:	int3   
 100dfd2:	int3   
 100dfd3:	int3   
 100dfd4:	int3   
 100dfd5:	int3   
 100dfd6:	int3   
 100dfd7:	int3   
 100dfd8:	jmp    QWORD PTR [rip+0xffffffffffff346a]        # 0x1001448
 100dfde:	int3   
 100dfdf:	int3   
 100dfe0:	int3   
 100dfe1:	int3   
 100dfe2:	int3   
 100dfe3:	int3   
 100dfe4:	jmp    QWORD PTR [rip+0xffffffffffff3456]        # 0x1001440
 100dfea:	int3   
 100dfeb:	int3   
 100dfec:	int3   
 100dfed:	int3   
 100dfee:	int3   
 100dfef:	int3   
 100dff0:	xor    eax,eax
 100dff2:	ret    
 100dff3:	int3   
 100dff4:	int3   
 100dff5:	int3   
 100dff6:	int3   
 100dff7:	int3   
 100dff8:	int3   
 100dff9:	int3   
 100dffa:	int3   
 100dffb:	int3   
 100dffc:	xor    eax,eax
 100dffe:	ret    
 100dfff:	int3   
 100e000:	int3   
 100e001:	int3   
 100e002:	int3   
 100e003:	int3   
 100e004:	int3   
 100e005:	int3   
 100e006:	int3   
 100e007:	int3   
 100e008:	mov    QWORD PTR [rsp+0x18],rbx
 100e00d:	push   rdi
 100e00e:	sub    rsp,0x20
 100e012:	mov    rax,QWORD PTR [rip+0xd1c7]        # 0x101b1e0
 100e019:	and    QWORD PTR [rsp+0x30],0x0
 100e01f:	movabs rdi,0x2b992ddfa232
 100e029:	cmp    rax,rdi
 100e02c:	je     0x100e03a
 100e02e:	not    rax
 100e031:	mov    QWORD PTR [rip+0xd1b0],rax        # 0x101b1e8
 100e038:	jmp    0x100e0b0
 100e03a:	lea    rcx,[rsp+0x30]
 100e03f:	call   QWORD PTR [rip+0xffffffffffff31c3]        # 0x1001208
 100e045:	mov    rbx,QWORD PTR [rsp+0x30]
 100e04a:	call   QWORD PTR [rip+0xffffffffffff31c0]        # 0x1001210
 100e050:	mov    r11d,eax
 100e053:	xor    rbx,r11
 100e056:	call   QWORD PTR [rip+0xffffffffffff32fc]        # 0x1001358
 100e05c:	mov    r11d,eax
 100e05f:	xor    rbx,r11
 100e062:	call   QWORD PTR [rip+0xffffffffffff31b0]        # 0x1001218
 100e068:	lea    rcx,[rsp+0x38]
 100e06d:	mov    r11d,eax
 100e070:	xor    rbx,r11
 100e073:	call   QWORD PTR [rip+0xffffffffffff31a7]        # 0x1001220
 100e079:	mov    r11,QWORD PTR [rsp+0x38]
 100e07e:	xor    r11,rbx
 100e081:	movabs rax,0xffffffffffff
 100e08b:	and    r11,rax
 100e08e:	movabs rax,0x2b992ddfa233
 100e098:	cmp    r11,rdi
 100e09b:	cmove  r11,rax
 100e09f:	mov    QWORD PTR [rip+0xd13a],r11        # 0x101b1e0
 100e0a6:	not    r11
 100e0a9:	mov    QWORD PTR [rip+0xd138],r11        # 0x101b1e8
 100e0b0:	mov    rbx,QWORD PTR [rsp+0x40]
 100e0b5:	add    rsp,0x20
 100e0b9:	pop    rdi
 100e0ba:	ret    
 100e0bb:	int3   
 100e0bc:	int3   
 100e0bd:	int3   
 100e0be:	int3   
 100e0bf:	int3   
 100e0c0:	int3   
 100e0c1:	int3   
 100e0c2:	jmp    QWORD PTR [rip+0xffffffffffff3348]        # 0x1001410
 100e0c8:	int3   
 100e0c9:	int3   
 100e0ca:	int3   
 100e0cb:	int3   
 100e0cc:	int3   
 100e0cd:	int3   
 100e0ce:	jmp    QWORD PTR [rip+0xffffffffffff34f4]        # 0x10015c8
 100e0d4:	int3   
 100e0d5:	int3   
 100e0d6:	int3   
 100e0d7:	int3   
 100e0d8:	int3   
 100e0d9:	int3   
 100e0da:	jmp    QWORD PTR [rip+0xffffffffffff3328]        # 0x1001408
 100e0e0:	int3   
 100e0e1:	int3   
 100e0e2:	int3   
 100e0e3:	int3   
 100e0e4:	int3   
 100e0e5:	int3   
 100e0e6:	jmp    QWORD PTR [rip+0xffffffffffff3314]        # 0x1001400
 100e0ec:	int3   
 100e0ed:	int3   
 100e0ee:	int3   
 100e0ef:	int3   
 100e0f0:	int3   
 100e0f1:	int3   
 100e0f2:	jmp    QWORD PTR [rip+0xffffffffffff3300]        # 0x10013f8
 100e0f8:	int3   
 100e0f9:	int3   
 100e0fa:	int3   
 100e0fb:	int3   
 100e0fc:	int3   
 100e0fd:	int3   
 100e0fe:	jmp    QWORD PTR [rip+0xffffffffffff32e4]        # 0x10013e8
 100e104:	int3   
 100e105:	int3   
 100e106:	int3   
 100e107:	int3   
 100e108:	int3   
 100e109:	int3   
 100e10a:	int3   
 100e10b:	int3   
 100e10c:	rex push rbp
 100e10e:	mov    rbp,rsp
 100e111:	sub    rsp,0x30
 100e115:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100e11e:	mov    QWORD PTR [rsp+0x40],rbx
 100e123:	xor    edx,edx
 100e125:	lea    rcx,[rsp+0x48]
 100e12a:	call   QWORD PTR [rip+0xffffffffffff3278]        # 0x10013a8
 100e130:	nop
 100e131:	jmp    0x100e162
 100e133:	mov    rax,QWORD PTR [rbx]
 100e136:	mov    QWORD PTR [rip+0xd9a3],rax        # 0x101bae0
 100e13d:	mov    rcx,QWORD PTR [rbx+0x8]
 100e141:	call   QWORD PTR [rip+0xffffffffffff3271]        # 0x10013b8
 100e147:	test   rax,rax
 100e14a:	je     0x100e15a
 100e14c:	mov    r8,QWORD PTR [rax]
 100e14f:	mov    edx,0x1
 100e154:	mov    rcx,rax
 100e157:	call   QWORD PTR [r8]
 100e15a:	mov    rcx,rbx
 100e15d:	call   0x100d814
 100e162:	mov    rbx,QWORD PTR [rip+0xd977]        # 0x101bae0
 100e169:	test   rbx,rbx
 100e16c:	jne    0x100e133
 100e16e:	lea    rcx,[rsp+0x48]
 100e173:	call   QWORD PTR [rip+0xffffffffffff3257]        # 0x10013d0
 100e179:	mov    rbx,QWORD PTR [rsp+0x40]
 100e17e:	add    rsp,0x30
 100e182:	pop    rbp
 100e183:	ret    
 100e184:	int3   
 100e185:	int3   
 100e186:	int3   
 100e187:	int3   
 100e188:	int3   
 100e189:	int3   
 100e18a:	int3   
 100e18b:	int3   
 100e18c:	mov    QWORD PTR [rsp+0x8],rbx
 100e191:	push   rbp
 100e192:	mov    rbp,rsp
 100e195:	sub    rsp,0x20
 100e199:	mov    rbx,rcx
 100e19c:	add    rcx,0x28
 100e1a0:	call   QWORD PTR [rip+0xffffffffffff31d2]        # 0x1001378
 100e1a6:	mov    rcx,QWORD PTR [rbx+0x50]
 100e1aa:	test   rcx,rcx
 100e1ad:	je     0x100e1b9
 100e1af:	call   0x100da24
 100e1b4:	and    QWORD PTR [rbx+0x50],0x0
 100e1b9:	and    DWORD PTR [rbx+0x58],0x0
 100e1bd:	and    DWORD PTR [rbx+0x5c],0x0
 100e1c1:	mov    rbx,QWORD PTR [rsp+0x30]
 100e1c6:	add    rsp,0x20
 100e1ca:	pop    rbp
 100e1cb:	ret    
 100e1cc:	int3   
 100e1cd:	int3   
 100e1ce:	int3   
 100e1cf:	int3   
 100e1d0:	int3   
 100e1d1:	int3   
 100e1d2:	int3   
 100e1d3:	int3   
 100e1d4:	mov    QWORD PTR [rsp+0x8],rbx
 100e1d9:	mov    QWORD PTR [rsp+0x10],rsi
 100e1de:	mov    QWORD PTR [rsp+0x18],rdi
 100e1e3:	push   rbp
 100e1e4:	mov    rbp,rsp
 100e1e7:	sub    rsp,0x20
 100e1eb:	mov    rdi,rcx
 100e1ee:	add    rcx,0x28
 100e1f2:	movsxd rbx,edx
 100e1f5:	call   QWORD PTR [rip+0xffffffffffff3145]        # 0x1001340
 100e1fb:	cmp    ebx,DWORD PTR [rdi+0x58]
 100e1fe:	jg     0x100e23e
 100e200:	test   ebx,ebx
 100e202:	js     0x100e23e
 100e204:	cmp    ebx,DWORD PTR [rdi+0x58]
 100e207:	jne    0x100e21c
 100e209:	mov    rbx,QWORD PTR [rdi+0x10]
 100e20d:	lea    rcx,[rdi+0x28]
 100e211:	call   QWORD PTR [rip+0xffffffffffff3121]        # 0x1001338
 100e217:	mov    rax,rbx
 100e21a:	jmp    0x100e24a
 100e21c:	jge    0x100e228
 100e21e:	mov    rax,QWORD PTR [rdi+0x50]
 100e222:	mov    rbx,QWORD PTR [rax+rbx*8]
 100e226:	jmp    0x100e20d
 100e228:	xor    r9d,r9d
 100e22b:	xor    r8d,r8d
 100e22e:	mov    ecx,0xc000008c
 100e233:	lea    edx,[r9+0x1]
 100e237:	call   QWORD PTR [rip+0xffffffffffff3143]        # 0x1001380
 100e23d:	int3   
 100e23e:	lea    rcx,[rdi+0x28]
 100e242:	call   QWORD PTR [rip+0xffffffffffff30f0]        # 0x1001338
 100e248:	xor    eax,eax
 100e24a:	mov    rbx,QWORD PTR [rsp+0x30]
 100e24f:	mov    rsi,QWORD PTR [rsp+0x38]
 100e254:	mov    rdi,QWORD PTR [rsp+0x40]
 100e259:	add    rsp,0x20
 100e25d:	pop    rbp
 100e25e:	ret    
 100e25f:	int3   
 100e260:	int3   
 100e261:	int3   
 100e262:	int3   
 100e263:	int3   
 100e264:	int3   
 100e265:	int3   
 100e266:	int3   
 100e267:	int3   
 100e268:	mov    QWORD PTR [rsp+0x8],rbx
 100e26d:	mov    QWORD PTR [rsp+0x10],rdi
 100e272:	push   rbp
 100e273:	mov    rbp,rsp
 100e276:	sub    rsp,0x20
 100e27a:	xor    edx,edx
 100e27c:	mov    rdi,rcx
 100e27f:	lea    r8d,[rdx+0x28]
 100e283:	add    rcx,r8
 100e286:	call   0x100dcba
 100e28b:	and    QWORD PTR [rdi+0x50],0x0
 100e290:	and    DWORD PTR [rdi+0x58],0x0
 100e294:	and    DWORD PTR [rdi+0x5c],0x0
 100e298:	lea    rax,[rip+0xffffffffffff1d61]        # 0x1000000
 100e29f:	lea    rcx,[rdi+0x28]
 100e2a3:	mov    QWORD PTR [rdi+0x10],rax
 100e2a7:	mov    QWORD PTR [rdi+0x8],rax
 100e2ab:	lea    rax,[rip+0xffffffffffff3ee6]        # 0x1002198
 100e2b2:	xor    edx,edx
 100e2b4:	mov    DWORD PTR [rdi],0x60
 100e2ba:	mov    DWORD PTR [rdi+0x18],0xa00
 100e2c1:	mov    QWORD PTR [rdi+0x20],rax
 100e2c5:	call   QWORD PTR [rip+0xffffffffffff2f35]        # 0x1001200
 100e2cb:	test   eax,eax
 100e2cd:	jne    0x100e2fa
 100e2cf:	call   QWORD PTR [rip+0xffffffffffff307b]        # 0x1001350
 100e2d5:	mov    edx,0x1
 100e2da:	movzx  ecx,ax
 100e2dd:	or     ecx,0x80070000
 100e2e3:	test   eax,eax
 100e2e5:	cmovle ecx,eax
 100e2e8:	movzx  eax,BYTE PTR [rip+0xcfe5]        # 0x101b2d4
 100e2ef:	test   ecx,ecx
 100e2f1:	cmovs  eax,edx
 100e2f4:	mov    BYTE PTR [rip+0xcfda],al        # 0x101b2d4
 100e2fa:	mov    rbx,QWORD PTR [rsp+0x30]
 100e2ff:	mov    rax,rdi
 100e302:	mov    rdi,QWORD PTR [rsp+0x38]
 100e307:	add    rsp,0x20
 100e30b:	pop    rbp
 100e30c:	ret    
 100e30d:	int3   
 100e30e:	int3   
 100e30f:	int3   
 100e310:	int3   
 100e311:	int3   
 100e312:	int3   
 100e313:	int3   
 100e314:	rex push rbp
 100e316:	mov    rbp,rsp
 100e319:	sub    rsp,0x20
 100e31d:	mov    rcx,QWORD PTR [rcx+0x8]
 100e321:	mov    r8,rdx
 100e324:	xor    edx,edx
 100e326:	add    rsp,0x20
 100e32a:	pop    rbp
 100e32b:	rex.W jmp QWORD PTR [rip+0xffffffffffff2ebe]        # 0x10011f0
 100e332:	int3   
 100e333:	int3   
 100e334:	int3   
 100e335:	int3   
 100e336:	int3   
 100e337:	int3   
 100e338:	test   rdx,rdx
 100e33b:	je     0x100e359
 100e33d:	push   rbp
 100e33e:	mov    rbp,rsp
 100e341:	sub    rsp,0x20
 100e345:	mov    rcx,QWORD PTR [rcx+0x8]
 100e349:	mov    r8,rdx
 100e34c:	xor    edx,edx
 100e34e:	call   QWORD PTR [rip+0xffffffffffff2e94]        # 0x10011e8
 100e354:	add    rsp,0x20
 100e358:	pop    rbp
 100e359:	ret    
 100e35a:	int3   
 100e35b:	int3   
 100e35c:	int3   
 100e35d:	int3   
 100e35e:	int3   
 100e35f:	int3   
 100e360:	rex push rbp
 100e362:	mov    rbp,rsp
 100e365:	sub    rsp,0x20
 100e369:	test   rdx,rdx
 100e36c:	jne    0x100e37c
 100e36e:	mov    rax,QWORD PTR [rcx]
 100e371:	mov    rdx,r8
 100e374:	add    rsp,0x20
 100e378:	pop    rbp
 100e379:	rex.W jmp QWORD PTR [rax]
 100e37c:	test   r8,r8
 100e37f:	jne    0x100e38f
 100e381:	mov    rax,QWORD PTR [rcx]
 100e384:	call   QWORD PTR [rax+0x8]
 100e387:	xor    eax,eax
 100e389:	add    rsp,0x20
 100e38d:	pop    rbp
 100e38e:	ret    
 100e38f:	mov    rcx,QWORD PTR [rcx+0x8]
 100e393:	mov    r9,r8
 100e396:	mov    r8,rdx
 100e399:	xor    edx,edx
 100e39b:	add    rsp,0x20
 100e39f:	pop    rbp
 100e3a0:	rex.W jmp QWORD PTR [rip+0xffffffffffff2e39]        # 0x10011e0
 100e3a7:	int3   
 100e3a8:	int3   
 100e3a9:	int3   
 100e3aa:	int3   
 100e3ab:	int3   
 100e3ac:	int3   
 100e3ad:	int3   
 100e3ae:	int3   
 100e3af:	int3   
 100e3b0:	rex push rbp
 100e3b2:	mov    rbp,rsp
 100e3b5:	sub    rsp,0x20
 100e3b9:	mov    rcx,QWORD PTR [rcx+0x8]
 100e3bd:	mov    r8,rdx
 100e3c0:	xor    edx,edx
 100e3c2:	add    rsp,0x20
 100e3c6:	pop    rbp
 100e3c7:	rex.W jmp QWORD PTR [rip+0xffffffffffff2e0a]        # 0x10011d8
 100e3ce:	int3   
 100e3cf:	int3   
 100e3d0:	int3   
 100e3d1:	int3   
 100e3d2:	int3   
 100e3d3:	int3   
 100e3d4:	mov    QWORD PTR [rsp+0x8],rbx
 100e3d9:	mov    QWORD PTR [rsp+0x10],rdi
 100e3de:	push   rbp
 100e3df:	mov    rbp,rsp
 100e3e2:	sub    rsp,0x20
 100e3e6:	cmp    BYTE PTR [rcx+0x10],0x0
 100e3ea:	lea    rax,[rip+0xffffffffffff3db7]        # 0x10021a8
 100e3f1:	mov    edi,edx
 100e3f3:	mov    QWORD PTR [rcx],rax
 100e3f6:	mov    rbx,rcx
 100e3f9:	je     0x100e40a
 100e3fb:	mov    rcx,QWORD PTR [rcx+0x8]
 100e3ff:	test   rcx,rcx
 100e402:	je     0x100e40a
 100e404:	call   QWORD PTR [rip+0xffffffffffff2dee]        # 0x10011f8
 100e40a:	test   dil,0x1
 100e40e:	je     0x100e418
 100e410:	mov    rcx,rbx
 100e413:	call   0x100d814
 100e418:	mov    rdi,QWORD PTR [rsp+0x38]
 100e41d:	mov    rax,rbx
 100e420:	mov    rbx,QWORD PTR [rsp+0x30]
 100e425:	add    rsp,0x20
 100e429:	pop    rbp
 100e42a:	ret    
 100e42b:	int3   
 100e42c:	int3   
 100e42d:	int3   
 100e42e:	int3   
 100e42f:	int3   
 100e430:	int3   
 100e431:	int3   
 100e432:	int3   
 100e433:	int3   
 100e434:	rex push rbp
 100e436:	mov    rbp,rsp
 100e439:	sub    rsp,0x20
 100e43d:	mov    rcx,QWORD PTR [rcx+0x8]
 100e441:	mov    rax,QWORD PTR [rcx]
 100e444:	add    rsp,0x20
 100e448:	pop    rbp
 100e449:	rex.W jmp QWORD PTR [rax+0x8]
 100e44d:	int3   
 100e44e:	int3   
 100e44f:	int3   
 100e450:	int3   
 100e451:	int3   
 100e452:	int3   
 100e453:	int3   
 100e454:	rex push rbp
 100e456:	mov    rbp,rsp
 100e459:	lock inc DWORD PTR [rcx+0x20]
 100e45d:	lea    rax,[rcx+0x10]
 100e461:	pop    rbp
 100e462:	ret    
 100e463:	int3   
 100e464:	int3   
 100e465:	int3   
 100e466:	int3   
 100e467:	int3   
 100e468:	int3   
 100e469:	int3   
 100e46a:	int3   
 100e46b:	int3   
 100e46c:	rex push rbp
 100e46e:	mov    rbp,rsp
 100e471:	mov    rax,rcx
 100e474:	pop    rbp
 100e475:	ret    
 100e476:	int3   
 100e477:	int3   
 100e478:	int3   
 100e479:	int3   
 100e47a:	int3   
 100e47b:	int3   
 100e47c:	mov    QWORD PTR [rsp+0x8],rbx
 100e481:	push   rbp
 100e482:	mov    rbp,rsp
 100e485:	sub    rsp,0x20
 100e489:	lea    rax,[rip+0xffffffffffff3d40]        # 0x10021d0
 100e490:	mov    rbx,rcx
 100e493:	mov    QWORD PTR [rcx],rax
 100e496:	test   dl,0x1
 100e499:	je     0x100e4a0
 100e49b:	call   0x100d814
 100e4a0:	mov    rax,rbx
 100e4a3:	mov    rbx,QWORD PTR [rsp+0x30]
 100e4a8:	add    rsp,0x20
 100e4ac:	pop    rbp
 100e4ad:	ret    
 100e4ae:	int3   
 100e4af:	int3   
 100e4b0:	int3   
 100e4b1:	int3   
 100e4b2:	int3   
 100e4b3:	int3   
 100e4b4:	mov    QWORD PTR [rsp+0x8],rbx
 100e4b9:	mov    QWORD PTR [rsp+0x10],rdi
 100e4be:	push   rbp
 100e4bf:	mov    rbp,rsp
 100e4c2:	sub    rsp,0x20
 100e4c6:	lea    ebx,[rdx+0x8]
 100e4c9:	movsxd r9,r8d
 100e4cc:	mov    rdi,rcx
 100e4cf:	and    ebx,0xfffffff8
 100e4d2:	movsxd r8,ebx
 100e4d5:	jne    0x100e4dc
 100e4d7:	xor    r8d,r8d
 100e4da:	jmp    0x100e4f4
 100e4dc:	xor    edx,edx
 100e4de:	or     rax,0xffffffffffffffff
 100e4e2:	div    r8
 100e4e5:	cmp    rax,r9
 100e4e8:	jb     0x100e524
 100e4ea:	imul   r8,r9
 100e4ee:	cmp    r8,0xffffffffffffffe7
 100e4f2:	ja     0x100e524
 100e4f4:	mov    rcx,QWORD PTR [rcx+0x8]
 100e4f8:	lea    rdx,[r8+0x18]
 100e4fc:	mov    rax,QWORD PTR [rcx]
 100e4ff:	call   QWORD PTR [rax]
 100e501:	mov    r11,rax
 100e504:	test   rax,rax
 100e507:	je     0x100e524
 100e509:	and    DWORD PTR [r11+0x8],0x0
 100e50e:	mov    QWORD PTR [rax],rdi
 100e511:	mov    DWORD PTR [rax+0x10],0x1
 100e518:	lea    eax,[rbx-0x1]
 100e51b:	mov    DWORD PTR [r11+0xc],eax
 100e51f:	mov    rax,r11
 100e522:	jmp    0x100e526
 100e524:	xor    eax,eax
 100e526:	mov    rbx,QWORD PTR [rsp+0x30]
 100e52b:	mov    rdi,QWORD PTR [rsp+0x38]
 100e530:	add    rsp,0x20
 100e534:	pop    rbp
 100e535:	ret    
 100e536:	int3   
 100e537:	int3   
 100e538:	int3   
 100e539:	int3   
 100e53a:	int3   
 100e53b:	int3   
 100e53c:	mov    QWORD PTR [rsp+0x8],rbx
 100e541:	push   rbp
 100e542:	mov    rbp,rsp
 100e545:	sub    rsp,0x20
 100e549:	lea    ebx,[r8+0x8]
 100e54d:	mov    eax,r9d
 100e550:	and    ebx,0xfffffff8
 100e553:	mov    r8d,ebx
 100e556:	imul   r8,rax
 100e55a:	mov    eax,0xffffffff
 100e55f:	cmp    r8,rax
 100e562:	ja     0x100e58d
 100e564:	cmp    r8d,0xffffffe7
 100e568:	ja     0x100e58d
 100e56a:	mov    rcx,QWORD PTR [rcx+0x8]
 100e56e:	add    r8d,0x18
 100e572:	mov    r9,QWORD PTR [rcx]
 100e575:	call   QWORD PTR [r9+0x10]
 100e579:	mov    r11,rax
 100e57c:	test   rax,rax
 100e57f:	je     0x100e58d
 100e581:	lea    eax,[rbx-0x1]
 100e584:	mov    DWORD PTR [r11+0xc],eax
 100e588:	mov    rax,r11
 100e58b:	jmp    0x100e58f
 100e58d:	xor    eax,eax
 100e58f:	mov    rbx,QWORD PTR [rsp+0x30]
 100e594:	add    rsp,0x20
 100e598:	pop    rbp
 100e599:	ret    
 100e59a:	int3   
 100e59b:	int3   
 100e59c:	int3   
 100e59d:	int3   
 100e59e:	int3   
 100e59f:	int3   
 100e5a0:	jmp    QWORD PTR [rip+0xffffffffffff306a]        # 0x1001610
 100e5a6:	int3   
 100e5a7:	int3   
 100e5a8:	int3   
 100e5a9:	int3   
 100e5aa:	int3   
 100e5ab:	int3   
 100e5ac:	jmp    QWORD PTR [rip+0xffffffffffff3056]        # 0x1001608
 100e5b2:	int3   
 100e5b3:	int3   
 100e5b4:	int3   
 100e5b5:	int3   
 100e5b6:	int3   
 100e5b7:	int3   
 100e5b8:	jmp    QWORD PTR [rip+0xffffffffffff30b2]        # 0x1001670
 100e5be:	int3   
 100e5bf:	int3   
 100e5c0:	int3   
 100e5c1:	int3   
 100e5c2:	int3   
 100e5c3:	int3   
 100e5c4:	jmp    QWORD PTR [rip+0xffffffffffff3096]        # 0x1001660
 100e5ca:	int3   
 100e5cb:	int3   
 100e5cc:	int3   
 100e5cd:	int3   
 100e5ce:	int3   
 100e5cf:	int3   
 100e5d0:	jmp    QWORD PTR [rip+0xffffffffffff3092]        # 0x1001668
 100e5d6:	int3   
 100e5d7:	int3   
 100e5d8:	int3   
 100e5d9:	int3   
 100e5da:	int3   
 100e5db:	int3   
 100e5dc:	int3   
 100e5dd:	int3   
 100e5de:	int3   
 100e5df:	int3   
 100e5e0:	ret    0x0
 100e5e3:	int3   
 100e5e4:	int3   
 100e5e5:	int3   
 100e5e6:	int3   
 100e5e7:	int3   
 100e5e8:	int3   
 100e5e9:	int3   
 100e5ea:	int3   
 100e5eb:	int3   
 100e5ec:	int3   
 100e5ed:	int3   
 100e5ee:	int3   
 100e5ef:	int3   
 100e5f0:	ret    0x0
 100e5f3:	int3   
 100e5f4:	int3   
 100e5f5:	int3   
 100e5f6:	int3   
 100e5f7:	int3   
 100e5f8:	int3   
 100e5f9:	int3   
 100e5fa:	int3   
 100e5fb:	int3   
 100e5fc:	int3   
 100e5fd:	int3   
 100e5fe:	int3   
 100e5ff:	int3   
 100e600:	mov    DWORD PTR [rsp+0x8],ecx
 100e604:	mov    QWORD PTR [rsp+0x10],rdx
 100e609:	mov    QWORD PTR [rsp+0x18],r8
 100e60e:	mov    QWORD PTR [rsp+0x20],r9
 100e613:	push   rbx
 100e614:	sub    rsp,0x60
 100e618:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
 100e621:	lea    rax,[rsp+0x78]
 100e626:	mov    QWORD PTR [rsp+0x50],rax
 100e62b:	cmp    BYTE PTR [rip+0xd53e],0x0        # 0x101bb70
 100e632:	jne    0x100e66f
 100e634:	xor    ecx,ecx
 100e636:	call   QWORD PTR [rip+0xffffffffffff2b8c]        # 0x10011c8
 100e63c:	mov    rbx,rax
 100e63f:	call   QWORD PTR [rip+0xffffffffffff2b73]        # 0x10011b8
 100e645:	mov    ecx,0x409
 100e64a:	cmp    ax,cx
 100e64d:	je     0x100e661
 100e64f:	mov    rcx,rbx
 100e652:	call   0x1014e10
 100e657:	test   rax,rax
 100e65a:	cmove  rax,rbx
 100e65e:	mov    rbx,rax
 100e661:	mov    QWORD PTR [rip+0xd500],rbx        # 0x101bb68
 100e668:	mov    BYTE PTR [rip+0xd501],0x1        # 0x101bb70
 100e66f:	lea    rcx,[rip+0xcb92]        # 0x101b208
 100e676:	mov    rax,QWORD PTR [rip+0xcb8b]        # 0x101b208
 100e67d:	call   QWORD PTR [rax+0x18]
 100e680:	add    rax,0x18
 100e684:	mov    QWORD PTR [rsp+0x40],rax
 100e689:	mov    r8d,DWORD PTR [rsp+0x70]
 100e68e:	mov    rdx,QWORD PTR [rip+0xd4d3]        # 0x101bb68
 100e695:	lea    rcx,[rsp+0x40]
 100e69a:	call   0x1005d80
 100e69f:	test   eax,eax
 100e6a1:	jne    0x100e6fb
 100e6a3:	mov    r8,QWORD PTR [rip+0xd4be]        # 0x101bb68
 100e6aa:	test   r8,r8
 100e6ad:	je     0x100e6cb
 100e6af:	mov    r8d,DWORD PTR [rsp+0x70]
 100e6b4:	xor    edx,edx
 100e6b6:	lea    rcx,[rsp+0x40]
 100e6bb:	call   0x1005d80
 100e6c0:	test   eax,eax
 100e6c2:	jne    0x100e6fb
 100e6c4:	mov    r8,QWORD PTR [rip+0xd49d]        # 0x101bb68
 100e6cb:	mov    edx,DWORD PTR [rsp+0x70]
 100e6cf:	lea    rcx,[rip+0xffffffffffff4e7a]        # 0x1003550
 100e6d6:	call   QWORD PTR [rip+0xffffffffffff2e94]        # 0x1001570
 100e6dc:	mov    r8,QWORD PTR [rip+0xd485]        # 0x101bb68
 100e6e3:	mov    edx,DWORD PTR [rsp+0x70]
 100e6e7:	lea    rcx,[rip+0xffffffffffff4e62]        # 0x1003550
 100e6ee:	call   QWORD PTR [rip+0xffffffffffff2e7c]        # 0x1001570
 100e6f4:	mov    rbx,QWORD PTR [rsp+0x40]
 100e6f9:	jmp    0x100e74c
 100e6fb:	lea    rax,[rsp+0x50]
 100e700:	mov    QWORD PTR [rsp+0x30],rax
 100e705:	mov    DWORD PTR [rsp+0x28],0x0
 100e70d:	lea    rax,[rsp+0x48]
 100e712:	mov    QWORD PTR [rsp+0x20],rax
 100e717:	xor    r9d,r9d
 100e71a:	xor    r8d,r8d
 100e71d:	mov    rbx,QWORD PTR [rsp+0x40]
 100e722:	mov    rdx,rbx
 100e725:	mov    ecx,0x500
 100e72a:	call   QWORD PTR [rip+0xffffffffffff2b70]        # 0x10012a0
 100e730:	test   eax,eax
 100e732:	je     0x100e74c
 100e734:	mov    edx,eax
 100e736:	mov    rcx,QWORD PTR [rsp+0x48]
 100e73b:	call   0x100e8f0
 100e740:	mov    rcx,QWORD PTR [rsp+0x48]
 100e745:	call   QWORD PTR [rip+0xffffffffffff2bc5]        # 0x1001310
 100e74b:	nop
 100e74c:	lea    rdx,[rbx-0x18]
 100e750:	or     eax,0xffffffff
 100e753:	lock xadd DWORD PTR [rdx+0x10],eax
 100e758:	dec    eax
 100e75a:	test   eax,eax
 100e75c:	jg     0x100e768
 100e75e:	mov    rcx,QWORD PTR [rdx]
 100e761:	mov    rax,QWORD PTR [rcx]
 100e764:	call   QWORD PTR [rax+0x8]
 100e767:	nop
 100e768:	add    rsp,0x60
 100e76c:	pop    rbx
 100e76d:	ret    
 100e76e:	int3   
 100e76f:	int3   
 100e770:	int3   
 100e771:	int3   
 100e772:	int3   
 100e773:	int3   
 100e774:	int3   
 100e775:	int3   
 100e776:	int3   
 100e777:	int3   
 100e778:	int3   
 100e779:	int3   
 100e77a:	int3   
 100e77b:	int3   
 100e77c:	int3   
 100e77d:	int3   
 100e77e:	int3   
 100e77f:	int3   
 100e780:	mov    QWORD PTR [rsp+0x8],rbx
 100e785:	mov    QWORD PTR [rsp+0x10],rbp
 100e78a:	mov    QWORD PTR [rsp+0x18],rsi
 100e78f:	push   rdi
 100e790:	push   r14
 100e792:	push   r15
 100e794:	sub    rsp,0x20
 100e798:	cmp    BYTE PTR [rip+0xd3d1],0x0        # 0x101bb70
 100e79f:	mov    r14,r8
 100e7a2:	mov    ebp,edx
 100e7a4:	mov    rsi,rcx
 100e7a7:	jne    0x100e7ee
 100e7a9:	call   QWORD PTR [rip+0xffffffffffff2a09]        # 0x10011b8
 100e7af:	mov    ecx,0x409
 100e7b4:	cmp    ax,cx
 100e7b7:	jne    0x100e7cc
 100e7b9:	mov    rbx,rsi
 100e7bc:	mov    BYTE PTR [rip+0xd3ad],0x1        # 0x101bb70
 100e7c3:	mov    QWORD PTR [rip+0xd39e],rbx        # 0x101bb68
 100e7ca:	jmp    0x100e7f5
 100e7cc:	mov    rcx,rsi
 100e7cf:	call   0x1014e10
 100e7d4:	mov    BYTE PTR [rip+0xd395],0x1        # 0x101bb70
 100e7db:	mov    rbx,rax
 100e7de:	test   rax,rax
 100e7e1:	cmove  rbx,rsi
 100e7e5:	mov    QWORD PTR [rip+0xd37c],rbx        # 0x101bb68
 100e7ec:	jmp    0x100e7f5
 100e7ee:	mov    rbx,QWORD PTR [rip+0xd373]        # 0x101bb68
 100e7f5:	xor    ecx,ecx
 100e7f7:	call   QWORD PTR [rip+0xffffffffffff2ddb]        # 0x10015d8
 100e7fd:	mov    r11d,ebp
 100e800:	mov    r8d,0x6
 100e806:	shr    r11d,0x4
 100e80a:	mov    rcx,rbx
 100e80d:	inc    r11w
 100e811:	movzx  r15d,r11w
 100e815:	mov    edx,r15d
 100e818:	call   QWORD PTR [rip+0xffffffffffff2a72]        # 0x1001290
 100e81e:	xor    edi,edi
 100e820:	test   rax,rax
 100e823:	je     0x100e847
 100e825:	mov    r8d,ebp
 100e828:	mov    rdx,rax
 100e82b:	mov    rcx,rbx
 100e82e:	call   0x1005870
 100e833:	test   rax,rax
 100e836:	je     0x100e847
 100e838:	movzx  edx,WORD PTR [rax]
 100e83b:	lea    rcx,[rax+0x2]
 100e83f:	call   QWORD PTR [rip+0xffffffffffff2db3]        # 0x10015f8
 100e845:	jmp    0x100e84a
 100e847:	mov    rax,rdi
 100e84a:	test   rax,rax
 100e84d:	setne  bl
 100e850:	test   bl,bl
 100e852:	jne    0x100e8a8
 100e854:	mov    rcx,rax
 100e857:	call   QWORD PTR [rip+0xffffffffffff2d7b]        # 0x10015d8
 100e85d:	mov    r8d,0x6
 100e863:	mov    rdx,r15
 100e866:	mov    rcx,rsi
 100e869:	call   QWORD PTR [rip+0xffffffffffff2a21]        # 0x1001290
 100e86f:	test   rax,rax
 100e872:	je     0x100e896
 100e874:	mov    r8d,ebp
 100e877:	mov    rdx,rax
 100e87a:	mov    rcx,rsi
 100e87d:	call   0x1005870
 100e882:	test   rax,rax
 100e885:	je     0x100e896
 100e887:	movzx  edx,WORD PTR [rax]
 100e88a:	lea    rcx,[rax+0x2]
 100e88e:	call   QWORD PTR [rip+0xffffffffffff2d64]        # 0x10015f8
 100e894:	jmp    0x100e899
 100e896:	mov    rax,rdi
 100e899:	test   rax,rax
 100e89c:	setne  bl
 100e89f:	test   bl,bl
 100e8a1:	jne    0x100e8a8
 100e8a3:	mov    QWORD PTR [r14],rdi
 100e8a6:	jmp    0x100e8b1
 100e8a8:	mov    rcx,rax
 100e8ab:	mov    rax,rdi
 100e8ae:	mov    QWORD PTR [r14],rcx
 100e8b1:	mov    rcx,rax
 100e8b4:	call   QWORD PTR [rip+0xffffffffffff2d1e]        # 0x10015d8
 100e8ba:	mov    rbp,QWORD PTR [rsp+0x48]
 100e8bf:	mov    rsi,QWORD PTR [rsp+0x50]
 100e8c4:	test   bl,bl
 100e8c6:	mov    rbx,QWORD PTR [rsp+0x40]
 100e8cb:	setne  dil
 100e8cf:	mov    eax,edi
 100e8d1:	add    rsp,0x20
 100e8d5:	pop    r15
 100e8d7:	pop    r14
 100e8d9:	pop    rdi
 100e8da:	ret    
 100e8db:	int3   
 100e8dc:	int3   
 100e8dd:	int3   
 100e8de:	int3   
 100e8df:	int3   
 100e8e0:	int3   
 100e8e1:	int3   
 100e8e2:	int3   
 100e8e3:	int3   
 100e8e4:	int3   
 100e8e5:	int3   
 100e8e6:	int3   
 100e8e7:	int3   
 100e8e8:	int3   
 100e8e9:	int3   
 100e8ea:	int3   
 100e8eb:	int3   
 100e8ec:	int3   
 100e8ed:	int3   
 100e8ee:	int3   
 100e8ef:	int3   
 100e8f0:	test   edx,edx
 100e8f2:	je     0x100ea34
 100e8f8:	mov    r11,rsp
 100e8fb:	push   rbx
 100e8fc:	sub    rsp,0x170
 100e903:	mov    rax,QWORD PTR [rip+0xc8d6]        # 0x101b1e0
 100e90a:	xor    rax,rsp
 100e90d:	mov    QWORD PTR [rsp+0x150],rax
 100e915:	mov    QWORD PTR [r11+0x18],rbp
 100e919:	mov    QWORD PTR [r11-0x10],rsi
 100e91d:	mov    rbx,rcx
 100e920:	mov    QWORD PTR [r11-0x18],rdi
 100e924:	mov    r8,rcx
 100e927:	mov    rax,rcx
 100e92a:	nop    WORD PTR [rax+rax*1+0x0]
 100e930:	cmp    WORD PTR [rax],0xd
 100e934:	jne    0x100e943
 100e936:	cmp    WORD PTR [rax+0x2],0xa
 100e93b:	lea    rcx,[rax+0x2]
 100e93f:	cmove  rax,rcx
 100e943:	movzx  ecx,WORD PTR [rax]
 100e946:	add    r8,0x2
 100e94a:	add    rax,0x2
 100e94e:	mov    WORD PTR [r8-0x2],cx
 100e953:	movzx  ecx,WORD PTR [rax-0x2]
 100e957:	test   cx,cx
 100e95a:	jne    0x100e930
 100e95c:	xor    ebp,ebp
 100e95e:	lea    esi,[rdx+0x1]
 100e961:	mov    r8,rbx
 100e964:	mov    QWORD PTR [rsp+0x38],rbp
 100e969:	mov    QWORD PTR [rsp+0x30],rbp
 100e96e:	lea    ecx,[rbp+0x1]
 100e971:	mov    r9d,esi
 100e974:	mov    edx,0x400
 100e979:	mov    DWORD PTR [rsp+0x28],ebp
 100e97d:	mov    QWORD PTR [rsp+0x20],rbp
 100e982:	call   QWORD PTR [rip+0xffffffffffff2838]        # 0x10011c0
 100e988:	mov    edi,eax
 100e98a:	test   eax,eax
 100e98c:	je     0x100ea04
 100e98e:	mov    ecx,edi
 100e990:	cmp    rdi,0x100
 100e997:	jbe    0x100e9a5
 100e999:	mov    QWORD PTR [rsp+0x40],rbp
 100e99e:	call   0x100dcde
 100e9a3:	jmp    0x100e9aa
 100e9a5:	lea    rax,[rsp+0x48]
 100e9aa:	mov    QWORD PTR [rsp+0x38],rbp
 100e9af:	mov    QWORD PTR [rsp+0x30],rbp
 100e9b4:	mov    r9d,esi
 100e9b7:	mov    r8,rbx
 100e9ba:	mov    edx,0x400
 100e9bf:	mov    ecx,0x1
 100e9c4:	mov    DWORD PTR [rsp+0x28],edi
 100e9c8:	mov    QWORD PTR [rsp+0x40],rax
 100e9cd:	mov    QWORD PTR [rsp+0x20],rax
 100e9d2:	call   QWORD PTR [rip+0xffffffffffff27e8]        # 0x10011c0
 100e9d8:	mov    rbx,QWORD PTR [rsp+0x40]
 100e9dd:	call   QWORD PTR [rip+0xffffffffffff2b6d]        # 0x1001550
 100e9e3:	lea    rdx,[rax+0x30]
 100e9e7:	mov    rcx,rbx
 100e9ea:	call   QWORD PTR [rip+0xffffffffffff2b88]        # 0x1001578
 100e9f0:	mov    rcx,QWORD PTR [rsp+0x40]
 100e9f5:	lea    r11,[rsp+0x48]
 100e9fa:	cmp    rcx,r11
 100e9fd:	je     0x100ea04
 100e9ff:	call   0x100da30
 100ea04:	mov    rsi,QWORD PTR [rsp+0x168]
 100ea0c:	mov    rbp,QWORD PTR [rsp+0x190]
 100ea14:	mov    rdi,QWORD PTR [rsp+0x160]
 100ea1c:	mov    rcx,QWORD PTR [rsp+0x150]
 100ea24:	xor    rcx,rsp
 100ea27:	call   0x100daf0
 100ea2c:	add    rsp,0x170
 100ea33:	pop    rbx
 100ea34:	repz ret 
 100ea36:	int3   
 100ea37:	int3   
 100ea38:	int3   
 100ea39:	int3   
 100ea3a:	int3   
 100ea3b:	int3   
 100ea3c:	int3   
 100ea3d:	int3   
 100ea3e:	int3   
 100ea3f:	int3   
 100ea40:	rex push rbx
 100ea42:	push   rbp
 100ea43:	push   rsi
 100ea44:	sub    rsp,0x50
 100ea48:	xor    ebp,ebp
 100ea4a:	mov    rbx,rcx
 100ea4d:	mov    esi,edx
 100ea4f:	lea    rcx,[rsp+0x30]
 100ea54:	lea    r8,[rip+0xffffffffffff4ba5]        # 0x1003600
 100ea5b:	mov    r9d,0x20019
 100ea61:	mov    rdx,0xffffffff80000002
 100ea68:	mov    QWORD PTR [rsp+0x30],rbp
 100ea6d:	mov    DWORD PTR [rsp+0x38],ebp
 100ea71:	mov    QWORD PTR [rsp+0x40],rbp
 100ea76:	call   0x1004fb0
 100ea7b:	test   eax,eax
 100ea7d:	je     0x100eae9
 100ea7f:	mov    ecx,esi
 100ea81:	test   esi,esi
 100ea83:	je     0x100eacd
 100ea85:	cmp    rcx,0x7fffffff
 100ea8c:	ja     0x100eacd
 100ea8e:	lea    r8,[rip+0xffffffffffff348b]        # 0x1001f20
 100ea95:	mov    edx,0x7ffffffe
 100ea9a:	sub    rdx,rcx
 100ea9d:	sub    r8,rbx
 100eaa0:	lea    rax,[rdx+rcx*1]
 100eaa4:	test   rax,rax
 100eaa7:	je     0x100eac1
 100eaa9:	movzx  eax,WORD PTR [r8+rbx*1]
 100eaae:	test   ax,ax
 100eab1:	je     0x100eac1
 100eab3:	mov    WORD PTR [rbx],ax
 100eab6:	add    rbx,0x2
 100eaba:	dec    rcx
 100eabd:	jne    0x100eaa0
 100eabf:	jmp    0x100eac6
 100eac1:	test   rcx,rcx
 100eac4:	jne    0x100eaca
 100eac6:	sub    rbx,0x2
 100eaca:	mov    WORD PTR [rbx],bp
 100eacd:	mov    rcx,QWORD PTR [rsp+0x30]
 100ead2:	test   rcx,rcx
 100ead5:	je     0x100eb85
 100eadb:	add    rsp,0x50
 100eadf:	pop    rsi
 100eae0:	pop    rbp
 100eae1:	pop    rbx
 100eae2:	rex.W jmp QWORD PTR [rip+0xffffffffffff2517]        # 0x1001000
 100eae9:	lea    eax,[rsi+rsi*1]
 100eaec:	mov    QWORD PTR [rsp+0x70],rdi
 100eaf1:	mov    rdi,QWORD PTR [rsp+0x30]
 100eaf6:	mov    DWORD PTR [rsp+0x80],eax
 100eafd:	lea    rax,[rsp+0x80]
 100eb05:	lea    r9,[rsp+0x88]
 100eb0d:	mov    QWORD PTR [rsp+0x28],rax
 100eb12:	lea    rdx,[rip+0xffffffffffff4b3f]        # 0x1003658
 100eb19:	xor    r8d,r8d
 100eb1c:	mov    rcx,rdi
 100eb1f:	mov    QWORD PTR [rsp+0x20],rbx
 100eb24:	call   QWORD PTR [rip+0xffffffffffff24e6]        # 0x1001010
 100eb2a:	test   eax,eax
 100eb2c:	jne    0x100eb60
 100eb2e:	mov    eax,DWORD PTR [rsp+0x88]
 100eb35:	cmp    eax,0x1
 100eb38:	je     0x100eb3f
 100eb3a:	cmp    eax,0x2
 100eb3d:	jne    0x100eb60
 100eb3f:	mov    ecx,DWORD PTR [rsp+0x80]
 100eb46:	test   rbx,rbx
 100eb49:	je     0x100eb90
 100eb4b:	test   ecx,ecx
 100eb4d:	je     0x100eb8d
 100eb4f:	test   cl,0x1
 100eb52:	jne    0x100eb60
 100eb54:	mov    eax,ecx
 100eb56:	shr    rax,1
 100eb59:	cmp    WORD PTR [rbx+rax*2-0x2],bp
 100eb5e:	je     0x100eb90
 100eb60:	lea    r8,[rip+0xffffffffffff33b9]        # 0x1001f20
 100eb67:	mov    rdx,rsi
 100eb6a:	mov    rcx,rbx
 100eb6d:	call   0x10050b0
 100eb72:	test   rdi,rdi
 100eb75:	je     0x100eb80
 100eb77:	mov    rcx,rdi
 100eb7a:	call   QWORD PTR [rip+0xffffffffffff2480]        # 0x1001000
 100eb80:	mov    rdi,QWORD PTR [rsp+0x70]
 100eb85:	add    rsp,0x50
 100eb89:	pop    rsi
 100eb8a:	pop    rbp
 100eb8b:	pop    rbx
 100eb8c:	ret    
 100eb8d:	mov    WORD PTR [rbx],bp
 100eb90:	shr    ecx,1
 100eb92:	cmp    ecx,esi
 100eb94:	jae    0x100eb60
 100eb96:	mov    WORD PTR [rbx+rcx*2],bp
 100eb9a:	jmp    0x100eb72
 100eb9c:	int3   
 100eb9d:	int3   
 100eb9e:	int3   
 100eb9f:	int3   
 100eba0:	int3   
 100eba1:	int3   
 100eba2:	int3   
 100eba3:	int3   
 100eba4:	int3   
 100eba5:	int3   
 100eba6:	int3   
 100eba7:	int3   
 100eba8:	int3   
 100eba9:	int3   
 100ebaa:	int3   
 100ebab:	int3   
 100ebac:	int3   
 100ebad:	int3   
 100ebae:	int3   
 100ebaf:	int3   
 100ebb0:	mov    QWORD PTR [rsp+0x18],rbx
 100ebb5:	push   rdi
 100ebb6:	sub    rsp,0x240
 100ebbd:	mov    rax,QWORD PTR [rip+0xc61c]        # 0x101b1e0
 100ebc4:	xor    rax,rsp
 100ebc7:	mov    QWORD PTR [rsp+0x230],rax
 100ebcf:	mov    edi,edx
 100ebd1:	mov    rbx,rcx
 100ebd4:	cmp    edx,0x104
 100ebda:	jae    0x100ec3f
 100ebdc:	mov    ecx,edi
 100ebde:	test   edx,edx
 100ebe0:	je     0x100ec7c
 100ebe6:	cmp    rcx,0x7fffffff
 100ebed:	ja     0x100ec7c
 100ebf3:	lea    r8,[rip+0xffffffffffff319e]        # 0x1001d98
 100ebfa:	mov    edx,0x7ffffffe
 100ebff:	sub    rdx,rcx
 100ec02:	sub    r8,rbx
 100ec05:	lea    rax,[rdx+rcx*1]
 100ec09:	test   rax,rax
 100ec0c:	je     0x100ec2f
 100ec0e:	movzx  eax,WORD PTR [r8+rbx*1]
 100ec13:	test   ax,ax
 100ec16:	je     0x100ec2f
 100ec18:	mov    WORD PTR [rbx],ax
 100ec1b:	add    rbx,0x2
 100ec1f:	dec    rcx
 100ec22:	jne    0x100ec05
 100ec24:	sub    rbx,0x2
 100ec28:	xor    eax,eax
 100ec2a:	mov    WORD PTR [rbx],ax
 100ec2d:	jmp    0x100ec7c
 100ec2f:	test   rcx,rcx
 100ec32:	jne    0x100ec38
 100ec34:	sub    rbx,0x2
 100ec38:	xor    eax,eax
 100ec3a:	mov    WORD PTR [rbx],ax
 100ec3d:	jmp    0x100ec7c
 100ec3f:	lea    rcx,[rsp+0x20]
 100ec44:	mov    edx,0x104
 100ec49:	call   0x100ea40
 100ec4e:	lea    rdx,[rip+0xffffffffffff4a2b]        # 0x1003680
 100ec55:	lea    rcx,[rsp+0x20]
 100ec5a:	mov    r9,rbx
 100ec5d:	xor    r8d,r8d
 100ec60:	call   QWORD PTR [rip+0xffffffffffff2532]        # 0x1001198
 100ec66:	test   eax,eax
 100ec68:	jne    0x100ec7c
 100ec6a:	lea    r8,[rip+0xffffffffffff3127]        # 0x1001d98
 100ec71:	mov    rdx,rdi
 100ec74:	mov    rcx,rbx
 100ec77:	call   0x10050b0
 100ec7c:	mov    rcx,QWORD PTR [rsp+0x230]
 100ec84:	xor    rcx,rsp
 100ec87:	call   0x100daf0
 100ec8c:	mov    rbx,QWORD PTR [rsp+0x260]
 100ec94:	add    rsp,0x240
 100ec9b:	pop    rdi
 100ec9c:	ret    
 100ec9d:	int3   
 100ec9e:	int3   
 100ec9f:	int3   
 100eca0:	int3   
 100eca1:	int3   
 100eca2:	int3   
 100eca3:	int3   
 100eca4:	int3   
 100eca5:	int3   
 100eca6:	int3   
 100eca7:	int3   
 100eca8:	int3   
 100eca9:	int3   
 100ecaa:	int3   
 100ecab:	int3   
 100ecac:	int3   
 100ecad:	int3   
 100ecae:	int3   
 100ecaf:	int3   
 100ecb0:	mov    QWORD PTR [rsp+0x10],rbx
 100ecb5:	mov    QWORD PTR [rsp+0x18],rsi
 100ecba:	mov    QWORD PTR [rsp+0x20],rdi
 100ecbf:	push   rbp
 100ecc0:	lea    rbp,[rsp-0x3110]
 100ecc8:	mov    eax,0x3210
 100eccd:	call   0x1014d90
 100ecd2:	sub    rsp,rax
 100ecd5:	mov    rax,QWORD PTR [rip+0xc504]        # 0x101b1e0
 100ecdc:	xor    rax,rsp
 100ecdf:	mov    QWORD PTR [rbp+0x3100],rax
 100ece6:	xor    esi,esi
 100ece8:	lea    r9,[rsp+0x40]
 100eced:	lea    rdx,[rsp+0x44]
 100ecf2:	lea    r8d,[rsi+0x2]
 100ecf6:	mov    rdi,rcx
 100ecf9:	mov    WORD PTR [rsp+0x44],0xfeff
 100ed00:	mov    QWORD PTR [rsp+0x20],rsi
 100ed05:	call   QWORD PTR [rip+0xffffffffffff2375]        # 0x1001080
 100ed0b:	lea    rcx,[rbp+0x22f2]
 100ed12:	xor    edx,edx
 100ed14:	mov    r8d,0x7fe
 100ed1a:	mov    WORD PTR [rbp+0x22f0],si
 100ed21:	call   0x100dcba
 100ed26:	lea    rcx,[rbp+0x20f2]
 100ed2d:	xor    edx,edx
 100ed2f:	mov    r8d,0xfe
 100ed35:	mov    WORD PTR [rbp+0x20f0],si
 100ed3c:	call   0x100dcba
 100ed41:	lea    rcx,[rbp+0x21f2]
 100ed48:	xor    edx,edx
 100ed4a:	mov    r8d,0xfe
 100ed50:	mov    WORD PTR [rbp+0x21f0],si
 100ed57:	call   0x100dcba
 100ed5c:	lea    rax,[rbp+0x20f0]
 100ed63:	mov    ebx,0x80
 100ed68:	lea    r9,[rip+0xffffffffffff4919]        # 0x1003688
 100ed6f:	xor    r8d,r8d
 100ed72:	xor    edx,edx
 100ed74:	mov    ecx,0x400
 100ed79:	mov    DWORD PTR [rsp+0x28],ebx
 100ed7d:	mov    QWORD PTR [rsp+0x20],rax
 100ed82:	call   QWORD PTR [rip+0xffffffffffff24e8]        # 0x1001270
 100ed88:	test   eax,eax
 100ed8a:	je     0x100ee19
 100ed90:	lea    rax,[rbp+0x21f0]
 100ed97:	lea    r9,[rip+0xffffffffffff4902]        # 0x10036a0
 100ed9e:	xor    r8d,r8d
 100eda1:	xor    edx,edx
 100eda3:	mov    ecx,0x400
 100eda8:	mov    DWORD PTR [rsp+0x28],ebx
 100edac:	mov    QWORD PTR [rsp+0x20],rax
 100edb1:	call   QWORD PTR [rip+0xffffffffffff24c1]        # 0x1001278
 100edb7:	test   eax,eax
 100edb9:	je     0x100ee19
 100edbb:	lea    rax,[rbp+0x21f0]
 100edc2:	lea    r9,[rbp+0x20f0]
 100edc9:	lea    r8,[rip+0xffffffffffff48f0]        # 0x10036c0
 100edd0:	lea    rcx,[rbp+0x22f0]
 100edd7:	mov    edx,0x400
 100eddc:	mov    QWORD PTR [rsp+0x20],rax
 100ede1:	call   0x100f370
 100ede6:	lea    r11,[rbp+0x22f0]
 100eded:	or     rax,0xffffffffffffffff
 100edf1:	inc    rax
 100edf4:	cmp    WORD PTR [r11+rax*2],si
 100edf9:	jne    0x100edf1
 100edfb:	lea    r8d,[rax+rax*1]
 100edff:	lea    r9,[rsp+0x40]
 100ee04:	lea    rdx,[rbp+0x22f0]
 100ee0b:	mov    rcx,rdi
 100ee0e:	mov    QWORD PTR [rsp+0x20],rsi
 100ee13:	call   QWORD PTR [rip+0xffffffffffff2267]        # 0x1001080
 100ee19:	call   QWORD PTR [rip+0xffffffffffff23f1]        # 0x1001210
 100ee1f:	lea    r8,[rip+0xffffffffffff48ea]        # 0x1003710
 100ee26:	lea    rcx,[rbp+0x22f0]
 100ee2d:	mov    r9d,eax
 100ee30:	mov    edx,0x400
 100ee35:	call   0x100f370
 100ee3a:	lea    r11,[rbp+0x22f0]
 100ee41:	or     rax,0xffffffffffffffff
 100ee45:	inc    rax
 100ee48:	cmp    WORD PTR [r11+rax*2],si
 100ee4d:	jne    0x100ee45
 100ee4f:	lea    r8d,[rax+rax*1]
 100ee53:	lea    r9,[rsp+0x40]
 100ee58:	lea    rdx,[rbp+0x22f0]
 100ee5f:	mov    rcx,rdi
 100ee62:	mov    QWORD PTR [rsp+0x20],rsi
 100ee67:	call   QWORD PTR [rip+0xffffffffffff2213]        # 0x1001080
 100ee6d:	lea    rdx,[rbp+0x20f0]
 100ee74:	mov    r8d,ebx
 100ee77:	xor    ecx,ecx
 100ee79:	call   QWORD PTR [rip+0xffffffffffff2321]        # 0x10011a0
 100ee7f:	test   eax,eax
 100ee81:	je     0x100eed8
 100ee83:	lea    r9,[rbp+0x20f0]
 100ee8a:	lea    r8,[rip+0xffffffffffff4897]        # 0x1003728
 100ee91:	lea    rcx,[rbp+0x22f0]
 100ee98:	mov    edx,0x400
 100ee9d:	call   0x100f370
 100eea2:	lea    r11,[rbp+0x22f0]
 100eea9:	or     rax,0xffffffffffffffff
 100eead:	nop    DWORD PTR [rax]
 100eeb0:	inc    rax
 100eeb3:	cmp    WORD PTR [r11+rax*2],si
 100eeb8:	jne    0x100eeb0
 100eeba:	lea    r8d,[rax+rax*1]
 100eebe:	lea    r9,[rsp+0x40]
 100eec3:	lea    rdx,[rbp+0x22f0]
 100eeca:	mov    rcx,rdi
 100eecd:	mov    QWORD PTR [rsp+0x20],rsi
 100eed2:	call   QWORD PTR [rip+0xffffffffffff21a8]        # 0x1001080
 100eed8:	lea    rcx,[rbp+0x1fd0]
 100eedf:	xor    edx,edx
 100eee1:	mov    r8d,0x11c
 100eee7:	call   0x100dcba
 100eeec:	lea    rcx,[rbp+0x1fd0]
 100eef3:	mov    DWORD PTR [rbp+0x1fd0],0x11c
 100eefd:	call   QWORD PTR [rip+0xffffffffffff228d]        # 0x1001190
 100ef03:	test   eax,eax
 100ef05:	je     0x100ef79
 100ef07:	mov    r9d,DWORD PTR [rbp+0x1fd4]
 100ef0e:	lea    rax,[rbp+0x1fe4]
 100ef15:	lea    r8,[rip+0xffffffffffff4834]        # 0x1003750
 100ef1c:	mov    QWORD PTR [rsp+0x30],rax
 100ef21:	mov    eax,DWORD PTR [rbp+0x1fdc]
 100ef27:	lea    rcx,[rbp+0x22f0]
 100ef2e:	mov    DWORD PTR [rsp+0x28],eax
 100ef32:	mov    eax,DWORD PTR [rbp+0x1fd8]
 100ef38:	mov    edx,0x400
 100ef3d:	mov    DWORD PTR [rsp+0x20],eax
 100ef41:	call   0x100f370
 100ef46:	lea    r11,[rbp+0x22f0]
 100ef4d:	or     rax,0xffffffffffffffff
 100ef51:	inc    rax
 100ef54:	cmp    WORD PTR [r11+rax*2],si
 100ef59:	jne    0x100ef51
 100ef5b:	lea    r8d,[rax+rax*1]
 100ef5f:	lea    r9,[rsp+0x40]
 100ef64:	lea    rdx,[rbp+0x22f0]
 100ef6b:	mov    rcx,rdi
 100ef6e:	mov    QWORD PTR [rsp+0x20],rsi
 100ef73:	call   QWORD PTR [rip+0xffffffffffff2107]        # 0x1001080
 100ef79:	lea    rcx,[rsp+0x60]
 100ef7e:	call   QWORD PTR [rip+0xffffffffffff2224]        # 0x10011a8
 100ef84:	movzx  r11d,WORD PTR [rsp+0x60]
 100ef8a:	lea    rcx,[rbp+0x20f0]
 100ef91:	lea    rax,[rbp+0x20f0]
 100ef98:	test   r11d,r11d
 100ef9b:	je     0x100f053
 100efa1:	cmp    r11d,0x6
 100efa5:	je     0x100f023
 100efa7:	cmp    r11d,0x9
 100efab:	je     0x100efee
 100efad:	lea    rdx,[rip+0xffffffffffff4814]        # 0x10037c8
 100efb4:	sub    rdx,rax
 100efb7:	nop    WORD PTR [rax+rax*1+0x0]
 100efc0:	lea    rax,[rbx+0x7fffff7e]
 100efc7:	test   rax,rax
 100efca:	je     0x100f083
 100efd0:	movzx  eax,WORD PTR [rdx+rcx*1]
 100efd4:	test   ax,ax
 100efd7:	je     0x100f083
 100efdd:	mov    WORD PTR [rcx],ax
 100efe0:	add    rcx,0x2
 100efe4:	dec    rbx
 100efe7:	jne    0x100efc0
 100efe9:	jmp    0x100f088
 100efee:	lea    rdx,[rip+0xffffffffffff47ab]        # 0x10037a0
 100eff5:	sub    rdx,rax
 100eff8:	nop    DWORD PTR [rax+rax*1+0x0]
 100f000:	lea    rax,[rbx+0x7fffff7e]
 100f007:	test   rax,rax
 100f00a:	je     0x100f083
 100f00c:	movzx  eax,WORD PTR [rdx+rcx*1]
 100f010:	test   ax,ax
 100f013:	je     0x100f083
 100f015:	mov    WORD PTR [rcx],ax
 100f018:	add    rcx,0x2
 100f01c:	dec    rbx
 100f01f:	jne    0x100f000
 100f021:	jmp    0x100f088
 100f023:	lea    rdx,[rip+0xffffffffffff4786]        # 0x10037b0
 100f02a:	sub    rdx,rax
 100f02d:	nop    DWORD PTR [rax]
 100f030:	lea    rax,[rbx+0x7fffff7e]
 100f037:	test   rax,rax
 100f03a:	je     0x100f083
 100f03c:	movzx  eax,WORD PTR [rdx+rcx*1]
 100f040:	test   ax,ax
 100f043:	je     0x100f083
 100f045:	mov    WORD PTR [rcx],ax
 100f048:	add    rcx,0x2
 100f04c:	dec    rbx
 100f04f:	jne    0x100f030
 100f051:	jmp    0x100f088
 100f053:	lea    rdx,[rip+0xffffffffffff4766]        # 0x10037c0
 100f05a:	sub    rdx,rax
 100f05d:	nop    DWORD PTR [rax]
 100f060:	lea    rax,[rbx+0x7fffff7e]
 100f067:	test   rax,rax
 100f06a:	je     0x100f083
 100f06c:	movzx  eax,WORD PTR [rdx+rcx*1]
 100f070:	test   ax,ax
 100f073:	je     0x100f083
 100f075:	mov    WORD PTR [rcx],ax
 100f078:	add    rcx,0x2
 100f07c:	dec    rbx
 100f07f:	jne    0x100f060
 100f081:	jmp    0x100f088
 100f083:	test   rbx,rbx
 100f086:	jne    0x100f08c
 100f088:	sub    rcx,0x2
 100f08c:	mov    WORD PTR [rcx],si
 100f08f:	mov    DWORD PTR [rsp+0x4c],esi
 100f093:	call   QWORD PTR [rip+0xffffffffffff2257]        # 0x10012f0
 100f099:	lea    rdx,[rsp+0x4c]
 100f09e:	mov    rcx,rax
 100f0a1:	call   QWORD PTR [rip+0xffffffffffff20e1]        # 0x1001188
 100f0a7:	cmp    DWORD PTR [rsp+0x4c],esi
 100f0ab:	mov    r9d,DWORD PTR [rbp-0x80]
 100f0af:	lea    rax,[rip+0xffffffffffff472a]        # 0x10037e0
 100f0b6:	lea    rdx,[rip+0xffffffffffff473b]        # 0x10037f8
 100f0bd:	lea    rcx,[rip+0xffffffffffff2cd4]        # 0x1001d98
 100f0c4:	cmovne rcx,rax
 100f0c8:	cmp    r9d,0x1
 100f0cc:	lea    rax,[rip+0xffffffffffff473d]        # 0x1003810
 100f0d3:	cmova  rax,rdx
 100f0d7:	mov    QWORD PTR [rsp+0x30],rcx
 100f0dc:	lea    r8,[rip+0xffffffffffff4745]        # 0x1003828
 100f0e3:	mov    QWORD PTR [rsp+0x28],rax
 100f0e8:	lea    rax,[rbp+0x20f0]
 100f0ef:	lea    rcx,[rbp+0x22f0]
 100f0f6:	mov    edx,0x400
 100f0fb:	mov    QWORD PTR [rsp+0x20],rax
 100f100:	call   0x100f370
 100f105:	lea    r11,[rbp+0x22f0]
 100f10c:	or     rax,0xffffffffffffffff
 100f110:	inc    rax
 100f113:	cmp    WORD PTR [r11+rax*2],si
 100f118:	jne    0x100f110
 100f11a:	lea    r8d,[rax+rax*1]
 100f11e:	lea    r9,[rsp+0x40]
 100f123:	lea    rdx,[rbp+0x22f0]
 100f12a:	mov    rcx,rdi
 100f12d:	mov    QWORD PTR [rsp+0x20],rsi
 100f132:	call   QWORD PTR [rip+0xffffffffffff1f48]        # 0x1001080
 100f138:	lea    rcx,[rbp+0x1f90]
 100f13f:	call   QWORD PTR [rip+0xffffffffffff206b]        # 0x10011b0
 100f145:	mov    r11,QWORD PTR [rbp+0x1fa8]
 100f14c:	mov    rdx,QWORD PTR [rbp+0x1fb0]
 100f153:	mov    rcx,QWORD PTR [rbp+0x1f98]
 100f15a:	mov    rax,QWORD PTR [rbp+0x1fa0]
 100f161:	mov    r9d,DWORD PTR [rbp+0x1f94]
 100f168:	shr    rdx,0x14
 100f16c:	shr    rcx,0x14
 100f170:	shr    r11,0x14
 100f174:	mov    QWORD PTR [rsp+0x38],r11
 100f179:	mov    QWORD PTR [rsp+0x30],rdx
 100f17e:	mov    QWORD PTR [rsp+0x28],rcx
 100f183:	shr    rax,0x14
 100f187:	lea    rcx,[rbp+0x22f0]
 100f18e:	lea    r8,[rip+0xffffffffffff46cb]        # 0x1003860
 100f195:	mov    edx,0x400
 100f19a:	mov    QWORD PTR [rsp+0x20],rax
 100f19f:	call   0x100f370
 100f1a4:	lea    r11,[rbp+0x22f0]
 100f1ab:	or     rax,0xffffffffffffffff
 100f1af:	nop
 100f1b0:	inc    rax
 100f1b3:	cmp    WORD PTR [r11+rax*2],si
 100f1b8:	jne    0x100f1b0
 100f1ba:	lea    r8d,[rax+rax*1]
 100f1be:	lea    r9,[rsp+0x40]
 100f1c3:	lea    rdx,[rbp+0x22f0]
 100f1ca:	mov    rcx,rdi
 100f1cd:	mov    QWORD PTR [rsp+0x20],rsi
 100f1d2:	call   QWORD PTR [rip+0xffffffffffff1ea8]        # 0x1001080
 100f1d8:	mov    DWORD PTR [rsp+0x48],esi
 100f1dc:	call   QWORD PTR [rip+0xffffffffffff210e]        # 0x10012f0
 100f1e2:	lea    r9,[rsp+0x48]
 100f1e7:	lea    rdx,[rbp-0x70]
 100f1eb:	mov    rcx,rax
 100f1ee:	mov    r8d,0x400
 100f1f4:	call   0x100e5b8
 100f1f9:	test   eax,eax
 100f1fb:	je     0x100f33c
 100f201:	mov    eax,DWORD PTR [rsp+0x48]
 100f205:	mov    ecx,0x2000
 100f20a:	mov    rbx,rsi
 100f20d:	cmp    eax,ecx
 100f20f:	cmova  eax,ecx
 100f212:	mov    DWORD PTR [rsp+0x48],eax
 100f216:	test   rax,0xfffffffffffffff8
 100f21c:	jbe    0x100f33c
 100f222:	call   QWORD PTR [rip+0xffffffffffff20c8]        # 0x10012f0
 100f228:	mov    rdx,QWORD PTR [rbp+rbx*8-0x70]
 100f22d:	lea    r8,[rbp+0x2af0]
 100f234:	mov    rcx,rax
 100f237:	mov    r9d,0x104
 100f23d:	call   0x100e5c4
 100f242:	test   eax,eax
 100f244:	je     0x100f328
 100f24a:	lea    r9,[rbp+0x2d00]
 100f251:	lea    rcx,[rbp+0x2af0]
 100f258:	xor    edx,edx
 100f25a:	mov    r8d,0x400
 100f260:	mov    QWORD PTR [rsp+0x50],rsi
 100f265:	call   0x1014df0
 100f26a:	test   eax,eax
 100f26c:	je     0x100f2d7
 100f26e:	lea    r9,[rsp+0x58]
 100f273:	lea    r8,[rsp+0x50]
 100f278:	lea    rdx,[rip+0xffffffffffff2a49]        # 0x1001cc8
 100f27f:	lea    rcx,[rbp+0x2d00]
 100f286:	call   0x1014dfc
 100f28b:	test   eax,eax
 100f28d:	je     0x100f2d7
 100f28f:	mov    rcx,QWORD PTR [rsp+0x50]
 100f294:	lea    r9,[rbp+0x2af0]
 100f29b:	movzx  edx,WORD PTR [rcx+0x14]
 100f29f:	movzx  r8d,WORD PTR [rcx+0x16]
 100f2a4:	movzx  eax,WORD PTR [rcx+0x10]
 100f2a8:	movzx  ecx,WORD PTR [rcx+0x12]
 100f2ac:	mov    DWORD PTR [rsp+0x38],edx
 100f2b0:	mov    DWORD PTR [rsp+0x30],r8d
 100f2b5:	mov    DWORD PTR [rsp+0x28],eax
 100f2b9:	mov    DWORD PTR [rsp+0x20],ecx
 100f2bd:	lea    r8,[rip+0xffffffffffff463c]        # 0x1003900
 100f2c4:	lea    rcx,[rbp+0x22f0]
 100f2cb:	mov    edx,0x400
 100f2d0:	call   0x100f370
 100f2d5:	jmp    0x100f2f6
 100f2d7:	lea    r9,[rbp+0x2af0]
 100f2de:	lea    r8,[rip+0xffffffffffff466b]        # 0x1003950
 100f2e5:	lea    rcx,[rbp+0x22f0]
 100f2ec:	mov    edx,0x400
 100f2f1:	call   0x100f370
 100f2f6:	lea    rcx,[rbp+0x22f0]
 100f2fd:	or     rax,0xffffffffffffffff
 100f301:	inc    rax
 100f304:	cmp    WORD PTR [rcx+rax*2],si
 100f308:	jne    0x100f301
 100f30a:	lea    r8d,[rax+rax*1]
 100f30e:	lea    r9,[rsp+0x40]
 100f313:	lea    rdx,[rbp+0x22f0]
 100f31a:	mov    rcx,rdi
 100f31d:	mov    QWORD PTR [rsp+0x20],rsi
 100f322:	call   QWORD PTR [rip+0xffffffffffff1d58]        # 0x1001080
 100f328:	mov    eax,DWORD PTR [rsp+0x48]
 100f32c:	inc    rbx
 100f32f:	shr    rax,0x3
 100f333:	cmp    rbx,rax
 100f336:	jb     0x100f222
 100f33c:	mov    rcx,QWORD PTR [rbp+0x3100]
 100f343:	xor    rcx,rsp
 100f346:	call   0x100daf0
 100f34b:	lea    r11,[rsp+0x3210]
 100f353:	mov    rbx,QWORD PTR [r11+0x18]
 100f357:	mov    rsi,QWORD PTR [r11+0x20]
 100f35b:	mov    rdi,QWORD PTR [r11+0x28]
 100f35f:	mov    rsp,r11
 100f362:	pop    rbp
 100f363:	ret    
 100f364:	int3   
 100f365:	int3   
 100f366:	int3   
 100f367:	int3   
 100f368:	int3   
 100f369:	int3   
 100f36a:	int3   
 100f36b:	int3   
 100f36c:	int3   
 100f36d:	int3   
 100f36e:	int3   
 100f36f:	int3   
 100f370:	mov    QWORD PTR [rsp+0x18],r8
 100f375:	mov    QWORD PTR [rsp+0x20],r9
 100f37a:	push   rbx
 100f37b:	push   rsi
 100f37c:	sub    rsp,0x28
 100f380:	xor    ebx,ebx
 100f382:	mov    rsi,rcx
 100f385:	mov    eax,ebx
 100f387:	test   rdx,rdx
 100f38a:	je     0x100f395
 100f38c:	cmp    rdx,0x7fffffff
 100f393:	jbe    0x100f39a
 100f395:	mov    eax,0x80070057
 100f39a:	test   eax,eax
 100f39c:	js     0x100f3e4
 100f39e:	mov    QWORD PTR [rsp+0x20],rdi
 100f3a3:	lea    rdi,[rdx-0x1]
 100f3a7:	lea    r9,[rsp+0x58]
 100f3ac:	mov    rdx,rdi
 100f3af:	call   QWORD PTR [rip+0xffffffffffff21b3]        # 0x1001568
 100f3b5:	test   eax,eax
 100f3b7:	js     0x100f3d4
 100f3b9:	cdqe   
 100f3bb:	cmp    rax,rdi
 100f3be:	ja     0x100f3d4
 100f3c0:	jne    0x100f3dd
 100f3c2:	mov    WORD PTR [rsi+rdi*2],bx
 100f3c6:	mov    rdi,QWORD PTR [rsp+0x20]
 100f3cb:	mov    eax,ebx
 100f3cd:	add    rsp,0x28
 100f3d1:	pop    rsi
 100f3d2:	pop    rbx
 100f3d3:	ret    
 100f3d4:	mov    WORD PTR [rsi+rdi*2],bx
 100f3d8:	mov    ebx,0x8007007a
 100f3dd:	mov    rdi,QWORD PTR [rsp+0x20]
 100f3e2:	mov    eax,ebx
 100f3e4:	add    rsp,0x28
 100f3e8:	pop    rsi
 100f3e9:	pop    rbx
 100f3ea:	ret    
 100f3eb:	int3   
 100f3ec:	int3   
 100f3ed:	int3   
 100f3ee:	int3   
 100f3ef:	int3   
 100f3f0:	int3   
 100f3f1:	int3   
 100f3f2:	int3   
 100f3f3:	int3   
 100f3f4:	int3   
 100f3f5:	int3   
 100f3f6:	int3   
 100f3f7:	int3   
 100f3f8:	int3   
 100f3f9:	int3   
 100f3fa:	int3   
 100f3fb:	int3   
 100f3fc:	int3   
 100f3fd:	int3   
 100f3fe:	int3   
 100f3ff:	int3   
 100f400:	sub    rsp,0x28
 100f404:	call   0x100f8b0
 100f409:	test   eax,eax
 100f40b:	je     0x100f417
 100f40d:	mov    eax,0x1e
 100f412:	add    rsp,0x28
 100f416:	ret    
 100f417:	mov    rax,QWORD PTR [rip+0xc762]        # 0x101bb80
 100f41e:	mov    QWORD PTR [rsp+0x20],rbx
 100f423:	xor    ebx,ebx
 100f425:	test   rax,rax
 100f428:	jne    0x100f45e
 100f42a:	call   0x100f9d0
 100f42f:	mov    rcx,QWORD PTR [rip+0xc742]        # 0x101bb78
 100f436:	test   rcx,rcx
 100f439:	je     0x100f44a
 100f43b:	lea    rdx,[rip+0xffffffffffff457e]        # 0x10039c0
 100f442:	call   QWORD PTR [rip+0xffffffffffff1f40]        # 0x1001388
 100f448:	jmp    0x100f44d
 100f44a:	mov    rax,rbx
 100f44d:	mov    QWORD PTR [rip+0xc72c],rax        # 0x101bb80
 100f454:	test   rax,rax
 100f457:	jne    0x100f45e
 100f459:	or     eax,0xffffffff
 100f45c:	jmp    0x100f46b
 100f45e:	xor    edx,edx
 100f460:	mov    r8d,0x98765432
 100f466:	lea    ecx,[rdx+0xa]
 100f469:	call   rax
 100f46b:	sub    eax,0x2
 100f46e:	je     0x100f4af
 100f470:	dec    eax
 100f472:	je     0x100f49e
 100f474:	dec    eax
 100f476:	je     0x100f48d
 100f478:	dec    eax
 100f47a:	jne    0x100f4b4
 100f47c:	mov    ebx,0x5
 100f481:	mov    eax,ebx
 100f483:	mov    rbx,QWORD PTR [rsp+0x20]
 100f488:	add    rsp,0x28
 100f48c:	ret    
 100f48d:	mov    ebx,0x1e
 100f492:	mov    eax,ebx
 100f494:	mov    rbx,QWORD PTR [rsp+0x20]
 100f499:	add    rsp,0x28
 100f49d:	ret    
 100f49e:	mov    ebx,0x14
 100f4a3:	mov    eax,ebx
 100f4a5:	mov    rbx,QWORD PTR [rsp+0x20]
 100f4aa:	add    rsp,0x28
 100f4ae:	ret    
 100f4af:	mov    ebx,0xa
 100f4b4:	mov    eax,ebx
 100f4b6:	mov    rbx,QWORD PTR [rsp+0x20]
 100f4bb:	add    rsp,0x28
 100f4bf:	ret    
 100f4c0:	int3   
 100f4c1:	int3   
 100f4c2:	int3   
 100f4c3:	int3   
 100f4c4:	int3   
 100f4c5:	int3   
 100f4c6:	int3   
 100f4c7:	int3   
 100f4c8:	int3   
 100f4c9:	int3   
 100f4ca:	int3   
 100f4cb:	int3   
 100f4cc:	int3   
 100f4cd:	int3   
 100f4ce:	int3   
 100f4cf:	int3   
 100f4d0:	sub    rsp,0x28
 100f4d4:	mov    rax,QWORD PTR [rip+0xc6a5]        # 0x101bb80
 100f4db:	test   rax,rax
 100f4de:	jne    0x100f513
 100f4e0:	call   0x100f9d0
 100f4e5:	mov    rcx,QWORD PTR [rip+0xc68c]        # 0x101bb78
 100f4ec:	test   rcx,rcx
 100f4ef:	je     0x100f500
 100f4f1:	lea    rdx,[rip+0xffffffffffff44c8]        # 0x10039c0
 100f4f8:	call   QWORD PTR [rip+0xffffffffffff1e8a]        # 0x1001388
 100f4fe:	jmp    0x100f502
 100f500:	xor    eax,eax
 100f502:	mov    QWORD PTR [rip+0xc677],rax        # 0x101bb80
 100f509:	test   rax,rax
 100f50c:	jne    0x100f513
 100f50e:	or     eax,0xffffffff
 100f511:	jmp    0x100f520
 100f513:	xor    edx,edx
 100f515:	mov    r8d,0x98765432
 100f51b:	lea    ecx,[rdx+0xf]
 100f51e:	call   rax
 100f520:	sub    eax,0x2
 100f523:	je     0x100f556
 100f525:	dec    eax
 100f527:	je     0x100f54c
 100f529:	dec    eax
 100f52b:	je     0x100f542
 100f52d:	dec    eax
 100f52f:	je     0x100f538
 100f531:	xor    eax,eax
 100f533:	add    rsp,0x28
 100f537:	ret    
 100f538:	mov    eax,0x5
 100f53d:	add    rsp,0x28
 100f541:	ret    
 100f542:	mov    eax,0x1e
 100f547:	add    rsp,0x28
 100f54b:	ret    
 100f54c:	mov    eax,0x14
 100f551:	add    rsp,0x28
 100f555:	ret    
 100f556:	mov    eax,0xa
 100f55b:	add    rsp,0x28
 100f55f:	ret    
 100f560:	int3   
 100f561:	int3   
 100f562:	int3   
 100f563:	int3   
 100f564:	int3   
 100f565:	int3   
 100f566:	int3   
 100f567:	int3   
 100f568:	int3   
 100f569:	int3   
 100f56a:	int3   
 100f56b:	int3   
 100f56c:	int3   
 100f56d:	int3   
 100f56e:	int3   
 100f56f:	int3   
 100f570:	sub    rsp,0x28
 100f574:	mov    rax,QWORD PTR [rip+0xc605]        # 0x101bb80
 100f57b:	test   rax,rax
 100f57e:	jne    0x100f5b3
 100f580:	call   0x100f9d0
 100f585:	mov    rcx,QWORD PTR [rip+0xc5ec]        # 0x101bb78
 100f58c:	test   rcx,rcx
 100f58f:	je     0x100f5a0
 100f591:	lea    rdx,[rip+0xffffffffffff4428]        # 0x10039c0
 100f598:	call   QWORD PTR [rip+0xffffffffffff1dea]        # 0x1001388
 100f59e:	jmp    0x100f5a2
 100f5a0:	xor    eax,eax
 100f5a2:	mov    QWORD PTR [rip+0xc5d7],rax        # 0x101bb80
 100f5a9:	test   rax,rax
 100f5ac:	jne    0x100f5b3
 100f5ae:	or     eax,0xffffffff
 100f5b1:	jmp    0x100f5c0
 100f5b3:	xor    edx,edx
 100f5b5:	mov    r8d,0x98765432
 100f5bb:	lea    ecx,[rdx+0xb]
 100f5be:	call   rax
 100f5c0:	sub    eax,0x2
 100f5c3:	je     0x100f5f6
 100f5c5:	dec    eax
 100f5c7:	je     0x100f5ec
 100f5c9:	dec    eax
 100f5cb:	je     0x100f5e2
 100f5cd:	dec    eax
 100f5cf:	je     0x100f5d8
 100f5d1:	xor    eax,eax
 100f5d3:	add    rsp,0x28
 100f5d7:	ret    
 100f5d8:	mov    eax,0x5
 100f5dd:	add    rsp,0x28
 100f5e1:	ret    
 100f5e2:	mov    eax,0x1e
 100f5e7:	add    rsp,0x28
 100f5eb:	ret    
 100f5ec:	mov    eax,0x14
 100f5f1:	add    rsp,0x28
 100f5f5:	ret    
 100f5f6:	mov    eax,0xa
 100f5fb:	add    rsp,0x28
 100f5ff:	ret    
 100f600:	int3   
 100f601:	int3   
 100f602:	int3   
 100f603:	int3   
 100f604:	int3   
 100f605:	int3   
 100f606:	int3   
 100f607:	int3   
 100f608:	int3   
 100f609:	int3   
 100f60a:	int3   
 100f60b:	int3   
 100f60c:	int3   
 100f60d:	int3   
 100f60e:	int3   
 100f60f:	int3   
 100f610:	mov    QWORD PTR [rsp+0x8],rbx
 100f615:	mov    QWORD PTR [rsp+0x10],rsi
 100f61a:	mov    QWORD PTR [rsp+0x18],rdi
 100f61f:	mov    QWORD PTR [rsp+0x20],r14
 100f624:	push   rbp
 100f625:	lea    rbp,[rsp-0x390]
 100f62d:	sub    rsp,0x490
 100f634:	mov    rax,QWORD PTR [rip+0xbba5]        # 0x101b1e0
 100f63b:	xor    rax,rsp
 100f63e:	mov    QWORD PTR [rbp+0x380],rax
 100f645:	mov    rax,QWORD PTR [rip+0xffffffffffff438c]        # 0x10039d8
 100f64c:	lea    rcx,[rip+0xffffffffffff434d]        # 0x10039a0
 100f653:	xor    r14d,r14d
 100f656:	mov    QWORD PTR [rsp+0x50],rax
 100f65b:	mov    rax,QWORD PTR [rip+0xffffffffffff437e]        # 0x10039e0
 100f662:	mov    ebx,r14d
 100f665:	mov    QWORD PTR [rsp+0x58],rax
 100f66a:	call   QWORD PTR [rip+0xffffffffffff1d00]        # 0x1001370
 100f670:	lea    rdx,[rip+0xffffffffffff4371]        # 0x10039e8
 100f677:	mov    rcx,rax
 100f67a:	call   QWORD PTR [rip+0xffffffffffff1d08]        # 0x1001388
 100f680:	lea    edi,[r14+0x1]
 100f684:	mov    DWORD PTR [rsp+0x44],r14d
 100f689:	mov    rsi,rax
 100f68c:	test   rax,rax
 100f68f:	je     0x100f6b6
 100f691:	call   QWORD PTR [rip+0xffffffffffff1c59]        # 0x10012f0
 100f697:	lea    rdx,[rsp+0x44]
 100f69c:	mov    rcx,rax
 100f69f:	call   rsi
 100f6a1:	test   eax,eax
 100f6a3:	je     0x100f6b6
 100f6a5:	cmp    DWORD PTR [rsp+0x44],ebx
 100f6a9:	mov    edi,0x101
 100f6ae:	mov    eax,0x201
 100f6b3:	cmovne edi,eax
 100f6b6:	lea    rax,[rsp+0x48]
 100f6bb:	lea    rdx,[rip+0xffffffffffff433e]        # 0x1003a00
 100f6c2:	mov    r9d,edi
 100f6c5:	xor    r8d,r8d
 100f6c8:	mov    rcx,0xffffffff80000002
 100f6cf:	mov    QWORD PTR [rsp+0x20],rax
 100f6d4:	call   QWORD PTR [rip+0xffffffffffff192e]        # 0x1001008
 100f6da:	test   eax,eax
 100f6dc:	jne    0x100f86c
 100f6e2:	mov    rcx,QWORD PTR [rsp+0x48]
 100f6e7:	mov    QWORD PTR [rsp+0x38],r14
 100f6ec:	mov    QWORD PTR [rsp+0x30],r14
 100f6f1:	lea    r9,[rsp+0x40]
 100f6f6:	lea    r8,[rsp+0x60]
 100f6fb:	xor    edx,edx
 100f6fd:	mov    QWORD PTR [rsp+0x28],r14
 100f702:	mov    edi,r14d
 100f705:	mov    DWORD PTR [rsp+0x40],0x104
 100f70d:	mov    QWORD PTR [rsp+0x20],r14
 100f712:	call   QWORD PTR [rip+0xffffffffffff1908]        # 0x1001020
 100f718:	test   eax,eax
 100f71a:	jne    0x100f86c
 100f720:	mov    rcx,QWORD PTR [rsp+0x48]
 100f725:	lea    rax,[rsp+0x40]
 100f72a:	lea    rdx,[rsp+0x60]
 100f72f:	mov    QWORD PTR [rsp+0x28],rax
 100f734:	lea    rax,[rbp+0x170]
 100f73b:	xor    r9d,r9d
 100f73e:	xor    r8d,r8d
 100f741:	mov    DWORD PTR [rsp+0x40],0x208
 100f749:	mov    QWORD PTR [rsp+0x20],rax
 100f74e:	call   QWORD PTR [rip+0xffffffffffff18bc]        # 0x1001010
 100f754:	test   eax,eax
 100f756:	jne    0x100f82f
 100f75c:	lea    r8d,[rax+0x8]
 100f760:	lea    rdx,[rsp+0x50]
 100f765:	lea    rcx,[rbp+0x170]
 100f76c:	call   QWORD PTR [rip+0xffffffffffff1e16]        # 0x1001588
 100f772:	test   eax,eax
 100f774:	jne    0x100f82f
 100f77a:	mov    rax,QWORD PTR [rip+0xc3ff]        # 0x101bb80
 100f781:	test   rax,rax
 100f784:	jne    0x100f7ba
 100f786:	call   0x100f9d0
 100f78b:	mov    rcx,QWORD PTR [rip+0xc3e6]        # 0x101bb78
 100f792:	test   rcx,rcx
 100f795:	je     0x100f7a6
 100f797:	lea    rdx,[rip+0xffffffffffff4222]        # 0x10039c0
 100f79e:	call   QWORD PTR [rip+0xffffffffffff1be4]        # 0x1001388
 100f7a4:	jmp    0x100f7a9
 100f7a6:	mov    rax,r14
 100f7a9:	mov    QWORD PTR [rip+0xc3d0],rax        # 0x101bb80
 100f7b0:	test   rax,rax
 100f7b3:	jne    0x100f7ba
 100f7b5:	or     eax,0xffffffff
 100f7b8:	jmp    0x100f7c9
 100f7ba:	lea    rdx,[rsp+0x60]
 100f7bf:	mov    r8d,0x98765432
 100f7c5:	xor    ecx,ecx
 100f7c7:	call   rax
 100f7c9:	mov    ecx,eax
 100f7cb:	sub    ecx,0x2
 100f7ce:	je     0x100f7f6
 100f7d0:	dec    ecx
 100f7d2:	je     0x100f7ef
 100f7d4:	dec    ecx
 100f7d6:	je     0x100f7e8
 100f7d8:	dec    ecx
 100f7da:	je     0x100f7e1
 100f7dc:	mov    ecx,r14d
 100f7df:	jmp    0x100f7fb
 100f7e1:	mov    ecx,0x5
 100f7e6:	jmp    0x100f7fb
 100f7e8:	mov    ecx,0x1e
 100f7ed:	jmp    0x100f7fb
 100f7ef:	mov    ecx,0x14
 100f7f4:	jmp    0x100f7fb
 100f7f6:	mov    ecx,0xa
 100f7fb:	cmp    ecx,ebx
 100f7fd:	jle    0x100f82f
 100f7ff:	sub    eax,0x2
 100f802:	je     0x100f82a
 100f804:	dec    eax
 100f806:	je     0x100f823
 100f808:	dec    eax
 100f80a:	je     0x100f81c
 100f80c:	dec    eax
 100f80e:	je     0x100f815
 100f810:	mov    ebx,r14d
 100f813:	jmp    0x100f82f
 100f815:	mov    ebx,0x5
 100f81a:	jmp    0x100f82f
 100f81c:	mov    ebx,0x1e
 100f821:	jmp    0x100f82f
 100f823:	mov    ebx,0x14
 100f828:	jmp    0x100f82f
 100f82a:	mov    ebx,0xa
 100f82f:	mov    rcx,QWORD PTR [rsp+0x48]
 100f834:	mov    QWORD PTR [rsp+0x38],r14
 100f839:	mov    QWORD PTR [rsp+0x30],r14
 100f83e:	inc    edi
 100f840:	lea    r9,[rsp+0x40]
 100f845:	lea    r8,[rsp+0x60]
 100f84a:	mov    edx,edi
 100f84c:	mov    QWORD PTR [rsp+0x28],r14
 100f851:	mov    DWORD PTR [rsp+0x40],0x104
 100f859:	mov    QWORD PTR [rsp+0x20],r14
 100f85e:	call   QWORD PTR [rip+0xffffffffffff17bc]        # 0x1001020
 100f864:	test   eax,eax
 100f866:	je     0x100f720
 100f86c:	mov    rcx,QWORD PTR [rsp+0x48]
 100f871:	test   rcx,rcx
 100f874:	je     0x100f87c
 100f876:	call   QWORD PTR [rip+0xffffffffffff1784]        # 0x1001000
 100f87c:	mov    eax,ebx
 100f87e:	mov    rcx,QWORD PTR [rbp+0x380]
 100f885:	xor    rcx,rsp
 100f888:	call   0x100daf0
 100f88d:	lea    r11,[rsp+0x490]
 100f895:	mov    rbx,QWORD PTR [r11+0x10]
 100f899:	mov    rsi,QWORD PTR [r11+0x18]
 100f89d:	mov    rdi,QWORD PTR [r11+0x20]
 100f8a1:	mov    r14,QWORD PTR [r11+0x28]
 100f8a5:	mov    rsp,r11
 100f8a8:	pop    rbp
 100f8a9:	ret    
 100f8aa:	int3   
 100f8ab:	int3   
 100f8ac:	int3   
 100f8ad:	int3   
 100f8ae:	int3   
 100f8af:	int3   
 100f8b0:	rex push rbx
 100f8b2:	sub    rsp,0x250
 100f8b9:	mov    rax,QWORD PTR [rip+0xb920]        # 0x101b1e0
 100f8c0:	xor    rax,rsp
 100f8c3:	mov    QWORD PTR [rsp+0x240],rax
 100f8cb:	lea    rdx,[rsp+0x30]
 100f8d0:	mov    r8d,0x105
 100f8d6:	xor    ecx,ecx
 100f8d8:	call   QWORD PTR [rip+0xffffffffffff18c2]        # 0x10011a0
 100f8de:	test   eax,eax
 100f8e0:	je     0x100f9a5
 100f8e6:	xor    eax,eax
 100f8e8:	lea    rcx,[rsp+0x30]
 100f8ed:	lea    edx,[rax+0x5c]
 100f8f0:	mov    WORD PTR [rsp+0x238],ax
 100f8f8:	call   QWORD PTR [rip+0xffffffffffff1c92]        # 0x1001590
 100f8fe:	mov    rbx,rax
 100f901:	test   rax,rax
 100f904:	jne    0x100f90d
 100f906:	lea    rbx,[rsp+0x30]
 100f90b:	jmp    0x100f911
 100f90d:	add    rbx,0x2
 100f911:	or     r9d,0xffffffff
 100f915:	lea    rax,[rip+0xffffffffffff4194]        # 0x1003ab0
 100f91c:	mov    r8,rbx
 100f91f:	lea    edx,[r9+0x2]
 100f923:	mov    ecx,0x409
 100f928:	mov    DWORD PTR [rsp+0x28],0xffffffff
 100f930:	mov    QWORD PTR [rsp+0x20],rax
 100f935:	call   QWORD PTR [rip+0xffffffffffff183d]        # 0x1001178
 100f93b:	cmp    eax,0x2
 100f93e:	je     0x100f99e
 100f940:	or     r9d,0xffffffff
 100f944:	lea    rax,[rip+0xffffffffffff418d]        # 0x1003ad8
 100f94b:	mov    r8,rbx
 100f94e:	lea    edx,[r9+0x2]
 100f952:	mov    ecx,0x409
 100f957:	mov    DWORD PTR [rsp+0x28],0xffffffff
 100f95f:	mov    QWORD PTR [rsp+0x20],rax
 100f964:	call   QWORD PTR [rip+0xffffffffffff180e]        # 0x1001178
 100f96a:	cmp    eax,0x2
 100f96d:	je     0x100f99e
 100f96f:	lea    rdx,[rip+0xffffffffffff417a]        # 0x1003af0
 100f976:	or     r9d,0xffffffff
 100f97a:	mov    DWORD PTR [rsp+0x28],0xffffffff
 100f982:	mov    QWORD PTR [rsp+0x20],rdx
 100f987:	lea    edx,[r9+0x2]
 100f98b:	mov    r8,rbx
 100f98e:	mov    ecx,0x409
 100f993:	call   QWORD PTR [rip+0xffffffffffff17df]        # 0x1001178
 100f999:	cmp    eax,0x2
 100f99c:	jne    0x100f9a5
 100f99e:	mov    eax,0x1
 100f9a3:	jmp    0x100f9a7
 100f9a5:	xor    eax,eax
 100f9a7:	mov    rcx,QWORD PTR [rsp+0x240]
 100f9af:	xor    rcx,rsp
 100f9b2:	call   0x100daf0
 100f9b7:	add    rsp,0x250
 100f9be:	pop    rbx
 100f9bf:	ret    
 100f9c0:	int3   
 100f9c1:	int3   
 100f9c2:	int3   
 100f9c3:	int3   
 100f9c4:	int3   
 100f9c5:	int3   
 100f9c6:	int3   
 100f9c7:	int3   
 100f9c8:	int3   
 100f9c9:	int3   
 100f9ca:	int3   
 100f9cb:	int3   
 100f9cc:	int3   
 100f9cd:	int3   
 100f9ce:	int3   
 100f9cf:	int3   
 100f9d0:	sub    rsp,0x258
 100f9d7:	mov    rax,QWORD PTR [rip+0xb802]        # 0x101b1e0
 100f9de:	xor    rax,rsp
 100f9e1:	mov    QWORD PTR [rsp+0x240],rax
 100f9e9:	cmp    QWORD PTR [rip+0xc187],0x0        # 0x101bb78
 100f9f1:	jne    0x100fa8c
 100f9f7:	xor    eax,eax
 100f9f9:	mov    QWORD PTR [rsp+0x250],rbx
 100fa01:	mov    ebx,0x105
 100fa06:	mov    DWORD PTR [rsp+0x20],ebx
 100fa0a:	mov    WORD PTR [rsp+0x30],ax
 100fa0f:	call   0x100ffb0
 100fa14:	test   eax,eax
 100fa16:	je     0x100fa84
 100fa18:	lea    r9,[rsp+0x20]
 100fa1d:	lea    r8,[rsp+0x30]
 100fa22:	lea    rdx,[rip+0xffffffffffff406f]        # 0x1003a98
 100fa29:	lea    rcx,[rip+0xffffffffffff2368]        # 0x1001d98
 100fa30:	call   0x100ff98
 100fa35:	test   eax,eax
 100fa37:	je     0x100fa84
 100fa39:	lea    rcx,[rsp+0x30]
 100fa3e:	or     rax,0xffffffffffffffff
 100fa42:	inc    rax
 100fa45:	cmp    WORD PTR [rcx+rax*2],0x0
 100fa4a:	jne    0x100fa42
 100fa4c:	inc    eax
 100fa4e:	je     0x100fa84
 100fa50:	mov    ecx,eax
 100fa52:	mov    edx,0x106
 100fa57:	lea    r8,[rip+0xffffffffffff401a]        # 0x1003a78
 100fa5e:	sub    rbx,rcx
 100fa61:	sub    rdx,rcx
 100fa64:	lea    rcx,[rsp+0x30]
 100fa69:	mov    r9,rbx
 100fa6c:	call   QWORD PTR [rip+0xffffffffffff1b0e]        # 0x1001580
 100fa72:	lea    rcx,[rsp+0x30]
 100fa77:	call   QWORD PTR [rip+0xffffffffffff1703]        # 0x1001180
 100fa7d:	mov    QWORD PTR [rip+0xc0f4],rax        # 0x101bb78
 100fa84:	mov    rbx,QWORD PTR [rsp+0x250]
 100fa8c:	mov    rcx,QWORD PTR [rsp+0x240]
 100fa94:	xor    rcx,rsp
 100fa97:	call   0x100daf0
 100fa9c:	add    rsp,0x258
 100faa3:	ret    
 100faa4:	int3   
 100faa5:	int3   
 100faa6:	int3   
 100faa7:	int3   
 100faa8:	int3   
 100faa9:	int3   
 100faaa:	int3   
 100faab:	int3   
 100faac:	int3   
 100faad:	int3   
 100faae:	int3   
 100faaf:	int3   
 100fab0:	mov    rax,rsp
 100fab3:	push   rdi
 100fab4:	push   r12
 100fab6:	push   r13
 100fab8:	push   r14
 100faba:	push   r15
 100fabc:	sub    rsp,0x270
 100fac3:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 100facc:	mov    QWORD PTR [rax+0x10],rbx
 100fad0:	mov    QWORD PTR [rax+0x20],rsi
 100fad4:	mov    rax,QWORD PTR [rip+0xb705]        # 0x101b1e0
 100fadb:	xor    rax,rsp
 100fade:	mov    QWORD PTR [rsp+0x260],rax
 100fae6:	mov    QWORD PTR [rsp+0x30],r8
 100faeb:	mov    r15d,edx
 100faee:	mov    r14,rcx
 100faf1:	xor    esi,esi
 100faf3:	test   r8,r8
 100faf6:	je     0x100fafb
 100faf8:	mov    DWORD PTR [r8],esi
 100fafb:	mov    edi,esi
 100fafd:	mov    r13b,0x1
 100fb00:	mov    BYTE PTR [rsp+0x20],0x0
 100fb05:	mov    BYTE PTR [rsp+0x21],0x0
 100fb0a:	mov    BYTE PTR [rsp+0x28],r13b
 100fb0f:	mov    BYTE PTR [rsp+0x24],r13b
 100fb14:	movzx  r12d,r13b
 100fb18:	mov    DWORD PTR [rsp+0x2c],r12d
 100fb1d:	mov    ebx,0x1
 100fb22:	test   bl,dl
 100fb24:	je     0x100fb35
 100fb26:	test   rcx,rcx
 100fb29:	jne    0x100fb3a
 100fb2b:	mov    eax,0xc001f200
 100fb30:	jmp    0x100fea0
 100fb35:	test   rcx,rcx
 100fb38:	je     0x100fb42
 100fb3a:	call   QWORD PTR [rip+0xffffffffffff1740]        # 0x1001280
 100fb40:	mov    edi,eax
 100fb42:	mov    ebx,0x2
 100fb47:	test   bl,r15b
 100fb4a:	je     0x100fb5b
 100fb4c:	cmp    edi,0x1
 100fb4f:	jae    0x100fb5b
 100fb51:	mov    eax,0xc001f201
 100fb56:	jmp    0x100fea0
 100fb5b:	mov    ebx,0x4
 100fb60:	test   bl,r15b
 100fb63:	je     0x100fb89
 100fb65:	test   r14,r14
 100fb68:	je     0x100fb89
 100fb6a:	lea    rdx,[rip+0xffffffffffff3fbf]        # 0x1003b30
 100fb71:	mov    rcx,r14
 100fb74:	call   QWORD PTR [rip+0xffffffffffff1a1e]        # 0x1001598
 100fb7a:	test   rax,rax
 100fb7d:	je     0x100fb89
 100fb7f:	mov    eax,0xc001f202
 100fb84:	jmp    0x100fea0
 100fb89:	test   edi,edi
 100fb8b:	je     0x100fde5
 100fb91:	mov    r12d,edi
 100fb94:	cmp    r12,0x80
 100fb9b:	jbe    0x100fbbf
 100fb9d:	mov    QWORD PTR [rsp+0x40],rsi
 100fba2:	mov    eax,0x2
 100fba7:	mul    r12
 100fbaa:	mov    rcx,0xffffffffffffffff
 100fbb1:	cmovo  rax,rcx
 100fbb5:	mov    rcx,rax
 100fbb8:	call   0x100dcde
 100fbbd:	jmp    0x100fbc4
 100fbbf:	lea    rax,[rsp+0x48]
 100fbc4:	or     rcx,0xffffffffffffffff
 100fbc8:	mov    QWORD PTR [rsp+0x40],rax
 100fbcd:	cmp    r12,0x80
 100fbd4:	jbe    0x100fc01
 100fbd6:	mov    QWORD PTR [rsp+0x150],rsi
 100fbde:	mov    eax,0x2
 100fbe3:	mul    r12
 100fbe6:	cmovo  rax,rcx
 100fbea:	mov    rcx,rax
 100fbed:	call   0x100dcde
 100fbf2:	mov    QWORD PTR [rsp+0x150],rax
 100fbfa:	mov    rax,QWORD PTR [rsp+0x40]
 100fbff:	jmp    0x100fc11
 100fc01:	lea    rcx,[rsp+0x158]
 100fc09:	mov    QWORD PTR [rsp+0x150],rcx
 100fc11:	mov    r9,rax
 100fc14:	mov    r8d,edi
 100fc17:	mov    rdx,r14
 100fc1a:	mov    ecx,0x1
 100fc1f:	call   QWORD PTR [rip+0xffffffffffff154b]        # 0x1001170
 100fc25:	test   eax,eax
 100fc27:	jne    0x100fc74
 100fc29:	call   QWORD PTR [rip+0xffffffffffff1721]        # 0x1001350
 100fc2f:	mov    ebx,eax
 100fc31:	test   eax,eax
 100fc33:	jle    0x100fc3e
 100fc35:	movzx  ebx,ax
 100fc38:	or     ebx,0x80070000
 100fc3e:	lea    rax,[rsp+0x158]
 100fc46:	mov    rcx,QWORD PTR [rsp+0x150]
 100fc4e:	cmp    rcx,rax
 100fc51:	je     0x100fc59
 100fc53:	call   0x100da30
 100fc58:	nop
 100fc59:	lea    rax,[rsp+0x48]
 100fc5e:	mov    rcx,QWORD PTR [rsp+0x40]
 100fc63:	cmp    rcx,rax
 100fc66:	je     0x100fc6d
 100fc68:	call   0x100da30
 100fc6d:	mov    eax,ebx
 100fc6f:	jmp    0x100feb0
 100fc74:	mov    ecx,esi
 100fc76:	mov    rdx,QWORD PTR [rsp+0x40]
 100fc7b:	nop    DWORD PTR [rax+rax*1+0x0]
 100fc80:	cmp    ecx,edi
 100fc82:	jae    0x100fc96
 100fc84:	mov    eax,ecx
 100fc86:	test   BYTE PTR [rdx+rax*2],0x20
 100fc8a:	movzx  r13d,r13b
 100fc8e:	cmovne r13d,esi
 100fc92:	inc    ecx
 100fc94:	jmp    0x100fc80
 100fc96:	mov    r9,QWORD PTR [rsp+0x150]
 100fc9e:	mov    r8d,edi
 100fca1:	mov    rdx,r14
 100fca4:	mov    ecx,ebx
 100fca6:	call   QWORD PTR [rip+0xffffffffffff14c4]        # 0x1001170
 100fcac:	test   eax,eax
 100fcae:	jne    0x100fcfb
 100fcb0:	call   QWORD PTR [rip+0xffffffffffff169a]        # 0x1001350
 100fcb6:	mov    ebx,eax
 100fcb8:	test   eax,eax
 100fcba:	jle    0x100fcc5
 100fcbc:	movzx  ebx,ax
 100fcbf:	or     ebx,0x80070000
 100fcc5:	lea    rax,[rsp+0x158]
 100fccd:	mov    rcx,QWORD PTR [rsp+0x150]
 100fcd5:	cmp    rcx,rax
 100fcd8:	je     0x100fce0
 100fcda:	call   0x100da30
 100fcdf:	nop
 100fce0:	lea    rax,[rsp+0x48]
 100fce5:	mov    rcx,QWORD PTR [rsp+0x40]
 100fcea:	cmp    rcx,rax
 100fced:	je     0x100fcf4
 100fcef:	call   0x100da30
 100fcf4:	mov    eax,ebx
 100fcf6:	jmp    0x100feb0
 100fcfb:	mov    ecx,esi
 100fcfd:	mov    r10d,0x8000
 100fd03:	mov    r8,QWORD PTR [rsp+0x40]
 100fd08:	mov    r9,QWORD PTR [rsp+0x150]
 100fd10:	cmp    ecx,edi
 100fd12:	jae    0x100fd45
 100fd14:	mov    eax,ecx
 100fd16:	movzx  edx,WORD PTR [r9+rax*2]
 100fd1b:	test   r10w,dx
 100fd1f:	jne    0x100fd41
 100fd21:	test   BYTE PTR [r8+rax*2],0x4
 100fd26:	jne    0x100fd41
 100fd28:	test   dl,0x2
 100fd2b:	jne    0x100fd41
 100fd2d:	mov    edx,DWORD PTR [rsp+0x2c]
 100fd31:	movzx  edx,dl
 100fd34:	cmp    WORD PTR [r14+rax*2],0x5f
 100fd3a:	cmovne edx,esi
 100fd3d:	mov    DWORD PTR [rsp+0x2c],edx
 100fd41:	inc    ecx
 100fd43:	jmp    0x100fd10
 100fd45:	movzx  eax,WORD PTR [r8]
 100fd49:	test   al,0x8
 100fd4b:	jne    0x100fd51
 100fd4d:	test   al,0x40
 100fd4f:	je     0x100fd56
 100fd51:	mov    BYTE PTR [rsp+0x20],0x1
 100fd56:	lea    eax,[rdi-0x1]
 100fd59:	mov    ecx,eax
 100fd5b:	movzx  eax,WORD PTR [r8+rax*2]
 100fd60:	test   al,0x8
 100fd62:	jne    0x100fd68
 100fd64:	test   al,0x40
 100fd66:	je     0x100fd6d
 100fd68:	mov    BYTE PTR [rsp+0x21],0x1
 100fd6d:	movzx  ecx,WORD PTR [r9]
 100fd71:	movzx  eax,cx
 100fd74:	and    ax,r10w
 100fd78:	jne    0x100fd8b
 100fd7a:	test   cl,0x2
 100fd7d:	mov    edx,DWORD PTR [rsp+0x28]
 100fd81:	movzx  edx,dl
 100fd84:	cmove  edx,esi
 100fd87:	mov    DWORD PTR [rsp+0x28],edx
 100fd8b:	test   ax,ax
 100fd8e:	jne    0x100fda8
 100fd90:	test   cl,0x2
 100fd93:	jne    0x100fda8
 100fd95:	mov    eax,DWORD PTR [rsp+0x24]
 100fd99:	movzx  eax,al
 100fd9c:	cmp    WORD PTR [r14],0x5f
 100fda1:	cmovne eax,esi
 100fda4:	mov    DWORD PTR [rsp+0x24],eax
 100fda8:	lea    rax,[rsp+0x158]
 100fdb0:	cmp    r9,rax
 100fdb3:	je     0x100fdc2
 100fdb5:	mov    rcx,r9
 100fdb8:	call   0x100da30
 100fdbd:	mov    r8,QWORD PTR [rsp+0x40]
 100fdc2:	lea    rax,[rsp+0x48]
 100fdc7:	cmp    r8,rax
 100fdca:	je     0x100fdd4
 100fdcc:	mov    rcx,r8
 100fdcf:	call   0x100da30
 100fdd4:	mov    r12d,DWORD PTR [rsp+0x2c]
 100fdd9:	jmp    0x100fde5
 100fddb:	mov    eax,0x8007000e
 100fde0:	jmp    0x100feb0
 100fde5:	mov    ebx,0x8
 100fdea:	test   bl,r15b
 100fded:	je     0x100fdfe
 100fdef:	test   r13b,r13b
 100fdf2:	jne    0x100fdfe
 100fdf4:	mov    eax,0xc001f203
 100fdf9:	jmp    0x100fea0
 100fdfe:	mov    ebx,0x10
 100fe03:	test   bl,r15b
 100fe06:	je     0x100fe19
 100fe08:	cmp    BYTE PTR [rsp+0x20],0x0
 100fe0d:	je     0x100fe19
 100fe0f:	mov    eax,0xc001f204
 100fe14:	jmp    0x100fea0
 100fe19:	mov    ebx,0x20
 100fe1e:	test   bl,r15b
 100fe21:	je     0x100fe31
 100fe23:	cmp    BYTE PTR [rsp+0x21],0x0
 100fe28:	je     0x100fe31
 100fe2a:	mov    eax,0xc001f205
 100fe2f:	jmp    0x100fea0
 100fe31:	mov    ebx,0x40
 100fe36:	test   bl,r15b
 100fe39:	je     0x100fe49
 100fe3b:	cmp    BYTE PTR [rsp+0x28],0x0
 100fe40:	jne    0x100fe49
 100fe42:	mov    eax,0xc001f206
 100fe47:	jmp    0x100fea0
 100fe49:	mov    ebx,0x200
 100fe4e:	test   ebx,r15d
 100fe51:	je     0x100fe61
 100fe53:	cmp    BYTE PTR [rsp+0x24],0x0
 100fe58:	jne    0x100fe61
 100fe5a:	mov    eax,0xc001f207
 100fe5f:	jmp    0x100fea0
 100fe61:	mov    ebx,0x80
 100fe66:	test   r15b,r15b
 100fe69:	jns    0x100fe77
 100fe6b:	test   r12b,r12b
 100fe6e:	jne    0x100fe77
 100fe70:	mov    eax,0xc001f208
 100fe75:	jmp    0x100fea0
 100fe77:	mov    ebx,0x100
 100fe7c:	test   ebx,r15d
 100fe7f:	je     0x100feae
 100fe81:	test   r14,r14
 100fe84:	je     0x100feae
 100fe86:	lea    rdx,[rip+0xffffffffffff3cb3]        # 0x1003b40
 100fe8d:	mov    rcx,r14
 100fe90:	call   QWORD PTR [rip+0xffffffffffff1702]        # 0x1001598
 100fe96:	test   rax,rax
 100fe99:	je     0x100feae
 100fe9b:	mov    eax,0xc001f209
 100fea0:	mov    rcx,QWORD PTR [rsp+0x30]
 100fea5:	test   rcx,rcx
 100fea8:	je     0x100feb0
 100feaa:	mov    DWORD PTR [rcx],ebx
 100feac:	jmp    0x100feb0
 100feae:	xor    eax,eax
 100feb0:	mov    rcx,QWORD PTR [rsp+0x260]
 100feb8:	xor    rcx,rsp
 100febb:	call   0x100daf0
 100fec0:	lea    r11,[rsp+0x270]
 100fec8:	mov    rbx,QWORD PTR [r11+0x38]
 100fecc:	mov    rsi,QWORD PTR [r11+0x48]
 100fed0:	mov    rsp,r11
 100fed3:	pop    r15
 100fed5:	pop    r14
 100fed7:	pop    r13
 100fed9:	pop    r12
 100fedb:	pop    rdi
 100fedc:	ret    
 100fedd:	int3   
 100fede:	int3   
 100fedf:	int3   
 100fee0:	int3   
 100fee1:	int3   
 100fee2:	int3   
 100fee3:	int3   
 100fee4:	int3   
 100fee5:	int3   
 100fee6:	int3   
 100fee7:	int3   
 100fee8:	int3   
 100fee9:	int3   
 100feea:	int3   
 100feeb:	int3   
 100feec:	int3   
 100feed:	int3   
 100feee:	int3   
 100feef:	int3   
 100fef0:	sub    rsp,0x28
 100fef4:	mov    rdx,QWORD PTR [rcx]
 100fef7:	lea    rax,[rcx+0x8]
 100fefb:	cmp    rdx,rax
 100fefe:	je     0x100ff08
 100ff00:	mov    rcx,rdx
 100ff03:	call   0x100da30
 100ff08:	add    rsp,0x28
 100ff0c:	ret    
 100ff0d:	lea    rax,[rip+0xb3ac]        # 0x101b2c0
 100ff14:	jmp    0x100ff19
 100ff19:	mov    QWORD PTR [rsp+0x8],rcx
 100ff1e:	mov    QWORD PTR [rsp+0x10],rdx
 100ff23:	mov    QWORD PTR [rsp+0x18],r8
 100ff28:	mov    QWORD PTR [rsp+0x20],r9
 100ff2d:	sub    rsp,0x68
 100ff31:	movdqa XMMWORD PTR [rsp+0x20],xmm0
 100ff37:	movdqa XMMWORD PTR [rsp+0x30],xmm1
 100ff3d:	movdqa XMMWORD PTR [rsp+0x40],xmm2
 100ff43:	movdqa XMMWORD PTR [rsp+0x50],xmm3
 100ff49:	mov    rdx,rax
 100ff4c:	lea    rcx,[rip+0x937d]        # 0x10192d0
 100ff53:	call   0x1014a78
 100ff58:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
 100ff5e:	movdqa xmm1,XMMWORD PTR [rsp+0x30]
 100ff64:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
 100ff6a:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
 100ff70:	mov    rcx,QWORD PTR [rsp+0x70]
 100ff75:	mov    rdx,QWORD PTR [rsp+0x78]
 100ff7a:	mov    r8,QWORD PTR [rsp+0x80]
 100ff82:	mov    r9,QWORD PTR [rsp+0x88]
 100ff8a:	add    rsp,0x68
 100ff8e:	jmp    0x100ff90
 100ff90:	jmp    rax
 100ff92:	int3   
 100ff93:	int3   
 100ff94:	int3   
 100ff95:	int3   
 100ff96:	int3   
 100ff97:	int3   
 100ff98:	jmp    QWORD PTR [rip+0xb322]        # 0x101b2c0
 100ff9e:	int3   
 100ff9f:	int3   
 100ffa0:	int3   
 100ffa1:	int3   
 100ffa2:	int3   
 100ffa3:	int3   
 100ffa4:	int3   
 100ffa5:	int3   
 100ffa6:	int3   
 100ffa7:	int3   
 100ffa8:	int3   
 100ffa9:	int3   
 100ffaa:	int3   
 100ffab:	int3   
 100ffac:	int3   
 100ffad:	int3   
 100ffae:	int3   
 100ffaf:	int3   
 100ffb0:	sub    rsp,0x308
 100ffb7:	mov    rax,QWORD PTR [rip+0xb222]        # 0x101b1e0
 100ffbe:	xor    rax,rsp
 100ffc1:	mov    QWORD PTR [rsp+0x2f8],rax
 100ffc9:	mov    QWORD PTR [rsp+0x280],0x0
 100ffd5:	mov    DWORD PTR [rsp+0x250],0x104
 100ffe0:	mov    DWORD PTR [rsp+0x25c],0x0
 100ffeb:	mov    QWORD PTR [rsp+0x278],0x0
 100fff7:	mov    QWORD PTR [rsp+0x260],0x0
 1010003:	mov    QWORD PTR [rsp+0x268],0x0
 101000f:	mov    QWORD PTR [rsp+0x288],0x0
 101001b:	mov    DWORD PTR [rsp+0x258],0x0
 1010026:	mov    DWORD PTR [rsp+0x274],0x0
 1010031:	mov    DWORD PTR [rsp+0x254],0x409
 101003c:	lea    rax,[rsp+0x280]
 1010044:	mov    QWORD PTR [rsp+0x20],rax
 1010049:	mov    r9d,0x20019
 101004f:	xor    r8d,r8d
 1010052:	lea    rdx,[rip+0xffffffffffff3b67]        # 0x1003bc0
 1010059:	mov    rcx,0xffffffff80000002
 1010060:	call   0x1010c30
 1010065:	mov    DWORD PTR [rsp+0x270],eax
 101006c:	cmp    DWORD PTR [rsp+0x270],0x0
 1010074:	je     0x101007b
 1010076:	jmp    0x101076c
 101007b:	lea    rax,[rsp+0x250]
 1010083:	mov    QWORD PTR [rsp+0x28],rax
 1010088:	lea    rax,[rsp+0x40]
 101008d:	mov    QWORD PTR [rsp+0x20],rax
 1010092:	xor    r9d,r9d
 1010095:	xor    r8d,r8d
 1010098:	lea    rdx,[rip+0xffffffffffff39f9]        # 0x1003a98
 101009f:	mov    rcx,QWORD PTR [rsp+0x280]
 10100a7:	call   0x1010c70
 10100ac:	mov    DWORD PTR [rsp+0x270],eax
 10100b3:	cmp    DWORD PTR [rsp+0x270],0x0
 10100bb:	je     0x10100c2
 10100bd:	jmp    0x101076c
 10100c2:	lea    rcx,[rip+0xffffffffffff38d7]        # 0x10039a0
 10100c9:	call   QWORD PTR [rip+0xffffffffffff12a1]        # 0x1001370
 10100cf:	lea    rdx,[rip+0xffffffffffff3aca]        # 0x1003ba0
 10100d6:	mov    rcx,rax
 10100d9:	call   QWORD PTR [rip+0xffffffffffff12a9]        # 0x1001388
 10100df:	mov    QWORD PTR [rsp+0x268],rax
 10100e7:	lea    rcx,[rip+0xffffffffffff38b2]        # 0x10039a0
 10100ee:	call   QWORD PTR [rip+0xffffffffffff127c]        # 0x1001370
 10100f4:	lea    rdx,[rip+0xffffffffffff3a8d]        # 0x1003b88
 10100fb:	mov    rcx,rax
 10100fe:	call   QWORD PTR [rip+0xffffffffffff1284]        # 0x1001388
 1010104:	mov    QWORD PTR [rsp+0x288],rax
 101010c:	cmp    QWORD PTR [rsp+0x268],0x0
 1010115:	je     0x1010122
 1010117:	cmp    QWORD PTR [rsp+0x288],0x0
 1010120:	jne    0x1010132
 1010122:	mov    DWORD PTR [rsp+0x274],0x1
 101012d:	jmp    0x1010347
 1010132:	xor    edx,edx
 1010134:	xor    ecx,ecx
 1010136:	call   QWORD PTR [rsp+0x288]
 101013d:	mov    DWORD PTR [rsp+0x25c],eax
 1010144:	mov    eax,DWORD PTR [rsp+0x25c]
 101014b:	mov    DWORD PTR [rsp+0x250],eax
 1010152:	lea    rcx,[rsp+0x40]
 1010157:	call   QWORD PTR [rip+0xffffffffffff1123]        # 0x1001280
 101015d:	mov    ecx,DWORD PTR [rsp+0x250]
 1010164:	lea    eax,[rcx+rax*1+0x2]
 1010168:	mov    DWORD PTR [rsp+0x250],eax
 101016f:	cmp    QWORD PTR [rsp+0x278],0x0
 1010178:	je     0x101020f
 101017e:	mov    QWORD PTR [rsp+0x290],0x0
 101018a:	mov    eax,DWORD PTR [rsp+0x250]
 1010191:	shl    rax,1
 1010194:	mov    QWORD PTR [rsp+0x2c8],rax
 101019c:	call   QWORD PTR [rip+0xffffffffffff102e]        # 0x10011d0
 10101a2:	mov    rcx,QWORD PTR [rsp+0x2c8]
 10101aa:	mov    r9,rcx
 10101ad:	mov    r8,QWORD PTR [rsp+0x278]
 10101b5:	mov    edx,0x8
 10101ba:	mov    rcx,rax
 10101bd:	call   QWORD PTR [rip+0xffffffffffff101d]        # 0x10011e0
 10101c3:	mov    QWORD PTR [rsp+0x290],rax
 10101cb:	cmp    QWORD PTR [rsp+0x290],0x0
 10101d4:	jne    0x10101fd
 10101d6:	call   QWORD PTR [rip+0xffffffffffff0ff4]        # 0x10011d0
 10101dc:	mov    r8,QWORD PTR [rsp+0x278]
 10101e4:	xor    edx,edx
 10101e6:	mov    rcx,rax
 10101e9:	call   QWORD PTR [rip+0xffffffffffff0ff9]        # 0x10011e8
 10101ef:	mov    QWORD PTR [rsp+0x278],0x0
 10101fb:	jmp    0x101020d
 10101fd:	mov    rax,QWORD PTR [rsp+0x290]
 1010205:	mov    QWORD PTR [rsp+0x278],rax
 101020d:	jmp    0x1010248
 101020f:	mov    eax,DWORD PTR [rsp+0x250]
 1010216:	shl    rax,1
 1010219:	mov    QWORD PTR [rsp+0x2d0],rax
 1010221:	call   QWORD PTR [rip+0xffffffffffff0fa9]        # 0x10011d0
 1010227:	mov    rcx,QWORD PTR [rsp+0x2d0]
 101022f:	mov    r8,rcx
 1010232:	mov    edx,0x8
 1010237:	mov    rcx,rax
 101023a:	call   QWORD PTR [rip+0xffffffffffff0fb0]        # 0x10011f0
 1010240:	mov    QWORD PTR [rsp+0x278],rax
 1010248:	cmp    QWORD PTR [rsp+0x278],0x0
 1010251:	je     0x1010270
 1010253:	mov    rdx,QWORD PTR [rsp+0x278]
 101025b:	mov    ecx,DWORD PTR [rsp+0x250]
 1010262:	call   QWORD PTR [rsp+0x288]
 1010269:	mov    DWORD PTR [rsp+0x25c],eax
 1010270:	cmp    QWORD PTR [rsp+0x278],0x0
 1010279:	je     0x101028f
 101027b:	mov    eax,DWORD PTR [rsp+0x250]
 1010282:	cmp    DWORD PTR [rsp+0x25c],eax
 1010289:	jae    0x1010132
 101028f:	cmp    QWORD PTR [rsp+0x278],0x0
 1010298:	je     0x10102a9
 101029a:	mov    rax,QWORD PTR [rsp+0x278]
 10102a2:	movzx  eax,WORD PTR [rax]
 10102a5:	test   eax,eax
 10102a7:	jne    0x10102d3
 10102a9:	lea    rcx,[rsp+0x40]
 10102ae:	call   QWORD PTR [rsp+0x268]
 10102b5:	mov    DWORD PTR [rsp+0x258],eax
 10102bc:	cmp    DWORD PTR [rsp+0x258],0x0
 10102c4:	jne    0x10102d1
 10102c6:	mov    DWORD PTR [rsp+0x274],0x1
 10102d1:	jmp    0x1010347
 10102d3:	mov    DWORD PTR [rsp+0x28],0xffffffff
 10102db:	lea    rax,[rsp+0x40]
 10102e0:	mov    QWORD PTR [rsp+0x20],rax
 10102e5:	mov    r9d,0xffffffff
 10102eb:	mov    r8,QWORD PTR [rsp+0x278]
 10102f3:	mov    edx,0x1
 10102f8:	mov    ecx,DWORD PTR [rsp+0x254]
 10102ff:	call   QWORD PTR [rip+0xffffffffffff0e73]        # 0x1001178
 1010305:	cmp    eax,0x2
 1010308:	je     0x101033c
 101030a:	mov    DWORD PTR [rsp+0x274],0x1
 1010315:	call   QWORD PTR [rip+0xffffffffffff0eb5]        # 0x10011d0
 101031b:	mov    r8,QWORD PTR [rsp+0x278]
 1010323:	xor    edx,edx
 1010325:	mov    rcx,rax
 1010328:	call   QWORD PTR [rip+0xffffffffffff0eba]        # 0x10011e8
 101032e:	mov    QWORD PTR [rsp+0x278],0x0
 101033a:	jmp    0x1010347
 101033c:	mov    DWORD PTR [rsp+0x258],0x1
 1010347:	cmp    DWORD PTR [rsp+0x274],0x0
 101034f:	je     0x101076c
 1010355:	xor    r8d,r8d
 1010358:	xor    edx,edx
 101035a:	lea    rcx,[rip+0xffffffffffff3817]        # 0x1003b78
 1010361:	call   QWORD PTR [rip+0xffffffffffff0df9]        # 0x1001160
 1010367:	mov    DWORD PTR [rsp+0x25c],eax
 101036e:	mov    eax,DWORD PTR [rsp+0x25c]
 1010375:	mov    DWORD PTR [rsp+0x250],eax
 101037c:	cmp    DWORD PTR [rsp+0x250],0x0
 1010384:	jne    0x10103a4
 1010386:	lea    rdx,[rsp+0x40]
 101038b:	lea    rcx,[rip+0xffffffffffff37e6]        # 0x1003b78
 1010392:	call   QWORD PTR [rip+0xffffffffffff0ff8]        # 0x1001390
 1010398:	mov    DWORD PTR [rsp+0x258],eax
 101039f:	jmp    0x101076c
 10103a4:	mov    DWORD PTR [rsp+0x2a8],0x0
 10103af:	mov    QWORD PTR [rsp+0x2a0],0x0
 10103bb:	mov    DWORD PTR [rsp+0x298],0x0
 10103c6:	lea    rcx,[rsp+0x40]
 10103cb:	call   QWORD PTR [rip+0xffffffffffff0eaf]        # 0x1001280
 10103d1:	add    eax,0x1
 10103d4:	mov    DWORD PTR [rsp+0x29c],eax
 10103db:	mov    eax,DWORD PTR [rsp+0x25c]
 10103e2:	mov    DWORD PTR [rsp+0x250],eax
 10103e9:	lea    rcx,[rsp+0x40]
 10103ee:	call   QWORD PTR [rip+0xffffffffffff0e8c]        # 0x1001280
 10103f4:	mov    ecx,DWORD PTR [rsp+0x250]
 10103fb:	lea    eax,[rcx+rax*1+0x2]
 10103ff:	mov    DWORD PTR [rsp+0x250],eax
 1010406:	cmp    QWORD PTR [rsp+0x278],0x0
 101040f:	je     0x10104a6
 1010415:	mov    QWORD PTR [rsp+0x2b0],0x0
 1010421:	mov    eax,DWORD PTR [rsp+0x250]
 1010428:	shl    rax,1
 101042b:	mov    QWORD PTR [rsp+0x2d8],rax
 1010433:	call   QWORD PTR [rip+0xffffffffffff0d97]        # 0x10011d0
 1010439:	mov    rcx,QWORD PTR [rsp+0x2d8]
 1010441:	mov    r9,rcx
 1010444:	mov    r8,QWORD PTR [rsp+0x278]
 101044c:	mov    edx,0x8
 1010451:	mov    rcx,rax
 1010454:	call   QWORD PTR [rip+0xffffffffffff0d86]        # 0x10011e0
 101045a:	mov    QWORD PTR [rsp+0x2b0],rax
 1010462:	cmp    QWORD PTR [rsp+0x2b0],0x0
 101046b:	jne    0x1010494
 101046d:	call   QWORD PTR [rip+0xffffffffffff0d5d]        # 0x10011d0
 1010473:	mov    r8,QWORD PTR [rsp+0x278]
 101047b:	xor    edx,edx
 101047d:	mov    rcx,rax
 1010480:	call   QWORD PTR [rip+0xffffffffffff0d62]        # 0x10011e8
 1010486:	mov    QWORD PTR [rsp+0x278],0x0
 1010492:	jmp    0x10104a4
 1010494:	mov    rax,QWORD PTR [rsp+0x2b0]
 101049c:	mov    QWORD PTR [rsp+0x278],rax
 10104a4:	jmp    0x10104df
 10104a6:	mov    eax,DWORD PTR [rsp+0x250]
 10104ad:	shl    rax,1
 10104b0:	mov    QWORD PTR [rsp+0x2e0],rax
 10104b8:	call   QWORD PTR [rip+0xffffffffffff0d12]        # 0x10011d0
 10104be:	mov    rcx,QWORD PTR [rsp+0x2e0]
 10104c6:	mov    r8,rcx
 10104c9:	mov    edx,0x8
 10104ce:	mov    rcx,rax
 10104d1:	call   QWORD PTR [rip+0xffffffffffff0d19]        # 0x10011f0
 10104d7:	mov    QWORD PTR [rsp+0x278],rax
 10104df:	cmp    QWORD PTR [rsp+0x278],0x0
 10104e8:	je     0x101050e
 10104ea:	mov    r8d,DWORD PTR [rsp+0x250]
 10104f2:	mov    rdx,QWORD PTR [rsp+0x278]
 10104fa:	lea    rcx,[rip+0xffffffffffff3677]        # 0x1003b78
 1010501:	call   QWORD PTR [rip+0xffffffffffff0c59]        # 0x1001160
 1010507:	mov    DWORD PTR [rsp+0x25c],eax
 101050e:	cmp    QWORD PTR [rsp+0x278],0x0
 1010517:	je     0x101052d
 1010519:	mov    eax,DWORD PTR [rsp+0x250]
 1010520:	cmp    DWORD PTR [rsp+0x25c],eax
 1010527:	jae    0x10103db
 101052d:	mov    rax,QWORD PTR [rsp+0x278]
 1010535:	mov    QWORD PTR [rsp+0x2a0],rax
 101053d:	mov    eax,DWORD PTR [rsp+0x25c]
 1010544:	add    eax,0x1
 1010547:	mov    DWORD PTR [rsp+0x298],eax
 101054e:	cmp    DWORD PTR [rsp+0x2a8],0x0
 1010556:	jne    0x101068a
 101055c:	mov    eax,DWORD PTR [rsp+0x29c]
 1010563:	cmp    DWORD PTR [rsp+0x298],eax
 101056a:	jb     0x101068a
 1010570:	mov    DWORD PTR [rsp+0x2bc],0x0
 101057b:	mov    DWORD PTR [rsp+0x2b8],0x0
 1010586:	mov    WORD PTR [rsp+0x2c0],0x0
 1010590:	mov    eax,DWORD PTR [rsp+0x2bc]
 1010597:	mov    rcx,QWORD PTR [rsp+0x2a0]
 101059f:	movzx  eax,WORD PTR [rcx+rax*2]
 10105a3:	mov    WORD PTR [rsp+0x2c0],ax
 10105ab:	movzx  eax,WORD PTR [rsp+0x2c0]
 10105b3:	mov    ecx,DWORD PTR [rsp+0x2bc]
 10105ba:	movzx  ecx,WORD PTR [rsp+rcx*2+0x40]
 10105bf:	cmp    eax,ecx
 10105c1:	jne    0x10105d0
 10105c3:	mov    DWORD PTR [rsp+0x2e8],0x1
 10105ce:	jmp    0x10105db
 10105d0:	mov    DWORD PTR [rsp+0x2e8],0x0
 10105db:	mov    eax,DWORD PTR [rsp+0x2e8]
 10105e2:	mov    DWORD PTR [rsp+0x2b8],eax
 10105e9:	cmp    DWORD PTR [rsp+0x2b8],0x0
 10105f1:	je     0x101061e
 10105f3:	mov    eax,DWORD PTR [rsp+0x29c]
 10105fa:	sub    eax,0x1
 10105fd:	cmp    DWORD PTR [rsp+0x2bc],eax
 1010604:	jne    0x1010608
 1010606:	jmp    0x101061e
 1010608:	mov    eax,DWORD PTR [rsp+0x2bc]
 101060f:	add    eax,0x1
 1010612:	mov    DWORD PTR [rsp+0x2bc],eax
 1010619:	jmp    0x1010590
 101061e:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1010626:	je     0x1010635
 1010628:	mov    DWORD PTR [rsp+0x2a8],0x1
 1010633:	jmp    0x1010660
 1010635:	mov    eax,DWORD PTR [rsp+0x29c]
 101063c:	sub    eax,0x1
 101063f:	cmp    DWORD PTR [rsp+0x2bc],eax
 1010646:	jne    0x1010660
 1010648:	movzx  eax,WORD PTR [rsp+0x2c0]
 1010650:	cmp    eax,0x3b
 1010653:	jne    0x1010660
 1010655:	mov    DWORD PTR [rsp+0x2a8],0x1
 1010660:	mov    rax,QWORD PTR [rsp+0x2a0]
 1010668:	add    rax,0x2
 101066c:	mov    QWORD PTR [rsp+0x2a0],rax
 1010674:	mov    eax,DWORD PTR [rsp+0x298]
 101067b:	sub    eax,0x1
 101067e:	mov    DWORD PTR [rsp+0x298],eax
 1010685:	jmp    0x101054e
 101068a:	cmp    DWORD PTR [rsp+0x2a8],0x0
 1010692:	je     0x10106a4
 1010694:	mov    DWORD PTR [rsp+0x258],0x1
 101069f:	jmp    0x101076c
 10106a4:	mov    eax,DWORD PTR [rsp+0x250]
 10106ab:	shl    rax,1
 10106ae:	mov    QWORD PTR [rsp+0x2f0],rax
 10106b6:	call   QWORD PTR [rip+0xffffffffffff0b14]        # 0x10011d0
 10106bc:	mov    rcx,QWORD PTR [rsp+0x2f0]
 10106c4:	mov    r8,rcx
 10106c7:	mov    edx,0x8
 10106cc:	mov    rcx,rax
 10106cf:	call   QWORD PTR [rip+0xffffffffffff0b1b]        # 0x10011f0
 10106d5:	mov    QWORD PTR [rsp+0x260],rax
 10106dd:	cmp    QWORD PTR [rsp+0x278],0x0
 10106e6:	je     0x101076c
 10106ec:	cmp    QWORD PTR [rsp+0x260],0x0
 10106f5:	je     0x101076c
 10106f7:	mov    eax,DWORD PTR [rsp+0x250]
 10106fe:	lea    r8,[rsp+0x40]
 1010703:	mov    rdx,rax
 1010706:	mov    rcx,QWORD PTR [rsp+0x260]
 101070e:	call   0x10108a0
 1010713:	mov    eax,DWORD PTR [rsp+0x250]
 101071a:	lea    r8,[rip+0xffffffffffff344f]        # 0x1003b70
 1010721:	mov    rdx,rax
 1010724:	mov    rcx,QWORD PTR [rsp+0x260]
 101072c:	call   0x1010910
 1010731:	mov    eax,DWORD PTR [rsp+0x250]
 1010738:	mov    r8,QWORD PTR [rsp+0x278]
 1010740:	mov    rdx,rax
 1010743:	mov    rcx,QWORD PTR [rsp+0x260]
 101074b:	call   0x1010910
 1010750:	mov    rdx,QWORD PTR [rsp+0x260]
 1010758:	lea    rcx,[rip+0xffffffffffff3419]        # 0x1003b78
 101075f:	call   QWORD PTR [rip+0xffffffffffff0c2b]        # 0x1001390
 1010765:	mov    DWORD PTR [rsp+0x258],eax
 101076c:	cmp    QWORD PTR [rsp+0x278],0x0
 1010775:	je     0x101079c
 1010777:	call   QWORD PTR [rip+0xffffffffffff0a53]        # 0x10011d0
 101077d:	mov    r8,QWORD PTR [rsp+0x278]
 1010785:	xor    edx,edx
 1010787:	mov    rcx,rax
 101078a:	call   QWORD PTR [rip+0xffffffffffff0a58]        # 0x10011e8
 1010790:	mov    QWORD PTR [rsp+0x278],0x0
 101079c:	cmp    QWORD PTR [rsp+0x260],0x0
 10107a5:	je     0x10107cc
 10107a7:	call   QWORD PTR [rip+0xffffffffffff0a23]        # 0x10011d0
 10107ad:	mov    r8,QWORD PTR [rsp+0x260]
 10107b5:	xor    edx,edx
 10107b7:	mov    rcx,rax
 10107ba:	call   QWORD PTR [rip+0xffffffffffff0a28]        # 0x10011e8
 10107c0:	mov    QWORD PTR [rsp+0x260],0x0
 10107cc:	cmp    QWORD PTR [rsp+0x280],0x0
 10107d5:	je     0x10107e4
 10107d7:	mov    rcx,QWORD PTR [rsp+0x280]
 10107df:	call   0x1011840
 10107e4:	mov    eax,DWORD PTR [rsp+0x258]
 10107eb:	mov    rcx,QWORD PTR [rsp+0x2f8]
 10107f3:	xor    rcx,rsp
 10107f6:	call   0x100daf0
 10107fb:	add    rsp,0x308
 1010802:	ret    
 1010803:	int3   
 1010804:	int3   
 1010805:	int3   
 1010806:	int3   
 1010807:	int3   
 1010808:	int3   
 1010809:	int3   
 101080a:	int3   
 101080b:	int3   
 101080c:	int3   
 101080d:	int3   
 101080e:	int3   
 101080f:	int3   
 1010810:	rex push rbp
 1010812:	sub    rsp,0x30
 1010816:	mov    rbp,rdx
 1010819:	cmp    QWORD PTR [rbp+0x278],0x0
 1010821:	je     0x1010846
 1010823:	call   QWORD PTR [rip+0xffffffffffff09a7]        # 0x10011d0
 1010829:	mov    r8,QWORD PTR [rbp+0x278]
 1010830:	xor    edx,edx
 1010832:	mov    rcx,rax
 1010835:	call   QWORD PTR [rip+0xffffffffffff09ad]        # 0x10011e8
 101083b:	mov    QWORD PTR [rbp+0x278],0x0
 1010846:	cmp    QWORD PTR [rbp+0x260],0x0
 101084e:	je     0x1010873
 1010850:	call   QWORD PTR [rip+0xffffffffffff097a]        # 0x10011d0
 1010856:	mov    r8,QWORD PTR [rbp+0x260]
 101085d:	xor    edx,edx
 101085f:	mov    rcx,rax
 1010862:	call   QWORD PTR [rip+0xffffffffffff0980]        # 0x10011e8
 1010868:	mov    QWORD PTR [rbp+0x260],0x0
 1010873:	cmp    QWORD PTR [rbp+0x280],0x0
 101087b:	je     0x1010889
 101087d:	mov    rcx,QWORD PTR [rbp+0x280]
 1010884:	call   0x1011840
 1010889:	add    rsp,0x30
 101088d:	pop    rbp
 101088e:	ret    
 101088f:	int3   
 1010890:	int3   
 1010891:	int3   
 1010892:	int3   
 1010893:	int3   
 1010894:	int3   
 1010895:	int3   
 1010896:	int3   
 1010897:	int3   
 1010898:	int3   
 1010899:	int3   
 101089a:	int3   
 101089b:	int3   
 101089c:	int3   
 101089d:	int3   
 101089e:	int3   
 101089f:	int3   
 10108a0:	mov    QWORD PTR [rsp+0x18],r8
 10108a5:	mov    QWORD PTR [rsp+0x10],rdx
 10108aa:	mov    QWORD PTR [rsp+0x8],rcx
 10108af:	sub    rsp,0x48
 10108b3:	mov    r8d,0x7fffffff
 10108b9:	mov    rdx,QWORD PTR [rsp+0x58]
 10108be:	mov    rcx,QWORD PTR [rsp+0x50]
 10108c3:	call   0x10109a0
 10108c8:	mov    DWORD PTR [rsp+0x30],eax
 10108cc:	cmp    DWORD PTR [rsp+0x30],0x0
 10108d1:	jl     0x10108f7
 10108d3:	mov    QWORD PTR [rsp+0x20],0x7ffffffe
 10108dc:	mov    r9,QWORD PTR [rsp+0x60]
 10108e1:	xor    r8d,r8d
 10108e4:	mov    rdx,QWORD PTR [rsp+0x58]
 10108e9:	mov    rcx,QWORD PTR [rsp+0x50]
 10108ee:	call   0x1010b10
 10108f3:	mov    DWORD PTR [rsp+0x30],eax
 10108f7:	mov    eax,DWORD PTR [rsp+0x30]
 10108fb:	add    rsp,0x48
 10108ff:	ret    
 1010900:	int3   
 1010901:	int3   
 1010902:	int3   
 1010903:	int3   
 1010904:	int3   
 1010905:	int3   
 1010906:	int3   
 1010907:	int3   
 1010908:	int3   
 1010909:	int3   
 101090a:	int3   
 101090b:	int3   
 101090c:	int3   
 101090d:	int3   
 101090e:	int3   
 101090f:	int3   
 1010910:	mov    QWORD PTR [rsp+0x18],r8
 1010915:	mov    QWORD PTR [rsp+0x10],rdx
 101091a:	mov    QWORD PTR [rsp+0x8],rcx
 101091f:	sub    rsp,0x48
 1010923:	mov    r9d,0x7fffffff
 1010929:	lea    r8,[rsp+0x38]
 101092e:	mov    rdx,QWORD PTR [rsp+0x58]
 1010933:	mov    rcx,QWORD PTR [rsp+0x50]
 1010938:	call   0x10109f0
 101093d:	mov    DWORD PTR [rsp+0x30],eax
 1010941:	cmp    DWORD PTR [rsp+0x30],0x0
 1010946:	jl     0x1010983
 1010948:	mov    rax,QWORD PTR [rsp+0x38]
 101094d:	mov    rcx,QWORD PTR [rsp+0x58]
 1010952:	sub    rcx,rax
 1010955:	mov    rax,rcx
 1010958:	mov    rcx,QWORD PTR [rsp+0x50]
 101095d:	mov    rdx,QWORD PTR [rsp+0x38]
 1010962:	lea    rcx,[rcx+rdx*2]
 1010966:	mov    QWORD PTR [rsp+0x20],0x7fffffff
 101096f:	mov    r9,QWORD PTR [rsp+0x60]
 1010974:	xor    r8d,r8d
 1010977:	mov    rdx,rax
 101097a:	call   0x1010b10
 101097f:	mov    DWORD PTR [rsp+0x30],eax
 1010983:	mov    eax,DWORD PTR [rsp+0x30]
 1010987:	add    rsp,0x48
 101098b:	ret    
 101098c:	int3   
 101098d:	int3   
 101098e:	int3   
 101098f:	int3   
 1010990:	int3   
 1010991:	int3   
 1010992:	int3   
 1010993:	int3   
 1010994:	int3   
 1010995:	int3   
 1010996:	int3   
 1010997:	int3   
 1010998:	int3   
 1010999:	int3   
 101099a:	int3   
 101099b:	int3   
 101099c:	int3   
 101099d:	int3   
 101099e:	int3   
 101099f:	int3   
 10109a0:	mov    QWORD PTR [rsp+0x18],r8
 10109a5:	mov    QWORD PTR [rsp+0x10],rdx
 10109aa:	mov    QWORD PTR [rsp+0x8],rcx
 10109af:	sub    rsp,0x18
 10109b3:	mov    DWORD PTR [rsp],0x0
 10109ba:	cmp    QWORD PTR [rsp+0x28],0x0
 10109c0:	je     0x10109ce
 10109c2:	mov    rax,QWORD PTR [rsp+0x30]
 10109c7:	cmp    QWORD PTR [rsp+0x28],rax
 10109cc:	jbe    0x10109d5
 10109ce:	mov    DWORD PTR [rsp],0x80070057
 10109d5:	mov    eax,DWORD PTR [rsp]
 10109d8:	add    rsp,0x18
 10109dc:	ret    
 10109dd:	int3   
 10109de:	int3   
 10109df:	int3   
 10109e0:	int3   
 10109e1:	int3   
 10109e2:	int3   
 10109e3:	int3   
 10109e4:	int3   
 10109e5:	int3   
 10109e6:	int3   
 10109e7:	int3   
 10109e8:	int3   
 10109e9:	int3   
 10109ea:	int3   
 10109eb:	int3   
 10109ec:	int3   
 10109ed:	int3   
 10109ee:	int3   
 10109ef:	int3   
 10109f0:	mov    QWORD PTR [rsp+0x20],r9
 10109f5:	mov    QWORD PTR [rsp+0x18],r8
 10109fa:	mov    QWORD PTR [rsp+0x10],rdx
 10109ff:	mov    QWORD PTR [rsp+0x8],rcx
 1010a04:	sub    rsp,0x38
 1010a08:	mov    r8,QWORD PTR [rsp+0x58]
 1010a0d:	mov    rdx,QWORD PTR [rsp+0x48]
 1010a12:	mov    rcx,QWORD PTR [rsp+0x40]
 1010a17:	call   0x10109a0
 1010a1c:	mov    DWORD PTR [rsp+0x20],eax
 1010a20:	cmp    DWORD PTR [rsp+0x20],0x0
 1010a25:	jl     0x1010a41
 1010a27:	mov    r8,QWORD PTR [rsp+0x50]
 1010a2c:	mov    rdx,QWORD PTR [rsp+0x48]
 1010a31:	mov    rcx,QWORD PTR [rsp+0x40]
 1010a36:	call   0x1010a60
 1010a3b:	mov    DWORD PTR [rsp+0x20],eax
 1010a3f:	jmp    0x1010a4d
 1010a41:	mov    rax,QWORD PTR [rsp+0x50]
 1010a46:	mov    QWORD PTR [rax],0x0
 1010a4d:	mov    eax,DWORD PTR [rsp+0x20]
 1010a51:	add    rsp,0x38
 1010a55:	ret    
 1010a56:	int3   
 1010a57:	int3   
 1010a58:	int3   
 1010a59:	int3   
 1010a5a:	int3   
 1010a5b:	int3   
 1010a5c:	int3   
 1010a5d:	int3   
 1010a5e:	int3   
 1010a5f:	int3   
 1010a60:	mov    QWORD PTR [rsp+0x18],r8
 1010a65:	mov    QWORD PTR [rsp+0x10],rdx
 1010a6a:	mov    QWORD PTR [rsp+0x8],rcx
 1010a6f:	sub    rsp,0x18
 1010a73:	mov    DWORD PTR [rsp+0x8],0x0
 1010a7b:	mov    rax,QWORD PTR [rsp+0x28]
 1010a80:	mov    QWORD PTR [rsp],rax
 1010a84:	cmp    QWORD PTR [rsp+0x28],0x0
 1010a8a:	je     0x1010ab6
 1010a8c:	mov    rax,QWORD PTR [rsp+0x20]
 1010a91:	movzx  eax,WORD PTR [rax]
 1010a94:	test   eax,eax
 1010a96:	je     0x1010ab6
 1010a98:	mov    rax,QWORD PTR [rsp+0x20]
 1010a9d:	add    rax,0x2
 1010aa1:	mov    QWORD PTR [rsp+0x20],rax
 1010aa6:	mov    rax,QWORD PTR [rsp+0x28]
 1010aab:	sub    rax,0x1
 1010aaf:	mov    QWORD PTR [rsp+0x28],rax
 1010ab4:	jmp    0x1010a84
 1010ab6:	cmp    QWORD PTR [rsp+0x28],0x0
 1010abc:	jne    0x1010ac6
 1010abe:	mov    DWORD PTR [rsp+0x8],0x80070057
 1010ac6:	cmp    QWORD PTR [rsp+0x30],0x0
 1010acc:	je     0x1010afa
 1010ace:	cmp    DWORD PTR [rsp+0x8],0x0
 1010ad3:	jl     0x1010aee
 1010ad5:	mov    rax,QWORD PTR [rsp+0x28]
 1010ada:	mov    rcx,QWORD PTR [rsp]
 1010ade:	sub    rcx,rax
 1010ae1:	mov    rax,rcx
 1010ae4:	mov    rcx,QWORD PTR [rsp+0x30]
 1010ae9:	mov    QWORD PTR [rcx],rax
 1010aec:	jmp    0x1010afa
 1010aee:	mov    rax,QWORD PTR [rsp+0x30]
 1010af3:	mov    QWORD PTR [rax],0x0
 1010afa:	mov    eax,DWORD PTR [rsp+0x8]
 1010afe:	add    rsp,0x18
 1010b02:	ret    
 1010b03:	int3   
 1010b04:	int3   
 1010b05:	int3   
 1010b06:	int3   
 1010b07:	int3   
 1010b08:	int3   
 1010b09:	int3   
 1010b0a:	int3   
 1010b0b:	int3   
 1010b0c:	int3   
 1010b0d:	int3   
 1010b0e:	int3   
 1010b0f:	int3   
 1010b10:	mov    QWORD PTR [rsp+0x20],r9
 1010b15:	mov    QWORD PTR [rsp+0x18],r8
 1010b1a:	mov    QWORD PTR [rsp+0x10],rdx
 1010b1f:	mov    QWORD PTR [rsp+0x8],rcx
 1010b24:	sub    rsp,0x18
 1010b28:	mov    DWORD PTR [rsp+0x8],0x0
 1010b30:	mov    QWORD PTR [rsp],0x0
 1010b38:	cmp    QWORD PTR [rsp+0x28],0x0
 1010b3e:	je     0x1010baa
 1010b40:	cmp    QWORD PTR [rsp+0x40],0x0
 1010b46:	je     0x1010baa
 1010b48:	mov    rax,QWORD PTR [rsp+0x38]
 1010b4d:	movzx  eax,WORD PTR [rax]
 1010b50:	test   eax,eax
 1010b52:	je     0x1010baa
 1010b54:	mov    rax,QWORD PTR [rsp+0x20]
 1010b59:	mov    rcx,QWORD PTR [rsp+0x38]
 1010b5e:	movzx  ecx,WORD PTR [rcx]
 1010b61:	mov    WORD PTR [rax],cx
 1010b64:	mov    rax,QWORD PTR [rsp+0x20]
 1010b69:	add    rax,0x2
 1010b6d:	mov    QWORD PTR [rsp+0x20],rax
 1010b72:	mov    rax,QWORD PTR [rsp+0x38]
 1010b77:	add    rax,0x2
 1010b7b:	mov    QWORD PTR [rsp+0x38],rax
 1010b80:	mov    rax,QWORD PTR [rsp+0x28]
 1010b85:	sub    rax,0x1
 1010b89:	mov    QWORD PTR [rsp+0x28],rax
 1010b8e:	mov    rax,QWORD PTR [rsp+0x40]
 1010b93:	sub    rax,0x1
 1010b97:	mov    QWORD PTR [rsp+0x40],rax
 1010b9c:	mov    rax,QWORD PTR [rsp]
 1010ba0:	add    rax,0x1
 1010ba4:	mov    QWORD PTR [rsp],rax
 1010ba8:	jmp    0x1010b38
 1010baa:	cmp    QWORD PTR [rsp+0x28],0x0
 1010bb0:	jne    0x1010bd4
 1010bb2:	mov    rax,QWORD PTR [rsp+0x20]
 1010bb7:	sub    rax,0x2
 1010bbb:	mov    QWORD PTR [rsp+0x20],rax
 1010bc0:	mov    rax,QWORD PTR [rsp]
 1010bc4:	sub    rax,0x1
 1010bc8:	mov    QWORD PTR [rsp],rax
 1010bcc:	mov    DWORD PTR [rsp+0x8],0x8007007a
 1010bd4:	mov    rax,QWORD PTR [rsp+0x20]
 1010bd9:	mov    WORD PTR [rax],0x0
 1010bde:	cmp    QWORD PTR [rsp+0x30],0x0
 1010be4:	je     0x1010bf2
 1010be6:	mov    rax,QWORD PTR [rsp+0x30]
 1010beb:	mov    rcx,QWORD PTR [rsp]
 1010bef:	mov    QWORD PTR [rax],rcx
 1010bf2:	mov    eax,DWORD PTR [rsp+0x8]
 1010bf6:	add    rsp,0x18
 1010bfa:	ret    
 1010bfb:	int3   
 1010bfc:	int3   
 1010bfd:	int3   
 1010bfe:	int3   
 1010bff:	int3   
 1010c00:	int3   
 1010c01:	int3   
 1010c02:	int3   
 1010c03:	int3   
 1010c04:	int3   
 1010c05:	int3   
 1010c06:	int3   
 1010c07:	int3   
 1010c08:	int3   
 1010c09:	int3   
 1010c0a:	int3   
 1010c0b:	int3   
 1010c0c:	int3   
 1010c0d:	int3   
 1010c0e:	int3   
 1010c0f:	int3   
 1010c10:	mov    QWORD PTR [rsp+0x8],rcx
 1010c15:	mov    QWORD PTR [rsp+0x10],rdx
 1010c1a:	mov    QWORD PTR [rsp+0x18],r8
 1010c1f:	mov    QWORD PTR [rsp+0x20],r9
 1010c24:	ret    
 1010c25:	int3   
 1010c26:	int3   
 1010c27:	int3   
 1010c28:	int3   
 1010c29:	int3   
 1010c2a:	int3   
 1010c2b:	int3   
 1010c2c:	int3   
 1010c2d:	int3   
 1010c2e:	int3   
 1010c2f:	int3   
 1010c30:	sub    rsp,0x38
 1010c34:	cmp    DWORD PTR [rip+0xaf65],0x0        # 0x101bba0
 1010c3b:	je     0x1010c4b
 1010c3d:	mov    r8,QWORD PTR [rsp+0x60]
 1010c42:	add    rsp,0x38
 1010c46:	jmp    0x10119e0
 1010c4b:	mov    rax,QWORD PTR [rsp+0x60]
 1010c50:	mov    QWORD PTR [rsp+0x20],rax
 1010c55:	call   QWORD PTR [rip+0xffffffffffff03ad]        # 0x1001008
 1010c5b:	add    rsp,0x38
 1010c5f:	ret    
 1010c60:	int3   
 1010c61:	int3   
 1010c62:	int3   
 1010c63:	int3   
 1010c64:	int3   
 1010c65:	int3   
 1010c66:	int3   
 1010c67:	int3   
 1010c68:	int3   
 1010c69:	int3   
 1010c6a:	int3   
 1010c6b:	int3   
 1010c6c:	int3   
 1010c6d:	int3   
 1010c6e:	int3   
 1010c6f:	int3   
 1010c70:	mov    QWORD PTR [rsp+0x20],r9
 1010c75:	push   rbx
 1010c76:	push   r14
 1010c78:	sub    rsp,0x58
 1010c7c:	cmp    DWORD PTR [rip+0xaf1d],0x0        # 0x101bba0
 1010c83:	mov    r14,r9
 1010c86:	mov    rbx,rdx
 1010c89:	je     0x1010f6b
 1010c8f:	mov    QWORD PTR [rsp+0x70],rbp
 1010c94:	mov    QWORD PTR [rsp+0x78],rsi
 1010c99:	call   0x1011260
 1010c9e:	test   rbx,rbx
 1010ca1:	je     0x1010ca9
 1010ca3:	cmp    WORD PTR [rbx],0x0
 1010ca7:	jne    0x1010cb0
 1010ca9:	lea    rbx,[rip+0xffffffffffff3194]        # 0x1003e44
 1010cb0:	mov    rdx,rbx
 1010cb3:	mov    rcx,rax
 1010cb6:	call   0x1011670
 1010cbb:	mov    rsi,rax
 1010cbe:	test   rax,rax
 1010cc1:	je     0x1010f4a
 1010cc7:	mov    eax,0xffff
 1010ccc:	cmp    WORD PTR [rsi],ax
 1010ccf:	jne    0x1010ce2
 1010cd1:	cmp    WORD PTR [rsi+0x2],0x0
 1010cd6:	jne    0x1010ce2
 1010cd8:	mov    ebp,0x2
 1010cdd:	jmp    0x1010f34
 1010ce2:	mov    QWORD PTR [rsp+0x80],rdi
 1010cea:	mov    QWORD PTR [rsp+0x50],r12
 1010cef:	xor    ebp,ebp
 1010cf1:	lea    r9,[rsp+0x30]
 1010cf6:	lea    rdx,[rip+0xffffffffffff314b]        # 0x1003e48
 1010cfd:	xor    r8d,r8d
 1010d00:	mov    rcx,rsi
 1010d03:	mov    QWORD PTR [rsp+0x48],r13
 1010d08:	lea    r12d,[rbp+0x1]
 1010d0c:	mov    QWORD PTR [rsp+0x40],r15
 1010d11:	mov    DWORD PTR [rsp+0x30],ebp
 1010d15:	call   0x1014de4
 1010d1a:	lea    edi,[rbp+0x4]
 1010d1d:	cmp    eax,r12d
 1010d20:	jne    0x1010d2f
 1010d22:	mov    r12d,edi
 1010d25:	lea    r13,[rsp+0x30]
 1010d2a:	jmp    0x1010ee3
 1010d2f:	lea    rax,[rip+0xffffffffffff312a]        # 0x1003e60
 1010d36:	mov    r9d,edi
 1010d39:	mov    r8,rsi
 1010d3c:	mov    edx,r12d
 1010d3f:	mov    ecx,0x400
 1010d44:	mov    DWORD PTR [rsp+0x28],edi
 1010d48:	mov    QWORD PTR [rsp+0x20],rax
 1010d4d:	call   QWORD PTR [rip+0xffffffffffff0425]        # 0x1001178
 1010d53:	cmp    eax,0x2
 1010d56:	jne    0x1010d5e
 1010d58:	lea    r12d,[rax+0x1]
 1010d5c:	jmp    0x1010dd9
 1010d5e:	lea    rax,[rip+0xffffffffffff310b]        # 0x1003e70
 1010d65:	mov    r9d,edi
 1010d68:	mov    r8,rsi
 1010d6b:	mov    edx,r12d
 1010d6e:	mov    ecx,0x400
 1010d73:	mov    DWORD PTR [rsp+0x28],edi
 1010d77:	mov    QWORD PTR [rsp+0x20],rax
 1010d7c:	call   QWORD PTR [rip+0xffffffffffff03f6]        # 0x1001178
 1010d82:	cmp    eax,0x2
 1010d85:	jne    0x1010ec5
 1010d8b:	lea    rbx,[rsi+0x8]
 1010d8f:	lea    r9,[rsp+0x34]
 1010d94:	lea    rdx,[rip+0xffffffffffff30e5]        # 0x1003e80
 1010d9b:	mov    rcx,rbx
 1010d9e:	xor    r8d,r8d
 1010da1:	call   0x1014de4
 1010da6:	cmp    eax,r12d
 1010da9:	jne    0x1010ec5
 1010daf:	cmp    WORD PTR [rbx],0x3a
 1010db3:	je     0x1010dcc
 1010db5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1010dc0:	add    rbx,0x2
 1010dc4:	inc    edi
 1010dc6:	cmp    WORD PTR [rbx],0x3a
 1010dca:	jne    0x1010dc0
 1010dcc:	mov    r12d,DWORD PTR [rsp+0x34]
 1010dd1:	inc    edi
 1010dd3:	je     0x1010ec5
 1010dd9:	movsxd r8,edi
 1010ddc:	or     rcx,0xffffffffffffffff
 1010de0:	inc    rcx
 1010de3:	cmp    WORD PTR [rsi+rcx*2],bp
 1010de7:	jne    0x1010de0
 1010de9:	sub    rcx,r8
 1010dec:	lea    rbx,[rsi+r8*2]
 1010df0:	movabs rax,0xaaaaaaaaaaaaaaab
 1010dfa:	lea    r9,[rsp+0x30]
 1010dff:	xor    r8d,r8d
 1010e02:	mov    r13,rsi
 1010e05:	mul    rcx
 1010e08:	mov    rdi,rdx
 1010e0b:	lea    rdx,[rip+0xffffffffffff307e]        # 0x1003e90
 1010e12:	mov    rcx,rbx
 1010e15:	shr    rdi,1
 1010e18:	mov    r15d,ebp
 1010e1b:	inc    edi
 1010e1d:	call   0x1014de4
 1010e22:	cmp    eax,0x1
 1010e25:	jne    0x1010e95
 1010e27:	mov    r14,rsi
 1010e2a:	nop    WORD PTR [rax+rax*1+0x0]
 1010e30:	movzx  eax,WORD PTR [rbx]
 1010e33:	cmp    ax,0x2c
 1010e37:	je     0x1010e53
 1010e39:	nop    DWORD PTR [rax+0x0]
 1010e40:	test   ax,ax
 1010e43:	je     0x1010e53
 1010e45:	movzx  eax,WORD PTR [rbx+0x2]
 1010e49:	add    rbx,0x2
 1010e4d:	cmp    ax,0x2c
 1010e51:	jne    0x1010e40
 1010e53:	movzx  eax,BYTE PTR [rsp+0x30]
 1010e58:	inc    r14
 1010e5b:	inc    r15d
 1010e5e:	mov    BYTE PTR [r14-0x1],al
 1010e62:	cmp    WORD PTR [rbx],0x2c
 1010e66:	jne    0x1010e6c
 1010e68:	add    rbx,0x2
 1010e6c:	cmp    WORD PTR [rbx],bp
 1010e6f:	je     0x1010e8d
 1010e71:	lea    r9,[rsp+0x30]
 1010e76:	lea    rdx,[rip+0xffffffffffff3013]        # 0x1003e90
 1010e7d:	xor    r8d,r8d
 1010e80:	mov    rcx,rbx
 1010e83:	call   0x1014de4
 1010e88:	cmp    eax,0x1
 1010e8b:	je     0x1010e30
 1010e8d:	mov    r14,QWORD PTR [rsp+0x88]
 1010e95:	cmp    edi,r15d
 1010e98:	jne    0x1010ebe
 1010e9a:	cmp    r12d,0x1
 1010e9e:	je     0x1010eac
 1010ea0:	cmp    r12d,0x7
 1010ea4:	je     0x1010eac
 1010ea6:	cmp    r12d,0x2
 1010eaa:	jne    0x1010ee3
 1010eac:	test   dil,0x1
 1010eb0:	jne    0x1010ebe
 1010eb2:	movsxd rax,r15d
 1010eb5:	add    edi,0x2
 1010eb8:	mov    WORD PTR [rax+rsi*1],bp
 1010ebc:	jmp    0x1010ee3
 1010ebe:	mov    ebp,0xd
 1010ec3:	jmp    0x1010f1d
 1010ec5:	or     rcx,0xffffffffffffffff
 1010ec9:	nop    DWORD PTR [rax+0x0]
 1010ed0:	inc    rcx
 1010ed3:	cmp    WORD PTR [rsi+rcx*2],bp
 1010ed7:	jne    0x1010ed0
 1010ed9:	lea    edi,[rcx*2+0x2]
 1010ee0:	mov    r13,rsi
 1010ee3:	mov    rcx,QWORD PTR [rsp+0x90]
 1010eeb:	mov    rbx,QWORD PTR [rsp+0x98]
 1010ef3:	test   rcx,rcx
 1010ef6:	je     0x1010f0e
 1010ef8:	cmp    DWORD PTR [rbx],edi
 1010efa:	jb     0x1010f09
 1010efc:	mov    r8d,edi
 1010eff:	mov    rdx,r13
 1010f02:	call   0x100dd0e
 1010f07:	jmp    0x1010f0e
 1010f09:	mov    ebp,0xea
 1010f0e:	test   r14,r14
 1010f11:	je     0x1010f16
 1010f13:	mov    DWORD PTR [r14],r12d
 1010f16:	test   rbx,rbx
 1010f19:	je     0x1010f1d
 1010f1b:	mov    DWORD PTR [rbx],edi
 1010f1d:	mov    r13,QWORD PTR [rsp+0x48]
 1010f22:	mov    r12,QWORD PTR [rsp+0x50]
 1010f27:	mov    rdi,QWORD PTR [rsp+0x80]
 1010f2f:	mov    r15,QWORD PTR [rsp+0x40]
 1010f34:	call   QWORD PTR [rip+0xffffffffffff0296]        # 0x10011d0
 1010f3a:	mov    r8,rsi
 1010f3d:	xor    edx,edx
 1010f3f:	mov    rcx,rax
 1010f42:	call   QWORD PTR [rip+0xffffffffffff02a0]        # 0x10011e8
 1010f48:	jmp    0x1010f4f
 1010f4a:	mov    ebp,0x8
 1010f4f:	mov    ecx,ebp
 1010f51:	call   QWORD PTR [rip+0xffffffffffff01f9]        # 0x1001150
 1010f57:	mov    rsi,QWORD PTR [rsp+0x78]
 1010f5c:	mov    eax,ebp
 1010f5e:	mov    rbp,QWORD PTR [rsp+0x70]
 1010f63:	add    rsp,0x58
 1010f67:	pop    r14
 1010f69:	pop    rbx
 1010f6a:	ret    
 1010f6b:	mov    rax,QWORD PTR [rsp+0x98]
 1010f73:	mov    QWORD PTR [rsp+0x28],rax
 1010f78:	mov    rax,QWORD PTR [rsp+0x90]
 1010f80:	mov    QWORD PTR [rsp+0x20],rax
 1010f85:	call   QWORD PTR [rip+0xffffffffffff0085]        # 0x1001010
 1010f8b:	add    rsp,0x58
 1010f8f:	pop    r14
 1010f91:	pop    rbx
 1010f92:	ret    
 1010f93:	int3   
 1010f94:	int3   
 1010f95:	int3   
 1010f96:	int3   
 1010f97:	int3   
 1010f98:	int3   
 1010f99:	int3   
 1010f9a:	int3   
 1010f9b:	int3   
 1010f9c:	int3   
 1010f9d:	int3   
 1010f9e:	int3   
 1010f9f:	int3   
 1010fa0:	rex push rbx
 1010fa2:	push   rsi
 1010fa3:	push   r15
 1010fa5:	sub    rsp,0x40
 1010fa9:	cmp    DWORD PTR [rip+0xabf0],0x0        # 0x101bba0
 1010fb0:	mov    r15d,r8d
 1010fb3:	mov    rbx,rdx
 1010fb6:	je     0x1010fc6
 1010fb8:	mov    eax,0x1
 1010fbd:	add    rsp,0x40
 1010fc1:	pop    r15
 1010fc3:	pop    rsi
 1010fc4:	pop    rbx
 1010fc5:	ret    
 1010fc6:	mov    QWORD PTR [rsp+0x68],rdi
 1010fcb:	mov    QWORD PTR [rsp+0x70],r12
 1010fd0:	mov    QWORD PTR [rsp+0x30],r14
 1010fd5:	call   0x1010c10
 1010fda:	or     rdi,0xffffffffffffffff
 1010fde:	test   rdx,rdx
 1010fe1:	je     0x1010ff2
 1010fe3:	mov    rax,rdi
 1010fe6:	inc    rax
 1010fe9:	cmp    WORD PTR [rdx+rax*2],0x0
 1010fee:	jne    0x1010fe6
 1010ff0:	jmp    0x1010ff7
 1010ff2:	mov    eax,0x3
 1010ff7:	lea    r14d,[rax+0x1]
 1010ffb:	mov    r8d,0x104
 1011001:	lea    r12,[rip+0xabb8]        # 0x101bbc0
 1011008:	sub    r8d,r14d
 101100b:	mov    rdx,r12
 101100e:	mov    QWORD PTR [rsp+0x60],rbp
 1011013:	mov    QWORD PTR [rsp+0x38],r13
 1011018:	call   QWORD PTR [rip+0xffffffffffff0182]        # 0x10011a0
 101101e:	mov    r11d,eax
 1011021:	test   eax,eax
 1011023:	je     0x10111af
 1011029:	lea    rcx,[r12-0x2]
 101102e:	lea    rcx,[rcx+r11*2]
 1011032:	call   0x1010c10
 1011037:	xor    r13d,r13d
 101103a:	mov    edx,r13d
 101103d:	mov    r8d,r13d
 1011040:	cmp    rcx,r12
 1011043:	jbe    0x1011068
 1011045:	test   r8,r8
 1011048:	jne    0x1011055
 101104a:	cmp    WORD PTR [rcx],0x2e
 101104e:	jne    0x101105d
 1011050:	mov    r8,rcx
 1011053:	jmp    0x101105d
 1011055:	cmp    WORD PTR [rcx],0x5c
 1011059:	cmove  rdx,rcx
 101105d:	sub    rcx,0x2
 1011061:	test   rdx,rdx
 1011064:	je     0x1011040
 1011066:	jmp    0x1011071
 1011068:	test   rdx,rdx
 101106b:	je     0x10111af
 1011071:	lea    rcx,[rdx+0x2]
 1011075:	lea    rbp,[r8+0x2]
 1011079:	mov    esi,0x1
 101107e:	test   rbx,rbx
 1011081:	je     0x1011091
 1011083:	lea    r8d,[r14+r14*1]
 1011087:	mov    rdx,rbx
 101108a:	call   0x100dd0e
 101108f:	jmp    0x10110e6
 1011091:	mov    r9d,DWORD PTR [rip+0xa200]        # 0x101b298
 1011098:	mov    r8,QWORD PTR [rip+0xa1f1]        # 0x101b290
 101109f:	mov    rax,rcx
 10110a2:	sub    rax,r12
 10110a5:	mov    edx,esi
 10110a7:	sar    rax,1
 10110aa:	sub    r11d,eax
 10110ad:	mov    DWORD PTR [rsp+0x28],r11d
 10110b2:	mov    QWORD PTR [rsp+0x20],rcx
 10110b7:	mov    ecx,0x400
 10110bc:	call   QWORD PTR [rip+0xffffffffffff00b6]        # 0x1001178
 10110c2:	lea    r8d,[r14+r14*1]
 10110c6:	lea    rdx,[rip+0xffffffffffff2c4b]        # 0x1003d18
 10110cd:	cmp    eax,0x2
 10110d0:	mov    ebx,r13d
 10110d3:	mov    rcx,rbp
 10110d6:	cmove  ebx,esi
 10110d9:	call   0x100dd0e
 10110de:	test   ebx,ebx
 10110e0:	jne    0x10111af
 10110e6:	mov    rcx,r12
 10110e9:	call   QWORD PTR [rip+0xfffffffffffeffa1]        # 0x1001090
 10110ef:	cmp    eax,0xffffffff
 10110f2:	je     0x10111af
 10110f8:	lea    rbx,[rip+0xaee1]        # 0x101bfe0
 10110ff:	mov    rdx,r12
 1011102:	mov    r8d,0x208
 1011108:	mov    rcx,rbx
 101110b:	call   0x100dd0e
 1011110:	mov    rax,rdi
 1011113:	inc    rax
 1011116:	cmp    WORD PTR [rbx+rax*2],r13w
 101111b:	jne    0x1011113
 101111d:	dec    rax
 1011120:	cmp    WORD PTR [rbx+rax*2],0x5c
 1011125:	lea    rax,[rbx+rax*2]
 1011129:	je     0x101113f
 101112b:	nop    DWORD PTR [rax+rax*1+0x0]
 1011130:	cmp    rax,rbx
 1011133:	jbe    0x101113f
 1011135:	sub    rax,0x2
 1011139:	cmp    WORD PTR [rax],0x5c
 101113d:	jne    0x1011130
 101113f:	mov    WORD PTR [rax],r13w
 1011143:	sub    rax,rbx
 1011146:	mov    rcx,rbx
 1011149:	sar    rax,1
 101114c:	inc    eax
 101114e:	mov    DWORD PTR [rip+0xaa50],eax        # 0x101bba4
 1011154:	call   0x1010c10
 1011159:	lea    rbx,[rip+0xac70]        # 0x101bdd0
 1011160:	mov    rcx,rbx
 1011163:	mov    rdx,r12
 1011166:	mov    r8d,0x208
 101116c:	call   0x100dd0e
 1011171:	inc    rdi
 1011174:	cmp    WORD PTR [rbx+rdi*2],r13w
 1011179:	jne    0x1011171
 101117b:	mov    eax,edi
 101117d:	mov    rcx,rbx
 1011180:	lea    rdx,[rbx+rax*2]
 1011184:	mov    rax,QWORD PTR [rip+0xffffffffffff2a9d]        # 0x1003c28
 101118b:	mov    QWORD PTR [rdx],rax
 101118e:	movzx  eax,WORD PTR [rip+0xffffffffffff2a9b]        # 0x1003c30
 1011195:	mov    WORD PTR [rdx+0x8],ax
 1011199:	call   0x1010c10
 101119e:	mov    DWORD PTR [rip+0xaa0b],r15d        # 0x101bbb0
 10111a5:	mov    DWORD PTR [rip+0xa9f5],esi        # 0x101bba0
 10111ab:	mov    eax,esi
 10111ad:	jmp    0x10111b1
 10111af:	xor    eax,eax
 10111b1:	mov    r13,QWORD PTR [rsp+0x38]
 10111b6:	mov    rbp,QWORD PTR [rsp+0x60]
 10111bb:	mov    rdi,QWORD PTR [rsp+0x68]
 10111c0:	mov    r12,QWORD PTR [rsp+0x70]
 10111c5:	mov    r14,QWORD PTR [rsp+0x30]
 10111ca:	add    rsp,0x40
 10111ce:	pop    r15
 10111d0:	pop    rsi
 10111d1:	pop    rbx
 10111d2:	ret    
 10111d3:	int3   
 10111d4:	int3   
 10111d5:	int3   
 10111d6:	int3   
 10111d7:	int3   
 10111d8:	int3   
 10111d9:	int3   
 10111da:	int3   
 10111db:	int3   
 10111dc:	int3   
 10111dd:	int3   
 10111de:	int3   
 10111df:	int3   
 10111e0:	sub    rsp,0x58
 10111e4:	lea    rdx,[rsp+0x20]
 10111e9:	lea    rcx,[rip+0xfffffffffffffff0]        # 0x10111e0
 10111f0:	mov    r8d,0x30
 10111f6:	call   QWORD PTR [rip+0xfffffffffffeff5c]        # 0x1001158
 10111fc:	test   rax,rax
 10111ff:	jne    0x1011206
 1011201:	add    rsp,0x58
 1011205:	ret    
 1011206:	mov    QWORD PTR [rsp+0x50],rbx
 101120b:	mov    rbx,QWORD PTR [rsp+0x28]
 1011210:	xor    r8d,r8d
 1011213:	mov    rcx,rbx
 1011216:	xor    edx,edx
 1011218:	call   0x1010fa0
 101121d:	test   eax,eax
 101121f:	jne    0x1011242
 1011221:	lea    r8d,[rax+0x1]
 1011225:	lea    rdx,[rip+0xffffffffffff2af4]        # 0x1003d20
 101122c:	mov    rcx,rbx
 101122f:	call   0x1010fa0
 1011234:	test   eax,eax
 1011236:	jne    0x1011242
 1011238:	mov    rbx,QWORD PTR [rsp+0x50]
 101123d:	add    rsp,0x58
 1011241:	ret    
 1011242:	mov    eax,0x1
 1011247:	mov    rbx,QWORD PTR [rsp+0x50]
 101124c:	add    rsp,0x58
 1011250:	ret    
 1011251:	int3   
 1011252:	int3   
 1011253:	int3   
 1011254:	int3   
 1011255:	int3   
 1011256:	int3   
 1011257:	int3   
 1011258:	int3   
 1011259:	int3   
 101125a:	int3   
 101125b:	int3   
 101125c:	int3   
 101125d:	int3   
 101125e:	int3   
 101125f:	int3   
 1011260:	rex push rbx
 1011262:	sub    rsp,0x20
 1011266:	cmp    DWORD PTR [rip+0xa933],0x0        # 0x101bba0
 101126d:	mov    rbx,rcx
 1011270:	jne    0x1011278
 1011272:	call   QWORD PTR [rip+0xfffffffffffefed0]        # 0x1001148
 1011278:	cmp    rbx,0xffffffff80000000
 101127f:	jne    0x101128e
 1011281:	lea    rax,[rip+0xffffffffffff2ab8]        # 0x1003d40
 1011288:	add    rsp,0x20
 101128c:	pop    rbx
 101128d:	ret    
 101128e:	cmp    rbx,0xffffffff80000001
 1011295:	jne    0x10112a4
 1011297:	lea    rax,[rip+0xffffffffffff2aca]        # 0x1003d68
 101129e:	add    rsp,0x20
 10112a2:	pop    rbx
 10112a3:	ret    
 10112a4:	cmp    rbx,0xffffffff80000002
 10112ab:	jne    0x10112ba
 10112ad:	lea    rax,[rip+0xffffffffffff2adc]        # 0x1003d90
 10112b4:	add    rsp,0x20
 10112b8:	pop    rbx
 10112b9:	ret    
 10112ba:	cmp    rbx,0xffffffff80000003
 10112c1:	jne    0x10112d0
 10112c3:	lea    rax,[rip+0xffffffffffff2aee]        # 0x1003db8
 10112ca:	add    rsp,0x20
 10112ce:	pop    rbx
 10112cf:	ret    
 10112d0:	cmp    rbx,0xffffffff80000004
 10112d7:	jne    0x10112e6
 10112d9:	lea    rax,[rip+0xffffffffffff2af0]        # 0x1003dd0
 10112e0:	add    rsp,0x20
 10112e4:	pop    rbx
 10112e5:	ret    
 10112e6:	cmp    rbx,0xffffffff80000005
 10112ed:	jne    0x10112fc
 10112ef:	lea    rax,[rip+0xffffffffffff2b0a]        # 0x1003e00
 10112f6:	add    rsp,0x20
 10112fa:	pop    rbx
 10112fb:	ret    
 10112fc:	lea    rax,[rip+0xffffffffffff2b25]        # 0x1003e28
 1011303:	cmp    rbx,0xffffffff80000006
 101130a:	je     0x101130f
 101130c:	mov    rax,rbx
 101130f:	add    rsp,0x20
 1011313:	pop    rbx
 1011314:	ret    
 1011315:	int3   
 1011316:	int3   
 1011317:	int3   
 1011318:	int3   
 1011319:	int3   
 101131a:	int3   
 101131b:	int3   
 101131c:	int3   
 101131d:	int3   
 101131e:	int3   
 101131f:	int3   
 1011320:	mov    QWORD PTR [rsp+0x8],rbx
 1011325:	mov    QWORD PTR [rsp+0x10],rbp
 101132a:	mov    QWORD PTR [rsp+0x18],rsi
 101132f:	push   rdi
 1011330:	push   r14
 1011332:	push   r15
 1011334:	sub    rsp,0x20
 1011338:	mov    rbp,rdx
 101133b:	call   0x1011260
 1011340:	or     rbx,0xffffffffffffffff
 1011344:	mov    r14,rax
 1011347:	mov    rsi,rbx
 101134a:	nop    WORD PTR [rax+rax*1+0x0]
 1011350:	inc    rsi
 1011353:	cmp    WORD PTR [rax+rsi*2],0x0
 1011358:	jne    0x1011350
 101135a:	add    rsi,rsi
 101135d:	nop    DWORD PTR [rax]
 1011360:	inc    rbx
 1011363:	cmp    WORD PTR [rbp+rbx*2+0x0],0x0
 1011369:	jne    0x1011360
 101136b:	add    rbx,rbx
 101136e:	lea    rdi,[rsi+0x4]
 1011372:	call   QWORD PTR [rip+0xfffffffffffefe58]        # 0x10011d0
 1011378:	lea    r8,[rdi+rbx*1]
 101137c:	xor    edx,edx
 101137e:	mov    rcx,rax
 1011381:	call   QWORD PTR [rip+0xfffffffffffefe69]        # 0x10011f0
 1011387:	mov    r15,rax
 101138a:	test   rax,rax
 101138d:	je     0x10113c8
 101138f:	mov    r8d,esi
 1011392:	mov    rdx,r14
 1011395:	mov    rcx,rax
 1011398:	call   0x100dd0e
 101139d:	mov    eax,0x5c
 10113a2:	shr    rsi,1
 10113a5:	lea    rdi,[r15+rsi*2]
 10113a9:	mov    r8d,ebx
 10113ac:	mov    rdx,rbp
 10113af:	lea    rcx,[rdi+0x2]
 10113b3:	mov    WORD PTR [rdi],ax
 10113b6:	call   0x100dd0e
 10113bb:	shr    rbx,1
 10113be:	xor    eax,eax
 10113c0:	mov    WORD PTR [rdi+rbx*2+0x2],ax
 10113c5:	mov    rax,r15
 10113c8:	mov    rbx,QWORD PTR [rsp+0x40]
 10113cd:	mov    rbp,QWORD PTR [rsp+0x48]
 10113d2:	mov    rsi,QWORD PTR [rsp+0x50]
 10113d7:	add    rsp,0x20
 10113db:	pop    r15
 10113dd:	pop    r14
 10113df:	pop    rdi
 10113e0:	ret    
 10113e1:	int3   
 10113e2:	int3   
 10113e3:	int3   
 10113e4:	int3   
 10113e5:	int3   
 10113e6:	int3   
 10113e7:	int3   
 10113e8:	int3   
 10113e9:	int3   
 10113ea:	int3   
 10113eb:	int3   
 10113ec:	int3   
 10113ed:	int3   
 10113ee:	int3   
 10113ef:	int3   
 10113f0:	mov    QWORD PTR [rsp+0x10],rbx
 10113f5:	mov    QWORD PTR [rsp+0x18],rbp
 10113fa:	mov    QWORD PTR [rsp+0x20],rsi
 10113ff:	push   rdi
 1011400:	push   r14
 1011402:	push   r15
 1011404:	sub    rsp,0x30
 1011408:	mov    r14,rcx
 101140b:	mov    r15d,0x80
 1011411:	or     rbx,0xffffffffffffffff
 1011415:	inc    rbx
 1011418:	cmp    WORD PTR [rcx+rbx*2],0x0
 101141d:	jne    0x1011415
 101141f:	lea    esi,[rbx+0x80]
 1011425:	mov    edi,esi
 1011427:	add    rdi,rdi
 101142a:	call   QWORD PTR [rip+0xfffffffffffefda0]        # 0x10011d0
 1011430:	mov    r8,rdi
 1011433:	mov    rcx,rax
 1011436:	xor    edx,edx
 1011438:	call   QWORD PTR [rip+0xfffffffffffefdb2]        # 0x10011f0
 101143e:	mov    rbp,rax
 1011441:	test   rax,rax
 1011444:	je     0x1011506
 101144a:	mov    QWORD PTR [rsp+0x50],r12
 101144f:	lea    r12,[rip+0xffffffffffff27c2]        # 0x1003c18
 1011456:	data16 nop WORD PTR [rax+rax*1+0x0]
 1011460:	mov    r9d,ebx
 1011463:	mov    r8,r14
 1011466:	mov    edx,0x1
 101146b:	mov    ecx,0x400
 1011470:	mov    DWORD PTR [rsp+0x28],0x5
 1011478:	mov    QWORD PTR [rsp+0x20],r12
 101147d:	call   QWORD PTR [rip+0xfffffffffffefcf5]        # 0x1001178
 1011483:	cmp    eax,0x2
 1011486:	jne    0x10114a7
 1011488:	mov    edi,DWORD PTR [rip+0xa716]        # 0x101bba4
 101148e:	cmp    edi,esi
 1011490:	ja     0x10114ba
 1011492:	lea    r8d,[rdi+rdi*1]
 1011496:	lea    rdx,[rip+0xab43]        # 0x101bfe0
 101149d:	mov    rcx,rbp
 10114a0:	call   0x100dd0e
 10114a5:	jmp    0x10114b8
 10114a7:	mov    r8d,esi
 10114aa:	mov    rdx,rbp
 10114ad:	mov    rcx,r14
 10114b0:	call   QWORD PTR [rip+0xfffffffffffefc8a]        # 0x1001140
 10114b6:	mov    edi,eax
 10114b8:	cmp    edi,esi
 10114ba:	jle    0x10114fe
 10114bc:	add    r15d,r15d
 10114bf:	lea    esi,[rbx+r15*1]
 10114c3:	call   QWORD PTR [rip+0xfffffffffffefd07]        # 0x10011d0
 10114c9:	mov    r8,rbp
 10114cc:	mov    rcx,rax
 10114cf:	xor    edx,edx
 10114d1:	call   QWORD PTR [rip+0xfffffffffffefd11]        # 0x10011e8
 10114d7:	mov    edi,esi
 10114d9:	add    rdi,rdi
 10114dc:	call   QWORD PTR [rip+0xfffffffffffefcee]        # 0x10011d0
 10114e2:	mov    r8,rdi
 10114e5:	mov    rcx,rax
 10114e8:	xor    edx,edx
 10114ea:	call   QWORD PTR [rip+0xfffffffffffefd00]        # 0x10011f0
 10114f0:	mov    rbp,rax
 10114f3:	test   rax,rax
 10114f6:	jne    0x1011460
 10114fc:	jmp    0x1011501
 10114fe:	mov    rax,rbp
 1011501:	mov    r12,QWORD PTR [rsp+0x50]
 1011506:	mov    rbx,QWORD PTR [rsp+0x58]
 101150b:	mov    rbp,QWORD PTR [rsp+0x60]
 1011510:	mov    rsi,QWORD PTR [rsp+0x68]
 1011515:	add    rsp,0x30
 1011519:	pop    r15
 101151b:	pop    r14
 101151d:	pop    rdi
 101151e:	ret    
 101151f:	int3   
 1011520:	int3   
 1011521:	int3   
 1011522:	int3   
 1011523:	int3   
 1011524:	int3   
 1011525:	int3   
 1011526:	int3   
 1011527:	int3   
 1011528:	int3   
 1011529:	int3   
 101152a:	int3   
 101152b:	int3   
 101152c:	int3   
 101152d:	int3   
 101152e:	int3   
 101152f:	int3   
 1011530:	mov    QWORD PTR [rsp+0x20],rbx
 1011535:	push   rbp
 1011536:	push   rsi
 1011537:	push   rdi
 1011538:	sub    rsp,0x30
 101153c:	mov    rsi,rdx
 101153f:	mov    rbp,rcx
 1011542:	mov    edi,0x80
 1011547:	call   QWORD PTR [rip+0xfffffffffffefc83]        # 0x10011d0
 101154d:	xor    edx,edx
 101154f:	mov    r8d,0x100
 1011555:	mov    rcx,rax
 1011558:	call   QWORD PTR [rip+0xfffffffffffefc92]        # 0x10011f0
 101155e:	mov    rbx,rax
 1011561:	test   rax,rax
 1011564:	je     0x101165b
 101156a:	mov    QWORD PTR [rsp+0x50],r12
 101156f:	mov    QWORD PTR [rsp+0x58],r14
 1011574:	mov    QWORD PTR [rsp+0x60],r15
 1011579:	lea    r15,[rip+0xa640]        # 0x101bbc0
 1011580:	lea    r12,[rip+0xa849]        # 0x101bdd0
 1011587:	mov    r14d,0xffff
 101158d:	nop    DWORD PTR [rax]
 1011590:	test   rbp,rbp
 1011593:	je     0x10115d5
 1011595:	test   rsi,rsi
 1011598:	je     0x10115d5
 101159a:	lea    r8,[rip+0xffffffffffff2683]        # 0x1003c24
 10115a1:	mov    r9,rbx
 10115a4:	mov    rdx,rsi
 10115a7:	mov    rcx,rbp
 10115aa:	mov    QWORD PTR [rsp+0x28],r12
 10115af:	mov    DWORD PTR [rsp+0x20],edi
 10115b3:	call   QWORD PTR [rip+0xfffffffffffefb7f]        # 0x1001138
 10115b9:	lea    ecx,[rdi-0x1]
 10115bc:	mov    r11d,eax
 10115bf:	cmp    eax,ecx
 10115c1:	je     0x10115d0
 10115c3:	cmp    WORD PTR [rbx],r14w
 10115c7:	jne    0x10115d0
 10115c9:	cmp    WORD PTR [rbx+0x2],0x0
 10115ce:	je     0x10115d5
 10115d0:	cmp    eax,0xffffffff
 10115d3:	jne    0x10115f7
 10115d5:	lea    r8,[rip+0xffffffffffff2648]        # 0x1003c24
 10115dc:	mov    r9,rbx
 10115df:	mov    rdx,rsi
 10115e2:	mov    rcx,rbp
 10115e5:	mov    QWORD PTR [rsp+0x28],r15
 10115ea:	mov    DWORD PTR [rsp+0x20],edi
 10115ee:	call   QWORD PTR [rip+0xfffffffffffefb44]        # 0x1001138
 10115f4:	mov    r11d,eax
 10115f7:	test   rbp,rbp
 10115fa:	je     0x1011604
 10115fc:	lea    eax,[rdi-0x1]
 10115ff:	test   rsi,rsi
 1011602:	jne    0x1011607
 1011604:	lea    eax,[rdi-0x2]
 1011607:	cmp    r11d,eax
 101160a:	jne    0x1011649
 101160c:	add    edi,edi
 101160e:	call   QWORD PTR [rip+0xfffffffffffefbbc]        # 0x10011d0
 1011614:	mov    r8,rbx
 1011617:	mov    rcx,rax
 101161a:	xor    edx,edx
 101161c:	call   QWORD PTR [rip+0xfffffffffffefbc6]        # 0x10011e8
 1011622:	mov    ebx,edi
 1011624:	add    rbx,rbx
 1011627:	call   QWORD PTR [rip+0xfffffffffffefba3]        # 0x10011d0
 101162d:	mov    r8,rbx
 1011630:	mov    rcx,rax
 1011633:	xor    edx,edx
 1011635:	call   QWORD PTR [rip+0xfffffffffffefbb5]        # 0x10011f0
 101163b:	mov    rbx,rax
 101163e:	test   rax,rax
 1011641:	jne    0x1011590
 1011647:	jmp    0x101164c
 1011649:	mov    rax,rbx
 101164c:	mov    r14,QWORD PTR [rsp+0x58]
 1011651:	mov    r12,QWORD PTR [rsp+0x50]
 1011656:	mov    r15,QWORD PTR [rsp+0x60]
 101165b:	mov    rbx,QWORD PTR [rsp+0x68]
 1011660:	add    rsp,0x30
 1011664:	pop    rdi
 1011665:	pop    rsi
 1011666:	pop    rbp
 1011667:	ret    
 1011668:	int3   
 1011669:	int3   
 101166a:	int3   
 101166b:	int3   
 101166c:	int3   
 101166d:	int3   
 101166e:	int3   
 101166f:	int3   
 1011670:	rex push rdi
 1011672:	push   r12
 1011674:	push   r13
 1011676:	sub    rsp,0x40
 101167a:	mov    r13,rdx
 101167d:	mov    r12,rcx
 1011680:	call   0x1011530
 1011685:	mov    rdi,rax
 1011688:	test   rax,rax
 101168b:	je     0x101179c
 1011691:	test   r13,r13
 1011694:	je     0x101179c
 101169a:	test   r12,r12
 101169d:	je     0x101179c
 10116a3:	mov    QWORD PTR [rsp+0x60],rbx
 10116a8:	mov    QWORD PTR [rsp+0x68],rbp
 10116ad:	mov    QWORD PTR [rsp+0x70],rsi
 10116b2:	mov    eax,0xffff
 10116b7:	mov    QWORD PTR [rsp+0x38],r14
 10116bc:	mov    QWORD PTR [rsp+0x30],r15
 10116c1:	cmp    WORD PTR [rdi],ax
 10116c4:	jne    0x101174d
 10116ca:	cmp    WORD PTR [rdi+0x2],0x0
 10116cf:	jne    0x101174d
 10116d1:	cmp    DWORD PTR [rip+0xa4d8],0x0        # 0x101bbb0
 10116d8:	je     0x101174d
 10116da:	or     rbp,0xffffffffffffffff
 10116de:	mov    rbx,rbp
 10116e1:	inc    rbx
 10116e4:	cmp    WORD PTR [r12+rbx*2],0x0
 10116ea:	jne    0x10116e1
 10116ec:	mov    rsi,rbp
 10116ef:	nop
 10116f0:	inc    rsi
 10116f3:	cmp    WORD PTR [r13+rsi*2+0x0],0x0
 10116fa:	jne    0x10116f0
 10116fc:	xor    r14d,r14d
 10116ff:	lea    r15,[rip+0x9b9a]        # 0x101b2a0
 1011706:	data16 nop WORD PTR [rax+rax*1+0x0]
 1011710:	mov    rcx,QWORD PTR [r15]
 1011713:	mov    eax,DWORD PTR [r15+0x8]
 1011717:	mov    r9d,ebx
 101171a:	mov    DWORD PTR [rsp+0x28],eax
 101171e:	mov    QWORD PTR [rsp+0x20],rcx
 1011723:	mov    r8,r12
 1011726:	mov    ecx,0x400
 101172b:	mov    edx,0x1
 1011730:	call   QWORD PTR [rip+0xfffffffffffefa42]        # 0x1001178
 1011736:	cmp    eax,0x2
 1011739:	je     0x10117a6
 101173b:	inc    r14d
 101173e:	add    r15,0x20
 1011742:	cmp    r14d,0x1
 1011746:	jb     0x1011710
 1011748:	mov    eax,0xffff
 101174d:	test   rdi,rdi
 1011750:	je     0x1011780
 1011752:	cmp    WORD PTR [rdi],ax
 1011755:	jne    0x101175e
 1011757:	cmp    WORD PTR [rdi+0x2],0x0
 101175c:	je     0x1011780
 101175e:	mov    rcx,rdi
 1011761:	call   0x10113f0
 1011766:	mov    rbx,rax
 1011769:	call   QWORD PTR [rip+0xfffffffffffefa61]        # 0x10011d0
 101176f:	mov    r8,rdi
 1011772:	mov    rcx,rax
 1011775:	xor    edx,edx
 1011777:	call   QWORD PTR [rip+0xfffffffffffefa6b]        # 0x10011e8
 101177d:	mov    rdi,rbx
 1011780:	mov    r15,QWORD PTR [rsp+0x30]
 1011785:	mov    r14,QWORD PTR [rsp+0x38]
 101178a:	mov    rsi,QWORD PTR [rsp+0x70]
 101178f:	mov    rbp,QWORD PTR [rsp+0x68]
 1011794:	mov    rbx,QWORD PTR [rsp+0x60]
 1011799:	mov    rax,rdi
 101179c:	add    rsp,0x40
 10117a0:	pop    r13
 10117a2:	pop    r12
 10117a4:	pop    rdi
 10117a5:	ret    
 10117a6:	lea    rcx,[rip+0x9af3]        # 0x101b2a0
 10117ad:	movsxd rbx,r14d
 10117b0:	shl    rbx,0x5
 10117b4:	add    rbx,rcx
 10117b7:	mov    rcx,QWORD PTR [rbx+0x10]
 10117bb:	call   0x10113f0
 10117c0:	test   rax,rax
 10117c3:	je     0x101181f
 10117c5:	inc    rbp
 10117c8:	cmp    WORD PTR [rax+rbp*2],0x0
 10117cd:	jne    0x10117c5
 10117cf:	mov    r9d,ebp
 10117d2:	mov    r8,rax
 10117d5:	mov    edx,0x1
 10117da:	mov    ecx,0x400
 10117df:	mov    DWORD PTR [rsp+0x28],esi
 10117e3:	mov    QWORD PTR [rsp+0x20],r13
 10117e8:	call   QWORD PTR [rip+0xfffffffffffef98a]        # 0x1001178
 10117ee:	cmp    eax,0x2
 10117f1:	jne    0x1011748
 10117f7:	call   QWORD PTR [rip+0xfffffffffffef9d3]        # 0x10011d0
 10117fd:	mov    r8,rdi
 1011800:	xor    edx,edx
 1011802:	mov    rcx,rax
 1011805:	call   QWORD PTR [rip+0xfffffffffffef9dd]        # 0x10011e8
 101180b:	mov    rdx,QWORD PTR [rbx+0x10]
 101180f:	mov    rcx,r12
 1011812:	call   0x1011530
 1011817:	mov    rdi,rax
 101181a:	jmp    0x1011748
 101181f:	call   QWORD PTR [rip+0xfffffffffffef9ab]        # 0x10011d0
 1011825:	mov    r8,rdi
 1011828:	xor    edx,edx
 101182a:	mov    rcx,rax
 101182d:	call   QWORD PTR [rip+0xfffffffffffef9b5]        # 0x10011e8
 1011833:	xor    edi,edi
 1011835:	jmp    0x1011780
 101183a:	int3   
 101183b:	int3   
 101183c:	int3   
 101183d:	int3   
 101183e:	int3   
 101183f:	int3   
 1011840:	rex push rbx
 1011842:	sub    rsp,0x20
 1011846:	cmp    DWORD PTR [rip+0xa353],0x0        # 0x101bba0
 101184d:	mov    rbx,rcx
 1011850:	je     0x10118b5
 1011852:	cmp    rcx,0xffffffff80000000
 1011859:	je     0x10118a5
 101185b:	cmp    rcx,0xffffffff80000001
 1011862:	je     0x10118a5
 1011864:	cmp    rcx,0xffffffff80000002
 101186b:	je     0x10118a5
 101186d:	cmp    rcx,0xffffffff80000003
 1011874:	je     0x10118a5
 1011876:	cmp    rcx,0xffffffff80000004
 101187d:	je     0x10118a5
 101187f:	cmp    rcx,0xffffffff80000005
 1011886:	je     0x10118a5
 1011888:	cmp    rcx,0xffffffff80000006
 101188f:	je     0x10118a5
 1011891:	call   QWORD PTR [rip+0xfffffffffffef939]        # 0x10011d0
 1011897:	mov    r8,rbx
 101189a:	xor    edx,edx
 101189c:	mov    rcx,rax
 101189f:	call   QWORD PTR [rip+0xfffffffffffef943]        # 0x10011e8
 10118a5:	xor    ecx,ecx
 10118a7:	call   QWORD PTR [rip+0xfffffffffffef8a3]        # 0x1001150
 10118ad:	xor    eax,eax
 10118af:	add    rsp,0x20
 10118b3:	pop    rbx
 10118b4:	ret    
 10118b5:	add    rsp,0x20
 10118b9:	pop    rbx
 10118ba:	rex.W jmp QWORD PTR [rip+0xfffffffffffef73f]        # 0x1001000
 10118c1:	int3   
 10118c2:	int3   
 10118c3:	int3   
 10118c4:	int3   
 10118c5:	int3   
 10118c6:	int3   
 10118c7:	int3   
 10118c8:	int3   
 10118c9:	int3   
 10118ca:	int3   
 10118cb:	int3   
 10118cc:	int3   
 10118cd:	int3   
 10118ce:	int3   
 10118cf:	int3   
 10118d0:	rex push rdi
 10118d2:	sub    rsp,0x20
 10118d6:	mov    rdi,rdx
 10118d9:	cmp    rcx,0xffffffff80000000
 10118e0:	je     0x10119bc
 10118e6:	cmp    rcx,0xffffffff80000001
 10118ed:	je     0x10119bc
 10118f3:	cmp    rcx,0xffffffff80000002
 10118fa:	je     0x10119bc
 1011900:	cmp    rcx,0xffffffff80000003
 1011907:	je     0x10119bc
 101190d:	cmp    rcx,0xffffffff80000004
 1011914:	je     0x10119bc
 101191a:	cmp    rcx,0xffffffff80000005
 1011921:	je     0x10119bc
 1011927:	cmp    rcx,0xffffffff80000006
 101192e:	je     0x10119bc
 1011934:	mov    QWORD PTR [rsp+0x30],rbx
 1011939:	mov    QWORD PTR [rsp+0x38],rbp
 101193e:	mov    QWORD PTR [rsp+0x40],rsi
 1011943:	call   0x1011260
 1011948:	or     rcx,0xffffffffffffffff
 101194c:	mov    rbx,rax
 101194f:	nop
 1011950:	inc    rcx
 1011953:	cmp    WORD PTR [rax+rcx*2],0x0
 1011958:	jne    0x1011950
 101195a:	lea    rbp,[rcx*2+0x2]
 1011962:	call   QWORD PTR [rip+0xfffffffffffef868]        # 0x10011d0
 1011968:	mov    r8,rbp
 101196b:	mov    rcx,rax
 101196e:	xor    edx,edx
 1011970:	call   QWORD PTR [rip+0xfffffffffffef87a]        # 0x10011f0
 1011976:	mov    rsi,rax
 1011979:	test   rax,rax
 101197c:	jne    0x101199f
 101197e:	lea    ecx,[rax+0x8]
 1011981:	call   QWORD PTR [rip+0xfffffffffffef7c9]        # 0x1001150
 1011987:	lea    eax,[rsi+0x8]
 101198a:	mov    rbp,QWORD PTR [rsp+0x38]
 101198f:	mov    rbx,QWORD PTR [rsp+0x30]
 1011994:	mov    rsi,QWORD PTR [rsp+0x40]
 1011999:	add    rsp,0x20
 101199d:	pop    rdi
 101199e:	ret    
 101199f:	mov    r8d,ebp
 10119a2:	mov    rdx,rbx
 10119a5:	mov    rcx,rax
 10119a8:	call   0x100dd0e
 10119ad:	xor    ecx,ecx
 10119af:	mov    QWORD PTR [rdi],rsi
 10119b2:	call   QWORD PTR [rip+0xfffffffffffef798]        # 0x1001150
 10119b8:	xor    eax,eax
 10119ba:	jmp    0x101198a
 10119bc:	mov    QWORD PTR [rdx],rcx
 10119bf:	xor    ecx,ecx
 10119c1:	call   QWORD PTR [rip+0xfffffffffffef789]        # 0x1001150
 10119c7:	xor    eax,eax
 10119c9:	add    rsp,0x20
 10119cd:	pop    rdi
 10119ce:	ret    
 10119cf:	int3   
 10119d0:	int3   
 10119d1:	int3   
 10119d2:	int3   
 10119d3:	int3   
 10119d4:	int3   
 10119d5:	int3   
 10119d6:	int3   
 10119d7:	int3   
 10119d8:	int3   
 10119d9:	int3   
 10119da:	int3   
 10119db:	int3   
 10119dc:	int3   
 10119dd:	int3   
 10119de:	int3   
 10119df:	int3   
 10119e0:	push   r14
 10119e2:	sub    rsp,0x20
 10119e6:	cmp    DWORD PTR [rip+0xa1b3],0x0        # 0x101bba0
 10119ed:	mov    r14,r8
 10119f0:	je     0x1011af3
 10119f6:	test   rdx,rdx
 10119f9:	je     0x1011ae5
 10119ff:	cmp    WORD PTR [rdx],0x0
 1011a03:	je     0x1011ae5
 1011a09:	mov    QWORD PTR [rsp+0x30],rbx
 1011a0e:	mov    QWORD PTR [rsp+0x38],rsi
 1011a13:	call   0x1011320
 1011a18:	mov    rsi,rax
 1011a1b:	test   rax,rax
 1011a1e:	jne    0x1011a40
 1011a20:	mov    ebx,0x8
 1011a25:	mov    ecx,ebx
 1011a27:	call   QWORD PTR [rip+0xfffffffffffef723]        # 0x1001150
 1011a2d:	mov    rsi,QWORD PTR [rsp+0x38]
 1011a32:	mov    eax,ebx
 1011a34:	mov    rbx,QWORD PTR [rsp+0x30]
 1011a39:	add    rsp,0x20
 1011a3d:	pop    r14
 1011a3f:	ret    
 1011a40:	xor    edx,edx
 1011a42:	mov    rcx,rax
 1011a45:	mov    QWORD PTR [rsp+0x40],rdi
 1011a4a:	call   0x1011530
 1011a4f:	mov    rdi,rax
 1011a52:	test   rax,rax
 1011a55:	je     0x1011aac
 1011a57:	mov    eax,0xffff
 1011a5c:	cmp    WORD PTR [rdi],ax
 1011a5f:	jne    0x1011a6f
 1011a61:	cmp    WORD PTR [rdi+0x2],0x0
 1011a66:	jne    0x1011a6f
 1011a68:	mov    ebx,0x2
 1011a6d:	jmp    0x1011a71
 1011a6f:	xor    ebx,ebx
 1011a71:	call   QWORD PTR [rip+0xfffffffffffef759]        # 0x10011d0
 1011a77:	mov    r8,rdi
 1011a7a:	xor    edx,edx
 1011a7c:	mov    rcx,rax
 1011a7f:	call   QWORD PTR [rip+0xfffffffffffef763]        # 0x10011e8
 1011a85:	test   ebx,ebx
 1011a87:	jne    0x1011ab1
 1011a89:	mov    ecx,ebx
 1011a8b:	mov    QWORD PTR [r14],rsi
 1011a8e:	call   QWORD PTR [rip+0xfffffffffffef6bc]        # 0x1001150
 1011a94:	mov    rdi,QWORD PTR [rsp+0x40]
 1011a99:	mov    rsi,QWORD PTR [rsp+0x38]
 1011a9e:	mov    eax,ebx
 1011aa0:	mov    rbx,QWORD PTR [rsp+0x30]
 1011aa5:	add    rsp,0x20
 1011aa9:	pop    r14
 1011aab:	ret    
 1011aac:	mov    ebx,0x8
 1011ab1:	call   QWORD PTR [rip+0xfffffffffffef719]        # 0x10011d0
 1011ab7:	mov    r8,rsi
 1011aba:	xor    edx,edx
 1011abc:	mov    rcx,rax
 1011abf:	call   QWORD PTR [rip+0xfffffffffffef723]        # 0x10011e8
 1011ac5:	mov    ecx,ebx
 1011ac7:	call   QWORD PTR [rip+0xfffffffffffef683]        # 0x1001150
 1011acd:	mov    rdi,QWORD PTR [rsp+0x40]
 1011ad2:	mov    rsi,QWORD PTR [rsp+0x38]
 1011ad7:	mov    eax,ebx
 1011ad9:	mov    rbx,QWORD PTR [rsp+0x30]
 1011ade:	add    rsp,0x20
 1011ae2:	pop    r14
 1011ae4:	ret    
 1011ae5:	mov    rdx,r8
 1011ae8:	add    rsp,0x20
 1011aec:	pop    r14
 1011aee:	jmp    0x10118d0
 1011af3:	add    rsp,0x20
 1011af7:	pop    r14
 1011af9:	rex.W jmp QWORD PTR [rip+0xfffffffffffef518]        # 0x1001018
 1011b00:	int3   
 1011b01:	int3   
 1011b02:	int3   
 1011b03:	int3   
 1011b04:	int3   
 1011b05:	int3   
 1011b06:	int3   
 1011b07:	int3   
 1011b08:	int3   
 1011b09:	int3   
 1011b0a:	int3   
 1011b0b:	int3   
 1011b0c:	int3   
 1011b0d:	int3   
 1011b0e:	int3   
 1011b0f:	int3   
 1011b10:	mov    rax,QWORD PTR [rcx]
 1011b13:	xor    edx,edx
 1011b15:	rex.W jmp QWORD PTR [rax+0x18]
 1011b19:	int3   
 1011b1a:	int3   
 1011b1b:	int3   
 1011b1c:	int3   
 1011b1d:	int3   
 1011b1e:	int3   
 1011b1f:	int3   
 1011b20:	lea    rax,[rcx+0x10]
 1011b24:	ret    
 1011b25:	int3   
 1011b26:	int3   
 1011b27:	int3   
 1011b28:	int3   
 1011b29:	int3   
 1011b2a:	int3   
 1011b2b:	int3   
 1011b2c:	int3   
 1011b2d:	int3   
 1011b2e:	int3   
 1011b2f:	int3   
 1011b30:	rex push rbx
 1011b32:	sub    rsp,0x20
 1011b36:	mov    rax,rdx
 1011b39:	xor    ebx,ebx
 1011b3b:	xor    edx,edx
 1011b3d:	mov    rcx,rax
 1011b40:	call   0x1012c00
 1011b45:	jmp    0x1011b60
 1011b47:	mov    ebx,eax
 1011b49:	cmp    eax,0xc00000fd
 1011b4e:	jne    0x1011b56
 1011b50:	call   QWORD PTR [rip+0xfffffffffffefa52]        # 0x10015a8
 1011b56:	mov    eax,0x80004005
 1011b5b:	test   ebx,ebx
 1011b5d:	cmovns ebx,eax
 1011b60:	mov    eax,ebx
 1011b62:	add    rsp,0x20
 1011b66:	pop    rbx
 1011b67:	ret    
 1011b68:	int3   
 1011b69:	int3   
 1011b6a:	int3   
 1011b6b:	int3   
 1011b6c:	int3   
 1011b6d:	int3   
 1011b6e:	int3   
 1011b6f:	int3   
 1011b70:	rex push rbx
 1011b72:	sub    rsp,0x20
 1011b76:	xor    r9d,r9d
 1011b79:	lea    rbx,[rip+0xfffffffffffee480]        # 0x1000000
 1011b80:	mov    r10,r8
 1011b83:	mov    QWORD PTR [r8],r9
 1011b86:	mov    r11,QWORD PTR [rbx+0x35c0]
 1011b8d:	cmp    r11,QWORD PTR [rdx]
 1011b90:	jne    0x1011ba4
 1011b92:	mov    r11,QWORD PTR [rbx+0x35c8]
 1011b99:	cmp    r11,QWORD PTR [rdx+0x8]
 1011b9d:	jne    0x1011ba4
 1011b9f:	mov    eax,r9d
 1011ba2:	jmp    0x1011ba9
 1011ba4:	sbb    eax,eax
 1011ba6:	sbb    eax,0xffffffff
 1011ba9:	test   eax,eax
 1011bab:	jne    0x1011bbe
 1011bad:	mov    QWORD PTR [r8],rcx
 1011bb0:	mov    rax,QWORD PTR [rcx]
 1011bb3:	call   QWORD PTR [rax+0x8]
 1011bb6:	xor    eax,eax
 1011bb8:	add    rsp,0x20
 1011bbc:	pop    rbx
 1011bbd:	ret    
 1011bbe:	mov    r8,QWORD PTR [rbx+0x3f28]
 1011bc5:	cmp    r8,QWORD PTR [rdx]
 1011bc8:	jne    0x1011bd7
 1011bca:	mov    r8,QWORD PTR [rbx+0x3f30]
 1011bd1:	cmp    r8,QWORD PTR [rdx+0x8]
 1011bd5:	je     0x1011bdf
 1011bd7:	sbb    eax,eax
 1011bd9:	sbb    eax,0xffffffff
 1011bdc:	mov    r9d,eax
 1011bdf:	test   r9d,r9d
 1011be2:	jne    0x1011bf5
 1011be4:	mov    QWORD PTR [r10],rcx
 1011be7:	mov    rax,QWORD PTR [rcx]
 1011bea:	call   QWORD PTR [rax+0x8]
 1011bed:	xor    eax,eax
 1011bef:	add    rsp,0x20
 1011bf3:	pop    rbx
 1011bf4:	ret    
 1011bf5:	mov    eax,0x80004002
 1011bfa:	add    rsp,0x20
 1011bfe:	pop    rbx
 1011bff:	ret    
 1011c00:	int3   
 1011c01:	int3   
 1011c02:	int3   
 1011c03:	int3   
 1011c04:	int3   
 1011c05:	int3   
 1011c06:	int3   
 1011c07:	int3   
 1011c08:	int3   
 1011c09:	int3   
 1011c0a:	int3   
 1011c0b:	int3   
 1011c0c:	int3   
 1011c0d:	int3   
 1011c0e:	int3   
 1011c0f:	int3   
 1011c10:	mov    eax,0x1
 1011c15:	ret    
 1011c16:	int3   
 1011c17:	int3   
 1011c18:	int3   
 1011c19:	int3   
 1011c1a:	int3   
 1011c1b:	int3   
 1011c1c:	int3   
 1011c1d:	int3   
 1011c1e:	int3   
 1011c1f:	int3   
 1011c20:	mov    eax,0x1
 1011c25:	ret    
 1011c26:	int3   
 1011c27:	int3   
 1011c28:	int3   
 1011c29:	int3   
 1011c2a:	int3   
 1011c2b:	int3   
 1011c2c:	int3   
 1011c2d:	int3   
 1011c2e:	int3   
 1011c2f:	int3   
 1011c30:	rex push rbx
 1011c32:	sub    rsp,0x20
 1011c36:	add    rcx,0x8
 1011c3a:	mov    rbx,rdx
 1011c3d:	call   0x1012d70
 1011c42:	mov    DWORD PTR [rbx],eax
 1011c44:	xor    eax,eax
 1011c46:	add    rsp,0x20
 1011c4a:	pop    rbx
 1011c4b:	ret    
 1011c4c:	int3   
 1011c4d:	int3   
 1011c4e:	int3   
 1011c4f:	int3   
 1011c50:	int3   
 1011c51:	int3   
 1011c52:	int3   
 1011c53:	int3   
 1011c54:	int3   
 1011c55:	int3   
 1011c56:	int3   
 1011c57:	int3   
 1011c58:	int3   
 1011c59:	int3   
 1011c5a:	int3   
 1011c5b:	int3   
 1011c5c:	int3   
 1011c5d:	int3   
 1011c5e:	int3   
 1011c5f:	int3   
 1011c60:	mov    eax,DWORD PTR [rcx+0x1b50]
 1011c66:	ret    
 1011c67:	int3   
 1011c68:	int3   
 1011c69:	int3   
 1011c6a:	int3   
 1011c6b:	int3   
 1011c6c:	int3   
 1011c6d:	int3   
 1011c6e:	int3   
 1011c6f:	int3   
 1011c70:	mov    QWORD PTR [rcx+0x1b58],rdx
 1011c77:	xor    eax,eax
 1011c79:	ret    
 1011c7a:	int3   
 1011c7b:	int3   
 1011c7c:	int3   
 1011c7d:	int3   
 1011c7e:	int3   
 1011c7f:	int3   
 1011c80:	mov    rax,QWORD PTR [rcx+0x1b58]
 1011c87:	test   rax,rax
 1011c8a:	je     0x1011c92
 1011c8c:	mov    rcx,rdx
 1011c8f:	rex.W jmp rax
 1011c92:	mov    eax,0x80004001
 1011c97:	ret    
 1011c98:	int3   
 1011c99:	int3   
 1011c9a:	int3   
 1011c9b:	int3   
 1011c9c:	int3   
 1011c9d:	int3   
 1011c9e:	int3   
 1011c9f:	int3   
 1011ca0:	lea    rax,[rcx+0x1740]
 1011ca7:	ret    
 1011ca8:	int3   
 1011ca9:	int3   
 1011caa:	int3   
 1011cab:	int3   
 1011cac:	int3   
 1011cad:	int3   
 1011cae:	int3   
 1011caf:	int3   
 1011cb0:	mov    QWORD PTR [rsp+0x8],rbx
 1011cb5:	mov    QWORD PTR [rsp+0x10],rsi
 1011cba:	push   rdi
 1011cbb:	push   r12
 1011cbd:	push   r13
 1011cbf:	sub    rsp,0x30
 1011cc3:	mov    r12,r8
 1011cc6:	mov    r13,rdx
 1011cc9:	mov    rdi,rcx
 1011ccc:	xor    esi,esi
 1011cce:	mov    ebx,esi
 1011cd0:	mov    DWORD PTR [rsp+0x20],ebx
 1011cd4:	mov    DWORD PTR [rsp+0x68],esi
 1011cd8:	call   0x1012c70
 1011cdd:	test   rax,rax
 1011ce0:	je     0x1011d7a
 1011ce6:	mov    QWORD PTR [rsp+0x28],rsi
 1011ceb:	mov    rcx,rdi
 1011cee:	call   0x1012c70
 1011cf3:	mov    r9,QWORD PTR [rax]
 1011cf6:	lea    r8,[rsp+0x28]
 1011cfb:	lea    rdx,[rip+0xffffffffffff18e6]        # 0x10035e8
 1011d02:	mov    rcx,rax
 1011d05:	call   QWORD PTR [r9]
 1011d08:	mov    ebx,eax
 1011d0a:	mov    DWORD PTR [rsp+0x20],eax
 1011d0e:	test   eax,eax
 1011d10:	js     0x1011d7a
 1011d12:	mov    rcx,QWORD PTR [rsp+0x28]
 1011d17:	test   rcx,rcx
 1011d1a:	je     0x1011d71
 1011d1c:	mov    edi,esi
 1011d1e:	mov    DWORD PTR [rsp+0x24],esi
 1011d22:	mov    rax,QWORD PTR [rcx]
 1011d25:	mov    r8,r12
 1011d28:	mov    rdx,r13
 1011d2b:	call   QWORD PTR [rax+0x18]
 1011d2e:	mov    ebx,eax
 1011d30:	mov    DWORD PTR [rsp+0x20],eax
 1011d34:	jmp    0x1011d5b
 1011d36:	mov    edi,eax
 1011d38:	cmp    eax,0xc00000fd
 1011d3d:	jne    0x1011d45
 1011d3f:	call   QWORD PTR [rip+0xfffffffffffef863]        # 0x10015a8
 1011d45:	mov    eax,0x80004005
 1011d4a:	test   edi,edi
 1011d4c:	cmovns edi,eax
 1011d4f:	mov    DWORD PTR [rsp+0x24],edi
 1011d53:	mov    ebx,DWORD PTR [rsp+0x20]
 1011d57:	mov    esi,DWORD PTR [rsp+0x68]
 1011d5b:	test   ebx,ebx
 1011d5d:	cmovns ebx,edi
 1011d60:	mov    DWORD PTR [rsp+0x20],ebx
 1011d64:	mov    rcx,QWORD PTR [rsp+0x28]
 1011d69:	mov    rax,QWORD PTR [rcx]
 1011d6c:	call   QWORD PTR [rax+0x10]
 1011d6f:	jmp    0x1011d7a
 1011d71:	mov    ebx,0x80070057
 1011d76:	mov    DWORD PTR [rsp+0x20],ebx
 1011d7a:	jmp    0x1011d9b
 1011d7c:	mov    ebx,eax
 1011d7e:	cmp    eax,0xc00000fd
 1011d83:	jne    0x1011d8b
 1011d85:	call   QWORD PTR [rip+0xfffffffffffef81d]        # 0x10015a8
 1011d8b:	mov    eax,0x80004005
 1011d90:	test   ebx,ebx
 1011d92:	cmovns ebx,eax
 1011d95:	mov    esi,ebx
 1011d97:	mov    ebx,DWORD PTR [rsp+0x20]
 1011d9b:	test   ebx,ebx
 1011d9d:	cmovns ebx,esi
 1011da0:	mov    eax,ebx
 1011da2:	mov    rbx,QWORD PTR [rsp+0x50]
 1011da7:	mov    rsi,QWORD PTR [rsp+0x58]
 1011dac:	add    rsp,0x30
 1011db0:	pop    r13
 1011db2:	pop    r12
 1011db4:	pop    rdi
 1011db5:	ret    
 1011db6:	int3   
 1011db7:	int3   
 1011db8:	int3   
 1011db9:	int3   
 1011dba:	int3   
 1011dbb:	int3   
 1011dbc:	int3   
 1011dbd:	int3   
 1011dbe:	int3   
 1011dbf:	int3   
 1011dc0:	mov    QWORD PTR [rsp+0x10],rbx
 1011dc5:	mov    QWORD PTR [rsp+0x18],rsi
 1011dca:	mov    QWORD PTR [rsp+0x20],rdi
 1011dcf:	mov    QWORD PTR [rsp+0x8],rcx
 1011dd4:	push   r12
 1011dd6:	sub    rsp,0x30
 1011dda:	mov    r12,rdx
 1011ddd:	mov    rsi,rcx
 1011de0:	xor    edi,edi
 1011de2:	mov    DWORD PTR [rsp+0x20],edi
 1011de6:	add    rcx,0x8
 1011dea:	call   0x1012d70
 1011def:	test   eax,eax
 1011df1:	je     0x1011e72
 1011df3:	mov    edx,0x4e20
 1011df8:	mov    rcx,QWORD PTR [rsi+0x18]
 1011dfc:	call   QWORD PTR [rip+0xfffffffffffef4b6]        # 0x10012b8
 1011e02:	test   eax,eax
 1011e04:	je     0x1011e2c
 1011e06:	cmp    eax,0x80
 1011e0b:	je     0x1011e2c
 1011e0d:	call   QWORD PTR [rip+0xfffffffffffef53d]        # 0x1001350
 1011e13:	mov    ebx,eax
 1011e15:	test   eax,eax
 1011e17:	jle    0x1011e22
 1011e19:	movzx  ebx,ax
 1011e1c:	or     ebx,0x80070000
 1011e22:	mov    rcx,r12
 1011e25:	call   0x1012c60
 1011e2a:	jmp    0x1011e7f
 1011e2c:	mov    rdx,r12
 1011e2f:	mov    rcx,rsi
 1011e32:	call   0x1011b30
 1011e37:	mov    ebx,eax
 1011e39:	mov    DWORD PTR [rsp+0x20],eax
 1011e3d:	jmp    0x1011e61
 1011e3f:	mov    edi,eax
 1011e41:	cmp    eax,0xc00000fd
 1011e46:	jne    0x1011e4e
 1011e48:	call   QWORD PTR [rip+0xfffffffffffef75a]        # 0x10015a8
 1011e4e:	mov    eax,0x80004005
 1011e53:	test   edi,edi
 1011e55:	cmovns edi,eax
 1011e58:	mov    rsi,QWORD PTR [rsp+0x40]
 1011e5d:	mov    ebx,DWORD PTR [rsp+0x20]
 1011e61:	test   ebx,ebx
 1011e63:	cmovns ebx,edi
 1011e66:	mov    rcx,QWORD PTR [rsi+0x18]
 1011e6a:	call   QWORD PTR [rip+0xfffffffffffef2c0]        # 0x1001130
 1011e70:	jmp    0x1011e7f
 1011e72:	mov    rdx,r12
 1011e75:	mov    rcx,rsi
 1011e78:	call   0x1011b30
 1011e7d:	mov    ebx,eax
 1011e7f:	mov    eax,ebx
 1011e81:	mov    rbx,QWORD PTR [rsp+0x48]
 1011e86:	mov    rsi,QWORD PTR [rsp+0x50]
 1011e8b:	mov    rdi,QWORD PTR [rsp+0x58]
 1011e90:	add    rsp,0x30
 1011e94:	pop    r12
 1011e96:	ret    
 1011e97:	int3   
 1011e98:	int3   
 1011e99:	int3   
 1011e9a:	int3   
 1011e9b:	int3   
 1011e9c:	int3   
 1011e9d:	int3   
 1011e9e:	int3   
 1011e9f:	int3   
 1011ea0:	mov    QWORD PTR [rsp+0x10],rbx
 1011ea5:	mov    QWORD PTR [rsp+0x18],rsi
 1011eaa:	mov    QWORD PTR [rsp+0x8],rcx
 1011eaf:	push   rdi
 1011eb0:	sub    rsp,0x30
 1011eb4:	mov    rsi,rcx
 1011eb7:	xor    ebx,ebx
 1011eb9:	mov    DWORD PTR [rsp+0x20],ebx
 1011ebd:	lea    rax,[rcx+0xe8]
 1011ec4:	cmp    rdx,rax
 1011ec7:	jne    0x1011f0e
 1011ec9:	mov    edi,ebx
 1011ecb:	mov    rcx,rdx
 1011ece:	call   0x1013990
 1011ed3:	mov    ebx,eax
 1011ed5:	mov    DWORD PTR [rsp+0x20],eax
 1011ed9:	jmp    0x1011efd
 1011edb:	mov    edi,eax
 1011edd:	cmp    eax,0xc00000fd
 1011ee2:	jne    0x1011eea
 1011ee4:	call   QWORD PTR [rip+0xfffffffffffef6be]        # 0x10015a8
 1011eea:	mov    eax,0x80004005
 1011eef:	test   edi,edi
 1011ef1:	cmovns edi,eax
 1011ef4:	mov    rsi,QWORD PTR [rsp+0x40]
 1011ef9:	mov    ebx,DWORD PTR [rsp+0x20]
 1011efd:	test   ebx,ebx
 1011eff:	cmovns ebx,edi
 1011f02:	mov    rcx,QWORD PTR [rsi+0x20]
 1011f06:	call   QWORD PTR [rip+0xfffffffffffef224]        # 0x1001130
 1011f0c:	jmp    0x1011f1c
 1011f0e:	test   rdx,rdx
 1011f11:	je     0x1011f1c
 1011f13:	add    rcx,0x10
 1011f17:	call   0x1012b50
 1011f1c:	mov    eax,ebx
 1011f1e:	mov    rbx,QWORD PTR [rsp+0x48]
 1011f23:	mov    rsi,QWORD PTR [rsp+0x50]
 1011f28:	add    rsp,0x30
 1011f2c:	pop    rdi
 1011f2d:	ret    
 1011f2e:	int3   
 1011f2f:	int3   
 1011f30:	int3   
 1011f31:	int3   
 1011f32:	int3   
 1011f33:	int3   
 1011f34:	int3   
 1011f35:	int3   
 1011f36:	int3   
 1011f37:	int3   
 1011f38:	int3   
 1011f39:	int3   
 1011f3a:	int3   
 1011f3b:	int3   
 1011f3c:	int3   
 1011f3d:	int3   
 1011f3e:	int3   
 1011f3f:	int3   
 1011f40:	mov    rdx,QWORD PTR [rcx]
 1011f43:	test   rdx,rdx
 1011f46:	je     0x1011f81
 1011f48:	mov    eax,DWORD PTR [rdx+0xc]
 1011f4b:	cmp    QWORD PTR [rcx+0x8],rax
 1011f4f:	jb     0x1011f5f
 1011f51:	mov    rax,QWORD PTR [rdx]
 1011f54:	mov    QWORD PTR [rcx+0x8],0x0
 1011f5c:	mov    QWORD PTR [rcx],rax
 1011f5f:	mov    rdx,QWORD PTR [rcx]
 1011f62:	test   rdx,rdx
 1011f65:	je     0x1011f81
 1011f67:	mov    r8,QWORD PTR [rcx+0x8]
 1011f6b:	mov    eax,DWORD PTR [rdx+0xc]
 1011f6e:	cmp    r8,rax
 1011f71:	jae    0x1011f81
 1011f73:	lea    rax,[r8+0x1]
 1011f77:	mov    QWORD PTR [rcx+0x8],rax
 1011f7b:	lea    rax,[rdx+r8*8+0x18]
 1011f80:	ret    
 1011f81:	xor    eax,eax
 1011f83:	ret    
 1011f84:	int3   
 1011f85:	int3   
 1011f86:	int3   
 1011f87:	int3   
 1011f88:	int3   
 1011f89:	int3   
 1011f8a:	int3   
 1011f8b:	int3   
 1011f8c:	int3   
 1011f8d:	int3   
 1011f8e:	int3   
 1011f8f:	int3   
 1011f90:	mov    QWORD PTR [rsp+0x20],r9
 1011f95:	push   rsi
 1011f96:	push   rdi
 1011f97:	sub    rsp,0x38
 1011f9b:	xor    edi,edi
 1011f9d:	test   rdx,rdx
 1011fa0:	mov    rsi,rcx
 1011fa3:	mov    eax,edi
 1011fa5:	je     0x1011fb0
 1011fa7:	cmp    rdx,0x7fffffff
 1011fae:	jbe    0x1011fb5
 1011fb0:	mov    eax,0x80070057
 1011fb5:	test   eax,eax
 1011fb7:	js     0x1012007
 1011fb9:	lea    rax,[rsp+0x70]
 1011fbe:	mov    QWORD PTR [rsp+0x30],rbx
 1011fc3:	lea    rbx,[rdx-0x1]
 1011fc7:	mov    rdx,rbx
 1011fca:	mov    QWORD PTR [rsp+0x20],rax
 1011fcf:	call   QWORD PTR [rip+0xfffffffffffef5db]        # 0x10015b0
 1011fd5:	test   eax,eax
 1011fd7:	js     0x1011ff7
 1011fd9:	cdqe   
 1011fdb:	cmp    rax,rbx
 1011fde:	ja     0x1011ff7
 1011fe0:	cmp    rax,rbx
 1011fe3:	jne    0x1012000
 1011fe5:	mov    WORD PTR [rsi+rbx*2],di
 1011fe9:	mov    rbx,QWORD PTR [rsp+0x30]
 1011fee:	mov    eax,edi
 1011ff0:	add    rsp,0x38
 1011ff4:	pop    rdi
 1011ff5:	pop    rsi
 1011ff6:	ret    
 1011ff7:	mov    WORD PTR [rsi+rbx*2],di
 1011ffb:	mov    edi,0x8007007a
 1012000:	mov    rbx,QWORD PTR [rsp+0x30]
 1012005:	mov    eax,edi
 1012007:	add    rsp,0x38
 101200b:	pop    rdi
 101200c:	pop    rsi
 101200d:	ret    
 101200e:	int3   
 101200f:	int3   
 1012010:	int3   
 1012011:	int3   
 1012012:	int3   
 1012013:	int3   
 1012014:	int3   
 1012015:	int3   
 1012016:	int3   
 1012017:	int3   
 1012018:	int3   
 1012019:	int3   
 101201a:	int3   
 101201b:	int3   
 101201c:	int3   
 101201d:	int3   
 101201e:	int3   
 101201f:	int3   
 1012020:	rex push rdi
 1012022:	sub    rsp,0xab0
 1012029:	mov    rax,QWORD PTR [rip+0x91b0]        # 0x101b1e0
 1012030:	xor    rax,rsp
 1012033:	mov    QWORD PTR [rsp+0xaa0],rax
 101203b:	mov    rdi,rcx
 101203e:	xor    ecx,ecx
 1012040:	call   QWORD PTR [rip+0xfffffffffffef32a]        # 0x1001370
 1012046:	lea    rdx,[rsp+0x260]
 101204e:	mov    r8d,0x104
 1012054:	mov    rcx,rax
 1012057:	call   QWORD PTR [rip+0xfffffffffffef143]        # 0x10011a0
 101205d:	test   eax,eax
 101205f:	je     0x101215b
 1012065:	mov    QWORD PTR [rsp+0x40],0x105
 101206e:	lea    rax,[rsp+0x680]
 1012076:	lea    r9,[rsp+0x470]
 101207e:	mov    QWORD PTR [rsp+0x38],rax
 1012083:	lea    rax,[rsp+0x890]
 101208b:	mov    QWORD PTR [rsp+0x30],0x105
 1012094:	mov    QWORD PTR [rsp+0x28],rax
 1012099:	lea    rdx,[rsp+0x50]
 101209e:	lea    rcx,[rsp+0x260]
 10120a6:	mov    r8d,0x105
 10120ac:	mov    QWORD PTR [rsp+0x20],0x105
 10120b5:	mov    QWORD PTR [rsp+0xac8],rbx
 10120bd:	mov    WORD PTR [rsp+0x468],0x0
 10120c7:	call   QWORD PTR [rip+0xfffffffffffef4f3]        # 0x10015c0
 10120cd:	lea    rbx,[rdi+0x1948]
 10120d4:	lea    r9,[rsp+0x470]
 10120dc:	lea    r8,[rsp+0x50]
 10120e1:	mov    rcx,rbx
 10120e4:	mov    edx,0x104
 10120e9:	mov    QWORD PTR [rsp+0x28],0x0
 10120f2:	mov    WORD PTR [rsp+0x56],0x0
 10120f9:	mov    WORD PTR [rsp+0x670],0x0
 1012103:	mov    WORD PTR [rbx],0x0
 1012108:	mov    QWORD PTR [rsp+0x20],0x0
 1012111:	call   QWORD PTR [rip+0xfffffffffffef4a1]        # 0x10015b8
 1012117:	mov    WORD PTR [rdi+0x1b4e],0x0
 1012120:	call   0x1005640
 1012125:	mov    r9,rax
 1012128:	lea    rax,[rip+0xffffffffffff1dd9]        # 0x1003f08
 101212f:	lea    rcx,[rdi+0x1740]
 1012136:	mov    QWORD PTR [rsp+0x28],rax
 101213b:	lea    r8,[rip+0xffffffffffff1df6]        # 0x1003f38
 1012142:	mov    edx,0x104
 1012147:	mov    QWORD PTR [rsp+0x20],rbx
 101214c:	call   0x1011f90
 1012151:	mov    rbx,QWORD PTR [rsp+0xac8]
 1012159:	jmp    0x101215d
 101215b:	xor    eax,eax
 101215d:	mov    rcx,QWORD PTR [rsp+0xaa0]
 1012165:	xor    rcx,rsp
 1012168:	call   0x100daf0
 101216d:	add    rsp,0xab0
 1012174:	pop    rdi
 1012175:	ret    
 1012176:	int3   
 1012177:	int3   
 1012178:	int3   
 1012179:	int3   
 101217a:	int3   
 101217b:	int3   
 101217c:	int3   
 101217d:	int3   
 101217e:	int3   
 101217f:	int3   
 1012180:	mov    QWORD PTR [rsp+0x10],rbx
 1012185:	mov    QWORD PTR [rsp+0x18],rsi
 101218a:	mov    QWORD PTR [rsp+0x20],rdi
 101218f:	mov    QWORD PTR [rsp+0x8],rcx
 1012194:	push   r12
 1012196:	sub    rsp,0x40
 101219a:	mov    r12,rdx
 101219d:	mov    rsi,rcx
 10121a0:	xor    ebx,ebx
 10121a2:	mov    DWORD PTR [rsp+0x20],ebx
 10121a6:	mov    edx,0x4e20
 10121ab:	mov    rcx,QWORD PTR [rcx+0x18]
 10121af:	call   QWORD PTR [rip+0xfffffffffffef103]        # 0x10012b8
 10121b5:	test   eax,eax
 10121b7:	je     0x10121d7
 10121b9:	cmp    eax,0x80
 10121be:	je     0x10121d7
 10121c0:	call   QWORD PTR [rip+0xfffffffffffef18a]        # 0x1001350
 10121c6:	mov    ebx,eax
 10121c8:	test   eax,eax
 10121ca:	jle    0x101224b
 10121cc:	movzx  ebx,ax
 10121cf:	or     ebx,0x80070000
 10121d5:	jmp    0x101224b
 10121d7:	mov    edi,ebx
 10121d9:	lea    rax,[rsi+0x28]
 10121dd:	mov    QWORD PTR [rsp+0x28],rax
 10121e2:	mov    QWORD PTR [rsp+0x30],rbx
 10121e7:	data16 xchg ax,ax
 10121ea:	data16 xchg ax,ax
 10121ed:	data16 xchg ax,ax
 10121f0:	lea    rcx,[rsp+0x28]
 10121f5:	call   0x1011f40
 10121fa:	test   rax,rax
 10121fd:	je     0x1012218
 10121ff:	mov    r8,r12
 1012202:	mov    rdx,rsi
 1012205:	mov    rcx,rax
 1012208:	call   0x1011cb0
 101220d:	test   ebx,ebx
 101220f:	cmovns ebx,eax
 1012212:	mov    DWORD PTR [rsp+0x20],ebx
 1012216:	jmp    0x10121f0
 1012218:	jmp    0x101223c
 101221a:	mov    edi,eax
 101221c:	cmp    eax,0xc00000fd
 1012221:	jne    0x1012229
 1012223:	call   QWORD PTR [rip+0xfffffffffffef37f]        # 0x10015a8
 1012229:	mov    eax,0x80004005
 101222e:	test   edi,edi
 1012230:	cmovns edi,eax
 1012233:	mov    rsi,QWORD PTR [rsp+0x50]
 1012238:	mov    ebx,DWORD PTR [rsp+0x20]
 101223c:	mov    rcx,QWORD PTR [rsi+0x18]
 1012240:	call   QWORD PTR [rip+0xfffffffffffeeeea]        # 0x1001130
 1012246:	test   ebx,ebx
 1012248:	cmovns ebx,edi
 101224b:	mov    eax,ebx
 101224d:	mov    rbx,QWORD PTR [rsp+0x58]
 1012252:	mov    rsi,QWORD PTR [rsp+0x60]
 1012257:	mov    rdi,QWORD PTR [rsp+0x68]
 101225c:	add    rsp,0x40
 1012260:	pop    r12
 1012262:	ret    
 1012263:	int3   
 1012264:	int3   
 1012265:	int3   
 1012266:	int3   
 1012267:	int3   
 1012268:	int3   
 1012269:	int3   
 101226a:	int3   
 101226b:	int3   
 101226c:	int3   
 101226d:	int3   
 101226e:	int3   
 101226f:	int3   
 1012270:	rex push rbx
 1012272:	sub    rsp,0x30
 1012276:	test   rdx,rdx
 1012279:	mov    rbx,rcx
 101227c:	je     0x101232a
 1012282:	mov    QWORD PTR [rsp+0x40],rdi
 1012287:	lea    rdi,[rcx+0x1948]
 101228e:	xor    r10d,r10d
 1012291:	mov    r8,rdi
 1012294:	sub    rdx,rdi
 1012297:	mov    r9d,0x104
 101229d:	data16 xchg ax,ax
 10122a0:	lea    rax,[r9+0x7ffffefa]
 10122a7:	test   rax,rax
 10122aa:	je     0x10122c6
 10122ac:	movzx  eax,WORD PTR [rdx+r8*1]
 10122b1:	test   ax,ax
 10122b4:	je     0x10122c6
 10122b6:	mov    WORD PTR [r8],ax
 10122ba:	add    r8,0x2
 10122be:	sub    r9,0x1
 10122c2:	jne    0x10122a0
 10122c4:	jmp    0x10122cb
 10122c6:	test   r9,r9
 10122c9:	jne    0x10122d5
 10122cb:	sub    r8,0x2
 10122cf:	mov    r10d,0x8007007a
 10122d5:	test   r10d,r10d
 10122d8:	mov    WORD PTR [r8],0x0
 10122de:	js     0x101231c
 10122e0:	call   0x1005640
 10122e5:	lea    rcx,[rbx+0x1740]
 10122ec:	lea    r8,[rip+0xffffffffffff1c45]        # 0x1003f38
 10122f3:	mov    r9,rax
 10122f6:	lea    rax,[rip+0xffffffffffff1c0b]        # 0x1003f08
 10122fd:	mov    edx,0x104
 1012302:	mov    QWORD PTR [rsp+0x28],rax
 1012307:	mov    QWORD PTR [rsp+0x20],rdi
 101230c:	call   0x1011f90
 1012311:	mov    rdi,QWORD PTR [rsp+0x40]
 1012316:	add    rsp,0x30
 101231a:	pop    rbx
 101231b:	ret    
 101231c:	mov    eax,r10d
 101231f:	mov    rdi,QWORD PTR [rsp+0x40]
 1012324:	add    rsp,0x30
 1012328:	pop    rbx
 1012329:	ret    
 101232a:	mov    eax,0x80070057
 101232f:	add    rsp,0x30
 1012333:	pop    rbx
 1012334:	ret    
 1012335:	int3   
 1012336:	int3   
 1012337:	int3   
 1012338:	int3   
 1012339:	int3   
 101233a:	int3   
 101233b:	int3   
 101233c:	int3   
 101233d:	int3   
 101233e:	int3   
 101233f:	int3   
 1012340:	mov    QWORD PTR [rsp+0x20],rbx
 1012345:	mov    QWORD PTR [rsp+0x10],rdx
 101234a:	mov    QWORD PTR [rsp+0x8],rcx
 101234f:	push   rsi
 1012350:	push   rdi
 1012351:	push   r12
 1012353:	push   r13
 1012355:	push   r14
 1012357:	sub    rsp,0x20
 101235b:	mov    r14,rdx
 101235e:	mov    r13,rcx
 1012361:	xor    esi,esi
 1012363:	mov    r12,rsi
 1012366:	mov    QWORD PTR [rsp+0x60],rsi
 101236b:	mov    QWORD PTR [rdx],rsi
 101236e:	add    rcx,0x8
 1012372:	call   0x1012d70
 1012377:	test   eax,eax
 1012379:	je     0x101247f
 101237f:	lea    rcx,[r13+0x8]
 1012383:	call   0x1012d90
 1012388:	test   eax,eax
 101238a:	js     0x101247f
 1012390:	call   QWORD PTR [rip+0xfffffffffffef212]        # 0x10015a8
 1012396:	mov    edx,0x7530
 101239b:	mov    rcx,QWORD PTR [r13+0x20]
 101239f:	call   QWORD PTR [rip+0xfffffffffffeef13]        # 0x10012b8
 10123a5:	mov    edi,eax
 10123a7:	test   eax,eax
 10123a9:	je     0x10123de
 10123ab:	cmp    eax,0x80
 10123b0:	je     0x10123de
 10123b2:	call   QWORD PTR [rip+0xfffffffffffeef98]        # 0x1001350
 10123b8:	mov    ebx,eax
 10123ba:	test   eax,eax
 10123bc:	jle    0x10123c7
 10123be:	movzx  ebx,ax
 10123c1:	or     ebx,0x80070000
 10123c7:	test   ebx,ebx
 10123c9:	js     0x1012438
 10123cb:	test   edi,edi
 10123cd:	jg     0x10123d3
 10123cf:	mov    ebx,edi
 10123d1:	jmp    0x1012438
 10123d3:	movzx  ebx,di
 10123d6:	or     ebx,0x80070000
 10123dc:	jmp    0x1012438
 10123de:	mov    ebx,esi
 10123e0:	lea    rcx,[r13+0xe8]
 10123e7:	mov    r8d,0x4e20
 10123ed:	mov    rdx,r13
 10123f0:	call   0x10148b0
 10123f5:	jmp    0x1012421
 10123f7:	mov    ebx,eax
 10123f9:	cmp    eax,0xc00000fd
 10123fe:	jne    0x1012406
 1012400:	call   QWORD PTR [rip+0xfffffffffffef1a2]        # 0x10015a8
 1012406:	mov    eax,0x80004005
 101240b:	test   ebx,ebx
 101240d:	cmovns ebx,eax
 1012410:	xor    esi,esi
 1012412:	mov    r13,QWORD PTR [rsp+0x50]
 1012417:	mov    r14,QWORD PTR [rsp+0x58]
 101241c:	mov    r12,QWORD PTR [rsp+0x60]
 1012421:	test   ebx,ebx
 1012423:	js     0x101242e
 1012425:	lea    r12,[r13+0xe8]
 101242c:	jmp    0x1012438
 101242e:	mov    rcx,QWORD PTR [r13+0x20]
 1012432:	call   QWORD PTR [rip+0xfffffffffffeecf8]        # 0x1001130
 1012438:	test   r12,r12
 101243b:	jne    0x1012478
 101243d:	lea    rcx,[r13+0x10]
 1012441:	mov    edx,0x1658
 1012446:	call   0x1012af0
 101244b:	test   rax,rax
 101244e:	je     0x101246b
 1012450:	mov    r8d,0x4e20
 1012456:	mov    rdx,r13
 1012459:	mov    rcx,rax
 101245c:	call   0x1013f30
 1012461:	mov    r12,rax
 1012464:	test   rax,rax
 1012467:	jne    0x1012473
 1012469:	jmp    0x101246e
 101246b:	mov    r12,rsi
 101246e:	mov    esi,0x8007000e
 1012473:	test   esi,esi
 1012475:	cmovns ebx,esi
 1012478:	mov    QWORD PTR [r14],r12
 101247b:	mov    eax,ebx
 101247d:	jmp    0x1012484
 101247f:	mov    eax,0x80004005
 1012484:	mov    rbx,QWORD PTR [rsp+0x68]
 1012489:	add    rsp,0x20
 101248d:	pop    r14
 101248f:	pop    r13
 1012491:	pop    r12
 1012493:	pop    rdi
 1012494:	pop    rsi
 1012495:	ret    
 1012496:	int3   
 1012497:	int3   
 1012498:	int3   
 1012499:	int3   
 101249a:	int3   
 101249b:	int3   
 101249c:	int3   
 101249d:	int3   
 101249e:	int3   
 101249f:	int3   
 10124a0:	mov    QWORD PTR [rsp+0x8],rbx
 10124a5:	push   rdi
 10124a6:	sub    rsp,0x20
 10124aa:	mov    rdx,QWORD PTR [rcx+0x20]
 10124ae:	mov    rbx,rcx
 10124b1:	mov    eax,DWORD PTR [rdx+0x10]
 10124b4:	cmp    DWORD PTR [rdx+0xc],eax
 10124b7:	jb     0x10124f0
 10124b9:	mov    rcx,QWORD PTR [rcx+0x10]
 10124bd:	test   rcx,rcx
 10124c0:	je     0x1012516
 10124c2:	mov    rdi,QWORD PTR [rbx]
 10124c5:	lea    rdx,[rdi*8+0x18]
 10124cd:	call   0x1012af0
 10124d2:	test   rax,rax
 10124d5:	je     0x1012516
 10124d7:	xor    ecx,ecx
 10124d9:	mov    DWORD PTR [rax+0x10],edi
 10124dc:	mov    QWORD PTR [rax],rcx
 10124df:	mov    DWORD PTR [rax+0x8],ecx
 10124e2:	mov    DWORD PTR [rax+0xc],ecx
 10124e5:	mov    rcx,QWORD PTR [rbx+0x20]
 10124e9:	mov    QWORD PTR [rcx],rax
 10124ec:	mov    QWORD PTR [rbx+0x20],rax
 10124f0:	mov    rcx,QWORD PTR [rbx+0x20]
 10124f4:	mov    edx,DWORD PTR [rcx+0xc]
 10124f7:	lea    eax,[rdx+0x1]
 10124fa:	mov    DWORD PTR [rcx+0xc],eax
 10124fd:	mov    rax,QWORD PTR [rbx+0x20]
 1012501:	add    QWORD PTR [rbx+0x8],0x1
 1012506:	lea    rax,[rax+rdx*8+0x18]
 101250b:	mov    rbx,QWORD PTR [rsp+0x30]
 1012510:	add    rsp,0x20
 1012514:	pop    rdi
 1012515:	ret    
 1012516:	xor    eax,eax
 1012518:	mov    rbx,QWORD PTR [rsp+0x30]
 101251d:	add    rsp,0x20
 1012521:	pop    rdi
 1012522:	ret    
 1012523:	int3   
 1012524:	int3   
 1012525:	int3   
 1012526:	int3   
 1012527:	int3   
 1012528:	int3   
 1012529:	int3   
 101252a:	int3   
 101252b:	int3   
 101252c:	int3   
 101252d:	int3   
 101252e:	int3   
 101252f:	int3   
 1012530:	mov    QWORD PTR [rsp+0x8],rbx
 1012535:	mov    QWORD PTR [rsp+0x10],rsi
 101253a:	push   rdi
 101253b:	sub    rsp,0x20
 101253f:	lea    rax,[rip+0xffffffffffff1a0a]        # 0x1003f50
 1012546:	mov    rdi,rcx
 1012549:	add    rcx,0x8
 101254d:	mov    QWORD PTR [rcx-0x8],rax
 1012551:	call   0x1012d50
 1012556:	lea    rcx,[rdi+0x10]
 101255a:	call   0x1012ad0
 101255f:	lea    rbx,[rdi+0x28]
 1012563:	xor    esi,esi
 1012565:	mov    QWORD PTR [rdi+0x18],rsi
 1012569:	mov    QWORD PTR [rdi+0x20],rsi
 101256d:	lea    rcx,[rbx+0x18]
 1012571:	xor    edx,edx
 1012573:	mov    r8d,0x80
 1012579:	mov    QWORD PTR [rbx],rsi
 101257c:	mov    DWORD PTR [rbx+0x8],esi
 101257f:	mov    DWORD PTR [rbx+0xc],esi
 1012582:	mov    DWORD PTR [rbx+0x10],0x10
 1012589:	mov    DWORD PTR [rbx+0x14],esi
 101258c:	call   0x100dcba
 1012591:	lea    rcx,[rdi+0xe8]
 1012598:	xor    edx,edx
 101259a:	mov    r8d,0x4e20
 10125a0:	mov    QWORD PTR [rdi+0xc0],0x10
 10125ab:	mov    QWORD PTR [rdi+0xc8],rsi
 10125b2:	mov    QWORD PTR [rdi+0xd0],rsi
 10125b9:	mov    QWORD PTR [rdi+0xd8],rbx
 10125c0:	mov    QWORD PTR [rdi+0xe0],rbx
 10125c7:	call   0x1013f30
 10125cc:	lea    rcx,[rdi+0x1740]
 10125d3:	xor    edx,edx
 10125d5:	mov    r8d,0x208
 10125db:	mov    DWORD PTR [rdi+0x1b50],esi
 10125e1:	mov    QWORD PTR [rdi+0x1b58],rsi
 10125e8:	call   0x100dcba
 10125ed:	lea    rcx,[rdi+0x1948]
 10125f4:	xor    edx,edx
 10125f6:	mov    r8d,0x208
 10125fc:	call   0x100dcba
 1012601:	lea    rcx,[rdi+0xe8]
 1012608:	mov    rdx,rdi
 101260b:	call   0x1013740
 1012610:	mov    rbx,QWORD PTR [rsp+0x30]
 1012615:	mov    rsi,QWORD PTR [rsp+0x38]
 101261a:	mov    rax,rdi
 101261d:	add    rsp,0x20
 1012621:	pop    rdi
 1012622:	ret    
 1012623:	int3   
 1012624:	int3   
 1012625:	int3   
 1012626:	int3   
 1012627:	int3   
 1012628:	int3   
 1012629:	int3   
 101262a:	int3   
 101262b:	int3   
 101262c:	int3   
 101262d:	int3   
 101262e:	int3   
 101262f:	int3   
 1012630:	mov    QWORD PTR [rsp+0x18],rbx
 1012635:	push   rdi
 1012636:	sub    rsp,0x30
 101263a:	test   rdx,rdx
 101263d:	mov    rdi,rcx
 1012640:	mov    QWORD PTR [rsp+0x48],0x0
 1012649:	je     0x1012717
 101264f:	lea    rax,[rsp+0x48]
 1012654:	mov    r9d,0x1
 101265a:	xor    r8d,r8d
 101265d:	mov    rcx,0xffffffff80000002
 1012664:	mov    QWORD PTR [rsp+0x20],rax
 1012669:	call   QWORD PTR [rip+0xfffffffffffee999]        # 0x1001008
 101266f:	test   eax,eax
 1012671:	jne    0x101270b
 1012677:	mov    rcx,QWORD PTR [rsp+0x48]
 101267c:	mov    QWORD PTR [rsp+0x40],rsi
 1012681:	lea    rsi,[rdi+0x1948]
 1012688:	lea    rdx,[rip+0xffffffffffff1409]        # 0x1003a98
 101268f:	mov    r8,rsi
 1012692:	mov    r9d,0x104
 1012698:	call   0x1013240
 101269d:	test   eax,eax
 101269f:	mov    ebx,eax
 10126a1:	js     0x10126e8
 10126a3:	call   0x1005640
 10126a8:	lea    rcx,[rdi+0x1740]
 10126af:	lea    r8,[rip+0xffffffffffff1882]        # 0x1003f38
 10126b6:	mov    r9,rax
 10126b9:	lea    rax,[rip+0xffffffffffff1848]        # 0x1003f08
 10126c0:	mov    edx,0x104
 10126c5:	mov    QWORD PTR [rsp+0x28],rax
 10126ca:	mov    QWORD PTR [rsp+0x20],rsi
 10126cf:	call   0x1011f90
 10126d4:	mov    rcx,QWORD PTR [rsp+0x48]
 10126d9:	mov    ebx,eax
 10126db:	call   QWORD PTR [rip+0xfffffffffffee91f]        # 0x1001000
 10126e1:	mov    rsi,QWORD PTR [rsp+0x40]
 10126e6:	jmp    0x101271e
 10126e8:	cmp    eax,0x80070002
 10126ed:	jne    0x10126f9
 10126ef:	mov    rcx,rdi
 10126f2:	call   0x1012020
 10126f7:	mov    ebx,eax
 10126f9:	mov    rcx,QWORD PTR [rsp+0x48]
 10126fe:	call   QWORD PTR [rip+0xfffffffffffee8fc]        # 0x1001000
 1012704:	mov    rsi,QWORD PTR [rsp+0x40]
 1012709:	jmp    0x101271e
 101270b:	mov    rcx,rdi
 101270e:	call   0x1012020
 1012713:	mov    ebx,eax
 1012715:	jmp    0x101271e
 1012717:	call   0x1012020
 101271c:	mov    ebx,eax
 101271e:	test   ebx,ebx
 1012720:	jns    0x101274a
 1012722:	lea    rcx,[rdi+0x1948]
 1012729:	xor    edx,edx
 101272b:	mov    r8d,0x208
 1012731:	call   0x100dcba
 1012736:	lea    rcx,[rdi+0x1740]
 101273d:	xor    edx,edx
 101273f:	mov    r8d,0x208
 1012745:	call   0x100dcba
 101274a:	mov    eax,ebx
 101274c:	mov    rbx,QWORD PTR [rsp+0x50]
 1012751:	add    rsp,0x30
 1012755:	pop    rdi
 1012756:	ret    
 1012757:	int3   
 1012758:	int3   
 1012759:	int3   
 101275a:	int3   
 101275b:	int3   
 101275c:	int3   
 101275d:	int3   
 101275e:	int3   
 101275f:	int3   
 1012760:	mov    QWORD PTR [rsp+0x18],rbp
 1012765:	push   rdi
 1012766:	sub    rsp,0x20
 101276a:	test   edx,edx
 101276c:	mov    rdi,rcx
 101276f:	je     0x101277b
 1012771:	mov    DWORD PTR [rcx+0x1b50],0x1
 101277b:	add    rcx,0x8
 101277f:	call   0x1012fd0
 1012784:	test   eax,eax
 1012786:	je     0x10128a6
 101278c:	mov    QWORD PTR [rsp+0x30],rbx
 1012791:	mov    QWORD PTR [rsp+0x38],rsi
 1012796:	lea    rsi,[rdi+0x10]
 101279a:	mov    rcx,rsi
 101279d:	call   0x1012f40
 10127a2:	test   eax,eax
 10127a4:	mov    ebx,eax
 10127a6:	js     0x1012891
 10127ac:	xor    r8d,r8d
 10127af:	xor    edx,edx
 10127b1:	xor    ecx,ecx
 10127b3:	mov    QWORD PTR [rdi+0xd0],rsi
 10127ba:	call   QWORD PTR [rip+0xfffffffffffee960]        # 0x1001120
 10127c0:	test   rax,rax
 10127c3:	mov    QWORD PTR [rdi+0x18],rax
 10127c7:	jne    0x10127de
 10127c9:	call   QWORD PTR [rip+0xfffffffffffeeb81]        # 0x1001350
 10127cf:	test   eax,eax
 10127d1:	mov    ebx,eax
 10127d3:	jle    0x10127de
 10127d5:	movzx  ebx,ax
 10127d8:	or     ebx,0x80070000
 10127de:	test   ebx,ebx
 10127e0:	js     0x1012891
 10127e6:	mov    rcx,QWORD PTR [rdi+0x18]
 10127ea:	mov    edx,0x2
 10127ef:	mov    r8d,edx
 10127f2:	call   QWORD PTR [rip+0xfffffffffffee930]        # 0x1001128
 10127f8:	test   eax,eax
 10127fa:	jne    0x1012811
 10127fc:	call   QWORD PTR [rip+0xfffffffffffeeb4e]        # 0x1001350
 1012802:	test   eax,eax
 1012804:	mov    ebx,eax
 1012806:	jle    0x1012811
 1012808:	movzx  ebx,ax
 101280b:	or     ebx,0x80070000
 1012811:	test   ebx,ebx
 1012813:	js     0x1012891
 1012815:	xor    r8d,r8d
 1012818:	xor    edx,edx
 101281a:	xor    ecx,ecx
 101281c:	call   QWORD PTR [rip+0xfffffffffffee8fe]        # 0x1001120
 1012822:	test   rax,rax
 1012825:	mov    QWORD PTR [rdi+0x20],rax
 1012829:	jne    0x1012840
 101282b:	call   QWORD PTR [rip+0xfffffffffffeeb1f]        # 0x1001350
 1012831:	test   eax,eax
 1012833:	mov    ebx,eax
 1012835:	jle    0x1012840
 1012837:	movzx  ebx,ax
 101283a:	or     ebx,0x80070000
 1012840:	test   ebx,ebx
 1012842:	js     0x1012891
 1012844:	mov    rcx,QWORD PTR [rdi+0x20]
 1012848:	mov    edx,0x2
 101284d:	mov    r8d,edx
 1012850:	call   QWORD PTR [rip+0xfffffffffffee8d2]        # 0x1001128
 1012856:	test   eax,eax
 1012858:	jne    0x101286f
 101285a:	call   QWORD PTR [rip+0xfffffffffffeeaf0]        # 0x1001350
 1012860:	test   eax,eax
 1012862:	mov    ebx,eax
 1012864:	jle    0x101286f
 1012866:	movzx  ebx,ax
 1012869:	or     ebx,0x80070000
 101286f:	test   ebx,ebx
 1012871:	js     0x1012891
 1012873:	cmp    DWORD PTR [rdi+0x1b50],0x0
 101287a:	je     0x1012880
 101287c:	xor    edx,edx
 101287e:	jmp    0x1012887
 1012880:	lea    rdx,[rip+0xffffffffffff1629]        # 0x1003eb0
 1012887:	mov    rcx,rdi
 101288a:	call   0x1012630
 101288f:	mov    ebx,eax
 1012891:	lea    rcx,[rdi+0x8]
 1012895:	mov    edx,ebx
 1012897:	call   0x1013030
 101289c:	mov    rsi,QWORD PTR [rsp+0x38]
 10128a1:	mov    rbx,QWORD PTR [rsp+0x30]
 10128a6:	call   0x1012da0
 10128ab:	lea    rcx,[rdi+0x8]
 10128af:	mov    rbp,QWORD PTR [rsp+0x40]
 10128b4:	add    rsp,0x20
 10128b8:	pop    rdi
 10128b9:	jmp    0x1012d90
 10128be:	int3   
 10128bf:	int3   
 10128c0:	int3   
 10128c1:	int3   
 10128c2:	int3   
 10128c3:	int3   
 10128c4:	int3   
 10128c5:	int3   
 10128c6:	int3   
 10128c7:	int3   
 10128c8:	int3   
 10128c9:	int3   
 10128ca:	int3   
 10128cb:	int3   
 10128cc:	int3   
 10128cd:	int3   
 10128ce:	int3   
 10128cf:	int3   
 10128d0:	mov    r11,rsp
 10128d3:	mov    QWORD PTR [r11+0x8],rbx
 10128d7:	mov    QWORD PTR [r11+0x10],rsi
 10128db:	mov    QWORD PTR [r11+0x20],rdi
 10128df:	mov    QWORD PTR [r11+0x18],r8
 10128e3:	push   r12
 10128e5:	push   r13
 10128e7:	push   r14
 10128e9:	sub    rsp,0x40
 10128ed:	mov    r13,r8
 10128f0:	mov    r14,rdx
 10128f3:	mov    r12,rcx
 10128f6:	xor    esi,esi
 10128f8:	mov    DWORD PTR [rsp+0x20],esi
 10128fc:	mov    QWORD PTR [r11-0x30],rsi
 1012900:	mov    edi,esi
 1012902:	lea    rax,[rcx+0x28]
 1012906:	mov    QWORD PTR [r11-0x28],rax
 101290a:	mov    QWORD PTR [r11-0x20],rsi
 101290e:	xchg   ax,ax
 1012910:	lea    rcx,[rsp+0x30]
 1012915:	call   0x1011f40
 101291a:	mov    rbx,rax
 101291d:	test   rax,rax
 1012920:	je     0x1012931
 1012922:	mov    rcx,rax
 1012925:	call   0x1012c70
 101292a:	test   rax,rax
 101292d:	je     0x1012931
 101292f:	jmp    0x1012910
 1012931:	test   rbx,rbx
 1012934:	jne    0x1012946
 1012936:	lea    rcx,[r12+0xc0]
 101293e:	call   0x10124a0
 1012943:	mov    rbx,rax
 1012946:	test   rbx,rbx
 1012949:	je     0x1012971
 101294b:	xor    eax,eax
 101294d:	mov    QWORD PTR [rbx],rax
 1012950:	mov    rcx,rbx
 1012953:	call   0x1012b80
 1012958:	mov    rdx,r14
 101295b:	mov    rcx,rbx
 101295e:	call   0x1012c00
 1012963:	mov    DWORD PTR [rsp+0x20],eax
 1012967:	mov    rsi,rbx
 101296a:	mov    QWORD PTR [rsp+0x28],rbx
 101296f:	jmp    0x101297a
 1012971:	mov    eax,0x8007000e
 1012976:	mov    DWORD PTR [rsp+0x20],eax
 101297a:	jmp    0x10129a3
 101297c:	mov    edi,eax
 101297e:	cmp    eax,0xc00000fd
 1012983:	jne    0x101298b
 1012985:	call   QWORD PTR [rip+0xfffffffffffeec1d]        # 0x10015a8
 101298b:	mov    eax,0x80004005
 1012990:	test   edi,edi
 1012992:	cmovns edi,eax
 1012995:	mov    r13,QWORD PTR [rsp+0x70]
 101299a:	mov    eax,DWORD PTR [rsp+0x20]
 101299e:	mov    rsi,QWORD PTR [rsp+0x28]
 10129a3:	mov    QWORD PTR [r13+0x0],rsi
 10129a7:	test   eax,eax
 10129a9:	cmovns eax,edi
 10129ac:	mov    rbx,QWORD PTR [rsp+0x60]
 10129b1:	mov    rsi,QWORD PTR [rsp+0x68]
 10129b6:	mov    rdi,QWORD PTR [rsp+0x78]
 10129bb:	add    rsp,0x40
 10129bf:	pop    r14
 10129c1:	pop    r13
 10129c3:	pop    r12
 10129c5:	ret    
 10129c6:	int3   
 10129c7:	int3   
 10129c8:	int3   
 10129c9:	int3   
 10129ca:	int3   
 10129cb:	int3   
 10129cc:	int3   
 10129cd:	int3   
 10129ce:	int3   
 10129cf:	int3   
 10129d0:	mov    QWORD PTR [rsp+0x10],rbx
 10129d5:	mov    QWORD PTR [rsp+0x18],r8
 10129da:	mov    QWORD PTR [rsp+0x8],rcx
 10129df:	push   rsi
 10129e0:	push   rdi
 10129e1:	push   r12
 10129e3:	sub    rsp,0x30
 10129e7:	mov    rsi,r8
 10129ea:	mov    rbx,rdx
 10129ed:	mov    rdi,rcx
 10129f0:	xor    r12d,r12d
 10129f3:	mov    DWORD PTR [rsp+0x20],r12d
 10129f8:	mov    QWORD PTR [rsp+0x68],r12
 10129fd:	add    rcx,0x8
 1012a01:	call   0x1012d70
 1012a06:	test   eax,eax
 1012a08:	je     0x1012a91
 1012a0e:	or     edx,0xffffffff
 1012a11:	mov    rcx,QWORD PTR [rdi+0x18]
 1012a15:	call   QWORD PTR [rip+0xfffffffffffee89d]        # 0x10012b8
 1012a1b:	test   eax,eax
 1012a1d:	je     0x1012a3d
 1012a1f:	cmp    eax,0x80
 1012a24:	je     0x1012a3d
 1012a26:	call   QWORD PTR [rip+0xfffffffffffee924]        # 0x1001350
 1012a2c:	mov    ebx,eax
 1012a2e:	test   eax,eax
 1012a30:	jle    0x1012aa3
 1012a32:	movzx  ebx,ax
 1012a35:	or     ebx,0x80070000
 1012a3b:	jmp    0x1012aa3
 1012a3d:	lea    r8,[rsp+0x68]
 1012a42:	mov    rdx,rbx
 1012a45:	mov    rcx,rdi
 1012a48:	call   0x10128d0
 1012a4d:	mov    ebx,eax
 1012a4f:	mov    DWORD PTR [rsp+0x20],eax
 1012a53:	jmp    0x1012a7f
 1012a55:	mov    ebx,eax
 1012a57:	cmp    eax,0xc00000fd
 1012a5c:	jne    0x1012a64
 1012a5e:	call   QWORD PTR [rip+0xfffffffffffeeb44]        # 0x10015a8
 1012a64:	mov    eax,0x80004005
 1012a69:	test   ebx,ebx
 1012a6b:	cmovns ebx,eax
 1012a6e:	mov    r12d,ebx
 1012a71:	mov    rdi,QWORD PTR [rsp+0x50]
 1012a76:	mov    rsi,QWORD PTR [rsp+0x60]
 1012a7b:	mov    ebx,DWORD PTR [rsp+0x20]
 1012a7f:	test   ebx,ebx
 1012a81:	cmovns ebx,r12d
 1012a85:	mov    rcx,QWORD PTR [rdi+0x18]
 1012a89:	call   QWORD PTR [rip+0xfffffffffffee6a1]        # 0x1001130
 1012a8f:	jmp    0x1012aa3
 1012a91:	lea    r8,[rsp+0x68]
 1012a96:	mov    rdx,rbx
 1012a99:	mov    rcx,rdi
 1012a9c:	call   0x10128d0
 1012aa1:	mov    ebx,eax
 1012aa3:	mov    rcx,QWORD PTR [rsp+0x68]
 1012aa8:	mov    QWORD PTR [rsi],rcx
 1012aab:	mov    eax,ebx
 1012aad:	mov    rbx,QWORD PTR [rsp+0x58]
 1012ab2:	add    rsp,0x30
 1012ab6:	pop    r12
 1012ab8:	pop    rdi
 1012ab9:	pop    rsi
 1012aba:	ret    
 1012abb:	int3   
 1012abc:	int3   
 1012abd:	int3   
 1012abe:	int3   
 1012abf:	int3   
 1012ac0:	int3   
 1012ac1:	int3   
 1012ac2:	int3   
 1012ac3:	int3   
 1012ac4:	int3   
 1012ac5:	int3   
 1012ac6:	int3   
 1012ac7:	int3   
 1012ac8:	int3   
 1012ac9:	int3   
 1012aca:	int3   
 1012acb:	int3   
 1012acc:	int3   
 1012acd:	int3   
 1012ace:	int3   
 1012acf:	int3   
 1012ad0:	mov    QWORD PTR [rcx],0x0
 1012ad7:	mov    rax,rcx
 1012ada:	ret    
 1012adb:	int3   
 1012adc:	int3   
 1012add:	int3   
 1012ade:	int3   
 1012adf:	int3   
 1012ae0:	int3   
 1012ae1:	int3   
 1012ae2:	int3   
 1012ae3:	int3   
 1012ae4:	int3   
 1012ae5:	int3   
 1012ae6:	int3   
 1012ae7:	int3   
 1012ae8:	int3   
 1012ae9:	int3   
 1012aea:	int3   
 1012aeb:	int3   
 1012aec:	int3   
 1012aed:	int3   
 1012aee:	int3   
 1012aef:	int3   
 1012af0:	mov    QWORD PTR [rsp+0x8],rbx
 1012af5:	push   rdi
 1012af6:	sub    rsp,0x30
 1012afa:	xor    edi,edi
 1012afc:	mov    QWORD PTR [rsp+0x20],rdi
 1012b01:	mov    ebx,edi
 1012b03:	mov    r8,rdx
 1012b06:	xor    edx,edx
 1012b08:	mov    rcx,QWORD PTR [rcx]
 1012b0b:	call   QWORD PTR [rip+0xfffffffffffee6df]        # 0x10011f0
 1012b11:	mov    QWORD PTR [rsp+0x20],rax
 1012b16:	jmp    0x1012b38
 1012b18:	mov    ebx,eax
 1012b1a:	cmp    eax,0xc00000fd
 1012b1f:	jne    0x1012b27
 1012b21:	call   QWORD PTR [rip+0xfffffffffffeea81]        # 0x10015a8
 1012b27:	mov    eax,0x80004005
 1012b2c:	test   ebx,ebx
 1012b2e:	cmovns ebx,eax
 1012b31:	xor    edi,edi
 1012b33:	mov    rax,QWORD PTR [rsp+0x20]
 1012b38:	test   ebx,ebx
 1012b3a:	cmovs  rax,rdi
 1012b3e:	mov    rbx,QWORD PTR [rsp+0x40]
 1012b43:	add    rsp,0x30
 1012b47:	pop    rdi
 1012b48:	ret    
 1012b49:	int3   
 1012b4a:	int3   
 1012b4b:	int3   
 1012b4c:	int3   
 1012b4d:	int3   
 1012b4e:	int3   
 1012b4f:	int3   
 1012b50:	sub    rsp,0x28
 1012b54:	mov    r8,rdx
 1012b57:	xor    edx,edx
 1012b59:	mov    rcx,QWORD PTR [rcx]
 1012b5c:	call   QWORD PTR [rip+0xfffffffffffee686]        # 0x10011e8
 1012b62:	jmp    0x1012b72
 1012b64:	cmp    eax,0xc00000fd
 1012b69:	jne    0x1012b72
 1012b6b:	call   QWORD PTR [rip+0xfffffffffffeea37]        # 0x10015a8
 1012b71:	nop
 1012b72:	add    rsp,0x28
 1012b76:	ret    
 1012b77:	int3   
 1012b78:	int3   
 1012b79:	int3   
 1012b7a:	int3   
 1012b7b:	int3   
 1012b7c:	int3   
 1012b7d:	int3   
 1012b7e:	int3   
 1012b7f:	int3   
 1012b80:	mov    QWORD PTR [rcx],0x0
 1012b87:	mov    rax,rcx
 1012b8a:	ret    
 1012b8b:	int3   
 1012b8c:	int3   
 1012b8d:	int3   
 1012b8e:	int3   
 1012b8f:	int3   
 1012b90:	int3   
 1012b91:	int3   
 1012b92:	int3   
 1012b93:	int3   
 1012b94:	int3   
 1012b95:	int3   
 1012b96:	int3   
 1012b97:	int3   
 1012b98:	int3   
 1012b99:	int3   
 1012b9a:	int3   
 1012b9b:	int3   
 1012b9c:	int3   
 1012b9d:	int3   
 1012b9e:	int3   
 1012b9f:	int3   
 1012ba0:	mov    QWORD PTR [rsp+0x10],rbx
 1012ba5:	mov    QWORD PTR [rsp+0x8],rcx
 1012baa:	push   rdi
 1012bab:	sub    rsp,0x20
 1012baf:	mov    rdi,rcx
 1012bb2:	xor    ebx,ebx
 1012bb4:	mov    rcx,QWORD PTR [rcx]
 1012bb7:	test   rcx,rcx
 1012bba:	je     0x1012bc2
 1012bbc:	mov    rax,QWORD PTR [rcx]
 1012bbf:	call   QWORD PTR [rax+0x10]
 1012bc2:	jmp    0x1012be2
 1012bc4:	mov    ebx,eax
 1012bc6:	cmp    eax,0xc00000fd
 1012bcb:	jne    0x1012bd3
 1012bcd:	call   QWORD PTR [rip+0xfffffffffffee9d5]        # 0x10015a8
 1012bd3:	mov    eax,0x80004005
 1012bd8:	test   ebx,ebx
 1012bda:	cmovns ebx,eax
 1012bdd:	mov    rdi,QWORD PTR [rsp+0x30]
 1012be2:	mov    QWORD PTR [rdi],0x0
 1012be9:	mov    eax,ebx
 1012beb:	mov    rbx,QWORD PTR [rsp+0x38]
 1012bf0:	add    rsp,0x20
 1012bf4:	pop    rdi
 1012bf5:	ret    
 1012bf6:	int3   
 1012bf7:	int3   
 1012bf8:	int3   
 1012bf9:	int3   
 1012bfa:	int3   
 1012bfb:	int3   
 1012bfc:	int3   
 1012bfd:	int3   
 1012bfe:	int3   
 1012bff:	int3   
 1012c00:	mov    QWORD PTR [rsp+0x8],rbx
 1012c05:	mov    QWORD PTR [rsp+0x10],rsi
 1012c0a:	push   rdi
 1012c0b:	sub    rsp,0x20
 1012c0f:	mov    rdi,rdx
 1012c12:	mov    rsi,rcx
 1012c15:	call   0x1012ba0
 1012c1a:	xor    ebx,ebx
 1012c1c:	test   rdi,rdi
 1012c1f:	je     0x1012c2a
 1012c21:	mov    rax,QWORD PTR [rdi]
 1012c24:	mov    rcx,rdi
 1012c27:	call   QWORD PTR [rax+0x8]
 1012c2a:	mov    QWORD PTR [rsi],rdi
 1012c2d:	jmp    0x1012c48
 1012c2f:	mov    ebx,eax
 1012c31:	cmp    eax,0xc00000fd
 1012c36:	jne    0x1012c3e
 1012c38:	call   QWORD PTR [rip+0xfffffffffffee96a]        # 0x10015a8
 1012c3e:	mov    eax,0x80004005
 1012c43:	test   ebx,ebx
 1012c45:	cmovns ebx,eax
 1012c48:	mov    eax,ebx
 1012c4a:	mov    rbx,QWORD PTR [rsp+0x30]
 1012c4f:	mov    rsi,QWORD PTR [rsp+0x38]
 1012c54:	add    rsp,0x20
 1012c58:	pop    rdi
 1012c59:	ret    
 1012c5a:	int3   
 1012c5b:	int3   
 1012c5c:	int3   
 1012c5d:	int3   
 1012c5e:	int3   
 1012c5f:	int3   
 1012c60:	mov    QWORD PTR [rcx],0x0
 1012c67:	ret    
 1012c68:	int3   
 1012c69:	int3   
 1012c6a:	int3   
 1012c6b:	int3   
 1012c6c:	int3   
 1012c6d:	int3   
 1012c6e:	int3   
 1012c6f:	int3   
 1012c70:	mov    rax,QWORD PTR [rcx]
 1012c73:	ret    
 1012c74:	int3   
 1012c75:	int3   
 1012c76:	int3   
 1012c77:	int3   
 1012c78:	int3   
 1012c79:	int3   
 1012c7a:	int3   
 1012c7b:	int3   
 1012c7c:	int3   
 1012c7d:	int3   
 1012c7e:	int3   
 1012c7f:	int3   
 1012c80:	or     r9d,0xffffffff
 1012c84:	test   rdx,rdx
 1012c87:	mov    r10,rcx
 1012c8a:	je     0x1012cc2
 1012c8c:	lea    r11,[rip+0xffffffffffff131d]        # 0x1003fb0
 1012c93:	nop
 1012c94:	data16 data16 xchg ax,ax
 1012c98:	data16 data16 xchg ax,ax
 1012c9c:	data16 data16 xchg ax,ax
 1012ca0:	movzx  r8d,BYTE PTR [r10]
 1012ca4:	mov    ecx,r9d
 1012ca7:	add    r10,0x1
 1012cab:	xor    r8b,r9b
 1012cae:	shr    ecx,0x8
 1012cb1:	movzx  eax,r8b
 1012cb5:	mov    r9d,DWORD PTR [r11+rax*4]
 1012cb9:	xor    r9d,ecx
 1012cbc:	sub    rdx,0x1
 1012cc0:	jne    0x1012ca0
 1012cc2:	mov    eax,r9d
 1012cc5:	ret    
 1012cc6:	int3   
 1012cc7:	int3   
 1012cc8:	int3   
 1012cc9:	int3   
 1012cca:	int3   
 1012ccb:	int3   
 1012ccc:	int3   
 1012ccd:	int3   
 1012cce:	int3   
 1012ccf:	int3   
 1012cd0:	sub    rsp,0x8
 1012cd4:	test   rcx,rcx
 1012cd7:	mov    r8,rcx
 1012cda:	je     0x1012d3a
 1012cdc:	mov    QWORD PTR [rsp],rdi
 1012ce0:	or     rcx,0xffffffffffffffff
 1012ce4:	xor    eax,eax
 1012ce6:	mov    rdi,r8
 1012ce9:	repnz scas ax,WORD PTR es:[rdi]
 1012cec:	mov    edi,0xffffffff
 1012cf1:	not    rcx
 1012cf4:	lea    r9,[rcx-0x1]
 1012cf8:	add    r9,r9
 1012cfb:	je     0x1012d2f
 1012cfd:	lea    r10,[rip+0xffffffffffff12ac]        # 0x1003fb0
 1012d04:	data16 data16 xchg ax,ax
 1012d08:	data16 data16 xchg ax,ax
 1012d0c:	data16 data16 xchg ax,ax
 1012d10:	movzx  edx,BYTE PTR [r8]
 1012d14:	mov    eax,edi
 1012d16:	add    r8,0x1
 1012d1a:	xor    dl,dil
 1012d1d:	shr    eax,0x8
 1012d20:	movzx  ecx,dl
 1012d23:	mov    edi,DWORD PTR [r10+rcx*4]
 1012d27:	xor    edi,eax
 1012d29:	sub    r9,0x1
 1012d2d:	jne    0x1012d10
 1012d2f:	mov    eax,edi
 1012d31:	mov    rdi,QWORD PTR [rsp]
 1012d35:	add    rsp,0x8
 1012d39:	ret    
 1012d3a:	xor    eax,eax
 1012d3c:	add    rsp,0x8
 1012d40:	ret    
 1012d41:	int3   
 1012d42:	int3   
 1012d43:	int3   
 1012d44:	int3   
 1012d45:	int3   
 1012d46:	int3   
 1012d47:	int3   
 1012d48:	int3   
 1012d49:	int3   
 1012d4a:	int3   
 1012d4b:	int3   
 1012d4c:	int3   
 1012d4d:	int3   
 1012d4e:	int3   
 1012d4f:	int3   
 1012d50:	xor    eax,eax
 1012d52:	mov    DWORD PTR [rcx],eax
 1012d54:	mov    DWORD PTR [rcx+0x4],eax
 1012d57:	mov    rax,rcx
 1012d5a:	ret    
 1012d5b:	int3   
 1012d5c:	int3   
 1012d5d:	int3   
 1012d5e:	int3   
 1012d5f:	int3   
 1012d60:	int3   
 1012d61:	int3   
 1012d62:	int3   
 1012d63:	int3   
 1012d64:	int3   
 1012d65:	int3   
 1012d66:	int3   
 1012d67:	int3   
 1012d68:	int3   
 1012d69:	int3   
 1012d6a:	int3   
 1012d6b:	int3   
 1012d6c:	int3   
 1012d6d:	int3   
 1012d6e:	int3   
 1012d6f:	int3   
 1012d70:	mov    edx,DWORD PTR [rcx]
 1012d72:	xor    eax,eax
 1012d74:	cmp    edx,0x2
 1012d77:	sete   al
 1012d7a:	ret    
 1012d7b:	int3   
 1012d7c:	int3   
 1012d7d:	int3   
 1012d7e:	int3   
 1012d7f:	int3   
 1012d80:	int3   
 1012d81:	int3   
 1012d82:	int3   
 1012d83:	int3   
 1012d84:	int3   
 1012d85:	int3   
 1012d86:	int3   
 1012d87:	int3   
 1012d88:	int3   
 1012d89:	int3   
 1012d8a:	int3   
 1012d8b:	int3   
 1012d8c:	int3   
 1012d8d:	int3   
 1012d8e:	int3   
 1012d8f:	int3   
 1012d90:	mov    eax,DWORD PTR [rcx+0x4]
 1012d93:	ret    
 1012d94:	int3   
 1012d95:	int3   
 1012d96:	int3   
 1012d97:	int3   
 1012d98:	int3   
 1012d99:	int3   
 1012d9a:	int3   
 1012d9b:	int3   
 1012d9c:	int3   
 1012d9d:	int3   
 1012d9e:	int3   
 1012d9f:	int3   
 1012da0:	rex push rbx
 1012da2:	sub    rsp,0x50
 1012da6:	lea    rcx,[rip+0xffffffffffff161b]        # 0x10043c8
 1012dad:	call   QWORD PTR [rip+0xfffffffffffee3cd]        # 0x1001180
 1012db3:	lea    rdx,[rip+0xffffffffffff15f6]        # 0x10043b0
 1012dba:	mov    rcx,rax
 1012dbd:	mov    rbx,rax
 1012dc0:	call   QWORD PTR [rip+0xfffffffffffee5c2]        # 0x1001388
 1012dc6:	test   rax,rax
 1012dc9:	mov    QWORD PTR [rip+0x9420],rax        # 0x101c1f0
 1012dd0:	jne    0x1012ddb
 1012dd2:	mov    rcx,rbx
 1012dd5:	call   QWORD PTR [rip+0xfffffffffffee53d]        # 0x1001318
 1012ddb:	lea    rcx,[rsp+0x20]
 1012de0:	call   QWORD PTR [rip+0xfffffffffffee332]        # 0x1001118
 1012de6:	mov    r11d,DWORD PTR [rsp+0x24]
 1012deb:	mov    DWORD PTR [rip+0x9406],r11d        # 0x101c1f8
 1012df2:	add    rsp,0x50
 1012df6:	pop    rbx
 1012df7:	ret    
 1012df8:	int3   
 1012df9:	int3   
 1012dfa:	int3   
 1012dfb:	int3   
 1012dfc:	int3   
 1012dfd:	int3   
 1012dfe:	int3   
 1012dff:	int3   
 1012e00:	mov    QWORD PTR [rsp+0x18],rsi
 1012e05:	push   rdi
 1012e06:	sub    rsp,0x60
 1012e0a:	test   rcx,rcx
 1012e0d:	mov    rsi,rdx
 1012e10:	mov    rdi,rcx
 1012e13:	jne    0x1012e25
 1012e15:	xor    eax,eax
 1012e17:	mov    rsi,QWORD PTR [rsp+0x80]
 1012e1f:	add    rsp,0x60
 1012e23:	pop    rdi
 1012e24:	ret    
 1012e25:	mov    QWORD PTR [rsp+0x70],rbx
 1012e2a:	mov    QWORD PTR [rsp+0x78],rbp
 1012e2f:	mov    eax,0xee
 1012e34:	mov    ebp,0xcc
 1012e39:	test   r8d,r8d
 1012e3c:	mov    rbx,rcx
 1012e3f:	cmovne ebp,eax
 1012e42:	cmp    QWORD PTR [rip+0x93a6],0x0        # 0x101c1f0
 1012e4a:	je     0x1012eba
 1012e4c:	mov    QWORD PTR [rsp+0x20],rbx
 1012e51:	call   QWORD PTR [rip+0xfffffffffffee499]        # 0x10012f0
 1012e57:	lea    rdx,[rsp+0x20]
 1012e5c:	mov    rcx,rax
 1012e5f:	mov    r8d,0x10
 1012e65:	call   QWORD PTR [rip+0x9385]        # 0x101c1f0
 1012e6b:	test   eax,eax
 1012e6d:	je     0x1012eba
 1012e6f:	mov    rax,QWORD PTR [rsp+0x28]
 1012e74:	test   al,0x1
 1012e76:	je     0x1012eba
 1012e78:	shr    rax,0x4
 1012e7c:	and    eax,0x7ff
 1012e81:	test   ebp,eax
 1012e83:	je     0x1012f1f
 1012e89:	mov    edx,DWORD PTR [rip+0x9369]        # 0x101c1f8
 1012e8f:	lea    ecx,[rdx-0x1]
 1012e92:	not    rcx
 1012e95:	and    rbx,rcx
 1012e98:	mov    rcx,rsi
 1012e9b:	add    rbx,rdx
 1012e9e:	mov    rax,rbx
 1012ea1:	sub    rax,rdi
 1012ea4:	cmp    rax,rsi
 1012ea7:	cmovb  rcx,rax
 1012eab:	add    rdi,rcx
 1012eae:	sub    rsi,rcx
 1012eb1:	jne    0x1012f16
 1012eb3:	mov    eax,0x1
 1012eb8:	jmp    0x1012f21
 1012eba:	lea    rdx,[rsp+0x30]
 1012ebf:	mov    r8d,0x30
 1012ec5:	mov    rcx,rbx
 1012ec8:	call   QWORD PTR [rip+0xfffffffffffee28a]        # 0x1001158
 1012ece:	cmp    rax,0x30
 1012ed2:	jne    0x1012f1f
 1012ed4:	mov    rcx,QWORD PTR [rsp+0x30]
 1012ed9:	mov    rbx,QWORD PTR [rsp+0x48]
 1012ede:	add    rbx,rcx
 1012ee1:	cmp    rdi,rbx
 1012ee4:	jae    0x1012f16
 1012ee6:	cmp    DWORD PTR [rsp+0x50],0x1000
 1012eee:	jne    0x1012f1f
 1012ef0:	mov    eax,DWORD PTR [rsp+0x54]
 1012ef4:	test   ebp,eax
 1012ef6:	je     0x1012f1f
 1012ef8:	bt     eax,0x8
 1012efc:	jb     0x1012f1f
 1012efe:	mov    rcx,rsi
 1012f01:	mov    rax,rbx
 1012f04:	sub    rax,rdi
 1012f07:	cmp    rax,rsi
 1012f0a:	cmovb  rcx,rax
 1012f0e:	add    rdi,rcx
 1012f11:	sub    rsi,rcx
 1012f14:	je     0x1012eb3
 1012f16:	cmp    rbx,rdi
 1012f19:	jbe    0x1012e42
 1012f1f:	xor    eax,eax
 1012f21:	mov    rbx,QWORD PTR [rsp+0x70]
 1012f26:	mov    rbp,QWORD PTR [rsp+0x78]
 1012f2b:	mov    rsi,QWORD PTR [rsp+0x80]
 1012f33:	add    rsp,0x60
 1012f37:	pop    rdi
 1012f38:	ret    
 1012f39:	int3   
 1012f3a:	int3   
 1012f3b:	int3   
 1012f3c:	int3   
 1012f3d:	int3   
 1012f3e:	int3   
 1012f3f:	int3   
 1012f40:	mov    QWORD PTR [rsp+0x8],rbx
 1012f45:	mov    QWORD PTR [rsp+0x10],rsi
 1012f4a:	push   rdi
 1012f4b:	sub    rsp,0x30
 1012f4f:	mov    rsi,rcx
 1012f52:	xor    ebx,ebx
 1012f54:	mov    DWORD PTR [rsp+0x20],ebx
 1012f58:	mov    edi,ebx
 1012f5a:	cmp    QWORD PTR [rcx],rbx
 1012f5d:	jne    0x1012f90
 1012f5f:	xor    r8d,r8d
 1012f62:	mov    edx,0x10000
 1012f67:	xor    ecx,ecx
 1012f69:	call   QWORD PTR [rip+0xfffffffffffee1a1]        # 0x1001110
 1012f6f:	mov    QWORD PTR [rsi],rax
 1012f72:	test   rax,rax
 1012f75:	jne    0x1012f90
 1012f77:	call   QWORD PTR [rip+0xfffffffffffee3d3]        # 0x1001350
 1012f7d:	mov    ebx,eax
 1012f7f:	test   eax,eax
 1012f81:	jle    0x1012f8c
 1012f83:	movzx  ebx,ax
 1012f86:	or     ebx,0x80070000
 1012f8c:	mov    DWORD PTR [rsp+0x20],ebx
 1012f90:	jmp    0x1012faf
 1012f92:	mov    edi,eax
 1012f94:	cmp    eax,0xc00000fd
 1012f99:	jne    0x1012fa1
 1012f9b:	call   QWORD PTR [rip+0xfffffffffffee607]        # 0x10015a8
 1012fa1:	mov    eax,0x80004005
 1012fa6:	test   edi,edi
 1012fa8:	cmovns edi,eax
 1012fab:	mov    ebx,DWORD PTR [rsp+0x20]
 1012faf:	test   ebx,ebx
 1012fb1:	cmovns ebx,edi
 1012fb4:	mov    eax,ebx
 1012fb6:	mov    rbx,QWORD PTR [rsp+0x40]
 1012fbb:	mov    rsi,QWORD PTR [rsp+0x48]
 1012fc0:	add    rsp,0x30
 1012fc4:	pop    rdi
 1012fc5:	ret    
 1012fc6:	int3   
 1012fc7:	int3   
 1012fc8:	int3   
 1012fc9:	int3   
 1012fca:	int3   
 1012fcb:	int3   
 1012fcc:	int3   
 1012fcd:	int3   
 1012fce:	int3   
 1012fcf:	int3   
 1012fd0:	mov    QWORD PTR [rsp+0x8],rbx
 1012fd5:	push   rdi
 1012fd6:	sub    rsp,0x20
 1012fda:	mov    rbx,rcx
 1012fdd:	mov    edi,0x1
 1012fe2:	xor    eax,eax
 1012fe4:	lock cmpxchg DWORD PTR [rcx],edi
 1012fe8:	jne    0x1012ff7
 1012fea:	mov    eax,edi
 1012fec:	mov    rbx,QWORD PTR [rsp+0x30]
 1012ff1:	add    rsp,0x20
 1012ff5:	pop    rdi
 1012ff6:	ret    
 1012ff7:	mov    eax,DWORD PTR [rcx]
 1012ff9:	cmp    eax,0x2
 1012ffc:	je     0x1013011
 1012ffe:	xchg   ax,ax
 1013000:	mov    ecx,edi
 1013002:	call   QWORD PTR [rip+0xfffffffffffee260]        # 0x1001268
 1013008:	mov    r11d,DWORD PTR [rbx]
 101300b:	cmp    r11d,0x2
 101300f:	jne    0x1013000
 1013011:	xor    eax,eax
 1013013:	mov    rbx,QWORD PTR [rsp+0x30]
 1013018:	add    rsp,0x20
 101301c:	pop    rdi
 101301d:	ret    
 101301e:	int3   
 101301f:	int3   
 1013020:	int3   
 1013021:	int3   
 1013022:	int3   
 1013023:	int3   
 1013024:	int3   
 1013025:	int3   
 1013026:	int3   
 1013027:	int3   
 1013028:	int3   
 1013029:	int3   
 101302a:	int3   
 101302b:	int3   
 101302c:	int3   
 101302d:	int3   
 101302e:	int3   
 101302f:	int3   
 1013030:	mov    DWORD PTR [rcx+0x4],edx
 1013033:	mov    eax,0x1
 1013038:	mov    edx,0x2
 101303d:	lock cmpxchg DWORD PTR [rcx],edx
 1013041:	ret    
 1013042:	int3   
 1013043:	int3   
 1013044:	int3   
 1013045:	int3   
 1013046:	int3   
 1013047:	int3   
 1013048:	int3   
 1013049:	int3   
 101304a:	int3   
 101304b:	int3   
 101304c:	int3   
 101304d:	int3   
 101304e:	int3   
 101304f:	int3   
 1013050:	mov    QWORD PTR [rsp+0x8],rbx
 1013055:	mov    QWORD PTR [rsp+0x18],rbp
 101305a:	mov    QWORD PTR [rsp+0x20],rsi
 101305f:	push   rdi
 1013060:	sub    rsp,0x30
 1013064:	xor    ebp,ebp
 1013066:	test   rdx,rdx
 1013069:	mov    rbx,r8
 101306c:	mov    rdi,rdx
 101306f:	mov    rsi,rcx
 1013072:	mov    QWORD PTR [rsp+0x48],rbp
 1013077:	je     0x10130e6
 1013079:	test   rcx,rcx
 101307c:	je     0x10130e6
 101307e:	test   rbx,rbx
 1013081:	je     0x10130e6
 1013083:	lea    r8d,[rbp+0x1]
 1013087:	mov    rdx,rbx
 101308a:	mov    rcx,rdi
 101308d:	call   0x1012e00
 1013092:	test   eax,eax
 1013094:	jne    0x101309d
 1013096:	mov    eax,0x800703e6
 101309b:	jmp    0x10130eb
 101309d:	call   QWORD PTR [rip+0xfffffffffffee24d]        # 0x10012f0
 10130a3:	mov    r9,rbx
 10130a6:	mov    r8,rsi
 10130a9:	mov    rcx,rax
 10130ac:	lea    rax,[rsp+0x48]
 10130b1:	mov    rdx,rdi
 10130b4:	mov    QWORD PTR [rsp+0x20],rax
 10130b9:	call   QWORD PTR [rip+0xfffffffffffee219]        # 0x10012d8
 10130bf:	test   eax,eax
 10130c1:	je     0x10130d2
 10130c3:	cmp    QWORD PTR [rsp+0x48],rbx
 10130c8:	mov    eax,0x8007012b
 10130cd:	cmove  eax,ebp
 10130d0:	jmp    0x10130eb
 10130d2:	call   QWORD PTR [rip+0xfffffffffffee278]        # 0x1001350
 10130d8:	test   eax,eax
 10130da:	jle    0x10130eb
 10130dc:	movzx  eax,ax
 10130df:	or     eax,0x80070000
 10130e4:	jmp    0x10130eb
 10130e6:	mov    eax,0x80070057
 10130eb:	mov    rbx,QWORD PTR [rsp+0x40]
 10130f0:	mov    rbp,QWORD PTR [rsp+0x50]
 10130f5:	mov    rsi,QWORD PTR [rsp+0x58]
 10130fa:	add    rsp,0x30
 10130fe:	pop    rdi
 10130ff:	ret    
 1013100:	int3   
 1013101:	int3   
 1013102:	int3   
 1013103:	int3   
 1013104:	int3   
 1013105:	int3   
 1013106:	int3   
 1013107:	int3   
 1013108:	int3   
 1013109:	int3   
 101310a:	int3   
 101310b:	int3   
 101310c:	int3   
 101310d:	int3   
 101310e:	int3   
 101310f:	int3   
 1013110:	mov    QWORD PTR [rsp+0x18],r8
 1013115:	mov    QWORD PTR [rsp+0x20],r9
 101311a:	push   rsi
 101311b:	push   rdi
 101311c:	sub    rsp,0x48
 1013120:	cmp    rdx,0x7fffffff
 1013127:	mov    rsi,rdx
 101312a:	mov    rdi,rcx
 101312d:	jbe    0x101313b
 101312f:	mov    eax,0x80070057
 1013134:	add    rsp,0x48
 1013138:	pop    rdi
 1013139:	pop    rsi
 101313a:	ret    
 101313b:	test   rcx,rcx
 101313e:	mov    QWORD PTR [rsp+0x40],rbx
 1013143:	je     0x101317b
 1013145:	mov    rcx,rdx
 1013148:	xor    edx,edx
 101314a:	test   rsi,rsi
 101314d:	mov    rax,rdi
 1013150:	je     0x1013161
 1013152:	cmp    WORD PTR [rax],dx
 1013155:	je     0x101316e
 1013157:	add    rax,0x2
 101315b:	sub    rcx,0x1
 101315f:	jne    0x1013152
 1013161:	mov    edx,0x80070057
 1013166:	xor    ebx,ebx
 1013168:	test   edx,edx
 101316a:	jns    0x1013182
 101316c:	jmp    0x1013180
 101316e:	test   rcx,rcx
 1013171:	je     0x1013161
 1013173:	mov    rbx,rsi
 1013176:	sub    rbx,rcx
 1013179:	jmp    0x1013168
 101317b:	mov    edx,0x80070057
 1013180:	xor    ebx,ebx
 1013182:	test   edx,edx
 1013184:	js     0x101322c
 101318a:	mov    QWORD PTR [rsp+0x38],rbp
 101318f:	mov    QWORD PTR [rsp+0x30],r12
 1013194:	lea    r12,[rsp+0x78]
 1013199:	call   0x1005640
 101319e:	sub    rsi,rbx
 10131a1:	lea    rbp,[rdi+rbx*2]
 10131a5:	mov    edi,0x0
 10131aa:	je     0x10131b5
 10131ac:	cmp    rsi,0x7fffffff
 10131b3:	jbe    0x10131ba
 10131b5:	mov    edi,0x80070057
 10131ba:	test   edi,edi
 10131bc:	js     0x1013214
 10131be:	mov    r8,QWORD PTR [rsp+0x70]
 10131c3:	lea    rbx,[rsi-0x1]
 10131c7:	mov    r9,rax
 10131ca:	mov    rcx,rbp
 10131cd:	mov    rdx,rbx
 10131d0:	xor    edi,edi
 10131d2:	mov    QWORD PTR [rsp+0x20],r12
 10131d7:	call   QWORD PTR [rip+0xfffffffffffee3d3]        # 0x10015b0
 10131dd:	test   eax,eax
 10131df:	js     0x101320a
 10131e1:	cdqe   
 10131e3:	cmp    rax,rbx
 10131e6:	ja     0x101320a
 10131e8:	cmp    rax,rbx
 10131eb:	jne    0x1013214
 10131ed:	mov    r12,QWORD PTR [rsp+0x30]
 10131f2:	mov    WORD PTR [rbp+rbx*2+0x0],di
 10131f7:	mov    rbp,QWORD PTR [rsp+0x38]
 10131fc:	mov    rbx,QWORD PTR [rsp+0x40]
 1013201:	mov    eax,edi
 1013203:	add    rsp,0x48
 1013207:	pop    rdi
 1013208:	pop    rsi
 1013209:	ret    
 101320a:	mov    WORD PTR [rbp+rbx*2+0x0],di
 101320f:	mov    edi,0x8007007a
 1013214:	mov    r12,QWORD PTR [rsp+0x30]
 1013219:	mov    rbp,QWORD PTR [rsp+0x38]
 101321e:	mov    rbx,QWORD PTR [rsp+0x40]
 1013223:	mov    eax,edi
 1013225:	add    rsp,0x48
 1013229:	pop    rdi
 101322a:	pop    rsi
 101322b:	ret    
 101322c:	mov    eax,edx
 101322e:	mov    rbx,QWORD PTR [rsp+0x40]
 1013233:	add    rsp,0x48
 1013237:	pop    rdi
 1013238:	pop    rsi
 1013239:	ret    
 101323a:	int3   
 101323b:	int3   
 101323c:	int3   
 101323d:	int3   
 101323e:	int3   
 101323f:	int3   
 1013240:	mov    QWORD PTR [rsp+0x8],rbx
 1013245:	mov    QWORD PTR [rsp+0x10],rbp
 101324a:	mov    QWORD PTR [rsp+0x18],rsi
 101324f:	push   rdi
 1013250:	sub    rsp,0x40
 1013254:	xor    ebx,ebx
 1013256:	test   r9,r9
 1013259:	lea    r10d,[r9+r9*1]
 101325d:	mov    rdi,r9
 1013260:	mov    rsi,r8
 1013263:	mov    r11,rdx
 1013266:	mov    DWORD PTR [rsp+0x30],r10d
 101326b:	mov    rbp,rcx
 101326e:	mov    DWORD PTR [rsp+0x68],ebx
 1013272:	je     0x10132c3
 1013274:	cmp    r9,0x7fffffff
 101327b:	ja     0x10132c3
 101327d:	mov    r8,r9
 1013280:	mov    ecx,0x7ffffffe
 1013285:	mov    rdx,rsi
 1013288:	sub    rcx,r9
 101328b:	lea    r9,[rip+0xfffffffffffeeb06]        # 0x1001d98
 1013292:	sub    r9,rsi
 1013295:	lea    rax,[rcx+r8*1]
 1013299:	test   rax,rax
 101329c:	je     0x10132b7
 101329e:	movzx  eax,WORD PTR [r9+rdx*1]
 10132a3:	test   ax,ax
 10132a6:	je     0x10132b7
 10132a8:	mov    WORD PTR [rdx],ax
 10132ab:	add    rdx,0x2
 10132af:	sub    r8,0x1
 10132b3:	jne    0x1013295
 10132b5:	jmp    0x10132bc
 10132b7:	test   r8,r8
 10132ba:	jne    0x10132c0
 10132bc:	sub    rdx,0x2
 10132c0:	mov    WORD PTR [rdx],bx
 10132c3:	mov    eax,r10d
 10132c6:	cmp    rax,rdi
 10132c9:	jae    0x10132d2
 10132cb:	mov    eax,0x80070057
 10132d0:	jmp    0x1013341
 10132d2:	lea    rax,[rsp+0x30]
 10132d7:	lea    r9,[rsp+0x68]
 10132dc:	xor    r8d,r8d
 10132df:	mov    QWORD PTR [rsp+0x28],rax
 10132e4:	mov    rdx,r11
 10132e7:	mov    rcx,rbp
 10132ea:	mov    QWORD PTR [rsp+0x20],rsi
 10132ef:	call   QWORD PTR [rip+0xfffffffffffedd1b]        # 0x1001010
 10132f5:	test   eax,eax
 10132f7:	jne    0x1013330
 10132f9:	cmp    DWORD PTR [rsp+0x68],0x1
 10132fe:	jne    0x1013329
 1013300:	mov    eax,DWORD PTR [rsp+0x30]
 1013304:	test   al,0x1
 1013306:	jne    0x1013329
 1013308:	cmp    eax,0x2
 101330b:	jb     0x1013329
 101330d:	shr    rax,1
 1013310:	cmp    WORD PTR [rsi+rax*2-0x2],bx
 1013315:	je     0x101333f
 1013317:	cmp    rax,rdi
 101331a:	jae    0x1013322
 101331c:	mov    WORD PTR [rsi+rax*2],bx
 1013320:	jmp    0x101333f
 1013322:	mov    ebx,0x8007007a
 1013327:	jmp    0x101333f
 1013329:	mov    ebx,0x8007000b
 101332e:	jmp    0x101333f
 1013330:	jg     0x1013336
 1013332:	mov    ebx,eax
 1013334:	jmp    0x101333f
 1013336:	movzx  ebx,ax
 1013339:	or     ebx,0x80070000
 101333f:	mov    eax,ebx
 1013341:	mov    rbx,QWORD PTR [rsp+0x50]
 1013346:	mov    rbp,QWORD PTR [rsp+0x58]
 101334b:	mov    rsi,QWORD PTR [rsp+0x60]
 1013350:	add    rsp,0x40
 1013354:	pop    rdi
 1013355:	ret    
 1013356:	int3   
 1013357:	int3   
 1013358:	int3   
 1013359:	int3   
 101335a:	int3   
 101335b:	int3   
 101335c:	int3   
 101335d:	int3   
 101335e:	int3   
 101335f:	int3   
 1013360:	mov    rax,r8
 1013363:	mov    rcx,rdx
 1013366:	mov    r8,r9
 1013369:	mov    rdx,rax
 101336c:	jmp    0x1013050
 1013371:	int3   
 1013372:	int3   
 1013373:	int3   
 1013374:	int3   
 1013375:	int3   
 1013376:	int3   
 1013377:	int3   
 1013378:	int3   
 1013379:	int3   
 101337a:	int3   
 101337b:	int3   
 101337c:	int3   
 101337d:	int3   
 101337e:	int3   
 101337f:	int3   
 1013380:	mov    DWORD PTR [rcx+0x74],edx
 1013383:	xor    eax,eax
 1013385:	ret    
 1013386:	int3   
 1013387:	int3   
 1013388:	int3   
 1013389:	int3   
 101338a:	int3   
 101338b:	int3   
 101338c:	int3   
 101338d:	int3   
 101338e:	int3   
 101338f:	int3   
 1013390:	mov    QWORD PTR [rsp+0x8],rbx
 1013395:	push   rdi
 1013396:	sub    rsp,0x20
 101339a:	cmp    DWORD PTR [rcx+0x74],0x0
 101339e:	mov    rdi,rdx
 10133a1:	mov    rbx,rcx
 10133a4:	je     0x10133e4
 10133a6:	mov    eax,DWORD PTR [rcx+0xac]
 10133ac:	not    eax
 10133ae:	and    eax,DWORD PTR [rcx+0xa8]
 10133b4:	test   al,0x20
 10133b6:	jne    0x10133e4
 10133b8:	call   QWORD PTR [rip+0xfffffffffffedf9a]        # 0x1001358
 10133be:	cmp    eax,DWORD PTR [rbx+0x74]
 10133c1:	je     0x10133e4
 10133c3:	call   QWORD PTR [rip+0xfffffffffffedf8f]        # 0x1001358
 10133c9:	cmp    eax,DWORD PTR [rbx+0xa4]
 10133cf:	je     0x10133e4
 10133d1:	mov    DWORD PTR [rdi],0x0
 10133d7:	xor    eax,eax
 10133d9:	mov    rbx,QWORD PTR [rsp+0x30]
 10133de:	add    rsp,0x20
 10133e2:	pop    rdi
 10133e3:	ret    
 10133e4:	mov    rbx,QWORD PTR [rsp+0x30]
 10133e9:	mov    DWORD PTR [rdi],0x1
 10133ef:	xor    eax,eax
 10133f1:	add    rsp,0x20
 10133f5:	pop    rdi
 10133f6:	ret    
 10133f7:	int3   
 10133f8:	int3   
 10133f9:	int3   
 10133fa:	int3   
 10133fb:	int3   
 10133fc:	int3   
 10133fd:	int3   
 10133fe:	int3   
 10133ff:	int3   
 1013400:	mov    DWORD PTR [rcx+0x13b0],edx
 1013406:	xor    eax,eax
 1013408:	ret    
 1013409:	int3   
 101340a:	int3   
 101340b:	int3   
 101340c:	int3   
 101340d:	int3   
 101340e:	int3   
 101340f:	int3   
 1013410:	mov    QWORD PTR [rcx+0x90],rdx
 1013417:	xor    eax,eax
 1013419:	ret    
 101341a:	int3   
 101341b:	int3   
 101341c:	int3   
 101341d:	int3   
 101341e:	int3   
 101341f:	int3   
 1013420:	mov    QWORD PTR [rcx+0x98],rdx
 1013427:	mov    DWORD PTR [rcx+0xa0],r8d
 101342e:	xor    eax,eax
 1013430:	ret    
 1013431:	int3   
 1013432:	int3   
 1013433:	int3   
 1013434:	int3   
 1013435:	int3   
 1013436:	int3   
 1013437:	int3   
 1013438:	int3   
 1013439:	int3   
 101343a:	int3   
 101343b:	int3   
 101343c:	int3   
 101343d:	int3   
 101343e:	int3   
 101343f:	int3   
 1013440:	mov    DWORD PTR [rcx+0xb0],edx
 1013446:	mov    DWORD PTR [rcx+0xb4],r8d
 101344d:	xor    eax,eax
 101344f:	ret    
 1013450:	int3   
 1013451:	int3   
 1013452:	int3   
 1013453:	int3   
 1013454:	int3   
 1013455:	int3   
 1013456:	int3   
 1013457:	int3   
 1013458:	int3   
 1013459:	int3   
 101345a:	int3   
 101345b:	int3   
 101345c:	int3   
 101345d:	int3   
 101345e:	int3   
 101345f:	int3   
 1013460:	rex push rbx
 1013462:	sub    rsp,0x20
 1013466:	mov    rbx,rcx
 1013469:	mov    DWORD PTR [rcx+0xa8],edx
 101346f:	mov    DWORD PTR [rcx+0xac],r8d
 1013476:	mov    rcx,QWORD PTR [rcx+0x10]
 101347a:	test   rcx,rcx
 101347d:	je     0x101349c
 101347f:	call   0x1011c60
 1013484:	test   eax,eax
 1013486:	je     0x101349c
 1013488:	bt     DWORD PTR [rbx+0xac],0x11
 1013490:	jb     0x101349c
 1013492:	or     DWORD PTR [rbx+0xa8],0x20000
 101349c:	xor    eax,eax
 101349e:	add    rsp,0x20
 10134a2:	pop    rbx
 10134a3:	ret    
 10134a4:	int3   
 10134a5:	int3   
 10134a6:	int3   
 10134a7:	int3   
 10134a8:	int3   
 10134a9:	int3   
 10134aa:	int3   
 10134ab:	int3   
 10134ac:	int3   
 10134ad:	int3   
 10134ae:	int3   
 10134af:	int3   
 10134b0:	mov    QWORD PTR [rcx+0x40],rdx
 10134b4:	xor    eax,eax
 10134b6:	ret    
 10134b7:	int3   
 10134b8:	int3   
 10134b9:	int3   
 10134ba:	int3   
 10134bb:	int3   
 10134bc:	int3   
 10134bd:	int3   
 10134be:	int3   
 10134bf:	int3   
 10134c0:	mov    QWORD PTR [rcx+0x38],rdx
 10134c4:	xor    eax,eax
 10134c6:	ret    
 10134c7:	int3   
 10134c8:	int3   
 10134c9:	int3   
 10134ca:	int3   
 10134cb:	int3   
 10134cc:	int3   
 10134cd:	int3   
 10134ce:	int3   
 10134cf:	int3   
 10134d0:	mov    DWORD PTR [rcx+0xa4],edx
 10134d6:	mov    QWORD PTR [rcx+0x30],r8
 10134da:	mov    QWORD PTR [rcx+0x28],r9
 10134de:	xor    eax,eax
 10134e0:	ret    
 10134e1:	int3   
 10134e2:	int3   
 10134e3:	int3   
 10134e4:	int3   
 10134e5:	int3   
 10134e6:	int3   
 10134e7:	int3   
 10134e8:	int3   
 10134e9:	int3   
 10134ea:	int3   
 10134eb:	int3   
 10134ec:	int3   
 10134ed:	int3   
 10134ee:	int3   
 10134ef:	int3   
 10134f0:	mov    QWORD PTR [rcx+0x80],rdx
 10134f7:	xor    eax,eax
 10134f9:	ret    
 10134fa:	int3   
 10134fb:	int3   
 10134fc:	int3   
 10134fd:	int3   
 10134fe:	int3   
 10134ff:	int3   
 1013500:	mov    QWORD PTR [rcx+0x50],rdx
 1013504:	xor    eax,eax
 1013506:	ret    
 1013507:	int3   
 1013508:	int3   
 1013509:	int3   
 101350a:	int3   
 101350b:	int3   
 101350c:	int3   
 101350d:	int3   
 101350e:	int3   
 101350f:	int3   
 1013510:	mov    QWORD PTR [rcx+0x48],rdx
 1013514:	xor    eax,eax
 1013516:	ret    
 1013517:	int3   
 1013518:	int3   
 1013519:	int3   
 101351a:	int3   
 101351b:	int3   
 101351c:	int3   
 101351d:	int3   
 101351e:	int3   
 101351f:	int3   
 1013520:	mov    QWORD PTR [rcx+0x20],rdx
 1013524:	xor    eax,eax
 1013526:	ret    
 1013527:	int3   
 1013528:	int3   
 1013529:	int3   
 101352a:	int3   
 101352b:	int3   
 101352c:	int3   
 101352d:	int3   
 101352e:	int3   
 101352f:	int3   
 1013530:	mov    QWORD PTR [rcx+0x58],rdx
 1013534:	xor    eax,eax
 1013536:	ret    
 1013537:	int3   
 1013538:	int3   
 1013539:	int3   
 101353a:	int3   
 101353b:	int3   
 101353c:	int3   
 101353d:	int3   
 101353e:	int3   
 101353f:	int3   
 1013540:	mov    DWORD PTR [rcx+0x88],edx
 1013546:	mov    DWORD PTR [rcx+0x8c],r8d
 101354d:	xor    eax,eax
 101354f:	ret    
 1013550:	int3   
 1013551:	int3   
 1013552:	int3   
 1013553:	int3   
 1013554:	int3   
 1013555:	int3   
 1013556:	int3   
 1013557:	int3   
 1013558:	int3   
 1013559:	int3   
 101355a:	int3   
 101355b:	int3   
 101355c:	int3   
 101355d:	int3   
 101355e:	int3   
 101355f:	int3   
 1013560:	mov    QWORD PTR [rcx+0x60],rdx
 1013564:	xor    eax,eax
 1013566:	ret    
 1013567:	int3   
 1013568:	int3   
 1013569:	int3   
 101356a:	int3   
 101356b:	int3   
 101356c:	int3   
 101356d:	int3   
 101356e:	int3   
 101356f:	int3   
 1013570:	mov    QWORD PTR [rcx+0x68],rdx
 1013574:	xor    eax,eax
 1013576:	ret    
 1013577:	int3   
 1013578:	int3   
 1013579:	int3   
 101357a:	int3   
 101357b:	int3   
 101357c:	int3   
 101357d:	int3   
 101357e:	int3   
 101357f:	int3   
 1013580:	mov    QWORD PTR [rcx+0x13c8],rdx
 1013587:	xor    eax,eax
 1013589:	ret    
 101358a:	int3   
 101358b:	int3   
 101358c:	int3   
 101358d:	int3   
 101358e:	int3   
 101358f:	int3   
 1013590:	cmp    DWORD PTR [rcx+0x13c0],0x0
 1013597:	je     0x10135b6
 1013599:	cmp    DWORD PTR [rcx+0x13bc],0x0
 10135a0:	jne    0x10135b6
 10135a2:	cmp    DWORD PTR [rcx+0x13b8],0x0
 10135a9:	je     0x10135b6
 10135ab:	mov    eax,DWORD PTR [rcx+0x13b4]
 10135b1:	mov    DWORD PTR [rdx],eax
 10135b3:	xor    eax,eax
 10135b5:	ret    
 10135b6:	mov    eax,0x80004005
 10135bb:	ret    
 10135bc:	int3   
 10135bd:	int3   
 10135be:	int3   
 10135bf:	int3   
 10135c0:	int3   
 10135c1:	int3   
 10135c2:	int3   
 10135c3:	int3   
 10135c4:	int3   
 10135c5:	int3   
 10135c6:	int3   
 10135c7:	int3   
 10135c8:	int3   
 10135c9:	int3   
 10135ca:	int3   
 10135cb:	int3   
 10135cc:	int3   
 10135cd:	int3   
 10135ce:	int3   
 10135cf:	int3   
 10135d0:	rex push rbx
 10135d2:	sub    rsp,0x20
 10135d6:	xor    r9d,r9d
 10135d9:	lea    rbx,[rip+0xfffffffffffeca20]        # 0x1000000
 10135e0:	mov    r10,r8
 10135e3:	mov    QWORD PTR [r8],r9
 10135e6:	mov    r11,QWORD PTR [rbx+0x35c0]
 10135ed:	cmp    r11,QWORD PTR [rdx]
 10135f0:	jne    0x1013604
 10135f2:	mov    r11,QWORD PTR [rbx+0x35c8]
 10135f9:	cmp    r11,QWORD PTR [rdx+0x8]
 10135fd:	jne    0x1013604
 10135ff:	mov    eax,r9d
 1013602:	jmp    0x1013609
 1013604:	sbb    eax,eax
 1013606:	sbb    eax,0xffffffff
 1013609:	test   eax,eax
 101360b:	jne    0x101361e
 101360d:	mov    QWORD PTR [r8],rcx
 1013610:	mov    rax,QWORD PTR [rcx]
 1013613:	call   QWORD PTR [rax+0x8]
 1013616:	xor    eax,eax
 1013618:	add    rsp,0x20
 101361c:	pop    rbx
 101361d:	ret    
 101361e:	mov    r8,QWORD PTR [rbx+0x4408]
 1013625:	cmp    r8,QWORD PTR [rdx]
 1013628:	jne    0x1013637
 101362a:	mov    r8,QWORD PTR [rbx+0x4410]
 1013631:	cmp    r8,QWORD PTR [rdx+0x8]
 1013635:	je     0x101363f
 1013637:	sbb    eax,eax
 1013639:	sbb    eax,0xffffffff
 101363c:	mov    r9d,eax
 101363f:	test   r9d,r9d
 1013642:	jne    0x1013655
 1013644:	mov    QWORD PTR [r10],rcx
 1013647:	mov    rax,QWORD PTR [rcx]
 101364a:	call   QWORD PTR [rax+0x8]
 101364d:	xor    eax,eax
 101364f:	add    rsp,0x20
 1013653:	pop    rbx
 1013654:	ret    
 1013655:	mov    eax,0x80004002
 101365a:	add    rsp,0x20
 101365e:	pop    rbx
 101365f:	ret    
 1013660:	int3   
 1013661:	int3   
 1013662:	int3   
 1013663:	int3   
 1013664:	int3   
 1013665:	int3   
 1013666:	int3   
 1013667:	int3   
 1013668:	int3   
 1013669:	int3   
 101366a:	int3   
 101366b:	int3   
 101366c:	int3   
 101366d:	int3   
 101366e:	int3   
 101366f:	int3   
 1013670:	mov    eax,0x1
 1013675:	lock xadd DWORD PTR [rcx+0x8],eax
 101367a:	add    eax,0x1
 101367d:	ret    
 101367e:	int3   
 101367f:	int3   
 1013680:	int3   
 1013681:	int3   
 1013682:	int3   
 1013683:	int3   
 1013684:	int3   
 1013685:	int3   
 1013686:	int3   
 1013687:	int3   
 1013688:	int3   
 1013689:	int3   
 101368a:	int3   
 101368b:	int3   
 101368c:	int3   
 101368d:	int3   
 101368e:	int3   
 101368f:	int3   
 1013690:	rex push rbx
 1013692:	sub    rsp,0x20
 1013696:	or     ebx,0xffffffff
 1013699:	lock xadd DWORD PTR [rcx+0x8],ebx
 101369e:	add    ebx,0xffffffff
 10136a1:	jne    0x10136af
 10136a3:	mov    rdx,rcx
 10136a6:	mov    rcx,QWORD PTR [rcx+0x10]
 10136aa:	call   0x1011ea0
 10136af:	mov    eax,ebx
 10136b1:	add    rsp,0x20
 10136b5:	pop    rbx
 10136b6:	ret    
 10136b7:	int3   
 10136b8:	int3   
 10136b9:	int3   
 10136ba:	int3   
 10136bb:	int3   
 10136bc:	int3   
 10136bd:	int3   
 10136be:	int3   
 10136bf:	int3   
 10136c0:	mov    QWORD PTR [rsp+0x8],rbx
 10136c5:	mov    QWORD PTR [rsp+0x10],rbp
 10136ca:	mov    QWORD PTR [rsp+0x18],rsi
 10136cf:	push   rdi
 10136d0:	sub    rsp,0x20
 10136d4:	mov    ebx,DWORD PTR [rcx+0x228]
 10136da:	mov    edx,0x220
 10136df:	mov    rbp,rcx
 10136e2:	call   0x1012c80
 10136e7:	xor    esi,esi
 10136e9:	test   ebx,ebx
 10136eb:	lea    edi,[rbx+rax*1]
 10136ee:	je     0x1013717
 10136f0:	mov    ecx,esi
 10136f2:	mov    edx,0xb3c
 10136f7:	imul   rcx,rcx,0xb3c
 10136fe:	add    rcx,QWORD PTR [rbp+0x220]
 1013705:	call   0x1012c80
 101370a:	add    esi,0x1
 101370d:	add    edi,eax
 101370f:	cmp    esi,DWORD PTR [rbp+0x228]
 1013715:	jb     0x10136f0
 1013717:	mov    rbx,QWORD PTR [rsp+0x30]
 101371c:	mov    rbp,QWORD PTR [rsp+0x38]
 1013721:	mov    rsi,QWORD PTR [rsp+0x40]
 1013726:	mov    eax,edi
 1013728:	add    rsp,0x20
 101372c:	pop    rdi
 101372d:	ret    
 101372e:	int3   
 101372f:	int3   
 1013730:	int3   
 1013731:	int3   
 1013732:	int3   
 1013733:	int3   
 1013734:	int3   
 1013735:	int3   
 1013736:	int3   
 1013737:	int3   
 1013738:	int3   
 1013739:	int3   
 101373a:	int3   
 101373b:	int3   
 101373c:	int3   
 101373d:	int3   
 101373e:	int3   
 101373f:	int3   
 1013740:	mov    QWORD PTR [rsp+0x8],rbx
 1013745:	push   rdi
 1013746:	sub    rsp,0x20
 101374a:	mov    rbx,rcx
 101374d:	mov    rcx,QWORD PTR [rcx+0x10]
 1013751:	mov    rdi,rdx
 1013754:	test   rcx,rcx
 1013757:	je     0x1013767
 1013759:	mov    rax,QWORD PTR [rcx]
 101375c:	call   QWORD PTR [rax+0x10]
 101375f:	mov    QWORD PTR [rbx+0x10],0x0
 1013767:	mov    QWORD PTR [rbx+0x10],rdi
 101376b:	mov    rax,QWORD PTR [rdi]
 101376e:	mov    rcx,rdi
 1013771:	call   QWORD PTR [rax+0x8]
 1013774:	mov    rcx,QWORD PTR [rbx+0x10]
 1013778:	call   0x1011b20
 101377d:	mov    rcx,QWORD PTR [rbx+0x10]
 1013781:	mov    QWORD PTR [rbx+0x1370],rax
 1013788:	call   0x1011b20
 101378d:	mov    QWORD PTR [rbx+0x1398],rax
 1013794:	mov    rbx,QWORD PTR [rsp+0x30]
 1013799:	add    rsp,0x20
 101379d:	pop    rdi
 101379e:	ret    
 101379f:	int3   
 10137a0:	int3   
 10137a1:	int3   
 10137a2:	int3   
 10137a3:	int3   
 10137a4:	int3   
 10137a5:	int3   
 10137a6:	int3   
 10137a7:	int3   
 10137a8:	int3   
 10137a9:	int3   
 10137aa:	int3   
 10137ab:	int3   
 10137ac:	int3   
 10137ad:	int3   
 10137ae:	int3   
 10137af:	int3   
 10137b0:	test   rdx,rdx
 10137b3:	jne    0x10137bb
 10137b5:	mov    eax,0x80070057
 10137ba:	ret    
 10137bb:	mov    eax,DWORD PTR [rcx+0xa4]
 10137c1:	test   eax,eax
 10137c3:	je     0x10137cf
 10137c5:	bt     DWORD PTR [rcx+0xa8],0x15
 10137cd:	jae    0x10137d2
 10137cf:	mov    eax,DWORD PTR [rcx+0x74]
 10137d2:	mov    DWORD PTR [rdx],eax
 10137d4:	xor    eax,eax
 10137d6:	ret    
 10137d7:	int3   
 10137d8:	int3   
 10137d9:	int3   
 10137da:	int3   
 10137db:	int3   
 10137dc:	int3   
 10137dd:	int3   
 10137de:	int3   
 10137df:	int3   
 10137e0:	mov    QWORD PTR [rsp+0x18],rbx
 10137e5:	mov    QWORD PTR [rsp+0x20],rsi
 10137ea:	mov    QWORD PTR [rsp+0x8],rcx
 10137ef:	push   rdi
 10137f0:	push   r12
 10137f2:	push   r13
 10137f4:	sub    rsp,0x20
 10137f8:	mov    rsi,rcx
 10137fb:	xor    r12d,r12d
 10137fe:	mov    ebx,r12d
 1013801:	mov    r13d,r12d
 1013804:	mov    rax,QWORD PTR [rcx+0x18]
 1013808:	mov    rdx,QWORD PTR [rax]
 101380b:	xchg   ax,ax
 101380d:	data16 xchg ax,ax
 1013810:	test   rdx,rdx
 1013813:	je     0x1013826
 1013815:	mov    rdi,QWORD PTR [rdx]
 1013818:	mov    rcx,QWORD PTR [rsi+0x10]
 101381c:	call   0x1012b50
 1013821:	mov    rdx,rdi
 1013824:	jmp    0x1013810
 1013826:	jmp    0x101384f
 1013828:	mov    r13d,eax
 101382b:	cmp    eax,0xc00000fd
 1013830:	jne    0x1013838
 1013832:	call   QWORD PTR [rip+0xfffffffffffedd70]        # 0x10015a8
 1013838:	mov    ecx,0x80004005
 101383d:	test   r13d,r13d
 1013840:	cmovns r13d,ecx
 1013844:	xor    r12d,r12d
 1013847:	mov    rsi,QWORD PTR [rsp+0x40]
 101384c:	mov    ebx,r12d
 101384f:	test   ebx,ebx
 1013851:	cmovns ebx,r13d
 1013855:	mov    DWORD PTR [rsp+0x48],ebx
 1013859:	mov    rax,QWORD PTR [rsi+0x18]
 101385d:	mov    QWORD PTR [rax],r12
 1013860:	mov    rax,QWORD PTR [rsi+0x18]
 1013864:	mov    QWORD PTR [rsi+0x20],rax
 1013868:	jmp    0x101388a
 101386a:	mov    ebx,eax
 101386c:	cmp    eax,0xc00000fd
 1013871:	jne    0x1013879
 1013873:	call   QWORD PTR [rip+0xfffffffffffedd2f]        # 0x10015a8
 1013879:	mov    ecx,0x80004005
 101387e:	test   ebx,ebx
 1013880:	cmovns ebx,ecx
 1013883:	mov    r12d,ebx
 1013886:	mov    ebx,DWORD PTR [rsp+0x48]
 101388a:	test   ebx,ebx
 101388c:	cmovns ebx,r12d
 1013890:	mov    eax,ebx
 1013892:	mov    rbx,QWORD PTR [rsp+0x50]
 1013897:	mov    rsi,QWORD PTR [rsp+0x58]
 101389c:	add    rsp,0x20
 10138a0:	pop    r13
 10138a2:	pop    r12
 10138a4:	pop    rdi
 10138a5:	ret    
 10138a6:	int3   
 10138a7:	int3   
 10138a8:	int3   
 10138a9:	int3   
 10138aa:	int3   
 10138ab:	int3   
 10138ac:	int3   
 10138ad:	int3   
 10138ae:	int3   
 10138af:	int3   
 10138b0:	mov    QWORD PTR [rsp+0x8],rbx
 10138b5:	mov    QWORD PTR [rsp+0x10],rdi
 10138ba:	xor    r10d,r10d
 10138bd:	test   rdx,rdx
 10138c0:	mov    rbx,r8
 10138c3:	mov    r11,rdx
 10138c6:	mov    rdi,rcx
 10138c9:	mov    r9d,r10d
 10138cc:	je     0x10138d7
 10138ce:	cmp    rdx,0x7fffffff
 10138d5:	jbe    0x10138dd
 10138d7:	mov    r9d,0x80070057
 10138dd:	test   r9d,r9d
 10138e0:	js     0x1013906
 10138e2:	test   rdx,rdx
 10138e5:	mov    rcx,rdx
 10138e8:	mov    rax,rdi
 10138eb:	mov    r9d,r10d
 10138ee:	je     0x1013900
 10138f0:	cmp    WORD PTR [rax],r9w
 10138f4:	je     0x1013949
 10138f6:	add    rax,0x2
 10138fa:	sub    rcx,0x1
 10138fe:	jne    0x10138f0
 1013900:	mov    r9d,0x80070057
 1013906:	mov    r8,r10
 1013909:	test   r9d,r9d
 101390c:	js     0x1013978
 101390e:	sub    rdx,r8
 1013911:	lea    rcx,[rdi+r8*2]
 1013915:	je     0x101395b
 1013917:	mov    rax,rdx
 101391a:	sub    rax,r11
 101391d:	sub    rbx,rcx
 1013920:	lea    r8,[rax+r8*1+0x7fffffff]
 1013928:	test   r8,r8
 101392b:	je     0x1013956
 101392d:	movzx  eax,WORD PTR [rbx+rcx*1]
 1013931:	test   ax,ax
 1013934:	je     0x1013956
 1013936:	mov    WORD PTR [rcx],ax
 1013939:	add    rcx,0x2
 101393d:	sub    r8,0x1
 1013941:	sub    rdx,0x1
 1013945:	jne    0x1013928
 1013947:	jmp    0x101395b
 1013949:	test   rcx,rcx
 101394c:	je     0x1013900
 101394e:	mov    r8,rdx
 1013951:	sub    r8,rcx
 1013954:	jmp    0x1013909
 1013956:	test   rdx,rdx
 1013959:	jne    0x1013965
 101395b:	sub    rcx,0x2
 101395f:	mov    r10d,0x8007007a
 1013965:	mov    WORD PTR [rcx],0x0
 101396a:	mov    eax,r10d
 101396d:	mov    rbx,QWORD PTR [rsp+0x8]
 1013972:	mov    rdi,QWORD PTR [rsp+0x10]
 1013977:	ret    
 1013978:	mov    rbx,QWORD PTR [rsp+0x8]
 101397d:	mov    rdi,QWORD PTR [rsp+0x10]
 1013982:	mov    eax,r9d
 1013985:	ret    
 1013986:	int3   
 1013987:	int3   
 1013988:	int3   
 1013989:	int3   
 101398a:	int3   
 101398b:	int3   
 101398c:	int3   
 101398d:	int3   
 101398e:	int3   
 101398f:	int3   
 1013990:	rex push rbx
 1013992:	sub    rsp,0x20
 1013996:	mov    rbx,rcx
 1013999:	add    rcx,0x1360
 10139a0:	call   0x10137e0
 10139a5:	test   eax,eax
 10139a7:	jne    0x10139b5
 10139a9:	lea    rcx,[rbx+0x1388]
 10139b0:	call   0x10137e0
 10139b5:	add    rsp,0x20
 10139b9:	pop    rbx
 10139ba:	ret    
 10139bb:	int3   
 10139bc:	int3   
 10139bd:	int3   
 10139be:	int3   
 10139bf:	int3   
 10139c0:	int3   
 10139c1:	int3   
 10139c2:	int3   
 10139c3:	int3   
 10139c4:	int3   
 10139c5:	int3   
 10139c6:	int3   
 10139c7:	int3   
 10139c8:	int3   
 10139c9:	int3   
 10139ca:	int3   
 10139cb:	int3   
 10139cc:	int3   
 10139cd:	int3   
 10139ce:	int3   
 10139cf:	int3   
 10139d0:	mov    QWORD PTR [rsp+0x8],rbx
 10139d5:	mov    DWORD PTR [rcx+0x22c],edx
 10139db:	lea    rdx,[rcx+0x14]
 10139df:	mov    rbx,r9
 10139e2:	xor    r11d,r11d
 10139e5:	mov    r9,rcx
 10139e8:	mov    r10d,0x105
 10139ee:	sub    r8,rdx
 10139f1:	lea    rax,[r10+0x7ffffef9]
 10139f8:	test   rax,rax
 10139fb:	je     0x1013a16
 10139fd:	movzx  eax,WORD PTR [r8+rdx*1]
 1013a02:	test   ax,ax
 1013a05:	je     0x1013a16
 1013a07:	mov    WORD PTR [rdx],ax
 1013a0a:	add    rdx,0x2
 1013a0e:	sub    r10,0x1
 1013a12:	jne    0x10139f1
 1013a14:	jmp    0x1013a1b
 1013a16:	test   r10,r10
 1013a19:	jne    0x1013a25
 1013a1b:	sub    rdx,0x2
 1013a1f:	mov    r11d,0x8007007a
 1013a25:	test   r11d,r11d
 1013a28:	mov    WORD PTR [rdx],0x0
 1013a2d:	mov    eax,r11d
 1013a30:	jne    0x1013a58
 1013a32:	mov    ecx,DWORD PTR [rbx]
 1013a34:	mov    DWORD PTR [r9],ecx
 1013a37:	mov    ecx,DWORD PTR [rbx+0x4]
 1013a3a:	mov    DWORD PTR [r9+0x4],ecx
 1013a3e:	mov    ecx,DWORD PTR [rbx+0x8]
 1013a41:	mov    DWORD PTR [r9+0x8],ecx
 1013a45:	mov    ecx,DWORD PTR [rbx+0xc]
 1013a48:	mov    DWORD PTR [r9+0xc],ecx
 1013a4c:	mov    rcx,QWORD PTR [rsp+0x28]
 1013a51:	mov    QWORD PTR [r9+0x220],rcx
 1013a58:	mov    rbx,QWORD PTR [rsp+0x8]
 1013a5d:	ret    
 1013a5e:	int3   
 1013a5f:	int3   
 1013a60:	int3   
 1013a61:	int3   
 1013a62:	int3   
 1013a63:	int3   
 1013a64:	int3   
 1013a65:	int3   
 1013a66:	int3   
 1013a67:	int3   
 1013a68:	int3   
 1013a69:	int3   
 1013a6a:	int3   
 1013a6b:	int3   
 1013a6c:	int3   
 1013a6d:	int3   
 1013a6e:	int3   
 1013a6f:	int3   
 1013a70:	rex push rsi
 1013a72:	mov    eax,DWORD PTR [rcx+0x228]
 1013a78:	movzx  esi,r9w
 1013a7c:	mov    r11,r8
 1013a7f:	cmp    eax,DWORD PTR [rcx+0x22c]
 1013a85:	mov    r10,rdx
 1013a88:	jne    0x1013a91
 1013a8a:	mov    eax,0x80004005
 1013a8f:	pop    rsi
 1013a90:	ret    
 1013a91:	mov    QWORD PTR [rsp+0x10],rbx
 1013a96:	mov    QWORD PTR [rsp+0x18],rdi
 1013a9b:	mov    rdi,rax
 1013a9e:	add    eax,0x1
 1013aa1:	xor    ebx,ebx
 1013aa3:	mov    edx,0x105
 1013aa8:	imul   rdi,rdi,0xb3c
 1013aaf:	add    rdi,QWORD PTR [rcx+0x220]
 1013ab6:	mov    DWORD PTR [rcx+0x228],eax
 1013abc:	mov    r8,rdx
 1013abf:	lea    rcx,[rdi+0x6]
 1013ac3:	mov    r9d,ebx
 1013ac6:	sub    r10,rcx
 1013ac9:	data16 xchg ax,ax
 1013acc:	data16 data16 xchg ax,ax
 1013ad0:	lea    rax,[r8+0x7ffffef9]
 1013ad7:	test   rax,rax
 1013ada:	je     0x1013af5
 1013adc:	movzx  eax,WORD PTR [r10+rcx*1]
 1013ae1:	test   ax,ax
 1013ae4:	je     0x1013af5
 1013ae6:	mov    WORD PTR [rcx],ax
 1013ae9:	add    rcx,0x2
 1013aed:	sub    r8,0x1
 1013af1:	jne    0x1013ad0
 1013af3:	jmp    0x1013afa
 1013af5:	test   r8,r8
 1013af8:	jne    0x1013b04
 1013afa:	sub    rcx,0x2
 1013afe:	mov    r9d,0x8007007a
 1013b04:	mov    WORD PTR [rcx],bx
 1013b07:	lea    rcx,[rdi+0x316]
 1013b0e:	sub    r11,rcx
 1013b11:	lea    rax,[rdx+0x7ffffef9]
 1013b18:	test   rax,rax
 1013b1b:	je     0x1013b36
 1013b1d:	movzx  eax,WORD PTR [r11+rcx*1]
 1013b22:	test   ax,ax
 1013b25:	je     0x1013b36
 1013b27:	mov    WORD PTR [rcx],ax
 1013b2a:	add    rcx,0x2
 1013b2e:	sub    rdx,0x1
 1013b32:	jne    0x1013b11
 1013b34:	jmp    0x1013b3b
 1013b36:	test   rdx,rdx
 1013b39:	jne    0x1013b44
 1013b3b:	sub    rcx,0x2
 1013b3f:	mov    ebx,0x8007007a
 1013b44:	test   r9d,r9d
 1013b47:	mov    WORD PTR [rcx],0x0
 1013b4c:	mov    WORD PTR [rdi+0x4],si
 1013b50:	mov    rdi,QWORD PTR [rsp+0x18]
 1013b55:	cmovns r9d,ebx
 1013b59:	mov    rbx,QWORD PTR [rsp+0x10]
 1013b5e:	mov    eax,r9d
 1013b61:	pop    rsi
 1013b62:	ret    
 1013b63:	int3   
 1013b64:	int3   
 1013b65:	int3   
 1013b66:	int3   
 1013b67:	int3   
 1013b68:	int3   
 1013b69:	int3   
 1013b6a:	int3   
 1013b6b:	int3   
 1013b6c:	int3   
 1013b6d:	int3   
 1013b6e:	int3   
 1013b6f:	int3   
 1013b70:	mov    QWORD PTR [rsp+0x8],rbx
 1013b75:	mov    QWORD PTR [rsp+0x10],rsi
 1013b7a:	mov    QWORD PTR [rsp+0x18],rdi
 1013b7f:	mov    QWORD PTR [rsp+0x20],r12
 1013b84:	push   r13
 1013b86:	sub    rsp,0x40
 1013b8a:	mov    r12,r9
 1013b8d:	mov    r13,r8
 1013b90:	mov    edi,edx
 1013b92:	mov    rsi,rcx
 1013b95:	xor    ebx,ebx
 1013b97:	mov    DWORD PTR [rsp+0x30],ebx
 1013b9b:	mov    rcx,QWORD PTR [rcx+0x10]
 1013b9f:	call   0x1011b20
 1013ba4:	mov    rcx,rax
 1013ba7:	mov    eax,0xb3c
 1013bac:	mul    rdi
 1013baf:	mov    rdx,0xffffffffffffffff
 1013bb6:	cmovo  rax,rdx
 1013bba:	mov    rdx,rax
 1013bbd:	call   0x1012af0
 1013bc2:	test   rax,rax
 1013bc5:	jne    0x1013bd2
 1013bc7:	mov    eax,0x8007000e
 1013bcc:	mov    DWORD PTR [rsp+0x30],eax
 1013bd0:	jmp    0x1013bef
 1013bd2:	lea    rcx,[rsi+0x1120]
 1013bd9:	mov    QWORD PTR [rsp+0x20],rax
 1013bde:	mov    r9,r12
 1013be1:	mov    r8,r13
 1013be4:	mov    edx,edi
 1013be6:	call   0x10139d0
 1013beb:	mov    DWORD PTR [rsp+0x30],eax
 1013bef:	jmp    0x1013c0e
 1013bf1:	mov    ebx,eax
 1013bf3:	cmp    eax,0xc00000fd
 1013bf8:	jne    0x1013c00
 1013bfa:	call   QWORD PTR [rip+0xfffffffffffed9a8]        # 0x10015a8
 1013c00:	mov    eax,0x80004005
 1013c05:	test   ebx,ebx
 1013c07:	cmovns ebx,eax
 1013c0a:	mov    eax,DWORD PTR [rsp+0x30]
 1013c0e:	test   eax,eax
 1013c10:	cmovns eax,ebx
 1013c13:	mov    rbx,QWORD PTR [rsp+0x50]
 1013c18:	mov    rsi,QWORD PTR [rsp+0x58]
 1013c1d:	mov    rdi,QWORD PTR [rsp+0x60]
 1013c22:	mov    r12,QWORD PTR [rsp+0x68]
 1013c27:	add    rsp,0x40
 1013c2b:	pop    r13
 1013c2d:	ret    
 1013c2e:	int3   
 1013c2f:	int3   
 1013c30:	int3   
 1013c31:	int3   
 1013c32:	int3   
 1013c33:	int3   
 1013c34:	int3   
 1013c35:	int3   
 1013c36:	int3   
 1013c37:	int3   
 1013c38:	int3   
 1013c39:	int3   
 1013c3a:	int3   
 1013c3b:	int3   
 1013c3c:	int3   
 1013c3d:	int3   
 1013c3e:	int3   
 1013c3f:	int3   
 1013c40:	mov    QWORD PTR [rsp+0x18],rbp
 1013c45:	mov    QWORD PTR [rsp+0x20],rsi
 1013c4a:	push   rdi
 1013c4b:	sub    rsp,0x20
 1013c4f:	cmp    DWORD PTR [rcx+0x13b8],0x0
 1013c56:	mov    rsi,r8
 1013c59:	mov    rbp,rdx
 1013c5c:	mov    rdi,rcx
 1013c5f:	jne    0x1013c73
 1013c61:	xor    eax,eax
 1013c63:	mov    rbp,QWORD PTR [rsp+0x40]
 1013c68:	mov    rsi,QWORD PTR [rsp+0x48]
 1013c6d:	add    rsp,0x20
 1013c71:	pop    rdi
 1013c72:	ret    
 1013c73:	mov    r9d,DWORD PTR [rcx+0x13b4]
 1013c7a:	lea    r8,[rip+0xffffffffffff096f]        # 0x10045f0
 1013c81:	mov    rdx,rsi
 1013c84:	mov    rcx,rbp
 1013c87:	call   0x1013110
 1013c8c:	test   eax,eax
 1013c8e:	mov    r11d,eax
 1013c91:	js     0x1013d41
 1013c97:	mov    eax,DWORD PTR [rdi+0x13b4]
 1013c9d:	cmp    eax,0x20000001
 1013ca2:	jne    0x1013cc5
 1013ca4:	lea    r8,[rip+0xffffffffffff08e5]        # 0x1004590
 1013cab:	mov    rdx,rsi
 1013cae:	mov    rcx,rbp
 1013cb1:	mov    rbp,QWORD PTR [rsp+0x40]
 1013cb6:	mov    rsi,QWORD PTR [rsp+0x48]
 1013cbb:	add    rsp,0x20
 1013cbf:	pop    rdi
 1013cc0:	jmp    0x10138b0
 1013cc5:	test   eax,eax
 1013cc7:	jne    0x1013cea
 1013cc9:	lea    r8,[rip+0xffffffffffff0830]        # 0x1004500
 1013cd0:	mov    rdx,rsi
 1013cd3:	mov    rcx,rbp
 1013cd6:	mov    rbp,QWORD PTR [rsp+0x40]
 1013cdb:	mov    rsi,QWORD PTR [rsp+0x48]
 1013ce0:	add    rsp,0x20
 1013ce4:	pop    rdi
 1013ce5:	jmp    0x10138b0
 1013cea:	mov    QWORD PTR [rsp+0x30],rbx
 1013cef:	mov    QWORD PTR [rsp+0x38],r12
 1013cf4:	lea    r12,[rip+0xffffffffffff0725]        # 0x1004420
 1013cfb:	xor    ebx,ebx
 1013cfd:	data16 xchg ax,ax
 1013d00:	mov    ecx,DWORD PTR [rbx+r12*1]
 1013d04:	mov    eax,ecx
 1013d06:	and    eax,DWORD PTR [rdi+0x13b4]
 1013d0c:	cmp    ecx,eax
 1013d0e:	jne    0x1013d27
 1013d10:	mov    r8,QWORD PTR [rbx+r12*1+0x8]
 1013d15:	mov    rdx,rsi
 1013d18:	mov    rcx,rbp
 1013d1b:	call   0x10138b0
 1013d20:	test   eax,eax
 1013d22:	mov    r11d,eax
 1013d25:	js     0x1013d37
 1013d27:	add    rbx,0x10
 1013d2b:	cmp    rbx,0xe0
 1013d32:	jb     0x1013d00
 1013d34:	mov    eax,r11d
 1013d37:	mov    rbx,QWORD PTR [rsp+0x30]
 1013d3c:	mov    r12,QWORD PTR [rsp+0x38]
 1013d41:	mov    rbp,QWORD PTR [rsp+0x40]
 1013d46:	mov    rsi,QWORD PTR [rsp+0x48]
 1013d4b:	add    rsp,0x20
 1013d4f:	pop    rdi
 1013d50:	ret    
 1013d51:	int3   
 1013d52:	int3   
 1013d53:	int3   
 1013d54:	int3   
 1013d55:	int3   
 1013d56:	int3   
 1013d57:	int3   
 1013d58:	int3   
 1013d59:	int3   
 1013d5a:	int3   
 1013d5b:	int3   
 1013d5c:	int3   
 1013d5d:	int3   
 1013d5e:	int3   
 1013d5f:	int3   
 1013d60:	mov    QWORD PTR [rsp+0x8],rbx
 1013d65:	push   rdi
 1013d66:	sub    rsp,0x30
 1013d6a:	xor    edi,edi
 1013d6c:	mov    rbx,QWORD PTR [rcx+0x18]
 1013d70:	mov    QWORD PTR [rsp+0x20],rbx
 1013d75:	test   rbx,rbx
 1013d78:	je     0x1013d9a
 1013d7a:	lea    rcx,[rbx+0xc]
 1013d7e:	mov    edx,DWORD PTR [rcx]
 1013d80:	shl    rdx,0x4
 1013d84:	add    rdx,0xc
 1013d88:	call   0x1012c80
 1013d8d:	mov    DWORD PTR [rbx+0x8],eax
 1013d90:	mov    rbx,QWORD PTR [rbx]
 1013d93:	mov    QWORD PTR [rsp+0x20],rbx
 1013d98:	jmp    0x1013d75
 1013d9a:	jmp    0x1013db5
 1013d9c:	mov    edi,eax
 1013d9e:	cmp    eax,0xc00000fd
 1013da3:	jne    0x1013dab
 1013da5:	call   QWORD PTR [rip+0xfffffffffffed7fd]        # 0x10015a8
 1013dab:	mov    eax,0x80004005
 1013db0:	test   edi,edi
 1013db2:	cmovns edi,eax
 1013db5:	mov    eax,edi
 1013db7:	mov    rbx,QWORD PTR [rsp+0x40]
 1013dbc:	add    rsp,0x30
 1013dc0:	pop    rdi
 1013dc1:	ret    
 1013dc2:	int3   
 1013dc3:	int3   
 1013dc4:	int3   
 1013dc5:	int3   
 1013dc6:	int3   
 1013dc7:	int3   
 1013dc8:	int3   
 1013dc9:	int3   
 1013dca:	int3   
 1013dcb:	int3   
 1013dcc:	int3   
 1013dcd:	int3   
 1013dce:	int3   
 1013dcf:	int3   
 1013dd0:	mov    QWORD PTR [rsp+0x8],rbx
 1013dd5:	push   rdi
 1013dd6:	sub    rsp,0x20
 1013dda:	xor    edi,edi
 1013ddc:	mov    DWORD PTR [rcx],0x2
 1013de2:	mov    rbx,rcx
 1013de5:	mov    DWORD PTR [rcx+0x4],edi
 1013de8:	mov    QWORD PTR [rcx+0x8],rdi
 1013dec:	mov    QWORD PTR [rcx+0x10],rdi
 1013df0:	mov    QWORD PTR [rcx+0x18],rdi
 1013df4:	mov    QWORD PTR [rcx+0x20],rdi
 1013df8:	mov    QWORD PTR [rcx+0x28],rdi
 1013dfc:	mov    QWORD PTR [rcx+0x30],rdi
 1013e00:	mov    QWORD PTR [rcx+0x38],rdi
 1013e04:	mov    QWORD PTR [rcx+0x40],rdi
 1013e08:	mov    QWORD PTR [rcx+0x48],rdi
 1013e0c:	mov    QWORD PTR [rcx+0x50],rdi
 1013e10:	mov    DWORD PTR [rcx+0x58],edi
 1013e13:	mov    DWORD PTR [rcx+0x5c],edi
 1013e16:	mov    DWORD PTR [rcx+0x60],edi
 1013e19:	mov    DWORD PTR [rcx+0x64],edi
 1013e1c:	mov    QWORD PTR [rcx+0x68],rdi
 1013e20:	mov    QWORD PTR [rcx+0x78],rdi
 1013e24:	mov    QWORD PTR [rcx+0x80],rdi
 1013e2b:	mov    DWORD PTR [rcx+0x88],edi
 1013e31:	mov    DWORD PTR [rcx+0x8c],edi
 1013e37:	mov    DWORD PTR [rcx+0x90],edi
 1013e3d:	mov    DWORD PTR [rcx+0x94],edi
 1013e43:	mov    DWORD PTR [rcx+0x98],edi
 1013e49:	mov    DWORD PTR [rcx+0x9c],edi
 1013e4f:	mov    DWORD PTR [rcx+0xa0],edi
 1013e55:	mov    DWORD PTR [rcx+0xa4],edi
 1013e5b:	mov    DWORD PTR [rcx+0xa8],edi
 1013e61:	mov    DWORD PTR [rcx+0xac],edi
 1013e67:	mov    DWORD PTR [rcx+0xb0],edi
 1013e6d:	mov    DWORD PTR [rcx+0xb4],edi
 1013e73:	mov    DWORD PTR [rcx+0xb8],edi
 1013e79:	mov    DWORD PTR [rcx+0xbc],edi
 1013e7f:	mov    DWORD PTR [rcx+0xc4],edi
 1013e85:	mov    DWORD PTR [rcx+0xc8],edi
 1013e8b:	mov    DWORD PTR [rcx+0xcc],edi
 1013e91:	mov    QWORD PTR [rcx+0xd0],rdi
 1013e98:	mov    DWORD PTR [rcx+0xd8],edi
 1013e9e:	mov    DWORD PTR [rcx+0xdc],edi
 1013ea4:	mov    DWORD PTR [rcx+0xe0],0x80
 1013eae:	mov    DWORD PTR [rcx+0xe4],edi
 1013eb4:	add    rcx,0xe8
 1013ebb:	xor    edx,edx
 1013ebd:	mov    r8d,0x800
 1013ec3:	call   0x100dcba
 1013ec8:	lea    rcx,[rbx+0x900]
 1013ecf:	xor    edx,edx
 1013ed1:	mov    r8d,0x800
 1013ed7:	mov    QWORD PTR [rbx+0x8e8],rdi
 1013ede:	mov    DWORD PTR [rbx+0x8f0],edi
 1013ee4:	mov    DWORD PTR [rbx+0x8f4],edi
 1013eea:	mov    DWORD PTR [rbx+0x8f8],0x80
 1013ef4:	mov    DWORD PTR [rbx+0x8fc],edi
 1013efa:	call   0x100dcba
 1013eff:	lea    rcx,[rbx+0x1108]
 1013f06:	xor    edx,edx
 1013f08:	mov    r8d,0x230
 1013f0e:	call   0x100dcba
 1013f13:	mov    DWORD PTR [rbx+0x70],edi
 1013f16:	mov    DWORD PTR [rbx+0x74],edi
 1013f19:	mov    rax,rbx
 1013f1c:	mov    rbx,QWORD PTR [rsp+0x30]
 1013f21:	add    rsp,0x20
 1013f25:	pop    rdi
 1013f26:	ret    
 1013f27:	int3   
 1013f28:	int3   
 1013f29:	int3   
 1013f2a:	int3   
 1013f2b:	int3   
 1013f2c:	int3   
 1013f2d:	int3   
 1013f2e:	int3   
 1013f2f:	int3   
 1013f30:	mov    QWORD PTR [rsp+0x8],rbx
 1013f35:	mov    QWORD PTR [rsp+0x10],rbp
 1013f3a:	mov    QWORD PTR [rsp+0x18],rsi
 1013f3f:	push   rdi
 1013f40:	sub    rsp,0x20
 1013f44:	lea    rax,[rip+0xffffffffffff0c45]        # 0x1004b90
 1013f4b:	mov    rdi,rcx
 1013f4e:	mov    DWORD PTR [rcx+0x8],0x1
 1013f55:	mov    QWORD PTR [rcx],rax
 1013f58:	xor    ebp,ebp
 1013f5a:	add    rcx,0x18
 1013f5e:	mov    QWORD PTR [rcx-0x8],rbp
 1013f62:	mov    ebx,r8d
 1013f65:	mov    rsi,rdx
 1013f68:	call   0x1013dd0
 1013f6d:	test   rsi,rsi
 1013f70:	mov    QWORD PTR [rdi+0x1360],0x200
 1013f7b:	mov    QWORD PTR [rdi+0x1368],rbp
 1013f82:	mov    QWORD PTR [rdi+0x1370],rbp
 1013f89:	lea    r11,[rdi+0xe8]
 1013f90:	mov    QWORD PTR [rdi+0x1378],r11
 1013f97:	mov    QWORD PTR [rdi+0x1380],r11
 1013f9e:	mov    QWORD PTR [rdi+0x1388],0x200
 1013fa9:	mov    QWORD PTR [rdi+0x1390],rbp
 1013fb0:	mov    QWORD PTR [rdi+0x1398],rbp
 1013fb7:	lea    rax,[rdi+0x900]
 1013fbe:	mov    QWORD PTR [rdi+0x13a0],rax
 1013fc5:	mov    QWORD PTR [rdi+0x13a8],rax
 1013fcc:	mov    DWORD PTR [rdi+0x13b0],ebx
 1013fd2:	mov    DWORD PTR [rdi+0x13b4],ebp
 1013fd8:	mov    DWORD PTR [rdi+0x13b8],ebp
 1013fde:	mov    DWORD PTR [rdi+0x13bc],ebp
 1013fe4:	mov    DWORD PTR [rdi+0x13c0],ebp
 1013fea:	mov    QWORD PTR [rdi+0x13c8],rbp
 1013ff1:	je     0x1014033
 1013ff3:	mov    rcx,QWORD PTR [rdi+0x10]
 1013ff7:	test   rcx,rcx
 1013ffa:	je     0x1014006
 1013ffc:	mov    rax,QWORD PTR [rcx]
 1013fff:	call   QWORD PTR [rax+0x10]
 1014002:	mov    QWORD PTR [rdi+0x10],rbp
 1014006:	mov    QWORD PTR [rdi+0x10],rsi
 101400a:	mov    rax,QWORD PTR [rsi]
 101400d:	mov    rcx,rsi
 1014010:	call   QWORD PTR [rax+0x8]
 1014013:	mov    rcx,QWORD PTR [rdi+0x10]
 1014017:	call   0x1011b20
 101401c:	mov    rcx,QWORD PTR [rdi+0x10]
 1014020:	mov    QWORD PTR [rdi+0x1370],rax
 1014027:	call   0x1011b20
 101402c:	mov    QWORD PTR [rdi+0x1398],rax
 1014033:	call   QWORD PTR [rip+0xfffffffffffed31f]        # 0x1001358
 1014039:	lea    rcx,[rdi+0x13d0]
 1014040:	xor    edx,edx
 1014042:	mov    r8d,0x208
 1014048:	mov    DWORD PTR [rdi+0x74],eax
 101404b:	call   0x100dcba
 1014050:	xor    edx,edx
 1014052:	lea    rcx,[rdi+0x15d8]
 1014059:	lea    r8d,[rdx+0x68]
 101405d:	call   0x100dcba
 1014062:	mov    rbx,QWORD PTR [rsp+0x30]
 1014067:	mov    rbp,QWORD PTR [rsp+0x38]
 101406c:	mov    rsi,QWORD PTR [rsp+0x40]
 1014071:	xor    eax,eax
 1014073:	mov    QWORD PTR [rdi+0x1640],rax
 101407a:	mov    QWORD PTR [rdi+0x1648],rax
 1014081:	mov    QWORD PTR [rdi+0x1650],rax
 1014088:	mov    rax,rdi
 101408b:	add    rsp,0x20
 101408f:	pop    rdi
 1014090:	ret    
 1014091:	int3   
 1014092:	int3   
 1014093:	int3   
 1014094:	int3   
 1014095:	int3   
 1014096:	int3   
 1014097:	int3   
 1014098:	int3   
 1014099:	int3   
 101409a:	int3   
 101409b:	int3   
 101409c:	int3   
 101409d:	int3   
 101409e:	int3   
 101409f:	int3   
 10140a0:	mov    QWORD PTR [rsp+0x10],rbx
 10140a5:	mov    QWORD PTR [rsp+0x18],rbp
 10140aa:	mov    QWORD PTR [rsp+0x20],rsi
 10140af:	push   rdi
 10140b0:	sub    rsp,0x20
 10140b4:	xor    ebx,ebx
 10140b6:	test   rdx,rdx
 10140b9:	mov    rsi,r8
 10140bc:	mov    rbp,rdx
 10140bf:	mov    rdi,rcx
 10140c2:	je     0x101417a
 10140c8:	test   r8,r8
 10140cb:	je     0x101417a
 10140d1:	mov    r9,QWORD PTR [rcx+0x1380]
 10140d8:	mov    QWORD PTR [rsp+0x30],r12
 10140dd:	mov    eax,DWORD PTR [r9+0x10]
 10140e1:	cmp    DWORD PTR [r9+0xc],eax
 10140e5:	jb     0x1014130
 10140e7:	mov    rcx,QWORD PTR [rcx+0x1370]
 10140ee:	test   rcx,rcx
 10140f1:	je     0x101416c
 10140f3:	mov    r12,QWORD PTR [rdi+0x1360]
 10140fa:	mov    rdx,r12
 10140fd:	shl    rdx,0x4
 1014101:	add    rdx,0x18
 1014105:	call   0x1012af0
 101410a:	test   rax,rax
 101410d:	mov    r11,rax
 1014110:	je     0x101416c
 1014112:	mov    QWORD PTR [rax],rbx
 1014115:	mov    DWORD PTR [rax+0x8],ebx
 1014118:	mov    DWORD PTR [rax+0xc],ebx
 101411b:	mov    DWORD PTR [rax+0x10],r12d
 101411f:	mov    rax,QWORD PTR [rdi+0x1380]
 1014126:	mov    QWORD PTR [rax],r11
 1014129:	mov    QWORD PTR [rdi+0x1380],r11
 1014130:	mov    rcx,QWORD PTR [rdi+0x1380]
 1014137:	mov    edx,DWORD PTR [rcx+0xc]
 101413a:	lea    eax,[rdx+0x1]
 101413d:	add    rdx,rdx
 1014140:	mov    DWORD PTR [rcx+0xc],eax
 1014143:	mov    rax,QWORD PTR [rdi+0x1380]
 101414a:	add    QWORD PTR [rdi+0x1368],0x1
 1014152:	lea    rcx,[rax+rdx*8+0x18]
 1014157:	test   rcx,rcx
 101415a:	je     0x101416c
 101415c:	mov    r12,QWORD PTR [rsp+0x30]
 1014161:	mov    QWORD PTR [rcx],rbp
 1014164:	mov    QWORD PTR [rcx+0x8],rsi
 1014168:	mov    eax,ebx
 101416a:	jmp    0x101417c
 101416c:	mov    r12,QWORD PTR [rsp+0x30]
 1014171:	mov    ebx,0x8007000e
 1014176:	mov    eax,ebx
 1014178:	jmp    0x101417c
 101417a:	xor    eax,eax
 101417c:	mov    rbx,QWORD PTR [rsp+0x38]
 1014181:	mov    rbp,QWORD PTR [rsp+0x40]
 1014186:	mov    rsi,QWORD PTR [rsp+0x48]
 101418b:	add    rsp,0x20
 101418f:	pop    rdi
 1014190:	ret    
 1014191:	int3   
 1014192:	int3   
 1014193:	int3   
 1014194:	int3   
 1014195:	int3   
 1014196:	int3   
 1014197:	int3   
 1014198:	int3   
 1014199:	int3   
 101419a:	int3   
 101419b:	int3   
 101419c:	int3   
 101419d:	int3   
 101419e:	int3   
 101419f:	int3   
 10141a0:	mov    QWORD PTR [rsp+0x10],rbx
 10141a5:	mov    QWORD PTR [rsp+0x18],rbp
 10141aa:	mov    QWORD PTR [rsp+0x20],rsi
 10141af:	push   rdi
 10141b0:	sub    rsp,0x20
 10141b4:	xor    ebx,ebx
 10141b6:	test   rdx,rdx
 10141b9:	mov    rsi,r8
 10141bc:	mov    rbp,rdx
 10141bf:	mov    rdi,rcx
 10141c2:	je     0x101427a
 10141c8:	test   r8,r8
 10141cb:	je     0x101427a
 10141d1:	mov    r9,QWORD PTR [rcx+0x13a8]
 10141d8:	mov    QWORD PTR [rsp+0x30],r12
 10141dd:	mov    eax,DWORD PTR [r9+0x10]
 10141e1:	cmp    DWORD PTR [r9+0xc],eax
 10141e5:	jb     0x1014230
 10141e7:	mov    rcx,QWORD PTR [rcx+0x1398]
 10141ee:	test   rcx,rcx
 10141f1:	je     0x101426c
 10141f3:	mov    r12,QWORD PTR [rdi+0x1388]
 10141fa:	mov    rdx,r12
 10141fd:	shl    rdx,0x4
 1014201:	add    rdx,0x18
 1014205:	call   0x1012af0
 101420a:	test   rax,rax
 101420d:	mov    r11,rax
 1014210:	je     0x101426c
 1014212:	mov    QWORD PTR [rax],rbx
 1014215:	mov    DWORD PTR [rax+0x8],ebx
 1014218:	mov    DWORD PTR [rax+0xc],ebx
 101421b:	mov    DWORD PTR [rax+0x10],r12d
 101421f:	mov    rax,QWORD PTR [rdi+0x13a8]
 1014226:	mov    QWORD PTR [rax],r11
 1014229:	mov    QWORD PTR [rdi+0x13a8],r11
 1014230:	mov    rcx,QWORD PTR [rdi+0x13a8]
 1014237:	mov    edx,DWORD PTR [rcx+0xc]
 101423a:	lea    eax,[rdx+0x1]
 101423d:	add    rdx,rdx
 1014240:	mov    DWORD PTR [rcx+0xc],eax
 1014243:	mov    rax,QWORD PTR [rdi+0x13a8]
 101424a:	add    QWORD PTR [rdi+0x1390],0x1
 1014252:	lea    rcx,[rax+rdx*8+0x18]
 1014257:	test   rcx,rcx
 101425a:	je     0x101426c
 101425c:	mov    r12,QWORD PTR [rsp+0x30]
 1014261:	mov    QWORD PTR [rcx],rbp
 1014264:	mov    QWORD PTR [rcx+0x8],rsi
 1014268:	mov    eax,ebx
 101426a:	jmp    0x101427c
 101426c:	mov    r12,QWORD PTR [rsp+0x30]
 1014271:	mov    ebx,0x8007000e
 1014276:	mov    eax,ebx
 1014278:	jmp    0x101427c
 101427a:	xor    eax,eax
 101427c:	mov    rbx,QWORD PTR [rsp+0x38]
 1014281:	mov    rbp,QWORD PTR [rsp+0x40]
 1014286:	mov    rsi,QWORD PTR [rsp+0x48]
 101428b:	add    rsp,0x20
 101428f:	pop    rdi
 1014290:	ret    
 1014291:	int3   
 1014292:	int3   
 1014293:	int3   
 1014294:	int3   
 1014295:	int3   
 1014296:	int3   
 1014297:	int3   
 1014298:	int3   
 1014299:	int3   
 101429a:	int3   
 101429b:	int3   
 101429c:	int3   
 101429d:	int3   
 101429e:	int3   
 101429f:	int3   
 10142a0:	rex push rbx
 10142a2:	sub    rsp,0x30
 10142a6:	xor    ebx,ebx
 10142a8:	mov    DWORD PTR [rsp+0x20],ebx
 10142ac:	add    rcx,0x1120
 10142b3:	call   0x1013a70
 10142b8:	mov    DWORD PTR [rsp+0x20],eax
 10142bc:	jmp    0x10142db
 10142be:	mov    ebx,eax
 10142c0:	cmp    eax,0xc00000fd
 10142c5:	jne    0x10142cd
 10142c7:	call   QWORD PTR [rip+0xfffffffffffed2db]        # 0x10015a8
 10142cd:	mov    eax,0x80004005
 10142d2:	test   ebx,ebx
 10142d4:	cmovns ebx,eax
 10142d7:	mov    eax,DWORD PTR [rsp+0x20]
 10142db:	test   eax,eax
 10142dd:	cmovns eax,ebx
 10142e0:	add    rsp,0x30
 10142e4:	pop    rbx
 10142e5:	ret    
 10142e6:	int3   
 10142e7:	int3   
 10142e8:	int3   
 10142e9:	int3   
 10142ea:	int3   
 10142eb:	int3   
 10142ec:	int3   
 10142ed:	int3   
 10142ee:	int3   
 10142ef:	int3   
 10142f0:	mov    QWORD PTR [rsp+0x8],rbx
 10142f5:	mov    QWORD PTR [rsp+0x10],rsi
 10142fa:	push   rdi
 10142fb:	sub    rsp,0x30
 10142ff:	mov    rsi,rcx
 1014302:	xor    edi,edi
 1014304:	mov    DWORD PTR [rsp+0x20],edi
 1014308:	add    rcx,0x18
 101430c:	mov    edx,0xa0
 1014311:	call   0x1012c80
 1014316:	mov    DWORD PTR [rsi+0xb8],eax
 101431c:	mov    rcx,QWORD PTR [rsi+0x38]
 1014320:	call   0x1012cd0
 1014325:	mov    DWORD PTR [rsi+0xc0],eax
 101432b:	mov    rcx,QWORD PTR [rsi+0x40]
 101432f:	call   0x1012cd0
 1014334:	mov    DWORD PTR [rsi+0xc4],eax
 101433a:	lea    rcx,[rsi+0x1360]
 1014341:	call   0x1013d60
 1014346:	mov    ebx,eax
 1014348:	mov    DWORD PTR [rsp+0x20],eax
 101434c:	test   eax,eax
 101434e:	jne    0x1014362
 1014350:	lea    rcx,[rsi+0x1388]
 1014357:	call   0x1013d60
 101435c:	mov    ebx,eax
 101435e:	mov    DWORD PTR [rsp+0x20],eax
 1014362:	mov    rcx,QWORD PTR [rsi+0x90]
 1014369:	call   0x1012cd0
 101436e:	mov    DWORD PTR [rsi+0xd4],eax
 1014374:	mov    rcx,QWORD PTR [rsi+0x98]
 101437b:	call   0x1012cd0
 1014380:	mov    DWORD PTR [rsi+0xd8],eax
 1014386:	mov    rcx,QWORD PTR [rsi+0x58]
 101438a:	call   0x1012cd0
 101438f:	mov    DWORD PTR [rsi+0xd0],eax
 1014395:	mov    rcx,QWORD PTR [rsi+0x20]
 1014399:	call   0x1012cd0
 101439e:	mov    DWORD PTR [rsi+0xbc],eax
 10143a4:	mov    rcx,QWORD PTR [rsi+0x48]
 10143a8:	call   0x1012cd0
 10143ad:	mov    DWORD PTR [rsi+0xc8],eax
 10143b3:	mov    rcx,QWORD PTR [rsi+0x50]
 10143b7:	call   0x1012cd0
 10143bc:	mov    DWORD PTR [rsi+0xcc],eax
 10143c2:	mov    rcx,QWORD PTR [rsi+0x60]
 10143c6:	call   0x1012cd0
 10143cb:	mov    DWORD PTR [rsi+0xdc],eax
 10143d1:	mov    rcx,QWORD PTR [rsi+0x68]
 10143d5:	call   0x1012cd0
 10143da:	mov    DWORD PTR [rsi+0xe0],eax
 10143e0:	lea    rcx,[rsi+0x1120]
 10143e7:	call   0x10136c0
 10143ec:	mov    DWORD PTR [rsi+0x1350],eax
 10143f2:	jmp    0x1014411
 10143f4:	mov    edi,eax
 10143f6:	cmp    eax,0xc00000fd
 10143fb:	jne    0x1014403
 10143fd:	call   QWORD PTR [rip+0xfffffffffffed1a5]        # 0x10015a8
 1014403:	mov    eax,0x80004005
 1014408:	test   edi,edi
 101440a:	cmovns edi,eax
 101440d:	mov    ebx,DWORD PTR [rsp+0x20]
 1014411:	test   ebx,ebx
 1014413:	cmovns ebx,edi
 1014416:	mov    eax,ebx
 1014418:	mov    rbx,QWORD PTR [rsp+0x40]
 101441d:	mov    rsi,QWORD PTR [rsp+0x48]
 1014422:	add    rsp,0x30
 1014426:	pop    rdi
 1014427:	ret    
 1014428:	int3   
 1014429:	int3   
 101442a:	int3   
 101442b:	int3   
 101442c:	int3   
 101442d:	int3   
 101442e:	int3   
 101442f:	int3   
 1014430:	mov    QWORD PTR [rsp+0x8],rcx
 1014435:	push   rbx
 1014436:	push   rsi
 1014437:	push   rdi
 1014438:	push   r12
 101443a:	push   r13
 101443c:	push   r14
 101443e:	push   r15
 1014440:	sub    rsp,0x60
 1014444:	mov    rsi,rcx
 1014447:	xor    r12d,r12d
 101444a:	mov    ebx,r12d
 101444d:	mov    DWORD PTR [rsp+0x50],ebx
 1014451:	call   QWORD PTR [rip+0xfffffffffffecc89]        # 0x10010e0
 1014457:	mov    rcx,rax
 101445a:	call   QWORD PTR [rip+0xfffffffffffecc88]        # 0x10010e8
 1014460:	mov    r15d,eax
 1014463:	mov    DWORD PTR [rsp+0xa8],eax
 101446a:	cmp    eax,0x7fffffff
 101446f:	je     0x1014485
 1014471:	call   QWORD PTR [rip+0xfffffffffffecc69]        # 0x10010e0
 1014477:	mov    rcx,rax
 101447a:	lea    edx,[r12+0x1]
 101447f:	call   QWORD PTR [rip+0xfffffffffffecc6b]        # 0x10010f0
 1014485:	mov    r13d,r12d
 1014488:	mov    edi,DWORD PTR [rsi+0xa4]
 101448e:	call   QWORD PTR [rip+0xfffffffffffecec4]        # 0x1001358
 1014494:	cmp    edi,eax
 1014496:	jne    0x10144a4
 1014498:	mov    rax,QWORD PTR [rsi+0x30]
 101449c:	cmp    DWORD PTR [rax],0xc00000fd
 10144a2:	je     0x10144c8
 10144a4:	mov    eax,DWORD PTR [rsi+0xa8]
 10144aa:	bt     eax,0xc
 10144ae:	jb     0x10144c8
 10144b0:	bt     eax,0xf
 10144b4:	jb     0x10144c8
 10144b6:	mov    rdx,rsi
 10144b9:	mov    rcx,QWORD PTR [rsi+0x10]
 10144bd:	call   0x1012180
 10144c2:	mov    ebx,eax
 10144c4:	mov    DWORD PTR [rsp+0x50],eax
 10144c8:	mov    rax,QWORD PTR [rsi]
 10144cb:	mov    r8d,0x1658
 10144d1:	mov    rdx,rsi
 10144d4:	mov    rcx,rsi
 10144d7:	call   QWORD PTR [rax+0x50]
 10144da:	test   ebx,ebx
 10144dc:	cmovns ebx,eax
 10144df:	mov    DWORD PTR [rsp+0x50],ebx
 10144e3:	mov    rdx,QWORD PTR [rsi+0x50]
 10144e7:	test   rdx,rdx
 10144ea:	je     0x1014513
 10144ec:	mov    r9,QWORD PTR [rsi]
 10144ef:	xor    eax,eax
 10144f1:	or     rcx,0xffffffffffffffff
 10144f5:	mov    rdi,rdx
 10144f8:	repnz scas ax,WORD PTR es:[rdi]
 10144fb:	not    rcx
 10144fe:	lea    r8,[rcx+rcx*1-0x2]
 1014503:	mov    rcx,rsi
 1014506:	call   QWORD PTR [r9+0x50]
 101450a:	test   ebx,ebx
 101450c:	cmovns ebx,eax
 101450f:	mov    DWORD PTR [rsp+0x50],ebx
 1014513:	mov    rdx,QWORD PTR [rsi+0x48]
 1014517:	test   rdx,rdx
 101451a:	je     0x1014543
 101451c:	mov    r9,QWORD PTR [rsi]
 101451f:	xor    eax,eax
 1014521:	or     rcx,0xffffffffffffffff
 1014525:	mov    rdi,rdx
 1014528:	repnz scas ax,WORD PTR es:[rdi]
 101452b:	not    rcx
 101452e:	lea    r8,[rcx+rcx*1-0x2]
 1014533:	mov    rcx,rsi
 1014536:	call   QWORD PTR [r9+0x50]
 101453a:	test   ebx,ebx
 101453c:	cmovns ebx,eax
 101453f:	mov    DWORD PTR [rsp+0x50],ebx
 1014543:	call   QWORD PTR [rip+0xfffffffffffeccc7]        # 0x1001210
 1014549:	mov    DWORD PTR [rsi+0x78],eax
 101454c:	mov    rcx,rsi
 101454f:	call   0x10142f0
 1014554:	test   ebx,ebx
 1014556:	cmovns ebx,eax
 1014559:	mov    DWORD PTR [rsp+0x50],ebx
 101455d:	lea    rdi,[rsi+0x18]
 1014561:	call   0x1005640
 1014566:	mov    r9,rax
 1014569:	mov    QWORD PTR [rsp+0x30],rdi
 101456e:	mov    eax,DWORD PTR [rsi+0x78]
 1014571:	mov    DWORD PTR [rsp+0x28],eax
 1014575:	lea    rax,[rip+0xfffffffffffefe6c]        # 0x10043e8
 101457c:	mov    QWORD PTR [rsp+0x20],rax
 1014581:	lea    r8,[rip+0xffffffffffff0700]        # 0x1004c88
 1014588:	mov    edx,0x104
 101458d:	lea    rcx,[rsi+0x13d0]
 1014594:	call   0x1011f90
 1014599:	test   eax,eax
 101459b:	js     0x101474a
 10145a1:	lea    rdi,[rsi+0x15d8]
 10145a8:	mov    rcx,rdi
 10145ab:	call   QWORD PTR [rip+0xfffffffffffecb47]        # 0x10010f8
 10145b1:	mov    QWORD PTR [rsi+0x15e0],r12
 10145b8:	mov    QWORD PTR [rsi+0x15f0],r12
 10145bf:	lea    r14,[rsi+0x1640]
 10145c6:	mov    rcx,QWORD PTR [rsi+0x10]
 10145ca:	call   0x1011ca0
 10145cf:	mov    rcx,rax
 10145d2:	mov    QWORD PTR [rsp+0x48],r14
 10145d7:	mov    QWORD PTR [rsp+0x40],rdi
 10145dc:	mov    QWORD PTR [rsp+0x38],r12
 10145e1:	mov    QWORD PTR [rsp+0x30],r12
 10145e6:	mov    DWORD PTR [rsp+0x28],0xc008010
 10145ee:	mov    DWORD PTR [rsp+0x20],r12d
 10145f3:	xor    r9d,r9d
 10145f6:	xor    r8d,r8d
 10145f9:	lea    rdx,[rsi+0x13d0]
 1014600:	call   QWORD PTR [rip+0xfffffffffffecafa]        # 0x1001100
 1014606:	test   eax,eax
 1014608:	je     0x101472d
 101460e:	mov    edi,r12d
 1014611:	mov    DWORD PTR [rsp+0x54],r12d
 1014616:	call   QWORD PTR [rip+0xfffffffffffecbfc]        # 0x1001218
 101461c:	mov    DWORD PTR [rsp+0xb0],eax
 1014623:	nop
 1014624:	data16 data16 xchg ax,ax
 1014628:	data16 data16 xchg ax,ax
 101462c:	data16 data16 xchg ax,ax
 1014630:	mov    edx,0x64
 1014635:	mov    rcx,QWORD PTR [r14]
 1014638:	call   QWORD PTR [rip+0xfffffffffffecc7a]        # 0x10012b8
 101463e:	mov    r14d,eax
 1014641:	cmp    eax,0x102
 1014646:	jne    0x101466f
 1014648:	cmp    DWORD PTR [rsi+0x13b0],0xffffffff
 101464f:	je     0x1014666
 1014651:	call   QWORD PTR [rip+0xfffffffffffecbc1]        # 0x1001218
 1014657:	sub    eax,DWORD PTR [rsp+0xb0]
 101465e:	cmp    eax,DWORD PTR [rsi+0x13b0]
 1014664:	jae    0x101466f
 1014666:	lea    r14,[rsi+0x1640]
 101466d:	jmp    0x1014630
 101466f:	mov    eax,r12d
 1014672:	cmp    r14d,0x102
 1014679:	sete   al
 101467c:	mov    DWORD PTR [rsi+0x13bc],eax
 1014682:	mov    DWORD PTR [rsi+0x13c0],0x1
 101468c:	lea    rdx,[rsi+0x13b4]
 1014693:	mov    rcx,QWORD PTR [rsi+0x1640]
 101469a:	call   QWORD PTR [rip+0xfffffffffffeca68]        # 0x1001108
 10146a0:	test   eax,eax
 10146a2:	je     0x10146c1
 10146a4:	cmp    DWORD PTR [rsi+0x13b4],0x103
 10146ae:	je     0x10146c1
 10146b0:	mov    DWORD PTR [rsi+0x13b8],0x1
 10146ba:	mov    DWORD PTR [rsi+0x13bc],r12d
 10146c1:	jmp    0x10146fa
 10146c3:	mov    edi,eax
 10146c5:	cmp    eax,0xc00000fd
 10146ca:	jne    0x10146d2
 10146cc:	call   QWORD PTR [rip+0xfffffffffffeced6]        # 0x10015a8
 10146d2:	mov    eax,0x80004005
 10146d7:	test   edi,edi
 10146d9:	cmovns edi,eax
 10146dc:	mov    DWORD PTR [rsp+0x54],edi
 10146e0:	xor    r12d,r12d
 10146e3:	mov    rsi,QWORD PTR [rsp+0xa0]
 10146eb:	mov    ebx,DWORD PTR [rsp+0x50]
 10146ef:	mov    r15d,DWORD PTR [rsp+0xa8]
 10146f7:	mov    r13d,r12d
 10146fa:	test   ebx,ebx
 10146fc:	cmovns ebx,edi
 10146ff:	mov    DWORD PTR [rsp+0x50],ebx
 1014703:	mov    rcx,QWORD PTR [rsi+0x1648]
 101470a:	call   QWORD PTR [rip+0xfffffffffffecc20]        # 0x1001330
 1014710:	mov    QWORD PTR [rsi+0x1648],r12
 1014717:	mov    rcx,QWORD PTR [rsi+0x1640]
 101471e:	call   QWORD PTR [rip+0xfffffffffffecc0c]        # 0x1001330
 1014724:	mov    QWORD PTR [rsi+0x1640],r12
 101472b:	jmp    0x1014753
 101472d:	call   QWORD PTR [rip+0xfffffffffffecc1d]        # 0x1001350
 1014733:	test   eax,eax
 1014735:	jle    0x101473f
 1014737:	movzx  eax,ax
 101473a:	or     eax,0x80070000
 101473f:	test   ebx,ebx
 1014741:	cmovns ebx,eax
 1014744:	mov    DWORD PTR [rsp+0x50],ebx
 1014748:	jmp    0x1014753
 101474a:	test   ebx,ebx
 101474c:	cmovns ebx,eax
 101474f:	mov    DWORD PTR [rsp+0x50],ebx
 1014753:	jmp    0x101477d
 1014755:	mov    r13d,eax
 1014758:	cmp    eax,0xc00000fd
 101475d:	jne    0x1014765
 101475f:	call   QWORD PTR [rip+0xfffffffffffece43]        # 0x10015a8
 1014765:	mov    eax,0x80004005
 101476a:	test   r13d,r13d
 101476d:	cmovns r13d,eax
 1014771:	mov    ebx,DWORD PTR [rsp+0x50]
 1014775:	mov    r15d,DWORD PTR [rsp+0xa8]
 101477d:	cmp    r15d,0x7fffffff
 1014784:	je     0x1014798
 1014786:	call   QWORD PTR [rip+0xfffffffffffec954]        # 0x10010e0
 101478c:	mov    rcx,rax
 101478f:	mov    edx,r15d
 1014792:	call   QWORD PTR [rip+0xfffffffffffec958]        # 0x10010f0
 1014798:	test   ebx,ebx
 101479a:	cmovns ebx,r13d
 101479e:	mov    eax,ebx
 10147a0:	add    rsp,0x60
 10147a4:	pop    r15
 10147a6:	pop    r14
 10147a8:	pop    r13
 10147aa:	pop    r12
 10147ac:	pop    rdi
 10147ad:	pop    rsi
 10147ae:	pop    rbx
 10147af:	ret    
 10147b0:	int3   
 10147b1:	int3   
 10147b2:	int3   
 10147b3:	int3   
 10147b4:	int3   
 10147b5:	int3   
 10147b6:	int3   
 10147b7:	int3   
 10147b8:	int3   
 10147b9:	int3   
 10147ba:	int3   
 10147bb:	int3   
 10147bc:	int3   
 10147bd:	int3   
 10147be:	int3   
 10147bf:	int3   
 10147c0:	mov    QWORD PTR [rsp+0x8],rbx
 10147c5:	mov    QWORD PTR [rsp+0x10],rsi
 10147ca:	mov    QWORD PTR [rsp+0x18],rdi
 10147cf:	push   r12
 10147d1:	sub    rsp,0x30
 10147d5:	mov    rsi,r8
 10147d8:	mov    r12,rdx
 10147db:	mov    rdi,rcx
 10147de:	xor    ebx,ebx
 10147e0:	mov    DWORD PTR [rsp+0x20],ebx
 10147e4:	lea    r8,[rip+0xfffffffffffed5ad]        # 0x1001d98
 10147eb:	mov    rdx,rsi
 10147ee:	mov    rcx,r12
 10147f1:	call   0x10050b0
 10147f6:	mov    DWORD PTR [rsp+0x20],eax
 10147fa:	test   eax,eax
 10147fc:	js     0x1014894
 1014802:	cmp    DWORD PTR [rdi+0x1650],0x0
 1014809:	jne    0x1014825
 101480b:	lea    r8,[rip+0xffffffffffff04fe]        # 0x1004d10
 1014812:	mov    rdx,rsi
 1014815:	mov    rcx,r12
 1014818:	call   0x10138b0
 101481d:	mov    DWORD PTR [rsp+0x20],eax
 1014821:	test   eax,eax
 1014823:	js     0x1014894
 1014825:	cmp    DWORD PTR [rdi+0x13c0],0x0
 101482c:	je     0x1014870
 101482e:	cmp    DWORD PTR [rdi+0x13bc],0x0
 1014835:	je     0x101485a
 1014837:	mov    r9d,DWORD PTR [rdi+0x1650]
 101483e:	lea    r8,[rip+0xffffffffffff046b]        # 0x1004cb0
 1014845:	mov    rdx,rsi
 1014848:	mov    rcx,r12
 101484b:	call   0x1013110
 1014850:	mov    DWORD PTR [rsp+0x20],eax
 1014854:	test   eax,eax
 1014856:	jns    0x1014870
 1014858:	jmp    0x1014894
 101485a:	mov    r8,rsi
 101485d:	mov    rdx,r12
 1014860:	mov    rcx,rdi
 1014863:	call   0x1013c40
 1014868:	mov    DWORD PTR [rsp+0x20],eax
 101486c:	test   eax,eax
 101486e:	js     0x1014894
 1014870:	jmp    0x101488f
 1014872:	mov    ebx,eax
 1014874:	cmp    eax,0xc00000fd
 1014879:	jne    0x1014881
 101487b:	call   QWORD PTR [rip+0xfffffffffffecd27]        # 0x10015a8
 1014881:	mov    eax,0x80004005
 1014886:	test   ebx,ebx
 1014888:	cmovns ebx,eax
 101488b:	mov    eax,DWORD PTR [rsp+0x20]
 101488f:	test   eax,eax
 1014891:	cmovns eax,ebx
 1014894:	mov    rbx,QWORD PTR [rsp+0x40]
 1014899:	mov    rsi,QWORD PTR [rsp+0x48]
 101489e:	mov    rdi,QWORD PTR [rsp+0x50]
 10148a3:	add    rsp,0x30
 10148a7:	pop    r12
 10148a9:	ret    
 10148aa:	int3   
 10148ab:	int3   
 10148ac:	int3   
 10148ad:	int3   
 10148ae:	int3   
 10148af:	int3   
 10148b0:	mov    QWORD PTR [rsp+0x8],rbx
 10148b5:	mov    QWORD PTR [rsp+0x10],rsi
 10148ba:	push   rdi
 10148bb:	sub    rsp,0x20
 10148bf:	cmp    QWORD PTR [rcx+0x1340],0x0
 10148c7:	lea    rax,[rip+0xffffffffffff02c2]        # 0x1004b90
 10148ce:	mov    edi,r8d
 10148d1:	mov    rsi,rdx
 10148d4:	mov    rbx,rcx
 10148d7:	mov    QWORD PTR [rcx],rax
 10148da:	je     0x10148f9
 10148dc:	mov    rcx,QWORD PTR [rcx+0x10]
 10148e0:	call   0x1011b20
 10148e5:	mov    rdx,QWORD PTR [rbx+0x1340]
 10148ec:	test   rdx,rdx
 10148ef:	je     0x10148f9
 10148f1:	mov    rcx,rax
 10148f4:	call   0x1012b50
 10148f9:	mov    rcx,QWORD PTR [rbx+0x10]
 10148fd:	test   rcx,rcx
 1014900:	je     0x1014910
 1014902:	mov    rax,QWORD PTR [rcx]
 1014905:	call   QWORD PTR [rax+0x10]
 1014908:	mov    QWORD PTR [rbx+0x10],0x0
 1014910:	lea    rcx,[rbx+0x1388]
 1014917:	call   0x10137e0
 101491c:	lea    rcx,[rbx+0x1360]
 1014923:	call   0x10137e0
 1014928:	xor    edx,edx
 101492a:	mov    r8d,0x1658
 1014930:	mov    rcx,rbx
 1014933:	call   0x100dcba
 1014938:	mov    r8d,edi
 101493b:	mov    rdx,rsi
 101493e:	mov    rcx,rbx
 1014941:	mov    rbx,QWORD PTR [rsp+0x30]
 1014946:	mov    rsi,QWORD PTR [rsp+0x38]
 101494b:	add    rsp,0x20
 101494f:	pop    rdi
 1014950:	jmp    0x1013f30
 1014955:	int3   
 1014956:	int3   
 1014957:	int3   
 1014958:	int3   
 1014959:	int3   
 101495a:	int3   
 101495b:	int3   
 101495c:	int3   
 101495d:	int3   
 101495e:	int3   
 101495f:	int3   
 1014960:	mov    QWORD PTR [rsp+0x8],rbx
 1014965:	mov    QWORD PTR [rsp+0x10],rbp
 101496a:	mov    QWORD PTR [rsp+0x18],rsi
 101496f:	push   rdi
 1014970:	sub    rsp,0xc0
 1014977:	mov    rdi,rdx
 101497a:	mov    rdx,QWORD PTR [rdx]
 101497d:	mov    rsi,rcx
 1014980:	mov    rbp,r8
 1014983:	lea    rcx,[rsp+0x20]
 1014988:	mov    r8d,0x98
 101498e:	call   0x100dd0e
 1014993:	mov    r11,QWORD PTR [rsi+0x13c8]
 101499a:	mov    rbx,QWORD PTR [rsi]
 101499d:	mov    QWORD PTR [rsp+0x30],r11
 10149a2:	call   QWORD PTR [rip+0xfffffffffffec9b0]        # 0x1001358
 10149a8:	mov    r9,QWORD PTR [rdi+0x8]
 10149ac:	lea    r8,[rsp+0x20]
 10149b1:	mov    edx,eax
 10149b3:	mov    rcx,rsi
 10149b6:	call   QWORD PTR [rbx+0x40]
 10149b9:	mov    rcx,rsi
 10149bc:	mov    DWORD PTR [rbp+0x0],eax
 10149bf:	call   0x1014430
 10149c4:	lea    r11,[rsp+0xc0]
 10149cc:	mov    rbx,QWORD PTR [r11+0x10]
 10149d0:	mov    rsi,QWORD PTR [r11+0x20]
 10149d4:	mov    DWORD PTR [rbp+0x0],eax
 10149d7:	mov    rbp,QWORD PTR [r11+0x18]
 10149db:	mov    eax,0x1
 10149e0:	mov    rsp,r11
 10149e3:	pop    rdi
 10149e4:	ret    
 10149e5:	int3   
 10149e6:	int3   
 10149e7:	int3   
 10149e8:	int3   
 10149e9:	int3   
 10149ea:	int3   
 10149eb:	int3   
 10149ec:	int3   
 10149ed:	int3   
 10149ee:	int3   
 10149ef:	int3   
 10149f0:	mov    QWORD PTR [rsp+0x8],rcx
 10149f5:	push   rbx
 10149f6:	sub    rsp,0x30
 10149fa:	mov    ebx,0x80004005
 10149ff:	mov    DWORD PTR [rsp+0x20],ebx
 1014a03:	mov    rax,QWORD PTR [rsp+0x38]
 1014a08:	cmp    QWORD PTR [rcx+0x30],0x0
 1014a0d:	je     0x1014a18
 1014a0f:	call   0x1014430
 1014a14:	mov    ebx,eax
 1014a16:	jmp    0x1014a42
 1014a18:	cmp    QWORD PTR [rcx+0x13c8],0x0
 1014a20:	jne    0x1014a29
 1014a22:	mov    QWORD PTR [rcx+0x13c8],rax
 1014a29:	xor    r9d,r9d
 1014a2c:	xor    r8d,r8d
 1014a2f:	xor    edx,edx
 1014a31:	mov    ecx,0x42ac
 1014a36:	call   QWORD PTR [rip+0xfffffffffffec944]        # 0x1001380
 1014a3c:	jmp    0x1014a42
 1014a3e:	mov    ebx,DWORD PTR [rsp+0x20]
 1014a42:	mov    eax,ebx
 1014a44:	add    rsp,0x30
 1014a48:	pop    rbx
 1014a49:	ret    
 1014a4a:	int3   
 1014a4b:	int3   
 1014a4c:	int3   
 1014a4d:	int3   
 1014a4e:	int3   
 1014a4f:	int3   
 1014a50:	rex push rbp
 1014a52:	sub    rsp,0x20
 1014a56:	mov    rbp,rdx
 1014a59:	mov    rdx,rcx
 1014a5c:	lea    r8,[rbp+0x20]
 1014a60:	mov    rcx,QWORD PTR [rbp+0x40]
 1014a64:	call   0x1014960
 1014a69:	add    rsp,0x20
 1014a6d:	pop    rbp
 1014a6e:	ret    
 1014a6f:	int3   
 1014a70:	int3   
 1014a71:	int3   
 1014a72:	int3   
 1014a73:	int3   
 1014a74:	int3   
 1014a75:	int3   
 1014a76:	int3   
 1014a77:	int3   
 1014a78:	mov    r11,rsp
 1014a7b:	mov    QWORD PTR [r11+0x20],rbx
 1014a7f:	push   rbp
 1014a80:	push   rsi
 1014a81:	push   rdi
 1014a82:	push   r12
 1014a84:	push   r13
 1014a86:	push   r14
 1014a88:	push   r15
 1014a8a:	sub    rsp,0x70
 1014a8e:	mov    eax,DWORD PTR [rcx+0x4]
 1014a91:	mov    r9d,DWORD PTR [rcx]
 1014a94:	mov    r12d,DWORD PTR [rcx+0x8]
 1014a98:	mov    r10d,DWORD PTR [rcx+0xc]
 1014a9c:	mov    DWORD PTR [rsp+0x20],0x48
 1014aa4:	mov    rsi,rcx
 1014aa7:	mov    ecx,DWORD PTR [rcx+0x10]
 1014aaa:	mov    r14d,DWORD PTR [rsi+0x14]
 1014aae:	mov    r15d,DWORD PTR [rsi+0x1c]
 1014ab2:	mov    r13,rdx
 1014ab5:	lea    rdx,[rip+0xfffffffffffeb544]        # 0x1000000
 1014abc:	mov    QWORD PTR [r11-0x80],rsi
 1014ac0:	add    rax,rdx
 1014ac3:	mov    QWORD PTR [r11-0x78],r13
 1014ac7:	and    r9d,0x1
 1014acb:	mov    QWORD PTR [r11-0x70],rax
 1014acf:	and    DWORD PTR [rsp+0x40],0x0
 1014ad4:	xor    eax,eax
 1014ad6:	and    QWORD PTR [r11-0x58],rax
 1014ada:	and    QWORD PTR [r11-0x50],rax
 1014ade:	mov    QWORD PTR [r11-0x60],rax
 1014ae2:	and    DWORD PTR [rsp+0x60],eax
 1014ae6:	add    r12,rdx
 1014ae9:	add    r10,rdx
 1014aec:	add    rcx,rdx
 1014aef:	add    r14,rdx
 1014af2:	test   r9b,r9b
 1014af5:	jne    0x1014b1c
 1014af7:	xor    edx,edx
 1014af9:	lea    rax,[rsp+0x20]
 1014afe:	lea    r9,[r11+0x8]
 1014b02:	lea    r8d,[rdx+0x1]
 1014b06:	mov    ecx,0xc06d0057
 1014b0b:	mov    QWORD PTR [r11+0x8],rax
 1014b0f:	call   QWORD PTR [rip+0xfffffffffffec86b]        # 0x1001380
 1014b15:	xor    eax,eax
 1014b17:	jmp    0x1014d4e
 1014b1c:	mov    rdi,QWORD PTR [r12]
 1014b20:	movabs rax,0x8000000000000000
 1014b2a:	mov    rbp,r13
 1014b2d:	sub    rbp,r10
 1014b30:	sar    rbp,0x3
 1014b34:	mov    ebp,ebp
 1014b36:	test   QWORD PTR [rcx+rbp*8],rax
 1014b3a:	mov    eax,0x0
 1014b3f:	sete   al
 1014b42:	mov    DWORD PTR [rsp+0x40],eax
 1014b46:	test   eax,eax
 1014b48:	je     0x1014b5e
 1014b4a:	mov    eax,DWORD PTR [rcx+rbp*8]
 1014b4d:	lea    rcx,[rip+0xfffffffffffeb4ae]        # 0x1000002
 1014b54:	add    rax,rcx
 1014b57:	mov    QWORD PTR [rsp+0x48],rax
 1014b5c:	jmp    0x1014b66
 1014b5e:	movzx  eax,WORD PTR [rcx+rbp*8]
 1014b62:	mov    DWORD PTR [rsp+0x48],eax
 1014b66:	mov    rax,QWORD PTR [rip+0xfffffffffffed5b3]        # 0x1002120
 1014b6d:	xor    ebx,ebx
 1014b6f:	test   rax,rax
 1014b72:	je     0x1014b90
 1014b74:	lea    rdx,[rsp+0x20]
 1014b79:	xor    ecx,ecx
 1014b7b:	call   rax
 1014b7d:	mov    rbx,rax
 1014b80:	test   rax,rax
 1014b83:	jne    0x1014d24
 1014b89:	mov    rax,QWORD PTR [rip+0xfffffffffffed590]        # 0x1002120
 1014b90:	test   rdi,rdi
 1014b93:	jne    0x1014c67
 1014b99:	test   rax,rax
 1014b9c:	je     0x1014bb0
 1014b9e:	lea    rdx,[rsp+0x20]
 1014ba3:	lea    ecx,[rdi+0x1]
 1014ba6:	call   rax
 1014ba8:	mov    rdi,rax
 1014bab:	test   rax,rax
 1014bae:	jne    0x1014c1b
 1014bb0:	mov    rcx,QWORD PTR [rsp+0x38]
 1014bb5:	call   QWORD PTR [rip+0xfffffffffffec515]        # 0x10010d0
 1014bbb:	mov    rdi,rax
 1014bbe:	test   rax,rax
 1014bc1:	jne    0x1014c1b
 1014bc3:	call   QWORD PTR [rip+0xfffffffffffec787]        # 0x1001350
 1014bc9:	mov    DWORD PTR [rsp+0x60],eax
 1014bcd:	mov    rax,QWORD PTR [rip+0xfffffffffffed554]        # 0x1002128
 1014bd4:	test   rax,rax
 1014bd7:	je     0x1014beb
 1014bd9:	lea    rdx,[rsp+0x20]
 1014bde:	lea    ecx,[rdi+0x3]
 1014be1:	call   rax
 1014be3:	mov    rdi,rax
 1014be6:	test   rax,rax
 1014be9:	jne    0x1014c1b
 1014beb:	xor    edx,edx
 1014bed:	lea    rax,[rsp+0x20]
 1014bf2:	lea    r9,[rsp+0xb8]
 1014bfa:	lea    r8d,[rdx+0x1]
 1014bfe:	mov    ecx,0xc06d007e
 1014c03:	mov    QWORD PTR [rsp+0xb8],rax
 1014c0b:	call   QWORD PTR [rip+0xfffffffffffec76f]        # 0x1001380
 1014c11:	mov    rax,QWORD PTR [rsp+0x58]
 1014c16:	jmp    0x1014d4e
 1014c1b:	mov    rax,rdi
 1014c1e:	xchg   QWORD PTR [r12],rax
 1014c22:	cmp    rax,rdi
 1014c25:	je     0x1014c57
 1014c27:	cmp    DWORD PTR [rsi+0x18],0x0
 1014c2b:	je     0x1014c60
 1014c2d:	mov    edx,0x10
 1014c32:	lea    ecx,[rdx+0x30]
 1014c35:	call   QWORD PTR [rip+0xfffffffffffec49d]        # 0x10010d8
 1014c3b:	test   rax,rax
 1014c3e:	je     0x1014c60
 1014c40:	mov    QWORD PTR [rax+0x8],rsi
 1014c44:	mov    rcx,QWORD PTR [rip+0x75b5]        # 0x101c200
 1014c4b:	mov    QWORD PTR [rax],rcx
 1014c4e:	mov    QWORD PTR [rip+0x75ab],rax        # 0x101c200
 1014c55:	jmp    0x1014c60
 1014c57:	mov    rcx,rdi
 1014c5a:	call   QWORD PTR [rip+0xfffffffffffec6b8]        # 0x1001318
 1014c60:	mov    rax,QWORD PTR [rip+0xfffffffffffed4b9]        # 0x1002120
 1014c67:	mov    QWORD PTR [rsp+0x50],rdi
 1014c6c:	test   rax,rax
 1014c6f:	je     0x1014c80
 1014c71:	lea    rdx,[rsp+0x20]
 1014c76:	mov    ecx,0x2
 1014c7b:	call   rax
 1014c7d:	mov    rbx,rax
 1014c80:	test   rbx,rbx
 1014c83:	jne    0x1014d20
 1014c89:	cmp    DWORD PTR [rsi+0x14],ebx
 1014c8c:	je     0x1014cb7
 1014c8e:	cmp    DWORD PTR [rsi+0x1c],ebx
 1014c91:	je     0x1014cb7
 1014c93:	movsxd rax,DWORD PTR [rdi+0x3c]
 1014c97:	cmp    DWORD PTR [rax+rdi*1],0x4550
 1014c9e:	jne    0x1014cb7
 1014ca0:	cmp    DWORD PTR [rax+rdi*1+0x8],r15d
 1014ca5:	jne    0x1014cb7
 1014ca7:	cmp    rdi,QWORD PTR [rax+rdi*1+0x30]
 1014cac:	jne    0x1014cb7
 1014cae:	mov    rbx,QWORD PTR [r14+rbp*8]
 1014cb2:	test   rbx,rbx
 1014cb5:	jne    0x1014d20
 1014cb7:	mov    rdx,QWORD PTR [rsp+0x48]
 1014cbc:	mov    rcx,rdi
 1014cbf:	call   QWORD PTR [rip+0xfffffffffffec6c3]        # 0x1001388
 1014cc5:	mov    rbx,rax
 1014cc8:	test   rax,rax
 1014ccb:	jne    0x1014d20
 1014ccd:	call   QWORD PTR [rip+0xfffffffffffec67d]        # 0x1001350
 1014cd3:	mov    DWORD PTR [rsp+0x60],eax
 1014cd7:	mov    rax,QWORD PTR [rip+0xfffffffffffed44a]        # 0x1002128
 1014cde:	test   rax,rax
 1014ce1:	je     0x1014cf0
 1014ce3:	lea    rdx,[rsp+0x20]
 1014ce8:	lea    ecx,[rbx+0x4]
 1014ceb:	call   rax
 1014ced:	mov    rbx,rax
 1014cf0:	test   rbx,rbx
 1014cf3:	jne    0x1014d20
 1014cf5:	lea    rax,[rsp+0x20]
 1014cfa:	lea    r9,[rsp+0xc0]
 1014d02:	lea    r8d,[rbx+0x1]
 1014d06:	xor    edx,edx
 1014d08:	mov    ecx,0xc06d007f
 1014d0d:	mov    QWORD PTR [rsp+0xc0],rax
 1014d15:	call   QWORD PTR [rip+0xfffffffffffec665]        # 0x1001380
 1014d1b:	mov    rbx,QWORD PTR [rsp+0x58]
 1014d20:	mov    QWORD PTR [r13+0x0],rbx
 1014d24:	mov    rax,QWORD PTR [rip+0xfffffffffffed3f5]        # 0x1002120
 1014d2b:	test   rax,rax
 1014d2e:	je     0x1014d4b
 1014d30:	and    DWORD PTR [rsp+0x60],0x0
 1014d35:	lea    rdx,[rsp+0x20]
 1014d3a:	mov    ecx,0x5
 1014d3f:	mov    QWORD PTR [rsp+0x50],rdi
 1014d44:	mov    QWORD PTR [rsp+0x58],rbx
 1014d49:	call   rax
 1014d4b:	mov    rax,rbx
 1014d4e:	mov    rbx,QWORD PTR [rsp+0xc8]
 1014d56:	add    rsp,0x70
 1014d5a:	pop    r15
 1014d5c:	pop    r14
 1014d5e:	pop    r13
 1014d60:	pop    r12
 1014d62:	pop    rdi
 1014d63:	pop    rsi
 1014d64:	pop    rbp
 1014d65:	ret    
 1014d66:	int3   
 1014d67:	int3   
 1014d68:	int3   
 1014d69:	int3   
 1014d6a:	int3   
 1014d6b:	int3   
 1014d6c:	jmp    QWORD PTR [rip+0xfffffffffffec4ce]        # 0x1001240
 1014d72:	int3   
 1014d73:	int3   
 1014d74:	int3   
 1014d75:	int3   
 1014d76:	int3   
 1014d77:	int3   
 1014d78:	jmp    QWORD PTR [rip+0xfffffffffffec4ba]        # 0x1001238
 1014d7e:	int3   
 1014d7f:	int3   
 1014d80:	int3   
 1014d81:	int3   
 1014d82:	int3   
 1014d83:	int3   
 1014d84:	int3   
 1014d85:	int3   
 1014d86:	data16 nop WORD PTR [rax+rax*1+0x0]
 1014d90:	sub    rsp,0x10
 1014d94:	mov    QWORD PTR [rsp],r10
 1014d98:	mov    QWORD PTR [rsp+0x8],r11
 1014d9d:	xor    r11,r11
 1014da0:	lea    r10,[rsp+0x18]
 1014da5:	sub    r10,rax
 1014da8:	cmovb  r10,r11
 1014dac:	mov    r11,QWORD PTR gs:0x10
 1014db5:	cmp    r10,r11
 1014db8:	jae    0x1014dd0
 1014dba:	and    r10w,0xf000
 1014dc0:	lea    r11,[r11-0x1000]
 1014dc7:	mov    BYTE PTR [r11],0x0
 1014dcb:	cmp    r10,r11
 1014dce:	jne    0x1014dc0
 1014dd0:	mov    r10,QWORD PTR [rsp]
 1014dd4:	mov    r11,QWORD PTR [rsp+0x8]
 1014dd9:	add    rsp,0x10
 1014ddd:	ret    
 1014dde:	int3   
 1014ddf:	int3   
 1014de0:	int3   
 1014de1:	int3   
 1014de2:	int3   
 1014de3:	int3   
 1014de4:	jmp    QWORD PTR [rip+0xfffffffffffec7b6]        # 0x10015a0
 1014dea:	int3   
 1014deb:	int3   
 1014dec:	int3   
 1014ded:	int3   
 1014dee:	int3   
 1014def:	int3   
 1014df0:	jmp    QWORD PTR [rip+0xfffffffffffec88a]        # 0x1001680
 1014df6:	int3   
 1014df7:	int3   
 1014df8:	int3   
 1014df9:	int3   
 1014dfa:	int3   
 1014dfb:	int3   
 1014dfc:	jmp    QWORD PTR [rip+0xfffffffffffec886]        # 0x1001688
 1014e02:	int3   
 1014e03:	int3   
 1014e04:	int3   
 1014e05:	int3   
 1014e06:	int3   
 1014e07:	int3   
 1014e08:	int3   
 1014e09:	int3   
 1014e0a:	int3   
 1014e0b:	int3   
 1014e0c:	int3   
 1014e0d:	int3   
 1014e0e:	int3   
 1014e0f:	int3   
 1014e10:	rex push rbx
 1014e12:	sub    rsp,0x20
 1014e16:	mov    rbx,rcx
 1014e19:	call   QWORD PTR [rip+0xfffffffffffec399]        # 0x10011b8
 1014e1f:	mov    rcx,rbx
 1014e22:	movzx  edx,ax
 1014e25:	add    rsp,0x20
 1014e29:	pop    rbx
 1014e2a:	jmp    0x1014e40
 1014e2f:	int3   
 1014e30:	int3   
 1014e31:	int3   
 1014e32:	int3   
 1014e33:	int3   
 1014e34:	int3   
 1014e35:	int3   
 1014e36:	int3   
 1014e37:	int3   
 1014e38:	int3   
 1014e39:	int3   
 1014e3a:	int3   
 1014e3b:	int3   
 1014e3c:	int3   
 1014e3d:	int3   
 1014e3e:	int3   
 1014e3f:	int3   
 1014e40:	rex push rbp
 1014e42:	push   rsi
 1014e43:	push   r12
 1014e45:	push   r14
 1014e47:	lea    rbp,[rsp-0xf58]
 1014e4f:	mov    eax,0x1058
 1014e54:	call   0x1014d90
 1014e59:	sub    rsp,rax
 1014e5c:	mov    rax,QWORD PTR [rip+0x637d]        # 0x101b1e0
 1014e63:	xor    rax,rsp
 1014e66:	mov    QWORD PTR [rbp+0xf40],rax
 1014e6d:	movzx  esi,dx
 1014e70:	xor    r12d,r12d
 1014e73:	mov    WORD PTR [rsp+0x30],r12w
 1014e79:	mov    eax,esi
 1014e7b:	cmp    esi,0xc04
 1014e81:	je     0x1014e91
 1014e83:	cmp    eax,0x1004
 1014e88:	jne    0x1014e96
 1014e8a:	mov    esi,0x804
 1014e8f:	jmp    0x1014e96
 1014e91:	mov    esi,0x404
 1014e96:	mov    QWORD PTR [rsp+0x1088],rbx
 1014e9e:	mov    r14d,0x105
 1014ea4:	mov    QWORD PTR [rsp+0x1090],rdi
 1014eac:	lea    r9,[rsp+0x30]
 1014eb1:	lea    rdx,[rbp+0xd30]
 1014eb8:	mov    r8d,r14d
 1014ebb:	mov    QWORD PTR [rsp+0x1098],r13
 1014ec3:	mov    QWORD PTR [rsp+0x20],r14
 1014ec8:	mov    QWORD PTR [rsp+0x1050],r15
 1014ed0:	call   0x1015660
 1014ed5:	test   al,al
 1014ed7:	je     0x1015612
 1014edd:	lea    rax,[rsp+0x30]
 1014ee2:	lea    r13,[rip+0xfffffffffffefe87]        # 0x1004d70
 1014ee9:	lea    r9,[rbp+0xd30]
 1014ef0:	lea    rcx,[rbp+0xb20]
 1014ef7:	movzx  r8d,si
 1014efb:	mov    edx,r14d
 1014efe:	mov    QWORD PTR [rsp+0x28],r13
 1014f03:	mov    QWORD PTR [rsp+0x20],rax
 1014f08:	call   0x1015870
 1014f0d:	lea    rdx,[rbp+0x3d0]
 1014f14:	lea    rcx,[rbp+0xb20]
 1014f1b:	call   QWORD PTR [rip+0xfffffffffffec197]        # 0x10010b8
 1014f21:	cmp    rax,0xffffffffffffffff
 1014f25:	jne    0x10155fa
 1014f2b:	mov    rax,r12
 1014f2e:	xchg   ax,ax
 1014f30:	movzx  ecx,WORD PTR [rbp+rax*2+0xd30]
 1014f38:	cmp    r12w,cx
 1014f3c:	je     0x1014f51
 1014f3e:	mov    WORD PTR [rbp+rax*2+0xb20],cx
 1014f46:	inc    rax
 1014f49:	cmp    rax,0x104
 1014f4f:	jb     0x1014f30
 1014f51:	movzx  r15d,WORD PTR [rsp+0x30]
 1014f57:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 1014f60:	mov    edi,0x1
 1014f65:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 1014f6e:	jne    0x10151b7
 1014f74:	movzx  r11d,si
 1014f78:	lea    r9,[rbp+0xac0]
 1014f7f:	mov    WORD PTR [rbp+0xac0],r12w
 1014f87:	lea    r8,[rbp+0xac2]
 1014f8e:	mov    r10d,edi
 1014f91:	mov    eax,0xcccccccd
 1014f96:	add    r8,0x2
 1014f9a:	mul    r11d
 1014f9d:	shr    edx,0x3
 1014fa0:	movzx  eax,dx
 1014fa3:	shl    ax,0x2
 1014fa7:	lea    ecx,[rax+rdx*1]
 1014faa:	add    cx,cx
 1014fad:	sub    r11w,cx
 1014fb1:	add    r11w,0x30
 1014fb6:	mov    WORD PTR [r8-0x2],r11w
 1014fbb:	mov    r11d,edx
 1014fbe:	test   edx,edx
 1014fc0:	je     0x1014fcb
 1014fc2:	inc    r10d
 1014fc5:	cmp    r10d,0x29
 1014fc9:	jb     0x1014f91
 1014fcb:	lea    rax,[rbp+0xac0]
 1014fd2:	sub    r8,0x2
 1014fd6:	cmp    rax,r8
 1014fd9:	jae    0x1014ffe
 1014fdb:	nop    DWORD PTR [rax+rax*1+0x0]
 1014fe0:	movzx  eax,WORD PTR [r8]
 1014fe4:	movzx  ecx,WORD PTR [r9]
 1014fe8:	sub    r8,0x2
 1014fec:	mov    WORD PTR [r9],ax
 1014ff0:	mov    WORD PTR [r8+0x2],cx
 1014ff5:	add    r9,0x2
 1014ff9:	cmp    r9,r8
 1014ffc:	jb     0x1014fe0
 1014ffe:	lea    rax,[rbp+0xb20]
 1015005:	mov    rbx,r12
 1015008:	cmp    r12w,WORD PTR [rbp+0xb20]
 1015010:	je     0x101501f
 1015012:	add    rax,0x2
 1015016:	inc    rbx
 1015019:	cmp    r12w,WORD PTR [rax]
 101501d:	jne    0x1015012
 101501f:	mov    rax,rbx
 1015022:	test   rbx,rbx
 1015025:	je     0x101502b
 1015027:	lea    rax,[rbx-0x1]
 101502b:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1015033:	mov    edx,0x5c
 1015038:	lea    r11d,[rdx-0x2d]
 101503c:	cmp    dx,cx
 101503f:	je     0x1015087
 1015041:	cmp    r11w,cx
 1015045:	je     0x1015087
 1015047:	movzx  eax,WORD PTR [rbp+0xac0]
 101504e:	cmp    dx,ax
 1015051:	je     0x1015087
 1015053:	cmp    r11w,ax
 1015057:	je     0x1015087
 1015059:	lea    rcx,[rbp+0xb20]
 1015060:	mov    rdx,r14
 1015063:	lea    r8,[rip+0xfffffffffffecc5e]        # 0x1001cc8
 101506a:	lea    rcx,[rcx+rbx*2]
 101506e:	sub    rdx,rbx
 1015071:	call   0x10159d0
 1015076:	test   al,al
 1015078:	je     0x10151c2
 101507e:	inc    rbx
 1015081:	mov    r11d,0x2f
 1015087:	lea    r10,[rbp+0xb20]
 101508e:	mov    r9,r14
 1015091:	lea    r10,[r10+rbx*2]
 1015095:	sub    r9,rbx
 1015098:	je     0x10151b7
 101509e:	mov    rcx,r12
 10150a1:	dec    r9
 10150a4:	je     0x10150cd
 10150a6:	lea    r8,[rbp+0xac0]
 10150ad:	mov    rax,r10
 10150b0:	sub    r8,r10
 10150b3:	movzx  edx,WORD PTR [r8+rax*1]
 10150b8:	cmp    r12w,dx
 10150bc:	je     0x10150cd
 10150be:	inc    rcx
 10150c1:	mov    WORD PTR [rax],dx
 10150c4:	add    rax,0x2
 10150c8:	cmp    rcx,r9
 10150cb:	jb     0x10150b3
 10150cd:	mov    WORD PTR [r10+rcx*2],r12w
 10150d2:	cmp    r12w,WORD PTR [rbp+rcx*2+0xac0]
 10150db:	jne    0x10151b7
 10150e1:	lea    rax,[rbp+0xb20]
 10150e8:	mov    rbx,r12
 10150eb:	cmp    r12w,WORD PTR [rbp+0xb20]
 10150f3:	je     0x101510d
 10150f5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1015100:	add    rax,0x2
 1015104:	inc    rbx
 1015107:	cmp    r12w,WORD PTR [rax]
 101510b:	jne    0x1015100
 101510d:	mov    rax,rbx
 1015110:	test   rbx,rbx
 1015113:	je     0x1015119
 1015115:	lea    rax,[rbx-0x1]
 1015119:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1015121:	mov    eax,0x5c
 1015126:	cmp    ax,cx
 1015129:	je     0x1015161
 101512b:	cmp    r11w,cx
 101512f:	je     0x1015161
 1015131:	cmp    ax,r15w
 1015135:	je     0x1015161
 1015137:	cmp    r11w,r15w
 101513b:	je     0x1015161
 101513d:	lea    rcx,[rbp+0xb20]
 1015144:	mov    rdx,r14
 1015147:	lea    r8,[rip+0xfffffffffffecb7a]        # 0x1001cc8
 101514e:	lea    rcx,[rcx+rbx*2]
 1015152:	sub    rdx,rbx
 1015155:	call   0x10159d0
 101515a:	test   al,al
 101515c:	je     0x10151c2
 101515e:	inc    rbx
 1015161:	lea    r10,[rbp+0xb20]
 1015168:	mov    r9,r14
 101516b:	lea    r10,[r10+rbx*2]
 101516f:	sub    r9,rbx
 1015172:	je     0x10151b7
 1015174:	mov    rcx,r12
 1015177:	dec    r9
 101517a:	je     0x10151aa
 101517c:	lea    r8,[rsp+0x30]
 1015181:	mov    rax,r10
 1015184:	sub    r8,r10
 1015187:	nop    WORD PTR [rax+rax*1+0x0]
 1015190:	movzx  edx,WORD PTR [r8+rax*1]
 1015195:	cmp    r12w,dx
 1015199:	je     0x10151aa
 101519b:	inc    rcx
 101519e:	mov    WORD PTR [rax],dx
 10151a1:	add    rax,0x2
 10151a5:	cmp    rcx,r9
 10151a8:	jb     0x1015190
 10151aa:	mov    WORD PTR [r10+rcx*2],r12w
 10151af:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 10151b5:	je     0x10151c2
 10151b7:	mov    ecx,0x7a
 10151bc:	call   QWORD PTR [rip+0xfffffffffffebf8e]        # 0x1001150
 10151c2:	lea    rdx,[rbp+0x870]
 10151c9:	lea    rcx,[rbp+0xb20]
 10151d0:	call   QWORD PTR [rip+0xfffffffffffebee2]        # 0x10010b8
 10151d6:	cmp    rax,0xffffffffffffffff
 10151da:	jne    0x10155fa
 10151e0:	mov    ebx,0x409
 10151e5:	cmp    bx,si
 10151e8:	je     0x10154c5
 10151ee:	lea    rax,[rsp+0x30]
 10151f3:	lea    r9,[rbp+0xd30]
 10151fa:	lea    rcx,[rbp+0xb20]
 1015201:	mov    r8d,ebx
 1015204:	mov    rdx,r14
 1015207:	mov    QWORD PTR [rsp+0x28],r13
 101520c:	mov    QWORD PTR [rsp+0x20],rax
 1015211:	call   0x1015870
 1015216:	lea    rdx,[rbp+0x620]
 101521d:	lea    rcx,[rbp+0xb20]
 1015224:	call   QWORD PTR [rip+0xfffffffffffebe8e]        # 0x10010b8
 101522a:	cmp    rax,0xffffffffffffffff
 101522e:	jne    0x10155fa
 1015234:	mov    rax,r12
 1015237:	nop    WORD PTR [rax+rax*1+0x0]
 1015240:	movzx  ecx,WORD PTR [rbp+rax*2+0xd30]
 1015248:	cmp    r12w,cx
 101524c:	je     0x1015261
 101524e:	mov    WORD PTR [rbp+rax*2+0xb20],cx
 1015256:	inc    rax
 1015259:	cmp    rax,0x104
 101525f:	jb     0x1015240
 1015261:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 101526a:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 1015273:	jne    0x101549c
 1015279:	lea    r9,[rbp+0xac0]
 1015280:	mov    WORD PTR [rbp+0xac0],r12w
 1015288:	lea    r8,[rbp+0xac2]
 101528f:	nop
 1015290:	mov    eax,0xcccccccd
 1015295:	add    r8,0x2
 1015299:	mul    ebx
 101529b:	shr    edx,0x3
 101529e:	movzx  eax,dx
 10152a1:	shl    ax,0x2
 10152a5:	lea    ecx,[rax+rdx*1]
 10152a8:	add    cx,cx
 10152ab:	sub    bx,cx
 10152ae:	add    bx,0x30
 10152b2:	mov    WORD PTR [r8-0x2],bx
 10152b7:	mov    ebx,edx
 10152b9:	test   edx,edx
 10152bb:	je     0x10152c4
 10152bd:	inc    edi
 10152bf:	cmp    edi,0x29
 10152c2:	jb     0x1015290
 10152c4:	lea    rax,[rbp+0xac0]
 10152cb:	sub    r8,0x2
 10152cf:	cmp    rax,r8
 10152d2:	jae    0x10152fe
 10152d4:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10152e0:	movzx  eax,WORD PTR [r8]
 10152e4:	movzx  ecx,WORD PTR [r9]
 10152e8:	sub    r8,0x2
 10152ec:	mov    WORD PTR [r9],ax
 10152f0:	mov    WORD PTR [r8+0x2],cx
 10152f5:	add    r9,0x2
 10152f9:	cmp    r9,r8
 10152fc:	jb     0x10152e0
 10152fe:	lea    rax,[rbp+0xb20]
 1015305:	mov    rbx,r12
 1015308:	cmp    r12w,WORD PTR [rbp+0xb20]
 1015310:	je     0x101531f
 1015312:	add    rax,0x2
 1015316:	inc    rbx
 1015319:	cmp    r12w,WORD PTR [rax]
 101531d:	jne    0x1015312
 101531f:	mov    rax,rbx
 1015322:	test   rbx,rbx
 1015325:	je     0x101532b
 1015327:	lea    rax,[rbx-0x1]
 101532b:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1015333:	mov    edi,0x5c
 1015338:	lea    r11d,[rdi-0x2d]
 101533c:	cmp    di,cx
 101533f:	je     0x1015385
 1015341:	cmp    r11w,cx
 1015345:	je     0x1015385
 1015347:	movzx  eax,WORD PTR [rbp+0xac0]
 101534e:	cmp    di,ax
 1015351:	je     0x1015385
 1015353:	cmp    r11w,ax
 1015357:	je     0x1015385
 1015359:	lea    rcx,[rbp+0xb20]
 1015360:	mov    rdx,r14
 1015363:	lea    r8,[rip+0xfffffffffffec95e]        # 0x1001cc8
 101536a:	lea    rcx,[rcx+rbx*2]
 101536e:	sub    rdx,rbx
 1015371:	call   0x10159d0
 1015376:	test   al,al
 1015378:	je     0x10154a7
 101537e:	inc    rbx
 1015381:	lea    r11d,[rdi-0x2d]
 1015385:	lea    r10,[rbp+0xb20]
 101538c:	mov    r9,r14
 101538f:	lea    r10,[r10+rbx*2]
 1015393:	sub    r9,rbx
 1015396:	je     0x101549c
 101539c:	mov    rcx,r12
 101539f:	dec    r9
 10153a2:	je     0x10153cb
 10153a4:	lea    r8,[rbp+0xac0]
 10153ab:	mov    rax,r10
 10153ae:	sub    r8,r10
 10153b1:	movzx  edx,WORD PTR [r8+rax*1]
 10153b6:	cmp    r12w,dx
 10153ba:	je     0x10153cb
 10153bc:	inc    rcx
 10153bf:	mov    WORD PTR [rax],dx
 10153c2:	add    rax,0x2
 10153c6:	cmp    rcx,r9
 10153c9:	jb     0x10153b1
 10153cb:	mov    WORD PTR [r10+rcx*2],r12w
 10153d0:	cmp    r12w,WORD PTR [rbp+rcx*2+0xac0]
 10153d9:	jne    0x101549c
 10153df:	lea    rax,[rbp+0xb20]
 10153e6:	mov    rbx,r12
 10153e9:	cmp    r12w,WORD PTR [rbp+0xb20]
 10153f1:	je     0x1015400
 10153f3:	add    rax,0x2
 10153f7:	inc    rbx
 10153fa:	cmp    r12w,WORD PTR [rax]
 10153fe:	jne    0x10153f3
 1015400:	mov    rax,rbx
 1015403:	test   rbx,rbx
 1015406:	je     0x101540c
 1015408:	lea    rax,[rbx-0x1]
 101540c:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1015414:	cmp    di,cx
 1015417:	je     0x101544f
 1015419:	cmp    r11w,cx
 101541d:	je     0x101544f
 101541f:	cmp    di,r15w
 1015423:	je     0x101544f
 1015425:	cmp    r11w,r15w
 1015429:	je     0x101544f
 101542b:	lea    rcx,[rbp+0xb20]
 1015432:	mov    rdx,r14
 1015435:	lea    r8,[rip+0xfffffffffffec88c]        # 0x1001cc8
 101543c:	lea    rcx,[rcx+rbx*2]
 1015440:	sub    rdx,rbx
 1015443:	call   0x10159d0
 1015448:	test   al,al
 101544a:	je     0x10154a7
 101544c:	inc    rbx
 101544f:	lea    r10,[rbp+0xb20]
 1015456:	mov    r9,r14
 1015459:	lea    r10,[r10+rbx*2]
 101545d:	sub    r9,rbx
 1015460:	je     0x101549c
 1015462:	mov    rcx,r12
 1015465:	dec    r9
 1015468:	je     0x101548f
 101546a:	lea    r8,[rsp+0x30]
 101546f:	mov    rax,r10
 1015472:	sub    r8,r10
 1015475:	movzx  edx,WORD PTR [r8+rax*1]
 101547a:	cmp    r12w,dx
 101547e:	je     0x101548f
 1015480:	inc    rcx
 1015483:	mov    WORD PTR [rax],dx
 1015486:	add    rax,0x2
 101548a:	cmp    rcx,r9
 101548d:	jb     0x1015475
 101548f:	mov    WORD PTR [r10+rcx*2],r12w
 1015494:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 101549a:	je     0x10154a7
 101549c:	mov    ecx,0x7a
 10154a1:	call   QWORD PTR [rip+0xfffffffffffebca9]        # 0x1001150
 10154a7:	lea    rdx,[rbp+0x180]
 10154ae:	lea    rcx,[rbp+0xb20]
 10154b5:	call   QWORD PTR [rip+0xfffffffffffebbfd]        # 0x10010b8
 10154bb:	cmp    rax,0xffffffffffffffff
 10154bf:	jne    0x10155fa
 10154c5:	mov    rax,r12
 10154c8:	nop    DWORD PTR [rax+rax*1+0x0]
 10154d0:	movzx  edx,WORD PTR [rbp+rax*2+0xd30]
 10154d8:	cmp    r12w,dx
 10154dc:	je     0x10154f1
 10154de:	mov    WORD PTR [rbp+rax*2+0xb20],dx
 10154e6:	inc    rax
 10154e9:	cmp    rax,0x104
 10154ef:	jb     0x10154d0
 10154f1:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 10154fa:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 1015503:	jne    0x10155d7
 1015509:	lea    rax,[rbp+0xb20]
 1015510:	mov    rbx,r12
 1015513:	cmp    r12w,WORD PTR [rbp+0xb20]
 101551b:	je     0x101552d
 101551d:	nop    DWORD PTR [rax]
 1015520:	add    rax,0x2
 1015524:	inc    rbx
 1015527:	cmp    r12w,WORD PTR [rax]
 101552b:	jne    0x1015520
 101552d:	mov    rax,rbx
 1015530:	test   rbx,rbx
 1015533:	je     0x1015539
 1015535:	lea    rax,[rbx-0x1]
 1015539:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1015541:	mov    edx,0x5c
 1015546:	cmp    dx,cx
 1015549:	je     0x1015585
 101554b:	mov    eax,0x2f
 1015550:	cmp    ax,cx
 1015553:	je     0x1015585
 1015555:	cmp    dx,r15w
 1015559:	je     0x1015585
 101555b:	cmp    ax,r15w
 101555f:	je     0x1015585
 1015561:	lea    rcx,[rbp+0xb20]
 1015568:	mov    rdx,r14
 101556b:	lea    r8,[rip+0xfffffffffffec756]        # 0x1001cc8
 1015572:	lea    rcx,[rcx+rbx*2]
 1015576:	sub    rdx,rbx
 1015579:	call   0x10159d0
 101557e:	test   al,al
 1015580:	je     0x10155e2
 1015582:	inc    rbx
 1015585:	lea    r10,[rbp+0xb20]
 101558c:	lea    r10,[r10+rbx*2]
 1015590:	sub    r14,rbx
 1015593:	je     0x10155d7
 1015595:	lea    r9,[r14-0x1]
 1015599:	mov    rcx,r12
 101559c:	test   r9,r9
 101559f:	je     0x10155ca
 10155a1:	lea    r8,[rsp+0x30]
 10155a6:	mov    rax,r10
 10155a9:	sub    r8,r10
 10155ac:	nop    DWORD PTR [rax+0x0]
 10155b0:	movzx  edx,WORD PTR [r8+rax*1]
 10155b5:	cmp    r12w,dx
 10155b9:	je     0x10155ca
 10155bb:	inc    rcx
 10155be:	mov    WORD PTR [rax],dx
 10155c1:	add    rax,0x2
 10155c5:	cmp    rcx,r9
 10155c8:	jb     0x10155b0
 10155ca:	mov    WORD PTR [r10+rcx*2],r12w
 10155cf:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 10155d5:	je     0x10155e2
 10155d7:	mov    ecx,0x7a
 10155dc:	call   QWORD PTR [rip+0xfffffffffffebb6e]        # 0x1001150
 10155e2:	lea    rdx,[rsp+0x30]
 10155e7:	lea    rcx,[rbp+0xb20]
 10155ee:	call   QWORD PTR [rip+0xfffffffffffebac4]        # 0x10010b8
 10155f4:	cmp    rax,0xffffffffffffffff
 10155f8:	je     0x1015612
 10155fa:	mov    rcx,rax
 10155fd:	call   QWORD PTR [rip+0xfffffffffffebac5]        # 0x10010c8
 1015603:	lea    rcx,[rbp+0xb20]
 101560a:	call   QWORD PTR [rip+0xfffffffffffebb70]        # 0x1001180
 1015610:	jmp    0x1015614
 1015612:	xor    eax,eax
 1015614:	mov    r15,QWORD PTR [rsp+0x1050]
 101561c:	mov    r13,QWORD PTR [rsp+0x1098]
 1015624:	mov    rdi,QWORD PTR [rsp+0x1090]
 101562c:	mov    rbx,QWORD PTR [rsp+0x1088]
 1015634:	mov    rcx,QWORD PTR [rbp+0xf40]
 101563b:	xor    rcx,rsp
 101563e:	call   0x100daf0
 1015643:	add    rsp,0x1058
 101564a:	pop    r14
 101564c:	pop    r12
 101564e:	pop    rsi
 101564f:	pop    rbp
 1015650:	ret    
 1015651:	int3   
 1015652:	int3   
 1015653:	int3   
 1015654:	int3   
 1015655:	int3   
 1015656:	int3   
 1015657:	int3   
 1015658:	int3   
 1015659:	int3   
 101565a:	int3   
 101565b:	int3   
 101565c:	int3   
 101565d:	int3   
 101565e:	int3   
 101565f:	int3   
 1015660:	rex push rbx
 1015662:	push   rsi
 1015663:	push   rdi
 1015664:	sub    rsp,0x250
 101566b:	mov    rax,QWORD PTR [rip+0x5b6e]        # 0x101b1e0
 1015672:	xor    rax,rsp
 1015675:	mov    QWORD PTR [rsp+0x240],rax
 101567d:	mov    rsi,rdx
 1015680:	mov    rdi,r8
 1015683:	lea    rdx,[rsp+0x30]
 1015688:	mov    r8d,0x105
 101568e:	mov    rbx,r9
 1015691:	call   QWORD PTR [rip+0xfffffffffffebb09]        # 0x10011a0
 1015697:	test   eax,eax
 1015699:	je     0x101573e
 101569f:	lea    r9,[rsp+0x20]
 10156a4:	lea    rcx,[rsp+0x30]
 10156a9:	mov    r8,rsi
 10156ac:	mov    edx,edi
 10156ae:	call   QWORD PTR [rip+0xfffffffffffeba0c]        # 0x10010c0
 10156b4:	test   eax,eax
 10156b6:	je     0x101573e
 10156bc:	mov    eax,eax
 10156be:	cmp    rax,rdi
 10156c1:	ja     0x101573e
 10156c3:	mov    rdi,QWORD PTR [rsp+0x290]
 10156cb:	xor    esi,esi
 10156cd:	cmp    si,WORD PTR [rbx]
 10156d0:	jne    0x10156e6
 10156d2:	mov    r8,QWORD PTR [rsp+0x20]
 10156d7:	mov    rdx,rdi
 10156da:	mov    rcx,rbx
 10156dd:	call   0x10159d0
 10156e2:	test   al,al
 10156e4:	je     0x101573e
 10156e6:	mov    rax,QWORD PTR [rsp+0x20]
 10156eb:	mov    rcx,rsi
 10156ee:	mov    WORD PTR [rax],si
 10156f1:	mov    rax,rbx
 10156f4:	cmp    si,WORD PTR [rbx]
 10156f7:	je     0x101570c
 10156f9:	nop    DWORD PTR [rax+0x0]
 1015700:	add    rax,0x2
 1015704:	inc    rcx
 1015707:	cmp    si,WORD PTR [rax]
 101570a:	jne    0x1015700
 101570c:	mov    rax,rcx
 101570f:	mov    edx,0x2e
 1015714:	test   rax,rax
 1015717:	je     0x1015722
 1015719:	dec    rax
 101571c:	cmp    dx,WORD PTR [rbx+rax*2]
 1015720:	jne    0x1015714
 1015722:	cmp    dx,WORD PTR [rbx+rax*2]
 1015726:	cmovne rax,rcx
 101572a:	lea    r10,[rbx+rax*2]
 101572e:	sub    rdi,rax
 1015731:	jne    0x101575b
 1015733:	mov    ecx,0x7a
 1015738:	call   QWORD PTR [rip+0xfffffffffffeba12]        # 0x1001150
 101573e:	xor    al,al
 1015740:	mov    rcx,QWORD PTR [rsp+0x240]
 1015748:	xor    rcx,rsp
 101574b:	call   0x100daf0
 1015750:	add    rsp,0x250
 1015757:	pop    rdi
 1015758:	pop    rsi
 1015759:	pop    rbx
 101575a:	ret    
 101575b:	lea    r9,[rdi-0x1]
 101575f:	mov    rcx,rsi
 1015762:	lea    r11,[rip+0xfffffffffffef5f7]        # 0x1004d60
 1015769:	test   r9,r9
 101576c:	je     0x1015799
 101576e:	mov    r8,r11
 1015771:	mov    rax,r10
 1015774:	sub    r8,r10
 1015777:	nop    WORD PTR [rax+rax*1+0x0]
 1015780:	movzx  edx,WORD PTR [r8+rax*1]
 1015785:	cmp    si,dx
 1015788:	je     0x1015799
 101578a:	inc    rcx
 101578d:	mov    WORD PTR [rax],dx
 1015790:	add    rax,0x2
 1015794:	cmp    rcx,r9
 1015797:	jb     0x1015780
 1015799:	mov    WORD PTR [r10+rcx*2],si
 101579e:	cmp    si,WORD PTR [r11+rcx*2]
 10157a3:	jne    0x1015733
 10157a5:	mov    al,0x1
 10157a7:	jmp    0x1015740
 10157a9:	int3   
 10157aa:	int3   
 10157ab:	int3   
 10157ac:	int3   
 10157ad:	int3   
 10157ae:	int3   
 10157af:	int3   
 10157b0:	mov    QWORD PTR [rsp+0x8],rbx
 10157b5:	mov    QWORD PTR [rsp+0x10],rsi
 10157ba:	mov    QWORD PTR [rsp+0x18],rdi
 10157bf:	push   r14
 10157c1:	sub    rsp,0x20
 10157c5:	mov    rax,rcx
 10157c8:	mov    rdi,rcx
 10157cb:	xor    ecx,ecx
 10157cd:	mov    r14,r8
 10157d0:	mov    rsi,rdx
 10157d3:	mov    ebx,ecx
 10157d5:	cmp    cx,WORD PTR [rax]
 10157d8:	je     0x10157ec
 10157da:	nop    WORD PTR [rax+rax*1+0x0]
 10157e0:	add    rax,0x2
 10157e4:	inc    rbx
 10157e7:	cmp    cx,WORD PTR [rax]
 10157ea:	jne    0x10157e0
 10157ec:	mov    rax,rbx
 10157ef:	test   rbx,rbx
 10157f2:	je     0x10157f8
 10157f4:	lea    rax,[rbx-0x1]
 10157f8:	movzx  ecx,WORD PTR [rdi+rax*2]
 10157fc:	mov    r8d,0x5c
 1015802:	cmp    r8w,cx
 1015806:	je     0x101583e
 1015808:	mov    edx,0x2f
 101580d:	cmp    dx,cx
 1015810:	je     0x101583e
 1015812:	movzx  eax,WORD PTR [r14]
 1015816:	cmp    r8w,ax
 101581a:	je     0x101583e
 101581c:	cmp    dx,ax
 101581f:	je     0x101583e
 1015821:	mov    rdx,rsi
 1015824:	lea    rcx,[rdi+rbx*2]
 1015828:	lea    r8,[rip+0xfffffffffffec499]        # 0x1001cc8
 101582f:	sub    rdx,rbx
 1015832:	call   0x10159d0
 1015837:	test   al,al
 1015839:	je     0x1015850
 101583b:	inc    rbx
 101583e:	sub    rsi,rbx
 1015841:	lea    rcx,[rdi+rbx*2]
 1015845:	mov    r8,r14
 1015848:	mov    rdx,rsi
 101584b:	call   0x10159d0
 1015850:	mov    rbx,QWORD PTR [rsp+0x30]
 1015855:	mov    rsi,QWORD PTR [rsp+0x38]
 101585a:	mov    rdi,QWORD PTR [rsp+0x40]
 101585f:	add    rsp,0x20
 1015863:	pop    r14
 1015865:	ret    
 1015866:	int3   
 1015867:	int3   
 1015868:	int3   
 1015869:	int3   
 101586a:	int3   
 101586b:	int3   
 101586c:	int3   
 101586d:	int3   
 101586e:	int3   
 101586f:	int3   
 1015870:	rex push rbx
 1015872:	push   rsi
 1015873:	push   rdi
 1015874:	sub    rsp,0x90
 101587b:	mov    rax,QWORD PTR [rip+0x595e]        # 0x101b1e0
 1015882:	xor    rax,rsp
 1015885:	mov    QWORD PTR [rsp+0x80],rax
 101588d:	movzx  esi,r8w
 1015891:	mov    r8,r9
 1015894:	mov    rdi,rdx
 1015897:	mov    rbx,rcx
 101589a:	call   0x10159d0
 101589f:	test   al,al
 10158a1:	je     0x10159a4
 10158a7:	mov    rax,QWORD PTR [rsp+0xd8]
 10158af:	mov    QWORD PTR [rsp+0xc0],rbp
 10158b7:	xor    ebp,ebp
 10158b9:	test   rax,rax
 10158bc:	je     0x10158dd
 10158be:	cmp    bp,WORD PTR [rax]
 10158c1:	je     0x10158dd
 10158c3:	lea    r8,[rip+0xfffffffffffef4be]        # 0x1004d88
 10158ca:	mov    rdx,rdi
 10158cd:	mov    rcx,rbx
 10158d0:	call   0x10157b0
 10158d5:	test   al,al
 10158d7:	je     0x1015980
 10158dd:	movzx  r11d,si
 10158e1:	lea    r9,[rsp+0x20]
 10158e6:	mov    WORD PTR [rsp+0x20],bp
 10158eb:	lea    rcx,[rsp+0x22]
 10158f0:	mov    r10d,0x1
 10158f6:	data16 nop WORD PTR [rax+rax*1+0x0]
 1015900:	mov    eax,0xcccccccd
 1015905:	add    rcx,0x2
 1015909:	mul    r11d
 101590c:	mov    r8d,edx
 101590f:	shr    r8d,0x3
 1015913:	movzx  eax,r8w
 1015917:	shl    ax,0x2
 101591b:	lea    edx,[rax+r8*1]
 101591f:	add    dx,dx
 1015922:	sub    r11w,dx
 1015926:	add    r11w,0x30
 101592b:	mov    WORD PTR [rcx-0x2],r11w
 1015930:	mov    r11d,r8d
 1015933:	test   r8d,r8d
 1015936:	je     0x1015941
 1015938:	inc    r10d
 101593b:	cmp    r10d,0x29
 101593f:	jb     0x1015900
 1015941:	lea    rax,[rsp+0x20]
 1015946:	sub    rcx,0x2
 101594a:	cmp    rax,rcx
 101594d:	jae    0x101596c
 101594f:	nop
 1015950:	movzx  eax,WORD PTR [rcx]
 1015953:	movzx  edx,WORD PTR [r9]
 1015957:	sub    rcx,0x2
 101595b:	mov    WORD PTR [r9],ax
 101595f:	mov    WORD PTR [rcx+0x2],dx
 1015963:	add    r9,0x2
 1015967:	cmp    r9,rcx
 101596a:	jb     0x1015950
 101596c:	lea    r8,[rsp+0x20]
 1015971:	mov    rdx,rdi
 1015974:	mov    rcx,rbx
 1015977:	call   0x10157b0
 101597c:	test   al,al
 101597e:	jne    0x1015984
 1015980:	xor    al,al
 1015982:	jmp    0x101599c
 1015984:	mov    r8,QWORD PTR [rsp+0xd0]
 101598c:	mov    rdx,rdi
 101598f:	mov    rcx,rbx
 1015992:	call   0x10157b0
 1015997:	test   al,al
 1015999:	setne  al
 101599c:	mov    rbp,QWORD PTR [rsp+0xc0]
 10159a4:	mov    rcx,QWORD PTR [rsp+0x80]
 10159ac:	xor    rcx,rsp
 10159af:	call   0x100daf0
 10159b4:	add    rsp,0x90
 10159bb:	pop    rdi
 10159bc:	pop    rsi
 10159bd:	pop    rbx
 10159be:	ret    
 10159bf:	int3   
 10159c0:	int3   
 10159c1:	int3   
 10159c2:	int3   
 10159c3:	int3   
 10159c4:	int3   
 10159c5:	int3   
 10159c6:	int3   
 10159c7:	int3   
 10159c8:	int3   
 10159c9:	int3   
 10159ca:	int3   
 10159cb:	int3   
 10159cc:	int3   
 10159cd:	int3   
 10159ce:	int3   
 10159cf:	int3   
 10159d0:	sub    rsp,0x28
 10159d4:	mov    r11,r8
 10159d7:	mov    r10,rcx
 10159da:	test   rdx,rdx
 10159dd:	jne    0x10159f1
 10159df:	mov    ecx,0x7a
 10159e4:	call   QWORD PTR [rip+0xfffffffffffeb766]        # 0x1001150
 10159ea:	xor    al,al
 10159ec:	add    rsp,0x28
 10159f0:	ret    
 10159f1:	lea    r8,[rdx-0x1]
 10159f5:	mov    QWORD PTR [rsp+0x20],rbx
 10159fa:	xor    ebx,ebx
 10159fc:	mov    ecx,ebx
 10159fe:	test   r8,r8
 1015a01:	je     0x1015a29
 1015a03:	mov    r9,r11
 1015a06:	mov    rax,r10
 1015a09:	sub    r9,r10
 1015a0c:	nop    DWORD PTR [rax+0x0]
 1015a10:	movzx  edx,WORD PTR [r9+rax*1]
 1015a15:	cmp    bx,dx
 1015a18:	je     0x1015a29
 1015a1a:	inc    rcx
 1015a1d:	mov    WORD PTR [rax],dx
 1015a20:	add    rax,0x2
 1015a24:	cmp    rcx,r8
 1015a27:	jb     0x1015a10
 1015a29:	mov    WORD PTR [r10+rcx*2],bx
 1015a2e:	cmp    bx,WORD PTR [r11+rcx*2]
 1015a33:	mov    rbx,QWORD PTR [rsp+0x20]
 1015a38:	jne    0x10159df
 1015a3a:	mov    al,0x1
 1015a3c:	add    rsp,0x28
 1015a40:	ret    
 1015a41:	int3   
 1015a42:	int3   
 1015a43:	int3   
 1015a44:	int3   
 1015a45:	int3   
 1015a46:	int3   
 1015a47:	int3   
 1015a48:	int3   
 1015a49:	int3   
 1015a4a:	int3   
 1015a4b:	int3   
 1015a4c:	int3   
 1015a4d:	int3   
 1015a4e:	int3   
 1015a4f:	int3   
 1015a50:	mov    QWORD PTR [rsp+0x8],rbx
 1015a55:	push   rdi
 1015a56:	sub    rsp,0x20
 1015a5a:	mov    rdi,rcx
 1015a5d:	lea    rcx,[rip+0x67a4]        # 0x101c208
 1015a64:	call   0x1012d70
 1015a69:	test   eax,eax
 1015a6b:	jne    0x1015ab2
 1015a6d:	lea    rcx,[rip+0x6794]        # 0x101c208
 1015a74:	call   0x1012fd0
 1015a79:	test   eax,eax
 1015a7b:	je     0x1015ab2
 1015a7d:	lea    rcx,[rip+0x6794]        # 0x101c218
 1015a84:	xor    edx,edx
 1015a86:	mov    r8d,0x1b60
 1015a8c:	call   0x100dcba
 1015a91:	lea    rcx,[rip+0x6780]        # 0x101c218
 1015a98:	call   0x1012530
 1015a9d:	lea    rcx,[rip+0x6764]        # 0x101c208
 1015aa4:	xor    edx,edx
 1015aa6:	mov    QWORD PTR [rip+0x6763],rax        # 0x101c210
 1015aad:	call   0x1013030
 1015ab2:	lea    rcx,[rip+0x674f]        # 0x101c208
 1015ab9:	call   0x1012d90
 1015abe:	test   eax,eax
 1015ac0:	mov    ebx,eax
 1015ac2:	js     0x1015ae1
 1015ac4:	mov    rcx,QWORD PTR [rip+0x6745]        # 0x101c210
 1015acb:	mov    QWORD PTR [rdi],rcx
 1015ace:	mov    rdx,QWORD PTR [rcx]
 1015ad1:	call   QWORD PTR [rdx+0x8]
 1015ad4:	mov    eax,ebx
 1015ad6:	mov    rbx,QWORD PTR [rsp+0x30]
 1015adb:	add    rsp,0x20
 1015adf:	pop    rdi
 1015ae0:	ret    
 1015ae1:	mov    QWORD PTR [rdi],0x0
 1015ae8:	mov    rbx,QWORD PTR [rsp+0x30]
 1015aed:	add    rsp,0x20
 1015af1:	pop    rdi
 1015af2:	ret    
 1015af3:	int3   
 1015af4:	int3   
 1015af5:	int3   
 1015af6:	int3   
 1015af7:	int3   
 1015af8:	int3   
 1015af9:	int3   
 1015afa:	int3   
 1015afb:	int3   
 1015afc:	int3   
 1015afd:	int3   
 1015afe:	int3   
 1015aff:	int3   
 1015b00:	mov    QWORD PTR [rsp+0x10],rsi
 1015b05:	push   rdi
 1015b06:	sub    rsp,0x20
 1015b0a:	mov    rsi,rcx
 1015b0d:	lea    rcx,[rip+0x66f4]        # 0x101c208
 1015b14:	call   0x1012d70
 1015b19:	test   eax,eax
 1015b1b:	jne    0x1015b62
 1015b1d:	lea    rcx,[rip+0x66e4]        # 0x101c208
 1015b24:	call   0x1012fd0
 1015b29:	test   eax,eax
 1015b2b:	je     0x1015b62
 1015b2d:	lea    rcx,[rip+0x66e4]        # 0x101c218
 1015b34:	xor    edx,edx
 1015b36:	mov    r8d,0x1b60
 1015b3c:	call   0x100dcba
 1015b41:	lea    rcx,[rip+0x66d0]        # 0x101c218
 1015b48:	call   0x1012530
 1015b4d:	lea    rcx,[rip+0x66b4]        # 0x101c208
 1015b54:	xor    edx,edx
 1015b56:	mov    QWORD PTR [rip+0x66b3],rax        # 0x101c210
 1015b5d:	call   0x1013030
 1015b62:	lea    rcx,[rip+0x669f]        # 0x101c208
 1015b69:	mov    QWORD PTR [rsp+0x30],rbx
 1015b6e:	call   0x1012d90
 1015b73:	test   eax,eax
 1015b75:	mov    edi,eax
 1015b77:	js     0x1015b8b
 1015b79:	mov    rbx,QWORD PTR [rip+0x6690]        # 0x101c210
 1015b80:	mov    rcx,rbx
 1015b83:	mov    rax,QWORD PTR [rbx]
 1015b86:	call   QWORD PTR [rax+0x8]
 1015b89:	jmp    0x1015b8d
 1015b8b:	xor    ebx,ebx
 1015b8d:	test   edi,edi
 1015b8f:	jne    0x1015ba7
 1015b91:	mov    rdx,rsi
 1015b94:	mov    rcx,rbx
 1015b97:	call   0x1011c80
 1015b9c:	mov    rdx,QWORD PTR [rbx]
 1015b9f:	mov    rcx,rbx
 1015ba2:	mov    edi,eax
 1015ba4:	call   QWORD PTR [rdx+0x10]
 1015ba7:	xor    edx,edx
 1015ba9:	mov    r8d,0x8000
 1015baf:	mov    rcx,rsi
 1015bb2:	call   QWORD PTR [rip+0xfffffffffffeb7e0]        # 0x1001398
 1015bb8:	mov    rbx,QWORD PTR [rsp+0x30]
 1015bbd:	mov    rsi,QWORD PTR [rsp+0x38]
 1015bc2:	mov    eax,edi
 1015bc4:	add    rsp,0x20
 1015bc8:	pop    rdi
 1015bc9:	ret    
 1015bca:	int3   
 1015bcb:	int3   
 1015bcc:	int3   
 1015bcd:	int3   
 1015bce:	int3   
 1015bcf:	int3   
 1015bd0:	int3   
 1015bd1:	int3   
 1015bd2:	int3   
 1015bd3:	int3   
 1015bd4:	int3   
 1015bd5:	int3   
 1015bd6:	int3   
 1015bd7:	int3   
 1015bd8:	int3   
 1015bd9:	int3   
 1015bda:	int3   
 1015bdb:	int3   
 1015bdc:	int3   
 1015bdd:	int3   
 1015bde:	int3   
 1015bdf:	int3   
 1015be0:	rex push rbp
 1015be2:	sub    rsp,0x40
 1015be6:	mov    rbp,rdx
 1015be9:	mov    rcx,QWORD PTR [rbp+0x40]
 1015bed:	mov    rax,QWORD PTR [rcx]
 1015bf0:	call   QWORD PTR [rax+0x10]
 1015bf3:	mov    rcx,QWORD PTR [rbp+0x48]
 1015bf7:	test   rcx,rcx
 1015bfa:	je     0x1015c0a
 1015bfc:	call   QWORD PTR [rip+0xfffffffffffeb9d6]        # 0x10015d8
 1015c02:	mov    QWORD PTR [rbp+0x48],0x0
 1015c0a:	mov    rcx,QWORD PTR [rip+0x56d7]        # 0x101b2e8
 1015c11:	call   QWORD PTR [rip+0xfffffffffffeb719]        # 0x1001330
 1015c17:	mov    QWORD PTR [rip+0x56c6],0x0        # 0x101b2e8
 1015c22:	lea    rcx,[rip+0x56c7]        # 0x101b2f0
 1015c29:	call   QWORD PTR [rip+0xfffffffffffeb709]        # 0x1001338
 1015c2f:	nop
 1015c30:	add    rsp,0x40
 1015c34:	pop    rbp
 1015c35:	ret    
 1015c36:	int3   
 1015c37:	int3   
 1015c38:	int3   
 1015c39:	int3   
 1015c3a:	int3   
 1015c3b:	int3   
 1015c3c:	int3   
 1015c3d:	int3   
 1015c3e:	int3   
 1015c3f:	int3   
 1015c40:	lea    rcx,[rdx+0xa0]
 1015c47:	rex.W jmp QWORD PTR [rip+0xfffffffffffeb40a]        # 0x1001058
 1015c4e:	int3   
 1015c4f:	int3   
 1015c50:	int3   
 1015c51:	int3   
 1015c52:	int3   
 1015c53:	int3   
 1015c54:	int3   
 1015c55:	int3   
 1015c56:	int3   
 1015c57:	int3   
 1015c58:	int3   
 1015c59:	int3   
 1015c5a:	int3   
 1015c5b:	int3   
 1015c5c:	int3   
 1015c5d:	int3   
 1015c5e:	int3   
 1015c5f:	int3   
 1015c60:	lea    rcx,[rdx+0x88]
 1015c67:	jmp    0x1004fa0
 1015c6c:	int3   
 1015c6d:	int3   
 1015c6e:	int3   
 1015c6f:	int3   
 1015c70:	lea    rcx,[rdx+0x80]
 1015c77:	jmp    0x1004fa0
 1015c7c:	int3   
 1015c7d:	int3   
 1015c7e:	int3   
 1015c7f:	int3   
 1015c80:	lea    rcx,[rdx+0x70]
 1015c87:	jmp    0x10059e0
 1015c8c:	int3   
 1015c8d:	int3   
 1015c8e:	int3   
 1015c8f:	int3   
 1015c90:	lea    rcx,[rdx+0x70]
 1015c97:	jmp    0x1005d50
 1015c9c:	int3   
 1015c9d:	int3   
 1015c9e:	int3   
 1015c9f:	int3   
 1015ca0:	lea    rcx,[rdx+0x78]
 1015ca7:	jmp    0x10059e0
 1015cac:	int3   
 1015cad:	int3   
 1015cae:	int3   
 1015caf:	int3   
 1015cb0:	lea    rcx,[rdx+0x78]
 1015cb7:	jmp    0x1005d50
 1015cbc:	int3   
 1015cbd:	int3   
 1015cbe:	int3   
 1015cbf:	int3   
 1015cc0:	mov    QWORD PTR [rsp+0x10],rdx
 1015cc5:	push   rbp
 1015cc6:	sub    rsp,0x20
 1015cca:	mov    rbp,rdx
 1015ccd:	mov    edx,DWORD PTR [rbp+0x20]
 1015cd0:	mov    ecx,0x8c
 1015cd5:	call   0x100e600
 1015cda:	nop
 1015cdb:	lea    rax,[rip+0xffffffffffff1a76]        # 0x1007758
 1015ce2:	add    rsp,0x20
 1015ce6:	pop    rbp
 1015ce7:	ret    
 1015ce8:	int3   
 1015ce9:	int3   
 1015cea:	int3   
 1015ceb:	int3   
 1015cec:	int3   
 1015ced:	int3   
 1015cee:	int3   
 1015cef:	int3   
 1015cf0:	mov    QWORD PTR [rsp+0x10],rdx
 1015cf5:	push   rbp
 1015cf6:	sub    rsp,0x20
 1015cfa:	mov    rbp,rdx
 1015cfd:	mov    rdx,QWORD PTR [rbp+0x78]
 1015d01:	mov    QWORD PTR [rbp+0x78],rdx
 1015d05:	inc    rdx
 1015d08:	mov    rcx,QWORD PTR [rbp+0x70]
 1015d0c:	add    rcx,0x20
 1015d10:	call   0x1005f50
 1015d15:	mov    QWORD PTR [rbp+0x88],rax
 1015d1c:	lea    rax,[rip+0xffffffffffff079b]        # 0x10064be
 1015d23:	add    rsp,0x20
 1015d27:	pop    rbp
 1015d28:	ret    
 1015d29:	int3   
 1015d2a:	int3   
 1015d2b:	int3   
 1015d2c:	int3   
 1015d2d:	int3   
 1015d2e:	int3   
 1015d2f:	int3   
 1015d30:	mov    QWORD PTR [rsp+0x10],rdx
 1015d35:	push   rbx
 1015d36:	push   rbp
 1015d37:	sub    rsp,0x28
 1015d3b:	mov    rbp,rdx
 1015d3e:	mov    rbx,QWORD PTR [rbp+0x70]
 1015d42:	cmp    QWORD PTR [rbx+0x18],0x8
 1015d47:	jb     0x1015d51
 1015d49:	mov    rcx,QWORD PTR [rbx]
 1015d4c:	call   0x100d814
 1015d51:	mov    QWORD PTR [rbx+0x18],0x7
 1015d59:	mov    QWORD PTR [rbx+0x10],0x0
 1015d61:	xor    eax,eax
 1015d63:	mov    WORD PTR [rbx],ax
 1015d66:	xor    edx,edx
 1015d68:	xor    ecx,ecx
 1015d6a:	call   0x100da3c
 1015d6f:	nop
 1015d70:	int3   
 1015d71:	int3   
 1015d72:	int3   
 1015d73:	int3   
 1015d74:	int3   
 1015d75:	int3   
 1015d76:	int3   
 1015d77:	int3   
 1015d78:	int3   
 1015d79:	int3   
 1015d7a:	int3   
 1015d7b:	int3   
 1015d7c:	int3   
 1015d7d:	int3   
 1015d7e:	int3   
 1015d7f:	int3   
 1015d80:	rex push rbp
 1015d82:	sub    rsp,0x20
 1015d86:	mov    rbp,rdx
 1015d89:	mov    eax,DWORD PTR [rbp+0x20]
 1015d8c:	and    eax,0x1
 1015d8f:	test   eax,eax
 1015d91:	je     0x1015da0
 1015d93:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1015d97:	mov    rcx,QWORD PTR [rbp+0x48]
 1015d9b:	call   0x1006060
 1015da0:	add    rsp,0x20
 1015da4:	pop    rbp
 1015da5:	ret    
 1015da6:	int3   
 1015da7:	int3   
 1015da8:	int3   
 1015da9:	int3   
 1015daa:	int3   
 1015dab:	int3   
 1015dac:	int3   
 1015dad:	int3   
 1015dae:	int3   
 1015daf:	int3   
 1015db0:	lea    rcx,[rdx+0x80]
 1015db7:	jmp    0x1006060
 1015dbc:	int3   
 1015dbd:	int3   
 1015dbe:	int3   
 1015dbf:	int3   
 1015dc0:	lea    rcx,[rdx+0x58]
 1015dc7:	jmp    0x1006060
 1015dcc:	int3   
 1015dcd:	int3   
 1015dce:	int3   
 1015dcf:	int3   
 1015dd0:	lea    rcx,[rdx+0xa8]
 1015dd7:	jmp    0x1006060
 1015ddc:	int3   
 1015ddd:	int3   
 1015dde:	int3   
 1015ddf:	int3   
 1015de0:	lea    rcx,[rdx+0xf8]
 1015de7:	jmp    0x1006060
 1015dec:	int3   
 1015ded:	int3   
 1015dee:	int3   
 1015def:	int3   
 1015df0:	lea    rcx,[rdx+0xd0]
 1015df7:	jmp    0x1006060
 1015dfc:	int3   
 1015dfd:	int3   
 1015dfe:	int3   
 1015dff:	int3   
 1015e00:	lea    rcx,[rdx+0xa8]
 1015e07:	jmp    0x1006060
 1015e0c:	int3   
 1015e0d:	int3   
 1015e0e:	int3   
 1015e0f:	int3   
 1015e10:	int3   
 1015e11:	int3   
 1015e12:	int3   
 1015e13:	int3   
 1015e14:	int3   
 1015e15:	int3   
 1015e16:	int3   
 1015e17:	int3   
 1015e18:	int3   
 1015e19:	int3   
 1015e1a:	int3   
 1015e1b:	int3   
 1015e1c:	int3   
 1015e1d:	int3   
 1015e1e:	int3   
 1015e1f:	int3   
 1015e20:	rex push rbp
 1015e22:	sub    rsp,0x20
 1015e26:	mov    rbp,rdx
 1015e29:	mov    rdx,QWORD PTR [rbp+0x70]
 1015e2d:	mov    rcx,QWORD PTR [rbp+0x68]
 1015e31:	call   0x1007db0
 1015e36:	add    rsp,0x20
 1015e3a:	pop    rbp
 1015e3b:	ret    
 1015e3c:	int3   
 1015e3d:	int3   
 1015e3e:	int3   
 1015e3f:	int3   
 1015e40:	mov    QWORD PTR [rsp+0x10],rdx
 1015e45:	push   rbx
 1015e46:	push   rbp
 1015e47:	push   rsi
 1015e48:	push   rdi
 1015e49:	sub    rsp,0x28
 1015e4d:	mov    rbp,rdx
 1015e50:	mov    rbx,QWORD PTR [rbp+0x60]
 1015e54:	mov    rdi,QWORD PTR [rbp+0x70]
 1015e58:	cmp    rbx,rdi
 1015e5b:	je     0x1015e75
 1015e5d:	mov    rsi,QWORD PTR [rbp+0x78]
 1015e61:	mov    rdx,rbx
 1015e64:	mov    rcx,rsi
 1015e67:	call   0x1009ad0
 1015e6c:	add    rbx,0x28
 1015e70:	cmp    rbx,rdi
 1015e73:	jne    0x1015e61
 1015e75:	xor    edx,edx
 1015e77:	xor    ecx,ecx
 1015e79:	call   0x100da3c
 1015e7e:	nop
 1015e7f:	int3   
 1015e80:	int3   
 1015e81:	int3   
 1015e82:	int3   
 1015e83:	int3   
 1015e84:	int3   
 1015e85:	int3   
 1015e86:	int3   
 1015e87:	int3   
 1015e88:	int3   
 1015e89:	int3   
 1015e8a:	int3   
 1015e8b:	int3   
 1015e8c:	int3   
 1015e8d:	int3   
 1015e8e:	int3   
 1015e8f:	int3   
 1015e90:	lea    rcx,[rdx+0x138]
 1015e97:	jmp    0x10095e0
 1015e9c:	int3   
 1015e9d:	int3   
 1015e9e:	int3   
 1015e9f:	int3   
 1015ea0:	lea    rcx,[rdx+0x48]
 1015ea7:	jmp    0x1004fa0
 1015eac:	int3   
 1015ead:	int3   
 1015eae:	int3   
 1015eaf:	int3   
 1015eb0:	lea    rcx,[rdx+0x50]
 1015eb7:	jmp    0x1004fa0
 1015ebc:	int3   
 1015ebd:	int3   
 1015ebe:	int3   
 1015ebf:	int3   
 1015ec0:	lea    rcx,[rdx+0x68]
 1015ec7:	jmp    0x1004fa0
 1015ecc:	int3   
 1015ecd:	int3   
 1015ece:	int3   
 1015ecf:	int3   
 1015ed0:	lea    rcx,[rdx+0x58]
 1015ed7:	jmp    0x1004fa0
 1015edc:	int3   
 1015edd:	int3   
 1015ede:	int3   
 1015edf:	int3   
 1015ee0:	lea    rcx,[rdx+0x70]
 1015ee7:	jmp    0x1004fa0
 1015eec:	int3   
 1015eed:	int3   
 1015eee:	int3   
 1015eef:	int3   
 1015ef0:	lea    rcx,[rdx+0x60]
 1015ef7:	jmp    0x1004fa0
 1015efc:	int3   
 1015efd:	int3   
 1015efe:	int3   
 1015eff:	int3   
 1015f00:	mov    QWORD PTR [rsp+0x10],rdx
 1015f05:	push   rbp
 1015f06:	sub    rsp,0x40
 1015f0a:	mov    rbp,rdx
 1015f0d:	mov    DWORD PTR [rbp+0x130],0x0
 1015f17:	mov    ecx,0x7b
 1015f1c:	call   0x100e600
 1015f21:	nop
 1015f22:	lea    rax,[rip+0xffffffffffff35f7]        # 0x1009520
 1015f29:	add    rsp,0x40
 1015f2d:	pop    rbp
 1015f2e:	ret    
 1015f2f:	int3   
 1015f30:	int3   
 1015f31:	int3   
 1015f32:	int3   
 1015f33:	int3   
 1015f34:	int3   
 1015f35:	int3   
 1015f36:	int3   
 1015f37:	int3   
 1015f38:	int3   
 1015f39:	int3   
 1015f3a:	int3   
 1015f3b:	int3   
 1015f3c:	int3   
 1015f3d:	int3   
 1015f3e:	int3   
 1015f3f:	int3   
 1015f40:	mov    QWORD PTR [rsp+0x10],rdx
 1015f45:	push   rbp
 1015f46:	sub    rsp,0x30
 1015f4a:	mov    rbp,rdx
 1015f4d:	mov    rcx,QWORD PTR [rbp+0x68]
 1015f51:	call   0x100d814
 1015f56:	xor    edx,edx
 1015f58:	xor    ecx,ecx
 1015f5a:	call   0x100da3c
 1015f5f:	nop
 1015f60:	int3   
 1015f61:	int3   
 1015f62:	int3   
 1015f63:	int3   
 1015f64:	int3   
 1015f65:	int3   
 1015f66:	int3   
 1015f67:	int3   
 1015f68:	int3   
 1015f69:	int3   
 1015f6a:	int3   
 1015f6b:	int3   
 1015f6c:	int3   
 1015f6d:	int3   
 1015f6e:	int3   
 1015f6f:	int3   
 1015f70:	lea    rcx,[rdx+0x80]
 1015f77:	jmp    0x1009670
 1015f7c:	int3   
 1015f7d:	int3   
 1015f7e:	int3   
 1015f7f:	int3   
 1015f80:	lea    rcx,[rdx+0x110]
 1015f87:	jmp    0x1006060
 1015f8c:	int3   
 1015f8d:	int3   
 1015f8e:	int3   
 1015f8f:	int3   
 1015f90:	int3   
 1015f91:	int3   
 1015f92:	int3   
 1015f93:	int3   
 1015f94:	int3   
 1015f95:	int3   
 1015f96:	int3   
 1015f97:	int3   
 1015f98:	int3   
 1015f99:	int3   
 1015f9a:	int3   
 1015f9b:	int3   
 1015f9c:	int3   
 1015f9d:	int3   
 1015f9e:	int3   
 1015f9f:	int3   
 1015fa0:	rex push rbp
 1015fa2:	sub    rsp,0x20
 1015fa6:	mov    rbp,rdx
 1015fa9:	mov    rdx,QWORD PTR [rbp+0x40]
 1015fad:	mov    rcx,QWORD PTR [rbp+0x48]
 1015fb1:	call   0x1007db0
 1015fb6:	add    rsp,0x20
 1015fba:	pop    rbp
 1015fbb:	ret    
 1015fbc:	int3   
 1015fbd:	int3   
 1015fbe:	int3   
 1015fbf:	int3   
 1015fc0:	rex push rbp
 1015fc2:	sub    rsp,0x20
 1015fc6:	mov    rbp,rdx
 1015fc9:	mov    rdx,QWORD PTR [rbp+0x40]
 1015fcd:	mov    rcx,QWORD PTR [rbp+0x48]
 1015fd1:	call   0x1007db0
 1015fd6:	add    rsp,0x20
 1015fda:	pop    rbp
 1015fdb:	ret    
 1015fdc:	int3   
 1015fdd:	int3   
 1015fde:	int3   
 1015fdf:	int3   
 1015fe0:	int3   
 1015fe1:	int3   
 1015fe2:	int3   
 1015fe3:	int3   
 1015fe4:	int3   
 1015fe5:	int3   
 1015fe6:	int3   
 1015fe7:	int3   
 1015fe8:	int3   
 1015fe9:	int3   
 1015fea:	int3   
 1015feb:	int3   
 1015fec:	int3   
 1015fed:	int3   
 1015fee:	int3   
 1015fef:	int3   
 1015ff0:	lea    rcx,[rdx+0x50]
 1015ff7:	jmp    0x1004fa0
 1015ffc:	int3   
 1015ffd:	int3   
 1015ffe:	int3   
 1015fff:	int3   
 1016000:	lea    rcx,[rdx+0xd8]
 1016007:	jmp    0x1004fa0
 101600c:	int3   
 101600d:	int3   
 101600e:	int3   
 101600f:	int3   
 1016010:	lea    rcx,[rdx+0x68]
 1016017:	jmp    0x100a250
 101601c:	int3   
 101601d:	int3   
 101601e:	int3   
 101601f:	int3   
 1016020:	lea    rcx,[rdx+0xb8]
 1016027:	jmp    0x100a250
 101602c:	int3   
 101602d:	int3   
 101602e:	int3   
 101602f:	int3   
 1016030:	lea    rcx,[rdx+0x40]
 1016037:	jmp    0x1004fa0
 101603c:	int3   
 101603d:	int3   
 101603e:	int3   
 101603f:	int3   
 1016040:	lea    rcx,[rdx+0x48]
 1016047:	jmp    0x1004fa0
 101604c:	int3   
 101604d:	int3   
 101604e:	int3   
 101604f:	int3   
 1016050:	lea    rcx,[rdx+0x48]
 1016057:	jmp    0x1004fa0
 101605c:	int3   
 101605d:	int3   
 101605e:	int3   
 101605f:	int3   
 1016060:	lea    rcx,[rdx+0x48]
 1016067:	jmp    0x1004fa0
 101606c:	int3   
 101606d:	int3   
 101606e:	int3   
 101606f:	int3   
 1016070:	lea    rcx,[rdx+0x48]
 1016077:	jmp    0x1004fa0
 101607c:	int3   
 101607d:	int3   
 101607e:	int3   
 101607f:	int3   
 1016080:	lea    rcx,[rdx+0x48]
 1016087:	jmp    0x1004fa0
 101608c:	int3   
 101608d:	int3   
 101608e:	int3   
 101608f:	int3   
 1016090:	lea    rcx,[rdx+0x48]
 1016097:	jmp    0x1004fa0
 101609c:	int3   
 101609d:	int3   
 101609e:	int3   
 101609f:	int3   
 10160a0:	mov    QWORD PTR [rsp+0x10],rdx
 10160a5:	push   rbp
 10160a6:	sub    rsp,0x40
 10160aa:	mov    rbp,rdx
 10160ad:	mov    eax,DWORD PTR [rbp+0xb0]
 10160b3:	mov    DWORD PTR [rbp+0x50],eax
 10160b6:	lea    rax,[rip+0xffffffffffff5238]        # 0x100b2f5
 10160bd:	add    rsp,0x40
 10160c1:	pop    rbp
 10160c2:	ret    
 10160c3:	int3   
 10160c4:	int3   
 10160c5:	int3   
 10160c6:	int3   
 10160c7:	int3   
 10160c8:	int3   
 10160c9:	int3   
 10160ca:	int3   
 10160cb:	int3   
 10160cc:	int3   
 10160cd:	int3   
 10160ce:	int3   
 10160cf:	int3   
 10160d0:	lea    rcx,[rdx+0xd8]
 10160d7:	jmp    0x10095e0
 10160dc:	int3   
 10160dd:	int3   
 10160de:	int3   
 10160df:	int3   
 10160e0:	int3   
 10160e1:	int3   
 10160e2:	int3   
 10160e3:	int3   
 10160e4:	int3   
 10160e5:	int3   
 10160e6:	int3   
 10160e7:	int3   
 10160e8:	int3   
 10160e9:	int3   
 10160ea:	int3   
 10160eb:	int3   
 10160ec:	int3   
 10160ed:	int3   
 10160ee:	int3   
 10160ef:	int3   
 10160f0:	lea    rcx,[rdx+0xa0]
 10160f7:	jmp    0x1004fa0
 10160fc:	int3   
 10160fd:	int3   
 10160fe:	int3   
 10160ff:	int3   
 1016100:	lea    rcx,[rdx+0x60]
 1016107:	jmp    0x100a250
 101610c:	int3   
 101610d:	int3   
 101610e:	int3   
 101610f:	int3   
 1016110:	lea    rcx,[rdx+0x80]
 1016117:	jmp    0x100a250
 101611c:	int3   
 101611d:	int3   
 101611e:	int3   
 101611f:	int3   
 1016120:	int3   
 1016121:	int3   
 1016122:	int3   
 1016123:	int3   
 1016124:	int3   
 1016125:	int3   
 1016126:	int3   
 1016127:	int3   
 1016128:	int3   
 1016129:	int3   
 101612a:	int3   
 101612b:	int3   
 101612c:	int3   
 101612d:	int3   
 101612e:	int3   
 101612f:	int3   
 1016130:	lea    rcx,[rdx+0x80]
 1016137:	jmp    0x1004fa0
 101613c:	int3   
 101613d:	int3   
 101613e:	int3   
 101613f:	int3   
 1016140:	lea    rcx,[rdx+0x60]
 1016147:	jmp    0x100b640
 101614c:	int3   
 101614d:	int3   
 101614e:	int3   
 101614f:	int3   
 1016150:	int3   
 1016151:	int3   
 1016152:	int3   
 1016153:	int3   
 1016154:	int3   
 1016155:	int3   
 1016156:	int3   
 1016157:	int3   
 1016158:	int3   
 1016159:	int3   
 101615a:	int3   
 101615b:	int3   
 101615c:	int3   
 101615d:	int3   
 101615e:	int3   
 101615f:	int3   
 1016160:	lea    rcx,[rdx+0x40]
 1016167:	jmp    0x10095e0
 101616c:	int3   
 101616d:	int3   
 101616e:	int3   
 101616f:	int3   
 1016170:	int3   
 1016171:	int3   
 1016172:	int3   
 1016173:	int3   
 1016174:	int3   
 1016175:	int3   
 1016176:	int3   
 1016177:	int3   
 1016178:	int3   
 1016179:	int3   
 101617a:	int3   
 101617b:	int3   
 101617c:	int3   
 101617d:	int3   
 101617e:	int3   
 101617f:	int3   
 1016180:	lea    rcx,[rdx+0x88]
 1016187:	jmp    0x100b640
 101618c:	int3   
 101618d:	int3   
 101618e:	int3   
 101618f:	int3   
 1016190:	int3   
 1016191:	int3   
 1016192:	int3   
 1016193:	int3   
 1016194:	int3   
 1016195:	int3   
 1016196:	int3   
 1016197:	int3   
 1016198:	int3   
 1016199:	int3   
 101619a:	int3   
 101619b:	int3   
 101619c:	int3   
 101619d:	int3   
 101619e:	int3   
 101619f:	int3   
 10161a0:	lea    rcx,[rdx+0xd0]
 10161a7:	jmp    0x1004fa0
 10161ac:	int3   
 10161ad:	int3   
 10161ae:	int3   
 10161af:	int3   
 10161b0:	lea    rcx,[rdx+0x38]
 10161b7:	jmp    0x1004fa0
 10161bc:	int3   
 10161bd:	int3   
 10161be:	int3   
 10161bf:	int3   
 10161c0:	mov    QWORD PTR [rsp+0x10],rdx
 10161c5:	push   rbp
 10161c6:	sub    rsp,0x30
 10161ca:	mov    rbp,rdx
 10161cd:	mov    eax,DWORD PTR [rbp+0x30]
 10161d0:	mov    DWORD PTR [rbp+0xd0],eax
 10161d6:	mov    ecx,0x7b
 10161db:	call   0x100e600
 10161e0:	nop
 10161e1:	lea    rax,[rip+0xffffffffffff67f3]        # 0x100c9db
 10161e8:	add    rsp,0x30
 10161ec:	pop    rbp
 10161ed:	ret    
 10161ee:	int3   
 10161ef:	int3   
 10161f0:	int3   
 10161f1:	int3   
 10161f2:	int3   
 10161f3:	int3   
 10161f4:	int3   
 10161f5:	int3   
 10161f6:	int3   
 10161f7:	int3   
 10161f8:	int3   
 10161f9:	int3   
 10161fa:	int3   
 10161fb:	int3   
 10161fc:	int3   
 10161fd:	int3   
 10161fe:	int3   
 10161ff:	int3   
 1016200:	lea    rcx,[rdx+0x60]
 1016207:	jmp    0x1004fa0
 101620c:	int3   
 101620d:	int3   
 101620e:	int3   
 101620f:	int3   
 1016210:	mov    QWORD PTR [rsp+0x10],rdx
 1016215:	push   rbp
 1016216:	sub    rsp,0x30
 101621a:	mov    rbp,rdx
 101621d:	mov    eax,DWORD PTR [rbp+0x30]
 1016220:	mov    DWORD PTR [rbp+0x60],eax
 1016223:	mov    ecx,0x7b
 1016228:	call   0x100e600
 101622d:	nop
 101622e:	lea    rax,[rip+0xffffffffffff633b]        # 0x100c570
 1016235:	add    rsp,0x30
 1016239:	pop    rbp
 101623a:	ret    
 101623b:	int3   
 101623c:	int3   
 101623d:	int3   
 101623e:	int3   
 101623f:	int3   
 1016240:	int3   
 1016241:	int3   
 1016242:	int3   
 1016243:	int3   
 1016244:	int3   
 1016245:	int3   
 1016246:	int3   
 1016247:	int3   
 1016248:	int3   
 1016249:	int3   
 101624a:	int3   
 101624b:	int3   
 101624c:	int3   
 101624d:	int3   
 101624e:	int3   
 101624f:	int3   
 1016250:	lea    rcx,[rdx+0x50]
 1016257:	jmp    0x1004fa0
 101625c:	int3   
 101625d:	int3   
 101625e:	int3   
 101625f:	int3   
 1016260:	lea    rcx,[rdx+0x58]
 1016267:	jmp    0x1004fa0
 101626c:	int3   
 101626d:	int3   
 101626e:	int3   
 101626f:	int3   
 1016270:	lea    rcx,[rdx+0x40]
 1016277:	jmp    0x1004fa0
 101627c:	int3   
 101627d:	int3   
 101627e:	int3   
 101627f:	int3   
 1016280:	lea    rcx,[rdx+0x48]
 1016287:	jmp    0x1004fa0
 101628c:	int3   
 101628d:	int3   
 101628e:	int3   
 101628f:	int3   
 1016290:	mov    QWORD PTR [rsp+0x10],rdx
 1016295:	push   rbp
 1016296:	sub    rsp,0x40
 101629a:	mov    rbp,rdx
 101629d:	mov    eax,DWORD PTR [rbp+0x88]
 10162a3:	mov    DWORD PTR [rbp+0x110],eax
 10162a9:	mov    ecx,0x7b
 10162ae:	call   0x100e600
 10162b3:	nop
 10162b4:	lea    rax,[rip+0xffffffffffff657f]        # 0x100c83a
 10162bb:	add    rsp,0x40
 10162bf:	pop    rbp
 10162c0:	ret    
 10162c1:	int3   
 10162c2:	int3   
 10162c3:	int3   
 10162c4:	int3   
 10162c5:	int3   
 10162c6:	int3   
 10162c7:	int3   
 10162c8:	int3   
 10162c9:	int3   
 10162ca:	int3   
 10162cb:	int3   
 10162cc:	int3   
 10162cd:	int3   
 10162ce:	int3   
 10162cf:	int3   
 10162d0:	lea    rcx,[rdx+0xa8]
 10162d7:	jmp    0x10095e0
 10162dc:	int3   
 10162dd:	int3   
 10162de:	int3   
 10162df:	int3   
 10162e0:	lea    rcx,[rdx+0x38]
 10162e7:	jmp    0x1004fa0
 10162ec:	int3   
 10162ed:	int3   
 10162ee:	int3   
 10162ef:	int3   
 10162f0:	mov    QWORD PTR [rsp+0x10],rdx
 10162f5:	push   rbp
 10162f6:	sub    rsp,0x30
 10162fa:	mov    rbp,rdx
 10162fd:	lea    rax,[rip+0xffffffffffff6130]        # 0x100c434
 1016304:	add    rsp,0x30
 1016308:	pop    rbp
 1016309:	ret    
 101630a:	int3   
 101630b:	int3   
 101630c:	int3   
 101630d:	int3   
 101630e:	int3   
 101630f:	int3   
 1016310:	int3   
 1016311:	int3   
 1016312:	int3   
 1016313:	int3   
 1016314:	int3   
 1016315:	int3   
 1016316:	int3   
 1016317:	int3   
 1016318:	int3   
 1016319:	int3   
 101631a:	int3   
 101631b:	int3   
 101631c:	int3   
 101631d:	int3   
 101631e:	int3   
 101631f:	int3   
 1016320:	lea    rcx,[rdx+0xa0]
 1016327:	jmp    0x10095e0
 101632c:	int3   
 101632d:	int3   
 101632e:	int3   
 101632f:	int3   
 1016330:	lea    rcx,[rdx+0x38]
 1016337:	jmp    0x1004fa0
 101633c:	int3   
 101633d:	int3   
 101633e:	int3   
 101633f:	int3   
 1016340:	mov    QWORD PTR [rsp+0x10],rdx
 1016345:	push   rbp
 1016346:	push   rdi
 1016347:	sub    rsp,0x38
 101634b:	mov    rbp,rdx
 101634e:	mov    rdi,QWORD PTR [rbp+0x38]
 1016352:	mov    rcx,rdi
 1016355:	call   QWORD PTR [rip+0xfffffffffffeb285]        # 0x10015e0
 101635b:	mov    ecx,eax
 101635d:	add    rcx,rcx
 1016360:	xor    eax,eax
 1016362:	rep stos BYTE PTR es:[rdi],al
 1016364:	lea    rax,[rip+0xffffffffffff6915]        # 0x100cc80
 101636b:	add    rsp,0x38
 101636f:	pop    rdi
 1016370:	pop    rbp
 1016371:	ret    
 1016372:	int3   
 1016373:	int3   
 1016374:	int3   
 1016375:	int3   
 1016376:	int3   
 1016377:	int3   
 1016378:	int3   
 1016379:	int3   
 101637a:	int3   
 101637b:	int3   
 101637c:	int3   
 101637d:	int3   
 101637e:	int3   
 101637f:	int3   
 1016380:	lea    rcx,[rdx+0xd0]
 1016387:	jmp    0x1004fa0
 101638c:	int3   
 101638d:	int3   
 101638e:	int3   
 101638f:	int3   
 1016390:	lea    rcx,[rdx+0x38]
 1016397:	jmp    0x1004fa0
 101639c:	int3   
 101639d:	int3   
 101639e:	int3   
 101639f:	int3   
 10163a0:	mov    QWORD PTR [rsp+0x10],rdx
 10163a5:	push   rbp
 10163a6:	sub    rsp,0x30
 10163aa:	mov    rbp,rdx
 10163ad:	mov    eax,DWORD PTR [rbp+0x30]
 10163b0:	mov    DWORD PTR [rbp+0xd0],eax
 10163b6:	mov    ecx,0x7b
 10163bb:	call   0x100e600
 10163c0:	nop
 10163c1:	lea    rax,[rip+0xffffffffffff6e8e]        # 0x100d256
 10163c8:	add    rsp,0x30
 10163cc:	pop    rbp
 10163cd:	ret    
 10163ce:	int3   
 10163cf:	int3   
 10163d0:	int3   
 10163d1:	int3   
 10163d2:	int3   
 10163d3:	int3   
 10163d4:	int3   
 10163d5:	int3   
 10163d6:	int3   
 10163d7:	int3   
 10163d8:	int3   
 10163d9:	int3   
 10163da:	int3   
 10163db:	int3   
 10163dc:	int3   
 10163dd:	int3   
 10163de:	int3   
 10163df:	int3   
 10163e0:	lea    rcx,[rdx+0x60]
 10163e7:	jmp    0x1004fa0
 10163ec:	int3   
 10163ed:	int3   
 10163ee:	int3   
 10163ef:	int3   
 10163f0:	mov    QWORD PTR [rsp+0x10],rdx
 10163f5:	push   rbp
 10163f6:	sub    rsp,0x20
 10163fa:	mov    rbp,rdx
 10163fd:	mov    eax,DWORD PTR [rbp+0x20]
 1016400:	mov    DWORD PTR [rbp+0x60],eax
 1016403:	mov    ecx,0x7b
 1016408:	call   0x100e600
 101640d:	nop
 101640e:	lea    rax,[rip+0xffffffffffff69e3]        # 0x100cdf8
 1016415:	add    rsp,0x20
 1016419:	pop    rbp
 101641a:	ret    
 101641b:	int3   
 101641c:	int3   
 101641d:	int3   
 101641e:	int3   
 101641f:	int3   
 1016420:	int3   
 1016421:	int3   
 1016422:	int3   
 1016423:	int3   
 1016424:	int3   
 1016425:	int3   
 1016426:	int3   
 1016427:	int3   
 1016428:	int3   
 1016429:	int3   
 101642a:	int3   
 101642b:	int3   
 101642c:	int3   
 101642d:	int3   
 101642e:	int3   
 101642f:	int3   
 1016430:	lea    rcx,[rdx+0x50]
 1016437:	jmp    0x1004fa0
 101643c:	int3   
 101643d:	int3   
 101643e:	int3   
 101643f:	int3   
 1016440:	lea    rcx,[rdx+0x58]
 1016447:	jmp    0x1004fa0
 101644c:	int3   
 101644d:	int3   
 101644e:	int3   
 101644f:	int3   
 1016450:	lea    rcx,[rdx+0x40]
 1016457:	jmp    0x1004fa0
 101645c:	int3   
 101645d:	int3   
 101645e:	int3   
 101645f:	int3   
 1016460:	lea    rcx,[rdx+0x48]
 1016467:	jmp    0x1004fa0
 101646c:	int3   
 101646d:	int3   
 101646e:	int3   
 101646f:	int3   
 1016470:	mov    QWORD PTR [rsp+0x10],rdx
 1016475:	push   rbp
 1016476:	sub    rsp,0x40
 101647a:	mov    rbp,rdx
 101647d:	mov    eax,DWORD PTR [rbp+0x88]
 1016483:	mov    DWORD PTR [rbp+0x110],eax
 1016489:	mov    ecx,0x7b
 101648e:	call   0x100e600
 1016493:	nop
 1016494:	lea    rax,[rip+0xffffffffffff6c21]        # 0x100d0bc
 101649b:	add    rsp,0x40
 101649f:	pop    rbp
 10164a0:	ret    
 10164a1:	int3   
 10164a2:	int3   
 10164a3:	int3   
 10164a4:	int3   
 10164a5:	int3   
 10164a6:	int3   
 10164a7:	int3   
 10164a8:	int3   
 10164a9:	int3   
 10164aa:	int3   
 10164ab:	int3   
 10164ac:	int3   
 10164ad:	int3   
 10164ae:	int3   
 10164af:	int3   
 10164b0:	lea    rcx,[rdx+0x40]
 10164b7:	jmp    0x10095e0
 10164bc:	int3   
 10164bd:	int3   
 10164be:	int3   
 10164bf:	int3   
 10164c0:	int3   
 10164c1:	int3   
 10164c2:	int3   
 10164c3:	int3   
 10164c4:	int3   
 10164c5:	int3   
 10164c6:	int3   
 10164c7:	int3   
 10164c8:	int3   
 10164c9:	int3   
 10164ca:	int3   
 10164cb:	int3   
 10164cc:	int3   
 10164cd:	int3   
 10164ce:	int3   
 10164cf:	int3   
 10164d0:	lea    rcx,[rdx+0x30]
 10164d7:	jmp    0x10095e0
 10164dc:	int3   
 10164dd:	int3   
 10164de:	int3   
 10164df:	int3   
 10164e0:	int3   
 10164e1:	int3   
 10164e2:	int3   
 10164e3:	int3   
 10164e4:	int3   
 10164e5:	int3   
 10164e6:	int3   
 10164e7:	int3   
 10164e8:	int3   
 10164e9:	int3   
 10164ea:	int3   
 10164eb:	int3   
 10164ec:	int3   
 10164ed:	int3   
 10164ee:	int3   
 10164ef:	int3   
 10164f0:	lea    rcx,[rdx+0x38]
 10164f7:	jmp    0x10095e0
 10164fc:	int3   
 10164fd:	int3   
 10164fe:	int3   
 10164ff:	int3   
 1016500:	int3   
 1016501:	int3   
 1016502:	rex push rbp
 1016504:	sub    rsp,0x20
 1016508:	mov    rbp,rdx
 101650b:	mov    rax,QWORD PTR [rcx]
 101650e:	mov    rdx,rcx
 1016511:	mov    ecx,DWORD PTR [rax]
 1016513:	call   0x100def2
 1016518:	nop
 1016519:	add    rsp,0x20
 101651d:	pop    rbp
 101651e:	ret    
 101651f:	int3   
 1016520:	int3   
 1016521:	int3   
 1016522:	int3   
 1016523:	int3   
 1016524:	int3   
 1016525:	int3   
 1016526:	rex push rbp
 1016528:	sub    rsp,0x20
 101652c:	mov    rbp,rdx
 101652f:	mov    QWORD PTR [rbp+0x38],rcx
 1016533:	mov    QWORD PTR [rbp+0x28],rcx
 1016537:	mov    rax,QWORD PTR [rbp+0x28]
 101653b:	mov    rcx,QWORD PTR [rax]
 101653e:	mov    QWORD PTR [rbp+0x30],rcx
 1016542:	mov    rax,QWORD PTR [rbp+0x30]
 1016546:	cmp    DWORD PTR [rax],0xe06d7363
 101654c:	je     0x101655a
 101654e:	mov    DWORD PTR [rbp+0x20],0x0
 1016555:	mov    eax,DWORD PTR [rbp+0x20]
 1016558:	jmp    0x1016560
 101655a:	call   0x100e0c2
 101655f:	nop
 1016560:	add    rsp,0x20
 1016564:	pop    rbp
 1016565:	ret    
 1016566:	int3   
 1016567:	int3   
 1016568:	int3   
 1016569:	int3   
 101656a:	int3   
 101656b:	int3   
 101656c:	int3   
 101656d:	rex push rbp
 101656f:	sub    rsp,0x20
 1016573:	mov    rbp,rdx
 1016576:	cmp    DWORD PTR [rbp+0x20],0x0
 101657a:	jne    0x1016592
 101657c:	mov    r9,QWORD PTR [rbp+0x78]
 1016580:	mov    r8d,DWORD PTR [rbp+0x70]
 1016584:	mov    rdx,QWORD PTR [rbp+0x68]
 1016588:	mov    rcx,QWORD PTR [rbp+0x60]
 101658c:	call   0x100d820
 1016591:	nop
 1016592:	add    rsp,0x20
 1016596:	pop    rbp
 1016597:	ret    
 1016598:	int3   
 1016599:	int3   
 101659a:	int3   
 101659b:	int3   
 101659c:	int3   
 101659d:	int3   
 101659e:	int3   
 101659f:	rex push rbp
 10165a1:	sub    rsp,0x20
 10165a5:	mov    rbp,rdx
 10165a8:	mov    ecx,0x8
 10165ad:	call   0x100e0da
 10165b2:	nop
 10165b3:	add    rsp,0x20
 10165b7:	pop    rbp
 10165b8:	ret    
 10165b9:	int3   
 10165ba:	int3   
 10165bb:	int3   
 10165bc:	int3   
 10165bd:	int3   
 10165be:	int3   
 10165bf:	int3   
 10165c0:	rex push rbp
 10165c2:	sub    rsp,0x20
 10165c6:	mov    rbp,rdx
 10165c9:	mov    rax,QWORD PTR [rcx]
 10165cc:	xor    ecx,ecx
 10165ce:	cmp    DWORD PTR [rax],0xc0000005
 10165d4:	sete   cl
 10165d7:	mov    eax,ecx
 10165d9:	mov    eax,ecx
 10165db:	add    rsp,0x20
 10165df:	pop    rbp
 10165e0:	ret    
 10165e1:	int3   
 10165e2:	int3   
 10165e3:	int3   
 10165e4:	int3   
 10165e5:	int3   
 10165e6:	int3   
 10165e7:	int3   
 10165e8:	lea    rcx,[rdx+0x48]
 10165ef:	rex.W jmp QWORD PTR [rip+0xfffffffffffeadda]        # 0x10013d0
 10165f6:	int3   
 10165f7:	int3   
 10165f8:	int3   
 10165f9:	int3   
 10165fa:	int3   
 10165fb:	int3   
 10165fc:	int3   
 10165fd:	int3   
 10165fe:	int3   
 10165ff:	int3   
 1016600:	lea    rcx,[rdx+0x40]
 1016607:	jmp    0x1005d50
 101660c:	int3   
 101660d:	int3   
 101660e:	int3   
 101660f:	int3   
 1016610:	mov    QWORD PTR [rsp+0x10],rdx
 1016615:	push   rbp
 1016616:	sub    rsp,0x40
 101661a:	mov    rbp,rdx
 101661d:	lea    rax,[rip+0xffffffffffff8144]        # 0x100e768
 1016624:	add    rsp,0x40
 1016628:	pop    rbp
 1016629:	ret    
 101662a:	int3   
 101662b:	int3   
 101662c:	int3   
 101662d:	int3   
 101662e:	int3   
 101662f:	int3   
 1016630:	mov    QWORD PTR [rsp+0x10],rdx
 1016635:	push   rbp
 1016636:	sub    rsp,0x40
 101663a:	mov    rbp,rdx
 101663d:	lea    rax,[rip+0xffffffffffff8124]        # 0x100e768
 1016644:	add    rsp,0x40
 1016648:	pop    rbp
 1016649:	ret    
 101664a:	int3   
 101664b:	int3   
 101664c:	int3   
 101664d:	int3   
 101664e:	int3   
 101664f:	int3   
 1016650:	int3   
 1016651:	int3   
 1016652:	int3   
 1016653:	int3   
 1016654:	int3   
 1016655:	int3   
 1016656:	int3   
 1016657:	int3   
 1016658:	int3   
 1016659:	int3   
 101665a:	int3   
 101665b:	int3   
 101665c:	int3   
 101665d:	int3   
 101665e:	int3   
 101665f:	int3   
 1016660:	lea    rcx,[rdx+0x40]
 1016667:	jmp    0x100fef0
 101666c:	int3   
 101666d:	int3   
 101666e:	int3   
 101666f:	int3   
 1016670:	mov    QWORD PTR [rsp+0x10],rdx
 1016675:	push   rbp
 1016676:	sub    rsp,0x20
 101667a:	mov    rbp,rdx
 101667d:	lea    rax,[rip+0xffffffffffff9757]        # 0x100fddb
 1016684:	add    rsp,0x20
 1016688:	pop    rbp
 1016689:	ret    
 101668a:	int3   
 101668b:	int3   
 101668c:	int3   
 101668d:	int3   
 101668e:	int3   
 101668f:	int3   
 1016690:	int3   
 1016691:	int3   
 1016692:	int3   
 1016693:	int3   
 1016694:	int3   
 1016695:	int3   
 1016696:	int3   
 1016697:	int3   
 1016698:	rex push rbp
 101669a:	mov    rbp,rsp
 101669d:	sub    rsp,0x20
 10166a1:	lea    rcx,[rip+0xc4]        # 0x101676c
 10166a8:	add    rsp,0x20
 10166ac:	pop    rbp
 10166ad:	jmp    0x100de48
 10166b2:	int3   
 10166b3:	int3   
 10166b4:	int3   
 10166b5:	int3   
 10166b6:	int3   
 10166b7:	int3   
 10166b8:	rex push rbp
 10166ba:	mov    rbp,rsp
 10166bd:	sub    rsp,0x20
 10166c1:	lea    rcx,[rip+0x5428]        # 0x101baf0
 10166c8:	call   0x100e268
 10166cd:	lea    rcx,[rip+0xb8]        # 0x101678c
 10166d4:	add    rsp,0x20
 10166d8:	pop    rbp
 10166d9:	jmp    0x100de48
 10166de:	int3   
 10166df:	int3   
 10166e0:	int3   
 10166e1:	int3   
 10166e2:	int3   
 10166e3:	int3   
 10166e4:	rex push rbp
 10166e6:	mov    rbp,rsp
 10166e9:	sub    rsp,0x20
 10166ed:	call   QWORD PTR [rip+0xfffffffffffeaadd]        # 0x10011d0
 10166f3:	lea    rcx,[rip+0xfffffffffffebaae]        # 0x10021a8
 10166fa:	mov    BYTE PTR [rip+0x545f],0x0        # 0x101bb60
 1016701:	mov    QWORD PTR [rip+0x5448],rcx        # 0x101bb50
 1016708:	lea    rcx,[rip+0x9d]        # 0x10167ac
 101670f:	mov    QWORD PTR [rip+0x5442],rax        # 0x101bb58
 1016716:	add    rsp,0x20
 101671a:	pop    rbp
 101671b:	jmp    0x100de48
 1016720:	int3   
 1016721:	int3   
 1016722:	int3   
 1016723:	int3   
 1016724:	int3   
 1016725:	int3   
 1016726:	int3   
 1016727:	int3   
 1016728:	rex push rbp
 101672a:	mov    rbp,rsp
 101672d:	sub    rsp,0x20
 1016731:	lea    rcx,[rip+0xb4]        # 0x10167ec
 1016738:	add    rsp,0x20
 101673c:	pop    rbp
 101673d:	jmp    0x100de48
 1016742:	int3   
 1016743:	int3   
 1016744:	int3   
 1016745:	int3   
 1016746:	int3   
 1016747:	int3   
 1016748:	int3   
 1016749:	int3   
 101674a:	int3   
 101674b:	int3   
 101674c:	int3   
 101674d:	int3   
 101674e:	int3   
 101674f:	int3   
 1016750:	sub    rsp,0x28
 1016754:	call   0x10111e0
 1016759:	mov    DWORD PTR [rip+0x5455],eax        # 0x101bbb4
 101675f:	add    rsp,0x28
 1016763:	ret    
 1016764:	int3   
 1016765:	int3   
 1016766:	int3   
 1016767:	int3   
 1016768:	int3   
 1016769:	int3   
 101676a:	int3   
 101676b:	int3   
 101676c:	rex push rbp
 101676e:	mov    rbp,rsp
 1016771:	sub    rsp,0x20
 1016775:	lea    rcx,[rip+0x536c]        # 0x101bae8
 101677c:	add    rsp,0x20
 1016780:	pop    rbp
 1016781:	jmp    0x100e10c
 1016786:	int3   
 1016787:	int3   
 1016788:	int3   
 1016789:	int3   
 101678a:	int3   
 101678b:	int3   
 101678c:	rex push rbp
 101678e:	mov    rbp,rsp
 1016791:	sub    rsp,0x20
 1016795:	lea    rcx,[rip+0x5354]        # 0x101baf0
 101679c:	add    rsp,0x20
 10167a0:	pop    rbp
 10167a1:	jmp    0x100e18c
 10167a6:	int3   
 10167a7:	int3   
 10167a8:	int3   
 10167a9:	int3   
 10167aa:	int3   
 10167ab:	int3   
 10167ac:	rex push rbp
 10167ae:	mov    rbp,rsp
 10167b1:	sub    rsp,0x20
 10167b5:	cmp    BYTE PTR [rip+0x53a4],0x0        # 0x101bb60
 10167bc:	lea    rax,[rip+0xfffffffffffeb9e5]        # 0x10021a8
 10167c3:	mov    QWORD PTR [rip+0x5386],rax        # 0x101bb50
 10167ca:	je     0x10167de
 10167cc:	mov    rcx,QWORD PTR [rip+0x5385]        # 0x101bb58
 10167d3:	test   rcx,rcx
 10167d6:	je     0x10167de
 10167d8:	call   QWORD PTR [rip+0xfffffffffffeaa1a]        # 0x10011f8
 10167de:	add    rsp,0x20
 10167e2:	pop    rbp
 10167e3:	ret    
 10167e4:	int3   
 10167e5:	int3   
 10167e6:	int3   
 10167e7:	int3   
 10167e8:	int3   
 10167e9:	int3   
 10167ea:	int3   
 10167eb:	int3   
 10167ec:	rex push rbp
 10167ee:	mov    rbp,rsp
 10167f1:	lea    rax,[rip+0xfffffffffffeb9d8]        # 0x10021d0
 10167f8:	mov    QWORD PTR [rip+0x4a09],rax        # 0x101b208
 10167ff:	pop    rbp
 1016800:	ret    
 1016801:	int3   
 1016802:	int3   
 1016803:	int3   
 1016804:	int3   
 1016805:	int3   
 1016806:	int3   
 1016807:	int3   
 1016808:	add    DWORD PTR [rcx+rax*1],eax
 101680b:	add    BYTE PTR [rdx+rax*2],al
 101680e:	add    BYTE PTR [rax],al
 1016810:	add    DWORD PTR [rdx],edx
 1016812:	or     BYTE PTR [rax],al
 1016814:	adc    dl,BYTE PTR [rsi+rcx*1+0x0]
 1016818:	adc    dh,BYTE PTR [rcx*1+0xe721200]
 101681f:	loopne 0x101682d
 1016821:	jo     0x101682e
 1016823:	(bad)  
 1016824:	sbb    DWORD PTR [rax],ebp
 1016826:	or     DWORD PTR [rax],eax
 1016828:	(bad)  
 1016829:	fild   DWORD PTR fs:[rax]
 101682c:	(bad)  
 101682d:	xor    al,0xda
 101682f:	add    BYTE PTR [rsi],dl
 1016831:	add    esp,edx
 1016833:	add    BYTE PTR [rdi],cl
 1016835:	lock or eax,0x700be0
 101683b:	add    BYTE PTR [rax],ah
 101683d:	fadd   QWORD PTR [rax]
 101683f:	add    BYTE PTR [rcx],al
 1016841:	add    BYTE PTR [rax],al
 1016843:	add    BYTE PTR [rbx-0x4dffffaf],ah
 1016849:	push   rbx
 101684a:	add    BYTE PTR [rax],al
 101684c:	loopne 0x10168a9
 101684e:	add    DWORD PTR [rax],eax
 1016850:	add    BYTE PTR [rax],al
 1016852:	add    BYTE PTR [rax],al
 1016854:	xchg   edx,eax
 1016855:	(bad)  
 1016856:	add    BYTE PTR [rax],al
 1016858:	add    DWORD PTR [rsi],eax
 101685a:	add    al,BYTE PTR [rax]
 101685c:	(bad)  
 101685d:	jb     0x1016861
 101685f:	push   rax
 1016860:	add    DWORD PTR [rax],ecx
 1016862:	add    al,0x0
 1016864:	or     BYTE PTR [rdx+0x60037004],dl
 101686a:	add    dh,BYTE PTR [rax]
 101686c:	add    DWORD PTR [rcx+rax*1],eax
 101686f:	add    BYTE PTR [rdx+rax*2],al
 1016872:	add    BYTE PTR [rax],al
 1016874:	sbb    DWORD PTR [rsi],ebp
 1016876:	(bad)  
 1016877:	add    BYTE PTR [rsp+riz*2],bl
 101687a:	movabs eax,ds:0x9c010b00a0341800
 1016883:	add    BYTE PTR [rax+rsi*2],al
 1016886:	add    BYTE PTR [rax],al
 1016888:	mov    bl,bl
 101688a:	add    BYTE PTR [rax],al
 101688c:	movabs al,ds:0xff000004d2000017
 1016895:	(bad)  
 1016896:	(bad)  
 1016897:	inc    DWORD PTR [rax+0x5c]
 101689a:	add    DWORD PTR [rax],eax
 101689c:	movabs al,ds:0x23ffffffff000056
 10168a5:	push   rdi
 10168a6:	add    BYTE PTR [rax],al
 10168a8:	add    BYTE PTR [rax],al
 10168aa:	add    BYTE PTR [rax],al
 10168ac:	sub    eax,0xff000058
 10168b1:	(bad)  
 10168b2:	(bad)  
 10168b3:	inc    DWORD PTR [rcx]
 10168b5:	cmp    ecx,DWORD PTR [rax]
 10168b7:	add    BYTE PTR [rbx],bh
 10168b9:	xor    al,0x6
 10168bb:	add    BYTE PTR [rdi],cl
 10168bd:	or     BYTE PTR fs:[rax],al
 10168c0:	andps  xmm0,XMMWORD PTR [rdi]
 10168c3:	add    BYTE PTR [rdi],cl
 10168c5:	xor    cl,BYTE PTR [rbx]
 10168c7:	jo     0x10168ca
 10168c9:	sbb    cl,BYTE PTR [rdx]
 10168cb:	add    BYTE PTR [rdx],bl
 10168cd:	je     0x10168d8
 10168cf:	add    BYTE PTR [rdx],bl
 10168d1:	or     BYTE PTR fs:[rax],al
 10168d4:	sbb    dl,BYTE PTR [rdi+rax*1+0x0]
 10168d8:	sbb    dh,BYTE PTR [rsi+rax*1]
 10168db:	add    BYTE PTR [rdx],bl
 10168dd:	xor    dl,BYTE PTR [rsi]
 10168df:	loopne 0x10168e2
 10168e1:	add    al,0x1
 10168e3:	add    BYTE PTR [rdx+rax*2],al
 10168e6:	add    BYTE PTR [rax],al
 10168e8:	add    DWORD PTR [rdx],ecx
 10168ea:	add    al,0x0
 10168ec:	or     dh,BYTE PTR [rsi+rax*1]
 10168ef:	add    BYTE PTR [rdx],cl
 10168f1:	xor    al,BYTE PTR [rsi]
 10168f3:	jo     0x10168f6
 10168f5:	clts   
 10168f7:	add    BYTE PTR [rdi],cl
 10168f9:	push   rsp
 10168fa:	or     DWORD PTR [rax],eax
 10168fc:	sysenter 
 10168fe:	or     BYTE PTR [rax],al
 1016900:	rdmsr  
 1016902:	or     esi,DWORD PTR [rax+0x21]
 1016905:	adc    BYTE PTR [rax+rax*1],al
 1016908:	adc    ah,ah
 101690a:	(bad)  
 101690b:	add    BYTE PTR [rip+0xffffffffa0000664],al        # 0xffffffffa1016f75
 1016911:	pop    rdx
 1016912:	add    BYTE PTR [rax],al
 1016914:	in     al,0x5a
 1016916:	add    BYTE PTR [rax],al
 1016918:	hlt    
 1016919:	push   0x210001
 101691e:	add    al,0x0
 1016920:	add    ah,ah
 1016922:	(bad)  
 1016923:	add    BYTE PTR [rax],al
 1016925:	fs (bad) 
 1016927:	add    BYTE PTR [rax-0x1bffffa6],ah
 101692d:	pop    rdx
 101692e:	add    BYTE PTR [rax],al
 1016930:	hlt    
 1016931:	push   0x4010001
 1016936:	add    DWORD PTR [rax],eax
 1016938:	add    al,0x42
 101693a:	add    BYTE PTR [rax],al
 101693c:	add    DWORD PTR [rdx],ebx
 101693e:	or     al,BYTE PTR [rax]
 1016940:	sbb    dh,BYTE PTR [rcx+rcx*1+0x0]
 1016944:	sbb    ah,BYTE PTR [rax+rcx*1+0x0]
 1016948:	sbb    dl,BYTE PTR [rdi+rax*1+0x0]
 101694c:	sbb    dh,BYTE PTR [rsi+rax*1]
 101694f:	add    BYTE PTR [rdx],bl
 1016951:	xor    dl,BYTE PTR [rsi]
 1016953:	loopne 0x1016956
 1016955:	add    al,0x1
 1016957:	add    BYTE PTR [rdx+rax*2],al
 101695a:	add    BYTE PTR [rax],al
 101695c:	add    DWORD PTR [rsi],eax
 101695e:	add    al,BYTE PTR [rax]
 1016960:	(bad)  
 1016961:	xor    al,BYTE PTR [rdx]
 1016963:	xor    BYTE PTR [rcx],al
 1016965:	add    al,0x1
 1016967:	add    BYTE PTR [rdx+rax*2],al
 101696a:	add    BYTE PTR [rax],al
 101696c:	add    DWORD PTR [rdi],ecx
 101696e:	(bad)  
 101696f:	add    BYTE PTR [rdi],cl
 1016971:	fs (bad) 
 1016973:	add    BYTE PTR [rdi],cl
 1016975:	xor    al,0x6
 1016977:	add    BYTE PTR [rdi],cl
 1016979:	xor    cl,BYTE PTR [rbx]
 101697b:	jo     0x101697e
 101697d:	(bad)  
 101697e:	add    al,BYTE PTR [rax]
 1016980:	(bad)  
 1016981:	xor    al,BYTE PTR [rdx]
 1016983:	xor    BYTE PTR [rcx],al
 1016985:	or     al,BYTE PTR [rax+rax*1]
 1016988:	or     dh,BYTE PTR [rsi+rax*1]
 101698b:	add    BYTE PTR [rdx],cl
 101698d:	xor    al,BYTE PTR [rsi]
 101698f:	jo     0x1016992
 1016991:	add    al,0x1
 1016993:	add    BYTE PTR [rdx+rax*4],al
 1016996:	add    BYTE PTR [rax],al
 1016998:	add    DWORD PTR [rdx],ecx
 101699a:	add    al,0x0
 101699c:	or     dh,BYTE PTR [rdi+rax*1]
 101699f:	add    BYTE PTR [rdx],cl
 10169a1:	xor    al,BYTE PTR [rsi]
 10169a3:	jo     0x10169c6
 10169a5:	add    eax,0x64050002
 10169aa:	(bad)  
 10169ab:	add    al,al
 10169ad:	pop    rdi
 10169ae:	add    BYTE PTR [rax],al
 10169b0:	ficomp DWORD PTR [rdi+0x0]
 10169b3:	add    BYTE PTR [rax+0x21000169],bl
 10169b9:	add    BYTE PTR [rax],al
 10169bb:	add    al,al
 10169bd:	pop    rdi
 10169be:	add    BYTE PTR [rax],al
 10169c0:	ficomp DWORD PTR [rdi+0x0]
 10169c3:	add    BYTE PTR [rax+0x1000169],bl
 10169c9:	(bad)  
 10169ca:	add    al,BYTE PTR [rax]
 10169cc:	(bad)  
 10169cd:	xor    al,BYTE PTR [rdx]
 10169cf:	xor    BYTE PTR [rcx],al
 10169d1:	adc    al,0x8
 10169d3:	add    BYTE PTR [rsp+riz*2],dl
 10169d6:	or     DWORD PTR [rax],eax
 10169d8:	adc    al,0x54
 10169da:	or     BYTE PTR [rax],al
 10169dc:	adc    al,0x34
 10169de:	(bad)  
 10169df:	add    BYTE PTR [rdx+rsi*1],dl
 10169e2:	adc    BYTE PTR [rax+0x21],dh
 10169e5:	add    eax,0xe4050002
 10169ea:	(bad)  
 10169eb:	add    BYTE PTR [rax+0x41000060],ah
 10169f1:	(bad)  
 10169f2:	add    BYTE PTR [rax],al
 10169f4:	shr    BYTE PTR [rcx+0x1],1
 10169f7:	add    BYTE PTR [rcx],ah
 10169f9:	add    BYTE PTR [rax],al
 10169fb:	add    BYTE PTR [rax+0x41000060],ah
 1016a01:	(bad)  
 1016a02:	add    BYTE PTR [rax],al
 1016a04:	shr    BYTE PTR [rcx+0x1],1
 1016a07:	add    BYTE PTR [rcx],ah
 1016a09:	add    BYTE PTR [rdx],al
 1016a0b:	add    BYTE PTR [rax],al
 1016a0d:	in     al,0x6
 1016a0f:	add    BYTE PTR [rax+0x41000060],ah
 1016a15:	(bad)  
 1016a16:	add    BYTE PTR [rax],al
 1016a18:	shr    BYTE PTR [rcx+0x1],1
 1016a1b:	add    BYTE PTR [rcx],ah
 1016a1d:	add    BYTE PTR [rax],al
 1016a1f:	add    BYTE PTR [rax+0x41000060],ah
 1016a25:	(bad)  
 1016a26:	add    BYTE PTR [rax],al
 1016a28:	shr    BYTE PTR [rcx+0x1],1
 1016a2b:	add    BYTE PTR [rcx],al
 1016a2d:	clts   
 1016a2f:	add    BYTE PTR [rdi],cl
 1016a31:	or     BYTE PTR fs:[rax],al
 1016a34:	sysenter 
 1016a36:	(bad)  
 1016a37:	add    BYTE PTR [rdi],cl
 1016a39:	xor    cl,BYTE PTR [rbx]
 1016a3b:	jo     0x1016a5e
 1016a3d:	add    eax,0xe4050002
 1016a42:	(bad)  
 1016a43:	add    al,dl
 1016a45:	(bad)  
 1016a46:	add    BYTE PTR [rax],al
 1016a48:	xchg   ecx,eax
 1016a49:	(bad)  
 1016a4a:	add    BYTE PTR [rax],al
 1016a4c:	sub    al,0x6a
 1016a4e:	add    DWORD PTR [rax],eax
 1016a50:	and    DWORD PTR [rax],eax
 1016a52:	add    BYTE PTR [rax],al
 1016a54:	shl    BYTE PTR [rcx+0x0],1
 1016a57:	add    BYTE PTR [rcx+0x2c000062],dl
 1016a5d:	push   0x1
 1016a5f:	add    BYTE PTR [rcx],ah
 1016a61:	add    BYTE PTR [rdx],al
 1016a63:	add    BYTE PTR [rax],al
 1016a65:	in     al,0x6
 1016a67:	add    al,dl
 1016a69:	(bad)  
 1016a6a:	add    BYTE PTR [rax],al
 1016a6c:	xchg   ecx,eax
 1016a6d:	(bad)  
 1016a6e:	add    BYTE PTR [rax],al
 1016a70:	sub    al,0x6a
 1016a72:	add    DWORD PTR [rax],eax
 1016a74:	and    DWORD PTR [rax],eax
 1016a76:	add    BYTE PTR [rax],al
 1016a78:	shl    BYTE PTR [rcx+0x0],1
 1016a7b:	add    BYTE PTR [rcx+0x2c000062],dl
 1016a81:	push   0x1
 1016a83:	add    BYTE PTR [rcx],al
 1016a85:	or     al,BYTE PTR [rax+rax*1]
 1016a88:	or     dh,BYTE PTR [rsi+rax*1]
 1016a8b:	add    BYTE PTR [rdx],cl
 1016a8d:	xor    al,BYTE PTR [rsi]
 1016a8f:	jo     0x1016aaa
 1016a91:	and    eax,DWORD PTR [rsi]
 1016a93:	add    BYTE PTR [rdx],bl
 1016a95:	jb     0x1016aad
 1016a97:	lock adc al,0xe0
 1016a9a:	adc    dh,BYTE PTR [rax+0x11]
 1016a9d:	(bad)  
 1016a9e:	adc    BYTE PTR [rax],dh
 1016aa0:	add    bl,ch
 1016aa2:	add    BYTE PTR [rax],al
 1016aa4:	push   rax
 1016aa5:	sbb    DWORD PTR [rax],eax
 1016aa7:	add    bh,bh
 1016aa9:	(bad)  
 1016aaa:	(bad)  
 1016aab:	inc    DWORD PTR [rax]
 1016aad:	add    BYTE PTR [rax],al
 1016aaf:	add    bh,bh
 1016ab1:	(bad)  
 1016ab2:	(bad)  
 1016ab3:	inc    DWORD PTR [rax]
 1016ab5:	add    BYTE PTR [rax],al
 1016ab7:	add    BYTE PTR [rcx],al
 1016ab9:	add    BYTE PTR [rax],al
 1016abb:	add    BYTE PTR [rax],al
 1016abd:	add    BYTE PTR [rax],al
 1016abf:	add    BYTE PTR [rcx],al
	...
 1016acd:	add    BYTE PTR [rax],al
 1016acf:	add    BYTE PTR [rbx],al
 1016ad1:	add    BYTE PTR [rax],al
 1016ad3:	add    BYTE PTR [rcx],al
 1016ad5:	add    BYTE PTR [rax],al
 1016ad7:	add    al,dh
 1016ad9:	push   0x1
 1016adb:	add    BYTE PTR [rdx],al
 1016add:	add    BYTE PTR [rax],al
 1016adf:	add    BYTE PTR [rdx],al
 1016ae1:	add    BYTE PTR [rax],al
 1016ae3:	add    BYTE PTR [rbx],al
 1016ae5:	add    BYTE PTR [rax],al
 1016ae7:	add    BYTE PTR [rcx],al
 1016ae9:	add    BYTE PTR [rax],al
 1016aeb:	add    BYTE PTR [rbx+rbp*2],al
 1016aee:	add    DWORD PTR [rax],eax
 1016af0:	add    BYTE PTR [rax],al
	...
 1016afb:	add    al,dh
 1016afd:	pop    rsp
 1016afe:	add    DWORD PTR [rax],eax
 1016b00:	cmp    BYTE PTR [rax],al
 1016b02:	add    BYTE PTR [rax],al
 1016b04:	add    BYTE PTR [rax],al
	...
 1016b0f:	add    BYTE PTR [rax],dh
 1016b11:	pop    rbp
 1016b12:	add    DWORD PTR [rax],eax
 1016b14:	rex.W add BYTE PTR [rax],al
 1016b17:	add    al,ah
 1016b19:	movsxd eax,DWORD PTR [rax]
 1016b1b:	add    bh,bh
 1016b1d:	(bad)  
 1016b1e:	(bad)  
 1016b1f:	call   QWORD PTR [rbp+0x64]
 1016b22:	add    BYTE PTR [rax],al
 1016b24:	add    BYTE PTR [rax],al
 1016b26:	add    BYTE PTR [rax],al
 1016b28:	mov    esp,0xff000064
 1016b2d:	(bad)  
 1016b2e:	(bad)  
 1016b2f:	push   rax
 1016b31:	pop    rsp
 1016b32:	add    DWORD PTR [rax],eax
 1016b34:	add    BYTE PTR [rax],al
 1016b36:	add    BYTE PTR [rax],al
 1016b38:	std    
 1016b39:	pop    rsp
 1016b3a:	add    DWORD PTR [rax],eax
 1016b3c:	add    DWORD PTR [rax],eax
 1016b3e:	add    BYTE PTR [rax],al
 1016b40:	add    eax,0x200015d
 1016b45:	add    BYTE PTR [rax],al
 1016b47:	add    BYTE PTR [rbx*2+0x1],bl
 1016b4e:	add    BYTE PTR [rax],al
 1016b50:	ds pop rbp
 1016b52:	add    DWORD PTR [rax],eax
 1016b54:	add    eax,DWORD PTR [rax]
 1016b56:	add    BYTE PTR [rax],al
 1016b58:	sbb    DWORD PTR [rdx],ecx
 1016b5a:	add    al,BYTE PTR [rax]
 1016b5c:	or     dh,BYTE PTR [rdx]
 1016b5e:	(bad)  
 1016b5f:	push   rax
 1016b60:	add    bl,ch
 1016b62:	add    BYTE PTR [rax],al
 1016b64:	push   rax
 1016b65:	sbb    DWORD PTR [rax],eax
 1016b67:	add    BYTE PTR [rcx],bl
 1016b69:	or     eax,DWORD PTR [rbx]
 1016b6b:	add    BYTE PTR [rbx],cl
 1016b6d:	rex.X (bad) 
 1016b6f:	push   rax
 1016b70:	(bad)  
 1016b71:	xor    BYTE PTR [rax],al
 1016b73:	add    BYTE PTR [rdx],al
 1016b75:	fld    QWORD PTR [rax]
 1016b77:	add    BYTE PTR [rax+0x19],dl
 1016b7a:	add    BYTE PTR [rax],al
 1016b7c:	sbb    DWORD PTR [rcx],esi
 1016b7e:	or     DWORD PTR [rax],eax
 1016b80:	and    esp,DWORD PTR [rsp+rbp*1+0x0]
 1016b84:	(bad)  
 1016b85:	xor    al,0x2b
 1016b87:	add    BYTE PTR [rdx],dl
 1016b89:	add    DWORD PTR [rsi],esp
 1016b8b:	add    BYTE PTR [rdi],al
 1016b8d:	loopne 0x1016b94
 1016b8f:	jo     0x1016b95
 1016b91:	push   rax
 1016b92:	add    BYTE PTR [rax],al
 1016b94:	mov    bl,bl
 1016b96:	add    BYTE PTR [rax],al
 1016b98:	js     0x1016bb3
 1016b9a:	add    BYTE PTR [rax],al
 1016b9c:	and    al,BYTE PTR [rcx]
 1016b9e:	add    BYTE PTR [rax],al
 1016ba0:	(bad)  
 1016ba1:	(bad)  
 1016ba2:	(bad)  
 1016ba3:	push   QWORD PTR [rax+0x15d]
 1016ba9:	add    BYTE PTR [rax],al
 1016bab:	add    al,al
 1016bad:	pop    rbp
 1016bae:	add    DWORD PTR [rax],eax
 1016bb0:	add    DWORD PTR [rax],eax
 1016bb2:	add    BYTE PTR [rax],al
 1016bb4:	rcr    BYTE PTR [rbp+0x1],1
 1016bb7:	add    BYTE PTR [rcx],al
 1016bb9:	add    BYTE PTR [rax],al
 1016bbb:	add    al,ah
 1016bbd:	pop    rbp
 1016bbe:	add    DWORD PTR [rax],eax
 1016bc0:	add    DWORD PTR [rax],eax
 1016bc2:	add    BYTE PTR [rax],al
 1016bc4:	lock pop rbp
 1016bc6:	add    DWORD PTR [rax],eax
 1016bc8:	add    DWORD PTR [rax],eax
 1016bca:	add    BYTE PTR [rax],al
 1016bcc:	add    BYTE PTR [rsi+0x1],bl
 1016bcf:	add    BYTE PTR [rax+0x65],ah
 1016bd2:	add    BYTE PTR [rax],al
 1016bd4:	(bad)  
 1016bd5:	(bad)  
 1016bd6:	(bad)  
 1016bd7:	jmp    FWORD PTR [rax+0x65]
 1016bdd:	add    BYTE PTR [rax],al
 1016bdf:	add    BYTE PTR [rbp+riz*2+0x10000],bh
 1016be6:	add    BYTE PTR [rax],al
 1016be8:	xor    eax,0x2000066
 1016bed:	add    BYTE PTR [rax],al
 1016bef:	add    BYTE PTR [rcx+0x1000066],ah
 1016bf5:	add    BYTE PTR [rax],al
 1016bf7:	add    bh,cl
 1016bf9:	data16 add BYTE PTR [rax],al
 1016bfc:	add    BYTE PTR [rax],al
 1016bfe:	add    BYTE PTR [rax],al
 1016c00:	shl    DWORD PTR [rsi+0x0],1
 1016c03:	add    BYTE PTR [rcx],al
 1016c05:	add    BYTE PTR [rax],al
 1016c07:	add    ah,ah
 1016c09:	data16 add BYTE PTR [rax],al
 1016c0c:	add    eax,DWORD PTR [rax]
 1016c0e:	add    BYTE PTR [rax],al
 1016c10:	pop    rdx
 1016c11:	add    BYTE PTR [eax],al
 1016c14:	add    DWORD PTR [rax],eax
 1016c16:	add    BYTE PTR [rax],al
 1016c18:	push   rcx
 1016c19:	push   0x40000
 1016c1e:	add    BYTE PTR [rax],al
 1016c20:	(bad)  
 1016c21:	push   0x10000
 1016c26:	add    BYTE PTR [rax],al
 1016c28:	imul   r8d,DWORD PTR [r8],0x500
 1016c2f:	add    BYTE PTR [rbx+0x1000069],bh
 1016c35:	add    BYTE PTR [rax],al
 1016c37:	add    BYTE PTR [rip+0x6b],al        # 0x1016ca8
 1016c3d:	add    BYTE PTR [rax],al
 1016c3f:	add    BYTE PTR [rbx],ch
 1016c41:	imul   eax,DWORD PTR [rax],0x0
 1016c44:	(bad)  
 1016c45:	(bad)  
 1016c46:	(bad)  
 1016c47:	jmp    QWORD PTR [rbx+rbp*2+0x0]
 1016c4b:	add    BYTE PTR [rax],al
 1016c4d:	add    BYTE PTR [rax],al
 1016c4f:	add    BYTE PTR [rcx],al
 1016c51:	(bad)  
 1016c52:	add    al,BYTE PTR [rax]
 1016c54:	(bad)  
 1016c55:	xchg   edx,eax
 1016c56:	add    dh,BYTE PTR [rax]
 1016c58:	add    DWORD PTR [rsi],eax
 1016c5a:	add    al,BYTE PTR [rax]
 1016c5c:	(bad)  
 1016c5d:	xchg   edx,eax
 1016c5e:	add    dh,BYTE PTR [rax]
 1016c60:	add    DWORD PTR [rsi],eax
 1016c62:	add    al,BYTE PTR [rax]
 1016c64:	(bad)  
 1016c65:	xchg   edx,eax
 1016c66:	add    dh,BYTE PTR [rax]
 1016c68:	adc    DWORD PTR [rbx],edx
 1016c6a:	add    al,BYTE PTR [rax]
 1016c6c:	or     dl,BYTE PTR [rdx+0x6]
 1016c6f:	xor    BYTE PTR [rdx],al
 1016c71:	fld    QWORD PTR [rax]
 1016c73:	add    BYTE PTR [rax-0xffffe7],ah
 1016c79:	(bad)  
 1016c7a:	(bad)  
 1016c7b:	inc    DWORD PTR [rax+0x3000015d]
 1016c81:	jno    0x1016c83
 1016c83:	add    bh,bh
 1016c85:	(bad)  
 1016c86:	(bad)  
 1016c87:	inc    DWORD PTR [rsi+0x71]
 1016c8a:	add    BYTE PTR [rax],al
 1016c8c:	add    BYTE PTR [rax],al
 1016c8e:	add    BYTE PTR [rax],al
 1016c90:	add    DWORD PTR [rsi],eax
 1016c92:	add    al,BYTE PTR [rax]
 1016c94:	(bad)  
 1016c95:	xor    al,BYTE PTR [rdx]
 1016c97:	push   rax
 1016c98:	add    DWORD PTR [rcx+rax*1],eax
 1016c9b:	add    BYTE PTR [rdx+rax*2],al
 1016c9e:	add    BYTE PTR [rax],al
 1016ca0:	and    DWORD PTR [rip+0x34050002],eax        # 0x35066ca8
 1016ca6:	add    al,0x0
 1016ca8:	xor    BYTE PTR [rdx+0x0],dh
 1016cab:	add    BYTE PTR [rsi-0x67ffff8e],bl
 1016cb1:	ins    BYTE PTR es:[rdi],dx
 1016cb2:	add    DWORD PTR [rax],eax
 1016cb4:	and    DWORD PTR [rax],eax
 1016cb6:	add    BYTE PTR [rax],al
 1016cb8:	xor    BYTE PTR [rdx+0x0],dh
 1016cbb:	add    BYTE PTR [rsi-0x67ffff8e],bl
 1016cc1:	ins    BYTE PTR es:[rdi],dx
 1016cc2:	add    DWORD PTR [rax],eax
 1016cc4:	sbb    DWORD PTR [rbx],ebx
 1016cc6:	add    eax,DWORD PTR [rax]
 1016cc8:	or     DWORD PTR [rcx],eax
 1016cca:	nop
 1016ccb:	add    BYTE PTR [rdx],al
 1016ccd:	xor    BYTE PTR [rax],al
 1016ccf:	add    BYTE PTR [rdx+rbx*8+0x4700000],dh
 1016cd6:	add    BYTE PTR [rax],al
 1016cd8:	sbb    DWORD PTR [rdx],ebx
 1016cda:	or     BYTE PTR [rax],al
 1016cdc:	adc    dl,BYTE PTR [rdx+0xe]
 1016cdf:	lock or al,0xe0
 1016ce2:	or     dl,al
 1016ce4:	or     al,al
 1016ce6:	(bad)  
 1016ce7:	jo     0x1016cee
 1016ce9:	(bad)  
 1016cea:	add    al,0x30
 1016cec:	add    bl,ch
 1016cee:	add    BYTE PTR [rax],al
 1016cf0:	enter  0x19,0x0
 1016cf4:	(bad)  
 1016cf5:	(bad)  
 1016cf6:	(bad)  
 1016cf7:	inc    DWORD PTR [rax]
 1016cf9:	add    BYTE PTR [rax],al
 1016cfb:	add    BYTE PTR [rax],al
 1016cfd:	add    BYTE PTR [rax],al
 1016cff:	add    BYTE PTR [rax+0x5c],ah
 1016d02:	add    DWORD PTR [rax],eax
 1016d04:	add    DWORD PTR [rax],eax
 1016d06:	add    BYTE PTR [rax],al
 1016d08:	jo     0x1016d66
 1016d0a:	add    DWORD PTR [rax],eax
 1016d0c:	add    al,BYTE PTR [rax]
 1016d0e:	add    BYTE PTR [rax],al
 1016d10:	sbb    BYTE PTR [rcx+rax*1+0x0],0x2
 1016d15:	add    BYTE PTR [rax],al
 1016d17:	add    BYTE PTR [rax+0x400015c],dl
 1016d1d:	add    BYTE PTR [rax],al
 1016d1f:	add    BYTE PTR [rax+0x400015c],ah
 1016d25:	add    BYTE PTR [rax],al
 1016d27:	add    BYTE PTR [rax-0xfffea4],dh
 1016d2d:	(bad)  
 1016d2e:	(bad)  
 1016d2f:	inc    DWORD PTR [rax]
 1016d31:	add    BYTE PTR [rax],al
 1016d33:	add    BYTE PTR [rax],al
 1016d35:	add    BYTE PTR [rax],al
 1016d37:	add    BYTE PTR [rsi],al
 1016d39:	add    BYTE PTR [rax],al
 1016d3b:	add    BYTE PTR [rdi],al
 1016d3d:	add    BYTE PTR [rax],al
 1016d3f:	add    BYTE PTR [rcx],al
 1016d41:	add    BYTE PTR [rax],al
 1016d43:	add    BYTE PTR [rax+0x6d],cl
 1016d46:	add    DWORD PTR [rax],eax
 1016d48:	add    BYTE PTR [rax],al
 1016d4a:	add    BYTE PTR [rax],al
 1016d4c:	add    BYTE PTR [rcx+0x200001],dh
 1016d52:	add    BYTE PTR [rax],al
 1016d54:	rcr    BYTE PTR [rcx+rax*1+0x0],0x38
 1016d59:	add    BYTE PTR [rax],al
 1016d5b:	add    BYTE PTR [rax+0x74],al
 1016d5e:	add    BYTE PTR [rax],al
 1016d60:	(bad)  
 1016d61:	(bad)  
 1016d62:	(bad)  
 1016d63:	call   FWORD PTR [rbp+0x74]
 1016d66:	add    BYTE PTR [rax],al
 1016d68:	add    BYTE PTR [rax],al
 1016d6a:	add    BYTE PTR [rax],al
 1016d6c:	fs je  0x1016d6f
 1016d6f:	add    BYTE PTR [rcx],al
 1016d71:	add    BYTE PTR [rax],al
 1016d73:	add    BYTE PTR [rax+0x74],ch
 1016d76:	add    BYTE PTR [rax],al
 1016d78:	add    al,BYTE PTR [rax]
 1016d7a:	add    BYTE PTR [rax],al
 1016d7c:	fnstenv [rax+rax*1+0x0]
 1016d80:	add    eax,DWORD PTR [rax]
 1016d82:	add    BYTE PTR [rax],al
 1016d84:	rex.W jne 0x1016d87
 1016d87:	add    BYTE PTR [rax+rax*1],al
 1016d8a:	add    BYTE PTR [rax],al
 1016d8c:	add    BYTE PTR [rsi+0x0],dh
 1016d8f:	add    BYTE PTR [rip+0x58000000],al        # 0x59016d95
 1016d95:	jbe    0x1016d97
 1016d97:	add    BYTE PTR [rsi],al
 1016d99:	add    BYTE PTR [rax],al
 1016d9b:	add    ch,bh
 1016d9d:	jbe    0x1016d9f
 1016d9f:	add    BYTE PTR [rax+rax*1],al
 1016da2:	add    BYTE PTR [rax],al
 1016da4:	sbb    DWORD PTR [rdi+0x0],esi
 1016da7:	add    BYTE PTR [rdx],al
 1016da9:	add    BYTE PTR [rax],al
 1016dab:	add    BYTE PTR [rdx],bh
 1016dad:	ja     0x1016daf
 1016daf:	add    BYTE PTR [rcx],al
 1016db1:	add    BYTE PTR [rax],al
 1016db3:	add    BYTE PTR [rcx+0x77],cl
 1016db6:	add    BYTE PTR [rax],al
 1016db8:	add    BYTE PTR [rax],al
 1016dba:	add    BYTE PTR [rax],al
 1016dbc:	pop    rax
 1016dbd:	ja     0x1016dbf
 1016dbf:	add    bh,bh
 1016dc1:	(bad)  
 1016dc2:	(bad)  
 1016dc3:	inc    eax
 1016dc5:	pop    rsp
 1016dc6:	add    DWORD PTR [rax],eax
 1016dc8:	add    BYTE PTR [rax],al
 1016dca:	add    BYTE PTR [rax],al
 1016dcc:	int    0x5c
 1016dce:	add    DWORD PTR [rax],eax
 1016dd0:	(bad)  
 1016dd1:	add    BYTE PTR [rax],al
 1016dd3:	add    bl,bl
 1016dd5:	pop    rsp
 1016dd6:	add    DWORD PTR [rax],eax
 1016dd8:	add    BYTE PTR [rax],al
 1016dda:	add    BYTE PTR [rax],al
 1016ddc:	sbb    DWORD PTR [rdx],ecx
 1016dde:	add    al,BYTE PTR [rax]
 1016de0:	or     dh,BYTE PTR [rdx]
 1016de2:	(bad)  
 1016de3:	push   rax
 1016de4:	add    bl,ch
 1016de6:	add    BYTE PTR [rax],al
 1016de8:	enter  0x19,0x0
 1016dec:	add    DWORD PTR [rsi],eax
 1016dee:	add    al,BYTE PTR [rax]
 1016df0:	(bad)  
 1016df1:	xor    al,BYTE PTR [rdx]
 1016df3:	xor    BYTE PTR [rcx],al
 1016df5:	adc    BYTE PTR [rax],cl
 1016df7:	add    BYTE PTR [rax],dl
 1016df9:	xor    al,0x12
 1016dfb:	add    BYTE PTR [rax],dl
 1016dfd:	xchg   edx,eax
 1016dfe:	or     al,0xf0
 1016e00:	or     ah,al
 1016e02:	or     BYTE PTR [rax+0x7],dh
 1016e05:	(bad)  
 1016e06:	(bad)  
 1016e07:	push   rax
 1016e08:	add    DWORD PTR [rcx],edx
 1016e0a:	or     BYTE PTR [rax],al
 1016e0c:	adc    DWORD PTR [rsp+rcx*1],esi
 1016e0f:	add    BYTE PTR [rcx],dl
 1016e11:	xor    cl,BYTE PTR [rip+0x9e00bf0]        # 0xae17a07
 1016e17:	rol    BYTE PTR [rdi],0x60
 1016e1a:	(bad)  
 1016e1b:	push   rax
 1016e1c:	and    DWORD PTR [rip+0x74050002],eax        # 0x75066e24
 1016e22:	or     al,BYTE PTR [rax]
 1016e24:	jo     0x1016e9f
 1016e26:	add    BYTE PTR [rax],al
 1016e28:	xchg   ebp,eax
 1016e29:	jns    0x1016e2b
 1016e2b:	add    BYTE PTR [rax],cl
 1016e2d:	outs   dx,BYTE PTR ds:[rsi]
 1016e2e:	add    DWORD PTR [rax],eax
 1016e30:	and    DWORD PTR [rax],eax
 1016e32:	add    BYTE PTR [rax],al
 1016e34:	jo     0x1016eaf
 1016e36:	add    BYTE PTR [rax],al
 1016e38:	xchg   ebp,eax
 1016e39:	jns    0x1016e3b
 1016e3b:	add    BYTE PTR [rax],cl
 1016e3d:	outs   dx,BYTE PTR ds:[rsi]
 1016e3e:	add    DWORD PTR [rax],eax
 1016e40:	and    DWORD PTR [rax],eax
 1016e42:	add    al,BYTE PTR [rax]
 1016e44:	add    BYTE PTR [rdx+rcx*1+0x0],dh
 1016e48:	jo     0x1016ec3
 1016e4a:	add    BYTE PTR [rax],al
 1016e4c:	xchg   ebp,eax
 1016e4d:	jns    0x1016e4f
 1016e4f:	add    BYTE PTR [rax],cl
 1016e51:	outs   dx,BYTE PTR ds:[rsi]
 1016e52:	add    DWORD PTR [rax],eax
 1016e54:	sbb    DWORD PTR [rdi],ebx
 1016e56:	add    eax,0x54010d00
 1016e5b:	add    BYTE PTR [rsi],al
 1016e5d:	lock add al,0xc0
 1016e60:	add    dl,BYTE PTR [rax+0x0]
 1016e63:	add    BYTE PTR [rdx+rbx*8+0x2700000],dh
 1016e6a:	add    BYTE PTR [rax],al
 1016e6c:	and    DWORD PTR [rcx],ebp
 1016e6e:	or     BYTE PTR [rax],al
 1016e70:	sub    esp,esp
 1016e72:	push   rax
 1016e73:	add    BYTE PTR [rcx],ah
 1016e75:	je     0x1016ec8
 1016e77:	add    BYTE PTR [rax],dl
 1016e79:	fs push rdx
 1016e7b:	add    BYTE PTR [rax],cl
 1016e7d:	xor    al,0x53
 1016e7f:	add    BYTE PTR [rax+0x7a],al
 1016e82:	add    BYTE PTR [rax],al
 1016e84:	mov    WORD PTR [rdx+0x0],?
 1016e87:	add    BYTE PTR [rsi+rbp*2+0x1],dl
 1016e8b:	add    BYTE PTR [rcx],ah
 1016e8d:	add    BYTE PTR [rax],al
 1016e8f:	add    BYTE PTR [rax+0x7a],al
 1016e92:	add    BYTE PTR [rax],al
 1016e94:	mov    WORD PTR [rdx+0x0],?
 1016e97:	add    BYTE PTR [rsi+rbp*2+0x1],dl
 1016e9b:	add    BYTE PTR [rcx],al
 1016e9d:	add    al,0x1
 1016e9f:	add    BYTE PTR [rdx+rax*2],al
 1016ea2:	add    BYTE PTR [rax],al
 1016ea4:	add    DWORD PTR [rax],ecx
 1016ea6:	add    al,0x0
 1016ea8:	or     BYTE PTR [rdx],dh
 1016eaa:	add    al,0x70
 1016eac:	add    edx,DWORD PTR [rax+0x2]
 1016eaf:	xor    BYTE PTR [rcx],ah
 1016eb1:	add    eax,0xe4050002
 1016eb6:	or     DWORD PTR [rax],eax
 1016eb8:	cmp    BYTE PTR [rax+rax*1+0x0],0xd9
 1016ebd:	jl     0x1016ebf
 1016ebf:	add    BYTE PTR [rsi+rbp*2+0x7210001],ah
 1016ec6:	add    al,0x0
 1016ec8:	(bad)  
 1016ec9:	hlt    
 1016eca:	or     al,BYTE PTR [rax]
 1016ecc:	add    ah,ah
 1016ece:	or     DWORD PTR [rax],eax
 1016ed0:	cmp    BYTE PTR [rax+rax*1+0x0],0xd9
 1016ed5:	jl     0x1016ed7
 1016ed7:	add    BYTE PTR [rsi+rbp*2+0x5210001],ah
 1016ede:	add    al,BYTE PTR [rax]
 1016ee0:	add    eax,0xf9000864
 1016ee5:	jl     0x1016ee7
 1016ee7:	add    BYTE PTR [rdx],dl
 1016ee9:	jge    0x1016eeb
 1016eeb:	add    ah,al
 1016eed:	outs   dx,BYTE PTR ds:[rsi]
 1016eee:	add    DWORD PTR [rax],eax
 1016ef0:	and    DWORD PTR [rax],eax
 1016ef2:	add    BYTE PTR [rax],al
 1016ef4:	stc    
 1016ef5:	jl     0x1016ef7
 1016ef7:	add    BYTE PTR [rdx],dl
 1016ef9:	jge    0x1016efb
 1016efb:	add    ah,al
 1016efd:	outs   dx,BYTE PTR ds:[rsi]
 1016efe:	add    DWORD PTR [rax],eax
 1016f00:	and    DWORD PTR [rax],eax
 1016f02:	(bad)  
 1016f03:	add    BYTE PTR [rax],al
 1016f05:	hlt    
 1016f06:	or     al,BYTE PTR [rax]
 1016f08:	add    ah,ah
 1016f0a:	or     DWORD PTR [rax],eax
 1016f0c:	add    BYTE PTR [rax+rcx*1+0x0],ah
 1016f10:	cmp    BYTE PTR [rax+rax*1+0x0],0xd9
 1016f15:	jl     0x1016f17
 1016f17:	add    BYTE PTR [rsi+rbp*2+0x210001],ah
 1016f1e:	add    BYTE PTR [rax],al
 1016f20:	cmp    BYTE PTR [rax+rax*1+0x0],0xd9
 1016f25:	jl     0x1016f27
 1016f27:	add    BYTE PTR [rsi+rbp*2+0x65010001],ah
 1016f2e:	or     al,BYTE PTR [rax]
 1016f30:	gs je  0x1016f39
 1016f33:	add    BYTE PTR [rip+0x15000964],dl        # 0x1601789d
 1016f39:	push   rsp
 1016f3a:	or     BYTE PTR [rax],al
 1016f3c:	adc    eax,0x15000734
 1016f41:	xor    dl,BYTE PTR [rcx]
 1016f43:	loopne 0x1016f46
 1016f45:	movabs ds:0x6410000674a30008,eax
 1016f4e:	or     BYTE PTR [rax],al
 1016f50:	adc    BYTE PTR [rdi+rax*1],dh
 1016f53:	add    BYTE PTR [rax],dl
 1016f55:	xor    cl,BYTE PTR [rax+riz*8]
 1016f58:	add    DWORD PTR [rsi-0x3b59fff6],esp
 1016f5e:	sbb    DWORD PTR [rax],eax
 1016f60:	sahf   
 1016f61:	xor    al,0x16
 1016f63:	add    BYTE PTR [rdx],dl
 1016f65:	add    DWORD PTR [rcx],edx
 1016f67:	add    BYTE PTR [rbx],cl
 1016f69:	loopne 0x1016f74
 1016f6b:	rol    BYTE PTR [rdi],1
 1016f6d:	jo     0x1016f75
 1016f6f:	push   rax
 1016f70:	and    DWORD PTR [rax],edx
 1016f72:	add    al,0x0
 1016f74:	adc    ah,dh
 1016f76:	adc    BYTE PTR [rax],al
 1016f78:	or     BYTE PTR [rax+rbx*1+0x0],ah
 1016f7c:	rol    BYTE PTR [rax-0x7de90000],0x0
 1016f83:	add    BYTE PTR [rax+0x6f],bl
 1016f86:	add    DWORD PTR [rax],eax
 1016f88:	add    esp,eax
 1016f8a:	or     al,BYTE PTR [rax]
 1016f8c:	(bad)  
 1016f8d:	(bad)  
 1016f8e:	sbb    BYTE PTR [rax],al
 1016f90:	mov    eax,0x13001634
 1016f95:	repnz or al,0xe0
 1016f98:	or     dl,al
 1016f9a:	or     BYTE PTR [rax+0x7],dh
 1016f9d:	(bad)  
 1016f9e:	(bad)  
 1016f9f:	push   rax
 1016fa0:	and    DWORD PTR [rax],ecx
 1016fa2:	add    al,BYTE PTR [rax]
 1016fa4:	or     ah,dh
 1016fa6:	sbb    DWORD PTR [rax],eax
 1016fa8:	add    BYTE PTR [rbx-0x7b730000],al
 1016fae:	add    BYTE PTR [rax],al
 1016fb0:	mov    BYTE PTR [rdi+0x1],ch
 1016fb3:	add    BYTE PTR [rcx],al
 1016fb5:	sbb    cl,BYTE PTR [rdx]
 1016fb7:	add    BYTE PTR [rdx],bl
 1016fb9:	je     0x1016fca
 1016fbb:	add    BYTE PTR [rdx],bl
 1016fbd:	fs (bad) 
 1016fbf:	add    BYTE PTR [rdx],bl
 1016fc1:	push   rsp
 1016fc2:	or     eax,0xc341a00
 1016fc7:	add    BYTE PTR [rdx],bl
 1016fc9:	xchg   edx,eax
 1016fca:	(bad)  
 1016fcb:	loopne 0x1016fce
 1016fcd:	(bad)  
 1016fce:	add    al,BYTE PTR [rax]
 1016fd0:	(bad)  
 1016fd1:	xor    al,BYTE PTR [rdx]
 1016fd3:	jo     0x1016ff6
 1016fd5:	add    eax,0x34050002
 1016fda:	(bad)  
 1016fdb:	add    al,ah
 1016fdd:	xchg   BYTE PTR [rax],al
 1016fdf:	add    BYTE PTR [rip+0xffffffffcc000087],al        # 0xffffffffcd01706c
 1016fe5:	outs   dx,DWORD PTR ds:[rsi]
 1016fe6:	add    DWORD PTR [rax],eax
 1016fe8:	and    DWORD PTR [rax],eax
 1016fea:	add    BYTE PTR [rax],al
 1016fec:	loopne 0x1016f74
 1016fee:	add    BYTE PTR [rax],al
 1016ff0:	add    eax,0xcc000087
 1016ff5:	outs   dx,DWORD PTR ds:[rsi]
 1016ff6:	add    DWORD PTR [rax],eax
 1016ff8:	add    DWORD PTR [rsi],eax
 1016ffa:	add    al,BYTE PTR [rax]
 1016ffc:	(bad)  
 1016ffd:	xor    al,BYTE PTR [rdx]
 1016fff:	xor    BYTE PTR [rcx],bl
 1017001:	xor    eax,0x68240008
 1017006:	sub    al,0x0
 1017008:	adc    al,0x1
 101700a:	pop    rbx
 101700b:	add    BYTE PTR [rip+0x3600470],al        # 0x4617481
 1017011:	xor    BYTE PTR [rdx],al
 1017013:	push   rax
 1017014:	mov    bl,bl
 1017016:	add    BYTE PTR [rax],al
 1017018:	pop    rax
 1017019:	sbb    eax,DWORD PTR [rax]
 101701b:	add    BYTE PTR [rdx-0xfffffe],dh
 1017021:	(bad)  
 1017022:	(bad)  
 1017023:	push   QWORD PTR [rax+0x5f]
 1017026:	add    DWORD PTR [rax],eax
 1017028:	add    BYTE PTR [rax],al
 101702a:	add    BYTE PTR [rax],al
 101702c:	sbb    BYTE PTR [rdi+0x1],0x0
 1017030:	mov    al,0x87
 1017032:	add    BYTE PTR [rax],al
 1017034:	(bad)  
 1017035:	(bad)  
 1017036:	(bad)  
 1017037:	push   QWORD PTR [rax]
 1017039:	mov    BYTE PTR [rax],al
 101703b:	add    BYTE PTR [rax],al
 101703d:	add    BYTE PTR [rax],al
 101703f:	add    BYTE PTR [rax-0x78],al
 1017042:	add    BYTE PTR [rax],al
 1017044:	add    DWORD PTR [rax],eax
 1017046:	add    BYTE PTR [rax],al
 1017048:	outs   dx,BYTE PTR ds:[rsi]
 1017049:	mov    WORD PTR [rax],es
 101704b:	add    BYTE PTR [rax],al
 101704d:	add    BYTE PTR [rax],al
 101704f:	add    BYTE PTR [rsp+rcx*4-0x10000],dl
 1017056:	(bad)  
 1017057:	call   FWORD PTR [rcx]
 1017059:	sbb    eax,0x1150009
 101705e:	sbb    al,0x0
 1017060:	(bad)  
 1017061:	lock or al,0xe0
 1017064:	or     dl,al
 1017066:	or     al,al
 1017068:	(bad)  
 1017069:	jo     0x1017070
 101706b:	(bad)  
 101706c:	add    al,0x30
 101706e:	add    BYTE PTR [rax],al
 1017070:	add    bl,ch
 1017072:	add    BYTE PTR [rax],al
 1017074:	sbb    BYTE PTR [rbx],0x0
 1017077:	add    bh,bh
 1017079:	(bad)  
 101707a:	(bad)  
 101707b:	call   QWORD PTR [rax+0x15e]
 1017081:	add    BYTE PTR [rax],al
 1017083:	add    BYTE PTR [rax+0x100015e],ah
 1017089:	add    BYTE PTR [rax],al
 101708b:	add    BYTE PTR [rax+0x200015e],dh
 1017091:	add    BYTE PTR [rax],al
 1017093:	add    al,al
 1017095:	pop    rsi
 1017096:	add    DWORD PTR [rax],eax
 1017098:	add    eax,DWORD PTR [rax]
 101709a:	add    BYTE PTR [rax],al
 101709c:	rcr    BYTE PTR [rsi+0x1],1
 101709f:	add    BYTE PTR [rax+rax*1],al
 10170a2:	add    BYTE PTR [rax],al
 10170a4:	loopne 0x1017104
 10170a6:	add    DWORD PTR [rax],eax
 10170a8:	add    eax,0xf0000000
 10170ad:	pop    rsi
 10170ae:	add    DWORD PTR [rax],eax
 10170b0:	(bad)  
 10170b1:	add    BYTE PTR [rax],al
 10170b3:	add    BYTE PTR [rax],al
 10170b5:	add    BYTE PTR [rax],al
 10170b7:	add    BYTE PTR [rsi],al
 10170b9:	add    BYTE PTR [rax],al
 10170bb:	add    BYTE PTR [rax],al
 10170bd:	add    BYTE PTR [rax],al
 10170bf:	add    BYTE PTR [rdi],al
 10170c1:	add    BYTE PTR [rax],al
 10170c3:	add    BYTE PTR [rdi],al
 10170c5:	add    BYTE PTR [rax],al
 10170c7:	add    BYTE PTR [rax],cl
 10170c9:	add    BYTE PTR [rax],al
 10170cb:	add    BYTE PTR [rcx],al
 10170cd:	add    BYTE PTR [rax],al
 10170cf:	add    ah,dl
 10170d1:	jo     0x10170d4
 10170d3:	add    BYTE PTR [rax],al
 10170d5:	add    BYTE PTR [rax],al
 10170d7:	add    BYTE PTR [rax],al
 10170d9:	mov    cl,0x1
 10170db:	add    al,dl
 10170dd:	add    BYTE PTR [rax],al
 10170df:	add    BYTE PTR [rax],al
 10170e1:	pop    rdi
 10170e2:	add    DWORD PTR [rax],eax
 10170e4:	pop    rax
 10170e5:	add    BYTE PTR [rax],al
 10170e7:	add    BYTE PTR [rax],ah
 10170e9:	lea    eax,[rax]
 10170eb:	add    bh,bh
 10170ed:	(bad)  
 10170ee:	(bad)  
 10170ef:	call   QWORD PTR [rbp+rcx*4+0x0]
 10170f3:	add    BYTE PTR [rax],al
 10170f5:	add    BYTE PTR [rax],al
 10170f7:	add    BYTE PTR [rcx+0x100008d],dl
 10170fd:	add    BYTE PTR [rax],al
 10170ff:	add    BYTE PTR [rcx+0x200008d],bl
 1017105:	add    BYTE PTR [rax],al
 1017107:	add    BYTE PTR [rcx+0x300008d],ah
 101710d:	add    BYTE PTR [rax],al
 101710f:	add    BYTE PTR [rcx+0x400008d],ch
 1017115:	add    BYTE PTR [rax],al
 1017117:	add    BYTE PTR [rcx+0x500008d],dh
 101711d:	add    BYTE PTR [rax],al
 101711f:	add    BYTE PTR [rax+0x700008d],bh
 1017125:	add    BYTE PTR [rax],al
 1017127:	add    BYTE PTR [rsi],bl
 1017129:	xchg   ebp,eax
 101712a:	add    BYTE PTR [rax],al
 101712c:	(bad)  
 101712d:	add    BYTE PTR [rax],al
 101712f:	add    BYTE PTR [rcx-0x6b],ah
 1017132:	add    BYTE PTR [rax],al
 1017134:	add    eax,0x6b000000
 1017139:	xchg   ebp,eax
 101713a:	add    BYTE PTR [rax],al
 101713c:	add    al,0x0
 101713e:	add    BYTE PTR [rax],al
 1017140:	jne    0x10170d7
 1017142:	add    BYTE PTR [rax],al
 1017144:	add    eax,DWORD PTR [rax]
 1017146:	add    BYTE PTR [rax],al
 1017148:	jg     0x10170df
 101714a:	add    BYTE PTR [rax],al
 101714c:	add    al,BYTE PTR [rax]
 101714e:	add    BYTE PTR [rax],al
 1017150:	mov    DWORD PTR [rbp+0x10000],edx
 1017156:	add    BYTE PTR [rax],al
 1017158:	xchg   ebx,eax
 1017159:	xchg   ebp,eax
 101715a:	add    BYTE PTR [rax],al
 101715c:	add    BYTE PTR [rax],al
 101715e:	add    BYTE PTR [rax],al
 1017160:	movabs ds:0xffffffff000095,eax
 1017169:	pop    rdi
 101716a:	add    DWORD PTR [rax],eax
 101716c:	add    BYTE PTR [rax],al
 101716e:	add    BYTE PTR [rax],al
 1017170:	or     eax,0x800015f
 1017175:	add    BYTE PTR [rax],al
 1017177:	add    BYTE PTR [rdx],ah
 1017179:	pop    rdi
 101717a:	add    DWORD PTR [rax],eax
 101717c:	add    BYTE PTR [rax],al
 101717e:	add    BYTE PTR [rax],al
 1017180:	sbb    DWORD PTR [rdx],ecx
 1017182:	add    al,BYTE PTR [rax]
 1017184:	or     dh,BYTE PTR [rdx+0x6]
 1017187:	push   rax
 1017188:	add    bl,ch
 101718a:	add    BYTE PTR [rax],al
 101718c:	sbb    BYTE PTR [rbx],0x0
 101718f:	add    BYTE PTR [rcx],al
 1017191:	add    al,0x1
 1017193:	add    BYTE PTR [rdx+rax*2],al
 1017196:	add    BYTE PTR [rax],al
 1017198:	add    DWORD PTR [rcx+rax*1],eax
 101719b:	add    BYTE PTR [rdx+rax*4],al
 101719e:	add    BYTE PTR [rax],al
 10171a0:	sbb    DWORD PTR [rip+0x641d0008],ebx        # 0x651e71ae
 10171a6:	(bad)  
 10171a7:	add    BYTE PTR [rax],bl
 10171a9:	xor    al,0xc
 10171ab:	add    BYTE PTR [rdx],cl
 10171ad:	jb     0x10171b5
 10171af:	lock add al,0xe0
 10171b2:	add    dh,BYTE PTR [rax+0x2]
 10171b5:	fld    QWORD PTR [rax]
 10171b7:	add    BYTE PTR [rax-0xffffe5],ch
 10171bd:	(bad)  
 10171be:	(bad)  
 10171bf:	inc    DWORD PTR [rax]
 10171c1:	add    BYTE PTR [rax],al
 10171c3:	add    bh,bh
 10171c5:	(bad)  
 10171c6:	(bad)  
 10171c7:	inc    DWORD PTR [rax]
	...
 10171d1:	add    BYTE PTR [rax],al
 10171d3:	add    BYTE PTR [rcx],al
 10171d5:	add    BYTE PTR [rax],al
 10171d7:	add    BYTE PTR [rcx],al
 10171d9:	add    BYTE PTR [rax],al
 10171db:	add    al,ah
 10171dd:	jno    0x10171e0
 10171df:	add    BYTE PTR [rax+0x0],al
	...
 10171ea:	add    BYTE PTR [rax],al
 10171ec:	rex pop rdi
 10171ee:	add    DWORD PTR [rax],eax
 10171f0:	rex.W add BYTE PTR [rax],al
 10171f3:	add    BYTE PTR [rax-0xffff6a],al
 10171f9:	(bad)  
 10171fa:	(bad)  
 10171fb:	inc    DWORD PTR [rdx]
 10171fd:	xchg   edi,eax
 10171fe:	add    BYTE PTR [rax],al
 1017200:	add    BYTE PTR [rax],al
 1017202:	add    BYTE PTR [rax],al
 1017204:	sub    BYTE PTR [rdi-0x10000],dl
 101720a:	(bad)  
 101720b:	inc    DWORD PTR [rax+0x5f]
 101720e:	add    DWORD PTR [rax],eax
 1017210:	add    BYTE PTR [rax],al
 1017212:	add    BYTE PTR [rax],al
 1017214:	rex.WRB pop r15
 1017216:	add    DWORD PTR [rax],eax
 1017218:	add    DWORD PTR [rax],eax
 101721a:	add    BYTE PTR [rax],al
 101721c:	sbb    DWORD PTR [rdx],ecx
 101721e:	add    al,BYTE PTR [rax]
 1017220:	or     dl,BYTE PTR [rdx+0x6]
 1017223:	push   rax
 1017224:	add    bl,ch
 1017226:	add    BYTE PTR [rax],al
 1017228:	test   al,0x1b
 101722a:	add    BYTE PTR [rax],al
 101722c:	adc    DWORD PTR [rsp+rax*1],edx
 101722f:	add    BYTE PTR [rsp+rsi*1],dl
 1017232:	or     al,BYTE PTR [rax]
 1017234:	(bad)  
 1017235:	push   rdx
 1017236:	add    dh,BYTE PTR [rax+0x2]
 1017239:	fld    QWORD PTR [rax]
 101723b:	add    al,dl
 101723d:	sbb    eax,DWORD PTR [rax]
 101723f:	add    bh,bh
 1017241:	(bad)  
 1017242:	(bad)  
 1017243:	jmp    QWORD PTR [rax-0xfffea1]
 1017249:	(bad)  
 101724a:	(bad)  
 101724b:	inc    eax
 101724d:	pop    rdi
 101724e:	add    DWORD PTR [rax],eax
 1017250:	mov    al,0x97
 1017252:	add    BYTE PTR [rax],al
 1017254:	(bad)  
 1017255:	(bad)  
 1017256:	(bad)  
 1017257:	jmp    FWORD PTR [rax]
 1017259:	cwde   
 101725a:	add    BYTE PTR [rax],al
 101725c:	add    BYTE PTR [rax],al
 101725e:	add    BYTE PTR [rax],al
 1017260:	rex.WXB cdqe 
 1017262:	add    BYTE PTR [rax],al
 1017264:	(bad)  
 1017265:	(bad)  
 1017266:	(bad)  
 1017267:	jmp    FWORD PTR [rsi-0x68]
 101726a:	add    BYTE PTR [rax],al
 101726c:	add    DWORD PTR [rax],eax
 101726e:	add    BYTE PTR [rax],al
 1017270:	xchg   esp,eax
 1017271:	cwde   
 1017272:	add    BYTE PTR [rax],al
 1017274:	(bad)  
 1017275:	(bad)  
 1017276:	(bad)  
 1017277:	inc    DWORD PTR [rcx]
 1017279:	(bad)  
 101727a:	add    al,BYTE PTR [rax]
 101727c:	(bad)  
 101727d:	xor    al,BYTE PTR [rdx]
 101727f:	push   rax
 1017280:	add    DWORD PTR [rsi],eax
 1017282:	add    al,BYTE PTR [rax]
 1017284:	(bad)  
 1017285:	xor    al,BYTE PTR [rdx]
 1017287:	push   rax
 1017288:	add    DWORD PTR [rdi],ecx
 101728a:	add    al,0x0
 101728c:	sysenter 
 101728e:	(bad)  
 101728f:	add    BYTE PTR [rdi],cl
 1017291:	xor    cl,BYTE PTR [rbx]
 1017293:	jo     0x10172b6
 1017295:	add    eax,0x64050002
 101729a:	(bad)  
 101729b:	add    BYTE PTR [rax-0x40ffff68],dh
 10172a1:	cwde   
 10172a2:	add    BYTE PTR [rax],al
 10172a4:	mov    BYTE PTR [rdx+0x1],dh
 10172a7:	add    BYTE PTR [rcx],ah
 10172a9:	add    BYTE PTR [rax],al
 10172ab:	add    BYTE PTR [rax-0x40ffff68],dh
 10172b1:	cwde   
 10172b2:	add    BYTE PTR [rax],al
 10172b4:	mov    BYTE PTR [rdx+0x1],dh
 10172b7:	add    BYTE PTR [rcx],al
 10172b9:	(bad)  
 10172ba:	add    al,BYTE PTR [rax]
 10172bc:	(bad)  
 10172bd:	xor    al,BYTE PTR [rdx]
 10172bf:	jo     0x10172c2
 10172c1:	or     al,BYTE PTR [rax+rax*1]
 10172c4:	or     dl,BYTE PTR [rax+rcx*1+0x0]
 10172c8:	or     dh,BYTE PTR [rdx]
 10172ca:	(bad)  
 10172cb:	jo     0x10172ee
 10172cd:	or     al,BYTE PTR [rax+rax*1]
 10172d0:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 10172d4:	add    eax,0xc0000634
 10172d9:	cdq    
 10172da:	add    BYTE PTR [rax],al
 10172dc:	(bad)  
 10172dd:	cdq    
 10172de:	add    BYTE PTR [rax],al
 10172e0:	shl    BYTE PTR [rdx+0x1],0x0
 10172e4:	and    DWORD PTR [rax],eax
 10172e6:	add    BYTE PTR [rax],al
 10172e8:	rcr    BYTE PTR [rcx-0x662c0000],0x0
 10172ef:	add    al,al
 10172f1:	jb     0x10172f4
 10172f3:	add    BYTE PTR [rcx],bl
 10172f5:	sbb    al,0x5
 10172f7:	add    BYTE PTR [rbx],dl
 10172f9:	(bad)  
 10172fa:	pavgb  mm1,QWORD PTR [rip+0xb600c70]        # 0xc617f71
 1017301:	xor    BYTE PTR [rax],al
 1017303:	add    BYTE PTR [rdx],al
 1017305:	fld    QWORD PTR [rax]
 1017307:	add    al,bh
 1017309:	sbb    eax,DWORD PTR [rax]
 101730b:	add    bh,bh
 101730d:	(bad)  
 101730e:	(bad)  
 101730f:	inc    DWORD PTR [rax]
 1017311:	add    BYTE PTR [rax],al
 1017313:	add    BYTE PTR [rax],al
 1017315:	add    BYTE PTR [rax],al
 1017317:	add    BYTE PTR [rax],ah
 1017319:	pop    rsi
 101731a:	add    DWORD PTR [rax],eax
 101731c:	(bad)  
 101731d:	(bad)  
 101731e:	(bad)  
 101731f:	inc    DWORD PTR [rax]
 1017321:	add    BYTE PTR [rax],al
 1017323:	add    BYTE PTR [rax],al
 1017325:	add    BYTE PTR [rax],al
 1017327:	add    BYTE PTR [rcx],al
 1017329:	add    BYTE PTR [rax],al
 101732b:	add    BYTE PTR [rdx],al
 101732d:	add    BYTE PTR [rax],al
 101732f:	add    BYTE PTR [rcx],al
 1017331:	add    BYTE PTR [rax],al
 1017333:	add    BYTE PTR [rax],bh
 1017335:	jae    0x1017338
 1017337:	add    BYTE PTR [rax+0x0],al
	...
 1017342:	add    BYTE PTR [rax],al
 1017344:	rex pop rsi
 1017346:	add    DWORD PTR [rax],eax
 1017348:	pop    rax
 1017349:	add    BYTE PTR [rax],al
 101734b:	add    BYTE PTR [rax-0x66],dl
 101734e:	add    BYTE PTR [rax],al
 1017350:	(bad)  
 1017351:	(bad)  
 1017352:	(bad)  
 1017353:	(bad)  
 1017354:	jp     0x10172f0
 1017356:	add    BYTE PTR [rax],al
 1017358:	add    BYTE PTR [rax],al
 101735a:	add    BYTE PTR [rax],al
 101735c:	mov    bl,BYTE PTR [rdx+0x10000]
 1017362:	add    BYTE PTR [rax],al
 1017364:	stos   DWORD PTR es:[rdi],eax
 1017365:	(bad)  
 1017366:	add    BYTE PTR [rax],al
 1017368:	add    BYTE PTR [rax],al
 101736a:	add    BYTE PTR [rax],al
 101736c:	mov    edx,0xff00009a
 1017371:	(bad)  
 1017372:	(bad)  
 1017373:	inc    DWORD PTR [rax+0x5e]
 1017376:	add    DWORD PTR [rax],eax
 1017378:	add    BYTE PTR [rax],al
 101737a:	add    BYTE PTR [rax],al
 101737c:	push   rax
 101737d:	pop    rsi
 101737e:	add    DWORD PTR [rax],eax
 1017380:	add    al,BYTE PTR [rax]
 1017382:	add    BYTE PTR [rax],al
 1017384:	add    DWORD PTR [rsi],eax
 1017386:	add    al,BYTE PTR [rax]
 1017388:	(bad)  
 1017389:	xor    al,BYTE PTR [rdx]
 101738b:	push   rax
 101738c:	sbb    DWORD PTR [rip+0x420d0005],ecx        # 0x430e7397
 1017392:	or     DWORD PTR [rax+0x8],esi
 1017395:	(bad)  
 1017396:	(bad)  
 1017397:	push   rax
 1017398:	(bad)  
 1017399:	xor    BYTE PTR [rax],al
 101739b:	add    BYTE PTR [rdx],al
 101739d:	fld    QWORD PTR [rax]
 101739f:	add    al,bh
 10173a1:	sbb    eax,DWORD PTR [rax]
 10173a3:	add    BYTE PTR [rcx],al
 10173a5:	(bad)  
 10173a6:	add    al,BYTE PTR [rax]
 10173a8:	(bad)  
 10173a9:	xor    al,BYTE PTR [rdx]
 10173ab:	xor    BYTE PTR [rcx],al
 10173ad:	adc    al,0x8
 10173af:	add    BYTE PTR [rsp+riz*2],dl
 10173b2:	or     BYTE PTR [rax],al
 10173b4:	adc    al,0x54
 10173b6:	(bad)  
 10173b7:	add    BYTE PTR [rsp+rsi*1],dl
 10173ba:	(bad)  
 10173bb:	add    BYTE PTR [rdx+rsi*1],dl
 10173be:	adc    BYTE PTR [rax+0x1],dh
 10173c1:	adc    cl,BYTE PTR [rax]
 10173c3:	add    BYTE PTR [rdx],dl
 10173c5:	xor    al,0x12
 10173c7:	add    BYTE PTR [rdx],dl
 10173c9:	xchg   edx,eax
 10173ca:	(bad)  
 10173cb:	lock or al,0xe0
 10173ce:	or     dl,al
 10173d0:	or     al,al
 10173d2:	(bad)  
 10173d3:	(bad)  
 10173d4:	and    DWORD PTR [rax],edx
 10173d6:	add    al,0x0
 10173d8:	adc    BYTE PTR [rcx+rdx*1+0x0],dh
 10173dc:	or     BYTE PTR [rax+rdx*1+0x0],dl
 10173e0:	add    BYTE PTR [rbp-0x62640000],bl
 10173e6:	add    BYTE PTR [rax],al
 10173e8:	shl    BYTE PTR [rbx+0x1],0x0
 10173ec:	and    DWORD PTR [rax],eax
 10173ee:	add    BYTE PTR [rax],al
 10173f0:	add    BYTE PTR [rbp-0x62640000],bl
 10173f6:	add    BYTE PTR [rax],al
 10173f8:	shl    BYTE PTR [rbx+0x1],0x0
 10173fc:	add    DWORD PTR [rsi+rax*1],ecx
 10173ff:	add    BYTE PTR [rdx+rsi*2],cl
 1017402:	or     al,ah
 1017404:	(bad)  
 1017405:	rol    BYTE PTR [rax+rsi*2],1
 1017408:	add    esp,DWORD PTR [rax+0x2]
 101740b:	push   rax
 101740c:	and    DWORD PTR [rax],ecx
 101740e:	add    al,BYTE PTR [rax]
 1017410:	or     ah,dh
 1017412:	adc    BYTE PTR [rax],al
 1017414:	mov    al,0x9e
 1017416:	add    BYTE PTR [rax],al
 1017418:	repnz lahf 
 101741a:	add    BYTE PTR [rax],al
 101741c:	cld    
 101741d:	jae    0x1017420
 101741f:	add    BYTE PTR [rcx],ah
 1017421:	add    eax,0x34050002
 1017426:	(bad)  
 1017428:	repnz lahf 
 101742a:	add    BYTE PTR [rax],al
 101742c:	sub    al,0xa0
 101742e:	add    BYTE PTR [rax],al
 1017430:	or     al,0x74
 1017432:	add    DWORD PTR [rax],eax
 1017434:	and    DWORD PTR [rax],eax
 1017436:	add    BYTE PTR [rax],al
 1017438:	repnz lahf 
 101743a:	add    BYTE PTR [rax],al
 101743c:	sub    al,0xa0
 101743e:	add    BYTE PTR [rax],al
 1017440:	or     al,0x74
 1017442:	add    DWORD PTR [rax],eax
 1017444:	add    DWORD PTR [rdi],ecx
 1017446:	(bad)  
 1017447:	add    BYTE PTR [rdi],cl
 1017449:	push   rsp
 101744a:	or     eax,DWORD PTR [rax]
 101744c:	sysenter 
 101744e:	or     al,BYTE PTR [rax]
 1017450:	rsqrtps xmm1,XMMWORD PTR [rbx]
 1017453:	jo     0x1017476
 1017455:	(bad)  
 1017456:	add    al,0x0
 1017458:	(bad)  
 1017459:	in     al,0x9
 101745b:	add    BYTE PTR [rip+0xffffffffb0000864],al        # 0xffffffffb1017cc5
 1017461:	movabs al,ds:0x74440000a0dc0000
 101746a:	add    DWORD PTR [rax],eax
 101746c:	and    DWORD PTR [rax],eax
 101746e:	add    BYTE PTR [rax],al
 1017470:	mov    al,0xa0
 1017472:	add    BYTE PTR [rax],al
 1017474:	fsub   QWORD PTR [rax+0x74440000]
 101747a:	add    DWORD PTR [rax],eax
 101747c:	add    DWORD PTR [rdx],ecx
 101747e:	add    al,0x0
 1017480:	or     ah,BYTE PTR [rbx+rcx*1+0x0]
 1017484:	or     dl,BYTE PTR [rdx+0x6]
 1017487:	jo     0x10174aa
 1017489:	adc    al,BYTE PTR [rsi]
 101748b:	add    BYTE PTR [rdx],dl
 101748d:	in     al,0xa
 101748f:	add    BYTE PTR [rdx],cl
 1017491:	push   rsp
 1017492:	or     DWORD PTR [rax],eax
 1017494:	add    eax,0x80000834
 1017499:	movabs eax,ds:0x747c0000a1900000
 10174a2:	add    DWORD PTR [rax],eax
 10174a4:	and    DWORD PTR [rax],eax
 10174a6:	add    BYTE PTR [rax],al
 10174a8:	and    BYTE PTR [rcx-0x5e700000],0x0
 10174af:	add    BYTE PTR [rsp+rsi*2+0x1],bh
 10174b3:	add    BYTE PTR [rcx],bl
 10174b5:	cmp    al,0xb
 10174b7:	add    BYTE PTR [rbx],ch
 10174b9:	xor    al,0x3f
 10174bb:	add    BYTE PTR [rbx],bl
 10174bd:	add    DWORD PTR [rax+rax*1],esi
 10174c0:	or     al,0xf0
 10174c2:	or     ah,al
 10174c4:	or     al,dl
 10174c6:	(bad)  
 10174c7:	rol    BYTE PTR [rax+rsi*2],0x3
 10174cb:	(bad)  
 10174cc:	add    dl,BYTE PTR [rax+0x0]
 10174cf:	add    BYTE PTR [rax-0x7ffff25],cl
 10174d5:	sbb    al,0x0
 10174d7:	add    BYTE PTR [rdx-0xffffff],dl
 10174dd:	(bad)  
 10174de:	(bad)  
 10174df:	push   rax
 10174e1:	(bad)  
 10174e2:	add    DWORD PTR [rax],eax
 10174e4:	add    BYTE PTR [rax],al
 10174e6:	add    BYTE PTR [rax],al
 10174e8:	add    BYTE PTR [rcx+0x1],ah
 10174eb:	add    BYTE PTR [rcx],al
 10174ed:	add    BYTE PTR [rax],al
 10174ef:	add    BYTE PTR [rax],dl
 10174f1:	(bad)  
 10174f2:	add    DWORD PTR [rax],eax
 10174f4:	(bad)  
 10174f5:	movabs ds:0xa2f1ffffffff0000,al
 10174fe:	add    BYTE PTR [rax],al
 1017500:	add    BYTE PTR [rax],al
 1017502:	add    BYTE PTR [rax],al
 1017504:	std    
 1017505:	movabs ds:0xa308000000010000,al
 101750e:	add    BYTE PTR [rax],al
 1017510:	add    al,BYTE PTR [rax]
 1017512:	add    BYTE PTR [rax],al
 1017514:	rex.WX movabs ds:0xa355000000010000,rax
 101751e:	add    BYTE PTR [rax],al
 1017520:	add    BYTE PTR [rax],al
 1017522:	add    BYTE PTR [rax],al
 1017524:	(bad)  
 1017525:	movabs ds:0xa370ffffffff0000,eax
 101752e:	add    BYTE PTR [rax],al
 1017530:	add    al,BYTE PTR [rax]
 1017532:	add    BYTE PTR [rax],al
 1017534:	jmp    0x10174db
 1017536:	add    BYTE PTR [rax],al
 1017538:	add    DWORD PTR [rax],eax
 101753a:	add    BYTE PTR [rax],al
 101753c:	mul    BYTE PTR [rbp+0x0]
 1017542:	add    BYTE PTR [rax],al
 1017544:	add    ah,BYTE PTR [rsi-0x10000]
 101754a:	(bad)  
 101754b:	call   FWORD PTR [rcx]
 101754d:	xor    eax,0x11c000a
 1017552:	rex.WRXB add BYTE PTR [rip+0x9e00bf0],r9b        # 0xae18149
 1017559:	rol    BYTE PTR [rdi],1
 101755b:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x46179d2
 1017562:	add    dl,BYTE PTR [rax-0x78]
 1017565:	fild   DWORD PTR [rax]
 1017567:	add    BYTE PTR [rax],ah
 1017569:	sbb    eax,0x2620000
 101756e:	add    BYTE PTR [rax],al
 1017570:	(bad)  
 1017571:	(bad)  
 1017572:	(bad)  
 1017573:	push   QWORD PTR [rax]
 1017575:	(bad)  
 1017576:	add    DWORD PTR [rax],eax
 1017578:	add    BYTE PTR [rax],al
 101757a:	add    BYTE PTR [rax],al
 101757c:	rex (bad) 
 101757e:	add    DWORD PTR [rax],eax
 1017580:	rex cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1017582:	add    BYTE PTR [rax],al
 1017584:	(bad)  
 1017585:	(bad)  
 1017586:	(bad)  
 1017587:	(bad)  
 1017588:	frstor [rsi+0x0]
 101758e:	add    BYTE PTR [rax],al
 1017590:	sbb    esp,DWORD PTR [rdi-0x10000]
 1017596:	(bad)  
 1017597:	jmp    QWORD PTR [rdx]
 1017599:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 101759a:	add    BYTE PTR [rax],al
 101759c:	add    BYTE PTR [rax],al
 101759e:	add    BYTE PTR [rax],al
 10175a0:	jmp    QWORD PTR [rdi+0x10000]
 10175a6:	add    BYTE PTR [rax],al
 10175a8:	add    BYTE PTR [rdx+0x0],ch
 10175ae:	add    BYTE PTR [rax],al
 10175b0:	xor    DWORD PTR [rdx-0x10000],ebp
 10175b6:	(bad)  
 10175b7:	call   FWORD PTR [rcx]
 10175b9:	sub    ecx,DWORD PTR [rbx]
 10175bb:	add    BYTE PTR [rbx],ch
 10175bd:	sub    al,BYTE PTR fs:[rax]
 10175c0:	(bad)  
 10175c1:	xor    al,0x28
 10175c3:	add    BYTE PTR [rbx],bl
 10175c5:	add    DWORD PTR [rdx],esp
 10175c7:	add    BYTE PTR [rax+rsi*8],dl
 10175ca:	adc    ah,al
 10175cc:	adc    al,dl
 10175ce:	(bad)  
 10175cf:	ror    BYTE PTR [rax+rsi*2],0x0
 10175d3:	add    BYTE PTR [rdx],al
 10175d5:	fld    QWORD PTR [rax]
 10175d7:	add    BYTE PTR [rax+0x1d],cl
 10175da:	add    BYTE PTR [rax],al
 10175dc:	(bad)  
 10175dd:	(bad)  
 10175de:	(bad)  
 10175df:	inc    DWORD PTR [rax]
 10175e1:	add    BYTE PTR [rax],al
 10175e3:	add    BYTE PTR [rax],al
 10175e5:	add    BYTE PTR [rax],al
 10175e7:	add    al,dh
 10175e9:	pop    rdi
 10175ea:	add    DWORD PTR [rax],eax
 10175ec:	add    DWORD PTR [rax],eax
 10175ee:	add    BYTE PTR [rax],al
 10175f0:	add    BYTE PTR [rax+0x1],ah
 10175f3:	add    BYTE PTR [rdx],al
 10175f5:	add    BYTE PTR [rax],al
 10175f7:	add    BYTE PTR [rax],dl
 10175f9:	(bad)  
 10175fa:	add    DWORD PTR [rax],eax
 10175fc:	add    eax,DWORD PTR [rax]
 10175fe:	add    BYTE PTR [rax],al
 1017600:	and    BYTE PTR [rax+0x1],ah
 1017603:	add    BYTE PTR [rax+rax*1],al
 1017606:	add    BYTE PTR [rax],al
 1017608:	xor    BYTE PTR [rax+0x1],ah
 101760b:	add    BYTE PTR [rax+rax*1],al
 101760e:	add    BYTE PTR [rax],al
 1017610:	rex (bad) 
 1017612:	add    DWORD PTR [rax],eax
 1017614:	add    al,0x0
 1017616:	add    BYTE PTR [rax],al
 1017618:	push   rax
 1017619:	(bad)  
 101761a:	add    DWORD PTR [rax],eax
 101761c:	add    al,0x0
 101761e:	add    BYTE PTR [rax],al
 1017620:	(bad)  
 1017621:	(bad)  
 1017622:	add    DWORD PTR [rax],eax
 1017624:	add    al,0x0
 1017626:	add    BYTE PTR [rax],al
 1017628:	jo     0x101768a
 101762a:	add    DWORD PTR [rax],eax
 101762c:	add    al,0x0
 101762e:	add    BYTE PTR [rax],al
 1017630:	and    BYTE PTR [rax+0x1],0x0
 1017634:	add    al,0x0
 1017636:	add    BYTE PTR [rax],al
 1017638:	nop
 1017639:	(bad)  
 101763a:	add    DWORD PTR [rax],eax
 101763c:	(bad)  
 101763d:	(bad)  
 101763e:	(bad)  
 101763f:	inc    DWORD PTR [rax]
 1017641:	add    BYTE PTR [rax],al
 1017643:	add    BYTE PTR [rax],al
 1017645:	add    BYTE PTR [rax],al
 1017647:	add    BYTE PTR [rbx],cl
 1017649:	add    BYTE PTR [rax],al
 101764b:	add    BYTE PTR [rax+rax*1],cl
 101764e:	add    BYTE PTR [rax],al
 1017650:	add    DWORD PTR [rax],eax
 1017652:	add    BYTE PTR [rax],al
 1017654:	pop    rax
 1017655:	jbe    0x1017658
 1017657:	add    BYTE PTR [rax],al
 1017659:	add    BYTE PTR [rax],al
 101765b:	add    BYTE PTR [rax],al
 101765d:	mov    cl,0x1
 101765f:	add    BYTE PTR [rax-0x60000000],dh
 1017665:	(bad)  
 1017666:	add    DWORD PTR [rax],eax
 1017668:	pop    rax
 1017669:	add    BYTE PTR [rax],al
 101766b:	add    BYTE PTR [rax-0x56],dh
 101766e:	add    BYTE PTR [rax],al
 1017670:	(bad)  
 1017671:	(bad)  
 1017672:	(bad)  
 1017673:	jmp    FWORD PTR [rbp+0xaa]
 1017679:	add    BYTE PTR [rax],al
 101767b:	add    BYTE PTR [rdx+rbp*4+0x10000],dh
 1017682:	add    BYTE PTR [rax],al
 1017684:	fsubr  QWORD PTR [rdx+0x20000]
 101768a:	add    BYTE PTR [rax],al
 101768c:	call   0x401773b
 1017691:	add    BYTE PTR [rax],al
 1017693:	add    bh,dh
 1017695:	stos   BYTE PTR es:[rdi],al
 1017696:	add    BYTE PTR [rax],al
 1017698:	add    al,0x0
 101769a:	add    BYTE PTR [rax],al
 101769c:	mov    ch,0xab
 101769e:	add    BYTE PTR [rax],al
 10176a0:	add    eax,0x6000000
 10176a5:	lods   al,BYTE PTR ds:[rsi]
 10176a6:	add    BYTE PTR [rax],al
 10176a8:	add    al,0x0
 10176aa:	add    BYTE PTR [rax],al
 10176ac:	push   rcx
 10176ad:	lods   al,BYTE PTR ds:[rsi]
 10176ae:	add    BYTE PTR [rax],al
 10176b0:	(bad)  
 10176b1:	add    BYTE PTR [rax],al
 10176b3:	add    BYTE PTR [rsi+0x40000ac],ah
 10176b9:	add    BYTE PTR [rax],al
 10176bb:	add    BYTE PTR [rdx],ch
 10176bd:	lods   eax,DWORD PTR ds:[rsi]
 10176be:	add    BYTE PTR [rax],al
 10176c0:	(bad)  
 10176c1:	add    BYTE PTR [rax],al
 10176c3:	add    BYTE PTR [rsi-0x53],dh
 10176c6:	add    BYTE PTR [rax],al
 10176c8:	add    al,0x0
 10176ca:	add    BYTE PTR [rax],al
 10176cc:	xchg   ebx,eax
 10176cd:	lods   eax,DWORD PTR ds:[rsi]
 10176ce:	add    BYTE PTR [rax],al
 10176d0:	or     BYTE PTR [rax],al
 10176d2:	add    BYTE PTR [rax],al
 10176d4:	fild   QWORD PTR [rbp+0x40000]
 10176da:	add    BYTE PTR [rax],al
 10176dc:	sub    ch,BYTE PTR [rsi+0x90000]
 10176e2:	add    BYTE PTR [rax],al
 10176e4:	jg     0x1017694
 10176e6:	add    BYTE PTR [rax],al
 10176e8:	add    al,0x0
 10176ea:	add    BYTE PTR [rax],al
 10176ec:	add    BYTE PTR [rdi+0xa0000],ch
 10176f2:	add    BYTE PTR [rax],al
 10176f4:	rex.WR scas rax,QWORD PTR es:[rdi]
 10176f6:	add    BYTE PTR [rax],al
 10176f8:	add    al,0x0
 10176fa:	add    BYTE PTR [rax],al
 10176fc:	xchg   edi,eax
 10176fd:	scas   eax,DWORD PTR es:[rdi]
 10176fe:	add    BYTE PTR [rax],al
 1017700:	or     eax,DWORD PTR [rax]
 1017702:	add    BYTE PTR [rax],al
 1017704:	in     al,dx
 1017705:	scas   eax,DWORD PTR es:[rdi]
 1017706:	add    BYTE PTR [rax],al
 1017708:	add    al,0x0
 101770a:	add    BYTE PTR [rax],al
 101770c:	(bad)  
 101770d:	mov    dl,0x0
 101770f:	add    BYTE PTR [rbx],al
 1017711:	add    BYTE PTR [rax],al
 1017713:	add    bl,dl
 1017715:	mov    dl,0x0
 1017717:	add    BYTE PTR [rdx],al
 1017719:	add    BYTE PTR [rax],al
 101771b:	add    bh,bl
 101771d:	mov    dl,0x0
 101771f:	add    BYTE PTR [rcx],al
 1017721:	add    BYTE PTR [rax],al
 1017723:	add    cl,ch
 1017725:	mov    dl,0x0
 1017727:	add    BYTE PTR [rax],al
 1017729:	add    BYTE PTR [rax],al
 101772b:	add    bl,dh
 101772d:	mov    dl,0x0
 101772f:	add    bh,bh
 1017731:	(bad)  
 1017732:	(bad)  
 1017733:	jmp    QWORD PTR [rax+0x160]
 1017739:	add    BYTE PTR [rax],al
 101773b:	add    BYTE PTR [rbp+0xc000160],ch
 1017741:	add    BYTE PTR [rax],al
 1017743:	add    BYTE PTR [rsi+0x160],dh
 1017749:	add    BYTE PTR [rax],al
 101774b:	add    BYTE PTR [rcx],bl
 101774d:	or     al,BYTE PTR [rdx]
 101774f:	add    BYTE PTR [rdx],cl
 1017751:	jb     0x1017759
 1017753:	push   rax
 1017754:	add    bl,ch
 1017756:	add    BYTE PTR [rax],al
 1017758:	sbb    rax,0x28110000
 101775e:	or     eax,DWORD PTR [rax]
 1017760:	sub    BYTE PTR [rsp+rbx*1],dh
 1017763:	add    BYTE PTR [rdi],dl
 1017765:	add    DWORD PTR [rdx],edx
 1017767:	add    BYTE PTR [rax],dl
 1017769:	lock (bad) 
 101776b:	loopne 0x1017779
 101776d:	ror    BYTE PTR [rdx],1
 101776f:	ror    BYTE PTR [rax],0x70
 1017772:	(bad)  
 1017773:	(bad)  
 1017774:	(bad)  
 1017775:	push   rax
 1017776:	add    BYTE PTR [rax],al
 1017778:	add    bl,ch
 101777a:	add    BYTE PTR [rax],al
 101777c:	jo     0x101779b
 101777e:	add    BYTE PTR [rax],al
 1017780:	(bad)  
 1017781:	(bad)  
 1017782:	(bad)  
 1017783:	call   rax
 1017785:	(bad)  
 1017786:	add    DWORD PTR [rax],eax
 1017788:	xor    BYTE PTR [rbx-0x10000],dh
 101778e:	(bad)  
 101778f:	call   FWORD PTR [rdx]
 1017791:	mov    ch,0x0
 1017793:	add    BYTE PTR [rax],al
 1017795:	add    BYTE PTR [rax],al
 1017797:	add    cl,cl
 1017799:	mov    ch,0x0
 101779b:	add    bh,bh
 101779d:	(bad)  
 101779e:	(bad)  
 101779f:	inc    DWORD PTR [rcx]
 10177a1:	add    al,0x1
 10177a3:	add    BYTE PTR [rdx+rax*2],al
 10177a6:	add    BYTE PTR [rax],al
 10177a8:	add    DWORD PTR [rax],ebx
 10177aa:	or     al,BYTE PTR [rax]
 10177ac:	sbb    BYTE PTR [rsp+rdx*1+0x0],ah
 10177b0:	sbb    BYTE PTR [rbx+rdx*1+0x0],dl
 10177b4:	sbb    BYTE PTR [rdx+rdx*1],dh
 10177b7:	add    BYTE PTR [rax],bl
 10177b9:	rcl    BYTE PTR [rax+rsi*8],cl
 10177bc:	adc    ah,al
 10177be:	adc    BYTE PTR [rax+0x1],dh
 10177c1:	and    DWORD PTR [rax+rax*1],ecx
 10177c4:	and    DWORD PTR [rdi+rdx*1+0x0],esi
 10177c8:	and    DWORD PTR [rsi+rdx*1+0x0],esp
 10177cc:	and    DWORD PTR [rbp+rdx*1+0x0],edx
 10177d0:	and    DWORD PTR [rsp+rdx*1],esi
 10177d3:	add    BYTE PTR [rcx],ah
 10177d5:	repnz sbb dh,al
 10177d8:	sbb    al,ah
 10177da:	(bad)  
 10177db:	rol    BYTE PTR [rcx],0x14
 10177de:	(bad)  
 10177df:	add    BYTE PTR [rdx+rsi*8],dl
 10177e2:	or     dh,al
 10177e4:	or     al,ah
 10177e6:	(bad)  
 10177e7:	jo     0x10177ee
 10177e9:	xor    BYTE PTR [rax+rdx*2],al
 10177ec:	and    DWORD PTR [rdx+rax*1],eax
 10177ef:	add    BYTE PTR [rsp+riz*2],al
 10177f2:	(bad)  
 10177f3:	add    BYTE PTR [rax-0x31ffff48],al
 10177f9:	mov    eax,0x77dc0000
 10177fe:	add    DWORD PTR [rax],eax
 1017800:	and    DWORD PTR [rax],eax
 1017802:	add    BYTE PTR [rax],al
 1017804:	cmp    BYTE PTR [rax-0x47320000],0x0
 101780b:	add    ah,bl
 101780d:	ja     0x1017810
 101780f:	add    BYTE PTR [rcx],al
 1017811:	rex.B (bad) 
 1017813:	add    BYTE PTR [rcx+0x74],al
 1017816:	or     BYTE PTR [rax],al
 1017818:	or     dh,BYTE PTR [rcx+rcx*1]
 101781b:	add    BYTE PTR [rdx],cl
 101781d:	push   rdx
 101781e:	(bad)  
 101781f:	(bad)  
 1017820:	add    DWORD PTR [rcx+0x8],edx
 1017823:	add    BYTE PTR [rcx+0x74],dl
 1017826:	or     BYTE PTR [rax],al
 1017828:	andps  xmm1,XMMWORD PTR [rdx]
 101782b:	add    BYTE PTR [rdi],cl
 101782d:	xor    al,0x9
 101782f:	add    BYTE PTR [rdi],cl
 1017831:	push   rdx
 1017832:	or     esp,DWORD PTR [rax+0x19]
 1017835:	sub    ecx,DWORD PTR [rax]
 1017837:	add    BYTE PTR [rip+0x9002101],dl        # 0xa01993e
 101783d:	lock (bad) 
 101783f:	loopne 0x1017846
 1017841:	jo     0x1017847
 1017843:	(bad)  
 1017844:	add    esi,DWORD PTR [rax]
 1017846:	add    dl,BYTE PTR [rax-0x78]
 1017849:	fild   DWORD PTR [rax]
 101784b:	add    al,al
 101784d:	(bad)  
 101784e:	add    BYTE PTR [rax],al
 1017850:	repnz add BYTE PTR [rax],al
 1017853:	add    bh,bh
 1017855:	(bad)  
 1017856:	(bad)  
 1017857:	inc    DWORD PTR [rax+0x30000161]
 101785d:	mov    ebx,0xffff0000
 1017862:	(bad)  
 1017863:	call   rbp
 1017865:	mov    ebx,0x0
 101786a:	add    BYTE PTR [rax],al
 101786c:	(bad)  
 101786d:	mov    ebp,0xffff0000
 1017872:	(bad)  
 1017873:	inc    DWORD PTR [rcx]
 1017875:	rex.B (bad) 
 1017877:	add    BYTE PTR [rcx+0x74],al
 101787a:	(bad)  
 101787b:	add    BYTE PTR [rdx],cl
 101787d:	xor    al,0x7
 101787f:	add    BYTE PTR [rdx],cl
 1017881:	xor    al,BYTE PTR [rsi]
 1017883:	(bad)  
 1017884:	adc    DWORD PTR [rax],esp
 1017886:	or     al,BYTE PTR [rax]
 1017888:	and    BYTE PTR [rax+rdx*1+0x0],ah
 101788c:	sbb    al,0x54
 101788e:	ltr    WORD PTR [rax]
 1017891:	xor    al,0xe
 1017893:	add    BYTE PTR [rdx+rdx*4],cl
 1017896:	or     al,dh
 1017898:	(bad)  
 1017899:	loopne 0x101789f
 101789b:	jo     0x101789f
 101789d:	fld    QWORD PTR [rax]
 101789f:	add    al,ch
 10178a1:	(bad)  
 10178a2:	add    BYTE PTR [rax],al
 10178a4:	(bad)  
 10178a5:	(bad)  
 10178a6:	(bad)  
 10178a7:	jmp    QWORD PTR [rax+0x61]
 10178aa:	add    DWORD PTR [rax],eax
 10178ac:	and    BYTE PTR [rsi-0x10000],bh
 10178b2:	(bad)  
 10178b3:	call   QWORD PTR [rbx-0x42]
 10178b6:	add    BYTE PTR [rax],al
 10178b8:	add    BYTE PTR [rax],al
 10178ba:	add    BYTE PTR [rax],al
 10178bc:	mov    ebx,0xff0000be
 10178c1:	(bad)  
 10178c2:	(bad)  
 10178c3:	call   QWORD PTR [rcx]
 10178c5:	and    BYTE PTR [rdx],cl
 10178c7:	add    BYTE PTR [rax],ah
 10178c9:	adc    BYTE PTR fs:[rax],al
 10178cc:	sbb    al,0x54
 10178ce:	ltr    WORD PTR [rax]
 10178d1:	xor    al,0xe
 10178d3:	add    BYTE PTR [rdx+rdx*4],cl
 10178d6:	or     al,dh
 10178d8:	(bad)  
 10178d9:	loopne 0x10178df
 10178db:	jo     0x10178df
 10178dd:	fld    QWORD PTR [rax]
 10178df:	add    BYTE PTR [rax],bh
 10178e1:	(bad)  
 10178e2:	add    BYTE PTR [rax],al
 10178e4:	(bad)  
 10178e5:	(bad)  
 10178e6:	(bad)  
 10178e7:	push   QWORD PTR [rax-0xffffe9c]
 10178ed:	mov    esi,0xffff0000
 10178f2:	(bad)  
 10178f3:	jmp    QWORD PTR [rbx]
 10178f5:	mov    edi,0x0
 10178fa:	add    BYTE PTR [rax],al
 10178fc:	fwait
 10178fd:	mov    edi,0xffff0000
 1017902:	(bad)  
 1017903:	inc    DWORD PTR [rcx]
 1017905:	sbb    BYTE PTR [rdx],cl
 1017907:	add    BYTE PTR [rax],bl
 1017909:	adc    BYTE PTR fs:[rax],al
 101790c:	sbb    BYTE PTR [rdi+rcx*1+0x0],dl
 1017910:	sbb    BYTE PTR [rsi+rcx*1],dh
 1017913:	add    BYTE PTR [rax],bl
 1017915:	xchg   edx,eax
 1017916:	adc    al,0xf0
 1017918:	adc    ah,al
 101791a:	adc    BYTE PTR [rax+0x1],dh
 101791d:	adc    al,0x8
 101791f:	add    BYTE PTR [rsp+riz*2],dl
 1017922:	or     al,BYTE PTR [rax]
 1017924:	adc    al,0x54
 1017926:	or     DWORD PTR [rax],eax
 1017928:	adc    al,0x34
 101792a:	or     BYTE PTR [rax],al
 101792c:	adc    al,0x52
 101792e:	adc    BYTE PTR [rax+0x1],dh
 1017931:	add    al,0x1
 1017933:	add    BYTE PTR [rdx+riz*2],al
 1017936:	add    BYTE PTR [rax],al
 1017938:	add    DWORD PTR [rdx],ebx
 101793a:	or     al,BYTE PTR [rax]
 101793c:	sbb    dh,BYTE PTR [rbx+rcx*1+0x0]
 1017940:	sbb    ah,BYTE PTR [rdx+rcx*1+0x0]
 1017944:	sbb    dl,BYTE PTR [rcx+rcx*1+0x0]
 1017948:	sbb    dh,BYTE PTR [rax+rcx*1]
 101794b:	add    BYTE PTR [rdx],bl
 101794d:	push   rdx
 101794e:	(bad)  
 101794f:	loopne 0x101796a
 1017951:	and    DWORD PTR [rdx],ecx
 1017953:	add    BYTE PTR [rcx],ah
 1017955:	je     0x101796b
 1017957:	add    BYTE PTR [rip+0x19001364],bl        # 0x1a018cc1
 101795d:	xor    al,0x12
 101795f:	add    BYTE PTR [rip+0x7f009d2],cl        # 0x8f18337
 1017965:	loopne 0x101796c
 1017967:	rol    BYTE PTR [rdx],0xdd
 101796a:	add    BYTE PTR [rax],al
 101796c:	(bad)  
 101796d:	(bad)  
 101796e:	add    BYTE PTR [rax],al
 1017970:	(bad)  
 1017971:	(bad)  
 1017972:	(bad)  
 1017973:	call   rax
 1017975:	(bad)  
	...
 101797f:	add    BYTE PTR [rcx],al
 1017981:	add    BYTE PTR [rax],al
 1017983:	add    al,ah
 1017985:	(bad)  
	...
 101798f:	add    BYTE PTR [rcx],al
 1017991:	add    BYTE PTR [rax],al
 1017993:	add    BYTE PTR [rdx],al
 1017995:	add    BYTE PTR [rax],al
 1017997:	add    BYTE PTR [rbx],al
 1017999:	add    BYTE PTR [rax],al
 101799b:	add    BYTE PTR [rcx],al
 101799d:	add    BYTE PTR [rax],al
 101799f:	add    BYTE PTR [rcx+rdi*2+0x1],ah
 10179a6:	add    BYTE PTR [rax],al
 10179a8:	add    BYTE PTR [rcx+0x300001],dh
 10179ae:	add    BYTE PTR [rax],al
 10179b0:	lock (bad) 
 10179b3:	add    BYTE PTR [rax+0x0],cl
 10179b6:	add    BYTE PTR [rax],al
 10179b8:	and    bl,al
 10179ba:	add    BYTE PTR [rax],al
 10179bc:	(bad)  
 10179bd:	(bad)  
 10179be:	(bad)  
 10179bf:	call   QWORD PTR [rbx-0x3d]
 10179c2:	add    BYTE PTR [rax],al
 10179c4:	add    BYTE PTR [rax],al
 10179c6:	add    BYTE PTR [rax],al
 10179c8:	mov    dl,0xc3
 10179ca:	add    BYTE PTR [rax],al
 10179cc:	add    DWORD PTR [rax],eax
 10179ce:	add    BYTE PTR [rax],al
 10179d0:	jmp    0x1017995
 10179d2:	add    BYTE PTR [rax],al
 10179d4:	add    al,BYTE PTR [rax]
 10179d6:	add    BYTE PTR [rax],al
 10179d8:	add    eax,0x10000c4
 10179dd:	add    BYTE PTR [rax],al
 10179df:	add    BYTE PTR [rdi],cl
 10179e1:	(bad)  
 10179e2:	add    BYTE PTR [rax],al
 10179e4:	(bad)  
 10179e5:	(bad)  
 10179e6:	(bad)  
 10179e7:	jmp    FWORD PTR [rcx]
 10179e9:	(bad)  
 10179ea:	add    BYTE PTR [rax],al
 10179ec:	add    DWORD PTR [rax],eax
 10179ee:	add    BYTE PTR [rax],al
 10179f0:	xor    al,0xc4
 10179f2:	add    BYTE PTR [rax],al
 10179f4:	(bad)  
 10179f5:	(bad)  
 10179f6:	(bad)  
 10179f7:	dec    DWORD PTR [rbp-0x3c]
 10179fa:	add    BYTE PTR [rax],al
 10179fc:	add    BYTE PTR [rax],al
 10179fe:	add    BYTE PTR [rax],al
 1017a00:	test   al,0xc4
 1017a02:	add    BYTE PTR [rax],al
 1017a04:	(bad)  
 1017a05:	(bad)  
 1017a06:	(bad)  
 1017a07:	push   rax
 1017a09:	(bad)  
 1017a0b:	add    BYTE PTR [rax],al
 1017a0d:	add    BYTE PTR [rax],al
 1017a0f:	add    BYTE PTR [rcx],bl
 1017a11:	or     al,BYTE PTR [rdx]
 1017a13:	add    BYTE PTR [rdx],cl
 1017a15:	push   rdx
 1017a16:	(bad)  
 1017a17:	push   rax
 1017a18:	add    bl,ch
 1017a1a:	add    BYTE PTR [rax],al
 1017a1c:	(bad)  
 1017a1d:	(bad)  
 1017a1e:	add    BYTE PTR [rax],al
 1017a20:	sbb    DWORD PTR [rsi],ebx
 1017a22:	or     BYTE PTR [rax],al
 1017a24:	(bad)  
 1017a25:	je     0x1017a34
 1017a27:	add    BYTE PTR [rcx],bl
 1017a29:	or     eax,DWORD PTR fs:[rax]
 1017a2c:	adc    al,0x34
 1017a2e:	or     al,BYTE PTR [rax]
 1017a30:	(bad)  
 1017a31:	jb     0x1017a35
 1017a33:	loopne 0x1017a37
 1017a35:	fld    QWORD PTR [rax]
 1017a37:	add    BYTE PTR [rax-0xffffe1],cl
 1017a3d:	(bad)  
 1017a3e:	(bad)  
 1017a3f:	inc    DWORD PTR [rax]
	...
 1017a49:	(bad)  
 1017a4b:	add    bh,bh
 1017a4d:	(bad)  
 1017a4e:	(bad)  
 1017a4f:	inc    DWORD PTR [rax]
 1017a51:	add    BYTE PTR [rax],al
 1017a53:	add    BYTE PTR [rax],al
 1017a55:	add    BYTE PTR [rax],al
 1017a57:	add    BYTE PTR [rcx],al
 1017a59:	add    BYTE PTR [rax],al
 1017a5b:	add    BYTE PTR [rdx],al
 1017a5d:	add    BYTE PTR [rax],al
 1017a5f:	add    BYTE PTR [rcx],al
 1017a61:	add    BYTE PTR [rax],al
 1017a63:	add    BYTE PTR [rax+0x7a],ch
 1017a66:	add    DWORD PTR [rax],eax
 1017a68:	add    BYTE PTR [rax],al
 1017a6a:	add    BYTE PTR [rax],al
 1017a6c:	add    BYTE PTR [rcx+0x300001],dh
 1017a72:	add    BYTE PTR [rax],al
 1017a74:	adc    BYTE PTR [rdx+0x1],ah
 1017a77:	add    BYTE PTR [rax+0x0],cl
 1017a7a:	add    BYTE PTR [rax],al
 1017a7c:	loopne 0x1017a42
 1017a7e:	add    BYTE PTR [rax],al
 1017a80:	(bad)  
 1017a81:	(bad)  
 1017a82:	(bad)  
 1017a83:	inc    DWORD PTR [rdi]
 1017a85:	(bad)
 1017a88:	add    BYTE PTR [rax],al
 1017a8a:	add    BYTE PTR [rax],al
 1017a8c:	(bad)
 1017a90:	add    DWORD PTR [rax],eax
 1017a92:	add    BYTE PTR [rax],al
 1017a94:	(bad)
 1017a98:	add    BYTE PTR [rax],al
 1017a9a:	add    BYTE PTR [rax],al
 1017a9c:	outs   dx,BYTE PTR ds:[rsi]
 1017a9d:	(bad)
 1017aa0:	(bad)  
 1017aa1:	(bad)  
 1017aa2:	(bad)  
 1017aa3:	call   QWORD PTR [rax]
 1017aa5:	(bad)  
 1017aa7:	add    BYTE PTR [rax],al
 1017aa9:	add    BYTE PTR [rax],al
 1017aab:	add    BYTE PTR [rip+0x2000162],bl        # 0x3017c13
 1017ab1:	add    BYTE PTR [rax],al
 1017ab3:	add    BYTE PTR [rsi],ch
 1017ab5:	(bad)  
 1017ab7:	add    BYTE PTR [rax],al
 1017ab9:	add    BYTE PTR [rax],al
 1017abb:	add    BYTE PTR [rcx],bl
 1017abd:	or     al,BYTE PTR [rdx]
 1017abf:	add    BYTE PTR [rdx],cl
 1017ac1:	push   rdx
 1017ac2:	(bad)  
 1017ac3:	push   rax
 1017ac4:	add    bl,ch
 1017ac6:	add    BYTE PTR [rax],al
 1017ac8:	mov    BYTE PTR [rdi],bl
 1017aca:	add    BYTE PTR [rax],al
 1017acc:	sbb    DWORD PTR [rax],ebp
 1017ace:	or     DWORD PTR [rax],eax
 1017ad0:	sbb    al,0x1
 1017ad2:	sbb    BYTE PTR [rax],al
 1017ad4:	adc    eax,0x11e013f0
 1017ad9:	ror    BYTE PTR [rdi],1
 1017adb:	ror    BYTE PTR [rip+0xb600c70],0x30        # 0xc618752
 1017ae2:	add    BYTE PTR [rax],al
 1017ae4:	add    bl,ch
 1017ae6:	add    BYTE PTR [rax],al
 1017ae8:	mov    al,0x1f
 1017aea:	add    BYTE PTR [rax],al
 1017aec:	(bad)  
 1017aed:	(bad)  
 1017aee:	(bad)  
 1017aef:	call   QWORD PTR [rax+0x62]
 1017af2:	add    DWORD PTR [rax],eax
 1017af4:	add    BYTE PTR [rax],al
 1017af6:	add    BYTE PTR [rax],al
 1017af8:	(bad)  
 1017af9:	(bad)  
 1017afb:	add    BYTE PTR [rcx],al
 1017afd:	add    BYTE PTR [rax],al
 1017aff:	add    BYTE PTR [rax+0x62],dh
 1017b02:	add    DWORD PTR [rax],eax
 1017b04:	add    al,BYTE PTR [rax]
 1017b06:	add    BYTE PTR [rax],al
 1017b08:	and    BYTE PTR [rdx+0x1],0x0
 1017b0c:	add    eax,DWORD PTR [rax]
 1017b0e:	add    BYTE PTR [rax],al
 1017b10:	add    BYTE PTR [rax],al
 1017b12:	add    BYTE PTR [rax],al
 1017b14:	add    eax,DWORD PTR [rax]
 1017b16:	add    BYTE PTR [rax],al
 1017b18:	add    BYTE PTR [rax],al
 1017b1a:	add    BYTE PTR [rax],al
 1017b1c:	add    al,0x0
 1017b1e:	add    BYTE PTR [rax],al
 1017b20:	add    al,0x0
 1017b22:	add    BYTE PTR [rax],al
 1017b24:	add    eax,0x1000000
 1017b29:	add    BYTE PTR [rax],al
 1017b2b:	add    BYTE PTR [rax],dh
 1017b2d:	jnp    0x1017b30
 1017b2f:	add    BYTE PTR [rax],al
 1017b31:	add    BYTE PTR [rax],al
 1017b33:	add    BYTE PTR [rax],al
 1017b35:	mov    cl,0x1
 1017b37:	add    BYTE PTR [rax-0x70000000],cl
 1017b3d:	(bad)  
 1017b3f:	add    BYTE PTR [rax+0x0],bl
 1017b42:	add    BYTE PTR [rax],al
 1017b44:	movabs al,ds:0xd7ffffffff0000c5
 1017b4d:	(bad)
 1017b50:	add    BYTE PTR [rax],al
 1017b52:	add    BYTE PTR [rax],al
 1017b54:	ffreep st(5)
 1017b56:	add    BYTE PTR [rax],al
 1017b58:	add    DWORD PTR [rax],eax
 1017b5a:	add    BYTE PTR [rax],al
 1017b5c:	out    0xc5,al
 1017b5e:	add    BYTE PTR [rax],al
 1017b60:	add    al,BYTE PTR [rax]
 1017b62:	add    BYTE PTR [rax],al
 1017b64:	out    dx,al
 1017b65:	(bad)
 1017b68:	add    al,0x0
 1017b6a:	add    BYTE PTR [rax],al
 1017b6c:	cmp    al,cl
 1017b6e:	add    BYTE PTR [rax],al
 1017b70:	add    eax,DWORD PTR [rax]
 1017b72:	add    BYTE PTR [rax],al
 1017b74:	imul   ecx,eax,0x0
 1017b77:	add    BYTE PTR [rdx],al
 1017b79:	add    BYTE PTR [rax],al
 1017b7b:	add    BYTE PTR [rbp-0x38],dh
 1017b7e:	add    BYTE PTR [rax],al
 1017b80:	add    DWORD PTR [rax],eax
 1017b82:	add    BYTE PTR [rax],al
 1017b84:	jg     0x1017b4e
 1017b86:	add    BYTE PTR [rax],al
 1017b88:	add    BYTE PTR [rax],al
 1017b8a:	add    BYTE PTR [rax],al
 1017b8c:	mov    eax,ecx
 1017b8e:	add    BYTE PTR [rax],al
 1017b90:	(bad)  
 1017b91:	(bad)  
 1017b92:	(bad)  
 1017b93:	call   QWORD PTR [rax+0x162]
 1017b99:	add    BYTE PTR [rax],al
 1017b9b:	add    BYTE PTR [rbp+0x5000162],bl
 1017ba1:	add    BYTE PTR [rax],al
 1017ba3:	add    BYTE PTR [rdx+riz*2+0x1],dh
 1017baa:	add    BYTE PTR [rax],al
 1017bac:	sbb    DWORD PTR [rdx],ecx
 1017bae:	add    al,BYTE PTR [rax]
 1017bb0:	or     dh,BYTE PTR [rdx+0x6]
 1017bb3:	push   rax
 1017bb4:	add    bl,ch
 1017bb6:	add    BYTE PTR [rax],al
 1017bb8:	mov    al,0x1f
 1017bba:	add    BYTE PTR [rax],al
 1017bbc:	sbb    DWORD PTR [rbx+rcx*1],esp
 1017bbf:	add    BYTE PTR [rsp+rsi*2],ah
 1017bc2:	sbb    eax,DWORD PTR [rax]
 1017bc4:	and    BYTE PTR [rcx+rbx*1+0x0],ah
 1017bc8:	sbb    al,0x34
 1017bca:	sbb    BYTE PTR [rax],al
 1017bcc:	adc    BYTE PTR [rcx],al
 1017bce:	adc    al,0x0
 1017bd0:	or     eax,esi
 1017bd2:	(bad)  
 1017bd3:	loopne 0x1017bda
 1017bd5:	rol    BYTE PTR [rax],0x0
 1017bd8:	add    bl,ch
 1017bda:	add    BYTE PTR [rax],al
 1017bdc:	fcomp  DWORD PTR [rdi]
 1017bde:	add    BYTE PTR [rax],al
 1017be0:	(bad)  
 1017be1:	(bad)  
 1017be2:	(bad)  
 1017be3:	inc    DWORD PTR [rax]
 1017be5:	add    BYTE PTR [rax],al
 1017be7:	add    BYTE PTR [rax],al
 1017be9:	add    BYTE PTR [rax],al
 1017beb:	add    BYTE PTR [rax+0x1000161],ah
 1017bf1:	add    BYTE PTR [rax],al
 1017bf3:	add    BYTE PTR [rax-0xfffe9f],dh
 1017bf9:	(bad)  
 1017bfa:	(bad)  
 1017bfb:	inc    DWORD PTR [rax]
 1017bfd:	add    BYTE PTR [rax],al
 1017bff:	add    BYTE PTR [rax],al
 1017c01:	add    BYTE PTR [rax],al
 1017c03:	add    BYTE PTR [rdx],al
 1017c05:	add    BYTE PTR [rax],al
 1017c07:	add    BYTE PTR [rbx],al
 1017c09:	add    BYTE PTR [rax],al
 1017c0b:	add    BYTE PTR [rcx],al
 1017c0d:	add    BYTE PTR [rax],al
 1017c0f:	add    BYTE PTR [rsp+rdi*2],dl
 1017c12:	add    DWORD PTR [rax],eax
 1017c14:	add    BYTE PTR [rax],al
 1017c16:	add    BYTE PTR [rax],al
 1017c18:	add    BYTE PTR [rcx+0x300001],dh
 1017c1e:	add    BYTE PTR [rax],al
 1017c20:	shl    BYTE PTR [rcx+0x1],0x0
 1017c24:	rex.W add BYTE PTR [rax],al
 1017c27:	add    BYTE PTR [rax-0xffff38],dh
 1017c2d:	(bad)  
 1017c2e:	(bad)  
 1017c2f:	jmp    rax
 1017c31:	enter  0x0,0x0
 1017c35:	add    BYTE PTR [rax],al
 1017c37:	add    dh,ah
 1017c39:	enter  0x0,0x1
 1017c3d:	add    BYTE PTR [rax],al
 1017c3f:	add    ah,ch
 1017c41:	enter  0x0,0x2
 1017c45:	add    BYTE PTR [rax],al
 1017c47:	add    ch,al
 1017c49:	leave  
 1017c4a:	add    BYTE PTR [rax],al
 1017c4c:	add    DWORD PTR [rax],eax
 1017c4e:	add    BYTE PTR [rax],al
 1017c50:	iret   
 1017c51:	leave  
 1017c52:	add    BYTE PTR [rax],al
 1017c54:	add    BYTE PTR [rax],al
 1017c56:	add    BYTE PTR [rax],al
 1017c58:	fxch   st(1)
 1017c5a:	add    BYTE PTR [rax],al
 1017c5c:	(bad)  
 1017c5d:	(bad)  
 1017c5e:	(bad)  
 1017c5f:	inc    eax
 1017c61:	(bad)  
 1017c62:	add    DWORD PTR [rax],eax
 1017c64:	add    BYTE PTR [rax],al
 1017c66:	add    BYTE PTR [rax],al
 1017c68:	int    0x61
 1017c6a:	add    DWORD PTR [rax],eax
 1017c6c:	add    eax,DWORD PTR [rax]
 1017c6e:	add    BYTE PTR [rax],al
 1017c70:	loope  0x1017cd3
 1017c72:	add    DWORD PTR [rax],eax
 1017c74:	add    BYTE PTR [rax],al
 1017c76:	add    BYTE PTR [rax],al
 1017c78:	sbb    DWORD PTR [rdx],ecx
 1017c7a:	add    al,BYTE PTR [rax]
 1017c7c:	or     dl,BYTE PTR [rdx+0x6]
 1017c7f:	push   rax
 1017c80:	add    bl,ch
 1017c82:	add    BYTE PTR [rax],al
 1017c84:	fcomp  DWORD PTR [rdi]
 1017c86:	add    BYTE PTR [rax],al
 1017c88:	sbb    DWORD PTR [rax],esp
 1017c8a:	or     al,BYTE PTR [rax]
 1017c8c:	and    BYTE PTR [rsi+rdx*1+0x0],ah
 1017c90:	sbb    al,0x34
 1017c92:	adc    eax,0xcd21000
 1017c97:	lock or ah,al
 1017c9a:	or     al,dl
 1017c9c:	(bad)  
 1017c9d:	rol    BYTE PTR [rax+rsi*2],0x2
 1017ca1:	fld    QWORD PTR [rax]
 1017ca3:	add    BYTE PTR [rax],al
 1017ca5:	and    BYTE PTR [rax],al
 1017ca7:	add    bh,bh
 1017ca9:	(bad)  
 1017caa:	(bad)  
 1017cab:	jmp    QWORD PTR [rax]
 1017cad:	movsxd eax,DWORD PTR [rcx]
 1017caf:	add    BYTE PTR [rax],al
 1017cb1:	add    BYTE PTR [rax],al
 1017cb3:	add    BYTE PTR [rax],dh
 1017cb5:	movsxd eax,DWORD PTR [rcx]
 1017cb7:	add    BYTE PTR [rcx],al
 1017cb9:	add    BYTE PTR [rax],al
 1017cbb:	add    BYTE PTR [rax],al
 1017cbd:	add    BYTE PTR [rax],al
 1017cbf:	add    BYTE PTR [rcx],al
 1017cc1:	add    BYTE PTR [rax],al
 1017cc3:	add    BYTE PTR [rax],al
 1017cc5:	add    BYTE PTR [rax],al
 1017cc7:	add    BYTE PTR [rdx],al
 1017cc9:	add    BYTE PTR [rax],al
 1017ccb:	add    BYTE PTR [rdx],al
 1017ccd:	add    BYTE PTR [rax],al
 1017ccf:	add    BYTE PTR [rbx],al
 1017cd1:	add    BYTE PTR [rax],al
 1017cd3:	add    BYTE PTR [rcx],al
 1017cd5:	add    BYTE PTR [rax],al
 1017cd7:	add    ah,bl
 1017cd9:	jl     0x1017cdc
 1017cdb:	add    BYTE PTR [rax],al
 1017cdd:	add    BYTE PTR [rax],al
 1017cdf:	add    BYTE PTR [rax],al
 1017ce1:	mov    cl,0x1
 1017ce3:	add    BYTE PTR [rax],dh
 1017ce5:	add    BYTE PTR [rax],al
 1017ce7:	add    BYTE PTR [rax+0x63],al
 1017cea:	add    DWORD PTR [rax],eax
 1017cec:	pop    rax
 1017ced:	add    BYTE PTR [rax],al
 1017cef:	add    BYTE PTR [rax],dl
 1017cf1:	retf   0x0
 1017cf4:	(bad)  
 1017cf5:	(bad)  
 1017cf6:	(bad)  
 1017cf7:	inc    DWORD PTR [rdx-0x36]
 1017cfa:	add    BYTE PTR [rax],al
 1017cfc:	add    BYTE PTR [rax],al
 1017cfe:	add    BYTE PTR [rax],al
 1017d00:	(bad)  
 1017d01:	retf   0x0
 1017d04:	(bad)  
 1017d05:	(bad)  
 1017d06:	(bad)  
 1017d07:	jmp    FWORD PTR [rbx-0x36]
 1017d0a:	add    BYTE PTR [rax],al
 1017d0c:	add    BYTE PTR [rax],al
 1017d0e:	add    BYTE PTR [rax],al
 1017d10:	mov    cl,0xca
 1017d12:	add    BYTE PTR [rax],al
 1017d14:	(bad)  
 1017d15:	(bad)  
 1017d16:	(bad)  
 1017d17:	dec    esi
 1017d19:	retf   0x0
 1017d1c:	add    BYTE PTR [rax],al
 1017d1e:	add    BYTE PTR [rax],al
 1017d20:	xor    ebx,ecx
 1017d22:	add    BYTE PTR [rax],al
 1017d24:	add    al,BYTE PTR [rax]
 1017d26:	add    BYTE PTR [rax],al
 1017d28:	popf   
 1017d29:	retf   
 1017d2a:	add    BYTE PTR [rax],al
 1017d2c:	add    BYTE PTR [rax],al
 1017d2e:	add    BYTE PTR [rax],al
 1017d30:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1017d31:	retf   
 1017d32:	add    BYTE PTR [rax],al
 1017d34:	(bad)  
 1017d35:	(bad)  
 1017d36:	(bad)  
 1017d37:	inc    edx
 1017d39:	retf   
 1017d3a:	add    BYTE PTR [rax],al
 1017d3c:	add    al,BYTE PTR [rax]
 1017d3e:	add    BYTE PTR [rax],al
 1017d40:	in     eax,dx
 1017d41:	retf   
 1017d42:	add    BYTE PTR [rax],al
 1017d44:	add    BYTE PTR [rax],al
 1017d46:	add    BYTE PTR [rax],al
 1017d48:	test   ebx,0xffff0000
 1017d4e:	(bad)  
 1017d4f:	call   QWORD PTR [rdx]
 1017d51:	int3   
 1017d52:	add    BYTE PTR [rax],al
 1017d54:	add    al,BYTE PTR [rax]
 1017d56:	add    BYTE PTR [rax],al
 1017d58:	ds int3 
 1017d5a:	add    BYTE PTR [rax],al
 1017d5c:	add    BYTE PTR [rax],al
 1017d5e:	add    BYTE PTR [rax],al
 1017d60:	rex.W int3 
 1017d62:	add    BYTE PTR [rax],al
 1017d64:	(bad)  
 1017d65:	(bad)  
 1017d66:	(bad)  
 1017d67:	jmp    QWORD PTR [rbx-0x34]
 1017d6a:	add    BYTE PTR [rax],al
 1017d6c:	add    al,BYTE PTR [rax]
 1017d6e:	add    BYTE PTR [rax],al
 1017d70:	jne    0x1017d3e
 1017d72:	add    BYTE PTR [rax],al
 1017d74:	add    BYTE PTR [rax],al
 1017d76:	add    BYTE PTR [rax],al
 1017d78:	mov    esp,cs
 1017d7a:	add    BYTE PTR [rax],al
 1017d7c:	(bad)  
 1017d7d:	(bad)  
 1017d7e:	(bad)  
 1017d7f:	jmp    QWORD PTR [rbp+0xcc]
 1017d85:	add    BYTE PTR [rax],al
 1017d87:	add    BYTE PTR [rax],al
 1017d89:	int    0x0
 1017d8b:	add    bh,bh
 1017d8d:	(bad)  
 1017d8e:	(bad)  
 1017d8f:	inc    DWORD PTR [rax+0x63]
 1017d92:	add    DWORD PTR [rax],eax
 1017d94:	add    BYTE PTR [rax],al
 1017d96:	add    BYTE PTR [rax],al
 1017d98:	rex.WRX movsxd r8,DWORD PTR [rcx]
 1017d9b:	add    BYTE PTR [rbx],al
 1017d9d:	add    BYTE PTR [rax],al
 1017d9f:	add    BYTE PTR [rbx+riz*2+0x1],ah
 1017da3:	add    BYTE PTR [rax],al
 1017da5:	add    BYTE PTR [rax],al
 1017da7:	add    BYTE PTR [rcx],bl
 1017da9:	or     eax,DWORD PTR [rbx]
 1017dab:	add    BYTE PTR [rbx],cl
 1017dad:	(bad)  
 1017dae:	(bad)  
 1017daf:	jo     0x1017db7
 1017db1:	push   rax
 1017db2:	add    BYTE PTR [rax],al
 1017db4:	add    bl,ch
 1017db6:	add    BYTE PTR [rax],al
 1017db8:	add    BYTE PTR [rax],ah
 1017dba:	add    BYTE PTR [rax],al
 1017dbc:	sbb    DWORD PTR [rsi],ebx
 1017dbe:	or     BYTE PTR [rax],al
 1017dc0:	(bad)  
 1017dc1:	je     0x1017dd0
 1017dc3:	add    BYTE PTR [rcx],bl
 1017dc5:	or     eax,DWORD PTR fs:[rax]
 1017dc8:	adc    al,0x34
 1017dca:	or     al,BYTE PTR [rax]
 1017dcc:	(bad)  
 1017dcd:	jb     0x1017dd1
 1017dcf:	loopne 0x1017dd3
 1017dd1:	fld    QWORD PTR [rax]
 1017dd3:	add    BYTE PTR [rax],ch
 1017dd5:	and    BYTE PTR [rax],al
 1017dd7:	add    bh,bh
 1017dd9:	(bad)  
 1017dda:	(bad)  
 1017ddb:	inc    DWORD PTR [rax]
 1017ddd:	add    BYTE PTR [rax],al
 1017ddf:	add    BYTE PTR [rax],al
 1017de1:	add    BYTE PTR [rax],al
 1017de3:	add    al,ah
 1017de5:	movsxd eax,DWORD PTR [rcx]
 1017de7:	add    bh,bh
 1017de9:	(bad)  
 1017dea:	(bad)  
 1017deb:	inc    DWORD PTR [rax]
 1017ded:	add    BYTE PTR [rax],al
 1017def:	add    BYTE PTR [rax],al
 1017df1:	add    BYTE PTR [rax],al
 1017df3:	add    BYTE PTR [rcx],al
 1017df5:	add    BYTE PTR [rax],al
 1017df7:	add    BYTE PTR [rdx],al
 1017df9:	add    BYTE PTR [rax],al
 1017dfb:	add    BYTE PTR [rcx],al
 1017dfd:	add    BYTE PTR [rax],al
 1017dff:	add    BYTE PTR [rsi+rdi*2],al
 1017e02:	add    DWORD PTR [rax],eax
 1017e04:	add    BYTE PTR [rax],al
 1017e06:	add    BYTE PTR [rax],al
 1017e08:	add    BYTE PTR [rcx+0x200001],dh
 1017e0e:	add    BYTE PTR [rax],al
 1017e10:	lock movsxd eax,DWORD PTR [rcx]
 1017e13:	add    BYTE PTR [rax],bh
 1017e15:	add    BYTE PTR [rax],al
 1017e17:	add    BYTE PTR [rax-0x33],al
 1017e1a:	add    BYTE PTR [rax],al
 1017e1c:	(bad)  
 1017e1d:	(bad)  
 1017e1e:	(bad)  
 1017e1f:	jmp    QWORD PTR [rdi-0x33]
 1017e22:	add    BYTE PTR [rax],al
 1017e24:	add    BYTE PTR [rax],al
 1017e26:	add    BYTE PTR [rax],al
 1017e28:	xchg   esi,eax
 1017e29:	int    0x0
 1017e2b:	add    BYTE PTR [rcx],al
 1017e2d:	add    BYTE PTR [rax],al
 1017e2f:	add    ah,ch
 1017e31:	int    0x0
 1017e33:	add    BYTE PTR [rax],al
 1017e35:	add    BYTE PTR [rax],al
 1017e37:	add    dh,dh
 1017e39:	int    0x0
 1017e3b:	add    bh,bh
 1017e3d:	(bad)  
 1017e3e:	(bad)  
 1017e3f:	push   rax
 1017e41:	movsxd eax,DWORD PTR [rcx]
 1017e43:	add    BYTE PTR [rax],al
 1017e45:	add    BYTE PTR [rax],al
 1017e47:	add    ch,bh
 1017e49:	movsxd eax,DWORD PTR [rcx]
 1017e4b:	add    BYTE PTR [rdx],al
 1017e4d:	add    BYTE PTR [rax],al
 1017e4f:	add    BYTE PTR [rsi],cl
 1017e51:	add    DWORD PTR fs:[rax],eax
 1017e54:	add    BYTE PTR [rax],al
 1017e56:	add    BYTE PTR [rax],al
 1017e58:	sbb    DWORD PTR [rdx],ecx
 1017e5a:	add    al,BYTE PTR [rax]
 1017e5c:	or     dh,BYTE PTR [rdx]
 1017e5e:	(bad)  
 1017e5f:	push   rax
 1017e60:	add    bl,ch
 1017e62:	add    BYTE PTR [rax],al
 1017e64:	sub    BYTE PTR [rax],ah
 1017e66:	add    BYTE PTR [rax],al
 1017e68:	sbb    DWORD PTR [rax],ebp
 1017e6a:	or     DWORD PTR [rax],eax
 1017e6c:	sbb    al,0x1
 1017e6e:	sbb    BYTE PTR [rax],al
 1017e70:	adc    eax,0x11e013f0
 1017e75:	ror    BYTE PTR [rdi],1
 1017e77:	ror    BYTE PTR [rip+0xb600c70],0x30        # 0xc618aee
 1017e7e:	add    BYTE PTR [rax],al
 1017e80:	add    bl,ch
 1017e82:	add    BYTE PTR [rax],al
 1017e84:	push   rax
 1017e85:	and    BYTE PTR [rax],al
 1017e87:	add    bh,bh
 1017e89:	(bad)  
 1017e8a:	(bad)  
 1017e8b:	push   QWORD PTR [rax]
 1017e8d:	add    DWORD PTR fs:[rax],eax
 1017e90:	add    BYTE PTR [rax],al
 1017e92:	add    BYTE PTR [rax],al
 1017e94:	rex
 1017e95:	add    DWORD PTR fs:[rax],eax
 1017e98:	add    DWORD PTR [rax],eax
 1017e9a:	add    BYTE PTR [rax],al
 1017e9c:	push   rax
 1017e9d:	add    DWORD PTR fs:[rax],eax
 1017ea0:	add    al,BYTE PTR [rax]
 1017ea2:	add    BYTE PTR [rax],al
 1017ea4:	(bad)  
 1017ea5:	add    DWORD PTR fs:[rax],eax
 1017ea8:	add    eax,DWORD PTR [rax]
 1017eaa:	add    BYTE PTR [rax],al
 1017eac:	add    BYTE PTR [rax],al
 1017eae:	add    BYTE PTR [rax],al
 1017eb0:	add    eax,DWORD PTR [rax]
 1017eb2:	add    BYTE PTR [rax],al
 1017eb4:	add    BYTE PTR [rax],al
 1017eb6:	add    BYTE PTR [rax],al
 1017eb8:	add    al,0x0
 1017eba:	add    BYTE PTR [rax],al
 1017ebc:	add    al,0x0
 1017ebe:	add    BYTE PTR [rax],al
 1017ec0:	add    eax,0x1000000
 1017ec5:	add    BYTE PTR [rax],al
 1017ec7:	add    ah,cl
 1017ec9:	jle    0x1017ecc
 1017ecb:	add    BYTE PTR [rax],al
 1017ecd:	add    BYTE PTR [rax],al
 1017ecf:	add    BYTE PTR [rax],al
 1017ed1:	mov    cl,0x1
 1017ed3:	add    BYTE PTR [rax+0x70000000],cl
 1017ed9:	add    DWORD PTR fs:[rax],eax
 1017edc:	pop    rax
 1017edd:	add    BYTE PTR [rax],al
 1017edf:	add    BYTE PTR [rax],ah
 1017ee1:	(bad)  
 1017ee2:	add    BYTE PTR [rax],al
 1017ee4:	(bad)  
 1017ee5:	(bad)  
 1017ee6:	(bad)  
 1017ee7:	call   QWORD PTR [rbp-0x32]
 1017eea:	add    BYTE PTR [rax],al
 1017eec:	add    BYTE PTR [rax],al
 1017eee:	add    BYTE PTR [rax],al
 1017ef0:	pop    rbp
 1017ef1:	(bad)  
 1017ef2:	add    BYTE PTR [rax],al
 1017ef4:	add    DWORD PTR [rax],eax
 1017ef6:	add    BYTE PTR [rax],al
 1017ef8:	gs (bad) 
 1017efa:	add    BYTE PTR [rax],al
 1017efc:	add    al,BYTE PTR [rax]
 1017efe:	add    BYTE PTR [rax],al
 1017f00:	ins    BYTE PTR es:[rdi],dx
 1017f01:	(bad)  
 1017f02:	add    BYTE PTR [rax],al
 1017f04:	add    al,0x0
 1017f06:	add    BYTE PTR [rax],al
 1017f08:	mov    edx,0x30000d0
 1017f0d:	add    BYTE PTR [rax],al
 1017f0f:	add    ch,ch
 1017f11:	rol    BYTE PTR [rax],1
 1017f13:	add    BYTE PTR [rdx],al
 1017f15:	add    BYTE PTR [rax],al
 1017f17:	add    bh,dh
 1017f19:	rol    BYTE PTR [rax],1
 1017f1b:	add    BYTE PTR [rcx],al
 1017f1d:	add    BYTE PTR [rax],al
 1017f1f:	add    BYTE PTR [rcx],al
 1017f21:	rol    DWORD PTR [rax],1
 1017f23:	add    BYTE PTR [rax],al
 1017f25:	add    BYTE PTR [rax],al
 1017f27:	add    BYTE PTR [rbx],cl
 1017f29:	rol    DWORD PTR [rax],1
 1017f2b:	add    bh,bh
 1017f2d:	(bad)  
 1017f2e:	(bad)  
 1017f2f:	push   QWORD PTR [rax+0x64]
 1017f32:	add    DWORD PTR [rax],eax
 1017f34:	add    BYTE PTR [rax],al
 1017f36:	add    BYTE PTR [rax],al
 1017f38:	jge    0x1017f9e
 1017f3a:	add    DWORD PTR [rax],eax
 1017f3c:	add    eax,0x94000000
 1017f41:	add    DWORD PTR fs:[rax],eax
 1017f44:	add    BYTE PTR [rax],al
 1017f46:	add    BYTE PTR [rax],al
 1017f48:	sbb    DWORD PTR [rdx],ecx
 1017f4a:	add    al,BYTE PTR [rax]
 1017f4c:	or     dh,BYTE PTR [rdx+0x6]
 1017f4f:	push   rax
 1017f50:	add    bl,ch
 1017f52:	add    BYTE PTR [rax],al
 1017f54:	push   rax
 1017f55:	and    BYTE PTR [rax],al
 1017f57:	add    BYTE PTR [rcx],bl
 1017f59:	and    al,0xb
 1017f5b:	add    BYTE PTR [rsp+rsi*2],ah
 1017f5e:	sbb    eax,DWORD PTR [rax]
 1017f60:	and    BYTE PTR [rcx+rbx*1+0x0],ah
 1017f64:	sbb    al,0x34
 1017f66:	sbb    BYTE PTR [rax],al
 1017f68:	adc    BYTE PTR [rcx],al
 1017f6a:	adc    al,0x0
 1017f6c:	or     eax,esi
 1017f6e:	(bad)  
 1017f6f:	loopne 0x1017f76
 1017f71:	rol    BYTE PTR [rax],0x0
 1017f74:	add    bl,ch
 1017f76:	add    BYTE PTR [rax],al
 1017f78:	js     0x1017f9a
 1017f7a:	add    BYTE PTR [rax],al
 1017f7c:	(bad)  
 1017f7d:	(bad)  
 1017f7e:	(bad)  
 1017f7f:	inc    DWORD PTR [rax]
 1017f81:	add    BYTE PTR [rax],al
 1017f83:	add    BYTE PTR [rax],al
 1017f85:	add    BYTE PTR [rax],al
 1017f87:	add    BYTE PTR [rax+0x1000163],al
 1017f8d:	add    BYTE PTR [rax],al
 1017f8f:	add    BYTE PTR [rax-0xfffe9d],dl
 1017f95:	(bad)  
 1017f96:	(bad)  
 1017f97:	inc    DWORD PTR [rax]
 1017f99:	add    BYTE PTR [rax],al
 1017f9b:	add    BYTE PTR [rax],al
 1017f9d:	add    BYTE PTR [rax],al
 1017f9f:	add    BYTE PTR [rdx],al
 1017fa1:	add    BYTE PTR [rax],al
 1017fa3:	add    BYTE PTR [rbx],al
 1017fa5:	add    BYTE PTR [rax],al
 1017fa7:	add    BYTE PTR [rcx],al
 1017fa9:	add    BYTE PTR [rax],al
 1017fab:	add    BYTE PTR [rax+0x17f],dh
 1017fb1:	add    BYTE PTR [rax],al
 1017fb3:	add    BYTE PTR [rax],al
 1017fb5:	mov    cl,0x1
 1017fb7:	add    BYTE PTR [rax],dh
 1017fb9:	add    BYTE PTR [rax],al
 1017fbb:	add    BYTE PTR [rax+0x48000163],ah
 1017fc1:	add    BYTE PTR [rax],al
 1017fc3:	add    BYTE PTR [rax],dh
 1017fc5:	rol    DWORD PTR [rax],1
 1017fc7:	add    bh,bh
 1017fc9:	(bad)  
 1017fca:	(bad)  
 1017fcb:	jmp    QWORD PTR [rax-0x2f]
 1017fce:	add    BYTE PTR [rax],al
 1017fd0:	add    BYTE PTR [rax],al
 1017fd2:	add    BYTE PTR [rax],al
 1017fd4:	rol    WORD PTR [rax],1
 1017fd7:	add    BYTE PTR [rcx],al
 1017fd9:	add    BYTE PTR [rax],al
 1017fdb:	add    BYTE PTR [rcx+rdx*8+0x0],ch
 1017fdf:	add    BYTE PTR [rdx],al
 1017fe1:	add    BYTE PTR [rax],al
 1017fe3:	add    BYTE PTR [rax-0x2e],al
 1017fe6:	add    BYTE PTR [rax],al
 1017fe8:	add    DWORD PTR [rax],eax
 1017fea:	add    BYTE PTR [rax],al
 1017fec:	rex.WX rol BYTE PTR [rax],cl
 1017fef:	add    BYTE PTR [rax],al
 1017ff1:	add    BYTE PTR [rax],al
 1017ff3:	add    BYTE PTR [rdx+rdx*8+0x0],dl
 1017ff7:	add    bh,bh
 1017ff9:	(bad)  
 1017ffa:	(bad)  
 1017ffb:	jmp    QWORD PTR [rax+0x163]
 1018001:	add    BYTE PTR [rax],al
 1018003:	add    BYTE PTR [rbp+0x3000163],ch
 1018009:	add    BYTE PTR [rax],al
 101800b:	add    cl,al
 101800d:	movsxd eax,DWORD PTR [rcx]
 101800f:	add    BYTE PTR [rax],al
 1018011:	add    BYTE PTR [rax],al
 1018013:	add    BYTE PTR [rcx],bl
 1018015:	or     al,BYTE PTR [rdx]
 1018017:	add    BYTE PTR [rdx],cl
 1018019:	push   rdx
 101801a:	(bad)  
 101801b:	push   rax
 101801c:	add    bl,ch
 101801e:	add    BYTE PTR [rax],al
 1018020:	js     0x1018042
 1018022:	add    BYTE PTR [rax],al
 1018024:	sbb    DWORD PTR [rbx],esp
 1018026:	or     al,BYTE PTR [rax]
 1018028:	adc    al,0x34
 101802a:	adc    BYTE PTR [rax],al
 101802c:	adc    al,0x72
 101802e:	adc    al,dh
 1018030:	(bad)  
 1018031:	loopne 0x101803f
 1018033:	ror    BYTE PTR [rdx],1
 1018035:	ror    BYTE PTR [rax],0x70
 1018038:	(bad)  
 1018039:	(bad)  
 101803a:	(bad)  
 101803b:	push   rax
 101803c:	mov    ah,0xda
 101803e:	add    BYTE PTR [rax],al
 1018040:	xor    BYTE PTR [rax],al
 1018042:	add    BYTE PTR [rax],al
 1018044:	adc    DWORD PTR [rax+rcx*1],ebx
 1018047:	add    BYTE PTR [rsp+riz*2],bl
 101804a:	(bad)  
 101804b:	add    BYTE PTR [rax],bl
 101804d:	push   rsp
 101804e:	or     eax,0xc341400
 1018053:	add    BYTE PTR [rax],cl
 1018055:	xchg   edx,eax
 1018056:	add    al,0x70
 1018058:	add    bl,ch
 101805a:	add    BYTE PTR [rax],al
 101805c:	movabs al,ds:0xf0ffffffff000020
 1018065:	add    DWORD PTR fs:[rax],eax
 1018068:	mov    al,0xd3
 101806a:	add    BYTE PTR [rax],al
 101806c:	(bad)  
 101806d:	(bad)  
 101806e:	(bad)  
 101806f:	(bad)  
 1018070:	fst    st(3)
 1018072:	add    BYTE PTR [rax],al
 1018074:	add    BYTE PTR [rax],al
 1018076:	add    BYTE PTR [rax],al
 1018078:	push   rdx
 1018079:	(bad)  
 101807a:	add    BYTE PTR [rax],al
 101807c:	(bad)  
 101807d:	(bad)  
 101807e:	(bad)  
 101807f:	call   QWORD PTR [rcx]
 1018081:	sbb    al,0x8
 1018083:	add    BYTE PTR [rsp+riz*2],bl
 1018086:	or     al,0x0
 1018088:	sbb    BYTE PTR [rbx+rcx*1+0x0],dl
 101808c:	adc    al,0x34
 101808e:	or     al,BYTE PTR [rax]
 1018090:	or     BYTE PTR [rdx+0x4],dh
 1018093:	jo     0x1018097
 1018095:	fld    QWORD PTR [rax]
 1018097:	add    al,cl
 1018099:	and    BYTE PTR [rax],al
 101809b:	add    bh,bh
 101809d:	(bad)  
 101809e:	(bad)  
 101809f:	call   rax
 10180a1:	add    DWORD PTR fs:[rax],eax
 10180a4:	adc    ah,0x0
 10180a7:	add    bh,bh
 10180a9:	(bad)  
 10180aa:	(bad)  
 10180ab:	jmp    FWORD PTR [rbp+0xd4]
 10180b1:	add    BYTE PTR [rax],al
 10180b3:	add    BYTE PTR [rdi],al
 10180b5:	(bad)  
 10180b6:	add    BYTE PTR [rax],al
 10180b8:	(bad)  
 10180b9:	(bad)  
 10180ba:	(bad)  
 10180bb:	inc    DWORD PTR [rcx]
 10180bd:	add    al,0x1
 10180bf:	add    BYTE PTR [rdx+riz*2],al
 10180c2:	add    BYTE PTR [rax],al
 10180c4:	add    DWORD PTR [rsi],eax
 10180c6:	add    al,BYTE PTR [rax]
 10180c8:	(bad)  
 10180c9:	xor    al,BYTE PTR [rdx]
 10180cb:	push   rax
 10180cc:	or     DWORD PTR [rdx],ecx
 10180ce:	add    al,0x0
 10180d0:	or     dh,BYTE PTR [rsi+rax*1]
 10180d3:	add    BYTE PTR [rdx],cl
 10180d5:	xor    al,BYTE PTR [rsi]
 10180d7:	jo     0x10180bf
 10180d9:	fiadd  WORD PTR [rax]
 10180db:	add    BYTE PTR [rcx],al
 10180dd:	add    BYTE PTR [rax],al
 10180df:	add    BYTE PTR [rdx-0x17ffff2b],ch
 10180e5:	(bad)  
 10180e6:	add    BYTE PTR [rax],al
 10180e8:	add    ah,BYTE PTR [rbp+0x1]
 10180eb:	add    al,ch
 10180ed:	(bad)  
 10180ee:	add    BYTE PTR [rax],al
 10180f0:	add    DWORD PTR [rcx+rax*1],eax
 10180f3:	add    BYTE PTR [rdx+rax*2],al
 10180f6:	add    BYTE PTR [rax],al
 10180f8:	add    DWORD PTR [rcx+rax*1],eax
 10180fb:	add    BYTE PTR [rdx+rax*2],al
 10180fe:	add    BYTE PTR [rax],al
 1018100:	add    DWORD PTR [rsi],eax
 1018102:	add    al,BYTE PTR [rax]
 1018104:	(bad)  
 1018105:	xor    al,BYTE PTR [rdx]
 1018107:	push   rax
 1018108:	or     DWORD PTR [rdi],edx
 101810a:	(bad)  
 101810b:	add    BYTE PTR [rdi],dl
 101810d:	xor    al,0xd
 101810f:	add    BYTE PTR [rdi],dl
 1018111:	jb     0x1018126
 1018113:	rcl    BYTE PTR [rcx],0x70
 1018116:	adc    BYTE PTR [rax-0x1a],ah
 1018119:	fiadd  WORD PTR [rax]
 101811b:	add    BYTE PTR [rcx],al
 101811d:	add    BYTE PTR [rax],al
 101811f:	add    BYTE PTR [rbx-0x28],al
 1018122:	add    BYTE PTR [rax],al
 1018124:	pop    rsp
 1018125:	fadd   DWORD PTR [rax]
 1018127:	add    BYTE PTR [rsi],ah
 1018129:	add    DWORD PTR gs:[rax],eax
 101812c:	pop    rsp
 101812d:	fadd   DWORD PTR [rax]
 101812f:	add    BYTE PTR [rcx],al
 1018131:	(bad)  
 1018132:	add    al,BYTE PTR [rax]
 1018134:	(bad)  
 1018135:	xor    al,BYTE PTR [rdx]
 1018137:	push   rax
 1018138:	adc    DWORD PTR [rax],ebx
 101813a:	add    eax,0x14621800
 101813f:	rcl    BYTE PTR [rdx],0x70
 1018142:	adc    DWORD PTR [rax+0x10],esp
 1018145:	xor    BYTE PTR [rax],al
 1018147:	add    dh,ah
 1018149:	fiadd  WORD PTR [rax]
 101814b:	add    BYTE PTR [rcx],al
 101814d:	add    BYTE PTR [rax],al
 101814f:	add    BYTE PTR [rbx-0x3cffff28],ah
 1018155:	fadd   DWORD PTR [rax]
 1018157:	add    BYTE PTR [rbp+0x65],ch
 101815a:	add    DWORD PTR [rax],eax
 101815c:	add    BYTE PTR [rax],al
 101815e:	add    BYTE PTR [rax],al
 1018160:	add    DWORD PTR [rdx+rax*1],ecx
 1018163:	add    BYTE PTR [rcx+rax*1],cl
 1018166:	adc    DWORD PTR [rax],eax
 1018168:	add    DWORD PTR [rsi],eax
 101816a:	add    al,BYTE PTR [rax]
 101816c:	(bad)  
 101816d:	xor    al,BYTE PTR [rdx]
 101816f:	xor    BYTE PTR [rcx],al
 1018171:	add    al,0x1
 1018173:	add    BYTE PTR [rdx+rax*2],al
 1018176:	add    BYTE PTR [rax],al
 1018178:	add    DWORD PTR [rax],eax
 101817a:	add    BYTE PTR [rax],al
 101817c:	add    DWORD PTR [rdi],ecx
 101817e:	(bad)  
 101817f:	add    BYTE PTR [rdi],cl
 1018181:	fs (bad) 
 1018183:	add    BYTE PTR [rdi],cl
 1018185:	xor    al,0x6
 1018187:	add    BYTE PTR [rdi],cl
 1018189:	xor    cl,BYTE PTR [rbx]
 101818b:	jo     0x101818e
 101818d:	sbb    DWORD PTR [rdx],ecx
 101818f:	add    BYTE PTR [rcx],bl
 1018191:	je     0x101819c
 1018193:	add    BYTE PTR [rcx],bl
 1018195:	or     BYTE PTR fs:[rax],al
 1018198:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 101819c:	sbb    DWORD PTR [rsi+rax*1],esi
 101819f:	add    BYTE PTR [rcx],bl
 10181a1:	xor    dl,BYTE PTR [rip+0xa1901c0]        # 0xb1a8367
 10181a7:	add    BYTE PTR [rcx],bl
 10181a9:	je     0x10181b4
 10181ab:	add    BYTE PTR [rcx],bl
 10181ad:	or     BYTE PTR fs:[rax],al
 10181b0:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 10181b4:	sbb    DWORD PTR [rsi+rax*1],esi
 10181b7:	add    BYTE PTR [rcx],bl
 10181b9:	xor    dl,BYTE PTR [rip+0x10401c0]        # 0x205837f
 10181bf:	add    BYTE PTR [rdx+rax*2],al
 10181c2:	add    BYTE PTR [rax],al
 10181c4:	add    DWORD PTR [rcx+rax*1],eax
 10181c7:	add    BYTE PTR [rdx+rax*2],al
 10181ca:	add    BYTE PTR [rax],al
 10181cc:	add    DWORD PTR [rsi],eax
 10181ce:	add    al,BYTE PTR [rax]
 10181d0:	(bad)  
 10181d1:	xor    al,BYTE PTR [rdx]
 10181d3:	push   rax
 10181d4:	adc    DWORD PTR [rsi],eax
 10181d6:	add    al,BYTE PTR [rax]
 10181d8:	(bad)  
 10181d9:	xor    al,BYTE PTR [rdx]
 10181db:	xor    dh,ah
 10181dd:	fiadd  WORD PTR [rax]
 10181df:	add    BYTE PTR [rcx],al
 10181e1:	add    BYTE PTR [rax],al
 10181e3:	add    bh,al
 10181e5:	fld    QWORD PTR [rax]
 10181e7:	add    BYTE PTR [rip+0xffffffff9f0000de],ch        # 0xffffffffa00182cb
 10181ed:	add    DWORD PTR gs:[rax],eax
 10181f0:	add    BYTE PTR [rax],al
 10181f2:	add    BYTE PTR [rax],al
 10181f4:	add    DWORD PTR [rcx+rax*1],eax
 10181f7:	add    BYTE PTR [rdx+rax*2],al
 10181fa:	add    BYTE PTR [rax],al
 10181fc:	add    DWORD PTR [rdx],ecx
 10181fe:	add    al,0x0
 1018200:	or     dh,BYTE PTR [rsi+rax*1]
 1018203:	add    BYTE PTR [rdx],cl
 1018205:	xor    al,BYTE PTR [rsi]
 1018207:	jo     0x101820a
 1018209:	or     al,BYTE PTR [rax+rax*1]
 101820c:	or     dh,BYTE PTR [rsi+rax*1]
 101820f:	add    BYTE PTR [rdx],cl
 1018211:	xor    al,BYTE PTR [rsi]
 1018213:	jo     0x1018216
 1018215:	(bad)  
 1018216:	add    al,BYTE PTR [rax]
 1018218:	(bad)  
 1018219:	xor    al,BYTE PTR [rdx]
 101821b:	push   rax
 101821c:	or     DWORD PTR [rcx+rax*1],eax
 101821f:	add    BYTE PTR [rdx+rax*2],al
 1018222:	add    BYTE PTR [rax],al
 1018224:	out    0xde,al
 1018226:	add    BYTE PTR [rax],al
 1018228:	add    DWORD PTR [rax],eax
 101822a:	add    BYTE PTR [rax],al
 101822c:	xchg   edi,eax
 101822d:	fild   WORD PTR [rax]
 101822f:	add    dl,cl
 1018231:	fild   WORD PTR [rax]
 1018233:	add    al,al
 1018235:	add    DWORD PTR gs:[rax],eax
 1018238:	retf   0xdf
 101823b:	add    BYTE PTR [rcx],al
 101823d:	or     al,BYTE PTR [rax+rax*1]
 1018240:	or     dh,BYTE PTR [rax+rcx*1]
 1018243:	add    BYTE PTR [rdx],cl
 1018245:	xor    al,BYTE PTR [rsi]
 1018247:	jo     0x101825a
 1018249:	(bad)  
 101824a:	add    al,0x0
 101824c:	(bad)  
 101824d:	xor    al,0x8
 101824f:	add    BYTE PTR [rcx],cl
 1018251:	push   rdx
 1018252:	add    dl,BYTE PTR [rax+0x2]
 1018255:	fld    QWORD PTR [rax]
 1018257:	add    BYTE PTR [rax+0x21],dl
 101825a:	add    BYTE PTR [rax],al
 101825c:	(bad)  
 101825d:	(bad)  
 101825e:	(bad)  
 101825f:	(bad)  
 1018260:	call   0xd0183ca
 1018265:	loope  0x1018267
 1018267:	add    bh,bh
 1018269:	(bad)  
 101826a:	(bad)  
 101826b:	push   QWORD PTR [rcx]
 101826d:	loope  0x101826f
 101826f:	add    BYTE PTR [rax],al
 1018271:	add    BYTE PTR [rax],al
 1018273:	add    BYTE PTR [rsi-0x1f],ch
 1018276:	add    BYTE PTR [rax],al
 1018278:	(bad)  
 1018279:	(bad)  
 101827a:	(bad)  
 101827b:	inc    DWORD PTR [rcx]
 101827d:	or     DWORD PTR [rdx],eax
 101827f:	add    BYTE PTR [rcx],cl
 1018281:	xor    al,BYTE PTR [rdx]
 1018283:	push   rax
 1018284:	add    DWORD PTR [rcx],ecx
 1018286:	add    al,BYTE PTR [rax]
 1018288:	or     DWORD PTR [rdx],esi
 101828a:	add    dl,BYTE PTR [rax+0x1]
 101828d:	or     eax,0x340d0004
 1018292:	(bad)  
 1018293:	add    BYTE PTR [rip+0x1500632],cl        # 0x25188cb
 1018299:	(bad)  
 101829a:	or     BYTE PTR [rax],al
 101829c:	(bad)  
 101829d:	je     0x10182a7
 101829f:	add    BYTE PTR [rdi],dl
 10182a1:	fs (bad) 
 10182a3:	add    BYTE PTR [rdi],dl
 10182a5:	xor    al,0x6
 10182a7:	add    BYTE PTR [rdi],dl
 10182a9:	xor    dl,BYTE PTR [rax]
 10182ab:	push   rax
 10182ac:	add    DWORD PTR [rdx],edx
 10182ae:	(bad)  
 10182af:	add    BYTE PTR [rdx],dl
 10182b1:	je     0x10182ba
 10182b3:	add    BYTE PTR [rdx],dl
 10182b5:	xor    al,0x6
 10182b7:	add    BYTE PTR [rdx],dl
 10182b9:	xor    cl,BYTE PTR [rbx]
 10182bb:	push   rax
 10182bc:	add    DWORD PTR [rcx],ecx
 10182be:	add    al,BYTE PTR [rax]
 10182c0:	or     DWORD PTR [rdx],esi
 10182c2:	add    dl,BYTE PTR [rax+0x1]
 10182c5:	or     DWORD PTR [rdx],eax
 10182c7:	add    BYTE PTR [rcx],cl
 10182c9:	xor    al,BYTE PTR [rdx]
 10182cb:	push   rax
 10182cc:	add    DWORD PTR [rcx],ecx
 10182ce:	add    al,BYTE PTR [rax]
 10182d0:	or     DWORD PTR [rdx],esi
 10182d2:	add    dl,BYTE PTR [rax+0x1]
 10182d5:	or     eax,0x320d0002
 10182da:	(bad)  
 10182db:	push   rax
 10182dc:	add    DWORD PTR [rcx],ecx
 10182de:	add    al,BYTE PTR [rax]
 10182e0:	or     DWORD PTR [rdx],esi
 10182e2:	add    dl,BYTE PTR [rax+0x1]
 10182e5:	or     DWORD PTR [rdx],eax
 10182e7:	add    BYTE PTR [rcx],cl
 10182e9:	xor    al,BYTE PTR [rdx]
 10182eb:	push   rax
 10182ec:	add    DWORD PTR [rdx],edx
 10182ee:	(bad)  
 10182ef:	add    BYTE PTR [rdx],dl
 10182f1:	je     0x10182fa
 10182f3:	add    BYTE PTR [rdx],dl
 10182f5:	xor    al,0x6
 10182f7:	add    BYTE PTR [rdx],dl
 10182f9:	xor    cl,BYTE PTR [rbx]
 10182fb:	push   rax
 10182fc:	add    DWORD PTR [rcx],ecx
 10182fe:	add    al,BYTE PTR [rax]
 1018300:	or     DWORD PTR [rdx],esi
 1018302:	add    dl,BYTE PTR [rax+0x1]
 1018305:	add    eax,0x50020001
 101830a:	add    BYTE PTR [rax],al
 101830c:	add    DWORD PTR [rip+0x50020001],eax        # 0x51038313
 1018312:	add    BYTE PTR [rax],al
 1018314:	add    DWORD PTR [rip+0x340d0004],ecx        # 0x350e831e
 101831a:	(bad)  
 101831b:	add    BYTE PTR [rip+0x1500632],cl        # 0x2518953
 1018321:	adc    al,BYTE PTR [rsi]
 1018323:	add    BYTE PTR [rdx],dl
 1018325:	je     0x101832e
 1018327:	add    BYTE PTR [rdx],dl
 1018329:	xor    al,0x6
 101832b:	add    BYTE PTR [rdx],dl
 101832d:	xor    cl,BYTE PTR [rbx]
 101832f:	push   rax
 1018330:	add    DWORD PTR [rip+0x340d0004],ecx        # 0x350e833a
 1018336:	(bad)  
 1018337:	add    BYTE PTR [rip+0x1500632],cl        # 0x251896f
 101833d:	or     DWORD PTR [rdx],eax
 101833f:	add    BYTE PTR [rcx],cl
 1018341:	xor    al,BYTE PTR [rdx]
 1018343:	push   rax
 1018344:	add    DWORD PTR [rcx],ecx
 1018346:	add    al,BYTE PTR [rax]
 1018348:	or     DWORD PTR [rdx],esi
 101834a:	add    dl,BYTE PTR [rax+0x1]
 101834d:	or     DWORD PTR [rdx],eax
 101834f:	add    BYTE PTR [rcx],cl
 1018351:	xor    al,BYTE PTR [rdx]
 1018353:	push   rax
 1018354:	add    DWORD PTR [rip+0x50020001],eax        # 0x5103835b
 101835a:	add    BYTE PTR [rax],al
 101835c:	sbb    DWORD PTR [rcx],esp
 101835e:	add    al,BYTE PTR [rax]
 1018360:	sbb    BYTE PTR [rdx-0x22fdcfec],dh
 1018366:	add    BYTE PTR [rax],al
 1018368:	and    BYTE PTR [rip+0xffffffffffff0000],dh        # 0x100836e
 101836e:	(bad)  
 101836f:	inc    DWORD PTR [rax]
	...
 1018379:	add    WORD PTR [rax],ax
 101837c:	(bad)  
 101837d:	(bad)  
 101837e:	(bad)  
 101837f:	inc    DWORD PTR [rax]
 1018381:	add    BYTE PTR [rax],al
 1018383:	add    BYTE PTR [rax],al
 1018385:	add    BYTE PTR [rax],al
 1018387:	add    BYTE PTR [rcx],al
 1018389:	add    BYTE PTR [rax],al
 101838b:	add    BYTE PTR [rdx],al
 101838d:	add    BYTE PTR [rax],al
 101838f:	add    BYTE PTR [rdx],al
 1018391:	add    BYTE PTR [rax],al
 1018393:	add    BYTE PTR [rax+0x183],bl
 1018399:	add    BYTE PTR [rax],al
 101839b:	add    BYTE PTR [rax],al
 101839d:	mov    cl,0x1
 101839f:	add    BYTE PTR [rax],al
 10183a1:	add    BYTE PTR [rax],al
 10183a3:	add    BYTE PTR [rax],dl
 10183a5:	add    WORD PTR [rax],ax
 10183a8:	pop    rax
 10183a9:	add    BYTE PTR [rax],al
 10183ab:	add    BYTE PTR [rax],al
 10183ad:	add    BYTE PTR [rax],al
 10183af:	add    BYTE PTR [rax-0x4f],ch
 10183b2:	add    DWORD PTR [rax],eax
 10183b4:	add    BYTE PTR [rax],al
 10183b6:	add    BYTE PTR [rax],al
 10183b8:	xor    BYTE PTR [rsi+0x1],ah
 10183bb:	add    BYTE PTR [rax+0x0],bl
 10183be:	add    BYTE PTR [rax],al
 10183c0:	add    dh,ah
 10183c2:	add    BYTE PTR [rax],al
 10183c4:	(bad)  
 10183c5:	(bad)  
 10183c6:	(bad)  
 10183c7:	jmp    FWORD PTR [rdi-0x1a]
 10183ca:	add    BYTE PTR [rax],al
 10183cc:	add    BYTE PTR [rax],al
 10183ce:	add    BYTE PTR [rax],al
 10183d0:	mov    esi,esp
 10183d2:	add    BYTE PTR [rax],al
 10183d4:	add    DWORD PTR [rax],eax
 10183d6:	add    BYTE PTR [rax],al
 10183d8:	rex.WR out 0x0,eax
 10183db:	add    BYTE PTR [rax],al
 10183dd:	add    BYTE PTR [rax],al
 10183df:	add    BYTE PTR [rax-0x19],ch
 10183e2:	add    BYTE PTR [rax],al
 10183e4:	(bad)  
 10183e5:	(bad)  
 10183e6:	(bad)  
 10183e7:	call   QWORD PTR [rax]
 10183e9:	add    WORD PTR [rax],ax
 10183ec:	add    BYTE PTR [rax],al
 10183ee:	add    BYTE PTR [rax],al
 10183f0:	sbb    DWORD PTR [rdx],ecx
 10183f2:	add    al,BYTE PTR [rax]
 10183f4:	or     dh,BYTE PTR [rdx+0x6]
 10183f7:	push   rax
 10183f8:	add    bl,ch
 10183fa:	add    BYTE PTR [rax],al
 10183fc:	and    BYTE PTR [rip+0xa190000],dh        # 0xb1a8402
 1018402:	add    al,BYTE PTR [rax]
 1018404:	or     dh,BYTE PTR [rdx+0x6]
 1018407:	push   rax
 1018408:	add    bl,ch
 101840a:	add    BYTE PTR [rax],al
 101840c:	and    BYTE PTR [rip+0x18010000],dh        # 0x19028412
 1018412:	or     al,BYTE PTR [rax]
 1018414:	sbb    BYTE PTR [rdx+rcx*1+0x0],ah
 1018418:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 101841c:	sbb    BYTE PTR [rax+rcx*1],dh
 101841f:	add    BYTE PTR [rax],bl
 1018421:	xor    dl,BYTE PTR [rax+rsi*8]
 1018424:	adc    ah,al
 1018426:	adc    BYTE PTR [rax+0x19],dh
 1018429:	and    eax,0x1130003
 101842e:	add    BYTE PTR cs:[rax+rsi*1],cl
 1018432:	add    BYTE PTR [rax],al
 1018434:	mov    ah,0xda
 1018436:	add    BYTE PTR [rax],al
 1018438:	push   rax
 1018439:	add    DWORD PTR [rax],eax
 101843b:	add    BYTE PTR [rcx],ah
 101843d:	clts   
 101843f:	add    BYTE PTR [rdi],cl
 1018441:	je     0x101846f
 1018443:	add    BYTE PTR [rax],cl
 1018445:	fs sub eax,0x32540400
 101844b:	add    al,dh
 101844d:	call   0xffffffffea168452
 1018452:	add    BYTE PTR [rax],al
 1018454:	sub    BYTE PTR [rcx+rax*1+0x2100],al
 101845b:	add    al,dh
 101845d:	call   0xffffffffea168462
 1018462:	add    BYTE PTR [rax],al
 1018464:	sub    BYTE PTR [rcx+rax*1+0x4080100],al
 101846b:	add    BYTE PTR [rax],cl
 101846d:	xchg   edx,eax
 101846e:	add    al,0x60
 1018470:	add    edx,DWORD PTR [rax+0x2]
 1018473:	xor    BYTE PTR [rcx],ah
 1018475:	add    eax,0x74050002
 101847a:	(bad)  
 101847b:	add    BYTE PTR [rax-0x16],al
 101847e:	add    BYTE PTR [rax],al
 1018480:	in     al,dx
 1018481:	(bad)  
 1018482:	add    BYTE PTR [rax],al
 1018484:	push   0x21000184
 1018489:	add    BYTE PTR [rax],al
 101848b:	add    BYTE PTR [rax-0x16],al
 101848e:	add    BYTE PTR [rax],al
 1018490:	in     al,dx
 1018491:	(bad)  
 1018492:	add    BYTE PTR [rax],al
 1018494:	push   0x21000184
 1018499:	add    BYTE PTR [rdx],al
 101849b:	add    BYTE PTR [rax],al
 101849d:	je     0x10184ad
 101849f:	add    BYTE PTR [rax-0x16],al
 10184a2:	add    BYTE PTR [rax],al
 10184a4:	in     al,dx
 10184a5:	(bad)  
 10184a6:	add    BYTE PTR [rax],al
 10184a8:	push   0x19000184
 10184ad:	(bad)  
 10184ae:	add    eax,0x4c340d00
 10184b3:	add    BYTE PTR [rip+0x6004801],cl        # 0x701ccba
 10184b9:	jo     0x10184bb
 10184bb:	add    BYTE PTR [rdx+rbx*8+0x2300000],dh
 10184c2:	add    BYTE PTR [rax],al
 10184c4:	sbb    DWORD PTR [rsi],esi
 10184c6:	or     DWORD PTR [rax],eax
 10184c8:	and    eax,0x25064774
 10184cd:	fs rex.RX (bad) 
 10184d0:	and    eax,0x25064534
 10184d5:	add    DWORD PTR [rdx+0x6],eax
 10184d8:	adc    BYTE PTR [rax+0x0],dl
 10184db:	add    BYTE PTR [rdx+rbx*8+0x32000000],dh
 10184e2:	add    BYTE PTR [rax],al
 10184e4:	add    DWORD PTR [rax],edx
 10184e6:	add    eax,DWORD PTR [rax]
 10184e8:	adc    BYTE PTR [rdx+0xc],al
 10184eb:	(bad)  
 10184ec:	or     esi,DWORD PTR [rax]
 10184ee:	add    BYTE PTR [rax],al
 10184f0:	and    DWORD PTR [rip+0x74050002],eax        # 0x750684f8
 10184f6:	add    al,0x0
 10184f8:	jo     0x10184ed
 10184fa:	add    BYTE PTR [rax],al
 10184fc:	sahf   
 10184fd:	repz add BYTE PTR [rax],al
 1018500:	in     al,0x84
 1018502:	add    DWORD PTR [rax],eax
 1018504:	and    DWORD PTR [rax],eax
 1018506:	add    al,BYTE PTR [rax]
 1018508:	add    BYTE PTR [rsp+rax*1+0x0],dh
 101850c:	jo     0x1018501
 101850e:	add    BYTE PTR [rax],al
 1018510:	sahf   
 1018511:	repz add BYTE PTR [rax],al
 1018514:	in     al,0x84
 1018516:	add    DWORD PTR [rax],eax
 1018518:	and    DWORD PTR [rax],eax
 101851a:	add    BYTE PTR [rax],al
 101851c:	jo     0x1018511
 101851e:	add    BYTE PTR [rax],al
 1018520:	sahf   
 1018521:	repz add BYTE PTR [rax],al
 1018524:	in     al,0x84
 1018526:	add    DWORD PTR [rax],eax
 1018528:	add    DWORD PTR [rcx+rax*1],eax
 101852b:	add    BYTE PTR [rdx+rax*2],al
 101852e:	add    BYTE PTR [rax],al
 1018530:	and    DWORD PTR [rip+0x34050002],eax        # 0x35068538
 1018536:	add    al,0x0
 1018538:	add    ah,dh
 101853a:	add    BYTE PTR [rax],al
 101853c:	(bad)  
 101853d:	hlt    
 101853e:	add    BYTE PTR [rax],al
 1018540:	sub    BYTE PTR [rbp+0x210001],al
 1018546:	add    al,BYTE PTR [rax]
 1018548:	add    BYTE PTR [rsp+rax*1],dh
 101854b:	add    BYTE PTR [rax],al
 101854d:	hlt    
 101854e:	add    BYTE PTR [rax],al
 1018550:	(bad)  
 1018551:	hlt    
 1018552:	add    BYTE PTR [rax],al
 1018554:	sub    BYTE PTR [rbp+0x210001],al
 101855a:	add    al,BYTE PTR [rax]
 101855c:	add    BYTE PTR [rsp+rax*1],dh
 101855f:	add    BYTE PTR [rax],al
 1018561:	hlt    
 1018562:	add    BYTE PTR [rax],al
 1018564:	(bad)  
 1018565:	hlt    
 1018566:	add    BYTE PTR [rax],al
 1018568:	sub    BYTE PTR [rbp+0x210001],al
 101856e:	add    al,BYTE PTR [rax]
 1018570:	add    BYTE PTR [rsp+rax*1],dh
 1018573:	add    BYTE PTR [rax],al
 1018575:	hlt    
 1018576:	add    BYTE PTR [rax],al
 1018578:	(bad)  
 1018579:	hlt    
 101857a:	add    BYTE PTR [rax],al
 101857c:	sub    BYTE PTR [rbp+0x4010001],al
 1018582:	add    DWORD PTR [rax],eax
 1018584:	add    al,0x42
 1018586:	add    BYTE PTR [rax],al
 1018588:	add    DWORD PTR [rcx+rax*1],eax
 101858b:	add    BYTE PTR [rdx+rax*2],al
 101858e:	add    BYTE PTR [rax],al
 1018590:	sbb    DWORD PTR [rip+0xffffffffe424000b],esi        # 0xffffffffe52585a1
 1018596:	xchg   edi,eax
 1018597:	add    BYTE PTR [rsp+rsi*2],ah
 101859a:	xchg   esi,eax
 101859b:	add    BYTE PTR [rsp+riz*2],ah
 101859e:	xchg   ebp,eax
 101859f:	add    BYTE PTR [rsp+rsi*1],ah
 10185a2:	xchg   esp,eax
 10185a3:	add    BYTE PTR [rcx+rax*1],ah
 10185a6:	xchg   edx,eax
 10185a7:	add    BYTE PTR [rip+0xffffffffb4000050],dl        # 0xffffffffb50185fd
 10185ad:	fiadd  DWORD PTR [rax]
 10185af:	add    BYTE PTR [rax+0x19000004],al
 10185b5:	sbb    eax,DWORD PTR [rbx]
 10185b7:	add    BYTE PTR [rcx],cl
 10185b9:	add    DWORD PTR [rdx+0x0],ecx
 10185bc:	add    dh,BYTE PTR [rax]
 10185be:	add    BYTE PTR [rax],al
 10185c0:	mov    ah,0xda
 10185c2:	add    BYTE PTR [rax],al
 10185c4:	add    al,BYTE PTR [rax]
 10185c7:	add    BYTE PTR [rcx],bl
 10185c9:	sbb    DWORD PTR [rdx],eax
 10185cb:	add    BYTE PTR [rdi],al
 10185cd:	add    DWORD PTR [rbx+0x0],ecx
 10185d0:	mov    ah,0xda
 10185d2:	add    BYTE PTR [rax],al
 10185d4:	add    al,BYTE PTR [rax]
 10185d7:	add    BYTE PTR [rcx],ah
 10185d9:	or     BYTE PTR [rdx],al
 10185db:	add    BYTE PTR [rax],cl
 10185dd:	xor    al,0x4a
 10185df:	add    al,dl
 10185e1:	stc    
 10185e2:	add    BYTE PTR [rax],al
 10185e4:	stc    
 10185e5:	stc    
 10185e6:	add    BYTE PTR [rax],al
 10185e8:	enter  0x185,0x0
 10185ec:	and    DWORD PTR [rax],eax
 10185ee:	add    BYTE PTR [rax],al
 10185f0:	sar    cl,1
 10185f2:	add    BYTE PTR [rax],al
 10185f4:	stc    
 10185f5:	stc    
 10185f6:	add    BYTE PTR [rax],al
 10185f8:	enter  0x185,0x0
 10185fc:	sbb    DWORD PTR [rsi],esi
 10185fe:	or     eax,DWORD PTR [rax]
 1018600:	and    al,0x64
 1018602:	push   rdi
 1018603:	add    BYTE PTR [rax],ah
 1018605:	xor    al,0x55
 1018607:	add    BYTE PTR [rbx],dl
 1018609:	add    DWORD PTR [rsi+0x0],ecx
 101860c:	or     al,0xf0
 101860e:	or     ah,al
 1018610:	or     al,dl
 1018612:	(bad)  
 1018613:	rol    BYTE PTR [rax+rsi*2],0x0
 1018617:	add    BYTE PTR [rax+0x80000db],cl
 101861d:	cmp    eax,DWORD PTR [rax]
 101861f:	add    BYTE PTR [rbx+0x2],ah
 1018622:	add    BYTE PTR [rax],al
 1018624:	(bad)  
 1018625:	(bad)  
 1018626:	(bad)  
 1018627:	inc    DWORD PTR [rax]
 1018629:	add    BYTE PTR [rax],al
 101862b:	add    BYTE PTR [rax],al
 101862d:	add    BYTE PTR [rax],al
 101862f:	add    BYTE PTR [rax+0x66],ah
 1018632:	add    DWORD PTR [rax],eax
 1018634:	(bad)  
 1018635:	(bad)  
 1018636:	(bad)  
 1018637:	inc    DWORD PTR [rax]
 1018639:	add    BYTE PTR [rax],al
 101863b:	add    BYTE PTR [rax],al
 101863d:	add    BYTE PTR [rax],al
 101863f:	add    BYTE PTR [rcx],al
 1018641:	add    BYTE PTR [rax],al
 1018643:	add    BYTE PTR [rdx],al
 1018645:	add    BYTE PTR [rax],al
 1018647:	add    BYTE PTR [rcx],al
 1018649:	add    BYTE PTR [rax],al
 101864b:	add    BYTE PTR [rax-0x7a],dl
 101864e:	add    DWORD PTR [rax],eax
 1018650:	add    BYTE PTR [rax],al
 1018652:	add    BYTE PTR [rax],al
 1018654:	push   0x1b1
 1018659:	add    BYTE PTR [rax],al
 101865b:	add    BYTE PTR [rax+0x66],dh
 101865e:	add    DWORD PTR [rax],eax
 1018660:	cmp    BYTE PTR [rax],al
 1018662:	add    BYTE PTR [rax],al
 1018664:	mov    al,0xfa
 1018666:	add    BYTE PTR [rax],al
 1018668:	(bad)  
 1018669:	(bad)  
 101866a:	(bad)  
 101866b:	call   QWORD PTR [rcx+0xfb]
 1018671:	add    BYTE PTR [rax],al
 1018673:	add    ch,cl
 1018675:	sti    
 1018676:	add    BYTE PTR [rax],al
 1018678:	add    DWORD PTR [rax],eax
 101867a:	add    BYTE PTR [rax],al
 101867c:	pop    rcx
 101867d:	cld    
 101867e:	add    BYTE PTR [rax],al
 1018680:	add    BYTE PTR [rax],al
 1018682:	add    BYTE PTR [rax],al
 1018684:	je     0x1018682
 1018686:	add    BYTE PTR [rax],al
 1018688:	add    DWORD PTR [rax],eax
 101868a:	add    BYTE PTR [rax],al
 101868c:	loopne 0x101868a
 101868e:	add    BYTE PTR [rax],al
 1018690:	add    BYTE PTR [rax],al
 1018692:	add    BYTE PTR [rax],al
 1018694:	sti    
 1018695:	cld    
 1018696:	add    BYTE PTR [rax],al
 1018698:	add    DWORD PTR [rax],eax
 101869a:	add    BYTE PTR [rax],al
 101869c:	ret    0xfd
 101869f:	add    BYTE PTR [rax],al
 10186a1:	add    BYTE PTR [rax],al
 10186a3:	add    bl,bl
 10186a5:	std    
 10186a6:	add    BYTE PTR [rax],al
 10186a8:	(bad)  
 10186a9:	(bad)  
 10186aa:	(bad)  
 10186ab:	push   QWORD PTR [rax+0xfe]
 10186b1:	add    BYTE PTR [rax],al
 10186b3:	add    BYTE PTR [rcx],bl
 10186b5:	or     al,BYTE PTR [rdx]
 10186b7:	add    BYTE PTR [rdx],cl
 10186b9:	xor    al,BYTE PTR [rsi]
 10186bb:	push   rax
 10186bc:	add    bl,ch
 10186be:	add    BYTE PTR [rax],al
 10186c0:	or     BYTE PTR [rbx],bh
 10186c2:	add    BYTE PTR [rax],al
 10186c4:	add    DWORD PTR [rcx+rax*1],eax
 10186c7:	add    BYTE PTR [rdx+rax*2],al
 10186ca:	add    BYTE PTR [rax],al
 10186cc:	add    DWORD PTR [rax],ebx
 10186ce:	add    DWORD PTR [rax],eax
 10186d0:	sbb    dl,al
 10186d2:	add    BYTE PTR [rax],al
 10186d4:	add    DWORD PTR [rsi],eax
 10186d6:	add    al,BYTE PTR [rax]
 10186d8:	(bad)  
 10186d9:	push   rdx
 10186da:	add    dl,BYTE PTR [rax+0x19]
 10186dd:	sbb    DWORD PTR [rdx],eax
 10186df:	add    BYTE PTR [rdi],al
 10186e1:	add    DWORD PTR [rcx+0x0],esp
 10186e4:	and    ah,bl
 10186e6:	add    BYTE PTR [rax],al
 10186e8:	add    DWORD PTR [rax],eax
 10186ea:	add    BYTE PTR [rax],al
 10186ec:	cmp    al,0x0
 10186ee:	add    DWORD PTR [rax],eax
 10186f0:	ins    BYTE PTR es:[rdi],dx
 10186f1:	(bad)  
 10186f2:	add    DWORD PTR [rax],eax
 10186f4:	adc    BYTE PTR [rax],cl
 10186f6:	add    DWORD PTR [rax],eax
 10186f8:	add    BYTE PTR [rax],al
 10186fa:	add    BYTE PTR [rax],al
 10186fc:	cli    
 10186fd:	add    al,BYTE PTR [rax]
 10186ff:	add    BYTE PTR [rcx],al
 1018701:	adc    eax,DWORD PTR [rcx]
 1018703:	add    BYTE PTR [rbx],dl
 1018705:	(bad)  
 1018706:	add    BYTE PTR [rax],al
 1018708:	add    DWORD PTR [rbx],edx
 101870a:	add    DWORD PTR [rax],eax
 101870c:	adc    eax,DWORD PTR [rdx+0x13010000]
 1018712:	add    DWORD PTR [rax],eax
 1018714:	adc    esp,DWORD PTR [rdx]
 1018716:	add    BYTE PTR [rax],al
 1018718:	add    DWORD PTR [rax],ebx
 101871a:	add    DWORD PTR [rax],eax
 101871c:	sbb    BYTE PTR [rdx+0x0],ah
 101871f:	add    BYTE PTR [rcx],al
 1018721:	adc    eax,DWORD PTR [rcx]
 1018723:	add    BYTE PTR [rbx],dl
 1018725:	and    al,BYTE PTR [rax]
 1018727:	add    BYTE PTR [rcx],al
 1018729:	sbb    BYTE PTR [rcx],al
 101872b:	add    BYTE PTR [rax],bl
 101872d:	and    al,BYTE PTR [rax]
 101872f:	add    BYTE PTR [rcx],al
 1018731:	add    al,0x1
 1018733:	add    BYTE PTR [rdx+riz*2],al
 1018736:	add    BYTE PTR [rax],al
 1018738:	add    DWORD PTR [rbx+rax*1],ecx
 101873b:	add    BYTE PTR [rdx+riz*4],cl
 101873e:	or     al,ah
 1018740:	(bad)  
 1018741:	xor    BYTE PTR [rax],al
 1018743:	add    BYTE PTR [rcx],ah
 1018745:	or     al,BYTE PTR [rax+rax*1]
 1018748:	or     ah,BYTE PTR [rdi+rcx*1+0x0]
 101874c:	add    eax,0x70000e54
 1018751:	or     al,0x1
 1018753:	add    BYTE PTR [rdi+0x3800010c],cl
 1018759:	xchg   DWORD PTR [rcx],eax
 101875b:	add    BYTE PTR [rcx],ah
 101875d:	(bad)  
 101875e:	or     BYTE PTR [rax],al
 1018760:	(bad)  
 1018761:	hlt    
 1018762:	or     BYTE PTR [rax],al
 1018764:	es (bad) 
 1018766:	or     DWORD PTR [rax],eax
 1018768:	or     eax,0x8000ac4
 101876d:	je     0x101877f
 101876f:	add    BYTE PTR [rdi-0x1dfffef4],cl
 1018775:	or     al,0x1
 1018777:	add    BYTE PTR [rdi+rax*4+0x1],al
 101877b:	add    BYTE PTR [rcx],ah
 101877d:	add    BYTE PTR [rax],al
 101877f:	add    BYTE PTR [rdi-0x1dfffef4],cl
 1018785:	or     al,0x1
 1018787:	add    BYTE PTR [rdi+rax*4+0x1],al
 101878b:	add    BYTE PTR [rcx],ah
 101878d:	add    BYTE PTR [rax],al
 101878f:	add    BYTE PTR [rax+0xc],dh
 1018792:	add    DWORD PTR [rax],eax
 1018794:	(bad)  
 1018795:	or     al,0x1
 1018797:	add    BYTE PTR [rax],bh
 1018799:	xchg   DWORD PTR [rcx],eax
 101879b:	add    BYTE PTR [rcx],al
 101879d:	js     0x10187ad
 101879f:	add    BYTE PTR [rax-0x2c],bh
 10187a2:	(bad)  
 10187a3:	add    BYTE PTR [rbx+0x54],dh
 10187a6:	or     al,0x0
 10187a8:	xor    eax,0x300006e4
 10187ad:	(bad)  
 10187ae:	(bad)  
 10187af:	add    BYTE PTR [rbx],ch
 10187b1:	je     0x10187c0
 10187b3:	add    BYTE PTR [rcx],cl
 10187b5:	jb     0x10187bc
 10187b7:	lock add esp,DWORD PTR [rax+0x2]
 10187bb:	xor    BYTE PTR [rcx],al
 10187bd:	add    al,0x1
 10187bf:	add    BYTE PTR [rdx+riz*4],al
 10187c2:	add    BYTE PTR [rax],al
 10187c4:	and    DWORD PTR [rip+0x34050002],eax        # 0x350687cc
 10187ca:	or     al,BYTE PTR [rax]
 10187cc:	loopne 0x10187df
 10187ce:	add    DWORD PTR [rax],eax
 10187d0:	(bad)  
 10187d1:	adc    al,BYTE PTR [rcx]
 10187d3:	add    BYTE PTR [rdi+rax*4+0x210001],bh
 10187da:	add    al,BYTE PTR [rax]
 10187dc:	add    BYTE PTR [rdx+rcx*1],dh
 10187df:	add    al,ah
 10187e1:	adc    DWORD PTR [rcx],eax
 10187e3:	add    BYTE PTR [rsi],al
 10187e5:	adc    al,BYTE PTR [rcx]
 10187e7:	add    BYTE PTR [rdi+rax*4+0x4010001],bh
 10187ee:	add    DWORD PTR [rax],eax
 10187f0:	add    al,0x42
 10187f2:	add    BYTE PTR [rax],al
 10187f4:	add    DWORD PTR [rsi],eax
 10187f6:	add    al,BYTE PTR [rax]
 10187f8:	(bad)  
 10187f9:	xor    al,BYTE PTR [rdx]
 10187fb:	xor    BYTE PTR [rcx],al
 10187fd:	sbb    BYTE PTR [rdx],cl
 10187ff:	add    BYTE PTR [rax],bl
 1018801:	or     al,BYTE PTR fs:[rax]
 1018804:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 1018808:	sbb    BYTE PTR [rax+rcx*1],dh
 101880b:	add    BYTE PTR [rax],bl
 101880d:	xor    dl,BYTE PTR [rax+rsi*8]
 1018810:	adc    ah,al
 1018812:	adc    BYTE PTR [rax+0x1],dh
 1018815:	sbb    BYTE PTR [rdx],cl
 1018817:	add    BYTE PTR [rax],bl
 1018819:	fs or  eax,0xc541800
 101881f:	add    BYTE PTR [rax],bl
 1018821:	xor    al,0xb
 1018823:	add    BYTE PTR [rax],bl
 1018825:	push   rdx
 1018826:	adc    al,0xf0
 1018828:	adc    ah,al
 101882a:	adc    BYTE PTR [rax+0x21],dh
 101882d:	add    eax,0xc4050002
 1018832:	or     al,BYTE PTR [rax]
 1018834:	lock adc eax,DWORD PTR [rcx]
 1018837:	add    BYTE PTR [rdx+0x14],cl
 101883a:	add    DWORD PTR [rax],eax
 101883c:	adc    al,0x88
 101883e:	add    DWORD PTR [rax],eax
 1018840:	and    DWORD PTR [rax],eax
 1018842:	add    BYTE PTR [rax],al
 1018844:	lock adc eax,DWORD PTR [rcx]
 1018847:	add    BYTE PTR [rdx+0x14],cl
 101884a:	add    DWORD PTR [rax],eax
 101884c:	adc    al,0x88
 101884e:	add    DWORD PTR [rax],eax
 1018850:	add    DWORD PTR [rsi+rax*1],ecx
 1018853:	add    BYTE PTR [rsp+rsi*1],cl
 1018856:	or     eax,0x8520c00
 101885b:	jo     0x1018864
 101885d:	(bad)  
 101885e:	(bad)  
 101885f:	push   rax
 1018860:	and    DWORD PTR [rdi],ecx
 1018862:	(bad)  
 1018863:	add    BYTE PTR [rdi],cl
 1018865:	hlt    
 1018866:	or     al,0x0
 1018868:	or     ah,ah
 101886a:	or     eax,DWORD PTR [rax]
 101886c:	add    eax,0x30000ac4
 1018871:	adc    eax,0x156a0001
 1018876:	add    DWORD PTR [rax],eax
 1018878:	push   rax
 1018879:	mov    BYTE PTR [rcx],al
 101887b:	add    BYTE PTR [rcx],ah
 101887d:	add    BYTE PTR [rax],al
 101887f:	add    BYTE PTR [rax],dh
 1018881:	adc    eax,0x156a0001
 1018886:	add    DWORD PTR [rax],eax
 1018888:	push   rax
 1018889:	mov    BYTE PTR [rcx],al
 101888b:	add    BYTE PTR [rcx],al
 101888d:	or     al,BYTE PTR [rax+rax*1]
 1018890:	or     dh,BYTE PTR [rdx+0x6]
 1018893:	rol    BYTE PTR [rax+rax*8],1
 1018896:	add    dh,BYTE PTR [rax+0x21]
 1018899:	(bad)  
 101889a:	or     al,BYTE PTR [rax]
 101889c:	(bad)  
 101889d:	hlt    
 101889e:	(bad)  
 101889f:	add    BYTE PTR [rcx],bl
 10188a1:	in     al,0x7
 10188a3:	add    BYTE PTR [rdi],cl
 10188a5:	fs (bad) 
 10188a7:	add    BYTE PTR [rdx],cl
 10188a9:	push   rsp
 10188aa:	or     eax,0xc340500
 10188af:	add    BYTE PTR [rax+0x16],dh
 10188b2:	add    DWORD PTR [rax],eax
 10188b4:	movabs ds:0x210001888c000116,eax
 10188bd:	add    BYTE PTR [rax],al
 10188bf:	add    BYTE PTR [rax+0x16],dh
 10188c2:	add    DWORD PTR [rax],eax
 10188c4:	movabs ds:0x210001888c000116,eax
 10188cd:	add    BYTE PTR [rdx],cl
 10188cf:	add    BYTE PTR [rax],al
 10188d1:	hlt    
 10188d2:	(bad)  
 10188d3:	add    BYTE PTR [rax],al
 10188d5:	in     al,0x7
 10188d7:	add    BYTE PTR [rax],al
 10188d9:	fs (bad) 
 10188db:	add    BYTE PTR [rax],al
 10188dd:	push   rsp
 10188de:	or     eax,0xc340000
 10188e3:	add    BYTE PTR [rax+0x16],dh
 10188e6:	add    DWORD PTR [rax],eax
 10188e8:	movabs ds:0x10001888c000116,eax
 10188f1:	(bad)  
 10188f2:	add    al,BYTE PTR [rax]
 10188f4:	(bad)  
 10188f5:	xor    al,BYTE PTR [rdx]
 10188f7:	xor    BYTE PTR [rcx],al
 10188f9:	(bad)  
 10188fa:	add    al,BYTE PTR [rax]
 10188fc:	(bad)  
 10188fd:	xor    al,BYTE PTR [rdx]
 10188ff:	jo     0x1018922
 1018901:	clts   
 1018903:	add    BYTE PTR [rdi],cl
 1018905:	or     BYTE PTR fs:[rax],al
 1018908:	or     dl,BYTE PTR [rdi+rax*1+0x0]
 101890c:	add    eax,0xd0000634
 1018911:	sbb    BYTE PTR [rcx],al
 1018913:	add    BYTE PTR [rcx+rbx*1],dh
 1018916:	add    DWORD PTR [rax],eax
 1018918:	clc    
 1018919:	mov    BYTE PTR [rcx],al
 101891b:	add    BYTE PTR [rcx],ah
 101891d:	add    BYTE PTR [rsi],al
 101891f:	add    BYTE PTR [rax],al
 1018921:	or     BYTE PTR fs:[rax],al
 1018924:	add    BYTE PTR [rdi+rax*1+0x0],dl
 1018928:	add    BYTE PTR [rsi+rax*1],dh
 101892b:	add    al,dl
 101892d:	sbb    BYTE PTR [rcx],al
 101892f:	add    BYTE PTR [rcx+rbx*1],dh
 1018932:	add    DWORD PTR [rax],eax
 1018934:	clc    
 1018935:	mov    BYTE PTR [rcx],al
 1018937:	add    BYTE PTR [rcx],ah
 1018939:	add    BYTE PTR [rax],al
 101893b:	add    al,dl
 101893d:	sbb    BYTE PTR [rcx],al
 101893f:	add    BYTE PTR [rcx+rbx*1],dh
 1018942:	add    DWORD PTR [rax],eax
 1018944:	clc    
 1018945:	mov    BYTE PTR [rcx],al
 1018947:	add    BYTE PTR [rcx],al
 1018949:	(bad)  
 101894a:	add    al,BYTE PTR [rax]
 101894c:	(bad)  
 101894d:	xor    al,BYTE PTR [rdx]
 101894f:	loopne 0x1018972
 1018951:	or     al,BYTE PTR [rax+rax*1]
 1018954:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 1018958:	add    eax,0xe0000634
 101895d:	sbb    DWORD PTR [rcx],eax
 101895f:	add    BYTE PTR [rcx],cl
 1018961:	sbb    al,BYTE PTR [rcx]
 1018963:	add    BYTE PTR [rax-0x77],cl
 1018966:	add    DWORD PTR [rax],eax
 1018968:	and    DWORD PTR [rdx],ecx
 101896a:	(bad)  
 101896b:	add    BYTE PTR [rdx],cl
 101896d:	je     0x1018977
 101896f:	add    BYTE PTR [rax],al
 1018971:	fs (bad) 
 1018973:	add    BYTE PTR [rax],al
 1018975:	xor    al,0x6
 1018977:	add    al,ah
 1018979:	sbb    DWORD PTR [rcx],eax
 101897b:	add    BYTE PTR [rcx],cl
 101897d:	sbb    al,BYTE PTR [rcx]
 101897f:	add    BYTE PTR [rax-0x77],cl
 1018982:	add    DWORD PTR [rax],eax
 1018984:	and    DWORD PTR [rax],eax
 1018986:	(bad)  
 1018987:	add    BYTE PTR [rax],al
 1018989:	je     0x1018993
 101898b:	add    BYTE PTR [rax],al
 101898d:	fs (bad) 
 101898f:	add    BYTE PTR [rax],al
 1018991:	xor    al,0x6
 1018993:	add    al,ah
 1018995:	sbb    DWORD PTR [rcx],eax
 1018997:	add    BYTE PTR [rcx],cl
 1018999:	sbb    al,BYTE PTR [rcx]
 101899b:	add    BYTE PTR [rax-0x77],cl
 101899e:	add    DWORD PTR [rax],eax
 10189a0:	and    DWORD PTR [rax],eax
 10189a2:	add    BYTE PTR [rax],al
 10189a4:	loopne 0x10189bf
 10189a6:	add    DWORD PTR [rax],eax
 10189a8:	or     DWORD PTR [rdx],ebx
 10189aa:	add    DWORD PTR [rax],eax
 10189ac:	mov    QWORD PTR [rcx],rax
 10189af:	add    BYTE PTR [rcx],cl
 10189b1:	(bad)  
 10189b2:	add    al,BYTE PTR [rax]
 10189b4:	(bad)  
 10189b5:	xor    al,BYTE PTR [rdx]
 10189b7:	xor    dh,ah
 10189b9:	fiadd  WORD PTR [rax]
 10189bb:	add    BYTE PTR [rcx],al
 10189bd:	add    BYTE PTR [rax],al
 10189bf:	add    BYTE PTR [rbx],bh
 10189c1:	sbb    eax,DWORD PTR [rcx]
 10189c3:	add    BYTE PTR [rdi+0x1b],al
 10189c6:	add    DWORD PTR [rax],eax
 10189c8:	add    DWORD PTR [rax],eax
 10189ca:	add    BYTE PTR [rax],al
 10189cc:	rex.RXB sbb r8d,DWORD PTR [r9]
 10189cf:	add    BYTE PTR [rcx],al
 10189d1:	(bad)  
 10189d2:	add    al,BYTE PTR [rax]
 10189d4:	(bad)  
 10189d5:	xor    al,BYTE PTR [rdx]
 10189d7:	xor    BYTE PTR [rcx],al
 10189d9:	(bad)  
 10189da:	add    al,BYTE PTR [rax]
 10189dc:	(bad)  
 10189dd:	xor    al,BYTE PTR [rdx]
 10189df:	xor    BYTE PTR [rcx],cl
 10189e1:	adc    ecx,DWORD PTR [rax]
 10189e3:	add    BYTE PTR [rbx],dl
 10189e5:	or     eax,DWORD PTR fs:[rax]
 10189e8:	adc    esi,DWORD PTR [rdx+rcx*1]
 10189eb:	add    BYTE PTR [rbx],dl
 10189ed:	push   rdx
 10189ee:	(bad)  
 10189f0:	or     eax,0xe6700bc0
 10189f5:	fiadd  WORD PTR [rax]
 10189f7:	add    BYTE PTR [rdx],al
 10189f9:	add    BYTE PTR [rax],al
 10189fb:	add    BYTE PTR [rdx],ah
 10189fd:	sbb    eax,0x1d360001
 1018a02:	add    DWORD PTR [rax],eax
 1018a04:	add    DWORD PTR [rax],eax
 1018a06:	add    BYTE PTR [rax],al
 1018a08:	ss sbb eax,0x1cd80001
 1018a0e:	add    DWORD PTR [rax],eax
 1018a10:	jl     0x1018a2f
 1018a12:	add    DWORD PTR [rax],eax
 1018a14:	add    DWORD PTR [rax],eax
 1018a16:	add    BYTE PTR [rax],al
 1018a18:	jl     0x1018a37
 1018a1a:	add    DWORD PTR [rax],eax
 1018a1c:	or     DWORD PTR [rdx],ebx
 1018a1e:	or     BYTE PTR [rax],al
 1018a20:	sbb    dh,BYTE PTR [rbx+rcx*1+0x0]
 1018a24:	sbb    ah,BYTE PTR [rdx+rcx*1+0x0]
 1018a28:	sbb    dh,BYTE PTR [rcx+rcx*1]
 1018a2b:	add    BYTE PTR [rdx],bl
 1018a2d:	push   rdx
 1018a2e:	(bad)  
 1018a2f:	shl    dh,0xde
 1018a32:	add    BYTE PTR [rax],al
 1018a34:	add    DWORD PTR [rax],eax
 1018a36:	add    BYTE PTR [rax],al
 1018a38:	sub    al,0x1e
 1018a3a:	add    DWORD PTR [rax],eax
 1018a3c:	(bad)  
 1018a3d:	(bad)  
 1018a3e:	add    DWORD PTR [rax],eax
 1018a40:	add    DWORD PTR [rax],eax
 1018a42:	add    BYTE PTR [rax],al
 1018a44:	(bad)  
 1018a45:	(bad)  
 1018a46:	add    DWORD PTR [rax],eax
 1018a48:	or     DWORD PTR [rsi+rax*1],edx
 1018a4b:	add    BYTE PTR [rsp+riz*2],dl
 1018a4e:	or     al,BYTE PTR [rax]
 1018a50:	adc    al,0x34
 1018a52:	or     DWORD PTR [rax],eax
 1018a54:	adc    al,0x52
 1018a56:	adc    BYTE PTR [rax-0x1a],dh
 1018a59:	fiadd  WORD PTR [rax]
 1018a5b:	add    BYTE PTR [rcx],al
 1018a5d:	add    BYTE PTR [rax],al
 1018a5f:	add    bl,cl
 1018a61:	(bad)  
 1018a62:	add    DWORD PTR [rax],eax
 1018a64:	fistp  DWORD PTR [rsi]
 1018a66:	add    DWORD PTR [rax],eax
 1018a68:	add    DWORD PTR [rax],eax
 1018a6a:	add    BYTE PTR [rax],al
 1018a6c:	fistp  DWORD PTR [rsi]
 1018a6e:	add    DWORD PTR [rax],eax
 1018a70:	and    DWORD PTR [rax],eax
 1018a72:	add    BYTE PTR [rax],al
 1018a74:	nop
 1018a75:	(bad)  
 1018a76:	add    DWORD PTR [rax],eax
 1018a78:	mov    esi,0xa800011f
 1018a7d:	mov    al,BYTE PTR [rcx]
 1018a7f:	add    BYTE PTR [rcx],ah
 1018a81:	add    BYTE PTR [rdx],al
 1018a83:	add    BYTE PTR [rax],al
 1018a85:	xor    al,0x6
 1018a87:	add    BYTE PTR [rax-0x41fffee1],dl
 1018a8d:	(bad)  
 1018a8e:	add    DWORD PTR [rax],eax
 1018a90:	test   al,0x8a
 1018a92:	add    DWORD PTR [rax],eax
 1018a94:	and    DWORD PTR [rip+0x34050002],eax        # 0x35068a9c
 1018a9a:	(bad)  
 1018a9b:	add    BYTE PTR [rax-0x41fffee1],dl
 1018aa1:	(bad)  
 1018aa2:	add    DWORD PTR [rax],eax
 1018aa4:	test   al,0x8a
 1018aa6:	add    DWORD PTR [rax],eax
 1018aa8:	add    DWORD PTR [rbx],ecx
 1018aaa:	add    eax,DWORD PTR [rax]
 1018aac:	or     esp,DWORD PTR [rdx+0x7]
 1018aaf:	jo     0x1018ab7
 1018ab1:	(bad)  
 1018ab2:	add    BYTE PTR [rax],al
 1018ab4:	and    DWORD PTR [rax],eax
 1018ab6:	add    BYTE PTR [rax],al
 1018ab8:	and    BYTE PTR [rax],ah
 1018aba:	add    DWORD PTR [rax],eax
 1018abc:	mov    ch,0x20
 1018abe:	add    DWORD PTR [rax],eax
 1018ac0:	fmul   DWORD PTR [rdx+0x8210001]
 1018ac6:	add    al,BYTE PTR [rax]
 1018ac8:	or     BYTE PTR [rcx+rbx*2],dh
 1018acb:	add    DWORD PTR [rax],esp
 1018acd:	and    BYTE PTR [rcx],al
 1018acf:	add    BYTE PTR [rbp-0x27fffee0],dh
 1018ad5:	mov    al,BYTE PTR [rcx]
 1018ad7:	add    BYTE PTR [rcx],bl
 1018ad9:	sbb    eax,DWORD PTR [rbx]
 1018adb:	add    BYTE PTR [rcx],cl
 1018add:	add    DWORD PTR [rsi+0x1],edx
 1018ae0:	add    dh,BYTE PTR [rax+0x0]
 1018ae3:	add    BYTE PTR [rdx+rbx*8+0xaa00000],dh
 1018aea:	add    BYTE PTR [rax],al
 1018aec:	or     DWORD PTR [rdx],ebx
 1018aee:	or     BYTE PTR [rax],al
 1018af0:	sbb    dh,BYTE PTR [rbp+rcx*1+0x0]
 1018af4:	sbb    ah,BYTE PTR [rsp+rcx*1+0x0]
 1018af8:	sbb    dh,BYTE PTR [rbx+rcx*1]
 1018afb:	add    BYTE PTR [rdx],bl
 1018afd:	jb     0x1018b15
 1018aff:	shl    dh,0xde
 1018b02:	add    BYTE PTR [rax],al
 1018b04:	add    DWORD PTR [rax],eax
 1018b06:	add    BYTE PTR [rax],al
 1018b08:	fldenv [rcx]
 1018b0a:	add    DWORD PTR [rax],eax
 1018b0c:	sbb    ah,BYTE PTR [rdx]
 1018b0e:	add    DWORD PTR [rax],eax
 1018b10:	add    DWORD PTR [rax],eax
 1018b12:	add    BYTE PTR [rax],al
 1018b14:	sbb    ah,BYTE PTR [rdx]
 1018b16:	add    DWORD PTR [rax],eax
 1018b18:	and    DWORD PTR [rax],eax
 1018b1a:	add    BYTE PTR [rax],al
 1018b1c:	jo     0x1018b40
 1018b1e:	add    DWORD PTR [rax],eax
 1018b20:	(bad)  
 1018b21:	and    al,BYTE PTR [rcx]
 1018b23:	add    BYTE PTR [rax-0x75],dl
 1018b26:	add    DWORD PTR [rax],eax
 1018b28:	and    DWORD PTR [rax],eax
 1018b2a:	add    al,BYTE PTR [rax]
 1018b2c:	add    BYTE PTR [rax+rcx*1+0x0],dh
 1018b30:	jo     0x1018b54
 1018b32:	add    DWORD PTR [rax],eax
 1018b34:	(bad)  
 1018b35:	and    al,BYTE PTR [rcx]
 1018b37:	add    BYTE PTR [rax-0x75],dl
 1018b3a:	add    DWORD PTR [rax],eax
 1018b3c:	and    DWORD PTR [rip+0x74050002],eax        # 0x75068b44
 1018b42:	or     BYTE PTR [rax],al
 1018b44:	jo     0x1018b68
 1018b46:	add    DWORD PTR [rax],eax
 1018b48:	(bad)  
 1018b49:	and    al,BYTE PTR [rcx]
 1018b4b:	add    BYTE PTR [rax-0x75],dl
 1018b4e:	add    DWORD PTR [rax],eax
 1018b50:	add    DWORD PTR [rsi],eax
 1018b52:	add    al,BYTE PTR [rax]
 1018b54:	(bad)  
 1018b55:	push   rdx
 1018b56:	add    dh,BYTE PTR [rax]
 1018b58:	or     DWORD PTR [rbx],ebx
 1018b5a:	or     BYTE PTR [rax],al
 1018b5c:	sbb    esi,DWORD PTR [rcx*1+0x17321b00]
 1018b63:	loopne 0x1018b7a
 1018b65:	rcl    BYTE PTR [rbx],1
 1018b67:	rcl    BYTE PTR [rcx],0x70
 1018b6a:	adc    BYTE PTR [rax-0x1a],ah
 1018b6d:	fiadd  WORD PTR [rax]
 1018b6f:	add    BYTE PTR [rcx],al
 1018b71:	add    BYTE PTR [rax],al
 1018b73:	add    al,ah
 1018b75:	and    eax,DWORD PTR [rcx]
 1018b77:	add    bh,dh
 1018b79:	and    eax,DWORD PTR [rcx]
 1018b7b:	add    BYTE PTR [rcx],al
 1018b7d:	add    BYTE PTR [rax],al
 1018b7f:	add    bh,dh
 1018b81:	and    eax,DWORD PTR [rcx]
 1018b83:	add    BYTE PTR [rcx],al
 1018b85:	or     al,BYTE PTR [rax+rax*1]
 1018b88:	or     dh,BYTE PTR [rsi+rax*1]
 1018b8b:	add    BYTE PTR [rdx],cl
 1018b8d:	xor    al,BYTE PTR [rsi]
 1018b8f:	jo     0x1018b92
 1018b91:	clts   
 1018b93:	add    BYTE PTR [rdi],cl
 1018b95:	fs (bad) 
 1018b97:	add    BYTE PTR [rdi],cl
 1018b99:	xor    al,0x6
 1018b9b:	add    BYTE PTR [rdi],cl
 1018b9d:	xor    cl,BYTE PTR [rbx]
 1018b9f:	jo     0x1018bc2
 1018ba1:	add    BYTE PTR [rax],al
 1018ba3:	add    BYTE PTR [rax],dh
 1018ba5:	add    DWORD PTR es:[rax],eax
 1018ba8:	jl     0x1018bd0
 1018baa:	add    DWORD PTR [rax],eax
 1018bac:	fmul   DWORD PTR [rbx+0x210001]
 1018bb2:	add    al,BYTE PTR [rax]
 1018bb4:	add    BYTE PTR [rax+rcx*1+0x0],ah
 1018bb8:	xor    BYTE PTR [rsi],ah
 1018bba:	add    DWORD PTR [rax],eax
 1018bbc:	jl     0x1018be4
 1018bbe:	add    DWORD PTR [rax],eax
 1018bc0:	fmul   DWORD PTR [rbx+0x5210001]
 1018bc6:	add    al,BYTE PTR [rax]
 1018bc8:	add    eax,0x30000864
 1018bcd:	add    DWORD PTR es:[rax],eax
 1018bd0:	jl     0x1018bf8
 1018bd2:	add    DWORD PTR [rax],eax
 1018bd4:	fmul   DWORD PTR [rbx+0xa010001]
 1018bda:	add    al,0x0
 1018bdc:	or     dh,BYTE PTR [rdx+rcx*1]
 1018bdf:	add    BYTE PTR [rdx],cl
 1018be1:	push   rdx
 1018be2:	(bad)  
 1018be3:	jo     0x1018c06
 1018be5:	add    BYTE PTR [rax],al
 1018be7:	add    BYTE PTR [rax+0x27],ah
 1018bea:	add    DWORD PTR [rax],eax
 1018bec:	mov    WORD PTR [rdi],fs
 1018bee:	add    DWORD PTR [rax],eax
 1018bf0:	or     al,0x8c
 1018bf2:	add    DWORD PTR [rax],eax
 1018bf4:	and    DWORD PTR [rdx],ecx
 1018bf6:	add    al,0x0
 1018bf8:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 1018bfc:	add    eax,0x60000634
 1018c01:	(bad)  
 1018c02:	add    DWORD PTR [rax],eax
 1018c04:	mov    WORD PTR [rdi],fs
 1018c06:	add    DWORD PTR [rax],eax
 1018c08:	or     al,0x8c
 1018c0a:	add    DWORD PTR [rax],eax
 1018c0c:	add    DWORD PTR [rdx],ecx
 1018c0e:	add    al,0x0
 1018c10:	or     dl,BYTE PTR [rax+rcx*1+0x0]
 1018c14:	or     dh,BYTE PTR [rdx]
 1018c16:	(bad)  
 1018c17:	jo     0x1018c22
 1018c19:	sbb    eax,0x741d000a
 1018c1e:	ltr    WORD PTR [rip+0x1d000d64]        # 0x1e019989
 1018c25:	xor    al,0xc
 1018c27:	add    BYTE PTR [rip+0x17e01972],bl        # 0x18e1a59f
 1018c2d:	rcl    BYTE PTR [rip+0xdee6c0],1        # 0x1e072f3
 1018c33:	add    BYTE PTR [rcx],al
 1018c35:	add    BYTE PTR [rax],al
 1018c37:	add    BYTE PTR [rdx],al
 1018c39:	sub    DWORD PTR [rcx],eax
 1018c3b:	add    BYTE PTR [rcx+rbp*1+0x1],bh
 1018c3f:	add    BYTE PTR [rcx],al
 1018c41:	add    BYTE PTR [rax],al
 1018c43:	add    BYTE PTR [rcx+rbp*1+0x1],bh
 1018c47:	add    BYTE PTR [rcx],cl
 1018c49:	(bad)  
 1018c4a:	(bad)  
 1018c4b:	add    BYTE PTR [rdi],dl
 1018c4d:	xor    al,0xb
 1018c4f:	add    BYTE PTR [rdi],dl
 1018c51:	push   rdx
 1018c52:	adc    eax,eax
 1018c54:	adc    DWORD PTR [rax+0x10],esi
 1018c57:	(bad)  
 1018c58:	out    0xde,al
 1018c5a:	add    BYTE PTR [rax],al
 1018c5c:	add    DWORD PTR [rax],eax
 1018c5e:	add    BYTE PTR [rax],al
 1018c60:	cmp    eax,0x5500012a
 1018c65:	sub    al,BYTE PTR [rcx]
 1018c67:	add    BYTE PTR [rcx],al
 1018c69:	add    BYTE PTR [rax],al
 1018c6b:	add    BYTE PTR [rbp+0x2a],dl
 1018c6e:	add    DWORD PTR [rax],eax
 1018c70:	or     DWORD PTR [rdx],ecx
 1018c72:	add    al,0x0
 1018c74:	or     dh,BYTE PTR [rax+rcx*1]
 1018c77:	add    BYTE PTR [rdx],cl
 1018c79:	push   rdx
 1018c7a:	(bad)  
 1018c7b:	jo     0x1018c63
 1018c7d:	fiadd  WORD PTR [rax]
 1018c7f:	add    BYTE PTR [rcx],al
 1018c81:	add    BYTE PTR [rax],al
 1018c83:	add    BYTE PTR [rbx],al
 1018c85:	sub    eax,DWORD PTR [rcx]
 1018c87:	add    BYTE PTR [rax],bl
 1018c89:	sub    eax,DWORD PTR [rcx]
 1018c8b:	add    BYTE PTR [rcx],al
 1018c8d:	add    BYTE PTR [rax],al
 1018c8f:	add    BYTE PTR [rax],bl
 1018c91:	sub    eax,DWORD PTR [rcx]
 1018c93:	add    BYTE PTR [rcx],cl
 1018c95:	add    al,0x1
 1018c97:	add    BYTE PTR [rdx+rax*2],al
 1018c9a:	add    BYTE PTR [rax],al
 1018c9c:	out    0xde,al
 1018c9e:	add    BYTE PTR [rax],al
 1018ca0:	add    DWORD PTR [rax],eax
 1018ca2:	add    BYTE PTR [rax],al
 1018ca4:	push   rsp
 1018ca5:	sub    eax,DWORD PTR [rcx]
 1018ca7:	add    BYTE PTR [rbx+rbp*1+0x1],ah
 1018cab:	add    BYTE PTR [rcx],al
 1018cad:	add    BYTE PTR [rax],al
 1018caf:	add    BYTE PTR [rbx+rbp*1+0x1],ah
 1018cb3:	add    BYTE PTR [rcx],cl
 1018cb5:	(bad)  
 1018cb7:	add    BYTE PTR [rdi],cl
 1018cb9:	xor    al,0x7
 1018cbb:	add    BYTE PTR [rdi],cl
 1018cbd:	xor    cl,BYTE PTR [rbx]
 1018cbf:	jo     0x1018ca7
 1018cc1:	fiadd  WORD PTR [rax]
 1018cc3:	add    BYTE PTR [rcx],al
 1018cc5:	add    BYTE PTR [rax],al
 1018cc7:	add    BYTE PTR [rbx+rbp*1+0x2bc40001],dh
 1018cce:	add    DWORD PTR [rax],eax
 1018cd0:	add    DWORD PTR [rax],eax
 1018cd2:	add    BYTE PTR [rax],al
 1018cd4:	(bad)  
 1018cd5:	sub    eax,DWORD PTR [rcx]
 1018cd7:	add    BYTE PTR [rcx],cl
 1018cd9:	clts   
 1018cdb:	add    BYTE PTR [rdi],cl
 1018cdd:	fs (bad) 
 1018cdf:	add    BYTE PTR [rdi],cl
 1018ce1:	xor    al,0x6
 1018ce3:	add    BYTE PTR [rdi],cl
 1018ce5:	xor    cl,BYTE PTR [rbx]
 1018ce7:	jo     0x1018ccf
 1018ce9:	fiadd  WORD PTR [rax]
 1018ceb:	add    BYTE PTR [rcx],al
 1018ced:	add    BYTE PTR [rax],al
 1018cef:	add    BYTE PTR [rsp+rbp*1],bl
 1018cf2:	add    DWORD PTR [rax],eax
 1018cf4:	(bad)  
 1018cf5:	sub    al,0x1
 1018cf7:	add    BYTE PTR [rcx],al
 1018cf9:	add    BYTE PTR [rax],al
 1018cfb:	add    BYTE PTR [rdi],ch
 1018cfd:	sub    al,0x1
 1018cff:	add    BYTE PTR [rcx],ah
 1018d01:	add    BYTE PTR [rax],al
 1018d03:	add    al,dl
 1018d05:	sub    al,0x1
 1018d07:	add    ah,bl
 1018d09:	sub    al,0x1
 1018d0b:	add    BYTE PTR [rcx*4+0x4210001],ah
 1018d12:	add    al,BYTE PTR [rax]
 1018d14:	add    al,0x74
 1018d16:	add    BYTE PTR [rax],al
 1018d18:	shr    BYTE PTR [rcx+rax*1],1
 1018d1b:	add    ah,bl
 1018d1d:	sub    al,0x1
 1018d1f:	add    BYTE PTR [rcx*4+0x4010001],ah
 1018d26:	add    DWORD PTR [rax],eax
 1018d28:	add    al,0x2
 1018d2a:	add    BYTE PTR [rax],al
 1018d2c:	add    DWORD PTR [rsi],eax
 1018d2e:	add    al,BYTE PTR [rax]
 1018d30:	(bad)  
 1018d31:	xchg   edx,eax
 1018d32:	add    dh,BYTE PTR [rax]
 1018d34:	add    DWORD PTR [rdi],ebp
 1018d36:	or     BYTE PTR [rax],al
 1018d38:	(bad)  
 1018d39:	push   rsp
 1018d3a:	verw   WORD PTR [rdx]
 1018d3d:	xor    al,0xe
 1018d3f:	add    BYTE PTR [rdx],cl
 1018d41:	adc    BYTE PTR fs:[rax],al
 1018d44:	or     dh,BYTE PTR [rdx+0xf097006]
 1018d4a:	(bad)  
 1018d4b:	add    BYTE PTR [rdi],cl
 1018d4d:	or     DWORD PTR fs:[rax],eax
 1018d50:	sysenter 
 1018d52:	or     BYTE PTR [rax],al
 1018d54:	rsqrtps xmm1,XMMWORD PTR [rbx]
 1018d57:	jo     0x1018d3f
 1018d59:	fiadd  WORD PTR [rax]
 1018d5b:	add    BYTE PTR [rcx],al
 1018d5d:	add    BYTE PTR [rax],al
 1018d5f:	add    BYTE PTR [rdx+0x2f],bl
 1018d62:	add    DWORD PTR [rax],eax
 1018d64:	xchg   edx,eax
 1018d65:	(bad)  
 1018d66:	add    DWORD PTR [rax],eax
 1018d68:	add    DWORD PTR [rax],eax
 1018d6a:	add    BYTE PTR [rax],al
 1018d6c:	xchg   edx,eax
 1018d6d:	(bad)  
 1018d6e:	add    DWORD PTR [rax],eax
 1018d70:	add    DWORD PTR [rdx],ecx
 1018d72:	add    al,0x0
 1018d74:	or     dh,BYTE PTR [rsi+rax*1]
 1018d77:	add    BYTE PTR [rdx],cl
 1018d79:	xor    al,BYTE PTR [rsi]
 1018d7b:	jo     0x1018d7e
 1018d7d:	adc    al,0x8
 1018d7f:	add    BYTE PTR [rsp+riz*2],dl
 1018d82:	or     eax,DWORD PTR [rax]
 1018d84:	adc    al,0x54
 1018d86:	or     al,BYTE PTR [rax]
 1018d88:	adc    al,0x34
 1018d8a:	or     BYTE PTR [rax],al
 1018d8c:	adc    al,0x52
 1018d8e:	adc    BYTE PTR [rax+0x21],dh
 1018d91:	add    BYTE PTR [rdx],al
 1018d93:	add    BYTE PTR [rax],al
 1018d95:	xor    al,0x8
 1018d97:	add    BYTE PTR [rax],dl
 1018d99:	xor    DWORD PTR [rcx],eax
 1018d9b:	add    BYTE PTR [rsi],bh
 1018d9d:	xor    DWORD PTR [rcx],eax
 1018d9f:	add    ah,bl
 1018da1:	lea    eax,[rcx]
 1018da3:	add    BYTE PTR [rcx],ah
 1018da5:	add    BYTE PTR [rsi],al
 1018da7:	add    BYTE PTR [rax],al
 1018da9:	(bad)  
 1018daa:	(bad)  
 1018dab:	add    BYTE PTR [rax],al
 1018dad:	push   rsp
 1018dae:	(bad)  
 1018daf:	add    BYTE PTR [rax],al
 1018db1:	xor    al,0x8
 1018db3:	add    BYTE PTR [rax],dl
 1018db5:	xor    DWORD PTR [rcx],eax
 1018db7:	add    BYTE PTR [rsi],bh
 1018db9:	xor    DWORD PTR [rcx],eax
 1018dbb:	add    ah,bl
 1018dbd:	lea    eax,[rcx]
 1018dbf:	add    BYTE PTR [rcx],ah
 1018dc1:	push   rsi
 1018dc2:	(bad)  
 1018dc3:	add    BYTE PTR [rsi-0x3c],dl
 1018dc6:	(bad)  
 1018dc7:	add    BYTE PTR [rcx+0x54],dl
 1018dca:	(bad)  
 1018dcb:	add    BYTE PTR [rip+0x10000834],al        # 0x11019605
 1018dd1:	xor    DWORD PTR [rcx],eax
 1018dd3:	add    BYTE PTR [rsi],bh
 1018dd5:	xor    DWORD PTR [rcx],eax
 1018dd7:	add    ah,bl
 1018dd9:	lea    eax,[rcx]
 1018ddb:	add    BYTE PTR [rcx],al
 1018ddd:	adc    BYTE PTR [rbx],al
 1018ddf:	add    BYTE PTR [rax],dl
 1018de1:	(bad)  
 1018de2:	or     al,0x70
 1018de4:	or     esp,DWORD PTR [rax+0x0]
 1018de7:	add    BYTE PTR [rcx],al
 1018de9:	adc    al,0x8
 1018deb:	add    BYTE PTR [rsp+riz*2],dl
 1018dee:	or     al,0x0
 1018df0:	adc    al,0x54
 1018df2:	or     eax,DWORD PTR [rax]
 1018df4:	adc    al,0x34
 1018df6:	or     al,BYTE PTR [rax]
 1018df8:	adc    al,0x72
 1018dfa:	adc    BYTE PTR [rax+0x1],dh
 1018dfd:	or     al,BYTE PTR [rax+rax*1]
 1018e00:	or     dh,BYTE PTR [rsi+rax*1]
 1018e03:	add    BYTE PTR [rdx],cl
 1018e05:	xor    al,BYTE PTR [rsi]
 1018e07:	jo     0x1018e0a
 1018e09:	(bad)  
 1018e0a:	add    al,BYTE PTR [rax]
 1018e0c:	(bad)  
 1018e0d:	xor    al,BYTE PTR [rdx]
 1018e0f:	xor    BYTE PTR [rcx],al
 1018e11:	(bad)  
 1018e12:	add    al,BYTE PTR [rax]
 1018e14:	(bad)  
 1018e15:	xor    al,BYTE PTR [rdx]
 1018e17:	xor    BYTE PTR [rcx],al
 1018e19:	(bad)  
 1018e1a:	add    al,BYTE PTR [rax]
 1018e1c:	(bad)  
 1018e1d:	xor    al,BYTE PTR [rdx]
 1018e1f:	xor    BYTE PTR [rcx],al
 1018e21:	adc    al,0x8
 1018e23:	add    BYTE PTR [rsp+riz*2],dl
 1018e26:	or     BYTE PTR [rax],al
 1018e28:	adc    al,0x54
 1018e2a:	(bad)  
 1018e2b:	add    BYTE PTR [rsp+rsi*1],dl
 1018e2e:	(bad)  
 1018e2f:	add    BYTE PTR [rdx+rsi*1],dl
 1018e32:	adc    BYTE PTR [rax+0x1],dh
 1018e35:	or     al,BYTE PTR [rax+rax*1]
 1018e38:	or     dh,BYTE PTR [rsi+rax*1]
 1018e3b:	add    BYTE PTR [rdx],cl
 1018e3d:	xor    al,BYTE PTR [rsi]
 1018e3f:	jo     0x1018e4a
 1018e41:	sbb    BYTE PTR [rax],cl
 1018e43:	add    BYTE PTR [rax],bl
 1018e45:	or     eax,DWORD PTR fs:[rax]
 1018e48:	sbb    BYTE PTR [rdx+rcx*1],dh
 1018e4b:	add    BYTE PTR [rax],bl
 1018e4d:	xor    dl,BYTE PTR [rax+rdx*8]
 1018e50:	adc    al,al
 1018e52:	adc    BYTE PTR [rax-0x1a],dh
 1018e55:	fiadd  WORD PTR [rax]
 1018e57:	add    BYTE PTR [rdx],al
 1018e59:	add    BYTE PTR [rax],al
 1018e5b:	add    BYTE PTR [rax+rdi*1],al
 1018e5e:	add    DWORD PTR [rax],eax
 1018e60:	sub    BYTE PTR [rax],bh
 1018e62:	add    DWORD PTR [rax],eax
 1018e64:	add    DWORD PTR [rax],eax
 1018e66:	add    BYTE PTR [rax],al
 1018e68:	sub    BYTE PTR [rax],bh
 1018e6a:	add    DWORD PTR [rax],eax
 1018e6c:	pop    rcx
 1018e6d:	cmp    BYTE PTR [rcx],al
 1018e6f:	add    BYTE PTR [rdx+0x38],ch
 1018e72:	add    DWORD PTR [rax],eax
 1018e74:	add    DWORD PTR [rax],eax
 1018e76:	add    BYTE PTR [rax],al
 1018e78:	push   0x38
 1018e7a:	add    DWORD PTR [rax],eax
 1018e7c:	add    DWORD PTR [rdx],ecx
 1018e7e:	add    al,0x0
 1018e80:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 1018e84:	add    eax,0x1000134
 1018e89:	(bad)  
 1018e8a:	add    al,BYTE PTR [rax]
 1018e8c:	(bad)  
 1018e8d:	xor    al,BYTE PTR [rdx]
 1018e8f:	xor    BYTE PTR [rcx],al
 1018e91:	add    eax,0x34050002
 1018e96:	add    DWORD PTR [rax],eax
 1018e98:	add    DWORD PTR [rbx],ebp
 1018e9a:	add    eax,0x3742b00
 1018e9f:	add    BYTE PTR [rsi],ah
 1018ea1:	xor    al,0x2
 1018ea3:	add    BYTE PTR [rdx],al
 1018ea5:	(bad)  
 1018ea6:	add    BYTE PTR [rax],al
 1018ea8:	or     DWORD PTR [rdx],ebx
 1018eaa:	or     al,BYTE PTR [rax]
 1018eac:	sbb    al,ah
 1018eae:	or     eax,0xc741a00
 1018eb3:	add    BYTE PTR [rdx],bl
 1018eb5:	or     eax,DWORD PTR fs:[rax]
 1018eb8:	sbb    dh,BYTE PTR [rdx+rcx*1]
 1018ebb:	add    BYTE PTR [rdx],bl
 1018ebd:	jb     0x1018ed5
 1018ebf:	shl    dh,1
 1018ec1:	fiadd  WORD PTR [rax]
 1018ec3:	add    BYTE PTR [rcx],al
 1018ec5:	add    BYTE PTR [rax],al
 1018ec7:	add    BYTE PTR [rbx-0xefffec5],bl
 1018ecd:	cmp    eax,DWORD PTR [rcx]
 1018ecf:	add    BYTE PTR [rcx],al
 1018ed1:	add    BYTE PTR [rax],al
 1018ed3:	add    cl,dh
 1018ed5:	cmp    eax,DWORD PTR [rcx]
 1018ed7:	add    BYTE PTR [rcx],ah
 1018ed9:	add    BYTE PTR [rax],al
 1018edb:	add    BYTE PTR [rax+0x3c],al
 1018ede:	add    DWORD PTR [rax],eax
 1018ee0:	(bad)  
 1018ee1:	cmp    al,0x1
 1018ee3:	add    BYTE PTR [rax],al
 1018ee5:	pop    QWORD PTR [rcx]
 1018ee7:	add    BYTE PTR [rcx],ah
 1018ee9:	or     al,BYTE PTR [rax+rax*1]
 1018eec:	or     al,ah
 1018eee:	(bad)  
 1018eef:	add    BYTE PTR [rip+0x40000634],al        # 0x41019529
 1018ef5:	cmp    al,0x1
 1018ef7:	add    dl,ch
 1018ef9:	cmp    al,0x1
 1018efb:	add    BYTE PTR [rax],al
 1018efd:	pop    QWORD PTR [rcx]
 1018eff:	add    BYTE PTR [rcx],al
 1018f01:	clts   
 1018f03:	add    BYTE PTR [rdi],cl
 1018f05:	or     DWORD PTR fs:[rax],eax
 1018f08:	andps  xmm1,XMMWORD PTR [rax]
 1018f0b:	add    BYTE PTR [rdi],cl
 1018f0d:	xor    cl,BYTE PTR [rbx]
 1018f0f:	jo     0x1018f1a
 1018f11:	or     al,BYTE PTR [rax+rax*1]
 1018f14:	or     dh,BYTE PTR [rax+rcx*1]
 1018f17:	add    BYTE PTR [rdx],cl
 1018f19:	push   rdx
 1018f1a:	(bad)  
 1018f1b:	jo     0x1018f03
 1018f1d:	fiadd  WORD PTR [rax]
 1018f1f:	add    BYTE PTR [rcx],al
 1018f21:	add    BYTE PTR [rax],al
 1018f23:	add    BYTE PTR [rbp+rdi*1+0x1],ch
 1018f27:	add    BYTE PTR [rbp+rdi*1+0x10001],bl
 1018f2e:	add    BYTE PTR [rax],al
 1018f30:	pushf  
 1018f31:	cmp    eax,0xa010001
 1018f36:	add    al,0x0
 1018f38:	or     dh,BYTE PTR [rsi+rax*1]
 1018f3b:	add    BYTE PTR [rdx],cl
 1018f3d:	xor    al,BYTE PTR [rsi]
 1018f3f:	jo     0x1018f42
 1018f41:	adc    al,0x8
 1018f43:	add    BYTE PTR [rsp+riz*2],dl
 1018f46:	or     BYTE PTR [rax],al
 1018f48:	adc    al,0x54
 1018f4a:	(bad)  
 1018f4b:	add    BYTE PTR [rsp+rsi*1],dl
 1018f4e:	(bad)  
 1018f4f:	add    BYTE PTR [rdx+rsi*1],dl
 1018f52:	adc    BYTE PTR [rax+0x21],dh
 1018f55:	add    BYTE PTR [rax],al
 1018f57:	add    BYTE PTR [rax-0x27fffec0],ah
 1018f5d:	rex add DWORD PTR [rax],eax
 1018f60:	mov    WORD PTR [rdi+0x210001],cs
 1018f66:	add    al,BYTE PTR [rax]
 1018f68:	add    ah,al
 1018f6a:	(bad)  
 1018f6b:	add    BYTE PTR [rax-0x27fffec0],ah
 1018f71:	rex add DWORD PTR [rax],eax
 1018f74:	mov    WORD PTR [rdi+0x5210001],cs
 1018f7a:	add    al,BYTE PTR [rax]
 1018f7c:	add    eax,0xa00006c4
 1018f81:	rex add DWORD PTR [rax],eax
 1018f84:	fadd   DWORD PTR [rax+0x1]
 1018f87:	add    BYTE PTR [rdi+rcx*4+0x14010001],cl
 1018f8e:	or     BYTE PTR [rax],al
 1018f90:	adc    al,0x64
 1018f92:	or     DWORD PTR [rax],eax
 1018f94:	adc    al,0x54
 1018f96:	or     BYTE PTR [rax],al
 1018f98:	adc    al,0x34
 1018f9a:	(bad)  
 1018f9b:	add    BYTE PTR [rdx+rsi*1],dl
 1018f9e:	adc    BYTE PTR [rax+0x21],dh
 1018fa1:	add    BYTE PTR [rax],al
 1018fa3:	add    BYTE PTR [rax-0x27fffebf],ah
 1018fa9:	add    DWORD PTR [r8],eax
 1018fac:	fmul   DWORD PTR [rdi+0x210001]
 1018fb2:	add    al,BYTE PTR [rax]
 1018fb4:	add    ah,al
 1018fb6:	(bad)  
 1018fb7:	add    BYTE PTR [rax-0x27fffebf],ah
 1018fbd:	add    DWORD PTR [r8],eax
 1018fc0:	fmul   DWORD PTR [rdi+0x5210001]
 1018fc6:	add    al,BYTE PTR [rax]
 1018fc8:	add    eax,0xa00006c4
 1018fcd:	add    DWORD PTR [r8],eax
 1018fd0:	fadd   DWORD PTR [rcx+0x1]
 1018fd3:	add    al,bl
 1018fd5:	pop    QWORD PTR [rcx]
 1018fd7:	add    BYTE PTR [rcx],al
 1018fd9:	adc    al,0x8
 1018fdb:	add    BYTE PTR [rsp+riz*2],dl
 1018fde:	or     DWORD PTR [rax],eax
 1018fe0:	adc    al,0x54
 1018fe2:	or     BYTE PTR [rax],al
 1018fe4:	adc    al,0x34
 1018fe6:	(bad)  
 1018fe7:	add    BYTE PTR [rdx+rsi*1],dl
 1018fea:	adc    BYTE PTR [rax+0x9],dh
 1018fed:	(bad)  
 1018fee:	add    al,BYTE PTR [rax]
 1018ff0:	(bad)  
 1018ff1:	push   rdx
 1018ff2:	add    dh,BYTE PTR [rax]
 1018ff4:	out    0xde,al
 1018ff6:	add    BYTE PTR [rax],al
 1018ff8:	add    DWORD PTR [rax],eax
 1018ffa:	add    BYTE PTR [rax],al
 1018ffc:	lods   al,BYTE PTR ds:[rsi]
 1018ffd:	rex.X add DWORD PTR [rax],eax
 1019000:	mov    esi,0x1000142
 1019005:	add    BYTE PTR [rax],al
 1019007:	add    BYTE PTR [rsi+0x9000142],bh
 101900d:	clts   
 101900f:	add    BYTE PTR [rdi],cl
 1019011:	or     DWORD PTR fs:[rax],eax
 1019014:	sysenter 
 1019016:	or     BYTE PTR [rax],al
 1019018:	rsqrtps xmm1,XMMWORD PTR [rbx]
 101901b:	jo     0x1019003
 101901d:	fiadd  WORD PTR [rax]
 101901f:	add    BYTE PTR [rcx],al
 1019021:	add    BYTE PTR [rax],al
 1019023:	add    BYTE PTR [rax],cl
 1019025:	rex.XB add DWORD PTR [r8],eax
 1019028:	hlt    
 1019029:	rex.XB add DWORD PTR [r8],eax
 101902c:	add    DWORD PTR [rax],eax
 101902e:	add    BYTE PTR [rax],al
 1019030:	hlt    
 1019031:	rex.XB add DWORD PTR [r8],eax
 1019034:	or     DWORD PTR [rax+rcx*1],edx
 1019037:	add    BYTE PTR [rdx+rsi*4],dl
 101903a:	adc    al,dh
 101903c:	(bad)  
 101903d:	loopne 0x101904b
 101903f:	ror    BYTE PTR [rdx],1
 1019041:	ror    BYTE PTR [rax],0x70
 1019044:	(bad)  
 1019045:	(bad)  
 1019046:	(bad)  
 1019047:	xor    dh,ah
 1019049:	fiadd  WORD PTR [rax]
 101904b:	add    BYTE PTR [rdx],al
 101904d:	add    BYTE PTR [rax],al
 101904f:	add    BYTE PTR [rsi],dl
 1019051:	rex.RX add DWORD PTR [rax],r8d
 1019054:	ret    
 1019055:	rex.RX add DWORD PTR [rax],r8d
 1019058:	add    DWORD PTR [rax],eax
 101905a:	add    BYTE PTR [rax],al
 101905c:	ret    
 101905d:	rex.RX add DWORD PTR [rax],r8d
 1019060:	mov    BYTE PTR [rcx+rax*1+0x0],al
 1019064:	push   rbp
 1019065:	rex.RXB add DWORD PTR [r8],r8d
 1019068:	add    DWORD PTR [rax],eax
 101906a:	add    BYTE PTR [rax],al
 101906c:	push   rbp
 101906d:	rex.RXB add DWORD PTR [r8],r8d
 1019070:	or     DWORD PTR [rip+0x74150008],edx        # 0x7516907e
 1019076:	or     al,BYTE PTR [rax]
 1019078:	adc    eax,0x15000964
 101907d:	xor    al,0x8
 101907f:	add    BYTE PTR [rip+0xffffffffe6c01152],dl        # 0xffffffffe7c1a1d7
 1019085:	fiadd  WORD PTR [rax]
 1019087:	add    BYTE PTR [rcx],al
 1019089:	add    BYTE PTR [rax],al
 101908b:	add    ah,ah
 101908d:	rex.RXB add DWORD PTR [r8],r8d
 1019090:	jb     0x10190da
 1019092:	add    DWORD PTR [rax],eax
 1019094:	add    DWORD PTR [rax],eax
 1019096:	add    BYTE PTR [rax],al
 1019098:	jb     0x10190e2
 101909a:	add    DWORD PTR [rax],eax
 101909c:	add    DWORD PTR [rdi],ecx
 101909e:	(bad)  
 101909f:	add    BYTE PTR [rdi],cl
 10190a1:	fs (bad) 
 10190a3:	add    BYTE PTR [rdi],cl
 10190a5:	xor    al,0x6
 10190a7:	add    BYTE PTR [rdi],cl
 10190a9:	xor    cl,BYTE PTR [rbx]
 10190ab:	jo     0x10190ae
 10190ad:	(bad)  
 10190ae:	or     DWORD PTR [rax],eax
 10190b0:	(bad)  
 10190b1:	fs sbb al,0x0
 10190b4:	(bad)  
 10190b5:	push   rsp
 10190b6:	sbb    eax,DWORD PTR [rax]
 10190b8:	(bad)  
 10190b9:	xor    al,0x1a
 10190bb:	add    BYTE PTR [rdi],dl
 10190bd:	add    DWORD PTR [rax],ebx
 10190bf:	add    BYTE PTR [rax],dl
 10190c1:	jo     0x10190c3
 10190c3:	add    BYTE PTR [rcx],al
 10190c5:	(bad)  
 10190c6:	add    al,BYTE PTR [rax]
 10190c8:	(bad)  
 10190c9:	xor    al,BYTE PTR [rdx]
 10190cb:	push   rax
 10190cc:	or     DWORD PTR [rdx],ecx
 10190ce:	add    al,BYTE PTR [rax]
 10190d0:	or     dl,BYTE PTR [rdx+0x6]
 10190d3:	xor    dh,ah
 10190d5:	fiadd  WORD PTR [rax]
 10190d7:	add    BYTE PTR [rcx],al
 10190d9:	add    BYTE PTR [rax],al
 10190db:	add    BYTE PTR [rax],bl
 10190dd:	rex.WX add QWORD PTR [rax],rax
 10190e0:	rex.WX add QWORD PTR ds:[rax],rax
 10190e4:	push   rax
 10190e5:	rex.WX add QWORD PTR [rax],rax
 10190e8:	rex.WX add QWORD PTR ds:[rax],rax
 10190ec:	add    DWORD PTR [rsi],edx
 10190ee:	or     al,BYTE PTR [rax]
 10190f0:	(bad)  
 10190f1:	xor    al,0x19
 10190f3:	add    BYTE PTR [rsi],dl
 10190f5:	rcl    BYTE PTR [rdx],cl
 10190f7:	lock adc al,ah
 10190fa:	(bad)  
 10190fb:	ror    BYTE PTR [rax+rax*8],1
 10190fe:	or     dh,BYTE PTR [rax+0x9]
 1019101:	(bad)  
 1019102:	or     BYTE PTR [rax+0x0],dl
 1019105:	add    BYTE PTR [rax],al
 1019107:	add    BYTE PTR [rcx],al
 1019109:	add    al,0x1
 101910b:	add    BYTE PTR [rdx+rdx*1],al
 101910e:	add    BYTE PTR [rax],al
 1019110:	add    DWORD PTR [rsi],eax
 1019112:	add    al,BYTE PTR [rax]
 1019114:	(bad)  
 1019115:	xor    al,BYTE PTR [rdx]
 1019117:	xor    BYTE PTR [rcx],bl
 1019119:	nop
 101911a:	(bad)  
 101911b:	add    BYTE PTR [rax-0x7cfdf50c],dl
 1019121:	(bad)  
 1019122:	adc    eax,DWORD PTR [rdx]
 1019124:	ins    BYTE PTR es:[rdi],dx
 1019125:	je     0x1019139
 1019127:	add    bl,BYTE PTR [rsi+0x34]
 101912a:	adc    DWORD PTR [rdx],eax
 101912c:	sbb    al,0x1
 101912e:	or     eax,DWORD PTR [rdx]
 1019130:	(bad)  
 1019131:	loopne 0x1019138
 1019133:	rol    BYTE PTR [rbx],0x60
 1019136:	add    dl,BYTE PTR [rax-0x4c]
 1019139:	fiadd  DWORD PTR [rax]
 101913b:	add    BYTE PTR [rax+0x10],al
 101913e:	add    BYTE PTR [rax],al
 1019140:	sbb    DWORD PTR [rip+0x10b0005],ebx        # 0x20c914b
 1019146:	rex.WX add BYTE PTR [rax+r14*2],al
 101914a:	add    esp,DWORD PTR [rax+0x2]
 101914d:	xor    BYTE PTR [rax],al
 101914f:	add    BYTE PTR [rdx+rbx*8+0x2400000],dh
 1019156:	add    BYTE PTR [rax],al
 1019158:	add    DWORD PTR [rip+0x74150008],edx        # 0x75169166
 101915e:	or     BYTE PTR [rax],al
 1019160:	adc    eax,0x15000764
 1019165:	xor    al,0x6
 1019167:	add    BYTE PTR [rip+0x19e01132],dl        # 0x1ae1a29f
 101916d:	sbb    eax,0x10b0005
 1019172:	adc    al,BYTE PTR [rax]
 1019174:	add    al,0x70
 1019176:	add    esp,DWORD PTR [rax+0x2]
 1019179:	xor    BYTE PTR [rax],al
 101917b:	add    BYTE PTR [rdx+rbx*8+0x800000],dh
 1019182:	add    BYTE PTR [rax],al
 1019184:	and    DWORD PTR [rax],ecx
 1019186:	add    al,BYTE PTR [rax]
 1019188:	or     BYTE PTR [rax+rbx*1+0x0],dl
 101918c:	jo     0x10191e6
 101918e:	add    DWORD PTR [rax],eax
 1019190:	scas   eax,DWORD PTR es:[rdi]
 1019191:	pop    rax
 1019192:	add    DWORD PTR [rax],eax
 1019194:	ins    BYTE PTR es:[rdi],dx
 1019195:	xchg   ecx,eax
 1019196:	add    DWORD PTR [rax],eax
 1019198:	and    DWORD PTR [rax],eax
 101919a:	add    BYTE PTR [rax],al
 101919c:	jo     0x10191f6
 101919e:	add    DWORD PTR [rax],eax
 10191a0:	scas   eax,DWORD PTR es:[rdi]
 10191a1:	pop    rax
 10191a2:	add    DWORD PTR [rax],eax
 10191a4:	ins    BYTE PTR es:[rdi],dx
 10191a5:	xchg   ecx,eax
 10191a6:	add    DWORD PTR [rax],eax
 10191a8:	add    DWORD PTR [rcx+rax*1],eax
 10191ab:	add    BYTE PTR [rdx+rax*2],al
 10191ae:	add    BYTE PTR [rax],al
 10191b0:	and    DWORD PTR [rip+0x34050002],eax        # 0x350691b8
 10191b6:	add    al,0x0
 10191b8:	rcr    BYTE PTR [rcx+0x1],1
 10191bb:	add    ch,dh
 10191bd:	pop    rcx
 10191be:	add    DWORD PTR [rax],eax
 10191c0:	test   al,0x91
 10191c2:	add    DWORD PTR [rax],eax
 10191c4:	and    DWORD PTR [rax],eax
 10191c6:	add    BYTE PTR [rax],al
 10191c8:	rcr    BYTE PTR [rcx+0x1],1
 10191cb:	add    ch,dh
 10191cd:	pop    rcx
 10191ce:	add    DWORD PTR [rax],eax
 10191d0:	test   al,0x91
 10191d2:	add    DWORD PTR [rax],eax
 10191d4:	add    DWORD PTR [rdx],ecx
 10191d6:	add    al,0x0
 10191d8:	or     dh,BYTE PTR [rsi+rax*1]
 10191db:	add    BYTE PTR [rdx],cl
 10191dd:	xor    al,BYTE PTR [rsi]
 10191df:	jo     0x10191e2
 10191e1:	outs   dx,BYTE PTR ds:[rsi]
 10191e2:	(bad)  
 10191e3:	add    BYTE PTR [rsi+0x34],ch
 10191e6:	(bad)  
 10191e7:	add    BYTE PTR [rdx],cl
 10191e9:	fs (bad) 
 10191eb:	add    BYTE PTR [rdx],cl
 10191ed:	xor    al,BYTE PTR [rsi]
 10191ef:	jo     0x10191f1
	...
 10191f9:	add    BYTE PTR [rax],al
 10191fb:	add    BYTE PTR [rax],dl
 10191fd:	xchg   edx,eax
 10191fe:	add    DWORD PTR [rax],eax
	...
 1019210:	add    DWORD PTR [rax],eax
 1019212:	add    BYTE PTR [rax],al
 1019214:	and    BYTE PTR [rdx+0x1],dl
	...
 1019222:	add    BYTE PTR [rax],al
 1019224:	add    BYTE PTR [rcx+0x1],dh
 101922a:	add    BYTE PTR [rax],al
 101922c:	(bad)  
 101922d:	(bad)  
 101922e:	(bad)  
 101922f:	inc    DWORD PTR [rax]
 1019231:	add    BYTE PTR [rax],al
 1019233:	add    BYTE PTR [rax+rax*1],al
	...
 101924a:	add    BYTE PTR [rax],al
 101924c:	mov    cl,0x1
 101924f:	add    BYTE PTR [rax],al
 1019251:	add    BYTE PTR [rax],al
 1019253:	add    bh,bh
 1019255:	(bad)  
 1019256:	(bad)  
 1019257:	inc    DWORD PTR [rax]
 1019259:	add    BYTE PTR [rax],al
 101925b:	add    BYTE PTR [rax],bl
 101925d:	add    BYTE PTR [rax],al
 101925f:	add    dl,ch
 1019261:	fadd   QWORD PTR [rax]
	...
 1019273:	add    al,al
 1019275:	pop    rsi
 1019276:	add    BYTE PTR [rax],al
 1019278:	add    BYTE PTR [rax],al
 101927a:	add    BYTE PTR [rax],al
 101927c:	nop
 101927d:	xchg   edx,eax
 101927e:	add    DWORD PTR [rax],eax
	...
 1019290:	add    al,BYTE PTR [rax]
 1019292:	add    BYTE PTR [rax],al
 1019294:	test   al,0x92
 1019296:	add    DWORD PTR [rax],eax
 1019298:	xchg   rdx,rax
 101929a:	add    DWORD PTR [rax],eax
	...
 10192ac:	push   0x1b1
 10192b1:	add    BYTE PTR [rax],al
 10192b3:	add    bh,bh
 10192b5:	(bad)  
 10192b6:	(bad)  
 10192b7:	inc    DWORD PTR [rax]
 10192b9:	add    BYTE PTR [rax],al
 10192bb:	add    BYTE PTR [rax],bl
 10192bd:	add    BYTE PTR [rax],al
 10192bf:	add    al,ah
 10192c1:	pop    rsi
	...
 10192ce:	add    BYTE PTR [rax],al
 10192d0:	add    DWORD PTR [rax],eax
 10192d2:	add    BYTE PTR [rax],al
 10192d4:	(bad)  
 10192d5:	cmp    eax,DWORD PTR [rax]
 10192d7:	add    BYTE PTR [rax-0x3ffffe45],dl
 10192dd:	mov    dl,0x1
 10192df:	add    BYTE PTR [rax],dl
 10192e1:	xchg   ebx,eax
 10192e2:	add    DWORD PTR [rax],eax
 10192e4:	rex xchg ebx,eax
 10192e6:	add    DWORD PTR [rax],eax
	...
 1019310:	and    BYTE PTR [rbx+0x1],dl
	...
 1019322:	rex.RXB
 1019323:	gs je  0x1019379
 1019326:	push   rcx
 1019327:	rex.WR push rsi
 1019329:	gs jb  0x101937f
 101932c:	jo     0x1019393
 101932e:	movsxd ebp,DWORD PTR [rcx+0x66]
 1019331:	imul   esp,DWORD PTR [rbx+0x52],0x74536765
 1019338:	jb     0x10193a3
 101933a:	outs   dx,BYTE PTR ds:[rsi]
 101933b:	add    BYTE PTR [eax],dh
	...
 101934e:	add    BYTE PTR [rax],al
 1019350:	sbb    BYTE PTR [rcx+rax*1+0x0],dl
 1019357:	add    BYTE PTR [rax],al
 1019359:	add    BYTE PTR [rax],al
 101935b:	add    BYTE PTR [rdx],ch
 101935d:	fwait
 101935e:	add    DWORD PTR [rax],eax
 1019360:	add    BYTE PTR [rax],dl
 1019362:	add    BYTE PTR [rax],al
 1019364:	cwde   
 1019365:	xchg   esp,eax
 1019366:	add    DWORD PTR [rax],eax
	...
 1019370:	push   rsp
 1019371:	sahf   
 1019372:	add    DWORD PTR [rax],eax
 1019374:	adc    BYTE PTR [rax],0x0
 1019377:	add    al,bh
 1019379:	xchg   edi,eax
 101937a:	add    DWORD PTR [rax],eax
	...
 1019384:	mul    BYTE PTR [rax+0x13e00001]
 101938a:	add    BYTE PTR [rax],al
 101938c:	rcl    BYTE PTR [rdi+0x1],0x0
 1019393:	add    BYTE PTR [rax],al
 1019395:	add    BYTE PTR [rax],al
 1019397:	add    BYTE PTR [rdx-0x5e],ah
 101939a:	add    DWORD PTR [rax],eax
 101939c:	test   al,0x13
 101939e:	add    BYTE PTR [rax],al
 10193a0:	lock cdq 
 10193a2:	add    DWORD PTR [rax],eax
	...
 10193ac:	jo     0x1019350
 10193ae:	add    DWORD PTR [rax],eax
 10193b0:	fcom   DWORD PTR [rip+0xffffffff9ab00000]        # 0xffffffff9bb193b6
 10193b6:	add    DWORD PTR [rax],eax
	...
 10193c0:	sbb    ah,BYTE PTR [rbx+0x16980001]
 10193c6:	add    BYTE PTR [rax],al
 10193c8:	js     0x1019364
 10193ca:	add    DWORD PTR [rax],eax
	...
 10193d4:	push   0xffffffffffffffa3
 10193d6:	add    DWORD PTR [rax],eax
 10193d8:	(bad)  
 10193d9:	(bad)  
 10193da:	add    BYTE PTR [rax],al
 10193dc:	xchg   rsp,rax
 10193de:	add    DWORD PTR [rax],eax
	...
 10193e8:	rex.RX movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10193ea:	add    DWORD PTR [rax],eax
 10193ec:	xor    BYTE PTR [rax],dl
 10193ee:	add    BYTE PTR [rax],al
 10193f0:	cwde   
 10193f1:	(bad)  
 10193f2:	add    DWORD PTR [rax],eax
	...
 10193fc:	sub    al,0xaa
 10193fe:	add    DWORD PTR [rax],eax
 1019400:	adc    BYTE PTR [rsi],0x0
	...
 1019417:	add    al,bh
 1019419:	(bad)  
 101941a:	add    DWORD PTR [rax],eax
 101941c:	add    BYTE PTR [rax],al
 101941e:	add    BYTE PTR [rax],al
 1019420:	(bad)  
 1019421:	fwait
 1019422:	add    DWORD PTR [rax],eax
 1019424:	add    BYTE PTR [rax],al
 1019426:	add    BYTE PTR [rax],al
 1019428:	(bad)  
 1019429:	fwait
 101942a:	add    DWORD PTR [rax],eax
 101942c:	add    BYTE PTR [rax],al
 101942e:	add    BYTE PTR [rax],al
 1019430:	movs   DWORD PTR es:[rdi],DWORD PTR fs:[rsi]
 1019432:	add    DWORD PTR [rax],eax
 1019434:	add    BYTE PTR [rax],al
 1019436:	add    BYTE PTR [rax],al
 1019438:	push   rsp
 1019439:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101943a:	add    DWORD PTR [rax],eax
	...
 1019448:	(bad)  
 1019449:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101944a:	add    DWORD PTR [rax],eax
 101944c:	add    BYTE PTR [rax],al
 101944e:	add    BYTE PTR [rax],al
 1019450:	test   al,0xa4
 1019452:	add    DWORD PTR [rax],eax
 1019454:	add    BYTE PTR [rax],al
 1019456:	add    BYTE PTR [rax],al
 1019458:	push   rsp
 1019459:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101945a:	add    DWORD PTR [rax],eax
 101945c:	add    BYTE PTR [rax],al
 101945e:	add    BYTE PTR [rax],al
 1019460:	xor    ah,BYTE PTR [rcx+rax*1+0x0]
 1019467:	add    BYTE PTR [rsp+riz*4],cl
 101946a:	add    DWORD PTR [rax],eax
 101946c:	add    BYTE PTR [rax],al
 101946e:	add    BYTE PTR [rax],al
 1019470:	mul    BYTE PTR [rbx+0x1]
 1019476:	add    BYTE PTR [rax],al
 1019478:	loopne 0x101941d
 101947a:	add    DWORD PTR [rax],eax
 101947c:	add    BYTE PTR [rax],al
 101947e:	add    BYTE PTR [rax],al
 1019480:	jle    0x1019426
 1019482:	add    DWORD PTR [rax],eax
 1019484:	add    BYTE PTR [rax],al
 1019486:	add    BYTE PTR [rax],al
 1019488:	je     0x101942d
 101948a:	add    DWORD PTR [rax],eax
	...
 1019498:	call   0x101963a
 101949d:	add    BYTE PTR [rax],al
 101949f:	add    ah,dh
 10194a1:	popf   
 10194a2:	add    DWORD PTR [rax],eax
 10194a4:	add    BYTE PTR [rax],al
 10194a6:	add    BYTE PTR [rax],al
 10194a8:	add    BYTE PTR [rsi+0x1],bl
 10194ae:	add    BYTE PTR [rax],al
 10194b0:	(bad)  
 10194b1:	sahf   
 10194b2:	add    DWORD PTR [rax],eax
 10194b4:	add    BYTE PTR [rax],al
 10194b6:	add    BYTE PTR [rax],al
 10194b8:	and    al,0x9e
 10194ba:	add    DWORD PTR [rax],eax
 10194bc:	add    BYTE PTR [rax],al
 10194be:	add    BYTE PTR [rax],al
 10194c0:	xor    BYTE PTR [rsi+0x1],bl
 10194c6:	add    BYTE PTR [rax],al
 10194c8:	ds sahf 
 10194ca:	add    DWORD PTR [rax],eax
 10194cc:	add    BYTE PTR [rax],al
 10194ce:	add    BYTE PTR [rax],al
 10194d0:	pop    rax
 10194d1:	stos   BYTE PTR es:[rdi],al
 10194d2:	add    DWORD PTR [rax],eax
 10194d4:	add    BYTE PTR [rax],al
 10194d6:	add    BYTE PTR [rax],al
 10194d8:	rex.R stos BYTE PTR es:[rdi],al
 10194da:	add    DWORD PTR [rax],eax
 10194dc:	add    BYTE PTR [rax],al
 10194de:	add    BYTE PTR [rax],al
 10194e0:	cmp    BYTE PTR [rdx+0x1],ch
 10194e6:	add    BYTE PTR [rax],al
 10194e8:	pop    rdx
 10194e9:	test   eax,0x1
 10194ee:	add    BYTE PTR [rax],al
 10194f0:	rex.WR test rax,0x1
 10194f6:	add    BYTE PTR [rax],al
 10194f8:	cmp    BYTE PTR [rcx+0x1],ch
 10194fe:	add    BYTE PTR [rax],al
 1019500:	and    al,0xa9
 1019502:	add    DWORD PTR [rax],eax
 1019504:	add    BYTE PTR [rax],al
 1019506:	add    BYTE PTR [rax],al
 1019508:	adc    BYTE PTR [rcx+0x1],ch
 101950e:	add    BYTE PTR [rax],al
 1019510:	(bad)  
 1019511:	test   al,0x1
 1019513:	add    BYTE PTR [rax],al
 1019515:	add    BYTE PTR [rax],al
 1019517:	add    ah,ch
 1019519:	test   al,0x1
 101951b:	add    BYTE PTR [rax],al
 101951d:	add    BYTE PTR [rax],al
 101951f:	add    dh,dl
 1019521:	test   al,0x1
 1019523:	add    BYTE PTR [rax],al
 1019525:	add    BYTE PTR [rax],al
 1019527:	add    al,cl
 1019529:	test   al,0x1
 101952b:	add    BYTE PTR [rax],al
 101952d:	add    BYTE PTR [rax],al
 101952f:	add    BYTE PTR [rax+0x1a8],bh
 1019535:	add    BYTE PTR [rax],al
 1019537:	add    BYTE PTR [rax+0x1a8],ch
 101953d:	add    BYTE PTR [rax],al
 101953f:	add    BYTE PTR [rax+0x1a8],dl
 1019545:	add    BYTE PTR [rax],al
 1019547:	add    BYTE PTR [rax+0x1a8],al
 101954d:	add    BYTE PTR [rax],al
 101954f:	add    BYTE PTR [rax+rbp*4+0x1],ah
 1019553:	add    BYTE PTR [rax],al
 1019555:	add    BYTE PTR [rax],al
 1019557:	add    BYTE PTR [rax-0x58],cl
 101955a:	add    DWORD PTR [rax],eax
 101955c:	add    BYTE PTR [rax],al
 101955e:	add    BYTE PTR [rax],al
 1019560:	cmp    ch,BYTE PTR [rax+0x1]
 1019566:	add    BYTE PTR [rax],al
 1019568:	sub    ch,BYTE PTR [rax+0x1]
 101956e:	add    BYTE PTR [rax],al
 1019570:	sbb    ch,BYTE PTR [rax+0x1]
 1019576:	add    BYTE PTR [rax],al
 1019578:	add    BYTE PTR [rax+0x1],ch
 101957e:	add    BYTE PTR [rax],al
 1019580:	ficomp DWORD PTR [rbp+0x1]
 1019586:	add    BYTE PTR [rax],al
 1019588:	(bad)  
 1019589:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 101958a:	add    DWORD PTR [rax],eax
 101958c:	add    BYTE PTR [rax],al
 101958e:	add    BYTE PTR [rax],al
 1019590:	ret    0x1a7
 1019593:	add    BYTE PTR [rax],al
 1019595:	add    BYTE PTR [rax],al
 1019597:	add    BYTE PTR [rdx+0x1a7],dh
 101959d:	add    BYTE PTR [rax],al
 101959f:	add    BYTE PTR [rax+0x1a7],ah
 10195a5:	add    BYTE PTR [rax],al
 10195a7:	add    BYTE PTR [rax+0x1a7],dl
 10195ad:	add    BYTE PTR [rax],al
 10195af:	add    BYTE PTR [rdi+riz*4+0x1],bh
 10195b3:	add    BYTE PTR [rax],al
 10195b5:	add    BYTE PTR [rax],al
 10195b7:	add    BYTE PTR [rsi-0x59],ah
 10195ba:	add    DWORD PTR [rax],eax
 10195bc:	add    BYTE PTR [rax],al
 10195be:	add    BYTE PTR [rax],al
 10195c0:	push   rax
 10195c1:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10195c2:	add    DWORD PTR [rax],eax
 10195c4:	add    BYTE PTR [rax],al
 10195c6:	add    BYTE PTR [rax],al
 10195c8:	cmp    ah,BYTE PTR [rdi+0x1]
 10195ce:	add    BYTE PTR [rax],al
 10195d0:	(bad)  
 10195d1:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10195d2:	add    DWORD PTR [rax],eax
 10195d4:	add    BYTE PTR [rax],al
 10195d6:	add    BYTE PTR [rax],al
 10195d8:	or     BYTE PTR [rdi+0x1],ah
 10195de:	add    BYTE PTR [rax],al
 10195e0:	hlt    
 10195e1:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10195e2:	add    DWORD PTR [rax],eax
 10195e4:	add    BYTE PTR [rax],al
 10195e6:	add    BYTE PTR [rax],al
 10195e8:	loop   0x1019590
 10195ea:	add    DWORD PTR [rax],eax
 10195ec:	add    BYTE PTR [rax],al
 10195ee:	add    BYTE PTR [rax],al
 10195f0:	(bad)  
 10195f1:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10195f2:	add    DWORD PTR [rax],eax
 10195f4:	add    BYTE PTR [rax],al
 10195f6:	add    BYTE PTR [rax],al
 10195f8:	enter  0x1a6,0x0
 10195fc:	add    BYTE PTR [rax],al
 10195fe:	add    BYTE PTR [rax],al
 1019600:	mov    esp,0x1a6
 1019605:	add    BYTE PTR [rax],al
 1019607:	add    BYTE PTR [rax+0x1a6],dh
 101960d:	add    BYTE PTR [rax],al
 101960f:	add    BYTE PTR [rdx+0x1a6],ah
 1019615:	add    BYTE PTR [rax],al
 1019617:	add    BYTE PTR [rdx-0x5a],bh
 101961a:	add    DWORD PTR [rax],eax
 101961c:	add    BYTE PTR [rax],al
 101961e:	add    BYTE PTR [rax],al
 1019620:	(bad)  
 1019621:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1019622:	add    DWORD PTR [rax],eax
 1019624:	add    BYTE PTR [rax],al
 1019626:	add    BYTE PTR [rax],al
 1019628:	rex.WX cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 101962a:	add    DWORD PTR [rax],eax
 101962c:	add    BYTE PTR [rax],al
 101962e:	add    BYTE PTR [rax],al
 1019630:	cmp    ah,BYTE PTR [rsi+0x1]
 1019636:	add    BYTE PTR [rax],al
 1019638:	and    BYTE PTR [rsi+0x1],ah
 101963e:	add    BYTE PTR [rax],al
 1019640:	adc    BYTE PTR [rsi+0x1],ah
 1019646:	add    BYTE PTR [rax],al
 1019648:	cld    
 1019649:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101964a:	add    DWORD PTR [rax],eax
 101964c:	add    BYTE PTR [rax],al
 101964e:	add    BYTE PTR [rax],al
 1019650:	loop   0x10195f7
 1019652:	add    DWORD PTR [rax],eax
 1019654:	add    BYTE PTR [rax],al
 1019656:	add    BYTE PTR [rax],al
 1019658:	(bad)  
 1019659:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 101965a:	add    DWORD PTR [rax],eax
 101965c:	add    BYTE PTR [rax],al
 101965e:	add    BYTE PTR [rax],al
 1019660:	mov    edx,0x1a5
 1019665:	add    BYTE PTR [rax],al
 1019667:	add    BYTE PTR [rsi+0x1a5],bl
 101966d:	add    BYTE PTR [rax],al
 101966f:	add    BYTE PTR [rdx+0x1a5],cl
 1019675:	add    BYTE PTR [rax],al
 1019677:	add    BYTE PTR [rdx-0x5b],bh
 101967a:	add    DWORD PTR [rax],eax
 101967c:	add    BYTE PTR [rax],al
 101967e:	add    BYTE PTR [rax],al
 1019680:	jb     0x1019627
 1019682:	add    DWORD PTR [rax],eax
 1019684:	add    BYTE PTR [rax],al
 1019686:	add    BYTE PTR [rax],al
 1019688:	enter  0x19d,0x0
 101968c:	add    BYTE PTR [rax],al
 101968e:	add    BYTE PTR [rax],al
 1019690:	mov    dh,0x9d
 1019692:	add    DWORD PTR [rax],eax
 1019694:	add    BYTE PTR [rax],al
 1019696:	add    BYTE PTR [rax],al
 1019698:	stos   BYTE PTR es:[rdi],al
 1019699:	popf   
 101969a:	add    DWORD PTR [rax],eax
 101969c:	add    BYTE PTR [rax],al
 101969e:	add    BYTE PTR [rax],al
 10196a0:	cwde   
 10196a1:	popf   
 10196a2:	add    DWORD PTR [rax],eax
 10196a4:	add    BYTE PTR [rax],al
 10196a6:	add    BYTE PTR [rax],al
 10196a8:	mov    BYTE PTR [rbp+0x1],bl
 10196ae:	add    BYTE PTR [rax],al
 10196b0:	jbe    0x101964f
 10196b2:	add    DWORD PTR [rax],eax
 10196b4:	add    BYTE PTR [rax],al
 10196b6:	add    BYTE PTR [rax],al
 10196b8:	fs popf 
 10196ba:	add    DWORD PTR [rax],eax
 10196bc:	add    BYTE PTR [rax],al
 10196be:	add    BYTE PTR [rax],al
 10196c0:	push   rdx
 10196c1:	popf   
 10196c2:	add    DWORD PTR [rax],eax
 10196c4:	add    BYTE PTR [rax],al
 10196c6:	add    BYTE PTR [rax],al
 10196c8:	rex.X popf 
 10196ca:	add    DWORD PTR [rax],eax
 10196cc:	add    BYTE PTR [rax],al
 10196ce:	add    BYTE PTR [rax],al
 10196d0:	sub    al,0x9d
 10196d2:	add    DWORD PTR [rax],eax
 10196d4:	add    BYTE PTR [rax],al
 10196d6:	add    BYTE PTR [rax],al
 10196d8:	sbb    al,0x9d
 10196da:	add    DWORD PTR [rax],eax
 10196dc:	add    BYTE PTR [rax],al
 10196de:	add    BYTE PTR [rax],al
 10196e0:	or     al,0x9d
 10196e2:	add    DWORD PTR [rax],eax
 10196e4:	add    BYTE PTR [rax],al
 10196e6:	add    BYTE PTR [rax],al
 10196e8:	neg    BYTE PTR [rcx+rax*1+0x0]
 10196ef:	add    dl,ah
 10196f1:	pushf  
 10196f2:	add    DWORD PTR [rax],eax
 10196f4:	add    BYTE PTR [rax],al
 10196f6:	add    BYTE PTR [rax],al
 10196f8:	(bad)  
 10196f9:	pushf  
 10196fa:	add    DWORD PTR [rax],eax
 10196fc:	add    BYTE PTR [rax],al
 10196fe:	add    BYTE PTR [rax],al
 1019700:	mov    eax,0x19c
 1019705:	add    BYTE PTR [rax],al
 1019707:	add    BYTE PTR [rsp+rbx*4+0x1],ah
 101970e:	add    BYTE PTR [rax],al
 1019710:	xchg   esi,eax
 1019711:	pushf  
 1019712:	add    DWORD PTR [rax],eax
 1019714:	add    BYTE PTR [rax],al
 1019716:	add    BYTE PTR [rax],al
 1019718:	xchg   BYTE PTR [rcx+rax*1+0x0],bl
 101971f:	add    BYTE PTR [rsp+rbx*4+0x1],dh
 1019723:	add    BYTE PTR [rax],al
 1019725:	add    BYTE PTR [rax],al
 1019727:	add    BYTE PTR [rax-0x64],ch
 101972a:	add    DWORD PTR [rax],eax
 101972c:	add    BYTE PTR [rax],al
 101972e:	add    BYTE PTR [rax],al
 1019730:	pop    rdx
 1019731:	pushf  
 1019732:	add    DWORD PTR [rax],eax
 1019734:	add    BYTE PTR [rax],al
 1019736:	add    BYTE PTR [rax],al
 1019738:	rex.WX pushf 
 101973a:	add    DWORD PTR [rax],eax
 101973c:	add    BYTE PTR [rax],al
 101973e:	add    BYTE PTR [rax],al
 1019740:	cmp    al,0x9c
 1019742:	add    DWORD PTR [rax],eax
 1019744:	add    BYTE PTR [rax],al
 1019746:	add    BYTE PTR [rax],al
 1019748:	cs pushf 
 101974a:	add    DWORD PTR [rax],eax
 101974c:	add    BYTE PTR [rax],al
 101974e:	add    BYTE PTR [rax],al
 1019750:	(bad)  
 1019751:	pushf  
 1019752:	add    DWORD PTR [rax],eax
 1019754:	add    BYTE PTR [rax],al
 1019756:	add    BYTE PTR [rax],al
 1019758:	(bad)  
 1019759:	fwait
 101975a:	add    DWORD PTR [rax],eax
 101975c:	add    BYTE PTR [rax],al
 101975e:	add    BYTE PTR [rax],al
 1019760:	loop   0x10196fd
 1019762:	add    DWORD PTR [rax],eax
 1019764:	add    BYTE PTR [rax],al
 1019766:	add    BYTE PTR [rax],al
 1019768:	rcr    BYTE PTR [rbx+0x1],cl
 101976e:	add    BYTE PTR [rax],al
 1019770:	mov    esp,0x19b
 1019775:	add    BYTE PTR [rax],al
 1019777:	add    BYTE PTR [rsi+0x19b],bl
 101977d:	add    BYTE PTR [rax],al
 101977f:	add    BYTE PTR [rax+0x19b],cl
 1019785:	add    BYTE PTR [rax],al
 1019787:	add    BYTE PTR [rbx+rbx*4+0x1],dh
 101978b:	add    BYTE PTR [rax],al
 101978d:	add    BYTE PTR [rax],al
 101978f:	add    BYTE PTR [rbx+rbx*4+0x1],bl
 1019793:	add    BYTE PTR [rax],al
 1019795:	add    BYTE PTR [rax],al
 1019797:	add    BYTE PTR [rdx-0x65],cl
 101979a:	add    DWORD PTR [rax],eax
 101979c:	add    BYTE PTR [rax],al
 101979e:	add    BYTE PTR [rax],al
 10197a0:	cmp    BYTE PTR [rbx+0x1],bl
 10197a6:	add    BYTE PTR [rax],al
 10197a8:	out    0xa7,al
 10197aa:	add    DWORD PTR [rax],eax
 10197ac:	add    BYTE PTR [rax],al
 10197ae:	add    BYTE PTR [rax],al
 10197b0:	push   0xffffffffffffffaa
 10197b2:	add    DWORD PTR [rax],eax
	...
 10197c0:	mov    fs,WORD PTR [rcx+0x1]
 10197c6:	add    BYTE PTR [rax],al
 10197c8:	xor    al,0xa2
 10197ca:	add    DWORD PTR [rax],eax
 10197cc:	add    BYTE PTR [rax],al
 10197ce:	add    BYTE PTR [rax],al
 10197d0:	or     BYTE PTR [rdx+0x1],ah
 10197d6:	add    BYTE PTR [rax],al
 10197d8:	out    0xa1,al
 10197da:	add    DWORD PTR [rax],eax
 10197dc:	add    BYTE PTR [rax],al
 10197de:	add    BYTE PTR [rax],al
 10197e0:	(bad)
 10197e4:	add    BYTE PTR [rax],al
 10197e6:	add    BYTE PTR [rax],al
 10197e8:	stos   BYTE PTR es:[rdi],al
 10197e9:	movabs eax,ds:0x1
 10197f2:	add    BYTE PTR [rax],al
 10197f4:	add    BYTE PTR [rax],al
 10197f6:	add    BYTE PTR [rax],al
 10197f8:	jb     0x1019798
 10197fa:	add    DWORD PTR [rax],eax
 10197fc:	add    BYTE PTR [rax],al
 10197fe:	add    BYTE PTR [rax],al
 1019800:	pop    rax
 1019801:	movabs eax,ds:0xa14e000000000001
 101980a:	add    DWORD PTR [rax],eax
 101980c:	add    BYTE PTR [rax],al
 101980e:	add    BYTE PTR [rax],al
 1019810:	rex.RX movabs eax,ds:0xa138000000000001
 101981a:	add    DWORD PTR [rax],eax
 101981c:	add    BYTE PTR [rax],al
 101981e:	add    BYTE PTR [rax],al
 1019820:	movabs eax,cs:0xa104000000000001
 101982a:	add    DWORD PTR [rax],eax
 101982c:	add    BYTE PTR [rax],al
 101982e:	add    BYTE PTR [rax],al
 1019830:	in     al,0xa0
 1019832:	add    DWORD PTR [rax],eax
 1019834:	add    BYTE PTR [rax],al
 1019836:	add    BYTE PTR [rax],al
 1019838:	fisub  DWORD PTR [rax+0x1]
 101983e:	add    BYTE PTR [rax],al
 1019840:	(bad)  
 1019841:	movabs al,ds:0xa0ba000000000001
 101984a:	add    DWORD PTR [rax],eax
 101984c:	add    BYTE PTR [rax],al
 101984e:	add    BYTE PTR [rax],al
 1019850:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1019851:	movabs al,ds:0xa096000000000001
 101985a:	add    DWORD PTR [rax],eax
 101985c:	add    BYTE PTR [rax],al
 101985e:	add    BYTE PTR [rax],al
 1019860:	mov    ah,BYTE PTR [rax+0x1]
 1019866:	add    BYTE PTR [rax],al
 1019868:	jl     0x101980a
 101986a:	add    DWORD PTR [rax],eax
 101986c:	add    BYTE PTR [rax],al
 101986e:	add    BYTE PTR [rax],al
 1019870:	je     0x1019812
 1019872:	add    DWORD PTR [rax],eax
 1019874:	add    BYTE PTR [rax],al
 1019876:	add    BYTE PTR [rax],al
 1019878:	push   0xffffffffffffffa0
 101987a:	add    DWORD PTR [rax],eax
 101987c:	add    BYTE PTR [rax],al
 101987e:	add    BYTE PTR [rax],al
 1019880:	(bad)  
 1019881:	movabs al,ds:0xa054000000000001
 101988a:	add    DWORD PTR [rax],eax
 101988c:	add    BYTE PTR [rax],al
 101988e:	add    BYTE PTR [rax],al
 1019890:	cmp    al,0xa0
 1019892:	add    DWORD PTR [rax],eax
 1019894:	add    BYTE PTR [rax],al
 1019896:	add    BYTE PTR [rax],al
 1019898:	sub    ah,BYTE PTR [rax+0x1]
 101989e:	add    BYTE PTR [rax],al
 10198a0:	sbb    al,0xa0
 10198a2:	add    DWORD PTR [rax],eax
 10198a4:	add    BYTE PTR [rax],al
 10198a6:	add    BYTE PTR [rax],al
 10198a8:	adc    ah,BYTE PTR [rax+0x1]
 10198ae:	add    BYTE PTR [rax],al
 10198b0:	(bad)  
 10198b1:	movabs al,ds:0x9ffc000000000001
 10198ba:	add    DWORD PTR [rax],eax
 10198bc:	add    BYTE PTR [rax],al
 10198be:	add    BYTE PTR [rax],al
 10198c0:	out    0x9f,al
 10198c2:	add    DWORD PTR [rax],eax
 10198c4:	add    BYTE PTR [rax],al
 10198c6:	add    BYTE PTR [rax],al
 10198c8:	(bad)  
 10198c9:	lahf   
 10198ca:	add    DWORD PTR [rax],eax
 10198cc:	add    BYTE PTR [rax],al
 10198ce:	add    BYTE PTR [rax],al
 10198d0:	(bad)  
 10198d1:	sahf   
 10198d2:	add    DWORD PTR [rax],eax
 10198d4:	add    BYTE PTR [rax],al
 10198d6:	add    BYTE PTR [rax],al
 10198d8:	test   al,0x9f
 10198da:	add    DWORD PTR [rax],eax
 10198dc:	add    BYTE PTR [rax],al
 10198de:	add    BYTE PTR [rax],al
 10198e0:	test   BYTE PTR [rdi+0x1],bl
 10198e6:	add    BYTE PTR [rax],al
 10198e8:	(bad)  
 10198e9:	lahf   
 10198ea:	add    DWORD PTR [rax],eax
 10198ec:	add    BYTE PTR [rax],al
 10198ee:	add    BYTE PTR [rax],al
 10198f0:	rex.WRX lahf 
 10198f2:	add    DWORD PTR [rax],eax
 10198f4:	add    BYTE PTR [rax],al
 10198f6:	add    BYTE PTR [rax],al
 10198f8:	rex.X lahf 
 10198fa:	add    DWORD PTR [rax],eax
 10198fc:	add    BYTE PTR [rax],al
 10198fe:	add    BYTE PTR [rax],al
 1019900:	ss lahf 
 1019902:	add    DWORD PTR [rax],eax
 1019904:	add    BYTE PTR [rax],al
 1019906:	add    BYTE PTR [rax],al
 1019908:	sub    al,0x9f
 101990a:	add    DWORD PTR [rax],eax
 101990c:	add    BYTE PTR [rax],al
 101990e:	add    BYTE PTR [rax],al
 1019910:	and    al,0x9f
 1019912:	add    DWORD PTR [rax],eax
 1019914:	add    BYTE PTR [rax],al
 1019916:	add    BYTE PTR [rax],al
 1019918:	sbb    bl,BYTE PTR [rdi+0x1]
 101991e:	add    BYTE PTR [rax],al
 1019920:	adc    BYTE PTR [rdi+0x1],bl
 1019926:	add    BYTE PTR [rax],al
 1019928:	add    al,0x9f
 101992a:	add    DWORD PTR [rax],eax
 101992c:	add    BYTE PTR [rax],al
 101992e:	add    BYTE PTR [rax],al
 1019930:	clc    
 1019931:	sahf   
 1019932:	add    DWORD PTR [rax],eax
 1019934:	add    BYTE PTR [rax],al
 1019936:	add    BYTE PTR [rax],al
 1019938:	in     al,dx
 1019939:	sahf   
 101993a:	add    DWORD PTR [rax],eax
 101993c:	add    BYTE PTR [rax],al
 101993e:	add    BYTE PTR [rax],al
 1019940:	ficomp DWORD PTR [rsi+0x1]
 1019946:	add    BYTE PTR [rax],al
 1019948:	rcr    BYTE PTR [rsi+0x1],1
 101994e:	add    BYTE PTR [rax],al
 1019950:	enter  0x19e,0x0
 1019954:	add    BYTE PTR [rax],al
 1019956:	add    BYTE PTR [rax],al
 1019958:	mov    edx,0x19e
 101995d:	add    BYTE PTR [rax],al
 101995f:	add    BYTE PTR [rax+0x19e],dh
 1019965:	add    BYTE PTR [rax],al
 1019967:	add    BYTE PTR [rdx+0x19e],ah
 101996d:	add    BYTE PTR [rax],al
 101996f:	add    BYTE PTR [rsi+rbx*4+0x1],cl
 1019976:	add    BYTE PTR [rax],al
 1019978:	jp     0x1019918
 101997a:	add    DWORD PTR [rax],eax
 101997c:	add    BYTE PTR [rax],al
 101997e:	add    BYTE PTR [rax],al
 1019980:	push   0xffffffffffffffa9
 1019982:	add    DWORD PTR [rax],eax
 1019984:	add    BYTE PTR [rax],al
 1019986:	add    BYTE PTR [rax],al
 1019988:	js     0x1019933
 101998a:	add    DWORD PTR [rax],eax
 101998c:	add    BYTE PTR [rax],al
 101998e:	add    BYTE PTR [rax],al
 1019990:	(bad)  
 1019991:	test   eax,0x1
 1019996:	add    BYTE PTR [rax],al
 1019998:	mov    ch,BYTE PTR [rcx+0x1]
 101999e:	add    BYTE PTR [rax],al
 10199a0:	xchg   esi,eax
 10199a1:	test   eax,0x1
 10199a6:	add    BYTE PTR [rax],al
 10199a8:	movabs al,ds:0xaa000000000001a9
 10199b1:	test   eax,0x1
 10199b6:	add    BYTE PTR [rax],al
 10199b8:	mov    ah,0xa9
 10199ba:	add    DWORD PTR [rax],eax
 10199bc:	add    BYTE PTR [rax],al
 10199be:	add    BYTE PTR [rax],al
 10199c0:	(bad)  
 10199c1:	test   eax,0x1
 10199c6:	add    BYTE PTR [rax],al
 10199c8:	(bad)  
 10199c9:	test   eax,0x1
 10199ce:	add    BYTE PTR [rax],al
 10199d0:	in     al,0xa9
 10199d2:	add    DWORD PTR [rax],eax
 10199d4:	add    BYTE PTR [rax],al
 10199d6:	add    BYTE PTR [rax],al
 10199d8:	hlt    
 10199d9:	test   eax,0x1
 10199de:	add    BYTE PTR [rax],al
 10199e0:	sbb    BYTE PTR [rcx+0x1],ah
	...
 10199ee:	add    BYTE PTR [rax],al
 10199f0:	(bad)  
 10199f1:	add    BYTE PTR [rax],al
 10199f3:	add    BYTE PTR [rax],al
 10199f5:	add    BYTE PTR [rax],al
 10199f7:	add    BYTE PTR [rdi],0x0
 10199fa:	add    BYTE PTR [rax],al
 10199fc:	add    BYTE PTR [rax],al
 10199fe:	add    BYTE PTR [rax+0x2],al
 1019a04:	add    BYTE PTR [rax],al
 1019a06:	add    BYTE PTR [rax+0xc8],al
 1019a0c:	add    BYTE PTR [rax],al
 1019a0e:	add    BYTE PTR [rax+0x4],al
 1019a14:	add    BYTE PTR [rax],al
 1019a16:	add    BYTE PTR [rax+0x8],al
 1019a1c:	add    BYTE PTR [rax],al
 1019a1e:	add    BYTE PTR [rax+0x13a],al
 1019a24:	add    BYTE PTR [rax],al
 1019a26:	add    BYTE PTR [rax+0x139],al
 1019a2c:	add    BYTE PTR [rax],al
 1019a2e:	add    BYTE PTR [rax+0x96],al
 1019a34:	add    BYTE PTR [rax],al
 1019a36:	add    BYTE PTR [rax+0x95],al
 1019a3c:	add    BYTE PTR [rax],al
 1019a3e:	add    BYTE PTR [rax+0x18],al
 1019a44:	add    BYTE PTR [rax],al
 1019a46:	add    BYTE PTR [rax+0x17],al
 1019a4c:	add    BYTE PTR [rax],al
 1019a4e:	add    BYTE PTR [rax+0x10],al
 1019a54:	add    BYTE PTR [rax],al
 1019a56:	add    BYTE PTR [rax+0xf],al
 1019a5c:	add    BYTE PTR [rax],al
 1019a5e:	add    BYTE PTR [rax+0x14b],al
 1019a64:	add    BYTE PTR [rax],al
 1019a66:	add    BYTE PTR [rax+0x9],al
 1019a6c:	add    BYTE PTR [rax],al
 1019a6e:	add    BYTE PTR [rax+0x0],al
 1019a74:	add    BYTE PTR [rax],al
 1019a76:	add    BYTE PTR [rax],al
 1019a78:	cmp    ah,BYTE PTR [rbx+0x1]
 1019a7e:	add    BYTE PTR [rax],al
 1019a80:	push   rdx
 1019a81:	movabs ds:0xa324000000000001,eax
 1019a8a:	add    DWORD PTR [rax],eax
	...
 1019a98:	add    al,0xaa
 1019a9a:	add    DWORD PTR [rax],eax
 1019a9c:	add    BYTE PTR [rax],al
 1019a9e:	add    BYTE PTR [rax],al
 1019aa0:	sbb    ch,BYTE PTR [rdx+0x1]
	...
 1019aae:	add    BYTE PTR [rax],al
 1019ab0:	or     BYTE PTR [rbx+0x1],ah
 1019ab6:	add    BYTE PTR [rax],al
 1019ab8:	enter  0x1a2,0x0
 1019abc:	add    BYTE PTR [rax],al
 1019abe:	add    BYTE PTR [rax],al
 1019ac0:	repnz movabs ds:0xa2de000000000001,al
 1019aca:	add    DWORD PTR [rax],eax
 1019acc:	add    BYTE PTR [rax],al
 1019ace:	add    BYTE PTR [rax],al
 1019ad0:	movabs ds:0x90000000000001a2,al
 1019ad9:	movabs ds:0xa27e000000000001,al
 1019ae2:	add    DWORD PTR [rax],eax
 1019ae4:	add    BYTE PTR [rax],al
 1019ae6:	add    BYTE PTR [rax],al
 1019ae8:	mov    dh,0xa2
 1019aea:	add    DWORD PTR [rax],eax
	...
 1019af8:	xor    BYTE PTR [rdx],al
 1019afa:	push   rdx
 1019afb:	gs rex.XB ins BYTE PTR es:[edi],dx
 1019aff:	outs   dx,DWORD PTR ds:[rsi]
 1019b00:	jae    0x1019b67
 1019b02:	rex.WXB
 1019b03:	gs jns 0x1019b06
 1019b06:	(bad)  
 1019b07:	add    dl,BYTE PTR [rdx+0x65]
 1019b0a:	addr32 rex.WRXB jo 0x1019b73
 1019b0e:	outs   dx,BYTE PTR ds:[rsi]
 1019b0f:	rex.WXB
 1019b10:	gs jns 0x1019b58
 1019b13:	js     0x1019b6c
 1019b15:	add    BYTE PTR [rsi+0x2],ch
 1019b18:	push   rdx
 1019b19:	gs addr32 push rcx
 1019b1c:	jne    0x1019b83
 1019b1e:	jb     0x1019b99
 1019b20:	push   rsi
 1019b21:	(bad)  
 1019b22:	ins    BYTE PTR es:[rdi],dx
 1019b23:	jne    0x1019b8a
 1019b25:	rex.RB js 0x1019b7f
 1019b28:	add    BYTE PTR [rax],al
 1019b2a:	rex.B
 1019b2b:	rex.R push rsi
 1019b2d:	push   r8
 1019b2f:	xor    rsi,QWORD PTR [r10]
 1019b32:	cs fs ins BYTE PTR es:[rdi],dx
 1019b35:	ins    BYTE PTR es:[rdi],dx
 1019b36:	add    BYTE PTR [rax],al
 1019b38:	rex.WR add r8b,BYTE PTR [rdi+0x65]
 1019b3c:	je     0x1019b8e
 1019b3e:	jb     0x1019baf
 1019b40:	movsxd eax,DWORD PTR [rcx+0x64]
 1019b43:	fs jb  0x1019bab
 1019b46:	jae    0x1019bbb
 1019b48:	add    BYTE PTR [rax],al
 1019b4a:	mov    ah,0x3
 1019b4c:	push   rdx
 1019b4d:	(bad)  
 1019b4e:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 1019b55:	jo     0x1019bcb
 1019b57:	imul   ebp,DWORD PTR [rdi+0x6e],0xd20000
 1019b5e:	rex.R
 1019b5f:	gs ins BYTE PTR es:[rdi],dx
 1019b61:	gs je  0x1019bc9
 1019b64:	rex.XB jb 0x1019bd0
 1019b67:	je     0x1019bd2
 1019b69:	movsxd esp,DWORD PTR [rcx+0x6c]
 1019b6c:	push   rbx
 1019b6d:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1019b72:	outs   dx,BYTE PTR ds:[rsi]
 1019b73:	add    BYTE PTR [rsi],bl
 1019b75:	add    al,BYTE PTR [rdi+0x65]
 1019b78:	je     0x1019bc7
 1019b7a:	outs   dx,DWORD PTR ds:[rsi]
 1019b7b:	fs jne 0x1019bea
 1019b7e:	gs rex.W (bad) 
 1019b81:	outs   dx,BYTE PTR ds:[rsi]
 1019b82:	fs ins BYTE PTR es:[rdi],dx
 1019b84:	gs push rdi
 1019b86:	add    BYTE PTR [rax],al
 1019b88:	fild   DWORD PTR [rdx]
 1019b8a:	rex.W
 1019b8b:	gs (bad) 
 1019b8d:	jo     0x1019be2
 1019b8f:	gs je  0x1019bdb
 1019b92:	outs   dx,BYTE PTR ds:[rsi]
 1019b93:	outs   dx,WORD PTR ds:[rsi]
 1019b95:	jb     0x1019c04
 1019b97:	(bad)  
 1019b98:	je     0x1019c03
 1019b9a:	outs   dx,DWORD PTR ds:[rsi]
 1019b9b:	outs   dx,BYTE PTR ds:[rsi]
 1019b9c:	add    BYTE PTR [rax],al
 1019b9e:	mov    bl,0x4
 1019ba0:	push   rbx
 1019ba1:	gs je  0x1019bf9
 1019ba4:	outs   dx,BYTE PTR ds:[rsi]
 1019ba5:	push   0x6c646e61
 1019baa:	gs fs rex.RB js 0x1019c12
 1019baf:	gs jo  0x1019c26
 1019bb2:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1019bb9:	gs jb  0x1019bbc
 1019bbc:	retf   
 1019bbd:	add    DWORD PTR [rdi+0x65],eax
 1019bc0:	je     0x1019c05
 1019bc2:	jne    0x1019c36
 1019bc4:	jb     0x1019c2b
 1019bc6:	outs   dx,BYTE PTR ds:[rsi]
 1019bc7:	je     0x1019c1d
 1019bc9:	push   0x64616572
 1019bce:	rex.WB
 1019bcf:	add    BYTE PTR fs:[rax],al
 1019bd2:	or     BYTE PTR [rdx],al
 1019bd4:	rex.RXB
 1019bd5:	gs je  0x1019c24
 1019bd8:	(bad)  
 1019bd9:	jae    0x1019c4f
 1019bdb:	rex.RB jb 0x1019c50
 1019bde:	outs   dx,DWORD PTR ds:[rsi]
 1019bdf:	jb     0x1019be1
 1019be1:	add    dl,ch
 1019be3:	add    cl,BYTE PTR [rcx+0x6e]
 1019be6:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1019bee:	rex.XB jb 0x1019c5a
 1019bf1:	je     0x1019c5c
 1019bf3:	movsxd esp,DWORD PTR [rcx+0x6c]
 1019bf6:	push   rbx
 1019bf7:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1019bfc:	outs   dx,BYTE PTR ds:[rsi]
 1019bfd:	add    dl,dh
 1019bff:	add    BYTE PTR [rbp+0x6e],al
 1019c02:	je     0x1019c69
 1019c04:	jb     0x1019c49
 1019c06:	jb     0x1019c71
 1019c08:	je     0x1019c73
 1019c0a:	movsxd esp,DWORD PTR [rcx+0x6c]
 1019c0d:	push   rbx
 1019c0e:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1019c13:	outs   dx,BYTE PTR ds:[rsi]
 1019c14:	add    BYTE PTR [rax],al
 1019c16:	cmp    eax,DWORD PTR [rbx]
 1019c18:	rex.WR
 1019c19:	gs (bad) 
 1019c1b:	jbe    0x1019c82
 1019c1d:	rex.XB jb 0x1019c89
 1019c20:	je     0x1019c8b
 1019c22:	movsxd esp,DWORD PTR [rcx+0x6c]
 1019c25:	push   rbx
 1019c26:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1019c2b:	outs   dx,BYTE PTR ds:[rsi]
 1019c2c:	add    BYTE PTR [rax],al
 1019c2e:	push   rdx
 1019c2f:	add    BYTE PTR [rbx+0x6c],al
 1019c32:	outs   dx,DWORD PTR ds:[rsi]
 1019c33:	jae    0x1019c9a
 1019c35:	rex.W (bad) 
 1019c37:	outs   dx,BYTE PTR ds:[rsi]
 1019c38:	fs ins BYTE PTR es:[rdi],dx
 1019c3a:	add    BYTE PTR gs:[rdi+0x65724300],cl
 1019c41:	(bad)  
 1019c42:	je     0x1019ca9
 1019c44:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x4c035600
 1019c4d:	outs   dx,DWORD PTR ds:[rsi]
 1019c4e:	movsxd ebp,DWORD PTR [rbx+0x52]
 1019c51:	gs jae 0x1019cc3
 1019c54:	jne    0x1019cc8
 1019c56:	movsxd esp,DWORD PTR [rbp+0x0]
 1019c59:	add    BYTE PTR [rax+0x1],ch
 1019c5c:	rex.RX jb 0x1019cc4
 1019c5f:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 1019c68:	add    rcx,QWORD PTR [rdi+r13*2+0x63]
 1019c6d:	(bad)  
 1019c6e:	ins    BYTE PTR es:[rdi],dx
 1019c6f:	rex.RX jb 0x1019cd7
 1019c72:	gs add cl,bh
 1019c75:	add    al,0x56
 1019c77:	imul   esi,DWORD PTR [rdx+0x74],0x416c6175
 1019c7e:	ins    BYTE PTR es:[rdi],dx
 1019c7f:	ins    BYTE PTR es:[rdi],dx
 1019c80:	outs   dx,DWORD PTR ds:[rsi]
 1019c81:	movsxd eax,DWORD PTR [rbp+0x78]
 1019c84:	add    BYTE PTR [rax],al
 1019c86:	cld    
 1019c87:	add    al,0x56
 1019c89:	imul   esi,DWORD PTR [rdx+0x74],0x466c6175
 1019c90:	jb     0x1019cf7
 1019c92:	gs rex.RB js 0x1019c96
 1019c96:	(bad)  
 1019c97:	add    ecx,DWORD PTR [rdi+0x70]
 1019c9a:	outs   dx,BYTE PTR gs:[rsi]
 1019c9c:	push   rax
 1019c9d:	jb     0x1019d0e
 1019c9f:	movsxd esp,DWORD PTR [rbp+0x73]
 1019ca2:	jae    0x1019ca4
 1019ca4:	mov    BYTE PTR [rcx],0x47
 1019ca7:	gs je  0x1019ced
 1019caa:	jne    0x1019d1e
 1019cac:	jb     0x1019d13
 1019cae:	outs   dx,BYTE PTR ds:[rsi]
 1019caf:	je     0x1019d01
 1019cb1:	jb     0x1019d22
 1019cb3:	movsxd esp,DWORD PTR [rbp+0x73]
 1019cb6:	jae    0x1019cb8
 1019cb8:	test   eax,0x65724300
 1019cbd:	(bad)  
 1019cbe:	je     0x1019d25
 1019cc0:	push   rdx
 1019cc1:	gs ins DWORD PTR es:[rdi],dx
 1019cc3:	outs   dx,DWORD PTR ds:[rsi]
 1019cc4:	je     0x1019d2b
 1019cc6:	push   rsp
 1019cc7:	push   0x64616572
 1019ccc:	add    BYTE PTR [rax],al
 1019cce:	out    0x1,eax
 1019cd0:	rex.RXB
 1019cd1:	gs je  0x1019d19
 1019cd4:	js     0x1019d3f
 1019cd6:	je     0x1019d1b
 1019cd8:	outs   dx,DWORD PTR ds:[rsi]
 1019cd9:	fs gs push rsp
 1019cdc:	push   0x64616572
 1019ce1:	add    dh,al
 1019ce3:	add    edx,DWORD PTR [rdx+0x65]
 1019ce6:	(bad)  
 1019ce7:	fs push rax
 1019ce9:	jb     0x1019d5a
 1019ceb:	movsxd esp,DWORD PTR [rbp+0x73]
 1019cee:	jae    0x1019d3d
 1019cf0:	gs ins DWORD PTR es:[rdi],dx
 1019cf2:	outs   dx,DWORD PTR ds:[rsi]
 1019cf3:	jb     0x1019d6e
 1019cf5:	add    BYTE PTR [rip+0x69725705],bh        # 0x6a73f400
 1019cfb:	je     0x1019d62
 1019cfd:	push   rax
 1019cfe:	jb     0x1019d6f
 1019d00:	movsxd esp,DWORD PTR [rbp+0x73]
 1019d03:	jae    0x1019d52
 1019d05:	gs ins DWORD PTR es:[rdi],dx
 1019d07:	outs   dx,DWORD PTR ds:[rsi]
 1019d08:	jb     0x1019d83
 1019d0a:	add    BYTE PTR [rax],al
 1019d0c:	enter  0x5304,0x75
 1019d10:	jae    0x1019d82
 1019d12:	outs   dx,BYTE PTR gs:[rsi]
 1019d14:	fs push rsp
 1019d16:	push   0x64616572
 1019d1b:	add    BYTE PTR [rsi],dl
 1019d1d:	add    al,0x52
 1019d1f:	gs jae 0x1019d97
 1019d22:	ins    DWORD PTR es:[rdi],dx
 1019d23:	gs push rsp
 1019d25:	push   0x64616572
 1019d2a:	add    BYTE PTR [rax],al
 1019d2c:	or     BYTE PTR [rip+0x74696157],al        # 0x756afe89
 1019d32:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1019d34:	jb     0x1019d89
 1019d36:	imul   ebp,DWORD PTR [rsi+0x67],0x624f656c
 1019d3d:	push   0x65
 1019d3f:	movsxd esi,DWORD PTR [rax+rax*1+0x43]
 1019d43:	add    ecx,DWORD PTR [rdi+rbp*2+0x61]
 1019d47:	fs push rdx
 1019d49:	gs jae 0x1019dbb
 1019d4c:	jne    0x1019dc0
 1019d4e:	movsxd esp,DWORD PTR [rbp+0x0]
 1019d51:	add    BYTE PTR [rdi+0x7a695304],bh
 1019d57:	outs   dx,DWORD PTR gs:[rsi]
 1019d59:	push   dx
 1019d5b:	gs jae 0x1019dcd
 1019d5e:	jne    0x1019dd2
 1019d60:	movsxd esp,DWORD PTR [rbp+0x0]
 1019d63:	add    BYTE PTR [rcx+rax*1+0x46],ah
 1019d67:	outs   dx,DWORD PTR ds:[rsi]
 1019d68:	jb     0x1019dd7
 1019d6a:	(bad)  
 1019d6b:	je     0x1019dba
 1019d6d:	gs jae 0x1019de3
 1019d70:	(bad)  
 1019d71:	addr32 gs push rdi
 1019d74:	add    BYTE PTR [rax],al
 1019d76:	rex add ecx,DWORD PTR [rdi+rbp*2+0x61]
 1019d7b:	imul   r12,QWORD PTR fs:[rdx+0x72],0x45797261
 1019d84:	js     0x1019ddd
 1019d86:	add    BYTE PTR [rax],al
 1019d88:	push   rsp
 1019d89:	add    DWORD PTR [rsi+0x69],eax
 1019d8c:	outs   dx,BYTE PTR ds:[rsi]
 1019d8d:	fs push rdx
 1019d8f:	gs jae 0x1019e01
 1019d92:	jne    0x1019e06
 1019d94:	movsxd esp,DWORD PTR [rbp+0x57]
 1019d97:	add    BYTE PTR [rbx+0x1],dl
 1019d9a:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x6f736552
 1019da2:	jne    0x1019e16
 1019da4:	movsxd esp,DWORD PTR [rbp+0x45]
 1019da7:	js     0x1019e00
 1019da9:	add    BYTE PTR [rcx+0x5],ah
 1019dac:	ins    BYTE PTR es:[rdi],dx
 1019dad:	jae    0x1019e23
 1019daf:	jb     0x1019e1d
 1019db1:	outs   dx,BYTE PTR gs:[rsi]
 1019db3:	push   rdi
 1019db4:	add    BYTE PTR [rax],al
 1019db6:	sahf   
 1019db7:	add    al,BYTE PTR [rdi+0x65]
 1019dba:	je     0x1019e10
 1019dbc:	imul   ebp,DWORD PTR [rbp+0x65],0x6d726f46
 1019dc3:	(bad)  
 1019dc4:	je     0x1019e1d
 1019dc6:	add    BYTE PTR [rax],al
 1019dc8:	iret   
 1019dc9:	add    DWORD PTR [rdi+0x65],eax
 1019dcc:	je     0x1019e12
 1019dce:	(bad)  
 1019dcf:	je     0x1019e36
 1019dd1:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1019dd3:	jb     0x1019e42
 1019dd5:	(bad)  
 1019dd6:	je     0x1019e2f
 1019dd8:	add    BYTE PTR [rax],al
 1019dda:	test   DWORD PTR [rcx],0x46746547
 1019de0:	imul   ebp,DWORD PTR [rbp+riz*2+0x53],0x657a69
 1019de8:	xor    al,0x5
 1019dea:	push   rdi
 1019deb:	jb     0x1019e56
 1019ded:	je     0x1019e54
 1019def:	imul   r13d,DWORD PTR [rbp+r12*2+0x0],0x655203c3
 1019df8:	(bad)  
 1019df9:	imul   r13d,DWORD PTR fs:[rbp+r12*2+0x0],0x4701f100
 1019e03:	gs je  0x1019e4c
 1019e06:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
 1019e0e:	(bad)  
 1019e0f:	jne    0x1019e85
 1019e11:	gs jae 0x1019e6b
 1019e14:	add    BYTE PTR [rax],al
 1019e16:	xlat   BYTE PTR ds:[rbx]
 1019e17:	add    BYTE PTR [rbp+riz*2+0x6c],al
 1019e1b:	gs je  0x1019e83
 1019e1e:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x43007500
 1019e27:	outs   dx,DWORD PTR ds:[rsi]
 1019e28:	jo     0x1019ea3
 1019e2a:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x4d036200
 1019e33:	outs   dx,DWORD PTR ds:[rsi]
 1019e34:	jbe    0x1019e9b
 1019e36:	imul   r13d,DWORD PTR [rbp+r12*2+0x45],0x69005778
 1019e3f:	add    ecx,DWORD PTR [rbp+0x75]
 1019e42:	ins    BYTE PTR es:[rdi],dx
 1019e43:	je     0x1019eae
 1019e45:	rex.X jns 0x1019ebc
 1019e48:	gs push rsp
 1019e4a:	outs   dx,DWORD PTR ds:[rsi]
 1019e4b:	push   rdi
 1019e4c:	imul   esp,DWORD PTR [rbp+riz*2+0x43],0x726168
 1019e54:	rex.WXB
 1019e55:	rex.RB push r10
 1019e57:	rex.WRX
 1019e58:	rex.RB
 1019e59:	xor    r14,QWORD PTR [rdx]
 1019e5c:	cs fs ins BYTE PTR es:[rdi],dx
 1019e5f:	ins    BYTE PTR es:[rdi],dx
 1019e60:	add    BYTE PTR [rax],al
 1019e62:	add    BYTE PTR gs:[rdi],bh
 1019e65:	(bad)  
 1019e66:	xor    eax,DWORD PTR [rax+0x59]
 1019e69:	pop    r8
 1019e6b:	push   rax
 1019e6c:	rex.RB
 1019e6d:	pop    r8
 1019e6f:	rex pop rdx
 1019e71:	add    BYTE PTR [rbx+0x5],ah
 1019e74:	data16 jb 0x1019edc
 1019e77:	add    BYTE PTR gs:[rax],al
 1019e7a:	jp     0x1019e7c
 1019e7c:	(bad)  
 1019e7d:	(bad)  
 1019e7e:	pop    rdi
 1019e7f:	push   rsi
 1019e80:	rex pop rcx
 1019e82:	pop    r8
 1019e84:	push   rax
 1019e85:	rex.RB
 1019e86:	pop    r8
 1019e88:	rex pop rdx
 1019e8a:	add    BYTE PTR [rax],al
 1019e8c:	(bad)  
 1019e8d:	add    DWORD PTR [rdi+0x43],ebx
 1019e90:	js     0x1019f0a
 1019e92:	push   rsp
 1019e93:	push   0x45776f72
 1019e98:	js     0x1019efd
 1019e9a:	gs jo  0x1019f11
 1019e9d:	imul   ebp,DWORD PTR [rdi+0x6e],0x1540000
 1019ea4:	pop    rdi
 1019ea5:	pop    rdi
 1019ea6:	imul   ebp,DWORD PTR [rdi+0x62],0x6e75665f
 1019ead:	movsxd eax,DWORD PTR [rax]
 1019eaf:	add    BYTE PTR [rsi],cl
 1019eb1:	add    bl,BYTE PTR [rdi+0x66]
 1019eb4:	imul   ebp,DWORD PTR [rbp+riz*2+0x6e],0x5f1006f
 1019ebc:	jae    0x1019f35
 1019ebe:	jo     0x1019f32
 1019ec0:	imul   ebp,DWORD PTR [rsi+0x74],0x735f66
 1019ec7:	add    dh,dh
 1019ec9:	add    DWORD PTR [rdi+0x65],ebx
 1019ecc:	outs   dx,DWORD PTR ds:[rsi]
 1019ecd:	data16 add BYTE PTR [rax],al
 1019ed0:	lods   eax,DWORD PTR ds:[rsi]
 1019ed1:	add    eax,0x736d656d
 1019ed6:	gs je  0x1019ed9
 1019ed9:	add    BYTE PTR [rbx+0x0],ah
 1019edc:	(bad)  
 1019edd:	(bad)  
 1019ede:	xor    al,BYTE PTR [rax+0x59]
 1019ee1:	push   r8
 1019ee3:	rex.RB
 1019ee4:	pop    r8
 1019ee6:	pop    rdi
 1019ee7:	rex.WXB
 1019ee8:	rex pop rdx
 1019eea:	add    BYTE PTR [rax],al
 1019eec:	add    BYTE PTR [rsi],al
 1019eee:	je     0x1019f5f
 1019ef0:	ja     0x1019f67
 1019ef2:	jo     0x1019f64
 1019ef4:	gs jb  0x1019ef7
 1019ef7:	add    BYTE PTR [rdx+0x6d656d05],ch
 1019efd:	movsxd esi,DWORD PTR [rax+0x79]
 1019f00:	pop    rdi
 1019f01:	jae    0x1019f03
 1019f03:	add    BYTE PTR [rbp+rax*1+0x6d6d656d],ch
 1019f0a:	outs   dx,DWORD PTR ds:[rsi]
 1019f0b:	jbe    0x1019f72
 1019f0d:	pop    rdi
 1019f0e:	jae    0x1019f10
 1019f10:	stos   DWORD PTR es:[rdi],eax
 1019f11:	add    eax,0x6d6d656d
 1019f16:	outs   dx,DWORD PTR ds:[rsi]
 1019f17:	jbe    0x1019f7e
 1019f19:	add    BYTE PTR [rdx],dl
 1019f1b:	(bad)  
 1019f1c:	ja     0x1019f81
 1019f1e:	jae    0x1019f83
 1019f20:	push   0x1e000072
 1019f25:	add    eax,0x6f74775f
 1019f2a:	imul   eax,DWORD PTR [rax],0x727005b3
 1019f30:	imul   ebp,DWORD PTR [rsi+0x74],0x71000066
 1019f37:	add    bl,BYTE PTR [rdi+0x67]
 1019f3a:	gs je  0x1019fb4
 1019f3d:	movsxd ebp,DWORD PTR [rax+0x65]
 1019f40:	add    BYTE PTR [rax],al
 1019f42:	xor    DWORD PTR [rsi],eax
 1019f44:	ja     0x1019fb3
 1019f46:	gs ins DWORD PTR es:[rdi],dx
 1019f48:	movsxd esi,DWORD PTR [rax+0x79]
 1019f4b:	pop    rdi
 1019f4c:	jae    0x1019f4e
 1019f4e:	js     0x1019f50
 1019f50:	(bad)  
 1019f51:	(bad)  
 1019f52:	pop    rdi
 1019f53:	push   rbp
 1019f54:	rex pop rcx
 1019f56:	push   r8
 1019f58:	rex.RB
 1019f59:	pop    r8
 1019f5b:	pop    rdi
 1019f5c:	rex.WXB
 1019f5d:	rex pop rdx
 1019f5f:	add    BYTE PTR [rdx],ah
 1019f61:	add    BYTE PTR [rdi],bh
 1019f63:	(bad)  
 1019f64:	xor    BYTE PTR [rbp+0x78],ah
 1019f67:	movsxd esp,DWORD PTR [rbp+0x70]
 1019f6a:	je     0x1019fd5
 1019f6c:	outs   dx,DWORD PTR ds:[rsi]
 1019f6d:	outs   dx,BYTE PTR ds:[rsi]
 1019f6e:	rex jae 0x1019fe5
 1019f71:	fs rex
 1019f73:	rex push rcx
 1019f75:	rex.RB
 1019f76:	rex.B
 1019f77:	rex.B
 1019f78:	rex
 1019f79:	rex.B
 1019f7a:	rex.RB
 1019f7b:	rex.X push rcx
 1019f7d:	rex.RB
 1019f7e:	rex.X
 1019f7f:	rex.R
 1019f80:	rex pop rdx
 1019f82:	add    BYTE PTR [rax],al
 1019f84:	and    al,0x0
 1019f86:	(bad)  
 1019f87:	(bad)  
 1019f88:	xor    BYTE PTR [rbp+0x78],ah
 1019f8b:	movsxd esp,DWORD PTR [rbp+0x70]
 1019f8e:	je     0x1019ff9
 1019f90:	outs   dx,DWORD PTR ds:[rsi]
 1019f91:	outs   dx,BYTE PTR ds:[rsi]
 1019f92:	rex jae 0x101a009
 1019f95:	fs rex
 1019f97:	rex push rcx
 1019f99:	rex.RB
 1019f9a:	rex.B
 1019f9b:	rex.B
 1019f9c:	rex
 1019f9d:	rex.B
 1019f9e:	rex.RB
 1019f9f:	rex.X push rsi
 1019fa1:	xor    BYTE PTR [rcx],dh
 1019fa3:	rex
 1019fa4:	rex pop rdx
 1019fa6:	add    BYTE PTR [rax],al
 1019fa8:	pop    rbp
 1019fa9:	add    BYTE PTR [rdi],bh
 1019fab:	(bad)  
 1019fac:	xor    DWORD PTR [rbp+0x78],esp
 1019faf:	movsxd esp,DWORD PTR [rbp+0x70]
 1019fb2:	je     0x101a01d
 1019fb4:	outs   dx,DWORD PTR ds:[rsi]
 1019fb5:	outs   dx,BYTE PTR ds:[rsi]
 1019fb6:	rex jae 0x101a02d
 1019fb9:	fs rex
 1019fbb:	rex push rbp
 1019fbd:	rex.RB
 1019fbe:	rex.B
 1019fbf:	rex.B
 1019fc0:	rex pop rax
 1019fc2:	pop    rdx
 1019fc3:	add    BYTE PTR [rdx],cl
 1019fc5:	add    DWORD PTR [rdi],edi
 1019fc7:	ja     0x101a031
 1019fc9:	(bad)  
 1019fca:	je     0x101a00c
 1019fcc:	gs js  0x101a032
 1019fcf:	gs jo  0x101a046
 1019fd2:	imul   ebp,DWORD PTR [rdi+0x6e],0x64747340
 1019fd9:	rex
 1019fda:	rex push rbp
 1019fdc:	rex.RB
 1019fdd:	rex.X
 1019fde:	push   r8
 1019fe0:	rex.RB
 1019fe1:	rex.X
 1019fe2:	rex.R pop rax
 1019fe4:	pop    rdx
 1019fe5:	add    BYTE PTR [rax],ch
 1019fe7:	add    DWORD PTR [rdi+0x5f],ebx
 1019fea:	rex.XB js 0x101a065
 1019fed:	rex.RX jb 0x101a051
 1019ff0:	ins    DWORD PTR es:[rdi],dx
 1019ff1:	gs rex.W (bad) 
 1019ff4:	outs   dx,BYTE PTR ds:[rsi]
 1019ff5:	fs ins BYTE PTR es:[rdi],dx
 1019ff7:	gs jb  0x101a02d
 1019ffa:	add    BYTE PTR [rax],al
 1019ffc:	test   eax,0x6d656d05
 101a001:	movsxd esi,DWORD PTR [rax+0x79]
 101a004:	add    BYTE PTR [rax],al
 101a006:	xchg   ecx,eax
 101a007:	add    eax,0x78777369
 101a00c:	imul   esp,DWORD PTR fs:[rdi+0x69],0x62c0074
 101a014:	ja     0x101a079
 101a016:	jae    0x101a08c
 101a018:	outs   dx,DWORD PTR ds:[rsi]
 101a019:	jne    0x101a087
 101a01b:	add    BYTE PTR [rsi+0x6d615f01],bl
 101a021:	jae    0x101a08a
 101a023:	pop    rdi
 101a024:	gs js  0x101a090
 101a027:	je     0x101a029
 101a029:	add    BYTE PTR [rax+0x775f5f01],dl
 101a02f:	addr32 gs je 0x101a0a0
 101a033:	(bad)  
 101a034:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 101a03b:	add    BYTE PTR [rsi],bl
 101a03d:	add    DWORD PTR [rdi+0x5f],ebx
 101a040:	rex.XB pop r15
 101a042:	jae    0x101a0b4
 101a044:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 101a048:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 101a04f:	ins    BYTE PTR es:[rdi],dx
 101a050:	gs jb  0x101a053
 101a053:	add    BYTE PTR [rdx],bl
 101a055:	add    DWORD PTR [rdi+0x58],ebx
 101a058:	movsxd esi,DWORD PTR [rax+0x74]
 101a05b:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 101a064:	pop    rdi
 101a065:	gs js  0x101a0d1
 101a068:	je     0x101a06a
 101a06a:	mov    ch,0x1
 101a06c:	pop    rdi
 101a06d:	movsxd esp,DWORD PTR [rbp+0x78]
 101a070:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 101a078:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0191
 101a080:	ja     0x101a0eb
 101a082:	outs   dx,BYTE PTR ds:[rsi]
 101a083:	imul   esi,DWORD PTR [rbp+riz*2+0x6e],0x86000076
 101a08b:	add    bl,BYTE PTR [rdi+0x69]
 101a08e:	outs   dx,BYTE PTR ds:[rsi]
 101a08f:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 101a097:	add    bl,BYTE PTR [rdi+0x69]
 101a09a:	outs   dx,BYTE PTR ds:[rsi]
 101a09b:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 101a0a3:	add    ch,al
 101a0a5:	add    DWORD PTR [rdi+0x63],ebx
 101a0a8:	outs   dx,DWORD PTR ds:[rsi]
 101a0a9:	outs   dx,BYTE PTR ds:[rsi]
 101a0aa:	imul   sp,WORD PTR [rdi+0x74],0x7268
 101a0b0:	gs (bad) 
 101a0b2:	fs ins BYTE PTR es:[rdi],dx
 101a0b4:	outs   dx,DWORD PTR ds:[rsi]
 101a0b5:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a0b8:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 101a0bd:	pop    rdi
 101a0be:	jae    0x101a125
 101a0c0:	je     0x101a137
 101a0c2:	jae    0x101a129
 101a0c4:	jb     0x101a133
 101a0c6:	(bad)  
 101a0c7:	je     0x101a131
 101a0c9:	gs jb  0x101a13e
 101a0cc:	add    BYTE PTR [rax],al
 101a0ce:	(bad)
 101a0d2:	outs   dx,DWORD PTR ds:[rsi]
 101a0d3:	ins    DWORD PTR es:[rdi],dx
 101a0d4:	ins    DWORD PTR es:[rdi],dx
 101a0d5:	outs   dx,DWORD PTR ds:[rsi]
 101a0d6:	fs add BYTE PTR gs:[rax],al
 101a0da:	sbb    al,0x2
 101a0dc:	pop    rdi
 101a0dd:	ins    WORD PTR es:[rdi],dx
 101a0df:	outs   dx,DWORD PTR ds:[rsi]
 101a0e0:	fs add BYTE PTR gs:[rax],al
 101a0e4:	jns    0x101a0e7
 101a0e6:	pop    rdi
 101a0e7:	pop    rdi
 101a0e8:	jae    0x101a14f
 101a0ea:	je     0x101a14b
 101a0ec:	(bad)  
 101a0ed:	jo     0x101a15f
 101a0ef:	pop    rdi
 101a0f0:	je     0x101a16b
 101a0f2:	jo     0x101a159
 101a0f4:	add    BYTE PTR [rax],al
 101a0f6:	rex.WRB push r11
 101a0f8:	push   rsi
 101a0f9:	rex.XB push r10
 101a0fb:	xor    DWORD PTR [rax],esi
 101a0fd:	xor    BYTE PTR [rsi],ch
 101a0ff:	fs ins BYTE PTR es:[rdi],dx
 101a101:	ins    BYTE PTR es:[rdi],dx
 101a102:	add    BYTE PTR [rax],al
 101a104:	add    BYTE PTR [rcx],al
 101a106:	(bad)  
 101a107:	je     0x101a16e
 101a109:	jb     0x101a178
 101a10b:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 101a112:	pop    rcx
 101a113:	pop    r8
 101a115:	pop    rax
 101a116:	pop    rdx
 101a117:	add    BYTE PTR [rsi+0x1],al
 101a11a:	pop    rdi
 101a11b:	pop    rdi
 101a11c:	movsxd esi,DWORD PTR [rdx+0x74]
 101a11f:	pop    rdi
 101a120:	fs gs (bad) 
 101a123:	jne    0x101a18c
 101a125:	addr32 gs jb 0x101a188
 101a129:	push   0x6b6f6f
 101a12e:	pop    rbx
 101a12f:	add    al,0x5f
 101a131:	jne    0x101a1a1
 101a133:	ins    BYTE PTR es:[rdi],dx
 101a134:	outs   dx,DWORD PTR ds:[rsi]
 101a135:	movsxd ebp,DWORD PTR [rbx+0x0]
 101a138:	add    QWORD PTR [rdi+0x5f],rbx
 101a13c:	fs ins BYTE PTR es:[rdi],dx
 101a13e:	ins    BYTE PTR es:[rdi],dx
 101a13f:	outs   dx,DWORD PTR ds:[rsi]
 101a140:	outs   dx,BYTE PTR ds:[rsi]
 101a141:	gs js  0x101a1ad
 101a144:	je     0x101a146
 101a146:	test   BYTE PTR [rdx],0x5f
 101a149:	ins    BYTE PTR es:[rdi],dx
 101a14a:	outs   dx,DWORD PTR ds:[rsi]
 101a14b:	movsxd ebp,DWORD PTR [rbx+0x0]
 101a14e:	popf   
 101a14f:	add    ebx,DWORD PTR [rdi+0x6f]
 101a152:	outs   dx,BYTE PTR ds:[rsi]
 101a153:	gs js  0x101a1bf
 101a156:	je     0x101a158
 101a158:	out    dx,al
 101a159:	add    BYTE PTR [rdi],bh
 101a15b:	pop    rdi
 101a15c:	je     0x101a1d7
 101a15e:	jo     0x101a1c5
 101a160:	pop    rdi
 101a161:	imul   ebp,DWORD PTR [rsi+0x66],0x74645f6f
 101a168:	outs   dx,DWORD PTR ds:[rsi]
 101a169:	jb     0x101a1ca
 101a16b:	imul   ebp,DWORD PTR [rsi+0x74],0x616e7265
 101a172:	ins    BYTE PTR es:[rdi],dx
 101a173:	pop    rdi
 101a174:	ins    DWORD PTR es:[rdi],dx
 101a175:	gs je  0x101a1e0
 101a178:	outs   dx,DWORD PTR ds:[rsi]
 101a179:	fs rex je 0x101a1f6
 101a17d:	jo     0x101a1e4
 101a17f:	pop    rdi
 101a180:	imul   ebp,DWORD PTR [rsi+0x66],0x5140406f
 101a187:	rex.RB
 101a188:	rex.B
 101a189:	pop    r8
 101a18b:	pop    rax
 101a18c:	pop    rdx
 101a18d:	add    BYTE PTR [rax+0x0],ah
 101a190:	(bad)  
 101a191:	(bad)  
 101a192:	xor    BYTE PTR [rdi+0x4c],bl
 101a195:	outs   dx,DWORD PTR ds:[rsi]
 101a196:	movsxd ebp,DWORD PTR [rbx+0x69]
 101a199:	je     0x101a1db
 101a19b:	jae    0x101a211
 101a19d:	fs rex
 101a19f:	rex push rcx
 101a1a1:	rex.RB
 101a1a2:	rex.B
 101a1a3:	rex.B
 101a1a4:	rex
 101a1a5:	rex.W
 101a1a6:	rex pop rdx
 101a1a8:	add    BYTE PTR [rax],al
 101a1aa:	sahf   
 101a1ab:	add    BYTE PTR [rdi],bh
 101a1ad:	(bad)  
 101a1ae:	xor    DWORD PTR [rdi+0x4c],ebx
 101a1b1:	outs   dx,DWORD PTR ds:[rsi]
 101a1b2:	movsxd ebp,DWORD PTR [rbx+0x69]
 101a1b5:	je     0x101a1f7
 101a1b7:	jae    0x101a22d
 101a1b9:	fs rex
 101a1bb:	rex push rcx
 101a1bd:	rex.RB
 101a1be:	rex.B
 101a1bf:	rex.B
 101a1c0:	rex pop rax
 101a1c2:	pop    rdx
 101a1c3:	add    BYTE PTR [rdx+rax*1+0x6c585f3f],cl
 101a1ca:	outs   dx,BYTE PTR gs:[rsi]
 101a1cc:	addr32 je 0x101a237
 101a1cf:	pop    rdi
 101a1d0:	gs jb  0x101a245
 101a1d3:	outs   dx,DWORD PTR ds:[rsi]
 101a1d4:	jb     0x101a216
 101a1d6:	jae    0x101a24c
 101a1d8:	fs rex
 101a1da:	rex pop rcx
 101a1dc:	pop    r8
 101a1de:	push   rax
 101a1df:	rex.RB
 101a1e0:	rex.X
 101a1e1:	rex.R
 101a1e2:	rex pop rdx
 101a1e4:	add    BYTE PTR [rax],al
 101a1e6:	mov    es,WORD PTR [rdx]
 101a1e8:	(bad)  
 101a1e9:	pop    rdi
 101a1ea:	pop    rax
 101a1eb:	outs   dx,DWORD PTR ds:[rsi]
 101a1ec:	jne    0x101a262
 101a1ee:	pop    rdi
 101a1ef:	outs   dx,DWORD PTR ds:[rsi]
 101a1f0:	pop    di
 101a1f2:	jb     0x101a255
 101a1f4:	outs   dx,BYTE PTR ds:[rsi]
 101a1f5:	addr32 gs rex jae 0x101a26e
 101a1fa:	fs rex
 101a1fc:	rex pop rcx
 101a1fe:	pop    r8
 101a200:	push   rax
 101a201:	rex.RB
 101a202:	rex.X
 101a203:	rex.R
 101a204:	rex pop rdx
 101a206:	add    BYTE PTR [rax],al
 101a208:	sahf   
 101a209:	add    DWORD PTR [rdi],edi
 101a20b:	pop    rdi
 101a20c:	rex.R
 101a20d:	movsxd esi,DWORD PTR gs:[rdx+0x65]
 101a211:	data16 rex
 101a213:	data16 (bad) 
 101a215:	movsxd esp,DWORD PTR [rbp+0x74]
 101a218:	rex ins BYTE PTR es:[rdi],dx
 101a21a:	outs   dx,DWORD PTR ds:[rsi]
 101a21b:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a21e:	gs rex jae 0x101a296
 101a222:	fs rex
 101a224:	rex push rcx
 101a226:	rex.RB
 101a227:	rex.B
 101a228:	push   r8
 101a22a:	rex.RB
 101a22b:	push   r14
 101a22d:	xor    DWORD PTR [rdx],esi
 101a22f:	xor    eax,DWORD PTR [rax+0x58]
 101a232:	pop    rdx
 101a233:	add    BYTE PTR [rcx+0x2],dl
 101a236:	(bad)  
 101a237:	pop    rdi
 101a238:	rex.WRXB jb 0x101a2ab
 101a23b:	push   0x615f6e61
 101a240:	ins    BYTE PTR es:[rdi],dx
 101a241:	ins    BYTE PTR es:[rdi],dx
 101a242:	rex pop rdi
 101a244:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101a246:	outs   dx,BYTE PTR ds:[rsi]
 101a247:	je     0x101a2aa
 101a249:	imul   ebp,DWORD PTR [rsi+0x65],0x61625f72
 101a250:	jae    0x101a2b7
 101a252:	xor    BYTE PTR [rax+0x73],al
 101a255:	je     0x101a2bb
 101a257:	rex
 101a258:	rex push rcx
 101a25a:	rex.RB
 101a25b:	rex.B
 101a25c:	pop    r8
 101a25e:	pop    rax
 101a25f:	pop    rdx
 101a260:	add    BYTE PTR [rax],al
 101a262:	rex.WRB push r11
 101a264:	push   rsi
 101a265:	rex.XB push r8
 101a267:	xor    DWORD PTR [rax],esi
 101a269:	xor    BYTE PTR [rsi],ch
 101a26b:	fs ins BYTE PTR es:[rdi],dx
 101a26d:	ins    BYTE PTR es:[rdi],dx
 101a26e:	add    BYTE PTR [rax],al
 101a270:	rex.WRXB
 101a271:	rex.WR
 101a272:	rex.RB
 101a273:	push   r13
 101a275:	push   rsp
 101a276:	xor    esi,DWORD PTR [rdx]
 101a278:	cs fs ins BYTE PTR es:[rdi],dx
 101a27b:	ins    BYTE PTR es:[rdi],dx
 101a27c:	add    BYTE PTR [rax],al
 101a27e:	jo     0x101a280
 101a280:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101a282:	push   rbp
 101a283:	outs   dx,BYTE PTR ds:[rsi]
 101a284:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
 101a28b:	imul   edi,DWORD PTR [rdx+0x65],0x430000
 101a292:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101a294:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101a296:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 101a29e:	rex.RB js 0x101a2a1
 101a2a1:	add    BYTE PTR [rax+rax*1],dl
 101a2a4:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101a2a6:	rex.XB jb 0x101a30e
 101a2a9:	(bad)  
 101a2aa:	je     0x101a311
 101a2ac:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101a2ae:	jae    0x101a324
 101a2b0:	(bad)  
 101a2b1:	outs   dx,BYTE PTR ds:[rsi]
 101a2b2:	movsxd esp,DWORD PTR [rbp+0x0]
 101a2b5:	add    BYTE PTR [rbp+0x72745301],dh
 101a2bb:	imul   ebp,DWORD PTR [rsi+0x67],0x6d6f7246
 101a2c2:	rex.RXB push r13
 101a2c4:	rex.WB
 101a2c5:	xor    r8b,BYTE PTR [rax]
 101a2c8:	push   rbx
 101a2c9:	add    BYTE PTR [rbx+0x6f],al
 101a2cc:	push   rcx
 101a2cd:	jne    0x101a334
 101a2cf:	jb     0x101a34a
 101a2d1:	push   rax
 101a2d2:	jb     0x101a343
 101a2d4:	js     0x101a34f
 101a2d6:	rex.X ins BYTE PTR es:[rdi],dx
 101a2d8:	(bad)  
 101a2d9:	outs   dx,BYTE PTR ds:[rsi]
 101a2da:	imul   esp,DWORD PTR [rbp+0x74],0x0
 101a2de:	add    BYTE PTR [ebx+0x6f],al
 101a2e2:	push   rbx
 101a2e3:	gs je  0x101a336
 101a2e6:	jb     0x101a357
 101a2e8:	js     0x101a363
 101a2ea:	rex.X ins BYTE PTR es:[rdi],dx
 101a2ec:	(bad)  
 101a2ed:	outs   dx,BYTE PTR ds:[rsi]
 101a2ee:	imul   esp,DWORD PTR [rbp+0x74],0x0
 101a2f2:	adc    eax,0x436f4300
 101a2f7:	jb     0x101a35e
 101a2f9:	(bad)  
 101a2fa:	je     0x101a361
 101a2fc:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101a2fe:	jae    0x101a374
 101a300:	(bad)  
 101a301:	outs   dx,BYTE PTR ds:[rsi]
 101a302:	movsxd esp,DWORD PTR [rbp+0x45]
 101a305:	js     0x101a307
 101a307:	add    BYTE PTR [rax+rax*1],cl
 101a30a:	rex.XB
 101a30b:	rex.WR push rbx
 101a30d:	rex.WB
 101a30e:	rex.R
 101a30f:	rex.RX jb 0x101a381
 101a312:	ins    DWORD PTR es:[rdi],dx
 101a313:	push   rbx
 101a314:	je     0x101a388
 101a316:	imul   ebp,DWORD PTR [rsi+0x67],0x656c6f00
 101a31d:	xor    esi,DWORD PTR [rdx]
 101a31f:	cs fs ins BYTE PTR es:[rdi],dx
 101a322:	ins    BYTE PTR es:[rdi],dx
 101a323:	add    BYTE PTR [rax+rax*1],al
 101a326:	rex.RB outs dx,BYTE PTR ds:[rsi]
 101a328:	jne    0x101a397
 101a32a:	push   rax
 101a32b:	jb     0x101a39c
 101a32d:	movsxd esp,DWORD PTR [rbp+0x73]
 101a330:	jae    0x101a37f
 101a332:	outs   dx,DWORD PTR ds:[rsi]
 101a333:	fs jne 0x101a3a2
 101a336:	gs jae 0x101a339
 101a339:	add    BYTE PTR [rax],dl
 101a33b:	add    BYTE PTR [rdi+0x65],al
 101a33e:	je     0x101a38d
 101a340:	outs   dx,DWORD PTR ds:[rsi]
 101a341:	fs jne 0x101a3b0
 101a344:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x45656d61
 101a34e:	js     0x101a3a7
 101a350:	add    BYTE PTR [rax],al
 101a352:	adc    DWORD PTR [rax],eax
 101a354:	rex.RXB
 101a355:	gs je  0x101a3a5
 101a358:	outs   dx,DWORD PTR ds:[rsi]
 101a359:	fs jne 0x101a3c8
 101a35c:	rex.WB outs dx,BYTE PTR gs:[rsi]
 101a35f:	outs   dx,WORD PTR ds:[rsi]
 101a361:	jb     0x101a3d0
 101a363:	(bad)  
 101a364:	je     0x101a3cf
 101a366:	outs   dx,DWORD PTR ds:[rsi]
 101a367:	outs   dx,BYTE PTR ds:[rsi]
 101a368:	add    BYTE PTR [rax],al
 101a36a:	push   rax
 101a36b:	push   rbx
 101a36c:	push   r8
 101a36e:	rex.WB
 101a36f:	cs rex.R
 101a371:	rex.WR
 101a372:	rex.WR add BYTE PTR [rbx],r10b
 101a375:	add    BYTE PTR [rdi],bh
 101a377:	push   rax
 101a378:	(bad)  
 101a379:	jb     0x101a3ee
 101a37b:	gs jb  0x101a3c1
 101a37e:	outs   dx,DWORD PTR ds:[rsi]
 101a37f:	outs   dx,BYTE PTR ds:[rsi]
 101a380:	jae    0x101a3f1
 101a382:	ins    BYTE PTR es:[rdi],dx
 101a383:	gs push rax
 101a385:	(bad)  
 101a386:	jae    0x101a3fb
 101a388:	ja     0x101a3f9
 101a38a:	jb     0x101a3f0
 101a38c:	push   rax
 101a38d:	jb     0x101a3fe
 101a38f:	ins    DWORD PTR es:[rdi],dx
 101a390:	jo     0x101a406
 101a392:	rex
 101a393:	rex pop rcx
 101a395:	pop    r8
 101a397:	rex.W push rax
 101a399:	rex.RB
 101a39a:	push   r14
 101a39c:	(bad)  
 101a39d:	and    al,0x62
 101a39f:	(bad)  
 101a3a0:	jae    0x101a40b
 101a3a2:	movsxd ebx,DWORD PTR [rdi+0x73]
 101a3a5:	je     0x101a419
 101a3a7:	imul   ebp,DWORD PTR [rsi+0x67],0x3f554740
 101a3ae:	and    al,0x63
 101a3b0:	push   0x745f7261
 101a3b5:	jb     0x101a418
 101a3b7:	imul   esi,DWORD PTR [rbx+rsi*2+0x40],0x74734047
 101a3bf:	fs rex
 101a3c1:	rex push rsi
 101a3c3:	(bad)  
 101a3c4:	and    al,0x61
 101a3c6:	ins    BYTE PTR es:[rdi],dx
 101a3c7:	ins    BYTE PTR es:[rdi],dx
 101a3c8:	outs   dx,DWORD PTR ds:[rsi]
 101a3c9:	movsxd esp,DWORD PTR [rcx+0x74]
 101a3cc:	outs   dx,DWORD PTR ds:[rsi]
 101a3cd:	jb     0x101a40f
 101a3cf:	rex.RXB
 101a3d0:	xor    al,BYTE PTR [rax+0x40]
 101a3d4:	jae    0x101a44a
 101a3d6:	fs rex
 101a3d8:	rex push rax
 101a3da:	rex.RB
 101a3db:	pop    r8
 101a3dd:	rex pop rdx
 101a3df:	add    BYTE PTR [rax],al
 101a3e1:	add    BYTE PTR [rdi],bh
 101a3e3:	(bad)  
 101a3e4:	xor    BYTE PTR [rbx+0x50],al
 101a3e7:	(bad)  
 101a3e8:	jb     0x101a45d
 101a3ea:	gs jb  0x101a42d
 101a3ed:	rex push rcx
 101a3ef:	rex.RB
 101a3f0:	rex.B
 101a3f1:	rex.B
 101a3f2:	rex pop rax
 101a3f4:	pop    rdx
 101a3f5:	add    BYTE PTR [rcx],al
 101a3f7:	add    BYTE PTR [rdi],bh
 101a3f9:	(bad)  
 101a3fa:	xor    DWORD PTR [rbx+0x50],eax
 101a3fd:	(bad)  
 101a3fe:	jb     0x101a473
 101a400:	gs jb  0x101a443
 101a403:	rex push rcx
 101a405:	rex.RB
 101a406:	rex.B
 101a407:	rex.B
 101a408:	rex pop rax
 101a40a:	pop    rdx
 101a40b:	add    BYTE PTR [rsi],cl
 101a40d:	add    BYTE PTR [rdi],bh
 101a40f:	push   rax
 101a410:	(bad)  
 101a411:	jb     0x101a486
 101a413:	gs rex
 101a415:	rex.XB push r8
 101a417:	(bad)  
 101a418:	jb     0x101a48d
 101a41a:	gs jb  0x101a45d
 101a41d:	rex push rcx
 101a41f:	rex.RB
 101a420:	rex.B
 101a421:	rex.B
 101a422:	rex.W push rax
 101a424:	rex.RB
 101a425:	push   r13
 101a427:	pop    rdi
 101a428:	imul   ebp,DWORD PTR [rdi+0x62],0x40406675
 101a42f:	rex pop rdx
 101a431:	add    BYTE PTR [rip+0x61503f00],cl        # 0x6251e337
 101a437:	jb     0x101a4ac
 101a439:	gs rex
 101a43b:	rex.XB push r8
 101a43d:	(bad)  
 101a43e:	jb     0x101a4b3
 101a440:	gs jb  0x101a483
 101a443:	rex push rcx
 101a445:	rex.RB
 101a446:	rex.B
 101a447:	rex.B
 101a448:	rex.W
 101a449:	rex.W push rcx
 101a44b:	rex.RB
 101a44c:	push   r8
 101a44e:	rex.RB
 101a44f:	rex.B
 101a450:	rex.RXB
 101a451:	rex pop rdx
 101a453:	add    BYTE PTR [rbx],bl
 101a455:	add    BYTE PTR [rdi],bh
 101a457:	push   rsi
 101a458:	(bad)  
 101a459:	ins    BYTE PTR es:[rdi],dx
 101a45a:	imul   esp,DWORD PTR [rcx+riz*2+0x74],0x70654465
 101a462:	outs   dx,BYTE PTR gs:[rsi]
 101a464:	fs outs dx,BYTE PTR gs:[rsi]
 101a467:	movsxd ebp,DWORD PTR [rcx+0x65]
 101a46a:	jae    0x101a4ac
 101a46c:	rex.XB push r8
 101a46e:	(bad)  
 101a46f:	jb     0x101a4e4
 101a471:	gs jb  0x101a4b4
 101a474:	rex push rcx
 101a476:	rex.RB
 101a477:	rex.B
 101a478:	rex.B
 101a479:	rex.W pop rax
 101a47b:	pop    rdx
 101a47c:	add    BYTE PTR [rax],al
 101a47e:	sbb    DWORD PTR [rax],eax
 101a480:	(bad)  
 101a481:	push   rbx
 101a482:	gs je  0x101a4c9
 101a485:	imul   esi,DWORD PTR [rbx+0x70],0x5479616c
 101a48c:	outs   dx,DWORD PTR ds:[rsi]
 101a48d:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101a48f:	outs   dx,BYTE PTR ds:[rsi]
 101a490:	jae    0x101a501
 101a492:	ins    BYTE PTR es:[rdi],dx
 101a493:	rex.WRXB outs dx,BYTE PTR gs:[rsi]
 101a496:	rex
 101a497:	rex.XB push r8
 101a499:	(bad)  
 101a49a:	jb     0x101a50f
 101a49c:	gs jb  0x101a4df
 101a49f:	rex push rcx
 101a4a1:	rex.RB
 101a4a2:	rex.B
 101a4a3:	pop    r8
 101a4a5:	pop    rax
 101a4a6:	pop    rdx
 101a4a7:	add    BYTE PTR [rdx],bl
 101a4a9:	add    BYTE PTR [rdi],bh
 101a4ab:	push   rbx
 101a4ac:	gs je  0x101a4ff
 101a4af:	(bad)  
 101a4b0:	jae    0x101a525
 101a4b2:	ja     0x101a523
 101a4b4:	jb     0x101a51a
 101a4b6:	rex.XB (bad) 
 101a4b8:	ins    BYTE PTR es:[rdi],dx
 101a4b9:	ins    BYTE PTR es:[rdi],dx
 101a4ba:	(bad)  
 101a4bc:	movsxd ebp,DWORD PTR [rbx+0x40]
 101a4bf:	rex.XB push r8
 101a4c1:	(bad)  
 101a4c2:	jb     0x101a537
 101a4c4:	gs jb  0x101a507
 101a4c7:	rex push rcx
 101a4c9:	rex.RB
 101a4ca:	rex.B
 101a4cb:	pop    r8
 101a4cd:	push   rax
 101a4ce:	ss pop r8
 101a4d1:	rex.W push rax
 101a4d3:	rex.RB
 101a4d4:	push   r14
 101a4d6:	(bad)  
 101a4d7:	and    al,0x62
 101a4d9:	(bad)  
 101a4da:	jae    0x101a545
 101a4dc:	movsxd ebx,DWORD PTR [rdi+0x73]
 101a4df:	je     0x101a553
 101a4e1:	imul   ebp,DWORD PTR [rsi+0x67],0x3f554740
 101a4e8:	and    al,0x63
 101a4ea:	push   0x745f7261
 101a4ef:	jb     0x101a552
 101a4f1:	imul   esi,DWORD PTR [rbx+rsi*2+0x40],0x74734047
 101a4f9:	fs rex
 101a4fb:	rex push rsi
 101a4fd:	(bad)  
 101a4fe:	and    al,0x61
 101a500:	ins    BYTE PTR es:[rdi],dx
 101a501:	ins    BYTE PTR es:[rdi],dx
 101a502:	outs   dx,DWORD PTR ds:[rsi]
 101a503:	movsxd esp,DWORD PTR [rcx+0x74]
 101a506:	outs   dx,DWORD PTR ds:[rsi]
 101a507:	jb     0x101a549
 101a509:	rex.RXB
 101a50a:	xor    al,BYTE PTR [rax+0x40]
 101a50e:	jae    0x101a584
 101a510:	fs rex
 101a512:	rex push rax
 101a514:	rex.RB
 101a515:	pop    r8
 101a517:	rex pop rdx
 101a519:	xor    DWORD PTR [rax+0x5a],eax
 101a51c:	add    BYTE PTR [rax],al
 101a51e:	add    al,0x0
 101a520:	(bad)  
 101a521:	(bad)  
 101a522:	rex.B
 101a523:	rex.XB push r8
 101a525:	(bad)  
 101a526:	jb     0x101a59b
 101a528:	gs jb  0x101a56b
 101a52b:	rex push rcx
 101a52d:	rex.RB
 101a52e:	rex.B
 101a52f:	rex.B (bad) 
 101a531:	push   r13
 101a533:	rex.WRXB push r8
 101a535:	push   rsp
 101a536:	push   r10
 101a538:	rex.RXB
 101a539:	rex.WB
 101a53a:	rex.WRX
 101a53b:	rex.RX
 101a53c:	rex.WRXB
 101a53d:	rex
 101a53e:	rex push rax
 101a540:	rex.RB
 101a541:	rex.X
 101a542:	rex.RXB
 101a543:	rex pop rdx
 101a545:	add    BYTE PTR [rsp+rdx*2+0x55],al
 101a549:	push   rax
 101a54a:	(bad)  
 101a54b:	jb     0x101a5c0
 101a54d:	gs cs fs ins BYTE PTR es:[rdi],dx
 101a551:	ins    BYTE PTR es:[rdi],dx
 101a552:	add    BYTE PTR [rax],al
 101a554:	push   rdx
 101a555:	add    dl,BYTE PTR [rdx+0x65]
 101a558:	rex.RB outs dx,BYTE PTR ds:[esi]
 101a55b:	jne    0x101a5ca
 101a55d:	push   rsi
 101a55e:	(bad)  
 101a55f:	ins    BYTE PTR es:[rdi],dx
 101a560:	jne    0x101a5c7
 101a562:	push   rdi
 101a563:	add    BYTE PTR [rdx+rax*1+0x52],ah
 101a567:	gs addr32 rex.WRXB jo 0x101a5d1
 101a56c:	outs   dx,BYTE PTR ds:[rsi]
 101a56d:	rex.WXB
 101a56e:	gs jns 0x101a5c8
 101a571:	add    al,al
 101a573:	add    al,0x53
 101a575:	ins    BYTE PTR es:[rdi],dx
 101a576:	gs gs jo 0x101a57a
 101a57a:	out    dx,al
 101a57b:	add    BYTE PTR [rbp+0x6e],al
 101a57e:	movsxd ebp,DWORD PTR [rdi+0x64]
 101a581:	gs push rax
 101a583:	outs   dx,DWORD PTR ds:[rsi]
 101a584:	imul   ebp,DWORD PTR [rsi+0x74],0xce007265
 101a58b:	add    al,0x54
 101a58d:	gs jb  0x101a5fd
 101a590:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 101a597:	outs   dx,DWORD PTR ds:[rsi]
 101a598:	movsxd esp,DWORD PTR [rbp+0x73]
 101a59b:	jae    0x101a59d
 101a59d:	add    dl,ah
 101a59f:	add    al,0x55
 101a5a1:	outs   dx,BYTE PTR ds:[rsi]
 101a5a2:	push   0x6c646e61
 101a5a7:	gs fs rex.RB js 0x101a60f
 101a5ac:	gs jo  0x101a623
 101a5af:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 101a5b6:	gs jb  0x101a5b9
 101a5b9:	add    BYTE PTR [rdx],al
 101a5bb:	add    ecx,DWORD PTR [rcx+0x73]
 101a5be:	rex.R
 101a5bf:	gs (bad) 
 101a5c1:	jne    0x101a62a
 101a5c3:	addr32 gs jb 0x101a617
 101a5c7:	jb     0x101a62e
 101a5c9:	jae    0x101a630
 101a5cb:	outs   dx,BYTE PTR ds:[rsi]
 101a5cc:	je     0x101a5ce
 101a5ce:	es add al,0x52
 101a5d1:	je     0x101a63f
 101a5d3:	push   rsi
 101a5d4:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 101a5db:	outs   dx,BYTE PTR ds:[rsi]
 101a5dc:	ja     0x101a647
 101a5de:	outs   dx,BYTE PTR ds:[rsi]
 101a5df:	add    BYTE PTR fs:[rax],al
 101a5e2:	(bad)  
 101a5e3:	add    al,0x52
 101a5e5:	je     0x101a653
 101a5e7:	rex.WR outs dx,DWORD PTR ds:[rsi]
 101a5e9:	outs   dx,DWORD PTR ds:[rsi]
 101a5ea:	imul   esi,DWORD PTR [rbp+0x70],0x46
 101a5ee:	jne    0x101a65e
 101a5f0:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 101a5f4:	outs   dx,BYTE PTR ds:[rsi]
 101a5f5:	rex.RB outs dx,BYTE PTR ds:[rsi]
 101a5f7:	je     0x101a66b
 101a5f9:	jns    0x101a5fb
 101a5fb:	add    BYTE PTR [rax],bl
 101a5fd:	add    al,0x52
 101a5ff:	je     0x101a66d
 101a601:	rex.XB (bad) 
 101a603:	jo     0x101a679
 101a605:	jne    0x101a679
 101a607:	rex.XB outs dx,DWORD PTR gs:[rsi]
 101a60a:	outs   dx,BYTE PTR ds:[rsi]
 101a60b:	je     0x101a672
 101a60d:	js     0x101a683
 101a60f:	add    bl,cl
 101a611:	add    BYTE PTR [rbp+riz*2+0x63],al
 101a615:	outs   dx,DWORD PTR ds:[rsi]
 101a616:	fs gs push rax
 101a619:	outs   dx,DWORD PTR ds:[rsi]
 101a61a:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 101a621:	add    edx,DWORD PTR [rcx+0x75]
 101a624:	gs jb  0x101a6a0
 101a627:	push   rax
 101a628:	gs jb  0x101a691
 101a62b:	outs   dx,DWORD PTR ds:[rsi]
 101a62c:	jb     0x101a69b
 101a62e:	(bad)  
 101a62f:	outs   dx,BYTE PTR ds:[rsi]
 101a630:	movsxd esp,DWORD PTR [rbp+0x43]
 101a633:	outs   dx,DWORD PTR ds:[rsi]
 101a634:	jne    0x101a6a4
 101a636:	je     0x101a69d
 101a638:	jb     0x101a63a
 101a63a:	(bad)  
 101a63b:	add    al,BYTE PTR [rdi+0x65]
 101a63e:	je     0x101a694
 101a640:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 101a647:	je     0x101a649
 101a649:	add    bh,al
 101a64b:	add    DWORD PTR [rdi+0x65],eax
 101a64e:	je     0x101a693
 101a650:	jne    0x101a6c4
 101a652:	jb     0x101a6b9
 101a654:	outs   dx,BYTE PTR ds:[rsi]
 101a655:	je     0x101a6a7
 101a657:	jb     0x101a6c8
 101a659:	movsxd esp,DWORD PTR [rbp+0x73]
 101a65c:	jae    0x101a6a7
 101a65e:	add    BYTE PTR fs:[rax+0x74654702],al
 101a665:	push   rbx
 101a666:	jns    0x101a6db
 101a668:	je     0x101a6cf
 101a66a:	ins    DWORD PTR es:[rdi],dx
 101a66b:	push   rsp
 101a66c:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 101a673:	ins    BYTE PTR es:[rdi],dx
 101a674:	gs push rsp
 101a676:	imul   ebp,DWORD PTR [rbp+0x65],0x4902eb00
 101a67d:	outs   dx,BYTE PTR ds:[rsi]
 101a67e:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 101a686:	rex.XB jb 0x101a6f2
 101a689:	je     0x101a6f4
 101a68b:	movsxd esp,DWORD PTR [rcx+0x6c]
 101a68e:	push   rbx
 101a68f:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 101a694:	outs   dx,BYTE PTR ds:[rsi]
 101a695:	rex.B outs dx,BYTE PTR ds:[rsi]
 101a697:	fs push rbx
 101a699:	jo     0x101a704
 101a69b:	outs   dx,BYTE PTR ds:[rsi]
 101a69c:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101a69e:	jne    0x101a70e
 101a6a0:	je     0x101a6a2
 101a6a2:	(bad)  
 101a6a3:	add    cl,BYTE PTR [rax+0x65]
 101a6a6:	(bad)  
 101a6a7:	jo     0x101a6ed
 101a6a9:	gs jae 0x101a720
 101a6ac:	jb     0x101a71d
 101a6ae:	jns    0x101a6b0
 101a6b0:	rol    DWORD PTR [rdx],cl
 101a6b2:	rex.W
 101a6b3:	gs (bad) 
 101a6b5:	jo     0x101a6f8
 101a6b7:	ins    BYTE PTR es:[rdi],dx
 101a6b8:	ins    BYTE PTR es:[rdi],dx
 101a6b9:	outs   dx,DWORD PTR ds:[rsi]
 101a6ba:	movsxd eax,DWORD PTR [rax]
 101a6bc:	xlat   BYTE PTR ds:[rbx]
 101a6bd:	add    cl,BYTE PTR [rax+0x65]
 101a6c0:	(bad)  
 101a6c1:	jo     0x101a709
 101a6c3:	jb     0x101a72a
 101a6c5:	add    BYTE PTR gs:[rax],al
 101a6c8:	fiadd  DWORD PTR [rdx]
 101a6ca:	rex.W
 101a6cb:	gs (bad) 
 101a6cd:	jo     0x101a721
 101a6cf:	gs rex.B ins BYTE PTR es:[rdi],dx
 101a6d2:	ins    BYTE PTR es:[rdi],dx
 101a6d3:	outs   dx,DWORD PTR ds:[rsi]
 101a6d4:	movsxd eax,DWORD PTR [rax]
 101a6d6:	fadd   QWORD PTR [rdx]
 101a6d8:	rex.W
 101a6d9:	gs (bad) 
 101a6db:	jo     0x101a730
 101a6dd:	imul   edi,DWORD PTR [rdx+0x65],0x2510000
 101a6e4:	rex.RXB
 101a6e5:	gs je  0x101a738
 101a6e8:	jb     0x101a759
 101a6ea:	movsxd esp,DWORD PTR [rbp+0x73]
 101a6ed:	jae    0x101a737
 101a6ef:	gs (bad) 
 101a6f1:	jo     0x101a6f3
 101a6f3:	add    BYTE PTR [rbx],bl
 101a6f5:	add    al,BYTE PTR [rdi+0x65]
 101a6f8:	je     0x101a747
 101a6fa:	outs   dx,DWORD PTR ds:[rsi]
 101a6fb:	fs jne 0x101a76a
 101a6fe:	gs rex.W (bad) 
 101a701:	outs   dx,BYTE PTR ds:[rsi]
 101a702:	fs ins BYTE PTR es:[rdi],dx
 101a704:	add    BYTE PTR gs:[r8],al
 101a708:	and    BYTE PTR [rip+0x65646957],al        # 0x66661065
 101a70e:	rex.XB push 0x6f547261
 101a714:	rex.WRB jne 0x101a783
 101a717:	je     0x101a782
 101a719:	rex.X jns 0x101a790
 101a71c:	add    BYTE PTR gs:[rsi+0x74654702],ah
 101a723:	push   rbp
 101a724:	jae    0x101a78b
 101a726:	jb     0x101a76c
 101a728:	gs data16 (bad) 
 101a72b:	jne    0x101a799
 101a72d:	je     0x101a784
 101a72f:	rex.WB
 101a730:	rex.WR (bad) 
 101a732:	outs   dx,BYTE PTR ds:[rsi]
 101a733:	addr32 jne 0x101a797
 101a736:	add    BYTE PTR gs:[eax],al
 101a73a:	mov    DWORD PTR [rdx],0x626f6c47
 101a740:	(bad)  
 101a741:	ins    BYTE PTR es:[rdi],dx
 101a742:	rex.WRB
 101a743:	gs ins DWORD PTR es:[rdi],dx
 101a745:	outs   dx,DWORD PTR ds:[rsi]
 101a746:	jb     0x101a7c1
 101a748:	push   rbx
 101a749:	je     0x101a7ac
 101a74b:	je     0x101a7c2
 101a74d:	jae    0x101a74f
 101a74f:	add    BYTE PTR [rbx],ch
 101a751:	add    al,BYTE PTR [rdi+0x65]
 101a754:	je     0x101a7a4
 101a756:	(bad)  
 101a757:	je     0x101a7c2
 101a759:	jbe    0x101a7c0
 101a75b:	push   rbx
 101a75c:	jns    0x101a7d1
 101a75e:	je     0x101a7c5
 101a760:	ins    DWORD PTR es:[rdi],dx
 101a761:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101a763:	outs   dx,WORD PTR ds:[rsi]
 101a765:	add    BYTE PTR [rdx],bl
 101a767:	add    al,BYTE PTR [rdi+0x65]
 101a76a:	je     0x101a7b9
 101a76c:	outs   dx,DWORD PTR ds:[rsi]
 101a76d:	fs jne 0x101a7dc
 101a770:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 101a77a:	add    BYTE PTR [rax],al
 101a77c:	mov    al,BYTE PTR [rdx]
 101a77e:	rex.RXB
 101a77f:	gs je  0x101a7d6
 101a782:	gs ins DWORD PTR es:[rdi],dx
 101a784:	jo     0x101a7cc
 101a786:	imul   ebp,DWORD PTR [rbp+riz*2+0x4e],0x57656d61
 101a78e:	add    BYTE PTR [rax],al
 101a790:	lods   al,BYTE PTR ds:[rsi]
 101a791:	add    al,BYTE PTR [rdi+0x65]
 101a794:	je     0x101a7ec
 101a796:	gs jb  0x101a80c
 101a799:	imul   ebp,DWORD PTR [rdi+0x6e],0x577845
 101a7a0:	adc    BYTE PTR [rbx],al
 101a7a2:	rex.WB jae 0x101a7fc
 101a7a5:	outs   dx,DWORD PTR ds:[rsi]
 101a7a6:	ja     0x101a7de
 101a7a8:	xor    al,0x50
 101a7aa:	jb     0x101a81b
 101a7ac:	movsxd esp,DWORD PTR [rbp+0x73]
 101a7af:	jae    0x101a7b1
 101a7b1:	add    BYTE PTR [rcx+0x3],al
 101a7b4:	rex.WR outs dx,DWORD PTR ds:[rsi]
 101a7b6:	(bad)  
 101a7b7:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 101a7c0:	add    BYTE PTR [rax],al
 101a7c2:	add    BYTE PTR fs:[rbx+0x6f],al
 101a7c6:	ins    DWORD PTR es:[rdi],dx
 101a7c7:	jo     0x101a82a
 101a7c9:	jb     0x101a830
 101a7cb:	push   rbx
 101a7cc:	je     0x101a840
 101a7ce:	imul   ebp,DWORD PTR [rsi+0x67],0x70000057
 101a7d5:	add    al,BYTE PTR [rdi+0x65]
 101a7d8:	je     0x101a82d
 101a7da:	je     0x101a84e
 101a7dc:	imul   ebp,DWORD PTR [rsi+0x67],0x65707954
 101a7e3:	push   rdi
 101a7e4:	add    BYTE PTR [rax],al
 101a7e6:	gs add al,0x53
 101a7e9:	gs je  0x101a831
 101a7ec:	outs   dx,BYTE PTR ds:[rsi]
 101a7ed:	jbe    0x101a858
 101a7ef:	jb     0x101a860
 101a7f1:	outs   dx,BYTE PTR ds:[rsi]
 101a7f2:	ins    DWORD PTR es:[rdi],dx
 101a7f3:	outs   dx,BYTE PTR gs:[rsi]
 101a7f5:	je     0x101a84d
 101a7f7:	(bad)  
 101a7f8:	jb     0x101a863
 101a7fa:	(bad)  
 101a7fb:	(bad)  
 101a7fc:	ins    BYTE PTR es:[rdi],dx
 101a7fd:	gs push rdi
 101a7ff:	add    bl,ah
 101a801:	add    DWORD PTR [rdi+0x65],eax
 101a804:	je     0x101a84b
 101a806:	outs   dx,BYTE PTR ds:[rsi]
 101a807:	jbe    0x101a872
 101a809:	jb     0x101a87a
 101a80b:	outs   dx,BYTE PTR ds:[rsi]
 101a80c:	ins    DWORD PTR es:[rdi],dx
 101a80d:	outs   dx,BYTE PTR gs:[rsi]
 101a80f:	je     0x101a867
 101a811:	(bad)  
 101a812:	jb     0x101a87d
 101a814:	(bad)  
 101a815:	(bad)  
 101a816:	ins    BYTE PTR es:[rdi],dx
 101a817:	gs push rdi
 101a819:	add    BYTE PTR [rax],al
 101a81b:	add    eax,0x74726956
 101a820:	jne    0x101a883
 101a822:	ins    BYTE PTR es:[rdi],dx
 101a823:	push   rcx
 101a824:	jne    0x101a88b
 101a826:	jb     0x101a8a1
 101a828:	add    BYTE PTR [rax],al
 101a82a:	add    BYTE PTR [rbx+rdx*2],0x65
 101a82e:	je     0x101a87c
 101a830:	(bad)  
 101a831:	jae    0x101a8a7
 101a833:	rex.RB jb 0x101a8a8
 101a836:	outs   dx,DWORD PTR ds:[rsi]
 101a837:	jb     0x101a839
 101a839:	add    al,cl
 101a83b:	add    BYTE PTR [rbp+riz*2+0x62],al
 101a83f:	jne    0x101a8a8
 101a841:	rex.X jb 0x101a8a9
 101a844:	(bad)  
 101a845:	imul   eax,DWORD PTR [rax],0x0
 101a848:	and    eax,DWORD PTR [rcx]
 101a84a:	rex.RB js 0x101a8bd
 101a84d:	(bad)  
 101a84e:	outs   dx,BYTE PTR ds:[rsi]
 101a84f:	rex.RB outs dx,BYTE PTR fs:[rsi]
 101a852:	jbe    0x101a8bd
 101a854:	jb     0x101a8c5
 101a856:	outs   dx,BYTE PTR ds:[rsi]
 101a857:	ins    DWORD PTR es:[rdi],dx
 101a858:	outs   dx,BYTE PTR gs:[rsi]
 101a85a:	je     0x101a8af
 101a85c:	je     0x101a8d0
 101a85e:	imul   ebp,DWORD PTR [rsi+0x67],0x49005773
 101a865:	add    al,BYTE PTR [rdi+0x65]
 101a868:	je     0x101a8ba
 101a86a:	jb     0x101a8d5
 101a86c:	jbe    0x101a8cf
 101a86e:	je     0x101a8d5
 101a870:	push   rax
 101a871:	jb     0x101a8e2
 101a873:	imul   bp,WORD PTR [rbp+riz*2+0x53],0x7274
 101a87a:	imul   ebp,DWORD PTR [rsi+0x67],0xfd000057
 101a881:	add    edx,DWORD PTR [rdx+0x65]
 101a884:	ins    BYTE PTR es:[rdi],dx
 101a885:	gs (bad) 
 101a887:	jae    0x101a8ee
 101a889:	rex.WRB jne 0x101a900
 101a88c:	gs js  0x101a88f
 101a88f:	add    BYTE PTR [rbp+0x4],bh
 101a892:	push   rbx
 101a893:	gs je  0x101a8de
 101a896:	(bad)  
 101a897:	outs   dx,BYTE PTR ds:[rsi]
 101a898:	fs ins BYTE PTR es:[rdi],dx
 101a89a:	rex.WB outs dx,BYTE PTR gs:[rsi]
 101a89d:	outs   dx,WORD PTR ds:[rsi]
 101a89f:	jb     0x101a90e
 101a8a1:	(bad)  
 101a8a2:	je     0x101a90d
 101a8a4:	outs   dx,DWORD PTR ds:[rsi]
 101a8a5:	outs   dx,BYTE PTR ds:[rsi]
 101a8a6:	add    BYTE PTR [rax],al
 101a8a8:	sahf   
 101a8a9:	add    BYTE PTR [rbx+0x72],al
 101a8ac:	gs (bad) 
 101a8ae:	je     0x101a915
 101a8b0:	rex.WRB jne 0x101a927
 101a8b3:	gs js  0x101a90d
 101a8b6:	add    BYTE PTR [rax],al
 101a8b8:	jp     0x101a8bc
 101a8ba:	rex.RXB
 101a8bb:	gs je  0x101a911
 101a8be:	jns    0x101a933
 101a8c0:	je     0x101a927
 101a8c2:	ins    DWORD PTR es:[rdi],dx
 101a8c3:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101a8c5:	outs   dx,WORD PTR ds:[rsi]
 101a8c7:	add    ch,dl
 101a8c9:	add    cl,BYTE PTR [rax+0x65]
 101a8cc:	(bad)  
 101a8cd:	jo     0x101a912
 101a8cf:	jb     0x101a936
 101a8d1:	(bad)  
 101a8d2:	je     0x101a939
 101a8d4:	add    BYTE PTR [rax],al
 101a8d6:	out    0x1,al
 101a8d8:	rex.RXB
 101a8d9:	gs je  0x101a921
 101a8dc:	js     0x101a947
 101a8de:	je     0x101a923
 101a8e0:	outs   dx,DWORD PTR ds:[rsi]
 101a8e1:	fs gs push rax
 101a8e4:	jb     0x101a955
 101a8e6:	movsxd esp,DWORD PTR [rbp+0x73]
 101a8e9:	jae    0x101a8eb
 101a8eb:	add    BYTE PTR [rax+0x65724300],ch
 101a8f1:	(bad)  
 101a8f2:	je     0x101a959
 101a8f4:	push   rax
 101a8f5:	jb     0x101a966
 101a8f7:	movsxd esp,DWORD PTR [rbp+0x73]
 101a8fa:	jae    0x101a953
 101a8fc:	add    BYTE PTR [rax],al
 101a8fe:	push   0x2
 101a900:	rex.RXB
 101a901:	gs je  0x101a957
 101a904:	je     0x101a967
 101a906:	jb     0x101a97c
 101a908:	jne    0x101a97a
 101a90a:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101a90c:	outs   dx,WORD PTR ds:[rsi]
 101a90e:	push   rdi
 101a90f:	add    BYTE PTR [rsi+0x74655304],ah
 101a915:	push   rsp
 101a916:	push   0x64616572
 101a91b:	push   rax
 101a91c:	jb     0x101a987
 101a91e:	outs   dx,DWORD PTR ds:[rsi]
 101a91f:	jb     0x101a98a
 101a921:	je     0x101a99c
 101a923:	add    BYTE PTR [rbp+0x74654702],dl
 101a929:	push   rsp
 101a92a:	push   0x64616572
 101a92f:	push   rax
 101a930:	jb     0x101a99b
 101a932:	outs   dx,DWORD PTR ds:[rsi]
 101a933:	jb     0x101a99e
 101a935:	je     0x101a9b0
 101a937:	add    dl,cl
 101a939:	add    DWORD PTR [rdi+0x65],eax
 101a93c:	je     0x101a981
 101a93e:	jne    0x101a9b2
 101a940:	jb     0x101a9a7
 101a942:	outs   dx,BYTE PTR ds:[rsi]
 101a943:	je     0x101a999
 101a945:	push   0x64616572
 101a94a:	add    BYTE PTR [rax],al
 101a94c:	add    r9d,DWORD PTR [rdi+r13*2+0x63]
 101a951:	(bad)  
 101a952:	ins    BYTE PTR es:[rdi],dx
 101a953:	rex.B ins BYTE PTR es:[rdi],dx
 101a955:	ins    BYTE PTR es:[rdi],dx
 101a956:	outs   dx,DWORD PTR ds:[rsi]
 101a957:	movsxd eax,DWORD PTR [rax]
 101a959:	add    BYTE PTR [rsi],bh
 101a95b:	add    ecx,DWORD PTR [rdi+rbp*2+0x61]
 101a95f:	imul   r12,QWORD PTR fs:[rdx+0x72],0x41797261
 101a968:	add    BYTE PTR [rax],al
 101a96a:	test   DWORD PTR [rdi+rbx*2],eax
 101a96d:	jbe    0x101a9e2
 101a96f:	outs   dx,BYTE PTR ds:[rsi]
 101a970:	ja     0x101a9e2
 101a972:	jb     0x101a9dd
 101a974:	outs   dx,BYTE PTR ds:[rsi]
 101a975:	je     0x101a9dd
 101a977:	add    BYTE PTR [rbx],dh
 101a979:	(bad)  
 101a97a:	ja     0x101a9ec
 101a97c:	jb     0x101a9e7
 101a97e:	outs   dx,BYTE PTR ds:[rsi]
 101a97f:	je     0x101a9e7
 101a981:	add    BYTE PTR [rsi+0x5],bl
 101a984:	data16 jo 0x101a9fc
 101a987:	je     0x101a9fc
 101a989:	add    BYTE PTR [rbx],bl
 101a98b:	(bad)  
 101a98c:	ja     0x101a9f1
 101a98e:	jae    0x101a9fe
 101a990:	movsxd esp,DWORD PTR [rcx+0x74]
 101a993:	pop    rdi
 101a994:	jae    0x101a996
 101a996:	sbb    al,0x6
 101a998:	ja     0x101a9fd
 101a99a:	jae    0x101aa0a
 101a99c:	movsxd ebp,DWORD PTR [rbp+0x70]
 101a99f:	add    BYTE PTR [rcx],ah
 101a9a1:	(bad)  
 101a9a2:	ja     0x101aa07
 101a9a4:	jae    0x101aa18
 101a9a6:	movsxd ebp,DWORD PTR [rax+0x72]
 101a9a9:	add    BYTE PTR [rax],ah
 101a9ab:	(bad)  
 101a9ac:	ja     0x101aa11
 101a9ae:	jae    0x101aa20
 101a9b0:	(bad)  
 101a9b2:	imul   eax,DWORD PTR [rax],0x38
 101a9b5:	add    al,0x5f
 101a9b7:	jae    0x101aa30
 101a9b9:	jae    0x101aa1e
 101a9bb:	(bad)  
 101a9bc:	outs   dx,BYTE PTR ds:[rsi]
 101a9bd:	pop    di
 101a9bf:	jae    0x101aa20
 101a9c1:	ins    BYTE PTR es:[rdi],dx
 101a9c2:	add    BYTE PTR [rax],al
 101a9c4:	mov    bh,0x3
 101a9c6:	pop    rdi
 101a9c7:	jb     0x101aa2e
 101a9c9:	jae    0x101aa30
 101a9cb:	je     0x101aa40
 101a9cd:	je     0x101aa3a
 101a9cf:	outs   dx,DWORD PTR ds:[rsi]
 101a9d0:	data16 ins BYTE PTR es:[rdi],dx
 101a9d2:	ja     0x101a9d4
 101a9d4:	xchg   BYTE PTR [rdi+rbx*2],al
 101a9d7:	jbe    0x101aa4c
 101a9d9:	outs   dx,BYTE PTR ds:[rsi]
 101a9da:	ja     0x101aa4c
 101a9dc:	jb     0x101aa47
 101a9de:	outs   dx,BYTE PTR ds:[rsi]
 101a9df:	je     0x101aa47
 101a9e1:	pop    rdi
 101a9e2:	ins    BYTE PTR es:[rdi],dx
 101a9e3:	add    ch,ch
 101a9e5:	add    al,0x5f
 101a9e7:	ja     0x101aa56
 101a9e9:	(bad)  
 101a9ea:	imul   esp,DWORD PTR [rbp+0x70],0x61
 101a9ee:	je     0x101aa58
 101a9f0:	pop    rdi
 101a9f1:	jae    0x101a9f3
 101a9f3:	add    BYTE PTR [rdi],cl
 101a9f5:	add    eax,0x7073775f
 101a9fa:	ins    BYTE PTR es:[rdi],dx
 101a9fb:	imul   esi,DWORD PTR [rax+rsi*2+0x61],0x735f6874
 101aa03:	add    BYTE PTR [rsi],al
 101aa05:	add    BYTE PTR [rdi+0x65],al
 101aa08:	je     0x101aa50
 101aa0a:	imul   ebp,DWORD PTR [rbp+riz*2+0x56],0x69737265
 101aa12:	outs   dx,DWORD PTR ds:[rsi]
 101aa13:	outs   dx,BYTE PTR ds:[rsi]
 101aa14:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101aa16:	outs   dx,WORD PTR ds:[rsi]
 101aa18:	push   rdi
 101aa19:	add    BYTE PTR [rsi],cl
 101aa1b:	add    BYTE PTR [rsi+0x65],dl
 101aa1e:	jb     0x101aa71
 101aa20:	jne    0x101aa87
 101aa22:	jb     0x101aa9d
 101aa24:	push   rsi
 101aa25:	(bad)  
 101aa26:	ins    BYTE PTR es:[rdi],dx
 101aa27:	jne    0x101aa8e
 101aa29:	push   rdi
 101aa2a:	add    BYTE PTR [rax],al
 101aa2c:	push   rsi
 101aa2d:	rex.RB push r10
 101aa2f:	push   rbx
 101aa30:	rex.WB
 101aa31:	rex.WRXB
 101aa32:	rex.WRX
 101aa33:	cs fs ins BYTE PTR es:[rdi],dx
 101aa36:	ins    BYTE PTR es:[rdi],dx
 101aa37:	add    BYTE PTR [rcx+rax*1],dh
 101aa3a:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x736f6c43
 101aa42:	add    BYTE PTR gs:[rdx],al
 101aa45:	add    al,BYTE PTR [rdi+0x65]
 101aa48:	je     0x101aa90
 101aa4a:	jne    0x101aab8
 101aa4c:	ins    BYTE PTR es:[rdi],dx
 101aa4d:	push   rax
 101aa4e:	(bad)  
 101aa4f:	je     0x101aab9
 101aa51:	rex.WRX (bad) 
 101aa53:	ins    DWORD PTR es:[rdi],dx
 101aa54:	gs push rdi
 101aa56:	add    BYTE PTR [rax],al
 101aa58:	(bad)  
 101aa59:	add    DWORD PTR [rsi+0x69],eax
 101aa5c:	outs   dx,BYTE PTR ds:[rsi]
 101aa5d:	rex.RX imul r14d,DWORD PTR fs:[rdx+0x73],0x6c694674
 101aa66:	gs push rdi
 101aa68:	add    BYTE PTR [rax],al
 101aa6a:	sti    
 101aa6b:	add    al,0x56
 101aa6d:	imul   esi,DWORD PTR [rdx+0x74],0x466c6175
 101aa74:	jb     0x101aadb
 101aa76:	add    BYTE PTR gs:[rax],al
	...
 101aa81:	add    BYTE PTR [rax],al
 101aa83:	add    bh,ah
 101aa85:	(bad)  
 101aa86:	xor    eax,0x4f
 101aa8b:	add    dh,al
 101aa8d:	stos   BYTE PTR es:[rdi],al
 101aa8e:	add    DWORD PTR [rax],eax
 101aa90:	add    DWORD PTR [rax],eax
 101aa92:	add    BYTE PTR [rax],al
 101aa94:	add    eax,DWORD PTR [rax]
 101aa96:	add    BYTE PTR [rax],al
 101aa98:	add    eax,DWORD PTR [rax]
 101aa9a:	add    BYTE PTR [rax],al
 101aa9c:	test   al,0xaa
 101aa9e:	add    DWORD PTR [rax],eax
 101aaa0:	mov    ah,0xaa
 101aaa2:	add    DWORD PTR [rax],eax
 101aaa4:	shr    BYTE PTR [rdx+0x5a500001],0x1
 101aaab:	add    BYTE PTR [rax],al
 101aaad:	pop    rbx
 101aaae:	add    DWORD PTR [rax],eax
 101aab0:	xor    BYTE PTR [rsi+0x0],dl
 101aab3:	add    cl,dl
 101aab5:	stos   BYTE PTR es:[rdi],al
 101aab6:	add    DWORD PTR [rax],eax
 101aab8:	in     al,0xaa
 101aaba:	add    DWORD PTR [rax],eax
 101aabc:	stc    
 101aabd:	stos   BYTE PTR es:[rdi],al
 101aabe:	add    DWORD PTR [rax],eax
 101aac0:	add    BYTE PTR [rax],al
 101aac2:	add    DWORD PTR [rax],eax
 101aac4:	add    al,BYTE PTR [rax]
 101aac6:	rex.R push rsp
 101aac8:	push   rbp
 101aac9:	je     0x101ab34
 101aacb:	ins    BYTE PTR es:[rdi],dx
 101aacc:	cs gs js 0x101ab35
 101aad0:	add    BYTE PTR [rbp+rbp*2+0x70],al
 101aad4:	rex.RXB
 101aad5:	gs je  0x101ab1b
 101aad8:	ins    BYTE PTR es:[rdi],dx
 101aad9:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 101aae0:	outs   dx,DWORD PTR ds:[rsi]
 101aae1:	jb     0x101ab57
 101aae3:	add    BYTE PTR [rbp+rbp*2+0x70],al
 101aae7:	push   rdx
 101aae8:	gs ins DWORD PTR es:[rdi],dx
 101aaea:	outs   dx,DWORD PTR ds:[rsi]
 101aaeb:	je     0x101ab52
 101aaed:	rex.R jne 0x101ab5d
 101aaf0:	jo     0x101ab44
 101aaf2:	gs jno 0x101ab6a
 101aaf5:	gs jae 0x101ab6c
 101aaf8:	add    BYTE PTR [rbx+0x53],dl
 101aafb:	rex.WB push r11
 101aafd:	rex.RXB
 101aafe:	gs je  0x101ab46
 101ab01:	js     0x101ab77
 101ab03:	jb     0x101ab66
 101ab05:	rex.R jne 0x101ab75
 101ab08:	jo     0x101ab50
 101ab0a:	imul   ebp,DWORD PTR [rbp+riz*2+0x48],0x6c646e61
 101ab12:	gs
	...

Disassembly of section .data:

000000000101b000 <.data>:
 101b000:	add    BYTE PTR [rax],al
 101b002:	add    BYTE PTR [rax],al
 101b004:	add    BYTE PTR [rcx],al
	...
 101b0fe:	add    BYTE PTR [rax],al
 101b100:	and    QWORD PTR [rax],rax
 101b103:	add    DWORD PTR [rax],eax
	...
 101b10d:	add    BYTE PTR [rax],al
 101b10f:	add    BYTE PTR [rsi],ch
 101b111:	(bad)  
 101b112:	push   r14
 101b114:	rex.XB
 101b115:	rex.B je 0x101b184
 101b118:	rex.RB js 0x101b17e
 101b11b:	gs jo  0x101b192
 101b11e:	imul   ebp,DWORD PTR [rdi+0x6e],0x4c544140
 101b125:	rex
 101b126:	add    BYTE PTR [rax],bpl
 101b129:	add    al,0x0
 101b12b:	add    BYTE PTR [rsp+rax*1],ah
 101b12e:	add    BYTE PTR [rax],al
 101b130:	adc    BYTE PTR [rdi],0x0
 101b133:	add    DWORD PTR [rax],eax
 101b135:	add    BYTE PTR [rax],al
 101b137:	add    BYTE PTR [rax+0x10017],al
 101b13d:	add    BYTE PTR [rax],al
 101b13f:	add    BYTE PTR [rax+0x21],cl
 101b142:	add    BYTE PTR [rcx],al
	...
 101b150:	cs (bad) 
 101b152:	push   r14
 101b154:	gs js  0x101b1ba
 101b157:	gs jo  0x101b1ce
 101b15a:	imul   ebp,DWORD PTR [rdi+0x6e],0x64747340
 101b161:	rex
 101b162:	add    BYTE PTR [rax],al
 101b165:	add    BYTE PTR [rax],al
 101b167:	add    BYTE PTR [rax+0x21],cl
 101b16a:	add    BYTE PTR [rcx],al
	...
 101b178:	cs (bad) 
 101b17a:	push   r14
 101b17c:	(bad)
 101b181:	ins    BYTE PTR es:[rdi],dx
 101b182:	ins    BYTE PTR es:[rdi],dx
 101b183:	outs   dx,DWORD PTR ds:[rsi]
 101b184:	movsxd eax,DWORD PTR [rax+0x73]
 101b187:	je     0x101b1ed
 101b189:	rex
 101b18a:	add    BYTE PTR [rax],al
 101b18d:	add    BYTE PTR [rax],al
 101b18f:	add    BYTE PTR [rax+0x10017],al
 101b195:	add    BYTE PTR [rax],al
 101b197:	add    BYTE PTR [rax+0x10017],al
 101b19d:	add    BYTE PTR [rax],al
 101b19f:	add    BYTE PTR [rax+0x10017],al
 101b1a5:	add    BYTE PTR [rax],al
 101b1a7:	add    BYTE PTR [rax+0x10017],al
 101b1ad:	add    BYTE PTR [rax],al
 101b1af:	add    BYTE PTR [rax+0x10017],al
	...
 101b1bd:	add    BYTE PTR [rax],al
 101b1bf:	add    BYTE PTR [rax+0x21],cl
 101b1c2:	add    BYTE PTR [rcx],al
	...
 101b1d0:	cs (bad) 
 101b1d2:	push   r14
 101b1d4:	je     0x101b24f
 101b1d6:	jo     0x101b23d
 101b1d8:	pop    rdi
 101b1d9:	imul   ebp,DWORD PTR [rsi+0x66],0x40406f
 101b1e0:	xor    ah,BYTE PTR [rdx+0x2b992ddf]
 101b1e6:	add    BYTE PTR [rax],al
 101b1e8:	int    0x5d
 101b1ea:	and    dl,dl
 101b1ec:	data16 (bad) 
 101b1ee:	(bad)  
 101b1ef:	push   QWORD PTR [rbp-0x68]
 101b1f2:	add    BYTE PTR [rax],al
 101b1f4:	(bad)  
 101b1f5:	(bad)  
 101b1f6:	(bad)  
 101b1f7:	(bad)  
 101b1f8:	(bad)  
 101b1f9:	(bad)  
 101b1fa:	(bad)  
 101b1fb:	(bad)  
 101b1fc:	(bad)  
 101b1fd:	(bad)  
 101b1fe:	(bad)  
 101b1ff:	inc    DWORD PTR [rcx]
 101b201:	add    BYTE PTR [rax],al
 101b203:	add    BYTE PTR [rax],al
 101b205:	add    BYTE PTR [rax],al
 101b207:	add    al,dl
 101b209:	and    DWORD PTR [rax],eax
 101b20b:	add    DWORD PTR [rax],eax
 101b20d:	add    BYTE PTR [rax],al
 101b20f:	add    BYTE PTR [rax-0x45],dl
 101b212:	add    DWORD PTR [rcx],eax
 101b214:	add    BYTE PTR [rax],al
 101b216:	add    BYTE PTR [rax],al
 101b218:	or     BYTE PTR [rdx+0x101],dh
	...
 101b226:	add    BYTE PTR [rax],al
 101b228:	add    al,BYTE PTR [rax]
	...
 101b236:	add    BYTE PTR [rax],al
 101b238:	lock xor DWORD PTR [rax],eax
 101b23b:	add    DWORD PTR [rax],eax
 101b23d:	add    BYTE PTR [rax],al
 101b23f:	add    BYTE PTR [rax],dl
 101b241:	xor    al,BYTE PTR [rax]
 101b243:	add    DWORD PTR [rax],eax
 101b245:	add    BYTE PTR [rax],al
 101b247:	add    BYTE PTR [rax],ah
 101b249:	xor    al,BYTE PTR [rax]
 101b24b:	add    DWORD PTR [rax],eax
 101b24d:	add    BYTE PTR [rax],al
 101b24f:	add    BYTE PTR [rax+0x32],ah
 101b252:	add    BYTE PTR [rcx],al
 101b254:	add    BYTE PTR [rax],al
 101b256:	add    BYTE PTR [rax],al
 101b258:	loopne 0x101b28c
 101b25a:	add    BYTE PTR [rcx],al
 101b25c:	add    BYTE PTR [rax],al
 101b25e:	add    BYTE PTR [rax],al
 101b260:	jo     0x101b295
 101b262:	add    BYTE PTR [rcx],al
 101b264:	add    BYTE PTR [rax],al
 101b266:	add    BYTE PTR [rax],al
 101b268:	add    BYTE PTR [rax+rax*1],dh
 101b26b:	add    DWORD PTR [rax],eax
 101b26d:	add    BYTE PTR [rax],al
 101b26f:	add    BYTE PTR [rax+0x10034],dl
 101b275:	add    BYTE PTR [rax],al
 101b277:	add    BYTE PTR [rax+0x10017],al
 101b27d:	add    BYTE PTR [rax],al
 101b27f:	add    BYTE PTR [rax+0x10035],ah
 101b285:	add    BYTE PTR [rax],al
 101b287:	add    BYTE PTR [rax],ah
 101b289:	sbb    eax,DWORD PTR [rax]
 101b28b:	add    DWORD PTR [rax],eax
 101b28d:	add    BYTE PTR [rax],al
 101b28f:	add    BYTE PTR [rax],bh
 101b291:	cmp    al,0x0
 101b293:	add    DWORD PTR [rax],eax
 101b295:	add    BYTE PTR [rax],al
 101b297:	add    BYTE PTR [rbx],cl
 101b299:	add    BYTE PTR [rax],al
 101b29b:	add    BYTE PTR [rax],al
 101b29d:	add    BYTE PTR [rax],al
 101b29f:	add    BYTE PTR [rax+0x3c],dl
 101b2a2:	add    BYTE PTR [rcx],al
 101b2a4:	add    BYTE PTR [rax],al
 101b2a6:	add    BYTE PTR [rax],al
 101b2a8:	rex.WRB add BYTE PTR [r8],r8b
 101b2ab:	add    BYTE PTR [rax],al
 101b2ad:	add    BYTE PTR [rax],al
 101b2af:	add    al,dh
 101b2b1:	cmp    al,0x0
 101b2b3:	add    DWORD PTR [rax],eax
 101b2b5:	add    BYTE PTR [rax],al
 101b2b7:	add    BYTE PTR [rbx],dl
 101b2b9:	add    BYTE PTR [rax],al
 101b2bb:	add    BYTE PTR [rax],al
 101b2bd:	add    BYTE PTR [rax],al
 101b2bf:	add    BYTE PTR [rip+0x100ff],cl        # 0x102b3c4
	...

Disassembly of section .pdata:

000000000101e000 <.pdata>:
 101e000:	or     BYTE PTR [rdi+0x0],0x0
 101e004:	(bad)  
 101e005:	rex.WRXB add BYTE PTR [r8],r8b
 101e008:	or     BYTE PTR [rax+0x1],ch
 101e00b:	add    BYTE PTR [rax-0x5dffffb1],dh
 101e011:	push   rax
 101e012:	add    BYTE PTR [rax],al
 101e014:	adc    BYTE PTR [rax+0x1],ch
 101e017:	add    BYTE PTR [rax],dh
 101e019:	push   rcx
 101e01a:	add    BYTE PTR [rax],al
 101e01c:	and    DWORD PTR [rax+rax*1+0x0],edx
 101e020:	and    al,0x68
 101e022:	add    DWORD PTR [rax],eax
 101e024:	rex push rsp
 101e026:	add    BYTE PTR [rax],al
 101e028:	sbb    al,0x56
 101e02a:	add    BYTE PTR [rax],al
 101e02c:	(bad)  
 101e02d:	push   0x56500001
 101e032:	add    BYTE PTR [rax],al
 101e034:	mov    ss,WORD PTR [rsi+0x0]
 101e037:	add    BYTE PTR [rax+rbp*2+0x1],ch
 101e03b:	add    BYTE PTR [rax+0x62000056],ah
 101e041:	pop    rax
 101e042:	add    BYTE PTR [rax],al
 101e044:	je     0x101e0ae
 101e046:	add    DWORD PTR [rax],eax
 101e048:	jo     0x101e0a2
 101e04a:	add    BYTE PTR [rax],al
 101e04c:	(bad)  
 101e04d:	pop    rcx
 101e04e:	add    BYTE PTR [rax],al
 101e050:	mov    ah,0x68
 101e052:	add    DWORD PTR [rax],eax
 101e054:	and    BYTE PTR [rcx+0x0],bl
 101e057:	add    dh,dl
 101e059:	pop    rcx
 101e05a:	add    BYTE PTR [rax],al
 101e05c:	enter  0x168,0x0
 101e060:	loopne 0x101e0bb
 101e062:	add    BYTE PTR [rax],al
 101e064:	(bad)  
 101e065:	pop    rdx
 101e066:	add    BYTE PTR [rax],al
 101e068:	loopne 0x101e0d2
 101e06a:	add    DWORD PTR [rax],eax
 101e06c:	adc    BYTE PTR [rdx+0x0],bl
 101e06f:	add    BYTE PTR [rbp-0x17ffffa6],cl
 101e075:	push   0x5aa00001
 101e07a:	add    BYTE PTR [rax],al
 101e07c:	in     al,0x5a
 101e07e:	add    BYTE PTR [rax],al
 101e080:	hlt    
 101e081:	push   0x5ae40001
 101e086:	add    BYTE PTR [rax],al
 101e088:	sbb    BYTE PTR [rbx+0x0],0x0
 101e08c:	add    al,0x69
 101e08e:	add    DWORD PTR [rax],eax
 101e090:	sbb    BYTE PTR [rbx+0x0],0x0
 101e094:	mov    ebx,DWORD PTR [rbx+0x0]
 101e097:	add    BYTE PTR [rcx+rbp*2],bl
 101e09a:	add    DWORD PTR [rax],eax
 101e09c:	movabs al,ds:0x3400005baf00005b
 101e0a5:	imul   eax,DWORD PTR [rcx],0x5bc000
 101e0ab:	add    BYTE PTR [rsp+rbx*2+0x0],ch
 101e0af:	add    BYTE PTR [rcx+rbp*2],bh
 101e0b2:	add    DWORD PTR [rax],eax
 101e0b4:	sbb    BYTE PTR [rax+rax*1+0x0],0xe0
 101e0b9:	pop    rsp
 101e0ba:	add    BYTE PTR [rax],al
 101e0bc:	push   rsp
 101e0bd:	imul   eax,DWORD PTR [rcx],0x5cf000
 101e0c3:	add    BYTE PTR [rbx*2+0x695c0000],bh
 101e0ca:	add    DWORD PTR [rax],eax
 101e0cc:	push   rax
 101e0cd:	pop    rbp
 101e0ce:	add    BYTE PTR [rax],al
 101e0d0:	ja     0x101e12f
 101e0d2:	add    BYTE PTR [rax],al
 101e0d4:	imul   eax,DWORD PTR fs:[rcx],0x5d8000
 101e0db:	add    BYTE PTR [rax+0x6c00005e],bh
 101e0e1:	imul   eax,DWORD PTR [rcx],0x5ee000
 101e0e7:	add    BYTE PTR [rdx],al
 101e0e9:	pop    rdi
 101e0ea:	add    BYTE PTR [rax],al
 101e0ec:	jl     0x101e157
 101e0ee:	add    DWORD PTR [rax],eax
 101e0f0:	adc    BYTE PTR [rdi+0x0],bl
 101e0f3:	add    BYTE PTR [rdx+0x5f],cl
 101e0f6:	add    BYTE PTR [rax],al
 101e0f8:	test   BYTE PTR [rcx+0x1],ch
 101e0fb:	add    BYTE PTR [rax+0x5f],dl
 101e0fe:	add    BYTE PTR [rax],al
 101e100:	mov    ah,0x5f
 101e102:	add    BYTE PTR [rax],al
 101e104:	nop
 101e105:	imul   eax,DWORD PTR [rcx],0x5fc000
 101e10b:	add    dl,bl
 101e10d:	pop    rdi
 101e10e:	add    BYTE PTR [rax],al
 101e110:	cwde   
 101e111:	imul   eax,DWORD PTR [rcx],0x5fda00
 101e117:	add    BYTE PTR [rcx+0x60],al
 101e11a:	add    BYTE PTR [rax],al
 101e11c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101e11d:	imul   eax,DWORD PTR [rcx],0x604100
 101e123:	add    BYTE PTR [rdi+0x60],cl
 101e126:	add    BYTE PTR [rax],al
 101e128:	mov    eax,0x60000169
 101e12d:	(bad)  
 101e12e:	add    BYTE PTR [rax],al
 101e130:	(bad)  
 101e131:	(bad)  
 101e132:	add    BYTE PTR [rax],al
 101e134:	enter  0x169,0x0
 101e138:	movabs al,ds:0xd000006141000060
 101e141:	imul   eax,DWORD PTR [rcx],0x614100
 101e147:	add    BYTE PTR [rdi+0x61],dl
 101e14a:	add    BYTE PTR [rax],al
 101e14c:	in     al,0x69
 101e14e:	add    DWORD PTR [rax],eax
 101e150:	push   rdi
 101e151:	(bad)  
 101e152:	add    BYTE PTR [rax],al
 101e154:	js     0x101e1b7
 101e156:	add    BYTE PTR [rax],al
 101e158:	clc    
 101e159:	imul   eax,DWORD PTR [rcx],0x617800
 101e15f:	add    BYTE PTR [rdx+0x8000061],ch
 101e165:	push   0x1
 101e167:	add    BYTE PTR [rdx-0x3dffff9f],ch
 101e16d:	(bad)  
 101e16e:	add    BYTE PTR [rax],al
 101e170:	sbb    al,0x6a
 101e172:	add    DWORD PTR [rax],eax
 101e174:	shl    BYTE PTR [rcx+0x0],1
 101e177:	add    BYTE PTR [rcx+0x2c000062],dl
 101e17d:	push   0x1
 101e17f:	add    BYTE PTR [rcx-0x62ffff9e],dl
 101e185:	(bad)  
 101e186:	add    BYTE PTR [rax],al
 101e188:	cmp    al,0x6a
 101e18a:	add    DWORD PTR [rax],eax
 101e18c:	popf   
 101e18d:	(bad)  
 101e18e:	add    BYTE PTR [rax],al
 101e190:	loopne 0x101e1f4
 101e192:	add    BYTE PTR [rax],al
 101e194:	push   rax
 101e195:	push   0x1
 101e197:	add    al,ah
 101e199:	(bad)  
 101e19a:	add    BYTE PTR [rax],al
 101e19c:	adc    DWORD PTR [rbx+0x0],esp
 101e19f:	add    BYTE PTR [rax+0x6a],ah
 101e1a2:	add    DWORD PTR [rax],eax
 101e1a4:	adc    DWORD PTR [rbx+0x0],esp
 101e1a7:	add    BYTE PTR [rbx+riz*2],ah
 101e1aa:	add    BYTE PTR [rax],al
 101e1ac:	je     0x101e218
 101e1ae:	add    DWORD PTR [rax],eax
 101e1b0:	xor    BYTE PTR [rbx+0x0],ah
 101e1b3:	add    bl,cl
 101e1b5:	movsxd eax,DWORD PTR [rax]
 101e1b7:	add    BYTE PTR [rdx+rbp*2+0x63e00001],al
 101e1be:	add    BYTE PTR [rax],al
 101e1c0:	cs add BYTE PTR gs:[rax],al
 101e1c4:	nop
 101e1c5:	push   0x1
 101e1c7:	add    BYTE PTR [rax+0x65],ah
 101e1ca:	add    BYTE PTR [rax],al
 101e1cc:	test   BYTE PTR [rbx+0x0],ch
 101e1cf:	add    BYTE PTR [rbx+rbp*2+0x1],bh
 101e1d3:	add    BYTE PTR [rax+0x5800006b],dl
 101e1d9:	outs   dx,BYTE PTR ds:[rsi]
 101e1da:	add    BYTE PTR [rax],al
 101e1dc:	push   rax
 101e1dd:	ins    BYTE PTR es:[rdi],dx
 101e1de:	add    DWORD PTR [rax],eax
 101e1e0:	(bad)  
 101e1e1:	outs   dx,BYTE PTR ds:[rsi]
 101e1e2:	add    BYTE PTR [rax],al
 101e1e4:	or     DWORD PTR [rax+0x0],esi
 101e1e7:	add    BYTE PTR [rax+0x6c],bl
 101e1ea:	add    DWORD PTR [rax],eax
 101e1ec:	adc    BYTE PTR [rax+0x0],dh
 101e1ef:	add    BYTE PTR [rsi],ah
 101e1f1:	jno    0x101e1f3
 101e1f3:	add    BYTE PTR [rax+0x6c],ah
 101e1f6:	add    DWORD PTR [rax],eax
 101e1f8:	xor    BYTE PTR [rcx+0x0],dh
 101e1fb:	add    BYTE PTR [rip+0x68000072],bl        # 0x6901e273
 101e201:	ins    BYTE PTR es:[rdi],dx
 101e202:	add    DWORD PTR [rax],eax
 101e204:	xor    BYTE PTR [rdx+0x0],dh
 101e207:	add    BYTE PTR [rsi-0x67ffff8e],bl
 101e20d:	ins    BYTE PTR es:[rdi],dx
 101e20e:	add    DWORD PTR [rax],eax
 101e210:	sahf   
 101e211:	jb     0x101e213
 101e213:	add    BYTE PTR [rdx],ch
 101e215:	jae    0x101e217
 101e217:	add    BYTE PTR [rax+0x2a00016c],ah
 101e21d:	jae    0x101e21f
 101e21f:	add    BYTE PTR [rcx],dh
 101e221:	jae    0x101e223
 101e223:	add    BYTE PTR [rsp+rbp*2+0x73400001],dh
 101e22a:	add    BYTE PTR [rax],al
 101e22c:	xor    esi,DWORD PTR [rax+rax*1+0x0]
 101e230:	(bad)  
 101e231:	ins    BYTE PTR es:[rdi],dx
 101e232:	add    DWORD PTR [rax],eax
 101e234:	rex je 0x101e237
 101e237:	add    BYTE PTR [rax+0x77],ch
 101e23a:	add    BYTE PTR [rax],al
 101e23c:	fsubr  DWORD PTR [rcx+rax*1+0x0]
 101e240:	jo     0x101e2b9
 101e242:	add    BYTE PTR [rax],al
 101e244:	test   eax,0xec000077
 101e249:	ins    DWORD PTR es:[rdi],dx
 101e24a:	add    DWORD PTR [rax],eax
 101e24c:	mov    al,0x77
 101e24e:	add    BYTE PTR [rax],al
 101e250:	pop    rbp
 101e251:	jns    0x101e253
 101e253:	add    ah,dh
 101e255:	ins    DWORD PTR es:[rdi],dx
 101e256:	add    DWORD PTR [rax],eax
 101e258:	jo     0x101e2d3
 101e25a:	add    BYTE PTR [rax],al
 101e25c:	xchg   ebp,eax
 101e25d:	jns    0x101e25f
 101e25f:	add    BYTE PTR [rax],cl
 101e261:	outs   dx,BYTE PTR ds:[rsi]
 101e262:	add    DWORD PTR [rax],eax
 101e264:	xchg   ebp,eax
 101e265:	jns    0x101e267
 101e267:	add    dl,dl
 101e269:	jns    0x101e26b
 101e26b:	add    BYTE PTR [rsi+rbp*2],bl
 101e26e:	add    DWORD PTR [rax],eax
 101e270:	sar    BYTE PTR [rcx+0x0],cl
 101e273:	add    ch,bh
 101e275:	jns    0x101e277
 101e277:	add    BYTE PTR [rax],dh
 101e279:	outs   dx,BYTE PTR ds:[rsi]
 101e27a:	add    DWORD PTR [rax],eax
 101e27c:	std    
 101e27d:	jns    0x101e27f
 101e27f:	add    BYTE PTR [rdx],dh
 101e281:	jp     0x101e283
 101e283:	add    BYTE PTR [rax+0x6e],al
 101e286:	add    DWORD PTR [rax],eax
 101e288:	rex jp 0x101e28b
 101e28b:	add    BYTE PTR [rdx+rdi*2+0x6e540000],cl
 101e292:	add    DWORD PTR [rax],eax
 101e294:	mov    WORD PTR [rdx+0x0],?
 101e297:	add    BYTE PTR [rip+0x6c00007c],cl        # 0x6d01e319
 101e29d:	outs   dx,BYTE PTR ds:[rsi]
 101e29e:	add    DWORD PTR [rax],eax
 101e2a0:	or     eax,0x2a00007c
 101e2a5:	jl     0x101e2a7
 101e2a7:	add    BYTE PTR [rsi+rbp*2+0x7c300001],cl
 101e2ae:	add    BYTE PTR [rax],al
 101e2b0:	js     0x101e32e
 101e2b2:	add    BYTE PTR [rax],al
 101e2b4:	pushf  
 101e2b5:	outs   dx,BYTE PTR ds:[rsi]
 101e2b6:	add    DWORD PTR [rax],eax
 101e2b8:	cmp    BYTE PTR [rax+rax*1+0x0],0xd9
 101e2bd:	jl     0x101e2bf
 101e2bf:	add    BYTE PTR [rsi+rbp*2+0x7cd90001],ah
 101e2c6:	add    BYTE PTR [rax],al
 101e2c8:	stc    
 101e2c9:	jl     0x101e2cb
 101e2cb:	add    BYTE PTR [rax-0x6fffe92],dh
 101e2d1:	jl     0x101e2d3
 101e2d3:	add    BYTE PTR [rdx],dl
 101e2d5:	jge    0x101e2d7
 101e2d7:	add    ah,al
 101e2d9:	outs   dx,BYTE PTR ds:[rsi]
 101e2da:	add    DWORD PTR [rax],eax
 101e2dc:	adc    bh,BYTE PTR [rbp+0x0]
 101e2df:	add    BYTE PTR [rdi],ch
 101e2e1:	jge    0x101e2e3
 101e2e3:	add    ah,bl
 101e2e5:	outs   dx,BYTE PTR ds:[rsi]
 101e2e6:	add    DWORD PTR [rax],eax
 101e2e8:	(bad)  
 101e2e9:	jge    0x101e2eb
 101e2eb:	add    BYTE PTR [rcx+0x7d],al
 101e2ee:	add    BYTE PTR [rax],al
 101e2f0:	lock outs dx,BYTE PTR ds:[rsi]
 101e2f2:	add    DWORD PTR [rax],eax
 101e2f4:	rex.B jge 0x101e2f7
 101e2f7:	add    BYTE PTR [rbp+rdi*2+0x6f000000],cl
 101e2fe:	add    DWORD PTR [rax],eax
 101e300:	mov    WORD PTR [rbp+0x0],?
 101e303:	add    BYTE PTR [rbx+0x1c00007d],ah
 101e309:	outs   dx,DWORD PTR ds:[rsi]
 101e30a:	add    DWORD PTR [rax],eax
 101e30c:	sar    BYTE PTR [rbp+0x0],0x0
 101e310:	out    dx,al
 101e311:	jle    0x101e313
 101e313:	add    BYTE PTR [rdi+rbp*2],ch
 101e316:	add    DWORD PTR [rax],eax
 101e318:	add    BYTE PTR [rdi+0x0],bh
 101e31b:	add    BYTE PTR [rax+rax*4+0x0],bl
 101e31f:	add    BYTE PTR [rdi+rbp*2+0x1],al
 101e323:	add    al,al
 101e325:	add    BYTE PTR [rax],0x0
 101e328:	(bad)  
 101e329:	(bad)  
 101e32a:	add    BYTE PTR [rax],al
 101e32c:	pop    rax
 101e32d:	outs   dx,DWORD PTR ds:[rsi]
 101e32e:	add    DWORD PTR [rax],eax
 101e330:	(bad)  
 101e331:	(bad)  
 101e332:	add    BYTE PTR [rax],al
 101e334:	jmp    0x101e2b8
 101e336:	add    BYTE PTR [rax],al
 101e338:	jo     0x101e3a9
 101e33a:	add    DWORD PTR [rax],eax
 101e33c:	add    BYTE PTR [rbx-0x7b730000],al
 101e342:	add    BYTE PTR [rax],al
 101e344:	mov    BYTE PTR [rdi+0x1],ch
 101e347:	add    BYTE PTR [rbp+0x58000084],cl
 101e34d:	test   DWORD PTR [rax],eax
 101e34f:	add    BYTE PTR [rax+0x6000016f],ah
 101e355:	test   DWORD PTR [rax],eax
 101e357:	add    ch,cl
 101e359:	xchg   BYTE PTR [rax],al
 101e35b:	add    BYTE PTR [rdi+rbp*2-0x791fffff],dh
 101e362:	add    BYTE PTR [rax],al
 101e364:	add    eax,0xcc000087
 101e369:	outs   dx,DWORD PTR ds:[rsi]
 101e36a:	add    DWORD PTR [rax],eax
 101e36c:	add    eax,0x48000087
 101e371:	xchg   DWORD PTR [rax],eax
 101e373:	add    ah,dl
 101e375:	outs   dx,DWORD PTR ds:[rsi]
 101e376:	add    DWORD PTR [rax],eax
 101e378:	xchg   QWORD PTR [rax],rax
 101e37b:	add    BYTE PTR [rbx-0x79],dl
 101e37e:	add    BYTE PTR [rax],al
 101e380:	call   0x6101e4f4
 101e385:	xchg   DWORD PTR [rax],eax
 101e387:	add    BYTE PTR [rcx-0x7ffff79],ah
 101e38d:	outs   dx,DWORD PTR ds:[rsi]
 101e38e:	add    DWORD PTR [rax],eax
 101e390:	mov    al,0x87
 101e392:	add    BYTE PTR [rax],al
 101e394:	or     al,0x8d
 101e396:	add    BYTE PTR [rax],al
 101e398:	add    BYTE PTR [rax+0x1],dh
 101e39b:	add    BYTE PTR [rax],ah
 101e39d:	lea    eax,[rax]
 101e39f:	add    bl,cl
 101e3a1:	xchg   ebp,eax
 101e3a2:	add    BYTE PTR [rax],al
 101e3a4:	pop    rax
 101e3a5:	jo     0x101e3a8
 101e3a7:	add    al,ah
 101e3a9:	xchg   ebp,eax
 101e3aa:	add    BYTE PTR [rax],al
 101e3ac:	not    DWORD PTR [rbp+0x71900000]
 101e3b2:	add    DWORD PTR [rax],eax
 101e3b4:	add    BYTE PTR [rsi-0x69980000],dl
 101e3ba:	add    BYTE PTR [rax],al
 101e3bc:	cwde   
 101e3bd:	jno    0x101e3c0
 101e3bf:	add    BYTE PTR [rax-0x63ffff6a],al
 101e3c5:	xchg   edi,eax
 101e3c6:	add    BYTE PTR [rax],al
 101e3c8:	movabs al,ds:0xa4000097b0000171
 101e3d1:	cwde   
 101e3d2:	add    BYTE PTR [rax],al
 101e3d4:	sub    al,0x72
 101e3d6:	add    DWORD PTR [rax],eax
 101e3d8:	mov    al,0x98
 101e3da:	add    BYTE PTR [rax],al
 101e3dc:	mov    edi,0x88000098
 101e3e1:	jb     0x101e3e4
 101e3e3:	add    BYTE PTR [rdi+0x6000098],bh
 101e3e9:	cdq    
 101e3ea:	add    BYTE PTR [rax],al
 101e3ec:	xchg   esp,eax
 101e3ed:	jb     0x101e3f0
 101e3ef:	add    BYTE PTR [rsi],al
 101e3f1:	cdq    
 101e3f2:	add    BYTE PTR [rax],al
 101e3f4:	or     BYTE PTR [rcx+0x72a80000],bl
 101e3fa:	add    DWORD PTR [rax],eax
 101e3fc:	adc    BYTE PTR [rcx-0x664c0000],bl
 101e402:	add    BYTE PTR [rax],al
 101e404:	mov    eax,0xc0000172
 101e409:	cdq    
 101e40a:	add    BYTE PTR [rax],al
 101e40c:	(bad)  
 101e40d:	cdq    
 101e40e:	add    BYTE PTR [rax],al
 101e410:	shl    BYTE PTR [rdx+0x1],0x0
 101e414:	(bad)  
 101e415:	cdq    
 101e416:	add    BYTE PTR [rax],al
 101e418:	sub    DWORD PTR [rdx+0x72cc0000],ebx
 101e41e:	add    DWORD PTR [rax],eax
 101e420:	sub    DWORD PTR [rdx-0x65c10000],ebx
 101e426:	add    BYTE PTR [rax],al
 101e428:	in     al,0x72
 101e42a:	add    DWORD PTR [rax],eax
 101e42c:	push   rax
 101e42d:	(bad)  
 101e42e:	add    BYTE PTR [rax],al
 101e430:	(bad)  
 101e431:	(bad)  
 101e432:	add    BYTE PTR [rax],al
 101e434:	hlt    
 101e435:	jb     0x101e438
 101e437:	add    al,dl
 101e439:	(bad)  
 101e43a:	add    BYTE PTR [rax],al
 101e43c:	call   FWORD PTR [rdx+0x73a40000]
 101e442:	add    DWORD PTR [rax],eax
 101e444:	adc    BYTE PTR [rbx-0x63060000],bl
 101e44a:	add    BYTE PTR [rax],al
 101e44c:	lods   al,BYTE PTR ds:[rsi]
 101e44d:	jae    0x101e450
 101e44f:	add    BYTE PTR [rax],al
 101e451:	popf   
 101e452:	add    BYTE PTR [rax],al
 101e454:	pushf  
 101e455:	popf   
 101e456:	add    BYTE PTR [rax],al
 101e458:	shl    BYTE PTR [rbx+0x1],0x0
 101e45c:	pushf  
 101e45d:	popf   
 101e45e:	add    BYTE PTR [rax],al
 101e460:	mov    DWORD PTR [rsi+0x73d40000],ebx
 101e466:	add    DWORD PTR [rax],eax
 101e468:	mov    DWORD PTR [rsi-0x615e0000],ebx
 101e46e:	add    BYTE PTR [rax],al
 101e470:	in     al,dx
 101e471:	jae    0x101e474
 101e473:	add    BYTE PTR [rax-0xdffff62],dh
 101e479:	lahf   
 101e47a:	add    BYTE PTR [rax],al
 101e47c:	cld    
 101e47d:	jae    0x101e480
 101e47f:	add    dl,dh
 101e481:	lahf   
 101e482:	add    BYTE PTR [rax],al
 101e484:	sub    al,0xa0
 101e486:	add    BYTE PTR [rax],al
 101e488:	or     al,0x74
 101e48a:	add    DWORD PTR [rax],eax
 101e48c:	sub    al,0xa0
 101e48e:	add    BYTE PTR [rax],al
 101e490:	push   rcx
 101e491:	movabs al,ds:0xa051000174200000
 101e49a:	add    BYTE PTR [rax],al
 101e49c:	pushf  
 101e49d:	movabs al,ds:0xa0b0000174340000
 101e4a6:	add    BYTE PTR [rax],al
 101e4a8:	fsub   QWORD PTR [rax+0x74440000]
 101e4ae:	add    DWORD PTR [rax],eax
 101e4b0:	fsub   QWORD PTR [rax-0x5eb40000]
 101e4b6:	add    BYTE PTR [rax],al
 101e4b8:	push   rsp
 101e4b9:	je     0x101e4bc
 101e4bb:	add    BYTE PTR [rcx+riz*4+0x0],cl
 101e4bf:	add    BYTE PTR [rbp-0x5f],ch
 101e4c2:	add    BYTE PTR [rax],al
 101e4c4:	ins    BYTE PTR es:[rdi],dx
 101e4c5:	je     0x101e4c8
 101e4c7:	add    BYTE PTR [rax-0x6fffff5f],al
 101e4cd:	movabs eax,ds:0xa1900001747c0000
 101e4d6:	add    BYTE PTR [rax],al
 101e4d8:	movabs es:0xa226000174880000,al
 101e4e2:	add    BYTE PTR [rax],al
 101e4e4:	rex.R movabs ds:0xa260000174a40000,al
 101e4ee:	add    BYTE PTR [rax],al
 101e4f0:	cmp    BYTE PTR [rsi+0x74b40000],ah
 101e4f6:	add    DWORD PTR [rax],eax
 101e4f8:	rex cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 101e4fa:	add    BYTE PTR [rax],al
 101e4fc:	pop    rdi
 101e4fd:	stos   BYTE PTR es:[rdi],al
 101e4fe:	add    BYTE PTR [rax],al
 101e500:	rex.WR jne 0x101e504
 101e503:	add    BYTE PTR [rax-0x56],dh
 101e506:	add    BYTE PTR [rax],al
 101e508:	sub    dh,BYTE PTR [rbx+0x75b80000]
 101e50e:	add    DWORD PTR [rax],eax
 101e510:	xor    BYTE PTR [rbx-0x49d40000],dh
 101e516:	add    BYTE PTR [rax],al
 101e518:	pop    rsp
 101e519:	ja     0x101e51c
 101e51b:	add    BYTE PTR [rax-0x4a],al
 101e51e:	add    BYTE PTR [rax],al
 101e520:	push   rdi
 101e521:	mov    dh,0x0
 101e523:	add    BYTE PTR [rax+0x60000177],ah
 101e529:	mov    dh,0x0
 101e52b:	add    BYTE PTR [rdi-0x49],al
 101e52e:	add    BYTE PTR [rax],al
 101e530:	test   al,0x77
 101e532:	add    DWORD PTR [rax],eax
 101e534:	push   rax
 101e535:	mov    bh,0x0
 101e537:	add    BYTE PTR [rdi-0x48],dh
 101e53a:	add    BYTE PTR [rax],al
 101e53c:	shl    BYTE PTR [rdi+0x1],0x0
 101e540:	cmp    BYTE PTR [rax-0x47320000],0x0
 101e547:	add    ah,bl
 101e549:	ja     0x101e54c
 101e54b:	add    dh,cl
 101e54d:	mov    eax,0xb8ee0000
 101e552:	add    BYTE PTR [rax],al
 101e554:	in     al,dx
 101e555:	ja     0x101e558
 101e557:	add    dh,ch
 101e559:	mov    eax,0xb9d30000
 101e55e:	add    BYTE PTR [rax],al
 101e560:	add    BYTE PTR [rax+0x1],bh
 101e563:	add    al,ah
 101e565:	mov    ecx,0xba620000
 101e56a:	add    BYTE PTR [rax],al
 101e56c:	adc    BYTE PTR [rax+0x1],bh
 101e56f:	add    BYTE PTR [rax-0x46],dh
 101e572:	add    BYTE PTR [rax],al
 101e574:	and    eax,0x200000bb
 101e579:	js     0x101e57c
 101e57b:	add    BYTE PTR [rax],dh
 101e57d:	mov    ebx,0xbd980000
 101e582:	add    BYTE PTR [rax],al
 101e584:	xor    al,0x78
 101e586:	add    DWORD PTR [rax],eax
 101e588:	movabs al,ds:0x740000be0f0000bd
 101e591:	js     0x101e594
 101e593:	add    BYTE PTR [rax],ah
 101e595:	mov    esi,0xbee90000
 101e59a:	add    BYTE PTR [rax],al
 101e59c:	test   BYTE PTR [rax+0x1],bh
 101e59f:	add    al,dh
 101e5a1:	mov    esi,0xbfc90000
 101e5a6:	add    BYTE PTR [rax],al
 101e5a8:	(bad)  
 101e5a9:	js     0x101e5ac
 101e5ab:	add    al,dl
 101e5ad:	mov    edi,0xc1940000
 101e5b2:	add    BYTE PTR [rax],al
 101e5b4:	add    al,0x79
 101e5b6:	add    DWORD PTR [rax],eax
 101e5b8:	movabs al,ds:0x1c0000c2170000c1
 101e5c1:	jns    0x101e5c4
 101e5c3:	add    BYTE PTR [rax],ah
 101e5c5:	ret    0x0
 101e5c8:	cmp    eax,edx
 101e5ca:	add    BYTE PTR [rax],al
 101e5cc:	xor    BYTE PTR [rcx+0x1],bh
 101e5cf:	add    BYTE PTR [rax-0x3e],dl
 101e5d2:	add    BYTE PTR [rax],al
 101e5d4:	sbb    ebx,eax
 101e5d6:	add    BYTE PTR [rax],al
 101e5d8:	cmp    BYTE PTR [rcx+0x1],bh
 101e5db:	add    BYTE PTR [rax],ah
 101e5dd:	ret    
 101e5de:	add    BYTE PTR [rax],al
 101e5e0:	fadd   st,st(4)
 101e5e2:	add    BYTE PTR [rax],al
 101e5e4:	push   rax
 101e5e5:	jns    0x101e5e8
 101e5e7:	add    al,ah
 101e5e9:	(bad)  
 101e5ea:	add    BYTE PTR [rax],al
 101e5ec:	mov    ebp,es
 101e5ee:	add    BYTE PTR [rax],al
 101e5f0:	and    BYTE PTR [rdx+0x1],bh
 101e5f3:	add    BYTE PTR [rax-0x57ffff3b],ah
 101e5f9:	enter  0x0,0xcc
 101e5fd:	jp     0x101e600
 101e5ff:	add    BYTE PTR [rax+0x20000c8],dh
 101e605:	retf   0x0
 101e608:	mov    esp,0x1000017b
 101e60d:	retf   0x0
 101e610:	(bad)  
 101e611:	int    0x0
 101e613:	add    BYTE PTR [rax+0x4000017c],cl
 101e619:	int    0x0
 101e61b:	add    BYTE PTR [rsi+rcx*8],dl
 101e61e:	add    BYTE PTR [rax],al
 101e620:	mov    esp,0x2000017d
 101e625:	(bad)  
 101e626:	add    BYTE PTR [rax],al
 101e628:	sub    dl,cl
 101e62a:	add    BYTE PTR [rax],al
 101e62c:	push   0x3000017e
 101e631:	rol    DWORD PTR [rax],1
 101e633:	add    BYTE PTR [rbp-0x2e],bh
 101e636:	add    BYTE PTR [rax],al
 101e638:	pop    rax
 101e639:	jg     0x101e63c
 101e63b:	add    BYTE PTR [rax-0x5fffff2e],dl
 101e641:	rol    DWORD PTR [rax],cl
 101e643:	add    BYTE PTR [rax+rax*4],ah
 101e646:	add    DWORD PTR [rax],eax
 101e648:	mov    al,0xd3
 101e64a:	add    BYTE PTR [rax],al
 101e64c:	jns    0x101e622
 101e64e:	add    BYTE PTR [rax],al
 101e650:	rex.R add BYTE PTR [rcx],0x0
 101e654:	adc    ah,0x0
 101e657:	add    BYTE PTR [rsi],ch
 101e659:	(bad)  
 101e65a:	add    BYTE PTR [rax],al
 101e65c:	add    BYTE PTR [rax-0x2acbffff],0x0
 101e663:	add    BYTE PTR [rcx-0x43ffff2b],bl
 101e669:	add    BYTE PTR [rcx],0x0
 101e66c:	movabs al,ds:0xcc0000d7200000d5
 101e675:	add    BYTE PTR [rcx],0x0
 101e678:	sub    bh,dl
 101e67a:	add    BYTE PTR [rax],al
 101e67c:	not    bh
 101e67e:	add    BYTE PTR [rax],al
 101e680:	lock add BYTE PTR [rcx],0x0
 101e684:	cld    
 101e685:	xlat   BYTE PTR ds:[rbx]
 101e686:	add    BYTE PTR [rax],al
 101e688:	(bad)  
 101e689:	fadd   DWORD PTR [rax]
 101e68b:	add    al,bh
 101e68d:	add    BYTE PTR [rcx],0x0
 101e690:	and    al,bl
 101e692:	add    BYTE PTR [rax],al
 101e694:	push   0xffffffffffffffd8
 101e696:	add    BYTE PTR [rax],al
 101e698:	or     BYTE PTR [rcx-0x278fffff],al
 101e69e:	add    BYTE PTR [rax],al
 101e6a0:	int    0xd8
 101e6a2:	add    BYTE PTR [rax],al
 101e6a4:	cmp    BYTE PTR [rcx-0x272bffff],al
 101e6aa:	add    BYTE PTR [rax],al
 101e6ac:	(bad)  
 101e6ad:	fiadd  DWORD PTR [rax]
 101e6af:	add    BYTE PTR [rax-0x7f],ah
 101e6b2:	add    DWORD PTR [rax],eax
 101e6b4:	rex.W fiadd DWORD PTR [rax]
 101e6b7:	add    BYTE PTR [rbx+0x680000da],ch
 101e6bd:	add    DWORD PTR [rcx],0xdab400
 101e6c3:	add    cl,dl
 101e6c5:	fiadd  DWORD PTR [rax]
 101e6c7:	add    BYTE PTR [rax-0x7f],dh
 101e6ca:	add    DWORD PTR [rax],eax
 101e6cc:	lock fiadd DWORD PTR [rax]
 101e6cf:	add    BYTE PTR [rdi],cl
 101e6d1:	fild   DWORD PTR [rax]
 101e6d3:	add    BYTE PTR [rax-0x7f],bh
 101e6d6:	add    DWORD PTR [rax],eax
 101e6d8:	sbb    bl,bl
 101e6da:	add    BYTE PTR [rax],al
 101e6dc:	sbb    ebx,0x817c0000
 101e6e2:	add    DWORD PTR [rax],eax
 101e6e4:	mov    bl,bl
 101e6e6:	add    BYTE PTR [rax],al
 101e6e8:	(bad)  
 101e6e9:	fadd   QWORD PTR [rax]
 101e6eb:	add    BYTE PTR [rcx+rax*4-0x23dfffff],cl
 101e6f2:	add    BYTE PTR [rax],al
 101e6f4:	mov    ah,0xdc
 101e6f6:	add    BYTE PTR [rax],al
 101e6f8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101e6f9:	add    DWORD PTR [rcx],0xdd1c00
 101e6ff:	add    BYTE PTR [rbp-0x23],bl
 101e702:	add    BYTE PTR [rax],al
 101e704:	mov    esp,0x64000181
 101e709:	fld    QWORD PTR [rax]
 101e70b:	add    BYTE PTR [rbp+rbx*8+0x0],bh
 101e70f:	add    ah,al
 101e711:	add    DWORD PTR [rcx],0xdd9000
 101e717:	add    BYTE PTR [rax-0x22],al
 101e71a:	add    BYTE PTR [rax],al
 101e71c:	(bad)  
 101e71d:	add    DWORD PTR [rcx],0xde4800
 101e723:	add    BYTE PTR [rdi-0x22],bl
 101e726:	add    BYTE PTR [rax],al
 101e728:	hlt    
 101e729:	add    DWORD PTR [rcx],0xde6800
 101e72f:	add    BYTE PTR [rax-0x3ffff22],ah
 101e735:	add    DWORD PTR [rcx],0xdea800
 101e73b:	add    al,ah
 101e73d:	fiadd  WORD PTR [rax]
 101e73f:	add    BYTE PTR [rax],cl
 101e741:	(bad)  
 101e742:	add    DWORD PTR [rax],eax
 101e744:	nop
 101e745:	fild   WORD PTR [rax]
 101e747:	add    cl,dl
 101e749:	fild   WORD PTR [rax]
 101e74b:	add    BYTE PTR [rdx+rax*4],bl
 101e74e:	add    DWORD PTR [rax],eax
 101e750:	or     al,ah
 101e752:	add    BYTE PTR [rax],al
 101e754:	mov    ebx,0x3c0000e0
 101e759:	(bad)  
 101e75a:	add    DWORD PTR [rax],eax
 101e75c:	or     al,0xe1
 101e75e:	add    BYTE PTR [rax],al
 101e760:	test   cl,ah
 101e762:	add    BYTE PTR [rax],al
 101e764:	rex.W (bad) 
 101e766:	add    DWORD PTR [rax],eax
 101e768:	mov    ecx,fs
 101e76a:	add    BYTE PTR [rax],al
 101e76c:	int3   
 101e76d:	loope  0x101e76f
 101e76f:	add    BYTE PTR [rdx+rax*4-0x1e2bffff],cl
 101e776:	add    BYTE PTR [rax],al
 101e778:	pop    rdi
 101e779:	loop   0x101e77b
 101e77b:	add    BYTE PTR [rax+0x68000182],bl
 101e781:	loop   0x101e783
 101e783:	add    BYTE PTR [rip+0xffffffffac0000e3],cl        # 0xffffffffad01e86c
 101e789:	(bad)  
 101e78a:	add    DWORD PTR [rax],eax
 101e78c:	adc    al,0xe3
 101e78e:	add    BYTE PTR [rax],al
 101e790:	xor    ah,bl
 101e792:	add    BYTE PTR [rax],al
 101e794:	int3   
 101e795:	(bad)  
 101e796:	add    DWORD PTR [rax],eax
 101e798:	cmp    bl,ah
 101e79a:	add    BYTE PTR [rax],al
 101e79c:	pop    rdx
 101e79d:	jrcxz  0x101e79f
 101e79f:	add    ah,dl
 101e7a1:	(bad)  
 101e7a2:	add    DWORD PTR [rax],eax
 101e7a4:	(bad)  
 101e7a5:	jrcxz  0x101e7a7
 101e7a7:	add    BYTE PTR [rdi-0x23ffff1d],ah
 101e7ad:	(bad)  
 101e7ae:	add    DWORD PTR [rax],eax
 101e7b0:	mov    al,0xe3
 101e7b2:	add    BYTE PTR [rax],al
 101e7b4:	(bad)  
 101e7b5:	jrcxz  0x101e7b7
 101e7b7:	add    ah,ah
 101e7b9:	(bad)  
 101e7ba:	add    DWORD PTR [rax],eax
 101e7bc:	(bad)  
 101e7bd:	jrcxz  0x101e7bf
 101e7bf:	add    BYTE PTR [rbx],ch
 101e7c1:	in     al,0x0
 101e7c3:	add    ah,ch
 101e7c5:	(bad)  
 101e7c6:	add    DWORD PTR [rax],eax
 101e7c8:	xor    al,0xe4
 101e7ca:	add    BYTE PTR [rax],al
 101e7cc:	rex.WRB in al,0x0
 101e7cf:	add    ah,bh
 101e7d1:	(bad)  
 101e7d2:	add    DWORD PTR [rax],eax
 101e7d4:	push   rsp
 101e7d5:	in     al,0x0
 101e7d7:	add    BYTE PTR [rbx-0x1c],ah
 101e7da:	add    BYTE PTR [rax],al
 101e7dc:	add    al,0x83
 101e7de:	add    DWORD PTR [rax],eax
 101e7e0:	ins    BYTE PTR es:[rdi],dx
 101e7e1:	in     al,0x0
 101e7e3:	add    BYTE PTR [rsi-0x1c],dh
 101e7e6:	add    BYTE PTR [rax],al
 101e7e8:	or     al,0x83
 101e7ea:	add    DWORD PTR [rax],eax
 101e7ec:	jl     0x101e7d2
 101e7ee:	add    BYTE PTR [rax],al
 101e7f0:	scas   al,BYTE PTR es:[rdi]
 101e7f1:	in     al,0x0
 101e7f3:	add    BYTE PTR [rbx+rax*4],dl
 101e7f6:	add    DWORD PTR [rax],eax
 101e7f8:	mov    ah,0xe4
 101e7fa:	add    BYTE PTR [rax],al
 101e7fc:	ss in  eax,0x0
 101e7ff:	add    BYTE PTR [rax],ah
 101e801:	add    DWORD PTR [rcx],0x0
 101e804:	cmp    al,0xe5
 101e806:	add    BYTE PTR [rax],al
 101e808:	(bad)  
 101e809:	in     eax,0x0
 101e80b:	add    BYTE PTR [rax],dh
 101e80d:	add    DWORD PTR [rcx],0x0
 101e810:	add    dh,ah
 101e812:	add    BYTE PTR [rax],al
 101e814:	outs   dx,BYTE PTR ds:[rsi]
 101e815:	out    0x0,eax
 101e817:	add    BYTE PTR [rbx+rax*4+0x1],bl
 101e81b:	add    BYTE PTR [rax-0x24ffff19],al
 101e821:	call   0xffffffff8511e826
 101e826:	add    DWORD PTR [rax],eax
 101e828:	lock call 0xffffffffea16e82e
 101e82e:	add    BYTE PTR [rax],al
 101e830:	sub    BYTE PTR [rcx+rax*1+0xe91500],al
 101e837:	add    BYTE PTR [rdx+rbp*8],dh
 101e83a:	add    BYTE PTR [rax],al
 101e83c:	cmp    al,0x84
 101e83e:	add    DWORD PTR [rax],eax
 101e840:	xor    al,0xea
 101e842:	add    BYTE PTR [rax],al
 101e844:	ss (bad) 
 101e846:	add    BYTE PTR [rax],al
 101e848:	pop    rax
 101e849:	test   BYTE PTR [rcx],al
 101e84b:	add    BYTE PTR [rax-0x16],al
 101e84e:	add    BYTE PTR [rax],al
 101e850:	in     al,dx
 101e851:	(bad)  
 101e852:	add    BYTE PTR [rax],al
 101e854:	push   0xffffffffec000184
 101e859:	(bad)  
 101e85a:	add    BYTE PTR [rax],al
 101e85c:	test   ebx,ebp
 101e85e:	add    BYTE PTR [rax],al
 101e860:	je     0x101e7e6
 101e862:	add    DWORD PTR [rax],eax
 101e864:	test   ebx,ebp
 101e866:	add    BYTE PTR [rax],al
 101e868:	(bad)  
 101e869:	jmp    0x101e86b
 101e86b:	add    BYTE PTR [rax-0x72fffe7c],cl
 101e871:	jmp    0x101e873
 101e873:	add    BYTE PTR [rbx+rbp*8-0x7b680000],bl
 101e87a:	add    DWORD PTR [rax],eax
 101e87c:	mov    al,0xeb
 101e87e:	add    BYTE PTR [rax],al
 101e880:	popf   
 101e881:	in     al,dx
 101e882:	add    BYTE PTR [rax],al
 101e884:	lods   al,BYTE PTR ds:[rsi]
 101e885:	test   BYTE PTR [rcx],al
 101e887:	add    BYTE PTR [rax+0x640000ec],dh
 101e88d:	repz add BYTE PTR [rax],al
 101e890:	(bad)  
 101e891:	test   BYTE PTR [rcx],al
 101e893:	add    BYTE PTR [rax-0xd],dh
 101e896:	add    BYTE PTR [rax],al
 101e898:	sahf   
 101e899:	repz add BYTE PTR [rax],al
 101e89c:	in     al,0x84
 101e89e:	add    DWORD PTR [rax],eax
 101e8a0:	sahf   
 101e8a1:	repz add BYTE PTR [rax],al
 101e8a4:	(bad)  
 101e8a5:	repz add BYTE PTR [rax],al
 101e8a8:	lock test BYTE PTR [rcx],al
 101e8ab:	add    ah,dl
 101e8ad:	repz add BYTE PTR [rax],al
 101e8b0:	in     al,0xf3
 101e8b2:	add    BYTE PTR [rax],al
 101e8b4:	add    al,0x85
 101e8b6:	add    DWORD PTR [rax],eax
 101e8b8:	in     al,0xf3
 101e8ba:	add    BYTE PTR [rax],al
 101e8bc:	jmp    0x101e8b1
 101e8be:	add    BYTE PTR [rax],al
 101e8c0:	sbb    BYTE PTR [rbp-0xbffffff],al
 101e8c6:	add    BYTE PTR [rax],al
 101e8c8:	(bad)  
 101e8c9:	hlt    
 101e8ca:	add    BYTE PTR [rax],al
 101e8cc:	sub    BYTE PTR [rbp-0xbe1ffff],al
 101e8d2:	add    BYTE PTR [rax],al
 101e8d4:	(bad)  
 101e8d5:	hlt    
 101e8d6:	add    BYTE PTR [rax],al
 101e8d8:	xor    BYTE PTR [rbp-0xb72ffff],al
 101e8de:	add    BYTE PTR [rax],al
 101e8e0:	sahf   
 101e8e1:	hlt    
 101e8e2:	add    BYTE PTR [rax],al
 101e8e4:	test   DWORD PTR [rcx],r8d
 101e8e7:	add    BYTE PTR [rsi-0x50ffff0c],bl
 101e8ed:	hlt    
 101e8ee:	add    BYTE PTR [rax],al
 101e8f0:	pop    rax
 101e8f1:	test   DWORD PTR [rcx],eax
 101e8f3:	add    BYTE PTR [rdi-0x3fffff0c],ch
 101e8f9:	hlt    
 101e8fa:	add    BYTE PTR [rax],al
 101e8fc:	ins    BYTE PTR es:[rdi],dx
 101e8fd:	test   DWORD PTR [rcx],eax
 101e8ff:	add    al,dl
 101e901:	hlt    
 101e902:	add    BYTE PTR [rax],al
 101e904:	(bad)  
 101e905:	cmc    
 101e906:	add    BYTE PTR [rax],al
 101e908:	add    BYTE PTR [rbp-0xa8fffff],0x0
 101e90f:	add    BYTE PTR [rax],al
 101e911:	test   BYTE PTR [rax],0x0
 101e914:	mov    BYTE PTR [rbp-0x9efffff],al
 101e91a:	add    BYTE PTR [rax],al
 101e91c:	stos   BYTE PTR es:[rdi],al
 101e91d:	clc    
 101e91e:	add    BYTE PTR [rax],al
 101e920:	nop
 101e921:	test   DWORD PTR [rcx],eax
 101e923:	add    BYTE PTR [rax-0x3fffff08],dh
 101e929:	stc    
 101e92a:	add    BYTE PTR [rax],al
 101e92c:	mov    ah,0x85
 101e92e:	add    DWORD PTR [rax],eax
 101e930:	sar    cl,1
 101e932:	add    BYTE PTR [rax],al
 101e934:	stc    
 101e935:	stc    
 101e936:	add    BYTE PTR [rax],al
 101e938:	enter  0x185,0x0
 101e93c:	stc    
 101e93d:	stc    
 101e93e:	add    BYTE PTR [rax],al
 101e940:	mov    edx,?
 101e942:	add    BYTE PTR [rax],al
 101e944:	fadd   DWORD PTR [rbp-0x573ffff]
 101e94a:	add    BYTE PTR [rax],al
 101e94c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101e94d:	cli    
 101e94e:	add    BYTE PTR [rax],al
 101e950:	in     al,dx
 101e951:	test   DWORD PTR [rcx],eax
 101e953:	add    BYTE PTR [rax-0x21ffff06],dh
 101e959:	inc    BYTE PTR [rax]
 101e95b:	add    ah,bh
 101e95d:	test   DWORD PTR [rcx],eax
 101e95f:	add    al,dh
 101e961:	inc    BYTE PTR [rax]
 101e963:	add    BYTE PTR [rip+0xffffffffc40000ff],cl        # 0xffffffffc501ea68
 101e969:	xchg   BYTE PTR [rcx],al
 101e96b:	add    BYTE PTR [rcx],bl
 101e96d:	inc    DWORD PTR [rax]
 101e96f:	add    BYTE PTR [rax-0x33ffff01],dl
 101e975:	xchg   BYTE PTR [rcx],al
 101e977:	add    BYTE PTR [rax+0x30000ff],dh
 101e97d:	or     BYTE PTR [rcx],al
 101e97f:	add    ah,bl
 101e981:	xchg   BYTE PTR [rcx],al
 101e983:	add    BYTE PTR [rax],dl
 101e985:	or     BYTE PTR [rcx],al
 101e987:	add    BYTE PTR [rdi-0x2bfffef8],cl
 101e98d:	xchg   BYTE PTR [rcx],al
 101e98f:	add    BYTE PTR [rax+0x108],ah
 101e995:	or     DWORD PTR [rcx],eax
 101e997:	add    BYTE PTR [rax],al
 101e999:	xchg   DWORD PTR [rcx],eax
 101e99b:	add    BYTE PTR [rax],dl
 101e99d:	or     DWORD PTR [rcx],eax
 101e99f:	add    BYTE PTR [rcx+rcx*1-0x78f7ffff],cl
 101e9a6:	add    DWORD PTR [rax],eax
 101e9a8:	movabs al,ds:0x10000109dd000109
 101e9b1:	xchg   DWORD PTR [rcx],eax
 101e9b3:	add    al,dh
 101e9b5:	or     DWORD PTR [rcx],eax
 101e9b7:	add    BYTE PTR [rsi+0xa],dl
 101e9ba:	add    DWORD PTR [rax],eax
 101e9bc:	sbb    BYTE PTR [rdi+0xa600001],al
 101e9c2:	add    DWORD PTR [rax],eax
 101e9c4:	add    ecx,DWORD PTR [rbx]
 101e9c6:	add    DWORD PTR [rax],eax
 101e9c8:	and    BYTE PTR [rdi+0xb100001],al
 101e9ce:	add    DWORD PTR [rax],eax
 101e9d0:	sti    
 101e9d1:	or     eax,DWORD PTR [rcx]
 101e9d3:	add    BYTE PTR [rax],ch
 101e9d5:	xchg   DWORD PTR [rcx],eax
 101e9d7:	add    BYTE PTR [rax],dh
 101e9d9:	or     al,0x1
 101e9db:	add    BYTE PTR [rax+0xc],ah
 101e9de:	add    DWORD PTR [rax],eax
 101e9e0:	xor    BYTE PTR [rdi+0xc700001],al
 101e9e6:	add    DWORD PTR [rax],eax
 101e9e8:	(bad)  
 101e9e9:	or     al,0x1
 101e9eb:	add    BYTE PTR [rax],bh
 101e9ed:	xchg   DWORD PTR [rcx],eax
 101e9ef:	add    BYTE PTR [rdi-0x1dfffef4],cl
 101e9f5:	or     al,0x1
 101e9f7:	add    BYTE PTR [rdi+rax*4+0x1],al
 101e9fb:	add    dl,ah
 101e9fd:	or     al,0x1
 101e9ff:	add    BYTE PTR [rdi+rcx*1],dh
 101ea02:	add    DWORD PTR [rax],eax
 101ea04:	pop    rsp
 101ea05:	xchg   DWORD PTR [rcx],eax
 101ea07:	add    BYTE PTR [rdi+rcx*1],dh
 101ea0a:	add    DWORD PTR [rax],eax
 101ea0c:	imul   ecx,DWORD PTR [rdi],0x1
 101ea0f:	add    BYTE PTR [rdi+rax*4+0x1],bh
 101ea13:	add    BYTE PTR [rbx+0xf],ch
 101ea16:	add    DWORD PTR [rax],eax
 101ea18:	xchg   ebx,eax
 101ea19:	sgdt   [rax]
 101ea1c:	mov    WORD PTR [rdi+0xfa00001],es
 101ea22:	add    DWORD PTR [rax],eax
 101ea24:	rcl    DWORD PTR [rcx],cl
 101ea26:	add    DWORD PTR [rax],eax
 101ea28:	pushf  
 101ea29:	xchg   DWORD PTR [rcx],eax
 101ea2b:	add    al,ah
 101ea2d:	adc    DWORD PTR [rcx],eax
 101ea2f:	add    BYTE PTR [rsi],al
 101ea31:	adc    al,BYTE PTR [rcx]
 101ea33:	add    BYTE PTR [rdi+rax*4+0x12060001],bh
 101ea3a:	add    DWORD PTR [rax],eax
 101ea3c:	rex.X adc al,BYTE PTR [rcx]
 101ea3f:	add    ah,al
 101ea41:	xchg   DWORD PTR [rcx],eax
 101ea43:	add    BYTE PTR [rdx+0x12],al
 101ea46:	add    DWORD PTR [rax],eax
 101ea48:	push   rcx
 101ea49:	adc    al,BYTE PTR [rcx]
 101ea4b:	add    al,bl
 101ea4d:	xchg   DWORD PTR [rcx],eax
 101ea4f:	add    BYTE PTR [rax+0x12],ah
 101ea52:	add    DWORD PTR [rax],eax
 101ea54:	adc    eax,0xf4000113
 101ea59:	xchg   DWORD PTR [rcx],eax
 101ea5b:	add    BYTE PTR [rax],ah
 101ea5d:	adc    eax,DWORD PTR [rcx]
 101ea5f:	add    cl,ah
 101ea61:	adc    eax,DWORD PTR [rcx]
 101ea63:	add    ah,bh
 101ea65:	xchg   DWORD PTR [rcx],eax
 101ea67:	add    al,dh
 101ea69:	adc    eax,DWORD PTR [rcx]
 101ea6b:	add    BYTE PTR [rdx+0x14],cl
 101ea6e:	add    DWORD PTR [rax],eax
 101ea70:	adc    al,0x88
 101ea72:	add    DWORD PTR [rax],eax
 101ea74:	rex.WX adc al,0x1
 101ea77:	add    BYTE PTR [rsi],al
 101ea79:	adc    eax,0x882c0001
 101ea7e:	add    DWORD PTR [rax],eax
 101ea80:	(bad)  
 101ea81:	adc    eax,0x151f0001
 101ea86:	add    DWORD PTR [rax],eax
 101ea88:	mov    BYTE PTR [rcx],al
 101ea8b:	add    BYTE PTR [rax],dh
 101ea8d:	adc    eax,0x156a0001
 101ea92:	add    DWORD PTR [rax],eax
 101ea94:	push   rax
 101ea95:	mov    BYTE PTR [rcx],al
 101ea97:	add    BYTE PTR [rdx+0x15],ch
 101ea9a:	add    DWORD PTR [rax],eax
 101ea9c:	pop    rbx
 101ea9d:	(bad)  
 101ea9e:	add    DWORD PTR [rax],eax
 101eaa0:	(bad)  
 101eaa1:	mov    BYTE PTR [rcx],al
 101eaa3:	add    BYTE PTR [rbx+0x16],bl
 101eaa6:	add    DWORD PTR [rax],eax
 101eaa8:	push   0x7c000116
 101eaad:	mov    BYTE PTR [rcx],al
 101eaaf:	add    BYTE PTR [rax+0x16],dh
 101eab2:	add    DWORD PTR [rax],eax
 101eab4:	movabs ds:0xa30001888c000116,eax
 101eabd:	(bad)  
 101eabe:	add    DWORD PTR [rax],eax
 101eac0:	pushf  
 101eac1:	(bad)  
 101eac2:	add    DWORD PTR [rax],eax
 101eac4:	cwde   
 101eac5:	mov    BYTE PTR [rcx],al
 101eac7:	add    BYTE PTR [rdi+rdx*1+0x17a60001],bl
 101eace:	add    DWORD PTR [rax],eax
 101ead0:	mov    esp,0xa6000188
 101ead5:	(bad)  
 101ead6:	add    DWORD PTR [rax],eax
 101ead8:	cmp    bl,BYTE PTR [rax]
 101eada:	add    DWORD PTR [rax],eax
 101eadc:	int3   
 101eadd:	mov    BYTE PTR [rcx],al
 101eadf:	add    BYTE PTR [rax+0x18],al
 101eae2:	add    DWORD PTR [rax],eax
 101eae4:	rcr    DWORD PTR [rax],0x1
 101eae7:	add    al,dh
 101eae9:	mov    BYTE PTR [rcx],al
 101eaeb:	add    al,dl
 101eaed:	sbb    BYTE PTR [rcx],al
 101eaef:	add    BYTE PTR [rcx+rbx*1],dh
 101eaf2:	add    DWORD PTR [rax],eax
 101eaf4:	clc    
 101eaf5:	mov    BYTE PTR [rcx],al
 101eaf7:	add    BYTE PTR [rcx+rbx*1],dh
 101eafa:	add    DWORD PTR [rax],eax
 101eafc:	lahf   
 101eafd:	sbb    DWORD PTR [rcx],eax
 101eaff:	add    BYTE PTR [rax],al
 101eb01:	mov    DWORD PTR [rcx],eax
 101eb03:	add    BYTE PTR [rdi-0x43fffee7],bl
 101eb09:	sbb    DWORD PTR [rcx],eax
 101eb0b:	add    BYTE PTR [rcx+rcx*4],bl
 101eb0e:	add    DWORD PTR [rax],eax
 101eb10:	mov    esp,0xcf000119
 101eb15:	sbb    DWORD PTR [rcx],eax
 101eb17:	add    BYTE PTR [rax],bh
 101eb19:	mov    DWORD PTR [rcx],eax
 101eb1b:	add    al,ah
 101eb1d:	sbb    DWORD PTR [rcx],eax
 101eb1f:	add    BYTE PTR [rcx],cl
 101eb21:	sbb    al,BYTE PTR [rcx]
 101eb23:	add    BYTE PTR [rax-0x77],cl
 101eb26:	add    DWORD PTR [rax],eax
 101eb28:	or     DWORD PTR [rdx],ebx
 101eb2a:	add    DWORD PTR [rax],eax
 101eb2c:	sbb    al,BYTE PTR [rcx]
 101eb2f:	add    BYTE PTR [rax-0x77],dl
 101eb32:	add    DWORD PTR [rax],eax
 101eb34:	sbb    al,BYTE PTR [rcx]
 101eb37:	add    BYTE PTR [rdx+rbx*1-0x7697ffff],ch
 101eb3e:	add    DWORD PTR [rax],eax
 101eb40:	lods   al,BYTE PTR ds:[rsi]
 101eb41:	sbb    al,BYTE PTR [rcx]
 101eb43:	add    ch,ah
 101eb45:	sbb    al,BYTE PTR [rcx]
 101eb47:	add    BYTE PTR [rcx+rcx*4+0x1ae50001],al
 101eb4e:	add    DWORD PTR [rax],eax
 101eb50:	add    BYTE PTR [rbx],bl
 101eb52:	add    DWORD PTR [rax],eax
 101eb54:	movabs al,ds:0x6800011b30000189
 101eb5d:	sbb    eax,DWORD PTR [rcx]
 101eb5f:	add    BYTE PTR [rax+0x70000189],dh
 101eb65:	sbb    eax,DWORD PTR [rcx]
 101eb67:	add    BYTE PTR [rax],al
 101eb69:	sbb    al,0x1
 101eb6b:	add    al,dl
 101eb6d:	mov    DWORD PTR [rcx],eax
 101eb6f:	add    BYTE PTR [rax],dh
 101eb71:	sbb    al,0x1
 101eb73:	add    BYTE PTR [rsp+rbx*1+0x1],cl
 101eb77:	add    al,bl
 101eb79:	mov    DWORD PTR [rcx],eax
 101eb7b:	add    BYTE PTR [rax-0x49fffee4],dh
 101eb81:	sbb    eax,0x89e00001
 101eb86:	add    DWORD PTR [rax],eax
 101eb88:	rcr    BYTE PTR [rip+0x1e970001],0x1        # 0x1f98eb90
 101eb8f:	add    BYTE PTR [rdx+rcx*4],bl
 101eb92:	add    DWORD PTR [rax],eax
 101eb94:	movabs al,ds:0x4800011f2e00011e
 101eb9d:	mov    al,BYTE PTR [rcx]
 101eb9f:	add    BYTE PTR [rax-0x41fffee1],dl
 101eba5:	(bad)  
 101eba6:	add    DWORD PTR [rax],eax
 101eba8:	test   al,0x8a
 101ebaa:	add    DWORD PTR [rax],eax
 101ebac:	mov    esi,0xf700011f
 101ebb1:	(bad)  
 101ebb2:	add    DWORD PTR [rax],eax
 101ebb4:	xchg   esp,eax
 101ebb5:	mov    al,BYTE PTR [rcx]
 101ebb7:	add    bh,dh
 101ebb9:	(bad)  
 101ebba:	add    DWORD PTR [rax],eax
 101ebbc:	(bad)  
 101ebbd:	and    BYTE PTR [rcx],al
 101ebbf:	add    BYTE PTR [rax+0x700018a],al
 101ebc5:	and    BYTE PTR [rcx],al
 101ebc7:	add    BYTE PTR [rsi],cl
 101ebc9:	and    BYTE PTR [rcx],al
 101ebcb:	add    BYTE PTR [rax-0x76],dh
 101ebce:	add    DWORD PTR [rax],eax
 101ebd0:	and    BYTE PTR [rax],ah
 101ebd2:	add    DWORD PTR [rax],eax
 101ebd4:	mov    ch,0x20
 101ebd6:	add    DWORD PTR [rax],eax
 101ebd8:	fmul   DWORD PTR [rdx+0x20b50001]
 101ebde:	add    DWORD PTR [rax],eax
 101ebe0:	pop    rbx
 101ebe1:	and    DWORD PTR [rcx],eax
 101ebe3:	add    ah,al
 101ebe5:	mov    al,BYTE PTR [rcx]
 101ebe7:	add    BYTE PTR [rbx+0x21],bl
 101ebea:	add    DWORD PTR [rax],eax
 101ebec:	jbe    0x101ec0f
 101ebee:	add    DWORD PTR [rax],eax
 101ebf0:	mov    ah,0x8a
 101ebf2:	add    DWORD PTR [rax],eax
 101ebf4:	and    BYTE PTR [rcx],0x1
 101ebf7:	add    BYTE PTR [rbx+0x22],ah
 101ebfa:	add    DWORD PTR [rax],eax
 101ebfc:	in     al,dx
 101ebfd:	mov    al,BYTE PTR [rcx]
 101ebff:	add    BYTE PTR [rax+0x22],dh
 101ec02:	add    DWORD PTR [rax],eax
 101ec04:	(bad)  
 101ec05:	and    al,BYTE PTR [rcx]
 101ec07:	add    BYTE PTR [rax-0x75],dl
 101ec0a:	add    DWORD PTR [rax],eax
 101ec0c:	(bad)  
 101ec0d:	and    al,BYTE PTR [rcx]
 101ec0f:	add    BYTE PTR [rbx+riz*1],bl
 101ec12:	add    DWORD PTR [rax],eax
 101ec14:	cmp    al,0x8b
 101ec16:	add    DWORD PTR [rax],eax
 101ec18:	sbb    al,0x23
 101ec1a:	add    DWORD PTR [rax],eax
 101ec1c:	sub    ah,BYTE PTR [rbx]
 101ec1e:	add    DWORD PTR [rax],eax
 101ec20:	sub    BYTE PTR [rbx+0x232a0001],cl
 101ec26:	add    DWORD PTR [rax],eax
 101ec28:	xor    eax,0x18000123
 101ec2d:	mov    eax,DWORD PTR [rcx]
 101ec2f:	add    BYTE PTR [rax+0x23],al
 101ec32:	add    DWORD PTR [rax],eax
 101ec34:	xchg   esi,eax
 101ec35:	and    al,0x1
 101ec37:	add    BYTE PTR [rax-0x75],bl
 101ec3a:	add    DWORD PTR [rax],eax
 101ec3c:	movabs al,ds:0x8400012523000124
 101ec45:	mov    eax,DWORD PTR [rcx]
 101ec47:	add    BYTE PTR [rax],dh
 101ec49:	and    eax,0x26230001
 101ec4e:	add    DWORD PTR [rax],eax
 101ec50:	nop
 101ec51:	mov    eax,DWORD PTR [rcx]
 101ec53:	add    BYTE PTR [rax],dh
 101ec55:	add    DWORD PTR es:[rax],eax
 101ec58:	jl     0x101ec80
 101ec5a:	add    DWORD PTR [rax],eax
 101ec5c:	fmul   DWORD PTR [rbx+0x267c0001]
 101ec62:	add    DWORD PTR [rax],eax
 101ec64:	call   0xffffffffc501ed8f
 101ec69:	mov    eax,DWORD PTR [rcx]
 101ec6b:	add    al,ch
 101ec6d:	add    DWORD PTR es:[rax],eax
 101ec70:	or     esp,DWORD PTR [rdi]
 101ec72:	add    DWORD PTR [rax],eax
 101ec74:	mov    al,0x8b
 101ec76:	add    DWORD PTR [rax],eax
 101ec78:	or     esp,DWORD PTR [rdi]
 101ec7a:	add    DWORD PTR [rax],eax
 101ec7c:	push   rdi
 101ec7d:	(bad)  
 101ec7e:	add    DWORD PTR [rax],eax
 101ec80:	movabs al,ds:0x8c0001276000018b
 101ec89:	(bad)  
 101ec8a:	add    DWORD PTR [rax],eax
 101ec8c:	or     al,0x8c
 101ec8e:	add    DWORD PTR [rax],eax
 101ec90:	mov    WORD PTR [rdi],fs
 101ec92:	add    DWORD PTR [rax],eax
 101ec94:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 101ec95:	sub    BYTE PTR [rcx],al
 101ec97:	add    ah,dh
 101ec99:	mov    eax,DWORD PTR [rcx]
 101ec9b:	add    BYTE PTR [rsi-0x41fffed8],ah
 101eca1:	sub    BYTE PTR [rcx],al
 101eca3:	add    ah,ah
 101eca5:	mov    eax,DWORD PTR [rcx]
 101eca7:	add    al,dl
 101eca9:	sub    BYTE PTR [rcx],al
 101ecab:	add    dh,al
 101ecad:	sub    DWORD PTR [rcx],eax
 101ecaf:	add    BYTE PTR [rax],bl
 101ecb1:	mov    WORD PTR [rcx],es
 101ecb3:	add    al,dl
 101ecb5:	sub    DWORD PTR [rcx],eax
 101ecb7:	add    BYTE PTR [rbx+0x4800012a],bh
 101ecbd:	mov    WORD PTR [rcx],es
 101ecbf:	add    al,dh
 101ecc1:	sub    al,BYTE PTR [rcx]
 101ecc3:	add    BYTE PTR [rcx+0x2b],cl
 101ecc6:	add    DWORD PTR [rax],eax
 101ecc8:	jo     0x101ec56
 101ecca:	add    DWORD PTR [rax],eax
 101eccc:	push   rax
 101eccd:	sub    eax,DWORD PTR [rcx]
 101eccf:	add    BYTE PTR [rdi+0x2b],dh
 101ecd2:	add    DWORD PTR [rax],eax
 101ecd4:	xchg   esp,eax
 101ecd5:	mov    WORD PTR [rcx],es
 101ecd7:	add    BYTE PTR [rax-0x9fffed5],ah
 101ecdd:	sub    eax,DWORD PTR [rcx]
 101ecdf:	add    BYTE PTR [rsp+rcx*4+0x2c000001],dh
 101ece6:	add    DWORD PTR [rax],eax
 101ece8:	pop    rdx
 101ece9:	sub    al,0x1
 101eceb:	add    al,bl
 101eced:	mov    WORD PTR [rcx],es
 101ecef:	add    al,dl
 101ecf1:	sub    al,0x1
 101ecf3:	add    ah,bl
 101ecf5:	sub    al,0x1
 101ecf7:	add    BYTE PTR [rcx*4+0x2cdc0001],ah
 101ecfe:	add    DWORD PTR [rax],eax
 101ed00:	cmp    ch,BYTE PTR [rip+0xffffffff8d100001]        # 0xffffffff8e11ed07
 101ed06:	add    DWORD PTR [rax],eax
 101ed08:	cmp    ch,BYTE PTR [rip+0x2d410001]        # 0x2e42ed0f
 101ed0e:	add    DWORD PTR [rax],eax
 101ed10:	add    BYTE PTR [rbp+0x2da00001],cl
 101ed16:	add    DWORD PTR [rax],eax
 101ed18:	clc    
 101ed19:	sub    eax,0x8d2c0001
 101ed1e:	add    DWORD PTR [rax],eax
 101ed20:	add    BYTE PTR [rsi],ch
 101ed22:	add    DWORD PTR [rax],eax
 101ed24:	cmp    DWORD PTR [rdi],ebp
 101ed26:	add    DWORD PTR [rax],eax
 101ed28:	xor    al,0x8d
 101ed2a:	add    DWORD PTR [rax],eax
 101ed2c:	rex (bad) 
 101ed2e:	add    DWORD PTR [rax],eax
 101ed30:	(bad)  
 101ed31:	(bad)  
 101ed32:	add    DWORD PTR [rax],eax
 101ed34:	lea    rax,[rcx]
 101ed37:	add    al,dl
 101ed39:	(bad)  
 101ed3a:	add    DWORD PTR [rax],eax
 101ed3c:	(bad)  
 101ed3d:	xor    BYTE PTR [rcx],al
 101ed3f:	add    BYTE PTR [rax-0x73],dh
 101ed42:	add    DWORD PTR [rax],eax
 101ed44:	push   rax
 101ed45:	xor    BYTE PTR [rcx],al
 101ed47:	add    BYTE PTR [rax],al
 101ed49:	xor    DWORD PTR [rcx],eax
 101ed4b:	add    BYTE PTR [rbp+rcx*4+0x1],bh
 101ed4f:	add    BYTE PTR [rax],dl
 101ed51:	xor    DWORD PTR [rcx],eax
 101ed53:	add    BYTE PTR [rsi],bh
 101ed55:	xor    DWORD PTR [rcx],eax
 101ed57:	add    ah,bl
 101ed59:	lea    eax,[rcx]
 101ed5b:	add    BYTE PTR [rsi],bh
 101ed5d:	xor    DWORD PTR [rcx],eax
 101ed5f:	add    BYTE PTR [rdx],cl
 101ed61:	xor    al,BYTE PTR [rcx]
 101ed63:	add    al,al
 101ed65:	lea    eax,[rcx]
 101ed67:	add    BYTE PTR [rdx],cl
 101ed69:	xor    al,BYTE PTR [rcx]
 101ed6b:	add    BYTE PTR [rdx+rsi*1],ch
 101ed6e:	add    DWORD PTR [rax],eax
 101ed70:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101ed71:	lea    eax,[rcx]
 101ed73:	add    BYTE PTR [rdx+rsi*1],ch
 101ed76:	add    DWORD PTR [rax],eax
 101ed78:	cmp    dh,BYTE PTR [rdx]
 101ed7a:	add    DWORD PTR [rax],eax
 101ed7c:	nop
 101ed7d:	lea    eax,[rcx]
 101ed7f:	add    BYTE PTR [rax+0x32],al
 101ed82:	add    DWORD PTR [rax],eax
 101ed84:	push   rsi
 101ed85:	xor    eax,DWORD PTR [rcx]
 101ed87:	add    al,ch
 101ed89:	lea    eax,[rcx]
 101ed8b:	add    BYTE PTR [rax-0x8fffecd],dl
 101ed91:	xor    eax,DWORD PTR [rcx]
 101ed93:	add    ah,bh
 101ed95:	lea    eax,[rcx]
 101ed97:	add    BYTE PTR [rax+0x34],ah
 101ed9a:	add    DWORD PTR [rax],eax
 101ed9c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101ed9d:	xor    al,0x1
 101ed9f:	add    BYTE PTR [rax],cl
 101eda1:	mov    es,WORD PTR [rcx]
 101eda3:	add    al,dl
 101eda5:	xor    eax,0x36600001
 101edaa:	add    DWORD PTR [rax],eax
 101edac:	adc    BYTE PTR [rsi+0x36900001],cl
 101edb2:	add    DWORD PTR [rax],eax
 101edb4:	mov    bh,0x36
 101edb6:	add    DWORD PTR [rax],eax
 101edb8:	sbb    BYTE PTR [rsi+0x36c00001],cl
 101edbe:	add    DWORD PTR [rax],eax
 101edc0:	cs (bad) 
 101edc2:	add    DWORD PTR [rax],eax
 101edc4:	and    BYTE PTR [rsi+0x37400001],cl
 101edca:	add    DWORD PTR [rax],eax
 101edcc:	lahf   
 101edcd:	(bad)  
 101edce:	add    DWORD PTR [rax],eax
 101edd0:	xor    al,0x8e
 101edd2:	add    DWORD PTR [rax],eax
 101edd4:	loopne 0x101ee0d
 101edd6:	add    DWORD PTR [rax],eax
 101edd8:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 101edd9:	cmp    BYTE PTR [rcx],al
 101eddb:	add    BYTE PTR [rax-0x72],al
 101edde:	add    DWORD PTR [rax],eax
 101ede0:	mov    al,0x38
 101ede2:	add    DWORD PTR [rax],eax
 101ede4:	xchg   BYTE PTR [rcx],bh
 101ede6:	add    DWORD PTR [rax],eax
 101ede8:	jl     0x101ed78
 101edea:	add    DWORD PTR [rax],eax
 101edec:	nop
 101eded:	cmp    DWORD PTR [rcx],eax
 101edef:	add    BYTE PTR [rbx-0x77fffec7],bh
 101edf5:	mov    es,WORD PTR [rcx]
 101edf7:	add    al,dl
 101edf9:	cmp    DWORD PTR [rcx],eax
 101edfb:	add    BYTE PTR [rsi+0x3a],bl
 101edfe:	add    DWORD PTR [rax],eax
 101ee00:	nop
 101ee01:	mov    es,WORD PTR [rcx]
 101ee03:	add    BYTE PTR [rax+0x3a],dh
 101ee06:	add    DWORD PTR [rax],eax
 101ee08:	movsxd edi,DWORD PTR [rbx]
 101ee0a:	add    DWORD PTR [rax],eax
 101ee0c:	cwde   
 101ee0d:	mov    es,WORD PTR [rcx]
 101ee0f:	add    BYTE PTR [rax+0x3b],dh
 101ee12:	add    DWORD PTR [rax],eax
 101ee14:	cs cmp al,0x1
 101ee17:	add    BYTE PTR [rax+0x4000018e],ch
 101ee1d:	cmp    al,0x1
 101ee1f:	add    dl,ch
 101ee21:	cmp    al,0x1
 101ee23:	add    BYTE PTR [rax],al
 101ee25:	pop    QWORD PTR [rcx]
 101ee27:	add    dl,ch
 101ee29:	cmp    al,0x1
 101ee2b:	add    BYTE PTR [rcx+0x3d],al
 101ee2e:	add    DWORD PTR [rax],eax
 101ee30:	call   0x4201efc3
 101ee35:	cmp    eax,0x3d510001
 101ee3a:	add    DWORD PTR [rax],eax
 101ee3c:	fmul   DWORD PTR [rsi+0x3d600001]
 101ee42:	add    DWORD PTR [rax],eax
 101ee44:	ret    0x13d
 101ee47:	add    BYTE PTR [rax],dl
 101ee49:	pop    QWORD PTR [rcx]
 101ee4b:	add    al,dl
 101ee4d:	cmp    eax,0x3f270001
 101ee52:	add    DWORD PTR [rax],eax
 101ee54:	xor    al,0x8f
 101ee56:	add    DWORD PTR [rax],eax
 101ee58:	xor    BYTE PTR [rdi],bh
 101ee5a:	add    DWORD PTR [rax],eax
 101ee5c:	xchg   ecx,eax
 101ee5d:	rex add DWORD PTR [rax],eax
 101ee60:	rex pop QWORD PTR [rcx]
 101ee63:	add    BYTE PTR [rax-0x27fffec0],ah
 101ee69:	rex add DWORD PTR [rax],eax
 101ee6c:	mov    WORD PTR [rdi+0x40d80001],cs
 101ee72:	add    DWORD PTR [rax],eax
 101ee74:	ins    BYTE PTR es:[rdi],dx
 101ee75:	add    DWORD PTR [r8],eax
 101ee78:	js     0x101ee09
 101ee7a:	add    DWORD PTR [rax],eax
 101ee7c:	ins    BYTE PTR es:[rdi],dx
 101ee7d:	add    DWORD PTR [r8],eax
 101ee80:	jp     0x101eec3
 101ee82:	add    DWORD PTR [rax],eax
 101ee84:	pop    QWORD PTR fs:[rcx]
 101ee87:	add    BYTE PTR [rdx+0x41],bh
 101ee8a:	add    DWORD PTR [rax],eax
 101ee8c:	xchg   ecx,eax
 101ee8d:	add    DWORD PTR [r8],eax
 101ee90:	push   rsp
 101ee91:	pop    QWORD PTR [rcx]
 101ee93:	add    BYTE PTR [rax-0x27fffebf],ah
 101ee99:	add    DWORD PTR [r8],eax
 101ee9c:	fmul   DWORD PTR [rdi+0x41d80001]
 101eea2:	add    DWORD PTR [rax],eax
 101eea4:	ins    BYTE PTR es:[rdi],dx
 101eea5:	rex.X add DWORD PTR [rax],eax
 101eea8:	(bad)  
 101eea9:	pop    QWORD PTR [rcx]
 101eeab:	add    BYTE PTR [rdx+rax*2+0x1],ch
 101eeaf:	add    BYTE PTR [rdx+0x42],bh
 101eeb2:	add    DWORD PTR [rax],eax
 101eeb4:	mov    al,0x8f
 101eeb6:	add    DWORD PTR [rax],eax
 101eeb8:	jp     0x101eefc
 101eeba:	add    DWORD PTR [rax],eax
 101eebc:	xchg   ecx,eax
 101eebd:	rex.X add DWORD PTR [rax],eax
 101eec0:	movabs al,ds:0xe6000142a000018f
 101eec9:	rex.X add DWORD PTR [rax],eax
 101eecc:	in     al,dx
 101eecd:	pop    QWORD PTR [rcx]
 101eecf:	add    al,dh
 101eed1:	rex.X add DWORD PTR [rax],eax
 101eed4:	sub    BYTE PTR [rcx+rax*1+0x0],al
 101eed8:	or     al,0x90
 101eeda:	add    DWORD PTR [rax],eax
 101eedc:	xor    BYTE PTR [rcx+rax*1+0x0],al
 101eee0:	mov    al,0x47
 101eee2:	add    DWORD PTR [rax],eax
 101eee4:	xor    al,0x90
 101eee6:	add    DWORD PTR [rax],eax
 101eee8:	rol    BYTE PTR [rdi+0x1],0x0
 101eeec:	stos   BYTE PTR es:[rdi],al
 101eeed:	add    QWORD PTR [rax],rax
 101eef0:	jo     0x101ee82
 101eef2:	add    DWORD PTR [rax],eax
 101eef4:	mov    al,0x48
 101eef6:	add    DWORD PTR [rax],eax
 101eef8:	push   rbp
 101eef9:	add    QWORD PTR [r8],rax
 101eefc:	pushf  
 101eefd:	nop
 101eefe:	add    DWORD PTR [rax],eax
 101ef00:	(bad)  
 101ef01:	add    QWORD PTR [r8],rax
 101ef04:	in     eax,0x49
 101ef06:	add    DWORD PTR [rax],eax
 101ef08:	lods   al,BYTE PTR ds:[rsi]
 101ef09:	nop
 101ef0a:	add    DWORD PTR [rax],eax
 101ef0c:	lock add QWORD PTR [r8],rax
 101ef10:	rex.WX
 101ef11:	rex.WX add QWORD PTR [rax],rax
 101ef14:	int3   
 101ef15:	nop
 101ef16:	add    DWORD PTR [rax],eax
 101ef18:	push   rax
 101ef19:	rex.WX add QWORD PTR [rax],rax
 101ef1c:	outs   dx,DWORD PTR ds:[rsi]
 101ef1d:	rex.WX add QWORD PTR [rax],rax
 101ef20:	(bad)  
 101ef21:	nop
 101ef22:	add    DWORD PTR [rax],eax
 101ef24:	js     0x101ef70
 101ef26:	add    DWORD PTR [rax],eax
 101ef28:	data16 add QWORD PTR [r8],r8
 101ef2c:	in     al,dx
 101ef2d:	nop
 101ef2e:	add    DWORD PTR [rax],eax
 101ef30:	nop
 101ef31:	add    QWORD PTR [r8],r8
 101ef34:	fimul  WORD PTR [rbp+0x1]
 101ef37:	add    BYTE PTR [rax],cl
 101ef39:	xchg   ecx,eax
 101ef3a:	add    DWORD PTR [rax],eax
 101ef3c:	adc    BYTE PTR [rsi+0x1],cl
 101ef3f:	add    BYTE PTR [rdi],ch
 101ef41:	rex.WRX add QWORD PTR [rax],r8
 101ef44:	adc    BYTE PTR [rcx+0x4e400001],dl
 101ef4a:	add    DWORD PTR [rax],eax
 101ef4c:	push   rcx
 101ef4d:	push   rsi
 101ef4e:	add    DWORD PTR [rax],eax
 101ef50:	sbb    BYTE PTR [rcx+0x56600001],dl
 101ef56:	add    DWORD PTR [rax],eax
 101ef58:	test   eax,0x40000157
 101ef5d:	xchg   ecx,eax
 101ef5e:	add    DWORD PTR [rax],eax
 101ef60:	mov    al,0x57
 101ef62:	add    DWORD PTR [rax],eax
 101ef64:	pop    ax
 101ef66:	add    DWORD PTR [rax],eax
 101ef68:	pop    rax
 101ef69:	xchg   ecx,eax
 101ef6a:	add    DWORD PTR [rax],eax
 101ef6c:	jo     0x101efc6
 101ef6e:	add    DWORD PTR [rax],eax
 101ef70:	scas   eax,DWORD PTR es:[rdi]
 101ef71:	pop    rax
 101ef72:	add    DWORD PTR [rax],eax
 101ef74:	ins    BYTE PTR es:[rdi],dx
 101ef75:	xchg   ecx,eax
 101ef76:	add    DWORD PTR [rax],eax
 101ef78:	scas   eax,DWORD PTR es:[rdi]
 101ef79:	pop    rax
 101ef7a:	add    DWORD PTR [rax],eax
 101ef7c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101ef7d:	pop    rcx
 101ef7e:	add    DWORD PTR [rax],eax
 101ef80:	test   BYTE PTR [rcx+0x59a40001],dl
 101ef86:	add    DWORD PTR [rax],eax
 101ef88:	mov    edi,0x98000159
 101ef8d:	xchg   ecx,eax
 101ef8e:	add    DWORD PTR [rax],eax
 101ef90:	rcr    BYTE PTR [rcx+0x1],1
 101ef93:	add    ch,dh
 101ef95:	pop    rcx
 101ef96:	add    DWORD PTR [rax],eax
 101ef98:	test   al,0x91
 101ef9a:	add    DWORD PTR [rax],eax
 101ef9c:	cmc    
 101ef9d:	pop    rcx
 101ef9e:	add    DWORD PTR [rax],eax
 101efa0:	cmp    bl,BYTE PTR [rdx+0x1]
 101efa3:	add    BYTE PTR [rax+0x3a000191],dh
 101efa9:	pop    rdx
 101efaa:	add    DWORD PTR [rax],eax
 101efac:	pop    r10
 101efae:	add    DWORD PTR [rax],eax
 101efb0:	(bad)  
 101efb1:	xchg   ecx,eax
 101efb2:	add    DWORD PTR [rax],eax
 101efb4:	push   rax
 101efb5:	pop    rdx
 101efb6:	add    DWORD PTR [rax],eax
 101efb8:	repz pop rdx
 101efba:	add    DWORD PTR [rax],eax
 101efbc:	(bad)  
 101efbd:	xchg   ecx,eax
 101efbe:	add    DWORD PTR [rax],eax
 101efc0:	add    BYTE PTR [rbx+0x1],bl
 101efc3:	add    dl,cl
 101efc5:	pop    rbx
 101efc6:	add    DWORD PTR [rax],eax
 101efc8:	loopne 0x101ef5b
 101efca:	add    DWORD PTR [rax],eax
 101efcc:	loopne 0x101f029
 101efce:	add    DWORD PTR [rax],eax
 101efd0:	(bad)  
 101efd1:	pop    rsp
 101efd2:	add    DWORD PTR [rax],eax
 101efd4:	pop    rax
 101efd5:	push   0x5cc00001
 101efda:	add    DWORD PTR [rax],eax
 101efdc:	jmp    0xffffffffdd01f13d
 101efe1:	ins    DWORD PTR es:[rdi],dx
 101efe2:	add    DWORD PTR [rax],eax
 101efe4:	lock pop rsp
 101efe6:	add    DWORD PTR [rax],eax
 101efe8:	sub    bl,BYTE PTR [rbp+0x1]
 101efeb:	add    BYTE PTR [rax+0x6b],bl
 101efee:	add    DWORD PTR [rax],eax
 101eff0:	xor    BYTE PTR [rbp+0x1],bl
 101eff3:	add    BYTE PTR [rax+0x5d],dh
 101eff6:	add    DWORD PTR [rax],eax
 101eff8:	push   0xffffffff8000016b
 101effd:	pop    rbp
 101effe:	add    DWORD PTR [rax],eax
 101f000:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 101f001:	pop    rbp
 101f002:	add    DWORD PTR [rax],eax
 101f004:	nop
 101f005:	ins    BYTE PTR es:[rdi],dx
 101f006:	add    DWORD PTR [rax],eax
 101f008:	and    BYTE PTR [rsi+0x1],bl
 101f00b:	add    BYTE PTR [rsi+rbx*2],bh
 101f00e:	add    DWORD PTR [rax],eax
 101f010:	test   BYTE PTR [rbx+0x1],dh
 101f013:	add    BYTE PTR [rax+0x5e],al
 101f016:	add    DWORD PTR [rax],eax
 101f018:	jg     0x101f078
 101f01a:	add    DWORD PTR [rax],eax
 101f01c:	mov    WORD PTR [rbx+0x1],?
 101f01f:	add    BYTE PTR [rax],al
 101f021:	pop    rdi
 101f022:	add    DWORD PTR [rax],eax
 101f024:	xor    BYTE PTR [rdi+0x1],bl
 101f027:	add    BYTE PTR [rax+0x40000171],al
 101f02d:	pop    rdi
 101f02e:	add    DWORD PTR [rax],eax
 101f030:	(bad)  
 101f031:	pop    rdi
 101f032:	add    DWORD PTR [rax],eax
 101f034:	sbb    al,0x72
 101f036:	add    DWORD PTR [rax],eax
 101f038:	movabs al,ds:0x7800015fbc00015f
 101f041:	jb     0x101f044
 101f043:	add    al,al
 101f045:	pop    rdi
 101f046:	add    DWORD PTR [rax],eax
 101f048:	fcomp  QWORD PTR [rdi+0x1]
 101f04b:	add    BYTE PTR [rax-0x5ffffe8e],al
 101f051:	(bad)  
 101f052:	add    DWORD PTR [rax],eax
 101f054:	(bad)  
 101f055:	(bad)  
 101f056:	add    DWORD PTR [rax],eax
 101f058:	rex.WR ja 0x101f05c
 101f05b:	add    al,al
 101f05d:	(bad)  
 101f05e:	add    DWORD PTR [rax],eax
 101f060:	out    dx,eax
 101f061:	(bad)  
 101f062:	add    DWORD PTR [rax],eax
 101f064:	js     0x101f0e2
 101f066:	add    DWORD PTR [rax],eax
 101f068:	adc    BYTE PTR [rdx+0x1],ah
 101f06b:	add    BYTE PTR [rdx+riz*2],bh
 101f06e:	add    DWORD PTR [rax],eax
 101f070:	mov    esp,0x9000017a
 101f075:	(bad)  
 101f077:	add    dl,al
 101f079:	(bad)  
 101f07b:	add    BYTE PTR [rbx+rdi*2+0x62f00001],ch
 101f082:	add    DWORD PTR [rax],eax
 101f084:	or     esp,DWORD PTR [rbx+0x1]
 101f087:	add    BYTE PTR [rax],dl
 101f089:	jp     0x101f08c
 101f08b:	add    BYTE PTR [rax+0x63],al
 101f08e:	add    DWORD PTR [rax],eax
 101f090:	jae    0x101f0f5
 101f092:	add    DWORD PTR [rax],eax
 101f094:	test   al,0x7d
 101f096:	add    DWORD PTR [rax],eax
 101f098:	movabs al,ds:0x14000163cf000163
 101f0a1:	add    BYTE PTR [rcx],0x0
 101f0a4:	lock movsxd eax,DWORD PTR [rcx]
 101f0a7:	add    BYTE PTR [rsp+riz*2],bl
 101f0aa:	add    DWORD PTR [rax],eax
 101f0ac:	pop    rax
 101f0ad:	jle    0x101f0b0
 101f0af:	add    BYTE PTR [rax+0x64],dh
 101f0b2:	add    DWORD PTR [rax],eax
 101f0b4:	movabs ds:0x200017f48000164,al
 101f0bd:	add    DWORD PTR gs:[rax],eax
 101f0c0:	and    BYTE PTR [rbp+0x1],ah
 101f0c3:	add    ah,al
 101f0c5:	add    BYTE PTR [rcx],0x0
 101f0c8:	es add DWORD PTR gs:[rax],eax
 101f0cc:	add    DWORD PTR gs:[eax],eax
 101f0d0:	add    BYTE PTR [rcx+0x656d0001],al
 101f0d6:	add    DWORD PTR [rax],eax
 101f0d8:	cdq    
 101f0d9:	add    DWORD PTR gs:[rax],eax
 101f0dc:	xor    BYTE PTR [rcx+0x659f0001],al
 101f0e2:	add    DWORD PTR [rax],eax
 101f0e4:	mov    edx,0xcc000165
 101f0e9:	add    DWORD PTR [rcx],0x165c000
 101f0ef:	add    dl,ah
 101f0f1:	add    DWORD PTR gs:[rax],eax
 101f0f4:	adc    al,0x82
 101f0f6:	add    DWORD PTR [rax],eax
 101f0f8:	adc    BYTE PTR [rsi+0x1],ah
 101f0fb:	add    BYTE PTR [rbx],ch
 101f0fd:	add    WORD PTR [rax],ax
 101f100:	lock add DWORD PTR [rcx],0x0
 101f104:	xor    BYTE PTR [rsi+0x1],ah
 101f107:	add    BYTE PTR [rbx+0x66],cl
 101f10a:	add    DWORD PTR [rax],eax
 101f10c:	add    BYTE PTR [rcx+rax*1+0x1667000],al
 101f113:	add    BYTE PTR [rbx-0x4bfffe9a],cl
 101f119:	xchg   BYTE PTR [rcx],al
 101f11b:	add    BYTE PTR [rax-0x4dfffe9a],bl
 101f121:	add    WORD PTR [rax],ax
 101f124:	jl     0x101f0a8
 101f126:	add    DWORD PTR [rax],eax
 101f128:	mov    eax,0xde000166
 101f12d:	add    WORD PTR [rax],ax
 101f130:	mov    esp,0xe4000182
 101f135:	add    WORD PTR [rax],ax
 101f138:	and    BYTE PTR [rdi+0x1],ah
 101f13b:	add    BYTE PTR [rbx+rax*4],bh
 101f13e:	add    DWORD PTR [rax],eax
 101f140:	sub    BYTE PTR [rdi+0x1],ah
 101f143:	add    BYTE PTR [rdx+0x67],al
 101f146:	add    DWORD PTR [rax],eax
 101f148:	rex.R add DWORD PTR [rcx],0x0
 101f14c:	push   rax
 101f14d:	add    DWORD PTR [eax],eax
 101f150:	add    DWORD PTR fs:[eax],eax
 101f154:	in     al,dx
 101f155:	xchg   DWORD PTR [rcx],eax
 101f157:	add    BYTE PTR [rdi+riz*2+0x1],ch
 101f15b:	add    BYTE PTR [rsi-0x7bfffe99],al
 101f161:	(bad)  
 101f162:	add    DWORD PTR [rax],eax
 101f164:	mov    WORD PTR [rdi+0x1],fs
 101f167:	add    BYTE PTR [rsi-0x3bfffe99],ah
 101f16d:	(bad)  
 101f16e:	add    DWORD PTR [rax],eax
 101f170:	lods   al,BYTE PTR ds:[rsi]
 101f171:	add    DWORD PTR [eax],eax
 101f174:	in     al,0x67
 101f176:	add    DWORD PTR [rax],eax
 101f178:	rex.WR add QWORD PTR [rcx],0x0
 101f17c:	in     al,dx
 101f17d:	add    DWORD PTR [eax],eax
 101f180:	add    DWORD PTR [rax+0x1],ebp
 101f183:	add    BYTE PTR [rbx+rax*4+0x1],dl
	...

Disassembly of section .rsrc:

0000000001020000 <.rsrc>:
	...
 1020008:	add    al,0x0
 102000a:	add    BYTE PTR [rax],al
 102000c:	add    BYTE PTR [rax],al
 102000e:	add    eax,DWORD PTR [rax]
 1020010:	(bad)  
 1020011:	add    BYTE PTR [rax],al
 1020013:	add    BYTE PTR [rax],ch
 1020015:	add    BYTE PTR [rax],al
 1020017:	adc    BYTE PTR [rax],0x0
 102001a:	add    BYTE PTR [rax],al
 102001c:	push   0x18800000
 1020021:	add    BYTE PTR [rax],al
 1020023:	add    BYTE PTR [rax+0x800000],al
 1020029:	add    BYTE PTR [rax],al
 102002b:	add    BYTE PTR [rax],al
 102002d:	add    BYTE PTR [rax],al
 102002f:	add    BYTE PTR [rax+rax*1],al
 1020032:	add    BYTE PTR [rax],al
 1020034:	add    BYTE PTR [rax],al
 1020036:	(bad)  
 1020037:	add    BYTE PTR [rdi],al
 1020039:	add    BYTE PTR [rax],al
 102003b:	add    BYTE PTR [rax+0x8800000],bl
 1020041:	add    BYTE PTR [rax],al
 1020043:	add    BYTE PTR [rax+0x9800000],dh
 1020049:	add    BYTE PTR [rax],al
 102004b:	add    al,cl
 102004d:	add    BYTE PTR [rax],al
 102004f:	or     BYTE PTR [rdx],0x0
 1020052:	add    BYTE PTR [rax],al
 1020054:	loopne 0x1020056
 1020056:	add    BYTE PTR [rax+0xb],al
 102005c:	clc    
 102005d:	add    BYTE PTR [rax],al
 102005f:	cmp    BYTE PTR [rcx],0x1
 1020062:	add    BYTE PTR [rax],al
 1020064:	adc    BYTE PTR [rcx],al
 1020066:	add    BYTE PTR [rax+0x0],al
 102006c:	add    BYTE PTR [rax],al
 102006e:	add    BYTE PTR [rax],al
 1020070:	add    al,0x0
 1020072:	add    BYTE PTR [rax],al
 1020074:	add    BYTE PTR [rax],al
 1020076:	add    DWORD PTR [rax],eax
 1020078:	add    DWORD PTR [rax],eax
 102007a:	add    BYTE PTR [rax],al
 102007c:	sub    BYTE PTR [rcx],al
 102007e:	add    BYTE PTR [rax+0x0],al
 1020084:	add    BYTE PTR [rax],al
 1020086:	add    BYTE PTR [rax],al
 1020088:	add    al,0x0
 102008a:	add    BYTE PTR [rax],al
 102008c:	add    BYTE PTR [rax],al
 102008e:	add    DWORD PTR [rax],eax
 1020090:	add    DWORD PTR [rax],eax
 1020092:	add    BYTE PTR [rax],al
 1020094:	rex add DWORD PTR [rax],eax
 1020097:	add    BYTE PTR [rax],0x0
 102009a:	add    BYTE PTR [rax],al
 102009c:	add    BYTE PTR [rax],al
 102009e:	add    BYTE PTR [rax],al
 10200a0:	add    al,0x0
 10200a2:	add    BYTE PTR [rax],al
 10200a4:	add    BYTE PTR [rax],al
 10200a6:	add    DWORD PTR [rax],eax
 10200a8:	or     DWORD PTR [rax+rax*1],eax
 10200ab:	add    BYTE PTR [rax+0x1],bl
	...
 10200b6:	add    BYTE PTR [rax],al
 10200b8:	add    al,0x0
 10200ba:	add    BYTE PTR [rax],al
 10200bc:	add    BYTE PTR [rax],al
 10200be:	add    DWORD PTR [rax],eax
 10200c0:	or     DWORD PTR [rax+rax*1],eax
 10200c3:	add    BYTE PTR [rax+0x1],ch
	...
 10200ce:	add    BYTE PTR [rax],al
 10200d0:	add    al,0x0
 10200d2:	add    BYTE PTR [rax],al
 10200d4:	add    BYTE PTR [rax],al
 10200d6:	add    DWORD PTR [rax],eax
 10200d8:	or     DWORD PTR [rax+rax*1],eax
 10200db:	add    BYTE PTR [rax+0x1],bh
	...
 10200e6:	add    BYTE PTR [rax],al
 10200e8:	add    al,0x0
 10200ea:	add    BYTE PTR [rax],al
 10200ec:	add    BYTE PTR [rax],al
 10200ee:	add    DWORD PTR [rax],eax
 10200f0:	or     DWORD PTR [rax+rax*1],eax
 10200f3:	add    BYTE PTR [rax+0x1],cl
 10200f9:	add    BYTE PTR [rax],al
 10200fb:	add    BYTE PTR [rax],al
 10200fd:	add    BYTE PTR [rax],al
 10200ff:	add    BYTE PTR [rax+rax*1],al
 1020102:	add    BYTE PTR [rax],al
 1020104:	add    BYTE PTR [rax],al
 1020106:	add    DWORD PTR [rax],eax
 1020108:	or     DWORD PTR [rax+rax*1],eax
 102010b:	add    BYTE PTR [rax+0x1],bl
 1020111:	add    BYTE PTR [rax],al
 1020113:	add    BYTE PTR [rax],al
 1020115:	add    BYTE PTR [rax],al
 1020117:	add    BYTE PTR [rax+rax*1],al
 102011a:	add    BYTE PTR [rax],al
 102011c:	add    BYTE PTR [rax],al
 102011e:	add    DWORD PTR [rax],eax
 1020120:	or     DWORD PTR [rax+rax*1],eax
 1020123:	add    BYTE PTR [rax+0x1],ch
 1020129:	add    BYTE PTR [rax],al
 102012b:	add    BYTE PTR [rax],al
 102012d:	add    BYTE PTR [rax],al
 102012f:	add    BYTE PTR [rax+rax*1],al
 1020132:	add    BYTE PTR [rax],al
 1020134:	add    BYTE PTR [rax],al
 1020136:	add    DWORD PTR [rax],eax
 1020138:	or     DWORD PTR [rax+rax*1],eax
 102013b:	add    BYTE PTR [rax+0x1],bh
 1020141:	add    BYTE PTR [rax],al
 1020143:	add    BYTE PTR [rax],al
 1020145:	add    BYTE PTR [rax],al
 1020147:	add    BYTE PTR [rax+rax*1],al
 102014a:	add    BYTE PTR [rax],al
 102014c:	add    BYTE PTR [rax],al
 102014e:	add    DWORD PTR [rax],eax
 1020150:	or     DWORD PTR [rax+rax*1],eax
 1020153:	add    al,cl
 1020155:	add    DWORD PTR [rax],eax
 1020157:	add    al,bl
 1020159:	add    DWORD PTR [rdx],eax
 102015b:	add    dh,ch
 102015d:	add    DWORD PTR [rax],eax
 102015f:	add    ah,ah
 1020161:	add    al,0x0
 1020163:	add    BYTE PTR [rax],al
 1020165:	add    BYTE PTR [rax],al
 1020167:	add    al,cl
 1020169:	add    eax,DWORD PTR [rdx]
 102016b:	add    BYTE PTR [rdx-0x1bfffffa],ch
 1020171:	add    al,0x0
 1020173:	add    BYTE PTR [rax],al
 1020175:	add    BYTE PTR [rax],al
 1020177:	add    BYTE PTR [rdx+rcx*1+0x2],dh
 102017b:	add    ah,cl
 102017d:	(bad)  
 102017e:	add    BYTE PTR [rax],al
 1020180:	in     al,0x4
 1020182:	add    BYTE PTR [rax],al
 1020184:	add    BYTE PTR [rax],al
 1020186:	add    BYTE PTR [rax],al
 1020188:	rex adc DWORD PTR [rdx],eax
 102018b:	add    BYTE PTR [rsi-0x1bfffff9],dh
 1020191:	add    al,0x0
 1020193:	add    BYTE PTR [rax],al
 1020195:	add    BYTE PTR [rax],al
 1020197:	add    al,bh
 1020199:	sbb    BYTE PTR [rdx],al
 102019b:	add    BYTE PTR [rax-0x1bfffff9],bh
 10201a1:	add    al,0x0
 10201a3:	add    BYTE PTR [rax],al
 10201a5:	add    BYTE PTR [rax],al
 10201a7:	add    BYTE PTR [rax+0x7e000220],dh
 10201ad:	add    BYTE PTR [rax],al
 10201af:	add    ah,ah
 10201b1:	add    al,0x0
 10201b3:	add    BYTE PTR [rax],al
 10201b5:	add    BYTE PTR [rax],al
 10201b7:	add    BYTE PTR [rax],dh
 10201b9:	and    DWORD PTR [rdx],eax
 10201bb:	add    ah,al
 10201bd:	add    al,0x0
 10201bf:	add    ah,ah
 10201c1:	add    al,0x0
 10201c3:	add    BYTE PTR [rax],al
 10201c5:	add    BYTE PTR [rax],al
 10201c7:	add    ah,dh
 10201c9:	and    eax,0x15a0002
 10201ce:	add    BYTE PTR [rax],al
 10201d0:	in     al,0x4
	...
 10201e2:	xor    BYTE PTR [rax],al
 10201e4:	rex.WRB add BYTE PTR [r9+0x0],r13b
 10201e8:	movsxd eax,DWORD PTR [rax]
 10201ea:	jb     0x10201ec
 10201ec:	outs   dx,DWORD PTR ds:[rsi]
 10201ed:	add    BYTE PTR [rbx+0x0],dh
 10201f0:	outs   dx,DWORD PTR ds:[rsi]
 10201f1:	add    BYTE PTR [rsi+0x0],ah
 10201f4:	je     0x10201f6
 10201f6:	and    BYTE PTR [rax],al
 10201f8:	sub    BYTE PTR [rax],al
 10201fa:	push   rdx
 10201fb:	add    BYTE PTR [rcx],ch
 10201fd:	add    BYTE PTR [rax],ah
 10201ff:	add    BYTE PTR [rbx+0x0],dl
 1020202:	push   rcx
 1020203:	add    BYTE PTR [rax+rax*1+0x20],cl
 1020207:	add    BYTE PTR [rbx+0x0],dl
 102020a:	add    BYTE PTR gs:[rdx+0x0],dh
 102020e:	jbe    0x1020210
 1020210:	add    BYTE PTR gs:[rdx+0x0],dh
 1020214:	and    BYTE PTR [rax],al
 1020216:	push   rbx
 1020217:	add    BYTE PTR [rbx+0x0],dl
 102021a:	rex.WB add BYTE PTR [r11+0x0],dl
 102021e:	and    BYTE PTR [rax],al
 1020220:	push   rax
 1020221:	add    BYTE PTR [rcx+0x0],ah
 1020224:	movsxd eax,DWORD PTR [rax]
 1020226:	imul   eax,DWORD PTR [rax],0x61
 1020229:	add    BYTE PTR [rdi+0x0],ah
 102022c:	add    BYTE PTR gs:[rax],ah
 102022f:	add    BYTE PTR [rbp+0x0],dl
 1020232:	je     0x1020234
 1020234:	imul   eax,DWORD PTR [rax],0x69006c
 102023a:	je     0x102023c
 102023c:	imul   eax,DWORD PTR [rax],0x730065
 1020242:	or     al,BYTE PTR [rax]
 1020244:	sbb    DWORD PTR [rax],eax
 1020246:	push   rsi
 1020247:	add    BYTE PTR [rbp+0x0],ah
 102024a:	jb     0x102024c
 102024c:	jae    0x102024e
 102024e:	imul   eax,DWORD PTR [rax],0x6e006f
 1020254:	and    BYTE PTR [rax],al
 1020256:	and    eax,0x21003100
 102025b:	add    BYTE PTR [rbx+0x0],dh
 102025e:	and    DWORD PTR [rax],eax
 1020260:	and    BYTE PTR [rax],al
 1020262:	data16 add BYTE PTR [rdi+0x0],ch
 1020266:	jb     0x1020268
 1020268:	and    BYTE PTR [rax],al
 102026a:	add    BYTE PTR ss:[rax+rax*1],dh
 102026e:	sub    eax,0x69006200
 1020273:	add    BYTE PTR [rax+rax*1+0xa],dh
 1020277:	add    BYTE PTR [rax+0x0],al
 102027a:	rex.XB add BYTE PTR [r15+0x0],bpl
 102027e:	jo     0x1020280
 1020280:	jns    0x1020282
 1020282:	jb     0x1020284
 1020284:	imul   eax,DWORD PTR [rax],0x680067
 102028a:	je     0x102028c
 102028c:	and    BYTE PTR [rax],al
 102028e:	sub    BYTE PTR [rax],al
 1020290:	rex.XB add BYTE PTR [r9],bpl
 1020293:	add    BYTE PTR [rax],ah
 1020295:	add    BYTE PTR [rbp+0x0],cl
 1020298:	imul   eax,DWORD PTR [rax],0x720063
 102029e:	outs   dx,DWORD PTR ds:[rsi]
 102029f:	add    BYTE PTR [rbx+0x0],dh
 10202a2:	outs   dx,DWORD PTR ds:[rsi]
 10202a3:	add    BYTE PTR [rsi+0x0],ah
 10202a6:	je     0x10202a8
 10202a8:	and    BYTE PTR [rax],al
 10202aa:	rex.XB add BYTE PTR [r15+0x0],bpl
 10202ae:	jb     0x10202b0
 10202b0:	jo     0x10202b2
 10202b2:	outs   dx,DWORD PTR ds:[rsi]
 10202b3:	add    BYTE PTR [rdx+0x0],dh
 10202b6:	(bad)  
 10202b7:	add    BYTE PTR [rax+rax*1+0x69],dh
 10202bb:	add    BYTE PTR [rdi+0x0],ch
 10202be:	outs   dx,BYTE PTR ds:[rsi]
 10202bf:	add    BYTE PTR [rax],ah
 10202c1:	add    BYTE PTR [rdx],dh
 10202c3:	add    BYTE PTR [rax],dh
 10202c5:	add    BYTE PTR [rcx],dh
 10202c7:	add    BYTE PTR [rdx],dh
 10202c9:	add    BYTE PTR [rsi],ch
 10202cb:	add    BYTE PTR [rax],ah
 10202cd:	add    BYTE PTR [rcx+0x0],al
 10202d0:	ins    BYTE PTR es:[rdi],dx
 10202d1:	add    BYTE PTR [rax+rax*1+0x20],ch
 10202d5:	add    BYTE PTR [rdx+0x0],dh
 10202d8:	imul   eax,DWORD PTR [rax],0x680067
 10202de:	je     0x10202e0
 10202e0:	jae    0x10202e2
 10202e2:	and    BYTE PTR [rax],al
 10202e4:	jb     0x10202e6
 10202e6:	add    BYTE PTR gs:[rbx+0x0],dh
 10202ea:	add    BYTE PTR gs:[rdx+0x0],dh
 10202ee:	jbe    0x10202f0
 10202f0:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 10202f5:	add    BYTE PTR [rdx],cl
 10202f7:	add    BYTE PTR [rdx],cl
	...
 1020301:	add    BYTE PTR [rax],al
 1020303:	add    BYTE PTR [rsi],ah
 1020305:	add    BYTE PTR [rax+rax*1+0x68],dl
 1020309:	add    BYTE PTR [rbp+0x0],ah
 102030c:	and    BYTE PTR [rax],al
 102030e:	outs   dx,DWORD PTR ds:[rsi]
 102030f:	add    BYTE PTR [rax+0x0],dh
 1020312:	add    BYTE PTR gs:[rdx+0x0],dh
 1020316:	(bad)  
 1020317:	add    BYTE PTR [rax+rax*1+0x69],dh
 102031b:	add    BYTE PTR [rdi+0x0],ch
 102031e:	outs   dx,BYTE PTR ds:[rsi]
 102031f:	add    BYTE PTR [rax],ah
 1020321:	add    BYTE PTR [rbx+0x0],ah
 1020324:	outs   dx,DWORD PTR ds:[rsi]
 1020325:	add    BYTE PTR [rbp+0x0],ch
 1020328:	jo     0x102032a
 102032a:	ins    BYTE PTR es:[rdi],dx
 102032b:	add    BYTE PTR [rbp+0x0],ah
 102032e:	je     0x1020330
 1020330:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1020335:	add    BYTE PTR [rbx+0x0],dh
 1020338:	jne    0x102033a
 102033a:	movsxd eax,DWORD PTR [rax]
 102033c:	movsxd eax,DWORD PTR [rax]
 102033e:	add    BYTE PTR gs:[rbx+0x0],dh
 1020342:	jae    0x1020344
 1020344:	data16 add BYTE PTR [rbp+0x0],dh
 1020348:	ins    BYTE PTR es:[rdi],dx
 1020349:	add    BYTE PTR [rax+rax*1+0x79],ch
 102034d:	add    BYTE PTR [rsi],ch
 102034f:	add    BYTE PTR [rdx],cl
 1020351:	add    BYTE PTR [rax],bl
 1020353:	add    BYTE PTR [rdx],ah
 1020355:	add    BYTE PTR [rip+0x21003100],ah        # 0x2202345b
 102035b:	add    BYTE PTR [rbx+0x0],dh
 102035e:	and    DWORD PTR [rax],eax
 1020360:	and    al,BYTE PTR [rax]
 1020362:	and    BYTE PTR [rax],al
 1020364:	(bad)  
 1020365:	add    BYTE PTR [rax+rax*1+0x72],ch
 1020369:	add    BYTE PTR [rbp+0x0],ah
 102036c:	(bad)  
 102036d:	add    BYTE PTR [rax+rax*1+0x79],ah
 1020371:	add    BYTE PTR [rax],ah
 1020373:	add    BYTE PTR [rbp+0x0],ah
 1020376:	js     0x1020378
 1020378:	imul   eax,DWORD PTR [rax],0x740073
 102037e:	jae    0x1020380
 1020380:	add    BYTE PTR cs:[rdx],cl
 1020383:	add    BYTE PTR [rax],ah
 1020385:	add    BYTE PTR [rbx+0x0],al
 1020388:	outs   dx,DWORD PTR ds:[rsi]
 1020389:	add    BYTE PTR [rbp+0x0],dh
 102038c:	ins    BYTE PTR es:[rdi],dx
 102038d:	add    BYTE PTR [rax+rax*1+0x20],ah
 1020391:	add    BYTE PTR [rsi+0x0],ch
 1020394:	outs   dx,DWORD PTR ds:[rsi]
 1020395:	add    BYTE PTR [rax+rax*1+0x20],dh
 1020399:	add    BYTE PTR [rsi+0x0],ah
 102039c:	imul   eax,DWORD PTR [rax],0x64006e
 10203a2:	and    BYTE PTR [rax],al
 10203a4:	jo     0x10203a6
 10203a6:	(bad)  
 10203a7:	add    BYTE PTR [rbx+0x0],ah
 10203aa:	imul   eax,DWORD PTR [rax],0x61
 10203ad:	add    BYTE PTR [rdi+0x0],ah
 10203b0:	add    BYTE PTR gs:[rax],ah
 10203b3:	add    BYTE PTR [rdx],ah
 10203b5:	add    BYTE PTR [rip+0x21003100],ah        # 0x220234bb
 10203bb:	add    BYTE PTR [rbx+0x0],dh
 10203be:	and    DWORD PTR [rax],eax
 10203c0:	and    al,BYTE PTR [rax]
 10203c2:	add    BYTE PTR cs:[rdx],cl
 10203c5:	add    BYTE PTR [rax+0x41],dl
 10203c8:	xor    eax,DWORD PTR [rax]
 10203ca:	add    BYTE PTR [r10+0x0],r14b
 10203ce:	jb     0x10203d0
 10203d0:	outs   dx,DWORD PTR ds:[rsi]
 10203d1:	add    BYTE PTR [rdx+0x0],dh
 10203d4:	and    BYTE PTR [rax],al
 10203d6:	sub    BYTE PTR [rax],al
 10203d8:	and    eax,0x21003100
 10203dd:	add    BYTE PTR [rax+rax*1+0x75],ch
 10203e1:	add    BYTE PTR [rcx],ah
 10203e3:	add    BYTE PTR [rcx],ch
 10203e5:	add    BYTE PTR [rax],ah
 10203e7:	add    BYTE PTR [rbx+0x0],ah
 10203ea:	outs   dx,DWORD PTR ds:[rsi]
 10203eb:	add    BYTE PTR [rax+0x0],dh
 10203ee:	jns    0x10203f0
 10203f0:	imul   eax,DWORD PTR [rax],0x67006e
 10203f6:	and    BYTE PTR [rax],al
 10203f8:	jo     0x10203fa
 10203fa:	(bad)  
 10203fb:	add    BYTE PTR [rbx+0x0],ah
 10203fe:	imul   eax,DWORD PTR [rax],0x61
 1020401:	add    BYTE PTR [rdi+0x0],ah
 1020404:	add    BYTE PTR gs:[rax],ah
 1020407:	add    BYTE PTR [rdx],ah
 1020409:	add    BYTE PTR [rip+0x21003200],ah        # 0x2202360f
 102040f:	add    BYTE PTR [rbx+0x0],dh
 1020412:	and    DWORD PTR [rax],eax
 1020414:	and    al,BYTE PTR [rax]
 1020416:	and    BYTE PTR [rax],al
 1020418:	je     0x102041a
 102041a:	outs   dx,DWORD PTR ds:[rsi]
 102041b:	add    BYTE PTR [rax],ah
 102041d:	add    BYTE PTR [rdx],ah
 102041f:	add    BYTE PTR [rip+0x21003300],ah        # 0x22023725
 1020425:	add    BYTE PTR [rbx+0x0],dh
 1020428:	and    DWORD PTR [rax],eax
 102042a:	and    al,BYTE PTR [rax]
 102042c:	add    BYTE PTR cs:[rdx],cl
 102042f:	add    BYTE PTR [rcx+0x0],cl
 1020432:	push   rax
 1020433:	add    BYTE PTR [rcx+0x0],ah
 1020436:	movsxd eax,DWORD PTR [rax]
 1020438:	imul   eax,DWORD PTR [rax],0x61
 102043b:	add    BYTE PTR [rdi+0x0],ah
 102043e:	add    BYTE PTR gs:[rax],ah
 1020441:	add    BYTE PTR [rdx],ah
 1020443:	add    BYTE PTR [rip+0x21003100],ah        # 0x22023549
 1020449:	add    BYTE PTR [rbx+0x0],dh
 102044c:	and    DWORD PTR [rax],eax
 102044e:	and    al,BYTE PTR [rax]
 1020450:	and    BYTE PTR [rax],al
 1020452:	(bad)  
 1020453:	add    BYTE PTR [rax+rax*1+0x72],ch
 1020457:	add    BYTE PTR [rbp+0x0],ah
 102045a:	(bad)  
 102045b:	add    BYTE PTR [rax+rax*1+0x79],ah
 102045f:	add    BYTE PTR [rax],ah
 1020461:	add    BYTE PTR [rbp+0x0],ah
 1020464:	js     0x1020466
 1020466:	imul   eax,DWORD PTR [rax],0x740073
 102046c:	jae    0x102046e
 102046e:	add    BYTE PTR cs:[rax],ah
 1020471:	add    BYTE PTR [rax],ah
 1020473:	add    BYTE PTR [rcx+0x0],al
 1020476:	jb     0x1020478
 1020478:	add    BYTE PTR gs:[rax],ah
 102047b:	add    BYTE PTR [rcx+0x0],bh
 102047e:	outs   dx,DWORD PTR ds:[rsi]
 102047f:	add    BYTE PTR [rbp+0x0],dh
 1020482:	and    BYTE PTR [rax],al
 1020484:	jae    0x1020486
 1020486:	jne    0x1020488
 1020488:	jb     0x102048a
 102048a:	add    BYTE PTR gs:[rax],ah
 102048d:	add    BYTE PTR [rcx+0x0],bh
 1020490:	outs   dx,DWORD PTR ds:[rsi]
 1020491:	add    BYTE PTR [rbp+0x0],dh
 1020494:	and    BYTE PTR [rax],al
 1020496:	ja     0x1020498
 1020498:	(bad)  
 1020499:	add    BYTE PTR [rsi+0x0],ch
 102049c:	je     0x102049e
 102049e:	and    BYTE PTR [rax],al
 10204a0:	je     0x10204a2
 10204a2:	outs   dx,DWORD PTR ds:[rsi]
 10204a3:	add    BYTE PTR [rax],ah
 10204a5:	add    BYTE PTR [rdi+0x0],ch
 10204a8:	jbe    0x10204aa
 10204aa:	add    BYTE PTR gs:[rdx+0x0],dh
 10204ae:	ja     0x10204b0
 10204b0:	jb     0x10204b2
 10204b2:	imul   eax,DWORD PTR [rax],0x650074
 10204b8:	and    BYTE PTR [rax],al
 10204ba:	imul   eax,DWORD PTR [rax],0x3f0074
 10204c0:	and    BYTE PTR [rax],al
 10204c2:	and    BYTE PTR [rax],al
 10204c4:	add    al,BYTE PTR [rax]
 10204c6:	pop    rcx
 10204c7:	add    BYTE PTR [rsi+0x0],cl
 10204ca:	xor    al,BYTE PTR [rax]
 10204cc:	add    BYTE PTR [r10+0x0],r14b
 10204d0:	jb     0x10204d2
 10204d2:	outs   dx,DWORD PTR ds:[rsi]
 10204d3:	add    BYTE PTR [rdx+0x0],dh
 10204d6:	and    BYTE PTR [rax],al
 10204d8:	sub    BYTE PTR [rax],al
 10204da:	and    eax,0x21003100
 10204df:	add    BYTE PTR [rax+rax*1+0x75],ch
 10204e3:	add    BYTE PTR [rcx],ah
 10204e5:	add    BYTE PTR [rcx],ch
 10204e7:	add    BYTE PTR [rax],ah
 10204e9:	add    BYTE PTR [rbp+0x0],ch
 10204ec:	outs   dx,DWORD PTR ds:[rsi]
 10204ed:	add    BYTE PTR [rsi+0x0],dh
 10204f0:	imul   eax,DWORD PTR [rax],0x67006e
 10204f6:	and    BYTE PTR [rax],al
 10204f8:	jo     0x10204fa
 10204fa:	(bad)  
 10204fb:	add    BYTE PTR [rbx+0x0],ah
 10204fe:	imul   eax,DWORD PTR [rax],0x61
 1020501:	add    BYTE PTR [rdi+0x0],ah
 1020504:	add    BYTE PTR gs:[rax],ah
 1020507:	add    BYTE PTR [rdx],ah
 1020509:	add    BYTE PTR [rip+0x21003200],ah        # 0x2202370f
 102050f:	add    BYTE PTR [rbx+0x0],dh
 1020512:	and    DWORD PTR [rax],eax
 1020514:	and    al,BYTE PTR [rax]
 1020516:	and    BYTE PTR [rax],al
 1020518:	je     0x102051a
 102051a:	outs   dx,DWORD PTR ds:[rsi]
 102051b:	add    BYTE PTR [rax],ah
 102051d:	add    BYTE PTR [rdx],ah
 102051f:	add    BYTE PTR [rip+0x21003300],ah        # 0x22023825
 1020525:	add    BYTE PTR [rbx+0x0],dh
 1020528:	and    DWORD PTR [rax],eax
 102052a:	and    al,BYTE PTR [rax]
 102052c:	add    BYTE PTR cs:[rdx],cl
 102052f:	add    BYTE PTR [rcx],ch
 1020531:	add    BYTE PTR [rbp+0x0],al
 1020534:	jb     0x1020536
 1020536:	jb     0x1020538
 1020538:	outs   dx,DWORD PTR ds:[rsi]
 1020539:	add    BYTE PTR [rdx+0x0],dh
 102053c:	and    BYTE PTR [rax],al
 102053e:	sub    BYTE PTR [rax],al
 1020540:	and    eax,0x21003100
 1020545:	add    BYTE PTR [rax+rax*1+0x75],ch
 1020549:	add    BYTE PTR [rcx],ah
 102054b:	add    BYTE PTR [rcx],ch
 102054d:	add    BYTE PTR [rax],ah
 102054f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1020553:	add    BYTE PTR [rax+rax*1+0x65],ch
 1020557:	add    BYTE PTR [rax+rax*1+0x69],dh
 102055b:	add    BYTE PTR [rsi+0x0],ch
 102055e:	add    BYTE PTR [eax],ah
 1020561:	add    BYTE PTR [rax+0x0],dh
 1020564:	(bad)  
 1020565:	add    BYTE PTR [rbx+0x0],ah
 1020568:	imul   eax,DWORD PTR [rax],0x61
 102056b:	add    BYTE PTR [rdi+0x0],ah
 102056e:	add    BYTE PTR gs:[rax],ah
 1020571:	add    BYTE PTR [rdx],ah
 1020573:	add    BYTE PTR [rip+0x21003200],ah        # 0x22023779
 1020579:	add    BYTE PTR [rbx+0x0],dh
 102057c:	and    DWORD PTR [rax],eax
 102057e:	and    al,BYTE PTR [rax]
 1020580:	add    BYTE PTR cs:[rdx],cl
 1020583:	add    BYTE PTR [rbx],ah
 1020585:	add    BYTE PTR [rax+rax*1+0x68],dl
 1020589:	add    BYTE PTR [rbp+0x0],ah
 102058c:	and    BYTE PTR [rax],al
 102058e:	(bad)  
 102058f:	add    BYTE PTR [rbx+0x0],ah
 1020592:	je     0x1020594
 1020594:	imul   eax,DWORD PTR [rax],0x6e006f
 102059a:	and    BYTE PTR [rax],al
 102059c:	jae    0x102059e
 102059e:	jo     0x10205a0
 10205a0:	add    BYTE PTR gs:[rbx+0x0],ah
 10205a4:	imul   eax,DWORD PTR [rax],0x690066
 10205aa:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10205af:	add    BYTE PTR [rcx+0x0],ch
 10205b2:	jae    0x10205b4
 10205b4:	and    BYTE PTR [rax],al
 10205b6:	outs   dx,BYTE PTR ds:[rsi]
 10205b7:	add    BYTE PTR [rdi+0x0],ch
 10205ba:	je     0x10205bc
 10205bc:	and    BYTE PTR [rax],al
 10205be:	jbe    0x10205c0
 10205c0:	(bad)  
 10205c1:	add    BYTE PTR [rax+rax*1+0x69],ch
 10205c5:	add    BYTE PTR [rax+rax*1+0x2e],ah
 10205c9:	add    BYTE PTR [rdx],cl
 10205cb:	add    BYTE PTR [rax+rax*1],bh
 10205ce:	add    BYTE PTR [r10+0x0],r14b
 10205d2:	jb     0x10205d4
 10205d4:	outs   dx,DWORD PTR ds:[rsi]
 10205d5:	add    BYTE PTR [rdx+0x0],dh
 10205d8:	and    BYTE PTR [rax],al
 10205da:	sub    BYTE PTR [rax],al
 10205dc:	xor    BYTE PTR [rax],al
 10205de:	js     0x10205e0
 10205e0:	and    eax,0x21003100
 10205e5:	add    BYTE PTR [rax],bh
 10205e7:	add    BYTE PTR [rsi],ch
 10205e9:	add    BYTE PTR [rax],bh
 10205eb:	add    BYTE PTR [rax+0x0],bl
 10205ee:	and    DWORD PTR [rax],eax
 10205f0:	sub    DWORD PTR [rax],eax
 10205f2:	and    BYTE PTR [rax],al
 10205f4:	add    BYTE PTR [ebp+0x0],ah
 10205f8:	je     0x10205fa
 10205fa:	je     0x10205fc
 10205fc:	imul   eax,DWORD PTR [rax],0x67006e
 1020602:	and    BYTE PTR [rax],al
 1020604:	jo     0x1020606
 1020606:	(bad)  
 1020607:	add    BYTE PTR [rbx+0x0],ah
 102060a:	imul   eax,DWORD PTR [rax],0x61
 102060d:	add    BYTE PTR [rdi+0x0],ah
 1020610:	add    BYTE PTR gs:[rax],ah
 1020613:	add    BYTE PTR [rdx],ah
 1020615:	add    BYTE PTR [rip+0x21003200],ah        # 0x2202381b
 102061b:	add    BYTE PTR [rbx+0x0],dh
 102061e:	and    DWORD PTR [rax],eax
 1020620:	and    al,BYTE PTR [rax]
 1020622:	and    BYTE PTR [rax],al
 1020624:	data16 add BYTE PTR [rdx+0x0],dh
 1020628:	outs   dx,DWORD PTR ds:[rsi]
 1020629:	add    BYTE PTR [rbp+0x0],ch
 102062c:	and    BYTE PTR [rax],al
 102062e:	push   rbx
 102062f:	add    BYTE PTR [rcx+0x0],dl
 1020632:	rex.WR add BYTE PTR [rax],r12b
 1020635:	add    BYTE PTR [rbx+0x0],dl
 1020638:	add    BYTE PTR gs:[rdx+0x0],dh
 102063c:	jbe    0x102063e
 102063e:	add    BYTE PTR gs:[rdx+0x0],dh
 1020642:	add    BYTE PTR cs:[rdx],cl
 1020645:	add    BYTE PTR [rip+0x72004500],ah        # 0x73024b4b
 102064b:	add    BYTE PTR [rdx+0x0],dh
 102064e:	outs   dx,DWORD PTR ds:[rsi]
 102064f:	add    BYTE PTR [rdx+0x0],dh
 1020652:	and    BYTE PTR [rax],al
 1020654:	sub    BYTE PTR [rax],al
 1020656:	and    eax,0x21003100
 102065b:	add    BYTE PTR [rax+rax*1+0x75],ch
 102065f:	add    BYTE PTR [rcx],ah
 1020661:	add    BYTE PTR [rcx],ch
 1020663:	add    BYTE PTR [rax],ah
 1020665:	add    BYTE PTR [rdi+0x0],ch
 1020668:	jo     0x102066a
 102066a:	add    BYTE PTR gs:[rsi+0x0],ch
 102066e:	imul   eax,DWORD PTR [rax],0x67006e
 1020674:	and    BYTE PTR [rax],al
 1020676:	data16 add BYTE PTR [rcx+0x0],ch
 102067a:	ins    BYTE PTR es:[rdi],dx
 102067b:	add    BYTE PTR [rbp+0x0],ah
 102067e:	and    BYTE PTR [rax],al
 1020680:	and    al,BYTE PTR [rax]
 1020682:	and    eax,0x21003200
 1020687:	add    BYTE PTR [rbx+0x0],dh
 102068a:	and    DWORD PTR [rax],eax
 102068c:	and    al,BYTE PTR [rax]
 102068e:	add    BYTE PTR cs:[rdx],cl
 1020691:	add    BYTE PTR [rdx+0x0],dl
 1020694:	push   rsp
 1020695:	add    BYTE PTR [rax+0x0],ch
 1020698:	add    BYTE PTR gs:[rdx+0x0],dh
 102069c:	add    BYTE PTR gs:[rax],ah
 102069f:	add    BYTE PTR [rcx+0x0],ch
 10206a2:	jae    0x10206a4
 10206a4:	and    BYTE PTR [rax],al
 10206a6:	outs   dx,BYTE PTR ds:[rsi]
 10206a7:	add    BYTE PTR [rdi+0x0],ch
 10206aa:	je     0x10206ac
 10206ac:	and    BYTE PTR [rax],al
 10206ae:	add    BYTE PTR gs:[rsi+0x0],ch
 10206b2:	outs   dx,DWORD PTR ds:[rsi]
 10206b3:	add    BYTE PTR [rbp+0x0],dh
 10206b6:	add    BYTE PTR [eax+0x0],ch
 10206ba:	and    BYTE PTR [rax],al
 10206bc:	ins    DWORD PTR es:[rdi],dx
 10206bd:	add    BYTE PTR [rbp+0x0],ah
 10206c0:	ins    DWORD PTR es:[rdi],dx
 10206c1:	add    BYTE PTR [rdi+0x0],ch
 10206c4:	jb     0x10206c6
 10206c6:	jns    0x10206c8
 10206c8:	and    BYTE PTR [rax],al
 10206ca:	je     0x10206cc
 10206cc:	outs   dx,DWORD PTR ds:[rsi]
 10206cd:	add    BYTE PTR [rax],ah
 10206cf:	add    BYTE PTR [rbx+0x0],ah
 10206d2:	outs   dx,DWORD PTR ds:[rsi]
 10206d3:	add    BYTE PTR [rsi+0x0],ch
 10206d6:	je     0x10206d8
 10206d8:	imul   eax,DWORD PTR [rax],0x75006e
 10206de:	add    BYTE PTR gs:[rax],ah
 10206e1:	add    BYTE PTR [rdx+0x0],dh
 10206e4:	jne    0x10206e6
 10206e6:	outs   dx,BYTE PTR ds:[rsi]
 10206e7:	add    BYTE PTR [rsi+0x0],ch
 10206ea:	imul   eax,DWORD PTR [rax],0x67006e
 10206f0:	add    BYTE PTR cs:[rax],ah
 10206f3:	add    BYTE PTR [rax],ah
 10206f5:	add    BYTE PTR [rbx+0x0],al
 10206f8:	outs   dx,DWORD PTR ds:[rsi]
 10206f9:	add    BYTE PTR [rbp+0x0],dh
 10206fc:	ins    BYTE PTR es:[rdi],dx
 10206fd:	add    BYTE PTR [rax+rax*1+0x20],ah
 1020701:	add    BYTE PTR [rsi+0x0],ch
 1020704:	outs   dx,DWORD PTR ds:[rsi]
 1020705:	add    BYTE PTR [rax+rax*1+0x20],dh
 1020709:	add    BYTE PTR [rcx+0x0],ah
 102070c:	ins    BYTE PTR es:[rdi],dx
 102070d:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1020711:	add    BYTE PTR [rbx+0x0],ah
 1020714:	(bad)  
 1020715:	add    BYTE PTR [rax+rax*1+0x65],dh
 1020719:	add    BYTE PTR [rax],ah
 102071b:	add    BYTE PTR [rip+0x21003100],ah        # 0x22023821
 1020721:	add    BYTE PTR [rax+rax*1+0x75],ch
 1020725:	add    BYTE PTR [rcx],ah
 1020727:	add    BYTE PTR [rax],ah
 1020729:	add    BYTE PTR [rdx+0x0],ah
 102072c:	jns    0x102072e
 102072e:	je     0x1020730
 1020730:	add    BYTE PTR gs:[rbx+0x0],dh
 1020734:	add    BYTE PTR cs:[rdx],cl
 1020737:	add    BYTE PTR [rip+0x72004500],ch        # 0x73024c3d
 102073d:	add    BYTE PTR [rdx+0x0],dh
 1020740:	outs   dx,DWORD PTR ds:[rsi]
 1020741:	add    BYTE PTR [rdx+0x0],dh
 1020744:	and    BYTE PTR [rax],al
 1020746:	sub    BYTE PTR [rax],al
 1020748:	and    eax,0x21003100
 102074d:	add    BYTE PTR [rax+rax*1+0x75],ch
 1020751:	add    BYTE PTR [rcx],ah
 1020753:	add    BYTE PTR [rcx],ch
 1020755:	add    BYTE PTR [rax],ah
 1020757:	add    BYTE PTR [rdx+0x0],dh
 102075a:	add    BYTE PTR gs:[rcx+0x0],ah
 102075e:	add    BYTE PTR fs:[rcx+0x0],ch
 1020762:	outs   dx,BYTE PTR ds:[rsi]
 1020763:	add    BYTE PTR [rdi+0x0],ah
 1020766:	and    BYTE PTR [rax],al
 1020768:	data16 add BYTE PTR [rdx+0x0],dh
 102076c:	outs   dx,DWORD PTR ds:[rsi]
 102076d:	add    BYTE PTR [rbp+0x0],ch
 1020770:	and    BYTE PTR [rax],al
 1020772:	jo     0x1020774
 1020774:	(bad)  
 1020775:	add    BYTE PTR [rbx+0x0],ah
 1020778:	imul   eax,DWORD PTR [rax],0x61
 102077b:	add    BYTE PTR [rdi+0x0],ah
 102077e:	add    BYTE PTR gs:[rax],ah
 1020781:	add    BYTE PTR [rdx],ah
 1020783:	add    BYTE PTR [rip+0x21003200],ah        # 0x22023989
 1020789:	add    BYTE PTR [rbx+0x0],dh
 102078c:	and    DWORD PTR [rax],eax
 102078e:	and    al,BYTE PTR [rax]
 1020790:	add    BYTE PTR cs:[rdx],cl
 1020793:	add    BYTE PTR [rdi],dh
 1020795:	add    BYTE PTR [rbp+0x0],al
 1020798:	jb     0x102079a
 102079a:	jb     0x102079c
 102079c:	outs   dx,DWORD PTR ds:[rsi]
 102079d:	add    BYTE PTR [rdx+0x0],dh
 10207a0:	and    BYTE PTR [rax],al
 10207a2:	sub    BYTE PTR [rax],al
 10207a4:	xor    BYTE PTR [rax],al
 10207a6:	js     0x10207a8
 10207a8:	and    eax,0x21003100
 10207ad:	add    BYTE PTR [rax],bh
 10207af:	add    BYTE PTR [rsi],ch
 10207b1:	add    BYTE PTR [rax],bh
 10207b3:	add    BYTE PTR [rax+0x0],bl
 10207b6:	and    DWORD PTR [rax],eax
 10207b8:	sub    DWORD PTR [rax],eax
 10207ba:	and    BYTE PTR [rax],al
 10207bc:	(bad)  
 10207bd:	add    BYTE PTR [rbx+0x0],ah
 10207c0:	movsxd eax,DWORD PTR [rax]
 10207c2:	add    BYTE PTR gs:[rbx+0x0],dh
 10207c6:	jae    0x10207c8
 10207c8:	imul   eax,DWORD PTR [rax],0x67006e
 10207ce:	and    BYTE PTR [rax],al
 10207d0:	jae    0x10207d2
 10207d2:	(bad)  
 10207d3:	add    BYTE PTR [rsi+0x0],ah
 10207d6:	add    BYTE PTR gs:[rax],ah
 10207d9:	add    BYTE PTR [rcx+0x0],ah
 10207dc:	jb     0x10207de
 10207de:	jb     0x10207e0
 10207e0:	(bad)  
 10207e1:	add    BYTE PTR [rcx+0x0],bh
 10207e4:	and    BYTE PTR [rax],al
 10207e6:	add    BYTE PTR fs:[rcx+0x0],ah
 10207ea:	je     0x10207ec
 10207ec:	(bad)  
 10207ed:	add    BYTE PTR [rax],ah
 10207ef:	add    BYTE PTR [rax+rax*1+0x69],ah
 10207f3:	add    BYTE PTR [rdx+0x0],dh
 10207f6:	add    BYTE PTR gs:[rbx+0x0],ah
 10207fa:	je     0x10207fc
 10207fc:	ins    BYTE PTR es:[rdi],dx
 10207fd:	add    BYTE PTR [rcx+0x0],bh
 1020800:	add    BYTE PTR cs:[rdx],cl
 1020803:	add    BYTE PTR [rax],dh
 1020805:	add    BYTE PTR [rax+rax*1+0x68],dl
 1020809:	add    BYTE PTR [rbp+0x0],ah
 102080c:	jb     0x102080e
 102080e:	add    BYTE PTR gs:[rax],ah
 1020811:	add    BYTE PTR [rcx+0x0],ch
 1020814:	jae    0x1020816
 1020816:	and    BYTE PTR [rax],al
 1020818:	outs   dx,BYTE PTR ds:[rsi]
 1020819:	add    BYTE PTR [rdi+0x0],ch
 102081c:	je     0x102081e
 102081e:	and    BYTE PTR [rax],al
 1020820:	add    BYTE PTR gs:[rsi+0x0],ch
 1020824:	outs   dx,DWORD PTR ds:[rsi]
 1020825:	add    BYTE PTR [rbp+0x0],dh
 1020828:	add    BYTE PTR [eax+0x0],ch
 102082c:	and    BYTE PTR [rax],al
 102082e:	ins    DWORD PTR es:[rdi],dx
 102082f:	add    BYTE PTR [rbp+0x0],ah
 1020832:	ins    DWORD PTR es:[rdi],dx
 1020833:	add    BYTE PTR [rdi+0x0],ch
 1020836:	jb     0x1020838
 1020838:	jns    0x102083a
 102083a:	and    BYTE PTR [rax],al
 102083c:	je     0x102083e
 102083e:	outs   dx,DWORD PTR ds:[rsi]
 102083f:	add    BYTE PTR [rax],ah
 1020841:	add    BYTE PTR [rbx+0x0],ah
 1020844:	outs   dx,DWORD PTR ds:[rsi]
 1020845:	add    BYTE PTR [rsi+0x0],ch
 1020848:	je     0x102084a
 102084a:	imul   eax,DWORD PTR [rax],0x75006e
 1020850:	add    BYTE PTR gs:[rax],ah
 1020853:	add    BYTE PTR [rdx+0x0],dh
 1020856:	jne    0x1020858
 1020858:	outs   dx,BYTE PTR ds:[rsi]
 1020859:	add    BYTE PTR [rsi+0x0],ch
 102085c:	imul   eax,DWORD PTR [rax],0x67006e
 1020862:	add    BYTE PTR cs:[rdx],cl
 1020865:	add    BYTE PTR [rbp+0x0],al
 1020868:	rex.XB add BYTE PTR [r15+0x0],bpl
 102086c:	jne    0x102086e
 102086e:	ins    BYTE PTR es:[rdi],dx
 102086f:	add    BYTE PTR [rax+rax*1+0x20],ah
 1020873:	add    BYTE PTR [rsi+0x0],ch
 1020876:	outs   dx,DWORD PTR ds:[rsi]
 1020877:	add    BYTE PTR [rax+rax*1+0x20],dh
 102087b:	add    BYTE PTR [rbx+0x0],ah
 102087e:	jb     0x1020880
 1020880:	add    BYTE PTR gs:[rcx+0x0],ah
 1020884:	je     0x1020886
 1020886:	add    BYTE PTR gs:[rax],ah
 1020889:	add    BYTE PTR [rbx+0x0],dl
 102088c:	push   rbx
 102088d:	add    BYTE PTR [rcx+0x0],cl
 1020890:	push   rbx
 1020891:	add    BYTE PTR [rax],ah
 1020893:	add    BYTE PTR [rcx+0x0],al
 1020896:	jo     0x1020898
 1020898:	jo     0x102089a
 102089a:	ins    BYTE PTR es:[rdi],dx
 102089b:	add    BYTE PTR [rcx+0x0],ch
 102089e:	movsxd eax,DWORD PTR [rax]
 10208a0:	(bad)  
 10208a1:	add    BYTE PTR [rax+rax*1+0x69],dh
 10208a5:	add    BYTE PTR [rdi+0x0],ch
 10208a8:	outs   dx,BYTE PTR ds:[rsi]
 10208a9:	add    BYTE PTR [rax],ah
 10208ab:	add    BYTE PTR [rdi+0x0],ch
 10208ae:	(bad)  
 10208af:	add    BYTE PTR [rdx+0x0],ch
 10208b2:	add    BYTE PTR gs:[rbx+0x0],ah
 10208b6:	je     0x10208b8
 10208b8:	and    BYTE PTR [rax],al
 10208ba:	(bad)  
 10208bb:	add    BYTE PTR [rbp+0x0],ah
 10208be:	movsxd eax,DWORD PTR [rax]
 10208c0:	(bad)  
 10208c1:	add    BYTE PTR [rbp+0x0],dh
 10208c4:	jae    0x10208c6
 10208c6:	add    BYTE PTR gs:[rax],ah
 10208c9:	add    BYTE PTR [rdi+0x0],ch
 10208cc:	data16 add BYTE PTR [rax],ah
 10208cf:	add    BYTE PTR [rbp+0x0],ah
 10208d2:	jb     0x10208d4
 10208d4:	jb     0x10208d6
 10208d6:	outs   dx,DWORD PTR ds:[rsi]
 10208d7:	add    BYTE PTR [rdx+0x0],dh
 10208da:	and    BYTE PTR [rax],al
 10208dc:	xor    BYTE PTR [rax],al
 10208de:	js     0x10208e0
 10208e0:	and    eax,0x21003100
 10208e5:	add    BYTE PTR [rax],bh
 10208e7:	add    BYTE PTR [rsi],ch
 10208e9:	add    BYTE PTR [rax],bh
 10208eb:	add    BYTE PTR [rax+0x0],bl
 10208ee:	and    DWORD PTR [rax],eax
 10208f0:	or     al,BYTE PTR [rax]
 10208f2:	cmp    al,0x0
 10208f4:	rex.XB add BYTE PTR [r15+0x0],bpl
 10208f8:	jne    0x10208fa
 10208fa:	ins    BYTE PTR es:[rdi],dx
 10208fb:	add    BYTE PTR [rax+rax*1+0x20],ah
 10208ff:	add    BYTE PTR [rsi+0x0],ch
 1020902:	outs   dx,DWORD PTR ds:[rsi]
 1020903:	add    BYTE PTR [rax+rax*1+0x20],dh
 1020907:	add    BYTE PTR [rax+rax*1+0x6f],ch
 102090b:	add    BYTE PTR [rcx+0x0],ah
 102090e:	add    BYTE PTR fs:[rax],ah
 1020911:	add    BYTE PTR [rax+0x0],dh
 1020914:	(bad)  
 1020915:	add    BYTE PTR [rbx+0x0],ah
 1020918:	imul   eax,DWORD PTR [rax],0x61
 102091b:	add    BYTE PTR [rdi+0x0],ah
 102091e:	add    BYTE PTR gs:[rax],ah
 1020921:	add    BYTE PTR [rdx],ah
 1020923:	add    BYTE PTR [rip+0x21003100],ah        # 0x22023a29
 1020929:	add    BYTE PTR [rbx+0x0],dh
 102092c:	and    DWORD PTR [rax],eax
 102092e:	and    al,BYTE PTR [rax]
 1020930:	and    BYTE PTR [rax],al
 1020932:	(bad)  
 1020933:	add    BYTE PTR [rbp+0x0],ah
 1020936:	movsxd eax,DWORD PTR [rax]
 1020938:	(bad)  
 1020939:	add    BYTE PTR [rbp+0x0],dh
 102093c:	jae    0x102093e
 102093e:	add    BYTE PTR gs:[rax],ah
 1020941:	add    BYTE PTR [rdi+0x0],ch
 1020944:	data16 add BYTE PTR [rax],ah
 1020947:	add    BYTE PTR [rbp+0x0],ah
 102094a:	jb     0x102094c
 102094c:	jb     0x102094e
 102094e:	outs   dx,DWORD PTR ds:[rsi]
 102094f:	add    BYTE PTR [rdx+0x0],dh
 1020952:	and    BYTE PTR [rax],al
 1020954:	xor    BYTE PTR [rax],al
 1020956:	js     0x1020958
 1020958:	and    eax,0x21003200
 102095d:	add    BYTE PTR [rax],bh
 102095f:	add    BYTE PTR [rsi],ch
 1020961:	add    BYTE PTR [rax],bh
 1020963:	add    BYTE PTR [rax+0x0],bl
 1020966:	and    DWORD PTR [rax],eax
 1020968:	add    BYTE PTR cs:[rdx],cl
 102096b:	add    BYTE PTR [rax+rax*1],bh
 102096e:	rex.XB add BYTE PTR [r15+0x0],bpl
 1020972:	jne    0x1020974
 1020974:	ins    BYTE PTR es:[rdi],dx
 1020975:	add    BYTE PTR [rax+rax*1+0x20],ah
 1020979:	add    BYTE PTR [rsi+0x0],ch
 102097c:	outs   dx,DWORD PTR ds:[rsi]
 102097d:	add    BYTE PTR [rax+rax*1+0x20],dh
 1020981:	add    BYTE PTR [rbx+0x0],dh
 1020984:	(bad)  
 1020985:	add    BYTE PTR [rsi+0x0],dh
 1020988:	add    BYTE PTR gs:[rax],ah
 102098b:	add    BYTE PTR [rax+0x0],dh
 102098e:	(bad)  
 102098f:	add    BYTE PTR [rbx+0x0],ah
 1020992:	imul   eax,DWORD PTR [rax],0x61
 1020995:	add    BYTE PTR [rdi+0x0],ah
 1020998:	add    BYTE PTR gs:[rax],ah
 102099b:	add    BYTE PTR [rdx],ah
 102099d:	add    BYTE PTR [rip+0x21003100],ah        # 0x22023aa3
 10209a3:	add    BYTE PTR [rbx+0x0],dh
 10209a6:	and    DWORD PTR [rax],eax
 10209a8:	and    al,BYTE PTR [rax]
 10209aa:	and    BYTE PTR [rax],al
 10209ac:	(bad)  
 10209ad:	add    BYTE PTR [rbp+0x0],ah
 10209b0:	movsxd eax,DWORD PTR [rax]
 10209b2:	(bad)  
 10209b3:	add    BYTE PTR [rbp+0x0],dh
 10209b6:	jae    0x10209b8
 10209b8:	add    BYTE PTR gs:[rax],ah
 10209bb:	add    BYTE PTR [rdi+0x0],ch
 10209be:	data16 add BYTE PTR [rax],ah
 10209c1:	add    BYTE PTR [rbp+0x0],ah
 10209c4:	jb     0x10209c6
 10209c6:	jb     0x10209c8
 10209c8:	outs   dx,DWORD PTR ds:[rsi]
 10209c9:	add    BYTE PTR [rdx+0x0],dh
 10209cc:	and    BYTE PTR [rax],al
 10209ce:	xor    BYTE PTR [rax],al
 10209d0:	js     0x10209d2
 10209d2:	and    eax,0x21003200
 10209d7:	add    BYTE PTR [rax],bh
 10209d9:	add    BYTE PTR [rsi],ch
 10209db:	add    BYTE PTR [rax],bh
 10209dd:	add    BYTE PTR [rax+0x0],bl
 10209e0:	and    DWORD PTR [rax],eax
 10209e2:	add    BYTE PTR cs:[rdx],cl
 10209e5:	add    BYTE PTR [rbp+0x0],al
 10209e8:	add    BYTE PTR [r10+0x0],r14b
 10209ec:	jb     0x10209ee
 10209ee:	outs   dx,DWORD PTR ds:[rsi]
 10209ef:	add    BYTE PTR [rdx+0x0],dh
 10209f2:	and    BYTE PTR [rax],al
 10209f4:	sub    BYTE PTR [rax],al
 10209f6:	xor    BYTE PTR [rax],al
 10209f8:	js     0x10209fa
 10209fa:	and    eax,0x21003100
 10209ff:	add    BYTE PTR [rax],bh
 1020a01:	add    BYTE PTR [rsi],ch
 1020a03:	add    BYTE PTR [rax],bh
 1020a05:	add    BYTE PTR [rax+0x0],bl
 1020a08:	and    DWORD PTR [rax],eax
 1020a0a:	sub    DWORD PTR [rax],eax
 1020a0c:	and    BYTE PTR [rax],al
 1020a0e:	ins    BYTE PTR es:[rdi],dx
 1020a0f:	add    BYTE PTR [rdi+0x0],ch
 1020a12:	(bad)  
 1020a13:	add    BYTE PTR [rax+rax*1+0x69],ah
 1020a17:	add    BYTE PTR [rsi+0x0],ch
 1020a1a:	add    BYTE PTR [eax],ah
 1020a1d:	add    BYTE PTR [rax+rax*1+0x68],dh
 1020a21:	add    BYTE PTR [rbp+0x0],ah
 1020a24:	and    BYTE PTR [rax],al
 1020a26:	jne    0x1020a28
 1020a28:	jae    0x1020a2a
 1020a2a:	add    BYTE PTR gs:[rdx+0x0],dh
 1020a2e:	and    BYTE PTR [rax],al
 1020a30:	movsxd eax,DWORD PTR [rax]
 1020a32:	add    BYTE PTR gs:[rdx+0x0],dh
 1020a36:	je     0x1020a38
 1020a38:	imul   eax,DWORD PTR [rax],0x690066
 1020a3e:	movsxd eax,DWORD PTR [rax]
 1020a40:	(bad)  
 1020a41:	add    BYTE PTR [rax+rax*1+0x65],dh
 1020a45:	add    BYTE PTR [rax],ah
 1020a47:	add    BYTE PTR [rsi+0x0],ah
 1020a4a:	jb     0x1020a4c
 1020a4c:	outs   dx,DWORD PTR ds:[rsi]
 1020a4d:	add    BYTE PTR [rbp+0x0],ch
 1020a50:	and    BYTE PTR [rax],al
 1020a52:	je     0x1020a54
 1020a54:	push   0x20006500
 1020a59:	add    BYTE PTR [rax+0x0],ch
 1020a5c:	(bad)  
 1020a5d:	add    BYTE PTR [rbx+0x0],dh
 1020a60:	push   0x76002000
 1020a65:	add    BYTE PTR [rcx+0x0],ah
 1020a68:	ins    BYTE PTR es:[rdi],dx
 1020a69:	add    BYTE PTR [rbp+0x0],dh
 1020a6c:	add    BYTE PTR gs:[rsi],ch
 1020a6f:	add    BYTE PTR [rdx],cl
 1020a71:	add    BYTE PTR [rax+0x41],dl
 1020a74:	add    BYTE PTR [rbp+0x0],r8b
 1020a78:	jb     0x1020a7a
 1020a7a:	jb     0x1020a7c
 1020a7c:	outs   dx,DWORD PTR ds:[rsi]
 1020a7d:	add    BYTE PTR [rdx+0x0],dh
 1020a80:	and    BYTE PTR [rax],al
 1020a82:	sub    BYTE PTR [rax],al
 1020a84:	xor    BYTE PTR [rax],al
 1020a86:	js     0x1020a88
 1020a88:	and    eax,0x21003100
 1020a8d:	add    BYTE PTR [rax],bh
 1020a8f:	add    BYTE PTR [rsi],ch
 1020a91:	add    BYTE PTR [rax],bh
 1020a93:	add    BYTE PTR [rax+0x0],bl
 1020a96:	and    DWORD PTR [rax],eax
 1020a98:	sub    DWORD PTR [rax],eax
 1020a9a:	and    BYTE PTR [rax],al
 1020a9c:	add    BYTE PTR [ebp+0x0],ah
 1020aa0:	je     0x1020aa2
 1020aa2:	je     0x1020aa4
 1020aa4:	imul   eax,DWORD PTR [rax],0x67006e
 1020aaa:	and    BYTE PTR [rax],al
 1020aac:	je     0x1020aae
 1020aae:	push   0x20006500
 1020ab3:	add    BYTE PTR [rax+0x0],dh
 1020ab6:	add    BYTE PTR gs:[rdx+0x0],dh
 1020aba:	jae    0x1020abc
 1020abc:	imul   eax,DWORD PTR [rax],0x740073
 1020ac2:	add    BYTE PTR gs:[rsi+0x0],ch
 1020ac6:	movsxd eax,DWORD PTR [rax]
 1020ac8:	add    BYTE PTR gs:[rax],ah
 1020acb:	add    BYTE PTR [rdi+0x0],ch
 1020ace:	(bad)  
 1020acf:	add    BYTE PTR [rdx+0x0],ch
 1020ad2:	add    BYTE PTR gs:[rbx+0x0],ah
 1020ad6:	je     0x1020ad8
 1020ad8:	and    BYTE PTR [rax],al
 1020ada:	data16 add BYTE PTR [rdx+0x0],dh
 1020ade:	outs   dx,DWORD PTR ds:[rsi]
 1020adf:	add    BYTE PTR [rbp+0x0],ch
 1020ae2:	and    BYTE PTR [rax],al
 1020ae4:	je     0x1020ae6
 1020ae6:	push   0x20006500
 1020aeb:	add    BYTE PTR [rax+0x0],dh
 1020aee:	(bad)  
 1020aef:	add    BYTE PTR [rbx+0x0],ah
 1020af2:	imul   eax,DWORD PTR [rax],0x61
 1020af5:	add    BYTE PTR [rdi+0x0],ah
 1020af8:	add    BYTE PTR gs:[rsi],ch
 1020afb:	add    BYTE PTR [rdx],cl
 1020afd:	add    BYTE PTR [rdx+0x0],dh
 1020b00:	push   rsp
 1020b01:	add    BYTE PTR [rax+0x0],ch
 1020b04:	add    BYTE PTR gs:[rax],ah
 1020b07:	add    BYTE PTR [rbx+0x0],ah
 1020b0a:	push   0x72006100
 1020b0f:	add    BYTE PTR [rcx+0x0],ah
 1020b12:	movsxd eax,DWORD PTR [rax]
 1020b14:	je     0x1020b16
 1020b16:	add    BYTE PTR gs:[rdx+0x0],dh
 1020b1a:	and    BYTE PTR [rax],al
 1020b1c:	and    al,BYTE PTR [rax]
 1020b1e:	and    eax,0x21003100
 1020b23:	add    BYTE PTR [rbx+0x0],ah
 1020b26:	and    DWORD PTR [rax],eax
 1020b28:	and    al,BYTE PTR [rax]
 1020b2a:	and    BYTE PTR [rax],al
 1020b2c:	imul   eax,DWORD PTR [rax],0x20006e
 1020b32:	push   0x73006100
 1020b37:	add    BYTE PTR [rax+0x0],ch
 1020b3a:	and    BYTE PTR [rax],al
 1020b3c:	jae    0x1020b3e
 1020b3e:	je     0x1020b40
 1020b40:	jb     0x1020b42
 1020b42:	imul   eax,DWORD PTR [rax],0x67006e
 1020b48:	and    BYTE PTR [rax],al
 1020b4a:	and    al,BYTE PTR [rax]
 1020b4c:	and    eax,0x21003200
 1020b51:	add    BYTE PTR [rbx+0x0],dh
 1020b54:	and    DWORD PTR [rax],eax
 1020b56:	and    al,BYTE PTR [rax]
 1020b58:	and    BYTE PTR [rax],al
 1020b5a:	imul   eax,DWORD PTR [rax],0x200073
 1020b60:	imul   eax,DWORD PTR [rax],0x76006e
 1020b66:	(bad)  
 1020b67:	add    BYTE PTR [rax+rax*1+0x69],ch
 1020b6b:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1020b6f:	add    BYTE PTR [rax],ah
 1020b71:	add    BYTE PTR [rax],ah
 1020b73:	add    BYTE PTR [rdi+0x0],cl
 1020b76:	outs   dx,BYTE PTR ds:[rsi]
 1020b77:	add    BYTE PTR [rax+rax*1+0x79],ch
 1020b7b:	add    BYTE PTR [rax],ah
 1020b7d:	add    BYTE PTR [rax+0x0],ch
 1020b80:	add    BYTE PTR gs:[rax+0x0],bh
 1020b84:	and    BYTE PTR [rax],al
 1020b86:	add    BYTE PTR fs:[rcx+0x0],ch
 1020b8a:	add    BYTE PTR [ecx+0x0],ch
 1020b8e:	je     0x1020b90
 1020b90:	jae    0x1020b92
 1020b92:	and    BYTE PTR [rax],al
 1020b94:	sub    BYTE PTR [rax],al
 1020b96:	xor    BYTE PTR [rax],al
 1020b98:	sub    eax,0x2c003900
 1020b9d:	add    BYTE PTR [rax],ah
 1020b9f:	add    BYTE PTR [rcx+0x0],ah
 1020ba2:	sub    eax,0x2c006600
 1020ba7:	add    BYTE PTR [rax],ah
 1020ba9:	add    BYTE PTR [rcx+0x0],al
 1020bac:	sub    eax,0x29004600
 1020bb1:	add    BYTE PTR [rax],ah
 1020bb3:	add    BYTE PTR [rcx+0x0],ah
 1020bb6:	outs   dx,BYTE PTR ds:[rsi]
 1020bb7:	add    BYTE PTR [rax+rax*1+0x20],ah
 1020bbb:	add    BYTE PTR [rbx+0x0],dh
 1020bbe:	jo     0x1020bc0
 1020bc0:	(bad)  
 1020bc1:	add    BYTE PTR [rbx+0x0],ah
 1020bc4:	add    BYTE PTR gs:[rbx+0x0],dh
 1020bc8:	and    BYTE PTR [rax],al
 1020bca:	(bad)  
 1020bcb:	add    BYTE PTR [rdx+0x0],dh
 1020bce:	add    BYTE PTR gs:[rax],ah
 1020bd1:	add    BYTE PTR [rcx+0x0],ah
 1020bd4:	ins    BYTE PTR es:[rdi],dx
 1020bd5:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1020bd9:	add    BYTE PTR [rdi+0x0],dh
 1020bdc:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1020be1:	add    BYTE PTR [rdx],cl
 1020be3:	add    BYTE PTR [rsi],bl
 1020be5:	add    BYTE PTR [rax+rax*1+0x68],dl
 1020be9:	add    BYTE PTR [rbp+0x0],ah
 1020bec:	and    BYTE PTR [rax],al
 1020bee:	jae    0x1020bf0
 1020bf0:	jo     0x1020bf2
 1020bf2:	add    BYTE PTR gs:[rbx+0x0],ah
 1020bf6:	imul   eax,DWORD PTR [rax],0x690066
 1020bfc:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1020c01:	add    BYTE PTR [rax+0x0],dh
 1020c04:	(bad)  
 1020c05:	add    BYTE PTR [rbx+0x0],ah
 1020c08:	imul   eax,DWORD PTR [rax],0x61
 1020c0b:	add    BYTE PTR [rdi+0x0],ah
 1020c0e:	add    BYTE PTR gs:[rax],ah
 1020c11:	add    BYTE PTR [rbp+0x0],ah
 1020c14:	js     0x1020c16
 1020c16:	imul   eax,DWORD PTR [rax],0x740073
 1020c1c:	jae    0x1020c1e
 1020c1e:	add    BYTE PTR cs:[rdx],cl
 1020c21:	add    BYTE PTR [rsi],ah
 1020c23:	add    BYTE PTR [rax+rax*1+0x68],dl
 1020c27:	add    BYTE PTR [rbp+0x0],ah
 1020c2a:	and    BYTE PTR [rax],al
 1020c2c:	jae    0x1020c2e
 1020c2e:	jo     0x1020c30
 1020c30:	add    BYTE PTR gs:[rbx+0x0],ah
 1020c34:	imul   eax,DWORD PTR [rax],0x690066
 1020c3a:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1020c3f:	add    BYTE PTR [rax+0x0],dh
 1020c42:	(bad)  
 1020c43:	add    BYTE PTR [rbx+0x0],ah
 1020c46:	imul   eax,DWORD PTR [rax],0x61
 1020c49:	add    BYTE PTR [rdi+0x0],ah
 1020c4c:	add    BYTE PTR gs:[rax],ah
 1020c4f:	add    BYTE PTR [rax+rax*1+0x6f],ah
 1020c53:	add    BYTE PTR [rbp+0x0],ah
 1020c56:	jae    0x1020c58
 1020c58:	and    BYTE PTR [rax],al
 1020c5a:	outs   dx,BYTE PTR ds:[rsi]
 1020c5b:	add    BYTE PTR [rdi+0x0],ch
 1020c5e:	je     0x1020c60
 1020c60:	and    BYTE PTR [rax],al
 1020c62:	add    BYTE PTR gs:[rax+0x0],bh
 1020c66:	imul   eax,DWORD PTR [rax],0x740073
 1020c6c:	add    BYTE PTR cs:[rdx],cl
 1020c6f:	add    BYTE PTR [rsi+0x0],dl
 1020c72:	add    BYTE PTR [r10+0x0],r14b
 1020c76:	jb     0x1020c78
 1020c78:	outs   dx,DWORD PTR ds:[rsi]
 1020c79:	add    BYTE PTR [rdx+0x0],dh
 1020c7c:	and    BYTE PTR [rax],al
 1020c7e:	sub    BYTE PTR [rax],al
 1020c80:	xor    BYTE PTR [rax],al
 1020c82:	js     0x1020c84
 1020c84:	and    eax,0x21003100
 1020c89:	add    BYTE PTR [rax],bh
 1020c8b:	add    BYTE PTR [rsi],ch
 1020c8d:	add    BYTE PTR [rax],bh
 1020c8f:	add    BYTE PTR [rax+0x0],bl
 1020c92:	and    DWORD PTR [rax],eax
 1020c94:	sub    DWORD PTR [rax],eax
 1020c96:	and    BYTE PTR [rax],al
 1020c98:	ja     0x1020c9a
 1020c9a:	push   0x6c006900
 1020c9f:	add    BYTE PTR [rbp+0x0],ah
 1020ca2:	and    BYTE PTR [rax],al
 1020ca4:	movsxd eax,DWORD PTR [rax]
 1020ca6:	push   0x63006500
 1020cab:	add    BYTE PTR [rbx+0x0],ch
 1020cae:	imul   eax,DWORD PTR [rax],0x67006e
 1020cb4:	and    BYTE PTR [rax],al
 1020cb6:	data16 add BYTE PTR [rdi+0x0],ch
 1020cba:	jb     0x1020cbc
 1020cbc:	and    BYTE PTR [rax],al
 1020cbe:	je     0x1020cc0
 1020cc0:	push   0x20006500
 1020cc5:	add    BYTE PTR [rbp+0x0],ah
 1020cc8:	js     0x1020cca
 1020cca:	imul   eax,DWORD PTR [rax],0x740073
 1020cd0:	add    BYTE PTR gs:[rsi+0x0],ch
 1020cd4:	movsxd eax,DWORD PTR [rax]
 1020cd6:	add    BYTE PTR gs:[rax],ah
 1020cd9:	add    BYTE PTR [rdi+0x0],ch
 1020cdc:	data16 add BYTE PTR [rax],ah
 1020cdf:	add    BYTE PTR [rax+0x0],dh
 1020ce2:	(bad)  
 1020ce3:	add    BYTE PTR [rbx+0x0],ah
 1020ce6:	imul   eax,DWORD PTR [rax],0x61
 1020ce9:	add    BYTE PTR [rdi+0x0],ah
 1020cec:	add    BYTE PTR gs:[rax],ah
 1020cef:	add    BYTE PTR [rdx],ah
 1020cf1:	add    BYTE PTR [rip+0x21003200],ah        # 0x22023ef7
 1020cf7:	add    BYTE PTR [rbx+0x0],dh
 1020cfa:	and    DWORD PTR [rax],eax
 1020cfc:	and    al,BYTE PTR [rax]
 1020cfe:	and    BYTE PTR [rax],al
 1020d00:	outs   dx,DWORD PTR ds:[rsi]
 1020d01:	add    BYTE PTR [rsi+0x0],ch
 1020d04:	and    BYTE PTR [rax],al
 1020d06:	push   rbx
 1020d07:	add    BYTE PTR [rcx+0x0],dl
 1020d0a:	rex.WR add BYTE PTR [rax],r12b
 1020d0d:	add    BYTE PTR [rbx+0x0],dl
 1020d10:	add    BYTE PTR gs:[rdx+0x0],dh
 1020d14:	jbe    0x1020d16
 1020d16:	add    BYTE PTR gs:[rdx+0x0],dh
 1020d1a:	add    BYTE PTR cs:[rdx],cl
 1020d1d:	add    BYTE PTR [rip+0x72004500],bh        # 0x73025223
 1020d23:	add    BYTE PTR [rdx+0x0],dh
 1020d26:	outs   dx,DWORD PTR ds:[rsi]
 1020d27:	add    BYTE PTR [rdx+0x0],dh
 1020d2a:	and    BYTE PTR [rax],al
 1020d2c:	sub    BYTE PTR [rax],al
 1020d2e:	xor    BYTE PTR [rax],al
 1020d30:	js     0x1020d32
 1020d32:	and    eax,0x21003100
 1020d37:	add    BYTE PTR [rax],bh
 1020d39:	add    BYTE PTR [rsi],ch
 1020d3b:	add    BYTE PTR [rax],bh
 1020d3d:	add    BYTE PTR [rax+0x0],bl
 1020d40:	and    DWORD PTR [rax],eax
 1020d42:	sub    DWORD PTR [rax],eax
 1020d44:	and    BYTE PTR [rax],al
 1020d46:	add    BYTE PTR fs:[rbp+0x0],ah
 1020d4a:	ins    BYTE PTR es:[rdi],dx
 1020d4b:	add    BYTE PTR [rbp+0x0],ah
 1020d4e:	je     0x1020d50
 1020d50:	imul   eax,DWORD PTR [rax],0x67006e
 1020d56:	and    BYTE PTR [rax],al
 1020d58:	jo     0x1020d5a
 1020d5a:	(bad)  
 1020d5b:	add    BYTE PTR [rbx+0x0],ah
 1020d5e:	imul   eax,DWORD PTR [rax],0x61
 1020d61:	add    BYTE PTR [rdi+0x0],ah
 1020d64:	add    BYTE PTR gs:[rax],ah
 1020d67:	add    BYTE PTR [rdx],ah
 1020d69:	add    BYTE PTR [rip+0x21003200],ah        # 0x22023f6f
 1020d6f:	add    BYTE PTR [rbx+0x0],dh
 1020d72:	and    DWORD PTR [rax],eax
 1020d74:	and    al,BYTE PTR [rax]
 1020d76:	and    BYTE PTR [rax],al
 1020d78:	data16 add BYTE PTR [rdx+0x0],dh
 1020d7c:	outs   dx,DWORD PTR ds:[rsi]
 1020d7d:	add    BYTE PTR [rbp+0x0],ch
 1020d80:	and    BYTE PTR [rax],al
 1020d82:	push   rbx
 1020d83:	add    BYTE PTR [rcx+0x0],dl
 1020d86:	rex.WR add BYTE PTR [rax],r12b
 1020d89:	add    BYTE PTR [rbx+0x0],dl
 1020d8c:	add    BYTE PTR gs:[rdx+0x0],dh
 1020d90:	jbe    0x1020d92
 1020d92:	add    BYTE PTR gs:[rdx+0x0],dh
 1020d96:	add    BYTE PTR cs:[rdx],cl
 1020d99:	add    BYTE PTR [rdx],bh
 1020d9b:	add    BYTE PTR [rbp+0x0],al
 1020d9e:	jb     0x1020da0
 1020da0:	jb     0x1020da2
 1020da2:	outs   dx,DWORD PTR ds:[rsi]
 1020da3:	add    BYTE PTR [rdx+0x0],dh
 1020da6:	and    BYTE PTR [rax],al
 1020da8:	sub    BYTE PTR [rax],al
 1020daa:	xor    BYTE PTR [rax],al
 1020dac:	js     0x1020dae
 1020dae:	and    eax,0x21003100
 1020db3:	add    BYTE PTR [rax],bh
 1020db5:	add    BYTE PTR [rsi],ch
 1020db7:	add    BYTE PTR [rax],bh
 1020db9:	add    BYTE PTR [rax+0x0],bl
 1020dbc:	and    DWORD PTR [rax],eax
 1020dbe:	sub    DWORD PTR [rax],eax
 1020dc0:	and    BYTE PTR [rax],al
 1020dc2:	movsxd eax,DWORD PTR [rax]
 1020dc4:	jb     0x1020dc6
 1020dc6:	add    BYTE PTR gs:[rcx+0x0],ah
 1020dca:	je     0x1020dcc
 1020dcc:	imul   eax,DWORD PTR [rax],0x67006e
 1020dd2:	and    BYTE PTR [rax],al
 1020dd4:	data16 add BYTE PTR [rdi+0x0],ch
 1020dd8:	ins    BYTE PTR es:[rdi],dx
 1020dd9:	add    BYTE PTR [rax+rax*1+0x65],ah
 1020ddd:	add    BYTE PTR [rdx+0x0],dh
 1020de0:	and    BYTE PTR [rax],al
 1020de2:	and    eax,0x21003300
 1020de7:	add    BYTE PTR [rbx+0x0],dh
 1020dea:	and    DWORD PTR [rax],eax
 1020dec:	and    BYTE PTR [rax],al
 1020dee:	imul   eax,DWORD PTR [rax],0x20006e
 1020df4:	data16 add BYTE PTR [rdi+0x0],ch
 1020df8:	ins    BYTE PTR es:[rdi],dx
 1020df9:	add    BYTE PTR [rax+rax*1+0x65],ah
 1020dfd:	add    BYTE PTR [rdx+0x0],dh
 1020e00:	and    BYTE PTR [rax],al
 1020e02:	and    eax,0x21003200
 1020e07:	add    BYTE PTR [rbx+0x0],dh
 1020e0a:	and    DWORD PTR [rax],eax
 1020e0c:	add    BYTE PTR cs:[rdx],cl
 1020e0f:	add    BYTE PTR [rbx+0x0],al
 1020e12:	add    BYTE PTR [r10+0x0],r14b
 1020e16:	jb     0x1020e18
 1020e18:	outs   dx,DWORD PTR ds:[rsi]
 1020e19:	add    BYTE PTR [rdx+0x0],dh
 1020e1c:	and    BYTE PTR [rax],al
 1020e1e:	sub    BYTE PTR [rax],al
 1020e20:	xor    BYTE PTR [rax],al
 1020e22:	js     0x1020e24
 1020e24:	and    eax,0x21003100
 1020e29:	add    BYTE PTR [rax],bh
 1020e2b:	add    BYTE PTR [rsi],ch
 1020e2d:	add    BYTE PTR [rax],bh
 1020e2f:	add    BYTE PTR [rax+0x0],bl
 1020e32:	and    DWORD PTR [rax],eax
 1020e34:	sub    DWORD PTR [rax],eax
 1020e36:	and    BYTE PTR [rax],al
 1020e38:	jb     0x1020e3a
 1020e3a:	add    BYTE PTR gs:[rsi+0x0],ch
 1020e3e:	(bad)  
 1020e3f:	add    BYTE PTR [rbp+0x0],ch
 1020e42:	imul   eax,DWORD PTR [rax],0x67006e
 1020e48:	and    BYTE PTR [rax],al
 1020e4a:	data16 add BYTE PTR [rdi+0x0],ch
 1020e4e:	ins    BYTE PTR es:[rdi],dx
 1020e4f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1020e53:	add    BYTE PTR [rdx+0x0],dh
 1020e56:	and    BYTE PTR [rax],al
 1020e58:	and    eax,0x21003300
 1020e5d:	add    BYTE PTR [rbx+0x0],dh
 1020e60:	and    DWORD PTR [rax],eax
 1020e62:	and    BYTE PTR [rax],al
 1020e64:	imul   eax,DWORD PTR [rax],0x20006e
 1020e6a:	data16 add BYTE PTR [rdi+0x0],ch
 1020e6e:	ins    BYTE PTR es:[rdi],dx
 1020e6f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1020e73:	add    BYTE PTR [rdx+0x0],dh
 1020e76:	and    BYTE PTR [rax],al
 1020e78:	and    eax,0x21003200
 1020e7d:	add    BYTE PTR [rbx+0x0],dh
 1020e80:	and    DWORD PTR [rax],eax
 1020e82:	and    BYTE PTR [rax],al
 1020e84:	je     0x1020e86
 1020e86:	outs   dx,DWORD PTR ds:[rsi]
 1020e87:	add    BYTE PTR [rax],ah
 1020e89:	add    BYTE PTR [rip+0x21003400],ah        # 0x2202428f
 1020e8f:	add    BYTE PTR [rbx+0x0],dh
 1020e92:	and    DWORD PTR [rax],eax
 1020e94:	add    BYTE PTR cs:[rdx],cl
 1020e97:	add    BYTE PTR [rdx],ch
 1020e99:	add    BYTE PTR [rbp+0x0],al
 1020e9c:	jb     0x1020e9e
 1020e9e:	jb     0x1020ea0
 1020ea0:	outs   dx,DWORD PTR ds:[rsi]
 1020ea1:	add    BYTE PTR [rdx+0x0],dh
 1020ea4:	and    BYTE PTR [rax],al
 1020ea6:	sub    BYTE PTR [rax],al
 1020ea8:	xor    BYTE PTR [rax],al
 1020eaa:	js     0x1020eac
 1020eac:	and    eax,0x21003100
 1020eb1:	add    BYTE PTR [rax],bh
 1020eb3:	add    BYTE PTR [rsi],ch
 1020eb5:	add    BYTE PTR [rax],bh
 1020eb7:	add    BYTE PTR [rax+0x0],bl
 1020eba:	and    DWORD PTR [rax],eax
 1020ebc:	sub    DWORD PTR [rax],eax
 1020ebe:	and    BYTE PTR [rax],al
 1020ec0:	add    BYTE PTR fs:[rbp+0x0],ah
 1020ec4:	ins    BYTE PTR es:[rdi],dx
 1020ec5:	add    BYTE PTR [rbp+0x0],ah
 1020ec8:	je     0x1020eca
 1020eca:	imul   eax,DWORD PTR [rax],0x67006e
 1020ed0:	and    BYTE PTR [rax],al
 1020ed2:	data16 add BYTE PTR [rdi+0x0],ch
 1020ed6:	ins    BYTE PTR es:[rdi],dx
 1020ed7:	add    BYTE PTR [rax+rax*1+0x65],ah
 1020edb:	add    BYTE PTR [rdx+0x0],dh
 1020ede:	and    BYTE PTR [rax],al
 1020ee0:	and    eax,0x21003200
 1020ee5:	add    BYTE PTR [rbx+0x0],dh
 1020ee8:	and    DWORD PTR [rax],eax
 1020eea:	add    BYTE PTR cs:[rdx],cl
 1020eed:	add    BYTE PTR [rax+rax*1],dh
 1020ef0:	add    BYTE PTR [r10+0x0],r14b
 1020ef4:	jb     0x1020ef6
 1020ef6:	outs   dx,DWORD PTR ds:[rsi]
 1020ef7:	add    BYTE PTR [rdx+0x0],dh
 1020efa:	and    BYTE PTR [rax],al
 1020efc:	sub    BYTE PTR [rax],al
 1020efe:	xor    BYTE PTR [rax],al
 1020f00:	js     0x1020f02
 1020f02:	and    eax,0x21003100
 1020f07:	add    BYTE PTR [rax],bh
 1020f09:	add    BYTE PTR [rsi],ch
 1020f0b:	add    BYTE PTR [rax],bh
 1020f0d:	add    BYTE PTR [rax+0x0],bl
 1020f10:	and    DWORD PTR [rax],eax
 1020f12:	sub    DWORD PTR [rax],eax
 1020f14:	and    BYTE PTR [rax],al
 1020f16:	movsxd eax,DWORD PTR [rax]
 1020f18:	push   0x63006500
 1020f1d:	add    BYTE PTR [rbx+0x0],ch
 1020f20:	imul   eax,DWORD PTR [rax],0x67006e
 1020f26:	and    BYTE PTR [rax],al
 1020f28:	imul   eax,DWORD PTR [rax],0x200066
 1020f2e:	data16 add BYTE PTR [rdi+0x0],ch
 1020f32:	ins    BYTE PTR es:[rdi],dx
 1020f33:	add    BYTE PTR [rax+rax*1+0x65],ah
 1020f37:	add    BYTE PTR [rdx+0x0],dh
 1020f3a:	and    BYTE PTR [rax],al
 1020f3c:	and    eax,0x21003200
 1020f41:	add    BYTE PTR [rbx+0x0],dh
 1020f44:	and    DWORD PTR [rax],eax
 1020f46:	and    BYTE PTR [rax],al
 1020f48:	add    BYTE PTR gs:[rax+0x0],bh
 1020f4c:	imul   eax,DWORD PTR [rax],0x740073
 1020f52:	jae    0x1020f54
 1020f54:	add    BYTE PTR cs:[rdx],cl
 1020f57:	add    BYTE PTR [rbx],dl
 1020f59:	add    BYTE PTR [rax+rax*1+0x65],al
 1020f5d:	add    BYTE PTR [rbx+0x0],dh
 1020f60:	movsxd eax,DWORD PTR [rax]
 1020f62:	jb     0x1020f64
 1020f64:	imul   eax,DWORD PTR [rax],0x740070
 1020f6a:	imul   eax,DWORD PTR [rax],0x6e006f
 1020f70:	cmp    al,BYTE PTR [rax]
 1020f72:	and    BYTE PTR [rax],al
 1020f74:	and    eax,0x21003100
 1020f79:	add    BYTE PTR [rbx+0x0],dh
 1020f7c:	and    DWORD PTR [rax],eax
 1020f7e:	or     al,BYTE PTR [rax]
 1020f80:	(bad)  
 1020f81:	add    BYTE PTR [rbx+0x0],dl
 1020f84:	outs   dx,DWORD PTR ds:[rsi]
 1020f85:	add    BYTE PTR [rbp+0x0],dh
 1020f88:	jb     0x1020f8a
 1020f8a:	movsxd eax,DWORD PTR [rax]
 1020f8c:	add    BYTE PTR gs:[rdx],bh
 1020f8f:	add    BYTE PTR [rax],ah
 1020f91:	add    BYTE PTR [rip+0x21003100],ah        # 0x22024097
 1020f97:	add    BYTE PTR [rbx+0x0],dh
 1020f9a:	and    DWORD PTR [rax],eax
 1020f9c:	or     al,BYTE PTR [rax]
 1020f9e:	xor    al,BYTE PTR [rax]
 1020fa0:	rex.RX add BYTE PTR [rcx+0x0],r12b
 1020fa4:	imul   eax,DWORD PTR [rax],0x65006c
 1020faa:	add    BYTE PTR fs:[rax],ah
 1020fad:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1020fb1:	add    BYTE PTR [rax],ah
 1020fb3:	add    BYTE PTR [rdx+0x0],dh
 1020fb6:	add    BYTE PTR gs:[rax+rax*1+0x72],dh
 1020fbb:	add    BYTE PTR [rcx+0x0],ch
 1020fbe:	add    BYTE PTR gs:[rsi+0x0],dh
 1020fc2:	add    BYTE PTR gs:[rax],ah
 1020fc5:	add    BYTE PTR [rbp+0x0],ah
 1020fc8:	jb     0x1020fca
 1020fca:	jb     0x1020fcc
 1020fcc:	outs   dx,DWORD PTR ds:[rsi]
 1020fcd:	add    BYTE PTR [rdx+0x0],dh
 1020fd0:	and    BYTE PTR [rax],al
 1020fd2:	imul   eax,DWORD PTR [rax],0x66006e
 1020fd8:	outs   dx,DWORD PTR ds:[rsi]
 1020fd9:	add    BYTE PTR [rdx+0x0],dh
 1020fdc:	ins    DWORD PTR es:[rdi],dx
 1020fdd:	add    BYTE PTR [rcx+0x0],ah
 1020fe0:	je     0x1020fe2
 1020fe2:	imul   eax,DWORD PTR [rax],0x6e006f
 1020fe8:	cmp    al,BYTE PTR [rax]
 1020fea:	and    BYTE PTR [rax],al
 1020fec:	xor    BYTE PTR [rax],al
 1020fee:	js     0x1020ff0
 1020ff0:	and    eax,0x21003100
 1020ff5:	add    BYTE PTR [rax],bh
 1020ff7:	add    BYTE PTR [rsi],ch
 1020ff9:	add    BYTE PTR [rax],bh
 1020ffb:	add    BYTE PTR [rax+0x0],bl
 1020ffe:	and    DWORD PTR [rax],eax
 1021000:	add    BYTE PTR cs:[rdx],cl
 1021003:	add    BYTE PTR [rbp+0x0],dl
 1021006:	add    BYTE PTR [r10+0x0],r14b
 102100a:	jb     0x102100c
 102100c:	outs   dx,DWORD PTR ds:[rsi]
 102100d:	add    BYTE PTR [rdx+0x0],dh
 1021010:	and    BYTE PTR [rax],al
 1021012:	sub    BYTE PTR [rax],al
 1021014:	xor    BYTE PTR [rax],al
 1021016:	js     0x1021018
 1021018:	and    eax,0x21003100
 102101d:	add    BYTE PTR [rax],bh
 102101f:	add    BYTE PTR [rsi],ch
 1021021:	add    BYTE PTR [rax],bh
 1021023:	add    BYTE PTR [rax+0x0],bl
 1021026:	and    DWORD PTR [rax],eax
 1021028:	sub    DWORD PTR [rax],eax
 102102a:	and    BYTE PTR [rax],al
 102102c:	ja     0x102102e
 102102e:	push   0x6c006900
 1021033:	add    BYTE PTR [rbp+0x0],ah
 1021036:	and    BYTE PTR [rax],al
 1021038:	movsxd eax,DWORD PTR [rax]
 102103a:	push   0x63006500
 102103f:	add    BYTE PTR [rbx+0x0],ch
 1021042:	imul   eax,DWORD PTR [rax],0x67006e
 1021048:	and    BYTE PTR [rax],al
 102104a:	data16 add BYTE PTR [rdi+0x0],ch
 102104e:	jb     0x1021050
 1021050:	and    BYTE PTR [rax],al
 1021052:	je     0x1021054
 1021054:	push   0x20006500
 1021059:	add    BYTE PTR [rbp+0x0],ah
 102105c:	js     0x102105e
 102105e:	imul   eax,DWORD PTR [rax],0x740073
 1021064:	add    BYTE PTR gs:[rsi+0x0],ch
 1021068:	movsxd eax,DWORD PTR [rax]
 102106a:	add    BYTE PTR gs:[rax],ah
 102106d:	add    BYTE PTR [rdi+0x0],ch
 1021070:	data16 add BYTE PTR [rax],ah
 1021073:	add    BYTE PTR [rsi+0x0],ah
 1021076:	outs   dx,DWORD PTR ds:[rsi]
 1021077:	add    BYTE PTR [rax+rax*1+0x64],ch
 102107b:	add    BYTE PTR [rbp+0x0],ah
 102107e:	jb     0x1021080
 1021080:	and    BYTE PTR [rax],al
 1021082:	and    al,BYTE PTR [rax]
 1021084:	and    eax,0x21003200
 1021089:	add    BYTE PTR [rbx+0x0],dh
 102108c:	and    DWORD PTR [rax],eax
 102108e:	and    al,BYTE PTR [rax]
 1021090:	and    BYTE PTR [rax],al
 1021092:	outs   dx,DWORD PTR ds:[rsi]
 1021093:	add    BYTE PTR [rsi+0x0],ch
 1021096:	and    BYTE PTR [rax],al
 1021098:	push   rbx
 1021099:	add    BYTE PTR [rcx+0x0],dl
 102109c:	rex.WR add BYTE PTR [rax],r12b
 102109f:	add    BYTE PTR [rbx+0x0],dl
 10210a2:	add    BYTE PTR gs:[rdx+0x0],dh
 10210a6:	jbe    0x10210a8
 10210a8:	add    BYTE PTR gs:[rdx+0x0],dh
 10210ac:	add    BYTE PTR cs:[rdx],cl
 10210af:	add    BYTE PTR [rax+rax*1],dh
 10210b2:	and    eax,0x21003600
 10210b7:	add    BYTE PTR [rbx+0x0],dh
 10210ba:	and    DWORD PTR [rax],eax
 10210bc:	and    BYTE PTR [rax],al
 10210be:	and    BYTE PTR [rax],al
 10210c0:	and    eax,0x21003700
 10210c5:	add    BYTE PTR [rbx+0x0],dh
 10210c8:	and    DWORD PTR [rax],eax
 10210ca:	or     DWORD PTR [rax],eax
 10210cc:	and    eax,0x21003200
 10210d1:	add    BYTE PTR [rcx],dh
 10210d3:	add    BYTE PTR [rip+0x75006c00],dh        # 0x76027cd9
 10210d9:	add    BYTE PTR [rcx],ah
 10210db:	add    BYTE PTR [rcx],cl
 10210dd:	add    BYTE PTR [rip+0x21003100],ah        # 0x220241e3
 10210e3:	add    BYTE PTR [rbx+0x0],dh
 10210e6:	and    DWORD PTR [rax],eax
 10210e8:	and    BYTE PTR [rax],al
 10210ea:	sub    BYTE PTR [rax],al
 10210ec:	jbe    0x10210ee
 10210ee:	and    eax,0x21003300
 10210f3:	add    BYTE PTR [rax+rax*1+0x75],ch
 10210f7:	add    BYTE PTR [rcx],ah
 10210f9:	add    BYTE PTR [rsi],ch
 10210fb:	add    BYTE PTR [rip+0x21003400],ah        # 0x22024501
 1021101:	add    BYTE PTR [rax+rax*1+0x75],ch
 1021105:	add    BYTE PTR [rcx],ah
 1021107:	add    BYTE PTR [rsi],ch
 1021109:	add    BYTE PTR [rip+0x21003500],ah        # 0x2202460f
 102110f:	add    BYTE PTR [rax+rax*1+0x75],ch
 1021113:	add    BYTE PTR [rcx],ah
 1021115:	add    BYTE PTR [rcx],ch
 1021117:	add    BYTE PTR [rdx],cl
 1021119:	add    BYTE PTR [rdx],dl
 102111b:	add    BYTE PTR [rax+rax*1],bh
 102111e:	rex.RX add BYTE PTR [rdi+0x0],r13b
 1021122:	ins    BYTE PTR es:[rdi],dx
 1021123:	add    BYTE PTR [rax+rax*1+0x65],ah
 1021127:	add    BYTE PTR [rdx+0x0],dh
 102112a:	add    BYTE PTR ds:[rcx],cl
 102112d:	add    BYTE PTR [rcx],cl
 102112f:	add    BYTE PTR [rcx],cl
 1021131:	add    BYTE PTR [rcx],cl
 1021133:	add    BYTE PTR [rip+0x21003100],ah        # 0x22024239
 1021139:	add    BYTE PTR [rbx+0x0],dh
 102113c:	and    DWORD PTR [rax],eax
 102113e:	or     al,BYTE PTR [rax]
 1021140:	adc    al,0x0
 1021142:	add    BYTE PTR [rcx+0x0],r13b
 1021146:	jb     0x1021148
 1021148:	add    BYTE PTR gs:[rbx+0x0],ah
 102114c:	je     0x102114e
 102114e:	outs   dx,DWORD PTR ds:[rsi]
 102114f:	add    BYTE PTR [rdx+0x0],dh
 1021152:	jns    0x1021154
 1021154:	and    BYTE PTR [rax],al
 1021156:	outs   dx,DWORD PTR ds:[rsi]
 1021157:	add    BYTE PTR [rsi+0x0],ah
 102115a:	and    BYTE PTR [rax],al
 102115c:	and    eax,0x21003100
 1021161:	add    BYTE PTR [rbx+0x0],dh
 1021164:	and    DWORD PTR [rax],eax
 1021166:	or     al,BYTE PTR [rax]
 1021168:	or     al,BYTE PTR [rax]
 102116a:	and    al,0x0
 102116c:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 1021170:	and    BYTE PTR [rax],al
 1021172:	data16 add BYTE PTR [rdi+0x0],ch
 1021176:	ins    BYTE PTR es:[rdi],dx
 1021177:	add    BYTE PTR [rax+rax*1+0x65],ah
 102117b:	add    BYTE PTR [rdx+0x0],dh
 102117e:	jae    0x1021180
 1021180:	and    BYTE PTR [rax],al
 1021182:	outs   dx,DWORD PTR ds:[rsi]
 1021183:	add    BYTE PTR [rdx+0x0],dh
 1021186:	and    BYTE PTR [rax],al
 1021188:	jo     0x102118a
 102118a:	(bad)  
 102118b:	add    BYTE PTR [rbx+0x0],ah
 102118e:	imul   eax,DWORD PTR [rax],0x61
 1021191:	add    BYTE PTR [rdi+0x0],ah
 1021194:	add    BYTE PTR gs:[rbx+0x0],dh
 1021198:	and    BYTE PTR [rax],al
 102119a:	ja     0x102119c
 102119c:	add    BYTE PTR gs:[rdx+0x0],dh
 10211a0:	add    BYTE PTR gs:[rax],ah
 10211a3:	add    BYTE PTR [rsi+0x0],ah
 10211a6:	outs   dx,DWORD PTR ds:[rsi]
 10211a7:	add    BYTE PTR [rbp+0x0],dh
 10211aa:	outs   dx,BYTE PTR ds:[rsi]
 10211ab:	add    BYTE PTR [rax+rax*1+0x2e],ah
 10211af:	add    BYTE PTR [rdx],cl
 10211b1:	add    BYTE PTR [rdx],cl
 10211b3:	add    BYTE PTR [rdx],bh
 10211b5:	add    BYTE PTR [rax+rax*1+0x68],dl
 10211b9:	add    BYTE PTR [rbp+0x0],ah
 10211bc:	jb     0x10211be
 10211be:	add    BYTE PTR gs:[rax],ah
 10211c1:	add    BYTE PTR [rdi+0x0],dh
 10211c4:	add    BYTE PTR gs:[rdx+0x0],dh
 10211c8:	add    BYTE PTR gs:[rax],ah
 10211cb:	add    BYTE PTR [rip+0x21003100],ah        # 0x220242d1
 10211d1:	add    BYTE PTR [rax+rax*1+0x75],ch
 10211d5:	add    BYTE PTR [rcx],ah
 10211d7:	add    BYTE PTR [rax],ah
 10211d9:	add    BYTE PTR [rax+0x0],dh
 10211dc:	(bad)  
 10211dd:	add    BYTE PTR [rbx+0x0],ah
 10211e0:	imul   eax,DWORD PTR [rax],0x61
 10211e3:	add    BYTE PTR [rdi+0x0],ah
 10211e6:	add    BYTE PTR gs:[rax],ch
 10211e9:	add    BYTE PTR [rbx+0x0],dh
 10211ec:	sub    DWORD PTR [rax],eax
 10211ee:	and    BYTE PTR [rax],al
 10211f0:	(bad)  
 10211f1:	add    BYTE PTR [rsi+0x0],ch
 10211f4:	add    BYTE PTR fs:[rax],ah
 10211f7:	add    BYTE PTR [rip+0x21003200],ah        # 0x220243fd
 10211fd:	add    BYTE PTR [rax+rax*1+0x75],ch
 1021201:	add    BYTE PTR [rcx],ah
 1021203:	add    BYTE PTR [rax],ah
 1021205:	add    BYTE PTR [rsi+0x0],ah
 1021208:	outs   dx,DWORD PTR ds:[rsi]
 1021209:	add    BYTE PTR [rax+rax*1+0x64],ch
 102120d:	add    BYTE PTR [rbp+0x0],ah
 1021210:	jb     0x1021212
 1021212:	sub    BYTE PTR [rax],al
 1021214:	jae    0x1021216
 1021216:	sub    DWORD PTR [rax],eax
 1021218:	and    BYTE PTR [rax],al
 102121a:	data16 add BYTE PTR [rdi+0x0],ch
 102121e:	jne    0x1021220
 1021220:	outs   dx,BYTE PTR ds:[rsi]
 1021221:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1021225:	add    BYTE PTR [rdx],cl
 1021227:	add    BYTE PTR [rdx],cl
 1021229:	add    BYTE PTR [rax],al
 102122b:	add    BYTE PTR [rip+0x68005400],bl        # 0x69026631
 1021231:	add    BYTE PTR [rbp+0x0],ah
 1021234:	and    BYTE PTR [rax],al
 1021236:	jae    0x1021238
 1021238:	jo     0x102123a
 102123a:	add    BYTE PTR gs:[rbx+0x0],ah
 102123e:	imul   eax,DWORD PTR [rax],0x690066
 1021244:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1021249:	add    BYTE PTR [rsi+0x0],ah
 102124c:	outs   dx,DWORD PTR ds:[rsi]
 102124d:	add    BYTE PTR [rax+rax*1+0x64],ch
 1021251:	add    BYTE PTR [rbp+0x0],ah
 1021254:	jb     0x1021256
 1021256:	and    BYTE PTR [rax],al
 1021258:	add    BYTE PTR gs:[rax+0x0],bh
 102125c:	imul   eax,DWORD PTR [rax],0x740073
 1021262:	jae    0x1021264
 1021264:	add    BYTE PTR cs:[rdx],cl
 1021267:	add    BYTE PTR [rip+0x68005400],ah        # 0x6902666d
 102126d:	add    BYTE PTR [rbp+0x0],ah
 1021270:	and    BYTE PTR [rax],al
 1021272:	jae    0x1021274
 1021274:	jo     0x1021276
 1021276:	add    BYTE PTR gs:[rbx+0x0],ah
 102127a:	imul   eax,DWORD PTR [rax],0x690066
 1021280:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1021285:	add    BYTE PTR [rsi+0x0],ah
 1021288:	outs   dx,DWORD PTR ds:[rsi]
 1021289:	add    BYTE PTR [rax+rax*1+0x64],ch
 102128d:	add    BYTE PTR [rbp+0x0],ah
 1021290:	jb     0x1021292
 1021292:	and    BYTE PTR [rax],al
 1021294:	add    BYTE PTR fs:[rdi+0x0],ch
 1021298:	add    BYTE PTR gs:[rbx+0x0],dh
 102129c:	and    BYTE PTR [rax],al
 102129e:	outs   dx,BYTE PTR ds:[rsi]
 102129f:	add    BYTE PTR [rdi+0x0],ch
 10212a2:	je     0x10212a4
 10212a4:	and    BYTE PTR [rax],al
 10212a6:	add    BYTE PTR gs:[rax+0x0],bh
 10212aa:	imul   eax,DWORD PTR [rax],0x740073
 10212b0:	add    BYTE PTR cs:[rdx],cl
 10212b3:	add    BYTE PTR [rsi],ch
 10212b5:	add    BYTE PTR [rax+rax*1+0x68],dl
 10212b9:	add    BYTE PTR [rbp+0x0],ah
 10212bc:	and    BYTE PTR [rax],al
 10212be:	outs   dx,BYTE PTR ds:[rsi]
 10212bf:	add    BYTE PTR [rcx+0x0],ah
 10212c2:	ins    DWORD PTR es:[rdi],dx
 10212c3:	add    BYTE PTR [rbp+0x0],ah
 10212c6:	and    BYTE PTR [rax],al
 10212c8:	and    al,BYTE PTR [rax]
 10212ca:	and    eax,0x21003100
 10212cf:	add    BYTE PTR [rbx+0x0],dh
 10212d2:	and    DWORD PTR [rax],eax
 10212d4:	and    al,BYTE PTR [rax]
 10212d6:	and    BYTE PTR [rax],al
 10212d8:	imul   eax,DWORD PTR [rax],0x200073
 10212de:	outs   dx,BYTE PTR ds:[rsi]
 10212df:	add    BYTE PTR [rdi+0x0],ch
 10212e2:	je     0x10212e4
 10212e4:	and    BYTE PTR [rax],al
 10212e6:	(bad)  
 10212e7:	add    BYTE PTR [rax],ah
 10212e9:	add    BYTE PTR [rsi+0x0],dh
 10212ec:	(bad)  
 10212ed:	add    BYTE PTR [rax+rax*1+0x69],ch
 10212f1:	add    BYTE PTR [rax+rax*1+0x20],ah
 10212f5:	add    BYTE PTR [rax+0x0],dh
 10212f8:	(bad)  
 10212f9:	add    BYTE PTR [rbx+0x0],ah
 10212fc:	imul   eax,DWORD PTR [rax],0x61
 10212ff:	add    BYTE PTR [rdi+0x0],ah
 1021302:	add    BYTE PTR gs:[rax],ah
 1021305:	add    BYTE PTR [rsi+0x0],ch
 1021308:	(bad)  
 1021309:	add    BYTE PTR [rbp+0x0],ch
 102130c:	add    BYTE PTR gs:[rsi],ch
 102130f:	add    BYTE PTR [rdx],cl
 1021311:	add    BYTE PTR [rip+0x68005400],bh        # 0x69026717
 1021317:	add    BYTE PTR [rbp+0x0],ah
 102131a:	and    BYTE PTR [rax],al
 102131c:	jo     0x102131e
 102131e:	(bad)  
 102131f:	add    BYTE PTR [rbx+0x0],ah
 1021322:	imul   eax,DWORD PTR [rax],0x61
 1021325:	add    BYTE PTR [rdi+0x0],ah
 1021328:	add    BYTE PTR gs:[rax],ah
 102132b:	add    BYTE PTR [rsi+0x0],ch
 102132e:	(bad)  
 102132f:	add    BYTE PTR [rbp+0x0],ch
 1021332:	add    BYTE PTR gs:[rax],ah
 1021335:	add    BYTE PTR [rcx+0x0],ch
 1021338:	jae    0x102133a
 102133a:	and    BYTE PTR [rax],al
 102133c:	je     0x102133e
 102133e:	outs   dx,DWORD PTR ds:[rsi]
 102133f:	add    BYTE PTR [rdi+0x0],ch
 1021342:	and    BYTE PTR [rax],al
 1021344:	ins    BYTE PTR es:[rdi],dx
 1021345:	add    BYTE PTR [rdi+0x0],ch
 1021348:	outs   dx,BYTE PTR ds:[rsi]
 1021349:	add    BYTE PTR [rdi+0x0],ah
 102134c:	add    BYTE PTR cs:[rax],ah
 102134f:	add    BYTE PTR [rax+rax*1+0x68],dl
 1021353:	add    BYTE PTR [rbp+0x0],ah
 1021356:	and    BYTE PTR [rax],al
 1021358:	ins    DWORD PTR es:[rdi],dx
 1021359:	add    BYTE PTR [rcx+0x0],ah
 102135c:	js     0x102135e
 102135e:	imul   eax,DWORD PTR [rax],0x75006d
 1021364:	ins    DWORD PTR es:[rdi],dx
 1021365:	add    BYTE PTR [rax],ah
 1021367:	add    BYTE PTR [rcx+0x0],ch
 102136a:	jae    0x102136c
 102136c:	and    BYTE PTR [rax],al
 102136e:	xor    DWORD PTR [rax],eax
 1021370:	xor    al,BYTE PTR [rax]
 1021372:	cmp    BYTE PTR [rax],al
 1021374:	and    BYTE PTR [rax],al
 1021376:	movsxd eax,DWORD PTR [rax]
 1021378:	push   0x72006100
 102137d:	add    BYTE PTR [rcx+0x0],ah
 1021380:	movsxd eax,DWORD PTR [rax]
 1021382:	je     0x1021384
 1021384:	add    BYTE PTR gs:[rdx+0x0],dh
 1021388:	jae    0x102138a
 102138a:	add    BYTE PTR cs:[rdx],cl
 102138d:	add    BYTE PTR [rax+rax*1+0x54],dl
 1021391:	add    BYTE PTR [rax+0x0],ch
 1021394:	add    BYTE PTR gs:[rax],ah
 1021397:	add    BYTE PTR [rax+0x0],dh
 102139a:	(bad)  
 102139b:	add    BYTE PTR [rbx+0x0],ah
 102139e:	imul   eax,DWORD PTR [rax],0x61
 10213a1:	add    BYTE PTR [rdi+0x0],ah
 10213a4:	add    BYTE PTR gs:[rax],ah
 10213a7:	add    BYTE PTR [rip+0x21003100],ah        # 0x220244ad
 10213ad:	add    BYTE PTR [rbx+0x0],dh
 10213b0:	and    DWORD PTR [rax],eax
 10213b2:	and    BYTE PTR [rax],al
 10213b4:	movsxd eax,DWORD PTR [rax]
 10213b6:	outs   dx,DWORD PTR ds:[rsi]
 10213b7:	add    BYTE PTR [rbp+0x0],dh
 10213ba:	ins    BYTE PTR es:[rdi],dx
 10213bb:	add    BYTE PTR [rax+rax*1+0x20],ah
 10213bf:	add    BYTE PTR [rsi+0x0],ch
 10213c2:	outs   dx,DWORD PTR ds:[rsi]
 10213c3:	add    BYTE PTR [rax+rax*1+0x20],dh
 10213c7:	add    BYTE PTR [rdx+0x0],ah
 10213ca:	add    BYTE PTR gs:[rax],ah
 10213cd:	add    BYTE PTR [rax+rax*1+0x65],ah
 10213d1:	add    BYTE PTR [rax+rax*1+0x65],ch
 10213d5:	add    BYTE PTR [rax+rax*1+0x65],dh
 10213d9:	add    BYTE PTR [rax+rax*1+0x20],ah
 10213dd:	add    BYTE PTR [rax+rax*1+0x75],ah
 10213e1:	add    BYTE PTR [rdx+0x0],dh
 10213e4:	imul   eax,DWORD PTR [rax],0x67006e
 10213ea:	and    BYTE PTR [rax],al
 10213ec:	je     0x10213ee
 10213ee:	push   0x20006500
 10213f3:	add    BYTE PTR [rbp+0x0],ch
 10213f6:	outs   dx,DWORD PTR ds:[rsi]
 10213f7:	add    BYTE PTR [rsi+0x0],dh
 10213fa:	add    BYTE PTR gs:[rsi],ch
 10213fd:	add    BYTE PTR [rax],ah
 10213ff:	add    BYTE PTR [rax],ah
 1021401:	add    BYTE PTR [rax+0x0],dl
 1021404:	ins    BYTE PTR es:[rdi],dx
 1021405:	add    BYTE PTR [rbp+0x0],ah
 1021408:	(bad)  
 1021409:	add    BYTE PTR [rbx+0x0],dh
 102140c:	add    BYTE PTR gs:[rax],ah
 102140f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1021413:	add    BYTE PTR [rax+rax*1+0x65],ch
 1021417:	add    BYTE PTR [rax+rax*1+0x65],dh
 102141b:	add    BYTE PTR [rax],ah
 102141d:	add    BYTE PTR [rcx+0x0],ch
 1021420:	je     0x1021422
 1021422:	and    BYTE PTR [rax],al
 1021424:	ins    DWORD PTR es:[rdi],dx
 1021425:	add    BYTE PTR [rcx+0x0],ah
 1021428:	outs   dx,BYTE PTR ds:[rsi]
 1021429:	add    BYTE PTR [rbp+0x0],dh
 102142c:	(bad)  
 102142d:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1021431:	add    BYTE PTR [rcx+0x0],bh
 1021434:	add    BYTE PTR cs:[rdx],cl
 1021437:	add    BYTE PTR [rcx+0x0],cl
 102143a:	add    BYTE PTR [r10+0x0],r14b
 102143e:	jb     0x1021440
 1021440:	outs   dx,DWORD PTR ds:[rsi]
 1021441:	add    BYTE PTR [rdx+0x0],dh
 1021444:	and    BYTE PTR [rax],al
 1021446:	sub    BYTE PTR [rax],al
 1021448:	xor    BYTE PTR [rax],al
 102144a:	js     0x102144c
 102144c:	and    eax,0x21003100
 1021451:	add    BYTE PTR [rax],bh
 1021453:	add    BYTE PTR [rsi],ch
 1021455:	add    BYTE PTR [rax],bh
 1021457:	add    BYTE PTR [rax+0x0],bl
 102145a:	and    DWORD PTR [rax],eax
 102145c:	sub    DWORD PTR [rax],eax
 102145e:	and    BYTE PTR [rax],al
 1021460:	add    BYTE PTR fs:[rbp+0x0],ah
 1021464:	ins    BYTE PTR es:[rdi],dx
 1021465:	add    BYTE PTR [rbp+0x0],ah
 1021468:	je     0x102146a
 102146a:	imul   eax,DWORD PTR [rax],0x67006e
 1021470:	and    BYTE PTR [rax],al
 1021472:	jo     0x1021474
 1021474:	(bad)  
 1021475:	add    BYTE PTR [rbx+0x0],ah
 1021478:	imul   eax,DWORD PTR [rax],0x61
 102147b:	add    BYTE PTR [rdi+0x0],ah
 102147e:	add    BYTE PTR gs:[rax],ah
 1021481:	add    BYTE PTR [rdx],ah
 1021483:	add    BYTE PTR [rip+0x21003200],ah        # 0x22024689
 1021489:	add    BYTE PTR [rbx+0x0],dh
 102148c:	and    DWORD PTR [rax],eax
 102148e:	and    al,BYTE PTR [rax]
 1021490:	and    BYTE PTR [rax],al
 1021492:	data16 add BYTE PTR [rdx+0x0],dh
 1021496:	outs   dx,DWORD PTR ds:[rsi]
 1021497:	add    BYTE PTR [rbp+0x0],ch
 102149a:	and    BYTE PTR [rax],al
 102149c:	je     0x102149e
 102149e:	push   0x20006500
 10214a3:	add    BYTE PTR [rbx+0x0],dl
 10214a6:	push   rbx
 10214a7:	add    BYTE PTR [rcx+0x0],cl
 10214aa:	push   rbx
 10214ab:	add    BYTE PTR [rax],ah
 10214ad:	add    BYTE PTR [rax+0x0],dh
 10214b0:	(bad)  
 10214b1:	add    BYTE PTR [rbx+0x0],ah
 10214b4:	imul   eax,DWORD PTR [rax],0x61
 10214b7:	add    BYTE PTR [rdi+0x0],ah
 10214ba:	add    BYTE PTR gs:[rax],ah
 10214bd:	add    BYTE PTR [rbx+0x0],dh
 10214c0:	je     0x10214c2
 10214c2:	outs   dx,DWORD PTR ds:[rsi]
 10214c3:	add    BYTE PTR [rdx+0x0],dh
 10214c6:	add    BYTE PTR gs:[rsi],ch
 10214c9:	add    BYTE PTR [rdx],cl
 10214cb:	add    BYTE PTR [rdx+0x0],ah
 10214ce:	add    BYTE PTR [r10+0x0],r14b
 10214d2:	jb     0x10214d4
 10214d4:	outs   dx,DWORD PTR ds:[rsi]
 10214d5:	add    BYTE PTR [rdx+0x0],dh
 10214d8:	and    BYTE PTR [rax],al
 10214da:	sub    BYTE PTR [rax],al
 10214dc:	xor    BYTE PTR [rax],al
 10214de:	js     0x10214e0
 10214e0:	and    eax,0x21003100
 10214e5:	add    BYTE PTR [rax],bh
 10214e7:	add    BYTE PTR [rsi],ch
 10214e9:	add    BYTE PTR [rax],bh
 10214eb:	add    BYTE PTR [rax+0x0],bl
 10214ee:	and    DWORD PTR [rax],eax
 10214f0:	sub    DWORD PTR [rax],eax
 10214f2:	and    BYTE PTR [rax],al
 10214f4:	ja     0x10214f6
 10214f6:	push   0x6c006900
 10214fb:	add    BYTE PTR [rbp+0x0],ah
 10214fe:	and    BYTE PTR [rax],al
 1021500:	movsxd eax,DWORD PTR [rax]
 1021502:	push   0x63006500
 1021507:	add    BYTE PTR [rbx+0x0],ch
 102150a:	imul   eax,DWORD PTR [rax],0x67006e
 1021510:	and    BYTE PTR [rax],al
 1021512:	data16 add BYTE PTR [rdi+0x0],ch
 1021516:	jb     0x1021518
 1021518:	and    BYTE PTR [rax],al
 102151a:	je     0x102151c
 102151c:	push   0x20006500
 1021521:	add    BYTE PTR [rbp+0x0],ah
 1021524:	js     0x1021526
 1021526:	imul   eax,DWORD PTR [rax],0x740073
 102152c:	add    BYTE PTR gs:[rsi+0x0],ch
 1021530:	movsxd eax,DWORD PTR [rax]
 1021532:	add    BYTE PTR gs:[rax],ah
 1021535:	add    BYTE PTR [rdi+0x0],ch
 1021538:	data16 add BYTE PTR [rax],ah
 102153b:	add    BYTE PTR [rax+0x0],dh
 102153e:	(bad)  
 102153f:	add    BYTE PTR [rbx+0x0],ah
 1021542:	imul   eax,DWORD PTR [rax],0x61
 1021545:	add    BYTE PTR [rdi+0x0],ah
 1021548:	add    BYTE PTR gs:[rax],ah
 102154b:	add    BYTE PTR [rdx],ah
 102154d:	add    BYTE PTR [rip+0x21003200],ah        # 0x22024753
 1021553:	add    BYTE PTR [rbx+0x0],dh
 1021556:	and    DWORD PTR [rax],eax
 1021558:	and    al,BYTE PTR [rax]
 102155a:	and    BYTE PTR [rax],al
 102155c:	imul   eax,DWORD PTR [rax],0x20006e
 1021562:	je     0x1021564
 1021564:	push   0x20006500
 1021569:	add    BYTE PTR [rbx+0x0],dl
 102156c:	push   rbx
 102156d:	add    BYTE PTR [rcx+0x0],cl
 1021570:	push   rbx
 1021571:	add    BYTE PTR [rax],ah
 1021573:	add    BYTE PTR [rax+0x0],dh
 1021576:	(bad)  
 1021577:	add    BYTE PTR [rbx+0x0],ah
 102157a:	imul   eax,DWORD PTR [rax],0x61
 102157d:	add    BYTE PTR [rdi+0x0],ah
 1021580:	add    BYTE PTR gs:[rax],ah
 1021583:	add    BYTE PTR [rbx+0x0],dh
 1021586:	je     0x1021588
 1021588:	outs   dx,DWORD PTR ds:[rsi]
 1021589:	add    BYTE PTR [rdx+0x0],dh
 102158c:	add    BYTE PTR gs:[rsi],ch
 102158f:	add    BYTE PTR [rdx],cl
 1021591:	add    BYTE PTR [rdx+0x0],cl
 1021594:	rex.XB add BYTE PTR [r15+0x0],bpl
 1021598:	jne    0x102159a
 102159a:	ins    BYTE PTR es:[rdi],dx
 102159b:	add    BYTE PTR [rax+rax*1+0x20],ah
 102159f:	add    BYTE PTR [rsi+0x0],ch
 10215a2:	outs   dx,DWORD PTR ds:[rsi]
 10215a3:	add    BYTE PTR [rax+rax*1+0x20],dh
 10215a7:	add    BYTE PTR [rbx+0x0],ah
 10215aa:	jb     0x10215ac
 10215ac:	add    BYTE PTR gs:[rcx+0x0],ah
 10215b0:	je     0x10215b2
 10215b2:	add    BYTE PTR gs:[rax],ah
 10215b5:	add    BYTE PTR [rbx+0x0],dl
 10215b8:	push   rbx
 10215b9:	add    BYTE PTR [rcx+0x0],cl
 10215bc:	push   rbx
 10215bd:	add    BYTE PTR [rax],ah
 10215bf:	add    BYTE PTR [rbx+0x0],dl
 10215c2:	add    BYTE PTR gs:[rdx+0x0],dh
 10215c6:	jbe    0x10215c8
 10215c8:	imul   eax,DWORD PTR [rax],0x650063
 10215ce:	and    BYTE PTR [rax],al
 10215d0:	push   rbx
 10215d1:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10215d5:	add    BYTE PTR [rdx+0x0],dh
 10215d8:	(bad)  
 10215d9:	add    BYTE PTR [rdi+0x0],ah
 10215dc:	add    BYTE PTR gs:[rax],ah
 10215df:	add    BYTE PTR [rdi+0x0],ch
 10215e2:	(bad)  
 10215e3:	add    BYTE PTR [rdx+0x0],ch
 10215e6:	add    BYTE PTR gs:[rbx+0x0],ah
 10215ea:	je     0x10215ec
 10215ec:	and    BYTE PTR [rax],al
 10215ee:	(bad)  
 10215ef:	add    BYTE PTR [rbp+0x0],ah
 10215f2:	movsxd eax,DWORD PTR [rax]
 10215f4:	(bad)  
 10215f5:	add    BYTE PTR [rbp+0x0],dh
 10215f8:	jae    0x10215fa
 10215fa:	add    BYTE PTR gs:[rax],ah
 10215fd:	add    BYTE PTR [rdi+0x0],ch
 1021600:	data16 add BYTE PTR [rax],ah
 1021603:	add    BYTE PTR [rbp+0x0],ah
 1021606:	jb     0x1021608
 1021608:	jb     0x102160a
 102160a:	outs   dx,DWORD PTR ds:[rsi]
 102160b:	add    BYTE PTR [rdx+0x0],dh
 102160e:	and    BYTE PTR [rax],al
 1021610:	xor    BYTE PTR [rax],al
 1021612:	js     0x1021614
 1021614:	and    eax,0x21003100
 1021619:	add    BYTE PTR [rax],bh
 102161b:	add    BYTE PTR [rsi],ch
 102161d:	add    BYTE PTR [rax],bh
 102161f:	add    BYTE PTR [rax+0x0],bl
 1021622:	and    DWORD PTR [rax],eax
 1021624:	add    BYTE PTR cs:[rdx],cl
 1021627:	add    BYTE PTR [rax+0x0],cl
 102162a:	add    BYTE PTR [r10+0x0],r14b
 102162e:	jb     0x1021630
 1021630:	outs   dx,DWORD PTR ds:[rsi]
 1021631:	add    BYTE PTR [rdx+0x0],dh
 1021634:	and    BYTE PTR [rax],al
 1021636:	sub    BYTE PTR [rax],al
 1021638:	xor    BYTE PTR [rax],al
 102163a:	js     0x102163c
 102163c:	and    eax,0x21003100
 1021641:	add    BYTE PTR [rax],bh
 1021643:	add    BYTE PTR [rsi],ch
 1021645:	add    BYTE PTR [rax],bh
 1021647:	add    BYTE PTR [rax+0x0],bl
 102164a:	and    DWORD PTR [rax],eax
 102164c:	sub    DWORD PTR [rax],eax
 102164e:	and    BYTE PTR [rax],al
 1021650:	add    BYTE PTR [ebp+0x0],ah
 1021654:	je     0x1021656
 1021656:	je     0x1021658
 1021658:	imul   eax,DWORD PTR [rax],0x67006e
 102165e:	and    BYTE PTR [rax],al
 1021660:	jo     0x1021662
 1021662:	(bad)  
 1021663:	add    BYTE PTR [rbx+0x0],ah
 1021666:	imul   eax,DWORD PTR [rax],0x61
 1021669:	add    BYTE PTR [rdi+0x0],ah
 102166c:	add    BYTE PTR gs:[rax],ah
 102166f:	add    BYTE PTR [rdx],ah
 1021671:	add    BYTE PTR [rip+0x21003200],ah        # 0x22024877
 1021677:	add    BYTE PTR [rbx+0x0],dh
 102167a:	and    DWORD PTR [rax],eax
 102167c:	and    al,BYTE PTR [rax]
 102167e:	and    BYTE PTR [rax],al
 1021680:	data16 add BYTE PTR [rdx+0x0],dh
 1021684:	outs   dx,DWORD PTR ds:[rsi]
 1021685:	add    BYTE PTR [rbp+0x0],ch
 1021688:	and    BYTE PTR [rax],al
 102168a:	je     0x102168c
 102168c:	push   0x20006500
 1021691:	add    BYTE PTR [rbx+0x0],dl
 1021694:	push   rbx
 1021695:	add    BYTE PTR [rcx+0x0],cl
 1021698:	push   rbx
 1021699:	add    BYTE PTR [rax],ah
 102169b:	add    BYTE PTR [rax+0x0],dh
 102169e:	(bad)  
 102169f:	add    BYTE PTR [rbx+0x0],ah
 10216a2:	imul   eax,DWORD PTR [rax],0x61
 10216a5:	add    BYTE PTR [rdi+0x0],ah
 10216a8:	add    BYTE PTR gs:[rax],ah
 10216ab:	add    BYTE PTR [rbx+0x0],dh
 10216ae:	je     0x10216b0
 10216b0:	outs   dx,DWORD PTR ds:[rsi]
 10216b1:	add    BYTE PTR [rdx+0x0],dh
 10216b4:	add    BYTE PTR gs:[rsi],ch
 10216b7:	add    BYTE PTR [rdx],cl
 10216b9:	add    BYTE PTR [rbp+0x0],al
 10216bc:	add    BYTE PTR [r10+0x0],r14b
 10216c0:	jb     0x10216c2
 10216c2:	outs   dx,DWORD PTR ds:[rsi]
 10216c3:	add    BYTE PTR [rdx+0x0],dh
 10216c6:	and    BYTE PTR [rax],al
 10216c8:	sub    BYTE PTR [rax],al
 10216ca:	xor    BYTE PTR [rax],al
 10216cc:	js     0x10216ce
 10216ce:	and    eax,0x21003100
 10216d3:	add    BYTE PTR [rax],bh
 10216d5:	add    BYTE PTR [rsi],ch
 10216d7:	add    BYTE PTR [rax],bh
 10216d9:	add    BYTE PTR [rax+0x0],bl
 10216dc:	and    DWORD PTR [rax],eax
 10216de:	sub    DWORD PTR [rax],eax
 10216e0:	and    BYTE PTR [rax],al
 10216e2:	jae    0x10216e4
 10216e4:	(bad)  
 10216e5:	add    BYTE PTR [rsi+0x0],dh
 10216e8:	imul   eax,DWORD PTR [rax],0x67006e
 10216ee:	and    BYTE PTR [rax],al
 10216f0:	jo     0x10216f2
 10216f2:	(bad)  
 10216f3:	add    BYTE PTR [rbx+0x0],ah
 10216f6:	imul   eax,DWORD PTR [rax],0x61
 10216f9:	add    BYTE PTR [rdi+0x0],ah
 10216fc:	add    BYTE PTR gs:[rax],ah
 10216ff:	add    BYTE PTR [rdx],ah
 1021701:	add    BYTE PTR [rip+0x21003200],ah        # 0x22024907
 1021707:	add    BYTE PTR [rbx+0x0],dh
 102170a:	and    DWORD PTR [rax],eax
 102170c:	and    al,BYTE PTR [rax]
 102170e:	and    BYTE PTR [rax],al
 1021710:	je     0x1021712
 1021712:	outs   dx,DWORD PTR ds:[rsi]
 1021713:	add    BYTE PTR [rax],ah
 1021715:	add    BYTE PTR [rax+rax*1+0x68],dh
 1021719:	add    BYTE PTR [rbp+0x0],ah
 102171c:	and    BYTE PTR [rax],al
 102171e:	push   rbx
 102171f:	add    BYTE PTR [rbx+0x0],dl
 1021722:	rex.WB add BYTE PTR [r11+0x0],dl
 1021726:	and    BYTE PTR [rax],al
 1021728:	jo     0x102172a
 102172a:	(bad)  
 102172b:	add    BYTE PTR [rbx+0x0],ah
 102172e:	imul   eax,DWORD PTR [rax],0x61
 1021731:	add    BYTE PTR [rdi+0x0],ah
 1021734:	add    BYTE PTR gs:[rax],ah
 1021737:	add    BYTE PTR [rbx+0x0],dh
 102173a:	je     0x102173c
 102173c:	outs   dx,DWORD PTR ds:[rsi]
 102173d:	add    BYTE PTR [rdx+0x0],dh
 1021740:	add    BYTE PTR gs:[rsi],ch
 1021743:	add    BYTE PTR [rdx],cl
 1021745:	add    BYTE PTR [rax+rax*1+0x680054],bl
 102174c:	add    BYTE PTR gs:[rax],ah
 102174f:	add    BYTE PTR [rax+0x0],dh
 1021752:	(bad)  
 1021753:	add    BYTE PTR [rbx+0x0],ah
 1021756:	imul   eax,DWORD PTR [rax],0x61
 1021759:	add    BYTE PTR [rdi+0x0],ah
 102175c:	add    BYTE PTR gs:[rax],ah
 102175f:	add    BYTE PTR [rip+0x21003100],ah        # 0x22024865
 1021765:	add    BYTE PTR [rbx+0x0],dh
 1021768:	and    DWORD PTR [rax],eax
 102176a:	and    BYTE PTR [rax],al
 102176c:	movsxd eax,DWORD PTR [rax]
 102176e:	(bad)  
 102176f:	add    BYTE PTR [rsi+0x0],ch
 1021772:	and    BYTE PTR [rax],al
 1021774:	outs   dx,BYTE PTR ds:[rsi]
 1021775:	add    BYTE PTR [rdi+0x0],ch
 1021778:	je     0x102177a
 102177a:	and    BYTE PTR [rax],al
 102177c:	(bad)  
 102177d:	add    BYTE PTR [rbp+0x0],ah
 1021780:	and    BYTE PTR [rax],al
 1021782:	jae    0x1021784
 1021784:	(bad)  
 1021785:	add    BYTE PTR [rsi+0x0],dh
 1021788:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 102178d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1021791:	add    BYTE PTR [rax],ah
 1021793:	add    BYTE PTR [rax+rax*1+0x68],dh
 1021797:	add    BYTE PTR [rbp+0x0],ah
 102179a:	and    BYTE PTR [rax],al
 102179c:	data16 add BYTE PTR [rcx+0x0],ch
 10217a0:	ins    BYTE PTR es:[rdi],dx
 10217a1:	add    BYTE PTR [rbp+0x0],ah
 10217a4:	and    BYTE PTR [rax],al
 10217a6:	jae    0x10217a8
 10217a8:	jns    0x10217aa
 10217aa:	jae    0x10217ac
 10217ac:	je     0x10217ae
 10217ae:	add    BYTE PTR gs:[rbp+0x0],ch
 10217b2:	and    BYTE PTR [rax],al
 10217b4:	jae    0x10217b6
 10217b6:	imul   eax,DWORD PTR [rax],0x63006e
 10217bc:	add    BYTE PTR gs:[rax],ah
 10217bf:	add    BYTE PTR [rcx+0x0],ch
 10217c2:	je     0x10217c4
 10217c4:	jae    0x10217c6
 10217c6:	and    BYTE PTR [rax],al
 10217c8:	jo     0x10217ca
 10217ca:	jb     0x10217cc
 10217cc:	outs   dx,DWORD PTR ds:[rsi]
 10217cd:	add    BYTE PTR [rax+rax*1+0x65],dh
 10217d1:	add    BYTE PTR [rbx+0x0],ah
 10217d4:	je     0x10217d6
 10217d6:	imul   eax,DWORD PTR [rax],0x6e006f
 10217dc:	and    BYTE PTR [rax],al
 10217de:	ins    BYTE PTR es:[rdi],dx
 10217df:	add    BYTE PTR [rbp+0x0],ah
 10217e2:	jbe    0x10217e4
 10217e4:	add    BYTE PTR gs:[rax+rax*1+0x20],ch
 10217e9:	add    BYTE PTR [rcx+0x0],ch
 10217ec:	jae    0x10217ee
 10217ee:	and    BYTE PTR [rax],al
 10217f0:	jae    0x10217f2
 10217f2:	add    BYTE PTR gs:[rdx+0x0],dh
 10217f6:	jbe    0x10217f8
 10217f8:	add    BYTE PTR gs:[rdx+0x0],dh
 10217fc:	and    BYTE PTR [rax],al
 10217fe:	jae    0x1021800
 1021800:	je     0x1021802
 1021802:	outs   dx,DWORD PTR ds:[rsi]
 1021803:	add    BYTE PTR [rdx+0x0],dh
 1021806:	(bad)  
 1021807:	add    BYTE PTR [rdi+0x0],ah
 102180a:	add    BYTE PTR gs:[rsi],ch
 102180d:	add    BYTE PTR [rax],ah
 102180f:	add    BYTE PTR [rax],ah
 1021811:	add    BYTE PTR [rbp+0x0],dl
 1021814:	jae    0x1021816
 1021816:	add    BYTE PTR gs:[rax],ah
 1021819:	add    BYTE PTR [rax+rax*1+0x68],dh
 102181d:	add    BYTE PTR [rbp+0x0],ah
 1021820:	and    BYTE PTR [rax],al
 1021822:	add    BYTE PTR gs:[rsi+0x0],ch
 1021826:	movsxd eax,DWORD PTR [rax]
 1021828:	jb     0x102182a
 102182a:	jns    0x102182c
 102182c:	jo     0x102182e
 102182e:	je     0x1021830
 1021830:	and    BYTE PTR [rax],al
 1021832:	(bad)  
 1021833:	add    BYTE PTR [rbx+0x0],ah
 1021836:	je     0x1021838
 1021838:	imul   eax,DWORD PTR [rax],0x6e006f
 102183e:	and    BYTE PTR [rax],al
 1021840:	je     0x1021842
 1021842:	outs   dx,DWORD PTR ds:[rsi]
 1021843:	add    BYTE PTR [rax],ah
 1021845:	add    BYTE PTR [rbx+0x0],ah
 1021848:	push   0x6e006100
 102184d:	add    BYTE PTR [rdi+0x0],ah
 1021850:	add    BYTE PTR gs:[rax],ah
 1021853:	add    BYTE PTR [rax+rax*1+0x68],dh
 1021857:	add    BYTE PTR [rbp+0x0],ah
 102185a:	and    BYTE PTR [rax],al
 102185c:	jo     0x102185e
 102185e:	jb     0x1021860
 1021860:	outs   dx,DWORD PTR ds:[rsi]
 1021861:	add    BYTE PTR [rax+rax*1+0x65],dh
 1021865:	add    BYTE PTR [rbx+0x0],ah
 1021868:	je     0x102186a
 102186a:	imul   eax,DWORD PTR [rax],0x6e006f
 1021870:	and    BYTE PTR [rax],al
 1021872:	ins    BYTE PTR es:[rdi],dx
 1021873:	add    BYTE PTR [rbp+0x0],ah
 1021876:	jbe    0x1021878
 1021878:	add    BYTE PTR gs:[rax+rax*1+0x2e],ch
 102187d:	add    BYTE PTR [rdx],cl
 102187f:	add    BYTE PTR [rdx],bh
 1021881:	add    BYTE PTR [rbx+0x0],al
 1021884:	outs   dx,DWORD PTR ds:[rsi]
 1021885:	add    BYTE PTR [rbp+0x0],dh
 1021888:	ins    BYTE PTR es:[rdi],dx
 1021889:	add    BYTE PTR [rax+rax*1+0x20],ah
 102188d:	add    BYTE PTR [rsi+0x0],ch
 1021890:	outs   dx,DWORD PTR ds:[rsi]
 1021891:	add    BYTE PTR [rax+rax*1+0x20],dh
 1021895:	add    BYTE PTR [rdx+0x0],dh
 1021898:	add    BYTE PTR gs:[rax+rax*1+0x72],dh
 102189d:	add    BYTE PTR [rcx+0x0],ch
 10218a0:	add    BYTE PTR gs:[rsi+0x0],dh
 10218a4:	add    BYTE PTR gs:[rax],ah
 10218a7:	add    BYTE PTR [rbp+0x0],ch
 10218aa:	outs   dx,DWORD PTR ds:[rsi]
 10218ab:	add    BYTE PTR [rax+rax*1+0x75],ah
 10218af:	add    BYTE PTR [rax+rax*1+0x65],ch
 10218b3:	add    BYTE PTR [rax],ah
 10218b5:	add    BYTE PTR [rcx+0x0],ch
 10218b8:	outs   dx,BYTE PTR ds:[rsi]
 10218b9:	add    BYTE PTR [rsi+0x0],ah
 10218bc:	outs   dx,DWORD PTR ds:[rsi]
 10218bd:	add    BYTE PTR [rdx+0x0],dh
 10218c0:	ins    DWORD PTR es:[rdi],dx
 10218c1:	add    BYTE PTR [rcx+0x0],ah
 10218c4:	je     0x10218c6
 10218c6:	imul   eax,DWORD PTR [rax],0x6e006f
 10218cc:	and    BYTE PTR [rax],al
 10218ce:	data16 add BYTE PTR [rdi+0x0],ch
 10218d2:	jb     0x10218d4
 10218d4:	and    BYTE PTR [rax],al
 10218d6:	jb     0x10218d8
 10218d8:	add    BYTE PTR gs:[rbp+0x0],ch
 10218dc:	outs   dx,DWORD PTR ds:[rsi]
 10218dd:	add    BYTE PTR [rax+rax*1+0x65],dh
 10218e1:	add    BYTE PTR [rax],ah
 10218e3:	add    BYTE PTR [rax+0x0],dh
 10218e6:	jb     0x10218e8
 10218e8:	outs   dx,DWORD PTR ds:[rsi]
 10218e9:	add    BYTE PTR [rbx+0x0],ah
 10218ec:	add    BYTE PTR gs:[rbx+0x0],dh
 10218f0:	jae    0x10218f2
 10218f2:	add    BYTE PTR cs:[rdx],cl
 10218f5:	add    BYTE PTR [rax+0x41],dl
 10218f8:	(bad)  
 10218f9:	add    BYTE PTR [rbx+0x0],al
 10218fc:	outs   dx,DWORD PTR ds:[rsi]
 10218fd:	add    BYTE PTR [rbp+0x0],dh
 1021900:	ins    BYTE PTR es:[rdi],dx
 1021901:	add    BYTE PTR [rax+rax*1+0x20],ah
 1021905:	add    BYTE PTR [rsi+0x0],ch
 1021908:	outs   dx,DWORD PTR ds:[rsi]
 1021909:	add    BYTE PTR [rax+rax*1+0x20],dh
 102190d:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1021911:	add    BYTE PTR [rcx+0x0],ah
 1021914:	add    BYTE PTR fs:[rax],ah
 1021917:	add    BYTE PTR [rbp+0x0],ch
 102191a:	outs   dx,DWORD PTR ds:[rsi]
 102191b:	add    BYTE PTR [rax+rax*1+0x75],ah
 102191f:	add    BYTE PTR [rax+rax*1+0x65],ch
 1021923:	add    BYTE PTR [rax],ah
 1021925:	add    BYTE PTR [rbx+0x0],ah
 1021928:	outs   dx,DWORD PTR ds:[rsi]
 1021929:	add    BYTE PTR [rdx+0x0],dh
 102192c:	jb     0x102192e
 102192e:	add    BYTE PTR gs:[rbx+0x0],dh
 1021932:	jo     0x1021934
 1021934:	outs   dx,DWORD PTR ds:[rsi]
 1021935:	add    BYTE PTR [rsi+0x0],ch
 1021938:	add    BYTE PTR fs:[rcx+0x0],ch
 102193c:	outs   dx,BYTE PTR ds:[rsi]
 102193d:	add    BYTE PTR [rdi+0x0],ah
 1021940:	and    BYTE PTR [rax],al
 1021942:	je     0x1021944
 1021944:	outs   dx,DWORD PTR ds:[rsi]
 1021945:	add    BYTE PTR [rax],ah
 1021947:	add    BYTE PTR [rdx+0x0],dh
 102194a:	add    BYTE PTR gs:[rbp+0x0],ch
 102194e:	outs   dx,DWORD PTR ds:[rsi]
 102194f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1021953:	add    BYTE PTR [rax],ah
 1021955:	add    BYTE PTR [rax+0x0],dh
 1021958:	jb     0x102195a
 102195a:	outs   dx,DWORD PTR ds:[rsi]
 102195b:	add    BYTE PTR [rbx+0x0],ah
 102195e:	add    BYTE PTR gs:[rbx+0x0],dh
 1021962:	jae    0x1021964
 1021964:	add    BYTE PTR cs:[rdx],cl
 1021967:	add    BYTE PTR [rax+0x0],al
 102196a:	rex.XB add BYTE PTR [r15+0x0],bpl
 102196e:	jne    0x1021970
 1021970:	ins    BYTE PTR es:[rdi],dx
 1021971:	add    BYTE PTR [rax+rax*1+0x20],ah
 1021975:	add    BYTE PTR [rsi+0x0],ch
 1021978:	outs   dx,DWORD PTR ds:[rsi]
 1021979:	add    BYTE PTR [rax+rax*1+0x20],dh
 102197d:	add    BYTE PTR [rbp+0x0],ah
 1021980:	outs   dx,BYTE PTR ds:[rsi]
 1021981:	add    BYTE PTR [rbp+0x0],dh
 1021984:	ins    DWORD PTR es:[rdi],dx
 1021985:	add    BYTE PTR [rbp+0x0],ah
 1021988:	jb     0x102198a
 102198a:	(bad)  
 102198b:	add    BYTE PTR [rax+rax*1+0x65],dh
 102198f:	add    BYTE PTR [rax],ah
 1021991:	add    BYTE PTR [rax+rax*1+0x68],dh
 1021995:	add    BYTE PTR [rbp+0x0],ah
 1021998:	and    BYTE PTR [rax],al
 102199a:	ins    DWORD PTR es:[rdi],dx
 102199b:	add    BYTE PTR [rdi+0x0],ch
 102199e:	add    BYTE PTR fs:[rbp+0x0],dh
 10219a2:	ins    BYTE PTR es:[rdi],dx
 10219a3:	add    BYTE PTR [rbp+0x0],ah
 10219a6:	jae    0x10219a8
 10219a8:	and    BYTE PTR [rax],al
 10219aa:	ins    BYTE PTR es:[rdi],dx
 10219ab:	add    BYTE PTR [rdi+0x0],ch
 10219ae:	(bad)  
 10219af:	add    BYTE PTR [rax+rax*1+0x65],ah
 10219b3:	add    BYTE PTR [rax+rax*1+0x20],ah
 10219b7:	add    BYTE PTR [rcx+0x0],ch
 10219ba:	outs   dx,BYTE PTR ds:[rsi]
 10219bb:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10219bf:	add    BYTE PTR [rax],ah
 10219c1:	add    BYTE PTR [rax+rax*1+0x68],dh
 10219c5:	add    BYTE PTR [rbp+0x0],ah
 10219c8:	and    BYTE PTR [rax],al
 10219ca:	jb     0x10219cc
 10219cc:	add    BYTE PTR gs:[rbp+0x0],ch
 10219d0:	outs   dx,DWORD PTR ds:[rsi]
 10219d1:	add    BYTE PTR [rax+rax*1+0x65],dh
 10219d5:	add    BYTE PTR [rax],ah
 10219d7:	add    BYTE PTR [rax+0x0],dh
 10219da:	jb     0x10219dc
 10219dc:	outs   dx,DWORD PTR ds:[rsi]
 10219dd:	add    BYTE PTR [rbx+0x0],ah
 10219e0:	add    BYTE PTR gs:[rbx+0x0],dh
 10219e4:	jae    0x10219e6
 10219e6:	add    BYTE PTR cs:[rdx],cl
 10219e9:	add    BYTE PTR [rax+rax*1+0x43],bh
 10219ed:	add    BYTE PTR [rdi+0x0],ch
 10219f0:	jne    0x10219f2
 10219f2:	ins    BYTE PTR es:[rdi],dx
 10219f3:	add    BYTE PTR [rax+rax*1+0x20],ah
 10219f7:	add    BYTE PTR [rsi+0x0],ch
 10219fa:	outs   dx,DWORD PTR ds:[rsi]
 10219fb:	add    BYTE PTR [rax+rax*1+0x20],dh
 10219ff:	add    BYTE PTR [rsi+0x0],ah
 1021a02:	imul   eax,DWORD PTR [rax],0x64006e
 1021a08:	and    BYTE PTR [rax],al
 1021a0a:	je     0x1021a0c
 1021a0c:	push   0x20006500
 1021a11:	add    BYTE PTR [rax+rax*1+0x75],ah
 1021a15:	add    BYTE PTR [rbp+0x0],ch
 1021a18:	jo     0x1021a1a
 1021a1a:	and    BYTE PTR [rax],al
 1021a1c:	jae    0x1021a1e
 1021a1e:	je     0x1021a20
 1021a20:	(bad)  
 1021a21:	add    BYTE PTR [rdx+0x0],dh
 1021a24:	je     0x1021a26
 1021a26:	and    BYTE PTR [rax],al
 1021a28:	jo     0x1021a2a
 1021a2a:	outs   dx,DWORD PTR ds:[rsi]
 1021a2b:	add    BYTE PTR [rcx+0x0],ch
 1021a2e:	outs   dx,BYTE PTR ds:[rsi]
 1021a2f:	add    BYTE PTR [rax+rax*1+0x20],dh
 1021a33:	add    BYTE PTR [rcx+0x0],ch
 1021a36:	outs   dx,BYTE PTR ds:[rsi]
 1021a37:	add    BYTE PTR [rax],ah
 1021a39:	add    BYTE PTR [rax+rax*1+0x68],dh
 1021a3d:	add    BYTE PTR [rbp+0x0],ah
 1021a40:	and    BYTE PTR [rax],al
 1021a42:	jb     0x1021a44
 1021a44:	add    BYTE PTR gs:[rbp+0x0],ch
 1021a48:	outs   dx,DWORD PTR ds:[rsi]
 1021a49:	add    BYTE PTR [rax+rax*1+0x65],dh
 1021a4d:	add    BYTE PTR [rax],ah
 1021a4f:	add    BYTE PTR [rax+0x0],dh
 1021a52:	jb     0x1021a54
 1021a54:	outs   dx,DWORD PTR ds:[rsi]
 1021a55:	add    BYTE PTR [rbx+0x0],ah
 1021a58:	add    BYTE PTR gs:[rbx+0x0],dh
 1021a5c:	jae    0x1021a5e
 1021a5e:	add    BYTE PTR cs:[rax],ah
 1021a61:	add    BYTE PTR [rax],ah
 1021a63:	add    BYTE PTR [rax+rax*1+0x68],dl
 1021a67:	add    BYTE PTR [rbp+0x0],ah
 1021a6a:	and    BYTE PTR [rax],al
 1021a6c:	jo     0x1021a6e
 1021a6e:	jb     0x1021a70
 1021a70:	outs   dx,DWORD PTR ds:[rsi]
 1021a71:	add    BYTE PTR [rbx+0x0],ah
 1021a74:	add    BYTE PTR gs:[rbx+0x0],dh
 1021a78:	jae    0x1021a7a
 1021a7a:	and    BYTE PTR [rax],al
 1021a7c:	rex.WB add BYTE PTR [r8+rax*1+0x20],al
 1021a81:	add    BYTE PTR [rbx+0x0],dh
 1021a84:	jo     0x1021a86
 1021a86:	add    BYTE PTR gs:[rbx+0x0],ah
 1021a8a:	imul   eax,DWORD PTR [rax],0x690066
 1021a90:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1021a95:	add    BYTE PTR [rbp+0x0],ch
 1021a98:	(bad)  
 1021a99:	add    BYTE PTR [rcx+0x0],bh
 1021a9c:	and    BYTE PTR [rax],al
 1021a9e:	outs   dx,BYTE PTR ds:[rsi]
 1021a9f:	add    BYTE PTR [rdi+0x0],ch
 1021aa2:	je     0x1021aa4
 1021aa4:	and    BYTE PTR [rax],al
 1021aa6:	jb     0x1021aa8
 1021aa8:	add    BYTE PTR gs:[rsi+0x0],ah
 1021aac:	add    BYTE PTR gs:[rdx+0x0],dh
 1021ab0:	and    BYTE PTR [rax],al
 1021ab2:	je     0x1021ab4
 1021ab4:	outs   dx,DWORD PTR ds:[rsi]
 1021ab5:	add    BYTE PTR [rax],ah
 1021ab7:	add    BYTE PTR [rcx+0x0],ah
 1021aba:	and    BYTE PTR [rax],al
 1021abc:	jbe    0x1021abe
 1021abe:	(bad)  
 1021abf:	add    BYTE PTR [rax+rax*1+0x69],ch
 1021ac3:	add    BYTE PTR [rax+rax*1+0x20],ah
 1021ac7:	add    BYTE PTR [rbx+0x0],dl
 1021aca:	push   rbx
 1021acb:	add    BYTE PTR [rcx+0x0],cl
 1021ace:	push   rbx
 1021acf:	add    BYTE PTR [rax],ah
 1021ad1:	add    BYTE PTR [rax+0x0],dh
 1021ad4:	jb     0x1021ad6
 1021ad6:	outs   dx,DWORD PTR ds:[rsi]
 1021ad7:	add    BYTE PTR [rbx+0x0],ah
 1021ada:	add    BYTE PTR gs:[rbx+0x0],dh
 1021ade:	jae    0x1021ae0
 1021ae0:	add    BYTE PTR cs:[rdx],cl
 1021ae3:	add    BYTE PTR [rbx],ch
 1021ae5:	add    BYTE PTR [rbx+0x0],al
 1021ae8:	outs   dx,DWORD PTR ds:[rsi]
 1021ae9:	add    BYTE PTR [rbp+0x0],dh
 1021aec:	ins    BYTE PTR es:[rdi],dx
 1021aed:	add    BYTE PTR [rax+rax*1+0x20],ah
 1021af1:	add    BYTE PTR [rsi+0x0],ch
 1021af4:	outs   dx,DWORD PTR ds:[rsi]
 1021af5:	add    BYTE PTR [rax+rax*1+0x20],dh
 1021af9:	add    BYTE PTR [rbx+0x0],ah
 1021afc:	outs   dx,DWORD PTR ds:[rsi]
 1021afd:	add    BYTE PTR [rax+0x0],dh
 1021b00:	jns    0x1021b02
 1021b02:	and    BYTE PTR [rax],al
 1021b04:	ins    DWORD PTR es:[rdi],dx
 1021b05:	add    BYTE PTR [rbp+0x0],ah
 1021b08:	ins    DWORD PTR es:[rdi],dx
 1021b09:	add    BYTE PTR [rdi+0x0],ch
 1021b0c:	jb     0x1021b0e
 1021b0e:	jns    0x1021b10
 1021b10:	and    BYTE PTR [rax],al
 1021b12:	imul   eax,DWORD PTR [rax],0x74006e
 1021b18:	outs   dx,DWORD PTR ds:[rsi]
 1021b19:	add    BYTE PTR [rax],ah
 1021b1b:	add    BYTE PTR [rdx+0x0],dh
 1021b1e:	add    BYTE PTR gs:[rbp+0x0],ch
 1021b22:	outs   dx,DWORD PTR ds:[rsi]
 1021b23:	add    BYTE PTR [rax+rax*1+0x65],dh
 1021b27:	add    BYTE PTR [rax],ah
 1021b29:	add    BYTE PTR [rax+0x0],dh
 1021b2c:	jb     0x1021b2e
 1021b2e:	outs   dx,DWORD PTR ds:[rsi]
 1021b2f:	add    BYTE PTR [rbx+0x0],ah
 1021b32:	add    BYTE PTR gs:[rbx+0x0],dh
 1021b36:	jae    0x1021b38
 1021b38:	add    BYTE PTR cs:[rdx],cl
 1021b3b:	add    BYTE PTR [rcx],dh
 1021b3d:	add    BYTE PTR [rbx+0x0],al
 1021b40:	outs   dx,DWORD PTR ds:[rsi]
 1021b41:	add    BYTE PTR [rbp+0x0],dh
 1021b44:	ins    BYTE PTR es:[rdi],dx
 1021b45:	add    BYTE PTR [rax+rax*1+0x20],ah
 1021b49:	add    BYTE PTR [rsi+0x0],ch
 1021b4c:	outs   dx,DWORD PTR ds:[rsi]
 1021b4d:	add    BYTE PTR [rax+rax*1+0x20],dh
 1021b51:	add    BYTE PTR [rax+rax*1+0x61],ch
 1021b55:	add    BYTE PTR [rbp+0x0],dh
 1021b58:	outs   dx,BYTE PTR ds:[rsi]
 1021b59:	add    BYTE PTR [rbx+0x0],ah
 1021b5c:	push   0x61002000
 1021b61:	add    BYTE PTR [rax],ah
 1021b63:	add    BYTE PTR [rax+rax*1+0x68],dh
 1021b67:	add    BYTE PTR [rdx+0x0],dh
 1021b6a:	add    BYTE PTR gs:[rcx+0x0],ah
 1021b6e:	add    BYTE PTR fs:[rax],ah
 1021b71:	add    BYTE PTR [rcx+0x0],ch
 1021b74:	outs   dx,BYTE PTR ds:[rsi]
 1021b75:	add    BYTE PTR [rax],ah
 1021b77:	add    BYTE PTR [rax+rax*1+0x68],dh
 1021b7b:	add    BYTE PTR [rbp+0x0],ah
 1021b7e:	and    BYTE PTR [rax],al
 1021b80:	jb     0x1021b82
 1021b82:	add    BYTE PTR gs:[rbp+0x0],ch
 1021b86:	outs   dx,DWORD PTR ds:[rsi]
 1021b87:	add    BYTE PTR [rax+rax*1+0x65],dh
 1021b8b:	add    BYTE PTR [rax],ah
 1021b8d:	add    BYTE PTR [rax+0x0],dh
 1021b90:	jb     0x1021b92
 1021b92:	outs   dx,DWORD PTR ds:[rsi]
 1021b93:	add    BYTE PTR [rbx+0x0],ah
 1021b96:	add    BYTE PTR gs:[rbx+0x0],dh
 1021b9a:	jae    0x1021b9c
 1021b9c:	add    BYTE PTR cs:[rdx],cl
 1021b9f:	add    BYTE PTR [rsi+0x6f004300],bl
 1021ba5:	add    BYTE PTR [rbp+0x0],dh
 1021ba8:	ins    BYTE PTR es:[rdi],dx
 1021ba9:	add    BYTE PTR [rax+rax*1+0x20],ah
 1021bad:	add    BYTE PTR [rsi+0x0],ch
 1021bb0:	outs   dx,DWORD PTR ds:[rsi]
 1021bb1:	add    BYTE PTR [rax+rax*1+0x20],dh
 1021bb5:	add    BYTE PTR [rdi+0x0],ch
 1021bb8:	jo     0x1021bba
 1021bba:	add    BYTE PTR gs:[rsi+0x0],ch
 1021bbe:	and    BYTE PTR [rax],al
 1021bc0:	(bad)  
 1021bc1:	add    BYTE PTR [rax],ah
 1021bc3:	add    BYTE PTR [rax+0x0],ch
 1021bc6:	(bad)  
 1021bc7:	add    BYTE PTR [rsi+0x0],ch
 1021bca:	add    BYTE PTR fs:[rax+rax*1+0x65],ch
 1021bcf:	add    BYTE PTR [rax],ah
 1021bd1:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1021bd5:	add    BYTE PTR [rax],ah
 1021bd7:	add    BYTE PTR [rax+rax*1+0x68],dh
 1021bdb:	add    BYTE PTR [rbp+0x0],ah
 1021bde:	and    BYTE PTR [rax],al
 1021be0:	jb     0x1021be2
 1021be2:	add    BYTE PTR gs:[rbp+0x0],ch
 1021be6:	outs   dx,DWORD PTR ds:[rsi]
 1021be7:	add    BYTE PTR [rax+rax*1+0x65],dh
 1021beb:	add    BYTE PTR [rax],ah
 1021bed:	add    BYTE PTR [rax+0x0],dh
 1021bf0:	jb     0x1021bf2
 1021bf2:	outs   dx,DWORD PTR ds:[rsi]
 1021bf3:	add    BYTE PTR [rbx+0x0],ah
 1021bf6:	add    BYTE PTR gs:[rbx+0x0],dh
 1021bfa:	jae    0x1021bfc
 1021bfc:	add    BYTE PTR cs:[rax],ah
 1021bff:	add    BYTE PTR [rax],ah
 1021c01:	add    BYTE PTR [rbx+0x0],al
 1021c04:	push   0x63006500
 1021c09:	add    BYTE PTR [rbx+0x0],ch
 1021c0c:	and    BYTE PTR [rax],al
 1021c0e:	je     0x1021c10
 1021c10:	push   0x74006100
 1021c15:	add    BYTE PTR [rax],ah
 1021c17:	add    BYTE PTR [rcx+0x0],bh
 1021c1a:	outs   dx,DWORD PTR ds:[rsi]
 1021c1b:	add    BYTE PTR [rbp+0x0],dh
 1021c1e:	and    BYTE PTR [rax],al
 1021c20:	push   0x76006100
 1021c25:	add    BYTE PTR [rbp+0x0],ah
 1021c28:	and    BYTE PTR [rax],al
 1021c2a:	add    BYTE PTR gs:[rsi+0x0],ch
 1021c2e:	outs   dx,DWORD PTR ds:[rsi]
 1021c2f:	add    BYTE PTR [rbp+0x0],dh
 1021c32:	add    BYTE PTR [eax+0x0],ch
 1021c36:	and    BYTE PTR [rax],al
 1021c38:	jo     0x1021c3a
 1021c3a:	jb     0x1021c3c
 1021c3c:	imul   eax,DWORD PTR [rax],0x690076
 1021c42:	ins    BYTE PTR es:[rdi],dx
 1021c43:	add    BYTE PTR [rbp+0x0],ah
 1021c46:	add    BYTE PTR fs:[rdi+0x0],ah
 1021c4a:	add    BYTE PTR gs:[rbx+0x0],dh
 1021c4e:	and    BYTE PTR [rax],al
 1021c50:	outs   dx,DWORD PTR ds:[rsi]
 1021c51:	add    BYTE PTR [rsi+0x0],ch
 1021c54:	and    BYTE PTR [rax],al
 1021c56:	je     0x1021c58
 1021c58:	push   0x73006900
 1021c5d:	add    BYTE PTR [rax],ah
 1021c5f:	add    BYTE PTR [rbx+0x0],dh
 1021c62:	jns    0x1021c64
 1021c64:	jae    0x1021c66
 1021c66:	je     0x1021c68
 1021c68:	add    BYTE PTR gs:[rbp+0x0],ch
 1021c6c:	and    BYTE PTR [rax],al
 1021c6e:	je     0x1021c70
 1021c70:	outs   dx,DWORD PTR ds:[rsi]
 1021c71:	add    BYTE PTR [rax],ah
 1021c73:	add    BYTE PTR [rdi+0x0],ch
 1021c76:	(bad)  
 1021c77:	add    BYTE PTR [rax+rax*1+0x61],dh
 1021c7b:	add    BYTE PTR [rcx+0x0],ch
 1021c7e:	outs   dx,BYTE PTR ds:[rsi]
 1021c7f:	add    BYTE PTR [rax],ah
 1021c81:	add    BYTE PTR [rax+0x0],dl
 1021c84:	push   rdx
 1021c85:	add    BYTE PTR [rdi+0x0],cl
 1021c88:	rex.XB add BYTE PTR [r13+0x0],al
 1021c8c:	push   rbx
 1021c8d:	add    BYTE PTR [rbx+0x0],dl
 1021c90:	pop    rdi
 1021c91:	add    BYTE PTR [rcx+0x0],al
 1021c94:	rex.WR add BYTE PTR [rax+rax*1+0x5f],r9b
 1021c99:	add    BYTE PTR [rcx+0x0],al
 1021c9c:	rex.XB add BYTE PTR [r11+0x0],al
 1021ca0:	add    BYTE PTR [r11+0x0],r10b
 1021ca4:	push   rbx
 1021ca5:	add    BYTE PTR [rax],ah
 1021ca7:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1021cab:	add    BYTE PTR [rax],ah
 1021cad:	add    BYTE PTR [rax+0x0],dh
 1021cb0:	jb     0x1021cb2
 1021cb2:	outs   dx,DWORD PTR ds:[rsi]
 1021cb3:	add    BYTE PTR [rbx+0x0],ah
 1021cb6:	add    BYTE PTR gs:[rbx+0x0],dh
 1021cba:	jae    0x1021cbc
 1021cbc:	add    BYTE PTR gs:[rbx+0x0],dh
 1021cc0:	and    BYTE PTR [rax],al
 1021cc2:	jb     0x1021cc4
 1021cc4:	jne    0x1021cc6
 1021cc6:	outs   dx,BYTE PTR ds:[rsi]
 1021cc7:	add    BYTE PTR [rsi+0x0],ch
 1021cca:	imul   eax,DWORD PTR [rax],0x67006e
 1021cd0:	and    BYTE PTR [rax],al
 1021cd2:	push   0x72006500
 1021cd7:	add    BYTE PTR [rbp+0x0],ah
 1021cda:	add    BYTE PTR cs:[rdx],cl
 1021cdd:	add    BYTE PTR [rdi+0x0],cl
 1021ce0:	push   rsp
 1021ce1:	add    BYTE PTR [rax+0x0],ch
 1021ce4:	add    BYTE PTR gs:[rax],ah
 1021ce7:	add    BYTE PTR [rdx+0x0],dh
 1021cea:	add    BYTE PTR gs:[rbp+0x0],ch
 1021cee:	outs   dx,DWORD PTR ds:[rsi]
 1021cef:	add    BYTE PTR [rax+rax*1+0x65],dh
 1021cf3:	add    BYTE PTR [rax],ah
 1021cf5:	add    BYTE PTR [rax+0x0],dh
 1021cf8:	jb     0x1021cfa
 1021cfa:	outs   dx,DWORD PTR ds:[rsi]
 1021cfb:	add    BYTE PTR [rbx+0x0],ah
 1021cfe:	add    BYTE PTR gs:[rbx+0x0],dh
 1021d02:	jae    0x1021d04
 1021d04:	and    BYTE PTR [rax],al
 1021d06:	jb     0x1021d08
 1021d08:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1021d0d:	add    BYTE PTR [rsi+0x0],ch
 1021d10:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1021d15:	add    BYTE PTR [rbp+0x0],ah
 1021d18:	jb     0x1021d1a
 1021d1a:	jb     0x1021d1c
 1021d1c:	outs   dx,DWORD PTR ds:[rsi]
 1021d1d:	add    BYTE PTR [rdx+0x0],dh
 1021d20:	and    BYTE PTR [rax],al
 1021d22:	xor    BYTE PTR [rax],al
 1021d24:	js     0x1021d26
 1021d26:	and    eax,0x21003100
 1021d2b:	add    BYTE PTR [rax],bh
 1021d2d:	add    BYTE PTR [rsi],ch
 1021d2f:	add    BYTE PTR [rax],bh
 1021d31:	add    BYTE PTR [rax+0x0],bl
 1021d34:	and    DWORD PTR [rax],eax
 1021d36:	and    BYTE PTR [rax],al
 1021d38:	ja     0x1021d3a
 1021d3a:	push   0x6c006900
 1021d3f:	add    BYTE PTR [rbp+0x0],ah
 1021d42:	and    BYTE PTR [rax],al
 1021d44:	(bad)  
 1021d45:	add    BYTE PTR [rax+rax*1+0x74],dh
 1021d49:	add    BYTE PTR [rbp+0x0],ah
 1021d4c:	ins    DWORD PTR es:[rdi],dx
 1021d4d:	add    BYTE PTR [rax+0x0],dh
 1021d50:	je     0x1021d52
 1021d52:	imul   eax,DWORD PTR [rax],0x67006e
 1021d58:	and    BYTE PTR [rax],al
 1021d5a:	je     0x1021d5c
 1021d5c:	outs   dx,DWORD PTR ds:[rsi]
 1021d5d:	add    BYTE PTR [rax],ah
 1021d5f:	add    BYTE PTR [rbx+0x0],ah
 1021d62:	jb     0x1021d64
 1021d64:	add    BYTE PTR gs:[rcx+0x0],ah
 1021d68:	je     0x1021d6a
 1021d6a:	add    BYTE PTR gs:[rax],ah
 1021d6d:	add    BYTE PTR [rcx+0x0],ah
 1021d70:	and    BYTE PTR [rax],al
 1021d72:	add    BYTE PTR fs:[rbp+0x0],dh
 1021d76:	ins    DWORD PTR es:[rdi],dx
 1021d77:	add    BYTE PTR [rax+0x0],dh
 1021d7a:	add    BYTE PTR cs:[rdx],cl
 1021d7d:	add    BYTE PTR [rax+0x0],al
 1021d80:	push   rsp
 1021d81:	add    BYTE PTR [rax+0x0],ch
 1021d84:	add    BYTE PTR gs:[rax],ah
 1021d87:	add    BYTE PTR [rdx+0x0],dh
 1021d8a:	add    BYTE PTR gs:[rbp+0x0],ch
 1021d8e:	outs   dx,DWORD PTR ds:[rsi]
 1021d8f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1021d93:	add    BYTE PTR [rax],ah
 1021d95:	add    BYTE PTR [rax+0x0],dh
 1021d98:	jb     0x1021d9a
 1021d9a:	outs   dx,DWORD PTR ds:[rsi]
 1021d9b:	add    BYTE PTR [rbx+0x0],ah
 1021d9e:	add    BYTE PTR gs:[rbx+0x0],dh
 1021da2:	jae    0x1021da4
 1021da4:	and    BYTE PTR [rax],al
 1021da6:	ja     0x1021da8
 1021da8:	jb     0x1021daa
 1021daa:	outs   dx,DWORD PTR ds:[rsi]
 1021dab:	add    BYTE PTR [rax+rax*1+0x65],dh
 1021daf:	add    BYTE PTR [rax],ah
 1021db1:	add    BYTE PTR [rbp+0x0],ah
 1021db4:	js     0x1021db6
 1021db6:	je     0x1021db8
 1021db8:	jb     0x1021dba
 1021dba:	(bad)  
 1021dbb:	add    BYTE PTR [rax],ah
 1021dbd:	add    BYTE PTR [rax+rax*1+0x69],ah
 1021dc1:	add    BYTE PTR [rcx+0x0],ah
 1021dc4:	add    BYTE PTR [esi+0x0],ch
 1021dc8:	outs   dx,DWORD PTR ds:[rsi]
 1021dc9:	add    BYTE PTR [rbx+0x0],dh
 1021dcc:	je     0x1021dce
 1021dce:	imul   eax,DWORD PTR [rax],0x200063
 1021dd4:	imul   eax,DWORD PTR [rax],0x66006e
 1021dda:	outs   dx,DWORD PTR ds:[rsi]
 1021ddb:	add    BYTE PTR [rdx+0x0],dh
 1021dde:	ins    DWORD PTR es:[rdi],dx
 1021ddf:	add    BYTE PTR [rcx+0x0],ah
 1021de2:	je     0x1021de4
 1021de4:	imul   eax,DWORD PTR [rax],0x6e006f
 1021dea:	and    BYTE PTR [rax],al
 1021dec:	je     0x1021dee
 1021dee:	outs   dx,DWORD PTR ds:[rsi]
 1021def:	add    BYTE PTR [rax],ah
 1021df1:	add    BYTE PTR [rip+0x21003100],ah        # 0x22024ef7
 1021df7:	add    BYTE PTR [rbx+0x0],dh
 1021dfa:	and    DWORD PTR [rax],eax
 1021dfc:	add    BYTE PTR cs:[rdx],cl
 1021dff:	add    BYTE PTR [rax+0x1],dl
 1021e02:	push   rsp
 1021e03:	add    BYTE PTR [rax+0x0],ch
 1021e06:	imul   eax,DWORD PTR [rax],0x200073
 1021e0c:	(bad)  
 1021e0d:	add    BYTE PTR [rax+0x0],dh
 1021e10:	jo     0x1021e12
 1021e12:	ins    BYTE PTR es:[rdi],dx
 1021e13:	add    BYTE PTR [rcx+0x0],ch
 1021e16:	movsxd eax,DWORD PTR [rax]
 1021e18:	(bad)  
 1021e19:	add    BYTE PTR [rax+rax*1+0x69],dh
 1021e1d:	add    BYTE PTR [rdi+0x0],ch
 1021e20:	outs   dx,BYTE PTR ds:[rsi]
 1021e21:	add    BYTE PTR [rax],ah
 1021e23:	add    BYTE PTR [rdx+0x0],dh
 1021e26:	add    BYTE PTR gs:[rcx+0x0],dh
 1021e2a:	jne    0x1021e2c
 1021e2c:	imul   eax,DWORD PTR [rax],0x650072
 1021e32:	jae    0x1021e34
 1021e34:	and    BYTE PTR [rax],al
 1021e36:	outs   dx,DWORD PTR ds:[rsi]
 1021e37:	add    BYTE PTR [rsi+0x0],ch
 1021e3a:	add    BYTE PTR gs:[rax],ah
 1021e3d:	add    BYTE PTR [rdi+0x0],ch
 1021e40:	data16 add BYTE PTR [rax],ah
 1021e43:	add    BYTE PTR [rax+rax*1+0x68],dh
 1021e47:	add    BYTE PTR [rbp+0x0],ah
 1021e4a:	and    BYTE PTR [rax],al
 1021e4c:	movsxd eax,DWORD PTR [rax]
 1021e4e:	outs   dx,DWORD PTR ds:[rsi]
 1021e4f:	add    BYTE PTR [rbp+0x0],ch
 1021e52:	jo     0x1021e54
 1021e54:	outs   dx,DWORD PTR ds:[rsi]
 1021e55:	add    BYTE PTR [rsi+0x0],ch
 1021e58:	add    BYTE PTR gs:[rsi+0x0],ch
 1021e5c:	je     0x1021e5e
 1021e5e:	jae    0x1021e60
 1021e60:	cmp    al,BYTE PTR [rax]
 1021e62:	and    BYTE PTR [rax],al
 1021e64:	rex.WB add BYTE PTR [r14+0x0],bpl
 1021e68:	je     0x1021e6a
 1021e6a:	add    BYTE PTR gs:[rdi+0x0],ah
 1021e6e:	jb     0x1021e70
 1021e70:	(bad)  
 1021e71:	add    BYTE PTR [rax+rax*1+0x69],dh
 1021e75:	add    BYTE PTR [rdi+0x0],ch
 1021e78:	outs   dx,BYTE PTR ds:[rsi]
 1021e79:	add    BYTE PTR [rax],ah
 1021e7b:	add    BYTE PTR [rbx+0x0],dl
 1021e7e:	add    BYTE PTR gs:[rdx+0x0],dh
 1021e82:	jbe    0x1021e84
 1021e84:	imul   eax,DWORD PTR [rax],0x650063
 1021e8a:	jae    0x1021e8c
 1021e8c:	sub    al,0x0
 1021e8e:	and    BYTE PTR [rax],al
 1021e90:	rex.X add BYTE PTR [rbp+0x0],sil
 1021e94:	jae    0x1021e96
 1021e96:	imul   eax,DWORD PTR [rax],0x65006e
 1021e9c:	jae    0x1021e9e
 1021e9e:	jae    0x1021ea0
 1021ea0:	and    BYTE PTR [rax],al
 1021ea2:	rex.WB add BYTE PTR [r14+0x0],bpl
 1021ea6:	je     0x1021ea8
 1021ea8:	add    BYTE PTR gs:[rax+rax*1+0x6c],ch
 1021ead:	add    BYTE PTR [rcx+0x0],ch
 1021eb0:	add    BYTE PTR [ebp+0x0],ah
 1021eb4:	outs   dx,BYTE PTR ds:[rsi]
 1021eb5:	add    BYTE PTR [rbx+0x0],ah
 1021eb8:	add    BYTE PTR gs:[rax],ah
 1021ebb:	add    BYTE PTR [rbx+0x0],dl
 1021ebe:	je     0x1021ec0
 1021ec0:	jne    0x1021ec2
 1021ec2:	add    BYTE PTR fs:[rcx+0x0],ch
 1021ec6:	outs   dx,DWORD PTR ds:[rsi]
 1021ec7:	add    BYTE PTR [rax+rax*1],ch
 1021eca:	and    BYTE PTR [rax],al
 1021ecc:	rex.WRB add BYTE PTR [r9+0x0],r12b
 1021ed0:	outs   dx,BYTE PTR ds:[rsi]
 1021ed1:	add    BYTE PTR [rcx+0x0],ah
 1021ed4:	add    BYTE PTR [ebp+0x0],ah
 1021ed8:	ins    DWORD PTR es:[rdi],dx
 1021ed9:	add    BYTE PTR [rbp+0x0],ah
 1021edc:	outs   dx,BYTE PTR ds:[rsi]
 1021edd:	add    BYTE PTR [rax+rax*1+0x20],dh
 1021ee1:	add    BYTE PTR [rax+rax*1+0x6f],dl
 1021ee5:	add    BYTE PTR [rdi+0x0],ch
 1021ee8:	ins    BYTE PTR es:[rdi],dx
 1021ee9:	add    BYTE PTR [rbx+0x0],dh
 1021eec:	and    BYTE PTR [rax],al
 1021eee:	sub    eax,0x42002000
 1021ef3:	add    BYTE PTR [rcx+0x0],ah
 1021ef6:	jae    0x1021ef8
 1021ef8:	imul   eax,DWORD PTR [rax],0x200063
 1021efe:	outs   dx,DWORD PTR ds:[rsi]
 1021eff:	add    BYTE PTR [rdx+0x0],dh
 1021f02:	and    BYTE PTR [rax],al
 1021f04:	add    BYTE PTR [rcx+0x0],r12b
 1021f08:	je     0x1021f0a
 1021f0a:	(bad)  
 1021f0b:	add    BYTE PTR [rdx+0x0],ah
 1021f0e:	(bad)  
 1021f0f:	add    BYTE PTR [rbx+0x0],dh
 1021f12:	add    BYTE PTR gs:[rax],ah
 1021f15:	add    BYTE PTR [rbp+0x0],al
 1021f18:	outs   dx,BYTE PTR ds:[rsi]
 1021f19:	add    BYTE PTR [rdi+0x0],ah
 1021f1c:	imul   eax,DWORD PTR [rax],0x65006e
 1021f22:	and    BYTE PTR [rax],al
 1021f24:	je     0x1021f26
 1021f26:	outs   dx,DWORD PTR ds:[rsi]
 1021f27:	add    BYTE PTR [rax],ah
 1021f29:	add    BYTE PTR [rdx+0x0],ah
 1021f2c:	add    BYTE PTR gs:[rax],ah
 1021f2f:	add    BYTE PTR [rcx+0x0],ch
 1021f32:	outs   dx,BYTE PTR ds:[rsi]
 1021f33:	add    BYTE PTR [rbx+0x0],dh
 1021f36:	je     0x1021f38
 1021f38:	(bad)  
 1021f39:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1021f3d:	add    BYTE PTR [rbp+0x0],ah
 1021f40:	add    BYTE PTR fs:[rax],ah
 1021f43:	add    BYTE PTR [rdx+0x0],ah
 1021f46:	jns    0x1021f48
 1021f48:	and    BYTE PTR [rax],al
 1021f4a:	push   rbx
 1021f4b:	add    BYTE PTR [rcx+0x0],dl
 1021f4e:	rex.WR add BYTE PTR [rax],r12b
 1021f51:	add    BYTE PTR [rbx+0x0],dl
 1021f54:	add    BYTE PTR gs:[rdx+0x0],dh
 1021f58:	jbe    0x1021f5a
 1021f5a:	add    BYTE PTR gs:[rdx+0x0],dh
 1021f5e:	and    BYTE PTR [rax],al
 1021f60:	xor    al,BYTE PTR [rax]
 1021f62:	xor    BYTE PTR [rax],al
 1021f64:	xor    DWORD PTR [rax],eax
 1021f66:	xor    al,BYTE PTR [rax]
 1021f68:	and    BYTE PTR [rax],al
 1021f6a:	push   rbx
 1021f6b:	add    BYTE PTR [rax+rax*1+0x61],dh
 1021f6f:	add    BYTE PTR [rsi+0x0],ch
 1021f72:	add    BYTE PTR fs:[rcx+0x0],ah
 1021f76:	jb     0x1021f78
 1021f78:	add    BYTE PTR fs:[rax+rax*1],ch
 1021f7c:	and    BYTE PTR [rax],al
 1021f7e:	add    BYTE PTR [r14+0x0],r13b
 1021f82:	je     0x1021f84
 1021f84:	add    BYTE PTR gs:[rdx+0x0],dh
 1021f88:	jo     0x1021f8a
 1021f8a:	jb     0x1021f8c
 1021f8c:	imul   eax,DWORD PTR [rax],0x650073
 1021f92:	sub    al,0x0
 1021f94:	and    BYTE PTR [rax],al
 1021f96:	add    BYTE PTR [rbp+0x0],r12b
 1021f9a:	jbe    0x1021f9c
 1021f9c:	add    BYTE PTR gs:[rax+rax*1+0x6f],ch
 1021fa1:	add    BYTE PTR [rax+0x0],dh
 1021fa4:	add    BYTE PTR gs:[rdx+0x0],dh
 1021fa8:	sub    al,0x0
 1021faa:	and    BYTE PTR [rax],al
 1021fac:	rex.X add BYTE PTR [rbp+0x0],sil
 1021fb0:	jae    0x1021fb2
 1021fb2:	imul   eax,DWORD PTR [rax],0x65006e
 1021fb8:	jae    0x1021fba
 1021fba:	jae    0x1021fbc
 1021fbc:	and    BYTE PTR [rax],al
 1021fbe:	rex.WB add BYTE PTR [r14+0x0],bpl
 1021fc2:	je     0x1021fc4
 1021fc4:	add    BYTE PTR gs:[rax+rax*1+0x6c],ch
 1021fc9:	add    BYTE PTR [rcx+0x0],ch
 1021fcc:	add    BYTE PTR [ebp+0x0],ah
 1021fd0:	outs   dx,BYTE PTR ds:[rsi]
 1021fd1:	add    BYTE PTR [rbx+0x0],ah
 1021fd4:	add    BYTE PTR gs:[rax+rax*1],ch
 1021fd8:	and    BYTE PTR [rax],al
 1021fda:	outs   dx,DWORD PTR ds:[rsi]
 1021fdb:	add    BYTE PTR [rdx+0x0],dh
 1021fde:	and    BYTE PTR [rax],al
 1021fe0:	add    BYTE PTR [r14+0x0],r14b
 1021fe4:	(bad)  
 1021fe5:	add    BYTE PTR [rax+rax*1+0x75],ch
 1021fe9:	add    BYTE PTR [rcx+0x0],ah
 1021fec:	je     0x1021fee
 1021fee:	imul   eax,DWORD PTR [rax],0x6e006f
 1021ff4:	and    BYTE PTR [rax],al
 1021ff6:	add    BYTE PTR [r8+rax*1+0x69],r12b
 1021ffb:	add    BYTE PTR [rax+rax*1+0x69],dh
 1021fff:	add    BYTE PTR [rdi+0x0],ch
 1022002:	outs   dx,BYTE PTR ds:[rsi]
 1022003:	add    BYTE PTR [rsi],ch
 1022005:	add    BYTE PTR [rax],ah
 1022007:	add    BYTE PTR [rax+rax*1+0x6f],dl
 102200b:	add    BYTE PTR [rax],ah
 102200d:	add    BYTE PTR [rcx+0x0],ch
 1022010:	outs   dx,BYTE PTR ds:[rsi]
 1022011:	add    BYTE PTR [rbx+0x0],dh
 1022014:	je     0x1022016
 1022016:	(bad)  
 1022017:	add    BYTE PTR [rax+rax*1+0x6c],ch
 102201b:	add    BYTE PTR [rax],ah
 102201d:	add    BYTE PTR [rcx+0x0],ah
 1022020:	and    BYTE PTR [rax],al
 1022022:	movsxd eax,DWORD PTR [rax]
 1022024:	outs   dx,DWORD PTR ds:[rsi]
 1022025:	add    BYTE PTR [rbp+0x0],ch
 1022028:	jo     0x102202a
 102202a:	outs   dx,DWORD PTR ds:[rsi]
 102202b:	add    BYTE PTR [rsi+0x0],ch
 102202e:	add    BYTE PTR gs:[rsi+0x0],ch
 1022032:	je     0x1022034
 1022034:	sub    al,0x0
 1022036:	and    BYTE PTR [rax],al
 1022038:	jb     0x102203a
 102203a:	jne    0x102203c
 102203c:	outs   dx,BYTE PTR ds:[rsi]
 102203d:	add    BYTE PTR [rax],ah
 102203f:	add    BYTE PTR [rbx+0x0],dl
 1022042:	push   rcx
 1022043:	add    BYTE PTR [rax+rax*1+0x20],cl
 1022047:	add    BYTE PTR [rbx+0x0],dl
 102204a:	add    BYTE PTR gs:[rdx+0x0],dh
 102204e:	jbe    0x1022050
 1022050:	add    BYTE PTR gs:[rdx+0x0],dh
 1022054:	and    BYTE PTR [rax],al
 1022056:	push   rbx
 1022057:	add    BYTE PTR [rbp+0x0],ah
 102205a:	je     0x102205c
 102205c:	jne    0x102205e
 102205e:	jo     0x1022060
 1022060:	and    BYTE PTR [rax],al
 1022062:	(bad)  
 1022063:	add    BYTE PTR [rsi+0x0],ch
 1022066:	add    BYTE PTR fs:[rax],ah
 1022069:	add    BYTE PTR [rbx+0x0],dh
 102206c:	add    BYTE PTR gs:[rax+rax*1+0x65],ch
 1022071:	add    BYTE PTR [rbx+0x0],ah
 1022074:	je     0x1022076
 1022076:	and    BYTE PTR [rax],al
 1022078:	je     0x102207a
 102207a:	push   0x20006500
 102207f:	add    BYTE PTR [rbx+0x0],ah
 1022082:	outs   dx,DWORD PTR ds:[rsi]
 1022083:	add    BYTE PTR [rbp+0x0],ch
 1022086:	jo     0x1022088
 1022088:	outs   dx,DWORD PTR ds:[rsi]
 1022089:	add    BYTE PTR [rsi+0x0],ch
 102208c:	add    BYTE PTR gs:[rsi+0x0],ch
 1022090:	je     0x1022092
 1022092:	and    BYTE PTR [rax],al
 1022094:	outs   dx,BYTE PTR ds:[rsi]
 1022095:	add    BYTE PTR [rcx+0x0],ah
 1022098:	ins    DWORD PTR es:[rdi],dx
 1022099:	add    BYTE PTR [rbp+0x0],ah
 102209c:	add    BYTE PTR cs:[rdx],cl
 102209f:	add    BYTE PTR [rdx],cl
	...
 10220c1:	add    BYTE PTR [rdi],ch
 10220c3:	add    BYTE PTR [rbx+0x0],dl
 10220c6:	push   rcx
 10220c7:	add    BYTE PTR [rax+rax*1+0x20],cl
 10220cb:	add    BYTE PTR [rbx+0x0],dl
 10220ce:	add    BYTE PTR gs:[rdx+0x0],dh
 10220d2:	jbe    0x10220d4
 10220d4:	add    BYTE PTR gs:[rdx+0x0],dh
 10220d8:	and    BYTE PTR [rax],al
 10220da:	rex.WB add BYTE PTR [r14+0x0],bpl
 10220de:	je     0x10220e0
 10220e0:	add    BYTE PTR gs:[rdi+0x0],ah
 10220e4:	jb     0x10220e6
 10220e6:	(bad)  
 10220e7:	add    BYTE PTR [rax+rax*1+0x69],dh
 10220eb:	add    BYTE PTR [rdi+0x0],ch
 10220ee:	outs   dx,BYTE PTR ds:[rsi]
 10220ef:	add    BYTE PTR [rax],ah
 10220f1:	add    BYTE PTR [rbx+0x0],dl
 10220f4:	add    BYTE PTR gs:[rdx+0x0],dh
 10220f8:	jbe    0x10220fa
 10220fa:	imul   eax,DWORD PTR [rax],0x650063
 1022100:	jae    0x1022102
 1022102:	and    BYTE PTR [rax],al
 1022104:	push   rax
 1022105:	add    BYTE PTR [rcx+0x0],ah
 1022108:	movsxd eax,DWORD PTR [rax]
 102210a:	imul   eax,DWORD PTR [rax],0x61
 102210d:	add    BYTE PTR [rdi+0x0],ah
 1022110:	add    BYTE PTR gs:[rax],ah
 1022113:	add    BYTE PTR [rbp+0x0],dl
 1022116:	je     0x1022118
 1022118:	imul   eax,DWORD PTR [rax],0x69006c
 102211e:	je     0x1022120
 1022120:	jns    0x1022122
	...
 102212e:	push   rax
 102212f:	rex.B (bad) 
 1022131:	add    al,0x34
 1022133:	add    BYTE PTR [rax],al
 1022135:	add    BYTE PTR [rsi+0x0],dl
 1022138:	push   rbx
 1022139:	add    BYTE PTR [rdi+0x0],bl
 102213c:	push   rsi
 102213d:	add    BYTE PTR [rbp+0x0],al
 1022140:	push   rdx
 1022141:	add    BYTE PTR [rbx+0x0],dl
 1022144:	rex.WB add BYTE PTR [r15+0x0],cl
 1022148:	rex.WRX add BYTE PTR [rdi+0x0],r11b
 102214c:	rex.WB add BYTE PTR [r14+0x0],cl
 1022150:	rex.RX add BYTE PTR [rdi+0x0],r9b
 1022154:	add    BYTE PTR [rax],al
 1022156:	add    BYTE PTR [rax],al
 1022158:	mov    ebp,0xfeef04
 102215d:	add    BYTE PTR [rcx],al
 102215f:	add    BYTE PTR [rsi+0x0],ch
 1022162:	fild   DWORD PTR [rdi]
 1022164:	cmp    al,0x0
 1022166:	xor    al,0x8
 1022168:	add    BYTE PTR [rax],al
 102216a:	or     eax,DWORD PTR [rax]
 102216c:	cmp    al,0x0
 102216e:	xor    al,0x8
 1022170:	(bad)  
 1022171:	add    BYTE PTR [rax],al
 1022173:	add    BYTE PTR [rax],cl
 1022175:	add    BYTE PTR [rax],al
 1022177:	add    BYTE PTR [rax],al
 1022179:	add    BYTE PTR [rax+rax*1],al
 102217c:	add    DWORD PTR [rax],eax
	...
 102218a:	add    BYTE PTR [rax],al
 102218c:	and    al,BYTE PTR [rax+rax*1]
 102218f:	add    BYTE PTR [rcx],al
 1022191:	add    BYTE PTR [rbx+0x0],dl
 1022194:	je     0x1022196
 1022196:	jb     0x1022198
 1022198:	imul   eax,DWORD PTR [rax],0x67006e
 102219e:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10221a2:	ins    BYTE PTR es:[rdi],dx
 10221a3:	add    BYTE PTR [rbp+0x0],ah
 10221a6:	rex.WB add BYTE PTR [r14+0x0],bpl
 10221aa:	data16 add BYTE PTR [rdi+0x0],ch
 10221ae:	add    BYTE PTR [rax],al
 10221b0:	inc    BYTE PTR [rbx]
 10221b2:	add    BYTE PTR [rax],al
 10221b4:	add    DWORD PTR [rax],eax
 10221b6:	xor    BYTE PTR [rax],al
 10221b8:	xor    al,0x0
 10221ba:	xor    BYTE PTR [rax],al
 10221bc:	cmp    DWORD PTR [rax],eax
 10221be:	xor    BYTE PTR [rax],al
 10221c0:	xor    al,0x0
 10221c2:	rex.X add BYTE PTR [rax],sil
 10221c5:	add    BYTE PTR [rax],al
 10221c7:	add    BYTE PTR [rsi],ah
 10221c9:	add    BYTE PTR [rdi],al
 10221cb:	add    BYTE PTR [rcx],al
 10221cd:	add    BYTE PTR [rax+0x0],dl
 10221d0:	ins    BYTE PTR es:[rdi],dx
 10221d1:	add    BYTE PTR [rcx+0x0],ah
 10221d4:	je     0x10221d6
 10221d6:	data16 add BYTE PTR [rdi+0x0],ch
 10221da:	jb     0x10221dc
 10221dc:	ins    DWORD PTR es:[rdi],dx
 10221dd:	add    BYTE PTR [rax],al
 10221df:	add    BYTE PTR [rsi+0x0],cl
 10221e2:	push   rsp
 10221e3:	add    BYTE PTR [rax],ah
 10221e5:	add    BYTE PTR [rax+0x0],bh
 10221e8:	add    BYTE PTR ss:[rax+rax*1],dh
 10221ec:	add    BYTE PTR [rax],al
 10221ee:	add    BYTE PTR [rax],al
 10221f0:	mov    edx,0x1004900
 10221f5:	add    BYTE PTR [rax+rax*1+0x65],cl
 10221f9:	add    BYTE PTR [rdi+0x0],ah
 10221fc:	(bad)  
 10221fd:	add    BYTE PTR [rax+rax*1+0x54],ch
 1022201:	add    BYTE PTR [rdx+0x0],dh
 1022204:	(bad)  
 1022205:	add    BYTE PTR [rax+rax*1+0x65],ah
 1022209:	add    BYTE PTR [rbp+0x0],ch
 102220c:	(bad)  
 102220d:	add    BYTE PTR [rdx+0x0],dh
 1022210:	imul   eax,DWORD PTR [rax],0x73
 1022213:	add    BYTE PTR [rax],al
 1022215:	add    BYTE PTR [rax],al
 1022217:	add    BYTE PTR [rbp+0x0],cl
 102221a:	imul   eax,DWORD PTR [rax],0x720063
 1022220:	outs   dx,DWORD PTR ds:[rsi]
 1022221:	add    BYTE PTR [rbx+0x0],dh
 1022224:	outs   dx,DWORD PTR ds:[rsi]
 1022225:	add    BYTE PTR [rsi+0x0],ah
 1022228:	je     0x102222a
 102222a:	and    BYTE PTR [rax],al
 102222c:	push   rbx
 102222d:	add    BYTE PTR [rcx+0x0],dl
 1022230:	rex.WR add BYTE PTR [rax],r12b
 1022233:	add    BYTE PTR [rbx+0x0],dl
 1022236:	add    BYTE PTR gs:[rdx+0x0],dh
 102223a:	jbe    0x102223c
 102223c:	add    BYTE PTR gs:[rdx+0x0],dh
 1022240:	and    BYTE PTR [rax],al
 1022242:	imul   eax,DWORD PTR [rax],0x200073
 1022248:	(bad)  
 1022249:	add    BYTE PTR [rax],ah
 102224b:	add    BYTE PTR [rdx+0x0],dh
 102224e:	add    BYTE PTR gs:[rdi+0x0],ah
 1022252:	imul   eax,DWORD PTR [rax],0x740073
 1022258:	add    BYTE PTR gs:[rdx+0x0],dh
 102225c:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1022261:	add    BYTE PTR [rax+rax*1+0x72],dh
 1022265:	add    BYTE PTR [rcx+0x0],ah
 1022268:	add    BYTE PTR fs:[rbp+0x0],ah
 102226c:	ins    DWORD PTR es:[rdi],dx
 102226d:	add    BYTE PTR [rcx+0x0],ah
 1022270:	jb     0x1022272
 1022272:	imul   eax,DWORD PTR [rax],0x20
 1022275:	add    BYTE PTR [rdi+0x0],ch
 1022278:	data16 add BYTE PTR [rax],ah
 102227b:	add    BYTE PTR [rbp+0x0],cl
 102227e:	imul   eax,DWORD PTR [rax],0x720063
 1022284:	outs   dx,DWORD PTR ds:[rsi]
 1022285:	add    BYTE PTR [rbx+0x0],dh
 1022288:	outs   dx,DWORD PTR ds:[rsi]
 1022289:	add    BYTE PTR [rsi+0x0],ah
 102228c:	je     0x102228e
 102228e:	and    BYTE PTR [rax],al
 1022290:	rex.XB add BYTE PTR [r15+0x0],bpl
 1022294:	jb     0x1022296
 1022296:	jo     0x1022298
 1022298:	outs   dx,DWORD PTR ds:[rsi]
 1022299:	add    BYTE PTR [rdx+0x0],dh
 102229c:	(bad)  
 102229d:	add    BYTE PTR [rax+rax*1+0x69],dh
 10222a1:	add    BYTE PTR [rdi+0x0],ch
 10222a4:	outs   dx,BYTE PTR ds:[rsi]
 10222a5:	add    BYTE PTR [rsi],ch
 10222a7:	add    BYTE PTR [rax],al
 10222a9:	add    BYTE PTR [rax],al
 10222ab:	add    BYTE PTR [rax],ah
 10222ad:	add    BYTE PTR [rax+rax*1],al
 10222b0:	add    DWORD PTR [rax],eax
 10222b2:	rex.XB add BYTE PTR [r15+0x0],bpl
 10222b6:	ins    DWORD PTR es:[rdi],dx
 10222b7:	add    BYTE PTR [rbp+0x0],ch
 10222ba:	add    BYTE PTR gs:[rsi+0x0],ch
 10222be:	je     0x10222c0
 10222c0:	jae    0x10222c2
 10222c2:	add    BYTE PTR [rax],al
 10222c4:	push   rbx
 10222c5:	add    BYTE PTR [rcx+0x0],dl
 10222c8:	rex.WR add BYTE PTR [rax],r8b
 10222cb:	add    BYTE PTR [rsi],ah
 10222cd:	add    BYTE PTR [rip+0x47000100],al        # 0x480223d3
 10222d3:	add    BYTE PTR [rdi+0x0],ch
 10222d6:	ins    BYTE PTR es:[rdi],dx
 10222d7:	add    BYTE PTR [rax+rax*1+0x65],ah
 10222db:	add    BYTE PTR [rsi+0x0],ch
 10222de:	rex.X add BYTE PTR [rcx+0x0],bpl
 10222e2:	je     0x10222e4
 10222e4:	jae    0x10222e6
 10222e6:	add    BYTE PTR [rax],al
 10222e8:	push   rsp
 10222e9:	add    BYTE PTR [rdx+0x0],dh
 10222ec:	jne    0x10222ee
 10222ee:	add    BYTE PTR gs:[rax],al
 10222f1:	add    BYTE PTR [rax],al
 10222f3:	add    BYTE PTR [rax+rax*1+0x16],cl
 10222f7:	add    BYTE PTR [rcx],al
 10222f9:	add    BYTE PTR [rbx+0x0],al
 10222fc:	outs   dx,DWORD PTR ds:[rsi]
 10222fd:	add    BYTE PTR [rbp+0x0],ch
 1022300:	jo     0x1022302
 1022302:	(bad)  
 1022303:	add    BYTE PTR [rsi+0x0],ch
 1022306:	jns    0x1022308
 1022308:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 102230c:	ins    DWORD PTR es:[rdi],dx
 102230d:	add    BYTE PTR [rbp+0x0],ah
 1022310:	add    BYTE PTR [rax],al
 1022312:	add    BYTE PTR [rax],al
 1022314:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1022318:	movsxd eax,DWORD PTR [rax]
 102231a:	jb     0x102231c
 102231c:	outs   dx,DWORD PTR ds:[rsi]
 102231d:	add    BYTE PTR [rbx+0x0],dh
 1022320:	outs   dx,DWORD PTR ds:[rsi]
 1022321:	add    BYTE PTR [rsi+0x0],ah
 1022324:	je     0x1022326
 1022326:	and    BYTE PTR [rax],al
 1022328:	rex.XB add BYTE PTR [r15+0x0],bpl
 102232c:	jb     0x102232e
 102232e:	jo     0x1022330
 1022330:	outs   dx,DWORD PTR ds:[rsi]
 1022331:	add    BYTE PTR [rdx+0x0],dh
 1022334:	(bad)  
 1022335:	add    BYTE PTR [rax+rax*1+0x69],dh
 1022339:	add    BYTE PTR [rdi+0x0],ch
 102233c:	outs   dx,BYTE PTR ds:[rsi]
 102233d:	add    BYTE PTR [rax],al
 102233f:	add    BYTE PTR [rax+0x1003000],cl
 1022345:	add    BYTE PTR [rsi+0x0],al
 1022348:	imul   eax,DWORD PTR [rax],0x65006c
 102234e:	add    BYTE PTR [rbp+0x0],r12b
 1022352:	jae    0x1022354
 1022354:	movsxd eax,DWORD PTR [rax]
 1022356:	jb     0x1022358
 1022358:	imul   eax,DWORD PTR [rax],0x740070
 102235e:	imul   eax,DWORD PTR [rax],0x6e006f
 1022364:	add    BYTE PTR [rax],al
 1022366:	add    BYTE PTR [rax],al
 1022368:	push   rbx
 1022369:	add    BYTE PTR [rcx+0x0],dl
 102236c:	rex.WR add BYTE PTR [rax],r12b
 102236f:	add    BYTE PTR [rbx+0x0],dl
 1022372:	add    BYTE PTR gs:[rdx+0x0],dh
 1022376:	jbe    0x1022378
 1022378:	add    BYTE PTR gs:[rdx+0x0],dh
 102237c:	and    BYTE PTR [rax],al
 102237e:	rex.WB add BYTE PTR [r14+0x0],bpl
 1022382:	je     0x1022384
 1022384:	add    BYTE PTR gs:[rdi+0x0],ah
 1022388:	jb     0x102238a
 102238a:	(bad)  
 102238b:	add    BYTE PTR [rax+rax*1+0x69],dh
 102238f:	add    BYTE PTR [rdi+0x0],ch
 1022392:	outs   dx,BYTE PTR ds:[rsi]
 1022393:	add    BYTE PTR [rax],ah
 1022395:	add    BYTE PTR [rbx+0x0],dl
 1022398:	add    BYTE PTR gs:[rdx+0x0],dh
 102239c:	jbe    0x102239e
 102239e:	imul   eax,DWORD PTR [rax],0x650063
 10223a4:	jae    0x10223a6
 10223a6:	and    BYTE PTR [rax],al
 10223a8:	push   rax
 10223a9:	add    BYTE PTR [rcx+0x0],ah
 10223ac:	movsxd eax,DWORD PTR [rax]
 10223ae:	imul   eax,DWORD PTR [rax],0x61
 10223b1:	add    BYTE PTR [rdi+0x0],ah
 10223b4:	add    BYTE PTR gs:[rax],ah
 10223b7:	add    BYTE PTR [rbp+0x0],dl
 10223ba:	je     0x10223bc
 10223bc:	imul   eax,DWORD PTR [rax],0x69006c
 10223c2:	je     0x10223c4
 10223c4:	jns    0x10223c6
 10223c6:	add    BYTE PTR [rax],al
 10223c8:	jl     0x10223ca
 10223ca:	add    BYTE PTR cs:[rcx],al
 10223cd:	add    BYTE PTR [rsi+0x0],al
 10223d0:	imul   eax,DWORD PTR [rax],0x65006c
 10223d6:	push   rsi
 10223d7:	add    BYTE PTR [rbp+0x0],ah
 10223da:	jb     0x10223dc
 10223dc:	jae    0x10223de
 10223de:	imul   eax,DWORD PTR [rax],0x6e006f
 10223e4:	add    BYTE PTR [rax],al
 10223e6:	add    BYTE PTR [rax],al
 10223e8:	xor    al,BYTE PTR [rax]
 10223ea:	xor    BYTE PTR [rax],al
 10223ec:	xor    DWORD PTR [rax],eax
 10223ee:	xor    DWORD PTR [rax],eax
 10223f0:	add    BYTE PTR cs:[rax],dh
 10223f3:	add    BYTE PTR [rcx],dh
 10223f5:	add    BYTE PTR [rcx],dh
 10223f7:	add    BYTE PTR [rax],dh
 10223f9:	add    BYTE PTR [rsi],ch
 10223fb:	add    BYTE PTR [rdx],dh
 10223fd:	add    BYTE PTR [rcx],dh
 10223ff:	add    BYTE PTR [rax],dh
 1022401:	add    BYTE PTR [rax],dh
 1022403:	add    BYTE PTR [rsi],ch
 1022405:	add    BYTE PTR [rax],dh
 1022407:	add    BYTE PTR [rsi],dh
 1022409:	add    BYTE PTR [rax],dh
 102240b:	add    BYTE PTR [rax],ah
 102240d:	add    BYTE PTR [rax],ch
 102240f:	add    BYTE PTR [rax],ch
 1022411:	add    BYTE PTR [rbx+0x0],dl
 1022414:	push   rcx
 1022415:	add    BYTE PTR [rax+rax*1+0x31],cl
 1022419:	add    BYTE PTR [rcx],dh
 102241b:	add    BYTE PTR [rdi+0x0],bl
 102241e:	push   rdx
 102241f:	add    BYTE PTR [rax+rax*1+0x4d],dl
 1022423:	add    BYTE PTR [rcx],ch
 1022425:	add    BYTE PTR [rsi],ch
 1022427:	add    BYTE PTR [rcx],dh
 1022429:	add    BYTE PTR [rdx],dh
 102242b:	add    BYTE PTR [rax],dh
 102242d:	add    BYTE PTR [rdx],dh
 102242f:	add    BYTE PTR [rcx],dh
 1022431:	add    BYTE PTR [rax],dh
 1022433:	add    BYTE PTR [rip+0x39003100],ch        # 0x3a025539
 1022439:	add    BYTE PTR [rcx],dh
 102243b:	add    BYTE PTR [rdi],dh
 102243d:	add    BYTE PTR [rax],ah
 102243f:	add    BYTE PTR [rcx],ch
 1022441:	add    BYTE PTR [rax],al
 1022443:	add    BYTE PTR [rsi],ch
 1022445:	add    BYTE PTR [rdi],al
 1022447:	add    BYTE PTR [rcx],al
 1022449:	add    BYTE PTR [rcx+0x0],cl
 102244c:	outs   dx,BYTE PTR ds:[rsi]
 102244d:	add    BYTE PTR [rax+rax*1+0x65],dh
 1022451:	add    BYTE PTR [rdx+0x0],dh
 1022454:	outs   dx,BYTE PTR ds:[rsi]
 1022455:	add    BYTE PTR [rcx+0x0],ah
 1022458:	ins    BYTE PTR es:[rdi],dx
 1022459:	add    BYTE PTR [rsi+0x0],cl
 102245c:	(bad)  
 102245d:	add    BYTE PTR [rbp+0x0],ch
 1022460:	add    BYTE PTR gs:[rax],al
 1022463:	add    BYTE PTR [rax+rax*1+0x54],al
 1022467:	add    BYTE PTR [rbp+0x0],dl
 102246a:	je     0x102246c
 102246c:	imul   eax,DWORD PTR [rax],0x6c
 1022472:	add    BYTE PTR [rax],al
 1022474:	outs   dx,BYTE PTR ds:[rsi]
 1022475:	add    BYTE PTR [rip+0x4c000100],ah        # 0x4d02257b
 102247b:	add    BYTE PTR [rbp+0x0],ah
 102247e:	add    BYTE PTR [ecx+0x0],ah
 1022482:	ins    BYTE PTR es:[rdi],dx
 1022483:	add    BYTE PTR [rbx+0x0],al
 1022486:	outs   dx,DWORD PTR ds:[rsi]
 1022487:	add    BYTE PTR [rax+0x0],dh
 102248a:	jns    0x102248c
 102248c:	jb     0x102248e
 102248e:	imul   eax,DWORD PTR [rax],0x680067
 1022494:	je     0x1022496
 1022496:	add    BYTE PTR [rax],al
 1022498:	rex.WRB add BYTE PTR [r9+0x0],r13b
 102249c:	movsxd eax,DWORD PTR [rax]
 102249e:	jb     0x10224a0
 10224a0:	outs   dx,DWORD PTR ds:[rsi]
 10224a1:	add    BYTE PTR [rbx+0x0],dh
 10224a4:	outs   dx,DWORD PTR ds:[rsi]
 10224a5:	add    BYTE PTR [rsi+0x0],ah
 10224a8:	je     0x10224aa
 10224aa:	and    BYTE PTR [rax],al
 10224ac:	rex.XB add BYTE PTR [r15+0x0],bpl
 10224b0:	jb     0x10224b2
 10224b2:	jo     0x10224b4
 10224b4:	add    BYTE PTR cs:[rax],ah
 10224b7:	add    BYTE PTR [rcx+0x0],al
 10224ba:	ins    BYTE PTR es:[rdi],dx
 10224bb:	add    BYTE PTR [rax+rax*1+0x20],ch
 10224bf:	add    BYTE PTR [rdx+0x0],dh
 10224c2:	imul   eax,DWORD PTR [rax],0x680067
 10224c8:	je     0x10224ca
 10224ca:	jae    0x10224cc
 10224cc:	and    BYTE PTR [rax],al
 10224ce:	jb     0x10224d0
 10224d0:	add    BYTE PTR gs:[rbx+0x0],dh
 10224d4:	add    BYTE PTR gs:[rdx+0x0],dh
 10224d8:	jbe    0x10224da
 10224da:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 10224df:	add    BYTE PTR [rax],al
 10224e1:	add    BYTE PTR [rax],al
 10224e3:	add    BYTE PTR [rsi],bh
 10224e5:	add    BYTE PTR [rbx],cl
 10224e7:	add    BYTE PTR [rcx],al
 10224e9:	add    BYTE PTR [rdi+0x0],cl
 10224ec:	jb     0x10224ee
 10224ee:	imul   eax,DWORD PTR [rax],0x690067
 10224f4:	outs   dx,BYTE PTR ds:[rsi]
 10224f5:	add    BYTE PTR [rcx+0x0],ah
 10224f8:	ins    BYTE PTR es:[rdi],dx
 10224f9:	add    BYTE PTR [rsi+0x0],al
 10224fc:	imul   eax,DWORD PTR [rax],0x65006c
 1022502:	outs   dx,BYTE PTR ds:[rsi]
 1022503:	add    BYTE PTR [rcx+0x0],ah
 1022506:	ins    DWORD PTR es:[rdi],dx
 1022507:	add    BYTE PTR [rbp+0x0],ah
 102250a:	add    BYTE PTR [rax],al
 102250c:	add    BYTE PTR [rax+rax*1+0x55],r10b
 1022511:	add    BYTE PTR [rax+rax*1+0x69],dh
 1022515:	add    BYTE PTR [rax+rax*1+0x2e],ch
 1022519:	add    BYTE PTR [rbp+0x0],al
 102251c:	pop    rax
 102251d:	add    BYTE PTR [rbp+0x0],al
 1022520:	add    BYTE PTR [rax],al
 1022522:	add    BYTE PTR [rax],al
 1022524:	rex.WX add BYTE PTR [rip+0x50000100],dl        # 0x5102262b
 102252b:	add    BYTE PTR [rdx+0x0],dh
 102252e:	outs   dx,DWORD PTR ds:[rsi]
 102252f:	add    BYTE PTR [rax+rax*1+0x75],ah
 1022533:	add    BYTE PTR [rbx+0x0],ah
 1022536:	je     0x1022538
 1022538:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 102253c:	ins    DWORD PTR es:[rdi],dx
 102253d:	add    BYTE PTR [rbp+0x0],ah
 1022540:	add    BYTE PTR [rax],al
 1022542:	add    BYTE PTR [rax],al
 1022544:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1022548:	movsxd eax,DWORD PTR [rax]
 102254a:	jb     0x102254c
 102254c:	outs   dx,DWORD PTR ds:[rsi]
 102254d:	add    BYTE PTR [rbx+0x0],dh
 1022550:	outs   dx,DWORD PTR ds:[rsi]
 1022551:	add    BYTE PTR [rsi+0x0],ah
 1022554:	je     0x1022556
 1022556:	and    BYTE PTR [rax],al
 1022558:	push   rbx
 1022559:	add    BYTE PTR [rcx+0x0],dl
 102255c:	rex.WR add BYTE PTR [rax],r12b
 102255f:	add    BYTE PTR [rbx+0x0],dl
 1022562:	add    BYTE PTR gs:[rdx+0x0],dh
 1022566:	jbe    0x1022568
 1022568:	add    BYTE PTR gs:[rdx+0x0],dh
 102256c:	add    BYTE PTR [rax],al
 102256e:	add    BYTE PTR [rax],al
 1022570:	add    BYTE PTR ds:[rip+0x50000100],cl        # 0x51022677
 1022577:	add    BYTE PTR [rdx+0x0],dh
 102257a:	outs   dx,DWORD PTR ds:[rsi]
 102257b:	add    BYTE PTR [rax+rax*1+0x75],ah
 102257f:	add    BYTE PTR [rbx+0x0],ah
 1022582:	je     0x1022584
 1022584:	push   rsi
 1022585:	add    BYTE PTR [rbp+0x0],ah
 1022588:	jb     0x102258a
 102258a:	jae    0x102258c
 102258c:	imul   eax,DWORD PTR [rax],0x6e006f
 1022592:	add    BYTE PTR [rax],al
 1022594:	xor    DWORD PTR [rax],eax
 1022596:	xor    DWORD PTR [rax],eax
 1022598:	add    BYTE PTR cs:[rax],dh
 102259b:	add    BYTE PTR [rsi],ch
 102259d:	add    BYTE PTR [rdx],dh
 102259f:	add    BYTE PTR [rcx],dh
 10225a1:	add    BYTE PTR [rax],dh
 10225a3:	add    BYTE PTR [rax],dh
 10225a5:	add    BYTE PTR [rsi],ch
 10225a7:	add    BYTE PTR [rsi],dh
 10225a9:	add    BYTE PTR [rax],dh
 10225ab:	add    BYTE PTR [rax],al
 10225ad:	add    BYTE PTR [rax],al
 10225af:	add    BYTE PTR [rax+rax*1+0x0],al
 10225b3:	add    BYTE PTR [rcx],al
 10225b5:	add    BYTE PTR [rsi+0x0],dl
 10225b8:	(bad)  
 10225b9:	add    BYTE PTR [rdx+0x0],dh
 10225bc:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10225c0:	ins    BYTE PTR es:[rdi],dx
 10225c1:	add    BYTE PTR [rbp+0x0],ah
 10225c4:	rex.WB add BYTE PTR [r14+0x0],bpl
 10225c8:	data16 add BYTE PTR [rdi+0x0],ch
 10225cc:	add    BYTE PTR [rax],al
 10225ce:	add    BYTE PTR [rax],al
 10225d0:	and    al,0x0
 10225d2:	add    al,0x0
 10225d4:	add    BYTE PTR [rax],al
 10225d6:	push   rsp
 10225d7:	add    BYTE PTR [rdx+0x0],dh
 10225da:	(bad)  
 10225db:	add    BYTE PTR [rsi+0x0],ch
 10225de:	jae    0x10225e0
 10225e0:	ins    BYTE PTR es:[rdi],dx
 10225e1:	add    BYTE PTR [rcx+0x0],ah
 10225e4:	je     0x10225e6
 10225e6:	imul   eax,DWORD PTR [rax],0x6e006f
 10225ec:	add    BYTE PTR [rax],al
 10225ee:	add    BYTE PTR [rax],al
 10225f0:	or     DWORD PTR [rax+rsi*4],eax
 10225f3:	add    al,0x3c
 10225f5:	(bad)  
 10225f6:	jae    0x102266b
 10225f8:	gs ins DWORD PTR es:[rdi],dx
 10225fa:	(bad)  
 10225fb:	ins    BYTE PTR es:[rdi],dx
 10225fc:	jns    0x102261e
 10225fe:	js     0x102266d
 1022600:	ins    BYTE PTR es:[rdi],dx
 1022601:	outs   dx,BYTE PTR ds:[rsi]
 1022602:	jae    0x1022641
 1022604:	and    dh,BYTE PTR [rbp+0x72]
 1022607:	outs   dx,BYTE PTR ds:[rsi]
 1022608:	cmp    dh,BYTE PTR [rbx+0x63]
 102260b:	push   0x73616d65
 1022610:	sub    eax,0x7263696d
 1022615:	outs   dx,DWORD PTR ds:[rsi]
 1022616:	jae    0x1022687
 1022618:	data16 je 0x1022648
 102261b:	movsxd ebp,DWORD PTR [rdi+0x6d]
 102261e:	cmp    ah,BYTE PTR [rcx+0x73]
 1022621:	ins    DWORD PTR es:[rdi],dx
 1022622:	cs jbe 0x1022656
 1022625:	and    ah,BYTE PTR [rax]
 1022627:	ins    DWORD PTR es:[rdi],dx
 1022628:	(bad)  
 1022629:	outs   dx,BYTE PTR ds:[rsi]
 102262a:	imul   esp,DWORD PTR [rsi+0x65],0x65567473
 1022631:	jb     0x10226a6
 1022633:	imul   ebp,DWORD PTR [rdi+0x6e],0x2e31223d
 102263a:	xor    BYTE PTR [rdx],ah
 102263c:	ds or  eax,0x3c20200a
 1022642:	je     0x10226b6
 1022644:	jne    0x10226b9
 1022646:	je     0x1022691
 1022648:	outs   dx,BYTE PTR ds:[rsi]
 1022649:	outs   dx,WORD PTR ds:[rsi]
 102264b:	and    BYTE PTR [rax+0x6d],bh
 102264e:	ins    BYTE PTR es:[rdi],dx
 102264f:	outs   dx,BYTE PTR ds:[rsi]
 1022650:	jae    0x102268f
 1022652:	and    dh,BYTE PTR [rbp+0x72]
 1022655:	outs   dx,BYTE PTR ds:[rsi]
 1022656:	cmp    dh,BYTE PTR [rbx+0x63]
 1022659:	push   0x73616d65
 102265e:	sub    eax,0x7263696d
 1022663:	outs   dx,DWORD PTR ds:[rsi]
 1022664:	jae    0x10226d5
 1022666:	data16 je 0x1022696
 1022669:	movsxd ebp,DWORD PTR [rdi+0x6d]
 102266c:	cmp    ah,BYTE PTR [rcx+0x73]
 102266f:	ins    DWORD PTR es:[rdi],dx
 1022670:	cs jbe 0x10226a6
 1022673:	and    bh,BYTE PTR [rsi]
 1022675:	or     eax,0x2020200a
 102267a:	and    BYTE PTR [rbx+rsi*2],bh
 102267d:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1022681:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 1022689:	and    BYTE PTR [rax],ah
 102268b:	and    BYTE PTR [rax],ah
 102268d:	cmp    al,0x72
 102268f:	gs jno 0x1022707
 1022692:	gs jae 0x1022709
 1022695:	gs fs push rax
 1022698:	jb     0x1022703
 102269a:	jbe    0x1022705
 102269c:	ins    BYTE PTR es:[rdi],dx
 102269d:	gs addr32 gs jae 0x10226e0
 10226a2:	or     eax,0x2020200a
 10226a7:	and    BYTE PTR [rax],ah
 10226a9:	and    BYTE PTR [rax],ah
 10226ab:	and    BYTE PTR [rdx+rsi*2],bh
 10226ae:	gs jno 0x1022726
 10226b1:	gs jae 0x1022728
 10226b4:	gs fs rex.RB js 0x102271e
 10226b9:	movsxd esi,DWORD PTR [rbp+0x74]
 10226bc:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 10226c3:	ins    BYTE PTR es:[rdi],dx
 10226c4:	and    BYTE PTR [rbp+riz*2+0x76],ch
 10226c8:	gs ins BYTE PTR es:[rdi],dx
 10226ca:	cmp    eax,0x49736122
 10226cf:	outs   dx,BYTE PTR ds:[rsi]
 10226d0:	jbe    0x1022741
 10226d2:	imul   esp,DWORD PTR [rbp+0x72],0x22
 10226d6:	and    BYTE PTR [rbp+0x69],dh
 10226d9:	movsxd esp,DWORD PTR [r11+0x65]
 10226dd:	jae    0x1022752
 10226df:	cmp    eax,0x6c616622
 10226e4:	jae    0x102274b
 10226e6:	and    bh,BYTE PTR [rsi]
 10226e8:	cmp    al,0x2f
 10226ea:	jb     0x1022751
 10226ec:	jno    0x1022763
 10226ee:	gs jae 0x1022765
 10226f1:	gs fs rex.RB js 0x102275b
 10226f6:	movsxd esi,DWORD PTR [rbp+0x74]
 10226f9:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 1022700:	ins    BYTE PTR es:[rdi],dx
 1022701:	ds or  eax,0x2020200a
 1022707:	and    BYTE PTR [rax],ah
 1022709:	and    BYTE PTR [rdi+rbp*1],bh
 102270c:	jb     0x1022773
 102270e:	jno    0x1022785
 1022710:	gs jae 0x1022787
 1022713:	gs fs push rax
 1022716:	jb     0x1022781
 1022718:	jbe    0x1022783
 102271a:	ins    BYTE PTR es:[rdi],dx
 102271b:	gs addr32 gs jae 0x102275e
 1022720:	or     eax,0x2020200a
 1022725:	and    BYTE PTR [rdi+rbp*1],bh
 1022728:	jae    0x102278f
 102272a:	movsxd esi,DWORD PTR [rbp+0x72]
 102272d:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 1022735:	cmp    al,0x2f
 1022737:	je     0x10227ab
 1022739:	jne    0x10227ae
 102273b:	je     0x1022786
 102273d:	outs   dx,BYTE PTR ds:[rsi]
 102273e:	outs   dx,WORD PTR ds:[rsi]
 1022740:	ds or  eax,0x612f3c0a
 1022746:	jae    0x10227bb
 1022748:	gs ins DWORD PTR es:[rdi],dx
 102274a:	(bad)  
 102274b:	ins    BYTE PTR es:[rdi],dx
 102274c:	jns    0x102278c
 102274e:	push   rax
 102274f:	rex.B

Disassembly of section .reloc:

0000000001023000 <.reloc>:
 1023000:	add    BYTE PTR [rax],dl
 1023002:	add    BYTE PTR [rax],al
 1023004:	sbb    BYTE PTR [rax],al
 1023006:	add    BYTE PTR [rax],al
 1023008:	call   0xfffffffff9a920b3
 102300d:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 102300e:	add    BYTE PTR [rdi-0x58ef58f8],ah
 1023014:	sub    BYTE PTR [rdi+0x2000a730],ah
 102301a:	add    BYTE PTR [rax],al
 102301c:	sub    BYTE PTR [rax],al
 102301e:	add    BYTE PTR [rax],al
 1023020:	xor    BYTE PTR [rcx-0x5ebf5ec8],ah
 1023026:	movabs rax,ds:0xa1c0a1b8a1b0a1a8
 1023030:	enter  0xd0a1,0xa1
 1023034:	fsub   DWORD PTR [rcx-0x5e175e20]
 102303a:	lock movabs eax,ds:0x30000000a1f8
 1023044:	and    al,0x0
 1023046:	add    BYTE PTR [rax],al
 1023048:	shl    BYTE PTR [rbp-0x5a1f5a28],1
 102304e:	push   rax
 102304f:	scas   eax,DWORD PTR es:[rdi]
 1023050:	pop    rax
 1023051:	scas   eax,DWORD PTR es:[rdi]
 1023052:	(bad)  
 1023053:	scas   eax,DWORD PTR es:[rdi]
 1023054:	push   0x78af70af
 1023059:	scas   eax,DWORD PTR es:[rdi]
 102305a:	sub    BYTE PTR [rdi-0x506f5078],0x98
 1023061:	scas   eax,DWORD PTR es:[rdi]
 1023062:	movabs al,ds:0x6400004000af
 102306b:	add    BYTE PTR [rax],ch
 102306d:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 102306e:	cmp    BYTE PTR [rax+rcx*2+0x68a458a4],ah
 1023075:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1023076:	js     0x102301c
 1023078:	mov    BYTE PTR [rax+rbx*4-0x475b575c],ah
 102307f:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1023080:	enter  0xd8a4,0xa4
 1023084:	call   0xffffffff91a7292d
 1023089:	stos   DWORD PTR es:[rdi],eax
 102308a:	cwde   
 102308b:	stos   DWORD PTR es:[rdi],eax
 102308c:	movabs al,ds:0xc0abb8abb0aba8ab
 1023095:	stos   DWORD PTR es:[rdi],eax
 1023096:	enter  0xd0ab,0xab
 102309a:	fsubr  DWORD PTR [rbx-0x54175420]
 10230a0:	lock stos DWORD PTR es:[rdi],eax
 10230a2:	clc    
 10230a3:	stos   DWORD PTR es:[rdi],eax
 10230a4:	add    BYTE PTR [rax+rcx*1+0x18ac10ac],ch
 10230ab:	lods   al,BYTE PTR ds:[rsi]
 10230ac:	and    BYTE PTR [rax+rbp*1+0x38ac30ac],ch
 10230b3:	lods   al,BYTE PTR ds:[rsi]
 10230b4:	lods   al,BYTE PTR ds:[rsi]
 10230b6:	rex.W lods al,BYTE PTR ds:[rsi]
 10230b8:	push   rax
 10230b9:	lods   al,BYTE PTR ds:[rsi]
 10230ba:	pop    rax
 10230bb:	lods   al,BYTE PTR ds:[rsi]
 10230bc:	(bad)  
 10230bd:	lods   al,BYTE PTR ds:[rsi]
 10230be:	push   0x78ac70ac
 10230c3:	lods   al,BYTE PTR ds:[rsi]
 10230c4:	sub    BYTE PTR [rax+rax*1+0x1b00000],0x0
 10230cc:	add    BYTE PTR [rax],r8b
 10230cf:	add    BYTE PTR [rax],al
 10230d1:	movabs eax,ds:0xa168a140a138a130
 10230da:	nop
 10230db:	movabs eax,ds:0xa1b0a1a8a1a0a198
 10230e4:	shl    BYTE PTR [rcx-0x5def5df8],0x18
 10230eb:	movabs ds:0xa250a248a240a238,al
 10230f4:	pop    rax
 10230f5:	movabs ds:0xa278a270a268a260,al
 10230fe:	and    BYTE PTR [rdx-0x5d6f5d78],0xa0
 1023105:	movabs ds:0xa2c0a2b0,al
	...
