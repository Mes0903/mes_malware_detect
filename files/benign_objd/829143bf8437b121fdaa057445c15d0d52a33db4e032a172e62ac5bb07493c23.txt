
829143bf8437b121fdaa057445c15d0d52a33db4e032a172e62ac5bb07493c23.exe:     file format pei-x86-64


Disassembly of section .text:

0000000000401000 <_mainCRTStartup-0x1000>:
  401000:	sub    rsp,0x20
  401004:	fnstcw WORD PTR [rsp]
  401007:	or     WORD PTR [rsp],0x300
  40100d:	fldcw  WORD PTR [rsp]
  401010:	shr    rsp,0x4
  401014:	shl    rsp,0x4
  401018:	cld    
  401019:	call   4045c9 <ExpandFileName+0x54>
  40101e:	ret    
  40101f:	nop
  401020:	push   rbp
  401021:	mov    rbp,rsp
  401024:	sub    rsp,0x50
  401028:	mov    QWORD PTR [rbp+0x10],rcx
  40102c:	movsxd rcx,DWORD PTR [rbp+0x10]
  401030:	call   405720 <atexit+0x37>
  401035:	mov    QWORD PTR [rbp-0x10],rax
  401039:	mov    rax,QWORD PTR [rbp-0x10]
  40103d:	mov    QWORD PTR [rbp-0x8],rax
  401041:	movsxd r8,DWORD PTR [rbp+0x10]
  401045:	xor    edx,edx
  401047:	mov    rcx,QWORD PTR [rbp-0x8]
  40104b:	call   405860 <fclose+0x4a>
  401050:	mov    rax,QWORD PTR [rbp-0x8]
  401054:	add    rsp,0x50
  401058:	leave  
  401059:	ret    
  40105a:	push   rbp
  40105b:	mov    rbp,rsp
  40105e:	sub    rsp,0x60
  401062:	mov    QWORD PTR [rbp+0x10],rcx
  401066:	mov    rdx,0x2e
  40106d:	mov    rcx,QWORD PTR [rbp+0x10]
  401071:	call   40b170 <_setlocale+0xc64>
  401076:	mov    QWORD PTR [rbp-0x10],rax
  40107a:	mov    rax,QWORD PTR [rbp-0x10]
  40107e:	mov    QWORD PTR [rbp-0x8],rax
  401082:	cmp    QWORD PTR [rbp-0x8],0x0
  401087:	jne    40108d <_mainCRTStartup-0xf73>
  401089:	xor    eax,eax
  40108b:	jmp    4010c7 <_mainCRTStartup-0xf39>
  40108d:	add    QWORD PTR [rbp-0x8],0x1
  401092:	mov    r8,0x3
  401099:	lea    rdx,ds:0x413323
  4010a1:	mov    rcx,QWORD PTR [rbp-0x8]
  4010a5:	call   40b0c0 <_setlocale+0xbb4>
  4010aa:	mov    DWORD PTR [rbp-0x14],eax
  4010ad:	mov    eax,DWORD PTR [rbp-0x14]
  4010b0:	or     eax,eax
  4010b2:	jne    4010c5 <_mainCRTStartup-0xf3b>
  4010b4:	mov    rax,QWORD PTR [rbp-0x8]
  4010b8:	cmp    BYTE PTR [rax+0x3],0x0
  4010bc:	jne    4010c5 <_mainCRTStartup-0xf3b>
  4010be:	mov    eax,0x1
  4010c3:	jmp    4010c7 <_mainCRTStartup-0xf39>
  4010c5:	xor    eax,eax
  4010c7:	add    rsp,0x60
  4010cb:	leave  
  4010cc:	ret    
  4010cd:	push   rbp
  4010ce:	mov    rbp,rsp
  4010d1:	sub    rsp,0x30
  4010d5:	mov    QWORD PTR [rbp+0x10],rcx
  4010d9:	mov    rdx,QWORD PTR [rbp+0x10]
  4010dd:	lea    rcx,ds:0x413304
  4010e5:	call   40fc5d <WriteDouble+0x966>
  4010ea:	add    rsp,0x30
  4010ee:	leave  
  4010ef:	ret    
  4010f0:	push   rbp
  4010f1:	mov    rbp,rsp
  4010f4:	sub    rsp,0x30
  4010f8:	mov    QWORD PTR [rbp+0x10],rcx
  4010fc:	mov    rdx,QWORD PTR [rbp+0x10]
  401100:	lea    rcx,ds:0x4132eb
  401108:	call   40fc5d <WriteDouble+0x966>
  40110d:	add    rsp,0x30
  401111:	leave  
  401112:	ret    
  401113:	push   rbp
  401114:	mov    rbp,rsp
  401117:	push   rbx
  401118:	sub    rsp,0x8
  40111c:	sub    rsp,0xa0
  401123:	mov    QWORD PTR [rbp+0x18],rdx
  401127:	mov    QWORD PTR [rbp+0x10],rcx
  40112b:	mov    DWORD PTR [rbp-0x34],0x0
  401132:	mov    DWORD PTR [rbp-0x14],0x1
  401139:	jmp    40118a <_mainCRTStartup-0xe76>
  40113b:	movsxd rax,DWORD PTR [rbp-0x14]
  40113f:	mov    rcx,QWORD PTR [rbp+0x18]
  401143:	mov    rax,QWORD PTR [rcx+rax*8]
  401147:	movsx  eax,BYTE PTR [rax]
  40114a:	cmp    eax,0x2f
  40114d:	je     401187 <_mainCRTStartup-0xe79>
  40114f:	cmp    eax,0x2d
  401152:	je     401187 <_mainCRTStartup-0xe79>
  401154:	lea    rdx,[rbp-0x24]
  401158:	movsxd rax,DWORD PTR [rbp-0x14]
  40115c:	mov    rcx,QWORD PTR [rbp+0x18]
  401160:	mov    rcx,QWORD PTR [rcx+rax*8]
  401164:	call   403575 <WriteFirstLinkerMember+0x102>
  401169:	mov    QWORD PTR [rbp-0x40],rax
  40116d:	mov    rax,QWORD PTR [rbp-0x40]
  401171:	mov    QWORD PTR [rbp-0x30],rax
  401175:	mov    eax,DWORD PTR [rbp-0x34]
  401178:	add    eax,DWORD PTR [rbp-0x24]
  40117b:	mov    DWORD PTR [rbp-0x34],eax
  40117e:	mov    rcx,QWORD PTR [rbp-0x30]
  401182:	call   404ef0 <_cinit+0x330>
  401187:	inc    DWORD PTR [rbp-0x14]
  40118a:	mov    eax,DWORD PTR [rbp-0x14]
  40118d:	cmp    eax,DWORD PTR [rbp+0x10]
  401190:	jl     40113b <_mainCRTStartup-0xec5>
  401192:	mov    eax,DWORD PTR [rbp-0x34]
  401195:	add    eax,0x1
  401198:	movsxd rax,eax
  40119b:	lea    rax,[rax*8+0x0]
  4011a3:	mov    ecx,eax
  4011a5:	call   401020 <_mainCRTStartup-0xfe0>
  4011aa:	mov    QWORD PTR [rbp-0x40],rax
  4011ae:	mov    rax,QWORD PTR [rbp-0x40]
  4011b2:	mov    QWORD PTR ds:0x411048,rax
  4011ba:	mov    DWORD PTR [rbp-0x14],0x1
  4011c1:	jmp    4014e1 <_mainCRTStartup-0xb1f>
  4011c6:	movsxd rax,DWORD PTR [rbp-0x14]
  4011ca:	mov    rcx,QWORD PTR [rbp+0x18]
  4011ce:	mov    rax,QWORD PTR [rcx+rax*8]
  4011d2:	movsx  eax,BYTE PTR [rax]
  4011d5:	cmp    eax,0x2f
  4011d8:	je     4011e3 <_mainCRTStartup-0xe1d>
  4011da:	cmp    eax,0x2d
  4011dd:	jne    40142f <_mainCRTStartup-0xbd1>
  4011e3:	movsxd rax,DWORD PTR [rbp-0x14]
  4011e7:	mov    rcx,QWORD PTR [rbp+0x18]
  4011eb:	mov    rax,QWORD PTR [rcx+rax*8]
  4011ef:	lea    rax,[rax+0x1]
  4011f3:	mov    QWORD PTR [rbp-0x20],rax
  4011f7:	mov    r8,0x7
  4011fe:	lea    rdx,ds:0x4132e3
  401206:	mov    rcx,QWORD PTR [rbp-0x20]
  40120a:	call   40b0c0 <_setlocale+0xbb4>
  40120f:	mov    DWORD PTR [rbp-0x44],eax
  401212:	mov    eax,DWORD PTR [rbp-0x44]
  401215:	or     eax,eax
  401217:	jne    401270 <_mainCRTStartup-0xd90>
  401219:	add    QWORD PTR [rbp-0x20],0x7
  40121e:	mov    rax,QWORD PTR [rbp-0x20]
  401222:	cmp    BYTE PTR [rax],0x3a
  401225:	je     401237 <_mainCRTStartup-0xdc9>
  401227:	mov    DWORD PTR ds:0x411038,0x1
  401232:	jmp    4014de <_mainCRTStartup-0xb22>
  401237:	add    QWORD PTR [rbp-0x20],0x1
  40123c:	mov    rax,QWORD PTR [rbp-0x20]
  401240:	mov    QWORD PTR ds:0x411058,rax
  401248:	or     DWORD PTR ds:0x413000,0x0
  401250:	je     4014de <_mainCRTStartup-0xb22>
  401256:	mov    rdx,QWORD PTR ds:0x411058
  40125e:	lea    rcx,ds:0x4132d2
  401266:	call   40fc5d <WriteDouble+0x966>
  40126b:	jmp    4014de <_mainCRTStartup-0xb22>
  401270:	mov    r8,0x4
  401277:	lea    rdx,ds:0x4132cd
  40127f:	mov    rcx,QWORD PTR [rbp-0x20]
  401283:	call   40b0c0 <_setlocale+0xbb4>
  401288:	mov    DWORD PTR [rbp-0x48],eax
  40128b:	mov    eax,DWORD PTR [rbp-0x48]
  40128e:	or     eax,eax
  401290:	jne    4012a2 <_mainCRTStartup-0xd5e>
  401292:	mov    DWORD PTR ds:0x41103c,0x1
  40129d:	jmp    4014de <_mainCRTStartup-0xb22>
  4012a2:	mov    r8,0x6
  4012a9:	lea    rdx,ds:0x4132c6
  4012b1:	mov    rcx,QWORD PTR [rbp-0x20]
  4012b5:	call   40b0c0 <_setlocale+0xbb4>
  4012ba:	mov    DWORD PTR [rbp-0x4c],eax
  4012bd:	mov    eax,DWORD PTR [rbp-0x4c]
  4012c0:	or     eax,eax
  4012c2:	jne    40131f <_mainCRTStartup-0xce1>
  4012c4:	add    QWORD PTR [rbp-0x20],0x6
  4012c9:	mov    rax,QWORD PTR [rbp-0x20]
  4012cd:	cmp    BYTE PTR [rax],0x3a
  4012d0:	je     4012e6 <_mainCRTStartup-0xd1a>
  4012d2:	lea    rcx,ds:0x4132bf
  4012da:	call   4010cd <_mainCRTStartup-0xf33>
  4012df:	xor    eax,eax
  4012e1:	jmp    401645 <_mainCRTStartup-0x9bb>
  4012e6:	add    QWORD PTR [rbp-0x20],0x1
  4012eb:	mov    rax,QWORD PTR [rbp-0x20]
  4012ef:	mov    QWORD PTR ds:0x411050,rax
  4012f7:	or     DWORD PTR ds:0x413000,0x0
  4012ff:	je     4014de <_mainCRTStartup-0xb22>
  401305:	mov    rdx,QWORD PTR ds:0x411050
  40130d:	lea    rcx,ds:0x4132b1
  401315:	call   40fc5d <WriteDouble+0x966>
  40131a:	jmp    4014de <_mainCRTStartup-0xb22>
  40131f:	mov    r8,0x3
  401326:	lea    rdx,ds:0x4132ad
  40132e:	mov    rcx,QWORD PTR [rbp-0x20]
  401332:	call   40b0c0 <_setlocale+0xbb4>
  401337:	mov    DWORD PTR [rbp-0x50],eax
  40133a:	mov    eax,DWORD PTR [rbp-0x50]
  40133d:	or     eax,eax
  40133f:	jne    4013f9 <_mainCRTStartup-0xc07>
  401345:	add    QWORD PTR [rbp-0x20],0x3
  40134a:	mov    rax,QWORD PTR [rbp-0x20]
  40134e:	cmp    BYTE PTR [rax],0x3a
  401351:	je     401367 <_mainCRTStartup-0xc99>
  401353:	lea    rcx,ds:0x4132a9
  40135b:	call   4010cd <_mainCRTStartup-0xf33>
  401360:	xor    eax,eax
  401362:	jmp    401645 <_mainCRTStartup-0x9bb>
  401367:	add    QWORD PTR [rbp-0x20],0x1
  40136c:	mov    rax,QWORD PTR [rbp-0x20]
  401370:	mov    QWORD PTR ds:0x411040,rax
  401378:	mov    rax,QWORD PTR [rbp-0x20]
  40137c:	cmp    BYTE PTR [rax],0x22
  40137f:	jne    4013d1 <_mainCRTStartup-0xc2f>
  401381:	add    QWORD PTR [rbp-0x20],0x1
  401386:	mov    rdx,0x22
  40138d:	mov    rcx,QWORD PTR [rbp-0x20]
  401391:	call   40ae40 <_setlocale+0x934>
  401396:	mov    QWORD PTR [rbp-0x60],rax
  40139a:	mov    rax,QWORD PTR [rbp-0x60]
  40139e:	mov    QWORD PTR [rbp-0x58],rax
  4013a2:	cmp    QWORD PTR [rbp-0x58],0x0
  4013a7:	jne    4013ca <_mainCRTStartup-0xc36>
  4013a9:	lea    rdx,ds:0x41327f
  4013b1:	mov    rcx,QWORD PTR ds:0x414cb0
  4013b9:	call   40fdaa <WriteDouble+0xab3>
  4013be:	mov    rcx,0xffffffffffffffff
  4013c5:	call   40467b <ExpandFileName+0x106>
  4013ca:	mov    rax,QWORD PTR [rbp-0x58]
  4013ce:	mov    BYTE PTR [rax],0x0
  4013d1:	or     DWORD PTR ds:0x413000,0x0
  4013d9:	je     4014de <_mainCRTStartup-0xb22>
  4013df:	mov    rdx,QWORD PTR ds:0x411040
  4013e7:	lea    rcx,ds:0x41326c
  4013ef:	call   40fc5d <WriteDouble+0x966>
  4013f4:	jmp    4014de <_mainCRTStartup-0xb22>
  4013f9:	mov    r8,0x7
  401400:	lea    rdx,ds:0x413264
  401408:	mov    rcx,QWORD PTR [rbp-0x20]
  40140c:	call   40b0c0 <_setlocale+0xbb4>
  401411:	mov    DWORD PTR [rbp-0x54],eax
  401414:	mov    eax,DWORD PTR [rbp-0x54]
  401417:	or     eax,eax
  401419:	jne    4014de <_mainCRTStartup-0xb22>
  40141f:	mov    DWORD PTR ds:0x413000,0x1
  40142a:	jmp    4014de <_mainCRTStartup-0xb22>
  40142f:	cmp    QWORD PTR ds:0x411040,0x0
  401438:	jne    40147b <_mainCRTStartup-0xb85>
  40143a:	movsxd rax,DWORD PTR [rbp-0x14]
  40143e:	mov    rcx,QWORD PTR [rbp+0x18]
  401442:	mov    rcx,QWORD PTR [rcx+rax*8]
  401446:	call   40105a <_mainCRTStartup-0xfa6>
  40144b:	mov    DWORD PTR [rbp-0x44],eax
  40144e:	mov    eax,DWORD PTR [rbp-0x44]
  401451:	or     eax,eax
  401453:	je     40147b <_mainCRTStartup-0xb85>
  401455:	movsxd rax,DWORD PTR [rbp-0x14]
  401459:	mov    rcx,QWORD PTR [rbp+0x18]
  40145d:	mov    rax,QWORD PTR [rcx+rax*8]
  401461:	mov    QWORD PTR ds:0x411040,rax
  401469:	mov    eax,DWORD PTR ds:0x41103c
  401470:	or     eax,eax
  401472:	jne    4014de <_mainCRTStartup-0xb22>
  401474:	call   402ed2 <WriteOneLibHeader+0x4c>
  401479:	jmp    4014de <_mainCRTStartup-0xb22>
  40147b:	lea    rdx,[rbp-0x24]
  40147f:	movsxd rax,DWORD PTR [rbp-0x14]
  401483:	mov    rcx,QWORD PTR [rbp+0x18]
  401487:	mov    rcx,QWORD PTR [rcx+rax*8]
  40148b:	call   403575 <WriteFirstLinkerMember+0x102>
  401490:	mov    QWORD PTR [rbp-0x50],rax
  401494:	mov    rax,QWORD PTR [rbp-0x50]
  401498:	mov    QWORD PTR [rbp-0x30],rax
  40149c:	mov    DWORD PTR [rbp-0x18],0x0
  4014a3:	jmp    4014d6 <_mainCRTStartup-0xb2a>
  4014a5:	mov    eax,DWORD PTR ds:0x411034
  4014ac:	mov    ecx,eax
  4014ae:	add    ecx,0x1
  4014b1:	mov    DWORD PTR ds:0x411034,ecx
  4014b8:	movsxd rax,eax
  4014bb:	mov    rcx,QWORD PTR ds:0x411048
  4014c3:	movsxd rdx,DWORD PTR [rbp-0x18]
  4014c7:	mov    rbx,QWORD PTR [rbp-0x30]
  4014cb:	mov    rdx,QWORD PTR [rbx+rdx*8]
  4014cf:	mov    QWORD PTR [rcx+rax*8],rdx
  4014d3:	inc    DWORD PTR [rbp-0x18]
  4014d6:	mov    eax,DWORD PTR [rbp-0x18]
  4014d9:	cmp    eax,DWORD PTR [rbp-0x24]
  4014dc:	jl     4014a5 <_mainCRTStartup-0xb5b>
  4014de:	inc    DWORD PTR [rbp-0x14]
  4014e1:	mov    eax,DWORD PTR [rbp-0x14]
  4014e4:	cmp    eax,DWORD PTR [rbp+0x10]
  4014e7:	jl     4011c6 <_mainCRTStartup-0xe3a>
  4014ed:	cmp    QWORD PTR ds:0x411040,0x0
  4014f6:	jne    401640 <_mainCRTStartup-0x9c0>
  4014fc:	mov    rax,QWORD PTR ds:0x411048
  401504:	cmp    QWORD PTR [rax],0x0
  401508:	je     401640 <_mainCRTStartup-0x9c0>
  40150e:	mov    rdx,0x5c
  401515:	mov    rax,QWORD PTR ds:0x411048
  40151d:	mov    rcx,QWORD PTR [rax]
  401520:	call   40b170 <_setlocale+0xc64>
  401525:	mov    QWORD PTR [rbp-0x48],rax
  401529:	mov    rax,QWORD PTR [rbp-0x48]
  40152d:	mov    QWORD PTR ds:0x411040,rax
  401535:	cmp    QWORD PTR ds:0x411040,0x0
  40153e:	jne    401555 <_mainCRTStartup-0xaab>
  401540:	mov    rax,QWORD PTR ds:0x411048
  401548:	mov    rax,QWORD PTR [rax]
  40154b:	mov    QWORD PTR ds:0x411040,rax
  401553:	jmp    40155e <_mainCRTStartup-0xaa2>
  401555:	add    QWORD PTR ds:0x411040,0x1
  40155e:	mov    rcx,QWORD PTR ds:0x411040
  401566:	call   40af00 <_setlocale+0x9f4>
  40156b:	mov    QWORD PTR [rbp-0x50],rax
  40156f:	mov    rax,QWORD PTR [rbp-0x50]
  401573:	mov    QWORD PTR ds:0x411040,rax
  40157b:	mov    rdx,0x2e
  401582:	mov    rcx,QWORD PTR ds:0x411040
  40158a:	call   40b170 <_setlocale+0xc64>
  40158f:	mov    QWORD PTR [rbp-0x58],rax
  401593:	mov    rax,QWORD PTR [rbp-0x58]
  401597:	mov    QWORD PTR [rbp-0x20],rax
  40159b:	mov    rax,QWORD PTR [rbp-0x20]
  40159f:	or     rax,rax
  4015a2:	je     4015d8 <_mainCRTStartup-0xa28>
  4015a4:	lea    rcx,[rax]
  4015a7:	call   40b060 <_setlocale+0xb54>
  4015ac:	mov    QWORD PTR [rbp-0x60],rax
  4015b0:	mov    rax,QWORD PTR [rbp-0x60]
  4015b4:	mov    rcx,0x4
  4015bb:	cmp    rax,rcx
  4015be:	jne    4015d8 <_mainCRTStartup-0xa28>
  4015c0:	add    QWORD PTR [rbp-0x20],0x1
  4015c5:	lea    rdx,ds:0x413323
  4015cd:	mov    rcx,QWORD PTR [rbp-0x20]
  4015d1:	call   40acef <_setlocale+0x7e3>
  4015d6:	jmp    401640 <_mainCRTStartup-0x9c0>
  4015d8:	mov    rcx,QWORD PTR ds:0x411040
  4015e0:	call   40b060 <_setlocale+0xb54>
  4015e5:	mov    QWORD PTR [rbp-0x68],rax
  4015e9:	mov    rax,QWORD PTR [rbp-0x68]
  4015ed:	mov    rcx,rax
  4015f0:	add    rcx,0x5
  4015f4:	call   401020 <_mainCRTStartup-0xfe0>
  4015f9:	mov    QWORD PTR [rbp-0x70],rax
  4015fd:	mov    rax,QWORD PTR [rbp-0x70]
  401601:	mov    QWORD PTR [rbp-0x20],rax
  401605:	mov    rdx,QWORD PTR ds:0x411040
  40160d:	mov    rcx,QWORD PTR [rbp-0x20]
  401611:	call   40aee0 <_setlocale+0x9d4>
  401616:	lea    rdx,ds:0x41325f
  40161e:	mov    rcx,QWORD PTR [rbp-0x20]
  401622:	call   40ae10 <_setlocale+0x904>
  401627:	mov    rcx,QWORD PTR ds:0x411040
  40162f:	call   404ef0 <_cinit+0x330>
  401634:	mov    rax,QWORD PTR [rbp-0x20]
  401638:	mov    QWORD PTR ds:0x411040,rax
  401640:	mov    eax,0x1
  401645:	add    rsp,0xa0
  40164c:	add    rsp,0x8
  401650:	pop    rbx
  401651:	leave  
  401652:	ret    
  401653:	push   rbp
  401654:	mov    rbp,rsp
  401657:	sub    rsp,0x50
  40165b:	mov    QWORD PTR [rbp+0x10],rcx
  40165f:	mov    rcx,0x18
  401666:	call   401020 <_mainCRTStartup-0xfe0>
  40166b:	mov    QWORD PTR [rbp-0x10],rax
  40166f:	mov    rax,QWORD PTR [rbp-0x10]
  401673:	mov    QWORD PTR [rbp-0x8],rax
  401677:	mov    rcx,QWORD PTR [rbp+0x10]
  40167b:	call   40b060 <_setlocale+0xb54>
  401680:	mov    QWORD PTR [rbp-0x18],rax
  401684:	mov    rax,QWORD PTR [rbp-0x18]
  401688:	mov    rcx,rax
  40168b:	add    rcx,0x1
  40168f:	call   401020 <_mainCRTStartup-0xfe0>
  401694:	mov    QWORD PTR [rbp-0x20],rax
  401698:	mov    rax,QWORD PTR [rbp-0x20]
  40169c:	mov    rcx,QWORD PTR [rbp-0x8]
  4016a0:	mov    QWORD PTR [rcx+0x8],rax
  4016a4:	mov    rdx,QWORD PTR [rbp+0x10]
  4016a8:	mov    rax,QWORD PTR [rbp-0x8]
  4016ac:	mov    rcx,QWORD PTR [rax+0x8]
  4016b0:	call   40aee0 <_setlocale+0x9d4>
  4016b5:	mov    rax,QWORD PTR [rbp-0x8]
  4016b9:	add    rsp,0x50
  4016bd:	leave  
  4016be:	ret    
  4016bf:	push   rbp
  4016c0:	mov    rbp,rsp
  4016c3:	sub    rsp,0x110
  4016ca:	mov    QWORD PTR [rbp+0x10],rcx
  4016ce:	mov    QWORD PTR [rbp-0x60],0x0
  4016d6:	mov    QWORD PTR [rbp-0x68],0x0
  4016de:	mov    rax,QWORD PTR [rbp+0x10]
  4016e2:	mov    rax,QWORD PTR [rax+0x8]
  4016e6:	mov    QWORD PTR [rbp-0x58],rax
  4016ea:	mov    DWORD PTR [rbp-0x3c],0x0
  4016f1:	mov    QWORD PTR [rbp-0x38],0x0
  4016f9:	mov    rcx,QWORD PTR [rbp-0x58]
  4016fd:	call   40b060 <_setlocale+0xb54>
  401702:	mov    QWORD PTR [rbp-0x90],rax
  401709:	mov    rax,QWORD PTR [rbp-0x90]
  401710:	sub    rax,0x1
  401714:	movsxd rax,eax
  401717:	mov    rcx,QWORD PTR [rbp-0x58]
  40171b:	cmp    BYTE PTR [rcx+rax*1],0x2f
  40171f:	jne    40173c <_mainCRTStartup-0x8c4>
  401721:	mov    rax,QWORD PTR [rbp+0x10]
  401725:	mov    rax,QWORD PTR [rax+0x10]
  401729:	mov    QWORD PTR [rbp-0x70],rax
  40172d:	mov    rax,QWORD PTR [rbp+0x10]
  401731:	mov    eax,DWORD PTR [rax+0x28]
  401734:	mov    DWORD PTR [rbp-0x7c],eax
  401737:	jmp    4018bc <_mainCRTStartup-0x744>
  40173c:	mov    DWORD PTR [rsp+0x38],0x0
  401744:	mov    QWORD PTR [rsp+0x30],0x0
  40174d:	mov    DWORD PTR [rsp+0x28],0x80
  401755:	mov    DWORD PTR [rsp+0x20],0x3
  40175d:	mov    r9,0x0
  401764:	mov    r8,0x1
  40176b:	mov    rdx,0xffffffff80000000
  401772:	mov    rcx,QWORD PTR [rbp-0x58]
  401776:	call   QWORD PTR ds:0x41611c
  40177d:	mov    QWORD PTR [rbp-0x98],rax
  401784:	mov    rax,QWORD PTR [rbp-0x98]
  40178b:	mov    QWORD PTR [rbp-0x60],rax
  40178f:	cmp    QWORD PTR [rbp-0x60],0xffffffffffffffff
  401797:	jne    4017a9 <_mainCRTStartup-0x857>
  401799:	mov    rcx,QWORD PTR [rbp-0x58]
  40179d:	call   4010f0 <_mainCRTStartup-0xf10>
  4017a2:	xor    eax,eax
  4017a4:	jmp    401aff <_mainCRTStartup-0x501>
  4017a9:	mov    r9,0x2
  4017b0:	mov    r8,0x0
  4017b7:	xor    edx,edx
  4017b9:	mov    rcx,QWORD PTR [rbp-0x60]
  4017bd:	call   QWORD PTR ds:0x416124
  4017c4:	mov    DWORD PTR [rbp-0x9c],eax
  4017ca:	mov    eax,DWORD PTR [rbp-0x9c]
  4017d0:	mov    DWORD PTR [rbp-0x7c],eax
  4017d3:	xor    r9d,r9d
  4017d6:	mov    r8,0x0
  4017dd:	xor    edx,edx
  4017df:	mov    rcx,QWORD PTR [rbp-0x60]
  4017e3:	call   QWORD PTR ds:0x416124
  4017ea:	mov    QWORD PTR [rsp+0x28],0x0
  4017f3:	mov    DWORD PTR [rsp+0x20],0x0
  4017fb:	mov    r9d,0x0
  401801:	mov    r8,0x2
  401808:	mov    rdx,0x0
  40180f:	mov    rcx,QWORD PTR [rbp-0x60]
  401813:	call   QWORD PTR ds:0x41612c
  40181a:	mov    QWORD PTR [rbp-0xa8],rax
  401821:	mov    rax,QWORD PTR [rbp-0xa8]
  401828:	mov    QWORD PTR [rbp-0x68],rax
  40182c:	or     QWORD PTR [rbp-0x68],0x0
  401831:	jne    40184e <_mainCRTStartup-0x7b2>
  401833:	mov    rcx,QWORD PTR [rbp-0x60]
  401837:	call   QWORD PTR ds:0x416134
  40183e:	mov    rcx,QWORD PTR [rbp-0x58]
  401842:	call   4010f0 <_mainCRTStartup-0xf10>
  401847:	xor    eax,eax
  401849:	jmp    401aff <_mainCRTStartup-0x501>
  40184e:	mov    DWORD PTR [rsp+0x28],0x0
  401856:	mov    QWORD PTR [rsp+0x20],0x0
  40185f:	mov    r9d,0x0
  401865:	mov    r8d,0x0
  40186b:	mov    rdx,0x4
  401872:	mov    rcx,QWORD PTR [rbp-0x68]
  401876:	call   QWORD PTR ds:0x41613c
  40187d:	mov    QWORD PTR [rbp-0xb0],rax
  401884:	mov    rax,QWORD PTR [rbp-0xb0]
  40188b:	mov    QWORD PTR [rbp-0x70],rax
  40188f:	or     QWORD PTR [rbp-0x70],0x0
  401894:	jne    4018bc <_mainCRTStartup-0x744>
  401896:	mov    rcx,QWORD PTR [rbp-0x68]
  40189a:	call   QWORD PTR ds:0x416134
  4018a1:	mov    rcx,QWORD PTR [rbp-0x60]
  4018a5:	call   QWORD PTR ds:0x416134
  4018ac:	mov    rcx,QWORD PTR [rbp-0x58]
  4018b0:	call   4010f0 <_mainCRTStartup-0xf10>
  4018b5:	xor    eax,eax
  4018b7:	jmp    401aff <_mainCRTStartup-0x501>
  4018bc:	or     DWORD PTR ds:0x413000,0x0
  4018c4:	je     4018e2 <_mainCRTStartup-0x71e>
  4018c6:	mov    rax,QWORD PTR [rbp+0x10]
  4018ca:	cmp    QWORD PTR [rax+0x10],0x0
  4018cf:	jne    4018e2 <_mainCRTStartup-0x71e>
  4018d1:	mov    rdx,QWORD PTR [rbp-0x58]
  4018d5:	lea    rcx,ds:0x41324b
  4018dd:	call   40fc5d <WriteDouble+0x966>
  4018e2:	mov    rax,QWORD PTR [rbp-0x70]
  4018e6:	mov    QWORD PTR [rbp-0x48],rax
  4018ea:	mov    rax,QWORD PTR [rbp-0x48]
  4018ee:	movzx  eax,WORD PTR [rax]
  4018f1:	cmp    eax,0x14c
  4018f6:	je     401903 <_mainCRTStartup-0x6fd>
  4018f8:	cmp    eax,0x8664
  4018fd:	jne    401aad <_mainCRTStartup-0x553>
  401903:	mov    rax,QWORD PTR [rbp-0x48]
  401907:	movzx  eax,WORD PTR [rax+0x10]
  40190b:	or     eax,eax
  40190d:	je     40191f <_mainCRTStartup-0x6e1>
  40190f:	cmp    eax,0xe0
  401914:	je     40191f <_mainCRTStartup-0x6e1>
  401916:	cmp    eax,0x1c
  401919:	jne    401aad <_mainCRTStartup-0x553>
  40191f:	mov    rax,QWORD PTR [rbp-0x70]
  401923:	mov    QWORD PTR [rbp-0x88],rax
  40192a:	mov    rax,QWORD PTR [rbp-0x88]
  401931:	mov    eax,DWORD PTR [rax+0xc]
  401934:	mov    DWORD PTR [rbp-0x4c],eax
  401937:	mov    rax,QWORD PTR [rbp-0x88]
  40193e:	mov    ecx,DWORD PTR [rax+0x8]
  401941:	add    rax,rcx
  401944:	mov    QWORD PTR [rbp-0x10],rax
  401948:	movsxd rax,DWORD PTR [rbp-0x4c]
  40194c:	imul   rax,rax,0x12
  401950:	add    rax,QWORD PTR [rbp-0x10]
  401954:	mov    QWORD PTR [rbp-0x78],rax
  401958:	mov    DWORD PTR [rbp-0x4],0x0
  40195f:	jmp    401a62 <_mainCRTStartup-0x59e>
  401964:	movsxd rax,DWORD PTR [rbp-0x4]
  401968:	imul   rax,rax,0x12
  40196c:	mov    rcx,QWORD PTR [rbp-0x10]
  401970:	mov    eax,DWORD PTR [rcx+rax*1]
  401973:	or     eax,eax
  401975:	je     4019b7 <_mainCRTStartup-0x649>
  401977:	movsxd rax,DWORD PTR [rbp-0x4]
  40197b:	imul   rax,rax,0x12
  40197f:	add    rax,QWORD PTR [rbp-0x10]
  401983:	mov    QWORD PTR [rbp-0x18],rax
  401987:	mov    r8,0xa
  40198e:	xor    edx,edx
  401990:	lea    rcx,[rbp-0x2a]
  401994:	call   405860 <fclose+0x4a>
  401999:	mov    r8,0x8
  4019a0:	mov    rdx,QWORD PTR [rbp-0x18]
  4019a4:	lea    rcx,[rbp-0x2a]
  4019a8:	call   40b070 <_setlocale+0xb64>
  4019ad:	lea    rax,[rbp-0x2a]
  4019b1:	mov    QWORD PTR [rbp-0x18],rax
  4019b5:	jmp    4019cf <_mainCRTStartup-0x631>
  4019b7:	movsxd rax,DWORD PTR [rbp-0x4]
  4019bb:	imul   rax,rax,0x12
  4019bf:	mov    rcx,QWORD PTR [rbp-0x10]
  4019c3:	mov    eax,DWORD PTR [rax+rcx*1+0x4]
  4019c7:	add    rax,QWORD PTR [rbp-0x78]
  4019cb:	mov    QWORD PTR [rbp-0x18],rax
  4019cf:	movsxd rax,DWORD PTR [rbp-0x4]
  4019d3:	imul   rax,rax,0x12
  4019d7:	add    rax,QWORD PTR [rbp-0x10]
  4019db:	cmp    BYTE PTR [rax+0x10],0x2
  4019df:	jne    401a47 <_mainCRTStartup-0x5b9>
  4019e1:	mov    ecx,DWORD PTR [rax+0x8]
  4019e4:	or     ecx,ecx
  4019e6:	je     4019ef <_mainCRTStartup-0x611>
  4019e8:	cmp    WORD PTR [rax+0xc],0x0
  4019ed:	je     401a03 <_mainCRTStartup-0x5fd>
  4019ef:	movsxd rax,DWORD PTR [rbp-0x4]
  4019f3:	imul   rax,rax,0x12
  4019f7:	mov    rcx,QWORD PTR [rbp-0x10]
  4019fb:	cmp    WORD PTR [rax+rcx*1+0xc],0x0
  401a01:	jle    401a47 <_mainCRTStartup-0x5b9>
  401a03:	mov    rcx,QWORD PTR [rbp-0x18]
  401a07:	call   401653 <_mainCRTStartup-0x9ad>
  401a0c:	mov    QWORD PTR [rbp-0x98],rax
  401a13:	mov    rax,QWORD PTR [rbp-0x98]
  401a1a:	mov    QWORD PTR [rbp-0x20],rax
  401a1e:	mov    rax,QWORD PTR [rbp-0x20]
  401a22:	mov    rcx,QWORD PTR [rbp-0x38]
  401a26:	mov    QWORD PTR [rax],rcx
  401a29:	mov    rax,QWORD PTR [rbp-0x20]
  401a2d:	mov    rcx,QWORD PTR [rbp+0x10]
  401a31:	mov    QWORD PTR [rax+0x10],rcx
  401a35:	mov    rax,QWORD PTR [rbp-0x20]
  401a39:	mov    QWORD PTR [rbp-0x38],rax
  401a3d:	inc    DWORD PTR ds:0x41100c
  401a44:	inc    DWORD PTR [rbp-0x3c]
  401a47:	mov    eax,DWORD PTR [rbp-0x4]
  401a4a:	movsxd rcx,eax
  401a4d:	imul   rcx,rcx,0x12
  401a51:	mov    rdx,QWORD PTR [rbp-0x10]
  401a55:	movzx  ecx,BYTE PTR [rcx+rdx*1+0x11]
  401a5a:	add    eax,ecx
  401a5c:	mov    DWORD PTR [rbp-0x4],eax
  401a5f:	inc    DWORD PTR [rbp-0x4]
  401a62:	mov    eax,DWORD PTR [rbp-0x4]
  401a65:	cmp    eax,DWORD PTR [rbp-0x4c]
  401a68:	jl     401964 <_mainCRTStartup-0x69c>
  401a6e:	mov    ecx,DWORD PTR [rbp-0x7c]
  401a71:	call   401020 <_mainCRTStartup-0xfe0>
  401a76:	mov    QWORD PTR [rbp-0x98],rax
  401a7d:	mov    rax,QWORD PTR [rbp-0x98]
  401a84:	mov    rcx,QWORD PTR [rbp+0x10]
  401a88:	mov    QWORD PTR [rcx+0x10],rax
  401a8c:	movsxd r8,DWORD PTR [rbp-0x7c]
  401a90:	mov    rdx,QWORD PTR [rbp-0x70]
  401a94:	mov    rax,QWORD PTR [rbp+0x10]
  401a98:	mov    rcx,QWORD PTR [rax+0x10]
  401a9c:	call   4057a0 <fabs+0x10>
  401aa1:	mov    rax,QWORD PTR [rbp+0x10]
  401aa5:	mov    ecx,DWORD PTR [rbp-0x7c]
  401aa8:	mov    DWORD PTR [rax+0x28],ecx
  401aab:	jmp    401abe <_mainCRTStartup-0x542>
  401aad:	mov    rdx,QWORD PTR [rbp-0x58]
  401ab1:	lea    rcx,ds:0x41322d
  401ab9:	call   40fc5d <WriteDouble+0x966>
  401abe:	cmp    QWORD PTR [rbp-0x68],0x0
  401ac3:	je     401ae6 <_mainCRTStartup-0x51a>
  401ac5:	mov    rcx,QWORD PTR [rbp-0x70]
  401ac9:	call   QWORD PTR ds:0x416144
  401ad0:	mov    rcx,QWORD PTR [rbp-0x68]
  401ad4:	call   QWORD PTR ds:0x416134
  401adb:	mov    rcx,QWORD PTR [rbp-0x60]
  401adf:	call   QWORD PTR ds:0x416134
  401ae6:	mov    rax,QWORD PTR [rbp+0x10]
  401aea:	mov    rcx,QWORD PTR [rbp-0x38]
  401aee:	mov    QWORD PTR [rax+0x18],rcx
  401af2:	mov    rax,QWORD PTR [rbp+0x10]
  401af6:	mov    ecx,DWORD PTR [rbp-0x3c]
  401af9:	mov    DWORD PTR [rax+0x20],ecx
  401afc:	mov    eax,DWORD PTR [rbp-0x3c]
  401aff:	add    rsp,0x110
  401b06:	leave  
  401b07:	ret    
  401b08:	push   rbp
  401b09:	mov    rbp,rsp
  401b0c:	sub    rsp,0x170
  401b13:	mov    QWORD PTR [rbp+0x10],rcx
  401b17:	mov    rax,QWORD PTR ds:0x411024
  401b1f:	mov    QWORD PTR [rbp-0x8],rax
  401b23:	mov    r8,0xff
  401b2a:	mov    rdx,QWORD PTR [rbp+0x10]
  401b2e:	lea    rcx,[rbp-0x108]
  401b35:	call   40b070 <_setlocale+0xb64>
  401b3a:	mov    BYTE PTR [rbp-0x9],0x0
  401b3e:	lea    rcx,[rbp-0x108]
  401b45:	call   40b060 <_setlocale+0xb54>
  401b4a:	mov    QWORD PTR [rbp-0x118],rax
  401b51:	mov    rax,QWORD PTR [rbp-0x118]
  401b58:	sub    rax,0x1
  401b5c:	movsxd rax,eax
  401b5f:	cmp    BYTE PTR [rbp+rax*1-0x108],0x2f
  401b67:	jne    401b92 <_mainCRTStartup-0x46e>
  401b69:	lea    rcx,[rbp-0x108]
  401b70:	call   40b060 <_setlocale+0xb54>
  401b75:	mov    QWORD PTR [rbp-0x120],rax
  401b7c:	mov    rax,QWORD PTR [rbp-0x120]
  401b83:	sub    rax,0x1
  401b87:	movsxd rax,eax
  401b8a:	mov    BYTE PTR [rbp+rax*1-0x108],0x0
  401b92:	lea    rcx,[rbp-0x108]
  401b99:	call   40b060 <_setlocale+0xb54>
  401b9e:	mov    QWORD PTR [rbp-0x128],rax
  401ba5:	mov    rax,QWORD PTR [rbp-0x128]
  401bac:	mov    DWORD PTR [rbp-0x10c],eax
  401bb2:	jmp    401bf0 <_mainCRTStartup-0x410>
  401bb4:	movsxd r8,DWORD PTR [rbp-0x10c]
  401bbb:	lea    rdx,[rbp-0x108]
  401bc2:	mov    rax,QWORD PTR [rbp-0x8]
  401bc6:	mov    rcx,QWORD PTR [rax+0x8]
  401bca:	call   40b0c0 <_setlocale+0xbb4>
  401bcf:	mov    DWORD PTR [rbp-0x12c],eax
  401bd5:	mov    eax,DWORD PTR [rbp-0x12c]
  401bdb:	or     eax,eax
  401bdd:	jne    401be5 <_mainCRTStartup-0x41b>
  401bdf:	mov    rax,QWORD PTR [rbp-0x8]
  401be3:	jmp    401bfe <_mainCRTStartup-0x402>
  401be5:	mov    rax,QWORD PTR [rbp-0x8]
  401be9:	mov    rax,QWORD PTR [rax]
  401bec:	mov    QWORD PTR [rbp-0x8],rax
  401bf0:	or     QWORD PTR [rbp-0x8],0x0
  401bf5:	jne    401bb4 <_mainCRTStartup-0x44c>
  401bf7:	mov    rax,0x0
  401bfe:	add    rsp,0x170
  401c05:	leave  
  401c06:	ret    
  401c07:	push   rbp
  401c08:	mov    rbp,rsp
  401c0b:	sub    rsp,0xa0
  401c12:	mov    QWORD PTR [rbp+0x20],r8
  401c16:	mov    QWORD PTR [rbp+0x18],rdx
  401c1a:	mov    QWORD PTR [rbp+0x10],rcx
  401c1e:	mov    DWORD PTR [rbp-0x2c],0x0
  401c25:	mov    rdx,0x2e
  401c2c:	mov    rcx,QWORD PTR [rbp+0x10]
  401c30:	call   40b170 <_setlocale+0xc64>
  401c35:	mov    QWORD PTR [rbp-0x38],rax
  401c39:	mov    rax,QWORD PTR [rbp-0x38]
  401c3d:	mov    QWORD PTR [rbp-0x28],rax
  401c41:	cmp    QWORD PTR [rbp-0x28],0x0
  401c46:	jne    401c4f <_mainCRTStartup-0x3b1>
  401c48:	xor    eax,eax
  401c4a:	jmp    401e26 <_mainCRTStartup-0x1da>
  401c4f:	add    QWORD PTR [rbp-0x28],0x1
  401c54:	mov    rax,QWORD PTR [rbp-0x28]
  401c58:	movsx  eax,BYTE PTR [rax]
  401c5b:	cmp    eax,0x6f
  401c5e:	je     401c6c <_mainCRTStartup-0x394>
  401c60:	cmp    eax,0x4f
  401c63:	je     401c6c <_mainCRTStartup-0x394>
  401c65:	xor    eax,eax
  401c67:	jmp    401e26 <_mainCRTStartup-0x1da>
  401c6c:	mov    rcx,QWORD PTR [rbp+0x10]
  401c70:	call   401b08 <_mainCRTStartup-0x4f8>
  401c75:	mov    QWORD PTR [rbp-0x40],rax
  401c79:	mov    rax,QWORD PTR [rbp-0x40]
  401c7d:	mov    QWORD PTR [rbp-0x18],rax
  401c81:	cmp    QWORD PTR [rbp-0x18],0x0
  401c86:	je     401d34 <_mainCRTStartup-0x2cc>
  401c8c:	mov    rdx,QWORD PTR [rbp+0x10]
  401c90:	lea    rcx,ds:0x41321f
  401c98:	call   40fc5d <WriteDouble+0x966>
  401c9d:	mov    rax,QWORD PTR [rbp-0x18]
  401ca1:	mov    rcx,QWORD PTR [rax+0x10]
  401ca5:	call   404ef0 <_cinit+0x330>
  401caa:	mov    rax,QWORD PTR [rbp-0x18]
  401cae:	mov    rcx,QWORD PTR [rax+0x8]
  401cb2:	call   404ef0 <_cinit+0x330>
  401cb7:	mov    rax,QWORD PTR [rbp-0x18]
  401cbb:	mov    rax,QWORD PTR [rax+0x18]
  401cbf:	mov    QWORD PTR [rbp-0x8],rax
  401cc3:	mov    rax,QWORD PTR [rbp-0x18]
  401cc7:	mov    rax,QWORD PTR [rax]
  401cca:	mov    QWORD PTR [rbp-0x10],rax
  401cce:	dec    DWORD PTR ds:0x411008
  401cd5:	jmp    401d07 <_mainCRTStartup-0x2f9>
  401cd7:	mov    rax,QWORD PTR [rbp-0x8]
  401cdb:	mov    rcx,QWORD PTR [rax+0x8]
  401cdf:	call   404ef0 <_cinit+0x330>
  401ce4:	mov    rax,QWORD PTR [rbp-0x8]
  401ce8:	mov    rax,QWORD PTR [rax]
  401ceb:	mov    QWORD PTR [rbp-0x20],rax
  401cef:	mov    rcx,QWORD PTR [rbp-0x8]
  401cf3:	call   404ef0 <_cinit+0x330>
  401cf8:	dec    DWORD PTR ds:0x41100c
  401cff:	mov    rax,QWORD PTR [rbp-0x20]
  401d03:	mov    QWORD PTR [rbp-0x8],rax
  401d07:	or     QWORD PTR [rbp-0x8],0x0
  401d0c:	jne    401cd7 <_mainCRTStartup-0x329>
  401d0e:	mov    r8,0x30
  401d15:	xor    edx,edx
  401d17:	mov    rcx,QWORD PTR [rbp-0x18]
  401d1b:	call   405860 <fclose+0x4a>
  401d20:	mov    rax,QWORD PTR [rbp-0x18]
  401d24:	mov    rcx,QWORD PTR [rbp-0x10]
  401d28:	mov    QWORD PTR [rax],rcx
  401d2b:	mov    DWORD PTR [rbp-0x2c],0x1
  401d32:	jmp    401d4c <_mainCRTStartup-0x2b4>
  401d34:	mov    rcx,0x30
  401d3b:	call   401020 <_mainCRTStartup-0xfe0>
  401d40:	mov    QWORD PTR [rbp-0x48],rax
  401d44:	mov    rax,QWORD PTR [rbp-0x48]
  401d48:	mov    QWORD PTR [rbp-0x18],rax
  401d4c:	mov    rcx,QWORD PTR [rbp+0x10]
  401d50:	call   40b060 <_setlocale+0xb54>
  401d55:	mov    QWORD PTR [rbp-0x50],rax
  401d59:	mov    rax,QWORD PTR [rbp-0x50]
  401d5d:	mov    rcx,rax
  401d60:	add    rcx,0x1
  401d64:	call   401020 <_mainCRTStartup-0xfe0>
  401d69:	mov    QWORD PTR [rbp-0x58],rax
  401d6d:	mov    rax,QWORD PTR [rbp-0x58]
  401d71:	mov    rcx,QWORD PTR [rbp-0x18]
  401d75:	mov    QWORD PTR [rcx+0x8],rax
  401d79:	mov    rdx,QWORD PTR [rbp+0x10]
  401d7d:	mov    rax,QWORD PTR [rbp-0x18]
  401d81:	mov    rcx,QWORD PTR [rax+0x8]
  401d85:	call   40aee0 <_setlocale+0x9d4>
  401d8a:	or     DWORD PTR [rbp+0x18],0x0
  401d8e:	je     401da6 <_mainCRTStartup-0x25a>
  401d90:	mov    rax,QWORD PTR [rbp-0x18]
  401d94:	mov    ecx,DWORD PTR [rbp+0x18]
  401d97:	mov    DWORD PTR [rax+0x28],ecx
  401d9a:	mov    rax,QWORD PTR [rbp-0x18]
  401d9e:	mov    rcx,QWORD PTR [rbp+0x20]
  401da2:	mov    QWORD PTR [rax+0x10],rcx
  401da6:	mov    rcx,QWORD PTR [rbp-0x18]
  401daa:	call   4016bf <_mainCRTStartup-0x941>
  401daf:	mov    DWORD PTR [rbp-0x5c],eax
  401db2:	mov    eax,DWORD PTR [rbp-0x5c]
  401db5:	or     eax,eax
  401db7:	jne    401dc6 <_mainCRTStartup-0x23a>
  401db9:	mov    rcx,QWORD PTR [rbp-0x18]
  401dbd:	call   404ef0 <_cinit+0x330>
  401dc2:	xor    eax,eax
  401dc4:	jmp    401e26 <_mainCRTStartup-0x1da>
  401dc6:	inc    DWORD PTR ds:0x411008
  401dcd:	or     DWORD PTR [rbp-0x2c],0x0
  401dd1:	je     401dda <_mainCRTStartup-0x226>
  401dd3:	mov    eax,0x1
  401dd8:	jmp    401e26 <_mainCRTStartup-0x1da>
  401dda:	cmp    QWORD PTR ds:0x411024,0x0
  401de3:	jne    401df3 <_mainCRTStartup-0x20d>
  401de5:	mov    rax,QWORD PTR [rbp-0x18]
  401de9:	mov    QWORD PTR ds:0x411024,rax
  401df1:	jmp    401e21 <_mainCRTStartup-0x1df>
  401df3:	mov    rax,QWORD PTR ds:0x411024
  401dfb:	mov    QWORD PTR [rbp-0x10],rax
  401dff:	jmp    401e0c <_mainCRTStartup-0x1f4>
  401e01:	mov    rax,QWORD PTR [rbp-0x10]
  401e05:	mov    rax,QWORD PTR [rax]
  401e08:	mov    QWORD PTR [rbp-0x10],rax
  401e0c:	mov    rax,QWORD PTR [rbp-0x10]
  401e10:	or     QWORD PTR [rax],0x0
  401e14:	jne    401e01 <_mainCRTStartup-0x1ff>
  401e16:	mov    rax,QWORD PTR [rbp-0x10]
  401e1a:	mov    rcx,QWORD PTR [rbp-0x18]
  401e1e:	mov    QWORD PTR [rax],rcx
  401e21:	mov    eax,0x1
  401e26:	add    rsp,0xa0
  401e2d:	leave  
  401e2e:	ret    
  401e2f:	push   rbp
  401e30:	mov    rbp,rsp
  401e33:	sub    rsp,0x50
  401e37:	mov    DWORD PTR [rbp-0x8],0x0
  401e3e:	mov    DWORD PTR [rbp-0x4],0x0
  401e45:	jmp    401e71 <_mainCRTStartup-0x18f>
  401e47:	mov    r8,0x0
  401e4e:	xor    edx,edx
  401e50:	movsxd rax,DWORD PTR [rbp-0x4]
  401e54:	mov    rcx,QWORD PTR ds:0x411048
  401e5c:	mov    rcx,QWORD PTR [rcx+rax*8]
  401e60:	call   401c07 <_mainCRTStartup-0x3f9>
  401e65:	mov    DWORD PTR [rbp-0xc],eax
  401e68:	mov    eax,DWORD PTR [rbp-0xc]
  401e6b:	add    DWORD PTR [rbp-0x8],eax
  401e6e:	inc    DWORD PTR [rbp-0x4]
  401e71:	mov    eax,DWORD PTR [rbp-0x4]
  401e74:	cmp    eax,DWORD PTR ds:0x411034
  401e7b:	jl     401e47 <_mainCRTStartup-0x1b9>
  401e7d:	mov    eax,DWORD PTR [rbp-0x8]
  401e80:	add    rsp,0x50
  401e84:	leave  
  401e85:	ret    
  401e86:	push   rbp
  401e87:	mov    rbp,rsp
  401e8a:	sub    rsp,0x2a0
  401e91:	mov    QWORD PTR [rbp+0x10],rcx
  401e95:	mov    rcx,QWORD PTR [rbp+0x10]
  401e99:	call   40b060 <_setlocale+0xb54>
  401e9e:	mov    QWORD PTR [rbp-0x248],rax
  401ea5:	mov    rax,QWORD PTR [rbp-0x248]
  401eac:	cmp    rax,0x1ff
  401eb2:	jbe    401ece <_mainCRTStartup-0x132>
  401eb4:	lea    rdx,ds:0x413201
  401ebc:	mov    rcx,QWORD PTR ds:0x414cb0
  401ec4:	call   40fdaa <WriteDouble+0xab3>
  401ec9:	call   403960 <WriteLib+0xfd>
  401ece:	mov    r8,0x3c
  401ed5:	mov    rdx,0x20
  401edc:	lea    rcx,[rbp-0x20c]
  401ee3:	call   405860 <fclose+0x4a>
  401ee8:	lea    rax,[rbp-0x20c]
  401eef:	mov    QWORD PTR [rbp-0x8],rax
  401ef3:	mov    DWORD PTR [rbp-0xc],0x0
  401efa:	jmp    401f23 <_mainCRTStartup-0xdd>
  401efc:	mov    rax,QWORD PTR [rbp-0x8]
  401f00:	lea    rcx,[rax+0x1]
  401f04:	mov    QWORD PTR [rbp-0x8],rcx
  401f08:	mov    rcx,QWORD PTR [rbp+0x10]
  401f0c:	lea    rdx,[rcx+0x1]
  401f10:	mov    QWORD PTR [rbp+0x10],rdx
  401f14:	mov    cl,BYTE PTR [rcx]
  401f16:	mov    BYTE PTR [rax],cl
  401f18:	inc    DWORD PTR [rbp-0xc]
  401f1b:	cmp    DWORD PTR [rbp-0xc],0xe
  401f1f:	jne    401f23 <_mainCRTStartup-0xdd>
  401f21:	jmp    401f2c <_mainCRTStartup-0xd4>
  401f23:	mov    rax,QWORD PTR [rbp+0x10]
  401f27:	cmp    BYTE PTR [rax],0x0
  401f2a:	jne    401efc <_mainCRTStartup-0x104>
  401f2c:	mov    rax,QWORD PTR [rbp+0x10]
  401f30:	cmp    BYTE PTR [rax-0x1],0x2f
  401f34:	je     401f45 <_mainCRTStartup-0xbb>
  401f36:	mov    rax,QWORD PTR [rbp-0x8]
  401f3a:	lea    rcx,[rax+0x1]
  401f3e:	mov    QWORD PTR [rbp-0x8],rcx
  401f42:	mov    BYTE PTR [rax],0x2f
  401f45:	mov    rcx,0x0
  401f4c:	call   40b4b8 <_setlocale+0xfac>
  401f51:	mov    DWORD PTR [rbp-0x24c],eax
  401f57:	mov    eax,DWORD PTR [rbp-0x24c]
  401f5d:	mov    DWORD PTR [rbp-0x23c],eax
  401f63:	mov    r8d,DWORD PTR [rbp-0x23c]
  401f6a:	lea    rdx,ds:0x4131fe
  401f72:	lea    rcx,[rbp-0x234]
  401f79:	call   40acef <_setlocale+0x7e3>
  401f7e:	lea    rax,[rbp-0x234]
  401f85:	mov    QWORD PTR [rbp+0x10],rax
  401f89:	lea    rax,[rbp-0x1fc]
  401f90:	mov    QWORD PTR [rbp-0x8],rax
  401f94:	jmp    401fb2 <_mainCRTStartup-0x4e>
  401f96:	mov    rax,QWORD PTR [rbp-0x8]
  401f9a:	lea    rcx,[rax+0x1]
  401f9e:	mov    QWORD PTR [rbp-0x8],rcx
  401fa2:	mov    rcx,QWORD PTR [rbp+0x10]
  401fa6:	lea    rdx,[rcx+0x1]
  401faa:	mov    QWORD PTR [rbp+0x10],rdx
  401fae:	mov    cl,BYTE PTR [rcx]
  401fb0:	mov    BYTE PTR [rax],cl
  401fb2:	mov    rax,QWORD PTR [rbp+0x10]
  401fb6:	cmp    BYTE PTR [rax],0x0
  401fb9:	jne    401f96 <_mainCRTStartup-0x6a>
  401fbb:	mov    BYTE PTR [rbp-0x1e4],0x30
  401fc2:	mov    BYTE PTR [rbp-0x1d2],0x60
  401fc9:	mov    BYTE PTR [rbp-0x1d1],0xa
  401fd0:	mov    BYTE PTR [rbp-0x1d0],0x0
  401fd7:	mov    rcx,QWORD PTR ds:0x41102c
  401fdf:	call   405160 <_cinit+0x5a0>
  401fe4:	mov    QWORD PTR [rbp-0x258],rax
  401feb:	mov    rax,QWORD PTR [rbp-0x258]
  401ff2:	mov    DWORD PTR [rbp-0x238],eax
  401ff8:	mov    r9,QWORD PTR ds:0x41102c

0000000000402000 <_mainCRTStartup>:
  402000:	mov    r8,0x3c
  402007:	mov    rdx,0x1
  40200e:	lea    rcx,[rbp-0x20c]
  402015:	call   405220 <_cinit+0x660>
  40201a:	mov    eax,DWORD PTR [rbp-0x238]

0000000000402020 <allocate>:
  402020:	add    rsp,0x2a0
  402027:	leave  
  402028:	ret    
  402029:	push   rbp
  40202a:	mov    rbp,rsp
  40202d:	sub    rsp,0x50
  402031:	mov    QWORD PTR [rbp+0x10],rcx
  402035:	mov    rax,QWORD PTR [rbp+0x10]
  402039:	mov    al,BYTE PTR [rax]
  40203b:	mov    BYTE PTR [rbp-0x1],al
  40203e:	mov    rax,QWORD PTR [rbp+0x10]
  402042:	mov    al,BYTE PTR [rax+0x1]
  402045:	mov    BYTE PTR [rbp-0x2],al
  402048:	mov    rax,QWORD PTR [rbp+0x10]
  40204c:	mov    al,BYTE PTR [rax+0x2]
  40204f:	mov    BYTE PTR [rbp-0x3],al
  402052:	mov    rax,QWORD PTR [rbp+0x10]
  402056:	mov    al,BYTE PTR [rax+0x3]
  402059:	.byte 0x88

000000000040205a <IsLibFile>:
  40205a:	rex.RB cld 
  40205c:	mov    r9,QWORD PTR ds:0x41102c
  402064:	mov    r8,0x4
  40206b:	mov    rdx,0x1
  402072:	lea    rcx,[rbp-0x4]
  402076:	call   405220 <_cinit+0x660>
  40207b:	add    rsp,0x50
  40207f:	leave  
  402080:	ret    
  402081:	push   rbp
  402082:	mov    rbp,rsp
  402085:	push   rbx
  402086:	sub    rsp,0x8
  40208a:	sub    rsp,0x80
  402091:	mov    QWORD PTR [rbp+0x10],rcx
  402095:	mov    BYTE PTR [rbp-0x39],0x0
  402099:	mov    rcx,QWORD PTR ds:0x41102c
  4020a1:	call   405160 <_cinit+0x5a0>
  4020a6:	mov    QWORD PTR [rbp-0x48],rax
  4020aa:	mov    rax,QWORD PTR [rbp-0x48]
  4020ae:	mov    DWORD PTR [rbp-0x14],eax
  4020b1:	test   DWORD PTR [rbp-0x14],0x1
  4020b8:	je     4020dc <needsArg+0xf>
  4020ba:	mov    r9,QWORD PTR ds:0x41102c
  4020c2:	mov    r8,0x1
  4020c9:	rex.W
  4020ca:	.byte 0xc7
  4020cb:	.byte 0xc2
  4020cc:	.byte 0x1

00000000004020cd <needsArg>:
  4020cd:	add    BYTE PTR [rax],al
  4020cf:	add    BYTE PTR [rax-0x73],cl
  4020d2:	rex.WRB (bad) 
  4020d4:	call   405220 <_cinit+0x660>
  4020d9:	inc    DWORD PTR [rbp-0x14]
  4020dc:	mov    eax,DWORD PTR [rbp-0x14]
  4020df:	mov    ecx,DWORD PTR [rbp+0x10]
  4020e2:	add    ecx,0x3c
  4020e5:	sub    eax,ecx
  4020e7:	mov    DWORD PTR [rbp-0x38],eax
  4020ea:	mov    r8d,DWORD PTR [rbp-0x38]
  4020ee:	rex.W
  4020ef:	.byte 0x8d

00000000004020f0 <impossibleToOpen>:
  4020f0:	adc    al,0x25
  4020f2:	(bad)  
  4020f3:	xor    DWORD PTR [rcx+0x0],eax
  4020f6:	lea    rcx,[rbp-0x32]
  4020fa:	call   40acef <_setlocale+0x7e3>
  4020ff:	xor    r8d,r8d
  402102:	mov    eax,DWORD PTR [rbp+0x10]
  402105:	add    eax,0x30
  402108:	movsxd rdx,eax
  40210b:	mov    rcx,QWORD PTR ds:0x41102c

0000000000402113 <ParseOptions>:
  402113:	call   40507a <_cinit+0x4ba>
  402118:	lea    rcx,[rbp-0x32]
  40211c:	call   40b060 <_setlocale+0xb54>
  402121:	mov    QWORD PTR [rbp-0x50],rax
  402125:	mov    rbx,QWORD PTR [rbp-0x50]
  402129:	mov    r9,QWORD PTR ds:0x41102c
  402131:	mov    r8,rbx
  402134:	mov    rdx,0x1
  40213b:	lea    rcx,[rbp-0x32]
  40213f:	call   405220 <_cinit+0x660>
  402144:	mov    r8,0x2
  40214b:	xor    edx,edx
  40214d:	mov    rcx,QWORD PTR ds:0x41102c
  402155:	call   40507a <_cinit+0x4ba>
  40215a:	mov    eax,DWORD PTR [rbp-0x38]
  40215d:	add    rsp,0x80
  402164:	add    rsp,0x8
  402168:	pop    rbx
  402169:	leave  
  40216a:	ret    
  40216b:	push   rbp
  40216c:	mov    rbp,rsp
  40216f:	sub    rsp,0x50
  402173:	mov    rax,QWORD PTR ds:0x411024
  40217b:	mov    QWORD PTR [rbp-0x10],rax
  40217f:	xor    r8d,r8d
  402182:	movsxd rdx,DWORD PTR ds:0x411018
  40218a:	mov    rcx,QWORD PTR ds:0x41102c
  402192:	call   40507a <_cinit+0x4ba>
  402197:	jmp    4021d1 <ParseOptions+0xbe>
  402199:	mov    rax,QWORD PTR [rbp-0x10]
  40219d:	mov    rax,QWORD PTR [rax+0x18]
  4021a1:	mov    QWORD PTR [rbp-0x8],rax
  4021a5:	jmp    4021bf <ParseOptions+0xac>
  4021a7:	mov    rax,QWORD PTR [rbp-0x10]
  4021ab:	lea    rcx,[rax+0x2c]
  4021af:	call   402029 <allocate+0x9>
  4021b4:	mov    rax,QWORD PTR [rbp-0x8]
  4021b8:	mov    rax,QWORD PTR [rax]
  4021bb:	mov    QWORD PTR [rbp-0x8],rax
  4021bf:	or     QWORD PTR [rbp-0x8],0x0
  4021c4:	jne    4021a7 <ParseOptions+0x94>
  4021c6:	mov    rax,QWORD PTR [rbp-0x10]
  4021ca:	mov    rax,QWORD PTR [rax]
  4021cd:	mov    QWORD PTR [rbp-0x10],rax
  4021d1:	or     QWORD PTR [rbp-0x10],0x0
  4021d6:	jne    402199 <ParseOptions+0x86>
  4021d8:	mov    eax,0x1
  4021dd:	add    rsp,0x50
  4021e1:	leave  
  4021e2:	ret    
  4021e3:	push   rbp
  4021e4:	mov    rbp,rsp
  4021e7:	sub    rsp,0x50
  4021eb:	mov    rax,QWORD PTR ds:0x411024
  4021f3:	mov    QWORD PTR [rbp-0x8],rax
  4021f7:	xor    r8d,r8d
  4021fa:	movsxd rdx,DWORD PTR ds:0x411010
  402202:	mov    rcx,QWORD PTR ds:0x41102c
  40220a:	call   40507a <_cinit+0x4ba>
  40220f:	jmp    402245 <ParseOptions+0x132>
  402211:	mov    rax,QWORD PTR [rbp-0x8]
  402215:	mov    eax,DWORD PTR [rax+0x2c]
  402218:	mov    DWORD PTR [rbp-0xc],eax
  40221b:	mov    r9,QWORD PTR ds:0x41102c
  402223:	mov    r8,0x4
  40222a:	mov    rdx,0x1
  402231:	lea    rcx,[rbp-0xc]
  402235:	call   405220 <_cinit+0x660>
  40223a:	mov    rax,QWORD PTR [rbp-0x8]
  40223e:	mov    rax,QWORD PTR [rax]
  402241:	mov    QWORD PTR [rbp-0x8],rax
  402245:	or     QWORD PTR [rbp-0x8],0x0
  40224a:	jne    402211 <ParseOptions+0xfe>
  40224c:	mov    eax,0x1
  402251:	add    rsp,0x50
  402255:	leave  
  402256:	ret    
  402257:	push   rbp
  402258:	mov    rbp,rsp
  40225b:	sub    rsp,0x40
  40225f:	lea    rcx,ds:0x4131fb
  402267:	call   401e86 <_mainCRTStartup-0x17a>
  40226c:	mov    DWORD PTR [rbp-0x8],eax
  40226f:	mov    eax,DWORD PTR [rbp-0x8]
  402272:	mov    DWORD PTR [rbp-0x4],eax
  402275:	mov    ecx,DWORD PTR [rbp-0x4]
  402278:	call   402081 <IsLibFile+0x27>
  40227d:	mov    eax,0x1
  402282:	add    rsp,0x40
  402286:	leave  
  402287:	ret    
  402288:	push   rbp
  402289:	mov    rbp,rsp
  40228c:	sub    rsp,0x80
  402293:	mov    rax,QWORD PTR ds:0x411024
  40229b:	mov    QWORD PTR [rbp-0x10],rax
  40229f:	lea    rcx,ds:0x4131f9
  4022a7:	call   401e86 <_mainCRTStartup-0x17a>
  4022ac:	mov    DWORD PTR [rbp-0x24],eax
  4022af:	mov    eax,DWORD PTR [rbp-0x24]
  4022b2:	mov    DWORD PTR [rbp-0x20],eax
  4022b5:	mov    r9,QWORD PTR ds:0x41102c
  4022bd:	mov    r8,0x4
  4022c4:	mov    rdx,0x1
  4022cb:	lea    rcx,ds:0x411008
  4022d3:	call   405220 <_cinit+0x660>
  4022d8:	mov    DWORD PTR [rbp-0x18],0x0
  4022df:	mov    DWORD PTR [rbp-0x4],0x1
  4022e6:	mov    rcx,QWORD PTR ds:0x41102c
  4022ee:	call   405160 <_cinit+0x5a0>
  4022f3:	mov    QWORD PTR [rbp-0x30],rax
  4022f7:	mov    rax,QWORD PTR [rbp-0x30]
  4022fb:	mov    DWORD PTR [rbp-0x1c],eax
  4022fe:	jmp    40233d <ParseOptions+0x22a>
  402300:	mov    r9,QWORD PTR ds:0x41102c
  402308:	mov    r8,0x4
  40230f:	mov    rdx,0x1
  402316:	lea    rcx,[rbp-0x18]
  40231a:	call   405220 <_cinit+0x660>
  40231f:	mov    eax,DWORD PTR [rbp-0x4]
  402322:	mov    ecx,eax
  402324:	add    ecx,0x1
  402327:	mov    DWORD PTR [rbp-0x4],ecx
  40232a:	mov    rcx,QWORD PTR [rbp-0x10]
  40232e:	mov    WORD PTR [rcx+0x24],ax
  402332:	mov    rax,QWORD PTR [rbp-0x10]
  402336:	mov    rax,QWORD PTR [rax]
  402339:	mov    QWORD PTR [rbp-0x10],rax
  40233d:	or     QWORD PTR [rbp-0x10],0x0
  402342:	jne    402300 <ParseOptions+0x1ed>
  402344:	mov    r9,QWORD PTR ds:0x41102c
  40234c:	mov    r8,0x4
  402353:	mov    rdx,0x1
  40235a:	lea    rcx,ds:0x41100c
  402362:	call   405220 <_cinit+0x660>
  402367:	mov    DWORD PTR [rbp-0x4],0x0
  40236e:	jmp    4023a6 <ParseOptions+0x293>
  402370:	mov    r9,QWORD PTR ds:0x41102c
  402378:	mov    r8,0x2
  40237f:	mov    rdx,0x1
  402386:	movsxd rax,DWORD PTR [rbp-0x4]
  40238a:	mov    rcx,QWORD PTR ds:0x41101c
  402392:	mov    rax,QWORD PTR [rcx+rax*8]
  402396:	mov    rax,QWORD PTR [rax+0x10]
  40239a:	lea    rcx,[rax+0x24]
  40239e:	call   405220 <_cinit+0x660>
  4023a3:	inc    DWORD PTR [rbp-0x4]
  4023a6:	mov    eax,DWORD PTR [rbp-0x4]
  4023a9:	cmp    eax,DWORD PTR ds:0x41100c
  4023b0:	jl     402370 <ParseOptions+0x25d>
  4023b2:	mov    DWORD PTR [rbp-0x4],0x0
  4023b9:	jmp    402412 <ParseOptions+0x2ff>
  4023bb:	movsxd rax,DWORD PTR [rbp-0x4]
  4023bf:	mov    rcx,QWORD PTR ds:0x41101c
  4023c7:	mov    rax,QWORD PTR [rcx+rax*8]
  4023cb:	mov    rcx,QWORD PTR [rax+0x8]
  4023cf:	call   40b060 <_setlocale+0xb54>
  4023d4:	mov    QWORD PTR [rbp-0x38],rax
  4023d8:	mov    rax,QWORD PTR [rbp-0x38]
  4023dc:	add    rax,0x1
  4023e0:	mov    DWORD PTR [rbp-0x14],eax
  4023e3:	mov    r9,QWORD PTR ds:0x41102c
  4023eb:	movsxd r8,DWORD PTR [rbp-0x14]
  4023ef:	mov    rdx,0x1
  4023f6:	movsxd rax,DWORD PTR [rbp-0x4]
  4023fa:	mov    rcx,QWORD PTR ds:0x41101c
  402402:	mov    rax,QWORD PTR [rcx+rax*8]
  402406:	mov    rcx,QWORD PTR [rax+0x8]
  40240a:	call   405220 <_cinit+0x660>
  40240f:	inc    DWORD PTR [rbp-0x4]
  402412:	mov    eax,DWORD PTR [rbp-0x4]
  402415:	cmp    eax,DWORD PTR ds:0x41100c
  40241c:	jl     4023bb <ParseOptions+0x2a8>
  40241e:	mov    ecx,DWORD PTR [rbp-0x20]
  402421:	call   402081 <IsLibFile+0x27>
  402426:	mov    eax,DWORD PTR [rbp-0x1c]
  402429:	add    rsp,0x80
  402430:	leave  
  402431:	ret    
  402432:	push   rbp
  402433:	mov    rbp,rsp
  402436:	sub    rsp,0x40
  40243a:	mov    QWORD PTR [rbp+0x18],rdx
  40243e:	mov    QWORD PTR [rbp+0x10],rcx
  402442:	mov    rax,QWORD PTR [rbp+0x10]
  402446:	mov    rax,QWORD PTR [rax]
  402449:	mov    QWORD PTR [rbp-0x8],rax
  40244d:	mov    rax,QWORD PTR [rbp+0x18]
  402451:	mov    rax,QWORD PTR [rax]
  402454:	mov    QWORD PTR [rbp-0x10],rax
  402458:	mov    rax,QWORD PTR [rbp-0x10]
  40245c:	mov    rdx,QWORD PTR [rax+0x8]
  402460:	mov    rax,QWORD PTR [rbp-0x8]
  402464:	mov    rcx,QWORD PTR [rax+0x8]
  402468:	call   40ae60 <_setlocale+0x954>
  40246d:	add    rsp,0x40
  402471:	leave  
  402472:	ret    
  402473:	push   rbp
  402474:	mov    rbp,rsp
  402477:	push   rbx
  402478:	sub    rsp,0x8
  40247c:	sub    rsp,0x90
  402483:	mov    rax,QWORD PTR ds:0x411024
  40248b:	mov    QWORD PTR [rbp-0x28],rax
  40248f:	lea    rcx,ds:0x4131f9
  402497:	call   401e86 <_mainCRTStartup-0x17a>
  40249c:	mov    DWORD PTR [rbp-0x38],eax
  40249f:	mov    eax,DWORD PTR [rbp-0x38]
  4024a2:	mov    DWORD PTR ds:0x411014,eax
  4024a9:	lea    rcx,ds:0x41100c
  4024b1:	call   402029 <allocate+0x9>
  4024b6:	mov    eax,DWORD PTR ds:0x41100c
  4024bd:	movsxd rax,eax
  4024c0:	lea    rax,[rax*8+0x0]
  4024c8:	mov    ecx,eax
  4024ca:	call   401020 <_mainCRTStartup-0xfe0>
  4024cf:	mov    QWORD PTR [rbp-0x40],rax
  4024d3:	mov    rax,QWORD PTR [rbp-0x40]
  4024d7:	mov    QWORD PTR ds:0x41101c,rax
  4024df:	mov    DWORD PTR [rbp-0x1c],0x0
  4024e6:	jmp    40252a <ParseOptions+0x417>
  4024e8:	mov    rax,QWORD PTR [rbp-0x28]
  4024ec:	mov    rax,QWORD PTR [rax+0x18]
  4024f0:	mov    QWORD PTR [rbp-0x18],rax
  4024f4:	jmp    402518 <ParseOptions+0x405>
  4024f6:	movsxd rax,DWORD PTR [rbp-0x1c]
  4024fa:	mov    rcx,QWORD PTR ds:0x41101c
  402502:	mov    rdx,QWORD PTR [rbp-0x18]
  402506:	mov    QWORD PTR [rcx+rax*8],rdx
  40250a:	inc    DWORD PTR [rbp-0x1c]
  40250d:	mov    rax,QWORD PTR [rbp-0x18]
  402511:	mov    rax,QWORD PTR [rax]
  402514:	mov    QWORD PTR [rbp-0x18],rax
  402518:	or     QWORD PTR [rbp-0x18],0x0
  40251d:	jne    4024f6 <ParseOptions+0x3e3>
  40251f:	mov    rax,QWORD PTR [rbp-0x28]
  402523:	mov    rax,QWORD PTR [rax]
  402526:	mov    QWORD PTR [rbp-0x28],rax
  40252a:	or     QWORD PTR [rbp-0x28],0x0
  40252f:	jne    4024e8 <ParseOptions+0x3d5>
  402531:	lea    r9,ds:0x402432
  402539:	mov    r8,0x8
  402540:	movsxd rdx,DWORD PTR ds:0x41100c
  402548:	mov    rcx,QWORD PTR ds:0x41101c
  402550:	call   409020 <__qtoasc+0x15a>
  402555:	mov    ebx,DWORD PTR [rbp-0x1c]
  402558:	cmp    ebx,DWORD PTR ds:0x41100c
  40255f:	jne    402563 <ParseOptions+0x450>
  402561:	jmp    402587 <ParseOptions+0x474>
  402563:	mov    r9,0x306
  40256a:	lea    r8,ds:0x4131cb
  402572:	lea    rdx,ds:0x4131d1
  40257a:	lea    rcx,ds:0x4131e6
  402582:	call   403990 <WriteLib+0x12d>
  402587:	mov    rcx,QWORD PTR ds:0x41102c
  40258f:	call   405160 <_cinit+0x5a0>
  402594:	mov    QWORD PTR [rbp-0x48],rax
  402598:	mov    rax,QWORD PTR [rbp-0x48]
  40259c:	mov    DWORD PTR [rbp-0x34],eax
  40259f:	mov    eax,DWORD PTR ds:0x41100c
  4025a6:	movsxd rax,eax
  4025a9:	lea    rax,[rax*4+0x0]
  4025b1:	mov    ecx,eax
  4025b3:	call   401020 <_mainCRTStartup-0xfe0>
  4025b8:	mov    QWORD PTR [rbp-0x50],rax
  4025bc:	mov    rax,QWORD PTR [rbp-0x50]
  4025c0:	mov    QWORD PTR [rbp-0x30],rax
  4025c4:	mov    r9,QWORD PTR ds:0x41102c
  4025cc:	mov    r8,0x4
  4025d3:	movsxd rdx,DWORD PTR ds:0x41100c
  4025db:	mov    rcx,QWORD PTR [rbp-0x30]
  4025df:	call   405220 <_cinit+0x660>
  4025e4:	mov    rcx,QWORD PTR [rbp-0x30]
  4025e8:	call   404ef0 <_cinit+0x330>
  4025ed:	mov    rax,QWORD PTR ds:0x411024
  4025f5:	mov    QWORD PTR [rbp-0x28],rax
  4025f9:	jmp    402662 <newSymbol+0xf>
  4025fb:	mov    rax,QWORD PTR [rbp-0x28]
  4025ff:	mov    rax,QWORD PTR [rax+0x18]
  402603:	mov    QWORD PTR [rbp-0x18],rax
  402607:	jmp    402650 <ParseOptions+0x53d>
  402609:	mov    rax,QWORD PTR [rbp-0x18]
  40260d:	mov    rcx,QWORD PTR [rax+0x8]
  402611:	call   40b060 <_setlocale+0xb54>
  402616:	mov    QWORD PTR [rbp-0x58],rax
  40261a:	mov    rax,QWORD PTR [rbp-0x58]
  40261e:	add    rax,0x1
  402622:	mov    DWORD PTR [rbp-0x20],eax
  402625:	mov    r9,QWORD PTR ds:0x41102c
  40262d:	movsxd r8,DWORD PTR [rbp-0x20]
  402631:	mov    rdx,0x1
  402638:	mov    rax,QWORD PTR [rbp-0x18]
  40263c:	mov    rcx,QWORD PTR [rax+0x8]
  402640:	call   405220 <_cinit+0x660>
  402645:	mov    rax,QWORD PTR [rbp-0x18]
  402649:	mov    rax,QWORD PTR [rax]
  40264c:	mov    QWORD PTR [rbp-0x18],rax
  402650:	rex.W
  402651:	.byte 0x83
  402652:	rex.WRB

0000000000402653 <newSymbol>:
  402653:	call   48f29b58 <.debug$T+0x48afad38>
  402658:	mov    eax,DWORD PTR [rbp-0x28]
  40265b:	mov    rax,QWORD PTR [rax]
  40265e:	mov    QWORD PTR [rbp-0x28],rax
  402662:	or     QWORD PTR [rbp-0x28],0x0
  402667:	jne    4025fb <ParseOptions+0x4e8>
  402669:	mov    ecx,DWORD PTR ds:0x411014
  402670:	call   402081 <IsLibFile+0x27>
  402675:	mov    eax,DWORD PTR [rbp-0x34]
  402678:	add    rsp,0x90
  40267f:	add    rsp,0x8
  402683:	pop    rbx
  402684:	leave  
  402685:	ret    
  402686:	push   rbp
  402687:	mov    rbp,rsp
  40268a:	push   rbx
  40268b:	sub    rsp,0x8
  40268f:	sub    rsp,0x60
  402693:	mov    rax,QWORD PTR ds:0x411024
  40269b:	mov    QWORD PTR [rbp-0x18],rax
  40269f:	mov    DWORD PTR [rbp-0x2c],0x0
  4026a6:	jmp    40271c <ReadObjectSymbols+0x5d>
  4026a8:	mov    rax,QWORD PTR [rbp-0x18]
  4026ac:	mov    rax,QWORD PTR [rax+0x8]
  4026b0:	mov    QWORD PTR [rbp-0x28],rax
  4026b4:	mov    r8,0x2
  4026bb:	xor    edx,edx
  4026bd:	rex.W
  4026be:	.byte 0x8b

00000000004026bf <ReadObjectSymbols>:
  4026bf:	or     al,0x25
  4026c1:	sub    al,0x10
  4026c3:	add    r8b,bpl
  4026c6:	mov    al,0x29
  4026c8:	add    BYTE PTR [rax],al
  4026ca:	mov    rcx,QWORD PTR [rbp-0x28]
  4026ce:	call   401e86 <_mainCRTStartup-0x17a>
  4026d3:	mov    DWORD PTR [rbp-0x30],eax
  4026d6:	mov    eax,DWORD PTR [rbp-0x30]
  4026d9:	mov    DWORD PTR [rbp-0x1c],eax
  4026dc:	mov    rax,QWORD PTR [rbp-0x18]
  4026e0:	mov    ecx,DWORD PTR [rbp-0x1c]
  4026e3:	mov    DWORD PTR [rax+0x2c],ecx
  4026e6:	mov    r9,QWORD PTR ds:0x41102c
  4026ee:	mov    rbx,QWORD PTR [rbp-0x18]
  4026f2:	movsxd r8,DWORD PTR [rbx+0x28]
  4026f6:	mov    rdx,0x1
  4026fd:	mov    rcx,QWORD PTR [rbx+0x10]
  402701:	call   405220 <_cinit+0x660>
  402706:	mov    ecx,DWORD PTR [rbp-0x1c]
  402709:	call   402081 <IsLibFile+0x27>
  40270e:	inc    DWORD PTR [rbp-0x2c]
  402711:	mov    rax,QWORD PTR [rbp-0x18]
  402715:	mov    rax,QWORD PTR [rax]
  402718:	mov    QWORD PTR [rbp-0x18],rax
  40271c:	or     QWORD PTR [rbp-0x18],0x0
  402721:	jne    4026a8 <newSymbol+0x55>
  402723:	mov    eax,DWORD PTR [rbp-0x2c]
  402726:	add    rsp,0x60
  40272a:	add    rsp,0x8
  40272e:	pop    rbx
  40272f:	leave  
  402730:	ret    
  402731:	push   rbp
  402732:	mov    rbp,rsp
  402735:	mov    eax,0x4070
  40273a:	call   40adb0 <_setlocale+0x8a4>
  40273f:	mov    QWORD PTR [rbp+0x18],rdx
  402743:	mov    QWORD PTR [rbp+0x10],rcx
  402747:	lea    rdx,ds:0x4131c8
  40274f:	mov    rcx,QWORD PTR [rbp+0x18]
  402753:	call   404b00 <atoi+0x30>
  402758:	mov    QWORD PTR [rbp-0x4020],rax
  40275f:	mov    rax,QWORD PTR [rbp-0x4020]
  402766:	mov    QWORD PTR [rbp-0x4010],rax
  40276d:	lea    rdx,ds:0x4131c5
  402775:	mov    rcx,QWORD PTR [rbp+0x10]
  402779:	call   404b00 <atoi+0x30>
  40277e:	mov    QWORD PTR [rbp-0x4028],rax
  402785:	mov    rax,QWORD PTR [rbp-0x4028]
  40278c:	mov    QWORD PTR [rbp-0x4018],rax
  402793:	cmp    QWORD PTR [rbp-0x4010],0x0
  40279b:	je     4027a7 <ReadObjectSymbols+0xe8>
  40279d:	cmp    QWORD PTR [rbp-0x4018],0x0
  4027a5:	jne    4027ab <ReadObjectSymbols+0xec>
  4027a7:	xor    eax,eax
  4027a9:	jmp    402822 <ReadObjectSymbols+0x163>
  4027ab:	mov    r9,QWORD PTR [rbp-0x4018]
  4027b2:	mov    r8,0x4000
  4027b9:	mov    rdx,0x1
  4027c0:	lea    rcx,[rbp-0x4008]
  4027c7:	call   404de0 <_cinit+0x220>
  4027cc:	mov    QWORD PTR [rbp-0x4030],rax
  4027d3:	mov    rax,QWORD PTR [rbp-0x4030]
  4027da:	mov    QWORD PTR [rbp-0x8],rax
  4027de:	mov    r9,QWORD PTR [rbp-0x4010]
  4027e5:	mov    r8,QWORD PTR [rbp-0x8]
  4027e9:	mov    rdx,0x1
  4027f0:	lea    rcx,[rbp-0x4008]
  4027f7:	call   405220 <_cinit+0x660>
  4027fc:	mov    rax,QWORD PTR [rbp-0x8]
  402800:	or     rax,rax
  402803:	ja     4027ab <ReadObjectSymbols+0xec>
  402805:	mov    rcx,QWORD PTR [rbp-0x4010]
  40280c:	call   404816 <ExpandFileName+0x2a1>
  402811:	mov    rcx,QWORD PTR [rbp-0x4018]
  402818:	call   404816 <ExpandFileName+0x2a1>
  40281d:	mov    eax,0x1
  402822:	add    rsp,0x4070
  402829:	leave  
  40282a:	ret    
  40282b:	push   rbp
  40282c:	mov    rbp,rsp
  40282f:	sub    rsp,0x40
  402833:	mov    QWORD PTR [rbp+0x18],rdx
  402837:	mov    QWORD PTR [rbp+0x10],rcx
  40283b:	mov    rdx,QWORD PTR [rbp+0x18]
  40283f:	mov    rcx,QWORD PTR [rbp+0x10]
  402843:	call   402731 <ReadObjectSymbols+0x72>
  402848:	mov    DWORD PTR [rbp-0x4],eax
  40284b:	mov    eax,DWORD PTR [rbp-0x4]
  40284e:	or     eax,eax
  402850:	jne    402854 <ReadObjectSymbols+0x195>
  402852:	jmp    40285d <ReadObjectSymbols+0x19e>
  402854:	mov    rcx,QWORD PTR [rbp+0x10]
  402858:	call   409380 <__qtoasc+0x4ba>
  40285d:	add    rsp,0x40
  402861:	leave  
  402862:	ret    
  402863:	push   rbp
  402864:	mov    rbp,rsp
  402867:	sub    rsp,0x70
  40286b:	mov    DWORD PTR [rbp-0x4],0x0
  402872:	lea    rdx,ds:0x4131c3
  40287a:	mov    rcx,QWORD PTR ds:0x411040
  402882:	call   404b00 <atoi+0x30>
  402887:	mov    QWORD PTR [rbp-0x20],rax
  40288b:	mov    rax,QWORD PTR [rbp-0x20]
  40288f:	mov    QWORD PTR ds:0x41102c,rax
  402897:	cmp    QWORD PTR ds:0x41102c,0x0
  4028a0:	je     4028f9 <ReadObjectSymbols+0x23a>
  4028a2:	mov    rcx,QWORD PTR ds:0x41102c
  4028aa:	call   404816 <ExpandFileName+0x2a1>
  4028af:	mov    rcx,0x0
  4028b6:	call   40b500 <_setlocale+0xff4>
  4028bb:	mov    QWORD PTR [rbp-0x28],rax
  4028bf:	mov    rax,QWORD PTR [rbp-0x28]
  4028c3:	mov    QWORD PTR [rbp-0x10],rax
  4028c7:	lea    rdx,ds:0x4131c8
  4028cf:	mov    rcx,QWORD PTR [rbp-0x10]
  4028d3:	call   404b00 <atoi+0x30>
  4028d8:	mov    QWORD PTR [rbp-0x30],rax
  4028dc:	mov    rax,QWORD PTR [rbp-0x30]
  4028e0:	mov    QWORD PTR ds:0x41102c,rax
  4028e8:	mov    rax,QWORD PTR [rbp-0x10]
  4028ec:	mov    QWORD PTR [rbp-0x18],rax
  4028f0:	mov    DWORD PTR [rbp-0x4],0x1
  4028f7:	jmp    40292a <ReadObjectSymbols+0x26b>
  4028f9:	lea    rdx,ds:0x4131c8
  402901:	mov    rcx,QWORD PTR ds:0x411040
  402909:	call   404b00 <atoi+0x30>
  40290e:	mov    QWORD PTR [rbp-0x28],rax
  402912:	mov    rax,QWORD PTR [rbp-0x28]
  402916:	mov    QWORD PTR ds:0x41102c,rax
  40291e:	mov    rax,QWORD PTR ds:0x411040
  402926:	mov    QWORD PTR [rbp-0x18],rax
  40292a:	cmp    QWORD PTR ds:0x41102c,0x0
  402933:	jne    40295a <ReadObjectSymbols+0x29b>
  402935:	mov    r8,QWORD PTR [rbp-0x18]
  402939:	lea    rdx,ds:0x413195
  402941:	mov    rcx,QWORD PTR ds:0x414cb0
  402949:	call   40fdaa <WriteDouble+0xab3>
  40294e:	mov    rcx,0xffffffffffffffff
  402955:	call   40467b <ExpandFileName+0x106>
  40295a:	mov    r9,QWORD PTR ds:0x41102c
  402962:	mov    r8,0x8
  402969:	mov    rdx,0x1
  402970:	lea    rcx,ds:0x41318c
  402978:	call   405220 <_cinit+0x660>
  40297d:	call   402473 <ParseOptions+0x360>
  402982:	mov    DWORD PTR [rbp-0x24],eax
  402985:	mov    eax,DWORD PTR [rbp-0x24]
  402988:	mov    DWORD PTR ds:0x411018,eax
  40298f:	call   402288 <ParseOptions+0x175>
  402994:	mov    DWORD PTR [rbp-0x28],eax
  402997:	mov    eax,DWORD PTR [rbp-0x28]
  40299a:	mov    DWORD PTR ds:0x411010,eax
  4029a1:	call   402257 <ParseOptions+0x144>
  4029a6:	call   402686 <newSymbol+0x33>
  4029ab:	call   40216b <ParseOptions+0x58>
  4029b0:	call   4021e3 <ParseOptions+0xd0>
  4029b5:	mov    rcx,QWORD PTR ds:0x41102c
  4029bd:	call   404816 <ExpandFileName+0x2a1>
  4029c2:	or     DWORD PTR [rbp-0x4],0x0
  4029c6:	je     4029e6 <ReadObjectSymbols+0x327>
  4029c8:	mov    rcx,QWORD PTR ds:0x411040
  4029d0:	call   409380 <__qtoasc+0x4ba>
  4029d5:	mov    rdx,QWORD PTR ds:0x411040
  4029dd:	mov    rcx,QWORD PTR [rbp-0x10]
  4029e1:	call   40282b <ReadObjectSymbols+0x16c>
  4029e6:	mov    eax,0x1
  4029eb:	add    rsp,0x70
  4029ef:	leave  
  4029f0:	ret    
  4029f1:	push   rbp
  4029f2:	mov    rbp,rsp
  4029f5:	sub    rsp,0x50
  4029f9:	mov    QWORD PTR [rbp+0x10],rcx
  4029fd:	cmp    QWORD PTR ds:0x411040,0x0
  402a06:	jne    402a33 <ReadObjectSymbols+0x374>
  402a08:	cmp    QWORD PTR [rbp+0x10],0x0
  402a0d:	je     402a22 <ReadObjectSymbols+0x363>
  402a0f:	mov    rdx,QWORD PTR [rbp+0x10]
  402a13:	lea    rcx,ds:0x413167
  402a1b:	call   40fc5d <WriteDouble+0x966>
  402a20:	jmp    402a2f <ReadObjectSymbols+0x370>
  402a22:	lea    rcx,ds:0x413155
  402a2a:	call   40fc5d <WriteDouble+0x966>
  402a2f:	xor    eax,eax
  402a31:	jmp    402a90 <ReadObjectSymbols+0x3d1>
  402a33:	lea    rdx,ds:0x4131c5
  402a3b:	mov    rcx,QWORD PTR ds:0x411040
  402a43:	call   404b00 <atoi+0x30>
  402a48:	mov    QWORD PTR [rbp-0x8],rax
  402a4c:	mov    rax,QWORD PTR [rbp-0x8]
  402a50:	mov    QWORD PTR ds:0x41102c,rax
  402a58:	cmp    QWORD PTR ds:0x41102c,0x0
  402a61:	jne    402a74 <ReadObjectSymbols+0x3b5>
  402a63:	mov    rcx,QWORD PTR ds:0x411040
  402a6b:	call   4010f0 <_mainCRTStartup-0xf10>
  402a70:	xor    eax,eax
  402a72:	jmp    402a90 <ReadObjectSymbols+0x3d1>
  402a74:	xor    r8d,r8d
  402a77:	mov    rdx,0x8
  402a7e:	mov    rcx,QWORD PTR ds:0x41102c
  402a86:	call   40507a <_cinit+0x4ba>
  402a8b:	mov    eax,0x1
  402a90:	add    rsp,0x50
  402a94:	leave  
  402a95:	ret    
  402a96:	push   rbp
  402a97:	mov    rbp,rsp
  402a9a:	sub    rsp,0x60
  402a9e:	mov    QWORD PTR [rbp+0x18],rdx
  402aa2:	mov    QWORD PTR [rbp+0x10],rcx
  402aa6:	mov    r9,QWORD PTR ds:0x41102c
  402aae:	mov    r8,0x3c
  402ab5:	mov    rdx,0x1
  402abc:	mov    rcx,QWORD PTR [rbp+0x10]
  402ac0:	call   404de0 <_cinit+0x220>
  402ac5:	mov    QWORD PTR [rbp-0x10],rax
  402ac9:	mov    rax,QWORD PTR [rbp-0x10]
  402acd:	mov    DWORD PTR [rbp-0x4],eax
  402ad0:	cmp    DWORD PTR [rbp-0x4],0x3c
  402ad4:	jne    402af1 <ReadObjectSymbols+0x432>
  402ad6:	mov    rax,QWORD PTR [rbp+0x10]
  402ada:	lea    rcx,[rax+0x30]
  402ade:	call   403ad0 <ReadDirHeader+0x3a>
  402ae3:	mov    DWORD PTR [rbp-0x14],eax
  402ae6:	mov    eax,DWORD PTR [rbp-0x14]
  402ae9:	mov    rcx,QWORD PTR [rbp+0x18]
  402aed:	mov    DWORD PTR [rcx],eax
  402aef:	jmp    402af8 <ReadObjectSymbols+0x439>
  402af1:	mov    DWORD PTR [rbp-0x4],0x0
  402af8:	mov    eax,DWORD PTR [rbp-0x4]
  402afb:	add    rsp,0x60
  402aff:	leave  
  402b00:	ret    
  402b01:	push   rbp
  402b02:	mov    rbp,rsp
  402b05:	rex.W
  402b06:	.byte 0x81
  402b07:	in     al,dx

0000000000402b08 <FindObject>:
  402b08:	movabs al,ds:0xb045c7000000
  402b11:	add    BYTE PTR [rax],al
  402b13:	lea    rcx,ds:0x413150
  402b1b:	call   4029f1 <ReadObjectSymbols+0x332>
  402b20:	mov    DWORD PTR [rbp-0x54],eax
  402b23:	mov    eax,DWORD PTR [rbp-0x54]
  402b26:	or     eax,eax
  402b28:	jne    402b31 <FindObject+0x29>
  402b2a:	xor    eax,eax
  402b2c:	jmp    402c96 <AddObjectFile+0x8f>
  402b31:	mov    rdx,QWORD PTR ds:0x411040
  402b39:	lea    rcx,ds:0x413140
  402b41:	call   40fc5d <WriteDouble+0x966>
  402b46:	mov    DWORD PTR [rbp-0x48],0x8
  402b4d:	jmp    402c53 <AddObjectFile+0x4c>
  402b52:	add    DWORD PTR [rbp-0x48],0x3c
  402b56:	lea    rax,[rbp-0x44]
  402b5a:	mov    QWORD PTR [rbp-0x8],rax
  402b5e:	jmp    402b65 <FindObject+0x5d>
  402b60:	add    QWORD PTR [rbp-0x8],0x1
  402b65:	mov    rax,QWORD PTR [rbp-0x8]
  402b69:	movzx  eax,BYTE PTR [rax]
  402b6c:	cmp    eax,0x20
  402b6f:	jg     402b60 <FindObject+0x58>
  402b71:	mov    rax,QWORD PTR [rbp-0x8]
  402b75:	mov    BYTE PTR [rax],0x0
  402b78:	cmp    BYTE PTR [rbp-0x44],0x2f
  402b7c:	jne    402bcc <FindObject+0xc4>
  402b7e:	movzx  eax,BYTE PTR [rbp-0x43]
  402b82:	cmp    eax,0x30
  402b85:	jl     402bcc <FindObject+0xc4>
  402b87:	movzx  eax,BYTE PTR [rbp-0x43]
  402b8b:	cmp    eax,0x39
  402b8e:	jg     402bcc <FindObject+0xc4>
  402b90:	cmp    QWORD PTR ds:0x411000,0x0
  402b99:	je     402bcc <FindObject+0xc4>
  402b9b:	lea    rcx,[rbp-0x43]
  402b9f:	call   403ad0 <ReadDirHeader+0x3a>
  402ba4:	mov    DWORD PTR [rbp-0x58],eax
  402ba7:	mov    eax,DWORD PTR [rbp-0x58]
  402baa:	movsxd rax,eax
  402bad:	add    rax,QWORD PTR ds:0x411000
  402bb5:	mov    QWORD PTR [rbp-0x8],rax
  402bb9:	mov    rdx,QWORD PTR [rbp-0x8]
  402bbd:	lea    rcx,ds:0x41313c
  402bc5:	call   40fc5d <WriteDouble+0x966>
  402bca:	jmp    402bdd <FindObject+0xd5>
  402bcc:	lea    rdx,[rbp-0x44]
  402bd0:	lea    rcx,ds:0x41313c
  402bd8:	call   40fc5d <WriteDouble+0x966>
  402bdd:	cmp    BYTE PTR [rbp-0x44],0x2f
  402be1:	jne    402c27 <AddObjectFile+0x20>
  402be3:	cmp    BYTE PTR [rbp-0x43],0x2f
  402be7:	jne    402c27 <AddObjectFile+0x20>
  402be9:	cmp    BYTE PTR [rbp-0x42],0x0
  402bed:	jne    402c27 <AddObjectFile+0x20>
  402bef:	mov    ecx,DWORD PTR [rbp-0x4c]
  402bf2:	call   401020 <_mainCRTStartup-0xfe0>
  402bf7:	mov    QWORD PTR [rbp-0x60],rax
  402bfb:	mov    rax,QWORD PTR [rbp-0x60]
  402bff:	mov    QWORD PTR ds:0x411000,rax

0000000000402c07 <AddObjectFile>:
  402c07:	mov    r9,QWORD PTR ds:0x41102c
  402c0f:	movsxd r8,DWORD PTR [rbp-0x4c]
  402c13:	mov    rdx,0x1
  402c1a:	mov    rcx,QWORD PTR ds:0x411000
  402c22:	call   404de0 <_cinit+0x220>
  402c27:	mov    eax,DWORD PTR [rbp-0x48]
  402c2a:	add    eax,DWORD PTR [rbp-0x4c]
  402c2d:	mov    DWORD PTR [rbp-0x48],eax
  402c30:	test   DWORD PTR [rbp-0x48],0x1
  402c37:	je     402c3c <AddObjectFile+0x35>
  402c39:	inc    DWORD PTR [rbp-0x48]
  402c3c:	xor    r8d,r8d
  402c3f:	movsxd rdx,DWORD PTR [rbp-0x48]
  402c43:	mov    rcx,QWORD PTR ds:0x41102c
  402c4b:	call   40507a <_cinit+0x4ba>
  402c50:	inc    DWORD PTR [rbp-0x50]
  402c53:	lea    rdx,[rbp-0x4c]
  402c57:	lea    rcx,[rbp-0x44]
  402c5b:	call   402a96 <ReadObjectSymbols+0x3d7>
  402c60:	mov    DWORD PTR [rbp-0x58],eax
  402c63:	mov    eax,DWORD PTR [rbp-0x58]
  402c66:	or     eax,eax
  402c68:	jne    402b52 <FindObject+0x4a>
  402c6e:	mov    rcx,QWORD PTR ds:0x41102c
  402c76:	call   404816 <ExpandFileName+0x2a1>
  402c7b:	cmp    QWORD PTR ds:0x411000,0x0
  402c84:	je     402c93 <AddObjectFile+0x8c>
  402c86:	mov    rcx,QWORD PTR ds:0x411000
  402c8e:	call   404ef0 <_cinit+0x330>
  402c93:	mov    eax,DWORD PTR [rbp-0x50]
  402c96:	add    rsp,0xa0
  402c9d:	leave  
  402c9e:	ret    
  402c9f:	push   rbp
  402ca0:	mov    rbp,rsp
  402ca3:	sub    rsp,0xc0
  402caa:	mov    DWORD PTR [rbp-0x64],0x0
  402cb1:	lea    rcx,ds:0x413134
  402cb9:	call   4029f1 <ReadObjectSymbols+0x332>
  402cbe:	mov    DWORD PTR [rbp-0x68],eax
  402cc1:	mov    eax,DWORD PTR [rbp-0x68]
  402cc4:	or     eax,eax
  402cc6:	jne    402ccf <AddObjectFile+0xc8>
  402cc8:	xor    eax,eax
  402cca:	jmp    402ec9 <WriteOneLibHeader+0x43>
  402ccf:	mov    DWORD PTR [rbp-0xc],0x8
  402cd6:	jmp    402e9e <WriteOneLibHeader+0x18>
  402cdb:	add    DWORD PTR [rbp-0xc],0x3c
  402cdf:	lea    rax,[rbp-0x48]
  402ce3:	mov    QWORD PTR [rbp-0x8],rax
  402ce7:	jmp    402cee <AddObjectFile+0xe7>
  402ce9:	add    QWORD PTR [rbp-0x8],0x1
  402cee:	mov    rax,QWORD PTR [rbp-0x8]
  402cf2:	movzx  eax,BYTE PTR [rax]
  402cf5:	cmp    eax,0x20
  402cf8:	jle    402cff <AddObjectFile+0xf8>
  402cfa:	cmp    eax,0x2f
  402cfd:	jne    402ce9 <AddObjectFile+0xe2>
  402cff:	mov    rax,QWORD PTR [rbp-0x8]
  402d03:	mov    BYTE PTR [rax],0x0
  402d06:	or     DWORD PTR ds:0x411038,0x0
  402d0e:	je     402d16 <AddObjectFile+0x10f>
  402d10:	cmp    BYTE PTR [rbp-0x48],0x0
  402d14:	jne    402d41 <AddObjectFile+0x13a>
  402d16:	mov    rax,QWORD PTR ds:0x411058
  402d1e:	or     rax,rax
  402d21:	je     402e75 <BuildObjList+0x46>
  402d27:	lea    rdx,[rax]
  402d2a:	lea    rcx,[rbp-0x48]
  402d2e:	call   40af50 <_setlocale+0xa44>
  402d33:	mov    DWORD PTR [rbp-0x6c],eax
  402d36:	mov    eax,DWORD PTR [rbp-0x6c]
  402d39:	or     eax,eax
  402d3b:	jne    402e75 <BuildObjList+0x46>
  402d41:	or     DWORD PTR ds:0x413000,0x0
  402d49:	je     402d85 <AddObjectFile+0x17e>
  402d4b:	or     DWORD PTR ds:0x411038,0x0
  402d53:	je     402d6c <AddObjectFile+0x165>
  402d55:	mov    r8d,DWORD PTR [rbp-0xc]
  402d59:	lea    rdx,[rbp-0x48]
  402d5d:	lea    rcx,ds:0x41311b
  402d65:	call   40fc5d <WriteDouble+0x966>
  402d6a:	jmp    402d85 <AddObjectFile+0x17e>
  402d6c:	mov    r8d,DWORD PTR [rbp-0xc]
  402d70:	mov    rdx,QWORD PTR ds:0x411058
  402d78:	lea    rcx,ds:0x4130fd
  402d80:	call   40fc5d <WriteDouble+0x966>
  402d85:	mov    ecx,DWORD PTR [rbp-0x4c]
  402d88:	call   401020 <_mainCRTStartup-0xfe0>
  402d8d:	mov    QWORD PTR [rbp-0x78],rax
  402d91:	mov    rax,QWORD PTR [rbp-0x78]
  402d95:	mov    QWORD PTR [rbp-0x8],rax
  402d99:	mov    r9,QWORD PTR ds:0x41102c
  402da1:	movsxd r8,DWORD PTR [rbp-0x4c]
  402da5:	mov    rdx,0x1
  402dac:	mov    rcx,QWORD PTR [rbp-0x8]
  402db0:	call   404de0 <_cinit+0x220>
  402db5:	or     DWORD PTR ds:0x411038,0x0
  402dbd:	je     402df3 <AddObjectFile+0x1ec>
  402dbf:	mov    rdx,0x5c
  402dc6:	lea    rcx,[rbp-0x48]
  402dca:	call   40b170 <_setlocale+0xc64>
  402dcf:	mov    QWORD PTR [rbp-0x80],rax
  402dd3:	mov    rax,QWORD PTR [rbp-0x80]
  402dd7:	mov    QWORD PTR [rbp-0x58],rax
  402ddb:	cmp    QWORD PTR [rbp-0x58],0x0
  402de0:	jne    402dec <AddObjectFile+0x1e5>
  402de2:	lea    rax,[rbp-0x48]
  402de6:	mov    QWORD PTR [rbp-0x58],rax
  402dea:	jmp    402dff <AddObjectFile+0x1f8>
  402dec:	add    QWORD PTR [rbp-0x58],0x1
  402df1:	jmp    402dff <AddObjectFile+0x1f8>
  402df3:	mov    rax,QWORD PTR ds:0x411058
  402dfb:	mov    QWORD PTR [rbp-0x58],rax
  402dff:	lea    rdx,ds:0x4131c8
  402e07:	mov    rcx,QWORD PTR [rbp-0x58]
  402e0b:	call   404b00 <atoi+0x30>
  402e10:	mov    QWORD PTR [rbp-0x80],rax
  402e14:	mov    rax,QWORD PTR [rbp-0x80]
  402e18:	mov    QWORD PTR [rbp-0x60],rax
  402e1c:	cmp    QWORD PTR [rbp-0x60],0x0
  402e21:	jne    402e35 <BuildObjList+0x6>
  402e23:	mov    rcx,QWORD PTR [rbp-0x58]
  402e27:	call   4010f0 <_mainCRTStartup-0xf10>
  402e2c:	.byte 0xc7
  402e2d:	rex.RB pushf 

0000000000402e2f <BuildObjList>:
  402e2f:	add    BYTE PTR [rax],al
  402e31:	add    BYTE PTR [rax],al
  402e33:	jmp    402e59 <BuildObjList+0x2a>
  402e35:	mov    r9,QWORD PTR [rbp-0x60]
  402e39:	movsxd r8,DWORD PTR [rbp-0x4c]
  402e3d:	mov    rdx,0x1
  402e44:	mov    rcx,QWORD PTR [rbp-0x8]
  402e48:	call   405220 <_cinit+0x660>
  402e4d:	mov    rcx,QWORD PTR [rbp-0x60]
  402e51:	call   404816 <ExpandFileName+0x2a1>
  402e56:	inc    DWORD PTR [rbp-0x64]
  402e59:	mov    rcx,QWORD PTR [rbp-0x8]
  402e5d:	call   404ef0 <_cinit+0x330>
  402e62:	or     DWORD PTR [rbp-0x64],0x0
  402e66:	je     402e73 <BuildObjList+0x44>
  402e68:	mov    eax,DWORD PTR ds:0x411038
  402e6f:	or     eax,eax
  402e71:	jne    402e75 <BuildObjList+0x46>
  402e73:	jmp    402eb9 <WriteOneLibHeader+0x33>
  402e75:	mov    eax,DWORD PTR [rbp-0xc]
  402e78:	add    eax,DWORD PTR [rbp-0x4c]
  402e7b:	mov    DWORD PTR [rbp-0xc],eax
  402e7e:	test   DWORD PTR [rbp-0xc],0x1
  402e85:	.byte 0x74

0000000000402e86 <WriteOneLibHeader>:
  402e86:	add    edi,edi
  402e88:	rex.RB hlt 
  402e8a:	xor    r8d,r8d
  402e8d:	movsxd rdx,DWORD PTR [rbp-0xc]
  402e91:	mov    rcx,QWORD PTR ds:0x41102c
  402e99:	call   40507a <_cinit+0x4ba>
  402e9e:	lea    rdx,[rbp-0x4c]
  402ea2:	lea    rcx,[rbp-0x48]
  402ea6:	call   402a96 <ReadObjectSymbols+0x3d7>
  402eab:	mov    DWORD PTR [rbp-0x6c],eax
  402eae:	mov    eax,DWORD PTR [rbp-0x6c]
  402eb1:	or     eax,eax
  402eb3:	jne    402cdb <AddObjectFile+0xd4>
  402eb9:	mov    rcx,QWORD PTR ds:0x41102c
  402ec1:	call   404816 <ExpandFileName+0x2a1>
  402ec6:	mov    eax,DWORD PTR [rbp-0x64]
  402ec9:	add    rsp,0xc0
  402ed0:	leave  
  402ed1:	ret    
  402ed2:	push   rbp
  402ed3:	mov    rbp,rsp
  402ed6:	sub    rsp,0xa0
  402edd:	mov    rcx,0x0
  402ee4:	call   4029f1 <ReadObjectSymbols+0x332>
  402ee9:	mov    DWORD PTR [rbp-0x50],eax
  402eec:	mov    eax,DWORD PTR [rbp-0x50]
  402eef:	or     eax,eax
  402ef1:	jne    402efa <WriteOneLibHeader+0x74>
  402ef3:	xor    eax,eax
  402ef5:	jmp    402feb <WriteOneLibHeader+0x165>
  402efa:	mov    DWORD PTR [rbp-0x10],0x8
  402f01:	jmp    402fbe <WriteOneLibHeader+0x138>
  402f06:	add    DWORD PTR [rbp-0x10],0x3c
  402f0a:	lea    rax,[rbp-0x4c]
  402f0e:	mov    QWORD PTR [rbp-0x8],rax
  402f12:	jmp    402f19 <WriteOneLibHeader+0x93>
  402f14:	add    QWORD PTR [rbp-0x8],0x1
  402f19:	mov    rax,QWORD PTR [rbp-0x8]
  402f1d:	movzx  eax,BYTE PTR [rax]
  402f20:	cmp    eax,0x20
  402f23:	jg     402f14 <WriteOneLibHeader+0x8e>
  402f25:	mov    rax,QWORD PTR [rbp-0x8]
  402f29:	mov    BYTE PTR [rax],0x0
  402f2c:	mov    ecx,DWORD PTR [rbp-0xc]
  402f2f:	call   401020 <_mainCRTStartup-0xfe0>
  402f34:	mov    QWORD PTR [rbp-0x58],rax
  402f38:	mov    rax,QWORD PTR [rbp-0x58]
  402f3c:	mov    QWORD PTR [rbp-0x8],rax
  402f40:	mov    r8,0x7
  402f47:	lea    rdx,ds:0x4130f5
  402f4f:	lea    rcx,[rbp-0x4c]
  402f53:	call   40b0c0 <_setlocale+0xbb4>
  402f58:	mov    DWORD PTR [rbp-0x5c],eax
  402f5b:	mov    eax,DWORD PTR [rbp-0x5c]
  402f5e:	or     eax,eax
  402f60:	jne    402f69 <WriteOneLibHeader+0xe3>
  402f62:	mov    rax,QWORD PTR [rbp-0x8]
  402f66:	mov    BYTE PTR [rax],0x0
  402f69:	mov    r9,QWORD PTR ds:0x41102c
  402f71:	movsxd r8,DWORD PTR [rbp-0xc]
  402f75:	mov    rdx,0x1
  402f7c:	mov    rcx,QWORD PTR [rbp-0x8]
  402f80:	call   404de0 <_cinit+0x220>
  402f85:	mov    r8,QWORD PTR [rbp-0x8]
  402f89:	mov    edx,DWORD PTR [rbp-0xc]
  402f8c:	lea    rcx,[rbp-0x4c]
  402f90:	call   401c07 <_mainCRTStartup-0x3f9>
  402f95:	mov    eax,DWORD PTR [rbp-0x10]
  402f98:	add    eax,DWORD PTR [rbp-0xc]
  402f9b:	mov    DWORD PTR [rbp-0x10],eax
  402f9e:	test   DWORD PTR [rbp-0x10],0x1
  402fa5:	je     402faa <WriteOneLibHeader+0x124>
  402fa7:	inc    DWORD PTR [rbp-0x10]
  402faa:	xor    r8d,r8d
  402fad:	movsxd rdx,DWORD PTR [rbp-0x10]
  402fb1:	mov    rcx,QWORD PTR ds:0x41102c
  402fb9:	call   40507a <_cinit+0x4ba>
  402fbe:	lea    rdx,[rbp-0xc]
  402fc2:	lea    rcx,[rbp-0x4c]
  402fc6:	call   402a96 <ReadObjectSymbols+0x3d7>
  402fcb:	mov    DWORD PTR [rbp-0x54],eax
  402fce:	mov    eax,DWORD PTR [rbp-0x54]
  402fd1:	or     eax,eax
  402fd3:	jne    402f06 <WriteOneLibHeader+0x80>
  402fd9:	mov    rcx,QWORD PTR ds:0x41102c
  402fe1:	call   404816 <ExpandFileName+0x2a1>
  402fe6:	mov    eax,0x1
  402feb:	add    rsp,0xa0
  402ff2:	leave  
  402ff3:	ret    
  402ff4:	push   rbp
  402ff5:	mov    rbp,rsp
  402ff8:	sub    rsp,0x30
  402ffc:	lea    rcx,ds:0x4130c5
  403004:	call   40fc5d <WriteDouble+0x966>
  403009:	lea    rcx,ds:0x41308b
  403011:	call   40fc5d <WriteDouble+0x966>
  403016:	lea    rcx,ds:0x41305e
  40301e:	call   40fc5d <WriteDouble+0x966>
  403023:	rex.W
  403024:	.byte 0x8d
  403025:	or     al,0x25
  403027:	.byte 0x25
  403028:	.byte 0x30

0000000000403029 <WriteOneBigEndianLong>:
  403029:	add    r8b,bpl
  40302c:	sub    eax,0x480000cc
  403031:	add    esp,0x30
  403034:	leave  
  403035:	ret    
  403036:	push   rbp
  403037:	mov    rbp,rsp
  40303a:	push   rbx
  40303b:	sub    rsp,0x8
  40303f:	sub    rsp,0x40
  403043:	mov    QWORD PTR [rbp+0x18],rdx
  403047:	mov    QWORD PTR [rbp+0x10],rcx
  40304b:	mov    DWORD PTR [rbp-0x14],0xffffffff
  403052:	cmp    DWORD PTR [rbp+0x10],0x1
  403056:	jne    403064 <WriteOneBigEndianLong+0x3b>
  403058:	call   402ff4 <WriteOneLibHeader+0x16e>
  40305d:	xor    eax,eax
  40305f:	jmp    4030f8 <FixMemberSize+0x77>
  403064:	mov    rdx,QWORD PTR [rbp+0x18]
  403068:	mov    ecx,DWORD PTR [rbp+0x10]
  40306b:	call   401113 <_mainCRTStartup-0xeed>
  403070:	mov    DWORD PTR [rbp-0x18],eax
  403073:	mov    eax,DWORD PTR [rbp-0x18]
  403076:	or     eax,eax
  403078:	je     4030e6 <FixMemberSize+0x65>
  40307a:	.byte 0x83
  40307b:	or     al,0x25
  40307d:	add    BYTE PTR [rax],dh
  40307f:	rex.B
	...

0000000000403081 <FixMemberSize>:
  403081:	add    BYTE PTR [rbp+rcx*1+0x48],dh
  403085:	lea    ecx,ds:0x413010
  40308c:	call   40fc5d <WriteDouble+0x966>
  403091:	or     DWORD PTR ds:0x41103c,0x0
  403099:	je     4030aa <FixMemberSize+0x29>
  40309b:	call   402b01 <ReadObjectSymbols+0x442>
  4030a0:	cmp    DWORD PTR [rbp+0x10],0x3
  4030a4:	jne    4030aa <FixMemberSize+0x29>
  4030a6:	xor    eax,eax
  4030a8:	jmp    4030f8 <FixMemberSize+0x77>
  4030aa:	or     QWORD PTR ds:0x411058,0x0
  4030b3:	jne    4030bf <FixMemberSize+0x3e>
  4030b5:	or     DWORD PTR ds:0x411038,0x0
  4030bd:	je     4030c4 <FixMemberSize+0x43>
  4030bf:	call   402c9f <AddObjectFile+0x98>
  4030c4:	call   401e2f <_mainCRTStartup-0x1d1>
  4030c9:	mov    DWORD PTR [rbp-0x1c],eax
  4030cc:	mov    eax,DWORD PTR [rbp-0x1c]
  4030cf:	mov    DWORD PTR [rbp-0x14],eax
  4030d2:	or     DWORD PTR [rbp-0x14],0x0
  4030d6:	je     4030e6 <FixMemberSize+0x65>
  4030d8:	call   402863 <ReadObjectSymbols+0x1a4>
  4030dd:	mov    DWORD PTR [rbp-0x20],eax
  4030e0:	mov    eax,DWORD PTR [rbp-0x20]
  4030e3:	mov    DWORD PTR [rbp-0x14],eax
  4030e6:	mov    eax,DWORD PTR [rbp-0x14]
  4030e9:	or     eax,eax
  4030eb:	jne    4030f4 <FixMemberSize+0x73>
  4030ed:	mov    ebx,0x1
  4030f2:	jmp    4030f6 <FixMemberSize+0x75>
  4030f4:	xor    ebx,ebx
  4030f6:	mov    eax,ebx
  4030f8:	add    rsp,0x40
  4030fc:	add    rsp,0x8
  403100:	pop    rbx
  403101:	leave  
  403102:	ret    
  403103:	nop
	...
  403110:	push   rbp
  403111:	mov    rbp,rsp
  403114:	push   rbx
  403115:	push   rsi
  403116:	sub    rsp,0x80
  40311d:	mov    QWORD PTR [rbp+0x18],rdx
  403121:	mov    QWORD PTR [rbp+0x10],rcx
  403125:	mov    rax,QWORD PTR [rbp+0x10]
  403129:	cmp    BYTE PTR [rax],0x22
  40312c:	jne    40318d <FixFirstLinkerMember+0x22>
  40312e:	add    QWORD PTR [rbp+0x10],0x1
  403133:	mov    rdx,0x22
  40313a:	mov    rcx,QWORD PTR [rbp+0x10]
  40313e:	call   40ae40 <_setlocale+0x934>
  403143:	mov    QWORD PTR [rbp-0x30],rax
  403147:	mov    rax,QWORD PTR [rbp-0x30]
  40314b:	mov    QWORD PTR [rbp-0x20],rax
  40314f:	or     QWORD PTR [rbp-0x20],0x0
  403154:	jne    403186 <FixFirstLinkerMember+0x1b>
  403156:	mov    rbx,QWORD PTR [rbp+0x10]
  40315a:	lea    rbx,[rbx-0x1]
  40315e:	mov    QWORD PTR [rbp+0x10],rbx
  403162:	lea    r8,[rbx]
  403165:	rex.W
  403166:	.byte 0x8d
  403167:	adc    al,0x25
  403169:	push   rax
  40316a:	.byte 0x33

000000000040316b <FixFirstLinkerMember>:
  40316b:	add    BYTE PTR [r8-0x75],cl
  40316f:	or     al,0x25
  403171:	mov    al,0x4c
  403173:	add    r8b,bpl
  403176:	xor    ah,cl
  403178:	add    BYTE PTR [rax],al
  40317a:	mov    rax,0x0
  403181:	jmp    403279 <WriteLongNames+0x22>
  403186:	mov    rax,QWORD PTR [rbp-0x20]
  40318a:	mov    BYTE PTR [rax],0x0
  40318d:	lea    rdx,ds:0x41334e
  403195:	mov    rcx,QWORD PTR [rbp+0x10]
  403199:	call   404b00 <atoi+0x30>
  40319e:	mov    QWORD PTR [rbp-0x30],rax
  4031a2:	mov    rax,QWORD PTR [rbp-0x30]
  4031a6:	mov    QWORD PTR [rbp-0x18],rax
  4031aa:	cmp    QWORD PTR [rbp-0x18],0x0
  4031af:	jne    4031d1 <FixFirstLinkerMember+0x66>
  4031b1:	mov    r8,QWORD PTR [rbp+0x10]
  4031b5:	lea    rdx,ds:0x413337
  4031bd:	mov    rcx,QWORD PTR ds:0x414cb0
  4031c5:	call   40fdaa <WriteDouble+0xab3>
  4031ca:	xor    ecx,ecx
  4031cc:	call   40467b <ExpandFileName+0x106>
  4031d1:	mov    r8,0x2
  4031d8:	xor    edx,edx
  4031da:	mov    rcx,QWORD PTR [rbp-0x18]
  4031de:	call   40507a <_cinit+0x4ba>

00000000004031e3 <FixSecondLinkerMember>:
  4031e3:	mov    rcx,QWORD PTR [rbp-0x18]
  4031e7:	call   405160 <_cinit+0x5a0>
  4031ec:	mov    QWORD PTR [rbp-0x38],rax
  4031f0:	mov    rax,QWORD PTR [rbp-0x38]
  4031f4:	mov    DWORD PTR [rbp-0x24],eax
  4031f7:	xor    r8d,r8d
  4031fa:	xor    edx,edx
  4031fc:	mov    rcx,QWORD PTR [rbp-0x18]
  403200:	call   40507a <_cinit+0x4ba>
  403205:	mov    ecx,DWORD PTR [rbp-0x24]
  403208:	add    ecx,0x5
  40320b:	call   401020 <_mainCRTStartup-0xfe0>
  403210:	mov    QWORD PTR [rbp-0x40],rax
  403214:	mov    rax,QWORD PTR [rbp-0x40]
  403218:	mov    QWORD PTR [rbp-0x20],rax
  40321c:	mov    r9,QWORD PTR [rbp-0x18]
  403220:	movsxd r8,DWORD PTR [rbp-0x24]
  403224:	mov    rdx,0x1
  40322b:	mov    rcx,QWORD PTR [rbp-0x20]
  40322f:	call   404de0 <_cinit+0x220>
  403234:	mov    QWORD PTR [rbp-0x48],rax
  403238:	mov    rax,QWORD PTR [rbp-0x48]
  40323c:	mov    DWORD PTR [rbp-0x28],eax
  40323f:	mov    eax,DWORD PTR [rbp-0x28]
  403242:	cmp    eax,DWORD PTR [rbp-0x24]
  403245:	jge    403263 <WriteLongNames+0xc>
  403247:	mov    ebx,DWORD PTR [rbp-0x28]
  40324a:	mov    esi,DWORD PTR [rbp-0x24]
  40324d:	sub    esi,ebx
  40324f:	mov    r8d,esi
  403252:	xor    edx,edx
  403254:	movsxd rax,ebx

0000000000403257 <WriteLongNames>:
  403257:	mov    rcx,rax
  40325a:	add    rcx,QWORD PTR [rbp-0x20]
  40325e:	call   405860 <fclose+0x4a>
  403263:	mov    rcx,QWORD PTR [rbp-0x18]
  403267:	call   404816 <ExpandFileName+0x2a1>
  40326c:	mov    rax,QWORD PTR [rbp+0x18]
  403270:	mov    ecx,DWORD PTR [rbp-0x28]
  403273:	mov    DWORD PTR [rax],ecx
  403275:	mov    rax,QWORD PTR [rbp-0x20]
  403279:	add    rsp,0x80
  403280:	pop    rsi
  403281:	pop    rbx
  403282:	leave  
  403283:	ret    
  403284:	push   rbp
  403285:	mov    rbp,rsp

0000000000403288 <WriteSecondLinkerMember>:
  403288:	push   rbx
  403289:	sub    rsp,0x8
  40328d:	sub    rsp,0x30
  403291:	mov    QWORD PTR [rbp+0x28],r9
  403295:	mov    QWORD PTR [rbp+0x20],r8
  403299:	mov    QWORD PTR [rbp+0x18],rdx
  40329d:	mov    QWORD PTR [rbp+0x10],rcx
  4032a1:	mov    rax,QWORD PTR [rbp+0x10]
  4032a5:	mov    rcx,0x0
  4032ac:	cmp    rax,rcx
  4032af:	je     4032b6 <WriteSecondLinkerMember+0x2e>
  4032b1:	cmp    BYTE PTR [rax],0x0
  4032b4:	jne    4032c2 <WriteSecondLinkerMember+0x3a>
  4032b6:	mov    rax,0x0
  4032bd:	jmp    40339c <WriteSecondLinkerMember+0x114>
  4032c2:	mov    DWORD PTR [rbp-0x18],0x0
  4032c9:	mov    DWORD PTR [rbp-0x14],0x0
  4032d0:	mov    rax,QWORD PTR [rbp+0x18]
  4032d4:	mov    BYTE PTR [rax],0x0
  4032d7:	dec    DWORD PTR [rbp+0x20]
  4032da:	jmp    4032f3 <WriteSecondLinkerMember+0x6b>
  4032dc:	movsxd rax,DWORD PTR [rbp-0x14]
  4032e0:	mov    rcx,QWORD PTR [rbp+0x10]
  4032e4:	cmp    BYTE PTR [rcx+rax*1],0xa
  4032e8:	jne    4032f0 <WriteSecondLinkerMember+0x68>
  4032ea:	mov    rax,QWORD PTR [rbp+0x28]
  4032ee:	inc    DWORD PTR [rax]
  4032f0:	inc    DWORD PTR [rbp-0x14]
  4032f3:	movsxd rax,DWORD PTR [rbp-0x14]
  4032f7:	mov    rcx,QWORD PTR [rbp+0x10]
  4032fb:	movsx  eax,BYTE PTR [rcx+rax*1]
  4032ff:	or     eax,eax
  403301:	je     403308 <WriteSecondLinkerMember+0x80>
  403303:	cmp    eax,0x20
  403306:	jle    4032dc <WriteSecondLinkerMember+0x54>
  403308:	jmp    403372 <WriteSecondLinkerMember+0xea>
  40330a:	movsxd rax,DWORD PTR [rbp-0x14]
  40330e:	mov    rcx,QWORD PTR [rbp+0x10]
  403312:	cmp    BYTE PTR [rcx+rax*1],0x20
  403316:	jg     40333f <WriteSecondLinkerMember+0xb7>
  403318:	movsxd rax,DWORD PTR [rbp-0x14]
  40331c:	mov    rcx,QWORD PTR [rbp+0x10]
  403320:	cmp    BYTE PTR [rcx+rax*1],0xa
  403324:	jne    40332c <WriteSecondLinkerMember+0xa4>
  403326:	mov    rax,QWORD PTR [rbp+0x28]
  40332a:	inc    DWORD PTR [rax]
  40332c:	movsxd rax,DWORD PTR [rbp-0x14]
  403330:	mov    rcx,QWORD PTR [rbp+0x10]
  403334:	cmp    BYTE PTR [rcx+rax*1],0x0
  403338:	je     403388 <WriteSecondLinkerMember+0x100>
  40333a:	inc    DWORD PTR [rbp-0x14]
  40333d:	jmp    403388 <WriteSecondLinkerMember+0x100>
  40333f:	movsxd rax,DWORD PTR [rbp-0x14]
  403343:	mov    rcx,QWORD PTR [rbp+0x10]
  403347:	cmp    BYTE PTR [rcx+rax*1],0x3d
  40334b:	jne    40334f <WriteSecondLinkerMember+0xc7>
  40334d:	jmp    403388 <WriteSecondLinkerMember+0x100>
  40334f:	mov    eax,DWORD PTR [rbp-0x18]
  403352:	mov    ecx,eax
  403354:	add    ecx,0x1
  403357:	mov    DWORD PTR [rbp-0x18],ecx
  40335a:	movsxd rax,eax
  40335d:	mov    rcx,QWORD PTR [rbp+0x18]
  403361:	movsxd rdx,DWORD PTR [rbp-0x14]
  403365:	mov    rbx,QWORD PTR [rbp+0x10]
  403369:	mov    dl,BYTE PTR [rbx+rdx*1]
  40336c:	mov    BYTE PTR [rcx+rax*1],dl
  40336f:	inc    DWORD PTR [rbp-0x14]
  403372:	mov    eax,DWORD PTR [rbp-0x18]
  403375:	cmp    eax,DWORD PTR [rbp+0x20]
  403378:	jge    403388 <WriteSecondLinkerMember+0x100>
  40337a:	movsxd rax,DWORD PTR [rbp-0x14]
  40337e:	mov    rcx,QWORD PTR [rbp+0x10]
  403382:	cmp    BYTE PTR [rcx+rax*1],0x0
  403386:	jne    40330a <WriteSecondLinkerMember+0x82>
  403388:	movsxd rax,DWORD PTR [rbp-0x18]
  40338c:	mov    rcx,QWORD PTR [rbp+0x18]
  403390:	mov    BYTE PTR [rcx+rax*1],0x0
  403394:	movsxd rax,DWORD PTR [rbp-0x14]
  403398:	add    rax,QWORD PTR [rbp+0x10]
  40339c:	add    rsp,0x30
  4033a0:	add    rsp,0x8
  4033a4:	pop    rbx
  4033a5:	leave  
  4033a6:	ret    
  4033a7:	push   rbp
  4033a8:	mov    rbp,rsp
  4033ab:	sub    rsp,0x290
  4033b2:	mov    QWORD PTR [rbp+0x18],rdx
  4033b6:	mov    QWORD PTR [rbp+0x10],rcx
  4033ba:	lea    rdx,[rbp-0x224]
  4033c1:	mov    rcx,QWORD PTR [rbp+0x10]
  4033c5:	call   403110 <FixMemberSize+0x8f>
  4033ca:	mov    QWORD PTR [rbp-0x230],rax
  4033d1:	mov    rax,QWORD PTR [rbp-0x230]
  4033d8:	mov    QWORD PTR [rbp-0x220],rax
  4033df:	mov    rax,QWORD PTR [rbp-0x220]
  4033e6:	mov    QWORD PTR [rbp-0x8],rax
  4033ea:	mov    rax,QWORD PTR [rbp+0x18]
  4033ee:	mov    DWORD PTR [rax],0x0
  4033f4:	jmp    40342e <WriteSecondLinkerMember+0x1a6>
  4033f6:	mov    r9,QWORD PTR [rbp+0x18]
  4033fa:	mov    r8,0x12c
  403401:	lea    rdx,[rbp-0x208]
  403408:	mov    rcx,QWORD PTR [rbp-0x8]
  40340c:	call   403284 <WriteLongNames+0x2d>
  403411:	mov    QWORD PTR [rbp-0x238],rax
  403418:	mov    rax,QWORD PTR [rbp-0x238]
  40341f:	mov    QWORD PTR [rbp-0x8],rax
  403423:	cmp    BYTE PTR [rbp-0x208],0x0
  40342a:	jne    40342e <WriteSecondLinkerMember+0x1a6>
  40342c:	jmp    40343c <cmpSymbols+0xa>
  40342e:	mov    rax,QWORD PTR [rbp-0x8]

0000000000403432 <cmpSymbols>:
  403432:	or     rax,rax
  403435:	je     40343c <cmpSymbols+0xa>
  403437:	cmp    BYTE PTR [rax],0x0
  40343a:	jne    4033f6 <WriteSecondLinkerMember+0x16e>
  40343c:	mov    rax,QWORD PTR [rbp+0x18]
  403440:	mov    eax,DWORD PTR [rax]
  403442:	movsxd rax,eax
  403445:	lea    rax,[rax*8+0x0]
  40344d:	mov    ecx,eax
  40344f:	call   401020 <_mainCRTStartup-0xfe0>
  403454:	mov    QWORD PTR [rbp-0x238],rax
  40345b:	mov    rax,QWORD PTR [rbp-0x238]
  403462:	mov    QWORD PTR [rbp-0x218],rax
  403469:	mov    rax,QWORD PTR [rbp-0x220]
  403470:	rex.W
  403471:	.byte 0x89
  403472:	rex.RB

0000000000403473 <WriteFirstLinkerMember>:
  403473:	clc    
  403474:	mov    DWORD PTR [rbp-0x20c],0x0
  40347e:	mov    rax,QWORD PTR [rbp+0x18]
  403482:	mov    DWORD PTR [rax],0x0
  403488:	jmp    40352f <WriteFirstLinkerMember+0xbc>
  40348d:	mov    r9,QWORD PTR [rbp+0x18]
  403491:	mov    r8,0x12c
  403498:	lea    rdx,[rbp-0x208]
  40349f:	mov    rcx,QWORD PTR [rbp-0x8]
  4034a3:	call   403284 <WriteLongNames+0x2d>
  4034a8:	mov    QWORD PTR [rbp-0x240],rax
  4034af:	mov    rax,QWORD PTR [rbp-0x240]
  4034b6:	mov    QWORD PTR [rbp-0x8],rax
  4034ba:	cmp    BYTE PTR [rbp-0x208],0x0
  4034c1:	jne    4034c5 <WriteFirstLinkerMember+0x52>
  4034c3:	jmp    403541 <WriteFirstLinkerMember+0xce>
  4034c5:	lea    rcx,[rbp-0x208]
  4034cc:	call   40b060 <_setlocale+0xb54>
  4034d1:	mov    QWORD PTR [rbp-0x248],rax
  4034d8:	mov    rax,QWORD PTR [rbp-0x248]
  4034df:	mov    rcx,rax
  4034e2:	add    rcx,0x1
  4034e6:	call   401020 <_mainCRTStartup-0xfe0>
  4034eb:	mov    QWORD PTR [rbp-0x250],rax
  4034f2:	mov    rax,QWORD PTR [rbp-0x250]
  4034f9:	movsxd rcx,DWORD PTR [rbp-0x20c]
  403500:	mov    rdx,QWORD PTR [rbp-0x218]
  403507:	mov    QWORD PTR [rdx+rcx*8],rax
  40350b:	lea    rdx,[rbp-0x208]
  403512:	movsxd rax,DWORD PTR [rbp-0x20c]
  403519:	mov    rcx,QWORD PTR [rbp-0x218]
  403520:	mov    rcx,QWORD PTR [rcx+rax*8]
  403524:	call   40aee0 <_setlocale+0x9d4>
  403529:	inc    DWORD PTR [rbp-0x20c]
  40352f:	mov    rax,QWORD PTR [rbp-0x8]
  403533:	or     rax,rax
  403536:	je     403541 <WriteFirstLinkerMember+0xce>
  403538:	cmp    BYTE PTR [rax],0x0
  40353b:	jne    40348d <WriteFirstLinkerMember+0x1a>
  403541:	mov    rax,QWORD PTR [rbp+0x18]
  403545:	mov    eax,DWORD PTR [rax]
  403547:	or     eax,eax
  403549:	jle    403565 <WriteFirstLinkerMember+0xf2>
  40354b:	sub    eax,0x1
  40354e:	movsxd rax,eax
  403551:	mov    rcx,QWORD PTR [rbp-0x218]
  403558:	cmp    QWORD PTR [rcx+rax*8],0x0
  40355d:	jne    403565 <WriteFirstLinkerMember+0xf2>
  40355f:	mov    rax,QWORD PTR [rbp+0x18]
  403563:	dec    DWORD PTR [rax]
  403565:	mov    rax,QWORD PTR [rbp-0x218]
  40356c:	add    rsp,0x290
  403573:	leave  
  403574:	ret    
  403575:	push   rbp
  403576:	mov    rbp,rsp
  403579:	push   rbx
  40357a:	sub    rsp,0x8
  40357e:	mov    eax,0x10200
  403583:	call   40adb0 <_setlocale+0x8a4>
  403588:	mov    QWORD PTR [rbp+0x18],rdx
  40358c:	mov    QWORD PTR [rbp+0x10],rcx
  403590:	mov    DWORD PTR [rbp-0x18],0x0
  403597:	mov    rax,QWORD PTR [rbp+0x10]
  40359b:	mov    QWORD PTR [rbp-0x10170],rax
  4035a2:	mov    rax,QWORD PTR [rbp-0x10170]
  4035a9:	cmp    BYTE PTR [rax],0x22
  4035ac:	jne    4035ec <WriteFirstLinkerMember+0x179>
  4035ae:	add    QWORD PTR [rbp+0x10],0x1
  4035b3:	mov    rdx,0x22
  4035ba:	mov    rcx,QWORD PTR [rbp+0x10]
  4035be:	call   40ae40 <_setlocale+0x934>
  4035c3:	mov    QWORD PTR [rbp-0x10180],rax
  4035ca:	mov    rax,QWORD PTR [rbp-0x10180]
  4035d1:	mov    QWORD PTR [rbp-0x10170],rax
  4035d8:	cmp    QWORD PTR [rbp-0x10170],0x0
  4035e0:	je     4035ec <WriteFirstLinkerMember+0x179>
  4035e2:	mov    rax,QWORD PTR [rbp-0x10170]
  4035e9:	mov    BYTE PTR [rax],0x0
  4035ec:	mov    rax,QWORD PTR [rbp+0x10]
  4035f0:	cmp    BYTE PTR [rax],0x40
  4035f3:	jne    403619 <WriteFirstLinkerMember+0x1a6>
  4035f5:	mov    rdx,QWORD PTR [rbp+0x18]
  4035f9:	mov    rax,QWORD PTR [rbp+0x10]
  4035fd:	lea    rcx,[rax+0x1]
  403601:	call   4033a7 <WriteSecondLinkerMember+0x11f>
  403606:	mov    QWORD PTR [rbp-0x10180],rax
  40360d:	mov    rax,QWORD PTR [rbp-0x10180]
  403614:	jmp    403946 <WriteLib+0xe3>
  403619:	mov    r8,0x1000
  403620:	xor    edx,edx
  403622:	lea    rcx,[rbp-0x10018]
  403629:	call   405860 <fclose+0x4a>
  40362e:	mov    BYTE PTR ds:0x411060,0x0
  403636:	lea    rdx,[rbp-0x10158]
  40363d:	mov    rcx,QWORD PTR [rbp+0x10]
  403641:	call   QWORD PTR ds:0x41614c
  403648:	mov    QWORD PTR [rbp-0x10188],rax
  40364f:	mov    rax,QWORD PTR [rbp-0x10188]
  403656:	mov    QWORD PTR [rbp-0x10168],rax
  40365d:	mov    rdx,0x5c
  403664:	mov    rcx,QWORD PTR [rbp+0x10]
  403668:	call   40b170 <_setlocale+0xc64>
  40366d:	mov    QWORD PTR [rbp-0x10190],rax
  403674:	mov    rax,QWORD PTR [rbp-0x10190]
  40367b:	mov    QWORD PTR [rbp-0x10170],rax
  403682:	rex.W
  403683:	.byte 0x83
  403684:	.byte 0xbd
  403685:	nop

0000000000403686 <WriteMembers>:
  403686:	(bad)  
  403687:	(bad)  
  403688:	inc    DWORD PTR [rax]
  40368a:	je     403704 <WriteMembers+0x7e>
  40368c:	mov    rax,QWORD PTR [rbp-0x10170]
  403693:	mov    BYTE PTR [rax],0x0
  403696:	mov    rcx,QWORD PTR [rbp+0x10]
  40369a:	call   40b060 <_setlocale+0xb54>
  40369f:	mov    QWORD PTR [rbp-0x10198],rax
  4036a6:	mov    rbx,QWORD PTR [rbp-0x10198]
  4036ad:	mov    r8,rbx
  4036b0:	mov    rdx,QWORD PTR [rbp+0x10]
  4036b4:	lea    rcx,ds:0x411060
  4036bc:	call   40b070 <_setlocale+0xb64>
  4036c1:	mov    rcx,QWORD PTR [rbp+0x10]
  4036c5:	call   40b060 <_setlocale+0xb54>
  4036ca:	mov    QWORD PTR [rbp-0x101a0],rax
  4036d1:	mov    rax,QWORD PTR [rbp-0x101a0]
  4036d8:	movsxd rax,eax
  4036db:	mov    BYTE PTR [rax*1+0x411060],0x0
  4036e3:	mov    rax,QWORD PTR [rbp-0x10170]
  4036ea:	mov    BYTE PTR [rax],0x5c
  4036ed:	lea    rdx,ds:0x413335
  4036f5:	lea    rcx,ds:0x411060
  4036fd:	call   40ae10 <_setlocale+0x904>
  403702:	jmp    40370c <WriteMembers+0x86>
  403704:	mov    BYTE PTR ds:0x411060,0x0
  40370c:	lea    rcx,ds:0x411060
  403714:	call   40b060 <_setlocale+0xb54>
  403719:	mov    QWORD PTR [rbp-0x10198],rax
  403720:	mov    rax,QWORD PTR [rbp-0x10198]
  403727:	add    rax,0x1
  40372b:	mov    DWORD PTR [rbp-0x10174],eax

0000000000403731 <copyfile>:
  403731:	cmp    QWORD PTR [rbp-0x10168],0xffffffffffffffff
  40373c:	je     40388e <WriteLib+0x2b>
  403742:	lea    rcx,[rbp-0x1012c]
  403749:	call   40b060 <_setlocale+0xb54>
  40374e:	mov    QWORD PTR [rbp-0x101a0],rax
  403755:	mov    rax,QWORD PTR [rbp-0x101a0]
  40375c:	mov    QWORD PTR [rbp-0x101a8],rax
  403763:	lea    rcx,ds:0x411060
  40376b:	call   40b060 <_setlocale+0xb54>
  403770:	mov    QWORD PTR [rbp-0x101b0],rax
  403777:	mov    rax,QWORD PTR [rbp-0x101b0]
  40377e:	mov    rcx,QWORD PTR [rbp-0x101a8]
  403785:	lea    rcx,[rcx+rax*1+0x5]
  40378a:	call   401020 <_mainCRTStartup-0xfe0>
  40378f:	mov    QWORD PTR [rbp-0x101b8],rax
  403796:	mov    rax,QWORD PTR [rbp-0x101b8]
  40379d:	movsxd rcx,DWORD PTR [rbp-0x18]
  4037a1:	mov    QWORD PTR [rbp+rcx*8-0x10018],rax
  4037a9:	lea    r9,[rbp-0x1012c]
  4037b0:	lea    r8,ds:0x411060
  4037b8:	lea    rdx,ds:0x413330
  4037c0:	movsxd rax,DWORD PTR [rbp-0x18]
  4037c4:	mov    rcx,QWORD PTR [rbp+rax*8-0x10018]
  4037cc:	call   QWORD PTR ds:0x41620c
  4037d3:	inc    DWORD PTR [rbp-0x18]
  4037d6:	jmp    403855 <renamefile+0x2a>
  4037d8:	lea    rcx,[rbp-0x1012c]
  4037df:	call   40b060 <_setlocale+0xb54>
  4037e4:	mov    QWORD PTR [rbp-0x101c0],rax
  4037eb:	mov    rax,QWORD PTR [rbp-0x101c0]
  4037f2:	movsxd rcx,DWORD PTR [rbp-0x10174]
  4037f9:	lea    rcx,[rcx+rax*1+0x1]
  4037fe:	call   401020 <_mainCRTStartup-0xfe0>
  403803:	mov    QWORD PTR [rbp-0x101c8],rax
  40380a:	mov    rax,QWORD PTR [rbp-0x101c8]
  403811:	movsxd rcx,DWORD PTR [rbp-0x18]
  403815:	mov    QWORD PTR [rbp+rcx*8-0x10018],rax
  40381d:	lea    r9,[rbp-0x1012c]
  403824:	rex.WR
  403825:	.byte 0x8d
  403826:	add    al,0x25
  403828:	(bad)  
  403829:	.byte 0x10
  40382a:	rex.B

000000000040382b <renamefile>:
  40382b:	add    BYTE PTR [rax-0x73],cl
  40382e:	adc    al,0x25
  403830:	xor    BYTE PTR [rbx],dh
  403832:	add    BYTE PTR [r8+0x63],cl
  403836:	rex.RB call ffffffffc5ccc384 <.debug$T+0xffffffffc589d564>
  40383c:	call   403740 <copyfile+0xf>
  403841:	adc    al,0x25
  403843:	or     al,0x62
  403845:	add    r15b,dil
  403848:	rex.RB call 128b5cf <.debug$T+0xe5c7af>
  40384e:	and    BYTE PTR [rax],al
  403850:	add    BYTE PTR [rbp+0x2],dh
  403853:	jmp    40387e <WriteLib+0x1b>
  403855:	lea    rdx,[rbp-0x10158]
  40385c:	mov    rcx,QWORD PTR [rbp-0x10168]

0000000000403863 <WriteLib>:
  403863:	call   QWORD PTR ds:0x416154
  40386a:	mov    DWORD PTR [rbp-0x101bc],eax
  403870:	mov    eax,DWORD PTR [rbp-0x101bc]
  403876:	or     eax,eax
  403878:	jne    4037d8 <copyfile+0xa7>
  40387e:	mov    rcx,QWORD PTR [rbp-0x10168]
  403885:	call   QWORD PTR ds:0x41615c
  40388c:	jmp    4038dd <WriteLib+0x7a>
  40388e:	mov    rcx,QWORD PTR [rbp+0x10]
  403892:	call   40b060 <_setlocale+0xb54>
  403897:	mov    QWORD PTR [rbp-0x101a0],rax
  40389e:	mov    rax,QWORD PTR [rbp-0x101a0]
  4038a5:	mov    rcx,rax
  4038a8:	add    rcx,0x1
  4038ac:	call   401020 <_mainCRTStartup-0xfe0>
  4038b1:	mov    QWORD PTR [rbp-0x101a8],rax
  4038b8:	mov    rax,QWORD PTR [rbp-0x101a8]
  4038bf:	mov    QWORD PTR [rbp-0x10018],rax
  4038c6:	mov    rdx,QWORD PTR [rbp+0x10]
  4038ca:	mov    rcx,QWORD PTR [rbp-0x10018]
  4038d1:	call   40aee0 <_setlocale+0x9d4>
  4038d6:	mov    DWORD PTR [rbp-0x18],0x1
  4038dd:	mov    eax,DWORD PTR [rbp-0x18]
  4038e0:	movsxd rax,eax
  4038e3:	lea    rax,[rax*8+0x0]
  4038eb:	mov    ecx,eax
  4038ed:	call   401020 <_mainCRTStartup-0xfe0>
  4038f2:	mov    QWORD PTR [rbp-0x101a0],rax
  4038f9:	mov    rax,QWORD PTR [rbp-0x101a0]
  403900:	mov    QWORD PTR [rbp-0x10160],rax
  403907:	mov    DWORD PTR [rbp-0x14],0x0
  40390e:	jmp    40392e <WriteLib+0xcb>
  403910:	movsxd rax,DWORD PTR [rbp-0x14]
  403914:	shl    rax,0x3
  403918:	mov    rcx,QWORD PTR [rbp-0x10160]
  40391f:	mov    rdx,QWORD PTR [rbp+rax*1-0x10018]
  403927:	mov    QWORD PTR [rcx+rax*1],rdx
  40392b:	inc    DWORD PTR [rbp-0x14]
  40392e:	mov    eax,DWORD PTR [rbp-0x14]
  403931:	cmp    eax,DWORD PTR [rbp-0x18]
  403934:	jl     403910 <WriteLib+0xad>
  403936:	mov    rax,QWORD PTR [rbp+0x18]
  40393a:	mov    ecx,DWORD PTR [rbp-0x18]
  40393d:	mov    DWORD PTR [rax],ecx
  40393f:	mov    rax,QWORD PTR [rbp-0x10160]
  403946:	add    rsp,0x10200
  40394d:	add    rsp,0x8
  403951:	pop    rbx
  403952:	leave  
  403953:	ret    
	...
  403960:	push   rbp
  403961:	mov    rbp,rsp
  403964:	sub    rsp,0x30
  403968:	lea    rdx,ds:0x413370
  403970:	mov    rcx,QWORD PTR ds:0x414cb0
  403978:	call   40fdaa <WriteDouble+0xab3>
  40397d:	mov    rcx,0x7
  403984:	call   4092e0 <__qtoasc+0x41a>
  403989:	add    rsp,0x30
  40398d:	leave  
  40398e:	ret    
  40398f:	nop
  403990:	push   rbp
  403991:	mov    rbp,rsp
  403994:	push   rbx
  403995:	push   rsi
  403996:	sub    rsp,0x860
  40399d:	mov    QWORD PTR [rbp+0x28],r9
  4039a1:	mov    QWORD PTR [rbp+0x20],r8
  4039a5:	mov    rbx,rdx
  4039a8:	mov    QWORD PTR [rbp+0x10],rcx
  4039ac:	mov    esi,r9d
  4039af:	mov    DWORD PTR [rsp+0x28],esi
  4039b3:	mov    rsi,r8
  4039b6:	mov    QWORD PTR [rsp+0x20],rsi
  4039bb:	lea    r9,[rbx]
  4039be:	mov    r8,QWORD PTR [rbp+0x10]
  4039c2:	lea    rdx,ds:0x4133a0
  4039ca:	lea    rcx,[rbp-0x810]
  4039d1:	call   40acef <_setlocale+0x7e3>
  4039d6:	lea    rcx,[rbp-0x810]
  4039dd:	call   40b060 <_setlocale+0xb54>
  4039e2:	mov    QWORD PTR [rbp-0x818],rax
  4039e9:	mov    rbx,QWORD PTR [rbp-0x818]
  4039f0:	rex.WR

00000000004039f1 <OpenLibFile>:
  4039f1:	mov    ecx,DWORD PTR ds:0x414cb0
  4039f8:	mov    r8,rbx
  4039fb:	mov    rdx,0x1
  403a02:	lea    rcx,[rbp-0x810]
  403a09:	call   405220 <_cinit+0x660>
  403a0e:	mov    rcx,0x1
  403a15:	call   40467b <ExpandFileName+0x106>
  403a1a:	add    rsp,0x860
  403a21:	pop    rsi
  403a22:	pop    rbx
  403a23:	leave  
  403a24:	ret    
  403a25:	push   rbp
  403a26:	mov    rbp,rsp
  403a29:	push   rbx
  403a2a:	push   rsi
  403a2b:	sub    rsp,0x870
  403a32:	mov    QWORD PTR [rbp+0x28],r9
  403a36:	mov    rbx,r8
  403a39:	mov    QWORD PTR [rbp+0x18],rdx
  403a3d:	mov    QWORD PTR [rbp+0x10],rcx
  403a41:	mov    DWORD PTR [rsp+0x38],0x0
  403a49:	mov    esi,DWORD PTR [rbp+0x28]
  403a4c:	mov    DWORD PTR [rsp+0x30],esi
  403a50:	mov    rsi,QWORD PTR [rbp+0x30]
  403a54:	mov    QWORD PTR [rsp+0x28],rsi
  403a59:	mov    QWORD PTR [rsp+0x20],rbx
  403a5e:	mov    r9,QWORD PTR [rbp+0x18]
  403a62:	mov    r8,QWORD PTR [rbp+0x10]
  403a66:	lea    rdx,ds:0x413390
  403a6e:	lea    rcx,[rbp-0x810]
  403a75:	call   40acef <_setlocale+0x7e3>
  403a7a:	lea    rcx,[rbp-0x810]
  403a81:	call   40b060 <_setlocale+0xb54>
  403a86:	mov    QWORD PTR [rbp-0x818],rax
  403a8d:	mov    rbx,QWORD PTR [rbp-0x818]
  403a94:	rex.WR
  403a95:	.byte 0x8b

0000000000403a96 <ReadDirHeader>:
  403a96:	or     al,0x25
  403a98:	mov    al,0x4c
  403a9a:	add    BYTE PTR [r9-0x77],cl
  403a9e:	fmul   DWORD PTR [rax-0x39]
  403aa1:	ret    0x1
  403aa4:	add    BYTE PTR [rax],al
  403aa6:	lea    rcx,[rbp-0x810]
  403aad:	call   405220 <_cinit+0x660>
  403ab2:	mov    rcx,0x1
  403ab9:	call   40467b <ExpandFileName+0x106>
  403abe:	add    rsp,0x870
  403ac5:	pop    rsi
  403ac6:	pop    rbx
  403ac7:	leave  
  403ac8:	ret    
  403ac9:	nop
  403aca:	nop
  403acb:	nop
  403acc:	add    BYTE PTR [rax],al
  403ace:	add    BYTE PTR [rax],al
  403ad0:	push   rbp
  403ad1:	mov    rbp,rsp
  403ad4:	sub    rsp,0x10
  403ad8:	mov    r11,rcx
  403adb:	mov    BYTE PTR [rbp-0x1],0x0
  403adf:	xor    r8d,r8d
  403ae2:	jmp    403ae8 <ReadDirHeader+0x52>
  403ae4:	lea    r11,[r11+0x1]
  403ae8:	movsx  eax,BYTE PTR [r11]
  403aec:	cmp    eax,0x20
  403aef:	je     403ae4 <ReadDirHeader+0x4e>
  403af1:	cmp    eax,0x9
  403af4:	je     403ae4 <ReadDirHeader+0x4e>
  403af6:	cmp    eax,0xa
  403af9:	je     403ae4 <ReadDirHeader+0x4e>
  403afb:	cmp    eax,0xd
  403afe:	je     403ae4 <ReadDirHeader+0x4e>
  403b00:	rex.B

0000000000403b01 <ListMembers>:
  403b01:	movsx  eax,BYTE PTR [rbx]
  403b04:	cmp    eax,0x2d
  403b07:	je     403b0e <ListMembers+0xd>
  403b09:	cmp    eax,0x2b
  403b0c:	jne    403b43 <ListMembers+0x42>
  403b0e:	mov    al,BYTE PTR [r11]
  403b11:	mov    BYTE PTR [rbp-0x1],al
  403b14:	lea    r11,[r11+0x1]
  403b18:	jmp    403b43 <ListMembers+0x42>
  403b1a:	movsx  eax,BYTE PTR [r11]
  403b1e:	cmp    eax,0x30
  403b21:	jl     403b49 <ListMembers+0x48>
  403b23:	cmp    eax,0x39
  403b26:	jg     403b49 <ListMembers+0x48>
  403b28:	mov    rcx,r8
  403b2b:	imul   rcx,rcx,0xa
  403b2f:	movsx  eax,BYTE PTR [r11]
  403b33:	sub    eax,0x30
  403b36:	movsxd rax,eax
  403b39:	mov    r8,rcx
  403b3c:	add    r8,rax
  403b3f:	lea    r11,[r11+0x1]
  403b43:	cmp    BYTE PTR [r11],0x0
  403b47:	jne    403b1a <ListMembers+0x19>
  403b49:	cmp    BYTE PTR [rbp-0x1],0x2d
  403b4d:	jne    403b52 <ListMembers+0x51>
  403b4f:	neg    r8
  403b52:	mov    rax,r8
  403b55:	add    rsp,0x10
  403b59:	leave  
  403b5a:	ret    
  403b5b:	nop
  403b5c:	add    BYTE PTR [rax],al
  403b5e:	add    BYTE PTR [rax],al
  403b60:	push   rbp
  403b61:	mov    rbp,rsp
  403b64:	push   rbx
  403b65:	push   rsi
  403b66:	sub    rsp,0x50
  403b6a:	mov    QWORD PTR [rbp+0x18],rdx
  403b6e:	mov    QWORD PTR [rbp+0x10],rcx
  403b72:	mov    rax,QWORD PTR [rbp+0x10]
  403b76:	mov    rsi,rax
  403b79:	imul   rsi,QWORD PTR [rbp+0x18]
  403b7e:	mov    rcx,rsi
  403b81:	call   405720 <atexit+0x37>
  403b86:	mov    QWORD PTR [rbp-0x20],rax
  403b8a:	mov    rbx,rax
  403b8d:	mov    rax,0x0
  403b94:	cmp    rbx,rax
  403b97:	je     403ba6 <ListMembers+0xa5>
  403b99:	mov    r8,rsi
  403b9c:	xor    edx,edx
  403b9e:	lea    rcx,[rbx]
  403ba1:	call   405860 <fclose+0x4a>
  403ba6:	lea    rax,[rbx]
  403ba9:	add    rsp,0x50
  403bad:	pop    rsi
  403bae:	pop    rbx
  403baf:	leave  
  403bb0:	ret    
  403bb1:	nop
  403bb2:	nop
  403bb3:	nop
	...
  403bc0:	push   rbp
  403bc1:	mov    rbp,rsp
  403bc4:	push   rbx
  403bc5:	push   rsi
  403bc6:	push   rdi
  403bc7:	sub    rsp,0x8
  403bcb:	sub    rsp,0x1d0
  403bd2:	xor    ebx,ebx
  403bd4:	lea    rdi,[rbp-0x60]
  403bd8:	lea    rsi,ds:0x4133b0
  403be0:	mov    rcx,0x6
  403be7:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  403bea:	mov    rdx,0x1
  403bf1:	mov    rcx,0x310
  403bf8:	call   403b60 <ListMembers+0x5f>
  403bfd:	mov    QWORD PTR [rbp-0x120],rax
  403c04:	mov    QWORD PTR ds:0x4119c0,rax
  403c0c:	cmp    QWORD PTR ds:0x4119c0,0x0
  403c15:	je     4043cd <ProcessAtFile+0x26>
  403c1b:	lea    rcx,[rbp-0x30]
  403c1f:	call   QWORD PTR ds:0x4161bc
  403c26:	movzx  eax,WORD PTR [rbp-0x22]
  403c2a:	mov    ecx,0xa
  403c2f:	mov    eax,eax
  403c31:	mov    edx,0x66666667
  403c36:	push   rcx
  403c37:	mov    ecx,eax
  403c39:	imul   edx
  403c3b:	sar    edx,0x2
  403c3e:	sar    ecx,0x1f
  403c41:	sub    edx,ecx
  403c43:	mov    eax,edx
  403c45:	pop    rcx
  403c46:	mov    WORD PTR [rbp-0x22],ax
  403c4a:	mov    rcx,QWORD PTR ds:0x4119c0
  403c52:	movzx  edx,WORD PTR [rbp-0x28]
  403c56:	imul   edx,edx,0x57e40
  403c5c:	movzx  esi,WORD PTR [rbp-0x26]
  403c60:	imul   esi,esi,0x1770
  403c66:	add    edx,esi
  403c68:	movzx  esi,WORD PTR [rbp-0x24]
  403c6c:	imul   esi,esi,0x64
  403c6f:	add    edx,esi
  403c71:	movzx  esi,WORD PTR [rbp-0x22]
  403c75:	add    edx,esi
  403c77:	mov    DWORD PTR [rcx+0x84],edx
  403c7d:	movzx  ecx,WORD PTR [rbp-0x30]
  403c81:	mov    rdx,QWORD PTR ds:0x4119c0
  403c89:	mov    QWORD PTR [rbp-0x130],rdx
  403c90:	imul   esi,ecx,0x16d
  403c96:	sub    esi,0xaf8ca
  403c9c:	mov    eax,ecx
  403c9e:	.byte 0x2d

0000000000403c9f <DoExtractMember>:
  403c9f:	mov    dl,0x7
  403ca1:	add    BYTE PTR [rax],al
  403ca3:	mov    DWORD PTR [rbp-0x124],eax
  403ca9:	mov    ecx,0x4
  403cae:	mov    eax,eax
  403cb0:	test   eax,eax
  403cb2:	jge    403cb7 <DoExtractMember+0x18>
  403cb4:	add    eax,0x3
  403cb7:	sar    eax,0x2
  403cba:	mov    DWORD PTR [rbp-0x134],eax
  403cc0:	mov    eax,DWORD PTR [rbp-0x134]
  403cc6:	mov    ecx,esi
  403cc8:	add    ecx,DWORD PTR [rbp-0x134]
  403cce:	movzx  edx,WORD PTR [rbp-0x2e]
  403cd2:	sub    edx,0x1
  403cd5:	movsxd rdx,edx
  403cd8:	mov    edx,DWORD PTR [rbp+rdx*4-0x60]
  403cdc:	add    ecx,edx
  403cde:	movzx  edx,WORD PTR [rbp-0x2a]
  403ce2:	add    ecx,edx
  403ce4:	sub    ecx,0x1
  403ce7:	mov    rax,QWORD PTR [rbp-0x130]
  403cee:	mov    DWORD PTR [rax+0x88],ecx
  403cf4:	lea    rcx,[rbp-0x10c]
  403cfb:	call   QWORD PTR ds:0x4161c4
  403d02:	mov    DWORD PTR [rbp-0x138],eax
  403d08:	mov    eax,DWORD PTR [rbp-0x138]
  403d0e:	mov    DWORD PTR [rbp-0x110],eax
  403d14:	mov    rcx,QWORD PTR ds:0x4119c0
  403d1c:	imul   edx,DWORD PTR [rbp-0x10c],0x3c
  403d23:	mov    DWORD PTR [rcx+0x90],edx
  403d29:	lea    rdx,ds:0x413518
  403d31:	xor    ecx,ecx
  403d33:	call   409420 <__qtoasc+0x55a>
  403d38:	call   406823 <memmove+0x53>
  403d3d:	mov    rax,QWORD PTR ds:0x4119c0
  403d45:	mov    DWORD PTR [rax+0x1c],0x0
  403d4c:	mov    rax,QWORD PTR ds:0x4119c0
  403d54:	mov    DWORD PTR [rax+0x80],0x1
  403d5e:	mov    rax,QWORD PTR ds:0x4119c0
  403d66:	mov    DWORD PTR [rax+0x18],0x26
  403d6d:	mov    rax,QWORD PTR ds:0x4119c0
  403d75:	lea    rax,[rax+0x8]
  403d79:	mov    QWORD PTR ds:0x4119b0,rax
  403d81:	mov    rax,QWORD PTR ds:0x4119c0
  403d89:	lea    rcx,ds:0x41350f
  403d91:	mov    QWORD PTR [rax+0x1d8],rcx
  403d98:	mov    rax,QWORD PTR ds:0x4119c0
  403da0:	lea    rcx,ds:0x4134fb
  403da8:	mov    QWORD PTR [rax+0x1e0],rcx
  403daf:	mov    rax,QWORD PTR ds:0x4119c0
  403db7:	lea    rcx,ds:0x4134ea
  403dbf:	mov    QWORD PTR [rax+0x1e8],rcx
  403dc6:	mov    rax,QWORD PTR ds:0x4119c0
  403dce:	lea    rcx,ds:0x4134e9
  403dd6:	mov    QWORD PTR [rax+0x1f0],rcx
  403ddd:	mov    rax,QWORD PTR ds:0x4119c0
  403de5:	lea    rcx,ds:0x4134cf
  403ded:	mov    QWORD PTR [rax+0x1f8],rcx
  403df4:	mov    rax,QWORD PTR ds:0x4119c0
  403dfc:	lea    rcx,ds:0x4134e9
  403e04:	mov    QWORD PTR [rax+0x200],rcx
  403e0b:	mov    rax,QWORD PTR ds:0x4119c0
  403e13:	lea    rcx,ds:0x4134e9
  403e1b:	mov    QWORD PTR [rax+0x208],rcx
  403e22:	mov    rax,QWORD PTR ds:0x4119c0
  403e2a:	lea    rcx,ds:0x4134e9
  403e32:	mov    QWORD PTR [rax+0x210],rcx
  403e39:	mov    rax,QWORD PTR ds:0x4119c0
  403e41:	lea    rcx,ds:0x4134e9
  403e49:	mov    QWORD PTR [rax+0x218],rcx
  403e50:	mov    rax,QWORD PTR ds:0x4119c0
  403e58:	lea    rcx,ds:0x4134b8
  403e60:	mov    QWORD PTR [rax+0x220],rcx
  403e67:	mov    rax,QWORD PTR ds:0x4119c0
  403e6f:	lea    rcx,ds:0x4134a6
  403e77:	mov    QWORD PTR [rax+0x228],rcx
  403e7e:	mov    rax,QWORD PTR ds:0x4119c0
  403e86:	lea    rcx,ds:0x413496
  403e8e:	mov    QWORD PTR [rax+0x230],rcx
  403e95:	mov    rax,QWORD PTR ds:0x4119c0
  403e9d:	lea    rcx,ds:0x4134e9
  403ea5:	mov    QWORD PTR [rax+0x238],rcx
  403eac:	mov    rax,QWORD PTR ds:0x4119c0
  403eb4:	lea    rcx,ds:0x4134e9
  403ebc:	mov    QWORD PTR [rax+0x240],rcx
  403ec3:	mov    rax,QWORD PTR ds:0x4119c0
  403ecb:	rex.W
  403ecc:	.byte 0x8d
  403ecd:	or     al,0x25
  403ecf:	test   BYTE PTR [rcx+rax*2],dh

0000000000403ed2 <ReadLibraryIn>:
  403ed2:	add    BYTE PTR [rax-0x77],cl
  403ed5:	mov    BYTE PTR [rax+0x2],cl
  403ed8:	add    BYTE PTR [rax],al
  403eda:	mov    rax,QWORD PTR ds:0x4119c0
  403ee2:	lea    rcx,ds:0x413472
  403eea:	mov    QWORD PTR [rax+0x250],rcx
  403ef1:	mov    rax,QWORD PTR ds:0x4119c0
  403ef9:	lea    rcx,ds:0x4134e9
  403f01:	mov    QWORD PTR [rax+0x258],rcx
  403f08:	mov    rax,QWORD PTR ds:0x4119c0
  403f10:	lea    rcx,ds:0x4134e9
  403f18:	mov    QWORD PTR [rax+0x260],rcx
  403f1f:	mov    rax,QWORD PTR ds:0x4119c0
  403f27:	lea    rcx,ds:0x4134e9
  403f2f:	mov    QWORD PTR [rax+0x268],rcx
  403f36:	mov    rax,QWORD PTR ds:0x4119c0
  403f3e:	lea    rcx,ds:0x41345e
  403f46:	mov    QWORD PTR [rax+0x270],rcx
  403f4d:	mov    rax,QWORD PTR ds:0x4119c0
  403f55:	lea    rcx,ds:0x41344c
  403f5d:	mov    QWORD PTR [rax+0x278],rcx
  403f64:	mov    rax,QWORD PTR ds:0x4119c0
  403f6c:	lea    rcx,ds:0x4134e9
  403f74:	mov    QWORD PTR [rax+0x280],rcx
  403f7b:	mov    rax,QWORD PTR ds:0x4119c0
  403f83:	lea    rcx,ds:0x4134e9
  403f8b:	mov    QWORD PTR [rax+0x288],rcx
  403f92:	mov    rax,QWORD PTR ds:0x4119c0
  403f9a:	lea    rcx,ds:0x4134e9
  403fa2:	mov    QWORD PTR [rax+0x290],rcx
  403fa9:	mov    rax,QWORD PTR ds:0x4119c0
  403fb1:	lea    rcx,ds:0x41343b
  403fb9:	mov    QWORD PTR [rax+0x298],rcx
  403fc0:	mov    rax,QWORD PTR ds:0x4119c0
  403fc8:	lea    rcx,ds:0x4134e9
  403fd0:	mov    QWORD PTR [rax+0x2a0],rcx
  403fd7:	mov    rax,QWORD PTR ds:0x4119c0
  403fdf:	lea    rcx,ds:0x413427
  403fe7:	mov    QWORD PTR [rax+0x2a8],rcx
  403fee:	rex.W
  403fef:	.byte 0x8b
  403ff0:	add    al,0x25
  403ff2:	.byte 0xc0
  403ff3:	.byte 0x19

0000000000403ff4 <PrintHelp>:
  403ff4:	add    BYTE PTR [r8-0x73],cl
  403ff8:	or     al,0x25
  403ffa:	jmp    48408133 <.debug$T+0x47fd9313>
  403fff:	mov    DWORD PTR [rax+0x2b0],ecx
  404005:	mov    rax,QWORD PTR ds:0x4119c0
  40400d:	lea    rcx,ds:0x4134e9
  404015:	mov    QWORD PTR [rax+0x2b8],rcx
  40401c:	mov    rax,QWORD PTR ds:0x4119c0
  404024:	lea    rcx,ds:0x4134e9
  40402c:	mov    QWORD PTR [rax+0x2c0],rcx
  404033:	rex.W
  404034:	.byte 0x8b
  404035:	.byte 0x4

0000000000404036 <main>:
  404036:	and    eax,0x4119c0
  40403b:	lea    rcx,ds:0x41340f
  404043:	mov    QWORD PTR [rax+0x2c8],rcx
  40404a:	mov    rax,QWORD PTR ds:0x4119c0
  404052:	lea    rcx,ds:0x4134e9
  40405a:	mov    QWORD PTR [rax+0x2d0],rcx
  404061:	mov    rax,QWORD PTR ds:0x4119c0
  404069:	lea    rcx,ds:0x4134e9
  404071:	mov    QWORD PTR [rax+0x2f0],rcx
  404078:	mov    rax,QWORD PTR ds:0x4119c0
  404080:	lea    rcx,ds:0x4133fd
  404088:	mov    QWORD PTR [rax+0x2f8],rcx
  40408f:	mov    rax,QWORD PTR ds:0x4119c0
  404097:	lea    rcx,ds:0x4133ee
  40409f:	mov    QWORD PTR [rax+0x300],rcx
  4040a6:	mov    rax,QWORD PTR ds:0x4119c0
  4040ae:	lea    rcx,ds:0x4133e0
  4040b6:	mov    QWORD PTR [rax+0x308],rcx
  4040bd:	mov    rdx,0xa
  4040c4:	mov    rcx,0x8
  4040cb:	call   403b60 <ListMembers+0x5f>
  4040d0:	mov    QWORD PTR [rbp-0x140],rax
  4040d7:	mov    rax,QWORD PTR [rbp-0x140]
  4040de:	mov    rcx,QWORD PTR ds:0x4119c0
  4040e6:	mov    QWORD PTR [rcx+0x68],rax
  4040ea:	mov    rdx,0x20
  4040f1:	mov    rcx,0x8
  4040f8:	call   403b60 <ListMembers+0x5f>
  4040fd:	mov    QWORD PTR [rbp-0x148],rax
  404104:	mov    rax,QWORD PTR [rbp-0x148]
  40410b:	rex.W
  40410c:	.byte 0x8b
  40410d:	or     al,0x25
  40410f:	.byte 0xc0

0000000000404110 <ReadFileIntoRam>:
  404110:	sbb    DWORD PTR [rcx+0x0],eax
  404113:	mov    QWORD PTR [rcx+0x78],rax
  404117:	mov    rdx,0x14
  40411e:	mov    rcx,0x4
  404125:	call   403b60 <ListMembers+0x5f>
  40412a:	mov    QWORD PTR [rbp-0x150],rax
  404131:	mov    rax,QWORD PTR [rbp-0x150]
  404138:	mov    rcx,QWORD PTR ds:0x4119c0
  404140:	mov    QWORD PTR [rcx+0x30],rax
  404144:	mov    rdx,0x14
  40414b:	mov    rcx,0x4
  404152:	call   403b60 <ListMembers+0x5f>
  404157:	mov    QWORD PTR [rbp-0x158],rax
  40415e:	mov    rax,QWORD PTR [rbp-0x158]
  404165:	mov    rcx,QWORD PTR ds:0x4119c0
  40416d:	mov    QWORD PTR [rcx+0x28],rax
  404171:	mov    rdx,0x14
  404178:	mov    rcx,0x8
  40417f:	call   403b60 <ListMembers+0x5f>
  404184:	mov    QWORD PTR [rbp-0x160],rax
  40418b:	mov    rax,QWORD PTR [rbp-0x160]
  404192:	mov    rcx,QWORD PTR ds:0x4119c0
  40419a:	mov    QWORD PTR [rcx+0x70],rax
  40419e:	mov    rdx,0x1
  4041a5:	mov    rcx,0x1a
  4041ac:	call   403b60 <ListMembers+0x5f>
  4041b1:	mov    QWORD PTR [rbp-0x168],rax
  4041b8:	mov    rax,QWORD PTR [rbp-0x168]
  4041bf:	mov    rcx,QWORD PTR ds:0x4119c0
  4041c7:	mov    QWORD PTR [rcx+0x48],rax
  4041cb:	mov    rdx,0x1
  4041d2:	mov    rcx,0x24
  4041d9:	call   403b60 <ListMembers+0x5f>
  4041de:	mov    QWORD PTR [rbp-0x170],rax
  4041e5:	mov    rax,QWORD PTR [rbp-0x170]
  4041ec:	mov    rcx,QWORD PTR ds:0x4119c0
  4041f4:	mov    QWORD PTR [rcx+0xb0],rax
  4041fb:	mov    rax,QWORD PTR ds:0x4119c0
  404203:	cmp    QWORD PTR [rax+0x68],0x0
  404208:	je     4043c6 <ProcessAtFile+0x1f>
  40420e:	cmp    QWORD PTR [rax+0x78],0x0
  404213:	je     4043c6 <ProcessAtFile+0x1f>
  404219:	cmp    QWORD PTR [rax+0x30],0x0
  40421e:	je     4043c6 <ProcessAtFile+0x1f>
  404224:	cmp    QWORD PTR [rax+0x28],0x0
  404229:	je     4043c6 <ProcessAtFile+0x1f>
  40422f:	cmp    QWORD PTR [rax+0x70],0x0
  404234:	je     4043c6 <ProcessAtFile+0x1f>
  40423a:	cmp    QWORD PTR [rax+0x48],0x0
  40423f:	je     4043c6 <ProcessAtFile+0x1f>
  404245:	cmp    QWORD PTR [rax+0xb0],0x0
  40424d:	je     4043c6 <ProcessAtFile+0x1f>
  404253:	mov    rax,QWORD PTR ds:0x4119c0
  40425b:	mov    DWORD PTR [rax],0x14
  404261:	mov    rax,QWORD PTR ds:0x4119c0
  404269:	mov    DWORD PTR [rax+0x4],0x1000
  404270:	mov    rax,QWORD PTR ds:0x4119c0
  404278:	lea    rcx,ds:0x414ca0
  404280:	mov    QWORD PTR [rax+0x60],rcx

0000000000404284 <GetNextWord>:
  404284:	mov    rax,QWORD PTR ds:0x4119c0
  40428c:	cmp    QWORD PTR [rax+0x60],0x0
  404291:	je     4043bf <ProcessAtFile+0x18>
  404297:	mov    rcx,0xfffffffffffffff6
  40429e:	call   QWORD PTR ds:0x4161cc
  4042a5:	mov    QWORD PTR [rbp-0x180],rax
  4042ac:	mov    rax,QWORD PTR [rbp-0x180]
  4042b3:	mov    rcx,rax
  4042b6:	call   QWORD PTR ds:0x4161d4
  4042bd:	mov    rcx,0xfffffffffffffff5
  4042c4:	call   QWORD PTR ds:0x4161cc
  4042cb:	mov    QWORD PTR [rbp-0x188],rax
  4042d2:	mov    rax,QWORD PTR [rbp-0x188]
  4042d9:	mov    rcx,rax
  4042dc:	call   QWORD PTR ds:0x4161d4
  4042e3:	mov    rcx,0xfffffffffffffff4
  4042ea:	call   QWORD PTR ds:0x4161cc
  4042f1:	mov    QWORD PTR [rbp-0x190],rax
  4042f8:	mov    rax,QWORD PTR [rbp-0x190]
  4042ff:	mov    rcx,rax
  404302:	call   QWORD PTR ds:0x4161d4
  404309:	mov    rcx,0xfffffffffffffff6
  404310:	call   QWORD PTR ds:0x4161cc
  404317:	mov    QWORD PTR [rbp-0x198],rax
  40431e:	mov    rax,QWORD PTR [rbp-0x198]
  404325:	mov    rcx,QWORD PTR ds:0x414ca0
  40432d:	mov    QWORD PTR [rcx+0x8],rax
  404331:	mov    rcx,0xfffffffffffffff5
  404338:	call   QWORD PTR ds:0x4161cc
  40433f:	mov    QWORD PTR [rbp-0x1a0],rax
  404346:	mov    rax,QWORD PTR [rbp-0x1a0]
  40434d:	mov    rcx,QWORD PTR ds:0x414ca8
  404355:	mov    QWORD PTR [rcx+0x8],rax
  404359:	mov    rcx,0xfffffffffffffff4
  404360:	call   QWORD PTR ds:0x4161cc
  404367:	mov    QWORD PTR [rbp-0x1a8],rax
  40436e:	mov    rax,QWORD PTR [rbp-0x1a8]
  404375:	mov    rcx,QWORD PTR ds:0x414cb0
  40437d:	mov    QWORD PTR [rcx+0x8],rax
  404381:	mov    DWORD PTR [rbp-0x174],0x0
  40438b:	mov    r8d,0x1
  404391:	mov    edx,r8d
  404394:	movsxd rax,DWORD PTR [rbp-0x174]
  40439b:	mov    rax,QWORD PTR [rax*8+0x414ca0]
  4043a3:	mov    rcx,QWORD PTR [rax+0x8]

00000000004043a7 <ProcessAtFile>:
  4043a7:	call   QWORD PTR ds:0x4161dc
  4043ae:	inc    DWORD PTR [rbp-0x174]
  4043b4:	cmp    DWORD PTR [rbp-0x174],0x3
  4043bb:	jl     40438b <GetNextWord+0x107>
  4043bd:	jmp    4043d2 <ProcessAtFile+0x2b>
  4043bf:	mov    ebx,0x8
  4043c4:	jmp    4043d2 <ProcessAtFile+0x2b>
  4043c6:	mov    ebx,0x8
  4043cb:	jmp    4043d2 <ProcessAtFile+0x2b>
  4043cd:	mov    ebx,0x8
  4043d2:	mov    eax,ebx
  4043d4:	add    rsp,0x1d0
  4043db:	add    rsp,0x8
  4043df:	pop    rdi
  4043e0:	pop    rsi
  4043e1:	pop    rbx
  4043e2:	leave  
  4043e3:	ret    
	...
  4043f0:	push   rbp
  4043f1:	mov    rbp,rsp
  4043f4:	push   rbx
  4043f5:	push   rsi
  4043f6:	push   rdi
  4043f7:	push   r12
  4043f9:	push   r13
  4043fb:	push   r14
  4043fd:	push   r15
  4043ff:	sub    rsp,0x8
  404403:	sub    rsp,0x50
  404407:	call   QWORD PTR ds:0x416164
  40440e:	mov    QWORD PTR [rbp-0x50],rax
  404412:	mov    QWORD PTR ds:0x4119e0,rax
  40441a:	mov    QWORD PTR ds:0x411a00,rax
  404422:	mov    rcx,QWORD PTR ds:0x4119e0
  40442a:	call   40b060 <_setlocale+0xb54>
  40442f:	mov    QWORD PTR [rbp-0x58],rax
  404433:	mov    r15,rax
  404436:	mov    eax,r15d
  404439:	add    eax,0x2
  40443c:	shr    eax,1
  40443e:	movsxd rax,eax
  404441:	lea    rax,[rax*8+0x0]
  404449:	mov    ebx,eax
  40444b:	add    ebx,0x8
  40444e:	mov    eax,r15d
  404451:	add    eax,0x2
  404454:	mov    edx,ebx
  404456:	add    edx,eax
  404458:	xor    ecx,ecx
  40445a:	call   QWORD PTR ds:0x41616c
  404461:	mov    QWORD PTR [rbp-0x60],rax
  404465:	mov    QWORD PTR ds:0x4119d0,rax
  40446d:	mov    eax,ebx
  40446f:	mov    r13,rax
  404472:	add    r13,QWORD PTR ds:0x4119d0
  40447a:	xor    r12d,r12d
  40447d:	mov    eax,r12d
  404480:	mov    rcx,QWORD PTR ds:0x4119d0
  404488:	mov    QWORD PTR [rcx+rax*8],r13
  40448c:	xor    esi,esi
  40448e:	mov    DWORD PTR [rbp-0x48],0x0
  404495:	mov    r14d,0x1
  40449b:	xor    ebx,ebx
  40449d:	xor    edi,edi
  40449f:	jmp    40456e <ProcessAtFile+0x1c7>
  4044a4:	or     esi,esi
  4044a6:	je     4044c7 <ProcessAtFile+0x120>
  4044a8:	cmp    BYTE PTR [rbp-0x41],0x22
  4044ac:	jne    4044b5 <ProcessAtFile+0x10e>
  4044ae:	xor    esi,esi
  4044b0:	jmp    40456b <ProcessAtFile+0x1c4>
  4044b5:	mov    eax,edi
  4044b7:	mov    cl,BYTE PTR [rbp-0x41]
  4044ba:	mov    BYTE PTR [r13+rax*1+0x0],cl
  4044bf:	add    edi,0x1
  4044c2:	jmp    40456b <ProcessAtFile+0x1c4>
  4044c7:	movsx  eax,BYTE PTR [rbp-0x41]
  4044cb:	cmp    eax,0x9
  4044ce:	je     404517 <ProcessAtFile+0x170>
  4044d0:	cmp    eax,0xa
  4044d3:	je     404517 <ProcessAtFile+0x170>
  4044d5:	cmp    eax,0xd
  4044d8:	je     404517 <ProcessAtFile+0x170>
  4044da:	cmp    eax,0x9
  4044dd:	jl     404537 <ProcessAtFile+0x190>
  4044df:	cmp    eax,0x20
  4044e2:	je     404517 <ProcessAtFile+0x170>
  4044e4:	cmp    eax,0x22
  4044e7:	jne    404537 <ProcessAtFile+0x190>
  4044e9:	mov    esi,0x1
  4044ee:	mov    DWORD PTR [rbp-0x48],0x1
  4044f5:	or     r14d,r14d
  4044f8:	je     404512 <ProcessAtFile+0x16b>
  4044fa:	mov    eax,r12d
  4044fd:	mov    rcx,QWORD PTR ds:0x4119d0
  404505:	mov    edx,edi
  404507:	add    rdx,r13
  40450a:	mov    QWORD PTR [rcx+rax*8],rdx
  40450e:	add    r12d,0x1
  404512:	xor    r14d,r14d
  404515:	jmp    40456b <ProcessAtFile+0x1c4>
  404517:	or     DWORD PTR [rbp-0x48],0x0
  40451b:	je     404528 <ProcessAtFile+0x181>
  40451d:	mov    eax,edi
  40451f:	mov    BYTE PTR [r13+rax*1+0x0],0x0
  404525:	add    edi,0x1
  404528:	mov    DWORD PTR [rbp-0x48],0x0
  40452f:	mov    r14d,0x1
  404535:	jmp    40456b <ProcessAtFile+0x1c4>
  404537:	mov    DWORD PTR [rbp-0x48],0x1
  40453e:	or     r14d,r14d
  404541:	je     40455b <ProcessAtFile+0x1b4>
  404543:	mov    eax,r12d
  404546:	mov    rcx,QWORD PTR ds:0x4119d0
  40454e:	mov    edx,edi
  404550:	add    rdx,r13
  404553:	mov    QWORD PTR [rcx+rax*8],rdx
  404557:	add    r12d,0x1
  40455b:	mov    eax,edi
  40455d:	mov    cl,BYTE PTR [rbp-0x41]
  404560:	mov    BYTE PTR [r13+rax*1+0x0],cl
  404565:	add    edi,0x1
  404568:	xor    r14d,r14d
  40456b:	add    ebx,0x1
  40456e:	mov    eax,ebx
  404570:	rex.W
  404571:	.byte 0x8b
  404572:	or     al,0x25
  404574:	.byte 0xe0

0000000000404575 <ExpandFileName>:
  404575:	sbb    DWORD PTR [rcx+0x0],eax
  404578:	mov    al,BYTE PTR [rcx+rax*1]
  40457b:	mov    BYTE PTR [rbp-0x41],al
  40457e:	movsx  eax,al
  404581:	or     eax,eax
  404583:	jne    4044a4 <ProcessAtFile+0xfd>
  404589:	mov    eax,edi
  40458b:	mov    BYTE PTR [r13+rax*1+0x0],0x0
  404591:	mov    eax,r12d
  404594:	mov    rcx,QWORD PTR ds:0x4119d0
  40459c:	mov    QWORD PTR [rcx+rax*8],0x0
  4045a4:	mov    DWORD PTR ds:0x4119f0,r12d
  4045ac:	mov    rax,QWORD PTR ds:0x4119d0
  4045b4:	add    rsp,0x50
  4045b8:	add    rsp,0x8
  4045bc:	pop    r15
  4045be:	pop    r14
  4045c0:	pop    r13
  4045c2:	pop    r12
  4045c4:	pop    rdi
  4045c5:	pop    rsi
  4045c6:	pop    rbx
  4045c7:	leave  
  4045c8:	ret    
  4045c9:	push   rbp
  4045ca:	mov    rbp,rsp
  4045cd:	push   rbx
  4045ce:	sub    rsp,0x8
  4045d2:	sub    rsp,0x40
  4045d6:	call   403bc0 <ListMembers+0xbf>
  4045db:	mov    DWORD PTR [rbp-0x14],eax
  4045de:	mov    ebx,eax
  4045e0:	or     ebx,ebx
  4045e2:	jne    404614 <ExpandFileName+0x9f>
  4045e4:	call   4043f0 <ProcessAtFile+0x49>
  4045e9:	mov    rax,rsp
  4045ec:	add    rax,0x10
  4045f0:	shr    rax,0x4
  4045f4:	shl    rax,0x4
  4045f8:	mov    rsp,rax
  4045fb:	mov    rdx,QWORD PTR ds:0x4119d0
  404603:	mov    ecx,DWORD PTR ds:0x4119f0
  40460a:	call   403036 <WriteOneBigEndianLong+0xd>
  40460f:	mov    DWORD PTR [rbp-0x18],eax
  404612:	mov    ebx,eax
  404614:	mov    ecx,ebx
  404616:	call   40467b <ExpandFileName+0x106>
  40461b:	add    rsp,0x40
  40461f:	add    rsp,0x8
  404623:	pop    rbx
  404624:	leave  
  404625:	ret    
  404626:	nop
  404627:	nop
	...
  404630:	push   rbp
  404631:	mov    rbp,rsp
  404634:	push   rbx
  404635:	sub    rsp,0x8
  404639:	sub    rsp,0x30
  40463d:	mov    rbx,rcx
  404640:	mov    ecx,ebx
  404642:	call   QWORD PTR ds:0x41617c
  404649:	add    rsp,0x30
  40464d:	add    rsp,0x8
  404651:	pop    rbx
  404652:	leave  
  404653:	ret    
  404654:	push   rbp
  404655:	mov    rbp,rsp
  404658:	push   rbx
  404659:	sub    rsp,0x8
  40465d:	sub    rsp,0x30
  404661:	mov    rbx,rcx
  404664:	call   404960 <abort>
  404669:	mov    ecx,ebx
  40466b:	call   404630 <ExpandFileName+0xbb>
  404670:	add    rsp,0x30
  404674:	add    rsp,0x8
  404678:	pop    rbx
  404679:	leave  
  40467a:	ret    
  40467b:	push   rbp
  40467c:	mov    rbp,rsp
  40467f:	push   rbx
  404680:	push   rsi
  404681:	sub    rsp,0x30
  404685:	mov    QWORD PTR [rbp+0x10],rcx
  404689:	mov    rax,QWORD PTR ds:0x4119c0
  404691:	or     DWORD PTR [rax+0x1c],0x0
  404695:	je     4046d9 <ExpandFileName+0x164>
  404697:	mov    rax,QWORD PTR ds:0x4119c0
  40469f:	mov    rbx,QWORD PTR [rax+0x78]
  4046a3:	mov    rax,QWORD PTR ds:0x4119c0
  4046ab:	lea    rax,[rax+0x1c]
  4046af:	mov    ecx,DWORD PTR [rax]
  4046b1:	sub    ecx,0x1
  4046b4:	mov    DWORD PTR [rax],ecx
  4046b6:	movsxd rax,ecx
  4046b9:	lea    rbx,[rbx+rax*4]
  4046bd:	mov    rax,QWORD PTR ds:0x4119c0
  4046c5:	mov    esi,DWORD PTR [rax+0x1c]
  4046c8:	jmp    4046d5 <ExpandFileName+0x160>
  4046ca:	mov    eax,DWORD PTR [rbx]
  4046cc:	call   rax
  4046ce:	lea    rbx,[rbx-0x4]
  4046d2:	sub    esi,0x1
  4046d5:	or     esi,esi
  4046d7:	jge    4046ca <ExpandFileName+0x155>
  4046d9:	mov    ecx,DWORD PTR [rbp+0x10]
  4046dc:	call   404654 <ExpandFileName+0xdf>
  4046e1:	add    rsp,0x30
  4046e5:	pop    rsi
  4046e6:	pop    rbx
  4046e7:	leave  
  4046e8:	ret    
  4046e9:	push   rbp
  4046ea:	mov    rbp,rsp
  4046ed:	push   rbx
  4046ee:	sub    rsp,0x8
  4046f2:	sub    rsp,0x40
  4046f6:	mov    rbx,rcx
  4046f9:	mov    rax,QWORD PTR ds:0x4119c0
  404701:	mov    eax,DWORD PTR [rax+0x1c]
  404704:	or     eax,eax
  404706:	jne    404741 <ExpandFileName+0x1cc>
  404708:	mov    rdx,0x8
  40470f:	mov    rcx,0x200
  404716:	call   403b60 <ListMembers+0x5f>
  40471b:	mov    QWORD PTR [rbp-0x18],rax
  40471f:	mov    rcx,QWORD PTR ds:0x4119c0
  404727:	mov    QWORD PTR [rcx+0x78],rax
  40472b:	mov    rax,QWORD PTR ds:0x4119c0
  404733:	cmp    QWORD PTR [rax+0x78],0x0
  404738:	jne    404741 <ExpandFileName+0x1cc>
  40473a:	mov    eax,0xffffffff
  40473f:	jmp    404783 <ExpandFileName+0x20e>
  404741:	mov    rax,QWORD PTR ds:0x4119c0
  404749:	cmp    DWORD PTR [rax+0x1c],0x200
  404750:	jl     404759 <ExpandFileName+0x1e4>
  404752:	mov    eax,0xffffffff
  404757:	jmp    404783 <ExpandFileName+0x20e>
  404759:	mov    rax,QWORD PTR ds:0x4119c0
  404761:	lea    rax,[rax+0x1c]
  404765:	mov    ecx,DWORD PTR [rax]
  404767:	mov    edx,ecx
  404769:	add    edx,0x1
  40476c:	mov    DWORD PTR [rax],edx
  40476e:	movsxd rax,ecx
  404771:	mov    rcx,QWORD PTR ds:0x4119c0
  404779:	mov    rcx,QWORD PTR [rcx+0x78]
  40477d:	mov    QWORD PTR [rcx+rax*8],rbx
  404781:	xor    eax,eax
  404783:	add    rsp,0x40
  404787:	add    rsp,0x8
  40478b:	pop    rbx
  40478c:	leave  
  40478d:	ret    
  40478e:	nop
  40478f:	nop
  404790:	push   rax
  404791:	movsd  QWORD PTR [rsp],xmm0
  404796:	fld    QWORD PTR [rsp]
  404799:	fabs   
  40479b:	fstp   QWORD PTR [rsp]
  40479e:	movsd  xmm0,QWORD PTR [rsp]
  4047a3:	pop    rax
  4047a4:	ret    
  4047a5:	fld    TBYTE PTR [rsp+0x28]
  4047a9:	fabs   
  4047ab:	ret    
  4047ac:	add    BYTE PTR [rax],al
  4047ae:	add    BYTE PTR [rax],al
  4047b0:	push   rbp
  4047b1:	mov    rbp,rsp
  4047b4:	push   rbx
  4047b5:	sub    rsp,0x8
  4047b9:	sub    rsp,0x30
  4047bd:	mov    QWORD PTR [rbp+0x10],rcx
  4047c1:	mov    rax,rcx
  4047c4:	mov    rax,QWORD PTR [rax]
  4047c7:	mov    rbx,QWORD PTR [rax+0x58]
  4047cb:	mov    rax,0x0
  4047d2:	cmp    rbx,rax
  4047d5:	je     40480b <ExpandFileName+0x296>
  4047d7:	cmp    QWORD PTR [rbx],0x0
  4047db:	je     4047ec <ExpandFileName+0x277>
  4047dd:	mov    rcx,QWORD PTR [rbx]
  4047e0:	call   404ef0 <_cinit+0x330>
  4047e5:	mov    QWORD PTR [rbx],0x0
  4047ec:	or     rbx,rbx
  4047ef:	je     40480b <ExpandFileName+0x296>
  4047f1:	lea    rcx,[rbx]
  4047f4:	call   404ef0 <_cinit+0x330>
  4047f9:	mov    rbx,0x0
  404800:	mov    rax,QWORD PTR [rbp+0x10]
  404804:	mov    rax,QWORD PTR [rax]
  404807:	mov    QWORD PTR [rax+0x58],rbx
  40480b:	add    rsp,0x30
  40480f:	add    rsp,0x8
  404813:	pop    rbx
  404814:	leave  
  404815:	ret    
  404816:	push   rbp
  404817:	mov    rbp,rsp
  40481a:	push   rbx
  40481b:	sub    rsp,0x8
  40481f:	sub    rsp,0x40
  404823:	mov    QWORD PTR [rbp+0x10],rcx
  404827:	cmp    QWORD PTR [rbp+0x10],0x0
  40482c:	jne    404838 <ExpandFileName+0x2c3>
  40482e:	mov    eax,0xffffffff
  404833:	jmp    404953 <ExpandFileName+0x3de>
  404838:	mov    rcx,QWORD PTR [rbp+0x10]
  40483c:	call   4049d0 <_assertfail+0x40>
  404841:	mov    DWORD PTR [rbp-0x14],eax
  404844:	mov    ebx,eax
  404846:	mov    rax,QWORD PTR [rbp+0x10]
  40484a:	test   DWORD PTR [rax],0x40
  404850:	je     40485f <ExpandFileName+0x2ea>
  404852:	mov    rax,QWORD PTR [rbp+0x10]
  404856:	mov    rcx,QWORD PTR [rax+0x10]
  40485a:	call   404ef0 <_cinit+0x330>
  40485f:	mov    rax,QWORD PTR [rbp+0x10]
  404863:	mov    QWORD PTR [rax+0x10],0x0
  40486b:	lea    rcx,[rbp+0x10]
  40486f:	call   4047b0 <ExpandFileName+0x23b>
  404874:	mov    rcx,QWORD PTR [rbp+0x10]
  404878:	call   40bbe0 <_setlocale+0x16d4>
  40487d:	mov    DWORD PTR [rbp-0x18],eax
  404880:	or     eax,eax
  404882:	je     404889 <ExpandFileName+0x314>
  404884:	mov    ebx,0xffffffff
  404889:	mov    rax,QWORD PTR [rbp+0x10]
  40488d:	cmp    QWORD PTR [rax+0x48],0x0
  404892:	je     4048c6 <ExpandFileName+0x351>
  404894:	mov    rax,QWORD PTR [rbp+0x10]
  404898:	mov    rcx,QWORD PTR [rax+0x48]
  40489c:	call   409380 <__qtoasc+0x4ba>
  4048a1:	mov    DWORD PTR [rbp-0x1c],eax
  4048a4:	or     eax,eax
  4048a6:	je     4048ad <ExpandFileName+0x338>
  4048a8:	mov    ebx,0xffffffff
  4048ad:	mov    rax,QWORD PTR [rbp+0x10]
  4048b1:	mov    rcx,QWORD PTR [rax+0x48]
  4048b5:	call   404ef0 <_cinit+0x330>
  4048ba:	mov    rax,QWORD PTR [rbp+0x10]
  4048be:	mov    QWORD PTR [rax+0x48],0x0
  4048c6:	mov    rax,QWORD PTR [rbp+0x10]
  4048ca:	mov    DWORD PTR [rax],0x0
  4048d0:	mov    rax,QWORD PTR [rbp+0x10]
  4048d4:	lea    rcx,[rax+0x44]
  4048d8:	mov    QWORD PTR [rax+0x20],rcx
  4048dc:	mov    rax,QWORD PTR [rbp+0x10]
  4048e0:	lea    rcx,[rax+0x44]
  4048e4:	mov    QWORD PTR [rax+0x28],rcx
  4048e8:	mov    rax,QWORD PTR [rbp+0x10]
  4048ec:	lea    rcx,[rax+0x44]
  4048f0:	mov    QWORD PTR [rax+0x38],rcx
  4048f4:	mov    rax,QWORD PTR [rbp+0x10]
  4048f8:	mov    BYTE PTR [rax+0x45],0x0
  4048fc:	mov    rax,QWORD PTR [rbp+0x10]
  404900:	test   DWORD PTR [rax],0x80
  404906:	je     404951 <ExpandFileName+0x3dc>
  404908:	mov    QWORD PTR [rbp-0x20],0x0
  404910:	jmp    404941 <ExpandFileName+0x3cc>
  404912:	mov    rax,QWORD PTR [rbp-0x20]
  404916:	movsxd rax,eax
  404919:	mov    rax,QWORD PTR [rax*8+0x414ca0]
  404921:	cmp    rax,QWORD PTR [rbp+0x10]
  404925:	jne    40493c <ExpandFileName+0x3c7>
  404927:	mov    rax,QWORD PTR [rbp-0x20]
  40492b:	movsxd rax,eax
  40492e:	mov    QWORD PTR [rax*8+0x414ca0],0x0
  40493a:	jmp    404948 <ExpandFileName+0x3d3>
  40493c:	add    QWORD PTR [rbp-0x20],0x1
  404941:	cmp    QWORD PTR [rbp-0x20],0x50
  404946:	jb     404912 <ExpandFileName+0x39d>
  404948:	mov    rcx,QWORD PTR [rbp+0x10]
  40494c:	call   404ef0 <_cinit+0x330>
  404951:	mov    eax,ebx
  404953:	add    rsp,0x40
  404957:	add    rsp,0x8
  40495b:	pop    rbx
  40495c:	leave  
  40495d:	ret    
  40495e:	nop
  40495f:	nop

0000000000404960 <abort>:
  404960:	push   rbp
  404961:	mov    rbp,rsp
  404964:	push   rbx
  404965:	sub    rsp,0x8
  404969:	sub    rsp,0x40
  40496d:	mov    rcx,QWORD PTR ds:0x414ca8
  404975:	call   4049d0 <_assertfail+0x40>
  40497a:	mov    rcx,QWORD PTR ds:0x414cb0
  404982:	call   4049d0 <_assertfail+0x40>
  404987:	mov    ebx,0x3
  40498c:	movsxd rax,ebx
  40498f:	rex.W

0000000000404990 <_assertfail>:
  404990:	mov    eax,DWORD PTR [rax*8+0x414ca0]
  404997:	or     rax,rax
  40499a:	je     4049b4 <_assertfail+0x24>
  40499c:	test   DWORD PTR [rax],0x3000
  4049a2:	je     4049b4 <_assertfail+0x24>
  4049a4:	movsxd rax,ebx
  4049a7:	mov    rcx,QWORD PTR [rax*8+0x414ca0]
  4049af:	call   404816 <ExpandFileName+0x2a1>
  4049b4:	add    ebx,0x1
  4049b7:	cmp    ebx,0x50
  4049ba:	jl     40498c <abort+0x2c>
  4049bc:	mov    eax,0x1
  4049c1:	add    rsp,0x40
  4049c5:	add    rsp,0x8
  4049c9:	pop    rbx
  4049ca:	leave  
  4049cb:	ret    
  4049cc:	add    BYTE PTR [rax],al
  4049ce:	add    BYTE PTR [rax],al
  4049d0:	push   rbp
  4049d1:	mov    rbp,rsp
  4049d4:	push   rbx
  4049d5:	push   rsi
  4049d6:	push   rdi
  4049d7:	push   r12
  4049d9:	push   r13
  4049db:	sub    rsp,0x8
  4049df:	sub    rsp,0x50
  4049e3:	mov    rbx,rcx
  4049e6:	mov    rax,0x0
  4049ed:	cmp    rbx,rax
  4049f0:	jne    404a2c <_assertfailfn+0x7>
  4049f2:	xor    r13d,r13d
  4049f5:	xor    r12d,r12d
  4049f8:	movsxd rax,r12d
  4049fb:	mov    rax,QWORD PTR [rax*8+0x414ca0]
  404a03:	or     rax,rax
  404a06:	je     404a1d <_assertfail+0x8d>
  404a08:	lea    rcx,[rax]
  404a0b:	call   4049d0 <_assertfail+0x40>
  404a10:	mov    DWORD PTR [rbp-0x34],eax
  404a13:	or     eax,eax
  404a15:	jge    404a1d <_assertfail+0x8d>
  404a17:	mov    r13d,0xffffffff
  404a1d:	mov    eax,r13d
  404a20:	jmp    404a98 <_assertfailfn+0x73>
  404a22:	rex.B
  404a23:	.byte 0x83
  404a24:	.byte 0xc4

0000000000404a25 <_assertfailfn>:
  404a25:	add    DWORD PTR [rcx-0x7d],eax
  404a28:	cld    
  404a29:	push   rax
  404a2a:	jl     4049f8 <_assertfail+0x68>
  404a2c:	test   DWORD PTR [rbx],0x2000
  404a32:	jne    404a38 <_assertfailfn+0x13>
  404a34:	xor    eax,eax
  404a36:	jmp    404a98 <_assertfailfn+0x73>
  404a38:	mov    rsi,QWORD PTR [rbx+0x10]
  404a3c:	jmp    404a7d <_assertfailfn+0x58>
  404a3e:	mov    r8,QWORD PTR [rbx+0x20]
  404a42:	sub    r8,rsi
  404a45:	lea    rdx,[rsi]
  404a48:	lea    rcx,[rbx]
  404a4b:	call   40c200 <_strtoul+0x70>
  404a50:	mov    DWORD PTR [rbp-0x34],eax
  404a53:	mov    edi,eax
  404a55:	or     edi,edi
  404a57:	jg     404a76 <_assertfailfn+0x51>
  404a59:	mov    rax,QWORD PTR [rbx+0x10]
  404a5d:	mov    QWORD PTR [rbx+0x20],rax
  404a61:	mov    rax,QWORD PTR [rbx+0x10]
  404a65:	mov    QWORD PTR [rbx+0x38],rax
  404a69:	or     DWORD PTR [rbx],0x200
  404a6f:	mov    eax,0xffffffff
  404a74:	jmp    404a98 <_assertfailfn+0x73>
  404a76:	movsxd rax,edi
  404a79:	lea    rsi,[rsi+rax*1]
  404a7d:	mov    rax,QWORD PTR [rbx+0x20]
  404a81:	cmp    rsi,rax
  404a84:	jb     404a3e <_assertfailfn+0x19>
  404a86:	mov    rax,QWORD PTR [rbx+0x10]
  404a8a:	mov    QWORD PTR [rbx+0x20],rax
  404a8e:	mov    rax,QWORD PTR [rbx+0x18]
  404a92:	mov    QWORD PTR [rbx+0x38],rax
  404a96:	xor    eax,eax
  404a98:	add    rsp,0x50
  404a9c:	add    rsp,0x8
  404aa0:	pop    r13
  404aa2:	pop    r12
  404aa4:	pop    rdi
  404aa5:	pop    rsi
  404aa6:	pop    rbx
  404aa7:	leave  
  404aa8:	ret    
  404aa9:	nop
  404aaa:	nop
  404aab:	nop
  404aac:	add    BYTE PTR [rax],al
  404aae:	add    BYTE PTR [rax],al
  404ab0:	fld    TBYTE PTR [rsp+0x28]
  404ab4:	sub    rsp,0x8
  404ab8:	fstcw  WORD PTR [rsp+0x4]
  404abd:	mov    edx,0x400
  404ac2:	or     edx,DWORD PTR [rsp+0x4]
  404ac6:	and    edx,0xf7ff
  404acc:	mov    DWORD PTR [rsp],edx
  404acf:	.byte 0xd9

0000000000404ad0 <atoi>:
  404ad0:	sub    al,0x24
  404ad2:	frndint 
  404ad4:	fldcw  WORD PTR [rsp+0x4]
  404ad8:	add    esp,0x8
  404adb:	ret    
  404adc:	add    BYTE PTR [rax],al
  404ade:	add    BYTE PTR [rax],al
  404ae0:	fld    TBYTE PTR [rsp+0x38]
  404ae4:	fld    TBYTE PTR [rsp+0x28]
  404ae8:	fprem  
  404aea:	fstsw  ax
  404aed:	sahf   
  404aee:	jp     404ae8 <atoi+0x18>
  404af0:	fstp   st(1)
  404af2:	ret    
  404af3:	nop
	...
  404b00:	push   rbp
  404b01:	mov    rbp,rsp
  404b04:	push   rbx
  404b05:	push   rsi
  404b06:	push   rdi
  404b07:	push   r12
  404b09:	sub    rsp,0x60
  404b0d:	mov    QWORD PTR [rbp+0x18],rdx
  404b11:	mov    r12,rcx
  404b14:	mov    rax,0x0
  404b1b:	cmp    r12,rax
  404b1e:	je     404b27 <atoi+0x57>
  404b20:	cmp    QWORD PTR [rbp+0x18],0x0
  404b25:	jne    404b33 <atoi+0x63>
  404b27:	mov    rax,0x0
  404b2e:	jmp    404c56 <_cinit+0x96>
  404b33:	xor    ebx,ebx
  404b35:	jmp    404c29 <_cinit+0x69>
  404b3a:	movsxd rax,ebx
  404b3d:	cmp    QWORD PTR [rax*8+0x414ca0],0x0
  404b46:	jne    404c07 <_cinit+0x47>
  404b4c:	mov    rcx,0x60
  404b53:	call   405720 <atexit+0x37>
  404b58:	mov    QWORD PTR [rbp-0x28],rax
  404b5c:	mov    rsi,rax
  404b5f:	rex.W

0000000000404b60 <calloc>:
  404b60:	mov    eax,0x0
  404b66:	cmp    rsi,rax
  404b69:	jne    404b77 <calloc+0x17>
  404b6b:	mov    rax,0x0
  404b72:	jmp    404c56 <_cinit+0x96>
  404b77:	mov    QWORD PTR [rsi+0x58],0x0
  404b7f:	mov    QWORD PTR [rsi+0x50],0x0
  404b87:	mov    rcx,0x8
  404b8e:	call   405720 <atexit+0x37>
  404b93:	mov    QWORD PTR [rbp-0x30],rax
  404b97:	mov    rdi,rax
  404b9a:	mov    rax,0x0
  404ba1:	cmp    rdi,rax
  404ba4:	jne    404bba <calloc+0x5a>
  404ba6:	lea    rcx,[rsi]
  404ba9:	call   404ef0 <_cinit+0x330>
  404bae:	mov    rax,0x0
  404bb5:	jmp    404c56 <_cinit+0x96>
  404bba:	lea    rcx,[r12]
  404bbe:	.byte 0xe8
  404bbf:	.byte 0x3d

0000000000404bc0 <_cinit>:
  404bc0:	movsxd eax,DWORD PTR [rax]
  404bc2:	add    BYTE PTR [rax-0x77],cl
  404bc5:	rex.RB enter 0x8948,0x7
  404bca:	cmp    QWORD PTR [rdi],0x0
  404bce:	jne    404bf0 <_cinit+0x30>
  404bd0:	lea    rcx,[rsi]
  404bd3:	call   404ef0 <_cinit+0x330>
  404bd8:	lea    rcx,[rdi]
  404bdb:	call   404ef0 <_cinit+0x330>
  404be0:	mov    rdi,0x0
  404be7:	mov    rax,0x0
  404bee:	jmp    404c56 <_cinit+0x96>
  404bf0:	mov    QWORD PTR [rsi+0x58],rdi
  404bf4:	movsxd rax,ebx
  404bf7:	mov    QWORD PTR [rax*8+0x414ca0],rsi
  404bff:	mov    DWORD PTR [rsi],0x80
  404c05:	jmp    404c33 <_cinit+0x73>
  404c07:	movsxd rax,ebx
  404c0a:	mov    rax,QWORD PTR [rax*8+0x414ca0]
  404c12:	mov    eax,DWORD PTR [rax]
  404c14:	or     eax,eax
  404c16:	jne    404c25 <_cinit+0x65>
  404c18:	movsxd rax,ebx
  404c1b:	mov    rsi,QWORD PTR [rax*8+0x414ca0]
  404c23:	jmp    404c33 <_cinit+0x73>
  404c25:	add    rbx,0x1
  404c29:	cmp    rbx,0x50
  404c2d:	jb     404b3a <atoi+0x6a>
  404c33:	cmp    rbx,0x50
  404c37:	jb     404c42 <_cinit+0x82>
  404c39:	mov    rax,0x0
  404c40:	jmp    404c56 <_cinit+0x96>
  404c42:	lea    r8,[rsi]
  404c45:	mov    rdx,QWORD PTR [rbp+0x18]
  404c49:	lea    rcx,[r12]
  404c4d:	call   40bd40 <sprintf+0x51>
  404c52:	mov    QWORD PTR [rbp-0x28],rax
  404c56:	add    rsp,0x60
  404c5a:	pop    r12
  404c5c:	pop    rdi
  404c5d:	pop    rsi
  404c5e:	pop    rbx
  404c5f:	leave  
  404c60:	ret    
  404c61:	nop
  404c62:	nop
  404c63:	nop
	...
  404c70:	push   rbp
  404c71:	mov    rbp,rsp
  404c74:	push   rsi
  404c75:	push   rdi
  404c76:	sub    rsp,0x10
  404c7a:	movsd  xmm1,xmm0
  404c7e:	xor    esi,esi
  404c80:	movsd  QWORD PTR [rbp-0x18],xmm1
  404c85:	mov    r11d,DWORD PTR [rbp-0x14]
  404c89:	mov    r8d,DWORD PTR [rbp-0x18]
  404c8d:	mov    eax,r11d
  404c90:	and    eax,0xfffff
  404c95:	or     r8d,eax
  404c98:	and    r11d,0x7ff00000
  404c9f:	mov    eax,r11d
  404ca2:	or     eax,r8d
  404ca5:	or     eax,eax
  404ca7:	jne    404cb0 <_cinit+0xf0>
  404ca9:	mov    esi,0x40
  404cae:	jmp    404cd8 <_cinit+0x118>
  404cb0:	or     r11d,r11d
  404cb3:	jne    404cbc <_cinit+0xfc>
  404cb5:	mov    esi,0x45
  404cba:	jmp    404cd8 <_cinit+0x118>
  404cbc:	cmp    r11d,0x7ff00000
  404cc3:	jne    404cd8 <_cinit+0x118>
  404cc5:	or     r8d,r8d
  404cc8:	sete   sil
  404ccc:	and    esi,0x1
  404ccf:	sub    esi,0x1
  404cd2:	and    esi,0xfffffffc
  404cd5:	add    esi,0x5
  404cd8:	mov    eax,esi
  404cda:	add    rsp,0x10
  404cde:	pop    rdi
  404cdf:	pop    rsi
  404ce0:	leave  
  404ce1:	ret    
  404ce2:	push   rbp
  404ce3:	mov    rbp,rsp
  404ce6:	sub    rsp,0x30
  404cea:	movsd  QWORD PTR [rbp+0x10],xmm0
  404cef:	movsd  xmm0,QWORD PTR [rbp+0x10]
  404cf4:	call   404c70 <_cinit+0xb0>
  404cf9:	add    rsp,0x30
  404cfd:	leave  
  404cfe:	ret    
  404cff:	push   rbp
  404d00:	mov    rbp,rsp
  404d03:	sub    rsp,0x30
  404d07:	fld    TBYTE PTR [rbp+0x30]
  404d0a:	sub    rsp,0x8
  404d0e:	fstp   QWORD PTR [rsp]
  404d11:	movq   xmm0,QWORD PTR [rsp]
  404d16:	add    rsp,0x8
  404d1a:	call   404c70 <_cinit+0xb0>
  404d1f:	add    rsp,0x30
  404d23:	leave  
  404d24:	ret    
  404d25:	push   rbp
  404d26:	mov    rbp,rsp
  404d29:	sub    rsp,0x30
  404d2d:	movss  DWORD PTR [rbp+0x10],xmm0
  404d32:	cvtss2sd xmm0,DWORD PTR [rbp+0x10]
  404d37:	call   404c70 <_cinit+0xb0>
  404d3c:	add    rsp,0x30
  404d40:	leave  
  404d41:	ret    
  404d42:	nop
  404d43:	nop
	...
  404d50:	push   rbp
  404d51:	mov    rbp,rsp
  404d54:	push   rbx
  404d55:	sub    rsp,0x8
  404d59:	sub    rsp,0x40
  404d5d:	mov    rbx,rdx
  404d60:	mov    QWORD PTR [rbp+0x10],rcx
  404d64:	mov    eax,ecx
  404d66:	mov    BYTE PTR [rbp-0x11],al
  404d69:	mov    rax,QWORD PTR [rbx+0x38]
  404d6d:	cmp    QWORD PTR [rbx+0x20],rax
  404d71:	jae    404d75 <_cinit+0x1b5>
  404d73:	jmp    404d8b <_cinit+0x1cb>
  404d75:	lea    rcx,[rbx]
  404d78:	call   40c130 <strnicmp+0x70>
  404d7d:	mov    DWORD PTR [rbp-0x18],eax
  404d80:	or     eax,eax
  404d82:	jge    404d8b <_cinit+0x1cb>
  404d84:	mov    eax,0xffffffff
  404d89:	jmp    404dd4 <_cinit+0x214>
  404d8b:	mov    rax,QWORD PTR [rbx+0x20]
  404d8f:	lea    rcx,[rax+0x1]
  404d93:	mov    QWORD PTR [rbx+0x20],rcx
  404d97:	mov    cl,BYTE PTR [rbp-0x11]
  404d9a:	mov    BYTE PTR [rax],cl
  404d9c:	test   DWORD PTR [rbx],0xc00
  404da2:	je     404dd0 <_cinit+0x210>
  404da4:	mov    rax,QWORD PTR [rbx+0x10]
  404da8:	mov    QWORD PTR [rbx+0x38],rax
  404dac:	test   DWORD PTR [rbx],0x800
  404db2:	jne    404dba <_cinit+0x1fa>
  404db4:	cmp    BYTE PTR [rbp-0x11],0xa
  404db8:	jne    404dd0 <_cinit+0x210>
  404dba:	lea    rcx,[rbx]
  404dbd:	call   4049d0 <_assertfail+0x40>
  404dc2:	mov    DWORD PTR [rbp-0x1c],eax
  404dc5:	or     eax,eax
  404dc7:	je     404dd0 <_cinit+0x210>
  404dc9:	mov    eax,0xffffffff
  404dce:	jmp    404dd4 <_cinit+0x214>
  404dd0:	movzx  eax,BYTE PTR [rbp-0x11]
  404dd4:	add    rsp,0x40
  404dd8:	add    rsp,0x8
  404ddc:	pop    rbx
  404ddd:	leave  
  404dde:	ret    
  404ddf:	nop
  404de0:	push   rbp
  404de1:	mov    rbp,rsp
  404de4:	push   rbx
  404de5:	push   rsi
  404de6:	push   rdi
  404de7:	push   r12
  404de9:	push   r13
  404deb:	sub    rsp,0x8
  404def:	sub    rsp,0x50
  404df3:	mov    rbx,r9
  404df6:	mov    QWORD PTR [rbp+0x20],r8
  404dfa:	mov    r13,rdx
  404dfd:	mov    QWORD PTR [rbp+0x10],rcx
  404e01:	mov    rdi,r13
  404e04:	imul   rdi,QWORD PTR [rbp+0x20]
  404e09:	mov    r12,QWORD PTR [rbp+0x10]
  404e0d:	or     rdi,rdi
  404e10:	je     404e1e <_cinit+0x25e>
  404e12:	mov    rax,0x0
  404e19:	cmp    rbx,rax
  404e1c:	jne    404e25 <_cinit+0x265>
  404e1e:	xor    eax,eax
  404e20:	jmp    404edc <_cinit+0x31c>
  404e25:	movzx  eax,BYTE PTR [rbx+0x45]
  404e29:	or     eax,eax
  404e2b:	jle    404ec3 <_cinit+0x303>
  404e31:	jmp    404e57 <_cinit+0x297>
  404e33:	lea    rax,[r12]
  404e37:	lea    r12,[rax+0x1]
  404e3b:	movzx  ecx,BYTE PTR [rbx+0x45]
  404e3f:	sub    ecx,0x1
  404e42:	mov    BYTE PTR [rbx+0x45],cl
  404e45:	movzx  ecx,cl
  404e48:	mov    ecx,ecx
  404e4a:	lea    rdx,[rbx+0x40]
  404e4e:	mov    cl,BYTE PTR [rdx+rcx*1]
  404e51:	mov    BYTE PTR [rax],cl
  404e53:	sub    rdi,0x1
  404e57:	or     rdi,rdi
  404e5a:	jbe    404e64 <_cinit+0x2a4>
  404e5c:	movzx  eax,BYTE PTR [rbx+0x45]
  404e60:	or     eax,eax
  404e62:	jg     404e33 <_cinit+0x273>
  404e64:	cmp    BYTE PTR [rbx+0x45],0x0
  404e68:	jne    404ec3 <_cinit+0x303>
  404e6a:	mov    rax,QWORD PTR [rbx+0x30]
  404e6e:	mov    QWORD PTR [rbx+0x28],rax
  404e72:	jmp    404ec3 <_cinit+0x303>
  404e74:	mov    rax,QWORD PTR [rbx+0x28]
  404e78:	cmp    QWORD PTR [rbx+0x20],rax
  404e7c:	jae    404e80 <_cinit+0x2c0>
  404e7e:	jmp    404e8f <_cinit+0x2cf>
  404e80:	lea    rcx,[rbx]
  404e83:	call   40c010 <strlcpy+0x20>
  404e88:	mov    DWORD PTR [rbp-0x34],eax
  404e8b:	or     eax,eax
  404e8d:	jle    404ec8 <_cinit+0x308>
  404e8f:	mov    rax,QWORD PTR [rbx+0x28]
  404e93:	mov    rsi,rax
  404e96:	sub    rsi,QWORD PTR [rbx+0x20]
  404e9a:	cmp    rdi,rsi
  404e9d:	jae    404ea2 <_cinit+0x2e2>
  404e9f:	mov    rsi,rdi
  404ea2:	mov    r8,rsi
  404ea5:	mov    rdx,QWORD PTR [rbx+0x20]
  404ea9:	lea    rcx,[r12]
  404ead:	call   4057a0 <fabs+0x10>
  404eb2:	movsxd rax,esi
  404eb5:	lea    r12,[r12+rax*1]
  404eb9:	sub    rdi,rsi
  404ebc:	movsxd rax,esi
  404ebf:	add    QWORD PTR [rbx+0x20],rax
  404ec3:	or     rdi,rdi
  404ec6:	ja     404e74 <_cinit+0x2b4>
  404ec8:	mov    rcx,r13
  404ecb:	imul   rcx,QWORD PTR [rbp+0x20]
  404ed0:	mov    rax,rcx
  404ed3:	sub    rax,rdi
  404ed6:	xor    rdx,rdx
  404ed9:	div    r13
  404edc:	add    rsp,0x50
  404ee0:	add    rsp,0x8
  404ee4:	pop    r13
  404ee6:	pop    r12
  404ee8:	pop    rdi
  404ee9:	pop    rsi
  404eea:	pop    rbx
  404eeb:	leave  
  404eec:	ret    
  404eed:	nop
  404eee:	nop
  404eef:	nop
  404ef0:	push   rbp
  404ef1:	mov    rbp,rsp
  404ef4:	push   rbx
  404ef5:	sub    rsp,0x8
  404ef9:	sub    rsp,0x30
  404efd:	mov    rbx,rcx
  404f00:	lea    rcx,[rbx]
  404f03:	call   QWORD PTR ds:0x416174
  404f0a:	add    rsp,0x30
  404f0e:	add    rsp,0x8
  404f12:	pop    rbx
  404f13:	leave  
  404f14:	ret    
  404f15:	nop
  404f16:	nop
  404f17:	nop
	...
  404f20:	push   rbp
  404f21:	mov    rbp,rsp
  404f24:	push   rbx
  404f25:	push   rsi
  404f26:	push   rdi
  404f27:	push   r12
  404f29:	sub    rsp,0x50
  404f2d:	mov    r12,rdx
  404f30:	fld    TBYTE PTR [rbp+0x30]
  404f33:	fstp   TBYTE PTR [rbp-0x30]
  404f36:	fld    TBYTE PTR [rbp+0x30]
  404f39:	fstp   TBYTE PTR [rsp+0x20]
  404f3d:	call   4054a0 <CommandLineToArgvA+0xb0>
  404f42:	mov    DWORD PTR [rbp-0x34],eax
  404f45:	or     eax,eax
  404f47:	je     404f59 <_cinit+0x399>
  404f49:	mov    DWORD PTR [r12],0x0
  404f51:	fld    TBYTE PTR [rbp+0x30]
  404f54:	jmp    40500b <_cinit+0x44b>
  404f59:	fld    TBYTE PTR [rbp+0x30]
  404f5c:	fstp   TBYTE PTR [rsp+0x20]
  404f60:	call   4053c0 <_cinit+0x800>
  404f65:	mov    DWORD PTR [rbp-0x38],eax
  404f68:	or     eax,eax
  404f6a:	je     404f7c <_cinit+0x3bc>
  404f6c:	mov    DWORD PTR [r12],0x0
  404f74:	fld    TBYTE PTR [rbp+0x30]
  404f77:	jmp    40500b <_cinit+0x44b>
  404f7c:	fld    TBYTE PTR [rbp+0x30]
  404f7f:	fld    TBYTE PTR ds:0x413640
  404f86:	fucomip st,st(1)
  404f88:	fstp   st(0)
  404f8a:	jp     404f9b <_cinit+0x3db>
  404f8c:	jne    404f9b <_cinit+0x3db>
  404f8e:	mov    DWORD PTR [r12],0x0
  404f96:	fld    TBYTE PTR [rbp+0x30]
  404f99:	jmp    40500b <_cinit+0x44b>
  404f9b:	lea    rdi,[rbp-0x28]
  404f9f:	movsx  ebx,WORD PTR [rdi]
  404fa2:	and    ebx,0x7fff
  404fa8:	jne    404ff3 <_cinit+0x433>
  404faa:	fld    TBYTE PTR [rbp-0x30]
  404fad:	fld    TBYTE PTR ds:0x413640
  404fb4:	fucomip st,st(1)
  404fb6:	fstp   st(0)
  404fb8:	jp     404fcd <_cinit+0x40d>
  404fba:	jne    404fcd <_cinit+0x40d>
  404fbc:	mov    DWORD PTR [r12],0x0
  404fc4:	fld    TBYTE PTR ds:0x413640
  404fcb:	jmp    40500b <_cinit+0x44b>
  404fcd:	fld    TBYTE PTR ds:0x413630
  404fd4:	fld    TBYTE PTR [rbp-0x30]
  404fd7:	fmulp  st(1),st
  404fd9:	fstp   TBYTE PTR [rbp-0x30]
  404fdc:	sub    ebx,0x1
  404fdf:	movsx  esi,WORD PTR [rdi]
  404fe2:	and    esi,0x7fff
  404fe8:	or     esi,esi
  404fea:	jne    404ff1 <_cinit+0x431>
  404fec:	cmp    ebx,0xffffffbe
  404fef:	jg     404fcd <_cinit+0x40d>
  404ff1:	add    ebx,esi
  404ff3:	mov    eax,ebx
  404ff5:	sub    eax,0x3ffe
  404ffa:	mov    DWORD PTR [r12],eax
  404ffe:	and    WORD PTR [rdi],0x8000
  405003:	or     WORD PTR [rdi],0x3ffe
  405008:	fld    TBYTE PTR [rbp-0x30]
  40500b:	add    rsp,0x50
  40500f:	pop    r12
  405011:	pop    rdi
  405012:	pop    rsi
  405013:	pop    rbx
  405014:	leave  
  405015:	ret    
  405016:	nop
  405017:	nop
	...
  405020:	push   rbp
  405021:	mov    rbp,rsp
  405024:	push   rbx
  405025:	sub    rsp,0x8
  405029:	sub    rsp,0x50
  40502d:	mov    QWORD PTR [rbp+0x20],r8
  405031:	mov    QWORD PTR [rbp+0x18],rdx
  405035:	mov    QWORD PTR [rbp+0x10],rcx
  405039:	mov    rax,rdx
  40503c:	mov    QWORD PTR [rbp-0x18],rax
  405040:	mov    r9d,r8d
  405043:	lea    r8,[rbp-0x18]
  405047:	mov    rdx,QWORD PTR [rbp-0x18]
  40504b:	mov    rcx,rcx
  40504e:	call   QWORD PTR ds:0x416194
  405055:	mov    DWORD PTR [rbp-0x20],eax
  405058:	mov    DWORD PTR [rbp-0x1c],eax
  40505b:	or     eax,eax
  40505d:	jne    405068 <_cinit+0x4a8>
  40505f:	mov    rax,0xffffffffffffffff
  405066:	jmp    40506f <_cinit+0x4af>
  405068:	mov    rbx,QWORD PTR [rbp-0x18]
  40506c:	mov    rax,rbx
  40506f:	add    rsp,0x50
  405073:	add    rsp,0x8
  405077:	pop    rbx
  405078:	leave  
  405079:	ret    
  40507a:	push   rbp
  40507b:	mov    rbp,rsp
  40507e:	push   rbx
  40507f:	push   rsi
  405080:	push   rdi
  405081:	push   r12
  405083:	sub    rsp,0x50
  405087:	mov    rdi,r8
  40508a:	mov    rsi,rdx
  40508d:	mov    rbx,rcx
  405090:	lea    rcx,[rbx]
  405093:	call   4049d0 <_assertfail+0x40>
  405098:	mov    DWORD PTR [rbp-0x24],eax
  40509b:	or     eax,eax
  40509d:	je     4050a9 <_cinit+0x4e9>
  40509f:	mov    eax,0xffffffff
  4050a4:	jmp    405151 <_cinit+0x591>
  4050a9:	cmp    edi,0x1
  4050ac:	jne    4050df <_cinit+0x51f>
  4050ae:	test   DWORD PTR [rbx],0x1000
  4050b4:	je     4050df <_cinit+0x51f>
  4050b6:	cmp    BYTE PTR [rbx+0x45],0x0
  4050ba:	je     4050d1 <_cinit+0x511>
  4050bc:	mov    rax,QWORD PTR [rbx+0x30]
  4050c0:	sub    rax,QWORD PTR [rbx+0x20]
  4050c4:	movzx  rcx,BYTE PTR [rbx+0x45]
  4050c9:	mov    r12,rax
  4050cc:	add    r12,rcx
  4050cf:	jmp    4050dc <_cinit+0x51c>
  4050d1:	mov    rax,QWORD PTR [rbx+0x28]
  4050d5:	mov    r12,rax
  4050d8:	sub    r12,QWORD PTR [rbx+0x20]
  4050dc:	sub    rsi,r12
  4050df:	cmp    edi,0x1
  4050e2:	jne    4050e9 <_cinit+0x529>
  4050e4:	or     rsi,rsi
  4050e7:	jne    4050f9 <_cinit+0x539>
  4050e9:	or     edi,edi
  4050eb:	jne    4050f9 <_cinit+0x539>
  4050ed:	mov    rax,0xffffffffffffffff
  4050f4:	cmp    rsi,rax
  4050f7:	je     40510f <_cinit+0x54f>
  4050f9:	mov    r8d,edi
  4050fc:	mov    rdx,rsi
  4050ff:	mov    rcx,QWORD PTR [rbx+0x8]
  405103:	call   405020 <_cinit+0x460>
  405108:	mov    QWORD PTR [rbp-0x30],rax
  40510c:	mov    rsi,rax
  40510f:	mov    rax,0xffffffffffffffff
  405116:	cmp    rsi,rax
  405119:	jne    405122 <_cinit+0x562>
  40511b:	mov    eax,0xffffffff
  405120:	jmp    405151 <_cinit+0x591>
  405122:	test   DWORD PTR [rbx],0x3000
  405128:	je     405146 <_cinit+0x586>
  40512a:	mov    rax,QWORD PTR [rbx+0x10]
  40512e:	mov    QWORD PTR [rbx+0x20],rax
  405132:	mov    rax,QWORD PTR [rbx+0x10]
  405136:	mov    QWORD PTR [rbx+0x28],rax
  40513a:	mov    rax,QWORD PTR [rbx+0x10]
  40513e:	mov    QWORD PTR [rbx+0x38],rax
  405142:	mov    BYTE PTR [rbx+0x45],0x0
  405146:	mov    eax,DWORD PTR [rbx]
  405148:	and    eax,0xffffceff
  40514d:	mov    DWORD PTR [rbx],eax
  40514f:	xor    eax,eax
  405151:	add    rsp,0x50
  405155:	pop    r12
  405157:	pop    rdi
  405158:	pop    rsi
  405159:	pop    rbx
  40515a:	leave  
  40515b:	ret    
  40515c:	add    BYTE PTR [rax],al
  40515e:	add    BYTE PTR [rax],al
  405160:	push   rbp
  405161:	mov    rbp,rsp
  405164:	push   rbx
  405165:	push   rsi
  405166:	push   rdi
  405167:	sub    rsp,0x8
  40516b:	sub    rsp,0x50
  40516f:	mov    rsi,rcx
  405172:	xor    ebx,ebx
  405174:	mov    r8,0x8
  40517b:	xor    edx,edx
  40517d:	lea    rcx,[rbp-0x28]
  405181:	call   405860 <fclose+0x4a>
  405186:	mov    r9,0x1
  40518d:	lea    r8,[rbp-0x28]
  405191:	mov    rdx,QWORD PTR [rbp-0x28]
  405195:	mov    rcx,QWORD PTR [rsi+0x8]
  405199:	call   QWORD PTR ds:0x416194
  4051a0:	mov    DWORD PTR [rbp-0x30],eax
  4051a3:	mov    DWORD PTR [rbp-0x2c],eax
  4051a6:	or     eax,eax
  4051a8:	jne    4051b3 <_cinit+0x5f3>
  4051aa:	mov    rax,0xffffffffffffffff
  4051b1:	jmp    40520d <_cinit+0x64d>
  4051b3:	mov    ebx,DWORD PTR [rbp-0x28]
  4051b6:	movsxd rax,DWORD PTR [rbp-0x24]
  4051ba:	shl    rax,0x20
  4051be:	or     rax,rbx
  4051c1:	mov    rbx,rax
  4051c4:	test   DWORD PTR [rsi],0x2000
  4051ca:	je     4051d9 <_cinit+0x619>
  4051cc:	mov    rax,QWORD PTR [rsi+0x20]
  4051d0:	sub    rax,QWORD PTR [rsi+0x10]
  4051d4:	add    rbx,rax
  4051d7:	jmp    40520a <_cinit+0x64a>
  4051d9:	test   DWORD PTR [rsi],0x1000
  4051df:	je     40520a <_cinit+0x64a>
  4051e1:	cmp    BYTE PTR [rsi+0x45],0x0
  4051e5:	je     4051fc <_cinit+0x63c>
  4051e7:	mov    rax,QWORD PTR [rsi+0x30]
  4051eb:	sub    rax,QWORD PTR [rsi+0x20]
  4051ef:	movzx  rcx,BYTE PTR [rsi+0x45]
  4051f4:	mov    rdi,rax
  4051f7:	add    rdi,rcx
  4051fa:	jmp    405207 <_cinit+0x647>
  4051fc:	mov    rax,QWORD PTR [rsi+0x28]
  405200:	mov    rdi,rax
  405203:	sub    rdi,QWORD PTR [rsi+0x20]
  405207:	sub    rbx,rdi
  40520a:	mov    rax,rbx
  40520d:	add    rsp,0x50
  405211:	add    rsp,0x8
  405215:	pop    rdi
  405216:	pop    rsi
  405217:	pop    rbx
  405218:	leave  
  405219:	ret    
  40521a:	nop
  40521b:	nop
  40521c:	add    BYTE PTR [rax],al
  40521e:	add    BYTE PTR [rax],al
  405220:	push   rbp
  405221:	mov    rbp,rsp
  405224:	push   rbx
  405225:	push   rsi
  405226:	push   rdi
  405227:	push   r12
  405229:	push   r13
  40522b:	push   r14
  40522d:	push   r15
  40522f:	sub    rsp,0x8
  405233:	sub    rsp,0x50
  405237:	mov    rbx,r9
  40523a:	mov    QWORD PTR [rbp+0x20],r8
  40523e:	mov    r15,rdx
  405241:	mov    QWORD PTR [rbp+0x10],rcx
  405245:	mov    r13,QWORD PTR [rbp+0x10]
  405249:	mov    rdi,r15
  40524c:	imul   rdi,QWORD PTR [rbp+0x20]
  405251:	or     rdi,rdi
  405254:	je     405273 <_cinit+0x6b3>
  405256:	mov    rax,r8
  405259:	or     rax,rax
  40525c:	jl     405273 <_cinit+0x6b3>
  40525e:	or     r15,r15
  405261:	jl     405273 <_cinit+0x6b3>
  405263:	cmp    QWORD PTR [rbp+0x10],0x0
  405268:	je     405273 <_cinit+0x6b3>
  40526a:	or     rbx,rbx
  40526d:	jne    40533f <_cinit+0x77f>
  405273:	xor    eax,eax
  405275:	jmp    405373 <_cinit+0x7b3>
  40527a:	mov    rax,QWORD PTR [rbx+0x38]
  40527e:	cmp    QWORD PTR [rbx+0x20],rax
  405282:	jae    405286 <_cinit+0x6c6>
  405284:	jmp    405299 <_cinit+0x6d9>
  405286:	lea    rcx,[rbx]
  405289:	call   40c130 <strnicmp+0x70>
  40528e:	mov    DWORD PTR [rbp-0x44],eax
  405291:	or     eax,eax
  405293:	jl     405348 <_cinit+0x788>
  405299:	test   DWORD PTR [rbx],0x400
  40529f:	je     4052db <_cinit+0x71b>
  4052a1:	mov    r8,rdi
  4052a4:	mov    rdx,0xa
  4052ab:	lea    rcx,[r13+0x0]
  4052af:	call   405750 <atexit+0x67>
  4052b4:	mov    QWORD PTR [rbp-0x50],rax
  4052b8:	mov    r12,rax
  4052bb:	mov    rax,0x0
  4052c2:	cmp    r12,rax
  4052c5:	jne    4052cc <_cinit+0x70c>
  4052c7:	mov    rsi,rdi
  4052ca:	jmp    4052e5 <_cinit+0x725>
  4052cc:	mov    rax,r12
  4052cf:	sub    rax,r13
  4052d2:	mov    rsi,rax
  4052d5:	add    rsi,0x1
  4052d9:	jmp    4052e5 <_cinit+0x725>
  4052db:	mov    r12,0x0
  4052e2:	mov    rsi,rdi
  4052e5:	mov    rax,QWORD PTR [rbx+0x38]
  4052e9:	mov    r14,rax
  4052ec:	sub    r14,QWORD PTR [rbx+0x20]
  4052f0:	cmp    r14,rsi
  4052f3:	jae    4052ff <_cinit+0x73f>
  4052f5:	mov    r12,0x0
  4052fc:	mov    rsi,r14
  4052ff:	mov    r8,rsi
  405302:	lea    rdx,[r13+0x0]
  405306:	mov    rcx,QWORD PTR [rbx+0x20]
  40530a:	call   4057a0 <fabs+0x10>
  40530f:	movsxd rax,esi
  405312:	lea    r13,[r13+rax*1+0x0]
  405317:	sub    rdi,rsi
  40531a:	movsxd rax,esi
  40531d:	add    QWORD PTR [rbx+0x20],rax
  405321:	or     r12,r12
  405324:	je     40533f <_cinit+0x77f>
  405326:	lea    rcx,[rbx]
  405329:	call   4049d0 <_assertfail+0x40>
  40532e:	mov    DWORD PTR [rbp-0x48],eax
  405331:	or     eax,eax
  405333:	je     40533f <_cinit+0x77f>
  405335:	mov    rax,QWORD PTR [rbx+0x10]
  405339:	mov    QWORD PTR [rbx+0x38],rax
  40533d:	jmp    405348 <_cinit+0x788>
  40533f:	or     rdi,rdi
  405342:	jg     40527a <_cinit+0x6ba>
  405348:	test   DWORD PTR [rbx],0x800
  40534e:	je     405360 <_cinit+0x7a0>
  405350:	mov    rax,QWORD PTR [rbx+0x10]
  405354:	mov    QWORD PTR [rbx+0x38],rax
  405358:	lea    rcx,[rbx]
  40535b:	call   4049d0 <_assertfail+0x40>
  405360:	mov    rcx,r15
  405363:	imul   rcx,QWORD PTR [rbp+0x20]
  405368:	mov    rax,rcx
  40536b:	sub    rax,rdi
  40536e:	cqo    
  405370:	idiv   r15
  405373:	add    rsp,0x50
  405377:	add    rsp,0x8
  40537b:	pop    r15
  40537d:	pop    r14
  40537f:	pop    r13
  405381:	pop    r12
  405383:	pop    rdi
  405384:	pop    rsi
  405385:	pop    rbx
  405386:	leave  
  405387:	ret    
	...
  405390:	fld    TBYTE PTR [rsp+0x28]
  405394:	xor    eax,eax
  405396:	fxam   
  405398:	fnstsw ax
  40539a:	mov    ecx,eax
  40539c:	sar    eax,0x8
  40539f:	and    al,0x45
  4053a1:	fstp   st(0)
  4053a3:	cmp    al,0x4
  4053a5:	sete   cl
  4053a8:	cmp    al,0x40
  4053aa:	sete   ch
  4053ad:	or     cl,ch
  4053af:	mov    al,cl
  4053b1:	ret    
  4053b2:	nop
  4053b3:	nop
	...
  4053c0:	push   rbp
  4053c1:	mov    rbp,rsp
  4053c4:	lea    r11,[rbp+0x30]
  4053c8:	mov    eax,DWORD PTR [r11+0x8]
  4053cc:	shl    eax,0x11
  4053cf:	shr    eax,0x11
  4053d2:	cmp    eax,0x7fff
  4053d7:	jne    4053fe <CommandLineToArgvA+0xe>
  4053d9:	mov    eax,DWORD PTR [r11]
  4053dc:	mov    ecx,DWORD PTR [r11+0x4]
  4053e0:	movsxd rcx,ecx
  4053e3:	lea    rcx,[rcx*2+0x0]
  4053eb:	shr    ecx,1
  4053ed:	or     eax,ecx
  4053ef:	.byte 0x9

00000000004053f0 <CommandLineToArgvA>:
  4053f0:	shl    BYTE PTR [rsp+rax*1+0x31],0xc0
  4053f5:	jmp    405400 <CommandLineToArgvA+0x10>
  4053f7:	mov    eax,0x1
  4053fc:	jmp    405400 <CommandLineToArgvA+0x10>
  4053fe:	xor    eax,eax
  405400:	leave  
  405401:	ret    
  405402:	push   rbp
  405403:	mov    rbp,rsp
  405406:	movsd  QWORD PTR [rbp+0x10],xmm0
  40540b:	lea    r11,[rbp+0x10]
  40540f:	mov    eax,DWORD PTR [r11+0x4]
  405413:	movsxd rax,eax
  405416:	lea    rax,[rax*2+0x0]
  40541e:	shr    eax,0x15
  405421:	cmp    eax,0x7ff
  405426:	jne    405446 <CommandLineToArgvA+0x56>
  405428:	mov    eax,DWORD PTR [r11]
  40542b:	mov    ecx,DWORD PTR [r11+0x4]
  40542f:	shl    ecx,0xc
  405432:	shr    ecx,0xc
  405435:	or     eax,ecx
  405437:	or     eax,eax
  405439:	je     40543f <CommandLineToArgvA+0x4f>
  40543b:	xor    eax,eax
  40543d:	jmp    405448 <CommandLineToArgvA+0x58>
  40543f:	mov    eax,0x1
  405444:	jmp    405448 <CommandLineToArgvA+0x58>
  405446:	xor    eax,eax
  405448:	leave  
  405449:	ret    
  40544a:	push   rbp
  40544b:	mov    rbp,rsp
  40544e:	movss  DWORD PTR [rbp+0x10],xmm0
  405453:	lea    r11,[rbp+0x10]
  405457:	mov    eax,DWORD PTR [r11]
  40545a:	movsxd rax,eax
  40545d:	lea    rax,[rax*2+0x0]
  405465:	shr    eax,0x18
  405468:	cmp    eax,0xff
  40546d:	jne    405483 <CommandLineToArgvA+0x93>
  40546f:	test   DWORD PTR [r11],0x7fffff
  405476:	je     40547c <CommandLineToArgvA+0x8c>
  405478:	xor    eax,eax
  40547a:	jmp    405485 <CommandLineToArgvA+0x95>
  40547c:	mov    eax,0x1
  405481:	jmp    405485 <CommandLineToArgvA+0x95>
  405483:	xor    eax,eax
  405485:	leave  
  405486:	ret    
  405487:	push   rbp
  405488:	mov    rbp,rsp
  40548b:	mov    r11,rcx
  40548e:	xor    eax,eax
  405490:	leave  
  405491:	ret    
  405492:	nop
  405493:	nop
	...
  4054a0:	push   rbp
  4054a1:	mov    rbp,rsp
  4054a4:	sub    rsp,0x10
  4054a8:	fld    TBYTE PTR [rbp+0x30]
  4054ab:	fstp   TBYTE PTR [rbp-0x10]
  4054ae:	movzx  eax,WORD PTR [rbp-0x8]
  4054b2:	and    eax,0x7fff
  4054b7:	cmp    eax,0x7fff
  4054bc:	jne    4054d5 <CommandLineToArgvA+0xe5>
  4054be:	test   DWORD PTR [rbp-0xc],0x7fffffff
  4054c5:	jne    4054ce <CommandLineToArgvA+0xde>
  4054c7:	mov    eax,DWORD PTR [rbp-0x10]
  4054ca:	or     eax,eax
  4054cc:	je     4054d5 <CommandLineToArgvA+0xe5>
  4054ce:	mov    eax,0x1
  4054d3:	jmp    4054d7 <CommandLineToArgvA+0xe7>
  4054d5:	xor    eax,eax
  4054d7:	add    rsp,0x10
  4054db:	leave  
  4054dc:	ret    
  4054dd:	push   rbp
  4054de:	mov    rbp,rsp
  4054e1:	sub    rsp,0x30
  4054e5:	movss  DWORD PTR [rbp+0x10],xmm0
  4054ea:	fld    DWORD PTR [rbp+0x10]
  4054ed:	fstp   TBYTE PTR [rsp+0x20]
  4054f1:	call   4054a0 <CommandLineToArgvA+0xb0>
  4054f6:	add    rsp,0x30
  4054fa:	leave  
  4054fb:	ret    
  4054fc:	add    BYTE PTR [rax],al
  4054fe:	add    BYTE PTR [rax],al
  405500:	push   rbp
  405501:	mov    rbp,rsp
  405504:	push   rbx
  405505:	push   rsi
  405506:	push   rdi
  405507:	sub    rsp,0x8
  40550b:	sub    rsp,0x50
  40550f:	mov    rbx,rdx
  405512:	fld    TBYTE PTR [rbp+0x30]
  405515:	fstp   TBYTE PTR [rbp-0x30]
  405518:	lea    rdi,[rbp-0x28]
  40551c:	jmp    405582 <CommandLineToArgvA+0x192>
  40551e:	fld    TBYTE PTR [rbp-0x30]
  405521:	fld    TBYTE PTR ds:0x413670
  405528:	fucomip st,st(1)
  40552a:	fstp   st(0)
  40552c:	jp     40553c <CommandLineToArgvA+0x14c>
  40552e:	jne    40553c <CommandLineToArgvA+0x14c>
  405530:	fld    TBYTE PTR ds:0x413670
  405537:	jmp    405600 <_cstart+0x37>
  40553c:	or     ebx,ebx
  40553e:	jle    405552 <CommandLineToArgvA+0x162>
  405540:	fld    TBYTE PTR ds:0x413660
  405547:	fld    TBYTE PTR [rbp-0x30]
  40554a:	fmulp  st(1),st
  40554c:	fstp   TBYTE PTR [rbp-0x30]
  40554f:	sub    ebx,0x1
  405552:	or     ebx,ebx
  405554:	jge    405579 <CommandLineToArgvA+0x189>
  405556:	cmp    ebx,0xffffffc0
  405559:	jge    405567 <CommandLineToArgvA+0x177>
  40555b:	fld    TBYTE PTR ds:0x413670
  405562:	jmp    405600 <_cstart+0x37>
  405567:	fld    TBYTE PTR ds:0x413650
  40556e:	fld    TBYTE PTR [rbp-0x30]
  405571:	fmulp  st(1),st
  405573:	fstp   TBYTE PTR [rbp-0x30]
  405576:	add    ebx,0x1
  405579:	or     ebx,ebx
  40557b:	jne    405582 <CommandLineToArgvA+0x192>
  40557d:	fld    TBYTE PTR [rbp-0x30]
  405580:	jmp    405600 <_cstart+0x37>
  405582:	movzx  eax,WORD PTR [rdi]
  405585:	and    eax,0x7fff
  40558a:	mov    esi,eax
  40558c:	je     40551e <CommandLineToArgvA+0x12e>
  40558e:	add    esi,ebx
  405590:	cmp    esi,0x7fff
  405596:	jle    4055ab <CommandLineToArgvA+0x1bb>
  405598:	call   405908 <fclose+0xf2>
  40559d:	fstp   TBYTE PTR [rbp-0x50]
  4055a0:	fld    TBYTE PTR [rbp-0x50]
  4055a3:	fstp   TBYTE PTR [rbp-0x40]
  4055a6:	fld    TBYTE PTR [rbp-0x40]
  4055a9:	jmp    405600 <_cstart+0x37>
  4055ab:	and    WORD PTR [rdi],0x8000
  4055b0:	cmp    esi,0x1
  4055b3:	jge    4055e4 <_cstart+0x1b>
  4055b5:	cmp    esi,0xffffffc0
  4055b8:	jge    4055c3 <CommandLineToArgvA+0x1d3>
  4055ba:	fld    TBYTE PTR ds:0x413670
  4055c1:	jmp    405600 <_cstart+0x37>
  4055c3:	or     WORD PTR [rdi-0x2],0x8000

00000000004055c9 <_cstart>:
  4055c9:	jmp    4055dd <_cstart+0x14>
  4055cb:	fld    TBYTE PTR ds:0x413650
  4055d2:	fld    TBYTE PTR [rbp-0x30]
  4055d5:	fmulp  st(1),st
  4055d7:	fstp   TBYTE PTR [rbp-0x30]
  4055da:	add    esi,0x1
  4055dd:	cmp    esi,0x1
  4055e0:	jl     4055cb <_cstart+0x2>
  4055e2:	xor    esi,esi
  4055e4:	movzx  eax,WORD PTR [rdi]
  4055e7:	mov    cx,si
  4055ea:	mov    ecx,ecx
  4055ec:	and    ecx,0xffff
  4055f2:	and    ecx,0x7fff
  4055f8:	or     eax,ecx
  4055fa:	mov    WORD PTR [rdi],ax
  4055fd:	fld    TBYTE PTR [rbp-0x30]
  405600:	add    rsp,0x50
  405604:	add    rsp,0x8
  405608:	pop    rdi
  405609:	pop    rsi
  40560a:	pop    rbx
  40560b:	leave  
  40560c:	ret    
  40560d:	push   rbp
  40560e:	mov    rbp,rsp
  405611:	push   rbx
  405612:	sub    rsp,0x8
  405616:	sub    rsp,0x60
  40561a:	mov    rbx,rdx
  40561d:	movss  DWORD PTR [rbp+0x10],xmm0
  405622:	mov    edx,ebx
  405624:	fld    DWORD PTR [rbp+0x10]
  405627:	fstp   TBYTE PTR [rsp+0x20]
  40562b:	call   405500 <CommandLineToArgvA+0x110>

0000000000405630 <_Exit>:
  405630:	fstp   TBYTE PTR [rbp-0x30]
  405633:	fld    TBYTE PTR [rbp-0x30]
  405636:	fstp   TBYTE PTR [rbp-0x20]
  405639:	fld    TBYTE PTR [rbp-0x20]
  40563c:	sub    rsp,0x8
  405640:	fstp   QWORD PTR [rsp]
  405643:	movq   xmm0,QWORD PTR [rsp]
  405648:	add    rsp,0x8
  40564c:	cvtsd2ss xmm0,xmm0
  405650:	movss  xmm0,xmm0

0000000000405654 <_exit>:
  405654:	add    rsp,0x60
  405658:	add    rsp,0x8
  40565c:	pop    rbx
  40565d:	leave  
  40565e:	ret    
  40565f:	push   rbp
  405660:	mov    rbp,rsp
  405663:	sub    rsp,0x60
  405667:	mov    QWORD PTR [rbp+0x18],rdx
  40566b:	movsd  QWORD PTR [rbp+0x10],xmm0
  405670:	mov    edx,edx
  405672:	movsd  xmm0,QWORD PTR [rbp+0x10]
  405677:	sub    rsp,0x8

000000000040567b <exit>:
  40567b:	movq   QWORD PTR [rsp],xmm0
  405680:	fld    QWORD PTR [rsp]
  405683:	add    rsp,0x8
  405687:	fstp   TBYTE PTR [rsp+0x20]
  40568b:	call   405500 <CommandLineToArgvA+0x110>
  405690:	fstp   TBYTE PTR [rbp-0x20]
  405693:	fld    TBYTE PTR [rbp-0x20]
  405696:	fstp   TBYTE PTR [rbp-0x10]
  405699:	fld    TBYTE PTR [rbp-0x10]
  40569c:	sub    rsp,0x8
  4056a0:	fstp   QWORD PTR [rsp]
  4056a3:	movq   xmm0,QWORD PTR [rsp]
  4056a8:	add    rsp,0x8
  4056ac:	add    rsp,0x60
  4056b0:	leave  
  4056b1:	ret    
  4056b2:	nop
  4056b3:	nop
	...
  4056c0:	push   rbp
  4056c1:	mov    rbp,rsp
  4056c4:	mov    rax,QWORD PTR ds:0x4119c0
  4056cc:	lea    rax,[rax+0xb8]
  4056d3:	leave  
  4056d4:	ret    
  4056d5:	nop
  4056d6:	nop
  4056d7:	nop
	...
  4056e0:	fldlg2 
  4056e2:	fld    TBYTE PTR [rsp+0x28]
  4056e6:	fxam   
  4056e8:	.byte 0xdf

00000000004056e9 <atexit>:
  4056e9:	loopne 4056c4 <exit+0x49>
  4056eb:	rcr    BYTE PTR [rsi+0x24dc2372],0x25
  4056f2:	xor    BYTE PTR [rsi],0x41
  4056f5:	add    cl,bl
  4056f7:	rcr    cl,0xe1
  4056fa:	fcomp  QWORD PTR ds:0x413688
  405701:	fnstsw ax
  405703:	and    ah,0x45
  405706:	je     40570d <atexit+0x24>
  405708:	fstp   st(1)
  40570a:	fyl2xp1 
  40570c:	ret    
  40570d:	fstp   st(0)
  40570f:	fyl2x  
  405711:	ret    
  405712:	jp     4056ef <atexit+0x6>
  405714:	fstp   st(1)
  405716:	fstp   st(1)
  405718:	ret    
  405719:	nop
  40571a:	nop
  40571b:	nop
  40571c:	add    BYTE PTR [rax],al
  40571e:	add    BYTE PTR [rax],al
  405720:	push   rbp
  405721:	mov    rbp,rsp
  405724:	push   rbx
  405725:	sub    rsp,0x8
  405729:	sub    rsp,0x40
  40572d:	mov    rbx,rcx
  405730:	mov    rdx,rbx
  405733:	xor    ecx,ecx
  405735:	call   QWORD PTR ds:0x41616c
  40573c:	mov    QWORD PTR [rbp-0x18],rax
  405740:	add    rsp,0x40
  405744:	add    rsp,0x8
  405748:	pop    rbx
  405749:	leave  
  40574a:	ret    
  40574b:	nop
  40574c:	add    BYTE PTR [rax],al
  40574e:	add    BYTE PTR [rax],al
  405750:	push   rbp
  405751:	mov    rbp,rsp
  405754:	push   rsi
  405755:	sub    rsp,0x8
  405759:	mov    r8,r8
  40575c:	mov    rsi,rdx
  40575f:	mov    r11,rcx
  405762:	jmp    40576c <atexit+0x83>
  405764:	lea    r11,[r11+0x1]
  405768:	sub    r8,0x1
  40576c:	or     r8,r8
  40576f:	je     40577d <atexit+0x94>
  405771:	movzx  eax,BYTE PTR [r11]
  405775:	movzx  ecx,sil
  405779:	cmp    eax,ecx
  40577b:	jne    405764 <atexit+0x7b>
  40577d:	or     r8,r8
  405780:	je     405787 <atexit+0x9e>
  405782:	lea    rsi,[r11]
  405785:	jmp    40578e <atexit+0xa5>
  405787:	mov    rsi,0x0
  40578e:	rex.W
  40578f:	.byte 0x8d

0000000000405790 <fabs>:
  405790:	(bad)  
  405791:	add    rsp,0x8
  405795:	pop    rsi
  405796:	leave  
  405797:	ret    
	...
  4057a0:	mov    rax,rcx
  4057a3:	rex.W
  4057a4:	.byte 0x87

00000000004057a5 <fabsl>:
  4057a5:	repnz mov r10,rdi
  4057a9:	mov    rdi,rax
  4057ac:	mov    rcx,r8
  4057af:	rex.W

00000000004057b0 <freeUserData>:
  4057b0:	sar    ecx,0x3
  4057b3:	je     4057b8 <freeUserData+0x8>
  4057b5:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  4057b8:	mov    rcx,r8
  4057bb:	and    ecx,0x7
  4057be:	je     4057c2 <freeUserData+0x12>
  4057c0:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  4057c2:	mov    rdi,r10
  4057c5:	mov    rsi,rdx
  4057c8:	ret    
  4057c9:	nop
  4057ca:	nop
  4057cb:	nop
  4057cc:	add    BYTE PTR [rax],al
  4057ce:	add    BYTE PTR [rax],al
  4057d0:	push   rbp
  4057d1:	mov    rbp,rsp
  4057d4:	push   rsi
  4057d5:	push   rdi
  4057d6:	mov    rsi,r8
  4057d9:	mov    QWORD PTR [rbp+0x18],rdx
  4057dd:	mov    rdi,rcx
  4057e0:	cmp    QWORD PTR [rbp+0x18],rdi
  4057e4:	je     40584e <fclose+0x38>
  4057e6:	mov    r8,QWORD PTR [rbp+0x18]
  4057ea:	lea    r11,[rdi]
  4057ed:	mov    rax,QWORD PTR [rbp+0x18]
  4057f1:	cmp    rdi,rax
  4057f4:	jbe    405849 <fclose+0x33>
  4057f6:	mov    rax,rsi
  4057f9:	sub    rax,0x1
  4057fd:	movsxd rax,eax
  405800:	lea    r8,[r8+rax*1]
  405804:	mov    rax,rsi
  405807:	sub    rax,0x1
  40580b:	movsxd rax,eax
  40580e:	lea    r11,[r11+rax*1]
  405812:	jmp    40582b <fclose+0x15>
  405814:	rex.X
  405815:	.byte 0x8a

0000000000405816 <fclose>:
  405816:	add    al,0x5
  405818:	add    BYTE PTR [rax],al
  40581a:	add    BYTE PTR [rax],al
  40581c:	mov    BYTE PTR [r11],al
  40581f:	lea    r8,[r8-0x1]
  405823:	lea    r11,[r11-0x1]
  405827:	sub    rsi,0x1
  40582b:	or     rsi,rsi
  40582e:	jne    405814 <freeUserData+0x64>
  405830:	jmp    40584e <fclose+0x38>
  405832:	mov    al,BYTE PTR [r8*1+0x0]
  40583a:	mov    BYTE PTR [r11],al
  40583d:	lea    r8,[r8+0x1]
  405841:	lea    r11,[r11+0x1]
  405845:	sub    rsi,0x1
  405849:	or     rsi,rsi
  40584c:	jne    405832 <fclose+0x1c>
  40584e:	lea    rax,[rdi]
  405851:	pop    rdi
  405852:	pop    rsi
  405853:	leave  
  405854:	ret    
  405855:	nop
  405856:	nop
  405857:	nop
	...
  405860:	mov    dh,dl
  405862:	mov    rax,rdx
  405865:	shl    rdx,0x10
  405869:	or     rax,rdx
  40586c:	mov    edx,eax
  40586e:	shl    rdx,0x20
  405872:	or     rax,rdx
  405875:	mov    rdx,rdi
  405878:	mov    rdi,rcx
  40587b:	xchg   rcx,r8
  40587e:	mov    r9,rcx
  405881:	shr    rcx,0x3
  405885:	rep stos QWORD PTR es:[rdi],rax
  405888:	mov    rcx,r9
  40588b:	and    rcx,0x7
  40588f:	rep stos BYTE PTR es:[rdi],al
  405891:	mov    rdi,rdx
  405894:	mov    rax,r8
  405897:	ret    
	...
  4058a0:	push   rbp
  4058a1:	mov    rbp,rsp
  4058a4:	push   rbx
  4058a5:	sub    rsp,0x8
  4058a9:	sub    rsp,0x30
  4058ad:	mov    rbx,rdx
  4058b0:	mov    QWORD PTR [rbp+0x10],rcx
  4058b4:	mov    rdx,rcx
  4058b7:	lea    rcx,ds:0x4136e2
  4058bf:	call   40fc5d <WriteDouble+0x966>
  4058c4:	mov    DWORD PTR ds:0x413690,ebx
  4058cb:	or     ebx,ebx
  4058cd:	jle    4058d4 <fclose+0xbe>
  4058cf:	cmp    ebx,0x7
  4058d2:	jl     4058d6 <fclose+0xc0>
  4058d4:	xor    ebx,ebx
  4058d6:	movsxd rax,ebx
  4058d9:	mov    rdx,QWORD PTR [rax*8+0x4136a0]
  4058e1:	lea    rcx,ds:0x4136d8
  4058e9:	call   40fc5d <WriteDouble+0x966>
  4058ee:	xor    eax,eax
  4058f0:	add    rsp,0x30
  4058f4:	add    rsp,0x8
  4058f8:	pop    rbx
  4058f9:	leave  
  4058fa:	ret    
  4058fb:	nop
  4058fc:	add    BYTE PTR [rax],al
  4058fe:	add    BYTE PTR [rax],al
  405900:	fld    DWORD PTR ds:0x413750
  405907:	ret    
  405908:	movq   xmm0,QWORD PTR ds:0x413754
  405911:	ret    
  405912:	nop
  405913:	nop
	...
  405920:	push   rbp
  405921:	mov    rbp,rsp
  405924:	sub    rsp,0x10
  405928:	mov    r8,r8
  40592b:	mov    r11,rdx
  40592e:	lea    rax,[r11]
  405931:	lea    r11,[rax+0x10]
  405935:	fld    TBYTE PTR [rax]
  405937:	fstp   TBYTE PTR [rbp-0x10]
  40593a:	lea    rax,[r11]
  40593d:	lea    r11,[rax+0x10]
  405941:	fld    TBYTE PTR [rbp+0x30]
  405944:	fld    TBYTE PTR [rbp-0x10]
  405947:	fmulp  st(1),st
  405949:	fld    TBYTE PTR [rax]
  40594b:	faddp  st(1),st
  40594d:	fstp   TBYTE PTR [rbp-0x10]
  405950:	mov    eax,r8d
  405953:	sub    eax,0x1
  405956:	mov    r8d,eax
  405959:	jne    40593a <fclose+0x124>
  40595b:	fld    TBYTE PTR [rbp-0x10]
  40595e:	rex.W
  40595f:	.byte 0x83

0000000000405960 <fcloseall>:
  405960:	(bad)  
  405961:	adc    cl,cl
  405963:	ret    
  405964:	push   rbp
  405965:	mov    rbp,rsp
  405968:	sub    rsp,0x10
  40596c:	mov    r8,r8
  40596f:	mov    r11,rdx
  405972:	sub    r8d,0x1
  405976:	lea    rax,[r11]
  405979:	lea    r11,[rax+0x10]
  40597d:	fld    TBYTE PTR [rax]
  40597f:	fld    TBYTE PTR [rbp+0x30]
  405982:	faddp  st(1),st
  405984:	fstp   TBYTE PTR [rbp-0x10]
  405987:	lea    rax,[r11]
  40598a:	lea    r11,[rax+0x10]
  40598e:	fld    TBYTE PTR [rbp+0x30]
  405991:	fld    TBYTE PTR [rbp-0x10]
  405994:	fmulp  st(1),st
  405996:	fld    TBYTE PTR [rax]
  405998:	faddp  st(1),st
  40599a:	fstp   TBYTE PTR [rbp-0x10]
  40599d:	mov    eax,r8d
  4059a0:	sub    eax,0x1
  4059a3:	mov    r8d,eax
  4059a6:	jne    405987 <fcloseall+0x27>
  4059a8:	fld    TBYTE PTR [rbp-0x10]
  4059ab:	add    rsp,0x10
  4059af:	leave  
  4059b0:	ret    
  4059b1:	nop
  4059b2:	nop
  4059b3:	nop
	...
  4059c0:	push   rbp
  4059c1:	mov    rbp,rsp
  4059c4:	push   rbx
  4059c5:	push   rsi
  4059c6:	push   rdi
  4059c7:	push   r12
  4059c9:	push   r13
  4059cb:	sub    rsp,0x8
  4059cf:	rex.W

00000000004059d0 <fflush>:
  4059d0:	sub    esp,0xc0
  4059d6:	mov    rdi,rdx
  4059d9:	fld    TBYTE PTR [rbp+0x30]
  4059dc:	fld    TBYTE PTR ds:0x413d18
  4059e3:	fucomip st,st(1)
  4059e5:	fstp   st(0)
  4059e7:	jp     405a17 <fflush+0x47>
  4059e9:	jne    405a17 <fflush+0x47>
  4059eb:	or     edi,edi
  4059ed:	jne    4059fb <fflush+0x2b>
  4059ef:	fld    TBYTE PTR ds:0x413d08
  4059f6:	jmp    405c08 <fopen+0x108>
  4059fb:	or     edi,edi
  4059fd:	jge    405a0b <fflush+0x3b>
  4059ff:	fld    TBYTE PTR ds:0x413cf8
  405a06:	jmp    405c08 <fopen+0x108>
  405a0b:	fld    TBYTE PTR ds:0x413d18
  405a12:	jmp    405c08 <fopen+0x108>
  405a17:	or     edi,edi
  405a19:	jne    405a27 <fflush+0x57>
  405a1b:	fld    TBYTE PTR ds:0x413d08
  405a22:	jmp    405c08 <fopen+0x108>
  405a27:	fld    TBYTE PTR [rbp+0x30]
  405a2a:	fld    TBYTE PTR ds:0x413d18
  405a31:	fucomip st,st(1)
  405a33:	fstp   st(0)
  405a35:	jp     405a39 <fflush+0x69>
  405a37:	ja     405a3b <fflush+0x6b>
  405a39:	jmp    405a4b <fflush+0x7b>
  405a3b:	mov    r13d,0xffffffff
  405a41:	fld    TBYTE PTR [rbp+0x30]
  405a44:	fchs   
  405a46:	fstp   TBYTE PTR [rbp+0x30]
  405a49:	jmp    405a4e <fflush+0x7e>
  405a4b:	xor    r13d,r13d
  405a4e:	or     edi,edi
  405a50:	jge    405a5e <fflush+0x8e>
  405a52:	mov    r12d,0xffffffff
  405a58:	mov    ebx,edi
  405a5a:	neg    ebx
  405a5c:	jmp    405a66 <fflush+0x96>
  405a5e:	mov    r12d,0x1
  405a64:	mov    ebx,edi
  405a66:	fld    TBYTE PTR [rbp+0x30]
  405a69:	fstp   TBYTE PTR [rbp-0x60]
  405a6c:	lea    rdx,[rbp-0x64]
  405a70:	fld    TBYTE PTR [rbp-0x60]
  405a73:	fstp   TBYTE PTR [rsp+0x20]
  405a77:	call   404f20 <_cinit+0x360>
  405a7c:	fstp   TBYTE PTR [rbp-0x88]
  405a82:	fld    TBYTE PTR [rbp-0x88]
  405a88:	fstp   TBYTE PTR [rbp-0x60]
  405a8b:	mov    ecx,DWORD PTR [rbp-0x64]
  405a8e:	sub    ecx,0x1
  405a91:	mov    esi,ecx
  405a93:	imul   esi,ebx
  405a96:	or     esi,esi
  405a98:	je     405aa4 <fflush+0xd4>
  405a9a:	cmp    esi,0x40
  405a9d:	jg     405aa4 <fflush+0xd4>
  405a9f:	cmp    esi,0xffffffc0
  405aa2:	jge    405b0d <fopen+0xd>
  405aa4:	fld    TBYTE PTR [rbp-0x60]
  405aa7:	fstp   TBYTE PTR [rbp-0x98]
  405aad:	.byte 0xdb
  405aae:	sub    al,0x25

0000000000405ab0 <floorl>:
  405ab0:	call   ffffffffdb409bf1 <.debug$T+0xffffffffdafdadd1>
  405ab5:	mov    ebp,0xffffff58
  405aba:	fld    TBYTE PTR [rbp-0x98]
  405ac0:	fld    TBYTE PTR [rbp-0xa8]
  405ac6:	fsubp  st(1),st
  405ac8:	fld    TBYTE PTR [rbp-0x98]
  405ace:	fld    TBYTE PTR [rbp-0xa8]
  405ad4:	faddp  st(1),st
  405ad6:	fdivp  st(1),st
  405ad8:	fstp   TBYTE PTR [rbp-0x60]
  405adb:	.byte 0xdb
  405adc:	sub    al,0x25
  405ade:	.byte 0xd8
  405adf:	.byte 0x3c

0000000000405ae0 <fmodl>:
  405ae0:	add    r11b,bl
  405ae3:	sub    al,0x25
  405ae5:	enter  0x413c,0x0
  405ae9:	fld    TBYTE PTR [rbp-0x60]
  405aec:	fmulp  st(1),st
  405aee:	fld    TBYTE PTR ds:0x413cb8
  405af5:	fsubp  st(1),st
  405af7:	fild   DWORD PTR [rbp-0x64]
  405afa:	faddp  st(1),st
  405afc:	push   rdi
  405afd:	fild   DWORD PTR [rsp]

0000000000405b00 <fopen>:
  405b00:	add    rsp,0x8
  405b04:	fmulp  st(1),st
  405b06:	fmulp  st(1),st
  405b08:	fstp   TBYTE PTR [rbp-0x60]
  405b0b:	jmp    405b21 <fopen+0x21>
  405b0d:	fld    TBYTE PTR ds:0x413cd8
  405b14:	push   rsi
  405b15:	fild   DWORD PTR [rsp]
  405b18:	add    rsp,0x8
  405b1c:	fmulp  st(1),st
  405b1e:	fstp   TBYTE PTR [rbp-0x60]
  405b21:	fld    TBYTE PTR [rbp-0x60]
  405b24:	fld    TBYTE PTR ds:0x413ca8
  405b2b:	fucomip st,st(1)
  405b2d:	fstp   st(0)
  405b2f:	jp     405b33 <fopen+0x33>
  405b31:	jb     405b35 <fopen+0x35>
  405b33:	jmp    405b44 <fopen+0x44>
  405b35:	fld    TBYTE PTR ds:0x413cf8
  405b3c:	fstp   TBYTE PTR [rbp-0x50]
  405b3f:	jmp    405be4 <fopen+0xe4>
  405b44:	fld    TBYTE PTR [rbp-0x60]
  405b47:	fld    TBYTE PTR ds:0x413c98
  405b4e:	fucomip st,st(1)
  405b50:	fstp   st(0)
  405b52:	jp     405b56 <fopen+0x56>
  405b54:	ja     405b58 <fopen+0x58>
  405b56:	jmp    405b64 <fopen+0x64>
  405b58:	fld    TBYTE PTR ds:0x413d18
  405b5f:	jmp    405c08 <fopen+0x108>
  405b64:	fld    TBYTE PTR [rbp-0x60]
  405b67:	fld    TBYTE PTR ds:0x413c88
  405b6e:	fucomip st,st(1)
  405b70:	fstp   st(0)
  405b72:	jp     405b76 <fopen+0x76>
  405b74:	ja     405b78 <fopen+0x78>
  405b76:	jmp    405b8a <fopen+0x8a>
  405b78:	fld    TBYTE PTR ds:0x413d08
  405b7f:	fld    TBYTE PTR [rbp+0x30]
  405b82:	fdivp  st(1),st
  405b84:	fstp   TBYTE PTR [rbp+0x30]
  405b87:	neg    r12d
  405b8a:	test   ebx,0x1
  405b90:	je     405b9a <fopen+0x9a>
  405b92:	fld    TBYTE PTR [rbp+0x30]
  405b95:	fstp   TBYTE PTR [rbp-0x50]
  405b98:	jmp    405ba7 <fopen+0xa7>
  405b9a:	fld    TBYTE PTR ds:0x413d08
  405ba1:	fstp   TBYTE PTR [rbp-0x50]
  405ba4:	xor    r13d,r13d
  405ba7:	fld    TBYTE PTR [rbp+0x30]
  405baa:	fstp   TBYTE PTR [rbp-0x40]
  405bad:	sar    ebx,1
  405baf:	jmp    405be0 <fopen+0xe0>
  405bb1:	fld    TBYTE PTR [rbp-0x40]
  405bb4:	fstp   TBYTE PTR [rbp-0x98]
  405bba:	fld    TBYTE PTR [rbp-0x98]
  405bc0:	fld    TBYTE PTR [rbp-0x98]
  405bc6:	fmulp  st(1),st
  405bc8:	fstp   TBYTE PTR [rbp-0x40]
  405bcb:	test   ebx,0x1
  405bd1:	je     405bde <fopen+0xde>
  405bd3:	fld    TBYTE PTR [rbp-0x40]
  405bd6:	fld    TBYTE PTR [rbp-0x50]
  405bd9:	fmulp  st(1),st
  405bdb:	fstp   TBYTE PTR [rbp-0x50]
  405bde:	sar    ebx,1
  405be0:	or     ebx,ebx
  405be2:	jne    405bb1 <fopen+0xb1>
  405be4:	or     r13d,r13d
  405be7:	je     405bf1 <fopen+0xf1>
  405be9:	fld    TBYTE PTR [rbp-0x50]
  405bec:	fchs   
  405bee:	fstp   TBYTE PTR [rbp-0x50]
  405bf1:	or     r12d,r12d
  405bf4:	jge    405c05 <fopen+0x105>
  405bf6:	fld    TBYTE PTR ds:0x413d08
  405bfd:	fld    TBYTE PTR [rbp-0x50]
  405c00:	fdivp  st(1),st
  405c02:	fstp   TBYTE PTR [rbp-0x50]
  405c05:	fld    TBYTE PTR [rbp-0x50]
  405c08:	add    rsp,0xc0
  405c0f:	add    rsp,0x8
  405c13:	pop    r13
  405c15:	pop    r12
  405c17:	pop    rdi
  405c18:	pop    rsi
  405c19:	pop    rbx
  405c1a:	leave  
  405c1b:	ret    
  405c1c:	push   rbp
  405c1d:	mov    rbp,rsp
  405c20:	push   rbx
  405c21:	push   rsi
  405c22:	push   rdi
  405c23:	push   r12
  405c25:	sub    rsp,0x2f0
  405c2c:	fld    TBYTE PTR [rbp+0x40]
  405c2f:	fld    TBYTE PTR ds:0x413d18
  405c36:	fucomip st,st(1)
  405c38:	fstp   st(0)
  405c3a:	jp     405c4a <fopen+0x14a>
  405c3c:	jne    405c4a <fopen+0x14a>
  405c3e:	fld    TBYTE PTR ds:0x413d08
  405c45:	jmp    40677f <memchr+0x2f>
  405c4a:	fld    TBYTE PTR [rbp+0x30]
  405c4d:	fstp   TBYTE PTR [rsp+0x20]
  405c51:	call   4054a0 <CommandLineToArgvA+0xb0>
  405c56:	mov    DWORD PTR [rbp-0xa4],eax
  405c5c:	or     eax,eax
  405c5e:	je     405c68 <fopen+0x168>
  405c60:	fld    TBYTE PTR [rbp+0x30]
  405c63:	jmp    40677f <memchr+0x2f>
  405c68:	fld    TBYTE PTR [rbp+0x40]
  405c6b:	fstp   TBYTE PTR [rsp+0x20]
  405c6f:	.byte 0xe8

0000000000405c70 <Fpclassify>:
  405c70:	sub    al,0xf8
  405c72:	(bad)  
  405c73:	dec    DWORD PTR [rcx-0xa77b]
  405c79:	dec    DWORD PTR [rcx]
  405c7b:	shl    BYTE PTR [rax+rcx*1-0x25],0x6d
  405c80:	rex jmp 40677f <memchr+0x2f>
  405c86:	fld    TBYTE PTR [rbp+0x40]
  405c89:	fld    TBYTE PTR ds:0x413d08
  405c90:	fucomip st,st(1)
  405c92:	fstp   st(0)
  405c94:	jp     405ca0 <Fpclassify+0x30>
  405c96:	jne    405ca0 <Fpclassify+0x30>
  405c98:	fld    TBYTE PTR [rbp+0x30]
  405c9b:	jmp    40677f <memchr+0x2f>
  405ca0:	fld    TBYTE PTR [rbp+0x40]
  405ca3:	fstp   TBYTE PTR [rsp+0x20]
  405ca7:	call   405390 <_cinit+0x7d0>
  405cac:	mov    DWORD PTR [rbp-0xac],eax
  405cb2:	or     eax,eax
  405cb4:	jne    405cfa <__fpclassd+0x18>
  405cb6:	fld    TBYTE PTR [rbp+0x30]
  405cb9:	fld    TBYTE PTR ds:0x413c78
  405cc0:	fucomip st,st(1)
  405cc2:	fstp   st(0)
  405cc4:	jp     405cc8 <Fpclassify+0x58>
  405cc6:	je     405cda <Fpclassify+0x6a>
  405cc8:	fld    TBYTE PTR [rbp+0x30]
  405ccb:	fld    TBYTE PTR ds:0x413d08
  405cd2:	fucomip st,st(1)
  405cd4:	fstp   st(0)
  405cd6:	jp     405cfa <__fpclassd+0x18>
  405cd8:	jne    405cfa <__fpclassd+0x18>
  405cda:	mov    rdx,0x1
  405ce1:	rex.W

0000000000405ce2 <__fpclassd>:
  405ce2:	lea    ecx,ds:0x413c70
  405ce9:	call   4058a0 <fclose+0x8a>
  405cee:	fld    DWORD PTR ds:0x413750
  405cf5:	jmp    40677f <memchr+0x2f>
  405cfa:	fld    TBYTE PTR [rbp+0x30]
  405cfd:	.byte 0xdb
  405cfe:	.byte 0x2c

0000000000405cff <__fpclassl>:
  405cff:	and    eax,0x413d08
  405d04:	fucomip st,st(1)
  405d06:	fstp   st(0)
  405d08:	jp     405d18 <__fpclassl+0x19>
  405d0a:	jne    405d18 <__fpclassl+0x19>
  405d0c:	fld    TBYTE PTR ds:0x413d08
  405d13:	jmp    40677f <memchr+0x2f>
  405d18:	fld    TBYTE PTR [rbp+0x40]
  405d1b:	fld    TBYTE PTR ds:0x413cf8
  405d22:	fucomip st,st(1)
  405d24:	.byte 0xdd

0000000000405d25 <__fpclassf>:
  405d25:	fdivr  DWORD PTR [rdx+0x2]
  405d28:	jbe    405d2f <__fpclassf+0xa>
  405d2a:	jmp    405dd7 <fputc+0x87>
  405d2f:	fld    TBYTE PTR [rbp+0x30]
  405d32:	fld    TBYTE PTR ds:0x413d08
  405d39:	fucomip st,st(1)
  405d3b:	fstp   st(0)
  405d3d:	jp     405d41 <__fpclassf+0x1c>
  405d3f:	jb     405d43 <__fpclassf+0x1e>
  405d41:	jmp    405d4f <__fpclassf+0x2a>
  405d43:	fld    TBYTE PTR ds:0x413cf8
  405d4a:	jmp    40677f <memchr+0x2f>
  405d4f:	.byte 0xdb

0000000000405d50 <fputc>:
  405d50:	ins    DWORD PTR es:[rdi],dx
  405d51:	xor    bl,bl
  405d53:	sub    al,0x25
  405d55:	sbb    BYTE PTR [rip+0xffffffffe9df0041],bh        # ffffffffea1f5d9c <.debug$T+0xffffffffe9dc6f7c>
  405d5b:	fstp   st(0)
  405d5d:	jp     405d61 <fputc+0x11>
  405d5f:	jb     405d63 <fputc+0x13>
  405d61:	jmp    405d83 <fputc+0x33>
  405d63:	fld    TBYTE PTR [rbp+0x30]
  405d66:	fld    TBYTE PTR ds:0x413d08
  405d6d:	fucomip st,st(1)
  405d6f:	fstp   st(0)
  405d71:	jp     405d75 <fputc+0x25>
  405d73:	ja     405d77 <fputc+0x27>
  405d75:	jmp    405d83 <fputc+0x33>
  405d77:	fld    TBYTE PTR ds:0x413d18
  405d7e:	jmp    40677f <memchr+0x2f>
  405d83:	fld    TBYTE PTR [rbp+0x30]
  405d86:	fld    TBYTE PTR ds:0x413c78
  405d8d:	fucomip st,st(1)
  405d8f:	fstp   st(0)
  405d91:	jp     405d95 <fputc+0x45>
  405d93:	ja     405d97 <fputc+0x47>
  405d95:	jmp    405da3 <fputc+0x53>
  405d97:	fld    TBYTE PTR ds:0x413cf8
  405d9e:	jmp    40677f <memchr+0x2f>
  405da3:	fld    TBYTE PTR [rbp+0x30]
  405da6:	fld    TBYTE PTR ds:0x413c78
  405dad:	fucomip st,st(1)
  405daf:	fstp   st(0)
  405db1:	jp     405db5 <fputc+0x65>
  405db3:	jb     405db7 <fputc+0x67>
  405db5:	jmp    405dd7 <fputc+0x87>
  405db7:	fld    TBYTE PTR [rbp+0x30]
  405dba:	fld    TBYTE PTR ds:0x413d18
  405dc1:	fucomip st,st(1)
  405dc3:	fstp   st(0)
  405dc5:	jp     405dc9 <fputc+0x79>
  405dc7:	ja     405dcb <fputc+0x7b>
  405dc9:	jmp    405dd7 <fputc+0x87>
  405dcb:	fld    TBYTE PTR ds:0x413d18
  405dd2:	jmp    40677f <memchr+0x2f>
  405dd7:	fld    TBYTE PTR [rbp+0x40]
  405dda:	.byte 0xdb
  405ddb:	sub    al,0x25
  405ddd:	(bad)  
  405dde:	cmp    al,0x41

0000000000405de0 <fread>:
  405de0:	add    bh,bl
  405de2:	jmp    2bb36c4 <.debug$T+0x27848a4>
  405de7:	jae    405dee <fread+0xe>
  405de9:	jmp    405e96 <fread+0xb6>
  405dee:	fld    TBYTE PTR [rbp+0x30]
  405df1:	fld    TBYTE PTR ds:0x413d08
  405df8:	fucomip st,st(1)
  405dfa:	fstp   st(0)
  405dfc:	jp     405e00 <fread+0x20>
  405dfe:	jb     405e02 <fread+0x22>
  405e00:	jmp    405e0e <fread+0x2e>
  405e02:	fld    TBYTE PTR ds:0x413d18
  405e09:	jmp    40677f <memchr+0x2f>
  405e0e:	fld    TBYTE PTR [rbp+0x30]
  405e11:	fld    TBYTE PTR ds:0x413d18
  405e18:	fucomip st,st(1)
  405e1a:	fstp   st(0)
  405e1c:	jp     405e20 <fread+0x40>
  405e1e:	jb     405e22 <fread+0x42>
  405e20:	jmp    405e42 <fread+0x62>
  405e22:	fld    TBYTE PTR [rbp+0x30]
  405e25:	fld    TBYTE PTR ds:0x413d08
  405e2c:	fucomip st,st(1)
  405e2e:	fstp   st(0)
  405e30:	jp     405e34 <fread+0x54>
  405e32:	ja     405e36 <fread+0x56>
  405e34:	jmp    405e42 <fread+0x62>
  405e36:	fld    TBYTE PTR ds:0x413cf8
  405e3d:	jmp    40677f <memchr+0x2f>
  405e42:	fld    TBYTE PTR [rbp+0x30]
  405e45:	fld    TBYTE PTR ds:0x413c78
  405e4c:	fucomip st,st(1)
  405e4e:	fstp   st(0)
  405e50:	jp     405e54 <fread+0x74>
  405e52:	ja     405e56 <fread+0x76>
  405e54:	jmp    405e62 <fread+0x82>
  405e56:	fld    TBYTE PTR ds:0x413d18
  405e5d:	jmp    40677f <memchr+0x2f>
  405e62:	fld    TBYTE PTR [rbp+0x30]
  405e65:	fld    TBYTE PTR ds:0x413c78
  405e6c:	fucomip st,st(1)
  405e6e:	fstp   st(0)
  405e70:	jp     405e74 <fread+0x94>
  405e72:	jb     405e76 <fread+0x96>
  405e74:	jmp    405e96 <fread+0xb6>
  405e76:	fld    TBYTE PTR [rbp+0x30]
  405e79:	fld    TBYTE PTR ds:0x413d18
  405e80:	fucomip st,st(1)
  405e82:	fstp   st(0)
  405e84:	jp     405e88 <fread+0xa8>
  405e86:	ja     405e8a <fread+0xaa>
  405e88:	jmp    405e96 <fread+0xb6>
  405e8a:	fld    TBYTE PTR ds:0x413cf8
  405e91:	jmp    40677f <memchr+0x2f>
  405e96:	fld    TBYTE PTR [rbp+0x30]
  405e99:	fld    TBYTE PTR ds:0x413cf8
  405ea0:	fucomip st,st(1)
  405ea2:	fstp   st(0)
  405ea4:	jp     405ea8 <fread+0xc8>
  405ea6:	jbe    405eaa <fread+0xca>
  405ea8:	jmp    405ed6 <fread+0xf6>
  405eaa:	fld    TBYTE PTR [rbp+0x40]
  405ead:	fld    TBYTE PTR ds:0x413d18
  405eb4:	fucomip st,st(1)
  405eb6:	fstp   st(0)
  405eb8:	jp     405ebc <fread+0xdc>
  405eba:	jb     405ebe <fread+0xde>
  405ebc:	jmp    405eca <fread+0xea>
  405ebe:	fld    TBYTE PTR ds:0x413cf8
  405ec5:	jmp    40677f <memchr+0x2f>
  405eca:	fld    TBYTE PTR ds:0x413d18
  405ed1:	jmp    40677f <memchr+0x2f>
  405ed6:	fld    TBYTE PTR [rbp+0x40]
  405ed9:	fstp   TBYTE PTR [rsp+0x20]
  405edd:	call   404ab0 <_assertfailfn+0x8b>
  405ee2:	fstp   TBYTE PTR [rbp-0xd0]
  405ee8:	fld    TBYTE PTR [rbp-0xd0]
  405eee:	.byte 0xdb
  405eef:	.byte 0x7d

0000000000405ef0 <free>:
  405ef0:	shl    BYTE PTR [rcx],1
  405ef2:	neg    bl
  405ef4:	ins    DWORD PTR es:[rdi],dx
  405ef5:	rcr    bl,1
  405ef7:	ins    DWORD PTR es:[rdi],dx
  405ef8:	rex fucomip st,st(1)
  405efb:	fstp   st(0)
  405efd:	jp     405f06 <free+0x16>
  405eff:	jne    405f06 <free+0x16>
  405f01:	mov    esi,0x1
  405f06:	mov    DWORD PTR [rbp-0x8c],0x0
  405f10:	or     esi,esi
  405f12:	je     405fa5 <frexpl+0x85>
  405f18:	fld    TBYTE PTR [rbp+0x40]
  405f1b:	fstp   TBYTE PTR [rsp+0x20]
  405f1f:	.byte 0xe8

0000000000405f20 <frexpl>:
  405f20:	sub    eax,0xbddbffff
  405f26:	adc    bh,bh
  405f28:	(bad)  
  405f29:	(bad)  
  405f2a:	fld    TBYTE PTR [rbp-0xf0]
  405f30:	fstp   TBYTE PTR [rbp-0x78]
  405f33:	fld    TBYTE PTR ds:0x413cb8
  405f3a:	fld    TBYTE PTR [rbp-0x78]
  405f3d:	fmulp  st(1),st
  405f3f:	fstp   TBYTE PTR [rsp+0x20]
  405f43:	call   404ab0 <_assertfailfn+0x8b>
  405f48:	fstp   TBYTE PTR [rbp-0x110]
  405f4e:	fld    TBYTE PTR [rbp-0x110]
  405f54:	fstp   TBYTE PTR [rbp-0x78]
  405f57:	fld    TBYTE PTR [rbp-0x30]
  405f5a:	fstp   TBYTE PTR [rsp+0x20]
  405f5e:	call   4047a5 <ExpandFileName+0x230>
  405f63:	fstp   TBYTE PTR [rbp-0x130]
  405f69:	fld    TBYTE PTR [rbp-0x130]
  405f6f:	fstp   TBYTE PTR [rbp-0x120]
  405f75:	fld    TBYTE PTR ds:0x413cb8
  405f7c:	fld    TBYTE PTR [rbp-0x120]
  405f82:	fmulp  st(1),st
  405f84:	fstp   TBYTE PTR [rbp-0x88]
  405f8a:	fld    TBYTE PTR [rbp-0x78]
  405f8d:	fld    TBYTE PTR [rbp-0x88]
  405f93:	fucomip st,st(1)
  405f95:	fstp   st(0)
  405f97:	jp     405f9b <frexpl+0x7b>
  405f99:	je     405fa5 <frexpl+0x85>
  405f9b:	mov    DWORD PTR [rbp-0x8c],0x1
  405fa5:	fld    TBYTE PTR [rbp+0x30]
  405fa8:	fld    TBYTE PTR ds:0x413c60
  405faf:	fucomip st,st(1)
  405fb1:	fstp   st(0)
  405fb3:	jp     405fb7 <frexpl+0x97>
  405fb5:	jae    405fbc <frexpl+0x9c>
  405fb7:	jmp    406055 <doseek+0x35>
  405fbc:	fld    TBYTE PTR [rbp+0x40]
  405fbf:	fld    TBYTE PTR ds:0x413d18
  405fc6:	fucomip st,st(1)
  405fc8:	fstp   st(0)
  405fca:	jp     405fce <frexpl+0xae>
  405fcc:	jb     405fd0 <frexpl+0xb0>
  405fce:	jmp    406020 <doseek>
  405fd0:	or     DWORD PTR [rbp-0x8c],0x0
  405fd7:	je     406014 <frexpl+0xf4>
  405fd9:	movss  xmm0,DWORD PTR ds:0x413754
  405fe2:	push   0x0
  405fe4:	movss  DWORD PTR [rsp],xmm0
  405fe9:	movss  DWORD PTR [rsp],xmm0
  405fee:	xorpd  xmm0,xmm0
  405ff2:	subss  xmm0,DWORD PTR [rsp]
  405ff7:	add    rsp,0x8
  405ffb:	cvtss2sd xmm0,xmm0
  405fff:	sub    rsp,0x8
  406003:	movq   QWORD PTR [rsp],xmm0
  406008:	fld    QWORD PTR [rsp]
  40600b:	add    rsp,0x8
  40600f:	jmp    40677f <memchr+0x2f>
  406014:	fld    DWORD PTR ds:0x413754
  40601b:	jmp    40677f <memchr+0x2f>

0000000000406020 <doseek>:
  406020:	fld    TBYTE PTR [rbp+0x40]
  406023:	fld    TBYTE PTR ds:0x413d18
  40602a:	fucomip st,st(1)
  40602c:	fstp   st(0)
  40602e:	jp     406032 <doseek+0x12>
  406030:	ja     406034 <doseek+0x14>
  406032:	jmp    406055 <doseek+0x35>
  406034:	or     DWORD PTR [rbp-0x8c],0x0
  40603b:	je     406049 <doseek+0x29>
  40603d:	fld    TBYTE PTR ds:0x413d18
  406044:	jmp    40677f <memchr+0x2f>
  406049:	fld    TBYTE PTR ds:0x413d18
  406050:	jmp    40677f <memchr+0x2f>
  406055:	xor    r12d,r12d
  406058:	fld    TBYTE PTR [rbp+0x30]
  40605b:	fld    TBYTE PTR ds:0x413d18
  406062:	fucomip st,st(1)
  406064:	fstp   st(0)
  406066:	jp     40606a <doseek+0x4a>
  406068:	jae    40606f <doseek+0x4f>
  40606a:	jmp    40615f <fseek+0xe5>
  40606f:	fld    TBYTE PTR [rbp+0x30]
  406072:	fld    TBYTE PTR ds:0x413d18
  406079:	.byte 0xdf

000000000040607a <fseek>:
  40607a:	jmp    ffffffff8a50395c <.debug$T+0xffffffff8a0d4b3c>
  40607f:	mov    BYTE PTR [rax],0x0
  406082:	add    BYTE PTR [rdi],cl
  406084:	test   eax,eax
  406086:	add    BYTE PTR [rax],al
  406088:	add    bl,bl
  40608a:	ins    DWORD PTR es:[rdi],dx
  40608b:	rex fld TBYTE PTR ds:0x413d18
  406093:	fucomip st,st(1)
  406095:	fstp   st(0)
  406097:	jp     40609b <fseek+0x21>
  406099:	ja     40609d <fseek+0x23>
  40609b:	jmp    4060d4 <fseek+0x5a>
  40609d:	fld    TBYTE PTR [rbp+0x30]
  4060a0:	fstp   TBYTE PTR [rsp+0x20]
  4060a4:	call   40abfd <_setlocale+0x6f1>
  4060a9:	mov    DWORD PTR [rbp-0xd4],eax
  4060af:	or     eax,eax
  4060b1:	je     4060c8 <fseek+0x4e>
  4060b3:	or     DWORD PTR [rbp-0x8c],0x0
  4060ba:	je     4060c8 <fseek+0x4e>
  4060bc:	fld    TBYTE PTR ds:0x413c60
  4060c3:	jmp    40677f <memchr+0x2f>
  4060c8:	fld    TBYTE PTR ds:0x413cf8
  4060cf:	jmp    40677f <memchr+0x2f>
  4060d4:	fld    TBYTE PTR [rbp+0x40]
  4060d7:	fld    TBYTE PTR ds:0x413d18
  4060de:	fucomip st,st(1)
  4060e0:	fstp   st(0)
  4060e2:	jp     4060e6 <fseek+0x6c>
  4060e4:	jb     4060e8 <fseek+0x6e>
  4060e6:	jmp    40611f <fseek+0xa5>
  4060e8:	fld    TBYTE PTR [rbp+0x30]
  4060eb:	fstp   TBYTE PTR [rsp+0x20]
  4060ef:	call   40abfd <_setlocale+0x6f1>
  4060f4:	mov    DWORD PTR [rbp-0xd4],eax
  4060fa:	or     eax,eax
  4060fc:	je     406113 <fseek+0x99>
  4060fe:	or     DWORD PTR [rbp-0x8c],0x0
  406105:	je     406113 <fseek+0x99>
  406107:	fld    TBYTE PTR ds:0x413d18
  40610e:	jmp    40677f <memchr+0x2f>
  406113:	fld    TBYTE PTR ds:0x413d18
  40611a:	jmp    40677f <memchr+0x2f>
  40611f:	fld    TBYTE PTR [rbp+0x40]
  406122:	fld    TBYTE PTR ds:0x413d18
  406129:	fucomip st,st(1)
  40612b:	fstp   st(0)
  40612d:	jp     40613d <fseek+0xc3>
  40612f:	jne    40613d <fseek+0xc3>
  406131:	fld    TBYTE PTR ds:0x413d08
  406138:	jmp    40677f <memchr+0x2f>
  40613d:	fld    TBYTE PTR ds:0x413d18
  406144:	jmp    40677f <memchr+0x2f>
  406149:	or     esi,esi
  40614b:	jne    406159 <fseek+0xdf>
  40614d:	fld    DWORD PTR ds:0x413750
  406154:	jmp    40677f <memchr+0x2f>
  406159:	mov    r12d,0x1
  40615f:	.byte 0x9

0000000000406160 <ftell>:
  406160:	test   BYTE PTR [rdi],0x84
  406163:	stos   DWORD PTR es:[rdi],eax
  406164:	add    BYTE PTR [rax],al
  406166:	add    bl,bl
  406168:	ins    DWORD PTR es:[rdi],dx
  406169:	ror    BYTE PTR [rax-0x7d],1
  40616c:	in     al,dx
  40616d:	or     ch,bl
  40616f:	sbb    al,0x24
  406171:	cvttsd2si eax,QWORD PTR [rsp]
  406176:	add    rsp,0x8
  40617a:	mov    DWORD PTR [rbp-0x34],eax
  40617d:	fld    TBYTE PTR [rbp+0x30]
  406180:	fstp   TBYTE PTR [rsp+0x20]
  406184:	call   404ab0 <_assertfailfn+0x8b>
  406189:	fstp   TBYTE PTR [rbp-0xf0]
  40618f:	fld    TBYTE PTR [rbp-0xf0]
  406195:	fstp   TBYTE PTR [rbp-0x30]
  406198:	fld    TBYTE PTR [rbp-0x30]
  40619b:	fld    TBYTE PTR [rbp+0x30]
  40619e:	fucomip st,st(1)
  4061a0:	fstp   st(0)
  4061a2:	jp     406212 <ftell+0xb2>
  4061a4:	jne    406212 <ftell+0xb2>
  4061a6:	fld    TBYTE PTR [rbp+0x40]
  4061a9:	fstp   TBYTE PTR [rsp+0x20]
  4061ad:	call   4047a5 <ExpandFileName+0x230>
  4061b2:	fstp   TBYTE PTR [rbp-0x110]
  4061b8:	fld    TBYTE PTR [rbp-0x110]
  4061be:	fstp   TBYTE PTR [rbp-0x100]
  4061c4:	fld    TBYTE PTR [rbp-0x100]
  4061ca:	fld    TBYTE PTR ds:0x413c50
  4061d1:	fucomip st,st(1)
  4061d3:	fstp   st(0)
  4061d5:	jp     4061d9 <ftell+0x79>
  4061d7:	ja     4061db <ftell+0x7b>
  4061d9:	jmp    406212 <ftell+0xb2>
  4061db:	fld    TBYTE PTR [rbp+0x40]
  4061de:	sub    rsp,0x8
  4061e2:	fstp   QWORD PTR [rsp]
  4061e5:	cvttsd2si rdx,QWORD PTR [rsp]
  4061eb:	add    rsp,0x8
  4061ef:	fld    TBYTE PTR [rbp+0x30]
  4061f2:	fstp   TBYTE PTR [rsp+0x20]
  4061f6:	call   4059c0 <fcloseall+0x60>
  4061fb:	fstp   TBYTE PTR [rbp-0x130]
  406201:	fld    TBYTE PTR [rbp-0x130]
  406207:	fstp   TBYTE PTR [rbp-0x30]
  40620a:	fld    TBYTE PTR [rbp-0x30]
  40620d:	jmp    40677f <memchr+0x2f>
  406212:	or     r12d,r12d
  406215:	je     406232 <fwrite+0x12>
  406217:	fld    TBYTE PTR [rbp+0x30]
  40621a:	fstp   TBYTE PTR [rsp+0x20]
  40621e:	.byte 0xe8
  40621f:	.byte 0x82

0000000000406220 <fwrite>:
  406220:	in     eax,0xff
  406222:	(bad)  
  406223:	fstp   TBYTE PTR [rbp-0xf0]
  406229:	fld    TBYTE PTR [rbp-0xf0]
  40622f:	fstp   TBYTE PTR [rbp+0x30]
  406232:	lea    rdx,[rbp-0x34]
  406236:	fld    TBYTE PTR [rbp+0x30]
  406239:	fstp   TBYTE PTR [rsp+0x20]
  40623d:	call   404f20 <_cinit+0x360>
  406242:	fstp   TBYTE PTR [rbp-0x110]
  406248:	fld    TBYTE PTR [rbp-0x110]
  40624e:	fstp   TBYTE PTR [rbp+0x30]
  406251:	mov    ebx,DWORD PTR [rbp-0x34]
  406254:	mov    DWORD PTR [rbp-0x34],0x1
  40625b:	fld    TBYTE PTR [rbp+0x30]
  40625e:	fld    TBYTE PTR ds:0x413990
  406265:	fucomip st,st(1)
  406267:	fstp   st(0)
  406269:	jp     40626d <fwrite+0x4d>
  40626b:	jae    40626f <fwrite+0x4f>
  40626d:	jmp    406276 <fwrite+0x56>
  40626f:	mov    DWORD PTR [rbp-0x34],0x11
  406276:	fld    TBYTE PTR [rbp+0x30]
  406279:	mov    eax,DWORD PTR [rbp-0x34]
  40627c:	add    eax,0x8
  40627f:	movsxd rax,eax
  406282:	shl    rax,0x4
  406286:	fld    TBYTE PTR [rax*1+0x413880]
  40628d:	fucomip st,st(1)
  40628f:	fstp   st(0)
  406291:	jp     406295 <fwrite+0x75>
  406293:	jae    406297 <fwrite+0x77>
  406295:	jmp    40629b <fwrite+0x7b>
  406297:	add    DWORD PTR [rbp-0x34],0x8
  40629b:	fld    TBYTE PTR [rbp+0x30]
  40629e:	mov    eax,DWORD PTR [rbp-0x34]
  4062a1:	add    eax,0x4
  4062a4:	movsxd rax,eax
  4062a7:	shl    rax,0x4
  4062ab:	fld    TBYTE PTR [rax*1+0x413880]
  4062b2:	fucomip st,st(1)
  4062b4:	fstp   st(0)
  4062b6:	jp     4062ba <fwrite+0x9a>
  4062b8:	jae    4062bc <fwrite+0x9c>
  4062ba:	jmp    4062c0 <fwrite+0xa0>
  4062bc:	add    DWORD PTR [rbp-0x34],0x4
  4062c0:	fld    TBYTE PTR [rbp+0x30]
  4062c3:	mov    eax,DWORD PTR [rbp-0x34]
  4062c6:	add    eax,0x2
  4062c9:	movsxd rax,eax
  4062cc:	shl    rax,0x4
  4062d0:	fld    TBYTE PTR [rax*1+0x413880]
  4062d7:	fucomip st,st(1)
  4062d9:	fstp   st(0)
  4062db:	jp     4062df <fwrite+0xbf>
  4062dd:	jae    4062e1 <fwrite+0xc1>
  4062df:	jmp    4062e5 <fwrite+0xc5>
  4062e1:	add    DWORD PTR [rbp-0x34],0x2
  4062e5:	fld    TBYTE PTR [rbp+0x30]
  4062e8:	fld    TBYTE PTR ds:0x413890
  4062ef:	fucomip st,st(1)
  4062f1:	fstp   st(0)
  4062f3:	jp     4062f7 <fwrite+0xd7>
  4062f5:	jbe    4062f9 <fwrite+0xd9>
  4062f7:	jmp    4062fd <fwrite+0xdd>
  4062f9:	or     DWORD PTR [rbp-0x34],0xffffffff
  4062fd:	inc    DWORD PTR [rbp-0x34]
  406300:	fld    TBYTE PTR [rbp+0x30]
  406303:	movsxd rax,DWORD PTR [rbp-0x34]
  406307:	shl    rax,0x4
  40630b:	fld    TBYTE PTR [rax*1+0x413880]
  406312:	fsubp  st(1),st
  406314:	fstp   TBYTE PTR [rbp+0x30]
  406317:	fld    TBYTE PTR [rbp+0x30]
  40631a:	mov    eax,DWORD PTR [rbp-0x34]
  40631d:	mov    ecx,0x2
  406322:	mov    eax,eax
  406324:	xor    edx,edx
  406326:	test   eax,eax
  406328:	setl   dl
  40632b:	add    eax,edx
  40632d:	sar    eax,1
  40632f:	movsxd rcx,eax
  406332:	mov    rdi,rcx
  406335:	shl    rdi,0x4
  406339:	fld    TBYTE PTR [rdi*1+0x413a90]
  406340:	fsubp  st(1),st
  406342:	fstp   TBYTE PTR [rbp+0x30]
  406345:	fld    TBYTE PTR [rbp+0x30]
  406348:	movsxd rax,DWORD PTR [rbp-0x34]
  40634c:	shl    rax,0x4
  406350:	fld    TBYTE PTR [rax*1+0x413880]
  406357:	fdivp  st(1),st
  406359:	fstp   TBYTE PTR [rbp+0x30]
  40635c:	fld    TBYTE PTR [rbp+0x30]
  40635f:	fld    TBYTE PTR [rbp+0x30]
  406362:	fmulp  st(1),st
  406364:	fstp   TBYTE PTR ds:0x411160
  40636b:	mov    r8,0x3
  406372:	lea    rdx,ds:0x413810
  40637a:	fld    TBYTE PTR [rbp+0x30]
  40637d:	fstp   TBYTE PTR [rsp+0x20]
  406381:	call   405920 <fclose+0x10a>
  406386:	fstp   TBYTE PTR [rbp-0x140]
  40638c:	.byte 0xdb
  40638d:	lods   eax,DWORD PTR ds:[rsi]
  40638e:	.byte 0xc0
  40638f:	.byte 0xfe

0000000000406390 <isfinitel>:
  406390:	(bad)  
  406391:	(bad)  
  406392:	fstp   TBYTE PTR [rbp-0x120]
  406398:	mov    r8,0x3
  40639f:	lea    rdx,ds:0x413850
  4063a7:	fld    TBYTE PTR [rbp+0x30]
  4063aa:	fstp   TBYTE PTR [rsp+0x20]
  4063ae:	call   405964 <fcloseall+0x4>
  4063b3:	fstp   TBYTE PTR [rbp-0x150]
  4063b9:	fld    TBYTE PTR [rbp-0x150]
  4063bf:	.byte 0xdb

00000000004063c0 <isinfl>:
  4063c0:	mov    ebp,0xfffffed0
  4063c5:	fld    TBYTE PTR [rbp-0x120]
  4063cb:	fld    TBYTE PTR ds:0x411160
  4063d2:	fmulp  st(1),st
  4063d4:	fld    TBYTE PTR [rbp-0x130]
  4063da:	fdivp  st(1),st
  4063dc:	fld    TBYTE PTR [rbp+0x30]
  4063df:	fmulp  st(1),st
  4063e1:	fstp   TBYTE PTR [rbp-0x30]
  4063e4:	mov    rdx,0xffffffffffffffff
  4063eb:	fld    TBYTE PTR ds:0x411160
  4063f2:	fstp   TBYTE PTR [rsp+0x20]
  4063f6:	call   405500 <CommandLineToArgvA+0x110>
  4063fb:	fstp   TBYTE PTR [rbp-0x170]
  406401:	.byte 0xdb

0000000000406402 <_isinfd>:
  406402:	lods   eax,DWORD PTR ds:[rsi]
  406403:	nop
  406404:	(bad)  
  406405:	(bad)  
  406406:	(bad)  
  406407:	fstp   TBYTE PTR [rbp-0x160]
  40640d:	fld    TBYTE PTR [rbp-0x30]
  406410:	fld    TBYTE PTR [rbp-0x160]
  406416:	fsubp  st(1),st
  406418:	fstp   TBYTE PTR [rbp-0x30]
  40641b:	fld    TBYTE PTR ds:0x413c40
  406422:	fld    TBYTE PTR [rbp-0x30]
  406425:	fmulp  st(1),st
  406427:	fstp   TBYTE PTR ds:0x411160
  40642e:	fld    TBYTE PTR [rbp-0x30]
  406431:	fld    TBYTE PTR ds:0x411160
  406438:	faddp  st(1),st
  40643a:	fstp   TBYTE PTR ds:0x411160
  406441:	fld    TBYTE PTR ds:0x413c40
  406448:	.byte 0xdb
  406449:	ins    DWORD PTR es:[rdi],dx

000000000040644a <isinff>:
  40644a:	xor    dh,bl
  40644c:	leave  
  40644d:	fld    TBYTE PTR ds:0x411160
  406454:	faddp  st(1),st
  406456:	fstp   TBYTE PTR ds:0x411160
  40645d:	fld    TBYTE PTR [rbp+0x30]
  406460:	fld    TBYTE PTR ds:0x411160
  406467:	faddp  st(1),st
  406469:	fstp   TBYTE PTR ds:0x411160
  406470:	mov    eax,DWORD PTR [rbp-0x34]
  406473:	neg    eax
  406475:	push   rax
  406476:	fild   DWORD PTR [rsp]
  406479:	add    rsp,0x8
  40647d:	fstp   TBYTE PTR [rbp-0x30]
  406480:	mov    rdx,0xfffffffffffffffb

0000000000406487 <_isinfi>:
  406487:	fld    TBYTE PTR [rbp-0x30]
  40648a:	fstp   TBYTE PTR [rsp+0x20]
  40648e:	call   405500 <CommandLineToArgvA+0x110>
  406493:	fstp   TBYTE PTR [rbp-0x190]
  406499:	fld    TBYTE PTR [rbp-0x190]
  40649f:	.byte 0xdb

00000000004064a0 <isnanl>:
  4064a0:	jge    406472 <isinff+0x28>
  4064a2:	push   rbx
  4064a3:	fild   DWORD PTR [rsp]
  4064a6:	add    rsp,0x8
  4064aa:	fld    TBYTE PTR [rbp-0x30]
  4064ad:	faddp  st(1),st
  4064af:	fstp   TBYTE PTR [rbp-0x30]
  4064b2:	fld    TBYTE PTR [rbp+0x40]
  4064b5:	fstp   TBYTE PTR [rsp+0x20]
  4064b9:	call   40678d <memchr+0x3d>
  4064be:	fstp   TBYTE PTR [rbp-0x1b0]
  4064c4:	fld    TBYTE PTR [rbp-0x1b0]
  4064ca:	fstp   TBYTE PTR [rbp-0x78]
  4064cd:	fld    TBYTE PTR [rbp+0x40]
  4064d0:	fld    TBYTE PTR [rbp-0x78]
  4064d3:	fsubp  st(1),st
  4064d5:	fstp   TBYTE PTR [rbp-0x88]
  4064db:	.byte 0xdb
  4064dc:	ins    DWORD PTR es:[rdi],dx

00000000004064dd <isnanf>:
  4064dd:	rex fld TBYTE PTR ds:0x411160
  4064e5:	fmulp  st(1),st
  4064e7:	fld    TBYTE PTR [rbp-0x88]
  4064ed:	fld    TBYTE PTR [rbp-0x30]
  4064f0:	fmulp  st(1),st
  4064f2:	faddp  st(1),st
  4064f4:	fstp   TBYTE PTR [rbp-0x58]
  4064f7:	fld    TBYTE PTR [rbp-0x58]
  4064fa:	fstp   TBYTE PTR [rsp+0x20]
  4064fe:	.byte 0xe8
  4064ff:	.byte 0x8a

0000000000406500 <ldexpl>:
  406500:	add    al,BYTE PTR [rax]
  406502:	add    bl,bl
  406504:	mov    ebp,0xfffffe30
  406509:	fld    TBYTE PTR [rbp-0x1d0]
  40650f:	fstp   TBYTE PTR [rbp-0x68]
  406512:	fld    TBYTE PTR [rbp-0x58]
  406515:	fld    TBYTE PTR [rbp-0x68]
  406518:	fsubp  st(1),st
  40651a:	fstp   TBYTE PTR [rbp-0x48]
  40651d:	fld    TBYTE PTR [rbp-0x78]
  406520:	fld    TBYTE PTR [rbp-0x30]
  406523:	fmulp  st(1),st
  406525:	fld    TBYTE PTR [rbp-0x68]
  406528:	faddp  st(1),st
  40652a:	fstp   TBYTE PTR [rbp-0x58]
  40652d:	fld    TBYTE PTR [rbp-0x58]
  406530:	fstp   TBYTE PTR [rsp+0x20]
  406534:	call   40678d <memchr+0x3d>
  406539:	fstp   TBYTE PTR [rbp-0x1f0]
  40653f:	fld    TBYTE PTR [rbp-0x1f0]
  406545:	fstp   TBYTE PTR [rbp-0x68]
  406548:	fld    TBYTE PTR [rbp-0x58]
  40654b:	fld    TBYTE PTR [rbp-0x68]
  40654e:	fsubp  st(1),st
  406550:	fstp   TBYTE PTR [rbp-0xa0]
  406556:	fld    TBYTE PTR [rbp-0xa0]
  40655c:	fld    TBYTE PTR [rbp-0x48]
  40655f:	faddp  st(1),st
  406561:	fstp   TBYTE PTR [rbp-0x58]
  406564:	fld    TBYTE PTR [rbp-0x58]
  406567:	fstp   TBYTE PTR [rsp+0x20]
  40656b:	call   40678d <memchr+0x3d>
  406570:	fstp   TBYTE PTR [rbp-0x210]
  406576:	fld    TBYTE PTR [rbp-0x210]
  40657c:	fstp   TBYTE PTR [rbp-0x48]
  40657f:	mov    rdx,0x5
  406586:	fld    TBYTE PTR [rbp-0x48]
  406589:	fld    TBYTE PTR [rbp-0x68]
  40658c:	faddp  st(1),st
  40658e:	fstp   TBYTE PTR [rsp+0x20]
  406592:	call   405500 <CommandLineToArgvA+0x110>
  406597:	fstp   TBYTE PTR [rbp-0x230]
  40659d:	fld    TBYTE PTR [rbp-0x230]
  4065a3:	fstp   TBYTE PTR [rbp-0x30]
  4065a6:	fld    TBYTE PTR [rbp-0x30]
  4065a9:	fld    TBYTE PTR ds:0x413c30
  4065b0:	fucomip st,st(1)
  4065b2:	fstp   st(0)
  4065b4:	jp     4065b8 <ldexpl+0xb8>
  4065b6:	jb     4065ba <ldexpl+0xba>
  4065b8:	jmp    4065c6 <ldexpl+0xc6>
  4065ba:	fld    TBYTE PTR ds:0x413cf8
  4065c1:	jmp    40677f <memchr+0x2f>
  4065c6:	fld    TBYTE PTR [rbp-0x30]
  4065c9:	fld    TBYTE PTR ds:0x413c20
  4065d0:	fucomip st,st(1)
  4065d2:	fstp   st(0)
  4065d4:	jp     4065d8 <ldexpl+0xd8>
  4065d6:	ja     4065da <ldexpl+0xda>
  4065d8:	jmp    4065e6 <ldexpl+0xe6>
  4065da:	fld    TBYTE PTR ds:0x413d18
  4065e1:	jmp    40677f <memchr+0x2f>
  4065e6:	fld    TBYTE PTR [rbp-0x30]
  4065e9:	sub    rsp,0x8
  4065ed:	fstp   QWORD PTR [rsp]
  4065f0:	cvttsd2si ebx,QWORD PTR [rsp]
  4065f5:	add    rsp,0x8
  4065f9:	fld    TBYTE PTR [rbp-0x58]
  4065fc:	fld    TBYTE PTR [rbp-0x48]
  4065ff:	fsubp  st(1),st
  406601:	fstp   TBYTE PTR [rbp-0x48]
  406604:	fld    TBYTE PTR [rbp-0x48]
  406607:	.byte 0xdb
  406608:	sub    al,0x25
  40660a:	.byte 0x18
  40660b:	.byte 0x3d
  40660c:	rex.B

000000000040660d <ldexpf>:
  40660d:	add    bh,bl
  40660f:	jmp    2bb3ef1 <.debug$T+0x27850d1>
  406614:	jb     406618 <ldexpf+0xb>
  406616:	jmp    40662a <ldexpf+0x1d>
  406618:	add    ebx,0x1
  40661b:	fld    TBYTE PTR [rbp-0x48]
  40661e:	fld    TBYTE PTR ds:0x413c10
  406625:	fsubp  st(1),st
  406627:	fstp   TBYTE PTR [rbp-0x48]
  40662a:	mov    r8,0x6
  406631:	lea    rdx,ds:0x413ba0
  406639:	fld    TBYTE PTR [rbp-0x48]
  40663c:	fstp   TBYTE PTR [rsp+0x20]
  406640:	call   405920 <fclose+0x10a>
  406645:	fstp   TBYTE PTR [rbp-0x250]
  40664b:	fld    TBYTE PTR [rbp-0x250]
  406651:	fstp   TBYTE PTR [rbp-0x240]
  406657:	fld    TBYTE PTR [rbp-0x240]
  40665d:	.byte 0xdb
  40665e:	ins    DWORD PTR es:[rdi],dx

000000000040665f <ldexp>:
  40665f:	mov    eax,0x3cdbc9de
  406664:	and    eax,0x411160
  406669:	or     ebx,ebx
  40666b:	setge  al
  40666e:	and    eax,0x1
  406671:	mov    DWORD PTR [rbp-0x34],eax
  406674:	mov    eax,ebx
  406676:	mov    ecx,0x20
  40667b:	mov    eax,eax
  40667d:	test   eax,eax
  40667f:	jge    406684 <ldexp+0x25>
  406681:	add    eax,0x1f
  406684:	sar    eax,0x5
  406687:	mov    ecx,eax
  406689:	add    ecx,DWORD PTR [rbp-0x34]
  40668c:	mov    DWORD PTR [rbp-0x34],ecx
  40668f:	mov    eax,DWORD PTR [rbp-0x34]
  406692:	shl    eax,0x5
  406695:	sub    eax,ebx
  406697:	mov    ebx,eax
  406699:	movsxd rax,ebx
  40669c:	shl    rax,0x4
  4066a0:	fld    TBYTE PTR [rax*1+0x413880]
  4066a7:	fstp   TBYTE PTR [rbp-0x30]
  4066aa:	fld    TBYTE PTR ds:0x411160
  4066b1:	fld    TBYTE PTR [rbp-0x30]
  4066b4:	fmulp  st(1),st
  4066b6:	fstp   TBYTE PTR ds:0x411160
  4066bd:	fld    TBYTE PTR [rbp-0x30]

00000000004066c0 <localeconv>:
  4066c0:	fld    TBYTE PTR ds:0x411160
  4066c7:	faddp  st(1),st
  4066c9:	fstp   TBYTE PTR ds:0x411160
  4066d0:	mov    edx,DWORD PTR [rbp-0x34]
  4066d3:	fld    TBYTE PTR ds:0x411160
  4066da:	fstp   TBYTE PTR [rsp+0x20]
  4066de:	.byte 0xe8
  4066df:	.byte 0x1d

00000000004066e0 <log10l>:
  4066e0:	out    dx,al
  4066e1:	(bad)  
  4066e2:	(bad)  
  4066e3:	fstp   TBYTE PTR [rbp-0x270]
  4066e9:	fld    TBYTE PTR [rbp-0x270]
  4066ef:	fstp   TBYTE PTR ds:0x411160
  4066f6:	or     r12d,r12d
  4066f9:	je     406778 <memchr+0x28>
  4066fb:	mov    rdx,0xffffffffffffffff
  406702:	fld    TBYTE PTR [rbp+0x40]
  406705:	fstp   TBYTE PTR [rsp+0x20]
  406709:	call   405500 <CommandLineToArgvA+0x110>
  40670e:	fstp   TBYTE PTR [rbp-0x290]
  406714:	fld    TBYTE PTR [rbp-0x290]
  40671a:	fstp   TBYTE PTR [rbp-0x30]
  40671d:	fld    TBYTE PTR [rbp-0x30]

0000000000406720 <malloc>:
  406720:	fstp   TBYTE PTR [rsp+0x20]
  406724:	call   404ab0 <_assertfailfn+0x8b>
  406729:	fstp   TBYTE PTR [rbp-0x2b0]
  40672f:	fld    TBYTE PTR [rbp-0x2b0]
  406735:	fstp   TBYTE PTR [rbp-0x30]
  406738:	mov    rdx,0x1
  40673f:	fld    TBYTE PTR [rbp-0x30]
  406742:	fstp   TBYTE PTR [rsp+0x20]
  406746:	call   405500 <CommandLineToArgvA+0x110>
  40674b:	.byte 0xdb
  40674c:	.byte 0xbd
  40674d:	xor    ch,bh
  40674f:	.byte 0xff

0000000000406750 <memchr>:
  406750:	(bad)  
  406751:	fld    TBYTE PTR [rbp-0x2d0]
  406757:	fstp   TBYTE PTR [rbp-0x30]
  40675a:	fld    TBYTE PTR [rbp-0x30]
  40675d:	fld    TBYTE PTR [rbp+0x40]
  406760:	fucomip st,st(1)
  406762:	fstp   st(0)
  406764:	jp     406768 <memchr+0x18>
  406766:	je     406778 <memchr+0x28>
  406768:	fld    TBYTE PTR ds:0x411160
  40676f:	fchs   
  406771:	fstp   TBYTE PTR ds:0x411160
  406778:	fld    TBYTE PTR ds:0x411160
  40677f:	add    rsp,0x2f0
  406786:	pop    r12
  406788:	pop    rdi
  406789:	pop    rsi
  40678a:	pop    rbx
  40678b:	leave  
  40678c:	ret    
  40678d:	push   rbp
  40678e:	mov    rbp,rsp
  406791:	sub    rsp,0xb0
  406798:	mov    rdx,0x5
  40679f:	.byte 0xdb

00000000004067a0 <memcpy>:
  4067a0:	ins    DWORD PTR es:[rdi],dx
  4067a1:	xor    bl,bl
  4067a3:	jl     4067c9 <memcpy+0x29>
  4067a5:	and    al,ch
  4067a7:	push   rbp
  4067a8:	in     eax,dx
  4067a9:	(bad)  
  4067aa:	(bad)  
  4067ab:	fstp   TBYTE PTR [rbp-0x30]
  4067ae:	fld    TBYTE PTR [rbp-0x30]
  4067b1:	fstp   TBYTE PTR [rbp-0x10]
  4067b4:	fld    TBYTE PTR [rbp-0x10]
  4067b7:	fstp   TBYTE PTR [rsp+0x20]
  4067bb:	call   404ab0 <_assertfailfn+0x8b>
  4067c0:	fstp   TBYTE PTR [rbp-0x50]
  4067c3:	fld    TBYTE PTR [rbp-0x50]
  4067c6:	fstp   TBYTE PTR [rbp-0x10]
  4067c9:	mov    rdx,0xfffffffffffffffb

00000000004067d0 <memmove>:
  4067d0:	fld    TBYTE PTR [rbp-0x10]
  4067d3:	fstp   TBYTE PTR [rsp+0x20]
  4067d7:	call   405500 <CommandLineToArgvA+0x110>
  4067dc:	fstp   TBYTE PTR [rbp-0x70]
  4067df:	fld    TBYTE PTR [rbp-0x70]
  4067e2:	fstp   TBYTE PTR [rbp-0x10]
  4067e5:	fld    TBYTE PTR [rbp-0x10]
  4067e8:	add    rsp,0xb0
  4067ef:	leave  
  4067f0:	ret    
  4067f1:	nop
  4067f2:	nop
  4067f3:	nop
	...
  406800:	push   rax
  406801:	fnstcw WORD PTR [rsp]
  406804:	mov    eax,DWORD PTR [rsp]
  406807:	btr    DWORD PTR [rsp],0x8
  40680c:	or     WORD PTR [rsp],0x200
  406812:	fldcw  WORD PTR [rsp]
  406815:	pop    rcx
  406816:	mov    al,ah
  406818:	and    eax,0x3
  40681b:	ret    
  40681c:	push   rax
  40681d:	fnstcw WORD PTR [rsp]
  406820:	pop    rax
  406821:	jmp    406816 <memmove+0x46>
  406823:	push   rax
  406824:	fnstcw WORD PTR [rsp]
  406827:	mov    eax,DWORD PTR [rsp]
  40682a:	or     WORD PTR [rsp],0x300
  406830:	jmp    406812 <memmove+0x42>
  406832:	nop
  406833:	nop
	...
  406840:	clc    
  406841:	rcr    QWORD PTR [rcx+0x8],1
  406845:	rcr    QWORD PTR [rcx+0x10],1
  406849:	rcr    QWORD PTR [rcx+0x18],1
  40684d:	rcr    QWORD PTR [rcx+0x20],1
  406851:	rcr    QWORD PTR [rcx+0x28],1
  406855:	rcr    QWORD PTR [rcx+0x30],1
  406859:	rcr    QWORD PTR [rcx+0x38],1
  40685d:	rex.W
  40685e:	.byte 0xd1
  40685f:	pop    rcx

0000000000406860 <memset>:
  406860:	rex
  406861:	rcr    QWORD PTR [rcx+0x48],1
  406865:	ret    
  406866:	nop
  406867:	nop
  406868:	clc    
  406869:	rcl    QWORD PTR [rcx+0x48],1
  40686d:	rcl    QWORD PTR [rcx+0x40],1
  406871:	rcl    QWORD PTR [rcx+0x38],1
  406875:	rcl    QWORD PTR [rcx+0x30],1
  406879:	rcl    QWORD PTR [rcx+0x28],1
  40687d:	rcl    QWORD PTR [rcx+0x20],1
  406881:	rcl    QWORD PTR [rcx+0x18],1
  406885:	rcl    QWORD PTR [rcx+0x10],1
  406889:	rcl    QWORD PTR [rcx+0x8],1
  40688d:	ret    
  40688e:	nop
  40688f:	nop
  406890:	xchg   rdx,rcx
  406893:	mov    r8,QWORD PTR [rdx+0x8]
  406897:	mov    rax,QWORD PTR [rdx+0x10]
  40689b:	shld   r8,rax,cl
  40689f:	rex.WR

00000000004068a0 <mtherr>:
  4068a0:	mov    DWORD PTR [rdx+0x8],eax
  4068a3:	mov    r8,QWORD PTR [rdx+0x18]
  4068a7:	shld   rax,r8,cl
  4068ab:	mov    QWORD PTR [rdx+0x10],rax
  4068af:	mov    rax,QWORD PTR [rdx+0x20]
  4068b3:	shld   r8,rax,cl
  4068b7:	mov    QWORD PTR [rdx+0x18],r8
  4068bb:	mov    r8,QWORD PTR [rdx+0x28]
  4068bf:	shld   rax,r8,cl
  4068c3:	mov    QWORD PTR [rdx+0x20],rax
  4068c7:	mov    rax,QWORD PTR [rdx+0x30]
  4068cb:	shld   r8,rax,cl
  4068cf:	mov    QWORD PTR [rdx+0x28],r8
  4068d3:	mov    r8,QWORD PTR [rdx+0x38]
  4068d7:	shld   rax,r8,cl
  4068db:	mov    QWORD PTR [rdx+0x30],rax
  4068df:	mov    rax,QWORD PTR [rdx+0x40]
  4068e3:	shld   r8,rax,cl
  4068e7:	mov    QWORD PTR [rdx+0x38],r8
  4068eb:	mov    r8,QWORD PTR [rdx+0x48]
  4068ef:	shld   rax,r8,cl
  4068f3:	mov    QWORD PTR [rdx+0x40],rax
  4068f7:	shl    r8,cl
  4068fa:	mov    QWORD PTR [rdx+0x48],r8
  4068fe:	rex.W
  4068ff:	.byte 0x89

0000000000406900 <nan>:
  406900:	enter  0x90c3,0x90
  406904:	nop
  406905:	nop
  406906:	nop
  406907:	nop

0000000000406908 <infinity>:
  406908:	xchg   rdx,rcx
  40690b:	mov    rax,QWORD PTR [rdx+0x48]
  40690f:	mov    r8,QWORD PTR [rdx+0x40]
  406913:	shrd   rax,r8,cl
  406917:	mov    QWORD PTR [rdx+0x48],rax
  40691b:	mov    rax,QWORD PTR [rdx+0x38]
  40691f:	rex.WB

0000000000406920 <polevll>:
  406920:	shrd   eax,eax,cl
  406923:	mov    QWORD PTR [rdx+0x40],r8
  406927:	mov    r8,QWORD PTR [rdx+0x30]
  40692b:	shrd   rax,r8,cl
  40692f:	mov    QWORD PTR [rdx+0x38],rax
  406933:	mov    rax,QWORD PTR [rdx+0x28]
  406937:	shrd   r8,rax,cl
  40693b:	mov    QWORD PTR [rdx+0x30],r8
  40693f:	mov    r8,QWORD PTR [rdx+0x20]
  406943:	shrd   rax,r8,cl
  406947:	mov    QWORD PTR [rdx+0x28],rax
  40694b:	mov    rax,QWORD PTR [rdx+0x18]
  40694f:	shrd   r8,rax,cl
  406953:	mov    QWORD PTR [rdx+0x20],r8
  406957:	mov    r8,QWORD PTR [rdx+0x10]
  40695b:	shrd   rax,r8,cl
  40695f:	mov    QWORD PTR [rdx+0x18],rax
  406963:	rex.W

0000000000406964 <p1evll>:
  406964:	mov    eax,DWORD PTR [rdx+0x8]
  406967:	shrd   r8,rax,cl
  40696b:	mov    QWORD PTR [rdx+0x10],r8
  40696f:	shr    rax,cl
  406972:	mov    QWORD PTR [rdx+0x8],rax
  406976:	mov    eax,ecx
  406978:	ret    
  406979:	nop
  40697a:	nop
  40697b:	nop
  40697c:	nop
  40697d:	nop
  40697e:	nop
  40697f:	nop
  406980:	bsr    rax,rcx
  406984:	ret    
  406985:	nop
  406986:	nop
  406987:	nop
  406988:	mov    rax,QWORD PTR [rdx+0x48]
  40698c:	add    rax,QWORD PTR [rcx+0x48]
  406990:	mov    QWORD PTR [rdx+0x48],rax
  406994:	mov    rax,QWORD PTR [rdx+0x40]
  406998:	adc    rax,QWORD PTR [rcx+0x40]
  40699c:	mov    QWORD PTR [rdx+0x40],rax
  4069a0:	mov    rax,QWORD PTR [rdx+0x38]
  4069a4:	adc    rax,QWORD PTR [rcx+0x38]
  4069a8:	mov    QWORD PTR [rdx+0x38],rax
  4069ac:	mov    rax,QWORD PTR [rdx+0x30]
  4069b0:	adc    rax,QWORD PTR [rcx+0x30]
  4069b4:	mov    QWORD PTR [rdx+0x30],rax
  4069b8:	mov    rax,QWORD PTR [rdx+0x28]
  4069bc:	adc    rax,QWORD PTR [rcx+0x28]

00000000004069c0 <powil>:
  4069c0:	mov    QWORD PTR [rdx+0x28],rax
  4069c4:	mov    rax,QWORD PTR [rdx+0x20]
  4069c8:	adc    rax,QWORD PTR [rcx+0x20]
  4069cc:	mov    QWORD PTR [rdx+0x20],rax
  4069d0:	mov    rax,QWORD PTR [rdx+0x18]
  4069d4:	adc    rax,QWORD PTR [rcx+0x18]
  4069d8:	mov    QWORD PTR [rdx+0x18],rax
  4069dc:	mov    rax,QWORD PTR [rdx+0x10]
  4069e0:	adc    rax,QWORD PTR [rcx+0x10]
  4069e4:	mov    QWORD PTR [rdx+0x10],rax
  4069e8:	mov    rax,QWORD PTR [rdx+0x8]
  4069ec:	adc    rax,QWORD PTR [rcx+0x8]
  4069f0:	mov    QWORD PTR [rdx+0x8],rax
  4069f4:	ret    
  4069f5:	nop
  4069f6:	nop
  4069f7:	nop
  4069f8:	mov    rax,QWORD PTR [rdx+0x48]
  4069fc:	sub    rax,QWORD PTR [rcx+0x48]
  406a00:	mov    QWORD PTR [rdx+0x48],rax
  406a04:	mov    rax,QWORD PTR [rdx+0x40]
  406a08:	sbb    rax,QWORD PTR [rcx+0x40]
  406a0c:	mov    QWORD PTR [rdx+0x40],rax
  406a10:	mov    rax,QWORD PTR [rdx+0x38]
  406a14:	sbb    rax,QWORD PTR [rcx+0x38]
  406a18:	mov    QWORD PTR [rdx+0x38],rax
  406a1c:	mov    rax,QWORD PTR [rdx+0x30]
  406a20:	sbb    rax,QWORD PTR [rcx+0x30]
  406a24:	mov    QWORD PTR [rdx+0x30],rax
  406a28:	mov    rax,QWORD PTR [rdx+0x28]
  406a2c:	sbb    rax,QWORD PTR [rcx+0x28]
  406a30:	mov    QWORD PTR [rdx+0x28],rax
  406a34:	mov    rax,QWORD PTR [rdx+0x20]
  406a38:	sbb    rax,QWORD PTR [rcx+0x20]
  406a3c:	mov    QWORD PTR [rdx+0x20],rax
  406a40:	mov    rax,QWORD PTR [rdx+0x18]
  406a44:	sbb    rax,QWORD PTR [rcx+0x18]
  406a48:	mov    QWORD PTR [rdx+0x18],rax
  406a4c:	mov    rax,QWORD PTR [rdx+0x10]
  406a50:	sbb    rax,QWORD PTR [rcx+0x10]
  406a54:	mov    QWORD PTR [rdx+0x10],rax
  406a58:	mov    rax,QWORD PTR [rdx+0x8]
  406a5c:	sbb    rax,QWORD PTR [rcx+0x8]
  406a60:	mov    QWORD PTR [rdx+0x8],rax
  406a64:	ret    
  406a65:	nop
  406a66:	nop
  406a67:	nop
  406a68:	mov    rax,QWORD PTR [rcx]
  406a6b:	mov    QWORD PTR [rdx],rax
  406a6e:	movupd xmm0,XMMWORD PTR [rcx+0x10]
  406a73:	movupd XMMWORD PTR [rdx+0x8],xmm0
  406a78:	movupd xmm0,XMMWORD PTR [rcx+0x20]
  406a7d:	movupd XMMWORD PTR [rdx+0x18],xmm0
  406a82:	movupd xmm0,XMMWORD PTR [rcx+0x30]
  406a87:	movupd XMMWORD PTR [rdx+0x28],xmm0
  406a8c:	mov    rax,QWORD PTR [rcx+0x40]
  406a90:	mov    QWORD PTR [rdx+0x38],rax
  406a94:	ret    
  406a95:	nop
  406a96:	nop
  406a97:	nop
  406a98:	mov    rax,QWORD PTR [rcx]
  406a9b:	mov    QWORD PTR [rdx],rax
  406a9e:	mov    QWORD PTR [rdx+0x8],0x0
  406aa6:	movupd xmm0,XMMWORD PTR [rcx+0x8]
  406aab:	movupd XMMWORD PTR [rdx+0x10],xmm0
  406ab0:	movupd xmm0,XMMWORD PTR [rcx+0x18]
  406ab5:	movupd XMMWORD PTR [rdx+0x20],xmm0
  406aba:	movupd xmm0,XMMWORD PTR [rcx+0x28]
  406abf:	movupd XMMWORD PTR [rdx+0x30],xmm0
  406ac4:	mov    rax,QWORD PTR [rcx+0x38]
  406ac8:	mov    QWORD PTR [rdx+0x40],rax
  406acc:	mov    QWORD PTR [rdx+0x48],0x0
  406ad4:	ret    
  406ad5:	nop
  406ad6:	nop
  406ad7:	nop
  406ad8:	movupd xmm0,XMMWORD PTR [rcx]
  406adc:	movupd xmm1,XMMWORD PTR [rcx+0x10]
  406ae1:	movupd XMMWORD PTR [rdx],xmm0
  406ae5:	movupd XMMWORD PTR [rdx+0x10],xmm1
  406aea:	movupd xmm0,XMMWORD PTR [rcx+0x20]
  406aef:	movupd xmm1,XMMWORD PTR [rcx+0x30]
  406af4:	movupd XMMWORD PTR [rdx+0x20],xmm0
  406af9:	movupd XMMWORD PTR [rdx+0x30],xmm1
  406afe:	ret    
  406aff:	nop
  406b00:	xorpd  xmm0,xmm0
  406b04:	movupd XMMWORD PTR [rcx],xmm0
  406b08:	movupd XMMWORD PTR [rcx+0x10],xmm0
  406b0d:	movupd XMMWORD PTR [rcx+0x20],xmm0
  406b12:	movupd XMMWORD PTR [rcx+0x30],xmm0
  406b17:	ret    
  406b18:	xorpd  xmm1,xmm1
  406b1c:	sub    rsp,0x50
  406b20:	movupd XMMWORD PTR [rsp],xmm1
  406b25:	movupd XMMWORD PTR [rsp+0x10],xmm1
  406b2b:	movupd XMMWORD PTR [rsp+0x20],xmm1
  406b31:	movupd XMMWORD PTR [rsp+0x30],xmm1
  406b37:	movupd XMMWORD PTR [rsp+0x40],xmm1
  406b3d:	mov    rax,QWORD PTR [rdx]
  406b40:	mov    QWORD PTR [rsp],rax
  406b44:	mov    r11,QWORD PTR [rcx+0x8]
  406b48:	mov    r8,rdx
  406b4b:	xor    ecx,ecx
  406b4d:	mov    rax,QWORD PTR [r8+0x40]
  406b51:	or     rax,rax
  406b54:	je     406b63 <powil+0x1a3>
  406b56:	mul    r11
  406b59:	mov    QWORD PTR [rsp+0x48],rax
  406b5e:	mov    QWORD PTR [rsp+0x40],rdx
  406b63:	mov    rax,QWORD PTR [r8+0x38]
  406b67:	or     rax,rax
  406b6a:	je     406b7e <powil+0x1be>
  406b6c:	mul    r11
  406b6f:	add    QWORD PTR [rsp+0x40],rax
  406b74:	adc    QWORD PTR [rsp+0x38],rdx
  406b79:	adc    QWORD PTR [rsp+0x30],rcx
  406b7e:	mov    rax,QWORD PTR [r8+0x30]
  406b82:	or     rax,rax
  406b85:	je     406b99 <powil+0x1d9>
  406b87:	mul    r11
  406b8a:	add    QWORD PTR [rsp+0x38],rax
  406b8f:	adc    QWORD PTR [rsp+0x30],rdx
  406b94:	adc    QWORD PTR [rsp+0x28],rcx
  406b99:	mov    rax,QWORD PTR [r8+0x28]
  406b9d:	or     rax,rax
  406ba0:	je     406bb4 <powil+0x1f4>
  406ba2:	mul    r11
  406ba5:	add    QWORD PTR [rsp+0x30],rax
  406baa:	adc    QWORD PTR [rsp+0x28],rdx
  406baf:	adc    QWORD PTR [rsp+0x20],rcx
  406bb4:	mov    rax,QWORD PTR [r8+0x20]
  406bb8:	or     rax,rax
  406bbb:	je     406bcf <powil+0x20f>
  406bbd:	mul    r11
  406bc0:	add    QWORD PTR [rsp+0x28],rax
  406bc5:	adc    QWORD PTR [rsp+0x20],rdx
  406bca:	adc    QWORD PTR [rsp+0x18],rcx
  406bcf:	mov    rax,QWORD PTR [r8+0x18]
  406bd3:	or     rax,rax
  406bd6:	je     406bea <powil+0x22a>
  406bd8:	mul    r11
  406bdb:	add    QWORD PTR [rsp+0x20],rax
  406be0:	adc    QWORD PTR [rsp+0x18],rdx
  406be5:	adc    QWORD PTR [rsp+0x10],rcx
  406bea:	mov    rax,QWORD PTR [r8+0x10]
  406bee:	or     rax,rax
  406bf1:	je     406c05 <powil+0x245>
  406bf3:	mul    r11
  406bf6:	add    QWORD PTR [rsp+0x18],rax
  406bfb:	adc    QWORD PTR [rsp+0x10],rdx
  406c00:	adc    QWORD PTR [rsp+0x8],rcx
  406c05:	mov    rax,QWORD PTR [r8+0x8]
  406c09:	or     rax,rax
  406c0c:	je     406c1b <powil+0x25b>
  406c0e:	mul    r11
  406c11:	add    QWORD PTR [rsp+0x10],rax
  406c16:	adc    QWORD PTR [rsp+0x8],rdx
  406c1b:	rex.WRB

0000000000406c1c <powl>:
  406c1c:	mov    edx,eax
  406c1e:	call   407158 <powl+0x53c>
  406c23:	add    rsp,0x50
  406c27:	ret    
  406c28:	push   rsi
  406c29:	xorpd  xmm0,xmm0
  406c2d:	push   rdi
  406c2e:	push   r12
  406c30:	sub    rsp,0x80
  406c37:	mov    r8,rcx
  406c3a:	movupd XMMWORD PTR [rsp],xmm0
  406c3f:	mov    r9,rdx
  406c42:	movupd XMMWORD PTR [rsp+0x10],xmm0
  406c48:	movupd XMMWORD PTR [rsp+0x20],xmm0
  406c4e:	movupd XMMWORD PTR [rsp+0x30],xmm0
  406c54:	movupd XMMWORD PTR [rsp+0x40],xmm0
  406c5a:	movupd XMMWORD PTR [rsp+0x50],xmm0
  406c60:	mov    rax,QWORD PTR [r9]
  406c63:	mov    QWORD PTR [rsp],rax
  406c67:	lea    r11,[rsp+0x50]
  406c6c:	lea    rdi,[r8+0x40]
  406c70:	lea    r10,[r9+0x20]
  406c74:	mov    esi,0x7
  406c79:	xor    ecx,ecx
  406c7b:	mov    rax,QWORD PTR [rdi]
  406c7e:	or     rax,rax
  406c81:	je     406c99 <powl+0x7d>
  406c83:	mov    rdx,QWORD PTR [r10]
  406c86:	or     rdx,rdx
  406c89:	je     406c99 <powl+0x7d>
  406c8b:	mul    rdx
  406c8e:	add    QWORD PTR [r11],rax
  406c91:	adc    QWORD PTR [r11-0x8],rdx
  406c95:	adc    QWORD PTR [r11-0x10],rcx
  406c99:	add    rdi,0xfffffffffffffff8
  406c9d:	add    r10,0x8
  406ca1:	dec    esi
  406ca3:	cmp    esi,0x3
  406ca6:	jge    406c7b <powl+0x5f>
  406ca8:	add    r11,0xfffffffffffffff8
  406cac:	mov    r12d,0x8
  406cb2:	mov    esi,r12d
  406cb5:	mov    rcx,r8
  406cb8:	lea    rdi,[rcx+rsi*8]
  406cbc:	lea    r10,[r9+0x10]
  406cc0:	xor    ecx,ecx
  406cc2:	jmp    406ced <powl+0xd1>
  406cc4:	mov    rax,QWORD PTR [rdi]
  406cc7:	or     rax,rax
  406cca:	je     406ce2 <powl+0xc6>
  406ccc:	mov    rdx,QWORD PTR [r10]
  406ccf:	or     rdx,rdx
  406cd2:	je     406ce2 <powl+0xc6>
  406cd4:	mul    rdx
  406cd7:	add    QWORD PTR [r11],rax
  406cda:	adc    QWORD PTR [r11-0x8],rdx
  406cde:	adc    QWORD PTR [r11-0x10],rcx
  406ce2:	add    rdi,0xfffffffffffffff8
  406ce6:	add    r10,0x8
  406cea:	sub    esi,0x1
  406ced:	cmp    esi,0x2
  406cf0:	jge    406cc4 <powl+0xa8>
  406cf2:	add    r11,0xfffffffffffffff8
  406cf6:	sub    r12d,0x1
  406cfa:	cmp    r12d,0x2
  406cfe:	jge    406cb2 <powl+0x96>
  406d00:	mov    r10,r9
  406d03:	call   407158 <powl+0x53c>
  406d08:	add    rsp,0x80
  406d0f:	pop    r12
  406d11:	pop    rdi
  406d12:	pop    rsi
  406d13:	ret    
  406d14:	nop
  406d15:	nop
  406d16:	nop
  406d17:	nop
  406d18:	push   rsi
  406d19:	xorpd  xmm0,xmm0
  406d1d:	push   rbx
  406d1e:	mov    r9,rcx
  406d21:	mov    r10,rdx
  406d24:	mov    QWORD PTR [rdx+0x8],0x0
  406d2c:	movupd XMMWORD PTR [rdx+0x10],xmm0
  406d31:	movupd XMMWORD PTR [rdx+0x20],xmm0
  406d36:	movupd XMMWORD PTR [rdx+0x30],xmm0
  406d3b:	movupd XMMWORD PTR [rdx+0x40],xmm0
  406d40:	lea    rbx,[rdx+r8*8+0x18]
  406d45:	mov    esi,r8d
  406d48:	add    esi,0x2
  406d4b:	jmp    406db7 <powl+0x19b>
  406d4d:	nop
  406d4e:	nop
  406d4f:	nop
  406d50:	lea    r11,[r9+0x10]
  406d54:	lea    r8,[r9+rsi*8]
  406d58:	jmp    406dab <powl+0x18f>
  406d5a:	nop
  406d5b:	nop
  406d5c:	nop
  406d5d:	nop
  406d5e:	nop
  406d5f:	nop
  406d60:	mov    rdx,QWORD PTR [r8]
  406d63:	or     rdx,rdx
  406d66:	je     406d70 <powl+0x154>
  406d68:	mov    rax,QWORD PTR [r11]
  406d6b:	or     rax,rax
  406d6e:	jne    406d7c <powl+0x160>
  406d70:	sub    r8,0x8
  406d74:	add    r11,0x8
  406d78:	jmp    406dab <powl+0x18f>
  406d7a:	nop
  406d7b:	nop
  406d7c:	mul    rdx
  406d7f:	xor    ecx,ecx
  406d81:	cmp    r8,r11
  406d84:	je     406d90 <powl+0x174>
  406d86:	clc    
  406d87:	rcl    rax,1
  406d8a:	rcl    rdx,1
  406d8d:	rcl    rcx,1
  406d90:	sub    r8,0x8
  406d94:	add    QWORD PTR [rbx],rax
  406d97:	adc    rdx,0x0
  406d9b:	adc    rcx,0x0
  406d9f:	add    r11,0x8
  406da3:	add    QWORD PTR [rbx-0x8],rdx
  406da7:	adc    QWORD PTR [rbx-0x10],rcx
  406dab:	cmp    r8,r11
  406dae:	jae    406d60 <powl+0x144>
  406db0:	sub    rbx,0x8
  406db4:	sub    esi,0x1
  406db7:	cmp    esi,0x2
  406dba:	jge    406d50 <powl+0x134>
  406dbc:	clc    
  406dbd:	rcl    QWORD PTR [r10+0x48],1
  406dc1:	rcl    QWORD PTR [r10+0x40],1
  406dc5:	rcl    QWORD PTR [r10+0x38],1
  406dc9:	rcl    QWORD PTR [r10+0x30],1
  406dcd:	rcl    QWORD PTR [r10+0x28],1
  406dd1:	rcl    QWORD PTR [r10+0x20],1
  406dd5:	rcl    QWORD PTR [r10+0x18],1
  406dd9:	rcl    QWORD PTR [r10+0x10],1
  406ddd:	rcl    QWORD PTR [r10+0x8],1
  406de1:	pop    rbx
  406de2:	pop    rsi
  406de3:	ret    
  406de4:	nop
  406de5:	nop
  406de6:	nop
  406de7:	nop
  406de8:	mov    r10,rcx
  406deb:	movq   xmm1,rbx
  406df0:	xorpd  xmm0,xmm0
  406df4:	mov    rbx,rdx
  406df7:	movq   xmm3,rdi
  406dfc:	lea    rcx,[r8+0x10]
  406e00:	movq   xmm2,r12
  406e05:	mov    edi,r9d
  406e08:	movupd XMMWORD PTR [rcx],xmm0
  406e0c:	movupd XMMWORD PTR [rcx+0x10],xmm0
  406e11:	movupd XMMWORD PTR [rcx+0x20],xmm0
  406e16:	movupd XMMWORD PTR [rcx+0x30],xmm0
  406e1b:	lea    r11,[r8+rdi*8+0x18]
  406e20:	add    edi,0x2
  406e23:	jl     406e76 <powl+0x25a>
  406e25:	lea    r8,[rbx+0x10]
  406e29:	lea    r9,[r10+rdi*8]
  406e2d:	mov    r12d,edi
  406e30:	sub    r12d,0x2
  406e34:	mov    rax,QWORD PTR [r9]
  406e37:	or     rax,rax
  406e3a:	je     406e5c <powl+0x240>
  406e3c:	mov    rdx,QWORD PTR [r8]
  406e3f:	or     rdx,rdx
  406e42:	je     406e5c <powl+0x240>
  406e44:	mul    rdx
  406e47:	xor    ecx,ecx
  406e49:	add    QWORD PTR [r11],rax
  406e4c:	adc    rdx,0x0
  406e50:	adc    rcx,0x0
  406e54:	add    QWORD PTR [r11-0x8],rdx
  406e58:	adc    QWORD PTR [r11-0x10],rcx
  406e5c:	sub    r9,0x8
  406e60:	add    r8,0x8
  406e64:	sub    r12d,0x1
  406e68:	jge    406e34 <powl+0x218>
  406e6a:	sub    r11,0x8
  406e6e:	sub    edi,0x1
  406e71:	cmp    edi,0x2
  406e74:	jge    406e25 <powl+0x209>
  406e76:	movq   rbx,xmm1
  406e7b:	movq   r12,xmm2
  406e80:	movq   rdi,xmm3
  406e85:	ret    
  406e86:	nop
  406e87:	nop
  406e88:	sub    rsp,0x60
  406e8c:	movupd xmm0,XMMWORD PTR [rdx]
  406e90:	movupd XMMWORD PTR [rsp],xmm0
  406e95:	mov    r9,rcx
  406e98:	mov    r10,rdx
  406e9b:	mov    rcx,r10
  406e9e:	mov    edx,0x2
  406ea3:	call   406908 <infinity>
  406ea8:	mov    rcx,QWORD PTR [r9+0x8]
  406eac:	mov    rdx,QWORD PTR [r10+0x10]
  406eb0:	mov    rax,QWORD PTR [r10+0x18]
  406eb4:	div    rcx
  406eb7:	mov    QWORD PTR [rsp+0x10],rax
  406ebc:	mov    rax,QWORD PTR [r10+0x20]
  406ec0:	div    rcx
  406ec3:	mov    QWORD PTR [rsp+0x18],rax
  406ec8:	mov    rax,QWORD PTR [r10+0x28]
  406ecc:	div    rcx
  406ecf:	mov    QWORD PTR [rsp+0x20],rax
  406ed4:	mov    rax,QWORD PTR [r10+0x30]
  406ed8:	div    rcx
  406edb:	mov    QWORD PTR [rsp+0x28],rax
  406ee0:	mov    rax,QWORD PTR [r10+0x38]
  406ee4:	div    rcx
  406ee7:	mov    QWORD PTR [rsp+0x30],rax
  406eec:	mov    rax,QWORD PTR [r10+0x40]
  406ef0:	div    rcx
  406ef3:	mov    QWORD PTR [rsp+0x38],rax
  406ef8:	mov    rax,QWORD PTR [r10+0x48]
  406efc:	div    rcx
  406eff:	mov    QWORD PTR [rsp+0x40],rax
  406f04:	xor    rax,rax
  406f07:	div    rcx
  406f0a:	mov    QWORD PTR [rsp+0x48],rax
  406f0f:	call   407158 <powl+0x53c>
  406f14:	add    rsp,0x60
  406f18:	ret    
  406f19:	nop
  406f1a:	nop
  406f1b:	nop
  406f1c:	nop
  406f1d:	nop
  406f1e:	nop
  406f1f:	nop
  406f20:	push   rsi
  406f21:	push   rdi
  406f22:	mov    rdi,rcx
  406f25:	mov    rsi,rdx
  406f28:	sub    rsp,0x138
  406f2f:	mov    rdx,rcx
  406f32:	mov    rdi,rsp
  406f35:	xor    eax,eax
  406f37:	mov    ecx,0x27
  406f3c:	rep stos QWORD PTR es:[rdi],rax
  406f3f:	mov    rdi,rdx
  406f42:	mov    rcx,QWORD PTR [rdi+0x10]
  406f46:	xor    eax,eax
  406f48:	movabs rdx,0x4000000000000000
  406f52:	div    rcx
  406f55:	mov    QWORD PTR [rsp+0x78],rax
  406f5a:	mov    rcx,rax
  406f5d:	mul    rcx
  406f60:	xor    rcx,rcx
  406f63:	clc    
  406f64:	rcl    rax,1
  406f67:	rcl    rdx,1
  406f6a:	rcl    rcx,1
  406f6d:	mov    QWORD PTR [rsp+0xe8],rax
  406f75:	mov    QWORD PTR [rsp+0xe0],rdx
  406f7d:	mov    QWORD PTR [rsp+0xd8],rcx
  406f85:	mov    r9d,0x2
  406f8b:	mov    r8,rsp
  406f8e:	lea    rdx,[rsp+0xd0]
  406f96:	mov    rcx,rdi
  406f99:	call   406de8 <powl+0x1cc>
  406f9e:	lea    rdx,[rsp+0x68]
  406fa3:	mov    rcx,rsp
  406fa6:	call   4069f8 <powil+0x38>
  406fab:	lea    rcx,[rsp+0x68]
  406fb0:	clc    
  406fb1:	rcl    QWORD PTR [rcx+0x48],1
  406fb5:	rcl    QWORD PTR [rcx+0x40],1
  406fb9:	rcl    QWORD PTR [rcx+0x38],1
  406fbd:	rcl    QWORD PTR [rcx+0x30],1
  406fc1:	rcl    QWORD PTR [rcx+0x28],1
  406fc5:	rcl    QWORD PTR [rcx+0x20],1
  406fc9:	rcl    QWORD PTR [rcx+0x18],1
  406fcd:	rcl    QWORD PTR [rcx+0x10],1
  406fd1:	rcl    QWORD PTR [rcx+0x8],1
  406fd5:	mov    r8d,0x4
  406fdb:	lea    rdx,[rsp+0xd0]
  406fe3:	lea    rcx,[rsp+0x68]
  406fe8:	call   406d18 <powl+0xfc>
  406fed:	mov    r9d,0x4
  406ff3:	mov    r8,rsp
  406ff6:	lea    rdx,[rsp+0xd0]
  406ffe:	mov    rcx,rdi
  407001:	call   406de8 <powl+0x1cc>
  407006:	lea    rdx,[rsp+0x68]
  40700b:	mov    rcx,rsp
  40700e:	call   4069f8 <powil+0x38>
  407013:	lea    rcx,[rsp+0x68]
  407018:	clc    
  407019:	rcl    QWORD PTR [rcx+0x48],1
  40701d:	rcl    QWORD PTR [rcx+0x40],1
  407021:	rcl    QWORD PTR [rcx+0x38],1
  407025:	rcl    QWORD PTR [rcx+0x30],1
  407029:	rcl    QWORD PTR [rcx+0x28],1
  40702d:	rcl    QWORD PTR [rcx+0x20],1
  407031:	rcl    QWORD PTR [rcx+0x18],1
  407035:	rcl    QWORD PTR [rcx+0x10],1
  407039:	rcl    QWORD PTR [rcx+0x8],1
  40703d:	mov    r8d,0x8
  407043:	lea    rdx,[rsp+0xd0]
  40704b:	lea    rcx,[rsp+0x68]
  407050:	call   406d18 <powl+0xfc>
  407055:	mov    r9d,0x8
  40705b:	mov    r8,rsp
  40705e:	lea    rdx,[rsp+0xd0]
  407066:	mov    rcx,rdi
  407069:	call   406de8 <powl+0x1cc>
  40706e:	lea    rdx,[rsp+0x68]
  407073:	mov    rcx,rsp
  407076:	call   4069f8 <powil+0x38>
  40707b:	lea    rcx,[rsp+0x68]
  407080:	call   406868 <memset+0x8>
  407085:	mov    r8d,0x9
  40708b:	lea    rdx,[rsp+0xd0]
  407093:	lea    rcx,[rsp+0x68]
  407098:	call   406d18 <powl+0xfc>
  40709d:	mov    r9d,0x9
  4070a3:	mov    r8,rsp
  4070a6:	lea    rdx,[rsp+0xd0]
  4070ae:	mov    rcx,rdi
  4070b1:	call   406de8 <powl+0x1cc>
  4070b6:	lea    rdx,[rsp+0x68]
  4070bb:	mov    rcx,rsp
  4070be:	call   4069f8 <powil+0x38>
  4070c3:	lea    rcx,[rsp+0x68]
  4070c8:	call   406868 <memset+0x8>
  4070cd:	mov    r9,0x9
  4070d4:	mov    r8,rsp
  4070d7:	mov    rdx,rsi
  4070da:	call   406de8 <powl+0x1cc>
  4070df:	mov    rax,QWORD PTR [rsi]
  4070e2:	mov    QWORD PTR [rsp],rax
  4070e6:	mov    r10,rsi
  4070e9:	call   407158 <powl+0x53c>
  4070ee:	add    rsp,0x138
  4070f5:	pop    rdi
  4070f6:	pop    rsi
  4070f7:	ret    
  4070f8:	mov    rax,QWORD PTR [rcx]
  4070fb:	cmp    rax,QWORD PTR [rdx]
  4070fe:	jne    407150 <powl+0x534>
  407100:	mov    rax,QWORD PTR [rcx+0x8]
  407104:	cmp    rax,QWORD PTR [rdx+0x8]
  407108:	jne    407150 <powl+0x534>
  40710a:	mov    rax,QWORD PTR [rcx+0x10]
  40710e:	cmp    rax,QWORD PTR [rdx+0x10]
  407112:	jne    407150 <powl+0x534>
  407114:	mov    rax,QWORD PTR [rcx+0x18]
  407118:	cmp    rax,QWORD PTR [rdx+0x18]
  40711c:	jne    407150 <powl+0x534>
  40711e:	mov    rax,QWORD PTR [rcx+0x20]
  407122:	cmp    rax,QWORD PTR [rdx+0x20]
  407126:	jne    407150 <powl+0x534>
  407128:	mov    rax,QWORD PTR [rcx+0x28]
  40712c:	cmp    rax,QWORD PTR [rdx+0x28]
  407130:	jne    407150 <powl+0x534>
  407132:	mov    rax,QWORD PTR [rcx+0x30]
  407136:	cmp    rax,QWORD PTR [rdx+0x30]
  40713a:	jne    407150 <powl+0x534>
  40713c:	mov    rax,QWORD PTR [rdx+0x38]
  407140:	cmp    rax,QWORD PTR [rcx+0x38]
  407144:	jne    407150 <powl+0x534>
  407146:	mov    rax,0x1
  40714d:	ret    
  40714e:	nop
  40714f:	nop
  407150:	xor    rax,rax
  407153:	ret    
  407154:	nop
  407155:	nop
  407156:	nop
  407157:	nop
  407158:	lea    r11,[rsp+0x8]
  40715d:	movabs r9,0x8000000000000000
  407167:	test   QWORD PTR [r11+0x10],r9
  40716b:	jne    4071a8 <powl+0x58c>
  40716d:	mov    rcx,QWORD PTR [r11+0x10]
  407171:	bsr    rax,rcx
  407175:	mov    edx,DWORD PTR [r11+0x4]
  407179:	mov    r8d,0x40
  40717f:	sub    r8,rax
  407182:	cmp    r8,0x4
  407186:	jle    40718e <powl+0x572>
  407188:	mov    r8d,0x4
  40718e:	sub    rdx,r8
  407191:	jl     4071a8 <powl+0x58c>
  407193:	mov    DWORD PTR [r11+0x4],edx
  407197:	mov    edx,r8d
  40719a:	mov    rcx,r11
  40719d:	call   406890 <memset+0x30>
  4071a2:	nop
  4071a3:	nop
  4071a4:	nop
  4071a5:	nop
  4071a6:	nop
  4071a7:	nop
  4071a8:	test   QWORD PTR [r11+0x48],r9
  4071ac:	je     4071d1 <powl+0x5b5>
  4071ae:	xor    eax,eax
  4071b0:	add    QWORD PTR [r11+0x40],0x1
  4071b5:	adc    QWORD PTR [r11+0x38],rax
  4071b9:	adc    QWORD PTR [r11+0x30],rax
  4071bd:	adc    QWORD PTR [r11+0x28],rax
  4071c1:	adc    QWORD PTR [r11+0x20],rax
  4071c5:	adc    QWORD PTR [r11+0x18],rax
  4071c9:	adc    QWORD PTR [r11+0x10],rax
  4071cd:	adc    QWORD PTR [r11+0x8],rax
  4071d1:	or     QWORD PTR [r11+0x8],0x0
  4071d6:	je     407201 <powl+0x5e5>
  4071d8:	bsr    rdx,QWORD PTR [r11+0x8]
  4071dd:	add    rdx,0x1
  4071e1:	cmp    edx,0x4
  4071e4:	jle    4071eb <powl+0x5cf>
  4071e6:	mov    edx,0x4
  4071eb:	add    DWORD PTR [r11+0x4],edx
  4071ef:	cmp    DWORD PTR [r11+0x4],0x100000
  4071f7:	ja     407240 <powl+0x624>
  4071f9:	mov    rcx,r11
  4071fc:	call   406908 <infinity>
  407201:	movupd xmm0,XMMWORD PTR [r11]
  407206:	movupd XMMWORD PTR [r10],xmm0
  40720b:	movupd xmm0,XMMWORD PTR [r11+0x10]
  407211:	movupd XMMWORD PTR [r10+0x10],xmm0
  407217:	movupd xmm0,XMMWORD PTR [r11+0x20]
  40721d:	movupd XMMWORD PTR [r10+0x20],xmm0
  407223:	movupd xmm0,XMMWORD PTR [r11+0x30]
  407229:	movupd XMMWORD PTR [r10+0x30],xmm0
  40722f:	mov    rax,QWORD PTR [r11+0x40]
  407233:	mov    QWORD PTR [r10+0x40],rax
  407237:	mov    QWORD PTR [r10+0x48],0x0
  40723f:	ret    
  407240:	mov    DWORD PTR [r11+0x4],0x100000
  407248:	jmp    407201 <powl+0x5e5>
  40724a:	nop
  40724b:	nop
  40724c:	nop
  40724d:	nop
  40724e:	nop
  40724f:	nop
  407250:	mov    rax,QWORD PTR [rdx+0x8]
  407254:	cmp    QWORD PTR [rcx+0x8],rax
  407258:	jne    4072b0 <powl+0x694>
  40725a:	mov    rax,QWORD PTR [rdx+0x10]
  40725e:	cmp    QWORD PTR [rcx+0x10],rax
  407262:	jne    4072b0 <powl+0x694>
  407264:	mov    rax,QWORD PTR [rdx+0x18]
  407268:	cmp    QWORD PTR [rcx+0x18],rax
  40726c:	jne    4072b0 <powl+0x694>
  40726e:	mov    rax,QWORD PTR [rdx+0x20]
  407272:	cmp    QWORD PTR [rcx+0x20],rax
  407276:	jne    4072b0 <powl+0x694>
  407278:	mov    rax,QWORD PTR [rdx+0x28]
  40727c:	cmp    QWORD PTR [rcx+0x28],rax
  407280:	jne    4072b0 <powl+0x694>
  407282:	mov    rax,QWORD PTR [rdx+0x30]
  407286:	cmp    QWORD PTR [rcx+0x30],rax
  40728a:	jne    4072b0 <powl+0x694>
  40728c:	mov    rax,QWORD PTR [rdx+0x38]
  407290:	cmp    QWORD PTR [rcx+0x38],rax
  407294:	jne    4072b0 <powl+0x694>
  407296:	mov    rax,QWORD PTR [rdx+0x40]
  40729a:	cmp    QWORD PTR [rcx+0x40],rax
  40729e:	jne    4072b0 <powl+0x694>
  4072a0:	mov    rax,QWORD PTR [rdx+0x48]
  4072a4:	cmp    QWORD PTR [rcx+0x48],rax
  4072a8:	jne    4072b0 <powl+0x694>
  4072aa:	xor    eax,eax
  4072ac:	ret    
  4072ad:	nop
  4072ae:	nop
  4072af:	nop
  4072b0:	jb     4072b8 <powl+0x69c>
  4072b2:	mov    eax,0x1
  4072b7:	ret    
  4072b8:	mov    eax,0xffffffff
  4072bd:	ret    
  4072be:	nop
  4072bf:	nop
  4072c0:	push   rbp
  4072c1:	mov    rbp,rsp
  4072c4:	push   rbx
  4072c5:	sub    rsp,0x8
  4072c9:	mov    r11,rcx
  4072cc:	or     DWORD PTR [r11],0x0
  4072d0:	setne  al
  4072d3:	and    eax,0x1
  4072d6:	add    rsp,0x8
  4072da:	pop    rbx
  4072db:	leave  
  4072dc:	ret    
  4072dd:	push   rbp
  4072de:	mov    rbp,rsp
  4072e1:	push   rbx
  4072e2:	sub    rsp,0x8
  4072e6:	sub    rsp,0x90
  4072ed:	mov    QWORD PTR [rbp+0x20],r8
  4072f1:	mov    rbx,rdx
  4072f4:	mov    QWORD PTR [rbp+0x10],rcx
  4072f8:	lea    rdx,[rbp-0x60]
  4072fc:	mov    rcx,rcx
  4072ff:	call   406a98 <powil+0xd8>
  407304:	mov    eax,DWORD PTR [rbp-0x5c]
  407307:	sub    eax,0x80000
  40730c:	mov    DWORD PTR [rbp-0x64],eax
  40730f:	jg     40732a <powl+0x70e>
  407311:	mov    QWORD PTR [rbx],0x0
  407318:	mov    rdx,QWORD PTR [rbp+0x20]
  40731c:	lea    rcx,[rbp-0x60]
  407320:	call   406a68 <powil+0xa8>
  407325:	jmp    4073b7 <powl+0x79b>
  40732a:	cmp    DWORD PTR [rbp-0x64],0x3f
  40732e:	jle    40734c <powl+0x730>
  407330:	movabs rax,0x7fffffffffffffff
  40733a:	mov    QWORD PTR [rbx],rax
  40733d:	lea    rdx,[rbp-0x64]
  407341:	lea    rcx,[rbp-0x60]
  407345:	call   407b07 <__qclear+0x7>
  40734a:	jmp    407360 <powl+0x744>
  40734c:	lea    rdx,[rbp-0x64]
  407350:	lea    rcx,[rbp-0x60]
  407354:	call   407b07 <__qclear+0x7>
  407359:	mov    rax,QWORD PTR [rbp-0x58]
  40735d:	mov    QWORD PTR [rbx],rax
  407360:	mov    rax,QWORD PTR [rbp+0x10]
  407364:	or     DWORD PTR [rax],0x0
  407367:	je     40736c <powl+0x750>
  407369:	neg    QWORD PTR [rbx]
  40736c:	mov    DWORD PTR [rbp-0x60],0x0
  407373:	mov    DWORD PTR [rbp-0x5c],0x80000
  40737a:	mov    QWORD PTR [rbp-0x58],0x0
  407382:	lea    rdx,[rbp-0x64]
  407386:	lea    rcx,[rbp-0x60]
  40738a:	call   407cd1 <mulmInnerLoop+0xd>
  40738f:	mov    DWORD PTR [rbp-0x68],eax
  407392:	or     eax,eax
  407394:	je     4073a1 <powl+0x785>
  407396:	mov    rcx,QWORD PTR [rbp+0x20]
  40739a:	call   406b00 <powil+0x140>
  40739f:	jmp    4073b7 <powl+0x79b>
  4073a1:	mov    eax,DWORD PTR [rbp-0x5c]
  4073a4:	sub    eax,DWORD PTR [rbp-0x64]
  4073a7:	mov    DWORD PTR [rbp-0x5c],eax
  4073aa:	mov    rdx,QWORD PTR [rbp+0x20]
  4073ae:	lea    rcx,[rbp-0x60]
  4073b2:	call   406a68 <powil+0xa8>
  4073b7:	add    rsp,0x90
  4073be:	add    rsp,0x8
  4073c2:	pop    rbx
  4073c3:	leave  
  4073c4:	ret    
  4073c5:	push   rbp
  4073c6:	mov    rbp,rsp
  4073c9:	push   rbx
  4073ca:	sub    rsp,0x8
  4073ce:	sub    rsp,0x40
  4073d2:	mov    QWORD PTR [rbp+0x20],r8
  4073d6:	mov    rbx,rdx
  4073d9:	mov    QWORD PTR [rbp+0x10],rcx
  4073dd:	mov    r9,0x1
  4073e4:	mov    r8,r8
  4073e7:	lea    rdx,[rbx]
  4073ea:	mov    rcx,rcx
  4073ed:	call   407431 <powl+0x815>
  4073f2:	add    rsp,0x40
  4073f6:	add    rsp,0x8
  4073fa:	pop    rbx
  4073fb:	leave  
  4073fc:	ret    
  4073fd:	push   rbp
  4073fe:	mov    rbp,rsp
  407401:	push   rbx
  407402:	sub    rsp,0x8
  407406:	sub    rsp,0x40
  40740a:	mov    QWORD PTR [rbp+0x20],r8
  40740e:	mov    rbx,rdx
  407411:	mov    QWORD PTR [rbp+0x10],rcx
  407415:	xor    r9d,r9d
  407418:	mov    r8,r8
  40741b:	lea    rdx,[rbx]
  40741e:	mov    rcx,rcx
  407421:	call   407431 <powl+0x815>
  407426:	add    rsp,0x40
  40742a:	add    rsp,0x8
  40742e:	pop    rbx
  40742f:	leave  
  407430:	ret    
  407431:	push   rbp
  407432:	mov    rbp,rsp
  407435:	push   rbx
  407436:	push   rsi
  407437:	push   rdi
  407438:	push   r12
  40743a:	sub    rsp,0x140
  407441:	mov    r12,r9
  407444:	mov    rdi,r8
  407447:	mov    QWORD PTR [rbp+0x18],rdx
  40744b:	mov    QWORD PTR [rbp+0x10],rcx
  40744f:	mov    rax,QWORD PTR [rbp+0x10]
  407453:	mov    eax,DWORD PTR [rax+0x4]
  407456:	mov    rcx,rdx
  407459:	mov    ecx,DWORD PTR [rcx+0x4]
  40745c:	mov    ebx,eax
  40745e:	sub    ebx,ecx
  407460:	jle    407490 <powl+0x874>
  407462:	lea    rdx,[rbp-0x70]
  407466:	mov    rcx,QWORD PTR [rbp+0x10]
  40746a:	call   406a98 <powil+0xd8>
  40746f:	lea    rdx,[rbp-0xc0]
  407476:	mov    rcx,QWORD PTR [rbp+0x18]
  40747a:	call   406a98 <powil+0xd8>
  40747f:	or     r12d,r12d
  407482:	je     40748c <powl+0x870>
  407484:	mov    eax,DWORD PTR [rbp-0x70]
  407487:	not    eax
  407489:	mov    DWORD PTR [rbp-0x70],eax
  40748c:	neg    ebx
  40748e:	jmp    4074c0 <powl+0x8a4>
  407490:	lea    rdx,[rbp-0xc0]
  407497:	mov    rcx,QWORD PTR [rbp+0x10]
  40749b:	call   406a98 <powil+0xd8>
  4074a0:	lea    rdx,[rbp-0x70]
  4074a4:	mov    rcx,QWORD PTR [rbp+0x18]
  4074a8:	call   406a98 <powil+0xd8>
  4074ad:	or     r12d,r12d
  4074b0:	je     4074c0 <powl+0x8a4>
  4074b2:	mov    eax,DWORD PTR [rbp-0xc0]
  4074b8:	not    eax
  4074ba:	mov    DWORD PTR [rbp-0xc0],eax
  4074c0:	mov    DWORD PTR [rbp-0xc4],ebx
  4074c6:	mov    DWORD PTR [rbp-0xc8],0x0
  4074d0:	or     ebx,ebx
  4074d2:	je     407504 <powl+0x8e8>
  4074d4:	cmp    ebx,0xfffffe3f
  4074da:	jle    4076e2 <powl+0xac6>
  4074e0:	lea    rdx,[rbp-0xc4]
  4074e7:	lea    rcx,[rbp-0xc0]
  4074ee:	call   407b07 <__qclear+0x7>
  4074f3:	mov    DWORD PTR [rbp-0x11c],eax
  4074f9:	mov    DWORD PTR [rbp-0xc8],eax
  4074ff:	jmp    4075c9 <powl+0x9ad>
  407504:	lea    rdx,[rbp-0x70]
  407508:	lea    rcx,[rbp-0xc0]
  40750f:	call   407250 <powl+0x634>
  407514:	mov    DWORD PTR [rbp-0x11c],eax
  40751a:	movsxd rsi,eax
  40751d:	or     rsi,rsi
  407520:	jne    40757c <powl+0x960>
  407522:	mov    eax,DWORD PTR [rbp-0xc0]
  407528:	cmp    eax,DWORD PTR [rbp-0x70]
  40752b:	jne    4076f0 <powl+0xad4>
  407531:	mov    eax,DWORD PTR [rbp-0xbc]
  407537:	or     eax,eax
  407539:	je     4076f0 <powl+0xad4>
  40753f:	cmp    DWORD PTR [rbp-0xbc],0x100000
  407549:	jb     40756e <powl+0x952>
  40754b:	lea    rcx,[rdi]
  40754e:	call   406b00 <powil+0x140>
  407553:	or     DWORD PTR [rbp-0xc0],0x0
  40755a:	je     4076fa <powl+0xade>
  407560:	mov    eax,DWORD PTR [rdi]
  407562:	xor    eax,0xffffffff
  407567:	mov    DWORD PTR [rdi],eax
  407569:	jmp    4076fa <powl+0xade>
  40756e:	mov    eax,DWORD PTR [rbp-0x6c]
  407571:	add    eax,0x1
  407574:	mov    DWORD PTR [rbp-0x6c],eax
  407577:	jmp    4076e2 <powl+0xac6>
  40757c:	or     rsi,rsi
  40757f:	jle    4075c9 <powl+0x9ad>
  407581:	mov    r8,0x50
  407588:	lea    rdx,[rbp-0x70]
  40758c:	lea    rcx,[rbp-0x118]
  407593:	call   4057a0 <fabs+0x10>
  407598:	mov    r8,0x50
  40759f:	lea    rdx,[rbp-0xc0]
  4075a6:	lea    rcx,[rbp-0x70]
  4075aa:	call   4057a0 <fabs+0x10>
  4075af:	mov    r8,0x50
  4075b6:	lea    rdx,[rbp-0x118]
  4075bd:	lea    rcx,[rbp-0xc0]
  4075c4:	call   4057a0 <fabs+0x10>
  4075c9:	mov    eax,DWORD PTR [rbp-0xc0]
  4075cf:	cmp    eax,DWORD PTR [rbp-0x70]
  4075d2:	jne    4075e9 <powl+0x9cd>
  4075d4:	lea    rdx,[rbp-0x70]
  4075d8:	lea    rcx,[rbp-0xc0]
  4075df:	call   406988 <p1evll+0x24>
  4075e4:	xor    r12d,r12d
  4075e7:	jmp    4075ff <powl+0x9e3>
  4075e9:	lea    rdx,[rbp-0x70]
  4075ed:	lea    rcx,[rbp-0xc0]
  4075f4:	call   4069f8 <powil+0x38>
  4075f9:	mov    r12d,0x1
  4075ff:	lea    rdx,[rbp-0xc4]
  407606:	lea    rcx,[rbp-0x70]
  40760a:	call   407cd1 <mulmInnerLoop+0xd>
  40760f:	mov    DWORD PTR [rbp-0x11c],eax
  407615:	or     eax,eax
  407617:	jne    4076f0 <powl+0xad4>
  40761d:	mov    eax,DWORD PTR [rbp-0x6c]
  407620:	mov    ebx,eax
  407622:	sub    ebx,DWORD PTR [rbp-0xc4]
  407628:	cmp    ebx,0x100000
  40762e:	jge    4076fa <powl+0xade>
  407634:	or     ebx,ebx
  407636:	jl     4076f0 <powl+0xad4>
  40763c:	mov    DWORD PTR [rbp-0x6c],ebx
  40763f:	mov    rsi,QWORD PTR [rbp-0x28]
  407643:	movabs rax,0x8000000000000000
  40764d:	mov    rcx,rsi
  407650:	and    rcx,rax
  407653:	or     rcx,rcx
  407656:	je     4076e2 <powl+0xac6>
  40765c:	movabs rax,0x8000000000000000
  407666:	cmp    rsi,rax
  407669:	jne    407686 <powl+0xa6a>
  40766b:	mov    eax,DWORD PTR [rbp-0xc8]
  407671:	or     eax,eax
  407673:	jne    407681 <powl+0xa65>
  407675:	test   QWORD PTR [rbp-0x28],0x1
  40767d:	jne    407686 <powl+0xa6a>
  40767f:	jmp    4076e2 <powl+0xac6>
  407681:	or     r12d,r12d
  407684:	jne    4076e2 <powl+0xac6>
  407686:	mov    r8,0x50
  40768d:	xor    edx,edx
  40768f:	lea    rcx,[rbp-0xc0]
  407696:	call   405860 <fclose+0x4a>
  40769b:	mov    QWORD PTR [rbp-0x80],0x1
  4076a3:	lea    rdx,[rbp-0x70]
  4076a7:	lea    rcx,[rbp-0xc0]
  4076ae:	call   406988 <p1evll+0x24>
  4076b3:	lea    rdx,[rbp-0xc4]
  4076ba:	lea    rcx,[rbp-0x70]
  4076be:	call   407cd1 <mulmInnerLoop+0xd>
  4076c3:	or     DWORD PTR [rbp-0xc4],0x0
  4076ca:	je     4076e2 <powl+0xac6>
  4076cc:	mov    eax,DWORD PTR [rbp-0x6c]
  4076cf:	mov    ebx,eax
  4076d1:	sub    ebx,DWORD PTR [rbp-0xc4]
  4076d7:	cmp    ebx,0x100000
  4076dd:	jge    4076fa <powl+0xade>
  4076df:	mov    DWORD PTR [rbp-0x6c],ebx
  4076e2:	lea    rdx,[rdi]
  4076e5:	lea    rcx,[rbp-0x70]
  4076e9:	call   406a68 <powil+0xa8>
  4076ee:	jmp    407702 <powl+0xae6>
  4076f0:	lea    rcx,[rdi]
  4076f3:	call   406b00 <powil+0x140>
  4076f8:	jmp    407702 <powl+0xae6>
  4076fa:	lea    rcx,[rdi]
  4076fd:	call   407df5 <mulv+0xd>
  407702:	add    rsp,0x140
  407709:	pop    r12
  40770b:	pop    rdi
  40770c:	pop    rsi
  40770d:	pop    rbx
  40770e:	leave  
  40770f:	ret    
  407710:	push   rbp
  407711:	mov    rbp,rsp
  407714:	push   rbx
  407715:	push   rsi
  407716:	push   rdi
  407717:	push   r12
  407719:	sub    rsp,0xe0
  407720:	mov    r12,r8
  407723:	mov    rdi,rdx
  407726:	mov    rbx,rcx
  407729:	mov    eax,DWORD PTR [rdi+0x4]
  40772c:	or     eax,eax
  40772e:	jne    40773e <powl+0xb22>
  407730:	lea    rcx,[r12]
  407734:	call   406b00 <powil+0x140>
  407739:	jmp    407859 <__shdn1+0x19>
  40773e:	mov    eax,DWORD PTR [rbx+0x4]
  407741:	or     eax,eax
  407743:	jne    407767 <powl+0xb4b>
  407745:	lea    rcx,[r12]
  407749:	call   407df5 <mulv+0xd>
  40774e:	mov    rdx,0x2
  407755:	lea    rcx,ds:0x414728
  40775d:	call   4058a0 <fclose+0x8a>
  407762:	jmp    407859 <__shdn1+0x19>
  407767:	lea    rdx,[rbp-0x70]
  40776b:	lea    rcx,[rdi]
  40776e:	call   406a98 <powil+0xd8>
  407773:	mov    esi,DWORD PTR [rbp-0x6c]
  407776:	mov    DWORD PTR [rbp-0x6c],0x4
  40777d:	or     QWORD PTR [rbx+0x10],0x0
  407782:	jne    4077b5 <reducl+0x28>
  407784:	or     QWORD PTR [rbx+0x18],0x0
  407789:	jne    4077b5 <reducl+0x28>
  40778b:	rex.W
  40778c:	.byte 0x83

000000000040778d <reducl>:
  40778d:	rex.WXB and BYTE PTR [r8],al
  407790:	jne    4077b5 <reducl+0x28>
  407792:	or     QWORD PTR [rbx+0x28],0x0
  407797:	jne    4077b5 <reducl+0x28>
  407799:	or     QWORD PTR [rbx+0x30],0x0
  40779e:	jne    4077b5 <reducl+0x28>
  4077a0:	or     QWORD PTR [rbx+0x38],0x0
  4077a5:	jne    4077b5 <reducl+0x28>
  4077a7:	lea    rdx,[rbp-0x70]
  4077ab:	lea    rcx,[rbx]
  4077ae:	call   406e88 <powl+0x26c>
  4077b3:	jmp    4077d4 <reducl+0x47>
  4077b5:	lea    rdx,[rbp-0xc4]
  4077bc:	lea    rcx,[rbx]
  4077bf:	call   406a98 <powil+0xd8>
  4077c4:	lea    rdx,[rbp-0x70]
  4077c8:	lea    rcx,[rbp-0xc4]
  4077cf:	call   406f20 <powl+0x304>
  4077d4:	mov    eax,DWORD PTR [rbx]
  4077d6:	cmp    eax,DWORD PTR [rdi]
  4077d8:	setne  al
  4077db:	and    eax,0x1
  4077de:	sub    eax,0x1
  4077e1:	and    eax,0x1
  4077e4:	add    eax,0xffffffff
  4077e7:	mov    DWORD PTR [rbp-0x70],eax
  4077ea:	mov    eax,DWORD PTR [rbp-0x6c]
  4077ed:	mov    ecx,esi
  4077ef:	add    ecx,eax
  4077f1:	mov    eax,ecx
  4077f3:	sub    eax,0x4
  4077f6:	mov    ecx,DWORD PTR [rbx+0x4]
  4077f9:	mov    esi,eax
  4077fb:	sub    esi,ecx
  4077fd:	mov    DWORD PTR [rbp-0x6c],esi

0000000000407800 <DoublePrecision>:
  407800:	lea    rdx,[rbp-0x74]
  407804:	lea    rcx,[rbp-0x70]
  407808:	call   407cd1 <mulmInnerLoop+0xd>
  40780d:	mov    eax,esi
  40780f:	sub    eax,DWORD PTR [rbp-0x74]
  407812:	mov    esi,eax
  407814:	add    esi,0x80002
  40781a:	.byte 0x81
  40781b:	.byte 0xfe

000000000040781c <GetPrecision>:
  40781c:	add    BYTE PTR [rax],al
  40781e:	adc    BYTE PTR [rax],al
  407820:	jl     407841 <__shdn1+0x1>
  407822:	rex.WB

0000000000407823 <FullPrecision>:
  407823:	lea    ecx,[rsp]
  407826:	call   407df5 <mulv+0xd>
  40782b:	mov    rdx,0x3
  407832:	lea    rcx,ds:0x414728
  40783a:	call   4058a0 <fclose+0x8a>
  40783f:	.byte 0xeb

0000000000407840 <__shdn1>:
  407840:	sbb    BYTE PTR [rcx],cl
  407842:	test   BYTE PTR [rdi],0x8e
  407845:	out    0xfe,eax
  407847:	(bad)  
  407848:	dec    DWORD PTR [rcx-0x72b66b8b]
  40784e:	adc    al,0x24
  407850:	lea    rcx,[rbp-0x70]
  407854:	call   406a68 <powil+0xa8>
  407859:	add    rsp,0xe0
  407860:	pop    r12
  407862:	pop    rdi
  407863:	pop    rsi
  407864:	pop    rbx
  407865:	leave  
  407866:	ret    
  407867:	push   rbp

0000000000407868 <__shup1>:
  407868:	mov    rbp,rsp
  40786b:	push   rbx
  40786c:	push   rsi
  40786d:	push   rdi
  40786e:	push   r12
  407870:	push   r13
  407872:	sub    rsp,0x8
  407876:	sub    rsp,0xf0
  40787d:	mov    r13,r8
  407880:	mov    rsi,rdx
  407883:	mov    rdi,rcx
  407886:	mov    eax,DWORD PTR [rdi+0x4]
  407889:	or     eax,eax
  40788b:	je     407894 <__shiftupn+0x4>
  40788d:	mov    eax,DWORD PTR [rsi+0x4]

0000000000407890 <__shiftupn>:
  407890:	or     eax,eax
  407892:	jne    4078a2 <__shiftupn+0x12>
  407894:	lea    rcx,[r13+0x0]
  407898:	call   406b00 <powil+0x140>
  40789d:	jmp    407a07 <__subm+0xf>
  4078a2:	or     QWORD PTR [rdi+0x10],0x0
  4078a7:	jne    4078f8 <__shiftupn+0x68>
  4078a9:	mov    ebx,0x2
  4078ae:	movsxd rax,ebx
  4078b1:	lea    rcx,[rdi+0x8]
  4078b5:	cmp    QWORD PTR [rcx+rax*8],0x0
  4078ba:	jne    4078f8 <__shiftupn+0x68>
  4078bc:	add    ebx,0x1
  4078bf:	cmp    ebx,0x7
  4078c2:	jl     4078ae <__shiftupn+0x1e>
  4078c4:	lea    rdx,[rbp-0x80]
  4078c8:	lea    rcx,[rsi]
  4078cb:	call   406a98 <powil+0xd8>
  4078d0:	lea    rdx,[rbp-0x80]
  4078d4:	lea    rcx,[rdi]
  4078d7:	call   406b18 <powil+0x158>
  4078dc:	mov    eax,DWORD PTR [rdi+0x4]
  4078df:	sub    eax,0x80000
  4078e4:	mov    ecx,DWORD PTR [rbp-0x7c]
  4078e7:	sub    ecx,0x80000
  4078ed:	mov    r12d,eax
  4078f0:	add    r12d,ecx
  4078f3:	jmp    40798f <__addm+0x7>
  4078f8:	or     QWORD PTR [rsi+0x10],0x0
  4078fd:	jne    40794c <__shiftdownn+0x44>
  4078ff:	mov    ebx,0x2
  407904:	movsxd rax,ebx
  407907:	rex.W

0000000000407908 <__shiftdownn>:
  407908:	lea    ecx,[rsi+0x8]
  40790b:	cmp    QWORD PTR [rcx+rax*8],0x0
  407910:	jne    40794c <__shiftdownn+0x44>
  407912:	add    ebx,0x1
  407915:	cmp    ebx,0x7
  407918:	jl     407904 <__shiftupn+0x74>
  40791a:	lea    rdx,[rbp-0x80]
  40791e:	lea    rcx,[rdi]
  407921:	call   406a98 <powil+0xd8>
  407926:	lea    rdx,[rbp-0x80]
  40792a:	lea    rcx,[rsi]
  40792d:	call   406b18 <powil+0x158>
  407932:	mov    eax,DWORD PTR [rsi+0x4]
  407935:	mov    r12d,eax
  407938:	sub    r12d,0x80000
  40793f:	mov    eax,DWORD PTR [rbp-0x7c]
  407942:	sub    eax,0x80000
  407947:	add    r12d,eax
  40794a:	jmp    40798f <__addm+0x7>
  40794c:	lea    rdx,[rbp-0x80]
  407950:	lea    rcx,[rdi]
  407953:	call   406a98 <powil+0xd8>
  407958:	lea    rdx,[rbp-0xd4]
  40795f:	lea    rcx,[rsi]
  407962:	call   406a98 <powil+0xd8>
  407967:	lea    rdx,[rbp-0x80]
  40796b:	lea    rcx,[rbp-0xd4]
  407972:	call   406c28 <powl+0xc>
  407977:	mov    eax,DWORD PTR [rsi+0x4]
  40797a:	mov    r12d,eax
  40797d:	rex.B
  40797e:	.byte 0x81
  40797f:	in     al,dx

0000000000407980 <bsr64>:
  407980:	add    BYTE PTR [rax],al
  407982:	or     BYTE PTR [rax],al
  407984:	mov    eax,DWORD PTR [rbp-0x7c]
  407987:	.byte 0x2d

0000000000407988 <__addm>:
  407988:	add    BYTE PTR [rax],al
  40798a:	or     BYTE PTR [rax],al
  40798c:	add    r12d,eax
  40798f:	mov    eax,DWORD PTR [rsi]
  407991:	cmp    eax,DWORD PTR [rdi]
  407993:	setne  al
  407996:	and    eax,0x1
  407999:	sub    eax,0x1
  40799c:	and    eax,0x1
  40799f:	add    eax,0xffffffff
  4079a2:	mov    DWORD PTR [rbp-0x80],eax
  4079a5:	lea    rdx,[rbp-0x84]
  4079ac:	lea    rcx,[rbp-0x80]
  4079b0:	call   407cd1 <mulmInnerLoop+0xd>
  4079b5:	mov    DWORD PTR [rbp-0xe4],eax
  4079bb:	or     eax,eax
  4079bd:	jne    4079f3 <__addm+0x6b>
  4079bf:	mov    eax,r12d
  4079c2:	sub    eax,DWORD PTR [rbp-0x84]
  4079c8:	mov    r12d,eax
  4079cb:	add    r12d,0x80000
  4079d2:	cmp    r12d,0x100000
  4079d9:	jge    4079fe <__subm+0x6>
  4079db:	or     r12d,r12d
  4079de:	jle    4079f3 <__addm+0x6b>
  4079e0:	mov    DWORD PTR [rbp-0x7c],r12d
  4079e4:	lea    rdx,[r13+0x0]
  4079e8:	lea    rcx,[rbp-0x80]
  4079ec:	call   406a68 <powil+0xa8>
  4079f1:	jmp    407a07 <__subm+0xf>
  4079f3:	lea    rcx,[r13+0x0]
  4079f7:	.byte 0xe8

00000000004079f8 <__subm>:
  4079f8:	add    al,0xf1
  4079fa:	(bad)  
  4079fb:	(bad)  
  4079fc:	jmp    407a07 <__subm+0xf>
  4079fe:	lea    rcx,[r13+0x0]
  407a02:	call   407df5 <mulv+0xd>
  407a07:	add    rsp,0xf0
  407a0e:	add    rsp,0x8
  407a12:	pop    r13
  407a14:	pop    r12
  407a16:	pop    rdi
  407a17:	pop    rsi
  407a18:	pop    rbx
  407a19:	leave  
  407a1a:	ret    
  407a1b:	push   rbp
  407a1c:	mov    rbp,rsp
  407a1f:	push   rbx
  407a20:	push   rsi
  407a21:	push   rdi
  407a22:	push   r12
  407a24:	sub    rsp,0x90
  407a2b:	mov    r12,r8
  407a2e:	mov    rdi,rdx
  407a31:	mov    rsi,rcx
  407a34:	mov    eax,DWORD PTR [rsi+0x4]
  407a37:	or     eax,eax
  407a39:	je     407a42 <__subm+0x4a>
  407a3b:	mov    eax,DWORD PTR [rdi+0x4]
  407a3e:	or     eax,eax
  407a40:	jne    407a47 <__subm+0x4f>
  407a42:	jmp    407ad1 <__qmovz+0x39>
  407a47:	lea    rdx,[rbp-0x70]
  407a4b:	lea    rcx,[rdi]
  407a4e:	call   406a98 <powil+0xd8>
  407a53:	lea    rdx,[rbp-0x70]
  407a57:	lea    rcx,[rsi]
  407a5a:	call   406b18 <powil+0x158>
  407a5f:	mov    eax,DWORD PTR [rdi]
  407a61:	cmp    eax,DWORD PTR [rsi]
  407a63:	setne  al
  407a66:	.byte 0x83
  407a67:	.byte 0xe0

0000000000407a68 <__pack>:
  407a68:	add    DWORD PTR [rbx-0x1f7cfe18],eax
  407a6e:	add    DWORD PTR [rbx+0x4589ffc0],eax
  407a74:	nop
  407a75:	mov    eax,DWORD PTR [rbp-0x6c]
  407a78:	mov    ebx,eax
  407a7a:	sub    ebx,0x80000
  407a80:	mov    eax,DWORD PTR [rsi+0x4]
  407a83:	sub    eax,0x80000
  407a88:	add    ebx,eax
  407a8a:	cmp    ebx,0x100000
  407a90:	jge    407adc <__qmov+0x4>
  407a92:	lea    rdx,[rbp-0x74]
  407a96:	rex.W
  407a97:	.byte 0x8d

0000000000407a98 <__qmovz>:
  407a98:	rex.WRB xchg r8,rax
  407a9a:	call   407cd1 <mulmInnerLoop+0xd>
  407a9f:	mov    DWORD PTR [rbp-0x78],eax
  407aa2:	or     eax,eax
  407aa4:	jne    407ad1 <__qmovz+0x39>
  407aa6:	mov    eax,ebx
  407aa8:	sub    eax,DWORD PTR [rbp-0x74]
  407aab:	mov    ebx,eax
  407aad:	add    ebx,0x80000
  407ab3:	cmp    ebx,0x100000
  407ab9:	jge    407adc <__qmov+0x4>
  407abb:	or     ebx,ebx
  407abd:	jl     407ad1 <__qmovz+0x39>
  407abf:	mov    DWORD PTR [rbp-0x6c],ebx
  407ac2:	lea    rdx,[r12]
  407ac6:	lea    rcx,[rbp-0x70]
  407aca:	call   406a68 <powil+0xa8>
  407acf:	jmp    407af9 <__qmov+0x21>
  407ad1:	lea    rcx,[r12]
  407ad5:	.byte 0xe8
  407ad6:	es
  407ad7:	lock

0000000000407ad8 <__qmov>:
  407ad8:	(bad)  
  407ad9:	(bad)  
  407ada:	jmp    407af9 <__qmov+0x21>
  407adc:	lea    rcx,[r12]
  407ae0:	call   407df5 <mulv+0xd>
  407ae5:	mov    rdx,0x3
  407aec:	lea    rcx,ds:0x414720
  407af4:	call   4058a0 <fclose+0x8a>
  407af9:	add    rsp,0x90

0000000000407b00 <__qclear>:
  407b00:	pop    r12
  407b02:	pop    rdi
  407b03:	pop    rsi
  407b04:	pop    rbx
  407b05:	leave  
  407b06:	ret    
  407b07:	push   rbp
  407b08:	mov    rbp,rsp
  407b0b:	push   rbx
  407b0c:	push   rsi
  407b0d:	push   rdi
  407b0e:	push   r12
  407b10:	push   r13
  407b12:	push   r14
  407b14:	sub    rsp,0x40

0000000000407b18 <__mulin>:
  407b18:	mov    QWORD PTR [rbp+0x18],rdx
  407b1c:	mov    QWORD PTR [rbp+0x10],rcx
  407b20:	mov    rax,rdx
  407b23:	mov    r12d,DWORD PTR [rax]
  407b26:	or     r12d,r12d
  407b29:	jne    407b32 <__mulin+0x1a>
  407b2b:	xor    eax,eax
  407b2d:	jmp    407cc2 <mulmSecondMainLoop+0x10>
  407b32:	xor    r13d,r13d
  407b35:	or     r12d,r12d
  407b38:	jge    407c22 <L_skip8+0x7>
  407b3e:	neg    r12d
  407b41:	cmp    r12d,0x40
  407b45:	jl     407bfa <L_skip6+0x10>
  407b4b:	mov    rax,QWORD PTR [rbp+0x10]
  407b4f:	lea    rsi,[rax+0x48]
  407b53:	cmp    r12d,0x240
  407b5a:	jle    407b62 <__mulin+0x4a>
  407b5c:	mov    r12d,0x240
  407b62:	rex.R

0000000000407b63 <L_skip1>:
  407b63:	mov    eax,esp
  407b65:	mov    ecx,0x40
  407b6a:	mov    eax,eax
  407b6c:	test   eax,eax
  407b6e:	jge    407b73 <L_skip1+0x10>
  407b70:	add    eax,0x3f
  407b73:	sar    eax,0x6
  407b76:	mov    ebx,eax
  407b78:	mov    r14d,eax
  407b7b:	jmp    407b91 <L_skip2+0x13>
  407b7d:	rex.B

0000000000407b7e <L_skip2>:
  407b7e:	sub    esi,0x1
  407b81:	lea    rax,[rsi]
  407b84:	lea    rsi,[rax-0x8]
  407b88:	movsxd rcx,r13d
  407b8b:	mov    r13,rcx
  407b8e:	or     r13,QWORD PTR [rax]
  407b91:	or     r14d,r14d
  407b94:	jne    407b7d <L_skip1+0x1a>
  407b96:	rex.W
  407b97:	.byte 0x8b
  407b98:	.byte 0x75

0000000000407b99 <L_skip3>:
  407b99:	adc    BYTE PTR [rbx+0x147e09fb],al
  407b9f:	mov    edx,ebx
  407ba1:	lea    rcx,ds:0x414714
  407ba9:	call   40fc5d <WriteDouble+0x966>
  407bae:	mov    ebx,0x9
  407bb3:	.byte 0xbf

0000000000407bb4 <L_skip4>:
  407bb4:	or     BYTE PTR [rax],al
  407bb6:	add    BYTE PTR [rax],al
  407bb8:	sub    edi,ebx
  407bba:	movsxd rdi,edi
  407bbd:	lea    rdi,[rdi*8+0x0]
  407bc5:	mov    r8d,edi
  407bc8:	lea    rdx,[rsi+0x10]
  407bcc:	movsxd rax,ebx

0000000000407bcf <L_skip5>:
  407bcf:	lea    rcx,[rsi+rax*8+0x10]
  407bd4:	call   4057d0 <freeUserData+0x20>
  407bd9:	mov    eax,ebx
  407bdb:	shl    eax,0x6
  407bde:	sub    r12d,eax
  407be1:	jmp    407bf6 <L_skip6+0xc>
  407be3:	sub    ebx,0x1
  407be6:	mov    eax,ebx
  407be8:	.byte 0x83
  407be9:	.byte 0xc0

0000000000407bea <L_skip6>:
  407bea:	add    cl,BYTE PTR [rax+0x63]
  407bed:	ror    BYTE PTR [rax-0x39],0x4
  407bf1:	mov    BYTE PTR [rax],0x0
  407bf4:	add    BYTE PTR [rax],al
  407bf6:	or     ebx,ebx
  407bf8:	jne    407be3 <L_skip5+0x14>
  407bfa:	or     r12d,r12d
  407bfd:	jle    407cb5 <mulmSecondMainLoop+0x3>
  407c03:	rex.R
  407c04:	.byte 0x89

0000000000407c05 <L_skip7>:
  407c05:	call   108e0752 <.debug$T+0x104b1932>
  407c0a:	mov    r13,rax
  407c0d:	or     r13,QWORD PTR [rcx+0x48]
  407c11:	mov    edx,r12d
  407c14:	mov    rcx,QWORD PTR [rbp+0x10]
  407c18:	.byte 0xe8
  407c19:	jmp    407c07 <L_skip7+0x2>

0000000000407c1b <L_skip8>:
  407c1b:	(bad)  
  407c1c:	(bad)  
  407c1d:	jmp    407cb5 <mulmSecondMainLoop+0x3>
  407c22:	cmp    r12d,0x40
  407c26:	jl     407ca4 <mulmSkipM+0xb>

0000000000407c28 <__mulm>:
  407c28:	mov    rsi,QWORD PTR [rbp+0x10]
  407c2c:	mov    eax,r12d
  407c2f:	mov    ecx,0x40
  407c34:	mov    eax,eax
  407c36:	test   eax,eax
  407c38:	jge    407c3d <__mulm+0x15>
  407c3a:	add    eax,0x3f
  407c3d:	sar    eax,0x6
  407c40:	mov    ebx,eax
  407c42:	cmp    ebx,0x9
  407c45:	jle    407c5b <__mulm+0x33>
  407c47:	mov    edx,ebx
  407c49:	lea    rcx,ds:0x414714
  407c51:	call   40fc5d <WriteDouble+0x966>
  407c56:	mov    ebx,0x9
  407c5b:	mov    edi,0x8
  407c60:	sub    edi,ebx
  407c62:	movsxd rdi,edi
  407c65:	lea    rdi,[rdi*8+0x0]
  407c6d:	mov    r8d,edi
  407c70:	movsxd rax,ebx
  407c73:	lea    rdx,[rsi+rax*8+0x10]
  407c78:	rex.W
  407c79:	.byte 0x8d
  407c7a:	rex.WRX

0000000000407c7b <mulmFirstLoop>:
  407c7b:	adc    al,ch
  407c7d:	rex.WRXB (bad) 
  407c80:	dec    DWORD PTR [rcx+0x6e0c1d8]
  407c86:	sub    r12d,eax
  407c89:	jmp    407ca0 <mulmSkipM+0x7>
  407c8b:	sub    ebx,0x1
  407c8e:	mov    eax,0x9
  407c93:	sub    eax,ebx
  407c95:	movsxd rax,eax
  407c98:	rex.W

0000000000407c99 <mulmSkipM>:
  407c99:	mov    DWORD PTR [rsi+rax*8],0x0
  407ca0:	or     ebx,ebx
  407ca2:	jne    407c8b <mulmFirstLoop+0x10>
  407ca4:	or     r12d,r12d
  407ca7:	je     407cb5 <mulmSecondMainLoop+0x3>
  407ca9:	mov    edx,r12d
  407cac:	mov    rcx,QWORD PTR [rbp+0x10]
  407cb0:	.byte 0xe8
  407cb1:	.byte 0xdb

0000000000407cb2 <mulmSecondMainLoop>:
  407cb2:	jmp    407cb3 <mulmSecondMainLoop+0x1>
  407cb4:	dec    DWORD PTR [rax-0x75]
  407cb7:	sbb    r15b,r8b
  407cba:	add    BYTE PTR [rax],al
  407cbc:	add    BYTE PTR [rax],al
  407cbe:	add    BYTE PTR [rcx+rcx*4-0x18],al
  407cc2:	rex.W
  407cc3:	.byte 0x83

0000000000407cc4 <mulmInnerLoop>:
  407cc4:	(bad)  
  407cc5:	rex
  407cc6:	pop    r14
  407cc8:	pop    r13
  407cca:	pop    r12
  407ccc:	pop    rdi
  407ccd:	pop    rsi
  407cce:	pop    rbx
  407ccf:	leave  
  407cd0:	ret    
  407cd1:	push   rbp
  407cd2:	mov    rbp,rsp
  407cd5:	push   rbx
  407cd6:	push   rsi
  407cd7:	push   rdi
  407cd8:	push   r12
  407cda:	sub    rsp,0x40
  407cde:	mov    rdi,rdx
  407ce1:	rex.W

0000000000407ce2 <mulmSkipmult>:
  407ce2:	mov    DWORD PTR [rbp+0x10],ecx
  407ce5:	xor    esi,esi
  407ce7:	mov    rbx,QWORD PTR [rbp+0x10]
  407ceb:	or     QWORD PTR [rbx+0x8],0x0
  407cf0:	jne    407dc4 <squarevSkipShift+0x34>
  407cf6:	movabs rax,0x8000000000000000
  407d00:	test   QWORD PTR [rbx+0x10],rax
  407d04:	je     407d6a <squarev+0x52>
  407d06:	mov    DWORD PTR [rdi],0x0
  407d0c:	xor    eax,eax
  407d0e:	jmp    407dea <mulv+0x2>
  407d13:	mov    rax,QWORD PTR [rbx+0x18]
  407d17:	rex.W

0000000000407d18 <squarev>:
  407d18:	mov    DWORD PTR [rbx+0x10],eax
  407d1b:	mov    rax,QWORD PTR [rbx+0x20]
  407d1f:	mov    QWORD PTR [rbx+0x18],rax
  407d23:	mov    rax,QWORD PTR [rbx+0x28]
  407d27:	mov    QWORD PTR [rbx+0x20],rax
  407d2b:	mov    rax,QWORD PTR [rbx+0x30]
  407d2f:	mov    QWORD PTR [rbx+0x28],rax
  407d33:	mov    rax,QWORD PTR [rbx+0x38]
  407d37:	mov    QWORD PTR [rbx+0x30],rax
  407d3b:	mov    rax,QWORD PTR [rbx+0x40]
  407d3f:	mov    QWORD PTR [rbx+0x38],rax
  407d43:	mov    rax,QWORD PTR [rbx+0x48]
  407d47:	mov    QWORD PTR [rbx+0x40],rax
  407d4b:	mov    QWORD PTR [rbx+0x48],0x0
  407d53:	add    esi,0x40
  407d56:	cmp    esi,0x240
  407d5c:	jle    407d6a <squarev+0x52>
  407d5e:	mov    DWORD PTR [rdi],esi
  407d60:	mov    eax,0x1
  407d65:	jmp    407dea <mulv+0x2>
  407d6a:	cmp    QWORD PTR [rbx+0x10],0x0
  407d6f:	je     407d13 <mulmSkipmult+0x31>
  407d71:	mov    rax,QWORD PTR [rbx+0x10]
  407d75:	or     rax,rax
  407d78:	je     407db3 <squarevSkipShift+0x23>
  407d7a:	movabs rax,0x8000000000000000
  407d84:	test   QWORD PTR [rbx+0x10],rax
  407d88:	jne    407db3 <squarevSkipShift+0x23>
  407d8a:	mov    rcx,QWORD PTR [rbx+0x10]
  407d8e:	.byte 0xe8
  407d8f:	in     eax,dx

0000000000407d90 <squarevSkipShift>:
  407d90:	jmp    407d91 <squarevSkipShift+0x1>
  407d92:	dec    DWORD PTR [rcx+0x40b9dc45]
  407d98:	add    BYTE PTR [rax],al
  407d9a:	add    BYTE PTR [rbx-0x76befe40],al
  407da0:	int3   
  407da1:	sub    r12d,eax
  407da4:	mov    edx,r12d
  407da7:	mov    rcx,QWORD PTR [rbp+0x10]
  407dab:	call   406890 <memset+0x30>
  407db0:	add    esi,r12d
  407db3:	cmp    esi,0x240
  407db9:	jle    407de6 <squarevSkipShift+0x56>
  407dbb:	mov    DWORD PTR [rdi],esi
  407dbd:	mov    eax,0x1
  407dc2:	jmp    407dea <mulv+0x2>
  407dc4:	mov    rcx,QWORD PTR [rbx+0x8]
  407dc8:	call   406980 <p1evll+0x1c>
  407dcd:	mov    DWORD PTR [rbp-0x24],eax
  407dd0:	mov    r12d,eax
  407dd3:	add    r12d,0x1
  407dd7:	mov    edx,r12d
  407dda:	mov    rcx,QWORD PTR [rbp+0x10]
  407dde:	call   406908 <infinity>
  407de3:	sub    esi,r12d
  407de6:	mov    DWORD PTR [rdi],esi

0000000000407de8 <mulv>:
  407de8:	xor    eax,eax
  407dea:	add    rsp,0x40
  407dee:	pop    r12
  407df0:	pop    rdi
  407df1:	pop    rsi
  407df2:	pop    rbx
  407df3:	leave  
  407df4:	ret    
  407df5:	push   rbp
  407df6:	mov    rbp,rsp
  407df9:	mov    r8,rcx
  407dfc:	mov    DWORD PTR [r8+0x4],0x100000
  407e04:	xor    r11d,r11d
  407e07:	movsxd rax,r11d
  407e0a:	lea    rcx,[r8+0x8]
  407e0e:	movabs rdx,0xffffffffffffffff
  407e18:	mov    QWORD PTR [rcx+rax*8],rdx
  407e1c:	add    r11d,0x1
  407e20:	cmp    r11d,0x7
  407e24:	jl     407e07 <mulv+0x1f>
  407e26:	leave  
  407e27:	ret    
  407e28:	push   rbp
  407e29:	mov    rbp,rsp
  407e2c:	push   rbx
  407e2d:	sub    rsp,0x8
  407e31:	sub    rsp,0x90
  407e38:	mov    rbx,rcx
  407e3b:	lea    rdx,[rbp-0x60]
  407e3f:	lea    rcx,[rbx]
  407e42:	call   406a98 <powil+0xd8>
  407e47:	lea    rdx,[rbp-0x64]
  407e4b:	lea    rcx,[rbp-0x60]
  407e4f:	call   407cd1 <mulmInnerLoop+0xd>
  407e54:	mov    eax,DWORD PTR [rbp-0x5c]
  407e57:	sub    eax,DWORD PTR [rbp-0x64]
  407e5a:	.byte 0x89
  407e5b:	rex.RB

0000000000407e5c <mulvSkipMult>:
  407e5c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  407e5d:	lea    rdx,[rbx]
  407e60:	lea    rcx,[rbp-0x60]
  407e64:	call   406a68 <powil+0xa8>
  407e69:	add    rsp,0x90
  407e70:	add    rsp,0x8
  407e74:	pop    rbx
  407e75:	leave  
  407e76:	ret    
  407e77:	push   rbp
  407e78:	mov    rbp,rsp
  407e7b:	push   rbx
  407e7c:	sub    rsp,0x8
  407e80:	sub    rsp,0x40
  407e84:	mov    QWORD PTR [rbp+0x10],rcx

0000000000407e88 <__divi>:
  407e88:	call   40b060 <_setlocale+0xb54>
  407e8d:	mov    QWORD PTR [rbp-0x18],rax
  407e91:	sub    rax,0x1
  407e95:	movsxd rax,eax
  407e98:	mov    rbx,rax
  407e9b:	add    rbx,QWORD PTR [rbp+0x10]
  407e9f:	cmp    BYTE PTR [rbx],0x30
  407ea2:	jne    407ebb <__divi+0x33>
  407ea4:	jmp    407eaa <__divi+0x22>
  407ea6:	lea    rbx,[rbx-0x1]
  407eaa:	cmp    BYTE PTR [rbx],0x30
  407ead:	je     407ea6 <__divi+0x1e>
  407eaf:	cmp    BYTE PTR [rbx],0x2e
  407eb2:	je     407eb8 <__divi+0x30>
  407eb4:	lea    rbx,[rbx+0x1]
  407eb8:	mov    BYTE PTR [rbx],0x0
  407ebb:	add    rsp,0x40
  407ebf:	add    rsp,0x8
  407ec3:	pop    rbx
  407ec4:	leave  
  407ec5:	ret    
  407ec6:	push   rbp
  407ec7:	mov    rbp,rsp
  407eca:	push   rbx
  407ecb:	push   rsi
  407ecc:	push   rdi
  407ecd:	push   r12
  407ecf:	push   r13
  407ed1:	push   r14
  407ed3:	push   r15
  407ed5:	sub    rsp,0x8
  407ed9:	sub    rsp,0x1f0
  407ee0:	mov    r15,r8
  407ee3:	mov    QWORD PTR [rbp+0x18],rdx
  407ee7:	mov    QWORD PTR [rbp+0x10],rcx
  407eeb:	mov    DWORD PTR [rbp-0x1b0],0x0
  407ef5:	mov    rax,QWORD PTR [rbp+0x10]
  407ef9:	mov    eax,DWORD PTR [rax+0x4]
  407efc:	cmp    eax,0x100000
  407f01:	jne    407f66 <__divm+0x46>
  407f03:	xor    r13d,r13d
  407f06:	movsxd rax,r13d
  407f09:	mov    rcx,QWORD PTR [rbp+0x10]
  407f0d:	lea    rcx,[rcx+0x8]
  407f11:	movabs rdx,0xffffffffffffffff
  407f1b:	cmp    QWORD PTR [rcx+rax*8],rdx
  407f1f:	.byte 0x75

0000000000407f20 <__divm>:
  407f20:	or     al,BYTE PTR [rcx-0x7d]
  407f23:	(bad)
  407f26:	cmp    ebp,0x8
  407f29:	jl     407f06 <__divi+0x7e>
  407f2b:	cmp    r13d,0x8
  407f2f:	jne    407f66 <__divm+0x46>
  407f31:	mov    rax,QWORD PTR [rbp+0x10]
  407f35:	mov    eax,DWORD PTR [rax]
  407f37:	or     eax,eax
  407f39:	jne    407f4e <__divm+0x2e>
  407f3b:	lea    rdx,ds:0x41470f
  407f43:	mov    rcx,QWORD PTR [rbp+0x18]
  407f47:	call   40aee0 <_setlocale+0x9d4>
  407f4c:	jmp    407f5f <__divm+0x3f>
  407f4e:	lea    rdx,ds:0x414709
  407f56:	mov    rcx,QWORD PTR [rbp+0x18]
  407f5a:	call   40aee0 <_setlocale+0x9d4>
  407f5f:	xor    eax,eax
  407f61:	jmp    40862b <__qadd_subtract+0x1fa>
  407f66:	mov    r8,0x40
  407f6d:	xor    edx,edx
  407f6f:	lea    rcx,[rbp-0xc8]
  407f76:	call   405860 <fclose+0x4a>
  407f7b:	mov    r8,0x40
  407f82:	xor    edx,edx
  407f84:	lea    rcx,[rbp-0x1ac]
  407f8b:	call   405860 <fclose+0x4a>
  407f90:	mov    DWORD PTR [rbp-0xc4],0x80004
  407f9a:	movabs rax,0xa000000000000000
  407fa4:	mov    QWORD PTR [rbp-0xc0],rax
  407fab:	lea    rdx,[rbp-0x80]
  407faf:	mov    rcx,QWORD PTR [rbp+0x10]
  407fb3:	call   406ad8 <powil+0x118>
  407fb8:	mov    eax,DWORD PTR [rbp-0x80]
  407fbb:	mov    DWORD PTR [rbp-0x16c],eax
  407fc1:	mov    DWORD PTR [rbp-0x80],0x0
  407fc8:	xor    r14d,r14d
  407fcb:	lea    rdx,[rbp-0x80]
  407fcf:	lea    rcx,ds:0x413d80
  407fd7:	call   408643 <__qadd_subtract+0x212>
  407fdc:	mov    DWORD PTR [rbp-0x1c4],eax
  407fe2:	mov    r13d,eax
  407fe5:	or     r13d,r13d
  407fe8:	je     408174 <mdnorm+0x1c>
  407fee:	mov    eax,DWORD PTR [rbp-0x7c]
  407ff1:	or     eax,eax
  407ff3:	jne    408003 <__divm+0xe3>
  407ff5:	lea    rcx,[rbp-0x80]
  407ff9:	call   406b00 <powil+0x140>
  407ffe:	jmp    408174 <mdnorm+0x1c>
  408003:	or     r13d,r13d
  408006:	jge    4080c2 <__divm+0x1a2>
  40800c:	mov    ebx,0x20000
  408011:	lea    rsi,ds:0x413dc0
  408019:	lea    rdx,[rbp-0x160]
  408020:	lea    rcx,ds:0x413d80
  408028:	call   406ad8 <powil+0x118>
  40802d:	lea    rdx,[rbp-0x108]
  408034:	lea    rcx,[rbp-0x80]
  408038:	call   406ad8 <powil+0x118>
  40803d:	jmp    40808f <__divm+0x16f>
  40803f:	lea    rdx,[rbp-0x108]
  408046:	lea    rcx,[rsi]
  408049:	call   408643 <__qadd_subtract+0x212>
  40804e:	mov    DWORD PTR [rbp-0x1c8],eax
  408054:	or     eax,eax
  408056:	jg     408087 <__divm+0x167>
  408058:	lea    r8,[rbp-0x108]
  40805f:	lea    rdx,[rbp-0x108]
  408066:	lea    rcx,[rsi]
  408069:	call   407710 <powl+0xaf4>
  40806e:	lea    r8,[rbp-0x160]
  408075:	lea    rdx,[rbp-0x160]
  40807c:	lea    rcx,[rsi]
  40807f:	call   407867 <__shdn1+0x27>
  408084:	add    r14d,ebx
  408087:	sar    ebx,1
  408089:	je     4080a9 <__divm+0x189>
  40808b:	lea    rsi,[rsi+0x40]
  40808f:	lea    rdx,[rbp-0x80]
  408093:	lea    rcx,[rbp-0xc8]
  40809a:	call   408643 <__qadd_subtract+0x212>
  40809f:	mov    DWORD PTR [rbp-0x1c8],eax
  4080a5:	or     eax,eax
  4080a7:	jle    40803f <__divm+0x11f>
  4080a9:	lea    r8,[rbp-0x80]
  4080ad:	lea    rdx,[rbp-0x80]
  4080b1:	lea    rcx,[rbp-0x160]
  4080b8:	call   407710 <powl+0xaf4>
  4080bd:	jmp    408174 <mdnorm+0x1c>
  4080c2:	mov    ebx,0xfffe0000
  4080c7:	lea    rsi,ds:0x414240
  4080cf:	lea    rax,ds:0x413dc0
  4080d7:	mov    QWORD PTR [rbp-0x110],rax
  4080de:	lea    rax,ds:0x414680
  4080e6:	mov    QWORD PTR [rbp-0x168],rax
  4080ed:	jmp    408142 <__qequal+0x4a>
  4080ef:	lea    rdx,[rbp-0x80]
  4080f3:	lea    rcx,[rsi]
  4080f6:	.byte 0xe8
  4080f7:	rex.W

00000000004080f8 <__qequal>:
  4080f8:	add    eax,0x85890000
  4080fd:	cmp    dh,bh
  4080ff:	(bad)  
  408100:	dec    DWORD PTR [rcx]
  408102:	sar    BYTE PTR [rdi+rdx*1+0x4c],0x8d
  408107:	rex.RB or BYTE PTR [r8-0x73],0x55
  40810c:	or     BYTE PTR [rax-0x75],0x8d
  408110:	lock (bad) 
  408112:	(bad)  
  408113:	(bad)  
  408114:	call   407867 <__shdn1+0x27>
  408119:	add    r14d,ebx
  40811c:	mov    eax,ebx
  40811e:	mov    ecx,0x2
  408123:	mov    eax,eax
  408125:	xor    edx,edx
  408127:	test   eax,eax
  408129:	setl   dl
  40812c:	add    eax,edx
  40812e:	sar    eax,1
  408130:	mov    ebx,eax
  408132:	or     ebx,ebx
  408134:	je     40815c <mdnorm+0x4>
  408136:	lea    rsi,[rsi+0x40]
  40813a:	add    QWORD PTR [rbp-0x110],0x40
  408142:	lea    rdx,[rbp-0x80]
  408146:	mov    rcx,QWORD PTR [rbp-0x168]
  40814d:	.byte 0xe8
  40814e:	icebp  
  40814f:	.byte 0x4

0000000000408150 <retzero>:
  408150:	add    BYTE PTR [rax],al
  408152:	mov    DWORD PTR [rbp-0x1c8],eax

0000000000408158 <mdnorm>:
  408158:	or     eax,eax
  40815a:	jg     4080ef <__divm+0x1cf>
  40815c:	lea    r8,[rbp-0x80]
  408160:	lea    rdx,[rbp-0x80]
  408164:	lea    rcx,[rbp-0xc8]
  40816b:	call   407a1b <__subm+0x23>
  408170:	sub    r14d,0x1
  408174:	lea    r8,[rbp-0x80]
  408178:	lea    rdx,[rbp-0x88]
  40817f:	lea    rcx,[rbp-0x80]
  408183:	call   4072dd <powl+0x6c1>
  408188:	cmp    QWORD PTR [rbp-0x88],0xa
  408190:	jl     4081b5 <mdnorm+0x5d>
  408192:	lea    r8,[rbp-0x80]
  408196:	lea    rdx,[rbp-0x80]
  40819a:	lea    rcx,[rbp-0xc8]
  4081a1:	call   407710 <powl+0xaf4>
  4081a6:	add    r14d,0x1
  4081aa:	mov    QWORD PTR [rbp-0x88],0x1
  4081b5:	mov    r12,QWORD PTR [rbp+0x18]
  4081b9:	or     DWORD PTR [rbp-0x16c],0x0
  4081c0:	je     4081cd <mdnorm+0x75>
  4081c2:	lea    rax,[r12]
  4081c6:	lea    r12,[rax+0x1]
  4081ca:	mov    BYTE PTR [rax],0x2d
  4081cd:	lea    rax,[r12]
  4081d1:	lea    r12,[rax+0x1]
  4081d5:	mov    rcx,QWORD PTR [rbp-0x88]
  4081dc:	movsx  ecx,cl
  4081df:	add    ecx,0x30
  4081e2:	mov    BYTE PTR [rax],cl
  4081e4:	lea    rax,[r12]
  4081e8:	lea    r12,[rax+0x1]
  4081ec:	mov    BYTE PTR [rax],0x2e
  4081ef:	cmp    r14d,0xffffffff
  4081f3:	jne    4081f9 <mdnorm+0xa1>
  4081f5:	sub    r15d,0x1
  4081f9:	or     r15d,r15d
  4081fc:	jge    408201 <mdnorm+0xa9>
  4081fe:	xor    r15d,r15d
  408201:	cmp    r15d,0x84
  408208:	jle    408210 <mdnorm+0xb8>
  40820a:	mov    r15d,0x84
  408210:	xor    ebx,ebx
  408212:	jmp    408256 <cmpm+0x6>
  408214:	lea    r8,[rbp-0x80]
  408218:	lea    rdx,[rbp-0x80]
  40821c:	lea    rcx,[rbp-0xc8]
  408223:	call   407a1b <__subm+0x23>
  408228:	lea    r8,[rbp-0x80]
  40822c:	lea    rdx,[rbp-0x88]
  408233:	lea    rcx,[rbp-0x80]
  408237:	call   4072dd <powl+0x6c1>
  40823c:	lea    rax,[r12]
  408240:	lea    r12,[rax+0x1]
  408244:	mov    rcx,QWORD PTR [rbp-0x88]
  40824b:	movsx  ecx,cl
  40824e:	.byte 0x83
  40824f:	.byte 0xc1

0000000000408250 <cmpm>:
  408250:	xor    BYTE PTR [rax+0x1c38308],cl
  408256:	cmp    ebx,r15d
  408259:	jl     408214 <mdnorm+0xbc>
  40825b:	mov    BYTE PTR [r12],0x0
  408260:	mov    QWORD PTR [rbp-0x118],r12
  408267:	lea    r8,[rbp-0x80]
  40826b:	lea    rdx,[rbp-0x80]
  40826f:	lea    rcx,[rbp-0xc8]
  408276:	call   407a1b <__subm+0x23>
  40827b:	lea    r8,[rbp-0x80]
  40827f:	lea    rdx,[rbp-0x88]
  408286:	lea    rcx,[rbp-0x80]
  40828a:	call   4072dd <powl+0x6c1>
  40828f:	cmp    QWORD PTR [rbp-0x88],0x4
  408297:	jle    408312 <__qifrac+0x35>
  408299:	cmp    QWORD PTR [rbp-0x88],0x5
  4082a1:	jne    4082c5 <qisneg+0x5>
  4082a3:	lea    rdx,[rbp-0x1ac]
  4082aa:	lea    rcx,[rbp-0x80]
  4082ae:	call   408643 <__qadd_subtract+0x212>
  4082b3:	mov    DWORD PTR [rbp-0x1c8],eax
  4082b9:	or     eax,eax
  4082bb:	jne    4082c5 <qisneg+0x5>
  4082bd:	rex.B
  4082be:	.byte 0xf6
  4082bf:	rex.R

00000000004082c0 <qisneg>:
  4082c0:	and    al,0xff
  4082c2:	add    DWORD PTR [rbp+rcx*2+0x4d],esi
  4082c6:	lea    esp,[rsp-0x1]
  4082ca:	movsx  eax,BYTE PTR [r12]
  4082cf:	mov    ebx,eax
  4082d1:	and    ebx,0x7f
  4082d4:	cmp    ebx,0x2e
  4082d7:	jne    4082ff <__qifrac+0x22>
  4082d9:	rex.WRB
  4082da:	.byte 0x8d
  4082db:	fs
  4082dc:	.byte 0x24

00000000004082dd <__qifrac>:
  4082dd:	inc    DWORD PTR [rcx+0xf]
  4082e0:	mov    esi,0xc3892404
  4082e5:	and    ebx,0x7f
  4082e8:	add    ebx,0x1
  4082eb:	mov    BYTE PTR [r12],bl
  4082ef:	cmp    ebx,0x39
  4082f2:	jle    408312 <__qifrac+0x35>
  4082f4:	mov    BYTE PTR [r12],0x31
  4082f9:	add    r14d,0x1
  4082fd:	jmp    408312 <__qifrac+0x35>
  4082ff:	add    ebx,0x1
  408302:	mov    BYTE PTR [r12],bl
  408306:	cmp    ebx,0x39
  408309:	jle    408312 <__qifrac+0x35>
  40830b:	mov    BYTE PTR [r12],0x30
  408310:	jmp    4082c5 <qisneg+0x5>
  408312:	or     r14d,r14d
  408315:	jl     40842e <qadd+0x31>
  40831b:	mov    rdx,0x2e
  408322:	mov    rcx,QWORD PTR [rbp+0x18]
  408326:	call   40ae40 <_setlocale+0x934>
  40832b:	mov    QWORD PTR [rbp-0x1d0],rax
  408332:	mov    QWORD PTR [rbp-0x120],rax
  408339:	mov    DWORD PTR [rbp-0x1c8],r14d
  408340:	mov    rcx,QWORD PTR [rbp+0x18]
  408344:	call   40b060 <_setlocale+0xb54>
  408349:	mov    QWORD PTR [rbp-0x1d8],rax
  408350:	mov    ecx,r14d
  408353:	sub    rax,0x2
  408357:	cmp    rcx,rax
  40835a:	jae    40839c <__qifrac+0xbf>
  40835c:	xor    r13d,r13d
  40835f:	jmp    408379 <__qifrac+0x9c>
  408361:	mov    rax,QWORD PTR [rbp-0x120]
  408368:	mov    cl,BYTE PTR [rax+0x1]
  40836b:	mov    BYTE PTR [rax],cl
  40836d:	add    QWORD PTR [rbp-0x120],0x1
  408375:	add    r13d,0x1
  408379:	cmp    r13d,DWORD PTR [rbp-0x1c8]
  408380:	jl     408361 <__qifrac+0x84>
  408382:	mov    rax,QWORD PTR [rbp-0x120]
  408389:	mov    BYTE PTR [rax],0x2e
  40838c:	mov    rcx,QWORD PTR [rbp+0x18]
  408390:	call   407e77 <mulvSkipMult+0x1b>
  408395:	xor    eax,eax
  408397:	jmp    40862b <__qadd_subtract+0x1fa>
  40839c:	mov    rax,QWORD PTR [rbp-0x120]
  4083a3:	mov    BYTE PTR [rax],0x78
  4083a6:	mov    rcx,QWORD PTR [rbp+0x18]
  4083aa:	call   407e77 <mulvSkipMult+0x1b>
  4083af:	mov    rcx,QWORD PTR [rbp+0x18]
  4083b3:	call   40b060 <_setlocale+0xb54>
  4083b8:	mov    QWORD PTR [rbp-0x1e0],rax
  4083bf:	movsxd rax,eax
  4083c2:	rex.W
  4083c3:	.byte 0x3
  4083c4:	rex.RB

00000000004083c5 <qsub>:
  4083c5:	sbb    BYTE PTR [rax-0x77],cl
  4083c8:	test   eax,ebp
  4083ca:	(bad)  
  4083cb:	(bad)  
  4083cc:	dec    DWORD PTR [rax-0x75]
  4083cf:	test   eax,esp
  4083d1:	(bad)  
  4083d2:	(bad)  
  4083d3:	inc    esi
  4083d5:	add    BYTE PTR [rsi],ch
  4083d7:	mov    rcx,QWORD PTR [rbp+0x18]
  4083db:	call   40b060 <_setlocale+0xb54>
  4083e0:	mov    QWORD PTR [rbp-0x1e8],rax
  4083e7:	movsxd rax,eax
  4083ea:	mov    rcx,QWORD PTR [rbp+0x18]
  4083ee:	lea    rax,[rax+rcx*1-0x1]
  4083f3:	mov    QWORD PTR [rbp-0x118],rax
  4083fa:	cmp    BYTE PTR [rax],0x2e

00000000004083fd <qadd>:
  4083fd:	jne    408421 <qadd+0x24>
  4083ff:	add    QWORD PTR [rbp-0x118],0x1
  408407:	mov    rax,QWORD PTR [rbp-0x118]
  40840e:	lea    rcx,[rax+0x1]
  408412:	mov    QWORD PTR [rbp-0x118],rcx
  408419:	mov    BYTE PTR [rax],0x30
  40841c:	jmp    4085f6 <__qadd_subtract+0x1c5>
  408421:	add    QWORD PTR [rbp-0x118],0x1
  408429:	jmp    4085f6 <__qadd_subtract+0x1c5>
  40842e:	or     r14d,r14d

0000000000408431 <__qadd_subtract>:
  408431:	jge    4085f6 <__qadd_subtract+0x1c5>
  408437:	mov    rdx,0x2e
  40843e:	mov    rcx,QWORD PTR [rbp+0x18]
  408442:	call   40ae40 <_setlocale+0x934>
  408447:	mov    QWORD PTR [rbp-0x1d0],rax
  40844e:	mov    QWORD PTR [rbp-0x120],rax
  408455:	mov    eax,r14d
  408458:	neg    eax
  40845a:	mov    DWORD PTR [rbp-0x1c8],eax
  408460:	mov    ecx,r15d
  408463:	sub    ecx,0x2
  408466:	cmp    eax,ecx
  408468:	jge    40858a <__qadd_subtract+0x159>
  40846e:	add    QWORD PTR [rbp-0x120],0xffffffffffffffff
  408476:	mov    rax,QWORD PTR [rbp-0x120]
  40847d:	mov    cl,BYTE PTR [rax]
  40847f:	mov    BYTE PTR [rax+0x1],cl
  408482:	mov    rax,QWORD PTR [rbp-0x120]
  408489:	mov    BYTE PTR [rax],0x2e
  40848c:	dec    DWORD PTR [rbp-0x1c8]
  408492:	mov    rcx,QWORD PTR [rbp+0x18]
  408496:	call   407e77 <mulvSkipMult+0x1b>
  40849b:	mov    eax,DWORD PTR [rbp-0x1c8]
  4084a1:	or     eax,eax
  4084a3:	jle    40853e <__qadd_subtract+0x10d>
  4084a9:	mov    rcx,QWORD PTR [rbp+0x18]
  4084ad:	call   40b060 <_setlocale+0xb54>
  4084b2:	mov    QWORD PTR [rbp-0x1d8],rax
  4084b9:	mov    rdi,QWORD PTR [rbp-0x1d8]
  4084c0:	mov    r8,rdi
  4084c3:	add    r8,0x1
  4084c7:	mov    rax,QWORD PTR [rbp-0x120]
  4084ce:	lea    rdx,[rax+0x1]
  4084d2:	movsxd rcx,DWORD PTR [rbp-0x1c8]
  4084d9:	lea    rcx,[rcx+rax*1+0x1]
  4084de:	call   4057d0 <freeUserData+0x20>
  4084e3:	movsxd r8,DWORD PTR [rbp-0x1c8]
  4084ea:	mov    rdx,0x30
  4084f1:	mov    rax,QWORD PTR [rbp-0x120]
  4084f8:	lea    rcx,[rax+0x1]
  4084fc:	call   405860 <fclose+0x4a>
  408501:	mov    rcx,QWORD PTR [rbp+0x18]
  408505:	call   40b060 <_setlocale+0xb54>
  40850a:	mov    QWORD PTR [rbp-0x1e0],rax
  408511:	mov    rdi,QWORD PTR [rbp-0x1e0]
  408518:	mov    r8,rdi
  40851b:	add    r8,0x1
  40851f:	mov    rax,QWORD PTR [rbp-0x120]
  408526:	lea    rdx,[rax]
  408529:	lea    rcx,[rax+0x1]
  40852d:	call   4057d0 <freeUserData+0x20>
  408532:	mov    rax,QWORD PTR [rbp-0x120]
  408539:	mov    BYTE PTR [rax],0x30
  40853c:	jmp    408583 <__qadd_subtract+0x152>
  40853e:	mov    eax,DWORD PTR [rbp-0x1c8]
  408544:	or     eax,eax
  408546:	jne    408583 <__qadd_subtract+0x152>
  408548:	mov    rcx,QWORD PTR [rbp+0x18]
  40854c:	call   40b060 <_setlocale+0xb54>
  408551:	mov    QWORD PTR [rbp-0x1d8],rax
  408558:	mov    rdi,QWORD PTR [rbp-0x1d8]
  40855f:	mov    r8,rdi
  408562:	add    r8,0x1
  408566:	mov    rax,QWORD PTR [rbp-0x120]
  40856d:	lea    rdx,[rax]
  408570:	lea    rcx,[rax+0x1]
  408574:	call   4057d0 <freeUserData+0x20>
  408579:	mov    rax,QWORD PTR [rbp-0x120]
  408580:	mov    BYTE PTR [rax],0x30
  408583:	xor    eax,eax
  408585:	jmp    40862b <__qadd_subtract+0x1fa>
  40858a:	mov    rax,QWORD PTR [rbp-0x120]
  408591:	mov    BYTE PTR [rax],0x78
  408594:	mov    rcx,QWORD PTR [rbp+0x18]
  408598:	call   407e77 <mulvSkipMult+0x1b>
  40859d:	mov    rax,QWORD PTR [rbp-0x120]
  4085a4:	mov    BYTE PTR [rax],0x2e
  4085a7:	mov    rcx,QWORD PTR [rbp+0x18]
  4085ab:	call   40b060 <_setlocale+0xb54>
  4085b0:	mov    QWORD PTR [rbp-0x1d8],rax
  4085b7:	movsxd rax,eax
  4085ba:	mov    rcx,QWORD PTR [rbp+0x18]
  4085be:	lea    rax,[rax+rcx*1-0x1]
  4085c3:	mov    QWORD PTR [rbp-0x118],rax
  4085ca:	cmp    BYTE PTR [rax],0x2e
  4085cd:	jne    4085ee <__qadd_subtract+0x1bd>
  4085cf:	add    QWORD PTR [rbp-0x118],0x1
  4085d7:	mov    rax,QWORD PTR [rbp-0x118]
  4085de:	lea    rcx,[rax+0x1]
  4085e2:	mov    QWORD PTR [rbp-0x118],rcx
  4085e9:	mov    BYTE PTR [rax],0x30
  4085ec:	jmp    4085f6 <__qadd_subtract+0x1c5>
  4085ee:	add    QWORD PTR [rbp-0x118],0x1
  4085f6:	mov    rcx,QWORD PTR [rbp+0x18]
  4085fa:	call   40b060 <_setlocale+0xb54>
  4085ff:	mov    QWORD PTR [rbp-0x1d0],rax
  408606:	mov    rdi,QWORD PTR [rbp-0x1d0]
  40860d:	mov    r8d,r14d
  408610:	lea    rdx,ds:0x414702
  408618:	push   rdx
  408619:	movsxd rax,edi
  40861c:	mov    rcx,rax
  40861f:	add    rcx,QWORD PTR [rbp+0x18]
  408623:	pop    rdx
  408624:	call   40acef <_setlocale+0x7e3>
  408629:	xor    eax,eax
  40862b:	add    rsp,0x1f0
  408632:	add    rsp,0x8
  408636:	pop    r15
  408638:	pop    r14
  40863a:	pop    r13
  40863c:	pop    r12
  40863e:	pop    rdi
  40863f:	pop    rsi
  408640:	pop    rbx
  408641:	leave  
  408642:	ret    
  408643:	push   rbp
  408644:	mov    rbp,rsp
  408647:	push   rbx
  408648:	push   rsi
  408649:	push   rdi
  40864a:	push   r12
  40864c:	sub    rsp,0x80
  408653:	mov    rdi,rdx
  408656:	mov    rsi,rcx
  408659:	cmp    DWORD PTR [rsi+0x4],0x1c0
  408660:	ja     4086aa <__qadd_subtract+0x279>
  408662:	cmp    DWORD PTR [rdi+0x4],0x1c0
  408669:	ja     4086aa <__qadd_subtract+0x279>
  40866b:	mov    r9,0x1
  408672:	lea    r8,[rbp-0x60]
  408676:	lea    rdx,[rsi]
  408679:	lea    rcx,[rdi]
  40867c:	call   407431 <powl+0x815>
  408681:	mov    eax,DWORD PTR [rbp-0x5c]
  408684:	or     eax,eax
  408686:	jne    40868f <__qadd_subtract+0x25e>
  408688:	xor    eax,eax
  40868a:	jmp    40874a <__qdiv+0x3a>
  40868f:	mov    eax,DWORD PTR [rbp-0x60]
  408692:	or     eax,eax
  408694:	jne    4086a0 <__qadd_subtract+0x26f>
  408696:	mov    eax,0x1
  40869b:	jmp    40874a <__qdiv+0x3a>
  4086a0:	mov    eax,0xffffffff
  4086a5:	jmp    40874a <__qdiv+0x3a>
  4086aa:	mov    eax,DWORD PTR [rsi]
  4086ac:	cmp    eax,DWORD PTR [rdi]
  4086ae:	je     4086ca <__qadd_subtract+0x299>
  4086b0:	mov    eax,DWORD PTR [rsi]
  4086b2:	or     eax,eax
  4086b4:	jne    4086c0 <__qadd_subtract+0x28f>
  4086b6:	mov    eax,0x1
  4086bb:	jmp    40874a <__qdiv+0x3a>
  4086c0:	mov    eax,0xffffffff
  4086c5:	jmp    40874a <__qdiv+0x3a>
  4086ca:	mov    eax,DWORD PTR [rsi]
  4086cc:	or     eax,eax
  4086ce:	setne  r12b
  4086d2:	and    r12d,0x1
  4086d6:	sub    r12d,0x1
  4086da:	and    r12d,0x2
  4086de:	add    r12d,0xffffffff
  4086e2:	mov    eax,DWORD PTR [rsi+0x4]
  4086e5:	mov    ecx,DWORD PTR [rdi+0x4]
  4086e8:	cmp    eax,ecx
  4086ea:	je     408700 <__qadd_subtract+0x2cf>
  4086ec:	mov    eax,DWORD PTR [rdi+0x4]
  4086ef:	cmp    DWORD PTR [rsi+0x4],eax
  4086f2:	jbe    4086f9 <__qadd_subtract+0x2c8>
  4086f4:	mov    eax,r12d
  4086f7:	jmp    40874a <__qdiv+0x3a>
  4086f9:	mov    eax,r12d
  4086fc:	neg    eax
  4086fe:	jmp    40874a <__qdiv+0x3a>
  408700:	xor    ebx,ebx
  408702:	movsxd rax,ebx
  408705:	shl    rax,0x3
  408709:	lea    rcx,[rdi+0x8]
  40870d:	rex.W
  40870e:	.byte 0x8b
  40870f:	.byte 0xc

0000000000408710 <__qdiv>:
  408710:	add    DWORD PTR [rax-0x73],ecx
  408713:	push   rsi
  408714:	or     BYTE PTR [rax+0x3b],cl
  408717:	or     al,0x2
  408719:	jne    408727 <__qdiv+0x17>
  40871b:	add    ebx,0x1
  40871e:	cmp    ebx,0x7
  408721:	jl     408702 <__qadd_subtract+0x2d1>
  408723:	xor    eax,eax
  408725:	jmp    40874a <__qdiv+0x3a>
  408727:	movsxd rax,ebx
  40872a:	shl    rax,0x3
  40872e:	lea    rcx,[rsi+0x8]
  408732:	lea    rdx,[rdi+0x8]
  408736:	mov    rdx,QWORD PTR [rdx+rax*1]
  40873a:	cmp    QWORD PTR [rcx+rax*1],rdx
  40873e:	jbe    408745 <__qdiv+0x35>
  408740:	mov    eax,r12d
  408743:	jmp    40874a <__qdiv+0x3a>
  408745:	mov    eax,r12d
  408748:	neg    eax
  40874a:	add    rsp,0x80
  408751:	pop    r12
  408753:	pop    rdi
  408754:	pop    rsi
  408755:	pop    rbx
  408756:	leave  
  408757:	ret    
  408758:	push   rbp
  408759:	mov    rbp,rsp
  40875c:	push   rbx
  40875d:	push   rsi
  40875e:	push   rdi
  40875f:	push   r12
  408761:	push   r13
  408763:	push   r14
  408765:	push   r15
  408767:	sub    rsp,0x8
  40876b:	sub    rsp,0x160
  408772:	mov    QWORD PTR [rbp+0x20],r8
  408776:	mov    r14,rdx
  408779:	mov    rsi,rcx
  40877c:	mov    QWORD PTR [rbp-0xf0],rsi
  408783:	mov    DWORD PTR [rbp-0xe0],0x0
  40878d:	mov    r13d,0x1
  408793:	mov    DWORD PTR [rbp-0xe8],0x0
  40879d:	mov    DWORD PTR [rbp-0x144],0x0
  4087a7:	xor    edi,edi
  4087a9:	xor    ebx,ebx
  4087ab:	mov    DWORD PTR [rbp-0xe4],0x0
  4087b5:	mov    DWORD PTR [rbp-0xd4],0x0
  4087bf:	mov    r8,0x50
  4087c6:	xor    edx,edx
  4087c8:	lea    rcx,[rbp-0x90]
  4087cf:	call   405860 <fclose+0x4a>
  4087d4:	mov    r15d,0xa
  4087da:	cmp    BYTE PTR [rsi],0x2d
  4087dd:	jne    4087ec <__qdiv+0xdc>
  4087df:	or     DWORD PTR [rbp-0xe0],0xffffffff
  4087e6:	lea    rsi,[rsi+0x1]
  4087ea:	jmp    4087f5 <__qdiv+0xe5>
  4087ec:	cmp    BYTE PTR [rsi],0x2b
  4087ef:	jne    4087f5 <__qdiv+0xe5>
  4087f1:	lea    rsi,[rsi+0x1]
  4087f5:	cmp    BYTE PTR [rsi],0x30
  4087f8:	jne    408812 <__qdiv+0x102>
  4087fa:	movsx  eax,BYTE PTR [rsi+0x1]
  4087fe:	cmp    eax,0x78
  408801:	je     408808 <__qdiv+0xf8>
  408803:	cmp    eax,0x58
  408806:	jne    408812 <__qdiv+0x102>
  408808:	mov    r15d,0x10
  40880e:	lea    rsi,[rsi+0x2]
  408812:	movsx  eax,BYTE PTR [rsi]
  408815:	cmp    eax,0x30
  408818:	jl     40882d <__qdiv+0x11d>
  40881a:	cmp    eax,0x39
  40881d:	jg     40882d <__qdiv+0x11d>
  40881f:	movsx  eax,BYTE PTR [rsi]
  408822:	sub    eax,0x30
  408825:	mov    DWORD PTR [rbp-0xdc],eax
  40882b:	jmp    40886a <__qmul+0x3>
  40882d:	movsx  eax,BYTE PTR [rsi]
  408830:	cmp    eax,0x61
  408833:	jl     408848 <__qdiv+0x138>
  408835:	cmp    eax,0x66
  408838:	jg     408848 <__qdiv+0x138>
  40883a:	movsx  eax,BYTE PTR [rsi]
  40883d:	add    eax,0xffffffa9
  408840:	mov    DWORD PTR [rbp-0xdc],eax
  408846:	jmp    40886a <__qmul+0x3>
  408848:	movsx  eax,BYTE PTR [rsi]
  40884b:	cmp    eax,0x41
  40884e:	jl     408863 <__qdiv+0x153>
  408850:	cmp    eax,0x46
  408853:	jg     408863 <__qdiv+0x153>
  408855:	movsx  eax,BYTE PTR [rsi]
  408858:	add    eax,0xffffffc9
  40885b:	mov    DWORD PTR [rbp-0xdc],eax
  408861:	jmp    40886a <__qmul+0x3>
  408863:	.byte 0x83
  408864:	lea    esp,[rdi+rdi*8]

0000000000408867 <__qmul>:
  408867:	(bad)  
  408868:	(bad)  
  408869:	dec    DWORD PTR [rbx-0xdb7b]
  40886f:	dec    DWORD PTR [rcx]
  408871:	ror    BYTE PTR [rdi],0x8c
  408874:	(bad)  
  408875:	add    DWORD PTR [rax],eax
  408877:	add    BYTE PTR [rcx+rdi*1-0x8],al
  40887b:	jge    40898f <__qmul+0x128>
  408881:	mov    eax,DWORD PTR [rbp-0xd4]
  408887:	or     eax,eax
  408889:	jne    40889e <__qmul+0x37>
  40888b:	mov    eax,DWORD PTR [rbp-0xe8]
  408891:	or     eax,eax
  408893:	jne    40889e <__qmul+0x37>
  408895:	cmp    BYTE PTR [rsi],0x30
  408898:	je     408a22 <__qmuli+0x7>
  40889e:	cmp    DWORD PTR [rbp-0xd4],0x84
  4088a8:	jge    408984 <__qmul+0x11d>
  4088ae:	or     DWORD PTR [rbp-0xe8],0x0
  4088b5:	je     4088ba <__qmul+0x53>
  4088b7:	add    edi,0x1
  4088ba:	cmp    r15d,0x10
  4088be:	jne    4088f2 <__qmul+0x8b>
  4088c0:	lea    rcx,[rbp-0x90]
  4088c7:	call   406868 <memset+0x8>
  4088cc:	lea    rcx,[rbp-0x90]
  4088d3:	call   406868 <memset+0x8>
  4088d8:	lea    rcx,[rbp-0x90]
  4088df:	call   406868 <memset+0x8>
  4088e4:	lea    rcx,[rbp-0x90]
  4088eb:	call   406868 <memset+0x8>
  4088f0:	jmp    408943 <__qmul+0xdc>
  4088f2:	lea    rcx,[rbp-0x90]
  4088f9:	call   406868 <memset+0x8>
  4088fe:	mov    r8,0x50
  408905:	lea    rdx,[rbp-0x90]
  40890c:	lea    rcx,[rbp-0x140]
  408913:	call   4057a0 <fabs+0x10>
  408918:	lea    rcx,[rbp-0x140]
  40891f:	call   406868 <memset+0x8>
  408924:	lea    rcx,[rbp-0x140]
  40892b:	call   406868 <memset+0x8>
  408930:	lea    rdx,[rbp-0x90]
  408937:	lea    rcx,[rbp-0x140]
  40893e:	call   406988 <p1evll+0x24>
  408943:	mov    r8,0x50
  40894a:	xor    edx,edx
  40894c:	lea    rcx,[rbp-0x140]
  408953:	call   405860 <fclose+0x4a>
  408958:	lea    rax,[rbp-0x140]
  40895f:	mov    QWORD PTR [rbp-0x150],rax
  408966:	movsxd rcx,DWORD PTR [rbp-0xdc]
  40896d:	mov    QWORD PTR [rax+0x40],rcx
  408971:	lea    rdx,[rbp-0x90]
  408978:	lea    rcx,[rbp-0x140]
  40897f:	call   406988 <p1evll+0x24>
  408984:	inc    DWORD PTR [rbp-0xd4]
  40898a:	jmp    408a22 <__qmuli+0x7>
  40898f:	movsx  eax,BYTE PTR [rsi]
  408992:	cmp    eax,0x2e
  408995:	je     4089ee <__qmul+0x187>
  408997:	jg     4089c8 <__qmul+0x161>
  408999:	cmp    eax,0xa
  40899c:	je     408ab2 <__qmuli+0x97>
  4089a2:	cmp    eax,0xd
  4089a5:	je     408ab2 <__qmuli+0x97>
  4089ab:	jg     4089ba <__qmul+0x153>
  4089ad:	or     eax,eax
  4089af:	je     408ab2 <__qmuli+0x97>
  4089b5:	jmp    408ab2 <__qmuli+0x97>
  4089ba:	cmp    eax,0x20
  4089bd:	je     408ab2 <__qmuli+0x97>
  4089c3:	jmp    408ab2 <__qmuli+0x97>
  4089c8:	cmp    eax,0x50
  4089cb:	je     408a2b <__qmuli+0x10>
  4089cd:	jg     4089d9 <__qmul+0x172>
  4089cf:	cmp    eax,0x45
  4089d2:	je     408a2b <__qmuli+0x10>
  4089d4:	jmp    408ab2 <__qmuli+0x97>
  4089d9:	cmp    eax,0x65
  4089dc:	je     408a2b <__qmuli+0x10>
  4089de:	jl     408ab2 <__qmuli+0x97>
  4089e4:	cmp    eax,0x70
  4089e7:	je     408a2b <__qmuli+0x10>
  4089e9:	jmp    408ab2 <__qmuli+0x97>
  4089ee:	or     DWORD PTR [rbp-0xe8],0x0
  4089f5:	jne    4089ff <__qmul+0x198>
  4089f7:	inc    DWORD PTR [rbp-0xe8]
  4089fd:	jmp    408a22 <__qmuli+0x7>
  4089ff:	mov    rdx,QWORD PTR [rbp-0xf0]
  408a06:	lea    rcx,ds:0x4146e2
  408a0e:	call   40fc5d <WriteDouble+0x966>
  408a13:	lea    rcx,[r14]
  408a16:	call   406b00 <powil+0x140>

0000000000408a1b <__qmuli>:
  408a1b:	xor    eax,eax
  408a1d:	jmp    408cbe <__shift+0x1b7>
  408a22:	lea    rsi,[rsi+0x1]
  408a26:	jmp    408812 <__qdiv+0x102>
  408a2b:	xor    ebx,ebx
  408a2d:	movsxd rax,ebx
  408a30:	cmp    QWORD PTR [rbp+rax*8-0x88],0x0
  408a39:	jne    408a50 <__qmuli+0x35>
  408a3b:	add    ebx,0x1
  408a3e:	cmp    ebx,0x8
  408a41:	jl     408a2d <__qmuli+0x12>
  408a43:	lea    rcx,[r14]
  408a46:	call   406b00 <powil+0x140>
  408a4b:	jmp    408cae <__shift+0x1a7>
  408a50:	xor    ebx,ebx
  408a52:	lea    rsi,[rsi+0x1]
  408a56:	cmp    BYTE PTR [rsi],0x2d
  408a59:	jne    408a65 <__qmuli+0x4a>
  408a5b:	mov    r13d,0xffffffff
  408a61:	lea    rsi,[rsi+0x1]
  408a65:	cmp    BYTE PTR [rsi],0x2b
  408a68:	jne    408a9e <__qmuli+0x83>
  408a6a:	lea    rsi,[rsi+0x1]
  408a6e:	jmp    408a9e <__qmuli+0x83>
  408a70:	cmp    ebx,0x7fff
  408a76:	jge    408a7c <__qmuli+0x61>
  408a78:	or     ebx,ebx
  408a7a:	jge    408a8a <__qmuli+0x6f>
  408a7c:	or     r13d,r13d
  408a7f:	jge    408bc1 <__shift+0xba>
  408a85:	jmp    408bea <__shift+0xe3>
  408a8a:	imul   ecx,ebx,0xa
  408a8d:	mov    ebx,ecx
  408a8f:	lea    rax,[rsi]
  408a92:	lea    rsi,[rax+0x1]
  408a96:	movsx  eax,BYTE PTR [rax]
  408a99:	sub    eax,0x30
  408a9c:	add    ebx,eax
  408a9e:	movsx  eax,BYTE PTR [rsi]
  408aa1:	cmp    eax,0x30
  408aa4:	jl     408aab <__qmuli+0x90>
  408aa6:	cmp    eax,0x39
  408aa9:	jle    408a70 <__qmuli+0x55>
  408aab:	or     r13d,r13d
  408aae:	jge    408ab2 <__qmuli+0x97>
  408ab0:	neg    ebx
  408ab2:	cmp    r15d,0x10
  408ab6:	jne    408b5b <__shift+0x54>
  408abc:	lea    rdx,[rbp-0xd8]
  408ac3:	lea    rcx,[rbp-0x90]
  408aca:	call   407cd1 <mulmInnerLoop+0xd>
  408acf:	cmp    DWORD PTR [rbp-0xd8],0x1c0
  408ad9:	jle    408af5 <__qmuli+0xda>
  408adb:	mov    r8,0x50
  408ae2:	xor    edx,edx
  408ae4:	lea    rcx,[rbp-0x90]
  408aeb:	call   405860 <fclose+0x4a>
  408af0:	jmp    408cae <__shift+0x1a7>
  408af5:	mov    eax,0x801c0
  408afa:	sub    eax,DWORD PTR [rbp-0xd8]
  408b00:	mov    ecx,DWORD PTR [rbp-0x8c]
  408b06:	.byte 0x1

0000000000408b07 <__shift>:
  408b07:	enter  0xd801,0x89
  408b0b:	stc    
  408b0c:	shl    ecx,0x2
  408b0f:	sub    eax,ecx
  408b11:	mov    DWORD PTR [rbp-0xe4],eax
  408b17:	cmp    eax,0x100000
  408b1c:	jg     408bc1 <__shift+0xba>
  408b22:	cmp    DWORD PTR [rbp-0xe4],0x0
  408b29:	jl     408bea <__shift+0xe3>
  408b2f:	mov    eax,DWORD PTR [rbp-0xe4]
  408b35:	mov    DWORD PTR [rbp-0x8c],eax
  408b3b:	mov    eax,DWORD PTR [rbp-0xe0]
  408b41:	mov    DWORD PTR [rbp-0x90],eax
  408b47:	lea    rdx,[r14]
  408b4a:	lea    rcx,[rbp-0x90]
  408b51:	call   406a68 <powil+0xa8>
  408b56:	jmp    408cae <__shift+0x1a7>
  408b5b:	mov    eax,ebx
  408b5d:	sub    eax,edi
  408b5f:	mov    edi,eax
  408b61:	lea    rdx,[rbp-0xd8]
  408b68:	lea    rcx,[rbp-0x90]
  408b6f:	call   407cd1 <mulmInnerLoop+0xd>
  408b74:	mov    DWORD PTR [rbp-0x158],eax
  408b7a:	or     eax,eax
  408b7c:	je     408b8d <__shift+0x86>
  408b7e:	lea    rcx,[r14]
  408b81:	call   406b00 <powil+0x140>
  408b86:	xor    eax,eax
  408b88:	jmp    408cbe <__shift+0x1b7>
  408b8d:	mov    eax,0x801c0
  408b92:	sub    eax,DWORD PTR [rbp-0xd8]
  408b98:	mov    DWORD PTR [rbp-0x8c],eax
  408b9e:	mov    eax,DWORD PTR [rbp-0xe0]
  408ba4:	mov    DWORD PTR [rbp-0x90],eax
  408baa:	lea    rdx,[r14]
  408bad:	lea    rcx,[rbp-0x90]
  408bb4:	call   406a68 <powil+0xa8>
  408bb9:	cmp    edi,0x40000
  408bbf:	jl     408be2 <__shift+0xdb>
  408bc1:	lea    rcx,[r14]
  408bc4:	call   407df5 <mulv+0xd>
  408bc9:	mov    rdx,0x3
  408bd0:	lea    rcx,ds:0x4146db
  408bd8:	call   4058a0 <fclose+0x8a>
  408bdd:	jmp    408cae <__shift+0x1a7>
  408be2:	cmp    edi,0xfffc0000
  408be8:	jg     408c21 <__shift+0x11a>
  408bea:	lea    rcx,[r14]
  408bed:	call   406b00 <powil+0x140>
  408bf2:	mov    rdx,0x4
  408bf9:	lea    rcx,ds:0x4146db
  408c01:	call   4058a0 <fclose+0x8a>
  408c06:	mov    r8,QWORD PTR [rbp-0xf0]
  408c0d:	mov    edx,edi
  408c0f:	lea    rcx,ds:0x4146c0
  408c17:	call   40fc5d <WriteDouble+0x966>
  408c1c:	jmp    408cae <__shift+0x1a7>
  408c21:	or     edi,edi
  408c23:	je     408cae <__shift+0x1a7>
  408c29:	xor    r13d,r13d
  408c2c:	or     edi,edi
  408c2e:	jge    408c38 <__shift+0x131>
  408c30:	mov    r13d,0xffffffff
  408c36:	neg    edi
  408c38:	lea    r12,ds:0x414200
  408c40:	mov    ebx,0x1
  408c45:	lea    rdx,[rbp-0xd0]
  408c4c:	lea    rcx,ds:0x413d80
  408c54:	call   406ad8 <powil+0x118>
  408c59:	test   edi,ebx
  408c5b:	je     408c74 <__shift+0x16d>
  408c5d:	lea    r8,[rbp-0xd0]
  408c64:	lea    rdx,[rbp-0xd0]
  408c6b:	lea    rcx,[r12]
  408c6f:	call   407867 <__shdn1+0x27>
  408c74:	shl    ebx,1
  408c76:	lea    r12,[r12-0x40]
  408c7b:	cmp    ebx,0x20000
  408c81:	jle    408c59 <__shift+0x152>
  408c83:	or     r13d,r13d
  408c86:	jge    408c9c <__shift+0x195>
  408c88:	lea    r8,[r14]
  408c8b:	lea    rdx,[r14]
  408c8e:	lea    rcx,[rbp-0xd0]
  408c95:	call   407710 <powl+0xaf4>
  408c9a:	jmp    408cae <__shift+0x1a7>
  408c9c:	lea    r8,[r14]
  408c9f:	lea    rdx,[r14]
  408ca2:	lea    rcx,[rbp-0xd0]
  408ca9:	call   407867 <__shdn1+0x27>
  408cae:	cmp    QWORD PTR [rbp+0x20],0x0
  408cb3:	je     408cbc <__shift+0x1b5>
  408cb5:	mov    rax,QWORD PTR [rbp+0x20]
  408cb9:	mov    QWORD PTR [rax],rsi
  408cbc:	xor    eax,eax
  408cbe:	add    rsp,0x160
  408cc5:	add    rsp,0x8
  408cc9:	pop    r15
  408ccb:	pop    r14
  408ccd:	pop    r13
  408ccf:	pop    r12

0000000000408cd1 <__normlz>:
  408cd1:	pop    rdi
  408cd2:	pop    rsi
  408cd3:	pop    rbx
  408cd4:	leave  
  408cd5:	ret    
  408cd6:	push   rbp
  408cd7:	mov    rbp,rsp
  408cda:	push   rbx
  408cdb:	push   rsi
  408cdc:	push   rdi
  408cdd:	sub    rsp,0x8
  408ce1:	sub    rsp,0xe0
  408ce8:	mov    rbx,rdx
  408ceb:	mov    QWORD PTR [rbp+0x10],rcx
  408cef:	lea    rbx,[rbx+0x8]
  408cf3:	mov    WORD PTR [rbx],0x0
  408cf8:	lea    rsi,[rbp-0x70]
  408cfc:	lea    rdx,[rsi]
  408cff:	mov    rcx,QWORD PTR [rbp+0x10]
  408d03:	call   406a98 <powil+0xd8>
  408d08:	mov    eax,DWORD PTR [rbp-0x70]
  408d0b:	or     eax,eax
  408d0d:	je     408d14 <__normlz+0x43>
  408d0f:	mov    WORD PTR [rbx],0x8000
  408d14:	lea    rsi,[rsi+0x4]
  408d18:	lea    rdx,[rbp-0x74]
  408d1c:	lea    rcx,[rbp-0x70]
  408d20:	call   407cd1 <mulmInnerLoop+0xd>
  408d25:	mov    DWORD PTR [rbp-0xd0],eax
  408d2b:	or     eax,eax
  408d2d:	jne    408db6 <__normlz+0xe5>
  408d33:	mov    eax,DWORD PTR [rsi]
  408d35:	sub    eax,DWORD PTR [rbp-0x74]
  408d38:	mov    DWORD PTR [rsi],eax
  408d3a:	lea    rax,[rsi]
  408d3d:	lea    rsi,[rax+0x4]
  408d41:	mov    eax,DWORD PTR [rax]
  408d43:	mov    edi,eax
  408d45:	sub    edi,0x7c002
  408d4b:	cmp    edi,0x7fff
  408d51:	jl     408d94 <__normlz+0xc3>
  408d53:	lea    rax,[rbx]
  408d56:	lea    rbx,[rax-0x2]
  408d5a:	or     WORD PTR [rax],0x7ffe
  408d5f:	lea    rax,[rbx]
  408d62:	lea    rbx,[rax-0x2]
  408d66:	mov    WORD PTR [rax],0xffff
  408d6b:	lea    rax,[rbx]
  408d6e:	lea    rbx,[rax-0x2]
  408d72:	mov    WORD PTR [rax],0xffff
  408d77:	lea    rax,[rbx]
  408d7a:	lea    rbx,[rax-0x2]
  408d7e:	mov    WORD PTR [rax],0xffff
  408d83:	lea    rax,[rbx]
  408d86:	lea    rbx,[rax-0x2]
  408d8a:	mov    WORD PTR [rax],0xffff
  408d8f:	jmp    408e36 <qnrmlz+0xe>
  408d94:	or     edi,edi
  408d96:	jg     408dec <__normlz+0x11b>
  408d98:	cmp    edi,0xffffffbf
  408d9b:	jle    408db6 <__normlz+0xe5>
  408d9d:	mov    eax,edi
  408d9f:	sub    eax,0x1
  408da2:	mov    DWORD PTR [rbp-0x74],eax
  408da5:	lea    rdx,[rbp-0x74]
  408da9:	lea    rcx,[rbp-0x70]
  408dad:	call   407b07 <__qclear+0x7>
  408db2:	xor    edi,edi
  408db4:	jmp    408dec <__normlz+0x11b>
  408db6:	lea    rax,[rbx-0x2]
  408dba:	lea    rbx,[rbx-0x2]
  408dbe:	mov    WORD PTR [rax],0x0
  408dc3:	lea    rax,[rbx-0x2]
  408dc7:	lea    rbx,[rbx-0x2]
  408dcb:	mov    WORD PTR [rax],0x0
  408dd0:	lea    rax,[rbx-0x2]
  408dd4:	lea    rbx,[rbx-0x2]
  408dd8:	mov    WORD PTR [rax],0x0
  408ddd:	lea    rax,[rbx-0x2]
  408de1:	lea    rbx,[rbx-0x2]
  408de5:	mov    WORD PTR [rax],0x0
  408dea:	jmp    408e36 <qnrmlz+0xe>
  408dec:	movzx  eax,WORD PTR [rbx]
  408def:	or     eax,edi
  408df1:	mov    WORD PTR [rbx],ax
  408df4:	rex.W

0000000000408df5 <__qinfin>:
  408df5:	lea    esi,[rbp-0x5c]
  408df8:	lea    rax,[rbx-0x2]
  408dfc:	lea    rbx,[rbx-0x2]
  408e00:	mov    ecx,DWORD PTR [rsi]
  408e02:	shr    ecx,0x10
  408e05:	mov    WORD PTR [rax],cx
  408e08:	lea    rax,[rbx-0x2]
  408e0c:	lea    rbx,[rbx-0x2]
  408e10:	mov    ecx,DWORD PTR [rsi]
  408e12:	mov    WORD PTR [rax],cx
  408e15:	lea    rsi,[rbp-0x60]
  408e19:	lea    rax,[rbx-0x2]
  408e1d:	lea    rbx,[rbx-0x2]
  408e21:	mov    ecx,DWORD PTR [rsi]
  408e23:	shr    ecx,0x10
  408e26:	data16
  408e27:	.byte 0x89

0000000000408e28 <qnrmlz>:
  408e28:	or     BYTE PTR [rax-0x73],cl
  408e2b:	rex.XB dec BYTE PTR [r8-0x73]
  408e2f:	pop    rbx
  408e30:	dec    BYTE PTR [rbx+0x889660e]
  408e36:	add    rsp,0xe0
  408e3d:	add    rsp,0x8
  408e41:	pop    rdi
  408e42:	pop    rsi
  408e43:	pop    rbx
  408e44:	leave  
  408e45:	ret    
  408e46:	push   rbp
  408e47:	mov    rbp,rsp
  408e4a:	push   rbx
  408e4b:	push   rsi
  408e4c:	sub    rsp,0x90
  408e53:	xor    ebx,ebx
  408e55:	lea    rdx,[rbp-0x50]
  408e59:	lea    rcx,[rbp+0x30]
  408e5d:	call   408ecd <__qtoasc+0x7>
  408e62:	lea    rsi,ds:0x413e00
  408e6a:	lea    r8,[rbp-0x50]
  408e6e:	lea    rdx,[rsi]
  408e71:	lea    rcx,[rbp-0x50]
  408e75:	.byte 0xe8
  408e76:	in     eax,dx

0000000000408e77 <TrimTrailingZeroes>:
  408e77:	jmp    ffffffff8d898e7b <.debug$T+0xffffffff8d46a05b>
  408e7c:	xor    al,0x25
  408e7e:	add    BYTE PTR [rcx+0x41],al
  408e81:	add    BYTE PTR [rbp+rcx*4+0x45],cl
  408e85:	mov    al,0x48
  408e87:	lea    edx,[rsi]
  408e89:	lea    rcx,[rbp-0x50]
  408e8d:	call   407867 <__shdn1+0x27>
  408e92:	add    ebx,0x1
  408e95:	cmp    ebx,0x32
  408e98:	jg     408eb2 <TrimTrailingZeroes+0x3b>
  408e9a:	lea    rdx,ds:0x413d80
  408ea2:	lea    rcx,[rbp-0x50]
  408ea6:	call   408643 <__qadd_subtract+0x212>
  408eab:	mov    DWORD PTR [rbp-0x54],eax
  408eae:	or     eax,eax
  408eb0:	jl     408e82 <TrimTrailingZeroes+0xb>
  408eb2:	lea    rdx,[rbp+0x30]
  408eb6:	lea    rcx,[rbp-0x50]
  408eba:	call   408cd6 <__normlz+0x5>
  408ebf:	fld    TBYTE PTR [rbp+0x30]
  408ec2:	rex.W
  408ec3:	.byte 0x81
  408ec4:	.byte 0xc4
  408ec5:	nop

0000000000408ec6 <__qtoasc>:
  408ec6:	add    BYTE PTR [rax],al
  408ec8:	add    BYTE PTR [rsi+0x5b],bl
  408ecb:	leave  
  408ecc:	ret    
  408ecd:	push   rbp
  408ece:	mov    rbp,rsp
  408ed1:	push   rbx
  408ed2:	push   rsi
  408ed3:	push   rdi
  408ed4:	push   r12
  408ed6:	sub    rsp,0xa0
  408edd:	mov    QWORD PTR [rbp+0x18],rdx
  408ee1:	mov    rsi,rcx
  408ee4:	xor    edi,edi
  408ee6:	mov    r8,0x50
  408eed:	xor    edx,edx
  408eef:	lea    rcx,[rbp-0x70]
  408ef3:	call   405860 <fclose+0x4a>
  408ef8:	lea    rsi,[rsi+0x8]
  408efc:	movzx  ebx,WORD PTR [rsi]
  408eff:	mov    DWORD PTR [rbp-0x70],0x0
  408f06:	test   ebx,0x8000
  408f0c:	je     408f12 <__qtoasc+0x4c>
  408f0e:	or     DWORD PTR [rbp-0x70],0xffffffff
  408f12:	and    ebx,0x7fff
  408f18:	jne    408f1f <__qtoasc+0x59>
  408f1a:	mov    edi,0x1
  408f1f:	add    ebx,0x7c002
  408f25:	mov    DWORD PTR [rbp-0x6c],ebx
  408f28:	lea    r12,[rsi-0x8]
  408f2c:	mov    rax,QWORD PTR [r12]
  408f30:	mov    QWORD PTR [rbp-0x60],rax
  408f34:	or     edi,edi
  408f36:	je     408f82 <__qtoasc+0xbc>
  408f38:	movabs rax,0x8000000000000000
  408f42:	test   QWORD PTR [rbp-0x58],rax
  408f46:	jne    408f51 <__qtoasc+0x8b>
  408f48:	lea    rcx,[rbp-0x70]
  408f4c:	call   406868 <memset+0x8>
  408f51:	lea    rdx,[rbp-0x74]
  408f55:	lea    rcx,[rbp-0x70]
  408f59:	call   407cd1 <mulmInnerLoop+0xd>
  408f5e:	mov    DWORD PTR [rbp-0x78],eax
  408f61:	or     eax,eax
  408f63:	je     408f79 <__qtoasc+0xb3>
  408f65:	mov    r8,0x50
  408f6c:	xor    edx,edx
  408f6e:	lea    rcx,[rbp-0x70]
  408f72:	call   405860 <fclose+0x4a>
  408f77:	jmp    408f82 <__qtoasc+0xbc>
  408f79:	mov    eax,DWORD PTR [rbp-0x6c]
  408f7c:	sub    eax,DWORD PTR [rbp-0x74]
  408f7f:	mov    DWORD PTR [rbp-0x6c],eax
  408f82:	mov    rdx,QWORD PTR [rbp+0x18]
  408f86:	lea    rcx,[rbp-0x70]
  408f8a:	call   406a68 <powil+0xa8>
  408f8f:	add    rsp,0xa0
  408f96:	pop    r12
  408f98:	pop    rdi
  408f99:	pop    rsi
  408f9a:	pop    rbx
  408f9b:	leave  
  408f9c:	ret    
  408f9d:	push   rbp
  408f9e:	mov    rbp,rsp
  408fa1:	push   rbx
  408fa2:	push   rsi
  408fa3:	push   rdi
  408fa4:	push   r12
  408fa6:	sub    rsp,0xa0
  408fad:	mov    rsi,rdx
  408fb0:	mov    rdi,rcx
  408fb3:	mov    r8,0x40
  408fba:	xor    edx,edx
  408fbc:	lea    rcx,[rsi]
  408fbf:	call   405860 <fclose+0x4a>
  408fc4:	or     edi,edi
  408fc6:	je     409007 <__qtoasc+0x141>
  408fc8:	or     edi,edi
  408fca:	jge    408fd1 <__qtoasc+0x10b>
  408fcc:	neg    edi
  408fce:	or     DWORD PTR [rsi],0xffffffff
  408fd1:	mov    DWORD PTR [rsi+0x4],0x80000
  408fd8:	movsxd rbx,edi
  408fdb:	mov    rcx,rbx
  408fde:	call   406980 <p1evll+0x1c>
  408fe3:	mov    DWORD PTR [rbp-0x74],eax
  408fe6:	mov    r12d,eax
  408fe9:	add    r12d,0x1
  408fed:	mov    eax,0x40
  408ff2:	mov    ecx,eax
  408ff4:	sub    ecx,r12d
  408ff7:	shl    rbx,cl
  408ffa:	mov    QWORD PTR [rsi+0x8],rbx
  408ffe:	mov    eax,DWORD PTR [rsi+0x4]
  409001:	add    eax,r12d
  409004:	mov    DWORD PTR [rsi+0x4],eax
  409007:	add    rsp,0xa0
  40900e:	pop    r12
  409010:	pop    rdi
  409011:	pop    rsi
  409012:	pop    rbx
  409013:	leave  
  409014:	ret    
  409015:	nop
  409016:	nop
  409017:	nop
	...
  409020:	push   rbp
  409021:	mov    rbp,rsp
  409024:	push   rbx
  409025:	push   rsi
  409026:	push   rdi
  409027:	sub    rsp,0x8
  40902b:	sub    rsp,0x60
  40902f:	mov    QWORD PTR [rbp+0x28],r9
  409033:	mov    QWORD PTR [rbp+0x20],r8
  409037:	mov    QWORD PTR [rbp+0x18],rdx
  40903b:	mov    QWORD PTR [rbp+0x10],rcx
  40903f:	xor    edi,edi
  409041:	mov    rax,rdx
  409044:	mov    rsi,rax
  409047:	sub    rsi,0x1
  40904b:	xor    eax,eax
  40904d:	cmp    eax,esi
  40904f:	jge    4090b9 <__qtoasc+0x1f3>
  409051:	mov    rcx,QWORD PTR [rbp+0x20]
  409055:	call   405720 <atexit+0x37>
  40905a:	mov    QWORD PTR [rbp-0x28],rax
  40905e:	mov    rbx,rax
  409061:	mov    rax,0x0
  409068:	cmp    rbx,rax
  40906b:	je     40909b <__qtoasc+0x1d5>
  40906d:	mov    r8,QWORD PTR [rbp+0x28]
  409071:	mov    QWORD PTR [rsp+0x28],r8
  409076:	mov    r8,QWORD PTR [rbp+0x20]
  40907a:	mov    QWORD PTR [rsp+0x20],r8
  40907f:	mov    r9d,esi
  409082:	mov    r8d,edi
  409085:	lea    rdx,[rbx]
  409088:	mov    rcx,QWORD PTR [rbp+0x10]
  40908c:	call   4090c6 <__qtoasc+0x200>
  409091:	lea    rcx,[rbx]
  409094:	call   404ef0 <_cinit+0x330>
  409099:	jmp    4090b9 <__qtoasc+0x1f3>
  40909b:	mov    rax,QWORD PTR ds:0x4119c0
  4090a3:	mov    DWORD PTR [rax+0x8],0xe
  4090aa:	mov    rax,QWORD PTR ds:0x4119c0
  4090b2:	mov    DWORD PTR [rax+0xc],0x8
  4090b9:	add    rsp,0x60
  4090bd:	add    rsp,0x8
  4090c1:	pop    rdi
  4090c2:	pop    rsi
  4090c3:	pop    rbx
  4090c4:	leave  
  4090c5:	ret    
  4090c6:	push   rbp
  4090c7:	mov    rbp,rsp
  4090ca:	push   rbx
  4090cb:	push   rsi
  4090cc:	push   rdi
  4090cd:	push   r12
  4090cf:	push   r13
  4090d1:	push   r14
  4090d3:	push   r15
  4090d5:	sub    rsp,0x8
  4090d9:	sub    rsp,0x60
  4090dd:	mov    r14,r9
  4090e0:	mov    r13,r8
  4090e3:	mov    QWORD PTR [rbp+0x18],rdx
  4090e7:	mov    r12,rcx
  4090ea:	mov    rsi,QWORD PTR [rbp+0x30]
  4090ee:	mov    r15,QWORD PTR [rbp+0x38]
  4090f2:	cmp    r13d,r14d
  4090f5:	jge    409206 <__qtoasc+0x340>
  4090fb:	mov    DWORD PTR [rsp+0x28],0x0
  409103:	mov    QWORD PTR [rsp+0x20],rsi
  409108:	mov    eax,r13d
  40910b:	add    eax,r14d
  40910e:	mov    ecx,0x2
  409113:	mov    eax,eax
  409115:	xor    edx,edx
  409117:	test   eax,eax
  409119:	setl   dl
  40911c:	add    eax,edx
  40911e:	sar    eax,1
  409120:	mov    r9d,eax
  409123:	mov    r8d,r13d
  409126:	mov    rdx,QWORD PTR [rbp+0x18]
  40912a:	lea    rcx,[r12]
  40912e:	call   40921b <__qtoasc+0x355>
  409133:	mov    DWORD PTR [rbp-0x44],r13d
  409137:	mov    ebx,r13d
  40913a:	add    ebx,0x1
  40913d:	jmp    40919c <__qtoasc+0x2d6>
  40913f:	mov    eax,r13d
  409142:	mov    rcx,rax
  409145:	imul   rcx,rsi
  409149:	movsxd rax,ecx
  40914c:	mov    rdx,rax
  40914f:	add    rdx,r12
  409152:	push   rdx
  409153:	mov    eax,ebx
  409155:	mov    rcx,rax
  409158:	imul   rcx,rsi
  40915c:	movsxd rax,ecx
  40915f:	mov    rcx,rax
  409162:	add    rcx,r12
  409165:	pop    rdx
  409166:	call   r15
  409169:	mov    DWORD PTR [rbp-0x48],eax
  40916c:	or     eax,eax
  40916e:	jge    409199 <__qtoasc+0x2d3>
  409170:	mov    DWORD PTR [rsp+0x28],0x0
  409178:	mov    QWORD PTR [rsp+0x20],rsi
  40917d:	mov    r9d,ebx
  409180:	mov    edi,DWORD PTR [rbp-0x44]
  409183:	add    edi,0x1
  409186:	mov    DWORD PTR [rbp-0x44],edi
  409189:	mov    r8d,edi
  40918c:	mov    rdx,QWORD PTR [rbp+0x18]
  409190:	lea    rcx,[r12]
  409194:	call   40921b <__qtoasc+0x355>
  409199:	add    ebx,0x1
  40919c:	cmp    ebx,r14d
  40919f:	jle    40913f <__qtoasc+0x279>
  4091a1:	mov    DWORD PTR [rsp+0x28],0x0
  4091a9:	mov    QWORD PTR [rsp+0x20],rsi
  4091ae:	mov    r9d,DWORD PTR [rbp-0x44]
  4091b2:	mov    r8d,r13d
  4091b5:	mov    rdx,QWORD PTR [rbp+0x18]
  4091b9:	lea    rcx,[r12]
  4091bd:	call   40921b <__qtoasc+0x355>
  4091c2:	mov    QWORD PTR [rsp+0x28],r15
  4091c7:	mov    QWORD PTR [rsp+0x20],rsi
  4091cc:	mov    r9d,DWORD PTR [rbp-0x44]
  4091d0:	sub    r9d,0x1
  4091d4:	mov    r8d,r13d
  4091d7:	mov    rdx,QWORD PTR [rbp+0x18]
  4091db:	lea    rcx,[r12]
  4091df:	call   4090c6 <__qtoasc+0x200>
  4091e4:	mov    QWORD PTR [rsp+0x28],r15
  4091e9:	mov    QWORD PTR [rsp+0x20],rsi
  4091ee:	mov    r9d,r14d
  4091f1:	mov    r8d,DWORD PTR [rbp-0x44]
  4091f5:	add    r8d,0x1
  4091f9:	mov    rdx,QWORD PTR [rbp+0x18]
  4091fd:	lea    rcx,[r12]
  409201:	call   4090c6 <__qtoasc+0x200>
  409206:	add    rsp,0x60
  40920a:	add    rsp,0x8
  40920e:	pop    r15
  409210:	pop    r14
  409212:	pop    r13
  409214:	pop    r12
  409216:	pop    rdi
  409217:	pop    rsi
  409218:	pop    rbx
  409219:	leave  
  40921a:	ret    
  40921b:	push   rbp
  40921c:	mov    rbp,rsp
  40921f:	push   rsi
  409220:	push   rdi
  409221:	push   r12
  409223:	sub    rsp,0x8
  409227:	mov    QWORD PTR [rbp+0x28],r9
  40922b:	mov    QWORD PTR [rbp+0x20],r8
  40922f:	mov    r12,rdx
  409232:	mov    QWORD PTR [rbp+0x10],rcx
  409236:	mov    r8,QWORD PTR [rbp+0x30]
  40923a:	movsxd rax,DWORD PTR [rbp+0x20]
  40923e:	mov    rcx,rax
  409241:	imul   rcx,r8
  409245:	movsxd rax,ecx
  409248:	mov    rdi,rax
  40924b:	add    rdi,QWORD PTR [rbp+0x10]
  40924f:	movsxd rax,DWORD PTR [rbp+0x28]
  409253:	mov    rcx,rax
  409256:	imul   rcx,r8
  40925a:	movsxd rax,ecx
  40925d:	mov    rsi,rax
  409260:	add    rsi,QWORD PTR [rbp+0x10]
  409264:	xor    r11d,r11d
  409267:	jmp    409280 <__qtoasc+0x3ba>
  409269:	lea    rax,[r12]
  40926d:	lea    r12,[rax+0x1]
  409271:	lea    rcx,[rdi]
  409274:	lea    rdi,[rcx+0x1]
  409278:	mov    cl,BYTE PTR [rcx]
  40927a:	mov    BYTE PTR [rax],cl
  40927c:	add    r11,0x1
  409280:	cmp    r11,r8
  409283:	jb     409269 <__qtoasc+0x3a3>
  409285:	sub    rdi,r8
  409288:	sub    r12,r8
  40928b:	xor    r11d,r11d
  40928e:	jmp    4092a6 <__qtoasc+0x3e0>
  409290:	lea    rax,[rdi]
  409293:	lea    rdi,[rax+0x1]
  409297:	lea    rcx,[rsi]
  40929a:	lea    rsi,[rcx+0x1]
  40929e:	mov    cl,BYTE PTR [rcx]
  4092a0:	mov    BYTE PTR [rax],cl
  4092a2:	add    r11,0x1
  4092a6:	cmp    r11,r8
  4092a9:	jb     409290 <__qtoasc+0x3ca>
  4092ab:	sub    rsi,r8
  4092ae:	xor    r11d,r11d
  4092b1:	jmp    4092ca <__qtoasc+0x404>
  4092b3:	lea    rax,[rsi]
  4092b6:	lea    rsi,[rax+0x1]
  4092ba:	lea    rcx,[r12]
  4092be:	lea    r12,[rcx+0x1]
  4092c2:	mov    cl,BYTE PTR [rcx]
  4092c4:	mov    BYTE PTR [rax],cl
  4092c6:	add    r11,0x1
  4092ca:	cmp    r11,r8
  4092cd:	jb     4092b3 <__qtoasc+0x3ed>
  4092cf:	add    rsp,0x8
  4092d3:	pop    r12
  4092d5:	pop    rdi
  4092d6:	pop    rsi
  4092d7:	leave  
  4092d8:	ret    
  4092d9:	nop
  4092da:	nop
  4092db:	nop
  4092dc:	add    BYTE PTR [rax],al
  4092de:	add    BYTE PTR [rax],al
  4092e0:	push   rbp
  4092e1:	mov    rbp,rsp
  4092e4:	push   rbx
  4092e5:	push   rsi
  4092e6:	sub    rsp,0x40
  4092ea:	mov    QWORD PTR [rbp+0x10],rcx
  4092ee:	xor    ebx,ebx
  4092f0:	mov    eax,DWORD PTR [rbp+0x10]
  4092f3:	cmp    eax,0x1
  4092f6:	jl     40936e <__qtoasc+0x4a8>
  4092f8:	cmp    eax,0x7
  4092fb:	jg     40936e <__qtoasc+0x4a8>
  4092fd:	sub    eax,0x1
  409300:	movsxd rax,eax
  409303:	jmp    QWORD PTR [rax*8+0x414730]
  40930a:	mov    rax,QWORD PTR ds:0x4119c0
  409312:	mov    rax,QWORD PTR [rax+0x68]
  409316:	mov    QWORD PTR [rbp-0x18],rax
  40931a:	mov    eax,DWORD PTR [rbp+0x10]
  40931d:	sub    eax,0x1
  409320:	movsxd rax,eax
  409323:	mov    rcx,QWORD PTR [rbp-0x18]
  409327:	lea    rax,[rcx+rax*4]
  40932b:	mov    QWORD PTR [rbp-0x18],rax
  40932f:	mov    eax,DWORD PTR [rax]
  409331:	mov    rcx,0x0
  409338:	cmp    rax,rcx
  40933b:	jne    40934b <__qtoasc+0x485>
  40933d:	mov    rcx,0x3
  409344:	call   40467b <ExpandFileName+0x106>
  409349:	jmp    409373 <__qtoasc+0x4ad>
  40934b:	mov    rax,QWORD PTR [rbp-0x18]
  40934f:	mov    eax,DWORD PTR [rax]
  409351:	mov    rcx,0x1
  409358:	cmp    rax,rcx
  40935b:	je     409373 <__qtoasc+0x4ad>
  40935d:	mov    ecx,DWORD PTR [rbp+0x10]
  409360:	mov    rax,QWORD PTR [rbp-0x18]
  409364:	mov    eax,DWORD PTR [rax]
  409366:	mov    QWORD PTR [rbp-0x20],rax
  40936a:	call   rax
  40936c:	jmp    409373 <__qtoasc+0x4ad>
  40936e:	mov    ebx,0xffffffff
  409373:	mov    eax,ebx
  409375:	add    rsp,0x40
  409379:	pop    rsi
  40937a:	pop    rbx
  40937b:	leave  
  40937c:	ret    
  40937d:	nop
  40937e:	nop
  40937f:	nop
  409380:	push   rbp
  409381:	mov    rbp,rsp
  409384:	push   rbx
  409385:	push   rsi
  409386:	sub    rsp,0x40
  40938a:	mov    QWORD PTR [rbp+0x10],rcx
  40938e:	xor    esi,esi
  409390:	mov    rcx,QWORD PTR [rbp+0x10]
  409394:	call   QWORD PTR ds:0x41619c
  40939b:	mov    DWORD PTR [rbp-0x14],eax
  40939e:	mov    ebx,eax
  4093a0:	or     ebx,ebx
  4093a2:	je     4093a8 <__qtoasc+0x4e2>
  4093a4:	xor    ebx,ebx
  4093a6:	jmp    4093b4 <__qtoasc+0x4ee>
  4093a8:	call   QWORD PTR ds:0x4161a4
  4093af:	mov    DWORD PTR [rbp-0x18],eax
  4093b2:	mov    ebx,eax
  4093b4:	or     ebx,ebx
  4093b6:	je     4093f2 <__qtoasc+0x52c>
  4093b8:	mov    esi,0xffffffff
  4093bd:	mov    rax,QWORD PTR ds:0x4119c0
  4093c5:	mov    DWORD PTR [rax+0xc],ebx
  4093c8:	cmp    ebx,0x2
  4093cb:	je     4093d2 <__qtoasc+0x50c>
  4093cd:	cmp    ebx,0x3
  4093d0:	jne    4093e3 <__qtoasc+0x51d>
  4093d2:	mov    rax,QWORD PTR ds:0x4119c0
  4093da:	mov    DWORD PTR [rax+0x8],0x4
  4093e1:	jmp    4093f2 <__qtoasc+0x52c>
  4093e3:	mov    rax,QWORD PTR ds:0x4119c0
  4093eb:	mov    DWORD PTR [rax+0x8],0xf
  4093f2:	mov    eax,esi
  4093f4:	add    rsp,0x40
  4093f8:	pop    rsi
  4093f9:	pop    rbx
  4093fa:	leave  
  4093fb:	ret    
  4093fc:	push   rbp
  4093fd:	mov    rbp,rsp
  409400:	push   rbx
  409401:	sub    rsp,0x8
  409405:	sub    rsp,0x30
  409409:	mov    rbx,rcx
  40940c:	lea    rcx,[rbx]
  40940f:	call   409380 <__qtoasc+0x4ba>
  409414:	add    rsp,0x30
  409418:	add    rsp,0x8
  40941c:	pop    rbx
  40941d:	leave  
  40941e:	ret    
  40941f:	nop
  409420:	push   rbp
  409421:	mov    rbp,rsp
  409424:	push   rbx
  409425:	push   rsi
  409426:	sub    rsp,0x40
  40942a:	mov    rbx,rdx
  40942d:	mov    QWORD PTR [rbp+0x10],rcx
  409431:	mov    rax,0x0
  409438:	cmp    rbx,rax
  40943b:	jne    409471 <__qtoasc+0x5ab>
  40943d:	mov    eax,DWORD PTR [rbp+0x10]
  409440:	or     eax,eax
  409442:	jl     409465 <__qtoasc+0x59f>
  409444:	cmp    eax,0x5
  409447:	jg     409465 <__qtoasc+0x59f>
  409449:	movsxd rax,DWORD PTR [rbp+0x10]
  40944d:	mov    rcx,QWORD PTR ds:0x4119c0
  409455:	lea    rcx,[rcx+0x110]
  40945c:	mov    rsi,QWORD PTR [rcx+rax*8]
  409460:	jmp    4094f9 <__qtoasc+0x633>
  409465:	mov    rsi,0x0
  40946c:	jmp    4094f9 <__qtoasc+0x633>
  409471:	mov    eax,DWORD PTR [rbp+0x10]
  409474:	or     eax,eax
  409476:	jne    4094e7 <__qtoasc+0x621>
  409478:	lea    rdx,[rbx]
  40947b:	mov    rcx,0x1
  409482:	call   40950c <__qtoasc+0x646>
  409487:	mov    QWORD PTR [rbp-0x18],rax
  40948b:	mov    rsi,rax
  40948e:	mov    rax,0x0
  409495:	cmp    rsi,rax
  409498:	je     4094f9 <__qtoasc+0x633>
  40949a:	lea    rdx,[rbx]
  40949d:	mov    rcx,0x2
  4094a4:	call   40950c <__qtoasc+0x646>
  4094a9:	lea    rdx,[rbx]
  4094ac:	mov    rcx,0x4
  4094b3:	call   40950c <__qtoasc+0x646>
  4094b8:	lea    rdx,[rbx]
  4094bb:	mov    rcx,0x3
  4094c2:	call   40950c <__qtoasc+0x646>
  4094c7:	lea    rdx,[rbx]
  4094ca:	mov    rcx,0x5
  4094d1:	call   40950c <__qtoasc+0x646>
  4094d6:	mov    rax,QWORD PTR ds:0x4119c0
  4094de:	mov    QWORD PTR [rax+0x110],rsi
  4094e5:	jmp    4094f9 <__qtoasc+0x633>
  4094e7:	lea    rdx,[rbx]
  4094ea:	mov    ecx,DWORD PTR [rbp+0x10]
  4094ed:	call   40950c <__qtoasc+0x646>
  4094f2:	mov    QWORD PTR [rbp-0x18],rax
  4094f6:	mov    rsi,rax
  4094f9:	mov    QWORD PTR ds:0x411a10,rbx
  409501:	lea    rax,[rsi]
  409504:	add    rsp,0x40
  409508:	pop    rsi
  409509:	pop    rbx
  40950a:	leave  
  40950b:	ret    
  40950c:	push   rbp
  40950d:	mov    rbp,rsp
  409510:	push   rbx
  409511:	push   rsi
  409512:	push   rdi
  409513:	sub    rsp,0x8
  409517:	sub    rsp,0x50
  40951b:	mov    rbx,rdx
  40951e:	mov    QWORD PTR [rbp+0x10],rcx
  409522:	mov    rsi,0x0
  409529:	lea    rdx,ds:0x414b62
  409531:	lea    rcx,[rbx]
  409534:	call   40ae60 <_setlocale+0x954>
  409539:	mov    DWORD PTR [rbp-0x24],eax
  40953c:	or     eax,eax
  40953e:	je     409572 <__qtoasc+0x6ac>
  409540:	lea    rdx,ds:0x414b5e
  409548:	lea    rcx,[rbx]
  40954b:	call   40ae60 <_setlocale+0x954>
  409550:	mov    DWORD PTR [rbp-0x28],eax
  409553:	or     eax,eax
  409555:	je     409572 <__qtoasc+0x6ac>
  409557:	lea    rdx,ds:0x414b5b
  40955f:	lea    rcx,[rbx]
  409562:	call   40ae60 <_setlocale+0x954>
  409567:	mov    DWORD PTR [rbp-0x2c],eax
  40956a:	or     eax,eax
  40956c:	jne    409b8d <__asctoq+0x435>
  409572:	mov    eax,DWORD PTR [rbp+0x10]
  409575:	cmp    eax,0x1
  409578:	jl     40abdc <_setlocale+0x6d0>
  40957e:	cmp    eax,0x5
  409581:	jg     40abdc <_setlocale+0x6d0>
  409587:	sub    eax,0x1
  40958a:	movsxd rax,eax
  40958d:	jmp    QWORD PTR [rax*8+0x414770]
  409594:	lea    rsi,[rbx]
  409597:	mov    rax,QWORD PTR ds:0x4119c0
  40959f:	mov    QWORD PTR [rax+0x118],rsi
  4095a6:	jmp    40abdc <_setlocale+0x6d0>
  4095ab:	lea    rsi,[rbx]
  4095ae:	mov    rax,QWORD PTR ds:0x4119c0
  4095b6:	mov    QWORD PTR [rax+0x120],rsi
  4095bd:	jmp    40abdc <_setlocale+0x6d0>
  4095c2:	lea    rsi,[rbx]
  4095c5:	mov    rax,QWORD PTR ds:0x4119c0
  4095cd:	mov    QWORD PTR [rax+0x130],rsi
  4095d4:	lea    rdx,ds:0x414b62
  4095dc:	lea    rcx,[rbx]
  4095df:	call   40ae60 <_setlocale+0x954>
  4095e4:	mov    DWORD PTR [rbp-0x30],eax
  4095e7:	or     eax,eax
  4095e9:	jne    40970d <__qcmp+0xca>
  4095ef:	mov    rax,QWORD PTR ds:0x4119c0
  4095f7:	lea    rcx,ds:0x414b5a
  4095ff:	mov    QWORD PTR [rax+0xd0],rcx
  409606:	mov    rax,QWORD PTR ds:0x4119c0
  40960e:	lea    rcx,ds:0x414b5a
  409616:	mov    QWORD PTR [rax+0xd8],rcx
  40961d:	mov    rax,QWORD PTR ds:0x4119c0
  409625:	lea    rcx,ds:0x414b5a
  40962d:	mov    QWORD PTR [rax+0xe0],rcx
  409634:	mov    rax,QWORD PTR ds:0x4119c0
  40963c:	rex.W
  40963d:	.byte 0x8d
  40963e:	or     al,0x25
  409640:	pop    rdx
  409641:	rex.WXB
  409642:	rex.B

0000000000409643 <__qcmp>:
  409643:	add    BYTE PTR [rax-0x77],cl
  409646:	mov    al,ch
  409648:	add    BYTE PTR [rax],al
  40964a:	add    BYTE PTR [rax-0x75],cl
  40964d:	add    al,0x25
  40964f:	rcr    BYTE PTR [rcx],0x41
  409652:	add    BYTE PTR [rax-0x73],cl
  409655:	or     al,0x25
  409657:	pop    rdx
  409658:	rex.WXB
  409659:	add    BYTE PTR [r8-0x77],cl
  40965d:	mov    al,dh
  40965f:	add    BYTE PTR [rax],al
  409661:	add    BYTE PTR [rax-0x75],cl
  409664:	add    al,0x25
  409666:	rcr    BYTE PTR [rcx],0x41
  409669:	add    BYTE PTR [rax-0x73],cl
  40966c:	or     al,0x25
  40966e:	pop    rdx
  40966f:	rex.WXB
  409670:	add    BYTE PTR [r8-0x77],cl
  409674:	mov    al,bh
  409676:	add    BYTE PTR [rax],al
  409678:	add    BYTE PTR [rax-0x75],cl
  40967b:	add    al,0x25
  40967d:	rcr    BYTE PTR [rcx],0x41
  409680:	add    BYTE PTR [rax-0x73],cl
  409683:	or     al,0x25
  409685:	pop    rdx
  409686:	rex.WXB
  409687:	add    BYTE PTR [r8-0x77],cl
  40968b:	mov    BYTE PTR [rax],al
  40968d:	add    DWORD PTR [rax],eax
  40968f:	add    BYTE PTR [rax-0x75],cl
  409692:	add    al,0x25
  409694:	rcr    BYTE PTR [rcx],0x41
  409697:	add    dh,al
  409699:	or     BYTE PTR [rcx],0x1
  40969c:	add    BYTE PTR [rax],al
  40969e:	jg     4096e8 <__qcmp+0xa5>
  4096a0:	mov    eax,DWORD PTR ds:0x4119c0
  4096a7:	mov    BYTE PTR [rax+0x108],0x7f
  4096ae:	mov    rax,QWORD PTR ds:0x4119c0
  4096b6:	mov    BYTE PTR [rax+0x10a],0x7f
  4096bd:	mov    rax,QWORD PTR ds:0x4119c0
  4096c5:	mov    BYTE PTR [rax+0x10b],0x7f
  4096cc:	mov    rax,QWORD PTR ds:0x4119c0
  4096d4:	mov    BYTE PTR [rax+0x10c],0x7f
  4096db:	mov    rax,QWORD PTR ds:0x4119c0
  4096e3:	mov    BYTE PTR [rax+0x10d],0x7f
  4096ea:	mov    rax,QWORD PTR ds:0x4119c0
  4096f2:	mov    BYTE PTR [rax+0x10e],0x7f
  4096f9:	mov    rax,QWORD PTR ds:0x4119c0
  409701:	mov    BYTE PTR [rax+0x10f],0x7f
  409708:	jmp    40abdc <_setlocale+0x6d0>
  40970d:	lea    rdx,ds:0x414b5e
  409715:	lea    rcx,[rbx]
  409718:	call   40ae60 <_setlocale+0x954>
  40971d:	mov    DWORD PTR [rbp-0x34],eax
  409720:	or     eax,eax
  409722:	jne    40973d <__qcmp+0xfa>
  409724:	mov    rax,QWORD PTR ds:0x4119c0
  40972c:	lea    rcx,ds:0x414b56
  409734:	mov    QWORD PTR [rax+0xd0],rcx
  40973b:	jmp    409754 <__qcmp+0x111>
  40973d:	mov    rax,QWORD PTR ds:0x4119c0
  409745:	lea    rcx,ds:0x414b52
  40974d:	mov    QWORD PTR [rax+0xd0],rcx
  409754:	rex.W
  409755:	.byte 0x8b
  409756:	add    al,0x25

0000000000409758 <__asctoq>:
  409758:	rcr    BYTE PTR [rcx],0x41
  40975b:	add    BYTE PTR [rax-0x73],cl
  40975e:	or     al,0x25
  409760:	push   rax
  409761:	rex.WXB
  409762:	add    BYTE PTR [r8-0x77],cl
  409766:	mov    al,bl
  409768:	add    BYTE PTR [rax],al
  40976a:	add    BYTE PTR [rax-0x75],cl
  40976d:	add    al,0x25
  40976f:	rcr    BYTE PTR [rcx],0x41
  409772:	add    BYTE PTR [rax-0x73],cl
  409775:	or     al,0x25
  409777:	rex.WRX
  409778:	rex.WXB
  409779:	add    BYTE PTR [r8-0x77],cl
  40977d:	mov    al,ah
  40977f:	add    BYTE PTR [rax],al
  409781:	add    BYTE PTR [rax-0x75],cl
  409784:	add    al,0x25
  409786:	rcr    BYTE PTR [rcx],0x41
  409789:	add    BYTE PTR [rax-0x73],cl
  40978c:	or     al,0x25
  40978e:	rex.WR
  40978f:	rex.WXB
  409790:	add    BYTE PTR [r8-0x77],cl
  409794:	mov    al,ch
  409796:	add    BYTE PTR [rax],al
  409798:	add    BYTE PTR [rax-0x75],cl
  40979b:	add    al,0x25
  40979d:	rcr    BYTE PTR [rcx],0x41
  4097a0:	add    BYTE PTR [rax-0x73],cl
  4097a3:	or     al,0x25
  4097a5:	rex.WX
  4097a6:	rex.WXB
  4097a7:	add    BYTE PTR [r8-0x77],cl
  4097ab:	mov    al,dh
  4097ad:	add    BYTE PTR [rax],al
  4097af:	add    BYTE PTR [rax-0x75],cl
  4097b2:	add    al,0x25
  4097b4:	rcr    BYTE PTR [rcx],0x41
  4097b7:	add    BYTE PTR [rax-0x73],cl
  4097ba:	or     al,0x25
  4097bc:	pop    rdx
  4097bd:	rex.WXB
  4097be:	add    BYTE PTR [r8-0x77],cl
  4097c2:	mov    al,bh
  4097c4:	add    BYTE PTR [rax],al
  4097c6:	add    BYTE PTR [rax-0x75],cl
  4097c9:	add    al,0x25
  4097cb:	rcr    BYTE PTR [rcx],0x41
  4097ce:	add    BYTE PTR [rax-0x73],cl
  4097d1:	or     al,0x25
  4097d3:	rex.W
  4097d4:	rex.WXB
  4097d5:	add    BYTE PTR [r8-0x77],cl
  4097d9:	mov    BYTE PTR [rax],al
  4097db:	add    DWORD PTR [rax],eax
  4097dd:	add    BYTE PTR [rax-0x75],cl
  4097e0:	add    al,0x25
  4097e2:	rcr    BYTE PTR [rcx],0x41
  4097e5:	add    dh,al
  4097e7:	or     BYTE PTR [rcx],0x1
  4097ea:	add    BYTE PTR [rax],al
  4097ec:	add    cl,BYTE PTR [rax-0x75]
  4097ef:	add    al,0x25
  4097f1:	rcr    BYTE PTR [rcx],0x41
  4097f4:	add    dh,al
  4097f6:	or     BYTE PTR [rax],0x1
  4097f9:	add    BYTE PTR [rax],al
  4097fb:	add    cl,BYTE PTR [rax-0x75]
  4097fe:	add    al,0x25
  409800:	rcr    BYTE PTR [rcx],0x41
  409803:	add    dh,al
  409805:	or     BYTE PTR [rdx],0x1
  409808:	add    BYTE PTR [rax],al
  40980a:	add    DWORD PTR [rax-0x75],ecx
  40980d:	add    al,0x25
  40980f:	rcr    BYTE PTR [rcx],0x41
  409812:	add    dh,al
  409814:	or     BYTE PTR [rbx],0x1
  409817:	add    BYTE PTR [rax],al
  409819:	add    BYTE PTR [rax-0x75],cl
  40981c:	add    al,0x25
  40981e:	rcr    BYTE PTR [rcx],0x41
  409821:	add    dh,al
  409823:	or     BYTE PTR [rcx+rax*1],0x0
  409827:	add    BYTE PTR [rcx],al
  409829:	mov    rax,QWORD PTR ds:0x4119c0
  409831:	mov    BYTE PTR [rax+0x10d],0x0
  409838:	mov    rax,QWORD PTR ds:0x4119c0
  409840:	mov    BYTE PTR [rax+0x10e],0x1
  409847:	mov    rax,QWORD PTR ds:0x4119c0
  40984f:	mov    BYTE PTR [rax+0x10f],0x1
  409856:	jmp    40abdc <_setlocale+0x6d0>
  40985b:	lea    rsi,[rbx]
  40985e:	mov    rax,QWORD PTR ds:0x4119c0
  409866:	mov    QWORD PTR [rax+0x128],rsi
  40986d:	mov    rax,QWORD PTR ds:0x4119c0
  409875:	lea    rcx,ds:0x414b4e
  40987d:	mov    QWORD PTR [rax+0xb8],rcx
  409884:	lea    rdx,ds:0x414b62
  40988c:	lea    rcx,[rbx]
  40988f:	call   40ae60 <_setlocale+0x954>
  409894:	mov    DWORD PTR [rbp-0x34],eax
  409897:	or     eax,eax
  409899:	jne    4098ce <__asctoq+0x176>
  40989b:	mov    rax,QWORD PTR ds:0x4119c0
  4098a3:	lea    rcx,ds:0x414b5a
  4098ab:	mov    QWORD PTR [rax+0xc0],rcx
  4098b2:	mov    rax,QWORD PTR ds:0x4119c0
  4098ba:	lea    rcx,ds:0x414b5a
  4098c2:	mov    QWORD PTR [rax+0xc8],rcx
  4098c9:	jmp    40abdc <_setlocale+0x6d0>
  4098ce:	mov    rax,QWORD PTR ds:0x4119c0
  4098d6:	lea    rcx,ds:0x414b4c
  4098de:	mov    QWORD PTR [rax+0xc0],rcx
  4098e5:	mov    rax,QWORD PTR ds:0x4119c0
  4098ed:	lea    rcx,ds:0x414b4a
  4098f5:	mov    QWORD PTR [rax+0xc8],rcx
  4098fc:	jmp    40abdc <_setlocale+0x6d0>
  409901:	mov    rax,QWORD PTR ds:0x4119c0
  409909:	lea    rcx,ds:0x414b41
  409911:	mov    QWORD PTR [rax+0x140],rcx
  409918:	mov    rax,QWORD PTR ds:0x4119c0
  409920:	lea    rcx,ds:0x414b3a
  409928:	mov    QWORD PTR [rax+0x148],rcx
  40992f:	mov    rax,QWORD PTR ds:0x4119c0
  409937:	lea    rcx,ds:0x414b32
  40993f:	mov    QWORD PTR [rax+0x150],rcx
  409946:	mov    rax,QWORD PTR ds:0x4119c0
  40994e:	lea    rcx,ds:0x414b28
  409956:	mov    QWORD PTR [rax+0x158],rcx
  40995d:	mov    rax,QWORD PTR ds:0x4119c0
  409965:	lea    rcx,ds:0x414b1f
  40996d:	mov    QWORD PTR [rax+0x160],rcx
  409974:	mov    rax,QWORD PTR ds:0x4119c0
  40997c:	lea    rcx,ds:0x414b18
  409984:	mov    QWORD PTR [rax+0x168],rcx
  40998b:	mov    rax,QWORD PTR ds:0x4119c0
  409993:	lea    rcx,ds:0x414b0f
  40999b:	mov    QWORD PTR [rax+0x170],rcx
  4099a2:	mov    rax,QWORD PTR ds:0x4119c0
  4099aa:	lea    rcx,ds:0x414b07
  4099b2:	mov    QWORD PTR [rax+0x178],rcx
  4099b9:	mov    rax,QWORD PTR ds:0x4119c0
  4099c1:	lea    rcx,ds:0x414afe
  4099c9:	mov    QWORD PTR [rax+0x180],rcx
  4099d0:	mov    rax,QWORD PTR ds:0x4119c0
  4099d8:	lea    rcx,ds:0x414af8
  4099e0:	mov    QWORD PTR [rax+0x188],rcx
  4099e7:	mov    rax,QWORD PTR ds:0x4119c0
  4099ef:	lea    rcx,ds:0x414af2
  4099f7:	mov    QWORD PTR [rax+0x190],rcx
  4099fe:	mov    rax,QWORD PTR ds:0x4119c0
  409a06:	lea    rcx,ds:0x414aee
  409a0e:	mov    QWORD PTR [rax+0x198],rcx
  409a15:	mov    rax,QWORD PTR ds:0x4119c0
  409a1d:	lea    rcx,ds:0x414ae9
  409a25:	mov    QWORD PTR [rax+0x1a0],rcx
  409a2c:	mov    rax,QWORD PTR ds:0x4119c0
  409a34:	lea    rcx,ds:0x414ae4
  409a3c:	mov    QWORD PTR [rax+0x1a8],rcx
  409a43:	mov    rax,QWORD PTR ds:0x4119c0
  409a4b:	lea    rcx,ds:0x414add
  409a53:	mov    QWORD PTR [rax+0x1b0],rcx
  409a5a:	mov    rax,QWORD PTR ds:0x4119c0
  409a62:	lea    rcx,ds:0x414ad3
  409a6a:	mov    QWORD PTR [rax+0x1b8],rcx
  409a71:	mov    rax,QWORD PTR ds:0x4119c0
  409a79:	lea    rcx,ds:0x414acb
  409a81:	mov    QWORD PTR [rax+0x1c0],rcx
  409a88:	mov    rax,QWORD PTR ds:0x4119c0
  409a90:	lea    rcx,ds:0x414ac2
  409a98:	mov    QWORD PTR [rax+0x1c8],rcx
  409a9f:	mov    rax,QWORD PTR ds:0x4119c0
  409aa7:	lea    rcx,ds:0x414ab9
  409aaf:	mov    QWORD PTR [rax+0x1d0],rcx
  409ab6:	lea    rsi,[rbx]
  409ab9:	mov    rax,QWORD PTR ds:0x4119c0
  409ac1:	mov    QWORD PTR [rax+0x138],rsi
  409ac8:	lea    rdx,ds:0x414b5b
  409ad0:	lea    rcx,[rbx]
  409ad3:	call   40ae60 <_setlocale+0x954>
  409ad8:	mov    DWORD PTR [rbp-0x38],eax
  409adb:	or     eax,eax
  409add:	jne    409b36 <__asctoq+0x3de>
  409adf:	mov    rax,QWORD PTR ds:0x4119c0
  409ae7:	mov    DWORD PTR [rax+0x8c],0x0
  409af1:	mov    rax,QWORD PTR ds:0x4119c0
  409af9:	mov    DWORD PTR [rax+0x90],0x0
  409b03:	mov    rax,QWORD PTR ds:0x4119c0
  409b0b:	lea    rcx,ds:0x414ab7
  409b13:	mov    QWORD PTR [rax+0x98],rcx
  409b1a:	mov    rax,QWORD PTR ds:0x4119c0
  409b22:	lea    rcx,ds:0x414ab7
  409b2a:	mov    QWORD PTR [rax+0xa0],rcx
  409b31:	jmp    40abdc <_setlocale+0x6d0>
  409b36:	mov    rax,QWORD PTR ds:0x4119c0
  409b3e:	mov    DWORD PTR [rax+0x8c],0x1
  409b48:	mov    rax,QWORD PTR ds:0x4119c0
  409b50:	mov    DWORD PTR [rax+0x90],0x4650
  409b5a:	mov    rax,QWORD PTR ds:0x4119c0
  409b62:	lea    rcx,ds:0x414ab3
  409b6a:	mov    QWORD PTR [rax+0x98],rcx
  409b71:	mov    rax,QWORD PTR ds:0x4119c0
  409b79:	lea    rcx,ds:0x414aaf
  409b81:	mov    QWORD PTR [rax+0xa0],rcx
  409b88:	jmp    40abdc <_setlocale+0x6d0>
  409b8d:	lea    rdx,ds:0x414aa8
  409b95:	lea    rcx,[rbx]
  409b98:	call   40ae60 <_setlocale+0x954>
  409b9d:	mov    DWORD PTR [rbp-0x30],eax
  409ba0:	or     eax,eax
  409ba2:	jne    409fa2 <__itoq+0x5>
  409ba8:	mov    eax,DWORD PTR [rbp+0x10]
  409bab:	cmp    eax,0x1
  409bae:	jl     40abdc <_setlocale+0x6d0>
  409bb4:	cmp    eax,0x5
  409bb7:	jg     40abdc <_setlocale+0x6d0>
  409bbd:	sub    eax,0x1
  409bc0:	movsxd rax,eax
  409bc3:	jmp    QWORD PTR [rax*8+0x4147a0]
  409bca:	lea    rsi,[rbx]
  409bcd:	mov    rax,QWORD PTR ds:0x4119c0
  409bd5:	mov    QWORD PTR [rax+0x118],rsi
  409bdc:	jmp    40abdc <_setlocale+0x6d0>
  409be1:	lea    rsi,[rbx]
  409be4:	mov    rax,QWORD PTR ds:0x4119c0
  409bec:	mov    QWORD PTR [rax+0x120],rsi
  409bf3:	jmp    40abdc <_setlocale+0x6d0>
  409bf8:	lea    rsi,[rbx]
  409bfb:	mov    rax,QWORD PTR ds:0x4119c0
  409c03:	mov    QWORD PTR [rax+0x130],rsi
  409c0a:	mov    rax,QWORD PTR ds:0x4119c0
  409c12:	lea    rcx,ds:0x414aa4
  409c1a:	mov    QWORD PTR [rax+0xd0],rcx
  409c21:	mov    rax,QWORD PTR ds:0x4119c0
  409c29:	lea    rcx,ds:0x414aa2
  409c31:	mov    QWORD PTR [rax+0xd8],rcx
  409c38:	mov    rax,QWORD PTR ds:0x4119c0
  409c40:	lea    rcx,ds:0x414b4c
  409c48:	mov    QWORD PTR [rax+0xe0],rcx
  409c4f:	mov    rax,QWORD PTR ds:0x4119c0
  409c57:	lea    rcx,ds:0x414b4e
  409c5f:	mov    QWORD PTR [rax+0xe8],rcx
  409c66:	mov    rax,QWORD PTR ds:0x4119c0
  409c6e:	lea    rcx,ds:0x414b4a
  409c76:	mov    QWORD PTR [rax+0xf0],rcx
  409c7d:	mov    rax,QWORD PTR ds:0x4119c0
  409c85:	lea    rcx,ds:0x414b5a
  409c8d:	mov    QWORD PTR [rax+0xf8],rcx
  409c94:	mov    rax,QWORD PTR ds:0x4119c0
  409c9c:	lea    rcx,ds:0x414b48
  409ca4:	mov    QWORD PTR [rax+0x100],rcx
  409cab:	mov    rax,QWORD PTR ds:0x4119c0
  409cb3:	mov    BYTE PTR [rax+0x109],0x2
  409cba:	mov    rax,QWORD PTR ds:0x4119c0
  409cc2:	mov    BYTE PTR [rax+0x108],0x2
  409cc9:	mov    rax,QWORD PTR ds:0x4119c0
  409cd1:	.byte 0xc6
  409cd2:	or     BYTE PTR [rdx],0x1
	...

0000000000409cd6 <__qtoe64>:
  409cd6:	add    BYTE PTR [rax],al
  409cd8:	mov    rax,QWORD PTR ds:0x4119c0
  409ce0:	mov    BYTE PTR [rax+0x10b],0x1
  409ce7:	mov    rax,QWORD PTR ds:0x4119c0
  409cef:	mov    BYTE PTR [rax+0x10c],0x0
  409cf6:	mov    rax,QWORD PTR ds:0x4119c0
  409cfe:	mov    BYTE PTR [rax+0x10d],0x1
  409d05:	mov    rax,QWORD PTR ds:0x4119c0
  409d0d:	mov    BYTE PTR [rax+0x10e],0x1
  409d14:	mov    rax,QWORD PTR ds:0x4119c0
  409d1c:	mov    BYTE PTR [rax+0x10f],0x1
  409d23:	jmp    40abdc <_setlocale+0x6d0>
  409d28:	lea    rsi,[rbx]
  409d2b:	mov    rax,QWORD PTR ds:0x4119c0
  409d33:	mov    QWORD PTR [rax+0x128],rsi
  409d3a:	mov    rax,QWORD PTR ds:0x4119c0
  409d42:	lea    rcx,ds:0x414b4c
  409d4a:	mov    QWORD PTR [rax+0xb8],rcx
  409d51:	mov    rax,QWORD PTR ds:0x4119c0
  409d59:	lea    rcx,ds:0x414b5a
  409d61:	mov    QWORD PTR [rax+0xc0],rcx
  409d68:	mov    rax,QWORD PTR ds:0x4119c0
  409d70:	lea    rcx,ds:0x414b4a
  409d78:	mov    QWORD PTR [rax+0xc8],rcx
  409d7f:	jmp    40abdc <_setlocale+0x6d0>
  409d84:	mov    rax,QWORD PTR ds:0x4119c0
  409d8c:	lea    rcx,ds:0x414a99
  409d94:	mov    QWORD PTR [rax+0x140],rcx
  409d9b:	mov    rax,QWORD PTR ds:0x4119c0
  409da3:	lea    rcx,ds:0x414a93
  409dab:	mov    QWORD PTR [rax+0x148],rcx
  409db2:	mov    rax,QWORD PTR ds:0x4119c0
  409dba:	lea    rcx,ds:0x414a8d
  409dc2:	mov    QWORD PTR [rax+0x150],rcx
  409dc9:	mov    rax,QWORD PTR ds:0x4119c0
  409dd1:	lea    rcx,ds:0x414a84
  409dd9:	mov    QWORD PTR [rax+0x158],rcx
  409de0:	mov    rax,QWORD PTR ds:0x4119c0
  409de8:	lea    rcx,ds:0x414a7e
  409df0:	mov    QWORD PTR [rax+0x160],rcx
  409df7:	mov    rax,QWORD PTR ds:0x4119c0
  409dff:	lea    rcx,ds:0x414a75
  409e07:	mov    QWORD PTR [rax+0x168],rcx
  409e0e:	mov    rax,QWORD PTR ds:0x4119c0
  409e16:	lea    rcx,ds:0x414a6e
  409e1e:	mov    QWORD PTR [rax+0x170],rcx
  409e25:	mov    rax,QWORD PTR ds:0x4119c0
  409e2d:	lea    rcx,ds:0x414a66
  409e35:	mov    QWORD PTR [rax+0x178],rcx
  409e3c:	mov    rax,QWORD PTR ds:0x4119c0
  409e44:	rex.W
  409e45:	.byte 0x8d

0000000000409e46 <__normalize>:
  409e46:	or     al,0x25
  409e48:	pop    rsi
  409e49:	rex.WX
  409e4a:	add    BYTE PTR [r8-0x77],cl
  409e4e:	mov    BYTE PTR [rax+0x48000001],al
  409e54:	mov    eax,DWORD PTR ds:0x4119c0
  409e5b:	lea    rcx,ds:0x414a59
  409e63:	mov    QWORD PTR [rax+0x188],rcx
  409e6a:	mov    rax,QWORD PTR ds:0x4119c0
  409e72:	lea    rcx,ds:0x414a53
  409e7a:	mov    QWORD PTR [rax+0x190],rcx
  409e81:	mov    rax,QWORD PTR ds:0x4119c0
  409e89:	lea    rcx,ds:0x414a4f
  409e91:	mov    QWORD PTR [rax+0x198],rcx
  409e98:	mov    rax,QWORD PTR ds:0x4119c0
  409ea0:	lea    rcx,ds:0x414a4a
  409ea8:	mov    QWORD PTR [rax+0x1a0],rcx
  409eaf:	mov    rax,QWORD PTR ds:0x4119c0
  409eb7:	lea    rcx,ds:0x414a42
  409ebf:	mov    QWORD PTR [rax+0x1a8],rcx
  409ec6:	rex.W
  409ec7:	.byte 0x8b
  409ec8:	add    al,0x25
  409eca:	rcr    BYTE PTR [rcx],0x41

0000000000409ecd <__e64toq>:
  409ecd:	add    BYTE PTR [rax-0x73],cl
  409ed0:	or     al,0x25
  409ed2:	cmp    eax,0x4800414a
  409ed7:	mov    DWORD PTR [rax+0x1b0],ecx
  409edd:	mov    rax,QWORD PTR ds:0x4119c0
  409ee5:	lea    rcx,ds:0x414a33
  409eed:	mov    QWORD PTR [rax+0x1b8],rcx
  409ef4:	mov    rax,QWORD PTR ds:0x4119c0
  409efc:	lea    rcx,ds:0x414a2b
  409f04:	mov    QWORD PTR [rax+0x1c0],rcx
  409f0b:	mov    rax,QWORD PTR ds:0x4119c0
  409f13:	lea    rcx,ds:0x414a22
  409f1b:	mov    QWORD PTR [rax+0x1c8],rcx
  409f22:	mov    rax,QWORD PTR ds:0x4119c0
  409f2a:	lea    rcx,ds:0x414a19
  409f32:	mov    QWORD PTR [rax+0x1d0],rcx
  409f39:	lea    rsi,[rbx]
  409f3c:	mov    rax,QWORD PTR ds:0x4119c0
  409f44:	mov    QWORD PTR [rax+0x138],rsi
  409f4b:	mov    rax,QWORD PTR ds:0x4119c0
  409f53:	mov    DWORD PTR [rax+0x8c],0x0
  409f5d:	mov    rax,QWORD PTR ds:0x4119c0
  409f65:	mov    DWORD PTR [rax+0x90],0x0
  409f6f:	mov    rax,QWORD PTR ds:0x4119c0
  409f77:	lea    rcx,ds:0x414ab7
  409f7f:	mov    QWORD PTR [rax+0x98],rcx
  409f86:	mov    rax,QWORD PTR ds:0x4119c0
  409f8e:	lea    rcx,ds:0x414ab7
  409f96:	mov    QWORD PTR [rax+0xa0],rcx

0000000000409f9d <__itoq>:
  409f9d:	jmp    40abdc <_setlocale+0x6d0>
  409fa2:	lea    rdx,ds:0x414a11
  409faa:	lea    rcx,[rbx]
  409fad:	call   40ae60 <_setlocale+0x954>
  409fb2:	mov    DWORD PTR [rbp-0x34],eax
  409fb5:	or     eax,eax
  409fb7:	jne    40a3b7 <remove+0x37>
  409fbd:	mov    eax,DWORD PTR [rbp+0x10]
  409fc0:	cmp    eax,0x1
  409fc3:	jl     40abdc <_setlocale+0x6d0>
  409fc9:	cmp    eax,0x5
  409fcc:	jg     40abdc <_setlocale+0x6d0>
  409fd2:	sub    eax,0x1
  409fd5:	movsxd rax,eax
  409fd8:	jmp    QWORD PTR [rax*8+0x4147d0]
  409fdf:	lea    rsi,[rbx]
  409fe2:	mov    rax,QWORD PTR ds:0x4119c0
  409fea:	mov    QWORD PTR [rax+0x118],rsi
  409ff1:	jmp    40abdc <_setlocale+0x6d0>
  409ff6:	lea    rsi,[rbx]
  409ff9:	mov    rax,QWORD PTR ds:0x4119c0
  40a001:	mov    QWORD PTR [rax+0x120],rsi
  40a008:	jmp    40abdc <_setlocale+0x6d0>
  40a00d:	lea    rsi,[rbx]
  40a010:	mov    rax,QWORD PTR ds:0x4119c0
  40a018:	mov    QWORD PTR [rax+0x130],rsi
  40a01f:	rex.W

000000000040a020 <qsort>:
  40a020:	mov    eax,DWORD PTR ds:0x4119c0
  40a027:	lea    rcx,ds:0x414a0d
  40a02f:	mov    QWORD PTR [rax+0xd0],rcx
  40a036:	mov    rax,QWORD PTR ds:0x4119c0
  40a03e:	lea    rcx,ds:0x414a0a
  40a046:	mov    QWORD PTR [rax+0xd8],rcx
  40a04d:	mov    rax,QWORD PTR ds:0x4119c0
  40a055:	lea    rcx,ds:0x414b4c
  40a05d:	mov    QWORD PTR [rax+0xe0],rcx
  40a064:	mov    rax,QWORD PTR ds:0x4119c0
  40a06c:	lea    rcx,ds:0x414b4e
  40a074:	mov    QWORD PTR [rax+0xe8],rcx
  40a07b:	mov    rax,QWORD PTR ds:0x4119c0
  40a083:	lea    rcx,ds:0x414b4a
  40a08b:	mov    QWORD PTR [rax+0xf0],rcx
  40a092:	mov    rax,QWORD PTR ds:0x4119c0
  40a09a:	lea    rcx,ds:0x414b5a
  40a0a2:	mov    QWORD PTR [rax+0xf8],rcx
  40a0a9:	mov    rax,QWORD PTR ds:0x4119c0
  40a0b1:	lea    rcx,ds:0x414b48
  40a0b9:	mov    QWORD PTR [rax+0x100],rcx
  40a0c0:	rex.W
  40a0c1:	.byte 0x8b
  40a0c2:	add    al,0x25
  40a0c4:	.byte 0xc0
  40a0c5:	.byte 0x19

000000000040a0c6 <_qsort>:
  40a0c6:	add    r14b,al
  40a0c9:	or     BYTE PTR [rcx],0x1
  40a0cc:	add    BYTE PTR [rax],al
  40a0ce:	add    cl,BYTE PTR [rax-0x75]
  40a0d1:	add    al,0x25
  40a0d3:	rcr    BYTE PTR [rcx],0x41
  40a0d6:	add    dh,al
  40a0d8:	or     BYTE PTR [rax],0x1
  40a0db:	add    BYTE PTR [rax],al
  40a0dd:	add    cl,BYTE PTR [rax-0x75]
  40a0e0:	add    al,0x25
  40a0e2:	rcr    BYTE PTR [rcx],0x41
  40a0e5:	add    dh,al
  40a0e7:	or     BYTE PTR [rdx],0x1
  40a0ea:	add    BYTE PTR [rax],al
  40a0ec:	add    DWORD PTR [rax-0x75],ecx
  40a0ef:	add    al,0x25
  40a0f1:	rcr    BYTE PTR [rcx],0x41
  40a0f4:	add    dh,al
  40a0f6:	or     BYTE PTR [rbx],0x1
  40a0f9:	add    BYTE PTR [rax],al
  40a0fb:	add    BYTE PTR [rax-0x75],cl
  40a0fe:	add    al,0x25
  40a100:	rcr    BYTE PTR [rcx],0x41
  40a103:	add    dh,al
  40a105:	or     BYTE PTR [rcx+rax*1],0x0
  40a109:	add    BYTE PTR [rcx],al
  40a10b:	mov    rax,QWORD PTR ds:0x4119c0
  40a113:	mov    BYTE PTR [rax+0x10d],0x0
  40a11a:	mov    rax,QWORD PTR ds:0x4119c0
  40a122:	mov    BYTE PTR [rax+0x10e],0x1
  40a129:	mov    rax,QWORD PTR ds:0x4119c0
  40a131:	mov    BYTE PTR [rax+0x10f],0x1
  40a138:	jmp    40abdc <_setlocale+0x6d0>
  40a13d:	lea    rsi,[rbx]
  40a140:	mov    rax,QWORD PTR ds:0x4119c0
  40a148:	mov    QWORD PTR [rax+0x128],rsi
  40a14f:	mov    rax,QWORD PTR ds:0x4119c0
  40a157:	lea    rcx,ds:0x414b4c
  40a15f:	mov    QWORD PTR [rax+0xb8],rcx
  40a166:	mov    rax,QWORD PTR ds:0x4119c0
  40a16e:	lea    rcx,ds:0x414b4e
  40a176:	mov    QWORD PTR [rax+0xc0],rcx
  40a17d:	mov    rax,QWORD PTR ds:0x4119c0
  40a185:	lea    rcx,ds:0x414b4a
  40a18d:	mov    QWORD PTR [rax+0xc8],rcx
  40a194:	jmp    40abdc <_setlocale+0x6d0>
  40a199:	mov    rax,QWORD PTR ds:0x4119c0
  40a1a1:	lea    rcx,ds:0x414a02
  40a1a9:	mov    QWORD PTR [rax+0x140],rcx
  40a1b0:	mov    rax,QWORD PTR ds:0x4119c0
  40a1b8:	lea    rcx,ds:0x4149fb
  40a1c0:	mov    QWORD PTR [rax+0x148],rcx
  40a1c7:	mov    rax,QWORD PTR ds:0x4119c0
  40a1cf:	lea    rcx,ds:0x4149f2
  40a1d7:	mov    QWORD PTR [rax+0x150],rcx
  40a1de:	mov    rax,QWORD PTR ds:0x4119c0
  40a1e6:	lea    rcx,ds:0x4149e9
  40a1ee:	mov    QWORD PTR [rax+0x158],rcx
  40a1f5:	mov    rax,QWORD PTR ds:0x4119c0
  40a1fd:	lea    rcx,ds:0x4149de
  40a205:	mov    QWORD PTR [rax+0x160],rcx
  40a20c:	mov    rax,QWORD PTR ds:0x4119c0
  40a214:	rex.W
  40a215:	.byte 0x8d
  40a216:	or     al,0x25
  40a218:	(bad)  
  40a219:	rex.WB
  40a21a:	rex.B

000000000040a21b <_qswap>:
  40a21b:	add    BYTE PTR [rax-0x77],cl
  40a21e:	mov    BYTE PTR [rax+0x1],ch
  40a221:	add    BYTE PTR [rax],al
  40a223:	mov    rax,QWORD PTR ds:0x4119c0
  40a22b:	lea    rcx,ds:0x4149ce
  40a233:	mov    QWORD PTR [rax+0x170],rcx
  40a23a:	mov    rax,QWORD PTR ds:0x4119c0
  40a242:	lea    rcx,ds:0x4149c7
  40a24a:	mov    QWORD PTR [rax+0x178],rcx
  40a251:	mov    rax,QWORD PTR ds:0x4119c0
  40a259:	lea    rcx,ds:0x4149bf
  40a261:	mov    QWORD PTR [rax+0x180],rcx
  40a268:	mov    rax,QWORD PTR ds:0x4119c0
  40a270:	lea    rcx,ds:0x4149b9
  40a278:	mov    QWORD PTR [rax+0x188],rcx
  40a27f:	mov    rax,QWORD PTR ds:0x4119c0
  40a287:	lea    rcx,ds:0x414af2
  40a28f:	mov    QWORD PTR [rax+0x190],rcx
  40a296:	mov    rax,QWORD PTR ds:0x4119c0
  40a29e:	lea    rcx,ds:0x4149b5
  40a2a6:	mov    QWORD PTR [rax+0x198],rcx
  40a2ad:	mov    rax,QWORD PTR ds:0x4119c0
  40a2b5:	lea    rcx,ds:0x4149b0
  40a2bd:	mov    QWORD PTR [rax+0x1a0],rcx
  40a2c4:	mov    rax,QWORD PTR ds:0x4119c0
  40a2cc:	lea    rcx,ds:0x4149ab
  40a2d4:	mov    QWORD PTR [rax+0x1a8],rcx
  40a2db:	rex.W
  40a2dc:	.byte 0x8b
  40a2dd:	add    al,0x25
  40a2df:	.byte 0xc0

000000000040a2e0 <raise>:
  40a2e0:	sbb    DWORD PTR [rcx+0x0],eax
  40a2e3:	lea    rcx,ds:0x414add
  40a2eb:	mov    QWORD PTR [rax+0x1b0],rcx
  40a2f2:	mov    rax,QWORD PTR ds:0x4119c0
  40a2fa:	lea    rcx,ds:0x414ad3
  40a302:	mov    QWORD PTR [rax+0x1b8],rcx
  40a309:	mov    rax,QWORD PTR ds:0x4119c0
  40a311:	lea    rcx,ds:0x4149a3
  40a319:	mov    QWORD PTR [rax+0x1c0],rcx
  40a320:	mov    rax,QWORD PTR ds:0x4119c0
  40a328:	lea    rcx,ds:0x414ac2
  40a330:	mov    QWORD PTR [rax+0x1c8],rcx
  40a337:	mov    rax,QWORD PTR ds:0x4119c0
  40a33f:	lea    rcx,ds:0x41499a
  40a347:	mov    QWORD PTR [rax+0x1d0],rcx
  40a34e:	lea    rsi,[rbx]
  40a351:	mov    rax,QWORD PTR ds:0x4119c0
  40a359:	mov    QWORD PTR [rax+0x138],rsi
  40a360:	mov    rax,QWORD PTR ds:0x4119c0
  40a368:	mov    DWORD PTR [rax+0x8c],0x0
  40a372:	mov    rax,QWORD PTR ds:0x4119c0
  40a37a:	.byte 0xc7
  40a37b:	.byte 0x80
  40a37c:	nop
  40a37d:	add    BYTE PTR [rax],al
	...

000000000040a380 <remove>:
  40a380:	add    BYTE PTR [rax],al
  40a382:	add    BYTE PTR [rax],al
  40a384:	mov    rax,QWORD PTR ds:0x4119c0
  40a38c:	lea    rcx,ds:0x414ab7
  40a394:	mov    QWORD PTR [rax+0x98],rcx
  40a39b:	mov    rax,QWORD PTR ds:0x4119c0
  40a3a3:	lea    rcx,ds:0x414ab7
  40a3ab:	mov    QWORD PTR [rax+0xa0],rcx
  40a3b2:	jmp    40abdc <_setlocale+0x6d0>
  40a3b7:	lea    rdx,ds:0x414994
  40a3bf:	lea    rcx,[rbx]
  40a3c2:	call   40ae60 <_setlocale+0x954>
  40a3c7:	mov    DWORD PTR [rbp-0x38],eax
  40a3ca:	or     eax,eax
  40a3cc:	jne    40a7cc <_setlocale+0x2c0>
  40a3d2:	mov    eax,DWORD PTR [rbp+0x10]
  40a3d5:	cmp    eax,0x1
  40a3d8:	jl     40abdc <_setlocale+0x6d0>
  40a3de:	cmp    eax,0x5
  40a3e1:	jg     40abdc <_setlocale+0x6d0>
  40a3e7:	sub    eax,0x1
  40a3ea:	movsxd rax,eax
  40a3ed:	jmp    QWORD PTR [rax*8+0x414800]
  40a3f4:	lea    rsi,[rbx]
  40a3f7:	rex.W
  40a3f8:	.byte 0x8b
  40a3f9:	add    al,0x25
  40a3fb:	.byte 0xc0

000000000040a3fc <unlink>:
  40a3fc:	sbb    DWORD PTR [rcx+0x0],eax
  40a3ff:	mov    QWORD PTR [rax+0x118],rsi
  40a406:	jmp    40abdc <_setlocale+0x6d0>
  40a40b:	lea    rsi,[rbx]
  40a40e:	mov    rax,QWORD PTR ds:0x4119c0
  40a416:	mov    QWORD PTR [rax+0x120],rsi
  40a41d:	.byte 0xe9
  40a41e:	.byte 0xba
  40a41f:	(bad)  

000000000040a420 <setlocale>:
  40a420:	add    BYTE PTR [rax],al
  40a422:	lea    rsi,[rbx]
  40a425:	mov    rax,QWORD PTR ds:0x4119c0
  40a42d:	mov    QWORD PTR [rax+0x130],rsi
  40a434:	mov    rax,QWORD PTR ds:0x4119c0
  40a43c:	lea    rcx,ds:0x414990
  40a444:	mov    QWORD PTR [rax+0xd0],rcx
  40a44b:	mov    rax,QWORD PTR ds:0x4119c0
  40a453:	lea    rcx,ds:0x41498d
  40a45b:	mov    QWORD PTR [rax+0xd8],rcx
  40a462:	mov    rax,QWORD PTR ds:0x4119c0
  40a46a:	lea    rcx,ds:0x414b5a
  40a472:	mov    QWORD PTR [rax+0xe0],rcx
  40a479:	mov    rax,QWORD PTR ds:0x4119c0
  40a481:	lea    rcx,ds:0x414b4e
  40a489:	mov    QWORD PTR [rax+0xe8],rcx
  40a490:	mov    rax,QWORD PTR ds:0x4119c0
  40a498:	lea    rcx,ds:0x414b4a
  40a4a0:	mov    QWORD PTR [rax+0xf0],rcx
  40a4a7:	mov    rax,QWORD PTR ds:0x4119c0
  40a4af:	lea    rcx,ds:0x414b5a
  40a4b7:	mov    QWORD PTR [rax+0xf8],rcx
  40a4be:	mov    rax,QWORD PTR ds:0x4119c0
  40a4c6:	lea    rcx,ds:0x414b48
  40a4ce:	mov    QWORD PTR [rax+0x100],rcx
  40a4d5:	mov    rax,QWORD PTR ds:0x4119c0
  40a4dd:	mov    BYTE PTR [rax+0x109],0x0
  40a4e4:	mov    rax,QWORD PTR ds:0x4119c0
  40a4ec:	mov    BYTE PTR [rax+0x108],0x0
  40a4f3:	mov    rax,QWORD PTR ds:0x4119c0
  40a4fb:	mov    BYTE PTR [rax+0x10a],0x1
  40a502:	mov    rax,QWORD PTR ds:0x4119c0
  40a50a:	.byte 0xc6
  40a50b:	.byte 0x80

000000000040a50c <_setlocale>:
  40a50c:	or     eax,DWORD PTR [rcx]
  40a50e:	add    BYTE PTR [rax],al
  40a510:	add    DWORD PTR [rax-0x75],ecx
  40a513:	add    al,0x25
  40a515:	rcr    BYTE PTR [rcx],0x41
  40a518:	add    dh,al
  40a51a:	or     BYTE PTR [rcx+rax*1],0x0
  40a51e:	add    BYTE PTR [rcx],al
  40a520:	mov    rax,QWORD PTR ds:0x4119c0
  40a528:	mov    BYTE PTR [rax+0x10d],0x1
  40a52f:	mov    rax,QWORD PTR ds:0x4119c0
  40a537:	mov    BYTE PTR [rax+0x10e],0x1
  40a53e:	mov    rax,QWORD PTR ds:0x4119c0
  40a546:	mov    BYTE PTR [rax+0x10f],0x1
  40a54d:	jmp    40abdc <_setlocale+0x6d0>
  40a552:	lea    rsi,[rbx]
  40a555:	mov    rax,QWORD PTR ds:0x4119c0
  40a55d:	mov    QWORD PTR [rax+0x128],rsi
  40a564:	mov    rax,QWORD PTR ds:0x4119c0
  40a56c:	lea    rcx,ds:0x414b4c
  40a574:	mov    QWORD PTR [rax+0xb8],rcx
  40a57b:	mov    rax,QWORD PTR ds:0x4119c0
  40a583:	lea    rcx,ds:0x414b4e
  40a58b:	mov    QWORD PTR [rax+0xc0],rcx
  40a592:	mov    rax,QWORD PTR ds:0x4119c0
  40a59a:	lea    rcx,ds:0x414b4a
  40a5a2:	mov    QWORD PTR [rax+0xc8],rcx
  40a5a9:	jmp    40abdc <_setlocale+0x6d0>
  40a5ae:	mov    rax,QWORD PTR ds:0x4119c0
  40a5b6:	lea    rcx,ds:0x414984
  40a5be:	mov    QWORD PTR [rax+0x140],rcx
  40a5c5:	mov    rax,QWORD PTR ds:0x4119c0
  40a5cd:	lea    rcx,ds:0x41497d
  40a5d5:	mov    QWORD PTR [rax+0x148],rcx
  40a5dc:	mov    rax,QWORD PTR ds:0x4119c0
  40a5e4:	lea    rcx,ds:0x414975
  40a5ec:	mov    QWORD PTR [rax+0x150],rcx
  40a5f3:	mov    rax,QWORD PTR ds:0x4119c0
  40a5fb:	lea    rcx,ds:0x41496b
  40a603:	mov    QWORD PTR [rax+0x158],rcx
  40a60a:	mov    rax,QWORD PTR ds:0x4119c0
  40a612:	lea    rcx,ds:0x414963
  40a61a:	mov    QWORD PTR [rax+0x160],rcx
  40a621:	mov    rax,QWORD PTR ds:0x4119c0
  40a629:	lea    rcx,ds:0x41495b
  40a631:	mov    QWORD PTR [rax+0x168],rcx
  40a638:	mov    rax,QWORD PTR ds:0x4119c0
  40a640:	lea    rcx,ds:0x414954
  40a648:	mov    QWORD PTR [rax+0x170],rcx
  40a64f:	mov    rax,QWORD PTR ds:0x4119c0
  40a657:	lea    rcx,ds:0x41494c
  40a65f:	mov    QWORD PTR [rax+0x178],rcx
  40a666:	mov    rax,QWORD PTR ds:0x4119c0
  40a66e:	lea    rcx,ds:0x414943
  40a676:	mov    QWORD PTR [rax+0x180],rcx
  40a67d:	mov    rax,QWORD PTR ds:0x4119c0
  40a685:	lea    rcx,ds:0x41493d
  40a68d:	mov    QWORD PTR [rax+0x188],rcx
  40a694:	mov    rax,QWORD PTR ds:0x4119c0
  40a69c:	lea    rcx,ds:0x414936
  40a6a4:	mov    QWORD PTR [rax+0x190],rcx
  40a6ab:	mov    rax,QWORD PTR ds:0x4119c0
  40a6b3:	lea    rcx,ds:0x41492f
  40a6bb:	mov    QWORD PTR [rax+0x198],rcx
  40a6c2:	mov    rax,QWORD PTR ds:0x4119c0
  40a6ca:	lea    rcx,ds:0x414928
  40a6d2:	mov    QWORD PTR [rax+0x1a0],rcx
  40a6d9:	mov    rax,QWORD PTR ds:0x4119c0
  40a6e1:	lea    rcx,ds:0x414922
  40a6e9:	mov    QWORD PTR [rax+0x1a8],rcx
  40a6f0:	mov    rax,QWORD PTR ds:0x4119c0
  40a6f8:	lea    rcx,ds:0x41491b
  40a700:	mov    QWORD PTR [rax+0x1b0],rcx
  40a707:	mov    rax,QWORD PTR ds:0x4119c0
  40a70f:	lea    rcx,ds:0x414911
  40a717:	mov    QWORD PTR [rax+0x1b8],rcx
  40a71e:	mov    rax,QWORD PTR ds:0x4119c0
  40a726:	lea    rcx,ds:0x414909
  40a72e:	mov    QWORD PTR [rax+0x1c0],rcx
  40a735:	mov    rax,QWORD PTR ds:0x4119c0
  40a73d:	lea    rcx,ds:0x414a22
  40a745:	mov    QWORD PTR [rax+0x1c8],rcx
  40a74c:	mov    rax,QWORD PTR ds:0x4119c0
  40a754:	lea    rcx,ds:0x414900
  40a75c:	mov    QWORD PTR [rax+0x1d0],rcx
  40a763:	lea    rsi,[rbx]
  40a766:	mov    rax,QWORD PTR ds:0x4119c0
  40a76e:	mov    QWORD PTR [rax+0x138],rsi
  40a775:	mov    rax,QWORD PTR ds:0x4119c0
  40a77d:	mov    DWORD PTR [rax+0x8c],0x0
  40a787:	mov    rax,QWORD PTR ds:0x4119c0
  40a78f:	mov    DWORD PTR [rax+0x90],0x0
  40a799:	mov    rax,QWORD PTR ds:0x4119c0
  40a7a1:	lea    rcx,ds:0x414ab7
  40a7a9:	mov    QWORD PTR [rax+0x98],rcx
  40a7b0:	mov    rax,QWORD PTR ds:0x4119c0
  40a7b8:	lea    rcx,ds:0x414ab7
  40a7c0:	mov    QWORD PTR [rax+0xa0],rcx
  40a7c7:	jmp    40abdc <_setlocale+0x6d0>
  40a7cc:	lea    rdx,ds:0x4148fa
  40a7d4:	lea    rcx,[rbx]
  40a7d7:	call   40ae60 <_setlocale+0x954>
  40a7dc:	mov    DWORD PTR [rbp-0x3c],eax
  40a7df:	or     eax,eax
  40a7e1:	jne    40abdc <_setlocale+0x6d0>
  40a7e7:	mov    eax,DWORD PTR [rbp+0x10]
  40a7ea:	cmp    eax,0x1
  40a7ed:	jl     40abdc <_setlocale+0x6d0>
  40a7f3:	cmp    eax,0x5
  40a7f6:	jg     40abdc <_setlocale+0x6d0>
  40a7fc:	sub    eax,0x1
  40a7ff:	movsxd rax,eax
  40a802:	jmp    QWORD PTR [rax*8+0x414830]
  40a809:	lea    rsi,[rbx]
  40a80c:	mov    rax,QWORD PTR ds:0x4119c0
  40a814:	mov    QWORD PTR [rax+0x118],rsi
  40a81b:	jmp    40abdc <_setlocale+0x6d0>
  40a820:	lea    rsi,[rbx]
  40a823:	mov    rax,QWORD PTR ds:0x4119c0
  40a82b:	mov    QWORD PTR [rax+0x120],rsi
  40a832:	jmp    40abdc <_setlocale+0x6d0>
  40a837:	lea    rsi,[rbx]
  40a83a:	mov    rax,QWORD PTR ds:0x4119c0
  40a842:	mov    QWORD PTR [rax+0x130],rsi
  40a849:	mov    rax,QWORD PTR ds:0x4119c0
  40a851:	lea    rcx,ds:0x4148f6
  40a859:	mov    QWORD PTR [rax+0xd0],rcx
  40a860:	mov    rax,QWORD PTR ds:0x4119c0
  40a868:	lea    rcx,ds:0x4148f2
  40a870:	mov    QWORD PTR [rax+0xd8],rcx
  40a877:	mov    rax,QWORD PTR ds:0x4119c0
  40a87f:	lea    rcx,ds:0x414b5a
  40a887:	mov    QWORD PTR [rax+0xe0],rcx
  40a88e:	mov    rax,QWORD PTR ds:0x4119c0
  40a896:	lea    rcx,ds:0x414b4e
  40a89e:	mov    QWORD PTR [rax+0xe8],rcx
  40a8a5:	mov    rax,QWORD PTR ds:0x4119c0
  40a8ad:	lea    rcx,ds:0x414b4a
  40a8b5:	mov    QWORD PTR [rax+0xf0],rcx
  40a8bc:	mov    rax,QWORD PTR ds:0x4119c0
  40a8c4:	lea    rcx,ds:0x414b5a
  40a8cc:	mov    QWORD PTR [rax+0xf8],rcx
  40a8d3:	mov    rax,QWORD PTR ds:0x4119c0
  40a8db:	lea    rcx,ds:0x414b48
  40a8e3:	mov    QWORD PTR [rax+0x100],rcx
  40a8ea:	mov    rax,QWORD PTR ds:0x4119c0
  40a8f2:	mov    BYTE PTR [rax+0x109],0x0
  40a8f9:	mov    rax,QWORD PTR ds:0x4119c0
  40a901:	mov    BYTE PTR [rax+0x108],0x0
  40a908:	mov    rax,QWORD PTR ds:0x4119c0
  40a910:	mov    BYTE PTR [rax+0x10a],0x1
  40a917:	mov    rax,QWORD PTR ds:0x4119c0
  40a91f:	mov    BYTE PTR [rax+0x10b],0x1
  40a926:	mov    rax,QWORD PTR ds:0x4119c0
  40a92e:	mov    BYTE PTR [rax+0x10c],0x1
  40a935:	mov    rax,QWORD PTR ds:0x4119c0
  40a93d:	mov    BYTE PTR [rax+0x10d],0x1
  40a944:	mov    rax,QWORD PTR ds:0x4119c0
  40a94c:	mov    BYTE PTR [rax+0x10e],0x1
  40a953:	mov    rax,QWORD PTR ds:0x4119c0
  40a95b:	mov    BYTE PTR [rax+0x10f],0x1
  40a962:	jmp    40abdc <_setlocale+0x6d0>
  40a967:	lea    rsi,[rbx]
  40a96a:	mov    rax,QWORD PTR ds:0x4119c0
  40a972:	mov    QWORD PTR [rax+0x128],rsi
  40a979:	mov    rax,QWORD PTR ds:0x4119c0
  40a981:	lea    rcx,ds:0x414b4c
  40a989:	mov    QWORD PTR [rax+0xb8],rcx
  40a990:	mov    rax,QWORD PTR ds:0x4119c0
  40a998:	lea    rcx,ds:0x414b4e
  40a9a0:	mov    QWORD PTR [rax+0xc0],rcx
  40a9a7:	mov    rax,QWORD PTR ds:0x4119c0
  40a9af:	lea    rcx,ds:0x414b4a
  40a9b7:	mov    QWORD PTR [rax+0xc8],rcx
  40a9be:	jmp    40abdc <_setlocale+0x6d0>
  40a9c3:	mov    rax,QWORD PTR ds:0x4119c0
  40a9cb:	lea    rcx,ds:0x4148ea
  40a9d3:	mov    QWORD PTR [rax+0x140],rcx
  40a9da:	mov    rax,QWORD PTR ds:0x4119c0
  40a9e2:	lea    rcx,ds:0x4148e4
  40a9ea:	mov    QWORD PTR [rax+0x148],rcx
  40a9f1:	mov    rax,QWORD PTR ds:0x4119c0
  40a9f9:	lea    rcx,ds:0x4148dd
  40aa01:	mov    QWORD PTR [rax+0x150],rcx
  40aa08:	mov    rax,QWORD PTR ds:0x4119c0
  40aa10:	lea    rcx,ds:0x4148d3
  40aa18:	mov    QWORD PTR [rax+0x158],rcx
  40aa1f:	mov    rax,QWORD PTR ds:0x4119c0
  40aa27:	lea    rcx,ds:0x4148cc
  40aa2f:	mov    QWORD PTR [rax+0x160],rcx
  40aa36:	mov    rax,QWORD PTR ds:0x4119c0
  40aa3e:	lea    rcx,ds:0x4148c4
  40aa46:	mov    QWORD PTR [rax+0x168],rcx
  40aa4d:	mov    rax,QWORD PTR ds:0x4119c0
  40aa55:	lea    rcx,ds:0x4148bd
  40aa5d:	mov    QWORD PTR [rax+0x170],rcx
  40aa64:	mov    rax,QWORD PTR ds:0x4119c0
  40aa6c:	lea    rcx,ds:0x4148b7
  40aa74:	mov    QWORD PTR [rax+0x178],rcx
  40aa7b:	mov    rax,QWORD PTR ds:0x4119c0
  40aa83:	lea    rcx,ds:0x4148af
  40aa8b:	mov    QWORD PTR [rax+0x180],rcx
  40aa92:	mov    rax,QWORD PTR ds:0x4119c0
  40aa9a:	lea    rcx,ds:0x4148a9
  40aaa2:	mov    QWORD PTR [rax+0x188],rcx
  40aaa9:	mov    rax,QWORD PTR ds:0x4119c0
  40aab1:	lea    rcx,ds:0x4148a3
  40aab9:	mov    QWORD PTR [rax+0x190],rcx
  40aac0:	mov    rax,QWORD PTR ds:0x4119c0
  40aac8:	lea    rcx,ds:0x41489e
  40aad0:	mov    QWORD PTR [rax+0x198],rcx
  40aad7:	mov    rax,QWORD PTR ds:0x4119c0
  40aadf:	lea    rcx,ds:0x414898
  40aae7:	mov    QWORD PTR [rax+0x1a0],rcx
  40aaee:	mov    rax,QWORD PTR ds:0x4119c0
  40aaf6:	lea    rcx,ds:0x414892
  40aafe:	mov    QWORD PTR [rax+0x1a8],rcx
  40ab05:	mov    rax,QWORD PTR ds:0x4119c0
  40ab0d:	lea    rcx,ds:0x41488b
  40ab15:	mov    QWORD PTR [rax+0x1b0],rcx
  40ab1c:	mov    rax,QWORD PTR ds:0x4119c0
  40ab24:	lea    rcx,ds:0x414880
  40ab2c:	mov    QWORD PTR [rax+0x1b8],rcx
  40ab33:	mov    rax,QWORD PTR ds:0x4119c0
  40ab3b:	lea    rcx,ds:0x414878
  40ab43:	mov    QWORD PTR [rax+0x1c0],rcx
  40ab4a:	mov    rax,QWORD PTR ds:0x4119c0
  40ab52:	lea    rcx,ds:0x41486e
  40ab5a:	mov    QWORD PTR [rax+0x1c8],rcx
  40ab61:	mov    rax,QWORD PTR ds:0x4119c0
  40ab69:	lea    rcx,ds:0x414864
  40ab71:	mov    QWORD PTR [rax+0x1d0],rcx
  40ab78:	lea    rsi,[rbx]
  40ab7b:	mov    rax,QWORD PTR ds:0x4119c0
  40ab83:	mov    QWORD PTR [rax+0x138],rsi
  40ab8a:	mov    rax,QWORD PTR ds:0x4119c0
  40ab92:	mov    DWORD PTR [rax+0x8c],0x0
  40ab9c:	mov    rax,QWORD PTR ds:0x4119c0
  40aba4:	mov    DWORD PTR [rax+0x90],0x0
  40abae:	mov    rax,QWORD PTR ds:0x4119c0
  40abb6:	lea    rcx,ds:0x414860
  40abbe:	mov    QWORD PTR [rax+0x98],rcx
  40abc5:	mov    rax,QWORD PTR ds:0x4119c0
  40abcd:	lea    rcx,ds:0x414ab7
  40abd5:	mov    QWORD PTR [rax+0xa0],rcx
  40abdc:	lea    rax,[rsi]
  40abdf:	add    rsp,0x50
  40abe3:	add    rsp,0x8
  40abe7:	pop    rdi
  40abe8:	pop    rsi
  40abe9:	pop    rbx
  40abea:	leave  
  40abeb:	ret    
  40abec:	add    BYTE PTR [rax],al
  40abee:	add    BYTE PTR [rax],al
  40abf0:	movmskpd eax,xmm0
  40abf4:	and    al,0x1
  40abf6:	ret    
  40abf7:	movmskps eax,xmm0
  40abfa:	and    al,0x1
  40abfc:	ret    
  40abfd:	push   rax
  40abfe:	fld    TBYTE PTR [rsp+0x28]
  40ac02:	push   rax
  40ac03:	fstp   DWORD PTR [rsp]
  40ac06:	movq   xmm0,QWORD PTR [rsp]
  40ac0b:	movmskpd rax,xmm0
  40ac10:	and    al,0x1
  40ac12:	ret    
  40ac13:	nop
	...
  40ac20:	push   rbp
  40ac21:	mov    rbp,rsp
  40ac24:	mov    QWORD PTR [rbp+0x18],rdx
  40ac28:	mov    r8,rcx
  40ac2b:	mov    r11,QWORD PTR [r8+0x10]
  40ac2f:	mov    rax,QWORD PTR [r11]
  40ac32:	mov    ecx,edx
  40ac34:	mov    BYTE PTR [rax],cl
  40ac36:	add    QWORD PTR [r11],0x1
  40ac3a:	inc    DWORD PTR [r8+0x1c]
  40ac3e:	inc    DWORD PTR [r8+0x20]
  40ac42:	leave  
  40ac43:	ret    
  40ac44:	push   rbp
  40ac45:	mov    rbp,rsp
  40ac48:	push   rbx
  40ac49:	push   rsi
  40ac4a:	sub    rsp,0x60
  40ac4e:	mov    QWORD PTR [rbp+0x20],r8
  40ac52:	mov    QWORD PTR [rbp+0x18],rdx
  40ac56:	mov    QWORD PTR [rbp+0x10],rcx
  40ac5a:	mov    QWORD PTR [rsp+0x28],0x0
  40ac63:	mov    rsi,r8
  40ac66:	mov    QWORD PTR [rsp+0x20],rsi
  40ac6b:	mov    r9,rdx
  40ac6e:	lea    r8,ds:0x40ac20
  40ac76:	xor    edx,edx
  40ac78:	lea    rcx,[rbp+0x10]
  40ac7c:	call   40fb64 <WriteDouble+0x86d>
  40ac81:	mov    DWORD PTR [rbp-0x14],eax
  40ac84:	mov    ebx,eax
  40ac86:	mov    rax,QWORD PTR [rbp+0x10]
  40ac8a:	mov    BYTE PTR [rax],0x0
  40ac8d:	mov    eax,ebx
  40ac8f:	add    rsp,0x60
  40ac93:	pop    rsi
  40ac94:	pop    rbx
  40ac95:	leave  
  40ac96:	ret    
  40ac97:	push   rbp
  40ac98:	mov    rbp,rsp
  40ac9b:	push   rbx
  40ac9c:	push   rsi
  40ac9d:	sub    rsp,0x60
  40aca1:	mov    QWORD PTR [rbp+0x20],r8
  40aca5:	mov    QWORD PTR [rbp+0x18],rdx
  40aca9:	mov    QWORD PTR [rbp+0x10],rcx
  40acad:	mov    rbx,0x0
  40acb4:	mov    rsi,r8
  40acb7:	mov    QWORD PTR [rsp+0x28],rsi
  40acbc:	mov    QWORD PTR [rsp+0x20],rbx
  40acc1:	mov    r9,rdx
  40acc4:	lea    r8,ds:0x40ac20
  40accc:	xor    edx,edx
  40acce:	lea    rcx,[rbp+0x10]
  40acd2:	call   40fb64 <WriteDouble+0x86d>
  40acd7:	mov    DWORD PTR [rbp-0x18],eax
  40acda:	mov    DWORD PTR [rbp-0x14],eax
  40acdd:	mov    rax,QWORD PTR [rbp+0x10]
  40ace1:	mov    BYTE PTR [rax],0x0
  40ace4:	mov    eax,DWORD PTR [rbp-0x14]
  40ace7:	add    rsp,0x60
  40aceb:	pop    rsi
  40acec:	pop    rbx
  40aced:	leave  
  40acee:	ret    
  40acef:	push   rbp
  40acf0:	mov    rbp,rsp
  40acf3:	push   rbx
  40acf4:	sub    rsp,0x8
  40acf8:	sub    rsp,0xe0
  40acff:	mov    QWORD PTR [rbp-0x84],rcx
  40ad06:	mov    QWORD PTR [rbp-0x7c],rdx
  40ad0a:	mov    QWORD PTR [rbp-0x74],r8
  40ad0e:	mov    QWORD PTR [rbp-0x6c],r9
  40ad12:	movq   QWORD PTR [rbp-0x64],xmm0
  40ad17:	movq   QWORD PTR [rbp-0x5c],xmm1
  40ad1c:	movq   QWORD PTR [rbp-0x54],xmm2
  40ad21:	movq   QWORD PTR [rbp-0x4c],xmm3
  40ad26:	lea    rdx,[rbp-0x7c]
  40ad2a:	lea    rcx,[rbp-0x20]
  40ad2e:	lea    rax,[rbp-0x44]
  40ad32:	mov    QWORD PTR [rcx],rax
  40ad35:	lea    rcx,[rbp-0x84]
  40ad3c:	mov    QWORD PTR [rax+0x18],rcx
  40ad40:	mov    QWORD PTR [rax],0x10
  40ad47:	mov    QWORD PTR [rax+0x8],0x30
  40ad4f:	lea    rcx,[rbp+0x30]
  40ad53:	mov    QWORD PTR [rax+0x10],rcx
  40ad57:	mov    QWORD PTR [rsp+0x28],0x0
  40ad60:	mov    rbx,QWORD PTR [rbp-0x20]
  40ad64:	mov    QWORD PTR [rsp+0x20],rbx
  40ad69:	mov    r9,QWORD PTR [rbp-0x7c]
  40ad6d:	lea    r8,ds:0x40ac20
  40ad75:	xor    edx,edx
  40ad77:	lea    rcx,[rbp-0x84]
  40ad7e:	call   40fb64 <WriteDouble+0x86d>
  40ad83:	mov    DWORD PTR [rbp-0x24],eax
  40ad86:	mov    eax,DWORD PTR [rbp-0x24]
  40ad89:	mov    DWORD PTR [rbp-0x14],eax
  40ad8c:	mov    rax,QWORD PTR [rbp-0x84]
  40ad93:	mov    BYTE PTR [rax],0x0
  40ad96:	mov    eax,DWORD PTR [rbp-0x14]
  40ad99:	lea    rsp,[rbp-0xf0]
  40ada0:	add    rsp,0xe0
  40ada7:	add    rsp,0x8
  40adab:	pop    rbx
  40adac:	leave  
  40adad:	ret    
  40adae:	nop
  40adaf:	nop
  40adb0:	sub    rsp,0x10
  40adb4:	mov    QWORD PTR [rsp],r10
  40adb8:	mov    QWORD PTR [rsp+0x8],r11
  40adbd:	xor    r11,r11
  40adc0:	lea    r10,[rsp+0x18]
  40adc5:	sub    r10,rax
  40adc8:	cmovb  r10,r11
  40adcc:	mov    r11,QWORD PTR gs:0x10
  40add5:	cmp    r10,r11
  40add8:	jae    40adf0 <_setlocale+0x8e4>
  40adda:	and    r10w,0xf000
  40ade0:	sub    r11,0x1000
  40ade7:	mov    BYTE PTR [r11],0x0
  40adeb:	cmp    r10,r11
  40adee:	jne    40ade0 <_setlocale+0x8d4>
  40adf0:	mov    r10,QWORD PTR [rsp]
  40adf4:	mov    r11,QWORD PTR [rsp+0x8]
  40adf9:	add    rsp,0x10
  40adfd:	pop    r10
  40adff:	sub    rsp,rax
  40ae02:	jmp    r10
  40ae05:	nop
  40ae06:	nop
  40ae07:	nop
	...
  40ae10:	xor    eax,eax
  40ae12:	cmp    BYTE PTR [rcx+rax*1],0x0
  40ae16:	je     40ae1e <_setlocale+0x912>
  40ae18:	add    rax,0x1
  40ae1c:	jmp    40ae12 <_setlocale+0x906>
  40ae1e:	mov    r8b,BYTE PTR [rdx]
  40ae21:	mov    BYTE PTR [rcx+rax*1],r8b
  40ae25:	or     r8b,r8b
  40ae28:	je     40ae34 <_setlocale+0x928>
  40ae2a:	add    rax,0x1
  40ae2e:	add    rdx,0x1
  40ae32:	jmp    40ae1e <_setlocale+0x912>
  40ae34:	mov    rax,rcx
  40ae37:	ret    
	...
  40ae40:	xor    eax,eax
  40ae42:	mov    dh,BYTE PTR [rcx]
  40ae44:	cmp    dh,dl
  40ae46:	cmove  rax,rcx
  40ae4a:	je     40ae53 <_setlocale+0x947>
  40ae4c:	inc    rcx
  40ae4f:	or     dh,dh
  40ae51:	jne    40ae42 <_setlocale+0x936>
  40ae53:	ret    
	...
  40ae60:	push   rbp
  40ae61:	mov    rbp,rsp
  40ae64:	push   rsi
  40ae65:	sub    rsp,0x8
  40ae69:	mov    QWORD PTR [rbp+0x18],rdx
  40ae6d:	mov    QWORD PTR [rbp+0x10],rcx
  40ae71:	xor    esi,esi
  40ae73:	mov    r11,QWORD PTR [rbp+0x10]
  40ae77:	mov    r8,rdx
  40ae7a:	jmp    40ae97 <_setlocale+0x98b>
  40ae7c:	cmp    BYTE PTR [r11],0x0
  40ae80:	je     40ae8d <_setlocale+0x981>
  40ae82:	cmp    BYTE PTR [r8*1+0x0],0x0
  40ae8b:	jne    40ae8f <_setlocale+0x983>
  40ae8d:	jmp    40aea4 <_setlocale+0x998>
  40ae8f:	lea    r11,[r11+0x1]
  40ae93:	lea    r8,[r8+0x1]
  40ae97:	mov    al,BYTE PTR [r11]
  40ae9a:	cmp    al,BYTE PTR [r8*1+0x0]
  40aea2:	je     40ae7c <_setlocale+0x970>
  40aea4:	xor    esi,esi
  40aea6:	mov    al,BYTE PTR [r11]
  40aea9:	cmp    al,BYTE PTR [r8*1+0x0]
  40aeb1:	je     40aece <_setlocale+0x9c2>
  40aeb3:	mov    esi,0x1
  40aeb8:	movzx  eax,BYTE PTR [r11]
  40aebc:	movzx  ecx,BYTE PTR [r8*1+0x0]
  40aec5:	cmp    eax,ecx
  40aec7:	jae    40aece <_setlocale+0x9c2>
  40aec9:	mov    esi,0xffffffff
  40aece:	mov    eax,esi
  40aed0:	add    rsp,0x8
  40aed4:	pop    rsi
  40aed5:	leave  
  40aed6:	ret    
  40aed7:	nop
	...
  40aee0:	mov    rax,rcx
  40aee3:	mov    r8b,BYTE PTR [rdx]
  40aee6:	mov    BYTE PTR [rcx],r8b
  40aee9:	inc    rdx
  40aeec:	inc    rcx
  40aeef:	or     r8b,r8b
  40aef2:	jne    40aee3 <_setlocale+0x9d7>
  40aef4:	ret    
  40aef5:	nop
  40aef6:	nop
  40aef7:	nop
	...
  40af00:	push   rbp
  40af01:	mov    rbp,rsp
  40af04:	push   rbx
  40af05:	sub    rsp,0x8
  40af09:	sub    rsp,0x40
  40af0d:	mov    QWORD PTR [rbp+0x10],rcx
  40af11:	call   40b060 <_setlocale+0xb54>
  40af16:	mov    QWORD PTR [rbp-0x18],rax
  40af1a:	mov    rcx,rax
  40af1d:	add    rcx,0x1
  40af21:	call   405720 <atexit+0x37>
  40af26:	mov    QWORD PTR [rbp-0x20],rax
  40af2a:	mov    rbx,rax
  40af2d:	or     rbx,rbx
  40af30:	je     40af3e <_setlocale+0xa32>
  40af32:	mov    rdx,QWORD PTR [rbp+0x10]
  40af36:	lea    rcx,[rbx]
  40af39:	call   40aee0 <_setlocale+0x9d4>
  40af3e:	lea    rax,[rbx]
  40af41:	add    rsp,0x40
  40af45:	add    rsp,0x8
  40af49:	pop    rbx
  40af4a:	leave  
  40af4b:	ret    
  40af4c:	add    BYTE PTR [rax],al
  40af4e:	add    BYTE PTR [rax],al
  40af50:	push   rbp
  40af51:	mov    rbp,rsp
  40af54:	push   rbx
  40af55:	push   rsi
  40af56:	push   rdi
  40af57:	sub    rsp,0x8
  40af5b:	sub    rsp,0x50
  40af5f:	mov    rbx,rdx
  40af62:	mov    rsi,rcx
  40af65:	xor    edi,edi
  40af67:	jmp    40af82 <_setlocale+0xa76>
  40af69:	cmp    BYTE PTR [rsi],0x0
  40af6c:	je     40af73 <_setlocale+0xa67>
  40af6e:	cmp    BYTE PTR [rbx],0x0
  40af71:	jne    40af7a <_setlocale+0xa6e>
  40af73:	mov    edi,0x1
  40af78:	jmp    40af82 <_setlocale+0xa76>
  40af7a:	lea    rsi,[rsi+0x1]
  40af7e:	lea    rbx,[rbx+0x1]
  40af82:	movsx  ecx,BYTE PTR [rsi]
  40af85:	call   40b5a0 <_setlocale+0x1094>
  40af8a:	mov    DWORD PTR [rbp-0x24],eax
  40af8d:	mov    DWORD PTR [rbp-0x28],eax
  40af90:	movsx  ecx,BYTE PTR [rbx]
  40af93:	call   40b5a0 <_setlocale+0x1094>
  40af98:	mov    DWORD PTR [rbp-0x2c],eax
  40af9b:	mov    ecx,DWORD PTR [rbp-0x28]
  40af9e:	cmp    ecx,eax
  40afa0:	jne    40afa6 <_setlocale+0xa9a>
  40afa2:	or     edi,edi
  40afa4:	je     40af69 <_setlocale+0xa5d>
  40afa6:	xor    edi,edi
  40afa8:	movsx  eax,BYTE PTR [rsi]
  40afab:	movsx  ecx,BYTE PTR [rbx]
  40afae:	cmp    eax,ecx
  40afb0:	je     40afdc <_setlocale+0xad0>
  40afb2:	mov    edi,0x1
  40afb7:	movsx  ecx,BYTE PTR [rsi]
  40afba:	call   40b5a0 <_setlocale+0x1094>
  40afbf:	mov    DWORD PTR [rbp-0x30],eax
  40afc2:	mov    DWORD PTR [rbp-0x34],eax
  40afc5:	movsx  ecx,BYTE PTR [rbx]
  40afc8:	call   40b5a0 <_setlocale+0x1094>
  40afcd:	mov    DWORD PTR [rbp-0x38],eax
  40afd0:	mov    ecx,DWORD PTR [rbp-0x34]
  40afd3:	cmp    ecx,eax
  40afd5:	jge    40afdc <_setlocale+0xad0>
  40afd7:	mov    edi,0xffffffff
  40afdc:	mov    eax,edi
  40afde:	add    rsp,0x50
  40afe2:	add    rsp,0x8
  40afe6:	pop    rdi
  40afe7:	pop    rsi
  40afe8:	pop    rbx
  40afe9:	leave  
  40afea:	ret    
  40afeb:	nop
  40afec:	add    BYTE PTR [rax],al
  40afee:	add    BYTE PTR [rax],al
  40aff0:	push   rbp
  40aff1:	mov    rbp,rsp
  40aff4:	push   rbx
  40aff5:	push   rsi
  40aff6:	sub    rsp,0x50
  40affa:	mov    rsi,r8
  40affd:	mov    QWORD PTR [rbp+0x18],rdx
  40b001:	mov    QWORD PTR [rbp+0x10],rcx
  40b005:	mov    rcx,rdx
  40b008:	call   40b060 <_setlocale+0xb54>
  40b00d:	mov    QWORD PTR [rbp-0x20],rax
  40b011:	mov    rbx,rax
  40b014:	mov    QWORD PTR [rbp-0x18],rbx
  40b018:	or     esi,esi
  40b01a:	jne    40b020 <_setlocale+0xb14>
  40b01c:	xor    eax,eax
  40b01e:	jmp    40b04d <_setlocale+0xb41>
  40b020:	mov    eax,esi
  40b022:	cmp    rbx,rax
  40b025:	jb     40b02e <_setlocale+0xb22>
  40b027:	mov    eax,esi
  40b029:	sub    eax,0x1
  40b02c:	mov    ebx,eax
  40b02e:	mov    r8,rbx
  40b031:	mov    rdx,QWORD PTR [rbp+0x18]
  40b035:	mov    rcx,QWORD PTR [rbp+0x10]
  40b039:	call   4057a0 <fabs+0x10>
  40b03e:	movsxd rax,ebx
  40b041:	mov    rcx,QWORD PTR [rbp+0x10]
  40b045:	mov    BYTE PTR [rcx+rax*1],0x0
  40b049:	mov    rax,QWORD PTR [rbp-0x18]
  40b04d:	add    rsp,0x50
  40b051:	pop    rsi
  40b052:	pop    rbx
  40b053:	leave  
  40b054:	ret    
  40b055:	nop
  40b056:	nop
  40b057:	nop
	...
  40b060:	xor    eax,eax
  40b062:	jmp    40b066 <_setlocale+0xb5a>
  40b064:	inc    eax
  40b066:	mov    dl,BYTE PTR [rcx+rax*1]
  40b069:	or     dl,dl
  40b06b:	jne    40b064 <_setlocale+0xb58>
  40b06d:	ret    
  40b06e:	nop
  40b06f:	nop
  40b070:	push   rbp
  40b071:	mov    rbp,rsp
  40b074:	push   rsi
  40b075:	sub    rsp,0x8
  40b079:	mov    rsi,r8
  40b07c:	mov    r11,rdx
  40b07f:	mov    QWORD PTR [rbp+0x10],rcx
  40b083:	mov    r8,QWORD PTR [rbp+0x10]
  40b087:	jmp    40b0a6 <_setlocale+0xb9a>
  40b089:	mov    al,BYTE PTR [r11]
  40b08c:	mov    BYTE PTR [r8*1+0x0],al
  40b094:	cmp    BYTE PTR [r11],0x0
  40b098:	je     40b09e <_setlocale+0xb92>
  40b09a:	lea    r11,[r11+0x1]
  40b09e:	lea    r8,[r8+0x1]
  40b0a2:	sub    rsi,0x1
  40b0a6:	or     rsi,rsi
  40b0a9:	jne    40b089 <_setlocale+0xb7d>
  40b0ab:	mov    rax,QWORD PTR [rbp+0x10]
  40b0af:	add    rsp,0x8
  40b0b3:	pop    rsi
  40b0b4:	leave  
  40b0b5:	ret    
  40b0b6:	nop
  40b0b7:	nop
	...
  40b0c0:	push   rbp
  40b0c1:	mov    rbp,rsp
  40b0c4:	push   rbx
  40b0c5:	push   rsi
  40b0c6:	push   rdi
  40b0c7:	sub    rsp,0x8
  40b0cb:	sub    rsp,0x50
  40b0cf:	mov    rdi,r8
  40b0d2:	mov    rbx,rdx
  40b0d5:	mov    rsi,rcx
  40b0d8:	jmp    40b0ee <_setlocale+0xbe2>
  40b0da:	cmp    BYTE PTR [rsi],0x0
  40b0dd:	je     40b0e4 <_setlocale+0xbd8>
  40b0df:	cmp    BYTE PTR [rbx],0x0
  40b0e2:	jne    40b0e6 <_setlocale+0xbda>
  40b0e4:	jmp    40b117 <_setlocale+0xc0b>
  40b0e6:	lea    rsi,[rsi+0x1]
  40b0ea:	lea    rbx,[rbx+0x1]
  40b0ee:	mov    eax,edi
  40b0f0:	sub    edi,0x1
  40b0f3:	or     eax,eax
  40b0f5:	je     40b117 <_setlocale+0xc0b>
  40b0f7:	movsx  ecx,BYTE PTR [rsi]
  40b0fa:	call   40b5a0 <_setlocale+0x1094>
  40b0ff:	mov    DWORD PTR [rbp-0x24],eax
  40b102:	mov    DWORD PTR [rbp-0x28],eax
  40b105:	movsx  ecx,BYTE PTR [rbx]
  40b108:	call   40b5a0 <_setlocale+0x1094>
  40b10d:	mov    DWORD PTR [rbp-0x2c],eax
  40b110:	mov    ecx,DWORD PTR [rbp-0x28]
  40b113:	cmp    ecx,eax
  40b115:	je     40b0da <_setlocale+0xbce>
  40b117:	or     edi,edi
  40b119:	jge    40b11f <_setlocale+0xc13>
  40b11b:	xor    eax,eax
  40b11d:	jmp    40b159 <_setlocale+0xc4d>
  40b11f:	movsx  eax,BYTE PTR [rsi]
  40b122:	movsx  ecx,BYTE PTR [rbx]
  40b125:	cmp    eax,ecx
  40b127:	je     40b157 <_setlocale+0xc4b>
  40b129:	movsx  ecx,BYTE PTR [rsi]
  40b12c:	call   40b5a0 <_setlocale+0x1094>
  40b131:	mov    DWORD PTR [rbp-0x30],eax
  40b134:	mov    DWORD PTR [rbp-0x34],eax
  40b137:	movsx  ecx,BYTE PTR [rbx]
  40b13a:	call   40b5a0 <_setlocale+0x1094>
  40b13f:	mov    DWORD PTR [rbp-0x38],eax
  40b142:	mov    ecx,DWORD PTR [rbp-0x34]
  40b145:	cmp    ecx,eax
  40b147:	jge    40b150 <_setlocale+0xc44>
  40b149:	mov    eax,0xffffffff
  40b14e:	jmp    40b159 <_setlocale+0xc4d>
  40b150:	mov    eax,0x1
  40b155:	jmp    40b159 <_setlocale+0xc4d>
  40b157:	xor    eax,eax
  40b159:	add    rsp,0x50
  40b15d:	add    rsp,0x8
  40b161:	pop    rdi
  40b162:	pop    rsi
  40b163:	pop    rbx
  40b164:	leave  
  40b165:	ret    
  40b166:	nop
  40b167:	nop
	...
  40b170:	xor    eax,eax
  40b172:	mov    dh,BYTE PTR [rcx]
  40b174:	cmp    dh,dl
  40b176:	cmove  rax,rcx
  40b17a:	inc    rcx
  40b17d:	or     dh,dh
  40b17f:	jne    40b172 <_setlocale+0xc66>
  40b181:	ret    
  40b182:	nop
  40b183:	nop
	...
  40b190:	push   rbp
  40b191:	mov    rbp,rsp
  40b194:	push   rbx
  40b195:	push   rsi
  40b196:	push   r12
  40b198:	push   r13
  40b19a:	push   r14
  40b19c:	push   r15
  40b19e:	sub    rsp,0x60
  40b1a2:	mov    QWORD PTR [rbp+0x28],r9
  40b1a6:	mov    QWORD PTR [rbp+0x20],r8
  40b1aa:	mov    QWORD PTR [rbp+0x18],rdx
  40b1ae:	mov    rbx,rcx
  40b1b1:	mov    DWORD PTR [rbp-0x3c],0x0
  40b1b8:	xor    esi,esi
  40b1ba:	mov    BYTE PTR [rbp-0x3d],0x0
  40b1be:	mov    BYTE PTR [rbp-0x32],0x0
  40b1c2:	xor    r12d,r12d
  40b1c5:	jmp    40b1cb <_setlocale+0xcbf>
  40b1c7:	lea    rbx,[rbx+0x1]
  40b1cb:	movsx  eax,BYTE PTR [rbx]
  40b1ce:	cmp    eax,0x20
  40b1d1:	je     40b1c7 <_setlocale+0xcbb>
  40b1d3:	cmp    eax,0x9
  40b1d6:	je     40b1c7 <_setlocale+0xcbb>
  40b1d8:	cmp    eax,0xa
  40b1db:	je     40b1c7 <_setlocale+0xcbb>
  40b1dd:	cmp    eax,0xd
  40b1e0:	je     40b1c7 <_setlocale+0xcbb>
  40b1e2:	movsx  eax,BYTE PTR [rbx]
  40b1e5:	cmp    eax,0x2d
  40b1e8:	je     40b1ef <_setlocale+0xce3>
  40b1ea:	cmp    eax,0x2b
  40b1ed:	jne    40b1f8 <_setlocale+0xcec>
  40b1ef:	mov    al,BYTE PTR [rbx]
  40b1f1:	mov    BYTE PTR [rbp-0x3d],al
  40b1f4:	lea    rbx,[rbx+0x1]
  40b1f8:	cmp    BYTE PTR [rbx],0x30
  40b1fb:	jne    40b220 <_setlocale+0xd14>
  40b1fd:	lea    rbx,[rbx+0x1]
  40b201:	movsx  eax,BYTE PTR [rbx]
  40b204:	cmp    eax,0x58
  40b207:	je     40b20e <_setlocale+0xd02>
  40b209:	cmp    eax,0x78
  40b20c:	jne    40b217 <_setlocale+0xd0b>
  40b20e:	mov    DWORD PTR [rbp-0x3c],0x10
  40b215:	jmp    40b227 <_setlocale+0xd1b>
  40b217:	mov    DWORD PTR [rbp-0x3c],0x8
  40b21e:	jmp    40b227 <_setlocale+0xd1b>
  40b220:	mov    DWORD PTR [rbp-0x3c],0xa
  40b227:	mov    eax,DWORD PTR [rbp+0x20]
  40b22a:	or     eax,eax
  40b22c:	jne    40b234 <_setlocale+0xd28>
  40b22e:	mov    eax,DWORD PTR [rbp-0x3c]
  40b231:	mov    DWORD PTR [rbp+0x20],eax
  40b234:	cmp    DWORD PTR [rbp+0x20],0x10
  40b238:	jne    40b244 <_setlocale+0xd38>
  40b23a:	cmp    DWORD PTR [rbp-0x3c],0x10
  40b23e:	jne    40b244 <_setlocale+0xd38>
  40b240:	lea    rbx,[rbx+0x1]
  40b244:	cmp    DWORD PTR [rbp+0x20],0xa
  40b248:	jg     40b25b <_setlocale+0xd4f>
  40b24a:	mov    eax,DWORD PTR [rbp+0x20]
  40b24d:	sub    eax,0x1
  40b250:	movsx  eax,al
  40b253:	add    eax,0x30
  40b256:	mov    BYTE PTR [rbp-0x31],al
  40b259:	jmp    40b26e <_setlocale+0xd62>
  40b25b:	mov    BYTE PTR [rbp-0x31],0x39
  40b25f:	mov    eax,DWORD PTR [rbp+0x20]
  40b262:	sub    eax,0xb
  40b265:	movsx  eax,al
  40b268:	add    eax,0x61
  40b26b:	mov    BYTE PTR [rbp-0x32],al
  40b26e:	or     DWORD PTR [rbp+0x28],0x0
  40b272:	je     40b2ab <_setlocale+0xd9f>
  40b274:	mov    DWORD PTR [rbp-0x38],0x7fffffff
  40b27b:	mov    DWORD PTR [rbp-0x44],0x7fffffff
  40b282:	cmp    BYTE PTR [rbp-0x3d],0x2d
  40b286:	jne    40b29b <_setlocale+0xd8f>
  40b288:	mov    eax,0x80000000
  40b28d:	neg    eax
  40b28f:	mov    DWORD PTR [rbp-0x38],eax
  40b292:	mov    DWORD PTR [rbp-0x44],0x80000000
  40b299:	jmp    40b2b9 <_setlocale+0xdad>
  40b29b:	mov    DWORD PTR [rbp-0x38],0x7fffffff
  40b2a2:	mov    DWORD PTR [rbp-0x44],0x7fffffff
  40b2a9:	jmp    40b2b9 <_setlocale+0xdad>
  40b2ab:	mov    DWORD PTR [rbp-0x38],0xffffffff
  40b2b2:	mov    DWORD PTR [rbp-0x44],0xffffffff
  40b2b9:	mov    eax,DWORD PTR [rbp-0x38]
  40b2bc:	mov    ecx,DWORD PTR [rbp+0x20]
  40b2bf:	xor    edx,edx
  40b2c1:	div    ecx
  40b2c3:	mov    DWORD PTR [rbp-0x48],eax
  40b2c6:	mov    r15d,eax
  40b2c9:	jmp    40b35b <_setlocale+0xe4f>
  40b2ce:	movsx  eax,BYTE PTR [rbx]
  40b2d1:	cmp    eax,0x30
  40b2d4:	jl     40b2e8 <_setlocale+0xddc>
  40b2d6:	movsx  ecx,BYTE PTR [rbp-0x31]
  40b2da:	cmp    eax,ecx
  40b2dc:	jg     40b2e8 <_setlocale+0xddc>
  40b2de:	movsx  r13d,BYTE PTR [rbx]
  40b2e2:	sub    r13d,0x30
  40b2e6:	jmp    40b32b <_setlocale+0xe1f>
  40b2e8:	movsx  eax,BYTE PTR [rbx]
  40b2eb:	cmp    eax,0x61
  40b2ee:	jl     40b302 <_setlocale+0xdf6>
  40b2f0:	movsx  ecx,BYTE PTR [rbp-0x32]
  40b2f4:	cmp    eax,ecx
  40b2f6:	jg     40b302 <_setlocale+0xdf6>
  40b2f8:	movsx  r13d,BYTE PTR [rbx]
  40b2fc:	sub    r13d,0x57
  40b300:	jmp    40b32b <_setlocale+0xe1f>
  40b302:	movsx  eax,BYTE PTR [rbx]
  40b305:	mov    DWORD PTR [rbp-0x4c],eax
  40b308:	cmp    eax,0x41
  40b30b:	jl     40b368 <_setlocale+0xe5c>
  40b30d:	movsx  ecx,BYTE PTR [rbp-0x32]
  40b311:	call   40b5a0 <_setlocale+0x1094>
  40b316:	mov    DWORD PTR [rbp-0x50],eax
  40b319:	movsx  eax,al
  40b31c:	mov    ecx,DWORD PTR [rbp-0x4c]
  40b31f:	cmp    ecx,eax
  40b321:	jg     40b368 <_setlocale+0xe5c>
  40b323:	movsx  r13d,BYTE PTR [rbx]
  40b327:	sub    r13d,0x37
  40b32b:	cmp    r12d,r15d
  40b32e:	jbe    40b335 <_setlocale+0xe29>
  40b330:	add    esi,0x1
  40b333:	jmp    40b35b <_setlocale+0xe4f>
  40b335:	mov    eax,r12d
  40b338:	mul    DWORD PTR [rbp+0x20]
  40b33b:	mov    DWORD PTR [rbp-0x54],eax
  40b33e:	mov    r14d,eax
  40b341:	mov    eax,DWORD PTR [rbp-0x38]
  40b344:	sub    eax,r14d
  40b347:	cmp    r13d,eax
  40b34a:	jbe    40b351 <_setlocale+0xe45>
  40b34c:	add    esi,0x1
  40b34f:	jmp    40b35b <_setlocale+0xe4f>
  40b351:	mov    r12d,r14d
  40b354:	add    r12d,r13d
  40b357:	lea    rbx,[rbx+0x1]
  40b35b:	cmp    BYTE PTR [rbx],0x0
  40b35e:	je     40b368 <_setlocale+0xe5c>
  40b360:	or     esi,esi
  40b362:	je     40b2ce <_setlocale+0xdc2>
  40b368:	or     esi,esi
  40b36a:	jne    40b377 <_setlocale+0xe6b>
  40b36c:	cmp    BYTE PTR [rbp-0x3d],0x2d
  40b370:	jne    40b38a <_setlocale+0xe7e>
  40b372:	neg    r12d
  40b375:	jmp    40b38a <_setlocale+0xe7e>
  40b377:	mov    rax,QWORD PTR ds:0x4119c0
  40b37f:	mov    DWORD PTR [rax+0x8],0x2
  40b386:	mov    r12d,DWORD PTR [rbp-0x44]
  40b38a:	cmp    QWORD PTR [rbp+0x18],0x0
  40b38f:	je     40b398 <_setlocale+0xe8c>
  40b391:	mov    rax,QWORD PTR [rbp+0x18]
  40b395:	mov    QWORD PTR [rax],rbx
  40b398:	mov    eax,r12d
  40b39b:	add    rsp,0x60
  40b39f:	pop    r15
  40b3a1:	pop    r14
  40b3a3:	pop    r13
  40b3a5:	pop    r12
  40b3a7:	pop    rsi
  40b3a8:	pop    rbx
  40b3a9:	leave  
  40b3aa:	ret    
  40b3ab:	push   rbp
  40b3ac:	mov    rbp,rsp
  40b3af:	push   rbx
  40b3b0:	sub    rsp,0x8
  40b3b4:	sub    rsp,0x40
  40b3b8:	mov    QWORD PTR [rbp+0x20],r8
  40b3bc:	mov    rbx,rdx
  40b3bf:	mov    QWORD PTR [rbp+0x10],rcx
  40b3c3:	xor    r9d,r9d
  40b3c6:	mov    r8d,r8d
  40b3c9:	lea    rdx,[rbx]
  40b3cc:	mov    rcx,rcx
  40b3cf:	call   40b190 <_setlocale+0xc84>
  40b3d4:	add    rsp,0x40
  40b3d8:	add    rsp,0x8
  40b3dc:	pop    rbx
  40b3dd:	leave  
  40b3de:	ret    
  40b3df:	push   rbp
  40b3e0:	mov    rbp,rsp
  40b3e3:	push   rbx
  40b3e4:	sub    rsp,0x8
  40b3e8:	sub    rsp,0x50
  40b3ec:	mov    QWORD PTR [rbp+0x20],r8
  40b3f0:	mov    rbx,rdx
  40b3f3:	mov    QWORD PTR [rbp+0x10],rcx
  40b3f7:	mov    r9,0x1
  40b3fe:	mov    r8d,r8d
  40b401:	lea    rdx,[rbx]
  40b404:	mov    rcx,rcx
  40b407:	call   40b190 <_setlocale+0xc84>
  40b40c:	mov    DWORD PTR [rbp-0x14],eax
  40b40f:	mov    eax,eax
  40b411:	add    rsp,0x50
  40b415:	add    rsp,0x8
  40b419:	pop    rbx
  40b41a:	leave  
  40b41b:	ret    
  40b41c:	add    BYTE PTR [rax],al
  40b41e:	add    BYTE PTR [rax],al
  40b420:	push   rbp
  40b421:	mov    rbp,rsp
  40b424:	push   rbx
  40b425:	sub    rsp,0x8
  40b429:	sub    rsp,0x10
  40b42d:	mov    QWORD PTR [rbp+0x18],rdx
  40b431:	mov    QWORD PTR [rbp+0x10],rcx
  40b435:	mov    rax,rcx
  40b438:	mov    ecx,DWORD PTR [rax+0x4]
  40b43b:	mov    rbx,rcx
  40b43e:	shl    rbx,0x20
  40b442:	mov    eax,DWORD PTR [rax]
  40b444:	mov    r11,rbx
  40b447:	add    r11,rax
  40b44a:	mov    rax,rdx
  40b44d:	mov    QWORD PTR [rbp-0x18],rax
  40b451:	movabs rcx,0x19db1ded53e8000
  40b45b:	mov    rax,r11
  40b45e:	sub    rax,rcx
  40b461:	mov    r10,0x989680
  40b468:	cqo    
  40b46a:	idiv   r10
  40b46d:	mov    rcx,QWORD PTR [rbp-0x18]
  40b471:	mov    DWORD PTR [rcx],eax
  40b473:	add    rsp,0x10
  40b477:	add    rsp,0x8
  40b47b:	pop    rbx
  40b47c:	leave  
  40b47d:	ret    
  40b47e:	push   rbp
  40b47f:	mov    rbp,rsp
  40b482:	push   rbx
  40b483:	sub    rsp,0x8
  40b487:	sub    rsp,0x40
  40b48b:	mov    QWORD PTR [rbp+0x18],rdx
  40b48f:	mov    rbx,rcx
  40b492:	lea    rdx,[rbp-0x18]
  40b496:	lea    rcx,[rbx]
  40b499:	call   QWORD PTR ds:0x416184
  40b4a0:	mov    rdx,QWORD PTR [rbp+0x18]
  40b4a4:	lea    rcx,[rbp-0x18]
  40b4a8:	call   40b420 <_setlocale+0xf14>
  40b4ad:	add    rsp,0x40
  40b4b1:	add    rsp,0x8
  40b4b5:	pop    rbx
  40b4b6:	leave  
  40b4b7:	ret    
  40b4b8:	push   rbp
  40b4b9:	mov    rbp,rsp
  40b4bc:	push   rbx
  40b4bd:	sub    rsp,0x8
  40b4c1:	sub    rsp,0x50
  40b4c5:	mov    rbx,rcx
  40b4c8:	lea    rcx,[rbp-0x24]
  40b4cc:	call   QWORD PTR ds:0x41618c
  40b4d3:	lea    rdx,[rbp-0x14]
  40b4d7:	lea    rcx,[rbp-0x24]
  40b4db:	call   40b47e <_setlocale+0xf72>
  40b4e0:	or     rbx,rbx
  40b4e3:	je     40b4ea <_setlocale+0xfde>
  40b4e5:	mov    eax,DWORD PTR [rbp-0x14]
  40b4e8:	mov    DWORD PTR [rbx],eax
  40b4ea:	mov    eax,DWORD PTR [rbp-0x14]
  40b4ed:	add    rsp,0x50
  40b4f1:	add    rsp,0x8
  40b4f5:	pop    rbx
  40b4f6:	leave  
  40b4f7:	ret    
	...
  40b500:	push   rbp
  40b501:	mov    rbp,rsp
  40b504:	push   rbx
  40b505:	push   rsi
  40b506:	sub    rsp,0x250
  40b50d:	mov    rsi,rcx
  40b510:	lea    rdx,[rbp-0x210]
  40b517:	mov    rcx,0x200
  40b51e:	call   QWORD PTR ds:0x4161ac
  40b525:	mov    DWORD PTR [rbp-0x214],eax
  40b52b:	mov    ebx,eax
  40b52d:	or     ebx,ebx
  40b52f:	je     40b539 <_setlocale+0x102d>
  40b531:	cmp    ebx,0x200
  40b537:	jl     40b547 <_setlocale+0x103b>
  40b539:	mov    BYTE PTR [rbp-0x210],0x2e
  40b540:	mov    BYTE PTR [rbp-0x20f],0x0
  40b547:	mov    rax,0x0
  40b54e:	cmp    rsi,rax
  40b551:	jne    40b55b <_setlocale+0x104f>
  40b553:	lea    rsi,ds:0x411170
  40b55b:	lea    r9,[rsi]
  40b55e:	xor    r8d,r8d
  40b561:	lea    rdx,ds:0x414b70
  40b569:	lea    rcx,[rbp-0x210]
  40b570:	call   QWORD PTR ds:0x4161b4
  40b577:	mov    DWORD PTR [rbp-0x218],eax
  40b57d:	mov    ebx,eax
  40b57f:	or     ebx,ebx
  40b581:	jne    40b58c <_setlocale+0x1080>
  40b583:	mov    rax,0x0
  40b58a:	jmp    40b58f <_setlocale+0x1083>
  40b58c:	lea    rax,[rsi]
  40b58f:	add    rsp,0x250
  40b596:	pop    rsi
  40b597:	pop    rbx
  40b598:	leave  
  40b599:	ret    
  40b59a:	nop
  40b59b:	nop
  40b59c:	add    BYTE PTR [rax],al
  40b59e:	add    BYTE PTR [rax],al
  40b5a0:	push   rbp
  40b5a1:	mov    rbp,rsp
  40b5a4:	mov    r11,rcx
  40b5a7:	cmp    r11d,0x61
  40b5ab:	jl     40b5b7 <_setlocale+0x10ab>
  40b5ad:	cmp    r11d,0x7a
  40b5b1:	jg     40b5b7 <_setlocale+0x10ab>
  40b5b3:	sub    r11d,0x20
  40b5b7:	mov    eax,r11d
  40b5ba:	leave  
  40b5bb:	ret    
  40b5bc:	add    BYTE PTR [rax],al
  40b5be:	add    BYTE PTR [rax],al
  40b5c0:	push   rbp
  40b5c1:	mov    rbp,rsp
  40b5c4:	push   rsi
  40b5c5:	push   rdi
  40b5c6:	sub    rsp,0x10
  40b5ca:	mov    QWORD PTR [rbp+0x18],rdx
  40b5ce:	mov    r8,rcx
  40b5d1:	mov    eax,edx
  40b5d3:	mov    WORD PTR [rbp+0x18],ax
  40b5d7:	mov    QWORD PTR [rbp-0x20],r8
  40b5db:	or     r8,r8
  40b5de:	jne    40b5e7 <_setlocale+0x10db>
  40b5e0:	xor    eax,eax
  40b5e2:	jmp    40b6c7 <_setlocale+0x11bb>
  40b5e7:	movzx  eax,WORD PTR [rbp+0x18]
  40b5eb:	cmp    eax,0x7f
  40b5ee:	jle    40b604 <_setlocale+0x10f8>
  40b5f0:	cmp    eax,0xff
  40b5f5:	jg     40b620 <_setlocale+0x1114>
  40b5f7:	movsxd rax,eax
  40b5fa:	test   BYTE PTR [rax*1+0x413521],0x20
  40b602:	je     40b620 <_setlocale+0x1114>
  40b604:	lea    rax,[r8*1+0x0]
  40b60c:	lea    r8,[rax+0x1]
  40b610:	movzx  ecx,WORD PTR [rbp+0x18]
  40b614:	mov    BYTE PTR [rax],cl
  40b616:	mov    eax,0x1
  40b61b:	jmp    40b6c7 <_setlocale+0x11bb>
  40b620:	movzx  eax,WORD PTR [rbp+0x18]
  40b624:	and    eax,0x8080
  40b629:	cmp    eax,0x20000000
  40b62e:	je     40b659 <_setlocale+0x114d>
  40b630:	jg     40b63b <_setlocale+0x112f>
  40b632:	cmp    eax,0x10000000
  40b637:	je     40b646 <_setlocale+0x113a>
  40b639:	jmp    40b66c <_setlocale+0x1160>
  40b63b:	cmp    eax,0x30000000
  40b640:	jne    40b66c <_setlocale+0x1160>
  40b642:	xor    esi,esi
  40b644:	jmp    40b673 <_setlocale+0x1167>
  40b646:	lea    rax,[r8*1+0x0]
  40b64e:	lea    r8,[rax+0x1]
  40b652:	mov    BYTE PTR [rax],0x8e
  40b655:	xor    esi,esi
  40b657:	jmp    40b673 <_setlocale+0x1167>
  40b659:	lea    rax,[r8*1+0x0]
  40b661:	lea    r8,[rax+0x1]
  40b665:	mov    BYTE PTR [rax],0x8f
  40b668:	xor    esi,esi
  40b66a:	jmp    40b673 <_setlocale+0x1167>
  40b66c:	mov    eax,0xffffffff
  40b671:	jmp    40b6c7 <_setlocale+0x11bb>
  40b673:	mov    r11d,esi
  40b676:	or     esi,esi
  40b678:	jg     40b6b3 <_setlocale+0x11a7>
  40b67a:	mov    eax,0xffffffff
  40b67f:	jmp    40b6c7 <_setlocale+0x11bb>
  40b681:	movzx  eax,WORD PTR [rbp+0x18]
  40b685:	or     eax,0x80
  40b68a:	mov    BYTE PTR [rbp-0x11],al
  40b68d:	shr    WORD PTR [rbp+0x18],0x7
  40b692:	movzx  rax,BYTE PTR [rbp-0x11]
  40b697:	test   BYTE PTR [rax*1+0x413521],0x20
  40b69f:	je     40b6a8 <_setlocale+0x119c>
  40b6a1:	mov    eax,0xffffffff
  40b6a6:	jmp    40b6c7 <_setlocale+0x11bb>
  40b6a8:	movsxd rax,r11d
  40b6ab:	movzx  ecx,BYTE PTR [rbp-0x11]
  40b6af:	mov    BYTE PTR [r8+rax*1],cl
  40b6b3:	mov    eax,r11d
  40b6b6:	sub    r11d,0x1
  40b6ba:	or     eax,eax
  40b6bc:	jne    40b681 <_setlocale+0x1175>
  40b6be:	mov    rax,r8
  40b6c1:	sub    rax,QWORD PTR [rbp-0x20]
  40b6c5:	add    eax,esi
  40b6c7:	add    rsp,0x10
  40b6cb:	pop    rdi
  40b6cc:	pop    rsi
  40b6cd:	leave  
  40b6ce:	ret    
  40b6cf:	nop
  40b6d0:	push   rbp
  40b6d1:	mov    rbp,rsp
  40b6d4:	push   rsi
  40b6d5:	sub    rsp,0x8
  40b6d9:	mov    r11,r8
  40b6dc:	mov    QWORD PTR [rbp+0x18],rdx
  40b6e0:	mov    QWORD PTR [rbp+0x10],rcx
  40b6e4:	mov    rsi,QWORD PTR [rbp+0x10]
  40b6e8:	mov    r8,rdx
  40b6eb:	jmp    40b70a <_setlocale+0x11fe>
  40b6ed:	lea    rax,[rsi]
  40b6f0:	lea    rsi,[rax+0x2]
  40b6f4:	lea    rcx,[r8*1+0x0]
  40b6fc:	lea    r8,[rcx+0x2]
  40b700:	mov    cx,WORD PTR [rcx]
  40b703:	mov    WORD PTR [rax],cx
  40b706:	sub    r11,0x1
  40b70a:	or     r11,r11
  40b70d:	jne    40b6ed <_setlocale+0x11e1>
  40b70f:	mov    rax,QWORD PTR [rbp+0x10]
  40b713:	add    rsp,0x8
  40b717:	pop    rsi
  40b718:	leave  
  40b719:	ret    
  40b71a:	push   rbp
  40b71b:	mov    rbp,rsp
  40b71e:	mov    r8,rdx
  40b721:	mov    QWORD PTR [rbp+0x10],rcx
  40b725:	mov    r11,rcx
  40b728:	lea    rax,[r11]
  40b72b:	lea    r11,[rax+0x2]
  40b72f:	lea    rcx,[r8*1+0x0]
  40b737:	lea    r8,[rcx+0x2]
  40b73b:	mov    cx,WORD PTR [rcx]
  40b73e:	mov    WORD PTR [rax],cx
  40b741:	mov    eax,ecx
  40b743:	and    eax,0xffff
  40b748:	jne    40b728 <_setlocale+0x121c>
  40b74a:	mov    rax,QWORD PTR [rbp+0x10]
  40b74e:	leave  
  40b74f:	ret    
  40b750:	push   rbp
  40b751:	mov    rbp,rsp
  40b754:	push   rsi
  40b755:	sub    rsp,0x8
  40b759:	mov    r8,r8
  40b75c:	mov    rsi,rdx
  40b75f:	mov    QWORD PTR [rbp+0x10],rcx
  40b763:	mov    r11,QWORD PTR [rbp+0x10]
  40b767:	jmp    40b785 <_setlocale+0x1279>
  40b769:	mov    ax,WORD PTR [rsi]
  40b76c:	mov    WORD PTR [r11],ax
  40b770:	mov    eax,eax
  40b772:	and    eax,0xffff
  40b777:	je     40b77d <_setlocale+0x1271>
  40b779:	lea    rsi,[rsi+0x2]
  40b77d:	lea    r11,[r11+0x2]
  40b781:	sub    r8,0x1
  40b785:	or     r8,r8
  40b788:	jne    40b769 <_setlocale+0x125d>
  40b78a:	mov    rax,QWORD PTR [rbp+0x10]
  40b78e:	add    rsp,0x8
  40b792:	pop    rsi
  40b793:	leave  
  40b794:	ret    
  40b795:	push   rbp
  40b796:	mov    rbp,rsp
  40b799:	mov    r8,rdx
  40b79c:	mov    QWORD PTR [rbp+0x10],rcx
  40b7a0:	mov    r11,rcx
  40b7a3:	lea    rax,[r11]
  40b7a6:	lea    r11,[rax+0x2]
  40b7aa:	cmp    WORD PTR [rax],0x0
  40b7ae:	jne    40b7a3 <_setlocale+0x1297>
  40b7b0:	lea    r11,[r11-0x2]
  40b7b4:	lea    rax,[r11]
  40b7b7:	lea    r11,[rax+0x2]
  40b7bb:	lea    rcx,[r8*1+0x0]
  40b7c3:	lea    r8,[rcx+0x2]
  40b7c7:	mov    cx,WORD PTR [rcx]
  40b7ca:	mov    WORD PTR [rax],cx
  40b7cd:	mov    eax,ecx
  40b7cf:	and    eax,0xffff
  40b7d4:	jne    40b7b4 <_setlocale+0x12a8>
  40b7d6:	mov    rax,QWORD PTR [rbp+0x10]
  40b7da:	leave  
  40b7db:	ret    
  40b7dc:	push   rbp
  40b7dd:	mov    rbp,rsp
  40b7e0:	push   rsi
  40b7e1:	sub    rsp,0x8
  40b7e5:	mov    r8,r8
  40b7e8:	mov    rsi,rdx
  40b7eb:	mov    QWORD PTR [rbp+0x10],rcx
  40b7ef:	mov    r11,QWORD PTR [rbp+0x10]
  40b7f3:	lea    rax,[r11]
  40b7f6:	lea    r11,[rax+0x2]
  40b7fa:	cmp    WORD PTR [rax],0x0
  40b7fe:	jne    40b7f3 <_setlocale+0x12e7>
  40b800:	lea    r11,[r11-0x2]
  40b804:	jmp    40b80e <_setlocale+0x1302>
  40b806:	sub    r8,0x1
  40b80a:	lea    r11,[r11+0x2]
  40b80e:	or     r8,r8
  40b811:	je     40b82a <_setlocale+0x131e>
  40b813:	lea    rax,[rsi]
  40b816:	lea    rsi,[rax+0x2]
  40b81a:	mov    ax,WORD PTR [rax]
  40b81d:	mov    WORD PTR [r11],ax
  40b821:	mov    eax,eax
  40b823:	and    eax,0xffff
  40b828:	jne    40b806 <_setlocale+0x12fa>
  40b82a:	mov    WORD PTR [r11],0x0
  40b830:	mov    rax,QWORD PTR [rbp+0x10]
  40b834:	add    rsp,0x8
  40b838:	pop    rsi
  40b839:	leave  
  40b83a:	ret    
  40b83b:	push   rbp
  40b83c:	mov    rbp,rsp
  40b83f:	push   rsi
  40b840:	sub    rsp,0x8
  40b844:	mov    r8,rdx
  40b847:	mov    r11,rcx
  40b84a:	jmp    40b861 <_setlocale+0x1355>
  40b84c:	lea    rax,[r11]
  40b84f:	lea    r11,[rax+0x2]
  40b853:	cmp    WORD PTR [rax],0x0
  40b857:	jne    40b85d <_setlocale+0x1351>
  40b859:	xor    eax,eax
  40b85b:	jmp    40b88c <_setlocale+0x1380>
  40b85d:	lea    r8,[r8+0x2]
  40b861:	mov    ax,WORD PTR [r11]
  40b865:	cmp    ax,WORD PTR [r8*1+0x0]
  40b86e:	je     40b84c <_setlocale+0x1340>
  40b870:	mov    ax,WORD PTR [r11]
  40b874:	cmp    ax,WORD PTR [r8*1+0x0]
  40b87d:	setae  al
  40b880:	and    eax,0x1
  40b883:	sub    eax,0x1
  40b886:	and    eax,0xfffffffe
  40b889:	add    eax,0x1
  40b88c:	add    rsp,0x8
  40b890:	pop    rsi
  40b891:	leave  
  40b892:	ret    
  40b893:	push   rbp
  40b894:	mov    rbp,rsp
  40b897:	push   rsi
  40b898:	push   rdi
  40b899:	push   r12
  40b89b:	sub    rsp,0x8
  40b89f:	mov    rsi,r8
  40b8a2:	mov    r11,rdx
  40b8a5:	mov    r8,rcx
  40b8a8:	jmp    40b8c8 <_setlocale+0x13bc>
  40b8aa:	lea    rax,[r8*1+0x0]
  40b8b2:	lea    r8,[rax+0x2]
  40b8b6:	cmp    WORD PTR [rax],0x0
  40b8ba:	jne    40b8c0 <_setlocale+0x13b4>
  40b8bc:	xor    eax,eax
  40b8be:	jmp    40b904 <_setlocale+0x13f8>
  40b8c0:	lea    r11,[r11+0x2]
  40b8c4:	sub    rsi,0x1
  40b8c8:	or     rsi,rsi
  40b8cb:	je     40b8dc <_setlocale+0x13d0>
  40b8cd:	mov    ax,WORD PTR [r8*1+0x0]
  40b8d6:	cmp    ax,WORD PTR [r11]
  40b8da:	je     40b8aa <_setlocale+0x139e>
  40b8dc:	or     rsi,rsi
  40b8df:	jne    40b8e5 <_setlocale+0x13d9>
  40b8e1:	xor    edi,edi
  40b8e3:	jmp    40b902 <_setlocale+0x13f6>
  40b8e5:	mov    ax,WORD PTR [r8*1+0x0]
  40b8ee:	cmp    ax,WORD PTR [r11]
  40b8f2:	setae  dil
  40b8f6:	and    edi,0x1
  40b8f9:	sub    edi,0x1
  40b8fc:	and    edi,0xfffffffe
  40b8ff:	add    edi,0x1
  40b902:	mov    eax,edi
  40b904:	add    rsp,0x8
  40b908:	pop    r12
  40b90a:	pop    rdi
  40b90b:	pop    rsi
  40b90c:	leave  
  40b90d:	ret    
  40b90e:	push   rbp
  40b90f:	mov    rbp,rsp
  40b912:	mov    QWORD PTR [rbp+0x18],rdx
  40b916:	mov    r11,rcx
  40b919:	mov    eax,edx
  40b91b:	mov    WORD PTR [rbp+0x18],ax
  40b91f:	movzx  eax,WORD PTR [r11]
  40b923:	movzx  ecx,WORD PTR [rbp+0x18]
  40b927:	cmp    eax,ecx
  40b929:	jne    40b930 <_setlocale+0x1424>
  40b92b:	lea    rax,[r11]
  40b92e:	jmp    40b944 <_setlocale+0x1438>
  40b930:	lea    rax,[r11]
  40b933:	lea    r11,[rax+0x2]
  40b937:	cmp    WORD PTR [rax],0x0
  40b93b:	jne    40b91f <_setlocale+0x1413>
  40b93d:	mov    rax,0x0
  40b944:	leave  
  40b945:	ret    
  40b946:	push   rbp
  40b947:	mov    rbp,rsp
  40b94a:	push   rsi
  40b94b:	sub    rsp,0x8
  40b94f:	mov    rsi,rdx
  40b952:	mov    QWORD PTR [rbp+0x10],rcx
  40b956:	mov    r8,QWORD PTR [rbp+0x10]
  40b95a:	jmp    40b981 <_setlocale+0x1475>
  40b95c:	lea    r11,[rsi]
  40b95f:	jmp    40b976 <_setlocale+0x146a>
  40b961:	movzx  eax,WORD PTR [r11]
  40b965:	movzx  ecx,WORD PTR [r8*1+0x0]
  40b96e:	cmp    eax,ecx
  40b970:	je     40b98d <_setlocale+0x1481>
  40b972:	lea    r11,[r11+0x2]
  40b976:	cmp    WORD PTR [r11],0x0
  40b97b:	jne    40b961 <_setlocale+0x1455>
  40b97d:	lea    r8,[r8+0x2]
  40b981:	cmp    WORD PTR [r8*1+0x0],0x0
  40b98b:	jne    40b95c <_setlocale+0x1450>
  40b98d:	mov    rax,r8
  40b990:	sub    rax,QWORD PTR [rbp+0x10]
  40b994:	mov    r10,0x2
  40b99b:	cqo    
  40b99d:	idiv   r10
  40b9a0:	add    rsp,0x8
  40b9a4:	pop    rsi
  40b9a5:	leave  
  40b9a6:	ret    
  40b9a7:	push   rbp
  40b9a8:	mov    rbp,rsp
  40b9ab:	push   rsi
  40b9ac:	sub    rsp,0x8
  40b9b0:	mov    rsi,rdx
  40b9b3:	mov    QWORD PTR [rbp+0x10],rcx
  40b9b7:	mov    r8,QWORD PTR [rbp+0x10]
  40b9bb:	jmp    40b9ec <_setlocale+0x14e0>
  40b9bd:	lea    r11,[rsi]
  40b9c0:	jmp    40b9e1 <_setlocale+0x14d5>
  40b9c2:	movzx  eax,WORD PTR [r11]
  40b9c6:	movzx  ecx,WORD PTR [r8*1+0x0]
  40b9cf:	cmp    eax,ecx
  40b9d1:	jne    40b9dd <_setlocale+0x14d1>
  40b9d3:	lea    rax,[r8*1+0x0]
  40b9db:	jmp    40b9ff <_setlocale+0x14f3>
  40b9dd:	lea    r11,[r11+0x2]
  40b9e1:	cmp    WORD PTR [r11],0x0
  40b9e6:	jne    40b9c2 <_setlocale+0x14b6>
  40b9e8:	lea    r8,[r8+0x2]
  40b9ec:	cmp    WORD PTR [r8*1+0x0],0x0
  40b9f6:	jne    40b9bd <_setlocale+0x14b1>
  40b9f8:	mov    rax,0x0
  40b9ff:	add    rsp,0x8
  40ba03:	pop    rsi
  40ba04:	leave  
  40ba05:	ret    
  40ba06:	push   rbp
  40ba07:	mov    rbp,rsp
  40ba0a:	mov    QWORD PTR [rbp+0x18],rdx
  40ba0e:	mov    r11,rcx
  40ba11:	mov    eax,edx
  40ba13:	mov    WORD PTR [rbp+0x18],ax
  40ba17:	mov    r8,0x0
  40ba1e:	movzx  eax,WORD PTR [r11]
  40ba22:	movzx  ecx,WORD PTR [rbp+0x18]
  40ba26:	cmp    eax,ecx
  40ba28:	jne    40ba2d <_setlocale+0x1521>
  40ba2a:	lea    r8,[r11]
  40ba2d:	lea    rax,[r11]
  40ba30:	lea    r11,[rax+0x2]
  40ba34:	cmp    WORD PTR [rax],0x0
  40ba38:	jne    40ba1e <_setlocale+0x1512>
  40ba3a:	lea    rax,[r8*1+0x0]
  40ba42:	leave  
  40ba43:	ret    
  40ba44:	push   rbp
  40ba45:	mov    rbp,rsp
  40ba48:	push   rsi
  40ba49:	sub    rsp,0x8
  40ba4d:	mov    rsi,rdx
  40ba50:	mov    QWORD PTR [rbp+0x10],rcx
  40ba54:	mov    r8,QWORD PTR [rbp+0x10]
  40ba58:	lea    r11,[rsi]
  40ba5b:	jmp    40ba7b <_setlocale+0x156f>
  40ba5d:	lea    rax,[r11]
  40ba60:	lea    r11,[rax+0x2]
  40ba64:	movzx  eax,WORD PTR [rax]
  40ba67:	movzx  ecx,WORD PTR [r8*1+0x0]
  40ba70:	cmp    eax,ecx
  40ba72:	jne    40ba7b <_setlocale+0x156f>
  40ba74:	lea    r8,[r8+0x2]
  40ba78:	lea    r11,[rsi]
  40ba7b:	cmp    WORD PTR [r11],0x0
  40ba80:	jne    40ba5d <_setlocale+0x1551>
  40ba82:	mov    rax,r8
  40ba85:	sub    rax,QWORD PTR [rbp+0x10]
  40ba89:	mov    r10,0x2
  40ba90:	cqo    
  40ba92:	idiv   r10
  40ba95:	add    rsp,0x8
  40ba99:	pop    rsi
  40ba9a:	leave  
  40ba9b:	ret    
  40ba9c:	push   rbp
  40ba9d:	mov    rbp,rsp
  40baa0:	push   rsi
  40baa1:	push   rdi
  40baa2:	mov    rdi,rdx
  40baa5:	mov    rsi,rcx
  40baa8:	lea    r8,[rsi]
  40baab:	lea    r11,[rdi]
  40baae:	cmp    WORD PTR [r11],0x0
  40bab3:	jne    40baba <_setlocale+0x15ae>
  40bab5:	lea    rax,[rsi]
  40bab8:	jmp    40bb01 <_setlocale+0x15f5>
  40baba:	movzx  eax,WORD PTR [r11]
  40babe:	movzx  ecx,WORD PTR [r8*1+0x0]
  40bac7:	cmp    eax,ecx
  40bac9:	jne    40bad5 <_setlocale+0x15c9>
  40bacb:	lea    r11,[r11+0x2]
  40bacf:	lea    r8,[r8+0x2]
  40bad3:	jmp    40baf8 <_setlocale+0x15ec>
  40bad5:	lea    r11,[rdi]
  40bad8:	cmp    WORD PTR [r8*1+0x0],0x0
  40bae2:	jne    40baed <_setlocale+0x15e1>
  40bae4:	mov    rax,0x0
  40baeb:	jmp    40bb01 <_setlocale+0x15f5>
  40baed:	lea    rax,[rsi+0x2]
  40baf1:	lea    rsi,[rsi+0x2]
  40baf5:	lea    r8,[rax]
  40baf8:	jmp    40baae <_setlocale+0x15a2>
  40bafa:	mov    rax,0x0
  40bb01:	pop    rdi
  40bb02:	pop    rsi
  40bb03:	leave  
  40bb04:	ret    
  40bb05:	push   rbp
  40bb06:	mov    rbp,rsp
  40bb09:	push   rbx
  40bb0a:	push   rsi
  40bb0b:	sub    rsp,0x40
  40bb0f:	mov    QWORD PTR [rbp+0x20],r8
  40bb13:	mov    QWORD PTR [rbp+0x18],rdx
  40bb17:	mov    QWORD PTR [rbp+0x10],rcx
  40bb1b:	mov    rax,QWORD PTR [rbp+0x10]
  40bb1f:	lea    rbx,[rax]
  40bb22:	mov    rcx,0x0
  40bb29:	cmp    rax,rcx
  40bb2c:	jne    40bb3c <_setlocale+0x1630>
  40bb2e:	mov    rax,r8
  40bb31:	mov    rax,QWORD PTR [rax]
  40bb34:	lea    rbx,[rax]
  40bb37:	cmp    rax,rcx
  40bb3a:	je     40bb9d <_setlocale+0x1691>
  40bb3c:	mov    rdx,QWORD PTR [rbp+0x18]
  40bb40:	lea    rcx,[rbx]
  40bb43:	call   40ba44 <_setlocale+0x1538>
  40bb48:	mov    QWORD PTR [rbp-0x18],rax
  40bb4c:	movsxd rax,eax
  40bb4f:	lea    rax,[rbx+rax*2]
  40bb53:	lea    rbx,[rax]
  40bb56:	cmp    WORD PTR [rax],0x0
  40bb5a:	je     40bb89 <_setlocale+0x167d>
  40bb5c:	mov    rdx,QWORD PTR [rbp+0x18]
  40bb60:	lea    rcx,[rbx]
  40bb63:	call   40b9a7 <_setlocale+0x149b>
  40bb68:	mov    QWORD PTR [rbp-0x20],rax
  40bb6c:	mov    rsi,rax
  40bb6f:	mov    rcx,0x0
  40bb76:	cmp    rax,rcx
  40bb79:	je     40bb96 <_setlocale+0x168a>
  40bb7b:	lea    rax,[rsi]
  40bb7e:	lea    rsi,[rax+0x2]
  40bb82:	mov    WORD PTR [rax],0x0
  40bb87:	jmp    40bb96 <_setlocale+0x168a>
  40bb89:	mov    rax,0x0
  40bb90:	lea    rbx,[rax]
  40bb93:	lea    rsi,[rax]
  40bb96:	mov    rax,QWORD PTR [rbp+0x20]
  40bb9a:	mov    QWORD PTR [rax],rsi
  40bb9d:	lea    rax,[rbx]
  40bba0:	add    rsp,0x40
  40bba4:	pop    rsi
  40bba5:	pop    rbx
  40bba6:	leave  
  40bba7:	ret    
  40bba8:	push   rbp
  40bba9:	mov    rbp,rsp
  40bbac:	mov    QWORD PTR [rbp+0x10],rcx
  40bbb0:	mov    r11,rcx
  40bbb3:	jmp    40bbb9 <_setlocale+0x16ad>
  40bbb5:	lea    r11,[r11+0x2]
  40bbb9:	cmp    WORD PTR [r11],0x0
  40bbbe:	jne    40bbb5 <_setlocale+0x16a9>
  40bbc0:	mov    rax,r11
  40bbc3:	sub    rax,QWORD PTR [rbp+0x10]
  40bbc7:	mov    r10,0x2
  40bbce:	cqo    
  40bbd0:	idiv   r10
  40bbd3:	leave  
  40bbd4:	ret    
  40bbd5:	nop
  40bbd6:	nop
  40bbd7:	nop
	...
  40bbe0:	push   rbp
  40bbe1:	mov    rbp,rsp
  40bbe4:	push   rbx
  40bbe5:	sub    rsp,0x8
  40bbe9:	sub    rsp,0x40
  40bbed:	rex.W
  40bbee:	.byte 0x89
  40bbef:	rex.WRB

000000000040bbf0 <_signbit>:
  40bbf0:	adc    BYTE PTR [rbx-0x1],bh
  40bbf6:	rex.W

000000000040bbf7 <signbitf>:
  40bbf7:	mov    eax,ecx
  40bbf9:	rex.W
  40bbfa:	.byte 0x81
  40bbfb:	js     40bc05 <signbitl+0x8>

000000000040bbfd <signbitl>:
  40bbfd:	(bad)  
  40bbfe:	(bad)  
  40bbff:	(bad)  
  40bc00:	push   QWORD PTR [rbp+riz*1+0x48]
  40bc04:	mov    eax,ecx
  40bc06:	mov    rcx,QWORD PTR [rax+0x8]
  40bc0a:	call   QWORD PTR ds:0x416134
  40bc11:	mov    DWORD PTR [rbp-0x14],eax
  40bc14:	or     eax,eax
  40bc16:	sete   bl
  40bc19:	and    ebx,0x1
  40bc1c:	mov    rax,QWORD PTR [rbp+0x10]

000000000040bc20 <OutStreamString>:
  40bc20:	mov    QWORD PTR [rax+0x8],0xffffffffffffffff
  40bc28:	or     ebx,ebx
  40bc2a:	je     40bc33 <OutStreamString+0x13>
  40bc2c:	mov    eax,0xffffffff
  40bc31:	jmp    40bc35 <OutStreamString+0x15>
  40bc33:	xor    eax,eax
  40bc35:	add    rsp,0x40
  40bc39:	add    rsp,0x8
  40bc3d:	pop    rbx
  40bc3e:	leave  
  40bc3f:	ret    
  40bc40:	push   rbp
  40bc41:	mov    rbp,rsp

000000000040bc44 <vsprintf>:
  40bc44:	push   rbx
  40bc45:	push   rsi
  40bc46:	push   rdi
  40bc47:	push   r12
  40bc49:	push   r13
  40bc4b:	sub    rsp,0x8
  40bc4f:	sub    rsp,0x70
  40bc53:	mov    QWORD PTR [rbp+0x20],r8
  40bc57:	mov    rdi,rdx
  40bc5a:	mov    QWORD PTR [rbp+0x10],rcx
  40bc5e:	xor    ebx,ebx
  40bc60:	xor    esi,esi
  40bc62:	xor    r13d,r13d
  40bc65:	mov    DWORD PTR [rbp-0x34],0x0
  40bc6c:	test   edi,0x1
  40bc72:	je     40bc85 <vsprintf+0x41>
  40bc74:	or     ebx,0x80000000
  40bc7a:	mov    esi,0x1
  40bc7f:	mov    r13d,0x3
  40bc85:	test   edi,0x2
  40bc8b:	je     40bc95 <vsprintf+0x51>
  40bc8d:	or     ebx,0x40000000
  40bc93:	xor    esi,esi
  40bc95:	.byte 0xf7
  40bc96:	.byte 0xc7

000000000040bc97 <sprintfv>:
  40bc97:	or     BYTE PTR [rax],al
  40bc99:	add    BYTE PTR [rax],al
  40bc9b:	je     40bca5 <sprintfv+0xe>
  40bc9d:	mov    r13d,0x2
  40bca3:	xor    esi,esi
  40bca5:	test   edi,0x4
  40bcab:	je     40bcb8 <sprintfv+0x21>
  40bcad:	mov    r13d,0x4
  40bcb3:	mov    esi,0x3
  40bcb8:	mov    DWORD PTR [rsp+0x38],0x0
  40bcc0:	mov    QWORD PTR [rsp+0x30],0x0
  40bcc9:	mov    r8d,DWORD PTR [rbp-0x34]
  40bccd:	mov    DWORD PTR [rsp+0x28],r8d
  40bcd2:	mov    DWORD PTR [rsp+0x20],r13d
  40bcd7:	mov    r9,0x0
  40bcde:	mov    r8d,esi
  40bce1:	mov    edx,ebx
  40bce3:	mov    rcx,QWORD PTR [rbp+0x10]
  40bce7:	call   QWORD PTR ds:0x41611c
  40bcee:	rex.W

000000000040bcef <sprintf>:
  40bcef:	mov    DWORD PTR [rbp-0x40],eax
  40bcf2:	mov    r12,rax
  40bcf5:	mov    rax,0xffffffffffffffff
  40bcfc:	cmp    r12,rax
  40bcff:	jne    40bd0a <sprintf+0x1b>
  40bd01:	mov    rax,0x0
  40bd08:	jmp    40bd22 <sprintf+0x33>
  40bd0a:	mov    r8d,0x1
  40bd10:	mov    edx,r8d
  40bd13:	lea    rcx,[r12]
  40bd17:	call   QWORD PTR ds:0x4161dc
  40bd1e:	lea    rax,[r12]
  40bd22:	add    rsp,0x70
  40bd26:	add    rsp,0x8
  40bd2a:	pop    r13
  40bd2c:	pop    r12
  40bd2e:	pop    rdi
  40bd2f:	pop    rsi
  40bd30:	pop    rbx
  40bd31:	leave  
  40bd32:	ret    
  40bd33:	nop
	...
  40bd40:	push   rbp
  40bd41:	mov    rbp,rsp
  40bd44:	push   rbx
  40bd45:	push   rsi
  40bd46:	push   rdi
  40bd47:	push   r12
  40bd49:	push   r13
  40bd4b:	sub    rsp,0x8
  40bd4f:	sub    rsp,0x50
  40bd53:	mov    rsi,r8
  40bd56:	mov    rbx,rdx
  40bd59:	mov    QWORD PTR [rbp+0x10],rcx
  40bd5d:	mov    QWORD PTR [rsi+0x8],0xffffffffffffffff
  40bd65:	mov    QWORD PTR [rsi+0x48],0x0
  40bd6d:	mov    QWORD PTR [rsi+0x10],0x0
  40bd75:	lea    rax,[rsi+0x44]
  40bd79:	mov    QWORD PTR [rsi+0x20],rax
  40bd7d:	mov    QWORD PTR [rsi+0x38],rax
  40bd81:	mov    QWORD PTR [rsi+0x28],rax
  40bd85:	mov    BYTE PTR [rsi+0x45],0x0
  40bd89:	cmp    BYTE PTR [rbx],0x72
  40bd8c:	jne    40bd95 <sprintf+0xa6>
  40bd8e:	mov    edi,0x1
  40bd93:	jmp    40bdb8 <__lccstackprobe+0x8>
  40bd95:	cmp    BYTE PTR [rbx],0x77
  40bd98:	jne    40bda2 <sprintf+0xb3>
  40bd9a:	mov    r12d,0x1a
  40bda0:	jmp    40bdb5 <__lccstackprobe+0x5>
  40bda2:	cmp    BYTE PTR [rbx],0x61
  40bda5:	setne  r12b
  40bda9:	and    r12d,0x1
  40bdad:	rex.B
  40bdae:	.byte 0x83
  40bdaf:	in     al,dx

000000000040bdb0 <__lccstackprobe>:
  40bdb0:	add    DWORD PTR [rcx-0x7d],eax
  40bdb3:	in     al,0x16
  40bdb5:	mov    edi,r12d
  40bdb8:	mov    eax,DWORD PTR [rsi]
  40bdba:	and    eax,0x80
  40bdbf:	or     eax,edi
  40bdc1:	mov    DWORD PTR [rsi],eax
  40bdc3:	xor    eax,eax
  40bdc5:	or     eax,eax
  40bdc7:	je     40bdf9 <.Lcs20+0x9>
  40bdc9:	lea    rcx,[rsi]
  40bdcc:	call   404816 <ExpandFileName+0x2a1>
  40bdd1:	mov    rax,0x0
  40bdd8:	jmp    40be3c <strcat+0x2c>
  40bdda:	cmp    BYTE PTR [rbx],0x62
  40bddd:	jne    40bdec <.Lcs10+0xc>
  40bddf:	.byte 0xf7

000000000040bde0 <.Lcs10>:
  40bde0:	(bad)  
  40bde1:	and    BYTE PTR [rax],al
  40bde3:	add    BYTE PTR [rax],al
  40bde5:	jne    40be0b <.Lcs20+0x1b>
  40bde7:	or     DWORD PTR [rsi],0x20
  40bdea:	jmp    40bdf9 <.Lcs20+0x9>
  40bdec:	mov    eax,DWORD PTR [rsi]
  40bdee:	.byte 0x83
  40bdef:	.byte 0xe0

000000000040bdf0 <.Lcs20>:
  40bdf0:	add    eax,DWORD PTR [rbx+0x157403f8]
  40bdf6:	or     DWORD PTR [rsi],0x3
  40bdf9:	lea    rax,[rbx+0x1]
  40bdfd:	lea    rbx,[rbx+0x1]
  40be01:	cmp    BYTE PTR [rax],0x62
  40be04:	je     40bdda <__lccstackprobe+0x2a>
  40be06:	cmp    BYTE PTR [rbx],0x2b
  40be09:	je     40bdda <__lccstackprobe+0x2a>
  40be0b:	lea    r8,[rbx]
  40be0e:	mov    edx,DWORD PTR [rsi]

000000000040be10 <strcat>:
  40be10:	mov    rcx,QWORD PTR [rbp+0x10]
  40be14:	call   40bc40 <OutStreamString+0x20>
  40be19:	mov    QWORD PTR [rbp-0x40],rax
  40be1d:	mov    QWORD PTR [rsi+0x8],rax
  40be21:	or     QWORD PTR [rsi+0x8],0x0
  40be26:	jne    40be39 <strcat+0x29>
  40be28:	lea    rcx,[rsi]
  40be2b:	call   404816 <ExpandFileName+0x2a1>
  40be30:	mov    rax,0x0
  40be37:	jmp    40be3c <strcat+0x2c>
  40be39:	lea    rax,[rsi]
  40be3c:	add    rsp,0x50

000000000040be40 <strchr>:
  40be40:	add    rsp,0x8
  40be44:	pop    r13
  40be46:	pop    r12
  40be48:	pop    rdi
  40be49:	pop    rsi
  40be4a:	pop    rbx
  40be4b:	leave  
  40be4c:	ret    
  40be4d:	nop
  40be4e:	nop
  40be4f:	nop
  40be50:	push   rbp
  40be51:	mov    rbp,rsp
  40be54:	push   rsi
  40be55:	push   rdi
  40be56:	push   r12
  40be58:	sub    rsp,0x8
  40be5c:	mov    QWORD PTR [rbp+0x20],r8

000000000040be60 <strcmp>:
  40be60:	mov    QWORD PTR [rbp+0x18],rdx
  40be64:	mov    QWORD PTR [rbp+0x10],rcx
  40be68:	mov    r11,QWORD PTR [rbp+0x10]
  40be6c:	mov    r12,QWORD PTR [rbp+0x10]
  40be70:	movsxd rax,DWORD PTR [rbp+0x18]
  40be74:	lea    rsi,[rax+r11*1-0x1]
  40be79:	xor    edi,edi
  40be7b:	mov    rax,r8
  40be7e:	mov    DWORD PTR [rax],0x0
  40be84:	jmp    40bec5 <strcmp+0x65>
  40be86:	lea    rax,[r11]
  40be89:	lea    r11,[rax+0x1]
  40be8d:	movsx  r8d,BYTE PTR [rax]
  40be91:	cmp    r8d,0xd
  40be95:	jne    40bea2 <strcmp+0x42>
  40be97:	cmp    BYTE PTR [r11],0xa
  40be9b:	jne    40bea2 <strcmp+0x42>
  40be9d:	add    edi,0x1
  40bea0:	jmp    40bec5 <strcmp+0x65>
  40bea2:	cmp    r8d,0xd
  40bea6:	jne    40beba <strcmp+0x5a>
  40bea8:	cmp    r11,rsi
  40beab:	jae    40bec5 <strcmp+0x65>
  40bead:	lea    rax,[r12]
  40beb1:	lea    r12,[rax+0x1]
  40beb5:	mov    BYTE PTR [rax],0xa
  40beb8:	jmp    40bec5 <strcmp+0x65>
  40beba:	lea    rax,[r12]
  40bebe:	lea    r12,[rax+0x1]
  40bec2:	mov    BYTE PTR [rax],r8b
  40bec5:	cmp    r11,rsi
  40bec8:	jb     40be86 <strcmp+0x26>
  40beca:	cmp    BYTE PTR [r11],0xd
  40bece:	je     40bedf <strcmp+0x7f>
  40bed0:	lea    rax,[r12]
  40bed4:	lea    r12,[rax+0x1]
  40bed8:	mov    cl,BYTE PTR [r11]
  40bedb:	mov    BYTE PTR [rax],cl
  40bedd:	jmp    40bee2 <strcpy+0x2>
  40bedf:	.byte 0x83

000000000040bee0 <strcpy>:
  40bee0:	mov    DWORD PTR [rcx],0x20458b48
  40bee6:	mov    DWORD PTR [rax],edi
  40bee8:	lea    rax,[r12]
  40beec:	add    rsp,0x8
  40bef0:	pop    r12
  40bef2:	pop    rdi
  40bef3:	pop    rsi
  40bef4:	leave  
  40bef5:	ret    
  40bef6:	push   rbp
  40bef7:	mov    rbp,rsp
  40befa:	push   rbx
  40befb:	push   rsi
  40befc:	push   rdi
  40befd:	push   r12
  40beff:	rex.B

000000000040bf00 <strdup>:
  40bf00:	push   rbp
  40bf01:	push   r14
  40bf03:	sub    rsp,0x80
  40bf0a:	mov    r13,r8
  40bf0d:	mov    QWORD PTR [rbp+0x18],rdx
  40bf11:	mov    rdi,rcx
  40bf14:	xor    ebx,ebx
  40bf16:	mov    DWORD PTR [rsp+0x28],0x0
  40bf1e:	mov    QWORD PTR [rsp+0x20],0x0
  40bf27:	lea    r9,[rbp-0x38]
  40bf2b:	mov    r8d,r13d
  40bf2e:	mov    rdx,rdx
  40bf31:	mov    rcx,QWORD PTR [rdi+0x8]
  40bf35:	call   QWORD PTR ds:0x4161ec
  40bf3c:	mov    DWORD PTR [rbp-0x4c],eax
  40bf3f:	mov    r14d,eax
  40bf42:	or     r14d,r14d
  40bf45:	jne    40bf4e <strdup+0x4e>
  40bf47:	xor    eax,eax
  40bf49:	jmp    40bff7 <strlcpy+0x7>
  40bf4e:	.byte 0xf7
  40bf4f:	(bad)  

000000000040bf50 <strcmpi>:
  40bf50:	and    BYTE PTR [rax],al
  40bf52:	add    BYTE PTR [rax],al
  40bf54:	je     40bf5e <strcmpi+0xe>
  40bf56:	mov    eax,DWORD PTR [rbp-0x38]
  40bf59:	jmp    40bff7 <strlcpy+0x7>
  40bf5e:	mov    eax,DWORD PTR [rbp-0x38]
  40bf61:	or     eax,eax
  40bf63:	jne    40bf6c <strcmpi+0x1c>
  40bf65:	xor    eax,eax
  40bf67:	jmp    40bff7 <strlcpy+0x7>
  40bf6c:	mov    r12,QWORD PTR [rbp+0x18]
  40bf70:	cmp    DWORD PTR [rbp-0x38],r13d
  40bf74:	jae    40bff0 <strlcpy>
  40bf76:	mov    r13d,DWORD PTR [rbp-0x38]
  40bf7a:	jmp    40bff0 <strlcpy>
  40bf7c:	lea    r8,[rbp-0x34]
  40bf80:	mov    edx,DWORD PTR [rbp-0x38]
  40bf83:	lea    rcx,[r12]
  40bf87:	call   40be50 <strchr+0x10>
  40bf8c:	mov    QWORD PTR [rbp-0x58],rax
  40bf90:	mov    rsi,rax
  40bf93:	mov    eax,DWORD PTR [rbp-0x38]
  40bf96:	sub    eax,DWORD PTR [rbp-0x34]
  40bf99:	add    ebx,eax
  40bf9b:	test   DWORD PTR [rdi],0x400
  40bfa1:	je     40bfac <strcmpi+0x5c>
  40bfa3:	cmp    BYTE PTR [rsi],0xa
  40bfa6:	jne    40bfac <strcmpi+0x5c>
  40bfa8:	mov    eax,ebx
  40bfaa:	jmp    40bff7 <strlcpy+0x7>
  40bfac:	or     DWORD PTR [rbp-0x34],0x0
  40bfb0:	je     40bff0 <strlcpy>
  40bfb2:	mov    DWORD PTR [rsp+0x28],0x0
  40bfba:	mov    QWORD PTR [rsp+0x20],0x0
  40bfc3:	lea    r9,[rbp-0x38]
  40bfc7:	mov    r8d,DWORD PTR [rbp-0x34]
  40bfcb:	lea    rdx,[rsi]
  40bfce:	mov    rcx,QWORD PTR [rdi+0x8]
  40bfd2:	call   QWORD PTR ds:0x4161ec
  40bfd9:	mov    DWORD PTR [rbp-0x5c],eax
  40bfdc:	mov    r14d,eax
  40bfdf:	or     r14d,r14d
  40bfe2:	je     40bfeb <strcmpi+0x9b>
  40bfe4:	mov    eax,DWORD PTR [rbp-0x38]
  40bfe7:	or     eax,eax
  40bfe9:	jne    40bfed <strcmpi+0x9d>
  40bfeb:	jmp    40bff5 <strlcpy+0x5>
  40bfed:	lea    r12,[rsi]

000000000040bff0 <strlcpy>:
  40bff0:	cmp    ebx,r13d
  40bff3:	jb     40bf7c <strcmpi+0x2c>
  40bff5:	mov    eax,ebx
  40bff7:	add    rsp,0x80
  40bffe:	pop    r14
  40c000:	pop    r13
  40c002:	pop    r12
  40c004:	pop    rdi
  40c005:	pop    rsi
  40c006:	pop    rbx
  40c007:	leave  
  40c008:	ret    
  40c009:	nop
  40c00a:	nop
  40c00b:	nop
  40c00c:	add    BYTE PTR [rax],al
  40c00e:	add    BYTE PTR [rax],al
  40c010:	push   rbp
  40c011:	mov    rbp,rsp
  40c014:	push   rbx
  40c015:	push   rsi
  40c016:	push   rdi
  40c017:	sub    rsp,0x8
  40c01b:	sub    rsp,0x50
  40c01f:	mov    rbx,rcx
  40c022:	mov    rax,QWORD PTR [rbx+0x28]
  40c026:	cmp    QWORD PTR [rbx+0x20],rax
  40c02a:	jae    40c036 <strlcpy+0x46>
  40c02c:	mov    eax,0x1
  40c031:	jmp    40c118 <strnicmp+0x58>
  40c036:	test   DWORD PTR [rbx],0x100
  40c03c:	je     40c045 <strlcpy+0x55>
  40c03e:	xor    eax,eax
  40c040:	jmp    40c118 <strnicmp+0x58>
  40c045:	mov    eax,DWORD PTR [rbx]
  40c047:	and    eax,0x2001
  40c04c:	cmp    eax,0x1
  40c04f:	je     40c061 <_strlen+0x1>
  40c051:	or     DWORD PTR [rbx],0x200
  40c057:	mov    eax,0xffffffff
  40c05c:	.byte 0xe9
  40c05d:	mov    bh,0x0
	...

000000000040c060 <_strlen>:
  40c060:	add    BYTE PTR [rax-0x7d],cl
  40c063:	.byte 0x7b

000000000040c064 <_L1>:
  40c064:	adc    BYTE PTR [rax],al

000000000040c066 <_L2>:
  40c066:	jne    40c0ac <strncpy+0x3c>
  40c068:	mov    rcx,0x200
  40c06f:	.byte 0xe8

000000000040c070 <strncpy>:
  40c070:	lods   al,BYTE PTR ds:[rsi]
  40c071:	xchg   esi,eax
  40c072:	(bad)  
  40c073:	dec    DWORD PTR [rax-0x77]
  40c076:	rex.RB fmul DWORD PTR [r8-0x77]
  40c07a:	rex.XB adc BYTE PTR [r8-0x39],cl
  40c07e:	rol    DWORD PTR [rax],0x0
  40c081:	add    BYTE PTR [rax],al
  40c083:	cmp    rax,rcx
  40c086:	jne    40c09a <strncpy+0x2a>
  40c088:	lea    rax,[rbx+0x44]
  40c08c:	mov    QWORD PTR [rbx+0x10],rax
  40c090:	lea    rax,[rax+0x1]
  40c094:	mov    QWORD PTR [rbx+0x18],rax
  40c098:	jmp    40c0ac <strncpy+0x3c>
  40c09a:	or     DWORD PTR [rbx],0x40
  40c09d:	mov    rax,QWORD PTR [rbx+0x10]
  40c0a1:	lea    rax,[rax+0x200]
  40c0a8:	mov    QWORD PTR [rbx+0x18],rax
  40c0ac:	mov    rax,QWORD PTR [rbx+0x10]
  40c0b0:	mov    QWORD PTR [rbx+0x20],rax
  40c0b4:	mov    rax,QWORD PTR [rbx+0x10]
  40c0b8:	mov    QWORD PTR [rbx+0x28],rax
  40c0bc:	mov    rax,QWORD PTR [rbx+0x10]

000000000040c0c0 <strnicmp>:
  40c0c0:	mov    QWORD PTR [rbx+0x38],rax
  40c0c4:	mov    rdi,QWORD PTR [rbx+0x10]
  40c0c8:	mov    r8,QWORD PTR [rbx+0x18]
  40c0cc:	sub    r8,rdi
  40c0cf:	lea    rdx,[rdi]
  40c0d2:	lea    rcx,[rbx]
  40c0d5:	call   40bef6 <strcpy+0x16>
  40c0da:	mov    DWORD PTR [rbp-0x2c],eax
  40c0dd:	mov    esi,eax
  40c0df:	or     esi,esi
  40c0e1:	jge    40c0f0 <strnicmp+0x30>
  40c0e3:	or     DWORD PTR [rbx],0x200
  40c0e9:	mov    eax,0xffffffff
  40c0ee:	jmp    40c118 <strnicmp+0x58>
  40c0f0:	or     esi,esi
  40c0f2:	jne    40c106 <strnicmp+0x46>
  40c0f4:	mov    eax,DWORD PTR [rbx]
  40c0f6:	and    eax,0xffffefff
  40c0fb:	or     eax,0x100
  40c100:	mov    DWORD PTR [rbx],eax
  40c102:	xor    eax,eax
  40c104:	jmp    40c118 <strnicmp+0x58>
  40c106:	or     DWORD PTR [rbx],0x1000
  40c10c:	movsxd rax,esi
  40c10f:	add    QWORD PTR [rbx+0x28],rax
  40c113:	mov    eax,0x1
  40c118:	add    rsp,0x50
  40c11c:	add    rsp,0x8
  40c120:	pop    rdi
  40c121:	pop    rsi
  40c122:	pop    rbx
  40c123:	leave  
  40c124:	ret    
  40c125:	nop
  40c126:	nop
  40c127:	nop
	...
  40c130:	push   rbp
  40c131:	mov    rbp,rsp
  40c134:	push   rbx
  40c135:	sub    rsp,0x8
  40c139:	sub    rsp,0x40
  40c13d:	mov    rbx,rcx
  40c140:	mov    rax,QWORD PTR [rbx+0x38]
  40c144:	cmp    QWORD PTR [rbx+0x20],rax
  40c148:	jae    40c151 <strnicmp+0x91>
  40c14a:	xor    eax,eax
  40c14c:	jmp    40c1ea <_strtoul+0x5a>
  40c151:	test   DWORD PTR [rbx],0x2000
  40c157:	je     40c166 <strnicmp+0xa6>
  40c159:	lea    rcx,[rbx]
  40c15c:	call   4049d0 <_assertfail+0x40>
  40c161:	jmp    40c1ea <_strtoul+0x5a>
  40c166:	mov    eax,DWORD PTR [rbx]
  40c168:	and    eax,0x1002
  40c16d:	cmp    eax,0x2

000000000040c170 <strrchr>:
  40c170:	je     40c17f <strrchr+0xf>
  40c172:	or     DWORD PTR [rbx],0x200
  40c178:	mov    eax,0xffffffff
  40c17d:	jmp    40c1ea <_strtoul+0x5a>
  40c17f:	cmp    QWORD PTR [rbx+0x10],0x0
  40c184:	jne    40c1ca <_strtoul+0x3a>
  40c186:	mov    rcx,0x200
  40c18d:	.byte 0xe8
  40c18e:	.byte 0x8e
  40c18f:	xchg   ebp,eax

000000000040c190 <_strtoul>:
  40c190:	(bad)  
  40c191:	dec    DWORD PTR [rax-0x77]
  40c194:	rex.RB call 10844ae2 <.debug$T+0x10415cc2>
  40c19a:	mov    rcx,0x0
  40c1a1:	cmp    rax,rcx
  40c1a4:	jne    40c1b8 <_strtoul+0x28>
  40c1a6:	lea    rax,[rbx+0x44]
  40c1aa:	mov    QWORD PTR [rbx+0x10],rax
  40c1ae:	lea    rax,[rax+0x1]
  40c1b2:	mov    QWORD PTR [rbx+0x18],rax
  40c1b6:	jmp    40c1ca <_strtoul+0x3a>
  40c1b8:	or     DWORD PTR [rbx],0x40
  40c1bb:	mov    rax,QWORD PTR [rbx+0x10]
  40c1bf:	lea    rax,[rax+0x200]
  40c1c6:	mov    QWORD PTR [rbx+0x18],rax
  40c1ca:	mov    rax,QWORD PTR [rbx+0x10]
  40c1ce:	mov    QWORD PTR [rbx+0x20],rax
  40c1d2:	mov    rax,QWORD PTR [rbx+0x10]
  40c1d6:	mov    QWORD PTR [rbx+0x28],rax
  40c1da:	mov    rax,QWORD PTR [rbx+0x18]
  40c1de:	mov    QWORD PTR [rbx+0x38],rax
  40c1e2:	or     DWORD PTR [rbx],0x2000
  40c1e8:	xor    eax,eax
  40c1ea:	add    rsp,0x40
  40c1ee:	add    rsp,0x8
  40c1f2:	pop    rbx
  40c1f3:	leave  
  40c1f4:	ret    
  40c1f5:	nop
  40c1f6:	nop
  40c1f7:	nop
	...
  40c200:	push   rbp
  40c201:	mov    rbp,rsp
  40c204:	push   rbx
  40c205:	push   rsi
  40c206:	push   rdi
  40c207:	push   r12
  40c209:	push   r13
  40c20b:	push   r14
  40c20d:	push   r15
  40c20f:	sub    rsp,0x8
  40c213:	sub    rsp,0x70
  40c217:	mov    QWORD PTR [rbp+0x20],r8
  40c21b:	mov    QWORD PTR [rbp+0x18],rdx
  40c21f:	mov    r15,rcx
  40c222:	lea    rax,ds:0x414f20
  40c22a:	mov    QWORD PTR [rbp-0x50],rax
  40c22e:	or     DWORD PTR [rbp+0x20],0x0
  40c232:	je     40c23b <_strtoul+0xab>
  40c234:	or     QWORD PTR [rbp+0x18],0x0
  40c239:	jne    40c242 <_strtoul+0xb2>
  40c23b:	xor    eax,eax
  40c23d:	jmp    40c3a7 <_strtoul+0x217>
  40c242:	test   DWORD PTR [r15],0x20
  40c249:	je     40c28d <_strtoul+0xfd>
  40c24b:	mov    DWORD PTR [rsp+0x28],0x0
  40c253:	mov    QWORD PTR [rsp+0x20],0x0
  40c25c:	lea    r9,[rbp-0x44]
  40c260:	mov    r8d,DWORD PTR [rbp+0x20]
  40c264:	mov    rdx,QWORD PTR [rbp+0x18]
  40c268:	mov    rcx,QWORD PTR [r15+0x8]
  40c26c:	call   QWORD PTR ds:0x4161e4
  40c273:	mov    DWORD PTR [rbp-0x54],eax
  40c276:	mov    r12d,eax
  40c279:	or     r12d,r12d
  40c27c:	jne    40c285 <_strtoul+0xf5>
  40c27e:	xor    eax,eax
  40c280:	jmp    40c3a7 <_strtoul+0x217>
  40c285:	mov    eax,DWORD PTR [rbp-0x44]
  40c288:	jmp    40c3a7 <_strtoul+0x217>
  40c28d:	mov    rbx,QWORD PTR [rbp+0x18]
  40c291:	mov    rdi,QWORD PTR [rbp+0x18]
  40c295:	mov    DWORD PTR [rbp-0x48],0x0
  40c29c:	movsxd rax,DWORD PTR [rbp+0x20]
  40c2a0:	mov    r14,rax
  40c2a3:	add    r14,QWORD PTR [rbp+0x18]
  40c2a7:	xor    r13d,r13d
  40c2aa:	jmp    40c350 <_strtoul+0x1c0>
  40c2af:	movsx  esi,BYTE PTR [rbx]
  40c2b2:	cmp    esi,0xa
  40c2b5:	jne    40c34c <_strtoul+0x1bc>
  40c2bb:	cmp    rbx,rdi
  40c2be:	je     40c2ff <_strtoul+0x16f>
  40c2c0:	mov    DWORD PTR [rsp+0x28],0x0
  40c2c8:	mov    QWORD PTR [rsp+0x20],0x0
  40c2d1:	lea    r9,[rbp-0x44]
  40c2d5:	mov    r8,rbx
  40c2d8:	sub    r8,rdi
  40c2db:	lea    rdx,[rdi]
  40c2de:	mov    rcx,QWORD PTR [r15+0x8]
  40c2e2:	call   QWORD PTR ds:0x4161e4
  40c2e9:	mov    DWORD PTR [rbp-0x54],eax
  40c2ec:	mov    r12d,eax
  40c2ef:	or     r12d,r12d
  40c2f2:	jne    40c2f9 <_strtoul+0x169>
  40c2f4:	inc    DWORD PTR [rbp-0x48]
  40c2f7:	jmp    40c359 <_strtoul+0x1c9>
  40c2f9:	mov    eax,DWORD PTR [rbp-0x44]
  40c2fc:	add    r13d,eax
  40c2ff:	lea    rdi,[rbx+0x1]
  40c303:	mov    DWORD PTR [rsp+0x28],0x0
  40c30b:	mov    QWORD PTR [rsp+0x20],0x0
  40c314:	lea    r9,[rbp-0x44]
  40c318:	mov    r8,0x2
  40c31f:	mov    rdx,QWORD PTR [rbp-0x50]
  40c323:	mov    rcx,QWORD PTR [r15+0x8]
  40c327:	call   QWORD PTR ds:0x4161e4
  40c32e:	mov    DWORD PTR [rbp-0x54],eax
  40c331:	mov    r12d,eax
  40c334:	or     r12d,r12d
  40c337:	jne    40c33e <_strtoul+0x1ae>
  40c339:	inc    DWORD PTR [rbp-0x48]
  40c33c:	jmp    40c359 <_strtoul+0x1c9>
  40c33e:	mov    eax,DWORD PTR [rbp-0x44]
  40c341:	add    r13d,eax
  40c344:	mov    eax,DWORD PTR [rbp-0x44]
  40c347:	cmp    eax,0x2
  40c34a:	jne    40c359 <_strtoul+0x1c9>
  40c34c:	lea    rbx,[rbx+0x1]
  40c350:	cmp    rbx,r14
  40c353:	jb     40c2af <_strtoul+0x11f>
  40c359:	cmp    rbx,rdi
  40c35c:	je     40c3a4 <_strtoul+0x214>
  40c35e:	mov    eax,DWORD PTR [rbp-0x48]
  40c361:	or     eax,eax
  40c363:	jne    40c3a4 <_strtoul+0x214>
  40c365:	mov    DWORD PTR [rsp+0x28],0x0
  40c36d:	mov    QWORD PTR [rsp+0x20],0x0
  40c376:	lea    r9,[rbp-0x44]
  40c37a:	mov    r8,rbx
  40c37d:	sub    r8,rdi
  40c380:	lea    rdx,[rdi]
  40c383:	mov    rcx,QWORD PTR [r15+0x8]
  40c387:	call   QWORD PTR ds:0x4161e4
  40c38e:	mov    DWORD PTR [rbp-0x54],eax
  40c391:	mov    r12d,eax
  40c394:	or     r12d,r12d
  40c397:	jne    40c39e <_strtoul+0x20e>
  40c399:	inc    DWORD PTR [rbp-0x48]
  40c39c:	jmp    40c3a4 <_strtoul+0x214>
  40c39e:	mov    eax,DWORD PTR [rbp-0x44]
  40c3a1:	add    r13d,eax
  40c3a4:	mov    eax,r13d
  40c3a7:	add    rsp,0x70

000000000040c3ab <strtoul>:
  40c3ab:	add    rsp,0x8
  40c3af:	pop    r15
  40c3b1:	pop    r14
  40c3b3:	pop    r13
  40c3b5:	pop    r12
  40c3b7:	pop    rdi
  40c3b8:	pop    rsi
  40c3b9:	pop    rbx
  40c3ba:	leave  
  40c3bb:	ret    
  40c3bc:	add    BYTE PTR [rax],al
  40c3be:	add    BYTE PTR [rax],al
  40c3c0:	push   rbp
  40c3c1:	mov    rbp,rsp
  40c3c4:	sub    rsp,0x50
  40c3c8:	call   4056c0 <exit+0x45>
  40c3cd:	mov    QWORD PTR [rbp-0x8],rax
  40c3d1:	mov    QWORD PTR ds:0x414f40,rax
  40c3d9:	rex.W
  40c3da:	.byte 0x83
  40c3db:	cmp    al,0x25
  40c3dd:	rex
  40c3de:	rex.WRXB

000000000040c3df <strtol>:
  40c3df:	add    BYTE PTR [r8],al
  40c3e2:	je     40c488 <SystemTimeToUnixTime+0xa>
  40c3e8:	mov    rax,QWORD PTR ds:0x414f40
  40c3f0:	mov    rax,QWORD PTR [rax]
  40c3f3:	or     rax,rax
  40c3f6:	je     40c41c <strtol+0x3d>
  40c3f8:	cmp    BYTE PTR [rax],0x0
  40c3fb:	je     40c41c <strtol+0x3d>
  40c3fd:	mov    r8,0x3
  40c404:	mov    rax,QWORD PTR ds:0x414f40
  40c40c:	mov    rdx,QWORD PTR [rax]
  40c40f:	lea    rcx,ds:0x414f48
  40c417:	call   40aff0 <_setlocale+0xae4>
  40c41c:	rex.W
  40c41d:	.byte 0x8b
  40c41e:	add    al,0x25

000000000040c420 <FileTimeToUnixTime>:
  40c420:	rex
  40c421:	rex.WRXB
  40c422:	add    BYTE PTR [r8-0x75],cl
  40c426:	or     BYTE PTR [rax+0x9],cl
  40c42a:	shl    BYTE PTR [rbp+riz*1-0x80],0x38
  40c42f:	add    BYTE PTR [rax+riz*1+0x49],dh
  40c433:	mov    eax,0x3
  40c439:	mov    rax,QWORD PTR ds:0x414f40
  40c441:	mov    rdx,QWORD PTR [rax+0x8]
  40c445:	lea    rcx,ds:0x414f4b
  40c44d:	call   40aff0 <_setlocale+0xae4>
  40c452:	mov    rax,QWORD PTR ds:0x414f40
  40c45a:	mov    rax,QWORD PTR [rax+0x10]
  40c45e:	or     rax,rax
  40c461:	je     40c488 <SystemTimeToUnixTime+0xa>
  40c463:	cmp    BYTE PTR [rax],0x0
  40c466:	je     40c488 <SystemTimeToUnixTime+0xa>
  40c468:	mov    r8,0x40
  40c46f:	mov    rax,QWORD PTR ds:0x414f40
  40c477:	mov    rdx,QWORD PTR [rax+0x10]
  40c47b:	rex.W
  40c47c:	.byte 0x8d
  40c47d:	.byte 0xc

000000000040c47e <SystemTimeToUnixTime>:
  40c47e:	and    eax,0x414f4e
  40c483:	call   40aff0 <_setlocale+0xae4>
  40c488:	add    rsp,0x50
  40c48c:	leave  
  40c48d:	ret    
  40c48e:	push   rbp
  40c48f:	mov    rbp,rsp
  40c492:	push   rbx
  40c493:	push   rsi
  40c494:	push   rdi
  40c495:	sub    rsp,0x8
  40c499:	sub    rsp,0x50
  40c49d:	mov    QWORD PTR [rbp+0x18],rdx
  40c4a1:	mov    rdi,rcx
  40c4a4:	xor    esi,esi
  40c4a6:	mov    rax,rdx
  40c4a9:	mov    ebx,DWORD PTR [rax]
  40c4ab:	mov    r8,0xa
  40c4b2:	lea    rdx,[rbp-0x28]
  40c4b6:	rex.W
  40c4b7:	.byte 0x63

000000000040c4b8 <time>:
  40c4b8:	ret    
  40c4b9:	mov    rcx,rax
  40c4bc:	add    rcx,rdi
  40c4bf:	call   40b3df <_setlocale+0xed3>
  40c4c4:	mov    DWORD PTR [rbp-0x2c],eax
  40c4c7:	mov    esi,eax
  40c4c9:	mov    rax,QWORD PTR [rbp-0x28]
  40c4cd:	mov    rbx,rax
  40c4d0:	sub    rbx,rdi
  40c4d3:	or     esi,esi
  40c4d5:	je     40c4f2 <time+0x3a>
  40c4d7:	mov    eax,ebx
  40c4d9:	add    ebx,0x1
  40c4dc:	movsxd rax,eax
  40c4df:	cmp    BYTE PTR [rdi+rax*1],0x24
  40c4e3:	jne    40c4f2 <time+0x3a>
  40c4e5:	mov    rax,QWORD PTR [rbp+0x18]
  40c4e9:	mov    DWORD PTR [rax],ebx
  40c4eb:	mov    eax,esi
  40c4ed:	sub    eax,0x1
  40c4f0:	jmp    40c4f7 <time+0x3f>
  40c4f2:	mov    eax,0xffffffff
  40c4f7:	add    rsp,0x50
  40c4fb:	add    rsp,0x8
  40c4ff:	pop    rdi

000000000040c500 <tmpnam>:
  40c500:	pop    rsi
  40c501:	pop    rbx
  40c502:	leave  
  40c503:	ret    
  40c504:	push   rbp
  40c505:	mov    rbp,rsp
  40c508:	sub    rsp,0x80
  40c50f:	fld    TBYTE PTR [rbp+0x30]
  40c512:	fld    TBYTE PTR ds:0x415378
  40c519:	fucomip st,st(1)
  40c51b:	fstp   st(0)
  40c51d:	jp     40c521 <tmpnam+0x21>
  40c51f:	ja     40c523 <tmpnam+0x23>
  40c521:	jmp    40c52c <tmpnam+0x2c>
  40c523:	fld    DWORD PTR ds:0x413750
  40c52a:	jmp    40c591 <tmpnam+0x91>
  40c52c:	fld    TBYTE PTR [rbp+0x30]
  40c52f:	fld    TBYTE PTR ds:0x415378
  40c536:	fucomip st,st(1)
  40c538:	fstp   st(0)
  40c53a:	jp     40c547 <tmpnam+0x47>
  40c53c:	jne    40c547 <tmpnam+0x47>
  40c53e:	fld    DWORD PTR ds:0x413758
  40c545:	jmp    40c591 <tmpnam+0x91>
  40c547:	fld    TBYTE PTR [rbp+0x30]
  40c54a:	fstp   TBYTE PTR [rsp+0x20]
  40c54e:	call   4056e0 <exit+0x65>
  40c553:	fstp   TBYTE PTR [rbp-0x30]
  40c556:	fld    TBYTE PTR [rbp-0x30]
  40c559:	fstp   TBYTE PTR [rbp-0x10]
  40c55c:	fld    TBYTE PTR [rbp+0x40]
  40c55f:	fld    TBYTE PTR ds:0x415368
  40c566:	fucomip st,st(1)
  40c568:	fstp   st(0)
  40c56a:	jp     40c56e <tmpnam+0x6e>
  40c56c:	je     40c58e <tmpnam+0x8e>
  40c56e:	fld    TBYTE PTR [rbp+0x40]
  40c571:	fstp   TBYTE PTR [rsp+0x20]
  40c575:	call   4056e0 <exit+0x65>
  40c57a:	fstp   TBYTE PTR [rbp-0x50]
  40c57d:	fld    TBYTE PTR [rbp-0x50]
  40c580:	fstp   TBYTE PTR [rbp-0x40]
  40c583:	fld    TBYTE PTR [rbp-0x10]
  40c586:	fld    TBYTE PTR [rbp-0x40]
  40c589:	fdivp  st(1),st
  40c58b:	fstp   TBYTE PTR [rbp-0x10]
  40c58e:	fld    TBYTE PTR [rbp-0x10]
  40c591:	add    rsp,0x80
  40c598:	leave  
  40c599:	ret    
  40c59a:	push   rbp
  40c59b:	mov    rbp,rsp
  40c59e:	push   rbx
  40c59f:	push   rsi

000000000040c5a0 <toupper>:
  40c5a0:	push   rdi
  40c5a1:	push   r12
  40c5a3:	push   r13
  40c5a5:	push   r14
  40c5a7:	push   r15
  40c5a9:	sub    rsp,0x8
  40c5ad:	sub    rsp,0x270
  40c5b4:	mov    QWORD PTR [rbp+0x28],r9
  40c5b8:	mov    QWORD PTR [rbp+0x20],r8
  40c5bc:	mov    r12,rdx
  40c5bf:	rex.W

000000000040c5c0 <wctomb>:
  40c5c0:	mov    DWORD PTR [rbp+0x10],ecx
  40c5c3:	or     DWORD PTR [rbp-0x50],0xffffffff
  40c5c7:	xor    r14d,r14d
  40c5ca:	or     DWORD PTR [rbp-0x16c],0xffffffff
  40c5d1:	mov    r8,0x80
  40c5d8:	xor    edx,edx
  40c5da:	lea    rcx,[rbp-0x1f0]
  40c5e1:	call   405860 <fclose+0x4a>
  40c5e6:	mov    DWORD PTR [rbp-0x44],0x0
  40c5ed:	mov    DWORD PTR [rbp-0x168],0x0
  40c5f7:	jmp    40d0ea <_Frprep+0xda>
  40c5fc:	mov    eax,DWORD PTR [rbp-0x44]
  40c5ff:	mov    ecx,eax
  40c601:	add    ecx,0x1
  40c604:	mov    DWORD PTR [rbp-0x44],ecx
  40c607:	movsxd rax,eax
  40c60a:	cmp    BYTE PTR [r12+rax*1],0x25
  40c60f:	jne    40d0ea <_Frprep+0xda>
  40c615:	movsxd rax,DWORD PTR [rbp-0x44]
  40c619:	cmp    BYTE PTR [r12+rax*1],0x25
  40c61e:	jne    40c628 <wctomb+0x68>
  40c620:	inc    DWORD PTR [rbp-0x44]
  40c623:	jmp    40d0ea <_Frprep+0xda>
  40c628:	xor    ebx,ebx
  40c62a:	mov    DWORD PTR [rbp-0x170],0x0
  40c634:	lea    rdx,[rbp-0x44]
  40c638:	lea    rcx,[r12]
  40c63c:	call   40c48e <SystemTimeToUnixTime+0x10>
  40c641:	mov    DWORD PTR [rbp-0x1fc],eax
  40c647:	mov    r15d,eax
  40c64a:	cmp    r15d,0xffffffff
  40c64e:	setne  al
  40c651:	and    eax,0x1
  40c654:	mov    DWORD PTR [rbp-0x200],eax
  40c65a:	or     eax,eax
  40c65c:	mov    eax,0x0
  40c661:	setne  al
  40c664:	mov    BYTE PTR [rbp-0x15d],al
  40c66a:	test   BYTE PTR [rbp-0x15d],0x1
  40c671:	jne    40c67a <wctomb+0xba>
  40c673:	mov    r15d,DWORD PTR [rbp-0x168]
  40c67a:	cmp    r15d,0x40
  40c67e:	jl     40c690 <wctomb+0xd0>
  40c680:	mov    eax,DWORD PTR [rbp-0x44]
  40c683:	shl    eax,0x8
  40c686:	add    eax,0x3
  40c689:	neg    eax
  40c68b:	jmp    40d98d <__Parse+0x3f3>
  40c690:	cmp    r15d,DWORD PTR [rbp-0x50]
  40c694:	jle    40c69a <wctomb+0xda>
  40c696:	mov    DWORD PTR [rbp-0x50],r15d
  40c69a:	mov    DWORD PTR [rbp-0x54],0x0
  40c6a1:	or     DWORD PTR [rbp-0x164],0xffffffff
  40c6a8:	or     DWORD PTR [rbp-0x5c],0xffffffff
  40c6ac:	or     DWORD PTR [rbp-0x58],0xffffffff
  40c6b0:	jmp    40cc36 <_Fclose+0x56>
  40c6b5:	mov    eax,DWORD PTR [rbp-0x44]
  40c6b8:	mov    ecx,eax
  40c6ba:	add    ecx,0x1
  40c6bd:	mov    DWORD PTR [rbp-0x44],ecx
  40c6c0:	movsxd rax,eax
  40c6c3:	mov    al,BYTE PTR [r12+rax*1]
  40c6c7:	mov    BYTE PTR [rbp-0x45],al
  40c6ca:	movsx  eax,BYTE PTR [rbp-0x45]
  40c6ce:	.byte 0x83
  40c6cf:	clc    

000000000040c6d0 <wmemcpy>:
  40c6d0:	pop    rdx
  40c6d1:	je     40cc36 <_Fclose+0x56>
  40c6d7:	jg     40c70d <wmemcpy+0x3d>
  40c6d9:	cmp    eax,0x20
  40c6dc:	jl     40cc26 <_Fclose+0x46>
  40c6e2:	cmp    eax,0x40
  40c6e5:	jg     40c6f6 <wmemcpy+0x26>
  40c6e7:	mov    eax,eax
  40c6e9:	sub    eax,0x20
  40c6ec:	movsxd rax,eax
  40c6ef:	jmp    QWORD PTR [rax*8+0x415000]
  40c6f6:	cmp    eax,0x49
  40c6f9:	je     40cb12 <Wstrtok_r+0xd>
  40c6ff:	cmp    eax,0x4c
  40c702:	je     40cac9 <wcsstr+0x2d>
  40c708:	jmp    40cc26 <_Fclose+0x46>
  40c70d:	cmp    eax,0x71
  40c710:	je     40cb07 <Wstrtok_r+0x2>
  40c716:	cmp    eax,0x74
  40c719:	.byte 0xf

000000000040c71a <wcscpy>:
  40c71a:	test   dh,al
  40c71c:	add    eax,DWORD PTR [rax]
  40c71e:	add    BYTE PTR [rdi+0x20],bh
  40c721:	cmp    eax,0x68
  40c724:	je     40ca63 <wcsspn+0x1f>
  40c72a:	cmp    eax,0x6a
  40c72d:	je     40caf6 <wcsstr+0x5a>
  40c733:	cmp    eax,0x6c
  40c736:	je     40ca93 <wcsspn+0x4f>
  40c73c:	jmp    40cc26 <_Fclose+0x46>
  40c741:	cmp    eax,0x77
  40c744:	je     40cbda <wcslen+0x32>
  40c74a:	cmp    eax,0x7a
  40c74d:	.byte 0xf
  40c74e:	.byte 0x84
  40c74f:	.byte 0x81

000000000040c750 <wcsncpy>:
  40c750:	add    eax,DWORD PTR [rax]
  40c752:	add    cl,ch
  40c754:	(bad)  
  40c755:	add    al,0x0
  40c757:	add    BYTE PTR [rbx-0x2916fd35],al
  40c75d:	add    al,0x0
  40c75f:	add    BYTE PTR [rbx-0x3116fb35],al
  40c765:	add    al,0x0
  40c767:	add    BYTE PTR [rbx-0x1c7ef735],al
  40c76d:	(bad)  
  40c76e:	(bad)  
  40c770:	(bad)  
  40c771:	jmp    40cc36 <_Fclose+0x56>
  40c776:	or     ebx,0x10
  40c779:	jmp    40cc36 <_Fclose+0x56>
  40c77e:	mov    eax,DWORD PTR [rbp-0x170]
  40c784:	or     eax,eax
  40c786:	jne    40c882 <wcscmp+0x47>
  40c78c:	inc    DWORD PTR [rbp-0x170]
  40c792:	rex.W
  40c793:	.byte 0x63
  40c794:	rex.RB

000000000040c795 <wcscat>:
  40c795:	mov    esp,0x43c8041
  40c79a:	cs je  40cc36 <_Fclose+0x56>
  40c7a1:	or     ebx,0x40000
  40c7a7:	movsxd rax,DWORD PTR [rbp-0x44]
  40c7ab:	movsx  eax,BYTE PTR [r12+rax*1]
  40c7b0:	cmp    eax,0x2a
  40c7b3:	je     40c7be <wcscat+0x29>
  40c7b5:	cmp    eax,0x40
  40c7b8:	jne    40c847 <wcscmp+0xc>
  40c7be:	inc    DWORD PTR [rbp-0x44]
  40c7c1:	or     ebx,0x80000
  40c7c7:	lea    rdx,[rbp-0x44]
  40c7cb:	lea    rcx,[r12]
  40c7cf:	call   40c48e <SystemTimeToUnixTime+0x10>
  40c7d4:	mov    DWORD PTR [rbp-0x208],eax
  40c7da:	.byte 0x89
  40c7db:	.byte 0x85

000000000040c7dc <wcsncat>:
  40c7dc:	pushf  
  40c7dd:	(bad)  
  40c7de:	(bad)  
  40c7df:	inc    DWORD PTR [rbx+0x2a75fff8]
  40c7e5:	inc    DWORD PTR [rbp-0x168]
  40c7eb:	test   BYTE PTR [rbp-0x15d],0x1
  40c7f2:	je     40c802 <wcsncat+0x26>
  40c7f4:	mov    eax,DWORD PTR [rbp-0x168]
  40c7fa:	mov    DWORD PTR [rbp-0x164],eax
  40c800:	jmp    40c834 <wcsncat+0x58>
  40c802:	mov    DWORD PTR [rbp-0x164],r15d
  40c809:	add    r15d,0x1
  40c80d:	jmp    40c834 <wcsncat+0x58>
  40c80f:	test   BYTE PTR [rbp-0x15d],0x1
  40c816:	jne    40c823 <wcsncat+0x47>
  40c818:	mov    r15d,DWORD PTR [rbp-0x164]
  40c81f:	add    r15d,0x1
  40c823:	mov    eax,DWORD PTR [rbp-0x54]
  40c826:	cmp    eax,DWORD PTR [rbp-0x50]
  40c829:	jle    40c834 <wcsncat+0x58>
  40c82b:	mov    eax,DWORD PTR [rbp-0x164]
  40c831:	mov    DWORD PTR [rbp-0x50],eax
  40c834:	cmp    r15d,DWORD PTR [rbp-0x50]
  40c838:	.byte 0xf
  40c839:	mov    ?,eax

000000000040c83b <wcscmp>:
  40c83b:	add    eax,DWORD PTR [rax]
  40c83d:	add    BYTE PTR [rcx+rcx*4+0x7d],al
  40c841:	mov    al,0xe9
  40c843:	out    dx,eax
  40c844:	add    eax,DWORD PTR [rax]
  40c846:	add    BYTE PTR [rcx-0x39],cl
  40c849:	ror    BYTE PTR [rdx],0x0
  40c84c:	add    BYTE PTR [rax],al
  40c84e:	lea    rdx,[rbp-0x1f8]
  40c855:	movsxd rax,DWORD PTR [rbp-0x44]
  40c859:	mov    rcx,rax
  40c85c:	add    rcx,r12
  40c85f:	call   40b3df <_setlocale+0xed3>
  40c864:	mov    DWORD PTR [rbp-0x208],eax
  40c86a:	mov    DWORD PTR [rbp-0x164],eax
  40c870:	mov    rax,QWORD PTR [rbp-0x1f8]
  40c877:	sub    rax,r12
  40c87a:	mov    DWORD PTR [rbp-0x44],eax
  40c87d:	jmp    40cc36 <_Fclose+0x56>
  40c882:	cmp    DWORD PTR [rbp-0x170],0x1
  40c889:	jne    40c974 <wcscspn+0x2e>
  40c88f:	.byte 0xff
  40c890:	.byte 0x85
  40c891:	nop
  40c892:	.byte 0xfe

000000000040c893 <wcsncmp>:
  40c893:	(bad)  
  40c894:	inc    DWORD PTR [rcx+0x100000cb]
  40c89a:	add    BYTE PTR [rax+0x63],cl
  40c89d:	rex.RB mov r12d,0x4be0f41
  40c8a3:	add    al,0x83
  40c8a5:	clc    
  40c8a6:	sub    dh,BYTE PTR [rbp+rax*1-0x7d]
  40c8aa:	clc    
  40c8ab:	rex jne 40c927 <wcschr+0x19>
  40c8ae:	inc    DWORD PTR [rbp-0x44]
  40c8b1:	or     ebx,0x200000
  40c8b7:	lea    rdx,[rbp-0x44]
  40c8bb:	lea    rcx,[r12]
  40c8bf:	call   40c48e <SystemTimeToUnixTime+0x10>
  40c8c4:	mov    DWORD PTR [rbp-0x208],eax
  40c8ca:	mov    DWORD PTR [rbp-0x5c],eax
  40c8cd:	cmp    eax,0xffffffff
  40c8d0:	jne    40c8f6 <wcsncmp+0x63>
  40c8d2:	inc    DWORD PTR [rbp-0x168]
  40c8d8:	test   BYTE PTR [rbp-0x15d],0x1
  40c8df:	je     40c8ec <wcsncmp+0x59>
  40c8e1:	mov    eax,DWORD PTR [rbp-0x168]
  40c8e7:	mov    DWORD PTR [rbp-0x5c],eax
  40c8ea:	jmp    40c914 <wcschr+0x6>
  40c8ec:	mov    DWORD PTR [rbp-0x5c],r15d
  40c8f0:	add    r15d,0x1
  40c8f4:	jmp    40c914 <wcschr+0x6>
  40c8f6:	test   BYTE PTR [rbp-0x15d],0x1
  40c8fd:	jne    40c907 <wcsncmp+0x74>
  40c8ff:	mov    r15d,DWORD PTR [rbp-0x5c]
  40c903:	add    r15d,0x1
  40c907:	mov    eax,DWORD PTR [rbp-0x5c]
  40c90a:	cmp    eax,DWORD PTR [rbp-0x50]
  40c90d:	.byte 0x7e

000000000040c90e <wcschr>:
  40c90e:	add    eax,0x4589c089
  40c913:	mov    al,0x44
  40c915:	cmp    edi,DWORD PTR [rbp-0x50]
  40c918:	jle    40cc36 <_Fclose+0x56>
  40c91e:	mov    DWORD PTR [rbp-0x50],r15d
  40c922:	jmp    40cc36 <_Fclose+0x56>
  40c927:	mov    r8,0xa
  40c92e:	lea    rdx,[rbp-0x1f8]
  40c935:	movsxd rax,DWORD PTR [rbp-0x44]
  40c939:	mov    rcx,rax
  40c93c:	add    rcx,r12
  40c93f:	call   40b3df <_setlocale+0xed3>
  40c944:	.byte 0x89
  40c945:	.byte 0x85

000000000040c946 <wcscspn>:
  40c946:	clc    
  40c947:	std    
  40c948:	(bad)  
  40c949:	dec    DWORD PTR [rcx-0x77c5bbb]
  40c94f:	and    al,0x7e
  40c951:	adc    BYTE PTR [rbx-0x1f3e43bb],cl
  40c957:	or     BYTE PTR [rbx-0x2708fd40],al
  40c95d:	jmp    40d98d <__Parse+0x3f3>
  40c962:	mov    rax,QWORD PTR [rbp-0x1f8]
  40c969:	sub    rax,r12
  40c96c:	mov    DWORD PTR [rbp-0x44],eax
  40c96f:	jmp    40cc36 <_Fclose+0x56>
  40c974:	mov    eax,DWORD PTR [rbp-0x44]
  40c977:	shl    eax,0x8
  40c97a:	add    eax,0x2
  40c97d:	neg    eax
  40c97f:	jmp    40d98d <__Parse+0x3f3>
  40c984:	mov    DWORD PTR [rbp+0x10],0x1
  40c98b:	cmp    DWORD PTR [rbp+0x10],0x1
  40c98f:	jne    40ca07 <wcsrchr+0x1>
  40c991:	or     ebx,0x30000
  40c997:	lea    rdx,[rbp-0x44]
  40c99b:	lea    rcx,[r12]
  40c99f:	call   40c48e <SystemTimeToUnixTime+0x10>
  40c9a4:	.byte 0x89
  40c9a5:	test   eax,edi

000000000040c9a7 <wcspbrk>:
  40c9a7:	std    
  40c9a8:	(bad)  
  40c9a9:	dec    DWORD PTR [rcx-0x77c53bb]
  40c9af:	push   QWORD PTR [rbp+0x24]
  40c9b2:	inc    DWORD PTR [rbp-0x168]
  40c9b8:	test   BYTE PTR [rbp-0x15d],0x1
  40c9bf:	je     40c9cc <wcspbrk+0x25>
  40c9c1:	mov    eax,DWORD PTR [rbp-0x168]
  40c9c7:	mov    DWORD PTR [rbp-0x54],eax
  40c9ca:	jmp    40c9f4 <wcspbrk+0x4d>
  40c9cc:	mov    DWORD PTR [rbp-0x54],r15d
  40c9d0:	add    r15d,0x1
  40c9d4:	jmp    40c9f4 <wcspbrk+0x4d>
  40c9d6:	test   BYTE PTR [rbp-0x15d],0x1
  40c9dd:	jne    40c9e7 <wcspbrk+0x40>
  40c9df:	mov    r15d,DWORD PTR [rbp-0x54]
  40c9e3:	add    r15d,0x1
  40c9e7:	mov    eax,DWORD PTR [rbp-0x54]
  40c9ea:	cmp    eax,DWORD PTR [rbp-0x50]
  40c9ed:	jle    40c9f4 <wcspbrk+0x4d>
  40c9ef:	mov    eax,eax
  40c9f1:	mov    DWORD PTR [rbp-0x50],eax
  40c9f4:	cmp    r15d,DWORD PTR [rbp-0x50]
  40c9f8:	jle    40cc36 <_Fclose+0x56>
  40c9fe:	mov    DWORD PTR [rbp-0x50],r15d
  40ca02:	.byte 0xe9
  40ca03:	(bad)  
  40ca04:	add    al,BYTE PTR [rax]

000000000040ca06 <wcsrchr>:
  40ca06:	add    BYTE PTR [rcx+0xcb],al
  40ca0c:	or     cl,ch
  40ca0e:	and    al,0x2
  40ca10:	add    BYTE PTR [rax],al
  40ca12:	test   ebx,0x8
  40ca18:	jne    40ca20 <wcsrchr+0x1a>
  40ca1a:	or     ebx,0x2000
  40ca20:	or     ebx,0x10000
  40ca26:	mov    r8,0xa
  40ca2d:	lea    rdx,[rbp-0x1f8]
  40ca34:	mov    eax,DWORD PTR [rbp-0x44]
  40ca37:	sub    eax,0x1
  40ca3a:	movsxd rax,eax
  40ca3d:	mov    rcx,rax
  40ca40:	add    rcx,r12
  40ca43:	.byte 0xe8

000000000040ca44 <wcsspn>:
  40ca44:	xchg   edi,eax
  40ca45:	jmp    ffffffff85caca49 <.debug$T+0xffffffff8587dc29>
  40ca4a:	clc    
  40ca4b:	std    
  40ca4c:	(bad)  
  40ca4d:	dec    DWORD PTR [rcx-0x74b753bb]
  40ca53:	test   DWORD PTR [rax],ecx
  40ca55:	(bad)  
  40ca56:	(bad)  
  40ca57:	dec    DWORD PTR [rcx+rbp*1-0x20]
  40ca5b:	mov    DWORD PTR [rbp-0x44],eax
  40ca5e:	jmp    40cc36 <_Fclose+0x56>
  40ca63:	test   ebx,0x40
  40ca69:	je     40ca7b <wcsspn+0x37>
  40ca6b:	mov    eax,DWORD PTR [rbp-0x44]
  40ca6e:	shl    eax,0x8
  40ca71:	add    eax,0x2
  40ca74:	neg    eax
  40ca76:	jmp    40d98d <__Parse+0x3f3>
  40ca7b:	test   ebx,0x20
  40ca81:	je     40ca8b <wcsspn+0x47>
  40ca83:	or     ebx,0x40
  40ca86:	jmp    40cc36 <_Fclose+0x56>
  40ca8b:	or     ebx,0x20
  40ca8e:	jmp    40cc36 <_Fclose+0x56>
  40ca93:	test   ebx,0x100
  40ca99:	je     40caab <wcsstr+0xf>
  40ca9b:	.byte 0x8b

000000000040ca9c <wcsstr>:
  40ca9c:	rex.RB mov r12d,0x8308e0c1
  40caa2:	rol    BYTE PTR [rdx],0xf7
  40caa5:	fsubr  st,st(1)
  40caa7:	loop   40cab7 <wcsstr+0x1b>
  40caa9:	add    BYTE PTR [rax],al
  40caab:	test   ebx,0x80
  40cab1:	je     40cabe <wcsstr+0x22>
  40cab3:	or     ebx,0x100
  40cab9:	jmp    40cc36 <_Fclose+0x56>
  40cabe:	or     ebx,0x80
  40cac4:	jmp    40cc36 <_Fclose+0x56>
  40cac9:	or     ebx,0x200
  40cacf:	jmp    40cc36 <_Fclose+0x56>
  40cad4:	or     ebx,0x400
  40cada:	or     ebx,0x100
  40cae0:	jmp    40cc36 <_Fclose+0x56>
  40cae5:	or     ebx,0x800
  40caeb:	or     ebx,0x100
  40caf1:	jmp    40cc36 <_Fclose+0x56>
  40caf6:	or     ebx,0x1000
  40cafc:	or     ebx,0x100
  40cb02:	.byte 0xe9
  40cb03:	(bad)  
  40cb04:	.byte 0x1

000000000040cb05 <Wstrtok_r>:
  40cb05:	add    BYTE PTR [rax],al
  40cb07:	or     ebx,0x100
  40cb0d:	jmp    40cc36 <_Fclose+0x56>
  40cb12:	test   ebx,0x40000000
  40cb18:	jne    40cc36 <_Fclose+0x56>
  40cb1e:	test   ebx,0x22001fe0
  40cb24:	je     40cb36 <Wstrtok_r+0x31>
  40cb26:	mov    eax,DWORD PTR [rbp-0x44]
  40cb29:	shl    eax,0x8
  40cb2c:	add    eax,0x2
  40cb2f:	neg    eax
  40cb31:	jmp    40d98d <__Parse+0x3f3>
  40cb36:	mov    eax,DWORD PTR [rbp-0x44]
  40cb39:	movsxd rcx,eax
  40cb3c:	cmp    BYTE PTR [r12+rcx*1],0x36
  40cb41:	jne    40cb5d <Wstrtok_r+0x58>
  40cb43:	add    eax,0x1
  40cb46:	movsxd rax,eax
  40cb49:	cmp    BYTE PTR [r12+rax*1],0x34
  40cb4e:	jne    40cb5d <Wstrtok_r+0x58>
  40cb50:	mov    DWORD PTR [rbp-0x58],0x8
  40cb57:	add    DWORD PTR [rbp-0x44],0x2
  40cb5b:	jmp    40cbd2 <wcslen+0x2a>
  40cb5d:	mov    eax,DWORD PTR [rbp-0x44]
  40cb60:	movsxd rcx,eax
  40cb63:	cmp    BYTE PTR [r12+rcx*1],0x33
  40cb68:	jne    40cb84 <Wstrtok_r+0x7f>
  40cb6a:	add    eax,0x1
  40cb6d:	movsxd rax,eax
  40cb70:	cmp    BYTE PTR [r12+rax*1],0x32
  40cb75:	jne    40cb84 <Wstrtok_r+0x7f>
  40cb77:	mov    DWORD PTR [rbp-0x58],0x4
  40cb7e:	add    DWORD PTR [rbp-0x44],0x2
  40cb82:	jmp    40cbd2 <wcslen+0x2a>
  40cb84:	mov    eax,DWORD PTR [rbp-0x44]
  40cb87:	movsxd rcx,eax
  40cb8a:	cmp    BYTE PTR [r12+rcx*1],0x31
  40cb8f:	jne    40cbab <wcslen+0x3>
  40cb91:	add    eax,0x1
  40cb94:	movsxd rax,eax
  40cb97:	cmp    BYTE PTR [r12+rax*1],0x36
  40cb9c:	jne    40cbab <wcslen+0x3>
  40cb9e:	mov    DWORD PTR [rbp-0x58],0x2
  40cba5:	.byte 0x83
  40cba6:	rex.RB
  40cba7:	.byte 0xbc

000000000040cba8 <wcslen>:
  40cba8:	add    ch,bl
  40cbaa:	(bad)  
  40cbab:	movsxd rax,DWORD PTR [rbp-0x44]
  40cbaf:	cmp    BYTE PTR [r12+rax*1],0x38
  40cbb4:	jne    40cbc2 <wcslen+0x1a>
  40cbb6:	mov    DWORD PTR [rbp-0x58],0x1
  40cbbd:	inc    DWORD PTR [rbp-0x44]
  40cbc0:	jmp    40cbd2 <wcslen+0x2a>
  40cbc2:	mov    eax,DWORD PTR [rbp-0x44]
  40cbc5:	shl    eax,0x8
  40cbc8:	add    eax,0x2
  40cbcb:	neg    eax
  40cbcd:	jmp    40d98d <__Parse+0x3f3>
  40cbd2:	or     ebx,0x40000000
  40cbd8:	jmp    40cc36 <_Fclose+0x56>
  40cbda:	or     ebx,0x2000000

000000000040cbe0 <_Fclose>:
  40cbe0:	jmp    40cc36 <_Fclose+0x56>
  40cbe2:	or     ebx,0x1000000
  40cbe8:	mov    BYTE PTR ds:0x414f4e,0x3
  40cbf0:	jmp    40cc36 <_Fclose+0x56>
  40cbf2:	or     ebx,0x20000000
  40cbf8:	inc    DWORD PTR [rbp-0x168]
  40cbfe:	test   BYTE PTR [rbp-0x15d],0x1
  40cc05:	je     40cc12 <_Fclose+0x32>
  40cc07:	mov    eax,DWORD PTR [rbp-0x168]
  40cc0d:	mov    DWORD PTR [rbp-0x58],eax
  40cc10:	jmp    40cc1a <_Fclose+0x3a>
  40cc12:	mov    DWORD PTR [rbp-0x58],r15d
  40cc16:	add    r15d,0x1
  40cc1a:	cmp    r15d,DWORD PTR [rbp-0x50]
  40cc1e:	jle    40cc36 <_Fclose+0x56>
  40cc20:	mov    DWORD PTR [rbp-0x50],r15d
  40cc24:	jmp    40cc36 <_Fclose+0x56>
  40cc26:	mov    eax,DWORD PTR [rbp-0x44]
  40cc29:	shl    eax,0x8
  40cc2c:	add    eax,0x2
  40cc2f:	neg    eax
  40cc31:	jmp    40d98d <__Parse+0x3f3>
  40cc36:	movsxd rax,DWORD PTR [rbp-0x44]
  40cc3a:	movsx  edx,BYTE PTR [r12+rax*1]
  40cc3f:	rex.W

000000000040cc40 <_Fopen>:
  40cc40:	lea    ecx,ds:0x414fd9
  40cc47:	call   40ae40 <_setlocale+0x934>
  40cc4c:	mov    QWORD PTR [rbp-0x208],rax
  40cc53:	or     rax,rax
  40cc56:	jne    40c6b5 <wctomb+0xf5>
  40cc5c:	test   ebx,0x20000
  40cc62:	je     40ccb4 <_Fopen+0x74>
  40cc64:	movsxd rax,DWORD PTR [rbp-0x54]
  40cc68:	lea    rax,[rbp+rax*2-0x1f0]
  40cc70:	inc    WORD PTR [rax]
  40cc73:	movsxd rax,r14d
  40cc76:	mov    rcx,rax
  40cc79:	imul   rcx,rcx,0x60
  40cc7d:	mov    rax,QWORD PTR [rbp+0x20]
  40cc81:	mov    DWORD PTR [rax+rcx*1],0x7
  40cc88:	movsxd rax,r14d
  40cc8b:	mov    rcx,rax
  40cc8e:	imul   rcx,rcx,0x60
  40cc92:	mov    rax,QWORD PTR [rbp+0x20]
  40cc96:	mov    DWORD PTR [rcx+rax*1+0x4],0x0
  40cc9e:	movsxd rax,DWORD PTR [rbp-0x54]
  40cca2:	mov    DWORD PTR [rbp+rax*4-0x15c],r14d
  40ccaa:	mov    eax,r14d
  40ccad:	add    r14d,0x1
  40ccb1:	mov    DWORD PTR [rbp-0x54],eax
  40ccb4:	test   ebx,0x80000
  40ccba:	je     40cd15 <_Fopen+0xd5>
  40ccbc:	movsxd rax,DWORD PTR [rbp-0x164]
  40ccc3:	lea    rax,[rbp+rax*2-0x1f0]
  40cccb:	inc    WORD PTR [rax]
  40ccce:	movsxd rax,r14d
  40ccd1:	mov    rcx,rax
  40ccd4:	imul   rcx,rcx,0x60
  40ccd8:	mov    rax,QWORD PTR [rbp+0x20]
  40ccdc:	mov    DWORD PTR [rax+rcx*1],0x7
  40cce3:	movsxd rax,r14d
  40cce6:	mov    rcx,rax
  40cce9:	imul   rcx,rcx,0x60
  40cced:	mov    rax,QWORD PTR [rbp+0x20]
  40ccf1:	mov    DWORD PTR [rcx+rax*1+0x4],0x0
  40ccf9:	movsxd rax,DWORD PTR [rbp-0x164]
  40cd00:	mov    DWORD PTR [rbp+rax*4-0x15c],r14d
  40cd08:	mov    eax,r14d
  40cd0b:	add    r14d,0x1
  40cd0f:	mov    DWORD PTR [rbp-0x164],eax
  40cd15:	test   ebx,0x200000
  40cd1b:	je     40cd6d <_Foprep+0x2d>
  40cd1d:	movsxd rax,DWORD PTR [rbp-0x5c]
  40cd21:	lea    rax,[rbp+rax*2-0x1f0]
  40cd29:	inc    WORD PTR [rax]
  40cd2c:	movsxd rax,r14d
  40cd2f:	mov    rcx,rax
  40cd32:	imul   rcx,rcx,0x60
  40cd36:	mov    rax,QWORD PTR [rbp+0x20]
  40cd3a:	.byte 0xc7
  40cd3b:	add    al,0x8
  40cd3d:	(bad)  
	...

000000000040cd40 <_Foprep>:
  40cd40:	add    BYTE PTR [rcx+0x63],cl
  40cd43:	(bad)  
  40cd44:	mov    rcx,rax
  40cd47:	imul   rcx,rcx,0x60
  40cd4b:	mov    rax,QWORD PTR [rbp+0x20]
  40cd4f:	mov    DWORD PTR [rcx+rax*1+0x4],0x0
  40cd57:	movsxd rax,DWORD PTR [rbp-0x5c]
  40cd5b:	mov    DWORD PTR [rbp+rax*4-0x15c],r14d
  40cd63:	mov    eax,r14d
  40cd66:	add    r14d,0x1
  40cd6a:	mov    DWORD PTR [rbp-0x5c],eax
  40cd6d:	test   ebx,0x20000000
  40cd73:	je     40cdc5 <_Foprep+0x85>
  40cd75:	movsxd rax,DWORD PTR [rbp-0x58]
  40cd79:	lea    rax,[rbp+rax*2-0x1f0]
  40cd81:	inc    WORD PTR [rax]
  40cd84:	movsxd rax,r14d
  40cd87:	mov    rcx,rax
  40cd8a:	imul   rcx,rcx,0x60
  40cd8e:	mov    rax,QWORD PTR [rbp+0x20]
  40cd92:	mov    DWORD PTR [rax+rcx*1],0x7
  40cd99:	movsxd rax,r14d
  40cd9c:	mov    rcx,rax
  40cd9f:	imul   rcx,rcx,0x60
  40cda3:	mov    rax,QWORD PTR [rbp+0x20]
  40cda7:	mov    DWORD PTR [rcx+rax*1+0x4],0x0
  40cdaf:	movsxd rax,DWORD PTR [rbp-0x58]
  40cdb3:	mov    DWORD PTR [rbp+rax*4-0x15c],r14d
  40cdbb:	mov    eax,r14d
  40cdbe:	add    r14d,0x1
  40cdc2:	mov    DWORD PTR [rbp-0x58],eax
  40cdc5:	movsxd rax,r15d
  40cdc8:	mov    DWORD PTR [rbp+rax*4-0x15c],r14d
  40cdd0:	movsxd rax,r14d
  40cdd3:	mov    rcx,rax
  40cdd6:	imul   rcx,rcx,0x60
  40cdda:	mov    r13,rcx
  40cddd:	add    r13,QWORD PTR [rbp+0x20]
  40cde1:	mov    eax,DWORD PTR [rbp-0x44]
  40cde4:	mov    ecx,eax
  40cde6:	add    ecx,0x1
  40cde9:	mov    DWORD PTR [rbp-0x44],ecx
  40cdec:	movsxd rax,eax
  40cdef:	movsx  eax,BYTE PTR [r12+rax*1]
  40cdf4:	cmp    eax,0x53
  40cdf7:	je     40ce78 <EliminateCRs+0x28>
  40cdf9:	jg     40ce1c <_Foprep+0xdc>
  40cdfb:	cmp    eax,0x41
  40cdfe:	jl     40d071 <_Frprep+0x61>
  40ce04:	cmp    eax,0x47
  40ce07:	jg     40d071 <_Frprep+0x61>
  40ce0d:	mov    eax,eax
  40ce0f:	sub    eax,0x41
  40ce12:	movsxd rax,eax
  40ce15:	jmp    QWORD PTR [rax*8+0x415110]
  40ce1c:	cmp    eax,0x58
  40ce1f:	jl     40d071 <_Frprep+0x61>
  40ce25:	cmp    eax,0x75
  40ce28:	jg     40ce39 <_Foprep+0xf9>
  40ce2a:	mov    eax,eax
  40ce2c:	sub    eax,0x58
  40ce2f:	movsxd rax,eax
  40ce32:	jmp    QWORD PTR [rax*8+0x415150]
  40ce39:	cmp    eax,0x78
  40ce3c:	je     40cfe7 <_Fread+0xf1>
  40ce42:	jmp    40d071 <_Frprep+0x61>
  40ce47:	or     ebx,0x2000000
  40ce4d:	.byte 0xf7
  40ce4e:	ret    
  40ce4f:	.byte 0x80

000000000040ce50 <EliminateCRs>:
  40ce50:	add    BYTE PTR [rax],al
  40ce52:	add    BYTE PTR [rax+rcx*1-0x7f],dh
  40ce56:	retf   
  40ce57:	add    BYTE PTR [rax],al
  40ce59:	add    BYTE PTR [rdx],al
  40ce5b:	jmp    40ce6b <EliminateCRs+0x1b>
  40ce5d:	test   ebx,0x20
  40ce63:	je     40ce6b <EliminateCRs+0x1b>
  40ce65:	and    ebx,0xfdffffff
  40ce6b:	mov    DWORD PTR [r13+0x0],0x3
  40ce73:	jmp    40d081 <_Frprep+0x71>
  40ce78:	or     ebx,0x2000000
  40ce7e:	test   ebx,0x80
  40ce84:	je     40ce8e <EliminateCRs+0x3e>
  40ce86:	or     ebx,0x2000000
  40ce8c:	jmp    40ce9c <EliminateCRs+0x4c>
  40ce8e:	test   ebx,0x20
  40ce94:	je     40ce9c <EliminateCRs+0x4c>
  40ce96:	and    ebx,0xfdffffff
  40ce9c:	mov    DWORD PTR [r13+0x0],0x4
  40cea4:	jmp    40d081 <_Frprep+0x71>
  40cea9:	cmp    DWORD PTR [rbp+0x10],0x2
  40cead:	jne    40d081 <_Frprep+0x71>
  40ceb3:	mov    DWORD PTR [rbp-0x210],0x1
  40cebd:	mov    DWORD PTR [r13+0x0],0x8
  40cec5:	movsxd rax,DWORD PTR [rbp-0x44]
  40cec9:	cmp    BYTE PTR [r12+rax*1],0x5e
  40cece:	jne    40ced3 <EliminateCRs+0x83>
  40ced0:	inc    DWORD PTR [rbp-0x44]
  40ced3:	movsxd rax,DWORD PTR [rbp-0x44]
  40ced7:	cmp    BYTE PTR [r12+rax*1],0x5d
  40cedc:	jne    40cee1 <EliminateCRs+0x91>
  40cede:	inc    DWORD PTR [rbp-0x44]
  40cee1:	movsxd rax,DWORD PTR [rbp-0x44]
  40cee5:	cmp    BYTE PTR [r12+rax*1],0x2d
  40ceea:	jne    40cf2b <_Fread+0x35>
  40ceec:	inc    DWORD PTR [rbp-0x44]
  40ceef:	jmp    40cf2b <_Fread+0x35>
  40cef1:	movsxd rax,DWORD PTR [rbp-0x44]
  40cef5:	rex.B

000000000040cef6 <_Fread>:
  40cef6:	cmp    BYTE PTR [rsp+rax*1],0x5b
  40cefa:	jne    40cf04 <_Fread+0xe>
  40cefc:	inc    DWORD PTR [rbp-0x210]
  40cf02:	jmp    40cf28 <_Fread+0x32>
  40cf04:	movsxd rax,DWORD PTR [rbp-0x44]
  40cf08:	cmp    BYTE PTR [r12+rax*1],0x5d
  40cf0d:	jne    40cf28 <_Fread+0x32>
  40cf0f:	mov    eax,DWORD PTR [rbp-0x210]
  40cf15:	sub    eax,0x1
  40cf18:	mov    DWORD PTR [rbp-0x210],eax
  40cf1e:	jg     40cf28 <_Fread+0x32>
  40cf20:	inc    DWORD PTR [rbp-0x44]
  40cf23:	jmp    40d081 <_Frprep+0x71>
  40cf28:	inc    DWORD PTR [rbp-0x44]
  40cf2b:	movsxd rax,DWORD PTR [rbp-0x44]
  40cf2f:	cmp    BYTE PTR [r12+rax*1],0x0
  40cf34:	jne    40cef1 <EliminateCRs+0xa1>
  40cf36:	jmp    40d081 <_Frprep+0x71>
  40cf3b:	cmp    DWORD PTR [rbp+0x10],0x2
  40cf3f:	jne    40cf47 <_Fread+0x51>
  40cf41:	or     ebx,0x4000000
  40cf47:	mov    DWORD PTR [r13+0x0],0x1
  40cf4f:	jmp    40d081 <_Frprep+0x71>
  40cf54:	or     ebx,0x4000
  40cf5a:	mov    DWORD PTR [r13+0x0],0x1
  40cf62:	jmp    40d081 <_Frprep+0x71>
  40cf67:	and    ebx,0xffdfffff
  40cf6d:	mov    DWORD PTR [rbp-0x5c],0xa
  40cf74:	mov    DWORD PTR [r13+0x0],0x1
  40cf7c:	jmp    40d081 <_Frprep+0x71>
  40cf81:	and    ebx,0xffdfffff
  40cf87:	cmp    DWORD PTR [rbp+0x10],0x2
  40cf8b:	je     40cf93 <_Fread+0x9d>
  40cf8d:	or     ebx,0x4000
  40cf93:	test   ebx,0x200
  40cf99:	je     40cfa7 <_Fread+0xb1>
  40cf9b:	and    ebx,0xfffffdff
  40cfa1:	or     ebx,0x100
  40cfa7:	mov    DWORD PTR [rbp-0x5c],0x8
  40cfae:	mov    DWORD PTR [r13+0x0],0x1
  40cfb6:	jmp    40d081 <_Frprep+0x71>
  40cfbb:	or     ebx,0x8000
  40cfc1:	or     ebx,0x2000
  40cfc7:	and    ebx,0xffdfffff
  40cfcd:	mov    DWORD PTR [rbp-0x5c],0x2
  40cfd4:	mov    DWORD PTR [r13+0x0],0x1
  40cfdc:	jmp    40d081 <_Frprep+0x71>
  40cfe1:	or     ebx,0x8000
  40cfe7:	or     ebx,0x4000
  40cfed:	and    ebx,0xffdfffff
  40cff3:	mov    DWORD PTR [rbp-0x5c],0x10
  40cffa:	mov    DWORD PTR [r13+0x0],0x1
  40d002:	jmp    40d081 <_Frprep+0x71>
  40d004:	or     ebx,0x8000
  40d00a:	or     ebx,0x400000

000000000040d010 <_Frprep>:
  40d010:	mov    DWORD PTR [r13+0x0],0x2
  40d018:	jmp    40d081 <_Frprep+0x71>
  40d01a:	or     ebx,0x8000
  40d020:	or     ebx,0x800000
  40d026:	mov    DWORD PTR [r13+0x0],0x2
  40d02e:	jmp    40d081 <_Frprep+0x71>
  40d030:	or     ebx,0x8000
  40d036:	mov    DWORD PTR [r13+0x0],0x2
  40d03e:	jmp    40d081 <_Frprep+0x71>
  40d040:	or     ebx,0x100
  40d046:	mov    DWORD PTR [r13+0x0],0x5
  40d04e:	jmp    40d081 <_Frprep+0x71>
  40d050:	mov    DWORD PTR [r13+0x0],0x6
  40d058:	jmp    40d081 <_Frprep+0x71>
  40d05a:	or     ebx,0x8000
  40d060:	mov    DWORD PTR [rbp-0x5c],0x10
  40d067:	mov    DWORD PTR [r13+0x0],0x2
  40d06f:	jmp    40d081 <_Frprep+0x71>
  40d071:	mov    eax,DWORD PTR [rbp-0x44]
  40d074:	shl    eax,0x8
  40d077:	add    eax,0x2
  40d07a:	neg    eax
  40d07c:	jmp    40d98d <__Parse+0x3f3>
  40d081:	movsxd rax,r15d
  40d084:	lea    rax,[rbp+rax*2-0x1f0]
  40d08c:	inc    WORD PTR [rax]
  40d08f:	mov    eax,DWORD PTR [rbp-0x44]
  40d092:	mov    DWORD PTR [r13+0x18],eax
  40d096:	mov    DWORD PTR [r13+0x4],ebx
  40d09a:	mov    eax,DWORD PTR [rbp-0x54]
  40d09d:	mov    DWORD PTR [r13+0x8],eax
  40d0a1:	mov    eax,DWORD PTR [rbp-0x164]
  40d0a7:	mov    DWORD PTR [r13+0xc],eax
  40d0ab:	cmp    DWORD PTR [rbp-0x5c],0xffffffff
  40d0af:	jne    40d0bd <_Frprep+0xad>
  40d0b1:	mov    DWORD PTR [rbp-0x210],0xa
  40d0bb:	jmp    40d0c6 <_Frprep+0xb6>
  40d0bd:	mov    eax,DWORD PTR [rbp-0x5c]
  40d0c0:	mov    DWORD PTR [rbp-0x210],eax
  40d0c6:	mov    eax,DWORD PTR [rbp-0x210]
  40d0cc:	mov    DWORD PTR [r13+0x10],eax
  40d0d0:	mov    eax,DWORD PTR [rbp-0x58]
  40d0d3:	mov    DWORD PTR [r13+0x14],eax
  40d0d7:	add    r14d,0x1
  40d0db:	test   BYTE PTR [rbp-0x15d],0x1
  40d0e2:	jne    40d0ea <_Frprep+0xda>
  40d0e4:	inc    DWORD PTR [rbp-0x168]
  40d0ea:	movsxd rax,DWORD PTR [rbp-0x44]
  40d0ee:	cmp    BYTE PTR [r12+rax*1],0x0
  40d0f3:	jne    40c5fc <wctomb+0x3c>
  40d0f9:	mov    DWORD PTR [rbp-0x4c],0x0
  40d100:	jmp    40d97f <__Parse+0x3e5>
  40d105:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d109:	mov    eax,DWORD PTR [rbp+rax*4-0x15c]
  40d110:	mov    DWORD PTR [rbp-0x16c],eax
  40d116:	movsxd rax,DWORD PTR [rbp-0x16c]
  40d11d:	mov    rcx,rax
  40d120:	imul   rcx,rcx,0x60
  40d124:	mov    r13,rcx
  40d127:	add    r13,QWORD PTR [rbp+0x20]
  40d12b:	cmp    DWORD PTR [r13+0x0],0x7

000000000040d130 <_Fwprep>:
  40d130:	je     40d140 <_Fwprep+0x10>
  40d132:	test   DWORD PTR [r13+0x4],0x8000000
  40d13a:	jne    40d97c <__Parse+0x3e2>
  40d140:	mov    eax,DWORD PTR [r13+0x0]
  40d144:	or     eax,eax
  40d146:	jl     40d97c <__Parse+0x3e2>
  40d14c:	cmp    eax,0x8
  40d14f:	jg     40d97c <__Parse+0x3e2>
  40d155:	movsxd rax,eax
  40d158:	jmp    QWORD PTR [rax*8+0x415240]
  40d15f:	cmp    QWORD PTR [rbp+0x30],0x0
  40d164:	jne    40d19d <_Fwprep+0x6d>
  40d166:	mov    rcx,QWORD PTR [rbp+0x28]
  40d16a:	mov    rax,QWORD PTR [rcx]
  40d16d:	cmp    eax,0x20
  40d170:	jge    40d181 <_Fwprep+0x51>
  40d172:	add    rax,QWORD PTR [rcx+0x18]
  40d176:	add    QWORD PTR [rcx],0x8
  40d17a:	add    QWORD PTR [rcx+0x8],0x8
  40d17f:	jmp    40d18a <_Fwprep+0x5a>
  40d181:	mov    rax,QWORD PTR [rcx+0x10]
  40d185:	add    QWORD PTR [rcx+0x10],0x8
  40d18a:	mov    QWORD PTR [rbp-0x208],rax
  40d191:	mov    rax,QWORD PTR [rax]
  40d194:	mov    QWORD PTR [rbp-0x200],rax
  40d19b:	jmp    40d1b0 <_Fwprep+0x80>
  40d19d:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d1a1:	mov    rcx,QWORD PTR [rbp+0x30]
  40d1a5:	mov    rax,QWORD PTR [rcx+rax*8]
  40d1a9:	mov    QWORD PTR [rbp-0x200],rax
  40d1b0:	mov    rax,QWORD PTR [rbp-0x200]
  40d1b7:	mov    QWORD PTR [r13+0x20],rax
  40d1bb:	jmp    40d97c <__Parse+0x3e2>
  40d1c0:	cmp    QWORD PTR [rbp+0x30],0x0
  40d1c5:	jne    40d1fe <_Fwprep+0xce>
  40d1c7:	mov    rcx,QWORD PTR [rbp+0x28]
  40d1cb:	mov    rax,QWORD PTR [rcx]
  40d1ce:	cmp    eax,0x20
  40d1d1:	jge    40d1e2 <_Fwprep+0xb2>
  40d1d3:	add    rax,QWORD PTR [rcx+0x18]
  40d1d7:	add    QWORD PTR [rcx],0x8
  40d1db:	add    QWORD PTR [rcx+0x8],0x8
  40d1e0:	jmp    40d1eb <_Fwprep+0xbb>
  40d1e2:	mov    rax,QWORD PTR [rcx+0x10]
  40d1e6:	add    QWORD PTR [rcx+0x10],0x8
  40d1eb:	mov    QWORD PTR [rbp-0x218],rax
  40d1f2:	mov    rax,QWORD PTR [rax]
  40d1f5:	mov    QWORD PTR [rbp-0x210],rax
  40d1fc:	jmp    40d211 <_Fwrite+0x11>
  40d1fe:	rex.W
  40d1ff:	.byte 0x63

000000000040d200 <_Fwrite>:
  40d200:	rex.RB mov r12b,0x48
  40d203:	mov    ecx,DWORD PTR [rbp+0x30]
  40d206:	mov    rax,QWORD PTR [rcx+rax*8]
  40d20a:	mov    QWORD PTR [rbp-0x210],rax
  40d211:	mov    rax,QWORD PTR [rbp-0x210]
  40d218:	mov    QWORD PTR [r13+0x20],rax
  40d21c:	jmp    40d97c <__Parse+0x3e2>
  40d221:	cmp    DWORD PTR [rbp+0x10],0x2
  40d225:	jne    40d2b9 <_Fwrite+0xb9>
  40d22b:	cmp    QWORD PTR [rbp+0x30],0x0
  40d230:	jne    40d269 <_Fwrite+0x69>
  40d232:	mov    rcx,QWORD PTR [rbp+0x28]
  40d236:	mov    rax,QWORD PTR [rcx]
  40d239:	cmp    eax,0x20
  40d23c:	jge    40d24d <_Fwrite+0x4d>
  40d23e:	add    rax,QWORD PTR [rcx+0x18]
  40d242:	add    QWORD PTR [rcx],0x8
  40d246:	add    QWORD PTR [rcx+0x8],0x8
  40d24b:	jmp    40d256 <_Fwrite+0x56>
  40d24d:	mov    rax,QWORD PTR [rcx+0x10]
  40d251:	add    QWORD PTR [rcx+0x10],0x8
  40d256:	mov    QWORD PTR [rbp-0x220],rax
  40d25d:	mov    rax,QWORD PTR [rax]
  40d260:	mov    QWORD PTR [r13+0x20],rax
  40d264:	jmp    40d97c <__Parse+0x3e2>
  40d269:	cmp    DWORD PTR [r13+0x0],0x3
  40d26e:	jne    40d285 <_Fwrite+0x85>
  40d270:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d274:	mov    rcx,QWORD PTR [rbp+0x30]
  40d278:	mov    rax,QWORD PTR [rcx+rax*8]
  40d27c:	mov    QWORD PTR [r13+0x20],rax
  40d280:	jmp    40d97c <__Parse+0x3e2>
  40d285:	test   DWORD PTR [r13+0x4],0x20
  40d28d:	je     40d2a4 <_Fwrite+0xa4>
  40d28f:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d293:	mov    rcx,QWORD PTR [rbp+0x30]
  40d297:	mov    rax,QWORD PTR [rcx+rax*8]
  40d29b:	mov    QWORD PTR [r13+0x20],rax
  40d29f:	jmp    40d97c <__Parse+0x3e2>
  40d2a4:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d2a8:	mov    rcx,QWORD PTR [rbp+0x30]
  40d2ac:	mov    rax,QWORD PTR [rcx+rax*8]
  40d2b0:	mov    QWORD PTR [r13+0x20],rax
  40d2b4:	jmp    40d97c <__Parse+0x3e2>
  40d2b9:	test   DWORD PTR [r13+0x4],0x60000000
  40d2c1:	je     40d328 <_Fwrite+0x128>
  40d2c3:	test   DWORD PTR [r13+0x4],0x20000000
  40d2cb:	je     40d2e6 <_Fwrite+0xe6>
  40d2cd:	movsxd rax,DWORD PTR [r13+0x14]
  40d2d1:	mov    rcx,rax
  40d2d4:	imul   rcx,rcx,0x60
  40d2d8:	mov    rax,QWORD PTR [rbp+0x20]
  40d2dc:	mov    rax,QWORD PTR [rcx+rax*1+0x20]
  40d2e1:	mov    DWORD PTR [rbp-0x58],eax
  40d2e4:	jmp    40d2ed <_Fwrite+0xed>
  40d2e6:	mov    eax,DWORD PTR [r13+0x14]
  40d2ea:	mov    DWORD PTR [rbp-0x58],eax
  40d2ed:	mov    eax,DWORD PTR [r13+0x4]
  40d2f1:	and    eax,0xffffe27f
  40d2f6:	mov    DWORD PTR [r13+0x4],eax
  40d2fa:	cmp    DWORD PTR [rbp-0x58],0x4
  40d2fe:	jle    40d328 <_Fwrite+0x128>
  40d300:	cmp    DWORD PTR [rbp-0x58],0x4
  40d304:	jg     40d310 <_Fwrite+0x110>
  40d306:	or     DWORD PTR [r13+0x4],0x80
  40d30e:	jmp    40d328 <_Fwrite+0x128>
  40d310:	cmp    DWORD PTR [rbp-0x58],0x8
  40d314:	jg     40d320 <_Fwrite+0x120>
  40d316:	or     DWORD PTR [r13+0x4],0x100
  40d31e:	jmp    40d328 <_Fwrite+0x128>
  40d320:	or     DWORD PTR [r13+0x4],0x1000
  40d328:	test   DWORD PTR [r13+0x4],0x400
  40d330:	je     40d396 <_Fwrite+0x196>
  40d332:	cmp    QWORD PTR [rbp+0x30],0x0
  40d337:	jne    40d370 <_Fwrite+0x170>
  40d339:	mov    rcx,QWORD PTR [rbp+0x28]
  40d33d:	mov    rax,QWORD PTR [rcx]
  40d340:	cmp    eax,0x20
  40d343:	jge    40d354 <_Fwrite+0x154>
  40d345:	add    rax,QWORD PTR [rcx+0x18]
  40d349:	add    QWORD PTR [rcx],0x8
  40d34d:	add    QWORD PTR [rcx+0x8],0x8
  40d352:	jmp    40d35d <_Fwrite+0x15d>
  40d354:	mov    rax,QWORD PTR [rcx+0x10]
  40d358:	add    QWORD PTR [rcx+0x10],0x8
  40d35d:	mov    QWORD PTR [rbp-0x228],rax
  40d364:	mov    rax,QWORD PTR [rax]
  40d367:	mov    QWORD PTR [rbp-0x220],rax
  40d36e:	jmp    40d386 <_Fwrite+0x186>
  40d370:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d374:	mov    rcx,QWORD PTR [rbp+0x30]
  40d378:	mov    rax,QWORD PTR [rcx+rax*8]
  40d37c:	mov    rax,QWORD PTR [rax]
  40d37f:	mov    QWORD PTR [rbp-0x220],rax
  40d386:	mov    rax,QWORD PTR [rbp-0x220]
  40d38d:	mov    QWORD PTR [r13+0x20],rax
  40d391:	jmp    40d97c <__Parse+0x3e2>
  40d396:	test   DWORD PTR [r13+0x4],0x800
  40d39e:	je     40d404 <__SetLocale+0x44>
  40d3a0:	cmp    QWORD PTR [rbp+0x30],0x0
  40d3a5:	jne    40d3de <__SetLocale+0x1e>
  40d3a7:	mov    rcx,QWORD PTR [rbp+0x28]
  40d3ab:	mov    rax,QWORD PTR [rcx]
  40d3ae:	cmp    eax,0x20
  40d3b1:	jge    40d3c2 <__SetLocale+0x2>
  40d3b3:	add    rax,QWORD PTR [rcx+0x18]
  40d3b7:	add    QWORD PTR [rcx],0x8
  40d3bb:	add    QWORD PTR [rcx+0x8],0x8

000000000040d3c0 <__SetLocale>:
  40d3c0:	jmp    40d3cb <__SetLocale+0xb>
  40d3c2:	mov    rax,QWORD PTR [rcx+0x10]
  40d3c6:	add    QWORD PTR [rcx+0x10],0x8
  40d3cb:	mov    QWORD PTR [rbp-0x238],rax
  40d3d2:	mov    rax,QWORD PTR [rax]
  40d3d5:	mov    QWORD PTR [rbp-0x230],rax
  40d3dc:	jmp    40d3f4 <__SetLocale+0x34>
  40d3de:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d3e2:	mov    rcx,QWORD PTR [rbp+0x30]
  40d3e6:	mov    rax,QWORD PTR [rcx+rax*8]
  40d3ea:	mov    rax,QWORD PTR [rax]
  40d3ed:	mov    QWORD PTR [rbp-0x230],rax
  40d3f4:	mov    rax,QWORD PTR [rbp-0x230]
  40d3fb:	mov    QWORD PTR [r13+0x20],rax
  40d3ff:	jmp    40d97c <__Parse+0x3e2>
  40d404:	test   DWORD PTR [r13+0x4],0x1000
  40d40c:	je     40d472 <__SetLocale+0xb2>
  40d40e:	cmp    QWORD PTR [rbp+0x30],0x0
  40d413:	jne    40d44c <__SetLocale+0x8c>
  40d415:	mov    rcx,QWORD PTR [rbp+0x28]
  40d419:	mov    rax,QWORD PTR [rcx]
  40d41c:	cmp    eax,0x20
  40d41f:	jge    40d430 <__SetLocale+0x70>
  40d421:	add    rax,QWORD PTR [rcx+0x18]
  40d425:	add    QWORD PTR [rcx],0x8
  40d429:	add    QWORD PTR [rcx+0x8],0x8
  40d42e:	jmp    40d439 <__SetLocale+0x79>
  40d430:	mov    rax,QWORD PTR [rcx+0x10]
  40d434:	add    QWORD PTR [rcx+0x10],0x8
  40d439:	mov    QWORD PTR [rbp-0x248],rax
  40d440:	mov    rax,QWORD PTR [rax]
  40d443:	mov    QWORD PTR [rbp-0x240],rax
  40d44a:	jmp    40d462 <__SetLocale+0xa2>
  40d44c:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d450:	mov    rcx,QWORD PTR [rbp+0x30]
  40d454:	mov    rax,QWORD PTR [rcx+rax*8]
  40d458:	mov    rax,QWORD PTR [rax]
  40d45b:	mov    QWORD PTR [rbp-0x240],rax
  40d462:	mov    rax,QWORD PTR [rbp-0x240]
  40d469:	mov    QWORD PTR [r13+0x20],rax
  40d46d:	jmp    40d97c <__Parse+0x3e2>
  40d472:	test   DWORD PTR [r13+0x4],0x100
  40d47a:	je     40d4e0 <__GetPosition+0x52>
  40d47c:	cmp    QWORD PTR [rbp+0x30],0x0
  40d481:	jne    40d4ba <__GetPosition+0x2c>
  40d483:	mov    rcx,QWORD PTR [rbp+0x28]
  40d487:	mov    rax,QWORD PTR [rcx]
  40d48a:	cmp    eax,0x20
  40d48d:	.byte 0x7d

000000000040d48e <__GetPosition>:
  40d48e:	cmovs  eax,DWORD PTR [rbx]
  40d491:	sbb    BYTE PTR [r8-0x7d],cl
  40d495:	add    DWORD PTR [rax],ecx
  40d497:	add    QWORD PTR [rcx+0x8],0x8
  40d49c:	jmp    40d4a7 <__GetPosition+0x19>
  40d49e:	mov    rax,QWORD PTR [rcx+0x10]
  40d4a2:	add    QWORD PTR [rcx+0x10],0x8
  40d4a7:	mov    QWORD PTR [rbp-0x258],rax
  40d4ae:	mov    rax,QWORD PTR [rax]
  40d4b1:	mov    QWORD PTR [rbp-0x250],rax
  40d4b8:	jmp    40d4d0 <__GetPosition+0x42>
  40d4ba:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d4be:	mov    rcx,QWORD PTR [rbp+0x30]
  40d4c2:	mov    rax,QWORD PTR [rcx+rax*8]
  40d4c6:	mov    rax,QWORD PTR [rax]
  40d4c9:	mov    QWORD PTR [rbp-0x250],rax
  40d4d0:	mov    rax,QWORD PTR [rbp-0x250]
  40d4d7:	mov    QWORD PTR [r13+0x20],rax
  40d4db:	jmp    40d97c <__Parse+0x3e2>
  40d4e0:	test   DWORD PTR [r13+0x4],0x80
  40d4e8:	je     40d54e <Logarithm+0x4a>
  40d4ea:	cmp    QWORD PTR [rbp+0x30],0x0
  40d4ef:	jne    40d528 <Logarithm+0x24>
  40d4f1:	mov    rcx,QWORD PTR [rbp+0x28]
  40d4f5:	mov    rax,QWORD PTR [rcx]
  40d4f8:	cmp    eax,0x20
  40d4fb:	jge    40d50c <Logarithm+0x8>
  40d4fd:	add    rax,QWORD PTR [rcx+0x18]
  40d501:	rex.W
  40d502:	.byte 0x83
  40d503:	.byte 0x1

000000000040d504 <Logarithm>:
  40d504:	or     BYTE PTR [rax-0x7d],cl
  40d507:	or     BYTE PTR [r8],cl
  40d50a:	jmp    40d515 <Logarithm+0x11>
  40d50c:	mov    rax,QWORD PTR [rcx+0x10]
  40d510:	add    QWORD PTR [rcx+0x10],0x8
  40d515:	mov    QWORD PTR [rbp-0x268],rax
  40d51c:	movsxd rax,DWORD PTR [rax]
  40d51f:	mov    QWORD PTR [rbp-0x260],rax
  40d526:	jmp    40d53e <Logarithm+0x3a>
  40d528:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d52c:	mov    rcx,QWORD PTR [rbp+0x30]
  40d530:	mov    rax,QWORD PTR [rcx+rax*8]
  40d534:	movsxd rax,DWORD PTR [rax]
  40d537:	mov    QWORD PTR [rbp-0x260],rax
  40d53e:	mov    rax,QWORD PTR [rbp-0x260]
  40d545:	mov    QWORD PTR [r13+0x20],rax
  40d549:	jmp    40d97c <__Parse+0x3e2>
  40d54e:	cmp    QWORD PTR [rbp+0x30],0x0
  40d553:	jne    40d589 <Logarithm+0x85>
  40d555:	mov    rcx,QWORD PTR [rbp+0x28]
  40d559:	mov    rax,QWORD PTR [rcx]
  40d55c:	cmp    eax,0x20
  40d55f:	jge    40d570 <Logarithm+0x6c>
  40d561:	add    rax,QWORD PTR [rcx+0x18]
  40d565:	add    QWORD PTR [rcx],0x8
  40d569:	add    QWORD PTR [rcx+0x8],0x8
  40d56e:	jmp    40d579 <Logarithm+0x75>
  40d570:	mov    rax,QWORD PTR [rcx+0x10]
  40d574:	add    QWORD PTR [rcx+0x10],0x8
  40d579:	mov    QWORD PTR [rbp-0x270],rax
  40d580:	movsxd rax,DWORD PTR [rax]
  40d583:	mov    QWORD PTR [r13+0x20],rax
  40d587:	jmp    40d5db <__Parse+0x41>
  40d589:	cmp    DWORD PTR [r13+0x0],0x3
  40d58e:	jne    40d5a7 <__Parse+0xd>
  40d590:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d594:	mov    rcx,QWORD PTR [rbp+0x30]
  40d598:	rex.W
  40d599:	.byte 0x8b

000000000040d59a <__Parse>:
  40d59a:	add    al,0xc1
  40d59c:	movsx  eax,BYTE PTR [rax]
  40d59f:	mov    eax,eax
  40d5a1:	mov    QWORD PTR [r13+0x20],rax
  40d5a5:	jmp    40d5db <__Parse+0x41>
  40d5a7:	test   DWORD PTR [r13+0x4],0x20
  40d5af:	je     40d5c8 <__Parse+0x2e>
  40d5b1:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d5b5:	mov    rcx,QWORD PTR [rbp+0x30]
  40d5b9:	mov    rax,QWORD PTR [rcx+rax*8]
  40d5bd:	movsx  eax,WORD PTR [rax]
  40d5c0:	mov    eax,eax
  40d5c2:	mov    QWORD PTR [r13+0x20],rax
  40d5c6:	jmp    40d5db <__Parse+0x41>
  40d5c8:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d5cc:	mov    rcx,QWORD PTR [rbp+0x30]
  40d5d0:	mov    rax,QWORD PTR [rcx+rax*8]
  40d5d4:	movsxd rax,DWORD PTR [rax]
  40d5d7:	mov    QWORD PTR [r13+0x20],rax
  40d5db:	mov    eax,DWORD PTR [r13+0x4]
  40d5df:	test   eax,0x40
  40d5e4:	je     40d5f5 <__Parse+0x5b>
  40d5e6:	test   eax,0x4000
  40d5eb:	je     40d5f5 <__Parse+0x5b>
  40d5ed:	and    QWORD PTR [r13+0x20],0xff
  40d5f5:	mov    eax,DWORD PTR [r13+0x4]
  40d5f9:	test   eax,0x20
  40d5fe:	je     40d97c <__Parse+0x3e2>
  40d604:	test   eax,0x4000
  40d609:	je     40d97c <__Parse+0x3e2>
  40d60f:	and    QWORD PTR [r13+0x20],0xffff
  40d617:	jmp    40d97c <__Parse+0x3e2>
  40d61c:	test   DWORD PTR [r13+0x4],0x8000000
  40d624:	je     40d687 <__Parse+0xed>
  40d626:	cmp    QWORD PTR [rbp+0x30],0x0
  40d62b:	jne    40d664 <__Parse+0xca>
  40d62d:	mov    rcx,QWORD PTR [rbp+0x28]
  40d631:	mov    rax,QWORD PTR [rcx]
  40d634:	cmp    eax,0x20
  40d637:	jge    40d648 <__Parse+0xae>
  40d639:	add    rax,QWORD PTR [rcx+0x18]
  40d63d:	add    QWORD PTR [rcx],0x8
  40d641:	add    QWORD PTR [rcx+0x8],0x8
  40d646:	jmp    40d651 <__Parse+0xb7>
  40d648:	mov    rax,QWORD PTR [rcx+0x10]
  40d64c:	add    QWORD PTR [rcx+0x10],0x8
  40d651:	mov    QWORD PTR [rbp-0x228],rax
  40d658:	mov    rax,QWORD PTR [rax]
  40d65b:	mov    QWORD PTR [rbp-0x220],rax
  40d662:	jmp    40d677 <__Parse+0xdd>
  40d664:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d668:	mov    rcx,QWORD PTR [rbp+0x30]
  40d66c:	mov    rax,QWORD PTR [rcx+rax*8]
  40d670:	mov    QWORD PTR [rbp-0x220],rax
  40d677:	mov    rax,QWORD PTR [rbp-0x220]
  40d67e:	mov    QWORD PTR [r13+0x20],rax
  40d682:	jmp    40d97c <__Parse+0x3e2>
  40d687:	cmp    QWORD PTR [rbp+0x30],0x0
  40d68c:	jne    40d6c5 <__Parse+0x12b>
  40d68e:	mov    rcx,QWORD PTR [rbp+0x28]
  40d692:	mov    rax,QWORD PTR [rcx]
  40d695:	cmp    eax,0x20
  40d698:	jge    40d6a9 <__Parse+0x10f>
  40d69a:	add    rax,QWORD PTR [rcx+0x18]
  40d69e:	add    QWORD PTR [rcx],0x8
  40d6a2:	add    QWORD PTR [rcx+0x8],0x8
  40d6a7:	jmp    40d6b2 <__Parse+0x118>
  40d6a9:	mov    rax,QWORD PTR [rcx+0x10]
  40d6ad:	add    QWORD PTR [rcx+0x10],0x8
  40d6b2:	mov    QWORD PTR [rbp-0x238],rax
  40d6b9:	movsxd rax,DWORD PTR [rax]
  40d6bc:	mov    QWORD PTR [rbp-0x230],rax
  40d6c3:	jmp    40d6db <__Parse+0x141>
  40d6c5:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d6c9:	mov    rcx,QWORD PTR [rbp+0x30]
  40d6cd:	mov    rax,QWORD PTR [rcx+rax*8]
  40d6d1:	movsxd rax,DWORD PTR [rax]
  40d6d4:	mov    QWORD PTR [rbp-0x230],rax
  40d6db:	mov    rax,QWORD PTR [rbp-0x230]
  40d6e2:	mov    QWORD PTR [r13+0x20],rax
  40d6e6:	jmp    40d97c <__Parse+0x3e2>
  40d6eb:	cmp    DWORD PTR [rbp+0x10],0x2
  40d6ef:	jne    40d82d <__Parse+0x293>
  40d6f5:	test   DWORD PTR [r13+0x4],0x280
  40d6fd:	jne    40d704 <__Parse+0x16a>
  40d6ff:	or     DWORD PTR [r13+0x4],0x20
  40d704:	mov    eax,DWORD PTR [r13+0x4]
  40d708:	test   DWORD PTR [r13+0x4],0x80
  40d710:	jne    40d719 <__Parse+0x17f>
  40d712:	test   eax,0x200
  40d717:	je     40d77a <__Parse+0x1e0>
  40d719:	cmp    QWORD PTR [rbp+0x30],0x0
  40d71e:	jne    40d757 <__Parse+0x1bd>
  40d720:	mov    rcx,QWORD PTR [rbp+0x28]
  40d724:	mov    rax,QWORD PTR [rcx]
  40d727:	cmp    eax,0x20
  40d72a:	jge    40d73b <__Parse+0x1a1>
  40d72c:	add    rax,QWORD PTR [rcx+0x18]
  40d730:	add    QWORD PTR [rcx],0x8
  40d734:	add    QWORD PTR [rcx+0x8],0x8
  40d739:	jmp    40d744 <__Parse+0x1aa>
  40d73b:	mov    rax,QWORD PTR [rcx+0x10]
  40d73f:	add    QWORD PTR [rcx+0x10],0x8
  40d744:	mov    QWORD PTR [rbp-0x248],rax
  40d74b:	mov    rax,QWORD PTR [rax]
  40d74e:	mov    QWORD PTR [rbp-0x240],rax
  40d755:	jmp    40d76a <__Parse+0x1d0>
  40d757:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d75b:	mov    rcx,QWORD PTR [rbp+0x30]
  40d75f:	mov    rax,QWORD PTR [rcx+rax*8]
  40d763:	mov    QWORD PTR [rbp-0x240],rax
  40d76a:	mov    rax,QWORD PTR [rbp-0x240]
  40d771:	mov    QWORD PTR [r13+0x20],rax
  40d775:	jmp    40d97c <__Parse+0x3e2>
  40d77a:	cmp    QWORD PTR [rbp+0x30],0x0
  40d77f:	jne    40d7f9 <__Parse+0x25f>
  40d781:	test   DWORD PTR [r13+0x4],0x20
  40d789:	je     40d7c2 <__Parse+0x228>
  40d78b:	mov    rcx,QWORD PTR [rbp+0x28]
  40d78f:	mov    rax,QWORD PTR [rcx]
  40d792:	cmp    eax,0x20
  40d795:	jge    40d7a6 <__Parse+0x20c>
  40d797:	add    rax,QWORD PTR [rcx+0x18]
  40d79b:	add    QWORD PTR [rcx],0x8
  40d79f:	add    QWORD PTR [rcx+0x8],0x8
  40d7a4:	jmp    40d7af <__Parse+0x215>
  40d7a6:	mov    rax,QWORD PTR [rcx+0x10]
  40d7aa:	add    QWORD PTR [rcx+0x10],0x8
  40d7af:	mov    QWORD PTR [rbp-0x250],rax
  40d7b6:	mov    rax,QWORD PTR [rax]
  40d7b9:	mov    QWORD PTR [r13+0x20],rax
  40d7bd:	jmp    40d97c <__Parse+0x3e2>
  40d7c2:	mov    rcx,QWORD PTR [rbp+0x28]
  40d7c6:	mov    rax,QWORD PTR [rcx]
  40d7c9:	cmp    eax,0x20
  40d7cc:	jge    40d7dd <__Parse+0x243>
  40d7ce:	add    rax,QWORD PTR [rcx+0x18]
  40d7d2:	add    QWORD PTR [rcx],0x8
  40d7d6:	add    QWORD PTR [rcx+0x8],0x8
  40d7db:	jmp    40d7e6 <__Parse+0x24c>
  40d7dd:	mov    rax,QWORD PTR [rcx+0x10]
  40d7e1:	add    QWORD PTR [rcx+0x10],0x8
  40d7e6:	mov    QWORD PTR [rbp-0x250],rax
  40d7ed:	mov    rax,QWORD PTR [rax]
  40d7f0:	mov    QWORD PTR [r13+0x20],rax
  40d7f4:	jmp    40d97c <__Parse+0x3e2>
  40d7f9:	test   DWORD PTR [r13+0x4],0x20
  40d801:	je     40d818 <__Parse+0x27e>
  40d803:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d807:	mov    rcx,QWORD PTR [rbp+0x30]
  40d80b:	mov    rax,QWORD PTR [rcx+rax*8]
  40d80f:	mov    QWORD PTR [r13+0x20],rax
  40d813:	jmp    40d97c <__Parse+0x3e2>
  40d818:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d81c:	mov    rcx,QWORD PTR [rbp+0x30]
  40d820:	mov    rax,QWORD PTR [rcx+rax*8]
  40d824:	mov    QWORD PTR [r13+0x20],rax
  40d828:	jmp    40d97c <__Parse+0x3e2>
  40d82d:	test   DWORD PTR [r13+0x4],0x200
  40d835:	je     40d888 <__Parse+0x2ee>
  40d837:	cmp    QWORD PTR [rbp+0x30],0x0
  40d83c:	jne    40d865 <__Parse+0x2cb>
  40d83e:	mov    rcx,QWORD PTR [rbp+0x28]
  40d842:	mov    rax,QWORD PTR [rcx+0x10]
  40d846:	add    QWORD PTR [rcx+0x10],0x10
  40d84b:	add    QWORD PTR [rcx],0x8
  40d84f:	add    QWORD PTR [rcx+0x8],0x8
  40d854:	mov    QWORD PTR [rbp-0x250],rax
  40d85b:	fld    TBYTE PTR [rax]
  40d85d:	fstp   TBYTE PTR [rbp-0x248]
  40d863:	jmp    40d879 <__Parse+0x2df>
  40d865:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d869:	mov    rcx,QWORD PTR [rbp+0x30]
  40d86d:	mov    rax,QWORD PTR [rcx+rax*8]
  40d871:	fld    TBYTE PTR [rax]
  40d873:	fstp   TBYTE PTR [rbp-0x248]
  40d879:	fld    TBYTE PTR [rbp-0x248]
  40d87f:	fstp   TBYTE PTR [r13+0x20]
  40d883:	jmp    40d97c <__Parse+0x3e2>
  40d888:	test   DWORD PTR [r13+0x4],0x100
  40d890:	je     40d8ed <__Parse+0x353>
  40d892:	cmp    QWORD PTR [rbp+0x30],0x0
  40d897:	jne    40d8cc <__Parse+0x332>
  40d899:	mov    rcx,QWORD PTR [rbp+0x28]
  40d89d:	mov    rax,QWORD PTR [rcx+0x10]
  40d8a1:	add    QWORD PTR [rcx+0x10],0x40
  40d8a6:	add    QWORD PTR [rcx],0x8
  40d8aa:	add    QWORD PTR [rcx+0x8],0x8
  40d8af:	mov    QWORD PTR [rbp-0x258],rax
  40d8b6:	lea    rdi,[r13+0x20]
  40d8ba:	lea    rsi,[rax]
  40d8bd:	mov    rcx,0x8
  40d8c4:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  40d8c7:	jmp    40d97c <__Parse+0x3e2>
  40d8cc:	mov    r8,0x40
  40d8d3:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d8d7:	mov    rcx,QWORD PTR [rbp+0x30]
  40d8db:	lea    rdx,[rcx+rax*8]
  40d8df:	lea    rcx,[r13+0x20]
  40d8e3:	call   4057a0 <fabs+0x10>
  40d8e8:	jmp    40d97c <__Parse+0x3e2>
  40d8ed:	cmp    QWORD PTR [rbp+0x30],0x0
  40d8f2:	jne    40d93a <__Parse+0x3a0>
  40d8f4:	mov    rcx,QWORD PTR [rbp+0x28]
  40d8f8:	mov    rax,QWORD PTR [rcx+0x8]
  40d8fc:	cmp    eax,0x40
  40d8ff:	jge    40d910 <__Parse+0x376>
  40d901:	add    rax,QWORD PTR [rcx+0x18]
  40d905:	add    QWORD PTR [rcx+0x8],0x8
  40d90a:	add    QWORD PTR [rcx],0x8
  40d90e:	jmp    40d919 <__Parse+0x37f>
  40d910:	mov    rax,QWORD PTR [rcx+0x10]
  40d914:	add    QWORD PTR [rcx+0x10],0x8
  40d919:	mov    QWORD PTR [rbp-0x258],rax
  40d920:	movsd  xmm0,QWORD PTR [rax]
  40d924:	sub    rsp,0x8
  40d928:	movq   QWORD PTR [rsp],xmm0
  40d92d:	fld    QWORD PTR [rsp]
  40d930:	add    rsp,0x8
  40d934:	fstp   TBYTE PTR [r13+0x20]
  40d938:	jmp    40d97c <__Parse+0x3e2>
  40d93a:	test   DWORD PTR [r13+0x4],0x20
  40d942:	je     40d958 <__Parse+0x3be>
  40d944:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d948:	mov    rcx,QWORD PTR [rbp+0x30]
  40d94c:	mov    rax,QWORD PTR [rcx+rax*8]
  40d950:	fld    DWORD PTR [rax]
  40d952:	fstp   TBYTE PTR [r13+0x20]
  40d956:	jmp    40d97c <__Parse+0x3e2>
  40d958:	movsxd rax,DWORD PTR [rbp-0x4c]
  40d95c:	mov    rcx,QWORD PTR [rbp+0x30]
  40d960:	mov    rax,QWORD PTR [rcx+rax*8]
  40d964:	movsd  xmm0,QWORD PTR [rax]
  40d968:	sub    rsp,0x8
  40d96c:	movq   QWORD PTR [rsp],xmm0
  40d971:	fld    QWORD PTR [rsp]
  40d974:	add    rsp,0x8
  40d978:	fstp   TBYTE PTR [r13+0x20]
  40d97c:	inc    DWORD PTR [rbp-0x4c]
  40d97f:	mov    eax,DWORD PTR [rbp-0x4c]
  40d982:	cmp    eax,DWORD PTR [rbp-0x50]
  40d985:	jle    40d105 <_Frprep+0xf5>
  40d98b:	mov    eax,eax
  40d98d:	add    rsp,0x270
  40d994:	add    rsp,0x8
  40d998:	pop    r15
  40d99a:	pop    r14
  40d99c:	pop    r13
  40d99e:	pop    r12
  40d9a0:	pop    rdi
  40d9a1:	pop    rsi
  40d9a2:	pop    rbx
  40d9a3:	leave  
  40d9a4:	ret    
  40d9a5:	push   rbp
  40d9a6:	mov    rbp,rsp
  40d9a9:	push   rbx
  40d9aa:	push   rsi
  40d9ab:	push   r12
  40d9ad:	push   r13
  40d9af:	push   r14
  40d9b1:	push   r15
  40d9b3:	sub    rsp,0x140
  40d9ba:	mov    QWORD PTR [rbp+0x28],r9
  40d9be:	mov    QWORD PTR [rbp+0x20],r8
  40d9c2:	mov    r13,rdx
  40d9c5:	mov    rsi,rcx
  40d9c8:	test   DWORD PTR [rbp+0x20],0x8000
  40d9cf:	je     40d9e2 <__Parse+0x448>
  40d9d1:	lea    rax,ds:0x414fb3
  40d9d9:	mov    QWORD PTR [rbp-0x120],rax
  40d9e0:	jmp    40d9f1 <__Parse+0x457>
  40d9e2:	lea    rax,ds:0x414f8e
  40d9ea:	mov    QWORD PTR [rbp-0x120],rax
  40d9f1:	mov    rax,QWORD PTR [rbp-0x120]
  40d9f8:	mov    QWORD PTR [rbp-0x40],rax
  40d9fc:	test   DWORD PTR [rbp+0x20],0x4000
  40da03:	je     40da11 <__Parse+0x477>
  40da05:	mov    BYTE PTR [rbp-0x10d],0x0
  40da0c:	jmp    40daaf <__Parse+0x515>
  40da11:	test   DWORD PTR [rbp+0x20],0x100
  40da18:	je     40da6b <__Parse+0x4d1>
  40da1a:	or     r13,r13
  40da1d:	jge    40da2b <__Parse+0x491>
  40da1f:	mov    DWORD PTR [rbp-0x12c],0x1
  40da29:	jmp    40da35 <__Parse+0x49b>
  40da2b:	mov    DWORD PTR [rbp-0x12c],0x0
  40da35:	mov    eax,DWORD PTR [rbp-0x12c]
  40da3b:	or     eax,eax
  40da3d:	mov    eax,0x0
  40da42:	setne  al
  40da45:	mov    BYTE PTR [rbp-0x10d],al
  40da4b:	test   BYTE PTR [rbp-0x10d],0x1
  40da52:	je     40daaf <__Parse+0x515>
  40da54:	mov    QWORD PTR [rbp-0x128],r13
  40da5b:	neg    QWORD PTR [rbp-0x128]
  40da62:	mov    r13,QWORD PTR [rbp-0x128]
  40da69:	jmp    40daaf <__Parse+0x515>
  40da6b:	mov    DWORD PTR [rbp-0x12c],r13d
  40da72:	test   r13d,r13d
  40da75:	setl   al
  40da78:	and    eax,0x1
  40da7b:	mov    DWORD PTR [rbp-0x130],eax
  40da81:	or     eax,eax
  40da83:	mov    eax,0x0
  40da88:	setne  al
  40da8b:	mov    BYTE PTR [rbp-0x10d],al
  40da91:	test   BYTE PTR [rbp-0x10d],0x1
  40da98:	je     40daaf <__Parse+0x515>
  40da9a:	mov    QWORD PTR [rbp-0x128],r13
  40daa1:	neg    QWORD PTR [rbp-0x128]
  40daa8:	mov    r13,QWORD PTR [rbp-0x128]
  40daaf:	or     r13,r13
  40dab2:	jne    40daed <__Parse+0x553>
  40dab4:	mov    eax,DWORD PTR [rbp+0x30]
  40dab7:	or     eax,eax
  40dab9:	jne    40daed <__Parse+0x553>
  40dabb:	cmp    DWORD PTR [rbp+0x38],0x8
  40dabf:	jne    40daca <__Parse+0x530>
  40dac1:	test   DWORD PTR [rbp+0x20],0x10
  40dac8:	jne    40daed <__Parse+0x553>
  40daca:	test   DWORD PTR [rbp+0x20],0x2
  40dad1:	je     40ded2 <__Parse+0x938>
  40dad7:	mov    rdx,0x20
  40dade:	lea    rcx,[rsi]
  40dae1:	call   QWORD PTR [rsi*1+0x0]
  40dae8:	jmp    40ded2 <__Parse+0x938>
  40daed:	test   DWORD PTR [rbp+0x20],0x100
  40daf4:	jne    40db1b <__Parse+0x581>
  40daf6:	test   DWORD PTR [rbp+0x20],0x80
  40dafd:	je     40db0e <__Parse+0x574>
  40daff:	movabs rax,0xffffffff
  40db09:	and    r13,rax
  40db0c:	jmp    40db1b <__Parse+0x581>
  40db0e:	movabs rax,0xffffffff
  40db18:	and    r13,rax
  40db1b:	lea    rax,[rbp-0x45]
  40db1f:	mov    QWORD PTR [rbp-0x118],rax
  40db26:	lea    rbx,[rbp-0x45]
  40db2a:	lea    rax,[rbx]
  40db2d:	lea    rbx,[rax-0x1]
  40db31:	mov    BYTE PTR [rax],0x0
  40db34:	movsx  eax,BYTE PTR ds:0x414f4e
  40db3c:	mov    DWORD PTR [rbp-0x34],eax
  40db3f:	mov    DWORD PTR [rbp-0x44],0x1
  40db46:	mov    r14d,0x1
  40db4c:	lea    rax,[rbx]
  40db4f:	mov    QWORD PTR [rbp-0x128],rax
  40db56:	lea    rbx,[rax-0x1]
  40db5a:	mov    rax,r13
  40db5d:	movsxd rcx,DWORD PTR [rbp+0x38]
  40db61:	xor    rdx,rdx
  40db64:	div    rcx
  40db67:	mov    QWORD PTR [rbp-0x130],rdx
  40db6e:	mov    rax,QWORD PTR [rbp-0x130]
  40db75:	movsxd rax,eax
  40db78:	mov    rcx,QWORD PTR [rbp-0x40]
  40db7c:	mov    al,BYTE PTR [rcx+rax*1]
  40db7f:	mov    rcx,QWORD PTR [rbp-0x128]
  40db86:	mov    BYTE PTR [rcx],al
  40db88:	mov    rax,r13
  40db8b:	movsxd r10,DWORD PTR [rbp+0x38]
  40db8f:	xor    rdx,rdx
  40db92:	div    r10
  40db95:	mov    r13,rax
  40db98:	or     r13,r13
  40db9b:	je     40dc70 <__Parse+0x6d6>
  40dba1:	test   DWORD PTR [rbp+0x20],0x1000000
  40dba8:	je     40dc5f <__Parse+0x6c5>
  40dbae:	mov    ecx,DWORD PTR [rbp-0x34]
  40dbb1:	cmp    ecx,0x7f
  40dbb4:	je     40dc5f <__Parse+0x6c5>
  40dbba:	mov    eax,r14d
  40dbbd:	mov    r10d,ecx
  40dbc0:	cdq    
  40dbc1:	idiv   r10d
  40dbc4:	or     edx,edx
  40dbc6:	jne    40dc5f <__Parse+0x6c5>
  40dbcc:	lea    rcx,ds:0x414f4b
  40dbd4:	call   40b060 <_setlocale+0xb54>
  40dbd9:	mov    QWORD PTR [rbp-0x138],rax
  40dbe0:	mov    r12,rax
  40dbe3:	lea    rax,[rbp-0x105]
  40dbea:	mov    rcx,rbx
  40dbed:	sub    rcx,rax
  40dbf0:	mov    eax,ecx
  40dbf2:	sub    eax,r12d
  40dbf5:	jle    40dc26 <__Parse+0x68c>
  40dbf7:	mov    eax,r12d
  40dbfa:	sub    eax,0x1
  40dbfd:	movsxd rax,eax
  40dc00:	lea    r15,[rax+0x414f4b]
  40dc07:	jmp    40dc1b <__Parse+0x681>
  40dc09:	lea    rax,[rbx]
  40dc0c:	lea    rbx,[rax-0x1]
  40dc10:	lea    rcx,[r15]
  40dc13:	lea    r15,[rcx-0x1]
  40dc17:	mov    cl,BYTE PTR [rcx]
  40dc19:	mov    BYTE PTR [rax],cl
  40dc1b:	mov    eax,r12d
  40dc1e:	sub    r12d,0x1
  40dc22:	or     eax,eax
  40dc24:	jg     40dc09 <__Parse+0x66f>
  40dc26:	movsxd rax,DWORD PTR [rbp-0x44]
  40dc2a:	movsx  eax,BYTE PTR [rax*1+0x414f4e]
  40dc32:	or     eax,eax
  40dc34:	je     40dc5f <__Parse+0x6c5>
  40dc36:	jl     40dc46 <__Parse+0x6ac>
  40dc38:	cmp    eax,0x7f
  40dc3b:	jne    40dc46 <__Parse+0x6ac>
  40dc3d:	mov    DWORD PTR [rbp-0x34],0x7f
  40dc44:	jmp    40dc5f <__Parse+0x6c5>
  40dc46:	mov    eax,DWORD PTR [rbp-0x44]
  40dc49:	mov    ecx,eax
  40dc4b:	add    ecx,0x1
  40dc4e:	mov    DWORD PTR [rbp-0x44],ecx
  40dc51:	movsxd rax,eax
  40dc54:	movsx  eax,BYTE PTR [rax*1+0x414f4e]
  40dc5c:	mov    DWORD PTR [rbp-0x34],eax
  40dc5f:	add    r14d,0x1
  40dc63:	cmp    r14d,0xc1
  40dc6a:	jl     40db4c <__Parse+0x5b2>
  40dc70:	movsxd rax,DWORD PTR [rbp+0x28]
  40dc74:	mov    rcx,QWORD PTR [rbp-0x118]
  40dc7b:	sub    rcx,rbx
  40dc7e:	sub    rcx,0x1
  40dc82:	sub    rax,rcx
  40dc85:	mov    DWORD PTR [rbp+0x28],eax
  40dc88:	cmp    DWORD PTR [rbp+0x30],0xffffffff
  40dc8c:	je     40dcb8 <__Parse+0x71e>
  40dc8e:	movsxd rax,DWORD PTR [rbp+0x30]
  40dc92:	mov    rcx,QWORD PTR [rbp-0x118]
  40dc99:	sub    rcx,rbx
  40dc9c:	sub    rcx,0x1
  40dca0:	sub    rax,rcx
  40dca3:	mov    DWORD PTR [rbp+0x30],eax
  40dca6:	test   eax,eax
  40dca8:	jge    40dcb1 <__Parse+0x717>
  40dcaa:	mov    DWORD PTR [rbp+0x30],0x0
  40dcb1:	or     DWORD PTR [rbp+0x20],0x2000
  40dcb8:	test   BYTE PTR [rbp-0x10d],0x1
  40dcbf:	jne    40dcd2 <__Parse+0x738>
  40dcc1:	mov    eax,DWORD PTR [rbp+0x20]
  40dcc4:	test   eax,0x4
  40dcc9:	jne    40dcd2 <__Parse+0x738>
  40dccb:	test   eax,0x2
  40dcd0:	je     40dcd5 <__Parse+0x73b>
  40dcd2:	dec    DWORD PTR [rbp+0x28]
  40dcd5:	test   DWORD PTR [rbp+0x20],0x10
  40dcdc:	je     40dcfd <__Parse+0x763>
  40dcde:	mov    eax,DWORD PTR [rbp+0x38]
  40dce1:	cmp    eax,0x8
  40dce4:	je     40dcfa <__Parse+0x760>
  40dce6:	jg     40dcef <__Parse+0x755>
  40dce8:	cmp    eax,0x2
  40dceb:	je     40dcf4 <__Parse+0x75a>
  40dced:	jmp    40dcfd <__Parse+0x763>
  40dcef:	cmp    eax,0x10
  40dcf2:	jne    40dcfd <__Parse+0x763>
  40dcf4:	sub    DWORD PTR [rbp+0x28],0x2
  40dcf8:	jmp    40dcfd <__Parse+0x763>
  40dcfa:	dec    DWORD PTR [rbp+0x28]
  40dcfd:	mov    eax,DWORD PTR [rbp+0x20]
  40dd00:	test   eax,0x8
  40dd05:	jne    40dd4d <__Parse+0x7b3>
  40dd07:	test   eax,0x2000
  40dd0c:	je     40dd14 <__Parse+0x77a>
  40dd0e:	cmp    DWORD PTR [rbp+0x30],0xffffffff
  40dd12:	je     40dd4d <__Parse+0x7b3>
  40dd14:	cmp    DWORD PTR [rbp+0x30],0xffffffff
  40dd18:	jne    40dd1e <__Parse+0x784>
  40dd1a:	xor    eax,eax
  40dd1c:	jmp    40dd21 <__Parse+0x787>
  40dd1e:	mov    eax,DWORD PTR [rbp+0x30]
  40dd21:	mov    DWORD PTR [rbp-0x10c],eax
  40dd27:	jmp    40dd3a <__Parse+0x7a0>
  40dd29:	mov    rdx,0x20
  40dd30:	lea    rcx,[rsi]
  40dd33:	call   QWORD PTR [rsi*1+0x0]
  40dd3a:	mov    eax,DWORD PTR [rbp+0x28]
  40dd3d:	mov    ecx,eax
  40dd3f:	sub    ecx,0x1
  40dd42:	mov    DWORD PTR [rbp+0x28],ecx
  40dd45:	cmp    eax,DWORD PTR [rbp-0x10c]
  40dd4b:	jg     40dd29 <__Parse+0x78f>
  40dd4d:	test   BYTE PTR [rbp-0x10d],0x1
  40dd54:	je     40dd69 <__Parse+0x7cf>
  40dd56:	mov    rdx,0x2d
  40dd5d:	lea    rcx,[rsi]
  40dd60:	call   QWORD PTR [rsi*1+0x0]
  40dd67:	jmp    40dd9f <__Parse+0x805>
  40dd69:	test   DWORD PTR [rbp+0x20],0x4
  40dd70:	je     40dd85 <__Parse+0x7eb>
  40dd72:	mov    rdx,0x2b
  40dd79:	lea    rcx,[rsi]
  40dd7c:	call   QWORD PTR [rsi*1+0x0]
  40dd83:	jmp    40dd9f <__Parse+0x805>
  40dd85:	test   DWORD PTR [rbp+0x20],0x2
  40dd8c:	je     40dd9f <__Parse+0x805>
  40dd8e:	mov    rdx,0x20
  40dd95:	lea    rcx,[rsi]
  40dd98:	call   QWORD PTR [rsi*1+0x0]
  40dd9f:	test   DWORD PTR [rbp+0x20],0x10
  40dda6:	je     40de51 <__Parse+0x8b7>
  40ddac:	mov    eax,DWORD PTR [rbp+0x38]
  40ddaf:	cmp    eax,0x8
  40ddb2:	je     40de05 <__Parse+0x86b>
  40ddb4:	jg     40ddc0 <__Parse+0x826>
  40ddb6:	cmp    eax,0x2
  40ddb9:	je     40ddca <__Parse+0x830>
  40ddbb:	jmp    40de51 <__Parse+0x8b7>
  40ddc0:	cmp    eax,0x10
  40ddc3:	je     40de18 <__Parse+0x87e>
  40ddc5:	jmp    40de51 <__Parse+0x8b7>
  40ddca:	mov    rdx,0x30
  40ddd1:	lea    rcx,[rsi]
  40ddd4:	call   QWORD PTR [rsi*1+0x0]
  40dddb:	test   DWORD PTR [rbp+0x20],0x8000
  40dde2:	sete   al
  40dde5:	and    eax,0x1
  40dde8:	sub    eax,0x1
  40ddeb:	and    eax,0xffffffe0
  40ddee:	add    eax,0x62
  40ddf1:	mov    DWORD PTR [rbp-0x124],eax
  40ddf7:	mov    edx,eax
  40ddf9:	lea    rcx,[rsi]
  40ddfc:	call   QWORD PTR [rsi*1+0x0]
  40de03:	jmp    40de51 <__Parse+0x8b7>
  40de05:	mov    rdx,0x30
  40de0c:	lea    rcx,[rsi]
  40de0f:	call   QWORD PTR [rsi*1+0x0]
  40de16:	jmp    40de51 <__Parse+0x8b7>
  40de18:	mov    rdx,0x30
  40de1f:	lea    rcx,[rsi]
  40de22:	call   QWORD PTR [rsi*1+0x0]
  40de29:	test   DWORD PTR [rbp+0x20],0x8000
  40de30:	sete   al
  40de33:	and    eax,0x1
  40de36:	sub    eax,0x1
  40de39:	and    eax,0xffffffe0
  40de3c:	add    eax,0x78
  40de3f:	mov    DWORD PTR [rbp-0x128],eax
  40de45:	mov    edx,eax
  40de47:	lea    rcx,[rsi]
  40de4a:	call   QWORD PTR [rsi*1+0x0]
  40de51:	test   DWORD PTR [rbp+0x20],0x2000
  40de58:	je     40de9a <__Parse+0x900>
  40de5a:	cmp    DWORD PTR [rbp+0x30],0xffffffff
  40de5e:	jne    40de7c <__Parse+0x8e2>
  40de60:	mov    eax,DWORD PTR [rbp+0x28]
  40de63:	mov    DWORD PTR [rbp+0x30],eax
  40de66:	jmp    40de7c <__Parse+0x8e2>
  40de68:	mov    rdx,0x30
  40de6f:	lea    rcx,[rsi]
  40de72:	call   QWORD PTR [rsi*1+0x0]
  40de79:	dec    DWORD PTR [rbp+0x28]
  40de7c:	mov    eax,DWORD PTR [rbp+0x30]
  40de7f:	mov    ecx,eax
  40de81:	sub    ecx,0x1
  40de84:	mov    DWORD PTR [rbp+0x30],ecx
  40de87:	or     eax,eax
  40de89:	jg     40de68 <__Parse+0x8ce>
  40de8b:	jmp    40de9a <__Parse+0x900>
  40de8d:	movsx  edx,BYTE PTR [rbx]
  40de90:	lea    rcx,[rsi]
  40de93:	call   QWORD PTR [rsi*1+0x0]
  40de9a:	lea    rax,[rbx+0x1]
  40de9e:	lea    rbx,[rbx+0x1]
  40dea2:	cmp    BYTE PTR [rax],0x0
  40dea5:	jne    40de8d <__Parse+0x8f3>
  40dea7:	test   DWORD PTR [rbp+0x20],0x8
  40deae:	je     40ded2 <__Parse+0x938>
  40deb0:	jmp    40dec3 <__Parse+0x929>
  40deb2:	mov    rdx,0x20
  40deb9:	lea    rcx,[rsi]
  40debc:	call   QWORD PTR [rsi*1+0x0]
  40dec3:	mov    eax,DWORD PTR [rbp+0x28]
  40dec6:	mov    ecx,eax
  40dec8:	sub    ecx,0x1
  40decb:	mov    DWORD PTR [rbp+0x28],ecx
  40dece:	or     eax,eax
  40ded0:	jg     40deb2 <__Parse+0x918>
  40ded2:	add    rsp,0x140
  40ded9:	pop    r15
  40dedb:	pop    r14
  40dedd:	pop    r13
  40dedf:	pop    r12
  40dee1:	pop    rsi
  40dee2:	pop    rbx
  40dee3:	leave  
  40dee4:	ret    
  40dee5:	push   rbp
  40dee6:	mov    rbp,rsp
  40dee9:	push   rbx
  40deea:	sub    rsp,0x8
  40deee:	sub    rsp,0x60
  40def2:	mov    QWORD PTR [rbp+0x20],r8
  40def6:	mov    QWORD PTR [rbp+0x18],rdx
  40defa:	mov    rbx,rcx
  40defd:	test   DWORD PTR [rbp+0x20],0x10
  40df04:	je     40dfeb <__Parse+0xa51>
  40df0a:	movsxd rax,DWORD PTR [rbp+0x18]
  40df0e:	test   BYTE PTR [rax*1+0x413521],0x57
  40df16:	jne    40dfb2 <__Parse+0xa18>
  40df1c:	mov    rdx,0x5c
  40df23:	lea    rcx,[rbx]
  40df26:	call   QWORD PTR [rbx*1+0x0]
  40df2d:	mov    edx,DWORD PTR [rbp+0x18]
  40df30:	lea    rcx,ds:0x415288
  40df38:	call   40ae40 <_setlocale+0x934>
  40df3d:	mov    QWORD PTR [rbp-0x20],rax
  40df41:	mov    QWORD PTR [rbp-0x18],rax
  40df45:	cmp    QWORD PTR [rbp-0x18],0x0
  40df4a:	je     40df75 <__Parse+0x9db>
  40df4c:	mov    rax,QWORD PTR [rbp-0x18]
  40df50:	lea    rcx,ds:0x415288
  40df58:	sub    rax,rcx
  40df5b:	movsxd rax,eax
  40df5e:	movsx  edx,BYTE PTR [rax*1+0x415291]
  40df66:	lea    rcx,[rbx]
  40df69:	call   QWORD PTR [rbx*1+0x0]
  40df70:	jmp    40dff8 <__Parse+0xa5e>
  40df75:	mov    rdx,0x78
  40df7c:	lea    rcx,[rbx]
  40df7f:	call   QWORD PTR [rbx*1+0x0]
  40df86:	mov    DWORD PTR [rsp+0x28],0x10
  40df8e:	mov    DWORD PTR [rsp+0x20],0x2
  40df96:	mov    r9,0x2
  40df9d:	mov    r8,0x6000
  40dfa4:	movsxd rdx,DWORD PTR [rbp+0x18]
  40dfa8:	lea    rcx,[rbx]
  40dfab:	call   40d9a5 <__Parse+0x40b>
  40dfb0:	jmp    40dff8 <__Parse+0xa5e>
  40dfb2:	cmp    DWORD PTR [rbp+0x18],0x5c
  40dfb6:	jne    40dfdc <__Parse+0xa42>
  40dfb8:	mov    rdx,0x5c
  40dfbf:	lea    rcx,[rbx]
  40dfc2:	call   QWORD PTR [rbx*1+0x0]
  40dfc9:	mov    rdx,0x5c
  40dfd0:	lea    rcx,[rbx]
  40dfd3:	call   QWORD PTR [rbx*1+0x0]
  40dfda:	jmp    40dff8 <__Parse+0xa5e>
  40dfdc:	mov    edx,DWORD PTR [rbp+0x18]
  40dfdf:	lea    rcx,[rbx]
  40dfe2:	call   QWORD PTR [rbx*1+0x0]
  40dfe9:	jmp    40dff8 <__Parse+0xa5e>
  40dfeb:	mov    edx,DWORD PTR [rbp+0x18]
  40dfee:	lea    rcx,[rbx]
  40dff1:	call   QWORD PTR [rbx*1+0x0]
  40dff8:	add    rsp,0x60
  40dffc:	add    rsp,0x8
  40e000:	pop    rbx
  40e001:	leave  
  40e002:	ret    
  40e003:	push   rbp
  40e004:	mov    rbp,rsp
  40e007:	push   rbx
  40e008:	push   rsi
  40e009:	push   rdi
  40e00a:	push   r12
  40e00c:	push   r13
  40e00e:	push   r14
  40e010:	push   r15
  40e012:	sub    rsp,0x8
  40e016:	sub    rsp,0x60
  40e01a:	mov    r12,r9
  40e01d:	mov    rdi,r8
  40e020:	mov    r14,rdx
  40e023:	mov    rbx,rcx
  40e026:	mov    rax,0x0
  40e02d:	cmp    r14,rax
  40e030:	jne    40e04b <__Parse+0xab1>
  40e032:	lea    r14,ds:0x414f30
  40e03a:	mov    r13d,0x6
  40e040:	and    edi,0xfeffffff
  40e046:	xor    r12d,r12d
  40e049:	jmp    40e076 <__Parse+0xadc>
  40e04b:	test   edi,0x2000000
  40e051:	je     40e067 <__Parse+0xacd>
  40e053:	lea    r15,[r14]
  40e056:	lea    rcx,[r14]
  40e059:	call   40bba8 <_setlocale+0x169c>
  40e05e:	mov    QWORD PTR [rbp-0x58],rax
  40e062:	mov    r13,rax
  40e065:	jmp    40e076 <__Parse+0xadc>
  40e067:	lea    rcx,[r14]
  40e06a:	call   40b060 <_setlocale+0xb54>
  40e06f:	mov    QWORD PTR [rbp-0x58],rax
  40e073:	mov    r13,rax
  40e076:	or     r12d,r12d
  40e079:	jge    40e081 <__Parse+0xae7>
  40e07b:	neg    r12d
  40e07e:	or     edi,0x8
  40e081:	mov    eax,DWORD PTR [rbp+0x30]
  40e084:	cmp    eax,0xffffffff
  40e087:	je     40e091 <__Parse+0xaf7>
  40e089:	cmp    eax,r13d
  40e08c:	jge    40e091 <__Parse+0xaf7>
  40e08e:	mov    r13d,eax
  40e091:	sub    r12d,r13d
  40e094:	test   edi,0x1000000
  40e09a:	je     40e0ad <__Parse+0xb13>
  40e09c:	mov    rdx,0x22
  40e0a3:	lea    rcx,[rbx]
  40e0a6:	call   QWORD PTR [rbx*1+0x0]
  40e0ad:	test   edi,0x8
  40e0b3:	jne    40e118 <__Parse+0xb7e>
  40e0b5:	jmp    40e0c8 <__Parse+0xb2e>
  40e0b7:	mov    rdx,0x20
  40e0be:	lea    rcx,[rbx]
  40e0c1:	call   QWORD PTR [rbx*1+0x0]
  40e0c8:	mov    eax,r12d
  40e0cb:	sub    r12d,0x1
  40e0cf:	or     eax,eax
  40e0d1:	jg     40e0b7 <__Parse+0xb1d>
  40e0d3:	jmp    40e118 <__Parse+0xb7e>
  40e0d5:	test   edi,0x2000000
  40e0db:	je     40e101 <__Parse+0xb67>
  40e0dd:	lea    rax,[r15]
  40e0e0:	lea    r15,[rax+0x2]
  40e0e4:	movzx  esi,WORD PTR [rax]
  40e0e7:	mov    ax,si
  40e0ea:	mov    edx,eax
  40e0ec:	and    edx,0xffff
  40e0f2:	lea    rcx,[rbp-0x50]
  40e0f6:	call   40b5c0 <_setlocale+0x10b4>
  40e0fb:	movsx  esi,BYTE PTR [rbp-0x50]
  40e0ff:	jmp    40e10b <__Parse+0xb71>
  40e101:	lea    rax,[r14]
  40e104:	lea    r14,[rax+0x1]
  40e108:	movzx  esi,BYTE PTR [rax]
  40e10b:	mov    r8d,edi
  40e10e:	mov    edx,esi
  40e110:	lea    rcx,[rbx]
  40e113:	call   40dee5 <__Parse+0x94b>
  40e118:	mov    eax,r13d
  40e11b:	sub    r13d,0x1
  40e11f:	or     eax,eax
  40e121:	jg     40e0d5 <__Parse+0xb3b>
  40e123:	test   edi,0x8
  40e129:	je     40e149 <__Parse+0xbaf>
  40e12b:	jmp    40e13e <__Parse+0xba4>
  40e12d:	mov    rdx,0x20
  40e134:	lea    rcx,[rbx]
  40e137:	call   QWORD PTR [rbx*1+0x0]
  40e13e:	mov    eax,r12d
  40e141:	sub    r12d,0x1
  40e145:	or     eax,eax
  40e147:	jg     40e12d <__Parse+0xb93>
  40e149:	test   edi,0x1000000
  40e14f:	je     40e162 <__Parse+0xbc8>
  40e151:	mov    rdx,0x22
  40e158:	lea    rcx,[rbx]
  40e15b:	call   QWORD PTR [rbx*1+0x0]
  40e162:	add    rsp,0x60
  40e166:	add    rsp,0x8
  40e16a:	pop    r15
  40e16c:	pop    r14
  40e16e:	pop    r13
  40e170:	pop    r12
  40e172:	pop    rdi
  40e173:	pop    rsi
  40e174:	pop    rbx
  40e175:	leave  
  40e176:	ret    
  40e177:	push   rbp
  40e178:	mov    rbp,rsp
  40e17b:	push   rbx
  40e17c:	push   rsi
  40e17d:	push   rdi
  40e17e:	push   r12
  40e180:	rex.B

000000000040e181 <.L454>:
  40e181:	push   rbp
  40e182:	sub    rsp,0x8
  40e186:	rex.W
  40e187:	.byte 0x81
  40e188:	in     al,dx
  40e189:	push   rax

000000000040e18a <.L455>:
  40e18a:	add    al,BYTE PTR [rax]
  40e18c:	add    BYTE PTR [rcx+rcx*4-0x31],cl
  40e190:	mov    r12,r8
  40e193:	mov    rbx,rcx
  40e196:	mov    r13d,DWORD PTR [rbp+0x70]
  40e19a:	xor    esi,esi
  40e19c:	cmp    r13d,0xffffffff
  40e1a0:	jne    40e1a8 <.L455+0x1e>
  40e1a2:	mov    r13d,0x6
  40e1a8:	mov    r9d,r12d
  40e1ab:	mov    r8d,r13d
  40e1ae:	lea    rdx,[rbp-0x230]
  40e1b5:	lea    rcx,[rbp+0x30]
  40e1b9:	call   407ec6 <__divi+0x3e>
  40e1be:	lea    rcx,[rbp-0x230]
  40e1c5:	call   40b060 <_setlocale+0xb54>
  40e1ca:	mov    QWORD PTR [rbp-0x238],rax
  40e1d1:	mov    ecx,edi
  40e1d3:	mov    rdi,rcx
  40e1d6:	sub    rdi,rax
  40e1d9:	test   r12d,0x8
  40e1e0:	jne    40e218 <.L457+0x2d>

000000000040e1e2 <.L456>:
  40e1e2:	jmp    40e214 <.L457+0x29>
  40e1e4:	test   r12d,0x2000

000000000040e1eb <.L457>:
  40e1eb:	je     40e200 <.L457+0x15>
  40e1ed:	mov    rdx,0x30
  40e1f4:	lea    rcx,[rbx]
  40e1f7:	call   QWORD PTR [rbx*1+0x0]
  40e1fe:	jmp    40e211 <.L457+0x26>
  40e200:	mov    rdx,0x20
  40e207:	lea    rcx,[rbx]
  40e20a:	call   QWORD PTR [rbx*1+0x0]
  40e211:	sub    edi,0x1
  40e214:	or     edi,edi
  40e216:	jg     40e1e4 <.L456+0x2>
  40e218:	movsx  eax,BYTE PTR [rbp-0x230]
  40e21f:	cmp    eax,0x2b
  40e222:	je     40e229 <.L457+0x3e>
  40e224:	cmp    eax,0x2d
  40e227:	jne    40e257 <.L459+0x1>
  40e229:	movsx  edx,BYTE PTR [rbp-0x230]
  40e230:	lea    rcx,[rbx]
  40e233:	call   QWORD PTR [rbx*1+0x0]
  40e23a:	add    esi,0x1
  40e23d:	jmp    40e257 <.L459+0x1>
  40e23f:	movsxd rax,esi
  40e242:	movsx  edx,BYTE PTR [rbp+rax*1-0x230]
  40e24a:	lea    rcx,[rbx]

000000000040e24d <.L458>:
  40e24d:	call   QWORD PTR [rbx*1+0x0]
  40e254:	.byte 0x83
  40e255:	.byte 0xc6

000000000040e256 <.L459>:
  40e256:	add    DWORD PTR [rax+0x63],ecx
  40e259:	mov    BYTE PTR [rax-0x22ffa44],0xff
  40e260:	inc    DWORD PTR [rax]
  40e262:	jne    40e23f <.L457+0x54>
  40e264:	test   r12d,0x10
  40e26b:	je     40e2c0 <.L459+0x6a>
  40e26d:	mov    rdx,0x2e
  40e274:	lea    rcx,[rbp-0x230]
  40e27b:	call   40ae40 <_setlocale+0x934>
  40e280:	mov    QWORD PTR [rbp-0x240],rax
  40e287:	mov    rcx,0x0
  40e28e:	cmp    rax,rcx
  40e291:	jne    40e2c0 <.L459+0x6a>
  40e293:	mov    rdx,0x2e
  40e29a:	lea    rcx,[rbx]
  40e29d:	call   QWORD PTR [rbx*1+0x0]
  40e2a4:	mov    rdx,0x30
  40e2ab:	lea    rcx,[rbx]
  40e2ae:	call   QWORD PTR [rbx*1+0x0]
  40e2b5:	mov    eax,r13d
  40e2b8:	sub    eax,0x1
  40e2bb:	mov    r13d,eax
  40e2be:	jg     40e2a4 <.L459+0x4e>
  40e2c0:	test   r12d,0x8
  40e2c7:	je     40e2e3 <.L459+0x8d>
  40e2c9:	jmp    40e2df <.L459+0x89>
  40e2cb:	mov    rdx,0x20
  40e2d2:	lea    rcx,[rbx]
  40e2d5:	call   QWORD PTR [rbx*1+0x0]
  40e2dc:	sub    edi,0x1
  40e2df:	or     edi,edi
  40e2e1:	jg     40e2cb <.L459+0x75>
  40e2e3:	add    rsp,0x250
  40e2ea:	add    rsp,0x8
  40e2ee:	pop    r13
  40e2f0:	pop    r12
  40e2f2:	pop    rdi
  40e2f3:	pop    rsi
  40e2f4:	pop    rbx
  40e2f5:	leave  
  40e2f6:	ret    
  40e2f7:	push   rbp
  40e2f8:	mov    rbp,rsp
  40e2fb:	push   rbx
  40e2fc:	push   rsi
  40e2fd:	push   rdi
  40e2fe:	push   r12
  40e300:	push   r13
  40e302:	push   r14
  40e304:	push   r15
  40e306:	sub    rsp,0x8
  40e30a:	mov    eax,0x4f90
  40e30f:	call   40adb0 <_setlocale+0x8a4>
  40e314:	mov    QWORD PTR [rbp+0x28],r9
  40e318:	mov    r13,r8
  40e31b:	mov    r12,rcx
  40e31e:	mov    DWORD PTR [rbp-0x3b08],0x0
  40e328:	mov    DWORD PTR [rbp-0x98],0x0
  40e332:	mov    BYTE PTR [rbp-0x3ae1],0x0
  40e339:	mov    QWORD PTR [rbp-0x90],0x0
  40e344:	lea    rax,[rbp-0xd8]
  40e34b:	mov    QWORD PTR [rbp-0xe8],rax
  40e352:	.byte 0xdb
  40e353:	ins    DWORD PTR es:[rdi],dx

000000000040e354 <.L460>:
  40e354:	xor    BYTE PTR [rax-0x7d],cl
  40e357:	in     al,dx
  40e358:	or     ch,bl
  40e35a:	sbb    al,0x24
  40e35c:	repz

000000000040e35d <.L461>:
  40e35d:	movd   DWORD PTR [rsp],mm0
  40e361:	add    rsp,0x8
  40e365:	movsd  QWORD PTR [rbp-0x3af0],xmm0
  40e36d:	lea    rax,[rbp-0x3af0]
  40e374:	mov    QWORD PTR [rbp-0x3b10],rax
  40e37b:	mov    DWORD PTR [rbp-0x3adc],0x0
  40e385:	mov    ebx,0x39cd
  40e38a:	fnclex 
  40e38c:	fld    TBYTE PTR [rbp+0x30]
  40e38f:	fstp   TBYTE PTR [rbp-0xd8]
  40e395:	mov    r8d,r13d
  40e398:	and    r8d,0x200
  40e39f:	lea    rdx,[rbp-0x3ad5]
  40e3a6:	fld    TBYTE PTR [rbp-0xd8]
  40e3ac:	fstp   TBYTE PTR [rsp+0x20]
  40e3b0:	call   40ff87 <WriteDouble+0xc90>
  40e3b5:	mov    DWORD PTR [rbp-0x4e60],eax
  40e3bb:	mov    eax,eax
  40e3bd:	cmp    eax,0x5
  40e3c0:	.byte 0xf
  40e3c1:	.byte 0x84

000000000040e3c2 <.L462>:
  40e3c2:	xlat   BYTE PTR ds:[rbx]
  40e3c3:	add    BYTE PTR [rax],al
  40e3c5:	add    BYTE PTR [rbx+0x7e7407f8],al

000000000040e3cb <.L463>:
  40e3cb:	jg     40e3d7 <.L463+0xc>
  40e3cd:	cmp    eax,0x1
  40e3d0:	je     40e3e6 <.L463+0x1b>
  40e3d2:	jmp    40e4f1 <.L467+0x4a>
  40e3d7:	cmp    eax,0x45
  40e3da:	je     40e43a <.L465+0x1>
  40e3dc:	cmp    eax,0x47
  40e3df:	je     40e43a <.L465+0x1>
  40e3e1:	jmp    40e4f1 <.L467+0x4a>
  40e3e6:	mov    DWORD PTR [rsp+0x28],0x0
  40e3ee:	mov    edi,DWORD PTR [rbp+0x40]
  40e3f1:	mov    DWORD PTR [rsp+0x20],edi
  40e3f5:	mov    r9d,DWORD PTR [rbp+0x28]
  40e3f9:	mov    r8d,r13d
  40e3fc:	test   r13d,0x8000
  40e403:	je     40e416 <.L463+0x4b>
  40e405:	lea    rax,ds:0x41535e
  40e40d:	mov    QWORD PTR [rbp-0x4e68],rax
  40e414:	jmp    40e425 <.L463+0x5a>
  40e416:	lea    rax,ds:0x41535a
  40e41e:	mov    QWORD PTR [rbp-0x4e68],rax
  40e425:	mov    rdx,QWORD PTR [rbp-0x4e68]
  40e42c:	lea    rcx,[r12]

000000000040e430 <.L464>:
  40e430:	call   40e003 <__Parse+0xa69>
  40e435:	.byte 0xe9
  40e436:	rex.WB adc al,BYTE PTR [r8]

000000000040e439 <.L465>:
  40e439:	add    bh,al
  40e43b:	test   eax,edi
  40e43d:	(bad)  
  40e43e:	(bad)  
  40e43f:	inc    DWORD PTR [rcx]
  40e441:	add    BYTE PTR [rax],al
  40e443:	add    cl,ch
  40e445:	test   al,0x0
  40e447:	add    BYTE PTR [rax],al
  40e449:	mov    DWORD PTR [rsp+0x28],0x0
  40e451:	mov    edi,DWORD PTR [rbp+0x40]
  40e454:	mov    DWORD PTR [rsp+0x20],edi
  40e458:	mov    r9d,DWORD PTR [rbp+0x28]
  40e45c:	mov    r8d,r13d
  40e45f:	test   r13d,0x8000
  40e466:	je     40e479 <.L465+0x40>
  40e468:	lea    rax,ds:0x415355
  40e470:	mov    QWORD PTR [rbp-0x4e70],rax
  40e477:	jmp    40e488 <.L465+0x4f>
  40e479:	lea    rax,ds:0x415350
  40e481:	mov    QWORD PTR [rbp-0x4e70],rax
  40e488:	mov    rdx,QWORD PTR [rbp-0x4e70]
  40e48f:	lea    rcx,[r12]
  40e493:	call   40e003 <__Parse+0xa69>
  40e498:	jmp    40f683 <WriteDouble+0x38c>
  40e49d:	.byte 0xc7

000000000040e49e <.L466>:
  40e49e:	rex.R and al,0x28
  40e4a1:	add    BYTE PTR [rax],al
  40e4a3:	add    BYTE PTR [rax],al
  40e4a5:	.byte 0x8b
  40e4a6:	.byte 0x7d

000000000040e4a7 <.L467>:
  40e4a7:	rex mov DWORD PTR [rsp+0x20],edi
  40e4ac:	mov    r9d,DWORD PTR [rbp+0x28]
  40e4b0:	mov    r8d,r13d
  40e4b3:	test   r13d,0x8000
  40e4ba:	je     40e4cd <.L467+0x26>
  40e4bc:	lea    rax,ds:0x41534c
  40e4c4:	mov    QWORD PTR [rbp-0x4e78],rax
  40e4cb:	jmp    40e4dc <.L467+0x35>
  40e4cd:	lea    rax,ds:0x415348
  40e4d5:	mov    QWORD PTR [rbp-0x4e78],rax
  40e4dc:	mov    rdx,QWORD PTR [rbp-0x4e78]
  40e4e3:	lea    rcx,[r12]
  40e4e7:	call   40e003 <__Parse+0xa69>
  40e4ec:	jmp    40f683 <WriteDouble+0x38c>
  40e4f1:	test   r13d,0x200
  40e4f8:	sete   al
  40e4fb:	and    eax,0x1
  40e4fe:	sub    eax,0x1
  40e501:	and    eax,0x3
  40e504:	add    eax,0xf
  40e507:	.byte 0x89
  40e508:	test   DWORD PTR [rax],esp
  40e50a:	.byte 0xc5
  40e50b:	.byte 0xff

000000000040e50c <.L468>:
  40e50c:	inc    DWORD PTR [rcx-0x9]
  40e50f:	(bad)
  40e512:	add    BYTE PTR [rax],al
  40e514:	.byte 0x74

000000000040e515 <.L469>:
  40e515:	pand   mm5,QWORD PTR ds:0x415338
  40e51d:	fstp   TBYTE PTR [rbp-0x4e70]
  40e523:	jmp    40e532 <.L469+0x1d>
  40e525:	fld    TBYTE PTR ds:0x415328
  40e52c:	fstp   TBYTE PTR [rbp-0x4e70]
  40e532:	fld    TBYTE PTR [rbp-0x4e70]
  40e538:	fstp   TBYTE PTR [rbp-0x3b00]
  40e53e:	test   r13d,0x8000
  40e545:	je     40e558 <.L469+0x43>
  40e547:	lea    rax,ds:0x414fb3
  40e54f:	mov    QWORD PTR [rbp-0x4e78],rax
  40e556:	jmp    40e567 <.L469+0x52>
  40e558:	lea    rax,ds:0x414f8e
  40e560:	mov    QWORD PTR [rbp-0x4e78],rax
  40e567:	mov    r15,QWORD PTR [rbp-0x4e78]
  40e56e:	.byte 0x83
  40e56f:	.byte 0x7d

000000000040e570 <.L470>:
  40e570:	rex.W adc BYTE PTR [rdi],cl
  40e573:	xchg   esp,eax
  40e574:	.byte 0xc0
  40e575:	and    eax,0x1
  40e578:	.byte 0x89

000000000040e579 <.L471>:
  40e579:	test   DWORD PTR [rcx+rsi*4-0x3ff60001],eax
  40e580:	mov    eax,0x0
  40e585:	setne  al
  40e588:	mov    BYTE PTR [rbp-0x3ace],al
  40e58e:	fild   DWORD PTR [rbp+0x48]
  40e591:	fstp   TBYTE PTR [rbp-0x70]
  40e594:	cmp    DWORD PTR [rbp+0x40],0xffffffff
  40e598:	jne    40e5a1 <.L471+0x28>
  40e59a:	mov    DWORD PTR [rbp+0x40],0x6
  40e5a1:	and    DWORD PTR [rbp+0x40],0xfff
  40e5a8:	test   BYTE PTR [rbp-0x3ad5],0x1
  40e5af:	je     40e5bf <.L471+0x46>
  40e5b1:	fld    TBYTE PTR [rbp-0xd8]
  40e5b7:	fchs   
  40e5b9:	fstp   TBYTE PTR [rbp-0xd8]
  40e5bf:	test   BYTE PTR [rbp-0x3ace],0x1
  40e5c6:	je     40e5cf <.L471+0x56>
  40e5c8:	or     r13d,0x400000
  40e5cf:	test   r13d,0x800000
  40e5d6:	je     40e72d <.L475+0x7b>
  40e5dc:	mov    eax,DWORD PTR [rbp+0x40]
  40e5df:	or     eax,eax
  40e5e1:	jne    40e5ea <.L471+0x71>
  40e5e3:	mov    DWORD PTR [rbp+0x40],0x1
  40e5ea:	fld    TBYTE PTR [rbp-0xd8]
  40e5f0:	fld    TBYTE PTR ds:0x415318
  40e5f7:	fucomip st,st(1)
  40e5f9:	fstp   st(0)
  40e5fb:	jp     40e5ff <.L471+0x86>
  40e5fd:	ja     40e63e <.L471+0xc5>
  40e5ff:	fild   DWORD PTR [rbp+0x40]
  40e602:	fstp   TBYTE PTR [rsp+0x30]
  40e606:	fld    TBYTE PTR ds:0x415368
  40e60d:	fstp   TBYTE PTR [rsp+0x20]
  40e611:	call   405c1c <fopen+0x11c>
  40e616:	fstp   TBYTE PTR [rbp-0x4ea0]
  40e61c:	fld    TBYTE PTR [rbp-0x4ea0]
  40e622:	fstp   TBYTE PTR [rbp-0x4e90]
  40e628:	fld    TBYTE PTR [rbp-0xd8]
  40e62e:	fld    TBYTE PTR [rbp-0x4e90]
  40e634:	fucomip st,st(1)
  40e636:	fstp   st(0)
  40e638:	jp     40e63c <.L471+0xc3>
  40e63a:	jb     40e63e <.L471+0xc5>
  40e63c:	jmp    40e64a <.L472+0x2>
  40e63e:	or     r13d,0x400000
  40e645:	.byte 0xe9
  40e646:	jrcxz  40e648 <.L472>

000000000040e648 <.L472>:
  40e648:	add    BYTE PTR [rax],al
  40e64a:	fld    TBYTE PTR [rbp-0xd8]
  40e650:	.byte 0xdb

000000000040e651 <.L473>:
  40e651:	sub    al,0x25
  40e653:	or     BYTE PTR [rbx+0x41],dl
  40e656:	add    bh,bl
  40e658:	jmp    2bbbf3a <.debug$T+0x278d11a>
  40e65d:	ja     40e664 <.L473+0x13>
  40e65f:	jmp    40e72d <.L475+0x7b>
  40e664:	fld    TBYTE PTR [rbp-0x70]
  40e667:	fstp   TBYTE PTR [rsp+0x30]
  40e66b:	fld    TBYTE PTR [rbp-0xd8]
  40e671:	fstp   TBYTE PTR [rsp+0x20]
  40e675:	call   40c504 <tmpnam+0x4>
  40e67a:	fstp   TBYTE PTR [rbp-0x4ed0]
  40e680:	fld    TBYTE PTR [rbp-0x4ed0]
  40e686:	fstp   TBYTE PTR [rbp-0x4eb0]
  40e68c:	fld    TBYTE PTR [rbp-0x4eb0]
  40e692:	fstp   TBYTE PTR [rsp+0x20]
  40e696:	call   4047a5 <ExpandFileName+0x230>
  40e69b:	fstp   TBYTE PTR [rbp-0x4ee0]
  40e6a1:	fld    TBYTE PTR [rbp-0x4ee0]
  40e6a7:	.byte 0xdb
  40e6a8:	.byte 0x7d

000000000040e6a9 <.L474>:
  40e6a9:	movabs al,ds:0xe820247cdba06ddb

000000000040e6b2 <.L475>:
  40e6b2:	cli    
  40e6b3:	movsxd edi,edi
  40e6b5:	(bad)  
  40e6b6:	fstp   TBYTE PTR [rbp-0x4f00]
  40e6bc:	fld    TBYTE PTR [rbp-0x4f00]
  40e6c2:	fstp   TBYTE PTR [rbp-0x4ef0]
  40e6c8:	fld    TBYTE PTR [rbp-0x60]
  40e6cb:	fld    TBYTE PTR [rbp-0x4ef0]
  40e6d1:	fsubp  st(1),st
  40e6d3:	fld    TBYTE PTR ds:0x4152f8
  40e6da:	fucomip st,st(1)
  40e6dc:	fstp   st(0)
  40e6de:	jp     40e6e2 <.L475+0x30>
  40e6e0:	ja     40e6e4 <.L475+0x32>
  40e6e2:	jmp    40e6f3 <.L475+0x41>
  40e6e4:	fld    TBYTE PTR [rbp-0x60]
  40e6e7:	fld    TBYTE PTR ds:0x415308
  40e6ee:	fsubp  st(1),st
  40e6f0:	fstp   TBYTE PTR [rbp-0x60]
  40e6f3:	fld    TBYTE PTR [rbp-0x60]
  40e6f6:	fstp   TBYTE PTR [rsp+0x20]
  40e6fa:	call   404ab0 <_assertfailfn+0x8b>
  40e6ff:	fstp   TBYTE PTR [rbp-0x4f20]
  40e705:	fld    TBYTE PTR [rbp-0x4f20]
  40e70b:	fstp   TBYTE PTR [rbp-0x4f10]
  40e711:	fld    TBYTE PTR [rbp-0x4f10]
  40e717:	sub    rsp,0x8
  40e71b:	fstp   QWORD PTR [rsp]
  40e71e:	cvttsd2si eax,QWORD PTR [rsp]
  40e723:	add    rsp,0x8
  40e727:	mov    DWORD PTR [rbp-0x3adc],eax
  40e72d:	test   r13d,0x400000
  40e734:	je     40ec72 <WriteNumber+0x2cd>
  40e73a:	.byte 0xf6

000000000040e73b <.L476>:
  40e73b:	test   DWORD PTR [rdx],esi
  40e73d:	(bad)  
  40e740:	add    DWORD PTR [rdi],ecx
  40e742:	.byte 0x84
  40e743:	.byte 0xbb

000000000040e744 <.L477>:
  40e744:	add    eax,DWORD PTR [rax]
  40e746:	add    bh,al
  40e748:	test   DWORD PTR [rcx+rsi*4-0x1],ebp
  40e74c:	inc    DWORD PTR [rcx]
  40e74e:	add    BYTE PTR [rax],al
  40e750:	add    bh,al
  40e752:	test   esp,edi
  40e754:	(bad)  
  40e755:	(bad)  
  40e756:	inc    DWORD PTR [rax]
  40e758:	add    BYTE PTR [rax],al
  40e75a:	add    BYTE PTR [rax-0x73],cl
  40e75d:	mov    ch,0xff
  40e75f:	(bad)  
  40e760:	(bad)  
  40e761:	dec    DWORD PTR [rax-0x73]
  40e764:	test   edi,ebp
  40e766:	(bad)  
  40e767:	(bad)  
  40e768:	dec    DWORD PTR [rax-0x77]
  40e76b:	test   DWORD PTR [rax-0x1],esi
  40e76e:	(bad)  
  40e76f:	inc    esi
  40e771:	(bad)  
  40e772:	add    BYTE PTR [rax-0x75],cl
  40e775:	test   DWORD PTR [rax-0x1],esi
  40e778:	(bad)  
  40e779:	inc    esi
  40e77b:	add    BYTE PTR [rax],al
  40e77d:	test   r13d,0x8000
  40e784:	je     40e797 <.L477+0x53>
  40e786:	lea    rax,ds:0x414fb3
  40e78e:	mov    QWORD PTR [rbp-0x4e88],rax
  40e795:	jmp    40e7a6 <.L478>
  40e797:	lea    rax,ds:0x414f8e
  40e79f:	mov    QWORD PTR [rbp-0x4e88],rax

000000000040e7a6 <.L478>:
  40e7a6:	test   r13d,0x200
  40e7ad:	je     40e7fe <.L481+0x18>

000000000040e7af <.L479>:
  40e7af:	lea    rax,[rbp-0xd8]
  40e7b6:	mov    QWORD PTR [rbp-0xe8],rax
  40e7bd:	movzx  ecx,BYTE PTR [rax+0x9]
  40e7c1:	and    ecx,0x7f
  40e7c4:	shl    ecx,0x8
  40e7c7:	movzx  eax,BYTE PTR [rax+0x8]
  40e7cb:	or     ecx,eax
  40e7cd:	mov    DWORD PTR [rbp-0xb0],ecx
  40e7d3:	mov    eax,ecx
  40e7d5:	or     eax,eax
  40e7d7:	jne    40e7f2 <.L481+0xc>
  40e7d9:	.byte 0xdb
  40e7da:	lods   eax,DWORD PTR ds:[rsi]
  40e7db:	sub    bh,bh

000000000040e7dd <.L480>:
  40e7dd:	(bad)  
  40e7de:	(bad)  
  40e7df:	fld    TBYTE PTR ds:0x415378

000000000040e7e6 <.L481>:
  40e7e6:	fucomip st,st(1)
  40e7e8:	fstp   st(0)
  40e7ea:	jp     40e7f2 <.L481+0xc>
  40e7ec:	je     40e87d <.L481+0x97>
  40e7f2:	sub    DWORD PTR [rbp-0xb0],0x4002
  40e7fc:	jmp    40e87d <.L481+0x97>
  40e7fe:	lea    rax,[rbp-0x3af0]
  40e805:	mov    QWORD PTR [rbp-0xe8],rax
  40e80c:	movzx  ecx,BYTE PTR [rax+0x7]
  40e810:	shl    ecx,0x4
  40e813:	movzx  eax,BYTE PTR [rax+0x6]
  40e817:	sar    eax,0x4
  40e81a:	add    ecx,eax
  40e81c:	mov    DWORD PTR [rbp-0xb0],ecx
  40e822:	mov    eax,ecx
  40e824:	or     eax,eax
  40e826:	jne    40e831 <.L481+0x4b>
  40e828:	or     DWORD PTR [rbp-0x3b08],0x0
  40e82f:	je     40e83b <.L481+0x55>
  40e831:	sub    DWORD PTR [rbp-0xb0],0x3ff
  40e83b:	cmp    DWORD PTR [rbp-0xb0],0xfffffc02
  40e845:	jge    40e853 <.L481+0x6d>
  40e847:	inc    DWORD PTR [rbp-0x3b04]
  40e84d:	inc    DWORD PTR [rbp-0xb0]
  40e853:	or     DWORD PTR [rbp-0x3b08],0x0
  40e85a:	je     40e87d <.L481+0x97>
  40e85c:	fld    TBYTE PTR [rbp-0xd8]
  40e862:	fstp   TBYTE PTR [rsp+0x20]
  40e866:	call   408e46 <qnrmlz+0x1e>
  40e86b:	fstp   TBYTE PTR [rbp-0x4eb8]
  40e871:	fld    TBYTE PTR [rbp-0x4eb8]
  40e877:	fstp   TBYTE PTR [rbp-0xd8]
  40e87d:	cmp    DWORD PTR [rbp-0xb0],0x0
  40e884:	setl   al
  40e887:	and    eax,0x1
  40e88a:	mov    DWORD PTR [rbp-0x4e98],eax
  40e890:	or     eax,eax
  40e892:	mov    eax,0x0
  40e897:	setne  al
  40e89a:	mov    BYTE PTR [rbp-0x3ae1],al
  40e8a0:	cmp    DWORD PTR [rbp-0xb0],0x0
  40e8a7:	jge    40e8af <.L481+0xc9>
  40e8a9:	neg    DWORD PTR [rbp-0xb0]
  40e8af:	mov    DWORD PTR [rbp-0x94],0x0
  40e8b9:	or     DWORD PTR [rbp-0xb0],0x0
  40e8c0:	je     40e93c <.L487+0x23>
  40e8c2:	jmp    40e930 <.L487+0x17>
  40e8c4:	mov    eax,DWORD PTR [rbp-0xb0]
  40e8ca:	mov    r10d,0xa
  40e8d0:	cdq    
  40e8d1:	idiv   r10d
  40e8d4:	movsxd rcx,edx
  40e8d7:	mov    rdx,QWORD PTR [rbp-0x4e88]
  40e8de:	movsx  ecx,BYTE PTR [rdx+rcx*1]
  40e8e2:	mov    DWORD PTR [rbp-0x4e90],ecx
  40e8e8:	mov    eax,DWORD PTR [rbp-0xb0]
  40e8ee:	mov    ecx,0xa
  40e8f3:	mov    eax,eax
  40e8f5:	mov    edx,0x66666667
  40e8fa:	push   rcx
  40e8fb:	mov    ecx,eax
  40e8fd:	imul   edx
  40e8ff:	sar    edx,0x2
  40e902:	sar    ecx,0x1f
  40e905:	sub    edx,ecx
  40e907:	mov    eax,edx
  40e909:	pop    rcx
  40e90a:	mov    DWORD PTR [rbp-0xb0],eax

000000000040e910 <.L486>:
  40e910:	mov    rax,QWORD PTR [rbp-0x90]
  40e917:	rex.W
  40e918:	.byte 0x8d

000000000040e919 <.L487>:
  40e919:	rex dec DWORD PTR [rax-0x77]
  40e91d:	test   DWORD PTR [rax-0x1],esi
  40e920:	(bad)  
  40e921:	dec    DWORD PTR [rbx-0x4e8f73]
  40e927:	dec    DWORD PTR [rax+0x6c85ff08]
  40e92d:	(bad)  
  40e92e:	(bad)  
  40e92f:	dec    DWORD PTR [rbx-0xaf7b]
  40e935:	dec    DWORD PTR [rcx]
  40e937:	shl    BYTE PTR [rbp-0x76],0xeb
  40e93b:	rex.W
  40e93c:	mov    rax,QWORD PTR [rbp-0x90]
  40e943:	lea    rax,[rax-0x1]
  40e947:	mov    QWORD PTR [rbp-0x90],rax
  40e94e:	mov    BYTE PTR [rax],0x30
  40e951:	mov    DWORD PTR [rbp-0x94],0x1
  40e95b:	mov    rax,QWORD PTR [rbp-0x3b10]
  40e962:	mov    eax,DWORD PTR [rax+0x4]
  40e965:	movsxd rax,eax
  40e968:	lea    rax,[rax*2+0x0]
  40e970:	shr    eax,0x15
  40e973:	cmp    eax,0x3ff
  40e978:	je     40e984 <.L487+0x6b>
  40e97a:	mov    DWORD PTR [rbp-0x3b04],0x1
  40e984:	add    QWORD PTR [rbp-0x90],0xffffffffffffffff
  40e98c:	or     DWORD PTR [rbp-0x4e98],0x0
  40e993:	je     40e9a1 <.L487+0x88>
  40e995:	mov    rax,QWORD PTR [rbp-0x90]
  40e99c:	mov    BYTE PTR [rax],0x2d
  40e99f:	jmp    40e9ab <WriteNumber+0x6>
  40e9a1:	rex.W
  40e9a2:	.byte 0x8b
  40e9a3:	.byte 0x85
  40e9a4:	.byte 0x70

000000000040e9a5 <WriteNumber>:
  40e9a5:	(bad)  
  40e9a6:	(bad)  
  40e9a7:	inc    esi
  40e9a9:	add    BYTE PTR [rbx],ch
  40e9ab:	test   r13d,0x200
  40e9b2:	sete   al
  40e9b5:	and    eax,0x1
  40e9b8:	sub    eax,0x1
  40e9bb:	and    eax,0x1
  40e9be:	add    eax,0x5
  40e9c1:	mov    DWORD PTR [rbp-0x4e8c],eax
  40e9c7:	xor    ebx,ebx
  40e9c9:	jmp    40ea21 <WriteNumber+0x7c>
  40e9cb:	lea    rax,[rsi-0x1]
  40e9cf:	lea    rsi,[rsi-0x1]
  40e9d3:	movsxd rcx,ebx
  40e9d6:	mov    rdx,QWORD PTR [rbp-0xe8]
  40e9dd:	movzx  ecx,BYTE PTR [rdx+rcx*1]
  40e9e1:	and    ecx,0xf
  40e9e4:	movsxd rcx,ecx
  40e9e7:	mov    rdx,QWORD PTR [rbp-0x4e88]
  40e9ee:	mov    cl,BYTE PTR [rdx+rcx*1]
  40e9f1:	mov    BYTE PTR [rax],cl
  40e9f3:	lea    rax,[rsi-0x1]
  40e9f7:	lea    rsi,[rsi-0x1]
  40e9fb:	movsxd rcx,ebx
  40e9fe:	mov    rdx,QWORD PTR [rbp-0xe8]
  40ea05:	movzx  ecx,BYTE PTR [rdx+rcx*1]
  40ea09:	sar    ecx,0x4
  40ea0c:	and    ecx,0xf
  40ea0f:	movsxd rcx,ecx
  40ea12:	mov    rdx,QWORD PTR [rbp-0x4e88]
  40ea19:	mov    cl,BYTE PTR [rdx+rcx*1]
  40ea1c:	mov    BYTE PTR [rax],cl
  40ea1e:	add    ebx,0x1
  40ea21:	cmp    ebx,DWORD PTR [rbp-0x4e8c]
  40ea27:	jle    40e9cb <WriteNumber+0x26>
  40ea29:	test   r13d,0x10
  40ea30:	jne    40ea43 <WriteNumber+0x9e>
  40ea32:	mov    eax,DWORD PTR [rbp+0x40]
  40ea35:	or     eax,eax
  40ea37:	jne    40ea43 <WriteNumber+0x9e>
  40ea39:	mov    DWORD PTR [rbp-0x4e94],0x0
  40ea43:	test   r13d,0x200
  40ea4a:	je     40eaaf <WriteNumber+0x10a>
  40ea4c:	lea    rax,[rsi-0x1]
  40ea50:	lea    rsi,[rsi-0x1]
  40ea54:	mov    rcx,QWORD PTR [rbp-0xe8]
  40ea5b:	movzx  ecx,BYTE PTR [rcx+0x7]
  40ea5f:	and    ecx,0xf
  40ea62:	movsxd rcx,ecx
  40ea65:	mov    rdx,QWORD PTR [rbp-0x4e88]
  40ea6c:	mov    cl,BYTE PTR [rdx+rcx*1]
  40ea6f:	mov    BYTE PTR [rax],cl
  40ea71:	or     DWORD PTR [rbp-0x4e94],0x0
  40ea78:	je     40ea85 <WriteNumber+0xe0>
  40ea7a:	lea    rax,[rsi-0x1]
  40ea7e:	lea    rsi,[rsi-0x1]
  40ea82:	mov    BYTE PTR [rax],0x2e
  40ea85:	lea    rax,[rsi-0x1]
  40ea89:	lea    rsi,[rsi-0x1]
  40ea8d:	mov    rcx,QWORD PTR [rbp-0xe8]
  40ea94:	movzx  ecx,BYTE PTR [rcx+0x7]
  40ea98:	sar    ecx,0x4
  40ea9b:	movsxd rcx,ecx
  40ea9e:	mov    rdx,QWORD PTR [rbp-0x4e88]
  40eaa5:	mov    cl,BYTE PTR [rdx+rcx*1]
  40eaa8:	mov    BYTE PTR [rax],cl
  40eaaa:	jmp    40f354 <WriteDouble+0x5d>
  40eaaf:	lea    rax,[rsi-0x1]
  40eab3:	lea    rsi,[rsi-0x1]
  40eab7:	mov    rcx,QWORD PTR [rbp-0xe8]
  40eabe:	movzx  ecx,BYTE PTR [rcx+0x6]
  40eac2:	and    ecx,0xf
  40eac5:	movsxd rcx,ecx
  40eac8:	mov    rdx,QWORD PTR [rbp-0x4e88]
  40eacf:	mov    cl,BYTE PTR [rdx+rcx*1]
  40ead2:	mov    BYTE PTR [rax],cl
  40ead4:	or     DWORD PTR [rbp-0x4e94],0x0
  40eadb:	je     40eae8 <WriteNumber+0x143>
  40eadd:	lea    rax,[rsi-0x1]
  40eae1:	lea    rsi,[rsi-0x1]
  40eae5:	mov    BYTE PTR [rax],0x2e
  40eae8:	lea    rax,[rsi-0x1]
  40eaec:	lea    rsi,[rsi-0x1]
  40eaf0:	mov    ecx,0x31
  40eaf5:	sub    ecx,DWORD PTR [rbp-0x3b04]
  40eafb:	mov    BYTE PTR [rax],cl
  40eafd:	jmp    40f354 <WriteDouble+0x5d>
  40eb02:	fld    TBYTE PTR [rbp-0x70]
  40eb05:	fstp   TBYTE PTR [rsp+0x30]
  40eb09:	fld    TBYTE PTR [rbp-0xd8]
  40eb0f:	fstp   TBYTE PTR [rsp+0x20]
  40eb13:	call   40c504 <tmpnam+0x4>
  40eb18:	fstp   TBYTE PTR [rbp-0x4ea0]
  40eb1e:	fld    TBYTE PTR [rbp-0x4ea0]
  40eb24:	fstp   TBYTE PTR [rbp-0x60]
  40eb27:	fld    TBYTE PTR [rbp-0x60]
  40eb2a:	fstp   TBYTE PTR [rsp+0x20]
  40eb2e:	call   4053c0 <_cinit+0x800>
  40eb33:	mov    DWORD PTR [rbp-0x4ea4],eax
  40eb39:	or     eax,eax
  40eb3b:	je     40eb60 <WriteNumber+0x1bb>
  40eb3d:	mov    DWORD PTR [rbp-0xb0],0x0
  40eb47:	test   r13d,0x800000
  40eb4e:	je     40ec72 <WriteNumber+0x2cd>
  40eb54:	and    r13d,0xffbfffff
  40eb5b:	jmp    40ec72 <WriteNumber+0x2cd>
  40eb60:	fld    TBYTE PTR [rbp-0x60]
  40eb63:	fstp   TBYTE PTR [rsp+0x20]
  40eb67:	call   404ab0 <_assertfailfn+0x8b>
  40eb6c:	fstp   TBYTE PTR [rbp-0x4ed8]
  40eb72:	fld    TBYTE PTR [rbp-0x4ed8]
  40eb78:	fstp   TBYTE PTR [rbp-0x4ec8]
  40eb7e:	fld    TBYTE PTR [rbp-0x4ec8]
  40eb84:	sub    rsp,0x8
  40eb88:	fstp   QWORD PTR [rsp]
  40eb8b:	cvttsd2si eax,QWORD PTR [rsp]
  40eb90:	add    rsp,0x8
  40eb94:	mov    DWORD PTR [rbp-0xb0],eax
  40eb9a:	fild   DWORD PTR [rbp-0xb0]
  40eba0:	fstp   TBYTE PTR [rsp+0x30]
  40eba4:	fld    TBYTE PTR [rbp-0x70]
  40eba7:	fstp   TBYTE PTR [rsp+0x20]
  40ebab:	call   405c1c <fopen+0x11c>
  40ebb0:	fstp   TBYTE PTR [rbp-0x4ef8]
  40ebb6:	fld    TBYTE PTR [rbp-0x4ef8]
  40ebbc:	fstp   TBYTE PTR [rbp-0x4eb8]
  40ebc2:	fld    TBYTE PTR [rbp-0x4eb8]
  40ebc8:	fld    TBYTE PTR ds:0x415378
  40ebcf:	fucomip st,st(1)
  40ebd1:	fstp   st(0)
  40ebd3:	jp     40ebd7 <WriteNumber+0x232>
  40ebd5:	je     40ebed <WriteNumber+0x248>
  40ebd7:	fld    TBYTE PTR [rbp-0xd8]
  40ebdd:	fld    TBYTE PTR [rbp-0x4eb8]
  40ebe3:	fdivp  st(1),st
  40ebe5:	fstp   TBYTE PTR [rbp-0xd8]
  40ebeb:	jmp    40ec17 <WriteNumber+0x272>
  40ebed:	cmp    DWORD PTR [rbp-0xb0],0x0
  40ebf4:	jge    40ec17 <WriteNumber+0x272>
  40ebf6:	fld    TBYTE PTR [rbp-0xd8]
  40ebfc:	fstp   TBYTE PTR [rsp+0x20]
  40ec00:	call   408e46 <qnrmlz+0x1e>
  40ec05:	fstp   TBYTE PTR [rbp-0x4f18]
  40ec0b:	fld    TBYTE PTR [rbp-0x4f18]
  40ec11:	fstp   TBYTE PTR [rbp-0xd8]
  40ec17:	cmp    DWORD PTR [rbp-0xb0],0x0
  40ec1e:	setl   al
  40ec21:	and    eax,0x1
  40ec24:	mov    DWORD PTR [rbp-0x4efc],eax
  40ec2a:	or     eax,eax
  40ec2c:	mov    eax,0x0
  40ec31:	setne  al
  40ec34:	mov    BYTE PTR [rbp-0x3ae1],al
  40ec3a:	test   BYTE PTR [rbp-0x3ae1],0x1
  40ec41:	je     40ec53 <WriteNumber+0x2ae>
  40ec43:	mov    eax,DWORD PTR [rbp-0xb0]
  40ec49:	neg    eax
  40ec4b:	mov    DWORD PTR [rbp-0x4f00],eax
  40ec51:	jmp    40ec5f <WriteNumber+0x2ba>
  40ec53:	mov    eax,DWORD PTR [rbp-0xb0]
  40ec59:	mov    DWORD PTR [rbp-0x4f00],eax
  40ec5f:	mov    eax,DWORD PTR [rbp-0x4f00]
  40ec65:	mov    DWORD PTR [rbp-0x98],eax
  40ec6b:	and    r13d,0xfeffffff
  40ec72:	fld    TBYTE PTR [rbp-0xd8]
  40ec78:	fstp   TBYTE PTR [rsp+0x20]
  40ec7c:	call   404ab0 <_assertfailfn+0x8b>
  40ec81:	fstp   TBYTE PTR [rbp-0x4ea0]
  40ec87:	fld    TBYTE PTR [rbp-0x4ea0]
  40ec8d:	fstp   TBYTE PTR [rbp-0xa8]
  40ec93:	fld    TBYTE PTR [rbp-0xd8]
  40ec99:	fld    TBYTE PTR [rbp-0xa8]
  40ec9f:	fsubp  st(1),st
  40eca1:	fstp   TBYTE PTR [rbp-0x100]
  40eca7:	fld    TBYTE PTR [rbp-0xa8]
  40ecad:	fld    TBYTE PTR [rbp-0x3b00]
  40ecb3:	fucomip st,st(1)
  40ecb5:	fstp   st(0)
  40ecb7:	jp     40ecbb <WriteNumber+0x316>
  40ecb9:	jb     40ecbd <WriteNumber+0x318>
  40ecbb:	jmp    40ed00 <WriteNumber+0x35b>
  40ecbd:	fld    TBYTE PTR [rbp-0x70]
  40ecc0:	fstp   TBYTE PTR [rsp+0x30]
  40ecc4:	fld    TBYTE PTR [rbp-0xa8]
  40ecca:	fstp   TBYTE PTR [rsp+0x20]
  40ecce:	call   40c504 <tmpnam+0x4>
  40ecd3:	fstp   TBYTE PTR [rbp-0x4ec0]
  40ecd9:	fld    TBYTE PTR [rbp-0x4ec0]
  40ecdf:	fstp   TBYTE PTR [rbp-0x4eb0]
  40ece5:	fld    TBYTE PTR [rbp-0x4eb0]
  40eceb:	sub    rsp,0x8
  40ecef:	fstp   QWORD PTR [rsp]
  40ecf2:	cvttsd2si eax,QWORD PTR [rsp]
  40ecf7:	add    rsp,0x8
  40ecfb:	add    eax,0x1
  40ecfe:	jmp    40ed05 <WriteNumber+0x360>
  40ed00:	mov    eax,0x1
  40ed05:	mov    DWORD PTR [rbp-0x80],eax
  40ed08:	test   r13d,0x800000
  40ed0f:	je     40ed23 <WriteNumber+0x37e>
  40ed11:	mov    eax,DWORD PTR [rbp-0x3adc]
  40ed17:	or     eax,eax
  40ed19:	jne    40ed23 <WriteNumber+0x37e>
  40ed1b:	mov    eax,DWORD PTR [rbp+0x40]
  40ed1e:	sub    eax,DWORD PTR [rbp-0x80]
  40ed21:	jmp    40ed2c <WriteNumber+0x387>
  40ed23:	mov    eax,DWORD PTR [rbp-0x3adc]
  40ed29:	add    eax,DWORD PTR [rbp+0x40]
  40ed2c:	mov    DWORD PTR [rbp-0xac],eax
  40ed32:	mov    eax,DWORD PTR [rbp-0x80]
  40ed35:	sub    eax,DWORD PTR [rbp-0x3ae0]
  40ed3b:	mov    DWORD PTR [rbp-0x84],eax
  40ed41:	mov    eax,DWORD PTR [rbp-0xac]
  40ed47:	add    eax,DWORD PTR [rbp-0x80]
  40ed4a:	sub    eax,DWORD PTR [rbp-0x3ae0]
  40ed50:	mov    DWORD PTR [rbp-0xdc],eax
  40ed56:	fild   DWORD PTR [rbp-0xac]
  40ed5c:	fstp   TBYTE PTR [rsp+0x30]
  40ed60:	fild   DWORD PTR [rbp+0x48]
  40ed63:	fstp   TBYTE PTR [rsp+0x20]
  40ed67:	call   405c1c <fopen+0x11c>
  40ed6c:	fstp   TBYTE PTR [rbp-0x4ee0]
  40ed72:	fld    TBYTE PTR [rbp-0x4ee0]
  40ed78:	fstp   TBYTE PTR [rbp-0x50]
  40ed7b:	fld    TBYTE PTR ds:0x4152e8
  40ed82:	fld    TBYTE PTR [rbp-0x50]
  40ed85:	fdivp  st(1),st
  40ed87:	fld    TBYTE PTR [rbp-0xd8]
  40ed8d:	faddp  st(1),st
  40ed8f:	fstp   TBYTE PTR [rbp-0x60]
  40ed92:	fld    TBYTE PTR [rbp-0xd8]
  40ed98:	fstp   TBYTE PTR [rsp+0x20]
  40ed9c:	call   404ab0 <_assertfailfn+0x8b>
  40eda1:	fstp   TBYTE PTR [rbp-0x4f10]
  40eda7:	fld    TBYTE PTR [rbp-0x4f10]
  40edad:	fstp   TBYTE PTR [rbp-0x4ef0]
  40edb3:	fld    TBYTE PTR [rbp-0x60]
  40edb6:	fstp   TBYTE PTR [rsp+0x20]
  40edba:	call   404ab0 <_assertfailfn+0x8b>
  40edbf:	fstp   TBYTE PTR [rbp-0x4f20]
  40edc5:	fld    TBYTE PTR [rbp-0x4f20]
  40edcb:	fstp   TBYTE PTR [rbp-0x4f00]
  40edd1:	fld    TBYTE PTR [rbp-0x4ef0]
  40edd7:	fld    TBYTE PTR [rbp-0x4f00]
  40eddd:	fucomip st,st(1)
  40eddf:	fstp   st(0)
  40ede1:	jp     40ede9 <WriteNumber+0x444>
  40ede3:	je     40eed0 <WriteNumber+0x52b>
  40ede9:	test   r13d,0x400000
  40edf0:	je     40eea3 <WriteNumber+0x4fe>
  40edf6:	inc    DWORD PTR [rbp-0xb0]
  40edfc:	cmp    DWORD PTR [rbp-0xb0],0x0
  40ee03:	setl   al
  40ee06:	and    eax,0x1
  40ee09:	mov    DWORD PTR [rbp-0x4f24],eax
  40ee0f:	mov    eax,DWORD PTR [rbp-0x4f24]
  40ee15:	or     eax,eax
  40ee17:	mov    eax,0x0
  40ee1c:	setne  al
  40ee1f:	mov    BYTE PTR [rbp-0x3ae1],al
  40ee25:	test   BYTE PTR [rbp-0x3ae1],0x1
  40ee2c:	je     40ee3e <WriteNumber+0x499>
  40ee2e:	mov    eax,DWORD PTR [rbp-0xb0]
  40ee34:	neg    eax
  40ee36:	mov    DWORD PTR [rbp-0x4f28],eax
  40ee3c:	jmp    40ee4a <WriteNumber+0x4a5>
  40ee3e:	mov    eax,DWORD PTR [rbp-0xb0]
  40ee44:	mov    DWORD PTR [rbp-0x4f28],eax
  40ee4a:	mov    eax,DWORD PTR [rbp-0x4f28]
  40ee50:	mov    DWORD PTR [rbp-0x98],eax
  40ee56:	fld    TBYTE PTR ds:0x4152e8
  40ee5d:	fld    TBYTE PTR [rbp-0x50]
  40ee60:	fdivp  st(1),st
  40ee62:	fld    TBYTE PTR [rbp-0xd8]
  40ee68:	faddp  st(1),st
  40ee6a:	fld    TBYTE PTR [rbp-0x70]
  40ee6d:	fdivp  st(1),st
  40ee6f:	fstp   TBYTE PTR [rbp-0x60]
  40ee72:	fld    TBYTE PTR [rbp-0x60]
  40ee75:	fstp   TBYTE PTR [rsp+0x20]
  40ee79:	call   404ab0 <_assertfailfn+0x8b>
  40ee7e:	fstp   TBYTE PTR [rbp-0x4f48]
  40ee84:	fld    TBYTE PTR [rbp-0x4f48]
  40ee8a:	fstp   TBYTE PTR [rbp-0xa8]
  40ee90:	fld    TBYTE PTR [rbp-0x60]
  40ee93:	fld    TBYTE PTR [rbp-0xa8]
  40ee99:	fsubp  st(1),st
  40ee9b:	fstp   TBYTE PTR [rbp-0x100]
  40eea1:	jmp    40eed0 <WriteNumber+0x52b>
  40eea3:	inc    DWORD PTR [rbp-0x80]
  40eea6:	fld    TBYTE PTR [rbp-0xd8]
  40eeac:	fld    TBYTE PTR ds:0x4152e8
  40eeb3:	faddp  st(1),st
  40eeb5:	fstp   TBYTE PTR [rsp+0x20]
  40eeb9:	call   404ab0 <_assertfailfn+0x8b>
  40eebe:	fstp   TBYTE PTR [rbp-0x4f40]
  40eec4:	fld    TBYTE PTR [rbp-0x4f40]
  40eeca:	fstp   TBYTE PTR [rbp-0xa8]
  40eed0:	lea    rsi,[rbp-0x101]
  40eed7:	mov    BYTE PTR [rsi],0x0
  40eeda:	mov    BYTE PTR [rbp-0xc1],0x1
  40eee1:	.byte 0xdb
  40eee2:	sub    al,0x25
  40eee4:	.byte 0xe8

000000000040eee5 <WriteStringCharacter>:
  40eee5:	push   rdx
  40eee6:	add    r11b,bl
  40eee9:	mov    ebp,0xffffff40
  40eeee:	xor    ebx,ebx
  40eef0:	jmp    40f02a <WriteString+0x27>
  40eef5:	mov    eax,DWORD PTR [rbp-0x84]
  40eefb:	or     eax,eax
  40eefd:	jg     40ef07 <WriteStringCharacter+0x22>
  40eeff:	cmp    ebx,DWORD PTR [rbp-0xdc]
  40ef05:	jge    40ef19 <WriteStringCharacter+0x34>
  40ef07:	lea    rax,[rsi-0x1]
  40ef0b:	lea    rsi,[rsi-0x1]
  40ef0f:	mov    cl,BYTE PTR [r15]
  40ef12:	mov    BYTE PTR [rax],cl
  40ef14:	jmp    40efd5 <WriteStringCharacter+0xf0>
  40ef19:	fld    TBYTE PTR [rbp-0x50]
  40ef1c:	fld    TBYTE PTR [rbp-0x100]
  40ef22:	fmulp  st(1),st
  40ef24:	fld    TBYTE PTR [rbp-0xc0]
  40ef2a:	faddp  st(1),st
  40ef2c:	fstp   TBYTE PTR [rbp-0x4f30]
  40ef32:	fld    TBYTE PTR [rbp-0x4f30]
  40ef38:	fstp   TBYTE PTR [rsp+0x20]
  40ef3c:	call   404ab0 <_assertfailfn+0x8b>
  40ef41:	fstp   TBYTE PTR [rbp-0x4f58]
  40ef47:	fld    TBYTE PTR [rbp-0x4f58]
  40ef4d:	fstp   TBYTE PTR [rbp-0x60]
  40ef50:	fld    TBYTE PTR [rbp-0x70]
  40ef53:	fstp   TBYTE PTR [rsp+0x30]
  40ef57:	fld    TBYTE PTR [rbp-0x60]
  40ef5a:	fstp   TBYTE PTR [rsp+0x20]
  40ef5e:	call   404ae0 <atoi+0x10>
  40ef63:	fstp   TBYTE PTR [rbp-0x4f78]
  40ef69:	fld    TBYTE PTR [rbp-0x4f78]
  40ef6f:	fstp   TBYTE PTR [rbp-0x4f30]
  40ef75:	fld    TBYTE PTR [rbp-0x4f30]
  40ef7b:	sub    rsp,0x10
  40ef7f:	fnstcw WORD PTR [rsp+0x8]
  40ef83:	push   rax
  40ef84:	mov    ax,WORD PTR [rsp+0x10]
  40ef89:	or     ah,0xc
  40ef8c:	mov    WORD PTR [rsp+0x14],ax
  40ef91:	pop    rax
  40ef92:	fldcw  WORD PTR [rsp+0xc]
  40ef96:	fistp  QWORD PTR [rsp]
  40ef99:	pop    rax
  40ef9a:	fldcw  WORD PTR [rsp]
  40ef9d:	add    rsp,0x8
  40efa1:	mov    DWORD PTR [rbp-0x4f34],eax
  40efa7:	cmp    eax,0x25
  40efaa:	jae    40e3e6 <.L463+0x1b>
  40efb0:	lea    rax,[rsi-0x1]
  40efb4:	lea    rsi,[rsi-0x1]
  40efb8:	mov    ecx,DWORD PTR [rbp-0x4f34]
  40efbe:	mov    cl,BYTE PTR [r15+rcx*1]
  40efc2:	mov    BYTE PTR [rax],cl
  40efc4:	fld    TBYTE PTR [rbp-0xc0]
  40efca:	fld    TBYTE PTR [rbp-0x70]
  40efcd:	fdivp  st(1),st
  40efcf:	fstp   TBYTE PTR [rbp-0xc0]
  40efd5:	fld    TBYTE PTR [rbp-0x50]
  40efd8:	fld    TBYTE PTR [rbp-0x70]
  40efdb:	fdivp  st(1),st
  40efdd:	fstp   TBYTE PTR [rbp-0x50]
  40efe0:	test   r13d,0x800000
  40efe7:	je     40f020 <WriteString+0x1d>
  40efe9:	test   r13d,0x10
  40eff0:	jne    40f020 <WriteString+0x1d>
  40eff2:	movsx  eax,BYTE PTR [rsi]
  40eff5:	movsx  ecx,BYTE PTR [r15]
  40eff9:	cmp    eax,ecx
  40effb:	je     40f006 <WriteString+0x3>
  40effd:	.byte 0xc6
  40effe:	test   DWORD PTR [rdi],edi
  40f000:	(bad)  
  40f001:	(bad)  
  40f002:	.byte 0xff

000000000040f003 <WriteString>:
  40f003:	add    bl,ch
  40f005:	and    esi,esi
  40f007:	test   DWORD PTR [rdi],edi
  40f009:	(bad)  
  40f00a:	(bad)  
  40f00b:	inc    DWORD PTR [rcx]
  40f00d:	je     40f027 <WriteString+0x24>
  40f00f:	movsx  eax,BYTE PTR [rsi]
  40f012:	movsx  ecx,BYTE PTR [r15]
  40f016:	cmp    eax,ecx
  40f018:	jne    40f027 <WriteString+0x24>
  40f01a:	lea    rsi,[rsi+0x1]
  40f01e:	jmp    40f027 <WriteString+0x24>
  40f020:	mov    BYTE PTR [rbp-0xc1],0x0
  40f027:	add    ebx,0x1
  40f02a:	cmp    ebx,DWORD PTR [rbp-0xac]
  40f030:	jl     40eef5 <WriteStringCharacter+0x10>
  40f036:	test   r13d,0x10
  40f03d:	jne    40f052 <WriteString+0x4f>
  40f03f:	mov    eax,DWORD PTR [rbp-0xac]
  40f045:	or     eax,eax
  40f047:	jle    40f08a <WriteString+0x87>
  40f049:	test   BYTE PTR [rbp-0xc1],0x1
  40f050:	jne    40f08a <WriteString+0x87>
  40f052:	lea    rcx,ds:0x414f48
  40f05a:	call   40b060 <_setlocale+0xb54>
  40f05f:	mov    QWORD PTR [rbp-0x4f28],rax
  40f066:	mov    rbx,rax
  40f069:	jmp    40f086 <WriteString+0x83>
  40f06b:	lea    rax,[rsi-0x1]
  40f06f:	lea    rsi,[rsi-0x1]
  40f073:	mov    ecx,ebx
  40f075:	sub    ecx,0x1
  40f078:	mov    ebx,ecx
  40f07a:	movsxd rcx,ecx
  40f07d:	mov    cl,BYTE PTR [rcx*1+0x414f48]
  40f084:	mov    BYTE PTR [rax],cl
  40f086:	or     ebx,ebx
  40f088:	jg     40f06b <WriteString+0x68>
  40f08a:	movsx  eax,BYTE PTR ds:0x414f4e
  40f092:	mov    DWORD PTR [rbp-0x7c],eax
  40f095:	mov    DWORD PTR [rbp-0x3ad4],0x1
  40f09f:	fld    TBYTE PTR [rbp-0x70]
  40f0a2:	fstp   TBYTE PTR [rbp-0x50]
  40f0a5:	fld    TBYTE PTR [rbp-0xa8]
  40f0ab:	fstp   TBYTE PTR [rbp-0x60]
  40f0ae:	mov    ebx,0x1
  40f0b3:	fld    TBYTE PTR [rbp-0x70]
  40f0b6:	fstp   TBYTE PTR [rbp-0x50]
  40f0b9:	jmp    40f2ab <WriteQuad+0x134>
  40f0be:	cmp    ebx,DWORD PTR [rbp-0x84]
  40f0c4:	jge    40f104 <WriteString+0x101>
  40f0c6:	lea    rax,[rsi-0x1]
  40f0ca:	lea    rsi,[rsi-0x1]
  40f0ce:	mov    cl,BYTE PTR [r15]
  40f0d1:	mov    BYTE PTR [rax],cl
  40f0d3:	fld    TBYTE PTR [rbp-0xa8]
  40f0d9:	fld    TBYTE PTR [rbp-0x50]
  40f0dc:	fdivp  st(1),st
  40f0de:	fld    TBYTE PTR ds:0x4152e8
  40f0e5:	faddp  st(1),st
  40f0e7:	fstp   TBYTE PTR [rsp+0x20]
  40f0eb:	call   404ab0 <_assertfailfn+0x8b>
  40f0f0:	fstp   TBYTE PTR [rbp-0x4f40]
  40f0f6:	fld    TBYTE PTR [rbp-0x4f40]
  40f0fc:	fstp   TBYTE PTR [rbp-0x60]
  40f0ff:	jmp    40f19c <WriteQuad+0x25>
  40f104:	fld    TBYTE PTR [rbp-0x70]
  40f107:	fstp   TBYTE PTR [rsp+0x30]
  40f10b:	fld    TBYTE PTR [rbp-0x60]
  40f10e:	fstp   TBYTE PTR [rsp+0x20]
  40f112:	call   404ae0 <atoi+0x10>
  40f117:	fstp   TBYTE PTR [rbp-0x4f48]
  40f11d:	fld    TBYTE PTR [rbp-0x4f48]
  40f123:	fstp   TBYTE PTR [rbp-0x4f38]
  40f129:	fld    TBYTE PTR [rbp-0x4f38]
  40f12f:	sub    rsp,0x10
  40f133:	fnstcw WORD PTR [rsp+0x8]
  40f137:	push   rax
  40f138:	mov    ax,WORD PTR [rsp+0x10]
  40f13d:	or     ah,0xc
  40f140:	mov    WORD PTR [rsp+0x14],ax
  40f145:	pop    rax
  40f146:	fldcw  WORD PTR [rsp+0xc]
  40f14a:	fistp  QWORD PTR [rsp]
  40f14d:	pop    rax
  40f14e:	fldcw  WORD PTR [rsp]
  40f151:	add    rsp,0x8
  40f155:	mov    DWORD PTR [rbp-0x4f24],eax
  40f15b:	cmp    eax,0x25
  40f15e:	jae    40e3e6 <.L463+0x1b>
  40f164:	lea    rax,[rsi-0x1]
  40f168:	lea    rsi,[rsi-0x1]
  40f16c:	movsxd rcx,DWORD PTR [rbp-0x4f24]
  40f173:	mov    cl,BYTE PTR [r15+rcx*1]

000000000040f177 <WriteQuad>:
  40f177:	mov    BYTE PTR [rax],cl
  40f179:	fld    TBYTE PTR [rbp-0xa8]
  40f17f:	fld    TBYTE PTR [rbp-0x50]
  40f182:	fdivp  st(1),st
  40f184:	fstp   TBYTE PTR [rsp+0x20]
  40f188:	call   404ab0 <_assertfailfn+0x8b>
  40f18d:	fstp   TBYTE PTR [rbp-0x4f68]
  40f193:	fld    TBYTE PTR [rbp-0x4f68]
  40f199:	fstp   TBYTE PTR [rbp-0x60]
  40f19c:	fld    TBYTE PTR [rbp-0x60]
  40f19f:	fld    TBYTE PTR ds:0x415338
  40f1a6:	fucomip st,st(1)
  40f1a8:	fstp   st(0)
  40f1aa:	jp     40f1ae <WriteQuad+0x37>
  40f1ac:	ja     40f1b0 <WriteQuad+0x39>
  40f1ae:	jmp    40f1b5 <WriteQuad+0x3e>
  40f1b0:	jmp    40f2b9 <WriteQuad+0x142>
  40f1b5:	or     ebx,ebx
  40f1b7:	jle    40f29d <WriteQuad+0x126>
  40f1bd:	mov    eax,r13d
  40f1c0:	and    eax,0x1400000
  40f1c5:	cmp    eax,0x1000000
  40f1ca:	jne    40f29d <WriteQuad+0x126>
  40f1d0:	mov    ecx,DWORD PTR [rbp-0x7c]
  40f1d3:	cmp    ecx,0x7f
  40f1d6:	je     40f29d <WriteQuad+0x126>
  40f1dc:	mov    eax,ebx
  40f1de:	mov    r10d,ecx
  40f1e1:	cdq    
  40f1e2:	idiv   r10d
  40f1e5:	or     edx,edx
  40f1e7:	jne    40f29d <WriteQuad+0x126>
  40f1ed:	lea    rcx,ds:0x414f4b
  40f1f5:	call   40b060 <_setlocale+0xb54>
  40f1fa:	mov    QWORD PTR [rbp-0x4f28],rax
  40f201:	mov    r14,rax
  40f204:	add    DWORD PTR [rbp-0x80],r14d
  40f208:	lea    rax,[rbp-0x3acd]
  40f20f:	mov    rcx,rsi
  40f212:	sub    rcx,rax
  40f215:	mov    eax,ecx
  40f217:	sub    eax,r14d
  40f21a:	jle    40f255 <WriteQuad+0xde>
  40f21c:	mov    eax,r14d
  40f21f:	sub    eax,0x1
  40f222:	movsxd rax,eax
  40f225:	lea    rax,[rax+0x414f4b]
  40f22c:	mov    QWORD PTR [rbp-0x78],rax
  40f230:	jmp    40f24a <WriteQuad+0xd3>
  40f232:	lea    rax,[rsi-0x1]
  40f236:	lea    rsi,[rsi-0x1]
  40f23a:	mov    rcx,QWORD PTR [rbp-0x78]
  40f23e:	lea    rdx,[rcx-0x1]
  40f242:	mov    QWORD PTR [rbp-0x78],rdx
  40f246:	mov    cl,BYTE PTR [rcx]
  40f248:	mov    BYTE PTR [rax],cl
  40f24a:	mov    eax,r14d
  40f24d:	sub    r14d,0x1
  40f251:	or     eax,eax
  40f253:	jg     40f232 <WriteQuad+0xbb>
  40f255:	cmp    DWORD PTR [rbp-0x7c],0x7f
  40f259:	je     40f29d <WriteQuad+0x126>
  40f25b:	movsxd rax,DWORD PTR [rbp-0x3ad4]
  40f262:	movsx  eax,BYTE PTR [rax*1+0x414f4e]
  40f26a:	or     eax,eax
  40f26c:	je     40f29d <WriteQuad+0x126>
  40f26e:	jl     40f27e <WriteQuad+0x107>
  40f270:	cmp    eax,0x7f
  40f273:	jne    40f27e <WriteQuad+0x107>
  40f275:	mov    DWORD PTR [rbp-0x7c],0x7f
  40f27c:	jmp    40f29d <WriteQuad+0x126>
  40f27e:	mov    eax,DWORD PTR [rbp-0x3ad4]
  40f284:	mov    ecx,eax
  40f286:	add    ecx,0x1
  40f289:	mov    DWORD PTR [rbp-0x3ad4],ecx
  40f28f:	movsxd rax,eax
  40f292:	movsx  eax,BYTE PTR [rax*1+0x414f4e]
  40f29a:	mov    DWORD PTR [rbp-0x7c],eax
  40f29d:	add    ebx,0x1
  40f2a0:	fld    TBYTE PTR [rbp-0x70]
  40f2a3:	fld    TBYTE PTR [rbp-0x50]
  40f2a6:	fmulp  st(1),st
  40f2a8:	fstp   TBYTE PTR [rbp-0x50]
  40f2ab:	mov    eax,DWORD PTR [rbp-0x80]
  40f2ae:	add    eax,0x1
  40f2b1:	cmp    ebx,eax
  40f2b3:	jl     40f0be <WriteString+0xbb>
  40f2b9:	mov    DWORD PTR [rbp-0x94],0x0
  40f2c3:	test   r13d,0x400000
  40f2ca:	je     40f354 <WriteDouble+0x5d>
  40f2d0:	lea    rax,[rbp-0x3b11]
  40f2d7:	mov    QWORD PTR [rbp-0x90],rax
  40f2de:	lea    rcx,[rax-0x1]
  40f2e2:	mov    QWORD PTR [rbp-0x90],rcx
  40f2e9:	mov    BYTE PTR [rax],0x0
  40f2ec:	mov    rax,QWORD PTR [rbp-0x90]
  40f2f3:	rex.W
  40f2f4:	.byte 0x89
  40f2f5:	test   eax,ebx

000000000040f2f7 <WriteDouble>:
  40f2f7:	mov    al,0xff
  40f2f9:	dec    DWORD PTR [rax-0x73]
  40f2fc:	dec    QWORD PTR [rax-0x77]
  40f300:	lea    esi,[rax-0x1]
  40f303:	(bad)  
  40f304:	dec    DWORD PTR [rbx-0x977b]
  40f30a:	inc    DWORD PTR [rbx+rcx*4+0x55]
  40f30e:	xor    rdx,rdx
  40f311:	div    r10d
  40f314:	mov    DWORD PTR [rbp-0x4f2c],edx
  40f31a:	mov    eax,edx
  40f31c:	mov    eax,eax
  40f31e:	mov    al,BYTE PTR [r15+rax*1]
  40f322:	mov    rcx,QWORD PTR [rbp-0x4f28]
  40f329:	mov    BYTE PTR [rcx],al
  40f32b:	mov    eax,DWORD PTR [rbp-0x98]
  40f331:	mov    ecx,DWORD PTR [rbp+0x48]
  40f334:	xor    edx,edx
  40f336:	div    ecx
  40f338:	mov    DWORD PTR [rbp-0x4f30],eax
  40f33e:	mov    DWORD PTR [rbp-0x98],eax
  40f344:	inc    DWORD PTR [rbp-0x94]
  40f34a:	mov    eax,DWORD PTR [rbp-0x98]
  40f350:	or     eax,eax
  40f352:	jne    40f2ec <WriteQuad+0x175>
  40f354:	lea    rcx,[rsi]
  40f357:	call   40b060 <_setlocale+0xb54>
  40f35c:	mov    QWORD PTR [rbp-0x4f28],rax
  40f363:	mov    DWORD PTR [rbp-0xec],eax
  40f369:	test   BYTE PTR [rbp-0x3ad5],0x1
  40f370:	jne    40f37b <WriteDouble+0x84>
  40f372:	test   r13d,0x4
  40f379:	je     40f382 <WriteDouble+0x8b>
  40f37b:	add    DWORD PTR [rbp-0xec],0x1
  40f382:	mov    eax,DWORD PTR [rbp-0x94]
  40f388:	or     eax,eax
  40f38a:	jle    40f393 <WriteDouble+0x9c>
  40f38c:	add    DWORD PTR [rbp-0xec],0x5
  40f393:	test   BYTE PTR [rbp-0x3ace],0x1
  40f39a:	je     40f3a3 <WriteDouble+0xac>
  40f39c:	add    DWORD PTR [rbp-0xec],0x2
  40f3a3:	test   r13d,0x2000
  40f3aa:	je     40f465 <WriteDouble+0x16e>
  40f3b0:	test   BYTE PTR [rbp-0x3ad5],0x1
  40f3b7:	je     40f3ce <WriteDouble+0xd7>
  40f3b9:	mov    rdx,0x2d
  40f3c0:	lea    rcx,[r12]
  40f3c4:	call   QWORD PTR [r12*1+0x0]
  40f3cc:	jmp    40f3ea <WriteDouble+0xf3>
  40f3ce:	test   r13d,0x4
  40f3d5:	je     40f3ea <WriteDouble+0xf3>
  40f3d7:	mov    rdx,0x2b
  40f3de:	lea    rcx,[r12]
  40f3e2:	call   QWORD PTR [r12*1+0x0]
  40f3ea:	test   BYTE PTR [rbp-0x3ace],0x1
  40f3f1:	je     40f430 <WriteDouble+0x139>
  40f3f3:	mov    rdx,0x30
  40f3fa:	lea    rcx,[r12]
  40f3fe:	call   QWORD PTR [r12*1+0x0]
  40f406:	test   r13d,0x8000
  40f40d:	sete   al
  40f410:	and    eax,0x1
  40f413:	sub    eax,0x1
  40f416:	and    eax,0xffffffe0
  40f419:	add    eax,0x78
  40f41c:	mov    DWORD PTR [rbp-0x4f2c],eax
  40f422:	mov    edx,eax
  40f424:	lea    rcx,[r12]
  40f428:	call   QWORD PTR [r12*1+0x0]
  40f430:	test   r13d,0x8
  40f437:	jne    40f541 <WriteDouble+0x24a>
  40f43d:	mov    ebx,DWORD PTR [rbp-0xec]
  40f443:	jmp    40f45b <WriteDouble+0x164>
  40f445:	mov    rdx,0x30
  40f44c:	lea    rcx,[r12]
  40f450:	call   QWORD PTR [r12*1+0x0]
  40f458:	add    ebx,0x1
  40f45b:	cmp    ebx,DWORD PTR [rbp+0x28]
  40f45e:	jl     40f445 <WriteDouble+0x14e>
  40f460:	jmp    40f541 <WriteDouble+0x24a>
  40f465:	test   r13d,0x8
  40f46c:	jne    40f4c1 <WriteDouble+0x1ca>
  40f46e:	mov    ebx,DWORD PTR [rbp-0xec]
  40f474:	jmp    40f48c <WriteDouble+0x195>
  40f476:	mov    rdx,0x20
  40f47d:	lea    rcx,[r12]
  40f481:	call   QWORD PTR [r12*1+0x0]
  40f489:	add    ebx,0x1
  40f48c:	cmp    ebx,DWORD PTR [rbp+0x28]
  40f48f:	jl     40f476 <WriteDouble+0x17f>
  40f491:	test   BYTE PTR [rbp-0x3ad5],0x1
  40f498:	jne    40f4c1 <WriteDouble+0x1ca>
  40f49a:	mov    eax,DWORD PTR [rbp-0xec]
  40f4a0:	cmp    eax,DWORD PTR [rbp+0x28]
  40f4a3:	jle    40f4c1 <WriteDouble+0x1ca>
  40f4a5:	test   r13d,0x2
  40f4ac:	je     40f4c1 <WriteDouble+0x1ca>
  40f4ae:	mov    rdx,0x20
  40f4b5:	lea    rcx,[r12]
  40f4b9:	call   QWORD PTR [r12*1+0x0]
  40f4c1:	test   BYTE PTR [rbp-0x3ad5],0x1
  40f4c8:	je     40f4df <WriteDouble+0x1e8>
  40f4ca:	mov    rdx,0x2d
  40f4d1:	lea    rcx,[r12]
  40f4d5:	call   QWORD PTR [r12*1+0x0]
  40f4dd:	jmp    40f4fb <WriteDouble+0x204>
  40f4df:	test   r13d,0x4
  40f4e6:	je     40f4fb <WriteDouble+0x204>
  40f4e8:	mov    rdx,0x2b
  40f4ef:	lea    rcx,[r12]
  40f4f3:	call   QWORD PTR [r12*1+0x0]
  40f4fb:	test   BYTE PTR [rbp-0x3ace],0x1
  40f502:	je     40f541 <WriteDouble+0x24a>
  40f504:	mov    rdx,0x30
  40f50b:	lea    rcx,[r12]
  40f50f:	call   QWORD PTR [r12*1+0x0]
  40f517:	test   r13d,0x8000
  40f51e:	sete   al
  40f521:	and    eax,0x1
  40f524:	sub    eax,0x1
  40f527:	and    eax,0xffffffe0
  40f52a:	add    eax,0x78
  40f52d:	mov    DWORD PTR [rbp-0x4f2c],eax
  40f533:	mov    edx,eax
  40f535:	lea    rcx,[r12]
  40f539:	call   QWORD PTR [r12*1+0x0]
  40f541:	xor    ebx,ebx
  40f543:	jmp    40f55b <WriteDouble+0x264>
  40f545:	movsxd rax,ebx
  40f548:	movsx  edx,BYTE PTR [rsi+rax*1]
  40f54c:	lea    rcx,[r12]
  40f550:	call   QWORD PTR [r12*1+0x0]
  40f558:	add    ebx,0x1
  40f55b:	movsxd rax,ebx
  40f55e:	cmp    BYTE PTR [rsi+rax*1],0x0
  40f562:	jne    40f545 <WriteDouble+0x24e>
  40f564:	mov    eax,DWORD PTR [rbp-0x94]
  40f56a:	or     eax,eax
  40f56c:	jle    40f657 <WriteDouble+0x360>
  40f572:	test   BYTE PTR [rbp-0x3ace],0x1
  40f579:	je     40f599 <WriteDouble+0x2a2>
  40f57b:	test   r13d,0x8000
  40f582:	sete   al
  40f585:	and    eax,0x1
  40f588:	sub    eax,0x1
  40f58b:	and    eax,0xffffffe0
  40f58e:	add    eax,0x70
  40f591:	mov    DWORD PTR [rbp-0x4f2c],eax
  40f597:	jmp    40f5b5 <WriteDouble+0x2be>
  40f599:	test   r13d,0x8000
  40f5a0:	sete   al
  40f5a3:	and    eax,0x1
  40f5a6:	sub    eax,0x1
  40f5a9:	and    eax,0xffffffe0
  40f5ac:	add    eax,0x65
  40f5af:	mov    DWORD PTR [rbp-0x4f2c],eax
  40f5b5:	mov    edx,DWORD PTR [rbp-0x4f2c]
  40f5bb:	lea    rcx,[r12]
  40f5bf:	call   QWORD PTR [r12*1+0x0]
  40f5c7:	test   BYTE PTR [rbp-0x3ae1],0x1
  40f5ce:	sete   al
  40f5d1:	and    eax,0x1
  40f5d4:	sub    eax,0x1
  40f5d7:	and    eax,0x2
  40f5da:	add    eax,0x2b
  40f5dd:	mov    DWORD PTR [rbp-0x4f38],eax
  40f5e3:	mov    edx,eax
  40f5e5:	lea    rcx,[r12]
  40f5e9:	call   QWORD PTR [r12*1+0x0]
  40f5f1:	cmp    DWORD PTR [rbp-0x94],0x3
  40f5f8:	jge    40f60d <WriteDouble+0x316>
  40f5fa:	mov    rdx,0x30
  40f601:	lea    rcx,[r12]
  40f605:	call   QWORD PTR [r12*1+0x0]
  40f60d:	cmp    DWORD PTR [rbp-0x94],0x1
  40f614:	jne    40f629 <WriteDouble+0x332>
  40f616:	mov    rdx,0x30
  40f61d:	lea    rcx,[r12]
  40f621:	call   QWORD PTR [r12*1+0x0]
  40f629:	xor    ebx,ebx
  40f62b:	jmp    40f64f <WriteDouble+0x358>
  40f62d:	mov    eax,ebx
  40f62f:	add    eax,0x1
  40f632:	movsxd rax,eax
  40f635:	mov    rcx,QWORD PTR [rbp-0x90]
  40f63c:	movsx  edx,BYTE PTR [rcx+rax*1]
  40f640:	lea    rcx,[r12]
  40f644:	call   QWORD PTR [r12*1+0x0]
  40f64c:	add    ebx,0x1
  40f64f:	cmp    ebx,DWORD PTR [rbp-0x94]
  40f655:	jl     40f62d <WriteDouble+0x336>
  40f657:	test   r13d,0x8
  40f65e:	je     40f683 <WriteDouble+0x38c>
  40f660:	mov    ebx,DWORD PTR [rbp-0xec]
  40f666:	jmp    40f67e <WriteDouble+0x387>
  40f668:	mov    rdx,0x20
  40f66f:	lea    rcx,[r12]
  40f673:	call   QWORD PTR [r12*1+0x0]
  40f67b:	add    ebx,0x1
  40f67e:	cmp    ebx,DWORD PTR [rbp+0x28]
  40f681:	jl     40f668 <WriteDouble+0x371>
  40f683:	add    rsp,0x4f90
  40f68a:	add    rsp,0x8
  40f68e:	pop    r15
  40f690:	pop    r14
  40f692:	pop    r13
  40f694:	pop    r12
  40f696:	pop    rdi
  40f697:	pop    rsi
  40f698:	pop    rbx
  40f699:	leave  
  40f69a:	ret    
  40f69b:	push   rbp
  40f69c:	mov    rbp,rsp
  40f69f:	push   rbx
  40f6a0:	push   rsi
  40f6a1:	push   rdi
  40f6a2:	push   r12
  40f6a4:	push   r13
  40f6a6:	push   r14
  40f6a8:	push   r15
  40f6aa:	sub    rsp,0x8
  40f6ae:	sub    rsp,0xc0
  40f6b5:	mov    QWORD PTR [rbp+0x20],r8
  40f6b9:	mov    r14,rdx
  40f6bc:	mov    r15,rcx
  40f6bf:	xor    r13d,r13d
  40f6c2:	xor    r12d,r12d
  40f6c5:	jmp    40fa66 <WriteDouble+0x76f>
  40f6ca:	movsxd rax,r12d
  40f6cd:	mov    rcx,rax
  40f6d0:	imul   rcx,rcx,0x60
  40f6d4:	mov    rbx,rcx
  40f6d7:	add    rbx,QWORD PTR [rbp+0x20]
  40f6db:	movsxd rax,r13d
  40f6de:	cmp    BYTE PTR [r14+rax*1],0x25
  40f6e3:	jne    40fa4c <WriteDouble+0x755>
  40f6e9:	mov    eax,r13d
  40f6ec:	add    eax,0x1
  40f6ef:	movsxd rax,eax
  40f6f2:	cmp    BYTE PTR [r14+rax*1],0x25
  40f6f7:	jne    40f71c <WriteDouble+0x425>
  40f6f9:	mov    rdx,0x25
  40f700:	lea    rcx,[r15]
  40f703:	call   QWORD PTR [r15*1+0x0]
  40f70b:	add    r13d,0x2
  40f70f:	jmp    40fa66 <WriteDouble+0x76f>
  40f714:	add    r12d,0x1
  40f718:	lea    rbx,[rbx+0x60]
  40f71c:	cmp    DWORD PTR [rbx],0x7
  40f71f:	je     40f714 <WriteDouble+0x41d>
  40f721:	movsxd rax,r12d
  40f724:	mov    rcx,rax
  40f727:	imul   rcx,rcx,0x60
  40f72b:	mov    rbx,rcx
  40f72e:	add    rbx,QWORD PTR [rbp+0x20]
  40f732:	mov    eax,DWORD PTR [rbx+0x4]
  40f735:	mov    DWORD PTR [rbp-0x44],eax
  40f738:	mov    eax,DWORD PTR [rbx+0x8]
  40f73b:	mov    DWORD PTR [rbp-0x48],eax
  40f73e:	test   DWORD PTR [rbp-0x44],0x20000
  40f745:	je     40f75e <WriteDouble+0x467>
  40f747:	movsxd rax,DWORD PTR [rbp-0x48]
  40f74b:	mov    rcx,rax
  40f74e:	imul   rcx,rcx,0x60
  40f752:	mov    rax,QWORD PTR [rbp+0x20]
  40f756:	mov    rax,QWORD PTR [rcx+rax*1+0x20]
  40f75b:	mov    DWORD PTR [rbp-0x48],eax
  40f75e:	test   DWORD PTR [rbp-0x44],0x40000
  40f765:	je     40f78f <WriteDouble+0x498>
  40f767:	mov    eax,DWORD PTR [rbx+0xc]
  40f76a:	mov    DWORD PTR [rbp-0x50],eax
  40f76d:	test   DWORD PTR [rbp-0x44],0x80000
  40f774:	je     40f793 <WriteDouble+0x49c>
  40f776:	movsxd rax,DWORD PTR [rbp-0x50]
  40f77a:	mov    rcx,rax
  40f77d:	imul   rcx,rcx,0x60
  40f781:	mov    rax,QWORD PTR [rbp+0x20]
  40f785:	mov    rax,QWORD PTR [rcx+rax*1+0x20]
  40f78a:	mov    DWORD PTR [rbp-0x50],eax
  40f78d:	jmp    40f793 <WriteDouble+0x49c>
  40f78f:	or     DWORD PTR [rbp-0x50],0xffffffff
  40f793:	mov    eax,DWORD PTR [rbx+0x10]
  40f796:	mov    DWORD PTR [rbp-0x4c],eax
  40f799:	test   DWORD PTR [rbp-0x44],0x200000
  40f7a0:	je     40f7b9 <WriteDouble+0x4c2>
  40f7a2:	movsxd rax,DWORD PTR [rbp-0x4c]
  40f7a6:	mov    rcx,rax
  40f7a9:	imul   rcx,rcx,0x60
  40f7ad:	mov    rax,QWORD PTR [rbp+0x20]
  40f7b1:	mov    rax,QWORD PTR [rcx+rax*1+0x20]
  40f7b6:	mov    DWORD PTR [rbp-0x4c],eax
  40f7b9:	mov    eax,DWORD PTR [rbx]
  40f7bb:	cmp    eax,0x1
  40f7be:	jl     40fa42 <WriteDouble+0x74b>
  40f7c4:	cmp    eax,0x7
  40f7c7:	jg     40fa42 <WriteDouble+0x74b>
  40f7cd:	mov    eax,eax
  40f7cf:	sub    eax,0x1
  40f7d2:	movsxd rax,eax
  40f7d5:	jmp    QWORD PTR [rax*8+0x4152a0]
  40f7dc:	test   DWORD PTR [rbp-0x44],0x1000000
  40f7e3:	je     40f7f7 <WriteDouble+0x500>
  40f7e5:	mov    rdx,0x22
  40f7ec:	lea    rcx,[r15]
  40f7ef:	call   QWORD PTR [r15*1+0x0]
  40f7f7:	test   DWORD PTR [rbp-0x44],0x8
  40f7fe:	jne    40f81f <WriteDouble+0x528>
  40f800:	jmp    40f814 <WriteDouble+0x51d>
  40f802:	mov    rdx,0x20
  40f809:	lea    rcx,[r15]
  40f80c:	call   QWORD PTR [r15*1+0x0]
  40f814:	mov    eax,DWORD PTR [rbp-0x48]
  40f817:	sub    eax,0x1
  40f81a:	mov    DWORD PTR [rbp-0x48],eax
  40f81d:	jg     40f802 <WriteDouble+0x50b>
  40f81f:	mov    r8d,DWORD PTR [rbp-0x44]
  40f823:	mov    rdx,QWORD PTR [rbx+0x20]
  40f827:	lea    rcx,[r15]
  40f82a:	call   40dee5 <__Parse+0x94b>
  40f82f:	test   DWORD PTR [rbp-0x44],0x8
  40f836:	je     40f857 <WriteDouble+0x560>
  40f838:	jmp    40f84c <WriteDouble+0x555>
  40f83a:	mov    rdx,0x20
  40f841:	lea    rcx,[r15]
  40f844:	call   QWORD PTR [r15*1+0x0]
  40f84c:	mov    eax,DWORD PTR [rbp-0x48]
  40f84f:	sub    eax,0x1
  40f852:	mov    DWORD PTR [rbp-0x48],eax
  40f855:	jg     40f83a <WriteDouble+0x543>
  40f857:	test   DWORD PTR [rbp-0x44],0x1000000
  40f85e:	je     40fa42 <WriteDouble+0x74b>
  40f864:	mov    rdx,0x22
  40f86b:	lea    rcx,[r15]
  40f86e:	call   QWORD PTR [r15*1+0x0]
  40f876:	jmp    40fa42 <WriteDouble+0x74b>
  40f87b:	cmp    DWORD PTR [rbp-0x4c],0xffffffff
  40f87f:	jne    40f888 <WriteDouble+0x591>
  40f881:	mov    DWORD PTR [rbp-0x4c],0xa
  40f888:	mov    esi,DWORD PTR [rbp-0x4c]
  40f88b:	mov    DWORD PTR [rsp+0x28],esi
  40f88f:	mov    esi,DWORD PTR [rbp-0x50]
  40f892:	mov    DWORD PTR [rsp+0x20],esi
  40f896:	mov    r9d,DWORD PTR [rbp-0x48]
  40f89a:	mov    r8d,DWORD PTR [rbp-0x44]
  40f89e:	mov    rdx,QWORD PTR [rbx+0x20]
  40f8a2:	lea    rcx,[r15]
  40f8a5:	call   40d9a5 <__Parse+0x40b>
  40f8aa:	jmp    40fa42 <WriteDouble+0x74b>
  40f8af:	test   DWORD PTR [rbp-0x44],0x100
  40f8b6:	je     40f8f3 <WriteDouble+0x5fc>
  40f8b8:	mov    DWORD PTR [rsp+0x68],0x0
  40f8c0:	mov    esi,DWORD PTR [rbp-0x50]
  40f8c3:	mov    DWORD PTR [rsp+0x60],esi
  40f8c7:	mov    r9d,DWORD PTR [rbp-0x48]
  40f8cb:	mov    r8d,DWORD PTR [rbp-0x44]
  40f8cf:	lea    rsi,[rbx+0x20]
  40f8d3:	lea    rdi,[rsp+0x20]
  40f8d8:	mov    rcx,0x40
  40f8df:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40f8e1:	lea    rdx,[rsp+0x20]
  40f8e6:	lea    rcx,[r15]
  40f8e9:	call   40e177 <__Parse+0xbdd>
  40f8ee:	jmp    40fa42 <WriteDouble+0x74b>
  40f8f3:	mov    esi,DWORD PTR [rbp-0x4c]
  40f8f6:	mov    DWORD PTR [rsp+0x38],esi
  40f8fa:	mov    esi,DWORD PTR [rbp-0x50]
  40f8fd:	mov    DWORD PTR [rsp+0x30],esi
  40f901:	mov    r9d,DWORD PTR [rbp-0x48]
  40f905:	mov    r8d,DWORD PTR [rbp-0x44]
  40f909:	fld    TBYTE PTR [rbx+0x20]
  40f90c:	fstp   TBYTE PTR [rsp+0x20]
  40f910:	lea    rcx,[r15]
  40f913:	call   40e2f7 <.L459+0xa1>
  40f918:	jmp    40fa42 <WriteDouble+0x74b>
  40f91d:	mov    DWORD PTR [rsp+0x28],0x0
  40f925:	mov    esi,DWORD PTR [rbp-0x50]
  40f928:	mov    DWORD PTR [rsp+0x20],esi
  40f92c:	mov    r9d,DWORD PTR [rbp-0x48]
  40f930:	mov    r8d,DWORD PTR [rbp-0x44]
  40f934:	mov    rdx,QWORD PTR [rbx+0x20]
  40f938:	lea    rcx,[r15]
  40f93b:	call   40e003 <__Parse+0xa69>
  40f940:	jmp    40fa42 <WriteDouble+0x74b>
  40f945:	mov    QWORD PTR [rbp-0x70],r15
  40f949:	movsxd rax,r12d
  40f94c:	mov    rcx,rax
  40f94f:	imul   rcx,rcx,0x60
  40f953:	mov    rax,rcx
  40f956:	add    rax,QWORD PTR [rbp+0x20]
  40f95a:	mov    QWORD PTR [rbp-0x68],rax
  40f95e:	mov    rdx,QWORD PTR [rbx+0x20]
  40f962:	lea    rcx,[rbp-0x70]
  40f966:	call   40feeb <WriteDouble+0xbf4>
  40f96b:	jmp    40fa42 <WriteDouble+0x74b>
  40f970:	test   DWORD PTR [r15+0x30],0x1
  40f978:	je     40f984 <WriteDouble+0x68d>
  40f97a:	mov    eax,0x81000000
  40f97f:	jmp    40fa78 <WriteDouble+0x781>
  40f984:	mov    rax,QWORD PTR [rbx+0x20]
  40f988:	mov    QWORD PTR [rbp-0x58],rax
  40f98c:	mov    rax,0x0
  40f993:	cmp    rax,QWORD PTR [rbp-0x58]
  40f997:	je     40fa42 <WriteDouble+0x74b>
  40f99d:	test   DWORD PTR [rbp-0x44],0x400
  40f9a4:	je     40f9b6 <WriteDouble+0x6bf>
  40f9a6:	mov    rax,QWORD PTR [rbp-0x58]
  40f9aa:	movsxd rcx,DWORD PTR [r15+0x20]
  40f9ae:	mov    QWORD PTR [rax],rcx
  40f9b1:	jmp    40fa42 <WriteDouble+0x74b>
  40f9b6:	test   DWORD PTR [rbp-0x44],0x800
  40f9bd:	je     40f9cc <WriteDouble+0x6d5>
  40f9bf:	mov    rax,QWORD PTR [rbp-0x58]
  40f9c3:	movsxd rcx,DWORD PTR [r15+0x20]
  40f9c7:	mov    QWORD PTR [rax],rcx
  40f9ca:	jmp    40fa42 <WriteDouble+0x74b>
  40f9cc:	test   DWORD PTR [rbp-0x44],0x1000
  40f9d3:	je     40f9e2 <WriteDouble+0x6eb>
  40f9d5:	mov    rax,QWORD PTR [rbp-0x58]
  40f9d9:	movsxd rcx,DWORD PTR [r15+0x20]
  40f9dd:	mov    QWORD PTR [rax],rcx
  40f9e0:	jmp    40fa42 <WriteDouble+0x74b>
  40f9e2:	test   DWORD PTR [rbp-0x44],0x100
  40f9e9:	je     40f9f8 <WriteDouble+0x701>
  40f9eb:	mov    rax,QWORD PTR [rbp-0x58]
  40f9ef:	movsxd rcx,DWORD PTR [r15+0x20]
  40f9f3:	mov    QWORD PTR [rax],rcx
  40f9f6:	jmp    40fa42 <WriteDouble+0x74b>
  40f9f8:	test   DWORD PTR [rbp-0x44],0x80
  40f9ff:	je     40fa0d <WriteDouble+0x716>
  40fa01:	mov    rax,QWORD PTR [rbp-0x58]
  40fa05:	mov    ecx,DWORD PTR [r15+0x20]
  40fa09:	mov    DWORD PTR [rax],ecx
  40fa0b:	jmp    40fa42 <WriteDouble+0x74b>
  40fa0d:	test   DWORD PTR [rbp-0x44],0x40
  40fa14:	je     40fa22 <WriteDouble+0x72b>
  40fa16:	mov    rax,QWORD PTR [rbp-0x58]
  40fa1a:	mov    ecx,DWORD PTR [r15+0x20]
  40fa1e:	mov    BYTE PTR [rax],cl
  40fa20:	jmp    40fa42 <WriteDouble+0x74b>
  40fa22:	test   DWORD PTR [rbp-0x44],0x20
  40fa29:	je     40fa38 <WriteDouble+0x741>
  40fa2b:	mov    rax,QWORD PTR [rbp-0x58]
  40fa2f:	mov    ecx,DWORD PTR [r15+0x20]
  40fa33:	mov    WORD PTR [rax],cx
  40fa36:	jmp    40fa42 <WriteDouble+0x74b>
  40fa38:	mov    rax,QWORD PTR [rbp-0x58]
  40fa3c:	mov    ecx,DWORD PTR [r15+0x20]
  40fa40:	mov    DWORD PTR [rax],ecx
  40fa42:	mov    r13d,DWORD PTR [rbx+0x18]
  40fa46:	add    r12d,0x1
  40fa4a:	jmp    40fa66 <WriteDouble+0x76f>
  40fa4c:	mov    eax,r13d
  40fa4f:	add    r13d,0x1
  40fa53:	movsxd rax,eax
  40fa56:	movzx  edx,BYTE PTR [r14+rax*1]
  40fa5b:	lea    rcx,[r15]
  40fa5e:	call   QWORD PTR [r15*1+0x0]
  40fa66:	movsxd rax,r13d
  40fa69:	cmp    BYTE PTR [r14+rax*1],0x0
  40fa6e:	jne    40f6ca <WriteDouble+0x3d3>
  40fa74:	mov    eax,DWORD PTR [r15+0x1c]
  40fa78:	add    rsp,0xc0
  40fa7f:	add    rsp,0x8
  40fa83:	pop    r15
  40fa85:	pop    r14
  40fa87:	pop    r13
  40fa89:	pop    r12
  40fa8b:	pop    rdi
  40fa8c:	pop    rsi
  40fa8d:	pop    rbx
  40fa8e:	leave  
  40fa8f:	ret    
  40fa90:	push   rbp
  40fa91:	mov    rbp,rsp
  40fa94:	push   rbx
  40fa95:	push   rsi
  40fa96:	mov    eax,0x18a0
  40fa9b:	call   40adb0 <_setlocale+0x8a4>
  40faa0:	mov    QWORD PTR [rbp+0x28],r9
  40faa4:	mov    QWORD PTR [rbp+0x20],r8
  40faa8:	mov    QWORD PTR [rbp+0x18],rdx
  40faac:	mov    QWORD PTR [rbp+0x10],rcx
  40fab0:	mov    r8,0x38
  40fab7:	xor    edx,edx
  40fab9:	lea    rcx,[rbp-0x48]
  40fabd:	call   405860 <fclose+0x4a>
  40fac2:	mov    rax,QWORD PTR [rbp+0x20]
  40fac6:	mov    QWORD PTR [rbp-0x48],rax
  40faca:	mov    rax,QWORD PTR [rbp+0x10]
  40face:	mov    QWORD PTR [rbp-0x38],rax
  40fad2:	mov    rax,QWORD PTR [rbp+0x18]
  40fad6:	mov    DWORD PTR [rbp-0x24],eax
  40fad9:	mov    DWORD PTR [rbp-0x20],0x0
  40fae0:	mov    eax,DWORD PTR [rbp+0x40]
  40fae3:	mov    DWORD PTR [rbp-0x18],eax
  40fae6:	cmp    QWORD PTR ds:0x414f40,0x0
  40faef:	jne    40faf6 <WriteDouble+0x7ff>
  40faf1:	call   40c3c0 <strtoul+0x15>
  40faf6:	mov    DWORD PTR [rsp+0x28],0x0
  40fafe:	mov    rsi,QWORD PTR [rbp+0x38]
  40fb02:	mov    QWORD PTR [rsp+0x20],rsi
  40fb07:	mov    r9,QWORD PTR [rbp+0x30]
  40fb0b:	lea    r8,[rbp-0x1850]
  40fb12:	mov    rdx,QWORD PTR [rbp+0x28]
  40fb16:	mov    rcx,0x1
  40fb1d:	call   40c59a <tmpnam+0x9a>
  40fb22:	mov    DWORD PTR [rbp-0x1854],eax
  40fb28:	mov    ebx,eax
  40fb2a:	or     ebx,ebx
  40fb2c:	jge    40fb32 <WriteDouble+0x83b>
  40fb2e:	mov    eax,ebx
  40fb30:	jmp    40fb59 <WriteDouble+0x862>
  40fb32:	lea    r8,[rbp-0x1850]
  40fb39:	mov    rdx,QWORD PTR [rbp+0x28]
  40fb3d:	lea    rcx,[rbp-0x48]
  40fb41:	call   40f69b <WriteDouble+0x3a4>
  40fb46:	mov    DWORD PTR [rbp-0x1858],eax
  40fb4c:	mov    ebx,eax
  40fb4e:	or     DWORD PTR [rbp-0x20],0x0
  40fb52:	je     40fb57 <WriteDouble+0x860>
  40fb54:	mov    ebx,DWORD PTR [rbp-0x20]
  40fb57:	mov    eax,ebx
  40fb59:	add    rsp,0x18a0
  40fb60:	pop    rsi
  40fb61:	pop    rbx
  40fb62:	leave  
  40fb63:	ret    
  40fb64:	push   rbp
  40fb65:	mov    rbp,rsp
  40fb68:	push   rbx
  40fb69:	push   rsi
  40fb6a:	sub    rsp,0x60
  40fb6e:	mov    QWORD PTR [rbp+0x28],r9
  40fb72:	mov    rbx,r8
  40fb75:	mov    QWORD PTR [rbp+0x18],rdx
  40fb79:	mov    QWORD PTR [rbp+0x10],rcx
  40fb7d:	mov    DWORD PTR [rsp+0x38],0x0
  40fb85:	mov    DWORD PTR [rsp+0x30],0x0
  40fb8d:	mov    rsi,QWORD PTR [rbp+0x38]
  40fb91:	mov    QWORD PTR [rsp+0x28],rsi
  40fb96:	mov    rsi,QWORD PTR [rbp+0x30]
  40fb9a:	mov    QWORD PTR [rsp+0x20],rsi
  40fb9f:	mov    r9,QWORD PTR [rbp+0x28]
  40fba3:	lea    r8,[rbx]
  40fba6:	mov    rdx,QWORD PTR [rbp+0x18]
  40fbaa:	mov    rcx,QWORD PTR [rbp+0x10]
  40fbae:	call   40fa90 <WriteDouble+0x799>
  40fbb3:	add    rsp,0x60
  40fbb7:	pop    rsi
  40fbb8:	pop    rbx
  40fbb9:	leave  
  40fbba:	ret    
  40fbbb:	push   rbp
  40fbbc:	mov    rbp,rsp
  40fbbf:	push   rbx
  40fbc0:	push   rsi
  40fbc1:	sub    rsp,0x60
  40fbc5:	mov    QWORD PTR [rbp+0x28],r9
  40fbc9:	mov    rbx,r8
  40fbcc:	mov    QWORD PTR [rbp+0x18],rdx
  40fbd0:	mov    QWORD PTR [rbp+0x10],rcx
  40fbd4:	mov    DWORD PTR [rsp+0x38],0x0
  40fbdc:	mov    DWORD PTR [rsp+0x30],0x1
  40fbe4:	mov    rsi,QWORD PTR [rbp+0x38]
  40fbe8:	mov    QWORD PTR [rsp+0x28],rsi
  40fbed:	mov    rsi,QWORD PTR [rbp+0x30]
  40fbf1:	mov    QWORD PTR [rsp+0x20],rsi
  40fbf6:	mov    r9,QWORD PTR [rbp+0x28]
  40fbfa:	lea    r8,[rbx]
  40fbfd:	mov    rdx,QWORD PTR [rbp+0x18]
  40fc01:	mov    rcx,QWORD PTR [rbp+0x10]
  40fc05:	call   40fa90 <WriteDouble+0x799>
  40fc0a:	add    rsp,0x60
  40fc0e:	pop    rsi
  40fc0f:	pop    rbx
  40fc10:	leave  
  40fc11:	ret    
  40fc12:	push   rbp
  40fc13:	mov    rbp,rsp
  40fc16:	push   rbx
  40fc17:	sub    rsp,0x8
  40fc1b:	sub    rsp,0x40
  40fc1f:	mov    QWORD PTR [rbp+0x18],rdx
  40fc23:	mov    rbx,rcx
  40fc26:	mov    rax,QWORD PTR [rbx+0x10]
  40fc2a:	mov    QWORD PTR [rbp-0x18],rax
  40fc2e:	inc    DWORD PTR [rbx+0x1c]
  40fc31:	mov    rdx,QWORD PTR [rbp-0x18]
  40fc35:	mov    ecx,DWORD PTR [rbp+0x18]
  40fc38:	call   404d50 <_cinit+0x190>
  40fc3d:	mov    DWORD PTR [rbp-0x1c],eax
  40fc40:	cmp    eax,0xffffffff
  40fc43:	jne    40fc4b <WriteDouble+0x954>
  40fc45:	or     DWORD PTR [rbx+0x28],0xffffffff
  40fc49:	jmp    40fc4e <WriteDouble+0x957>
  40fc4b:	inc    DWORD PTR [rbx+0x20]
  40fc4e:	add    rsp,0x40
  40fc52:	add    rsp,0x8
  40fc56:	pop    rbx
  40fc57:	leave  
  40fc58:	ret    
  40fc59:	lea    rsp,[rbp-0x60]
  40fc5d:	push   rbp
  40fc5e:	mov    rbp,rsp
  40fc61:	push   rbx
  40fc62:	sub    rsp,0x8
  40fc66:	sub    rsp,0xe0
  40fc6d:	mov    QWORD PTR [rbp-0x84],rcx
  40fc74:	mov    QWORD PTR [rbp-0x7c],rdx
  40fc78:	mov    QWORD PTR [rbp-0x74],r8
  40fc7c:	mov    QWORD PTR [rbp-0x6c],r9
  40fc80:	movq   QWORD PTR [rbp-0x64],xmm0
  40fc85:	movq   QWORD PTR [rbp-0x5c],xmm1
  40fc8a:	movq   QWORD PTR [rbp-0x54],xmm2
  40fc8f:	movq   QWORD PTR [rbp-0x4c],xmm3
  40fc94:	lea    rdx,[rbp-0x84]
  40fc9b:	lea    rcx,[rbp-0x20]
  40fc9f:	lea    rax,[rbp-0x44]
  40fca3:	mov    QWORD PTR [rcx],rax
  40fca6:	lea    rcx,[rbp-0x84]
  40fcad:	mov    QWORD PTR [rax+0x18],rcx
  40fcb1:	mov    QWORD PTR [rax],0x8
  40fcb8:	mov    QWORD PTR [rax+0x8],0x28
  40fcc0:	lea    rcx,[rbp+0x30]
  40fcc4:	mov    QWORD PTR [rax+0x10],rcx
  40fcc8:	mov    QWORD PTR [rsp+0x28],0x0
  40fcd1:	mov    rbx,QWORD PTR [rbp-0x20]
  40fcd5:	mov    QWORD PTR [rsp+0x20],rbx
  40fcda:	mov    r9,QWORD PTR [rbp-0x84]
  40fce1:	lea    r8,ds:0x40fc12
  40fce9:	xor    edx,edx
  40fceb:	mov    rcx,QWORD PTR ds:0x414ca8
  40fcf3:	call   40fb64 <WriteDouble+0x86d>
  40fcf8:	mov    DWORD PTR [rbp-0x24],eax
  40fcfb:	mov    eax,DWORD PTR [rbp-0x24]
  40fcfe:	mov    DWORD PTR [rbp-0x14],eax
  40fd01:	mov    eax,DWORD PTR [rbp-0x14]
  40fd04:	lea    rsp,[rbp-0xf0]
  40fd0b:	add    rsp,0xe0
  40fd12:	add    rsp,0x8
  40fd16:	pop    rbx
  40fd17:	leave  
  40fd18:	ret    
  40fd19:	push   rbp
  40fd1a:	mov    rbp,rsp
  40fd1d:	push   rbx
  40fd1e:	push   rsi
  40fd1f:	sub    rsp,0x50
  40fd23:	mov    QWORD PTR [rbp+0x18],rdx
  40fd27:	mov    rbx,rcx
  40fd2a:	mov    QWORD PTR [rsp+0x28],0x0
  40fd33:	mov    rsi,rdx
  40fd36:	mov    QWORD PTR [rsp+0x20],rsi
  40fd3b:	lea    r9,[rbx]
  40fd3e:	lea    r8,ds:0x40fc12
  40fd46:	xor    edx,edx
  40fd48:	mov    rcx,QWORD PTR ds:0x414ca8
  40fd50:	call   40fb64 <WriteDouble+0x86d>
  40fd55:	add    rsp,0x50
  40fd59:	pop    rsi
  40fd5a:	pop    rbx
  40fd5b:	leave  
  40fd5c:	ret    
  40fd5d:	push   rbp
  40fd5e:	mov    rbp,rsp
  40fd61:	push   rbx
  40fd62:	push   rsi
  40fd63:	sub    rsp,0x50
  40fd67:	mov    QWORD PTR [rbp+0x18],rdx
  40fd6b:	mov    QWORD PTR [rbp+0x10],rcx
  40fd6f:	mov    rbx,0x0
  40fd76:	mov    rsi,rdx
  40fd79:	mov    QWORD PTR [rsp+0x28],rsi
  40fd7e:	mov    QWORD PTR [rsp+0x20],rbx
  40fd83:	mov    r9,QWORD PTR [rbp+0x10]
  40fd87:	lea    r8,ds:0x40fc12
  40fd8f:	xor    edx,edx
  40fd91:	mov    rcx,QWORD PTR ds:0x414ca8
  40fd99:	call   40fb64 <WriteDouble+0x86d>
  40fd9e:	add    rsp,0x50
  40fda2:	pop    rsi
  40fda3:	pop    rbx
  40fda4:	leave  
  40fda5:	ret    
  40fda6:	lea    rsp,[rbp-0x60]
  40fdaa:	push   rbp
  40fdab:	mov    rbp,rsp
  40fdae:	push   rbx
  40fdaf:	sub    rsp,0x8
  40fdb3:	sub    rsp,0xe0
  40fdba:	mov    QWORD PTR [rbp-0x84],rcx
  40fdc1:	mov    QWORD PTR [rbp-0x7c],rdx
  40fdc5:	mov    QWORD PTR [rbp-0x74],r8
  40fdc9:	mov    QWORD PTR [rbp-0x6c],r9
  40fdcd:	movq   QWORD PTR [rbp-0x64],xmm0
  40fdd2:	movq   QWORD PTR [rbp-0x5c],xmm1
  40fdd7:	movq   QWORD PTR [rbp-0x54],xmm2
  40fddc:	movq   QWORD PTR [rbp-0x4c],xmm3
  40fde1:	lea    rdx,[rbp-0x7c]
  40fde5:	lea    rcx,[rbp-0x20]
  40fde9:	lea    rax,[rbp-0x44]
  40fded:	mov    QWORD PTR [rcx],rax
  40fdf0:	lea    rcx,[rbp-0x84]
  40fdf7:	mov    QWORD PTR [rax+0x18],rcx
  40fdfb:	mov    QWORD PTR [rax],0x10
  40fe02:	mov    QWORD PTR [rax+0x8],0x30
  40fe0a:	lea    rcx,[rbp+0x30]
  40fe0e:	mov    QWORD PTR [rax+0x10],rcx
  40fe12:	mov    QWORD PTR [rsp+0x28],0x0
  40fe1b:	mov    rbx,QWORD PTR [rbp-0x20]
  40fe1f:	mov    QWORD PTR [rsp+0x20],rbx
  40fe24:	mov    r9,QWORD PTR [rbp-0x7c]
  40fe28:	lea    r8,ds:0x40fc12
  40fe30:	xor    edx,edx
  40fe32:	mov    rcx,QWORD PTR [rbp-0x84]
  40fe39:	call   40fb64 <WriteDouble+0x86d>
  40fe3e:	mov    DWORD PTR [rbp-0x24],eax
  40fe41:	mov    eax,DWORD PTR [rbp-0x24]
  40fe44:	mov    DWORD PTR [rbp-0x14],eax
  40fe47:	mov    eax,DWORD PTR [rbp-0x14]
  40fe4a:	lea    rsp,[rbp-0xf0]
  40fe51:	add    rsp,0xe0
  40fe58:	add    rsp,0x8
  40fe5c:	pop    rbx
  40fe5d:	leave  
  40fe5e:	ret    
  40fe5f:	push   rbp
  40fe60:	mov    rbp,rsp
  40fe63:	push   rbx
  40fe64:	push   rsi
  40fe65:	sub    rsp,0x50
  40fe69:	mov    QWORD PTR [rbp+0x20],r8
  40fe6d:	mov    rbx,rdx
  40fe70:	mov    QWORD PTR [rbp+0x10],rcx
  40fe74:	mov    QWORD PTR [rsp+0x28],0x0
  40fe7d:	mov    rsi,r8
  40fe80:	mov    QWORD PTR [rsp+0x20],rsi
  40fe85:	lea    r9,[rbx]
  40fe88:	lea    r8,ds:0x40fc12
  40fe90:	xor    edx,edx
  40fe92:	mov    rcx,QWORD PTR [rbp+0x10]
  40fe96:	call   40fb64 <WriteDouble+0x86d>
  40fe9b:	add    rsp,0x50
  40fe9f:	pop    rsi
  40fea0:	pop    rbx
  40fea1:	leave  
  40fea2:	ret    
  40fea3:	push   rbp
  40fea4:	mov    rbp,rsp
  40fea7:	push   rbx
  40fea8:	push   rsi
  40fea9:	sub    rsp,0x50
  40fead:	mov    QWORD PTR [rbp+0x20],r8
  40feb1:	mov    QWORD PTR [rbp+0x18],rdx
  40feb5:	mov    QWORD PTR [rbp+0x10],rcx
  40feb9:	mov    rbx,0x0
  40fec0:	mov    rsi,r8
  40fec3:	mov    QWORD PTR [rsp+0x28],rsi
  40fec8:	mov    QWORD PTR [rsp+0x20],rbx
  40fecd:	mov    r9,rdx
  40fed0:	lea    r8,ds:0x40fc12
  40fed8:	xor    edx,edx
  40feda:	mov    rcx,QWORD PTR [rbp+0x10]
  40fede:	call   40fb64 <WriteDouble+0x86d>
  40fee3:	add    rsp,0x50
  40fee7:	pop    rsi
  40fee8:	pop    rbx
  40fee9:	leave  
  40feea:	ret    
  40feeb:	push   rbp
  40feec:	mov    rbp,rsp
  40feef:	push   rbx
  40fef0:	push   rsi
  40fef1:	push   rdi
  40fef2:	sub    rsp,0x8
  40fef6:	sub    rsp,0x60
  40fefa:	mov    QWORD PTR [rbp+0x18],rdx
  40fefe:	mov    QWORD PTR [rbp+0x10],rcx
  40ff02:	cmp    QWORD PTR [rbp+0x18],0x0
  40ff07:	jne    40ff3a <WriteDouble+0xc43>
  40ff09:	mov    DWORD PTR [rsp+0x28],0x0
  40ff11:	or     DWORD PTR [rsp+0x20],0xffffffff
  40ff16:	mov    r9,0x12
  40ff1d:	mov    rsi,QWORD PTR [rbp+0x10]
  40ff21:	mov    rdi,QWORD PTR [rsi+0x8]
  40ff25:	mov    r8d,DWORD PTR [rdi+0x4]
  40ff29:	mov    rdx,0x0
  40ff30:	mov    rcx,QWORD PTR [rsi]
  40ff33:	call   40e003 <__Parse+0xa69>
  40ff38:	jmp    40ff7a <WriteDouble+0xc83>
  40ff3a:	mov    rax,QWORD PTR [rbp+0x18]
  40ff3e:	mov    QWORD PTR [rbp-0x28],rax
  40ff42:	mov    rax,QWORD PTR [rbp+0x10]
  40ff46:	mov    rax,QWORD PTR [rax+0x8]
  40ff4a:	mov    ebx,DWORD PTR [rax+0x4]
  40ff4d:	or     ebx,0x6010
  40ff53:	mov    DWORD PTR [rsp+0x28],0x10
  40ff5b:	or     DWORD PTR [rsp+0x20],0xffffffff
  40ff60:	mov    r9,0x12
  40ff67:	mov    r8d,ebx
  40ff6a:	mov    rdx,QWORD PTR [rbp-0x28]
  40ff6e:	mov    rax,QWORD PTR [rbp+0x10]
  40ff72:	mov    rcx,QWORD PTR [rax]
  40ff75:	call   40d9a5 <__Parse+0x40b>
  40ff7a:	add    rsp,0x60
  40ff7e:	add    rsp,0x8
  40ff82:	pop    rdi
  40ff83:	pop    rsi
  40ff84:	pop    rbx
  40ff85:	leave  
  40ff86:	ret    
  40ff87:	push   rbp
  40ff88:	mov    rbp,rsp
  40ff8b:	push   rbx
  40ff8c:	push   rsi
  40ff8d:	sub    rsp,0x40
  40ff91:	mov    QWORD PTR [rbp+0x20],r8
  40ff95:	mov    QWORD PTR [rbp+0x18],rdx
  40ff99:	mov    eax,r8d
  40ff9c:	or     eax,eax
  40ff9e:	jne    40ffe4 <WriteDouble+0xced>
  40ffa0:	fld    TBYTE PTR [rbp+0x30]
  40ffa3:	fstp   TBYTE PTR [rsp+0x20]
  40ffa7:	call   404cff <_cinit+0x13f>
  40ffac:	mov    DWORD PTR [rbp-0x18],eax
  40ffaf:	mov    DWORD PTR [rbp-0x14],eax
  40ffb2:	fld    TBYTE PTR [rbp+0x30]
  40ffb5:	fld    TBYTE PTR ds:0x415378
  40ffbc:	fucomip st,st(1)
  40ffbe:	fstp   st(0)
  40ffc0:	jp     40ffc4 <WriteDouble+0xccd>
  40ffc2:	ja     40ffc6 <WriteDouble+0xccf>
  40ffc4:	jmp    40ffcd <WriteDouble+0xcd6>
  40ffc6:	mov    esi,0x1
  40ffcb:	jmp    40ffcf <WriteDouble+0xcd8>
  40ffcd:	xor    esi,esi
  40ffcf:	mov    rax,QWORD PTR [rbp+0x18]
  40ffd3:	or     esi,esi
  40ffd5:	mov    ecx,0x0
  40ffda:	setne  cl
  40ffdd:	mov    BYTE PTR [rax],cl
  40ffdf:	mov    eax,DWORD PTR [rbp-0x14]
  40ffe2:	jmp    410049 <WriteDouble+0xd52>
  40ffe4:	lea    rbx,[rbp+0x30]
  40ffe8:	mov    eax,DWORD PTR [rbx+0x8]
  40ffeb:	shl    eax,0x11
  40ffee:	shr    eax,0x11
  40fff1:	cmp    eax,0x7fff
  40fff6:	jne    41002e <WriteDouble+0xd37>
  40fff8:	mov    eax,DWORD PTR [rbx]
  40fffa:	mov    ecx,DWORD PTR [rbx+0x4]
  40fffd:	movsxd rcx,ecx
  410000:	lea    rcx,[rcx*2+0x0]
  410008:	shr    ecx,1
  41000a:	or     eax,ecx
  41000c:	or     eax,eax
  41000e:	je     410017 <WriteDouble+0xd20>
  410010:	mov    eax,0x1
  410015:	jmp    410049 <WriteDouble+0xd52>
  410017:	test   DWORD PTR [rbx+0x8],0x8000
  41001e:	je     410027 <WriteDouble+0xd30>
  410020:	mov    eax,0x7
  410025:	jmp    410049 <WriteDouble+0xd52>
  410027:	mov    eax,0x5
  41002c:	jmp    410049 <WriteDouble+0xd52>
  41002e:	mov    rax,QWORD PTR [rbp+0x18]
  410032:	mov    ecx,DWORD PTR [rbx+0x8]
  410035:	shl    ecx,0x10
  410038:	shr    ecx,0x1f
  41003b:	or     ecx,ecx
  41003d:	mov    ecx,0x0
  410042:	setne  cl
  410045:	mov    BYTE PTR [rax],cl
  410047:	xor    eax,eax
  410049:	add    rsp,0x40
  41004d:	pop    rsi
  41004e:	pop    rbx
  41004f:	leave  
  410050:	ret    
  410051:	nop
  410052:	nop
  410053:	nop

Disassembly of section .rdata:

0000000000412000 <.rdata>:
  412000:	add    BYTE PTR [rax],al
  412002:	add    BYTE PTR [rax],al
  412004:	mov    dh,dh
  412006:	xor    al,0x50
  412008:	add    BYTE PTR [rax],al
  41200a:	add    BYTE PTR [rax],al
  41200c:	add    DWORD PTR [rax],eax
  41200e:	add    BYTE PTR [rax],al
  412010:	(bad)  
  412011:	mov    esi,0x0
  412016:	add    BYTE PTR [rax],al
  412018:	add    BYTE PTR [rcx+rax*1],bl
  41201b:	add    BYTE PTR [rax],al
  41201d:	add    BYTE PTR [rax],al
  41201f:	add    BYTE PTR [rax+0x5034f6],cl
  412025:	add    BYTE PTR [rax],al
  412027:	add    BYTE PTR [rax+rax*1],al
  41202a:	add    BYTE PTR [rax],al
  41202c:	sbb    al,0x0
  41202e:	add    BYTE PTR [rax],al
  412030:	add    BYTE PTR [rax],al
  412032:	add    BYTE PTR [rax],al
  412034:	jl     411fe6 <fpclassify_and_signbit+0x105f>
  412036:	add    DWORD PTR [rax],eax
  412038:	add    BYTE PTR [rax],al
  41203a:	add    BYTE PTR [rax],al
  41203c:	mov    dh,dh
  41203e:	xor    al,0x50
  412040:	add    BYTE PTR [rax],al
  412042:	add    BYTE PTR [rax],al
  412044:	add    al,BYTE PTR [rax]
  412046:	add    BYTE PTR [rax],al
  412048:	push   0x38
  41204a:	add    BYTE PTR [rax],al
  41204c:	add    BYTE PTR [rax],al
  41204e:	add    BYTE PTR [rax],al
  412050:	cwde   
  412051:	mov    al,0x1
	...
  412073:	add    BYTE PTR [rax],0x0
  412076:	add    BYTE PTR [rax],al
  412078:	add    BYTE PTR [rax],al
  41207a:	.byte 0x0
  41207b:	.byte 0x80
