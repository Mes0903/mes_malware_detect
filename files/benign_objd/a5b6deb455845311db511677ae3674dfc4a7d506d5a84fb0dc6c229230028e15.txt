
a5b6deb455845311db511677ae3674dfc4a7d506d5a84fb0dc6c229230028e15.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	mov    esp,0x15e
 1001005:	add    BYTE PTR [rax],al
 1001007:	add    ah,cl
 1001009:	pop    rsi
 100100a:	add    DWORD PTR [rax],eax
 100100c:	add    BYTE PTR [rax],al
 100100e:	add    BYTE PTR [rax],al
 1001010:	test   al,0x5e
 1001012:	add    DWORD PTR [rax],eax
	...
 1001020:	call   0x1001183
 1001025:	add    BYTE PTR [rax],al
 1001027:	add    dh,dh
 1001029:	pop    rsi
 100102a:	add    DWORD PTR [rax],eax
 100102c:	add    BYTE PTR [rax],al
 100102e:	add    BYTE PTR [rax],al
 1001030:	or     BYTE PTR [rdi+0x1],bl
 1001033:	add    BYTE PTR [rax],al
 1001035:	add    BYTE PTR [rax],al
 1001037:	add    BYTE PTR [rdx],bl
 1001039:	pop    rdi
 100103a:	add    DWORD PTR [rax],eax
 100103c:	add    BYTE PTR [rax],al
 100103e:	add    BYTE PTR [rax],al
 1001040:	and    al,0x5f
 1001042:	add    DWORD PTR [rax],eax
 1001044:	add    BYTE PTR [rax],al
 1001046:	add    BYTE PTR [rax],al
 1001048:	cmp    bl,BYTE PTR [rdi+0x1]
 100104b:	add    BYTE PTR [rax],al
 100104d:	add    BYTE PTR [rax],al
 100104f:	add    BYTE PTR [rdx+0x5f],cl
 1001052:	add    DWORD PTR [rax],eax
 1001054:	add    BYTE PTR [rax],al
 1001056:	add    BYTE PTR [rax],al
 1001058:	pop    rdx
 1001059:	pop    rdi
 100105a:	add    DWORD PTR [rax],eax
 100105c:	add    BYTE PTR [rax],al
 100105e:	add    BYTE PTR [rax],al
 1001060:	push   0x15f
 1001065:	add    BYTE PTR [rax],al
 1001067:	add    BYTE PTR [rsi+0x5f],dh
 100106a:	add    DWORD PTR [rax],eax
 100106c:	add    BYTE PTR [rax],al
 100106e:	add    BYTE PTR [rax],al
 1001070:	mov    bl,BYTE PTR [rdi+0x1]
 1001073:	add    BYTE PTR [rax],al
 1001075:	add    BYTE PTR [rax],al
 1001077:	add    BYTE PTR [rax+0x15f],bl
 100107d:	add    BYTE PTR [rax],al
 100107f:	add    BYTE PTR [rax+0x15f],ch
 1001085:	add    BYTE PTR [rax],al
 1001087:	add    BYTE PTR [rax+0x15f],bh
 100108d:	add    BYTE PTR [rax],al
 100108f:	add    dh,al
 1001091:	pop    rdi
 1001092:	add    DWORD PTR [rax],eax
 1001094:	add    BYTE PTR [rax],al
 1001096:	add    BYTE PTR [rax],al
 1001098:	fcomp  QWORD PTR [rdi+0x1]
 100109b:	add    BYTE PTR [rax],al
 100109d:	add    BYTE PTR [rax],al
 100109f:	add    dl,dh
 10010a1:	pop    rdi
 10010a2:	add    DWORD PTR [rax],eax
 10010a4:	add    BYTE PTR [rax],al
 10010a6:	add    BYTE PTR [rax],al
 10010a8:	(bad)  
 10010a9:	pop    rdi
 10010aa:	add    DWORD PTR [rax],eax
 10010ac:	add    BYTE PTR [rax],al
 10010ae:	add    BYTE PTR [rax],al
 10010b0:	adc    al,0x60
 10010b2:	add    DWORD PTR [rax],eax
 10010b4:	add    BYTE PTR [rax],al
 10010b6:	add    BYTE PTR [rax],al
 10010b8:	and    al,0x60
 10010ba:	add    DWORD PTR [rax],eax
 10010bc:	add    BYTE PTR [rax],al
 10010be:	add    BYTE PTR [rax],al
 10010c0:	cmp    ah,BYTE PTR [rax+0x1]
 10010c3:	add    BYTE PTR [rax],al
 10010c5:	add    BYTE PTR [rax],al
 10010c7:	add    BYTE PTR [rdx+0x60],cl
 10010ca:	add    DWORD PTR [rax],eax
 10010cc:	add    BYTE PTR [rax],al
 10010ce:	add    BYTE PTR [rax],al
 10010d0:	pop    rdx
 10010d1:	(bad)  
 10010d2:	add    DWORD PTR [rax],eax
 10010d4:	add    BYTE PTR [rax],al
 10010d6:	add    BYTE PTR [rax],al
 10010d8:	jo     0x100113a
 10010da:	add    DWORD PTR [rax],eax
 10010dc:	add    BYTE PTR [rax],al
 10010de:	add    BYTE PTR [rax],al
 10010e0:	jl     0x1001142
 10010e2:	add    DWORD PTR [rax],eax
 10010e4:	add    BYTE PTR [rax],al
 10010e6:	add    BYTE PTR [rax],al
 10010e8:	mov    WORD PTR [rax+0x1],fs
 10010eb:	add    BYTE PTR [rax],al
 10010ed:	add    BYTE PTR [rax],al
 10010ef:	add    BYTE PTR [rsi+0x160],bl
 10010f5:	add    BYTE PTR [rax],al
 10010f7:	add    BYTE PTR [rax+riz*2+0x1],ch
 10010fe:	add    BYTE PTR [rax],al
 1001100:	(bad)  
 1001101:	(bad)  
 1001102:	add    DWORD PTR [rax],eax
 1001104:	add    BYTE PTR [rax],al
 1001106:	add    BYTE PTR [rax],al
 1001108:	fisub  DWORD PTR [rax+0x1]
 100110b:	add    BYTE PTR [rax],al
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    ah,ch
 1001111:	(bad)  
 1001112:	add    DWORD PTR [rax],eax
 1001114:	add    BYTE PTR [rax],al
 1001116:	add    BYTE PTR [rax],al
 1001118:	add    ah,BYTE PTR [rcx+0x1]
 100111b:	add    BYTE PTR [rax],al
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    BYTE PTR [rsp+riz*2+0x1],cl
 1001123:	add    BYTE PTR [rax],al
 1001125:	add    BYTE PTR [rax],al
 1001127:	add    BYTE PTR [rsp+riz*2+0x1],bl
 100112b:	add    BYTE PTR [rax],al
 100112d:	add    BYTE PTR [rax],al
 100112f:	add    BYTE PTR [rax+0x64],dh
 1001132:	add    DWORD PTR [rax],eax
 1001134:	add    BYTE PTR [rax],al
 1001136:	add    BYTE PTR [rax],al
 1001138:	test   BYTE PTR [rcx+rax*1+0x0],ah
 100113c:	add    BYTE PTR [rax],al
 100113e:	add    BYTE PTR [rax],al
 1001140:	movabs al,ds:0xbe00000000000164
 1001149:	add    DWORD PTR fs:[rax],eax
 100114c:	add    BYTE PTR [rax],al
 100114e:	add    BYTE PTR [rax],al
 1001150:	shl    BYTE PTR [rcx+rax*1+0x0],cl
 1001154:	add    BYTE PTR [rax],al
 1001156:	add    BYTE PTR [rax],al
 1001158:	out    0x64,al
 100115a:	add    DWORD PTR [rax],eax
 100115c:	add    BYTE PTR [rax],al
 100115e:	add    BYTE PTR [rax],al
 1001160:	add    BYTE PTR [rbp+0x1],ah
 1001163:	add    BYTE PTR [rax],al
 1001165:	add    BYTE PTR [rax],al
 1001167:	add    BYTE PTR [riz*2+0x1],dl
 100116e:	add    BYTE PTR [rax],al
 1001170:	and    al,0x65
 1001172:	add    DWORD PTR [rax],eax
 1001174:	add    BYTE PTR [rax],al
 1001176:	add    BYTE PTR [rax],al
 1001178:	ds add DWORD PTR gs:[rax],eax
 100117c:	add    BYTE PTR [rax],al
 100117e:	add    BYTE PTR [rax],al
 1001180:	push   rsp
 1001181:	add    DWORD PTR gs:[rax],eax
 1001184:	add    BYTE PTR [rax],al
 1001186:	add    BYTE PTR [rax],al
 1001188:	push   0x65
 100118a:	add    DWORD PTR [rax],eax
 100118c:	add    BYTE PTR [rax],al
 100118e:	add    BYTE PTR [rax],al
 1001190:	test   BYTE PTR [rbp+0x1],ah
 1001193:	add    BYTE PTR [rax],al
 1001195:	add    BYTE PTR [rax],al
 1001197:	add    BYTE PTR [rax+0x165],dl
 100119d:	add    BYTE PTR [rax],al
 100119f:	add    BYTE PTR [rsp+riz*2+0x1],al
	...
 10011af:	add    BYTE PTR [rsi],al
 10011b1:	(bad)  
 10011b3:	add    BYTE PTR [rax],al
 10011b5:	add    BYTE PTR [rax],al
 10011b7:	add    BYTE PTR [rsi],cl
 10011b9:	(bad)  
 10011bb:	add    BYTE PTR [rax],al
 10011bd:	add    BYTE PTR [rax],al
 10011bf:	add    BYTE PTR [rdx],bl
 10011c1:	(bad)  
 10011c3:	add    BYTE PTR [rax],al
 10011c5:	add    BYTE PTR [rax],al
 10011c7:	add    BYTE PTR [rax],ch
 10011c9:	(bad)  
 10011cb:	add    BYTE PTR [rax],al
 10011cd:	add    BYTE PTR [rax],al
 10011cf:	add    BYTE PTR [rdx],dh
 10011d1:	(bad)  
 10011d3:	add    BYTE PTR [rax],al
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    BYTE PTR [rdx+0x62],al
 10011da:	add    DWORD PTR [rax],eax
 10011dc:	add    BYTE PTR [rax],al
 10011de:	add    BYTE PTR [rax],al
 10011e0:	push   rax
 10011e1:	(bad)  
 10011e3:	add    BYTE PTR [rax],al
 10011e5:	add    BYTE PTR [rax],al
 10011e7:	add    BYTE PTR [rax+0x62],ah
 10011ea:	add    DWORD PTR [rax],eax
 10011ec:	add    BYTE PTR [rax],al
 10011ee:	add    BYTE PTR [rax],al
 10011f0:	js     0x1001254
 10011f2:	add    DWORD PTR [rax],eax
 10011f4:	add    BYTE PTR [rax],al
 10011f6:	add    BYTE PTR [rax],al
 10011f8:	xchg   BYTE PTR [rdx+0x1],ah
 10011fb:	add    BYTE PTR [rax],al
 10011fd:	add    BYTE PTR [rax],al
 10011ff:	add    BYTE PTR [rsi+0x162],cl
 1001205:	add    BYTE PTR [rax],al
 1001207:	add    BYTE PTR [rax+0x162],bl
 100120d:	add    BYTE PTR [rax],al
 100120f:	add    BYTE PTR [rax+0x162],ah
 1001215:	add    BYTE PTR [rax],al
 1001217:	add    BYTE PTR [rdx+riz*2+0x1],ch
 100121e:	add    BYTE PTR [rax],al
 1001220:	mov    eax,0x162
 1001225:	add    BYTE PTR [rax],al
 1001227:	add    dh,al
 1001229:	(bad)  
 100122b:	add    BYTE PTR [rax],al
 100122d:	add    BYTE PTR [rax],al
 100122f:	add    ah,bl
 1001231:	(bad)  
 1001233:	add    BYTE PTR [rax],al
 1001235:	add    BYTE PTR [rax],al
 1001237:	add    al,dh
 1001239:	(bad)  
 100123b:	add    BYTE PTR [rax],al
 100123d:	add    BYTE PTR [rax],al
 100123f:	add    ah,bh
 1001241:	(bad)  
 1001243:	add    BYTE PTR [rax],al
 1001245:	add    BYTE PTR [rax],al
 1001247:	add    BYTE PTR [rsi],al
 1001249:	movsxd eax,DWORD PTR [rcx]
 100124b:	add    BYTE PTR [rax],al
 100124d:	add    BYTE PTR [rax],al
 100124f:	add    BYTE PTR [rsi],ah
 1001251:	movsxd eax,DWORD PTR [rcx]
 1001253:	add    BYTE PTR [rax],al
 1001255:	add    BYTE PTR [rax],al
 1001257:	add    BYTE PTR [rbx+riz*2],bh
 100125a:	add    DWORD PTR [rax],eax
 100125c:	add    BYTE PTR [rax],al
 100125e:	add    BYTE PTR [rax],al
 1001260:	rex.RX movsxd r8d,DWORD PTR [rcx]
 1001263:	add    BYTE PTR [rax],al
 1001265:	add    BYTE PTR [rax],al
 1001267:	add    BYTE PTR [rbx+riz*2+0x1],dl
 100126b:	add    BYTE PTR [rax],al
 100126d:	add    BYTE PTR [rax],al
 100126f:	add    BYTE PTR [rbx+riz*2+0x1],bl
 1001273:	add    BYTE PTR [rax],al
 1001275:	add    BYTE PTR [rax],al
 1001277:	add    BYTE PTR [rsi+0x63],ah
 100127a:	add    DWORD PTR [rax],eax
 100127c:	add    BYTE PTR [rax],al
 100127e:	add    BYTE PTR [rax],al
 1001280:	mov    al,0x65
 1001282:	add    DWORD PTR [rax],eax
 1001284:	add    BYTE PTR [rax],al
 1001286:	add    BYTE PTR [rax],al
 1001288:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1001289:	add    DWORD PTR gs:[rax],eax
 100128c:	add    BYTE PTR [rax],al
 100128e:	add    BYTE PTR [rax],al
 1001290:	(bad)  
 1001291:	(bad)  
 1001292:	add    DWORD PTR [rax],eax
 1001294:	add    BYTE PTR [rax],al
 1001296:	add    BYTE PTR [rax],al
 1001298:	in     al,dx
 1001299:	(bad)  
 100129a:	add    DWORD PTR [rax],eax
 100129c:	add    BYTE PTR [rax],al
 100129e:	add    BYTE PTR [rax],al
 10012a0:	fisub  WORD PTR [rcx+0x1]
 10012a3:	add    BYTE PTR [rax],al
 10012a5:	add    BYTE PTR [rax],al
 10012a7:	add    ah,dl
 10012a9:	(bad)  
 10012aa:	add    DWORD PTR [rax],eax
 10012ac:	add    BYTE PTR [rax],al
 10012ae:	add    BYTE PTR [rax],al
 10012b0:	int3   
 10012b1:	(bad)  
 10012b2:	add    DWORD PTR [rax],eax
 10012b4:	add    BYTE PTR [rax],al
 10012b6:	add    BYTE PTR [rax],al
 10012b8:	ret    0x161
 10012bb:	add    BYTE PTR [rax],al
 10012bd:	add    BYTE PTR [rax],al
 10012bf:	add    BYTE PTR [rax+0x161],bh
 10012c5:	add    BYTE PTR [rax],al
 10012c7:	add    BYTE PTR [rsi+0x161],ch
 10012cd:	add    BYTE PTR [rax],al
 10012cf:	add    BYTE PTR [rsi+0x161],ah
 10012d5:	add    BYTE PTR [rax],al
 10012d7:	add    BYTE PTR [rcx+riz*2+0x1],bl
 10012de:	add    BYTE PTR [rax],al
 10012e0:	mov    WORD PTR [rcx+0x1],fs
 10012e3:	add    BYTE PTR [rax],al
 10012e5:	add    BYTE PTR [rax],al
 10012e7:	add    BYTE PTR [rsi+0x61],bh
 10012ea:	add    DWORD PTR [rax],eax
 10012ec:	add    BYTE PTR [rax],al
 10012ee:	add    BYTE PTR [rax],al
 10012f0:	jbe    0x1001353
 10012f2:	add    DWORD PTR [rax],eax
 10012f4:	add    BYTE PTR [rax],al
 10012f6:	add    BYTE PTR [rax],al
 10012f8:	push   0x61
 10012fa:	add    DWORD PTR [rax],eax
 10012fc:	add    BYTE PTR [rax],al
 10012fe:	add    BYTE PTR [rax],al
 1001300:	(bad)  
 1001301:	(bad)  
 1001302:	add    DWORD PTR [rax],eax
 1001304:	add    BYTE PTR [rax],al
 1001306:	add    BYTE PTR [rax],al
 1001308:	pop    rax
 1001309:	(bad)  
 100130a:	add    DWORD PTR [rax],eax
 100130c:	add    BYTE PTR [rax],al
 100130e:	add    BYTE PTR [rax],al
 1001310:	rex.WRX (bad) 
 1001312:	add    DWORD PTR [rax],eax
 1001314:	add    BYTE PTR [rax],al
 1001316:	add    BYTE PTR [rax],al
 1001318:	rex.R (bad) 
 100131a:	add    DWORD PTR [rax],eax
 100131c:	add    BYTE PTR [rax],al
 100131e:	add    BYTE PTR [rax],al
 1001320:	cmp    BYTE PTR [rcx+0x1],ah
 1001323:	add    BYTE PTR [rax],al
 1001325:	add    BYTE PTR [rax],al
 1001327:	add    BYTE PTR [rcx+riz*2],ch
 100132a:	add    DWORD PTR [rax],eax
 100132c:	add    BYTE PTR [rax],al
 100132e:	add    BYTE PTR [rax],al
 1001330:	hlt    
 1001331:	(bad)  
 1001332:	add    DWORD PTR [rax],eax
 1001334:	add    BYTE PTR [rax],al
 1001336:	add    BYTE PTR [rax],al
 1001338:	mov    edx,0x165
	...
 1001345:	add    BYTE PTR [rax],al
 1001347:	add    BYTE PTR [rbx],dl
 1001349:	add    BYTE PTR [rax],al
 100134b:	add    BYTE PTR [rax],al
 100134d:	add    BYTE PTR [rax],al
 100134f:	add    BYTE PTR [rsi],0x0
 1001352:	add    BYTE PTR [rax],al
 1001354:	add    BYTE PTR [rax],al
 1001356:	add    BYTE PTR [rax+0x12],al
 100135c:	add    BYTE PTR [rax],al
 100135e:	add    BYTE PTR [rax+0x2a],al
 1001364:	add    BYTE PTR [rax],al
 1001366:	add    BYTE PTR [rax+0x10],al
 100136c:	add    BYTE PTR [rax],al
 100136e:	add    BYTE PTR [rax+0x29],al
 1001374:	add    BYTE PTR [rax],al
 1001376:	add    BYTE PTR [rax+0x2],al
 100137c:	add    BYTE PTR [rax],al
 100137e:	add    BYTE PTR [rax+0xe],al
 1001384:	add    BYTE PTR [rax],al
 1001386:	add    BYTE PTR [rax+0x3],al
 100138c:	add    BYTE PTR [rax],al
 100138e:	add    BYTE PTR [rax+0x9],al
 1001394:	add    BYTE PTR [rax],al
 1001396:	add    BYTE PTR [rax+0xa],al
 100139c:	add    BYTE PTR [rax],al
 100139e:	add    BYTE PTR [rax+0x1],al
 10013a4:	add    BYTE PTR [rax],al
 10013a6:	add    BYTE PTR [rax+0x32],al
 10013ac:	add    BYTE PTR [rax],al
 10013ae:	add    BYTE PTR [rax+0xf],al
 10013b4:	add    BYTE PTR [rax],al
 10013b6:	add    BYTE PTR [rax+0x0],al
 10013bc:	add    BYTE PTR [rax],al
 10013be:	add    BYTE PTR [rax],al
 10013c0:	jp     0x1001425
 10013c2:	add    DWORD PTR [rax],eax
 10013c4:	add    BYTE PTR [rax],al
 10013c6:	add    BYTE PTR [rax],al
 10013c8:	mov    BYTE PTR [rbx+0x1],ah
	...
 10013d7:	add    dl,bh
 10013d9:	movsxd eax,DWORD PTR [rcx]
 10013db:	add    BYTE PTR [rax],al
 10013dd:	add    BYTE PTR [rax],al
 10013df:	add    BYTE PTR [rsi],ah
 10013e1:	add    DWORD PTR fs:[rax],eax
 10013e4:	add    BYTE PTR [rax],al
 10013e6:	add    BYTE PTR [rax],al
 10013e8:	out    dx,al
 10013e9:	movsxd eax,DWORD PTR [rcx]
 10013eb:	add    BYTE PTR [rax],al
 10013ed:	add    BYTE PTR [rax],al
 10013ef:	add    dl,bl
 10013f1:	movsxd eax,DWORD PTR [rcx]
 10013f3:	add    BYTE PTR [rax],al
 10013f5:	add    BYTE PTR [rax],al
 10013f7:	add    dl,cl
 10013f9:	movsxd eax,DWORD PTR [rcx]
 10013fb:	add    BYTE PTR [rax],al
 10013fd:	add    BYTE PTR [rax],al
 10013ff:	add    BYTE PTR [rbx+riz*2+0x1],bh
 1001406:	add    BYTE PTR [rax],al
 1001408:	sbb    BYTE PTR [rcx+rax*1+0x0],ah
 100140c:	add    BYTE PTR [rax],al
 100140e:	add    BYTE PTR [rax],al
 1001410:	or     al,0x64
 1001412:	add    DWORD PTR [rax],eax
 1001414:	add    BYTE PTR [rax],al
 1001416:	add    BYTE PTR [rax],al
 1001418:	scas   al,BYTE PTR es:[rdi]
 1001419:	movsxd eax,DWORD PTR [rcx]
	...
 100142f:	add    BYTE PTR [rax+0x41],ah
 1001432:	add    DWORD PTR [rcx],eax
 1001434:	add    BYTE PTR [rax],al
 1001436:	add    BYTE PTR [rax],al
 1001438:	rex xor eax,0x101
	...
 100144e:	add    BYTE PTR [rax],al
 1001450:	push   rsp
 1001451:	rex.XB add DWORD PTR [r9],eax
 1001454:	add    BYTE PTR [rax],al
 1001456:	add    BYTE PTR [rax],al
 1001458:	call   0x10115a3
	...
 1001471:	add    BYTE PTR [rax],al
 1001473:	add    BYTE PTR [rcx-0x15],cl
 1001476:	xor    eax,0x4f
 100147b:	add    BYTE PTR [rdx],al
 100147d:	add    BYTE PTR [rax],al
 100147f:	add    BYTE PTR [rax],ah
 1001481:	add    BYTE PTR [rax],al
 1001483:	add    BYTE PTR [rax],cl
 1001485:	mov    DWORD PTR [rax],eax
 1001487:	add    BYTE PTR [rax],cl
 1001489:	jge    0x100148b
 100148b:	add    BYTE PTR [rax],al
 100148d:	add    BYTE PTR [rax],al
 100148f:	add    BYTE PTR [rax+0x10174],al
 1001495:	add    BYTE PTR [rax],al
 1001497:	add    BYTE PTR [rax],ah
 1001499:	jne    0x100149c
 100149b:	add    DWORD PTR [rax],eax
	...
 10014ad:	add    BYTE PTR [rax],al
 10014af:	add    BYTE PTR [rbp+0x3a],ah
 10014b2:	pop    rsp
 10014b3:	jae    0x1001526
 10014b5:	ins    BYTE PTR es:[rdi],dx
 10014b6:	xor    DWORD PTR [rcx],esi
 10014b8:	pop    rdi
 10014b9:	ins    DWORD PTR es:[rdi],dx
 10014ba:	(bad)  
 10014bb:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 10014c2:	ins    BYTE PTR es:[rdi],dx
 10014c3:	pop    rsp
 10014c4:	outs   dx,BYTE PTR ds:[rsi]
 10014c5:	je     0x100152b
 10014c7:	(bad)  
 10014c8:	ins    DWORD PTR es:[rdi],dx
 10014c9:	jae    0x1001527
 10014cb:	jae    0x100153e
 10014cd:	ins    BYTE PTR es:[rdi],dx
 10014ce:	outs   dx,BYTE PTR ds:[rsi]
 10014cf:	movsxd ebp,DWORD PTR [rcx+rbp*2+0x5c]
 10014d3:	movsxd ebp,DWORD PTR [rcx+rbp*2+0x5f]
 10014d7:	movsxd ebp,DWORD PTR [rdi+0x6d]
 10014da:	ins    DWORD PTR es:[rdi],dx
 10014db:	outs   dx,DWORD PTR ds:[rsi]
 10014dc:	outs   dx,BYTE PTR ds:[rsi]
 10014dd:	pop    rsp
 10014de:	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
 10014e5:	pop    rsp
 10014e6:	movsxd ebp,DWORD PTR [rsi+rbp*2+0x74]
 10014ea:	movsxd ebp,DWORD PTR [rdi+0x6d]
 10014ed:	outs   dx,BYTE PTR ds:[rsi]
 10014ee:	cs push 0x0
	...
 1001500:	cmp    al,0x0
 1001502:	push   rcx
 1001503:	add    BYTE PTR [rbp+0x0],dh
 1001506:	outs   dx,DWORD PTR ds:[rsi]
 1001507:	add    BYTE PTR [rax+rax*1+0x65],dh
 100150b:	add    BYTE PTR [rax+rax*1+0x49],ah
 100150f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1001513:	add    BYTE PTR [rsi+0x0],ch
 1001516:	je     0x1001518
 1001518:	imul   eax,DWORD PTR [rax],0x690066
 100151e:	add    BYTE PTR gs:[rdx+0x0],dh
 1001522:	cmp    al,0x0
 1001524:	movsxd eax,DWORD PTR [rax]
 1001526:	push   0x72006100
 100152b:	add    BYTE PTR [rsi],bh
 100152d:	add    BYTE PTR [rdx],bh
 100152f:	add    BYTE PTR [rdx],bh
 1001531:	add    BYTE PTR [rcx+0x0],dh
 1001534:	jne    0x1001536
 1001536:	outs   dx,DWORD PTR ds:[rsi]
 1001537:	add    BYTE PTR [rax+rax*1+0x65],dh
 100153b:	add    BYTE PTR [rax+rax*1+0x45],bh
 100153f:	add    BYTE PTR [rdx+0x0],dl
 1001542:	push   rdx
 1001543:	add    BYTE PTR [rax+rax*1+0x53],bh
 1001547:	add    BYTE PTR [rsi+0x0],cl
 100154a:	add    BYTE PTR [r11+0x0],al
 100154e:	add    BYTE PTR ds:[rax],ah
 1001551:	add    BYTE PTR [rax+rax*1],bh
 1001554:	push   rcx
 1001555:	add    BYTE PTR [rbp+0x0],dh
 1001558:	outs   dx,DWORD PTR ds:[rsi]
 1001559:	add    BYTE PTR [rax+rax*1+0x65],dh
 100155d:	add    BYTE PTR [rcx+0x0],cl
 1001560:	add    BYTE PTR fs:[rbp+0x0],ah
 1001564:	outs   dx,BYTE PTR ds:[rsi]
 1001565:	add    BYTE PTR [rax+rax*1+0x66],dh
 1001569:	add    BYTE PTR [rcx+0x0],ch
 100156c:	add    BYTE PTR gs:[rdx+0x0],dh
 1001570:	cmp    al,0x0
 1001572:	movsxd eax,DWORD PTR [rax]
 1001574:	push   0x72006100
 1001579:	add    BYTE PTR [rsi],bh
 100157b:	add    BYTE PTR [rdx],bh
 100157d:	add    BYTE PTR [rdx],bh
 100157f:	add    BYTE PTR [rcx+0x0],dh
 1001582:	jne    0x1001584
 1001584:	outs   dx,DWORD PTR ds:[rsi]
 1001585:	add    BYTE PTR [rax+rax*1+0x65],dh
 1001589:	add    BYTE PTR [rax],ah
 100158b:	add    BYTE PTR [rip+0x7b006400],ah        # 0x7c007991
 1001591:	add    BYTE PTR [rdi+0x0],dl
 1001594:	rex.WB add BYTE PTR [r14+0x0],cl
 1001598:	add    BYTE PTR [r10+0x0],r10b
 100159c:	push   rdx
 100159d:	add    BYTE PTR [rbp+0x0],bh
 10015a0:	or     al,BYTE PTR [rax]
 10015a2:	add    BYTE PTR [rax],al
 10015a4:	add    BYTE PTR [rax],al
 10015a6:	add    BYTE PTR [rax],al
 10015a8:	cmp    bl,BYTE PTR gs:[rbx+rsi*2+0x71]
 10015ad:	ins    BYTE PTR es:[rdi],dx
 10015ae:	xor    DWORD PTR [rcx],esi
 10015b0:	pop    rdi
 10015b1:	ins    DWORD PTR es:[rdi],dx
 10015b2:	(bad)  
 10015b3:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 10015ba:	ins    BYTE PTR es:[rdi],dx
 10015bb:	pop    rsp
 10015bc:	outs   dx,BYTE PTR ds:[rsi]
 10015bd:	je     0x1001623
 10015bf:	(bad)  
 10015c0:	ins    DWORD PTR es:[rdi],dx
 10015c1:	jae    0x100161f
 10015c3:	jae    0x1001636
 10015c5:	ins    BYTE PTR es:[rdi],dx
 10015c6:	outs   dx,BYTE PTR ds:[rsi]
 10015c7:	movsxd ebp,DWORD PTR [rcx+rbp*2+0x5c]
 10015cb:	jne    0x1001641
 10015cd:	imul   ebp,DWORD PTR [rbx+rsi*2+0x5c],0x5c706362
 10015d5:	jae    0x1001649
 10015d7:	movsxd ebx,DWORD PTR [rdx+riz*2+0x63]
 10015db:	jo     0x1001644
 10015dd:	gs je  0x1001641
 10015e0:	jb     0x1001610
 10015e2:	movsxd eax,DWORD PTR [rax]
 10015e4:	add    BYTE PTR [rax],al
 10015e6:	add    BYTE PTR [rax],al
 10015e8:	cmp    al,0x50
 10015ea:	jb     0x100165b
 10015ec:	movsxd esp,DWORD PTR [rbp+0x73]
 10015ef:	jae    0x1001634
 10015f1:	outs   dx,DWORD PTR ds:[rsi]
 10015f2:	ins    DWORD PTR es:[rdi],dx
 10015f3:	ins    DWORD PTR es:[rdi],dx
 10015f4:	(bad)  
 10015f5:	outs   dx,BYTE PTR ds:[rsi]
 10015f6:	imul   r13,QWORD PTR fs:[rsi+0x65],0x3e
 10015ff:	add    BYTE PTR [rip+0x2f000076],ch        # 0x3000167b
 1001605:	jbe    0x1001607
 1001607:	add    BYTE PTR [rax+rdx*2],bh
 100160a:	jb     0x100167b
 100160c:	movsxd esp,DWORD PTR [rbp+0x73]
 100160f:	jae    0x1001654
 1001611:	outs   dx,DWORD PTR ds:[rsi]
 1001612:	ins    DWORD PTR es:[rdi],dx
 1001613:	ins    DWORD PTR es:[rdi],dx
 1001614:	(bad)  
 1001615:	outs   dx,BYTE PTR ds:[rsi]
 1001616:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 100161f:	ds (bad) 
 1001621:	jb     0x100168a
 1001623:	movsxd edi,DWORD PTR [rdx]
 1001625:	and    BYTE PTR [rip+0x73692064],ah        # 0x7469368f
 100162b:	and    BYTE PTR [rcx+0x6e],ch
 100162e:	jbe    0x1001691
 1001630:	ins    BYTE PTR es:[rdi],dx
 1001631:	imul   esp,DWORD PTR [rdx+rcx*1+0x0],0x3c000000
 1001639:	push   rax
 100163a:	jb     0x10016ab
 100163c:	movsxd esp,DWORD PTR [rbp+0x73]
 100163f:	jae    0x1001684
 1001641:	outs   dx,DWORD PTR ds:[rsi]
 1001642:	ins    DWORD PTR es:[rdi],dx
 1001643:	ins    DWORD PTR es:[rdi],dx
 1001644:	(bad)  
 1001645:	outs   dx,BYTE PTR ds:[rsi]
 1001646:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 100164f:	ds je  0x10016b3
 1001652:	(bad)  
 1001653:	ins    BYTE PTR es:[rdi],dx
 1001654:	gs rex.WRX (bad) 
 1001657:	ins    DWORD PTR es:[rdi],dx
 1001658:	cmp    ah,BYTE PTR gs:[rax]
 100165b:	and    ah,BYTE PTR [rip+0x20227368]        # 0x212289c9
 1001661:	imul   esi,DWORD PTR [rbx+0x20],0x61766e69
 1001668:	ins    BYTE PTR es:[rdi],dx
 1001669:	imul   esp,DWORD PTR [rdx+rcx*1+0x0],0x71000000
 1001671:	jne    0x10016d8
 1001673:	jb     0x10016ee
 1001675:	rex.WRXB jne 0x10016ec
 1001678:	cmp    ah,BYTE PTR [rax]
 100167a:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb2289e8
	...
 1001688:	fs (bad) 
 100168a:	je     0x10016ed
 100168c:	imul   r13d,DWORD PTR [rbp+r12*2+0x3a],0x68252220
 1001695:	jae    0x10016b9
 1001697:	or     al,BYTE PTR [rax]
 1001699:	add    BYTE PTR [rax],al
 100169b:	add    BYTE PTR [rax],al
 100169d:	add    BYTE PTR [rax],al
 100169f:	add    BYTE PTR [rcx+0x72],ah
 10016a2:	addr32 jne 0x1001712
 10016a5:	outs   dx,BYTE PTR gs:[rsi]
 10016a7:	je     0x10016e3
 10016a9:	and    BYTE PTR [rip+0x61640963],ah        # 0x62642012
 10016af:	je     0x1001712
 10016b1:	(bad)  
 10016b3:	jae    0x100171a
 10016b5:	rex.WRX (bad) 
 10016b7:	ins    DWORD PTR es:[rdi],dx
 10016b8:	cmp    ah,BYTE PTR gs:[rax]
 10016bb:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb228a29
 10016c1:	add    BYTE PTR [rax],al
 10016c3:	add    BYTE PTR [rax],al
 10016c5:	add    BYTE PTR [rax],al
 10016c7:	add    BYTE PTR [rcx+0x72],ah
 10016ca:	addr32 jne 0x100173a
 10016cd:	outs   dx,BYTE PTR gs:[rsi]
 10016cf:	je     0x100170b
 10016d1:	and    BYTE PTR [rip+0x6e690963],ah        # 0x6f69203a
 10016d7:	jo     0x100174e
 10016d9:	je     0x1001721
 10016db:	imul   ebp,DWORD PTR [rbp+riz*2+0x3a],0x68252220
 10016e3:	jae    0x1001707
 10016e5:	or     al,BYTE PTR [rax]
 10016e7:	add    BYTE PTR [rax+rdx*2],bh
 10016ea:	jb     0x100175b
 10016ec:	movsxd esp,DWORD PTR [rbp+0x73]
 10016ef:	jae    0x1001734
 10016f1:	outs   dx,DWORD PTR ds:[rsi]
 10016f2:	ins    DWORD PTR es:[rdi],dx
 10016f3:	ins    DWORD PTR es:[rdi],dx
 10016f4:	(bad)  
 10016f5:	outs   dx,BYTE PTR ds:[rsi]
 10016f6:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 10016ff:	and    BYTE PTR ds:[rcx+0x6e],ch
 1001703:	jo     0x100177a
 1001705:	je     0x100174d
 1001707:	imul   ebp,DWORD PTR [rbp+riz*2+0x20],0x656d616e
 100170f:	and    BYTE PTR [rcx+0x73],ch
 1001712:	and    BYTE PTR [rbp+0x6d],ah
 1001715:	jo     0x100178b
 1001717:	jns    0x1001723
 1001719:	add    BYTE PTR [rax],al
 100171b:	add    BYTE PTR [rdx+0x0],dh
 100171e:	add    BYTE PTR [rax],al
 1001720:	cmp    al,0x50
 1001722:	jb     0x1001793
 1001724:	movsxd esp,DWORD PTR [rbp+0x73]
 1001727:	jae    0x100176c
 1001729:	outs   dx,DWORD PTR ds:[rsi]
 100172a:	ins    DWORD PTR es:[rdi],dx
 100172b:	ins    DWORD PTR es:[rdi],dx
 100172c:	(bad)  
 100172d:	outs   dx,BYTE PTR ds:[rsi]
 100172e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 1001737:	and    BYTE PTR ds:[rcx+0x6e],ch
 100173b:	jo     0x10017b2
 100173d:	je     0x1001785
 100173f:	imul   ebp,DWORD PTR [rbp+riz*2+0x20],0x6c756f63
 1001747:	and    BYTE PTR fs:[rsi+0x6f],ch
 100174b:	je     0x100176d
 100174d:	(bad)  
 100174e:	and    BYTE PTR gs:[rdi+0x70],ch
 1001752:	outs   dx,BYTE PTR gs:[rsi]
 1001754:	gs and BYTE PTR fs:[rsi+0x6f],ah
 1001759:	jb     0x100177b
 100175b:	jb     0x10017c2
 100175d:	(bad)  
 100175e:	or     al,BYTE PTR fs:[rax]
 1001761:	add    BYTE PTR [rax],al
 1001763:	add    BYTE PTR [rax],al
 1001765:	add    BYTE PTR [rax],al
 1001767:	add    BYTE PTR [rcx+0x72],ah
 100176a:	addr32 jne 0x10017da
 100176d:	outs   dx,BYTE PTR gs:[rsi]
 100176f:	je     0x10017ab
 1001771:	and    BYTE PTR [rip+0x756f0963],ah        # 0x766f20da
 1001777:	je     0x10017e9
 1001779:	jne    0x10017ef
 100177b:	imul   r13d,DWORD PTR [rbp+r12*2+0x3a],0x68252220
 1001784:	jae    0x10017a8
 1001786:	or     al,BYTE PTR [rax]
 1001788:	cmp    al,0x50
 100178a:	jb     0x10017fb
 100178c:	movsxd esp,DWORD PTR [rbp+0x73]
 100178f:	jae    0x10017d4
 1001791:	outs   dx,DWORD PTR ds:[rsi]
 1001792:	ins    DWORD PTR es:[rdi],dx
 1001793:	ins    DWORD PTR es:[rdi],dx
 1001794:	(bad)  
 1001795:	outs   dx,BYTE PTR ds:[rsi]
 1001796:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 100179f:	and    BYTE PTR ds:[rdi+0x75],ch
 10017a3:	je     0x1001815
 10017a5:	jne    0x100181b
 10017a7:	imul   r13d,DWORD PTR [rbp+r12*2+0x20],0x656d616e
 10017b0:	and    BYTE PTR [rcx+0x73],ch
 10017b3:	and    BYTE PTR [rbp+0x6d],ah
 10017b6:	jo     0x100182c
 10017b8:	jns    0x10017c4
 10017ba:	add    BYTE PTR [rax],al
 10017bc:	ja     0x10017be
 10017be:	add    BYTE PTR [rax],al
 10017c0:	cmp    al,0x50
 10017c2:	jb     0x1001833
 10017c4:	movsxd esp,DWORD PTR [rbp+0x73]
 10017c7:	jae    0x100180c
 10017c9:	outs   dx,DWORD PTR ds:[rsi]
 10017ca:	ins    DWORD PTR es:[rdi],dx
 10017cb:	ins    DWORD PTR es:[rdi],dx
 10017cc:	(bad)  
 10017cd:	outs   dx,BYTE PTR ds:[rsi]
 10017ce:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 10017d7:	and    BYTE PTR ds:[rdi+0x75],ch
 10017db:	je     0x100184d
 10017dd:	jne    0x1001853
 10017df:	imul   r13d,DWORD PTR [rbp+r12*2+0x20],0x6c756f63
 10017e8:	and    BYTE PTR fs:[rsi+0x6f],ch
 10017ec:	je     0x100180e
 10017ee:	(bad)  
 10017ef:	and    BYTE PTR gs:[rdi+0x70],ch
 10017f3:	outs   dx,BYTE PTR gs:[rsi]
 10017f5:	gs and BYTE PTR fs:[rsi+0x6f],ah
 10017fa:	jb     0x100181c
 10017fc:	ja     0x1001870
 10017fe:	imul   esi,DWORD PTR [rbp+riz*2+0xa],0x0
 1001806:	add    BYTE PTR [rax],al
 1001808:	(bad)  
 1001809:	jb     0x1001872
 100180b:	jne    0x100187a
 100180d:	outs   dx,BYTE PTR gs:[rsi]
 100180f:	je     0x100184b
 1001811:	and    BYTE PTR [rip+0x61640963],ah        # 0x6264217a
 1001817:	je     0x100187a
 1001819:	imul   r13d,DWORD PTR [rbp+r12*2+0x20],0x73726556
 1001822:	imul   ebp,DWORD PTR [rdi+0x6e],0x2522203a
 1001829:	push   0xa2273
 100182e:	add    BYTE PTR [rax],al
 1001830:	(bad)  
 1001831:	jb     0x100189a
 1001833:	jne    0x10018a2
 1001835:	outs   dx,BYTE PTR gs:[rsi]
 1001837:	je     0x1001873
 1001839:	and    BYTE PTR [rip+0x65720963],ah        # 0x667221a2
 100183f:	imul   ebp,DWORD PTR [edi+0x6e],0x53206c61
 1001847:	gs je  0x10018be
 100184a:	imul   ebp,DWORD PTR [rsi+0x67],0x6f203a73
 1001851:	outs   dx,BYTE PTR ds:[rsi]
 1001852:	or     al,BYTE PTR [rax]
 1001854:	add    BYTE PTR [rax],al
 1001856:	add    BYTE PTR [rax],al
 1001858:	(bad)  
 1001859:	jb     0x10018c2
 100185b:	jne    0x10018ca
 100185d:	outs   dx,BYTE PTR gs:[rsi]
 100185f:	je     0x100189b
 1001861:	and    BYTE PTR [rip+0x63620963],ah        # 0x646221ca
 1001867:	jo     0x10018b6
 1001869:	outs   dx,DWORD PTR ds:[rsi]
 100186a:	fs cmp ah,BYTE PTR gs:[rax]
 100186e:	rex.WRX (bad) 
 1001870:	je     0x10018db
 1001872:	jbe    0x10018d9
 1001874:	or     al,BYTE PTR [rax]
 1001876:	add    BYTE PTR [rax],al
 1001878:	(bad)  
 1001879:	jb     0x10018e2
 100187b:	jne    0x10018ea
 100187d:	outs   dx,BYTE PTR gs:[rsi]
 100187f:	je     0x10018bb
 1001881:	and    BYTE PTR [rip+0x63620963],ah        # 0x646221ea
 1001887:	jo     0x10018d6
 1001889:	outs   dx,DWORD PTR ds:[rsi]
 100188a:	fs cmp ah,BYTE PTR gs:[rax]
 100188e:	rex.XB push 0x63617261
 1001894:	je     0x10018fb
 1001896:	jb     0x10018a2
	...
 10018a0:	cmp    al,0x50
 10018a2:	jb     0x1001913
 10018a4:	movsxd esp,DWORD PTR [rbp+0x73]
 10018a7:	jae    0x10018ec
 10018a9:	outs   dx,DWORD PTR ds:[rsi]
 10018aa:	ins    DWORD PTR es:[rdi],dx
 10018ab:	ins    DWORD PTR es:[rdi],dx
 10018ac:	(bad)  
 10018ad:	outs   dx,BYTE PTR ds:[rsi]
 10018ae:	imul   r13,QWORD PTR fs:[rsi+0x65],0x4d454d7c
 10018b7:	jl     0x10018fe
 10018b9:	push   rdx
 10018ba:	push   rdx
 10018bb:	and    BYTE PTR ds:[rbp+riz*2+0x66],al
 10018c0:	(bad)  
 10018c1:	jne    0x100192f
 10018c3:	je     0x10018e5
 10018c5:	imul   sp,WORD PTR [rbp+0x6c],0x2064
 10018cb:	je     0x1001932
 10018cd:	jb     0x100193c
 10018cf:	imul   ebp,DWORD PTR [rsi+0x61],0x20726f74
 10018d6:	(bad)  
 10018d7:	ins    BYTE PTR es:[rdi],dx
 10018d8:	ins    BYTE PTR es:[rdi],dx
 10018d9:	outs   dx,DWORD PTR ds:[rsi]
 10018da:	movsxd esp,DWORD PTR [rcx+0x74]
 10018dd:	imul   ebp,DWORD PTR [rdi+0x6e],0xa
	...
 10018f0:	cmp    al,0x50
 10018f2:	jb     0x1001963
 10018f4:	movsxd esp,DWORD PTR [rbp+0x73]
 10018f7:	jae    0x100193c
 10018f9:	outs   dx,DWORD PTR ds:[rsi]
 10018fa:	ins    DWORD PTR es:[rdi],dx
 10018fb:	ins    DWORD PTR es:[rdi],dx
 10018fc:	(bad)  
 10018fd:	outs   dx,BYTE PTR ds:[rsi]
 10018fe:	imul   r13,QWORD PTR fs:[rsi+0x65],0x4d454d7c
 1001907:	jl     0x100194e
 1001909:	push   rdx
 100190a:	push   rdx
 100190b:	and    BYTE PTR ds:[rbp+riz*2+0x66],al
 1001910:	(bad)  
 1001911:	jne    0x100197f
 1001913:	je     0x1001935
 1001915:	jb     0x1001986
 1001917:	ja     0x1001939
 1001919:	je     0x1001980
 100191b:	jb     0x100198a
 100191d:	imul   ebp,DWORD PTR [rsi+0x61],0x20726f74
 1001924:	(bad)  
 1001925:	ins    BYTE PTR es:[rdi],dx
 1001926:	ins    BYTE PTR es:[rdi],dx
 1001927:	outs   dx,DWORD PTR ds:[rsi]
 1001928:	movsxd esp,DWORD PTR [rcx+0x74]
 100192b:	imul   ebp,DWORD PTR [rdi+0x6e],0x7261000a
 1001932:	addr32 jne 0x10019a2
 1001935:	outs   dx,BYTE PTR gs:[rsi]
 1001937:	je     0x1001973
 1001939:	and    BYTE PTR [rip+0x63620963],ah        # 0x646222a2
 100193f:	jo     0x100198e
 1001941:	outs   dx,DWORD PTR ds:[rsi]
 1001942:	fs cmp ah,BYTE PTR gs:[rax]
 1001946:	push   rdi
 1001947:	imul   esp,DWORD PTR [rbp+riz*2+0x2d],0x72616843
 100194f:	(bad)  
 1001950:	movsxd esi,DWORD PTR [rbp+riz*2+0x72]
 1001954:	or     al,BYTE PTR [rax]
 1001956:	add    BYTE PTR [rax],al
 1001958:	(bad)  
 1001959:	jb     0x10019c2
 100195b:	jne    0x10019ca
 100195d:	outs   dx,BYTE PTR gs:[rsi]
 100195f:	je     0x100199b
 1001961:	and    BYTE PTR [rip+0x64690963],ah        # 0x656922ca
 1001967:	outs   dx,BYTE PTR gs:[rsi]
 1001969:	je     0x10019d4
 100196b:	je     0x10019e6
 100196d:	rex.WB outs dx,BYTE PTR ds:[rsi]
 100196f:	jae    0x10019d6
 1001971:	jb     0x10019e7
 1001973:	cmp    ah,BYTE PTR [rax]
 1001975:	outs   dx,DWORD PTR ds:[rsi]
 1001976:	outs   dx,BYTE PTR ds:[rsi]
 1001977:	or     al,BYTE PTR [rax]
 1001979:	add    BYTE PTR [rax],al
 100197b:	add    BYTE PTR [rax],al
 100197d:	add    BYTE PTR [rax],al
 100197f:	add    BYTE PTR [rcx+0x72],ah
 1001982:	addr32 jne 0x10019f2
 1001985:	outs   dx,BYTE PTR gs:[rsi]
 1001987:	je     0x10019c3
 1001989:	and    BYTE PTR [rip+0x656b0963],ah        # 0x666b22f2
 100198f:	gs jo  0x10019e0
 1001992:	jne    0x1001a00
 1001994:	ins    BYTE PTR es:[rdi],dx
 1001995:	jae    0x10019d1
 1001997:	and    BYTE PTR [rdi+0x6e],ch
 100199a:	or     al,BYTE PTR [rax]
 100199c:	add    BYTE PTR [rax],al
 100199e:	add    BYTE PTR [rax],al
 10019a0:	(bad)  
 10019a1:	jb     0x1001a0a
 10019a3:	jne    0x1001a12
 10019a5:	outs   dx,BYTE PTR gs:[rsi]
 10019a7:	je     0x10019e3
 10019a9:	and    BYTE PTR [rip+0x69660963],ah        # 0x6a662312
 10019af:	jb     0x1001a24
 10019b1:	je     0x1001a05
 10019b3:	outs   dx,DWORD PTR ds:[rsi]
 10019b4:	ja     0x10019f0
 10019b6:	and    BYTE PTR [rip+0x64343649],ah        # 0x65345005
 10019bc:	or     al,BYTE PTR [rax]
 10019be:	add    BYTE PTR [rax],al
 10019c0:	(bad)  
 10019c1:	jb     0x1001a2a
 10019c3:	jne    0x1001a32
 10019c5:	outs   dx,BYTE PTR gs:[rsi]
 10019c7:	je     0x1001a03
 10019c9:	and    BYTE PTR [rip+0x616c0963],ah        # 0x626c2332
 10019cf:	jae    0x1001a45
 10019d1:	push   rdx
 10019d2:	outs   dx,DWORD PTR ds:[rsi]
 10019d3:	ja     0x1001a0f
 10019d5:	and    BYTE PTR [rip+0x64343649],ah        # 0x65345024
 10019db:	or     al,BYTE PTR [rax]
 10019dd:	add    BYTE PTR [rax],al
 10019df:	add    BYTE PTR [rip+0xa73],ah        # 0x1002458
 10019e5:	add    BYTE PTR [rax],al
 10019e7:	add    BYTE PTR [rcx+0x72],ah
 10019ea:	addr32 jne 0x1001a5a
 10019ed:	outs   dx,BYTE PTR gs:[rsi]
 10019ef:	je     0x1001a2b
 10019f1:	and    BYTE PTR [rip+0x61620963],ah        # 0x6262235a
 10019f7:	je     0x1001a5c
 10019f9:	push   0x657a6953
 10019fe:	cmp    ah,BYTE PTR [rax]
 1001a00:	and    eax,0xa64
 1001a05:	add    BYTE PTR [rax],al
 1001a07:	add    BYTE PTR [rcx+0x72],ah
 1001a0a:	addr32 jne 0x1001a7a
 1001a0d:	outs   dx,BYTE PTR gs:[rsi]
 1001a0f:	je     0x1001a4b
 1001a11:	and    BYTE PTR [rip+0x616d0963],ah        # 0x626d237a
 1001a17:	js     0x1001a5e
 1001a19:	jb     0x1001a8d
 1001a1b:	outs   dx,DWORD PTR ds:[rsi]
 1001a1c:	jb     0x1001a91
 1001a1e:	cmp    ah,BYTE PTR [rax]
 1001a20:	and    eax,0x30000a64
 1001a25:	js     0x1001a27
 1001a27:	add    BYTE PTR [rcx+0x72],ah
 1001a2a:	addr32 jne 0x1001a9a
 1001a2d:	outs   dx,BYTE PTR gs:[rsi]
 1001a2f:	je     0x1001a6b
 1001a31:	and    BYTE PTR [rip+0x69660963],ah        # 0x6a66239a
 1001a37:	gs ins BYTE PTR es:[rdi],dx
 1001a39:	fs push rsp
 1001a3b:	gs jb  0x1001aab
 1001a3e:	imul   ebp,DWORD PTR [rsi+0x61],0x3a726f74
 1001a45:	and    BYTE PTR [rdx],ah
 1001a47:	and    eax,0xa227368
 1001a4c:	add    BYTE PTR [rax],al
 1001a4e:	add    BYTE PTR [rax],al
 1001a50:	(bad)  
 1001a51:	jb     0x1001aba
 1001a53:	jne    0x1001ac2
 1001a55:	outs   dx,BYTE PTR gs:[rsi]
 1001a57:	je     0x1001a93
 1001a59:	and    BYTE PTR [rip+0x6f720963],ah        # 0x707223c2
 1001a5f:	ja     0x1001ab5
 1001a61:	gs jb  0x1001ad1
 1001a64:	imul   ebp,DWORD PTR [rsi+0x61],0x3a726f74
 1001a6b:	and    BYTE PTR [rdx],ah
 1001a6d:	and    eax,0xa227368
 1001a72:	add    BYTE PTR [rax],al
 1001a74:	add    BYTE PTR [rax],al
 1001a76:	add    BYTE PTR [rax],al
 1001a78:	(bad)  
 1001a79:	jb     0x1001ae2
 1001a7b:	jne    0x1001aea
 1001a7d:	outs   dx,BYTE PTR gs:[rsi]
 1001a7f:	je     0x1001abb
 1001a81:	and    BYTE PTR [rip+0x72650963],ah        # 0x736523ea
 1001a87:	jb     0x1001af8
 1001a89:	jb     0x1001ad1
 1001a8b:	imul   ebp,DWORD PTR [rbp+riz*2+0x3a],0x68252220
 1001a93:	jae    0x1001ab7
 1001a95:	or     al,BYTE PTR [rax]
 1001a97:	add    BYTE PTR [rcx+0x72],ah
 1001a9a:	addr32 jne 0x1001b0a
 1001a9d:	outs   dx,BYTE PTR gs:[rsi]
 1001a9f:	je     0x1001adb
 1001aa1:	and    BYTE PTR [rip+0x6f660963],ah        # 0x7066240a
 1001aa7:	jb     0x1001b16
 1001aa9:	(bad)  
 1001aaa:	je     0x1001af2
 1001aac:	imul   ebp,DWORD PTR [rbp+riz*2+0x3a],0x68252220
 1001ab4:	jae    0x1001ad8
 1001ab6:	or     al,BYTE PTR [rax]
 1001ab8:	(bad)  
 1001ab9:	jb     0x1001b22
 1001abb:	jne    0x1001b2a
 1001abd:	outs   dx,BYTE PTR gs:[rsi]
 1001abf:	je     0x1001afb
 1001ac1:	and    BYTE PTR [rip+0x73750963],ah        # 0x7475242a
 1001ac7:	gs jb  0x1001b18
 1001aca:	(bad)  
 1001acb:	ins    DWORD PTR es:[rdi],dx
 1001acc:	cmp    ah,BYTE PTR gs:[rax]
 1001acf:	sub    ch,BYTE PTR [rdx]
 1001ad1:	sub    cl,BYTE PTR [rdx]
 1001ad3:	add    BYTE PTR [rax],al
 1001ad5:	add    BYTE PTR [rax],al
 1001ad7:	add    BYTE PTR [rcx+0x72],ah
 1001ada:	addr32 jne 0x1001b4a
 1001add:	outs   dx,BYTE PTR gs:[rsi]
 1001adf:	je     0x1001b1b
 1001ae1:	and    BYTE PTR [rip+0x61700963],ah        # 0x6270244a
 1001ae7:	movsxd ebp,DWORD PTR [rbx+0x65]
 1001aea:	je     0x1001b3f
 1001aec:	imul   edi,DWORD PTR [rdx+0x65],0x6425203a
 1001af3:	or     al,BYTE PTR [rax]
 1001af5:	add    BYTE PTR [rax],al
 1001af7:	add    BYTE PTR [rcx+0x72],ah
 1001afa:	addr32 jne 0x1001b6a
 1001afd:	outs   dx,BYTE PTR gs:[rsi]
 1001aff:	je     0x1001b3b
 1001b01:	and    BYTE PTR [rip+0x61700963],ah        # 0x6270246a
 1001b07:	jae    0x1001b7c
 1001b09:	ja     0x1001b7a
 1001b0b:	jb     0x1001b71
 1001b0d:	cmp    ah,BYTE PTR [rax]
 1001b0f:	sub    ch,BYTE PTR [rdx]
 1001b11:	sub    cl,BYTE PTR [rdx]
 1001b13:	add    BYTE PTR [rax],al
 1001b15:	add    BYTE PTR [rax],al
 1001b17:	add    BYTE PTR [rcx+0x72],ah
 1001b1a:	addr32 jne 0x1001b8a
 1001b1d:	outs   dx,BYTE PTR gs:[rsi]
 1001b1f:	je     0x1001b5b
 1001b21:	and    BYTE PTR [rip+0xa63],ah        # 0x100258a
 1001b27:	add    BYTE PTR [rcx+0x72],ah
 1001b2a:	addr32 jne 0x1001b9a
 1001b2d:	outs   dx,BYTE PTR gs:[rsi]
 1001b2f:	je     0x1001b6b
 1001b31:	and    BYTE PTR [rip+0x6e490963],ah        # 0x6f49249a
 1001b37:	je     0x1001b9e
 1001b39:	addr32 jb 0x1001b9d
 1001b3c:	je     0x1001ba3
 1001b3e:	and    BYTE PTR fs:[rbx+0x65],dl
 1001b42:	movsxd esi,DWORD PTR [rbp+0x72]
 1001b45:	imul   esi,DWORD PTR [rcx+rdi*2+0x3a],0xa6e6f20
 1001b4d:	add    BYTE PTR [rax],al
 1001b4f:	add    BYTE PTR [rcx+0x72],ah
 1001b52:	addr32 jne 0x1001bc2
 1001b55:	outs   dx,BYTE PTR gs:[rsi]
 1001b57:	je     0x1001b93
 1001b59:	and    BYTE PTR [rip+0x75710963],ah        # 0x767124c2
 1001b5f:	outs   dx,DWORD PTR ds:[rsi]
 1001b60:	je     0x1001bc7
 1001b62:	fs rex.WB
 1001b64:	fs outs dx,BYTE PTR gs:[rsi]
 1001b67:	je     0x1001bd2
 1001b69:	imul   sp,WORD PTR [rbp+0x72],0x3a73
 1001b6f:	and    BYTE PTR [rdi+0x6e],ch
 1001b72:	or     al,BYTE PTR [rax]
 1001b74:	add    BYTE PTR [rax],al
 1001b76:	add    BYTE PTR [rax],al
 1001b78:	(bad)  
 1001b79:	jb     0x1001be2
 1001b7b:	jne    0x1001bea
 1001b7d:	outs   dx,BYTE PTR gs:[rsi]
 1001b7f:	je     0x1001bbb
 1001b81:	and    BYTE PTR [rip+0x6f660963],ah        # 0x706624ea
 1001b87:	jb     0x1001bf6
 1001b89:	(bad)  
 1001b8a:	je     0x1001bd2
 1001b8c:	imul   ebp,DWORD PTR [rbp+riz*2+0x46],0x616d726f
 1001b94:	je     0x1001bd0
 1001b96:	and    BYTE PTR [rax+0x6d],bh
 1001b99:	ins    BYTE PTR es:[rdi],dx
 1001b9a:	or     al,BYTE PTR [rax]
 1001b9c:	add    BYTE PTR [rax],al
 1001b9e:	add    BYTE PTR [rax],al
 1001ba0:	(bad)  
 1001ba1:	jb     0x1001c0a
 1001ba3:	jne    0x1001c12
 1001ba5:	outs   dx,BYTE PTR gs:[rsi]
 1001ba7:	je     0x1001be3
 1001ba9:	and    BYTE PTR [rip+0x65730963],ah        # 0x66732512
 1001baf:	jb     0x1001c27
 1001bb1:	gs jb  0x1001c02
 1001bb4:	(bad)  
 1001bb5:	ins    DWORD PTR es:[rdi],dx
 1001bb6:	cmp    ah,BYTE PTR gs:[rax]
 1001bb9:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb228f27
 1001bbf:	add    BYTE PTR [rcx+0x72],ah
 1001bc2:	addr32 jne 0x1001c32
 1001bc5:	outs   dx,BYTE PTR gs:[rsi]
 1001bc7:	je     0x1001c03
 1001bc9:	and    BYTE PTR [rip+0x75710963],ah        # 0x76712532
 1001bcf:	gs jb  0x1001c4b
 1001bd2:	imul   rbp,QWORD PTR [rsi+0x74],0x22203a73
 1001bda:	and    eax,0xa227368
 1001bdf:	add    BYTE PTR [rcx+0x43],al
 1001be2:	push   rax
 1001be3:	add    BYTE PTR [rdi+0x45],cl
 1001be6:	rex.WRB add BYTE PTR [r10+0x41],r10b
 1001bea:	push   rdi
 1001beb:	add    BYTE PTR [rax],al
 1001bed:	add    BYTE PTR [rax],al
 1001bef:	add    BYTE PTR [rcx+0x72],ah
 1001bf2:	addr32 jne 0x1001c62
 1001bf5:	outs   dx,BYTE PTR gs:[rsi]
 1001bf7:	je     0x1001c33
 1001bf9:	and    BYTE PTR [rip+0x6f630963],ah        # 0x70632562
 1001bff:	fs gs push rax
 1001c02:	(bad)  
 1001c03:	cmp    ah,BYTE PTR gs:[eax]
 1001c07:	and    eax,0xa64
 1001c0c:	add    BYTE PTR [rax],al
 1001c0e:	add    BYTE PTR [rax],al
 1001c10:	(bad)  
 1001c11:	jb     0x1001c7a
 1001c13:	jne    0x1001c82
 1001c15:	outs   dx,BYTE PTR gs:[rsi]
 1001c17:	je     0x1001c53
 1001c19:	and    BYTE PTR [rip+0x63620963],ah        # 0x64622582
 1001c1f:	jo     0x1001c6e
 1001c21:	outs   dx,DWORD PTR ds:[rsi]
 1001c22:	fs cmp ah,BYTE PTR gs:[rax]
 1001c26:	rex.WRX (bad) 
 1001c28:	je     0x1001c93
 1001c2a:	jbe    0x1001c91
 1001c2c:	and    BYTE PTR [rsi+0x6f],cl
 1001c2f:	outs   dx,BYTE PTR ds:[rsi]
 1001c30:	sub    eax,0x74786574
 1001c35:	or     al,BYTE PTR [rax]
 1001c37:	add    BYTE PTR [rdx+0x65],dh
 1001c3a:	(bad)  
 1001c3b:	outs   dx,DWORD PTR fs:[rsi]
 1001c3d:	outs   dx,BYTE PTR ds:[rsi]
 1001c3e:	ins    BYTE PTR es:[rdi],dx
 1001c3f:	jns    0x1001c41
 1001c41:	add    BYTE PTR [rax],al
 1001c43:	add    BYTE PTR [rax],al
 1001c45:	add    BYTE PTR [rax],al
 1001c47:	add    BYTE PTR [rcx+0x72],ah
 1001c4a:	addr32 jne 0x1001cba
 1001c4d:	outs   dx,BYTE PTR gs:[rsi]
 1001c4f:	je     0x1001c8b
 1001c51:	and    BYTE PTR [rip+0x70610963],ah        # 0x716125ba
 1001c57:	jo     0x1001cc5
 1001c59:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 1001c60:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1001c62:	je     0x1001cc9
 1001c64:	outs   dx,BYTE PTR ds:[rsi]
 1001c65:	je     0x1001ca1
 1001c67:	and    BYTE PTR [rdx],ah
 1001c69:	and    eax,0xa227368
 1001c6e:	add    BYTE PTR [rax],al
 1001c70:	cmp    al,0x50
 1001c72:	jb     0x1001ce3
 1001c74:	movsxd esp,DWORD PTR [rbp+0x73]
 1001c77:	jae    0x1001cbc
 1001c79:	outs   dx,DWORD PTR ds:[rsi]
 1001c7a:	ins    DWORD PTR es:[rdi],dx
 1001c7b:	ins    DWORD PTR es:[rdi],dx
 1001c7c:	(bad)  
 1001c7d:	outs   dx,BYTE PTR ds:[rsi]
 1001c7e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 1001c87:	and    BYTE PTR ds:[rcx+0x72],ah
 1001c8b:	addr32 jne 0x1001cfb
 1001c8e:	outs   dx,BYTE PTR gs:[rsi]
 1001c90:	je     0x1001ccc
 1001c92:	and    BYTE PTR [rip+0x73692063],ah        # 0x74693cfb
 1001c98:	and    BYTE PTR [rcx+0x6e],ch
 1001c9b:	jbe    0x1001cfe
 1001c9d:	ins    BYTE PTR es:[rdi],dx
 1001c9e:	imul   esp,DWORD PTR [rdx+rcx*1+0x0],0x0
	...
 1001cae:	add    BYTE PTR [rax],al
 1001cb0:	cmp    al,0x50
 1001cb2:	jb     0x1001d23
 1001cb4:	movsxd esp,DWORD PTR [rbp+0x73]
 1001cb7:	jae    0x1001cfc
 1001cb9:	outs   dx,DWORD PTR ds:[rsi]
 1001cba:	ins    DWORD PTR es:[rdi],dx
 1001cbb:	ins    DWORD PTR es:[rdi],dx
 1001cbc:	(bad)  
 1001cbd:	outs   dx,BYTE PTR ds:[rsi]
 1001cbe:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 1001cc7:	and    BYTE PTR ds:[rip+0x6e752064],ah        # 0x6f753d32
 1001cce:	imul   ebp,DWORD PTR [rsi+0x6f],0x77
 1001cd2:	outs   dx,BYTE PTR ds:[rsi]
 1001cd3:	and    BYTE PTR [rcx+0x72],ah
 1001cd6:	addr32 jne 0x1001d46
 1001cd9:	outs   dx,BYTE PTR gs:[rsi]
 1001cdb:	je     0x1001d50
 1001cdd:	and    BYTE PTR [rdi+0x6e],ch
 1001ce0:	and    BYTE PTR [rax+rbp*2+0x65],dh
 1001ce4:	and    BYTE PTR [rbx+0x6f],ah
 1001ce7:	ins    DWORD PTR es:[rdi],dx
 1001ce8:	ins    DWORD PTR es:[rdi],dx
 1001ce9:	(bad)  
 1001cea:	outs   dx,BYTE PTR ds:[rsi]
 1001ceb:	fs sub eax,0x656e696c
 1001cf1:	or     al,BYTE PTR [rax]
	...
 1001cff:	add    BYTE PTR [rax+rdx*2],bh
 1001d02:	jb     0x1001d73
 1001d04:	movsxd esp,DWORD PTR [rbp+0x73]
 1001d07:	jae    0x1001d4c
 1001d09:	outs   dx,DWORD PTR ds:[rsi]
 1001d0a:	ins    DWORD PTR es:[rdi],dx
 1001d0b:	ins    DWORD PTR es:[rdi],dx
 1001d0c:	(bad)  
 1001d0d:	outs   dx,BYTE PTR ds:[rsi]
 1001d0e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x464e497c
 1001d17:	rex.WRXB
 1001d18:	and    BYTE PTR ds:[rcx+riz*2+0x74],ah
 1001d1d:	(bad)  
 1001d1e:	imul   r13d,DWORD PTR [rbp+r12*2+0x20],0x73726556
 1001d27:	imul   ebp,DWORD PTR [rdi+0x6e],0x20642520
 1001d2e:	jae    0x1001da0
 1001d30:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 1001d34:	imul   esp,DWORD PTR [rbp+0x64],0x7361202c
 1001d3b:	jae    0x1001db2
 1001d3d:	ins    DWORD PTR es:[rdi],dx
 1001d3e:	imul   ebp,DWORD PTR [rsi+0x67],0x70636220
 1001d45:	rex.WRB outs dx,DWORD PTR ds:[rsi]
 1001d47:	fs and BYTE PTR gs:[rcx+0x73],ah
 1001d4c:	and    BYTE PTR [rsi+0x61],cl
 1001d4f:	je     0x1001dba
 1001d51:	jbe    0x1001db8
 1001d53:	or     al,BYTE PTR [rax]
	...
 1001d5d:	add    BYTE PTR [rax],al
 1001d5f:	add    BYTE PTR [rax+rdx*2],bh
 1001d62:	jb     0x1001dd3
 1001d64:	movsxd esp,DWORD PTR [rbp+0x73]
 1001d67:	jae    0x1001dac
 1001d69:	outs   dx,DWORD PTR ds:[rsi]
 1001d6a:	ins    DWORD PTR es:[rdi],dx
 1001d6b:	ins    DWORD PTR es:[rdi],dx
 1001d6c:	(bad)  
 1001d6d:	outs   dx,BYTE PTR ds:[rsi]
 1001d6e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x464e497c
 1001d77:	rex.WRXB
 1001d78:	and    BYTE PTR ds:[rcx+0x75],dh
 1001d7c:	outs   dx,DWORD PTR ds:[rsi]
 1001d7d:	je     0x1001de4
 1001d7f:	fs rex.WB
 1001d81:	fs outs dx,BYTE PTR gs:[rsi]
 1001d84:	je     0x1001def
 1001d86:	imul   sp,WORD PTR [rbp+0x72],0x2073
 1001d8c:	jb     0x1001df3
 1001d8e:	jno    0x1001e05
 1001d90:	gs jae 0x1001e07
 1001d93:	gs fs sub al,0x20
 1001d97:	je     0x1001dfa
 1001d99:	(bad)  
 1001d9a:	ins    BYTE PTR es:[rdi],dx
 1001d9b:	gs rex.WRX (bad) 
 1001d9e:	ins    DWORD PTR es:[rdi],dx
 1001d9f:	cmp    ah,BYTE PTR gs:[rax]
 1001da2:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb229110
	...
 1001db0:	cmp    al,0x50
 1001db2:	jb     0x1001e23
 1001db4:	movsxd esp,DWORD PTR [rbp+0x73]
 1001db7:	jae    0x1001dfc
 1001db9:	outs   dx,DWORD PTR ds:[rsi]
 1001dba:	ins    DWORD PTR es:[rdi],dx
 1001dbb:	ins    DWORD PTR es:[rdi],dx
 1001dbc:	(bad)  
 1001dbd:	outs   dx,BYTE PTR ds:[rsi]
 1001dbe:	imul   r13,QWORD PTR fs:[rsi+0x65],0x464e497c
 1001dc7:	rex.WRXB
 1001dc8:	and    BYTE PTR ds:[rbx+0x65],dh
 1001dcc:	jb     0x1001e44
 1001dce:	gs jb  0x1001e1f
 1001dd1:	(bad)  
 1001dd2:	ins    DWORD PTR es:[rdi],dx
 1001dd3:	and    BYTE PTR gs:[rsi+0x6f],ch
 1001dd7:	je     0x1001df9
 1001dd9:	jo     0x1001e4d
 1001ddb:	outs   dx,DWORD PTR ds:[rsi]
 1001ddc:	jbe    0x1001e47
 1001dde:	fs gs fs sub al,0x20
 1001de3:	jne    0x1001e58
 1001de5:	imul   ebp,DWORD PTR [rsi+0x67],0x636f6c20
 1001dec:	(bad)  
 1001ded:	ins    BYTE PTR es:[rdi],dx
 1001dee:	and    BYTE PTR [rcx+0x73],ah
 1001df1:	and    BYTE PTR [rbp+riz*2+0x66],ah
 1001df5:	(bad)  
 1001df6:	jne    0x1001e64
 1001df8:	je     0x1001e04
 1001dfa:	add    BYTE PTR [rax],al
 1001dfc:	add    BYTE PTR [rax],al
 1001dfe:	add    BYTE PTR [rax],al
 1001e00:	cmp    al,0x50
 1001e02:	jb     0x1001e73
 1001e04:	movsxd esp,DWORD PTR [rbp+0x73]
 1001e07:	jae    0x1001e4c
 1001e09:	outs   dx,DWORD PTR ds:[rsi]
 1001e0a:	ins    DWORD PTR es:[rdi],dx
 1001e0b:	ins    DWORD PTR es:[rdi],dx
 1001e0c:	(bad)  
 1001e0d:	outs   dx,BYTE PTR ds:[rsi]
 1001e0e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5445527c
 1001e17:	and    BYTE PTR ds:[rip+0xa64],ah        # 0x1002882
 1001e1e:	add    BYTE PTR [rax],al
 1001e20:	cmp    al,0x50
 1001e22:	jb     0x1001e93
 1001e24:	movsxd esp,DWORD PTR [rbp+0x73]
 1001e27:	jae    0x1001e6c
 1001e29:	outs   dx,DWORD PTR ds:[rsi]
 1001e2a:	ins    DWORD PTR es:[rdi],dx
 1001e2b:	ins    DWORD PTR es:[rdi],dx
 1001e2c:	(bad)  
 1001e2d:	outs   dx,BYTE PTR ds:[rsi]
 1001e2e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 1001e37:	and    BYTE PTR ds:[rsp+rbp*2+0x46],ch
 1001e3c:	imul   esi,DWORD PTR [rdx+0x73],0x776f5274
 1001e43:	cmp    ah,BYTE PTR [rax]
 1001e45:	and    eax,0x64343649
 1001e4a:	and    BYTE PTR [rcx+0x73],ch
 1001e4d:	and    BYTE PTR [rcx+0x6e],ch
 1001e50:	jbe    0x1001eb3
 1001e52:	ins    BYTE PTR es:[rdi],dx
 1001e53:	imul   esp,DWORD PTR [rdx+rcx*1+0x0],0x0
 1001e5b:	add    BYTE PTR [rax],al
 1001e5d:	add    BYTE PTR [rax],al
 1001e5f:	add    BYTE PTR [rax+rdx*2],bh
 1001e62:	jb     0x1001ed3
 1001e64:	movsxd esp,DWORD PTR [rbp+0x73]
 1001e67:	jae    0x1001eac
 1001e69:	outs   dx,DWORD PTR ds:[rsi]
 1001e6a:	ins    DWORD PTR es:[rdi],dx
 1001e6b:	ins    DWORD PTR es:[rdi],dx
 1001e6c:	(bad)  
 1001e6d:	outs   dx,BYTE PTR ds:[rsi]
 1001e6e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 1001e77:	and    BYTE PTR ds:[rsp+rbp*2+0x46],ch
 1001e7c:	imul   esi,DWORD PTR [rdx+0x73],0x776f5274
 1001e83:	cmp    ah,BYTE PTR [rax]
 1001e85:	and    eax,0x64343649
 1001e8a:	and    BYTE PTR [rcx+0x73],ch
 1001e8d:	and    BYTE PTR [rdi+0x72],ah
 1001e90:	gs (bad) 
 1001e92:	je     0x1001ef9
 1001e94:	and    BYTE PTR fs:[rax+rbp*2+0x61],dh
 1001e99:	outs   dx,BYTE PTR ds:[rsi]
 1001e9a:	and    BYTE PTR [rsp+rbp*2+0x4c],ch
 1001e9e:	(bad)  
 1001e9f:	jae    0x1001f15
 1001ea1:	push   rdx
 1001ea2:	outs   dx,DWORD PTR ds:[rsi]
 1001ea3:	ja     0x1001edf
 1001ea5:	and    BYTE PTR [rip+0x64343649],ah        # 0x653454f4
 1001eab:	or     al,BYTE PTR [rax]
 1001ead:	add    BYTE PTR [rax],al
 1001eaf:	add    BYTE PTR [rax+rdx*2],bh
 1001eb2:	jb     0x1001f23
 1001eb4:	movsxd esp,DWORD PTR [rbp+0x73]
 1001eb7:	jae    0x1001efc
 1001eb9:	outs   dx,DWORD PTR ds:[rsi]
 1001eba:	ins    DWORD PTR es:[rdi],dx
 1001ebb:	ins    DWORD PTR es:[rdi],dx
 1001ebc:	(bad)  
 1001ebd:	outs   dx,BYTE PTR ds:[rsi]
 1001ebe:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 1001ec7:	and    BYTE PTR ds:[rsp+rbp*2+0x4c],ch
 1001ecc:	(bad)  
 1001ecd:	jae    0x1001f43
 1001ecf:	push   rdx
 1001ed0:	outs   dx,DWORD PTR ds:[rsi]
 1001ed1:	ja     0x1001f0d
 1001ed3:	and    BYTE PTR [rip+0x64343649],ah        # 0x65345522
 1001ed9:	and    BYTE PTR [rcx+0x73],ch
 1001edc:	and    BYTE PTR [rcx+0x6e],ch
 1001edf:	jbe    0x1001f42
 1001ee1:	ins    BYTE PTR es:[rdi],dx
 1001ee2:	imul   esp,DWORD PTR [rdx+rcx*1+0x0],0x6e690000
 1001eea:	add    BYTE PTR [rax],al
 1001eec:	outs   dx,DWORD PTR ds:[rsi]
 1001eed:	jne    0x1001f63
 1001eef:	add    BYTE PTR [rsi+0x6f],ah
 1001ef2:	jb     0x1001f61
 1001ef4:	(bad)  
 1001ef5:	je     0x1001ef7
 1001ef7:	add    BYTE PTR [rcx+0x75],dh
 1001efa:	gs jb  0x1001f76
 1001efd:	outs   dx,DWORD PTR ds:[rsi]
 1001efe:	jne    0x1001f74
	...
 1001f08:	cmp    al,0x50
 1001f0a:	jb     0x1001f7b
 1001f0c:	movsxd esp,DWORD PTR [rbp+0x73]
 1001f0f:	jae    0x1001f54
 1001f11:	outs   dx,DWORD PTR ds:[rsi]
 1001f12:	ins    DWORD PTR es:[rdi],dx
 1001f13:	ins    DWORD PTR es:[rdi],dx
 1001f14:	(bad)  
 1001f15:	outs   dx,BYTE PTR ds:[rsi]
 1001f16:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 1001f1f:	and    BYTE PTR ds:[rcx+rbp*2+0x72],ah
 1001f24:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1001f29:	outs   dx,BYTE PTR ds:[rsi]
 1001f2a:	and    BYTE PTR [rdx],bh
 1001f2c:	and    BYTE PTR [rdx],ah
 1001f2e:	and    eax,0x20227368
 1001f33:	imul   esi,DWORD PTR [rbx+0x20],0x61766e69
 1001f3a:	ins    BYTE PTR es:[rdi],dx
 1001f3b:	imul   esp,DWORD PTR [rdx+rcx*1+0x0],0x72696400
 1001f43:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1001f48:	outs   dx,BYTE PTR ds:[rsi]
 1001f49:	and    BYTE PTR [rdx],bh
 1001f4b:	and    BYTE PTR [rdx],ah
 1001f4d:	and    eax,0xa227368
	...
 1001f5e:	add    BYTE PTR [rax],al
 1001f60:	cmp    al,0x50
 1001f62:	jb     0x1001fd3
 1001f64:	movsxd esp,DWORD PTR [rbp+0x73]
 1001f67:	jae    0x1001fac
 1001f69:	outs   dx,DWORD PTR ds:[rsi]
 1001f6a:	ins    DWORD PTR es:[rdi],dx
 1001f6b:	ins    DWORD PTR es:[rdi],dx
 1001f6c:	(bad)  
 1001f6d:	outs   dx,BYTE PTR ds:[rsi]
 1001f6e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 1001f77:	and    BYTE PTR ds:[rip+0x756d2063],ah        # 0x766d3fe1
 1001f7e:	jae    0x1001ff4
 1001f80:	and    BYTE PTR [rdx+0x65],ah
 1001f83:	and    BYTE PTR [rsi+0x6f],ah
 1001f86:	ins    BYTE PTR es:[rdi],dx
 1001f87:	ins    BYTE PTR es:[rdi],dx
 1001f88:	outs   dx,DWORD PTR ds:[rsi]
 1001f89:	ja     0x1001ff0
 1001f8b:	and    BYTE PTR fs:[rdx+0x79],ah
 1001f8f:	and    BYTE PTR [rax+0x6f],dh
 1001f92:	jae    0x1001ffd
 1001f94:	je     0x1001fff
 1001f96:	jbe    0x1001ffd
 1001f98:	and    BYTE PTR [rsi+0x61],dh
 1001f9b:	ins    BYTE PTR es:[rdi],dx
 1001f9c:	jne    0x1002003
 1001f9e:	sub    al,0x20
 1001fa0:	jne    0x1002015
 1001fa2:	gs jb  0x1001fc5
 1001fa5:	jo     0x1002019
 1001fa7:	outs   dx,DWORD PTR ds:[rsi]
 1001fa8:	jbe    0x1002013
 1001faa:	fs gs cmp ah,BYTE PTR fs:[rax]
 1001faf:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb22931d
 1001fb5:	add    BYTE PTR [rax],al
 1001fb7:	add    BYTE PTR [rax+rdx*2],bh
 1001fba:	jb     0x100202b
 1001fbc:	movsxd esp,DWORD PTR [rbp+0x73]
 1001fbf:	jae    0x1002004
 1001fc1:	outs   dx,DWORD PTR ds:[rsi]
 1001fc2:	ins    DWORD PTR es:[rdi],dx
 1001fc3:	ins    DWORD PTR es:[rdi],dx
 1001fc4:	(bad)  
 1001fc5:	outs   dx,BYTE PTR ds:[rsi]
 1001fc6:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5241577c
 1001fcf:	rex.WRX
 1001fd0:	and    BYTE PTR ds:[rip+0x61772063],ah        # 0x6277403a
 1001fd7:	jae    0x1001ff9
 1001fd9:	jae    0x100204b
 1001fdb:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 1001fdf:	imul   esp,DWORD PTR [rbp+0x64],0x6c756d20
 1001fe6:	je     0x1002051
 1001fe8:	jo     0x1002056
 1001fea:	and    BYTE PTR gs:[rcx+rbp*2+0x6d],dh
 1001fef:	gs jae 0x1001ffc
 1001ff2:	add    BYTE PTR [rax],al
 1001ff4:	add    BYTE PTR [rax],al
 1001ff6:	add    BYTE PTR [rax],al
 1001ff8:	cmp    al,0x50
 1001ffa:	jb     0x100206b
 1001ffc:	movsxd esp,DWORD PTR [rbp+0x73]
 1001fff:	jae    0x1002044
 1002001:	outs   dx,DWORD PTR ds:[rsi]
 1002002:	ins    DWORD PTR es:[rdi],dx
 1002003:	ins    DWORD PTR es:[rdi],dx
 1002004:	(bad)  
 1002005:	outs   dx,BYTE PTR ds:[rsi]
 1002006:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5252457c
 100200f:	and    BYTE PTR ds:[rdx+0x63],ah
 1002013:	jo     0x1002062
 1002015:	outs   dx,DWORD PTR ds:[rsi]
 1002016:	fs cmp ah,BYTE PTR gs:[rax]
 100201a:	and    eax,0x766f2063
 100201f:	gs jb  0x1002094
 1002022:	outs   dx,DWORD PTR ds:[rsi]
 1002023:	fs and BYTE PTR gs:[rdx+0x63],ah
 1002028:	jo     0x1002077
 100202a:	outs   dx,DWORD PTR ds:[rsi]
 100202b:	fs cmp ah,BYTE PTR gs:[rax]
 100202f:	and    eax,0xa63
	...
 1002040:	cmp    al,0x50
 1002042:	jb     0x10020b3
 1002044:	movsxd esp,DWORD PTR [rbp+0x73]
 1002047:	jae    0x100208c
 1002049:	outs   dx,DWORD PTR ds:[rsi]
 100204a:	ins    DWORD PTR es:[rdi],dx
 100204b:	ins    DWORD PTR es:[rdi],dx
 100204c:	(bad)  
 100204d:	outs   dx,BYTE PTR ds:[rsi]
 100204e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x464e497c
 1002057:	rex.WRXB
 1002058:	and    BYTE PTR ds:[rip+0x6c662066],ch        # 0x6d6640c5
 100205f:	(bad)  
 1002060:	and    BYTE PTR [edi+0x61],dh
 1002064:	jae    0x1002086
 1002066:	jne    0x10020db
 1002068:	gs and BYTE PTR fs:[rcx+0x6c],ah
 100206d:	outs   dx,DWORD PTR ds:[rsi]
 100206e:	outs   dx,BYTE PTR ds:[rsi]
 100206f:	and    BYTE PTR [edi+0x69],dh
 1002073:	je     0x10020dd
 1002075:	and    BYTE PTR [rip+0x69202c78],ch        # 0x6a204cf3
 100207b:	outs   dx,BYTE PTR ds:[esi]
 100207d:	outs   dx,DWORD PTR ds:[rsi]
 100207e:	jb     0x10020e9
 1002080:	outs   dx,BYTE PTR ds:[rsi]
 1002081:	and    BYTE PTR [eip+0x706f2078],ch        # 0x716f4100
 1002088:	je     0x10020f3
 100208a:	outs   dx,DWORD PTR ds:[rsi]
 100208b:	outs   dx,BYTE PTR ds:[rsi]
 100208c:	or     al,BYTE PTR [rax]
 100208e:	add    BYTE PTR [rax],al
 1002090:	cmp    al,0x50
 1002092:	jb     0x1002103
 1002094:	movsxd esp,DWORD PTR [rbp+0x73]
 1002097:	jae    0x10020dc
 1002099:	outs   dx,DWORD PTR ds:[rsi]
 100209a:	ins    DWORD PTR es:[rdi],dx
 100209b:	ins    DWORD PTR es:[rdi],dx
 100209c:	(bad)  
 100209d:	outs   dx,BYTE PTR ds:[rsi]
 100209e:	imul   r13,QWORD PTR fs:[rsi+0x65],0x464e497c
 10020a7:	rex.WRXB
 10020a8:	and    BYTE PTR ds:[rdi+0x62],cl
 10020ac:	je     0x100210f
 10020ae:	imul   ebp,DWORD PTR [rsi+0x69],0x7020676e
 10020b5:	(bad)  
 10020b6:	jae    0x100212b
 10020b8:	ja     0x1002129
 10020ba:	jb     0x1002120
 10020bc:	and    BYTE PTR [rdx+0x79],ah
 10020bf:	and    BYTE PTR [rax+0x72],dh
 10020c2:	outs   dx,DWORD PTR ds:[rsi]
 10020c3:	ins    DWORD PTR es:[rdi],dx
 10020c4:	jo     0x100213a
 10020c6:	imul   ebp,DWORD PTR [rsi+0x67],0x65737520
 10020cd:	jb     0x10020fd
 10020cf:	cs or  al,BYTE PTR cs:[rax]
 10020d3:	add    BYTE PTR [rip+0x73642525],ah        # 0x746445fe
 10020d9:	add    BYTE PTR [rax],al
 10020db:	add    BYTE PTR [rdx],cl
 10020dd:	add    BYTE PTR [rax],al
 10020df:	add    BYTE PTR [rax+rax*1],bh
 10020e2:	push   rcx
 10020e3:	add    BYTE PTR [rbp+0x0],dh
 10020e6:	outs   dx,DWORD PTR ds:[rsi]
 10020e7:	add    BYTE PTR [rax+rax*1+0x65],dh
 10020eb:	add    BYTE PTR [rax+rax*1+0x49],ah
 10020ef:	add    BYTE PTR [rax+rax*1+0x65],ah
 10020f3:	add    BYTE PTR [rsi+0x0],ch
 10020f6:	je     0x10020f8
 10020f8:	imul   eax,DWORD PTR [rax],0x690066
 10020fe:	add    BYTE PTR gs:[rdx+0x0],dh
 1002102:	cmp    al,0x0
 1002104:	jne    0x1002106
 1002106:	outs   dx,BYTE PTR ds:[rsi]
 1002107:	add    BYTE PTR [rbx+0x0],dh
 100210a:	imul   eax,DWORD PTR [rax],0x6e0067
 1002110:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1002115:	add    BYTE PTR [rbx+0x0],dh
 1002118:	push   0x72006f00
 100211d:	add    BYTE PTR [rax+rax*1+0x3e],dh
 1002121:	add    BYTE PTR [rdx],bh
 1002123:	add    BYTE PTR [rdx],bh
 1002125:	add    BYTE PTR [rcx+0x0],dh
 1002128:	jne    0x100212a
 100212a:	outs   dx,DWORD PTR ds:[rsi]
 100212b:	add    BYTE PTR [rax+rax*1+0x65],dh
 100212f:	add    BYTE PTR [rax+rax*1+0x45],bh
 1002133:	add    BYTE PTR [rdx+0x0],dl
 1002136:	push   rdx
 1002137:	add    BYTE PTR [rax+rax*1+0x53],bh
 100213b:	add    BYTE PTR [rsi+0x0],cl
 100213e:	add    BYTE PTR [r11+0x0],al
 1002142:	add    BYTE PTR ds:[rax],ah
 1002145:	add    BYTE PTR [rax+rax*1],bh
 1002148:	push   rcx
 1002149:	add    BYTE PTR [rbp+0x0],dh
 100214c:	outs   dx,DWORD PTR ds:[rsi]
 100214d:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002151:	add    BYTE PTR [rcx+0x0],cl
 1002154:	add    BYTE PTR fs:[rbp+0x0],ah
 1002158:	outs   dx,BYTE PTR ds:[rsi]
 1002159:	add    BYTE PTR [rax+rax*1+0x66],dh
 100215d:	add    BYTE PTR [rcx+0x0],ch
 1002160:	add    BYTE PTR gs:[rdx+0x0],dh
 1002164:	cmp    al,0x0
 1002166:	ja     0x1002168
 1002168:	movsxd eax,DWORD PTR [rax]
 100216a:	push   0x72006100
 100216f:	add    BYTE PTR [rdi+0x0],bl
 1002172:	je     0x1002174
 1002174:	add    BYTE PTR ds:[rdx],bh
 1002177:	add    BYTE PTR [rdx],bh
 1002179:	add    BYTE PTR [rcx+0x0],dh
 100217c:	jne    0x100217e
 100217e:	outs   dx,DWORD PTR ds:[rsi]
 100217f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002183:	add    BYTE PTR [rax],ah
 1002185:	add    BYTE PTR [rip+0x7b006400],ah        # 0x7c00858b
 100218b:	add    BYTE PTR [rdi+0x0],dl
 100218e:	rex.WB add BYTE PTR [r14+0x0],cl
 1002192:	add    BYTE PTR [r10+0x0],r10b
 1002196:	push   rdx
 1002197:	add    BYTE PTR [rbp+0x0],bh
 100219a:	or     al,BYTE PTR [rax]
 100219c:	add    BYTE PTR [rax],al
 100219e:	add    BYTE PTR [rax],al
 10021a0:	cmp    al,0x47
 10021a2:	gs je  0x10021eb
 10021a5:	imul   esp,DWORD PTR [rbp+0x6c],0x726f4664
 10021ac:	ins    DWORD PTR es:[rdi],dx
 10021ad:	(bad)  
 10021ae:	je     0x10021ee
	...
 10021b8:	cmp    bl,BYTE PTR gs:[rbx+rsi*2+0x71]
 10021bd:	ins    BYTE PTR es:[rdi],dx
 10021be:	xor    DWORD PTR [rcx],esi
 10021c0:	pop    rdi
 10021c1:	ins    DWORD PTR es:[rdi],dx
 10021c2:	(bad)  
 10021c3:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 10021ca:	ins    BYTE PTR es:[rdi],dx
 10021cb:	pop    rsp
 10021cc:	outs   dx,BYTE PTR ds:[rsi]
 10021cd:	je     0x1002233
 10021cf:	(bad)  
 10021d0:	ins    DWORD PTR es:[rdi],dx
 10021d1:	jae    0x100222f
 10021d3:	jae    0x1002246
 10021d5:	ins    BYTE PTR es:[rdi],dx
 10021d6:	outs   dx,BYTE PTR ds:[rsi]
 10021d7:	movsxd ebp,DWORD PTR [rcx+rbp*2+0x5c]
 10021db:	jne    0x1002251
 10021dd:	imul   ebp,DWORD PTR [rbx+rsi*2+0x5c],0x5c706362
 10021e5:	jae    0x1002259
 10021e7:	movsxd ebx,DWORD PTR [rdx+riz*2+0x63]
 10021eb:	jo     0x1002254
 10021ed:	gs je  0x1002258
 10021f0:	movsxd ax,DWORD PTR cs:[rax]
 10021f4:	add    BYTE PTR [rax],al
 10021f6:	add    BYTE PTR [rax],al
 10021f8:	cmp    al,0x62
 10021fa:	movsxd esi,DWORD PTR [rax+0x5f]
 10021fd:	movsxd ebp,DWORD PTR [rdi+0x6c]
 1002200:	jne    0x100226f
 1002202:	outs   dx,BYTE PTR ds:[rsi]
 1002203:	jae    0x1002281
 1002205:	rex.X
 1002206:	rex.XB push r8
 1002208:	jl     0x100224b
 100220a:	push   rax
 100220b:	rex.WB jl 0x1002251
 100220e:	rex.B
 100220f:	rex.WR
 1002210:	rex.WR
 1002211:	and    BYTE PTR ds:[rip+0x44487b70],ah        # 0x45489d88
 1002218:	rex.X
 1002219:	rex.XB jge 0x1002248
 100221c:	and    BYTE PTR [rsi+0x69],ah
 100221f:	gs ins BYTE PTR es:[rdi],dx
 1002221:	rex.XB outs dx,DWORD PTR fs:[rsi]
 1002224:	jne    0x1002294
 1002226:	je     0x1002262
 1002228:	and    BYTE PTR [rip+0xa64],ah        # 0x1002c92
 100222e:	add    BYTE PTR [rax],al
 1002230:	cmp    al,0x47
 1002232:	gs je  0x100227b
 1002235:	imul   esp,DWORD PTR [rbp+0x6c],0x726f4664
 100223c:	ins    DWORD PTR es:[rdi],dx
 100223d:	(bad)  
 100223e:	je     0x100227e
 1002240:	and    BYTE PTR [rdi+0x62],cl
 1002243:	je     0x10022a6
 1002245:	imul   ebp,DWORD PTR [rsi+0x69],0x6920676e
 100224c:	outs   dx,BYTE PTR ds:[rsi]
 100224d:	outs   dx,WORD PTR ds:[rsi]
 100224f:	jb     0x10022be
 1002251:	(bad)  
 1002252:	je     0x10022bd
 1002254:	outs   dx,DWORD PTR ds:[rsi]
 1002255:	outs   dx,BYTE PTR ds:[rsi]
 1002256:	and    BYTE PTR [rsi+0x6f],ah
 1002259:	jb     0x100227b
 100225b:	imul   sp,WORD PTR [rbp+0x6c],0x3a64
 1002261:	and    BYTE PTR [rip+0xa64],ah        # 0x1002ccb
	...
 100226f:	add    BYTE PTR [rdx+riz*2],bh
 1002272:	movsxd esi,DWORD PTR [rax+0x5f]
 1002275:	movsxd ebp,DWORD PTR [rdi+0x6c]
 1002278:	ins    WORD PTR es:[rdi],dx
 100227a:	je     0x10022f8
 100227c:	rex.X
 100227d:	rex.XB push r8
 100227f:	jl     0x10022c2
 1002281:	push   rax
 1002282:	rex.WB jl 0x10022c8
 1002285:	rex.B
 1002286:	rex.WR
 1002287:	rex.WR
 1002288:	and    BYTE PTR ds:[rip+0x44487b70],ah        # 0x45489dff
 100228f:	rex.X
 1002290:	rex.XB jge 0x10022bf
 1002293:	and    BYTE PTR [rsi+0x69],ah
 1002296:	gs ins BYTE PTR es:[rdi],dx
 1002298:	rex.WB outs dx,BYTE PTR fs:[rsi]
 100229b:	fs gs js 0x10022d9
 100229f:	and    BYTE PTR [rip+0x66202c64],ah        # 0x67204f09
 10022a5:	imul   esp,DWORD PTR [rbp+0x6c],0x70795464
 10022ac:	cmp    ah,BYTE PTR gs:[rax]
 10022af:	and    eax,0x66202c64
 10022b4:	imul   esp,DWORD PTR [rbp+0x6c],0x65725064
 10022bb:	imul   di,WORD PTR [rax+0x4c],0x6e65
 10022c1:	addr32 je 0x100232c
 10022c4:	cmp    ah,BYTE PTR [rax]
 10022c6:	and    eax,0x66202c64
 10022cb:	imul   esp,DWORD PTR [rbp+0x6c],0x6e654c64
 10022d2:	addr32 je 0x100233d
 10022d5:	cmp    ah,BYTE PTR [rax]
 10022d7:	and    eax,0x66202c64
 10022dc:	imul   esp,DWORD PTR [rbp+0x6c],0x72655464
 10022e3:	ins    DWORD PTR es:[rdi],dx
 10022e4:	imul   ebp,DWORD PTR [rsi+0x61],0x3a726f74
 10022eb:	and    BYTE PTR [rip+0x7b702a2e],ah        # 0x7c704d1f
 10022f1:	rex.X
 10022f2:	rex.XB push r8
 10022f4:	rex.RX
 10022f5:	rex.WB
 10022f6:	rex.RB
 10022f7:	rex.WR
 10022f8:	rex.R push rsp
 10022fa:	rex.RB push r10
 10022fc:	rex.WRB jge 0x100232b
 10022ff:	and    BYTE PTR [rbx+0x6f],al
 1002302:	ins    BYTE PTR es:[rdi],dx
 1002303:	jne    0x1002372
 1002305:	outs   dx,BYTE PTR ds:[rsi]
 1002306:	cmp    ah,BYTE PTR [rax]
 1002308:	and    eax,0xa64
 100230d:	add    BYTE PTR [rax],al
 100230f:	add    BYTE PTR [rdx+0x63],ah
 1002312:	jo     0x1002342
 1002314:	ins    WORD PTR es:[rdi],dx
 1002316:	je     0x1002318
	...
 1002320:	cmp    al,0x47
 1002322:	gs je  0x100236b
 1002325:	imul   esp,DWORD PTR [rbp+0x6c],0x726f4664
 100232c:	ins    DWORD PTR es:[rdi],dx
 100232d:	(bad)  
 100232e:	je     0x10023ac
 1002330:	rex.WB
 1002331:	rex.WRX
 1002332:	rex.RX
 1002333:	rex.WRXB
 1002334:	and    BYTE PTR ds:[rbp+0x73],dl
 1002338:	gs jb  0x100235b
 100233b:	push   0x43207469
 1002340:	je     0x10023b4
 1002342:	ins    BYTE PTR es:[rdi],dx
 1002343:	sub    eax,0x726f2043
 1002348:	and    BYTE PTR [rbp+0x4f],al
 100234b:	rex.RX and BYTE PTR [rdx+0x65],r14b
 100234f:	(bad)  
 1002350:	movsxd ebp,DWORD PTR [rax+0x65]
 1002353:	and    BYTE PTR fs:[rdi+0x6e],ch
 1002357:	and    BYTE PTR [rcx+0x6e],ch
 100235a:	jo     0x10023d1
 100235c:	je     0x100237e
 100235e:	imul   bp,WORD PTR [rbp+riz*2+0x2c],0x7420
 1002365:	gs jb  0x10023d5
 1002368:	imul   ebp,DWORD PTR [rsi+0x61],0x676e6974
 100236f:	and    BYTE PTR [rax+rbp*2+0x65],dh
 1002373:	and    BYTE PTR [rcx+0x70],ah
 1002376:	jo     0x10023e4
 1002378:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 100237f:	or     al,BYTE PTR [rax]
 1002381:	add    BYTE PTR [rax],al
 1002383:	add    BYTE PTR [rax],al
 1002385:	add    BYTE PTR [rax],al
 1002387:	add    BYTE PTR [rdx+riz*2],bh
 100238a:	movsxd esi,DWORD PTR [rax+0x5f]
 100238d:	ja     0x1002401
 100238f:	imul   esi,DWORD PTR [rbp+riz*2+0x66],0x427c746d
 1002397:	rex.XB push r8
 1002399:	jl     0x10023dc
 100239b:	push   rax
 100239c:	rex.WB jl 0x10023e2
 100239f:	rex.B
 10023a0:	rex.WR
 10023a1:	rex.WR
 10023a2:	and    BYTE PTR ds:[rip+0x44487b70],ah        # 0x45489f19
 10023a9:	rex.X
 10023aa:	rex.XB jge 0x10023d9
 10023ad:	and    BYTE PTR [rsi+0x6f],ah
 10023b0:	jb     0x100241f
 10023b2:	(bad)  
 10023b3:	je     0x10023fb
 10023b5:	imul   ebp,DWORD PTR [rbp+riz*2+0x3a],0x68252220
 10023bd:	jae    0x10023e1
 10023bf:	or     al,BYTE PTR [rax]
	...
 10023cd:	add    BYTE PTR [rax],al
 10023cf:	add    BYTE PTR [rdi+rax*2],bh
 10023d2:	gs je  0x100241b
 10023d5:	imul   esp,DWORD PTR [rbp+0x6c],0x726f4664
 10023dc:	ins    DWORD PTR es:[rdi],dx
 10023dd:	(bad)  
 10023de:	je     0x100245c
 10023e0:	rex.WB
 10023e1:	rex.WRX
 10023e2:	rex.RX
 10023e3:	rex.WRXB
 10023e4:	and    BYTE PTR ds:[rbp+0x73],dl
 10023e8:	gs jb  0x100240b
 10023eb:	push   0x43207469
 10023f0:	je     0x1002464
 10023f2:	ins    BYTE PTR es:[rdi],dx
 10023f3:	sub    eax,0x6f742043
 10023f8:	and    BYTE PTR [rbp+riz*2+0x72],dh
 10023fc:	ins    DWORD PTR es:[rdi],dx
 10023fd:	imul   ebp,DWORD PTR [rsi+0x61],0x74206574
 1002404:	push   0x70612065
 1002409:	jo     0x1002477
 100240b:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 1002412:	or     al,BYTE PTR [rax]
 1002414:	add    BYTE PTR [rax],al
 1002416:	add    BYTE PTR [rax],al
 1002418:	cmp    al,0x47
 100241a:	gs je  0x1002463
 100241d:	imul   esp,DWORD PTR [rbp+0x6c],0x726f4664
 1002424:	ins    DWORD PTR es:[rdi],dx
 1002425:	(bad)  
 1002426:	je     0x10024a4
 1002428:	push   rdx
 1002429:	rex.RB push r12
 100242b:	and    BYTE PTR ds:[rbp+0x78],ah
 100242f:	imul   esi,DWORD PTR [rbx+rax*2+0x6f],0x203a6564
 1002437:	push   rbx
 1002438:	push   rbp
 1002439:	rex.XB
 100243a:	rex.XB
 100243b:	rex.RB
 100243c:	rex.RB
 100243d:	or     r8b,BYTE PTR [rax]
 1002440:	cmp    al,0x47
 1002442:	gs je  0x100248b
 1002445:	imul   esp,DWORD PTR [rbp+0x6c],0x726f4664
 100244c:	ins    DWORD PTR es:[rdi],dx
 100244d:	(bad)  
 100244e:	je     0x10024cc
 1002450:	push   rdx
 1002451:	rex.RB push r12
 1002453:	and    BYTE PTR ds:[rbp+0x78],ah
 1002457:	imul   esi,DWORD PTR [rbx+rax*2+0x6f],0x203a6564
 100245f:	rex.RX
 1002460:	rex.B
 1002461:	rex.WB
 1002462:	rex.WR or r8b,BYTE PTR [rax]
 1002465:	add    BYTE PTR [rax],al
 1002467:	add    BYTE PTR [rdi+rax*2],bh
 100246a:	gs je  0x10024b3
 100246d:	imul   esp,DWORD PTR [rbp+0x6c],0x74614464
 1002474:	(bad)  
 1002475:	push   rsp
 1002476:	jns    0x10024e8
 1002478:	gs add BYTE PTR ds:[rax],al
 100247c:	add    BYTE PTR [rax],al
 100247e:	add    BYTE PTR [rax],al
 1002480:	cmp    al,0x47
 1002482:	gs je  0x10024cb
 1002485:	imul   esp,DWORD PTR [rbp+0x6c],0x74614464
 100248c:	(bad)  
 100248d:	push   rsp
 100248e:	jns    0x1002500
 1002490:	gs jl  0x10024dc
 1002493:	rex.WRX
 1002494:	rex.RX
 1002495:	rex.WRXB
 1002496:	and    BYTE PTR ds:[rbp+0x73],dl
 100249a:	gs jb  0x10024bd
 100249d:	push   0x43207469
 10024a2:	je     0x1002516
 10024a4:	ins    BYTE PTR es:[rdi],dx
 10024a5:	sub    eax,0x726f2043
 10024aa:	and    BYTE PTR [rbp+0x4f],al
 10024ad:	rex.RX and BYTE PTR [rdx+0x65],r14b
 10024b1:	(bad)  
 10024b2:	movsxd ebp,DWORD PTR [rax+0x65]
 10024b5:	and    BYTE PTR fs:[rdi+0x6e],ch
 10024b9:	and    BYTE PTR [rcx+0x6e],ch
 10024bc:	jo     0x1002533
 10024be:	je     0x10024e0
 10024c0:	imul   bp,WORD PTR [rbp+riz*2+0x2c],0x7420
 10024c7:	gs jb  0x1002537
 10024ca:	imul   ebp,DWORD PTR [rsi+0x61],0x676e6974
 10024d1:	and    BYTE PTR [rax+rbp*2+0x65],dh
 10024d5:	and    BYTE PTR [rcx+0x70],ah
 10024d8:	jo     0x1002546
 10024da:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 10024e1:	or     al,BYTE PTR [rax]
 10024e3:	add    BYTE PTR [rax],al
 10024e5:	add    BYTE PTR [rax],al
 10024e7:	add    BYTE PTR [rcx],cl
 10024e9:	movsxd esp,DWORD PTR [rax]
 10024eb:	cmp    ah,BYTE PTR [rax]
 10024ed:	and    eax,0xa73
 10024f2:	add    BYTE PTR [rax],al
 10024f4:	add    BYTE PTR [rax],al
 10024f6:	add    BYTE PTR [rax],al
 10024f8:	or     DWORD PTR [rax+riz*1+0x3a],edx
 10024fc:	and    BYTE PTR [rip+0xa73],ah        # 0x1002f75
 1002502:	add    BYTE PTR [rax],al
 1002504:	add    BYTE PTR [rax],al
 1002506:	add    BYTE PTR [rax],al
 1002508:	or     DWORD PTR [rcx+0x20],ebp
 100250b:	cmp    ah,BYTE PTR [rax]
 100250d:	and    eax,0xa73
 1002512:	add    BYTE PTR [rax],al
 1002514:	add    BYTE PTR [rax],al
 1002516:	add    BYTE PTR [rax],al
 1002518:	or     DWORD PTR [rbx+0x20],esi
 100251b:	cmp    ah,BYTE PTR [rax]
 100251d:	and    eax,0xa73
 1002522:	add    BYTE PTR [rax],al
 1002524:	add    BYTE PTR [rax],al
 1002526:	add    BYTE PTR [rax],al
 1002528:	or     DWORD PTR [rax+riz*1+0x3a],esi
 100252c:	and    BYTE PTR [rip+0xa73],ah        # 0x1002fa5
 1002532:	add    BYTE PTR [rax],al
 1002534:	add    BYTE PTR [rax],al
 1002536:	add    BYTE PTR [rax],al
 1002538:	or     DWORD PTR [rsi+0x20],esp
 100253b:	cmp    ah,BYTE PTR [rax]
 100253d:	and    eax,0xa73
 1002542:	add    BYTE PTR [rax],al
 1002544:	add    BYTE PTR [rax],al
 1002546:	add    BYTE PTR [rax],al
 1002548:	or     DWORD PTR [rbp+0x20],ebp
 100254b:	cmp    ah,BYTE PTR [rax]
 100254d:	and    eax,0xa73
 1002552:	add    BYTE PTR [rax],al
 1002554:	add    BYTE PTR [rax],al
 1002556:	add    BYTE PTR [rax],al
 1002558:	or     DWORD PTR [rdx+0x20],esp
 100255b:	cmp    ah,BYTE PTR [rax]
 100255d:	and    eax,0xa73
 1002562:	add    BYTE PTR [rax],al
 1002564:	add    BYTE PTR [rax],al
 1002566:	add    BYTE PTR [rax],al
 1002568:	or     DWORD PTR [rax+riz*1+0x3a],esp
 100256c:	and    BYTE PTR [rip+0xa73],ah        # 0x1002fe5
 1002572:	add    BYTE PTR [rax],al
 1002574:	add    BYTE PTR [rax],al
 1002576:	add    BYTE PTR [rax],al
 1002578:	or     DWORD PTR [rax+0x20],edi
 100257b:	cmp    ah,BYTE PTR [rax]
 100257d:	and    eax,0xa73
 1002582:	add    BYTE PTR [rax],al
 1002584:	add    BYTE PTR [rax],al
 1002586:	add    BYTE PTR [rax],al
 1002588:	or     DWORD PTR [rcx+0x20],ecx
 100258b:	cmp    ah,BYTE PTR [rax]
 100258d:	and    eax,0xa73
 1002592:	add    BYTE PTR [rax],al
 1002594:	add    BYTE PTR [rax],al
 1002596:	add    BYTE PTR [rax],al
 1002598:	or     DWORD PTR [rax+riz*1+0x3a],eax
 100259c:	and    BYTE PTR [rip+0xa73],ah        # 0x1003015
 10025a2:	add    BYTE PTR [rax],al
 10025a4:	add    BYTE PTR [rax],al
 10025a6:	add    BYTE PTR [rax],al
 10025a8:	or     DWORD PTR [rdx+0x20],esi
 10025ab:	cmp    ah,BYTE PTR [rax]
 10025ad:	and    eax,0xa73
 10025b2:	add    BYTE PTR [rax],al
 10025b4:	add    BYTE PTR [rax],al
 10025b6:	add    BYTE PTR [rax],al
 10025b8:	or     DWORD PTR [rbp+0x20],ecx
 10025bb:	cmp    ah,BYTE PTR [rax]
 10025bd:	and    eax,0xa73
 10025c2:	add    BYTE PTR [rax],al
 10025c4:	add    BYTE PTR [rax],al
 10025c6:	add    BYTE PTR [rax],al
 10025c8:	or     DWORD PTR [rsi+0x20],ebp
 10025cb:	cmp    ah,BYTE PTR [rax]
 10025cd:	and    eax,0xa73
 10025d2:	add    BYTE PTR [rax],al
 10025d4:	add    BYTE PTR [rax],al
 10025d6:	add    BYTE PTR [rax],al
 10025d8:	or     DWORD PTR [rbp+0x20],esp
 10025db:	cmp    ah,BYTE PTR [rax]
 10025dd:	and    eax,0xa73
 10025e2:	add    BYTE PTR [rax],al
 10025e4:	add    BYTE PTR [rax],al
 10025e6:	add    BYTE PTR [rax],al
 10025e8:	or     DWORD PTR [rdi+0x20],esi
 10025eb:	cmp    ah,BYTE PTR [rax]
 10025ed:	and    eax,0xa73
 10025f2:	add    BYTE PTR [rax],al
 10025f4:	add    BYTE PTR [rax],al
 10025f6:	add    BYTE PTR [rax],al
 10025f8:	or     DWORD PTR [rdi+0x20],edx
 10025fb:	cmp    ah,BYTE PTR [rax]
 10025fd:	and    eax,0xa73
 1002602:	add    BYTE PTR [rax],al
 1002604:	add    BYTE PTR [rax],al
 1002606:	add    BYTE PTR [rax],al
 1002608:	or     DWORD PTR [rbp+0x20],esi
 100260b:	cmp    ah,BYTE PTR [rax]
 100260d:	and    eax,0xa73
 1002612:	add    BYTE PTR [rax],al
 1002614:	add    BYTE PTR [rax],al
 1002616:	add    BYTE PTR [rax],al
 1002618:	or     DWORD PTR [rdx+0x20],eax
 100261b:	cmp    ah,BYTE PTR [rax]
 100261d:	and    eax,0xa73
 1002622:	add    BYTE PTR [rax],al
 1002624:	add    BYTE PTR [rax],al
 1002626:	add    BYTE PTR [rax],al
 1002628:	or     DWORD PTR [rsi+0x20],edx
 100262b:	cmp    ah,BYTE PTR [rax]
 100262d:	and    eax,0xa73
 1002632:	add    BYTE PTR [rax],al
 1002634:	add    BYTE PTR [rax],al
 1002636:	add    BYTE PTR [rax],al
 1002638:	or     DWORD PTR [rbp+0x20],edx
 100263b:	cmp    ah,BYTE PTR [rax]
 100263d:	and    eax,0xa73
 1002642:	add    BYTE PTR [rax],al
 1002644:	add    BYTE PTR [rax],al
 1002646:	add    BYTE PTR [rax],al
 1002648:	or     DWORD PTR [rbp+riz*2+0x20],esp
 100264c:	cmp    ah,BYTE PTR [rax]
 100264e:	and    eax,0xa73
 1002653:	add    BYTE PTR [rax],al
 1002655:	add    BYTE PTR [rax],al
 1002657:	add    BYTE PTR [rcx],cl
 1002659:	je     0x10026c0
 100265b:	and    BYTE PTR [rdx],bh
 100265d:	and    BYTE PTR [rip+0xa73],ah        # 0x10030d6
 1002663:	add    BYTE PTR [rax],al
 1002665:	add    BYTE PTR [rax],al
 1002667:	add    BYTE PTR [rcx],cl
 1002669:	xor    ah,BYTE PTR fs:[rax]
 100266c:	cmp    ah,BYTE PTR [rax]
 100266e:	and    eax,0xa73
 1002673:	add    BYTE PTR [rax],al
 1002675:	add    BYTE PTR [rax],al
 1002677:	add    BYTE PTR [rcx],cl
 1002679:	outs   dx,DWORD PTR fs:[rsi]
 100267b:	and    BYTE PTR [rdx],bh
 100267d:	and    BYTE PTR [rip+0xa73],ah        # 0x10030f6
 1002683:	add    BYTE PTR [rax],al
 1002685:	add    BYTE PTR [rax],al
 1002687:	add    BYTE PTR [rdi+rax*2],bh
 100268a:	gs je  0x10026d3
 100268d:	imul   esp,DWORD PTR [rbp+0x6c],0x74614464
 1002694:	(bad)  
 1002695:	push   rsp
 1002696:	jns    0x1002708
 1002698:	gs jl  0x10026ed
 100269b:	rex.RB push r12
 100269d:	and    BYTE PTR ds:[rsi+0x69],ah
 10026a1:	gs ins BYTE PTR es:[rdi],dx
 10026a3:	fs push rsp
 10026a5:	jns    0x1002717
 10026a7:	and    BYTE PTR gs:[rdx],bh
 10026aa:	and    BYTE PTR [rip+0xa64],ah        # 0x1003114
 10026b0:	cmp    al,0x47
 10026b2:	gs je  0x10026fb
 10026b5:	imul   esp,DWORD PTR [rbp+0x6c],0x6e654c64
 10026bc:	addr32 je 0x1002727
 10026bf:	add    BYTE PTR ds:[rax],al
 10026c2:	add    BYTE PTR [rax],al
 10026c4:	add    BYTE PTR [rax],al
 10026c6:	add    BYTE PTR [rax],al
 10026c8:	cmp    al,0x47
 10026ca:	gs je  0x1002713
 10026cd:	imul   esp,DWORD PTR [rbp+0x6c],0x6e654c64
 10026d4:	addr32 je 0x100273f
 10026d7:	jl     0x100272b
 10026d9:	rex.RB push r12
 10026db:	and    BYTE PTR ds:[rsi+0x69],ah
 10026df:	gs ins BYTE PTR es:[rdi],dx
 10026e1:	fs rex.WR
 10026e3:	outs   dx,BYTE PTR gs:[rsi]
 10026e5:	addr32 je 0x1002750
 10026e8:	and    BYTE PTR [rdx],bh
 10026ea:	and    BYTE PTR [rip+0xa31],ch        # 0x1003121
 10026f0:	cmp    al,0x47
 10026f2:	gs je  0x100273b
 10026f5:	imul   esp,DWORD PTR [rbp+0x6c],0x6e654c64
 10026fc:	addr32 je 0x1002767
 10026ff:	jl     0x100274a
 1002701:	rex.WRX
 1002702:	rex.RX
 1002703:	rex.WRXB
 1002704:	and    BYTE PTR ds:[rbp+0x73],dl
 1002708:	gs jb  0x100272b
 100270b:	push   0x43207469
 1002710:	je     0x1002784
 1002712:	ins    BYTE PTR es:[rdi],dx
 1002713:	sub    eax,0x726f2043
 1002718:	and    BYTE PTR [rbp+0x4f],al
 100271b:	rex.RX and BYTE PTR [rdx+0x65],r14b
 100271f:	(bad)  
 1002720:	movsxd ebp,DWORD PTR [rax+0x65]
 1002723:	and    BYTE PTR fs:[rdi+0x6e],ch
 1002727:	and    BYTE PTR [rcx+0x6e],ch
 100272a:	jo     0x10027a1
 100272c:	je     0x100274e
 100272e:	imul   bp,WORD PTR [rbp+riz*2+0x2c],0x7420
 1002735:	gs jb  0x10027a5
 1002738:	imul   ebp,DWORD PTR [rsi+0x61],0x676e6974
 100273f:	and    BYTE PTR [rax+rbp*2+0x65],dh
 1002743:	and    BYTE PTR [rcx+0x70],ah
 1002746:	jo     0x10027b4
 1002748:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 100274f:	or     al,BYTE PTR [rax]
 1002751:	add    BYTE PTR [rax],al
 1002753:	add    BYTE PTR [rax],al
 1002755:	add    BYTE PTR [rax],al
 1002757:	add    BYTE PTR [rdi+rax*2],bh
 100275a:	gs je  0x10027a3
 100275d:	imul   esp,DWORD PTR [rbp+0x6c],0x6e654c64
 1002764:	addr32 je 0x10027cf
 1002767:	jl     0x10027bb
 1002769:	rex.RB push r12
 100276b:	and    BYTE PTR ds:[rsi+0x69],ah
 100276f:	gs ins BYTE PTR es:[rdi],dx
 1002771:	fs rex.WR
 1002773:	outs   dx,BYTE PTR gs:[rsi]
 1002775:	addr32 je 0x10027e0
 1002778:	and    BYTE PTR [rdx],bh
 100277a:	and    BYTE PTR [rip+0xa64],ah        # 0x10031e4
 1002780:	cmp    al,0x47
 1002782:	gs je  0x10027cb
 1002785:	imul   esp,DWORD PTR [rbp+0x6c],0x72655464
 100278c:	ins    DWORD PTR es:[rdi],dx
 100278d:	imul   ebp,DWORD PTR [rsi+0x61],0x3e726f74
 1002794:	add    BYTE PTR [rax],al
 1002796:	add    BYTE PTR [rax],al
 1002798:	outs   dx,BYTE PTR ds:[rsi]
 1002799:	outs   dx,DWORD PTR ds:[rsi]
 100279a:	outs   dx,BYTE PTR ds:[rsi]
 100279b:	add    BYTE PTR gs:[rax],al
 100279e:	add    BYTE PTR [rax],al
 10027a0:	cmp    al,0x47
 10027a2:	gs je  0x10027eb
 10027a5:	imul   esp,DWORD PTR [rbp+0x6c],0x72655464
 10027ac:	ins    DWORD PTR es:[rdi],dx
 10027ad:	imul   ebp,DWORD PTR [rsi+0x61],0x7c726f74
 10027b4:	rex.WB
 10027b5:	rex.WRX
 10027b6:	rex.RX
 10027b7:	rex.WRXB
 10027b8:	and    BYTE PTR ds:[rbp+0x73],dl
 10027bc:	gs jb  0x10027df
 10027bf:	push   0x43207469
 10027c4:	je     0x1002838
 10027c6:	ins    BYTE PTR es:[rdi],dx
 10027c7:	sub    eax,0x726f2043
 10027cc:	and    BYTE PTR [rbp+0x4f],al
 10027cf:	rex.RX and BYTE PTR [rdx+0x65],r14b
 10027d3:	(bad)  
 10027d4:	movsxd ebp,DWORD PTR [rax+0x65]
 10027d7:	and    BYTE PTR fs:[rdi+0x6e],ch
 10027db:	and    BYTE PTR [rcx+0x6e],ch
 10027de:	jo     0x1002855
 10027e0:	je     0x1002802
 10027e2:	imul   bp,WORD PTR [rbp+riz*2+0x2c],0x7420
 10027e9:	gs jb  0x1002859
 10027ec:	imul   ebp,DWORD PTR [rsi+0x61],0x676e6974
 10027f3:	and    BYTE PTR [rax+rbp*2+0x65],dh
 10027f7:	and    BYTE PTR [rcx+0x70],ah
 10027fa:	jo     0x1002868
 10027fc:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 1002803:	or     al,BYTE PTR [rax]
	...
 100280d:	add    BYTE PTR [rax],al
 100280f:	add    BYTE PTR [rdi+rax*2],bh
 1002812:	gs je  0x100285b
 1002815:	imul   esp,DWORD PTR [rbp+0x6c],0x72655464
 100281c:	ins    DWORD PTR es:[rdi],dx
 100281d:	imul   ebp,DWORD PTR [rsi+0x61],0x7c726f74
 1002824:	push   rdx
 1002825:	rex.RB push r12
 1002827:	and    BYTE PTR ds:[rbp+0x78],ah
 100282b:	imul   esi,DWORD PTR [rbx+rax*2+0x6f],0x203a6564
 1002833:	push   rbx
 1002834:	push   rbp
 1002835:	rex.XB
 1002836:	rex.XB
 1002837:	rex.RB push r11
 1002839:	push   rbx
 100283a:	sub    al,0x20
 100283c:	imul   sp,WORD PTR [rbp+0x6c],0x5464
 1002842:	gs jb  0x10028b2
 1002845:	imul   ebp,DWORD PTR [rsi+0x61],0x20726f74
 100284c:	cmp    ah,BYTE PTR [rax]
 100284e:	fs gs data16 (bad) 
 1002852:	jne    0x10028c0
 1002854:	je     0x1002860
	...
 100285e:	add    BYTE PTR [rax],al
 1002860:	cmp    al,0x47
 1002862:	gs je  0x10028ab
 1002865:	imul   esp,DWORD PTR [rbp+0x6c],0x72655464
 100286c:	ins    DWORD PTR es:[rdi],dx
 100286d:	imul   ebp,DWORD PTR [rsi+0x61],0x7c726f74
 1002874:	push   rdi
 1002875:	push   r10
 1002877:	rex.WRX
 1002878:	and    BYTE PTR ds:[rsi+0x69],ah
 100287c:	gs ins BYTE PTR es:[rdi],dx
 100287e:	fs push rsp
 1002880:	gs jb  0x10028f0
 1002883:	imul   ebp,DWORD PTR [rsi+0x61],0x20726f74
 100288a:	jo     0x10028fe
 100288c:	outs   dx,DWORD PTR ds:[rsi]
 100288d:	jbe    0x10028f8
 100288f:	fs gs and BYTE PTR fs:[rdx+0x79],ah
 1002895:	and    BYTE PTR [rax+rbp*2+0x65],dh
 1002899:	and    BYTE PTR [rbp+0x73],dh
 100289c:	gs jb  0x10028bf
 100289f:	imul   esi,DWORD PTR [rbx+0x20],0x206f6f74
 10028a6:	ins    BYTE PTR es:[rdi],dx
 10028a7:	outs   dx,DWORD PTR ds:[rsi]
 10028a8:	outs   dx,BYTE PTR ds:[rsi]
 10028a9:	addr32 sub al,0x20
 10028ac:	je     0x1002920
 10028ae:	jne    0x100291e
 10028b0:	movsxd esp,DWORD PTR [rcx+0x74]
 10028b3:	imul   ebp,DWORD PTR [rsi+0x67],0xa746920
 10028ba:	add    BYTE PTR [rax],al
 10028bc:	add    BYTE PTR [rax],al
 10028be:	add    BYTE PTR [rax],al
 10028c0:	cmp    al,0x47
 10028c2:	gs je  0x100290b
 10028c5:	imul   esp,DWORD PTR [rbp+0x6c],0x72655464
 10028cc:	ins    DWORD PTR es:[rdi],dx
 10028cd:	imul   ebp,DWORD PTR [rsi+0x61],0x7c726f74
 10028d4:	push   rdx
 10028d5:	rex.RB push r12
 10028d7:	and    BYTE PTR ds:[rbp+0x78],ah
 10028db:	imul   esi,DWORD PTR [rbx+rax*2+0x6f],0x203a6564
 10028e3:	push   rbx
 10028e4:	push   rbp
 10028e5:	rex.XB
 10028e6:	rex.XB
 10028e7:	rex.RB push r11
 10028e9:	push   rbx
 10028ea:	sub    al,0x20
 10028ec:	imul   sp,WORD PTR [rbp+0x6c],0x5464
 10028f2:	gs jb  0x1002962
 10028f5:	imul   ebp,DWORD PTR [rsi+0x61],0x3a726f74
 10028fc:	and    BYTE PTR [rip+0x427b702a],ah        # 0x437b992c
 1002902:	rex.XB push r8
 1002904:	rex.RX
 1002905:	rex.WB
 1002906:	rex.RB
 1002907:	rex.WR
 1002908:	rex.R push rsp
 100290a:	rex.RB push r10
 100290c:	rex.WRB jge 0x1002919
 100290f:	add    BYTE PTR [rdi+rax*2],bh
 1002912:	gs je  0x100295b
 1002915:	imul   esp,DWORD PTR [rbp+0x6c],0x65725064
 100291c:	imul   di,WORD PTR [rax+0x3e],0x0
	...
 100292e:	add    BYTE PTR [rax],al
 1002930:	cmp    al,0x47
 1002932:	gs je  0x100297b
 1002935:	imul   esp,DWORD PTR [rbp+0x6c],0x65725064
 100293c:	imul   di,WORD PTR [rax+0x7c],0x4e49
 1002942:	rex.RX
 1002943:	rex.WRXB
 1002944:	and    BYTE PTR ds:[rbp+0x73],dl
 1002948:	gs jb  0x100296b
 100294b:	push   0x43207469
 1002950:	je     0x10029c4
 1002952:	ins    BYTE PTR es:[rdi],dx
 1002953:	sub    eax,0x726f2043
 1002958:	and    BYTE PTR [rbp+0x4f],al
 100295b:	rex.RX and BYTE PTR [rdx+0x65],r14b
 100295f:	(bad)  
 1002960:	movsxd ebp,DWORD PTR [rax+0x65]
 1002963:	and    BYTE PTR fs:[rdi+0x6e],ch
 1002967:	and    BYTE PTR [rcx+0x6e],ch
 100296a:	jo     0x10029e1
 100296c:	je     0x100298e
 100296e:	imul   bp,WORD PTR [rbp+riz*2+0x2c],0x7420
 1002975:	gs jb  0x10029e5
 1002978:	imul   ebp,DWORD PTR [rsi+0x61],0x676e6974
 100297f:	and    BYTE PTR [rax+rbp*2+0x65],dh
 1002983:	and    BYTE PTR [rcx+0x70],ah
 1002986:	jo     0x10029f4
 1002988:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 100298f:	or     al,BYTE PTR [rax]
 1002991:	add    BYTE PTR [rax],al
 1002993:	add    BYTE PTR [rax],al
 1002995:	add    BYTE PTR [rax],al
 1002997:	add    BYTE PTR [rdi+rax*2],bh
 100299a:	gs je  0x10029e3
 100299d:	imul   esp,DWORD PTR [rbp+0x6c],0x65725064
 10029a4:	imul   di,WORD PTR [rax+0x7c],0x4552
 10029aa:	push   rsp
 10029ab:	and    BYTE PTR ds:[rsi+0x69],ah
 10029af:	gs ins BYTE PTR es:[rdi],dx
 10029b1:	fs push rax
 10029b3:	jb     0x1002a1a
 10029b5:	imul   di,WORD PTR [rax+0x3a],0x2520
 10029bb:	or     al,BYTE PTR fs:[rax]
 10029be:	add    BYTE PTR [rax],al
 10029c0:	cmp    bl,BYTE PTR gs:[rbx+rsi*2+0x71]
 10029c5:	ins    BYTE PTR es:[rdi],dx
 10029c6:	xor    DWORD PTR [rcx],esi
 10029c8:	pop    rdi
 10029c9:	ins    DWORD PTR es:[rdi],dx
 10029ca:	(bad)  
 10029cb:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 10029d2:	ins    BYTE PTR es:[rdi],dx
 10029d3:	pop    rsp
 10029d4:	outs   dx,BYTE PTR ds:[rsi]
 10029d5:	je     0x1002a3b
 10029d7:	(bad)  
 10029d8:	ins    DWORD PTR es:[rdi],dx
 10029d9:	jae    0x1002a37
 10029db:	jae    0x1002a4e
 10029dd:	ins    BYTE PTR es:[rdi],dx
 10029de:	outs   dx,BYTE PTR ds:[rsi]
 10029df:	movsxd ebp,DWORD PTR [rcx+rbp*2+0x5c]
 10029e3:	jne    0x1002a59
 10029e5:	imul   ebp,DWORD PTR [rbx+rsi*2+0x5c],0x5c706362
 10029ed:	jae    0x1002a61
 10029ef:	movsxd ebx,DWORD PTR [rdx+riz*2+0x63]
 10029f3:	jo     0x1002a5c
 10029f5:	gs je  0x1002a6b
 10029f8:	movsxd ax,DWORD PTR cs:[rax]
 10029fc:	add    BYTE PTR [rax],al
 10029fe:	add    BYTE PTR [rax],al
 1002a00:	cmp    al,0x4f
 1002a02:	(bad)  
 1002a03:	je     0x1002a66
 1002a05:	imul   ebp,DWORD PTR [rsi+0x53],0x65767265
 1002a0c:	jb     0x1002a5b
 1002a0e:	gs je  0x1002a72
 1002a11:	fs (bad) 
 1002a13:	je     0x1002a76
 1002a15:	add    BYTE PTR ds:[rax],al
 1002a18:	and    eax,0x73
 1002a1d:	add    BYTE PTR [rax],al
 1002a1f:	add    BYTE PTR [rbx+0x65],dh
 1002a22:	ins    BYTE PTR es:[rdi],dx
 1002a23:	movsxd esi,DWORD PTR gs:[rax+riz*1+0x2a]
 1002a28:	and    BYTE PTR [rsi+0x72],ah
 1002a2b:	outs   dx,DWORD PTR ds:[rsi]
 1002a2c:	ins    DWORD PTR es:[rdi],dx
 1002a2d:	and    BYTE PTR [rip+0x73],ah        # 0x1002aa6
 1002a33:	add    BYTE PTR [rax],al
 1002a35:	add    BYTE PTR [rax],al
 1002a37:	add    BYTE PTR [rdi+rcx*2],bh
 1002a3a:	(bad)  
 1002a3b:	je     0x1002a9e
 1002a3d:	imul   ebp,DWORD PTR [rsi+0x53],0x65767265
 1002a44:	jb     0x1002a93
 1002a46:	gs je  0x1002aaa
 1002a49:	fs (bad) 
 1002a4b:	je     0x1002aae
 1002a4d:	jl     0x1002a98
 1002a4f:	rex.WRX
 1002a50:	rex.RX
 1002a51:	rex.WRXB
 1002a52:	and    BYTE PTR ds:[rbp+0x65],cl
 1002a56:	je     0x1002ab9
 1002a58:	fs (bad) 
 1002a5a:	je     0x1002abd
 1002a5c:	and    BYTE PTR [rcx+0x75],dl
 1002a5f:	gs jb  0x1002adb
 1002a62:	cmp    ah,BYTE PTR [rax]
 1002a64:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb229dd2
 1002a6a:	add    BYTE PTR [rax],al
 1002a6c:	add    BYTE PTR [rax],al
 1002a6e:	add    BYTE PTR [rax],al
 1002a70:	cmp    al,0x4f
 1002a72:	(bad)  
 1002a73:	je     0x1002ad6
 1002a75:	imul   ebp,DWORD PTR [rsi+0x53],0x65767265
 1002a7c:	jb     0x1002acb
 1002a7e:	gs je  0x1002ae2
 1002a81:	fs (bad) 
 1002a83:	je     0x1002ae6
 1002a85:	jl     0x1002ad0
 1002a87:	rex.WRX
 1002a88:	rex.RX
 1002a89:	rex.WRXB
 1002a8a:	and    BYTE PTR ds:[rbp+0x65],cl
 1002a8e:	je     0x1002af4
 1002a90:	(bad)  
 1002a91:	je     0x1002af4
 1002a93:	and    BYTE PTR [rcx+0x75],dl
 1002a96:	gs jb  0x1002b12
 1002a99:	and    BYTE PTR [rdx+0x65],dl
 1002a9c:	jae    0x1002b13
 1002a9e:	ins    BYTE PTR es:[rdi],dx
 1002a9f:	je     0x1002ac1
 1002aa1:	push   0x25207361
 1002aa6:	and    BYTE PTR fs:[rbx+0x6f],ah
 1002aaa:	ins    BYTE PTR es:[rdi],dx
 1002aab:	jne    0x1002b1a
 1002aad:	outs   dx,BYTE PTR ds:[rsi]
 1002aae:	sub    BYTE PTR [rbx+0x29],dh
 1002ab1:	or     al,BYTE PTR [rax]
	...
 1002abf:	add    BYTE PTR [rdi+rcx*2],bh
 1002ac2:	(bad)  
 1002ac3:	je     0x1002b26
 1002ac5:	imul   ebp,DWORD PTR [rsi+0x53],0x65767265
 1002acc:	jb     0x1002b1b
 1002ace:	gs je  0x1002b32
 1002ad1:	fs (bad) 
 1002ad3:	je     0x1002b36
 1002ad5:	jl     0x1002b1c
 1002ad7:	push   rdx
 1002ad8:	push   rdx
 1002ad9:	and    BYTE PTR ds:[rsi+0x61],al
 1002add:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 1002ae5:	(bad)  
 1002ae6:	ins    BYTE PTR es:[rdi],dx
 1002ae7:	ins    BYTE PTR es:[rdi],dx
 1002ae8:	outs   dx,DWORD PTR ds:[rsi]
 1002ae9:	movsxd esp,DWORD PTR [rcx+0x74]
 1002aec:	and    BYTE PTR gs:[rbp+0x65],ch
 1002af0:	ins    DWORD PTR es:[rdi],dx
 1002af1:	outs   dx,DWORD PTR ds:[rsi]
 1002af2:	jb     0x1002b6d
 1002af4:	and    BYTE PTR [rsi+0x6f],ah
 1002af7:	jb     0x1002b19
 1002af9:	and    eax,0x6f632064
 1002afe:	ins    BYTE PTR es:[rdi],dx
 1002aff:	jne    0x1002b6e
 1002b01:	outs   dx,BYTE PTR ds:[rsi]
 1002b02:	jae    0x1002b0e
	...
 1002b10:	or     DWORD PTR [rbx+0x6f],eax
 1002b13:	ins    BYTE PTR es:[rdi],dx
 1002b14:	jne    0x1002b83
 1002b16:	outs   dx,BYTE PTR ds:[rsi]
 1002b17:	and    BYTE PTR [rax],ah
 1002b19:	and    BYTE PTR [rax],ah
 1002b1b:	and    BYTE PTR [rdx],bh
 1002b1d:	and    BYTE PTR [rip+0x4e090a64],ah        # 0x4f093587
 1002b23:	(bad)  
 1002b24:	ins    DWORD PTR es:[rdi],dx
 1002b25:	and    BYTE PTR gs:[rax],ah
 1002b28:	and    BYTE PTR [rax],ah
 1002b2a:	and    BYTE PTR [rax],ah
 1002b2c:	and    BYTE PTR [rdx],bh
 1002b2e:	and    BYTE PTR [rip+0x90a7368],ah        # 0xa0a9e9c
 1002b34:	push   rbx
 1002b35:	gs jb  0x1002bae
 1002b38:	gs jb  0x1002b8f
 1002b3b:	jns    0x1002bad
 1002b3d:	and    BYTE PTR gs:[rdx],bh
 1002b40:	and    BYTE PTR [rip+0x43090a64],ah        # 0x440935aa
 1002b46:	outs   dx,DWORD PTR ds:[rsi]
 1002b47:	ins    BYTE PTR es:[rdi],dx
 1002b48:	jne    0x1002bb7
 1002b4a:	outs   dx,BYTE PTR ds:[rsi]
 1002b4b:	push   rbx
 1002b4c:	imul   edi,DWORD PTR [rdx+0x65],0x25203a20
 1002b53:	rex.WB jne 0x1002b60
 1002b56:	or     DWORD PTR [rcx+0x73],ecx
 1002b59:	push   rsi
 1002b5a:	(bad)  
 1002b5b:	jb     0x1002bc6
 1002b5d:	(bad)  
 1002b5e:	(bad)  
 1002b5f:	ins    BYTE PTR es:[rdi],dx
 1002b60:	and    BYTE PTR gs:[rdx],bh
 1002b63:	and    BYTE PTR [rip+0x4f427b64],ah        # 0x5042a6cd
 1002b69:	rex.WRXB
 1002b6a:	rex.WR jge 0x1002b77
 1002b6d:	add    BYTE PTR [rax],al
 1002b6f:	add    BYTE PTR [rdi+rcx*2],bh
 1002b72:	(bad)  
 1002b73:	je     0x1002bd6
 1002b75:	imul   ebp,DWORD PTR [rsi+0x53],0x65767265
 1002b7c:	jb     0x1002bcb
 1002b7e:	gs je  0x1002be2
 1002b81:	fs (bad) 
 1002b83:	je     0x1002be6
 1002b85:	jl     0x1002bcc
 1002b87:	push   rdx
 1002b88:	push   rdx
 1002b89:	and    BYTE PTR ds:[rsi+0x61],al
 1002b8d:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x20746120
 1002b95:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1002b97:	ins    BYTE PTR es:[rdi],dx
 1002b98:	jne    0x1002c07
 1002b9a:	outs   dx,BYTE PTR ds:[rsi]
 1002b9b:	cmp    ah,BYTE PTR [rax]
 1002b9d:	and    eax,0xa64
 1002ba2:	add    BYTE PTR [rax],al
 1002ba4:	add    BYTE PTR [rax],al
 1002ba6:	add    BYTE PTR [rax],al
 1002ba8:	cmp    al,0x4f
 1002baa:	(bad)  
 1002bab:	je     0x1002c0e
 1002bad:	imul   ebp,DWORD PTR [rsi+0x53],0x65767265
 1002bb4:	jb     0x1002c03
 1002bb6:	gs je  0x1002c1a
 1002bb9:	fs (bad) 
 1002bbb:	je     0x1002c1e
 1002bbd:	jl     0x1002c11
 1002bbf:	rex.RB push r12
 1002bc1:	and    BYTE PTR ds:[rbp+0x78],ah
 1002bc5:	imul   esi,DWORD PTR [rbx+rax*2+0x6f],0x203a6564
 1002bcd:	and    eax,0xa7368
 1002bd2:	add    BYTE PTR [rax],al
 1002bd4:	add    BYTE PTR [rax],al
 1002bd6:	add    BYTE PTR [rax],al
 1002bd8:	push   rbx
 1002bd9:	push   rbp
 1002bda:	rex.XB
 1002bdb:	rex.XB
 1002bdc:	rex.RB
 1002bdd:	rex.RB
 1002bde:	add    BYTE PTR [rsi+0x41],r8b
 1002be2:	rex.WB
 1002be3:	rex.WR add BYTE PTR [rax],r8b
 1002be6:	add    BYTE PTR [rax],al
 1002be8:	cmp    bl,BYTE PTR gs:[rbx+rsi*2+0x71]
 1002bed:	ins    BYTE PTR es:[rdi],dx
 1002bee:	xor    DWORD PTR [rcx],esi
 1002bf0:	pop    rdi
 1002bf1:	ins    DWORD PTR es:[rdi],dx
 1002bf2:	(bad)  
 1002bf3:	imul   ebp,DWORD PTR [rsi+0x5f],0x71735c74
 1002bfa:	ins    BYTE PTR es:[rdi],dx
 1002bfb:	pop    rsp
 1002bfc:	outs   dx,BYTE PTR ds:[rsi]
 1002bfd:	je     0x1002c63
 1002bff:	(bad)  
 1002c00:	ins    DWORD PTR es:[rdi],dx
 1002c01:	jae    0x1002c5f
 1002c03:	jae    0x1002c76
 1002c05:	ins    BYTE PTR es:[rdi],dx
 1002c06:	outs   dx,BYTE PTR ds:[rsi]
 1002c07:	movsxd ebp,DWORD PTR [rcx+rbp*2+0x5c]
 1002c0b:	jne    0x1002c81
 1002c0d:	imul   ebp,DWORD PTR [rbx+rsi*2+0x5c],0x5c706362
 1002c15:	jae    0x1002c89
 1002c17:	movsxd ebx,DWORD PTR [rdx+riz*2+0x75]
 1002c1b:	ins    BYTE PTR es:[rdi],dx
 1002c1c:	imul   ebp,DWORD PTR [rbp+0x61],0x69
 1002c20:	outs   dx,BYTE PTR ds:[rsi]
 1002c21:	movsxd eax,DWORD PTR cs:[rax]
 1002c24:	cmp    al,0x42
 1002c26:	rex.XB push r8
 1002c28:	add    BYTE PTR ds:[rax],al
 1002c2b:	add    BYTE PTR [rax],al
 1002c2d:	add    BYTE PTR [rax],al
 1002c2f:	add    BYTE PTR [rdx+rax*2],bh
 1002c32:	rex.XB push r8
 1002c34:	jl     0x1002c77
 1002c36:	push   rdx
 1002c37:	rex.RXB push r11
 1002c39:	add    BYTE PTR ds:[rax],al
 1002c3c:	add    BYTE PTR [rax],al
 1002c3e:	add    BYTE PTR [rax],al
 1002c40:	cmp    al,0x42
 1002c42:	rex.XB push r8
 1002c44:	jl     0x1002c87
 1002c46:	push   rdx
 1002c47:	rex.RXB push r11
 1002c49:	and    BYTE PTR ds:[rcx+0x72],ah
 1002c4d:	movsxd edi,DWORD PTR [edx]
 1002c50:	and    BYTE PTR [rip+0xa64],ah        # 0x10036ba
 1002c56:	add    BYTE PTR [rax],al
 1002c58:	and    eax,0x203a6434
 1002c5d:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb229fcb
	...
 1002c6f:	add    BYTE PTR [rax+rax*1],bh
 1002c72:	rex.X add BYTE PTR [rbx+0x0],al
 1002c76:	push   rax
 1002c77:	add    BYTE PTR [rax+rax*1+0x49],bh
 1002c7b:	add    BYTE PTR [rsi+0x0],cl
 1002c7e:	rex.RX add BYTE PTR [rdi+0x0],r9b
 1002c82:	add    BYTE PTR ds:[rax],ah
 1002c85:	add    BYTE PTR [rbx+0x0],al
 1002c88:	outs   dx,DWORD PTR ds:[rsi]
 1002c89:	add    BYTE PTR [rsi+0x0],ch
 1002c8c:	jae    0x1002c8e
 1002c8e:	outs   dx,DWORD PTR ds:[rsi]
 1002c8f:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002c93:	add    BYTE PTR [rax],ah
 1002c95:	add    BYTE PTR [rax+rax*1+0x61],ch
 1002c99:	add    BYTE PTR [rsi+0x0],ch
 1002c9c:	add    BYTE PTR [ebp+0x0],dh
 1002ca0:	(bad)  
 1002ca1:	add    BYTE PTR [rdi+0x0],ah
 1002ca4:	add    BYTE PTR gs:[rax],ah
 1002ca7:	add    BYTE PTR [rcx+0x0],ch
 1002caa:	add    BYTE PTR fs:[rax],ah
 1002cad:	add    BYTE PTR [rcx+0x0],ch
 1002cb0:	jae    0x1002cb2
 1002cb2:	and    BYTE PTR [rax],al
 1002cb4:	and    eax,0xa006400
 1002cb9:	add    BYTE PTR [rax],al
 1002cbb:	add    BYTE PTR [rax],al
 1002cbd:	add    BYTE PTR [rax],al
 1002cbf:	add    BYTE PTR [rdx+0x63],ah
 1002cc2:	jo     0x1002cf2
 1002cc4:	jb     0x1002d32
 1002cc6:	ins    BYTE PTR es:[rdi],dx
 1002cc7:	add    BYTE PTR [rbp+0x6e],dl
 1002cca:	(bad)  
 1002ccb:	(bad)  
 1002ccc:	ins    BYTE PTR es:[rdi],dx
 1002ccd:	and    BYTE PTR gs:[rdi+rbp*2+0x20],dh
 1002cd2:	ins    BYTE PTR es:[rdi],dx
 1002cd3:	outs   dx,DWORD PTR ds:[rsi]
 1002cd4:	(bad)  
 1002cd5:	and    BYTE PTR fs:[rdx+0x43],al
 1002cd9:	push   rax
 1002cda:	and    BYTE PTR [rdx+0x65],dh
 1002cdd:	jae    0x1002d4e
 1002cdf:	jne    0x1002d53
 1002ce1:	movsxd esp,DWORD PTR [rbp+0x20]
 1002ce4:	rex.R
 1002ce5:	rex.WR
 1002ce6:	rex.WR
 1002ce7:	and    BYTE PTR cs:[rax],ah
 1002cea:	rex.X
 1002ceb:	rex.XB push r8
 1002ced:	and    BYTE PTR [rbx+0x61],ah
 1002cf0:	outs   dx,BYTE PTR ds:[rsi]
 1002cf1:	outs   dx,BYTE PTR ds:[rsi]
 1002cf2:	outs   dx,DWORD PTR ds:[rsi]
 1002cf3:	je     0x1002d15
 1002cf5:	movsxd ebp,DWORD PTR [rdi+0x6e]
 1002cf8:	je     0x1002d63
 1002cfa:	outs   dx,BYTE PTR ds:[rsi]
 1002cfb:	jne    0x1002d62
 1002cfd:	or     al,BYTE PTR cs:[rax]
 1002d00:	cmp    al,0x42
 1002d02:	rex.XB push r8
 1002d04:	jl     0x1002d58
 1002d06:	rex.RB push r12
 1002d08:	and    BYTE PTR ds:[rbp+0x78],ah
 1002d0c:	imul   esi,DWORD PTR [rbx+rax*2+0x6f],0x203a6564
 1002d14:	and    eax,0x3c000a64
 1002d19:	rex.X
 1002d1a:	rex.XB push r8
 1002d1c:	jl     0x1002d63
 1002d1e:	push   rdx
 1002d1f:	push   rdx
 1002d20:	and    BYTE PTR ds:[rcx+0x62],al
 1002d24:	outs   dx,DWORD PTR ds:[rsi]
 1002d25:	jb     0x1002d9b
 1002d27:	and    BYTE PTR [rbp+0x76],ah
 1002d2a:	outs   dx,BYTE PTR gs:[rsi]
 1002d2c:	je     0x1002d4e
 1002d2e:	movsxd ebp,DWORD PTR [rdi+0x75]
 1002d31:	ins    BYTE PTR es:[rdi],dx
 1002d32:	and    BYTE PTR fs:[rsi+0x6f],ch
 1002d36:	je     0x1002d58
 1002d38:	(bad)  
 1002d39:	and    BYTE PTR gs:[rbx+0x72],ah
 1002d3d:	gs (bad) 
 1002d3f:	je     0x1002da6
 1002d41:	or     al,BYTE PTR fs:[rax]
 1002d44:	add    BYTE PTR [rax],al
 1002d46:	add    BYTE PTR [rax],al
 1002d48:	cmp    al,0x42
 1002d4a:	rex.XB push r8
 1002d4c:	jl     0x1002d97
 1002d4e:	rex.WRX
 1002d4f:	rex.RX
 1002d50:	rex.WRXB
 1002d51:	and    BYTE PTR ds:[rcx+riz*2+0x74],ah
 1002d56:	(bad)  
 1002d57:	(bad)  
 1002d59:	jae    0x1002dc0
 1002d5b:	and    BYTE PTR [rbx+0x6f],ah
 1002d5e:	outs   dx,BYTE PTR ds:[rsi]
 1002d5f:	outs   dx,BYTE PTR ds:[rsi]
 1002d60:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1002d65:	outs   dx,BYTE PTR ds:[rsi]
 1002d66:	and    BYTE PTR [rdi+0x70],ch
 1002d69:	je     0x1002dd4
 1002d6b:	outs   dx,DWORD PTR ds:[rsi]
 1002d6c:	outs   dx,BYTE PTR ds:[rsi]
 1002d6d:	cmp    ah,BYTE PTR [rax]
 1002d6f:	and    eax,0xa7368
 1002d74:	add    BYTE PTR [rax],al
 1002d76:	add    BYTE PTR [rax],al
 1002d78:	and    eax,0x25732573
 1002d7d:	jae    0x1002da4
 1002d7f:	jae    0x1002da6
 1002d81:	jae    0x1002da8
 1002d83:	jae    0x1002daa
 1002d85:	jae    0x1002d87
 1002d87:	add    BYTE PTR [rdx+rax*2],bh
 1002d8a:	rex.XB push r8
 1002d8c:	jl     0x1002dd7
 1002d8e:	rex.WRX
 1002d8f:	rex.RX
 1002d90:	rex.WRXB
 1002d91:	and    BYTE PTR ds:[rbx+0x6f],al
 1002d95:	outs   dx,BYTE PTR ds:[rsi]
 1002d96:	outs   dx,BYTE PTR ds:[rsi]
 1002d97:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1002d9c:	outs   dx,BYTE PTR ds:[rsi]
 1002d9d:	push   rbx
 1002d9e:	je     0x1002e12
 1002da0:	imul   ebp,DWORD PTR [rsi+0x67],0x2522203a
 1002da7:	push   0xa2273
 1002dac:	add    BYTE PTR [rax],al
 1002dae:	add    BYTE PTR [rax],al
 1002db0:	and    eax,0x25732573
 1002db5:	jae    0x1002ddc
 1002db7:	jae    0x1002dde
 1002db9:	jae    0x1002de0
 1002dbb:	jae    0x1002de2
 1002dbd:	jae    0x1002de4
 1002dbf:	jae    0x1002de6
 1002dc1:	jae    0x1002de8
 1002dc3:	jae    0x1002dea
 1002dc5:	jae    0x1002dc7
 1002dc7:	add    BYTE PTR [rdx],ch
 1002dc9:	sub    ch,BYTE PTR [rdx]
 1002dcb:	add    BYTE PTR [rax],al
 1002dcd:	add    BYTE PTR [rax],al
 1002dcf:	add    BYTE PTR [rdx+riz*2],bh
 1002dd2:	movsxd esi,DWORD PTR [rax+0x5f]
 1002dd5:	imul   ebp,DWORD PTR [rsi+0x69],0x43427c74
 1002ddc:	push   rax
 1002ddd:	jl     0x1002e20
 1002ddf:	push   rax
 1002de0:	rex.WB jl 0x1002e26
 1002de3:	rex.B
 1002de4:	rex.WR
 1002de5:	rex.WR
 1002de6:	and    BYTE PTR ds:[rip+0x44487b70],ah        # 0x4548a95d
 1002ded:	rex.X
 1002dee:	rex.XB jge 0x1002e1d
 1002df1:	and    BYTE PTR [rcx+riz*2+0x62],dh
 1002df5:	ins    BYTE PTR es:[rdi],dx
 1002df6:	gs rex.WRX (bad) 
 1002df9:	ins    DWORD PTR es:[rdi],dx
 1002dfa:	cmp    ah,BYTE PTR gs:[rax]
 1002dfd:	and    ah,BYTE PTR [rip+0x2c227368]        # 0x2d22a16b
 1002e03:	and    BYTE PTR [rcx+riz*2+0x74],ah
 1002e07:	(bad)  
 1002e08:	imul   r13d,DWORD PTR [rbp+r12*2+0x3a],0x68252220
 1002e11:	jae    0x1002e35
 1002e13:	sub    al,0x20
 1002e15:	gs jb  0x1002e8a
 1002e18:	outs   dx,DWORD PTR ds:[rsi]
 1002e19:	jb     0x1002e61
 1002e1b:	imul   ebp,DWORD PTR [rbp+riz*2+0x3a],0x68252220
 1002e23:	jae    0x1002e47
 1002e25:	sub    al,0x20
 1002e27:	imul   esi,DWORD PTR fs:[rdx+0x65],0x6f697463
 1002e2f:	outs   dx,BYTE PTR ds:[rsi]
 1002e30:	cmp    ah,BYTE PTR [rax]
 1002e32:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb22a1a0
	...
 1002e40:	cmp    al,0x62
 1002e42:	movsxd esi,DWORD PTR [rax+0x5f]
 1002e45:	movsxd ebp,DWORD PTR [rdi+0x6e]
 1002e48:	je     0x1002ebc
 1002e4a:	outs   dx,DWORD PTR ds:[rsi]
 1002e4b:	ins    BYTE PTR es:[rdi],dx
 1002e4c:	jl     0x1002e90
 1002e4e:	rex.XB push r8
 1002e50:	jl     0x1002e93
 1002e52:	push   rax
 1002e53:	rex.WB jl 0x1002e99
 1002e56:	rex.B
 1002e57:	rex.WR
 1002e58:	rex.WR
 1002e59:	and    BYTE PTR ds:[rip+0x44487b70],ah        # 0x4548a9d0
 1002e60:	rex.X
 1002e61:	rex.XB jge 0x1002e90
 1002e64:	and    BYTE PTR [rdi+0x70],cl
 1002e67:	je     0x1002ed2
 1002e69:	outs   dx,DWORD PTR ds:[rsi]
 1002e6a:	outs   dx,BYTE PTR ds:[rsi]
 1002e6b:	cmp    ah,BYTE PTR [rax]
 1002e6d:	and    eax,0x4f202c64
 1002e72:	jo     0x1002ee8
 1002e74:	imul   ebp,DWORD PTR [rdi+0x6e],0x756c6156
 1002e7b:	cmp    ah,BYTE PTR gs:[rax]
 1002e7e:	and    eax,0x7b702a2e
 1002e83:	rex.X
 1002e84:	rex.XB push r8
 1002e86:	rex.XB
 1002e87:	rex.WRXB
 1002e88:	rex.WRX push rsp
 1002e8a:	push   rdx
 1002e8b:	rex.WRXB
 1002e8c:	rex.WR
 1002e8d:	rex.WRXB push r8
 1002e8f:	push   rsp
 1002e90:	rex.WB
 1002e91:	rex.WRXB
 1002e92:	rex.WRX jge 0x1002e9f
	...
 1002e9d:	add    BYTE PTR [rax],al
 1002e9f:	add    BYTE PTR [rdx+riz*2],bh
 1002ea2:	movsxd esi,DWORD PTR [rax+0x5f]
 1002ea5:	jae    0x1002f0c
 1002ea7:	je     0x1002f0b
 1002ea9:	jne    0x1002f17
 1002eab:	imul   ebp,DWORD PTR [rbp+0x6f],0x64
 1002eaf:	gs jl  0x1002ef4
 1002eb2:	rex.XB push r8
 1002eb4:	jl     0x1002ef7
 1002eb6:	push   rax
 1002eb7:	rex.WB jl 0x1002efd
 1002eba:	rex.B
 1002ebb:	rex.WR
 1002ebc:	rex.WR
 1002ebd:	and    BYTE PTR ds:[rip+0x44487b70],ah        # 0x4548aa34
 1002ec4:	rex.X
 1002ec5:	rex.XB jge 0x1002ef4
 1002ec8:	and    BYTE PTR [rax+0x72],dh
 1002ecb:	outs   dx,DWORD PTR ds:[rsi]
 1002ecc:	jo     0x1002f33
 1002ece:	jb     0x1002f44
 1002ed0:	jns    0x1002f0c
 1002ed2:	and    BYTE PTR [rip+0x70202c64],ah        # 0x71205b3c
 1002ed8:	rex.RX imul r12d,DWORD PTR [rbp+0x6c],0x25203a64
 1002ee0:	jo     0x1002f0e
 1002ee2:	and    BYTE PTR [rbx+0x62],ah
 1002ee5:	rex.RX imul r12d,DWORD PTR [rbp+0x6c],0x25203a64
 1002eed:	fs sub al,0x20
 1002ef0:	jo     0x1002f44
 1002ef2:	outs   dx,DWORD PTR ds:[rsi]
 1002ef3:	ja     0x1002f2f
 1002ef5:	and    BYTE PTR [rip+0x63202c70],ah        # 0x64205b6b
 1002efb:	(bad)
 1002f00:	and    BYTE PTR [rip+0xa64],ah        # 0x100396a
	...
 1002f0e:	add    BYTE PTR [rax],al
 1002f10:	cmp    al,0x62
 1002f12:	movsxd esi,DWORD PTR [rax+0x5f]
 1002f15:	movsxd ebp,DWORD PTR [rdi+0x6e]
 1002f18:	je     0x1002f8c
 1002f1a:	outs   dx,DWORD PTR ds:[rsi]
 1002f1b:	ins    BYTE PTR es:[rdi],dx
 1002f1c:	jl     0x1002f60
 1002f1e:	rex.XB push r8
 1002f20:	jl     0x1002f63
 1002f22:	push   rax
 1002f23:	rex.WB jl 0x1002f69
 1002f26:	rex.B
 1002f27:	rex.WR
 1002f28:	rex.WR
 1002f29:	and    BYTE PTR ds:[rip+0x44487b70],ah        # 0x4548aaa0
 1002f30:	rex.X
 1002f31:	rex.XB jge 0x1002f60
 1002f34:	and    BYTE PTR [rdi+0x70],cl
 1002f37:	je     0x1002fa2
 1002f39:	outs   dx,DWORD PTR ds:[rsi]
 1002f3a:	outs   dx,BYTE PTR ds:[rsi]
 1002f3b:	cmp    ah,BYTE PTR [rax]
 1002f3d:	and    eax,0x4f202c64
 1002f42:	jo     0x1002fb8
 1002f44:	imul   ebp,DWORD PTR [rdi+0x6e],0x756c6156
 1002f4b:	cmp    ah,BYTE PTR gs:[rax]
 1002f4e:	and    eax,0x64343649
 1002f53:	or     al,BYTE PTR [rax]
 1002f55:	add    BYTE PTR [rax],al
 1002f57:	add    BYTE PTR [rdx+rax*2],bh
 1002f5a:	rex.XB push r8
 1002f5c:	jl     0x1002fa3
 1002f5e:	push   rdx
 1002f5f:	push   rdx
 1002f60:	and    BYTE PTR ds:[rsi+0x61],al
 1002f64:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 1002f6c:	imul   ebp,DWORD PTR [rsi+0x73],0x6c6c6174
 1002f73:	and    BYTE PTR [rbx+0x74],al
 1002f76:	jb     0x1002fe4
 1002f78:	sub    eax,0x74432f43
 1002f7d:	jb     0x1002feb
 1002f7f:	sub    eax,0x61657242
 1002f84:	imul   esp,DWORD PTR [rax],0x73
 1002f87:	imul   esp,DWORD PTR [rdi+0x6e],0x68206c61
 1002f8e:	(bad)  
 1002f8f:	outs   dx,BYTE PTR ds:[rsi]
 1002f90:	fs ins BYTE PTR es:[rdi],dx
 1002f92:	gs jb  0x1002f9f
 1002f95:	add    BYTE PTR [rax],al
 1002f97:	add    BYTE PTR [rdx+riz*2],bh
 1002f9a:	movsxd esi,DWORD PTR [rax+0x5f]
 1002f9d:	jb     0x1003004
 1002f9f:	(bad)  
 1002fa0:	fs ins WORD PTR es:[rdi],dx
 1002fa3:	je     0x1003021
 1002fa5:	rex.X
 1002fa6:	rex.XB push r8
 1002fa8:	jl     0x1002feb
 1002faa:	push   rax
 1002fab:	rex.WB jl 0x1002ff1
 1002fae:	rex.B
 1002faf:	rex.WR
 1002fb0:	rex.WR
 1002fb1:	and    BYTE PTR ds:[rip+0x44487b70],ah        # 0x4548ab28
 1002fb8:	rex.X
 1002fb9:	rex.XB jge 0x1002fe8
 1002fbc:	and    BYTE PTR [rsi+0x6f],ah
 1002fbf:	jb     0x100302e
 1002fc1:	(bad)  
 1002fc2:	je     0x100300a
 1002fc4:	imul   ebp,DWORD PTR [rbp+riz*2+0x3a],0x68252220
 1002fcc:	jae    0x1002ff0
 1002fce:	or     al,BYTE PTR [rax]
 1002fd0:	cmp    al,0x42
 1002fd2:	rex.XB push r8
 1002fd4:	jl     0x100301f
 1002fd6:	rex.WRX
 1002fd7:	rex.RX
 1002fd8:	rex.WRXB
 1002fd9:	and    BYTE PTR ds:[rbx+0x77],dl
 1002fdd:	imul   esi,DWORD PTR [rbx+riz*2+0x68],0x20676e69
 1002fe5:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1002fe7:	outs   dx,BYTE PTR ds:[rsi]
 1002fe8:	outs   dx,BYTE PTR ds:[rsi]
 1002fe9:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1002fee:	outs   dx,BYTE PTR ds:[rsi]
 1002fef:	and    BYTE PTR [rip+0x44487b70],ah        # 0x4548ab65
 1002ff5:	rex.X
 1002ff6:	rex.XB jge 0x1003019
 1002ff9:	je     0x100306a
 1002ffb:	and    BYTE PTR [rcx+0x73],al
 1002ffe:	jns    0x100306e
 1003000:	movsxd ebp,DWORD PTR [rax+0x72]
 1003003:	outs   dx,DWORD PTR ds:[rsi]
 1003004:	outs   dx,BYTE PTR ds:[rsi]
 1003005:	outs   dx,DWORD PTR ds:[rsi]
 1003006:	jne    0x100307b
 1003008:	and    BYTE PTR [rbp+0x6f],cl
 100300b:	fs or  al,BYTE PTR gs:[rax]
 100300f:	add    BYTE PTR [rdx+riz*2],bh
 1003012:	movsxd esi,DWORD PTR [rax+0x5f]
 1003015:	gs js  0x100307d
 1003018:	movsxd edi,DWORD PTR [rdx+rax*2+0x43]
 100301c:	push   rax
 100301d:	jl     0x1003060
 100301f:	push   rax
 1003020:	rex.WB jl 0x1003066
 1003023:	rex.B
 1003024:	rex.WR
 1003025:	rex.WR
 1003026:	and    BYTE PTR ds:[rip+0x44487b70],ah        # 0x4548ab9d
 100302d:	rex.X
 100302e:	rex.XB jge 0x100303b
 1003031:	add    BYTE PTR [rax],al
 1003033:	add    BYTE PTR [rax],al
 1003035:	add    BYTE PTR [rax],al
 1003037:	add    BYTE PTR [rdx+rax*2],bh
 100303a:	rex.XB push r8
 100303c:	jl     0x1003087
 100303e:	rex.WRX
 100303f:	rex.RX
 1003040:	rex.WRXB
 1003041:	and    BYTE PTR ds:[rdx+0x63],ah
 1003045:	jo     0x1003067
 1003047:	outs   dx,DWORD PTR ds:[rsi]
 1003048:	jo     0x10030af
 100304a:	jb     0x10030ad
 100304c:	je     0x10030b7
 100304e:	outs   dx,DWORD PTR ds:[rsi]
 100304f:	outs   dx,BYTE PTR ds:[rsi]
 1003050:	and    BYTE PTR [rsi+0x61],ah
 1003053:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0xa2e
 100305b:	add    BYTE PTR [rax],al
 100305d:	add    BYTE PTR [rax],al
 100305f:	add    BYTE PTR [rdx+rax*2],bh
 1003062:	rex.XB push r8
 1003064:	jl     0x10030af
 1003066:	rex.WRX
 1003067:	rex.RX
 1003068:	rex.WRXB
 1003069:	and    BYTE PTR ds:[rdx+0x63],ah
 100306d:	jo     0x100308f
 100306f:	outs   dx,DWORD PTR ds:[rsi]
 1003070:	jo     0x10030d7
 1003072:	jb     0x10030d5
 1003074:	je     0x10030df
 1003076:	outs   dx,DWORD PTR ds:[rsi]
 1003077:	outs   dx,BYTE PTR ds:[rsi]
 1003078:	and    BYTE PTR [rbx+0x75],dh
 100307b:	movsxd esp,DWORD PTR [rbx+0x65]
 100307e:	gs fs gs and BYTE PTR fs:[rcx+0x66],ah
 1003085:	je     0x10030ec
 1003087:	jb     0x10030a9
 1003089:	movsxd ebp,DWORD PTR [rdi+0x70]
 100308c:	jns    0x10030f7
 100308e:	outs   dx,BYTE PTR ds:[rsi]
 100308f:	and    BYTE PTR [eip+0x64343649],ah        # 0x653466df
 1003096:	and    BYTE PTR [rdx+0x6f],dh
 1003099:	ja     0x100310e
 100309b:	or     al,BYTE PTR [rax]
 100309d:	add    BYTE PTR [rax],al
 100309f:	add    BYTE PTR [rdx+rax*2],bh
 10030a2:	rex.XB push r8
 10030a4:	jl     0x10030ef
 10030a6:	rex.WRX
 10030a7:	rex.RX
 10030a8:	rex.WRXB
 10030a9:	and    BYTE PTR ds:[rbx+0x74],al
 10030ad:	jb     0x100311b
 10030af:	sub    eax,0x74432f43
 10030b4:	jb     0x1003122
 10030b6:	sub    eax,0x61657242
 10030bb:	imul   esp,DWORD PTR [rax],0x65
 10030be:	jbe    0x1003125
 10030c0:	outs   dx,BYTE PTR ds:[rsi]
 10030c1:	je     0x10030e3
 10030c3:	imul   si,WORD PTR [rdx+0x65],0xa64
 10030c9:	add    BYTE PTR [rax],al
 10030cb:	add    BYTE PTR [rax],al
 10030cd:	add    BYTE PTR [rax],al
 10030cf:	add    BYTE PTR [rdx+rax*2],bh
 10030d2:	rex.XB push r8
 10030d4:	jl     0x100311f
 10030d6:	rex.WRX
 10030d7:	rex.RX
 10030d8:	rex.WRXB
 10030d9:	and    BYTE PTR ds:[rdx],ah
 10030dc:	and    eax,0xa227368
 10030e1:	add    BYTE PTR [rax],al
 10030e3:	add    BYTE PTR [rax],al
 10030e5:	add    BYTE PTR [rax],al
 10030e7:	add    BYTE PTR [rsi+0x49],al
 10030ea:	push   rdx
 10030eb:	rex.RB pop r15
 10030ed:	push   rsp
 10030ee:	push   rdx
 10030ef:	rex.WB
 10030f0:	rex.RXB
 10030f1:	rex.RXB
 10030f2:	rex.RB push r10
 10030f4:	push   rbx
 10030f5:	add    BYTE PTR [rax],al
 10030f7:	add    BYTE PTR [rbx+0x51],dl
 10030fa:	rex.WR push rbx
 10030fc:	je     0x100315f
 10030fe:	je     0x1003165
 1003100:	and    BYTE PTR [rip+0x2c732520],bh        # 0x2d735626
 1003106:	and    BYTE PTR [rsi+0x61],cl
 1003109:	je     0x1003174
 100310b:	jbe    0x1003172
 100310d:	rex.RB jb 0x1003182
 1003110:	outs   dx,DWORD PTR ds:[rsi]
 1003111:	jb     0x1003133
 1003113:	cmp    eax,0x646c2520
 1003118:	or     dl,BYTE PTR [rdi+0x61]
 100311b:	jb     0x100318b
 100311d:	imul   ebp,DWORD PTR [rsi+0x67],0x25203d20
 1003124:	jae    0x1003130
 1003126:	add    BYTE PTR [rax],al
 1003128:	cmp    al,0x42
 100312a:	rex.XB push r8
 100312c:	jl     0x1003185
 100312e:	push   r10
 1003130:	rex.WRX
 1003131:	and    BYTE PTR ds:[rbx+0x51],dl
 1003135:	rex.WR push rbx
 1003137:	je     0x100319a
 1003139:	je     0x10031a0
 100313b:	cmp    ah,BYTE PTR [rax]
 100313d:	and    ah,BYTE PTR [rip+0x2c227368]        # 0x2d22a4ab
 1003143:	and    BYTE PTR [rsi+0x61],cl
 1003146:	je     0x10031b1
 1003148:	jbe    0x10031af
 100314a:	and    BYTE PTR [rbp+0x72],al
 100314d:	jb     0x10031be
 100314f:	jb     0x100318b
 1003151:	and    BYTE PTR [rip+0x4d202c64],ah        # 0x4e205dbb
 1003157:	gs jae 0x10031cd
 100315a:	(bad)  
 100315b:	cmp    ah,BYTE PTR gs:[eax]
 100315f:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb22a4cd
 1003165:	add    BYTE PTR [rax],al
 1003167:	add    BYTE PTR [rbx+0x51],dl
 100316a:	rex.WR push rbx
 100316c:	je     0x10031cf
 100316e:	je     0x10031d5
 1003170:	and    BYTE PTR [rip+0x2c732520],bh        # 0x2d735696
 1003176:	and    BYTE PTR [rsi+0x61],cl
 1003179:	je     0x10031e4
 100317b:	jbe    0x10031e2
 100317d:	rex.RB jb 0x10031f2
 1003180:	outs   dx,DWORD PTR ds:[rsi]
 1003181:	jb     0x10031a3
 1003183:	cmp    eax,0x646c2520
 1003188:	or     al,BYTE PTR [rbp+0x72]
 100318b:	jb     0x10031fc
 100318d:	jb     0x10031af
 100318f:	cmp    eax,0xa732520
 1003194:	add    BYTE PTR [rax],al
 1003196:	add    BYTE PTR [rax],al
 1003198:	cmp    al,0x42
 100319a:	rex.XB push r8
 100319c:	jl     0x10031e3
 100319e:	push   rdx
 100319f:	push   rdx
 10031a0:	and    BYTE PTR ds:[rbx+0x51],dl
 10031a4:	rex.WR push rbx
 10031a6:	je     0x1003209
 10031a8:	je     0x100320f
 10031aa:	cmp    ah,BYTE PTR [rax]
 10031ac:	and    ah,BYTE PTR [rip+0x2c227368]        # 0x2d22a51a
 10031b2:	and    BYTE PTR [rsi+0x61],cl
 10031b5:	je     0x1003220
 10031b7:	jbe    0x100321e
 10031b9:	and    BYTE PTR [rbp+0x72],al
 10031bc:	jb     0x100322d
 10031be:	jb     0x10031fa
 10031c0:	and    BYTE PTR [rip+0x4d202c64],ah        # 0x4e205e2a
 10031c6:	gs jae 0x100323c
 10031c9:	(bad)  
 10031ca:	cmp    ah,BYTE PTR gs:[eax]
 10031ce:	and    ah,BYTE PTR [rip+0xa227368]        # 0xb22a53c
 10031d4:	add    BYTE PTR [rax],al
 10031d6:	add    BYTE PTR [rax],al
 10031d8:	cmp    al,0x44
 10031da:	imul   esi,DWORD PTR [rbx+0x63],0x656e6e6f
 10031e1:	movsxd esi,DWORD PTR [rsi+rdi*1+0x20]
 10031e5:	and    eax,0x45487b70
 10031ea:	rex.WRX push rsi
 10031ec:	jge    0x100321a
 10031ee:	and    BYTE PTR [rip+0x44487b70],ah        # 0x4548ad64
 10031f4:	rex.X
 10031f5:	rex.XB jge 0x1003202
	...
 1003200:	cmp    al,0x4c
 1003202:	outs   dx,DWORD PTR ds:[rsi]
 1003203:	(bad)  
 1003204:	fs push rdx
 1003206:	gs jae 0x1003278
 1003209:	jne    0x100327d
 100320b:	movsxd esp,DWORD PTR [rbp+0x44]
 100320e:	rex.WR
 100320f:	rex.WR
 1003210:	and    BYTE PTR ds:[rdx+0x65],dh
 1003214:	jae    0x100325c
 1003216:	imul   ebp,DWORD PTR [rbp+riz*2+0x4e],0x3a656d61
 100321e:	and    BYTE PTR [rdx],ah
 1003220:	and    eax,0xa227368
 1003225:	add    BYTE PTR [rax],al
 1003227:	add    BYTE PTR [rsp+rcx*2],bh
 100322a:	outs   dx,DWORD PTR ds:[rsi]
 100322b:	(bad)  
 100322c:	fs push rdx
 100322e:	gs jae 0x10032a0
 1003231:	jne    0x10032a5
 1003233:	movsxd esp,DWORD PTR [rbp+0x44]
 1003236:	rex.WR
 1003237:	rex.WR jl 0x100327f
 100323a:	push   rdx
 100323b:	push   rdx
 100323c:	and    BYTE PTR ds:[rsi+0x61],al
 1003240:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 1003248:	outs   dx,DWORD PTR ds:[rsi]
 1003249:	(bad)  
 100324a:	je     0x10032ad
 100324c:	imul   ebp,DWORD PTR [rsi+0x20],0x6c6c7566
 1003253:	and    BYTE PTR [rax+0x61],dh
 1003256:	je     0x10032c0
 1003258:	and    BYTE PTR [rsi+0x6f],ah
 100325b:	jb     0x100327d
 100325d:	(bad)  
 100325f:	jo     0x100328f
 1003261:	gs js  0x10032c9
 1003264:	or     al,BYTE PTR [rax]
 1003266:	add    BYTE PTR [rax],al
 1003268:	push   rdx
 1003269:	gs jae 0x10032db
 100326c:	jne    0x10032e0
 100326e:	movsxd esp,DWORD PTR [rbp+0x73]
 1003271:	pop    rsp
 1003272:	and    eax,0x5c756c
 1003277:	add    BYTE PTR [rsp+rcx*2],bh
 100327a:	outs   dx,DWORD PTR ds:[rsi]
 100327b:	(bad)  
 100327c:	fs push rdx
 100327e:	gs jae 0x10032f0
 1003281:	jne    0x10032f5
 1003283:	movsxd esp,DWORD PTR [rbp+0x44]
 1003286:	rex.WR
 1003287:	rex.WR jl 0x10032d3
 100328a:	rex.WRX
 100328b:	rex.RX
 100328c:	rex.WRXB
 100328d:	and    BYTE PTR ds:[rdx],ah
 1003290:	and    eax,0x20227368
 1003295:	outs   dx,BYTE PTR ds:[rsi]
 1003296:	outs   dx,DWORD PTR ds:[rsi]
 1003297:	je     0x10032b9
 1003299:	outs   dx,WORD PTR ds:[rsi]
 100329b:	jne    0x100330b
 100329d:	and    BYTE PTR fs:[rcx+0x74],ah
 10032a1:	and    BYTE PTR [rdx],ah
 10032a3:	and    eax,0xa227368
	...
 10032b0:	cmp    al,0x4c
 10032b2:	outs   dx,DWORD PTR ds:[rsi]
 10032b3:	(bad)  
 10032b4:	fs push rdx
 10032b6:	gs jae 0x1003328
 10032b9:	jne    0x100332d
 10032bb:	movsxd esp,DWORD PTR [rbp+0x44]
 10032be:	rex.WR
 10032bf:	rex.WR jl 0x1003307
 10032c2:	push   rdx
 10032c3:	push   rdx
 10032c4:	and    BYTE PTR ds:[rdx],ah
 10032c7:	and    eax,0x20227368
 10032cc:	movsxd ebp,DWORD PTR [rdi+0x75]
 10032cf:	ins    BYTE PTR es:[rdi],dx
 10032d0:	and    BYTE PTR fs:[rsi+0x6f],ch
 10032d4:	je     0x10032f6
 10032d6:	(bad)  
 10032d7:	and    BYTE PTR gs:[rdi+rbp*2+0x63],ch
 10032dc:	(bad)  
 10032dd:	je     0x1003344
 10032df:	or     al,BYTE PTR fs:[rax]
 10032e2:	add    BYTE PTR [rax],al
 10032e4:	add    BYTE PTR [rax],al
 10032e6:	add    BYTE PTR [rax],al
 10032e8:	cmp    al,0x4c
 10032ea:	outs   dx,DWORD PTR ds:[rsi]
 10032eb:	(bad)  
 10032ec:	fs push rdx
 10032ee:	gs jae 0x1003360
 10032f1:	jne    0x1003365
 10032f3:	movsxd esp,DWORD PTR [rbp+0x44]
 10032f6:	rex.WR
 10032f7:	rex.WR jl 0x1003343
 10032fa:	rex.WRX
 10032fb:	rex.RX
 10032fc:	rex.WRXB
 10032fd:	and    BYTE PTR ds:[rdx],ah
 1003300:	and    eax,0x20227368
 1003305:	outs   dx,WORD PTR ds:[rsi]
 1003307:	jne    0x1003377
 1003309:	and    BYTE PTR fs:[rcx+0x6e],ah
 100330d:	and    BYTE PTR fs:[rdi+rbp*2+0x61],ch
 1003312:	fs gs and BYTE PTR fs:[rsi+0x72],ah
 1003318:	outs   dx,DWORD PTR ds:[rsi]
 1003319:	ins    DWORD PTR es:[rdi],dx
 100331a:	and    BYTE PTR [rdx],ah
 100331c:	and    eax,0xa227368
 1003321:	add    BYTE PTR [rax],al
 1003323:	add    BYTE PTR [rax],al
 1003325:	add    BYTE PTR [rax],al
 1003327:	add    BYTE PTR [rdx],dh
 1003329:	xor    BYTE PTR [rcx],dh
 100332b:	xor    DWORD PTR [rsi],ebp
 100332d:	xor    BYTE PTR [rcx],dh
 100332f:	xor    DWORD PTR [rax],esi
 1003331:	xor    dh,BYTE PTR cs:[rcx]
 1003334:	xor    BYTE PTR [rax],dh
 1003336:	xor    BYTE PTR cs:[rsi],dh
 1003339:	xor    BYTE PTR [rax],al
 100333b:	add    BYTE PTR [rax],al
 100333d:	add    BYTE PTR [rax],al
 100333f:	add    BYTE PTR [rsp+rcx*2],bh
 1003342:	outs   dx,DWORD PTR ds:[rsi]
 1003343:	(bad)  
 1003344:	fs push rdx
 1003346:	gs jae 0x10033b8
 1003349:	jne    0x10033bd
 100334b:	movsxd esp,DWORD PTR [rbp+0x44]
 100334e:	rex.WR
 100334f:	rex.WR jl 0x1003397
 1003352:	push   rdx
 1003353:	push   rdx
 1003354:	and    BYTE PTR ds:[rbp+0x6e],dl
 1003358:	ins    BYTE PTR es:[rdi],dx
 1003359:	outs   dx,DWORD PTR ds:[rsi]
 100335a:	(bad)  
 100335b:	imul   ebp,DWORD PTR fs:[rsi+0x67],0x68252220
 1003363:	jae    0x1003387
 1003365:	and    BYTE PTR [rdx+0x65],ah
 1003368:	movsxd esp,DWORD PTR [rcx+0x75]
 100336b:	jae    0x10033d2
 100336d:	and    BYTE PTR [rsi+0x65],dh
 1003370:	jb     0x10033e5
 1003372:	imul   ebp,DWORD PTR [rdi+0x6e],0x666e6920
 1003379:	outs   dx,DWORD PTR ds:[rsi]
 100337a:	jb     0x10033e9
 100337c:	(bad)  
 100337d:	je     0x10033e8
 100337f:	outs   dx,DWORD PTR ds:[rsi]
 1003380:	outs   dx,BYTE PTR ds:[rsi]
 1003381:	and    BYTE PTR [rbx+0x6f],ah
 1003384:	jne    0x10033f2
 1003386:	and    BYTE PTR fs:[rsi+0x6f],ch
 100338a:	je     0x10033ac
 100338c:	(bad)  
 100338d:	and    BYTE PTR gs:[rdi+rbp*2+0x63],ch
 1003392:	(bad)  
 1003393:	je     0x10033fa
 1003395:	or     al,BYTE PTR fs:[rax]
	...
 10033a0:	cmp    al,0x4c
 10033a2:	outs   dx,DWORD PTR ds:[rsi]
 10033a3:	(bad)  
 10033a4:	fs push rdx
 10033a6:	gs jae 0x1003418
 10033a9:	jne    0x100341d
 10033ab:	movsxd esp,DWORD PTR [rbp+0x44]
 10033ae:	rex.WR
 10033af:	rex.WR jl 0x10033f7
 10033b2:	push   rdx
 10033b3:	push   rdx
 10033b4:	and    BYTE PTR ds:[rbp+0x6e],dl
 10033b8:	ins    BYTE PTR es:[rdi],dx
 10033b9:	outs   dx,DWORD PTR ds:[rsi]
 10033ba:	(bad)  
 10033bb:	imul   ebp,DWORD PTR fs:[rsi+0x67],0x68252220
 10033c3:	jae    0x10033e7
 10033c5:	and    BYTE PTR [rdx+0x65],ah
 10033c8:	movsxd esp,DWORD PTR [rcx+0x75]
 10033cb:	jae    0x1003432
 10033cd:	and    BYTE PTR [rcx+0x74],ch
 10033d0:	(bad)  
 10033d1:	jae    0x10033f3
 10033d3:	jbe    0x100343a
 10033d5:	jb     0x100344a
 10033d7:	imul   ebp,DWORD PTR [rdi+0x6e],0x64696420
 10033de:	and    BYTE PTR [rsi+0x6f],ch
 10033e1:	je     0x1003403
 10033e3:	ins    DWORD PTR es:[rdi],dx
 10033e4:	(bad)  
 10033e5:	je     0x100344a
 10033e7:	push   0x70636220
 10033ec:	and    BYTE PTR [rbp+0x78],ah
 10033ef:	movsxd esi,DWORD PTR gs:[rbp+0x74]
 10033f3:	(bad)  
 10033f4:	(bad)  
 10033f5:	ins    BYTE PTR es:[rdi],dx
 10033f6:	and    BYTE PTR gs:[rsi+0x65],dh
 10033fa:	jb     0x100346f
 10033fc:	imul   ebp,DWORD PTR [rdi+0x6e],0xa
	...
 100340f:	add    BYTE PTR [rcx+rax*2],bh
 1003412:	ins    BYTE PTR es:[rdi],dx
 1003413:	ins    BYTE PTR es:[rdi],dx
 1003414:	outs   dx,DWORD PTR ds:[rsi]
 1003415:	movsxd esp,DWORD PTR [rcx+0x74]
 1003418:	rex.XB outs dx,DWORD PTR gs:[rsi]
 100341b:	outs   dx,BYTE PTR ds:[rsi]
 100341c:	outs   dx,BYTE PTR ds:[rsi]
 100341d:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1003422:	outs   dx,BYTE PTR ds:[rsi]
 1003423:	push   rbx
 1003424:	je     0x1003498
 1003426:	imul   ebp,DWORD PTR [rsi+0x67],0x4d454d7c
 100342d:	jl     0x1003474
 100342f:	push   rdx
 1003430:	push   rdx
 1003431:	and    BYTE PTR ds:[rdi+0x76],cl
 1003435:	gs jb  0x100349e
 1003438:	ins    BYTE PTR es:[rdi],dx
 1003439:	outs   dx,DWORD PTR ds:[rsi]
 100343a:	ja     0x100345c
 100343c:	movsxd esp,DWORD PTR [rcx+0x6c]
 100343f:	movsxd esi,DWORD PTR [rbp+0x6c]
 1003442:	(bad)  
 1003443:	je     0x10034ae
 1003445:	outs   dx,BYTE PTR ds:[rsi]
 1003446:	and    BYTE PTR [ebx+0x6f],al
 100344a:	outs   dx,BYTE PTR ds:[rsi]
 100344b:	outs   dx,BYTE PTR ds:[rsi]
 100344c:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1003451:	outs   dx,BYTE PTR ds:[rsi]
 1003452:	push   rbx
 1003453:	je     0x10034c7
 1003455:	imul   ebp,DWORD PTR [rsi+0x67],0x7a697320
 100345c:	or     al,BYTE PTR gs:[rax]
 100345f:	add    BYTE PTR [rcx+rax*2],bh
 1003462:	ins    BYTE PTR es:[rdi],dx
 1003463:	ins    BYTE PTR es:[rdi],dx
 1003464:	outs   dx,DWORD PTR ds:[rsi]
 1003465:	movsxd esp,DWORD PTR [rcx+0x74]
 1003468:	rex.XB outs dx,DWORD PTR gs:[rsi]
 100346b:	outs   dx,BYTE PTR ds:[rsi]
 100346c:	outs   dx,BYTE PTR ds:[rsi]
 100346d:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1003472:	outs   dx,BYTE PTR ds:[rsi]
 1003473:	push   rbx
 1003474:	je     0x10034e8
 1003476:	imul   ebp,DWORD PTR [rsi+0x67],0x4d454d7c
 100347d:	jl     0x10034c4
 100347f:	push   rdx
 1003480:	push   rdx
 1003481:	and    BYTE PTR ds:[rsi+0x61],al
 1003485:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 100348d:	(bad)  
 100348e:	ins    BYTE PTR es:[rdi],dx
 100348f:	ins    BYTE PTR es:[rdi],dx
 1003490:	outs   dx,DWORD PTR ds:[rsi]
 1003491:	movsxd esp,DWORD PTR [rcx+0x74]
 1003494:	and    BYTE PTR gs:[rbx+0x6f],al
 1003498:	outs   dx,BYTE PTR ds:[rsi]
 1003499:	outs   dx,BYTE PTR ds:[rsi]
 100349a:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 100349f:	outs   dx,BYTE PTR ds:[rsi]
 10034a0:	push   rbx
 10034a1:	je     0x1003515
 10034a3:	imul   ebp,DWORD PTR [rsi+0x67],0x20666f20
 10034aa:	jae    0x1003515
 10034ac:	jp     0x1003513
 10034ae:	cmp    ah,BYTE PTR [rax]
 10034b0:	and    eax,0x63207549
 10034b5:	push   0x63617261
 10034ba:	je     0x1003521
 10034bc:	jb     0x1003531
 10034be:	or     al,BYTE PTR [rax]
 10034c0:	cmp    al,0x54
 10034c2:	jb     0x1003525
 10034c4:	movsxd esp,DWORD PTR [rbp+0x7c]
 10034c7:	rex.WRB
 10034c8:	push   r10
 10034ca:	rex.WXB
 10034cb:	and    BYTE PTR ds:[rcx+rbp*2+0x6e],ch
 10034d0:	and    BYTE PTR gs:[rip+0xa64],ah        # 0x1003f3b
 10034d7:	add    BYTE PTR [rsp+rbp*2+0x6c],al
 10034db:	imul   esp,DWORD PTR [rbp+r8*2+0x6e],0x50797274
 10034e4:	outs   dx,DWORD PTR ds:[rsi]
 10034e5:	imul   ebp,DWORD PTR [rsi+0x74],0x0
 10034ec:	add    BYTE PTR [rax],al
 10034ee:	add    BYTE PTR [rax],al
 10034f0:	push   rbx
 10034f1:	add    BYTE PTR [rdi+0x0],cl
 10034f4:	add    BYTE PTR [rax+r8*1+0x57],r10b
 10034f9:	add    BYTE PTR [rcx+0x0],al
 10034fc:	push   rdx
 10034fd:	add    BYTE PTR [rbp+0x0],al
 1003500:	pop    rsp
 1003501:	add    BYTE PTR [rbp+0x0],cl
 1003504:	imul   eax,DWORD PTR [rax],0x720063
 100350a:	outs   dx,DWORD PTR ds:[rsi]
 100350b:	add    BYTE PTR [rbx+0x0],dh
 100350e:	outs   dx,DWORD PTR ds:[rsi]
 100350f:	add    BYTE PTR [rsi+0x0],ah
 1003512:	je     0x1003514
 1003514:	pop    rsp
 1003515:	add    BYTE PTR [rdx+0x0],al
 1003518:	imul   eax,DWORD PTR [rax],0x490064
 100351e:	outs   dx,BYTE PTR ds:[rsi]
 100351f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003523:	add    BYTE PTR [rdx+0x0],dh
 1003526:	data16 add BYTE PTR [rcx+0x0],ah
 100352a:	movsxd eax,DWORD PTR [rax]
 100352c:	add    BYTE PTR gs:[rax+rax*1+0x4c],bl
 1003531:	add    BYTE PTR [rdi+0x0],ch
 1003534:	(bad)  
 1003535:	add    BYTE PTR [rax+rax*1+0x65],ah
 1003539:	add    BYTE PTR [rdx+0x0],dh
 100353c:	add    BYTE PTR [rax],al
 100353e:	add    BYTE PTR [rax],al
 1003540:	cmp    al,BYTE PTR [rax]
 1003542:	rex.WR add BYTE PTR [rax+rax*1+0x72],r12b
 1003547:	add    BYTE PTR [rbp+0x0],cl
 100354a:	jae    0x100354c
 100354c:	add    BYTE PTR [eax],al
 100354f:	add    BYTE PTR [rdx],bh
 1003551:	add    BYTE PTR [rax+0x0],dl
 1003554:	(bad)  
 1003555:	add    BYTE PTR [rax+rax*1+0x68],dh
 1003559:	add    BYTE PTR [rax],al
 100355b:	add    BYTE PTR [rax],al
 100355d:	add    BYTE PTR [rax],al
 100355f:	add    BYTE PTR [rdx],ch
 1003561:	add    BYTE PTR [rdx],ch
 1003563:	add    BYTE PTR [rdx],ch
 1003565:	add    BYTE PTR [rax],ah
 1003567:	add    BYTE PTR [rbx+0x0],bl
 100356a:	rex.W add BYTE PTR [rbx+0x0],cl
 100356e:	rex.WR add BYTE PTR [rbp+0x0],r9b
 1003572:	pop    rsp
 1003573:	add    BYTE PTR [rax],al
 1003575:	add    BYTE PTR [rax],al
 1003577:	add    BYTE PTR [rax+rax*1+0x22],bl
 100357b:	add    BYTE PTR [rax],al
 100357d:	add    BYTE PTR [rax],al
 100357f:	add    BYTE PTR [rdx],ah
 1003581:	add    BYTE PTR [rbp+0x0],bl
 1003584:	and    BYTE PTR [rax],al
 1003586:	or     al,BYTE PTR [rax]
 1003588:	sub    al,BYTE PTR [rax]
 100358a:	sub    al,BYTE PTR [rax]
 100358c:	sub    al,BYTE PTR [rax]
 100358e:	and    BYTE PTR [rax],al
 1003590:	and    al,BYTE PTR [rax]
 1003592:	add    BYTE PTR [rax],al
 1003594:	and    al,BYTE PTR [rax]
 1003596:	or     al,BYTE PTR [rax]
	...
 10035a0:	sub    al,BYTE PTR [rax]
 10035a2:	sub    al,BYTE PTR [rax]
 10035a4:	sub    al,BYTE PTR [rax]
 10035a6:	and    BYTE PTR [rax],al
 10035a8:	and    al,BYTE PTR [rax]
 10035aa:	add    BYTE PTR [rax],al
 10035ac:	add    BYTE PTR [rax],al
 10035ae:	add    BYTE PTR [rax],al
 10035b0:	and    al,BYTE PTR [rax]
 10035b2:	and    BYTE PTR [rax],al
 10035b4:	movsxd eax,DWORD PTR [rax]
 10035b6:	outs   dx,DWORD PTR ds:[rsi]
 10035b7:	add    BYTE PTR [rbp+0x0],dh
 10035ba:	ins    BYTE PTR es:[rdi],dx
 10035bb:	add    BYTE PTR [rax+rax*1+0x20],ah
 10035bf:	add    BYTE PTR [rsi+0x0],ch
 10035c2:	outs   dx,DWORD PTR ds:[rsi]
 10035c3:	add    BYTE PTR [rax+rax*1+0x20],dh
 10035c7:	add    BYTE PTR [rdx+0x0],ah
 10035ca:	add    BYTE PTR gs:[rax],ah
 10035cd:	add    BYTE PTR [rax+rax*1+0x6f],ch
 10035d1:	add    BYTE PTR [rcx+0x0],ah
 10035d4:	add    BYTE PTR fs:[rbp+0x0],ah
 10035d8:	add    BYTE PTR fs:[rsi],ch
 10035db:	add    BYTE PTR [rdx],cl
 10035dd:	add    BYTE PTR [rax],al
 10035df:	add    BYTE PTR [rbx],bh
 10035e1:	jb     0x1003648
 10035e3:	imul   ebp,DWORD PTR [edi+0x6e],0x793d6c61
 10035eb:	gs jae 0x10035ee
 10035ee:	add    BYTE PTR [rax],al
 10035f0:	cmp    esi,DWORD PTR [rax+0x77]
 10035f3:	fs cmp eax,0x3b000000
 10035f9:	rex.B jo 0x100366c
 10035fc:	ins    BYTE PTR es:[rdi],dx
 10035fd:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 1003604:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1003606:	je     0x100366d
 1003608:	outs   dx,BYTE PTR ds:[rsi]
 1003609:	je     0x1003648
 100360b:	add    BYTE PTR [rax],al
 100360d:	add    BYTE PTR [rax],al
 100360f:	add    BYTE PTR [rbx],bh
 1003611:	fs (bad) 
 1003613:	je     0x1003676
 1003615:	(bad)  
 1003617:	jae    0x100367e
 1003619:	cmp    eax,0x753b0000
 100361e:	imul   esp,DWORD PTR [rbp+rdi*1+0x0],0x0
 1003626:	add    BYTE PTR [rax],al
 1003628:	rex.R jb 0x1003694
 100362b:	jbe    0x1003692
 100362d:	jb     0x100366c
 100362f:	jnp    0x1003684
 1003631:	push   rcx
 1003632:	rex.WR and BYTE PTR [rbx+0x65],r10b
 1003636:	jb     0x10036ae
 1003638:	gs jb  0x100365b
 100363b:	rex.WRX (bad) 
 100363d:	je     0x10036a8
 100363f:	jbe    0x10036a6
 1003641:	and    BYTE PTR [rbx+0x6c],al
 1003644:	imul   esp,DWORD PTR [rbp+0x6e],0x31312074
 100364b:	xor    BYTE PTR cs:[rbp+0x3b],bh
 100364f:	jae    0x10036b6
 1003651:	jb     0x10036c9
 1003653:	gs jb  0x1003693
 1003656:	add    BYTE PTR [rax],al
 1003658:	(bad)  
 1003659:	(bad)  
 100365a:	(bad)  
 100365b:	inc    DWORD PTR [rcx]
 100365d:	add    BYTE PTR [rax],al
 100365f:	add    BYTE PTR [rax+rax*1],al
 1003662:	add    BYTE PTR [rax],al
 1003664:	(bad)  
 1003665:	(bad)  
 1003666:	(bad)  
 1003667:	inc    DWORD PTR [rdx]
 1003669:	add    BYTE PTR [rax],al
 100366b:	add    BYTE PTR [rbx],al
 100366d:	add    BYTE PTR [rax],al
 100366f:	add    BYTE PTR [rcx],al
 1003671:	add    DWORD PTR [rcx],eax
 1003673:	add    DWORD PTR [rcx],eax
 1003675:	add    DWORD PTR [rcx],eax
 1003677:	add    DWORD PTR [rcx],eax
 1003679:	add    DWORD PTR [rcx],eax
 100367b:	add    DWORD PTR [rcx],eax
 100367d:	add    DWORD PTR [rcx],eax
 100367f:	add    DWORD PTR [rcx],eax
 1003681:	add    DWORD PTR [rcx],eax
 1003683:	add    DWORD PTR [rcx],eax
 1003685:	add    DWORD PTR [rcx],eax
 1003687:	add    DWORD PTR [rcx],eax
 1003689:	add    DWORD PTR [rcx],eax
 100368b:	add    DWORD PTR [rcx],eax
 100368d:	add    DWORD PTR [rcx],eax
 100368f:	add    DWORD PTR [rdx],eax
 1003691:	add    eax,DWORD PTR [rbx]
 1003693:	add    eax,DWORD PTR [rbx+rax*1]
 1003696:	add    eax,DWORD PTR [rbx]
 1003698:	add    eax,0x3070306
 100369d:	or     BYTE PTR [rcx],cl
 100369f:	add    ecx,DWORD PTR [rdx]
 10036a1:	or     cl,BYTE PTR [rdx]
 10036a3:	or     cl,BYTE PTR [rdx]
 10036a5:	or     cl,BYTE PTR [rdx]
 10036a7:	or     cl,BYTE PTR [rdx]
 10036a9:	or     cl,BYTE PTR [rbx]
 10036ab:	add    eax,DWORD PTR [rdi]
 10036ad:	(bad)  
 10036ae:	(bad)  
 10036af:	add    eax,DWORD PTR [rbx]
 10036b1:	or     al,0xc
 10036b3:	or     al,0xc
 10036b5:	or     al,0xc
 10036b7:	or     al,0xc
 10036b9:	or     al,0xc
 10036bb:	or     al,0xc
 10036bd:	or     al,0xc
 10036bf:	or     al,0xc
 10036c1:	or     al,0xc
 10036c3:	or     al,0xc
 10036c5:	or     al,0xc
 10036c7:	or     al,0xc
 10036c9:	or     al,0xc
 10036cb:	add    eax,0xe0d0603
 10036d0:	or     eax,0xf0f0f0f
 10036d5:	(bad)  
 10036d6:	(bad)  
 10036d7:	(bad)  
 10036d8:	(bad)  
 10036d9:	(bad)  
 10036da:	(bad)  
 10036db:	(bad)  
 10036dc:	(bad)  
 10036dd:	(bad)  
 10036de:	(bad)  
 10036df:	(bad)  
 10036e0:	(bad)  
 10036e1:	(bad)  
 10036e2:	(bad)  
 10036e3:	(bad)  
 10036e4:	(bad)  
 10036e5:	(bad)  
 10036e6:	(bad)  
 10036e7:	(bad)  
 10036e8:	(bad)  
 10036e9:	(bad)          # 0x2073cf1
 10036ea:	syscall 
 10036ec:	(bad)  
 10036ed:	(bad)  
 10036ee:	(bad)  
 10036ef:	add    DWORD PTR [rdx],eax
 10036f1:	add    BYTE PTR [rax],al
 10036f3:	add    BYTE PTR [rax],al
 10036f5:	add    BYTE PTR [rax],al
 10036f7:	add    BYTE PTR [rdi],bl
 10036f9:	add    BYTE PTR [rax],al
 10036fb:	add    BYTE PTR [rax],al
 10036fd:	add    BYTE PTR [rax],al
 10036ff:	add    BYTE PTR [rdi+rbp*2+0x100],ch
 1003706:	add    BYTE PTR [rax],al
 1003708:	add    al,BYTE PTR [rax]
 100370a:	add    BYTE PTR [rax],al
 100370c:	add    BYTE PTR [rax],al
 100370e:	add    BYTE PTR [rax],al
 1003710:	add    al,BYTE PTR [rax]
 1003712:	add    BYTE PTR [rax],al
 1003714:	add    BYTE PTR [rax],al
 1003716:	add    BYTE PTR [rax],al
 1003718:	mov    al,0x6f
 100371a:	add    BYTE PTR [rcx],al
 100371c:	add    BYTE PTR [rax],al
 100371e:	add    BYTE PTR [rax],al
 1003720:	add    al,BYTE PTR [rax]
 1003722:	add    BYTE PTR [rax],al
 1003724:	add    BYTE PTR [rax],al
 1003726:	add    BYTE PTR [rax],al
 1003728:	add    al,0x0
 100372a:	add    BYTE PTR [rax],al
 100372c:	add    BYTE PTR [rax],al
 100372e:	add    BYTE PTR [rax],al
 1003730:	mov    eax,0x1006f
 1003735:	add    BYTE PTR [rax],al
 1003737:	add    BYTE PTR [rdx],al
 1003739:	add    BYTE PTR [rax],al
 100373b:	add    BYTE PTR [rax],al
 100373d:	add    BYTE PTR [rax],al
 100373f:	add    BYTE PTR [rcx],al
 1003741:	add    BYTE PTR [rax],al
 1003743:	add    BYTE PTR [rax],al
 1003745:	add    BYTE PTR [rax],al
 1003747:	add    al,al
 1003749:	outs   dx,DWORD PTR ds:[rsi]
 100374a:	add    BYTE PTR [rcx],al
 100374c:	add    BYTE PTR [rax],al
 100374e:	add    BYTE PTR [rax],al
 1003750:	add    al,BYTE PTR [rax]
 1003752:	add    BYTE PTR [rax],al
 1003754:	add    BYTE PTR [rax],al
 1003756:	add    BYTE PTR [rax],al
 1003758:	or     BYTE PTR [rax],al
 100375a:	add    BYTE PTR [rax],al
 100375c:	add    BYTE PTR [rax],al
 100375e:	add    BYTE PTR [rax],al
 1003760:	enter  0x6f,0x1
 1003764:	add    BYTE PTR [rax],al
 1003766:	add    BYTE PTR [rax],al
 1003768:	add    al,BYTE PTR [rax]
 100376a:	add    BYTE PTR [rax],al
 100376c:	add    BYTE PTR [rax],al
 100376e:	add    BYTE PTR [rax],al
 1003770:	adc    BYTE PTR [rax],al
 1003772:	add    BYTE PTR [rax],al
 1003774:	add    BYTE PTR [rax],al
 1003776:	add    BYTE PTR [rax],al
 1003778:	shr    BYTE PTR [rdi+0x0],1
 100377b:	add    DWORD PTR [rax],eax
	...
 1003789:	sti    
 100378a:	rex.WRXB sti 
 100378c:	add    BYTE PTR [rax],al
 100378e:	add    BYTE PTR [rax],al
 1003790:	fsubr  DWORD PTR [rdi+0x0]
 1003793:	add    DWORD PTR [rax],eax
	...
 10037a1:	(bad)  
 10037a2:	inc    DWORD PTR [rsi]
 10037a4:	add    BYTE PTR [rax],al
 10037a6:	add    BYTE PTR [rax],al
 10037a8:	sbb    BYTE PTR [rax+0x0],dh
 10037ab:	add    DWORD PTR [rax],eax
	...
 10037b5:	add    BYTE PTR [rax],al
 10037b7:	add    BYTE PTR [rax-0x5],dl
 10037ba:	(bad)  
 10037bb:	std    
 10037bc:	add    BYTE PTR [rax],al
 10037be:	add    BYTE PTR [rax],al
 10037c0:	xor    BYTE PTR [rax+0x0],dh
 10037c3:	add    DWORD PTR [rax],eax
	...
 10037cd:	add    BYTE PTR [rax],al
 10037cf:	add    BYTE PTR [rax-0x2],dh
 10037d2:	(bad)  
 10037d3:	inc    BYTE PTR [rax]
 10037d5:	add    BYTE PTR [rax],al
 10037d7:	add    BYTE PTR [rax+0x70],ch
 10037da:	add    BYTE PTR [rcx],al
	...
 10037e8:	xor    BYTE PTR [rip+0x58f],al        # 0x1003d7d
 10037ee:	add    BYTE PTR [rax],al
 10037f0:	movabs al,ds:0x10070
 10037f9:	add    BYTE PTR [rax],al
 10037fb:	add    BYTE PTR [rax],al
 10037fd:	add    BYTE PTR [rax],al
 10037ff:	add    BYTE PTR [rax+0x21ff21],dl
 1003805:	add    BYTE PTR [rax],al
 1003807:	add    BYTE PTR [rax+0x10070],bh
	...
 1003819:	add    BYTE PTR [rdi+0x0],bh
 100381c:	add    BYTE PTR [rax],al
 100381e:	add    BYTE PTR [rax],al
 1003820:	shl    BYTE PTR [rax+0x0],1
 1003823:	add    DWORD PTR [rax],eax
	...
 100382d:	add    BYTE PTR [rax],al
 100382f:	add    BYTE PTR [rax+0x9ff09],al
 1003835:	add    BYTE PTR [rax],al
 1003837:	add    al,dh
 1003839:	jo     0x100383b
 100383b:	add    DWORD PTR [rax],eax
	...
 1003845:	add    BYTE PTR [rax],al
 1003847:	add    BYTE PTR [rax+0x259f25],al
 100384d:	add    BYTE PTR [rax],al
 100384f:	add    BYTE PTR [rax],cl
 1003851:	jno    0x1003853
 1003853:	add    DWORD PTR [rax],eax
	...
 1003861:	xor    DWORD PTR [rdi],ebp
 1003863:	xor    DWORD PTR [rax],eax
 1003865:	add    BYTE PTR [rax],al
 1003867:	add    BYTE PTR [rax],ch
 1003869:	jno    0x100386b
 100386b:	add    DWORD PTR [rax],eax
	...
 1003875:	add    BYTE PTR [rax],al
 1003877:	add    BYTE PTR [rax+0x31bf31],ah
 100387d:	add    BYTE PTR [rax],al
 100387f:	add    BYTE PTR [rax+0x71],al
 1003882:	add    BYTE PTR [rcx],al
	...
 1003890:	add    BYTE PTR [rip+0x257f],ah        # 0x1005e15
 1003896:	add    BYTE PTR [rax],al
 1003898:	push   0x10071
	...
 10038a9:	sub    bh,bh
 10038ab:	sub    BYTE PTR [rax],al
 10038ad:	add    BYTE PTR [rax],al
 10038af:	add    BYTE PTR [rax+0x10071],cl
	...
 10038c1:	xor    edi,edi
 10038c3:	xor    eax,DWORD PTR [rax]
 10038c5:	add    BYTE PTR [rax],al
 10038c7:	add    BYTE PTR [rax+0x10071],dh
	...
 10038d5:	add    BYTE PTR [rax],al
 10038d7:	add    BYTE PTR [rax],dh
 10038d9:	dec    BYTE PTR [rdi-0x2]
 10038dc:	add    BYTE PTR [rax],al
 10038de:	add    BYTE PTR [rax],al
 10038e0:	fdiv   DWORD PTR [rcx+0x0]
 10038e3:	add    DWORD PTR [rax],eax
	...
 10038f1:	stc    
 10038f2:	(bad)  
 10038f3:	cli    
 10038f4:	add    BYTE PTR [rax],al
 10038f6:	add    BYTE PTR [rax],al
 10038f8:	or     BYTE PTR [rdx+0x0],dh
 10038fb:	add    DWORD PTR [rax],eax
	...
 1003905:	add    BYTE PTR [rax],al
 1003907:	add    BYTE PTR [rax+0x2eff2e],al
 100390d:	add    BYTE PTR [rax],al
 100390f:	add    BYTE PTR [rax+0x72],cl
 1003912:	add    BYTE PTR [rcx],al
	...
 1003920:	add    BYTE PTR [rax],dh
 1003922:	(bad)  
 1003923:	xor    BYTE PTR [rax],al
 1003925:	add    BYTE PTR [rax],al
 1003927:	add    BYTE PTR [rax+0x72],bh
 100392a:	add    BYTE PTR [rcx],al
	...
 1003938:	add    BYTE PTR [rsi-0x1],cl
 100393b:	lahf   
 100393c:	add    BYTE PTR [rax],al
 100393e:	add    BYTE PTR [rax],al
 1003940:	mov    al,0x72
 1003942:	add    BYTE PTR [rcx],al
	...
 1003950:	add    BYTE PTR [rsi*4+0x4d],dh
 1003957:	add    al,ah
 1003959:	jb     0x100395b
 100395b:	add    DWORD PTR [rax],eax
	...
 1003965:	add    BYTE PTR [rax],al
 1003967:	add    BYTE PTR [rax+0x13ff13],ah
 100396d:	add    BYTE PTR [rax],al
 100396f:	add    BYTE PTR [rax],ch
 1003971:	jae    0x1003973
 1003973:	add    DWORD PTR [rax],eax
	...
 1003981:	add    ebp,DWORD PTR [rdi+0x3]
 1003984:	add    BYTE PTR [rax],al
 1003986:	add    BYTE PTR [rax],al
 1003988:	rex jae 0x100398b
 100398b:	add    DWORD PTR [rax],eax
	...
 1003995:	add    BYTE PTR [rax],al
 1003997:	add    BYTE PTR [rax],ah
 1003999:	(bad)  
 100399a:	(bad)  
 100399b:	inc    BYTE PTR [rax]
 100399d:	add    BYTE PTR [rax],al
 100399f:	add    BYTE PTR [rax+0x73],bh
 10039a2:	add    BYTE PTR [rcx],al
	...
 10039b0:	shl    BYTE PTR [rax],1
 10039b2:	jmp    QWORD PTR [rax]
 10039b4:	add    BYTE PTR [rax],al
 10039b6:	add    BYTE PTR [rax],al
 10039b8:	test   al,0x73
 10039ba:	add    BYTE PTR [rcx],al
	...
 10039c8:	add    BYTE PTR [rdi+rdi*1],ah
 10039cb:	and    al,0x0
 10039cd:	add    BYTE PTR [rax],al
 10039cf:	add    al,ah
 10039d1:	jae    0x10039d3
 10039d3:	add    DWORD PTR [rax],eax
	...
 10039dd:	add    BYTE PTR [rax],al
 10039df:	add    BYTE PTR [rax+0x20cf20],ah
 10039e5:	add    BYTE PTR [rax],al
 10039e7:	add    BYTE PTR [rax],cl
 10039e9:	je     0x10039eb
 10039eb:	add    DWORD PTR [rax],eax
	...
 10039f9:	add    al,0xff
 10039fb:	add    al,0x0
 10039fd:	add    BYTE PTR [rax],al
 10039ff:	add    BYTE PTR [rax],dh
 1003a01:	je     0x1003a03
 1003a03:	add    DWORD PTR [rax],eax
	...
 1003a11:	or     DWORD PTR [rdi+0x9],edi
 1003a14:	add    BYTE PTR [rax],al
 1003a16:	add    BYTE PTR [rax],al
 1003a18:	rex.W je 0x1003a1b
 1003a1b:	add    DWORD PTR [rax],eax
	...
 1003a29:	(bad)  
 1003a2a:	mov    edi,0x27
 1003a2f:	add    BYTE PTR [rax+0x74],ch
 1003a32:	add    BYTE PTR [rcx],al
	...
 1003a40:	(bad)  
 1003a41:	and    al,0xff
 1003a43:	and    al,0x0
 1003a45:	add    BYTE PTR [rax],al
 1003a47:	add    BYTE PTR [rax+0x10074],al
	...
 1003a59:	xor    bh,bh
 1003a5b:	xor    al,BYTE PTR [rax]
 1003a5d:	add    BYTE PTR [rax],al
 1003a5f:	add    BYTE PTR [rax+0x10074],dh
	...
 1003a71:	adc    bh,BYTE PTR [rdi+0x13]
 1003a74:	add    BYTE PTR [rax],al
 1003a76:	add    BYTE PTR [rax],al
 1003a78:	lock je 0x1003a7b
 1003a7b:	add    DWORD PTR [rax],eax
	...
 1003a89:	and    BYTE PTR [rdi+0x20],ch
 1003a8c:	add    BYTE PTR [rax],al
 1003a8e:	add    BYTE PTR [rax],al
 1003a90:	or     BYTE PTR [rbp+0x0],dh
 1003a93:	add    DWORD PTR [rax],eax
	...
 1003a9d:	add    BYTE PTR [rax],al
 1003a9f:	add    BYTE PTR [rax+0x25ff25],ah
 1003aa5:	add    BYTE PTR [rax],al
 1003aa7:	add    BYTE PTR [rax],bh
 1003aa9:	jne    0x1003aab
 1003aab:	add    DWORD PTR [rax],eax
	...
 1003ab5:	add    BYTE PTR [rax],al
 1003ab7:	add    BYTE PTR [rax+0x10ff10],ah
 1003abd:	add    BYTE PTR [rax],al
 1003abf:	add    BYTE PTR [rax+0x75],ah
 1003ac2:	add    BYTE PTR [rcx],al
	...
 1003ad0:	jo     0x1003ad5
 1003ad2:	inc    DWORD PTR [rbx]
 1003ad4:	add    BYTE PTR [rax],al
 1003ad6:	add    BYTE PTR [rax],al
 1003ad8:	js     0x1003b4f
 1003ada:	add    BYTE PTR [rcx],al
	...
 1003ae8:	add    BYTE PTR [rdi],bl
 1003aea:	call   FWORD PTR [rdi]
 1003aec:	add    BYTE PTR [rax],al
 1003aee:	add    BYTE PTR [rax],al
 1003af0:	mov    BYTE PTR [rbp+0x0],dh
 1003af3:	add    DWORD PTR [rax],eax
	...
 1003afd:	add    BYTE PTR [rax],al
 1003aff:	add    BYTE PTR [rax+0xaff0a],al
 1003b05:	add    BYTE PTR [rax],al
 1003b07:	add    BYTE PTR [rax+0x10075],ch
	...
 1003b19:	or     bh,BYTE PTR [rdi+0xa]
 1003b1c:	add    BYTE PTR [rax],al
 1003b1e:	add    BYTE PTR [rax],al
 1003b20:	shl    BYTE PTR [rbp+0x0],0x1
	...
 1003b30:	add    bh,bh
 1003b32:	out    dx,eax
 1003b33:	inc    DWORD PTR [rax]
 1003b35:	add    BYTE PTR [rax],al
 1003b37:	add    al,bl
 1003b39:	jne    0x1003b3b
 1003b3b:	add    DWORD PTR [rax],eax
	...
 1003b45:	add    BYTE PTR [rax],al
 1003b47:	add    BYTE PTR [rax],dh
 1003b49:	xor    DWORD PTR [rdi+0x31],ecx
 1003b4f:	add    BYTE PTR [rax],bl
 1003b51:	jbe    0x1003b53
 1003b53:	add    DWORD PTR [rax],eax
	...
 1003b61:	adc    edi,edi
 1003b63:	adc    DWORD PTR [rax],eax
 1003b65:	add    BYTE PTR [rax],al
 1003b67:	add    BYTE PTR [rax+0x76],dl
 1003b6a:	add    BYTE PTR [rcx],al
	...
 1003b78:	add    BYTE PTR [rbx+riz*4+0xd7],ch
 1003b7f:	add    BYTE PTR [rax+0x76],dh
 1003b82:	add    BYTE PTR [rcx],al
	...
 1003b90:	nop
 1003b91:	add    eax,0x5ff
 1003b96:	add    BYTE PTR [rax],al
 1003b98:	cwde   
 1003b99:	jbe    0x1003b9b
 1003b9b:	add    DWORD PTR [rax],eax
	...
 1003ba5:	add    BYTE PTR [rax],al
 1003ba7:	add    BYTE PTR [rax+0x30],al
 1003baa:	lahf   
 1003bab:	xor    BYTE PTR [rax],al
 1003bad:	add    BYTE PTR [rax],al
 1003baf:	add    BYTE PTR [rax+0x10076],dh
	...
 1003bbd:	add    BYTE PTR [rax],al
 1003bbf:	add    BYTE PTR [rax+0x2],dl
 1003bc2:	scas   eax,DWORD PTR es:[rdi]
 1003bc3:	add    al,BYTE PTR [rax]
 1003bc5:	add    BYTE PTR [rax],al
 1003bc7:	add    al,cl
 1003bc9:	jbe    0x1003bcb
 1003bcb:	add    DWORD PTR [rax],eax
	...
 1003bd5:	add    BYTE PTR [rax],al
 1003bd7:	add    al,dh
 1003bd9:	(bad)  
 1003bda:	jmp    FWORD PTR [rdi]
 1003bdc:	add    BYTE PTR [rax],al
 1003bde:	add    BYTE PTR [rax],al
 1003be0:	lock jbe 0x1003be3
 1003be3:	add    DWORD PTR [rax],eax
	...
 1003bed:	add    BYTE PTR [rax],al
 1003bef:	add    BYTE PTR [rax+0x319f31],dl
 1003bf5:	add    BYTE PTR [rax],al
 1003bf7:	add    BYTE PTR [rax],bh
 1003bf9:	ja     0x1003bfb
 1003bfb:	add    DWORD PTR [rax],eax
	...
 1003c09:	(bad)  
 1003c0a:	fild   QWORD PTR [rdi]
 1003c0c:	add    BYTE PTR [rax],al
 1003c0e:	add    BYTE PTR [rax],al
 1003c10:	push   rax
 1003c11:	ja     0x1003c13
 1003c13:	add    DWORD PTR [rax],eax
	...
 1003c1d:	add    BYTE PTR [rax],al
 1003c1f:	add    BYTE PTR [rax+0xcff0c],al
 1003c25:	add    BYTE PTR [rax],al
 1003c27:	add    BYTE PTR [rax+0x77],bh
 1003c2a:	add    BYTE PTR [rcx],al
	...
 1003c38:	movabs al,ds:0x900000000030ff30
 1003c41:	ja     0x1003c43
 1003c43:	add    DWORD PTR [rax],eax
	...
 1003c4d:	add    BYTE PTR [rax],al
 1003c4f:	add    BYTE PTR [rax+0x17ff17],al
 1003c55:	add    BYTE PTR [rax],al
 1003c57:	add    BYTE PTR [rax+0x10077],ch
	...
 1003c65:	add    BYTE PTR [rax],al
 1003c67:	add    BYTE PTR [rax+0xeff0e],al
 1003c6d:	add    BYTE PTR [rax],al
 1003c6f:	add    BYTE PTR [rax+0x10077],bh
	...
 1003c7d:	add    BYTE PTR [rax],al
 1003c7f:	add    BYTE PTR [rax+0xff00],al
 1003c85:	add    BYTE PTR [rax],al
 1003c87:	add    al,cl
 1003c89:	ja     0x1003c8b
 1003c8b:	add    DWORD PTR [rax],eax
	...
 1003c99:	add    DWORD PTR [rdi+0x1],edi
 1003c9c:	add    BYTE PTR [rax],al
 1003c9e:	add    BYTE PTR [rax],al
 1003ca0:	lock ja 0x1003ca3
 1003ca3:	add    DWORD PTR [rax],eax
	...
 1003cad:	add    BYTE PTR [rax],al
 1003caf:	add    BYTE PTR [rax+0x24f01],al
 1003cb5:	add    BYTE PTR [rax],al
 1003cb7:	add    BYTE PTR [rax],bl
 1003cb9:	js     0x1003cbb
 1003cbb:	add    DWORD PTR [rax],eax
	...
 1003cc9:	(bad)  
 1003cca:	call   FWORD PTR [rsi]
 1003ccc:	add    BYTE PTR [rax],al
 1003cce:	add    BYTE PTR [rax],al
 1003cd0:	rex js 0x1003cd3
 1003cd3:	add    DWORD PTR [rax],eax
	...
 1003ce1:	and    DWORD PTR [rdi+0x21],ecx
 1003ce4:	add    BYTE PTR [rax],al
 1003ce6:	add    BYTE PTR [rax],al
 1003ce8:	js     0x1003d62
 1003cea:	add    BYTE PTR [rcx],al
	...
 1003cf8:	add    BYTE PTR [rip+0xd7f],cl        # 0x1004a7d
 1003cfe:	add    BYTE PTR [rax],al
 1003d00:	movabs al,ds:0x10078
	...
 1003d11:	and    bh,bh
 1003d13:	and    al,BYTE PTR [rax]
 1003d15:	add    BYTE PTR [rax],al
 1003d17:	add    BYTE PTR [rax+0x10078],bh
	...
 1003d29:	jmp    QWORD PTR es:[rsi]
 1003d2c:	add    BYTE PTR [rax],al
 1003d2e:	add    BYTE PTR [rax],al
 1003d30:	call   0x1013dad
	...
 1003d41:	and    edi,edi
 1003d43:	and    eax,DWORD PTR [rax]
 1003d45:	add    BYTE PTR [rax],al
 1003d47:	add    BYTE PTR [rax],bl
 1003d49:	jns    0x1003d4b
 1003d4b:	add    DWORD PTR [rax],eax
	...
 1003d59:	sbb    BYTE PTR [rdi+0x18],ch
 1003d5f:	add    BYTE PTR [rax+0x79],dl
 1003d62:	add    BYTE PTR [rcx],al
	...
 1003d70:	add    BYTE PTR [rax],dl
 1003d72:	lahf   
 1003d73:	adc    BYTE PTR [rax],al
 1003d75:	add    BYTE PTR [rax],al
 1003d77:	add    BYTE PTR [rax+0x79],ch
 1003d7a:	add    BYTE PTR [rcx],al
	...
 1003d88:	push   rax
 1003d89:	and    DWORD PTR [rdi+0x21],ecx
 1003d8f:	add    BYTE PTR [rax+0x10079],al
	...
 1003d9d:	add    BYTE PTR [rax],al
 1003d9f:	add    BYTE PTR [rax+0x169f16],al
 1003da5:	add    BYTE PTR [rax],al
 1003da7:	add    BYTE PTR [rax+0x10079],ah
	...
 1003db5:	add    BYTE PTR [rax],al
 1003db7:	add    BYTE PTR [rax+0x24],al
 1003dba:	pop    rdi
 1003dbb:	and    al,0x0
 1003dbd:	add    BYTE PTR [rax],al
 1003dbf:	add    BYTE PTR [rax+0x10079],dh
	...
 1003dd1:	or     edi,DWORD PTR [rdi+0xb]
 1003dd4:	add    BYTE PTR [rax],al
 1003dd6:	add    BYTE PTR [rax],al
 1003dd8:	lock jns 0x1003ddb
 1003ddb:	add    DWORD PTR [rax],eax
	...
 1003de9:	loopne 0x1003dea
 1003deb:	clc    
 1003dec:	add    BYTE PTR [rax],al
 1003dee:	add    BYTE PTR [rax],al
 1003df0:	add    BYTE PTR [rdx+0x0],bh
 1003df3:	add    DWORD PTR [rax],eax
	...
 1003dfd:	add    BYTE PTR [rax],al
 1003dff:	add    BYTE PTR [rax+0x16ff16],ah
 1003e05:	add    BYTE PTR [rax],al
 1003e07:	add    BYTE PTR [rax],ah
 1003e09:	jp     0x1003e0b
 1003e0b:	add    DWORD PTR [rax],eax
	...
 1003e15:	add    BYTE PTR [rax],al
 1003e17:	add    BYTE PTR [rax+0xdff0d],al
 1003e1d:	add    BYTE PTR [rax],al
 1003e1f:	add    BYTE PTR [rax],dh
 1003e21:	jp     0x1003e23
 1003e23:	add    DWORD PTR [rax],eax
	...
 1003e2d:	add    BYTE PTR [rax],al
 1003e2f:	add    BYTE PTR [rax-0x2],dl
 1003e32:	outs   dx,DWORD PTR ds:[rsi]
 1003e33:	inc    BYTE PTR [rax]
 1003e35:	add    BYTE PTR [rax],al
 1003e37:	add    BYTE PTR [rax+0x7a],cl
 1003e3a:	add    BYTE PTR [rcx],al
	...
 1003e48:	mov    al,0x2
 1003e4a:	inc    DWORD PTR [rdx]
 1003e4c:	add    BYTE PTR [rax],al
 1003e4e:	add    BYTE PTR [rax],al
 1003e50:	jo     0x1003ecc
 1003e52:	add    BYTE PTR [rcx],al
 1003e54:	add    BYTE PTR [rax],al
 1003e56:	add    BYTE PTR [rax],al
 1003e58:	add    DWORD PTR [rax],eax
 1003e5a:	add    BYTE PTR [rax],al
 1003e5c:	add    BYTE PTR [rax],al
 1003e5e:	add    BYTE PTR [rax],al
 1003e60:	(bad)  
 1003e61:	(bad)  
 1003e62:	(bad)  
 1003e63:	inc    BYTE PTR [rax]
 1003e65:	add    BYTE PTR [rax],al
 1003e67:	add    BYTE PTR [rax+0x1007a],ch
	...
 1003e75:	add    BYTE PTR [rax],al
 1003e77:	add    al,dh
 1003e79:	(bad)  
 1003e7a:	std    
 1003e7b:	inc    DWORD PTR [rax]
 1003e7d:	add    BYTE PTR [rax],al
 1003e7f:	add    al,al
 1003e81:	jp     0x1003e83
 1003e83:	add    DWORD PTR [rax],eax
	...
 1003e8d:	add    BYTE PTR [rax],al
 1003e8f:	add    BYTE PTR [rax+0x20],dh
 1003e92:	lahf   
 1003e93:	and    BYTE PTR [rax],al
 1003e95:	add    BYTE PTR [rax],al
 1003e97:	add    al,bl
 1003e99:	jp     0x1003e9b
 1003e9b:	add    DWORD PTR [rax],eax
	...
 1003ea9:	(bad)  
 1003eaa:	rex.WRXB (bad) 
 1003eac:	add    BYTE PTR [rax],al
 1003eae:	add    BYTE PTR [rax],al
 1003eb0:	adc    BYTE PTR [rbx+0x0],bh
 1003eb3:	add    DWORD PTR [rax],eax
	...
 1003ebd:	add    BYTE PTR [rax],al
 1003ebf:	add    BYTE PTR [rax+0xbff0b],al
 1003ec5:	add    BYTE PTR [rax],al
 1003ec7:	add    BYTE PTR [rax],ch
 1003ec9:	jnp    0x1003ecb
 1003ecb:	add    DWORD PTR [rax],eax
	...
 1003ed9:	or     al,0x7f
 1003edb:	or     al,0x0
 1003edd:	add    BYTE PTR [rax],al
 1003edf:	add    BYTE PTR [rax],bh
 1003ee1:	jnp    0x1003ee3
 1003ee3:	add    DWORD PTR [rax],eax
	...
 1003eed:	add    BYTE PTR [rax],al
 1003eef:	add    BYTE PTR [rax+0x7bf07],al
 1003ef5:	add    BYTE PTR [rax],al
 1003ef7:	add    BYTE PTR [rax+0x7b],dl
 1003efa:	add    BYTE PTR [rcx],al
	...
 1003f08:	add    BYTE PTR [rsi],cl
 1003f0a:	jg     0x1003f1a
 1003f0c:	add    BYTE PTR [rax],al
 1003f0e:	add    BYTE PTR [rax],al
 1003f10:	push   0x1007b
	...
 1003f21:	ud0    ecx,DWORD PTR [rdi]
 1003f24:	add    BYTE PTR [rax],al
 1003f26:	add    BYTE PTR [rax],al
 1003f28:	js     0x1003fa5
 1003f2a:	add    BYTE PTR [rcx],al
	...
 1003f38:	add    BYTE PTR [rdi+rdi*2],dl
 1003f3b:	(bad)  
 1003f3c:	add    BYTE PTR [rax],al
 1003f3e:	add    BYTE PTR [rax],al
 1003f40:	nop
 1003f41:	jnp    0x1003f43
 1003f43:	add    DWORD PTR [rax],eax
	...
 1003f4d:	add    BYTE PTR [rax],al
 1003f4f:	add    BYTE PTR [rax+0xa4cfa4],dl
 1003f55:	add    BYTE PTR [rax],al
 1003f57:	add    al,ah
 1003f59:	jnp    0x1003f5b
 1003f5b:	add    DWORD PTR [rax],eax
	...
 1003f69:	movabs al,ds:0x7c0000000000a48f
 1003f72:	add    BYTE PTR [rcx],al
 1003f74:	add    BYTE PTR [rax],al
 1003f76:	add    BYTE PTR [rax],al
 1003f78:	add    al,BYTE PTR [rax]
 1003f7a:	add    BYTE PTR [rax],al
 1003f7c:	add    BYTE PTR [rax],al
 1003f7e:	add    BYTE PTR [rax],al
 1003f80:	add    BYTE PTR [rdi],bl
 1003f82:	add    BYTE PTR [rax],al
 1003f84:	add    BYTE PTR [rax],al
 1003f86:	add    BYTE PTR [rax],al
 1003f88:	sbb    al,0x7c
 1003f8a:	add    BYTE PTR [rcx],al
 1003f8c:	add    BYTE PTR [rax],al
 1003f8e:	add    BYTE PTR [rax],al
 1003f90:	add    al,BYTE PTR [rax]
 1003f92:	add    BYTE PTR [rax],al
 1003f94:	add    BYTE PTR [rax],al
 1003f96:	add    BYTE PTR [rax],al
 1003f98:	add    BYTE PTR [rcx],al
 1003f9a:	add    BYTE PTR [rax],al
 1003f9c:	add    BYTE PTR [rax],al
 1003f9e:	add    BYTE PTR [rax],al
 1003fa0:	and    BYTE PTR [rax+rax*1+0x1],bh
 1003fa4:	add    BYTE PTR [rax],al
 1003fa6:	add    BYTE PTR [rax],al
 1003fa8:	add    al,BYTE PTR [rax]
 1003faa:	add    BYTE PTR [rax],al
 1003fac:	add    BYTE PTR [rax],al
 1003fae:	add    BYTE PTR [rax],al
 1003fb0:	add    BYTE PTR [rdx],al
 1003fb2:	add    BYTE PTR [rax],al
 1003fb4:	add    BYTE PTR [rax],al
 1003fb6:	add    BYTE PTR [rax],al
 1003fb8:	sub    BYTE PTR [rax+rax*1+0x1],bh
 1003fbc:	add    BYTE PTR [rax],al
 1003fbe:	add    BYTE PTR [rax],al
 1003fc0:	add    al,BYTE PTR [rax]
 1003fc2:	add    BYTE PTR [rax],al
 1003fc4:	add    BYTE PTR [rax],al
 1003fc6:	add    BYTE PTR [rax],al
 1003fc8:	add    BYTE PTR [rax+rax*1],al
 1003fcb:	add    BYTE PTR [rax],al
 1003fcd:	add    BYTE PTR [rax],al
 1003fcf:	add    BYTE PTR [rax],dh
 1003fd1:	jl     0x1003fd3
 1003fd3:	add    DWORD PTR [rax],eax
 1003fd5:	add    BYTE PTR [rax],al
 1003fd7:	add    BYTE PTR [rdx],al
	...
 1003fe1:	or     BYTE PTR [rax],al
 1003fe3:	add    BYTE PTR [rax],al
 1003fe5:	add    BYTE PTR [rax],al
 1003fe7:	add    BYTE PTR [rax],bh
 1003fe9:	jl     0x1003feb
 1003feb:	add    DWORD PTR [rax],eax
 1003fed:	add    BYTE PTR [rax],al
 1003fef:	add    BYTE PTR [rdx],al
	...
 1003ff9:	adc    BYTE PTR [rax],al
 1003ffb:	add    BYTE PTR [rax],al
 1003ffd:	add    BYTE PTR [rax],al
 1003fff:	add    BYTE PTR [rax+0x7c],al
 1004002:	add    BYTE PTR [rcx],al
 1004004:	add    BYTE PTR [rax],al
 1004006:	add    BYTE PTR [rax],al
 1004008:	add    al,BYTE PTR [rax]
 100400a:	add    BYTE PTR [rax],al
 100400c:	add    BYTE PTR [rax],al
 100400e:	add    BYTE PTR [rax],al
 1004010:	add    al,ah
 1004012:	add    BYTE PTR [rax],al
 1004014:	add    BYTE PTR [rax],al
 1004016:	add    BYTE PTR [rax],al
 1004018:	rex.W jl 0x100401b
 100401b:	add    DWORD PTR [rax],eax
 100401d:	add    BYTE PTR [rax],al
 100401f:	add    BYTE PTR [rdx],al
	...
 1004029:	and    BYTE PTR [rax],al
 100402b:	add    BYTE PTR [rax],al
 100402d:	add    BYTE PTR [rax],al
 100402f:	add    BYTE PTR [rsp+rdi*2+0x0],cl
 1004033:	add    DWORD PTR [rax],eax
 1004035:	add    BYTE PTR [rax],al
 1004037:	add    BYTE PTR [rdx],al
	...
 1004041:	add    BYTE PTR [rax],al
 1004044:	add    BYTE PTR [rax],al
 1004046:	add    BYTE PTR [rax],al
 1004048:	push   rsp
 1004049:	jl     0x100404b
 100404b:	add    DWORD PTR [rax],eax
 100404d:	add    BYTE PTR [rax],al
 100404f:	add    BYTE PTR [rdx],al
	...
 1004059:	add    BYTE PTR [rax],0x0
 100405c:	add    BYTE PTR [rax],al
 100405e:	add    BYTE PTR [rax],al
 1004060:	pop    rsp
 1004061:	jl     0x1004063
 1004063:	add    DWORD PTR [rax],eax
 1004065:	add    BYTE PTR [rax],al
 1004067:	add    BYTE PTR [rdx],al
 1004069:	add    BYTE PTR [rax],al
 100406b:	add    BYTE PTR [rax],al
 100406d:	add    BYTE PTR [rax],al
 100406f:	add    al,ah
 1004071:	add    BYTE PTR [rax],al
 1004073:	add    BYTE PTR [rax],al
 1004075:	add    BYTE PTR [rax],al
 1004077:	add    BYTE PTR [rsp+rdi*2+0x0],ah
 100407b:	add    DWORD PTR [rax],eax
 100407d:	add    BYTE PTR [rax],al
 100407f:	add    BYTE PTR [rdx],al
 1004081:	add    BYTE PTR [rax],al
 1004083:	add    BYTE PTR [rax],al
 1004085:	add    BYTE PTR [rax],al
 1004087:	add    BYTE PTR [rax],ah
 1004089:	add    BYTE PTR [rax],al
 100408b:	add    BYTE PTR [rax],al
 100408d:	add    BYTE PTR [rax],al
 100408f:	add    BYTE PTR [rax+0x7c],ch
 1004092:	add    BYTE PTR [rcx],al
 1004094:	add    BYTE PTR [rax],al
 1004096:	add    BYTE PTR [rax],al
 1004098:	add    al,BYTE PTR [rax]
 100409a:	add    BYTE PTR [rax],al
 100409c:	add    BYTE PTR [rax],al
 100409e:	add    BYTE PTR [rax],al
 10040a0:	add    BYTE PTR [rax],al
 10040a3:	add    BYTE PTR [rax],al
 10040a5:	add    BYTE PTR [rax],al
 10040a7:	add    BYTE PTR [rax+0x7c],dh
 10040aa:	add    BYTE PTR [rcx],al
 10040ac:	add    BYTE PTR [rax],al
 10040ae:	add    BYTE PTR [rax],al
 10040b0:	add    al,BYTE PTR [rax]
 10040b2:	add    BYTE PTR [rax],al
 10040b4:	add    BYTE PTR [rax],al
 10040b6:	add    BYTE PTR [rax],al
 10040b8:	add    BYTE PTR [rax],0x0
 10040bb:	add    BYTE PTR [rax],al
 10040bd:	add    BYTE PTR [rax],al
 10040bf:	add    BYTE PTR [rax+0x7c],bh
 10040c2:	add    BYTE PTR [rcx],al
 10040c4:	add    BYTE PTR [rax],al
 10040c6:	add    BYTE PTR [rax],al
 10040c8:	add    al,BYTE PTR [rax]
	...
 10040d2:	jg     0x10040d4
 10040d4:	add    BYTE PTR [rax],al
 10040d6:	add    BYTE PTR [rax],al
 10040d8:	cmp    BYTE PTR [rax+rax*1+0x1],0x0
 10040dd:	add    BYTE PTR [rax],al
 10040df:	add    BYTE PTR [rdx],al
	...
 10040e9:	add    BYTE PTR [rcx],al
 10040eb:	add    BYTE PTR [rax],al
 10040ed:	add    BYTE PTR [rax],al
 10040ef:	add    BYTE PTR [rsp+rdi*2+0x100],al
 10040f6:	add    BYTE PTR [rax],al
 10040f8:	add    al,BYTE PTR [rax]
	...
 1004102:	add    al,BYTE PTR [rax]
 1004104:	add    BYTE PTR [rax],al
 1004106:	add    BYTE PTR [rax],al
 1004108:	mov    WORD PTR [rax+rax*1+0x1],?
 100410c:	add    BYTE PTR [rax],al
 100410e:	add    BYTE PTR [rax],al
 1004110:	add    al,BYTE PTR [rax]
	...
 100411a:	add    al,0x0
 100411c:	add    BYTE PTR [rax],al
 100411e:	add    BYTE PTR [rax],al
 1004120:	xchg   esp,eax
 1004121:	jl     0x1004123
 1004123:	add    DWORD PTR [rax],eax
 1004125:	add    BYTE PTR [rax],al
 1004127:	add    BYTE PTR [rdx],al
	...
 1004131:	add    BYTE PTR [rax],cl
 1004133:	add    BYTE PTR [rax],al
 1004135:	add    BYTE PTR [rax],al
 1004137:	add    BYTE PTR [rsp+rdi*2+0x100],bl
 100413e:	add    BYTE PTR [rax],al
 1004140:	add    al,BYTE PTR [rax]
	...
 100414a:	adc    BYTE PTR [rax],al
 100414c:	add    BYTE PTR [rax],al
 100414e:	add    BYTE PTR [rax],al
 1004150:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1004151:	jl     0x1004153
 1004153:	add    DWORD PTR [rax],eax
 1004155:	add    BYTE PTR [rax],al
 1004157:	add    BYTE PTR [rdx],al
	...
 1004161:	add    BYTE PTR [rax],ah
 1004163:	add    BYTE PTR [rax],al
 1004165:	add    BYTE PTR [rax],al
 1004167:	add    BYTE PTR [rsp+rdi*2+0x100],ch
 100416e:	add    BYTE PTR [rax],al
 1004170:	add    al,BYTE PTR [rax]
	...
 100417a:	add    BYTE PTR [rax],al
 100417d:	add    BYTE PTR [rax],al
 100417f:	add    BYTE PTR [rsp+rdi*2+0x100],dh
 1004186:	add    BYTE PTR [rax],al
 1004188:	add    al,BYTE PTR [rax]
	...
 1004192:	add    BYTE PTR [rdi],0x0
 1004195:	add    BYTE PTR [rax],al
 1004197:	add    BYTE PTR [rsp+rdi*2+0x100],bh
 100419e:	add    BYTE PTR [rax],al
 10041a0:	add    al,BYTE PTR [rax]
	...
 10041aa:	add    BYTE PTR [rax],0x0
 10041ad:	add    BYTE PTR [rax],al
 10041af:	add    al,al
 10041b1:	jl     0x10041b3
 10041b3:	add    DWORD PTR [rax],eax
 10041b5:	add    BYTE PTR [rax],al
 10041b7:	add    BYTE PTR [rdx],al
	...
 10041c1:	add    BYTE PTR [rax],al
 10041c3:	add    DWORD PTR [rax],eax
 10041c5:	add    BYTE PTR [rax],al
 10041c7:	add    al,cl
 10041c9:	jl     0x10041cb
 10041cb:	add    DWORD PTR [rax],eax
 10041cd:	add    BYTE PTR [rax],al
 10041cf:	add    BYTE PTR [rdx],al
	...
 10041d9:	add    BYTE PTR [rax],al
 10041db:	add    al,BYTE PTR [rax]
 10041dd:	add    BYTE PTR [rax],al
 10041df:	add    al,dl
 10041e1:	jl     0x10041e3
 10041e3:	add    DWORD PTR [rax],eax
 10041e5:	add    BYTE PTR [rax],al
 10041e7:	add    BYTE PTR [rdx],al
	...
 10041f1:	add    BYTE PTR [rax],al
 10041f3:	add    al,0x0
 10041f5:	add    BYTE PTR [rax],al
 10041f7:	add    al,bl
 10041f9:	jl     0x10041fb
 10041fb:	add    DWORD PTR [rax],eax
 10041fd:	add    BYTE PTR [rax],al
 10041ff:	add    BYTE PTR [rdx],al
	...
 1004209:	add    BYTE PTR [rax],al
 100420b:	cmp    BYTE PTR [rax],al
 100420d:	add    BYTE PTR [rax],al
 100420f:	add    al,ah
 1004211:	jl     0x1004213
 1004213:	add    DWORD PTR [rax],eax
 1004215:	add    BYTE PTR [rax],al
 1004217:	add    BYTE PTR [rdx],al
	...
 1004221:	add    BYTE PTR [rax],al
 1004223:	or     BYTE PTR [rax],al
 1004225:	add    BYTE PTR [rax],al
 1004227:	add    ah,ah
 1004229:	jl     0x100422b
 100422b:	add    DWORD PTR [rax],eax
 100422d:	add    BYTE PTR [rax],al
 100422f:	add    BYTE PTR [rdx],al
	...
 1004239:	add    BYTE PTR [rax],al
 100423b:	adc    BYTE PTR [rax],al
 100423d:	add    BYTE PTR [rax],al
 100423f:	add    ah,ch
 1004241:	jl     0x1004243
 1004243:	add    DWORD PTR [rax],eax
 1004245:	add    BYTE PTR [rax],al
 1004247:	add    BYTE PTR [rdx],al
	...
 1004251:	add    BYTE PTR [rax],al
 1004253:	and    BYTE PTR [rax],al
 1004255:	add    BYTE PTR [rax],al
 1004257:	add    ah,dh
 1004259:	jl     0x100425b
 100425b:	add    DWORD PTR [rax],eax
 100425d:	add    BYTE PTR [rax],al
 100425f:	add    BYTE PTR [rcx],al
 1004261:	add    BYTE PTR [rax],al
 1004263:	add    BYTE PTR [rax],al
 1004265:	add    BYTE PTR [rax],al
 1004267:	add    BYTE PTR [rdx],al
 1004269:	add    BYTE PTR [rax],al
 100426b:	add    BYTE PTR [rdx],al
 100426d:	add    BYTE PTR [rax],al
 100426f:	add    BYTE PTR [rax],al
 1004271:	add    BYTE PTR [rax],al
 1004273:	and    BYTE PTR [rdx],al
 1004275:	add    DWORD PTR [rax],eax
 1004277:	add    BYTE PTR [rax],al
 1004279:	add    BYTE PTR [rax],ah
 100427b:	add    BYTE PTR [rdx],al
 100427d:	add    BYTE PTR [rax],al
 100427f:	add    BYTE PTR [rax],al
 1004281:	add    BYTE PTR [rax+0x8200],al
 1004287:	add    BYTE PTR [rax],al
 1004289:	add    BYTE PTR [rax+0x0],al
 100428c:	add    al,BYTE PTR [rax]
 100428e:	add    BYTE PTR [rax],al
 1004290:	add    BYTE PTR [rax],al
 1004292:	add    al,0x0
 1004294:	add    al,BYTE PTR [rax]
 1004296:	add    BYTE PTR [rax],al
 1004298:	add    BYTE PTR [rax],al
 100429a:	add    BYTE PTR [rdx],al
 100429c:	add    al,BYTE PTR [rax]
 100429e:	add    BYTE PTR [rax],al
 10042a0:	add    BYTE PTR [rax],al
 10042a2:	add    al,BYTE PTR [rax]
 10042a4:	add    DWORD PTR [rax],eax
 10042a6:	add    BYTE PTR [rax],al
 10042a8:	add    BYTE PTR [rax],al
 10042aa:	and    BYTE PTR [rax],al
 10042ac:	add    DWORD PTR [rax],eax
 10042ae:	add    BYTE PTR [rax],al
 10042b0:	and    BYTE PTR [rax],al
 10042b2:	add    BYTE PTR [rax],al
 10042b4:	add    BYTE PTR [r8],al
 10042b7:	add    BYTE PTR [rax],al
 10042b9:	add    BYTE PTR [rax],ah
 10042bb:	add    BYTE PTR [rax],0x0
 10042be:	add    BYTE PTR [rax],al
 10042c0:	add    BYTE PTR [rax],dl
 10042c2:	add    BYTE PTR [rax+0x20],al
 10042c8:	add    BYTE PTR [rax],al
 10042ca:	add    BYTE PTR [rcx],al
 10042cc:	add    al,BYTE PTR [rax]
 10042ce:	add    BYTE PTR [rax],al
 10042d0:	add    BYTE PTR [rax],al
 10042d2:	add    DWORD PTR [rax+0x40],eax
 10042d8:	add    BYTE PTR [rcx],al
 10042da:	add    BYTE PTR [rax+0x20],al
 10042e0:	add    al,BYTE PTR [rax]
 10042e2:	add    BYTE PTR [rax],al
 10042e4:	add    al,BYTE PTR [rcx]
 10042e6:	add    BYTE PTR [rax],al
 10042e8:	add    BYTE PTR [rax],al
 10042ea:	add    BYTE PTR [rdx+rax*1],al
 10042ed:	add    BYTE PTR [rax],al
 10042ef:	add    BYTE PTR [rax],al
 10042f1:	add    DWORD PTR [rax],eax
 10042f3:	add    BYTE PTR [rdx],ah
 10042f5:	add    BYTE PTR [rax],al
 10042f7:	add    BYTE PTR [rax],al
 10042f9:	add    BYTE PTR [rax],dl
 10042fb:	add    BYTE PTR [rdx],al
 10042fd:	add    BYTE PTR [rax],al
 10042ff:	add    BYTE PTR [rax],al
 1004301:	add    BYTE PTR [rdx],al
 1004303:	add    BYTE PTR [rdx],al
 1004305:	add    BYTE PTR [rax],al
 1004307:	add    BYTE PTR [rax+0x2000000],al
 100430d:	add    BYTE PTR [rax],al
 100430f:	add    BYTE PTR [rax],al
 1004311:	add    BYTE PTR [rax],cl
 1004313:	add    BYTE PTR [rdx],al
 1004315:	add    BYTE PTR [rax],al
 1004317:	add    BYTE PTR [rax],al
 1004319:	adc    DWORD PTR [rax],eax
 100431b:	shl    BYTE PTR [rax],0x0
 100431e:	add    BYTE PTR [rax],al
 1004320:	add    BYTE PTR [rcx],dl
 1004322:	add    BYTE PTR [rax+0x22],al
 1004325:	add    BYTE PTR [rax],al
 1004327:	add    BYTE PTR [rax],al
 1004329:	adc    DWORD PTR [rax],eax
 100432b:	and    BYTE PTR [rax],0x0
 100432e:	add    BYTE PTR [rax],al
 1004330:	add    BYTE PTR [rcx],dl
 1004332:	add    BYTE PTR [rax],al
 1004334:	and    al,BYTE PTR [rax]
 1004336:	add    BYTE PTR [rax],al
 1004338:	add    BYTE PTR [rax+rax*1],al
 100433b:	and    BYTE PTR [rax],0x0
 100433e:	add    BYTE PTR [rax],al
 1004340:	add    BYTE PTR [rax],dl
 1004342:	add    BYTE PTR [rax],al
 1004344:	and    al,BYTE PTR [rax]
 1004346:	add    BYTE PTR [rax],al
 1004348:	add    BYTE PTR [rax],cl
 100434a:	add    BYTE PTR [rax],al
 100434c:	and    al,BYTE PTR [rax]
 100434e:	add    BYTE PTR [rax],al
 1004350:	add    DWORD PTR [rax],eax
 1004352:	add    BYTE PTR [rax],al
 1004354:	and    BYTE PTR [rax],al
 1004356:	add    BYTE PTR [rax],al
 1004358:	add    BYTE PTR [rdx],al
 100435a:	add    BYTE PTR [rax],al
 100435c:	and    al,BYTE PTR [rax]
 100435e:	add    BYTE PTR [rax],al
 1004360:	add    BYTE PTR [rdx],al
 1004362:	add    BYTE PTR [rax+0x20],al
 1004368:	add    BYTE PTR [rdx],al
 100436a:	add    BYTE PTR [rax],al
 100436c:	and    DWORD PTR [rax],eax
 100436e:	add    BYTE PTR [rax],al
 1004370:	add    BYTE PTR [rax+0x410000],al
 1004376:	add    BYTE PTR [rax],al
 1004378:	add    BYTE PTR [rax+0x420000],al
 100437e:	add    BYTE PTR [rax],al
 1004380:	add    DWORD PTR [rax],eax
 1004382:	add    BYTE PTR [rax],al
 1004384:	add    BYTE PTR [rax],al
 1004387:	add    BYTE PTR [rax],al
 1004389:	add    BYTE PTR [rax],al
 100438c:	add    al,BYTE PTR [rax]
 100438e:	add    BYTE PTR [rax],al
 1004390:	add    BYTE PTR [rax+rax*1],al
 1004393:	add    BYTE PTR [rdx],ah
 1004395:	add    BYTE PTR [rax],al
 1004397:	add    BYTE PTR [rax],al
 1004399:	add    BYTE PTR [rax],al
 100439c:	add    BYTE PTR [r8],al
 100439f:	add    BYTE PTR [rax],al
 10043a1:	add    BYTE PTR [rax],al
 10043a4:	add    DWORD PTR [rax],eax
 10043a6:	add    BYTE PTR [rax],al
 10043a8:	add    al,0x0
 10043aa:	add    BYTE PTR [rax],al
 10043ac:	rex.X add BYTE PTR [rax],al
 10043af:	add    BYTE PTR [rax],al
 10043b1:	and    BYTE PTR [rax],al
 10043b3:	add    BYTE PTR [rcx+0x0],al
 10043b6:	add    BYTE PTR [rax],al
 10043b8:	add    BYTE PTR [rax],ah
 10043ba:	add    BYTE PTR [rax],al
 10043bc:	and    DWORD PTR [rax],eax
 10043be:	add    BYTE PTR [rax],al
 10043c0:	add    BYTE PTR [rax],ah
 10043c2:	add    BYTE PTR [rax],al
 10043c4:	rex.X add BYTE PTR [rax],al
 10043c7:	add    BYTE PTR [rax],al
 10043c9:	add    al,0x0
 10043cb:	add    BYTE PTR [rcx],ah
 10043cd:	add    BYTE PTR [rax],al
 10043cf:	add    BYTE PTR [rax],ah
 10043d1:	add    BYTE PTR [rax],al
 10043d3:	add    BYTE PTR [rdx+0x0],al
 10043d6:	add    BYTE PTR [rax],al
 10043d8:	add    BYTE PTR [rax],al
 10043db:	add    BYTE PTR [rdx],ah
 10043dd:	add    BYTE PTR [rax],al
 10043df:	add    BYTE PTR [rax],al
 10043e1:	add    BYTE PTR [rax],ah
 10043e3:	add    BYTE PTR [rdx],ah
 10043e5:	add    BYTE PTR [rax],al
 10043e7:	add    BYTE PTR [rax],al
 10043e9:	or     BYTE PTR [rax],al
 10043eb:	and    BYTE PTR [rax],0x0
 10043ee:	add    BYTE PTR [rax],al
 10043f0:	add    BYTE PTR [rax],al
 10043f2:	add    BYTE PTR [rax],cl
 10043f4:	add    al,BYTE PTR [rcx]
 10043f6:	add    BYTE PTR [rax],al
 10043f8:	add    BYTE PTR [rax],al
 10043fa:	add    BYTE PTR [rax],dl
 10043fc:	add    al,BYTE PTR [rcx]
 10043fe:	add    BYTE PTR [rax],al
 1004400:	add    BYTE PTR [rax],al
 1004402:	add    DWORD PTR [rax],eax
 1004404:	rex.X add BYTE PTR [rax],al
 1004407:	add    BYTE PTR [rcx],al
 1004409:	add    BYTE PTR [rax],al
 100440b:	add    BYTE PTR [rax],al
 100440d:	add    DWORD PTR [rax],eax
 100440f:	add    BYTE PTR [rcx],al
 1004411:	add    BYTE PTR [rax],al
 1004413:	add    BYTE PTR [rax+0x0],al
 1004419:	add    BYTE PTR [rax],al
 100441b:	test   BYTE PTR [rax],al
 100441d:	add    BYTE PTR [rax],al
 100441f:	add    BYTE PTR [rax+0x0],al
 1004422:	add    BYTE PTR [rax+0x20],al
 1004428:	adc    BYTE PTR [rax],al
 100442a:	add    BYTE PTR [rax],al
 100442c:	add    al,BYTE PTR [rax]
 100442e:	add    BYTE PTR [rax],al
 1004430:	or     BYTE PTR [rax],al
 1004432:	add    BYTE PTR [rax],al
 1004434:	add    al,BYTE PTR [rax]
 1004436:	add    BYTE PTR [rax],al
 1004438:	add    BYTE PTR [rax],al
 100443a:	add    DWORD PTR [rax],eax
 100443c:	and    al,BYTE PTR [rax]
 100443e:	add    BYTE PTR [rax],al
 1004440:	add    BYTE PTR [rax],al
 1004442:	add    DWORD PTR [rax],eax
 1004444:	and    BYTE PTR [rax],al
 1004446:	add    al,BYTE PTR [rax]
 1004448:	and    DWORD PTR [rax],eax
 100444a:	add    eax,DWORD PTR [rax]
 100444c:	and    al,0x0
 100444e:	add    al,0x0
 1004450:	and    eax,0x28000300
 1004455:	add    BYTE PTR [rip+0x6002900],al        # 0x7006d5b
 100445b:	add    BYTE PTR [rdx],ch
 100445d:	add    BYTE PTR [rbx],al
 100445f:	add    BYTE PTR [rbx],ch
 1004461:	add    BYTE PTR [rdi],al
 1004463:	add    BYTE PTR [rax+rax*1],ch
 1004466:	add    eax,DWORD PTR [rax]
 1004468:	sub    eax,0x2e000800
 100446d:	add    BYTE PTR [rcx],cl
 100446f:	add    BYTE PTR [rdi],ch
 1004471:	add    BYTE PTR [rbx],al
 1004473:	add    BYTE PTR [rax],dh
 1004475:	add    BYTE PTR [rdx],cl
 1004477:	add    BYTE PTR [rdx],bh
 1004479:	add    BYTE PTR [rbx],cl
 100447b:	add    BYTE PTR [rbx],bh
 100447d:	add    BYTE PTR [rbx],al
 100447f:	add    BYTE PTR [rax+rax*1],bh
 1004482:	(bad)  
 1004483:	add    BYTE PTR [rdi],bh
 1004485:	add    BYTE PTR [rbx],al
 1004487:	add    BYTE PTR [rcx+0x0],al
 100448a:	or     al,0x0
 100448c:	pop    rbx
 100448d:	add    BYTE PTR [rip+0x3005c00],al        # 0x400a093
 1004493:	add    BYTE PTR [rbp+0x0],bl
 1004496:	(bad)  
 1004497:	add    BYTE PTR [rsi+0x0],bl
 100449a:	or     eax,0xe005f00
 100449f:	add    BYTE PTR [rax+0x0],ah
 10044a2:	or     eax,0xf006100
 10044a7:	add    BYTE PTR [rbx+0x0],bh
 10044aa:	add    eax,0x7007c00
 10044af:	add    BYTE PTR [rbp+0x0],bh
 10044b2:	(bad)  
 10044b3:	add    BYTE PTR [rsi+0x0],bh
 10044b6:	(bad)  
 10044b7:	add    BYTE PTR [rdi+0x0],bh
 10044ba:	add    DWORD PTR [rax],eax
 10044bc:	test   DWORD PTR [rax],eax
 10044be:	adc    BYTE PTR [rax],al
 10044c0:	xchg   BYTE PTR [rax],al
 10044c2:	add    DWORD PTR [rax],eax
 10044c4:	movabs al,ds:0xa2000300a1000200
 10044cd:	add    BYTE PTR [rax+rax*1],al
 10044d0:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10044d1:	add    BYTE PTR [rcx],dl
 10044d3:	add    BYTE PTR [rax-0x56fff300],ch
 10044d9:	add    BYTE PTR [rcx],dl
 10044db:	add    BYTE PTR [rdx-0x54ffee00],ch
 10044e1:	add    BYTE PTR [rbx],dl
 10044e3:	add    BYTE PTR [rax+rax*1+0xad0007],ch
 10044ea:	adc    al,0x0
 10044ec:	scas   al,BYTE PTR es:[rdi]
 10044ed:	add    BYTE PTR [rcx],dl
 10044ef:	add    BYTE PTR [rdi-0x4ffff300],ch
 10044f5:	add    BYTE PTR [rcx],dl
 10044f7:	add    BYTE PTR [rcx-0x4dfff900],dh
 10044fd:	add    BYTE PTR [rip+0xd00b400],dl        # 0xe00f903
 1004503:	add    BYTE PTR [rbp-0x49ffee00],dh
 1004509:	add    BYTE PTR [rcx],dl
 100450b:	add    BYTE PTR [rdi-0x47fff700],dh
 1004511:	add    BYTE PTR [rip+0x1500b900],cl        # 0x1600fe17
 1004517:	add    BYTE PTR [rdx-0x44ffee00],bh
 100451d:	add    BYTE PTR [rsi],dl
 100451f:	add    BYTE PTR [rax+rax*1+0xbf0015],bh
 1004526:	add    eax,DWORD PTR [rax]
 1004528:	rol    BYTE PTR [rax],0xc
 100452b:	add    bh,dl
 100452d:	add    BYTE PTR [rdi],al
 100452f:	add    al,bl
 1004531:	add    BYTE PTR [rax+rax*1],cl
 1004534:	fild   WORD PTR [rax]
 1004536:	(bad)  
 1004538:	test   DWORD PTR [rax],0xf80007
 100453e:	sldt   WORD PTR [rax]
 1004541:	add    DWORD PTR [rdi],edx
 1004543:	add    BYTE PTR [rdx],dh
 1004545:	add    DWORD PTR [rax],ebx
 1004547:	add    BYTE PTR [rcx+rax*1],dh
 100454a:	(bad)  
 100454b:	add    BYTE PTR [rax],bh
 100454d:	add    DWORD PTR [rcx],ebx
 100454f:	add    BYTE PTR [rdi],bh
 1004551:	add    DWORD PTR [rdx],ebx
 1004553:	add    BYTE PTR [rcx+0x1],al
 1004556:	sbb    DWORD PTR [rax],eax
 1004558:	add    QWORD PTR [r10],rdx
 100455b:	add    BYTE PTR [rdx+0x1],cl
 100455e:	(bad)  
 100455f:	add    BYTE PTR [rcx+0x1],bh
 1004562:	sbb    DWORD PTR [rax],eax
 1004564:	jg     0x1004567
 1004566:	adc    al,BYTE PTR [rax]
 1004568:	add    BYTE PTR [rcx],0x19
 100456b:	add    BYTE PTR [rdx-0x78ffe8ff],al
 1004571:	add    DWORD PTR [rcx],ebx
 1004573:	add    BYTE PTR [rdx-0x73fff3ff],cl
 1004579:	add    DWORD PTR [rdi],ecx
 100457b:	add    BYTE PTR [rsi-0x6dfff3ff],cl
 1004581:	add    DWORD PTR [rcx],ebx
 1004583:	add    BYTE PTR [rcx+rax*1+0x1970017],dl
 100458a:	or     al,0x0
 100458c:	cdq    
 100458d:	add    DWORD PTR [rdi],ecx
 100458f:	add    BYTE PTR [rcx+rax*1+0x19e000c],bl
 1004596:	sbb    DWORD PTR [rax],eax
 1004598:	movabs al,ds:0xab001901a7001701
 10045a1:	add    DWORD PTR [rdi],edx
 10045a3:	add    BYTE PTR [rdi-0x4dffe6ff],ch
 10045a9:	add    DWORD PTR [rax+rax*1],ecx
 10045ac:	mov    ah,0x1
 10045ae:	sbb    DWORD PTR [rax],eax
 10045b0:	mov    eax,0xba001701
 10045b5:	add    DWORD PTR [rdi],ecx
 10045b7:	add    BYTE PTR [rbx-0x43ffe4ff],bh
 10045bd:	add    DWORD PTR [rdi],edx
 10045bf:	add    BYTE PTR [rsi-0x3ffff0ff],bh
 10045c5:	add    DWORD PTR [rbx],ebx
 10045c7:	add    ah,al
 10045c9:	add    DWORD PTR [rax+rax*1],ebx
 10045cc:	(bad)
 10045cf:	add    dh,al
 10045d1:	add    DWORD PTR [rdx],ebx
 10045d3:	add    al,cl
 10045d5:	add    DWORD PTR [rip+0x1801c900],ebx        # 0x19020edb
 10045db:	add    bl,cl
 10045dd:	add    DWORD PTR [rip+0x1201cc00],ebx        # 0x130211e3
 10045e3:	add    ch,cl
 10045e5:	add    DWORD PTR [rcx],ebx
 10045e7:	add    ch,bl
 10045e9:	add    DWORD PTR [rdi],edx
 10045eb:	add    al,dh
 10045ed:	add    DWORD PTR [rdi],ecx
 10045ef:	add    cl,dh
 10045f1:	add    DWORD PTR [rax+rax*1],ebx
 10045f4:	repnz add DWORD PTR [rip+0x1201f300],ebx        # 0x130238fb
 10045fb:	add    ah,dh
 10045fd:	add    DWORD PTR [rdi],edx
 10045ff:	add    dh,dh
 1004601:	add    DWORD PTR [rax+rax*1],ebx
 1004604:	stc    
 1004605:	add    DWORD PTR [rdx],edx
 1004607:	add    dl,bh
 1004609:	add    DWORD PTR [rdi],edx
 100460b:	add    BYTE PTR [rax],bl
 100460d:	add    bl,BYTE PTR [rax]
 100460f:	add    BYTE PTR [rax],ah
 1004611:	add    bl,BYTE PTR [rsi]
 1004613:	add    BYTE PTR [rcx],ah
 1004615:	add    al,BYTE PTR [rax]
 1004617:	add    BYTE PTR [rdx],ah
 1004619:	add    bl,BYTE PTR [rax]
 100461b:	add    BYTE PTR [rdx+rax*1],dh
 100461e:	add    BYTE PTR [rax],al
 1004620:	push   rax
 1004621:	add    cl,BYTE PTR [rdi]
 1004623:	add    BYTE PTR [rcx-0x51ffedfe],ch
 1004629:	add    al,BYTE PTR [rax]
 100462b:	add    BYTE PTR [rax-0x46ffe0fe],dh
 1004631:	add    cl,BYTE PTR [rip+0x2002bb00]        # 0x21030137
 1004637:	add    dl,al
 1004639:	add    cl,BYTE PTR [rip+0x2102d000]        # 0x2203163f
 100463f:	add    dl,dl
 1004641:	add    cl,BYTE PTR [rip+0x1f02e000]        # 0x20032647
 1004647:	add    ch,ah
 1004649:	add    cl,BYTE PTR [rip+0x1f02ee00]        # 0x2003344f
 100464f:	add    bh,ch
 1004651:	add    al,BYTE PTR [rax]
 1004653:	add    BYTE PTR [rax],al
 1004655:	add    esp,DWORD PTR [rdx]
 1004657:	add    BYTE PTR [rsi+0x3],al
 100465a:	and    eax,DWORD PTR [rax]
 100465c:	add    r12,QWORD PTR [r8+r8*1]
 1004660:	push   rax
 1004661:	add    eax,DWORD PTR [rax]
 1004663:	add    BYTE PTR [rax+0x3],ah
 1004666:	and    al,BYTE PTR [rax]
 1004668:	(bad)  
 100466a:	and    eax,DWORD PTR [rax]
 100466c:	movsxd eax,DWORD PTR [rbx]
 100466e:	and    al,0x0
 1004670:	jo     0x1004675
 1004672:	add    BYTE PTR [rax],al
 1004674:	je     0x1004679
 1004676:	or     eax,0x37600
 100467b:	add    BYTE PTR [rdx+0x3],bh
 100467e:	(bad)  
 100467f:	add    BYTE PTR [rbx+0x3],bh
 1004682:	add    BYTE PTR [rax],al
 1004684:	jle    0x1004689
 1004686:	add    eax,DWORD PTR [rax]
 1004688:	jg     0x100468d
 100468a:	add    BYTE PTR [rax],al
 100468c:	test   BYTE PTR [rbx],al
 100468e:	or     eax,0xc038600
 1004693:	add    BYTE PTR [rdi-0x77fff6fd],al
 1004699:	add    ecx,DWORD PTR [rax+rax*1]
 100469c:	mov    eax,DWORD PTR [rbx]
 100469e:	add    BYTE PTR [rax],al
 10046a0:	mov    WORD PTR [rbx],es
 10046a2:	or     al,0x0
 10046a4:	lea    eax,[rbx]
 10046a6:	add    BYTE PTR [rax],al
 10046a8:	mov    es,WORD PTR [rbx]
 10046aa:	or     al,0x0
 10046ac:	nop
 10046ad:	add    ebx,DWORD PTR [rcx]
 10046af:	add    BYTE PTR [rdx-0x5dfff3fd],dl
 10046b5:	add    eax,DWORD PTR [rax]
 10046b7:	add    BYTE PTR [rbx-0x53fff3fd],ah
 10046bd:	add    ecx,DWORD PTR [rdi]
 10046bf:	add    bh,cl
 10046c1:	add    eax,DWORD PTR [rax]
 10046c3:	add    al,dl
 10046c5:	add    ecx,DWORD PTR [rdi]
 10046c7:	add    dl,dl
 10046c9:	add    ecx,DWORD PTR [rax+rax*1]
 10046cc:	(bad)  
 10046cd:	add    ecx,DWORD PTR [rdi]
 10046cf:	add    bh,dl
 10046d1:	add    edx,DWORD PTR [rdx]
 10046d3:	add    al,bl
 10046d5:	add    ebx,DWORD PTR [rsi]
 10046d7:	add    dl,bl
 10046d9:	add    ecx,DWORD PTR [rax+rax*1]
 10046dc:	fild   DWORD PTR [rbx]
 10046de:	adc    al,BYTE PTR [rax]
 10046e0:	fadd   QWORD PTR [rbx]
 10046e2:	or     al,0x0
 10046e4:	fld    QWORD PTR [rbx]
 10046e6:	adc    al,BYTE PTR [rax]
 10046e8:	fiadd  WORD PTR [rbx]
 10046ea:	or     al,0x0
 10046ec:	fild   WORD PTR [rbx]
 10046ee:	adc    al,BYTE PTR [rax]
 10046f0:	loopne 0x10046f5
 10046f2:	or     al,0x0
 10046f4:	loope  0x10046f9
 10046f6:	adc    al,BYTE PTR [rax]
 10046f8:	loop   0x10046fd
 10046fa:	(bad)  
 10046fb:	add    al,dh
 10046fd:	add    ecx,DWORD PTR [rdi]
 10046ff:	add    ah,dh
 1004701:	add    ebx,DWORD PTR [rax]
 1004703:	add    dh,dh
 1004705:	add    eax,DWORD PTR [rax]
 1004707:	add    BYTE PTR [rax],al
 1004709:	add    al,0x1c
 100470b:	add    BYTE PTR [rcx],al
 100470d:	add    al,0xc
 100470f:	add    BYTE PTR [rip+0xe001c04],cl        # 0xf006319
 1004715:	add    al,0xc
 1004717:	add    BYTE PTR [rax],dh
 1004719:	add    al,0xf
 100471b:	add    BYTE PTR [rax+0x4],dl
 100471e:	adc    al,BYTE PTR [rax]
 1004720:	push   rcx
 1004721:	add    al,0xf
 1004723:	add    BYTE PTR [rbp+0x4],bl
 1004726:	adc    al,BYTE PTR [rax]
 1004728:	pop    rsi
 1004729:	add    al,0xf
 100472b:	add    BYTE PTR [rax+0x4],ah
 100472e:	(bad)  
 100472f:	add    BYTE PTR [rdx-0x7cffeefc],al
 1004735:	add    al,0x22
 1004737:	add    BYTE PTR [rdi-0x77fffffc],al
 100473d:	add    al,0x25
 100473f:	add    BYTE PTR [rdx-0x73ffe1fc],cl
 1004745:	add    al,0x18
 1004747:	add    BYTE PTR [rax-0x3effe8fc],dl
 100474d:	add    al,0x19
 100474f:	add    ch,al
 1004751:	add    al,0x1e
 1004753:	add    bh,al
 1004755:	add    al,0x19
 1004757:	add    cl,cl
 1004759:	add    al,0x1e
 100475b:	add    bl,cl
 100475d:	add    al,0x19
 100475f:	add    ch,cl
 1004761:	add    al,0x1e
 1004763:	add    bh,cl
 1004765:	add    al,0x0
 1004767:	add    al,dl
 1004769:	add    al,0x17
 100476b:	add    ah,ch
 100476d:	add    al,0x18
 100476f:	add    dh,ch
 1004771:	add    al,0x17
 1004773:	add    dh,dh
 1004775:	add    al,0x0
 1004777:	add    al,bh
 1004779:	add    al,0x17
 100477b:	add    dl,bh
 100477d:	add    al,0x0
 100477f:	add    BYTE PTR [rax],al
 1004781:	add    eax,0x510001e
 1004786:	add    BYTE PTR [rax],al
 1004788:	xor    DWORD PTR [rip+0x557000c],eax        # 0x657479a
 100478e:	add    BYTE PTR [rax],al
 1004790:	pop    rcx
 1004791:	add    eax,0x55a0020
 1004796:	add    eax,DWORD PTR [rax]
 1004798:	(bad)  
 1004799:	add    eax,0x5610000
 100479e:	sldt   WORD PTR [rdi-0x77ffedfb]
 10047a5:	add    eax,0x5890000
 10047aa:	add    eax,DWORD PTR [rax]
 10047ac:	mov    al,BYTE PTR [rip+0x58b0014]        # 0x68b47c6
 10047b2:	add    BYTE PTR [rax],al
 10047b4:	xchg   ecx,eax
 10047b5:	add    eax,0x5a20022
 10047ba:	add    BYTE PTR [rax],al
 10047bc:	movabs ds:0xbb000005ba002205,eax
 10047c5:	add    eax,0x5be0022
 10047ca:	add    eax,DWORD PTR [rax]
 10047cc:	mov    edi,0xc0002205
 10047d1:	add    eax,0x5c10003
 10047d6:	and    al,BYTE PTR [rax]
 10047d8:	ret    
 10047d9:	add    eax,0x5c40003
 10047de:	and    al,BYTE PTR [rax]
 10047e0:	(bad)
 10047e3:	add    al,dl
 10047e5:	add    eax,0x5eb001b
 10047ea:	add    BYTE PTR [rax],al
 10047ec:	lock add eax,0x5f3001b
 10047f2:	add    eax,DWORD PTR [rax]
 10047f4:	cmc    
 10047f5:	add    eax,0x60c0000
 10047fa:	add    eax,DWORD PTR [rax]
 10047fc:	or     eax,0x1b000006
 1004801:	(bad)  
 1004802:	add    eax,DWORD PTR [rax]
 1004804:	sbb    al,0x6
 1004806:	add    BYTE PTR [rax],al
 1004808:	(bad)  
 1004809:	(bad)  
 100480a:	add    eax,DWORD PTR [rax]
 100480c:	and    BYTE PTR [rsi],al
 100480e:	add    BYTE PTR [rax],al
 1004810:	and    DWORD PTR [rsi],eax
 1004812:	sbb    eax,DWORD PTR [rax]
 1004814:	cmp    eax,DWORD PTR [rsi]
 1004816:	add    BYTE PTR [rax],al
 1004818:	rex (bad) 
 100481a:	and    DWORD PTR [rax],eax
 100481c:	rex.B (bad) 
 100481e:	sbb    eax,DWORD PTR [rax]
 1004820:	rex.WXB (bad) 
 1004822:	and    al,BYTE PTR [rax]
 1004824:	push   rbx
 1004825:	(bad)  
 1004826:	and    eax,DWORD PTR [rax]
 1004828:	push   rsi
 1004829:	(bad)  
 100482a:	add    BYTE PTR [rax],al
 100482c:	(bad)  
 100482d:	(bad)  
 100482e:	or     al,BYTE PTR [rax]
 1004830:	push   0x6
 1004832:	add    eax,DWORD PTR [rax]
 1004834:	outs   dx,BYTE PTR ds:[rsi]
 1004835:	(bad)  
 1004836:	(bad)  
 1004837:	add    BYTE PTR [rax+0x6],dh
 100483a:	and    al,BYTE PTR [rax]
 100483c:	jno    0x1004844
 100483e:	sbb    eax,DWORD PTR [rax]
 1004840:	mov    eax,0xba002606
 1004845:	(bad)  
 1004846:	sbb    eax,DWORD PTR [rax]
 1004848:	mov    edi,0xc0002606
 100484d:	(bad)  
 100484e:	sbb    eax,DWORD PTR [rax]
 1004850:	iret   
 1004851:	(bad)  
 1004852:	es add al,dl
 1004855:	(bad)  
 1004856:	sbb    eax,DWORD PTR [rax]
 1004858:	(bad)  
 1004859:	(bad)  
 100485a:	add    eax,DWORD PTR [rax]
 100485c:	(bad)  
 100485d:	(bad)  
 100485e:	sbb    eax,DWORD PTR [rax]
 1004860:	(bad)  
 1004861:	(bad)  
 1004862:	and    al,BYTE PTR [rax]
 1004864:	fld    QWORD PTR [rsi]
 1004866:	(bad)  
 1004867:	add    dh,bl
 1004869:	(bad)  
 100486a:	sub    BYTE PTR [rax],al
 100486c:	fild   WORD PTR [rsi]
 100486e:	and    al,BYTE PTR [rax]
 1004870:	in     eax,0x6
 1004872:	and    BYTE PTR [rax],al
 1004874:	out    0x6,eax
 1004876:	and    al,BYTE PTR [rax]
 1004878:	jmp    0xffffffffeb005983
 100487d:	(bad)  
 100487e:	and    al,BYTE PTR [rax]
 1004880:	out    dx,al
 1004881:	(bad)  
 1004882:	add    BYTE PTR [rax],al
 1004884:	lock (bad) 
 1004886:	or     al,BYTE PTR [rax]
 1004888:	cli    
 1004889:	(bad)  
 100488a:	es add ch,bh
 100488d:	(bad)  
 100488e:	adc    DWORD PTR [rax],eax
 1004890:	inc    DWORD PTR [rsi]
 1004892:	add    BYTE PTR [rax],al
 1004894:	add    BYTE PTR [rdi],al
 1004896:	add    eax,DWORD PTR [rax]
 1004898:	(bad)  
 1004899:	(bad)  
 100489a:	add    BYTE PTR [rax],al
 100489c:	sysret 
 100489e:	sub    DWORD PTR [rax],eax
 10048a0:	adc    BYTE PTR [rdi],al
 10048a2:	add    BYTE PTR es:[rcx],dl
 10048a5:	(bad)  
 10048a6:	and    eax,DWORD PTR [rax]
 10048a8:	adc    al,BYTE PTR [rdi]
 10048aa:	add    BYTE PTR es:[rip+0x30000007],ch        # 0x310048b8
 10048b1:	(bad)  
 10048b2:	and    eax,DWORD PTR [rax]
 10048b4:	rex.WXB (bad) 
 10048b6:	add    BYTE PTR [rax],al
 10048b8:	add    BYTE PTR [rdi],0x26
 10048bb:	add    BYTE PTR [rsi-0x4effdcf9],ah
 10048c1:	(bad)  
 10048c2:	(bad)  
 10048c3:	add    BYTE PTR [rdx+0x1000007],dh
 10048c9:	or     DWORD PTR [rdx],esp
 10048cb:	add    BYTE PTR [rbx],al
 10048cd:	or     DWORD PTR [rdx],ebp
 10048cf:	add    BYTE PTR [rcx+rcx*1],al
 10048d2:	add    BYTE PTR [rax],al
 10048d4:	add    eax,0x3a001b09
 10048d9:	or     DWORD PTR [rax],eax
 10048db:	add    BYTE PTR [rcx+rcx*1],bh
 10048de:	and    al,BYTE PTR [rax]
 10048e0:	cmp    eax,0x3e001b09
 10048e5:	or     DWORD PTR [rdx],ebp
 10048e7:	add    BYTE PTR [rcx+0x9],al
 10048ea:	and    al,BYTE PTR [rax]
 10048ec:	or     QWORD PTR [r10],rbp
 10048ef:	add    BYTE PTR [rbp+0x9],cl
 10048f2:	and    al,BYTE PTR [rax]
 10048f4:	rex.WRX or QWORD PTR [rax],r8
 10048f7:	add    BYTE PTR [rax+0x9],dl
 10048fa:	add    BYTE PTR es:[rcx+0x9],dl
 10048fe:	and    al,BYTE PTR [rax]
 1004900:	push   rbp
 1004901:	or     DWORD PTR [rax],eax
 1004903:	add    BYTE PTR [rax+0x9],bl
 1004906:	sbb    eax,DWORD PTR [rax]
 1004908:	(bad)  
 1004909:	or     DWORD PTR [rdx],esp
 100490b:	add    BYTE PTR [rcx+rcx*1+0x3],ah
 100490f:	add    BYTE PTR [rsi+0x9],ah
 1004912:	or     al,BYTE PTR [rax]
 1004914:	jo     0x100491f
 1004916:	add    eax,DWORD PTR [rax]
 1004918:	jno    0x1004923
 100491a:	add    BYTE PTR [rax],al
 100491c:	or     DWORD PTR [rcx],0x9820022
 1004922:	sub    al,BYTE PTR [rax]
 1004924:	test   BYTE PTR [rcx],cl
 1004926:	add    BYTE PTR [rax],al
 1004928:	test   DWORD PTR [rcx],ecx
 100492a:	sbb    eax,DWORD PTR [rax]
 100492c:	lea    ecx,[rcx]
 100492e:	add    BYTE PTR [rax],al
 1004930:	(bad)
 1004934:	xchg   ecx,eax
 1004935:	or     DWORD PTR [rax],eax
 1004937:	add    BYTE PTR [rbx-0x56ffe4f7],dl
 100493d:	or     DWORD PTR [rax],eax
 100493f:	add    BYTE PTR [rdx-0x4effe4f7],ch
 1004945:	or     DWORD PTR [rax],eax
 1004947:	add    BYTE PTR [rdx-0x4cffe4f7],dh
 100494d:	or     DWORD PTR [rax],eax
 100494f:	add    BYTE PTR [rsi-0x45ffe4f7],dh
 1004955:	or     DWORD PTR [rax],eax
 1004957:	add    BYTE PTR [rcx+rcx*1+0x9bd0022],bh
 100495e:	add    BYTE PTR [rax],al
 1004960:	mov    esi,0xc1002a09
 1004965:	or     DWORD PTR [rdx],esp
 1004967:	add    ch,al
 1004969:	or     DWORD PTR [rax],eax
 100496b:	add    bh,al
 100496d:	or     DWORD PTR [rdx],ebp
 100496f:	add    cl,cl
 1004971:	or     DWORD PTR [rax],eax
 1004973:	add    bl,cl
 1004975:	or     DWORD PTR [rdx],ebp
 1004977:	add    ch,cl
 1004979:	or     DWORD PTR [rdx],esp
 100497b:	add    dh,cl
 100497d:	or     DWORD PTR [rax],eax
 100497f:	add    bh,dl
 1004981:	or     DWORD PTR [rdx],ebp
 1004983:	add    al,bl
 1004985:	or     DWORD PTR [rax],eax
 1004987:	add    ah,bl
 1004989:	or     DWORD PTR [rbx],ebx
 100498b:	add    dh,bl
 100498d:	or     DWORD PTR [rax],eax
 100498f:	add    bh,bl
 1004991:	or     DWORD PTR [rbx],ebx
 1004993:	add    dl,ah
 1004995:	or     DWORD PTR [rdx],esp
 1004997:	add    ah,ah
 1004999:	or     DWORD PTR [rax],eax
 100499b:	add    dh,ah
 100499d:	or     DWORD PTR [rdx],ecx
 100499f:	add    al,dh
 10049a1:	or     DWORD PTR [rbx],ebx
 10049a3:	add    dl,dh
 10049a5:	or     DWORD PTR [rax+rax*1],eax
 10049a8:	hlt    
 10049a9:	or     DWORD PTR [rip+0x1109fa00],edx        # 0x120a43af
 10049af:	add    bl,bh
 10049b1:	or     DWORD PTR [rax],eax
 10049b3:	add    BYTE PTR [rdx],al
 10049b5:	or     ah,BYTE PTR [rdx]
 10049b7:	add    BYTE PTR [rbx],al
 10049b9:	or     al,BYTE PTR [rax]
 10049bb:	add    BYTE PTR [rip+0xb001b0a],al        # 0xc0064cb
 10049c1:	or     al,BYTE PTR [rax]
 10049c3:	add    BYTE PTR [rdi],cl
 10049c5:	or     bl,BYTE PTR [rbx]
 10049c7:	add    BYTE PTR [rcx],dl
 10049c9:	or     al,BYTE PTR [rax]
 10049cb:	add    BYTE PTR [rbx],dl
 10049cd:	or     bl,BYTE PTR [rbx]
 10049cf:	add    BYTE PTR [rcx],ch
 10049d1:	or     al,BYTE PTR [rax]
 10049d3:	add    BYTE PTR [rdx],ch
 10049d5:	or     bl,BYTE PTR [rbx]
 10049d7:	add    BYTE PTR [rcx],dh
 10049d9:	or     al,BYTE PTR [rax]
 10049db:	add    BYTE PTR [rdx],dh
 10049dd:	or     bl,BYTE PTR [rbx]
 10049df:	add    BYTE PTR [rdx+rcx*1],dh
 10049e2:	add    BYTE PTR [rax],al
 10049e4:	xor    eax,0x37001b0a
 10049e9:	or     al,BYTE PTR [rax]
 10049eb:	add    BYTE PTR [rax],bh
 10049ed:	or     bl,BYTE PTR [rbx]
 10049ef:	add    BYTE PTR [rdx],bh
 10049f1:	or     al,BYTE PTR [rax]
 10049f3:	add    BYTE PTR [rdx+rcx*1],bh
 10049f6:	and    al,BYTE PTR [rax]
 10049f8:	cmp    eax,0x3e00000a
 10049fd:	or     ch,BYTE PTR [rdx]
 10049ff:	add    BYTE PTR [rcx+0xa],al
 1004a02:	and    al,BYTE PTR [rax]
 1004a04:	rex.XB or al,BYTE PTR [r8]
 1004a07:	add    BYTE PTR [rdi+0xa],al
 1004a0a:	and    al,BYTE PTR [rax]
 1004a0c:	rex.WB or al,BYTE PTR [r8]
 1004a0f:	add    BYTE PTR [rbx+0xa],cl
 1004a12:	and    al,BYTE PTR [rax]
 1004a14:	rex.WRX or r8b,BYTE PTR [rax]
 1004a17:	add    BYTE PTR [rcx+0xa],bl
 1004a1a:	sbb    eax,DWORD PTR [rax]
 1004a1c:	pop    rbp
 1004a1d:	or     al,BYTE PTR [rax]
 1004a1f:	add    BYTE PTR [rsi+0xa],bl
 1004a22:	sbb    eax,DWORD PTR [rax]
 1004a24:	pop    rdi
 1004a25:	or     al,BYTE PTR [rax]
 1004a27:	add    BYTE PTR [rsi+0xa],ah
 1004a2a:	or     al,BYTE PTR [rax]
 1004a2c:	jo     0x1004a38
 1004a2e:	and    al,BYTE PTR [rax]
 1004a30:	jb     0x1004a3c
 1004a32:	sbb    eax,DWORD PTR [rax]
 1004a34:	jne    0x1004a40
 1004a36:	add    BYTE PTR [rax],al
 1004a38:	or     DWORD PTR [rdx],0xa830022
 1004a3e:	sub    al,BYTE PTR [rax]
 1004a40:	test   BYTE PTR [rdx],cl
 1004a42:	add    BYTE PTR [rax],al
 1004a44:	test   DWORD PTR [rdx],ecx
 1004a46:	sbb    eax,DWORD PTR [rax]
 1004a48:	mov    WORD PTR [rdx],cs
 1004a4a:	add    BYTE PTR [rax],al
 1004a4c:	lea    ecx,[rdx]
 1004a4e:	sbb    eax,DWORD PTR [rax]
 1004a50:	mov    cs,WORD PTR [rdx]
 1004a52:	add    BYTE PTR [rax],al
 1004a54:	(bad)
 1004a58:	xchg   edx,eax
 1004a59:	or     al,BYTE PTR [rax]
 1004a5b:	add    BYTE PTR [rbx-0x56ffe4f6],dl
 1004a61:	or     al,BYTE PTR [rax]
 1004a63:	add    BYTE PTR [rdx-0x4effe4f6],ch
 1004a69:	or     al,BYTE PTR [rax]
 1004a6b:	add    BYTE PTR [rdx-0x4bffe4f6],dh
 1004a71:	or     al,BYTE PTR [rax]
 1004a73:	add    BYTE PTR [rbp-0x45ffe4f6],dh
 1004a79:	or     al,BYTE PTR [rax]
 1004a7b:	add    BYTE PTR [rdx+rcx*1+0xabd0022],bh
 1004a82:	sbb    eax,DWORD PTR [rax]
 1004a84:	mov    esi,0xc1002a0a
 1004a89:	or     ah,BYTE PTR [rdx]
 1004a8b:	add    dh,al
 1004a8d:	or     al,BYTE PTR [rax]
 1004a8f:	add    bh,al
 1004a91:	or     ah,BYTE PTR [rdx]
 1004a93:	add    cl,cl
 1004a95:	or     ch,BYTE PTR [rdx]
 1004a97:	add    dl,cl
 1004a99:	or     al,BYTE PTR [rax]
 1004a9b:	add    bl,cl
 1004a9d:	or     ch,BYTE PTR [rdx]
 1004a9f:	add    ch,cl
 1004aa1:	or     ah,BYTE PTR [rdx]
 1004aa3:	add    dh,cl
 1004aa5:	or     al,BYTE PTR [rax]
 1004aa7:	add    al,dl
 1004aa9:	or     ah,BYTE PTR [rsi]
 1004aab:	add    cl,dl
 1004aad:	or     al,BYTE PTR [rax]
 1004aaf:	add    al,ah
 1004ab1:	or     bl,BYTE PTR [rbx]
 1004ab3:	add    cl,ah
 1004ab5:	or     al,BYTE PTR [rax]
 1004ab7:	add    dh,ah
 1004ab9:	or     cl,BYTE PTR [rdx]
 1004abb:	add    al,dh
 1004abd:	or     al,BYTE PTR [rax]
 1004abf:	add    BYTE PTR [rcx],al
 1004ac1:	or     esp,DWORD PTR [rdx]
 1004ac3:	add    BYTE PTR [rdx],al
 1004ac5:	or     ebp,DWORD PTR [rdx]
 1004ac7:	add    BYTE PTR [rbx+rcx*1],al
 1004aca:	add    BYTE PTR [rax],al
 1004acc:	add    eax,0xd001b0b
 1004ad1:	or     eax,DWORD PTR [rax]
 1004ad3:	add    BYTE PTR [rdi],cl
 1004ad5:	or     ebx,DWORD PTR [rbx]
 1004ad7:	add    BYTE PTR [rcx],dl
 1004ad9:	or     eax,DWORD PTR [rax]
 1004adb:	add    BYTE PTR [rbx],dl
 1004add:	or     ebx,DWORD PTR [rbx]
 1004adf:	add    BYTE PTR [rcx],ch
 1004ae1:	or     eax,DWORD PTR [rax]
 1004ae3:	add    BYTE PTR [rdx],ch
 1004ae5:	or     ebx,DWORD PTR [rbx]
 1004ae7:	add    BYTE PTR [rcx],dh
 1004ae9:	or     eax,DWORD PTR [rax]
 1004aeb:	add    BYTE PTR [rdx],dh
 1004aed:	or     ebx,DWORD PTR [rbx]
 1004aef:	add    BYTE PTR [rbx+rcx*1],dh
 1004af2:	add    BYTE PTR [rax],al
 1004af4:	or     ebx,DWORD PTR ss:[rbx]
 1004af7:	add    BYTE PTR [rdx],bh
 1004af9:	or     eax,DWORD PTR [rax]
 1004afb:	add    BYTE PTR [rbx+rcx*1],bh
 1004afe:	and    al,BYTE PTR [rax]
 1004b00:	cmp    eax,0x3e001b0b
 1004b05:	or     ebp,DWORD PTR [rdx]
 1004b07:	add    BYTE PTR [rdi],bh
 1004b09:	or     esp,DWORD PTR [rdx]
 1004b0b:	add    BYTE PTR [rax+0xb],al
 1004b0e:	sub    al,BYTE PTR [rax]
 1004b10:	or     esp,DWORD PTR [r10]
 1004b13:	add    BYTE PTR [rbx+rcx*1+0x0],al
 1004b17:	add    BYTE PTR [rdi+0xb],al
 1004b1a:	sub    al,BYTE PTR [rax]
 1004b1c:	or     rax,QWORD PTR [r8]
 1004b1f:	add    BYTE PTR [rbx+0xb],cl
 1004b22:	sub    al,BYTE PTR [rax]
 1004b24:	or     r12,QWORD PTR [r10]
 1004b27:	add    BYTE PTR [rsi+0xb],cl
 1004b2a:	add    BYTE PTR [rax],al
 1004b2c:	push   rsi
 1004b2d:	or     esp,DWORD PTR [rdx]
 1004b2f:	add    BYTE PTR [rdi+0xb],dl
 1004b32:	sub    al,BYTE PTR [rax]
 1004b34:	pop    rax
 1004b35:	or     eax,DWORD PTR [rax]
 1004b37:	add    BYTE PTR [rbx+rcx*1+0x1b],bl
 1004b3b:	add    BYTE PTR [rsi+0xb],bl
 1004b3e:	add    BYTE PTR [rax],al
 1004b40:	pop    rdi
 1004b41:	or     ebx,DWORD PTR [rbx]
 1004b43:	add    BYTE PTR [rdx+0xb],ah
 1004b46:	add    BYTE PTR [rax],al
 1004b48:	or     cx,WORD PTR [rdx]
 1004b4b:	add    BYTE PTR [rax+0xb],dh
 1004b4e:	adc    DWORD PTR [rax],eax
 1004b50:	jno    0x1004b5d
 1004b52:	add    BYTE PTR [rax],al
 1004b54:	(bad)  
 1004b55:	or     esp,DWORD PTR [rdx]
 1004b57:	add    BYTE PTR [rbx-0x7bffd4f5],al
 1004b5d:	or     eax,DWORD PTR [rax]
 1004b5f:	add    BYTE PTR [rbp-0x74ffe4f5],al
 1004b65:	or     eax,DWORD PTR [rax]
 1004b67:	add    BYTE PTR [rsi-0x6effe4f5],cl
 1004b6d:	or     eax,DWORD PTR [rax]
 1004b6f:	add    BYTE PTR [rdx-0x69ffe4f5],dl
 1004b75:	or     eax,DWORD PTR [rax]
 1004b77:	add    BYTE PTR [rcx-0x64ffe4f5],bl
 1004b7d:	or     eax,DWORD PTR [rax]
 1004b7f:	add    BYTE PTR [rbx+rcx*1+0xb9d001b],bl
 1004b86:	add    BYTE PTR [rax],al
 1004b88:	sahf   
 1004b89:	or     ebx,DWORD PTR [rbx]
 1004b8b:	add    BYTE PTR [rax-0x5cfffff5],ah
 1004b91:	or     ebx,DWORD PTR [rbx]
 1004b93:	add    BYTE PTR [rbp-0x57fffff5],ah
 1004b99:	or     ebx,DWORD PTR [rbx]
 1004b9b:	add    BYTE PTR [rbx-0x51fffff5],ch
 1004ba1:	or     ebx,DWORD PTR [rbx]
 1004ba3:	add    BYTE PTR [rsi-0x48fffff5],dh
 1004ba9:	or     ebx,DWORD PTR [rbx]
 1004bab:	add    BYTE PTR [rdx-0x41fffff5],bh
 1004bb1:	or     ebp,DWORD PTR [rdx]
 1004bb3:	add    al,al
 1004bb5:	or     esp,DWORD PTR [rdx]
 1004bb7:	add    cl,al
 1004bb9:	or     ebp,DWORD PTR [rdx]
 1004bbb:	add    bl,al
 1004bbd:	or     eax,DWORD PTR [rax]
 1004bbf:	add    dh,al
 1004bc1:	or     ebp,DWORD PTR [rdx]
 1004bc3:	add    cl,cl
 1004bc5:	or     eax,DWORD PTR [rax]
 1004bc7:	add    dl,cl
 1004bc9:	or     ebp,DWORD PTR [rdx]
 1004bcb:	add    ch,cl
 1004bcd:	or     esp,DWORD PTR [rdx]
 1004bcf:	add    dh,cl
 1004bd1:	or     eax,DWORD PTR [rax]
 1004bd3:	add    bh,dl
 1004bd5:	or     ebp,DWORD PTR [rdx]
 1004bd7:	add    al,bl
 1004bd9:	or     eax,DWORD PTR [rax]
 1004bdb:	add    bh,ah
 1004bdd:	or     ecx,DWORD PTR [rdx]
 1004bdf:	add    al,dh
 1004be1:	or     edx,DWORD PTR [rip+0xbf300]        # 0x10c3ee7
 1004be7:	add    BYTE PTR [rcx],al
 1004be9:	or     al,0x2a
 1004beb:	add    BYTE PTR [rsp+rcx*1],al
 1004bee:	add    BYTE PTR [rax],al
 1004bf0:	add    eax,0xd001b0c
 1004bf5:	or     al,0x0
 1004bf7:	add    BYTE PTR [rsi],cl
 1004bf9:	or     al,0x1b
 1004bfb:	add    BYTE PTR [rcx],dl
 1004bfd:	or     al,0x0
 1004bff:	add    BYTE PTR [rdx],dl
 1004c01:	or     al,0x1b
 1004c03:	add    BYTE PTR [rcx],ch
 1004c05:	or     al,0x0
 1004c07:	add    BYTE PTR [rdx],ch
 1004c09:	or     al,0x1b
 1004c0b:	add    BYTE PTR [rsp+rcx*1],dh
 1004c0e:	add    BYTE PTR [rax],al
 1004c10:	xor    eax,0x3a001b0c
 1004c15:	or     al,0x0
 1004c17:	add    BYTE PTR [rsi],bh
 1004c19:	or     al,0x22
 1004c1b:	add    BYTE PTR [rcx+0xc],al
 1004c1e:	sub    al,BYTE PTR [rax]
 1004c20:	rex.RB or al,0x0
 1004c23:	add    BYTE PTR [rsi+0xc],al
 1004c26:	and    al,BYTE PTR [rax]
 1004c28:	rex.WB or al,0x0
 1004c2b:	add    BYTE PTR [rdx+0xc],cl
 1004c2e:	and    al,BYTE PTR [rax]
 1004c30:	rex.WRX or al,0x0
 1004c33:	add    BYTE PTR [rbp+0xc],dl
 1004c36:	and    al,BYTE PTR [rax]
 1004c38:	push   rdi
 1004c39:	or     al,0x0
 1004c3b:	add    BYTE PTR [rax+0xc],ah
 1004c3e:	sbb    eax,DWORD PTR [rax]
 1004c40:	(bad)  
 1004c41:	or     al,0x0
 1004c43:	add    BYTE PTR [rsi+0xc],ah
 1004c46:	or     al,BYTE PTR [rax]
 1004c48:	jo     0x1004c56
 1004c4a:	add    BYTE PTR [rax],al
 1004c4c:	(bad)  
 1004c4d:	or     al,0x2a
 1004c4f:	add    BYTE PTR [rsp+rcx*1+0xc850000],al
 1004c56:	sbb    eax,DWORD PTR [rax]
 1004c58:	lea    ecx,[rax+rax*1]
 1004c5b:	add    BYTE PTR [rsi-0x6effe4f4],cl
 1004c61:	or     al,0x0
 1004c63:	add    BYTE PTR [rdx-0x56ffe4f4],dl
 1004c69:	or     al,0x0
 1004c6b:	add    BYTE PTR [rdx-0x4bffe4f4],ch
 1004c71:	or     al,0x0
 1004c73:	add    BYTE PTR [rbp-0x45ffe4f4],dh
 1004c79:	or     al,0x0
 1004c7b:	add    BYTE PTR [rsi-0x40ffd5f4],bh
 1004c81:	or     al,0x22
 1004c83:	add    al,al
 1004c85:	or     al,0x2a
 1004c87:	add    ch,al
 1004c89:	or     al,0x0
 1004c8b:	add    dh,al
 1004c8d:	or     al,0x22
 1004c8f:	add    bh,al
 1004c91:	or     al,0x2a
 1004c93:	add    cl,cl
 1004c95:	or     al,0x0
 1004c97:	add    dl,cl
 1004c99:	or     al,0x2a
 1004c9b:	add    ah,cl
 1004c9d:	or     al,0x22
 1004c9f:	add    dh,cl
 1004ca1:	or     al,0x0
 1004ca3:	add    ch,dl
 1004ca5:	or     al,0x2a
 1004ca7:	add    bh,dl
 1004ca9:	or     al,0x0
 1004cab:	add    dh,bl
 1004cad:	or     al,0x1b
 1004caf:	add    bh,bl
 1004cb1:	or     al,0x0
 1004cb3:	add    al,ah
 1004cb5:	or     al,0x1b
 1004cb7:	add    dl,ah
 1004cb9:	or     al,0x0
 1004cbb:	add    dh,ah
 1004cbd:	or     al,0xa
 1004cbf:	add    al,dh
 1004cc1:	or     al,0x0
 1004cc3:	add    BYTE PTR [rdx],al
 1004cc5:	or     eax,0xd04002a
 1004cca:	add    BYTE PTR [rax],al
 1004ccc:	add    eax,0xd001b0d
 1004cd1:	or     eax,0xd0e0000
 1004cd6:	sbb    eax,DWORD PTR [rax]
 1004cd8:	adc    DWORD PTR [rip+0xd120000],ecx        # 0xe124cde
 1004cde:	sbb    eax,DWORD PTR [rax]
 1004ce0:	sub    DWORD PTR [rip+0xd2a0000],ecx        # 0xe2a4ce6
 1004ce6:	sbb    eax,DWORD PTR [rax]
 1004ce8:	cmp    cl,BYTE PTR [rip+0xd3e0000]        # 0xe3e4cee
 1004cee:	sub    al,BYTE PTR [rax]
 1004cf0:	rex.B or eax,0xd440022
 1004cf6:	add    BYTE PTR [rax],al
 1004cf8:	rex.RX or eax,0xd49002a
 1004cfe:	add    BYTE PTR [rax],al
 1004d00:	rex.WX or rax,0xd4d002a
 1004d06:	and    al,BYTE PTR [rax]
 1004d08:	rex.WRX or rax,0xd570000
 1004d0e:	sub    al,BYTE PTR [rax]
 1004d10:	pop    rax
 1004d11:	or     eax,0xd600000
 1004d16:	sbb    eax,DWORD PTR [rax]
 1004d18:	(bad)  
 1004d19:	or     eax,0xd660000
 1004d1e:	or     al,BYTE PTR [rax]
 1004d20:	jo     0x1004d2f
 1004d22:	add    BYTE PTR [rax],al
 1004d24:	(bad)  
 1004d25:	or     eax,0xd84002c
 1004d2a:	add    BYTE PTR [rax],al
 1004d2c:	test   DWORD PTR [rip+0xd970026],ecx        # 0xe974d58
 1004d32:	add    BYTE PTR [rax],al
 1004d34:	(bad)  
 1004d35:	or     eax,0xdb20026
 1004d3a:	add    BYTE PTR [rax],al
 1004d3c:	mov    bl,0xd
 1004d3e:	add    BYTE PTR es:[rbp+rcx*1+0xdbd0000],bh
 1004d46:	add    BYTE PTR es:[rsi-0x3ffffff3],bh
 1004d4d:	or     eax,0xdc70026
 1004d52:	add    BYTE PTR [rax],al
 1004d54:	retf   0x230d
 1004d57:	add    bl,cl
 1004d59:	or     eax,0xdcf0000
 1004d5e:	sub    al,0x0
 1004d60:	ror    BYTE PTR [rip+0xdd50023],cl        # 0xed54d89
 1004d66:	add    BYTE PTR [rax],al
 1004d68:	(bad)  
 1004d69:	or     eax,0xdd70023
 1004d6e:	add    BYTE PTR [rax],al
 1004d70:	fmul   DWORD PTR [rip+0xde0002c]        # 0xee04da2
 1004d76:	add    BYTE PTR [rax],al
 1004d78:	repnz or eax,0xdf4002c
 1004d7e:	add    eax,DWORD PTR [rax]
 1004d80:	cmc    
 1004d81:	or     eax,0xe010000
 1004d86:	sbb    eax,DWORD PTR [rax]
 1004d88:	(bad)  
 1004d89:	(bad)  
 1004d8a:	add    BYTE PTR es:[rax],dh
 1004d8d:	(bad)  
 1004d8e:	sbb    eax,DWORD PTR [rax]
 1004d90:	xor    DWORD PTR [rsi],ecx
 1004d92:	and    al,BYTE PTR [rax]
 1004d94:	xor    cl,BYTE PTR [rsi]
 1004d96:	sbb    eax,DWORD PTR [rax]
 1004d98:	xor    al,0xe
 1004d9a:	and    al,BYTE PTR [rax]
 1004d9c:	cmp    ecx,DWORD PTR [rsi]
 1004d9e:	add    BYTE PTR [rax],al
 1004da0:	(bad)  
 1004da1:	(bad)  
 1004da2:	add    al,0x0
 1004da4:	rex (bad) 
 1004da6:	sbb    eax,DWORD PTR [rax]
 1004da8:	rex.RX (bad) 
 1004daa:	and    DWORD PTR [rax],eax
 1004dac:	rex.RXB (bad) 
 1004dae:	and    al,BYTE PTR [rax]
 1004db0:	rex.WRXB (bad) 
 1004db2:	add    eax,DWORD PTR [rax]
 1004db4:	push   rax
 1004db5:	(bad)  
 1004db6:	or     al,BYTE PTR [rax]
 1004db8:	pop    rdx
 1004db9:	(bad)  
 1004dba:	add    eax,DWORD PTR [rax]
 1004dbc:	pop    rsp
 1004dbd:	(bad)  
 1004dbe:	add    BYTE PTR [rax],al
 1004dc0:	or     DWORD PTR [rsi],0xe83001b
 1004dc6:	add    BYTE PTR [rax],al
 1004dc8:	test   BYTE PTR [rsi],cl
 1004dca:	sbb    eax,DWORD PTR [rax]
 1004dcc:	test   DWORD PTR [rsi],ecx
 1004dce:	add    BYTE PTR [rax],al
 1004dd0:	xchg   DWORD PTR [rsi],ecx
 1004dd2:	sbb    eax,DWORD PTR [rax]
 1004dd4:	mov    DWORD PTR [rsi],ecx
 1004dd6:	add    BYTE PTR [rax],al
 1004dd8:	mov    cl,BYTE PTR [rsi]
 1004dda:	sbb    eax,DWORD PTR [rax]
 1004ddc:	mov    ecx,DWORD PTR [rsi]
 1004dde:	add    BYTE PTR [rax],al
 1004de0:	lea    ecx,[rsi]
 1004de2:	sbb    eax,DWORD PTR [rax]
 1004de4:	mov    cs,WORD PTR [rsi]
 1004de6:	add    BYTE PTR [rax],al
 1004de8:	xchg   esp,eax
 1004de9:	(bad)  
 1004dea:	sbb    eax,DWORD PTR [rax]
 1004dec:	cwde   
 1004ded:	(bad)  
 1004dee:	add    BYTE PTR [rax],al
 1004df0:	cdq    
 1004df1:	(bad)  
 1004df2:	sbb    eax,DWORD PTR [rax]
 1004df4:	movabs al,ds:0xa4001b0ea100000e
 1004dfd:	(bad)  
 1004dfe:	add    BYTE PTR [rax],al
 1004e00:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1004e01:	(bad)  
 1004e02:	sbb    eax,DWORD PTR [rax]
 1004e04:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1004e05:	(bad)  
 1004e06:	add    BYTE PTR [rax],al
 1004e08:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1004e09:	(bad)  
 1004e0a:	sbb    eax,DWORD PTR [rax]
 1004e0c:	test   al,0xe
 1004e0e:	add    BYTE PTR [rax],al
 1004e10:	stos   BYTE PTR es:[rdi],al
 1004e11:	(bad)  
 1004e12:	sbb    eax,DWORD PTR [rax]
 1004e14:	lods   al,BYTE PTR ds:[rsi]
 1004e15:	(bad)  
 1004e16:	add    BYTE PTR [rax],al
 1004e18:	lods   eax,DWORD PTR ds:[rsi]
 1004e19:	(bad)  
 1004e1a:	sbb    eax,DWORD PTR [rax]
 1004e1c:	scas   eax,DWORD PTR es:[rdi]
 1004e1d:	(bad)  
 1004e1e:	add    BYTE PTR es:[rax-0x4effe4f2],dh
 1004e25:	(bad)  
 1004e26:	and    al,BYTE PTR [rax]
 1004e28:	mov    dl,0xe
 1004e2a:	sbb    eax,DWORD PTR [rax]
 1004e2c:	mov    ah,0xe
 1004e2e:	and    al,BYTE PTR [rax]
 1004e30:	mov    edx,0xbb00000e
 1004e35:	(bad)  
 1004e36:	and    al,BYTE PTR [rax]
 1004e38:	mov    ebp,0xbe001b0e
 1004e3d:	(bad)  
 1004e3e:	add    BYTE PTR [rax],al
 1004e40:	ror    BYTE PTR [rsi],0x1b
 1004e43:	add    ch,al
 1004e45:	(bad)  
 1004e46:	add    BYTE PTR [rax],al
 1004e48:	(bad)  
 1004e49:	(bad)  
 1004e4a:	and    DWORD PTR [rax],eax
 1004e4c:	(bad)  
 1004e4d:	(bad)  
 1004e4e:	add    BYTE PTR [rax],al
 1004e50:	enter  0x220e,0x0
 1004e54:	(bad)  
 1004e55:	(bad)  
 1004e56:	add    BYTE PTR [rax],al
 1004e58:	ror    BYTE PTR [rsi],1
 1004e5a:	or     al,BYTE PTR [rax]
 1004e5c:	fimul  DWORD PTR [rsi]
 1004e5e:	add    BYTE PTR [rax],al
 1004e60:	fmul   QWORD PTR [rsi]
 1004e62:	es add dh,bl
 1004e65:	(bad)  
 1004e66:	add    BYTE PTR [rax],al
 1004e68:	add    BYTE PTR [rdi],cl
 1004e6a:	add    BYTE PTR es:[rcx],al
 1004e6d:	movups XMMWORD PTR [rax],xmm0
 1004e70:	add    al,0xf
 1004e72:	add    eax,DWORD PTR [rax]
 1004e74:	adc    ecx,DWORD PTR [rdi]
 1004e76:	adc    DWORD PTR [rax],eax
 1004e78:	sbb    BYTE PTR [rdi],cl
 1004e7a:	and    al,BYTE PTR [rax]
 1004e7c:	sbb    cl,BYTE PTR [rdi]
 1004e7e:	adc    DWORD PTR [rax],eax
 1004e80:	and    BYTE PTR [rdi],cl
 1004e82:	or     al,BYTE PTR [rax]
 1004e84:	sub    cl,BYTE PTR [rdi]
 1004e86:	adc    eax,0x110f3400
 1004e8b:	add    BYTE PTR [rip+0x3600220f],dh        # 0x370070a0
 1004e91:	movups XMMWORD PTR [rax],xmm0
 1004e94:	(bad)  
 1004e95:	mov    cr0,rax
 1004e98:	cmp    BYTE PTR [rdi],cl
 1004e9a:	adc    DWORD PTR [rax],eax
 1004e9c:	cmp    DWORD PTR [rdi],ecx
 1004e9e:	and    al,BYTE PTR [rax]
 1004ea0:	cmp    cl,BYTE PTR [rdi]
 1004ea2:	add    eax,0x60f3b00
 1004ea7:	add    BYTE PTR [rdi+rcx*1],bh
 1004eaa:	add    eax,0x60f3d00
 1004eaf:	add    BYTE PTR [rsi],bh
 1004eb1:	cvtpi2ps xmm0,QWORD PTR [rax]
 1004eb4:	rex bndstx [rax],bnd0
 1004eb8:	rex.W sldt WORD PTR [rax]
 1004ebc:	rex.WB bndstx [r8],bnd0
 1004ec0:	push   0xf
 1004ec2:	add    BYTE PTR es:[rbx+0xf],ch
 1004ec6:	add    BYTE PTR [rax],al
 1004ec8:	jno    0x1004ed9
 1004eca:	and    al,BYTE PTR [rax]
 1004ecc:	jg     0x1004edd
 1004ece:	sub    al,BYTE PTR [rax]
 1004ed0:	or     BYTE PTR [rdi],0x22
 1004ed3:	add    BYTE PTR [rbp-0x79fffcf1],al
 1004ed9:	mov    cr0,rax
 1004edc:	mov    BYTE PTR [rdi],cl
 1004ede:	sub    eax,0xf8c00
 1004ee3:	add    BYTE PTR [rax-0x69ffddf1],dl
 1004ee9:	mov    db0,rax
 1004eec:	xchg   edi,eax
 1004eed:	mov    cr0,rax
 1004ef0:	cwde   
 1004ef1:	sldt   WORD PTR [rax]
 1004ef4:	cdq    
 1004ef5:	mov    cr0,rax
 1004ef8:	scas   al,BYTE PTR es:[rdi]
 1004ef9:	mov    db0,rax
 1004efc:	mov    cl,0xf
 1004efe:	and    al,BYTE PTR [rax]
 1004f00:	mov    eax,0xb900230f
 1004f05:	mov    cr0,rax
 1004f08:	mov    edx,0xbd00230f
 1004f0d:	sldt   WORD PTR [rax]
 1004f10:	mov    esi,0xc600110f
 1004f15:	mov    db0,rax
 1004f18:	(bad)  
 1004f19:	movups XMMWORD PTR [rax],xmm0
 1004f1c:	int    0xf
 1004f1e:	add    BYTE PTR [rax],al
 1004f20:	iret   
 1004f21:	movups XMMWORD PTR [rax],xmm0
 1004f24:	ror    BYTE PTR [rdi],1
 1004f26:	add    BYTE PTR [rax],al
 1004f28:	add    BYTE PTR [rax],dl
 1004f2a:	add    BYTE PTR es:[rdx],ah
 1004f2d:	adc    BYTE PTR [rax],al
 1004f2f:	add    BYTE PTR [rbx],ah
 1004f31:	adc    BYTE PTR [rsi],ah
 1004f33:	add    BYTE PTR [rax],ch
 1004f35:	adc    BYTE PTR [rax],al
 1004f37:	add    BYTE PTR [rcx],ch
 1004f39:	adc    BYTE PTR [rsi],ah
 1004f3b:	add    BYTE PTR [rbx],ch
 1004f3d:	adc    BYTE PTR [rax],al
 1004f3f:	add    BYTE PTR [rax+rdx*1],ch
 1004f42:	sub    al,0x0
 1004f44:	sub    eax,0x31002310
 1004f49:	adc    BYTE PTR [rax+rax*1],ch
 1004f4c:	xor    dl,BYTE PTR [rax]
 1004f4e:	and    eax,DWORD PTR [rax]
 1004f50:	xor    edx,DWORD PTR [rax]
 1004f52:	add    BYTE PTR [rax],al
 1004f54:	adc    BYTE PTR ss:[rbx],ah
 1004f57:	add    BYTE PTR [rax],bh
 1004f59:	adc    BYTE PTR [rax+rax*1],ch
 1004f5c:	cmp    DWORD PTR [rax],edx
 1004f5e:	and    eax,DWORD PTR [rax]
 1004f60:	cmp    dl,BYTE PTR [rax]
 1004f62:	add    BYTE PTR [rax],al
 1004f64:	adc    BYTE PTR [rsi],bpl
 1004f67:	add    BYTE PTR [rdx+0x10],cl
 1004f6a:	add    eax,DWORD PTR [rax]
 1004f6c:	push   rax
 1004f6d:	adc    BYTE PTR [rsi],ah
 1004f6f:	add    BYTE PTR [rsi+0x10],dl
 1004f72:	sub    al,0x0
 1004f74:	pop    rax
 1004f75:	adc    BYTE PTR [rbx],ah
 1004f77:	add    BYTE PTR [rdx+0x10],bl
 1004f7a:	add    BYTE PTR [rax],al
 1004f7c:	movabs al,ds:0xd0000010c6000c10
 1004f85:	adc    BYTE PTR [rbx],bl
 1004f87:	add    bh,dh
 1004f89:	adc    BYTE PTR [rsi],bl
 1004f8b:	add    cl,bh
 1004f8d:	adc    BYTE PTR [rax],al
 1004f8f:	add    bl,bh
 1004f91:	adc    BYTE PTR [rbx],al
 1004f93:	add    ah,bh
 1004f95:	adc    BYTE PTR [rax],al
 1004f97:	add    BYTE PTR [rax],al
 1004f99:	adc    DWORD PTR [rbx],ebx
 1004f9b:	add    BYTE PTR [rcx],al
 1004f9d:	adc    DWORD PTR [rsi],esp
 1004f9f:	add    BYTE PTR [rdx],al
 1004fa1:	adc    DWORD PTR [rbx],ebx
 1004fa3:	add    BYTE PTR [rcx+rdx*1],al
 1004fa6:	add    BYTE PTR es:[rip+0x8001b11],al        # 0x9006abe
 1004fad:	adc    DWORD PTR [rsi],esp
 1004faf:	add    BYTE PTR [rcx],cl
 1004fb1:	adc    DWORD PTR [rbx],ebx
 1004fb3:	add    BYTE PTR [rdx],cl
 1004fb5:	adc    DWORD PTR [rsi],esp
 1004fb7:	add    BYTE PTR [rbx],cl
 1004fb9:	adc    DWORD PTR [rbx],ebx
 1004fbb:	add    BYTE PTR [rip+0xe002611],cl        # 0xf0075d2
 1004fc1:	adc    DWORD PTR [rbx],ebx
 1004fc3:	add    BYTE PTR [rbx],dl
 1004fc5:	adc    DWORD PTR [rsi],esp
 1004fc7:	add    BYTE PTR [rcx+rdx*1],bh
 1004fca:	sbb    eax,DWORD PTR [rax]
 1004fcc:	cmp    eax,0x3e002611
 1004fd1:	adc    DWORD PTR [rbx],ebx
 1004fd3:	add    BYTE PTR [rdi],bh
 1004fd5:	adc    DWORD PTR [rsi],esp
 1004fd7:	add    BYTE PTR [rax+0x11],al
 1004fda:	sbb    eax,DWORD PTR [rax]
 1004fdc:	adc    DWORD PTR [r14],esp
 1004fdf:	add    BYTE PTR [rcx+rdx*1+0x1b],cl
 1004fe3:	add    BYTE PTR [rbp+0x11],cl
 1004fe6:	add    BYTE PTR es:[rsi+0x11],cl
 1004fea:	sbb    eax,DWORD PTR [rax]
 1004fec:	rex.WRXB adc QWORD PTR [r14],r12
 1004fef:	add    BYTE PTR [rax+0x11],dl
 1004ff2:	sbb    eax,DWORD PTR [rax]
 1004ff4:	push   rcx
 1004ff5:	adc    DWORD PTR [rsi],esp
 1004ff7:	add    BYTE PTR [rcx+rdx*1+0x1b],dl
 1004ffb:	add    BYTE PTR [rsi+0x11],dl
 1004ffe:	add    BYTE PTR es:[rcx+0x11],bl
 1005002:	sbb    eax,DWORD PTR [rax]
 1005004:	pop    rdx
 1005005:	adc    DWORD PTR [rax],eax
 1005007:	add    BYTE PTR [rdi+0x11],bl
 100500a:	sbb    eax,DWORD PTR [rax]
 100500c:	(bad)
 1005011:	adc    DWORD PTR [rbx],ebx
 1005013:	add    BYTE PTR [rcx+rdx*1+0x26],ah
 1005017:	add    BYTE PTR [rbp+0x11],ah
 100501a:	sbb    eax,DWORD PTR [rax]
 100501c:	adc    WORD PTR [rsi],sp
 100501f:	add    BYTE PTR [rdi+0x11],ah
 1005022:	sbb    eax,DWORD PTR [rax]
 1005024:	push   0x69002611
 1005029:	adc    DWORD PTR [rbx],ebx
 100502b:	add    BYTE PTR [rdx+0x11],ch
 100502e:	add    BYTE PTR es:[rbp+0x11],ch
 1005032:	sbb    eax,DWORD PTR [rax]
 1005034:	outs   dx,DWORD PTR ds:[rsi]
 1005035:	adc    DWORD PTR [rsi],esp
 1005037:	add    BYTE PTR [rdx+0x11],dh
 100503a:	sbb    eax,DWORD PTR [rax]
 100503c:	je     0x100504f
 100503e:	add    BYTE PTR es:[rbp+0x11],dh
 1005042:	sbb    eax,DWORD PTR [rax]
 1005044:	jbe    0x1005057
 1005046:	add    BYTE PTR es:[rsi-0x60ffe4ef],bl
 100504d:	adc    DWORD PTR [rsi],esp
 100504f:	add    BYTE PTR [rbx-0x57ffffef],ah
 1005055:	adc    DWORD PTR [rbx],ebx
 1005057:	add    BYTE PTR [rcx-0x54ffd9ef],ch
 100505d:	adc    DWORD PTR [rbx],ebx
 100505f:	add    BYTE PTR [rcx+rdx*1+0x11ae0026],ch
 1005066:	sbb    eax,DWORD PTR [rax]
 1005068:	mov    al,0x11
 100506a:	add    BYTE PTR es:[rdi-0x46ffe4ef],dh
 1005071:	adc    DWORD PTR [rsi],esp
 1005073:	add    BYTE PTR [rdx-0x44ffe4ef],bh
 1005079:	adc    DWORD PTR [rsi],esp
 100507b:	add    BYTE PTR [rcx+rdx*1+0x11c3001b],bh
 1005082:	es add bl,ch
 1005085:	adc    DWORD PTR [rbx],ebx
 1005087:	add    ah,ch
 1005089:	adc    DWORD PTR [rsi],esp
 100508b:	add    al,dh
 100508d:	adc    DWORD PTR [rbx],ebx
 100508f:	add    cl,dh
 1005091:	adc    DWORD PTR [rsi],esp
 1005093:	add    cl,bh
 1005095:	adc    DWORD PTR [rbx],ebx
 1005097:	add    dl,bh
 1005099:	adc    DWORD PTR [rax],eax
 100509b:	add    BYTE PTR [rax],al
 100509d:	adc    ah,BYTE PTR [rsi]
 100509f:	add    BYTE PTR [rdi],al
 10050a1:	adc    al,BYTE PTR [rax]
 10050a3:	add    BYTE PTR [rax],cl
 10050a5:	adc    ah,BYTE PTR [rsi]
 10050a7:	add    BYTE PTR [rdi+0x12],al
 10050aa:	add    BYTE PTR [rax],al
 10050ac:	rex.W adc spl,BYTE PTR [rsi]
 10050af:	add    BYTE PTR [rcx+0x12],cl
 10050b2:	add    BYTE PTR [rax],al
 10050b4:	rex.WX adc spl,BYTE PTR [rsi]
 10050b7:	add    BYTE PTR [rsi+0x12],cl
 10050ba:	add    BYTE PTR [rax],al
 10050bc:	push   rax
 10050bd:	adc    ah,BYTE PTR [rsi]
 10050bf:	add    BYTE PTR [rdi+0x12],dl
 10050c2:	add    BYTE PTR [rax],al
 10050c4:	pop    rax
 10050c5:	adc    ah,BYTE PTR [rsi]
 10050c7:	add    BYTE PTR [rcx+0x12],bl
 10050ca:	add    BYTE PTR [rax],al
 10050cc:	pop    rdx
 10050cd:	adc    ah,BYTE PTR [rsi]
 10050cf:	add    BYTE PTR [rsi+0x12],bl
 10050d2:	add    BYTE PTR [rax],al
 10050d4:	(bad)  
 10050d5:	adc    ah,BYTE PTR [rsi]
 10050d7:	add    BYTE PTR [rdi-0x77ffffee],al
 10050dd:	adc    ah,BYTE PTR [rsi]
 10050df:	add    BYTE PTR [rcx-0x75ffffee],cl
 10050e5:	adc    ah,BYTE PTR [rsi]
 10050e7:	add    BYTE PTR [rsi-0x6fffffee],cl
 10050ed:	adc    ah,BYTE PTR [rsi]
 10050ef:	add    BYTE PTR [rdi-0x4fffffee],ch
 10050f5:	adc    ah,BYTE PTR [rsi]
 10050f7:	add    BYTE PTR [rcx-0x4dffffee],dh
 10050fd:	adc    ah,BYTE PTR [rsi]
 10050ff:	add    BYTE PTR [rsi-0x47ffffee],dh
 1005105:	adc    ah,BYTE PTR [rsi]
 1005107:	add    BYTE PTR [rdi-0x3fffffee],bh
 100510d:	adc    ah,BYTE PTR [rsi]
 100510f:	add    cl,al
 1005111:	adc    al,BYTE PTR [rax]
 1005113:	add    dl,al
 1005115:	adc    ah,BYTE PTR [rsi]
 1005117:	add    dh,al
 1005119:	adc    al,BYTE PTR [rax]
 100511b:	add    al,cl
 100511d:	adc    ah,BYTE PTR [rsi]
 100511f:	add    bh,cl
 1005121:	adc    al,BYTE PTR [rax]
 1005123:	add    al,dl
 1005125:	adc    ah,BYTE PTR [rsi]
 1005127:	add    bh,dl
 1005129:	adc    al,BYTE PTR [rax]
 100512b:	add    al,bl
 100512d:	adc    ah,BYTE PTR [rsi]
 100512f:	add    bh,ch
 1005131:	adc    al,BYTE PTR [rax]
 1005133:	add    al,dh
 1005135:	adc    ah,BYTE PTR [rsi]
 1005137:	add    BYTE PTR [rdi],cl
 1005139:	adc    eax,DWORD PTR [rax]
 100513b:	add    BYTE PTR [rax],dl
 100513d:	adc    esp,DWORD PTR [rsi]
 100513f:	add    BYTE PTR [rcx],dl
 1005141:	adc    eax,DWORD PTR [rax]
 1005143:	add    BYTE PTR [rdx],dl
 1005145:	adc    esp,DWORD PTR [rsi]
 1005147:	add    BYTE PTR [rsi],dl
 1005149:	adc    eax,DWORD PTR [rax]
 100514b:	add    BYTE PTR [rax],bl
 100514d:	adc    esp,DWORD PTR [rsi]
 100514f:	add    BYTE PTR [rdi],bl
 1005151:	adc    eax,DWORD PTR [rax]
 1005153:	add    BYTE PTR [rax],ah
 1005155:	adc    esp,DWORD PTR [rsi]
 1005157:	add    BYTE PTR [rdi+0x13],al
 100515a:	add    BYTE PTR [rax],al
 100515c:	adc    rsp,QWORD PTR [rsi]
 100515f:	add    BYTE PTR [rbx+0x13],bl
 1005162:	add    BYTE PTR [rax],al
 1005164:	(bad)  
 1005165:	adc    eax,DWORD PTR [rbx]
 1005167:	add    BYTE PTR [rcx+0x13],ch
 100516a:	add    BYTE PTR cs:[rdx+0x13],dh
 100516e:	adc    eax,0x137d00
 1005173:	add    BYTE PTR [rax-0xaffd9ed],ah
 1005179:	adc    eax,DWORD PTR [rax]
 100517b:	add    BYTE PTR [rcx],al
 100517d:	adc    al,0x26
 100517f:	add    BYTE PTR [rbp+0x16],ch
 1005182:	add    eax,DWORD PTR [rax]
 1005184:	outs   dx,DWORD PTR ds:[rsi]
 1005185:	(bad)  
 1005186:	add    BYTE PTR es:[rdi+0x16],dh
 100518a:	add    BYTE PTR [rax],al
 100518c:	adc    BYTE PTR [rsi],0x2
 100518f:	add    BYTE PTR [rcx-0x64ffd9ea],al
 1005195:	(bad)  
 1005196:	add    eax,0x6169c00
 100519b:	add    BYTE PTR [rbp-0x5fffffea],bl
 10051a1:	(bad)  
 10051a2:	es add bl,ch
 10051a5:	(bad)  
 10051a6:	add    eax,DWORD PTR [rax]
 10051a8:	out    dx,al
 10051a9:	(bad)  
 10051aa:	(bad)  
 10051ab:	add    cl,dh
 10051ad:	(bad)  
 10051ae:	add    BYTE PTR [rax],al
 10051b0:	add    BYTE PTR [rdi],dl
 10051b2:	(bad)  
 10051b3:	add    BYTE PTR [rip+0xe000017],cl        # 0xf0051d0
 10051b9:	(bad)  
 10051ba:	(bad)  
 10051bb:	add    BYTE PTR [rdx],dl
 10051bd:	(bad)  
 10051be:	and    al,0x0
 10051c0:	adc    eax,0x20000017
 10051c5:	(bad)  
 10051c6:	(bad)  
 10051c7:	add    BYTE PTR [rdx],dh
 10051c9:	(bad)  
 10051ca:	and    al,0x0
 10051cc:	xor    eax,0x40000017
 10051d1:	(bad)  
 10051d2:	(bad)  
 10051d3:	add    BYTE PTR [rdx+0x17],dl
 10051d6:	and    al,0x0
 10051d8:	push   rsp
 10051d9:	(bad)  
 10051da:	add    BYTE PTR [rax],al
 10051dc:	(bad)  
 10051dd:	(bad)  
 10051de:	(bad)  
 10051df:	add    BYTE PTR [rbp+0x17],ch
 10051e2:	add    BYTE PTR [rax],al
 10051e4:	outs   dx,BYTE PTR ds:[rsi]
 10051e5:	(bad)  
 10051e6:	(bad)  
 10051e7:	add    BYTE PTR [rcx+0x17],dh
 10051ea:	add    BYTE PTR [rax],al
 10051ec:	jb     0x1005205
 10051ee:	and    al,0x0
 10051f0:	je     0x1005209
 10051f2:	add    BYTE PTR [rax],al
 10051f4:	adc    BYTE PTR [rdi],0x26
 10051f7:	add    BYTE PTR [rdi+rdx*1+0x17b7002c],dh
 10051fe:	and    eax,DWORD PTR [rax]
 1005200:	mov    esi,0xc6002c17
 1005205:	(bad)  
 1005206:	and    eax,DWORD PTR [rax]
 1005208:	(bad)  
 1005209:	(bad)  
 100520a:	sub    al,0x0
 100520c:	leave  
 100520d:	(bad)  
 100520e:	and    eax,DWORD PTR [rax]
 1005210:	(bad)  
 1005211:	(bad)  
 1005212:	add    eax,DWORD PTR [rax]
 1005214:	xlat   BYTE PTR ds:[rbx]
 1005215:	(bad)  
 1005216:	xor    BYTE PTR [rax],al
 1005218:	fcom   DWORD PTR [rdi]
 100521a:	add    eax,DWORD PTR [rax]
 100521c:	fist   DWORD PTR [rdi]
 100521e:	add    al,0x0
 1005220:	fcom   QWORD PTR [rdi]
 1005222:	xor    BYTE PTR [rax],al
 1005224:	fst    QWORD PTR [rdi]
 1005226:	add    BYTE PTR [rax],al
 1005228:	loopne 0x1005241
 100522a:	cs add dl,ch
 100522d:	(bad)  
 100522e:	add    BYTE PTR [rax],al
 1005230:	add    BYTE PTR [rax],bl
 1005232:	add    eax,DWORD PTR [rax]
 1005234:	(bad)  
 1005235:	sbb    BYTE PTR [rax+rax*1],dl
 1005238:	(bad)  
 1005239:	sbb    BYTE PTR [rbx],al
 100523b:	add    BYTE PTR [rbx],cl
 100523d:	sbb    BYTE PTR [rcx],ch
 100523f:	add    BYTE PTR [rdi],cl
 1005241:	sbb    BYTE PTR [rax],al
 1005243:	add    BYTE PTR [rax],dl
 1005245:	sbb    BYTE PTR [rsi],ch
 1005247:	add    BYTE PTR [rdx],bl
 1005249:	sbb    BYTE PTR [rax],al
 100524b:	add    BYTE PTR [rax],ah
 100524d:	sbb    BYTE PTR [rsi],ah
 100524f:	add    BYTE PTR [rbx+0x18],al
 1005252:	(bad)  
 1005253:	add    BYTE PTR [rax+rbx*1+0x26],al
 1005257:	add    BYTE PTR [rax+0x18],bh
 100525a:	add    BYTE PTR [rax],al
 100525c:	sbb    BYTE PTR [rax],0x26
 100525f:	add    BYTE PTR [rcx-0x55ffdce8],ch
 1005265:	sbb    BYTE PTR [rax],al
 1005267:	add    BYTE PTR [rax],al
 1005269:	(bad)  
 100526a:	(bad)  
 100526b:	add    BYTE PTR [rsi-0x63fff0e2],dl
 1005271:	(bad)  
 1005272:	add    BYTE PTR [rax],al
 1005274:	movabs al,ds:0x1efa00171e
 100527d:	(bad)  
 100527e:	str    WORD PTR [rax]
 1005281:	(bad)  
 1005282:	or     al,0x0
 1005284:	adc    BYTE PTR [rdi],bl
 1005286:	lldt   WORD PTR [rsi]
 1005289:	(bad)  
 100528a:	add    BYTE PTR [rax],al
 100528c:	sbb    BYTE PTR [rdi],bl
 100528e:	or     al,0x0
 1005290:	(bad)  
 1005291:	(bad)  
 1005292:	add    BYTE PTR [rax],al
 1005294:	and    BYTE PTR [rdi],bl
 1005296:	verw   WORD PTR [rax]
 1005299:	(bad)  
 100529a:	or     al,0x0
 100529c:	xor    BYTE PTR [rdi],bl
 100529e:	(bad)  
 10052a0:	cmp    BYTE PTR [rdi],bl
 10052a2:	or     al,0x0
 10052a4:	rex (bad) 
 10052a6:	sldt   WORD PTR [rsi+0x1f]
 10052aa:	add    BYTE PTR [rax],al
 10052ac:	rex.W (bad) 
 10052ae:	or     al,0x0
 10052b0:	rex.WRX (bad) 
 10052b2:	add    BYTE PTR [rax],al
 10052b4:	push   rax
 10052b5:	(bad)  
 10052b6:	ltr    WORD PTR [rax+0x1f]
 10052ba:	add    BYTE PTR [rax],al
 10052bc:	pop    rcx
 10052bd:	(bad)  
 10052be:	or     al,0x0
 10052c0:	pop    rdx
 10052c1:	(bad)  
 10052c2:	add    BYTE PTR [rax],al
 10052c4:	pop    rbx
 10052c5:	(bad)  
 10052c6:	or     al,0x0
 10052c8:	pop    rsp
 10052c9:	(bad)  
 10052ca:	add    BYTE PTR [rax],al
 10052cc:	pop    rbp
 10052cd:	(bad)  
 10052ce:	or     al,0x0
 10052d0:	pop    rsi
 10052d1:	(bad)  
 10052d2:	add    BYTE PTR [rax],al
 10052d4:	pop    rdi
 10052d5:	(bad)  
 10052d6:	sbb    DWORD PTR [rax],eax
 10052d8:	(bad)  
 10052d9:	(bad)  
 10052da:	verw   WORD PTR [rax+0x1f]
 10052de:	or     al,0x0
 10052e0:	jo     0x1005301
 10052e2:	(bad)  
 10052e4:	jle    0x1005305
 10052e6:	add    BYTE PTR [rax],al
 10052e8:	sbb    BYTE PTR [rdi],0xf
 10052eb:	add    BYTE PTR [rax-0x6fffcee1],cl
 10052f1:	(bad)  
 10052f2:	ltr    WORD PTR [rax-0x5fffcee1]
 10052f9:	(bad)  
 10052fa:	verw   WORD PTR [rax-0x4fffcee1]
 1005301:	(bad)  
 1005302:	(bad)  
 1005304:	mov    ch,0x1f
 1005306:	add    BYTE PTR [rax],al
 1005308:	mov    dh,0x1f
 100530a:	(bad)  
 100530c:	mov    eax,0xbc000c1f
 1005311:	(bad)  
 1005312:	xor    DWORD PTR [rax],eax
 1005314:	mov    ebp,0xbe000d1f
 1005319:	(bad)  
 100531a:	(bad)  
 100531c:	mov    edi,0xc2000d1f
 1005321:	(bad)  
 1005322:	sldt   ebp
 1005325:	(bad)  
 1005326:	add    BYTE PTR [rax],al
 1005328:	(bad)  
 1005329:	(bad)  
 100532a:	str    eax
 100532d:	(bad)  
 100532e:	or     al,0x0
 1005330:	int3   
 1005331:	(bad)  
 1005332:	xor    DWORD PTR [rax],eax
 1005334:	int    0x1f
 1005336:	or     eax,0xf1fd000
 100533b:	add    ah,dl
 100533d:	(bad)  
 100533e:	add    BYTE PTR [rax],al
 1005340:	(bad)  
 1005341:	(bad)  
 1005342:	ltr    ax
 1005345:	(bad)  
 1005346:	or     al,0x0
 1005348:	fcomp  QWORD PTR [rdi]
 100534a:	add    BYTE PTR [rax],al
 100534c:	fstp   QWORD PTR [rdi]
 100534e:	or     eax,0xf1fe000
 1005353:	add    al,ch
 1005355:	(bad)  
 1005356:	or     al,0x0
 1005358:	in     eax,dx
 1005359:	(bad)  
 100535a:	or     eax,0x1ff000
 100535f:	add    dl,dh
 1005361:	(bad)  
 1005362:	(bad)  
 1005364:	cmc    
 1005365:	(bad)  
 1005366:	add    BYTE PTR [rax],al
 1005368:	neg    BYTE PTR [rdi]
 100536a:	(bad)  
 100536c:	clc    
 100536d:	(bad)  
 100536e:	or     al,0x0
 1005370:	cld    
 1005371:	(bad)  
 1005372:	xor    DWORD PTR [rax],eax
 1005374:	std    
 1005375:	(bad)  
 1005376:	or     eax,0x1fff00
 100537b:	add    BYTE PTR [rax],al
 100537d:	and    BYTE PTR [rdx],al
 100537f:	add    BYTE PTR [rax+riz*1],cl
 1005382:	sub    DWORD PTR [rax],eax
 1005384:	adc    BYTE PTR [rax],ah
 1005386:	adc    al,0x0
 1005388:	(bad)  
 1005389:	and    BYTE PTR [rbx],al
 100538b:	add    BYTE PTR [rax],bl
 100538d:	and    BYTE PTR [rbx],dl
 100538f:	add    BYTE PTR [rcx],bl
 1005391:	and    BYTE PTR [rsi],dl
 1005393:	add    BYTE PTR [rdx],bl
 1005395:	and    BYTE PTR [rip+0x13201b00],al        # 0x14206e9b
 100539b:	add    BYTE PTR [rip+0x1e001620],bl        # 0x1f0069c1
 10053a1:	and    BYTE PTR [rip+0x13201f00],al        # 0x142072a7
 10053a7:	add    BYTE PTR [rax],ah
 10053a9:	and    BYTE PTR [rbx],al
 10053ab:	add    BYTE PTR [rax],ch
 10053ad:	and    BYTE PTR [rdx],dh
 10053af:	add    BYTE PTR [rcx],ch
 10053b1:	and    BYTE PTR [rbx],dh
 10053b3:	add    BYTE PTR [rdx],ch
 10053b5:	and    BYTE PTR [rcx],ch
 10053b7:	add    BYTE PTR [rdi],ch
 10053b9:	and    BYTE PTR [rdx],al
 10053bb:	add    BYTE PTR [rax],dh
 10053bd:	and    BYTE PTR [rbx],al
 10053bf:	add    BYTE PTR [rcx],bh
 10053c1:	and    BYTE PTR [rbx],dl
 10053c3:	add    BYTE PTR [rdx],bh
 10053c5:	and    BYTE PTR [rsi],dl
 10053c7:	add    BYTE PTR [rbx],bh
 10053c9:	and    BYTE PTR [rbx],al
 10053cb:	add    BYTE PTR [rdi],bh
 10053cd:	and    BYTE PTR [rax+rax*1],dh
 10053d0:	and    BYTE PTR [r11],al
 10053d3:	add    BYTE PTR [rax+riz*1+0x7],al
 10053d7:	add    BYTE PTR [rbp+0x20],al
 10053da:	add    eax,0x6204600
 10053df:	add    BYTE PTR [rdi+0x20],al
 10053e2:	add    BYTE PTR [rax],al
 10053e4:	rex.W and BYTE PTR [rbx],al
 10053e7:	add    BYTE PTR [rsi+0x20],cl
 10053ea:	add    BYTE PTR [rax],al
 10053ec:	pop    rdi
 10053ed:	and    BYTE PTR [rip+0x24206000],dh        # 0x2520b3f3
 10053f3:	add    BYTE PTR [rax+riz*1+0x0],ah
 10053f7:	add    BYTE PTR [rdx+0x20],ch
 10053fa:	sub    DWORD PTR [rax],eax
 10053fc:	jo     0x100541e
 10053fe:	adc    eax,0x1e207100
 1005403:	add    BYTE PTR [rdx+0x20],dh
 1005406:	add    BYTE PTR [rax],al
 1005408:	je     0x100542a
 100540a:	adc    eax,0x7207a00
 100540f:	add    BYTE PTR [rbp+0x20],bh
 1005412:	add    eax,0x6207e00
 1005417:	add    BYTE PTR [rdi+0x20],bh
 100541a:	adc    al,BYTE PTR [rax]
 100541c:	and    BYTE PTR [rax],0x15
 100541f:	add    BYTE PTR [rdx-0x72fff8e0],cl
 1005425:	and    BYTE PTR [rip+0x6208e00],al        # 0x720e22b
 100542b:	add    BYTE PTR [rdi-0x5fffffe0],cl
 1005431:	and    BYTE PTR [rax+rax*1],al
 1005434:	mov    al,0x20
 1005436:	add    BYTE PTR ss:[rdx-0x2fffffe0],dh
 100543d:	and    BYTE PTR [rdx],ah
 100543f:	add    ch,bl
 1005441:	and    BYTE PTR [rip+0x2220e100],ah        # 0x23213547
 1005447:	add    dl,ah
 1005449:	and    BYTE PTR [rip+0x20e400],ah        # 0x121384f
 100544f:	add    ch,ah
 1005451:	and    BYTE PTR [rax+rax*1],ah
 1005454:	jmp    0x1005476
 1005456:	add    BYTE PTR [rax],al
 1005458:	add    BYTE PTR [rcx],ah
 100545a:	adc    DWORD PTR [rax],eax
 100545c:	add    ah,BYTE PTR [rcx]
 100545e:	sbb    al,0x0
 1005460:	add    esp,DWORD PTR [rcx]
 1005462:	adc    DWORD PTR [rax],eax
 1005464:	(bad)  
 1005465:	and    DWORD PTR [rax+rax*1],ebx
 1005468:	or     BYTE PTR [rcx],ah
 100546a:	adc    DWORD PTR [rax],eax
 100546c:	or     ah,BYTE PTR [rcx]
 100546e:	sbb    al,BYTE PTR [rax]
 1005470:	or     al,0x21
 1005472:	sbb    al,0x0
 1005474:	(bad)  
 1005475:	and    DWORD PTR [rdx],edx
 1005477:	add    BYTE PTR [rax],dl
 1005479:	and    DWORD PTR [rax+rax*1],ebx
 100547c:	adc    esp,DWORD PTR [rcx]
 100547e:	adc    al,BYTE PTR [rax]
 1005480:	adc    al,0x21
 1005482:	adc    DWORD PTR [rax],eax
 1005484:	adc    eax,0x16001c21
 1005489:	and    DWORD PTR [rcx],edx
 100548b:	add    BYTE PTR [rcx],bl
 100548d:	and    DWORD PTR [rax+rax*1],ebx
 1005490:	(bad)  
 1005491:	and    DWORD PTR [rcx],edx
 1005493:	add    BYTE PTR [rcx+riz*1],ah
 1005496:	sbb    al,0x0
 1005498:	and    eax,0x26001121
 100549d:	and    DWORD PTR [rax+rax*1],ecx
 10054a0:	(bad)  
 10054a1:	and    DWORD PTR [rcx],edx
 10054a3:	add    BYTE PTR [rax],ch
 10054a5:	and    DWORD PTR [rax+rax*1],ebx
 10054a8:	sub    DWORD PTR [rcx],esp
 10054aa:	adc    DWORD PTR [rax],eax
 10054ac:	sub    ah,BYTE PTR [rcx]
 10054ae:	or     al,0x0
 10054b0:	sub    al,0x21
 10054b2:	sbb    al,0x0
 10054b4:	and    DWORD PTR cs:[rdi],esi
 10054b7:	add    BYTE PTR [rdi],ch
 10054b9:	and    DWORD PTR [rax],ebx
 10054bb:	add    BYTE PTR [rcx],dh
 10054bd:	and    DWORD PTR [rax+rax*1],ebx
 10054c0:	xor    ah,BYTE PTR [rcx]
 10054c2:	adc    DWORD PTR [rax],eax
 10054c4:	xor    esp,DWORD PTR [rcx]
 10054c6:	sbb    al,BYTE PTR [rax]
 10054c8:	xor    eax,0x39002621
 10054cd:	and    DWORD PTR [rdx],edx
 10054cf:	add    BYTE PTR [rdx],bh
 10054d1:	and    DWORD PTR [rcx],edx
 10054d3:	add    BYTE PTR [rbx],bh
 10054d5:	and    DWORD PTR [rax],eax
 10054d7:	add    BYTE PTR [rip+0x40001e21],bh        # 0x410072fe
 10054dd:	and    DWORD PTR [rax],eax
 10054df:	add    BYTE PTR [rbp+0x21],al
 10054e2:	(bad)  
 10054e3:	add    BYTE PTR [rdx+0x21],cl
 10054e6:	add    BYTE PTR [rax],al
 10054e8:	push   rbx
 10054e9:	and    DWORD PTR [rip+0x2f216000],edx        # 0x3021b4ef
 10054ef:	add    BYTE PTR [rax-0x7cffc7df],al
 10054f5:	and    DWORD PTR [rdi],ebp
 10054f7:	add    BYTE PTR [rcx+riz*1+0x21900000],al
 10054fe:	(bad)  
 10054ff:	add    BYTE PTR [rbp-0x65ffeedf],dl
 1005505:	and    DWORD PTR [rdi],eax
 1005507:	add    BYTE PTR [rcx+riz*1+0x21a00011],bl
 100550e:	(bad)  
 100550f:	add    BYTE PTR [rcx-0x5cffeedf],ah
 1005515:	and    DWORD PTR [rdi],eax
 1005517:	add    BYTE PTR [rcx+riz*1+0x21a60011],ah
 100551e:	(bad)  
 100551f:	add    BYTE PTR [rdi-0x51ffeedf],ah
 1005525:	and    DWORD PTR [rdi],eax
 1005527:	add    BYTE PTR [rdi-0x31ffeedf],ch
 100552d:	and    DWORD PTR [rdi],eax
 100552f:	add    al,dl
 1005531:	and    DWORD PTR [rcx],edx
 1005533:	add    dl,dl
 1005535:	and    DWORD PTR [rdi],eax
 1005537:	add    bl,dl
 1005539:	and    DWORD PTR [rcx],edx
 100553b:	add    ah,dl
 100553d:	and    DWORD PTR [rdi],eax
 100553f:	add    ch,dl
 1005541:	and    DWORD PTR [rcx],edx
 1005543:	add    ah,dh
 1005545:	and    DWORD PTR [rax],eax
 1005547:	add    BYTE PTR [rax],al
 1005549:	and    al,BYTE PTR [rdi]
 100554b:	add    dl,dh
 100554d:	and    al,BYTE PTR [rax]
 100554f:	add    BYTE PTR [rax],al
 1005551:	and    edx,DWORD PTR [rcx]
 1005553:	add    BYTE PTR [rax],cl
 1005555:	and    eax,DWORD PTR [rdi]
 1005557:	add    BYTE PTR [rbx+riz*1],cl
 100555a:	adc    DWORD PTR [rax],eax
 100555c:	and    BYTE PTR [rbx],ah
 100555e:	(bad)  
 100555f:	add    BYTE PTR [rdx],ah
 1005561:	and    edx,DWORD PTR [rcx]
 1005563:	add    BYTE PTR [rcx],ch
 1005565:	and    eax,DWORD PTR [rip+0x6232a00]        # 0x7237f6b
 100556b:	add    BYTE PTR [rbx],ch
 100556d:	and    edx,DWORD PTR [rcx]
 100556f:	add    BYTE PTR [rbx+riz*1+0x0],bh
 1005573:	add    BYTE PTR [rbp+0x23],bh
 1005576:	adc    DWORD PTR [rax],eax
 1005578:	fwait
 1005579:	and    eax,DWORD PTR [rax]
 100557b:	add    BYTE PTR [rax],al
 100557d:	and    al,0x11
 100557f:	add    BYTE PTR [rdi],ah
 1005581:	and    al,0x0
 1005583:	add    BYTE PTR [rax+0x24],al
 1005586:	adc    DWORD PTR [rax],eax
 1005588:	rex.WXB and al,0x0
 100558b:	add    BYTE PTR [rax+0x24],ah
 100558e:	adc    eax,0x11249c00
 1005593:	add    dl,ch
 1005595:	and    al,0x15
 1005597:	add    bl,ch
 1005599:	and    al,0x0
 100559b:	add    BYTE PTR [rax],al
 100559d:	and    eax,0x25960011
 10055a2:	add    BYTE PTR [rax],al
 10055a4:	movabs al,ds:0xb8000725b7001125
 10055ad:	and    eax,0x25c10011
 10055b2:	(bad)  
 10055b3:	add    dl,al
 10055b5:	and    eax,0x25f80011
 10055ba:	add    BYTE PTR [rax],al
 10055bc:	add    BYTE PTR [rsi],ah
 10055be:	adc    DWORD PTR [rax],eax
 10055c0:	adc    al,0x26
 10055c2:	add    BYTE PTR [rax],al
 10055c4:	sbb    DWORD PTR [rsi],esp
 10055c6:	adc    DWORD PTR [rax],eax
 10055c8:	outs   dx,DWORD PTR ds:[rsi]
 10055c9:	es (bad) 
 10055cb:	add    BYTE PTR [rax+0x26],dh
 10055ce:	adc    DWORD PTR [rax],eax
 10055d0:	jb     0x10055f8
 10055d2:	add    BYTE PTR [rax],al
 10055d4:	add    DWORD PTR [rdi],esp
 10055d6:	adc    DWORD PTR [rax],eax
 10055d8:	add    eax,0x6000027
 10055dd:	(bad)  
 10055de:	adc    DWORD PTR [rax],eax
 10055e0:	or     ah,BYTE PTR [rdi]
 10055e2:	add    BYTE PTR [rax],al
 10055e4:	or     al,0x27
 10055e6:	adc    DWORD PTR [rax],eax
 10055e8:	sub    BYTE PTR [rdi],ah
 10055ea:	add    BYTE PTR [rax],al
 10055ec:	sub    DWORD PTR [rdi],esp
 10055ee:	adc    DWORD PTR [rax],eax
 10055f0:	rex.WR (bad) 
 10055f2:	add    BYTE PTR [rax],al
 10055f4:	rex.WRB (bad) 
 10055f6:	adc    DWORD PTR [rax],eax
 10055f8:	rex.WRX (bad) 
 10055fa:	add    BYTE PTR [rax],al
 10055fc:	rex.WRXB (bad) 
 10055fe:	adc    DWORD PTR [rax],eax
 1005600:	push   rbx
 1005601:	(bad)  
 1005602:	add    BYTE PTR [rax],al
 1005604:	push   rsi
 1005605:	(bad)  
 1005606:	adc    DWORD PTR [rax],eax
 1005608:	push   rdi
 1005609:	(bad)  
 100560a:	add    BYTE PTR [rax],al
 100560c:	pop    rax
 100560d:	(bad)  
 100560e:	adc    DWORD PTR [rax],eax
 1005610:	pop    rdi
 1005611:	(bad)  
 1005612:	add    BYTE PTR [rax],al
 1005614:	(bad)  
 1005615:	(bad)  
 1005616:	adc    DWORD PTR [rax],eax
 1005618:	push   0x76000027
 100561d:	(bad)  
 100561e:	adc    eax,0x11279400
 1005623:	add    BYTE PTR [rbp-0x67ffffd9],dl
 1005629:	(bad)  
 100562a:	adc    DWORD PTR [rax],eax
 100562c:	mov    al,0x27
 100562e:	add    BYTE PTR [rax],al
 1005630:	mov    cl,0x27
 1005632:	adc    DWORD PTR [rax],eax
 1005634:	mov    edi,0x27
 1005639:	sub    BYTE PTR [rcx],dl
 100563b:	add    BYTE PTR [rax],al
 100563d:	sub    DWORD PTR [rax],eax
 100563f:	add    BYTE PTR [rax-0x65ffeed2],al
 1005645:	add    BYTE PTR cs:[rax],al
 1005648:	fwait
 1005649:	adc    DWORD PTR cs:[rax],eax
 100564c:	hlt    
 100564d:	add    BYTE PTR cs:[rax],al
 1005650:	add    BYTE PTR [rdi],ch
 1005652:	adc    DWORD PTR [rax],eax
 1005654:	(bad)  
 1005655:	(bad)  
 1005656:	add    BYTE PTR [rax],al
 1005658:	lock (bad) 
 100565a:	adc    DWORD PTR [rax],eax
 100565c:	cld    
 100565d:	(bad)  
 100565e:	add    BYTE PTR [rax],al
 1005660:	add    BYTE PTR [rax],dh
 1005662:	add    al,BYTE PTR [rax]
 1005664:	add    DWORD PTR [rax],esi
 1005666:	add    eax,DWORD PTR [rax]
 1005668:	add    al,0x30
 100566a:	adc    DWORD PTR [rax],eax
 100566c:	add    eax,0x6002130
 1005671:	xor    BYTE PTR [rsi],ah
 1005673:	add    BYTE PTR [rdi],al
 1005675:	xor    BYTE PTR [rax],bh
 1005677:	add    BYTE PTR [rax],cl
 1005679:	xor    BYTE PTR [rip+0x6300900],al        # 0x7305f7f
 100567f:	add    BYTE PTR [rdx],cl
 1005681:	xor    BYTE PTR [rip+0x6300b00],al        # 0x7306187
 1005687:	add    BYTE PTR [rax+rsi*1],cl
 100568a:	add    eax,0x6300d00
 100568f:	add    BYTE PTR [rsi],cl
 1005691:	xor    BYTE PTR [rip+0x6300f00],al        # 0x7306597
 1005697:	add    BYTE PTR [rax],dl
 1005699:	xor    BYTE PTR [rip+0x6301100],al        # 0x730679f
 100569f:	add    BYTE PTR [rdx],dl
 10056a1:	xor    BYTE PTR [rcx],dl
 10056a3:	add    BYTE PTR [rax+rsi*1],dl
 10056a6:	add    eax,0x6301500
 10056ab:	add    BYTE PTR [rsi],dl
 10056ad:	xor    BYTE PTR [rip+0x6301700],al        # 0x7306db3
 10056b3:	add    BYTE PTR [rax],bl
 10056b5:	xor    BYTE PTR [rip+0x6301900],al        # 0x7306fbb
 10056bb:	add    BYTE PTR [rdx],bl
 10056bd:	xor    BYTE PTR [rip+0x6301b00],al        # 0x73071c3
 10056c3:	add    BYTE PTR [rax+rsi*1],bl
 10056c6:	adc    al,0x0
 10056c8:	sbb    eax,0x1e000530
 10056cd:	xor    BYTE PTR [rsi],al
 10056cf:	add    BYTE PTR [rax],ah
 10056d1:	xor    BYTE PTR [rcx],dl
 10056d3:	add    BYTE PTR [rcx],ah
 10056d5:	xor    BYTE PTR [rax],bh
 10056d7:	add    BYTE PTR [rdx],ch
 10056d9:	xor    BYTE PTR [rdx],ah
 10056db:	add    BYTE PTR [rax],dh
 10056dd:	xor    BYTE PTR [rax+rax*1],dl
 10056e0:	xor    DWORD PTR [rax],esi
 10056e2:	and    DWORD PTR [rax],eax
 10056e4:	xor    BYTE PTR ss:[rcx],dl
 10056e7:	add    BYTE PTR [rax],bh
 10056e9:	xor    BYTE PTR [rdi],ch
 10056eb:	add    BYTE PTR [rbx],bh
 10056ed:	xor    BYTE PTR [rsi],bl
 10056ef:	add    BYTE PTR [rip+0x3e000030],bh        # 0x3f005725
 10056f5:	xor    BYTE PTR [rcx],dl
 10056f7:	add    BYTE PTR [rax+0x30],al
 10056fa:	add    BYTE PTR [rax],al
 10056fc:	xor    BYTE PTR [r11],bl
 10056ff:	add    BYTE PTR [rbp-0x68ffe1d0],dl
 1005705:	xor    BYTE PTR [rax],al
 1005707:	add    BYTE PTR [rcx-0x64ffddd0],bl
 100570d:	xor    BYTE PTR [rip+0x21309d00],cl        # 0x2230f413
 1005713:	add    BYTE PTR [rdi-0x5fffe1d0],bl
 1005719:	xor    BYTE PTR [rax],al
 100571b:	add    BYTE PTR [rcx-0x4ffe4d0],ah
 1005721:	xor    BYTE PTR [rax+rax*1],dh
 1005724:	cld    
 1005725:	xor    BYTE PTR [rcx],ah
 1005727:	add    bh,bh
 1005729:	xor    BYTE PTR [rsi],bl
 100572b:	add    BYTE PTR [rax],al
 100572d:	xor    DWORD PTR [rax],eax
 100572f:	add    BYTE PTR [rip+0x2d001b31],al        # 0x2e007266
 1005735:	xor    DWORD PTR [rax],eax
 1005737:	add    BYTE PTR [rcx],dh
 1005739:	xor    DWORD PTR [rsi],esp
 100573b:	add    BYTE PTR [rdi-0x6fffffcf],cl
 1005741:	xor    DWORD PTR [rcx],edx
 1005743:	add    BYTE PTR [rdx-0x69ffeacf],dl
 1005749:	xor    DWORD PTR [rcx],edx
 100574b:	add    BYTE PTR [rax-0x47ffd9cf],ah
 1005751:	xor    DWORD PTR [rax],eax
 1005753:	add    al,dh
 1005755:	xor    DWORD PTR [rsi],ebx
 1005757:	add    BYTE PTR [rax],al
 1005759:	xor    dl,BYTE PTR [rcx]
 100575b:	add    BYTE PTR [rip+0x20000032],bl        # 0x21005793
 1005761:	xor    dl,BYTE PTR [rip+0x11322a00]        # 0x12328167
 1005767:	add    BYTE PTR [rdx+rsi*1+0x0],al
 100576b:	add    BYTE PTR [rax+0x32],ah
 100576e:	adc    DWORD PTR [rax],eax
 1005770:	jl     0x10057a4
 1005772:	add    BYTE PTR [rax],al
 1005774:	jg     0x10057a8
 1005776:	adc    DWORD PTR [rax],eax
 1005778:	xor    BYTE PTR [rdx],0x15
 100577b:	add    BYTE PTR [rdx-0x4effeece],cl
 1005781:	xor    al,BYTE PTR [rax]
 1005783:	add    al,al
 1005785:	xor    dl,BYTE PTR [rcx]
 1005787:	add    ah,cl
 1005789:	xor    al,BYTE PTR [rax]
 100578b:	add    al,dl
 100578d:	xor    dl,BYTE PTR [rcx]
 100578f:	add    bh,bh
 1005791:	xor    al,BYTE PTR [rax]
 1005793:	add    BYTE PTR [rax],al
 1005795:	xor    edx,DWORD PTR [rcx]
 1005797:	add    BYTE PTR [rdi+0x33],dh
 100579a:	add    BYTE PTR [rax],al
 100579c:	jnp    0x10057d1
 100579e:	adc    DWORD PTR [rax],eax
 10057a0:	fidiv  WORD PTR [rbx]
 10057a2:	add    BYTE PTR [rax],al
 10057a4:	loopne 0x10057d9
 10057a6:	adc    DWORD PTR [rax],eax
 10057a8:	push   QWORD PTR [rbx]
 10057aa:	add    BYTE PTR [rax],al
 10057ac:	add    BYTE PTR [rsi+riz*1],dh
 10057af:	add    BYTE PTR [rsi+0x4d],dh
 10057b5:	rex.WRX sbb r8,QWORD PTR [rax]
 10057b8:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10057b9:	lahf   
 10057ba:	add    BYTE PTR [rax],al
 10057bc:	add    BYTE PTR [rax-0x5b72ffda],ah
 10057c2:	add    BYTE PTR [rax],al
 10057c4:	nop
 10057c5:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10057c6:	adc    DWORD PTR [rax],eax
 10057c8:	movabs ds:0xb40011a4a40000a4,al
 10057d1:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10057d2:	add    BYTE PTR [rax],al
 10057d4:	mov    ch,0xa4
 10057d6:	adc    DWORD PTR [rax],eax
 10057d8:	shl    DWORD PTR [rax+rax*1+0x11a4c200],0x0
 10057e0:	(bad)
 10057e3:	add    dh,al
 10057e5:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10057e6:	adc    DWORD PTR [rax],eax
 10057e8:	(bad)  
 10057e9:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10057ea:	add    BYTE PTR [rax],al
 10057ec:	add    BYTE PTR [rbx+rbx*1+0xd7a400],ch
 10057f3:	add    BYTE PTR [rax],al
 10057f5:	fdivr  DWORD PTR [rcx]
 10057f7:	add    BYTE PTR [rax],al
 10057f9:	loopne 0x1005835
 10057fb:	add    BYTE PTR [rax],al
 10057fd:	stc    
 10057fe:	add    BYTE PTR es:[rsi],ch
 1005801:	cli    
 1005802:	add    BYTE PTR [rax],al
 1005804:	xor    dl,bh
 1005806:	(bad)  
 1005807:	add    BYTE PTR [rbx-0x6],ch
 100580a:	add    BYTE PTR [rax],al
 100580c:	add    bl,bh
 100580e:	adc    al,BYTE PTR [rax]
 1005810:	(bad)  
 1005811:	sti    
 1005812:	add    BYTE PTR [rax],al
 1005814:	adc    edi,ebx
 1005816:	adc    al,BYTE PTR [rax]
 1005818:	sbb    bl,bh
 100581a:	add    BYTE PTR [rax],al
 100581c:	sbb    eax,0x1e0026fb
 1005821:	sti    
 1005822:	and    eax,DWORD PTR [rax]
 1005824:	(bad)  
 1005825:	sti    
 1005826:	add    BYTE PTR es:[rcx],ch
 1005829:	sti    
 100582a:	(bad)  
 100582b:	add    BYTE PTR [rdx],ch
 100582d:	sti    
 100582e:	add    BYTE PTR es:[rdi],dh
 1005831:	sti    
 1005832:	add    BYTE PTR [rax],al
 1005834:	cmp    bl,bh
 1005836:	add    BYTE PTR es:[rip+0x3e0000fb],bh        # 0x3f005938
 100583d:	sti    
 100583e:	add    BYTE PTR es:[rdi],bh
 1005841:	sti    
 1005842:	add    BYTE PTR [rax],al
 1005844:	rex sti 
 1005846:	add    BYTE PTR es:[rdx-0x5],al
 100584a:	add    BYTE PTR [rax],al
 100584c:	rex.XB sti 
 100584e:	add    BYTE PTR es:[rbp-0x5],al
 1005852:	add    BYTE PTR [rax],al
 1005854:	rex.RX sti 
 1005856:	add    BYTE PTR es:[rdx-0x2cffff05],dh
 100585d:	sti    
 100585e:	add    BYTE PTR es:[rsi],bh
 1005861:	std    
 1005862:	add    eax,0x6fd3f00
 1005867:	add    BYTE PTR [rax-0x3],al
 100586a:	add    BYTE PTR [rax],al
 100586c:	push   rax
 100586d:	std    
 100586e:	add    BYTE PTR es:[rax-0x6dffff03],dl
 1005875:	std    
 1005876:	es add al,cl
 1005879:	std    
 100587a:	add    BYTE PTR [rax],al
 100587c:	lock std 
 100587e:	es add ah,bh
 1005881:	std    
 1005882:	ss add ch,bh
 1005885:	std    
 1005886:	add    BYTE PTR [rax],al
 1005888:	add    dh,bh
 100588a:	and    al,0x0
 100588c:	adc    dh,bh
 100588e:	add    BYTE PTR [rax],al
 1005890:	and    dh,bh
 1005892:	and    eax,DWORD PTR [rax]
 1005894:	and    al,0xfe
 1005896:	add    BYTE PTR [rax],al
 1005898:	xor    dh,bh
 100589a:	add    eax,DWORD PTR [rax]
 100589c:	xor    esi,edi
 100589e:	adc    al,0x0
 10058a0:	xor    edi,esi
 10058a2:	xor    al,0x0
 10058a4:	xor    eax,0x360005fe
 10058a9:	inc    BYTE PTR [rsi]
 10058ab:	add    BYTE PTR [rdi],dh
 10058ad:	inc    BYTE PTR [rip+0x6fe3800]        # 0x7fe90b3
 10058b3:	add    BYTE PTR [rcx],bh
 10058b5:	inc    BYTE PTR [rip+0x6fe3a00]        # 0x7fe92bb
 10058bb:	add    BYTE PTR [rbx],bh
 10058bd:	inc    BYTE PTR [rip+0x6fe3c00]        # 0x7fe94c3
 10058c3:	add    BYTE PTR [rip+0x3e0005fe],bh        # 0x3f005ec7
 10058c9:	inc    BYTE PTR [rsi]
 10058cb:	add    BYTE PTR [rdi],bh
 10058cd:	inc    BYTE PTR [rip+0x6fe4000]        # 0x7fe98d3
 10058d3:	add    BYTE PTR [rcx-0x2],al
 10058d6:	add    eax,0x6fe4200
 10058db:	add    BYTE PTR [rbx-0x2],al
 10058de:	add    eax,0x6fe4400
 10058e3:	add    BYTE PTR [rbp-0x2],al
 10058e6:	add    BYTE PTR [rax],al
 10058e8:	rex.WB inc BYTE PTR [r11]
 10058eb:	add    BYTE PTR [rbp-0x2],cl
 10058ee:	xor    al,0x0
 10058f0:	push   rax
 10058f1:	inc    BYTE PTR [rbx]
 10058f3:	add    BYTE PTR [rbx-0x2],dl
 10058f6:	add    BYTE PTR [rax],al
 10058f8:	push   rsp
 10058f9:	inc    BYTE PTR [rbx]
 10058fb:	add    BYTE PTR [rax-0x2],bl
 10058fe:	adc    al,0x0
 1005900:	pop    rcx
 1005901:	inc    BYTE PTR [rip+0x6fe5a00]        # 0x7feb307
 1005907:	add    BYTE PTR [rbx-0x2],bl
 100590a:	add    eax,0x6fe5c00
 100590f:	add    BYTE PTR [rbp-0x2],bl
 1005912:	add    eax,0x6fe5e00
 1005917:	add    BYTE PTR [rdi-0x2],bl
 100591a:	add    eax,DWORD PTR [rax]
 100591c:	(bad)  
 100591d:	inc    BYTE PTR [rdi]
 100591f:	add    BYTE PTR [rbx-0x2],ah
 1005922:	adc    al,0x0
 1005924:	inc    BYTE PTR fs:[rdi]
 1005927:	add    BYTE PTR [rdi-0x2],ah
 100592a:	add    BYTE PTR [rax],al
 100592c:	push   0x690003fe
 1005931:	inc    BYTE PTR [rax+rax*1]
 1005934:	push   0xfffffffffffffffe
 1005936:	add    eax,DWORD PTR [rax]
 1005938:	ins    BYTE PTR es:[rdi],dx
 1005939:	inc    BYTE PTR [rax]
 100593b:	add    BYTE PTR [rax-0x2],dh
 100593e:	add    BYTE PTR es:[rbx-0x2],dh
 1005942:	(bad)  
 1005943:	add    BYTE PTR [rsi+rdi*8+0x26],dh
 1005947:	add    BYTE PTR [rbp-0x2],dh
 100594a:	add    BYTE PTR [rax],al
 100594c:	jbe    0x100594c
 100594e:	es add ch,bh
 1005951:	inc    BYTE PTR [rax]
 1005953:	add    bh,bh
 1005955:	(bad)  
 1005956:	sub    DWORD PTR [rax],eax
 1005958:	add    bh,bh
 100595a:	add    BYTE PTR [rax],al
 100595c:	add    edi,edi
 100595e:	add    eax,DWORD PTR [rax]
 1005960:	add    al,0xff
 1005962:	add    al,0x0
 1005964:	add    eax,0x80003ff
 1005969:	inc    DWORD PTR [rip+0x6ff0900]        # 0x7ff626f
 100596f:	add    BYTE PTR [rdx],cl
 1005971:	inc    DWORD PTR [rbx]
 1005973:	add    BYTE PTR [rbx],cl
 1005975:	inc    DWORD PTR [rdi]
 1005977:	add    BYTE PTR [rdi+rdi*8],cl
 100597a:	add    eax,DWORD PTR [rax]
 100597c:	or     eax,0xe0014ff
 1005981:	inc    DWORD PTR [rbx]
 1005983:	add    BYTE PTR [rax],dl
 1005985:	jmp    FWORD PTR [rsi]
 1005987:	add    BYTE PTR [rdx],bl
 1005989:	inc    DWORD PTR [rbx]
 100598b:	add    BYTE PTR [rdi+rdi*8],bl
 100598e:	(bad)  
 100598f:	add    BYTE PTR [rdi],bl
 1005991:	inc    DWORD PTR [rbx]
 1005993:	add    BYTE PTR [rcx],ah
 1005995:	call   FWORD PTR [rax+rax*1]
 1005998:	cmp    edi,edi
 100599a:	add    eax,0x3ff3c00
 100599f:	add    BYTE PTR [rip+0x3e0006ff],bh        # 0x3f0060a4
 10059a5:	dec    DWORD PTR [rip+0x3bff3f00]        # 0x3cff98ab
 10059ab:	add    BYTE PTR [rax-0x1],al
 10059ae:	or     eax,0x12ff4100
 10059b3:	add    BYTE PTR [rbx-0x1],bl
 10059b6:	add    eax,0x7ff5c00
 10059bb:	add    BYTE PTR [rbp-0x1],bl
 10059be:	(bad)  
 10059bf:	add    BYTE PTR [rsi-0x1],bl
 10059c2:	(bad)  
 10059c3:	add    BYTE PTR [rdi-0x1],bl
 10059c6:	add    BYTE PTR [rax],al
 10059c8:	(bad)  
 10059c9:	inc    DWORD PTR [rbx]
 10059cb:	add    BYTE PTR [rdx-0x1],ah
 10059ce:	add    eax,0x6ff6300
 10059d3:	add    BYTE PTR [rdi+rdi*8+0x3],ah
 10059d7:	add    BYTE PTR [rbp-0x1],ah
 10059da:	xor    al,0x0
 10059dc:	jmp    WORD PTR [rsi]
 10059df:	add    BYTE PTR [rax-0x1],dh
 10059e2:	(bad)  
 10059e3:	add    BYTE PTR [rcx-0x1],dh
 10059e6:	add    BYTE PTR es:[rsi-0x5fffe001],bl
 10059ed:	jmp    QWORD PTR [rsi]
 10059ef:	add    BYTE PTR [rdi-0x3dffff01],bh
 10059f5:	jmp    QWORD PTR [rsi]
 10059f7:	add    al,cl
 10059f9:	inc    DWORD PTR [rax]
 10059fb:	add    dl,cl
 10059fd:	jmp    QWORD PTR [rsi]
 10059ff:	add    al,dl
 1005a01:	inc    DWORD PTR [rax]
 1005a03:	add    dl,dl
 1005a05:	jmp    QWORD PTR [rsi]
 1005a07:	add    al,bl
 1005a09:	inc    DWORD PTR [rax]
 1005a0b:	add    dl,bl
 1005a0d:	jmp    QWORD PTR [rsi]
 1005a0f:	add    ch,bl
 1005a11:	inc    DWORD PTR [rax]
 1005a13:	add    al,ah
 1005a15:	inc    DWORD PTR [rax+rax*1]
 1005a18:	loop   0x1005a19
 1005a1a:	(bad)  
 1005a1b:	add    bl,ah
 1005a1d:	dec    DWORD PTR [rip+0x11ffe400]        # 0x13003e23
 1005a23:	add    ch,ah
 1005a25:	inc    DWORD PTR [rax+rax*1]
 1005a28:	out    0xff,eax
 1005a2a:	add    BYTE PTR [rax],al
 1005a2c:	call   0xffffffffea006c30
 1005a31:	inc    DWORD PTR [rdi]
 1005a33:	add    ch,ch
 1005a35:	call   QWORD PTR [rcx]
 1005a37:	add    bh,ch
 1005a39:	inc    DWORD PTR [rax]
 1005a3b:	add    cl,bh
 1005a3d:	jmp    FWORD PTR [rcx]
 1005a3f:	add    ah,bh
 1005a41:	call   QWORD PTR [rcx]
 1005a43:	add    dh,bh
 1005a45:	inc    DWORD PTR [rax]
	...
 1005a4f:	add    BYTE PTR [rsi],bl
 1005a51:	add    BYTE PTR [rax+0x0],al
 1005a54:	jb     0x1005a56
 1005a56:	test   DWORD PTR [rax],eax
 1005a58:	mov    dl,0x0
 1005a5a:	rol    BYTE PTR [rax],1
 1005a5c:	out    dx,al
 1005a5d:	add    BYTE PTR [rip+0x22012201],dl        # 0x23017c64
 1005a63:	add    DWORD PTR [rbp+0x1],ebx
 1005a66:	movabs al,ds:0x8a0251022101ea01
 1005a6f:	add    bh,BYTE PTR [rdx+0x1702d602]
 1005a75:	add    edi,DWORD PTR [rip+0x4f034f03]        # 0x5003a97e
 1005a7b:	add    ecx,DWORD PTR [rdi+0x3]
 1005a7e:	pop    rsp
 1005a7f:	add    edi,DWORD PTR [rbx+rax*1-0x76]
 1005a83:	add    ecx,DWORD PTR [rdx-0x75fc75fd]
 1005a89:	add    ecx,DWORD PTR [rdx-0x70fc75fd]
 1005a8f:	add    ecx,edi
 1005a91:	add    eax,DWORD PTR [rsi]
 1005a93:	add    al,0x42
 1005a95:	add    al,0x44
 1005a97:	add    al,0x4f
 1005a99:	add    al,0x57
 1005a9b:	add    al,0x5f
 1005a9d:	add    al,0x65
 1005a9f:	add    al,0x7e
 1005aa1:	add    al,0x80
 1005aa3:	add    al,0x80
 1005aa5:	add    al,0x80
 1005aa7:	add    al,0x80
 1005aa9:	add    al,0x80
 1005aab:	add    al,0x80
 1005aad:	add    al,0x84
 1005aaf:	add    al,0x88
 1005ab1:	add    al,0xbc
 1005ab3:	add    al,0xc6
 1005ab5:	add    al,0xd5
 1005ab7:	add    al,0xdb
 1005ab9:	add    al,0xdb
 1005abb:	add    al,0xdb
 1005abd:	add    al,0xdb
 1005abf:	add    al,0xdb
 1005ac1:	add    al,0xdb
 1005ac3:	add    al,0xdb
 1005ac5:	add    al,0xdb
 1005ac7:	add    al,0xdb
 1005ac9:	add    al,0xdb
 1005acb:	add    al,0xdb
 1005acd:	add    al,0xdb
 1005acf:	add    al,0x0
 1005ad1:	add    BYTE PTR [rax],al
 1005ad3:	add    BYTE PTR [rcx],al
 1005ad5:	add    BYTE PTR [rax],al
 1005ad7:	add    BYTE PTR [rcx],al
 1005ad9:	add    al,0x0
 1005adb:	add    BYTE PTR [rip+0x2000001],al        # 0x3005ae2
 1005ae1:	add    al,0x0
 1005ae3:	add    BYTE PTR [rip+0x3000015],al        # 0x4005afe
 1005ae9:	add    al,0x0
 1005aeb:	add    BYTE PTR [rip+0x4000008],al        # 0x5005af9
 1005af1:	add    al,0x0
 1005af3:	add    BYTE PTR [rcx],al
 1005af5:	add    eax,DWORD PTR [rax]
 1005af7:	add    BYTE PTR [rsp+rax*1],al
 1005afa:	add    BYTE PTR [rax],al
 1005afc:	add    dh,BYTE PTR [rax+rax*1]
 1005aff:	add    BYTE PTR [rsp+rax*1],al
 1005b02:	add    BYTE PTR [rax],al
 1005b04:	add    al,0x41
 1005b06:	add    BYTE PTR [rax],al
 1005b08:	add    eax,0x5000004
 1005b0d:	add    al,0x0
 1005b0f:	add    BYTE PTR [rsi],al
 1005b11:	add    al,0x0
 1005b13:	add    BYTE PTR [rcx],al
 1005b15:	add    eax,0x4060000
 1005b1a:	add    BYTE PTR [rax],al
 1005b1c:	add    al,0x47
 1005b1e:	add    BYTE PTR [rax],al
 1005b20:	(bad)  
 1005b21:	add    al,0x0
 1005b23:	add    BYTE PTR [rip+0x8000008],al        # 0x9005b31
 1005b29:	add    al,0x0
 1005b2b:	add    BYTE PTR [rip+0x9000007],al        # 0xa005b38
 1005b31:	add    al,0x0
 1005b33:	add    BYTE PTR [rip+0xa000008],al        # 0xb005b41
 1005b39:	add    al,0x0
 1005b3b:	add    BYTE PTR [rip+0xb000009],al        # 0xc005b4a
 1005b41:	add    al,0x0
 1005b43:	add    BYTE PTR [rip+0xc00000a],al        # 0xd005b53
 1005b49:	add    al,0x0
 1005b4b:	add    BYTE PTR [rip+0xd00000b],al        # 0xe005b5c
 1005b51:	add    al,0x0
 1005b53:	add    BYTE PTR [rip+0xe00000c],al        # 0xf005b65
 1005b59:	add    al,0x0
 1005b5b:	add    BYTE PTR [rip+0xf00000d],al        # 0x10005b6e
 1005b61:	add    al,0x0
 1005b63:	add    BYTE PTR [rip+0x1000000e],al        # 0x11005b77
 1005b69:	add    al,0x0
 1005b6b:	add    BYTE PTR [rip+0x11000008],al        # 0x12005b79
 1005b71:	add    al,0x0
 1005b73:	add    BYTE PTR [rcx],al
 1005b75:	adc    BYTE PTR [rax],al
 1005b77:	add    BYTE PTR [rcx],dl
 1005b79:	add    al,0x0
 1005b7b:	add    BYTE PTR [rdx],al
 1005b7d:	xor    BYTE PTR [rax],al
 1005b7f:	add    BYTE PTR [rcx],dl
 1005b81:	add    al,0x0
 1005b83:	add    BYTE PTR [rax+rcx*2],al
 1005b86:	add    BYTE PTR [rax],al
 1005b88:	adc    al,BYTE PTR [rax+rax*1]
 1005b8b:	add    BYTE PTR [rcx],al
 1005b8d:	adc    DWORD PTR [rax],eax
 1005b8f:	add    BYTE PTR [rdx],dl
 1005b91:	add    al,0x0
 1005b93:	add    BYTE PTR [rsi],al
 1005b95:	add    BYTE PTR [rax],al
 1005b98:	adc    eax,DWORD PTR [rax+rax*1]
 1005b9b:	add    BYTE PTR [rip+0x14000008],al        # 0x15005ba9
 1005ba1:	add    al,0x0
 1005ba3:	add    BYTE PTR [rcx],al
 1005ba5:	add    eax,0x4140000
 1005baa:	add    BYTE PTR [rax],al
 1005bac:	add    al,0x4a
 1005bae:	add    BYTE PTR [rax],al
 1005bb0:	adc    eax,0x5000004
 1005bb5:	adc    eax,DWORD PTR [rax]
 1005bb7:	add    BYTE PTR [rsi],dl
 1005bb9:	add    al,0x0
 1005bbb:	add    BYTE PTR [rip+0x17000008],al        # 0x18005bc9
 1005bc1:	add    al,0x0
 1005bc3:	add    BYTE PTR [rbx+rcx*2],al
 1005bc6:	add    BYTE PTR [rax],al
 1005bc8:	sbb    BYTE PTR [rax+rax*1],al
 1005bcb:	add    BYTE PTR [rip+0x19000014],al        # 0x1a005be5
 1005bd1:	add    al,0x0
 1005bd3:	add    BYTE PTR [rip+0x1a000015],al        # 0x1b005bee
 1005bd9:	add    al,0x0
 1005bdb:	add    BYTE PTR [rip+0x1b000016],al        # 0x1c005bf7
 1005be1:	add    al,0x0
 1005be3:	add    BYTE PTR [rip+0x1c000017],al        # 0x1d005c00
 1005be9:	add    al,0x0
 1005beb:	add    BYTE PTR [rip+0x1d000018],al        # 0x1e005c09
 1005bf1:	add    al,0x0
 1005bf3:	add    BYTE PTR [rip+0x1e00000a],al        # 0x1f005c03
 1005bf9:	add    al,0x0
 1005bfb:	add    BYTE PTR [rip+0x1f000019],al        # 0x20005c1a
 1005c01:	add    al,0x0
 1005c03:	add    BYTE PTR [rip+0x2000001a],al        # 0x21005c23
 1005c09:	add    al,0x0
 1005c0b:	add    BYTE PTR [rcx],al
 1005c0d:	add    DWORD PTR [rax],eax
 1005c0f:	add    BYTE PTR [rax],ah
 1005c11:	add    al,0x0
 1005c13:	add    BYTE PTR [rax+rdx*2],al
 1005c16:	add    BYTE PTR [rax],al
 1005c18:	and    DWORD PTR [rax+rax*1],eax
 1005c1b:	add    BYTE PTR [rip+0x22000008],al        # 0x23005c29
 1005c21:	add    al,0x0
 1005c23:	add    BYTE PTR [rip+0x2300001b],al        # 0x24005c44
 1005c29:	add    al,0x0
 1005c2b:	add    BYTE PTR [rip+0x24000015],al        # 0x25005c46
 1005c31:	add    al,0x0
 1005c33:	add    BYTE PTR [rip+0x2500001c],al        # 0x26005c55
 1005c39:	add    al,0x0
 1005c3b:	add    BYTE PTR [rip+0x2600001d],al        # 0x27005c5e
 1005c41:	add    al,0x0
 1005c43:	add    BYTE PTR [rip+0x2700001e],al        # 0x28005c67
 1005c49:	add    al,0x0
 1005c4b:	add    BYTE PTR [rip+0x2800001f],al        # 0x29005c70
 1005c51:	add    al,0x0
 1005c53:	add    BYTE PTR [rdx*1+0x4290000],al
 1005c5a:	add    BYTE PTR [rax],al
 1005c5c:	add    DWORD PTR [rcx],eax
 1005c5e:	add    BYTE PTR [rax],al
 1005c60:	sub    DWORD PTR [rax+rax*1],eax
 1005c63:	add    BYTE PTR [rcx+rdx*2],al
 1005c66:	add    BYTE PTR [rax],al
 1005c68:	sub    al,BYTE PTR [rax+rax*1]
 1005c6b:	add    BYTE PTR [rip+0x2b000020],al        # 0x2c005c91
 1005c71:	add    al,0x0
 1005c73:	add    BYTE PTR [rip+0x2c000008],al        # 0x2d005c81
 1005c79:	add    al,0x0
 1005c7b:	add    BYTE PTR [rdx],al
 1005c7d:	add    BYTE PTR ss:[rax],al
 1005c80:	sub    al,0x4
 1005c82:	add    BYTE PTR [rax],al
 1005c84:	add    al,0x63
 1005c86:	add    BYTE PTR [rax],al
 1005c88:	sub    eax,0x5000004
 1005c8d:	or     BYTE PTR [rax],al
 1005c8f:	add    BYTE PTR [rsi],ch
 1005c91:	add    al,0x0
 1005c93:	add    BYTE PTR [rbx+rdx*2],al
 1005c96:	add    BYTE PTR [rax],al
 1005c98:	(bad)  
 1005c99:	add    al,0x0
 1005c9b:	add    BYTE PTR [rcx],al
 1005c9d:	and    DWORD PTR [rax],eax
 1005c9f:	add    BYTE PTR [rdi],ch
 1005ca1:	add    al,0x0
 1005ca3:	add    BYTE PTR [rsi],al
 1005ca5:	cmp    al,BYTE PTR [rax]
 1005ca7:	add    BYTE PTR [rdx],dh
 1005ca9:	add    al,0x0
 1005cab:	add    BYTE PTR [rax+rcx*1],al
 1005cae:	add    BYTE PTR [rax],al
 1005cb0:	xor    al,0x4
 1005cb2:	add    BYTE PTR [rax],al
 1005cb4:	add    al,0x8
 1005cb6:	add    BYTE PTR [rax],al
 1005cb8:	xor    eax,0x4000004
 1005cbd:	or     BYTE PTR [rax],al
 1005cbf:	add    BYTE PTR [rsi],dh
 1005cc1:	add    al,0x0
 1005cc3:	add    BYTE PTR [rip+0x37000008],al        # 0x38005cd1
 1005cc9:	add    al,0x0
 1005ccb:	add    BYTE PTR [rip+0x38000008],al        # 0x39005cd9
 1005cd1:	add    al,0x0
 1005cd3:	add    BYTE PTR [rip+0x39000008],al        # 0x3a005ce1
 1005cd9:	add    al,0x0
 1005cdb:	add    BYTE PTR [rcx],al
 1005cdd:	and    al,BYTE PTR [rax]
 1005cdf:	add    BYTE PTR [rcx],bh
 1005ce1:	add    al,0x0
 1005ce3:	add    BYTE PTR [rsi],al
 1005ce5:	xor    eax,0x43a0000
 1005cea:	add    BYTE PTR [rax],al
 1005cec:	add    al,0x55
 1005cee:	add    BYTE PTR [rax],al
 1005cf0:	cmp    eax,DWORD PTR [rax+rax*1]
 1005cf3:	add    BYTE PTR [rsi+rdx*2],al
 1005cf6:	add    BYTE PTR [rax],al
 1005cf8:	ds add al,0x0
 1005cfb:	add    BYTE PTR [rip+0x3f000008],al        # 0x40005d09
 1005d01:	add    al,0x0
 1005d03:	add    BYTE PTR [rsi],al
 1005d05:	(bad)  
 1005d06:	add    BYTE PTR [rax],al
 1005d08:	add    al,0x0
 1005d0b:	add    BYTE PTR [rip+0x41000015],al        # 0x42005d26
 1005d11:	add    al,0x0
 1005d13:	add    BYTE PTR [rip+0x42000008],al        # 0x43005d21
 1005d19:	add    al,0x0
 1005d1b:	add    BYTE PTR [rax+rbx*2],al
 1005d1e:	add    BYTE PTR [rax],al
 1005d20:	rex.XB add al,0x0
 1005d23:	add    BYTE PTR [rsi],al
 1005d25:	cmp    BYTE PTR [rax],al
 1005d27:	add    BYTE PTR [rsp+rax*1+0x0],al
 1005d2b:	add    BYTE PTR [rsi],al
 1005d2d:	cmp    DWORD PTR [rax],eax
 1005d2f:	add    BYTE PTR [rbp+0x4],al
 1005d32:	add    BYTE PTR [rax],al
 1005d34:	add    al,0x59
 1005d36:	add    BYTE PTR [rax],al
 1005d38:	rex.RX add al,0x0
 1005d3b:	add    BYTE PTR [rcx],al
 1005d3d:	and    al,BYTE PTR [rax]
 1005d3f:	add    BYTE PTR [rsi+0x4],al
 1005d42:	add    BYTE PTR [rax],al
 1005d44:	(bad)  
 1005d45:	xor    eax,0x4470000
 1005d4a:	add    BYTE PTR [rax],al
 1005d4c:	add    DWORD PTR [rdx],esp
 1005d4e:	add    BYTE PTR [rax],al
 1005d50:	rex.RXB add al,0x0
 1005d53:	add    BYTE PTR [rsi],al
 1005d55:	xor    eax,0x4480000
 1005d5a:	add    BYTE PTR [rax],al
 1005d5c:	add    al,0x35
 1005d5e:	add    BYTE PTR [rax],al
 1005d60:	rex.WB add al,0x0
 1005d63:	add    BYTE PTR [rsi*1+0x44a0000],al
 1005d6a:	add    BYTE PTR [rax],al
 1005d6c:	add    DWORD PTR [rdx],esp
 1005d6e:	add    BYTE PTR [rax],al
 1005d70:	rex.WX add al,0x0
 1005d73:	add    BYTE PTR [rsi],al
 1005d75:	xor    eax,0x44b0000
 1005d7a:	add    BYTE PTR [rax],al
 1005d7c:	add    DWORD PTR [rdx],esp
 1005d7e:	add    BYTE PTR [rax],al
 1005d80:	rex.WXB add al,0x0
 1005d83:	add    BYTE PTR [rsi],al
 1005d85:	xor    eax,0x44c0000
 1005d8a:	add    BYTE PTR [rax],al
 1005d8c:	add    al,0x35
 1005d8e:	add    BYTE PTR [rax],al
 1005d90:	rex.WRB add al,0x0
 1005d93:	add    BYTE PTR [rdx+rbx*2],al
 1005d96:	add    BYTE PTR [rax],al
 1005d98:	rex.WRX add al,0x0
 1005d9b:	add    BYTE PTR [rcx],al
 1005d9d:	and    al,BYTE PTR [rax]
 1005d9f:	add    BYTE PTR [rsi+0x4],cl
 1005da2:	add    BYTE PTR [rax],al
 1005da4:	(bad)  
 1005da5:	xor    eax,0x44f0000
 1005daa:	add    BYTE PTR [rax],al
 1005dac:	add    DWORD PTR [rdx],esp
 1005dae:	add    BYTE PTR [rax],al
 1005db0:	rex.WRXB add al,0x0
 1005db3:	add    BYTE PTR [rsi],al
 1005db5:	xor    eax,0x4500000
 1005dba:	add    BYTE PTR [rax],al
 1005dbc:	add    eax,0x51000015
 1005dc1:	add    al,0x0
 1005dc3:	add    BYTE PTR [rsp+rbx*2],al
 1005dc6:	add    BYTE PTR [rax],al
 1005dc8:	push   rdx
 1005dc9:	add    al,0x0
 1005dcb:	add    BYTE PTR [rbx*2+0x4530000],al
 1005dd2:	add    BYTE PTR [rax],al
 1005dd4:	add    al,0x5e
 1005dd6:	add    BYTE PTR [rax],al
 1005dd8:	push   rsp
 1005dd9:	add    al,0x0
 1005ddb:	add    BYTE PTR [rdi+rbx*2],al
 1005dde:	add    BYTE PTR [rax],al
 1005de0:	push   rsi
 1005de1:	add    al,0x0
 1005de3:	add    BYTE PTR [rip+0x57000008],al        # 0x58005df1
 1005de9:	add    al,0x0
 1005deb:	add    BYTE PTR [rcx],al
 1005ded:	and    al,BYTE PTR [rax]
 1005def:	add    BYTE PTR [rdi+0x4],dl
 1005df2:	add    BYTE PTR [rax],al
 1005df4:	(bad)  
 1005df5:	xor    eax,0x45a0000
 1005dfa:	add    BYTE PTR [rax],al
 1005dfc:	(bad)  
 1005dfd:	cmp    eax,DWORD PTR [rax]
 1005dff:	add    BYTE PTR [rbx+0x4],bl
 1005e02:	add    BYTE PTR [rax],al
 1005e04:	add    al,0x35
 1005e06:	add    BYTE PTR [rax],al
 1005e08:	pop    rbp
 1005e09:	add    al,0x0
 1005e0b:	add    BYTE PTR [rax+rcx*1],al
 1005e0e:	add    BYTE PTR [rax],al
 1005e10:	pop    rsi
 1005e11:	add    al,0x0
 1005e13:	add    BYTE PTR [rax+rcx*1],al
 1005e16:	add    BYTE PTR [rax],al
 1005e18:	(bad)  
 1005e19:	add    al,0x0
 1005e1b:	add    BYTE PTR [rdx+riz*2],al
 1005e1e:	add    BYTE PTR [rax],al
 1005e20:	(bad)  
 1005e21:	add    al,0x0
 1005e23:	add    BYTE PTR [rax+riz*2],al
 1005e26:	add    BYTE PTR [rax],al
 1005e28:	movsxd eax,DWORD PTR [rax+rax*1]
 1005e2b:	add    BYTE PTR [rbx+rbx*2],al
 1005e2e:	add    BYTE PTR [rax],al
 1005e30:	fs add al,0x0
 1005e33:	add    BYTE PTR [rax+rcx*1],al
 1005e36:	add    BYTE PTR [rax],al
 1005e38:	gs add al,0x0
 1005e3b:	add    BYTE PTR [rsi],al
 1005e3d:	cmp    al,0x0
 1005e3f:	add    BYTE PTR [rax+0x4],ch
 1005e42:	add    BYTE PTR [rax],al
 1005e44:	add    al,0x8
 1005e46:	add    BYTE PTR [rax],al
 1005e48:	push   0x4
 1005e4a:	add    BYTE PTR [rax],al
 1005e4c:	add    al,0x8
 1005e4e:	add    BYTE PTR [rax],al
 1005e50:	imul   eax,DWORD PTR [rax+rax*1],0x0
 1005e54:	add    al,0x8
 1005e56:	add    BYTE PTR [rax],al
 1005e58:	ins    BYTE PTR es:[rdi],dx
 1005e59:	add    al,0x0
 1005e5b:	add    BYTE PTR [rax+rcx*1],al
 1005e5e:	add    BYTE PTR [rax],al
 1005e60:	ins    DWORD PTR es:[rdi],dx
 1005e61:	add    al,0x0
 1005e63:	add    BYTE PTR [rsp+rdx*2],al
 1005e66:	add    BYTE PTR [rax],al
 1005e68:	outs   dx,BYTE PTR ds:[rsi]
 1005e69:	add    al,0x0
 1005e6b:	add    BYTE PTR [rax+rcx*1],al
 1005e6e:	add    BYTE PTR [rax],al
 1005e70:	outs   dx,DWORD PTR ds:[rsi]
 1005e71:	add    al,0x0
 1005e73:	add    BYTE PTR [rdi+rax*2],al
 1005e76:	add    BYTE PTR [rax],al
 1005e78:	jo     0x1005e7e
 1005e7a:	add    BYTE PTR [rax],al
 1005e7c:	add    al,0x8
 1005e7e:	add    BYTE PTR [rax],al
 1005e80:	js     0x1005e86
 1005e82:	add    BYTE PTR [rax],al
 1005e84:	add    al,0x8
 1005e86:	add    BYTE PTR [rax],al
 1005e88:	jp     0x1005e8e
 1005e8a:	add    BYTE PTR [rax],al
 1005e8c:	add    al,0x52
 1005e8e:	add    BYTE PTR [rax],al
 1005e90:	jl     0x1005e96
 1005e92:	add    BYTE PTR [rax],al
 1005e94:	add    al,0x3f
 1005e96:	add    BYTE PTR [rax],al
 1005e98:	jle    0x1005e9e
 1005e9a:	add    BYTE PTR [rax],al
 1005e9c:	add    al,0x26
 1005e9e:	add    BYTE PTR [rax],al
 1005ea0:	add    BYTE PTR [rax+rax*1],0x0
 1005ea4:	add    al,0x25
 1005ea6:	add    BYTE PTR [rax],al
 1005ea8:	add    DWORD PTR [rax+rax*1],0x120400
 1005eaf:	add    BYTE PTR [rdx+0x4000004],al
 1005eb5:	or     eax,DWORD PTR [rax]
 1005eb7:	add    BYTE PTR [rbx+0x4000004],al
 1005ebd:	sldt   WORD PTR [rax]
 1005ec0:	test   BYTE PTR [rax+rax*1],al
 1005ec3:	add    BYTE PTR [rax+rcx*1],al
 1005ec6:	add    BYTE PTR [rax],al
 1005ec8:	test   DWORD PTR [rax+rax*1],eax
 1005ecb:	add    BYTE PTR [rsi+rax*1],al
 1005ece:	add    BYTE PTR [rax],al
 1005ed0:	xchg   BYTE PTR [rax+rax*1],al
 1005ed3:	add    BYTE PTR [rax+rbp*1],al
 1005ed6:	add    BYTE PTR [rax],al
 1005ed8:	xchg   DWORD PTR [rax+rax*1],eax
 1005edb:	add    BYTE PTR [rax+rcx*1],al
 1005ede:	add    BYTE PTR [rax],al
 1005ee0:	mov    BYTE PTR [rax+rax*1],al
 1005ee3:	add    BYTE PTR [rbx+rcx*1],al
 1005ee6:	add    BYTE PTR [rax],al
 1005ee8:	mov    WORD PTR [rax+rax*1],es
 1005eeb:	add    BYTE PTR [rdx+rax*1],al
 1005eee:	add    BYTE PTR [rax],al
 1005ef0:	add    BYTE PTR [rax],cl
 1005ef2:	add    BYTE PTR [rax],al
 1005ef4:	add    DWORD PTR [rbx],esp
 1005ef6:	add    BYTE PTR [rax],al
 1005ef8:	add    DWORD PTR [rax],ecx
 1005efa:	add    BYTE PTR [rax],al
 1005efc:	add    eax,0x4000001
 1005f01:	or     BYTE PTR [rax],al
 1005f03:	add    BYTE PTR [rcx],al
 1005f05:	and    al,0x0
 1005f07:	add    BYTE PTR [rax+rcx*1],al
 1005f0a:	add    BYTE PTR [rax],al
 1005f0c:	add    dh,BYTE PTR [rcx]
 1005f0e:	add    BYTE PTR [rax],al
 1005f10:	add    al,0x8
 1005f12:	add    BYTE PTR [rax],al
 1005f14:	add    al,0x43
 1005f16:	add    BYTE PTR [rax],al
 1005f18:	(bad)  
 1005f19:	or     BYTE PTR [rax],al
 1005f1b:	add    BYTE PTR [rip+0x9000008],al        # 0xa005f29
 1005f21:	or     BYTE PTR [rax],al
 1005f23:	add    BYTE PTR [rip+0xa000008],al        # 0xb005f31
 1005f29:	or     BYTE PTR [rax],al
 1005f2b:	add    BYTE PTR [rip+0xc000028],al        # 0xd005f59
 1005f31:	or     BYTE PTR [rax],al
 1005f33:	add    BYTE PTR [rip+0x1000000b],al        # 0x11005f44
 1005f39:	or     BYTE PTR [rax],al
 1005f3b:	add    BYTE PTR [rip+0x13000008],al        # 0x14005f49
 1005f41:	or     BYTE PTR [rax],al
 1005f43:	add    BYTE PTR [rip+0x14000008],al        # 0x15005f51
 1005f49:	or     BYTE PTR [rax],al
 1005f4b:	add    BYTE PTR [rcx],al
 1005f4d:	add    eax,0x8140000
 1005f52:	add    BYTE PTR [rax],al
 1005f54:	add    al,0x4a
 1005f56:	add    BYTE PTR [rax],al
 1005f58:	(bad)  
 1005f59:	or     BYTE PTR [rax],al
 1005f5b:	add    BYTE PTR [rip+0x1a000008],al        # 0x1b005f69
 1005f61:	or     BYTE PTR [rax],al
 1005f63:	add    BYTE PTR [rcx],al
 1005f65:	adc    eax,0x81a0000
 1005f6a:	add    BYTE PTR [rax],al
 1005f6c:	add    al,0x4c
 1005f6e:	add    BYTE PTR [rax],al
 1005f70:	sbb    eax,0x5000008
 1005f75:	or     al,BYTE PTR [rax]
 1005f77:	add    BYTE PTR [rdi],ah
 1005f79:	or     BYTE PTR [rax],al
 1005f7b:	add    BYTE PTR [rcx],al
 1005f7d:	(bad)  
 1005f7e:	add    BYTE PTR [rax],al
 1005f80:	sub    al,0x8
 1005f82:	add    BYTE PTR [rax],al
 1005f84:	add    bh,BYTE PTR [rip+0x82c0000]        # 0x92c5f8a
 1005f8a:	add    BYTE PTR [rax],al
 1005f8c:	add    al,0x64
 1005f8e:	add    BYTE PTR [rax],al
 1005f90:	or     BYTE PTR cs:[rax],al
 1005f93:	add    BYTE PTR [rax+rcx*1],al
 1005f96:	add    BYTE PTR [rax],al
 1005f98:	cmp    ecx,DWORD PTR [rax]
 1005f9a:	add    BYTE PTR [rax],al
 1005f9c:	add    al,0x57
 1005f9e:	add    BYTE PTR [rax],al
 1005fa0:	cmp    al,0x8
 1005fa2:	add    BYTE PTR [rax],al
 1005fa4:	add    al,0x8
 1005fa6:	add    BYTE PTR [rax],al
 1005fa8:	or     BYTE PTR ds:[rax],al
 1005fab:	add    BYTE PTR [rip+0x43000008],al        # 0x44005fb9
 1005fb1:	or     BYTE PTR [rax],al
 1005fb3:	add    BYTE PTR [rip+0x45000015],al        # 0x46005fce
 1005fb9:	or     BYTE PTR [rax],al
 1005fbb:	add    BYTE PTR [rcx+rbx*2],al
 1005fbe:	add    BYTE PTR [rax],al
 1005fc0:	push   rax
 1005fc1:	or     BYTE PTR [rax],al
 1005fc3:	add    BYTE PTR [rdx*1+0x85d0000],al
 1005fca:	add    BYTE PTR [rax],al
 1005fcc:	add    al,0x8
 1005fce:	add    BYTE PTR [rax],al
 1005fd0:	pop    rdi
 1005fd1:	or     BYTE PTR [rax],al
 1005fd3:	add    BYTE PTR [rcx+riz*2],al
 1005fd6:	add    BYTE PTR [rax],al
 1005fd8:	imul   ecx,DWORD PTR [rax],0x0
 1005fdb:	add    BYTE PTR [rax+rcx*1],al
 1005fde:	add    BYTE PTR [rax],al
 1005fe0:	add    DWORD PTR [rax+rax*1],ecx
 1005fe3:	add    BYTE PTR [rip+0x4000001],al        # 0x5005fea
 1005fe9:	or     al,0x0
 1005feb:	add    BYTE PTR [rdx],al
 1005fed:	add    BYTE PTR ds:[rax],al
 1005ff0:	add    al,0xc
 1005ff2:	add    BYTE PTR [rax],al
 1005ff4:	add    al,0x41
 1005ff6:	add    BYTE PTR [rax],al
 1005ff8:	(bad)  
 1005ff9:	or     al,0x0
 1005ffb:	add    BYTE PTR [rip+0x9000008],al        # 0xa006009
 1006001:	or     al,0x0
 1006003:	add    BYTE PTR [rip+0xa000008],al        # 0xb006011
 1006009:	or     al,0x0
 100600b:	add    BYTE PTR [rip+0xc000028],al        # 0xd006039
 1006011:	or     al,0x0
 1006013:	add    BYTE PTR [rip+0x1a00000b],al        # 0x1b006024
 1006019:	or     al,0x0
 100601b:	add    BYTE PTR [rcx],al
 100601d:	adc    eax,0xc1a0000
 1006022:	add    BYTE PTR [rax],al
 1006024:	add    al,0x4d
 1006026:	add    BYTE PTR [rax],al
 1006028:	cmp    ecx,DWORD PTR [rax+rax*1]
 100602b:	add    BYTE PTR [rdi+rdx*2],al
 100602e:	add    BYTE PTR [rax],al
 1006030:	imul   ecx,DWORD PTR [rax+rax*1],0x0
 1006034:	add    al,0x8
 1006036:	add    BYTE PTR [rax],al
 1006038:	add    DWORD PTR [rax],edx
 100603a:	add    BYTE PTR [rax],al
 100603c:	add    eax,0x4000001
 1006041:	adc    BYTE PTR [rax],al
 1006043:	add    BYTE PTR [rcx],al
 1006045:	and    al,0x0
 1006047:	add    BYTE PTR [rax+rdx*1],al
 100604a:	add    BYTE PTR [rax],al
 100604c:	add    dh,BYTE PTR [rcx]
 100604e:	add    BYTE PTR [rax],al
 1006050:	add    al,0x10
 1006052:	add    BYTE PTR [rax],al
 1006054:	add    al,0x43
 1006056:	add    BYTE PTR [rax],al
 1006058:	(bad)  
 1006059:	adc    BYTE PTR [rax],al
 100605b:	add    BYTE PTR [rip+0x9000008],al        # 0xa006069
 1006061:	adc    BYTE PTR [rax],al
 1006063:	add    BYTE PTR [rip+0xa000008],al        # 0xb006071
 1006069:	adc    BYTE PTR [rax],al
 100606b:	add    BYTE PTR [rip+0xc000028],al        # 0xd006099
 1006071:	adc    BYTE PTR [rax],al
 1006073:	add    BYTE PTR [rip+0x1a00000b],al        # 0x1b006084
 1006079:	adc    BYTE PTR [rax],al
 100607b:	add    BYTE PTR [rsi+rdx*1],al
 100607e:	add    BYTE PTR [rax],al
 1006080:	cmp    edx,DWORD PTR [rax]
 1006082:	add    BYTE PTR [rax],al
 1006084:	add    al,0x56
 1006086:	add    BYTE PTR [rax],al
 1006088:	add    DWORD PTR [rax+rax*1],edx
 100608b:	add    BYTE PTR [rip+0x4000001],al        # 0x5006092
 1006091:	adc    al,0x0
 1006093:	add    BYTE PTR [rcx],al
 1006095:	and    al,0x0
 1006097:	add    BYTE PTR [rsp+rdx*1],al
 100609a:	add    BYTE PTR [rax],al
 100609c:	add    dh,BYTE PTR [rcx]
 100609e:	add    BYTE PTR [rax],al
 10060a0:	add    al,0x14
 10060a2:	add    BYTE PTR [rax],al
 10060a4:	add    al,0x45
 10060a6:	add    BYTE PTR [rax],al
 10060a8:	(bad)  
 10060a9:	adc    al,0x0
 10060ab:	add    BYTE PTR [rip+0x9000008],al        # 0xa0060b9
 10060b1:	adc    al,0x0
 10060b3:	add    BYTE PTR [rip+0xa000008],al        # 0xb0060c1
 10060b9:	adc    al,0x0
 10060bb:	add    BYTE PTR [rip+0xc000028],al        # 0xd0060e9
 10060c1:	adc    al,0x0
 10060c3:	add    BYTE PTR [rip+0x1a00000b],al        # 0x1b0060d4
 10060c9:	adc    al,0x0
 10060cb:	add    BYTE PTR [rsi+rcx*2],al
 10060ce:	add    BYTE PTR [rax],al
 10060d0:	cmp    edx,DWORD PTR [rax+rax*1]
 10060d3:	add    BYTE PTR [rdi+rdx*2],al
 10060d6:	add    BYTE PTR [rax],al
 10060d8:	add    DWORD PTR [rax],ebx
 10060da:	add    BYTE PTR [rax],al
 10060dc:	add    eax,0x9000001
 10060e1:	sbb    BYTE PTR [rax],al
 10060e3:	add    BYTE PTR [rip+0xa000008],al        # 0xb0060f1
 10060e9:	sbb    BYTE PTR [rax],al
 10060eb:	add    BYTE PTR [rip+0xc000028],al        # 0xd006119
 10060f1:	sbb    BYTE PTR [rax],al
 10060f3:	add    BYTE PTR [rip+0x1a00000b],al        # 0x1b006104
 10060f9:	sbb    BYTE PTR [rax],al
 10060fb:	add    BYTE PTR [rsp+rcx*2],al
 10060fe:	add    BYTE PTR [rax],al
 1006100:	cmp    ebx,DWORD PTR [rax]
 1006102:	add    BYTE PTR [rax],al
 1006104:	add    al,0x56
 1006106:	add    BYTE PTR [rax],al
 1006108:	add    DWORD PTR [rax+rax*1],ebx
 100610b:	add    BYTE PTR [rip+0x9000001],al        # 0xa006112
 1006111:	sbb    al,0x0
 1006113:	add    BYTE PTR [rip+0xa000008],al        # 0xb006121
 1006119:	sbb    al,0x0
 100611b:	add    BYTE PTR [rip+0x1a000028],al        # 0x1b006149
 1006121:	sbb    al,0x0
 1006123:	add    BYTE PTR [rcx*2+0x1c3b0000],al
 100612a:	add    BYTE PTR [rax],al
 100612c:	add    al,0x57
 100612e:	add    BYTE PTR [rax],al
 1006130:	add    DWORD PTR [rax],esp
 1006132:	add    BYTE PTR [rax],al
 1006134:	add    eax,0x9000001
 1006139:	and    BYTE PTR [rax],al
 100613b:	add    BYTE PTR [rip+0xa000008],al        # 0xb006149
 1006141:	and    BYTE PTR [rax],al
 1006143:	add    BYTE PTR [rip+0x1a000028],al        # 0x1b006171
 1006149:	and    BYTE PTR [rax],al
 100614b:	add    BYTE PTR [rdi+rcx*2],al
 100614e:	add    BYTE PTR [rax],al
 1006150:	cmp    esp,DWORD PTR [rax]
 1006152:	add    BYTE PTR [rax],al
 1006154:	add    al,0x57
 1006156:	add    BYTE PTR [rax],al
 1006158:	add    DWORD PTR [rax+rax*1],esp
 100615b:	add    BYTE PTR [rip+0x9000001],al        # 0xa006162
 1006161:	and    al,0x0
 1006163:	add    BYTE PTR [rip+0xa000008],al        # 0xb006171
 1006169:	and    al,0x0
 100616b:	add    BYTE PTR [rip+0x3b000028],al        # 0x3c006199
 1006171:	and    al,0x0
 1006173:	add    BYTE PTR [rdi+rdx*2],al
 1006176:	add    BYTE PTR [rax],al
 1006178:	add    DWORD PTR [rax],ebp
 100617a:	add    BYTE PTR [rax],al
 100617c:	add    eax,0x9000001
 1006181:	sub    BYTE PTR [rax],al
 1006183:	add    BYTE PTR [rip+0xa000008],al        # 0xb006191
 1006189:	sub    BYTE PTR [rax],al
 100618b:	add    BYTE PTR [rip+0x1000028],al        # 0x20061b9
 1006191:	sub    al,0x0
 1006193:	add    BYTE PTR [rip+0x9000001],al        # 0xa00619a
 1006199:	sub    al,0x0
 100619b:	add    BYTE PTR [rip+0xa000008],al        # 0xb0061a9
 10061a1:	sub    al,0x0
 10061a3:	add    BYTE PTR [rip+0x1000028],al        # 0x20061d1
 10061a9:	xor    BYTE PTR [rax],al
 10061ab:	add    BYTE PTR [rip+0x9000001],al        # 0xa0061b2
 10061b1:	xor    BYTE PTR [rax],al
 10061b3:	add    BYTE PTR [rip+0xa000008],al        # 0xb0061c1
 10061b9:	xor    BYTE PTR [rax],al
 10061bb:	add    BYTE PTR [rip+0x1000028],al        # 0x20061e9
 10061c1:	xor    al,0x0
 10061c3:	add    BYTE PTR [rip+0x9000001],al        # 0xa0061ca
 10061c9:	xor    al,0x0
 10061cb:	add    BYTE PTR [rip+0xa000008],al        # 0xb0061d9
 10061d1:	xor    al,0x0
 10061d3:	add    BYTE PTR [rip+0x1000028],al        # 0x2006201
 10061d9:	cmp    BYTE PTR [rax],al
 10061db:	add    BYTE PTR [rip+0xa000001],al        # 0xb0061e2
 10061e1:	cmp    BYTE PTR [rax],al
 10061e3:	add    BYTE PTR [rip+0x1000028],al        # 0x2006211
 10061e9:	cmp    al,0x0
 10061eb:	add    BYTE PTR [rip+0xa000001],al        # 0xb0061f2
 10061f1:	cmp    al,0x0
 10061f3:	add    BYTE PTR [rip+0x1000028],al        # 0x2006221
 10061f9:	add    BYTE PTR [rax],al
 10061fc:	add    eax,0x9000001
 1006201:	add    BYTE PTR [rax],al
 1006204:	add    al,0x8
 1006206:	add    BYTE PTR [rax],al
 1006208:	or     al,BYTE PTR [rax+0x0]
 100620b:	add    BYTE PTR [rip+0x9000028],al        # 0xa006239
 1006211:	add    BYTE PTR [rax],r8b
 1006214:	add    al,0x8
 1006216:	add    BYTE PTR [rax],al
 1006218:	or     al,BYTE PTR [rax+rax*1+0x0]
 100621c:	add    eax,0x9000028
 1006221:	rex.W add BYTE PTR [rax],al
 1006224:	add    al,0x8
 1006226:	add    BYTE PTR [rax],al
 1006228:	or     cl,BYTE PTR [rax+0x0]
 100622b:	add    BYTE PTR [rip+0xa000028],al        # 0xb006259
 1006231:	rex.WR add BYTE PTR [rax],r8b
 1006234:	add    eax,0xa000028
 1006239:	push   rax
 100623a:	add    BYTE PTR [rax],al
 100623c:	add    eax,0xa000028
 1006241:	push   rsp
 1006242:	add    BYTE PTR [rax],al
 1006244:	add    al,0x8
 1006246:	add    BYTE PTR [rax],al
 1006248:	(bad)  
 1006249:	add    al,0x1
 100624b:	add    BYTE PTR [rip+0xe000029],al        # 0xf00627a
 1006251:	add    al,0x1
 1006253:	add    BYTE PTR [rip+0x1100002a],al        # 0x12006283
 1006259:	add    al,0x1
 100625b:	add    BYTE PTR [rcx],al
 100625d:	sub    eax,DWORD PTR [rax]
 100625f:	add    BYTE PTR [rdx],dl
 1006261:	add    al,0x1
 1006263:	add    BYTE PTR [rcx],al
 1006265:	sub    al,0x0
 1006267:	add    BYTE PTR [rdi],dh
 1006269:	add    al,0x1
 100626b:	add    BYTE PTR [rip+0x400002d],al        # 0x500629e
 1006271:	or     BYTE PTR [rdx],al
 1006273:	add    BYTE PTR [rcx],al
 1006275:	add    BYTE PTR cs:[rax],al
 1006278:	add    al,0x8
 100627a:	add    al,BYTE PTR [rax]
 100627c:	add    dh,BYTE PTR [rdx]
 100627e:	add    BYTE PTR [rax],al
 1006280:	add    al,0x8
 1006282:	add    al,BYTE PTR [rax]
 1006284:	add    al,0x44
 1006286:	add    BYTE PTR [rax],al
 1006288:	add    al,0x10
 100628a:	add    al,BYTE PTR [rax]
 100628c:	add    DWORD PTR [rsi],ebp
 100628e:	add    BYTE PTR [rax],al
 1006290:	add    al,0x10
 1006292:	add    al,BYTE PTR [rax]
 1006294:	add    dh,BYTE PTR [rdx]
 1006296:	add    BYTE PTR [rax],al
 1006298:	add    al,0x10
 100629a:	add    al,BYTE PTR [rax]
 100629c:	add    al,0x44
 100629e:	add    BYTE PTR [rax],al
 10062a0:	add    al,0x14
 10062a2:	add    al,BYTE PTR [rax]
 10062a4:	add    DWORD PTR [rsi],ebp
 10062a6:	add    BYTE PTR [rax],al
 10062a8:	add    al,0x14
 10062aa:	add    al,BYTE PTR [rax]
 10062ac:	add    dh,BYTE PTR [rdx]
 10062ae:	add    BYTE PTR [rax],al
 10062b0:	add    al,0x14
 10062b2:	add    al,BYTE PTR [rax]
 10062b4:	add    al,0x46
 10062b6:	add    BYTE PTR [rax],al
 10062b8:	add    al,0x4
 10062ba:	add    eax,DWORD PTR [rax]
 10062bc:	add    DWORD PTR [rdi],ebp
 10062be:	add    BYTE PTR [rax],al
 10062c0:	add    al,0x4
 10062c2:	add    eax,DWORD PTR [rax]
 10062c4:	add    dh,BYTE PTR [rbx]
 10062c6:	add    BYTE PTR [rax],al
 10062c8:	add    al,0x4
 10062ca:	add    eax,DWORD PTR [rax]
 10062cc:	add    al,0x42
 10062ce:	add    BYTE PTR [rax],al
 10062d0:	adc    DWORD PTR [rsp+rax*1],eax
 10062d3:	add    BYTE PTR [rcx+rcx*2],al
	...
 10062f6:	add    BYTE PTR [rax],al
 10062f8:	add    DWORD PTR [rax],eax
 10062fa:	add    BYTE PTR [rax],al
 10062fc:	add    BYTE PTR [rax],al
 10062fe:	add    BYTE PTR [rax],al
 1006300:	add    DWORD PTR [rax+rax*1],eax
 1006303:	add    BYTE PTR [rax],al
 1006305:	add    BYTE PTR [rax],al
 1006307:	add    BYTE PTR [rax],al
 1006309:	jge    0x100630b
 100630b:	add    DWORD PTR [rax],eax
 100630d:	add    BYTE PTR [rax],al
 100630f:	add    al,ch
 1006311:	add    al,0x0
 1006313:	add    BYTE PTR [rax],al
 1006315:	add    BYTE PTR [rax],al
 1006317:	add    BYTE PTR [rip+0x0],al        # 0x100631d
 100631d:	add    BYTE PTR [rax],al
 100631f:	add    BYTE PTR [rsp+rax*1+0x0],cl
 1006326:	add    BYTE PTR [rax],al
 1006328:	adc    BYTE PTR [rbp+0x0],bh
 100632b:	add    DWORD PTR [rax],eax
 100632d:	add    BYTE PTR [rax],al
 100632f:	add    al,ch
 1006331:	add    al,0x0
 1006333:	add    BYTE PTR [rax],al
 1006335:	add    BYTE PTR [rax],al
 1006337:	add    BYTE PTR [rax+rax*1],al
 100633a:	add    BYTE PTR [rax],al
 100633c:	add    BYTE PTR [rax],al
 100633e:	add    BYTE PTR [rax],al
 1006340:	add    al,0x4
 1006342:	add    BYTE PTR [rax],al
 1006344:	add    BYTE PTR [rax],al
 1006346:	add    BYTE PTR [rax],al
 1006348:	and    BYTE PTR [rbp+0x0],bh
 100634b:	add    DWORD PTR [rax],eax
 100634d:	add    BYTE PTR [rax],al
 100634f:	add    BYTE PTR [rsi+0x3],dh
 1006355:	add    BYTE PTR [rax],al
 1006357:	add    BYTE PTR [rcx],al
 1006359:	add    BYTE PTR [rax],al
 100635b:	add    BYTE PTR [rax],al
 100635d:	add    BYTE PTR [rax],al
 100635f:	add    BYTE PTR [rip+0x4],al        # 0x1006369
 1006365:	add    BYTE PTR [rax],al
 1006367:	add    BYTE PTR [rax+0x7d],dl
 100636a:	add    BYTE PTR [rcx],al
 100636c:	add    BYTE PTR [rax],al
 100636e:	add    BYTE PTR [rax],al
 1006370:	loop   0x1006376
 1006372:	add    BYTE PTR [rax],al
 1006374:	add    BYTE PTR [rax],al
 1006376:	add    BYTE PTR [rax],al
 1006378:	add    eax,0x0
 100637d:	add    BYTE PTR [rax],al
 100637f:	add    BYTE PTR [rsi],al
 1006381:	add    al,0x0
 1006383:	add    BYTE PTR [rax],al
 1006385:	add    BYTE PTR [rax],al
 1006387:	add    BYTE PTR [rax+0x7d],ah
 100638a:	add    BYTE PTR [rcx],al
 100638c:	add    BYTE PTR [rax],al
 100638e:	add    BYTE PTR [rax],al
 1006390:	in     al,0x4
 1006392:	add    BYTE PTR [rax],al
 1006394:	add    BYTE PTR [rax],al
 1006396:	add    BYTE PTR [rax],al
 1006398:	add    DWORD PTR [rax],eax
 100639a:	add    BYTE PTR [rax],al
 100639c:	add    BYTE PTR [rax],al
 100639e:	add    BYTE PTR [rax],al
 10063a0:	test   DWORD PTR [rax+rax*1],eax
 10063a3:	add    BYTE PTR [rax],al
 10063a5:	add    BYTE PTR [rax],al
 10063a7:	add    BYTE PTR [rax+0x1007d],cl
 10063ad:	add    BYTE PTR [rax],al
 10063af:	add    bl,ah
 10063b1:	add    al,0x0
 10063b3:	add    BYTE PTR [rax],al
 10063b5:	add    BYTE PTR [rax],al
 10063b7:	add    BYTE PTR [rax+rax*1],al
 10063ba:	add    BYTE PTR [rax],al
 10063bc:	add    BYTE PTR [rax],al
 10063be:	add    BYTE PTR [rax],al
 10063c0:	or     BYTE PTR [rax+rax*1],al
 10063c3:	add    BYTE PTR [rax],al
 10063c5:	add    BYTE PTR [rax],al
 10063c7:	add    BYTE PTR [rax+0x1007d],bl
 10063cd:	add    BYTE PTR [rax],al
 10063cf:	add    ch,ah
 10063d1:	add    al,0x0
 10063d3:	add    BYTE PTR [rax],al
 10063d5:	add    BYTE PTR [rax],al
 10063d7:	add    BYTE PTR [rip+0x0],al        # 0x10063dd
 10063dd:	add    BYTE PTR [rax],al
 10063df:	add    BYTE PTR [rcx],cl
 10063e1:	add    al,0x0
 10063e3:	add    BYTE PTR [rax],al
 10063e5:	add    BYTE PTR [rax],al
 10063e7:	add    BYTE PTR [rax+0x1007d],ch
 10063ed:	add    BYTE PTR [rax],al
 10063ef:	add    ah,ah
 10063f1:	add    al,0x0
 10063f3:	add    BYTE PTR [rax],al
 10063f5:	add    BYTE PTR [rax],al
 10063f7:	add    BYTE PTR [rip+0x0],al        # 0x10063fd
 10063fd:	add    BYTE PTR [rax],al
 10063ff:	add    BYTE PTR [rdx],cl
 1006401:	add    al,0x0
 1006403:	add    BYTE PTR [rax],al
 1006405:	add    BYTE PTR [rax],al
 1006407:	add    al,cl
 1006409:	jge    0x100640b
 100640b:	add    DWORD PTR [rax],eax
 100640d:	add    BYTE PTR [rax],al
 100640f:	add    ah,ah
 1006411:	add    al,0x0
 1006413:	add    BYTE PTR [rax],al
 1006415:	add    BYTE PTR [rax],al
 1006417:	add    BYTE PTR [rip+0x0],al        # 0x100641d
 100641d:	add    BYTE PTR [rax],al
 100641f:	add    BYTE PTR [rbx],cl
 1006421:	add    al,0x0
 1006423:	add    BYTE PTR [rax],al
 1006425:	add    BYTE PTR [rax],al
 1006427:	add    al,dh
 1006429:	jge    0x100642b
 100642b:	add    DWORD PTR [rax],eax
 100642d:	add    BYTE PTR [rax],al
 100642f:	add    ah,ah
 1006431:	add    al,0x0
 1006433:	add    BYTE PTR [rax],al
 1006435:	add    BYTE PTR [rax],al
 1006437:	add    BYTE PTR [rip+0x0],al        # 0x100643d
 100643d:	add    BYTE PTR [rax],al
 100643f:	add    BYTE PTR [rsp+rax*1],cl
 1006442:	add    BYTE PTR [rax],al
 1006444:	add    BYTE PTR [rax],al
 1006446:	add    BYTE PTR [rax],al
 1006448:	adc    BYTE PTR [rsi+0x0],bh
 100644b:	add    DWORD PTR [rax],eax
 100644d:	add    BYTE PTR [rax],al
 100644f:	add    ah,ah
 1006451:	add    al,0x0
 1006453:	add    BYTE PTR [rax],al
 1006455:	add    BYTE PTR [rax],al
 1006457:	add    BYTE PTR [rip+0x0],al        # 0x100645d
 100645d:	add    BYTE PTR [rax],al
 100645f:	add    BYTE PTR [rip+0x4],cl        # 0x1006469
 1006465:	add    BYTE PTR [rax],al
 1006467:	add    BYTE PTR [rax],ah
 1006469:	jle    0x100646b
 100646b:	add    DWORD PTR [rax],eax
 100646d:	add    BYTE PTR [rax],al
 100646f:	add    bh,ah
 1006471:	add    al,0x0
 1006473:	add    BYTE PTR [rax],al
 1006475:	add    BYTE PTR [rax],al
 1006477:	add    BYTE PTR [rip+0x0],al        # 0x100647d
 100647d:	add    BYTE PTR [rax],al
 100647f:	add    BYTE PTR [rsi],cl
 1006481:	add    al,0x0
 1006483:	add    BYTE PTR [rax],al
 1006485:	add    BYTE PTR [rax],al
 1006487:	add    BYTE PTR [rax],dh
 1006489:	jle    0x100648b
 100648b:	add    DWORD PTR [rax],eax
 100648d:	add    BYTE PTR [rax],al
 100648f:	add    dl,ah
 1006491:	add    al,0x0
 1006493:	add    BYTE PTR [rax],al
 1006495:	add    BYTE PTR [rax],al
 1006497:	add    BYTE PTR [rip+0x0],al        # 0x100649d
 100649d:	add    BYTE PTR [rax],al
 100649f:	add    BYTE PTR [rdi],cl
 10064a1:	add    al,0x0
 10064a3:	add    BYTE PTR [rax],al
 10064a5:	add    BYTE PTR [rax],al
 10064a7:	add    BYTE PTR [rax+0x7e],cl
 10064aa:	add    BYTE PTR [rcx],al
 10064ac:	add    BYTE PTR [rax],al
 10064ae:	add    BYTE PTR [rax],al
 10064b0:	in     al,0x4
 10064b2:	add    BYTE PTR [rax],al
 10064b4:	add    BYTE PTR [rax],al
 10064b6:	add    BYTE PTR [rax],al
 10064b8:	add    eax,0x0
 10064bd:	add    BYTE PTR [rax],al
 10064bf:	add    BYTE PTR [rbx+0x4],al
 10064c5:	add    BYTE PTR [rax],al
 10064c7:	add    BYTE PTR [rax+0x7e],ah
 10064ca:	add    BYTE PTR [rcx],al
 10064cc:	add    BYTE PTR [rax],al
 10064ce:	add    BYTE PTR [rax],al
 10064d0:	in     al,0x4
 10064d2:	add    BYTE PTR [rax],al
 10064d4:	add    BYTE PTR [rax],al
 10064d6:	add    BYTE PTR [rax],al
 10064d8:	add    al,0x0
 10064da:	add    BYTE PTR [rax],al
 10064dc:	add    BYTE PTR [rax],al
 10064de:	add    BYTE PTR [rax],al
 10064e0:	adc    DWORD PTR [rax+rax*1],eax
 10064e3:	add    BYTE PTR [rax],al
 10064e5:	add    BYTE PTR [rax],al
 10064e7:	add    BYTE PTR [rax+0x7e],bh
 10064ea:	add    BYTE PTR [rcx],al
 10064ec:	add    BYTE PTR [rax],al
 10064ee:	add    BYTE PTR [rax],al
 10064f0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10064f1:	add    eax,DWORD PTR [rax]
 10064f3:	add    BYTE PTR [rax],al
 10064f5:	add    BYTE PTR [rax],al
 10064f7:	add    BYTE PTR [rcx],al
 10064f9:	add    BYTE PTR [rax],al
 10064fb:	add    BYTE PTR [rax],al
 10064fd:	add    BYTE PTR [rax],al
 10064ff:	add    BYTE PTR [rdx],dl
 1006501:	add    al,0x0
 1006503:	add    BYTE PTR [rax],al
 1006505:	add    BYTE PTR [rax],al
 1006507:	add    BYTE PTR [rax+0x1007e],dl
 100650d:	add    BYTE PTR [rax],al
 100650f:	add    BYTE PTR [rbp+0x3],dh
 1006515:	add    BYTE PTR [rax],al
 1006517:	add    BYTE PTR [rcx],al
 1006519:	add    BYTE PTR [rax],al
 100651b:	add    BYTE PTR [rax],al
 100651d:	add    BYTE PTR [rax],al
 100651f:	add    BYTE PTR [rcx+0x4],al
 1006525:	add    BYTE PTR [rax],al
 1006527:	add    BYTE PTR [rax+0x1007e],dh
	...
 1006535:	add    BYTE PTR [rax],al
 1006537:	add    BYTE PTR [rax+rax*1],al
 100653a:	add    BYTE PTR [rax],al
 100653c:	add    BYTE PTR [rax],al
 100653e:	add    BYTE PTR [rax],al
 1006540:	adc    eax,0x4
 1006545:	add    BYTE PTR [rax],al
 1006547:	add    al,al
 1006549:	jle    0x100654b
 100654b:	add    DWORD PTR [rax],eax
 100654d:	add    BYTE PTR [rax],al
 100654f:	add    dl,ah
 1006551:	add    al,0x0
 1006553:	add    BYTE PTR [rax],al
 1006555:	add    BYTE PTR [rax],al
 1006557:	add    BYTE PTR [rip+0x0],al        # 0x100655d
 100655d:	add    BYTE PTR [rax],al
 100655f:	add    BYTE PTR [rax],bl
 1006561:	add    al,0x0
 1006563:	add    BYTE PTR [rax],al
 1006565:	add    BYTE PTR [rax],al
 1006567:	add    al,dl
 1006569:	jle    0x100656b
 100656b:	add    DWORD PTR [rax],eax
 100656d:	add    BYTE PTR [rax],al
 100656f:	add    dl,ah
 1006571:	add    al,0x0
 1006573:	add    BYTE PTR [rax],al
 1006575:	add    BYTE PTR [rax],al
 1006577:	add    BYTE PTR [rip+0x0],al        # 0x100657d
 100657d:	add    BYTE PTR [rax],al
 100657f:	add    BYTE PTR [rcx],bl
 1006581:	add    al,0x0
 1006583:	add    BYTE PTR [rax],al
 1006585:	add    BYTE PTR [rax],al
 1006587:	add    al,ch
 1006589:	jle    0x100658b
 100658b:	add    DWORD PTR [rax],eax
 100658d:	add    BYTE PTR [rax],al
 100658f:	add    bl,ah
 1006591:	add    al,0x0
 1006593:	add    BYTE PTR [rax],al
 1006595:	add    BYTE PTR [rax],al
 1006597:	add    BYTE PTR [rip+0x0],al        # 0x100659d
 100659d:	add    BYTE PTR [rax],al
 100659f:	add    BYTE PTR [rdx],bl
 10065a1:	add    al,0x0
 10065a3:	add    BYTE PTR [rax],al
 10065a5:	add    BYTE PTR [rax],al
 10065a7:	add    BYTE PTR [rax],dl
 10065a9:	jg     0x10065ab
 10065ab:	add    DWORD PTR [rax],eax
 10065ad:	add    BYTE PTR [rax],al
 10065af:	add    dl,ah
 10065b1:	add    al,0x0
 10065b3:	add    BYTE PTR [rax],al
 10065b5:	add    BYTE PTR [rax],al
 10065b7:	add    BYTE PTR [rip+0x0],al        # 0x10065bd
 10065bd:	add    BYTE PTR [rax],al
 10065bf:	add    BYTE PTR [rbx],bl
 10065c1:	add    al,0x0
 10065c3:	add    BYTE PTR [rax],al
 10065c5:	add    BYTE PTR [rax],al
 10065c7:	add    BYTE PTR [rax],ch
 10065c9:	jg     0x10065cb
 10065cb:	add    DWORD PTR [rax],eax
 10065cd:	add    BYTE PTR [rax],al
 10065cf:	add    dl,ah
 10065d1:	add    al,0x0
 10065d3:	add    BYTE PTR [rax],al
 10065d5:	add    BYTE PTR [rax],al
 10065d7:	add    BYTE PTR [rip+0x0],al        # 0x10065dd
 10065dd:	add    BYTE PTR [rax],al
 10065df:	add    BYTE PTR [rsp+rax*1],bl
 10065e2:	add    BYTE PTR [rax],al
 10065e4:	add    BYTE PTR [rax],al
 10065e6:	add    BYTE PTR [rax],al
 10065e8:	cmp    BYTE PTR [rdi+0x0],bh
 10065eb:	add    DWORD PTR [rax],eax
 10065ed:	add    BYTE PTR [rax],al
 10065ef:	add    dl,ah
 10065f1:	add    al,0x0
 10065f3:	add    BYTE PTR [rax],al
 10065f5:	add    BYTE PTR [rax],al
 10065f7:	add    BYTE PTR [rip+0x0],al        # 0x10065fd
 10065fd:	add    BYTE PTR [rax],al
 10065ff:	add    BYTE PTR [rsi],bl
 1006601:	add    al,0x0
 1006603:	add    BYTE PTR [rax],al
 1006605:	add    BYTE PTR [rax],al
 1006607:	add    BYTE PTR [rax+0x7f],dl
 100660a:	add    BYTE PTR [rcx],al
 100660c:	add    BYTE PTR [rax],al
 100660e:	add    BYTE PTR [rax],al
 1006610:	push   0x3
 1006612:	add    BYTE PTR [rax],al
 1006614:	add    BYTE PTR [rax],al
 1006616:	add    BYTE PTR [rax],al
 1006618:	add    eax,0x0
 100661d:	add    BYTE PTR [rax],al
 100661f:	add    BYTE PTR [rdi],bl
 1006621:	add    al,0x0
 1006623:	add    BYTE PTR [rax],al
 1006625:	add    BYTE PTR [rax],al
 1006627:	add    BYTE PTR [rax+0x7f],ah
 100662a:	add    BYTE PTR [rcx],al
 100662c:	add    BYTE PTR [rax],al
 100662e:	add    BYTE PTR [rax],al
 1006630:	out    0x4,al
 1006632:	add    BYTE PTR [rax],al
 1006634:	add    BYTE PTR [rax],al
 1006636:	add    BYTE PTR [rax],al
 1006638:	add    eax,0x0
 100663d:	add    BYTE PTR [rax],al
 100663f:	add    BYTE PTR [rdx],ah
 1006641:	add    al,0x0
 1006643:	add    BYTE PTR [rax],al
 1006645:	add    BYTE PTR [rax],al
 1006647:	add    BYTE PTR [rax+0x7f],dh
 100664a:	add    BYTE PTR [rcx],al
 100664c:	add    BYTE PTR [rax],al
 100664e:	add    BYTE PTR [rax],al
 1006650:	jrcxz  0x1006656
 1006652:	add    BYTE PTR [rax],al
 1006654:	add    BYTE PTR [rax],al
 1006656:	add    BYTE PTR [rax],al
 1006658:	add    eax,0x0
 100665d:	add    BYTE PTR [rax],al
 100665f:	add    BYTE PTR [rsp+rax*1],ah
 1006662:	add    BYTE PTR [rax],al
 1006664:	add    BYTE PTR [rax],al
 1006666:	add    BYTE PTR [rax],al
 1006668:	mov    BYTE PTR [rdi+0x0],bh
 100666b:	add    DWORD PTR [rax],eax
 100666d:	add    BYTE PTR [rax],al
 100666f:	add    dl,ah
 1006671:	add    al,0x0
 1006673:	add    BYTE PTR [rax],al
 1006675:	add    BYTE PTR [rax],al
 1006677:	add    BYTE PTR [rip+0x0],al        # 0x100667d
 100667d:	add    BYTE PTR [rax],al
 100667f:	add    BYTE PTR [rip+0x4],ah        # 0x1006689
 1006685:	add    BYTE PTR [rax],al
 1006687:	add    BYTE PTR [rax+0x1007f],ah
 100668d:	add    BYTE PTR [rax],al
 100668f:	add    cl,ch
 1006691:	add    al,0x0
 1006693:	add    BYTE PTR [rax],al
 1006695:	add    BYTE PTR [rax],al
 1006697:	add    BYTE PTR [rip+0x0],al        # 0x100669d
 100669d:	add    BYTE PTR [rax],al
 100669f:	add    BYTE PTR [rsi],ah
 10066a1:	add    al,0x0
 10066a3:	add    BYTE PTR [rax],al
 10066a5:	add    BYTE PTR [rax],al
 10066a7:	add    BYTE PTR [rax+0x1007f],bh
 10066ad:	add    BYTE PTR [rax],al
 10066af:	add    cl,ch
 10066b1:	add    al,0x0
 10066b3:	add    BYTE PTR [rax],al
 10066b5:	add    BYTE PTR [rax],al
 10066b7:	add    BYTE PTR [rip+0x0],al        # 0x10066bd
 10066bd:	add    BYTE PTR [rax],al
 10066bf:	add    BYTE PTR [rdi],ah
 10066c1:	add    al,0x0
 10066c3:	add    BYTE PTR [rax],al
 10066c5:	add    BYTE PTR [rax],al
 10066c7:	add    al,cl
 10066c9:	jg     0x10066cb
 10066cb:	add    DWORD PTR [rax],eax
 10066cd:	add    BYTE PTR [rax],al
 10066cf:	add    cl,ch
 10066d1:	add    al,0x0
 10066d3:	add    BYTE PTR [rax],al
 10066d5:	add    BYTE PTR [rax],al
 10066d7:	add    BYTE PTR [rip+0x0],al        # 0x10066dd
 10066dd:	add    BYTE PTR [rax],al
 10066df:	add    BYTE PTR [rdx],ch
 10066e1:	add    al,0x0
 10066e3:	add    BYTE PTR [rax],al
 10066e5:	add    BYTE PTR [rax],al
 10066e7:	add    al,ah
 10066e9:	jg     0x10066eb
 10066eb:	add    DWORD PTR [rax],eax
 10066ed:	add    BYTE PTR [rax],al
 10066ef:	add    dl,ch
 10066f1:	add    al,0x0
 10066f3:	add    BYTE PTR [rax],al
 10066f5:	add    BYTE PTR [rax],al
 10066f7:	add    BYTE PTR [rip+0x0],al        # 0x10066fd
 10066fd:	add    BYTE PTR [rax],al
 10066ff:	add    BYTE PTR [rdi],ch
 1006701:	add    al,0x0
 1006703:	add    BYTE PTR [rax],al
 1006705:	add    BYTE PTR [rax],al
 1006707:	add    al,bh
 1006709:	jg     0x100670b
 100670b:	add    DWORD PTR [rax],eax
 100670d:	add    BYTE PTR [rax],al
 100670f:	add    bl,ah
 1006711:	add    al,0x0
 1006713:	add    BYTE PTR [rcx],al
 1006715:	add    BYTE PTR [rax],al
 1006717:	add    BYTE PTR [rcx],al
 1006719:	add    BYTE PTR [rax],al
 100671b:	add    BYTE PTR [rax],al
 100671d:	add    BYTE PTR [rax],al
 100671f:	add    BYTE PTR [rcx],bh
 1006721:	add    al,0x0
 1006723:	add    BYTE PTR [rax],al
 1006725:	add    BYTE PTR [rax],al
 1006727:	add    BYTE PTR [rax],dl
 1006729:	add    BYTE PTR [rax],0x1
	...
 1006734:	add    DWORD PTR [rax],eax
 1006736:	add    BYTE PTR [rax],al
 1006738:	add    DWORD PTR [rax],eax
 100673a:	add    BYTE PTR [rax],al
 100673c:	add    BYTE PTR [rax],al
 100673e:	add    BYTE PTR [rax],al
 1006740:	add    BYTE PTR [rax],cl
	...
 1006756:	add    BYTE PTR [rax],al
 1006758:	add    DWORD PTR [rax],eax
 100675a:	add    BYTE PTR [rax],al
 100675c:	add    BYTE PTR [rax],al
 100675e:	add    BYTE PTR [rax],al
 1006760:	add    al,0x8
 1006762:	add    BYTE PTR [rax],al
 1006764:	add    BYTE PTR [rax],al
 1006766:	add    BYTE PTR [rax],al
 1006768:	and    BYTE PTR [rax+0x100],al
 100676e:	add    BYTE PTR [rax],al
 1006770:	test   al,0x3
 1006772:	add    BYTE PTR [rax],al
 1006774:	add    BYTE PTR [rax],al
 1006776:	add    BYTE PTR [rax],al
 1006778:	add    DWORD PTR [rax],eax
 100677a:	add    BYTE PTR [rax],al
 100677c:	add    BYTE PTR [rax],al
 100677e:	add    BYTE PTR [rax],al
 1006780:	add    BYTE PTR [rax+rax*1],0x0
 1006784:	add    BYTE PTR [rax],al
 1006786:	add    BYTE PTR [rax],al
 1006788:	cmp    BYTE PTR [rax+0x100],al
 100678e:	add    BYTE PTR [rax],al
 1006790:	call   0x1006799
 1006795:	add    BYTE PTR [rax],al
 1006797:	add    BYTE PTR [rax+rax*1],al
 100679a:	add    BYTE PTR [rax],al
 100679c:	add    BYTE PTR [rax],al
 100679e:	add    BYTE PTR [rax],al
 10067a0:	jle    0x10067a6
 10067a2:	add    BYTE PTR [rax],al
 10067a4:	add    BYTE PTR [rax],al
 10067a6:	add    BYTE PTR [rax],al
 10067a8:	rex.W add BYTE PTR [rax],0x1
 10067ac:	add    BYTE PTR [rax],al
 10067ae:	add    BYTE PTR [rax],al
 10067b0:	in     al,0x4
 10067b2:	add    BYTE PTR [rax],al
 10067b4:	add    BYTE PTR [rax],al
 10067b6:	add    BYTE PTR [rax],al
 10067b8:	add    al,0x0
 10067ba:	add    BYTE PTR [rax],al
 10067bc:	add    BYTE PTR [rax],al
 10067be:	add    BYTE PTR [rax],al
 10067c0:	(bad)  
 10067c1:	or     BYTE PTR [rax],al
 10067c3:	add    BYTE PTR [rax],al
 10067c5:	add    BYTE PTR [rax],al
 10067c7:	add    BYTE PTR [rax-0x80],bl
 10067ca:	add    BYTE PTR [rcx],al
 10067cc:	add    BYTE PTR [rax],al
 10067ce:	add    BYTE PTR [rax],al
 10067d0:	jmp    0x20067d9
 10067d5:	add    BYTE PTR [rax],al
 10067d7:	add    BYTE PTR [rcx],al
 10067d9:	add    BYTE PTR [rax],al
 10067db:	add    BYTE PTR [rax],al
 10067dd:	add    BYTE PTR [rax],al
 10067df:	add    BYTE PTR [rdx],cl
 10067e1:	or     al,0x0
 10067e3:	add    BYTE PTR [rax],al
 10067e5:	add    BYTE PTR [rax],al
 10067e7:	add    BYTE PTR [rax+0x10080],al
 10067ed:	add    BYTE PTR [rax],al
 10067ef:	add    ah,ah
 10067f1:	add    al,0x0
 10067f3:	add    BYTE PTR [rax],al
 10067f5:	add    BYTE PTR [rax],al
 10067f7:	add    BYTE PTR [rip+0x0],al        # 0x10067fd
 10067fd:	add    BYTE PTR [rax],al
 10067ff:	add    BYTE PTR [rdi],al
 1006801:	add    al,0x1
 1006803:	add    BYTE PTR [rax],al
 1006805:	add    BYTE PTR [rax],al
 1006807:	add    BYTE PTR [rax+0x10080],ah
 100680d:	add    BYTE PTR [rax],al
 100680f:	add    ah,ah
 1006811:	add    al,0x0
 1006813:	add    BYTE PTR [rax],al
 1006815:	add    BYTE PTR [rax],al
 1006817:	add    BYTE PTR [rip+0x0],al        # 0x100681d
 100681d:	add    BYTE PTR [rax],al
 100681f:	add    BYTE PTR [rsi],cl
 1006821:	add    al,0x1
 1006823:	add    BYTE PTR [rax],al
 1006825:	add    BYTE PTR [rax],al
 1006827:	add    al,cl
 1006829:	add    BYTE PTR [rax],0x1
 100682c:	add    BYTE PTR [rax],al
 100682e:	add    BYTE PTR [rax],al
 1006830:	loop   0x1006836
 1006832:	add    BYTE PTR [rax],al
 1006834:	add    BYTE PTR [rax],al
 1006836:	add    BYTE PTR [rax],al
 1006838:	add    eax,0x0
 100683d:	add    BYTE PTR [rax],al
 100683f:	add    BYTE PTR [rcx],dl
 1006841:	add    al,0x1
 1006843:	add    BYTE PTR [rax],al
 1006845:	add    BYTE PTR [rax],al
 1006847:	add    al,dh
 1006849:	add    BYTE PTR [rax],0x1
 100684c:	add    BYTE PTR [rax],al
 100684e:	add    BYTE PTR [rax],al
 1006850:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1006851:	add    eax,DWORD PTR [rax]
 1006853:	add    BYTE PTR [rax],al
 1006855:	add    BYTE PTR [rax],al
 1006857:	add    BYTE PTR [rcx],al
 1006859:	add    BYTE PTR [rax],al
 100685b:	add    BYTE PTR [rax],al
 100685d:	add    BYTE PTR [rax],al
 100685f:	add    BYTE PTR [rdx],dl
 1006861:	add    al,0x1
 1006863:	add    BYTE PTR [rax],al
 1006865:	add    BYTE PTR [rax],al
 1006867:	add    BYTE PTR [rax],bl
 1006869:	add    DWORD PTR [rax],0x1
 100686f:	add    BYTE PTR [rbp+0x1000003],dh
 1006875:	add    BYTE PTR [rax],al
 1006877:	add    BYTE PTR [rcx],al
 1006879:	add    BYTE PTR [rax],al
 100687b:	add    BYTE PTR [rax],al
 100687d:	add    BYTE PTR [rax],al
 100687f:	add    BYTE PTR [rdi],dh
 1006881:	add    al,0x1
 1006883:	add    BYTE PTR [rax],al
 1006885:	add    BYTE PTR [rax],al
 1006887:	add    BYTE PTR [rax-0x7f],cl
 100688a:	add    BYTE PTR [rcx],al
 100688c:	add    BYTE PTR [rax],al
 100688e:	add    BYTE PTR [rax],al
 1006890:	in     al,0x4
 1006892:	add    BYTE PTR [rax],al
 1006894:	add    BYTE PTR [rax],al
 1006896:	add    BYTE PTR [rax],al
 1006898:	add    eax,0x0
 100689d:	add    BYTE PTR [rax],al
 100689f:	add    BYTE PTR [rax+rcx*1],al
 10068a2:	add    al,BYTE PTR [rax]
 10068a4:	add    BYTE PTR [rax],al
 10068a6:	add    BYTE PTR [rax],al
 10068a8:	js     0x100682b
 10068aa:	add    BYTE PTR [rcx],al
 10068ac:	add    BYTE PTR [rax],al
 10068ae:	add    BYTE PTR [rax],al
 10068b0:	test   al,0x3
 10068b2:	add    BYTE PTR [rax],al
 10068b4:	add    BYTE PTR [rax],al
 10068b6:	add    BYTE PTR [rax],al
 10068b8:	add    DWORD PTR [rax],eax
 10068ba:	add    BYTE PTR [rax],al
 10068bc:	add    BYTE PTR [rax],al
 10068be:	add    BYTE PTR [rax],al
 10068c0:	add    al,0x4
 10068c2:	add    eax,DWORD PTR [rax]
 10068c4:	add    BYTE PTR [rax],al
 10068c6:	add    BYTE PTR [rax],al
 10068c8:	movabs al,ds:0xb600000000010081
 10068d1:	add    eax,DWORD PTR [rax]
 10068d3:	add    BYTE PTR [rax],al
 10068d5:	add    BYTE PTR [rax],al
 10068d7:	add    BYTE PTR [rcx],al
 10068d9:	add    BYTE PTR [rax],al
 10068db:	add    BYTE PTR [rax],al
 10068dd:	add    BYTE PTR [rax],al
 10068df:	add    BYTE PTR [rcx],dl
 10068e1:	add    al,0x0
 10068e3:	add    BYTE PTR [rax],al
 10068e5:	add    BYTE PTR [rax],al
 10068e7:	add    BYTE PTR [rax+0x7e],bh
 10068ea:	add    BYTE PTR [rcx],al
 10068ec:	add    BYTE PTR [rax],al
 10068ee:	add    BYTE PTR [rax],al
 10068f0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10068f1:	add    eax,DWORD PTR [rax]
 10068f3:	add    BYTE PTR [rax],al
 10068f5:	add    BYTE PTR [rax],al
 10068f7:	add    BYTE PTR [rdx],al
 10068f9:	add    BYTE PTR [rax],al
 10068fb:	add    BYTE PTR [rax],al
 10068fd:	add    BYTE PTR [rax],al
 10068ff:	add    BYTE PTR [rax+rcx*1],al
 1006902:	add    BYTE PTR [rax],al
 1006904:	add    BYTE PTR [rax],al
 1006906:	add    BYTE PTR [rax],al
 1006908:	and    BYTE PTR [rax+0x100],al
 100690e:	add    BYTE PTR [rax],al
 1006910:	test   al,0x3
 1006912:	add    BYTE PTR [rax],al
 1006914:	add    BYTE PTR [rax],al
 1006916:	add    BYTE PTR [rax],al
 1006918:	add    al,BYTE PTR [rax]
 100691a:	add    BYTE PTR [rax],al
 100691c:	add    BYTE PTR [rax],al
 100691e:	add    BYTE PTR [rax],al
 1006920:	add    al,0x8
 1006922:	add    al,BYTE PTR [rax]
 1006924:	add    BYTE PTR [rax],al
 1006926:	add    BYTE PTR [rax],al
 1006928:	js     0x10068ab
 100692a:	add    BYTE PTR [rcx],al
 100692c:	add    BYTE PTR [rax],al
 100692e:	add    BYTE PTR [rax],al
 1006930:	test   al,0x3
 1006932:	add    BYTE PTR [rax],al
 1006934:	add    BYTE PTR [rax],al
 1006936:	add    BYTE PTR [rax],al
 1006938:	add    al,BYTE PTR [rax]
 100693a:	add    BYTE PTR [rax],al
 100693c:	add    BYTE PTR [rax],al
 100693e:	add    BYTE PTR [rax],al
 1006940:	add    al,0x4
 1006942:	add    eax,DWORD PTR [rax]
 1006944:	add    BYTE PTR [rax],al
 1006946:	add    BYTE PTR [rax],al
 1006948:	movabs al,ds:0xb600000000010081
 1006951:	add    eax,DWORD PTR [rax]
 1006953:	add    BYTE PTR [rax],al
 1006955:	add    BYTE PTR [rax],al
 1006957:	add    BYTE PTR [rdx],al
 1006959:	add    BYTE PTR [rax],al
 100695b:	add    BYTE PTR [rax],al
 100695d:	add    BYTE PTR [rax],al
 100695f:	add    BYTE PTR [rsp+rax*1],al
 1006962:	add    BYTE PTR [rax],al
 1006964:	add    BYTE PTR [rax],al
 1006966:	add    BYTE PTR [rax],al
 1006968:	and    BYTE PTR [rbp+0x0],bh
 100696b:	add    DWORD PTR [rax],eax
 100696d:	add    BYTE PTR [rax],al
 100696f:	add    BYTE PTR [rsi+0x3],dh
 1006975:	add    BYTE PTR [rax],al
 1006977:	add    BYTE PTR [rdx],al
 1006979:	add    BYTE PTR [rax],al
 100697b:	add    BYTE PTR [rax],al
 100697d:	add    BYTE PTR [rax],al
 100697f:	add    BYTE PTR [rcx],bh
 1006981:	add    al,0x0
 1006983:	add    BYTE PTR [rax],al
 1006985:	add    BYTE PTR [rax],al
 1006987:	add    al,dl
 1006989:	add    DWORD PTR [rax],0x1
	...
 1006997:	add    BYTE PTR [rsi],al
 1006999:	add    BYTE PTR [rax],al
 100699b:	add    BYTE PTR [rax],al
 100699d:	add    BYTE PTR [rax],al
 100699f:	add    BYTE PTR [rsp+rax*1],ch
 10069a2:	add    BYTE PTR [rax],al
 10069a4:	add    BYTE PTR [rax],al
 10069a6:	add    BYTE PTR [rax],al
 10069a8:	lock add DWORD PTR [rax],0x1
 10069af:	add    dh,ah
 10069b1:	add    al,0x0
 10069b3:	add    BYTE PTR [rcx],al
 10069b5:	add    BYTE PTR [rax],al
 10069b7:	add    BYTE PTR [rdx],al
 10069b9:	add    BYTE PTR [rax],al
 10069bb:	add    BYTE PTR [rax],al
 10069bd:	add    BYTE PTR [rax],al
 10069bf:	add    BYTE PTR [rdi],bh
 10069c1:	add    al,0x0
 10069c3:	add    BYTE PTR [rax],al
 10069c5:	add    BYTE PTR [rax],al
 10069c7:	add    BYTE PTR [rax],cl
 10069c9:	(bad)  
 10069ca:	add    BYTE PTR [rcx],al
 10069cc:	add    BYTE PTR [rax],al
 10069ce:	add    BYTE PTR [rax],al
 10069d0:	jrcxz  0x10069d6
 10069d2:	add    BYTE PTR [rax],al
 10069d4:	add    BYTE PTR [rax],al
 10069d6:	add    BYTE PTR [rax],al
 10069d8:	(bad)  
 10069d9:	add    BYTE PTR [rax],al
 10069db:	add    BYTE PTR [rax],al
 10069dd:	add    BYTE PTR [rax],al
 10069df:	add    BYTE PTR [rbx+0x4],al
 10069e2:	add    BYTE PTR [rax],al
 10069e4:	add    BYTE PTR [rax],al
 10069e6:	add    BYTE PTR [rax],al
 10069e8:	sbb    BYTE PTR [rdx+0x100],al
 10069ee:	add    BYTE PTR [rax],al
 10069f0:	out    0x4,al
 10069f2:	add    BYTE PTR [rax],al
 10069f4:	add    BYTE PTR [rax],al
 10069f6:	add    BYTE PTR [rax],al
 10069f8:	(bad)  
 10069f9:	add    BYTE PTR [rax],al
 10069fb:	add    BYTE PTR [rax],al
 10069fd:	add    BYTE PTR [rax],al
 10069ff:	add    BYTE PTR [rsp+rax*1+0x0],al
 1006a03:	add    BYTE PTR [rax],al
 1006a05:	add    BYTE PTR [rax],al
 1006a07:	add    BYTE PTR [rax],dh
 1006a09:	(bad)  
 1006a0a:	add    BYTE PTR [rcx],al
 1006a0c:	add    BYTE PTR [rax],al
 1006a0e:	add    BYTE PTR [rax],al
 1006a10:	jrcxz  0x1006a16
 1006a12:	add    BYTE PTR [rax],al
 1006a14:	add    BYTE PTR [rax],al
 1006a16:	add    BYTE PTR [rax],al
 1006a18:	(bad)  
 1006a19:	add    BYTE PTR [rax],al
 1006a1b:	add    BYTE PTR [rax],al
 1006a1d:	add    BYTE PTR [rax],al
 1006a1f:	add    BYTE PTR [rdi],ch
 1006a21:	add    al,0x0
 1006a23:	add    BYTE PTR [rax],al
 1006a25:	add    BYTE PTR [rax],al
 1006a27:	add    BYTE PTR [rax-0x7e],al
 1006a2a:	add    BYTE PTR [rcx],al
 1006a2c:	add    BYTE PTR [rax],al
 1006a2e:	add    BYTE PTR [rax],al
 1006a30:	jrcxz  0x1006a36
 1006a32:	add    BYTE PTR [rax],al
 1006a34:	add    BYTE PTR [rax],al
 1006a36:	add    BYTE PTR [rax],al
 1006a38:	(bad)  
 1006a39:	add    BYTE PTR [rax],al
 1006a3b:	add    BYTE PTR [rax],al
 1006a3d:	add    BYTE PTR [rax],al
 1006a3f:	add    BYTE PTR [rdx+0x4],bl
 1006a42:	add    BYTE PTR [rax],al
 1006a44:	add    BYTE PTR [rax],al
 1006a46:	add    BYTE PTR [rax],al
 1006a48:	push   0x10082
	...
 1006a55:	add    BYTE PTR [rax],al
 1006a57:	add    BYTE PTR [rsi],al
 1006a59:	add    BYTE PTR [rax],al
 1006a5b:	add    BYTE PTR [rax],al
 1006a5d:	add    BYTE PTR [rax],al
 1006a5f:	add    BYTE PTR [rbp+0x4],ah
 1006a62:	add    BYTE PTR [rax],al
 1006a64:	add    BYTE PTR [rax],al
 1006a66:	add    BYTE PTR [rax],al
 1006a68:	js     0x10069ec
 1006a6a:	add    BYTE PTR [rcx],al
	...
 1006a78:	(bad)  
 1006a79:	add    BYTE PTR [rax],al
 1006a7b:	add    BYTE PTR [rax],al
 1006a7d:	add    BYTE PTR [rax],al
 1006a7f:	add    BYTE PTR [rax+rcx*1],ch
 1006a82:	add    BYTE PTR [rax],al
 1006a84:	add    BYTE PTR [rax],al
 1006a86:	add    BYTE PTR [rax],al
 1006a88:	mov    BYTE PTR [rdx+0x100],al
 1006a8e:	add    BYTE PTR [rax],al
 1006a90:	jrcxz  0x1006a96
 1006a92:	add    BYTE PTR [rax],al
 1006a94:	add    DWORD PTR [rax],eax
 1006a96:	add    BYTE PTR [rax],al
 1006a98:	add    al,BYTE PTR [rax]
 1006a9a:	add    BYTE PTR [rax],al
 1006a9c:	add    BYTE PTR [rax],al
 1006a9e:	add    BYTE PTR [rax],al
 1006aa0:	add    al,0xc
 1006aa2:	add    BYTE PTR [rax],al
 1006aa4:	add    BYTE PTR [rax],al
 1006aa6:	add    BYTE PTR [rax],al
 1006aa8:	test   al,0x82
 1006aaa:	add    BYTE PTR [rcx],al
 1006aac:	add    BYTE PTR [rax],al
 1006aae:	add    BYTE PTR [rax],al
 1006ab0:	mov    dh,0x3
 1006ab2:	add    BYTE PTR [rax],al
 1006ab4:	add    BYTE PTR [rax],al
 1006ab6:	add    BYTE PTR [rax],al
 1006ab8:	add    al,BYTE PTR [rax]
 1006aba:	add    BYTE PTR [rax],al
 1006abc:	add    BYTE PTR [rax],al
 1006abe:	add    BYTE PTR [rax],al
 1006ac0:	jl     0x1006ac6
 1006ac2:	add    BYTE PTR [rax],al
 1006ac4:	add    BYTE PTR [rax],al
 1006ac6:	add    BYTE PTR [rax],al
 1006ac8:	loopne 0x1006a4c
 1006aca:	add    BYTE PTR [rcx],al
 1006acc:	add    BYTE PTR [rax],al
 1006ace:	add    BYTE PTR [rax],al
 1006ad0:	in     al,0x4
 1006ad2:	add    BYTE PTR [rax],al
 1006ad4:	add    BYTE PTR [rax],al
 1006ad6:	add    BYTE PTR [rax],al
 1006ad8:	add    al,0x0
 1006ada:	add    BYTE PTR [rax],al
 1006adc:	add    BYTE PTR [rax],al
 1006ade:	add    BYTE PTR [rax],al
 1006ae0:	adc    al,BYTE PTR [rax+rax*1]
 1006ae3:	add    BYTE PTR [rax],al
 1006ae5:	add    BYTE PTR [rax],al
 1006ae7:	add    al,dh
 1006ae9:	(bad)  
 1006aea:	add    BYTE PTR [rcx],al
 1006aec:	add    BYTE PTR [rax],al
 1006aee:	add    BYTE PTR [rax],al
 1006af0:	mov    ch,0x3
 1006af2:	add    BYTE PTR [rax],al
 1006af4:	add    BYTE PTR [rax],al
 1006af6:	add    BYTE PTR [rax],al
 1006af8:	(bad)  
 1006af9:	add    BYTE PTR [rax],al
 1006afb:	add    BYTE PTR [rax],al
 1006afd:	add    BYTE PTR [rax],al
 1006aff:	add    BYTE PTR [rsp+rax*1],al
 1006b02:	add    BYTE PTR [rax],al
 1006b04:	add    BYTE PTR [rax],al
 1006b06:	add    BYTE PTR [rax],al
 1006b08:	add    BYTE PTR [rbx+0x100],al
 1006b0e:	add    BYTE PTR [rax],al
 1006b10:	mov    dh,0x3
 1006b12:	add    BYTE PTR [rax],al
 1006b14:	add    BYTE PTR [rax],al
 1006b16:	add    BYTE PTR [rax],al
 1006b18:	add    al,0x0
 1006b1a:	add    BYTE PTR [rax],al
 1006b1c:	add    BYTE PTR [rax],al
 1006b1e:	add    BYTE PTR [rax],al
 1006b20:	add    al,0x4
 1006b22:	add    eax,DWORD PTR [rax]
 1006b24:	add    BYTE PTR [rax],al
 1006b26:	add    BYTE PTR [rax],al
 1006b28:	add    QWORD PTR [rax],0x1
 1006b2c:	add    BYTE PTR [rax],al
 1006b2e:	add    BYTE PTR [rax],al
 1006b30:	mov    dh,0x3
 1006b32:	add    BYTE PTR [rax],al
 1006b34:	add    BYTE PTR [rax],al
 1006b36:	add    BYTE PTR [rax],al
 1006b38:	add    al,0x0
 1006b3a:	add    BYTE PTR [rax],al
 1006b3c:	add    BYTE PTR [rax],al
 1006b3e:	add    BYTE PTR [rax],al
 1006b40:	add    al,0x8
 1006b42:	add    BYTE PTR [rax],al
 1006b44:	add    BYTE PTR [rax],al
 1006b46:	add    BYTE PTR [rax],al
 1006b48:	mov    BYTE PTR [rbx+0x100],al
 1006b4e:	add    BYTE PTR [rax],al
 1006b50:	test   al,0x3
 1006b52:	add    BYTE PTR [rax],al
 1006b54:	add    BYTE PTR [rax],al
 1006b56:	add    BYTE PTR [rax],al
 1006b58:	add    al,0x0
 1006b5a:	add    BYTE PTR [rax],al
 1006b5c:	add    BYTE PTR [rax],al
 1006b5e:	add    BYTE PTR [rax],al
 1006b60:	add    al,0x8
 1006b62:	add    al,BYTE PTR [rax]
 1006b64:	add    BYTE PTR [rax],al
 1006b66:	add    BYTE PTR [rax],al
 1006b68:	rol    BYTE PTR [rbx+0x100],0x0
 1006b6f:	add    BYTE PTR [rax+0x3],ch
 1006b75:	add    BYTE PTR [rax],al
 1006b77:	add    BYTE PTR [rax+rax*1],al
 1006b7a:	add    BYTE PTR [rax],al
 1006b7c:	add    BYTE PTR [rax],al
 1006b7e:	add    BYTE PTR [rax],al
 1006b80:	add    al,0x14
 1006b82:	add    BYTE PTR [rax],al
 1006b84:	add    BYTE PTR [rax],al
 1006b86:	add    BYTE PTR [rax],al
 1006b88:	add    BYTE PTR [rax+rax*1+0x1],al
 1006b8f:	add    BYTE PTR [rsi+0x3],dh
 1006b95:	add    BYTE PTR [rax],al
 1006b97:	add    BYTE PTR [rax+rax*1],al
 1006b9a:	add    BYTE PTR [rax],al
 1006b9c:	add    BYTE PTR [rax],al
 1006b9e:	add    BYTE PTR [rax],al
 1006ba0:	add    al,0x14
 1006ba2:	add    al,BYTE PTR [rax]
 1006ba4:	add    BYTE PTR [rax],al
 1006ba6:	add    BYTE PTR [rax],al
 1006ba8:	test   BYTE PTR [rax],al
 1006bab:	add    DWORD PTR [rax],eax
 1006bad:	add    BYTE PTR [rax],al
 1006baf:	add    BYTE PTR [rsi+0x3],dh
 1006bb5:	add    BYTE PTR [rax],al
 1006bb7:	add    BYTE PTR [rax+rax*1],al
 1006bba:	add    BYTE PTR [rax],al
 1006bbc:	add    BYTE PTR [rax],al
 1006bbe:	add    BYTE PTR [rax],al
 1006bc0:	(bad)  
 1006bc1:	add    al,0x0
 1006bc3:	add    BYTE PTR [rax],al
 1006bc5:	add    BYTE PTR [rax],al
 1006bc7:	add    BYTE PTR [rax+0x10084],cl
 1006bcd:	add    BYTE PTR [rax],al
 1006bcf:	add    ah,ah
 1006bd1:	add    al,0x0
 1006bd3:	add    BYTE PTR [rax],al
 1006bd5:	add    BYTE PTR [rax],al
 1006bd7:	add    BYTE PTR [rax+rax*1],al
 1006bda:	add    BYTE PTR [rax],al
 1006bdc:	add    BYTE PTR [rax],al
 1006bde:	add    BYTE PTR [rax],al
 1006be0:	adc    DWORD PTR [rax+rax*1],eax
 1006be3:	add    BYTE PTR [rax],al
 1006be5:	add    BYTE PTR [rax],al
 1006be7:	add    BYTE PTR [rax+0x10084],dh
 1006bed:	add    BYTE PTR [rax],al
 1006bef:	add    BYTE PTR [rbx+rax*1+0x0],ah
 1006bf6:	add    BYTE PTR [rax],al
 1006bf8:	add    al,0x0
 1006bfa:	add    BYTE PTR [rax],al
 1006bfc:	add    BYTE PTR [rax],al
 1006bfe:	add    BYTE PTR [rax],al
 1006c00:	adc    DWORD PTR [rsp+rax*1],eax
 1006c03:	add    BYTE PTR [rax],al
 1006c05:	add    BYTE PTR [rax],al
 1006c07:	add    al,dl
 1006c09:	test   BYTE PTR [rax],al
 1006c0b:	add    DWORD PTR [rax],eax
 1006c0d:	add    BYTE PTR [rax],al
 1006c0f:	add    BYTE PTR [rbx+rax*1+0x0],ah
 1006c16:	add    BYTE PTR [rax],al
 1006c18:	add    al,0x0
 1006c1a:	add    BYTE PTR [rax],al
 1006c1c:	add    BYTE PTR [rax],al
 1006c1e:	add    BYTE PTR [rax],al
 1006c20:	adc    al,0x4
 1006c22:	add    BYTE PTR [rax],al
 1006c24:	add    BYTE PTR [rax],al
 1006c26:	add    BYTE PTR [rax],al
 1006c28:	add    BYTE PTR [rbp+0x100],al
 1006c2e:	add    BYTE PTR [rax],al
 1006c30:	in     al,0x4
 1006c32:	add    BYTE PTR [rax],al
 1006c34:	add    BYTE PTR [rax],al
 1006c36:	add    BYTE PTR [rax],al
 1006c38:	add    al,0x0
 1006c3a:	add    BYTE PTR [rax],al
 1006c3c:	add    BYTE PTR [rax],al
 1006c3e:	add    BYTE PTR [rax],al
 1006c40:	(bad)  
 1006c41:	add    al,0x0
 1006c43:	add    BYTE PTR [rax],al
 1006c45:	add    BYTE PTR [rax],al
 1006c47:	add    BYTE PTR [rax],bl
 1006c49:	test   DWORD PTR [rax],eax
 1006c4b:	add    DWORD PTR [rax],eax
 1006c4d:	add    BYTE PTR [rax],al
 1006c4f:	add    ah,ah
 1006c51:	add    al,0x0
 1006c53:	add    BYTE PTR [rax],al
 1006c55:	add    BYTE PTR [rax],al
 1006c57:	add    BYTE PTR [rax+rax*1],al
 1006c5a:	add    BYTE PTR [rax],al
 1006c5c:	add    BYTE PTR [rax],al
 1006c5e:	add    BYTE PTR [rax],al
 1006c60:	sbb    cl,BYTE PTR [rax]
 1006c62:	add    BYTE PTR [rax],al
 1006c64:	add    BYTE PTR [rax],al
 1006c66:	add    BYTE PTR [rax],al
 1006c68:	sub    BYTE PTR [rbp+0x100],al
 1006c6e:	add    BYTE PTR [rax],al
 1006c70:	loop   0x1006c76
 1006c72:	add    BYTE PTR [rax],al
 1006c74:	add    BYTE PTR [rax],al
 1006c76:	add    BYTE PTR [rax],al
 1006c78:	add    al,0x0
 1006c7a:	add    BYTE PTR [rax],al
 1006c7c:	add    BYTE PTR [rax],al
 1006c7e:	add    BYTE PTR [rax],al
 1006c80:	sbb    cl,BYTE PTR [rax+rax*1]
 1006c83:	add    BYTE PTR [rax],al
 1006c85:	add    BYTE PTR [rax],al
 1006c87:	add    BYTE PTR [rax-0x7b],cl
 1006c8a:	add    BYTE PTR [rcx],al
 1006c8c:	add    BYTE PTR [rax],al
 1006c8e:	add    BYTE PTR [rax],al
 1006c90:	jrcxz  0x1006c96
 1006c92:	add    BYTE PTR [rax],al
 1006c94:	add    BYTE PTR [rax],al
 1006c96:	add    BYTE PTR [rax],al
 1006c98:	add    al,0x0
 1006c9a:	add    BYTE PTR [rax],al
 1006c9c:	add    BYTE PTR [rax],al
 1006c9e:	add    BYTE PTR [rax],al
 1006ca0:	sbb    dl,BYTE PTR [rax+rax*1]
 1006ca3:	add    BYTE PTR [rax],al
 1006ca5:	add    BYTE PTR [rax],al
 1006ca7:	add    BYTE PTR [rax-0x7b],dh
 1006caa:	add    BYTE PTR [rcx],al
 1006cac:	add    BYTE PTR [rax],al
 1006cae:	add    BYTE PTR [rax],al
 1006cb0:	loop   0x1006cb6
 1006cb2:	add    BYTE PTR [rax],al
 1006cb4:	add    BYTE PTR [rax],al
 1006cb6:	add    BYTE PTR [rax],al
 1006cb8:	add    al,0x0
 1006cba:	add    BYTE PTR [rax],al
 1006cbc:	add    BYTE PTR [rax],al
 1006cbe:	add    BYTE PTR [rax],al
 1006cc0:	sbb    ah,BYTE PTR [rax]
 1006cc2:	add    BYTE PTR [rax],al
 1006cc4:	add    BYTE PTR [rax],al
 1006cc6:	add    BYTE PTR [rax],al
 1006cc8:	nop
 1006cc9:	test   DWORD PTR [rax],eax
 1006ccb:	add    DWORD PTR [rax],eax
 1006ccd:	add    BYTE PTR [rax],al
 1006ccf:	add    bl,ah
 1006cd1:	add    al,0x0
 1006cd3:	add    BYTE PTR [rax],al
 1006cd5:	add    BYTE PTR [rax],al
 1006cd7:	add    BYTE PTR [rax+rax*1],al
 1006cda:	add    BYTE PTR [rax],al
 1006cdc:	add    BYTE PTR [rax],al
 1006cde:	add    BYTE PTR [rax],al
 1006ce0:	and    BYTE PTR [rax+rax*1],al
 1006ce3:	add    BYTE PTR [rax],al
 1006ce5:	add    BYTE PTR [rax],al
 1006ce7:	add    BYTE PTR [rax+0x10085],bh
 1006ced:	add    BYTE PTR [rax],al
 1006cef:	add    al,ch
 1006cf1:	add    al,0x0
 1006cf3:	add    BYTE PTR [rax],al
 1006cf5:	add    BYTE PTR [rax],al
 1006cf7:	add    BYTE PTR [rax+rax*1],al
 1006cfa:	add    BYTE PTR [rax],al
 1006cfc:	add    BYTE PTR [rax],al
 1006cfe:	add    BYTE PTR [rax],al
 1006d00:	sub    DWORD PTR [rax+rax*1],eax
 1006d03:	add    BYTE PTR [rax],al
 1006d05:	add    BYTE PTR [rax],al
 1006d07:	add    al,cl
 1006d09:	test   DWORD PTR [rax],eax
 1006d0b:	add    DWORD PTR [rax],eax
 1006d0d:	add    BYTE PTR [rax],al
 1006d0f:	add    al,ch
 1006d11:	add    al,0x0
 1006d13:	add    BYTE PTR [rax],al
 1006d15:	add    BYTE PTR [rax],al
 1006d17:	add    BYTE PTR [rax+rax*1],al
 1006d1a:	add    BYTE PTR [rax],al
 1006d1c:	add    BYTE PTR [rax],al
 1006d1e:	add    BYTE PTR [rax],al
 1006d20:	jp     0x1006d26
 1006d22:	add    BYTE PTR [rax],al
 1006d24:	add    BYTE PTR [rax],al
 1006d26:	add    BYTE PTR [rax],al
 1006d28:	fadd   DWORD PTR [rbp+0x100]
 1006d2e:	add    BYTE PTR [rax],al
 1006d30:	in     al,0x4
 1006d32:	add    BYTE PTR [rax],al
 1006d34:	add    BYTE PTR [rax],al
 1006d36:	add    BYTE PTR [rax],al
 1006d38:	add    al,0x0
 1006d3a:	add    BYTE PTR [rax],al
 1006d3c:	add    BYTE PTR [rax],al
 1006d3e:	add    BYTE PTR [rax],al
 1006d40:	cs add al,0x0
 1006d43:	add    BYTE PTR [rax],al
 1006d45:	add    BYTE PTR [rax],al
 1006d47:	add    al,dh
 1006d49:	test   DWORD PTR [rax],eax
 1006d4b:	add    DWORD PTR [rax],eax
 1006d4d:	add    BYTE PTR [rax],al
 1006d4f:	add    ah,ah
 1006d51:	add    al,0x0
 1006d53:	add    BYTE PTR [rax],al
 1006d55:	add    BYTE PTR [rax],al
 1006d57:	add    BYTE PTR [rax+rax*1],al
 1006d5a:	add    BYTE PTR [rax],al
 1006d5c:	add    BYTE PTR [rax],al
 1006d5e:	add    BYTE PTR [rax],al
 1006d60:	ins    DWORD PTR es:[rdi],dx
 1006d61:	add    al,0x0
 1006d63:	add    BYTE PTR [rax],al
 1006d65:	add    BYTE PTR [rax],al
 1006d67:	add    BYTE PTR [rax],dl
 1006d69:	xchg   BYTE PTR [rax],al
 1006d6b:	add    DWORD PTR [rax],eax
 1006d6d:	add    BYTE PTR [rax],al
 1006d6f:	add    bl,ah
 1006d71:	add    al,0x0
 1006d73:	add    BYTE PTR [rax],al
 1006d75:	add    BYTE PTR [rax],al
 1006d77:	add    BYTE PTR [rax+rax*1],al
 1006d7a:	add    BYTE PTR [rax],al
 1006d7c:	add    BYTE PTR [rax],al
 1006d7e:	add    BYTE PTR [rax],al
 1006d80:	cmp    al,BYTE PTR [rax+rax*1]
 1006d83:	add    BYTE PTR [rax],al
 1006d85:	add    BYTE PTR [rax],al
 1006d87:	add    BYTE PTR [rax],ah
 1006d89:	xchg   BYTE PTR [rax],al
 1006d8b:	add    DWORD PTR [rax],eax
	...
 1006d95:	add    BYTE PTR [rax],al
 1006d97:	add    BYTE PTR [rax+rax*1],al
 1006d9a:	add    BYTE PTR [rax],al
 1006d9c:	add    BYTE PTR [rax],al
 1006d9e:	add    BYTE PTR [rax],al
 1006da0:	cmp    eax,DWORD PTR [rax+rax*1]
 1006da3:	add    BYTE PTR [rax],al
 1006da5:	add    BYTE PTR [rax],al
 1006da7:	add    BYTE PTR [rax],dh
 1006da9:	xchg   BYTE PTR [rax],al
 1006dab:	add    DWORD PTR [rax],eax
 1006dad:	add    BYTE PTR [rax],al
 1006daf:	add    ah,ah
 1006db1:	add    al,0x0
 1006db3:	add    BYTE PTR [rax],al
 1006db5:	add    BYTE PTR [rax],al
 1006db7:	add    BYTE PTR [rax+rax*1],al
 1006dba:	add    BYTE PTR [rax],al
 1006dbc:	add    BYTE PTR [rax],al
 1006dbe:	add    BYTE PTR [rax],al
 1006dc0:	cmp    ecx,DWORD PTR [rax]
 1006dc2:	add    BYTE PTR [rax],al
 1006dc4:	add    BYTE PTR [rax],al
 1006dc6:	add    BYTE PTR [rax],al
 1006dc8:	rex.W xchg BYTE PTR [rax],al
 1006dcb:	add    DWORD PTR [rax],eax
 1006dcd:	add    BYTE PTR [rax],al
 1006dcf:	add    ah,ah
 1006dd1:	add    al,0x0
 1006dd3:	add    BYTE PTR [rax],al
 1006dd5:	add    BYTE PTR [rax],al
 1006dd7:	add    BYTE PTR [rax+rax*1],al
 1006dda:	add    BYTE PTR [rax],al
 1006ddc:	add    BYTE PTR [rax],al
 1006dde:	add    BYTE PTR [rax],al
 1006de0:	rex.X add al,0x0
 1006de3:	add    BYTE PTR [rax],al
 1006de5:	add    BYTE PTR [rax],al
 1006de7:	add    BYTE PTR [rax-0x7a],dh
 1006dea:	add    BYTE PTR [rcx],al
 1006dec:	add    BYTE PTR [rax],al
 1006dee:	add    BYTE PTR [rax],al
 1006df0:	loop   0x1006df6
 1006df2:	add    BYTE PTR [rax],al
 1006df4:	add    BYTE PTR [rax],al
 1006df6:	add    BYTE PTR [rax],al
 1006df8:	add    al,0x0
 1006dfa:	add    BYTE PTR [rax],al
 1006dfc:	add    BYTE PTR [rax],al
 1006dfe:	add    BYTE PTR [rax],al
 1006e00:	rex.RB add al,0x0
 1006e03:	add    BYTE PTR [rax],al
 1006e05:	add    BYTE PTR [rax],al
 1006e07:	add    BYTE PTR [rax+0x10086],al
	...
 1006e15:	add    BYTE PTR [rax],al
 1006e17:	add    BYTE PTR [rax+rax*1],al
 1006e1a:	add    BYTE PTR [rax],al
 1006e1c:	add    BYTE PTR [rax],al
 1006e1e:	add    BYTE PTR [rax],al
 1006e20:	rex.WRB add al,0x0
 1006e23:	add    BYTE PTR [rax],al
 1006e25:	add    BYTE PTR [rax],al
 1006e27:	add    BYTE PTR [rax+0x10086],dl
	...
 1006e35:	add    BYTE PTR [rax],al
 1006e37:	add    BYTE PTR [rax+rax*1],al
 1006e3a:	add    BYTE PTR [rax],al
 1006e3c:	add    BYTE PTR [rax],al
 1006e3e:	add    BYTE PTR [rax],al
 1006e40:	movsxd eax,DWORD PTR [rax+rax*1]
 1006e43:	add    BYTE PTR [rax],al
 1006e45:	add    BYTE PTR [rax],al
 1006e47:	add    BYTE PTR [rax+0x10086],ch
	...
 1006e55:	add    BYTE PTR [rax],al
 1006e57:	add    BYTE PTR [rax+rax*1],al
 1006e5a:	add    BYTE PTR [rax],al
 1006e5c:	add    BYTE PTR [rax],al
 1006e5e:	add    BYTE PTR [rax],al
 1006e60:	push   rcx
 1006e61:	add    al,0x0
 1006e63:	add    BYTE PTR [rax],al
 1006e65:	add    BYTE PTR [rax],al
 1006e67:	add    BYTE PTR [rax+0x10086],bh
	...
 1006e75:	add    BYTE PTR [rax],al
 1006e77:	add    BYTE PTR [rax+rax*1],al
 1006e7a:	add    BYTE PTR [rax],al
 1006e7c:	add    BYTE PTR [rax],al
 1006e7e:	add    BYTE PTR [rax],al
 1006e80:	push   rdx
 1006e81:	add    al,0x0
 1006e83:	add    BYTE PTR [rax],al
 1006e85:	add    BYTE PTR [rax],al
 1006e87:	add    al,cl
 1006e89:	xchg   BYTE PTR [rax],al
 1006e8b:	add    DWORD PTR [rax],eax
 1006e8d:	add    BYTE PTR [rax],al
 1006e8f:	add    ah,ah
 1006e91:	add    al,0x0
 1006e93:	add    BYTE PTR [rax],al
 1006e95:	add    BYTE PTR [rax],al
 1006e97:	add    BYTE PTR [rax+rax*1],al
 1006e9a:	add    BYTE PTR [rax],al
 1006e9c:	add    BYTE PTR [rax],al
 1006e9e:	add    BYTE PTR [rax],al
 1006ea0:	push   rbx
 1006ea1:	add    al,0x0
 1006ea3:	add    BYTE PTR [rax],al
 1006ea5:	add    BYTE PTR [rax],al
 1006ea7:	add    al,bl
 1006ea9:	xchg   BYTE PTR [rax],al
 1006eab:	add    DWORD PTR [rax],eax
	...
 1006eb5:	add    BYTE PTR [rax],al
 1006eb7:	add    BYTE PTR [rax+rax*1],al
 1006eba:	add    BYTE PTR [rax],al
 1006ebc:	add    BYTE PTR [rax],al
 1006ebe:	add    BYTE PTR [rax],al
 1006ec0:	push   rsp
 1006ec1:	add    al,0x0
 1006ec3:	add    BYTE PTR [rax],al
 1006ec5:	add    BYTE PTR [rax],al
 1006ec7:	add    al,ch
 1006ec9:	xchg   BYTE PTR [rax],al
 1006ecb:	add    DWORD PTR [rax],eax
	...
 1006ed5:	add    BYTE PTR [rax],al
 1006ed7:	add    BYTE PTR [rax+rax*1],al
 1006eda:	add    BYTE PTR [rax],al
 1006edc:	add    BYTE PTR [rax],al
 1006ede:	add    BYTE PTR [rax],al
 1006ee0:	(bad)  
 1006ee1:	add    al,0x0
 1006ee3:	add    BYTE PTR [rax],al
 1006ee5:	add    BYTE PTR [rax],al
 1006ee7:	add    al,dh
 1006ee9:	xchg   BYTE PTR [rax],al
 1006eeb:	add    DWORD PTR [rax],eax
 1006eed:	add    BYTE PTR [rax],al
 1006eef:	add    ah,ah
 1006ef1:	add    al,0x0
 1006ef3:	add    BYTE PTR [rax],al
 1006ef5:	add    BYTE PTR [rax],al
 1006ef7:	add    BYTE PTR [rax+rax*1],al
 1006efa:	add    BYTE PTR [rax],al
 1006efc:	add    BYTE PTR [rax],al
 1006efe:	add    BYTE PTR [rax],al
 1006f00:	pop    rdi
 1006f01:	or     BYTE PTR [rax],al
 1006f03:	add    BYTE PTR [rax],al
 1006f05:	add    BYTE PTR [rax],al
 1006f07:	add    BYTE PTR [rax],al
 1006f09:	xchg   DWORD PTR [rax],eax
 1006f0b:	add    DWORD PTR [rax],eax
 1006f0d:	add    BYTE PTR [rax],al
 1006f0f:	add    ah,ah
 1006f11:	add    al,0x0
 1006f13:	add    BYTE PTR [rax],al
 1006f15:	add    BYTE PTR [rax],al
 1006f17:	add    BYTE PTR [rax+rax*1],al
 1006f1a:	add    BYTE PTR [rax],al
 1006f1c:	add    BYTE PTR [rax],al
 1006f1e:	add    BYTE PTR [rax],al
 1006f20:	(bad)  
 1006f21:	add    al,0x0
 1006f23:	add    BYTE PTR [rax],al
 1006f25:	add    BYTE PTR [rax],al
 1006f27:	add    BYTE PTR [rax],bl
 1006f29:	xchg   DWORD PTR [rax],eax
 1006f2b:	add    DWORD PTR [rax],eax
	...
 1006f35:	add    BYTE PTR [rax],al
 1006f37:	add    BYTE PTR [rax+rax*1],al
 1006f3a:	add    BYTE PTR [rax],al
 1006f3c:	add    BYTE PTR [rax],al
 1006f3e:	add    BYTE PTR [rax],al
 1006f40:	sub    al,0x4
 1006f42:	add    BYTE PTR [rax],al
 1006f44:	add    BYTE PTR [rax],al
 1006f46:	add    BYTE PTR [rax],al
 1006f48:	lock add DWORD PTR [rax],0x1
 1006f4f:	add    dh,ah
 1006f51:	add    al,0x0
 1006f53:	add    BYTE PTR [rax],al
 1006f55:	add    BYTE PTR [rax],al
 1006f57:	add    BYTE PTR [rax+rax*1],al
 1006f5a:	add    BYTE PTR [rax],al
 1006f5c:	add    BYTE PTR [rax],al
 1006f5e:	add    BYTE PTR [rax],al
 1006f60:	sub    al,0x8
 1006f62:	add    BYTE PTR [rax],al
 1006f64:	add    BYTE PTR [rax],al
 1006f66:	add    BYTE PTR [rax],al
 1006f68:	mov    BYTE PTR [rdx+0x100],al
 1006f6e:	add    BYTE PTR [rax],al
 1006f70:	jrcxz  0x1006f76
 1006f72:	add    BYTE PTR [rax],al
 1006f74:	add    BYTE PTR [rax],al
 1006f76:	add    BYTE PTR [rax],al
 1006f78:	add    al,0x0
 1006f7a:	add    BYTE PTR [rax],al
 1006f7c:	add    BYTE PTR [rax],al
 1006f7e:	add    BYTE PTR [rax],al
 1006f80:	cmp    al,0x0
 1006f82:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 1006f86:	je     0x1006f88
 1006f88:	rex.RX add BYTE PTR [rdi+0x0],r13b
 1006f8c:	jne    0x1006f8e
 1006f8e:	outs   dx,BYTE PTR ds:[rsi]
 1006f8f:	add    BYTE PTR [rax+rax*1+0x3e],ah
 1006f93:	add    BYTE PTR [rax],al
 1006f95:	add    BYTE PTR [rax],al
 1006f97:	add    BYTE PTR [rcx],dh
 1006f99:	xor    DWORD PTR [rsi],ebp
 1006f9b:	xor    BYTE PTR [rsi],ch
 1006f9d:	xor    dh,BYTE PTR [rcx]
 1006f9f:	xor    BYTE PTR [rax],dh
 1006fa1:	cs xor BYTE PTR ss:[rax],al
 1006fa5:	add    BYTE PTR [rax],al
 1006fa7:	add    BYTE PTR [rdx],cl
 1006fa9:	or     al,BYTE PTR [rax]
 1006fab:	add    BYTE PTR [rbx+0x0],al
 1006fae:	add    BYTE PTR [rax],al
 1006fb0:	rex.XB add BYTE PTR [r11+0x0],spl
 1006fb4:	add    BYTE PTR [rax],al
 1006fb6:	add    BYTE PTR [rax],al
 1006fb8:	rex.XB add BYTE PTR [r14+0x0],spl
 1006fbc:	add    BYTE PTR [rax],al
 1006fbe:	add    BYTE PTR [rax],al
 1006fc0:	rex.XB add BYTE PTR [r14+0x0],bpl
 1006fc4:	add    BYTE PTR [rax],al
 1006fc6:	add    BYTE PTR [rax],al
 1006fc8:	rex.XB add BYTE PTR [r15+0x0],bpl
 1006fcc:	add    BYTE PTR [rax],al
 1006fce:	add    BYTE PTR [rax],al
 1006fd0:	rex.XB add BYTE PTR [r11+0x0],sil
 1006fd4:	add    BYTE PTR [rax],al
 1006fd6:	add    BYTE PTR [rax],al
 1006fd8:	rex.WB add BYTE PTR [r11+0x0],sil
 1006fdc:	add    BYTE PTR [r8+rax*1+0x70],bpl
 1006fe1:	add    BYTE PTR [rax+0x0],ch
 1006fe4:	(bad)  
 1006fe5:	add    BYTE PTR [rdx+0x0],ah
 1006fe8:	add    BYTE PTR gs:[rax+rax*1+0x69],dh
 1006fed:	add    BYTE PTR [rbx+0x0],ah
 1006ff0:	push   rax
 1006ff1:	add    BYTE PTR [rdx+0x0],dh
 1006ff4:	add    BYTE PTR gs:[rbx+0x0],dh
 1006ff8:	add    BYTE PTR gs:[rsi+0x0],ch
 1006ffc:	je     0x1006ffe
 1006ffe:	(bad)  
 1006fff:	add    BYTE PTR [rax+rax*1+0x69],dh
 1007003:	add    BYTE PTR [rdi+0x0],ch
 1007006:	outs   dx,BYTE PTR ds:[rsi]
 1007007:	add    BYTE PTR [rsi+0x0],al
 100700a:	outs   dx,DWORD PTR ds:[rsi]
 100700b:	add    BYTE PTR [rdx+0x0],dh
 100700e:	ins    DWORD PTR es:[rdi],dx
 100700f:	add    BYTE PTR [rbx+0x0],dh
 1007012:	add    BYTE PTR [rax],al
 1007014:	add    BYTE PTR [rax],al
 1007016:	add    BYTE PTR [rax],al
 1007018:	rex.WB add BYTE PTR [r11+0x0],sil
 100701c:	add    BYTE PTR [r10+0x0],sil
 1007020:	(bad)  
 1007021:	add    BYTE PTR [rdx+0x0],ah
 1007024:	imul   eax,DWORD PTR [rax],0x63
 100702a:	add    BYTE PTR [rax],al
 100702c:	add    BYTE PTR [rax],al
 100702e:	add    BYTE PTR [rax],al
 1007030:	rex.WB add BYTE PTR [r11+0x0],sil
 1007034:	add    BYTE PTR [r10+0x0],sil
 1007038:	(bad)  
 1007039:	add    BYTE PTR [rdx+0x0],ah
 100703c:	imul   eax,DWORD PTR [rax],0x500063
 1007042:	jb     0x1007044
 1007044:	add    BYTE PTR gs:[rbx+0x0],dh
 1007048:	add    BYTE PTR gs:[rsi+0x0],ch
 100704c:	je     0x100704e
 100704e:	(bad)  
 100704f:	add    BYTE PTR [rax+rax*1+0x69],dh
 1007053:	add    BYTE PTR [rdi+0x0],ch
 1007056:	outs   dx,BYTE PTR ds:[rsi]
 1007057:	add    BYTE PTR [rsi+0x0],al
 100705a:	outs   dx,DWORD PTR ds:[rsi]
 100705b:	add    BYTE PTR [rdx+0x0],dh
 100705e:	ins    DWORD PTR es:[rdi],dx
 100705f:	add    BYTE PTR [rbx+0x0],dh
 1007062:	sub    eax,0x4100
 1007067:	add    BYTE PTR [rcx+0x0],cl
 100706a:	jae    0x100706c
 100706c:	add    BYTE PTR [r10+0x0],sil
 1007070:	(bad)  
 1007071:	add    BYTE PTR [rdx+0x0],ah
 1007074:	imul   eax,DWORD PTR [rax],0x500063
 100707a:	jb     0x100707c
 100707c:	add    BYTE PTR gs:[rbx+0x0],dh
 1007080:	add    BYTE PTR gs:[rsi+0x0],ch
 1007084:	je     0x1007086
 1007086:	(bad)  
 1007087:	add    BYTE PTR [rax+rax*1+0x69],dh
 100708b:	add    BYTE PTR [rdi+0x0],ch
 100708e:	outs   dx,BYTE PTR ds:[rsi]
 100708f:	add    BYTE PTR [rsi+0x0],al
 1007092:	outs   dx,DWORD PTR ds:[rsi]
 1007093:	add    BYTE PTR [rdx+0x0],dh
 1007096:	ins    DWORD PTR es:[rdi],dx
 1007097:	add    BYTE PTR [rbx+0x0],dh
 100709a:	sub    eax,0x4200
 100709f:	add    BYTE PTR [rcx+0x0],cl
 10070a2:	jae    0x10070a4
 10070a4:	add    BYTE PTR [r10+0x0],sil
 10070a8:	ins    DWORD PTR es:[rdi],dx
 10070a9:	add    BYTE PTR [rbp+0x0],ah
 10070ac:	outs   dx,BYTE PTR ds:[rsi]
 10070ad:	add    BYTE PTR [rcx+0x0],ch
 10070b0:	(bad)  
 10070b1:	add    BYTE PTR [rsi+0x0],ch
 10070b4:	add    BYTE PTR [rax],al
 10070b6:	add    BYTE PTR [rax],al
 10070b8:	rex.WB add BYTE PTR [r11+0x0],sil
 10070bc:	add    BYTE PTR [r10+0x0],sil
 10070c0:	jb     0x10070c2
 10070c2:	outs   dx,DWORD PTR ds:[rsi]
 10070c3:	add    BYTE PTR [rdi+0x0],dh
 10070c6:	jae    0x10070c8
	...
 10070d0:	rex.WB add BYTE PTR [r11+0x0],sil
 10070d4:	rex.X add BYTE PTR [rcx+0x0],spl
 10070d8:	jae    0x10070da
 10070da:	imul   eax,DWORD PTR [rax],0x4c0063
 10070e0:	(bad)  
 10070e1:	add    BYTE PTR [rax+rax*1+0x69],dh
 10070e5:	add    BYTE PTR [rsi+0x0],ch
	...
 10070f0:	rex.WB add BYTE PTR [r11+0x0],sil
 10070f4:	rex.X add BYTE PTR [rbp+0x0],spl
 10070f8:	outs   dx,BYTE PTR ds:[rsi]
 10070f9:	add    BYTE PTR [rdi+0x0],ah
 10070fc:	(bad)  
 10070fd:	add    BYTE PTR [rax+rax*1+0x69],ch
 1007101:	add    BYTE PTR [rax],al
 1007103:	add    BYTE PTR [rax],al
 1007105:	add    BYTE PTR [rax],al
 1007107:	add    BYTE PTR [rcx+0x0],cl
 100710a:	jae    0x100710c
 100710c:	add    BYTE PTR [rax+r8*1+0x6f],bpl
 1007111:	add    BYTE PTR [rbx+0x0],ah
 1007114:	imul   eax,DWORD PTR [rax],0x45
 1007117:	add    BYTE PTR [rax+rax*1+0x65],ch
 100711b:	add    BYTE PTR [rbp+0x0],ch
 100711e:	add    BYTE PTR gs:[rsi+0x0],ch
 1007122:	je     0x1007124
 1007124:	jae    0x1007126
 1007126:	add    BYTE PTR [rax],al
 1007128:	rex.WB add BYTE PTR [r11+0x0],sil
 100712c:	rex.X add BYTE PTR [rdi+0x0],bpl
 1007130:	jo     0x1007132
 1007132:	outs   dx,DWORD PTR ds:[rsi]
 1007133:	add    BYTE PTR [rbp+0x0],ch
 1007136:	outs   dx,DWORD PTR ds:[rsi]
 1007137:	add    BYTE PTR [rsi+0x0],ah
 100713a:	outs   dx,DWORD PTR ds:[rsi]
 100713b:	add    BYTE PTR [rax],al
 100713d:	add    BYTE PTR [rax],al
 100713f:	add    BYTE PTR [rcx+0x0],cl
 1007142:	jae    0x1007144
 1007144:	rex.X add BYTE PTR [rdi+0x0],bpl
 1007148:	jo     0x100714a
 100714a:	outs   dx,DWORD PTR ds:[rsi]
 100714b:	add    BYTE PTR [rbp+0x0],ch
 100714e:	outs   dx,DWORD PTR ds:[rsi]
 100714f:	add    BYTE PTR [rsi+0x0],ah
 1007152:	outs   dx,DWORD PTR ds:[rsi]
 1007153:	add    BYTE PTR [rbp+0x0],al
 1007156:	js     0x1007158
 1007158:	je     0x100715a
 100715a:	add    BYTE PTR gs:[rsi+0x0],ch
 100715e:	add    BYTE PTR fs:[rbp+0x0],ah
 1007162:	add    BYTE PTR fs:[rax],al
 1007165:	add    BYTE PTR [rax],al
 1007167:	add    BYTE PTR [rcx+0x0],cl
 100716a:	jae    0x100716c
 100716c:	rex.X add BYTE PTR [rdi+0x0],bpl
 1007170:	js     0x1007172
 1007172:	add    BYTE PTR [rdx+0x0],r14b
 1007176:	(bad)  
 1007177:	add    BYTE PTR [rdi+0x0],dh
 100717a:	imul   eax,DWORD PTR [rax],0x67006e
	...
 1007188:	rex.WB add BYTE PTR [r11+0x0],sil
 100718c:	rex.X add BYTE PTR [rdx+0x0],sil
 1007190:	(bad)  
 1007191:	add    BYTE PTR [rcx+0x0],ch
 1007194:	ins    BYTE PTR es:[rdi],dx
 1007195:	add    BYTE PTR [rax+rax*1+0x65],ch
 1007199:	add    BYTE PTR [rax+0x0],dl
 100719c:	(bad)  
 100719d:	add    BYTE PTR [rax+rax*1+0x74],dh
 10071a1:	add    BYTE PTR [rbp+0x0],ah
 10071a4:	jb     0x10071a6
 10071a6:	outs   dx,BYTE PTR ds:[rsi]
 10071a7:	add    BYTE PTR [rbx+0x0],dh
 10071aa:	add    BYTE PTR [rax],al
 10071ac:	add    BYTE PTR [rax],al
 10071ae:	add    BYTE PTR [rax],al
 10071b0:	rex.WB add BYTE PTR [r11+0x0],sil
 10071b4:	rex.XB add BYTE PTR [r10+0x0],cl
 10071b8:	rex.WXB add BYTE PTR [r11+0x0],al
 10071bc:	outs   dx,DWORD PTR ds:[rsi]
 10071bd:	add    BYTE PTR [rbp+0x0],ch
 10071c0:	jo     0x10071c2
 10071c2:	(bad)  
 10071c3:	add    BYTE PTR [rax+rax*1+0x69],dh
 10071c7:	add    BYTE PTR [rdx+0x0],ah
 10071ca:	imul   eax,DWORD PTR [rax],0x69006c
 10071d0:	je     0x10071d2
 10071d2:	jns    0x10071d4
 10071d4:	add    BYTE PTR [rax],al
 10071d6:	add    BYTE PTR [rax],al
 10071d8:	rex.WB add BYTE PTR [r11+0x0],sil
 10071dc:	rex.XB add BYTE PTR [r10+0x0],cl
 10071e0:	rex.WXB add BYTE PTR [r11+0x0],al
 10071e4:	outs   dx,DWORD PTR ds:[rsi]
 10071e5:	add    BYTE PTR [rbp+0x0],ch
 10071e8:	jo     0x10071ea
 10071ea:	(bad)  
 10071eb:	add    BYTE PTR [rax+rax*1+0x69],dh
 10071ef:	add    BYTE PTR [rdx+0x0],ah
 10071f2:	imul   eax,DWORD PTR [rax],0x69006c
 10071f8:	je     0x10071fa
 10071fa:	jns    0x10071fc
 10071fc:	rex.RX add BYTE PTR [rdi+0x0],r13b
 1007200:	jb     0x1007202
 1007202:	ins    DWORD PTR es:[rdi],dx
 1007203:	add    BYTE PTR [rbx+0x0],dh
 1007206:	add    BYTE PTR [rax],al
 1007208:	rex.WB add BYTE PTR [r11+0x0],sil
 100720c:	rex.XB add BYTE PTR [r10+0x0],cl
 1007210:	rex.WXB add BYTE PTR [r11+0x0],al
 1007214:	outs   dx,DWORD PTR ds:[rsi]
 1007215:	add    BYTE PTR [rbp+0x0],ch
 1007218:	jo     0x100721a
 100721a:	(bad)  
 100721b:	add    BYTE PTR [rax+rax*1+0x69],dh
 100721f:	add    BYTE PTR [rdx+0x0],ah
 1007222:	imul   eax,DWORD PTR [rax],0x69006c
 1007228:	je     0x100722a
 100722a:	jns    0x100722c
 100722c:	rex.WB add BYTE PTR [r8+rax*1+0x65],spl
 1007231:	add    BYTE PTR [rdi+0x0],ch
 1007234:	add    BYTE PTR [edx+0x0],dh
 1007238:	(bad)  
 1007239:	add    BYTE PTR [rax+0x0],dh
 100723c:	push   0x7300
 1007241:	add    BYTE PTR [rax],al
 1007243:	add    BYTE PTR [rax],al
 1007245:	add    BYTE PTR [rax],al
 1007247:	add    BYTE PTR [rcx+0x0],cl
 100724a:	jae    0x100724c
 100724c:	rex.XB add BYTE PTR [r10+0x0],cl
 1007250:	rex.WXB add BYTE PTR [r10+0x0],dl
 1007254:	(bad)  
 1007255:	add    BYTE PTR [rax+rax*1+0x69],ah
 1007259:	add    BYTE PTR [rbx+0x0],ah
 100725c:	(bad)  
 100725d:	add    BYTE PTR [rax+rax*1+0x73],ch
 1007261:	add    BYTE PTR [rbx+0x0],dl
 1007264:	jne    0x1007266
 1007266:	jo     0x1007268
 1007268:	jo     0x100726a
 100726a:	ins    BYTE PTR es:[rdi],dx
 100726b:	add    BYTE PTR [rbp+0x0],ah
 100726e:	ins    DWORD PTR es:[rdi],dx
 100726f:	add    BYTE PTR [rbp+0x0],ah
 1007272:	outs   dx,BYTE PTR ds:[rsi]
 1007273:	add    BYTE PTR [rax+rax*1+0x0],dh
 1007277:	add    BYTE PTR [rcx+0x0],cl
 100727a:	jae    0x100727c
 100727c:	rex.XB add BYTE PTR [r10+0x0],cl
 1007280:	rex.WXB add BYTE PTR [r11+0x0],dl
 1007284:	jns    0x1007286
 1007286:	ins    DWORD PTR es:[rdi],dx
 1007287:	add    BYTE PTR [rdx+0x0],ah
 100728a:	outs   dx,DWORD PTR ds:[rsi]
 100728b:	add    BYTE PTR [rax+rax*1+0x73],ch
 100728f:	add    BYTE PTR [rcx+0x0],ah
 1007292:	outs   dx,BYTE PTR ds:[rsi]
 1007293:	add    BYTE PTR [rax+rax*1+0x50],ah
 1007297:	add    BYTE PTR [rbp+0x0],dh
 100729a:	outs   dx,BYTE PTR ds:[rsi]
 100729b:	add    BYTE PTR [rbx+0x0],ah
 100729e:	je     0x10072a0
 10072a0:	jne    0x10072a2
 10072a2:	(bad)  
 10072a3:	add    BYTE PTR [rax+rax*1+0x69],dh
 10072a7:	add    BYTE PTR [rdi+0x0],ch
 10072aa:	outs   dx,BYTE PTR ds:[rsi]
 10072ab:	add    BYTE PTR [rax],al
 10072ad:	add    BYTE PTR [rax],al
 10072af:	add    BYTE PTR [rcx+0x0],cl
 10072b2:	jae    0x10072b4
 10072b4:	rex.XB add BYTE PTR [r10+0x0],cl
 10072b8:	rex.WXB add BYTE PTR [r13+0x0],dl
 10072bc:	outs   dx,BYTE PTR ds:[rsi]
 10072bd:	add    BYTE PTR [rcx+0x0],ch
 10072c0:	data16 add BYTE PTR [rcx+0x0],ch
 10072c4:	add    BYTE PTR gs:[rax+rax*1+0x49],ah
 10072c9:	add    BYTE PTR [rax+rax*1+0x65],ah
 10072cd:	add    BYTE PTR [rdi+0x0],ch
 10072d0:	add    BYTE PTR [edx+0x0],dh
 10072d4:	(bad)  
 10072d5:	add    BYTE PTR [rax+0x0],dh
 10072d8:	push   0x7300
 10072dd:	add    BYTE PTR [rax],al
 10072df:	add    BYTE PTR [rcx+0x0],cl
 10072e2:	jae    0x10072e4
 10072e4:	rex.XB add BYTE PTR [r10+0x0],cl
 10072e8:	rex.WXB add BYTE PTR [r13+0x0],dl
 10072ec:	outs   dx,BYTE PTR ds:[rsi]
 10072ed:	add    BYTE PTR [rcx+0x0],ch
 10072f0:	data16 add BYTE PTR [rcx+0x0],ch
 10072f4:	add    BYTE PTR gs:[rax+rax*1+0x49],ah
 10072f9:	add    BYTE PTR [rax+rax*1+0x65],ah
 10072fd:	add    BYTE PTR [rdi+0x0],ch
 1007300:	add    BYTE PTR [edx+0x0],dh
 1007304:	(bad)  
 1007305:	add    BYTE PTR [rax+0x0],dh
 1007308:	push   0x45007300
 100730d:	add    BYTE PTR [rax+0x0],bh
 1007310:	je     0x1007312
 1007312:	add    BYTE PTR gs:[rsi+0x0],ch
 1007316:	jae    0x1007318
 1007318:	imul   eax,DWORD PTR [rax],0x6e006f
 100731e:	add    BYTE PTR [r8],al
 1007321:	add    BYTE PTR [rax],al
 1007323:	add    BYTE PTR [rax],al
 1007325:	add    BYTE PTR [rax],al
 1007327:	add    BYTE PTR [rcx+0x0],cl
 100732a:	jae    0x100732c
 100732c:	rex.XB add BYTE PTR [r8+0x0],bpl
 1007330:	add    BYTE PTR gs:[rdx+0x0],dh
 1007334:	outs   dx,DWORD PTR ds:[rsi]
 1007335:	add    BYTE PTR [rbx+0x0],ch
 1007338:	add    BYTE PTR gs:[rbp+0x0],ah
 100733c:	add    BYTE PTR [rax],al
 100733e:	add    BYTE PTR [rax],al
 1007340:	rex.WB add BYTE PTR [r11+0x0],sil
 1007344:	rex.XB add BYTE PTR [r15+0x0],bpl
 1007348:	ins    DWORD PTR es:[rdi],dx
 1007349:	add    BYTE PTR [rdx+0x0],ah
 100734c:	imul   eax,DWORD PTR [rax],0x69006e
 1007352:	outs   dx,BYTE PTR ds:[rsi]
 1007353:	add    BYTE PTR [rdi+0x0],ah
 1007356:	add    BYTE PTR [rcx+0x0],r13b
 100735a:	(bad)  
 100735b:	add    BYTE PTR [rbx+0x0],ah
 100735e:	jb     0x1007360
 1007360:	imul   eax,DWORD PTR [rax],0x690074
 1007366:	movsxd eax,DWORD PTR [rax]
 1007368:	(bad)  
 1007369:	add    BYTE PTR [rax+rax*1+0x4d],ch
 100736d:	add    BYTE PTR [rcx+0x0],ah
 1007370:	jb     0x1007372
 1007372:	imul   eax,DWORD PTR [rax],0x73
 1007375:	add    BYTE PTR [rax],al
 1007377:	add    BYTE PTR [rcx+0x0],cl
 100737a:	jae    0x100737c
 100737c:	rex.XB add BYTE PTR [r15+0x0],bpl
 1007380:	ins    DWORD PTR es:[rdi],dx
 1007381:	add    BYTE PTR [rdx+0x0],ah
 1007384:	imul   eax,DWORD PTR [rax],0x69006e
 100738a:	outs   dx,BYTE PTR ds:[rsi]
 100738b:	add    BYTE PTR [rdi+0x0],ah
 100738e:	rex.W add BYTE PTR [rcx+0x0],spl
 1007392:	ins    BYTE PTR es:[rdi],dx
 1007393:	add    BYTE PTR [rsi+0x0],ah
 1007396:	rex.WRB add BYTE PTR [r9+0x0],r12b
 100739a:	jb     0x100739c
 100739c:	imul   eax,DWORD PTR [rax],0x73
	...
 10073a7:	add    BYTE PTR [rcx+0x0],cl
 10073aa:	jae    0x10073ac
 10073ac:	rex.XB add BYTE PTR [r15+0x0],bpl
 10073b0:	ins    DWORD PTR es:[rdi],dx
 10073b1:	add    BYTE PTR [rdx+0x0],ah
 10073b4:	imul   eax,DWORD PTR [rax],0x69006e
 10073ba:	outs   dx,BYTE PTR ds:[rsi]
 10073bb:	add    BYTE PTR [rdi+0x0],ah
 10073be:	rex.WRB add BYTE PTR [r9+0x0],r12b
 10073c2:	jb     0x10073c4
 10073c4:	imul   eax,DWORD PTR [rax],0x73
 10073c7:	add    BYTE PTR [rsi+0x0],ah
 10073ca:	outs   dx,DWORD PTR ds:[rsi]
 10073cb:	add    BYTE PTR [rdx+0x0],dh
 10073ce:	push   rbx
 10073cf:	add    BYTE PTR [rcx+0x0],bh
 10073d2:	ins    DWORD PTR es:[rdi],dx
 10073d3:	add    BYTE PTR [rdx+0x0],ah
 10073d6:	outs   dx,DWORD PTR ds:[rsi]
 10073d7:	add    BYTE PTR [rax+rax*1+0x73],ch
 10073db:	add    BYTE PTR [rax],al
 10073dd:	add    BYTE PTR [rax],al
 10073df:	add    BYTE PTR [rcx+0x0],cl
 10073e2:	jae    0x10073e4
 10073e4:	rex.XB add BYTE PTR [r15+0x0],bpl
 10073e8:	outs   dx,BYTE PTR ds:[rsi]
 10073e9:	add    BYTE PTR [rax+rax*1+0x72],dh
 10073ed:	add    BYTE PTR [rdi+0x0],ch
 10073f0:	ins    BYTE PTR es:[rdi],dx
 10073f1:	add    BYTE PTR [rax+0x0],dl
 10073f4:	imul   eax,DWORD PTR [rax],0x740063
 10073fa:	jne    0x10073fc
 10073fc:	jb     0x10073fe
 10073fe:	add    BYTE PTR gs:[rbx+0x0],dh
 1007402:	add    BYTE PTR [rax],al
 1007404:	add    BYTE PTR [rax],al
 1007406:	add    BYTE PTR [rax],al
 1007408:	rex.WB add BYTE PTR [r11+0x0],sil
 100740c:	rex.XB add BYTE PTR [r13+0x0],sil
 1007410:	jb     0x1007412
 1007412:	jb     0x1007414
 1007414:	add    BYTE PTR gs:[rsi+0x0],ch
 1007418:	movsxd eax,DWORD PTR [rax]
 100741a:	jns    0x100741c
 100741c:	push   rbx
 100741d:	add    BYTE PTR [rcx+0x0],bh
 1007420:	ins    DWORD PTR es:[rdi],dx
 1007421:	add    BYTE PTR [rdx+0x0],ah
 1007424:	outs   dx,DWORD PTR ds:[rsi]
 1007425:	add    BYTE PTR [rax+rax*1+0x73],ch
 1007429:	add    BYTE PTR [rax],al
 100742b:	add    BYTE PTR [rax],al
 100742d:	add    BYTE PTR [rax],al
 100742f:	add    BYTE PTR [rcx+0x0],cl
 1007432:	jae    0x1007434
 1007434:	rex.XB add BYTE PTR [r9+0x0],dil
 1007438:	jb     0x100743a
 100743a:	imul   eax,DWORD PTR [rax],0x6c006c
 1007440:	imul   eax,DWORD PTR [rax],0x63
 1007446:	add    BYTE PTR [rax],al
 1007448:	rex.WB add BYTE PTR [r11+0x0],sil
 100744c:	add    BYTE PTR [rbp+0x0],r12b
 1007450:	jbe    0x1007452
 1007452:	(bad)  
 1007453:	add    BYTE PTR [rsi+0x0],ch
 1007456:	(bad)  
 1007457:	add    BYTE PTR [rdi+0x0],ah
 100745a:	(bad)  
 100745b:	add    BYTE PTR [rdx+0x0],dh
 100745e:	imul   eax,DWORD PTR [rax],0x0
 1007464:	add    BYTE PTR [rax],al
 1007466:	add    BYTE PTR [rax],al
 1007468:	rex.WB add BYTE PTR [r11+0x0],sil
 100746c:	add    BYTE PTR [rcx+0x0],r13b
 1007470:	outs   dx,BYTE PTR ds:[rsi]
 1007471:	add    BYTE PTR [rdi+0x0],ah
 1007474:	(bad)  
 1007475:	add    BYTE PTR [rcx+0x0],ah
 1007478:	je     0x100747a
 100747a:	jae    0x100747c
 100747c:	add    BYTE PTR [rax],al
 100747e:	add    BYTE PTR [rax],al
 1007480:	rex.WB add BYTE PTR [r11+0x0],sil
 1007484:	add    BYTE PTR [r14+0x0],r13b
 1007488:	movsxd eax,DWORD PTR [rax]
 100748a:	ins    BYTE PTR es:[rdi],dx
 100748b:	add    BYTE PTR [rdi+0x0],ch
 100748e:	jae    0x1007490
 1007490:	add    BYTE PTR gs:[rax+rax*1+0x41],ah
 1007495:	add    BYTE PTR [rax+rax*1+0x70],ch
 1007499:	add    BYTE PTR [rax+0x0],ch
 100749c:	(bad)  
 100749d:	add    BYTE PTR [rsi+0x0],ch
 10074a0:	jne    0x10074a2
 10074a2:	ins    DWORD PTR es:[rdi],dx
 10074a3:	add    BYTE PTR [rbp+0x0],ah
 10074a6:	jb     0x10074a8
 10074a8:	imul   eax,DWORD PTR [rax],0x730063
 10074ae:	add    BYTE PTR [rax],al
 10074b0:	rex.WB add BYTE PTR [r11+0x0],sil
 10074b4:	add    BYTE PTR [r14+0x0],r13b
 10074b8:	movsxd eax,DWORD PTR [rax]
 10074ba:	ins    BYTE PTR es:[rdi],dx
 10074bb:	add    BYTE PTR [rdi+0x0],ch
 10074be:	jae    0x10074c0
 10074c0:	add    BYTE PTR gs:[rax+rax*1+0x43],ah
 10074c5:	add    BYTE PTR [rdx+0x0],cl
 10074c8:	rex.WXB add BYTE PTR [r8+r8*1+0x65],cl
 10074cd:	add    BYTE PTR [rax+rax*1+0x74],dh
 10074d1:	add    BYTE PTR [rbp+0x0],ah
 10074d4:	jb     0x10074d6
 10074d6:	jae    0x10074d8
 10074d8:	(bad)  
 10074d9:	add    BYTE PTR [rsi+0x0],ch
 10074dc:	add    BYTE PTR fs:[rbp+0x0],cl
 10074e0:	outs   dx,DWORD PTR ds:[rsi]
 10074e1:	add    BYTE PTR [rsi+0x0],ch
 10074e4:	je     0x10074e6
 10074e6:	push   0x7300
 10074eb:	add    BYTE PTR [rax],al
 10074ed:	add    BYTE PTR [rax],al
 10074ef:	add    BYTE PTR [rcx+0x0],cl
 10074f2:	jae    0x10074f4
 10074f4:	add    BYTE PTR [r8+rax*1+0x68],r14b
 10074f9:	add    BYTE PTR [rcx+0x0],ch
 10074fc:	outs   dx,DWORD PTR ds:[rsi]
 10074fd:	add    BYTE PTR [rax+0x0],dh
 1007500:	imul   eax,DWORD PTR [rax],0x63
 1007506:	add    BYTE PTR [rax],al
 1007508:	rex.WB add BYTE PTR [r11+0x0],sil
 100750c:	rex.RXB add BYTE PTR [r13+0x0],r12b
 1007510:	outs   dx,BYTE PTR ds:[rsi]
 1007511:	add    BYTE PTR [rbp+0x0],ah
 1007514:	jb     0x1007516
 1007516:	(bad)  
 1007517:	add    BYTE PTR [rax+rax*1+0x50],ch
 100751b:	add    BYTE PTR [rbp+0x0],dh
 100751e:	outs   dx,BYTE PTR ds:[rsi]
 100751f:	add    BYTE PTR [rbx+0x0],ah
 1007522:	je     0x1007524
 1007524:	jne    0x1007526
 1007526:	(bad)  
 1007527:	add    BYTE PTR [rax+rax*1+0x69],dh
 100752b:	add    BYTE PTR [rdi+0x0],ch
 100752e:	outs   dx,BYTE PTR ds:[rsi]
	...
 1007537:	add    BYTE PTR [rcx+0x0],cl
 100753a:	jae    0x100753c
 100753c:	rex.RXB add BYTE PTR [r13+0x0],r12b
 1007540:	outs   dx,DWORD PTR ds:[rsi]
 1007541:	add    BYTE PTR [rbp+0x0],ch
 1007544:	add    BYTE PTR gs:[rax+rax*1+0x72],dh
 1007549:	add    BYTE PTR [rcx+0x0],ch
 100754c:	movsxd eax,DWORD PTR [rax]
 100754e:	push   rbx
 100754f:	add    BYTE PTR [rax+0x0],ch
 1007552:	(bad)  
 1007553:	add    BYTE PTR [rax+0x0],dh
 1007556:	add    BYTE PTR gs:[rbx+0x0],dh
 100755a:	add    BYTE PTR [rax],al
 100755c:	add    BYTE PTR [rax],al
 100755e:	add    BYTE PTR [rax],al
 1007560:	rex.WB add BYTE PTR [r11+0x0],sil
 1007564:	rex.RXB add BYTE PTR [r13+0x0],r12b
 1007568:	outs   dx,DWORD PTR ds:[rsi]
 1007569:	add    BYTE PTR [rdx+0x0],dh
 100756c:	add    BYTE PTR [ecx+0x0],ch
 1007570:	(bad)  
 1007571:	add    BYTE PTR [rsi+0x0],ch
 1007574:	add    BYTE PTR [rax],al
 1007576:	add    BYTE PTR [rax],al
 1007578:	rex.WB add BYTE PTR [r11+0x0],sil
 100757c:	rex.RXB add BYTE PTR [r10+0x0],r14b
 1007580:	add    BYTE PTR gs:[rbp+0x0],ah
 1007584:	imul   eax,DWORD PTR [rax],0x0
 1007587:	add    BYTE PTR [rcx+0x0],cl
 100758a:	jae    0x100758c
 100758c:	rex.RXB add BYTE PTR [r10+0x0],r14b
 1007590:	add    BYTE PTR gs:[rbp+0x0],ah
 1007594:	imul   eax,DWORD PTR [rax],0x45
 1007597:	add    BYTE PTR [rax+0x0],bh
 100759a:	je     0x100759c
 100759c:	add    BYTE PTR gs:[rsi+0x0],ch
 10075a0:	add    BYTE PTR fs:[rbp+0x0],ah
 10075a4:	add    BYTE PTR fs:[rax],al
 10075a7:	add    BYTE PTR [rcx+0x0],cl
 10075aa:	jae    0x10075ac
 10075ac:	rex.RXB add BYTE PTR [r13+0x0],r14b
 10075b0:	push   0x0
 10075b2:	(bad)  
 10075b3:	add    BYTE PTR [rdx+0x0],dh
 10075b6:	(bad)  
 10075b7:	add    BYTE PTR [rax+rax*1+0x69],dh
 10075bb:	add    BYTE PTR [rax],al
 10075bd:	add    BYTE PTR [rax],al
 10075bf:	add    BYTE PTR [rcx+0x0],cl
 10075c2:	jae    0x10075c4
 10075c4:	rex.RXB add BYTE PTR [r13+0x0],r14b
 10075c8:	jb     0x10075ca
 10075ca:	ins    DWORD PTR es:[rdi],dx
 10075cb:	add    BYTE PTR [rbp+0x0],dh
 10075ce:	imul   eax,DWORD PTR [rax],0x68
 10075d1:	add    BYTE PTR [rcx+0x0],ch
 10075d4:	add    BYTE PTR [rax],al
 10075d6:	add    BYTE PTR [rax],al
 10075d8:	rex.WB add BYTE PTR [r11+0x0],sil
 10075dc:	rex.W add BYTE PTR [rcx+0x0],spl
 10075e0:	ins    BYTE PTR es:[rdi],dx
 10075e1:	add    BYTE PTR [rsi+0x0],ah
 10075e4:	ja     0x10075e6
 10075e6:	imul   eax,DWORD PTR [rax],0x740064
 10075ec:	push   0x6e006100
 10075f1:	add    BYTE PTR [rax+rax*1+0x46],ah
 10075f5:	add    BYTE PTR [rbp+0x0],dh
 10075f8:	ins    BYTE PTR es:[rdi],dx
 10075f9:	add    BYTE PTR [rax+rax*1+0x77],ch
 10075fd:	add    BYTE PTR [rcx+0x0],ch
 1007600:	add    BYTE PTR fs:[rax+rax*1+0x68],dh
 1007605:	add    BYTE PTR [rsi+0x0],al
 1007608:	outs   dx,DWORD PTR ds:[rsi]
 1007609:	add    BYTE PTR [rdx+0x0],dh
 100760c:	ins    DWORD PTR es:[rdi],dx
 100760d:	add    BYTE PTR [rbx+0x0],dh
	...
 1007618:	rex.WB add BYTE PTR [r11+0x0],sil
 100761c:	rex.W add BYTE PTR [rcx+0x0],spl
 1007620:	outs   dx,BYTE PTR ds:[rsi]
 1007621:	add    BYTE PTR [rdi+0x0],ah
 1007624:	jne    0x1007626
 1007626:	ins    BYTE PTR es:[rdi],dx
 1007627:	add    BYTE PTR [rbx+0x0],al
 100762a:	outs   dx,DWORD PTR ds:[rsi]
 100762b:	add    BYTE PTR [rbp+0x0],ch
 100762e:	jo     0x1007630
 1007630:	(bad)  
 1007631:	add    BYTE PTR [rax+rax*1+0x69],dh
 1007635:	add    BYTE PTR [rdx+0x0],ah
 1007638:	imul   eax,DWORD PTR [rax],0x69006c
 100763e:	je     0x1007640
 1007640:	jns    0x1007642
 1007642:	rex.WX add BYTE PTR [rcx+0x0],spl
 1007646:	ins    DWORD PTR es:[rdi],dx
 1007647:	add    BYTE PTR [rdi+0x0],ch
 100764a:	add    BYTE PTR [rax],al
 100764c:	add    BYTE PTR [rax],al
 100764e:	add    BYTE PTR [rax],al
 1007650:	rex.WB add BYTE PTR [r11+0x0],sil
 1007654:	rex.W add BYTE PTR [rcx+0x0],spl
 1007658:	outs   dx,BYTE PTR ds:[rsi]
 1007659:	add    BYTE PTR [rdi+0x0],ah
 100765c:	jne    0x100765e
 100765e:	ins    BYTE PTR es:[rdi],dx
 100765f:	add    BYTE PTR [rdx+0x0],cl
 1007662:	(bad)  
 1007663:	add    BYTE PTR [rbp+0x0],ch
 1007666:	outs   dx,DWORD PTR ds:[rsi]
	...
 100766f:	add    BYTE PTR [rcx+0x0],cl
 1007672:	jae    0x1007674
 1007674:	rex.W add BYTE PTR [rcx+0x0],spl
 1007678:	outs   dx,BYTE PTR ds:[rsi]
 1007679:	add    BYTE PTR [rdi+0x0],ah
 100767c:	jne    0x100767e
 100767e:	ins    BYTE PTR es:[rdi],dx
 100767f:	add    BYTE PTR [rbx+0x0],dl
 1007682:	jns    0x1007684
 1007684:	ins    BYTE PTR es:[rdi],dx
 1007685:	add    BYTE PTR [rax+rax*1+0x61],ch
 1007689:	add    BYTE PTR [rdx+0x0],ah
 100768c:	ins    BYTE PTR es:[rdi],dx
 100768d:	add    BYTE PTR [rbp+0x0],ah
 1007690:	jae    0x1007692
 1007692:	add    BYTE PTR [rax],al
 1007694:	add    BYTE PTR [rax],al
 1007696:	add    BYTE PTR [rax],al
 1007698:	rex.WB add BYTE PTR [r11+0x0],sil
 100769c:	rex.W add BYTE PTR [rbp+0x0],spl
 10076a0:	(bad)  
 10076a1:	add    BYTE PTR [rdx+0x0],dh
 10076a4:	add    BYTE PTR gs:[rdi+0x0],dh
	...
 10076b0:	rex.WB add BYTE PTR [r11+0x0],sil
 10076b4:	rex.W add BYTE PTR [rcx+0x0],bpl
 10076b8:	jb     0x10076ba
 10076ba:	(bad)  
 10076bb:	add    BYTE PTR [rdi+0x0],ah
 10076be:	(bad)  
 10076bf:	add    BYTE PTR [rsi+0x0],ch
 10076c2:	(bad)  
 10076c3:	add    BYTE PTR [rax],al
 10076c5:	add    BYTE PTR [rax],al
 10076c7:	add    BYTE PTR [rcx+0x0],cl
 10076ca:	jae    0x10076cc
 10076cc:	rex.WB add BYTE PTR [r8+0x0],dl
 10076d0:	add    BYTE PTR [r13+0x0],al
 10076d4:	js     0x10076d6
 10076d6:	je     0x10076d8
 10076d8:	add    BYTE PTR gs:[rsi+0x0],ch
 10076dc:	jae    0x10076de
 10076de:	imul   eax,DWORD PTR [rax],0x6e006f
 10076e4:	jae    0x10076e6
	...
 10076ee:	add    BYTE PTR [rax],al
 10076f0:	rex.WB add BYTE PTR [r11+0x0],sil
 10076f4:	rex.WB add BYTE PTR [r8+rax*1+0x65],spl
 10076f9:	add    BYTE PTR [rdi+0x0],ch
 10076fc:	add    BYTE PTR [edx+0x0],dh
 1007700:	(bad)  
 1007701:	add    BYTE PTR [rax+0x0],dh
 1007704:	push   0x63006900
 1007709:	add    BYTE PTR [rax+rax*1+0x65],al
 100770d:	add    BYTE PTR [rbx+0x0],dh
 1007710:	movsxd eax,DWORD PTR [rax]
 1007712:	jb     0x1007714
 1007714:	imul   eax,DWORD PTR [rax],0x740070
 100771a:	imul   eax,DWORD PTR [rax],0x6e006f
 1007720:	rex.XB add BYTE PTR [r8+0x0],bpl
 1007724:	(bad)  
 1007725:	add    BYTE PTR [rdx+0x0],dh
 1007728:	(bad)  
 1007729:	add    BYTE PTR [rbx+0x0],ah
 100772c:	je     0x100772e
 100772e:	add    BYTE PTR gs:[rdx+0x0],dh
 1007732:	jae    0x1007734
 1007734:	add    BYTE PTR [rax],al
 1007736:	add    BYTE PTR [rax],al
 1007738:	rex.WB add BYTE PTR [r11+0x0],sil
 100773c:	rex.WXB add BYTE PTR [r9+0x0],spl
 1007740:	outs   dx,BYTE PTR ds:[rsi]
 1007741:	add    BYTE PTR [rdx+0x0],ah
 1007744:	jne    0x1007746
 1007746:	outs   dx,BYTE PTR ds:[rsi]
	...
 100774f:	add    BYTE PTR [rcx+0x0],cl
 1007752:	jae    0x1007754
 1007754:	rex.WXB add BYTE PTR [r9+0x0],spl
 1007758:	outs   dx,BYTE PTR ds:[rsi]
 1007759:	add    BYTE PTR [rdi+0x0],ah
 100775c:	js     0x100775e
 100775e:	imul   eax,DWORD PTR [rax],0x610052
 1007764:	add    BYTE PTR fs:[rcx+0x0],ch
 1007768:	movsxd eax,DWORD PTR [rax]
 100776a:	(bad)  
 100776b:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1007777:	add    BYTE PTR [rcx+0x0],cl
 100777a:	jae    0x100777c
 100777c:	rex.WXB add BYTE PTR [r9+0x0],spl
 1007780:	outs   dx,BYTE PTR ds:[rsi]
 1007781:	add    BYTE PTR [rsi+0x0],ch
 1007784:	(bad)  
 1007785:	add    BYTE PTR [rax+rax*1+0x61],ah
 1007789:	add    BYTE PTR [rax],al
 100778b:	add    BYTE PTR [rax],al
 100778d:	add    BYTE PTR [rax],al
 100778f:	add    BYTE PTR [rcx+0x0],cl
 1007792:	jae    0x1007794
 1007794:	rex.WXB add BYTE PTR [r9+0x0],spl
 1007798:	je     0x100779a
 100779a:	(bad)  
 100779b:	add    BYTE PTR [rbx+0x0],ch
 100779e:	(bad)  
 100779f:	add    BYTE PTR [rsi+0x0],ch
 10077a2:	(bad)  
 10077a3:	add    BYTE PTR [rax],al
 10077a5:	add    BYTE PTR [rax],al
 10077a7:	add    BYTE PTR [rcx+0x0],cl
 10077aa:	jae    0x10077ac
 10077ac:	rex.WXB add BYTE PTR [r8+0x0],bpl
 10077b0:	ins    DWORD PTR es:[rdi],dx
 10077b1:	add    BYTE PTR [rbp+0x0],ah
 10077b4:	jb     0x10077b6
 10077b6:	add    BYTE PTR [rax],al
 10077b8:	rex.WB add BYTE PTR [r11+0x0],sil
 10077bc:	rex.WR add BYTE PTR [rcx+0x0],r12b
 10077c0:	outs   dx,DWORD PTR ds:[rsi]
 10077c1:	add    BYTE PTR [rax],al
 10077c3:	add    BYTE PTR [rax],al
 10077c5:	add    BYTE PTR [rax],al
 10077c7:	add    BYTE PTR [rcx+0x0],cl
 10077ca:	jae    0x10077cc
 10077cc:	rex.WR add BYTE PTR [rcx+0x0],r12b
 10077d0:	je     0x10077d2
 10077d2:	imul   eax,DWORD PTR [rax],0x2d006e
 10077d8:	xor    DWORD PTR [rax],eax
 10077da:	push   rbx
 10077db:	add    BYTE PTR [rbp+0x0],dh
 10077de:	jo     0x10077e0
 10077e0:	jo     0x10077e2
 10077e2:	ins    BYTE PTR es:[rdi],dx
 10077e3:	add    BYTE PTR [rbp+0x0],ah
 10077e6:	ins    DWORD PTR es:[rdi],dx
 10077e7:	add    BYTE PTR [rbp+0x0],ah
 10077ea:	outs   dx,BYTE PTR ds:[rsi]
 10077eb:	add    BYTE PTR [rax+rax*1+0x0],dh
 10077ef:	add    BYTE PTR [rcx+0x0],cl
 10077f2:	jae    0x10077f4
 10077f4:	rex.WR add BYTE PTR [rcx+0x0],r12b
 10077f8:	je     0x10077fa
 10077fa:	imul   eax,DWORD PTR [rax],0x45006e
 1007800:	js     0x1007802
 1007802:	je     0x1007804
 1007804:	add    BYTE PTR gs:[rsi+0x0],ch
 1007808:	add    BYTE PTR fs:[rbp+0x0],ah
 100780c:	add    BYTE PTR fs:[rip+0x4100],ch        # 0x100b913
 1007813:	add    BYTE PTR [rax],al
 1007815:	add    BYTE PTR [rax],al
 1007817:	add    BYTE PTR [rcx+0x0],cl
 100781a:	jae    0x100781c
 100781c:	rex.WR add BYTE PTR [rcx+0x0],r12b
 1007820:	je     0x1007822
 1007822:	imul   eax,DWORD PTR [rax],0x45006e
 1007828:	js     0x100782a
 100782a:	je     0x100782c
 100782c:	add    BYTE PTR gs:[rsi+0x0],ch
 1007830:	add    BYTE PTR fs:[rbp+0x0],ah
 1007834:	add    BYTE PTR fs:[rip+0x4200],ch        # 0x100ba3b
 100783b:	add    BYTE PTR [rax],al
 100783d:	add    BYTE PTR [rax],al
 100783f:	add    BYTE PTR [rcx+0x0],cl
 1007842:	jae    0x1007844
 1007844:	rex.WR add BYTE PTR [rcx+0x0],r12b
 1007848:	je     0x100784a
 100784a:	imul   eax,DWORD PTR [rax],0x45006e
 1007850:	js     0x1007852
 1007852:	je     0x1007854
 1007854:	add    BYTE PTR gs:[rsi+0x0],ch
 1007858:	add    BYTE PTR fs:[rbp+0x0],ah
 100785c:	add    BYTE PTR fs:[rcx+0x0],al
 1007860:	add    BYTE PTR fs:[rax+rax*1+0x69],ah
 1007865:	add    BYTE PTR [rax+rax*1+0x69],dh
 1007869:	add    BYTE PTR [rdi+0x0],ch
 100786c:	outs   dx,BYTE PTR ds:[rsi]
 100786d:	add    BYTE PTR [rcx+0x0],ah
 1007870:	ins    BYTE PTR es:[rdi],dx
 1007871:	add    BYTE PTR [rax],al
 1007873:	add    BYTE PTR [rax],al
 1007875:	add    BYTE PTR [rax],al
 1007877:	add    BYTE PTR [rcx+0x0],cl
 100787a:	jae    0x100787c
 100787c:	rex.WR add BYTE PTR [rbp+0x0],r12b
 1007880:	je     0x1007882
 1007882:	je     0x1007884
 1007884:	add    BYTE PTR gs:[rdx+0x0],dh
 1007888:	ins    BYTE PTR es:[rdi],dx
 1007889:	add    BYTE PTR [rcx+0x0],ch
 100788c:	imul   eax,DWORD PTR [rax],0x65
 100788f:	add    BYTE PTR [rbx+0x0],dl
 1007892:	jns    0x1007894
 1007894:	ins    DWORD PTR es:[rdi],dx
 1007895:	add    BYTE PTR [rdx+0x0],ah
 1007898:	outs   dx,DWORD PTR ds:[rsi]
 1007899:	add    BYTE PTR [rax+rax*1+0x73],ch
 100789d:	add    BYTE PTR [rax],al
 100789f:	add    BYTE PTR [rcx+0x0],cl
 10078a2:	jae    0x10078a4
 10078a4:	rex.WRB add BYTE PTR [r9+0x0],r12b
 10078a8:	ins    BYTE PTR es:[rdi],dx
 10078a9:	add    BYTE PTR [rcx+0x0],ah
 10078ac:	jns    0x10078ae
 10078ae:	(bad)  
 10078af:	add    BYTE PTR [rax+rax*1+0x61],ch
 10078b3:	add    BYTE PTR [rbp+0x0],ch
 10078b6:	add    BYTE PTR [rax],al
 10078b8:	rex.WB add BYTE PTR [r11+0x0],sil
 10078bc:	rex.WRB add BYTE PTR [r9+0x0],r12b
 10078c0:	je     0x10078c2
 10078c2:	push   0x6d006500
 10078c7:	add    BYTE PTR [rcx+0x0],ah
 10078ca:	je     0x10078cc
 10078cc:	imul   eax,DWORD PTR [rax],0x610063
 10078d2:	ins    BYTE PTR es:[rdi],dx
 10078d3:	add    BYTE PTR [rdi+0x0],cl
 10078d6:	jo     0x10078d8
 10078d8:	add    BYTE PTR gs:[rdx+0x0],dh
 10078dc:	(bad)  
 10078dd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10078e1:	add    BYTE PTR [rdx+0x0],dh
 10078e4:	jae    0x10078e6
 10078e6:	add    BYTE PTR [rax],al
 10078e8:	rex.WB add BYTE PTR [r11+0x0],sil
 10078ec:	rex.WRB add BYTE PTR [r9+0x0],r13b
 10078f0:	jae    0x10078f2
 10078f2:	movsxd eax,DWORD PTR [rax]
 10078f4:	add    BYTE PTR gs:[rax+rax*1+0x6c],ch
 10078f9:	add    BYTE PTR [rcx+0x0],ah
 10078fc:	outs   dx,BYTE PTR ds:[rsi]
 10078fd:	add    BYTE PTR [rbp+0x0],ah
 1007900:	outs   dx,DWORD PTR ds:[rsi]
 1007901:	add    BYTE PTR [rbp+0x0],dh
 1007904:	jae    0x1007906
 1007906:	push   rbx
 1007907:	add    BYTE PTR [rcx+0x0],bh
 100790a:	ins    DWORD PTR es:[rdi],dx
 100790b:	add    BYTE PTR [rdx+0x0],ah
 100790e:	outs   dx,DWORD PTR ds:[rsi]
 100790f:	add    BYTE PTR [rax+rax*1+0x73],ch
 1007913:	add    BYTE PTR [rax],al
 1007915:	add    BYTE PTR [rax],al
 1007917:	add    BYTE PTR [rcx+0x0],cl
 100791a:	jae    0x100791c
 100791c:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1007920:	jae    0x1007922
 1007922:	movsxd eax,DWORD PTR [rax]
 1007924:	add    BYTE PTR gs:[rax+rax*1+0x6c],ch
 1007929:	add    BYTE PTR [rcx+0x0],ah
 100792c:	outs   dx,BYTE PTR ds:[rsi]
 100792d:	add    BYTE PTR [rbp+0x0],ah
 1007930:	outs   dx,DWORD PTR ds:[rsi]
 1007931:	add    BYTE PTR [rbp+0x0],dh
 1007934:	jae    0x1007936
 1007936:	push   rsp
 1007937:	add    BYTE PTR [rbp+0x0],ah
 100793a:	movsxd eax,DWORD PTR [rax]
 100793c:	push   0x69006e00
 1007941:	add    BYTE PTR [rbx+0x0],ah
 1007944:	(bad)  
 1007945:	add    BYTE PTR [rax+rax*1+0x0],ch
 1007949:	add    BYTE PTR [rax],al
 100794b:	add    BYTE PTR [rax],al
 100794d:	add    BYTE PTR [rax],al
 100794f:	add    BYTE PTR [rcx+0x0],cl
 1007952:	jae    0x1007954
 1007954:	rex.WRB add BYTE PTR [r15+0x0],r13b
 1007958:	outs   dx,BYTE PTR ds:[rsi]
 1007959:	add    BYTE PTR [rdi+0x0],ah
 100795c:	outs   dx,DWORD PTR ds:[rsi]
 100795d:	add    BYTE PTR [rax+rax*1+0x69],ch
 1007961:	add    BYTE PTR [rcx+0x0],ah
 1007964:	outs   dx,BYTE PTR ds:[rsi]
 1007965:	add    BYTE PTR [rax],al
 1007967:	add    BYTE PTR [rcx+0x0],cl
 100796a:	jae    0x100796c
 100796c:	rex.WRB add BYTE PTR [r9+0x0],r15b
 1007970:	(bad)  
 1007971:	add    BYTE PTR [rsi+0x0],ch
 1007974:	ins    DWORD PTR es:[rdi],dx
 1007975:	add    BYTE PTR [rcx+0x0],ah
 1007978:	jb     0x100797a
 100797a:	add    BYTE PTR [rax],al
 100797c:	add    BYTE PTR [rax],al
 100797e:	add    BYTE PTR [rax],al
 1007980:	rex.WB add BYTE PTR [r11+0x0],sil
 1007984:	rex.WRX add BYTE PTR [rbp+0x0],r14b
 1007988:	ins    DWORD PTR es:[rdi],dx
 1007989:	add    BYTE PTR [rdx+0x0],ah
 100798c:	add    BYTE PTR gs:[rdx+0x0],dh
 1007990:	rex.RX add BYTE PTR [rdi+0x0],r13b
 1007994:	jb     0x1007996
 1007996:	ins    DWORD PTR es:[rdi],dx
 1007997:	add    BYTE PTR [rbx+0x0],dh
 100799a:	add    BYTE PTR [rax],al
 100799c:	add    BYTE PTR [rax],al
 100799e:	add    BYTE PTR [rax],al
 10079a0:	rex.WB add BYTE PTR [r11+0x0],sil
 10079a4:	rex.WRXB add BYTE PTR [r15+0x0],r12b
 10079a8:	push   0x6d006100
 10079ad:	add    BYTE PTR [rax],al
 10079af:	add    BYTE PTR [rcx+0x0],cl
 10079b2:	jae    0x10079b4
 10079b4:	rex.WRXB add BYTE PTR [r8+0x0],r14b
 10079b8:	je     0x10079ba
 10079ba:	imul   eax,DWORD PTR [rax],0x610063
 10079c0:	ins    BYTE PTR es:[rdi],dx
 10079c1:	add    BYTE PTR [rbx+0x0],al
 10079c4:	push   0x72006100
 10079c9:	add    BYTE PTR [rcx+0x0],ah
 10079cc:	movsxd eax,DWORD PTR [rax]
 10079ce:	je     0x10079d0
 10079d0:	add    BYTE PTR gs:[rdx+0x0],dh
 10079d4:	push   rdx
 10079d5:	add    BYTE PTR [rbp+0x0],ah
 10079d8:	movsxd eax,DWORD PTR [rax]
 10079da:	outs   dx,DWORD PTR ds:[rsi]
 10079db:	add    BYTE PTR [rdi+0x0],ah
 10079de:	outs   dx,BYTE PTR ds:[rsi]
 10079df:	add    BYTE PTR [rcx+0x0],ch
 10079e2:	je     0x10079e4
 10079e4:	imul   eax,DWORD PTR [rax],0x6e006f
 10079ea:	add    BYTE PTR [rax],al
 10079ec:	add    BYTE PTR [rax],al
 10079ee:	add    BYTE PTR [rax],al
 10079f0:	rex.WB add BYTE PTR [r11+0x0],sil
 10079f4:	rex.WRXB add BYTE PTR [r10+0x0],r14b
 10079f8:	imul   eax,DWORD PTR [rax],0x610079
 10079fe:	add    BYTE PTR [rax],al
 1007a00:	rex.WB add BYTE PTR [r11+0x0],sil
 1007a04:	push   rax
 1007a05:	add    BYTE PTR [rdx+0x0],dh
 1007a08:	imul   eax,DWORD PTR [rax],0x610076
 1007a0e:	je     0x1007a10
 1007a10:	add    BYTE PTR gs:[rbp+0x0],dl
 1007a14:	jae    0x1007a16
 1007a16:	add    BYTE PTR gs:[rax],al
 1007a19:	add    BYTE PTR [rax],al
 1007a1b:	add    BYTE PTR [rax],al
 1007a1d:	add    BYTE PTR [rax],al
 1007a1f:	add    BYTE PTR [rcx+0x0],cl
 1007a22:	jae    0x1007a24
 1007a24:	push   rdx
 1007a25:	add    BYTE PTR [rbp+0x0],dh
 1007a28:	outs   dx,BYTE PTR ds:[rsi]
 1007a29:	add    BYTE PTR [rcx+0x0],ch
 1007a2c:	movsxd eax,DWORD PTR [rax]
 1007a2e:	add    BYTE PTR [rax],al
 1007a30:	rex.WB add BYTE PTR [r11+0x0],sil
 1007a34:	push   rbx
 1007a35:	add    BYTE PTR [rcx+0x0],ch
 1007a38:	outs   dx,BYTE PTR ds:[rsi]
 1007a39:	add    BYTE PTR [rax+0x0],ch
 1007a3c:	(bad)  
 1007a3d:	add    BYTE PTR [rax+rax*1+0x61],ch
 1007a41:	add    BYTE PTR [rax],al
 1007a43:	add    BYTE PTR [rax],al
 1007a45:	add    BYTE PTR [rax],al
 1007a47:	add    BYTE PTR [rcx+0x0],cl
 1007a4a:	jae    0x1007a4c
 1007a4c:	push   rbx
 1007a4d:	add    BYTE PTR [rbp+0x0],ch
 1007a50:	(bad)  
 1007a51:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1007a55:	add    BYTE PTR [rsi+0x0],al
 1007a58:	outs   dx,DWORD PTR ds:[rsi]
 1007a59:	add    BYTE PTR [rdx+0x0],dh
 1007a5c:	ins    DWORD PTR es:[rdi],dx
 1007a5d:	add    BYTE PTR [rsi+0x0],dl
 1007a60:	(bad)  
 1007a61:	add    BYTE PTR [rdx+0x0],dh
 1007a64:	imul   eax,DWORD PTR [rax],0x6e0061
 1007a6a:	je     0x1007a6c
 1007a6c:	jae    0x1007a6e
 1007a6e:	add    BYTE PTR [rax],al
 1007a70:	rex.WB add BYTE PTR [r11+0x0],sil
 1007a74:	push   rbx
 1007a75:	add    BYTE PTR [rax+0x0],dh
 1007a78:	(bad)  
 1007a79:	add    BYTE PTR [rbx+0x0],ah
 1007a7c:	imul   eax,DWORD PTR [rax],0x67006e
 1007a82:	rex.WRB add BYTE PTR [r15+0x0],r13b
 1007a86:	add    BYTE PTR fs:[rcx+0x0],ch
 1007a8a:	data16 add BYTE PTR [rcx+0x0],ch
 1007a8e:	add    BYTE PTR gs:[rdx+0x0],dh
 1007a92:	rex.WR add BYTE PTR [rbp+0x0],r12b
 1007a96:	je     0x1007a98
 1007a98:	je     0x1007a9a
 1007a9a:	add    BYTE PTR gs:[rdx+0x0],dh
 1007a9e:	jae    0x1007aa0
	...
 1007aa8:	rex.WB add BYTE PTR [r11+0x0],sil
 1007aac:	push   rbx
 1007aad:	add    BYTE PTR [rax+0x0],dh
 1007ab0:	add    BYTE PTR gs:[rbx+0x0],ah
 1007ab4:	imul   eax,DWORD PTR [rax],0x6c0061
 1007aba:	jae    0x1007abc
 1007abc:	add    BYTE PTR [rax],al
 1007abe:	add    BYTE PTR [rax],al
 1007ac0:	rex.WB add BYTE PTR [r11+0x0],sil
 1007ac4:	push   rbx
 1007ac5:	add    BYTE PTR [rax+0x0],dh
 1007ac8:	add    BYTE PTR gs:[rbx+0x0],ah
 1007acc:	imul   eax,DWORD PTR [rax],0x6c0061
 1007ad2:	jae    0x1007ad4
 1007ad4:	add    BYTE PTR [r8],al
 1007ad7:	add    BYTE PTR [rcx+0x0],cl
 1007ada:	jae    0x1007adc
 1007adc:	push   rbx
 1007add:	add    BYTE PTR [rbp+0x0],dh
 1007ae0:	jo     0x1007ae2
 1007ae2:	add    BYTE PTR gs:[rdx+0x0],dh
 1007ae6:	jae    0x1007ae8
 1007ae8:	movsxd eax,DWORD PTR [rax]
 1007aea:	jb     0x1007aec
 1007aec:	imul   eax,DWORD PTR [rax],0x740070
 1007af2:	jae    0x1007af4
 1007af4:	(bad)  
 1007af5:	add    BYTE PTR [rsi+0x0],ch
 1007af8:	add    BYTE PTR fs:[rbx+0x0],dl
 1007afc:	jne    0x1007afe
 1007afe:	(bad)  
 1007aff:	add    BYTE PTR [rbx+0x0],dh
 1007b02:	movsxd eax,DWORD PTR [rax]
 1007b04:	jb     0x1007b06
 1007b06:	imul   eax,DWORD PTR [rax],0x740070
 1007b0c:	jae    0x1007b0e
 1007b0e:	add    BYTE PTR [rax],al
 1007b10:	rex.WB add BYTE PTR [r11+0x0],sil
 1007b14:	push   rbx
 1007b15:	add    BYTE PTR [rcx+0x0],bh
 1007b18:	jb     0x1007b1a
 1007b1a:	imul   eax,DWORD PTR [rax],0x630061
	...
 1007b28:	rex.WB add BYTE PTR [r11+0x0],sil
 1007b2c:	push   rsp
 1007b2d:	add    BYTE PTR [rcx+0x0],ah
 1007b30:	ins    DWORD PTR es:[rdi],dx
 1007b31:	add    BYTE PTR [rcx+0x0],ch
 1007b34:	ins    BYTE PTR es:[rdi],dx
 1007b35:	add    BYTE PTR [rax],al
 1007b37:	add    BYTE PTR [rcx+0x0],cl
 1007b3a:	jae    0x1007b3c
 1007b3c:	push   rsp
 1007b3d:	add    BYTE PTR [rbp+0x0],ah
 1007b40:	ins    BYTE PTR es:[rdi],dx
 1007b41:	add    BYTE PTR [rbp+0x0],dh
 1007b44:	add    BYTE PTR [ebp+0x0],dh
	...
 1007b50:	rex.WB add BYTE PTR [r11+0x0],sil
 1007b54:	push   rsp
 1007b55:	add    BYTE PTR [rax+0x0],ch
 1007b58:	(bad)  
 1007b59:	add    BYTE PTR [rcx+0x0],ah
 1007b5c:	outs   dx,BYTE PTR ds:[rsi]
 1007b5d:	add    BYTE PTR [rcx+0x0],ah
	...
 1007b68:	rex.WB add BYTE PTR [r11+0x0],sil
 1007b6c:	push   rsp
 1007b6d:	add    BYTE PTR [rax+0x0],ch
 1007b70:	(bad)  
 1007b71:	add    BYTE PTR [rcx+0x0],ch
 1007b74:	add    BYTE PTR [rax],al
 1007b76:	add    BYTE PTR [rax],al
 1007b78:	rex.WB add BYTE PTR [r11+0x0],sil
 1007b7c:	push   rsp
 1007b7d:	add    BYTE PTR [rcx+0x0],ch
 1007b80:	(bad)  
 1007b81:	add    BYTE PTR [rbp+0x0],ah
 1007b84:	je     0x1007b86
 1007b86:	(bad)  
 1007b87:	add    BYTE PTR [rsi+0x0],ch
 1007b8a:	add    BYTE PTR [rax],al
 1007b8c:	add    BYTE PTR [rax],al
 1007b8e:	add    BYTE PTR [rax],al
 1007b90:	rex.WB add BYTE PTR [r11+0x0],sil
 1007b94:	push   rbp
 1007b95:	add    BYTE PTR [rsi+0x0],ch
 1007b98:	imul   eax,DWORD PTR [rax],0x690066
 1007b9e:	add    BYTE PTR gs:[rax+rax*1+0x43],ah
 1007ba3:	add    BYTE PTR [rcx+0x0],ah
 1007ba6:	outs   dx,BYTE PTR ds:[rsi]
 1007ba7:	add    BYTE PTR [rcx+0x0],ah
 1007baa:	add    BYTE PTR fs:[rcx+0x0],ch
 1007bae:	(bad)  
 1007baf:	add    BYTE PTR [rsi+0x0],ch
 1007bb2:	add    BYTE PTR [r10+0x0],spl
 1007bb6:	outs   dx,DWORD PTR ds:[rsi]
 1007bb7:	add    BYTE PTR [rdx+0x0],dh
 1007bba:	imul   eax,DWORD PTR [rax],0x690067
 1007bc0:	outs   dx,BYTE PTR ds:[rsi]
 1007bc1:	add    BYTE PTR [rcx+0x0],ah
 1007bc4:	ins    BYTE PTR es:[rdi],dx
 1007bc5:	add    BYTE PTR [rbx+0x0],dl
 1007bc8:	jns    0x1007bca
 1007bca:	ins    BYTE PTR es:[rdi],dx
 1007bcb:	add    BYTE PTR [rax+rax*1+0x61],ch
 1007bcf:	add    BYTE PTR [rdx+0x0],ah
 1007bd2:	imul   eax,DWORD PTR [rax],0x730063
	...
 1007be0:	rex.WB add BYTE PTR [r11+0x0],sil
 1007be4:	pop    rcx
 1007be5:	add    BYTE PTR [rcx+0x0],ch
 1007be8:	push   rdx
 1007be9:	add    BYTE PTR [rcx+0x0],ah
 1007bec:	add    BYTE PTR fs:[rcx+0x0],ch
 1007bf0:	movsxd eax,DWORD PTR [rax]
 1007bf2:	(bad)  
 1007bf3:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1007bff:	add    BYTE PTR [rcx+0x0],cl
 1007c02:	jae    0x1007c04
 1007c04:	pop    rcx
 1007c05:	add    BYTE PTR [rcx+0x0],ch
 1007c08:	push   rbx
 1007c09:	add    BYTE PTR [rcx+0x0],bh
 1007c0c:	ins    BYTE PTR es:[rdi],dx
 1007c0d:	add    BYTE PTR [rax+rax*1+0x61],ch
 1007c11:	add    BYTE PTR [rdx+0x0],ah
 1007c14:	ins    BYTE PTR es:[rdi],dx
 1007c15:	add    BYTE PTR [rbp+0x0],ah
 1007c18:	jae    0x1007c1a
 1007c1a:	add    BYTE PTR [rax],al
 1007c1c:	rex.WR add BYTE PTR [rax],r8b
 1007c1f:	add    BYTE PTR [rax+rax*1+0x6c],cl
 1007c23:	add    BYTE PTR [rax],al
 1007c25:	add    BYTE PTR [rax],al
 1007c27:	add    BYTE PTR [rax+rax*1+0x6d],cl
 1007c2b:	add    BYTE PTR [rax],al
 1007c2d:	add    BYTE PTR [rax],al
 1007c2f:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1007c33:	add    BYTE PTR [rax],al
 1007c35:	add    BYTE PTR [rax],al
 1007c37:	add    BYTE PTR [rax+rax*1+0x74],cl
 1007c3b:	add    BYTE PTR [rax],al
 1007c3d:	add    BYTE PTR [rax],al
 1007c3f:	add    BYTE PTR [rax+rax*1+0x75],cl
 1007c43:	add    BYTE PTR [rax],al
 1007c45:	add    BYTE PTR [rax],al
 1007c47:	add    BYTE PTR [rbp+0x0],cl
 1007c4a:	add    BYTE PTR [rax],al
 1007c4c:	rex.WRB add BYTE PTR [r11+0x0],r12b
 1007c50:	add    BYTE PTR [rax],al
 1007c52:	add    BYTE PTR [rax],al
 1007c54:	rex.WRB add BYTE PTR [r13+0x0],r12b
 1007c58:	add    BYTE PTR [rax],al
 1007c5a:	add    BYTE PTR [rax],al
 1007c5c:	rex.WRB add BYTE PTR [r14+0x0],r13b
 1007c60:	add    BYTE PTR [rax],al
 1007c62:	add    BYTE PTR [rax],al
 1007c64:	rex.WRX add BYTE PTR [rax],r8b
 1007c67:	add    BYTE PTR [rsi+0x0],cl
 1007c6a:	add    BYTE PTR fs:[rax],al
 1007c6d:	add    BYTE PTR [rax],al
 1007c6f:	add    BYTE PTR [rsi+0x0],cl
 1007c72:	ins    BYTE PTR es:[rdi],dx
 1007c73:	add    BYTE PTR [rax],al
 1007c75:	add    BYTE PTR [rax],al
 1007c77:	add    BYTE PTR [rsi+0x0],cl
 1007c7a:	outs   dx,DWORD PTR ds:[rsi]
 1007c7b:	add    BYTE PTR [rax],al
 1007c7d:	add    BYTE PTR [rax],al
 1007c7f:	add    BYTE PTR [rax+0x0],dl
 1007c82:	add    BYTE PTR [rax],al
 1007c84:	push   rax
 1007c85:	add    BYTE PTR [rbx+0x0],ah
 1007c88:	add    BYTE PTR [rax],al
 1007c8a:	add    BYTE PTR [rax],al
 1007c8c:	push   rax
 1007c8d:	add    BYTE PTR [rax+rax*1+0x0],ah
 1007c91:	add    BYTE PTR [rax],al
 1007c93:	add    BYTE PTR [rax+0x0],dl
 1007c96:	add    BYTE PTR gs:[rax],al
 1007c99:	add    BYTE PTR [rax],al
 1007c9b:	add    BYTE PTR [rax+0x0],dl
 1007c9e:	data16 add BYTE PTR [rax],al
 1007ca1:	add    BYTE PTR [rax],al
 1007ca3:	add    BYTE PTR [rax+0x0],dl
 1007ca6:	imul   eax,DWORD PTR [rax],0x0
 1007cac:	push   rax
 1007cad:	add    BYTE PTR [rdi+0x0],ch
 1007cb0:	add    BYTE PTR [rax],al
 1007cb2:	add    BYTE PTR [rax],al
 1007cb4:	push   rax
 1007cb5:	add    BYTE PTR [rbx+0x0],dh
 1007cb8:	add    BYTE PTR [rax],al
 1007cba:	add    BYTE PTR [rax],al
 1007cbc:	push   rbx
 1007cbd:	add    BYTE PTR [rax],al
 1007cbf:	add    BYTE PTR [rbx+0x0],dl
 1007cc2:	movsxd eax,DWORD PTR [rax]
 1007cc4:	add    BYTE PTR [rax],al
 1007cc6:	add    BYTE PTR [rax],al
 1007cc8:	push   rbx
 1007cc9:	add    BYTE PTR [rbx+0x0],ch
 1007ccc:	add    BYTE PTR [rax],al
 1007cce:	add    BYTE PTR [rax],al
 1007cd0:	push   rbx
 1007cd1:	add    BYTE PTR [rbp+0x0],ch
 1007cd4:	add    BYTE PTR [rax],al
 1007cd6:	add    BYTE PTR [rax],al
 1007cd8:	push   rbx
 1007cd9:	add    BYTE PTR [rdi+0x0],ch
 1007cdc:	add    BYTE PTR [rax],al
 1007cde:	add    BYTE PTR [rax],al
 1007ce0:	pop    rdx
 1007ce1:	add    BYTE PTR [rax],al
 1007ce3:	add    BYTE PTR [rdx+0x0],bl
 1007ce6:	ins    BYTE PTR es:[rdi],dx
 1007ce7:	add    BYTE PTR [rax],al
 1007ce9:	add    BYTE PTR [rax],al
 1007ceb:	add    BYTE PTR [rdx+0x0],bl
 1007cee:	jo     0x1007cf0
 1007cf0:	add    BYTE PTR [rax],al
 1007cf2:	add    BYTE PTR [rax],al
 1007cf4:	pop    rdx
 1007cf5:	add    BYTE PTR [rbx+0x0],dh
	...
 1007d00:	add    BYTE PTR [r10+0x0],sil
 1007d04:	(bad)  
 1007d05:	add    BYTE PTR [rdx+0x0],ah
 1007d08:	imul   eax,DWORD PTR [rax],0x63
 1007d0e:	add    BYTE PTR [rax],al
 1007d10:	add    BYTE PTR [rcx+0x0],r12b
 1007d14:	jb     0x1007d16
 1007d16:	imul   eax,DWORD PTR [rax],0x0
 1007d1c:	add    BYTE PTR [rax],al
 1007d1e:	add    BYTE PTR [rax],al
 1007d20:	rex.XB add BYTE PTR [r8+0x0],bpl
 1007d24:	imul   eax,DWORD PTR [rax],0x65006e
 1007d2a:	jae    0x1007d2c
 1007d2c:	add    BYTE PTR gs:[rdi+0x0],bl
 1007d30:	push   rsp
 1007d31:	add    BYTE PTR [rcx+0x0],ah
 1007d34:	imul   eax,DWORD PTR [rax],0x610077
 1007d3a:	outs   dx,BYTE PTR ds:[rsi]
 1007d3b:	add    BYTE PTR [rdi+0x0],bl
 1007d3e:	push   rbx
 1007d3f:	add    BYTE PTR [rax+rax*1+0x72],dh
 1007d43:	add    BYTE PTR [rdi+0x0],ch
 1007d46:	imul   eax,DWORD PTR [rax],0x65
 1007d49:	add    BYTE PTR [rax],al
 1007d4b:	add    BYTE PTR [rax],al
 1007d4d:	add    BYTE PTR [rax],al
 1007d4f:	add    BYTE PTR [rbx+0x0],al
 1007d52:	jp     0x1007d54
 1007d54:	add    BYTE PTR gs:[rbx+0x0],ah
 1007d58:	push   0x0
 1007d5d:	add    BYTE PTR [rax],al
 1007d5f:	add    BYTE PTR [rax+rax*1+0x61],al
 1007d63:	add    BYTE PTR [rsi+0x0],ch
 1007d66:	imul   eax,DWORD PTR [rax],0x680073
 1007d6c:	pop    rdi
 1007d6d:	add    BYTE PTR [rsi+0x0],cl
 1007d70:	outs   dx,DWORD PTR ds:[rsi]
 1007d71:	add    BYTE PTR [rdx+0x0],dh
 1007d74:	ja     0x1007d76
 1007d76:	add    BYTE PTR gs:[rdi+0x0],ah
 1007d7a:	imul   eax,DWORD PTR [rax],0x6e0061
	...
 1007d88:	pop    rcx
 1007d89:	add    BYTE PTR [rcx+0x0],ah
 1007d8c:	imul   eax,DWORD PTR [rax],0x75
 1007d8f:	add    BYTE PTR [rax+rax*1+0x0],dh
 1007d93:	add    BYTE PTR [rax],al
 1007d95:	add    BYTE PTR [rax],al
 1007d97:	add    BYTE PTR [rdi+0x0],al
 1007d9a:	jb     0x1007d9c
 1007d9c:	add    BYTE PTR gs:[rbp+0x0],ah
 1007da0:	imul   eax,DWORD PTR [rax],0x0
 1007da3:	add    BYTE PTR [rax],al
 1007da5:	add    BYTE PTR [rax],al
 1007da7:	add    BYTE PTR [rax+rax*1+0x61],cl
 1007dab:	add    BYTE PTR [rax+rax*1+0x69],dh
 1007daf:	add    BYTE PTR [rsi+0x0],ch
 1007db2:	xor    DWORD PTR [rax],eax
 1007db4:	pop    rdi
 1007db5:	add    BYTE PTR [rdi+0x0],al
 1007db8:	add    BYTE PTR gs:[rsi+0x0],ch
 1007dbc:	add    BYTE PTR gs:[rdx+0x0],dh
 1007dc0:	(bad)  
 1007dc1:	add    BYTE PTR [rax+rax*1+0x0],ch
 1007dc5:	add    BYTE PTR [rax],al
 1007dc7:	add    BYTE PTR [rax+rax*1+0x72],dl
 1007dcb:	add    BYTE PTR [rcx+0x0],ah
 1007dce:	add    BYTE PTR fs:[rcx+0x0],ch
 1007dd2:	je     0x1007dd4
 1007dd4:	imul   eax,DWORD PTR [rax],0x6e006f
 1007dda:	(bad)  
 1007ddb:	add    BYTE PTR [rax+rax*1+0x5f],ch
 1007ddf:	add    BYTE PTR [rbx+0x0],dl
 1007de2:	jo     0x1007de4
 1007de4:	(bad)  
 1007de5:	add    BYTE PTR [rsi+0x0],ch
 1007de8:	imul   eax,DWORD PTR [rax],0x680073
 1007dee:	add    BYTE PTR [rax],al
 1007df0:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1007df4:	outs   dx,BYTE PTR ds:[rsi]
 1007df5:	add    BYTE PTR [rsi+0x0],ch
 1007df8:	imul   eax,DWORD PTR [rax],0x680073
 1007dfe:	pop    rdi
 1007dff:	add    BYTE PTR [rbx+0x0],dl
 1007e02:	ja     0x1007e04
 1007e04:	add    BYTE PTR gs:[rax+rax*1+0x69],ah
 1007e09:	add    BYTE PTR [rbx+0x0],dh
 1007e0c:	push   0x46000000
 1007e11:	add    BYTE PTR [rdx+0x0],dh
 1007e14:	add    BYTE PTR gs:[rsi+0x0],ch
 1007e18:	movsxd eax,DWORD PTR [rax]
 1007e1a:	push   0x0
 1007e1f:	add    BYTE PTR [rax+0x0],cl
 1007e22:	add    BYTE PTR gs:[rdx+0x0],ah
 1007e26:	jb     0x1007e28
 1007e28:	add    BYTE PTR gs:[rdi+0x0],dh
 1007e2c:	add    BYTE PTR [rax],al
 1007e2e:	add    BYTE PTR [rax],al
 1007e30:	rex.W add BYTE PTR [rbp+0x0],sil
 1007e34:	outs   dx,BYTE PTR ds:[rsi]
 1007e35:	add    BYTE PTR [rdi+0x0],ah
 1007e38:	(bad)  
 1007e39:	add    BYTE PTR [rdx+0x0],dh
 1007e3c:	imul   eax,DWORD PTR [rax],0x6e0061
 1007e42:	add    BYTE PTR [rax],al
 1007e44:	add    BYTE PTR [rax],al
 1007e46:	add    BYTE PTR [rax],al
 1007e48:	rex.WB add BYTE PTR [r11+0x0],spl
 1007e4c:	add    BYTE PTR gs:[rax+rax*1+0x61],ch
 1007e51:	add    BYTE PTR [rsi+0x0],ch
 1007e54:	add    BYTE PTR fs:[rcx+0x0],ch
 1007e58:	movsxd eax,DWORD PTR [rax]
 1007e5a:	add    BYTE PTR [rax],al
 1007e5c:	add    BYTE PTR [rax],al
 1007e5e:	add    BYTE PTR [rax],al
 1007e60:	rex.XB add BYTE PTR [r15+0x0],bpl
 1007e64:	jb     0x1007e66
 1007e66:	jae    0x1007e68
 1007e68:	imul   eax,DWORD PTR [rax],0x610063
 1007e6e:	outs   dx,BYTE PTR ds:[rsi]
	...
 1007e77:	add    BYTE PTR [rdx+0x0],cl
 1007e7a:	(bad)  
 1007e7b:	add    BYTE PTR [rax+0x0],dh
 1007e7e:	(bad)  
 1007e7f:	add    BYTE PTR [rsi+0x0],ch
 1007e82:	add    BYTE PTR gs:[rbx+0x0],dh
 1007e86:	add    BYTE PTR gs:[rax],al
 1007e89:	add    BYTE PTR [rax],al
 1007e8b:	add    BYTE PTR [rax],al
 1007e8d:	add    BYTE PTR [rax],al
 1007e8f:	add    BYTE PTR [rbx+0x0],cl
 1007e92:	outs   dx,DWORD PTR ds:[rsi]
 1007e93:	add    BYTE PTR [rdx+0x0],dh
 1007e96:	add    BYTE PTR gs:[rcx+0x0],ah
 1007e9a:	outs   dx,BYTE PTR ds:[rsi]
 1007e9b:	add    BYTE PTR [rdi+0x0],bl
 1007e9e:	push   rdi
 1007e9f:	add    BYTE PTR [rcx+0x0],ah
 1007ea2:	outs   dx,BYTE PTR ds:[rsi]
 1007ea3:	add    BYTE PTR [rbx+0x0],dh
 1007ea6:	jne    0x1007ea8
 1007ea8:	outs   dx,BYTE PTR ds:[rsi]
 1007ea9:	add    BYTE PTR [rdi+0x0],ah
 1007eac:	add    BYTE PTR [rax],al
 1007eae:	add    BYTE PTR [rax],al
 1007eb0:	rex.WRB add BYTE PTR [r9+0x0],r12b
 1007eb4:	outs   dx,DWORD PTR ds:[rsi]
 1007eb5:	add    BYTE PTR [rdx+0x0],dh
 1007eb8:	imul   eax,DWORD PTR [rax],0x0
 1007ebe:	add    BYTE PTR [rax],al
 1007ec0:	push   rax
 1007ec1:	add    BYTE PTR [rdi+0x0],ch
 1007ec4:	ins    BYTE PTR es:[rdi],dx
 1007ec5:	add    BYTE PTR [rcx+0x0],ch
 1007ec8:	jae    0x1007eca
 1007eca:	push   0x0
 1007ecf:	add    BYTE PTR [rdx+0x0],dl
 1007ed2:	outs   dx,DWORD PTR ds:[rsi]
 1007ed3:	add    BYTE PTR [rbp+0x0],ch
 1007ed6:	(bad)  
 1007ed7:	add    BYTE PTR [rsi+0x0],ch
 1007eda:	imul   eax,DWORD PTR [rax],0x6e0061
	...
 1007ee8:	rex.XB add BYTE PTR [r9+0x0],dil
 1007eec:	jb     0x1007eee
 1007eee:	imul   eax,DWORD PTR [rax],0x6c006c
 1007ef4:	imul   eax,DWORD PTR [rax],0x5f0063
 1007efa:	rex.RXB add BYTE PTR [r13+0x0],r12b
 1007efe:	outs   dx,BYTE PTR ds:[rsi]
 1007eff:	add    BYTE PTR [rbp+0x0],ah
 1007f02:	jb     0x1007f04
 1007f04:	(bad)  
 1007f05:	add    BYTE PTR [rax+rax*1+0x0],ch
 1007f09:	add    BYTE PTR [rax],al
 1007f0b:	add    BYTE PTR [rax],al
 1007f0d:	add    BYTE PTR [rax],al
 1007f0f:	add    BYTE PTR [rbx+0x0],al
 1007f12:	jb     0x1007f14
 1007f14:	outs   dx,DWORD PTR ds:[rsi]
 1007f15:	add    BYTE PTR [rcx+0x0],ah
 1007f18:	je     0x1007f1a
 1007f1a:	imul   eax,DWORD PTR [rax],0x6e0061
	...
 1007f28:	push   rbx
 1007f29:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1007f2d:	add    BYTE PTR [rsi+0x0],dh
 1007f30:	(bad)  
 1007f31:	add    BYTE PTR [rbx+0x0],ch
 1007f34:	add    BYTE PTR [rax],al
 1007f36:	add    BYTE PTR [rax],al
 1007f38:	add    BYTE PTR [r8+rax*1+0x62],bpl
 1007f3d:	add    BYTE PTR [rcx+0x0],ah
 1007f40:	outs   dx,BYTE PTR ds:[rsi]
 1007f41:	add    BYTE PTR [rcx+0x0],ch
 1007f44:	(bad)  
 1007f45:	add    BYTE PTR [rsi+0x0],ch
	...
 1007f50:	push   rsp
 1007f51:	add    BYTE PTR [rax+0x0],ch
 1007f54:	(bad)  
 1007f55:	add    BYTE PTR [rcx+0x0],ch
	...
 1007f60:	push   rsp
 1007f61:	add    BYTE PTR [rbp+0x0],dh
 1007f64:	jb     0x1007f66
 1007f66:	imul   eax,DWORD PTR [rax],0x69
 1007f69:	add    BYTE PTR [rbx+0x0],dh
 1007f6c:	push   0x55000000
 1007f71:	add    BYTE PTR [rbx+0x0],ch
 1007f74:	jb     0x1007f76
 1007f76:	(bad)  
 1007f77:	add    BYTE PTR [rcx+0x0],ch
 1007f7a:	outs   dx,BYTE PTR ds:[rsi]
 1007f7b:	add    BYTE PTR [rcx+0x0],ch
 1007f7e:	(bad)  
 1007f7f:	add    BYTE PTR [rsi+0x0],ch
 1007f82:	add    BYTE PTR [rax],al
 1007f84:	add    BYTE PTR [rax],al
 1007f86:	add    BYTE PTR [rax],al
 1007f88:	push   rbx
 1007f89:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1007f8d:	add    BYTE PTR [rsi+0x0],dh
 1007f90:	add    BYTE PTR gs:[rsi+0x0],ch
 1007f94:	imul   eax,DWORD PTR [rax],0x6e0061
 1007f9a:	add    BYTE PTR [rax],al
 1007f9c:	add    BYTE PTR [rax],al
 1007f9e:	add    BYTE PTR [rax],al
 1007fa0:	add    BYTE PTR [r11+0x0],r14b
 1007fa4:	je     0x1007fa6
 1007fa6:	outs   dx,DWORD PTR ds:[rsi]
 1007fa7:	add    BYTE PTR [rsi+0x0],ch
 1007faa:	imul   eax,DWORD PTR [rax],0x6e0061
	...
 1007fb8:	rex.WR add BYTE PTR [rcx+0x0],r12b
 1007fbc:	je     0x1007fbe
 1007fbe:	jbe    0x1007fc0
 1007fc0:	imul   eax,DWORD PTR [rax],0x6e0061
 1007fc6:	add    BYTE PTR [rax],al
 1007fc8:	rex.WR add BYTE PTR [rcx+0x0],r13b
 1007fcc:	je     0x1007fce
 1007fce:	push   0x61007500
 1007fd3:	add    BYTE PTR [rsi+0x0],ch
 1007fd6:	imul   eax,DWORD PTR [rax],0x6e0061
 1007fdc:	add    BYTE PTR [rax],al
 1007fde:	add    BYTE PTR [rax],al
 1007fe0:	push   rsi
 1007fe1:	add    BYTE PTR [rcx+0x0],ch
 1007fe4:	add    BYTE PTR gs:[rax+rax*1+0x6e],dh
 1007fe9:	add    BYTE PTR [rcx+0x0],ah
 1007fec:	ins    DWORD PTR es:[rdi],dx
 1007fed:	add    BYTE PTR [rbp+0x0],ah
 1007ff0:	jae    0x1007ff2
 1007ff2:	add    BYTE PTR gs:[rax],al
 1007ff5:	add    BYTE PTR [rax],al
 1007ff7:	add    BYTE PTR [rbp+0x0],cl
 1007ffa:	(bad)  
 1007ffb:	add    BYTE PTR [rbx+0x0],ah
 1007ffe:	add    BYTE PTR gs:[rax+rax*1+0x6f],ah
 1008003:	add    BYTE PTR [rsi+0x0],ch
 1008006:	imul   eax,DWORD PTR [rax],0x6e0061
 100800c:	add    BYTE PTR [rax],al
 100800e:	add    BYTE PTR [rax],al
 1008010:	rex.W add BYTE PTR [rcx+0x0],bpl
 1008014:	outs   dx,BYTE PTR ds:[rsi]
 1008015:	add    BYTE PTR [rax+rax*1+0x69],ah
 1008019:	add    BYTE PTR [rax],al
 100801b:	add    BYTE PTR [rax],al
 100801d:	add    BYTE PTR [rax],al
 100801f:	add    BYTE PTR [rbx+0x0],al
 1008022:	push   0x6e006900
 1008027:	add    BYTE PTR [rbp+0x0],ah
 100802a:	jae    0x100802c
 100802c:	add    BYTE PTR gs:[rdi+0x0],bl
 1008030:	push   rax
 1008031:	add    BYTE PTR [rdx+0x0],dl
 1008034:	rex.XB add BYTE PTR [r8],al
 1008037:	add    BYTE PTR [rbp+0x0],dl
 100803a:	imul   eax,DWORD PTR [rax],0x680067
 1008040:	jne    0x1008042
 1008042:	jb     0x1008044
 1008044:	add    BYTE PTR [rax],al
 1008046:	add    BYTE PTR [rax],al
 1008048:	rex.X add BYTE PTR [rdx+0x0],sil
 100804c:	add    BYTE PTR gs:[rax+rax*1+0x6f],dh
 1008051:	add    BYTE PTR [rsi+0x0],ch
 1008054:	add    BYTE PTR [rax],al
 1008056:	add    BYTE PTR [rax],al
 1008058:	rex.WR add BYTE PTR [rcx+0x0],r13b
 100805c:	je     0x100805e
 100805e:	push   0x61007500
 1008063:	add    BYTE PTR [rsi+0x0],ch
 1008066:	imul   eax,DWORD PTR [rax],0x6e0061
 100806c:	pop    rdi
 100806d:	add    BYTE PTR [rbx+0x0],al
 1008070:	ins    BYTE PTR es:[rdi],dx
 1008071:	add    BYTE PTR [rcx+0x0],ah
 1008074:	jae    0x1008076
 1008076:	jae    0x1008078
 1008078:	imul   eax,DWORD PTR [rax],0x63
 100807e:	add    BYTE PTR [rax],al
 1008080:	rex.WRB add BYTE PTR [r15+0x0],r13b
 1008084:	add    BYTE PTR fs:[rbp+0x0],ah
 1008088:	jb     0x100808a
 100808a:	outs   dx,BYTE PTR ds:[rsi]
 100808b:	add    BYTE PTR [rdi+0x0],bl
 100808e:	push   rbx
 100808f:	add    BYTE PTR [rax+0x0],dh
 1008092:	(bad)  
 1008093:	add    BYTE PTR [rsi+0x0],ch
 1008096:	imul   eax,DWORD PTR [rax],0x680073
 100809c:	add    BYTE PTR [rax],al
 100809e:	add    BYTE PTR [rax],al
 10080a0:	rex.RXB add BYTE PTR [r13+0x0],r12b
 10080a4:	jb     0x10080a6
 10080a6:	ins    DWORD PTR es:[rdi],dx
 10080a7:	add    BYTE PTR [rcx+0x0],ah
 10080aa:	outs   dx,BYTE PTR ds:[rsi]
 10080ab:	add    BYTE PTR [rdi+0x0],bl
 10080ae:	push   rax
 10080af:	add    BYTE PTR [rax+0x0],ch
 10080b2:	outs   dx,DWORD PTR ds:[rsi]
 10080b3:	add    BYTE PTR [rsi+0x0],ch
 10080b6:	add    BYTE PTR gs:[rdx+0x0],al
 10080ba:	outs   dx,DWORD PTR ds:[rsi]
 10080bb:	add    BYTE PTR [rdi+0x0],ch
 10080be:	imul   eax,DWORD PTR [rax],0x0
 10080c1:	add    BYTE PTR [rax],al
 10080c3:	add    BYTE PTR [rax],al
 10080c5:	add    BYTE PTR [rax],al
 10080c7:	add    BYTE PTR [rax+0x0],cl
 10080ca:	jne    0x10080cc
 10080cc:	outs   dx,BYTE PTR ds:[rsi]
 10080cd:	add    BYTE PTR [rdi+0x0],ah
 10080d0:	(bad)  
 10080d1:	add    BYTE PTR [rdx+0x0],dh
 10080d4:	imul   eax,DWORD PTR [rax],0x6e0061
 10080da:	pop    rdi
 10080db:	add    BYTE PTR [rax+rax*1+0x65],dl
 10080df:	add    BYTE PTR [rbx+0x0],ah
 10080e2:	push   0x69006e00
 10080e7:	add    BYTE PTR [rbx+0x0],ah
 10080ea:	(bad)  
 10080eb:	add    BYTE PTR [rax+rax*1+0x0],ch
 10080ef:	add    BYTE PTR [rdx+0x0],cl
 10080f2:	(bad)  
 10080f3:	add    BYTE PTR [rax+0x0],dh
 10080f6:	(bad)  
 10080f7:	add    BYTE PTR [rsi+0x0],ch
 10080fa:	add    BYTE PTR gs:[rbx+0x0],dh
 10080fe:	add    BYTE PTR gs:[rdi+0x0],bl
 1008102:	push   rbp
 1008103:	add    BYTE PTR [rsi+0x0],ch
 1008106:	imul   eax,DWORD PTR [rax],0x6f0063
 100810c:	add    BYTE PTR fs:[rbp+0x0],ah
	...
 1008118:	rex.WXB add BYTE PTR [r15+0x0],bpl
 100811c:	jb     0x100811e
 100811e:	add    BYTE PTR gs:[rcx+0x0],ah
 1008122:	outs   dx,BYTE PTR ds:[rsi]
 1008123:	add    BYTE PTR [rdi+0x0],bl
 1008126:	push   rdi
 1008127:	add    BYTE PTR [rcx+0x0],ah
 100812a:	outs   dx,BYTE PTR ds:[rsi]
 100812b:	add    BYTE PTR [rbx+0x0],dh
 100812e:	jne    0x1008130
 1008130:	outs   dx,BYTE PTR ds:[rsi]
 1008131:	add    BYTE PTR [rdi+0x0],ah
 1008134:	pop    rdi
 1008135:	add    BYTE PTR [rbp+0x0],dl
 1008138:	outs   dx,BYTE PTR ds:[rsi]
 1008139:	add    BYTE PTR [rcx+0x0],ch
 100813c:	movsxd eax,DWORD PTR [rax]
 100813e:	outs   dx,DWORD PTR ds:[rsi]
 100813f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1008143:	add    BYTE PTR [rax],al
 1008145:	add    BYTE PTR [rax],al
 1008147:	add    BYTE PTR [rdi+0x0],al
 100814a:	add    BYTE PTR gs:[rdi+0x0],ch
 100814e:	jb     0x1008150
 1008150:	add    BYTE PTR [ecx+0x0],ch
 1008154:	(bad)  
 1008155:	add    BYTE PTR [rsi+0x0],ch
 1008158:	pop    rdi
 1008159:	add    BYTE PTR [rbp+0x0],cl
 100815c:	outs   dx,DWORD PTR ds:[rsi]
 100815d:	add    BYTE PTR [rax+rax*1+0x65],ah
 1008161:	add    BYTE PTR [rdx+0x0],dh
 1008164:	outs   dx,BYTE PTR ds:[rsi]
 1008165:	add    BYTE PTR [rdi+0x0],bl
 1008168:	push   rbx
 1008169:	add    BYTE PTR [rdi+0x0],ch
 100816c:	jb     0x100816e
 100816e:	je     0x1008170
	...
 1008178:	rex.XB add BYTE PTR [r8+0x0],bpl
 100817c:	imul   eax,DWORD PTR [rax],0x65006e
 1008182:	jae    0x1008184
 1008184:	add    BYTE PTR gs:[rdi+0x0],bl
 1008188:	push   rax
 1008189:	add    BYTE PTR [rdx+0x0],dl
 100818c:	rex.XB add BYTE PTR [r15+0x0],bl
 1008190:	push   rbx
 1008191:	add    BYTE PTR [rax+rax*1+0x72],dh
 1008195:	add    BYTE PTR [rdi+0x0],ch
 1008198:	imul   eax,DWORD PTR [rax],0x65
 100819b:	add    BYTE PTR [rax],al
 100819d:	add    BYTE PTR [rax],al
 100819f:	add    BYTE PTR [rbx+0x0],al
 10081a2:	push   0x6e006900
 10081a7:	add    BYTE PTR [rbp+0x0],ah
 10081aa:	jae    0x10081ac
 10081ac:	add    BYTE PTR gs:[rdi+0x0],bl
 10081b0:	push   rsp
 10081b1:	add    BYTE PTR [rcx+0x0],ah
 10081b4:	imul   eax,DWORD PTR [rax],0x610077
 10081ba:	outs   dx,BYTE PTR ds:[rsi]
 10081bb:	add    BYTE PTR [rdi+0x0],bl
 10081be:	rex.X add BYTE PTR [rdi+0x0],bpl
 10081c2:	jo     0x10081c4
 10081c4:	outs   dx,DWORD PTR ds:[rsi]
 10081c5:	add    BYTE PTR [rbp+0x0],ch
 10081c8:	outs   dx,DWORD PTR ds:[rsi]
 10081c9:	add    BYTE PTR [rsi+0x0],ah
 10081cc:	outs   dx,DWORD PTR ds:[rsi]
 10081cd:	add    BYTE PTR [rax],al
 10081cf:	add    BYTE PTR [rcx+0x0],cl
 10081d2:	outs   dx,BYTE PTR ds:[rsi]
 10081d3:	add    BYTE PTR [rax+rax*1+0x69],ah
 10081d7:	add    BYTE PTR [rbx+0x0],ah
 10081da:	pop    rdi
 10081db:	add    BYTE PTR [rdi+0x0],al
 10081de:	add    BYTE PTR gs:[rsi+0x0],ch
 10081e2:	add    BYTE PTR gs:[rdx+0x0],dh
 10081e6:	(bad)  
 10081e7:	add    BYTE PTR [rax+rax*1+0x0],ch
 10081eb:	add    BYTE PTR [rax],al
 10081ed:	add    BYTE PTR [rax],al
 10081ef:	add    BYTE PTR [rcx+0x0],al
 10081f2:	jp     0x10081f4
 10081f4:	add    BYTE PTR gs:[rdx+0x0],dh
 10081f8:	imul   eax,DWORD PTR [rax],0x4c005f
 10081fe:	(bad)  
 10081ff:	add    BYTE PTR [rax+rax*1+0x69],dh
 1008203:	add    BYTE PTR [rsi+0x0],ch
 1008206:	add    BYTE PTR [rax],al
 1008208:	rex.WXB add BYTE PTR [r9+0x0],spl
 100820c:	jp     0x100820e
 100820e:	(bad)  
 100820f:	add    BYTE PTR [rbx+0x0],ch
 1008212:	push   0x0
 1008217:	add    BYTE PTR [rbp+0x0],dl
 100821a:	jp     0x100821c
 100821c:	(bad)  
 100821d:	add    BYTE PTR [rbp+0x0],ah
 1008220:	imul   eax,DWORD PTR [rax],0x5f
 1008223:	add    BYTE PTR [rax+rax*1+0x61],cl
 1008227:	add    BYTE PTR [rax+rax*1+0x69],dh
 100822b:	add    BYTE PTR [rsi+0x0],ch
 100822e:	add    BYTE PTR [rax],al
 1008230:	push   rsp
 1008231:	add    BYTE PTR [rcx+0x0],ah
 1008234:	je     0x1008236
 1008236:	(bad)  
 1008237:	add    BYTE PTR [rdx+0x0],dh
 100823a:	add    BYTE PTR [rax],al
 100823c:	add    BYTE PTR [rax],al
 100823e:	add    BYTE PTR [rax],al
 1008240:	rex.WRB add BYTE PTR [r9+0x0],r12b
 1008244:	movsxd eax,DWORD PTR [rax]
 1008246:	add    BYTE PTR gs:[rax+rax*1+0x6f],ah
 100824b:	add    BYTE PTR [rsi+0x0],ch
 100824e:	imul   eax,DWORD PTR [rax],0x6e0061
 1008254:	pop    rdi
 1008255:	add    BYTE PTR [rsi+0x0],al
 1008258:	pop    rcx
 1008259:	add    BYTE PTR [rdx+0x0],dl
 100825c:	rex.WRXB add BYTE PTR [r13+0x0],r9b
	...
 1008268:	push   rbx
 1008269:	add    BYTE PTR [rcx+0x0],bh
 100826c:	jb     0x100826e
 100826e:	imul   eax,DWORD PTR [rax],0x630061
 1008274:	add    BYTE PTR [rax],al
 1008276:	add    BYTE PTR [rax],al
 1008278:	add    BYTE PTR [rcx+0x0],r13b
 100827c:	jbe    0x100827e
 100827e:	add    BYTE PTR gs:[rax+0x0],ch
 1008282:	imul   eax,DWORD PTR [rax],0x0
 1008288:	add    BYTE PTR [r10+0x0],dil
 100828c:	add    BYTE PTR gs:[rdx+0x0],dh
 1008290:	imul   eax,DWORD PTR [rax],0x43005f
 1008296:	jns    0x1008298
 1008298:	jb     0x100829a
 100829a:	imul   eax,DWORD PTR [rax],0x6c006c
 10082a0:	imul   eax,DWORD PTR [rax],0x63
 10082a6:	add    BYTE PTR [rax],al
 10082a8:	rex.XB add BYTE PTR [r8+0x0],bpl
 10082ac:	imul   eax,DWORD PTR [rax],0x65006e
 10082b2:	jae    0x10082b4
 10082b4:	add    BYTE PTR gs:[rdi+0x0],bl
 10082b8:	rex.W add BYTE PTR [rdi+0x0],bpl
 10082bc:	outs   dx,BYTE PTR ds:[rsi]
 10082bd:	add    BYTE PTR [rdi+0x0],ah
 10082c0:	pop    rdi
 10082c1:	add    BYTE PTR [rbx+0x0],cl
 10082c4:	outs   dx,DWORD PTR ds:[rsi]
 10082c5:	add    BYTE PTR [rsi+0x0],ch
 10082c8:	add    BYTE PTR [edi+0x0],bl
 10082cc:	push   rbx
 10082cd:	add    BYTE PTR [rax+rax*1+0x72],dh
 10082d1:	add    BYTE PTR [rdi+0x0],ch
 10082d4:	imul   eax,DWORD PTR [rax],0x65
	...
 10082df:	add    BYTE PTR [rbp+0x0],cl
 10082e2:	outs   dx,DWORD PTR ds:[rsi]
 10082e3:	add    BYTE PTR [rax+0x0],ch
 10082e6:	(bad)  
 10082e7:	add    BYTE PTR [rdi+0x0],dh
 10082ea:	imul   eax,DWORD PTR [rax],0x0
 10082ed:	add    BYTE PTR [rax],al
 10082ef:	add    BYTE PTR [rbx+0x0],cl
 10082f2:	outs   dx,DWORD PTR ds:[rsi]
 10082f3:	add    BYTE PTR [rdx+0x0],dh
 10082f6:	add    BYTE PTR gs:[rcx+0x0],ah
 10082fa:	outs   dx,BYTE PTR ds:[rsi]
 10082fb:	add    BYTE PTR [rax],al
 10082fd:	add    BYTE PTR [rax],al
 10082ff:	add    BYTE PTR [rbx+0x0],al
 1008302:	push   0x6e006900
 1008307:	add    BYTE PTR [rbp+0x0],ah
 100830a:	jae    0x100830c
 100830c:	add    BYTE PTR gs:[rdi+0x0],bl
 1008310:	push   rsp
 1008311:	add    BYTE PTR [rdx+0x0],dh
 1008314:	(bad)  
 1008315:	add    BYTE PTR [rax+rax*1+0x69],ah
 1008319:	add    BYTE PTR [rax+rax*1+0x69],dh
 100831d:	add    BYTE PTR [rdi+0x0],ch
 1008320:	outs   dx,BYTE PTR ds:[rsi]
 1008321:	add    BYTE PTR [rcx+0x0],ah
 1008324:	ins    BYTE PTR es:[rdi],dx
 1008325:	add    BYTE PTR [rdi+0x0],bl
 1008328:	push   rbx
 1008329:	add    BYTE PTR [rax+rax*1+0x72],dh
 100832d:	add    BYTE PTR [rdi+0x0],ch
 1008330:	imul   eax,DWORD PTR [rax],0x65
 1008333:	add    BYTE PTR [rdi+0x0],bl
 1008336:	rex.XB add BYTE PTR [r15+0x0],bpl
 100833a:	jne    0x100833c
 100833c:	outs   dx,BYTE PTR ds:[rsi]
 100833d:	add    BYTE PTR [rax+rax*1+0x0],dh
 1008341:	add    BYTE PTR [rax],al
 1008343:	add    BYTE PTR [rax],al
 1008345:	add    BYTE PTR [rax],al
 1008347:	add    BYTE PTR [rbx+0x0],al
 100834a:	push   0x6e006900
 100834f:	add    BYTE PTR [rbp+0x0],ah
 1008352:	jae    0x1008354
 1008354:	add    BYTE PTR gs:[rdi+0x0],bl
 1008358:	push   rsp
 1008359:	add    BYTE PTR [rdx+0x0],dh
 100835c:	(bad)  
 100835d:	add    BYTE PTR [rax+rax*1+0x69],ah
 1008361:	add    BYTE PTR [rax+rax*1+0x69],dh
 1008365:	add    BYTE PTR [rdi+0x0],ch
 1008368:	outs   dx,BYTE PTR ds:[rsi]
 1008369:	add    BYTE PTR [rcx+0x0],ah
 100836c:	ins    BYTE PTR es:[rdi],dx
 100836d:	add    BYTE PTR [rdi+0x0],bl
 1008370:	rex.X add BYTE PTR [rdi+0x0],bpl
 1008374:	jo     0x1008376
 1008376:	outs   dx,DWORD PTR ds:[rsi]
 1008377:	add    BYTE PTR [rbp+0x0],ch
 100837a:	outs   dx,DWORD PTR ds:[rsi]
 100837b:	add    BYTE PTR [rsi+0x0],ah
 100837e:	outs   dx,DWORD PTR ds:[rsi]
	...
 1008387:	add    BYTE PTR [rbx+0x0],al
 100838a:	push   0x6e006900
 100838f:	add    BYTE PTR [rbp+0x0],ah
 1008392:	jae    0x1008394
 1008394:	add    BYTE PTR gs:[rdi+0x0],bl
 1008398:	push   rbx
 1008399:	add    BYTE PTR [rcx+0x0],ch
 100839c:	ins    DWORD PTR es:[rdi],dx
 100839d:	add    BYTE PTR [rax+0x0],dh
 10083a0:	ins    BYTE PTR es:[rdi],dx
 10083a1:	add    BYTE PTR [rcx+0x0],ch
 10083a4:	data16 add BYTE PTR [rcx+0x0],ch
 10083a8:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 10083ad:	add    BYTE PTR [rax+0x0],dl
 10083b0:	imul   eax,DWORD PTR [rax],0x79006e
 10083b6:	imul   eax,DWORD PTR [rax],0x6e
 10083bc:	add    BYTE PTR [rax],al
 10083be:	add    BYTE PTR [rax],al
 10083c0:	rex.XB add BYTE PTR [r8+0x0],bpl
 10083c4:	imul   eax,DWORD PTR [rax],0x65006e
 10083ca:	jae    0x10083cc
 10083cc:	add    BYTE PTR gs:[rdi+0x0],bl
 10083d0:	push   rbx
 10083d1:	add    BYTE PTR [rcx+0x0],ch
 10083d4:	ins    DWORD PTR es:[rdi],dx
 10083d5:	add    BYTE PTR [rax+0x0],dh
 10083d8:	ins    BYTE PTR es:[rdi],dx
 10083d9:	add    BYTE PTR [rcx+0x0],ch
 10083dc:	data16 add BYTE PTR [rcx+0x0],ch
 10083e0:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 10083e5:	add    BYTE PTR [rbx+0x0],dl
 10083e8:	je     0x10083ea
 10083ea:	jb     0x10083ec
 10083ec:	outs   dx,DWORD PTR ds:[rsi]
 10083ed:	add    BYTE PTR [rbx+0x0],ch
 10083f0:	add    BYTE PTR gs:[rdi+0x0],bl
 10083f4:	rex.WRXB add BYTE PTR [r10+0x0],r14b
 10083f8:	add    BYTE PTR fs:[rbp+0x0],ah
 10083fc:	jb     0x10083fe
 10083fe:	add    BYTE PTR [rax],al
 1008400:	rex.XB add BYTE PTR [r8+0x0],bpl
 1008404:	imul   eax,DWORD PTR [rax],0x65006e
 100840a:	jae    0x100840c
 100840c:	add    BYTE PTR gs:[rdi+0x0],bl
 1008410:	push   rsp
 1008411:	add    BYTE PTR [rdx+0x0],dh
 1008414:	(bad)  
 1008415:	add    BYTE PTR [rax+rax*1+0x69],ah
 1008419:	add    BYTE PTR [rax+rax*1+0x69],dh
 100841d:	add    BYTE PTR [rdi+0x0],ch
 1008420:	outs   dx,BYTE PTR ds:[rsi]
 1008421:	add    BYTE PTR [rcx+0x0],ah
 1008424:	ins    BYTE PTR es:[rdi],dx
 1008425:	add    BYTE PTR [rdi+0x0],bl
 1008428:	push   rax
 1008429:	add    BYTE PTR [rcx+0x0],ch
 100842c:	outs   dx,BYTE PTR ds:[rsi]
 100842d:	add    BYTE PTR [rcx+0x0],bh
 1008430:	imul   eax,DWORD PTR [rax],0x6e
	...
 100843e:	add    BYTE PTR [rax],al
 1008440:	rex.XB add BYTE PTR [r8+0x0],bpl
 1008444:	imul   eax,DWORD PTR [rax],0x65006e
 100844a:	jae    0x100844c
 100844c:	add    BYTE PTR gs:[rdi+0x0],bl
 1008450:	push   rsp
 1008451:	add    BYTE PTR [rdx+0x0],dh
 1008454:	(bad)  
 1008455:	add    BYTE PTR [rax+rax*1+0x69],ah
 1008459:	add    BYTE PTR [rax+rax*1+0x69],dh
 100845d:	add    BYTE PTR [rdi+0x0],ch
 1008460:	outs   dx,BYTE PTR ds:[rsi]
 1008461:	add    BYTE PTR [rcx+0x0],ah
 1008464:	ins    BYTE PTR es:[rdi],dx
 1008465:	add    BYTE PTR [rdi+0x0],bl
 1008468:	push   rbx
 1008469:	add    BYTE PTR [rax+rax*1+0x72],dh
 100846d:	add    BYTE PTR [rdi+0x0],ch
 1008470:	imul   eax,DWORD PTR [rax],0x65
 1008473:	add    BYTE PTR [rdi+0x0],bl
 1008476:	rex.WRXB add BYTE PTR [r10+0x0],r14b
 100847a:	add    BYTE PTR fs:[rbp+0x0],ah
 100847e:	jb     0x1008480
	...
 1008488:	add    BYTE PTR [rcx+0x0],r12b
 100848c:	outs   dx,BYTE PTR ds:[rsi]
 100848d:	add    BYTE PTR [rcx+0x0],ch
 1008490:	jae    0x1008492
 1008492:	push   0x47005f00
 1008497:	add    BYTE PTR [rdx+0x0],dh
 100849a:	add    BYTE PTR gs:[rbp+0x0],ah
 100849e:	outs   dx,BYTE PTR ds:[rsi]
 100849f:	add    BYTE PTR [rax+rax*1+0x61],ch
 10084a3:	add    BYTE PTR [rsi+0x0],ch
 10084a6:	add    BYTE PTR fs:[rcx+0x0],ch
 10084aa:	movsxd eax,DWORD PTR [rax]
 10084ac:	add    BYTE PTR [rax],al
 10084ae:	add    BYTE PTR [rax],al
 10084b0:	rex.WX add BYTE PTR [rcx+0x0],spl
 10084b4:	jo     0x10084b6
 10084b6:	(bad)  
 10084b7:	add    BYTE PTR [rsi+0x0],ch
 10084ba:	add    BYTE PTR gs:[rbx+0x0],dh
 10084be:	add    BYTE PTR gs:[rdi+0x0],bl
 10084c2:	pop    rax
 10084c3:	add    BYTE PTR [rdx+0x0],cl
 10084c6:	rex.WB add BYTE PTR [r11+0x0],dl
 10084ca:	add    BYTE PTR [rax],al
 10084cc:	add    BYTE PTR [rax],al
 10084ce:	add    BYTE PTR [rax],al
 10084d0:	rex.WX add BYTE PTR [rcx+0x0],spl
 10084d4:	jo     0x10084d6
 10084d6:	(bad)  
 10084d7:	add    BYTE PTR [rsi+0x0],ch
 10084da:	add    BYTE PTR gs:[rbx+0x0],dh
 10084de:	add    BYTE PTR gs:[rdi+0x0],bl
 10084e2:	rex.X add BYTE PTR [rbp+0x0],sil
 10084e6:	jae    0x10084e8
 10084e8:	push   0x5f007500
 10084ed:	add    BYTE PTR [rbx+0x0],cl
 10084f0:	(bad)  
 10084f1:	add    BYTE PTR [rbx+0x0],ch
 10084f4:	jne    0x10084f6
 10084f6:	jae    0x10084f8
 10084f8:	jne    0x10084fa
 10084fa:	add    BYTE PTR [rax],al
 10084fc:	add    BYTE PTR [rax],al
 10084fe:	add    BYTE PTR [rax],al
 1008500:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 1008504:	jb     0x1008506
 1008506:	ja     0x1008508
 1008508:	add    BYTE PTR gs:[rdi+0x0],ah
 100850c:	imul   eax,DWORD PTR [rax],0x6e0061
 1008512:	add    BYTE PTR [rax],al
 1008514:	add    BYTE PTR [rax],al
 1008516:	add    BYTE PTR [rax],al
 1008518:	push   rdx
 1008519:	add    BYTE PTR [rdi+0x0],ch
 100851c:	ins    DWORD PTR es:[rdi],dx
 100851d:	add    BYTE PTR [rcx+0x0],ah
 1008520:	outs   dx,BYTE PTR ds:[rsi]
 1008521:	add    BYTE PTR [rbx+0x0],dh
 1008524:	push   0x53000000
 1008529:	add    BYTE PTR [rbp+0x0],ah
 100852c:	jb     0x100852e
 100852e:	(bad)  
 100852f:	add    BYTE PTR [rcx+0x0],ch
 1008532:	(bad)  
 1008533:	add    BYTE PTR [rsi+0x0],ch
 1008536:	pop    rdi
 1008537:	add    BYTE PTR [rax+rax*1+0x61],cl
 100853b:	add    BYTE PTR [rax+rax*1+0x69],dh
 100853f:	add    BYTE PTR [rsi+0x0],ch
 1008542:	add    BYTE PTR [rax],al
 1008544:	add    BYTE PTR [rax],al
 1008546:	add    BYTE PTR [rax],al
 1008548:	push   rbx
 1008549:	add    BYTE PTR [rbp+0x0],ah
 100854c:	jb     0x100854e
 100854e:	(bad)  
 100854f:	add    BYTE PTR [rcx+0x0],ch
 1008552:	(bad)  
 1008553:	add    BYTE PTR [rsi+0x0],ch
 1008556:	pop    rdi
 1008557:	add    BYTE PTR [rbx+0x0],al
 100855a:	jns    0x100855c
 100855c:	jb     0x100855e
 100855e:	imul   eax,DWORD PTR [rax],0x6c006c
 1008564:	imul   eax,DWORD PTR [rax],0x63
 100856a:	add    BYTE PTR [rax],al
 100856c:	add    BYTE PTR [rax],al
 100856e:	add    BYTE PTR [rax],al
 1008570:	rex.X add BYTE PTR [rdi+0x0],bpl
 1008574:	jae    0x1008576
 1008576:	outs   dx,BYTE PTR ds:[rsi]
 1008577:	add    BYTE PTR [rcx+0x0],ch
 100857a:	(bad)  
 100857b:	add    BYTE PTR [rsi+0x0],ch
 100857e:	pop    rdi
 100857f:	add    BYTE PTR [rax+rax*1+0x61],cl
 1008583:	add    BYTE PTR [rax+rax*1+0x69],dh
 1008587:	add    BYTE PTR [rsi+0x0],ch
 100858a:	add    BYTE PTR [rax],al
 100858c:	add    BYTE PTR [rax],al
 100858e:	add    BYTE PTR [rax],al
 1008590:	rex.X add BYTE PTR [rdi+0x0],bpl
 1008594:	jae    0x1008596
 1008596:	outs   dx,BYTE PTR ds:[rsi]
 1008597:	add    BYTE PTR [rcx+0x0],ch
 100859a:	(bad)  
 100859b:	add    BYTE PTR [rsi+0x0],ch
 100859e:	pop    rdi
 100859f:	add    BYTE PTR [rbx+0x0],al
 10085a2:	jns    0x10085a4
 10085a4:	jb     0x10085a6
 10085a6:	imul   eax,DWORD PTR [rax],0x6c006c
 10085ac:	imul   eax,DWORD PTR [rax],0x63
 10085b2:	add    BYTE PTR [rax],al
 10085b4:	add    BYTE PTR [rax],al
 10085b6:	add    BYTE PTR [rax],al
 10085b8:	push   rbp
 10085b9:	add    BYTE PTR [rdx+0x0],dh
 10085bc:	add    BYTE PTR fs:[rbp+0x0],dh
	...
 10085c8:	push   rax
 10085c9:	add    BYTE PTR [rbp+0x0],ah
 10085cc:	jb     0x10085ce
 10085ce:	jae    0x10085d0
 10085d0:	imul   eax,DWORD PTR [rax],0x6e0061
 10085d6:	add    BYTE PTR [rax],al
 10085d8:	rex.WRB add BYTE PTR [r9+0x0],r12b
 10085dc:	jo     0x10085de
 10085de:	jne    0x10085e0
 10085e0:	add    BYTE PTR fs:[rbp+0x0],dh
 10085e4:	outs   dx,BYTE PTR ds:[rsi]
 10085e5:	add    BYTE PTR [rdi+0x0],ah
 10085e8:	(bad)  
 10085e9:	add    BYTE PTR [rsi+0x0],ch
 10085ec:	add    BYTE PTR [rax],al
 10085ee:	add    BYTE PTR [rax],al
 10085f0:	push   rbp
 10085f1:	add    BYTE PTR [rax+0x0],dh
 10085f4:	jo     0x10085f6
 10085f6:	add    BYTE PTR gs:[rdx+0x0],dh
 10085fa:	pop    rdi
 10085fb:	add    BYTE PTR [rbx+0x0],dl
 10085fe:	outs   dx,DWORD PTR ds:[rsi]
 10085ff:	add    BYTE PTR [rdx+0x0],dh
 1008602:	(bad)  
 1008603:	add    BYTE PTR [rcx+0x0],ch
 1008606:	(bad)  
 1008607:	add    BYTE PTR [rsi+0x0],ch
 100860a:	add    BYTE PTR [rax],al
 100860c:	add    BYTE PTR [rax],al
 100860e:	add    BYTE PTR [rax],al
 1008610:	rex.X add BYTE PTR [rcx+0x0],spl
 1008614:	jae    0x1008616
 1008616:	push   0x69006b00
 100861b:	add    BYTE PTR [rdx+0x0],dh
 100861e:	add    BYTE PTR [rax],al
 1008620:	rex.WRB add BYTE PTR [r9+0x0],r12b
 1008624:	ins    BYTE PTR es:[rdi],dx
 1008625:	add    BYTE PTR [rax+rax*1+0x65],dh
 1008629:	add    BYTE PTR [rbx+0x0],dh
 100862c:	add    BYTE PTR gs:[rax],al
 100862f:	add    BYTE PTR [rbx+0x0],dl
 1008632:	(bad)  
 1008633:	add    BYTE PTR [rbp+0x0],ch
 1008636:	imul   eax,DWORD PTR [rax],0x4e005f
 100863c:	outs   dx,DWORD PTR ds:[rsi]
 100863d:	add    BYTE PTR [rdx+0x0],dh
 1008640:	ja     0x1008642
 1008642:	(bad)  
 1008643:	add    BYTE PTR [rcx+0x0],bh
 1008646:	add    BYTE PTR [rax],al
 1008648:	push   rbx
 1008649:	add    BYTE PTR [rcx+0x0],ah
 100864c:	ins    DWORD PTR es:[rdi],dx
 100864d:	add    BYTE PTR [rcx+0x0],ch
 1008650:	pop    rdi
 1008651:	add    BYTE PTR [rbx+0x0],dl
 1008654:	ja     0x1008656
 1008656:	add    BYTE PTR gs:[rax+rax*1+0x65],ah
 100865b:	add    BYTE PTR [rsi+0x0],ch
 100865e:	pop    rdi
 100865f:	add    BYTE PTR [rsi+0x0],al
 1008662:	imul   eax,DWORD PTR [rax],0x6c006e
 1008668:	(bad)  
 1008669:	add    BYTE PTR [rsi+0x0],ch
 100866c:	add    BYTE PTR fs:[rax],al
 100866f:	add    BYTE PTR [rax+rax*1+0x75],dl
 1008673:	add    BYTE PTR [rdx+0x0],dh
 1008676:	imul   eax,DWORD PTR [rax],0x6d
 1008679:	add    BYTE PTR [rbp+0x0],ah
 100867c:	outs   dx,BYTE PTR ds:[rsi]
 100867d:	add    BYTE PTR [rax],al
 100867f:	add    BYTE PTR [rdx+0x0],al
 1008682:	add    BYTE PTR gs:[rsi+0x0],ch
 1008686:	add    BYTE PTR [ecx+0x0],ah
 100868a:	ins    BYTE PTR es:[rdi],dx
 100868b:	add    BYTE PTR [rcx+0x0],ch
 100868e:	add    BYTE PTR [rax],al
 1008690:	add    BYTE PTR [r11+0x0],sil
 1008694:	jae    0x1008696
 1008696:	(bad)  
 1008697:	add    BYTE PTR [rbp+0x0],ch
 100869a:	add    BYTE PTR gs:[rbx+0x0],dh
 100869e:	add    BYTE PTR gs:[rax],al
 10086a1:	add    BYTE PTR [rax],al
 10086a3:	add    BYTE PTR [rax],al
 10086a5:	add    BYTE PTR [rax],al
 10086a7:	add    BYTE PTR [rax+0x0],dl
 10086aa:	(bad)  
 10086ab:	add    BYTE PTR [rbx+0x0],dh
 10086ae:	push   0x6f007400
 10086b3:	add    BYTE PTR [rax],al
 10086b5:	add    BYTE PTR [rax],al
 10086b7:	add    BYTE PTR [rax+rax*1+0x69],dl
 10086bb:	add    BYTE PTR [rdx+0x0],ah
 10086be:	add    BYTE PTR gs:[rax+rax*1+0x61],dh
 10086c3:	add    BYTE PTR [rsi+0x0],ch
 10086c6:	add    BYTE PTR [rax],al
 10086c8:	push   rdi
 10086c9:	add    BYTE PTR [rbp+0x0],ah
 10086cc:	ins    BYTE PTR es:[rdi],dx
 10086cd:	add    BYTE PTR [rbx+0x0],dh
 10086d0:	push   0x0
 10086d5:	add    BYTE PTR [rax],al
 10086d7:	add    BYTE PTR [rbx+0x0],cl
 10086da:	push   0x65006d00
 10086df:	add    BYTE PTR [rdx+0x0],dh
 10086e2:	add    BYTE PTR [rax],al
 10086e4:	add    BYTE PTR [rax],al
 10086e6:	add    BYTE PTR [rax],al
 10086e8:	rex.WR add BYTE PTR [rcx+0x0],r12b
 10086ec:	outs   dx,DWORD PTR ds:[rsi]
 10086ed:	add    BYTE PTR [rax],al
 10086ef:	add    BYTE PTR [rsi+0x0],al
 10086f2:	jb     0x10086f4
 10086f4:	imul   eax,DWORD PTR [rax],0x690073
 10086fa:	(bad)  
 10086fb:	add    BYTE PTR [rsi+0x0],ch
 10086fe:	add    BYTE PTR [rax],al
 1008700:	push   rsp
 1008701:	add    BYTE PTR [rcx+0x0],ah
 1008704:	ins    DWORD PTR es:[rdi],dx
 1008705:	add    BYTE PTR [rcx+0x0],ah
 1008708:	jp     0x100870a
 100870a:	imul   eax,DWORD PTR [rax],0x680067
 1008710:	je     0x1008712
 1008712:	add    BYTE PTR [rax],al
 1008714:	add    BYTE PTR [rax],al
 1008716:	add    BYTE PTR [rax],al
 1008718:	rex.WRX add BYTE PTR [rbp+0x0],r12b
 100871c:	jo     0x100871e
 100871e:	(bad)  
 100871f:	add    BYTE PTR [rax+rax*1+0x69],ch
 1008723:	add    BYTE PTR [rax],al
 1008725:	add    BYTE PTR [rax],al
 1008727:	add    BYTE PTR [rdx+0x0],dl
 100872a:	add    BYTE PTR [r9+0x0],r8b
 100872e:	add    BYTE PTR [rdi+0x0],r10b
 1008732:	push   rdx
 1008733:	add    BYTE PTR [rcx+0x0],cl
 1008736:	push   rsp
 1008737:	add    BYTE PTR [rbp+0x0],al
 100873a:	add    BYTE PTR [rax],al
 100873c:	add    BYTE PTR [rax],al
 100873e:	add    BYTE PTR [rax],al
 1008740:	push   rdx
 1008741:	add    BYTE PTR [rbp+0x0],al
 1008744:	add    BYTE PTR [r8+rax*1+0x4f],al
 1008749:	add    BYTE PTR [rsi+0x0],cl
 100874c:	rex.WR add BYTE PTR [rcx+0x0],r11b
	...
 1008760:	and    al,BYTE PTR [rip+0x11993]        # 0x101a0f9
 1008766:	add    BYTE PTR [rax],al
 1008768:	push   rsp
 1008769:	push   rax
 100876a:	add    DWORD PTR [rax],eax
	...
 1008774:	rex.RX add BYTE PTR [rax],r8b
 1008777:	add    BYTE PTR [rax+rdx*2+0x1],bl
 100877b:	add    BYTE PTR [rax+0x0],dl
 100877e:	add    BYTE PTR [rax],al
 1008780:	add    BYTE PTR [rax],al
 1008782:	add    BYTE PTR [rax],al
 1008784:	add    DWORD PTR [rax],eax
 1008786:	add    BYTE PTR [rax],al
 1008788:	add    BYTE PTR [rax],al
 100878a:	add    BYTE PTR [rax],al
 100878c:	add    BYTE PTR [rax-0x71],al
 100878f:	and    al,BYTE PTR [rip+0x11993]        # 0x101a129
 1008796:	add    BYTE PTR [rax],al
 1008798:	cmp    al,0x53
 100879a:	add    DWORD PTR [rax],eax
	...
 10087a4:	add    eax,0x44000000
 10087a9:	push   rbx
 10087aa:	add    DWORD PTR [rax],eax
 10087ac:	cmp    BYTE PTR [rax],al
 10087ae:	add    BYTE PTR [rax],al
 10087b0:	add    BYTE PTR [rax],al
 10087b2:	add    BYTE PTR [rax],al
 10087b4:	add    DWORD PTR [rax],eax
	...
 10087be:	add    BYTE PTR [rax],al
 10087c0:	and    al,BYTE PTR [rip+0x11993]        # 0x101a159
 10087c6:	add    BYTE PTR [rax],al
 10087c8:	nop
 10087c9:	push   rbx
 10087ca:	add    DWORD PTR [rax],eax
	...
 10087d4:	or     DWORD PTR [rax],eax
 10087d6:	add    BYTE PTR [rax],al
 10087d8:	cwde   
 10087d9:	push   rbx
 10087da:	add    DWORD PTR [rax],eax
 10087dc:	add    BYTE PTR [rax],al
 10087df:	add    BYTE PTR [rax],al
 10087e1:	add    BYTE PTR [rax],al
 10087e3:	add    BYTE PTR [rcx],al
	...
 10087ed:	add    BYTE PTR [rax],al
 10087ef:	add    BYTE PTR [rdx],ah
 10087f1:	add    eax,0x11993
 10087f6:	add    BYTE PTR [rax],al
 10087f8:	cld    
 10087f9:	push   rbx
 10087fa:	add    DWORD PTR [rax],eax
	...
 1008804:	or     BYTE PTR [rax],al
 1008806:	add    BYTE PTR [rax],al
 1008808:	add    al,0x54
 100880a:	add    DWORD PTR [rax],eax
 100880c:	cmp    BYTE PTR [rax],al
 100880e:	add    BYTE PTR [rax],al
 1008810:	add    BYTE PTR [rax],al
 1008812:	add    BYTE PTR [rax],al
 1008814:	add    DWORD PTR [rax],eax
	...
 100881e:	add    BYTE PTR [rax],al
 1008820:	and    al,BYTE PTR [rip+0x11993]        # 0x101a1b9
 1008826:	add    BYTE PTR [rax],al
 1008828:	push   0x154
 100882d:	add    BYTE PTR [rax],al
 100882f:	add    BYTE PTR [rax],al
 1008831:	add    BYTE PTR [rax],al
 1008833:	add    BYTE PTR [rsi],al
 1008835:	add    BYTE PTR [rax],al
 1008837:	add    BYTE PTR [rax+0x54],dh
 100883a:	add    DWORD PTR [rax],eax
 100883c:	cmp    BYTE PTR [rax],al
 100883e:	add    BYTE PTR [rax],al
 1008840:	add    BYTE PTR [rax],al
 1008842:	add    BYTE PTR [rax],al
 1008844:	add    DWORD PTR [rax],eax
	...
 100884e:	add    BYTE PTR [rax],al
 1008850:	and    al,BYTE PTR [rip+0x11993]        # 0x101a1e9
 1008856:	add    BYTE PTR [rax],al
 1008858:	enter  0x154,0x0
	...
 1008864:	(bad)  
 1008865:	add    BYTE PTR [rax],al
 1008867:	add    al,dl
 1008869:	push   rsp
 100886a:	add    DWORD PTR [rax],eax
 100886c:	mov    al,0x0
 100886e:	add    BYTE PTR [rax],al
 1008870:	add    BYTE PTR [rax],al
 1008872:	add    BYTE PTR [rax],al
 1008874:	add    DWORD PTR [rax],eax
	...
 100887e:	add    BYTE PTR [rax],al
 1008880:	and    al,BYTE PTR [rip+0x11993]        # 0x101a219
 1008886:	add    BYTE PTR [rax],al
 1008888:	sub    BYTE PTR [rbp+0x1],dl
	...
 1008893:	add    BYTE PTR [rbx],al
 1008895:	add    BYTE PTR [rax],al
 1008897:	add    BYTE PTR [rax],dh
 1008899:	push   rbp
 100889a:	add    DWORD PTR [rax],eax
 100889c:	pop    rax
 100889d:	add    BYTE PTR [rax],al
 100889f:	add    BYTE PTR [rax],al
 10088a1:	add    BYTE PTR [rax],al
 10088a3:	add    BYTE PTR [rcx],al
	...
 10088ad:	add    BYTE PTR [rax],al
 10088af:	add    BYTE PTR [rdx],ah
 10088b1:	add    eax,0x11993
 10088b6:	add    BYTE PTR [rax],al
 10088b8:	adc    BYTE PTR [rsi+0x1],0x0
	...
 10088c4:	adc    DWORD PTR [rax],eax
 10088c6:	add    BYTE PTR [rax],al
 10088c8:	mov    BYTE PTR [rsi+0x1],dl
 10088cb:	add    BYTE PTR [rax+0x0],ah
 10088ce:	add    BYTE PTR [rax],al
 10088d0:	add    BYTE PTR [rax],al
 10088d2:	add    BYTE PTR [rax],al
 10088d4:	add    DWORD PTR [rax],eax
	...
 10088de:	add    BYTE PTR [rax],al
 10088e0:	and    al,BYTE PTR [rip+0x11993]        # 0x101a279
 10088e6:	add    BYTE PTR [rax],al
 10088e8:	add    al,0x58
 10088ea:	add    DWORD PTR [rax],eax
	...
 10088f4:	add    al,0x0
 10088f6:	add    BYTE PTR [rax],al
 10088f8:	or     al,0x58
 10088fa:	add    DWORD PTR [rax],eax
 10088fc:	mov    eax,0x0
 1008901:	add    BYTE PTR [rax],al
 1008903:	add    BYTE PTR [rcx],al
 1008905:	add    BYTE PTR [rax],al
 1008907:	add    BYTE PTR [rdx+0x53],dl
 100890a:	rex.R push rbx
 100890c:	stc    
 100890d:	ins    BYTE PTR es:[rdi],dx
 100890e:	cdq    
 100890f:	out    dx,al
 1008910:	mov    ebx,0x9447caef
 1008915:	mov    ah,0xe0
 1008917:	ja     0x10088aa
 1008919:	rex.WB
 100891a:	and    DWORD PTR [rcx],r8d
 100891d:	add    BYTE PTR [rax],al
 100891f:	add    BYTE PTR [rdx+0x63],ah
 1008922:	jo     0x1008952
 1008924:	jo     0x100898a
 1008926:	(bad)  
	...
 10089af:	add    BYTE PTR [rax-0x7d],cl
 10089b2:	in     al,dx
 10089b3:	sub    BYTE PTR [rax-0x7d],cl
 10089b6:	cmp    edi,edi
 10089b8:	je     0x10089ed
 10089ba:	test   BYTE PTR [rip+0xf073],0x4        # 0x1017a34
 10089c1:	jne    0x10089cf
 10089c3:	mov    QWORD PTR [rcx],0xffffffffffffffff
 10089ca:	add    rsp,0x28
 10089ce:	ret    
 10089cf:	mov    rax,QWORD PTR [rip+0xe752]        # 0x1017128
 10089d6:	cmp    rax,0xffffffffffffffff
 10089da:	je     0x10089ed
 10089dc:	mov    r9,rcx
 10089df:	xor    r8d,r8d
 10089e2:	xor    edx,edx
 10089e4:	mov    rcx,rax
 10089e7:	call   QWORD PTR [rip+0xe78b]        # 0x1017178
 10089ed:	add    rsp,0x28
 10089f1:	ret    
 10089f2:	int3   
 10089f3:	int3   
 10089f4:	int3   
 10089f5:	int3   
 10089f6:	int3   
 10089f7:	int3   
 10089f8:	int3   
 10089f9:	int3   
 10089fa:	int3   
 10089fb:	int3   
 10089fc:	int3   
 10089fd:	int3   
 10089fe:	int3   
 10089ff:	int3   
 1008a00:	xor    r10d,r10d
 1008a03:	mov    r9,r8
 1008a06:	mov    eax,r10d
 1008a09:	test   rdx,rdx
 1008a0c:	je     0x1008a17
 1008a0e:	cmp    rdx,0x7fffffff
 1008a15:	jbe    0x1008a1c
 1008a17:	mov    eax,0x80070057
 1008a1c:	test   eax,eax
 1008a1e:	js     0x1008a70
 1008a20:	test   rdx,rdx
 1008a23:	je     0x1008a61
 1008a25:	mov    r8d,0x7ffffffe
 1008a2b:	sub    r8,rdx
 1008a2e:	sub    r9,rcx
 1008a31:	lea    rax,[r8+rdx*1]
 1008a35:	test   rax,rax
 1008a38:	je     0x1008a5c
 1008a3a:	movzx  eax,BYTE PTR [r9+rcx*1]
 1008a3f:	test   al,al
 1008a41:	je     0x1008a5c
 1008a43:	mov    BYTE PTR [rcx],al
 1008a45:	inc    rcx
 1008a48:	dec    rdx
 1008a4b:	jne    0x1008a31
 1008a4d:	dec    rcx
 1008a50:	mov    r10d,0x8007007a
 1008a56:	mov    BYTE PTR [rcx],dl
 1008a58:	mov    eax,r10d
 1008a5b:	ret    
 1008a5c:	test   rdx,rdx
 1008a5f:	jne    0x1008a6a
 1008a61:	dec    rcx
 1008a64:	mov    r10d,0x8007007a
 1008a6a:	mov    BYTE PTR [rcx],0x0
 1008a6d:	mov    eax,r10d
 1008a70:	repz ret 
 1008a72:	int3   
 1008a73:	int3   
 1008a74:	int3   
 1008a75:	int3   
 1008a76:	int3   
 1008a77:	int3   
 1008a78:	int3   
 1008a79:	int3   
 1008a7a:	int3   
 1008a7b:	int3   
 1008a7c:	int3   
 1008a7d:	int3   
 1008a7e:	int3   
 1008a7f:	int3   
 1008a80:	mov    QWORD PTR [rsp+0x18],r8
 1008a85:	mov    QWORD PTR [rsp+0x20],r9
 1008a8a:	push   rsi
 1008a8b:	push   rdi
 1008a8c:	sub    rsp,0x28
 1008a90:	xor    edi,edi
 1008a92:	mov    rsi,rcx
 1008a95:	mov    eax,edi
 1008a97:	test   rdx,rdx
 1008a9a:	je     0x1008aa5
 1008a9c:	cmp    rdx,0x7fffffff
 1008aa3:	jbe    0x1008aaa
 1008aa5:	mov    eax,0x80070057
 1008aaa:	test   eax,eax
 1008aac:	js     0x1008af4
 1008aae:	mov    QWORD PTR [rsp+0x20],rbx
 1008ab3:	lea    rbx,[rdx-0x1]
 1008ab7:	lea    r9,[rsp+0x58]
 1008abc:	mov    rdx,rbx
 1008abf:	call   QWORD PTR [rip+0xffffffffffff87db]        # 0x10012a0
 1008ac5:	test   eax,eax
 1008ac7:	js     0x1008ae4
 1008ac9:	cdqe   
 1008acb:	cmp    rax,rbx
 1008ace:	ja     0x1008ae4
 1008ad0:	jne    0x1008aed
 1008ad2:	mov    BYTE PTR [rbx+rsi*1],dil
 1008ad6:	mov    rbx,QWORD PTR [rsp+0x20]
 1008adb:	mov    eax,edi
 1008add:	add    rsp,0x28
 1008ae1:	pop    rdi
 1008ae2:	pop    rsi
 1008ae3:	ret    
 1008ae4:	mov    BYTE PTR [rbx+rsi*1],dil
 1008ae8:	mov    edi,0x8007007a
 1008aed:	mov    rbx,QWORD PTR [rsp+0x20]
 1008af2:	mov    eax,edi
 1008af4:	add    rsp,0x28
 1008af8:	pop    rdi
 1008af9:	pop    rsi
 1008afa:	ret    
 1008afb:	int3   
 1008afc:	int3   
 1008afd:	int3   
 1008afe:	int3   
 1008aff:	int3   
 1008b00:	int3   
 1008b01:	int3   
 1008b02:	int3   
 1008b03:	int3   
 1008b04:	int3   
 1008b05:	int3   
 1008b06:	int3   
 1008b07:	int3   
 1008b08:	int3   
 1008b09:	int3   
 1008b0a:	int3   
 1008b0b:	int3   
 1008b0c:	int3   
 1008b0d:	int3   
 1008b0e:	int3   
 1008b0f:	int3   
 1008b10:	rex push rbp
 1008b12:	push   r14
 1008b14:	push   r15
 1008b16:	sub    rsp,0x70
 1008b1a:	lea    rbp,[rsp+0x30]
 1008b1f:	mov    QWORD PTR [rbp+0x60],rbx
 1008b23:	mov    QWORD PTR [rbp+0x68],rsi
 1008b27:	mov    QWORD PTR [rbp+0x70],rdi
 1008b2b:	mov    QWORD PTR [rbp+0x78],r12
 1008b2f:	mov    rax,QWORD PTR [rip+0xe5da]        # 0x1017110
 1008b36:	xor    rax,rbp
 1008b39:	mov    QWORD PTR [rbp+0x38],rax
 1008b3d:	mov    r15,r9
 1008b40:	mov    r12,r8
 1008b43:	mov    rsi,rdx
 1008b46:	mov    r14,rcx
 1008b49:	mov    DWORD PTR [rbp+0x0],0x0
 1008b50:	mov    QWORD PTR [rbp+0x8],0x0
 1008b58:	mov    QWORD PTR [rbp+0x10],0x0
 1008b60:	lea    rbx,[r9*4+0x10]
 1008b68:	cmp    rbx,0x400
 1008b6f:	ja     0x1008bb1
 1008b71:	lea    rax,[rbx+0xf]
 1008b75:	movabs rcx,0xffffffffffffff0
 1008b7f:	cmp    rax,rbx
 1008b82:	ja     0x1008b87
 1008b84:	mov    rax,rcx
 1008b87:	and    rax,0xfffffffffffffff0
 1008b8b:	call   0x1014ba0
 1008b90:	sub    rsp,rax
 1008b93:	lea    rdi,[rsp+0x30]
 1008b98:	mov    QWORD PTR [rbp+0x18],rdi
 1008b9c:	test   rdi,rdi
 1008b9f:	je     0x1008bde
 1008ba1:	mov    DWORD PTR [rdi],0xcccc
 1008ba7:	add    rdi,0x10
 1008bab:	mov    QWORD PTR [rbp+0x18],rdi
 1008baf:	jmp    0x1008bde
 1008bb1:	mov    rcx,rbx
 1008bb4:	call   QWORD PTR [rip+0xffffffffffff8746]        # 0x1001300
 1008bba:	mov    rdi,rax
 1008bbd:	mov    QWORD PTR [rbp+0x28],rax
 1008bc1:	test   rax,rax
 1008bc4:	je     0x1008bd4
 1008bc6:	mov    DWORD PTR [rax],0xdddd
 1008bcc:	add    rdi,0x10
 1008bd0:	mov    QWORD PTR [rbp+0x28],rdi
 1008bd4:	movabs rcx,0xffffffffffffff0
 1008bde:	mov    QWORD PTR [rbp+0x8],rdi
 1008be2:	cmp    rbx,0x400
 1008be9:	ja     0x1008c21
 1008beb:	lea    rax,[rbx+0xf]
 1008bef:	cmp    rax,rbx
 1008bf2:	ja     0x1008bf7
 1008bf4:	mov    rax,rcx
 1008bf7:	and    rax,0xfffffffffffffff0
 1008bfb:	call   0x1014ba0
 1008c00:	sub    rsp,rax
 1008c03:	lea    rbx,[rsp+0x30]
 1008c08:	mov    QWORD PTR [rbp+0x20],rbx
 1008c0c:	test   rbx,rbx
 1008c0f:	je     0x1008c44
 1008c11:	mov    DWORD PTR [rbx],0xcccc
 1008c17:	add    rbx,0x10
 1008c1b:	mov    QWORD PTR [rbp+0x20],rbx
 1008c1f:	jmp    0x1008c44
 1008c21:	mov    rcx,rbx
 1008c24:	call   QWORD PTR [rip+0xffffffffffff86d6]        # 0x1001300
 1008c2a:	mov    rbx,rax
 1008c2d:	mov    QWORD PTR [rbp+0x30],rax
 1008c31:	test   rax,rax
 1008c34:	je     0x1008c44
 1008c36:	mov    DWORD PTR [rax],0xdddd
 1008c3c:	add    rbx,0x10
 1008c40:	mov    QWORD PTR [rbp+0x30],rbx
 1008c44:	mov    QWORD PTR [rbp+0x10],rbx
 1008c48:	mov    QWORD PTR [rsp+0x20],r15
 1008c4d:	mov    r9,rdi
 1008c50:	mov    r8,rsi
 1008c53:	mov    rdx,r14
 1008c56:	mov    r14d,DWORD PTR [rbp+0x80]
 1008c5d:	mov    ecx,r14d
 1008c60:	call   0x1013ca0
 1008c65:	mov    rsi,rax
 1008c68:	test   rax,rax
 1008c6b:	je     0x1008cb5
 1008c6d:	mov    r9,r15
 1008c70:	mov    r8,rbx
 1008c73:	mov    rdx,rax
 1008c76:	mov    rcx,rdi
 1008c79:	call   0x100c720
 1008c7e:	mov    rsi,rax
 1008c81:	test   rax,rax
 1008c84:	je     0x1008cb5
 1008c86:	lea    rax,[rbp+0x0]
 1008c8a:	mov    QWORD PTR [rsp+0x28],rax
 1008c8f:	mov    QWORD PTR [rsp+0x20],r15
 1008c94:	mov    r9,r12
 1008c97:	mov    r8,rsi
 1008c9a:	mov    rdx,rbx
 1008c9d:	mov    ecx,r14d
 1008ca0:	call   0x1013e90
 1008ca5:	mov    rsi,rax
 1008ca8:	test   rax,rax
 1008cab:	je     0x1008cb3
 1008cad:	cmp    DWORD PTR [rbp+0x0],0x0
 1008cb1:	je     0x1008cb5
 1008cb3:	xor    esi,esi
 1008cb5:	test   rdi,rdi
 1008cb8:	je     0x1008ccc
 1008cba:	lea    rcx,[rdi-0x10]
 1008cbe:	cmp    DWORD PTR [rcx],0xdddd
 1008cc4:	jne    0x1008ccc
 1008cc6:	call   QWORD PTR [rip+0xffffffffffff863c]        # 0x1001308
 1008ccc:	test   rbx,rbx
 1008ccf:	je     0x1008ce3
 1008cd1:	lea    rcx,[rbx-0x10]
 1008cd5:	cmp    DWORD PTR [rcx],0xdddd
 1008cdb:	jne    0x1008ce3
 1008cdd:	call   QWORD PTR [rip+0xffffffffffff8625]        # 0x1001308
 1008ce3:	test   rsi,rsi
 1008ce6:	jne    0x1008d1e
 1008ce8:	test   BYTE PTR [rip+0xed45],0x2        # 0x1017a34
 1008cef:	je     0x1008d1e
 1008cf1:	mov    rax,QWORD PTR [rip+0x11ca0]        # 0x101a998
 1008cf8:	test   rax,rax
 1008cfb:	je     0x1008d1e
 1008cfd:	call   QWORD PTR [rip+0xffffffffffff834d]        # 0x1001050
 1008d03:	mov    r9d,eax
 1008d06:	mov    r8,QWORD PTR [rip+0x11c8b]        # 0x101a998
 1008d0d:	mov    edx,0x65c00
 1008d12:	mov    rcx,QWORD PTR [rip+0x114b7]        # 0x101a1d0
 1008d19:	call   0x1012910
 1008d1e:	mov    rax,rsi
 1008d21:	jmp    0x1008d61
 1008d23:	call   QWORD PTR [rip+0xffffffffffff85b7]        # 0x10012e0
 1008d29:	mov    r11,QWORD PTR [rbp+0x8]
 1008d2d:	test   r11,r11
 1008d30:	je     0x1008d44
 1008d32:	lea    rcx,[r11-0x10]
 1008d36:	cmp    DWORD PTR [rcx],0xdddd
 1008d3c:	jne    0x1008d44
 1008d3e:	call   QWORD PTR [rip+0xffffffffffff85c4]        # 0x1001308
 1008d44:	mov    rax,QWORD PTR [rbp+0x10]
 1008d48:	test   rax,rax
 1008d4b:	je     0x1008d5f
 1008d4d:	lea    rcx,[rax-0x10]
 1008d51:	cmp    DWORD PTR [rcx],0xdddd
 1008d57:	jne    0x1008d5f
 1008d59:	call   QWORD PTR [rip+0xffffffffffff85a9]        # 0x1001308
 1008d5f:	xor    eax,eax
 1008d61:	mov    rcx,QWORD PTR [rbp+0x38]
 1008d65:	xor    rcx,rbp
 1008d68:	call   0x1014450
 1008d6d:	mov    rbx,QWORD PTR [rbp+0x60]
 1008d71:	mov    rsi,QWORD PTR [rbp+0x68]
 1008d75:	mov    rdi,QWORD PTR [rbp+0x70]
 1008d79:	mov    r12,QWORD PTR [rbp+0x78]
 1008d7d:	lea    rsp,[rbp+0x40]
 1008d81:	pop    r15
 1008d83:	pop    r14
 1008d85:	pop    rbp
 1008d86:	ret    
 1008d87:	int3   
 1008d88:	int3   
 1008d89:	int3   
 1008d8a:	int3   
 1008d8b:	int3   
 1008d8c:	int3   
 1008d8d:	int3   
 1008d8e:	int3   
 1008d8f:	int3   
 1008d90:	rex push rbp
 1008d92:	push   rsi
 1008d93:	push   rdi
 1008d94:	push   r12
 1008d96:	push   r13
 1008d98:	push   r14
 1008d9a:	push   r15
 1008d9c:	lea    rbp,[rsp-0x270]
 1008da4:	sub    rsp,0x370
 1008dab:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
 1008db4:	mov    QWORD PTR [rsp+0x3c0],rbx
 1008dbc:	mov    rax,QWORD PTR [rip+0xe34d]        # 0x1017110
 1008dc3:	xor    rax,rsp
 1008dc6:	mov    QWORD PTR [rbp+0x260],rax
 1008dcd:	mov    rdi,rdx
 1008dd0:	mov    r15d,ecx
 1008dd3:	or     r13,0xffffffffffffffff
 1008dd7:	mov    QWORD PTR [rsp+0x30],r13
 1008ddc:	xor    esi,esi
 1008dde:	test   BYTE PTR [rip+0xec4f],0x4        # 0x1017a34
 1008de5:	je     0x1008e24
 1008de7:	mov    rax,QWORD PTR [rip+0x11a6a]        # 0x101a858
 1008dee:	test   rax,rax
 1008df1:	je     0x1008e24
 1008df3:	cmp    QWORD PTR [rip+0xe32e],r13        # 0x1017128
 1008dfa:	je     0x1008e24
 1008dfc:	mov    QWORD PTR [rsp+0x28],rsi
 1008e01:	mov    rax,QWORD PTR [rip+0x11a50]        # 0x101a858
 1008e08:	mov    QWORD PTR [rsp+0x20],rax
 1008e0d:	lea    r9,[rsp+0x30]
 1008e12:	xor    r8d,r8d
 1008e15:	xor    edx,edx
 1008e17:	mov    rcx,QWORD PTR [rip+0xe30a]        # 0x1017128
 1008e1e:	call   QWORD PTR [rip+0xe344]        # 0x1017168
 1008e24:	mov    QWORD PTR [rip+0xebdd],rsi        # 0x1017a08
 1008e2b:	mov    DWORD PTR [rip+0xebf6],r13d        # 0x1017a28
 1008e32:	mov    QWORD PTR [rip+0xec6f],rsi        # 0x1017aa8
 1008e39:	mov    DWORD PTR [rip+0xec20],r13d        # 0x1017a60
 1008e40:	mov    QWORD PTR [rip+0xec01],r13        # 0x1017a48
 1008e47:	mov    QWORD PTR [rip+0xebc2],r13        # 0x1017a10
 1008e4e:	mov    DWORD PTR [rip+0xebfb],r13d        # 0x1017a50
 1008e55:	mov    QWORD PTR [rip+0xebfc],rsi        # 0x1017a58
 1008e5c:	mov    QWORD PTR [rip+0xebdd],rsi        # 0x1017a40
 1008e63:	mov    QWORD PTR [rip+0xec56],rsi        # 0x1017ac0
 1008e6a:	mov    QWORD PTR [rip+0xec1f],rsi        # 0x1017a90
 1008e71:	mov    QWORD PTR [rip+0xebc0],rsi        # 0x1017a38
 1008e78:	mov    DWORD PTR [rip+0xebea],esi        # 0x1017a68
 1008e7e:	mov    DWORD PTR [rip+0xeb80],esi        # 0x1017a04
 1008e84:	mov    DWORD PTR [rip+0xeba2],esi        # 0x1017a2c
 1008e8a:	call   QWORD PTR [rip+0xffffffffffff8458]        # 0x10012e8
 1008e90:	mov    QWORD PTR [rip+0xebf1],rax        # 0x1017a88
 1008e97:	call   QWORD PTR [rip+0xffffffffffff844b]        # 0x10012e8
 1008e9d:	add    rax,0x30
 1008ea1:	mov    QWORD PTR [rip+0xec20],rax        # 0x1017ac8
 1008ea8:	mov    QWORD PTR [rip+0xebe9],rsi        # 0x1017a98
 1008eaf:	mov    rax,QWORD PTR [rdi]
 1008eb2:	mov    QWORD PTR [rip+0xeb5f],rax        # 0x1017a18
 1008eb9:	mov    QWORD PTR [rip+0xebb0],rsi        # 0x1017a70
 1008ec0:	mov    QWORD PTR [rip+0xebe9],rsi        # 0x1017ab0
 1008ec7:	mov    QWORD PTR [rip+0xebaa],rsi        # 0x1017a78
 1008ece:	mov    DWORD PTR [rip+0xebac],esi        # 0x1017a80
 1008ed4:	cmp    r15d,0x2
 1008ed8:	jne    0x1008f42
 1008eda:	mov    rax,QWORD PTR [rdi+0x8]
 1008ede:	lea    rdi,[rip+0xffffffffffff871b]        # 0x1001600
 1008ee5:	mov    rsi,rax
 1008ee8:	mov    ecx,0x3
 1008eed:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1008eef:	je     0x1008f04
 1008ef1:	lea    rdi,[rip+0xffffffffffff870c]        # 0x1001604
 1008ef8:	mov    rsi,rax
 1008efb:	mov    ecx,0x3
 1008f00:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1008f02:	jne    0x1008f48
 1008f04:	call   0x1013750
 1008f09:	nop
 1008f0a:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 1008f10:	je     0x1008f38
 1008f12:	test   BYTE PTR [rip+0xeb1b],0x4        # 0x1017a34
 1008f19:	je     0x1008f38
 1008f1b:	mov    rcx,QWORD PTR [rip+0xe206]        # 0x1017128
 1008f22:	cmp    rcx,0xffffffffffffffff
 1008f26:	je     0x1008f38
 1008f28:	lea    r9,[rsp+0x30]
 1008f2d:	xor    r8d,r8d
 1008f30:	xor    edx,edx
 1008f32:	call   QWORD PTR [rip+0xe240]        # 0x1017178
 1008f38:	mov    eax,0x1
 1008f3d:	jmp    0x100b4c9
 1008f42:	cmp    r15d,0x4
 1008f46:	jge    0x1008fbd
 1008f48:	test   BYTE PTR [rip+0xeae5],0x2        # 0x1017a34
 1008f4f:	je     0x1008f78
 1008f51:	mov    rax,QWORD PTR [rip+0x11418]        # 0x101a370
 1008f58:	test   rax,rax
 1008f5b:	je     0x1008f78
 1008f5d:	mov    r9d,r15d
 1008f60:	mov    r8,QWORD PTR [rip+0x11409]        # 0x101a370
 1008f67:	mov    edx,0x3b000
 1008f6c:	mov    rcx,QWORD PTR [rip+0x1123d]        # 0x101a1b0
 1008f73:	call   0x10128c0
 1008f78:	mov    rcx,QWORD PTR [rip+0xea99]        # 0x1017a18
 1008f7f:	call   0x100ba00
 1008f84:	nop
 1008f85:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 1008f8b:	je     0x1008fb3
 1008f8d:	test   BYTE PTR [rip+0xeaa0],0x4        # 0x1017a34
 1008f94:	je     0x1008fb3
 1008f96:	mov    rcx,QWORD PTR [rip+0xe18b]        # 0x1017128
 1008f9d:	cmp    rcx,0xffffffffffffffff
 1008fa1:	je     0x1008fb3
 1008fa3:	lea    r9,[rsp+0x30]
 1008fa8:	xor    r8d,r8d
 1008fab:	xor    edx,edx
 1008fad:	call   QWORD PTR [rip+0xe1c5]        # 0x1017178
 1008fb3:	mov    eax,0x2
 1008fb8:	jmp    0x100b4c9
 1008fbd:	mov    rax,QWORD PTR [rdi+0x8]
 1008fc1:	mov    QWORD PTR [rip+0xea40],rax        # 0x1017a08
 1008fc8:	mov    rcx,QWORD PTR [rdi+0x10]
 1008fcc:	call   0x100bd60
 1008fd1:	test   al,al
 1008fd3:	jne    0x1008fd7
 1008fd5:	jmp    0x1008f85
 1008fd7:	mov    ebx,0x307
 1008fdc:	mov    QWORD PTR [rsp+0x48],rbx
 1008fe1:	cmp    DWORD PTR [rip+0xea85],esi        # 0x1017a6c
 1008fe7:	jne    0x1009082
 1008fed:	mov    rcx,QWORD PTR [rip+0xea14]        # 0x1017a08
 1008ff4:	mov    rax,r13
 1008ff7:	inc    rax
 1008ffa:	cmp    BYTE PTR [rcx+rax*1],sil
 1008ffe:	jne    0x1008ff7
 1009000:	cmp    rax,rbx
 1009003:	jb     0x10090cb
 1009009:	test   BYTE PTR [rip+0xea24],0x2        # 0x1017a34
 1009010:	je     0x100903d
 1009012:	mov    rax,QWORD PTR [rip+0x112cf]        # 0x101a2e8
 1009019:	test   rax,rax
 100901c:	je     0x100903d
 100901e:	mov    r9,QWORD PTR [rip+0xe9e3]        # 0x1017a08
 1009025:	mov    r8,QWORD PTR [rip+0x112bc]        # 0x101a2e8
 100902c:	mov    edx,0x40400
 1009031:	mov    rcx,QWORD PTR [rip+0x11178]        # 0x101a1b0
 1009038:	call   0x10128c0
 100903d:	mov    r9d,0x100
 1009043:	lea    r8,[rsp+0x60]
 1009048:	mov    edx,0x44
 100904d:	mov    rcx,QWORD PTR [rip+0xe9cc]        # 0x1017a20
 1009054:	call   QWORD PTR [rip+0xffffffffffff836e]        # 0x10013c8
 100905a:	lea    rdx,[rsp+0x60]
 100905f:	lea    rcx,[rsp+0x60]
 1009064:	call   QWORD PTR [rip+0xffffffffffff8356]        # 0x10013c0
 100906a:	mov    rdx,QWORD PTR [rip+0xea57]        # 0x1017ac8
 1009071:	lea    rcx,[rsp+0x60]
 1009076:	call   QWORD PTR [rip+0xffffffffffff8274]        # 0x10012f0
 100907c:	nop
 100907d:	jmp    0x1008f85
 1009082:	test   BYTE PTR [rip+0xe9ab],0x2        # 0x1017a34
 1009089:	je     0x10090b6
 100908b:	mov    rax,QWORD PTR [rip+0x112e6]        # 0x101a378
 1009092:	test   rax,rax
 1009095:	je     0x10090b6
 1009097:	mov    r9,QWORD PTR [rip+0xe96a]        # 0x1017a08
 100909e:	mov    r8,QWORD PTR [rip+0x112d3]        # 0x101a378
 10090a5:	mov    edx,0x44000
 10090aa:	mov    rcx,QWORD PTR [rip+0x110ff]        # 0x101a1b0
 10090b1:	call   0x10128c0
 10090b6:	mov    rax,QWORD PTR [rip+0xe94b]        # 0x1017a08
 10090bd:	mov    QWORD PTR [rip+0xe9dc],rax        # 0x1017aa0
 10090c4:	mov    QWORD PTR [rip+0xe93d],rsi        # 0x1017a08
 10090cb:	lea    r12,[rdi+0x18]
 10090cf:	mov    rax,QWORD PTR [r12]
 10090d3:	mov    QWORD PTR [rip+0xe9ce],rax        # 0x1017aa8
 10090da:	test   BYTE PTR [rip+0xe953],0x2        # 0x1017a34
 10090e1:	je     0x100910e
 10090e3:	mov    rax,QWORD PTR [rip+0x1120e]        # 0x101a2f8
 10090ea:	test   rax,rax
 10090ed:	je     0x100910e
 10090ef:	mov    r9,QWORD PTR [rip+0xe9b2]        # 0x1017aa8
 10090f6:	mov    r8,QWORD PTR [rip+0x111fb]        # 0x101a2f8
 10090fd:	mov    edx,0x46800
 1009102:	mov    rcx,QWORD PTR [rip+0x110a7]        # 0x101a1b0
 1009109:	call   0x10128c0
 100910e:	sub    r15d,0x4
 1009112:	lea    rdi,[rip+0xffffffffffff8387]        # 0x10014a0
 1009119:	test   r15d,r15d
 100911c:	jle    0x100b116
 1009122:	lea    rdx,[rip+0xffffffffffff6ed7]        # 0x1000000
 1009129:	mov    r14d,0x9
 100912f:	nop
 1009130:	add    r12,0x8
 1009134:	mov    rbx,QWORD PTR [r12]
 1009138:	movzx  eax,BYTE PTR [rbx]
 100913b:	cmp    al,0x2d
 100913d:	je     0x1009147
 100913f:	cmp    al,0x2f
 1009141:	jne    0x100a64e
 1009147:	inc    rbx
 100914a:	movzx  eax,BYTE PTR [rbx]
 100914d:	test   al,al
 100914f:	je     0x100a63d
 1009155:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1009160:	movsx  eax,al
 1009163:	add    eax,0xffffffbd
 1009166:	cmp    eax,0x35
 1009169:	ja     0x100b084
 100916f:	cdqe   
 1009171:	movzx  eax,BYTE PTR [rdx+rax*1+0xb570]
 1009179:	mov    ecx,DWORD PTR [rdx+rax*4+0xb4f4]
 1009180:	add    rcx,rdx
 1009183:	jmp    rcx
 1009185:	cmp    r15d,0x1
 1009189:	jle    0x10091ab
 100918b:	mov    rcx,QWORD PTR [r12+0x8]
 1009190:	movzx  eax,BYTE PTR [rcx]
 1009193:	cmp    al,0x2d
 1009195:	je     0x10091ab
 1009197:	cmp    al,0x2f
 1009199:	je     0x10091ab
 100919b:	mov    QWORD PTR [rip+0xe90e],rcx        # 0x1017ab0
 10091a2:	dec    r15d
 10091a5:	add    r12,0x8
 10091a9:	jmp    0x10091cb
 10091ab:	lea    rax,[rbx+0x1]
 10091af:	mov    rcx,rax
 10091b2:	mov    QWORD PTR [rip+0xe8f7],rax        # 0x1017ab0
 10091b9:	cmp    BYTE PTR [rax],0x0
 10091bc:	je     0x10091cb
 10091be:	xchg   ax,ax
 10091c0:	mov    rbx,rax
 10091c3:	inc    rax
 10091c6:	cmp    BYTE PTR [rax],0x0
 10091c9:	jne    0x10091c0
 10091cb:	mov    rax,r13
 10091ce:	xchg   ax,ax
 10091d0:	inc    rax
 10091d3:	cmp    BYTE PTR [rcx+rax*1],0x0
 10091d7:	jne    0x10091d0
 10091d9:	cmp    rax,0x80
 10091df:	ja     0x100a6d0
 10091e5:	test   BYTE PTR [rip+0xe848],0x2        # 0x1017a34
 10091ec:	je     0x100a621
 10091f2:	mov    rax,QWORD PTR [rip+0x11267]        # 0x101a460
 10091f9:	test   rax,rax
 10091fc:	je     0x100a621
 1009202:	mov    rax,QWORD PTR [rip+0xe8a7]        # 0x1017ab0
 1009209:	mov    r9d,0x64
 100920f:	mov    r8,QWORD PTR [rip+0x1124a]        # 0x101a460
 1009216:	mov    edx,0x50c00
 100921b:	jmp    0x100a610
 1009220:	cmp    r15d,0x1
 1009224:	jle    0x1009240
 1009226:	mov    r14,QWORD PTR [r12+0x8]
 100922b:	movzx  eax,BYTE PTR [r14]
 100922f:	cmp    al,0x2d
 1009231:	je     0x1009240
 1009233:	cmp    al,0x2f
 1009235:	je     0x1009240
 1009237:	dec    r15d
 100923a:	add    r12,0x8
 100923e:	jmp    0x100925b
 1009240:	lea    rax,[rbx+0x1]
 1009244:	mov    r14,rax
 1009247:	cmp    BYTE PTR [rax],0x0
 100924a:	je     0x100925b
 100924c:	nop    DWORD PTR [rax+0x0]
 1009250:	mov    rbx,rax
 1009253:	inc    rax
 1009256:	cmp    BYTE PTR [rax],0x0
 1009259:	jne    0x1009250
 100925b:	test   BYTE PTR [rip+0xe7d2],0x2        # 0x1017a34
 1009262:	je     0x1009293
 1009264:	mov    rax,QWORD PTR [rip+0x1105d]        # 0x101a2c8
 100926b:	test   rax,rax
 100926e:	je     0x1009293
 1009270:	mov    QWORD PTR [rsp+0x20],r14
 1009275:	mov    r9d,0x69
 100927b:	mov    r8,QWORD PTR [rip+0x11046]        # 0x101a2c8
 1009282:	mov    edx,0x56000
 1009287:	mov    rcx,QWORD PTR [rip+0x10f22]        # 0x101a1b0
 100928e:	call   0x10128c0
 1009293:	mov    rsi,r14
 1009296:	mov    ecx,0x1
 100929b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100929d:	je     0x100a7a6
 10092a3:	mov    rcx,r14
 10092a6:	call   0x100c690
 10092ab:	test   eax,eax
 10092ad:	je     0x10092b5
 10092af:	xor    esi,esi
 10092b1:	mov    eax,esi
 10092b3:	jmp    0x10092c7
 10092b5:	lea    rdx,[rip+0xffffffffffff8460]        # 0x100171c
 10092bc:	mov    rcx,r14
 10092bf:	call   QWORD PTR [rip+0xffffffffffff7feb]        # 0x10012b0
 10092c5:	xor    esi,esi
 10092c7:	mov    QWORD PTR [rip+0xe7ba],rax        # 0x1017a88
 10092ce:	test   rax,rax
 10092d1:	je     0x100a715
 10092d7:	mov    r14d,0x9
 10092dd:	jmp    0x100a621
 10092e2:	cmp    r15d,0x1
 10092e6:	jle    0x1009302
 10092e8:	mov    r14,QWORD PTR [r12+0x8]
 10092ed:	movzx  eax,BYTE PTR [r14]
 10092f1:	cmp    al,0x2d
 10092f3:	je     0x1009302
 10092f5:	cmp    al,0x2f
 10092f7:	je     0x1009302
 10092f9:	dec    r15d
 10092fc:	add    r12,0x8
 1009300:	jmp    0x100931b
 1009302:	lea    rax,[rbx+0x1]
 1009306:	mov    r14,rax
 1009309:	cmp    BYTE PTR [rax],0x0
 100930c:	je     0x100931b
 100930e:	xchg   ax,ax
 1009310:	mov    rbx,rax
 1009313:	inc    rax
 1009316:	cmp    BYTE PTR [rax],0x0
 1009319:	jne    0x1009310
 100931b:	test   BYTE PTR [rip+0xe712],0x2        # 0x1017a34
 1009322:	je     0x1009353
 1009324:	mov    rax,QWORD PTR [rip+0x10fe5]        # 0x101a310
 100932b:	test   rax,rax
 100932e:	je     0x1009353
 1009330:	mov    QWORD PTR [rsp+0x20],r14
 1009335:	mov    r9d,0x6f
 100933b:	mov    r8,QWORD PTR [rip+0x10fce]        # 0x101a310
 1009342:	mov    edx,0x63c00
 1009347:	mov    rcx,QWORD PTR [rip+0x10e62]        # 0x101a1b0
 100934e:	call   0x10128c0
 1009353:	mov    rsi,r14
 1009356:	mov    ecx,0x1
 100935b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100935d:	je     0x100a8c6
 1009363:	mov    rcx,r14
 1009366:	call   0x100c690
 100936b:	test   eax,eax
 100936d:	je     0x1009375
 100936f:	xor    esi,esi
 1009371:	mov    eax,esi
 1009373:	jmp    0x1009387
 1009375:	lea    rdx,[rip+0xffffffffffff8440]        # 0x10017bc
 100937c:	mov    rcx,r14
 100937f:	call   QWORD PTR [rip+0xffffffffffff7f2b]        # 0x10012b0
 1009385:	xor    esi,esi
 1009387:	mov    QWORD PTR [rip+0xe73a],rax        # 0x1017ac8
 100938e:	test   rax,rax
 1009391:	je     0x100a835
 1009397:	mov    r14d,0x9
 100939d:	jmp    0x100a621
 10093a2:	cmp    r15d,0x1
 10093a6:	jle    0x10093c1
 10093a8:	mov    rdi,QWORD PTR [r12+0x8]
 10093ad:	movzx  eax,BYTE PTR [rdi]
 10093b0:	cmp    al,0x2d
 10093b2:	je     0x10093c1
 10093b4:	cmp    al,0x2f
 10093b6:	je     0x10093c1
 10093b8:	dec    r15d
 10093bb:	add    r12,0x8
 10093bf:	jmp    0x10093db
 10093c1:	lea    rax,[rbx+0x1]
 10093c5:	mov    rdi,rax
 10093c8:	cmp    BYTE PTR [rax],0x0
 10093cb:	je     0x10093db
 10093cd:	nop    DWORD PTR [rax]
 10093d0:	mov    rbx,rax
 10093d3:	inc    rax
 10093d6:	cmp    BYTE PTR [rax],0x0
 10093d9:	jne    0x10093d0
 10093db:	test   BYTE PTR [rip+0xe652],0x2        # 0x1017a34
 10093e2:	je     0x1009413
 10093e4:	mov    rax,QWORD PTR [rip+0x10fa5]        # 0x101a390
 10093eb:	test   rax,rax
 10093ee:	je     0x1009413
 10093f0:	mov    QWORD PTR [rsp+0x20],rdi
 10093f5:	mov    r9d,0x56
 10093fb:	mov    r8,QWORD PTR [rip+0x10f8e]        # 0x101a390
 1009402:	mov    edx,0x71800
 1009407:	mov    rcx,QWORD PTR [rip+0x10da2]        # 0x101a1b0
 100940e:	call   0x10128c0
 1009413:	mov    rcx,rdi
 1009416:	call   QWORD PTR [rip+0xffffffffffff7eb4]        # 0x10012d0
 100941c:	mov    DWORD PTR [rip+0xe632],eax        # 0x1017a54
 1009422:	jmp    0x100a621
 1009427:	test   BYTE PTR [rip+0xe606],0x2        # 0x1017a34
 100942e:	je     0x100945a
 1009430:	mov    rax,QWORD PTR [rip+0x10f81]        # 0x101a3b8
 1009437:	test   rax,rax
 100943a:	je     0x100945a
 100943c:	mov    r9d,0x52
 1009442:	mov    r8,QWORD PTR [rip+0x10f6f]        # 0x101a3b8
 1009449:	mov    edx,0x73400
 100944e:	mov    rcx,QWORD PTR [rip+0x10d5b]        # 0x101a1b0
 1009455:	call   0x10128c0
 100945a:	mov    DWORD PTR [rip+0xe620],0x1        # 0x1017a84
 1009464:	jmp    0x100a621
 1009469:	cmp    DWORD PTR [rip+0xe5bc],0x0        # 0x1017a2c
 1009470:	je     0x100947c
 1009472:	mov    ecx,0x2
 1009477:	call   0x100c260
 100947c:	test   BYTE PTR [rip+0xe5b1],0x2        # 0x1017a34
 1009483:	je     0x10094af
 1009485:	mov    rax,QWORD PTR [rip+0x10e54]        # 0x101a2e0
 100948c:	test   rax,rax
 100948f:	je     0x10094af
 1009491:	mov    r9d,0x6e
 1009497:	mov    r8,QWORD PTR [rip+0x10e42]        # 0x101a2e0
 100949e:	mov    edx,0x75400
 10094a3:	mov    rcx,QWORD PTR [rip+0x10d06]        # 0x101a1b0
 10094aa:	call   0x10128c0
 10094af:	mov    DWORD PTR [rip+0xe573],0x2        # 0x1017a2c
 10094b9:	jmp    0x100a621
 10094be:	cmp    DWORD PTR [rip+0xe567],0x0        # 0x1017a2c
 10094c5:	je     0x10094d1
 10094c7:	mov    ecx,0x1
 10094cc:	call   0x100c260
 10094d1:	mov    DWORD PTR [rip+0xe551],0x1        # 0x1017a2c
 10094db:	test   BYTE PTR [rip+0xe552],0x2        # 0x1017a34
 10094e2:	je     0x100950e
 10094e4:	mov    rax,QWORD PTR [rip+0x10e1d]        # 0x101a308
 10094eb:	test   rax,rax
 10094ee:	je     0x100950e
 10094f0:	mov    r9d,0x63
 10094f6:	mov    r8,QWORD PTR [rip+0x10e0b]        # 0x101a308
 10094fd:	mov    edx,0x77c00
 1009502:	mov    rcx,QWORD PTR [rip+0x10ca7]        # 0x101a1b0
 1009509:	call   0x10128c0
 100950e:	cmp    QWORD PTR [rip+0xe57a],0x0        # 0x1017a90
 1009516:	jne    0x1009542
 1009518:	mov    ecx,0x2
 100951d:	call   QWORD PTR [rip+0xffffffffffff7ddd]        # 0x1001300
 1009523:	mov    QWORD PTR [rip+0xe566],rax        # 0x1017a90
 100952a:	test   rax,rax
 100952d:	je     0x100a955
 1009533:	mov    WORD PTR [rax],0x9
 1009538:	mov    DWORD PTR [rip+0xe526],0x1        # 0x1017a68
 1009542:	cmp    QWORD PTR [rip+0xe4ee],0x0        # 0x1017a38
 100954a:	jne    0x100a621
 1009550:	mov    ecx,0x3
 1009555:	call   QWORD PTR [rip+0xffffffffffff7da5]        # 0x1001300
 100955b:	mov    QWORD PTR [rip+0xe4d6],rax        # 0x1017a38
 1009562:	test   rax,rax
 1009565:	je     0x100a9fe
 100956b:	mov    WORD PTR [rax],0xa0d
 1009570:	mov    BYTE PTR [rax+0x2],0x0
 1009574:	mov    DWORD PTR [rip+0xe486],0x2        # 0x1017a04
 100957e:	jmp    0x100a621
 1009583:	cmp    DWORD PTR [rip+0xe4a2],0x0        # 0x1017a2c
 100958a:	je     0x1009596
 100958c:	mov    ecx,0x4
 1009591:	call   0x100c260
 1009596:	mov    DWORD PTR [rip+0xe48c],0x4        # 0x1017a2c
 10095a0:	test   BYTE PTR [rip+0xe48d],0x2        # 0x1017a34
 10095a7:	je     0x10095d3
 10095a9:	mov    rax,QWORD PTR [rip+0x10db0]        # 0x101a360
 10095b0:	test   rax,rax
 10095b3:	je     0x10095d3
 10095b5:	mov    r9d,0x77
 10095bb:	mov    r8,QWORD PTR [rip+0x10d9e]        # 0x101a360
 10095c2:	mov    edx,0x88800
 10095c7:	mov    rcx,QWORD PTR [rip+0x10be2]        # 0x101a1b0
 10095ce:	call   0x10128c0
 10095d3:	cmp    QWORD PTR [rip+0xe4b5],0x0        # 0x1017a90
 10095db:	jne    0x100960a
 10095dd:	mov    ecx,0x4
 10095e2:	call   QWORD PTR [rip+0xffffffffffff7d18]        # 0x1001300
 10095e8:	mov    QWORD PTR [rip+0xe4a1],rax        # 0x1017a90
 10095ef:	test   rax,rax
 10095f2:	je     0x100aaa7
 10095f8:	mov    DWORD PTR [rax],0x9
 10095fe:	mov    DWORD PTR [rip+0xe460],0x2        # 0x1017a68
 1009608:	jmp    0x1009684
 100960a:	mov    rax,QWORD PTR [rip+0xe47f]        # 0x1017a90
 1009611:	mov    rdi,r13
 1009614:	inc    rdi
 1009617:	cmp    BYTE PTR [rax+rdi*1],0x0
 100961b:	jne    0x1009614
 100961d:	lea    rcx,[rdi*2+0x2]
 1009625:	call   QWORD PTR [rip+0xffffffffffff7cd5]        # 0x1001300
 100962b:	mov    rsi,rax
 100962e:	lea    ecx,[rdi+0x1]
 1009631:	mov    DWORD PTR [rsp+0x28],ecx
 1009635:	mov    QWORD PTR [rsp+0x20],rax
 100963a:	mov    r9d,r13d
 100963d:	mov    r8,QWORD PTR [rip+0xe44c]        # 0x1017a90
 1009644:	mov    edx,0x1
 1009649:	mov    ecx,edx
 100964b:	call   QWORD PTR [rip+0xffffffffffff79ef]        # 0x1001040
 1009651:	mov    rcx,QWORD PTR [rip+0xe438]        # 0x1017a90
 1009658:	call   QWORD PTR [rip+0xffffffffffff7caa]        # 0x1001308
 100965e:	mov    QWORD PTR [rip+0xe42b],rsi        # 0x1017a90
 1009665:	mov    rcx,r13
 1009668:	nop    DWORD PTR [rax+rax*1+0x0]
 1009670:	inc    rcx
 1009673:	cmp    WORD PTR [rsi+rcx*2],0x0
 1009678:	jne    0x1009670
 100967a:	add    ecx,ecx
 100967c:	mov    DWORD PTR [rip+0xe3e6],ecx        # 0x1017a68
 1009682:	xor    esi,esi
 1009684:	cmp    QWORD PTR [rip+0xe3ac],0x0        # 0x1017a38
 100968c:	jne    0x10096c2
 100968e:	mov    ecx,0x6
 1009693:	call   QWORD PTR [rip+0xffffffffffff7c67]        # 0x1001300
 1009699:	mov    QWORD PTR [rip+0xe398],rax        # 0x1017a38
 10096a0:	test   rax,rax
 10096a3:	je     0x100ab50
 10096a9:	mov    DWORD PTR [rax],0xa000d
 10096af:	mov    WORD PTR [rax+0x4],si
 10096b3:	mov    DWORD PTR [rip+0xe347],0x4        # 0x1017a04
 10096bd:	jmp    0x100a621
 10096c2:	mov    rax,QWORD PTR [rip+0xe36f]        # 0x1017a38
 10096c9:	mov    rdi,r13
 10096cc:	nop    DWORD PTR [rax+0x0]
 10096d0:	inc    rdi
 10096d3:	cmp    BYTE PTR [rax+rdi*1],0x0
 10096d7:	jne    0x10096d0
 10096d9:	lea    rcx,[rdi*2+0x2]
 10096e1:	call   QWORD PTR [rip+0xffffffffffff7c19]        # 0x1001300
 10096e7:	mov    rsi,rax
 10096ea:	lea    ecx,[rdi+0x1]
 10096ed:	mov    DWORD PTR [rsp+0x28],ecx
 10096f1:	mov    QWORD PTR [rsp+0x20],rax
 10096f6:	mov    r9d,r13d
 10096f9:	mov    r8,QWORD PTR [rip+0xe338]        # 0x1017a38
 1009700:	mov    edx,0x1
 1009705:	mov    ecx,edx
 1009707:	call   QWORD PTR [rip+0xffffffffffff7933]        # 0x1001040
 100970d:	mov    rcx,QWORD PTR [rip+0xe324]        # 0x1017a38
 1009714:	call   QWORD PTR [rip+0xffffffffffff7bee]        # 0x1001308
 100971a:	mov    QWORD PTR [rip+0xe317],rsi        # 0x1017a38
 1009721:	mov    rcx,r13
 1009724:	inc    rcx
 1009727:	cmp    WORD PTR [rsi+rcx*2],0x0
 100972c:	jne    0x1009724
 100972e:	add    ecx,ecx
 1009730:	mov    DWORD PTR [rip+0xe2ce],ecx        # 0x1017a04
 1009736:	xor    esi,esi
 1009738:	jmp    0x100a621
 100973d:	test   BYTE PTR [rip+0xe2f0],0x2        # 0x1017a34
 1009744:	je     0x1009770
 1009746:	mov    rax,QWORD PTR [rip+0x10ccb]        # 0x101a418
 100974d:	test   rax,rax
 1009750:	je     0x1009770
 1009752:	mov    r9d,0x45
 1009758:	mov    r8,QWORD PTR [rip+0x10cb9]        # 0x101a418
 100975f:	mov    edx,0xa1c00
 1009764:	mov    rcx,QWORD PTR [rip+0x10a45]        # 0x101a1b0
 100976b:	call   0x10128c0
 1009770:	mov    DWORD PTR [rip+0xe286],0x1        # 0x1017a00
 100977a:	jmp    0x100a621
 100977f:	test   BYTE PTR [rip+0xe2ae],0x2        # 0x1017a34
 1009786:	je     0x10097b2
 1009788:	mov    rax,QWORD PTR [rip+0x10c21]        # 0x101a3b0
 100978f:	test   rax,rax
 1009792:	je     0x10097b2
 1009794:	mov    r9d,0x6b
 100979a:	mov    r8,QWORD PTR [rip+0x10c0f]        # 0x101a3b0
 10097a1:	mov    edx,0xa3000
 10097a6:	mov    rcx,QWORD PTR [rip+0x10a03]        # 0x101a1b0
 10097ad:	call   0x10128c0
 10097b2:	mov    DWORD PTR [rip+0xe274],0x1        # 0x1017a30
 10097bc:	jmp    0x100a621
 10097c1:	cmp    QWORD PTR [rip+0xe27f],0xffffffffffffffff        # 0x1017a48
 10097c9:	je     0x10097d2
 10097cb:	mov    cl,0x46
 10097cd:	call   0x100c160
 10097d2:	cmp    r15d,0x1
 10097d6:	jle    0x1009814
 10097d8:	mov    rdx,QWORD PTR [r12+0x8]
 10097dd:	movzx  eax,BYTE PTR [rdx]
 10097e0:	cmp    al,0x2d
 10097e2:	je     0x1009814
 10097e4:	cmp    al,0x2f
 10097e6:	je     0x1009814
 10097e8:	lea    r8,[rip+0xe259]        # 0x1017a48
 10097ef:	mov    cl,0x46
 10097f1:	call   0x100c080
 10097f6:	test   al,al
 10097f8:	je     0x100abfe
 10097fe:	call   0x100b5e0
 1009803:	test   al,al
 1009805:	je     0x100abf9
 100980b:	dec    r15d
 100980e:	add    r12,0x8
 1009812:	jmp    0x100984e
 1009814:	lea    rdi,[rbx+0x1]
 1009818:	lea    r8,[rip+0xe229]        # 0x1017a48
 100981f:	mov    rdx,rdi
 1009822:	mov    cl,0x46
 1009824:	call   0x100c080
 1009829:	test   al,al
 100982b:	je     0x100ac08
 1009831:	call   0x100b5e0
 1009836:	test   al,al
 1009838:	je     0x100ac03
 100983e:	cmp    BYTE PTR [rdi],0x0
 1009841:	je     0x100984e
 1009843:	mov    rbx,rdi
 1009846:	inc    rdi
 1009849:	cmp    BYTE PTR [rdi],0x0
 100984c:	jne    0x1009843
 100984e:	test   BYTE PTR [rip+0xe1df],0x2        # 0x1017a34
 1009855:	je     0x100a621
 100985b:	mov    rax,QWORD PTR [rip+0x10a3e]        # 0x101a2a0
 1009862:	test   rax,rax
 1009865:	je     0x100a621
 100986b:	mov    rax,QWORD PTR [rip+0xe1d6]        # 0x1017a48
 1009872:	mov    r9d,0x46
 1009878:	mov    r8,QWORD PTR [rip+0x10a21]        # 0x101a2a0
 100987f:	mov    edx,0xaac00
 1009884:	jmp    0x100a610
 1009889:	cmp    QWORD PTR [rip+0xe17f],0xffffffffffffffff        # 0x1017a10
 1009891:	je     0x100989a
 1009893:	mov    cl,0x4c
 1009895:	call   0x100c160
 100989a:	cmp    r15d,0x1
 100989e:	jle    0x10098dc
 10098a0:	mov    rdx,QWORD PTR [r12+0x8]
 10098a5:	movzx  eax,BYTE PTR [rdx]
 10098a8:	cmp    al,0x2d
 10098aa:	je     0x10098dc
 10098ac:	cmp    al,0x2f
 10098ae:	je     0x10098dc
 10098b0:	lea    r8,[rip+0xe159]        # 0x1017a10
 10098b7:	mov    cl,0x4c
 10098b9:	call   0x100c080
 10098be:	test   al,al
 10098c0:	je     0x100ac12
 10098c6:	call   0x100b7f0
 10098cb:	test   al,al
 10098cd:	je     0x100ac0d
 10098d3:	dec    r15d
 10098d6:	add    r12,0x8
 10098da:	jmp    0x100991b
 10098dc:	lea    rdi,[rbx+0x1]
 10098e0:	lea    r8,[rip+0xe129]        # 0x1017a10
 10098e7:	mov    rdx,rdi
 10098ea:	mov    cl,0x4c
 10098ec:	call   0x100c080
 10098f1:	test   al,al
 10098f3:	je     0x100ac1c
 10098f9:	call   0x100b7f0
 10098fe:	test   al,al
 1009900:	je     0x100ac17
 1009906:	cmp    BYTE PTR [rdi],0x0
 1009909:	je     0x100991b
 100990b:	nop    DWORD PTR [rax+rax*1+0x0]
 1009910:	mov    rbx,rdi
 1009913:	inc    rdi
 1009916:	cmp    BYTE PTR [rdi],0x0
 1009919:	jne    0x1009910
 100991b:	test   BYTE PTR [rip+0xe112],0x2        # 0x1017a34
 1009922:	je     0x100a621
 1009928:	mov    rax,QWORD PTR [rip+0x10a09]        # 0x101a338
 100992f:	test   rax,rax
 1009932:	je     0x100a621
 1009938:	mov    rax,QWORD PTR [rip+0xe0d1]        # 0x1017a10
 100993f:	mov    r9d,0x4c
 1009945:	mov    r8,QWORD PTR [rip+0x109ec]        # 0x101a338
 100994c:	mov    edx,0xb2400
 1009951:	jmp    0x100a610
 1009956:	cmp    r15d,0x1
 100995a:	jle    0x100998b
 100995c:	mov    rdx,QWORD PTR [r12+0x8]
 1009961:	movzx  eax,BYTE PTR [rdx]
 1009964:	cmp    al,0x2d
 1009966:	je     0x100998b
 1009968:	cmp    al,0x2f
 100996a:	je     0x100998b
 100996c:	lea    r8,[rip+0xe0ed]        # 0x1017a60
 1009973:	mov    cl,0x62
 1009975:	call   0x100bfb0
 100997a:	test   al,al
 100997c:	je     0x100ac21
 1009982:	dec    r15d
 1009985:	add    r12,0x8
 1009989:	jmp    0x10099bb
 100998b:	lea    rdi,[rbx+0x1]
 100998f:	lea    r8,[rip+0xe0ca]        # 0x1017a60
 1009996:	mov    rdx,rdi
 1009999:	mov    cl,0x62
 100999b:	call   0x100bfb0
 10099a0:	test   al,al
 10099a2:	je     0x100ac97
 10099a8:	cmp    BYTE PTR [rdi],0x0
 10099ab:	je     0x10099bb
 10099ad:	nop    DWORD PTR [rax]
 10099b0:	mov    rbx,rdi
 10099b3:	inc    rdi
 10099b6:	cmp    BYTE PTR [rdi],0x0
 10099b9:	jne    0x10099b0
 10099bb:	cmp    DWORD PTR [rip+0xe09e],0x0        # 0x1017a60
 10099c2:	jle    0x100ac26
 10099c8:	test   BYTE PTR [rip+0xe065],0x2        # 0x1017a34
 10099cf:	je     0x100a621
 10099d5:	mov    rax,QWORD PTR [rip+0x10a4c]        # 0x101a428
 10099dc:	test   rax,rax
 10099df:	je     0x100a621
 10099e5:	mov    eax,DWORD PTR [rip+0xe075]        # 0x1017a60
 10099eb:	mov    DWORD PTR [rsp+0x20],eax
 10099ef:	mov    r9d,0x62
 10099f5:	mov    r8,QWORD PTR [rip+0x10a2c]        # 0x101a428
 10099fc:	mov    edx,0xbbc00
 1009a01:	jmp    0x100a615
 1009a06:	cmp    r15d,0x1
 1009a0a:	jle    0x1009a3b
 1009a0c:	mov    rdx,QWORD PTR [r12+0x8]
 1009a11:	movzx  eax,BYTE PTR [rdx]
 1009a14:	cmp    al,0x2d
 1009a16:	je     0x1009a3b
 1009a18:	cmp    al,0x2f
 1009a1a:	je     0x1009a3b
 1009a1c:	lea    r8,[rip+0xe02d]        # 0x1017a50
 1009a23:	mov    cl,0x6d
 1009a25:	call   0x100bfb0
 1009a2a:	test   al,al
 1009a2c:	je     0x100ac9c
 1009a32:	dec    r15d
 1009a35:	add    r12,0x8
 1009a39:	jmp    0x1009a6b
 1009a3b:	lea    rdi,[rbx+0x1]
 1009a3f:	lea    r8,[rip+0xe00a]        # 0x1017a50
 1009a46:	mov    rdx,rdi
 1009a49:	mov    cl,0x6d
 1009a4b:	call   0x100bfb0
 1009a50:	test   al,al
 1009a52:	je     0x100aca1
 1009a58:	cmp    BYTE PTR [rdi],0x0
 1009a5b:	je     0x1009a6b
 1009a5d:	nop    DWORD PTR [rax]
 1009a60:	mov    rbx,rdi
 1009a63:	inc    rdi
 1009a66:	cmp    BYTE PTR [rdi],0x0
 1009a69:	jne    0x1009a60
 1009a6b:	test   BYTE PTR [rip+0xdfc2],0x2        # 0x1017a34
 1009a72:	je     0x100a621
 1009a78:	mov    rax,QWORD PTR [rip+0x109f1]        # 0x101a470
 1009a7f:	test   rax,rax
 1009a82:	je     0x100a621
 1009a88:	mov    eax,DWORD PTR [rip+0xdfc2]        # 0x1017a50
 1009a8e:	mov    DWORD PTR [rsp+0x20],eax
 1009a92:	mov    r9d,0x6d
 1009a98:	mov    r8,QWORD PTR [rip+0x109d1]        # 0x101a470
 1009a9f:	mov    edx,0xc0c00
 1009aa4:	jmp    0x100a615
 1009aa9:	cmp    r15d,0x1
 1009aad:	jle    0x1009acd
 1009aaf:	mov    rax,QWORD PTR [r12+0x8]
 1009ab4:	movzx  ecx,BYTE PTR [rax]
 1009ab7:	cmp    cl,0x2d
 1009aba:	je     0x1009acd
 1009abc:	cmp    cl,0x2f
 1009abf:	je     0x1009acd
 1009ac1:	dec    r15d
 1009ac4:	add    r12,0x8
 1009ac8:	mov    rbx,rax
 1009acb:	jmp    0x1009ad0
 1009acd:	inc    rbx
 1009ad0:	mov    rax,QWORD PTR [rip+0xdfb9]        # 0x1017a90
 1009ad7:	test   rax,rax
 1009ada:	je     0x1009ae5
 1009adc:	mov    rcx,rax
 1009adf:	call   QWORD PTR [rip+0xffffffffffff7823]        # 0x1001308
 1009ae5:	mov    rax,r13
 1009ae8:	nop    DWORD PTR [rax+rax*1+0x0]
 1009af0:	inc    rax
 1009af3:	cmp    BYTE PTR [rbx+rax*1],0x0
 1009af7:	jne    0x1009af0
 1009af9:	inc    eax
 1009afb:	cmp    DWORD PTR [rip+0xdf2a],0x4        # 0x1017a2c
 1009b02:	jne    0x1009b06
 1009b04:	add    eax,eax
 1009b06:	movsxd rdi,eax
 1009b09:	mov    rcx,rdi
 1009b0c:	call   QWORD PTR [rip+0xffffffffffff77ee]        # 0x1001300
 1009b12:	mov    QWORD PTR [rip+0xdf77],rax        # 0x1017a90
 1009b19:	test   rax,rax
 1009b1c:	je     0x100ad45
 1009b22:	mov    r8,rdi
 1009b25:	xor    edx,edx
 1009b27:	mov    rcx,rax
 1009b2a:	call   0x1014c00
 1009b2f:	mov    r8d,0x2
 1009b35:	lea    rdx,[rip+0xffffffffffff7ee8]        # 0x1001a24
 1009b3c:	mov    rcx,rbx
 1009b3f:	call   QWORD PTR [rip+0xffffffffffff77cb]        # 0x1001310
 1009b45:	test   eax,eax
 1009b47:	jne    0x1009bf1
 1009b4d:	lea    rcx,[rbx+0x2]
 1009b51:	mov    rdx,r13
 1009b54:	inc    rdx
 1009b57:	cmp    BYTE PTR [rcx+rdx*1],0x0
 1009b5b:	jne    0x1009b54
 1009b5d:	mov    r9,rdi
 1009b60:	mov    r8,QWORD PTR [rip+0xdf29]        # 0x1017a90
 1009b67:	call   0x100c5c0
 1009b6c:	cmp    ax,0xffff
 1009b70:	mov    rax,r13
 1009b73:	jne    0x1009bd1
 1009b75:	mov    DWORD PTR [rsp+0x38],esi
 1009b79:	nop    DWORD PTR [rax+0x0]
 1009b80:	inc    rax
 1009b83:	cmp    BYTE PTR [rbx+rax*1],0x0
 1009b87:	jne    0x1009b80
 1009b89:	cmp    rax,0x400
 1009b8f:	jae    0x100acdb
 1009b95:	lea    rdx,[rsp+0x38]
 1009b9a:	mov    rcx,rbx
 1009b9d:	call   0x1013640
 1009ba2:	test   rax,rax
 1009ba5:	je     0x100acdb
 1009bab:	mov    r8,rax
 1009bae:	mov    rdx,rdi
 1009bb1:	mov    rcx,QWORD PTR [rip+0xded8]        # 0x1017a90
 1009bb8:	call   0x1008a00
 1009bbd:	test   eax,eax
 1009bbf:	js     0x100aca6
 1009bc5:	mov    eax,DWORD PTR [rsp+0x38]
 1009bc9:	mov    DWORD PTR [rip+0xde99],eax        # 0x1017a68
 1009bcf:	jmp    0x1009c48
 1009bd1:	mov    rcx,QWORD PTR [rip+0xdeb8]        # 0x1017a90
 1009bd8:	nop    DWORD PTR [rax+rax*1+0x0]
 1009be0:	inc    rax
 1009be3:	cmp    BYTE PTR [rcx+rax*1],0x0
 1009be7:	jne    0x1009be0
 1009be9:	mov    DWORD PTR [rip+0xde79],eax        # 0x1017a68
 1009bef:	jmp    0x1009c48
 1009bf1:	mov    DWORD PTR [rsp+0x44],esi
 1009bf5:	mov    rax,r13
 1009bf8:	nop    DWORD PTR [rax+rax*1+0x0]
 1009c00:	inc    rax
 1009c03:	cmp    BYTE PTR [rbx+rax*1],0x0
 1009c07:	jne    0x1009c00
 1009c09:	cmp    rax,0x400
 1009c0f:	jae    0x100ad10
 1009c15:	lea    rdx,[rsp+0x44]
 1009c1a:	mov    rcx,rbx
 1009c1d:	call   0x1013640
 1009c22:	test   rax,rax
 1009c25:	je     0x100ad10
 1009c2b:	movsxd rdi,DWORD PTR [rsp+0x44]
 1009c30:	mov    r8,rdi
 1009c33:	mov    rdx,rax
 1009c36:	mov    rcx,QWORD PTR [rip+0xde53]        # 0x1017a90
 1009c3d:	call   0x1014bf4
 1009c42:	mov    DWORD PTR [rip+0xde20],edi        # 0x1017a68
 1009c48:	test   BYTE PTR [rip+0xdde5],0x2        # 0x1017a34
 1009c4f:	je     0x1009c80
 1009c51:	mov    rax,QWORD PTR [rip+0x107a8]        # 0x101a400
 1009c58:	test   rax,rax
 1009c5b:	je     0x1009c80
 1009c5d:	mov    QWORD PTR [rsp+0x20],rbx
 1009c62:	mov    r9d,0x74
 1009c68:	mov    r8,QWORD PTR [rip+0x10791]        # 0x101a400
 1009c6f:	mov    edx,0xdc400
 1009c74:	mov    rcx,QWORD PTR [rip+0x10535]        # 0x101a1b0
 1009c7b:	call   0x10128c0
 1009c80:	lea    rax,[rbx+0x1]
 1009c84:	cmp    BYTE PTR [rax],0x0
 1009c87:	je     0x100a621
 1009c8d:	nop    DWORD PTR [rax]
 1009c90:	mov    rbx,rax
 1009c93:	inc    rax
 1009c96:	cmp    BYTE PTR [rax],0x0
 1009c99:	jne    0x1009c90
 1009c9b:	jmp    0x100a621
 1009ca0:	cmp    r15d,0x1
 1009ca4:	jle    0x1009cc4
 1009ca6:	mov    rax,QWORD PTR [r12+0x8]
 1009cab:	movzx  ecx,BYTE PTR [rax]
 1009cae:	cmp    cl,0x2d
 1009cb1:	je     0x1009cc4
 1009cb3:	cmp    cl,0x2f
 1009cb6:	je     0x1009cc4
 1009cb8:	dec    r15d
 1009cbb:	add    r12,0x8
 1009cbf:	mov    rbx,rax
 1009cc2:	jmp    0x1009cc7
 1009cc4:	inc    rbx
 1009cc7:	mov    rax,QWORD PTR [rip+0xdd6a]        # 0x1017a38
 1009cce:	test   rax,rax
 1009cd1:	je     0x1009cdc
 1009cd3:	mov    rcx,rax
 1009cd6:	call   QWORD PTR [rip+0xffffffffffff762c]        # 0x1001308
 1009cdc:	mov    rax,r13
 1009cdf:	nop
 1009ce0:	inc    rax
 1009ce3:	cmp    BYTE PTR [rbx+rax*1],0x0
 1009ce7:	jne    0x1009ce0
 1009ce9:	inc    eax
 1009ceb:	cmp    DWORD PTR [rip+0xdd3a],0x4        # 0x1017a2c
 1009cf2:	jne    0x1009cf6
 1009cf4:	add    eax,eax
 1009cf6:	movsxd rdi,eax
 1009cf9:	mov    rcx,rdi
 1009cfc:	call   QWORD PTR [rip+0xffffffffffff75fe]        # 0x1001300
 1009d02:	mov    QWORD PTR [rip+0xdd2f],rax        # 0x1017a38
 1009d09:	test   rax,rax
 1009d0c:	je     0x100ae48
 1009d12:	mov    r8,rdi
 1009d15:	xor    edx,edx
 1009d17:	mov    rcx,rax
 1009d1a:	call   0x1014c00
 1009d1f:	mov    r8d,0x2
 1009d25:	lea    rdx,[rip+0xffffffffffff7cf8]        # 0x1001a24
 1009d2c:	mov    rcx,rbx
 1009d2f:	call   QWORD PTR [rip+0xffffffffffff75db]        # 0x1001310
 1009d35:	test   eax,eax
 1009d37:	jne    0x1009de1
 1009d3d:	lea    rcx,[rbx+0x2]
 1009d41:	mov    rdx,r13
 1009d44:	inc    rdx
 1009d47:	cmp    BYTE PTR [rcx+rdx*1],0x0
 1009d4b:	jne    0x1009d44
 1009d4d:	mov    r9,rdi
 1009d50:	mov    r8,QWORD PTR [rip+0xdce1]        # 0x1017a38
 1009d57:	call   0x100c5c0
 1009d5c:	cmp    ax,0xffff
 1009d60:	mov    rax,r13
 1009d63:	jne    0x1009dc1
 1009d65:	mov    DWORD PTR [rsp+0x40],esi
 1009d69:	nop    DWORD PTR [rax+0x0]
 1009d70:	inc    rax
 1009d73:	cmp    BYTE PTR [rbx+rax*1],0x0
 1009d77:	jne    0x1009d70
 1009d79:	cmp    rax,0x400
 1009d7f:	jae    0x100adde
 1009d85:	lea    rdx,[rsp+0x40]
 1009d8a:	mov    rcx,rbx
 1009d8d:	call   0x1013640
 1009d92:	test   rax,rax
 1009d95:	je     0x100adde
 1009d9b:	mov    r8,rax
 1009d9e:	mov    rdx,rdi
 1009da1:	mov    rcx,QWORD PTR [rip+0xdc90]        # 0x1017a38
 1009da8:	call   0x1008a00
 1009dad:	test   eax,eax
 1009daf:	js     0x100ada9
 1009db5:	mov    eax,DWORD PTR [rsp+0x40]
 1009db9:	mov    DWORD PTR [rip+0xdc45],eax        # 0x1017a04
 1009dbf:	jmp    0x1009e38
 1009dc1:	mov    rcx,QWORD PTR [rip+0xdc70]        # 0x1017a38
 1009dc8:	nop    DWORD PTR [rax+rax*1+0x0]
 1009dd0:	inc    rax
 1009dd3:	cmp    BYTE PTR [rcx+rax*1],0x0
 1009dd7:	jne    0x1009dd0
 1009dd9:	mov    DWORD PTR [rip+0xdc25],eax        # 0x1017a04
 1009ddf:	jmp    0x1009e38
 1009de1:	mov    DWORD PTR [rsp+0x3c],esi
 1009de5:	mov    rax,r13
 1009de8:	nop    DWORD PTR [rax+rax*1+0x0]
 1009df0:	inc    rax
 1009df3:	cmp    BYTE PTR [rbx+rax*1],0x0
 1009df7:	jne    0x1009df0
 1009df9:	cmp    rax,0x400
 1009dff:	jae    0x100ae13
 1009e05:	lea    rdx,[rsp+0x3c]
 1009e0a:	mov    rcx,rbx
 1009e0d:	call   0x1013640
 1009e12:	test   rax,rax
 1009e15:	je     0x100ae13
 1009e1b:	movsxd rdi,DWORD PTR [rsp+0x3c]
 1009e20:	mov    r8,rdi
 1009e23:	mov    rdx,rax
 1009e26:	mov    rcx,QWORD PTR [rip+0xdc0b]        # 0x1017a38
 1009e2d:	call   0x1014bf4
 1009e32:	mov    DWORD PTR [rip+0xdbcc],edi        # 0x1017a04
 1009e38:	test   BYTE PTR [rip+0xdbf5],0x2        # 0x1017a34
 1009e3f:	je     0x1009e70
 1009e41:	mov    rax,QWORD PTR [rip+0x105b0]        # 0x101a3f8
 1009e48:	test   rax,rax
 1009e4b:	je     0x1009e70
 1009e4d:	mov    QWORD PTR [rsp+0x20],rbx
 1009e52:	mov    r9d,0x72
 1009e58:	mov    r8,QWORD PTR [rip+0x10599]        # 0x101a3f8
 1009e5f:	mov    edx,0xf9c00
 1009e64:	mov    rcx,QWORD PTR [rip+0x10345]        # 0x101a1b0
 1009e6b:	call   0x10128c0
 1009e70:	lea    rax,[rbx+0x1]
 1009e74:	cmp    BYTE PTR [rax],0x0
 1009e77:	je     0x100a621
 1009e7d:	nop    DWORD PTR [rax]
 1009e80:	mov    rbx,rax
 1009e83:	inc    rax
 1009e86:	cmp    BYTE PTR [rax],0x0
 1009e89:	jne    0x1009e80
 1009e8b:	jmp    0x100a621
 1009e90:	cmp    r15d,0x1
 1009e94:	jle    0x1009eb6
 1009e96:	mov    rdx,QWORD PTR [r12+0x8]
 1009e9b:	movzx  eax,BYTE PTR [rdx]
 1009e9e:	cmp    al,0x2d
 1009ea0:	je     0x1009eb6
 1009ea2:	cmp    al,0x2f
 1009ea4:	je     0x1009eb6
 1009ea6:	mov    QWORD PTR [rip+0xdbab],rdx        # 0x1017a58
 1009ead:	dec    r15d
 1009eb0:	add    r12,0x8
 1009eb4:	jmp    0x1009edb
 1009eb6:	lea    rax,[rbx+0x1]
 1009eba:	mov    QWORD PTR [rip+0xdb97],rax        # 0x1017a58
 1009ec1:	cmp    BYTE PTR [rax],0x0
 1009ec4:	je     0x1009edb
 1009ec6:	data16 nop WORD PTR [rax+rax*1+0x0]
 1009ed0:	mov    rbx,rax
 1009ed3:	inc    rax
 1009ed6:	cmp    BYTE PTR [rax],0x0
 1009ed9:	jne    0x1009ed0
 1009edb:	test   BYTE PTR [rip+0xdb52],0x2        # 0x1017a34
 1009ee2:	je     0x100a621
 1009ee8:	mov    rax,QWORD PTR [rip+0x103a9]        # 0x101a298
 1009eef:	test   rax,rax
 1009ef2:	je     0x100a621
 1009ef8:	mov    rax,QWORD PTR [rip+0xdb59]        # 0x1017a58
 1009eff:	mov    r9d,0x65
 1009f05:	mov    r8,QWORD PTR [rip+0x1038c]        # 0x101a298
 1009f0c:	mov    edx,0xffc00
 1009f11:	jmp    0x100a610
 1009f16:	cmp    DWORD PTR [rip+0xdb9f],0x0        # 0x1017abc
 1009f1d:	jne    0x1009f3c
 1009f1f:	cmp    DWORD PTR [rip+0xdb06],0x0        # 0x1017a2c
 1009f26:	je     0x1009f32
 1009f28:	mov    ecx,0x3
 1009f2d:	call   0x100c260
 1009f32:	mov    DWORD PTR [rip+0xdaf0],0x3        # 0x1017a2c
 1009f3c:	cmp    r15d,0x1
 1009f40:	jle    0x1009f62
 1009f42:	mov    rdx,QWORD PTR [r12+0x8]
 1009f47:	movzx  eax,BYTE PTR [rdx]
 1009f4a:	cmp    al,0x2d
 1009f4c:	je     0x1009f62
 1009f4e:	cmp    al,0x2f
 1009f50:	je     0x1009f62
 1009f52:	mov    QWORD PTR [rip+0xdae7],rdx        # 0x1017a40
 1009f59:	dec    r15d
 1009f5c:	add    r12,0x8
 1009f60:	jmp    0x1009f7d
 1009f62:	lea    rax,[rbx+0x1]
 1009f66:	mov    QWORD PTR [rip+0xdad3],rax        # 0x1017a40
 1009f6d:	cmp    BYTE PTR [rax],0x0
 1009f70:	je     0x1009f7d
 1009f72:	mov    rbx,rax
 1009f75:	inc    rax
 1009f78:	cmp    BYTE PTR [rax],0x0
 1009f7b:	jne    0x1009f72
 1009f7d:	test   BYTE PTR [rip+0xdab0],0x2        # 0x1017a34
 1009f84:	je     0x100a621
 1009f8a:	mov    rax,QWORD PTR [rip+0x1035f]        # 0x101a2f0
 1009f91:	test   rax,rax
 1009f94:	je     0x100a621
 1009f9a:	mov    rax,QWORD PTR [rip+0xda9f]        # 0x1017a40
 1009fa1:	mov    r9d,0x66
 1009fa7:	mov    r8,QWORD PTR [rip+0x10342]        # 0x101a2f0
 1009fae:	mov    edx,0x106000
 1009fb3:	jmp    0x100a610
 1009fb8:	cmp    r15d,0x1
 1009fbc:	jle    0x1009fde
 1009fbe:	mov    rdx,QWORD PTR [r12+0x8]
 1009fc3:	movzx  eax,BYTE PTR [rdx]
 1009fc6:	cmp    al,0x2d
 1009fc8:	je     0x1009fde
 1009fca:	cmp    al,0x2f
 1009fcc:	je     0x1009fde
 1009fce:	mov    QWORD PTR [rip+0xdaeb],rdx        # 0x1017ac0
 1009fd5:	dec    r15d
 1009fd8:	add    r12,0x8
 1009fdc:	jmp    0x1009ffb
 1009fde:	lea    rax,[rbx+0x1]
 1009fe2:	mov    QWORD PTR [rip+0xdad7],rax        # 0x1017ac0
 1009fe9:	cmp    BYTE PTR [rax],0x0
 1009fec:	je     0x1009ffb
 1009fee:	xchg   ax,ax
 1009ff0:	mov    rbx,rax
 1009ff3:	inc    rax
 1009ff6:	cmp    BYTE PTR [rax],0x0
 1009ff9:	jne    0x1009ff0
 1009ffb:	mov    rcx,QWORD PTR [rip+0xdabe]        # 0x1017ac0
 100a002:	mov    rax,r13
 100a005:	inc    rax
 100a008:	cmp    BYTE PTR [rcx+rax*1],0x0
 100a00c:	jne    0x100a005
 100a00e:	cmp    rax,0x80
 100a014:	ja     0x100aeac
 100a01a:	test   BYTE PTR [rip+0xda13],0x2        # 0x1017a34
 100a021:	je     0x100a621
 100a027:	mov    rax,QWORD PTR [rip+0x10422]        # 0x101a450
 100a02e:	test   rax,rax
 100a031:	je     0x100a621
 100a037:	mov    r9d,0x55
 100a03d:	mov    r8,QWORD PTR [rip+0x1040c]        # 0x101a450
 100a044:	mov    edx,0x10d800
 100a049:	mov    rcx,QWORD PTR [rip+0x10160]        # 0x101a1b0
 100a050:	call   0x10128c0
 100a055:	jmp    0x100a621
 100a05a:	cmp    r15d,0x1
 100a05e:	jle    0x100a081
 100a060:	mov    rcx,QWORD PTR [r12+0x8]
 100a065:	movzx  eax,BYTE PTR [rcx]
 100a068:	cmp    al,0x2d
 100a06a:	je     0x100a081
 100a06c:	cmp    al,0x2f
 100a06e:	je     0x100a081
 100a070:	call   QWORD PTR [rip+0xffffffffffff7222]        # 0x1001298
 100a076:	mov    edx,eax
 100a078:	dec    r15d
 100a07b:	add    r12,0x8
 100a07f:	jmp    0x100a0a0
 100a081:	lea    rdi,[rbx+0x1]
 100a085:	mov    rcx,rdi
 100a088:	call   QWORD PTR [rip+0xffffffffffff720a]        # 0x1001298
 100a08e:	mov    edx,eax
 100a090:	cmp    BYTE PTR [rdi],0x0
 100a093:	je     0x100a0a0
 100a095:	mov    rbx,rdi
 100a098:	inc    rdi
 100a09b:	cmp    BYTE PTR [rdi],0x0
 100a09e:	jne    0x100a095
 100a0a0:	lea    eax,[rdx-0x200]
 100a0a6:	cmp    eax,0xfdff
 100a0ab:	ja     0x100a0b5
 100a0ad:	mov    DWORD PTR [rip+0xd06d],edx        # 0x1017120
 100a0b3:	jmp    0x100a112
 100a0b5:	mov    r9d,0x100
 100a0bb:	lea    r8,[rsp+0x60]
 100a0c0:	mov    edx,0x23
 100a0c5:	mov    rcx,QWORD PTR [rip+0xd954]        # 0x1017a20
 100a0cc:	call   QWORD PTR [rip+0xffffffffffff72f6]        # 0x10013c8
 100a0d2:	lea    rdx,[rsp+0x60]
 100a0d7:	lea    rcx,[rsp+0x60]
 100a0dc:	call   QWORD PTR [rip+0xffffffffffff72de]        # 0x10013c0
 100a0e2:	mov    DWORD PTR [rsp+0x20],0x1000
 100a0ea:	mov    r9d,0xffff
 100a0f0:	mov    r8d,0x200
 100a0f6:	lea    rdx,[rsp+0x60]
 100a0fb:	mov    rcx,QWORD PTR [rip+0xd9c6]        # 0x1017ac8
 100a102:	call   QWORD PTR [rip+0xffffffffffff71a0]        # 0x10012a8
 100a108:	mov    DWORD PTR [rip+0xd00e],0x1000        # 0x1017120
 100a112:	test   BYTE PTR [rip+0xd91b],0x2        # 0x1017a34
 100a119:	je     0x100a621
 100a11f:	mov    rax,QWORD PTR [rip+0x1035a]        # 0x101a480
 100a126:	test   rax,rax
 100a129:	je     0x100a621
 100a12f:	mov    eax,DWORD PTR [rip+0xcfeb]        # 0x1017120
 100a135:	mov    DWORD PTR [rsp+0x20],eax
 100a139:	mov    r9d,0x61
 100a13f:	mov    r8,QWORD PTR [rip+0x1033a]        # 0x101a480
 100a146:	mov    edx,0x118000
 100a14b:	jmp    0x100a615
 100a150:	cmp    r15d,0x1
 100a154:	jle    0x100a176
 100a156:	mov    rdx,QWORD PTR [r12+0x8]
 100a15b:	movzx  eax,BYTE PTR [rdx]
 100a15e:	cmp    al,0x2d
 100a160:	je     0x100a176
 100a162:	cmp    al,0x2f
 100a164:	je     0x100a176
 100a166:	mov    QWORD PTR [rip+0xd92b],rdx        # 0x1017a98
 100a16d:	dec    r15d
 100a170:	add    r12,0x8
 100a174:	jmp    0x100a19b
 100a176:	lea    rax,[rbx+0x1]
 100a17a:	mov    QWORD PTR [rip+0xd917],rax        # 0x1017a98
 100a181:	cmp    BYTE PTR [rax],0x0
 100a184:	je     0x100a19b
 100a186:	data16 nop WORD PTR [rax+rax*1+0x0]
 100a190:	mov    rbx,rax
 100a193:	inc    rax
 100a196:	cmp    BYTE PTR [rax],0x0
 100a199:	jne    0x100a190
 100a19b:	test   BYTE PTR [rip+0xd892],0x2        # 0x1017a34
 100a1a2:	je     0x100a621
 100a1a8:	mov    rax,QWORD PTR [rip+0x10261]        # 0x101a410
 100a1af:	test   rax,rax
 100a1b2:	je     0x100a621
 100a1b8:	mov    r9d,0x50
 100a1be:	mov    r8,QWORD PTR [rip+0x1024b]        # 0x101a410
 100a1c5:	mov    edx,0x11d000
 100a1ca:	mov    rcx,QWORD PTR [rip+0xffdf]        # 0x101a1b0
 100a1d1:	call   0x10128c0
 100a1d6:	jmp    0x100a621
 100a1db:	test   BYTE PTR [rip+0xd852],0x2        # 0x1017a34
 100a1e2:	je     0x100a20e
 100a1e4:	mov    rax,QWORD PTR [rip+0x10155]        # 0x101a340
 100a1eb:	test   rax,rax
 100a1ee:	je     0x100a20e
 100a1f0:	mov    r9d,0x76
 100a1f6:	mov    r8,QWORD PTR [rip+0x10143]        # 0x101a340
 100a1fd:	mov    edx,0x11e000
 100a202:	mov    rcx,QWORD PTR [rip+0xffa7]        # 0x101a1b0
 100a209:	call   0x10128c0
 100a20e:	call   0x1013750
 100a213:	jmp    0x100a621
 100a218:	mov    DWORD PTR [rip+0xd842],0x1        # 0x1017a64
 100a222:	test   BYTE PTR [rip+0xd80b],0x2        # 0x1017a34
 100a229:	je     0x100a621
 100a22f:	mov    rax,QWORD PTR [rip+0x1020a]        # 0x101a440
 100a236:	test   rax,rax
 100a239:	je     0x100a621
 100a23f:	mov    r9d,0x54
 100a245:	mov    r8,QWORD PTR [rip+0x101f4]        # 0x101a440
 100a24c:	mov    edx,0x11f800
 100a251:	mov    rcx,QWORD PTR [rip+0xff58]        # 0x101a1b0
 100a258:	call   0x10128c0
 100a25d:	jmp    0x100a621
 100a262:	mov    DWORD PTR [rip+0xd84c],0x1        # 0x1017ab8
 100a26c:	cmp    DWORD PTR [rip+0xd7f9],0x0        # 0x1017a6c
 100a273:	jne    0x100a295
 100a275:	mov    rcx,QWORD PTR [rip+0xd78c]        # 0x1017a08
 100a27c:	mov    rax,r13
 100a27f:	nop
 100a280:	inc    rax
 100a283:	cmp    BYTE PTR [rcx+rax*1],0x0
 100a287:	jne    0x100a280
 100a289:	cmp    rax,0x189
 100a28f:	jae    0x100aef1
 100a295:	test   BYTE PTR [rip+0xd798],0x2        # 0x1017a34
 100a29c:	je     0x100a621
 100a2a2:	mov    rax,QWORD PTR [rip+0x1006f]        # 0x101a318
 100a2a9:	test   rax,rax
 100a2ac:	je     0x100a621
 100a2b2:	mov    r9d,0x71
 100a2b8:	mov    r8,QWORD PTR [rip+0x10059]        # 0x101a318
 100a2bf:	mov    edx,0x125000
 100a2c4:	mov    rcx,QWORD PTR [rip+0xfee5]        # 0x101a1b0
 100a2cb:	call   0x10128c0
 100a2d0:	jmp    0x100a621
 100a2d5:	mov    DWORD PTR [rip+0xd7a1],0x1        # 0x1017a80
 100a2df:	test   BYTE PTR [rip+0xd74e],0x2        # 0x1017a34
 100a2e6:	je     0x100a621
 100a2ec:	mov    rax,QWORD PTR [rip+0x10075]        # 0x101a368
 100a2f3:	test   rax,rax
 100a2f6:	je     0x100a621
 100a2fc:	mov    r9d,0x78
 100a302:	mov    r8,QWORD PTR [rip+0x1005f]        # 0x101a368
 100a309:	mov    edx,0x126400
 100a30e:	mov    rcx,QWORD PTR [rip+0xfe9b]        # 0x101a1b0
 100a315:	call   0x10128c0
 100a31a:	jmp    0x100a621
 100a31f:	cmp    r15d,0x1
 100a323:	jle    0x100a345
 100a325:	mov    rdx,QWORD PTR [r12+0x8]
 100a32a:	movzx  eax,BYTE PTR [rdx]
 100a32d:	cmp    al,0x2d
 100a32f:	je     0x100a345
 100a331:	cmp    al,0x2f
 100a333:	je     0x100a345
 100a335:	mov    QWORD PTR [rip+0xd734],rdx        # 0x1017a70
 100a33c:	dec    r15d
 100a33f:	add    r12,0x8
 100a343:	jmp    0x100a360
 100a345:	lea    rax,[rbx+0x1]
 100a349:	mov    QWORD PTR [rip+0xd720],rax        # 0x1017a70
 100a350:	cmp    BYTE PTR [rax],0x0
 100a353:	je     0x100a360
 100a355:	mov    rbx,rax
 100a358:	inc    rax
 100a35b:	cmp    BYTE PTR [rax],0x0
 100a35e:	jne    0x100a355
 100a360:	mov    rcx,QWORD PTR [rip+0xd709]        # 0x1017a70
 100a367:	mov    rax,r13
 100a36a:	nop    WORD PTR [rax+rax*1+0x0]
 100a370:	inc    rax
 100a373:	cmp    BYTE PTR [rcx+rax*1],0x0
 100a377:	jne    0x100a370
 100a379:	cmp    rax,0x80
 100a37f:	ja     0x100af6a
 100a385:	test   BYTE PTR [rip+0xd6a8],0x2        # 0x1017a34
 100a38c:	je     0x100a621
 100a392:	mov    rax,QWORD PTR [rip+0x100cf]        # 0x101a468
 100a399:	test   rax,rax
 100a39c:	je     0x100a621
 100a3a2:	mov    rax,QWORD PTR [rip+0xd6c7]        # 0x1017a70
 100a3a9:	mov    r9d,0x53
 100a3af:	mov    r8,QWORD PTR [rip+0x100b2]        # 0x101a468
 100a3b6:	mov    edx,0x12e000
 100a3bb:	jmp    0x100a610
 100a3c0:	cmp    DWORD PTR [rip+0xd6a5],0x0        # 0x1017a6c
 100a3c7:	jne    0x100afaf
 100a3cd:	cmp    r15d,0x1
 100a3d1:	jle    0x100a3f3
 100a3d3:	mov    rdx,QWORD PTR [r12+0x8]
 100a3d8:	movzx  eax,BYTE PTR [rdx]
 100a3db:	cmp    al,0x2d
 100a3dd:	je     0x100a3f3
 100a3df:	cmp    al,0x2f
 100a3e1:	je     0x100a3f3
 100a3e3:	mov    QWORD PTR [rip+0xd6b6],rdx        # 0x1017aa0
 100a3ea:	dec    r15d
 100a3ed:	add    r12,0x8
 100a3f1:	jmp    0x100a40e
 100a3f3:	lea    rax,[rbx+0x1]
 100a3f7:	mov    QWORD PTR [rip+0xd6a2],rax        # 0x1017aa0
 100a3fe:	cmp    BYTE PTR [rax],0x0
 100a401:	je     0x100a40e
 100a403:	mov    rbx,rax
 100a406:	inc    rax
 100a409:	cmp    BYTE PTR [rax],0x0
 100a40c:	jne    0x100a403
 100a40e:	test   BYTE PTR [rip+0xd61f],0x2        # 0x1017a34
 100a415:	je     0x100a621
 100a41b:	mov    rax,QWORD PTR [rip+0xff76]        # 0x101a398
 100a422:	test   rax,rax
 100a425:	je     0x100a621
 100a42b:	mov    rax,QWORD PTR [rip+0xd66e]        # 0x1017aa0
 100a432:	mov    r9d,0x68
 100a438:	mov    r8,QWORD PTR [rip+0xff59]        # 0x101a398
 100a43f:	mov    edx,0x135c00
 100a444:	jmp    0x100a610
 100a449:	cmp    r15d,0x1
 100a44d:	jle    0x100a468
 100a44f:	mov    rdi,QWORD PTR [r12+0x8]
 100a454:	movzx  eax,BYTE PTR [rdi]
 100a457:	cmp    al,0x2d
 100a459:	je     0x100a468
 100a45b:	cmp    al,0x2f
 100a45d:	je     0x100a468
 100a45f:	dec    r15d
 100a462:	add    r12,0x8
 100a466:	jmp    0x100a47f
 100a468:	lea    rax,[rbx+0x1]
 100a46c:	mov    rdi,rax
 100a46f:	cmp    BYTE PTR [rax],0x0
 100a472:	je     0x100a47f
 100a474:	mov    rbx,rax
 100a477:	inc    rax
 100a47a:	cmp    BYTE PTR [rax],0x0
 100a47d:	jne    0x100a474
 100a47f:	lea    rdx,[rip+0xffffffffffff775a]        # 0x1001be0
 100a486:	mov    rcx,rdi
 100a489:	call   QWORD PTR [rip+0xffffffffffff6e99]        # 0x1001328
 100a48f:	test   eax,eax
 100a491:	jne    0x100a49b
 100a493:	mov    DWORD PTR [rip+0xcc8b],esi        # 0x1017124
 100a499:	jmp    0x100a4e7
 100a49b:	lea    rdx,[rip+0xffffffffffff7742]        # 0x1001be4
 100a4a2:	mov    rcx,rdi
 100a4a5:	call   QWORD PTR [rip+0xffffffffffff6e7d]        # 0x1001328
 100a4ab:	test   eax,eax
 100a4ad:	jne    0x100a4bb
 100a4af:	mov    DWORD PTR [rip+0xcc6b],0x1        # 0x1017124
 100a4b9:	jmp    0x100a4e7
 100a4bb:	lea    rdx,[rip+0xffffffffffff7726]        # 0x1001be8
 100a4c2:	mov    rcx,rdi
 100a4c5:	call   QWORD PTR [rip+0xffffffffffff6e5d]        # 0x1001328
 100a4cb:	test   eax,eax
 100a4cd:	jne    0x100a4d8
 100a4cf:	mov    DWORD PTR [rip+0xcc4e],r13d        # 0x1017124
 100a4d6:	jmp    0x100a4e7
 100a4d8:	mov    rcx,rdi
 100a4db:	call   QWORD PTR [rip+0xffffffffffff6def]        # 0x10012d0
 100a4e1:	mov    DWORD PTR [rip+0xcc3d],eax        # 0x1017124
 100a4e7:	test   BYTE PTR [rip+0xd546],0x2        # 0x1017a34
 100a4ee:	je     0x100a621
 100a4f4:	mov    rax,QWORD PTR [rip+0xff4d]        # 0x101a448
 100a4fb:	test   rax,rax
 100a4fe:	je     0x100a621
 100a504:	mov    eax,DWORD PTR [rip+0xcc1a]        # 0x1017124
 100a50a:	mov    DWORD PTR [rsp+0x20],eax
 100a50e:	mov    r9d,0x43
 100a514:	mov    r8,QWORD PTR [rip+0xff2d]        # 0x101a448
 100a51b:	mov    edx,0x13d400
 100a520:	jmp    0x100a615
 100a525:	mov    DWORD PTR [rip+0xd5a1],0x1        # 0x1017ad0
 100a52f:	mov    DWORD PTR [rip+0xd4f3],0x5        # 0x1017a2c
 100a539:	test   BYTE PTR [rip+0xd4f4],0x2        # 0x1017a34
 100a540:	je     0x100a621
 100a546:	mov    rax,QWORD PTR [rip+0xfe3b]        # 0x101a388
 100a54d:	test   rax,rax
 100a550:	je     0x100a621
 100a556:	mov    r9d,0x4e
 100a55c:	mov    r8,QWORD PTR [rip+0xfe25]        # 0x101a388
 100a563:	mov    edx,0x13f000
 100a568:	mov    rcx,QWORD PTR [rip+0xfc41]        # 0x101a1b0
 100a56f:	call   0x10128c0
 100a574:	jmp    0x100a621
 100a579:	cmp    r15d,0x1
 100a57d:	jle    0x100a59f
 100a57f:	mov    rdi,QWORD PTR [r12+0x8]
 100a584:	movzx  eax,BYTE PTR [rdi]
 100a587:	cmp    al,0x2d
 100a589:	je     0x100a59f
 100a58b:	cmp    al,0x2f
 100a58d:	je     0x100a59f
 100a58f:	mov    QWORD PTR [rip+0xd4e2],rdi        # 0x1017a78
 100a596:	dec    r15d
 100a599:	add    r12,0x8
 100a59d:	jmp    0x100a5bd
 100a59f:	lea    rax,[rbx+0x1]
 100a5a3:	mov    rdi,rax
 100a5a6:	mov    QWORD PTR [rip+0xd4cb],rax        # 0x1017a78
 100a5ad:	cmp    BYTE PTR [rax],0x0
 100a5b0:	je     0x100a5bd
 100a5b2:	mov    rbx,rax
 100a5b5:	inc    rax
 100a5b8:	cmp    BYTE PTR [rax],0x0
 100a5bb:	jne    0x100a5b2
 100a5bd:	lea    rdx,[rip+0xffffffffffff7674]        # 0x1001c38
 100a5c4:	mov    rcx,rdi
 100a5c7:	call   QWORD PTR [rip+0xffffffffffff6d5b]        # 0x1001328
 100a5cd:	test   eax,eax
 100a5cf:	jne    0x100b039
 100a5d5:	cmp    DWORD PTR [rip+0xd44c],0x1        # 0x1017a28
 100a5dc:	je     0x100aff4
 100a5e2:	test   BYTE PTR [rip+0xd44b],0x2        # 0x1017a34
 100a5e9:	je     0x100a621
 100a5eb:	mov    rax,QWORD PTR [rip+0xfd8e]        # 0x101a380
 100a5f2:	test   rax,rax
 100a5f5:	je     0x100a621
 100a5f7:	mov    rax,QWORD PTR [rip+0xd47a]        # 0x1017a78
 100a5fe:	mov    r9d,0x4b
 100a604:	mov    r8,QWORD PTR [rip+0xfd75]        # 0x101a380
 100a60b:	mov    edx,0x14a800
 100a610:	mov    QWORD PTR [rsp+0x20],rax
 100a615:	mov    rcx,QWORD PTR [rip+0xfb94]        # 0x101a1b0
 100a61c:	call   0x10128c0
 100a621:	inc    rbx
 100a624:	movzx  eax,BYTE PTR [rbx]
 100a627:	test   al,al
 100a629:	lea    rdx,[rip+0xffffffffffff59d0]        # 0x1000000
 100a630:	lea    rdi,[rip+0xffffffffffff6e69]        # 0x10014a0
 100a637:	jne    0x1009160
 100a63d:	dec    r15d
 100a640:	test   r15d,r15d
 100a643:	jle    0x100b111
 100a649:	jmp    0x1009130
 100a64e:	test   r15d,r15d
 100a651:	jle    0x100b111
 100a657:	test   BYTE PTR [rip+0xd3d6],0x2        # 0x1017a34
 100a65e:	je     0x100a687
 100a660:	mov    rax,QWORD PTR [rip+0xfd79]        # 0x101a3e0
 100a667:	test   rax,rax
 100a66a:	je     0x100a687
 100a66c:	mov    r9d,r15d
 100a66f:	mov    r8,QWORD PTR [rip+0xfd6a]        # 0x101a3e0
 100a676:	mov    edx,0x14fc00
 100a67b:	mov    rcx,QWORD PTR [rip+0xfb2e]        # 0x101a1b0
 100a682:	call   0x10128c0
 100a687:	mov    r9d,0x100
 100a68d:	lea    r8,[rsp+0x60]
 100a692:	mov    edx,0x6
 100a697:	mov    rcx,QWORD PTR [rip+0xd382]        # 0x1017a20
 100a69e:	call   QWORD PTR [rip+0xffffffffffff6d24]        # 0x10013c8
 100a6a4:	lea    rdx,[rsp+0x60]
 100a6a9:	lea    rcx,[rsp+0x60]
 100a6ae:	call   QWORD PTR [rip+0xffffffffffff6d0c]        # 0x10013c0
 100a6b4:	mov    r8,QWORD PTR [r12]
 100a6b8:	lea    rdx,[rsp+0x60]
 100a6bd:	mov    rcx,QWORD PTR [rip+0xd404]        # 0x1017ac8
 100a6c4:	call   QWORD PTR [rip+0xffffffffffff6bde]        # 0x10012a8
 100a6ca:	nop
 100a6cb:	jmp    0x1008f85
 100a6d0:	mov    r9d,0x100
 100a6d6:	lea    r8,[rsp+0x60]
 100a6db:	mov    edx,0x4c
 100a6e0:	mov    rcx,QWORD PTR [rip+0xd339]        # 0x1017a20
 100a6e7:	call   QWORD PTR [rip+0xffffffffffff6cdb]        # 0x10013c8
 100a6ed:	lea    rdx,[rsp+0x60]
 100a6f2:	lea    rcx,[rsp+0x60]
 100a6f7:	call   QWORD PTR [rip+0xffffffffffff6cc3]        # 0x10013c0
 100a6fd:	mov    rdx,QWORD PTR [rip+0xd3c4]        # 0x1017ac8
 100a704:	lea    rcx,[rsp+0x60]
 100a709:	call   QWORD PTR [rip+0xffffffffffff6be1]        # 0x10012f0
 100a70f:	nop
 100a710:	jmp    0x1008f85
 100a715:	test   BYTE PTR [rip+0xd318],0x2        # 0x1017a34
 100a71c:	je     0x100a75a
 100a71e:	mov    rax,QWORD PTR [rip+0xfbfb]        # 0x101a320
 100a725:	test   rax,rax
 100a728:	je     0x100a75a
 100a72a:	cmp    QWORD PTR [rip+0xc9f6],0xffffffffffffffff        # 0x1017128
 100a732:	je     0x100a75a
 100a734:	mov    QWORD PTR [rsp+0x20],rsi
 100a739:	mov    r9,QWORD PTR [rip+0xfbe0]        # 0x101a320
 100a740:	mov    r8d,0x5b800
 100a746:	mov    rdx,QWORD PTR [rip+0xfa63]        # 0x101a1b0
 100a74d:	mov    rcx,QWORD PTR [rip+0xc9d4]        # 0x1017128
 100a754:	call   QWORD PTR [rip+0xc9fe]        # 0x1017158
 100a75a:	mov    r9d,0x100
 100a760:	lea    r8,[rsp+0x60]
 100a765:	mov    edx,0x2
 100a76a:	mov    rcx,QWORD PTR [rip+0xd2af]        # 0x1017a20
 100a771:	call   QWORD PTR [rip+0xffffffffffff6c51]        # 0x10013c8
 100a777:	mov    QWORD PTR [rsp+0x20],r14
 100a77c:	mov    r9,QWORD PTR [rip+0xd295]        # 0x1017a18
 100a783:	lea    r8,[rsp+0x60]
 100a788:	mov    edx,0x200
 100a78d:	lea    rcx,[rbp+0x60]
 100a791:	call   0x1008a80
 100a796:	lea    rcx,[rbp+0x60]
 100a79a:	call   QWORD PTR [rip+0xffffffffffff6b78]        # 0x1001318
 100a7a0:	nop
 100a7a1:	jmp    0x1008f85
 100a7a6:	test   BYTE PTR [rip+0xd287],0x2        # 0x1017a34
 100a7ad:	je     0x100a7ee
 100a7af:	mov    rax,QWORD PTR [rip+0xfc52]        # 0x101a408
 100a7b6:	test   rax,rax
 100a7b9:	je     0x100a7ee
 100a7bb:	cmp    QWORD PTR [rip+0xc965],0xffffffffffffffff        # 0x1017128
 100a7c3:	je     0x100a7ee
 100a7c5:	xor    r12d,r12d
 100a7c8:	mov    QWORD PTR [rsp+0x20],r12
 100a7cd:	mov    r9,QWORD PTR [rip+0xfc34]        # 0x101a408
 100a7d4:	mov    r8d,0x57400
 100a7da:	mov    rdx,QWORD PTR [rip+0xf9cf]        # 0x101a1b0
 100a7e1:	mov    rcx,QWORD PTR [rip+0xc940]        # 0x1017128
 100a7e8:	call   QWORD PTR [rip+0xc96a]        # 0x1017158
 100a7ee:	mov    r9d,0x100
 100a7f4:	lea    r8,[rsp+0x60]
 100a7f9:	mov    edx,0x1
 100a7fe:	mov    rcx,QWORD PTR [rip+0xd21b]        # 0x1017a20
 100a805:	call   QWORD PTR [rip+0xffffffffffff6bbd]        # 0x10013c8
 100a80b:	mov    r9,QWORD PTR [rip+0xd206]        # 0x1017a18
 100a812:	lea    r8,[rsp+0x60]
 100a817:	mov    edx,0x200
 100a81c:	lea    rcx,[rbp+0x60]
 100a820:	call   0x1008a80
 100a825:	lea    rcx,[rbp+0x60]
 100a829:	call   QWORD PTR [rip+0xffffffffffff6ae9]        # 0x1001318
 100a82f:	nop
 100a830:	jmp    0x1008f85
 100a835:	test   BYTE PTR [rip+0xd1f8],0x2        # 0x1017a34
 100a83c:	je     0x100a87a
 100a83e:	mov    rax,QWORD PTR [rip+0xfabb]        # 0x101a300
 100a845:	test   rax,rax
 100a848:	je     0x100a87a
 100a84a:	cmp    QWORD PTR [rip+0xc8d6],0xffffffffffffffff        # 0x1017128
 100a852:	je     0x100a87a
 100a854:	mov    QWORD PTR [rsp+0x20],rsi
 100a859:	mov    r9,QWORD PTR [rip+0xfaa0]        # 0x101a300
 100a860:	mov    r8d,0x69400
 100a866:	mov    rdx,QWORD PTR [rip+0xf943]        # 0x101a1b0
 100a86d:	mov    rcx,QWORD PTR [rip+0xc8b4]        # 0x1017128
 100a874:	call   QWORD PTR [rip+0xc8de]        # 0x1017158
 100a87a:	mov    r9d,0x100
 100a880:	lea    r8,[rsp+0x60]
 100a885:	mov    edx,0x4
 100a88a:	mov    rcx,QWORD PTR [rip+0xd18f]        # 0x1017a20
 100a891:	call   QWORD PTR [rip+0xffffffffffff6b31]        # 0x10013c8
 100a897:	mov    QWORD PTR [rsp+0x20],r14
 100a89c:	mov    r9,QWORD PTR [rip+0xd175]        # 0x1017a18
 100a8a3:	lea    r8,[rsp+0x60]
 100a8a8:	mov    edx,0x200
 100a8ad:	lea    rcx,[rbp+0x60]
 100a8b1:	call   0x1008a80
 100a8b6:	lea    rcx,[rbp+0x60]
 100a8ba:	call   QWORD PTR [rip+0xffffffffffff6a58]        # 0x1001318
 100a8c0:	nop
 100a8c1:	jmp    0x1008f85
 100a8c6:	test   BYTE PTR [rip+0xd167],0x2        # 0x1017a34
 100a8cd:	je     0x100a90e
 100a8cf:	mov    rax,QWORD PTR [rip+0xfa52]        # 0x101a328
 100a8d6:	test   rax,rax
 100a8d9:	je     0x100a90e
 100a8db:	cmp    QWORD PTR [rip+0xc845],0xffffffffffffffff        # 0x1017128
 100a8e3:	je     0x100a90e
 100a8e5:	xor    r12d,r12d
 100a8e8:	mov    QWORD PTR [rsp+0x20],r12
 100a8ed:	mov    r9,QWORD PTR [rip+0xfa34]        # 0x101a328
 100a8f4:	mov    r8d,0x65000
 100a8fa:	mov    rdx,QWORD PTR [rip+0xf8af]        # 0x101a1b0
 100a901:	mov    rcx,QWORD PTR [rip+0xc820]        # 0x1017128
 100a908:	call   QWORD PTR [rip+0xc84a]        # 0x1017158
 100a90e:	mov    r9d,0x100
 100a914:	lea    r8,[rsp+0x60]
 100a919:	mov    edx,0x3
 100a91e:	mov    rcx,QWORD PTR [rip+0xd0fb]        # 0x1017a20
 100a925:	call   QWORD PTR [rip+0xffffffffffff6a9d]        # 0x10013c8
 100a92b:	mov    r9,QWORD PTR [rip+0xd0e6]        # 0x1017a18
 100a932:	lea    r8,[rsp+0x60]
 100a937:	mov    edx,0x200
 100a93c:	lea    rcx,[rbp+0x60]
 100a940:	call   0x1008a80
 100a945:	lea    rcx,[rbp+0x60]
 100a949:	call   QWORD PTR [rip+0xffffffffffff69c9]        # 0x1001318
 100a94f:	nop
 100a950:	jmp    0x1008f85
 100a955:	test   BYTE PTR [rip+0xd0d8],0x2        # 0x1017a34
 100a95c:	je     0x100a99a
 100a95e:	mov    rax,QWORD PTR [rip+0xfa43]        # 0x101a3a8
 100a965:	test   rax,rax
 100a968:	je     0x100a99a
 100a96a:	cmp    QWORD PTR [rip+0xc7b6],0xffffffffffffffff        # 0x1017128
 100a972:	je     0x100a99a
 100a974:	mov    QWORD PTR [rsp+0x20],rsi
 100a979:	mov    r9,QWORD PTR [rip+0xfa28]        # 0x101a3a8
 100a980:	mov    r8d,0x7a400
 100a986:	mov    rdx,QWORD PTR [rip+0xf823]        # 0x101a1b0
 100a98d:	mov    rcx,QWORD PTR [rip+0xc794]        # 0x1017128
 100a994:	call   QWORD PTR [rip+0xc7be]        # 0x1017158
 100a99a:	mov    r9d,0x100
 100a9a0:	lea    r8,[rsp+0x60]
 100a9a5:	mov    edx,0x42
 100a9aa:	mov    rcx,QWORD PTR [rip+0xd06f]        # 0x1017a20
 100a9b1:	call   QWORD PTR [rip+0xffffffffffff6a11]        # 0x10013c8
 100a9b7:	mov    rdx,QWORD PTR [rip+0xd10a]        # 0x1017ac8
 100a9be:	lea    rcx,[rsp+0x60]
 100a9c3:	call   QWORD PTR [rip+0xffffffffffff6927]        # 0x10012f0
 100a9c9:	mov    r9d,0x100
 100a9cf:	lea    r8,[rsp+0x60]
 100a9d4:	mov    edx,0x43
 100a9d9:	mov    rcx,QWORD PTR [rip+0xd040]        # 0x1017a20
 100a9e0:	call   QWORD PTR [rip+0xffffffffffff69e2]        # 0x10013c8
 100a9e6:	mov    rdx,QWORD PTR [rip+0xd0db]        # 0x1017ac8
 100a9ed:	lea    rcx,[rsp+0x60]
 100a9f2:	call   QWORD PTR [rip+0xffffffffffff68f8]        # 0x10012f0
 100a9f8:	nop
 100a9f9:	jmp    0x1008f85
 100a9fe:	test   BYTE PTR [rip+0xd02f],0x2        # 0x1017a34
 100aa05:	je     0x100aa43
 100aa07:	mov    rax,QWORD PTR [rip+0xf9da]        # 0x101a3e8
 100aa0e:	test   rax,rax
 100aa11:	je     0x100aa43
 100aa13:	cmp    QWORD PTR [rip+0xc70d],0xffffffffffffffff        # 0x1017128
 100aa1b:	je     0x100aa43
 100aa1d:	mov    QWORD PTR [rsp+0x20],rsi
 100aa22:	mov    r9,QWORD PTR [rip+0xf9bf]        # 0x101a3e8
 100aa29:	mov    r8d,0x81000
 100aa2f:	mov    rdx,QWORD PTR [rip+0xf77a]        # 0x101a1b0
 100aa36:	mov    rcx,QWORD PTR [rip+0xc6eb]        # 0x1017128
 100aa3d:	call   QWORD PTR [rip+0xc715]        # 0x1017158
 100aa43:	mov    r9d,0x100
 100aa49:	lea    r8,[rsp+0x60]
 100aa4e:	mov    edx,0x42
 100aa53:	mov    rcx,QWORD PTR [rip+0xcfc6]        # 0x1017a20
 100aa5a:	call   QWORD PTR [rip+0xffffffffffff6968]        # 0x10013c8
 100aa60:	mov    rdx,QWORD PTR [rip+0xd061]        # 0x1017ac8
 100aa67:	lea    rcx,[rsp+0x60]
 100aa6c:	call   QWORD PTR [rip+0xffffffffffff687e]        # 0x10012f0
 100aa72:	mov    r9d,0x100
 100aa78:	lea    r8,[rsp+0x60]
 100aa7d:	mov    edx,0x43
 100aa82:	mov    rcx,QWORD PTR [rip+0xcf97]        # 0x1017a20
 100aa89:	call   QWORD PTR [rip+0xffffffffffff6939]        # 0x10013c8
 100aa8f:	mov    rdx,QWORD PTR [rip+0xd032]        # 0x1017ac8
 100aa96:	lea    rcx,[rsp+0x60]
 100aa9b:	call   QWORD PTR [rip+0xffffffffffff684f]        # 0x10012f0
 100aaa1:	nop
 100aaa2:	jmp    0x1008f85
 100aaa7:	test   BYTE PTR [rip+0xcf86],0x2        # 0x1017a34
 100aaae:	je     0x100aaec
 100aab0:	mov    rax,QWORD PTR [rip+0xf9c1]        # 0x101a478
 100aab7:	test   rax,rax
 100aaba:	je     0x100aaec
 100aabc:	cmp    QWORD PTR [rip+0xc664],0xffffffffffffffff        # 0x1017128
 100aac4:	je     0x100aaec
 100aac6:	mov    QWORD PTR [rsp+0x20],rsi
 100aacb:	mov    r9,QWORD PTR [rip+0xf9a6]        # 0x101a478
 100aad2:	mov    r8d,0x8b000
 100aad8:	mov    rdx,QWORD PTR [rip+0xf6d1]        # 0x101a1b0
 100aadf:	mov    rcx,QWORD PTR [rip+0xc642]        # 0x1017128
 100aae6:	call   QWORD PTR [rip+0xc66c]        # 0x1017158
 100aaec:	mov    r9d,0x100
 100aaf2:	lea    r8,[rsp+0x60]
 100aaf7:	mov    edx,0x42
 100aafc:	mov    rcx,QWORD PTR [rip+0xcf1d]        # 0x1017a20
 100ab03:	call   QWORD PTR [rip+0xffffffffffff68bf]        # 0x10013c8
 100ab09:	mov    rdx,QWORD PTR [rip+0xcfb8]        # 0x1017ac8
 100ab10:	lea    rcx,[rsp+0x60]
 100ab15:	call   QWORD PTR [rip+0xffffffffffff67d5]        # 0x10012f0
 100ab1b:	mov    r9d,0x100
 100ab21:	lea    r8,[rsp+0x60]
 100ab26:	mov    edx,0x43
 100ab2b:	mov    rcx,QWORD PTR [rip+0xceee]        # 0x1017a20
 100ab32:	call   QWORD PTR [rip+0xffffffffffff6890]        # 0x10013c8
 100ab38:	mov    rdx,QWORD PTR [rip+0xcf89]        # 0x1017ac8
 100ab3f:	lea    rcx,[rsp+0x60]
 100ab44:	call   QWORD PTR [rip+0xffffffffffff67a6]        # 0x10012f0
 100ab4a:	nop
 100ab4b:	jmp    0x1008f85
 100ab50:	test   BYTE PTR [rip+0xcedd],0x2        # 0x1017a34
 100ab57:	je     0x100ab95
 100ab59:	mov    rax,QWORD PTR [rip+0xf758]        # 0x101a2b8
 100ab60:	test   rax,rax
 100ab63:	je     0x100ab95
 100ab65:	cmp    QWORD PTR [rip+0xc5bb],0xffffffffffffffff        # 0x1017128
 100ab6d:	je     0x100ab95
 100ab6f:	mov    QWORD PTR [rsp+0x20],rsi
 100ab74:	mov    r9,QWORD PTR [rip+0xf73d]        # 0x101a2b8
 100ab7b:	mov    r8d,0x96c00
 100ab81:	mov    rdx,QWORD PTR [rip+0xf628]        # 0x101a1b0
 100ab88:	mov    rcx,QWORD PTR [rip+0xc599]        # 0x1017128
 100ab8f:	call   QWORD PTR [rip+0xc5c3]        # 0x1017158
 100ab95:	mov    r9d,0x100
 100ab9b:	lea    r8,[rsp+0x60]
 100aba0:	mov    edx,0x42
 100aba5:	mov    rcx,QWORD PTR [rip+0xce74]        # 0x1017a20
 100abac:	call   QWORD PTR [rip+0xffffffffffff6816]        # 0x10013c8
 100abb2:	mov    rdx,QWORD PTR [rip+0xcf0f]        # 0x1017ac8
 100abb9:	lea    rcx,[rsp+0x60]
 100abbe:	call   QWORD PTR [rip+0xffffffffffff672c]        # 0x10012f0
 100abc4:	mov    r9d,0x100
 100abca:	lea    r8,[rsp+0x60]
 100abcf:	mov    edx,0x43
 100abd4:	mov    rcx,QWORD PTR [rip+0xce45]        # 0x1017a20
 100abdb:	call   QWORD PTR [rip+0xffffffffffff67e7]        # 0x10013c8
 100abe1:	mov    rdx,QWORD PTR [rip+0xcee0]        # 0x1017ac8
 100abe8:	lea    rcx,[rsp+0x60]
 100abed:	call   QWORD PTR [rip+0xffffffffffff66fd]        # 0x10012f0
 100abf3:	nop
 100abf4:	jmp    0x1008f85
 100abf9:	jmp    0x1008f85
 100abfe:	jmp    0x1008f85
 100ac03:	jmp    0x1008f85
 100ac08:	jmp    0x1008f85
 100ac0d:	jmp    0x1008f85
 100ac12:	jmp    0x1008f85
 100ac17:	jmp    0x1008f85
 100ac1c:	jmp    0x1008f85
 100ac21:	jmp    0x1008f85
 100ac26:	mov    r9d,0x100
 100ac2c:	lea    r8,[rsp+0x60]
 100ac31:	mov    edx,0x22
 100ac36:	mov    rcx,QWORD PTR [rip+0xcde3]        # 0x1017a20
 100ac3d:	call   QWORD PTR [rip+0xffffffffffff6785]        # 0x10013c8
 100ac43:	lea    rdx,[rsp+0x60]
 100ac48:	lea    rcx,[rsp+0x60]
 100ac4d:	call   QWORD PTR [rip+0xffffffffffff676d]        # 0x10013c0
 100ac53:	mov    r9,QWORD PTR [rip+0xcdbe]        # 0x1017a18
 100ac5a:	lea    r8,[rsp+0x60]
 100ac5f:	mov    edx,0x200
 100ac64:	lea    rcx,[rbp+0x60]
 100ac68:	call   0x1008a80
 100ac6d:	lea    r8,[rbp+0x60]
 100ac71:	lea    rdx,[rip+0xffffffffffff6d68]        # 0x10019e0
 100ac78:	mov    rcx,QWORD PTR [rip+0xce49]        # 0x1017ac8
 100ac7f:	call   QWORD PTR [rip+0xffffffffffff6623]        # 0x10012a8
 100ac85:	mov    rcx,QWORD PTR [rip+0xcd8c]        # 0x1017a18
 100ac8c:	call   0x100ba00
 100ac91:	nop
 100ac92:	jmp    0x1008f85
 100ac97:	jmp    0x1008f85
 100ac9c:	jmp    0x1008f85
 100aca1:	jmp    0x1008f85
 100aca6:	mov    r9d,0x100
 100acac:	lea    r8,[rsp+0x60]
 100acb1:	mov    edx,0x40
 100acb6:	mov    rcx,QWORD PTR [rip+0xcd63]        # 0x1017a20
 100acbd:	call   QWORD PTR [rip+0xffffffffffff6705]        # 0x10013c8
 100acc3:	mov    rdx,QWORD PTR [rip+0xcdfe]        # 0x1017ac8
 100acca:	lea    rcx,[rsp+0x60]
 100accf:	call   QWORD PTR [rip+0xffffffffffff661b]        # 0x10012f0
 100acd5:	nop
 100acd6:	jmp    0x1008f85
 100acdb:	mov    r9d,0x100
 100ace1:	lea    r8,[rsp+0x60]
 100ace6:	mov    edx,0x40
 100aceb:	mov    rcx,QWORD PTR [rip+0xcd2e]        # 0x1017a20
 100acf2:	call   QWORD PTR [rip+0xffffffffffff66d0]        # 0x10013c8
 100acf8:	mov    rdx,QWORD PTR [rip+0xcdc9]        # 0x1017ac8
 100acff:	lea    rcx,[rsp+0x60]
 100ad04:	call   QWORD PTR [rip+0xffffffffffff65e6]        # 0x10012f0
 100ad0a:	nop
 100ad0b:	jmp    0x1008f85
 100ad10:	mov    r9d,0x100
 100ad16:	lea    r8,[rsp+0x60]
 100ad1b:	mov    edx,0x40
 100ad20:	mov    rcx,QWORD PTR [rip+0xccf9]        # 0x1017a20
 100ad27:	call   QWORD PTR [rip+0xffffffffffff669b]        # 0x10013c8
 100ad2d:	mov    rdx,QWORD PTR [rip+0xcd94]        # 0x1017ac8
 100ad34:	lea    rcx,[rsp+0x60]
 100ad39:	call   QWORD PTR [rip+0xffffffffffff65b1]        # 0x10012f0
 100ad3f:	nop
 100ad40:	jmp    0x1008f85
 100ad45:	mov    r9d,0x100
 100ad4b:	lea    r8,[rsp+0x60]
 100ad50:	mov    edx,0x42
 100ad55:	mov    rcx,QWORD PTR [rip+0xccc4]        # 0x1017a20
 100ad5c:	call   QWORD PTR [rip+0xffffffffffff6666]        # 0x10013c8
 100ad62:	mov    rdx,QWORD PTR [rip+0xcd5f]        # 0x1017ac8
 100ad69:	lea    rcx,[rsp+0x60]
 100ad6e:	call   QWORD PTR [rip+0xffffffffffff657c]        # 0x10012f0
 100ad74:	mov    r9d,0x100
 100ad7a:	lea    r8,[rsp+0x60]
 100ad7f:	mov    edx,0x43
 100ad84:	mov    rcx,QWORD PTR [rip+0xcc95]        # 0x1017a20
 100ad8b:	call   QWORD PTR [rip+0xffffffffffff6637]        # 0x10013c8
 100ad91:	mov    rdx,QWORD PTR [rip+0xcd30]        # 0x1017ac8
 100ad98:	lea    rcx,[rsp+0x60]
 100ad9d:	call   QWORD PTR [rip+0xffffffffffff654d]        # 0x10012f0
 100ada3:	nop
 100ada4:	jmp    0x1008f85
 100ada9:	mov    r9d,0x100
 100adaf:	lea    r8,[rsp+0x60]
 100adb4:	mov    edx,0x41
 100adb9:	mov    rcx,QWORD PTR [rip+0xcc60]        # 0x1017a20
 100adc0:	call   QWORD PTR [rip+0xffffffffffff6602]        # 0x10013c8
 100adc6:	mov    rdx,QWORD PTR [rip+0xccfb]        # 0x1017ac8
 100adcd:	lea    rcx,[rsp+0x60]
 100add2:	call   QWORD PTR [rip+0xffffffffffff6518]        # 0x10012f0
 100add8:	nop
 100add9:	jmp    0x1008f85
 100adde:	mov    r9d,0x100
 100ade4:	lea    r8,[rsp+0x60]
 100ade9:	mov    edx,0x41
 100adee:	mov    rcx,QWORD PTR [rip+0xcc2b]        # 0x1017a20
 100adf5:	call   QWORD PTR [rip+0xffffffffffff65cd]        # 0x10013c8
 100adfb:	mov    rdx,QWORD PTR [rip+0xccc6]        # 0x1017ac8
 100ae02:	lea    rcx,[rsp+0x60]
 100ae07:	call   QWORD PTR [rip+0xffffffffffff64e3]        # 0x10012f0
 100ae0d:	nop
 100ae0e:	jmp    0x1008f85
 100ae13:	mov    r9d,0x100
 100ae19:	lea    r8,[rsp+0x60]
 100ae1e:	mov    edx,0x41
 100ae23:	mov    rcx,QWORD PTR [rip+0xcbf6]        # 0x1017a20
 100ae2a:	call   QWORD PTR [rip+0xffffffffffff6598]        # 0x10013c8
 100ae30:	mov    rdx,QWORD PTR [rip+0xcc91]        # 0x1017ac8
 100ae37:	lea    rcx,[rsp+0x60]
 100ae3c:	call   QWORD PTR [rip+0xffffffffffff64ae]        # 0x10012f0
 100ae42:	nop
 100ae43:	jmp    0x1008f85
 100ae48:	mov    r9d,0x100
 100ae4e:	lea    r8,[rsp+0x60]
 100ae53:	mov    edx,0x42
 100ae58:	mov    rcx,QWORD PTR [rip+0xcbc1]        # 0x1017a20
 100ae5f:	call   QWORD PTR [rip+0xffffffffffff6563]        # 0x10013c8
 100ae65:	mov    rdx,QWORD PTR [rip+0xcc5c]        # 0x1017ac8
 100ae6c:	lea    rcx,[rsp+0x60]
 100ae71:	call   QWORD PTR [rip+0xffffffffffff6479]        # 0x10012f0
 100ae77:	mov    r9d,0x100
 100ae7d:	lea    r8,[rsp+0x60]
 100ae82:	mov    edx,0x43
 100ae87:	mov    rcx,QWORD PTR [rip+0xcb92]        # 0x1017a20
 100ae8e:	call   QWORD PTR [rip+0xffffffffffff6534]        # 0x10013c8
 100ae94:	mov    rdx,QWORD PTR [rip+0xcc2d]        # 0x1017ac8
 100ae9b:	lea    rcx,[rsp+0x60]
 100aea0:	call   QWORD PTR [rip+0xffffffffffff644a]        # 0x10012f0
 100aea6:	nop
 100aea7:	jmp    0x1008f85
 100aeac:	mov    r9d,0x100
 100aeb2:	lea    r8,[rsp+0x60]
 100aeb7:	mov    edx,0x45
 100aebc:	mov    rcx,QWORD PTR [rip+0xcb5d]        # 0x1017a20
 100aec3:	call   QWORD PTR [rip+0xffffffffffff64ff]        # 0x10013c8
 100aec9:	lea    rdx,[rsp+0x60]
 100aece:	lea    rcx,[rsp+0x60]
 100aed3:	call   QWORD PTR [rip+0xffffffffffff64e7]        # 0x10013c0
 100aed9:	mov    rdx,QWORD PTR [rip+0xcbe8]        # 0x1017ac8
 100aee0:	lea    rcx,[rsp+0x60]
 100aee5:	call   QWORD PTR [rip+0xffffffffffff6405]        # 0x10012f0
 100aeeb:	nop
 100aeec:	jmp    0x1008f85
 100aef1:	test   BYTE PTR [rip+0xcb3c],0x2        # 0x1017a34
 100aef8:	je     0x100af25
 100aefa:	mov    rax,QWORD PTR [rip+0xf457]        # 0x101a358
 100af01:	test   rax,rax
 100af04:	je     0x100af25
 100af06:	mov    r9,QWORD PTR [rip+0xcafb]        # 0x1017a08
 100af0d:	mov    r8,QWORD PTR [rip+0xf444]        # 0x101a358
 100af14:	mov    edx,0x122000
 100af19:	mov    rcx,QWORD PTR [rip+0xf290]        # 0x101a1b0
 100af20:	call   0x10128c0
 100af25:	mov    r9d,0x100
 100af2b:	lea    r8,[rsp+0x60]
 100af30:	mov    edx,0x44
 100af35:	mov    rcx,QWORD PTR [rip+0xcae4]        # 0x1017a20
 100af3c:	call   QWORD PTR [rip+0xffffffffffff6486]        # 0x10013c8
 100af42:	lea    rdx,[rsp+0x60]
 100af47:	lea    rcx,[rsp+0x60]
 100af4c:	call   QWORD PTR [rip+0xffffffffffff646e]        # 0x10013c0
 100af52:	mov    rdx,QWORD PTR [rip+0xcb6f]        # 0x1017ac8
 100af59:	lea    rcx,[rsp+0x60]
 100af5e:	call   QWORD PTR [rip+0xffffffffffff638c]        # 0x10012f0
 100af64:	nop
 100af65:	jmp    0x1008f85
 100af6a:	mov    r9d,0x100
 100af70:	lea    r8,[rsp+0x60]
 100af75:	mov    edx,0x47
 100af7a:	mov    rcx,QWORD PTR [rip+0xca9f]        # 0x1017a20
 100af81:	call   QWORD PTR [rip+0xffffffffffff6441]        # 0x10013c8
 100af87:	lea    rdx,[rsp+0x60]
 100af8c:	lea    rcx,[rsp+0x60]
 100af91:	call   QWORD PTR [rip+0xffffffffffff6429]        # 0x10013c0
 100af97:	mov    rdx,QWORD PTR [rip+0xcb2a]        # 0x1017ac8
 100af9e:	lea    rcx,[rsp+0x60]
 100afa3:	call   QWORD PTR [rip+0xffffffffffff6347]        # 0x10012f0
 100afa9:	nop
 100afaa:	jmp    0x1008f85
 100afaf:	mov    r9d,0x100
 100afb5:	lea    r8,[rsp+0x60]
 100afba:	mov    edx,0x3e
 100afbf:	mov    rcx,QWORD PTR [rip+0xca5a]        # 0x1017a20
 100afc6:	call   QWORD PTR [rip+0xffffffffffff63fc]        # 0x10013c8
 100afcc:	lea    rdx,[rsp+0x60]
 100afd1:	lea    rcx,[rsp+0x60]
 100afd6:	call   QWORD PTR [rip+0xffffffffffff63e4]        # 0x10013c0
 100afdc:	mov    rdx,QWORD PTR [rip+0xcae5]        # 0x1017ac8
 100afe3:	lea    rcx,[rsp+0x60]
 100afe8:	call   QWORD PTR [rip+0xffffffffffff6302]        # 0x10012f0
 100afee:	nop
 100afef:	jmp    0x1008f85
 100aff4:	mov    r9d,0x100
 100affa:	lea    r8,[rsp+0x60]
 100afff:	mov    edx,0x51
 100b004:	mov    rcx,QWORD PTR [rip+0xca15]        # 0x1017a20
 100b00b:	call   QWORD PTR [rip+0xffffffffffff63b7]        # 0x10013c8
 100b011:	lea    rdx,[rsp+0x60]
 100b016:	lea    rcx,[rsp+0x60]
 100b01b:	call   QWORD PTR [rip+0xffffffffffff639f]        # 0x10013c0
 100b021:	mov    rdx,QWORD PTR [rip+0xcaa0]        # 0x1017ac8
 100b028:	lea    rcx,[rsp+0x60]
 100b02d:	call   QWORD PTR [rip+0xffffffffffff62bd]        # 0x10012f0
 100b033:	nop
 100b034:	jmp    0x1008f85
 100b039:	mov    r9d,0x100
 100b03f:	lea    r8,[rsp+0x60]
 100b044:	mov    edx,0x50
 100b049:	mov    rcx,QWORD PTR [rip+0xc9d0]        # 0x1017a20
 100b050:	call   QWORD PTR [rip+0xffffffffffff6372]        # 0x10013c8
 100b056:	lea    rdx,[rsp+0x60]
 100b05b:	lea    rcx,[rsp+0x60]
 100b060:	call   QWORD PTR [rip+0xffffffffffff635a]        # 0x10013c0
 100b066:	mov    r8d,0x4b
 100b06c:	lea    rdx,[rsp+0x60]
 100b071:	mov    rcx,QWORD PTR [rip+0xca50]        # 0x1017ac8
 100b078:	call   QWORD PTR [rip+0xffffffffffff622a]        # 0x10012a8
 100b07e:	nop
 100b07f:	jmp    0x1008f85
 100b084:	test   BYTE PTR [rip+0xc9a9],0x2        # 0x1017a34
 100b08b:	je     0x100b0b5
 100b08d:	mov    rax,QWORD PTR [rip+0xf23c]        # 0x101a2d0
 100b094:	test   rax,rax
 100b097:	je     0x100b0b5
 100b099:	movsx  r9d,BYTE PTR [rbx]
 100b09d:	mov    r8,QWORD PTR [rip+0xf22c]        # 0x101a2d0
 100b0a4:	mov    edx,0x14b800
 100b0a9:	mov    rcx,QWORD PTR [rip+0xf100]        # 0x101a1b0
 100b0b0:	call   0x10128c0
 100b0b5:	mov    r9d,0x100
 100b0bb:	lea    r8,[rsp+0x60]
 100b0c0:	mov    edx,0x5
 100b0c5:	mov    rcx,QWORD PTR [rip+0xc954]        # 0x1017a20
 100b0cc:	call   QWORD PTR [rip+0xffffffffffff62f6]        # 0x10013c8
 100b0d2:	lea    rdx,[rsp+0x60]
 100b0d7:	lea    rcx,[rsp+0x60]
 100b0dc:	call   QWORD PTR [rip+0xffffffffffff62de]        # 0x10013c0
 100b0e2:	movsx  r9d,BYTE PTR [rbx]
 100b0e6:	mov    r8,QWORD PTR [rip+0xc92b]        # 0x1017a18
 100b0ed:	lea    rdx,[rsp+0x60]
 100b0f2:	mov    rcx,QWORD PTR [rip+0xc9cf]        # 0x1017ac8
 100b0f9:	call   QWORD PTR [rip+0xffffffffffff61a9]        # 0x10012a8
 100b0ff:	mov    rcx,QWORD PTR [rip+0xc912]        # 0x1017a18
 100b106:	call   0x100ba00
 100b10b:	nop
 100b10c:	jmp    0x1008f85
 100b111:	mov    ebx,0x307
 100b116:	mov    eax,DWORD PTR [rip+0xc938]        # 0x1017a54
 100b11c:	cmp    eax,0x46
 100b11f:	je     0x100b12b
 100b121:	cmp    eax,0x50
 100b124:	je     0x100b12b
 100b126:	cmp    eax,0x5a
 100b129:	jne    0x100b174
 100b12b:	cmp    DWORD PTR [rip+0xc8fa],0x0        # 0x1017a2c
 100b132:	jne    0x100b174
 100b134:	test   BYTE PTR [rip+0xc8f9],0x2        # 0x1017a34
 100b13b:	je     0x100b168
 100b13d:	mov    rax,QWORD PTR [rip+0xf314]        # 0x101a458
 100b144:	test   rax,rax
 100b147:	je     0x100b168
 100b149:	mov    r9d,DWORD PTR [rip+0xc904]        # 0x1017a54
 100b150:	mov    r8,QWORD PTR [rip+0xf301]        # 0x101a458
 100b157:	mov    edx,0x154400
 100b15c:	mov    rcx,QWORD PTR [rip+0xf04d]        # 0x101a1b0
 100b163:	call   0x10128c0
 100b168:	mov    DWORD PTR [rip+0xc8ba],0x2        # 0x1017a2c
 100b172:	jmp    0x100b191
 100b174:	cmp    DWORD PTR [rip+0xc8b1],0x3        # 0x1017a2c
 100b17b:	jne    0x100b191
 100b17d:	cmp    DWORD PTR [rip+0xc8fc],0x0        # 0x1017a80
 100b184:	je     0x100b191
 100b186:	call   0x100c390
 100b18b:	mov    DWORD PTR [rip+0xc8ef],esi        # 0x1017a80
 100b191:	xor    r12d,r12d
 100b194:	cmp    DWORD PTR [rip+0xc91d],r12d        # 0x1017ab8
 100b19b:	je     0x100b396
 100b1a1:	mov    rdi,QWORD PTR [rip+0xc860]        # 0x1017a08
 100b1a8:	test   rdi,rdi
 100b1ab:	je     0x100b396
 100b1b1:	lea    r15,[rip+0xcbf8]        # 0x1017db0
 100b1b8:	mov    r14,r15
 100b1bb:	nop    DWORD PTR [rax+rax*1+0x0]
 100b1c0:	mov    edx,0x2e
 100b1c5:	mov    rcx,rdi
 100b1c8:	call   QWORD PTR [rip+0xffffffffffff610a]        # 0x10012d8
 100b1ce:	mov    rsi,rax
 100b1d1:	test   rax,rax
 100b1d4:	je     0x100b2b2
 100b1da:	cmp    rax,rdi
 100b1dd:	jne    0x100b1e4
 100b1df:	mov    rax,r12
 100b1e2:	jmp    0x100b21a
 100b1e4:	mov    rbx,rax
 100b1e7:	sub    rbx,rdi
 100b1ea:	cmp    rbx,0x80
 100b1f1:	jg     0x100b239
 100b1f3:	call   QWORD PTR [rip+0xffffffffffff5e3f]        # 0x1001038
 100b1f9:	mov    DWORD PTR [rsp+0x20],eax
 100b1fd:	mov    r9,QWORD PTR [rsp+0x48]
 100b202:	mov    r8,r14
 100b205:	mov    rdx,rbx
 100b208:	mov    rcx,rdi
 100b20b:	call   0x1008b10
 100b210:	test   rax,rax
 100b213:	je     0x100b239
 100b215:	mov    rbx,QWORD PTR [rsp+0x48]
 100b21a:	lea    rcx,[rax+r14*1]
 100b21e:	mov    BYTE PTR [rcx],0x2e
 100b221:	lea    r14,[rcx+0x1]
 100b225:	mov    rcx,r13
 100b228:	sub    rcx,rax
 100b22b:	add    rbx,rcx
 100b22e:	mov    QWORD PTR [rsp+0x48],rbx
 100b233:	lea    rdi,[rsi+0x1]
 100b237:	jmp    0x100b1c0
 100b239:	test   BYTE PTR [rip+0xc7f4],0x2        # 0x1017a34
 100b240:	je     0x100b26d
 100b242:	mov    rax,QWORD PTR [rip+0xf18f]        # 0x101a3d8
 100b249:	test   rax,rax
 100b24c:	je     0x100b26d
 100b24e:	mov    r9,QWORD PTR [rip+0xc7b3]        # 0x1017a08
 100b255:	mov    r8,QWORD PTR [rip+0xf17c]        # 0x101a3d8
 100b25c:	mov    edx,0x15fc00
 100b261:	mov    rcx,QWORD PTR [rip+0xef48]        # 0x101a1b0
 100b268:	call   0x10128c0
 100b26d:	mov    r9d,0x100
 100b273:	lea    r8,[rsp+0x60]
 100b278:	mov    edx,0x44
 100b27d:	mov    rcx,QWORD PTR [rip+0xc79c]        # 0x1017a20
 100b284:	call   QWORD PTR [rip+0xffffffffffff613e]        # 0x10013c8
 100b28a:	lea    rdx,[rsp+0x60]
 100b28f:	lea    rcx,[rsp+0x60]
 100b294:	call   QWORD PTR [rip+0xffffffffffff6126]        # 0x10013c0
 100b29a:	mov    rdx,QWORD PTR [rip+0xc827]        # 0x1017ac8
 100b2a1:	lea    rcx,[rsp+0x60]
 100b2a6:	call   QWORD PTR [rip+0xffffffffffff6044]        # 0x10012f0
 100b2ac:	nop
 100b2ad:	jmp    0x1008f85
 100b2b2:	inc    r13
 100b2b5:	cmp    BYTE PTR [rdi+r13*1],r12b
 100b2b9:	jne    0x100b2b2
 100b2bb:	cmp    r13,0x80
 100b2c2:	ja     0x100b31d
 100b2c4:	call   QWORD PTR [rip+0xffffffffffff5d6e]        # 0x1001038
 100b2ca:	mov    DWORD PTR [rsp+0x20],eax
 100b2ce:	mov    r9,rbx
 100b2d1:	mov    r8,r14
 100b2d4:	mov    rdx,r13
 100b2d7:	mov    rcx,rdi
 100b2da:	call   0x1008b10
 100b2df:	test   rax,rax
 100b2e2:	je     0x100b31d
 100b2e4:	test   BYTE PTR [rip+0xc749],0x2        # 0x1017a34
 100b2eb:	je     0x100b314
 100b2ed:	mov    rax,QWORD PTR [rip+0xf0cc]        # 0x101a3c0
 100b2f4:	test   rax,rax
 100b2f7:	je     0x100b314
 100b2f9:	mov    r9,r15
 100b2fc:	mov    r8,QWORD PTR [rip+0xf0bd]        # 0x101a3c0
 100b303:	mov    edx,0x169c00
 100b308:	mov    rcx,QWORD PTR [rip+0xeea1]        # 0x101a1b0
 100b30f:	call   0x10128c0
 100b314:	mov    QWORD PTR [rip+0xc6ed],r15        # 0x1017a08
 100b31b:	jmp    0x100b396
 100b31d:	test   BYTE PTR [rip+0xc710],0x2        # 0x1017a34
 100b324:	je     0x100b351
 100b326:	mov    rax,QWORD PTR [rip+0xf0a3]        # 0x101a3d0
 100b32d:	test   rax,rax
 100b330:	je     0x100b351
 100b332:	mov    r9,QWORD PTR [rip+0xc6cf]        # 0x1017a08
 100b339:	mov    r8,QWORD PTR [rip+0xf090]        # 0x101a3d0
 100b340:	mov    edx,0x166000
 100b345:	mov    rcx,QWORD PTR [rip+0xee64]        # 0x101a1b0
 100b34c:	call   0x10128c0
 100b351:	mov    r9d,0x100
 100b357:	lea    r8,[rsp+0x60]
 100b35c:	mov    edx,0x44
 100b361:	mov    rcx,QWORD PTR [rip+0xc6b8]        # 0x1017a20
 100b368:	call   QWORD PTR [rip+0xffffffffffff605a]        # 0x10013c8
 100b36e:	lea    rdx,[rsp+0x60]
 100b373:	lea    rcx,[rsp+0x60]
 100b378:	call   QWORD PTR [rip+0xffffffffffff6042]        # 0x10013c0
 100b37e:	mov    rdx,QWORD PTR [rip+0xc743]        # 0x1017ac8
 100b385:	lea    rcx,[rsp+0x60]
 100b38a:	call   QWORD PTR [rip+0xffffffffffff5f60]        # 0x10012f0
 100b390:	nop
 100b391:	jmp    0x1008f85
 100b396:	cmp    DWORD PTR [rip+0xc6c7],0x0        # 0x1017a64
 100b39d:	jne    0x100b3e2
 100b39f:	cmp    QWORD PTR [rip+0xc719],0x0        # 0x1017ac0
 100b3a7:	jne    0x100b3cc
 100b3a9:	mov    edx,0x4b
 100b3ae:	mov    rcx,QWORD PTR [rip+0xc713]        # 0x1017ac8
 100b3b5:	call   0x10118b0
 100b3ba:	mov    rcx,QWORD PTR [rip+0xc657]        # 0x1017a18
 100b3c1:	call   0x100ba00
 100b3c6:	nop
 100b3c7:	jmp    0x1008f85
 100b3cc:	cmp    QWORD PTR [rip+0xc6c4],0x0        # 0x1017a98
 100b3d4:	jne    0x100b3e2
 100b3d6:	call   0x100c450
 100b3db:	mov    QWORD PTR [rip+0xc6b6],rax        # 0x1017a98
 100b3e2:	mov    rax,QWORD PTR [rip+0xc687]        # 0x1017a70
 100b3e9:	test   rax,rax
 100b3ec:	je     0x100b3f3
 100b3ee:	cmp    BYTE PTR [rax],0x0
 100b3f1:	jne    0x100b446
 100b3f3:	test   BYTE PTR [rip+0xc63a],0x2        # 0x1017a34
 100b3fa:	je     0x100b438
 100b3fc:	mov    rax,QWORD PTR [rip+0xeed5]        # 0x101a2d8
 100b403:	test   rax,rax
 100b406:	je     0x100b438
 100b408:	cmp    QWORD PTR [rip+0xbd18],0xffffffffffffffff        # 0x1017128
 100b410:	je     0x100b438
 100b412:	mov    QWORD PTR [rsp+0x20],r12
 100b417:	mov    r9,QWORD PTR [rip+0xeeba]        # 0x101a2d8
 100b41e:	mov    r8d,0x16f400
 100b424:	mov    rdx,QWORD PTR [rip+0xed85]        # 0x101a1b0
 100b42b:	mov    rcx,QWORD PTR [rip+0xbcf6]        # 0x1017128
 100b432:	call   QWORD PTR [rip+0xbd20]        # 0x1017158
 100b438:	lea    rax,[rip+0xffffffffffff6061]        # 0x10014a0
 100b43f:	mov    QWORD PTR [rip+0xc62a],rax        # 0x1017a70
 100b446:	cmp    DWORD PTR [rip+0xc5db],0x2        # 0x1017a28
 100b44d:	jne    0x100b468
 100b44f:	mov    rax,QWORD PTR [rip+0xc64a]        # 0x1017aa0
 100b456:	cmp    DWORD PTR [rip+0xc60f],0x0        # 0x1017a6c
 100b45d:	cmove  rax,r12
 100b461:	mov    QWORD PTR [rip+0xc638],rax        # 0x1017aa0
 100b468:	test   BYTE PTR [rip+0xc5c5],0x2        # 0x1017a34
 100b46f:	je     0x100b499
 100b471:	mov    rax,QWORD PTR [rip+0xee38]        # 0x101a2b0
 100b478:	test   rax,rax
 100b47b:	je     0x100b499
 100b47d:	xor    r9d,r9d
 100b480:	mov    r8,QWORD PTR [rip+0xee29]        # 0x101a2b0
 100b487:	mov    edx,0x171c00
 100b48c:	mov    rcx,QWORD PTR [rip+0xed1d]        # 0x101a1b0
 100b493:	call   0x10128c0
 100b498:	nop
 100b499:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100b49f:	je     0x100b4c7
 100b4a1:	test   BYTE PTR [rip+0xc58c],0x4        # 0x1017a34
 100b4a8:	je     0x100b4c7
 100b4aa:	mov    rcx,QWORD PTR [rip+0xbc77]        # 0x1017128
 100b4b1:	cmp    rcx,0xffffffffffffffff
 100b4b5:	je     0x100b4c7
 100b4b7:	lea    r9,[rsp+0x30]
 100b4bc:	xor    r8d,r8d
 100b4bf:	xor    edx,edx
 100b4c1:	call   QWORD PTR [rip+0xbcb1]        # 0x1017178
 100b4c7:	xor    eax,eax
 100b4c9:	mov    rcx,QWORD PTR [rbp+0x260]
 100b4d0:	xor    rcx,rsp
 100b4d3:	call   0x1014450
 100b4d8:	mov    rbx,QWORD PTR [rsp+0x3c0]
 100b4e0:	add    rsp,0x370
 100b4e7:	pop    r15
 100b4e9:	pop    r14
 100b4eb:	pop    r13
 100b4ed:	pop    r12
 100b4ef:	pop    rdi
 100b4f0:	pop    rsi
 100b4f1:	pop    rbp
 100b4f2:	ret    
 100b4f3:	nop
 100b4f4:	rex.WB movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100b4f6:	add    BYTE PTR [rax],al
 100b4f8:	cmp    eax,0xc1000097
 100b4fd:	xchg   edi,eax
 100b4fe:	add    BYTE PTR [rax],al
 100b500:	jns    0x100b4a7
 100b502:	add    BYTE PTR [rax],al
 100b504:	mov    DWORD PTR [rax-0x5adb0000],ebx
 100b50a:	add    BYTE PTR [rax],al
 100b50c:	push   rax
 100b50d:	movabs eax,ds:0xa31f000094270000
 100b516:	add    BYTE PTR [rax],al
 100b518:	sbb    BYTE PTR [rdx-0x60480000],ah
 100b51e:	add    BYTE PTR [rax],al
 100b520:	movabs ds:0x560000a05a000093,al
 100b529:	cdq    
 100b52a:	add    BYTE PTR [rax],al
 100b52c:	mov    esi,0x85000094
 100b531:	xchg   ecx,eax
 100b532:	add    BYTE PTR [rax],al
 100b534:	nop
 100b535:	sahf   
 100b536:	add    BYTE PTR [rax],al
 100b538:	(bad)  
 100b539:	lahf   
 100b53a:	add    BYTE PTR [rax],al
 100b53c:	shl    BYTE PTR [rbx-0x6de00000],0x0
 100b543:	add    BYTE PTR [rdi-0x69],bh
 100b546:	add    BYTE PTR [rax],al
 100b548:	(bad)  
 100b549:	(bad)  
 100b54a:	add    BYTE PTR [rax],al
 100b54c:	imul   edx,DWORD PTR [rax+rax*1+0x92e200],0xa26200
 100b557:	add    BYTE PTR [rax-0x56ffff64],ah
 100b55d:	(bad)  
 100b55e:	add    BYTE PTR [rax],al
 100b560:	(bad)  [rcx-0x6a7d0000]
 100b566:	add    BYTE PTR [rax],al
 100b568:	(bad)  
 100b569:	movabs ds:0x1e000000b0840000,al
 100b572:	add    DWORD PTR [rdx],eax
 100b574:	(bad)  
 100b575:	(bad)  
 100b576:	(bad)  
 100b577:	(bad)  
 100b578:	add    eax,DWORD PTR [rsi+rbx*1]
 100b57b:	add    eax,0x71e061e
 100b580:	or     BYTE PTR [rcx],cl
 100b582:	or     cl,BYTE PTR [rbx]
 100b584:	(bad)  
 100b585:	(bad)  
 100b586:	(bad)  
 100b587:	(bad)  
 100b588:	(bad)  
 100b589:	(bad)  
 100b58a:	(bad)  
 100b58b:	(bad)  
 100b58c:	(bad)  
 100b58d:	(bad)  
 100b58e:	or     al,0xd
 100b590:	(bad)  
 100b591:	movups xmm2,XMMWORD PTR [rcx]
 100b594:	(bad)  
 100b595:	adc    dl,BYTE PTR [rbx]
 100b597:	(bad)  
 100b598:	adc    al,0x1e
 100b59a:	adc    eax,0x181e1716
 100b59f:	sbb    DWORD PTR [rsi],ebx
 100b5a1:	sbb    bl,BYTE PTR [rsi]
 100b5a3:	sbb    ebx,DWORD PTR [rbx*1-0x33333334]
 100b5aa:	int3   
 100b5ab:	int3   
 100b5ac:	int3   
 100b5ad:	int3   
 100b5ae:	int3   
 100b5af:	int3   
 100b5b0:	dec    ecx
 100b5b2:	je     0x100b5d3
 100b5b4:	dec    ecx
 100b5b6:	je     0x100b5d0
 100b5b8:	dec    ecx
 100b5ba:	je     0x100b5cd
 100b5bc:	dec    ecx
 100b5be:	je     0x100b5ca
 100b5c0:	dec    ecx
 100b5c2:	je     0x100b5c7
 100b5c4:	mov    al,0x3f
 100b5c6:	ret    
 100b5c7:	mov    al,0x4e
 100b5c9:	ret    
 100b5ca:	mov    al,0x77
 100b5cc:	ret    
 100b5cd:	mov    al,0x66
 100b5cf:	ret    
 100b5d0:	mov    al,0x6e
 100b5d2:	ret    
 100b5d3:	mov    al,0x63
 100b5d5:	ret    
 100b5d6:	int3   
 100b5d7:	int3   
 100b5d8:	int3   
 100b5d9:	int3   
 100b5da:	int3   
 100b5db:	int3   
 100b5dc:	int3   
 100b5dd:	int3   
 100b5de:	int3   
 100b5df:	int3   
 100b5e0:	sub    rsp,0x248
 100b5e7:	mov    rax,QWORD PTR [rip+0xbb22]        # 0x1017110
 100b5ee:	xor    rax,rsp
 100b5f1:	mov    QWORD PTR [rsp+0x230],rax
 100b5f9:	mov    r9,QWORD PTR [rip+0xc448]        # 0x1017a48
 100b600:	mov    rcx,QWORD PTR [rip+0xc409]        # 0x1017a10
 100b607:	test   r9,r9
 100b60a:	jg     0x100b6fa
 100b610:	test   BYTE PTR [rip+0xc41d],0x2        # 0x1017a34
 100b617:	mov    QWORD PTR [rsp+0x240],rbx
 100b61f:	je     0x100b645
 100b621:	mov    rax,QWORD PTR [rip+0xedc8]        # 0x101a3f0
 100b628:	test   rax,rax
 100b62b:	je     0x100b645
 100b62d:	mov    r8,QWORD PTR [rip+0xedbc]        # 0x101a3f0
 100b634:	mov    rcx,QWORD PTR [rip+0xeb75]        # 0x101a1b0
 100b63b:	mov    edx,0x17bc00
 100b640:	call   0x10128c0
 100b645:	mov    rcx,QWORD PTR [rip+0xc3d4]        # 0x1017a20
 100b64c:	lea    r8,[rsp+0x30]
 100b651:	mov    r9d,0x100
 100b657:	mov    edx,0x7
 100b65c:	call   QWORD PTR [rip+0xffffffffffff5d66]        # 0x10013c8
 100b662:	lea    rdx,[rsp+0x30]
 100b667:	lea    rcx,[rsp+0x30]
 100b66c:	call   QWORD PTR [rip+0xffffffffffff5d4e]        # 0x10013c0
 100b672:	mov    rcx,QWORD PTR [rip+0xc44f]        # 0x1017ac8
 100b679:	lea    rdx,[rsp+0x30]
 100b67e:	mov    r8d,0x46
 100b684:	call   QWORD PTR [rip+0xffffffffffff5c1e]        # 0x10012a8
 100b68a:	mov    rcx,QWORD PTR [rip+0xc38f]        # 0x1017a20
 100b691:	mov    rbx,QWORD PTR [rip+0xc430]        # 0x1017ac8
 100b698:	lea    r8,[rsp+0x130]
 100b6a0:	mov    r9d,0x100
 100b6a6:	mov    edx,0x8
 100b6ab:	call   QWORD PTR [rip+0xffffffffffff5d17]        # 0x10013c8
 100b6b1:	lea    rdx,[rsp+0x130]
 100b6b9:	lea    rcx,[rsp+0x130]
 100b6c1:	call   QWORD PTR [rip+0xffffffffffff5cf9]        # 0x10013c0
 100b6c7:	lea    rcx,[rsp+0x130]
 100b6cf:	mov    rdx,rbx
 100b6d2:	call   QWORD PTR [rip+0xffffffffffff5c18]        # 0x10012f0
 100b6d8:	mov    rbx,QWORD PTR [rsp+0x240]
 100b6e0:	xor    al,al
 100b6e2:	mov    rcx,QWORD PTR [rsp+0x230]
 100b6ea:	xor    rcx,rsp
 100b6ed:	call   0x1014450
 100b6f2:	add    rsp,0x248
 100b6f9:	ret    
 100b6fa:	cmp    rcx,0xffffffffffffffff
 100b6fe:	je     0x100b7c4
 100b704:	cmp    r9,rcx
 100b707:	jle    0x100b7c4
 100b70d:	test   BYTE PTR [rip+0xc320],0x2        # 0x1017a34
 100b714:	je     0x100b73f
 100b716:	mov    rax,QWORD PTR [rip+0xec83]        # 0x101a3a0
 100b71d:	test   rax,rax
 100b720:	je     0x100b73f
 100b722:	mov    r8,QWORD PTR [rip+0xec77]        # 0x101a3a0
 100b729:	mov    QWORD PTR [rsp+0x20],rcx
 100b72e:	mov    rcx,QWORD PTR [rip+0xea7b]        # 0x101a1b0
 100b735:	mov    edx,0x180400
 100b73a:	call   0x10128c0
 100b73f:	mov    rcx,QWORD PTR [rip+0xc2da]        # 0x1017a20
 100b746:	lea    r8,[rsp+0x30]
 100b74b:	mov    r9d,0x100
 100b751:	mov    edx,0x9
 100b756:	call   QWORD PTR [rip+0xffffffffffff5c6c]        # 0x10013c8
 100b75c:	lea    rdx,[rsp+0x30]
 100b761:	lea    rcx,[rsp+0x30]
 100b766:	call   QWORD PTR [rip+0xffffffffffff5c54]        # 0x10013c0
 100b76c:	mov    rcx,QWORD PTR [rip+0xc355]        # 0x1017ac8
 100b773:	mov    r9d,0x4c
 100b779:	lea    r8d,[r9-0x6]
 100b77d:	lea    rdx,[rsp+0x30]
 100b782:	call   QWORD PTR [rip+0xffffffffffff5b20]        # 0x10012a8
 100b788:	mov    rcx,QWORD PTR [rip+0xc339]        # 0x1017ac8
 100b78f:	mov    edx,0xa
 100b794:	call   0x10118b0
 100b799:	mov    rcx,QWORD PTR [rip+0xc328]        # 0x1017ac8
 100b7a0:	mov    edx,0xb
 100b7a5:	call   0x10118b0
 100b7aa:	xor    al,al
 100b7ac:	mov    rcx,QWORD PTR [rsp+0x230]
 100b7b4:	xor    rcx,rsp
 100b7b7:	call   0x1014450
 100b7bc:	add    rsp,0x248
 100b7c3:	ret    
 100b7c4:	mov    al,0x1
 100b7c6:	mov    rcx,QWORD PTR [rsp+0x230]
 100b7ce:	xor    rcx,rsp
 100b7d1:	call   0x1014450
 100b7d6:	add    rsp,0x248
 100b7dd:	ret    
 100b7de:	int3   
 100b7df:	int3   
 100b7e0:	int3   
 100b7e1:	int3   
 100b7e2:	int3   
 100b7e3:	int3   
 100b7e4:	int3   
 100b7e5:	int3   
 100b7e6:	int3   
 100b7e7:	int3   
 100b7e8:	int3   
 100b7e9:	int3   
 100b7ea:	int3   
 100b7eb:	int3   
 100b7ec:	int3   
 100b7ed:	int3   
 100b7ee:	int3   
 100b7ef:	int3   
 100b7f0:	sub    rsp,0x248
 100b7f7:	mov    rax,QWORD PTR [rip+0xb912]        # 0x1017110
 100b7fe:	xor    rax,rsp
 100b801:	mov    QWORD PTR [rsp+0x230],rax
 100b809:	mov    rcx,QWORD PTR [rip+0xc200]        # 0x1017a10
 100b810:	mov    r9,QWORD PTR [rip+0xc231]        # 0x1017a48
 100b817:	test   rcx,rcx
 100b81a:	jg     0x100b90d
 100b820:	test   BYTE PTR [rip+0xc20d],0x2        # 0x1017a34
 100b827:	mov    QWORD PTR [rsp+0x240],rbx
 100b82f:	je     0x100b858
 100b831:	mov    rax,QWORD PTR [rip+0xeb18]        # 0x101a350
 100b838:	test   rax,rax
 100b83b:	je     0x100b858
 100b83d:	mov    r8,QWORD PTR [rip+0xeb0c]        # 0x101a350
 100b844:	mov    r9,rcx
 100b847:	mov    rcx,QWORD PTR [rip+0xe962]        # 0x101a1b0
 100b84e:	mov    edx,0x188400
 100b853:	call   0x10128c0
 100b858:	mov    rcx,QWORD PTR [rip+0xc1c1]        # 0x1017a20
 100b85f:	lea    r8,[rsp+0x30]
 100b864:	mov    r9d,0x100
 100b86a:	mov    edx,0xc
 100b86f:	call   QWORD PTR [rip+0xffffffffffff5b53]        # 0x10013c8
 100b875:	lea    rdx,[rsp+0x30]
 100b87a:	lea    rcx,[rsp+0x30]
 100b87f:	call   QWORD PTR [rip+0xffffffffffff5b3b]        # 0x10013c0
 100b885:	mov    rcx,QWORD PTR [rip+0xc23c]        # 0x1017ac8
 100b88c:	lea    rdx,[rsp+0x30]
 100b891:	mov    r8d,0x4c
 100b897:	call   QWORD PTR [rip+0xffffffffffff5a0b]        # 0x10012a8
 100b89d:	mov    rcx,QWORD PTR [rip+0xc17c]        # 0x1017a20
 100b8a4:	mov    rbx,QWORD PTR [rip+0xc21d]        # 0x1017ac8
 100b8ab:	lea    r8,[rsp+0x130]
 100b8b3:	mov    r9d,0x100
 100b8b9:	mov    edx,0xd
 100b8be:	call   QWORD PTR [rip+0xffffffffffff5b04]        # 0x10013c8
 100b8c4:	lea    rdx,[rsp+0x130]
 100b8cc:	lea    rcx,[rsp+0x130]
 100b8d4:	call   QWORD PTR [rip+0xffffffffffff5ae6]        # 0x10013c0
 100b8da:	lea    rcx,[rsp+0x130]
 100b8e2:	mov    rdx,rbx
 100b8e5:	call   QWORD PTR [rip+0xffffffffffff5a05]        # 0x10012f0
 100b8eb:	mov    rbx,QWORD PTR [rsp+0x240]
 100b8f3:	xor    al,al
 100b8f5:	mov    rcx,QWORD PTR [rsp+0x230]
 100b8fd:	xor    rcx,rsp
 100b900:	call   0x1014450
 100b905:	add    rsp,0x248
 100b90c:	ret    
 100b90d:	test   r9,r9
 100b910:	je     0x100b9d6
 100b916:	cmp    r9,rcx
 100b919:	jle    0x100b9d6
 100b91f:	test   BYTE PTR [rip+0xc10e],0x2        # 0x1017a34
 100b926:	je     0x100b951
 100b928:	mov    rax,QWORD PTR [rip+0xeb01]        # 0x101a430
 100b92f:	test   rax,rax
 100b932:	je     0x100b951
 100b934:	mov    r8,QWORD PTR [rip+0xeaf5]        # 0x101a430
 100b93b:	mov    QWORD PTR [rsp+0x20],rcx
 100b940:	mov    rcx,QWORD PTR [rip+0xe869]        # 0x101a1b0
 100b947:	mov    edx,0x18cc00
 100b94c:	call   0x10128c0
 100b951:	mov    rcx,QWORD PTR [rip+0xc0c8]        # 0x1017a20
 100b958:	lea    r8,[rsp+0x30]
 100b95d:	mov    r9d,0x100
 100b963:	mov    edx,0xe
 100b968:	call   QWORD PTR [rip+0xffffffffffff5a5a]        # 0x10013c8
 100b96e:	lea    rdx,[rsp+0x30]
 100b973:	lea    rcx,[rsp+0x30]
 100b978:	call   QWORD PTR [rip+0xffffffffffff5a42]        # 0x10013c0
 100b97e:	mov    rcx,QWORD PTR [rip+0xc143]        # 0x1017ac8
 100b985:	mov    r9d,0x4c
 100b98b:	lea    r8d,[r9-0x6]
 100b98f:	lea    rdx,[rsp+0x30]
 100b994:	call   QWORD PTR [rip+0xffffffffffff590e]        # 0x10012a8
 100b99a:	mov    rcx,QWORD PTR [rip+0xc127]        # 0x1017ac8
 100b9a1:	mov    edx,0xf
 100b9a6:	call   0x10118b0
 100b9ab:	mov    rcx,QWORD PTR [rip+0xc116]        # 0x1017ac8
 100b9b2:	mov    edx,0x10
 100b9b7:	call   0x10118b0
 100b9bc:	xor    al,al
 100b9be:	mov    rcx,QWORD PTR [rsp+0x230]
 100b9c6:	xor    rcx,rsp
 100b9c9:	call   0x1014450
 100b9ce:	add    rsp,0x248
 100b9d5:	ret    
 100b9d6:	mov    al,0x1
 100b9d8:	mov    rcx,QWORD PTR [rsp+0x230]
 100b9e0:	xor    rcx,rsp
 100b9e3:	call   0x1014450
 100b9e8:	add    rsp,0x248
 100b9ef:	ret    
 100b9f0:	int3   
 100b9f1:	int3   
 100b9f2:	int3   
 100b9f3:	int3   
 100b9f4:	int3   
 100b9f5:	int3   
 100b9f6:	int3   
 100b9f7:	int3   
 100b9f8:	int3   
 100b9f9:	int3   
 100b9fa:	int3   
 100b9fb:	int3   
 100b9fc:	int3   
 100b9fd:	int3   
 100b9fe:	int3   
 100b9ff:	int3   
 100ba00:	mov    QWORD PTR [rsp+0x10],rbx
 100ba05:	push   rbp
 100ba06:	lea    rbp,[rsp-0x230]
 100ba0e:	sub    rsp,0x330
 100ba15:	mov    rax,QWORD PTR [rip+0xb6f4]        # 0x1017110
 100ba1c:	xor    rax,rsp
 100ba1f:	mov    QWORD PTR [rbp+0x220],rax
 100ba26:	mov    rbx,rcx
 100ba29:	mov    rcx,QWORD PTR [rip+0xbff0]        # 0x1017a20
 100ba30:	lea    r8,[rbp+0x120]
 100ba37:	mov    r9d,0x100
 100ba3d:	mov    edx,0x11
 100ba42:	call   QWORD PTR [rip+0xffffffffffff5980]        # 0x10013c8
 100ba48:	lea    rdx,[rbp+0x120]
 100ba4f:	lea    rcx,[rbp+0x120]
 100ba56:	call   QWORD PTR [rip+0xffffffffffff5964]        # 0x10013c0
 100ba5c:	mov    rcx,QWORD PTR [rip+0xc065]        # 0x1017ac8
 100ba63:	lea    rdx,[rbp+0x120]
 100ba6a:	mov    r8,rbx
 100ba6d:	call   QWORD PTR [rip+0xffffffffffff5835]        # 0x10012a8
 100ba73:	mov    rcx,QWORD PTR [rip+0xbfa6]        # 0x1017a20
 100ba7a:	mov    rbx,QWORD PTR [rip+0xc047]        # 0x1017ac8
 100ba81:	lea    r8,[rsp+0x20]
 100ba86:	mov    r9d,0x100
 100ba8c:	mov    edx,0x12
 100ba91:	call   QWORD PTR [rip+0xffffffffffff5931]        # 0x10013c8
 100ba97:	lea    rdx,[rsp+0x20]
 100ba9c:	lea    rcx,[rsp+0x20]
 100baa1:	call   QWORD PTR [rip+0xffffffffffff5919]        # 0x10013c0
 100baa7:	lea    rcx,[rsp+0x20]
 100baac:	mov    rdx,rbx
 100baaf:	call   QWORD PTR [rip+0xffffffffffff583b]        # 0x10012f0
 100bab5:	mov    rcx,QWORD PTR [rip+0xbf64]        # 0x1017a20
 100babc:	mov    rbx,QWORD PTR [rip+0xc005]        # 0x1017ac8
 100bac3:	lea    r8,[rbp+0x20]
 100bac7:	mov    r9d,0x100
 100bacd:	mov    edx,0x13
 100bad2:	call   QWORD PTR [rip+0xffffffffffff58f0]        # 0x10013c8
 100bad8:	lea    rdx,[rbp+0x20]
 100badc:	lea    rcx,[rbp+0x20]
 100bae0:	call   QWORD PTR [rip+0xffffffffffff58da]        # 0x10013c0
 100bae6:	lea    rcx,[rbp+0x20]
 100baea:	mov    rdx,rbx
 100baed:	call   QWORD PTR [rip+0xffffffffffff57fd]        # 0x10012f0
 100baf3:	mov    rcx,QWORD PTR [rip+0xbf26]        # 0x1017a20
 100bafa:	mov    rbx,QWORD PTR [rip+0xbfc7]        # 0x1017ac8
 100bb01:	lea    r8,[rsp+0x20]
 100bb06:	mov    r9d,0x100
 100bb0c:	mov    edx,0x14
 100bb11:	call   QWORD PTR [rip+0xffffffffffff58b1]        # 0x10013c8
 100bb17:	lea    rdx,[rsp+0x20]
 100bb1c:	lea    rcx,[rsp+0x20]
 100bb21:	call   QWORD PTR [rip+0xffffffffffff5899]        # 0x10013c0
 100bb27:	lea    rcx,[rsp+0x20]
 100bb2c:	mov    rdx,rbx
 100bb2f:	call   QWORD PTR [rip+0xffffffffffff57bb]        # 0x10012f0
 100bb35:	mov    rcx,QWORD PTR [rip+0xbee4]        # 0x1017a20
 100bb3c:	mov    rbx,QWORD PTR [rip+0xbf85]        # 0x1017ac8
 100bb43:	lea    r8,[rbp+0x20]
 100bb47:	mov    r9d,0x100
 100bb4d:	mov    edx,0x15
 100bb52:	call   QWORD PTR [rip+0xffffffffffff5870]        # 0x10013c8
 100bb58:	lea    rdx,[rbp+0x20]
 100bb5c:	lea    rcx,[rbp+0x20]
 100bb60:	call   QWORD PTR [rip+0xffffffffffff585a]        # 0x10013c0
 100bb66:	lea    rcx,[rbp+0x20]
 100bb6a:	mov    rdx,rbx
 100bb6d:	call   QWORD PTR [rip+0xffffffffffff577d]        # 0x10012f0
 100bb73:	mov    rcx,QWORD PTR [rip+0xbea6]        # 0x1017a20
 100bb7a:	mov    rbx,QWORD PTR [rip+0xbf47]        # 0x1017ac8
 100bb81:	lea    r8,[rsp+0x20]
 100bb86:	mov    r9d,0x100
 100bb8c:	mov    edx,0x17
 100bb91:	call   QWORD PTR [rip+0xffffffffffff5831]        # 0x10013c8
 100bb97:	lea    rdx,[rsp+0x20]
 100bb9c:	lea    rcx,[rsp+0x20]
 100bba1:	call   QWORD PTR [rip+0xffffffffffff5819]        # 0x10013c0
 100bba7:	lea    rcx,[rsp+0x20]
 100bbac:	mov    rdx,rbx
 100bbaf:	call   QWORD PTR [rip+0xffffffffffff573b]        # 0x10012f0
 100bbb5:	mov    rcx,QWORD PTR [rip+0xbe64]        # 0x1017a20
 100bbbc:	mov    rbx,QWORD PTR [rip+0xbf05]        # 0x1017ac8
 100bbc3:	lea    r8,[rbp+0x20]
 100bbc7:	mov    r9d,0x100
 100bbcd:	mov    edx,0x18
 100bbd2:	call   QWORD PTR [rip+0xffffffffffff57f0]        # 0x10013c8
 100bbd8:	lea    rdx,[rbp+0x20]
 100bbdc:	lea    rcx,[rbp+0x20]
 100bbe0:	call   QWORD PTR [rip+0xffffffffffff57da]        # 0x10013c0
 100bbe6:	lea    rcx,[rbp+0x20]
 100bbea:	mov    rdx,rbx
 100bbed:	call   QWORD PTR [rip+0xffffffffffff56fd]        # 0x10012f0
 100bbf3:	mov    rcx,QWORD PTR [rip+0xbe26]        # 0x1017a20
 100bbfa:	mov    rbx,QWORD PTR [rip+0xbec7]        # 0x1017ac8
 100bc01:	lea    r8,[rsp+0x20]
 100bc06:	mov    r9d,0x100
 100bc0c:	mov    edx,0x19
 100bc11:	call   QWORD PTR [rip+0xffffffffffff57b1]        # 0x10013c8
 100bc17:	lea    rdx,[rsp+0x20]
 100bc1c:	lea    rcx,[rsp+0x20]
 100bc21:	call   QWORD PTR [rip+0xffffffffffff5799]        # 0x10013c0
 100bc27:	lea    rcx,[rsp+0x20]
 100bc2c:	mov    rdx,rbx
 100bc2f:	call   QWORD PTR [rip+0xffffffffffff56bb]        # 0x10012f0
 100bc35:	mov    rcx,QWORD PTR [rip+0xbde4]        # 0x1017a20
 100bc3c:	mov    rbx,QWORD PTR [rip+0xbe85]        # 0x1017ac8
 100bc43:	lea    r8,[rbp+0x20]
 100bc47:	mov    r9d,0x100
 100bc4d:	mov    edx,0x1a
 100bc52:	call   QWORD PTR [rip+0xffffffffffff5770]        # 0x10013c8
 100bc58:	lea    rdx,[rbp+0x20]
 100bc5c:	lea    rcx,[rbp+0x20]
 100bc60:	call   QWORD PTR [rip+0xffffffffffff575a]        # 0x10013c0
 100bc66:	lea    rcx,[rbp+0x20]
 100bc6a:	mov    rdx,rbx
 100bc6d:	call   QWORD PTR [rip+0xffffffffffff567d]        # 0x10012f0
 100bc73:	mov    rcx,QWORD PTR [rip+0xbda6]        # 0x1017a20
 100bc7a:	mov    rbx,QWORD PTR [rip+0xbe47]        # 0x1017ac8
 100bc81:	lea    r8,[rsp+0x20]
 100bc86:	mov    r9d,0x100
 100bc8c:	mov    edx,0x39
 100bc91:	call   QWORD PTR [rip+0xffffffffffff5731]        # 0x10013c8
 100bc97:	lea    rdx,[rsp+0x20]
 100bc9c:	lea    rcx,[rsp+0x20]
 100bca1:	call   QWORD PTR [rip+0xffffffffffff5719]        # 0x10013c0
 100bca7:	lea    rcx,[rsp+0x20]
 100bcac:	mov    rdx,rbx
 100bcaf:	call   QWORD PTR [rip+0xffffffffffff563b]        # 0x10012f0
 100bcb5:	mov    rcx,QWORD PTR [rip+0xbd64]        # 0x1017a20
 100bcbc:	mov    rbx,QWORD PTR [rip+0xbe05]        # 0x1017ac8
 100bcc3:	lea    r8,[rbp+0x20]
 100bcc7:	mov    r9d,0x100
 100bccd:	mov    edx,0x3a
 100bcd2:	call   QWORD PTR [rip+0xffffffffffff56f0]        # 0x10013c8
 100bcd8:	lea    rdx,[rbp+0x20]
 100bcdc:	lea    rcx,[rbp+0x20]
 100bce0:	call   QWORD PTR [rip+0xffffffffffff56da]        # 0x10013c0
 100bce6:	lea    rcx,[rbp+0x20]
 100bcea:	mov    rdx,rbx
 100bced:	call   QWORD PTR [rip+0xffffffffffff55fd]        # 0x10012f0
 100bcf3:	mov    rcx,QWORD PTR [rip+0xbd26]        # 0x1017a20
 100bcfa:	mov    rbx,QWORD PTR [rip+0xbdc7]        # 0x1017ac8
 100bd01:	lea    r8,[rsp+0x20]
 100bd06:	mov    r9d,0x100
 100bd0c:	mov    edx,0x4d
 100bd11:	call   QWORD PTR [rip+0xffffffffffff56b1]        # 0x10013c8
 100bd17:	lea    rdx,[rsp+0x20]
 100bd1c:	lea    rcx,[rsp+0x20]
 100bd21:	call   QWORD PTR [rip+0xffffffffffff5699]        # 0x10013c0
 100bd27:	lea    rcx,[rsp+0x20]
 100bd2c:	mov    rdx,rbx
 100bd2f:	call   QWORD PTR [rip+0xffffffffffff55bb]        # 0x10012f0
 100bd35:	mov    rcx,QWORD PTR [rbp+0x220]
 100bd3c:	xor    rcx,rsp
 100bd3f:	call   0x1014450
 100bd44:	mov    rbx,QWORD PTR [rsp+0x348]
 100bd4c:	add    rsp,0x330
 100bd53:	pop    rbp
 100bd54:	ret    
 100bd55:	int3   
 100bd56:	int3   
 100bd57:	int3   
 100bd58:	int3   
 100bd59:	int3   
 100bd5a:	int3   
 100bd5b:	int3   
 100bd5c:	int3   
 100bd5d:	int3   
 100bd5e:	int3   
 100bd5f:	int3   
 100bd60:	mov    QWORD PTR [rsp+0x8],rbx
 100bd65:	push   rdi
 100bd66:	sub    rsp,0x20
 100bd6a:	mov    rdi,QWORD PTR [rip+0xbca7]        # 0x1017a18
 100bd71:	lea    rdx,[rip+0xffffffffffff6170]        # 0x1001ee8
 100bd78:	mov    r8d,0x2
 100bd7e:	mov    rbx,rcx
 100bd81:	call   QWORD PTR [rip+0xffffffffffff5599]        # 0x1001320
 100bd87:	test   eax,eax
 100bd89:	jne    0x100bd97
 100bd8b:	mov    DWORD PTR [rip+0xbc93],0x1        # 0x1017a28
 100bd95:	jmp    0x100be05
 100bd97:	lea    rdx,[rip+0xffffffffffff614e]        # 0x1001eec
 100bd9e:	mov    r8d,0x3
 100bda4:	mov    rcx,rbx
 100bda7:	call   QWORD PTR [rip+0xffffffffffff5573]        # 0x1001320
 100bdad:	test   eax,eax
 100bdaf:	je     0x100bdfb
 100bdb1:	lea    rdx,[rip+0xffffffffffff6138]        # 0x1001ef0
 100bdb8:	mov    r8d,0x6
 100bdbe:	mov    rcx,rbx
 100bdc1:	call   QWORD PTR [rip+0xffffffffffff5559]        # 0x1001320
 100bdc7:	test   eax,eax
 100bdc9:	jne    0x100bdd7
 100bdcb:	mov    DWORD PTR [rip+0xbce7],0x1        # 0x1017abc
 100bdd5:	jmp    0x100bdfb
 100bdd7:	lea    rdx,[rip+0xffffffffffff611a]        # 0x1001ef8
 100bdde:	mov    r8d,0x8
 100bde4:	mov    rcx,rbx
 100bde7:	call   QWORD PTR [rip+0xffffffffffff5533]        # 0x1001320
 100bded:	test   eax,eax
 100bdef:	jne    0x100be42
 100bdf1:	mov    DWORD PTR [rip+0xbc71],0x1        # 0x1017a6c
 100bdfb:	mov    DWORD PTR [rip+0xbc23],0x2        # 0x1017a28
 100be05:	test   BYTE PTR [rip+0xbc28],0x2        # 0x1017a34
 100be0c:	je     0x100be35
 100be0e:	mov    rax,QWORD PTR [rip+0xe5b3]        # 0x101a3c8
 100be15:	test   rax,rax
 100be18:	je     0x100be35
 100be1a:	mov    r8,QWORD PTR [rip+0xe5a7]        # 0x101a3c8
 100be21:	mov    rcx,QWORD PTR [rip+0xe388]        # 0x101a1b0
 100be28:	mov    r9,rbx
 100be2b:	mov    edx,0x1a0c00
 100be30:	call   0x10128c0
 100be35:	mov    al,0x1
 100be37:	mov    rbx,QWORD PTR [rsp+0x30]
 100be3c:	add    rsp,0x20
 100be40:	pop    rdi
 100be41:	ret    
 100be42:	test   BYTE PTR [rip+0xbbeb],0x2        # 0x1017a34
 100be49:	je     0x100be72
 100be4b:	mov    rax,QWORD PTR [rip+0xe5e6]        # 0x101a438
 100be52:	test   rax,rax
 100be55:	je     0x100be72
 100be57:	mov    r8,QWORD PTR [rip+0xe5da]        # 0x101a438
 100be5e:	mov    rcx,QWORD PTR [rip+0xe34b]        # 0x101a1b0
 100be65:	mov    r9,rbx
 100be68:	mov    edx,0x19f400
 100be6d:	call   0x10128c0
 100be72:	mov    rcx,QWORD PTR [rip+0xbc4f]        # 0x1017ac8
 100be79:	mov    edx,0x1b
 100be7e:	call   0x10118b0
 100be83:	mov    rcx,rdi
 100be86:	call   0x100ba00
 100be8b:	mov    rbx,QWORD PTR [rsp+0x30]
 100be90:	xor    al,al
 100be92:	add    rsp,0x20
 100be96:	pop    rdi
 100be97:	ret    
 100be98:	int3   
 100be99:	int3   
 100be9a:	int3   
 100be9b:	int3   
 100be9c:	int3   
 100be9d:	int3   
 100be9e:	int3   
 100be9f:	int3   
 100bea0:	mov    QWORD PTR [rsp+0x18],rbx
 100bea5:	push   rdi
 100bea6:	sub    rsp,0x140
 100bead:	mov    rax,QWORD PTR [rip+0xb25c]        # 0x1017110
 100beb4:	xor    rax,rsp
 100beb7:	mov    QWORD PTR [rsp+0x130],rax
 100bebf:	test   BYTE PTR [rip+0xbb6e],0x2        # 0x1017a34
 100bec6:	mov    rdi,rdx
 100bec9:	movzx  ebx,cl
 100becc:	je     0x100befb
 100bece:	mov    rax,QWORD PTR [rip+0xe473]        # 0x101a348
 100bed5:	test   rax,rax
 100bed8:	je     0x100befb
 100beda:	mov    r8,QWORD PTR [rip+0xe467]        # 0x101a348
 100bee1:	movsx  r9d,cl
 100bee5:	mov    rcx,QWORD PTR [rip+0xe2c4]        # 0x101a1b0
 100beec:	mov    QWORD PTR [rsp+0x20],rdx
 100bef1:	mov    edx,0x1a3c00
 100bef6:	call   0x10128c0
 100befb:	mov    rcx,QWORD PTR [rip+0xbb1e]        # 0x1017a20
 100bf02:	lea    r8,[rsp+0x30]
 100bf07:	mov    r9d,0x100
 100bf0d:	mov    edx,0x1c
 100bf12:	call   QWORD PTR [rip+0xffffffffffff54b0]        # 0x10013c8
 100bf18:	lea    rdx,[rsp+0x30]
 100bf1d:	lea    rcx,[rsp+0x30]
 100bf22:	call   QWORD PTR [rip+0xffffffffffff5498]        # 0x10013c0
 100bf28:	mov    rcx,QWORD PTR [rip+0xbb99]        # 0x1017ac8
 100bf2f:	lea    rdx,[rsp+0x30]
 100bf34:	movsx  r8d,bl
 100bf38:	call   QWORD PTR [rip+0xffffffffffff536a]        # 0x10012a8
 100bf3e:	mov    rcx,QWORD PTR [rip+0xbadb]        # 0x1017a20
 100bf45:	lea    r8,[rsp+0x30]
 100bf4a:	mov    r9d,0x100
 100bf50:	mov    edx,0x1d
 100bf55:	call   QWORD PTR [rip+0xffffffffffff546d]        # 0x10013c8
 100bf5b:	lea    rdx,[rsp+0x30]
 100bf60:	lea    rcx,[rsp+0x30]
 100bf65:	call   QWORD PTR [rip+0xffffffffffff5455]        # 0x10013c0
 100bf6b:	mov    rcx,QWORD PTR [rip+0xbb56]        # 0x1017ac8
 100bf72:	lea    rdx,[rsp+0x30]
 100bf77:	mov    r8,rdi
 100bf7a:	call   QWORD PTR [rip+0xffffffffffff5328]        # 0x10012a8
 100bf80:	mov    rcx,QWORD PTR [rsp+0x130]
 100bf88:	xor    rcx,rsp
 100bf8b:	call   0x1014450
 100bf90:	mov    rbx,QWORD PTR [rsp+0x160]
 100bf98:	add    rsp,0x140
 100bf9f:	pop    rdi
 100bfa0:	ret    
 100bfa1:	int3   
 100bfa2:	int3   
 100bfa3:	int3   
 100bfa4:	int3   
 100bfa5:	int3   
 100bfa6:	int3   
 100bfa7:	int3   
 100bfa8:	int3   
 100bfa9:	int3   
 100bfaa:	int3   
 100bfab:	int3   
 100bfac:	int3   
 100bfad:	int3   
 100bfae:	int3   
 100bfaf:	int3   
 100bfb0:	mov    QWORD PTR [rsp+0x8],rbx
 100bfb5:	mov    QWORD PTR [rsp+0x18],rsi
 100bfba:	push   rdi
 100bfbb:	sub    rsp,0x20
 100bfbf:	mov    rdi,rdx
 100bfc2:	mov    rbx,r8
 100bfc5:	movzx  esi,cl
 100bfc8:	lea    rdx,[rsp+0x38]
 100bfcd:	mov    r8d,0xa
 100bfd3:	mov    rcx,rdi
 100bfd6:	call   QWORD PTR [rip+0xffffffffffff52e4]        # 0x10012c0
 100bfdc:	mov    r11d,eax
 100bfdf:	mov    DWORD PTR [rbx],eax
 100bfe1:	test   rdi,rdi
 100bfe4:	je     0x100c022
 100bfe6:	mov    r9d,0xc
 100bfec:	mov    rdx,rdi
 100bfef:	xor    ecx,ecx
 100bff1:	mov    r8d,r9d
 100bff4:	cmp    BYTE PTR [rdx],cl
 100bff6:	je     0x100c00a
 100bff8:	inc    rdx
 100bffb:	dec    r8
 100bffe:	jne    0x100bff4
 100c000:	mov    ecx,0x80070057
 100c005:	xor    r9d,r9d
 100c008:	jmp    0x100c01c
 100c00a:	test   r8,r8
 100c00d:	jne    0x100c019
 100c00f:	mov    ecx,0x80070057
 100c014:	xor    r9d,r9d
 100c017:	jmp    0x100c01c
 100c019:	sub    r9,r8
 100c01c:	test   ecx,ecx
 100c01e:	jns    0x100c02e
 100c020:	jmp    0x100c027
 100c022:	mov    ecx,0x80070057
 100c027:	xor    r9d,r9d
 100c02a:	test   ecx,ecx
 100c02c:	js     0x100c052
 100c02e:	mov    rax,QWORD PTR [rsp+0x38]
 100c033:	sub    rax,rdi
 100c036:	cmp    rax,r9
 100c039:	jne    0x100c052
 100c03b:	test   r11d,r11d
 100c03e:	js     0x100c052
 100c040:	mov    al,0x1
 100c042:	mov    rbx,QWORD PTR [rsp+0x30]
 100c047:	mov    rsi,QWORD PTR [rsp+0x40]
 100c04c:	add    rsp,0x20
 100c050:	pop    rdi
 100c051:	ret    
 100c052:	mov    rdx,rdi
 100c055:	movzx  ecx,sil
 100c059:	call   0x100bea0
 100c05e:	mov    rbx,QWORD PTR [rsp+0x30]
 100c063:	mov    rsi,QWORD PTR [rsp+0x40]
 100c068:	xor    al,al
 100c06a:	add    rsp,0x20
 100c06e:	pop    rdi
 100c06f:	ret    
 100c070:	int3   
 100c071:	int3   
 100c072:	int3   
 100c073:	int3   
 100c074:	int3   
 100c075:	int3   
 100c076:	int3   
 100c077:	int3   
 100c078:	int3   
 100c079:	int3   
 100c07a:	int3   
 100c07b:	int3   
 100c07c:	int3   
 100c07d:	int3   
 100c07e:	int3   
 100c07f:	int3   
 100c080:	mov    QWORD PTR [rsp+0x8],rbx
 100c085:	mov    QWORD PTR [rsp+0x18],rsi
 100c08a:	push   rdi
 100c08b:	sub    rsp,0x20
 100c08f:	mov    rdi,rdx
 100c092:	mov    rbx,r8
 100c095:	movzx  esi,cl
 100c098:	lea    rdx,[rsp+0x38]
 100c09d:	mov    r8d,0xa
 100c0a3:	mov    rcx,rdi
 100c0a6:	call   QWORD PTR [rip+0xffffffffffff524c]        # 0x10012f8
 100c0ac:	mov    r11,rax
 100c0af:	mov    QWORD PTR [rbx],rax
 100c0b2:	test   rdi,rdi
 100c0b5:	je     0x100c0f3
 100c0b7:	mov    r9d,0x14
 100c0bd:	mov    rdx,rdi
 100c0c0:	xor    ecx,ecx
 100c0c2:	mov    r8d,r9d
 100c0c5:	cmp    BYTE PTR [rdx],cl
 100c0c7:	je     0x100c0db
 100c0c9:	inc    rdx
 100c0cc:	dec    r8
 100c0cf:	jne    0x100c0c5
 100c0d1:	mov    ecx,0x80070057
 100c0d6:	xor    r9d,r9d
 100c0d9:	jmp    0x100c0ed
 100c0db:	test   r8,r8
 100c0de:	jne    0x100c0ea
 100c0e0:	mov    ecx,0x80070057
 100c0e5:	xor    r9d,r9d
 100c0e8:	jmp    0x100c0ed
 100c0ea:	sub    r9,r8
 100c0ed:	test   ecx,ecx
 100c0ef:	jns    0x100c0ff
 100c0f1:	jmp    0x100c0f8
 100c0f3:	mov    ecx,0x80070057
 100c0f8:	xor    r9d,r9d
 100c0fb:	test   ecx,ecx
 100c0fd:	js     0x100c132
 100c0ff:	mov    rax,QWORD PTR [rsp+0x38]
 100c104:	sub    rax,rdi
 100c107:	cmp    rax,r9
 100c10a:	jne    0x100c132
 100c10c:	test   r11,r11
 100c10f:	jle    0x100c132
 100c111:	movabs rax,0x7fffffffffffffff
 100c11b:	cmp    r11,rax
 100c11e:	je     0x100c132
 100c120:	mov    al,0x1
 100c122:	mov    rbx,QWORD PTR [rsp+0x30]
 100c127:	mov    rsi,QWORD PTR [rsp+0x40]
 100c12c:	add    rsp,0x20
 100c130:	pop    rdi
 100c131:	ret    
 100c132:	mov    rdx,rdi
 100c135:	movzx  ecx,sil
 100c139:	call   0x100bea0
 100c13e:	mov    rbx,QWORD PTR [rsp+0x30]
 100c143:	mov    rsi,QWORD PTR [rsp+0x40]
 100c148:	xor    al,al
 100c14a:	add    rsp,0x20
 100c14e:	pop    rdi
 100c14f:	ret    
 100c150:	int3   
 100c151:	int3   
 100c152:	int3   
 100c153:	int3   
 100c154:	int3   
 100c155:	int3   
 100c156:	int3   
 100c157:	int3   
 100c158:	int3   
 100c159:	int3   
 100c15a:	int3   
 100c15b:	int3   
 100c15c:	int3   
 100c15d:	int3   
 100c15e:	int3   
 100c15f:	int3   
 100c160:	rex push rbx
 100c162:	sub    rsp,0x230
 100c169:	mov    rax,QWORD PTR [rip+0xafa0]        # 0x1017110
 100c170:	xor    rax,rsp
 100c173:	mov    QWORD PTR [rsp+0x220],rax
 100c17b:	test   BYTE PTR [rip+0xb8b2],0x2        # 0x1017a34
 100c182:	movzx  ebx,cl
 100c185:	je     0x100c1af
 100c187:	mov    rax,QWORD PTR [rip+0xe1a2]        # 0x101a330
 100c18e:	test   rax,rax
 100c191:	je     0x100c1af
 100c193:	mov    r8,QWORD PTR [rip+0xe196]        # 0x101a330
 100c19a:	movsx  r9d,cl
 100c19e:	mov    rcx,QWORD PTR [rip+0xe00b]        # 0x101a1b0
 100c1a5:	mov    edx,0x1b7400
 100c1aa:	call   0x10128c0
 100c1af:	mov    rcx,QWORD PTR [rip+0xb86a]        # 0x1017a20
 100c1b6:	lea    r8,[rsp+0x20]
 100c1bb:	mov    r9d,0x100
 100c1c1:	mov    edx,0x1e
 100c1c6:	call   QWORD PTR [rip+0xffffffffffff51fc]        # 0x10013c8
 100c1cc:	lea    rdx,[rsp+0x20]
 100c1d1:	lea    rcx,[rsp+0x20]
 100c1d6:	call   QWORD PTR [rip+0xffffffffffff51e4]        # 0x10013c0
 100c1dc:	mov    rcx,QWORD PTR [rip+0xb8e5]        # 0x1017ac8
 100c1e3:	lea    rdx,[rsp+0x20]
 100c1e8:	movsx  r8d,bl
 100c1ec:	call   QWORD PTR [rip+0xffffffffffff50b6]        # 0x10012a8
 100c1f2:	mov    rcx,QWORD PTR [rip+0xb827]        # 0x1017a20
 100c1f9:	mov    rbx,QWORD PTR [rip+0xb8c8]        # 0x1017ac8
 100c200:	lea    r8,[rsp+0x120]
 100c208:	mov    r9d,0x100
 100c20e:	mov    edx,0x1f
 100c213:	call   QWORD PTR [rip+0xffffffffffff51af]        # 0x10013c8
 100c219:	lea    rdx,[rsp+0x120]
 100c221:	lea    rcx,[rsp+0x120]
 100c229:	call   QWORD PTR [rip+0xffffffffffff5191]        # 0x10013c0
 100c22f:	lea    rcx,[rsp+0x120]
 100c237:	mov    rdx,rbx
 100c23a:	call   QWORD PTR [rip+0xffffffffffff50b0]        # 0x10012f0
 100c240:	mov    rcx,QWORD PTR [rsp+0x220]
 100c248:	xor    rcx,rsp
 100c24b:	call   0x1014450
 100c250:	add    rsp,0x230
 100c257:	pop    rbx
 100c258:	ret    
 100c259:	int3   
 100c25a:	int3   
 100c25b:	int3   
 100c25c:	int3   
 100c25d:	int3   
 100c25e:	int3   
 100c25f:	int3   
 100c260:	mov    QWORD PTR [rsp+0x10],rbx
 100c265:	push   rdi
 100c266:	sub    rsp,0x140
 100c26d:	mov    rax,QWORD PTR [rip+0xae9c]        # 0x1017110
 100c274:	xor    rax,rsp
 100c277:	mov    QWORD PTR [rsp+0x130],rax
 100c27f:	test   BYTE PTR [rip+0xb7ae],0x2        # 0x1017a34
 100c286:	mov    edi,DWORD PTR [rip+0xb7a0]        # 0x1017a2c
 100c28c:	mov    ebx,ecx
 100c28e:	je     0x100c2cd
 100c290:	mov    rax,QWORD PTR [rip+0xe189]        # 0x101a420
 100c297:	test   rax,rax
 100c29a:	je     0x100c2cd
 100c29c:	mov    ecx,edi
 100c29e:	call   0x100b5b0
 100c2a3:	mov    ecx,ebx
 100c2a5:	movsx  edx,al
 100c2a8:	call   0x100b5b0
 100c2ad:	mov    r8,QWORD PTR [rip+0xe16c]        # 0x101a420
 100c2b4:	mov    rcx,QWORD PTR [rip+0xdef5]        # 0x101a1b0
 100c2bb:	mov    DWORD PTR [rsp+0x20],edx
 100c2bf:	movsx  r9d,al
 100c2c3:	mov    edx,0x1bb400
 100c2c8:	call   0x10128c0
 100c2cd:	mov    rcx,QWORD PTR [rip+0xb74c]        # 0x1017a20
 100c2d4:	lea    r8,[rsp+0x30]
 100c2d9:	mov    r9d,0x100
 100c2df:	mov    edx,0x20
 100c2e4:	call   QWORD PTR [rip+0xffffffffffff50de]        # 0x10013c8
 100c2ea:	lea    rdx,[rsp+0x30]
 100c2ef:	lea    rcx,[rsp+0x30]
 100c2f4:	call   QWORD PTR [rip+0xffffffffffff50c6]        # 0x10013c0
 100c2fa:	dec    edi
 100c2fc:	je     0x100c322
 100c2fe:	dec    edi
 100c300:	je     0x100c31e
 100c302:	dec    edi
 100c304:	je     0x100c31a
 100c306:	dec    edi
 100c308:	je     0x100c316
 100c30a:	dec    edi
 100c30c:	je     0x100c312
 100c30e:	mov    cl,0x3f
 100c310:	jmp    0x100c324
 100c312:	mov    cl,0x4e
 100c314:	jmp    0x100c324
 100c316:	mov    cl,0x77
 100c318:	jmp    0x100c324
 100c31a:	mov    cl,0x66
 100c31c:	jmp    0x100c324
 100c31e:	mov    cl,0x6e
 100c320:	jmp    0x100c324
 100c322:	mov    cl,0x63
 100c324:	dec    ebx
 100c326:	je     0x100c34c
 100c328:	dec    ebx
 100c32a:	je     0x100c348
 100c32c:	dec    ebx
 100c32e:	je     0x100c344
 100c330:	dec    ebx
 100c332:	je     0x100c340
 100c334:	dec    ebx
 100c336:	je     0x100c33c
 100c338:	mov    al,0x3f
 100c33a:	jmp    0x100c34e
 100c33c:	mov    al,0x4e
 100c33e:	jmp    0x100c34e
 100c340:	mov    al,0x77
 100c342:	jmp    0x100c34e
 100c344:	mov    al,0x66
 100c346:	jmp    0x100c34e
 100c348:	mov    al,0x6e
 100c34a:	jmp    0x100c34e
 100c34c:	mov    al,0x63
 100c34e:	movsx  r9d,cl
 100c352:	mov    rcx,QWORD PTR [rip+0xb76f]        # 0x1017ac8
 100c359:	lea    rdx,[rsp+0x30]
 100c35e:	movsx  r8d,al
 100c362:	call   QWORD PTR [rip+0xffffffffffff4f40]        # 0x10012a8
 100c368:	mov    rcx,QWORD PTR [rsp+0x130]
 100c370:	xor    rcx,rsp
 100c373:	call   0x1014450
 100c378:	mov    rbx,QWORD PTR [rsp+0x158]
 100c380:	add    rsp,0x140
 100c387:	pop    rdi
 100c388:	ret    
 100c389:	int3   
 100c38a:	int3   
 100c38b:	int3   
 100c38c:	int3   
 100c38d:	int3   
 100c38e:	int3   
 100c38f:	int3   
 100c390:	sub    rsp,0x148
 100c397:	mov    rax,QWORD PTR [rip+0xad72]        # 0x1017110
 100c39e:	xor    rax,rsp
 100c3a1:	mov    QWORD PTR [rsp+0x130],rax
 100c3a9:	test   BYTE PTR [rip+0xb684],0x2        # 0x1017a34
 100c3b0:	je     0x100c3f2
 100c3b2:	mov    rax,QWORD PTR [rip+0xdeef]        # 0x101a2a8
 100c3b9:	test   rax,rax
 100c3bc:	je     0x100c3f2
 100c3be:	cmp    QWORD PTR [rip+0xad62],0xffffffffffffffff        # 0x1017128
 100c3c6:	je     0x100c3f2
 100c3c8:	mov    r9,QWORD PTR [rip+0xded9]        # 0x101a2a8
 100c3cf:	mov    rdx,QWORD PTR [rip+0xddda]        # 0x101a1b0
 100c3d6:	mov    rcx,QWORD PTR [rip+0xad4b]        # 0x1017128
 100c3dd:	mov    r8d,0x1bf000
 100c3e3:	mov    QWORD PTR [rsp+0x20],0x0
 100c3ec:	call   QWORD PTR [rip+0xad66]        # 0x1017158
 100c3f2:	mov    rcx,QWORD PTR [rip+0xb627]        # 0x1017a20
 100c3f9:	lea    r8,[rsp+0x30]
 100c3fe:	mov    r9d,0x100
 100c404:	mov    edx,0x4a
 100c409:	call   QWORD PTR [rip+0xffffffffffff4fb9]        # 0x10013c8
 100c40f:	lea    rdx,[rsp+0x30]
 100c414:	lea    rcx,[rsp+0x30]
 100c419:	call   QWORD PTR [rip+0xffffffffffff4fa1]        # 0x10013c0
 100c41f:	mov    rdx,QWORD PTR [rip+0xb6a2]        # 0x1017ac8
 100c426:	lea    rcx,[rsp+0x30]
 100c42b:	call   QWORD PTR [rip+0xffffffffffff4ebf]        # 0x10012f0
 100c431:	mov    rcx,QWORD PTR [rsp+0x130]
 100c439:	xor    rcx,rsp
 100c43c:	call   0x1014450
 100c441:	add    rsp,0x148
 100c448:	ret    
 100c449:	int3   
 100c44a:	int3   
 100c44b:	int3   
 100c44c:	int3   
 100c44d:	int3   
 100c44e:	int3   
 100c44f:	int3   
 100c450:	rex push rbx
 100c452:	sub    rsp,0x160
 100c459:	mov    rax,QWORD PTR [rip+0xacb0]        # 0x1017110
 100c460:	xor    rax,rsp
 100c463:	mov    QWORD PTR [rsp+0x150],rax
 100c46b:	test   BYTE PTR [rip+0xb5c2],0x2        # 0x1017a34
 100c472:	je     0x100c4b4
 100c474:	mov    rax,QWORD PTR [rip+0xde45]        # 0x101a2c0
 100c47b:	test   rax,rax
 100c47e:	je     0x100c4b4
 100c480:	cmp    QWORD PTR [rip+0xaca0],0xffffffffffffffff        # 0x1017128
 100c488:	je     0x100c4b4
 100c48a:	mov    r9,QWORD PTR [rip+0xde2f]        # 0x101a2c0
 100c491:	mov    rdx,QWORD PTR [rip+0xdd18]        # 0x101a1b0
 100c498:	mov    rcx,QWORD PTR [rip+0xac89]        # 0x1017128
 100c49f:	mov    r8d,0x1c4000
 100c4a5:	mov    QWORD PTR [rsp+0x20],0x0
 100c4ae:	call   QWORD PTR [rip+0xaca4]        # 0x1017158
 100c4b4:	call   QWORD PTR [rip+0xffffffffffff4e2e]        # 0x10012e8
 100c4ba:	mov    rcx,QWORD PTR [rip+0xb55f]        # 0x1017a20
 100c4c1:	lea    r8,[rsp+0x50]
 100c4c6:	mov    r9d,0x100
 100c4cc:	mov    edx,0x21
 100c4d1:	mov    rbx,rax
 100c4d4:	call   QWORD PTR [rip+0xffffffffffff4eee]        # 0x10013c8
 100c4da:	lea    rdx,[rsp+0x50]
 100c4df:	lea    rcx,[rsp+0x50]
 100c4e4:	call   QWORD PTR [rip+0xffffffffffff4ed6]        # 0x10013c0
 100c4ea:	lea    rdx,[rbx+0x30]
 100c4ee:	lea    rcx,[rsp+0x50]
 100c4f3:	call   QWORD PTR [rip+0xffffffffffff4df7]        # 0x10012f0
 100c4f9:	mov    ecx,0xfffffff6
 100c4fe:	call   QWORD PTR [rip+0xffffffffffff4b44]        # 0x1001048
 100c504:	lea    rdx,[rsp+0x30]
 100c509:	mov    rcx,rax
 100c50c:	mov    rbx,rax
 100c50f:	call   QWORD PTR [rip+0xffffffffffff4b13]        # 0x1001028
 100c515:	mov    edx,0x3
 100c51a:	mov    rcx,rbx
 100c51d:	call   QWORD PTR [rip+0xffffffffffff4b0d]        # 0x1001030
 100c523:	mov    r9d,0x82
 100c529:	lea    r8,[rip+0xffffffffffff5ba4]        # 0x10020d4
 100c530:	lea    edx,[r9-0x72]
 100c534:	lea    rcx,[rsp+0x38]
 100c539:	call   0x1008a80
 100c53e:	lea    rdx,[rip+0xb7db]        # 0x1017d20
 100c545:	lea    rcx,[rsp+0x38]
 100c54a:	mov    r8d,0x82
 100c550:	call   QWORD PTR [rip+0xffffffffffff4d72]        # 0x10012c8
 100c556:	mov    edx,DWORD PTR [rsp+0x30]
 100c55a:	mov    rcx,rbx
 100c55d:	cmp    eax,0x1
 100c560:	je     0x100c57e
 100c562:	call   QWORD PTR [rip+0xffffffffffff4ac8]        # 0x1001030
 100c568:	lea    rcx,[rip+0xffffffffffff5b6d]        # 0x10020dc
 100c56f:	call   QWORD PTR [rip+0xffffffffffff4d43]        # 0x10012b8
 100c575:	lea    rax,[rip+0xffffffffffff4f24]        # 0x10014a0
 100c57c:	jmp    0x100c598
 100c57e:	call   QWORD PTR [rip+0xffffffffffff4aac]        # 0x1001030
 100c584:	lea    rcx,[rip+0xffffffffffff5b51]        # 0x10020dc
 100c58b:	call   QWORD PTR [rip+0xffffffffffff4d27]        # 0x10012b8
 100c591:	lea    rax,[rip+0xb788]        # 0x1017d20
 100c598:	mov    rcx,QWORD PTR [rsp+0x150]
 100c5a0:	xor    rcx,rsp
 100c5a3:	call   0x1014450
 100c5a8:	add    rsp,0x160
 100c5af:	pop    rbx
 100c5b0:	ret    
 100c5b1:	int3   
 100c5b2:	int3   
 100c5b3:	int3   
 100c5b4:	int3   
 100c5b5:	int3   
 100c5b6:	int3   
 100c5b7:	int3   
 100c5b8:	int3   
 100c5b9:	int3   
 100c5ba:	int3   
 100c5bb:	int3   
 100c5bc:	int3   
 100c5bd:	int3   
 100c5be:	int3   
 100c5bf:	int3   
 100c5c0:	mov    QWORD PTR [rsp+0x8],rbx
 100c5c5:	xor    ebx,ebx
 100c5c7:	lea    rax,[rdx+0x1]
 100c5cb:	mov    r10,rcx
 100c5ce:	shr    rax,1
 100c5d1:	mov    r11,rdx
 100c5d4:	mov    ecx,ebx
 100c5d6:	cmp    rax,r9
 100c5d9:	jbe    0x100c5e4
 100c5db:	or     eax,0xffffffff
 100c5de:	mov    rbx,QWORD PTR [rsp+0x8]
 100c5e3:	ret    
 100c5e4:	test   dl,0x1
 100c5e7:	je     0x100c614
 100c5e9:	movzx  ecx,BYTE PTR [r10]
 100c5ed:	lea    eax,[rcx-0x30]
 100c5f0:	cmp    al,0x9
 100c5f2:	ja     0x100c5f9
 100c5f4:	and    cl,0x30
 100c5f7:	jmp    0x100c606
 100c5f9:	or     cl,0x20
 100c5fc:	lea    eax,[rcx-0x61]
 100c5ff:	cmp    al,0x5
 100c601:	ja     0x100c5db
 100c603:	sub    cl,0x57
 100c606:	mov    BYTE PTR [r8],cl
 100c609:	inc    r10
 100c60c:	dec    r11
 100c60f:	mov    ecx,0x1
 100c614:	test   r11,r11
 100c617:	je     0x100c679
 100c619:	lea    rdx,[rcx+r8*1]
 100c61d:	neg    r8
 100c620:	lea    rax,[r8+rdx*1]
 100c624:	cmp    rax,r9
 100c627:	jae    0x100c679
 100c629:	mov    BYTE PTR [rdx],bl
 100c62b:	movzx  eax,BYTE PTR [r10]
 100c62f:	lea    ecx,[rax-0x30]
 100c632:	cmp    cl,0x9
 100c635:	jbe    0x100c643
 100c637:	or     al,0x20
 100c639:	lea    ecx,[rax-0x61]
 100c63c:	cmp    cl,0x5
 100c63f:	ja     0x100c5db
 100c641:	sub    al,0x7
 100c643:	shl    al,0x4
 100c646:	mov    BYTE PTR [rdx],al
 100c648:	movzx  ecx,BYTE PTR [r10+0x1]
 100c64d:	lea    eax,[rcx-0x30]
 100c650:	cmp    al,0x9
 100c652:	ja     0x100c659
 100c654:	sub    cl,0x30
 100c657:	jmp    0x100c66a
 100c659:	or     cl,0x20
 100c65c:	lea    eax,[rcx-0x61]
 100c65f:	cmp    al,0x5
 100c661:	ja     0x100c5db
 100c667:	sub    cl,0x57
 100c66a:	or     BYTE PTR [rdx],cl
 100c66c:	inc    rdx
 100c66f:	add    r10,0x2
 100c673:	sub    r11,0x2
 100c677:	jne    0x100c620
 100c679:	movzx  eax,bx
 100c67c:	mov    rbx,QWORD PTR [rsp+0x8]
 100c681:	ret    
 100c682:	int3   
 100c683:	int3   
 100c684:	int3   
 100c685:	int3   
 100c686:	int3   
 100c687:	int3   
 100c688:	int3   
 100c689:	int3   
 100c68a:	int3   
 100c68b:	int3   
 100c68c:	int3   
 100c68d:	int3   
 100c68e:	int3   
 100c68f:	int3   
 100c690:	sub    rsp,0x48
 100c694:	test   rcx,rcx
 100c697:	je     0x100c713
 100c699:	cmp    BYTE PTR [rcx],0x0
 100c69c:	je     0x100c713
 100c69e:	mov    QWORD PTR [rsp+0x30],0x0
 100c6a7:	xor    r9d,r9d
 100c6aa:	xor    r8d,r8d
 100c6ad:	mov    edx,0x80
 100c6b2:	mov    DWORD PTR [rsp+0x28],0x100000
 100c6ba:	mov    QWORD PTR [rsp+0x40],rbx
 100c6bf:	mov    DWORD PTR [rsp+0x20],0x3
 100c6c7:	call   QWORD PTR [rip+0xffffffffffff4953]        # 0x1001020
 100c6cd:	mov    rbx,rax
 100c6d0:	cmp    rax,0xffffffffffffffff
 100c6d4:	je     0x100c707
 100c6d6:	test   rax,rax
 100c6d9:	je     0x100c707
 100c6db:	mov    rcx,rax
 100c6de:	call   QWORD PTR [rip+0xffffffffffff4974]        # 0x1001058
 100c6e4:	mov    rcx,rbx
 100c6e7:	cmp    eax,0x3
 100c6ea:	jne    0x100c701
 100c6ec:	call   QWORD PTR [rip+0xffffffffffff496e]        # 0x1001060
 100c6f2:	mov    rbx,QWORD PTR [rsp+0x40]
 100c6f7:	mov    eax,0x1
 100c6fc:	add    rsp,0x48
 100c700:	ret    
 100c701:	call   QWORD PTR [rip+0xffffffffffff4959]        # 0x1001060
 100c707:	xor    eax,eax
 100c709:	mov    rbx,QWORD PTR [rsp+0x40]
 100c70e:	add    rsp,0x48
 100c712:	ret    
 100c713:	xor    eax,eax
 100c715:	add    rsp,0x48
 100c719:	ret    
 100c71a:	int3   
 100c71b:	int3   
 100c71c:	int3   
 100c71d:	int3   
 100c71e:	int3   
 100c71f:	int3   
 100c720:	mov    QWORD PTR [rsp+0x8],rbx
 100c725:	mov    QWORD PTR [rsp+0x10],rsi
 100c72a:	push   rdi
 100c72b:	sub    rsp,0x20
 100c72f:	xor    esi,esi
 100c731:	mov    r11,rcx
 100c734:	mov    r10d,esi
 100c737:	mov    ebx,esi
 100c739:	test   rcx,rcx
 100c73c:	je     0x100c830
 100c742:	test   rdx,rdx
 100c745:	je     0x100c830
 100c74b:	mov    eax,0x5b
 100c750:	mov    ebx,0x1
 100c755:	lea    edi,[rsi+0x5d]
 100c758:	mov    WORD PTR [r8],ax
 100c75c:	lea    rcx,[r9-0x2]
 100c760:	cmp    rbx,rcx
 100c763:	jae    0x100c78f
 100c765:	movzx  eax,WORD PTR [r11+r10*2]
 100c76a:	inc    rbx
 100c76d:	mov    WORD PTR [r8+rbx*2-0x2],ax
 100c773:	cmp    WORD PTR [r11+r10*2],di
 100c778:	jne    0x100c787
 100c77a:	cmp    rbx,rcx
 100c77d:	jae    0x100c7e0
 100c77f:	mov    WORD PTR [r8+rbx*2],di
 100c784:	inc    rbx
 100c787:	inc    r10
 100c78a:	cmp    r10,rdx
 100c78d:	jb     0x100c760
 100c78f:	cmp    r10,rdx
 100c792:	je     0x100c828
 100c798:	test   BYTE PTR [rip+0xb295],0x2        # 0x1017a34
 100c79f:	je     0x100c816
 100c7a1:	mov    rax,QWORD PTR [rip+0xe1e0]        # 0x101a988
 100c7a8:	test   rax,rax
 100c7ab:	je     0x100c816
 100c7ad:	call   QWORD PTR [rip+0xffffffffffff489d]        # 0x1001050
 100c7b3:	mov    r8,QWORD PTR [rip+0xe1ce]        # 0x101a988
 100c7ba:	mov    rcx,QWORD PTR [rip+0xda07]        # 0x101a1c8
 100c7c1:	mov    r9d,eax
 100c7c4:	mov    edx,0x50400
 100c7c9:	call   0x1012910
 100c7ce:	xor    eax,eax
 100c7d0:	mov    rbx,QWORD PTR [rsp+0x30]
 100c7d5:	mov    rsi,QWORD PTR [rsp+0x38]
 100c7da:	add    rsp,0x20
 100c7de:	pop    rdi
 100c7df:	ret    
 100c7e0:	test   BYTE PTR [rip+0xb24d],0x2        # 0x1017a34
 100c7e7:	je     0x100c816
 100c7e9:	mov    rax,QWORD PTR [rip+0xe190]        # 0x101a980
 100c7f0:	test   rax,rax
 100c7f3:	je     0x100c816
 100c7f5:	call   QWORD PTR [rip+0xffffffffffff4855]        # 0x1001050
 100c7fb:	mov    r8,QWORD PTR [rip+0xe17e]        # 0x101a980
 100c802:	mov    rcx,QWORD PTR [rip+0xd9cf]        # 0x101a1d8
 100c809:	mov    r9d,eax
 100c80c:	mov    edx,0x4e000
 100c811:	call   0x1012910
 100c816:	xor    eax,eax
 100c818:	mov    rbx,QWORD PTR [rsp+0x30]
 100c81d:	mov    rsi,QWORD PTR [rsp+0x38]
 100c822:	add    rsp,0x20
 100c826:	pop    rdi
 100c827:	ret    
 100c828:	mov    WORD PTR [r8+rbx*2],di
 100c82d:	inc    rbx
 100c830:	mov    WORD PTR [r8+rbx*2],si
 100c835:	test   rbx,rbx
 100c838:	jne    0x100c870
 100c83a:	test   BYTE PTR [rip+0xb1f3],0x2        # 0x1017a34
 100c841:	je     0x100c870
 100c843:	mov    rcx,QWORD PTR [rip+0xe146]        # 0x101a990
 100c84a:	test   rcx,rcx
 100c84d:	je     0x100c870
 100c84f:	call   QWORD PTR [rip+0xffffffffffff47fb]        # 0x1001050
 100c855:	mov    r8,QWORD PTR [rip+0xe134]        # 0x101a990
 100c85c:	mov    rcx,QWORD PTR [rip+0xd97d]        # 0x101a1e0
 100c863:	mov    r9d,eax
 100c866:	mov    edx,0x53c00
 100c86b:	call   0x1012910
 100c870:	mov    rsi,QWORD PTR [rsp+0x38]
 100c875:	mov    rax,rbx
 100c878:	mov    rbx,QWORD PTR [rsp+0x30]
 100c87d:	add    rsp,0x20
 100c881:	pop    rdi
 100c882:	ret    
 100c883:	int3   
 100c884:	int3   
 100c885:	int3   
 100c886:	int3   
 100c887:	int3   
 100c888:	int3   
 100c889:	int3   
 100c88a:	int3   
 100c88b:	int3   
 100c88c:	int3   
 100c88d:	int3   
 100c88e:	int3   
 100c88f:	int3   
 100c890:	rex push rbp
 100c892:	push   rsi
 100c893:	push   rdi
 100c894:	push   r12
 100c896:	push   r13
 100c898:	push   r14
 100c89a:	push   r15
 100c89c:	lea    rbp,[rsp-0x260]
 100c8a4:	sub    rsp,0x360
 100c8ab:	mov    QWORD PTR [rbp-0x50],0xfffffffffffffffe
 100c8b3:	mov    QWORD PTR [rsp+0x3b0],rbx
 100c8bb:	mov    rax,QWORD PTR [rip+0xa84e]        # 0x1017110
 100c8c2:	xor    rax,rsp
 100c8c5:	mov    QWORD PTR [rbp+0x250],rax
 100c8cc:	mov    rdi,rdx
 100c8cf:	movzx  ebx,cx
 100c8d2:	mov    rax,QWORD PTR [rip+0xb13f]        # 0x1017a18
 100c8d9:	mov    QWORD PTR [rbp-0x58],rax
 100c8dd:	mov    rax,QWORD PTR [rip+0xb154]        # 0x1017a38
 100c8e4:	mov    QWORD PTR [rbp-0x68],rax
 100c8e8:	mov    rax,QWORD PTR [rip+0xb1a1]        # 0x1017a90
 100c8ef:	mov    QWORD PTR [rbp-0x60],rax
 100c8f3:	mov    r12,QWORD PTR [rip+0xb1ce]        # 0x1017ac8
 100c8fa:	mov    QWORD PTR [rsp+0x70],r12
 100c8ff:	mov    r13,QWORD PTR [rip+0xb182]        # 0x1017a88
 100c906:	mov    QWORD PTR [rbp-0x78],r13
 100c90a:	mov    r14,QWORD PTR [rip+0xb3e7]        # 0x1017cf8
 100c911:	mov    QWORD PTR [rbp-0x70],r14
 100c915:	or     rsi,0xffffffffffffffff
 100c919:	mov    QWORD PTR [rsp+0x78],rsi
 100c91e:	xor    ecx,ecx
 100c920:	test   BYTE PTR [rip+0xb10d],0x4        # 0x1017a34
 100c927:	je     0x100c966
 100c929:	mov    rax,QWORD PTR [rip+0xdf30]        # 0x101a860
 100c930:	test   rax,rax
 100c933:	je     0x100c966
 100c935:	cmp    QWORD PTR [rip+0xa7ec],rsi        # 0x1017128
 100c93c:	je     0x100c966
 100c93e:	mov    QWORD PTR [rsp+0x28],rcx
 100c943:	mov    rax,QWORD PTR [rip+0xdf16]        # 0x101a860
 100c94a:	mov    QWORD PTR [rsp+0x20],rax
 100c94f:	lea    r9,[rsp+0x78]
 100c954:	xor    r8d,r8d
 100c957:	xor    edx,edx
 100c959:	mov    rcx,QWORD PTR [rip+0xa7c8]        # 0x1017128
 100c960:	call   QWORD PTR [rip+0xa802]        # 0x1017168
 100c966:	test   BYTE PTR [rip+0xb0c7],0x2        # 0x1017a34
 100c96d:	je     0x100c99d
 100c96f:	mov    rax,QWORD PTR [rip+0xdb22]        # 0x101a498
 100c976:	test   rax,rax
 100c979:	je     0x100c99d
 100c97b:	movzx  eax,bx
 100c97e:	mov    DWORD PTR [rsp+0x20],eax
 100c982:	mov    r9,r14
 100c985:	mov    r8,QWORD PTR [rip+0xdb0c]        # 0x101a498
 100c98c:	mov    edx,0x2c000
 100c991:	mov    rcx,QWORD PTR [rip+0xd878]        # 0x101a210
 100c998:	call   0x10128c0
 100c99d:	movzx  r15d,bx
 100c9a1:	mov    DWORD PTR [rsp+0x68],r15d
 100c9a6:	mov    edx,r15d
 100c9a9:	mov    rcx,r14
 100c9ac:	call   QWORD PTR [rip+0xffffffffffff4a4e]        # 0x1001400
 100c9b2:	mov    ebx,0x1
 100c9b7:	cmp    r15d,ebx
 100c9ba:	jl     0x100cc91
 100c9c0:	add    rdi,0x84
 100c9c7:	lea    rdx,[rip+0xffffffffffff3632]        # 0x1000000
 100c9ce:	xchg   ax,ax
 100c9d0:	test   BYTE PTR [rip+0xb05d],0x2        # 0x1017a34
 100c9d7:	je     0x100ca07
 100c9d9:	mov    rax,QWORD PTR [rip+0xdae8]        # 0x101a4c8
 100c9e0:	test   rax,rax
 100c9e3:	je     0x100ca07
 100c9e5:	mov    r9d,ebx
 100c9e8:	mov    r8,QWORD PTR [rip+0xdad9]        # 0x101a4c8
 100c9ef:	mov    edx,0x2dc00
 100c9f4:	mov    rcx,QWORD PTR [rip+0xd85d]        # 0x101a258
 100c9fb:	call   0x10128c0
 100ca00:	lea    rdx,[rip+0xffffffffffff35f9]        # 0x1000000
 100ca07:	xor    eax,eax
 100ca09:	mov    r14d,eax
 100ca0c:	mov    DWORD PTR [rbp-0x80],eax
 100ca0f:	mov    r9d,DWORD PTR [rdi]
 100ca12:	lea    eax,[r9-0x25]
 100ca16:	cmp    eax,0x8a
 100ca1b:	ja     0x100ca41
 100ca1d:	cdqe   
 100ca1f:	movzx  eax,BYTE PTR [rdx+rax*1+0xd004]
 100ca27:	mov    ecx,DWORD PTR [rdx+rax*4+0xcff8]
 100ca2e:	add    rcx,rdx
 100ca31:	jmp    rcx
 100ca33:	mov    r9d,0x2d
 100ca39:	jmp    0x100ca41
 100ca3b:	mov    r9d,0x2f
 100ca41:	cmp    QWORD PTR [rdi+0x4],r14
 100ca45:	sete   al
 100ca48:	lea    rcx,[rbp-0x80]
 100ca4c:	mov    QWORD PTR [rsp+0x28],rcx
 100ca51:	mov    BYTE PTR [rsp+0x20],al
 100ca55:	lea    r8,[rdi-0x84]
 100ca5c:	mov    rdx,r12
 100ca5f:	mov    rcx,r13
 100ca62:	call   0x100d320
 100ca67:	mov    r12d,eax
 100ca6a:	mov    r13d,DWORD PTR [rbp-0x80]
 100ca6e:	test   r13d,r13d
 100ca71:	je     0x100ced6
 100ca77:	cmp    QWORD PTR [rdi+0x4],r14
 100ca7b:	sete   al
 100ca7e:	mov    BYTE PTR [rsp+0x30],al
 100ca82:	mov    DWORD PTR [rsp+0x28],r12d
 100ca87:	mov    eax,DWORD PTR [rdi]
 100ca89:	mov    DWORD PTR [rsp+0x20],eax
 100ca8d:	movzx  r9d,BYTE PTR [rdi+0xc]
 100ca92:	lea    r8,[rdi-0x84]
 100ca99:	mov    rdx,QWORD PTR [rsp+0x70]
 100ca9e:	mov    rcx,QWORD PTR [rbp-0x78]
 100caa2:	call   0x100e720
 100caa7:	mov    r15d,eax
 100caaa:	cmp    eax,0xffffffff
 100caad:	je     0x100ced6
 100cab3:	test   eax,eax
 100cab5:	mov    eax,DWORD PTR [rip+0xafc5]        # 0x1017a80
 100cabb:	jle    0x100cac9
 100cabd:	mov    DWORD PTR [rsp+0x64],esi
 100cac1:	mov    r14d,0x2
 100cac7:	jmp    0x100cb0f
 100cac9:	test   eax,eax
 100cacb:	jne    0x100cb0f
 100cacd:	mov    eax,0x1
 100cad2:	mov    DWORD PTR [rsp+0x30],eax
 100cad6:	mov    DWORD PTR [rsp+0x28],r12d
 100cadb:	mov    eax,DWORD PTR [rdi]
 100cadd:	mov    DWORD PTR [rsp+0x20],eax
 100cae1:	mov    r9,QWORD PTR [rdi+0x4]
 100cae5:	lea    r8,[rdi-0x84]
 100caec:	mov    rdx,QWORD PTR [rsp+0x70]
 100caf1:	mov    rcx,QWORD PTR [rbp-0x78]
 100caf5:	call   0x100dbc0
 100cafa:	mov    DWORD PTR [rsp+0x64],eax
 100cafe:	cmp    eax,0x8000
 100cb03:	je     0x100ced6
 100cb09:	mov    eax,DWORD PTR [rip+0xaf71]        # 0x1017a80
 100cb0f:	mov    BYTE PTR [rbp+0x10],0x0
 100cb13:	mov    DWORD PTR [rsp+0x60],0x0
 100cb1b:	test   r15d,r15d
 100cb1e:	jg     0x100cb2a
 100cb20:	test   eax,eax
 100cb22:	je     0x100cb2e
 100cb24:	cmp    r13d,0x3
 100cb28:	jne    0x100cb2e
 100cb2a:	test   eax,eax
 100cb2c:	jne    0x100cb84
 100cb2e:	mov    r8,QWORD PTR [rbp-0x60]
 100cb32:	cmp    ebx,DWORD PTR [rsp+0x68]
 100cb36:	cmove  r8,QWORD PTR [rbp-0x68]
 100cb3b:	mov    rax,QWORD PTR [rbp-0x58]
 100cb3f:	mov    QWORD PTR [rsp+0x28],rax
 100cb44:	lea    rax,[rsp+0x60]
 100cb49:	mov    QWORD PTR [rsp+0x20],rax
 100cb4e:	lea    r9,[rbp+0x10]
 100cb52:	mov    rdx,QWORD PTR [rsp+0x70]
 100cb57:	mov    r13,QWORD PTR [rbp-0x78]
 100cb5b:	mov    rcx,r13
 100cb5e:	call   0x100e240
 100cb63:	test   eax,eax
 100cb65:	je     0x100ced6
 100cb6b:	cmp    DWORD PTR [rsp+0x60],0xffffffff
 100cb70:	mov    eax,0x3
 100cb75:	cmovne r14d,eax
 100cb79:	cmp    DWORD PTR [rip+0xaf00],0x0        # 0x1017a80
 100cb80:	je     0x100cbd8
 100cb82:	jmp    0x100cb88
 100cb84:	mov    r13,QWORD PTR [rbp-0x78]
 100cb88:	test   r14d,r14d
 100cb8b:	mov    eax,0x1
 100cb90:	cmove  r14d,eax
 100cb94:	xor    eax,eax
 100cb96:	cmp    r14d,0x1
 100cb9a:	sete   al
 100cb9d:	mov    DWORD PTR [rsp+0x30],eax
 100cba1:	mov    DWORD PTR [rsp+0x28],r12d
 100cba6:	mov    eax,DWORD PTR [rdi]
 100cba8:	mov    DWORD PTR [rsp+0x20],eax
 100cbac:	mov    r9,QWORD PTR [rdi+0x4]
 100cbb0:	lea    r8,[rdi-0x84]
 100cbb7:	mov    rdx,QWORD PTR [rsp+0x70]
 100cbbc:	mov    rcx,r13
 100cbbf:	call   0x100dbc0
 100cbc4:	mov    r14d,eax
 100cbc7:	mov    DWORD PTR [rsp+0x64],eax
 100cbcb:	cmp    eax,0x8000
 100cbd0:	je     0x100ced6
 100cbd6:	jmp    0x100cbdd
 100cbd8:	mov    r14d,DWORD PTR [rsp+0x64]
 100cbdd:	test   BYTE PTR [rip+0xae50],0x2        # 0x1017a34
 100cbe4:	je     0x100cc39
 100cbe6:	mov    rax,QWORD PTR [rip+0xd8bb]        # 0x101a4a8
 100cbed:	test   rax,rax
 100cbf0:	je     0x100cc39
 100cbf2:	movzx  ecx,r12b
 100cbf6:	mov    DWORD PTR [rsp+0x50],ebx
 100cbfa:	lea    rax,[rbp+0x10]
 100cbfe:	mov    QWORD PTR [rsp+0x48],rax
 100cc03:	mov    eax,DWORD PTR [rsp+0x60]
 100cc07:	mov    DWORD PTR [rsp+0x40],eax
 100cc0b:	mov    DWORD PTR [rsp+0x38],r14d
 100cc10:	mov    DWORD PTR [rsp+0x30],r15d
 100cc15:	mov    DWORD PTR [rsp+0x28],ecx
 100cc19:	mov    DWORD PTR [rsp+0x20],ebx
 100cc1d:	mov    r9,QWORD PTR [rbp-0x70]
 100cc21:	mov    r8,QWORD PTR [rip+0xd880]        # 0x101a4a8
 100cc28:	mov    edx,0x4a000
 100cc2d:	mov    rcx,QWORD PTR [rip+0xd634]        # 0x101a268
 100cc34:	call   0x10128c0
 100cc39:	mov    DWORD PTR [rsp+0x38],ebx
 100cc3d:	mov    eax,DWORD PTR [rsp+0x60]
 100cc41:	mov    DWORD PTR [rsp+0x30],eax
 100cc45:	lea    rax,[rbp+0x10]
 100cc49:	mov    QWORD PTR [rsp+0x28],rax
 100cc4e:	mov    DWORD PTR [rsp+0x20],r14d
 100cc53:	mov    r9d,r15d
 100cc56:	movzx  r8d,r12b
 100cc5a:	mov    edx,ebx
 100cc5c:	mov    r14,QWORD PTR [rbp-0x70]
 100cc60:	mov    rcx,r14
 100cc63:	call   QWORD PTR [rip+0xffffffffffff47af]        # 0x1001418
 100cc69:	test   ax,ax
 100cc6c:	je     0x100ced6
 100cc72:	inc    ebx
 100cc74:	add    rdi,0x98
 100cc7b:	cmp    ebx,DWORD PTR [rsp+0x68]
 100cc7f:	mov    r12,QWORD PTR [rsp+0x70]
 100cc84:	lea    rdx,[rip+0xffffffffffff3375]        # 0x1000000
 100cc8b:	jle    0x100c9d0
 100cc91:	cmp    DWORD PTR [rip+0xae24],0x0        # 0x1017abc
 100cc98:	jne    0x100cf51
 100cc9e:	mov    r9d,0x100
 100cca4:	lea    r8,[rbp+0x50]
 100cca8:	mov    edx,0x24
 100ccad:	mov    rcx,QWORD PTR [rip+0xad6c]        # 0x1017a20
 100ccb4:	call   QWORD PTR [rip+0xffffffffffff470e]        # 0x10013c8
 100ccba:	lea    rdx,[rbp+0x50]
 100ccbe:	lea    rcx,[rbp+0x50]
 100ccc2:	call   QWORD PTR [rip+0xffffffffffff46f8]        # 0x10013c0
 100ccc8:	mov    rdx,r12
 100cccb:	lea    rcx,[rbp+0x50]
 100cccf:	call   QWORD PTR [rip+0xffffffffffff461b]        # 0x10012f0
 100ccd5:	mov    r8,r13
 100ccd8:	mov    ebx,0x50
 100ccdd:	mov    edx,ebx
 100ccdf:	lea    rcx,[rbp-0x40]
 100cce3:	call   QWORD PTR [rip+0xffffffffffff44c7]        # 0x10011b0
 100cce9:	test   rax,rax
 100ccec:	je     0x100ced6
 100ccf2:	movzx  eax,BYTE PTR [rbp-0x40]
 100ccf6:	cmp    al,0x59
 100ccf8:	je     0x100cd62
 100ccfa:	cmp    al,0x79
 100ccfc:	je     0x100cd62
 100ccfe:	cmp    al,0xa
 100cd00:	je     0x100cd62
 100cd02:	cmp    al,0x94
 100cd04:	jne    0x100cf51
 100cd0a:	xor    ebx,ebx
 100cd0c:	test   BYTE PTR [rip+0xad21],0x2        # 0x1017a34
 100cd13:	je     0x100cf1e
 100cd19:	mov    rax,QWORD PTR [rip+0xd7a0]        # 0x101a4c0
 100cd20:	test   rax,rax
 100cd23:	je     0x100ced8
 100cd29:	cmp    QWORD PTR [rip+0xa3f7],0xffffffffffffffff        # 0x1017128
 100cd31:	je     0x100ced8
 100cd37:	mov    QWORD PTR [rsp+0x20],rbx
 100cd3c:	mov    r9,QWORD PTR [rip+0xd77d]        # 0x101a4c0
 100cd43:	mov    r8d,0x58c00
 100cd49:	mov    rdx,QWORD PTR [rip+0xd4b0]        # 0x101a200
 100cd50:	mov    rcx,QWORD PTR [rip+0xa3d1]        # 0x1017128
 100cd57:	call   QWORD PTR [rip+0xa3fb]        # 0x1017158
 100cd5d:	jmp    0x100ced8
 100cd62:	mov    r9d,0x100
 100cd68:	lea    r8,[rbp+0x150]
 100cd6f:	mov    edx,0x25
 100cd74:	mov    rcx,QWORD PTR [rip+0xaca5]        # 0x1017a20
 100cd7b:	call   QWORD PTR [rip+0xffffffffffff4647]        # 0x10013c8
 100cd81:	lea    rdx,[rbp+0x150]
 100cd88:	lea    rcx,[rbp+0x150]
 100cd8f:	call   QWORD PTR [rip+0xffffffffffff462b]        # 0x10013c0
 100cd95:	lea    rdi,[rip+0xffffffffffff5574]        # 0x1002310
 100cd9c:	mov    r8,rdi
 100cd9f:	lea    rdx,[rbp+0x150]
 100cda6:	mov    rcx,r12
 100cda9:	call   QWORD PTR [rip+0xffffffffffff44f9]        # 0x10012a8
 100cdaf:	mov    r8,r13
 100cdb2:	mov    edx,ebx
 100cdb4:	lea    rcx,[rbp-0x40]
 100cdb8:	call   QWORD PTR [rip+0xffffffffffff43f2]        # 0x10011b0
 100cdbe:	test   rax,rax
 100cdc1:	jne    0x100ce1b
 100cdc3:	xor    ebx,ebx
 100cdc5:	test   BYTE PTR [rip+0xac68],0x2        # 0x1017a34
 100cdcc:	je     0x100cf1e
 100cdd2:	mov    rax,QWORD PTR [rip+0xd6f7]        # 0x101a4d0
 100cdd9:	test   rax,rax
 100cddc:	je     0x100ced8
 100cde2:	cmp    QWORD PTR [rip+0xa33e],0xffffffffffffffff        # 0x1017128
 100cdea:	je     0x100ced8
 100cdf0:	mov    QWORD PTR [rsp+0x20],rbx
 100cdf5:	mov    r9,QWORD PTR [rip+0xd6d4]        # 0x101a4d0
 100cdfc:	mov    r8d,0x53800
 100ce02:	mov    rdx,QWORD PTR [rip+0xd43f]        # 0x101a248
 100ce09:	mov    rcx,QWORD PTR [rip+0xa318]        # 0x1017128
 100ce10:	call   QWORD PTR [rip+0xa342]        # 0x1017158
 100ce16:	jmp    0x100ced8
 100ce1b:	lea    rax,[rbp-0x40]
 100ce1f:	nop
 100ce20:	inc    rsi
 100ce23:	cmp    BYTE PTR [rax+rsi*1],0x0
 100ce27:	jne    0x100ce20
 100ce29:	movsxd rax,esi
 100ce2c:	cmp    BYTE PTR [rbp+rax*1-0x41],0xa
 100ce31:	jne    0x100ce4d
 100ce33:	lea    eax,[rsi-0x1]
 100ce36:	movsxd rcx,eax
 100ce39:	cmp    rcx,rbx
 100ce3c:	jae    0x100ce45
 100ce3e:	mov    BYTE PTR [rbp+rcx*1-0x40],0x0
 100ce43:	jmp    0x100ce4d
 100ce45:	xor    ecx,ecx
 100ce47:	call   0x1014478
 100ce4c:	int3   
 100ce4d:	cmp    BYTE PTR [rbp-0x40],0x0
 100ce51:	jne    0x100ce8b
 100ce53:	lea    rcx,[rbp-0x40]
 100ce57:	lea    rax,[rbp-0x40]
 100ce5b:	sub    rdi,rax
 100ce5e:	xchg   ax,ax
 100ce60:	lea    rax,[rbx+0x7fffffae]
 100ce67:	test   rax,rax
 100ce6a:	je     0x100ce80
 100ce6c:	movzx  eax,BYTE PTR [rdi+rcx*1]
 100ce70:	test   al,al
 100ce72:	je     0x100ce80
 100ce74:	mov    BYTE PTR [rcx],al
 100ce76:	inc    rcx
 100ce79:	dec    rbx
 100ce7c:	jne    0x100ce60
 100ce7e:	jmp    0x100ce85
 100ce80:	test   rbx,rbx
 100ce83:	jne    0x100ce88
 100ce85:	dec    rcx
 100ce88:	mov    BYTE PTR [rcx],0x0
 100ce8b:	test   BYTE PTR [rip+0xaba2],0x2        # 0x1017a34
 100ce92:	je     0x100cec4
 100ce94:	mov    rax,QWORD PTR [rip+0xd65d]        # 0x101a4f8
 100ce9b:	test   rax,rax
 100ce9e:	je     0x100cec4
 100cea0:	lea    rax,[rbp-0x40]
 100cea4:	mov    QWORD PTR [rsp+0x20],rax
 100cea9:	mov    r9,r14
 100ceac:	mov    r8,QWORD PTR [rip+0xd645]        # 0x101a4f8
 100ceb3:	mov    edx,0x57000
 100ceb8:	mov    rcx,QWORD PTR [rip+0xd3a1]        # 0x101a260
 100cebf:	call   0x10128c0
 100cec4:	lea    rdx,[rbp-0x40]
 100cec8:	mov    rcx,r14
 100cecb:	call   QWORD PTR [rip+0xffffffffffff4527]        # 0x10013f8
 100ced1:	test   ax,ax
 100ced4:	jne    0x100cf51
 100ced6:	xor    ebx,ebx
 100ced8:	test   BYTE PTR [rip+0xab55],0x2        # 0x1017a34
 100cedf:	je     0x100cf1e
 100cee1:	mov    rax,QWORD PTR [rip+0xd630]        # 0x101a518
 100cee8:	test   rax,rax
 100ceeb:	je     0x100cf1e
 100ceed:	cmp    QWORD PTR [rip+0xa233],0xffffffffffffffff        # 0x1017128
 100cef5:	je     0x100cf1e
 100cef7:	mov    QWORD PTR [rsp+0x20],rbx
 100cefc:	mov    r9,QWORD PTR [rip+0xd615]        # 0x101a518
 100cf03:	mov    r8d,0x5b400
 100cf09:	mov    rdx,QWORD PTR [rip+0xd2e8]        # 0x101a1f8
 100cf10:	mov    rcx,QWORD PTR [rip+0xa211]        # 0x1017128
 100cf17:	call   QWORD PTR [rip+0xa23b]        # 0x1017158
 100cf1d:	nop
 100cf1e:	cmp    QWORD PTR [rsp+0x78],0xffffffffffffffff
 100cf24:	je     0x100cf4c
 100cf26:	test   BYTE PTR [rip+0xab07],0x4        # 0x1017a34
 100cf2d:	je     0x100cf4c
 100cf2f:	mov    rcx,QWORD PTR [rip+0xa1f2]        # 0x1017128
 100cf36:	cmp    rcx,0xffffffffffffffff
 100cf3a:	je     0x100cf4c
 100cf3c:	lea    r9,[rsp+0x78]
 100cf41:	xor    r8d,r8d
 100cf44:	xor    edx,edx
 100cf46:	call   QWORD PTR [rip+0xa22c]        # 0x1017178
 100cf4c:	movzx  eax,bx
 100cf4f:	jmp    0x100cfcc
 100cf51:	test   BYTE PTR [rip+0xaadc],0x2        # 0x1017a34
 100cf58:	je     0x100cf99
 100cf5a:	mov    rax,QWORD PTR [rip+0xd527]        # 0x101a488
 100cf61:	test   rax,rax
 100cf64:	je     0x100cf99
 100cf66:	cmp    QWORD PTR [rip+0xa1ba],0xffffffffffffffff        # 0x1017128
 100cf6e:	je     0x100cf99
 100cf70:	xor    eax,eax
 100cf72:	mov    QWORD PTR [rsp+0x20],rax
 100cf77:	mov    r9,QWORD PTR [rip+0xd50a]        # 0x101a488
 100cf7e:	mov    r8d,0x5a400
 100cf84:	mov    rdx,QWORD PTR [rip+0xd295]        # 0x101a220
 100cf8b:	mov    rcx,QWORD PTR [rip+0xa196]        # 0x1017128
 100cf92:	call   QWORD PTR [rip+0xa1c0]        # 0x1017158
 100cf98:	nop
 100cf99:	cmp    QWORD PTR [rsp+0x78],0xffffffffffffffff
 100cf9f:	je     0x100cfc7
 100cfa1:	test   BYTE PTR [rip+0xaa8c],0x4        # 0x1017a34
 100cfa8:	je     0x100cfc7
 100cfaa:	mov    rcx,QWORD PTR [rip+0xa177]        # 0x1017128
 100cfb1:	cmp    rcx,0xffffffffffffffff
 100cfb5:	je     0x100cfc7
 100cfb7:	lea    r9,[rsp+0x78]
 100cfbc:	xor    r8d,r8d
 100cfbf:	xor    edx,edx
 100cfc1:	call   QWORD PTR [rip+0xa1b1]        # 0x1017178
 100cfc7:	mov    eax,0x1
 100cfcc:	mov    rcx,QWORD PTR [rbp+0x250]
 100cfd3:	xor    rcx,rsp
 100cfd6:	call   0x1014450
 100cfdb:	mov    rbx,QWORD PTR [rsp+0x3b0]
 100cfe3:	add    rsp,0x360
 100cfea:	pop    r15
 100cfec:	pop    r14
 100cfee:	pop    r13
 100cff0:	pop    r12
 100cff2:	pop    rdi
 100cff3:	pop    rsi
 100cff4:	pop    rbp
 100cff5:	ret    
 100cff6:	xchg   ax,ax
 100cff8:	xor    ecx,edx
 100cffa:	add    BYTE PTR [rax],al
 100cffc:	cmp    ecx,edx
 100cffe:	add    BYTE PTR [rax],al
 100d000:	rex.B retf 0x0
 100d004:	add    BYTE PTR [rdx],al
 100d006:	add    DWORD PTR [rdx],eax
 100d008:	add    al,BYTE PTR [rdx]
 100d00a:	add    al,BYTE PTR [rdx]
 100d00c:	add    al,BYTE PTR [rdx]
 100d00e:	add    al,BYTE PTR [rdx]
 100d010:	add    al,BYTE PTR [rdx]
 100d012:	add    al,BYTE PTR [rdx]
 100d014:	add    al,BYTE PTR [rdx]
 100d016:	add    al,BYTE PTR [rdx]
 100d018:	add    al,BYTE PTR [rdx]
 100d01a:	add    al,BYTE PTR [rdx]
 100d01c:	add    al,BYTE PTR [rdx]
 100d01e:	add    al,BYTE PTR [rdx]
 100d020:	add    al,BYTE PTR [rdx]
 100d022:	add    al,BYTE PTR [rdx]
 100d024:	add    al,BYTE PTR [rdx]
 100d026:	add    al,BYTE PTR [rdx]
 100d028:	add    al,BYTE PTR [rdx]
 100d02a:	add    al,BYTE PTR [rdx]
 100d02c:	add    al,BYTE PTR [rdx]
 100d02e:	add    al,BYTE PTR [rdx]
 100d030:	add    al,BYTE PTR [rdx]
 100d032:	add    al,BYTE PTR [rdx]
 100d034:	add    al,BYTE PTR [rdx]
 100d036:	add    al,BYTE PTR [rdx]
 100d038:	add    al,BYTE PTR [rdx]
 100d03a:	add    al,BYTE PTR [rdx]
 100d03c:	add    al,BYTE PTR [rdx]
 100d03e:	add    al,BYTE PTR [rdx]
 100d040:	add    al,BYTE PTR [rdx]
 100d042:	add    al,BYTE PTR [rdx]
 100d044:	add    al,BYTE PTR [rdx]
 100d046:	add    al,BYTE PTR [rdx]
 100d048:	add    al,BYTE PTR [rdx]
 100d04a:	add    al,BYTE PTR [rdx]
 100d04c:	add    al,BYTE PTR [rdx]
 100d04e:	add    al,BYTE PTR [rdx]
 100d050:	add    al,BYTE PTR [rdx]
 100d052:	add    al,BYTE PTR [rdx]
 100d054:	add    al,BYTE PTR [rdx]
 100d056:	add    al,BYTE PTR [rdx]
 100d058:	add    al,BYTE PTR [rdx]
 100d05a:	add    al,BYTE PTR [rdx]
 100d05c:	add    al,BYTE PTR [rdx]
 100d05e:	add    al,BYTE PTR [rdx]
 100d060:	add    al,BYTE PTR [rdx]
 100d062:	add    al,BYTE PTR [rdx]
 100d064:	add    al,BYTE PTR [rdx]
 100d066:	add    al,BYTE PTR [rdx]
 100d068:	add    al,BYTE PTR [rdx]
 100d06a:	add    al,BYTE PTR [rdx]
 100d06c:	add    al,BYTE PTR [rdx]
 100d06e:	add    al,BYTE PTR [rdx]
 100d070:	add    al,BYTE PTR [rdx]
 100d072:	add    al,BYTE PTR [rdx]
 100d074:	add    al,BYTE PTR [rdx]
 100d076:	add    al,BYTE PTR [rdx]
 100d078:	add    al,BYTE PTR [rdx]
 100d07a:	add    al,BYTE PTR [rdx]
 100d07c:	add    al,BYTE PTR [rdx]
 100d07e:	add    al,BYTE PTR [rdx]
 100d080:	add    al,BYTE PTR [rdx]
 100d082:	add    al,BYTE PTR [rdx]
 100d084:	add    BYTE PTR [rdx],al
 100d086:	add    DWORD PTR [rdx],eax
 100d088:	add    al,BYTE PTR [rdx]
 100d08a:	add    al,BYTE PTR [rdx]
 100d08c:	add    BYTE PTR [rdx],al
 100d08e:	add    esp,ecx
 100d090:	int3   
 100d091:	int3   
 100d092:	int3   
 100d093:	int3   
 100d094:	int3   
 100d095:	int3   
 100d096:	int3   
 100d097:	int3   
 100d098:	int3   
 100d099:	int3   
 100d09a:	int3   
 100d09b:	int3   
 100d09c:	int3   
 100d09d:	int3   
 100d09e:	int3   
 100d09f:	int3   
 100d0a0:	movzx  eax,cl
 100d0a3:	cmp    edx,0x32
 100d0a6:	jne    0x100d0b7
 100d0a8:	cmp    r8d,0x2f
 100d0ac:	je     0x100d0b4
 100d0ae:	cmp    r8d,0x2d
 100d0b2:	jne    0x100d0b7
 100d0b4:	xor    eax,eax
 100d0b6:	ret    
 100d0b7:	mov    r10d,0x1
 100d0bd:	cmp    r8d,0x2f
 100d0c1:	jne    0x100d0cd
 100d0c3:	movzx  eax,al
 100d0c6:	cmp    edx,r8d
 100d0c9:	cmovne eax,r10d
 100d0cd:	cmp    edx,0xf0
 100d0d3:	je     0x100d0d9
 100d0d5:	test   al,al
 100d0d7:	je     0x100d0b4
 100d0d9:	add    r8d,0xffffffde
 100d0dd:	cmp    r8d,0xcf
 100d0e4:	ja     0x100d149
 100d0e6:	movsxd rax,r8d
 100d0e9:	lea    r8,[rip+0xffffffffffff2f10]        # 0x1000000
 100d0f0:	movzx  eax,BYTE PTR [r8+rax*1+0xd164]
 100d0f9:	mov    ecx,DWORD PTR [r8+rax*4+0xd150]
 100d101:	add    rcx,r8
 100d104:	jmp    rcx
 100d106:	mov    eax,0x8
 100d10b:	ret    
 100d10c:	mov    eax,0x4
 100d111:	ret    
 100d112:	add    edx,0xffffffde
 100d115:	cmp    edx,0xcf
 100d11b:	ja     0x100d149
 100d11d:	movsxd rax,edx
 100d120:	movzx  eax,BYTE PTR [r8+rax*1+0xd244]
 100d129:	mov    ecx,DWORD PTR [r8+rax*4+0xd234]
 100d131:	add    rcx,r8
 100d134:	jmp    rcx
 100d136:	mov    eax,0x8
 100d13b:	mov    ecx,0x2
 100d140:	test   r9b,r9b
 100d143:	cmovne ecx,eax
 100d146:	mov    eax,ecx
 100d148:	ret    
 100d149:	mov    eax,r10d
 100d14c:	ret    
 100d14d:	nop    DWORD PTR [rax]
 100d150:	or     al,0xd1
 100d152:	add    BYTE PTR [rax],al
 100d154:	rol    DWORD PTR ss:[rax],1
 100d157:	add    BYTE PTR [rdx],dl
 100d159:	rol    DWORD PTR [rax],1
 100d15b:	add    BYTE PTR [rsi],al
 100d15d:	rol    DWORD PTR [rax],1
 100d15f:	add    BYTE PTR [rcx-0x2f],cl
 100d162:	add    BYTE PTR [rax],al
 100d164:	add    BYTE PTR [rax],al
 100d166:	add    al,0x1
 100d168:	add    al,0x2
 100d16a:	add    al,0x4
 100d16c:	add    al,0x4
 100d16e:	add    al,0x1
 100d170:	add    al,0x2
 100d172:	add    al,0x4
 100d174:	add    al,0x4
 100d176:	add    al,0x4
 100d178:	add    al,0x4
 100d17a:	add    al,0x4
 100d17c:	add    al,0x4
 100d17e:	add    al,0x4
 100d180:	add    al,0x4
 100d182:	add    al,0x4
 100d184:	add    al,0x4
 100d186:	add    al,0x4
 100d188:	add    al,0x4
 100d18a:	add    al,0x4
 100d18c:	add    al,0x4
 100d18e:	add    al,0x4
 100d190:	add    al,0x4
 100d192:	add    al,0x4
 100d194:	add    al,0x4
 100d196:	add    al,0x4
 100d198:	add    al,0x4
 100d19a:	add    al,0x4
 100d19c:	add    al,0x4
 100d19e:	add    al,0x4
 100d1a0:	add    al,0x4
 100d1a2:	add    al,0x4
 100d1a4:	add    BYTE PTR [rax],al
 100d1a6:	add    al,0x4
 100d1a8:	add    al,0x4
 100d1aa:	add    al,0x4
 100d1ac:	add    al,0x4
 100d1ae:	add    al,0x4
 100d1b0:	add    al,0x4
 100d1b2:	add    al,0x4
 100d1b4:	add    al,0x4
 100d1b6:	add    al,0x4
 100d1b8:	add    al,0x4
 100d1ba:	add    al,0x4
 100d1bc:	add    al,0x4
 100d1be:	add    al,0x4
 100d1c0:	add    al,0x4
 100d1c2:	add    al,0x4
 100d1c4:	add    al,0x4
 100d1c6:	add    al,0x4
 100d1c8:	add    al,0x4
 100d1ca:	add    al,0x4
 100d1cc:	add    al,0x4
 100d1ce:	add    al,0x4
 100d1d0:	add    al,0x4
 100d1d2:	add    al,0x4
 100d1d4:	add    al,0x4
 100d1d6:	add    al,0x4
 100d1d8:	add    al,0x4
 100d1da:	add    al,0x4
 100d1dc:	add    al,0x4
 100d1de:	add    al,0x4
 100d1e0:	add    al,0x4
 100d1e2:	add    al,0x4
 100d1e4:	add    al,0x4
 100d1e6:	add    al,0x1
 100d1e8:	add    al,0x2
 100d1ea:	add    al,0x4
 100d1ec:	add    al,0x4
 100d1ee:	add    al,0x1
 100d1f0:	add    al,0x2
 100d1f2:	add    al,0x4
 100d1f4:	add    al,0x4
 100d1f6:	add    al,0x4
 100d1f8:	add    al,0x4
 100d1fa:	add    al,0x4
 100d1fc:	add    al,0x4
 100d1fe:	add    al,0x4
 100d200:	add    al,0x4
 100d202:	add    al,0x4
 100d204:	add    al,0x4
 100d206:	add    al,0x4
 100d208:	add    al,0x4
 100d20a:	add    al,0x4
 100d20c:	add    al,0x4
 100d20e:	add    al,0x4
 100d210:	add    al,0x4
 100d212:	add    al,0x4
 100d214:	add    al,0x4
 100d216:	add    al,0x4
 100d218:	add    al,0x4
 100d21a:	add    al,0x4
 100d21c:	add    al,0x4
 100d21e:	add    al,0x4
 100d220:	add    al,0x4
 100d222:	add    al,0x4
 100d224:	add    al,0x4
 100d226:	add    al,0x4
 100d228:	add    al,0x2
 100d22a:	add    al,0x4
 100d22c:	add    al,0x4
 100d22e:	add    al,0x4
 100d230:	add    al,0x2
 100d232:	add    eax,DWORD PTR [rbx]
 100d234:	or     al,0xd1
 100d236:	add    BYTE PTR [rax],al
 100d238:	rol    DWORD PTR ss:[rax],1
 100d23b:	add    BYTE PTR [rsi],al
 100d23d:	rol    DWORD PTR [rax],1
 100d23f:	add    BYTE PTR [rcx-0x2f],cl
 100d242:	add    BYTE PTR [rax],al
 100d244:	add    BYTE PTR [rax],al
 100d246:	add    eax,DWORD PTR [rcx]
 100d248:	add    eax,DWORD PTR [rcx]
 100d24a:	add    eax,DWORD PTR [rbx]
 100d24c:	add    eax,DWORD PTR [rbx]
 100d24e:	add    eax,DWORD PTR [rcx]
 100d250:	add    eax,DWORD PTR [rcx]
 100d252:	add    eax,DWORD PTR [rbx]
 100d254:	add    eax,DWORD PTR [rbx]
 100d256:	add    eax,DWORD PTR [rbx]
 100d258:	add    eax,DWORD PTR [rbx]
 100d25a:	add    eax,DWORD PTR [rbx]
 100d25c:	add    eax,DWORD PTR [rbx]
 100d25e:	add    eax,DWORD PTR [rbx]
 100d260:	add    eax,DWORD PTR [rbx]
 100d262:	add    eax,DWORD PTR [rbx]
 100d264:	add    eax,DWORD PTR [rbx]
 100d266:	add    eax,DWORD PTR [rbx]
 100d268:	add    eax,DWORD PTR [rbx]
 100d26a:	add    eax,DWORD PTR [rbx]
 100d26c:	add    eax,DWORD PTR [rbx]
 100d26e:	add    eax,DWORD PTR [rbx]
 100d270:	add    eax,DWORD PTR [rbx]
 100d272:	add    eax,DWORD PTR [rbx]
 100d274:	add    eax,DWORD PTR [rbx]
 100d276:	add    eax,DWORD PTR [rbx]
 100d278:	add    eax,DWORD PTR [rbx]
 100d27a:	add    eax,DWORD PTR [rbx]
 100d27c:	add    eax,DWORD PTR [rbx]
 100d27e:	add    eax,DWORD PTR [rbx]
 100d280:	add    eax,DWORD PTR [rbx]
 100d282:	add    eax,DWORD PTR [rbx]
 100d284:	add    eax,DWORD PTR [rax]
 100d286:	add    eax,DWORD PTR [rbx]
 100d288:	add    eax,DWORD PTR [rbx]
 100d28a:	add    eax,DWORD PTR [rbx]
 100d28c:	add    eax,DWORD PTR [rbx]
 100d28e:	add    eax,DWORD PTR [rbx]
 100d290:	add    eax,DWORD PTR [rbx]
 100d292:	add    eax,DWORD PTR [rbx]
 100d294:	add    eax,DWORD PTR [rbx]
 100d296:	add    eax,DWORD PTR [rbx]
 100d298:	add    eax,DWORD PTR [rbx]
 100d29a:	add    eax,DWORD PTR [rbx]
 100d29c:	add    eax,DWORD PTR [rbx]
 100d29e:	add    eax,DWORD PTR [rbx]
 100d2a0:	add    eax,DWORD PTR [rbx]
 100d2a2:	add    eax,DWORD PTR [rbx]
 100d2a4:	add    eax,DWORD PTR [rbx]
 100d2a6:	add    eax,DWORD PTR [rbx]
 100d2a8:	add    eax,DWORD PTR [rbx]
 100d2aa:	add    eax,DWORD PTR [rbx]
 100d2ac:	add    eax,DWORD PTR [rbx]
 100d2ae:	add    eax,DWORD PTR [rbx]
 100d2b0:	add    eax,DWORD PTR [rbx]
 100d2b2:	add    eax,DWORD PTR [rbx]
 100d2b4:	add    eax,DWORD PTR [rbx]
 100d2b6:	add    eax,DWORD PTR [rbx]
 100d2b8:	add    eax,DWORD PTR [rbx]
 100d2ba:	add    eax,DWORD PTR [rbx]
 100d2bc:	add    eax,DWORD PTR [rbx]
 100d2be:	add    eax,DWORD PTR [rbx]
 100d2c0:	add    eax,DWORD PTR [rbx]
 100d2c2:	add    eax,DWORD PTR [rbx]
 100d2c4:	add    eax,DWORD PTR [rbx]
 100d2c6:	add    eax,DWORD PTR [rcx]
 100d2c8:	add    eax,DWORD PTR [rcx]
 100d2ca:	add    eax,DWORD PTR [rbx]
 100d2cc:	add    eax,DWORD PTR [rbx]
 100d2ce:	add    eax,DWORD PTR [rcx]
 100d2d0:	add    eax,DWORD PTR [rcx]
 100d2d2:	add    eax,DWORD PTR [rbx]
 100d2d4:	add    eax,DWORD PTR [rbx]
 100d2d6:	add    eax,DWORD PTR [rbx]
 100d2d8:	add    eax,DWORD PTR [rbx]
 100d2da:	add    eax,DWORD PTR [rbx]
 100d2dc:	add    eax,DWORD PTR [rbx]
 100d2de:	add    eax,DWORD PTR [rbx]
 100d2e0:	add    eax,DWORD PTR [rbx]
 100d2e2:	add    eax,DWORD PTR [rbx]
 100d2e4:	add    eax,DWORD PTR [rbx]
 100d2e6:	add    eax,DWORD PTR [rbx]
 100d2e8:	add    eax,DWORD PTR [rbx]
 100d2ea:	add    eax,DWORD PTR [rbx]
 100d2ec:	add    eax,DWORD PTR [rbx]
 100d2ee:	add    eax,DWORD PTR [rbx]
 100d2f0:	add    eax,DWORD PTR [rbx]
 100d2f2:	add    eax,DWORD PTR [rbx]
 100d2f4:	add    eax,DWORD PTR [rbx]
 100d2f6:	add    eax,DWORD PTR [rbx]
 100d2f8:	add    eax,DWORD PTR [rbx]
 100d2fa:	add    eax,DWORD PTR [rbx]
 100d2fc:	add    eax,DWORD PTR [rbx]
 100d2fe:	add    eax,DWORD PTR [rbx]
 100d300:	add    eax,DWORD PTR [rbx]
 100d302:	add    eax,DWORD PTR [rbx]
 100d304:	add    eax,DWORD PTR [rbx]
 100d306:	add    eax,DWORD PTR [rbx]
 100d308:	add    eax,DWORD PTR [rcx]
 100d30a:	add    eax,DWORD PTR [rbx]
 100d30c:	add    eax,DWORD PTR [rbx]
 100d30e:	add    eax,DWORD PTR [rbx]
 100d310:	add    eax,DWORD PTR [rcx]
 100d312:	add    al,BYTE PTR [rdx]
 100d314:	int3   
 100d315:	int3   
 100d316:	int3   
 100d317:	int3   
 100d318:	int3   
 100d319:	int3   
 100d31a:	int3   
 100d31b:	int3   
 100d31c:	int3   
 100d31d:	int3   
 100d31e:	int3   
 100d31f:	int3   
 100d320:	rex push rbp
 100d322:	push   rbx
 100d323:	push   rsi
 100d324:	push   rdi
 100d325:	push   r12
 100d327:	push   r13
 100d329:	push   r14
 100d32b:	push   r15
 100d32d:	lea    rbp,[rsp-0x458]
 100d335:	sub    rsp,0x558
 100d33c:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 100d345:	mov    rax,QWORD PTR [rip+0x9dc4]        # 0x1017110
 100d34c:	xor    rax,rsp
 100d34f:	mov    QWORD PTR [rbp+0x440],rax
 100d356:	mov    ebx,r9d
 100d359:	mov    r13,r8
 100d35c:	mov    rdi,rdx
 100d35f:	mov    r12,rcx
 100d362:	movzx  esi,BYTE PTR [rbp+0x4c0]
 100d369:	mov    r15,QWORD PTR [rbp+0x4c8]
 100d370:	mov    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100d379:	xor    r14d,r14d
 100d37c:	test   BYTE PTR [rip+0xa6b1],0x4        # 0x1017a34
 100d383:	je     0x100d3c3
 100d385:	mov    rax,QWORD PTR [rip+0xd4f4]        # 0x101a880
 100d38c:	test   rax,rax
 100d38f:	je     0x100d3c3
 100d391:	cmp    QWORD PTR [rip+0x9d8f],0xffffffffffffffff        # 0x1017128
 100d399:	je     0x100d3c3
 100d39b:	mov    QWORD PTR [rsp+0x28],r14
 100d3a0:	mov    rax,QWORD PTR [rip+0xd4d9]        # 0x101a880
 100d3a7:	mov    QWORD PTR [rsp+0x20],rax
 100d3ac:	lea    r9,[rsp+0x30]
 100d3b1:	xor    r8d,r8d
 100d3b4:	xor    edx,edx
 100d3b6:	mov    rcx,QWORD PTR [rip+0x9d6b]        # 0x1017128
 100d3bd:	call   QWORD PTR [rip+0x9da5]        # 0x1017168
 100d3c3:	mov    DWORD PTR [r15],r14d
 100d3c6:	mov    r14d,ebx
 100d3c9:	mov    eax,0xef
 100d3ce:	cmp    ebx,0xf1
 100d3d4:	cmove  r14d,eax
 100d3d8:	nop    DWORD PTR [rax+rax*1+0x0]
 100d3e0:	mov    r9d,0x100
 100d3e6:	lea    r8,[rbp+0x240]
 100d3ed:	mov    edx,0x26
 100d3f2:	mov    rcx,QWORD PTR [rip+0xa627]        # 0x1017a20
 100d3f9:	call   QWORD PTR [rip+0xffffffffffff3fc9]        # 0x10013c8
 100d3ff:	lea    rdx,[rbp+0x240]
 100d406:	lea    rcx,[rbp+0x240]
 100d40d:	call   QWORD PTR [rip+0xffffffffffff3fad]        # 0x10013c0
 100d413:	cmp    ebx,0xf1
 100d419:	mov    eax,0x1
 100d41e:	je     0x100d424
 100d420:	movzx  eax,sil
 100d424:	movzx  edx,al
 100d427:	mov    ecx,r14d
 100d42a:	call   QWORD PTR [rip+0xffffffffffff3fc0]        # 0x10013f0
 100d430:	mov    r9,rax
 100d433:	mov    r8,r13
 100d436:	lea    rdx,[rbp+0x240]
 100d43d:	mov    rcx,rdi
 100d440:	call   QWORD PTR [rip+0xffffffffffff3e62]        # 0x10012a8
 100d446:	mov    r8,r12
 100d449:	mov    edx,0xff
 100d44e:	lea    rcx,[rbp+0x340]
 100d455:	call   QWORD PTR [rip+0xffffffffffff3d55]        # 0x10011b0
 100d45b:	test   rax,rax
 100d45e:	je     0x100da43
 100d464:	movsx  eax,BYTE PTR [rbp+0x340]
 100d46b:	add    eax,0xfffffff6
 100d46e:	cmp    eax,0x6e
 100d471:	ja     0x100d490
 100d473:	cdqe   
 100d475:	lea    rdx,[rip+0xffffffffffff2b84]        # 0x1000000
 100d47c:	movzx  eax,BYTE PTR [rdx+rax*1+0xdb40]
 100d484:	mov    ecx,DWORD PTR [rdx+rax*4+0xdae0]
 100d48b:	add    rcx,rdx
 100d48e:	jmp    rcx
 100d490:	mov    r9d,0x100
 100d496:	lea    r8,[rsp+0x40]
 100d49b:	mov    edx,0x27
 100d4a0:	mov    rcx,QWORD PTR [rip+0xa579]        # 0x1017a20
 100d4a7:	call   QWORD PTR [rip+0xffffffffffff3f1b]        # 0x10013c8
 100d4ad:	lea    rdx,[rsp+0x40]
 100d4b2:	lea    rcx,[rsp+0x40]
 100d4b7:	call   QWORD PTR [rip+0xffffffffffff3f03]        # 0x10013c0
 100d4bd:	mov    rdx,rdi
 100d4c0:	lea    rcx,[rsp+0x40]
 100d4c5:	call   QWORD PTR [rip+0xffffffffffff3e25]        # 0x10012f0
 100d4cb:	mov    r9d,0x100
 100d4d1:	lea    r8,[rbp+0x40]
 100d4d5:	mov    edx,0x28
 100d4da:	mov    rcx,QWORD PTR [rip+0xa53f]        # 0x1017a20
 100d4e1:	call   QWORD PTR [rip+0xffffffffffff3ee1]        # 0x10013c8
 100d4e7:	lea    rdx,[rbp+0x40]
 100d4eb:	lea    rcx,[rbp+0x40]
 100d4ef:	call   QWORD PTR [rip+0xffffffffffff3ecb]        # 0x10013c0
 100d4f5:	mov    rdx,rdi
 100d4f8:	lea    rcx,[rbp+0x40]
 100d4fc:	call   QWORD PTR [rip+0xffffffffffff3dee]        # 0x10012f0
 100d502:	movzx  edx,sil
 100d506:	mov    ecx,0x2f
 100d50b:	call   QWORD PTR [rip+0xffffffffffff3edf]        # 0x10013f0
 100d511:	mov    r8,rax
 100d514:	lea    rdx,[rip+0xffffffffffff4fcd]        # 0x10024e8
 100d51b:	mov    rcx,rdi
 100d51e:	call   QWORD PTR [rip+0xffffffffffff3d84]        # 0x10012a8
 100d524:	movzx  edx,sil
 100d528:	mov    ecx,0x23
 100d52d:	call   QWORD PTR [rip+0xffffffffffff3ebd]        # 0x10013f0
 100d533:	mov    r8,rax
 100d536:	lea    rdx,[rip+0xffffffffffff4fbb]        # 0x10024f8
 100d53d:	mov    rcx,rdi
 100d540:	call   QWORD PTR [rip+0xffffffffffff3d62]        # 0x10012a8
 100d546:	movzx  edx,sil
 100d54a:	mov    ecx,0x38
 100d54f:	call   QWORD PTR [rip+0xffffffffffff3e9b]        # 0x10013f0
 100d555:	mov    r8,rax
 100d558:	lea    rdx,[rip+0xffffffffffff4fa9]        # 0x1002508
 100d55f:	mov    rcx,rdi
 100d562:	call   QWORD PTR [rip+0xffffffffffff3d40]        # 0x10012a8
 100d568:	movzx  edx,sil
 100d56c:	mov    ecx,0x34
 100d571:	call   QWORD PTR [rip+0xffffffffffff3e79]        # 0x10013f0
 100d577:	mov    r8,rax
 100d57a:	lea    rdx,[rip+0xffffffffffff4f97]        # 0x1002518
 100d581:	mov    rcx,rdi
 100d584:	call   QWORD PTR [rip+0xffffffffffff3d1e]        # 0x10012a8
 100d58a:	movzx  edx,sil
 100d58e:	mov    ecx,0x30
 100d593:	call   QWORD PTR [rip+0xffffffffffff3e57]        # 0x10013f0
 100d599:	mov    r8,rax
 100d59c:	lea    rdx,[rip+0xffffffffffff4f85]        # 0x1002528
 100d5a3:	mov    rcx,rdi
 100d5a6:	call   QWORD PTR [rip+0xffffffffffff3cfc]        # 0x10012a8
 100d5ac:	movzx  edx,sil
 100d5b0:	mov    ecx,0x3e
 100d5b5:	call   QWORD PTR [rip+0xffffffffffff3e35]        # 0x10013f0
 100d5bb:	mov    r8,rax
 100d5be:	lea    rdx,[rip+0xffffffffffff4f73]        # 0x1002538
 100d5c5:	mov    rcx,rdi
 100d5c8:	call   QWORD PTR [rip+0xffffffffffff3cda]        # 0x10012a8
 100d5ce:	movzx  edx,sil
 100d5d2:	mov    ecx,0x3c
 100d5d7:	call   QWORD PTR [rip+0xffffffffffff3e13]        # 0x10013f0
 100d5dd:	mov    r8,rax
 100d5e0:	lea    rdx,[rip+0xffffffffffff4f61]        # 0x1002548
 100d5e7:	mov    rcx,rdi
 100d5ea:	call   QWORD PTR [rip+0xffffffffffff3cb8]        # 0x10012a8
 100d5f0:	movzx  edx,sil
 100d5f4:	mov    ecx,0x32
 100d5f9:	call   QWORD PTR [rip+0xffffffffffff3df1]        # 0x10013f0
 100d5ff:	mov    r8,rax
 100d602:	lea    rdx,[rip+0xffffffffffff4f4f]        # 0x1002558
 100d609:	mov    rcx,rdi
 100d60c:	call   QWORD PTR [rip+0xffffffffffff3c96]        # 0x10012a8
 100d612:	movzx  edx,sil
 100d616:	mov    ecx,0x3d
 100d61b:	call   QWORD PTR [rip+0xffffffffffff3dcf]        # 0x10013f0
 100d621:	mov    r8,rax
 100d624:	lea    rdx,[rip+0xffffffffffff4f3d]        # 0x1002568
 100d62b:	mov    rcx,rdi
 100d62e:	call   QWORD PTR [rip+0xffffffffffff3c74]        # 0x10012a8
 100d634:	movzx  edx,sil
 100d638:	mov    ecx,0x2d
 100d63d:	call   QWORD PTR [rip+0xffffffffffff3dad]        # 0x10013f0
 100d643:	mov    r8,rax
 100d646:	lea    rdx,[rip+0xffffffffffff4f2b]        # 0x1002578
 100d64d:	mov    rcx,rdi
 100d650:	call   QWORD PTR [rip+0xffffffffffff3c52]        # 0x10012a8
 100d656:	movzx  edx,sil
 100d65a:	mov    ecx,0x22
 100d65f:	call   QWORD PTR [rip+0xffffffffffff3d8b]        # 0x10013f0
 100d665:	mov    r8,rax
 100d668:	lea    rdx,[rip+0xffffffffffff4f19]        # 0x1002588
 100d66f:	mov    rcx,rdi
 100d672:	call   QWORD PTR [rip+0xffffffffffff3c30]        # 0x10012a8
 100d678:	movzx  edx,sil
 100d67c:	mov    ecx,0x3a
 100d681:	call   QWORD PTR [rip+0xffffffffffff3d69]        # 0x10013f0
 100d687:	mov    r8,rax
 100d68a:	lea    rdx,[rip+0xffffffffffff4f07]        # 0x1002598
 100d691:	mov    rcx,rdi
 100d694:	call   QWORD PTR [rip+0xffffffffffff3c0e]        # 0x10012a8
 100d69a:	movzx  edx,sil
 100d69e:	mov    ecx,0x3b
 100d6a3:	call   QWORD PTR [rip+0xffffffffffff3d47]        # 0x10013f0
 100d6a9:	mov    r8,rax
 100d6ac:	lea    rdx,[rip+0xffffffffffff4ef5]        # 0x10025a8
 100d6b3:	mov    rcx,rdi
 100d6b6:	call   QWORD PTR [rip+0xffffffffffff3bec]        # 0x10012a8
 100d6bc:	movzx  edx,sil
 100d6c0:	mov    ecx,0x7a
 100d6c5:	call   QWORD PTR [rip+0xffffffffffff3d25]        # 0x10013f0
 100d6cb:	mov    r8,rax
 100d6ce:	lea    rdx,[rip+0xffffffffffff4ee3]        # 0x10025b8
 100d6d5:	mov    rcx,rdi
 100d6d8:	call   QWORD PTR [rip+0xffffffffffff3bca]        # 0x10012a8
 100d6de:	movzx  edx,sil
 100d6e2:	mov    ecx,0x6c
 100d6e7:	call   QWORD PTR [rip+0xffffffffffff3d03]        # 0x10013f0
 100d6ed:	mov    r8,rax
 100d6f0:	lea    rdx,[rip+0xffffffffffff4ed1]        # 0x10025c8
 100d6f7:	mov    rcx,rdi
 100d6fa:	call   QWORD PTR [rip+0xffffffffffff3ba8]        # 0x10012a8
 100d700:	movzx  edx,sil
 100d704:	mov    ecx,0x6a
 100d709:	call   QWORD PTR [rip+0xffffffffffff3ce1]        # 0x10013f0
 100d70f:	mov    r8,rax
 100d712:	lea    rdx,[rip+0xffffffffffff4ebf]        # 0x10025d8
 100d719:	mov    rcx,rdi
 100d71c:	call   QWORD PTR [rip+0xffffffffffff3b86]        # 0x10012a8
 100d722:	movzx  edx,sil
 100d726:	mov    ecx,0xef
 100d72b:	call   QWORD PTR [rip+0xffffffffffff3cbf]        # 0x10013f0
 100d731:	mov    r8,rax
 100d734:	lea    rdx,[rip+0xffffffffffff4ead]        # 0x10025e8
 100d73b:	mov    rcx,rdi
 100d73e:	call   QWORD PTR [rip+0xffffffffffff3b64]        # 0x10012a8
 100d744:	movzx  edx,sil
 100d748:	mov    ecx,0x63
 100d74d:	call   QWORD PTR [rip+0xffffffffffff3c9d]        # 0x10013f0
 100d753:	mov    r8,rax
 100d756:	lea    rdx,[rip+0xffffffffffff4e9b]        # 0x10025f8
 100d75d:	mov    rcx,rdi
 100d760:	call   QWORD PTR [rip+0xffffffffffff3b42]        # 0x10012a8
 100d766:	movzx  edx,sil
 100d76a:	mov    ecx,0x24
 100d76f:	call   QWORD PTR [rip+0xffffffffffff3c7b]        # 0x10013f0
 100d775:	mov    r8,rax
 100d778:	lea    rdx,[rip+0xffffffffffff4e89]        # 0x1002608
 100d77f:	mov    rcx,rdi
 100d782:	call   QWORD PTR [rip+0xffffffffffff3b20]        # 0x10012a8
 100d788:	movzx  edx,sil
 100d78c:	mov    ecx,0x7f
 100d791:	call   QWORD PTR [rip+0xffffffffffff3c59]        # 0x10013f0
 100d797:	mov    r8,rax
 100d79a:	lea    rdx,[rip+0xffffffffffff4e77]        # 0x1002618
 100d7a1:	mov    rcx,rdi
 100d7a4:	call   QWORD PTR [rip+0xffffffffffff3afe]        # 0x10012a8
 100d7aa:	movzx  edx,sil
 100d7ae:	mov    ecx,0x62
 100d7b3:	call   QWORD PTR [rip+0xffffffffffff3c37]        # 0x10013f0
 100d7b9:	mov    r8,rax
 100d7bc:	lea    rdx,[rip+0xffffffffffff4e65]        # 0x1002628
 100d7c3:	mov    rcx,rdi
 100d7c6:	call   QWORD PTR [rip+0xffffffffffff3adc]        # 0x10012a8
 100d7cc:	movzx  edx,sil
 100d7d0:	mov    ecx,0xf0
 100d7d5:	call   QWORD PTR [rip+0xffffffffffff3c15]        # 0x10013f0
 100d7db:	mov    r8,rax
 100d7de:	lea    rdx,[rip+0xffffffffffff4e53]        # 0x1002638
 100d7e5:	mov    rcx,rdi
 100d7e8:	call   QWORD PTR [rip+0xffffffffffff3aba]        # 0x10012a8
 100d7ee:	movzx  edx,sil
 100d7f2:	mov    ecx,0x28
 100d7f7:	call   QWORD PTR [rip+0xffffffffffff3bf3]        # 0x10013f0
 100d7fd:	mov    r8,rax
 100d800:	lea    rdx,[rip+0xffffffffffff4e41]        # 0x1002648
 100d807:	mov    rcx,rdi
 100d80a:	call   QWORD PTR [rip+0xffffffffffff3a98]        # 0x10012a8
 100d810:	movzx  edx,sil
 100d814:	mov    ecx,0x29
 100d819:	call   QWORD PTR [rip+0xffffffffffff3bd1]        # 0x10013f0
 100d81f:	mov    r8,rax
 100d822:	lea    rdx,[rip+0xffffffffffff4e2f]        # 0x1002658
 100d829:	mov    rcx,rdi
 100d82c:	call   QWORD PTR [rip+0xffffffffffff3a76]        # 0x10012a8
 100d832:	movzx  edx,sil
 100d836:	mov    ecx,0x2a
 100d83b:	call   QWORD PTR [rip+0xffffffffffff3baf]        # 0x10013f0
 100d841:	mov    r8,rax
 100d844:	lea    rdx,[rip+0xffffffffffff4e1d]        # 0x1002668
 100d84b:	mov    rcx,rdi
 100d84e:	call   QWORD PTR [rip+0xffffffffffff3a54]        # 0x10012a8
 100d854:	movzx  edx,sil
 100d858:	mov    ecx,0x2b
 100d85d:	call   QWORD PTR [rip+0xffffffffffff3b8d]        # 0x10013f0
 100d863:	mov    r8,rax
 100d866:	lea    rdx,[rip+0xffffffffffff4e0b]        # 0x1002678
 100d86d:	mov    rcx,rdi
 100d870:	call   QWORD PTR [rip+0xffffffffffff3a32]        # 0x10012a8
 100d876:	mov    r9d,0x100
 100d87c:	lea    r8,[rbp+0x140]
 100d883:	mov    edx,0x29
 100d888:	mov    rcx,QWORD PTR [rip+0xa191]        # 0x1017a20
 100d88f:	call   QWORD PTR [rip+0xffffffffffff3b33]        # 0x10013c8
 100d895:	lea    rdx,[rbp+0x140]
 100d89c:	lea    rcx,[rbp+0x140]
 100d8a3:	call   QWORD PTR [rip+0xffffffffffff3b17]        # 0x10013c0
 100d8a9:	mov    rdx,rdi
 100d8ac:	lea    rcx,[rbp+0x140]
 100d8b3:	call   QWORD PTR [rip+0xffffffffffff3a37]        # 0x10012f0
 100d8b9:	jmp    0x100d3e0
 100d8be:	cmp    ebx,0x23
 100d8c1:	je     0x100d8ee
 100d8c3:	cmp    ebx,0x2f
 100d8c6:	je     0x100d8ee
 100d8c8:	cmp    ebx,0x63
 100d8cb:	je     0x100d988
 100d8d1:	cmp    ebx,0xef
 100d8d7:	je     0x100d988
 100d8dd:	jmp    0x100d9d9
 100d8e2:	mov    ebx,0x2f
 100d8e7:	jmp    0x100d8ee
 100d8e9:	mov    ebx,0x23
 100d8ee:	mov    DWORD PTR [r15],0x1
 100d8f5:	jmp    0x100d9e0
 100d8fa:	mov    ebx,0x38
 100d8ff:	jmp    0x100d9d9
 100d904:	mov    ebx,0x34
 100d909:	jmp    0x100d9d9
 100d90e:	mov    ebx,0x29
 100d913:	cmp    BYTE PTR [rbp+0x341],0x65
 100d91a:	mov    eax,0x30
 100d91f:	cmovne ebx,eax
 100d922:	jmp    0x100d9d9
 100d927:	mov    ebx,0x3e
 100d92c:	jmp    0x100d9d9
 100d931:	mov    ebx,0x3c
 100d936:	jmp    0x100d9d9
 100d93b:	mov    ebx,0x32
 100d940:	jmp    0x100d9d9
 100d945:	mov    ebx,0x2d
 100d94a:	jmp    0x100d9d9
 100d94f:	mov    ebx,0x22
 100d954:	jmp    0x100d9d9
 100d959:	mov    ebx,0x3a
 100d95e:	jmp    0x100d9d9
 100d960:	mov    ebx,0x3b
 100d965:	jmp    0x100d9d9
 100d967:	mov    ebx,0x7a
 100d96c:	jmp    0x100d9d9
 100d96e:	mov    ebx,0x6c
 100d973:	jmp    0x100d9d9
 100d975:	mov    ebx,0x6a
 100d97a:	jmp    0x100d9d9
 100d97c:	mov    ebx,0xef
 100d981:	jmp    0x100d988
 100d983:	mov    ebx,0x63
 100d988:	mov    DWORD PTR [r15],0x2
 100d98f:	jmp    0x100d9e0
 100d991:	mov    ebx,0x24
 100d996:	jmp    0x100d9d9
 100d998:	mov    ebx,0x7f
 100d99d:	jmp    0x100d9d9
 100d99f:	mov    ebx,0x62
 100d9a4:	jmp    0x100d9d9
 100d9a6:	mov    ebx,0xf0
 100d9ab:	jmp    0x100d9d9
 100d9ad:	movzx  eax,BYTE PTR [rbp+0x341]
 100d9b4:	cmp    al,0x32
 100d9b6:	je     0x100d9d4
 100d9b8:	cmp    al,0x65
 100d9ba:	je     0x100d9cd
 100d9bc:	mov    ebx,0x2b
 100d9c1:	cmp    al,0x6f
 100d9c3:	mov    eax,0x3d
 100d9c8:	cmovne ebx,eax
 100d9cb:	jmp    0x100d9d9
 100d9cd:	mov    ebx,0x28
 100d9d2:	jmp    0x100d9d9
 100d9d4:	mov    ebx,0x2a
 100d9d9:	mov    DWORD PTR [r15],0x3
 100d9e0:	test   BYTE PTR [rip+0xa04d],0x2        # 0x1017a34
 100d9e7:	je     0x100da11
 100d9e9:	mov    rax,QWORD PTR [rip+0xcae8]        # 0x101a4d8
 100d9f0:	test   rax,rax
 100d9f3:	je     0x100da11
 100d9f5:	mov    r9d,ebx
 100d9f8:	mov    r8,QWORD PTR [rip+0xcad9]        # 0x101a4d8
 100d9ff:	mov    edx,0xb5400
 100da04:	mov    rcx,QWORD PTR [rip+0xc835]        # 0x101a240
 100da0b:	call   0x10128c0
 100da10:	nop
 100da11:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100da17:	je     0x100da3f
 100da19:	test   BYTE PTR [rip+0xa014],0x4        # 0x1017a34
 100da20:	je     0x100da3f
 100da22:	mov    rcx,QWORD PTR [rip+0x96ff]        # 0x1017128
 100da29:	cmp    rcx,0xffffffffffffffff
 100da2d:	je     0x100da3f
 100da2f:	lea    r9,[rsp+0x30]
 100da34:	xor    r8d,r8d
 100da37:	xor    edx,edx
 100da39:	call   QWORD PTR [rip+0x9739]        # 0x1017178
 100da3f:	mov    eax,ebx
 100da41:	jmp    0x100dabd
 100da43:	test   BYTE PTR [rip+0x9fea],0x2        # 0x1017a34
 100da4a:	je     0x100da8d
 100da4c:	mov    rax,QWORD PTR [rip+0xcaad]        # 0x101a500
 100da53:	test   rax,rax
 100da56:	je     0x100da8d
 100da58:	cmp    QWORD PTR [rip+0x96c8],0xffffffffffffffff        # 0x1017128
 100da60:	je     0x100da8d
 100da62:	mov    QWORD PTR [rsp+0x20],0x0
 100da6b:	mov    r9,QWORD PTR [rip+0xca8e]        # 0x101a500
 100da72:	mov    r8d,0x83800
 100da78:	mov    rdx,QWORD PTR [rip+0xc771]        # 0x101a1f0
 100da7f:	mov    rcx,QWORD PTR [rip+0x96a2]        # 0x1017128
 100da86:	call   QWORD PTR [rip+0x96cc]        # 0x1017158
 100da8c:	nop
 100da8d:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100da93:	je     0x100dabb
 100da95:	test   BYTE PTR [rip+0x9f98],0x4        # 0x1017a34
 100da9c:	je     0x100dabb
 100da9e:	mov    rcx,QWORD PTR [rip+0x9683]        # 0x1017128
 100daa5:	cmp    rcx,0xffffffffffffffff
 100daa9:	je     0x100dabb
 100daab:	lea    r9,[rsp+0x30]
 100dab0:	xor    r8d,r8d
 100dab3:	xor    edx,edx
 100dab5:	call   QWORD PTR [rip+0x96bd]        # 0x1017178
 100dabb:	xor    eax,eax
 100dabd:	mov    rcx,QWORD PTR [rbp+0x440]
 100dac4:	xor    rcx,rsp
 100dac7:	call   0x1014450
 100dacc:	add    rsp,0x558
 100dad3:	pop    r15
 100dad5:	pop    r14
 100dad7:	pop    r13
 100dad9:	pop    r12
 100dadb:	pop    rdi
 100dadc:	pop    rsi
 100dadd:	pop    rbx
 100dade:	pop    rbp
 100dadf:	ret    
 100dae0:	mov    esi,0x980000d8
 100dae5:	fld    DWORD PTR [rax]
 100dae7:	add    BYTE PTR [rcx-0x27],bl
 100daea:	add    BYTE PTR [rax],al
 100daec:	rex.WRXB fld DWORD PTR [r8]
 100daef:	add    BYTE PTR [rdi-0x27],ah
 100daf2:	add    BYTE PTR [rax],al
 100daf4:	jmp    0xffffffffa700dbd1
 100daf9:	fld    DWORD PTR [rax]
 100dafb:	add    BYTE PTR [rdi-0x7cffff27],bl
 100db01:	fld    DWORD PTR [rax]
 100db03:	add    BYTE PTR [rbx],bh
 100db05:	fld    DWORD PTR [rax]
 100db07:	add    dl,ah
 100db09:	fadd   DWORD PTR [rax]
 100db0b:	add    BYTE PTR [rbp+0x750000d9],ch
 100db11:	fld    DWORD PTR [rax]
 100db13:	add    BYTE PTR [rdi],ah
 100db15:	fld    DWORD PTR [rax]
 100db17:	add    dl,bh
 100db19:	fadd   DWORD PTR [rax]
 100db1b:	add    BYTE PTR [rcx],dh
 100db1d:	fld    DWORD PTR [rax]
 100db1f:	add    BYTE PTR [rsi-0x27],ch
 100db22:	add    BYTE PTR [rax],al
 100db24:	(bad)  
 100db25:	fld    DWORD PTR [rax]
 100db27:	add    BYTE PTR [rcx+rbx*8],al
 100db2a:	add    BYTE PTR [rax],al
 100db2c:	(bad)  
 100db2d:	fld    DWORD PTR [rax]
 100db2f:	add    BYTE PTR [rcx+0x7c0000d9],dl
 100db35:	fld    DWORD PTR [rax]
 100db37:	add    BYTE PTR [rbp-0x27],al
 100db3a:	add    BYTE PTR [rax],al
 100db3c:	nop
 100db3d:	(bad)  
 100db3e:	add    BYTE PTR [rax],al
 100db40:	add    BYTE PTR [rdi],dl
 100db42:	(bad)  
 100db43:	(bad)  
 100db44:	(bad)  
 100db45:	(bad)  
 100db46:	(bad)  
 100db47:	(bad)  
 100db48:	(bad)  
 100db49:	(bad)  
 100db4a:	(bad)  
 100db4b:	(bad)  
 100db4c:	(bad)  
 100db4d:	(bad)  
 100db4e:	(bad)  
 100db4f:	(bad)  
 100db50:	(bad)  
 100db51:	(bad)  
 100db52:	(bad)  
 100db53:	(bad)  
 100db54:	(bad)  
 100db55:	(bad)  
 100db56:	(bad)  
 100db57:	(bad)  
 100db58:	(bad)  
 100db59:	(bad)  
 100db5a:	(bad)  
 100db5b:	(bad)  
 100db5c:	(bad)  
 100db5d:	(bad)  
 100db5e:	(bad)  
 100db5f:	(bad)  
 100db60:	(bad)  
 100db61:	(bad)  
 100db62:	(bad)  
 100db63:	(bad)  
 100db64:	(bad)  
 100db65:	(bad)  
 100db66:	(bad)  
 100db67:	(bad)  
 100db68:	(bad)  
 100db69:	(bad)  
 100db6a:	(bad)  
 100db6b:	(bad)  
 100db6c:	(bad)  
 100db6d:	(bad)  
 100db6e:	(bad)  
 100db6f:	(bad)  
 100db70:	(bad)  
 100db71:	(bad)  
 100db72:	(bad)  
 100db73:	(bad)  
 100db74:	(bad)  
 100db75:	(bad)  
 100db76:	(bad)  
 100db77:	(bad)  
 100db78:	add    DWORD PTR [rdi],edx
 100db7a:	add    dl,BYTE PTR [rdi]
 100db7c:	(bad)  
 100db7d:	(bad)  
 100db7e:	(bad)  
 100db7f:	add    edx,DWORD PTR [rdi]
 100db81:	(bad)  
 100db82:	(bad)  
 100db83:	add    al,0x17
 100db85:	(bad)  
 100db86:	(bad)  
 100db87:	(bad)  
 100db88:	(bad)  
 100db89:	(bad)  
 100db8a:	add    eax,0x17080706
 100db8f:	(bad)  
 100db90:	(bad)  
 100db91:	(bad)  
 100db92:	(bad)  
 100db93:	(bad)  
 100db94:	(bad)  
 100db95:	(bad)  
 100db96:	(bad)  
 100db97:	(bad)  
 100db98:	or     DWORD PTR [rdx],ecx
 100db9a:	or     ecx,DWORD PTR [rcx*1+0x170e1717]
 100dba1:	(bad)  
 100dba2:	(bad)  
 100dba3:	movups xmm2,XMMWORD PTR [rdi]
 100dba6:	(bad)  
 100dba7:	(bad)  
 100dba8:	adc    DWORD PTR [rdx],edx
 100dbaa:	adc    edx,DWORD PTR [rdi+rdx*1]
 100dbad:	adc    eax,0xcccccc16
 100dbb2:	int3   
 100dbb3:	int3   
 100dbb4:	int3   
 100dbb5:	int3   
 100dbb6:	int3   
 100dbb7:	int3   
 100dbb8:	int3   
 100dbb9:	int3   
 100dbba:	int3   
 100dbbb:	int3   
 100dbbc:	int3   
 100dbbd:	int3   
 100dbbe:	int3   
 100dbbf:	int3   
 100dbc0:	rex push rbx
 100dbc2:	push   rbp
 100dbc3:	push   rsi
 100dbc4:	push   rdi
 100dbc5:	sub    rsp,0x258
 100dbcc:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 100dbd5:	mov    rax,QWORD PTR [rip+0x9534]        # 0x1017110
 100dbdc:	xor    rax,rsp
 100dbdf:	mov    QWORD PTR [rsp+0x240],rax
 100dbe7:	mov    rbx,r9
 100dbea:	mov    rbp,r8
 100dbed:	mov    rdi,rdx
 100dbf0:	mov    rsi,rcx
 100dbf3:	mov    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100dbfc:	test   BYTE PTR [rip+0x9e31],0x4        # 0x1017a34
 100dc03:	je     0x100dc47
 100dc05:	mov    rax,QWORD PTR [rip+0xcc64]        # 0x101a870
 100dc0c:	test   rax,rax
 100dc0f:	je     0x100dc47
 100dc11:	cmp    QWORD PTR [rip+0x950f],0xffffffffffffffff        # 0x1017128
 100dc19:	je     0x100dc47
 100dc1b:	mov    QWORD PTR [rsp+0x28],0x0
 100dc24:	mov    rax,QWORD PTR [rip+0xcc45]        # 0x101a870
 100dc2b:	mov    QWORD PTR [rsp+0x20],rax
 100dc30:	lea    r9,[rsp+0x30]
 100dc35:	xor    r8d,r8d
 100dc38:	xor    edx,edx
 100dc3a:	mov    rcx,QWORD PTR [rip+0x94e7]        # 0x1017128
 100dc41:	call   QWORD PTR [rip+0x9521]        # 0x1017168
 100dc47:	mov    r8d,DWORD PTR [rsp+0x2a8]
 100dc4f:	lea    eax,[r8-0x24]
 100dc53:	lea    rdx,[rip+0xffffffffffff23a6]        # 0x1000000
 100dc5a:	cmp    eax,0x5b
 100dc5d:	ja     0x100dcf9
 100dc63:	cdqe   
 100dc65:	movzx  eax,BYTE PTR [rdx+rax*1+0xdfd4]
 100dc6d:	mov    ecx,DWORD PTR [rdx+rax*4+0xdfcc]
 100dc74:	add    rcx,rdx
 100dc77:	jmp    rcx
 100dc79:	test   BYTE PTR [rip+0x9db4],0x2        # 0x1017a34
 100dc80:	je     0x100dcc3
 100dc82:	mov    rax,QWORD PTR [rip+0xc867]        # 0x101a4f0
 100dc89:	test   rax,rax
 100dc8c:	je     0x100dcc3
 100dc8e:	cmp    QWORD PTR [rip+0x9492],0xffffffffffffffff        # 0x1017128
 100dc96:	je     0x100dcc3
 100dc98:	mov    QWORD PTR [rsp+0x20],0x0
 100dca1:	mov    r9,QWORD PTR [rip+0xc848]        # 0x101a4f0
 100dca8:	mov    r8d,0xc0000
 100dcae:	mov    rdx,QWORD PTR [rip+0xc553]        # 0x101a208
 100dcb5:	mov    rcx,QWORD PTR [rip+0x946c]        # 0x1017128
 100dcbc:	call   QWORD PTR [rip+0x9496]        # 0x1017158
 100dcc2:	nop
 100dcc3:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100dcc9:	je     0x100dcf1
 100dccb:	test   BYTE PTR [rip+0x9d62],0x4        # 0x1017a34
 100dcd2:	je     0x100dcf1
 100dcd4:	mov    rcx,QWORD PTR [rip+0x944d]        # 0x1017128
 100dcdb:	cmp    rcx,0xffffffffffffffff
 100dcdf:	je     0x100dcf1
 100dce1:	lea    r9,[rsp+0x30]
 100dce6:	xor    r8d,r8d
 100dce9:	xor    edx,edx
 100dceb:	call   QWORD PTR [rip+0x9487]        # 0x1017178
 100dcf1:	or     eax,0xffffffff
 100dcf4:	jmp    0x100dfb0
 100dcf9:	test   rbx,rbx
 100dcfc:	je     0x100de38
 100dd02:	lea    eax,[r8-0x22]
 100dd06:	cmp    eax,0xce
 100dd0b:	ja     0x100de38
 100dd11:	cdqe   
 100dd13:	movzx  eax,BYTE PTR [rdx+rax*1+0xe04c]
 100dd1b:	mov    ecx,DWORD PTR [rdx+rax*4+0xe030]
 100dd22:	add    rcx,rdx
 100dd25:	jmp    rcx
 100dd27:	mov    r9d,DWORD PTR [rsp+0x2a0]
 100dd2f:	lea    eax,[r9-0x22]
 100dd33:	cmp    eax,0xcf
 100dd38:	ja     0x100ddb2
 100dd3a:	cdqe   
 100dd3c:	movzx  eax,BYTE PTR [rdx+rax*1+0xe15c]
 100dd44:	mov    ecx,DWORD PTR [rdx+rax*4+0xe11c]
 100dd4b:	add    rcx,rdx
 100dd4e:	jmp    rcx
 100dd50:	xor    ebx,ebx
 100dd52:	jmp    0x100ddcc
 100dd54:	lea    rbx,[rbx*2+0x1]
 100dd5c:	jmp    0x100ddcc
 100dd5e:	mov    ebx,0x19
 100dd63:	jmp    0x100ddcc
 100dd65:	mov    ebx,0x18
 100dd6a:	jmp    0x100ddcc
 100dd6c:	mov    ebx,0x1
 100dd71:	jmp    0x100ddcc
 100dd73:	mov    ebx,0x3
 100dd78:	jmp    0x100ddcc
 100dd7a:	mov    ebx,0x6
 100dd7f:	jmp    0x100ddcc
 100dd81:	mov    ebx,0xc
 100dd86:	jmp    0x100ddcc
 100dd88:	mov    ebx,0x14
 100dd8d:	jmp    0x100ddcc
 100dd8f:	mov    ebx,0x29
 100dd94:	jmp    0x100ddcc
 100dd96:	mov    ebx,0xb
 100dd9b:	jmp    0x100ddcc
 100dd9d:	mov    ebx,0x11
 100dda2:	jmp    0x100ddcc
 100dda4:	mov    ebx,0x1c
 100dda9:	jmp    0x100ddcc
 100ddab:	mov    ebx,0x23
 100ddb0:	jmp    0x100ddcc
 100ddb2:	mov    eax,0x55555556
 100ddb7:	imul   ebx
 100ddb9:	mov    eax,edx
 100ddbb:	shr    eax,0x1f
 100ddbe:	add    edx,eax
 100ddc0:	lea    eax,[rbx*2+0x3]
 100ddc7:	add    eax,edx
 100ddc9:	movsxd rbx,eax
 100ddcc:	sub    r8d,0x63
 100ddd0:	je     0x100dde1
 100ddd2:	sub    r8d,0x84
 100ddd9:	je     0x100dde1
 100dddb:	cmp    r8d,0x8
 100dddf:	jne    0x100de0e
 100dde1:	cmp    r9d,0xef
 100dde8:	je     0x100de0e
 100ddea:	cmp    r9d,0xe7
 100ddf1:	je     0x100de0e
 100ddf3:	add    rbx,rbx
 100ddf6:	jmp    0x100de0e
 100ddf8:	mov    eax,DWORD PTR [rsp+0x2a0]
 100ddff:	cmp    eax,0x23
 100de02:	je     0x100de38
 100de04:	cmp    eax,0x22
 100de07:	je     0x100de38
 100de09:	cmp    eax,0x63
 100de0c:	je     0x100de38
 100de0e:	mov    eax,0x7fff
 100de13:	cmp    rbx,rax
 100de16:	cmovg  rbx,rax
 100de1a:	jmp    0x100de3a
 100de1c:	mov    ebx,0x6
 100de21:	jmp    0x100de3a
 100de23:	mov    ebx,0xc
 100de28:	jmp    0x100de3a
 100de2a:	mov    ebx,0x10
 100de2f:	jmp    0x100de3a
 100de31:	mov    ebx,0x14
 100de36:	jmp    0x100de3a
 100de38:	xor    ebx,ebx
 100de3a:	cmp    DWORD PTR [rsp+0x2b0],0x0
 100de42:	je     0x100df4f
 100de48:	mov    r9d,0x100
 100de4e:	lea    r8,[rsp+0x40]
 100de53:	mov    edx,0x2a
 100de58:	mov    rcx,QWORD PTR [rip+0x9bc1]        # 0x1017a20
 100de5f:	call   QWORD PTR [rip+0xffffffffffff3563]        # 0x10013c8
 100de65:	lea    rdx,[rsp+0x40]
 100de6a:	lea    rcx,[rsp+0x40]
 100de6f:	call   QWORD PTR [rip+0xffffffffffff354b]        # 0x10013c0
 100de75:	mov    r9,rbx
 100de78:	mov    r8,rbp
 100de7b:	lea    rdx,[rsp+0x40]
 100de80:	mov    rcx,rdi
 100de83:	call   QWORD PTR [rip+0xffffffffffff341f]        # 0x10012a8
 100de89:	mov    r8,rsi
 100de8c:	mov    edx,0xff
 100de91:	lea    rcx,[rsp+0x140]
 100de99:	call   QWORD PTR [rip+0xffffffffffff3311]        # 0x10011b0
 100de9f:	test   rax,rax
 100dea2:	jne    0x100df34
 100dea8:	test   BYTE PTR [rip+0x9b85],0x2        # 0x1017a34
 100deaf:	je     0x100def1
 100deb1:	mov    rax,QWORD PTR [rip+0xc5f8]        # 0x101a4b0
 100deb8:	test   rax,rax
 100debb:	je     0x100def1
 100debd:	cmp    QWORD PTR [rip+0x9263],0xffffffffffffffff        # 0x1017128
 100dec5:	je     0x100def1
 100dec7:	mov    QWORD PTR [rsp+0x20],0x0
 100ded0:	mov    r9,QWORD PTR [rip+0xc5d9]        # 0x101a4b0
 100ded7:	mov    r8d,0xed800
 100dedd:	mov    rdx,QWORD PTR [rip+0xc344]        # 0x101a228
 100dee4:	mov    rcx,QWORD PTR [rip+0x923d]        # 0x1017128
 100deeb:	call   QWORD PTR [rip+0x9267]        # 0x1017158
 100def1:	mov    edx,0x2b
 100def6:	mov    rcx,rdi
 100def9:	call   0x10118b0
 100defe:	nop
 100deff:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100df05:	je     0x100df2d
 100df07:	test   BYTE PTR [rip+0x9b26],0x4        # 0x1017a34
 100df0e:	je     0x100df2d
 100df10:	mov    rcx,QWORD PTR [rip+0x9211]        # 0x1017128
 100df17:	cmp    rcx,0xffffffffffffffff
 100df1b:	je     0x100df2d
 100df1d:	lea    r9,[rsp+0x30]
 100df22:	xor    r8d,r8d
 100df25:	xor    edx,edx
 100df27:	call   QWORD PTR [rip+0x924b]        # 0x1017178
 100df2d:	mov    eax,0x8000
 100df32:	jmp    0x100dfb0
 100df34:	cmp    BYTE PTR [rsp+0x140],0xa
 100df3c:	je     0x100df4f
 100df3e:	lea    rcx,[rsp+0x140]
 100df46:	call   QWORD PTR [rip+0xffffffffffff334c]        # 0x1001298
 100df4c:	movsxd rbx,eax
 100df4f:	test   BYTE PTR [rip+0x9ade],0x2        # 0x1017a34
 100df56:	je     0x100df80
 100df58:	mov    rax,QWORD PTR [rip+0xc541]        # 0x101a4a0
 100df5f:	test   rax,rax
 100df62:	je     0x100df80
 100df64:	mov    r9,rbx
 100df67:	mov    r8,QWORD PTR [rip+0xc532]        # 0x101a4a0
 100df6e:	mov    edx,0xf0c00
 100df73:	mov    rcx,QWORD PTR [rip+0xc2fe]        # 0x101a278
 100df7a:	call   0x10128c0
 100df7f:	nop
 100df80:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100df86:	je     0x100dfae
 100df88:	test   BYTE PTR [rip+0x9aa5],0x4        # 0x1017a34
 100df8f:	je     0x100dfae
 100df91:	mov    rcx,QWORD PTR [rip+0x9190]        # 0x1017128
 100df98:	cmp    rcx,0xffffffffffffffff
 100df9c:	je     0x100dfae
 100df9e:	lea    r9,[rsp+0x30]
 100dfa3:	xor    r8d,r8d
 100dfa6:	xor    edx,edx
 100dfa8:	call   QWORD PTR [rip+0x91ca]        # 0x1017178
 100dfae:	mov    eax,ebx
 100dfb0:	mov    rcx,QWORD PTR [rsp+0x240]
 100dfb8:	xor    rcx,rsp
 100dfbb:	call   0x1014450
 100dfc0:	add    rsp,0x258
 100dfc7:	pop    rdi
 100dfc8:	pop    rsi
 100dfc9:	pop    rbp
 100dfca:	pop    rbx
 100dfcb:	ret    
 100dfcc:	jns    0x100dfaa
 100dfce:	add    BYTE PTR [rax],al
 100dfd0:	stc    
 100dfd1:	fadd   QWORD PTR [rax]
 100dfd3:	add    BYTE PTR [rax],al
 100dfd5:	add    DWORD PTR [rcx],eax
 100dfd7:	add    DWORD PTR [rcx],eax
 100dfd9:	add    DWORD PTR [rcx],eax
 100dfdb:	add    DWORD PTR [rcx],eax
 100dfdd:	add    DWORD PTR [rcx],eax
 100dfdf:	add    DWORD PTR [rax],eax
 100dfe1:	add    DWORD PTR [rax],eax
 100dfe3:	add    DWORD PTR [rax],eax
 100dfe5:	add    DWORD PTR [rcx],eax
 100dfe7:	add    DWORD PTR [rax],eax
 100dfe9:	add    DWORD PTR [rax],eax
 100dfeb:	add    BYTE PTR [rax],al
 100dfed:	add    BYTE PTR [rax],al
 100dfef:	add    DWORD PTR [rcx],eax
 100dff1:	add    DWORD PTR [rcx],eax
 100dff3:	add    DWORD PTR [rcx],eax
 100dff5:	add    DWORD PTR [rcx],eax
 100dff7:	add    DWORD PTR [rcx],eax
 100dff9:	add    DWORD PTR [rcx],eax
 100dffb:	add    DWORD PTR [rcx],eax
 100dffd:	add    DWORD PTR [rcx],eax
 100dfff:	add    DWORD PTR [rcx],eax
 100e001:	add    DWORD PTR [rcx],eax
 100e003:	add    DWORD PTR [rcx],eax
 100e005:	add    DWORD PTR [rcx],eax
 100e007:	add    DWORD PTR [rcx],eax
 100e009:	add    DWORD PTR [rcx],eax
 100e00b:	add    DWORD PTR [rcx],eax
 100e00d:	add    DWORD PTR [rcx],eax
 100e00f:	add    DWORD PTR [rcx],eax
 100e011:	add    DWORD PTR [rcx],eax
 100e013:	add    DWORD PTR [rcx],eax
 100e015:	add    DWORD PTR [rcx],eax
 100e017:	add    DWORD PTR [rcx],eax
 100e019:	add    DWORD PTR [rax],eax
 100e01b:	add    DWORD PTR [rax],eax
 100e01d:	add    DWORD PTR [rcx],eax
 100e01f:	add    DWORD PTR [rcx],eax
 100e021:	add    DWORD PTR [rcx],eax
 100e023:	add    DWORD PTR [rcx],eax
 100e025:	add    DWORD PTR [rcx],eax
 100e027:	add    DWORD PTR [rcx],eax
 100e029:	add    DWORD PTR [rax],eax
 100e02b:	add    DWORD PTR [rcx],eax
 100e02d:	add    DWORD PTR [rcx],eax
 100e02f:	add    al,bh
 100e031:	fld    QWORD PTR [rax]
 100e033:	add    BYTE PTR [rdi],ah
 100e035:	fld    QWORD PTR [rax]
 100e037:	add    BYTE PTR [rsi+rbx*8],bl
 100e03a:	add    BYTE PTR [rax],al
 100e03c:	and    ebx,esi
 100e03e:	add    BYTE PTR [rax],al
 100e040:	sub    bl,dh
 100e042:	add    BYTE PTR [rax],al
 100e044:	xor    esi,ebx
 100e046:	add    BYTE PTR [rax],al
 100e048:	cmp    dh,bl
 100e04a:	add    BYTE PTR [rax],al
 100e04c:	add    BYTE PTR [rcx],al
 100e04e:	(bad)  
 100e04f:	add    BYTE PTR [rsi],al
 100e051:	(bad)  
 100e052:	add    al,BYTE PTR [rbx]
 100e054:	add    al,0x5
 100e056:	(bad)  
 100e057:	add    BYTE PTR [rsi],al
 100e059:	add    DWORD PTR [rsi],eax
 100e05b:	(bad)  
 100e05c:	(bad)  
 100e05d:	(bad)  
 100e05e:	(bad)  
 100e05f:	(bad)  
 100e060:	(bad)  
 100e061:	(bad)  
 100e062:	(bad)  
 100e063:	(bad)  
 100e064:	(bad)  
 100e065:	(bad)  
 100e066:	(bad)  
 100e067:	(bad)  
 100e068:	(bad)  
 100e069:	(bad)  
 100e06a:	(bad)  
 100e06b:	(bad)  
 100e06c:	(bad)  
 100e06d:	(bad)  
 100e06e:	(bad)  
 100e06f:	(bad)  
 100e070:	(bad)  
 100e071:	(bad)  
 100e072:	(bad)  
 100e073:	(bad)  
 100e074:	(bad)  
 100e075:	(bad)  
 100e076:	(bad)  
 100e077:	(bad)  
 100e078:	(bad)  
 100e079:	(bad)  
 100e07a:	(bad)  
 100e07b:	(bad)  
 100e07c:	(bad)  
 100e07d:	(bad)  
 100e07e:	(bad)  
 100e07f:	(bad)  
 100e080:	(bad)  
 100e081:	(bad)  
 100e082:	(bad)  
 100e083:	(bad)  
 100e084:	(bad)  
 100e085:	(bad)  
 100e086:	(bad)  
 100e087:	(bad)  
 100e088:	(bad)  
 100e089:	(bad)  
 100e08a:	(bad)  
 100e08b:	(bad)  
 100e08c:	(bad)  
 100e08d:	add    DWORD PTR [rsi],eax
 100e08f:	(bad)  
 100e090:	(bad)  
 100e091:	(bad)  
 100e092:	(bad)  
 100e093:	(bad)  
 100e094:	(bad)  
 100e095:	(bad)  
 100e096:	(bad)  
 100e097:	(bad)  
 100e098:	(bad)  
 100e099:	(bad)  
 100e09a:	(bad)  
 100e09b:	(bad)  
 100e09c:	(bad)  
 100e09d:	(bad)  
 100e09e:	(bad)  
 100e09f:	(bad)  
 100e0a0:	(bad)  
 100e0a1:	(bad)  
 100e0a2:	(bad)  
 100e0a3:	(bad)  
 100e0a4:	(bad)  
 100e0a5:	(bad)  
 100e0a6:	(bad)  
 100e0a7:	(bad)  
 100e0a8:	(bad)  
 100e0a9:	(bad)  
 100e0aa:	(bad)  
 100e0ab:	(bad)  
 100e0ac:	(bad)  
 100e0ad:	(bad)  
 100e0ae:	(bad)  
 100e0af:	(bad)  
 100e0b0:	(bad)  
 100e0b1:	(bad)  
 100e0b2:	(bad)  
 100e0b3:	(bad)  
 100e0b4:	(bad)  
 100e0b5:	(bad)  
 100e0b6:	(bad)  
 100e0b7:	(bad)  
 100e0b8:	(bad)  
 100e0b9:	(bad)  
 100e0ba:	(bad)  
 100e0bb:	(bad)  
 100e0bc:	(bad)  
 100e0bd:	(bad)  
 100e0be:	(bad)  
 100e0bf:	(bad)  
 100e0c0:	(bad)  
 100e0c1:	(bad)  
 100e0c2:	(bad)  
 100e0c3:	(bad)  
 100e0c4:	(bad)  
 100e0c5:	(bad)  
 100e0c6:	(bad)  
 100e0c7:	(bad)  
 100e0c8:	(bad)  
 100e0c9:	(bad)  
 100e0ca:	(bad)  
 100e0cb:	(bad)  
 100e0cc:	(bad)  
 100e0cd:	(bad)  
 100e0ce:	(bad)  
 100e0cf:	(bad)  
 100e0d0:	(bad)  
 100e0d1:	(bad)  
 100e0d2:	(bad)  
 100e0d3:	(bad)  
 100e0d4:	(bad)  
 100e0d5:	(bad)  
 100e0d6:	(bad)  
 100e0d7:	(bad)  
 100e0d8:	(bad)  
 100e0d9:	add    DWORD PTR [rsi],eax
 100e0db:	(bad)  
 100e0dc:	(bad)  
 100e0dd:	(bad)  
 100e0de:	(bad)  
 100e0df:	(bad)  
 100e0e0:	(bad)  
 100e0e1:	(bad)  
 100e0e2:	(bad)  
 100e0e3:	(bad)  
 100e0e4:	(bad)  
 100e0e5:	(bad)  
 100e0e6:	(bad)  
 100e0e7:	(bad)  
 100e0e8:	(bad)  
 100e0e9:	(bad)  
 100e0ea:	(bad)  
 100e0eb:	(bad)  
 100e0ec:	(bad)  
 100e0ed:	(bad)  
 100e0ee:	(bad)  
 100e0ef:	(bad)  
 100e0f0:	(bad)  
 100e0f1:	(bad)  
 100e0f2:	(bad)  
 100e0f3:	(bad)  
 100e0f4:	(bad)  
 100e0f5:	(bad)  
 100e0f6:	(bad)  
 100e0f7:	(bad)  
 100e0f8:	(bad)  
 100e0f9:	(bad)  
 100e0fa:	(bad)  
 100e0fb:	(bad)  
 100e0fc:	(bad)  
 100e0fd:	(bad)  
 100e0fe:	(bad)  
 100e0ff:	(bad)  
 100e100:	(bad)  
 100e101:	(bad)  
 100e102:	(bad)  
 100e103:	(bad)  
 100e104:	(bad)  
 100e105:	(bad)  
 100e106:	(bad)  
 100e107:	(bad)  
 100e108:	(bad)  
 100e109:	(bad)  
 100e10a:	(bad)  
 100e10b:	(bad)  
 100e10c:	(bad)  
 100e10d:	(bad)  
 100e10e:	(bad)  
 100e10f:	(bad)  
 100e110:	(bad)  
 100e111:	add    DWORD PTR [rsi],eax
 100e113:	(bad)  
 100e114:	(bad)  
 100e115:	(bad)  
 100e116:	(bad)  
 100e117:	(bad)  
 100e118:	(bad)  
 100e119:	add    DWORD PTR [rax],eax
 100e11b:	nop
 100e11c:	push   rax
 100e11d:	fld    QWORD PTR [rax]
 100e11f:	add    BYTE PTR [rbp+rbx*8+0x0],dl
 100e123:	add    ah,cl
 100e125:	fld    QWORD PTR [rax]
 100e127:	add    BYTE PTR [rsi-0x62ffff23],dl
 100e12d:	fld    QWORD PTR [rax]
 100e12f:	add    BYTE PTR [rbp+rbx*8-0x22550000],ah
 100e136:	add    BYTE PTR [rax],al
 100e138:	jae    0x100e117
 100e13a:	add    BYTE PTR [rax],al
 100e13c:	ins    BYTE PTR es:[rdi],dx
 100e13d:	fld    QWORD PTR [rax]
 100e13f:	add    BYTE PTR [rdx-0x23],bh
 100e142:	add    BYTE PTR [rax],al
 100e144:	sbb    ebp,0xdd650000
 100e14a:	add    BYTE PTR [rax],al
 100e14c:	pop    rsi
 100e14d:	fld    QWORD PTR [rax]
 100e14f:	add    BYTE PTR [rdi-0x77ffff23],cl
 100e155:	fld    QWORD PTR [rax]
 100e157:	add    BYTE PTR [rdx+0xdd],dh
 100e15d:	add    BYTE PTR [rdi],cl
 100e15f:	add    DWORD PTR [rdi],ecx
 100e161:	add    al,BYTE PTR [rbx]
 100e163:	add    al,0x5
 100e165:	(bad)  
 100e166:	sidt   [rdi]
 100e169:	add    al,BYTE PTR [rdi]
 100e16b:	invd   
 100e16d:	wbinvd 
 100e16f:	(bad)  
 100e170:	(bad)  
 100e171:	(bad)  
 100e173:	ud2    
 100e175:	or     al,0xb
 100e177:	or     ecx,DWORD PTR [rdi+rcx*1]
 100e17a:	(bad)  
 100e17b:	(bad)  
 100e17c:	(bad)  
 100e17d:	(bad)  
 100e17e:	(bad)  
 100e17f:	(bad)  
 100e180:	(bad)  
 100e181:	(bad)  
 100e182:	(bad)  
 100e183:	(bad)  
 100e184:	(bad)  
 100e185:	(bad)  
 100e186:	(bad)  
 100e187:	(bad)  
 100e188:	(bad)  
 100e189:	(bad)  
 100e18a:	(bad)  
 100e18b:	(bad)  
 100e18c:	(bad)  
 100e18d:	(bad)  
 100e18e:	(bad)  
 100e18f:	(bad)  
 100e190:	(bad)  
 100e191:	(bad)  
 100e192:	(bad)  
 100e193:	(bad)  
 100e194:	(bad)  
 100e195:	(bad)  
 100e196:	(bad)  
 100e197:	(bad)  
 100e198:	(bad)  
 100e199:	(bad)  
 100e19a:	(bad)  
 100e19b:	(bad)  
 100e19c:	str    WORD PTR [rdi]
 100e19f:	(bad)  
 100e1a0:	(bad)  
 100e1a1:	invd   
 100e1a3:	prefetchw BYTE PTR [rdi]
 100e1a6:	or     eax,0xf0b0b0c
 100e1ab:	(bad)  
 100e1ac:	(bad)  
 100e1ad:	(bad)  
 100e1ae:	(bad)  
 100e1af:	(bad)  
 100e1b0:	(bad)  
 100e1b1:	(bad)  
 100e1b2:	(bad)  
 100e1b3:	ud2    
 100e1b5:	(bad)  
 100e1b6:	(bad)  
 100e1b7:	(bad)  
 100e1b8:	femms  
 100e1ba:	(bad)  
 100e1bb:	(bad)  
 100e1bc:	(bad)  
 100e1bd:	(bad)  
 100e1be:	(bad)  
 100e1bf:	(bad)  
 100e1c0:	(bad)  
 100e1c1:	(bad)  
 100e1c2:	(bad)  
 100e1c3:	(bad)  
 100e1c4:	(bad)  
 100e1c5:	(bad)  
 100e1c6:	(bad)  
 100e1c7:	(bad)  
 100e1c8:	(bad)  
 100e1c9:	(bad)  
 100e1ca:	(bad)  
 100e1cb:	(bad)  
 100e1cc:	(bad)  
 100e1cd:	(bad)  
 100e1ce:	(bad)  
 100e1cf:	(bad)  
 100e1d0:	(bad)  
 100e1d1:	(bad)  
 100e1d2:	(bad)  
 100e1d3:	(bad)  
 100e1d4:	(bad)  
 100e1d5:	(bad)  
 100e1d6:	(bad)  
 100e1d7:	(bad)  
 100e1d8:	(bad)  
 100e1d9:	(bad)  
 100e1da:	(bad)  
 100e1db:	(bad)  
 100e1dc:	(bad)  
 100e1dd:	(bad)  
 100e1de:	sidt   [rdi]
 100e1e1:	add    cl,BYTE PTR [rdi]
 100e1e3:	(bad)  
 100e1e4:	(bad)  
 100e1e5:	(bad)  
 100e1e6:	sidt   [rdi]
 100e1e9:	add    cl,BYTE PTR [rdi]
 100e1eb:	(bad)  
 100e1ec:	(bad)  
 100e1ed:	(bad)  
 100e1ee:	(bad)  
 100e1ef:	(bad)  
 100e1f0:	(bad)  
 100e1f1:	(bad)  
 100e1f2:	(bad)  
 100e1f3:	(bad)  
 100e1f4:	(bad)  
 100e1f5:	(bad)  
 100e1f6:	(bad)  
 100e1f7:	(bad)  
 100e1f8:	(bad)  
 100e1f9:	(bad)  
 100e1fa:	(bad)  
 100e1fb:	(bad)  
 100e1fc:	(bad)  
 100e1fd:	(bad)  
 100e1fe:	(bad)  
 100e1ff:	(bad)  
 100e200:	(bad)  
 100e201:	(bad)  
 100e202:	(bad)  
 100e203:	(bad)  
 100e204:	(bad)  
 100e205:	(bad)  
 100e206:	(bad)  
 100e207:	(bad)  
 100e208:	(bad)  
 100e209:	(bad)  
 100e20a:	(bad)  
 100e20b:	(bad)  
 100e20c:	(bad)  
 100e20d:	(bad)  
 100e20e:	(bad)  
 100e20f:	(bad)  
 100e210:	(bad)  
 100e211:	(bad)  
 100e212:	(bad)  
 100e213:	(bad)  
 100e214:	(bad)  
 100e215:	(bad)  
 100e216:	(bad)  
 100e217:	(bad)  
 100e218:	(bad)  
 100e219:	(bad)  
 100e21a:	(bad)  
 100e21b:	(bad)  
 100e21c:	(bad)  
 100e21d:	(bad)  
 100e21e:	(bad)  
 100e21f:	(bad)  
 100e220:	lar    ecx,WORD PTR [rdi]
 100e223:	(bad)  
 100e224:	(bad)  
 100e225:	(bad)  
 100e226:	(bad)  
 100e227:	(bad)  
 100e228:	lar    eax,WORD PTR [rcx]
 100e22b:	add    ah,cl
 100e22d:	int3   
 100e22e:	int3   
 100e22f:	int3   
 100e230:	int3   
 100e231:	int3   
 100e232:	int3   
 100e233:	int3   
 100e234:	int3   
 100e235:	int3   
 100e236:	int3   
 100e237:	int3   
 100e238:	int3   
 100e239:	int3   
 100e23a:	int3   
 100e23b:	int3   
 100e23c:	int3   
 100e23d:	int3   
 100e23e:	int3   
 100e23f:	int3   
 100e240:	rex push rbp
 100e242:	push   rbx
 100e243:	push   rsi
 100e244:	push   rdi
 100e245:	push   r12
 100e247:	push   r13
 100e249:	push   r14
 100e24b:	push   r15
 100e24d:	lea    rbp,[rsp-0x98]
 100e255:	sub    rsp,0x198
 100e25c:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 100e265:	mov    rax,QWORD PTR [rip+0x8ea4]        # 0x1017110
 100e26c:	xor    rax,rsp
 100e26f:	mov    QWORD PTR [rbp+0x80],rax
 100e276:	mov    r12,r9
 100e279:	mov    rsi,r8
 100e27c:	mov    rdi,rdx
 100e27f:	mov    QWORD PTR [rsp+0x38],rdx
 100e284:	mov    r14,rcx
 100e287:	mov    r15,QWORD PTR [rbp+0x100]
 100e28e:	mov    rbx,QWORD PTR [rbp+0x108]
 100e295:	mov    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100e29e:	test   BYTE PTR [rip+0x978f],0x4        # 0x1017a34
 100e2a5:	je     0x100e2e9
 100e2a7:	mov    rax,QWORD PTR [rip+0xc5ca]        # 0x101a878
 100e2ae:	test   rax,rax
 100e2b1:	je     0x100e2e9
 100e2b3:	cmp    QWORD PTR [rip+0x8e6d],0xffffffffffffffff        # 0x1017128
 100e2bb:	je     0x100e2e9
 100e2bd:	mov    QWORD PTR [rsp+0x28],0x0
 100e2c6:	mov    rax,QWORD PTR [rip+0xc5ab]        # 0x101a878
 100e2cd:	mov    QWORD PTR [rsp+0x20],rax
 100e2d2:	lea    r9,[rsp+0x30]
 100e2d7:	xor    r8d,r8d
 100e2da:	xor    edx,edx
 100e2dc:	mov    rcx,QWORD PTR [rip+0x8e45]        # 0x1017128
 100e2e3:	call   QWORD PTR [rip+0x8e7f]        # 0x1017168
 100e2e9:	xor    r13d,r13d
 100e2ec:	mov    DWORD PTR [r15],r13d
 100e2ef:	mov    r9d,0x100
 100e2f5:	lea    r8,[rbp-0x80]
 100e2f9:	lea    edx,[r13+0x2c]
 100e2fd:	mov    rcx,QWORD PTR [rip+0x971c]        # 0x1017a20
 100e304:	call   QWORD PTR [rip+0xffffffffffff30be]        # 0x10013c8
 100e30a:	lea    rdx,[rbp-0x80]
 100e30e:	lea    rcx,[rbp-0x80]
 100e312:	call   QWORD PTR [rip+0xffffffffffff30a8]        # 0x10013c0
 100e318:	lea    rax,[rip+0xffffffffffff4479]        # 0x1002798
 100e31f:	mov    r8,rsi
 100e322:	test   rsi,rsi
 100e325:	cmove  r8,rax
 100e329:	lea    rdx,[rbp-0x80]
 100e32d:	mov    rcx,rdi
 100e330:	call   QWORD PTR [rip+0xffffffffffff2f72]        # 0x10012a8
 100e336:	mov    r8,r14
 100e339:	mov    edi,0x32
 100e33e:	mov    edx,edi
 100e340:	lea    rcx,[rsp+0x48]
 100e345:	call   QWORD PTR [rip+0xffffffffffff2e65]        # 0x10011b0
 100e34b:	test   rax,rax
 100e34e:	jne    0x100e3d8
 100e354:	test   BYTE PTR [rip+0x96d9],0x2        # 0x1017a34
 100e35b:	je     0x100e399
 100e35d:	mov    rax,QWORD PTR [rip+0xc12c]        # 0x101a490
 100e364:	test   rax,rax
 100e367:	je     0x100e399
 100e369:	cmp    QWORD PTR [rip+0x8db7],0xffffffffffffffff        # 0x1017128
 100e371:	je     0x100e399
 100e373:	mov    QWORD PTR [rsp+0x20],r13
 100e378:	mov    r9,QWORD PTR [rip+0xc111]        # 0x101a490
 100e37f:	mov    r8d,0xfa800
 100e385:	mov    rdx,QWORD PTR [rip+0xbe5c]        # 0x101a1e8
 100e38c:	mov    rcx,QWORD PTR [rip+0x8d95]        # 0x1017128
 100e393:	call   QWORD PTR [rip+0x8dbf]        # 0x1017158
 100e399:	mov    rcx,rbx
 100e39c:	call   QWORD PTR [rip+0xffffffffffff2f76]        # 0x1001318
 100e3a2:	nop
 100e3a3:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100e3a9:	je     0x100e3d1
 100e3ab:	test   BYTE PTR [rip+0x9682],0x4        # 0x1017a34
 100e3b2:	je     0x100e3d1
 100e3b4:	mov    rcx,QWORD PTR [rip+0x8d6d]        # 0x1017128
 100e3bb:	cmp    rcx,0xffffffffffffffff
 100e3bf:	je     0x100e3d1
 100e3c1:	lea    r9,[rsp+0x30]
 100e3c6:	xor    r8d,r8d
 100e3c9:	xor    edx,edx
 100e3cb:	call   QWORD PTR [rip+0x8da7]        # 0x1017178
 100e3d1:	xor    eax,eax
 100e3d3:	jmp    0x100e614
 100e3d8:	lea    rax,[rsp+0x48]
 100e3dd:	or     rbx,0xffffffffffffffff
 100e3e1:	inc    rbx
 100e3e4:	cmp    BYTE PTR [rax+rbx*1],r13b
 100e3e8:	jne    0x100e3e1
 100e3ea:	cmp    ebx,0x31
 100e3ed:	jne    0x100e439
 100e3ef:	cmp    BYTE PTR [rsp+0x78],0xa
 100e3f4:	je     0x100e43d
 100e3f6:	lea    r13d,[rbx-0x30]
 100e3fa:	call   QWORD PTR [rip+0xffffffffffff2ee8]        # 0x10012e8
 100e400:	cmp    r14,rax
 100e403:	jne    0x100e416
 100e405:	call   QWORD PTR [rip+0xffffffffffff2edd]        # 0x10012e8
 100e40b:	mov    rcx,rax
 100e40e:	call   QWORD PTR [rip+0xffffffffffff2f1c]        # 0x1001330
 100e414:	jmp    0x100e43d
 100e416:	mov    rcx,r14
 100e419:	call   QWORD PTR [rip+0xffffffffffff2e71]        # 0x1001290
 100e41f:	cmp    eax,0xa
 100e422:	je     0x100e43d
 100e424:	cmp    eax,0xffffffff
 100e427:	je     0x100e43d
 100e429:	mov    rcx,r14
 100e42c:	call   QWORD PTR [rip+0xffffffffffff2e5e]        # 0x1001290
 100e432:	cmp    eax,0xa
 100e435:	jne    0x100e424
 100e437:	jmp    0x100e43d
 100e439:	test   ebx,ebx
 100e43b:	jle    0x100e461
 100e43d:	movsxd rax,ebx
 100e440:	cmp    BYTE PTR [rsp+rax*1+0x47],0xa
 100e445:	jne    0x100e461
 100e447:	lea    eax,[rbx-0x1]
 100e44a:	movsxd rcx,eax
 100e44d:	cmp    rcx,rdi
 100e450:	jae    0x100e459
 100e452:	mov    BYTE PTR [rsp+rcx*1+0x48],0x0
 100e457:	jmp    0x100e461
 100e459:	xor    ecx,ecx
 100e45b:	call   0x1014478
 100e460:	int3   
 100e461:	cmp    BYTE PTR [rsp+0x48],0x0
 100e466:	jne    0x100e50b
 100e46c:	test   rsi,rsi
 100e46f:	jne    0x100e4c3
 100e471:	mov    DWORD PTR [r15],0xffffffff
 100e478:	test   BYTE PTR [rip+0x95b5],0x2        # 0x1017a34
 100e47f:	je     0x100e4be
 100e481:	mov    rax,QWORD PTR [rip+0xc030]        # 0x101a4b8
 100e488:	test   rax,rax
 100e48b:	je     0x100e4be
 100e48d:	cmp    QWORD PTR [rip+0x8c93],0xffffffffffffffff        # 0x1017128
 100e495:	je     0x100e4be
 100e497:	mov    QWORD PTR [rsp+0x20],rsi
 100e49c:	mov    r9,QWORD PTR [rip+0xc015]        # 0x101a4b8
 100e4a3:	mov    r8d,0x104800
 100e4a9:	mov    rdx,QWORD PTR [rip+0xbd80]        # 0x101a230
 100e4b0:	mov    rcx,QWORD PTR [rip+0x8c71]        # 0x1017128
 100e4b7:	call   QWORD PTR [rip+0x8c9b]        # 0x1017158
 100e4bd:	nop
 100e4be:	jmp    0x100e5e1
 100e4c3:	lea    rcx,[rsp+0x48]
 100e4c8:	xor    edx,edx
 100e4ca:	lea    rax,[rsp+0x48]
 100e4cf:	sub    rsi,rax
 100e4d2:	lea    rax,[rdi+0x7fffffcc]
 100e4d9:	test   rax,rax
 100e4dc:	je     0x100e4f2
 100e4de:	movzx  eax,BYTE PTR [rsi+rcx*1]
 100e4e2:	test   al,al
 100e4e4:	je     0x100e4f2
 100e4e6:	mov    BYTE PTR [rcx],al
 100e4e8:	inc    rcx
 100e4eb:	dec    rdi
 100e4ee:	jne    0x100e4d2
 100e4f0:	jmp    0x100e4f7
 100e4f2:	test   rdi,rdi
 100e4f5:	jne    0x100e4ff
 100e4f7:	dec    rcx
 100e4fa:	mov    edx,0x8007007a
 100e4ff:	mov    BYTE PTR [rcx],0x0
 100e502:	test   edx,edx
 100e504:	jns    0x100e50b
 100e506:	jmp    0x100e3a3
 100e50b:	mov    r8,r15
 100e50e:	lea    rdx,[rsp+0x48]
 100e513:	mov    rcx,r12
 100e516:	call   0x100e640
 100e51b:	test   r13d,r13d
 100e51e:	je     0x100e5ab
 100e524:	test   BYTE PTR [rip+0x9509],0x2        # 0x1017a34
 100e52b:	je     0x100e56d
 100e52d:	mov    rax,QWORD PTR [rip+0xbfac]        # 0x101a4e0
 100e534:	test   rax,rax
 100e537:	je     0x100e56d
 100e539:	cmp    QWORD PTR [rip+0x8be7],0xffffffffffffffff        # 0x1017128
 100e541:	je     0x100e56d
 100e543:	mov    QWORD PTR [rsp+0x20],0x0
 100e54c:	mov    r9,QWORD PTR [rip+0xbf8d]        # 0x101a4e0
 100e553:	mov    r8d,0x108800
 100e559:	mov    rdx,QWORD PTR [rip+0xbd10]        # 0x101a270
 100e560:	mov    rcx,QWORD PTR [rip+0x8bc1]        # 0x1017128
 100e567:	call   QWORD PTR [rip+0x8beb]        # 0x1017158
 100e56d:	mov    r9d,0x100
 100e573:	lea    r8,[rbp-0x80]
 100e577:	mov    edx,0x48
 100e57c:	mov    rcx,QWORD PTR [rip+0x949d]        # 0x1017a20
 100e583:	call   QWORD PTR [rip+0xffffffffffff2e3f]        # 0x10013c8
 100e589:	lea    rdx,[rbp-0x80]
 100e58d:	lea    rcx,[rbp-0x80]
 100e591:	call   QWORD PTR [rip+0xffffffffffff2e29]        # 0x10013c0
 100e597:	lea    r8,[rsp+0x48]
 100e59c:	lea    rdx,[rbp-0x80]
 100e5a0:	mov    rcx,QWORD PTR [rsp+0x38]
 100e5a5:	call   QWORD PTR [rip+0xffffffffffff2cfd]        # 0x10012a8
 100e5ab:	test   BYTE PTR [rip+0x9482],0x2        # 0x1017a34
 100e5b2:	je     0x100e5e1
 100e5b4:	mov    rax,QWORD PTR [rip+0xbf55]        # 0x101a510
 100e5bb:	test   rax,rax
 100e5be:	je     0x100e5e1
 100e5c0:	mov    QWORD PTR [rsp+0x20],r12
 100e5c5:	mov    r9d,DWORD PTR [r15]
 100e5c8:	mov    r8,QWORD PTR [rip+0xbf41]        # 0x101a510
 100e5cf:	mov    edx,0x10b000
 100e5d4:	mov    rcx,QWORD PTR [rip+0xbc5d]        # 0x101a238
 100e5db:	call   0x10128c0
 100e5e0:	nop
 100e5e1:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100e5e7:	je     0x100e60f
 100e5e9:	test   BYTE PTR [rip+0x9444],0x4        # 0x1017a34
 100e5f0:	je     0x100e60f
 100e5f2:	mov    rcx,QWORD PTR [rip+0x8b2f]        # 0x1017128
 100e5f9:	cmp    rcx,0xffffffffffffffff
 100e5fd:	je     0x100e60f
 100e5ff:	lea    r9,[rsp+0x30]
 100e604:	xor    r8d,r8d
 100e607:	xor    edx,edx
 100e609:	call   QWORD PTR [rip+0x8b69]        # 0x1017178
 100e60f:	mov    eax,0x1
 100e614:	mov    rcx,QWORD PTR [rbp+0x80]
 100e61b:	xor    rcx,rsp
 100e61e:	call   0x1014450
 100e623:	add    rsp,0x198
 100e62a:	pop    r15
 100e62c:	pop    r14
 100e62e:	pop    r13
 100e630:	pop    r12
 100e632:	pop    rdi
 100e633:	pop    rsi
 100e634:	pop    rbx
 100e635:	pop    rbp
 100e636:	ret    
 100e637:	int3   
 100e638:	int3   
 100e639:	int3   
 100e63a:	int3   
 100e63b:	int3   
 100e63c:	int3   
 100e63d:	int3   
 100e63e:	int3   
 100e63f:	int3   
 100e640:	mov    DWORD PTR [r8],0x0
 100e647:	cmp    BYTE PTR [rdx],0x0
 100e64a:	je     0x100e709
 100e650:	cmp    DWORD PTR [r8],0x32
 100e654:	jge    0x100e709
 100e65a:	movzx  eax,BYTE PTR [rdx]
 100e65d:	cmp    al,0x5c
 100e65f:	jne    0x100e6f4
 100e665:	movzx  r9d,BYTE PTR [rdx+0x1]
 100e66a:	movzx  eax,r9b
 100e66e:	test   r9b,r9b
 100e671:	je     0x100e6e2
 100e673:	cmp    al,0x30
 100e675:	je     0x100e6d0
 100e677:	cmp    al,0x6e
 100e679:	je     0x100e6b0
 100e67b:	cmp    al,0x72
 100e67d:	je     0x100e6a1
 100e67f:	cmp    al,0x74
 100e681:	je     0x100e692
 100e683:	mov    BYTE PTR [rcx],r9b
 100e686:	inc    rcx
 100e689:	add    rdx,0x2
 100e68d:	inc    DWORD PTR [r8]
 100e690:	jmp    0x100e647
 100e692:	mov    BYTE PTR [rcx],0x9
 100e695:	inc    rcx
 100e698:	add    rdx,0x2
 100e69c:	inc    DWORD PTR [r8]
 100e69f:	jmp    0x100e647
 100e6a1:	mov    BYTE PTR [rcx],0xd
 100e6a4:	inc    rcx
 100e6a7:	add    rdx,0x2
 100e6ab:	inc    DWORD PTR [r8]
 100e6ae:	jmp    0x100e647
 100e6b0:	mov    BYTE PTR [rcx],0xd
 100e6b3:	inc    DWORD PTR [r8]
 100e6b6:	cmp    DWORD PTR [r8],0x32
 100e6ba:	je     0x100e704
 100e6bc:	mov    BYTE PTR [rcx+0x1],0xa
 100e6c0:	add    rcx,0x2
 100e6c4:	add    rdx,0x2
 100e6c8:	inc    DWORD PTR [r8]
 100e6cb:	jmp    0x100e647
 100e6d0:	mov    BYTE PTR [rcx],0x0
 100e6d3:	inc    rcx
 100e6d6:	add    rdx,0x2
 100e6da:	inc    DWORD PTR [r8]
 100e6dd:	jmp    0x100e647
 100e6e2:	mov    BYTE PTR [rcx],0x5c
 100e6e5:	inc    rcx
 100e6e8:	add    rdx,0x2
 100e6ec:	inc    DWORD PTR [r8]
 100e6ef:	jmp    0x100e647
 100e6f4:	mov    BYTE PTR [rcx],al
 100e6f6:	inc    rcx
 100e6f9:	inc    rdx
 100e6fc:	inc    DWORD PTR [r8]
 100e6ff:	jmp    0x100e647
 100e704:	mov    BYTE PTR [rcx+0x1],0x0
 100e708:	ret    
 100e709:	mov    BYTE PTR [rcx],0x0
 100e70c:	ret    
 100e70d:	int3   
 100e70e:	int3   
 100e70f:	int3   
 100e710:	int3   
 100e711:	int3   
 100e712:	int3   
 100e713:	int3   
 100e714:	int3   
 100e715:	int3   
 100e716:	int3   
 100e717:	int3   
 100e718:	int3   
 100e719:	int3   
 100e71a:	int3   
 100e71b:	int3   
 100e71c:	int3   
 100e71d:	int3   
 100e71e:	int3   
 100e71f:	int3   
 100e720:	rex push rbp
 100e722:	push   rbx
 100e723:	push   rsi
 100e724:	push   rdi
 100e725:	push   r14
 100e727:	push   r15
 100e729:	lea    rbp,[rsp-0x358]
 100e731:	sub    rsp,0x458
 100e738:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 100e741:	mov    rax,QWORD PTR [rip+0x89c8]        # 0x1017110
 100e748:	xor    rax,rsp
 100e74b:	mov    QWORD PTR [rbp+0x340],rax
 100e752:	movzx  ebx,r9b
 100e756:	mov    r15,r8
 100e759:	mov    rdi,rdx
 100e75c:	mov    r14,rcx
 100e75f:	mov    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100e768:	test   BYTE PTR [rip+0x92c5],0x4        # 0x1017a34
 100e76f:	je     0x100e7b3
 100e771:	mov    rax,QWORD PTR [rip+0xc0f0]        # 0x101a868
 100e778:	test   rax,rax
 100e77b:	je     0x100e7b3
 100e77d:	cmp    QWORD PTR [rip+0x89a3],0xffffffffffffffff        # 0x1017128
 100e785:	je     0x100e7b3
 100e787:	mov    QWORD PTR [rsp+0x28],0x0
 100e790:	mov    rax,QWORD PTR [rip+0xc0d1]        # 0x101a868
 100e797:	mov    QWORD PTR [rsp+0x20],rax
 100e79c:	lea    r9,[rsp+0x30]
 100e7a1:	xor    r8d,r8d
 100e7a4:	xor    edx,edx
 100e7a6:	mov    rcx,QWORD PTR [rip+0x897b]        # 0x1017128
 100e7ad:	call   QWORD PTR [rip+0x89b5]        # 0x1017168
 100e7b3:	movzx  r9d,BYTE PTR [rbp+0x3c0]
 100e7bb:	mov    r8d,DWORD PTR [rbp+0x3b8]
 100e7c2:	mov    edx,DWORD PTR [rbp+0x3b0]
 100e7c8:	movzx  ecx,bl
 100e7cb:	call   0x100d0a0
 100e7d0:	mov    esi,eax
 100e7d2:	mov    r9d,0x100
 100e7d8:	lea    r8,[rbp+0x140]
 100e7df:	mov    edx,0x2d
 100e7e4:	mov    rcx,QWORD PTR [rip+0x9235]        # 0x1017a20
 100e7eb:	call   QWORD PTR [rip+0xffffffffffff2bd7]        # 0x10013c8
 100e7f1:	lea    rdx,[rbp+0x140]
 100e7f8:	lea    rcx,[rbp+0x140]
 100e7ff:	call   QWORD PTR [rip+0xffffffffffff2bbb]        # 0x10013c0
 100e805:	mov    r9d,esi
 100e808:	mov    r8,r15
 100e80b:	lea    rdx,[rbp+0x140]
 100e812:	mov    rcx,rdi
 100e815:	call   QWORD PTR [rip+0xffffffffffff2a8d]        # 0x10012a8
 100e81b:	mov    r8,r14
 100e81e:	mov    edx,0xff
 100e823:	lea    rcx,[rsp+0x40]
 100e828:	call   QWORD PTR [rip+0xffffffffffff2982]        # 0x10011b0
 100e82e:	test   rax,rax
 100e831:	je     0x100e998
 100e837:	cmp    BYTE PTR [rsp+0x40],0xa
 100e83c:	je     0x100e930
 100e842:	lea    rcx,[rsp+0x40]
 100e847:	call   QWORD PTR [rip+0xffffffffffff2a83]        # 0x10012d0
 100e84d:	mov    ebx,eax
 100e84f:	test   eax,eax
 100e851:	jne    0x100e894
 100e853:	xor    r8d,r8d
 100e856:	lea    rcx,[rsp+0x40]
 100e85b:	or     rax,0xffffffffffffffff
 100e85f:	nop
 100e860:	inc    rax
 100e863:	cmp    BYTE PTR [rcx+rax*1],r8b
 100e867:	jne    0x100e860
 100e869:	test   eax,eax
 100e86b:	jle    0x100e932
 100e871:	lea    rcx,[rsp+0x40]
 100e876:	movzx  edx,BYTE PTR [rcx]
 100e879:	cmp    dl,0x30
 100e87c:	je     0x100e883
 100e87e:	cmp    dl,0xa
 100e881:	jne    0x100e8b1
 100e883:	inc    r8d
 100e886:	inc    rcx
 100e889:	cmp    r8d,eax
 100e88c:	jge    0x100e932
 100e892:	jmp    0x100e876
 100e894:	js     0x100e8b1
 100e896:	cmp    eax,0x2
 100e899:	jle    0x100e932
 100e89f:	cmp    eax,0x4
 100e8a2:	je     0x100e932
 100e8a8:	cmp    eax,0x8
 100e8ab:	je     0x100e932
 100e8b1:	mov    r9d,0x100
 100e8b7:	lea    r8,[rbp+0x40]
 100e8bb:	mov    edx,0x2e
 100e8c0:	mov    rcx,QWORD PTR [rip+0x9159]        # 0x1017a20
 100e8c7:	call   QWORD PTR [rip+0xffffffffffff2afb]        # 0x10013c8
 100e8cd:	lea    rdx,[rbp+0x40]
 100e8d1:	lea    rcx,[rbp+0x40]
 100e8d5:	call   QWORD PTR [rip+0xffffffffffff2ae5]        # 0x10013c0
 100e8db:	mov    rdx,rdi
 100e8de:	lea    rcx,[rbp+0x40]
 100e8e2:	call   QWORD PTR [rip+0xffffffffffff2a08]        # 0x10012f0
 100e8e8:	mov    r9d,0x100
 100e8ee:	lea    r8,[rbp+0x240]
 100e8f5:	mov    edx,0x2f
 100e8fa:	mov    rcx,QWORD PTR [rip+0x911f]        # 0x1017a20
 100e901:	call   QWORD PTR [rip+0xffffffffffff2ac1]        # 0x10013c8
 100e907:	lea    rdx,[rbp+0x240]
 100e90e:	lea    rcx,[rbp+0x240]
 100e915:	call   QWORD PTR [rip+0xffffffffffff2aa5]        # 0x10013c0
 100e91b:	mov    rdx,rdi
 100e91e:	lea    rcx,[rbp+0x240]
 100e925:	call   QWORD PTR [rip+0xffffffffffff29c5]        # 0x10012f0
 100e92b:	jmp    0x100e7d2
 100e930:	mov    ebx,esi
 100e932:	test   BYTE PTR [rip+0x90fb],0x2        # 0x1017a34
 100e939:	je     0x100e963
 100e93b:	mov    rax,QWORD PTR [rip+0xbba6]        # 0x101a4e8
 100e942:	test   rax,rax
 100e945:	je     0x100e963
 100e947:	mov    r9d,ebx
 100e94a:	mov    r8,QWORD PTR [rip+0xbb97]        # 0x101a4e8
 100e951:	mov    edx,0x134800
 100e956:	mov    rcx,QWORD PTR [rip+0xb8bb]        # 0x101a218
 100e95d:	call   0x10128c0
 100e962:	nop
 100e963:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100e969:	je     0x100e991
 100e96b:	test   BYTE PTR [rip+0x90c2],0x4        # 0x1017a34
 100e972:	je     0x100e991
 100e974:	mov    rcx,QWORD PTR [rip+0x87ad]        # 0x1017128
 100e97b:	cmp    rcx,0xffffffffffffffff
 100e97f:	je     0x100e991
 100e981:	lea    r9,[rsp+0x30]
 100e986:	xor    r8d,r8d
 100e989:	xor    edx,edx
 100e98b:	call   QWORD PTR [rip+0x87e7]        # 0x1017178
 100e991:	mov    eax,ebx
 100e993:	jmp    0x100ea13
 100e998:	test   BYTE PTR [rip+0x9095],0x2        # 0x1017a34
 100e99f:	je     0x100e9e2
 100e9a1:	mov    rax,QWORD PTR [rip+0xbb60]        # 0x101a508
 100e9a8:	test   rax,rax
 100e9ab:	je     0x100e9e2
 100e9ad:	cmp    QWORD PTR [rip+0x8773],0xffffffffffffffff        # 0x1017128
 100e9b5:	je     0x100e9e2
 100e9b7:	mov    QWORD PTR [rsp+0x20],0x0
 100e9c0:	mov    r9,QWORD PTR [rip+0xbb41]        # 0x101a508
 100e9c7:	mov    r8d,0x128800
 100e9cd:	mov    rdx,QWORD PTR [rip+0xb87c]        # 0x101a250
 100e9d4:	mov    rcx,QWORD PTR [rip+0x874d]        # 0x1017128
 100e9db:	call   QWORD PTR [rip+0x8777]        # 0x1017158
 100e9e1:	nop
 100e9e2:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 100e9e8:	je     0x100ea10
 100e9ea:	test   BYTE PTR [rip+0x9043],0x4        # 0x1017a34
 100e9f1:	je     0x100ea10
 100e9f3:	mov    rcx,QWORD PTR [rip+0x872e]        # 0x1017128
 100e9fa:	cmp    rcx,0xffffffffffffffff
 100e9fe:	je     0x100ea10
 100ea00:	lea    r9,[rsp+0x30]
 100ea05:	xor    r8d,r8d
 100ea08:	xor    edx,edx
 100ea0a:	call   QWORD PTR [rip+0x8768]        # 0x1017178
 100ea10:	or     eax,0xffffffff
 100ea13:	mov    rcx,QWORD PTR [rbp+0x340]
 100ea1a:	xor    rcx,rsp
 100ea1d:	call   0x1014450
 100ea22:	add    rsp,0x458
 100ea29:	pop    r15
 100ea2b:	pop    r14
 100ea2d:	pop    rdi
 100ea2e:	pop    rsi
 100ea2f:	pop    rbx
 100ea30:	pop    rbp
 100ea31:	ret    
 100ea32:	int3   
 100ea33:	int3   
 100ea34:	int3   
 100ea35:	int3   
 100ea36:	int3   
 100ea37:	int3   
 100ea38:	int3   
 100ea39:	int3   
 100ea3a:	int3   
 100ea3b:	int3   
 100ea3c:	int3   
 100ea3d:	int3   
 100ea3e:	int3   
 100ea3f:	int3   
 100ea40:	rex push rbp
 100ea42:	push   rsi
 100ea43:	push   rdi
 100ea44:	push   r12
 100ea46:	push   r13
 100ea48:	push   r14
 100ea4a:	push   r15
 100ea4c:	mov    eax,0x2370
 100ea51:	call   0x1014ba0
 100ea56:	sub    rsp,rax
 100ea59:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
 100ea62:	mov    QWORD PTR [rsp+0x23c0],rbx
 100ea6a:	mov    rax,QWORD PTR [rip+0x869f]        # 0x1017110
 100ea71:	xor    rax,rsp
 100ea74:	mov    QWORD PTR [rsp+0x2360],rax
 100ea7c:	mov    r15,rdx
 100ea7f:	mov    r14,rcx
 100ea82:	mov    rsi,QWORD PTR [rip+0x8f7f]        # 0x1017a08
 100ea89:	mov    rbp,QWORD PTR [rip+0x9258]        # 0x1017ce8
 100ea90:	or     rdi,0xffffffffffffffff
 100ea94:	mov    QWORD PTR [rsp+0x50],rdi
 100ea99:	xor    ebx,ebx
 100ea9b:	test   BYTE PTR [rip+0x8f92],0x4        # 0x1017a34
 100eaa2:	je     0x100eae1
 100eaa4:	mov    rax,QWORD PTR [rip+0xbddd]        # 0x101a888
 100eaab:	test   rax,rax
 100eaae:	je     0x100eae1
 100eab0:	cmp    QWORD PTR [rip+0x8671],rdi        # 0x1017128
 100eab7:	je     0x100eae1
 100eab9:	mov    QWORD PTR [rsp+0x28],rbx
 100eabe:	mov    rax,QWORD PTR [rip+0xbdc3]        # 0x101a888
 100eac5:	mov    QWORD PTR [rsp+0x20],rax
 100eaca:	lea    r9,[rsp+0x50]
 100eacf:	xor    r8d,r8d
 100ead2:	xor    edx,edx
 100ead4:	mov    rcx,QWORD PTR [rip+0x864d]        # 0x1017128
 100eadb:	call   QWORD PTR [rip+0x8687]        # 0x1017168
 100eae1:	cmp    DWORD PTR [rip+0x8f85],ebx        # 0x1017a6c
 100eae7:	je     0x100eb7c
 100eaed:	mov    r9,QWORD PTR [rip+0x8fac]        # 0x1017aa0
 100eaf4:	mov    rax,rdi
 100eaf7:	inc    rax
 100eafa:	cmp    BYTE PTR [r9+rax*1],bl
 100eafe:	jne    0x100eaf7
 100eb00:	cmp    rax,0x1fff
 100eb06:	jbe    0x100eb73
 100eb08:	mov    r9d,0x100
 100eb0e:	lea    r8,[rsp+0x60]
 100eb13:	mov    edx,0x3f
 100eb18:	mov    rcx,QWORD PTR [rip+0x8f01]        # 0x1017a20
 100eb1f:	call   QWORD PTR [rip+0xffffffffffff28a3]        # 0x10013c8
 100eb25:	mov    r11,QWORD PTR [rip+0x8f74]        # 0x1017aa0
 100eb2c:	nop    DWORD PTR [rax+0x0]
 100eb30:	inc    rdi
 100eb33:	cmp    BYTE PTR [r11+rdi*1],bl
 100eb37:	jne    0x100eb30
 100eb39:	mov    QWORD PTR [rsp+0x20],rdi
 100eb3e:	mov    r9d,0x1fff
 100eb44:	lea    r8,[rsp+0x60]
 100eb49:	mov    edx,0x200
 100eb4e:	lea    rcx,[rsp+0x160]
 100eb56:	call   0x1008a80
 100eb5b:	lea    rcx,[rsp+0x160]
 100eb63:	call   QWORD PTR [rip+0xffffffffffff27af]        # 0x1001318
 100eb69:	movzx  edi,WORD PTR [rsp+0x40]
 100eb6e:	jmp    0x100ef72
 100eb73:	lea    r8,[rip+0xffffffffffff3e9e]        # 0x1002a18
 100eb7a:	jmp    0x100eb86
 100eb7c:	mov    r9,rsi
 100eb7f:	lea    r8,[rip+0xffffffffffff3e9a]        # 0x1002a20
 100eb86:	mov    edx,0x2000
 100eb8b:	lea    rcx,[rsp+0x360]
 100eb93:	call   0x1008a80
 100eb98:	test   BYTE PTR [rip+0x8e95],0x2        # 0x1017a34
 100eb9f:	je     0x100ebcd
 100eba1:	mov    rax,QWORD PTR [rip+0xb988]        # 0x101a530
 100eba8:	test   rax,rax
 100ebab:	je     0x100ebcd
 100ebad:	lea    r9,[rsp+0x360]
 100ebb5:	mov    r8,QWORD PTR [rip+0xb974]        # 0x101a530
 100ebbc:	mov    edx,0x18400
 100ebc1:	mov    rcx,QWORD PTR [rip+0xb5f0]        # 0x101a1b8
 100ebc8:	call   0x10128c0
 100ebcd:	mov    r8d,0xfffffffd
 100ebd3:	lea    rdx,[rsp+0x360]
 100ebdb:	mov    rcx,rbp
 100ebde:	call   QWORD PTR [rip+0xffffffffffff2764]        # 0x1001348
 100ebe4:	cmp    ax,0xffff
 100ebe8:	jne    0x100ec27
 100ebea:	test   BYTE PTR [rip+0x8e43],0x2        # 0x1017a34
 100ebf1:	je     0x100ec1d
 100ebf3:	mov    rcx,QWORD PTR [rip+0xb5be]        # 0x101a1b8
 100ebfa:	mov    rax,QWORD PTR [rip+0xbaa7]        # 0x101a6a8
 100ec01:	test   rax,rax
 100ec04:	je     0x100ec1d
 100ec06:	mov    r9d,0x65
 100ec0c:	mov    r8,QWORD PTR [rip+0xba95]        # 0x101a6a8
 100ec13:	mov    edx,0x19409
 100ec18:	call   0x10128c0
 100ec1d:	movzx  edi,WORD PTR [rsp+0x40]
 100ec22:	jmp    0x100ef72
 100ec27:	mov    rdx,r14
 100ec2a:	mov    rcx,rbp
 100ec2d:	call   QWORD PTR [rip+0xffffffffffff2725]        # 0x1001358
 100ec33:	mov    ecx,0xfffe
 100ec38:	test   cx,ax
 100ec3b:	je     0x100ec7a
 100ec3d:	test   BYTE PTR [rip+0x8df0],0x2        # 0x1017a34
 100ec44:	je     0x100ec1d
 100ec46:	mov    rcx,QWORD PTR [rip+0xb56b]        # 0x101a1b8
 100ec4d:	mov    rax,QWORD PTR [rip+0xba54]        # 0x101a6a8
 100ec54:	test   rax,rax
 100ec57:	je     0x100ec1d
 100ec59:	mov    r9d,0x6d
 100ec5f:	mov    r8,QWORD PTR [rip+0xba42]        # 0x101a6a8
 100ec66:	mov    edx,0x1b409
 100ec6b:	call   0x10128c0
 100ec70:	movzx  edi,WORD PTR [rsp+0x40]
 100ec75:	jmp    0x100ef72
 100ec7a:	cmp    ax,0x1
 100ec7e:	jne    0x100ec8a
 100ec80:	mov    rdx,rbp
 100ec83:	xor    ecx,ecx
 100ec85:	call   0x10119b0
 100ec8a:	test   BYTE PTR [rip+0x8da3],0x2        # 0x1017a34
 100ec91:	je     0x100ecbb
 100ec93:	mov    rax,QWORD PTR [rip+0xb8a6]        # 0x101a540
 100ec9a:	test   rax,rax
 100ec9d:	je     0x100ecbb
 100ec9f:	movzx  r9d,WORD PTR [r14]
 100eca3:	mov    r8,QWORD PTR [rip+0xb896]        # 0x101a540
 100ecaa:	mov    edx,0x1e400
 100ecaf:	mov    rcx,QWORD PTR [rip+0xb502]        # 0x101a1b8
 100ecb6:	call   0x10128c0
 100ecbb:	mov    edi,ebx
 100ecbd:	movzx  ecx,WORD PTR [r14]
 100ecc1:	movabs rax,0x1af286bca1af286
 100eccb:	cmp    rcx,rax
 100ecce:	jae    0x100ef3d
 100ecd4:	imul   rcx,rcx,0x98
 100ecdb:	call   QWORD PTR [rip+0xffffffffffff261f]        # 0x1001300
 100ece1:	mov    QWORD PTR [r15],rax
 100ece4:	test   rax,rax
 100ece7:	je     0x100ef3d
 100eced:	mov    r12d,0x1
 100ecf3:	movzx  edi,r12w
 100ecf7:	cmp    r12w,WORD PTR [r14]
 100ecfb:	ja     0x100ef37
 100ed01:	lea    rsi,[rax+0x88]
 100ed08:	lea    r13d,[r12+0x7f]
 100ed0d:	nop    DWORD PTR [rax]
 100ed10:	lea    r15,[rsi-0x88]
 100ed17:	mov    r8d,r12d
 100ed1a:	mov    QWORD PTR [rsp+0x30],rbx
 100ed1f:	mov    QWORD PTR [rsp+0x28],rbx
 100ed24:	mov    WORD PTR [rsp+0x20],r13w
 100ed2a:	mov    r9,r15
 100ed2d:	movzx  edx,di
 100ed30:	mov    rcx,rbp
 100ed33:	call   QWORD PTR [rip+0xffffffffffff2617]        # 0x1001350
 100ed39:	cmp    ax,0xffff
 100ed3d:	je     0x100ef03
 100ed43:	mov    r8d,0x4b0
 100ed49:	lea    rax,[rsp+0x48]
 100ed4e:	mov    QWORD PTR [rsp+0x30],rax
 100ed53:	mov    QWORD PTR [rsp+0x28],rbx
 100ed58:	mov    WORD PTR [rsp+0x20],bx
 100ed5d:	xor    r9d,r9d
 100ed60:	movzx  edx,di
 100ed63:	mov    rcx,rbp
 100ed66:	call   QWORD PTR [rip+0xffffffffffff25e4]        # 0x1001350
 100ed6c:	cmp    ax,0xffff
 100ed70:	je     0x100eecb
 100ed76:	mov    eax,DWORD PTR [rsp+0x48]
 100ed7a:	mov    DWORD PTR [rsi-0x4],eax
 100ed7d:	mov    r8d,0x4ba
 100ed83:	lea    rax,[rsp+0x48]
 100ed88:	mov    QWORD PTR [rsp+0x30],rax
 100ed8d:	mov    QWORD PTR [rsp+0x28],rbx
 100ed92:	mov    WORD PTR [rsp+0x20],bx
 100ed97:	xor    r9d,r9d
 100ed9a:	movzx  edx,di
 100ed9d:	mov    rcx,rbp
 100eda0:	call   QWORD PTR [rip+0xffffffffffff25aa]        # 0x1001350
 100eda6:	cmp    ax,0xffff
 100edaa:	je     0x100ee90
 100edb0:	mov    rax,QWORD PTR [rsp+0x48]
 100edb5:	mov    QWORD PTR [rsi],rax
 100edb8:	mov    r8d,0x4b4
 100edbe:	lea    rax,[rsp+0x48]
 100edc3:	mov    QWORD PTR [rsp+0x30],rax
 100edc8:	mov    QWORD PTR [rsp+0x28],rbx
 100edcd:	mov    WORD PTR [rsp+0x20],bx
 100edd2:	xor    r9d,r9d
 100edd5:	movzx  edx,di
 100edd8:	mov    rcx,rbp
 100eddb:	call   QWORD PTR [rip+0xffffffffffff256f]        # 0x1001350
 100ede1:	cmp    ax,0xffff
 100ede5:	je     0x100ee55
 100ede7:	movzx  eax,BYTE PTR [rsp+0x48]
 100edec:	mov    BYTE PTR [rsi+0x8],al
 100edef:	test   BYTE PTR [rip+0x8c3e],0x2        # 0x1017a34
 100edf6:	je     0x100ee3c
 100edf8:	mov    rax,QWORD PTR [rip+0xb729]        # 0x101a528
 100edff:	test   rax,rax
 100ee02:	je     0x100ee3c
 100ee04:	movzx  eax,BYTE PTR [rsi+0x8]
 100ee08:	movzx  r9d,di
 100ee0c:	mov    DWORD PTR [rsp+0x38],eax
 100ee10:	mov    rax,QWORD PTR [rsi]
 100ee13:	mov    QWORD PTR [rsp+0x30],rax
 100ee18:	mov    eax,DWORD PTR [rsi-0x4]
 100ee1b:	mov    DWORD PTR [rsp+0x28],eax
 100ee1f:	mov    QWORD PTR [rsp+0x20],r15
 100ee24:	mov    r8,QWORD PTR [rip+0xb6fd]        # 0x101a528
 100ee2b:	mov    edx,0x33000
 100ee30:	mov    rcx,QWORD PTR [rip+0xb381]        # 0x101a1b8
 100ee37:	call   0x10128c0
 100ee3c:	inc    di
 100ee3f:	add    rsi,0x98
 100ee46:	cmp    di,WORD PTR [r14]
 100ee4a:	jbe    0x100ed10
 100ee50:	jmp    0x100ef37
 100ee55:	test   BYTE PTR [rip+0x8bd8],0x2        # 0x1017a34
 100ee5c:	je     0x100efe7
 100ee62:	mov    rcx,QWORD PTR [rip+0xb34f]        # 0x101a1b8
 100ee69:	mov    rax,QWORD PTR [rip+0xb838]        # 0x101a6a8
 100ee70:	test   rax,rax
 100ee73:	je     0x100ef72
 100ee79:	mov    r9d,0xbc
 100ee7f:	mov    r8,QWORD PTR [rip+0xb822]        # 0x101a6a8
 100ee86:	mov    edx,0x2f009
 100ee8b:	jmp    0x100ef6d
 100ee90:	test   BYTE PTR [rip+0x8b9d],0x2        # 0x1017a34
 100ee97:	je     0x100efe7
 100ee9d:	mov    rcx,QWORD PTR [rip+0xb314]        # 0x101a1b8
 100eea4:	mov    rax,QWORD PTR [rip+0xb7fd]        # 0x101a6a8
 100eeab:	test   rax,rax
 100eeae:	je     0x100ef72
 100eeb4:	mov    r9d,0xad
 100eeba:	mov    r8,QWORD PTR [rip+0xb7e7]        # 0x101a6a8
 100eec1:	mov    edx,0x2b409
 100eec6:	jmp    0x100ef6d
 100eecb:	test   BYTE PTR [rip+0x8b62],0x2        # 0x1017a34
 100eed2:	je     0x100efe7
 100eed8:	mov    rcx,QWORD PTR [rip+0xb2d9]        # 0x101a1b8
 100eedf:	mov    rax,QWORD PTR [rip+0xb7c2]        # 0x101a6a8
 100eee6:	test   rax,rax
 100eee9:	je     0x100ef72
 100eeef:	mov    r9d,0x9e
 100eef5:	mov    r8,QWORD PTR [rip+0xb7ac]        # 0x101a6a8
 100eefc:	mov    edx,0x27809
 100ef01:	jmp    0x100ef6d
 100ef03:	test   BYTE PTR [rip+0x8b2a],0x2        # 0x1017a34
 100ef0a:	je     0x100efe7
 100ef10:	mov    rcx,QWORD PTR [rip+0xb2a1]        # 0x101a1b8
 100ef17:	mov    rax,QWORD PTR [rip+0xb78a]        # 0x101a6a8
 100ef1e:	test   rax,rax
 100ef21:	je     0x100ef72
 100ef23:	mov    r9d,0x91
 100ef29:	mov    r8,QWORD PTR [rip+0xb778]        # 0x101a6a8
 100ef30:	mov    edx,0x24409
 100ef35:	jmp    0x100ef6d
 100ef37:	movzx  ebx,r12w
 100ef3b:	jmp    0x100efa3
 100ef3d:	test   BYTE PTR [rip+0x8af0],0x2        # 0x1017a34
 100ef44:	je     0x100efe7
 100ef4a:	mov    rax,QWORD PTR [rip+0xb5e7]        # 0x101a538
 100ef51:	test   rax,rax
 100ef54:	je     0x100ef72
 100ef56:	movzx  r9d,WORD PTR [r14]
 100ef5a:	mov    r8,QWORD PTR [rip+0xb5d7]        # 0x101a538
 100ef61:	mov    edx,0x20800
 100ef66:	mov    rcx,QWORD PTR [rip+0xb24b]        # 0x101a1b8
 100ef6d:	call   0x10128c0
 100ef72:	test   BYTE PTR [rip+0x8abb],0x2        # 0x1017a34
 100ef79:	je     0x100efe7
 100ef7b:	mov    rax,QWORD PTR [rip+0xb5c6]        # 0x101a548
 100ef82:	test   rax,rax
 100ef85:	je     0x100efa3
 100ef87:	movzx  r9d,di
 100ef8b:	mov    r8,QWORD PTR [rip+0xb5b6]        # 0x101a548
 100ef92:	mov    edx,0x35400
 100ef97:	mov    rcx,QWORD PTR [rip+0xb21a]        # 0x101a1b8
 100ef9e:	call   0x10128c0
 100efa3:	test   BYTE PTR [rip+0x8a8a],0x2        # 0x1017a34
 100efaa:	je     0x100efe7
 100efac:	mov    rax,QWORD PTR [rip+0xb56d]        # 0x101a520
 100efb3:	test   rax,rax
 100efb6:	je     0x100efe7
 100efb8:	lea    rax,[rip+0xffffffffffff3c19]        # 0x1002bd8
 100efbf:	lea    r9,[rip+0xffffffffffff3c1a]        # 0x1002be0
 100efc6:	cmp    bx,0x1
 100efca:	cmove  r9,rax
 100efce:	mov    r8,QWORD PTR [rip+0xb54b]        # 0x101a520
 100efd5:	mov    edx,0x36000
 100efda:	mov    rcx,QWORD PTR [rip+0xb1d7]        # 0x101a1b8
 100efe1:	call   0x10128c0
 100efe6:	nop
 100efe7:	cmp    QWORD PTR [rsp+0x50],0xffffffffffffffff
 100efed:	je     0x100f015
 100efef:	test   BYTE PTR [rip+0x8a3e],0x4        # 0x1017a34
 100eff6:	je     0x100f015
 100eff8:	mov    rcx,QWORD PTR [rip+0x8129]        # 0x1017128
 100efff:	cmp    rcx,0xffffffffffffffff
 100f003:	je     0x100f015
 100f005:	lea    r9,[rsp+0x50]
 100f00a:	xor    r8d,r8d
 100f00d:	xor    edx,edx
 100f00f:	call   QWORD PTR [rip+0x8163]        # 0x1017178
 100f015:	movzx  eax,bx
 100f018:	mov    rcx,QWORD PTR [rsp+0x2360]
 100f020:	xor    rcx,rsp
 100f023:	call   0x1014450
 100f028:	mov    rbx,QWORD PTR [rsp+0x23c0]
 100f030:	add    rsp,0x2370
 100f037:	pop    r15
 100f039:	pop    r14
 100f03b:	pop    r13
 100f03d:	pop    r12
 100f03f:	pop    rdi
 100f040:	pop    rsi
 100f041:	pop    rbp
 100f042:	ret    
 100f043:	int3   
 100f044:	int3   
 100f045:	int3   
 100f046:	int3   
 100f047:	int3   
 100f048:	int3   
 100f049:	int3   
 100f04a:	int3   
 100f04b:	int3   
 100f04c:	int3   
 100f04d:	int3   
 100f04e:	int3   
 100f04f:	int3   
 100f050:	rex push rbp
 100f052:	push   rsi
 100f053:	push   rdi
 100f054:	push   r12
 100f056:	push   r13
 100f058:	push   r14
 100f05a:	push   r15
 100f05c:	lea    rbp,[rsp-0x7b0]
 100f064:	sub    rsp,0x8b0
 100f06b:	mov    QWORD PTR [rbp-0x48],0xfffffffffffffffe
 100f073:	mov    QWORD PTR [rsp+0x900],rbx
 100f07b:	mov    rax,QWORD PTR [rip+0x808e]        # 0x1017110
 100f082:	xor    rax,rsp
 100f085:	mov    QWORD PTR [rbp+0x7a0],rax
 100f08c:	mov    r15,rdx
 100f08f:	movsxd r12,ecx
 100f092:	or     r13,0xffffffffffffffff
 100f096:	mov    QWORD PTR [rbp-0x50],r13
 100f09a:	xor    ebx,ebx
 100f09c:	test   BYTE PTR [rip+0x8991],0x4        # 0x1017a34
 100f0a3:	je     0x100f0e1
 100f0a5:	mov    rax,QWORD PTR [rip+0xb7f4]        # 0x101a8a0
 100f0ac:	test   rax,rax
 100f0af:	je     0x100f0e1
 100f0b1:	cmp    QWORD PTR [rip+0x8070],r13        # 0x1017128
 100f0b8:	je     0x100f0e1
 100f0ba:	mov    QWORD PTR [rsp+0x28],rbx
 100f0bf:	mov    rax,QWORD PTR [rip+0xb7da]        # 0x101a8a0
 100f0c6:	mov    QWORD PTR [rsp+0x20],rax
 100f0cb:	lea    r9,[rbp-0x50]
 100f0cf:	xor    r8d,r8d
 100f0d2:	xor    edx,edx
 100f0d4:	mov    rcx,QWORD PTR [rip+0x804d]        # 0x1017128
 100f0db:	call   QWORD PTR [rip+0x8087]        # 0x1017168
 100f0e1:	mov    QWORD PTR [rbp-0x78],rbx
 100f0e5:	mov    QWORD PTR [rbp-0x60],rbx
 100f0e9:	mov    QWORD PTR [rsp+0x78],rbx
 100f0ee:	mov    QWORD PTR [rbp-0x68],rbx
 100f0f2:	mov    QWORD PTR [rsp+0x70],rbx
 100f0f7:	mov    QWORD PTR [rbp-0x58],rbx
 100f0fb:	xor    r9d,r9d
 100f0fe:	xor    r8d,r8d
 100f101:	lea    edx,[r9+0x1]
 100f105:	xor    ecx,ecx
 100f107:	call   QWORD PTR [rip+0xffffffffffff2003]        # 0x1001110
 100f10d:	test   BYTE PTR [rip+0x8920],0x2        # 0x1017a34
 100f114:	je     0x100f1ca
 100f11a:	mov    rax,QWORD PTR [rip+0xb497]        # 0x101a5b8
 100f121:	test   rax,rax
 100f124:	je     0x100f1ca
 100f12a:	cmp    QWORD PTR [rip+0x7ff6],0xffffffffffffffff        # 0x1017128
 100f132:	je     0x100f1ca
 100f138:	mov    r9,QWORD PTR [rip+0xb479]        # 0x101a5b8
 100f13f:	mov    r8d,0x32800
 100f145:	mov    rdx,QWORD PTR [rip+0xb074]        # 0x101a1c0
 100f14c:	mov    rcx,QWORD PTR [rip+0x7fd5]        # 0x1017128
 100f153:	call   QWORD PTR [rip+0x8027]        # 0x1017180
 100f159:	test   eax,eax
 100f15b:	je     0x100f1ca
 100f15d:	mov    rax,QWORD PTR [rip+0xb6d4]        # 0x101a838
 100f164:	test   rax,rax
 100f167:	je     0x100f184
 100f169:	mov    r9d,r12d
 100f16c:	mov    r8,QWORD PTR [rip+0xb6c5]        # 0x101a838
 100f173:	mov    edx,0x33004
 100f178:	mov    rcx,QWORD PTR [rip+0xb041]        # 0x101a1c0
 100f17f:	call   0x10128c0
 100f184:	mov    esi,ebx
 100f186:	mov    rdi,rbx
 100f189:	test   r12d,r12d
 100f18c:	jle    0x100f1ca
 100f18e:	xchg   ax,ax
 100f190:	mov    rax,QWORD PTR [rip+0xb3d9]        # 0x101a570
 100f197:	test   rax,rax
 100f19a:	je     0x100f1c0
 100f19c:	mov    rax,QWORD PTR [r15+rdi*8]
 100f1a0:	mov    QWORD PTR [rsp+0x20],rax
 100f1a5:	mov    r9d,esi
 100f1a8:	mov    r8,QWORD PTR [rip+0xb3c1]        # 0x101a570
 100f1af:	mov    edx,0x34004
 100f1b4:	mov    rcx,QWORD PTR [rip+0xb005]        # 0x101a1c0
 100f1bb:	call   0x10128c0
 100f1c0:	inc    esi
 100f1c2:	inc    rdi
 100f1c5:	cmp    rdi,r12
 100f1c8:	jl     0x100f190
 100f1ca:	xor    ecx,ecx
 100f1cc:	call   QWORD PTR [rip+0xffffffffffff1ee6]        # 0x10010b8
 100f1d2:	movzx  edx,ax
 100f1d5:	test   BYTE PTR [rip+0x8858],0x2        # 0x1017a34
 100f1dc:	je     0x100f206
 100f1de:	mov    rax,QWORD PTR [rip+0xb7bb]        # 0x101a9a0
 100f1e5:	test   rax,rax
 100f1e8:	je     0x100f206
 100f1ea:	movzx  r9d,dx
 100f1ee:	mov    r8,QWORD PTR [rip+0xb7ab]        # 0x101a9a0
 100f1f5:	mov    edx,0x36400
 100f1fa:	mov    rcx,QWORD PTR [rip+0xafbf]        # 0x101a1c0
 100f201:	call   0x1012910
 100f206:	call   0x1011cd0
 100f20b:	test   eax,eax
 100f20d:	jne    0x100f260
 100f20f:	call   QWORD PTR [rip+0xffffffffffff20d3]        # 0x10012e8
 100f215:	lea    rdx,[rip+0xffffffffffff3aac]        # 0x1002cc8
 100f21c:	lea    rcx,[rax+0x30]
 100f220:	call   QWORD PTR [rip+0xffffffffffff2082]        # 0x10012a8
 100f226:	mov    r12d,0x1
 100f22c:	mov    ebx,r12d
 100f22f:	test   BYTE PTR [rip+0x87fe],0x2        # 0x1017a34
 100f236:	je     0x101108e
 100f23c:	mov    rax,QWORD PTR [rip+0xb3a5]        # 0x101a5e8
 100f243:	test   rax,rax
 100f246:	je     0x101108e
 100f24c:	mov    r9d,r12d
 100f24f:	mov    r8,QWORD PTR [rip+0xb392]        # 0x101a5e8
 100f256:	mov    edx,0x37c00
 100f25b:	jmp    0x1011082
 100f260:	mov    rdx,r15
 100f263:	mov    ecx,r12d
 100f266:	call   0x1008d90
 100f26b:	mov    edx,eax
 100f26d:	dec    edx
 100f26f:	je     0x1011044
 100f275:	dec    edx
 100f277:	je     0x1011015
 100f27d:	lea    rcx,[rip+0x8a5c]        # 0x1017ce0
 100f284:	call   QWORD PTR [rip+0xffffffffffff20ee]        # 0x1001378
 100f28a:	cmp    ax,0xffff
 100f28e:	jne    0x100f2ca
 100f290:	mov    r12d,0x1
 100f296:	mov    ebx,r12d
 100f299:	test   BYTE PTR [rip+0x8794],0x2        # 0x1017a34
 100f2a0:	je     0x101108e
 100f2a6:	mov    rax,QWORD PTR [rip+0xb54b]        # 0x101a7f8
 100f2ad:	test   rax,rax
 100f2b0:	je     0x101108e
 100f2b6:	mov    r9d,r12d
 100f2b9:	mov    r8,QWORD PTR [rip+0xb538]        # 0x101a7f8
 100f2c0:	mov    edx,0x3c800
 100f2c5:	jmp    0x1011082
 100f2ca:	lea    rdx,[rip+0x8a27]        # 0x1017cf8
 100f2d1:	mov    rcx,QWORD PTR [rip+0x8a08]        # 0x1017ce0
 100f2d8:	call   QWORD PTR [rip+0xffffffffffff20c2]        # 0x10013a0
 100f2de:	cmp    ax,0xffff
 100f2e2:	jne    0x100f32b
 100f2e4:	mov    rcx,QWORD PTR [rip+0x89f5]        # 0x1017ce0
 100f2eb:	call   QWORD PTR [rip+0xffffffffffff20bf]        # 0x10013b0
 100f2f1:	mov    r12d,0x1
 100f2f7:	mov    ebx,r12d
 100f2fa:	test   BYTE PTR [rip+0x8733],0x2        # 0x1017a34
 100f301:	je     0x101108e
 100f307:	mov    rax,QWORD PTR [rip+0xb332]        # 0x101a640
 100f30e:	test   rax,rax
 100f311:	je     0x101108e
 100f317:	mov    r9d,r12d
 100f31a:	mov    r8,QWORD PTR [rip+0xb31f]        # 0x101a640
 100f321:	mov    edx,0x3dc00
 100f326:	jmp    0x1011082
 100f32b:	xor    r9d,r9d
 100f32e:	mov    r12d,0x1
 100f334:	mov    r8d,r12d
 100f337:	xor    edx,edx
 100f339:	xor    ecx,ecx
 100f33b:	call   QWORD PTR [rip+0xffffffffffff1d87]        # 0x10010c8
 100f341:	mov    QWORD PTR [rip+0x89a8],rax        # 0x1017cf0
 100f348:	test   rax,rax
 100f34b:	jne    0x100f3c6
 100f34d:	test   BYTE PTR [rip+0x86e0],0x2        # 0x1017a34
 100f354:	je     0x100f392
 100f356:	mov    rax,QWORD PTR [rip+0xb2c3]        # 0x101a620
 100f35d:	test   rax,rax
 100f360:	je     0x100f392
 100f362:	cmp    QWORD PTR [rip+0x7dbe],0xffffffffffffffff        # 0x1017128
 100f36a:	je     0x100f392
 100f36c:	mov    QWORD PTR [rsp+0x20],rbx
 100f371:	mov    r9,QWORD PTR [rip+0xb2a8]        # 0x101a620
 100f378:	mov    r8d,0x3f800
 100f37e:	mov    rdx,QWORD PTR [rip+0xae3b]        # 0x101a1c0
 100f385:	mov    rcx,QWORD PTR [rip+0x7d9c]        # 0x1017128
 100f38c:	call   QWORD PTR [rip+0x7dc6]        # 0x1017158
 100f392:	mov    ebx,r12d
 100f395:	test   BYTE PTR [rip+0x8698],0x2        # 0x1017a34
 100f39c:	je     0x101108e
 100f3a2:	mov    rax,QWORD PTR [rip+0xb3af]        # 0x101a758
 100f3a9:	test   rax,rax
 100f3ac:	je     0x100f493
 100f3b2:	mov    r9d,r12d
 100f3b5:	mov    r8,QWORD PTR [rip+0xb39c]        # 0x101a758
 100f3bc:	mov    edx,0x3fc00
 100f3c1:	jmp    0x1011082
 100f3c6:	movsxd r8,DWORD PTR [rip+0x7d53]        # 0x1017120
 100f3cd:	mov    edx,0x70
 100f3d2:	mov    rcx,QWORD PTR [rip+0x891f]        # 0x1017cf8
 100f3d9:	call   QWORD PTR [rip+0xffffffffffff1fc9]        # 0x10013a8
 100f3df:	mov    edx,0x4c3
 100f3e4:	mov    r8,r12
 100f3e7:	mov    rcx,QWORD PTR [rip+0x890a]        # 0x1017cf8
 100f3ee:	call   QWORD PTR [rip+0xffffffffffff1fb4]        # 0x10013a8
 100f3f4:	cmp    DWORD PTR [rip+0x86be],ebx        # 0x1017ab8
 100f3fa:	jne    0x100f411
 100f3fc:	mov    edx,0x4c1
 100f401:	xor    r8d,r8d
 100f404:	mov    rcx,QWORD PTR [rip+0x88ed]        # 0x1017cf8
 100f40b:	call   QWORD PTR [rip+0xffffffffffff1f97]        # 0x10013a8
 100f411:	lea    rcx,[rbp-0x68]
 100f415:	call   0x1012360
 100f41a:	mov    QWORD PTR [rsp+0x78],rax
 100f41f:	cmp    QWORD PTR [rbp-0x68],rbx
 100f423:	jne    0x100f4a2
 100f425:	mov    r9d,0x100
 100f42b:	lea    r8,[rbp-0x10]
 100f42f:	mov    edx,0x43
 100f434:	mov    rcx,QWORD PTR [rip+0x85e5]        # 0x1017a20
 100f43b:	call   QWORD PTR [rip+0xffffffffffff1f87]        # 0x10013c8
 100f441:	lea    rdx,[rbp-0x10]
 100f445:	lea    rcx,[rbp-0x10]
 100f449:	call   QWORD PTR [rip+0xffffffffffff1f71]        # 0x10013c0
 100f44f:	mov    rdx,QWORD PTR [rip+0x8672]        # 0x1017ac8
 100f456:	lea    rcx,[rbp-0x10]
 100f45a:	call   QWORD PTR [rip+0xffffffffffff1e90]        # 0x10012f0
 100f460:	mov    ebx,r12d
 100f463:	test   BYTE PTR [rip+0x85ca],0x2        # 0x1017a34
 100f46a:	je     0x100f493
 100f46c:	mov    rax,QWORD PTR [rip+0xb1f5]        # 0x101a668
 100f473:	test   rax,rax
 100f476:	je     0x100f493
 100f478:	mov    r9d,r12d
 100f47b:	mov    r8,QWORD PTR [rip+0xb1e6]        # 0x101a668
 100f482:	mov    edx,0x45400
 100f487:	mov    rcx,QWORD PTR [rip+0xad32]        # 0x101a1c0
 100f48e:	call   0x10128c0
 100f493:	mov    r15,QWORD PTR [rsp+0x78]
 100f498:	mov    rsi,QWORD PTR [rsp+0x70]
 100f49d:	jmp    0x1011096
 100f4a2:	test   BYTE PTR [rip+0x858b],0x2        # 0x1017a34
 100f4a9:	je     0x100f53e
 100f4af:	lea    rcx,[rbp-0x58]
 100f4b3:	call   0x1012360
 100f4b8:	mov    rsi,rax
 100f4bb:	mov    QWORD PTR [rsp+0x70],rax
 100f4c0:	cmp    QWORD PTR [rbp-0x58],rbx
 100f4c4:	jne    0x100f53e
 100f4c6:	mov    r9d,0x100
 100f4cc:	lea    r8,[rbp-0x10]
 100f4d0:	mov    edx,0x43
 100f4d5:	mov    rcx,QWORD PTR [rip+0x8544]        # 0x1017a20
 100f4dc:	call   QWORD PTR [rip+0xffffffffffff1ee6]        # 0x10013c8
 100f4e2:	lea    rdx,[rbp-0x10]
 100f4e6:	lea    rcx,[rbp-0x10]
 100f4ea:	call   QWORD PTR [rip+0xffffffffffff1ed0]        # 0x10013c0
 100f4f0:	mov    rdx,QWORD PTR [rip+0x85d1]        # 0x1017ac8
 100f4f7:	lea    rcx,[rbp-0x10]
 100f4fb:	call   QWORD PTR [rip+0xffffffffffff1def]        # 0x10012f0
 100f501:	mov    ebx,r12d
 100f504:	test   BYTE PTR [rip+0x8529],0x2        # 0x1017a34
 100f50b:	je     0x100f534
 100f50d:	mov    rax,QWORD PTR [rip+0xb064]        # 0x101a578
 100f514:	test   rax,rax
 100f517:	je     0x100f534
 100f519:	mov    r8,QWORD PTR [rip+0xb058]        # 0x101a578
 100f520:	mov    edx,0x49400
 100f525:	mov    r9d,r12d
 100f528:	mov    rcx,QWORD PTR [rip+0xac91]        # 0x101a1c0
 100f52f:	call   0x10128c0
 100f534:	mov    r15,QWORD PTR [rsp+0x78]
 100f539:	jmp    0x1011096
 100f53e:	mov    BYTE PTR [rbp+0xf0],bl
 100f544:	cmp    DWORD PTR [rip+0x8522],ebx        # 0x1017a6c
 100f54a:	jne    0x100f97a
 100f550:	mov    r8,QWORD PTR [rip+0x84b1]        # 0x1017a08
 100f557:	mov    rax,r13
 100f55a:	nop    WORD PTR [rax+rax*1+0x0]
 100f560:	inc    rax
 100f563:	cmp    BYTE PTR [r8+rax*1],bl
 100f567:	jne    0x100f560
 100f569:	mov    DWORD PTR [rsp+0x28],0x309
 100f571:	lea    rcx,[rbp+0x180]
 100f578:	mov    QWORD PTR [rsp+0x20],rcx
 100f57d:	mov    r9d,eax
 100f580:	mov    edx,r12d
 100f583:	xor    ecx,ecx
 100f585:	call   QWORD PTR [rip+0xffffffffffff1ab5]        # 0x1001040
 100f58b:	test   eax,eax
 100f58d:	je     0x100f8f5
 100f593:	mov    esi,eax
 100f595:	lea    rdi,[rbp+0x180]
 100f59c:	mov    r14d,ebx
 100f59f:	lea    r12,[rbp-0x40]
 100f5a3:	lea    r15,[rbp-0x20]
 100f5a7:	mov    edx,0x2e
 100f5ac:	nop    DWORD PTR [rax+0x0]
 100f5b0:	mov    QWORD PTR [r12],rdi
 100f5b4:	cmp    dx,WORD PTR [rdi]
 100f5b7:	jne    0x100f5be
 100f5b9:	mov    DWORD PTR [r15],ebx
 100f5bc:	jmp    0x100f5fc
 100f5be:	mov    eax,r14d
 100f5c1:	lea    r8,[rbp-0x20]
 100f5c5:	lea    r8,[r8+rax*4]
 100f5c9:	mov    rdx,rsi
 100f5cc:	mov    rcx,rdi
 100f5cf:	call   0x1013990
 100f5d4:	test   eax,eax
 100f5d6:	je     0x100f8ef
 100f5dc:	mov    edx,DWORD PTR [r15]
 100f5df:	lea    rdi,[rdi+rdx*2]
 100f5e3:	sub    rsi,rdx
 100f5e6:	mov    rcx,QWORD PTR [r12]
 100f5ea:	call   0x1013b00
 100f5ef:	test   eax,eax
 100f5f1:	je     0x100f8ef
 100f5f7:	mov    edx,0x2e
 100f5fc:	test   rsi,rsi
 100f5ff:	je     0x100f623
 100f601:	cmp    dx,WORD PTR [rdi]
 100f604:	jne    0x100f60d
 100f606:	add    rdi,0x2
 100f60a:	dec    rsi
 100f60d:	inc    r14d
 100f610:	add    r15,0x4
 100f614:	add    r12,0x8
 100f618:	cmp    r14d,0x3
 100f61c:	jb     0x100f5b0
 100f61e:	jmp    0x100f8ef
 100f623:	cmp    r14d,0x3
 100f627:	jae    0x100f8ef
 100f62d:	lea    ecx,[r14+0x1]
 100f631:	mov    r8,QWORD PTR [rip+0x8478]        # 0x1017ab0
 100f638:	test   r8,r8
 100f63b:	je     0x100f6c6
 100f641:	cmp    rcx,0x3
 100f645:	jne    0x100f98a
 100f64b:	mov    r9d,0x100
 100f651:	lea    r8,[rbp-0x10]
 100f655:	lea    edx,[rcx+0x4b]
 100f658:	mov    rcx,QWORD PTR [rip+0x83c1]        # 0x1017a20
 100f65f:	call   QWORD PTR [rip+0xffffffffffff1d63]        # 0x10013c8
 100f665:	mov    rdx,QWORD PTR [rip+0x845c]        # 0x1017ac8
 100f66c:	lea    rcx,[rbp-0x10]
 100f670:	call   QWORD PTR [rip+0xffffffffffff1c7a]        # 0x10012f0
 100f676:	mov    r12d,0x1
 100f67c:	mov    ebx,r12d
 100f67f:	test   BYTE PTR [rip+0x83ae],0x2        # 0x1017a34
 100f686:	je     0x100f493
 100f68c:	mov    rax,QWORD PTR [rip+0xafed]        # 0x101a680
 100f693:	test   rax,rax
 100f696:	je     0x100f493
 100f69c:	mov    r9d,r12d
 100f69f:	mov    r8,QWORD PTR [rip+0xafda]        # 0x101a680
 100f6a6:	mov    edx,0x52000
 100f6ab:	mov    rcx,QWORD PTR [rip+0xab0e]        # 0x101a1c0
 100f6b2:	call   0x10128c0
 100f6b7:	mov    r15,QWORD PTR [rsp+0x78]
 100f6bc:	mov    rsi,QWORD PTR [rsp+0x70]
 100f6c1:	jmp    0x1011096
 100f6c6:	cmp    rcx,0x3
 100f6ca:	jne    0x100fa53
 100f6d0:	mov    rcx,QWORD PTR [rip+0x8331]        # 0x1017a08
 100f6d7:	movzx  edi,BYTE PTR [rcx]
 100f6da:	cmp    dil,0x5b
 100f6de:	je     0x100f7ea
 100f6e4:	cmp    dil,0x22
 100f6e8:	je     0x100f7ea
 100f6ee:	call   QWORD PTR [rip+0xffffffffffff1be4]        # 0x10012d8
 100f6f4:	mov    r11,rax
 100f6f7:	test   rax,rax
 100f6fa:	je     0x100f97a
 100f700:	mov    rdx,QWORD PTR [rip+0x8301]        # 0x1017a08
 100f707:	sub    r11,rdx
 100f70a:	cmp    r11,0x7ffffffe
 100f711:	jbe    0x100f71b
 100f713:	mov    BYTE PTR [rbp+0xf0],bl
 100f719:	jmp    0x100f76d
 100f71b:	mov    edi,0x81
 100f720:	lea    rcx,[rbp+0xf0]
 100f727:	mov    r8d,ebx
 100f72a:	lea    rax,[rbp+0xf0]
 100f731:	sub    rdx,rax
 100f734:	lea    rax,[r11-0x81]
 100f73b:	add    rax,rdi
 100f73e:	je     0x100f754
 100f740:	movzx  eax,BYTE PTR [rcx+rdx*1]
 100f744:	test   al,al
 100f746:	je     0x100f754
 100f748:	mov    BYTE PTR [rcx],al
 100f74a:	inc    rcx
 100f74d:	dec    rdi
 100f750:	jne    0x100f734
 100f752:	jmp    0x100f759
 100f754:	test   rdi,rdi
 100f757:	jne    0x100f762
 100f759:	dec    rcx
 100f75c:	mov    r8d,0x8007007a
 100f762:	mov    BYTE PTR [rcx],bl
 100f764:	test   r8d,r8d
 100f767:	jns    0x100f97a
 100f76d:	mov    r9d,0x100
 100f773:	lea    r8,[rbp-0x10]
 100f777:	mov    edx,0x44
 100f77c:	mov    rcx,QWORD PTR [rip+0x829d]        # 0x1017a20
 100f783:	call   QWORD PTR [rip+0xffffffffffff1c3f]        # 0x10013c8
 100f789:	mov    rdx,QWORD PTR [rip+0x8338]        # 0x1017ac8
 100f790:	lea    rcx,[rbp-0x10]
 100f794:	call   QWORD PTR [rip+0xffffffffffff1b56]        # 0x10012f0
 100f79a:	mov    r12d,0x1
 100f7a0:	mov    ebx,r12d
 100f7a3:	test   BYTE PTR [rip+0x828a],0x2        # 0x1017a34
 100f7aa:	je     0x100f493
 100f7b0:	mov    rax,QWORD PTR [rip+0xaeb9]        # 0x101a670
 100f7b7:	test   rax,rax
 100f7ba:	je     0x100f493
 100f7c0:	mov    r9d,r12d
 100f7c3:	mov    r8,QWORD PTR [rip+0xaea6]        # 0x101a670
 100f7ca:	mov    edx,0x59000
 100f7cf:	mov    rcx,QWORD PTR [rip+0xa9ea]        # 0x101a1c0
 100f7d6:	call   0x10128c0
 100f7db:	mov    r15,QWORD PTR [rsp+0x78]
 100f7e0:	mov    rsi,QWORD PTR [rsp+0x70]
 100f7e5:	jmp    0x1011096
 100f7ea:	inc    rcx
 100f7ed:	mov    rdx,rbx
 100f7f0:	mov    eax,ebx
 100f7f2:	cmp    dil,0x5b
 100f7f6:	sete   al
 100f7f9:	movsxd rdi,eax
 100f7fc:	movzx  eax,BYTE PTR [rcx]
 100f7ff:	test   al,al
 100f801:	je     0x100f8e3
 100f807:	test   rdi,rdi
 100f80a:	je     0x100f817
 100f80c:	cmp    al,0x5d
 100f80e:	jne    0x100f822
 100f810:	inc    rcx
 100f813:	cmp    BYTE PTR [rcx],al
 100f815:	jmp    0x100f820
 100f817:	cmp    al,0x22
 100f819:	jne    0x100f822
 100f81b:	inc    rcx
 100f81e:	cmp    BYTE PTR [rcx],al
 100f820:	jne    0x100f842
 100f822:	cmp    rdx,0x80
 100f829:	je     0x100f858
 100f82b:	movzx  eax,BYTE PTR [rcx]
 100f82e:	mov    BYTE PTR [rbp+rdx*1+0xf0],al
 100f835:	inc    rdx
 100f838:	inc    rcx
 100f83b:	movzx  eax,BYTE PTR [rcx]
 100f83e:	test   al,al
 100f840:	jne    0x100f807
 100f842:	mov    edi,0x81
 100f847:	cmp    rdx,rdi
 100f84a:	jb     0x100f8e3
 100f850:	xor    ecx,ecx
 100f852:	call   0x1014478
 100f857:	int3   
 100f858:	mov    r9d,0x100
 100f85e:	lea    r8,[rbp-0x10]
 100f862:	mov    edx,0x44
 100f867:	mov    rcx,QWORD PTR [rip+0x81b2]        # 0x1017a20
 100f86e:	call   QWORD PTR [rip+0xffffffffffff1b54]        # 0x10013c8
 100f874:	lea    rdx,[rbp-0x10]
 100f878:	lea    rcx,[rbp-0x10]
 100f87c:	call   QWORD PTR [rip+0xffffffffffff1b3e]        # 0x10013c0
 100f882:	mov    rdx,QWORD PTR [rip+0x823f]        # 0x1017ac8
 100f889:	lea    rcx,[rbp-0x10]
 100f88d:	call   QWORD PTR [rip+0xffffffffffff1a5d]        # 0x10012f0
 100f893:	mov    r12d,0x1
 100f899:	mov    ebx,r12d
 100f89c:	test   BYTE PTR [rip+0x8191],0x2        # 0x1017a34
 100f8a3:	je     0x100f493
 100f8a9:	mov    rax,QWORD PTR [rip+0xaf68]        # 0x101a818
 100f8b0:	test   rax,rax
 100f8b3:	je     0x100f493
 100f8b9:	mov    r9d,r12d
 100f8bc:	mov    r8,QWORD PTR [rip+0xaf55]        # 0x101a818
 100f8c3:	mov    edx,0x66800
 100f8c8:	mov    rcx,QWORD PTR [rip+0xa8f1]        # 0x101a1c0
 100f8cf:	call   0x10128c0
 100f8d4:	mov    r15,QWORD PTR [rsp+0x78]
 100f8d9:	mov    rsi,QWORD PTR [rsp+0x70]
 100f8de:	jmp    0x1011096
 100f8e3:	mov    BYTE PTR [rbp+rdx*1+0xf0],bl
 100f8ea:	jmp    0x100fa53
 100f8ef:	mov    r12d,0x1
 100f8f5:	mov    r9d,0x100
 100f8fb:	lea    r8,[rbp-0x10]
 100f8ff:	mov    edx,0x4f
 100f904:	mov    rcx,QWORD PTR [rip+0x8115]        # 0x1017a20
 100f90b:	call   QWORD PTR [rip+0xffffffffffff1ab7]        # 0x10013c8
 100f911:	lea    rdx,[rbp-0x10]
 100f915:	lea    rcx,[rbp-0x10]
 100f919:	call   QWORD PTR [rip+0xffffffffffff1aa1]        # 0x10013c0
 100f91f:	mov    rdx,QWORD PTR [rip+0x81a2]        # 0x1017ac8
 100f926:	lea    rcx,[rbp-0x10]
 100f92a:	call   QWORD PTR [rip+0xffffffffffff19c0]        # 0x10012f0
 100f930:	mov    ebx,r12d
 100f933:	test   BYTE PTR [rip+0x80fa],0x2        # 0x1017a34
 100f93a:	je     0x100f493
 100f940:	mov    rax,QWORD PTR [rip+0xac89]        # 0x101a5d0
 100f947:	test   rax,rax
 100f94a:	je     0x100f493
 100f950:	mov    r9d,r12d
 100f953:	mov    r8,QWORD PTR [rip+0xac76]        # 0x101a5d0
 100f95a:	mov    edx,0x4e000
 100f95f:	mov    rcx,QWORD PTR [rip+0xa85a]        # 0x101a1c0
 100f966:	call   0x10128c0
 100f96b:	mov    r15,QWORD PTR [rsp+0x78]
 100f970:	mov    rsi,QWORD PTR [rsp+0x70]
 100f975:	jmp    0x1011096
 100f97a:	mov    r8,QWORD PTR [rip+0x812f]        # 0x1017ab0
 100f981:	test   r8,r8
 100f984:	je     0x100fa53
 100f98a:	mov    edx,0x6d
 100f98f:	mov    rcx,QWORD PTR [rip+0x8362]        # 0x1017cf8
 100f996:	call   QWORD PTR [rip+0xffffffffffff1a0c]        # 0x10013a8
 100f99c:	test   ax,0xfffe
 100f9a0:	je     0x100fa1f
 100f9a2:	mov    r9d,0x100
 100f9a8:	lea    r8,[rbp-0x10]
 100f9ac:	mov    edx,0x42
 100f9b1:	mov    rcx,QWORD PTR [rip+0x8068]        # 0x1017a20
 100f9b8:	call   QWORD PTR [rip+0xffffffffffff1a0a]        # 0x10013c8
 100f9be:	mov    rdx,QWORD PTR [rip+0x8103]        # 0x1017ac8
 100f9c5:	lea    rcx,[rbp-0x10]
 100f9c9:	call   QWORD PTR [rip+0xffffffffffff1921]        # 0x10012f0
 100f9cf:	mov    r12d,0x1
 100f9d5:	mov    ebx,r12d
 100f9d8:	test   BYTE PTR [rip+0x8055],0x2        # 0x1017a34
 100f9df:	je     0x100f493
 100f9e5:	mov    rax,QWORD PTR [rip+0xaccc]        # 0x101a6b8
 100f9ec:	test   rax,rax
 100f9ef:	je     0x100f493
 100f9f5:	mov    r9d,r12d
 100f9f8:	mov    r8,QWORD PTR [rip+0xacb9]        # 0x101a6b8
 100f9ff:	mov    edx,0x6f400
 100fa04:	mov    rcx,QWORD PTR [rip+0xa7b5]        # 0x101a1c0
 100fa0b:	call   0x10128c0
 100fa10:	mov    r15,QWORD PTR [rsp+0x78]
 100fa15:	mov    rsi,QWORD PTR [rsp+0x70]
 100fa1a:	jmp    0x1011096
 100fa1f:	test   BYTE PTR [rip+0x800e],0x2        # 0x1017a34
 100fa26:	je     0x100fa53
 100fa28:	mov    rax,QWORD PTR [rip+0xadf9]        # 0x101a828
 100fa2f:	test   rax,rax
 100fa32:	je     0x100fa53
 100fa34:	mov    r9,QWORD PTR [rip+0x8075]        # 0x1017ab0
 100fa3b:	mov    r8,QWORD PTR [rip+0xade6]        # 0x101a828
 100fa42:	mov    edx,0x70000
 100fa47:	mov    rcx,QWORD PTR [rip+0xa772]        # 0x101a1c0
 100fa4e:	call   0x10128c0
 100fa53:	cmp    DWORD PTR [rip+0x802b],ebx        # 0x1017a84
 100fa59:	je     0x100fa7f
 100fa5b:	cmp    DWORD PTR [rip+0x7fc6],0x1        # 0x1017a28
 100fa62:	jne    0x100fa7f
 100fa64:	mov    eax,DWORD PTR [rip+0x7fc2]        # 0x1017a2c
 100fa6a:	cmp    eax,0x1
 100fa6d:	je     0x100fa74
 100fa6f:	cmp    eax,0x3
 100fa72:	jne    0x100fa7f
 100fa74:	mov    r12d,0x1
 100fa7a:	mov    r15d,r12d
 100fa7d:	jmp    0x100fa88
 100fa7f:	mov    r15d,ebx
 100fa82:	mov    r12d,0x1
 100fa88:	cmp    DWORD PTR [rip+0x7fd6],ebx        # 0x1017a64
 100fa8e:	je     0x100fbfe
 100fa94:	mov    edx,0x4b3
 100fa99:	mov    r8,r12
 100fa9c:	mov    rcx,QWORD PTR [rip+0x8255]        # 0x1017cf8
 100faa3:	call   QWORD PTR [rip+0xffffffffffff18ff]        # 0x10013a8
 100faa9:	mov    rdx,QWORD PTR [rip+0x7fc8]        # 0x1017a78
 100fab0:	lea    rsi,[rip+0xffffffffffff19e9]        # 0x10014a0
 100fab7:	mov    r8,rsi
 100faba:	test   rdx,rdx
 100fabd:	cmovne r8,rdx
 100fac1:	lea    r14,[rip+0xffffffffffff3b30]        # 0x10035f8
 100fac8:	mov    rdi,rsi
 100facb:	cmovne rdi,r14
 100facf:	lea    rax,[rip+0xffffffffffff3b0a]        # 0x10035e0
 100fad6:	mov    rdx,rsi
 100fad9:	test   r15d,r15d
 100fadc:	cmovne rdx,rax
 100fae0:	movzx  eax,BYTE PTR [rbp+0xf0]
 100fae7:	lea    rcx,[rbp+0xf0]
 100faee:	test   al,al
 100faf0:	cmove  rcx,rsi
 100faf4:	lea    r15,[rip+0xffffffffffff3b15]        # 0x1003610
 100fafb:	cmovne rsi,r15
 100faff:	mov    QWORD PTR [rsp+0x48],r8
 100fb04:	mov    QWORD PTR [rsp+0x40],rdi
 100fb09:	mov    QWORD PTR [rsp+0x38],rdx
 100fb0e:	mov    QWORD PTR [rsp+0x30],rcx
 100fb13:	mov    QWORD PTR [rsp+0x28],rsi
 100fb18:	mov    rax,QWORD PTR [rip+0x7f51]        # 0x1017a70
 100fb1f:	mov    QWORD PTR [rsp+0x20],rax
 100fb24:	lea    r9,[rip+0xffffffffffff3afd]        # 0x1003628
 100fb2b:	lea    r8,[rip+0xffffffffffff3246]        # 0x1002d78
 100fb32:	mov    r15,QWORD PTR [rsp+0x78]
 100fb37:	mov    rdx,r15
 100fb3a:	mov    rcx,QWORD PTR [rbp-0x68]
 100fb3e:	call   0x1008a80
 100fb43:	mov    edi,eax
 100fb45:	test   BYTE PTR [rip+0x7ee8],0x2        # 0x1017a34
 100fb4c:	je     0x100fb76
 100fb4e:	mov    rax,QWORD PTR [rip+0xaaf3]        # 0x101a648
 100fb55:	test   rax,rax
 100fb58:	je     0x100fb76
 100fb5a:	mov    r9,QWORD PTR [rbp-0x68]
 100fb5e:	mov    r8,QWORD PTR [rip+0xaae3]        # 0x101a648
 100fb65:	mov    edx,0x76800
 100fb6a:	mov    rcx,QWORD PTR [rip+0xa64f]        # 0x101a1c0
 100fb71:	call   0x10128c0
 100fb76:	test   edi,edi
 100fb78:	jns    0x100ff04
 100fb7e:	mov    r9d,0x100
 100fb84:	lea    r8,[rbp-0x10]
 100fb88:	mov    edx,0x43
 100fb8d:	mov    rcx,QWORD PTR [rip+0x7e8c]        # 0x1017a20
 100fb94:	call   QWORD PTR [rip+0xffffffffffff182e]        # 0x10013c8
 100fb9a:	lea    rdx,[rbp-0x10]
 100fb9e:	lea    rcx,[rbp-0x10]
 100fba2:	call   QWORD PTR [rip+0xffffffffffff1818]        # 0x10013c0
 100fba8:	mov    rdx,QWORD PTR [rip+0x7f19]        # 0x1017ac8
 100fbaf:	lea    rcx,[rbp-0x10]
 100fbb3:	call   QWORD PTR [rip+0xffffffffffff1737]        # 0x10012f0
 100fbb9:	mov    ebx,r12d
 100fbbc:	test   BYTE PTR [rip+0x7e71],0x2        # 0x1017a34
 100fbc3:	je     0x100f498
 100fbc9:	mov    rax,QWORD PTR [rip+0xaaf0]        # 0x101a6c0
 100fbd0:	test   rax,rax
 100fbd3:	je     0x100f498
 100fbd9:	mov    r8,QWORD PTR [rip+0xaae0]        # 0x101a6c0
 100fbe0:	mov    edx,0x79400
 100fbe5:	mov    r9d,r12d
 100fbe8:	mov    rcx,QWORD PTR [rip+0xa5d1]        # 0x101a1c0
 100fbef:	call   0x10128c0
 100fbf4:	mov    rsi,QWORD PTR [rsp+0x70]
 100fbf9:	jmp    0x1011096
 100fbfe:	lea    rax,[rip+0xffffffffffff39db]        # 0x10035e0
 100fc05:	lea    rsi,[rip+0xffffffffffff1894]        # 0x10014a0
 100fc0c:	mov    r12,rsi
 100fc0f:	test   r15d,r15d
 100fc12:	cmovne r12,rax
 100fc16:	mov    rax,QWORD PTR [rip+0x7e5b]        # 0x1017a78
 100fc1d:	mov    r10,rsi
 100fc20:	test   rax,rax
 100fc23:	cmovne r10,rax
 100fc27:	lea    r14,[rip+0xffffffffffff39ca]        # 0x10035f8
 100fc2e:	mov    r9,rsi
 100fc31:	cmovne r9,r14
 100fc35:	movzx  eax,BYTE PTR [rbp+0xf0]
 100fc3c:	lea    r8,[rbp+0xf0]
 100fc43:	test   al,al
 100fc45:	cmove  r8,rsi
 100fc49:	lea    r15,[rip+0xffffffffffff39c0]        # 0x1003610
 100fc50:	mov    rdx,rsi
 100fc53:	cmovne rdx,r15
 100fc57:	mov    rax,QWORD PTR [rip+0x7e62]        # 0x1017ac0
 100fc5e:	mov    rdi,rsi
 100fc61:	test   rax,rax
 100fc64:	cmovne rdi,rax
 100fc68:	lea    r11,[rip+0xffffffffffff39ad]        # 0x100361c
 100fc6f:	mov    rcx,rsi
 100fc72:	cmovne rcx,r11
 100fc76:	mov    QWORD PTR [rsp+0x68],r10
 100fc7b:	mov    QWORD PTR [rsp+0x60],r9
 100fc80:	mov    QWORD PTR [rsp+0x58],r12
 100fc85:	mov    QWORD PTR [rsp+0x50],r8
 100fc8a:	mov    QWORD PTR [rsp+0x48],rdx
 100fc8f:	mov    rax,QWORD PTR [rip+0x7e02]        # 0x1017a98
 100fc96:	mov    QWORD PTR [rsp+0x40],rax
 100fc9b:	lea    rax,[rip+0xffffffffffff394e]        # 0x10035f0
 100fca2:	mov    QWORD PTR [rsp+0x38],rax
 100fca7:	mov    QWORD PTR [rsp+0x30],rdi
 100fcac:	mov    QWORD PTR [rsp+0x28],rcx
 100fcb1:	mov    rax,QWORD PTR [rip+0x7db8]        # 0x1017a70
 100fcb8:	mov    QWORD PTR [rsp+0x20],rax
 100fcbd:	lea    r9,[rip+0xffffffffffff3964]        # 0x1003628
 100fcc4:	lea    r8,[rip+0xffffffffffff30e5]        # 0x1002db0
 100fccb:	mov    rdx,QWORD PTR [rsp+0x78]
 100fcd0:	mov    rcx,QWORD PTR [rbp-0x68]
 100fcd4:	call   0x1008a80
 100fcd9:	test   eax,eax
 100fcdb:	jns    0x100fd6c
 100fce1:	mov    r9d,0x100
 100fce7:	lea    r8,[rbp-0x10]
 100fceb:	mov    edx,0x43
 100fcf0:	mov    rcx,QWORD PTR [rip+0x7d29]        # 0x1017a20
 100fcf7:	call   QWORD PTR [rip+0xffffffffffff16cb]        # 0x10013c8
 100fcfd:	lea    rdx,[rbp-0x10]
 100fd01:	lea    rcx,[rbp-0x10]
 100fd05:	call   QWORD PTR [rip+0xffffffffffff16b5]        # 0x10013c0
 100fd0b:	mov    rdx,QWORD PTR [rip+0x7db6]        # 0x1017ac8
 100fd12:	lea    rcx,[rbp-0x10]
 100fd16:	call   QWORD PTR [rip+0xffffffffffff15d4]        # 0x10012f0
 100fd1c:	mov    r12d,0x1
 100fd22:	mov    ebx,r12d
 100fd25:	test   BYTE PTR [rip+0x7d08],0x2        # 0x1017a34
 100fd2c:	je     0x100f493
 100fd32:	mov    rax,QWORD PTR [rip+0xa95f]        # 0x101a698
 100fd39:	test   rax,rax
 100fd3c:	je     0x100f493
 100fd42:	mov    r9d,r12d
 100fd45:	mov    r8,QWORD PTR [rip+0xa94c]        # 0x101a698
 100fd4c:	mov    edx,0x81800
 100fd51:	mov    rcx,QWORD PTR [rip+0xa468]        # 0x101a1c0
 100fd58:	call   0x10128c0
 100fd5d:	mov    r15,QWORD PTR [rsp+0x78]
 100fd62:	mov    rsi,QWORD PTR [rsp+0x70]
 100fd67:	jmp    0x1011096
 100fd6c:	mov    rdi,QWORD PTR [rip+0x7d25]        # 0x1017a98
 100fd73:	inc    r13
 100fd76:	cmp    BYTE PTR [rdi+r13*1],bl
 100fd7a:	jne    0x100fd73
 100fd7c:	xor    eax,eax
 100fd7e:	mov    rcx,r13
 100fd81:	rep stos BYTE PTR es:[rdi],al
 100fd83:	test   BYTE PTR [rip+0x7caa],0x2        # 0x1017a34
 100fd8a:	je     0x100fef9
 100fd90:	mov    rax,QWORD PTR [rip+0x7ce1]        # 0x1017a78
 100fd97:	mov    r10,rsi
 100fd9a:	test   rax,rax
 100fd9d:	cmovne r10,rax
 100fda1:	mov    r9,rsi
 100fda4:	cmovne r9,r14
 100fda8:	movzx  eax,BYTE PTR [rbp+0xf0]
 100fdaf:	lea    rdi,[rbp+0xf0]
 100fdb6:	test   al,al
 100fdb8:	cmove  rdi,rsi
 100fdbc:	mov    rdx,rsi
 100fdbf:	cmovne rdx,r15
 100fdc3:	mov    rax,QWORD PTR [rip+0x7cf6]        # 0x1017ac0
 100fdca:	lea    r11,[rip+0xffffffffffff2ff7]        # 0x1002dc8
 100fdd1:	mov    rcx,rsi
 100fdd4:	test   rax,rax
 100fdd7:	cmovne rcx,r11
 100fddb:	lea    rax,[rip+0xffffffffffff383a]        # 0x100361c
 100fde2:	cmovne rsi,rax
 100fde6:	mov    QWORD PTR [rsp+0x68],r10
 100fdeb:	mov    QWORD PTR [rsp+0x60],r9
 100fdf0:	mov    QWORD PTR [rsp+0x58],r12
 100fdf5:	mov    QWORD PTR [rsp+0x50],rdi
 100fdfa:	mov    QWORD PTR [rsp+0x48],rdx
 100fdff:	mov    QWORD PTR [rsp+0x40],r11
 100fe04:	lea    rax,[rip+0xffffffffffff37e5]        # 0x10035f0
 100fe0b:	mov    QWORD PTR [rsp+0x38],rax
 100fe10:	mov    QWORD PTR [rsp+0x30],rcx
 100fe15:	mov    QWORD PTR [rsp+0x28],rsi
 100fe1a:	mov    rax,QWORD PTR [rip+0x7c4f]        # 0x1017a70
 100fe21:	mov    QWORD PTR [rsp+0x20],rax
 100fe26:	lea    r9,[rip+0xffffffffffff37fb]        # 0x1003628
 100fe2d:	lea    r8,[rip+0xffffffffffff2f7c]        # 0x1002db0
 100fe34:	mov    rsi,QWORD PTR [rsp+0x70]
 100fe39:	mov    rdx,rsi
 100fe3c:	mov    rcx,QWORD PTR [rbp-0x58]
 100fe40:	call   0x1008a80
 100fe45:	test   eax,eax
 100fe47:	jns    0x100febb
 100fe49:	mov    r9d,0x100
 100fe4f:	lea    r8,[rbp-0x10]
 100fe53:	mov    edx,0x43
 100fe58:	mov    rcx,QWORD PTR [rip+0x7bc1]        # 0x1017a20
 100fe5f:	call   QWORD PTR [rip+0xffffffffffff1563]        # 0x10013c8
 100fe65:	lea    rdx,[rbp-0x10]
 100fe69:	lea    rcx,[rbp-0x10]
 100fe6d:	call   QWORD PTR [rip+0xffffffffffff154d]        # 0x10013c0
 100fe73:	mov    rdx,QWORD PTR [rip+0x7c4e]        # 0x1017ac8
 100fe7a:	lea    rcx,[rbp-0x10]
 100fe7e:	call   QWORD PTR [rip+0xffffffffffff146c]        # 0x10012f0
 100fe84:	mov    r12d,0x1
 100fe8a:	mov    ebx,r12d
 100fe8d:	test   BYTE PTR [rip+0x7ba0],0x2        # 0x1017a34
 100fe94:	je     0x100f534
 100fe9a:	mov    rax,QWORD PTR [rip+0xa6bf]        # 0x101a560
 100fea1:	test   rax,rax
 100fea4:	je     0x100f534
 100feaa:	mov    r8,QWORD PTR [rip+0xa6af]        # 0x101a560
 100feb1:	mov    edx,0x8ac00
 100feb6:	jmp    0x100f525
 100febb:	test   BYTE PTR [rip+0x7b72],0x2        # 0x1017a34
 100fec2:	je     0x100feec
 100fec4:	mov    rax,QWORD PTR [rip+0xa725]        # 0x101a5f0
 100fecb:	test   rax,rax
 100fece:	je     0x100feec
 100fed0:	mov    r9,QWORD PTR [rbp-0x58]
 100fed4:	mov    r8,QWORD PTR [rip+0xa715]        # 0x101a5f0
 100fedb:	mov    edx,0x8b800
 100fee0:	mov    rcx,QWORD PTR [rip+0xa2d9]        # 0x101a1c0
 100fee7:	call   0x10128c0
 100feec:	mov    r15,QWORD PTR [rsp+0x78]
 100fef1:	mov    r12d,0x1
 100fef7:	jmp    0x100ff09
 100fef9:	mov    r15,QWORD PTR [rsp+0x78]
 100fefe:	mov    r12d,0x1
 100ff04:	mov    rsi,QWORD PTR [rsp+0x70]
 100ff09:	mov    r9d,0xfffffffd
 100ff0f:	mov    WORD PTR [rsp+0x38],bx
 100ff14:	mov    QWORD PTR [rsp+0x30],rbx
 100ff19:	mov    WORD PTR [rsp+0x28],bx
 100ff1e:	mov    QWORD PTR [rsp+0x20],rbx
 100ff23:	mov    r8,QWORD PTR [rbp-0x68]
 100ff27:	xor    edx,edx
 100ff29:	mov    rcx,QWORD PTR [rip+0x7dc8]        # 0x1017cf8
 100ff30:	call   QWORD PTR [rip+0xffffffffffff143a]        # 0x1001370
 100ff36:	cmp    ax,0xffff
 100ff3a:	jne    0x100ff7c
 100ff3c:	mov    ebx,r12d
 100ff3f:	test   BYTE PTR [rip+0x7aee],0x2        # 0x1017a34
 100ff46:	je     0x1011096
 100ff4c:	mov    rax,QWORD PTR [rip+0xa6b5]        # 0x101a608
 100ff53:	test   rax,rax
 100ff56:	je     0x1011096
 100ff5c:	mov    r9d,r12d
 100ff5f:	mov    r8,QWORD PTR [rip+0xa6a2]        # 0x101a608
 100ff66:	mov    edx,0x8f400
 100ff6b:	mov    rcx,QWORD PTR [rip+0xa24e]        # 0x101a1c0
 100ff72:	call   0x10128c0
 100ff77:	jmp    0x1011096
 100ff7c:	lea    rdx,[rip+0x7d65]        # 0x1017ce8
 100ff83:	mov    rcx,QWORD PTR [rip+0x7d6e]        # 0x1017cf8
 100ff8a:	call   QWORD PTR [rip+0xffffffffffff13f8]        # 0x1001388
 100ff90:	cmp    ax,0xffff
 100ff94:	jne    0x100ffd6
 100ff96:	mov    ebx,r12d
 100ff99:	test   BYTE PTR [rip+0x7a94],0x2        # 0x1017a34
 100ffa0:	je     0x1011096
 100ffa6:	mov    rax,QWORD PTR [rip+0xa813]        # 0x101a7c0
 100ffad:	test   rax,rax
 100ffb0:	je     0x1011096
 100ffb6:	mov    r9d,r12d
 100ffb9:	mov    r8,QWORD PTR [rip+0xa800]        # 0x101a7c0
 100ffc0:	mov    edx,0x90000
 100ffc5:	mov    rcx,QWORD PTR [rip+0xa1f4]        # 0x101a1c0
 100ffcc:	call   0x10128c0
 100ffd1:	jmp    0x1011096
 100ffd6:	lea    r13,[rip+0xffffffffffff1f0b]        # 0x1001ee8
 100ffdd:	lea    rsi,[rip+0xffffffffffff1f08]        # 0x1001eec
 100ffe4:	test   BYTE PTR [rip+0x7a49],0x2        # 0x1017a34
 100ffeb:	je     0x101004f
 100ffed:	mov    rax,QWORD PTR [rip+0xa7dc]        # 0x101a7d0
 100fff4:	test   rax,rax
 100fff7:	je     0x101004f
 100fff9:	mov    rax,rsi
 100fffc:	cmp    DWORD PTR [rip+0x7a25],0x1        # 0x1017a28
 1010003:	cmove  rax,r13
 1010007:	mov    QWORD PTR [rsp+0x38],rax
 101000c:	mov    rax,QWORD PTR [rip+0x7a45]        # 0x1017a58
 1010013:	mov    QWORD PTR [rsp+0x30],rax
 1010018:	mov    rax,QWORD PTR [rip+0x7a89]        # 0x1017aa8
 101001f:	mov    QWORD PTR [rsp+0x28],rax
 1010024:	mov    rax,QWORD PTR [rip+0x79dd]        # 0x1017a08
 101002b:	mov    QWORD PTR [rsp+0x20],rax
 1010030:	mov    r9,QWORD PTR [rip+0x7cc1]        # 0x1017cf8
 1010037:	mov    r8,QWORD PTR [rip+0xa792]        # 0x101a7d0
 101003e:	mov    edx,0x92400
 1010043:	mov    rcx,QWORD PTR [rip+0xa176]        # 0x101a1c0
 101004a:	call   0x10128c0
 101004f:	mov    eax,DWORD PTR [rip+0x79d3]        # 0x1017a28
 1010055:	mov    DWORD PTR [rsp+0x20],eax
 1010059:	mov    r9,QWORD PTR [rip+0x79f8]        # 0x1017a58
 1010060:	mov    r8,QWORD PTR [rip+0x7a41]        # 0x1017aa8
 1010067:	mov    rdx,QWORD PTR [rip+0x799a]        # 0x1017a08
 101006e:	mov    rcx,QWORD PTR [rip+0x7c83]        # 0x1017cf8
 1010075:	call   QWORD PTR [rip+0xffffffffffff136d]        # 0x10013e8
 101007b:	test   ax,ax
 101007e:	jne    0x10100b1
 1010080:	mov    ebx,r12d
 1010083:	test   BYTE PTR [rip+0x79aa],0x2        # 0x1017a34
 101008a:	je     0x100f498
 1010090:	mov    rax,QWORD PTR [rip+0xa6d9]        # 0x101a770
 1010097:	test   rax,rax
 101009a:	je     0x100f498
 10100a0:	mov    r8,QWORD PTR [rip+0xa6c9]        # 0x101a770
 10100a7:	mov    edx,0x94400
 10100ac:	jmp    0x100fbe5
 10100b1:	mov    edi,ebx
 10100b3:	lea    r14,[rip+0xfffffffffffeff46]        # 0x1000000
 10100ba:	cmp    QWORD PTR [rip+0x79df],rbx        # 0x1017aa0
 10100c1:	je     0x10103b3
 10100c7:	cmp    DWORD PTR [rip+0x799f],ebx        # 0x1017a6c
 10100cd:	je     0x1010271
 10100d3:	movsxd rax,DWORD PTR [rip+0x7952]        # 0x1017a2c
 10100da:	test   eax,eax
 10100dc:	jle    0x1010271
 10100e2:	cmp    eax,0x2
 10100e5:	jle    0x101019c
 10100eb:	cmp    eax,0x3
 10100ee:	je     0x1010104
 10100f0:	jle    0x1010271
 10100f6:	cmp    eax,0x5
 10100f9:	jle    0x101019c
 10100ff:	jmp    0x1010271
 1010104:	test   BYTE PTR [rip+0x7929],0x2        # 0x1017a34
 101010b:	je     0x101014d
 101010d:	mov    rax,QWORD PTR [rip+0xa6b4]        # 0x101a7c8
 1010114:	test   rax,rax
 1010117:	je     0x101014d
 1010119:	mov    QWORD PTR [rsp+0x30],r12
 101011e:	mov    DWORD PTR [rsp+0x28],0x14
 1010126:	mov    DWORD PTR [rsp+0x20],0x14
 101012e:	mov    r9,QWORD PTR [rip+0x7bc3]        # 0x1017cf8
 1010135:	mov    r8,QWORD PTR [rip+0xa68c]        # 0x101a7c8
 101013c:	mov    edx,0x98000
 1010141:	mov    rcx,QWORD PTR [rip+0xa078]        # 0x101a1c0
 1010148:	call   0x10128c0
 101014d:	mov    r8,r12
 1010150:	mov    edx,0x14
 1010155:	mov    rcx,QWORD PTR [rip+0x7b9c]        # 0x1017cf8
 101015c:	call   QWORD PTR [rip+0xffffffffffff12a6]        # 0x1001408
 1010162:	test   ax,ax
 1010165:	jne    0x1010271
 101016b:	mov    ebx,r12d
 101016e:	test   BYTE PTR [rip+0x78bf],0x2        # 0x1017a34
 1010175:	je     0x100f498
 101017b:	mov    rax,QWORD PTR [rip+0xa65e]        # 0x101a7e0
 1010182:	test   rax,rax
 1010185:	je     0x100f498
 101018b:	mov    r8,QWORD PTR [rip+0xa64e]        # 0x101a7e0
 1010192:	mov    edx,0x98800
 1010197:	jmp    0x100fbe5
 101019c:	mov    edi,DWORD PTR [r14+rax*4+0x3658]
 10101a4:	test   BYTE PTR [rip+0x7889],0x2        # 0x1017a34
 10101ab:	je     0x1010208
 10101ad:	mov    rax,QWORD PTR [rip+0xa5f4]        # 0x101a7a8
 10101b4:	test   rax,rax
 10101b7:	je     0x1010208
 10101b9:	mov    eax,DWORD PTR [rip+0x7845]        # 0x1017a04
 10101bf:	mov    DWORD PTR [rsp+0x40],eax
 10101c3:	mov    rax,QWORD PTR [rip+0x786e]        # 0x1017a38
 10101ca:	mov    QWORD PTR [rsp+0x38],rax
 10101cf:	mov    eax,DWORD PTR [rip+0x7893]        # 0x1017a68
 10101d5:	mov    DWORD PTR [rsp+0x30],eax
 10101d9:	mov    rax,QWORD PTR [rip+0x78b0]        # 0x1017a90
 10101e0:	mov    QWORD PTR [rsp+0x28],rax
 10101e5:	mov    DWORD PTR [rsp+0x20],edi
 10101e9:	mov    r9,QWORD PTR [rip+0x7b08]        # 0x1017cf8
 10101f0:	mov    r8,QWORD PTR [rip+0xa5b1]        # 0x101a7a8
 10101f7:	mov    edx,0x9b000
 10101fc:	mov    rcx,QWORD PTR [rip+0x9fbd]        # 0x101a1c0
 1010203:	call   0x10128c0
 1010208:	mov    eax,DWORD PTR [rip+0x77f6]        # 0x1017a04
 101020e:	mov    DWORD PTR [rsp+0x28],eax
 1010212:	mov    rax,QWORD PTR [rip+0x781f]        # 0x1017a38
 1010219:	mov    QWORD PTR [rsp+0x20],rax
 101021e:	mov    r9d,DWORD PTR [rip+0x7843]        # 0x1017a68
 1010225:	mov    r8,QWORD PTR [rip+0x7864]        # 0x1017a90
 101022c:	mov    edx,edi
 101022e:	mov    rcx,QWORD PTR [rip+0x7ac3]        # 0x1017cf8
 1010235:	call   QWORD PTR [rip+0xffffffffffff119d]        # 0x10013d8
 101023b:	test   ax,ax
 101023e:	jne    0x1010271
 1010240:	mov    ebx,r12d
 1010243:	test   BYTE PTR [rip+0x77ea],0x2        # 0x1017a34
 101024a:	je     0x100f498
 1010250:	mov    rax,QWORD PTR [rip+0xa359]        # 0x101a5b0
 1010257:	test   rax,rax
 101025a:	je     0x100f498
 1010260:	mov    r8,QWORD PTR [rip+0xa349]        # 0x101a5b0
 1010267:	mov    edx,0x9bc00
 101026c:	jmp    0x100fbe5
 1010271:	test   BYTE PTR [rip+0x77bc],0x2        # 0x1017a34
 1010278:	je     0x10102c1
 101027a:	mov    rax,QWORD PTR [rip+0xa457]        # 0x101a6d8
 1010281:	test   rax,rax
 1010284:	je     0x10102c1
 1010286:	mov    rax,QWORD PTR [rip+0x7813]        # 0x1017aa0
 101028d:	mov    QWORD PTR [rsp+0x30],rax
 1010292:	mov    DWORD PTR [rsp+0x28],0xa
 101029a:	mov    DWORD PTR [rsp+0x20],0xa
 10102a2:	mov    r9,QWORD PTR [rip+0x7a4f]        # 0x1017cf8
 10102a9:	mov    r8,QWORD PTR [rip+0xa428]        # 0x101a6d8
 10102b0:	mov    edx,0x9d400
 10102b5:	mov    rcx,QWORD PTR [rip+0x9f04]        # 0x101a1c0
 10102bc:	call   0x10128c0
 10102c1:	mov    r8,QWORD PTR [rip+0x77d8]        # 0x1017aa0
 10102c8:	mov    edx,0xa
 10102cd:	mov    rcx,QWORD PTR [rip+0x7a24]        # 0x1017cf8
 10102d4:	call   QWORD PTR [rip+0xffffffffffff112e]        # 0x1001408
 10102da:	cmp    bx,ax
 10102dd:	jne    0x1010310
 10102df:	mov    ebx,r12d
 10102e2:	test   BYTE PTR [rip+0x774b],0x2        # 0x1017a34
 10102e9:	je     0x100f498
 10102ef:	mov    rax,QWORD PTR [rip+0xa452]        # 0x101a748
 10102f6:	test   rax,rax
 10102f9:	je     0x100f498
 10102ff:	mov    r8,QWORD PTR [rip+0xa442]        # 0x101a748
 1010306:	mov    edx,0x9e000
 101030b:	jmp    0x100fbe5
 1010310:	cmp    QWORD PTR [rip+0x79f1],rbx        # 0x1017d08
 1010317:	je     0x10103b3
 101031d:	cmp    DWORD PTR [rip+0x7709],ebx        # 0x1017a2c
 1010323:	je     0x10103b3
 1010329:	test   BYTE PTR [rip+0x7704],0x2        # 0x1017a34
 1010330:	je     0x1010369
 1010332:	mov    rax,QWORD PTR [rip+0xa24f]        # 0x101a588
 1010339:	test   rax,rax
 101033c:	je     0x1010369
 101033e:	mov    rax,QWORD PTR [rip+0x79c3]        # 0x1017d08
 1010345:	mov    QWORD PTR [rsp+0x20],rax
 101034a:	mov    r9,QWORD PTR [rip+0x79a7]        # 0x1017cf8
 1010351:	mov    r8,QWORD PTR [rip+0xa230]        # 0x101a588
 1010358:	mov    edx,0x9f400
 101035d:	mov    rcx,QWORD PTR [rip+0x9e5c]        # 0x101a1c0
 1010364:	call   0x10128c0
 1010369:	mov    rdx,QWORD PTR [rip+0x7998]        # 0x1017d08
 1010370:	mov    rcx,QWORD PTR [rip+0x7981]        # 0x1017cf8
 1010377:	call   QWORD PTR [rip+0xffffffffffff107b]        # 0x10013f8
 101037d:	test   ax,ax
 1010380:	jne    0x10103b3
 1010382:	mov    ebx,r12d
 1010385:	test   BYTE PTR [rip+0x76a8],0x2        # 0x1017a34
 101038c:	je     0x100f498
 1010392:	mov    rax,QWORD PTR [rip+0xa27f]        # 0x101a618
 1010399:	test   rax,rax
 101039c:	je     0x100f498
 10103a2:	mov    r8,QWORD PTR [rip+0xa26f]        # 0x101a618
 10103a9:	mov    edx,0xa0000
 10103ae:	jmp    0x100fbe5
 10103b3:	cmp    DWORD PTR [rip+0x766e],0x1        # 0x1017a28
 10103ba:	jne    0x1010495
 10103c0:	cmp    DWORD PTR [rip+0x763a],ebx        # 0x1017a00
 10103c6:	je     0x101042f
 10103c8:	test   BYTE PTR [rip+0x7665],0x2        # 0x1017a34
 10103cf:	je     0x1010411
 10103d1:	mov    rax,QWORD PTR [rip+0xa2f8]        # 0x101a6d0
 10103d8:	test   rax,rax
 10103db:	je     0x1010411
 10103dd:	mov    QWORD PTR [rsp+0x30],r12
 10103e2:	mov    DWORD PTR [rsp+0x28],0x8
 10103ea:	mov    DWORD PTR [rsp+0x20],0x8
 10103f2:	mov    r9,QWORD PTR [rip+0x78ff]        # 0x1017cf8
 10103f9:	mov    r8,QWORD PTR [rip+0xa2d0]        # 0x101a6d0
 1010400:	mov    edx,0xa1c00
 1010405:	mov    rcx,QWORD PTR [rip+0x9db4]        # 0x101a1c0
 101040c:	call   0x10128c0
 1010411:	mov    r8,r12
 1010414:	mov    edx,0x8
 1010419:	mov    rcx,QWORD PTR [rip+0x78d8]        # 0x1017cf8
 1010420:	call   QWORD PTR [rip+0xffffffffffff0fe2]        # 0x1001408
 1010426:	cmp    DWORD PTR [rip+0x75fb],0x1        # 0x1017a28
 101042d:	jne    0x1010495
 101042f:	cmp    DWORD PTR [rip+0x75fb],ebx        # 0x1017a30
 1010435:	je     0x1010495
 1010437:	test   BYTE PTR [rip+0x75f6],0x2        # 0x1017a34
 101043e:	je     0x1010480
 1010440:	mov    rax,QWORD PTR [rip+0xa179]        # 0x101a5c0
 1010447:	test   rax,rax
 101044a:	je     0x1010480
 101044c:	mov    QWORD PTR [rsp+0x30],r12
 1010451:	mov    DWORD PTR [rsp+0x28],0x5
 1010459:	mov    DWORD PTR [rsp+0x20],0x5
 1010461:	mov    r9,QWORD PTR [rip+0x7890]        # 0x1017cf8
 1010468:	mov    r8,QWORD PTR [rip+0xa151]        # 0x101a5c0
 101046f:	mov    edx,0xa3800
 1010474:	mov    rcx,QWORD PTR [rip+0x9d45]        # 0x101a1c0
 101047b:	call   0x10128c0
 1010480:	mov    r8,r12
 1010483:	mov    edx,0x5
 1010488:	mov    rcx,QWORD PTR [rip+0x7869]        # 0x1017cf8
 101048f:	call   QWORD PTR [rip+0xffffffffffff0f73]        # 0x1001408
 1010495:	cmp    DWORD PTR [rip+0x75b9],ebx        # 0x1017a54
 101049b:	jle    0x1010540
 10104a1:	test   BYTE PTR [rip+0x758c],0x2        # 0x1017a34
 10104a8:	je     0x10104f1
 10104aa:	mov    rax,QWORD PTR [rip+0xa117]        # 0x101a5c8
 10104b1:	test   rax,rax
 10104b4:	je     0x10104f1
 10104b6:	movsxd rax,DWORD PTR [rip+0x7597]        # 0x1017a54
 10104bd:	mov    QWORD PTR [rsp+0x30],rax
 10104c2:	mov    DWORD PTR [rsp+0x28],0xf
 10104ca:	mov    DWORD PTR [rsp+0x20],0xf
 10104d2:	mov    r9,QWORD PTR [rip+0x781f]        # 0x1017cf8
 10104d9:	mov    r8,QWORD PTR [rip+0xa0e8]        # 0x101a5c8
 10104e0:	mov    edx,0xa5400
 10104e5:	mov    rcx,QWORD PTR [rip+0x9cd4]        # 0x101a1c0
 10104ec:	call   0x10128c0
 10104f1:	movsxd r8,DWORD PTR [rip+0x755c]        # 0x1017a54
 10104f8:	mov    edx,0xf
 10104fd:	mov    rcx,QWORD PTR [rip+0x77f4]        # 0x1017cf8
 1010504:	call   QWORD PTR [rip+0xffffffffffff0efe]        # 0x1001408
 101050a:	cmp    bx,ax
 101050d:	jne    0x1010540
 101050f:	mov    ebx,r12d
 1010512:	test   BYTE PTR [rip+0x751b],0x2        # 0x1017a34
 1010519:	je     0x100f498
 101051f:	mov    rax,QWORD PTR [rip+0xa2ea]        # 0x101a810
 1010526:	test   rax,rax
 1010529:	je     0x100f498
 101052f:	mov    r8,QWORD PTR [rip+0xa2da]        # 0x101a810
 1010536:	mov    edx,0xa5c00
 101053b:	jmp    0x100fbe5
 1010540:	cmp    DWORD PTR [rip+0x7509],0xffffffff        # 0x1017a50
 1010547:	je     0x10105aa
 1010549:	test   BYTE PTR [rip+0x74e4],0x2        # 0x1017a34
 1010550:	je     0x1010593
 1010552:	mov    rax,QWORD PTR [rip+0xa0b7]        # 0x101a610
 1010559:	test   rax,rax
 101055c:	je     0x1010593
 101055e:	movsxd rax,DWORD PTR [rip+0x74eb]        # 0x1017a50
 1010565:	mov    QWORD PTR [rsp+0x30],rax
 101056a:	mov    DWORD PTR [rsp+0x28],r12d
 101056f:	mov    DWORD PTR [rsp+0x20],r12d
 1010574:	mov    r9,QWORD PTR [rip+0x777d]        # 0x1017cf8
 101057b:	mov    r8,QWORD PTR [rip+0xa08e]        # 0x101a610
 1010582:	mov    edx,0xa7400
 1010587:	mov    rcx,QWORD PTR [rip+0x9c32]        # 0x101a1c0
 101058e:	call   0x10128c0
 1010593:	movsxd r8,DWORD PTR [rip+0x74b6]        # 0x1017a50
 101059a:	mov    edx,r12d
 101059d:	mov    rcx,QWORD PTR [rip+0x7754]        # 0x1017cf8
 10105a4:	call   QWORD PTR [rip+0xffffffffffff0e5e]        # 0x1001408
 10105aa:	cmp    DWORD PTR [rip+0x74af],0xffffffff        # 0x1017a60
 10105b1:	je     0x101061c
 10105b3:	test   BYTE PTR [rip+0x747a],0x2        # 0x1017a34
 10105ba:	je     0x1010603
 10105bc:	mov    rax,QWORD PTR [rip+0xa165]        # 0x101a728
 10105c3:	test   rax,rax
 10105c6:	je     0x1010603
 10105c8:	movsxd rax,DWORD PTR [rip+0x7491]        # 0x1017a60
 10105cf:	mov    QWORD PTR [rsp+0x30],rax
 10105d4:	mov    DWORD PTR [rsp+0x28],0x4
 10105dc:	mov    DWORD PTR [rsp+0x20],0x4
 10105e4:	mov    r9,QWORD PTR [rip+0x770d]        # 0x1017cf8
 10105eb:	mov    r8,QWORD PTR [rip+0xa136]        # 0x101a728
 10105f2:	mov    edx,0xa9000
 10105f7:	mov    rcx,QWORD PTR [rip+0x9bc2]        # 0x101a1c0
 10105fe:	call   0x10128c0
 1010603:	movsxd r8,DWORD PTR [rip+0x7456]        # 0x1017a60
 101060a:	mov    edx,0x4
 101060f:	mov    rcx,QWORD PTR [rip+0x76e2]        # 0x1017cf8
 1010616:	call   QWORD PTR [rip+0xffffffffffff0dec]        # 0x1001408
 101061c:	cmp    QWORD PTR [rip+0x7424],0xffffffffffffffff        # 0x1017a48
 1010624:	je     0x1010687
 1010626:	test   BYTE PTR [rip+0x7407],0x2        # 0x1017a34
 101062d:	je     0x101066e
 101062f:	mov    rax,QWORD PTR [rip+0xa0fa]        # 0x101a730
 1010636:	test   rax,rax
 1010639:	je     0x101066e
 101063b:	mov    rax,QWORD PTR [rip+0x7406]        # 0x1017a48
 1010642:	mov    QWORD PTR [rsp+0x28],rax
 1010647:	mov    DWORD PTR [rsp+0x20],0x11
 101064f:	mov    r9,QWORD PTR [rip+0x76a2]        # 0x1017cf8
 1010656:	mov    r8,QWORD PTR [rip+0xa0d3]        # 0x101a730
 101065d:	mov    edx,0xaac00
 1010662:	mov    rcx,QWORD PTR [rip+0x9b57]        # 0x101a1c0
 1010669:	call   0x10128c0
 101066e:	lea    r8,[rip+0x73d3]        # 0x1017a48
 1010675:	mov    edx,0x11
 101067a:	mov    rcx,QWORD PTR [rip+0x7677]        # 0x1017cf8
 1010681:	call   QWORD PTR [rip+0xffffffffffff0d81]        # 0x1001408
 1010687:	cmp    QWORD PTR [rip+0x7381],0xffffffffffffffff        # 0x1017a10
 101068f:	je     0x10106f2
 1010691:	test   BYTE PTR [rip+0x739c],0x2        # 0x1017a34
 1010698:	je     0x10106d9
 101069a:	mov    rax,QWORD PTR [rip+0xa09f]        # 0x101a740
 10106a1:	test   rax,rax
 10106a4:	je     0x10106d9
 10106a6:	mov    rax,QWORD PTR [rip+0x7363]        # 0x1017a10
 10106ad:	mov    QWORD PTR [rsp+0x28],rax
 10106b2:	mov    DWORD PTR [rsp+0x20],0x12
 10106ba:	mov    r9,QWORD PTR [rip+0x7637]        # 0x1017cf8
 10106c1:	mov    r8,QWORD PTR [rip+0xa078]        # 0x101a740
 10106c8:	mov    edx,0xac400
 10106cd:	mov    rcx,QWORD PTR [rip+0x9aec]        # 0x101a1c0
 10106d4:	call   0x10128c0
 10106d9:	lea    r8,[rip+0x7330]        # 0x1017a10
 10106e0:	mov    edx,0x12
 10106e5:	mov    rcx,QWORD PTR [rip+0x760c]        # 0x1017cf8
 10106ec:	call   QWORD PTR [rip+0xffffffffffff0d16]        # 0x1001408
 10106f2:	cmp    DWORD PTR [rip+0x6a28],0x7fffffff        # 0x1017124
 10106fc:	je     0x10107a1
 1010702:	test   BYTE PTR [rip+0x732b],0x2        # 0x1017a34
 1010709:	je     0x1010752
 101070b:	mov    rax,QWORD PTR [rip+0xa11e]        # 0x101a830
 1010712:	test   rax,rax
 1010715:	je     0x1010752
 1010717:	movsxd rax,DWORD PTR [rip+0x6a06]        # 0x1017124
 101071e:	mov    QWORD PTR [rsp+0x30],rax
 1010723:	mov    DWORD PTR [rsp+0x28],0xc
 101072b:	mov    DWORD PTR [rsp+0x20],0xc
 1010733:	mov    r9,QWORD PTR [rip+0x75be]        # 0x1017cf8
 101073a:	mov    r8,QWORD PTR [rip+0xa0ef]        # 0x101a830
 1010741:	mov    edx,0xadc00
 1010746:	mov    rcx,QWORD PTR [rip+0x9a73]        # 0x101a1c0
 101074d:	call   0x10128c0
 1010752:	movsxd r8,DWORD PTR [rip+0x69cb]        # 0x1017124
 1010759:	mov    edx,0xc
 101075e:	mov    rcx,QWORD PTR [rip+0x7593]        # 0x1017cf8
 1010765:	call   QWORD PTR [rip+0xffffffffffff0c9d]        # 0x1001408
 101076b:	cmp    bx,ax
 101076e:	jne    0x10107a1
 1010770:	mov    ebx,r12d
 1010773:	test   BYTE PTR [rip+0x72ba],0x2        # 0x1017a34
 101077a:	je     0x100f498
 1010780:	mov    rax,QWORD PTR [rip+0x9e09]        # 0x101a590
 1010787:	test   rax,rax
 101078a:	je     0x100f498
 1010790:	mov    r8,QWORD PTR [rip+0x9df9]        # 0x101a590
 1010797:	mov    edx,0xae800
 101079c:	jmp    0x100fbe5
 10107a1:	cmp    DWORD PTR [rip+0x72d8],0x1        # 0x1017a80
 10107a8:	jne    0x1010808
 10107aa:	test   BYTE PTR [rip+0x7283],0x2        # 0x1017a34
 10107b1:	je     0x10107f3
 10107b3:	mov    rax,QWORD PTR [rip+0x9e96]        # 0x101a650
 10107ba:	test   rax,rax
 10107bd:	je     0x10107f3
 10107bf:	mov    QWORD PTR [rsp+0x30],r12
 10107c4:	mov    DWORD PTR [rsp+0x28],0x10
 10107cc:	mov    DWORD PTR [rsp+0x20],0x10
 10107d4:	mov    r9,QWORD PTR [rip+0x751d]        # 0x1017cf8
 10107db:	mov    r8,QWORD PTR [rip+0x9e6e]        # 0x101a650
 10107e2:	mov    edx,0xafc00
 10107e7:	mov    rcx,QWORD PTR [rip+0x99d2]        # 0x101a1c0
 10107ee:	call   0x10128c0
 10107f3:	mov    r8,r12
 10107f6:	mov    edx,0x10
 10107fb:	mov    rcx,QWORD PTR [rip+0x74f6]        # 0x1017cf8
 1010802:	call   QWORD PTR [rip+0xffffffffffff0c00]        # 0x1001408
 1010808:	mov    edx,r12d
 101080b:	lea    rcx,[rip+0xa0e]        # 0x1011220
 1010812:	call   QWORD PTR [rip+0xffffffffffff08e0]        # 0x10010f8
 1010818:	test   eax,eax
 101081a:	jne    0x1010892
 101081c:	test   BYTE PTR [rip+0x7211],0x2        # 0x1017a34
 1010823:	je     0x1010861
 1010825:	mov    rax,QWORD PTR [rip+0x9dfc]        # 0x101a628
 101082c:	test   rax,rax
 101082f:	je     0x1010861
 1010831:	cmp    QWORD PTR [rip+0x68ef],0xffffffffffffffff        # 0x1017128
 1010839:	je     0x1010861
 101083b:	mov    QWORD PTR [rsp+0x20],rbx
 1010840:	mov    r9,QWORD PTR [rip+0x9de1]        # 0x101a628
 1010847:	mov    r8d,0xb1800
 101084d:	mov    rdx,QWORD PTR [rip+0x996c]        # 0x101a1c0
 1010854:	mov    rcx,QWORD PTR [rip+0x68cd]        # 0x1017128
 101085b:	call   QWORD PTR [rip+0x68f7]        # 0x1017158
 1010861:	mov    ebx,r12d
 1010864:	test   BYTE PTR [rip+0x71c9],0x2        # 0x1017a34
 101086b:	je     0x100f498
 1010871:	mov    rax,QWORD PTR [rip+0x9d08]        # 0x101a580
 1010878:	test   rax,rax
 101087b:	je     0x100f498
 1010881:	mov    r8,QWORD PTR [rip+0x9cf8]        # 0x101a580
 1010888:	mov    edx,0xb1c00
 101088d:	jmp    0x100fbe5
 1010892:	test   edi,edi
 1010894:	jne    0x1010ba3
 101089a:	mov    eax,DWORD PTR [rip+0x718c]        # 0x1017a2c
 10108a0:	cmp    eax,0x3
 10108a3:	je     0x10108ee
 10108a5:	lea    rdx,[rbp-0x60]
 10108a9:	lea    rcx,[rbp-0x80]
 10108ad:	call   0x100ea40
 10108b2:	test   ax,ax
 10108b5:	jne    0x10108e8
 10108b7:	mov    ebx,r12d
 10108ba:	test   BYTE PTR [rip+0x7173],0x2        # 0x1017a34
 10108c1:	je     0x100f498
 10108c7:	mov    rax,QWORD PTR [rip+0x9f3a]        # 0x101a808
 10108ce:	test   rax,rax
 10108d1:	je     0x100f498
 10108d7:	mov    r8,QWORD PTR [rip+0x9f2a]        # 0x101a808
 10108de:	mov    edx,0xb4c00
 10108e3:	jmp    0x100fbe5
 10108e8:	mov    eax,DWORD PTR [rip+0x713e]        # 0x1017a2c
 10108ee:	cmp    eax,0x5
 10108f1:	ja     0x1010ba3
 10108f7:	cdqe   
 10108f9:	mov    ecx,DWORD PTR [r14+rax*4+0x111fc]
 1010901:	add    rcx,r14
 1010904:	jmp    rcx
 1010906:	mov    rdx,QWORD PTR [rbp-0x60]
 101090a:	movzx  ecx,WORD PTR [rbp-0x80]
 101090e:	call   0x100c890
 1010913:	test   ax,ax
 1010916:	jne    0x1010ba3
 101091c:	mov    ebx,r12d
 101091f:	test   BYTE PTR [rip+0x710e],0x2        # 0x1017a34
 1010926:	je     0x100f498
 101092c:	mov    rax,QWORD PTR [rip+0x9d25]        # 0x101a658
 1010933:	test   rax,rax
 1010936:	je     0x100f498
 101093c:	mov    r8,QWORD PTR [rip+0x9d15]        # 0x101a658
 1010943:	mov    edx,0xb9c00
 1010948:	jmp    0x100fbe5
 101094d:	test   BYTE PTR [rip+0x70e0],0x2        # 0x1017a34
 1010954:	je     0x1010996
 1010956:	mov    rax,QWORD PTR [rip+0x9e53]        # 0x101a7b0
 101095d:	test   rax,rax
 1010960:	je     0x1010996
 1010962:	mov    QWORD PTR [rsp+0x30],r12
 1010967:	mov    DWORD PTR [rsp+0x28],0xd
 101096f:	mov    DWORD PTR [rsp+0x20],0xd
 1010977:	mov    r9,QWORD PTR [rip+0x737a]        # 0x1017cf8
 101097e:	mov    r8,QWORD PTR [rip+0x9e2b]        # 0x101a7b0
 1010985:	mov    edx,0xbb000
 101098a:	mov    rcx,QWORD PTR [rip+0x982f]        # 0x101a1c0
 1010991:	call   0x10128c0
 1010996:	mov    r8,r12
 1010999:	mov    edx,0xd
 101099e:	mov    rcx,QWORD PTR [rip+0x7353]        # 0x1017cf8
 10109a5:	call   QWORD PTR [rip+0xffffffffffff0a5d]        # 0x1001408
 10109ab:	movzx  ecx,WORD PTR [rbp-0x80]
 10109af:	call   0x10113a0
 10109b4:	test   ax,ax
 10109b7:	jne    0x1010ba3
 10109bd:	mov    ebx,r12d
 10109c0:	test   BYTE PTR [rip+0x706d],0x2        # 0x1017a34
 10109c7:	je     0x100f498
 10109cd:	mov    rax,QWORD PTR [rip+0x9cbc]        # 0x101a690
 10109d4:	test   rax,rax
 10109d7:	je     0x100f498
 10109dd:	mov    r8,QWORD PTR [rip+0x9cac]        # 0x101a690
 10109e4:	mov    edx,0xbdc00
 10109e9:	jmp    0x100fbe5
 10109ee:	test   BYTE PTR [rip+0x703f],0x2        # 0x1017a34
 10109f5:	je     0x1010a37
 10109f7:	mov    rax,QWORD PTR [rip+0x9d22]        # 0x101a720
 10109fe:	test   rax,rax
 1010a01:	je     0x1010a37
 1010a03:	mov    QWORD PTR [rsp+0x30],r12
 1010a08:	mov    DWORD PTR [rsp+0x28],0xe
 1010a10:	mov    DWORD PTR [rsp+0x20],0xe
 1010a18:	mov    r9,QWORD PTR [rip+0x72d9]        # 0x1017cf8
 1010a1f:	mov    r8,QWORD PTR [rip+0x9cfa]        # 0x101a720
 1010a26:	mov    edx,0xbf400
 1010a2b:	mov    rcx,QWORD PTR [rip+0x978e]        # 0x101a1c0
 1010a32:	call   0x10128c0
 1010a37:	mov    r8,r12
 1010a3a:	mov    edx,0xe
 1010a3f:	mov    rcx,QWORD PTR [rip+0x72b2]        # 0x1017cf8
 1010a46:	call   QWORD PTR [rip+0xffffffffffff09bc]        # 0x1001408
 1010a4c:	movzx  ecx,WORD PTR [rbp-0x80]
 1010a50:	call   0x10113a0
 1010a55:	test   ax,ax
 1010a58:	jne    0x1010ba3
 1010a5e:	mov    ebx,r12d
 1010a61:	test   BYTE PTR [rip+0x6fcc],0x2        # 0x1017a34
 1010a68:	je     0x100f498
 1010a6e:	mov    rax,QWORD PTR [rip+0x9b33]        # 0x101a5a8
 1010a75:	test   rax,rax
 1010a78:	je     0x100f498
 1010a7e:	mov    r8,QWORD PTR [rip+0x9b23]        # 0x101a5a8
 1010a85:	mov    edx,0xc2000
 1010a8a:	jmp    0x100fbe5
 1010a8f:	movzx  ecx,WORD PTR [rbp-0x80]
 1010a93:	mov    rdx,QWORD PTR [rbp-0x60]
 1010a97:	call   0x1011600
 1010a9c:	test   ax,ax
 1010a9f:	jne    0x1010ba3
 1010aa5:	mov    ebx,r12d
 1010aa8:	test   BYTE PTR [rip+0x6f85],0x2        # 0x1017a34
 1010aaf:	je     0x100f498
 1010ab5:	mov    rax,QWORD PTR [rip+0x9b74]        # 0x101a630
 1010abc:	test   rax,rax
 1010abf:	je     0x100f498
 1010ac5:	mov    r8,QWORD PTR [rip+0x9b64]        # 0x101a630
 1010acc:	mov    edx,0xc5c00
 1010ad1:	jmp    0x100fbe5
 1010ad6:	test   BYTE PTR [rip+0x6f57],0x2        # 0x1017a34
 1010add:	je     0x1010b16
 1010adf:	mov    rax,QWORD PTR [rip+0x9cd2]        # 0x101a7b8
 1010ae6:	test   rax,rax
 1010ae9:	je     0x1010b16
 1010aeb:	mov    rax,QWORD PTR [rip+0x6f4e]        # 0x1017a40
 1010af2:	mov    QWORD PTR [rsp+0x20],rax
 1010af7:	mov    r9,QWORD PTR [rip+0x71fa]        # 0x1017cf8
 1010afe:	mov    r8,QWORD PTR [rip+0x9cb3]        # 0x101a7b8
 1010b05:	mov    edx,0xc7000
 1010b0a:	mov    rcx,QWORD PTR [rip+0x96af]        # 0x101a1c0
 1010b11:	call   0x10128c0
 1010b16:	mov    rdx,QWORD PTR [rip+0x6f23]        # 0x1017a40
 1010b1d:	mov    rcx,QWORD PTR [rip+0x71d4]        # 0x1017cf8
 1010b24:	call   QWORD PTR [rip+0xffffffffffff08b6]        # 0x10013e0
 1010b2a:	test   ax,ax
 1010b2d:	jne    0x1010ba3
 1010b2f:	mov    ebx,r12d
 1010b32:	test   BYTE PTR [rip+0x6efb],0x2        # 0x1017a34
 1010b39:	je     0x100f498
 1010b3f:	mov    rax,QWORD PTR [rip+0x9caa]        # 0x101a7f0
 1010b46:	test   rax,rax
 1010b49:	je     0x100f498
 1010b4f:	mov    r8,QWORD PTR [rip+0x9c9a]        # 0x101a7f0
 1010b56:	mov    edx,0xc7800
 1010b5b:	jmp    0x100fbe5
 1010b60:	movzx  ecx,WORD PTR [rbp-0x80]
 1010b64:	mov    rdx,QWORD PTR [rbp-0x60]
 1010b68:	call   0x1011600
 1010b6d:	test   ax,ax
 1010b70:	jne    0x1010ba3
 1010b72:	mov    ebx,r12d
 1010b75:	test   BYTE PTR [rip+0x6eb8],0x2        # 0x1017a34
 1010b7c:	je     0x100f498
 1010b82:	mov    rax,QWORD PTR [rip+0x9b87]        # 0x101a710
 1010b89:	test   rax,rax
 1010b8c:	je     0x100f498
 1010b92:	mov    r8,QWORD PTR [rip+0x9b77]        # 0x101a710
 1010b99:	mov    edx,0xcac00
 1010b9e:	jmp    0x100fbe5
 1010ba3:	cmp    DWORD PTR [rip+0x6f13],ebx        # 0x1017abc
 1010ba9:	je     0x1010c3d
 1010baf:	test   BYTE PTR [rip+0x6e7e],0x2        # 0x1017a34
 1010bb6:	je     0x1010bef
 1010bb8:	mov    rax,QWORD PTR [rip+0x9a21]        # 0x101a5e0
 1010bbf:	test   rax,rax
 1010bc2:	je     0x1010bef
 1010bc4:	mov    rax,QWORD PTR [rip+0x6e75]        # 0x1017a40
 1010bcb:	mov    QWORD PTR [rsp+0x20],rax
 1010bd0:	mov    r9,QWORD PTR [rip+0x7121]        # 0x1017cf8
 1010bd7:	mov    r8,QWORD PTR [rip+0x9a02]        # 0x101a5e0
 1010bde:	mov    edx,0xccc00
 1010be3:	mov    rcx,QWORD PTR [rip+0x95d6]        # 0x101a1c0
 1010bea:	call   0x10128c0
 1010bef:	mov    rdx,QWORD PTR [rip+0x6e4a]        # 0x1017a40
 1010bf6:	mov    rcx,QWORD PTR [rip+0x70fb]        # 0x1017cf8
 1010bfd:	call   QWORD PTR [rip+0xffffffffffff07f5]        # 0x10013f8
 1010c03:	test   ax,ax
 1010c06:	jne    0x100f498
 1010c0c:	mov    ebx,r12d
 1010c0f:	test   BYTE PTR [rip+0x6e1e],0x2        # 0x1017a34
 1010c16:	je     0x100f498
 1010c1c:	mov    rax,QWORD PTR [rip+0x9ae5]        # 0x101a708
 1010c23:	test   rax,rax
 1010c26:	je     0x100f498
 1010c2c:	mov    r8,QWORD PTR [rip+0x9ad5]        # 0x101a708
 1010c33:	mov    edx,0xcd400
 1010c38:	jmp    0x100fbe5
 1010c3d:	mov    edx,0x30
 1010c42:	mov    rcx,QWORD PTR [rip+0x6e7f]        # 0x1017ac8
 1010c49:	call   0x10118b0
 1010c4e:	call   QWORD PTR [rip+0xffffffffffff045c]        # 0x10010b0
 1010c54:	mov    r14d,eax
 1010c57:	test   BYTE PTR [rip+0x6dd6],0x2        # 0x1017a34
 1010c5e:	je     0x1010c8b
 1010c60:	mov    rax,QWORD PTR [rip+0x9a89]        # 0x101a6f0
 1010c67:	test   rax,rax
 1010c6a:	je     0x1010c8b
 1010c6c:	mov    r9,QWORD PTR [rip+0x7085]        # 0x1017cf8
 1010c73:	mov    r8,QWORD PTR [rip+0x9a76]        # 0x101a6f0
 1010c7a:	mov    edx,0xd0000
 1010c7f:	mov    rcx,QWORD PTR [rip+0x953a]        # 0x101a1c0
 1010c86:	call   0x10128c0
 1010c8b:	mov    edx,0x4
 1010c90:	mov    r8,r12
 1010c93:	mov    rcx,QWORD PTR [rip+0x705e]        # 0x1017cf8
 1010c9a:	call   QWORD PTR [rip+0xffffffffffff0708]        # 0x10013a8
 1010ca0:	test   BYTE PTR [rip+0x6d8d],0x2        # 0x1017a34
 1010ca7:	je     0x1010cd4
 1010ca9:	mov    rax,QWORD PTR [rip+0x98e8]        # 0x101a598
 1010cb0:	test   rax,rax
 1010cb3:	je     0x1010cd4
 1010cb5:	mov    r9,QWORD PTR [rip+0x703c]        # 0x1017cf8
 1010cbc:	mov    r8,QWORD PTR [rip+0x98d5]        # 0x101a598
 1010cc3:	mov    edx,0xd2400
 1010cc8:	mov    rcx,QWORD PTR [rip+0x94f1]        # 0x101a1c0
 1010ccf:	call   0x10128c0
 1010cd4:	xor    edx,edx
 1010cd6:	mov    rcx,QWORD PTR [rip+0x701b]        # 0x1017cf8
 1010cdd:	call   QWORD PTR [rip+0xffffffffffff072d]        # 0x1001410
 1010ce3:	movzx  edi,ax
 1010ce6:	xor    edx,edx
 1010ce8:	mov    rcx,QWORD PTR [rip+0x7009]        # 0x1017cf8
 1010cef:	call   0x10119b0
 1010cf4:	cmp    di,0x3
 1010cf8:	jne    0x1010d02
 1010cfa:	cmp    DWORD PTR [rip+0x7014],ebx        # 0x1017d14
 1010d00:	je     0x1010ca0
 1010d02:	test   BYTE PTR [rip+0x6d2b],0x2        # 0x1017a34
 1010d09:	je     0x1010d4f
 1010d0b:	mov    rax,QWORD PTR [rip+0x9b0e]        # 0x101a820
 1010d12:	test   rax,rax
 1010d15:	je     0x1010d4f
 1010d17:	lea    rax,[rbp-0x78]
 1010d1b:	mov    QWORD PTR [rsp+0x30],rax
 1010d20:	mov    DWORD PTR [rsp+0x28],0x13
 1010d28:	mov    DWORD PTR [rsp+0x20],0x13
 1010d30:	mov    r9,QWORD PTR [rip+0x6fc1]        # 0x1017cf8
 1010d37:	mov    r8,QWORD PTR [rip+0x9ae2]        # 0x101a820
 1010d3e:	mov    edx,0xd4000
 1010d43:	mov    rcx,QWORD PTR [rip+0x9476]        # 0x101a1c0
 1010d4a:	call   0x10128c0
 1010d4f:	lea    r8,[rbp-0x78]
 1010d53:	mov    edx,0x13
 1010d58:	mov    rcx,QWORD PTR [rip+0x6f99]        # 0x1017cf8
 1010d5f:	call   QWORD PTR [rip+0xffffffffffff06a3]        # 0x1001408
 1010d65:	test   ax,ax
 1010d68:	jne    0x1010d78
 1010d6a:	xor    edx,edx
 1010d6c:	mov    rcx,QWORD PTR [rip+0x6f85]        # 0x1017cf8
 1010d73:	call   0x10119b0
 1010d78:	test   BYTE PTR [rip+0x6cb5],0x2        # 0x1017a34
 1010d7f:	je     0x1010dbd
 1010d81:	mov    rax,QWORD PTR [rip+0x9a10]        # 0x101a798
 1010d88:	test   rax,rax
 1010d8b:	je     0x1010dbd
 1010d8d:	mov    rax,QWORD PTR [rbp-0x78]
 1010d91:	mov    QWORD PTR [rsp+0x28],rax
 1010d96:	mov    DWORD PTR [rsp+0x20],0x13
 1010d9e:	mov    r9,QWORD PTR [rip+0x6f53]        # 0x1017cf8
 1010da5:	mov    r8,QWORD PTR [rip+0x99ec]        # 0x101a798
 1010dac:	mov    edx,0xd5400
 1010db1:	mov    rcx,QWORD PTR [rip+0x9408]        # 0x101a1c0
 1010db8:	call   0x10128c0
 1010dbd:	test   di,di
 1010dc0:	jne    0x1010e67
 1010dc6:	cmp    QWORD PTR [rbp-0x78],0x1
 1010dcb:	jge    0x1010e67
 1010dd1:	test   BYTE PTR [rip+0x6c5c],0x2        # 0x1017a34
 1010dd8:	je     0x1010e16
 1010dda:	mov    rax,QWORD PTR [rip+0x9957]        # 0x101a738
 1010de1:	test   rax,rax
 1010de4:	je     0x1010e16
 1010de6:	cmp    QWORD PTR [rip+0x633a],0xffffffffffffffff        # 0x1017128
 1010dee:	je     0x1010e16
 1010df0:	mov    QWORD PTR [rsp+0x20],rbx
 1010df5:	mov    r9,QWORD PTR [rip+0x993c]        # 0x101a738
 1010dfc:	mov    r8d,0xd6400
 1010e02:	mov    rdx,QWORD PTR [rip+0x93b7]        # 0x101a1c0
 1010e09:	mov    rcx,QWORD PTR [rip+0x6318]        # 0x1017128
 1010e10:	call   QWORD PTR [rip+0x6342]        # 0x1017158
 1010e16:	mov    r9d,0x100
 1010e1c:	lea    r8,[rbp-0x10]
 1010e20:	mov    edx,0x35
 1010e25:	mov    rcx,QWORD PTR [rip+0x6bf4]        # 0x1017a20
 1010e2c:	call   QWORD PTR [rip+0xffffffffffff0596]        # 0x10013c8
 1010e32:	lea    rdx,[rbp-0x10]
 1010e36:	lea    rcx,[rbp-0x10]
 1010e3a:	call   QWORD PTR [rip+0xffffffffffff0580]        # 0x10013c0
 1010e40:	cmp    DWORD PTR [rip+0x6be1],0x1        # 0x1017a28
 1010e47:	cmove  rsi,r13
 1010e4b:	mov    r8,rsi
 1010e4e:	lea    rdx,[rbp-0x10]
 1010e52:	mov    rcx,QWORD PTR [rip+0x6c6f]        # 0x1017ac8
 1010e59:	call   QWORD PTR [rip+0xffffffffffff0449]        # 0x10012a8
 1010e5f:	mov    ebx,r12d
 1010e62:	jmp    0x100f498
 1010e67:	call   QWORD PTR [rip+0xffffffffffff0243]        # 0x10010b0
 1010e6d:	mov    esi,eax
 1010e6f:	sub    esi,r14d
 1010e72:	cmove  esi,r12d
 1010e76:	mov    r9d,0x100
 1010e7c:	lea    r8,[rbp-0x10]
 1010e80:	mov    edx,0x31
 1010e85:	mov    rcx,QWORD PTR [rip+0x6b94]        # 0x1017a20
 1010e8c:	call   QWORD PTR [rip+0xffffffffffff0536]        # 0x10013c8
 1010e92:	lea    rdx,[rbp-0x10]
 1010e96:	lea    rcx,[rbp-0x10]
 1010e9a:	call   QWORD PTR [rip+0xffffffffffff0520]        # 0x10013c0
 1010ea0:	mov    r8,QWORD PTR [rbp-0x78]
 1010ea4:	lea    rdx,[rbp-0x10]
 1010ea8:	mov    rcx,QWORD PTR [rip+0x6c19]        # 0x1017ac8
 1010eaf:	call   QWORD PTR [rip+0xffffffffffff03f3]        # 0x10012a8
 1010eb5:	mov    edx,0x70
 1010eba:	lea    r8,[rip+0x625f]        # 0x1017120
 1010ec1:	mov    rcx,QWORD PTR [rip+0x6e30]        # 0x1017cf8
 1010ec8:	call   QWORD PTR [rip+0xffffffffffff0492]        # 0x1001360
 1010ece:	mov    r9d,0x100
 1010ed4:	lea    r8,[rbp-0x10]
 1010ed8:	mov    edx,0x33
 1010edd:	mov    rcx,QWORD PTR [rip+0x6b3c]        # 0x1017a20
 1010ee4:	call   QWORD PTR [rip+0xffffffffffff04de]        # 0x10013c8
 1010eea:	lea    rdx,[rbp-0x10]
 1010eee:	lea    rcx,[rbp-0x10]
 1010ef2:	call   QWORD PTR [rip+0xffffffffffff04c8]        # 0x10013c0
 1010ef8:	mov    r8d,DWORD PTR [rip+0x6221]        # 0x1017120
 1010eff:	lea    rdx,[rbp-0x10]
 1010f03:	mov    rcx,QWORD PTR [rip+0x6bbe]        # 0x1017ac8
 1010f0a:	call   QWORD PTR [rip+0xffffffffffff0398]        # 0x10012a8
 1010f10:	mov    r9d,0x100
 1010f16:	lea    r8,[rbp-0x10]
 1010f1a:	mov    edx,0x32
 1010f1f:	mov    rcx,QWORD PTR [rip+0x6afa]        # 0x1017a20
 1010f26:	call   QWORD PTR [rip+0xffffffffffff049c]        # 0x10013c8
 1010f2c:	lea    rdx,[rbp-0x10]
 1010f30:	lea    rcx,[rbp-0x10]
 1010f34:	call   QWORD PTR [rip+0xffffffffffff0486]        # 0x10013c0
 1010f3a:	mov    r8d,esi
 1010f3d:	lea    rdx,[rbp-0x10]
 1010f41:	mov    rcx,QWORD PTR [rip+0x6b80]        # 0x1017ac8
 1010f48:	call   QWORD PTR [rip+0xffffffffffff035a]        # 0x10012a8
 1010f4e:	cmp    QWORD PTR [rbp-0x78],rbx
 1010f52:	jle    0x1010fc3
 1010f54:	mov    r9d,0x100
 1010f5a:	lea    r8,[rbp-0x10]
 1010f5e:	mov    edx,0x34
 1010f63:	mov    rcx,QWORD PTR [rip+0x6ab6]        # 0x1017a20
 1010f6a:	call   QWORD PTR [rip+0xffffffffffff0458]        # 0x10013c8
 1010f70:	lea    rdx,[rbp-0x10]
 1010f74:	lea    rcx,[rbp-0x10]
 1010f78:	call   QWORD PTR [rip+0xffffffffffff0442]        # 0x10013c0
 1010f7e:	xorps  xmm5,xmm5
 1010f81:	cvtsi2sd xmm5,QWORD PTR [rbp-0x78]
 1010f87:	mov    eax,esi
 1010f89:	xorps  xmm0,xmm0
 1010f8c:	cvtsi2sd xmm0,rax
 1010f91:	divsd  xmm0,QWORD PTR [rip+0xffffffffffff77ef]        # 0x1008788
 1010f99:	divsd  xmm5,xmm0
 1010f9d:	cvtpd2ps xmm0,xmm5
 1010fa1:	cvtps2pd xmm2,xmm0
 1010fa4:	movq   r8,xmm2
 1010fa9:	lea    rdx,[rbp-0x10]
 1010fad:	mov    rcx,QWORD PTR [rip+0x6b14]        # 0x1017ac8
 1010fb4:	call   QWORD PTR [rip+0xffffffffffff02ee]        # 0x10012a8
 1010fba:	xor    eax,eax
 1010fbc:	cmp    ax,di
 1010fbf:	cmove  ebx,r12d
 1010fc3:	mov    rdx,QWORD PTR [rip+0x6afe]        # 0x1017ac8
 1010fca:	lea    rcx,[rip+0xffffffffffff110b]        # 0x10020dc
 1010fd1:	call   QWORD PTR [rip+0xffffffffffff0319]        # 0x10012f0
 1010fd7:	test   BYTE PTR [rip+0x6a56],0x2        # 0x1017a34
 1010fde:	je     0x100f498
 1010fe4:	mov    rax,QWORD PTR [rip+0x9715]        # 0x101a700
 1010feb:	test   rax,rax
 1010fee:	je     0x100f498
 1010ff4:	mov    r9,QWORD PTR [rbp-0x78]
 1010ff8:	mov    r8,QWORD PTR [rip+0x9701]        # 0x101a700
 1010fff:	mov    edx,0xe7c00
 1011004:	mov    rcx,QWORD PTR [rip+0x91b5]        # 0x101a1c0
 101100b:	call   0x10128c0
 1011010:	jmp    0x100f498
 1011015:	mov    r12d,0x1
 101101b:	mov    ebx,r12d
 101101e:	test   BYTE PTR [rip+0x6a0f],0x2        # 0x1017a34
 1011025:	je     0x101108e
 1011027:	mov    rax,QWORD PTR [rip+0x96ca]        # 0x101a6f8
 101102e:	test   rax,rax
 1011031:	je     0x101108e
 1011033:	mov    r9d,r12d
 1011036:	mov    r8,QWORD PTR [rip+0x96bb]        # 0x101a6f8
 101103d:	mov    edx,0x3a800
 1011042:	jmp    0x1011082
 1011044:	test   BYTE PTR [rip+0x69e9],0x2        # 0x1017a34
 101104b:	je     0x1011074
 101104d:	mov    rax,QWORD PTR [rip+0x9504]        # 0x101a558
 1011054:	test   rax,rax
 1011057:	je     0x1011074
 1011059:	xor    r9d,r9d
 101105c:	mov    r8,QWORD PTR [rip+0x94f5]        # 0x101a558
 1011063:	mov    edx,0x39c00
 1011068:	mov    rcx,QWORD PTR [rip+0x9151]        # 0x101a1c0
 101106f:	call   0x10128c0
 1011074:	mov    r15,rbx
 1011077:	mov    rsi,rbx
 101107a:	mov    r12d,0x1
 1011080:	jmp    0x1011096
 1011082:	mov    rcx,QWORD PTR [rip+0x9137]        # 0x101a1c0
 1011089:	call   0x10128c0
 101108e:	mov    r15,QWORD PTR [rsp+0x78]
 1011093:	mov    rsi,r15
 1011096:	mov    rax,QWORD PTR [rip+0x6c53]        # 0x1017cf0
 101109d:	test   rax,rax
 10110a0:	je     0x10110bb
 10110a2:	or     edx,0xffffffff
 10110a5:	mov    rcx,rax
 10110a8:	call   QWORD PTR [rip+0xfffffffffffeffea]        # 0x1001098
 10110ae:	mov    rcx,QWORD PTR [rip+0x6c3b]        # 0x1017cf0
 10110b5:	call   QWORD PTR [rip+0xfffffffffffeffa5]        # 0x1001060
 10110bb:	mov    rdx,QWORD PTR [rip+0x6c26]        # 0x1017ce8
 10110c2:	test   rdx,rdx
 10110c5:	je     0x10110de
 10110c7:	xor    ecx,ecx
 10110c9:	call   0x10119b0
 10110ce:	mov    edx,r12d
 10110d1:	mov    rcx,QWORD PTR [rip+0x6c10]        # 0x1017ce8
 10110d8:	call   QWORD PTR [rip+0xffffffffffff028a]        # 0x1001368
 10110de:	mov    rcx,QWORD PTR [rip+0x6c13]        # 0x1017cf8
 10110e5:	test   rcx,rcx
 10110e8:	je     0x10110f6
 10110ea:	xor    edx,edx
 10110ec:	call   0x10119b0
 10110f1:	call   0x1011c20
 10110f6:	cmp    QWORD PTR [rip+0x6be2],0x0        # 0x1017ce0
 10110fe:	je     0x1011105
 1011100:	call   0x1011c20
 1011105:	mov    rcx,QWORD PTR [rip+0x692c]        # 0x1017a38
 101110c:	test   rcx,rcx
 101110f:	je     0x1011117
 1011111:	call   QWORD PTR [rip+0xffffffffffff01f1]        # 0x1001308
 1011117:	mov    rcx,QWORD PTR [rip+0x6972]        # 0x1017a90
 101111e:	test   rcx,rcx
 1011121:	je     0x1011129
 1011123:	call   QWORD PTR [rip+0xffffffffffff01df]        # 0x1001308
 1011129:	mov    rdx,QWORD PTR [rbp-0x68]
 101112d:	test   rdx,rdx
 1011130:	je     0x1011145
 1011132:	mov    rdi,rdx
 1011135:	xor    eax,eax
 1011137:	mov    rcx,r15
 101113a:	rep stos BYTE PTR es:[rdi],al
 101113c:	mov    rcx,rdx
 101113f:	call   QWORD PTR [rip+0xffffffffffff01c3]        # 0x1001308
 1011145:	mov    rdx,QWORD PTR [rbp-0x58]
 1011149:	test   rdx,rdx
 101114c:	je     0x1011161
 101114e:	mov    rdi,rdx
 1011151:	xor    eax,eax
 1011153:	mov    rcx,rsi
 1011156:	rep stos BYTE PTR es:[rdi],al
 1011158:	mov    rcx,rdx
 101115b:	call   QWORD PTR [rip+0xffffffffffff01a7]        # 0x1001308
 1011161:	mov    rcx,QWORD PTR [rbp-0x60]
 1011165:	test   rcx,rcx
 1011168:	je     0x1011170
 101116a:	call   QWORD PTR [rip+0xffffffffffff0198]        # 0x1001308
 1011170:	test   BYTE PTR [rip+0x68bd],0x2        # 0x1017a34
 1011177:	je     0x10111a1
 1011179:	mov    rax,QWORD PTR [rip+0x9598]        # 0x101a718
 1011180:	test   rax,rax
 1011183:	je     0x10111a1
 1011185:	mov    r9d,ebx
 1011188:	mov    r8,QWORD PTR [rip+0x9589]        # 0x101a718
 101118f:	mov    edx,0xf2800
 1011194:	mov    rcx,QWORD PTR [rip+0x9025]        # 0x101a1c0
 101119b:	call   0x10128c0
 10111a0:	nop
 10111a1:	cmp    QWORD PTR [rbp-0x50],0xffffffffffffffff
 10111a6:	je     0x10111cd
 10111a8:	test   BYTE PTR [rip+0x6885],0x4        # 0x1017a34
 10111af:	je     0x10111cd
 10111b1:	mov    rcx,QWORD PTR [rip+0x5f70]        # 0x1017128
 10111b8:	cmp    rcx,0xffffffffffffffff
 10111bc:	je     0x10111cd
 10111be:	lea    r9,[rbp-0x50]
 10111c2:	xor    r8d,r8d
 10111c5:	xor    edx,edx
 10111c7:	call   QWORD PTR [rip+0x5fab]        # 0x1017178
 10111cd:	mov    eax,ebx
 10111cf:	mov    rcx,QWORD PTR [rbp+0x7a0]
 10111d6:	xor    rcx,rsp
 10111d9:	call   0x1014450
 10111de:	mov    rbx,QWORD PTR [rsp+0x900]
 10111e6:	add    rsp,0x8b0
 10111ed:	pop    r15
 10111ef:	pop    r14
 10111f1:	pop    r13
 10111f3:	pop    r12
 10111f5:	pop    rdi
 10111f6:	pop    rsi
 10111f7:	pop    rbp
 10111f8:	ret    
 10111f9:	nop    DWORD PTR [rax]
 10111fc:	(bad)  
 10111fd:	or     DWORD PTR [rcx],eax
 10111ff:	add    dh,ch
 1011201:	or     DWORD PTR [rcx],eax
 1011203:	add    BYTE PTR [rdi-0x29fffef6],cl
 1011209:	or     al,BYTE PTR [rcx]
 101120b:	add    BYTE PTR [rbp+0x9],cl
 101120e:	add    DWORD PTR [rax],eax
 1011210:	(bad)  
 1011211:	or     eax,DWORD PTR [rcx]
 1011213:	add    ah,cl
 1011215:	int3   
 1011216:	int3   
 1011217:	int3   
 1011218:	int3   
 1011219:	int3   
 101121a:	int3   
 101121b:	int3   
 101121c:	int3   
 101121d:	int3   
 101121e:	int3   
 101121f:	int3   
 1011220:	sub    rsp,0x158
 1011227:	mov    rax,QWORD PTR [rip+0x5ee2]        # 0x1017110
 101122e:	xor    rax,rsp
 1011231:	mov    QWORD PTR [rsp+0x140],rax
 1011239:	test   ecx,ecx
 101123b:	je     0x1011246
 101123d:	cmp    ecx,0x1
 1011240:	jne    0x1011368
 1011246:	test   BYTE PTR [rip+0x67e7],0x2        # 0x1017a34
 101124d:	mov    QWORD PTR [rsp+0x150],rbx
 1011255:	je     0x1011297
 1011257:	mov    rax,QWORD PTR [rip+0x957a]        # 0x101a7d8
 101125e:	test   rax,rax
 1011261:	je     0x1011297
 1011263:	cmp    QWORD PTR [rip+0x5ebd],0xffffffffffffffff        # 0x1017128
 101126b:	je     0x1011297
 101126d:	mov    r9,QWORD PTR [rip+0x9564]        # 0x101a7d8
 1011274:	mov    rdx,QWORD PTR [rip+0x8f45]        # 0x101a1c0
 101127b:	mov    rcx,QWORD PTR [rip+0x5ea6]        # 0x1017128
 1011282:	mov    r8d,0xf5400
 1011288:	mov    QWORD PTR [rsp+0x20],0x0
 1011291:	call   QWORD PTR [rip+0x5ec1]        # 0x1017158
 1011297:	mov    rcx,QWORD PTR [rip+0x6a52]        # 0x1017cf0
 101129e:	mov    DWORD PTR [rip+0x6a6c],0x1        # 0x1017d14
 10112a8:	call   QWORD PTR [rip+0xfffffffffffefe42]        # 0x10010f0
 10112ae:	mov    rcx,QWORD PTR [rip+0x676b]        # 0x1017a20
 10112b5:	mov    rbx,QWORD PTR [rip+0x680c]        # 0x1017ac8
 10112bc:	lea    r8,[rsp+0x40]
 10112c1:	mov    r9d,0x100
 10112c7:	mov    edx,0x36
 10112cc:	call   QWORD PTR [rip+0xffffffffffff00f6]        # 0x10013c8
 10112d2:	lea    rdx,[rsp+0x40]
 10112d7:	lea    rcx,[rsp+0x40]
 10112dc:	call   QWORD PTR [rip+0xffffffffffff00de]        # 0x10013c0
 10112e2:	lea    rcx,[rsp+0x40]
 10112e7:	mov    rdx,rbx
 10112ea:	call   QWORD PTR [rip+0xffffffffffff0000]        # 0x10012f0
 10112f0:	test   BYTE PTR [rip+0x673d],0x2        # 0x1017a34
 10112f7:	mov    rbx,QWORD PTR [rsp+0x150]
 10112ff:	je     0x1011345
 1011301:	mov    rax,QWORD PTR [rip+0x9488]        # 0x101a790
 1011308:	test   rax,rax
 101130b:	je     0x1011345
 101130d:	mov    r8,QWORD PTR [rip+0x947c]        # 0x101a790
 1011314:	mov    r9,QWORD PTR [rip+0x69dd]        # 0x1017cf8
 101131b:	mov    rcx,QWORD PTR [rip+0x8e9e]        # 0x101a1c0
 1011322:	mov    QWORD PTR [rsp+0x30],0x1
 101132b:	mov    edx,0xf7000
 1011330:	mov    DWORD PTR [rsp+0x28],0x6
 1011338:	mov    DWORD PTR [rsp+0x20],0x6
 1011340:	call   0x10128c0
 1011345:	mov    rcx,QWORD PTR [rip+0x69ac]        # 0x1017cf8
 101134c:	mov    edx,0x6
 1011351:	lea    r8d,[rdx-0x5]
 1011355:	call   QWORD PTR [rip+0xffffffffffff00ad]        # 0x1001408
 101135b:	mov    rcx,QWORD PTR [rip+0x698e]        # 0x1017cf0
 1011362:	call   QWORD PTR [rip+0xfffffffffffefd38]        # 0x10010a0
 1011368:	lea    rcx,[rip+0xfffffffffffffeb1]        # 0x1011220
 101136f:	mov    edx,0x1
 1011374:	call   QWORD PTR [rip+0xfffffffffffefd7e]        # 0x10010f8
 101137a:	mov    eax,0x1
 101137f:	mov    rcx,QWORD PTR [rsp+0x140]
 1011387:	xor    rcx,rsp
 101138a:	call   0x1014450
 101138f:	add    rsp,0x158
 1011396:	ret    
 1011397:	int3   
 1011398:	int3   
 1011399:	int3   
 101139a:	int3   
 101139b:	int3   
 101139c:	int3   
 101139d:	int3   
 101139e:	int3   
 101139f:	int3   
 10113a0:	rex push rbp
 10113a2:	push   rsi
 10113a3:	push   r12
 10113a5:	push   r13
 10113a7:	push   r14
 10113a9:	sub    rsp,0x60
 10113ad:	test   BYTE PTR [rip+0x6680],0x2        # 0x1017a34
 10113b4:	mov    eax,DWORD PTR [rip+0x664a]        # 0x1017a04
 10113ba:	mov    r13,QWORD PTR [rip+0x6677]        # 0x1017a38
 10113c1:	mov    r12d,DWORD PTR [rip+0x66a0]        # 0x1017a68
 10113c8:	mov    r14,QWORD PTR [rip+0x66c1]        # 0x1017a90
 10113cf:	mov    rbp,QWORD PTR [rip+0x6922]        # 0x1017cf8
 10113d6:	mov    DWORD PTR [rsp+0x98],eax
 10113dd:	mov    esi,ecx
 10113df:	je     0x101140c
 10113e1:	mov    rax,QWORD PTR [rip+0x9180]        # 0x101a568
 10113e8:	test   rax,rax
 10113eb:	je     0x101140c
 10113ed:	mov    r8,QWORD PTR [rip+0x9174]        # 0x101a568
 10113f4:	mov    DWORD PTR [rsp+0x20],ecx
 10113f8:	mov    rcx,QWORD PTR [rip+0x8dc1]        # 0x101a1c0
 10113ff:	mov    r9,rbp
 1011402:	mov    edx,0xfdc00
 1011407:	call   0x10128c0
 101140c:	mov    edx,esi
 101140e:	mov    rcx,rbp
 1011411:	mov    QWORD PTR [rsp+0xa0],rdi
 1011419:	call   QWORD PTR [rip+0xfffffffffffeffe1]        # 0x1001400
 101141f:	xor    edi,edi
 1011421:	test   ax,ax
 1011424:	jne    0x101142e
 1011426:	movzx  eax,di
 1011429:	jmp    0x10115d7
 101142e:	mov    QWORD PTR [rsp+0x90],rbx
 1011436:	mov    QWORD PTR [rsp+0xa8],r15
 101143e:	test   r14,r14
 1011441:	jne    0x1011449
 1011443:	mov    r14,rdi
 1011446:	mov    r12d,edi
 1011449:	mov    ebx,0x1
 101144e:	mov    r15d,0xef
 1011454:	lea    ecx,[rbx+0x2e]
 1011457:	cmp    esi,ebx
 1011459:	jle    0x101150f
 101145f:	nop
 1011460:	test   BYTE PTR [rip+0x65cd],0x2        # 0x1017a34
 1011467:	je     0x10114c5
 1011469:	mov    rax,QWORD PTR [rip+0x9310]        # 0x101a780
 1011470:	test   rax,rax
 1011473:	je     0x10114c5
 1011475:	cmp    DWORD PTR [rip+0x65b0],0x1        # 0x1017a2c
 101147c:	mov    r8,QWORD PTR [rip+0x92fd]        # 0x101a780
 1011483:	mov    DWORD PTR [rsp+0x50],ebx
 1011487:	mov    QWORD PTR [rsp+0x48],r14
 101148c:	mov    DWORD PTR [rsp+0x40],r12d
 1011491:	mov    DWORD PTR [rsp+0x38],0xffffffff
 1011499:	mov    eax,r15d
 101149c:	mov    QWORD PTR [rsp+0x30],rdi
 10114a1:	mov    r9,rbp
 10114a4:	cmove  eax,ecx
 10114a7:	mov    rcx,QWORD PTR [rip+0x8d12]        # 0x101a1c0
 10114ae:	mov    edx,0x103800
 10114b3:	mov    DWORD PTR [rsp+0x28],eax
 10114b7:	mov    DWORD PTR [rsp+0x20],ebx
 10114bb:	call   0x10128c0
 10114c0:	mov    ecx,0x2f
 10114c5:	cmp    DWORD PTR [rip+0x6560],0x1        # 0x1017a2c
 10114cc:	mov    DWORD PTR [rsp+0x38],ebx
 10114d0:	mov    r8d,r15d
 10114d3:	cmove  r8d,ecx
 10114d7:	mov    DWORD PTR [rsp+0x30],r12d
 10114dc:	mov    edx,ebx
 10114de:	xor    r9d,r9d
 10114e1:	mov    rcx,rbp
 10114e4:	mov    QWORD PTR [rsp+0x28],r14
 10114e9:	mov    DWORD PTR [rsp+0x20],0xffffffff
 10114f1:	call   QWORD PTR [rip+0xfffffffffffeff21]        # 0x1001418
 10114f7:	test   ax,ax
 10114fa:	je     0x10115bd
 1011500:	inc    ebx
 1011502:	mov    ecx,0x2f
 1011507:	cmp    ebx,esi
 1011509:	jl     0x1011460
 101150f:	test   r13,r13
 1011512:	jne    0x101151b
 1011514:	mov    r13,rdi
 1011517:	mov    ebx,edi
 1011519:	jmp    0x1011522
 101151b:	mov    ebx,DWORD PTR [rsp+0x98]
 1011522:	test   BYTE PTR [rip+0x650b],0x2        # 0x1017a34
 1011529:	je     0x1011581
 101152b:	mov    rax,QWORD PTR [rip+0x90c6]        # 0x101a5f8
 1011532:	test   rax,rax
 1011535:	je     0x1011581
 1011537:	cmp    DWORD PTR [rip+0x64ee],0x1        # 0x1017a2c
 101153e:	mov    r8,QWORD PTR [rip+0x90b3]        # 0x101a5f8
 1011545:	mov    DWORD PTR [rsp+0x50],esi
 1011549:	mov    QWORD PTR [rsp+0x48],r13
 101154e:	mov    DWORD PTR [rsp+0x40],ebx
 1011552:	mov    DWORD PTR [rsp+0x38],0xffffffff
 101155a:	mov    eax,r15d
 101155d:	mov    QWORD PTR [rsp+0x30],rdi
 1011562:	mov    r9,rbp
 1011565:	cmove  eax,ecx
 1011568:	mov    rcx,QWORD PTR [rip+0x8c51]        # 0x101a1c0
 101156f:	mov    edx,0x10b000
 1011574:	mov    DWORD PTR [rsp+0x28],eax
 1011578:	mov    DWORD PTR [rsp+0x20],esi
 101157c:	call   0x10128c0
 1011581:	cmp    DWORD PTR [rip+0x64a4],0x1        # 0x1017a2c
 1011588:	mov    DWORD PTR [rsp+0x38],esi
 101158c:	mov    eax,0x2f
 1011591:	cmove  r15d,eax
 1011595:	mov    DWORD PTR [rsp+0x30],ebx
 1011599:	mov    edx,esi
 101159b:	movzx  r8d,r15b
 101159f:	xor    r9d,r9d
 10115a2:	mov    rcx,rbp
 10115a5:	mov    QWORD PTR [rsp+0x28],r13
 10115aa:	mov    DWORD PTR [rsp+0x20],0xffffffff
 10115b2:	call   QWORD PTR [rip+0xfffffffffffefe60]        # 0x1001418
 10115b8:	test   ax,ax
 10115bb:	jne    0x10115c2
 10115bd:	movzx  eax,di
 10115c0:	jmp    0x10115c7
 10115c2:	mov    eax,0x1
 10115c7:	mov    rbx,QWORD PTR [rsp+0x90]
 10115cf:	mov    r15,QWORD PTR [rsp+0xa8]
 10115d7:	mov    rdi,QWORD PTR [rsp+0xa0]
 10115df:	add    rsp,0x60
 10115e3:	pop    r14
 10115e5:	pop    r13
 10115e7:	pop    r12
 10115e9:	pop    rsi
 10115ea:	pop    rbp
 10115eb:	ret    
 10115ec:	int3   
 10115ed:	int3   
 10115ee:	int3   
 10115ef:	int3   
 10115f0:	int3   
 10115f1:	int3   
 10115f2:	int3   
 10115f3:	int3   
 10115f4:	int3   
 10115f5:	int3   
 10115f6:	int3   
 10115f7:	int3   
 10115f8:	int3   
 10115f9:	int3   
 10115fa:	int3   
 10115fb:	int3   
 10115fc:	int3   
 10115fd:	int3   
 10115fe:	int3   
 10115ff:	int3   
 1011600:	mov    QWORD PTR [rsp+0x10],rdx
 1011605:	push   rbp
 1011606:	push   rsi
 1011607:	push   r12
 1011609:	push   r13
 101160b:	push   r14
 101160d:	push   r15
 101160f:	sub    rsp,0x68
 1011613:	test   BYTE PTR [rip+0x641a],0x2        # 0x1017a34
 101161a:	mov    eax,DWORD PTR [rip+0x63e4]        # 0x1017a04
 1011620:	mov    r14,QWORD PTR [rip+0x6411]        # 0x1017a38
 1011627:	mov    r13d,DWORD PTR [rip+0x643a]        # 0x1017a68
 101162e:	mov    r12,QWORD PTR [rip+0x645b]        # 0x1017a90
 1011635:	mov    r15,QWORD PTR [rip+0x66bc]        # 0x1017cf8
 101163c:	mov    DWORD PTR [rsp+0xb0],eax
 1011643:	mov    QWORD PTR [rsp+0xb8],r14
 101164b:	mov    rsi,rdx
 101164e:	mov    ebp,ecx
 1011650:	je     0x101167d
 1011652:	mov    rax,QWORD PTR [rip+0x906f]        # 0x101a6c8
 1011659:	test   rax,rax
 101165c:	je     0x101167d
 101165e:	mov    r8,QWORD PTR [rip+0x9063]        # 0x101a6c8
 1011665:	mov    DWORD PTR [rsp+0x20],ecx
 1011669:	mov    rcx,QWORD PTR [rip+0x8b50]        # 0x101a1c0
 1011670:	mov    r9,r15
 1011673:	mov    edx,0x114000
 1011678:	call   0x10128c0
 101167d:	mov    edx,ebp
 101167f:	mov    rcx,r15
 1011682:	mov    QWORD PTR [rsp+0x60],rdi
 1011687:	call   QWORD PTR [rip+0xfffffffffffefd73]        # 0x1001400
 101168d:	xor    edi,edi
 101168f:	test   ax,ax
 1011692:	jne    0x101169c
 1011694:	movzx  eax,di
 1011697:	jmp    0x1011895
 101169c:	mov    QWORD PTR [rsp+0xa0],rbx
 10116a4:	test   r12,r12
 10116a7:	jne    0x10116af
 10116a9:	mov    r12,rdi
 10116ac:	mov    r13d,edi
 10116af:	mov    ebx,0x1
 10116b4:	cmp    ebp,ebx
 10116b6:	jle    0x10117a3
 10116bc:	lea    r14,[rsi+0x84]
 10116c3:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10116d0:	mov    eax,DWORD PTR [r14]
 10116d3:	xor    sil,sil
 10116d6:	cmp    DWORD PTR [rip+0x63f4],edi        # 0x1017ad0
 10116dc:	je     0x10116fe
 10116de:	cmp    eax,0x23
 10116e1:	je     0x10116fb
 10116e3:	cmp    eax,0x2f
 10116e6:	je     0x10116fb
 10116e8:	cmp    eax,0x27
 10116eb:	je     0x10116fb
 10116ed:	cmp    eax,0xaf
 10116f2:	je     0x10116fb
 10116f4:	cmp    eax,0xa7
 10116f9:	jne    0x10116fe
 10116fb:	mov    sil,0xef
 10116fe:	test   BYTE PTR [rip+0x632f],0x2        # 0x1017a34
 1011705:	je     0x1011758
 1011707:	mov    rax,QWORD PTR [rip+0x8e92]        # 0x101a5a0
 101170e:	test   rax,rax
 1011711:	je     0x1011758
 1011713:	mov    r8,QWORD PTR [rip+0x8e86]        # 0x101a5a0
 101171a:	mov    rcx,QWORD PTR [rip+0x8a9f]        # 0x101a1c0
 1011721:	mov    DWORD PTR [rsp+0x50],ebx
 1011725:	mov    QWORD PTR [rsp+0x48],r12
 101172a:	mov    DWORD PTR [rsp+0x40],r13d
 101172f:	mov    DWORD PTR [rsp+0x38],0xffffffff
 1011737:	movzx  eax,sil
 101173b:	mov    DWORD PTR [rsp+0x30],0xffffffff
 1011743:	mov    r9,r15
 1011746:	mov    DWORD PTR [rsp+0x28],eax
 101174a:	mov    edx,0x11e000
 101174f:	mov    DWORD PTR [rsp+0x20],ebx
 1011753:	call   0x10128c0
 1011758:	mov    DWORD PTR [rsp+0x38],ebx
 101175c:	mov    DWORD PTR [rsp+0x30],r13d
 1011761:	or     r9d,0xffffffff
 1011765:	movzx  r8d,sil
 1011769:	mov    edx,ebx
 101176b:	mov    rcx,r15
 101176e:	mov    QWORD PTR [rsp+0x28],r12
 1011773:	mov    DWORD PTR [rsp+0x20],0xffffffff
 101177b:	call   QWORD PTR [rip+0xfffffffffffefc97]        # 0x1001418
 1011781:	test   ax,ax
 1011784:	je     0x1011883
 101178a:	inc    ebx
 101178c:	add    r14,0x98
 1011793:	cmp    ebx,ebp
 1011795:	jl     0x10116d0
 101179b:	mov    r14,QWORD PTR [rsp+0xb8]
 10117a3:	test   r14,r14
 10117a6:	jne    0x10117b0
 10117a8:	mov    r14,rdi
 10117ab:	mov    r12d,edi
 10117ae:	jmp    0x10117b8
 10117b0:	mov    r12d,DWORD PTR [rsp+0xb0]
 10117b8:	mov    rcx,QWORD PTR [rsp+0xa8]
 10117c0:	movsxd rax,ebx
 10117c3:	xor    sil,sil
 10117c6:	imul   rax,rax,0x98
 10117cd:	cmp    DWORD PTR [rip+0x62fd],edi        # 0x1017ad0
 10117d3:	mov    ecx,DWORD PTR [rax+rcx*1-0x14]
 10117d7:	je     0x10117fb
 10117d9:	cmp    ecx,0x23
 10117dc:	je     0x10117f8
 10117de:	cmp    ecx,0x2f
 10117e1:	je     0x10117f8
 10117e3:	cmp    ecx,0x27
 10117e6:	je     0x10117f8
 10117e8:	cmp    ecx,0xaf
 10117ee:	je     0x10117f8
 10117f0:	cmp    ecx,0xa7
 10117f6:	jne    0x10117fb
 10117f8:	mov    sil,0xef
 10117fb:	test   BYTE PTR [rip+0x6232],0x2        # 0x1017a34
 1011802:	je     0x1011855
 1011804:	mov    rax,QWORD PTR [rip+0x8f6d]        # 0x101a778
 101180b:	test   rax,rax
 101180e:	je     0x1011855
 1011810:	mov    r8,QWORD PTR [rip+0x8f61]        # 0x101a778
 1011817:	mov    rcx,QWORD PTR [rip+0x89a2]        # 0x101a1c0
 101181e:	mov    DWORD PTR [rsp+0x50],ebp
 1011822:	mov    QWORD PTR [rsp+0x48],r14
 1011827:	mov    DWORD PTR [rsp+0x40],r12d
 101182c:	mov    DWORD PTR [rsp+0x38],0xffffffff
 1011834:	movzx  eax,sil
 1011838:	mov    DWORD PTR [rsp+0x30],0xffffffff
 1011840:	mov    r9,r15
 1011843:	mov    DWORD PTR [rsp+0x28],eax
 1011847:	mov    edx,0x12a400
 101184c:	mov    DWORD PTR [rsp+0x20],ebp
 1011850:	call   0x10128c0
 1011855:	mov    DWORD PTR [rsp+0x38],ebp
 1011859:	mov    DWORD PTR [rsp+0x30],r12d
 101185e:	or     r9d,0xffffffff
 1011862:	movzx  r8d,sil
 1011866:	mov    edx,ebp
 1011868:	mov    rcx,r15
 101186b:	mov    QWORD PTR [rsp+0x28],r14
 1011870:	mov    DWORD PTR [rsp+0x20],0xffffffff
 1011878:	call   QWORD PTR [rip+0xfffffffffffefb9a]        # 0x1001418
 101187e:	test   ax,ax
 1011881:	jne    0x1011888
 1011883:	movzx  eax,di
 1011886:	jmp    0x101188d
 1011888:	mov    eax,0x1
 101188d:	mov    rbx,QWORD PTR [rsp+0xa0]
 1011895:	mov    rdi,QWORD PTR [rsp+0x60]
 101189a:	add    rsp,0x68
 101189e:	pop    r15
 10118a0:	pop    r14
 10118a2:	pop    r13
 10118a4:	pop    r12
 10118a6:	pop    rsi
 10118a7:	pop    rbp
 10118a8:	ret    
 10118a9:	int3   
 10118aa:	int3   
 10118ab:	int3   
 10118ac:	int3   
 10118ad:	int3   
 10118ae:	int3   
 10118af:	int3   
 10118b0:	rex push rbx
 10118b2:	sub    rsp,0x130
 10118b9:	mov    rax,QWORD PTR [rip+0x5850]        # 0x1017110
 10118c0:	xor    rax,rsp
 10118c3:	mov    QWORD PTR [rsp+0x120],rax
 10118cb:	mov    rbx,rcx
 10118ce:	mov    rcx,QWORD PTR [rip+0x614b]        # 0x1017a20
 10118d5:	lea    r8,[rsp+0x20]
 10118da:	movzx  edx,dx
 10118dd:	mov    r9d,0x100
 10118e3:	call   QWORD PTR [rip+0xfffffffffffefadf]        # 0x10013c8
 10118e9:	lea    rdx,[rsp+0x20]
 10118ee:	lea    rcx,[rsp+0x20]
 10118f3:	call   QWORD PTR [rip+0xfffffffffffefac7]        # 0x10013c0
 10118f9:	lea    rcx,[rsp+0x20]
 10118fe:	mov    rdx,rbx
 1011901:	call   QWORD PTR [rip+0xfffffffffffef9e9]        # 0x10012f0
 1011907:	mov    rcx,QWORD PTR [rsp+0x120]
 101190f:	xor    rcx,rsp
 1011912:	call   0x1014450
 1011917:	add    rsp,0x130
 101191e:	pop    rbx
 101191f:	ret    
 1011920:	int3   
 1011921:	int3   
 1011922:	int3   
 1011923:	int3   
 1011924:	int3   
 1011925:	int3   
 1011926:	int3   
 1011927:	int3   
 1011928:	int3   
 1011929:	int3   
 101192a:	int3   
 101192b:	int3   
 101192c:	int3   
 101192d:	int3   
 101192e:	int3   
 101192f:	int3   
 1011930:	rex push rbx
 1011932:	sub    rsp,0x130
 1011939:	mov    rax,QWORD PTR [rip+0x57d0]        # 0x1017110
 1011940:	xor    rax,rsp
 1011943:	mov    QWORD PTR [rsp+0x120],rax
 101194b:	mov    rbx,rcx
 101194e:	mov    rcx,QWORD PTR [rip+0x60cb]        # 0x1017a20
 1011955:	lea    r8,[rsp+0x20]
 101195a:	mov    r9d,0x100
 1011960:	mov    edx,0x3d
 1011965:	call   QWORD PTR [rip+0xfffffffffffefa5d]        # 0x10013c8
 101196b:	lea    rdx,[rsp+0x20]
 1011970:	lea    rcx,[rsp+0x20]
 1011975:	call   QWORD PTR [rip+0xfffffffffffefa45]        # 0x10013c0
 101197b:	lea    r8,[rip+0xffffffffffff5616]        # 0x1006f98
 1011982:	lea    rdx,[rsp+0x20]
 1011987:	mov    rcx,rbx
 101198a:	call   QWORD PTR [rip+0xfffffffffffef918]        # 0x10012a8
 1011990:	mov    rcx,QWORD PTR [rsp+0x120]
 1011998:	xor    rcx,rsp
 101199b:	call   0x1014450
 10119a0:	add    rsp,0x130
 10119a7:	pop    rbx
 10119a8:	ret    
 10119a9:	int3   
 10119aa:	int3   
 10119ab:	int3   
 10119ac:	int3   
 10119ad:	int3   
 10119ae:	int3   
 10119af:	int3   
 10119b0:	rex push rbp
 10119b2:	push   rsi
 10119b3:	push   rdi
 10119b4:	push   r14
 10119b6:	push   r15
 10119b8:	lea    rbp,[rsp-0x160]
 10119c0:	sub    rsp,0x260
 10119c7:	mov    rax,QWORD PTR [rip+0x5742]        # 0x1017110
 10119ce:	xor    rax,rsp
 10119d1:	mov    QWORD PTR [rbp+0x150],rax
 10119d8:	lea    rax,[rsp+0x50]
 10119dd:	mov    rsi,rdx
 10119e0:	mov    r8,rdx
 10119e3:	mov    rdi,rcx
 10119e6:	mov    rdx,rcx
 10119e9:	xor    r14d,r14d
 10119ec:	mov    QWORD PTR [rsp+0x38],r14
 10119f1:	mov    r15d,0x200
 10119f7:	lea    r9,[rsp+0x44]
 10119fc:	mov    WORD PTR [rsp+0x30],r15w
 1011a02:	mov    QWORD PTR [rsp+0x28],rax
 1011a07:	lea    rax,[rsp+0x40]
 1011a0c:	xor    ecx,ecx
 1011a0e:	mov    QWORD PTR [rsp+0x20],rax
 1011a13:	call   QWORD PTR [rip+0xfffffffffffef97f]        # 0x1001398
 1011a19:	cmp    ax,0x64
 1011a1d:	je     0x1011bf3
 1011a23:	mov    QWORD PTR [rsp+0x2a0],rbx
 1011a2b:	nop    DWORD PTR [rax+rax*1+0x0]
 1011a30:	lea    rdx,[rsp+0x50]
 1011a35:	lea    rcx,[rsp+0x50]
 1011a3a:	call   QWORD PTR [rip+0xfffffffffffef980]        # 0x10013c0
 1011a40:	cmp    BYTE PTR [rsp+0x44],0x30
 1011a45:	jne    0x1011b43
 1011a4b:	cmp    BYTE PTR [rsp+0x45],0x31
 1011a50:	jne    0x1011b43
 1011a56:	mov    r9d,DWORD PTR [rsp+0x40]
 1011a5b:	cmp    r9d,0xffffff86
 1011a5f:	jne    0x1011aca
 1011a61:	lea    rcx,[rsp+0x50]
 1011a66:	mov    edx,0x5d
 1011a6b:	call   QWORD PTR [rip+0xfffffffffffef757]        # 0x10011c8
 1011a71:	mov    rcx,QWORD PTR [rip+0x6050]        # 0x1017ac8
 1011a78:	lea    rdx,[rip+0xfffffffffffeff61]        # 0x10019e0
 1011a7f:	lea    r8,[rax+0x1]
 1011a83:	mov    rbx,rax
 1011a86:	call   QWORD PTR [rip+0xfffffffffffef81c]        # 0x10012a8
 1011a8c:	test   BYTE PTR [rip+0x5fa1],0x2        # 0x1017a34
 1011a93:	je     0x1011baf
 1011a99:	mov    rax,QWORD PTR [rip+0x8cc0]        # 0x101a760
 1011aa0:	test   rax,rax
 1011aa3:	je     0x1011baf
 1011aa9:	mov    r8,QWORD PTR [rip+0x8cb0]        # 0x101a760
 1011ab0:	mov    rcx,QWORD PTR [rip+0x8709]        # 0x101a1c0
 1011ab7:	lea    r9,[rbx+0x1]
 1011abb:	mov    edx,0x13cc00
 1011ac0:	call   0x10128c0
 1011ac5:	jmp    0x1011baf
 1011aca:	cmp    r9d,0x12e4
 1011ad1:	jne    0x1011af9
 1011ad3:	mov    rcx,QWORD PTR [rip+0x5fc6]        # 0x1017aa0
 1011ada:	test   rcx,rcx
 1011add:	je     0x1011af9
 1011adf:	lea    rdx,[rip+0xffffffffffff1602]        # 0x10030e8
 1011ae6:	call   QWORD PTR [rip+0xfffffffffffef83c]        # 0x1001328
 1011aec:	test   eax,eax
 1011aee:	je     0x1011baf
 1011af4:	mov    r9d,DWORD PTR [rsp+0x40]
 1011af9:	mov    rcx,QWORD PTR [rip+0x5fc8]        # 0x1017ac8
 1011b00:	lea    rax,[rsp+0x50]
 1011b05:	lea    r8,[rsp+0x44]
 1011b0a:	lea    rdx,[rip+0xffffffffffff15e7]        # 0x10030f8
 1011b11:	mov    QWORD PTR [rsp+0x20],rax
 1011b16:	call   QWORD PTR [rip+0xfffffffffffef78c]        # 0x10012a8
 1011b1c:	test   BYTE PTR [rip+0x5f11],0x2        # 0x1017a34
 1011b23:	je     0x1011baf
 1011b29:	mov    rax,QWORD PTR [rip+0x8b80]        # 0x101a6b0
 1011b30:	test   rax,rax
 1011b33:	je     0x1011baf
 1011b35:	mov    r8,QWORD PTR [rip+0x8b74]        # 0x101a6b0
 1011b3c:	mov    edx,0x13f800
 1011b41:	jmp    0x1011b8c
 1011b43:	mov    r9d,DWORD PTR [rsp+0x40]
 1011b48:	mov    rcx,QWORD PTR [rip+0x5f79]        # 0x1017ac8
 1011b4f:	lea    rax,[rsp+0x50]
 1011b54:	lea    r8,[rsp+0x44]
 1011b59:	lea    rdx,[rip+0xffffffffffff1608]        # 0x1003168
 1011b60:	mov    QWORD PTR [rsp+0x20],rax
 1011b65:	call   QWORD PTR [rip+0xfffffffffffef73d]        # 0x10012a8
 1011b6b:	test   BYTE PTR [rip+0x5ec2],0x2        # 0x1017a34
 1011b72:	je     0x1011baf
 1011b74:	mov    rax,QWORD PTR [rip+0x8a85]        # 0x101a600
 1011b7b:	test   rax,rax
 1011b7e:	je     0x1011baf
 1011b80:	mov    r8,QWORD PTR [rip+0x8a79]        # 0x101a600
 1011b87:	mov    edx,0x142400
 1011b8c:	mov    rcx,QWORD PTR [rip+0x862d]        # 0x101a1c0
 1011b93:	lea    rax,[rsp+0x50]
 1011b98:	lea    r9,[rsp+0x44]
 1011b9d:	mov    QWORD PTR [rsp+0x28],rax
 1011ba2:	mov    eax,DWORD PTR [rsp+0x40]
 1011ba6:	mov    DWORD PTR [rsp+0x20],eax
 1011baa:	call   0x10128c0
 1011baf:	mov    QWORD PTR [rsp+0x38],r14
 1011bb4:	lea    rax,[rsp+0x50]
 1011bb9:	mov    WORD PTR [rsp+0x30],r15w
 1011bbf:	mov    QWORD PTR [rsp+0x28],rax
 1011bc4:	lea    rax,[rsp+0x40]
 1011bc9:	lea    r9,[rsp+0x44]
 1011bce:	mov    r8,rsi
 1011bd1:	mov    rdx,rdi
 1011bd4:	xor    ecx,ecx
 1011bd6:	mov    QWORD PTR [rsp+0x20],rax
 1011bdb:	call   QWORD PTR [rip+0xfffffffffffef7b7]        # 0x1001398
 1011be1:	cmp    ax,0x64
 1011be5:	jne    0x1011a30
 1011beb:	mov    rbx,QWORD PTR [rsp+0x2a0]
 1011bf3:	mov    rcx,QWORD PTR [rbp+0x150]
 1011bfa:	xor    rcx,rsp
 1011bfd:	call   0x1014450
 1011c02:	add    rsp,0x260
 1011c09:	pop    r15
 1011c0b:	pop    r14
 1011c0d:	pop    rdi
 1011c0e:	pop    rsi
 1011c0f:	pop    rbp
 1011c10:	ret    
 1011c11:	int3   
 1011c12:	int3   
 1011c13:	int3   
 1011c14:	int3   
 1011c15:	int3   
 1011c16:	int3   
 1011c17:	int3   
 1011c18:	int3   
 1011c19:	int3   
 1011c1a:	int3   
 1011c1b:	int3   
 1011c1c:	int3   
 1011c1d:	int3   
 1011c1e:	int3   
 1011c1f:	int3   
 1011c20:	mov    QWORD PTR [rsp+0x10],rbx
 1011c25:	push   rdi
 1011c26:	sub    rsp,0x20
 1011c2a:	test   BYTE PTR [rip+0x5e03],0x4        # 0x1017a34
 1011c31:	mov    rbx,QWORD PTR [rip+0x60c0]        # 0x1017cf8
 1011c38:	mov    rdi,QWORD PTR [rip+0x60a1]        # 0x1017ce0
 1011c3f:	mov    QWORD PTR [rsp+0x30],0xffffffffffffffff
 1011c48:	je     0x1011c6d
 1011c4a:	mov    rax,QWORD PTR [rip+0x8c3f]        # 0x101a890
 1011c51:	test   rax,rax
 1011c54:	je     0x1011c6d
 1011c56:	mov    rdx,QWORD PTR [rip+0x8c33]        # 0x101a890
 1011c5d:	lea    rcx,[rsp+0x30]
 1011c62:	mov    r9,rbx
 1011c65:	mov    r8,rdi
 1011c68:	call   0x1012960
 1011c6d:	mov    rcx,rbx
 1011c70:	call   QWORD PTR [rip+0xfffffffffffef71a]        # 0x1001390
 1011c76:	mov    rcx,rbx
 1011c79:	call   QWORD PTR [rip+0xfffffffffffef701]        # 0x1001380
 1011c7f:	mov    rcx,rdi
 1011c82:	call   QWORD PTR [rip+0xfffffffffffef728]        # 0x10013b0
 1011c88:	cmp    QWORD PTR [rsp+0x30],0xffffffffffffffff
 1011c8e:	je     0x1011cb6
 1011c90:	test   BYTE PTR [rip+0x5d9d],0x4        # 0x1017a34
 1011c97:	je     0x1011cb6
 1011c99:	mov    rcx,QWORD PTR [rip+0x5488]        # 0x1017128
 1011ca0:	cmp    rcx,0xffffffffffffffff
 1011ca4:	je     0x1011cb6
 1011ca6:	lea    r9,[rsp+0x30]
 1011cab:	xor    r8d,r8d
 1011cae:	xor    edx,edx
 1011cb0:	call   QWORD PTR [rip+0x54c2]        # 0x1017178
 1011cb6:	mov    rbx,QWORD PTR [rsp+0x38]
 1011cbb:	add    rsp,0x20
 1011cbf:	pop    rdi
 1011cc0:	ret    
 1011cc1:	int3   
 1011cc2:	int3   
 1011cc3:	int3   
 1011cc4:	int3   
 1011cc5:	int3   
 1011cc6:	int3   
 1011cc7:	int3   
 1011cc8:	int3   
 1011cc9:	int3   
 1011cca:	int3   
 1011ccb:	int3   
 1011ccc:	int3   
 1011ccd:	int3   
 1011cce:	int3   
 1011ccf:	int3   
 1011cd0:	mov    rax,rsp
 1011cd3:	push   rbp
 1011cd4:	push   r14
 1011cd6:	push   r15
 1011cd8:	lea    rbp,[rax-0x6e8]
 1011cdf:	sub    rsp,0x7d0
 1011ce6:	mov    QWORD PTR [rsp+0x60],0xfffffffffffffffe
 1011cef:	mov    QWORD PTR [rax+0x8],rbx
 1011cf3:	mov    QWORD PTR [rax+0x10],rsi
 1011cf7:	mov    QWORD PTR [rax+0x18],rdi
 1011cfb:	mov    QWORD PTR [rax+0x20],r12
 1011cff:	mov    rax,QWORD PTR [rip+0x540a]        # 0x1017110
 1011d06:	xor    rax,rsp
 1011d09:	mov    QWORD PTR [rbp+0x6c0],rax
 1011d10:	mov    QWORD PTR [rsp+0x50],0xffffffffffffffff
 1011d19:	test   BYTE PTR [rip+0x5d14],0x4        # 0x1017a34
 1011d20:	je     0x1011d46
 1011d22:	mov    rax,QWORD PTR [rip+0x8b6f]        # 0x101a898
 1011d29:	test   rax,rax
 1011d2c:	je     0x1011d46
 1011d2e:	lea    r8,[rip+0xffffffffffff0f8b]        # 0x1002cc0
 1011d35:	mov    rdx,QWORD PTR [rip+0x8b5c]        # 0x101a898
 1011d3c:	lea    rcx,[rsp+0x50]
 1011d41:	call   0x1012960
 1011d46:	xor    r15d,r15d
 1011d49:	mov    QWORD PTR [rip+0x5cd0],r15        # 0x1017a20
 1011d50:	mov    r8d,0x104
 1011d56:	lea    rdx,[rsp+0x70]
 1011d5b:	xor    ecx,ecx
 1011d5d:	call   QWORD PTR [rip+0xfffffffffffef39d]        # 0x1001100
 1011d63:	test   eax,eax
 1011d65:	jne    0x1011db2
 1011d67:	test   BYTE PTR [rip+0x5cc6],0x2        # 0x1017a34
 1011d6e:	je     0x1011dad
 1011d70:	mov    rax,QWORD PTR [rip+0x8a29]        # 0x101a7a0
 1011d77:	test   rax,rax
 1011d7a:	je     0x1011dad
 1011d7c:	cmp    QWORD PTR [rip+0x53a4],0xffffffffffffffff        # 0x1017128
 1011d84:	je     0x1011dad
 1011d86:	mov    QWORD PTR [rsp+0x20],r15
 1011d8b:	mov    r9,QWORD PTR [rip+0x8a0e]        # 0x101a7a0
 1011d92:	mov    r8d,0x14ec00
 1011d98:	mov    rdx,QWORD PTR [rip+0x8421]        # 0x101a1c0
 1011d9f:	mov    rcx,QWORD PTR [rip+0x5382]        # 0x1017128
 1011da6:	call   QWORD PTR [rip+0x53ac]        # 0x1017158
 1011dac:	nop
 1011dad:	jmp    0x10122ee
 1011db2:	mov    edi,0x100
 1011db7:	mov    QWORD PTR [rsp+0x40],rdi
 1011dbc:	lea    rax,[rbp+0x4c0]
 1011dc3:	mov    QWORD PTR [rsp+0x38],rax
 1011dc8:	mov    QWORD PTR [rsp+0x30],rdi
 1011dcd:	lea    rax,[rbp+0x5c0]
 1011dd4:	mov    QWORD PTR [rsp+0x28],rax
 1011dd9:	mov    QWORD PTR [rsp+0x20],rdi
 1011dde:	lea    r9,[rbp+0x1c0]
 1011de5:	mov    r8d,0x3
 1011deb:	lea    rdx,[rsp+0x58]
 1011df0:	lea    rcx,[rsp+0x70]
 1011df5:	call   QWORD PTR [rip+0xfffffffffffef3d5]        # 0x10011d0
 1011dfb:	mov    QWORD PTR [rsp+0x40],rdi
 1011e00:	lea    rax,[rbp+0x2c0]
 1011e07:	mov    QWORD PTR [rsp+0x38],rax
 1011e0c:	mov    QWORD PTR [rsp+0x30],rdi
 1011e11:	lea    rax,[rbp+0x3c0]
 1011e18:	mov    QWORD PTR [rsp+0x28],rax
 1011e1d:	mov    QWORD PTR [rsp+0x20],r15
 1011e22:	xor    r9d,r9d
 1011e25:	xor    r8d,r8d
 1011e28:	xor    edx,edx
 1011e2a:	lea    rcx,[rip+0xffffffffffff0e8f]        # 0x1002cc0
 1011e31:	call   QWORD PTR [rip+0xfffffffffffef399]        # 0x10011d0
 1011e37:	mov    r11d,edi
 1011e3a:	lea    rcx,[rbp+0xc0]
 1011e41:	mov    r8d,r15d
 1011e44:	lea    rdx,[rbp+0x1c0]
 1011e4b:	lea    rax,[rbp+0xc0]
 1011e52:	sub    rdx,rax
 1011e55:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1011e60:	lea    rax,[r11+0x7ffffefe]
 1011e67:	test   rax,rax
 1011e6a:	je     0x1011e80
 1011e6c:	movzx  eax,BYTE PTR [rdx+rcx*1]
 1011e70:	test   al,al
 1011e72:	je     0x1011e80
 1011e74:	mov    BYTE PTR [rcx],al
 1011e76:	inc    rcx
 1011e79:	dec    r11
 1011e7c:	jne    0x1011e60
 1011e7e:	jmp    0x1011e85
 1011e80:	test   r11,r11
 1011e83:	jne    0x1011e8e
 1011e85:	dec    rcx
 1011e88:	mov    r8d,0x8007007a
 1011e8e:	mov    BYTE PTR [rcx],r15b
 1011e91:	test   r8d,r8d
 1011e94:	jns    0x1011e9b
 1011e96:	jmp    0x10122ee
 1011e9b:	mov    rcx,rdi
 1011e9e:	lea    rax,[rbp+0x1c0]
 1011ea5:	cmp    BYTE PTR [rax],r15b
 1011ea8:	je     0x1011eb7
 1011eaa:	inc    rax
 1011ead:	dec    rcx
 1011eb0:	jne    0x1011ea5
 1011eb2:	jmp    0x10122ee
 1011eb7:	test   rcx,rcx
 1011eba:	je     0x10122ee
 1011ec0:	mov    rbx,rdi
 1011ec3:	sub    rbx,rcx
 1011ec6:	lea    r14,[rbp+0x1c0]
 1011ecd:	add    r14,rbx
 1011ed0:	call   QWORD PTR [rip+0xfffffffffffef1ba]        # 0x1001090
 1011ed6:	mov    r12d,0x404
 1011edc:	cmp    eax,0xc04
 1011ee1:	cmove  eax,r12d
 1011ee5:	mov    rsi,rdi
 1011ee8:	sub    rsi,rbx
 1011eeb:	mov    r9d,eax
 1011eee:	lea    r8,[rip+0xffffffffffff1373]        # 0x1003268
 1011ef5:	mov    rdx,rsi
 1011ef8:	mov    rcx,r14
 1011efb:	call   0x1008a80
 1011f00:	test   eax,eax
 1011f02:	jns    0x1011f09
 1011f04:	jmp    0x10122ee
 1011f09:	call   QWORD PTR [rip+0xfffffffffffef181]        # 0x1001090
 1011f0f:	cmp    eax,0xc04
 1011f14:	cmove  eax,r12d
 1011f18:	mov    r9d,eax
 1011f1b:	lea    r8,[rip+0xffffffffffff1346]        # 0x1003268
 1011f22:	mov    rdx,rsi
 1011f25:	mov    rcx,r14
 1011f28:	call   0x1008a80
 1011f2d:	test   eax,eax
 1011f2f:	jns    0x1011f36
 1011f31:	jmp    0x10122ee
 1011f36:	lea    rax,[rbp+0x2c0]
 1011f3d:	mov    QWORD PTR [rsp+0x28],rax
 1011f42:	lea    rax,[rbp+0x3c0]
 1011f49:	mov    QWORD PTR [rsp+0x20],rax
 1011f4e:	lea    r9,[rbp+0x1c0]
 1011f55:	lea    r8,[rsp+0x58]
 1011f5a:	mov    edx,0x104
 1011f5f:	lea    rcx,[rsp+0x70]
 1011f64:	call   QWORD PTR [rip+0xfffffffffffef256]        # 0x10011c0
 1011f6a:	xor    edx,edx
 1011f6c:	lea    r8d,[rdx+0x8]
 1011f70:	lea    rcx,[rsp+0x70]
 1011f75:	call   QWORD PTR [rip+0xfffffffffffef18d]        # 0x1001108
 1011f7b:	mov    QWORD PTR [rip+0x5a9e],rax        # 0x1017a20
 1011f82:	test   rax,rax
 1011f85:	jne    0x1012180
 1011f8b:	test   BYTE PTR [rip+0x5aa2],0x2        # 0x1017a34
 1011f92:	je     0x1011fc9
 1011f94:	mov    rax,QWORD PTR [rip+0x863d]        # 0x101a5d8
 1011f9b:	test   rax,rax
 1011f9e:	je     0x1011fc9
 1011fa0:	lea    rax,[rsp+0x70]
 1011fa5:	mov    QWORD PTR [rsp+0x20],rax
 1011faa:	lea    r9,[rip+0xffffffffffff0d0f]        # 0x1002cc0
 1011fb1:	mov    r8,QWORD PTR [rip+0x8620]        # 0x101a5d8
 1011fb8:	mov    edx,0x158c00
 1011fbd:	mov    rcx,QWORD PTR [rip+0x81fc]        # 0x101a1c0
 1011fc4:	call   0x10128c0
 1011fc9:	lea    rax,[rbp+0x2c0]
 1011fd0:	mov    QWORD PTR [rsp+0x28],rax
 1011fd5:	lea    rax,[rbp+0x3c0]
 1011fdc:	mov    QWORD PTR [rsp+0x20],rax
 1011fe1:	lea    r9,[rbp+0xc0]
 1011fe8:	lea    r8,[rsp+0x58]
 1011fed:	mov    edx,0x104
 1011ff2:	lea    rcx,[rsp+0x70]
 1011ff7:	call   QWORD PTR [rip+0xfffffffffffef1c3]        # 0x10011c0
 1011ffd:	xor    edx,edx
 1011fff:	lea    r8d,[rdx+0x8]
 1012003:	lea    rcx,[rsp+0x70]
 1012008:	call   QWORD PTR [rip+0xfffffffffffef0fa]        # 0x1001108
 101200e:	mov    QWORD PTR [rip+0x5a0b],rax        # 0x1017a20
 1012015:	test   rax,rax
 1012018:	jne    0x1012180
 101201e:	test   BYTE PTR [rip+0x5a0f],0x2        # 0x1017a34
 1012025:	je     0x101205c
 1012027:	mov    rax,QWORD PTR [rip+0x8632]        # 0x101a660
 101202e:	test   rax,rax
 1012031:	je     0x101205c
 1012033:	lea    rax,[rsp+0x70]
 1012038:	mov    QWORD PTR [rsp+0x20],rax
 101203d:	lea    r9,[rip+0xffffffffffff0c7c]        # 0x1002cc0
 1012044:	mov    r8,QWORD PTR [rip+0x8615]        # 0x101a660
 101204b:	mov    edx,0x15b000
 1012050:	mov    rcx,QWORD PTR [rip+0x8169]        # 0x101a1c0
 1012057:	call   0x10128c0
 101205c:	mov    rcx,rdi
 101205f:	lea    rax,[rbp+0xc0]
 1012066:	cmp    BYTE PTR [rax],r15b
 1012069:	je     0x1012078
 101206b:	inc    rax
 101206e:	dec    rcx
 1012071:	jne    0x1012066
 1012073:	jmp    0x101217b
 1012078:	test   rcx,rcx
 101207b:	je     0x101217b
 1012081:	mov    rax,rdi
 1012084:	sub    rax,rcx
 1012087:	lea    rcx,[rbp+0xc0]
 101208e:	add    rcx,rax
 1012091:	sub    rdi,rax
 1012094:	mov    r9d,0x409
 101209a:	lea    r8,[rip+0xffffffffffff11c7]        # 0x1003268
 10120a1:	mov    rdx,rdi
 10120a4:	call   0x1008a80
 10120a9:	test   eax,eax
 10120ab:	jns    0x10120b2
 10120ad:	jmp    0x10122ee
 10120b2:	lea    rax,[rbp+0x2c0]
 10120b9:	mov    QWORD PTR [rsp+0x28],rax
 10120be:	lea    rax,[rbp+0x3c0]
 10120c5:	mov    QWORD PTR [rsp+0x20],rax
 10120ca:	lea    r9,[rbp+0xc0]
 10120d1:	lea    r8,[rsp+0x58]
 10120d6:	mov    edx,0x104
 10120db:	lea    rcx,[rsp+0x70]
 10120e0:	call   QWORD PTR [rip+0xfffffffffffef0da]        # 0x10011c0
 10120e6:	xor    edx,edx
 10120e8:	lea    r8d,[rdx+0x8]
 10120ec:	lea    rcx,[rsp+0x70]
 10120f1:	call   QWORD PTR [rip+0xfffffffffffef011]        # 0x1001108
 10120f7:	mov    QWORD PTR [rip+0x5922],rax        # 0x1017a20
 10120fe:	test   rax,rax
 1012101:	jne    0x1012180
 1012103:	test   BYTE PTR [rip+0x592a],0x2        # 0x1017a34
 101210a:	je     0x1012176
 101210c:	mov    rax,QWORD PTR [rip+0x863d]        # 0x101a750
 1012113:	test   rax,rax
 1012116:	je     0x1012141
 1012118:	lea    rax,[rsp+0x70]
 101211d:	mov    QWORD PTR [rsp+0x20],rax
 1012122:	lea    r9,[rip+0xffffffffffff0b97]        # 0x1002cc0
 1012129:	mov    r8,QWORD PTR [rip+0x8620]        # 0x101a750
 1012130:	mov    edx,0x15fc00
 1012135:	mov    rcx,QWORD PTR [rip+0x8084]        # 0x101a1c0
 101213c:	call   0x10128c0
 1012141:	test   BYTE PTR [rip+0x58ec],0x2        # 0x1017a34
 1012148:	je     0x1012176
 101214a:	mov    rax,QWORD PTR [rip+0x8597]        # 0x101a6e8
 1012151:	test   rax,rax
 1012154:	je     0x1012176
 1012156:	lea    r9,[rip+0xffffffffffff0b63]        # 0x1002cc0
 101215d:	mov    r8,QWORD PTR [rip+0x8584]        # 0x101a6e8
 1012164:	mov    edx,0x160000
 1012169:	mov    rcx,QWORD PTR [rip+0x8050]        # 0x101a1c0
 1012170:	call   0x10128c0
 1012175:	nop
 1012176:	jmp    0x10122ee
 101217b:	jmp    0x10122ee
 1012180:	test   BYTE PTR [rip+0x58ad],0x2        # 0x1017a34
 1012187:	je     0x10121be
 1012189:	mov    rax,QWORD PTR [rip+0x8510]        # 0x101a6a0
 1012190:	test   rax,rax
 1012193:	je     0x10121be
 1012195:	lea    rax,[rsp+0x70]
 101219a:	mov    QWORD PTR [rsp+0x20],rax
 101219f:	lea    r9,[rip+0xffffffffffff0b1a]        # 0x1002cc0
 10121a6:	mov    r8,QWORD PTR [rip+0x84f3]        # 0x101a6a0
 10121ad:	mov    edx,0x161800
 10121b2:	mov    rcx,QWORD PTR [rip+0x8007]        # 0x101a1c0
 10121b9:	call   0x10128c0
 10121be:	mov    edx,0x2e
 10121c3:	lea    rdi,[rip+0xffffffffffff115e]        # 0x1003328
 10121ca:	mov    rcx,rdi
 10121cd:	call   QWORD PTR [rip+0xfffffffffffef105]        # 0x10012d8
 10121d3:	mov    edx,0x2e
 10121d8:	lea    rcx,[rax+0x1]
 10121dc:	call   QWORD PTR [rip+0xfffffffffffef0f6]        # 0x10012d8
 10121e2:	lea    rbx,[rax-0x1]
 10121e6:	sub    rbx,rdi
 10121e9:	mov    r9d,0x40
 10121ef:	lea    r8,[rbp+0x80]
 10121f6:	lea    edx,[r9+0x6]
 10121fa:	mov    rcx,QWORD PTR [rip+0x581f]        # 0x1017a20
 1012201:	call   QWORD PTR [rip+0xfffffffffffef1c1]        # 0x10013c8
 1012207:	test   eax,eax
 1012209:	jne    0x1012258
 101220b:	test   BYTE PTR [rip+0x5822],0x2        # 0x1017a34
 1012212:	je     0x101223f
 1012214:	mov    rax,QWORD PTR [rip+0x846d]        # 0x101a688
 101221b:	test   rax,rax
 101221e:	je     0x101223f
 1012220:	lea    r9,[rip+0xffffffffffff0a99]        # 0x1002cc0
 1012227:	mov    r8,QWORD PTR [rip+0x845a]        # 0x101a688
 101222e:	mov    edx,0x168800
 1012233:	mov    rcx,QWORD PTR [rip+0x7f86]        # 0x101a1c0
 101223a:	call   0x10128c0
 101223f:	mov    rcx,QWORD PTR [rip+0x57da]        # 0x1017a20
 1012246:	call   QWORD PTR [rip+0xfffffffffffeee3c]        # 0x1001088
 101224c:	mov    QWORD PTR [rip+0x57cd],r15        # 0x1017a20
 1012253:	jmp    0x10122ee
 1012258:	mov    r8,rbx
 101225b:	mov    rdx,rdi
 101225e:	lea    rcx,[rbp+0x80]
 1012265:	call   QWORD PTR [rip+0xfffffffffffef0a5]        # 0x1001310
 101226b:	test   eax,eax
 101226d:	je     0x10122b9
 101226f:	test   BYTE PTR [rip+0x57be],0x2        # 0x1017a34
 1012276:	je     0x10122a3
 1012278:	mov    rax,QWORD PTR [rip+0x8581]        # 0x101a800
 101227f:	test   rax,rax
 1012282:	je     0x10122a3
 1012284:	lea    r9,[rip+0xffffffffffff0a35]        # 0x1002cc0
 101228b:	mov    r8,QWORD PTR [rip+0x856e]        # 0x101a800
 1012292:	mov    edx,0x16b400
 1012297:	mov    rcx,QWORD PTR [rip+0x7f22]        # 0x101a1c0
 101229e:	call   0x10128c0
 10122a3:	mov    rcx,QWORD PTR [rip+0x5776]        # 0x1017a20
 10122aa:	call   QWORD PTR [rip+0xfffffffffffeedd8]        # 0x1001088
 10122b0:	mov    QWORD PTR [rip+0x5769],r15        # 0x1017a20
 10122b7:	jmp    0x10122ee
 10122b9:	cmp    QWORD PTR [rsp+0x50],0xffffffffffffffff
 10122bf:	je     0x10122e7
 10122c1:	test   BYTE PTR [rip+0x576c],0x4        # 0x1017a34
 10122c8:	je     0x10122e7
 10122ca:	mov    rcx,QWORD PTR [rip+0x4e57]        # 0x1017128
 10122d1:	cmp    rcx,0xffffffffffffffff
 10122d5:	je     0x10122e7
 10122d7:	lea    r9,[rsp+0x50]
 10122dc:	xor    r8d,r8d
 10122df:	xor    edx,edx
 10122e1:	call   QWORD PTR [rip+0x4e91]        # 0x1017178
 10122e7:	mov    eax,0x1
 10122ec:	jmp    0x101231e
 10122ee:	cmp    QWORD PTR [rsp+0x50],0xffffffffffffffff
 10122f4:	je     0x101231c
 10122f6:	test   BYTE PTR [rip+0x5737],0x4        # 0x1017a34
 10122fd:	je     0x101231c
 10122ff:	mov    rcx,QWORD PTR [rip+0x4e22]        # 0x1017128
 1012306:	cmp    rcx,0xffffffffffffffff
 101230a:	je     0x101231c
 101230c:	lea    r9,[rsp+0x50]
 1012311:	xor    r8d,r8d
 1012314:	xor    edx,edx
 1012316:	call   QWORD PTR [rip+0x4e5c]        # 0x1017178
 101231c:	xor    eax,eax
 101231e:	mov    rcx,QWORD PTR [rbp+0x6c0]
 1012325:	xor    rcx,rsp
 1012328:	call   0x1014450
 101232d:	lea    r11,[rsp+0x7d0]
 1012335:	mov    rbx,QWORD PTR [r11+0x20]
 1012339:	mov    rsi,QWORD PTR [r11+0x28]
 101233d:	mov    rdi,QWORD PTR [r11+0x30]
 1012341:	mov    r12,QWORD PTR [r11+0x38]
 1012345:	mov    rsp,r11
 1012348:	pop    r15
 101234a:	pop    r14
 101234c:	pop    rbp
 101234d:	ret    
 101234e:	int3   
 101234f:	int3   
 1012350:	int3   
 1012351:	int3   
 1012352:	int3   
 1012353:	int3   
 1012354:	int3   
 1012355:	int3   
 1012356:	int3   
 1012357:	int3   
 1012358:	int3   
 1012359:	int3   
 101235a:	int3   
 101235b:	int3   
 101235c:	int3   
 101235d:	int3   
 101235e:	int3   
 101235f:	int3   
 1012360:	mov    QWORD PTR [rsp+0x8],rbx
 1012365:	push   rdi
 1012366:	sub    rsp,0x30
 101236a:	mov    rax,QWORD PTR [rip+0x56ff]        # 0x1017a70
 1012371:	xor    r10d,r10d
 1012374:	or     rdx,0xffffffffffffffff
 1012378:	mov    rbx,rdx
 101237b:	mov    rdi,rcx
 101237e:	mov    QWORD PTR [rcx],r10
 1012381:	inc    rbx
 1012384:	cmp    BYTE PTR [rax+rbx*1],r10b
 1012388:	jne    0x1012381
 101238a:	add    rbx,0x30
 101238e:	cmp    rbx,0x30
 1012392:	jb     0x1012608
 1012398:	cmp    DWORD PTR [rip+0x56c5],r10d        # 0x1017a64
 101239f:	jne    0x10124a0
 10123a5:	mov    r8,QWORD PTR [rip+0x5714]        # 0x1017ac0
 10123ac:	mov    ecx,0x3
 10123b1:	test   r8,r8
 10123b4:	je     0x1012427
 10123b6:	lea    r9,[rbx+0x6]
 10123ba:	cmp    r9,rbx
 10123bd:	jb     0x10123ea
 10123bf:	mov    rax,rdx
 10123c2:	inc    rax
 10123c5:	cmp    BYTE PTR [r8+rax*1],r10b
 10123c9:	jne    0x10123c2
 10123cb:	cmp    rax,rcx
 10123ce:	jbe    0x10123de
 10123d0:	mov    rax,rdx
 10123d3:	inc    rax
 10123d6:	cmp    BYTE PTR [r8+rax*1],r10b
 10123da:	jne    0x10123d3
 10123dc:	jmp    0x10123e1
 10123de:	mov    rax,rcx
 10123e1:	lea    rbx,[rax+r9*1]
 10123e5:	cmp    rbx,r9
 10123e8:	jae    0x1012427
 10123ea:	test   BYTE PTR [rip+0x5643],0x2        # 0x1017a34
 10123f1:	je     0x101264d
 10123f7:	mov    rax,QWORD PTR [rip+0x83ea]        # 0x101a7e8
 10123fe:	test   rax,rax
 1012401:	je     0x101264d
 1012407:	cmp    QWORD PTR [rip+0x4d19],0xffffffffffffffff        # 0x1017128
 101240f:	je     0x101264d
 1012415:	mov    r9,QWORD PTR [rip+0x83cc]        # 0x101a7e8
 101241c:	mov    r8d,0x174400
 1012422:	jmp    0x1012634
 1012427:	lea    r9,[rbx+0x6]
 101242b:	cmp    r9,rbx
 101242e:	jb     0x1012463
 1012430:	mov    r8,QWORD PTR [rip+0x5661]        # 0x1017a98
 1012437:	mov    rax,rdx
 101243a:	nop    WORD PTR [rax+rax*1+0x0]
 1012440:	inc    rax
 1012443:	cmp    BYTE PTR [r8+rax*1],r10b
 1012447:	jne    0x1012440
 1012449:	cmp    rax,rcx
 101244c:	jbe    0x101245a
 101244e:	mov    rcx,rdx
 1012451:	inc    rcx
 1012454:	cmp    BYTE PTR [r8+rcx*1],r10b
 1012458:	jne    0x1012451
 101245a:	lea    rbx,[rcx+r9*1]
 101245e:	cmp    rbx,r9
 1012461:	jae    0x10124a0
 1012463:	test   BYTE PTR [rip+0x55ca],0x2        # 0x1017a34
 101246a:	je     0x101264d
 1012470:	mov    rax,QWORD PTR [rip+0x82f1]        # 0x101a768
 1012477:	test   rax,rax
 101247a:	je     0x101264d
 1012480:	cmp    QWORD PTR [rip+0x4ca0],0xffffffffffffffff        # 0x1017128
 1012488:	je     0x101264d
 101248e:	mov    r9,QWORD PTR [rip+0x82d3]        # 0x101a768
 1012495:	mov    r8d,0x176c00
 101249b:	jmp    0x1012634
 10124a0:	cmp    DWORD PTR [rip+0x55c5],r10d        # 0x1017a6c
 10124a7:	jne    0x10124fb
 10124a9:	lea    rax,[rbx+0xb]
 10124ad:	cmp    rax,rbx
 10124b0:	jb     0x10124be
 10124b2:	lea    rbx,[rax+0x80]
 10124b9:	cmp    rbx,rax
 10124bc:	jae    0x10124fb
 10124be:	test   BYTE PTR [rip+0x556f],0x2        # 0x1017a34
 10124c5:	je     0x101264d
 10124cb:	mov    rax,QWORD PTR [rip+0x81a6]        # 0x101a678
 10124d2:	test   rax,rax
 10124d5:	je     0x101264d
 10124db:	cmp    QWORD PTR [rip+0x4c45],0xffffffffffffffff        # 0x1017128
 10124e3:	je     0x101264d
 10124e9:	mov    r9,QWORD PTR [rip+0x8188]        # 0x101a678
 10124f0:	mov    r8d,0x179c00
 10124f6:	jmp    0x1012634
 10124fb:	cmp    DWORD PTR [rip+0x5582],r10d        # 0x1017a84
 1012502:	je     0x1012510
 1012504:	lea    rax,[rbx+0xe]
 1012508:	cmp    rax,rbx
 101250b:	jb     0x101257f
 101250d:	mov    rbx,rax
 1012510:	mov    rax,QWORD PTR [rip+0x5561]        # 0x1017a78
 1012517:	test   rax,rax
 101251a:	je     0x10125b9
 1012520:	lea    rcx,[rbx+0x14]
 1012524:	cmp    rcx,rbx
 1012527:	jb     0x1012542
 1012529:	nop    DWORD PTR [rax+0x0]
 1012530:	inc    rdx
 1012533:	cmp    BYTE PTR [rax+rdx*1],r10b
 1012537:	jne    0x1012530
 1012539:	lea    rbx,[rdx+rcx*1]
 101253d:	cmp    rbx,rcx
 1012540:	jae    0x10125b9
 1012542:	test   BYTE PTR [rip+0x54eb],0x2        # 0x1017a34
 1012549:	je     0x101264d
 101254f:	mov    rax,QWORD PTR [rip+0x7ffa]        # 0x101a550
 1012556:	test   rax,rax
 1012559:	je     0x101264d
 101255f:	cmp    QWORD PTR [rip+0x4bc1],0xffffffffffffffff        # 0x1017128
 1012567:	je     0x101264d
 101256d:	mov    r9,QWORD PTR [rip+0x7fdc]        # 0x101a550
 1012574:	mov    r8d,0x17f000
 101257a:	jmp    0x1012634
 101257f:	test   BYTE PTR [rip+0x54ae],0x2        # 0x1017a34
 1012586:	je     0x101264d
 101258c:	mov    rax,QWORD PTR [rip+0x80a5]        # 0x101a638
 1012593:	test   rax,rax
 1012596:	je     0x101264d
 101259c:	cmp    QWORD PTR [rip+0x4b84],0xffffffffffffffff        # 0x1017128
 10125a4:	je     0x101264d
 10125aa:	mov    r9,QWORD PTR [rip+0x8087]        # 0x101a638
 10125b1:	mov    r8d,0x17c000
 10125b7:	jmp    0x1012634
 10125b9:	mov    rcx,rbx
 10125bc:	call   QWORD PTR [rip+0xfffffffffffeed3e]        # 0x1001300
 10125c2:	mov    QWORD PTR [rdi],rax
 10125c5:	test   rax,rax
 10125c8:	jne    0x10125fa
 10125ca:	test   BYTE PTR [rip+0x5463],0x2        # 0x1017a34
 10125d1:	je     0x10125fa
 10125d3:	mov    rcx,QWORD PTR [rip+0x8106]        # 0x101a6e0
 10125da:	test   rcx,rcx
 10125dd:	je     0x10125fa
 10125df:	mov    r8,QWORD PTR [rip+0x80fa]        # 0x101a6e0
 10125e6:	mov    rcx,QWORD PTR [rip+0x7bd3]        # 0x101a1c0
 10125ed:	mov    r9,rbx
 10125f0:	mov    edx,0x181000
 10125f5:	call   0x10128c0
 10125fa:	mov    rax,rbx
 10125fd:	mov    rbx,QWORD PTR [rsp+0x40]
 1012602:	add    rsp,0x30
 1012606:	pop    rdi
 1012607:	ret    
 1012608:	test   BYTE PTR [rip+0x5425],0x2        # 0x1017a34
 101260f:	je     0x101264d
 1012611:	mov    rax,QWORD PTR [rip+0x8170]        # 0x101a788
 1012618:	test   rax,rax
 101261b:	je     0x101264d
 101261d:	cmp    QWORD PTR [rip+0x4b03],0xffffffffffffffff        # 0x1017128
 1012625:	je     0x101264d
 1012627:	mov    r9,QWORD PTR [rip+0x815a]        # 0x101a788
 101262e:	mov    r8d,0x170800
 1012634:	mov    rdx,QWORD PTR [rip+0x7b85]        # 0x101a1c0
 101263b:	mov    rcx,QWORD PTR [rip+0x4ae6]        # 0x1017128
 1012642:	mov    QWORD PTR [rsp+0x20],r10
 1012647:	call   QWORD PTR [rip+0x4b0b]        # 0x1017158
 101264d:	xor    eax,eax
 101264f:	mov    rbx,QWORD PTR [rsp+0x40]
 1012654:	add    rsp,0x30
 1012658:	pop    rdi
 1012659:	ret    
 101265a:	int3   
 101265b:	int3   
 101265c:	int3   
 101265d:	int3   
 101265e:	int3   
 101265f:	int3   
 1012660:	xor    eax,eax
 1012662:	ret    
 1012663:	int3   
 1012664:	int3   
 1012665:	int3   
 1012666:	int3   
 1012667:	int3   
 1012668:	int3   
 1012669:	int3   
 101266a:	int3   
 101266b:	int3   
 101266c:	int3   
 101266d:	int3   
 101266e:	int3   
 101266f:	int3   
 1012670:	xor    eax,eax
 1012672:	ret    
 1012673:	int3   
 1012674:	int3   
 1012675:	int3   
 1012676:	int3   
 1012677:	int3   
 1012678:	int3   
 1012679:	int3   
 101267a:	int3   
 101267b:	int3   
 101267c:	int3   
 101267d:	int3   
 101267e:	int3   
 101267f:	int3   
 1012680:	xor    eax,eax
 1012682:	ret    
 1012683:	int3   
 1012684:	int3   
 1012685:	int3   
 1012686:	int3   
 1012687:	int3   
 1012688:	int3   
 1012689:	int3   
 101268a:	int3   
 101268b:	int3   
 101268c:	int3   
 101268d:	int3   
 101268e:	int3   
 101268f:	int3   
 1012690:	xor    eax,eax
 1012692:	ret    
 1012693:	int3   
 1012694:	int3   
 1012695:	int3   
 1012696:	int3   
 1012697:	int3   
 1012698:	int3   
 1012699:	int3   
 101269a:	int3   
 101269b:	int3   
 101269c:	int3   
 101269d:	int3   
 101269e:	int3   
 101269f:	int3   
 10126a0:	xor    eax,eax
 10126a2:	ret    
 10126a3:	int3   
 10126a4:	int3   
 10126a5:	int3   
 10126a6:	int3   
 10126a7:	int3   
 10126a8:	int3   
 10126a9:	int3   
 10126aa:	int3   
 10126ab:	int3   
 10126ac:	int3   
 10126ad:	int3   
 10126ae:	int3   
 10126af:	int3   
 10126b0:	xor    eax,eax
 10126b2:	ret    
 10126b3:	int3   
 10126b4:	int3   
 10126b5:	int3   
 10126b6:	int3   
 10126b7:	int3   
 10126b8:	int3   
 10126b9:	int3   
 10126ba:	int3   
 10126bb:	int3   
 10126bc:	int3   
 10126bd:	int3   
 10126be:	int3   
 10126bf:	int3   
 10126c0:	xor    eax,eax
 10126c2:	ret    
 10126c3:	int3   
 10126c4:	int3   
 10126c5:	int3   
 10126c6:	int3   
 10126c7:	int3   
 10126c8:	int3   
 10126c9:	int3   
 10126ca:	int3   
 10126cb:	int3   
 10126cc:	int3   
 10126cd:	int3   
 10126ce:	int3   
 10126cf:	int3   
 10126d0:	xor    eax,eax
 10126d2:	ret    
 10126d3:	int3   
 10126d4:	int3   
 10126d5:	int3   
 10126d6:	int3   
 10126d7:	int3   
 10126d8:	int3   
 10126d9:	int3   
 10126da:	int3   
 10126db:	int3   
 10126dc:	int3   
 10126dd:	int3   
 10126de:	int3   
 10126df:	int3   
 10126e0:	xor    eax,eax
 10126e2:	ret    
 10126e3:	int3   
 10126e4:	int3   
 10126e5:	int3   
 10126e6:	int3   
 10126e7:	int3   
 10126e8:	int3   
 10126e9:	int3   
 10126ea:	int3   
 10126eb:	int3   
 10126ec:	int3   
 10126ed:	int3   
 10126ee:	int3   
 10126ef:	int3   
 10126f0:	xor    eax,eax
 10126f2:	ret    
 10126f3:	int3   
 10126f4:	int3   
 10126f5:	int3   
 10126f6:	int3   
 10126f7:	int3   
 10126f8:	int3   
 10126f9:	int3   
 10126fa:	int3   
 10126fb:	int3   
 10126fc:	int3   
 10126fd:	int3   
 10126fe:	int3   
 10126ff:	int3   
 1012700:	xor    eax,eax
 1012702:	ret    
 1012703:	int3   
 1012704:	int3   
 1012705:	int3   
 1012706:	int3   
 1012707:	int3   
 1012708:	int3   
 1012709:	int3   
 101270a:	int3   
 101270b:	int3   
 101270c:	int3   
 101270d:	int3   
 101270e:	int3   
 101270f:	int3   
 1012710:	xor    eax,eax
 1012712:	ret    
 1012713:	int3   
 1012714:	int3   
 1012715:	int3   
 1012716:	int3   
 1012717:	int3   
 1012718:	int3   
 1012719:	int3   
 101271a:	int3   
 101271b:	int3   
 101271c:	int3   
 101271d:	int3   
 101271e:	int3   
 101271f:	int3   
 1012720:	xor    eax,eax
 1012722:	ret    
 1012723:	int3   
 1012724:	int3   
 1012725:	int3   
 1012726:	int3   
 1012727:	int3   
 1012728:	int3   
 1012729:	int3   
 101272a:	int3   
 101272b:	int3   
 101272c:	int3   
 101272d:	int3   
 101272e:	int3   
 101272f:	int3   
 1012730:	mov    QWORD PTR [rsp+0x8],rbx
 1012735:	push   rdi
 1012736:	sub    rsp,0x20
 101273a:	mov    eax,DWORD PTR [rip+0x55d0]        # 0x1017d10
 1012740:	mov    rbx,r8
 1012743:	mov    rdi,rdx
 1012746:	mov    r9,rcx
 1012749:	test   eax,eax
 101274b:	jne    0x101276d
 101274d:	mov    ecx,0x23fa
 1012752:	call   0x1012f60
 1012757:	mov    r9,QWORD PTR [rip+0x49ca]        # 0x1017128
 101275e:	cmp    r9,0xffffffffffffffff
 1012762:	jne    0x101276d
 1012764:	lea    ecx,[r9+0x2]
 1012768:	call   0x1012d60
 101276d:	mov    rax,QWORD PTR [rip+0x4a2c]        # 0x10171a0
 1012774:	lea    rcx,[rip+0xffffffffffffffb5]        # 0x1012730
 101277b:	cmp    rax,rcx
 101277e:	jne    0x101278d
 1012780:	xor    eax,eax
 1012782:	mov    rbx,QWORD PTR [rsp+0x30]
 1012787:	add    rsp,0x20
 101278b:	pop    rdi
 101278c:	ret    
 101278d:	mov    r8,rbx
 1012790:	mov    rdx,rdi
 1012793:	mov    rcx,r9
 1012796:	mov    rbx,QWORD PTR [rsp+0x30]
 101279b:	add    rsp,0x20
 101279f:	pop    rdi
 10127a0:	rex.W jmp rax
 10127a3:	int3   
 10127a4:	int3   
 10127a5:	int3   
 10127a6:	int3   
 10127a7:	int3   
 10127a8:	int3   
 10127a9:	int3   
 10127aa:	int3   
 10127ab:	int3   
 10127ac:	int3   
 10127ad:	int3   
 10127ae:	int3   
 10127af:	int3   
 10127b0:	mov    QWORD PTR [rsp+0x8],rbx
 10127b5:	mov    QWORD PTR [rsp+0x10],rbp
 10127ba:	mov    QWORD PTR [rsp+0x18],rsi
 10127bf:	push   rdi
 10127c0:	sub    rsp,0x50
 10127c4:	mov    esi,r9d
 10127c7:	mov    rbp,r8
 10127ca:	mov    edi,edx
 10127cc:	mov    rbx,rcx
 10127cf:	test   edx,edx
 10127d1:	je     0x1012868
 10127d7:	mov    eax,DWORD PTR [rip+0x5533]        # 0x1017d10
 10127dd:	mov    DWORD PTR [rip+0x5529],0x1        # 0x1017d10
 10127e7:	test   eax,eax
 10127e9:	jne    0x1012868
 10127eb:	call   0x1012ec0
 10127f0:	mov    r11,QWORD PTR [rsp+0xa0]
 10127f8:	mov    rax,QWORD PTR [rsp+0x98]
 1012800:	mov    QWORD PTR [rsp+0x40],r11
 1012805:	mov    QWORD PTR [rsp+0x38],rax
 101280a:	mov    rax,QWORD PTR [rsp+0x90]
 1012812:	mov    QWORD PTR [rsp+0x30],rax
 1012817:	mov    rax,QWORD PTR [rsp+0x88]
 101281f:	mov    r9d,esi
 1012822:	mov    QWORD PTR [rsp+0x28],rax
 1012827:	mov    rax,QWORD PTR [rsp+0x80]
 101282f:	mov    r8,rbp
 1012832:	mov    edx,edi
 1012834:	mov    rcx,rbx
 1012837:	mov    QWORD PTR [rsp+0x20],rax
 101283c:	call   QWORD PTR [rip+0x4996]        # 0x10171d8
 1012842:	mov    edi,eax
 1012844:	test   eax,eax
 1012846:	je     0x101285d
 1012848:	call   0x1012b60
 101284d:	lea    rcx,[rip+0x5fc]        # 0x1012e50
 1012854:	call   0x10145c8
 1012859:	mov    eax,edi
 101285b:	jmp    0x101286f
 101285d:	mov    QWORD PTR [rbx],0xffffffffffffffff
 1012864:	mov    eax,edi
 1012866:	jmp    0x101286f
 1012868:	call   0x1012b60
 101286d:	xor    eax,eax
 101286f:	mov    rbx,QWORD PTR [rsp+0x60]
 1012874:	mov    rbp,QWORD PTR [rsp+0x68]
 1012879:	mov    rsi,QWORD PTR [rsp+0x70]
 101287e:	add    rsp,0x50
 1012882:	pop    rdi
 1012883:	ret    
 1012884:	int3   
 1012885:	int3   
 1012886:	int3   
 1012887:	int3   
 1012888:	int3   
 1012889:	int3   
 101288a:	int3   
 101288b:	int3   
 101288c:	int3   
 101288d:	int3   
 101288e:	int3   
 101288f:	int3   
 1012890:	mov    r9d,DWORD PTR [rip+0x519d]        # 0x1017a34
 1012897:	mov    eax,r9d
 101289a:	test   ecx,ecx
 101289c:	je     0x10128b1
 101289e:	mov    r8d,eax
 10128a1:	xor    r8d,edx
 10128a4:	and    r8d,ecx
 10128a7:	xor    r9d,r8d
 10128aa:	mov    DWORD PTR [rip+0x5183],r9d        # 0x1017a34
 10128b1:	repz ret 
 10128b3:	int3   
 10128b4:	int3   
 10128b5:	int3   
 10128b6:	int3   
 10128b7:	int3   
 10128b8:	int3   
 10128b9:	int3   
 10128ba:	int3   
 10128bb:	int3   
 10128bc:	int3   
 10128bd:	int3   
 10128be:	int3   
 10128bf:	int3   
 10128c0:	mov    QWORD PTR [rsp+0x18],r8
 10128c5:	mov    QWORD PTR [rsp+0x20],r9
 10128ca:	sub    rsp,0x38
 10128ce:	mov    rax,rcx
 10128d1:	mov    rcx,QWORD PTR [rip+0x4850]        # 0x1017128
 10128d8:	lea    r9,[rsp+0x58]
 10128dd:	cmp    rcx,0xffffffffffffffff
 10128e1:	je     0x10128fc
 10128e3:	mov    QWORD PTR [rsp+0x20],r9
 10128e8:	mov    r9,r8
 10128eb:	mov    r8,rdx
 10128ee:	mov    rdx,rax
 10128f1:	call   QWORD PTR [rip+0x4861]        # 0x1017158
 10128f7:	add    rsp,0x38
 10128fb:	ret    
 10128fc:	mov    eax,0x1
 1012901:	add    rsp,0x38
 1012905:	ret    
 1012906:	int3   
 1012907:	int3   
 1012908:	int3   
 1012909:	int3   
 101290a:	int3   
 101290b:	int3   
 101290c:	int3   
 101290d:	int3   
 101290e:	int3   
 101290f:	int3   
 1012910:	mov    QWORD PTR [rsp+0x18],r8
 1012915:	mov    QWORD PTR [rsp+0x20],r9
 101291a:	sub    rsp,0x38
 101291e:	mov    rax,rcx
 1012921:	mov    rcx,QWORD PTR [rip+0x4800]        # 0x1017128
 1012928:	lea    r9,[rsp+0x58]
 101292d:	cmp    rcx,0xffffffffffffffff
 1012931:	je     0x101294c
 1012933:	mov    QWORD PTR [rsp+0x20],r9
 1012938:	mov    r9,r8
 101293b:	mov    r8,rdx
 101293e:	mov    rdx,rax
 1012941:	call   QWORD PTR [rip+0x4819]        # 0x1017160
 1012947:	add    rsp,0x38
 101294b:	ret    
 101294c:	mov    eax,0x1
 1012951:	add    rsp,0x38
 1012955:	ret    
 1012956:	int3   
 1012957:	int3   
 1012958:	int3   
 1012959:	int3   
 101295a:	int3   
 101295b:	int3   
 101295c:	int3   
 101295d:	int3   
 101295e:	int3   
 101295f:	int3   
 1012960:	mov    QWORD PTR [rsp+0x10],rdx
 1012965:	mov    QWORD PTR [rsp+0x18],r8
 101296a:	mov    QWORD PTR [rsp+0x20],r9
 101296f:	sub    rsp,0x38
 1012973:	mov    r9,rcx
 1012976:	mov    rcx,QWORD PTR [rip+0x47ab]        # 0x1017128
 101297d:	lea    rax,[rsp+0x50]
 1012982:	cmp    rcx,0xffffffffffffffff
 1012986:	je     0x10129a2
 1012988:	mov    QWORD PTR [rsp+0x28],rax
 101298d:	mov    QWORD PTR [rsp+0x20],rdx
 1012992:	xor    r8d,r8d
 1012995:	xor    edx,edx
 1012997:	call   QWORD PTR [rip+0x47cb]        # 0x1017168
 101299d:	add    rsp,0x38
 10129a1:	ret    
 10129a2:	mov    eax,0x1
 10129a7:	add    rsp,0x38
 10129ab:	ret    
 10129ac:	int3   
 10129ad:	int3   
 10129ae:	int3   
 10129af:	int3   
 10129b0:	int3   
 10129b1:	int3   
 10129b2:	int3   
 10129b3:	int3   
 10129b4:	int3   
 10129b5:	int3   
 10129b6:	int3   
 10129b7:	int3   
 10129b8:	int3   
 10129b9:	int3   
 10129ba:	int3   
 10129bb:	int3   
 10129bc:	int3   
 10129bd:	int3   
 10129be:	int3   
 10129bf:	int3   
 10129c0:	mov    eax,0x1
 10129c5:	ret    
 10129c6:	int3   
 10129c7:	int3   
 10129c8:	int3   
 10129c9:	int3   
 10129ca:	int3   
 10129cb:	int3   
 10129cc:	int3   
 10129cd:	int3   
 10129ce:	int3   
 10129cf:	int3   
 10129d0:	mov    eax,0x1
 10129d5:	ret    
 10129d6:	int3   
 10129d7:	int3   
 10129d8:	int3   
 10129d9:	int3   
 10129da:	int3   
 10129db:	int3   
 10129dc:	int3   
 10129dd:	int3   
 10129de:	int3   
 10129df:	int3   
 10129e0:	mov    eax,0x1
 10129e5:	ret    
 10129e6:	int3   
 10129e7:	int3   
 10129e8:	int3   
 10129e9:	int3   
 10129ea:	int3   
 10129eb:	int3   
 10129ec:	int3   
 10129ed:	int3   
 10129ee:	int3   
 10129ef:	int3   
 10129f0:	mov    eax,0x1
 10129f5:	ret    
 10129f6:	int3   
 10129f7:	int3   
 10129f8:	int3   
 10129f9:	int3   
 10129fa:	int3   
 10129fb:	int3   
 10129fc:	int3   
 10129fd:	int3   
 10129fe:	int3   
 10129ff:	int3   
 1012a00:	mov    QWORD PTR [r9],0x0
 1012a07:	mov    eax,0x1
 1012a0c:	ret    
 1012a0d:	int3   
 1012a0e:	int3   
 1012a0f:	int3   
 1012a10:	int3   
 1012a11:	int3   
 1012a12:	int3   
 1012a13:	int3   
 1012a14:	int3   
 1012a15:	int3   
 1012a16:	int3   
 1012a17:	int3   
 1012a18:	int3   
 1012a19:	int3   
 1012a1a:	int3   
 1012a1b:	int3   
 1012a1c:	int3   
 1012a1d:	int3   
 1012a1e:	int3   
 1012a1f:	int3   
 1012a20:	mov    QWORD PTR [r9],0x0
 1012a27:	mov    eax,0x1
 1012a2c:	ret    
 1012a2d:	int3   
 1012a2e:	int3   
 1012a2f:	int3   
 1012a30:	int3   
 1012a31:	int3   
 1012a32:	int3   
 1012a33:	int3   
 1012a34:	int3   
 1012a35:	int3   
 1012a36:	int3   
 1012a37:	int3   
 1012a38:	int3   
 1012a39:	int3   
 1012a3a:	int3   
 1012a3b:	int3   
 1012a3c:	int3   
 1012a3d:	int3   
 1012a3e:	int3   
 1012a3f:	int3   
 1012a40:	mov    QWORD PTR [r9],0xffffffffffffffff
 1012a47:	mov    eax,0x1
 1012a4c:	ret    
 1012a4d:	int3   
 1012a4e:	int3   
 1012a4f:	int3   
 1012a50:	int3   
 1012a51:	int3   
 1012a52:	int3   
 1012a53:	int3   
 1012a54:	int3   
 1012a55:	int3   
 1012a56:	int3   
 1012a57:	int3   
 1012a58:	int3   
 1012a59:	int3   
 1012a5a:	int3   
 1012a5b:	int3   
 1012a5c:	int3   
 1012a5d:	int3   
 1012a5e:	int3   
 1012a5f:	int3   
 1012a60:	xor    eax,eax
 1012a62:	test   r9,r9
 1012a65:	setne  al
 1012a68:	ret    
 1012a69:	int3   
 1012a6a:	int3   
 1012a6b:	int3   
 1012a6c:	int3   
 1012a6d:	int3   
 1012a6e:	int3   
 1012a6f:	int3   
 1012a70:	xor    eax,eax
 1012a72:	test   r9,r9
 1012a75:	setne  al
 1012a78:	ret    
 1012a79:	int3   
 1012a7a:	int3   
 1012a7b:	int3   
 1012a7c:	int3   
 1012a7d:	int3   
 1012a7e:	int3   
 1012a7f:	int3   
 1012a80:	xor    eax,eax
 1012a82:	ret    
 1012a83:	int3   
 1012a84:	int3   
 1012a85:	int3   
 1012a86:	int3   
 1012a87:	int3   
 1012a88:	int3   
 1012a89:	int3   
 1012a8a:	int3   
 1012a8b:	int3   
 1012a8c:	int3   
 1012a8d:	int3   
 1012a8e:	int3   
 1012a8f:	int3   
 1012a90:	xor    eax,eax
 1012a92:	ret    
 1012a93:	int3   
 1012a94:	int3   
 1012a95:	int3   
 1012a96:	int3   
 1012a97:	int3   
 1012a98:	int3   
 1012a99:	int3   
 1012a9a:	int3   
 1012a9b:	int3   
 1012a9c:	int3   
 1012a9d:	int3   
 1012a9e:	int3   
 1012a9f:	int3   
 1012aa0:	xor    eax,eax
 1012aa2:	ret    
 1012aa3:	int3   
 1012aa4:	int3   
 1012aa5:	int3   
 1012aa6:	int3   
 1012aa7:	int3   
 1012aa8:	int3   
 1012aa9:	int3   
 1012aaa:	int3   
 1012aab:	int3   
 1012aac:	int3   
 1012aad:	int3   
 1012aae:	int3   
 1012aaf:	int3   
 1012ab0:	and    r8d,0xfffffffd
 1012ab4:	cmp    r8d,0x40000014
 1012abb:	jne    0x1012ac9
 1012abd:	mov    rax,QWORD PTR [rsp+0x30]
 1012ac2:	mov    QWORD PTR [rax],0x0
 1012ac9:	xor    eax,eax
 1012acb:	ret    
 1012acc:	int3   
 1012acd:	int3   
 1012ace:	int3   
 1012acf:	int3   
 1012ad0:	int3   
 1012ad1:	int3   
 1012ad2:	int3   
 1012ad3:	int3   
 1012ad4:	int3   
 1012ad5:	int3   
 1012ad6:	int3   
 1012ad7:	int3   
 1012ad8:	int3   
 1012ad9:	int3   
 1012ada:	int3   
 1012adb:	int3   
 1012adc:	int3   
 1012add:	int3   
 1012ade:	int3   
 1012adf:	int3   
 1012ae0:	mov    rax,QWORD PTR [rsp+0x28]
 1012ae5:	xor    edx,edx
 1012ae7:	mov    QWORD PTR [rcx],rdx
 1012aea:	mov    DWORD PTR [rax],edx
 1012aec:	lea    eax,[rdx+0x1]
 1012aef:	ret    
 1012af0:	int3   
 1012af1:	int3   
 1012af2:	int3   
 1012af3:	int3   
 1012af4:	int3   
 1012af5:	int3   
 1012af6:	int3   
 1012af7:	int3   
 1012af8:	int3   
 1012af9:	int3   
 1012afa:	int3   
 1012afb:	int3   
 1012afc:	int3   
 1012afd:	int3   
 1012afe:	int3   
 1012aff:	int3   
 1012b00:	xor    eax,eax
 1012b02:	ret    
 1012b03:	int3   
 1012b04:	int3   
 1012b05:	int3   
 1012b06:	int3   
 1012b07:	int3   
 1012b08:	int3   
 1012b09:	int3   
 1012b0a:	int3   
 1012b0b:	int3   
 1012b0c:	int3   
 1012b0d:	int3   
 1012b0e:	int3   
 1012b0f:	int3   
 1012b10:	sub    rsp,0x38
 1012b14:	mov    rcx,QWORD PTR [rip+0x460d]        # 0x1017128
 1012b1b:	cmp    rcx,0xffffffffffffffff
 1012b1f:	je     0x1012b4b
 1012b21:	xor    r9d,r9d
 1012b24:	mov    r8d,0x40000010
 1012b2a:	or     rdx,0xffffffffffffffff
 1012b2e:	mov    QWORD PTR [rsp+0x28],0x0
 1012b37:	mov    QWORD PTR [rsp+0x20],0x0
 1012b40:	call   QWORD PTR [rip+0x45fa]        # 0x1017140
 1012b46:	add    rsp,0x38
 1012b4a:	ret    
 1012b4b:	xor    eax,eax
 1012b4d:	add    rsp,0x38
 1012b51:	ret    
 1012b52:	int3   
 1012b53:	int3   
 1012b54:	int3   
 1012b55:	int3   
 1012b56:	int3   
 1012b57:	int3   
 1012b58:	int3   
 1012b59:	int3   
 1012b5a:	int3   
 1012b5b:	int3   
 1012b5c:	int3   
 1012b5d:	int3   
 1012b5e:	int3   
 1012b5f:	int3   
 1012b60:	mov    rax,QWORD PTR [rip+0x45d9]        # 0x1017140
 1012b67:	lea    rcx,[rip+0xfffffffffffffba2]        # 0x1012710
 1012b6e:	lea    rdx,[rip+0xffffffffffffff3b]        # 0x1012ab0
 1012b75:	cmp    rax,rcx
 1012b78:	lea    rcx,[rip+0xfffffffffffffae1]        # 0x1012660
 1012b7f:	cmove  rax,rdx
 1012b83:	lea    rdx,[rip+0xfffffffffffffe36]        # 0x10129c0
 1012b8a:	mov    QWORD PTR [rip+0x45af],rax        # 0x1017140
 1012b91:	mov    rax,QWORD PTR [rip+0x45b0]        # 0x1017148
 1012b98:	cmp    rax,rcx
 1012b9b:	lea    rcx,[rip+0xffffffffffffface]        # 0x1012670
 1012ba2:	cmove  rax,rdx
 1012ba6:	lea    rdx,[rip+0xfffffffffffffe23]        # 0x10129d0
 1012bad:	mov    QWORD PTR [rip+0x4594],rax        # 0x1017148
 1012bb4:	mov    rax,QWORD PTR [rip+0x4595]        # 0x1017150
 1012bbb:	cmp    rax,rcx
 1012bbe:	lea    rcx,[rip+0xfffffffffffffabb]        # 0x1012680
 1012bc5:	cmove  rax,rdx
 1012bc9:	lea    rdx,[rip+0xfffffffffffffe10]        # 0x10129e0
 1012bd0:	mov    QWORD PTR [rip+0x4579],rax        # 0x1017150
 1012bd7:	mov    rax,QWORD PTR [rip+0x457a]        # 0x1017158
 1012bde:	cmp    rax,rcx
 1012be1:	lea    rcx,[rip+0xfffffffffffffaa8]        # 0x1012690
 1012be8:	cmove  rax,rdx
 1012bec:	lea    rdx,[rip+0xfffffffffffffdfd]        # 0x10129f0
 1012bf3:	mov    QWORD PTR [rip+0x455e],rax        # 0x1017158
 1012bfa:	mov    rax,QWORD PTR [rip+0x455f]        # 0x1017160
 1012c01:	cmp    rax,rcx
 1012c04:	lea    rcx,[rip+0xfffffffffffffa95]        # 0x10126a0
 1012c0b:	cmove  rax,rdx
 1012c0f:	lea    rdx,[rip+0xfffffffffffffdea]        # 0x1012a00
 1012c16:	mov    QWORD PTR [rip+0x4543],rax        # 0x1017160
 1012c1d:	mov    rax,QWORD PTR [rip+0x4544]        # 0x1017168
 1012c24:	cmp    rax,rcx
 1012c27:	lea    rcx,[rip+0xfffffffffffffa82]        # 0x10126b0
 1012c2e:	cmove  rax,rdx
 1012c32:	lea    rdx,[rip+0xfffffffffffffde7]        # 0x1012a20
 1012c39:	mov    QWORD PTR [rip+0x4528],rax        # 0x1017168
 1012c40:	mov    rax,QWORD PTR [rip+0x4529]        # 0x1017170
 1012c47:	cmp    rax,rcx
 1012c4a:	lea    rcx,[rip+0xfffffffffffffa6f]        # 0x10126c0
 1012c51:	cmove  rax,rdx
 1012c55:	lea    rdx,[rip+0xfffffffffffffde4]        # 0x1012a40
 1012c5c:	mov    QWORD PTR [rip+0x450d],rax        # 0x1017170
 1012c63:	mov    rax,QWORD PTR [rip+0x450e]        # 0x1017178
 1012c6a:	cmp    rax,rcx
 1012c6d:	lea    rcx,[rip+0xfffffffffffffa5c]        # 0x10126d0
 1012c74:	cmove  rax,rdx
 1012c78:	lea    rdx,[rip+0xfffffffffffffde1]        # 0x1012a60
 1012c7f:	mov    QWORD PTR [rip+0x44f2],rax        # 0x1017178
 1012c86:	mov    rax,QWORD PTR [rip+0x44f3]        # 0x1017180
 1012c8d:	cmp    rax,rcx
 1012c90:	lea    rcx,[rip+0xfffffffffffffa49]        # 0x10126e0
 1012c97:	cmove  rax,rdx
 1012c9b:	lea    rdx,[rip+0xfffffffffffffdce]        # 0x1012a70
 1012ca2:	mov    QWORD PTR [rip+0x44d7],rax        # 0x1017180
 1012ca9:	mov    rax,QWORD PTR [rip+0x44d8]        # 0x1017188
 1012cb0:	cmp    rax,rcx
 1012cb3:	lea    rcx,[rip+0xfffffffffffffa36]        # 0x10126f0
 1012cba:	cmove  rax,rdx
 1012cbe:	lea    rdx,[rip+0xfffffffffffffdcb]        # 0x1012a90
 1012cc5:	mov    QWORD PTR [rip+0x44bc],rax        # 0x1017188
 1012ccc:	mov    rax,QWORD PTR [rip+0x44bd]        # 0x1017190
 1012cd3:	cmp    rax,rcx
 1012cd6:	lea    rcx,[rip+0xfffffffffffffa23]        # 0x1012700
 1012cdd:	cmove  rax,rdx
 1012ce1:	lea    rdx,[rip+0xfffffffffffffd98]        # 0x1012a80
 1012ce8:	mov    QWORD PTR [rip+0x44a1],rax        # 0x1017190
 1012cef:	mov    rax,QWORD PTR [rip+0x44a2]        # 0x1017198
 1012cf6:	cmp    rax,rcx
 1012cf9:	lea    rcx,[rip+0xfffffffffffffa30]        # 0x1012730
 1012d00:	cmove  rax,rdx
 1012d04:	lea    rdx,[rip+0xfffffffffffffdf5]        # 0x1012b00
 1012d0b:	mov    QWORD PTR [rip+0x4486],rax        # 0x1017198
 1012d12:	mov    rax,QWORD PTR [rip+0x4487]        # 0x10171a0
 1012d19:	cmp    rax,rcx
 1012d1c:	lea    rcx,[rip+0xfffffffffffff9fd]        # 0x1012720
 1012d23:	cmove  rax,rdx
 1012d27:	lea    rdx,[rip+0xfffffffffffffd72]        # 0x1012aa0
 1012d2e:	mov    QWORD PTR [rip+0x446b],rax        # 0x10171a0
 1012d35:	mov    rax,QWORD PTR [rip+0x446c]        # 0x10171a8
 1012d3c:	cmp    rax,rcx
 1012d3f:	cmove  rax,rdx
 1012d43:	mov    QWORD PTR [rip+0x445e],rax        # 0x10171a8
 1012d4a:	ret    
 1012d4b:	int3   
 1012d4c:	int3   
 1012d4d:	int3   
 1012d4e:	int3   
 1012d4f:	int3   
 1012d50:	int3   
 1012d51:	int3   
 1012d52:	int3   
 1012d53:	int3   
 1012d54:	int3   
 1012d55:	int3   
 1012d56:	int3   
 1012d57:	int3   
 1012d58:	int3   
 1012d59:	int3   
 1012d5a:	int3   
 1012d5b:	int3   
 1012d5c:	int3   
 1012d5d:	int3   
 1012d5e:	int3   
 1012d5f:	int3   
 1012d60:	test   ecx,ecx
 1012d62:	je     0x1012d79
 1012d64:	mov    DWORD PTR [rip+0x4cc6],0x0        # 0x1017a34
 1012d6e:	mov    QWORD PTR [rip+0x43af],0xffffffffffffffff        # 0x1017128
 1012d79:	lea    rax,[rip+0xfffffffffffffd30]        # 0x1012ab0
 1012d80:	mov    QWORD PTR [rip+0x43b9],rax        # 0x1017140
 1012d87:	lea    rax,[rip+0xfffffffffffffc32]        # 0x10129c0
 1012d8e:	mov    QWORD PTR [rip+0x43b3],rax        # 0x1017148
 1012d95:	lea    rax,[rip+0xfffffffffffffc34]        # 0x10129d0
 1012d9c:	mov    QWORD PTR [rip+0x43ad],rax        # 0x1017150
 1012da3:	lea    rax,[rip+0xfffffffffffffc36]        # 0x10129e0
 1012daa:	mov    QWORD PTR [rip+0x43a7],rax        # 0x1017158
 1012db1:	lea    rax,[rip+0xfffffffffffffc38]        # 0x10129f0
 1012db8:	mov    QWORD PTR [rip+0x43a1],rax        # 0x1017160
 1012dbf:	lea    rax,[rip+0xfffffffffffffc3a]        # 0x1012a00
 1012dc6:	mov    QWORD PTR [rip+0x439b],rax        # 0x1017168
 1012dcd:	lea    rax,[rip+0xfffffffffffffc4c]        # 0x1012a20
 1012dd4:	mov    QWORD PTR [rip+0x4395],rax        # 0x1017170
 1012ddb:	lea    rax,[rip+0xfffffffffffffc5e]        # 0x1012a40
 1012de2:	mov    QWORD PTR [rip+0x438f],rax        # 0x1017178
 1012de9:	lea    rax,[rip+0xfffffffffffffc70]        # 0x1012a60
 1012df0:	mov    QWORD PTR [rip+0x4389],rax        # 0x1017180
 1012df7:	lea    rax,[rip+0xfffffffffffffc72]        # 0x1012a70
 1012dfe:	mov    QWORD PTR [rip+0x4383],rax        # 0x1017188
 1012e05:	lea    rax,[rip+0xfffffffffffffc84]        # 0x1012a90
 1012e0c:	mov    QWORD PTR [rip+0x437d],rax        # 0x1017190
 1012e13:	lea    rax,[rip+0xfffffffffffffc66]        # 0x1012a80
 1012e1a:	mov    QWORD PTR [rip+0x4377],rax        # 0x1017198
 1012e21:	lea    rax,[rip+0xfffffffffffffcd8]        # 0x1012b00
 1012e28:	mov    QWORD PTR [rip+0x4371],rax        # 0x10171a0
 1012e2f:	lea    rax,[rip+0xfffffffffffffc6a]        # 0x1012aa0
 1012e36:	mov    QWORD PTR [rip+0x436b],rax        # 0x10171a8
 1012e3d:	ret    
 1012e3e:	int3   
 1012e3f:	int3   
 1012e40:	int3   
 1012e41:	int3   
 1012e42:	int3   
 1012e43:	int3   
 1012e44:	int3   
 1012e45:	int3   
 1012e46:	int3   
 1012e47:	int3   
 1012e48:	int3   
 1012e49:	int3   
 1012e4a:	int3   
 1012e4b:	int3   
 1012e4c:	int3   
 1012e4d:	int3   
 1012e4e:	int3   
 1012e4f:	int3   
 1012e50:	sub    rsp,0x28
 1012e54:	mov    eax,DWORD PTR [rip+0x4eb6]        # 0x1017d10
 1012e5a:	test   eax,eax
 1012e5c:	je     0x1012eae
 1012e5e:	cmp    QWORD PTR [rip+0x42c2],0xffffffffffffffff        # 0x1017128
 1012e66:	je     0x1012e6f
 1012e68:	xor    ecx,ecx
 1012e6a:	call   0x1012f60
 1012e6f:	mov    ecx,0x1
 1012e74:	call   0x1012d60
 1012e79:	lea    rcx,[rip+0xfffffffffffffc60]        # 0x1012ae0
 1012e80:	mov    QWORD PTR [rip+0x4351],rcx        # 0x10171d8
 1012e87:	mov    rcx,QWORD PTR [rip+0x4c4a]        # 0x1017ad8
 1012e8e:	test   rcx,rcx
 1012e91:	je     0x1012ea4
 1012e93:	call   QWORD PTR [rip+0xfffffffffffee1ef]        # 0x1001088
 1012e99:	mov    QWORD PTR [rip+0x4c34],0x0        # 0x1017ad8
 1012ea4:	mov    DWORD PTR [rip+0x4e62],0x0        # 0x1017d10
 1012eae:	xor    eax,eax
 1012eb0:	add    rsp,0x28
 1012eb4:	ret    
 1012eb5:	int3   
 1012eb6:	int3   
 1012eb7:	int3   
 1012eb8:	int3   
 1012eb9:	int3   
 1012eba:	int3   
 1012ebb:	int3   
 1012ebc:	int3   
 1012ebd:	int3   
 1012ebe:	int3   
 1012ebf:	int3   
 1012ec0:	sub    rsp,0x28
 1012ec4:	cmp    DWORD PTR [rip+0x4c09],0x0        # 0x1017ad4
 1012ecb:	je     0x1012ee3
 1012ecd:	mov    rcx,QWORD PTR [rip+0x4314]        # 0x10171e8
 1012ed4:	call   QWORD PTR [rip+0xfffffffffffee1e6]        # 0x10010c0
 1012eda:	mov    QWORD PTR [rip+0x4bf7],rax        # 0x1017ad8
 1012ee1:	jmp    0x1012eea
 1012ee3:	mov    rax,QWORD PTR [rip+0x4bee]        # 0x1017ad8
 1012eea:	test   rax,rax
 1012eed:	jne    0x1012f02
 1012eef:	lea    rax,[rip+0xfffffffffffffbea]        # 0x1012ae0
 1012ef6:	mov    QWORD PTR [rip+0x42db],rax        # 0x10171d8
 1012efd:	add    rsp,0x28
 1012f01:	ret    
 1012f02:	lea    rdx,[rip+0xffffffffffff05cf]        # 0x10034d8
 1012f09:	mov    rcx,rax
 1012f0c:	call   QWORD PTR [rip+0xfffffffffffee1d6]        # 0x10010e8
 1012f12:	mov    QWORD PTR [rip+0x42bf],rax        # 0x10171d8
 1012f19:	test   rax,rax
 1012f1c:	jne    0x1012f49
 1012f1e:	mov    rcx,QWORD PTR [rip+0x4bb3]        # 0x1017ad8
 1012f25:	lea    rax,[rip+0xfffffffffffffbb4]        # 0x1012ae0
 1012f2c:	mov    QWORD PTR [rip+0x42a5],rax        # 0x10171d8
 1012f33:	test   rcx,rcx
 1012f36:	je     0x1012f49
 1012f38:	call   QWORD PTR [rip+0xfffffffffffee14a]        # 0x1001088
 1012f3e:	mov    QWORD PTR [rip+0x4b8f],0x0        # 0x1017ad8
 1012f49:	add    rsp,0x28
 1012f4d:	ret    
 1012f4e:	int3   
 1012f4f:	int3   
 1012f50:	int3   
 1012f51:	int3   
 1012f52:	int3   
 1012f53:	int3   
 1012f54:	int3   
 1012f55:	int3   
 1012f56:	int3   
 1012f57:	int3   
 1012f58:	int3   
 1012f59:	int3   
 1012f5a:	int3   
 1012f5b:	int3   
 1012f5c:	int3   
 1012f5d:	int3   
 1012f5e:	int3   
 1012f5f:	int3   
 1012f60:	mov    r11,rsp
 1012f63:	mov    QWORD PTR [r11+0x8],rbx
 1012f67:	mov    QWORD PTR [r11+0x10],rsi
 1012f6b:	push   rdi
 1012f6c:	sub    rsp,0xb0
 1012f73:	mov    rax,QWORD PTR [rip+0x709e]        # 0x101a018
 1012f7a:	mov    edi,ecx
 1012f7c:	xor    ecx,ecx
 1012f7e:	mov    QWORD PTR [r11-0x60],rcx
 1012f82:	mov    QWORD PTR [r11-0x58],rcx
 1012f86:	mov    QWORD PTR [r11-0x50],rcx
 1012f8a:	mov    QWORD PTR [r11-0x48],rcx
 1012f8e:	mov    QWORD PTR [r11-0x68],0xffffffffffffffff
 1012f96:	mov    QWORD PTR [r11-0x18],rcx
 1012f9a:	lea    r8d,[rcx+0x30]
 1012f9e:	mov    rcx,QWORD PTR [rip+0x4233]        # 0x10171d8
 1012fa5:	lea    rsi,[rip+0x4184]        # 0x1017130
 1012fac:	mov    QWORD PTR [r11-0x40],rsi
 1012fb0:	mov    ebx,DWORD PTR [rax]
 1012fb2:	lea    rdx,[r11-0x38]
 1012fb6:	bts    ebx,0x1e
 1012fba:	call   QWORD PTR [rip+0xfffffffffffee0c0]        # 0x1001080
 1012fc0:	cmp    rax,0x30
 1012fc4:	jne    0x1013029
 1012fc6:	test   DWORD PTR [rsp+0xa0],0x1000
 1012fd1:	je     0x1013029
 1012fd3:	test   BYTE PTR [rsp+0xa4],0xf0
 1012fdb:	je     0x1013029
 1012fdd:	mov    r8,QWORD PTR [rip+0x702c]        # 0x101a010
 1012fe4:	lea    rax,[rip+0x7015]        # 0x101a000
 1012feb:	lea    rcx,[rip+0x4136]        # 0x1017128
 1012ff2:	mov    QWORD PTR [rsp+0x40],rax
 1012ff7:	mov    QWORD PTR [rsp+0x38],rsi
 1012ffc:	lea    rax,[rsp+0x50]
 1013001:	mov    QWORD PTR [rsp+0x30],rax
 1013006:	lea    rax,[rip+0xfffffffffffff883]        # 0x1012890
 101300d:	mov    r9d,ebx
 1013010:	mov    QWORD PTR [rsp+0x28],rax
 1013015:	lea    rax,[rip+0x4a18]        # 0x1017a34
 101301c:	mov    edx,edi
 101301e:	mov    QWORD PTR [rsp+0x20],rax
 1013023:	call   QWORD PTR [rip+0x41af]        # 0x10171d8
 1013029:	lea    r11,[rsp+0xb0]
 1013031:	mov    rbx,QWORD PTR [r11+0x10]
 1013035:	mov    rsi,QWORD PTR [r11+0x18]
 1013039:	mov    rsp,r11
 101303c:	pop    rdi
 101303d:	ret    
 101303e:	int3   
 101303f:	int3   
 1013040:	int3   
 1013041:	int3   
 1013042:	int3   
 1013043:	int3   
 1013044:	int3   
 1013045:	int3   
 1013046:	int3   
 1013047:	int3   
 1013048:	int3   
 1013049:	int3   
 101304a:	int3   
 101304b:	int3   
 101304c:	int3   
 101304d:	int3   
 101304e:	int3   
 101304f:	int3   
 1013050:	mov    QWORD PTR [rsp+0x10],rbx
 1013055:	mov    QWORD PTR [rsp+0x18],rbp
 101305a:	push   rsi
 101305b:	push   rdi
 101305c:	push   r14
 101305e:	sub    rsp,0x270
 1013065:	mov    rax,QWORD PTR [rip+0x40a4]        # 0x1017110
 101306c:	xor    rax,rsp
 101306f:	mov    QWORD PTR [rsp+0x260],rax
 1013077:	movsxd rax,DWORD PTR [rcx+0x20]
 101307b:	mov    rdi,QWORD PTR [rcx+0x18]
 101307f:	mov    rdx,QWORD PTR [rcx+0x10]
 1013083:	mov    r14,rax
 1013086:	mov    DWORD PTR [rsp+0x34],eax
 101308a:	mov    rsi,rcx
 101308d:	mov    rcx,QWORD PTR [rcx]
 1013090:	lea    rax,[rsp+0x34]
 1013095:	lea    r9,[rsp+0x30]
 101309a:	mov    QWORD PTR [rsp+0x28],rax
 101309f:	xor    ebx,ebx
 10130a1:	xor    r8d,r8d
 10130a4:	mov    QWORD PTR [rsp+0x20],rdi
 10130a9:	mov    DWORD PTR [rsp+0x30],ebx
 10130ad:	shr    r14,1
 10130b0:	call   QWORD PTR [rip+0xfffffffffffedf5a]        # 0x1001010
 10130b6:	mov    ebp,eax
 10130b8:	test   eax,eax
 10130ba:	jne    0x1013127
 10130bc:	cmp    DWORD PTR [rsp+0x34],0x2
 10130c1:	jbe    0x101311f
 10130c3:	mov    ecx,DWORD PTR [rsp+0x30]
 10130c7:	dec    ecx
 10130c9:	je     0x1013113
 10130cb:	dec    ecx
 10130cd:	je     0x10130da
 10130cf:	mov    DWORD PTR [rsi+0x24],ebx
 10130d2:	lea    ebp,[rbx+0xd]
 10130d5:	mov    WORD PTR [rdi],bx
 10130d8:	jmp    0x101311f
 10130da:	lea    rdx,[rsp+0x40]
 10130df:	mov    r8d,0x10d
 10130e5:	mov    rcx,rdi
 10130e8:	call   QWORD PTR [rip+0xfffffffffffee02a]        # 0x1001118
 10130ee:	test   eax,eax
 10130f0:	je     0x10130f9
 10130f2:	cmp    eax,0x10e
 10130f7:	jb     0x10130fe
 10130f9:	mov    WORD PTR [rsp+0x40],bx
 10130fe:	lea    r8,[rsp+0x40]
 1013103:	movsxd rdx,r14d
 1013106:	or     r9,0xffffffffffffffff
 101310a:	mov    rcx,rdi
 101310d:	call   QWORD PTR [rip+0xfffffffffffee0a5]        # 0x10011b8
 1013113:	cmp    WORD PTR [rdi],0x3a
 1013117:	mov    ecx,ebx
 1013119:	setne  cl
 101311c:	mov    DWORD PTR [rsi+0x24],ecx
 101311f:	movsxd rcx,r14d
 1013122:	mov    WORD PTR [rdi+rcx*2-0x2],bx
 1013127:	test   ebp,ebp
 1013129:	sete   bl
 101312c:	mov    eax,ebx
 101312e:	mov    rcx,QWORD PTR [rsp+0x260]
 1013136:	xor    rcx,rsp
 1013139:	call   0x1014450
 101313e:	lea    r11,[rsp+0x270]
 1013146:	mov    rbx,QWORD PTR [r11+0x28]
 101314a:	mov    rbp,QWORD PTR [r11+0x30]
 101314e:	mov    rsp,r11
 1013151:	pop    r14
 1013153:	pop    rdi
 1013154:	pop    rsi
 1013155:	ret    
 1013156:	int3   
 1013157:	int3   
 1013158:	int3   
 1013159:	int3   
 101315a:	int3   
 101315b:	int3   
 101315c:	int3   
 101315d:	int3   
 101315e:	int3   
 101315f:	int3   
 1013160:	rex push rdi
 1013162:	sub    rsp,0x270
 1013169:	mov    rax,QWORD PTR [rip+0x3fa0]        # 0x1017110
 1013170:	xor    rax,rsp
 1013173:	mov    QWORD PTR [rsp+0x260],rax
 101317b:	mov    rdi,rcx
 101317e:	call   QWORD PTR [rip+0xfffffffffffedf54]        # 0x10010d8
 1013184:	cmp    eax,0x3
 1013187:	jge    0x1013190
 1013189:	xor    eax,eax
 101318b:	jmp    0x101325c
 1013190:	movzx  eax,WORD PTR [rdi]
 1013193:	mov    QWORD PTR [rsp+0x290],rsi
 101319b:	xor    esi,esi
 101319d:	cmp    ax,0x2e
 10131a1:	je     0x10131e0
 10131a3:	cmp    ax,0x5c
 10131a7:	je     0x1013222
 10131a9:	cmp    ax,0x2f
 10131ad:	je     0x1013222
 10131af:	cmp    WORD PTR [rdi+0x2],0x3a
 10131b4:	je     0x1013222
 10131b6:	lea    rax,[rsp+0x30]
 10131bb:	mov    r9d,0x10e
 10131c1:	xor    r8d,r8d
 10131c4:	mov    QWORD PTR [rsp+0x28],rax
 10131c9:	lea    rax,[rsp+0x40]
 10131ce:	mov    rdx,rdi
 10131d1:	xor    ecx,ecx
 10131d3:	mov    QWORD PTR [rsp+0x20],rax
 10131d8:	call   QWORD PTR [rip+0xfffffffffffede92]        # 0x1001070
 10131de:	jmp    0x10131f8
 10131e0:	lea    r9,[rsp+0x30]
 10131e5:	lea    r8,[rsp+0x40]
 10131ea:	mov    edx,0x10e
 10131ef:	mov    rcx,rdi
 10131f2:	call   QWORD PTR [rip+0xfffffffffffede70]        # 0x1001068
 10131f8:	test   eax,eax
 10131fa:	je     0x1013252
 10131fc:	cmp    eax,0x10e
 1013201:	jae    0x1013252
 1013203:	lea    r8,[rsp+0x40]
 1013208:	or     r9,0xffffffffffffffff
 101320c:	mov    edx,0x10e
 1013211:	mov    rcx,rdi
 1013214:	mov    WORD PTR [rsp+0x25a],si
 101321c:	call   QWORD PTR [rip+0xfffffffffffedf96]        # 0x10011b8
 1013222:	mov    QWORD PTR [rsp+0x288],rbx
 101322a:	movzx  ebx,WORD PTR [rdi+0x6]
 101322e:	mov    rcx,rdi
 1013231:	mov    WORD PTR [rdi+0x6],si
 1013235:	call   QWORD PTR [rip+0xfffffffffffede3d]        # 0x1001078
 101323b:	mov    WORD PTR [rdi+0x6],bx
 101323f:	mov    rbx,QWORD PTR [rsp+0x288]
 1013247:	cmp    eax,0x3
 101324a:	sete   sil
 101324e:	mov    eax,esi
 1013250:	jmp    0x1013254
 1013252:	xor    eax,eax
 1013254:	mov    rsi,QWORD PTR [rsp+0x290]
 101325c:	mov    rcx,QWORD PTR [rsp+0x260]
 1013264:	xor    rcx,rsp
 1013267:	call   0x1014450
 101326c:	add    rsp,0x270
 1013273:	pop    rdi
 1013274:	ret    
 1013275:	int3   
 1013276:	int3   
 1013277:	int3   
 1013278:	int3   
 1013279:	int3   
 101327a:	int3   
 101327b:	int3   
 101327c:	int3   
 101327d:	int3   
 101327e:	int3   
 101327f:	int3   
 1013280:	mov    QWORD PTR [rsp+0x18],rbx
 1013285:	mov    QWORD PTR [rsp+0x20],rsi
 101328a:	push   rbp
 101328b:	push   rdi
 101328c:	push   r14
 101328e:	lea    rbp,[rsp-0x1a0]
 1013296:	sub    rsp,0x2a0
 101329d:	mov    rax,QWORD PTR [rip+0x3e6c]        # 0x1017110
 10132a4:	xor    rax,rsp
 10132a7:	mov    QWORD PTR [rbp+0x190],rax
 10132ae:	mov    rdi,rdx
 10132b1:	lea    rax,[rsp+0x38]
 10132b6:	lea    rdx,[rip+0xffffffffffff0233]        # 0x10034f0
 10132bd:	mov    rbx,rcx
 10132c0:	xor    esi,esi
 10132c2:	mov    QWORD PTR [rsp+0x50],rcx
 10132c7:	lea    r14,[rip+0xffffffffffff3cb2]        # 0x1006f80
 10132ce:	mov    r9d,0x20019
 10132d4:	xor    r8d,r8d
 10132d7:	mov    rcx,0xffffffff80000002
 10132de:	mov    QWORD PTR [rsp+0x40],rdx
 10132e3:	mov    QWORD PTR [rsp+0x38],rsi
 10132e8:	mov    QWORD PTR [rsp+0x48],r14
 10132ed:	mov    QWORD PTR [rsp+0x58],0x21a
 10132f6:	mov    DWORD PTR [rsp+0x60],esi
 10132fa:	mov    QWORD PTR [rsp+0x20],rax
 10132ff:	call   QWORD PTR [rip+0xfffffffffffedcfb]        # 0x1001000
 1013305:	test   eax,eax
 1013307:	je     0x101332f
 1013309:	or     r9,0xffffffffffffffff
 101330d:	mov    r8,r14
 1013310:	mov    edx,0x10d
 1013315:	mov    rcx,rbx
 1013318:	call   QWORD PTR [rip+0xfffffffffffede9a]        # 0x10011b8
 101331e:	mov    eax,esi
 1013320:	mov    ecx,esi
 1013322:	mov    DWORD PTR [rsp+0x5c],eax
 1013326:	mov    DWORD PTR [rsp+0x60],ecx
 101332a:	jmp    0x1013483
 101332f:	mov    rcx,QWORD PTR [rsp+0x38]
 1013334:	lea    rax,[rsp+0x68]
 1013339:	lea    r9,[rsp+0x34]
 101333e:	mov    QWORD PTR [rsp+0x28],rax
 1013343:	lea    rax,[rsp+0x30]
 1013348:	lea    rdx,[rip+0xffffffffffff01f1]        # 0x1003540
 101334f:	xor    r8d,r8d
 1013352:	mov    DWORD PTR [rsp+0x30],esi
 1013356:	mov    DWORD PTR [rsp+0x68],0x4
 101335e:	mov    QWORD PTR [rsp+0x20],rax
 1013363:	mov    DWORD PTR [rsp+0x34],esi
 1013367:	call   QWORD PTR [rip+0xfffffffffffedca3]        # 0x1001010
 101336d:	test   eax,eax
 101336f:	jne    0x1013387
 1013371:	cmp    DWORD PTR [rsp+0x34],0x4
 1013376:	jne    0x1013387
 1013378:	mov    eax,esi
 101337a:	cmp    DWORD PTR [rsp+0x30],eax
 101337e:	setne  al
 1013381:	mov    DWORD PTR [rsp+0x60],eax
 1013385:	jmp    0x101338b
 1013387:	mov    DWORD PTR [rsp+0x60],esi
 101338b:	lea    rdx,[rsp+0x70]
 1013390:	mov    r8d,0x10d
 1013396:	xor    ecx,ecx
 1013398:	call   QWORD PTR [rip+0xfffffffffffedd32]        # 0x10010d0
 101339e:	dec    eax
 10133a0:	cmp    eax,0x10b
 10133a5:	ja     0x101346b
 10133ab:	lea    rax,[rsp+0x70]
 10133b0:	lea    rcx,[rsp+0x38]
 10133b5:	mov    WORD PTR [rbp+0x18a],si
 10133bc:	mov    QWORD PTR [rsp+0x48],rax
 10133c1:	call   0x1013050
 10133c6:	test   eax,eax
 10133c8:	jne    0x101346b
 10133ce:	lea    rcx,[rsp+0x70]
 10133d3:	call   QWORD PTR [rip+0xfffffffffffedcff]        # 0x10010d8
 10133d9:	movsxd rcx,eax
 10133dc:	lea    rax,[rsp+rcx*2+0x6e]
 10133e1:	lea    rcx,[rsp+0x70]
 10133e6:	cmp    rax,rcx
 10133e9:	jb     0x1013433
 10133eb:	nop    DWORD PTR [rax+rax*1+0x0]
 10133f0:	movzx  ecx,WORD PTR [rax]
 10133f3:	cmp    cx,0x5c
 10133f7:	je     0x101340f
 10133f9:	cmp    cx,0x2f
 10133fd:	je     0x101340f
 10133ff:	lea    rcx,[rsp+0x70]
 1013404:	sub    rax,0x2
 1013408:	cmp    rax,rcx
 101340b:	jae    0x10133f0
 101340d:	jmp    0x1013433
 101340f:	lea    rcx,[rbp+0x18a]
 1013416:	add    rax,0x2
 101341a:	cmp    rax,rcx
 101341d:	jae    0x1013433
 101341f:	lea    rcx,[rsp+0x38]
 1013424:	mov    DWORD PTR [rax],0x2a
 101342a:	call   0x1013050
 101342f:	test   eax,eax
 1013431:	jne    0x101346b
 1013433:	lea    rax,[rip+0xffffffffffff0116]        # 0x1003550
 101343a:	lea    rcx,[rsp+0x38]
 101343f:	mov    QWORD PTR [rsp+0x48],rax
 1013444:	call   0x1013050
 1013449:	test   eax,eax
 101344b:	jne    0x101346b
 101344d:	or     r9,0xffffffffffffffff
 1013451:	mov    r8,r14
 1013454:	mov    edx,0x10d
 1013459:	mov    rcx,rbx
 101345c:	mov    QWORD PTR [rsp+0x48],r14
 1013461:	mov    DWORD PTR [rsp+0x5c],esi
 1013465:	call   QWORD PTR [rip+0xfffffffffffedd4d]        # 0x10011b8
 101346b:	mov    rcx,QWORD PTR [rsp+0x38]
 1013470:	call   QWORD PTR [rip+0xfffffffffffedb92]        # 0x1001008
 1013476:	mov    ecx,DWORD PTR [rsp+0x60]
 101347a:	mov    eax,DWORD PTR [rsp+0x5c]
 101347e:	mov    QWORD PTR [rsp+0x38],rsi
 1013483:	mov    WORD PTR [rbx+0x21a],si
 101348a:	test   eax,eax
 101348c:	je     0x101349e
 101348e:	mov    rcx,rbx
 1013491:	call   0x1013160
 1013496:	mov    ecx,DWORD PTR [rsp+0x60]
 101349a:	mov    DWORD PTR [rsp+0x5c],eax
 101349e:	test   ecx,ecx
 10134a0:	je     0x1013503
 10134a2:	lea    rcx,[rip+0xffffffffffff00b7]        # 0x1003560
 10134a9:	call   QWORD PTR [rip+0xfffffffffffedbf9]        # 0x10010a8
 10134af:	mov    rcx,QWORD PTR [rsp+0x40]
 10134b4:	call   QWORD PTR [rip+0xfffffffffffedbee]        # 0x10010a8
 10134ba:	lea    rcx,[rip+0xffffffffffff00b7]        # 0x1003578
 10134c1:	call   QWORD PTR [rip+0xfffffffffffedbe1]        # 0x10010a8
 10134c7:	mov    rcx,QWORD PTR [rsp+0x48]
 10134cc:	call   QWORD PTR [rip+0xfffffffffffedbd6]        # 0x10010a8
 10134d2:	lea    rcx,[rip+0xffffffffffff00a7]        # 0x1003580
 10134d9:	call   QWORD PTR [rip+0xfffffffffffedbc9]        # 0x10010a8
 10134df:	mov    rcx,rbx
 10134e2:	call   QWORD PTR [rip+0xfffffffffffedbc0]        # 0x10010a8
 10134e8:	lea    rcx,[rip+0xffffffffffff00a5]        # 0x1003594
 10134ef:	call   QWORD PTR [rip+0xfffffffffffedbb3]        # 0x10010a8
 10134f5:	mov    r11d,DWORD PTR [rsp+0x60]
 10134fa:	mov    eax,DWORD PTR [rsp+0x5c]
 10134fe:	mov    DWORD PTR [rdi],r11d
 1013501:	jmp    0x1013505
 1013503:	mov    DWORD PTR [rdi],ecx
 1013505:	mov    DWORD PTR [rip+0x45c9],eax        # 0x1017ad4
 101350b:	mov    rcx,QWORD PTR [rbp+0x190]
 1013512:	xor    rcx,rsp
 1013515:	call   0x1014450
 101351a:	lea    r11,[rsp+0x2a0]
 1013522:	mov    rbx,QWORD PTR [r11+0x30]
 1013526:	mov    rsi,QWORD PTR [r11+0x38]
 101352a:	mov    rsp,r11
 101352d:	pop    r14
 101352f:	pop    rdi
 1013530:	pop    rbp
 1013531:	ret    
 1013532:	int3   
 1013533:	int3   
 1013534:	int3   
 1013535:	int3   
 1013536:	int3   
 1013537:	int3   
 1013538:	int3   
 1013539:	int3   
 101353a:	int3   
 101353b:	int3   
 101353c:	int3   
 101353d:	int3   
 101353e:	int3   
 101353f:	int3   
 1013540:	sub    rsp,0x268
 1013547:	mov    rax,QWORD PTR [rip+0x3bc2]        # 0x1017110
 101354e:	xor    rax,rsp
 1013551:	mov    QWORD PTR [rsp+0x250],rax
 1013559:	mov    eax,DWORD PTR [rip+0x47b1]        # 0x1017d10
 101355f:	mov    DWORD PTR [rsp+0x20],0x0
 1013567:	test   eax,eax
 1013569:	jne    0x1013614
 101356f:	lea    rdx,[rsp+0x20]
 1013574:	lea    rcx,[rsp+0x30]
 1013579:	call   0x1013280
 101357e:	mov    eax,DWORD PTR [rip+0x44b0]        # 0x1017a34
 1013584:	mov    ecx,0xfff
 1013589:	test   eax,eax
 101358b:	lea    r11,[rsp+0x30]
 1013590:	cmove  eax,ecx
 1013593:	mov    QWORD PTR [rip+0x3c4e],r11        # 0x10171e8
 101359a:	mov    DWORD PTR [rip+0x4494],eax        # 0x1017a34
 10135a0:	mov    eax,DWORD PTR [rip+0x476a]        # 0x1017d10
 10135a6:	test   eax,eax
 10135a8:	jne    0x10135c8
 10135aa:	mov    ecx,0x23fa
 10135af:	call   0x1012f60
 10135b4:	cmp    QWORD PTR [rip+0x3b6c],0xffffffffffffffff        # 0x1017128
 10135bc:	jne    0x10135c8
 10135be:	mov    ecx,0x1
 10135c3:	call   0x1012d60
 10135c8:	lea    rax,[rip+0xfffffffffffff4e1]        # 0x1012ab0
 10135cf:	cmp    QWORD PTR [rip+0x3b6a],rax        # 0x1017140
 10135d6:	jne    0x1013606
 10135d8:	cmp    DWORD PTR [rsp+0x20],0x0
 10135dd:	je     0x1013606
 10135df:	lea    rcx,[rip+0xfffffffffffeffba]        # 0x10035a0
 10135e6:	call   QWORD PTR [rip+0xfffffffffffedabc]        # 0x10010a8
 10135ec:	mov    rcx,QWORD PTR [rip+0x3bf5]        # 0x10171e8
 10135f3:	call   QWORD PTR [rip+0xfffffffffffedaaf]        # 0x10010a8
 10135f9:	lea    rcx,[rip+0xfffffffffffeffb0]        # 0x10035b0
 1013600:	call   QWORD PTR [rip+0xfffffffffffedaa2]        # 0x10010a8
 1013606:	lea    rax,[rip+0xfffffffffffeffff]        # 0x100360c
 101360d:	mov    QWORD PTR [rip+0x3bd4],rax        # 0x10171e8
 1013614:	xor    eax,eax
 1013616:	mov    rcx,QWORD PTR [rsp+0x250]
 101361e:	xor    rcx,rsp
 1013621:	call   0x1014450
 1013626:	add    rsp,0x268
 101362d:	ret    
 101362e:	int3   
 101362f:	int3   
 1013630:	int3   
 1013631:	int3   
 1013632:	int3   
 1013633:	int3   
 1013634:	int3   
 1013635:	int3   
 1013636:	int3   
 1013637:	int3   
 1013638:	int3   
 1013639:	int3   
 101363a:	int3   
 101363b:	int3   
 101363c:	int3   
 101363d:	int3   
 101363e:	int3   
 101363f:	int3   
 1013640:	mov    QWORD PTR [rsp+0x8],rbx
 1013645:	push   rdi
 1013646:	sub    rsp,0x20
 101364a:	mov    rdi,rcx
 101364d:	mov    rbx,rdx
 1013650:	lea    rcx,[rip+0x4a69]        # 0x10180c0
 1013657:	xor    edx,edx
 1013659:	mov    r8d,0x400
 101365f:	call   0x1014c00
 1013664:	mov    DWORD PTR [rbx],0x0
 101366a:	cmp    BYTE PTR [rdi],0x0
 101366d:	lea    rax,[rip+0x4a4c]        # 0x10180c0
 1013674:	je     0x1013735
 101367a:	mov    r8d,DWORD PTR [rip+0x43ab]        # 0x1017a2c
 1013681:	cmp    DWORD PTR [rbx],0x400
 1013687:	jae    0x10136ed
 1013689:	movzx  ecx,BYTE PTR [rdi]
 101368c:	cmp    cl,0x5c
 101368f:	jne    0x101370c
 1013691:	movzx  edx,BYTE PTR [rdi+0x1]
 1013695:	inc    rdi
 1013698:	movzx  ecx,dl
 101369b:	test   dl,dl
 101369d:	je     0x10136ff
 101369f:	cmp    dl,0x30
 10136a2:	je     0x10136fa
 10136a4:	cmp    dl,0x6e
 10136a7:	je     0x10136c1
 10136a9:	cmp    dl,0x72
 10136ac:	je     0x10136bc
 10136ae:	cmp    dl,0x74
 10136b1:	je     0x10136b7
 10136b3:	mov    BYTE PTR [rax],dl
 10136b5:	jmp    0x1013702
 10136b7:	mov    BYTE PTR [rax],0x9
 10136ba:	jmp    0x1013702
 10136bc:	mov    BYTE PTR [rax],0xd
 10136bf:	jmp    0x1013702
 10136c1:	mov    BYTE PTR [rax],0xd
 10136c4:	inc    rax
 10136c7:	cmp    r8d,0x4
 10136cb:	jne    0x10136dd
 10136cd:	mov    BYTE PTR [rax],0x0
 10136d0:	inc    DWORD PTR [rbx]
 10136d2:	inc    rax
 10136d5:	cmp    DWORD PTR [rbx],0x400
 10136db:	jae    0x10136ed
 10136dd:	mov    BYTE PTR [rax],0xa
 10136e0:	inc    DWORD PTR [rbx]
 10136e2:	inc    rax
 10136e5:	cmp    DWORD PTR [rbx],0x400
 10136eb:	jb     0x1013705
 10136ed:	xor    eax,eax
 10136ef:	mov    rbx,QWORD PTR [rsp+0x30]
 10136f4:	add    rsp,0x20
 10136f8:	pop    rdi
 10136f9:	ret    
 10136fa:	mov    BYTE PTR [rax],0x0
 10136fd:	jmp    0x1013702
 10136ff:	mov    BYTE PTR [rax],0x5c
 1013702:	inc    rax
 1013705:	cmp    BYTE PTR [rdi],0x0
 1013708:	je     0x1013714
 101370a:	jmp    0x1013711
 101370c:	mov    BYTE PTR [rax],cl
 101370e:	inc    rax
 1013711:	inc    rdi
 1013714:	cmp    r8d,0x4
 1013718:	jne    0x101372a
 101371a:	mov    BYTE PTR [rax],0x0
 101371d:	inc    DWORD PTR [rbx]
 101371f:	inc    rax
 1013722:	cmp    DWORD PTR [rbx],0x400
 1013728:	jae    0x10136ed
 101372a:	inc    DWORD PTR [rbx]
 101372c:	cmp    BYTE PTR [rdi],0x0
 101372f:	jne    0x1013681
 1013735:	lea    rax,[rip+0x4984]        # 0x10180c0
 101373c:	mov    rbx,QWORD PTR [rsp+0x30]
 1013741:	add    rsp,0x20
 1013745:	pop    rdi
 1013746:	ret    
 1013747:	int3   
 1013748:	int3   
 1013749:	int3   
 101374a:	int3   
 101374b:	int3   
 101374c:	int3   
 101374d:	int3   
 101374e:	int3   
 101374f:	int3   
 1013750:	rex push rbx
 1013752:	sub    rsp,0x130
 1013759:	mov    rax,QWORD PTR [rip+0x39b0]        # 0x1017110
 1013760:	xor    rax,rsp
 1013763:	mov    QWORD PTR [rsp+0x120],rax
 101376b:	call   QWORD PTR [rip+0xfffffffffffedb77]        # 0x10012e8
 1013771:	mov    rcx,QWORD PTR [rip+0x42a8]        # 0x1017a20
 1013778:	lea    r8,[rsp+0x20]
 101377d:	mov    r9d,0x100
 1013783:	mov    edx,0x37
 1013788:	mov    rbx,rax
 101378b:	call   QWORD PTR [rip+0xfffffffffffedc37]        # 0x10013c8
 1013791:	lea    rdx,[rsp+0x20]
 1013796:	lea    rcx,[rsp+0x20]
 101379b:	call   QWORD PTR [rip+0xfffffffffffedc1f]        # 0x10013c0
 10137a1:	lea    rdx,[rbx+0x30]
 10137a5:	lea    rcx,[rsp+0x20]
 10137aa:	call   QWORD PTR [rip+0xfffffffffffedb40]        # 0x10012f0
 10137b0:	call   QWORD PTR [rip+0xfffffffffffedb32]        # 0x10012e8
 10137b6:	mov    rcx,QWORD PTR [rip+0x4263]        # 0x1017a20
 10137bd:	lea    r8,[rsp+0x20]
 10137c2:	mov    r9d,0x100
 10137c8:	mov    edx,0x38
 10137cd:	mov    rbx,rax
 10137d0:	call   QWORD PTR [rip+0xfffffffffffedbf2]        # 0x10013c8
 10137d6:	lea    rdx,[rsp+0x20]
 10137db:	lea    rcx,[rsp+0x20]
 10137e0:	call   QWORD PTR [rip+0xfffffffffffedbda]        # 0x10013c0
 10137e6:	lea    rdx,[rbx+0x30]
 10137ea:	lea    rcx,[rsp+0x20]
 10137ef:	call   QWORD PTR [rip+0xfffffffffffedafb]        # 0x10012f0
 10137f5:	call   QWORD PTR [rip+0xfffffffffffedaed]        # 0x10012e8
 10137fb:	lea    rcx,[rax+0x30]
 10137ff:	call   0x1011930
 1013804:	lea    rcx,[rip+0xffffffffffff379d]        # 0x1006fa8
 101380b:	call   QWORD PTR [rip+0xfffffffffffedaa7]        # 0x10012b8
 1013811:	mov    rcx,QWORD PTR [rsp+0x120]
 1013819:	xor    rcx,rsp
 101381c:	call   0x1014450
 1013821:	add    rsp,0x130
 1013828:	pop    rbx
 1013829:	ret    
 101382a:	int3   
 101382b:	int3   
 101382c:	int3   
 101382d:	int3   
 101382e:	int3   
 101382f:	int3   
 1013830:	mov    QWORD PTR [rsp+0x8],rbx
 1013835:	mov    QWORD PTR [rsp+0x10],rdi
 101383a:	mov    eax,0x80
 101383f:	mov    rdi,rdx
 1013842:	movzx  r11d,cx
 1013846:	lea    rbx,[rip+0xfffffffffffec7b3]        # 0x1000000
 101384d:	cmp    cx,ax
 1013850:	jae    0x1013873
 1013852:	movzx  eax,cx
 1013855:	movzx  ecx,BYTE PTR [rax+rbx*1+0x3670]
 101385d:	test   QWORD PTR [rbx+rcx*8+0x4260],rdx
 1013865:	setne  al
 1013868:	mov    rbx,QWORD PTR [rsp+0x8]
 101386d:	mov    rdi,QWORD PTR [rsp+0x10]
 1013872:	ret    
 1013873:	mov    eax,0x3f00
 1013878:	cmp    r11w,ax
 101387c:	jae    0x10138ac
 101387e:	movzx  eax,r11w
 1013882:	movzx  r8d,r11w
 1013886:	shr    rax,0x8
 101388a:	movzx  r9d,WORD PTR [rbx+rax*2+0x5a50]
 1013893:	mov    eax,r8d
 1013896:	shr    eax,0x8
 1013899:	movzx  r10d,WORD PTR [rbx+rax*2+0x5a52]
 10138a2:	inc    r10d
 10138a5:	cmp    r9d,r10d
 10138a8:	jge    0x10138f1
 10138aa:	jmp    0x10138b8
 10138ac:	mov    r9d,0x4db
 10138b2:	mov    r10d,0x582
 10138b8:	movzx  r8d,r11w
 10138bc:	nop    DWORD PTR [rax+0x0]
 10138c0:	lea    eax,[r10+r9*1]
 10138c4:	cdq    
 10138c5:	sub    eax,edx
 10138c7:	sar    eax,1
 10138c9:	movsxd rcx,eax
 10138cc:	movzx  edx,WORD PTR [rbx+rcx*4+0x4440]
 10138d4:	sub    edx,r8d
 10138d7:	jns    0x10138df
 10138d9:	lea    r9d,[rax+0x1]
 10138dd:	jmp    0x10138e6
 10138df:	test   edx,edx
 10138e1:	jle    0x10138ed
 10138e3:	mov    r10d,eax
 10138e6:	cmp    r9d,r10d
 10138e9:	jl     0x10138c0
 10138eb:	jmp    0x10138f1
 10138ed:	lea    r9d,[rax+0x1]
 10138f1:	movsxd rax,r9d
 10138f4:	movzx  eax,BYTE PTR [rbx+rax*4+0x443e]
 10138fc:	mov    rdx,QWORD PTR [rbx+rax*8+0x4260]
 1013904:	mov    rax,rdx
 1013907:	and    rax,rdi
 101390a:	test   rax,0xffffffffbfffeeff
 1013910:	jne    0x1013970
 1013912:	test   rax,rax
 1013915:	jne    0x1013922
 1013917:	mov    rbx,QWORD PTR [rsp+0x8]
 101391c:	mov    rdi,QWORD PTR [rsp+0x10]
 1013921:	ret    
 1013922:	mov    rcx,rdi
 1013925:	mov    rax,rdx
 1013928:	and    ecx,0x1100
 101392e:	and    eax,0x1100
 1013933:	cmp    rcx,rax
 1013936:	je     0x1013970
 1013938:	cmp    rcx,0x1100
 101393f:	je     0x1013970
 1013941:	bt     rdx,0x1e
 1013946:	jae    0x1013967
 1013948:	test   rdi,0x100
 101394f:	jne    0x1013954
 1013951:	not    r8d
 1013954:	and    r8d,0x1
 1013958:	movzx  eax,r8b
 101395c:	mov    rbx,QWORD PTR [rsp+0x8]
 1013961:	mov    rdi,QWORD PTR [rsp+0x10]
 1013966:	ret    
 1013967:	test   rdi,0x1000
 101396e:	jmp    0x101394f
 1013970:	mov    rbx,QWORD PTR [rsp+0x8]
 1013975:	mov    rdi,QWORD PTR [rsp+0x10]
 101397a:	mov    al,0x1
 101397c:	ret    
 101397d:	int3   
 101397e:	int3   
 101397f:	int3   
 1013980:	int3   
 1013981:	int3   
 1013982:	int3   
 1013983:	int3   
 1013984:	int3   
 1013985:	int3   
 1013986:	int3   
 1013987:	int3   
 1013988:	int3   
 1013989:	int3   
 101398a:	int3   
 101398b:	int3   
 101398c:	int3   
 101398d:	int3   
 101398e:	int3   
 101398f:	int3   
 1013990:	mov    QWORD PTR [rsp+0x18],rbx
 1013995:	mov    QWORD PTR [rsp+0x20],rbp
 101399a:	push   r14
 101399c:	sub    rsp,0x20
 10139a0:	mov    r14,r8
 10139a3:	mov    rbp,rdx
 10139a6:	mov    rbx,rcx
 10139a9:	test   rdx,rdx
 10139ac:	jne    0x10139c1
 10139ae:	xor    eax,eax
 10139b0:	mov    rbx,QWORD PTR [rsp+0x40]
 10139b5:	mov    rbp,QWORD PTR [rsp+0x48]
 10139ba:	add    rsp,0x20
 10139be:	pop    r14
 10139c0:	ret    
 10139c1:	movzx  eax,WORD PTR [rcx]
 10139c4:	cmp    ax,0x22
 10139c8:	je     0x1013a59
 10139ce:	cmp    ax,0x5b
 10139d2:	je     0x1013a59
 10139d8:	movzx  ecx,ax
 10139db:	call   0x1013bf0
 10139e0:	cmp    eax,0x1
 10139e3:	jne    0x10139ae
 10139e5:	mov    QWORD PTR [rsp+0x30],rsi
 10139ea:	mov    esi,0x81
 10139ef:	add    rbx,0x2
 10139f3:	cmp    rbp,rsi
 10139f6:	mov    QWORD PTR [rsp+0x38],rdi
 10139fb:	mov    edi,eax
 10139fd:	cmovb  rsi,rbp
 1013a01:	cmp    rdi,rsi
 1013a04:	jae    0x1013a4f
 1013a06:	movzx  ecx,WORD PTR [rbx]
 1013a09:	call   0x1013bf0
 1013a0e:	cmp    eax,0x5
 1013a11:	je     0x1013a29
 1013a13:	cmp    eax,0x3
 1013a16:	je     0x1013a29
 1013a18:	cmp    eax,0x4
 1013a1b:	je     0x1013a29
 1013a1d:	inc    rdi
 1013a20:	add    rbx,0x2
 1013a24:	cmp    rdi,rsi
 1013a27:	jb     0x1013a06
 1013a29:	cmp    rdi,0x80
 1013a30:	jbe    0x1013a4f
 1013a32:	xor    eax,eax
 1013a34:	mov    rsi,QWORD PTR [rsp+0x30]
 1013a39:	mov    rdi,QWORD PTR [rsp+0x38]
 1013a3e:	mov    rbx,QWORD PTR [rsp+0x40]
 1013a43:	mov    rbp,QWORD PTR [rsp+0x48]
 1013a48:	add    rsp,0x20
 1013a4c:	pop    r14
 1013a4e:	ret    
 1013a4f:	mov    DWORD PTR [r14],edi
 1013a52:	mov    eax,0x1
 1013a57:	jmp    0x1013a34
 1013a59:	mov    ecx,0x22
 1013a5e:	mov    r8d,0x5d
 1013a64:	cmp    ax,cx
 1013a67:	lea    eax,[rcx-0x21]
 1013a6a:	cmove  r8w,cx
 1013a6f:	mov    ecx,0x103
 1013a74:	xor    edx,edx
 1013a76:	add    rbx,0x2
 1013a7a:	cmp    rbp,rcx
 1013a7d:	cmovb  rcx,rbp
 1013a81:	cmp    rax,rcx
 1013a84:	jae    0x10139ae
 1013a8a:	nop    WORD PTR [rax+rax*1+0x0]
 1013a90:	cmp    WORD PTR [rbx],r8w
 1013a94:	jne    0x1013aa8
 1013a96:	inc    rax
 1013a99:	add    rbx,0x2
 1013a9d:	cmp    rax,rcx
 1013aa0:	je     0x1013aca
 1013aa2:	cmp    WORD PTR [rbx],r8w
 1013aa6:	jne    0x1013aca
 1013aa8:	inc    rax
 1013aab:	inc    rdx
 1013aae:	add    rbx,0x2
 1013ab2:	cmp    rax,rcx
 1013ab5:	jb     0x1013a90
 1013ab7:	xor    eax,eax
 1013ab9:	mov    rbx,QWORD PTR [rsp+0x40]
 1013abe:	mov    rbp,QWORD PTR [rsp+0x48]
 1013ac3:	add    rsp,0x20
 1013ac7:	pop    r14
 1013ac9:	ret    
 1013aca:	cmp    rdx,0x80
 1013ad1:	ja     0x10139ae
 1013ad7:	mov    rbx,QWORD PTR [rsp+0x40]
 1013adc:	mov    rbp,QWORD PTR [rsp+0x48]
 1013ae1:	mov    DWORD PTR [r14],eax
 1013ae4:	mov    eax,0x1
 1013ae9:	add    rsp,0x20
 1013aed:	pop    r14
 1013aef:	ret    
 1013af0:	int3   
 1013af1:	int3   
 1013af2:	int3   
 1013af3:	int3   
 1013af4:	int3   
 1013af5:	int3   
 1013af6:	int3   
 1013af7:	int3   
 1013af8:	int3   
 1013af9:	int3   
 1013afa:	int3   
 1013afb:	int3   
 1013afc:	int3   
 1013afd:	int3   
 1013afe:	int3   
 1013aff:	int3   
 1013b00:	mov    QWORD PTR [rsp+0x8],rbx
 1013b05:	push   rdi
 1013b06:	sub    rsp,0x20
 1013b0a:	xor    edi,edi
 1013b0c:	mov    rbx,rdx
 1013b0f:	mov    edx,edi
 1013b11:	mov    DWORD PTR [rsp+0x38],edx
 1013b15:	test   rbx,rbx
 1013b18:	je     0x1013bd0
 1013b1e:	movzx  eax,WORD PTR [rcx]
 1013b21:	cmp    ax,0x22
 1013b25:	je     0x1013b62
 1013b27:	cmp    ax,0x5b
 1013b2b:	je     0x1013b62
 1013b2d:	cmp    rbx,0x80
 1013b34:	ja     0x1013b55
 1013b36:	lea    r8,[rsp+0x38]
 1013b3b:	mov    rdx,rbx
 1013b3e:	call   0x1013990
 1013b43:	test   eax,eax
 1013b45:	je     0x1013b55
 1013b47:	mov    eax,DWORD PTR [rsp+0x38]
 1013b4b:	cmp    rax,rbx
 1013b4e:	jne    0x1013b55
 1013b50:	mov    edi,0x1
 1013b55:	mov    eax,edi
 1013b57:	mov    rbx,QWORD PTR [rsp+0x30]
 1013b5c:	add    rsp,0x20
 1013b60:	pop    rdi
 1013b61:	ret    
 1013b62:	cmp    ax,0x5b
 1013b66:	lea    rax,[rbx-0x2]
 1013b6a:	mov    r8d,0x22
 1013b70:	mov    r9d,0x5d
 1013b76:	cmove  r8w,r9w
 1013b7b:	cmp    rax,0x100
 1013b81:	ja     0x1013bd0
 1013b83:	cmp    WORD PTR [rcx+rbx*2-0x2],r8w
 1013b89:	jne    0x1013bd0
 1013b8b:	add    rcx,0x2
 1013b8f:	sub    rbx,0x2
 1013b93:	je     0x1013bb9
 1013b95:	cmp    WORD PTR [rcx],r8w
 1013b99:	jne    0x1013bae
 1013b9b:	cmp    rbx,0x1
 1013b9f:	je     0x1013bd0
 1013ba1:	add    rcx,0x2
 1013ba5:	cmp    WORD PTR [rcx],r8w
 1013ba9:	jne    0x1013bd0
 1013bab:	dec    rbx
 1013bae:	inc    edx
 1013bb0:	add    rcx,0x2
 1013bb4:	dec    rbx
 1013bb7:	jne    0x1013b95
 1013bb9:	cmp    edx,0x80
 1013bbf:	setbe  dil
 1013bc3:	mov    eax,edi
 1013bc5:	mov    rbx,QWORD PTR [rsp+0x30]
 1013bca:	add    rsp,0x20
 1013bce:	pop    rdi
 1013bcf:	ret    
 1013bd0:	xor    eax,eax
 1013bd2:	mov    rbx,QWORD PTR [rsp+0x30]
 1013bd7:	add    rsp,0x20
 1013bdb:	pop    rdi
 1013bdc:	ret    
 1013bdd:	int3   
 1013bde:	int3   
 1013bdf:	int3   
 1013be0:	int3   
 1013be1:	int3   
 1013be2:	int3   
 1013be3:	int3   
 1013be4:	int3   
 1013be5:	int3   
 1013be6:	int3   
 1013be7:	int3   
 1013be8:	int3   
 1013be9:	int3   
 1013bea:	int3   
 1013beb:	int3   
 1013bec:	int3   
 1013bed:	int3   
 1013bee:	int3   
 1013bef:	int3   
 1013bf0:	rex push rbx
 1013bf2:	sub    rsp,0x20
 1013bf6:	mov    ebx,ecx
 1013bf8:	cmp    ecx,0x80
 1013bfe:	jae    0x1013c1f
 1013c00:	cmp    ebx,0x5c
 1013c03:	jne    0x1013c0e
 1013c05:	lea    eax,[rbx-0x55]
 1013c08:	add    rsp,0x20
 1013c0c:	pop    rbx
 1013c0d:	ret    
 1013c0e:	lea    rcx,[rip+0x35db]        # 0x10171f0
 1013c15:	movzx  eax,BYTE PTR [rcx+rbx*4]
 1013c19:	add    rsp,0x20
 1013c1d:	pop    rbx
 1013c1e:	ret    
 1013c1f:	cmp    ebx,0xffffffff
 1013c22:	jne    0x1013c2f
 1013c24:	mov    eax,0x9
 1013c29:	add    rsp,0x20
 1013c2d:	pop    rbx
 1013c2e:	ret    
 1013c2f:	movabs rdx,0x2000000000
 1013c39:	movzx  ecx,bx
 1013c3c:	call   0x1013830
 1013c41:	test   al,al
 1013c43:	je     0x1013c50
 1013c45:	mov    eax,0x1
 1013c4a:	add    rsp,0x20
 1013c4e:	pop    rbx
 1013c4f:	ret    
 1013c50:	movabs rdx,0x4000000000
 1013c5a:	movzx  ecx,bx
 1013c5d:	call   0x1013830
 1013c62:	test   al,al
 1013c64:	je     0x1013c71
 1013c66:	mov    eax,0x8
 1013c6b:	add    rsp,0x20
 1013c6f:	pop    rbx
 1013c70:	ret    
 1013c71:	movabs rdx,0x8000000000
 1013c7b:	movzx  ecx,bx
 1013c7e:	call   0x1013830
 1013c83:	mov    ecx,0x5
 1013c88:	mov    edx,0x7
 1013c8d:	test   al,al
 1013c8f:	cmovne ecx,edx
 1013c92:	mov    eax,ecx
 1013c94:	add    rsp,0x20
 1013c98:	pop    rbx
 1013c99:	ret    
 1013c9a:	int3   
 1013c9b:	int3   
 1013c9c:	int3   
 1013c9d:	int3   
 1013c9e:	int3   
 1013c9f:	int3   
 1013ca0:	rex push rbx
 1013ca2:	push   rbp
 1013ca3:	push   rsi
 1013ca4:	push   rdi
 1013ca5:	push   r12
 1013ca7:	push   r14
 1013ca9:	sub    rsp,0x58
 1013cad:	mov    rax,QWORD PTR [rip+0x345c]        # 0x1017110
 1013cb4:	xor    rax,rsp
 1013cb7:	mov    QWORD PTR [rsp+0x48],rax
 1013cbc:	mov    r14,QWORD PTR [rsp+0xb0]
 1013cc4:	mov    rdi,r9
 1013cc7:	mov    rsi,r8
 1013cca:	mov    rbx,rdx
 1013ccd:	mov    r12d,ecx
 1013cd0:	mov    rbp,rdx
 1013cd3:	cmp    r8,0xffffffffffffffff
 1013cd7:	je     0x1013db8
 1013cdd:	test   r8,r8
 1013ce0:	je     0x1013dad
 1013ce6:	test   r14,r14
 1013ce9:	je     0x1013d83
 1013cef:	cmp    rsi,r14
 1013cf2:	mov    r8,r14
 1013cf5:	cmovl  r8,rsi
 1013cf9:	sar    r8,0x2
 1013cfd:	test   r8,r8
 1013d00:	je     0x1013d4b
 1013d02:	mov    edx,DWORD PTR [rbx]
 1013d04:	test   edx,0x80808080
 1013d0a:	jne    0x1013e07
 1013d10:	mov    ecx,edx
 1013d12:	mov    eax,edx
 1013d14:	shr    edx,0x10
 1013d17:	and    eax,0x7f
 1013d1a:	and    ecx,0x7f00
 1013d20:	add    rdi,0x8
 1013d24:	shl    ecx,0x8
 1013d27:	add    rbx,0x4
 1013d2b:	sub    rsi,0x4
 1013d2f:	or     ecx,eax
 1013d31:	mov    eax,edx
 1013d33:	and    edx,0x7f
 1013d36:	and    eax,0x7f00
 1013d3b:	mov    DWORD PTR [rdi-0x8],ecx
 1013d3e:	shl    eax,0x8
 1013d41:	or     eax,edx
 1013d43:	mov    DWORD PTR [rdi-0x4],eax
 1013d46:	dec    r8
 1013d49:	jne    0x1013d02
 1013d4b:	test   rsi,rsi
 1013d4e:	je     0x1013dad
 1013d50:	lea    rcx,[r14+rbp*1]
 1013d54:	movsx  eax,BYTE PTR [rbx]
 1013d57:	cmp    rbx,rcx
 1013d5a:	je     0x1013ddc
 1013d60:	cmp    eax,0x7f
 1013d63:	ja     0x1013e07
 1013d69:	mov    WORD PTR [rdi],ax
 1013d6c:	add    rdi,0x2
 1013d70:	inc    rbx
 1013d73:	dec    rsi
 1013d76:	jne    0x1013d54
 1013d78:	sub    rbx,rbp
 1013d7b:	mov    rax,rbx
 1013d7e:	jmp    0x1013e69
 1013d83:	lea    rdx,[rsp+0x30]
 1013d88:	call   QWORD PTR [rip+0xfffffffffffed402]        # 0x1001190
 1013d8e:	cmp    DWORD PTR [rsp+0x30],0x1
 1013d93:	jne    0x1013da0
 1013d95:	mov    rax,rsi
 1013d98:	jmp    0x1013e69
 1013d9d:	nop    DWORD PTR [rax]
 1013da0:	cmp    BYTE PTR [rbx],0x7f
 1013da3:	ja     0x1013e07
 1013da5:	inc    rbx
 1013da8:	dec    rsi
 1013dab:	jne    0x1013da0
 1013dad:	sub    rbx,rbp
 1013db0:	mov    rax,rbx
 1013db3:	jmp    0x1013e69
 1013db8:	test   r14,r14
 1013dbb:	je     0x1013df0
 1013dbd:	lea    rcx,[r14+rdx*1]
 1013dc1:	movsx  eax,BYTE PTR [rbx]
 1013dc4:	cmp    eax,0x7f
 1013dc7:	ja     0x1013e07
 1013dc9:	inc    rbx
 1013dcc:	mov    WORD PTR [rdi],ax
 1013dcf:	test   eax,eax
 1013dd1:	je     0x1013dff
 1013dd3:	add    rdi,0x2
 1013dd7:	cmp    rbx,rcx
 1013dda:	jne    0x1013dc1
 1013ddc:	mov    ecx,0x7a
 1013de1:	call   QWORD PTR [rip+0xfffffffffffed2f9]        # 0x10010e0
 1013de7:	xor    eax,eax
 1013de9:	jmp    0x1013e69
 1013deb:	nop    DWORD PTR [rax+rax*1+0x0]
 1013df0:	movsx  eax,BYTE PTR [rbx]
 1013df3:	cmp    eax,0x7f
 1013df6:	ja     0x1013e07
 1013df8:	inc    rbx
 1013dfb:	test   eax,eax
 1013dfd:	jne    0x1013df0
 1013dff:	sub    rbx,rdx
 1013e02:	mov    rax,rbx
 1013e05:	jmp    0x1013e69
 1013e07:	mov    QWORD PTR [rsp+0x50],r15
 1013e0c:	mov    r15d,ebx
 1013e0f:	sub    r15d,ebp
 1013e12:	xor    ebp,ebp
 1013e14:	movsxd rax,r15d
 1013e17:	cmp    r14,rax
 1013e1a:	jle    0x1013e21
 1013e1c:	sub    r14,rax
 1013e1f:	jmp    0x1013e24
 1013e21:	mov    r14,rbp
 1013e24:	cmp    r12d,0xc42c
 1013e2b:	jae    0x1013e31
 1013e2d:	mov    eax,ebp
 1013e2f:	jmp    0x1013e39
 1013e31:	mov    ecx,r12d
 1013e34:	call   0x10140f0
 1013e39:	test   eax,eax
 1013e3b:	mov    edx,ebp
 1013e3d:	mov    r9d,esi
 1013e40:	mov    r8,rbx
 1013e43:	mov    ecx,r12d
 1013e46:	sete   dl
 1013e49:	mov    DWORD PTR [rsp+0x28],r14d
 1013e4e:	mov    QWORD PTR [rsp+0x20],rdi
 1013e53:	call   QWORD PTR [rip+0xfffffffffffed1e7]        # 0x1001040
 1013e59:	test   eax,eax
 1013e5b:	je     0x1013e61
 1013e5d:	lea    ebp,[rax+r15*1]
 1013e61:	mov    r15,QWORD PTR [rsp+0x50]
 1013e66:	movsxd rax,ebp
 1013e69:	mov    rcx,QWORD PTR [rsp+0x48]
 1013e6e:	xor    rcx,rsp
 1013e71:	call   0x1014450
 1013e76:	add    rsp,0x58
 1013e7a:	pop    r14
 1013e7c:	pop    r12
 1013e7e:	pop    rdi
 1013e7f:	pop    rsi
 1013e80:	pop    rbp
 1013e81:	pop    rbx
 1013e82:	ret    
 1013e83:	int3   
 1013e84:	int3   
 1013e85:	int3   
 1013e86:	int3   
 1013e87:	int3   
 1013e88:	int3   
 1013e89:	int3   
 1013e8a:	int3   
 1013e8b:	int3   
 1013e8c:	int3   
 1013e8d:	int3   
 1013e8e:	int3   
 1013e8f:	int3   
 1013e90:	rex push rbx
 1013e92:	push   rbp
 1013e93:	push   rsi
 1013e94:	push   rdi
 1013e95:	push   r13
 1013e97:	sub    rsp,0x40
 1013e9b:	mov    rdi,r9
 1013e9e:	mov    rsi,r8
 1013ea1:	mov    rbx,rdx
 1013ea4:	mov    r13d,ecx
 1013ea7:	mov    r10,rdx
 1013eaa:	cmp    r8,0xffffffffffffffff
 1013eae:	je     0x1013fb7
 1013eb4:	test   r8,r8
 1013eb7:	je     0x1013fa3
 1013ebd:	mov    rbp,QWORD PTR [rsp+0x90]
 1013ec5:	test   rbp,rbp
 1013ec8:	je     0x1013f90
 1013ece:	cmp    rbp,r8
 1013ed1:	mov    r9,r8
 1013ed4:	cmovl  r9,rbp
 1013ed8:	sar    r9,0x2
 1013edc:	test   r9,r9
 1013edf:	je     0x1013f41
 1013ee1:	data16 data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1013ef0:	mov    r8d,DWORD PTR [rbx+0x4]
 1013ef4:	mov    edx,DWORD PTR [rbx]
 1013ef6:	mov    eax,r8d
 1013ef9:	or     eax,edx
 1013efb:	test   eax,0xff80ff80
 1013f00:	jne    0x1014034
 1013f06:	mov    ecx,r8d
 1013f09:	mov    eax,edx
 1013f0b:	and    r8d,0x7f0000
 1013f12:	and    ecx,0x7f
 1013f15:	shr    eax,0x8
 1013f18:	and    edx,0x7f
 1013f1b:	shl    ecx,0x8
 1013f1e:	and    eax,0x7f00
 1013f23:	add    rdi,0x4
 1013f27:	or     ecx,r8d
 1013f2a:	add    rbx,0x8
 1013f2e:	sub    rsi,0x4
 1013f32:	shl    ecx,0x8
 1013f35:	or     ecx,eax
 1013f37:	or     ecx,edx
 1013f39:	mov    DWORD PTR [rdi-0x4],ecx
 1013f3c:	dec    r9
 1013f3f:	jne    0x1013ef0
 1013f41:	test   rsi,rsi
 1013f44:	je     0x1013fa3
 1013f46:	lea    rcx,[r10+rbp*2]
 1013f4a:	nop    WORD PTR [rax+rax*1+0x0]
 1013f50:	cmp    rbx,rcx
 1013f53:	je     0x1013fe2
 1013f59:	movzx  eax,WORD PTR [rbx]
 1013f5c:	cmp    ax,0x7f
 1013f60:	ja     0x1014034
 1013f66:	mov    BYTE PTR [rdi],al
 1013f68:	inc    rdi
 1013f6b:	add    rbx,0x2
 1013f6f:	dec    rsi
 1013f72:	jne    0x1013f50
 1013f74:	sub    rbx,r10
 1013f77:	sar    rbx,1
 1013f7a:	mov    rax,rbx
 1013f7d:	add    rsp,0x40
 1013f81:	pop    r13
 1013f83:	pop    rdi
 1013f84:	pop    rsi
 1013f85:	pop    rbp
 1013f86:	pop    rbx
 1013f87:	ret    
 1013f88:	nop    DWORD PTR [rax+rax*1+0x0]
 1013f90:	cmp    WORD PTR [rbx],0x7f
 1013f94:	ja     0x1014034
 1013f9a:	add    rbx,0x2
 1013f9e:	dec    rsi
 1013fa1:	jne    0x1013f90
 1013fa3:	sub    rbx,r10
 1013fa6:	sar    rbx,1
 1013fa9:	mov    rax,rbx
 1013fac:	add    rsp,0x40
 1013fb0:	pop    r13
 1013fb2:	pop    rdi
 1013fb3:	pop    rsi
 1013fb4:	pop    rbp
 1013fb5:	pop    rbx
 1013fb6:	ret    
 1013fb7:	mov    rbp,QWORD PTR [rsp+0x90]
 1013fbf:	test   rbp,rbp
 1013fc2:	je     0x1014010
 1013fc4:	lea    rcx,[rdx+rbp*2]
 1013fc8:	movzx  eax,WORD PTR [rbx]
 1013fcb:	cmp    eax,0x7f
 1013fce:	ja     0x1014034
 1013fd0:	add    rbx,0x2
 1013fd4:	mov    BYTE PTR [rdi],al
 1013fd6:	test   eax,eax
 1013fd8:	je     0x1013ffa
 1013fda:	inc    rdi
 1013fdd:	cmp    rbx,rcx
 1013fe0:	jne    0x1013fc8
 1013fe2:	mov    ecx,0x7a
 1013fe7:	call   QWORD PTR [rip+0xfffffffffffed0f3]        # 0x10010e0
 1013fed:	xor    eax,eax
 1013fef:	add    rsp,0x40
 1013ff3:	pop    r13
 1013ff5:	pop    rdi
 1013ff6:	pop    rsi
 1013ff7:	pop    rbp
 1013ff8:	pop    rbx
 1013ff9:	ret    
 1013ffa:	sub    rbx,rdx
 1013ffd:	sar    rbx,1
 1014000:	movsxd rax,ebx
 1014003:	add    rsp,0x40
 1014007:	pop    r13
 1014009:	pop    rdi
 101400a:	pop    rsi
 101400b:	pop    rbp
 101400c:	pop    rbx
 101400d:	ret    
 101400e:	xchg   ax,ax
 1014010:	movzx  eax,WORD PTR [rbx]
 1014013:	cmp    eax,0x7f
 1014016:	ja     0x1014034
 1014018:	add    rbx,0x2
 101401c:	test   eax,eax
 101401e:	jne    0x1014010
 1014020:	sub    rbx,rdx
 1014023:	sar    rbx,1
 1014026:	mov    rax,rbx
 1014029:	add    rsp,0x40
 101402d:	pop    r13
 101402f:	pop    rdi
 1014030:	pop    rsi
 1014031:	pop    rbp
 1014032:	pop    rbx
 1014033:	ret    
 1014034:	mov    QWORD PTR [rsp+0x70],r12
 1014039:	mov    r12,QWORD PTR [rsp+0x98]
 1014041:	mov    QWORD PTR [rsp+0x78],r14
 1014046:	xor    r14d,r14d
 1014049:	mov    QWORD PTR [rsp+0x80],r15
 1014051:	test   r12,r12
 1014054:	je     0x101405a
 1014056:	mov    DWORD PTR [r12],r14d
 101405a:	mov    r15,rbx
 101405d:	sub    r15,r10
 1014060:	sar    r15,1
 1014063:	movsxd rax,r15d
 1014066:	cmp    rbp,rax
 1014069:	jle    0x1014070
 101406b:	sub    rbp,rax
 101406e:	jmp    0x1014073
 1014070:	mov    rbp,r14
 1014073:	cmp    r13d,0xc42c
 101407a:	jae    0x1014081
 101407c:	mov    eax,r14d
 101407f:	jmp    0x1014089
 1014081:	mov    ecx,r13d
 1014084:	call   0x10140f0
 1014089:	test   eax,eax
 101408b:	mov    r9d,esi
 101408e:	mov    r8,rbx
 1014091:	cmovne r12,r14
 1014095:	xor    edx,edx
 1014097:	mov    ecx,r13d
 101409a:	mov    QWORD PTR [rsp+0x38],r12
 101409f:	mov    QWORD PTR [rsp+0x30],r14
 10140a4:	mov    DWORD PTR [rsp+0x28],ebp
 10140a8:	mov    QWORD PTR [rsp+0x20],rdi
 10140ad:	call   QWORD PTR [rip+0xfffffffffffed0e5]        # 0x1001198
 10140b3:	mov    r12,QWORD PTR [rsp+0x70]
 10140b8:	test   eax,eax
 10140ba:	je     0x10140c0
 10140bc:	lea    r14d,[rax+r15*1]
 10140c0:	mov    r15,QWORD PTR [rsp+0x80]
 10140c8:	movsxd rax,r14d
 10140cb:	mov    r14,QWORD PTR [rsp+0x78]
 10140d0:	add    rsp,0x40
 10140d4:	pop    r13
 10140d6:	pop    rdi
 10140d7:	pop    rsi
 10140d8:	pop    rbp
 10140d9:	pop    rbx
 10140da:	ret    
 10140db:	int3   
 10140dc:	int3   
 10140dd:	int3   
 10140de:	int3   
 10140df:	int3   
 10140e0:	int3   
 10140e1:	int3   
 10140e2:	int3   
 10140e3:	int3   
 10140e4:	int3   
 10140e5:	int3   
 10140e6:	int3   
 10140e7:	int3   
 10140e8:	int3   
 10140e9:	int3   
 10140ea:	int3   
 10140eb:	int3   
 10140ec:	int3   
 10140ed:	int3   
 10140ee:	int3   
 10140ef:	int3   
 10140f0:	cmp    ecx,0xc42c
 10140f6:	je     0x1014153
 10140f8:	cmp    ecx,0xc42d
 10140fe:	je     0x1014153
 1014100:	cmp    ecx,0xc42e
 1014106:	je     0x1014153
 1014108:	cmp    ecx,0xc431
 101410e:	je     0x1014153
 1014110:	cmp    ecx,0xc433
 1014116:	je     0x1014153
 1014118:	cmp    ecx,0xc435
 101411e:	je     0x1014153
 1014120:	cmp    ecx,0xcec8
 1014126:	je     0x1014153
 1014128:	cmp    ecx,0xd698
 101412e:	je     0x1014153
 1014130:	cmp    ecx,0xfde8
 1014136:	je     0x1014153
 1014138:	cmp    ecx,0xfde9
 101413e:	je     0x1014153
 1014140:	cmp    ecx,0xdeaa
 1014146:	jb     0x1014150
 1014148:	cmp    ecx,0xdeb3
 101414e:	jbe    0x1014153
 1014150:	xor    eax,eax
 1014152:	ret    
 1014153:	mov    eax,0x1
 1014158:	ret    
 1014159:	int3   
 101415a:	int3   
 101415b:	int3   
 101415c:	int3   
 101415d:	int3   
 101415e:	int3   
 101415f:	int3   
 1014160:	sub    rsp,0x38
 1014164:	lea    rcx,[rip+0x5e9]        # 0x1014754
 101416b:	call   0x1014680
 1014170:	mov    r11d,DWORD PTR [rip+0x387d]        # 0x10179f4
 1014177:	mov    r9d,DWORD PTR [rip+0x3872]        # 0x10179f0
 101417e:	lea    rax,[rip+0x32e7]        # 0x101746c
 1014185:	lea    r8,[rip+0x32cc]        # 0x1017458
 101418c:	lea    rdx,[rip+0x32cd]        # 0x1017460
 1014193:	lea    rcx,[rip+0x32b6]        # 0x1017450
 101419a:	mov    DWORD PTR [rip+0x32cb],r11d        # 0x101746c
 10141a1:	mov    QWORD PTR [rsp+0x20],rax
 10141a6:	call   QWORD PTR [rip+0xfffffffffffed034]        # 0x10011e0
 10141ac:	mov    DWORD PTR [rip+0x32b6],eax        # 0x1017468
 10141b2:	test   eax,eax
 10141b4:	jns    0x10141c0
 10141b6:	mov    ecx,0x8
 10141bb:	call   0x1014706
 10141c0:	add    rsp,0x38
 10141c4:	ret    
 10141c5:	int3   
 10141c6:	int3   
 10141c7:	int3   
 10141c8:	int3   
 10141c9:	int3   
 10141ca:	int3   
 10141cb:	int3   
 10141cc:	mov    QWORD PTR [rsp+0x8],rbx
 10141d1:	push   rdi
 10141d2:	sub    rsp,0x20
 10141d6:	mov    rax,QWORD PTR gs:0x30
 10141df:	mov    rbx,QWORD PTR [rax+0x8]
 10141e3:	xor    edi,edi
 10141e5:	xor    eax,eax
 10141e7:	lock cmpxchg QWORD PTR [rip+0x42d8],rbx        # 0x10184c8
 10141f0:	je     0x101420d
 10141f2:	cmp    rax,rbx
 10141f5:	jne    0x1014200
 10141f7:	mov    ebx,0x1
 10141fc:	mov    edi,ebx
 10141fe:	jmp    0x1014212
 1014200:	mov    ecx,0x3e8
 1014205:	call   QWORD PTR [rip+0xfffffffffffecf95]        # 0x10011a0
 101420b:	jmp    0x10141e5
 101420d:	mov    ebx,0x1
 1014212:	mov    eax,DWORD PTR [rip+0x42a8]        # 0x10184c0
 1014218:	cmp    eax,ebx
 101421a:	jne    0x1014228
 101421c:	mov    ecx,0x1f
 1014221:	call   0x1014706
 1014226:	jmp    0x101425f
 1014228:	mov    eax,DWORD PTR [rip+0x4292]        # 0x10184c0
 101422e:	test   eax,eax
 1014230:	jne    0x1014259
 1014232:	mov    DWORD PTR [rip+0x4288],ebx        # 0x10184c0
 1014238:	lea    rdx,[rip+0xfffffffffffed221]        # 0x1001460
 101423f:	lea    rcx,[rip+0xfffffffffffed202]        # 0x1001448
 1014246:	call   0x1014894
 101424b:	test   eax,eax
 101424d:	je     0x101425f
 101424f:	mov    eax,0xff
 1014254:	jmp    0x1014341
 1014259:	mov    DWORD PTR [rip+0x3215],ebx        # 0x1017474
 101425f:	mov    eax,DWORD PTR [rip+0x425b]        # 0x10184c0
 1014265:	cmp    eax,ebx
 1014267:	jne    0x1014286
 1014269:	lea    rdx,[rip+0xfffffffffffed1d0]        # 0x1001440
 1014270:	lea    rcx,[rip+0xfffffffffffed1b1]        # 0x1001428
 1014277:	call   0x1014888
 101427c:	mov    DWORD PTR [rip+0x423a],0x2        # 0x10184c0
 1014286:	test   edi,edi
 1014288:	jne    0x1014293
 101428a:	xor    eax,eax
 101428c:	xchg   QWORD PTR [rip+0x4235],rax        # 0x10184c8
 1014293:	cmp    QWORD PTR [rip+0x4245],0x0        # 0x10184e0
 101429b:	je     0x10142bc
 101429d:	lea    rcx,[rip+0x423c]        # 0x10184e0
 10142a4:	call   0x1014840
 10142a9:	test   eax,eax
 10142ab:	je     0x10142bc
 10142ad:	xor    r8d,r8d
 10142b0:	lea    edx,[r8+0x2]
 10142b4:	xor    ecx,ecx
 10142b6:	call   QWORD PTR [rip+0x4224]        # 0x10184e0
 10142bc:	mov    rcx,QWORD PTR [rip+0xfffffffffffecf4d]        # 0x1001210
 10142c3:	mov    rax,QWORD PTR [rip+0x318e]        # 0x1017458
 10142ca:	mov    QWORD PTR [rcx],rax
 10142cd:	mov    r8,QWORD PTR [rip+0x3184]        # 0x1017458
 10142d4:	mov    rdx,QWORD PTR [rip+0x3185]        # 0x1017460
 10142db:	mov    ecx,DWORD PTR [rip+0x316f]        # 0x1017450
 10142e1:	call   0x100f050
 10142e6:	mov    DWORD PTR [rip+0x3184],eax        # 0x1017470
 10142ec:	cmp    DWORD PTR [rip+0x3161],0x0        # 0x1017454
 10142f3:	jne    0x10142fd
 10142f5:	mov    ecx,eax
 10142f7:	call   QWORD PTR [rip+0xfffffffffffecf0b]        # 0x1001208
 10142fd:	cmp    DWORD PTR [rip+0x3170],0x0        # 0x1017474
 1014304:	jne    0x1014312
 1014306:	call   QWORD PTR [rip+0xfffffffffffecef4]        # 0x1001200
 101430c:	mov    eax,DWORD PTR [rip+0x315e]        # 0x1017470
 1014312:	jmp    0x1014341
 1014314:	mov    DWORD PTR [rip+0x3156],eax        # 0x1017470
 101431a:	cmp    DWORD PTR [rip+0x3133],0x0        # 0x1017454
 1014321:	jne    0x101432c
 1014323:	mov    ecx,eax
 1014325:	call   QWORD PTR [rip+0xfffffffffffececd]        # 0x10011f8
 101432b:	int3   
 101432c:	cmp    DWORD PTR [rip+0x3141],0x0        # 0x1017474
 1014333:	jne    0x1014341
 1014335:	call   QWORD PTR [rip+0xfffffffffffecec5]        # 0x1001200
 101433b:	mov    eax,DWORD PTR [rip+0x312f]        # 0x1017470
 1014341:	mov    rbx,QWORD PTR [rsp+0x30]
 1014346:	add    rsp,0x20
 101434a:	pop    rdi
 101434b:	ret    
 101434c:	int3   
 101434d:	int3   
 101434e:	int3   
 101434f:	int3   
 1014350:	int3   
 1014351:	int3   
 1014352:	int3   
 1014353:	int3   
 1014354:	sub    rsp,0x28
 1014358:	mov    eax,0x5a4d
 101435d:	cmp    WORD PTR [rip+0xfffffffffffebc9c],ax        # 0x1000000
 1014364:	je     0x101436a
 1014366:	xor    ecx,ecx
 1014368:	jmp    0x10143a2
 101436a:	movsxd rax,DWORD PTR [rip+0xfffffffffffebccb]        # 0x100003c
 1014371:	lea    rcx,[rip+0xfffffffffffebc88]        # 0x1000000
 1014378:	add    rax,rcx
 101437b:	cmp    DWORD PTR [rax],0x4550
 1014381:	jne    0x1014366
 1014383:	mov    ecx,0x20b
 1014388:	cmp    WORD PTR [rax+0x18],cx
 101438c:	jne    0x1014366
 101438e:	xor    ecx,ecx
 1014390:	cmp    DWORD PTR [rax+0x84],0xe
 1014397:	jbe    0x10143a2
 1014399:	cmp    DWORD PTR [rax+0xf8],ecx
 101439f:	setne  cl
 10143a2:	mov    DWORD PTR [rip+0x30ac],ecx        # 0x1017454
 10143a8:	mov    ecx,0x1
 10143ad:	call   QWORD PTR [rip+0xfffffffffffece95]        # 0x1001248
 10143b3:	or     rcx,0xffffffffffffffff
 10143b7:	call   QWORD PTR [rip+0xfffffffffffecd63]        # 0x1001120
 10143bd:	mov    rcx,QWORD PTR [rip+0xfffffffffffece7c]        # 0x1001240
 10143c4:	mov    QWORD PTR [rip+0x4105],rax        # 0x10184d0
 10143cb:	mov    QWORD PTR [rip+0x4106],rax        # 0x10184d8
 10143d2:	mov    eax,DWORD PTR [rip+0x3624]        # 0x10179fc
 10143d8:	mov    DWORD PTR [rcx],eax
 10143da:	mov    rdx,QWORD PTR [rip+0xfffffffffffece57]        # 0x1001238
 10143e1:	mov    eax,DWORD PTR [rip+0x3611]        # 0x10179f8
 10143e7:	mov    DWORD PTR [rdx],eax
 10143e9:	call   0x1014714
 10143ee:	call   0x10148ac
 10143f3:	cmp    DWORD PTR [rip+0x2d12],0x0        # 0x101710c
 10143fa:	jne    0x1014409
 10143fc:	lea    rcx,[rip+0x49d]        # 0x10148a0
 1014403:	call   QWORD PTR [rip+0xfffffffffffece27]        # 0x1001230
 1014409:	cmp    DWORD PTR [rip+0x2cf8],0xffffffff        # 0x1017108
 1014410:	jne    0x101441b
 1014412:	or     ecx,0xffffffff
 1014415:	call   QWORD PTR [rip+0xfffffffffffece0d]        # 0x1001228
 101441b:	xor    eax,eax
 101441d:	add    rsp,0x28
 1014421:	ret    
 1014422:	int3   
 1014423:	int3   
 1014424:	int3   
 1014425:	int3   
 1014426:	int3   
 1014427:	int3   
 1014428:	sub    rsp,0x28
 101442c:	call   0x10148b8
 1014431:	add    rsp,0x28
 1014435:	jmp    0x10141cc
 101443a:	int3   
 101443b:	int3   
 101443c:	int3   
 101443d:	int3   
 101443e:	int3   
 101443f:	int3   
 1014440:	int3   
 1014441:	int3   
 1014442:	int3   
 1014443:	int3   
 1014444:	int3   
 1014445:	int3   
 1014446:	data16 nop WORD PTR [rax+rax*1+0x0]
 1014450:	cmp    rcx,QWORD PTR [rip+0x2cb9]        # 0x1017110
 1014457:	jne    0x101446a
 1014459:	rol    rcx,0x10
 101445d:	test   cx,0xffff
 1014462:	jne    0x1014466
 1014464:	repz ret 
 1014466:	ror    rcx,0x10
 101446a:	jmp    0x1014478
 101446f:	int3   
 1014470:	int3   
 1014471:	int3   
 1014472:	int3   
 1014473:	int3   
 1014474:	int3   
 1014475:	int3   
 1014476:	int3   
 1014477:	int3   
 1014478:	mov    QWORD PTR [rsp+0x8],rcx
 101447d:	sub    rsp,0x88
 1014484:	lea    rcx,[rip+0x3095]        # 0x1017520
 101448b:	call   QWORD PTR [rip+0xfffffffffffecccf]        # 0x1001160
 1014491:	mov    rax,QWORD PTR [rip+0x3180]        # 0x1017618
 1014498:	mov    QWORD PTR [rsp+0x58],rax
 101449d:	xor    r8d,r8d
 10144a0:	lea    rdx,[rsp+0x60]
 10144a5:	mov    rcx,QWORD PTR [rsp+0x58]
 10144aa:	call   0x10149ba
 10144af:	mov    QWORD PTR [rsp+0x50],rax
 10144b4:	cmp    QWORD PTR [rsp+0x50],0x0
 10144ba:	je     0x10144fd
 10144bc:	mov    QWORD PTR [rsp+0x38],0x0
 10144c5:	lea    rax,[rsp+0x48]
 10144ca:	mov    QWORD PTR [rsp+0x30],rax
 10144cf:	lea    rax,[rsp+0x40]
 10144d4:	mov    QWORD PTR [rsp+0x28],rax
 10144d9:	lea    rax,[rip+0x3040]        # 0x1017520
 10144e0:	mov    QWORD PTR [rsp+0x20],rax
 10144e5:	mov    r9,QWORD PTR [rsp+0x50]
 10144ea:	mov    r8,QWORD PTR [rsp+0x58]
 10144ef:	mov    rdx,QWORD PTR [rsp+0x60]
 10144f4:	xor    ecx,ecx
 10144f6:	call   0x10149ae
 10144fb:	jmp    0x101451f
 10144fd:	mov    rax,QWORD PTR [rsp+0x88]
 1014505:	mov    QWORD PTR [rip+0x310c],rax        # 0x1017618
 101450c:	lea    rax,[rsp+0x88]
 1014514:	add    rax,0x8
 1014518:	mov    QWORD PTR [rip+0x3099],rax        # 0x10175b8
 101451f:	mov    rax,QWORD PTR [rip+0x30f2]        # 0x1017618
 1014526:	mov    QWORD PTR [rip+0x2f63],rax        # 0x1017490
 101452d:	mov    rax,QWORD PTR [rsp+0x90]
 1014535:	mov    QWORD PTR [rip+0x3064],rax        # 0x10175a0
 101453c:	mov    DWORD PTR [rip+0x2f3a],0xc0000409        # 0x1017480
 1014546:	mov    DWORD PTR [rip+0x2f34],0x1        # 0x1017484
 1014550:	mov    rax,QWORD PTR [rip+0x2bb9]        # 0x1017110
 1014557:	mov    QWORD PTR [rsp+0x68],rax
 101455c:	mov    rax,QWORD PTR [rip+0x2bb5]        # 0x1017118
 1014563:	mov    QWORD PTR [rsp+0x70],rax
 1014568:	call   QWORD PTR [rip+0xfffffffffffecbda]        # 0x1001148
 101456e:	mov    DWORD PTR [rip+0x2fa4],eax        # 0x1017518
 1014574:	mov    ecx,0x1
 1014579:	call   0x1014972
 101457e:	xor    ecx,ecx
 1014580:	call   QWORD PTR [rip+0xfffffffffffecbba]        # 0x1001140
 1014586:	lea    rcx,[rip+0xfffffffffffecf03]        # 0x1001490
 101458d:	call   QWORD PTR [rip+0xfffffffffffecba5]        # 0x1001138
 1014593:	cmp    DWORD PTR [rip+0x2f7e],0x0        # 0x1017518
 101459a:	jne    0x10145a6
 101459c:	mov    ecx,0x1
 10145a1:	call   0x1014972
 10145a6:	call   QWORD PTR [rip+0xfffffffffffecb84]        # 0x1001130
 10145ac:	mov    edx,0xc0000409
 10145b1:	mov    rcx,rax
 10145b4:	call   QWORD PTR [rip+0xfffffffffffecb6e]        # 0x1001128
 10145ba:	add    rsp,0x88
 10145c1:	ret    
 10145c2:	int3   
 10145c3:	int3   
 10145c4:	int3   
 10145c5:	int3   
 10145c6:	int3   
 10145c7:	int3   
 10145c8:	rex push rbx
 10145ca:	sub    rsp,0x20
 10145ce:	mov    rbx,rcx
 10145d1:	mov    rcx,QWORD PTR [rip+0x3f00]        # 0x10184d8
 10145d8:	call   QWORD PTR [rip+0xfffffffffffecb8a]        # 0x1001168
 10145de:	mov    QWORD PTR [rsp+0x38],rax
 10145e3:	cmp    rax,0xffffffffffffffff
 10145e7:	jne    0x10145f4
 10145e9:	mov    rcx,rbx
 10145ec:	call   QWORD PTR [rip+0xfffffffffffecc7e]        # 0x1001270
 10145f2:	jmp    0x1014672
 10145f4:	mov    ecx,0x8
 10145f9:	call   0x1014996
 10145fe:	nop
 10145ff:	mov    rcx,QWORD PTR [rip+0x3ed2]        # 0x10184d8
 1014606:	call   QWORD PTR [rip+0xfffffffffffecb5c]        # 0x1001168
 101460c:	mov    QWORD PTR [rsp+0x38],rax
 1014611:	mov    rcx,QWORD PTR [rip+0x3eb8]        # 0x10184d0
 1014618:	call   QWORD PTR [rip+0xfffffffffffecb4a]        # 0x1001168
 101461e:	mov    QWORD PTR [rsp+0x40],rax
 1014623:	mov    rcx,rbx
 1014626:	call   QWORD PTR [rip+0xfffffffffffecaf4]        # 0x1001120
 101462c:	mov    rcx,rax
 101462f:	lea    r8,[rsp+0x40]
 1014634:	lea    rdx,[rsp+0x38]
 1014639:	call   0x101498a
 101463e:	mov    rbx,rax
 1014641:	mov    rcx,QWORD PTR [rsp+0x38]
 1014646:	call   QWORD PTR [rip+0xfffffffffffecad4]        # 0x1001120
 101464c:	mov    QWORD PTR [rip+0x3e85],rax        # 0x10184d8
 1014653:	mov    rcx,QWORD PTR [rsp+0x40]
 1014658:	call   QWORD PTR [rip+0xfffffffffffecac2]        # 0x1001120
 101465e:	mov    QWORD PTR [rip+0x3e6b],rax        # 0x10184d0
 1014665:	mov    ecx,0x8
 101466a:	call   0x101497e
 101466f:	mov    rax,rbx
 1014672:	add    rsp,0x20
 1014676:	pop    rbx
 1014677:	ret    
 1014678:	int3   
 1014679:	int3   
 101467a:	int3   
 101467b:	int3   
 101467c:	int3   
 101467d:	int3   
 101467e:	int3   
 101467f:	int3   
 1014680:	sub    rsp,0x28
 1014684:	call   0x10145c8
 1014689:	neg    rax
 101468c:	sbb    eax,eax
 101468e:	neg    eax
 1014690:	dec    eax
 1014692:	add    rsp,0x28
 1014696:	ret    
 1014697:	int3   
 1014698:	int3   
 1014699:	int3   
 101469a:	int3   
 101469b:	int3   
 101469c:	int3   
 101469d:	int3   
 101469e:	int3   
 101469f:	int3   
 10146a0:	sub    rsp,0x28
 10146a4:	mov    rax,QWORD PTR [rcx]
 10146a7:	cmp    DWORD PTR [rax],0xe06d7363
 10146ad:	jne    0x10146da
 10146af:	cmp    DWORD PTR [rax+0x18],0x4
 10146b3:	jne    0x10146da
 10146b5:	mov    eax,DWORD PTR [rax+0x20]
 10146b8:	cmp    eax,0x19930520
 10146bd:	je     0x10146d4
 10146bf:	cmp    eax,0x19930521
 10146c4:	je     0x10146d4
 10146c6:	cmp    eax,0x19930522
 10146cb:	je     0x10146d4
 10146cd:	cmp    eax,0x1994000
 10146d2:	jne    0x10146da
 10146d4:	call   0x10149a2
 10146d9:	int3   
 10146da:	xor    eax,eax
 10146dc:	add    rsp,0x28
 10146e0:	ret    
 10146e1:	int3   
 10146e2:	int3   
 10146e3:	int3   
 10146e4:	int3   
 10146e5:	int3   
 10146e6:	int3   
 10146e7:	int3   
 10146e8:	sub    rsp,0x28
 10146ec:	lea    rcx,[rip+0xffffffffffffffad]        # 0x10146a0
 10146f3:	call   QWORD PTR [rip+0xfffffffffffeca47]        # 0x1001140
 10146f9:	xor    eax,eax
 10146fb:	add    rsp,0x28
 10146ff:	ret    
 1014700:	int3   
 1014701:	int3   
 1014702:	int3   
 1014703:	int3   
 1014704:	int3   
 1014705:	int3   
 1014706:	jmp    QWORD PTR [rip+0xfffffffffffecacc]        # 0x10011d8
 101470c:	int3   
 101470d:	int3   
 101470e:	int3   
 101470f:	int3   
 1014710:	int3   
 1014711:	int3   
 1014712:	int3   
 1014713:	int3   
 1014714:	mov    QWORD PTR [rsp+0x8],rbx
 1014719:	push   rdi
 101471a:	sub    rsp,0x20
 101471e:	lea    rbx,[rip+0xffffffffffff4263]        # 0x1008988
 1014725:	lea    rdi,[rip+0xffffffffffff425c]        # 0x1008988
 101472c:	jmp    0x101473c
 101472e:	mov    rax,QWORD PTR [rbx]
 1014731:	test   rax,rax
 1014734:	je     0x1014738
 1014736:	call   rax
 1014738:	add    rbx,0x8
 101473c:	cmp    rbx,rdi
 101473f:	jb     0x101472e
 1014741:	mov    rbx,QWORD PTR [rsp+0x30]
 1014746:	add    rsp,0x20
 101474a:	pop    rdi
 101474b:	ret    
 101474c:	int3   
 101474d:	int3   
 101474e:	int3   
 101474f:	int3   
 1014750:	int3   
 1014751:	int3   
 1014752:	int3   
 1014753:	int3   
 1014754:	mov    QWORD PTR [rsp+0x8],rbx
 1014759:	push   rdi
 101475a:	sub    rsp,0x20
 101475e:	lea    rbx,[rip+0xffffffffffff4233]        # 0x1008998
 1014765:	lea    rdi,[rip+0xffffffffffff422c]        # 0x1008998
 101476c:	jmp    0x101477c
 101476e:	mov    rax,QWORD PTR [rbx]
 1014771:	test   rax,rax
 1014774:	je     0x1014778
 1014776:	call   rax
 1014778:	add    rbx,0x8
 101477c:	cmp    rbx,rdi
 101477f:	jb     0x101476e
 1014781:	mov    rbx,QWORD PTR [rsp+0x30]
 1014786:	add    rsp,0x20
 101478a:	pop    rdi
 101478b:	ret    
 101478c:	int3   
 101478d:	int3   
 101478e:	int3   
 101478f:	int3   
 1014790:	int3   
 1014791:	int3   
 1014792:	jmp    QWORD PTR [rip+0xfffffffffffeca50]        # 0x10011e8
 1014798:	int3   
 1014799:	int3   
 101479a:	int3   
 101479b:	int3   
 101479c:	int3   
 101479d:	int3   
 101479e:	jmp    QWORD PTR [rip+0xfffffffffffeca4c]        # 0x10011f0
 10147a4:	int3   
 10147a5:	int3   
 10147a6:	int3   
 10147a7:	int3   
 10147a8:	int3   
 10147a9:	int3   
 10147aa:	int3   
 10147ab:	int3   
 10147ac:	int3   
 10147ad:	int3   
 10147ae:	int3   
 10147af:	int3   
 10147b0:	mov    rax,rcx
 10147b3:	mov    ecx,0x5a4d
 10147b8:	cmp    WORD PTR [rax],cx
 10147bb:	je     0x10147c0
 10147bd:	xor    eax,eax
 10147bf:	ret    
 10147c0:	movsxd rcx,DWORD PTR [rax+0x3c]
 10147c4:	add    rcx,rax
 10147c7:	xor    eax,eax
 10147c9:	cmp    DWORD PTR [rcx],0x4550
 10147cf:	jne    0x10147dd
 10147d1:	mov    edx,0x20b
 10147d6:	cmp    WORD PTR [rcx+0x18],dx
 10147da:	sete   al
 10147dd:	repz ret 
 10147df:	int3   
 10147e0:	int3   
 10147e1:	int3   
 10147e2:	int3   
 10147e3:	int3   
 10147e4:	int3   
 10147e5:	int3   
 10147e6:	int3   
 10147e7:	int3   
 10147e8:	int3   
 10147e9:	int3   
 10147ea:	int3   
 10147eb:	int3   
 10147ec:	int3   
 10147ed:	int3   
 10147ee:	int3   
 10147ef:	int3   
 10147f0:	movsxd r8,DWORD PTR [rcx+0x3c]
 10147f4:	xor    r9d,r9d
 10147f7:	mov    r10,rdx
 10147fa:	add    r8,rcx
 10147fd:	movzx  eax,WORD PTR [r8+0x14]
 1014802:	movzx  r11d,WORD PTR [r8+0x6]
 1014807:	lea    rcx,[rax+r8*1+0x18]
 101480c:	test   r11d,r11d
 101480f:	je     0x101482f
 1014811:	mov    edx,DWORD PTR [rcx+0xc]
 1014814:	cmp    r10,rdx
 1014817:	jb     0x1014823
 1014819:	mov    eax,DWORD PTR [rcx+0x8]
 101481c:	add    eax,edx
 101481e:	cmp    r10,rax
 1014821:	jb     0x1014832
 1014823:	inc    r9d
 1014826:	add    rcx,0x28
 101482a:	cmp    r9d,r11d
 101482d:	jb     0x1014811
 101482f:	xor    eax,eax
 1014831:	ret    
 1014832:	mov    rax,rcx
 1014835:	ret    
 1014836:	int3   
 1014837:	int3   
 1014838:	int3   
 1014839:	int3   
 101483a:	int3   
 101483b:	int3   
 101483c:	int3   
 101483d:	int3   
 101483e:	int3   
 101483f:	int3   
 1014840:	sub    rsp,0x28
 1014844:	mov    r8,rcx
 1014847:	lea    r9,[rip+0xfffffffffffeb7b2]        # 0x1000000
 101484e:	mov    rcx,r9
 1014851:	call   0x10147b0
 1014856:	test   eax,eax
 1014858:	je     0x101487c
 101485a:	sub    r8,r9
 101485d:	mov    rdx,r8
 1014860:	mov    rcx,r9
 1014863:	call   0x10147f0
 1014868:	test   rax,rax
 101486b:	je     0x101487c
 101486d:	mov    eax,DWORD PTR [rax+0x24]
 1014870:	shr    eax,0x1f
 1014873:	not    eax
 1014875:	and    eax,0x1
 1014878:	jmp    0x101487c
 101487a:	xor    eax,eax
 101487c:	add    rsp,0x28
 1014880:	ret    
 1014881:	int3   
 1014882:	int3   
 1014883:	int3   
 1014884:	int3   
 1014885:	int3   
 1014886:	int3   
 1014887:	int3   
 1014888:	jmp    QWORD PTR [rip+0xfffffffffffec98a]        # 0x1001218
 101488e:	int3   
 101488f:	int3   
 1014890:	int3   
 1014891:	int3   
 1014892:	int3   
 1014893:	int3   
 1014894:	jmp    QWORD PTR [rip+0xfffffffffffec986]        # 0x1001220
 101489a:	int3   
 101489b:	int3   
 101489c:	int3   
 101489d:	int3   
 101489e:	int3   
 101489f:	int3   
 10148a0:	xor    eax,eax
 10148a2:	ret    
 10148a3:	int3   
 10148a4:	int3   
 10148a5:	int3   
 10148a6:	int3   
 10148a7:	int3   
 10148a8:	int3   
 10148a9:	int3   
 10148aa:	int3   
 10148ab:	int3   
 10148ac:	xor    eax,eax
 10148ae:	ret    
 10148af:	int3   
 10148b0:	int3   
 10148b1:	int3   
 10148b2:	int3   
 10148b3:	int3   
 10148b4:	int3   
 10148b5:	int3   
 10148b6:	int3   
 10148b7:	int3   
 10148b8:	mov    QWORD PTR [rsp+0x18],rbx
 10148bd:	push   rdi
 10148be:	sub    rsp,0x20
 10148c2:	mov    rax,QWORD PTR [rip+0x2847]        # 0x1017110
 10148c9:	and    QWORD PTR [rsp+0x30],0x0
 10148cf:	movabs rdi,0x2b992ddfa232
 10148d9:	cmp    rax,rdi
 10148dc:	je     0x10148ea
 10148de:	not    rax
 10148e1:	mov    QWORD PTR [rip+0x2830],rax        # 0x1017118
 10148e8:	jmp    0x1014960
 10148ea:	lea    rcx,[rsp+0x30]
 10148ef:	call   QWORD PTR [rip+0xfffffffffffec893]        # 0x1001188
 10148f5:	mov    rbx,QWORD PTR [rsp+0x30]
 10148fa:	call   QWORD PTR [rip+0xfffffffffffec880]        # 0x1001180
 1014900:	mov    r11d,eax
 1014903:	xor    rbx,r11
 1014906:	call   QWORD PTR [rip+0xfffffffffffec86c]        # 0x1001178
 101490c:	mov    r11d,eax
 101490f:	xor    rbx,r11
 1014912:	call   QWORD PTR [rip+0xfffffffffffec798]        # 0x10010b0
 1014918:	lea    rcx,[rsp+0x38]
 101491d:	mov    r11d,eax
 1014920:	xor    rbx,r11
 1014923:	call   QWORD PTR [rip+0xfffffffffffec847]        # 0x1001170
 1014929:	mov    r11,QWORD PTR [rsp+0x38]
 101492e:	xor    r11,rbx
 1014931:	movabs rax,0xffffffffffff
 101493b:	and    r11,rax
 101493e:	movabs rax,0x2b992ddfa233
 1014948:	cmp    r11,rdi
 101494b:	cmove  r11,rax
 101494f:	mov    QWORD PTR [rip+0x27ba],r11        # 0x1017110
 1014956:	not    r11
 1014959:	mov    QWORD PTR [rip+0x27b8],r11        # 0x1017118
 1014960:	mov    rbx,QWORD PTR [rsp+0x40]
 1014965:	add    rsp,0x20
 1014969:	pop    rdi
 101496a:	ret    
 101496b:	int3   
 101496c:	int3   
 101496d:	int3   
 101496e:	int3   
 101496f:	int3   
 1014970:	int3   
 1014971:	int3   
 1014972:	jmp    QWORD PTR [rip+0xfffffffffffec8d8]        # 0x1001250
 1014978:	int3   
 1014979:	int3   
 101497a:	int3   
 101497b:	int3   
 101497c:	int3   
 101497d:	int3   
 101497e:	jmp    QWORD PTR [rip+0xfffffffffffec8d4]        # 0x1001258
 1014984:	int3   
 1014985:	int3   
 1014986:	int3   
 1014987:	int3   
 1014988:	int3   
 1014989:	int3   
 101498a:	jmp    QWORD PTR [rip+0xfffffffffffec8d0]        # 0x1001260
 1014990:	int3   
 1014991:	int3   
 1014992:	int3   
 1014993:	int3   
 1014994:	int3   
 1014995:	int3   
 1014996:	jmp    QWORD PTR [rip+0xfffffffffffec8cc]        # 0x1001268
 101499c:	int3   
 101499d:	int3   
 101499e:	int3   
 101499f:	int3   
 10149a0:	int3   
 10149a1:	int3   
 10149a2:	jmp    QWORD PTR [rip+0xfffffffffffec8d0]        # 0x1001278
 10149a8:	int3   
 10149a9:	int3   
 10149aa:	int3   
 10149ab:	int3   
 10149ac:	int3   
 10149ad:	int3   
 10149ae:	jmp    QWORD PTR [rip+0xfffffffffffec79c]        # 0x1001150
 10149b4:	int3   
 10149b5:	int3   
 10149b6:	int3   
 10149b7:	int3   
 10149b8:	int3   
 10149b9:	int3   
 10149ba:	jmp    QWORD PTR [rip+0xfffffffffffec798]        # 0x1001158
 10149c0:	int3   
 10149c1:	int3   
 10149c2:	int3   
 10149c3:	int3   
 10149c4:	int3   
 10149c5:	int3   
 10149c6:	int3   
 10149c7:	int3   
 10149c8:	rex push rbx
 10149ca:	sub    rsp,0x20
 10149ce:	mov    r11d,DWORD PTR [r8]
 10149d1:	mov    rbx,rdx
 10149d4:	mov    r9,rcx
 10149d7:	and    r11d,0xfffffff8
 10149db:	test   BYTE PTR [r8],0x4
 10149df:	mov    r10,rcx
 10149e2:	je     0x10149f7
 10149e4:	mov    eax,DWORD PTR [r8+0x8]
 10149e8:	movsxd r10,DWORD PTR [r8+0x4]
 10149ec:	neg    eax
 10149ee:	add    r10,rcx
 10149f1:	movsxd rcx,eax
 10149f4:	and    r10,rcx
 10149f7:	movsxd rax,r11d
 10149fa:	mov    rdx,QWORD PTR [rax+r10*1]
 10149fe:	mov    rax,QWORD PTR [rbx+0x10]
 1014a02:	mov    ecx,DWORD PTR [rax+0x8]
 1014a05:	add    rcx,QWORD PTR [rbx+0x8]
 1014a09:	test   BYTE PTR [rcx+0x3],0xf
 1014a0d:	je     0x1014a1b
 1014a0f:	movzx  eax,BYTE PTR [rcx+0x3]
 1014a13:	and    eax,0xfffffff0
 1014a16:	cdqe   
 1014a18:	add    r9,rax
 1014a1b:	xor    r9,rdx
 1014a1e:	mov    rcx,r9
 1014a21:	add    rsp,0x20
 1014a25:	pop    rbx
 1014a26:	jmp    0x1014450
 1014a2b:	int3   
 1014a2c:	int3   
 1014a2d:	int3   
 1014a2e:	int3   
 1014a2f:	int3   
 1014a30:	int3   
 1014a31:	int3   
 1014a32:	int3   
 1014a33:	int3   
 1014a34:	sub    rsp,0x28
 1014a38:	mov    r8,QWORD PTR [r9+0x38]
 1014a3c:	mov    rcx,rdx
 1014a3f:	mov    rdx,r9
 1014a42:	call   0x10149c8
 1014a47:	mov    eax,0x1
 1014a4c:	add    rsp,0x28
 1014a50:	ret    
 1014a51:	int3   
 1014a52:	int3   
 1014a53:	int3   
 1014a54:	int3   
 1014a55:	int3   
 1014a56:	int3   
 1014a57:	int3   
 1014a58:	mov    rax,rsp
 1014a5b:	mov    QWORD PTR [rax+0x8],rbx
 1014a5f:	mov    QWORD PTR [rax+0x10],rbp
 1014a63:	mov    QWORD PTR [rax+0x18],rsi
 1014a67:	mov    QWORD PTR [rax+0x20],rdi
 1014a6b:	push   r12
 1014a6d:	sub    rsp,0x20
 1014a71:	mov    rbx,QWORD PTR [r9+0x38]
 1014a75:	mov    rsi,rdx
 1014a78:	mov    r12,r8
 1014a7b:	mov    rbp,rcx
 1014a7e:	lea    r8,[rbx+0x4]
 1014a82:	mov    rdx,r9
 1014a85:	mov    rcx,rsi
 1014a88:	mov    rdi,r9
 1014a8b:	call   0x10149c8
 1014a90:	mov    r11d,DWORD PTR [rbx+0x4]
 1014a94:	mov    r10d,DWORD PTR [rbp+0x4]
 1014a98:	mov    eax,r11d
 1014a9b:	and    r11d,0x2
 1014a9f:	mov    r8d,0x1
 1014aa5:	and    eax,r8d
 1014aa8:	and    r10b,0x66
 1014aac:	cmove  r11d,eax
 1014ab0:	test   r11d,r11d
 1014ab3:	je     0x1014ac9
 1014ab5:	mov    r9,rdi
 1014ab8:	mov    r8,r12
 1014abb:	mov    rdx,rsi
 1014abe:	mov    rcx,rbp
 1014ac1:	call   0x1014c0c
 1014ac6:	mov    r8d,eax
 1014ac9:	mov    rbx,QWORD PTR [rsp+0x30]
 1014ace:	mov    rbp,QWORD PTR [rsp+0x38]
 1014ad3:	mov    rsi,QWORD PTR [rsp+0x40]
 1014ad8:	mov    rdi,QWORD PTR [rsp+0x48]
 1014add:	mov    eax,r8d
 1014ae0:	add    rsp,0x20
 1014ae4:	pop    r12
 1014ae6:	ret    
 1014ae7:	int3   
 1014ae8:	int3   
 1014ae9:	int3   
 1014aea:	int3   
 1014aeb:	int3   
 1014aec:	int3   
 1014aed:	int3   
 1014aee:	int3   
 1014aef:	int3   
 1014af0:	mov    rax,rsp
 1014af3:	mov    QWORD PTR [rax+0x8],rbx
 1014af7:	mov    QWORD PTR [rax+0x10],rbp
 1014afb:	mov    QWORD PTR [rax+0x18],rsi
 1014aff:	mov    QWORD PTR [rax+0x20],rdi
 1014b03:	push   r12
 1014b05:	sub    rsp,0x20
 1014b09:	mov    r10,QWORD PTR [r9+0x38]
 1014b0d:	mov    rsi,rdx
 1014b10:	mov    r12,r8
 1014b13:	mov    eax,DWORD PTR [r10]
 1014b16:	mov    rbp,rcx
 1014b19:	mov    rdx,r9
 1014b1c:	add    rax,rax
 1014b1f:	mov    rcx,rsi
 1014b22:	mov    rdi,r9
 1014b25:	lea    rbx,[r10+rax*8+0x4]
 1014b2a:	mov    r8,rbx
 1014b2d:	call   0x10149c8
 1014b32:	mov    r11d,DWORD PTR [rbx]
 1014b35:	mov    r10d,DWORD PTR [rbp+0x4]
 1014b39:	mov    eax,r11d
 1014b3c:	and    r11d,0x2
 1014b40:	mov    edx,0x1
 1014b45:	and    eax,edx
 1014b47:	and    r10b,0x66
 1014b4b:	cmove  r11d,eax
 1014b4f:	test   r11d,r11d
 1014b52:	je     0x1014b67
 1014b54:	mov    r9,rdi
 1014b57:	mov    r8,r12
 1014b5a:	mov    rdx,rsi
 1014b5d:	mov    rcx,rbp
 1014b60:	call   0x1014792
 1014b65:	mov    edx,eax
 1014b67:	mov    rbx,QWORD PTR [rsp+0x30]
 1014b6c:	mov    rbp,QWORD PTR [rsp+0x38]
 1014b71:	mov    rsi,QWORD PTR [rsp+0x40]
 1014b76:	mov    rdi,QWORD PTR [rsp+0x48]
 1014b7b:	mov    eax,edx
 1014b7d:	add    rsp,0x20
 1014b81:	pop    r12
 1014b83:	ret    
 1014b84:	int3   
 1014b85:	int3   
 1014b86:	int3   
 1014b87:	int3   
 1014b88:	int3   
 1014b89:	int3   
 1014b8a:	int3   
 1014b8b:	int3   
 1014b8c:	int3   
 1014b8d:	int3   
 1014b8e:	int3   
 1014b8f:	int3   
 1014b90:	int3   
 1014b91:	int3   
 1014b92:	int3   
 1014b93:	int3   
 1014b94:	int3   
 1014b95:	int3   
 1014b96:	data16 nop WORD PTR [rax+rax*1+0x0]
 1014ba0:	sub    rsp,0x10
 1014ba4:	mov    QWORD PTR [rsp],r10
 1014ba8:	mov    QWORD PTR [rsp+0x8],r11
 1014bad:	xor    r11,r11
 1014bb0:	lea    r10,[rsp+0x18]
 1014bb5:	sub    r10,rax
 1014bb8:	cmovb  r10,r11
 1014bbc:	mov    r11,QWORD PTR gs:0x10
 1014bc5:	cmp    r10,r11
 1014bc8:	jae    0x1014be0
 1014bca:	and    r10w,0xf000
 1014bd0:	lea    r11,[r11-0x1000]
 1014bd7:	mov    BYTE PTR [r11],0x0
 1014bdb:	cmp    r10,r11
 1014bde:	jne    0x1014bd0
 1014be0:	mov    r10,QWORD PTR [rsp]
 1014be4:	mov    r11,QWORD PTR [rsp+0x8]
 1014be9:	add    rsp,0x10
 1014bed:	ret    
 1014bee:	int3   
 1014bef:	int3   
 1014bf0:	int3   
 1014bf1:	int3   
 1014bf2:	int3   
 1014bf3:	int3   
 1014bf4:	jmp    QWORD PTR [rip+0xfffffffffffec68e]        # 0x1001288
 1014bfa:	int3   
 1014bfb:	int3   
 1014bfc:	int3   
 1014bfd:	int3   
 1014bfe:	int3   
 1014bff:	int3   
 1014c00:	jmp    QWORD PTR [rip+0xfffffffffffec67a]        # 0x1001280
 1014c06:	int3   
 1014c07:	int3   
 1014c08:	int3   
 1014c09:	int3   
 1014c0a:	int3   
 1014c0b:	int3   
 1014c0c:	jmp    QWORD PTR [rip+0xfffffffffffec726]        # 0x1001338
 1014c12:	int3   
 1014c13:	int3   
 1014c14:	int3   
 1014c15:	int3   
 1014c16:	int3   
 1014c17:	int3   
 1014c18:	int3   
 1014c19:	int3   
 1014c1a:	int3   
 1014c1b:	int3   
 1014c1c:	int3   
 1014c1d:	int3   
 1014c1e:	int3   
 1014c1f:	int3   
 1014c20:	int3   
 1014c21:	int3   
 1014c22:	int3   
 1014c23:	int3   
 1014c24:	int3   
 1014c25:	int3   
 1014c26:	rex push rbp
 1014c28:	sub    rsp,0x20
 1014c2c:	mov    rbp,rdx
 1014c2f:	mov    rax,QWORD PTR [rcx]
 1014c32:	mov    rdx,rcx
 1014c35:	mov    ecx,DWORD PTR [rax]
 1014c37:	call   0x101479e
 1014c3c:	nop
 1014c3d:	add    rsp,0x20
 1014c41:	pop    rbp
 1014c42:	ret    
 1014c43:	int3   
 1014c44:	int3   
 1014c45:	int3   
 1014c46:	int3   
 1014c47:	int3   
 1014c48:	int3   
 1014c49:	int3   
 1014c4a:	rex push rbp
 1014c4c:	sub    rsp,0x20
 1014c50:	mov    rbp,rdx
 1014c53:	mov    ecx,0x8
 1014c58:	call   0x101497e
 1014c5d:	nop
 1014c5e:	add    rsp,0x20
 1014c62:	pop    rbp
 1014c63:	ret    
 1014c64:	int3   
 1014c65:	int3   
 1014c66:	int3   
 1014c67:	int3   
 1014c68:	int3   
 1014c69:	int3   
 1014c6a:	int3   
 1014c6b:	int3   
 1014c6c:	int3   
 1014c6d:	int3   
 1014c6e:	int3   
 1014c6f:	int3   
 1014c70:	rex push rbp
 1014c72:	sub    rsp,0x20
 1014c76:	mov    rbp,rdx
 1014c79:	mov    rax,QWORD PTR [rcx]
 1014c7c:	xor    ecx,ecx
 1014c7e:	cmp    DWORD PTR [rax],0xc0000005
 1014c84:	sete   cl
 1014c87:	mov    eax,ecx
 1014c89:	mov    eax,ecx
 1014c8b:	add    rsp,0x20
 1014c8f:	pop    rbp
 1014c90:	ret    
 1014c91:	int3   
 1014c92:	int3   
 1014c93:	int3   
 1014c94:	int3   
 1014c95:	int3   
 1014c96:	int3   
 1014c97:	int3   
 1014c98:	int3   
 1014c99:	int3   
 1014c9a:	int3   
 1014c9b:	int3   
 1014c9c:	int3   
 1014c9d:	int3   
 1014c9e:	int3   
 1014c9f:	int3   
 1014ca0:	lea    rcx,[rdx+0x30]
 1014ca7:	jmp    0x10089b0
 1014cac:	int3   
 1014cad:	int3   
 1014cae:	int3   
 1014caf:	int3   
 1014cb0:	int3   
 1014cb1:	int3   
 1014cb2:	int3   
 1014cb3:	int3   
 1014cb4:	int3   
 1014cb5:	int3   
 1014cb6:	int3   
 1014cb7:	int3   
 1014cb8:	int3   
 1014cb9:	int3   
 1014cba:	int3   
 1014cbb:	int3   
 1014cbc:	int3   
 1014cbd:	int3   
 1014cbe:	int3   
 1014cbf:	int3   
 1014cc0:	rex push rbp
 1014cc2:	sub    rsp,0x30
 1014cc6:	lea    rbp,[rdx+0x30]
 1014cca:	mov    rax,QWORD PTR [rcx]
 1014ccd:	xor    ecx,ecx
 1014ccf:	cmp    DWORD PTR [rax],0xc00000fd
 1014cd5:	sete   cl
 1014cd8:	mov    eax,ecx
 1014cda:	mov    eax,ecx
 1014cdc:	add    rsp,0x30
 1014ce0:	pop    rbp
 1014ce1:	ret    
 1014ce2:	int3   
 1014ce3:	int3   
 1014ce4:	int3   
 1014ce5:	int3   
 1014ce6:	int3   
 1014ce7:	int3   
 1014ce8:	int3   
 1014ce9:	int3   
 1014cea:	int3   
 1014ceb:	int3   
 1014cec:	int3   
 1014ced:	int3   
 1014cee:	int3   
 1014cef:	int3   
 1014cf0:	lea    rcx,[rdx+0x78]
 1014cf7:	jmp    0x10089b0
 1014cfc:	int3   
 1014cfd:	int3   
 1014cfe:	int3   
 1014cff:	int3   
 1014d00:	int3   
 1014d01:	int3   
 1014d02:	int3   
 1014d03:	int3   
 1014d04:	int3   
 1014d05:	int3   
 1014d06:	int3   
 1014d07:	int3   
 1014d08:	int3   
 1014d09:	int3   
 1014d0a:	int3   
 1014d0b:	int3   
 1014d0c:	int3   
 1014d0d:	int3   
 1014d0e:	int3   
 1014d0f:	int3   
 1014d10:	lea    rcx,[rdx+0x30]
 1014d17:	jmp    0x10089b0
 1014d1c:	int3   
 1014d1d:	int3   
 1014d1e:	int3   
 1014d1f:	int3   
 1014d20:	int3   
 1014d21:	int3   
 1014d22:	int3   
 1014d23:	int3   
 1014d24:	int3   
 1014d25:	int3   
 1014d26:	int3   
 1014d27:	int3   
 1014d28:	int3   
 1014d29:	int3   
 1014d2a:	int3   
 1014d2b:	int3   
 1014d2c:	int3   
 1014d2d:	int3   
 1014d2e:	int3   
 1014d2f:	int3   
 1014d30:	lea    rcx,[rdx+0x30]
 1014d37:	jmp    0x10089b0
 1014d3c:	int3   
 1014d3d:	int3   
 1014d3e:	int3   
 1014d3f:	int3   
 1014d40:	int3   
 1014d41:	int3   
 1014d42:	int3   
 1014d43:	int3   
 1014d44:	int3   
 1014d45:	int3   
 1014d46:	int3   
 1014d47:	int3   
 1014d48:	int3   
 1014d49:	int3   
 1014d4a:	int3   
 1014d4b:	int3   
 1014d4c:	int3   
 1014d4d:	int3   
 1014d4e:	int3   
 1014d4f:	int3   
 1014d50:	lea    rcx,[rdx+0x30]
 1014d57:	jmp    0x10089b0
 1014d5c:	int3   
 1014d5d:	int3   
 1014d5e:	int3   
 1014d5f:	int3   
 1014d60:	int3   
 1014d61:	int3   
 1014d62:	int3   
 1014d63:	int3   
 1014d64:	int3   
 1014d65:	int3   
 1014d66:	int3   
 1014d67:	int3   
 1014d68:	int3   
 1014d69:	int3   
 1014d6a:	int3   
 1014d6b:	int3   
 1014d6c:	int3   
 1014d6d:	int3   
 1014d6e:	int3   
 1014d6f:	int3   
 1014d70:	lea    rcx,[rdx+0x30]
 1014d77:	jmp    0x10089b0
 1014d7c:	int3   
 1014d7d:	int3   
 1014d7e:	int3   
 1014d7f:	int3   
 1014d80:	int3   
 1014d81:	int3   
 1014d82:	int3   
 1014d83:	int3   
 1014d84:	int3   
 1014d85:	int3   
 1014d86:	int3   
 1014d87:	int3   
 1014d88:	int3   
 1014d89:	int3   
 1014d8a:	int3   
 1014d8b:	int3   
 1014d8c:	int3   
 1014d8d:	int3   
 1014d8e:	int3   
 1014d8f:	int3   
 1014d90:	lea    rcx,[rdx+0x50]
 1014d97:	jmp    0x10089b0
 1014d9c:	int3   
 1014d9d:	int3   
 1014d9e:	int3   
 1014d9f:	int3   
 1014da0:	int3   
 1014da1:	int3   
 1014da2:	int3   
 1014da3:	int3   
 1014da4:	int3   
 1014da5:	int3   
 1014da6:	int3   
 1014da7:	int3   
 1014da8:	int3   
 1014da9:	int3   
 1014daa:	int3   
 1014dab:	int3   
 1014dac:	int3   
 1014dad:	int3   
 1014dae:	int3   
 1014daf:	int3   
 1014db0:	lea    rcx,[rdx+0x50]
 1014db7:	jmp    0x10089b0
 1014dbc:	int3   
 1014dbd:	int3   
 1014dbe:	int3   
 1014dbf:	int3   
 1014dc0:	int3   
 1014dc1:	int3   
 1014dc2:	int3   
 1014dc3:	int3   
 1014dc4:	int3   
 1014dc5:	int3   
 1014dc6:	int3   
 1014dc7:	int3   
 1014dc8:	int3   
 1014dc9:	int3   
 1014dca:	int3   
 1014dcb:	int3   
 1014dcc:	int3   
 1014dcd:	int3   
 1014dce:	int3   
 1014dcf:	int3   
 1014dd0:	lea    rcx,[rdx+0xb0]
 1014dd7:	jmp    0x10089b0
 1014ddc:	int3   
 1014ddd:	int3   
 1014dde:	int3   
 1014ddf:	int3   
 1014de0:	add    DWORD PTR [rcx+rax*1],eax
 1014de3:	add    BYTE PTR [rdx+riz*2],al
 1014de6:	add    BYTE PTR [rax],al
 1014de8:	add    DWORD PTR [rsi],eax
 1014dea:	add    al,BYTE PTR [rax]
 1014dec:	(bad)  
 1014ded:	xor    al,BYTE PTR [rdx]
 1014def:	push   rax
 1014df0:	or     DWORD PTR [rdx],ecx
 1014df2:	add    al,0x0
 1014df4:	or     dh,BYTE PTR [rsi+rax*1]
 1014df7:	add    BYTE PTR [rdx],cl
 1014df9:	xor    al,BYTE PTR [rsi]
 1014dfb:	jo     0x1014d8f
 1014dfd:	rex.RXB add DWORD PTR [r8],r8d
 1014e00:	add    DWORD PTR [rax],eax
 1014e02:	add    BYTE PTR [rax],al
 1014e04:	(bad)  
 1014e05:	add    DWORD PTR [r8],eax
 1014e08:	adc    al,0x43
 1014e0a:	add    DWORD PTR [rax],eax
 1014e0c:	add    QWORD PTR es:[rax],r8
 1014e10:	adc    al,0x43
 1014e12:	add    DWORD PTR [rax],eax
 1014e14:	add    DWORD PTR [rcx+rax*1],eax
 1014e17:	add    BYTE PTR [rdx+rax*2],al
 1014e1a:	add    BYTE PTR [rax],al
 1014e1c:	add    DWORD PTR [rcx+rax*1],eax
 1014e1f:	add    BYTE PTR [rdx+rax*2],al
 1014e22:	add    BYTE PTR [rax],al
 1014e24:	add    BYTE PTR [rax],al
 1014e26:	add    BYTE PTR [rax],al
 1014e28:	add    DWORD PTR [rax],eax
 1014e2a:	add    BYTE PTR [rax],al
 1014e2c:	add    DWORD PTR [rdx+rax*1],ecx
 1014e2f:	add    BYTE PTR [rcx+rax*1],cl
 1014e32:	adc    DWORD PTR [rax],eax
 1014e34:	add    DWORD PTR [rsi],eax
 1014e36:	add    al,BYTE PTR [rax]
 1014e38:	(bad)  
 1014e39:	xor    al,BYTE PTR [rdx]
 1014e3b:	push   rax
 1014e3c:	adc    DWORD PTR [rsi],eax
 1014e3e:	add    al,BYTE PTR [rax]
 1014e40:	(bad)  
 1014e41:	xor    al,BYTE PTR [rdx]
 1014e43:	xor    BYTE PTR [rdx+0x1000147],dl
 1014e49:	add    BYTE PTR [rax],al
 1014e4b:	add    bh,bh
 1014e4d:	add    DWORD PTR [r8],r8d
 1014e50:	rex.RX add DWORD PTR gs:[rax],r8d
 1014e54:	rex.WX
 1014e55:	add    QWORD PTR [rax],r8
 1014e58:	add    BYTE PTR [rax],al
 1014e5a:	add    BYTE PTR [rax],al
 1014e5c:	add    DWORD PTR [rcx+rax*1],eax
 1014e5f:	add    BYTE PTR [rdx+rax*2],al
 1014e62:	add    BYTE PTR [rax],al
 1014e64:	add    DWORD PTR [rcx+rax*1],eax
 1014e67:	add    BYTE PTR [rdx+rax*2],al
 1014e6a:	add    BYTE PTR [rax],al
 1014e6c:	add    DWORD PTR [rcx+rax*1],eax
 1014e6f:	add    BYTE PTR [rdx+rax*2],al
 1014e72:	add    BYTE PTR [rax],al
 1014e74:	add    DWORD PTR [rdx],ecx
 1014e76:	add    al,0x0
 1014e78:	or     dh,BYTE PTR [rsi+rax*1]
 1014e7b:	add    BYTE PTR [rdx],cl
 1014e7d:	xor    al,BYTE PTR [rsi]
 1014e7f:	jo     0x1014e82
 1014e81:	or     al,BYTE PTR [rax+rax*1]
 1014e84:	or     dh,BYTE PTR [rsi+rax*1]
 1014e87:	add    BYTE PTR [rdx],cl
 1014e89:	xor    al,BYTE PTR [rsi]
 1014e8b:	jo     0x1014e8e
 1014e8d:	(bad)  
 1014e8e:	add    al,BYTE PTR [rax]
 1014e90:	(bad)  
 1014e91:	xor    al,BYTE PTR [rdx]
 1014e93:	push   rax
 1014e94:	or     DWORD PTR [rcx+rax*1],eax
 1014e97:	add    BYTE PTR [rdx+rax*2],al
 1014e9a:	add    BYTE PTR [rax],al
 1014e9c:	xchg   edx,eax
 1014e9d:	rex.RXB add DWORD PTR [r8],r8d
 1014ea0:	add    DWORD PTR [rax],eax
 1014ea2:	add    BYTE PTR [rax],al
 1014ea4:	rex.RXB
 1014ea5:	add    QWORD PTR [rax],rax
 1014ea8:	jp     0x1014ef2
 1014eaa:	add    DWORD PTR [rax],eax
 1014eac:	jo     0x1014efa
 1014eae:	add    DWORD PTR [rax],eax
 1014eb0:	jp     0x1014efa
 1014eb2:	add    DWORD PTR [rax],eax
 1014eb4:	add    DWORD PTR [rdx],ecx
 1014eb6:	add    al,0x0
 1014eb8:	or     dh,BYTE PTR [rax+rcx*1]
 1014ebb:	add    BYTE PTR [rdx],cl
 1014ebd:	xor    al,BYTE PTR [rsi]
 1014ebf:	jo     0x1014ec2
 1014ec1:	clts   
 1014ec3:	add    BYTE PTR [rdi],cl
 1014ec5:	fs (bad) 
 1014ec7:	add    BYTE PTR [rdi],cl
 1014ec9:	xor    al,0x6
 1014ecb:	add    BYTE PTR [rdi],cl
 1014ecd:	xor    cl,BYTE PTR [rbx]
 1014ecf:	jo     0x1014ed2
 1014ed1:	add    al,0x1
 1014ed3:	add    BYTE PTR [rdx+rax*4],al
 1014ed6:	add    BYTE PTR [rax],al
 1014ed8:	and    DWORD PTR [rip+0x34050002],eax        # 0x35064ee0
 1014ede:	or     BYTE PTR [rax],al
 1014ee0:	nop
 1014ee1:	mov    BYTE PTR [rax],0x0
 1014ee4:	mov    edx,0xd00000c6
 1014ee9:	rex.WRX add QWORD PTR [rax],r8
 1014eec:	and    DWORD PTR [rax],eax
 1014eee:	add    al,BYTE PTR [rax]
 1014ef0:	add    BYTE PTR [rax+rcx*1],dh
 1014ef3:	add    BYTE PTR [rax-0x45ffff3a],dl
 1014ef9:	mov    BYTE PTR [rax],0x0
 1014efc:	ror    BYTE PTR [rsi+0x1],1
 1014eff:	add    BYTE PTR [rcx],ah
 1014f01:	add    BYTE PTR [rax],al
 1014f03:	add    BYTE PTR [rax-0x45ffff3a],dl
 1014f09:	mov    BYTE PTR [rax],0x0
 1014f0c:	ror    BYTE PTR [rsi+0x1],1
 1014f0f:	add    BYTE PTR [rcx],al
 1014f11:	add    eax,0x34050002
 1014f16:	add    DWORD PTR [rax],eax
 1014f18:	sbb    DWORD PTR [rbx],ebx
 1014f1a:	add    eax,DWORD PTR [rax]
 1014f1c:	or     DWORD PTR [rcx],eax
 1014f1e:	sub    al,0x0
 1014f20:	add    dh,BYTE PTR [rax]
 1014f22:	add    BYTE PTR [rax],al
 1014f24:	xor    al,0x4a
 1014f26:	add    DWORD PTR [rax],eax
 1014f28:	push   rax
 1014f29:	add    DWORD PTR [rax],eax
 1014f2b:	add    BYTE PTR [rcx],bl
 1014f2d:	sbb    DWORD PTR [rdx],eax
 1014f2f:	add    BYTE PTR [rdi],al
 1014f31:	add    DWORD PTR [rcx],ebp
 1014f33:	add    BYTE PTR [rdx+rcx*2],dh
 1014f36:	add    DWORD PTR [rax],eax
 1014f38:	xor    BYTE PTR [rcx],al
 1014f3a:	add    BYTE PTR [rax],al
 1014f3c:	sbb    DWORD PTR [rdi],ebx
 1014f3e:	add    eax,0x2b340d00
 1014f43:	add    BYTE PTR [rip+0x6002801],cl        # 0x701774a
 1014f49:	jo     0x1014f4b
 1014f4b:	add    BYTE PTR [rdx+rcx*2],dh
 1014f4e:	add    DWORD PTR [rax],eax
 1014f50:	xor    BYTE PTR [rcx],al
 1014f52:	add    BYTE PTR [rax],al
 1014f54:	sbb    DWORD PTR [rbx],ebx
 1014f56:	add    eax,DWORD PTR [rax]
 1014f58:	or     DWORD PTR [rcx],eax
 1014f5a:	rex.RX add BYTE PTR [rdx],r8b
 1014f5d:	xor    BYTE PTR [rax],al
 1014f5f:	add    BYTE PTR [rdx+rcx*2],dh
 1014f62:	add    DWORD PTR [rax],eax
 1014f64:	and    BYTE PTR [rdx],al
 1014f66:	add    BYTE PTR [rax],al
 1014f68:	add    DWORD PTR [rdi],ecx
 1014f6a:	(bad)  
 1014f6b:	add    BYTE PTR [rdi],cl
 1014f6d:	or     BYTE PTR fs:[rax],al
 1014f70:	sysenter 
 1014f72:	(bad)  
 1014f73:	add    BYTE PTR [rdi],cl
 1014f75:	xor    cl,BYTE PTR [rbx]
 1014f77:	jo     0x1014f7a
 1014f79:	clts   
 1014f7b:	add    BYTE PTR [rdi],cl
 1014f7d:	or     BYTE PTR fs:[rax],al
 1014f80:	sysenter 
 1014f82:	(bad)  
 1014f83:	add    BYTE PTR [rdi],cl
 1014f85:	xor    cl,BYTE PTR [rbx]
 1014f87:	jo     0x1014fa2
 1014f89:	(bad)  
 1014f8a:	add    eax,0x2c340d00
 1014f8f:	add    BYTE PTR [rip+0x6002801],cl        # 0x7017796
 1014f95:	jo     0x1014f97
 1014f97:	add    BYTE PTR [rdx+rcx*2],dh
 1014f9a:	add    DWORD PTR [rax],eax
 1014f9c:	xor    BYTE PTR [rcx],al
 1014f9e:	add    BYTE PTR [rax],al
 1014fa0:	add    DWORD PTR [rdx],ecx
 1014fa2:	add    al,0x0
 1014fa4:	or     dh,BYTE PTR [rsi+rax*1]
 1014fa7:	add    BYTE PTR [rdx],cl
 1014fa9:	xor    al,BYTE PTR [rsi]
 1014fab:	jo     0x1014fc6
 1014fad:	es add eax,0x69341500
 1014fb3:	add    BYTE PTR [rip+0x6006601],dl        # 0x701b5ba
 1014fb9:	push   rax
 1014fba:	add    BYTE PTR [rax],al
 1014fbc:	xor    al,0x4a
 1014fbe:	add    DWORD PTR [rax],eax
 1014fc0:	and    BYTE PTR [rbx],al
 1014fc2:	add    BYTE PTR [rax],al
 1014fc4:	sbb    DWORD PTR [rcx],ebx
 1014fc6:	add    al,BYTE PTR [rax]
 1014fc8:	(bad)  
 1014fc9:	add    DWORD PTR [rcx+0x0],ecx
 1014fcc:	xor    al,0x4a
 1014fce:	add    DWORD PTR [rax],eax
 1014fd0:	xor    BYTE PTR [rdx],al
 1014fd2:	add    BYTE PTR [rax],al
 1014fd4:	and    DWORD PTR [rax],ecx
 1014fd6:	add    al,BYTE PTR [rax]
 1014fd8:	or     BYTE PTR [rax+rcx*2],dh
 1014fdb:	add    al,dh
 1014fdd:	mov    bh,0x0
 1014fdf:	add    BYTE PTR [rdi],ah
 1014fe1:	mov    eax,0x4fc40000
 1014fe6:	add    DWORD PTR [rax],eax
 1014fe8:	and    DWORD PTR [rax],eax
 1014fea:	add    BYTE PTR [rax],al
 1014fec:	lock mov bh,0x0
 1014fef:	add    BYTE PTR [rdi],ah
 1014ff1:	mov    eax,0x4fc40000
 1014ff6:	add    DWORD PTR [rax],eax
 1014ff8:	sbb    DWORD PTR [rcx],ebx
 1014ffa:	add    al,BYTE PTR [rax]
 1014ffc:	(bad)  
 1014ffd:	add    DWORD PTR [rcx+0x0],ecx
 1015000:	xor    al,0x4a
 1015002:	add    DWORD PTR [rax],eax
 1015004:	xor    BYTE PTR [rdx],al
 1015006:	add    BYTE PTR [rax],al
 1015008:	and    DWORD PTR [rax],ecx
 101500a:	add    al,BYTE PTR [rax]
 101500c:	or     BYTE PTR [rax+rcx*2],dh
 101500f:	add    al,ah
 1015011:	mov    ch,0x0
 1015013:	add    BYTE PTR [rdi],dl
 1015015:	mov    dh,0x0
 1015017:	add    al,bh
 1015019:	rex.WRXB add QWORD PTR [r8],r8
 101501c:	and    DWORD PTR [rax],eax
 101501e:	add    BYTE PTR [rax],al
 1015020:	loopne 0x1014fd7
 1015022:	add    BYTE PTR [rax],al
 1015024:	(bad)  
 1015025:	mov    dh,0x0
 1015027:	add    al,bh
 1015029:	rex.WRXB add QWORD PTR [r8],r8
 101502c:	sbb    DWORD PTR [rip+0x342c000b],edi        # 0x352d503d
 1015032:	js     0x1015034
 1015034:	sbb    eax,DWORD PTR [rcx]
 1015036:	outs   dx,BYTE PTR ds:[rsi]
 1015037:	add    BYTE PTR [rax+rsi*8],cl
 101503a:	or     ah,al
 101503c:	or     al,dl
 101503e:	(bad)  
 101503f:	rol    BYTE PTR [rax+rsi*2],0x3
 1015043:	(bad)  
 1015044:	add    dl,BYTE PTR [rax+0x0]
 1015047:	add    BYTE PTR [rax+0x4a],bl
 101504a:	add    DWORD PTR [rax],eax
 101504c:	(bad)  
 101504d:	xchg   DWORD PTR [rax],eax
 101504f:	add    BYTE PTR [rdx+0x3],ah
 1015052:	add    BYTE PTR [rax],al
 1015054:	(bad)  
 1015055:	(bad)  
 1015056:	(bad)  
 1015057:	jmp    QWORD PTR [rax-0x6ffffeb4]
 101505d:	lea    eax,[rax]
 101505f:	add    bh,bh
 1015061:	(bad)  
 1015062:	(bad)  
 1015063:	(bad)  
 1015064:	fmul   QWORD PTR [rbp+0x0]
 101506a:	add    BYTE PTR [rax],al
 101506c:	or     cl,BYTE PTR [rdi-0x10000]
 1015072:	(bad)  
 1015073:	inc    DWORD PTR [rdx-0x71]
 1015076:	add    BYTE PTR [rax],al
 1015078:	add    BYTE PTR [rax],al
 101507a:	add    BYTE PTR [rax],al
 101507c:	test   DWORD PTR [rdi-0x10000],ecx
 1015082:	(bad)  
 1015083:	(bad)  
 1015084:	mov    ebp,0x8f
 1015089:	add    BYTE PTR [rax],al
 101508b:	add    ch,dl
 101508d:	pop    QWORD PTR [rax]
 101508f:	add    bh,bh
 1015091:	(bad)  
 1015092:	(bad)  
 1015093:	call   rdi
 1015095:	pop    QWORD PTR [rax]
 1015097:	add    BYTE PTR [rax],al
 1015099:	add    BYTE PTR [rax],al
 101509b:	add    BYTE PTR [rbp-0x70],bh
 101509e:	add    BYTE PTR [rax],al
 10150a0:	(bad)  
 10150a1:	(bad)  
 10150a2:	(bad)  
 10150a3:	inc    DWORD PTR [rdx+0x90]
 10150a9:	add    BYTE PTR [rax],al
 10150ab:	add    bl,cl
 10150ad:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10150ae:	add    BYTE PTR [rax],al
 10150b0:	(bad)  
 10150b1:	(bad)  
 10150b2:	(bad)  
 10150b3:	call   rax
 10150b5:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10150b6:	add    BYTE PTR [rax],al
 10150b8:	add    BYTE PTR [rax],al
 10150ba:	add    BYTE PTR [rax],al
 10150bc:	adc    BYTE PTR [rdi-0x10000],ah
 10150c2:	(bad)  
 10150c3:	call   QWORD PTR [rip+0xa7]        # 0x1015170
 10150c9:	add    BYTE PTR [rax],al
 10150cb:	add    BYTE PTR [rcx-0xffff59],ah
 10150d1:	(bad)  
 10150d2:	(bad)  
 10150d3:	jmp    QWORD PTR [rsi+0xa7]
 10150d9:	add    BYTE PTR [rax],al
 10150db:	add    BYTE PTR [rax],dh
 10150dd:	test   al,0x0
 10150df:	add    bh,bh
 10150e1:	(bad)  
 10150e2:	(bad)  
 10150e3:	push   QWORD PTR [rip+0xa8]        # 0x1015191
 10150e9:	add    BYTE PTR [rax],al
 10150eb:	add    cl,al
 10150ed:	test   al,0x0
 10150ef:	add    bh,bh
 10150f1:	(bad)  
 10150f2:	(bad)  
 10150f3:	inc    esi
 10150f5:	test   al,0x0
 10150f7:	add    BYTE PTR [rax],al
 10150f9:	add    BYTE PTR [rax],al
 10150fb:	add    BYTE PTR [rax-0x57],dl
 10150fe:	add    BYTE PTR [rax],al
 1015100:	(bad)  
 1015101:	(bad)  
 1015102:	(bad)  
 1015103:	call   QWORD PTR [rbp-0x57]
 1015106:	add    BYTE PTR [rax],al
 1015108:	add    BYTE PTR [rax],al
 101510a:	add    BYTE PTR [rax],al
 101510c:	stc    
 101510d:	test   eax,0xffff0000
 1015112:	(bad)  
 1015113:	(bad)  
 1015114:	(bad)  
 1015115:	test   eax,0x0
 101511a:	add    BYTE PTR [rax],al
 101511c:	movabs ds:0xa7ffffffff0000aa,al
 1015125:	stos   BYTE PTR es:[rdi],al
 1015126:	add    BYTE PTR [rax],al
 1015128:	add    BYTE PTR [rax],al
 101512a:	add    BYTE PTR [rax],al
 101512c:	rex.WXB stos QWORD PTR es:[rdi],rax
 101512e:	add    BYTE PTR [rax],al
 1015130:	(bad)  
 1015131:	(bad)  
 1015132:	(bad)  
 1015133:	call   QWORD PTR [rax-0x55]
 1015136:	add    BYTE PTR [rax],al
 1015138:	add    BYTE PTR [rax],al
 101513a:	add    BYTE PTR [rax],al
 101513c:	hlt    
 101513d:	stos   DWORD PTR es:[rdi],eax
 101513e:	add    BYTE PTR [rax],al
 1015140:	(bad)  
 1015141:	(bad)  
 1015142:	(bad)  
 1015143:	jmp    QWORD PTR [rsi]
 1015145:	lods   al,BYTE PTR ds:[rsi]
 1015146:	add    BYTE PTR [rax],al
 1015148:	add    BYTE PTR [rax],al
 101514a:	add    BYTE PTR [rax],al
 101514c:	xchg   edx,eax
 101514d:	lods   al,BYTE PTR ds:[rsi]
 101514e:	add    BYTE PTR [rax],al
 1015150:	(bad)  
 1015151:	(bad)  
 1015152:	(bad)  
 1015153:	jmp    QWORD PTR [rsi+0xac]
 1015159:	add    BYTE PTR [rax],al
 101515b:	add    dh,dl
 101515d:	lods   al,BYTE PTR ds:[rsi]
 101515e:	add    BYTE PTR [rax],al
 1015160:	(bad)  
 1015161:	(bad)  
 1015162:	(bad)  
 1015163:	(bad)  
 1015164:	fld    TBYTE PTR [rax+rax*1+0x0]
 101516b:	add    BYTE PTR [rbx],cl
 101516d:	lods   eax,DWORD PTR ds:[rsi]
 101516e:	add    BYTE PTR [rax],al
 1015170:	(bad)  
 1015171:	(bad)  
 1015172:	(bad)  
 1015173:	call   QWORD PTR [rax]
 1015175:	lods   eax,DWORD PTR ds:[rsi]
 1015176:	add    BYTE PTR [rax],al
 1015178:	add    BYTE PTR [rax],al
 101517a:	add    BYTE PTR [rax],al
 101517c:	rex lods eax,DWORD PTR ds:[rsi]
 101517e:	add    BYTE PTR [rax],al
 1015180:	(bad)  
 1015181:	(bad)  
 1015182:	(bad)  
 1015183:	inc    DWORD PTR [rbp-0x53]
 1015186:	add    BYTE PTR [rax],al
 1015188:	add    BYTE PTR [rax],al
 101518a:	add    BYTE PTR [rax],al
 101518c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101518d:	lods   eax,DWORD PTR ds:[rsi]
 101518e:	add    BYTE PTR [rax],al
 1015190:	(bad)  
 1015191:	(bad)  
 1015192:	(bad)  
 1015193:	jmp    FWORD PTR [rcx+0xad]
 1015199:	add    BYTE PTR [rax],al
 101519b:	add    cl,bl
 101519d:	lods   eax,DWORD PTR ds:[rsi]
 101519e:	add    BYTE PTR [rax],al
 10151a0:	(bad)  
 10151a1:	(bad)  
 10151a2:	(bad)  
 10151a3:	(bad)  
 10151a4:	fisubr WORD PTR [rbp+0x0]
 10151aa:	add    BYTE PTR [rax],al
 10151ac:	(bad)  
 10151ad:	scas   al,BYTE PTR es:[rdi]
 10151ae:	add    BYTE PTR [rax],al
 10151b0:	(bad)  
 10151b1:	(bad)  
 10151b2:	(bad)  
 10151b3:	call   QWORD PTR [rbx]
 10151b5:	scas   al,BYTE PTR es:[rdi]
 10151b6:	add    BYTE PTR [rax],al
 10151b8:	add    BYTE PTR [rax],al
 10151ba:	add    BYTE PTR [rax],al
 10151bc:	rex.XB scas al,BYTE PTR es:[rdi]
 10151be:	add    BYTE PTR [rax],al
 10151c0:	(bad)  
 10151c1:	(bad)  
 10151c2:	(bad)  
 10151c3:	dec    DWORD PTR [rax-0x52]
 10151c6:	add    BYTE PTR [rax],al
 10151c8:	add    BYTE PTR [rax],al
 10151ca:	add    BYTE PTR [rax],al
 10151cc:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10151cd:	scas   al,BYTE PTR es:[rdi]
 10151ce:	add    BYTE PTR [rax],al
 10151d0:	(bad)  
 10151d1:	(bad)  
 10151d2:	(bad)  
 10151d3:	jmp    FWORD PTR [rsi+rbp*4+0x0]
 10151da:	add    BYTE PTR [rax],al
 10151dc:	in     al,dx
 10151dd:	scas   al,BYTE PTR es:[rdi]
 10151de:	add    BYTE PTR [rax],al
 10151e0:	(bad)  
 10151e1:	(bad)  
 10151e2:	(bad)  
 10151e3:	push   rcx
 10151e5:	scas   al,BYTE PTR es:[rdi]
 10151e6:	add    BYTE PTR [rax],al
 10151e8:	add    BYTE PTR [rax],al
 10151ea:	add    BYTE PTR [rax],al
 10151ec:	gs scas eax,DWORD PTR es:[rdi]
 10151ee:	add    BYTE PTR [rax],al
 10151f0:	(bad)  
 10151f1:	(bad)  
 10151f2:	(bad)  
 10151f3:	jmp    FWORD PTR [rdx-0x51]
 10151f6:	add    BYTE PTR [rax],al
 10151f8:	add    BYTE PTR [rax],al
 10151fa:	add    BYTE PTR [rax],al
 10151fc:	stos   BYTE PTR es:[rdi],al
 10151fd:	scas   eax,DWORD PTR es:[rdi]
 10151fe:	add    BYTE PTR [rax],al
 1015200:	(bad)  
 1015201:	(bad)  
 1015202:	(bad)  
 1015203:	jmp    FWORD PTR [rdi+0xaf]
 1015209:	add    BYTE PTR [rax],al
 101520b:	add    bh,ch
 101520d:	scas   eax,DWORD PTR es:[rdi]
 101520e:	add    BYTE PTR [rax],al
 1015210:	(bad)  
 1015211:	(bad)  
 1015212:	(bad)  
 1015213:	push   rsp
 1015215:	scas   eax,DWORD PTR es:[rdi]
 1015216:	add    BYTE PTR [rax],al
 1015218:	add    BYTE PTR [rax],al
 101521a:	add    BYTE PTR [rax],al
 101521c:	xor    al,0xb0
 101521e:	add    BYTE PTR [rax],al
 1015220:	(bad)  
 1015221:	(bad)  
 1015222:	(bad)  
 1015223:	(bad)  
 1015224:	cmp    DWORD PTR [rax+0x0],esi
 101522a:	add    BYTE PTR [rax],al
 101522c:	jg     0x10151de
 101522e:	add    BYTE PTR [rax],al
 1015230:	(bad)  
 1015231:	(bad)  
 1015232:	(bad)  
 1015233:	inc    DWORD PTR [rax+rsi*4+0x0]
 101523a:	add    BYTE PTR [rax],al
 101523c:	or     al,0xb1
 101523e:	add    BYTE PTR [rax],al
 1015240:	(bad)  
 1015241:	(bad)  
 1015242:	(bad)  
 1015243:	call   QWORD PTR [rcx]
 1015245:	mov    cl,0x0
 1015247:	add    BYTE PTR [rax],al
 1015249:	add    BYTE PTR [rax],al
 101524b:	add    BYTE PTR [rbp-0xffff4e],ch
 1015251:	(bad)  
 1015252:	(bad)  
 1015253:	push   QWORD PTR [rdx+0xb2]
 1015259:	add    BYTE PTR [rax],al
 101525b:	add    BYTE PTR [rcx-0xffff4d],dl
 1015261:	(bad)  
 1015262:	(bad)  
 1015263:	call   QWORD PTR [rsi+0xb3]
 1015269:	add    BYTE PTR [rax],al
 101526b:	add    bh,al
 101526d:	mov    bl,0x0
 101526f:	add    bh,bh
 1015271:	(bad)  
 1015272:	(bad)  
 1015273:	dec    esp
 1015275:	mov    bl,0x0
 1015277:	add    BYTE PTR [rax],al
 1015279:	add    BYTE PTR [rax],al
 101527b:	add    BYTE PTR [rcx-0xffff4c],bl
 1015281:	(bad)  
 1015282:	(bad)  
 1015283:	push   rsp
 1015285:	mov    ah,0x0
 1015287:	add    BYTE PTR [rax],al
 1015289:	add    BYTE PTR [rax],al
 101528b:	add    BYTE PTR [rcx],bl
 101528d:	sub    eax,0xc41f350d
 1015292:	adc    eax,0x14741b00
 1015297:	add    BYTE PTR [rdi],dl
 1015299:	adc    eax,DWORD PTR fs:[rax]
 101529c:	adc    esi,DWORD PTR [rdx+rdx*1]
 101529f:	add    BYTE PTR [rdi],cl
 10152a1:	xor    ecx,DWORD PTR [rdx]
 10152a3:	rol    BYTE PTR [rsi],cl
 10152a5:	lock add al,0xe0
 10152a8:	add    dl,BYTE PTR [rax+0x0]
 10152ab:	add    al,dh
 10152ad:	rex.WX add QWORD PTR [rax],rax
 10152b0:	add    DWORD PTR [rax],eax
 10152b2:	add    BYTE PTR [rax],al
 10152b4:	(bad)  
 10152b5:	mov    eax,DWORD PTR [rax]
 10152b7:	add    BYTE PTR [rax-0x74],cl
 10152ba:	add    BYTE PTR [rax],al
 10152bc:	ror    BYTE PTR [rcx+rax*1+0x0],0x23
 10152c1:	lea    eax,[rax]
 10152c3:	add    BYTE PTR [rcx+0x0],ch
 10152c6:	add    BYTE PTR [rax],al
 10152c8:	add    DWORD PTR [rsi],eax
 10152ca:	add    al,BYTE PTR [rax]
 10152cc:	(bad)  
 10152cd:	push   rdx
 10152ce:	add    dl,BYTE PTR [rax+0x1]
 10152d1:	adc    BYTE PTR [rbx],al
 10152d3:	add    BYTE PTR [rax],dl
 10152d5:	rex.X or al,0x70
 10152d8:	or     esp,DWORD PTR [rax+0x0]
 10152db:	add    BYTE PTR [rcx],ah
 10152dd:	add    eax,0x34050002
 10152e2:	add    al,0x0
 10152e4:	or     BYTE PTR [rdx-0x75520000],0x0
 10152eb:	add    al,dl
 10152ed:	push   rdx
 10152ee:	add    DWORD PTR [rax],eax
 10152f0:	and    DWORD PTR [rax],eax
 10152f2:	add    al,BYTE PTR [rax]
 10152f4:	add    BYTE PTR [rsp+rax*1],dh
 10152f7:	add    BYTE PTR [rax-0x51ffff76],al
 10152fd:	mov    al,BYTE PTR [rax]
 10152ff:	add    al,dl
 1015301:	push   rdx
 1015302:	add    DWORD PTR [rax],eax
 1015304:	and    DWORD PTR [rax],eax
 1015306:	add    BYTE PTR [rax],al
 1015308:	or     BYTE PTR [rdx-0x75520000],0x0
 101530f:	add    al,dl
 1015311:	push   rdx
 1015312:	add    DWORD PTR [rax],eax
 1015314:	add    DWORD PTR [rcx+rax*1],eax
 1015317:	add    BYTE PTR [rdx+rax*2],al
 101531a:	add    BYTE PTR [rax],al
 101531c:	sbb    DWORD PTR [rdx],esi
 101531e:	or     BYTE PTR [rax],al
 1015320:	sbb    BYTE PTR [rcx],al
 1015322:	mov    eax,DWORD PTR [rax]
 1015324:	or     eax,esi
 1015326:	(bad)  
 1015327:	loopne 0x101532e
 1015329:	jo     0x101532f
 101532b:	(bad)  
 101532c:	add    esi,DWORD PTR [rax]
 101532e:	add    dl,BYTE PTR [rax+0x58]
 1015331:	rex.WX add QWORD PTR [rax],rax
 1015334:	nop
 1015335:	xchg   DWORD PTR [rax],eax
 1015337:	add    BYTE PTR [rdx+0x4],al
 101533a:	add    BYTE PTR [rax],al
 101533c:	(bad)  
 101533d:	(bad)  
 101533e:	(bad)  
 101533f:	push   QWORD PTR [rax+0x4d]
 1015342:	add    DWORD PTR [rax],eax
 1015344:	and    bh,ah
 1015346:	add    BYTE PTR [rax],al
 1015348:	(bad)  
 1015349:	(bad)  
 101534a:	(bad)  
 101534b:	jmp    FWORD PTR [rax-0x19]
 101534e:	add    BYTE PTR [rax],al
 1015350:	add    BYTE PTR [rax],al
 1015352:	add    BYTE PTR [rax],al
 1015354:	movsxd ebp,ecx
 1015356:	add    BYTE PTR [rax],al
 1015358:	(bad)  
 1015359:	(bad)  
 101535a:	(bad)  
 101535b:	call   FWORD PTR [rax+0xe9]
 1015361:	add    BYTE PTR [rax],al
 1015363:	add    dl,ah
 1015365:	jmp    0x100536a
 101536a:	(bad)  
 101536b:	call   FWORD PTR [rcx]
 101536d:	or     al,BYTE PTR ss:[rax]
 1015370:	sbb    al,0x1
 1015372:	xor    eax,DWORD PTR [rax]
 1015374:	or     eax,0x9e00bf0
 1015379:	rol    BYTE PTR [rdi],1
 101537b:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x46157f2
 1015382:	add    dl,BYTE PTR [rax+0x58]
 1015385:	rex.WX add QWORD PTR [rax],rax
 1015388:	rol    BYTE PTR [rdi+0x1820000],0x0
 101538f:	add    bh,bh
 1015391:	(bad)  
 1015392:	(bad)  
 1015393:	call   QWORD PTR [rax+0x4d]
 1015396:	add    DWORD PTR [rax],eax
 1015398:	rex loop 0x101539b
 101539b:	add    bh,bh
 101539d:	(bad)  
 101539e:	(bad)  
 101539f:	call   FWORD PTR [rsi+0xe2]
 10153a5:	add    BYTE PTR [rax],al
 10153a7:	add    BYTE PTR [rbx-0xffff1d],ah
 10153ad:	(bad)  
 10153ae:	(bad)  
 10153af:	(bad)  
 10153b0:	fsub   st,st(3)
 10153b2:	add    BYTE PTR [rax],al
 10153b4:	add    BYTE PTR [rax],al
 10153b6:	add    BYTE PTR [rax],al
 10153b8:	mov    esi,0xff0000e4
 10153bd:	(bad)  
 10153be:	(bad)  
 10153bf:	inc    ebx
 10153c1:	in     al,0x0
 10153c3:	add    BYTE PTR [rax],al
 10153c5:	add    BYTE PTR [rax],al
 10153c7:	add    BYTE PTR [rsi],al
 10153c9:	in     eax,0x0
 10153cb:	add    bh,bh
 10153cd:	(bad)  
 10153ce:	(bad)  
 10153cf:	dec    DWORD PTR [rbx]
 10153d1:	in     eax,0x0
 10153d3:	add    BYTE PTR [rax],al
 10153d5:	add    BYTE PTR [rax],al
 10153d7:	add    cl,ah
 10153d9:	in     eax,0x0
 10153db:	add    bh,bh
 10153dd:	(bad)  
 10153de:	(bad)  
 10153df:	call   FWORD PTR [rcx]
 10153e1:	(bad)  
 10153e2:	(bad)  
 10153e3:	add    BYTE PTR [rcx+rax*1],cl
 10153e6:	rex.WXB add BYTE PTR [rip+0x3600470],al        # 0x461585d
 10153ed:	push   rax
 10153ee:	add    dh,BYTE PTR [rax]
 10153f0:	pop    rax
 10153f1:	rex.WX add QWORD PTR [rax],rax
 10153f4:	lock xchg DWORD PTR [rax],eax
 10153f7:	add    BYTE PTR [rdx+0x2],al
 10153fa:	add    BYTE PTR [rax],al
 10153fc:	(bad)  
 10153fd:	(bad)  
 10153fe:	(bad)  
 10153ff:	push   QWORD PTR [rax]
 1015401:	add    QWORD PTR [r8],r8
 1015404:	rcr    bl,0x0
 1015407:	add    bh,bh
 1015409:	(bad)  
 101540a:	(bad)  
 101540b:	(bad)  
 101540c:	cld    
 101540d:	fild   DWORD PTR [rax]
 101540f:	add    BYTE PTR [rax],al
 1015411:	add    BYTE PTR [rax],al
 1015413:	add    bl,al
 1015415:	fadd   QWORD PTR [rax]
 1015417:	add    bh,bh
 1015419:	(bad)  
 101541a:	(bad)  
 101541b:	(bad)  
 101541c:	stc    
 101541d:	fadd   QWORD PTR [rax]
 101541f:	add    BYTE PTR [rax],al
 1015421:	add    BYTE PTR [rax],al
 1015423:	add    bh,bh
 1015425:	fiadd  WORD PTR [rax]
 1015427:	add    bh,bh
 1015429:	(bad)  
 101542a:	(bad)  
 101542b:	push   QWORD PTR [rdi+rbx*8]
 101542e:	add    BYTE PTR [rax],al
 1015430:	add    BYTE PTR [rax],al
 1015432:	add    BYTE PTR [rax],al
 1015434:	sbb    bh,0x0
 1015437:	add    bh,bh
 1015439:	(bad)  
 101543a:	(bad)  
 101543b:	dec    esp
 101543d:	fild   WORD PTR [rax]
 101543f:	add    BYTE PTR [rax],al
 1015441:	add    BYTE PTR [rax],al
 1015443:	add    BYTE PTR [rcx],bl
 1015445:	or     al,BYTE PTR ss:[rax]
 1015448:	sbb    al,0x1
 101544a:	stos   DWORD PTR es:[rdi],eax
 101544b:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae16041
 1015451:	rol    BYTE PTR [rdi],1
 1015453:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x46158ca
 101545a:	add    dl,BYTE PTR [rax+0x58]
 101545d:	rex.WX add QWORD PTR [rax],rax
 1015460:	and    BYTE PTR [rax+0x5420000],cl
 1015466:	add    BYTE PTR [rax],al
 1015468:	(bad)  
 1015469:	(bad)  
 101546a:	(bad)  
 101546b:	call   QWORD PTR [rax]
 101546d:	add    QWORD PTR [r8],r8
 1015470:	and    bl,dl
 1015472:	add    BYTE PTR [rax],al
 1015474:	(bad)  
 1015475:	(bad)  
 1015476:	(bad)  
 1015477:	(bad)  
 1015478:	jns    0x101544d
 101547a:	add    BYTE PTR [rax],al
 101547c:	add    BYTE PTR [rax],al
 101547e:	add    BYTE PTR [rax],al
 1015480:	adc    edx,ebx
 1015482:	add    BYTE PTR [rax],al
 1015484:	(bad)  
 1015485:	(bad)  
 1015486:	(bad)  
 1015487:	inc    DWORD PTR [rbx-0x26]
 101548a:	add    BYTE PTR [rax],al
 101548c:	add    BYTE PTR [rax],al
 101548e:	add    BYTE PTR [rax],al
 1015490:	(bad)  
 1015491:	fiadd  DWORD PTR [rax]
 1015493:	add    bh,bh
 1015495:	(bad)  
 1015496:	(bad)  
 1015497:	jmp    rax
 1015499:	fiadd  DWORD PTR [rax]
 101549b:	add    BYTE PTR [rax],al
 101549d:	add    BYTE PTR [rax],al
 101549f:	add    BYTE PTR [rcx],bl
 10154a1:	cmp    al,0xb
 10154a3:	add    BYTE PTR [rbx],ch
 10154a5:	xor    al,0x76
 10154a7:	add    BYTE PTR [rbx],bl
 10154a9:	add    DWORD PTR [rax+rax*1+0xc],ebp
 10154ad:	lock or ah,al
 10154b0:	or     al,dl
 10154b2:	(bad)  
 10154b3:	rol    BYTE PTR [rax+rsi*2],0x3
 10154b7:	(bad)  
 10154b8:	add    dl,BYTE PTR [rax+0x0]
 10154bb:	add    BYTE PTR [rax+0x4a],bl
 10154be:	add    DWORD PTR [rax],eax
 10154c0:	push   rax
 10154c1:	mov    BYTE PTR [rax],al
 10154c3:	add    BYTE PTR [rdx+0x3],dl
 10154c6:	add    BYTE PTR [rax],al
 10154c8:	(bad)  
 10154c9:	(bad)  
 10154ca:	(bad)  
 10154cb:	push   rax
 10154cd:	add    QWORD PTR [rax],r8
 10154d0:	nop
 10154d1:	enter  0x0,0xff
 10154d5:	(bad)  
 10154d6:	(bad)  
 10154d7:	call   FWORD PTR [rsi]
 10154d9:	leave  
 10154da:	add    BYTE PTR [rax],al
 10154dc:	add    BYTE PTR [rax],al
 10154de:	add    BYTE PTR [rax],al
 10154e0:	(bad)  
 10154e1:	iret   
 10154e2:	add    BYTE PTR [rax],al
 10154e4:	(bad)  
 10154e5:	(bad)  
 10154e6:	(bad)  
 10154e7:	call   QWORD PTR [rcx-0x31]
 10154ea:	add    BYTE PTR [rax],al
 10154ec:	add    BYTE PTR [rax],al
 10154ee:	add    BYTE PTR [rax],al
 10154f0:	cdq    
 10154f1:	iret   
 10154f2:	add    BYTE PTR [rax],al
 10154f4:	(bad)  
 10154f5:	(bad)  
 10154f6:	(bad)  
 10154f7:	(bad)  
 10154f8:	clc    
 10154f9:	iret   
 10154fa:	add    BYTE PTR [rax],al
 10154fc:	add    BYTE PTR [rax],al
 10154fe:	add    BYTE PTR [rax],al
 1015500:	sbb    DWORD PTR [rbx+rcx*1],edi
 1015503:	add    BYTE PTR [rdx],ch
 1015505:	xor    al,0x78
 1015507:	add    al,0x19
 1015509:	add    DWORD PTR [rsi+0x4],ebp
 101550c:	or     al,0xf0
 101550e:	or     ah,al
 1015510:	or     al,dl
 1015512:	(bad)  
 1015513:	rol    BYTE PTR [rax+rsi*2],0x3
 1015517:	(bad)  
 1015518:	add    dl,BYTE PTR [rax+0x0]
 101551b:	add    BYTE PTR [rax+0x4a],bl
 101551e:	add    DWORD PTR [rax],eax
 1015520:	or     BYTE PTR [rax+0x23620000],0x0
 1015527:	add    bh,bh
 1015529:	(bad)  
 101552a:	(bad)  
 101552b:	call   QWORD PTR [rax+0x4000014d]
 1015531:	(bad)  
 1015532:	add    BYTE PTR [rax],al
 1015534:	(bad)  
 1015535:	(bad)  
 1015536:	(bad)  
 1015537:	call   FWORD PTR [rcx+0xea]
 101553d:	add    BYTE PTR [rax],al
 101553f:	add    bh,ah
 1015541:	out    dx,eax
 1015542:	add    BYTE PTR [rax],al
 1015544:	(bad)  
 1015545:	(bad)  
 1015546:	(bad)  
 1015547:	call   FWORD PTR [rcx]
 1015549:	sbb    DWORD PTR [rdx],eax
 101554b:	add    BYTE PTR [rdi],al
 101554d:	add    DWORD PTR [rbp+0x0],ecx
 1015550:	xor    al,0x4a
 1015552:	add    DWORD PTR [rax],eax
 1015554:	push   rax
 1015555:	add    al,BYTE PTR [rax]
 1015557:	add    BYTE PTR [rcx],bl
 1015559:	or     DWORD PTR cs:[rax],eax
 101555c:	sbb    eax,0x1d005b64
 1015561:	xor    al,0x5a
 1015563:	add    BYTE PTR [rip+0xe005401],bl        # 0xf01a96a
 1015569:	loopne 0x1015577
 101556b:	jo     0x1015578
 101556d:	push   rax
 101556e:	add    BYTE PTR [rax],al
 1015570:	xor    al,0x4a
 1015572:	add    DWORD PTR [rax],eax
 1015574:	nop
 1015575:	add    al,BYTE PTR [rax]
 1015577:	add    BYTE PTR [rcx],bl
 1015579:	sbb    eax,DWORD PTR [rbx]
 101557b:	add    BYTE PTR [rcx],cl
 101557d:	add    DWORD PTR [rsi+0x0],ecx
 1015580:	add    dh,BYTE PTR [rax+0x0]
 1015583:	add    BYTE PTR [rdx+rcx*2],dh
 1015586:	add    DWORD PTR [rax],eax
 1015588:	(bad)  
 1015589:	add    al,BYTE PTR [rax]
 101558b:	add    BYTE PTR [rcx],ah
 101558d:	or     BYTE PTR [rdx],al
 101558f:	add    BYTE PTR [rax],cl
 1015591:	fs push rdx
 1015593:	add    BYTE PTR [rax+0x31],ah
 1015596:	add    DWORD PTR [rax],eax
 1015598:	xchg   ebx,eax
 1015599:	xor    DWORD PTR [rcx],eax
 101559b:	add    BYTE PTR [rax+0x55],bh
 101559e:	add    DWORD PTR [rax],eax
 10155a0:	and    DWORD PTR [rax],ecx
 10155a2:	add    al,BYTE PTR [rax]
 10155a4:	or     BYTE PTR [rcx+rdx*2],dh
 10155a7:	add    BYTE PTR [rbx+0x22000131],dl
 10155ad:	xor    al,BYTE PTR [rcx]
 10155af:	add    BYTE PTR [rbp+rdx*2+0x210001],cl
 10155b6:	add    BYTE PTR [rax],al
 10155b8:	xchg   ebx,eax
 10155b9:	xor    DWORD PTR [rcx],eax
 10155bb:	add    BYTE PTR [rdx],ah
 10155bd:	xor    al,BYTE PTR [rcx]
 10155bf:	add    BYTE PTR [rbp+rdx*2+0x210001],cl
 10155c6:	add    BYTE PTR [rax],al
 10155c8:	(bad)  
 10155c9:	xor    DWORD PTR [rcx],eax
 10155cb:	add    BYTE PTR [rbx+0x78000131],dl
 10155d1:	push   rbp
 10155d2:	add    DWORD PTR [rax],eax
 10155d4:	sbb    DWORD PTR [rdi],esp
 10155d6:	or     DWORD PTR [rax],eax
 10155d8:	adc    eax,0x15005454
 10155dd:	xor    al,0x53
 10155df:	add    BYTE PTR [rip+0xe004e01],dl        # 0xf01a3e6
 10155e5:	loopne 0x10155f3
 10155e7:	jo     0x10155f4
 10155e9:	(bad)  
 10155ea:	add    BYTE PTR [rax],al
 10155ec:	xor    al,0x4a
 10155ee:	add    DWORD PTR [rax],eax
 10155f0:	(bad)  
 10155f1:	add    al,BYTE PTR [rax]
 10155f3:	add    BYTE PTR [rcx],al
 10155f5:	adc    eax,DWORD PTR [rdi]
 10155f7:	add    BYTE PTR [rbx],dl
 10155f9:	sbb    DWORD PTR fs:[rax],eax
 10155fc:	adc    esi,DWORD PTR [rax+rbx*1]
 10155ff:	add    BYTE PTR [rbx],dl
 1015601:	add    DWORD PTR [rsi],edx
 1015603:	add    BYTE PTR [rax+rsi*2],cl
 1015606:	add    BYTE PTR [rax],al
 1015608:	add    DWORD PTR [rcx+rax*1],eax
 101560b:	add    BYTE PTR [rdx+rax*2],al
 101560e:	add    BYTE PTR [rax],al
 1015610:	add    DWORD PTR [rcx+rax*1],eax
 1015613:	add    BYTE PTR [rdx+rax*2],al
 1015616:	add    BYTE PTR [rax],al
 1015618:	add    DWORD PTR [rcx+rax*1],eax
 101561b:	add    BYTE PTR [rdx+riz*2],al
 101561e:	add    BYTE PTR [rax],al
 1015620:	add    DWORD PTR [rbx],edx
 1015622:	add    DWORD PTR [rax],eax
 1015624:	adc    esp,DWORD PTR [rdx+0x0]
 1015627:	add    BYTE PTR [rcx],al
 1015629:	adc    al,0x8
 101562b:	add    BYTE PTR [rsp+riz*2],dl
 101562e:	(bad)  
 101562f:	add    BYTE PTR [rsp+rdx*2],dl
 1015632:	or     eax,0xc341400
 1015637:	add    BYTE PTR [rdx+rdx*4],dl
 101563a:	adc    BYTE PTR [rax+0x1],dh
 101563d:	or     al,BYTE PTR [rax+rax*1]
 1015640:	or     dh,BYTE PTR [rsi+rax*1]
 1015643:	add    BYTE PTR [rdx],cl
 1015645:	xor    al,BYTE PTR [rsi]
 1015647:	jo     0x101564a
 1015649:	or     al,BYTE PTR [rax+rax*1]
 101564c:	or     dh,BYTE PTR [rax+rcx*1]
 101564f:	add    BYTE PTR [rdx],cl
 1015651:	push   rdx
 1015652:	(bad)  
 1015653:	jo     0x101566e
 1015655:	rex or eax,0x1c42f00
 101565b:	add    DWORD PTR [rbx],ebp
 101565d:	je     0x101565f
 101565f:	add    DWORD PTR [rdi],esp
 1015661:	inc    DWORD PTR fs:[rax]
 1015664:	and    esi,DWORD PTR [rsi+rdi*8]
 1015667:	add    BYTE PTR [rsi],dl
 1015669:	add    edx,edi
 101566b:	add    BYTE PTR [rax],cl
 101566d:	lock (bad) 
 101566f:	loopne 0x1015675
 1015671:	push   rax
 1015672:	add    BYTE PTR [rax],al
 1015674:	pop    rax
 1015675:	rex.WX add QWORD PTR [rax],rax
 1015678:	mov    al,0x88
 101567a:	add    BYTE PTR [rax],al
 101567c:	ret    0x7
 101567f:	add    bh,bh
 1015681:	(bad)  
 1015682:	(bad)  
 1015683:	push   QWORD PTR [rax-0x2ffffeb3]
 1015689:	sbb    al,0x1
 101568b:	add    bh,bh
 101568d:	(bad)  
 101568e:	(bad)  
 101568f:	call   FWORD PTR [rcx]
 1015691:	sbb    eax,0x1
 1015696:	add    BYTE PTR [rax],al
 1015698:	lods   eax,DWORD PTR ds:[rsi]
 1015699:	sbb    eax,0xffff0001
 101569e:	(bad)  
 101569f:	push   QWORD PTR [rdx+0x11d]
 10156a5:	add    BYTE PTR [rax],al
 10156a7:	add    BYTE PTR [rsi-0xfffee2],dl
 10156ad:	(bad)  
 10156ae:	(bad)  
 10156af:	call   FWORD PTR [rbx+0x11e]
 10156b5:	add    BYTE PTR [rax],al
 10156b7:	add    BYTE PTR [rdi+rbx*1],al
 10156ba:	add    DWORD PTR [rax],eax
 10156bc:	(bad)  
 10156bd:	(bad)  
 10156be:	(bad)  
 10156bf:	dec    DWORD PTR [rcx]
 10156c1:	(bad)  
 10156c2:	add    DWORD PTR [rax],eax
 10156c4:	add    BYTE PTR [rax],al
 10156c6:	add    BYTE PTR [rax],al
 10156c8:	xor    DWORD PTR [rdi],ebx
 10156ca:	add    DWORD PTR [rax],eax
 10156cc:	(bad)  
 10156cd:	(bad)  
 10156ce:	(bad)  
 10156cf:	push   QWORD PTR [rsi]
 10156d1:	(bad)  
 10156d2:	add    DWORD PTR [rax],eax
 10156d4:	add    BYTE PTR [rax],al
 10156d6:	add    BYTE PTR [rax],al
 10156d8:	lods   eax,DWORD PTR ds:[rsi]
 10156d9:	and    BYTE PTR [rcx],al
 10156db:	add    bh,bh
 10156dd:	(bad)  
 10156de:	(bad)  
 10156df:	push   QWORD PTR [rdx+0x120]
 10156e5:	add    BYTE PTR [rax],al
 10156e7:	add    BYTE PTR [rsi+0x21],dh
 10156ea:	add    DWORD PTR [rax],eax
 10156ec:	(bad)  
 10156ed:	(bad)  
 10156ee:	(bad)  
 10156ef:	inc    DWORD PTR [rax+0x121]
 10156f5:	add    BYTE PTR [rax],al
 10156f7:	add    BYTE PTR [rbx+0x22],dl
 10156fa:	add    DWORD PTR [rax],eax
 10156fc:	(bad)  
 10156fd:	(bad)  
 10156fe:	(bad)  
 10156ff:	call   FWORD PTR [rax+0x22]
 1015702:	add    DWORD PTR [rax],eax
 1015704:	add    BYTE PTR [rax],al
 1015706:	add    BYTE PTR [rax],al
 1015708:	mov    bh,0x22
 101570a:	add    DWORD PTR [rax],eax
 101570c:	(bad)  
 101570d:	(bad)  
 101570e:	(bad)  
 101570f:	inc    DWORD PTR [rcx]
 1015711:	or     al,BYTE PTR [rax+rax*1]
 1015714:	or     dh,BYTE PTR [rdi+rax*1]
 1015717:	add    BYTE PTR [rdx],cl
 1015719:	xor    al,BYTE PTR [rsi]
 101571b:	jo     0x1015736
 101571d:	sbb    eax,DWORD PTR [rbx]
 101571f:	add    BYTE PTR [rcx],cl
 1015721:	add    DWORD PTR [rsi],esp
 1015723:	add    BYTE PTR [rdx],al
 1015725:	xor    BYTE PTR [rax],al
 1015727:	add    BYTE PTR [rdx+rcx*2],dh
 101572a:	add    DWORD PTR [rax],eax
 101572c:	and    BYTE PTR [rcx],al
 101572e:	add    BYTE PTR [rax],al
 1015730:	add    DWORD PTR [rdi+0x74870009],eax
 1015736:	or     al,0x0
 1015738:	adc    eax,edx
 101573a:	(bad)  
 101573c:	or     eax,0x9d00be0
 1015741:	rol    BYTE PTR [rdi],0x60
 1015744:	(bad)  
 1015745:	push   rax
 1015746:	add    BYTE PTR [rax],al
 1015748:	and    DWORD PTR [rax],ecx
 101574a:	add    al,BYTE PTR [rax]
 101574c:	or     BYTE PTR [rsp+rdx*1],dh
 101574f:	add    BYTE PTR [rax],al
 1015751:	(bad)  
 1015752:	add    DWORD PTR [rax],eax
 1015754:	pushf  
 1015755:	(bad)  
 1015756:	add    DWORD PTR [rax],eax
 1015758:	xor    BYTE PTR [rdi+0x1],dl
 101575b:	add    BYTE PTR [rcx],ah
 101575d:	add    BYTE PTR [rax],al
 101575f:	add    BYTE PTR [rax],al
 1015761:	(bad)  
 1015762:	add    DWORD PTR [rax],eax
 1015764:	pushf  
 1015765:	(bad)  
 1015766:	add    DWORD PTR [rax],eax
 1015768:	xor    BYTE PTR [rdi+0x1],dl
 101576b:	add    BYTE PTR [rcx],al
 101576d:	jns    0x1015777
 101576f:	add    BYTE PTR [rcx+0x74],bh
 1015772:	adc    al,0x0
 1015774:	or     eax,0x7e009b2
 1015779:	rol    BYTE PTR [rip+0x26003c0],1        # 0x3615b3f
 101577f:	push   rax
 1015780:	and    DWORD PTR [rax],edx
 1015782:	add    al,0x0
 1015784:	adc    ah,dh
 1015786:	adc    eax,0x12340800
 101578b:	add    BYTE PTR [rax+0x2e000113],ah
 1015791:	adc    al,0x1
 1015793:	add    BYTE PTR [rdi+rdx*2+0x1],ch
 1015797:	add    BYTE PTR [rcx],ah
 1015799:	add    BYTE PTR [rax],al
 101579b:	add    BYTE PTR [rax+0x2e000113],ah
 10157a1:	adc    al,0x1
 10157a3:	add    BYTE PTR [rdi+rdx*2+0x1],ch
 10157a7:	add    BYTE PTR [rcx],bl
 10157a9:	sbb    DWORD PTR [rdx],eax
 10157ab:	add    BYTE PTR [rdi],al
 10157ad:	add    DWORD PTR [rbx],ebp
 10157af:	add    BYTE PTR [rdx+rcx*2],dh
 10157b2:	add    DWORD PTR [rax],eax
 10157b4:	rex add DWORD PTR [rax],eax
 10157b7:	add    BYTE PTR [rcx],ah
 10157b9:	or     BYTE PTR [rdx],al
 10157bb:	add    BYTE PTR [rax],cl
 10157bd:	xor    al,0x2a
 10157bf:	add    BYTE PTR [rax],ah
 10157c1:	adc    al,BYTE PTR [rcx]
 10157c3:	add    BYTE PTR [rbp+0x12],cl
 10157c6:	add    DWORD PTR [rax],eax
 10157c8:	test   al,0x57
 10157ca:	add    DWORD PTR [rax],eax
 10157cc:	and    DWORD PTR [rax],eax
 10157ce:	add    BYTE PTR [rax],al
 10157d0:	and    BYTE PTR [rdx],dl
 10157d2:	add    DWORD PTR [rax],eax
 10157d4:	rex.WRB adc r8b,BYTE PTR [r9]
 10157d7:	add    BYTE PTR [rax+0x19000157],ch
 10157dd:	cmp    al,0xb
 10157df:	add    BYTE PTR [rbx],ch
 10157e1:	xor    al,0x20
 10157e3:	add    DWORD PTR [rbx],ebx
 10157e5:	add    DWORD PTR [rsi],edx
 10157e7:	add    DWORD PTR [rax+rsi*8],ecx
 10157ea:	or     ah,al
 10157ec:	or     al,dl
 10157ee:	(bad)  
 10157ef:	rol    BYTE PTR [rax+rsi*2],0x3
 10157f3:	(bad)  
 10157f4:	add    dl,BYTE PTR [rax+0x0]
 10157f7:	add    BYTE PTR [rax+0x4a],bl
 10157fa:	add    DWORD PTR [rax],eax
 10157fc:	loopne 0x1015786
 10157fe:	add    BYTE PTR [rax],al
 1015800:	movabs ds:0xd0ffffffff000008,al
 1015809:	add    QWORD PTR [r8],r8
 101580c:	push   rax
 101580d:	lock add BYTE PTR [rax],al
 1015810:	(bad)  
 1015811:	(bad)  
 1015812:	(bad)  
 1015813:	call   FWORD PTR [rdx+0xf0]
 1015819:	add    BYTE PTR [rax],al
 101581b:	add    BYTE PTR [rcx-0xfffeef],ah
 1015821:	(bad)  
 1015822:	(bad)  
 1015823:	(bad)  
 1015824:	cld    
 1015825:	adc    DWORD PTR [rcx],eax
 1015827:	add    BYTE PTR [rax],al
 1015829:	add    BYTE PTR [rax],al
 101582b:	add    BYTE PTR [rcx],bl
 101582d:	sub    BYTE PTR [rdi],al
 101582f:	add    BYTE PTR [rdi],dl
 1015831:	add    DWORD PTR [rax+rax*1+0x8],ecx
 1015835:	lock (bad) 
 1015837:	loopne 0x101583d
 1015839:	jo     0x101583e
 101583b:	(bad)  
 101583c:	add    dl,BYTE PTR [rax+0x0]
 101583f:	add    BYTE PTR [rdx+rcx*2],dh
 1015842:	add    DWORD PTR [rax],eax
 1015844:	push   rax
 1015845:	add    al,BYTE PTR [rax]
 1015847:	add    BYTE PTR [rcx],ah
 1015849:	or     BYTE PTR [rdx],al
 101584b:	add    BYTE PTR [rax],cl
 101584d:	xor    al,0x54
 101584f:	add    BYTE PTR [rax+0x23000119],dh
 1015855:	sbb    al,BYTE PTR [rcx]
 1015857:	add    BYTE PTR [rax+rbx*2],ch
 101585a:	add    DWORD PTR [rax],eax
 101585c:	and    DWORD PTR [rax],eax
 101585e:	add    BYTE PTR [rax],al
 1015860:	mov    al,0x19
 1015862:	add    DWORD PTR [rax],eax
 1015864:	and    ebx,DWORD PTR [rdx]
 1015866:	add    DWORD PTR [rax],eax
 1015868:	sub    al,0x58
 101586a:	add    DWORD PTR [rax],eax
 101586c:	sbb    DWORD PTR [rbx],ebx
 101586e:	add    eax,DWORD PTR [rax]
 1015870:	or     DWORD PTR [rcx],eax
 1015872:	add    BYTE PTR es:[rdx],al
 1015875:	xor    BYTE PTR [rax],al
 1015877:	add    BYTE PTR [rdx+rcx*2],dh
 101587a:	add    DWORD PTR [rax],eax
 101587c:	and    BYTE PTR [rcx],al
 101587e:	add    BYTE PTR [rax],al
 1015880:	add    DWORD PTR [rsi],ecx
 1015882:	add    DWORD PTR [rax],eax
 1015884:	(bad)  
 1015885:	(bad)  
 1015886:	add    BYTE PTR [rax],al
 1015888:	add    DWORD PTR [rsi],ecx
 101588a:	add    DWORD PTR [rax],eax
 101588c:	(bad)  
 101588d:	(bad)  
 101588e:	add    BYTE PTR [rax],al
 1015890:	add    DWORD PTR [rdx],ecx
 1015892:	add    al,0x0
 1015894:	or     dh,BYTE PTR [rsi+rax*1]
 1015897:	add    BYTE PTR [rdx],cl
 1015899:	xor    al,BYTE PTR [rsi]
 101589b:	jo     0x10158b6
 101589d:	sbb    eax,DWORD PTR [rbx]
 101589f:	add    BYTE PTR [rcx],cl
 10158a1:	add    DWORD PTR [rsi],esp
 10158a3:	add    BYTE PTR [rdx],al
 10158a5:	xor    BYTE PTR [rax],al
 10158a7:	add    BYTE PTR [rdx+rcx*2],dh
 10158aa:	add    DWORD PTR [rax],eax
 10158ac:	and    BYTE PTR [rcx],al
 10158ae:	add    BYTE PTR [rax],al
 10158b0:	add    DWORD PTR [rdx],ecx
 10158b2:	add    al,0x0
 10158b4:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 10158b8:	add    eax,0x1000134
 10158bd:	(bad)  
 10158be:	add    al,BYTE PTR [rax]
 10158c0:	(bad)  
 10158c1:	xor    al,BYTE PTR [rdx]
 10158c3:	xor    BYTE PTR [rcx],al
 10158c5:	or     al,BYTE PTR [rax+rax*1]
 10158c8:	or     dh,BYTE PTR [rsi+rax*1]
 10158cb:	add    BYTE PTR [rdx],cl
 10158cd:	xor    al,BYTE PTR [rsi]
 10158cf:	jo     0x10158d2
 10158d1:	adc    BYTE PTR [rsi],al
 10158d3:	add    BYTE PTR [rax],dl
 10158d5:	push   rsp
 10158d6:	or     DWORD PTR [rax],eax
 10158d8:	adc    BYTE PTR [rax+rcx*1],dh
 10158db:	add    BYTE PTR [rax],dl
 10158dd:	xor    cl,BYTE PTR [rax+riz*8]
 10158e0:	and    DWORD PTR [rsi],edx
 10158e2:	add    al,0x0
 10158e4:	(bad)  
 10158e5:	je     0x10158ee
 10158e7:	add    BYTE PTR [rip+0xffffffff90000664],al        # 0xffffffff91015f51
 10158ed:	cmp    DWORD PTR [rcx],eax
 10158ef:	add    ch,ah
 10158f1:	cmp    DWORD PTR [rcx],eax
 10158f3:	add    al,dl
 10158f5:	pop    rax
 10158f6:	add    DWORD PTR [rax],eax
 10158f8:	and    DWORD PTR [rax],eax
 10158fa:	add    al,0x0
 10158fc:	add    BYTE PTR [rdi+rax*1+0x0],dh
 1015900:	add    BYTE PTR [rsi+rax*1+0x0],ah
 1015904:	nop
 1015905:	cmp    DWORD PTR [rcx],eax
 1015907:	add    ch,ah
 1015909:	cmp    DWORD PTR [rcx],eax
 101590b:	add    al,dl
 101590d:	pop    rax
 101590e:	add    DWORD PTR [rax],eax
 1015910:	and    DWORD PTR [rax],eax
 1015912:	add    BYTE PTR [rax],al
 1015914:	nop
 1015915:	cmp    DWORD PTR [rcx],eax
 1015917:	add    ch,ah
 1015919:	cmp    DWORD PTR [rcx],eax
 101591b:	add    al,dl
 101591d:	pop    rax
 101591e:	add    DWORD PTR [rax],eax
 1015920:	sbb    DWORD PTR [rdi+rax*1],ebx
 1015923:	add    BYTE PTR [rip+0x7e009a2],cl        # 0x8e162cb
 1015929:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x4615da0
 1015930:	add    dh,BYTE PTR [rax]
 1015932:	add    BYTE PTR [rax],al
 1015934:	xor    al,0x4a
 1015936:	add    DWORD PTR [rax],eax
 1015938:	rex.W add BYTE PTR [rax],al
 101593b:	add    BYTE PTR [rcx],ah
 101593d:	add    eax,0xf4050002
 1015942:	or     al,BYTE PTR [rax]
 1015944:	movabs al,ds:0x2000013e0700013c
 101594d:	pop    rcx
 101594e:	add    DWORD PTR [rax],eax
 1015950:	and    DWORD PTR [rax],eax
 1015952:	add    BYTE PTR [rax],al
 1015954:	movabs al,ds:0x2000013e0700013c
 101595d:	pop    rcx
 101595e:	add    DWORD PTR [rax],eax
 1015960:	add    DWORD PTR [rbx],ecx
 1015962:	(bad)  
 1015963:	add    BYTE PTR [rbx],cl
 1015965:	jb     0x101596e
 1015967:	rol    BYTE PTR [rip+0x3600470],1        # 0x4615ddd
 101596d:	push   rax
 101596e:	add    dh,BYTE PTR [rax]
 1015970:	and    DWORD PTR [rip+0xfffffffff41d0006],ebx        # 0xfffffffff51e597c
 1015976:	adc    BYTE PTR [rax],al
 1015978:	adc    ah,ah
 101597a:	sldt   WORD PTR [rip+0xffffffff90000ec4]        # 0xffffffff91016845
 1015981:	add    DWORD PTR ds:[rax],eax
 1015984:	xor    al,0x40
 1015986:	add    DWORD PTR [rax],eax
 1015988:	(bad)  
 1015989:	pop    rcx
 101598a:	add    DWORD PTR [rax],eax
 101598c:	and    DWORD PTR [rax],eax
 101598e:	add    al,0x0
 1015990:	add    ah,dh
 1015992:	adc    BYTE PTR [rax],al
 1015994:	add    ah,ah
 1015996:	lldt   WORD PTR [rax+0x3400013e]
 101599d:	rex add DWORD PTR [rax],eax
 10159a0:	(bad)  
 10159a1:	pop    rcx
 10159a2:	add    DWORD PTR [rax],eax
 10159a4:	add    DWORD PTR [rsi],eax
 10159a6:	add    al,BYTE PTR [rax]
 10159a8:	(bad)  
 10159a9:	xor    al,BYTE PTR [rdx]
 10159ab:	xor    BYTE PTR [rcx],al
 10159ad:	add    al,0x1
 10159af:	add    BYTE PTR [rdx+rax*2],al
 10159b2:	add    BYTE PTR [rax],al
 10159b4:	add    DWORD PTR [rcx],ebx
 10159b6:	or     al,BYTE PTR [rax]
 10159b8:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 10159bc:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 10159c0:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 10159c4:	sbb    DWORD PTR [rsi+rax*1],esi
 10159c7:	add    BYTE PTR [rcx],bl
 10159c9:	xor    dl,BYTE PTR [rip+0xa1901c0]        # 0xb1a5b8f
 10159cf:	add    BYTE PTR [rcx],bl
 10159d1:	je     0x10159dc
 10159d3:	add    BYTE PTR [rcx],bl
 10159d5:	or     BYTE PTR fs:[rax],al
 10159d8:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 10159dc:	sbb    DWORD PTR [rsi+rax*1],esi
 10159df:	add    BYTE PTR [rcx],bl
 10159e1:	xor    dl,BYTE PTR [rip+0xc0]        # 0x1015aa7
 10159e7:	add    BYTE PTR [rcx],al
 10159e9:	add    al,0x1
 10159eb:	add    BYTE PTR [rdx+rdx*1],al
 10159ee:	add    BYTE PTR [rax],al
 10159f0:	sbb    BYTE PTR [rdx+0x1],0x0
	...
 10159fc:	ficomp DWORD PTR [rsi+0x1]
 10159ff:	add    BYTE PTR [rax],al
 1015a01:	adc    BYTE PTR [rax],al
 1015a03:	add    BYTE PTR [rax+0x15a],ah
 1015a09:	add    BYTE PTR [rax],al
 1015a0b:	add    BYTE PTR [rax],al
 1015a0d:	add    BYTE PTR [rax],al
 1015a0f:	add    BYTE PTR [rsi],bl
 1015a11:	(bad)  
 1015a12:	add    DWORD PTR [rax],eax
 1015a14:	and    BYTE PTR [rax],dl
 1015a16:	add    BYTE PTR [rax],al
 1015a18:	xor    BYTE PTR [rcx+rax*1+0x0],bl
	...
 1015a24:	sbb    BYTE PTR [rbx+0x1],ah
 1015a27:	add    BYTE PTR [rax+0x40000011],dh
 1015a2d:	pop    rsi
 1015a2e:	add    DWORD PTR [rax],eax
	...
 1015a38:	xchg   esi,eax
 1015a39:	movsxd eax,DWORD PTR [rcx]
 1015a3b:	add    al,al
 1015a3d:	adc    eax,DWORD PTR [rax]
 1015a3f:	add    al,cl
 1015a41:	pop    rbp
 1015a42:	add    DWORD PTR [rax],eax
	...
 1015a4c:	movabs ds:0x5800001348000163,al
 1015a55:	pop    rsi
 1015a56:	add    DWORD PTR [rax],eax
	...
 1015a60:	ss add DWORD PTR fs:[rax],eax
 1015a64:	fcom   DWORD PTR [rbx]
	...
 1015a7e:	add    BYTE PTR [rax],al
 1015a80:	mov    esp,0x15e
 1015a85:	add    BYTE PTR [rax],al
 1015a87:	add    ah,cl
 1015a89:	pop    rsi
 1015a8a:	add    DWORD PTR [rax],eax
 1015a8c:	add    BYTE PTR [rax],al
 1015a8e:	add    BYTE PTR [rax],al
 1015a90:	test   al,0x5e
 1015a92:	add    DWORD PTR [rax],eax
	...
 1015aa0:	call   0x1015c03
 1015aa5:	add    BYTE PTR [rax],al
 1015aa7:	add    dh,dh
 1015aa9:	pop    rsi
 1015aaa:	add    DWORD PTR [rax],eax
 1015aac:	add    BYTE PTR [rax],al
 1015aae:	add    BYTE PTR [rax],al
 1015ab0:	or     BYTE PTR [rdi+0x1],bl
 1015ab3:	add    BYTE PTR [rax],al
 1015ab5:	add    BYTE PTR [rax],al
 1015ab7:	add    BYTE PTR [rdx],bl
 1015ab9:	pop    rdi
 1015aba:	add    DWORD PTR [rax],eax
 1015abc:	add    BYTE PTR [rax],al
 1015abe:	add    BYTE PTR [rax],al
 1015ac0:	and    al,0x5f
 1015ac2:	add    DWORD PTR [rax],eax
 1015ac4:	add    BYTE PTR [rax],al
 1015ac6:	add    BYTE PTR [rax],al
 1015ac8:	cmp    bl,BYTE PTR [rdi+0x1]
 1015acb:	add    BYTE PTR [rax],al
 1015acd:	add    BYTE PTR [rax],al
 1015acf:	add    BYTE PTR [rdx+0x5f],cl
 1015ad2:	add    DWORD PTR [rax],eax
 1015ad4:	add    BYTE PTR [rax],al
 1015ad6:	add    BYTE PTR [rax],al
 1015ad8:	pop    rdx
 1015ad9:	pop    rdi
 1015ada:	add    DWORD PTR [rax],eax
 1015adc:	add    BYTE PTR [rax],al
 1015ade:	add    BYTE PTR [rax],al
 1015ae0:	push   0x15f
 1015ae5:	add    BYTE PTR [rax],al
 1015ae7:	add    BYTE PTR [rsi+0x5f],dh
 1015aea:	add    DWORD PTR [rax],eax
 1015aec:	add    BYTE PTR [rax],al
 1015aee:	add    BYTE PTR [rax],al
 1015af0:	mov    bl,BYTE PTR [rdi+0x1]
 1015af3:	add    BYTE PTR [rax],al
 1015af5:	add    BYTE PTR [rax],al
 1015af7:	add    BYTE PTR [rax+0x15f],bl
 1015afd:	add    BYTE PTR [rax],al
 1015aff:	add    BYTE PTR [rax+0x15f],ch
 1015b05:	add    BYTE PTR [rax],al
 1015b07:	add    BYTE PTR [rax+0x15f],bh
 1015b0d:	add    BYTE PTR [rax],al
 1015b0f:	add    dh,al
 1015b11:	pop    rdi
 1015b12:	add    DWORD PTR [rax],eax
 1015b14:	add    BYTE PTR [rax],al
 1015b16:	add    BYTE PTR [rax],al
 1015b18:	fcomp  QWORD PTR [rdi+0x1]
 1015b1b:	add    BYTE PTR [rax],al
 1015b1d:	add    BYTE PTR [rax],al
 1015b1f:	add    dl,dh
 1015b21:	pop    rdi
 1015b22:	add    DWORD PTR [rax],eax
 1015b24:	add    BYTE PTR [rax],al
 1015b26:	add    BYTE PTR [rax],al
 1015b28:	(bad)  
 1015b29:	pop    rdi
 1015b2a:	add    DWORD PTR [rax],eax
 1015b2c:	add    BYTE PTR [rax],al
 1015b2e:	add    BYTE PTR [rax],al
 1015b30:	adc    al,0x60
 1015b32:	add    DWORD PTR [rax],eax
 1015b34:	add    BYTE PTR [rax],al
 1015b36:	add    BYTE PTR [rax],al
 1015b38:	and    al,0x60
 1015b3a:	add    DWORD PTR [rax],eax
 1015b3c:	add    BYTE PTR [rax],al
 1015b3e:	add    BYTE PTR [rax],al
 1015b40:	cmp    ah,BYTE PTR [rax+0x1]
 1015b43:	add    BYTE PTR [rax],al
 1015b45:	add    BYTE PTR [rax],al
 1015b47:	add    BYTE PTR [rdx+0x60],cl
 1015b4a:	add    DWORD PTR [rax],eax
 1015b4c:	add    BYTE PTR [rax],al
 1015b4e:	add    BYTE PTR [rax],al
 1015b50:	pop    rdx
 1015b51:	(bad)  
 1015b52:	add    DWORD PTR [rax],eax
 1015b54:	add    BYTE PTR [rax],al
 1015b56:	add    BYTE PTR [rax],al
 1015b58:	jo     0x1015bba
 1015b5a:	add    DWORD PTR [rax],eax
 1015b5c:	add    BYTE PTR [rax],al
 1015b5e:	add    BYTE PTR [rax],al
 1015b60:	jl     0x1015bc2
 1015b62:	add    DWORD PTR [rax],eax
 1015b64:	add    BYTE PTR [rax],al
 1015b66:	add    BYTE PTR [rax],al
 1015b68:	mov    WORD PTR [rax+0x1],fs
 1015b6b:	add    BYTE PTR [rax],al
 1015b6d:	add    BYTE PTR [rax],al
 1015b6f:	add    BYTE PTR [rsi+0x160],bl
 1015b75:	add    BYTE PTR [rax],al
 1015b77:	add    BYTE PTR [rax+riz*2+0x1],ch
 1015b7e:	add    BYTE PTR [rax],al
 1015b80:	(bad)  
 1015b81:	(bad)  
 1015b82:	add    DWORD PTR [rax],eax
 1015b84:	add    BYTE PTR [rax],al
 1015b86:	add    BYTE PTR [rax],al
 1015b88:	fisub  DWORD PTR [rax+0x1]
 1015b8b:	add    BYTE PTR [rax],al
 1015b8d:	add    BYTE PTR [rax],al
 1015b8f:	add    ah,ch
 1015b91:	(bad)  
 1015b92:	add    DWORD PTR [rax],eax
 1015b94:	add    BYTE PTR [rax],al
 1015b96:	add    BYTE PTR [rax],al
 1015b98:	add    ah,BYTE PTR [rcx+0x1]
 1015b9b:	add    BYTE PTR [rax],al
 1015b9d:	add    BYTE PTR [rax],al
 1015b9f:	add    BYTE PTR [rsp+riz*2+0x1],cl
 1015ba3:	add    BYTE PTR [rax],al
 1015ba5:	add    BYTE PTR [rax],al
 1015ba7:	add    BYTE PTR [rsp+riz*2+0x1],bl
 1015bab:	add    BYTE PTR [rax],al
 1015bad:	add    BYTE PTR [rax],al
 1015baf:	add    BYTE PTR [rax+0x64],dh
 1015bb2:	add    DWORD PTR [rax],eax
 1015bb4:	add    BYTE PTR [rax],al
 1015bb6:	add    BYTE PTR [rax],al
 1015bb8:	test   BYTE PTR [rcx+rax*1+0x0],ah
 1015bbc:	add    BYTE PTR [rax],al
 1015bbe:	add    BYTE PTR [rax],al
 1015bc0:	movabs al,ds:0xbe00000000000164
 1015bc9:	add    DWORD PTR fs:[rax],eax
 1015bcc:	add    BYTE PTR [rax],al
 1015bce:	add    BYTE PTR [rax],al
 1015bd0:	shl    BYTE PTR [rcx+rax*1+0x0],cl
 1015bd4:	add    BYTE PTR [rax],al
 1015bd6:	add    BYTE PTR [rax],al
 1015bd8:	out    0x64,al
 1015bda:	add    DWORD PTR [rax],eax
 1015bdc:	add    BYTE PTR [rax],al
 1015bde:	add    BYTE PTR [rax],al
 1015be0:	add    BYTE PTR [rbp+0x1],ah
 1015be3:	add    BYTE PTR [rax],al
 1015be5:	add    BYTE PTR [rax],al
 1015be7:	add    BYTE PTR [riz*2+0x1],dl
 1015bee:	add    BYTE PTR [rax],al
 1015bf0:	and    al,0x65
 1015bf2:	add    DWORD PTR [rax],eax
 1015bf4:	add    BYTE PTR [rax],al
 1015bf6:	add    BYTE PTR [rax],al
 1015bf8:	ds add DWORD PTR gs:[rax],eax
 1015bfc:	add    BYTE PTR [rax],al
 1015bfe:	add    BYTE PTR [rax],al
 1015c00:	push   rsp
 1015c01:	add    DWORD PTR gs:[rax],eax
 1015c04:	add    BYTE PTR [rax],al
 1015c06:	add    BYTE PTR [rax],al
 1015c08:	push   0x65
 1015c0a:	add    DWORD PTR [rax],eax
 1015c0c:	add    BYTE PTR [rax],al
 1015c0e:	add    BYTE PTR [rax],al
 1015c10:	test   BYTE PTR [rbp+0x1],ah
 1015c13:	add    BYTE PTR [rax],al
 1015c15:	add    BYTE PTR [rax],al
 1015c17:	add    BYTE PTR [rax+0x165],dl
 1015c1d:	add    BYTE PTR [rax],al
 1015c1f:	add    BYTE PTR [rsp+riz*2+0x1],al
	...
 1015c2f:	add    BYTE PTR [rsi],al
 1015c31:	(bad)  
 1015c33:	add    BYTE PTR [rax],al
 1015c35:	add    BYTE PTR [rax],al
 1015c37:	add    BYTE PTR [rsi],cl
 1015c39:	(bad)  
 1015c3b:	add    BYTE PTR [rax],al
 1015c3d:	add    BYTE PTR [rax],al
 1015c3f:	add    BYTE PTR [rdx],bl
 1015c41:	(bad)  
 1015c43:	add    BYTE PTR [rax],al
 1015c45:	add    BYTE PTR [rax],al
 1015c47:	add    BYTE PTR [rax],ch
 1015c49:	(bad)  
 1015c4b:	add    BYTE PTR [rax],al
 1015c4d:	add    BYTE PTR [rax],al
 1015c4f:	add    BYTE PTR [rdx],dh
 1015c51:	(bad)  
 1015c53:	add    BYTE PTR [rax],al
 1015c55:	add    BYTE PTR [rax],al
 1015c57:	add    BYTE PTR [rdx+0x62],al
 1015c5a:	add    DWORD PTR [rax],eax
 1015c5c:	add    BYTE PTR [rax],al
 1015c5e:	add    BYTE PTR [rax],al
 1015c60:	push   rax
 1015c61:	(bad)  
 1015c63:	add    BYTE PTR [rax],al
 1015c65:	add    BYTE PTR [rax],al
 1015c67:	add    BYTE PTR [rax+0x62],ah
 1015c6a:	add    DWORD PTR [rax],eax
 1015c6c:	add    BYTE PTR [rax],al
 1015c6e:	add    BYTE PTR [rax],al
 1015c70:	js     0x1015cd4
 1015c72:	add    DWORD PTR [rax],eax
 1015c74:	add    BYTE PTR [rax],al
 1015c76:	add    BYTE PTR [rax],al
 1015c78:	xchg   BYTE PTR [rdx+0x1],ah
 1015c7b:	add    BYTE PTR [rax],al
 1015c7d:	add    BYTE PTR [rax],al
 1015c7f:	add    BYTE PTR [rsi+0x162],cl
 1015c85:	add    BYTE PTR [rax],al
 1015c87:	add    BYTE PTR [rax+0x162],bl
 1015c8d:	add    BYTE PTR [rax],al
 1015c8f:	add    BYTE PTR [rax+0x162],ah
 1015c95:	add    BYTE PTR [rax],al
 1015c97:	add    BYTE PTR [rdx+riz*2+0x1],ch
 1015c9e:	add    BYTE PTR [rax],al
 1015ca0:	mov    eax,0x162
 1015ca5:	add    BYTE PTR [rax],al
 1015ca7:	add    dh,al
 1015ca9:	(bad)  
 1015cab:	add    BYTE PTR [rax],al
 1015cad:	add    BYTE PTR [rax],al
 1015caf:	add    ah,bl
 1015cb1:	(bad)  
 1015cb3:	add    BYTE PTR [rax],al
 1015cb5:	add    BYTE PTR [rax],al
 1015cb7:	add    al,dh
 1015cb9:	(bad)  
 1015cbb:	add    BYTE PTR [rax],al
 1015cbd:	add    BYTE PTR [rax],al
 1015cbf:	add    ah,bh
 1015cc1:	(bad)  
 1015cc3:	add    BYTE PTR [rax],al
 1015cc5:	add    BYTE PTR [rax],al
 1015cc7:	add    BYTE PTR [rsi],al
 1015cc9:	movsxd eax,DWORD PTR [rcx]
 1015ccb:	add    BYTE PTR [rax],al
 1015ccd:	add    BYTE PTR [rax],al
 1015ccf:	add    BYTE PTR [rsi],ah
 1015cd1:	movsxd eax,DWORD PTR [rcx]
 1015cd3:	add    BYTE PTR [rax],al
 1015cd5:	add    BYTE PTR [rax],al
 1015cd7:	add    BYTE PTR [rbx+riz*2],bh
 1015cda:	add    DWORD PTR [rax],eax
 1015cdc:	add    BYTE PTR [rax],al
 1015cde:	add    BYTE PTR [rax],al
 1015ce0:	rex.RX movsxd r8d,DWORD PTR [rcx]
 1015ce3:	add    BYTE PTR [rax],al
 1015ce5:	add    BYTE PTR [rax],al
 1015ce7:	add    BYTE PTR [rbx+riz*2+0x1],dl
 1015ceb:	add    BYTE PTR [rax],al
 1015ced:	add    BYTE PTR [rax],al
 1015cef:	add    BYTE PTR [rbx+riz*2+0x1],bl
 1015cf3:	add    BYTE PTR [rax],al
 1015cf5:	add    BYTE PTR [rax],al
 1015cf7:	add    BYTE PTR [rsi+0x63],ah
 1015cfa:	add    DWORD PTR [rax],eax
 1015cfc:	add    BYTE PTR [rax],al
 1015cfe:	add    BYTE PTR [rax],al
 1015d00:	mov    al,0x65
 1015d02:	add    DWORD PTR [rax],eax
 1015d04:	add    BYTE PTR [rax],al
 1015d06:	add    BYTE PTR [rax],al
 1015d08:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1015d09:	add    DWORD PTR gs:[rax],eax
 1015d0c:	add    BYTE PTR [rax],al
 1015d0e:	add    BYTE PTR [rax],al
 1015d10:	(bad)  
 1015d11:	(bad)  
 1015d12:	add    DWORD PTR [rax],eax
 1015d14:	add    BYTE PTR [rax],al
 1015d16:	add    BYTE PTR [rax],al
 1015d18:	in     al,dx
 1015d19:	(bad)  
 1015d1a:	add    DWORD PTR [rax],eax
 1015d1c:	add    BYTE PTR [rax],al
 1015d1e:	add    BYTE PTR [rax],al
 1015d20:	fisub  WORD PTR [rcx+0x1]
 1015d23:	add    BYTE PTR [rax],al
 1015d25:	add    BYTE PTR [rax],al
 1015d27:	add    ah,dl
 1015d29:	(bad)  
 1015d2a:	add    DWORD PTR [rax],eax
 1015d2c:	add    BYTE PTR [rax],al
 1015d2e:	add    BYTE PTR [rax],al
 1015d30:	int3   
 1015d31:	(bad)  
 1015d32:	add    DWORD PTR [rax],eax
 1015d34:	add    BYTE PTR [rax],al
 1015d36:	add    BYTE PTR [rax],al
 1015d38:	ret    0x161
 1015d3b:	add    BYTE PTR [rax],al
 1015d3d:	add    BYTE PTR [rax],al
 1015d3f:	add    BYTE PTR [rax+0x161],bh
 1015d45:	add    BYTE PTR [rax],al
 1015d47:	add    BYTE PTR [rsi+0x161],ch
 1015d4d:	add    BYTE PTR [rax],al
 1015d4f:	add    BYTE PTR [rsi+0x161],ah
 1015d55:	add    BYTE PTR [rax],al
 1015d57:	add    BYTE PTR [rcx+riz*2+0x1],bl
 1015d5e:	add    BYTE PTR [rax],al
 1015d60:	mov    WORD PTR [rcx+0x1],fs
 1015d63:	add    BYTE PTR [rax],al
 1015d65:	add    BYTE PTR [rax],al
 1015d67:	add    BYTE PTR [rsi+0x61],bh
 1015d6a:	add    DWORD PTR [rax],eax
 1015d6c:	add    BYTE PTR [rax],al
 1015d6e:	add    BYTE PTR [rax],al
 1015d70:	jbe    0x1015dd3
 1015d72:	add    DWORD PTR [rax],eax
 1015d74:	add    BYTE PTR [rax],al
 1015d76:	add    BYTE PTR [rax],al
 1015d78:	push   0x61
 1015d7a:	add    DWORD PTR [rax],eax
 1015d7c:	add    BYTE PTR [rax],al
 1015d7e:	add    BYTE PTR [rax],al
 1015d80:	(bad)  
 1015d81:	(bad)  
 1015d82:	add    DWORD PTR [rax],eax
 1015d84:	add    BYTE PTR [rax],al
 1015d86:	add    BYTE PTR [rax],al
 1015d88:	pop    rax
 1015d89:	(bad)  
 1015d8a:	add    DWORD PTR [rax],eax
 1015d8c:	add    BYTE PTR [rax],al
 1015d8e:	add    BYTE PTR [rax],al
 1015d90:	rex.WRX (bad) 
 1015d92:	add    DWORD PTR [rax],eax
 1015d94:	add    BYTE PTR [rax],al
 1015d96:	add    BYTE PTR [rax],al
 1015d98:	rex.R (bad) 
 1015d9a:	add    DWORD PTR [rax],eax
 1015d9c:	add    BYTE PTR [rax],al
 1015d9e:	add    BYTE PTR [rax],al
 1015da0:	cmp    BYTE PTR [rcx+0x1],ah
 1015da3:	add    BYTE PTR [rax],al
 1015da5:	add    BYTE PTR [rax],al
 1015da7:	add    BYTE PTR [rcx+riz*2],ch
 1015daa:	add    DWORD PTR [rax],eax
 1015dac:	add    BYTE PTR [rax],al
 1015dae:	add    BYTE PTR [rax],al
 1015db0:	hlt    
 1015db1:	(bad)  
 1015db2:	add    DWORD PTR [rax],eax
 1015db4:	add    BYTE PTR [rax],al
 1015db6:	add    BYTE PTR [rax],al
 1015db8:	mov    edx,0x165
	...
 1015dc5:	add    BYTE PTR [rax],al
 1015dc7:	add    BYTE PTR [rbx],dl
 1015dc9:	add    BYTE PTR [rax],al
 1015dcb:	add    BYTE PTR [rax],al
 1015dcd:	add    BYTE PTR [rax],al
 1015dcf:	add    BYTE PTR [rsi],0x0
 1015dd2:	add    BYTE PTR [rax],al
 1015dd4:	add    BYTE PTR [rax],al
 1015dd6:	add    BYTE PTR [rax+0x12],al
 1015ddc:	add    BYTE PTR [rax],al
 1015dde:	add    BYTE PTR [rax+0x2a],al
 1015de4:	add    BYTE PTR [rax],al
 1015de6:	add    BYTE PTR [rax+0x10],al
 1015dec:	add    BYTE PTR [rax],al
 1015dee:	add    BYTE PTR [rax+0x29],al
 1015df4:	add    BYTE PTR [rax],al
 1015df6:	add    BYTE PTR [rax+0x2],al
 1015dfc:	add    BYTE PTR [rax],al
 1015dfe:	add    BYTE PTR [rax+0xe],al
 1015e04:	add    BYTE PTR [rax],al
 1015e06:	add    BYTE PTR [rax+0x3],al
 1015e0c:	add    BYTE PTR [rax],al
 1015e0e:	add    BYTE PTR [rax+0x9],al
 1015e14:	add    BYTE PTR [rax],al
 1015e16:	add    BYTE PTR [rax+0xa],al
 1015e1c:	add    BYTE PTR [rax],al
 1015e1e:	add    BYTE PTR [rax+0x1],al
 1015e24:	add    BYTE PTR [rax],al
 1015e26:	add    BYTE PTR [rax+0x32],al
 1015e2c:	add    BYTE PTR [rax],al
 1015e2e:	add    BYTE PTR [rax+0xf],al
 1015e34:	add    BYTE PTR [rax],al
 1015e36:	add    BYTE PTR [rax+0x0],al
 1015e3c:	add    BYTE PTR [rax],al
 1015e3e:	add    BYTE PTR [rax],al
 1015e40:	jp     0x1015ea5
 1015e42:	add    DWORD PTR [rax],eax
 1015e44:	add    BYTE PTR [rax],al
 1015e46:	add    BYTE PTR [rax],al
 1015e48:	mov    BYTE PTR [rbx+0x1],ah
	...
 1015e57:	add    dl,bh
 1015e59:	movsxd eax,DWORD PTR [rcx]
 1015e5b:	add    BYTE PTR [rax],al
 1015e5d:	add    BYTE PTR [rax],al
 1015e5f:	add    BYTE PTR [rsi],ah
 1015e61:	add    DWORD PTR fs:[rax],eax
 1015e64:	add    BYTE PTR [rax],al
 1015e66:	add    BYTE PTR [rax],al
 1015e68:	out    dx,al
 1015e69:	movsxd eax,DWORD PTR [rcx]
 1015e6b:	add    BYTE PTR [rax],al
 1015e6d:	add    BYTE PTR [rax],al
 1015e6f:	add    dl,bl
 1015e71:	movsxd eax,DWORD PTR [rcx]
 1015e73:	add    BYTE PTR [rax],al
 1015e75:	add    BYTE PTR [rax],al
 1015e77:	add    dl,cl
 1015e79:	movsxd eax,DWORD PTR [rcx]
 1015e7b:	add    BYTE PTR [rax],al
 1015e7d:	add    BYTE PTR [rax],al
 1015e7f:	add    BYTE PTR [rbx+riz*2+0x1],bh
 1015e86:	add    BYTE PTR [rax],al
 1015e88:	sbb    BYTE PTR [rcx+rax*1+0x0],ah
 1015e8c:	add    BYTE PTR [rax],al
 1015e8e:	add    BYTE PTR [rax],al
 1015e90:	or     al,0x64
 1015e92:	add    DWORD PTR [rax],eax
 1015e94:	add    BYTE PTR [rax],al
 1015e96:	add    BYTE PTR [rax],al
 1015e98:	scas   al,BYTE PTR es:[rdi]
 1015e99:	movsxd eax,DWORD PTR [rcx]
	...
 1015ea7:	add    BYTE PTR [rsi+0x2],ch
 1015eaa:	push   rdx
 1015eab:	gs addr32 push rcx
 1015eae:	jne    0x1015f15
 1015eb0:	jb     0x1015f2b
 1015eb2:	push   rsi
 1015eb3:	(bad)  
 1015eb4:	ins    BYTE PTR es:[rdi],dx
 1015eb5:	jne    0x1015f1c
 1015eb7:	rex.RB js 0x1015f11
 1015eba:	add    BYTE PTR [rax],al
 1015ebc:	(bad)  
 1015ebd:	add    dl,BYTE PTR [rdx+0x65]
 1015ec0:	addr32 rex.WRXB jo 0x1015f29
 1015ec4:	outs   dx,BYTE PTR ds:[rsi]
 1015ec5:	rex.WXB
 1015ec6:	gs jns 0x1015f0e
 1015ec9:	js     0x1015f22
 1015ecb:	add    BYTE PTR [rax],dh
 1015ecd:	add    dl,BYTE PTR [rdx+0x65]
 1015ed0:	rex.XB ins BYTE PTR es:[edi],dx
 1015ed3:	outs   dx,DWORD PTR ds:[rsi]
 1015ed4:	jae    0x1015f3b
 1015ed6:	rex.WXB
 1015ed7:	gs jns 0x1015eda
 1015eda:	rex.B
 1015edb:	rex.R push rsi
 1015edd:	push   r8
 1015edf:	xor    rsi,QWORD PTR [r10]
 1015ee2:	cs fs ins BYTE PTR es:[rdi],dx
 1015ee5:	ins    BYTE PTR es:[rdi],dx
 1015ee6:	add    BYTE PTR [rax],al
 1015ee8:	mov    BYTE PTR [rax],al
 1015eea:	rex.XB jb 0x1015f52
 1015eed:	(bad)  
 1015eee:	je     0x1015f55
 1015ef0:	imul   r13d,DWORD PTR [rbp+r12*2+0x41],0x4701b200
 1015ef9:	gs je  0x1015f3f
 1015efc:	outs   dx,DWORD PTR ds:[rsi]
 1015efd:	outs   dx,BYTE PTR ds:[rsi]
 1015efe:	jae    0x1015f6f
 1015f00:	ins    BYTE PTR es:[rdi],dx
 1015f01:	rex.WRB outs dx,DWORD PTR gs:[rsi]
 1015f04:	fs add BYTE PTR gs:[rax],al
 1015f08:	rex.WXB add al,0x53
 1015f0b:	gs je  0x1015f51
 1015f0e:	outs   dx,DWORD PTR ds:[rsi]
 1015f0f:	outs   dx,BYTE PTR ds:[rsi]
 1015f10:	jae    0x1015f81
 1015f12:	ins    BYTE PTR es:[rdi],dx
 1015f13:	rex.WRB outs dx,DWORD PTR gs:[rsi]
 1015f16:	fs add BYTE PTR gs:[rax],al
 1015f1a:	outs   dx,BYTE PTR ds:[rsi]
 1015f1b:	add    DWORD PTR [rdi+0x65],eax
 1015f1e:	je     0x1015f61
 1015f20:	rex.XB push r8
 1015f22:	add    BYTE PTR [rax],al
 1015f24:	imul   eax,DWORD PTR [rbx],0x746c754d
 1015f2a:	imul   eax,DWORD PTR [rdx+0x79],0x6f546574
 1015f31:	push   rdi
 1015f32:	imul   esp,DWORD PTR [rbp+riz*2+0x43],0x726168
 1015f3a:	imul   eax,DWORD PTR [rdx],0x47
 1015f3d:	gs je  0x1015f93
 1015f40:	je     0x1015fa6
 1015f42:	rex.W (bad) 
 1015f44:	outs   dx,BYTE PTR ds:[rsi]
 1015f45:	fs ins BYTE PTR es:[rdi],dx
 1015f47:	add    BYTE PTR gs:[rax],al
 1015f4a:	or     BYTE PTR [rdx],al
 1015f4c:	rex.RXB
 1015f4d:	gs je  0x1015f9c
 1015f50:	(bad)  
 1015f51:	jae    0x1015fc7
 1015f53:	rex.RB jb 0x1015fc8
 1015f56:	outs   dx,DWORD PTR ds:[rsi]
 1015f57:	jb     0x1015f59
 1015f59:	add    dl,bh
 1015f5b:	add    DWORD PTR [rdi+0x65],eax
 1015f5e:	je     0x1015fa6
 1015f60:	imul   ebp,DWORD PTR [rbp+riz*2+0x54],0x657079
 1015f68:	push   rdx
 1015f69:	add    BYTE PTR [rbx+0x6c],al
 1015f6c:	outs   dx,DWORD PTR ds:[rsi]
 1015f6d:	jae    0x1015fd4
 1015f6f:	rex.W (bad) 
 1015f71:	outs   dx,BYTE PTR ds:[rsi]
 1015f72:	fs ins BYTE PTR es:[rdi],dx
 1015f74:	add    BYTE PTR gs:[rdx],al
 1015f77:	add    al,BYTE PTR [rdi+0x65]
 1015f7a:	je     0x1015fc2
 1015f7c:	jne    0x1015fea
 1015f7e:	ins    BYTE PTR es:[rdi],dx
 1015f7f:	push   rax
 1015f80:	(bad)  
 1015f81:	je     0x1015feb
 1015f83:	rex.WRX (bad) 
 1015f85:	ins    DWORD PTR es:[rdi],dx
 1015f86:	gs push rdi
 1015f88:	add    BYTE PTR [rax],al
 1015f8a:	sub    eax,DWORD PTR [rbx+rdx*2]
 1015f8d:	gs (bad) 
 1015f8f:	jb     0x1015ff4
 1015f91:	push   0x68746150
 1015f96:	push   rdi
 1015f97:	add    dl,bl
 1015f99:	add    DWORD PTR [rdi+0x65],eax
 1015f9c:	je     0x1015fe2
 1015f9e:	jb     0x1016009
 1015fa0:	jbe    0x1016007
 1015fa2:	push   rsp
 1015fa3:	jns    0x1016015
 1015fa5:	gs push rdi
 1015fa7:	add    BYTE PTR [rax],al
 1015fa9:	add    eax,0x74726956
 1015fae:	jne    0x1016011
 1015fb0:	ins    BYTE PTR es:[rdi],dx
 1015fb1:	push   rcx
 1015fb2:	jne    0x1016019
 1015fb4:	jb     0x101602f
 1015fb6:	add    BYTE PTR [rax],al
 1015fb8:	push   0x65724601
 1015fbd:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 1015fc6:	movabs ds:0x7265735574654702,eax
 1015fcf:	rex.R
 1015fd0:	gs data16 (bad) 
 1015fd3:	jne    0x1016041
 1015fd5:	je     0x1016023
 1015fd7:	rex.XB
 1015fd8:	rex.WB
 1015fd9:	add    BYTE PTR [rax],r8b
 1015fdc:	or     BYTE PTR [rip+0x74696157],al        # 0x756ac139
 1015fe2:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1015fe4:	jb     0x1016039
 1015fe6:	imul   ebp,DWORD PTR [rsi+0x67],0x624f656c
 1015fed:	push   0x65
 1015fef:	movsxd esi,DWORD PTR [rax+rax*1+0x67]
 1015ff3:	add    al,0x53
 1015ff5:	gs je  0x101603d
 1015ff8:	jbe    0x101605f
 1015ffa:	outs   dx,BYTE PTR ds:[rsi]
 1015ffb:	je     0x1015ffd
 1015ffd:	add    BYTE PTR [rbx+rax*1+0x7074754f],cl
 1016004:	jne    0x101607a
 1016006:	rex.R
 1016007:	gs (bad) 
 1016009:	jne    0x1016072
 101600b:	push   rbx
 101600c:	je     0x1016080
 101600e:	imul   ebp,DWORD PTR [rsi+0x67],0x9a000057
 1016015:	add    al,BYTE PTR [rdi+0x65]
 1016018:	je     0x101606e
 101601a:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 1016021:	je     0x1016023
 1016023:	add    BYTE PTR [rdx+0x74655304],ch
 1016029:	push   rsp
 101602a:	push   0x64616572
 101602f:	push   rbp
 1016030:	rex.WB
 1016031:	rex.WR (bad) 
 1016033:	outs   dx,BYTE PTR ds:[rsi]
 1016034:	addr32 jne 0x1016098
 1016037:	add    BYTE PTR gs:[ecx+0x3],al
 101603c:	rex.WR outs dx,DWORD PTR ds:[rsi]
 101603e:	(bad)  
 101603f:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 1016048:	add    BYTE PTR [rax],al
 101604a:	(bad)  
 101604b:	add    BYTE PTR [rbx+0x72],al
 101604e:	gs (bad) 
 1016050:	je     0x10160b7
 1016052:	rex.RB jbe 0x10160ba
 1016055:	outs   dx,BYTE PTR ds:[rsi]
 1016056:	je     0x1016099
 1016058:	add    BYTE PTR [rax],al
 101605a:	sbb    al,BYTE PTR [rdx]
 101605c:	rex.RXB
 101605d:	gs je  0x10160ad
 1016060:	outs   dx,DWORD PTR ds:[rsi]
 1016061:	fs jne 0x10160d0
 1016064:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 101606e:	add    BYTE PTR [rax],al
 1016070:	(bad)  
 1016071:	add    eax,0x7274736c
 1016076:	ins    BYTE PTR es:[rdi],dx
 1016077:	outs   dx,BYTE PTR gs:[rsi]
 1016079:	push   rdi
 101607a:	add    BYTE PTR [rax],al
 101607c:	add    BYTE PTR [rbx+rdx*2],0x65
 1016080:	je     0x10160ce
 1016082:	(bad)  
 1016083:	jae    0x10160f9
 1016085:	rex.RB jb 0x10160fa
 1016088:	outs   dx,DWORD PTR ds:[rsi]
 1016089:	jb     0x101608b
 101608b:	add    BYTE PTR [rdx+rax*1+0x47],cl
 101608f:	gs je  0x10160e2
 1016092:	jb     0x1016103
 1016094:	movsxd eax,DWORD PTR [rcx+0x64]
 1016097:	fs jb  0x10160ff
 101609a:	jae    0x101610f
 101609c:	add    BYTE PTR [rax],al
 101609e:	adc    al,BYTE PTR [rdx+rdx*2]
 10160a1:	gs jae 0x1016109
 10160a4:	je     0x10160eb
 10160a6:	jbe    0x101610d
 10160a8:	outs   dx,BYTE PTR ds:[rsi]
 10160a9:	je     0x10160ab
 10160ab:	add    BYTE PTR [rbx],bh
 10160ad:	add    al,0x53
 10160af:	gs je  0x10160f5
 10160b2:	outs   dx,DWORD PTR ds:[rsi]
 10160b3:	outs   dx,BYTE PTR ds:[rsi]
 10160b4:	jae    0x1016125
 10160b6:	ins    BYTE PTR es:[rdi],dx
 10160b7:	gs rex.XB je 0x101612d
 10160bb:	ins    BYTE PTR es:[rdi],dx
 10160bc:	rex.W (bad) 
 10160be:	outs   dx,BYTE PTR ds:[rsi]
 10160bf:	fs ins BYTE PTR es:[rdi],dx
 10160c1:	gs jb  0x10160c4
 10160c4:	sbb    DWORD PTR [rdx],eax
 10160c6:	rex.RXB
 10160c7:	gs je  0x1016117
 10160ca:	outs   dx,DWORD PTR ds:[rsi]
 10160cb:	fs jne 0x101613a
 10160ce:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x41656d61
 10160d8:	add    BYTE PTR [rax],al
 10160da:	(bad)  
 10160db:	add    ecx,DWORD PTR [rdi+rbp*2+0x61]
 10160df:	imul   r12,QWORD PTR fs:[rdx+0x72],0x45797261
 10160e8:	js     0x101612b
 10160ea:	add    BYTE PTR [rax],al
 10160ec:	fild   DWORD PTR [rdx]
 10160ee:	rex.W
 10160ef:	gs (bad) 
 10160f1:	jo     0x1016146
 10160f3:	gs je  0x101613f
 10160f6:	outs   dx,BYTE PTR ds:[rsi]
 10160f7:	outs   dx,WORD PTR ds:[rsi]
 10160f9:	jb     0x1016168
 10160fb:	(bad)  
 10160fc:	je     0x1016167
 10160fe:	outs   dx,DWORD PTR ds:[rsi]
 10160ff:	outs   dx,BYTE PTR ds:[rsi]
 1016100:	add    BYTE PTR [rax],al
 1016102:	and    eax,DWORD PTR [rcx]
 1016104:	rex.RB js 0x1016177
 1016107:	(bad)  
 1016108:	outs   dx,BYTE PTR ds:[rsi]
 1016109:	rex.RB outs dx,BYTE PTR fs:[rsi]
 101610c:	jbe    0x1016177
 101610e:	jb     0x101617f
 1016110:	outs   dx,BYTE PTR ds:[rsi]
 1016111:	ins    DWORD PTR es:[rdi],dx
 1016112:	outs   dx,BYTE PTR gs:[rsi]
 1016114:	je     0x1016169
 1016116:	je     0x101618a
 1016118:	imul   ebp,DWORD PTR [rsi+0x67],0x4b005773
 101611f:	rex.RB push r10
 1016121:	rex.WRX
 1016122:	rex.RB
 1016123:	xor    r14,QWORD PTR [rdx]
 1016126:	cs fs ins BYTE PTR es:[rdi],dx
 1016129:	ins    BYTE PTR es:[rdi],dx
 101612a:	add    BYTE PTR [rax],al
 101612c:	(bad)  
 101612e:	pop    rdi
 101612f:	jae    0x10161a5
 1016131:	jb     0x101619c
 1016133:	movsxd ebp,DWORD PTR [rbp+0x70]
 1016136:	add    BYTE PTR [rax],al
 1016138:	sbb    DWORD PTR [rdi+rbx*2],eax
 101613b:	jae    0x10161b1
 101613d:	jb     0x10161ad
 101613f:	imul   esp,DWORD PTR [rbx+0x6d],0x5b00070
 1016146:	jo     0x10161ad
 1016148:	jb     0x10161bc
 101614a:	outs   dx,DWORD PTR ds:[rsi]
 101614b:	jb     0x101614d
 101614d:	add    bl,ah
 101614f:	add    eax,0x6e727473
 1016154:	movsxd ebp,DWORD PTR [rbp+0x70]
 1016157:	add    BYTE PTR [rbx+0x5],ah
 101615a:	data16 jb 0x10161c2
 101615d:	add    BYTE PTR gs:[rax],al
 1016160:	sahf   
 1016161:	add    eax,0x6c6c616d
 1016166:	outs   dx,DWORD PTR ds:[rsi]
 1016167:	movsxd eax,DWORD PTR [rax]
 1016169:	add    BYTE PTR [rip+0x74735f04],ah        # 0x7574c073
 101616f:	jb     0x10161e5
 1016171:	outs   dx,DWORD PTR ds:[rsi]
 1016172:	imul   esi,DWORD PTR [rsi],0x55e0034
 1016178:	data16 jo 0x10161f0
 101617b:	je     0x10161f0
 101617d:	add    BYTE PTR [rcx+rax*1+0x5f],dl
 1016181:	pop    rdi
 1016182:	imul   ebp,DWORD PTR [rdi+0x62],0x6e75665f
 1016189:	movsxd eax,DWORD PTR [rax]
 101618b:	add    BYTE PTR [rdi+0x65725f03],dh
 1016191:	jae    0x10161f8
 1016193:	je     0x1016208
 1016195:	je     0x1016202
 1016197:	outs   dx,DWORD PTR ds:[rsi]
 1016198:	data16 ins BYTE PTR es:[rdi],dx
 101619a:	ja     0x101619c
 101619c:	xlat   BYTE PTR ds:[rbx]
 101619d:	add    eax,0x63727473
 10161a2:	push   0x38000072
 10161a7:	add    eax,0x696f7461
 10161ac:	add    BYTE PTR [rax],al
 10161ae:	(bad)  
 10161af:	add    eax,0x6e616373
 10161b4:	pop    di
 10161b6:	jae    0x10161b8
 10161b8:	out    dx,al
 10161b9:	add    eax,0x74727473
 10161be:	outs   dx,DWORD PTR ds:[rsi]
 10161bf:	ins    BYTE PTR es:[rdi],dx
 10161c0:	add    BYTE PTR [rax],al
 10161c2:	mov    bl,0x5
 10161c4:	jo     0x1016238
 10161c6:	imul   ebp,DWORD PTR [rsi+0x74],0x59000066
 10161cd:	add    eax,0x65706f66
 10161d2:	outs   dx,BYTE PTR ds:[rsi]
 10161d3:	add    BYTE PTR [rbx+0x5],bl
 10161d6:	data16 jo 0x101624b
 10161d9:	imul   ebp,DWORD PTR [rsi+0x74],0x47f0066
 10161e0:	pop    rdi
 10161e1:	jbe    0x1016256
 10161e3:	outs   dx,BYTE PTR ds:[rsi]
 10161e4:	jo     0x1016258
 10161e6:	imul   ebp,DWORD PTR [rsi+0x74],0x39000066
 10161ed:	add    eax,0x6c6f7461
 10161f2:	add    BYTE PTR [rax],al
 10161f4:	rex.WRXB add rax,0x756c6666
 10161fa:	jae    0x1016264
 10161fc:	add    BYTE PTR [rax],al
 10161fe:	push   rax
 10161ff:	add    eax,0x74656766
 1016204:	movsxd eax,DWORD PTR [rax]
 1016206:	push   rdx
 1016207:	add    eax,0x74656766
 101620c:	jae    0x101620e
 101620e:	(bad)  
 101620f:	(bad)  
 1016210:	ja     0x1016275
 1016212:	jae    0x1016282
 1016214:	movsxd esi,DWORD PTR [rax+0x79]
 1016217:	pop    rdi
 1016218:	jae    0x101621a
 101621a:	(bad)  
 101621b:	add    ebx,DWORD PTR [rdi+0x6d]
 101621e:	(bad)  
 101621f:	imul   esp,DWORD PTR [rbp+0x70],0x61
 1016223:	je     0x101628d
 1016225:	pop    rdi
 1016226:	jae    0x1016228
 1016228:	call   0x7375d532
 101622d:	jb     0x1016292
 101622f:	push   0x3fc0072
 1016234:	pop    rdi
 1016235:	jae    0x10162a7
 1016237:	ins    BYTE PTR es:[rdi],dx
 1016238:	imul   esi,DWORD PTR [rax+rsi*2+0x61],0x735f6874
 1016240:	add    BYTE PTR [rax],al
 1016242:	sahf   
 1016243:	add    DWORD PTR [rdi+0x61],ebx
 1016246:	ins    DWORD PTR es:[rdi],dx
 1016247:	jae    0x10162b0
 1016249:	pop    rdi
 101624a:	gs js  0x10162b6
 101624d:	je     0x101624f
 101624f:	add    BYTE PTR [rdx+0x1],dl
 1016252:	pop    rdi
 1016253:	pop    rdi
 1016254:	addr32 gs je 0x10162c5
 1016258:	(bad)  
 1016259:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 1016260:	(bad)  
 1016261:	add    DWORD PTR [rdi+0x5f],ebx
 1016264:	rex.XB pop r15
 1016266:	jae    0x10162d8
 1016268:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 101626c:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 1016273:	ins    BYTE PTR es:[rdi],dx
 1016274:	gs jb  0x1016277
 1016277:	add    BYTE PTR [rdx],bl
 1016279:	add    DWORD PTR [rdi+0x58],ebx
 101627c:	movsxd esi,DWORD PTR [rax+0x74]
 101627f:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 1016288:	pop    rdi
 1016289:	gs js  0x10162f5
 101628c:	je     0x101628e
 101628e:	mov    ch,0x1
 1016290:	pop    rdi
 1016291:	movsxd esp,DWORD PTR [rbp+0x78]
 1016294:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 101629c:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0153
 10162a4:	imul   ebp,DWORD PTR [rsi+0x69],0x766e6574
 10162ab:	add    BYTE PTR [rsi+0x6e695f02],al
 10162b1:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 10162b9:	add    bl,BYTE PTR [rdi+0x69]
 10162bc:	outs   dx,BYTE PTR ds:[rsi]
 10162bd:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 10162c5:	add    ch,al
 10162c7:	add    DWORD PTR [rdi+0x63],ebx
 10162ca:	outs   dx,DWORD PTR ds:[rsi]
 10162cb:	outs   dx,BYTE PTR ds:[rsi]
 10162cc:	imul   sp,WORD PTR [rdi+0x74],0x7268
 10162d2:	gs (bad) 
 10162d4:	fs ins BYTE PTR es:[rdi],dx
 10162d6:	outs   dx,DWORD PTR ds:[rsi]
 10162d7:	movsxd esp,DWORD PTR [rcx+0x6c]
 10162da:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 10162df:	pop    rdi
 10162e0:	jae    0x1016347
 10162e2:	je     0x1016359
 10162e4:	jae    0x101634b
 10162e6:	jb     0x1016355
 10162e8:	(bad)  
 10162e9:	je     0x1016353
 10162eb:	gs jb  0x1016360
 10162ee:	add    BYTE PTR [rax],al
 10162f0:	(bad)
 10162f4:	outs   dx,DWORD PTR ds:[rsi]
 10162f5:	ins    DWORD PTR es:[rdi],dx
 10162f6:	ins    DWORD PTR es:[rdi],dx
 10162f7:	outs   dx,DWORD PTR ds:[rsi]
 10162f8:	fs add BYTE PTR gs:[rax],al
 10162fc:	sbb    al,0x2
 10162fe:	pop    rdi
 10162ff:	ins    WORD PTR es:[rdi],dx
 1016301:	outs   dx,DWORD PTR ds:[rsi]
 1016302:	fs add BYTE PTR gs:[rax],al
 1016306:	jns    0x1016309
 1016308:	pop    rdi
 1016309:	pop    rdi
 101630a:	jae    0x1016371
 101630c:	je     0x101636d
 101630e:	(bad)  
 101630f:	jo     0x1016381
 1016311:	pop    rdi
 1016312:	je     0x101638d
 1016314:	jo     0x101637b
 1016316:	add    BYTE PTR [rax],al
 1016318:	rex.WRB push r11
 101631a:	push   rsi
 101631b:	rex.XB push r10
 101631d:	xor    DWORD PTR [rax],esi
 101631f:	xor    BYTE PTR [rsi],ch
 1016321:	fs ins BYTE PTR es:[rdi],dx
 1016323:	ins    BYTE PTR es:[rdi],dx
 1016324:	add    BYTE PTR [rax],al
 1016326:	rex.RX add DWORD PTR [rdi+0x5f],r11d
 101632a:	movsxd esi,DWORD PTR [rdx+0x74]
 101632d:	pop    rdi
 101632e:	fs gs (bad) 
 1016331:	jne    0x101639a
 1016333:	addr32 gs jb 0x1016396
 1016337:	push   0x6b6f6f
 101633c:	pop    rbx
 101633d:	add    al,0x5f
 101633f:	jne    0x10163af
 1016341:	ins    BYTE PTR es:[rdi],dx
 1016342:	outs   dx,DWORD PTR ds:[rsi]
 1016343:	movsxd ebp,DWORD PTR [rbx+0x0]
 1016346:	add    QWORD PTR [rdi+0x5f],rbx
 101634a:	fs ins BYTE PTR es:[rdi],dx
 101634c:	ins    BYTE PTR es:[rdi],dx
 101634d:	outs   dx,DWORD PTR ds:[rsi]
 101634e:	outs   dx,BYTE PTR ds:[rsi]
 101634f:	gs js  0x10163bb
 1016352:	je     0x1016354
 1016354:	test   BYTE PTR [rdx],0x5f
 1016357:	ins    BYTE PTR es:[rdi],dx
 1016358:	outs   dx,DWORD PTR ds:[rsi]
 1016359:	movsxd ebp,DWORD PTR [rbx+0x0]
 101635c:	popf   
 101635d:	add    ebx,DWORD PTR [rdi+0x6f]
 1016360:	outs   dx,BYTE PTR ds:[rsi]
 1016361:	gs js  0x10163cd
 1016364:	je     0x1016366
 1016366:	add    BYTE PTR [rcx],al
 1016368:	(bad)  
 1016369:	je     0x10163d0
 101636b:	jb     0x10163da
 101636d:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 1016374:	pop    rcx
 1016375:	pop    r8
 1016377:	pop    rax
 1016378:	pop    rdx
 1016379:	add    BYTE PTR [rip+0x61684300],dh        # 0x6269a67f
 101637f:	jb     0x10163d5
 1016381:	outs   dx,DWORD PTR ds:[rsi]
 1016382:	rex.WRXB
 1016383:	gs ins DWORD PTR es:[rdi],dx
 1016385:	add    BYTE PTR [r8],al
 1016388:	inc    DWORD PTR [rcx]
 101638a:	rex.WR outs dx,DWORD PTR ds:[rsi]
 101638c:	(bad)  
 101638d:	fs push rbx
 101638f:	je     0x1016403
 1016391:	imul   ebp,DWORD PTR [rsi+0x67],0x53550041
 1016398:	rex.RB push r10
 101639a:	xor    esi,DWORD PTR [rdx]
 101639c:	cs fs ins BYTE PTR es:[rdi],dx
 101639f:	ins    BYTE PTR es:[rdi],dx
 10163a0:	add    BYTE PTR [rax],al
 10163a2:	rex.WRXB
 10163a3:	rex.R
 10163a4:	rex.X
 10163a5:	rex.XB xor esi,DWORD PTR [r10]
 10163a8:	cs fs ins BYTE PTR es:[rdi],dx
 10163ab:	ins    BYTE PTR es:[rdi],dx
 10163ac:	add    BYTE PTR [rax],al
 10163ae:	push   rcx
 10163af:	add    BYTE PTR [rdx+0x63],ah
 10163b2:	jo     0x1016413
 10163b4:	movsxd ebp,DWORD PTR [rdi+0x6c]
 10163b7:	ins    WORD PTR es:[rdi],dx
 10163b9:	je     0x10163bb
 10163bb:	add    BYTE PTR [rax+rax*1+0x62],dl
 10163bf:	movsxd esi,DWORD PTR [rax+0x5f]
 10163c2:	movsxd ebp,DWORD PTR [rdi+0x6c]
 10163c5:	jne    0x1016434
 10163c7:	outs   dx,BYTE PTR ds:[rsi]
 10163c8:	jae    0x10163ca
 10163ca:	movsxd eax,DWORD PTR [rax]
 10163cc:	(bad)  
 10163ce:	jo     0x101642f
 10163d0:	ja     0x1016444
 10163d2:	imul   esi,DWORD PTR [rbp+riz*2+0x66],0x41746d
 10163da:	pop    rcx
 10163db:	add    BYTE PTR [rdx+0x63],ah
 10163de:	jo     0x101643f
 10163e0:	addr32 gs je 0x1016458
 10163e4:	jns    0x1016456
 10163e6:	outs   dx,BYTE PTR gs:[rsi]
 10163e8:	(bad)  
 10163e9:	ins    DWORD PTR es:[rdi],dx
 10163ea:	add    BYTE PTR gs:[r8],al
 10163ee:	pop    rbx
 10163ef:	add    BYTE PTR [rdx+0x63],ah
 10163f2:	jo     0x1016453
 10163f4:	imul   ebp,DWORD PTR [rsi+0x69],0x61004174
 10163fb:	add    BYTE PTR [rdx+0x63],ah
 10163fe:	jo     0x101645f
 1016400:	jae    0x1016467
 1016402:	je     0x1016466
 1016404:	jne    0x1016472
 1016406:	imul   ebp,DWORD PTR [rbp+0x6f],0x64
 101640a:	add    BYTE PTR gs:[rdi+0x0],dl
 101640e:	(bad)  
 1016410:	jo     0x1016471
 1016412:	gs js  0x101647a
 1016415:	movsxd eax,DWORD PTR [rax]
 1016417:	add    BYTE PTR [rbp+0x0],dl
 101641a:	(bad)  
 101641c:	jo     0x101647d
 101641e:	movsxd ebp,DWORD PTR [rdi+0x6e]
 1016421:	je     0x1016495
 1016423:	outs   dx,DWORD PTR ds:[rsi]
 1016424:	ins    BYTE PTR es:[rdi],dx
 1016425:	add    BYTE PTR [rsi+0x0],bl
 1016428:	(bad)  
 101642a:	jo     0x101648b
 101642c:	jb     0x1016493
 101642e:	(bad)  
 101642f:	fs ins WORD PTR es:[rdi],dx
 1016432:	je     0x1016475
 1016434:	add    BYTE PTR [rax],al
 1016436:	jae    0x10164a9
 1016438:	ins    BYTE PTR es:[rdi],dx
 1016439:	outs   dx,BYTE PTR ds:[rsi]
 101643a:	movsxd ebp,DWORD PTR [rcx+rbp*2+0x31]
 101643e:	xor    DWORD PTR [rsi],ebp
 1016440:	fs ins BYTE PTR es:[rdi],dx
 1016442:	ins    BYTE PTR es:[rdi],dx
 1016443:	add    al,al
 1016445:	add    al,0x53
 1016447:	ins    BYTE PTR es:[rdi],dx
 1016448:	gs gs jo 0x101644c
 101644c:	out    dx,al
 101644d:	add    BYTE PTR [rbp+0x6e],al
 1016450:	movsxd ebp,DWORD PTR [rdi+0x64]
 1016453:	gs push rax
 1016455:	outs   dx,DWORD PTR ds:[rsi]
 1016456:	imul   ebp,DWORD PTR [rsi+0x74],0xce007265
 101645d:	add    al,0x54
 101645f:	gs jb  0x10164cf
 1016462:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 1016469:	outs   dx,DWORD PTR ds:[rsi]
 101646a:	movsxd esp,DWORD PTR [rbp+0x73]
 101646d:	jae    0x101646f
 101646f:	add    dh,al
 1016471:	add    DWORD PTR [rdi+0x65],eax
 1016474:	je     0x10164b9
 1016476:	jne    0x10164ea
 1016478:	jb     0x10164df
 101647a:	outs   dx,BYTE PTR ds:[rsi]
 101647b:	je     0x10164cd
 101647d:	jb     0x10164ee
 101647f:	movsxd esp,DWORD PTR [rbp+0x73]
 1016482:	jae    0x1016484
 1016484:	loop   0x101648a
 1016486:	push   rbp
 1016487:	outs   dx,BYTE PTR ds:[rsi]
 1016488:	push   0x6c646e61
 101648d:	gs fs rex.RB js 0x10164f5
 1016492:	gs jo  0x1016509
 1016495:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 101649c:	gs jb  0x101649f
 101649f:	add    BYTE PTR [rbx+0x74655304],dh
 10164a5:	push   rbp
 10164a6:	outs   dx,BYTE PTR ds:[rsi]
 10164a7:	push   0x6c646e61
 10164ac:	gs fs rex.RB js 0x1016514
 10164b1:	gs jo  0x1016528
 10164b4:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 10164bb:	gs jb  0x10164be
 10164be:	add    al,BYTE PTR [rbx]
 10164c0:	rex.WB jae 0x1016507
 10164c3:	gs (bad) 
 10164c5:	jne    0x101652e
 10164c7:	addr32 gs jb 0x101651b
 10164cb:	jb     0x1016532
 10164cd:	jae    0x1016534
 10164cf:	outs   dx,BYTE PTR ds:[rsi]
 10164d0:	je     0x10164d2
 10164d2:	es add al,0x52
 10164d5:	je     0x1016543
 10164d7:	push   rsi
 10164d8:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 10164df:	outs   dx,BYTE PTR ds:[rsi]
 10164e0:	ja     0x101654b
 10164e2:	outs   dx,BYTE PTR ds:[rsi]
 10164e3:	add    BYTE PTR fs:[rax],al
 10164e6:	(bad)  
 10164e7:	add    al,0x52
 10164e9:	je     0x1016557
 10164eb:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10164ed:	outs   dx,DWORD PTR ds:[rsi]
 10164ee:	imul   esi,DWORD PTR [rbp+0x70],0x46
 10164f2:	jne    0x1016562
 10164f4:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 10164f8:	outs   dx,BYTE PTR ds:[rsi]
 10164f9:	rex.RB outs dx,BYTE PTR ds:[rsi]
 10164fb:	je     0x101656f
 10164fd:	jns    0x10164ff
 10164ff:	add    BYTE PTR [rax],bl
 1016501:	add    al,0x52
 1016503:	je     0x1016571
 1016505:	rex.XB (bad) 
 1016507:	jo     0x101657d
 1016509:	jne    0x101657d
 101650b:	rex.XB outs dx,DWORD PTR gs:[rsi]
 101650e:	outs   dx,BYTE PTR ds:[rsi]
 101650f:	je     0x1016576
 1016511:	js     0x1016587
 1016513:	add    bl,cl
 1016515:	add    BYTE PTR [rbp+riz*2+0x63],al
 1016519:	outs   dx,DWORD PTR ds:[rsi]
 101651a:	fs gs push rax
 101651d:	outs   dx,DWORD PTR ds:[rsi]
 101651e:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 1016525:	add    edx,DWORD PTR [rcx+0x75]
 1016528:	gs jb  0x10165a4
 101652b:	push   rax
 101652c:	gs jb  0x1016595
 101652f:	outs   dx,DWORD PTR ds:[rsi]
 1016530:	jb     0x101659f
 1016532:	(bad)  
 1016533:	outs   dx,BYTE PTR ds:[rsi]
 1016534:	movsxd esp,DWORD PTR [rbp+0x43]
 1016537:	outs   dx,DWORD PTR ds:[rsi]
 1016538:	jne    0x10165a8
 101653a:	je     0x10165a1
 101653c:	jb     0x101653e
 101653e:	retf   
 101653f:	add    DWORD PTR [rdi+0x65],eax
 1016542:	je     0x1016587
 1016544:	jne    0x10165b8
 1016546:	jb     0x10165ad
 1016548:	outs   dx,BYTE PTR ds:[rsi]
 1016549:	je     0x101659f
 101654b:	push   0x64616572
 1016550:	rex.WB
 1016551:	add    BYTE PTR fs:[rax],al
 1016554:	mov    DWORD PTR [rcx],0x43746547
 101655a:	jne    0x10165ce
 101655c:	jb     0x10165c3
 101655e:	outs   dx,BYTE PTR ds:[rsi]
 101655f:	je     0x10165b1
 1016561:	jb     0x10165d2
 1016563:	movsxd esp,DWORD PTR [rbp+0x73]
 1016566:	jae    0x10165b1
 1016568:	add    BYTE PTR fs:[rax+0x74654702],al
 101656f:	push   rbx
 1016570:	jns    0x10165e5
 1016572:	je     0x10165d9
 1016574:	ins    DWORD PTR es:[rdi],dx
 1016575:	push   rsp
 1016576:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 101657d:	ins    BYTE PTR es:[rdi],dx
 101657e:	gs push rsp
 1016580:	imul   ebp,DWORD PTR [rbp+0x65],0x47017800
 1016587:	gs je  0x10165cd
 101658a:	push   rax
 101658b:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101658d:	outs   dx,WORD PTR ds:[rsi]
 101658f:	add    BYTE PTR [rax],ah
 1016591:	add    eax,0x65646957
 1016596:	rex.XB push 0x6f547261
 101659c:	rex.WRB jne 0x101660b
 101659f:	je     0x101660a
 10165a1:	rex.X jns 0x1016618
 10165a4:	add    BYTE PTR gs:[rcx+0x6d656d05],ch
 10165ab:	movsxd esi,DWORD PTR [rax+0x79]
 10165ae:	add    BYTE PTR [rax],al
 10165b0:	lods   eax,DWORD PTR ds:[rsi]
 10165b1:	add    eax,0x736d656d
 10165b6:	gs je  0x10165b9
 10165b9:	add    BYTE PTR [rax],ch
 10165bb:	add    DWORD PTR [rdi+0x5f],ebx
 10165be:	rex.XB js 0x1016639
 10165c1:	rex.RX jb 0x1016625
 10165c4:	ins    DWORD PTR es:[rdi],dx
 10165c5:	gs rex.W (bad) 
 10165c8:	outs   dx,BYTE PTR ds:[rsi]
 10165c9:	fs ins BYTE PTR es:[rdi],dx
 10165cb:	gs jb  0x1016601
	...
