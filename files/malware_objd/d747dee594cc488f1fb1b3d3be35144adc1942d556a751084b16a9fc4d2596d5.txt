
d747dee594cc488f1fb1b3d3be35144adc1942d556a751084b16a9fc4d2596d5.exe:     file format pei-x86-64


Disassembly of section .text:

0000000065001000 <.text>:
    65001000:	lea    rax,[rip+0x34101]        # 0x65035108
    65001007:	mov    QWORD PTR [rcx],rax
    6500100a:	jmp    0x6501d320
    6500100f:	int3   
    65001010:	mov    QWORD PTR [rsp+0x8],rbx
    65001015:	push   rdi
    65001016:	sub    rsp,0x20
    6500101a:	lea    rax,[rip+0x340e7]        # 0x65035108
    65001021:	mov    ebx,edx
    65001023:	mov    rdi,rcx
    65001026:	mov    QWORD PTR [rcx],rax
    65001029:	call   0x6501d320
    6500102e:	test   bl,0x1
    65001031:	je     0x6500103b
    65001033:	mov    rcx,rdi
    65001036:	call   0x6501d190
    6500103b:	mov    rax,rdi
    6500103e:	mov    rbx,QWORD PTR [rsp+0x30]
    65001043:	add    rsp,0x20
    65001047:	pop    rdi
    65001048:	ret    
    65001049:	int3   
    6500104a:	int3   
    6500104b:	int3   
    6500104c:	int3   
    6500104d:	int3   
    6500104e:	int3   
    6500104f:	int3   
    65001050:	sub    rsp,0x28
    65001054:	mov    DWORD PTR [rsp+0x30],ecx
    65001058:	lea    rdx,[rip+0x40081]        # 0x650410e0
    6500105f:	lea    rcx,[rsp+0x30]
    65001064:	call   0x6501daf0
    65001069:	int3   
    6500106a:	int3   
    6500106b:	int3   
    6500106c:	int3   
    6500106d:	int3   
    6500106e:	int3   
    6500106f:	int3   
    65001070:	mov    QWORD PTR [rsp+0x18],rbx
    65001075:	mov    QWORD PTR [rsp+0x20],rsi
    6500107a:	push   rdi
    6500107b:	sub    rsp,0x30
    6500107f:	mov    rdi,rcx
    65001082:	mov    ecx,0x2710
    65001087:	call   QWORD PTR [rip+0x32ffb]        # 0x65034088
    6500108d:	xor    esi,esi
    6500108f:	mov    DWORD PTR [rsp+0x40],esi
    65001093:	mov    ebx,esi
    65001095:	data16 data16 xchg ax,ax
    65001099:	data16 xchg ax,ax
    6500109c:	data16 data16 xchg ax,ax
    650010a0:	lea    r9,[rsp+0x48]
    650010a5:	lea    rdx,[rsp+0x40]
    650010aa:	mov    r8d,0x4
    650010b0:	mov    rcx,rdi
    650010b3:	mov    QWORD PTR [rsp+0x20],rsi
    650010b8:	call   QWORD PTR [rip+0x33042]        # 0x65034100
    650010be:	test   eax,eax
    650010c0:	je     0x650010ca
    650010c2:	add    ebx,0x1
    650010c5:	cmp    ebx,0xa
    650010c8:	jne    0x650010a0
    650010ca:	test   rdi,rdi
    650010cd:	je     0x650010e8
    650010cf:	call   QWORD PTR [rip+0x32fa3]        # 0x65034078
    650010d5:	mov    rcx,rdi
    650010d8:	mov    ebx,eax
    650010da:	call   QWORD PTR [rip+0x32f90]        # 0x65034070
    650010e0:	mov    ecx,ebx
    650010e2:	call   QWORD PTR [rip+0x33020]        # 0x65034108
    650010e8:	mov    rbx,QWORD PTR [rsp+0x50]
    650010ed:	mov    rsi,QWORD PTR [rsp+0x58]
    650010f2:	xor    eax,eax
    650010f4:	add    rsp,0x30
    650010f8:	pop    rdi
    650010f9:	ret    
    650010fa:	int3   
    650010fb:	int3   
    650010fc:	int3   
    650010fd:	int3   
    650010fe:	int3   
    650010ff:	int3   
    65001100:	rex push rbx
    65001102:	push   rbp
    65001103:	push   rsi
    65001104:	push   rdi
    65001105:	sub    rsp,0x58
    65001109:	xor    ebp,ebp
    6500110b:	mov    rsi,rcx
    6500110e:	mov    QWORD PTR [rsp+0x48],rcx
    65001113:	mov    QWORD PTR [rsp+0x40],rbp
    65001118:	mov    rdi,QWORD PTR [rcx+0x18]
    6500111c:	call   QWORD PTR [rip+0x32f5e]        # 0x65034080
    65001122:	mov    rbx,rax
    65001125:	call   QWORD PTR [rip+0x32f55]        # 0x65034080
    6500112b:	mov    DWORD PTR [rsp+0x30],0x2
    65001133:	lea    r9,[rsp+0x40]
    65001138:	mov    r8,rbx
    6500113b:	mov    rdx,rdi
    6500113e:	mov    rcx,rax
    65001141:	mov    DWORD PTR [rsp+0x28],ebp
    65001145:	mov    DWORD PTR [rsp+0x20],ebp
    65001149:	call   QWORD PTR [rip+0x32f99]        # 0x650340e8
    6500114f:	test   eax,eax
    65001151:	je     0x65001233
    65001157:	mov    r9,QWORD PTR [rsp+0x40]
    6500115c:	lea    r8,[rip+0xffffffffffffff0d]        # 0x65001070
    65001163:	xor    edx,edx
    65001165:	xor    ecx,ecx
    65001167:	mov    QWORD PTR [rsp+0x28],rbp
    6500116c:	mov    DWORD PTR [rsp+0x20],ebp
    65001170:	call   QWORD PTR [rip+0x32f52]        # 0x650340c8
    65001176:	mov    DWORD PTR [rsp+0x80],ebp
    6500117d:	mov    rcx,QWORD PTR [rsi+0x10]
    65001181:	lea    r9,[rsp+0x88]
    65001189:	lea    r8d,[rbp+0x4]
    6500118d:	lea    rdx,[rsp+0x80]
    65001195:	mov    rbx,rax
    65001198:	mov    QWORD PTR [rsp+0x20],rbp
    6500119d:	call   QWORD PTR [rip+0x32f55]        # 0x650340f8
    650011a3:	test   eax,eax
    650011a5:	je     0x65001215
    650011a7:	cmp    DWORD PTR [rsp+0x88],0x4
    650011af:	jne    0x65001215
    650011b1:	mov    eax,DWORD PTR [rsp+0x80]
    650011b8:	lea    r9,[rsp+0x98]
    650011c0:	lea    r8d,[rbp+0x4]
    650011c4:	mov    DWORD PTR [rsp+0x90],eax
    650011cb:	mov    rcx,QWORD PTR [rsi+0x8]
    650011cf:	lea    rdx,[rsp+0x90]
    650011d7:	mov    QWORD PTR [rsp+0x20],rbp
    650011dc:	call   QWORD PTR [rip+0x32f1e]        # 0x65034100
    650011e2:	test   rbx,rbx
    650011e5:	je     0x65001200
    650011e7:	call   QWORD PTR [rip+0x32e8b]        # 0x65034078
    650011ed:	mov    rcx,rbx
    650011f0:	mov    edi,eax
    650011f2:	call   QWORD PTR [rip+0x32e78]        # 0x65034070
    650011f8:	mov    ecx,edi
    650011fa:	call   QWORD PTR [rip+0x32f08]        # 0x65034108
    65001200:	lea    rcx,[rsp+0x48]
    65001205:	call   0x65001d40
    6500120a:	xor    eax,eax
    6500120c:	add    rsp,0x58
    65001210:	pop    rdi
    65001211:	pop    rsi
    65001212:	pop    rbp
    65001213:	pop    rbx
    65001214:	ret    
    65001215:	test   rbx,rbx
    65001218:	je     0x65001233
    6500121a:	call   QWORD PTR [rip+0x32e58]        # 0x65034078
    65001220:	mov    rcx,rbx
    65001223:	mov    edi,eax
    65001225:	call   QWORD PTR [rip+0x32e45]        # 0x65034070
    6500122b:	mov    ecx,edi
    6500122d:	call   QWORD PTR [rip+0x32ed5]        # 0x65034108
    65001233:	mov    rdi,QWORD PTR [rsi+0x18]
    65001237:	test   rdi,rdi
    6500123a:	je     0x65001255
    6500123c:	call   QWORD PTR [rip+0x32e36]        # 0x65034078
    65001242:	mov    rcx,rdi
    65001245:	mov    ebx,eax
    65001247:	call   QWORD PTR [rip+0x32e23]        # 0x65034070
    6500124d:	mov    ecx,ebx
    6500124f:	call   QWORD PTR [rip+0x32eb3]        # 0x65034108
    65001255:	mov    QWORD PTR [rsi+0x18],rbp
    65001259:	mov    rdi,QWORD PTR [rsi+0x10]
    6500125d:	test   rdi,rdi
    65001260:	je     0x6500127b
    65001262:	call   QWORD PTR [rip+0x32e10]        # 0x65034078
    65001268:	mov    rcx,rdi
    6500126b:	mov    ebx,eax
    6500126d:	call   QWORD PTR [rip+0x32dfd]        # 0x65034070
    65001273:	mov    ecx,ebx
    65001275:	call   QWORD PTR [rip+0x32e8d]        # 0x65034108
    6500127b:	mov    QWORD PTR [rsi+0x10],rbp
    6500127f:	mov    rdi,QWORD PTR [rsi+0x8]
    65001283:	test   rdi,rdi
    65001286:	je     0x650012a1
    65001288:	call   QWORD PTR [rip+0x32dea]        # 0x65034078
    6500128e:	mov    rcx,rdi
    65001291:	mov    ebx,eax
    65001293:	call   QWORD PTR [rip+0x32dd7]        # 0x65034070
    65001299:	mov    ecx,ebx
    6500129b:	call   QWORD PTR [rip+0x32e67]        # 0x65034108
    650012a1:	mov    QWORD PTR [rsi+0x8],rbp
    650012a5:	mov    rdi,QWORD PTR [rsi]
    650012a8:	test   rdi,rdi
    650012ab:	je     0x650012c6
    650012ad:	call   QWORD PTR [rip+0x32dc5]        # 0x65034078
    650012b3:	mov    rcx,rdi
    650012b6:	mov    ebx,eax
    650012b8:	call   QWORD PTR [rip+0x32db2]        # 0x65034070
    650012be:	mov    ecx,ebx
    650012c0:	call   QWORD PTR [rip+0x32e42]        # 0x65034108
    650012c6:	mov    rcx,rsi
    650012c9:	mov    QWORD PTR [rsi],rbp
    650012cc:	call   0x6501d190
    650012d1:	xor    eax,eax
    650012d3:	add    rsp,0x58
    650012d7:	pop    rdi
    650012d8:	pop    rsi
    650012d9:	pop    rbp
    650012da:	pop    rbx
    650012db:	ret    
    650012dc:	int3   
    650012dd:	int3   
    650012de:	int3   
    650012df:	int3   
    650012e0:	mov    r11,rsp
    650012e3:	push   rsi
    650012e4:	push   rdi
    650012e5:	push   r12
    650012e7:	push   r13
    650012e9:	push   r14
    650012eb:	sub    rsp,0xf0
    650012f2:	mov    QWORD PTR [rsp+0x90],0xfffffffffffffffe
    650012fe:	mov    QWORD PTR [r11+0x18],rbx
    65001302:	mov    QWORD PTR [r11+0x20],rbp
    65001306:	mov    rax,QWORD PTR [rip+0x40e13]        # 0x65042120
    6500130d:	xor    rax,rsp
    65001310:	mov    QWORD PTR [rsp+0xe8],rax
    65001318:	mov    r13,rdx
    6500131b:	mov    rdi,rcx
    6500131e:	mov    QWORD PTR [r11-0x90],rcx
    65001325:	xor    r14d,r14d
    65001328:	mov    DWORD PTR [rsp+0x30],r14d
    6500132d:	mov    QWORD PTR [rcx+0x20],0xf
    65001335:	mov    QWORD PTR [rcx+0x18],r14
    65001339:	lea    rbp,[rcx+0x8]
    6500133d:	mov    BYTE PTR [rbp+0x0],r14b
    65001341:	mov    DWORD PTR [rsp+0x30],0x1
    65001349:	call   QWORD PTR [rip+0x32da1]        # 0x650340f0
    6500134f:	mov    rsi,rax
    65001352:	mov    ecx,r14d
    65001355:	mov    rax,r14
    65001358:	test   rax,rax
    6500135b:	jle    0x6500136c
    6500135d:	cmp    WORD PTR [rsi+rax*2-0x2],0x0
    65001363:	jne    0x6500136c
    65001365:	cmp    WORD PTR [rsi+rax*2],0x0
    6500136a:	je     0x65001375
    6500136c:	add    ecx,0x1
    6500136f:	add    rax,0x1
    65001373:	jmp    0x65001358
    65001375:	movsxd rbx,ecx
    65001378:	add    rbx,rbx
    6500137b:	mov    edx,0xf
    65001380:	mov    QWORD PTR [rsp+0x58],rdx
    65001385:	mov    r8,r14
    65001388:	mov    QWORD PTR [rsp+0x50],r14
    6500138d:	mov    BYTE PTR [rsp+0x40],r8b
    65001392:	cmp    rbx,0xfffffffffffffffe
    65001396:	jbe    0x650013a7
    65001398:	call   0x6501cfe0
    6500139d:	mov    rdx,QWORD PTR [rsp+0x58]
    650013a2:	mov    r8,QWORD PTR [rsp+0x50]
    650013a7:	cmp    rdx,rbx
    650013aa:	jae    0x650013c0
    650013ac:	mov    rdx,rbx
    650013af:	lea    rcx,[rsp+0x38]
    650013b4:	call   0x65002330
    650013b9:	mov    rdx,QWORD PTR [rsp+0x58]
    650013be:	jmp    0x650013dd
    650013c0:	test   rbx,rbx
    650013c3:	jne    0x650013dd
    650013c5:	mov    QWORD PTR [rsp+0x50],r14
    650013ca:	lea    rax,[rsp+0x40]
    650013cf:	cmp    rdx,0x10
    650013d3:	cmovae rax,QWORD PTR [rsp+0x40]
    650013d9:	mov    BYTE PTR [rax],bl
    650013db:	jmp    0x65001416
    650013dd:	test   rbx,rbx
    650013e0:	je     0x65001416
    650013e2:	lea    rcx,[rsp+0x40]
    650013e7:	cmp    rdx,0x10
    650013eb:	cmovae rcx,QWORD PTR [rsp+0x40]
    650013f1:	mov    r9,rbx
    650013f4:	mov    r8,rsi
    650013f7:	call   0x6501d640
    650013fc:	mov    QWORD PTR [rsp+0x50],rbx
    65001401:	lea    rax,[rsp+0x40]
    65001406:	cmp    QWORD PTR [rsp+0x58],0x10
    6500140c:	cmovae rax,QWORD PTR [rsp+0x40]
    65001412:	mov    BYTE PTR [rax+rbx*1],0x0
    65001416:	or     r9,0xffffffffffffffff
    6500141a:	xor    r8d,r8d
    6500141d:	lea    rdx,[rsp+0x38]
    65001422:	mov    rcx,rdi
    65001425:	call   0x650021e0
    6500142a:	nop
    6500142b:	cmp    QWORD PTR [rsp+0x58],0x10
    65001431:	jb     0x6500143d
    65001433:	mov    rcx,QWORD PTR [rsp+0x40]
    65001438:	call   0x6501d190
    6500143d:	lea    rcx,[rip+0x40c5c]        # 0x650420a0
    65001444:	mov    rax,QWORD PTR [rip+0x40c55]        # 0x650420a0
    6500144b:	call   QWORD PTR [rax+0x18]
    6500144e:	add    rax,0x18
    65001452:	mov    QWORD PTR [rsp+0x28],rax
    65001457:	mov    r8,QWORD PTR [r13+0x0]
    6500145b:	lea    rdx,[rip+0x35b26]        # 0x65036f88
    65001462:	lea    rcx,[rsp+0x28]
    65001467:	call   0x65002560
    6500146c:	mov    rbx,QWORD PTR [rsp+0x28]
    65001471:	mov    esi,DWORD PTR [rbx-0x10]
    65001474:	cmp    DWORD PTR [rbx-0x8],0x1
    65001478:	jle    0x6500148b
    6500147a:	mov    edx,esi
    6500147c:	lea    rcx,[rsp+0x28]
    65001481:	call   0x65002130
    65001486:	mov    rbx,QWORD PTR [rsp+0x28]
    6500148b:	lea    eax,[rsi+0x1]
    6500148e:	movsxd rsi,eax
    65001491:	add    rsi,rsi
    65001494:	mov    QWORD PTR [rsp+0xe0],0xf
    650014a0:	mov    QWORD PTR [rsp+0xd8],r14
    650014a8:	mov    BYTE PTR [rsp+0xc8],0x0
    650014b0:	cmp    rsi,0xfffffffffffffffe
    650014b4:	jbe    0x650014bb
    650014b6:	call   0x6501cfe0
    650014bb:	cmp    QWORD PTR [rsp+0xe0],rsi
    650014c3:	jae    0x650014df
    650014c5:	mov    r8,QWORD PTR [rsp+0xd8]
    650014cd:	mov    rdx,rsi
    650014d0:	lea    rcx,[rsp+0xc0]
    650014d8:	call   0x65002330
    650014dd:	jmp    0x6500150b
    650014df:	test   rsi,rsi
    650014e2:	jne    0x6500150b
    650014e4:	mov    QWORD PTR [rsp+0xd8],r14
    650014ec:	lea    rax,[rsp+0xc8]
    650014f4:	cmp    QWORD PTR [rsp+0xe0],0x10
    650014fd:	cmovae rax,QWORD PTR [rsp+0xc8]
    65001506:	mov    BYTE PTR [rax],sil
    65001509:	jmp    0x6500155e
    6500150b:	test   rsi,rsi
    6500150e:	je     0x6500155e
    65001510:	lea    rcx,[rsp+0xc8]
    65001518:	mov    rdx,QWORD PTR [rsp+0xe0]
    65001520:	cmp    rdx,0x10
    65001524:	cmovae rcx,QWORD PTR [rsp+0xc8]
    6500152d:	mov    r9,rsi
    65001530:	mov    r8,rbx
    65001533:	call   0x6501d640
    65001538:	mov    QWORD PTR [rsp+0xd8],rsi
    65001540:	lea    rax,[rsp+0xc8]
    65001548:	cmp    QWORD PTR [rsp+0xe0],0x10
    65001551:	cmovae rax,QWORD PTR [rsp+0xc8]
    6500155a:	mov    BYTE PTR [rax+rsi*1],0x0
    6500155e:	or     r12,0xffffffffffffffff
    65001562:	mov    rax,QWORD PTR [rsp+0xd8]
    6500156a:	cmp    rax,r12
    6500156d:	cmovb  r12,rax
    65001571:	mov    rcx,QWORD PTR [rdi+0x18]
    65001575:	or     rax,0xffffffffffffffff
    65001579:	sub    rax,rcx
    6500157c:	cmp    rax,r12
    6500157f:	jbe    0x6500158a
    65001581:	lea    rax,[rcx+r12*1]
    65001585:	cmp    rax,rcx
    65001588:	jae    0x6500158f
    6500158a:	call   0x6501cfe0
    6500158f:	test   r12,r12
    65001592:	je     0x6500163e
    65001598:	mov    rax,QWORD PTR [rdi+0x18]
    6500159c:	lea    rsi,[r12+rax*1]
    650015a0:	cmp    rsi,0xfffffffffffffffe
    650015a4:	jbe    0x650015ab
    650015a6:	call   0x6501cfe0
    650015ab:	mov    rax,QWORD PTR [rdi+0x20]
    650015af:	cmp    rax,rsi
    650015b2:	jae    0x650015c5
    650015b4:	mov    r8,QWORD PTR [rdi+0x18]
    650015b8:	mov    rdx,rsi
    650015bb:	mov    rcx,rdi
    650015be:	call   0x65002330
    650015c3:	jmp    0x650015e2
    650015c5:	test   rsi,rsi
    650015c8:	jne    0x650015e2
    650015ca:	mov    QWORD PTR [rdi+0x18],r14
    650015ce:	cmp    rax,0x10
    650015d2:	jb     0x650015da
    650015d4:	mov    rax,QWORD PTR [rbp+0x0]
    650015d8:	jmp    0x650015dd
    650015da:	mov    rax,rbp
    650015dd:	mov    BYTE PTR [rax],0x0
    650015e0:	jmp    0x6500163e
    650015e2:	test   rsi,rsi
    650015e5:	je     0x6500163e
    650015e7:	lea    r8,[rsp+0xc8]
    650015ef:	cmp    QWORD PTR [rsp+0xe0],0x10
    650015f8:	cmovae r8,QWORD PTR [rsp+0xc8]
    65001601:	mov    rdx,QWORD PTR [rdi+0x20]
    65001605:	cmp    rdx,0x10
    65001609:	jb     0x65001611
    6500160b:	mov    rcx,QWORD PTR [rbp+0x0]
    6500160f:	jmp    0x65001614
    65001611:	mov    rcx,rbp
    65001614:	mov    rax,QWORD PTR [rdi+0x18]
    65001618:	sub    rdx,rax
    6500161b:	add    rcx,rax
    6500161e:	mov    r9,r12
    65001621:	call   0x6501d640
    65001626:	mov    QWORD PTR [rdi+0x18],rsi
    6500162a:	cmp    QWORD PTR [rdi+0x20],0x10
    6500162f:	jb     0x65001637
    65001631:	mov    rax,QWORD PTR [rbp+0x0]
    65001635:	jmp    0x6500163a
    65001637:	mov    rax,rbp
    6500163a:	mov    BYTE PTR [rax+rsi*1],0x0
    6500163e:	cmp    QWORD PTR [rsp+0xe0],0x10
    65001647:	jb     0x65001656
    65001649:	mov    rcx,QWORD PTR [rsp+0xc8]
    65001651:	call   0x6501d190
    65001656:	mov    QWORD PTR [rsp+0xe0],0xf
    65001662:	mov    QWORD PTR [rsp+0xd8],r14
    6500166a:	mov    BYTE PTR [rsp+0xc8],0x0
    65001672:	lea    rdx,[rbx-0x18]
    65001676:	or     eax,0xffffffff
    65001679:	lock xadd DWORD PTR [rdx+0x10],eax
    6500167e:	add    eax,0xffffffff
    65001681:	test   eax,eax
    65001683:	jg     0x6500168e
    65001685:	mov    rcx,QWORD PTR [rdx]
    65001688:	mov    rax,QWORD PTR [rcx]
    6500168b:	call   QWORD PTR [rax+0x8]
    6500168e:	lea    rcx,[rip+0x40a0b]        # 0x650420a0
    65001695:	mov    rax,QWORD PTR [rip+0x40a04]        # 0x650420a0
    6500169c:	call   QWORD PTR [rax+0x18]
    6500169f:	add    rax,0x18
    650016a3:	mov    QWORD PTR [rsp+0x20],rax
    650016a8:	mov    r8,QWORD PTR [r13+0x18]
    650016ac:	lea    rdx,[rip+0x358e5]        # 0x65036f98
    650016b3:	lea    rcx,[rsp+0x20]
    650016b8:	call   0x65002560
    650016bd:	mov    rbx,QWORD PTR [rsp+0x20]
    650016c2:	mov    esi,DWORD PTR [rbx-0x10]
    650016c5:	cmp    DWORD PTR [rbx-0x8],0x1
    650016c9:	jle    0x650016dc
    650016cb:	mov    edx,esi
    650016cd:	lea    rcx,[rsp+0x20]
    650016d2:	call   0x65002130
    650016d7:	mov    rbx,QWORD PTR [rsp+0x20]
    650016dc:	lea    eax,[rsi+0x1]
    650016df:	movsxd rsi,eax
    650016e2:	add    rsi,rsi
    650016e5:	mov    QWORD PTR [rsp+0xb8],0xf
    650016f1:	mov    QWORD PTR [rsp+0xb0],r14
    650016f9:	mov    BYTE PTR [rsp+0xa0],0x0
    65001701:	cmp    rsi,0xfffffffffffffffe
    65001705:	jbe    0x6500170c
    65001707:	call   0x6501cfe0
    6500170c:	cmp    QWORD PTR [rsp+0xb8],rsi
    65001714:	jae    0x65001730
    65001716:	mov    r8,QWORD PTR [rsp+0xb0]
    6500171e:	mov    rdx,rsi
    65001721:	lea    rcx,[rsp+0x98]
    65001729:	call   0x65002330
    6500172e:	jmp    0x6500175c
    65001730:	test   rsi,rsi
    65001733:	jne    0x6500175c
    65001735:	mov    QWORD PTR [rsp+0xb0],r14
    6500173d:	lea    rax,[rsp+0xa0]
    65001745:	cmp    QWORD PTR [rsp+0xb8],0x10
    6500174e:	cmovae rax,QWORD PTR [rsp+0xa0]
    65001757:	mov    BYTE PTR [rax],sil
    6500175a:	jmp    0x650017af
    6500175c:	test   rsi,rsi
    6500175f:	je     0x650017af
    65001761:	lea    rcx,[rsp+0xa0]
    65001769:	mov    rdx,QWORD PTR [rsp+0xb8]
    65001771:	cmp    rdx,0x10
    65001775:	cmovae rcx,QWORD PTR [rsp+0xa0]
    6500177e:	mov    r9,rsi
    65001781:	mov    r8,rbx
    65001784:	call   0x6501d640
    65001789:	mov    QWORD PTR [rsp+0xb0],rsi
    65001791:	lea    rax,[rsp+0xa0]
    65001799:	cmp    QWORD PTR [rsp+0xb8],0x10
    650017a2:	cmovae rax,QWORD PTR [rsp+0xa0]
    650017ab:	mov    BYTE PTR [rsi+rax*1],0x0
    650017af:	or     r12,0xffffffffffffffff
    650017b3:	mov    rax,QWORD PTR [rsp+0xb0]
    650017bb:	cmp    rax,r12
    650017be:	cmovb  r12,rax
    650017c2:	mov    rcx,QWORD PTR [rdi+0x18]
    650017c6:	or     rax,0xffffffffffffffff
    650017ca:	sub    rax,rcx
    650017cd:	cmp    rax,r12
    650017d0:	jbe    0x650017db
    650017d2:	lea    rax,[rcx+r12*1]
    650017d6:	cmp    rax,rcx
    650017d9:	jae    0x650017e0
    650017db:	call   0x6501cfe0
    650017e0:	test   r12,r12
    650017e3:	je     0x65001886
    650017e9:	mov    rax,QWORD PTR [rdi+0x18]
    650017ed:	lea    rsi,[r12+rax*1]
    650017f1:	cmp    rsi,0xfffffffffffffffe
    650017f5:	jbe    0x650017fc
    650017f7:	call   0x6501cfe0
    650017fc:	mov    rax,QWORD PTR [rdi+0x20]
    65001800:	cmp    rax,rsi
    65001803:	jae    0x65001816
    65001805:	mov    r8,QWORD PTR [rdi+0x18]
    65001809:	mov    rdx,rsi
    6500180c:	mov    rcx,rdi
    6500180f:	call   0x65002330
    65001814:	jmp    0x6500182f
    65001816:	test   rsi,rsi
    65001819:	jne    0x6500182f
    6500181b:	mov    QWORD PTR [rdi+0x18],r14
    6500181f:	cmp    rax,0x10
    65001823:	jb     0x65001829
    65001825:	mov    rbp,QWORD PTR [rbp+0x0]
    65001829:	mov    BYTE PTR [rbp+0x0],0x0
    6500182d:	jmp    0x65001886
    6500182f:	test   rsi,rsi
    65001832:	je     0x65001886
    65001834:	lea    r8,[rsp+0xa0]
    6500183c:	cmp    QWORD PTR [rsp+0xb8],0x10
    65001845:	cmovae r8,QWORD PTR [rsp+0xa0]
    6500184e:	mov    rdx,QWORD PTR [rdi+0x20]
    65001852:	cmp    rdx,0x10
    65001856:	jb     0x6500185e
    65001858:	mov    rcx,QWORD PTR [rbp+0x0]
    6500185c:	jmp    0x65001861
    6500185e:	mov    rcx,rbp
    65001861:	mov    rax,QWORD PTR [rdi+0x18]
    65001865:	sub    rdx,rax
    65001868:	add    rcx,rax
    6500186b:	mov    r9,r12
    6500186e:	call   0x6501d640
    65001873:	mov    QWORD PTR [rdi+0x18],rsi
    65001877:	cmp    QWORD PTR [rdi+0x20],0x10
    6500187c:	jb     0x65001882
    6500187e:	mov    rbp,QWORD PTR [rbp+0x0]
    65001882:	mov    BYTE PTR [rsi+rbp*1],0x0
    65001886:	cmp    QWORD PTR [rsp+0xb8],0x10
    6500188f:	jb     0x6500189e
    65001891:	mov    rcx,QWORD PTR [rsp+0xa0]
    65001899:	call   0x6501d190
    6500189e:	mov    QWORD PTR [rsp+0xb8],0xf
    650018aa:	mov    QWORD PTR [rsp+0xb0],r14
    650018b2:	mov    BYTE PTR [rsp+0xa0],0x0
    650018ba:	lea    rdx,[rbx-0x18]
    650018be:	or     eax,0xffffffff
    650018c1:	lock xadd DWORD PTR [rdx+0x10],eax
    650018c6:	add    eax,0xffffffff
    650018c9:	test   eax,eax
    650018cb:	jg     0x650018d6
    650018cd:	mov    rcx,QWORD PTR [rdx]
    650018d0:	mov    rax,QWORD PTR [rcx]
    650018d3:	call   QWORD PTR [rax+0x8]
    650018d6:	mov    QWORD PTR [rsp+0x80],0xf
    650018e2:	mov    QWORD PTR [rsp+0x78],r14
    650018e7:	mov    BYTE PTR [rsp+0x68],0x0
    650018ec:	mov    r9d,0x2
    650018f2:	lea    r8,[rip+0x356ab]        # 0x65036fa4
    650018f9:	lea    edx,[r9+0xd]
    650018fd:	lea    rcx,[rsp+0x68]
    65001902:	call   0x6501d640
    65001907:	mov    QWORD PTR [rsp+0x78],0x2
    65001910:	lea    rcx,[rsp+0x68]
    65001915:	cmp    QWORD PTR [rsp+0x80],0x10
    6500191e:	cmovae rcx,QWORD PTR [rsp+0x68]
    65001924:	mov    BYTE PTR [rcx+0x2],0x0
    65001928:	or     r9,0xffffffffffffffff
    6500192c:	xor    r8d,r8d
    6500192f:	lea    rdx,[rsp+0x60]
    65001934:	mov    rcx,rdi
    65001937:	call   0x650021e0
    6500193c:	nop
    6500193d:	cmp    QWORD PTR [rsp+0x80],0x10
    65001946:	jb     0x65001957
    65001948:	mov    rcx,QWORD PTR [rsp+0x68]
    6500194d:	call   0x6501d190
    65001952:	mov    rax,rdi
    65001955:	jmp    0x6500195a
    65001957:	mov    rax,rdi
    6500195a:	mov    rcx,QWORD PTR [rsp+0xe8]
    65001962:	xor    rcx,rsp
    65001965:	call   0x6501e4e0
    6500196a:	lea    r11,[rsp+0xf0]
    65001972:	mov    rbx,QWORD PTR [r11+0x40]
    65001976:	mov    rbp,QWORD PTR [r11+0x48]
    6500197a:	mov    rsp,r11
    6500197d:	pop    r14
    6500197f:	pop    r13
    65001981:	pop    r12
    65001983:	pop    rdi
    65001984:	pop    rsi
    65001985:	ret    
    65001986:	int3   
    65001987:	int3   
    65001988:	int3   
    65001989:	int3   
    6500198a:	int3   
    6500198b:	int3   
    6500198c:	int3   
    6500198d:	int3   
    6500198e:	int3   
    6500198f:	int3   
    65001990:	rex push rbp
    65001992:	sub    rsp,0x20
    65001996:	mov    rbp,rdx
    65001999:	mov    eax,DWORD PTR [rbp+0x30]
    6500199c:	and    eax,0x1
    6500199f:	test   eax,eax
    650019a1:	je     0x650019b3
    650019a3:	and    DWORD PTR [rbp+0x30],0xfffffffe
    650019a7:	mov    rcx,QWORD PTR [rbp+0x88]
    650019ae:	call   0x65001c70
    650019b3:	add    rsp,0x20
    650019b7:	pop    rbp
    650019b8:	ret    
    650019b9:	int3   
    650019ba:	int3   
    650019bb:	int3   
    650019bc:	int3   
    650019bd:	int3   
    650019be:	int3   
    650019bf:	int3   
    650019c0:	rex push rbp
    650019c2:	sub    rsp,0x20
    650019c6:	mov    rbp,rdx
    650019c9:	lea    rcx,[rbp+0x38]
    650019cd:	call   0x65001c70
    650019d2:	add    rsp,0x20
    650019d6:	pop    rbp
    650019d7:	ret    
    650019d8:	int3   
    650019d9:	int3   
    650019da:	int3   
    650019db:	int3   
    650019dc:	int3   
    650019dd:	int3   
    650019de:	int3   
    650019df:	int3   
    650019e0:	rex push rbp
    650019e2:	sub    rsp,0x20
    650019e6:	mov    rbp,rdx
    650019e9:	lea    rcx,[rbp+0x28]
    650019ed:	call   0x65001cb0
    650019f2:	add    rsp,0x20
    650019f6:	pop    rbp
    650019f7:	ret    
    650019f8:	int3   
    650019f9:	int3   
    650019fa:	int3   
    650019fb:	int3   
    650019fc:	int3   
    650019fd:	int3   
    650019fe:	int3   
    650019ff:	int3   
    65001a00:	rex push rbp
    65001a02:	sub    rsp,0x20
    65001a06:	mov    rbp,rdx
    65001a09:	lea    rcx,[rbp+0xc0]
    65001a10:	call   0x65001c70
    65001a15:	add    rsp,0x20
    65001a19:	pop    rbp
    65001a1a:	ret    
    65001a1b:	int3   
    65001a1c:	int3   
    65001a1d:	int3   
    65001a1e:	int3   
    65001a1f:	int3   
    65001a20:	rex push rbp
    65001a22:	sub    rsp,0x20
    65001a26:	mov    rbp,rdx
    65001a29:	lea    rcx,[rbp+0x20]
    65001a2d:	call   0x65001cb0
    65001a32:	add    rsp,0x20
    65001a36:	pop    rbp
    65001a37:	ret    
    65001a38:	int3   
    65001a39:	int3   
    65001a3a:	int3   
    65001a3b:	int3   
    65001a3c:	int3   
    65001a3d:	int3   
    65001a3e:	int3   
    65001a3f:	int3   
    65001a40:	rex push rbp
    65001a42:	sub    rsp,0x20
    65001a46:	mov    rbp,rdx
    65001a49:	lea    rcx,[rbp+0x98]
    65001a50:	call   0x65001c70
    65001a55:	add    rsp,0x20
    65001a59:	pop    rbp
    65001a5a:	ret    
    65001a5b:	int3   
    65001a5c:	int3   
    65001a5d:	int3   
    65001a5e:	int3   
    65001a5f:	int3   
    65001a60:	rex push rbp
    65001a62:	sub    rsp,0x20
    65001a66:	mov    rbp,rdx
    65001a69:	lea    rcx,[rbp+0x60]
    65001a6d:	call   0x65001c70
    65001a72:	add    rsp,0x20
    65001a76:	pop    rbp
    65001a77:	ret    
    65001a78:	int3   
    65001a79:	int3   
    65001a7a:	int3   
    65001a7b:	int3   
    65001a7c:	int3   
    65001a7d:	int3   
    65001a7e:	int3   
    65001a7f:	int3   
    65001a80:	mov    rax,rsp
    65001a83:	push   rdi
    65001a84:	push   r12
    65001a86:	push   r13
    65001a88:	sub    rsp,0x70
    65001a8c:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
    65001a95:	mov    QWORD PTR [rax+0x10],rbx
    65001a99:	mov    QWORD PTR [rax+0x18],rbp
    65001a9d:	mov    QWORD PTR [rax+0x20],rsi
    65001aa1:	mov    r12,rcx
    65001aa4:	xor    r13d,r13d
    65001aa7:	mov    DWORD PTR [rsp+0x30],r13d
    65001aac:	lea    ecx,[r13+0x20]
    65001ab0:	call   0x6501da50
    65001ab5:	mov    rdi,rax
    65001ab8:	test   rax,rax
    65001abb:	je     0x65001ace
    65001abd:	mov    QWORD PTR [rax],r13
    65001ac0:	mov    QWORD PTR [rax+0x8],r13
    65001ac4:	mov    QWORD PTR [rax+0x10],r13
    65001ac8:	mov    QWORD PTR [rax+0x18],r13
    65001acc:	jmp    0x65001ad1
    65001ace:	mov    rdi,r13
    65001ad1:	mov    QWORD PTR [rsp+0x60],rdi
    65001ad6:	mov    DWORD PTR [rsp+0x40],0x18
    65001ade:	mov    DWORD PTR [rsp+0x50],0x1
    65001ae6:	mov    QWORD PTR [rsp+0x48],r13
    65001aeb:	mov    QWORD PTR [rsp+0x30],r13
    65001af0:	mov    QWORD PTR [rsp+0x38],r13
    65001af5:	xor    r9d,r9d
    65001af8:	lea    r8,[rsp+0x40]
    65001afd:	lea    rdx,[rsp+0x38]
    65001b02:	lea    rcx,[rsp+0x30]
    65001b07:	call   QWORD PTR [rip+0x325d3]        # 0x650340e0
    65001b0d:	test   eax,eax
    65001b0f:	je     0x65001b67
    65001b11:	mov    rbp,QWORD PTR [rsp+0x30]
    65001b16:	mov    rsi,QWORD PTR [rdi+0x10]
    65001b1a:	test   rsi,rsi
    65001b1d:	je     0x65001b38
    65001b1f:	call   QWORD PTR [rip+0x32553]        # 0x65034078
    65001b25:	mov    ebx,eax
    65001b27:	mov    rcx,rsi
    65001b2a:	call   QWORD PTR [rip+0x32540]        # 0x65034070
    65001b30:	mov    ecx,ebx
    65001b32:	call   QWORD PTR [rip+0x325d0]        # 0x65034108
    65001b38:	mov    QWORD PTR [rdi+0x10],rbp
    65001b3c:	mov    rsi,QWORD PTR [rsp+0x38]
    65001b41:	mov    rbp,QWORD PTR [rdi+0x18]
    65001b45:	test   rbp,rbp
    65001b48:	je     0x65001b63
    65001b4a:	call   QWORD PTR [rip+0x32528]        # 0x65034078
    65001b50:	mov    ebx,eax
    65001b52:	mov    rcx,rbp
    65001b55:	call   QWORD PTR [rip+0x32515]        # 0x65034070
    65001b5b:	mov    ecx,ebx
    65001b5d:	call   QWORD PTR [rip+0x325a5]        # 0x65034108
    65001b63:	mov    QWORD PTR [rdi+0x18],rsi
    65001b67:	xor    r9d,r9d
    65001b6a:	lea    r8,[rsp+0x40]
    65001b6f:	lea    rdx,[rsp+0x38]
    65001b74:	lea    rcx,[rsp+0x30]
    65001b79:	call   QWORD PTR [rip+0x32561]        # 0x650340e0
    65001b7f:	test   eax,eax
    65001b81:	je     0x65001bd7
    65001b83:	mov    rbp,QWORD PTR [rsp+0x30]
    65001b88:	mov    rsi,QWORD PTR [rdi]
    65001b8b:	test   rsi,rsi
    65001b8e:	je     0x65001ba9
    65001b90:	call   QWORD PTR [rip+0x324e2]        # 0x65034078
    65001b96:	mov    ebx,eax
    65001b98:	mov    rcx,rsi
    65001b9b:	call   QWORD PTR [rip+0x324cf]        # 0x65034070
    65001ba1:	mov    ecx,ebx
    65001ba3:	call   QWORD PTR [rip+0x3255f]        # 0x65034108
    65001ba9:	mov    QWORD PTR [rdi],rbp
    65001bac:	mov    rbp,QWORD PTR [rsp+0x38]
    65001bb1:	mov    rsi,QWORD PTR [rdi+0x8]
    65001bb5:	test   rsi,rsi
    65001bb8:	je     0x65001bd3
    65001bba:	call   QWORD PTR [rip+0x324b8]        # 0x65034078
    65001bc0:	mov    ebx,eax
    65001bc2:	mov    rcx,rsi
    65001bc5:	call   QWORD PTR [rip+0x324a5]        # 0x65034070
    65001bcb:	mov    ecx,ebx
    65001bcd:	call   QWORD PTR [rip+0x32535]        # 0x65034108
    65001bd3:	mov    QWORD PTR [rdi+0x8],rbp
    65001bd7:	mov    rdx,rdi
    65001bda:	mov    rcx,r12
    65001bdd:	call   0x650012e0
    65001be2:	mov    QWORD PTR [rsp+0x28],r13
    65001be7:	mov    DWORD PTR [rsp+0x20],r13d
    65001bec:	mov    r9,rdi
    65001bef:	lea    r8,[rip+0xfffffffffffff50a]        # 0x65001100
    65001bf6:	xor    edx,edx
    65001bf8:	xor    ecx,ecx
    65001bfa:	call   QWORD PTR [rip+0x324c8]        # 0x650340c8
    65001c00:	mov    rbx,rax
    65001c03:	test   rax,rax
    65001c06:	je     0x65001c27
    65001c08:	call   QWORD PTR [rip+0x3246a]        # 0x65034078
    65001c0e:	mov    edi,eax
    65001c10:	mov    rcx,rbx
    65001c13:	call   QWORD PTR [rip+0x32457]        # 0x65034070
    65001c19:	mov    ecx,edi
    65001c1b:	call   QWORD PTR [rip+0x324e7]        # 0x65034108
    65001c21:	nop
    65001c22:	mov    rax,r12
    65001c25:	jmp    0x65001c2a
    65001c27:	mov    rax,r12
    65001c2a:	lea    r11,[rsp+0x70]
    65001c2f:	mov    rbx,QWORD PTR [r11+0x28]
    65001c33:	mov    rbp,QWORD PTR [r11+0x30]
    65001c37:	mov    rsi,QWORD PTR [r11+0x38]
    65001c3b:	mov    rsp,r11
    65001c3e:	pop    r13
    65001c40:	pop    r12
    65001c42:	pop    rdi
    65001c43:	ret    
    65001c44:	int3   
    65001c45:	int3   
    65001c46:	int3   
    65001c47:	int3   
    65001c48:	int3   
    65001c49:	int3   
    65001c4a:	int3   
    65001c4b:	int3   
    65001c4c:	int3   
    65001c4d:	int3   
    65001c4e:	int3   
    65001c4f:	int3   
    65001c50:	rex push rbp
    65001c52:	sub    rsp,0x20
    65001c56:	mov    rbp,rdx
    65001c59:	lea    rcx,[rbp+0x60]
    65001c5d:	call   0x65001d40
    65001c62:	add    rsp,0x20
    65001c66:	pop    rbp
    65001c67:	ret    
    65001c68:	int3   
    65001c69:	int3   
    65001c6a:	int3   
    65001c6b:	int3   
    65001c6c:	int3   
    65001c6d:	int3   
    65001c6e:	int3   
    65001c6f:	int3   
    65001c70:	rex push rbx
    65001c72:	sub    rsp,0x20
    65001c76:	cmp    QWORD PTR [rcx+0x20],0x10
    65001c7b:	mov    rbx,rcx
    65001c7e:	jb     0x65001c89
    65001c80:	mov    rcx,QWORD PTR [rcx+0x8]
    65001c84:	call   0x6501d190
    65001c89:	mov    QWORD PTR [rbx+0x20],0xf
    65001c91:	mov    QWORD PTR [rbx+0x18],0x0
    65001c99:	mov    BYTE PTR [rbx+0x8],0x0
    65001c9d:	add    rsp,0x20
    65001ca1:	pop    rbx
    65001ca2:	ret    
    65001ca3:	int3   
    65001ca4:	int3   
    65001ca5:	int3   
    65001ca6:	int3   
    65001ca7:	int3   
    65001ca8:	int3   
    65001ca9:	int3   
    65001caa:	int3   
    65001cab:	int3   
    65001cac:	int3   
    65001cad:	int3   
    65001cae:	int3   
    65001caf:	int3   
    65001cb0:	sub    rsp,0x28
    65001cb4:	mov    rdx,QWORD PTR [rcx]
    65001cb7:	sub    rdx,0x18
    65001cbb:	or     eax,0xffffffff
    65001cbe:	lock xadd DWORD PTR [rdx+0x10],eax
    65001cc3:	add    eax,0xffffffff
    65001cc6:	test   eax,eax
    65001cc8:	jg     0x65001cd3
    65001cca:	mov    rcx,QWORD PTR [rdx]
    65001ccd:	mov    rax,QWORD PTR [rcx]
    65001cd0:	call   QWORD PTR [rax+0x8]
    65001cd3:	add    rsp,0x28
    65001cd7:	ret    
    65001cd8:	int3   
    65001cd9:	int3   
    65001cda:	int3   
    65001cdb:	int3   
    65001cdc:	int3   
    65001cdd:	int3   
    65001cde:	int3   
    65001cdf:	int3   
    65001ce0:	mov    QWORD PTR [rsp+0x10],rsi
    65001ce5:	push   rdi
    65001ce6:	sub    rsp,0x20
    65001cea:	mov    rsi,QWORD PTR [rcx]
    65001ced:	mov    rdi,rcx
    65001cf0:	test   rsi,rsi
    65001cf3:	je     0x65001d2a
    65001cf5:	mov    QWORD PTR [rsp+0x30],rbx
    65001cfa:	call   QWORD PTR [rip+0x32378]        # 0x65034078
    65001d00:	mov    rcx,rsi
    65001d03:	mov    ebx,eax
    65001d05:	call   QWORD PTR [rip+0x32365]        # 0x65034070
    65001d0b:	mov    ecx,ebx
    65001d0d:	call   QWORD PTR [rip+0x323f5]        # 0x65034108
    65001d13:	mov    rbx,QWORD PTR [rsp+0x30]
    65001d18:	mov    QWORD PTR [rdi],0x0
    65001d1f:	mov    rsi,QWORD PTR [rsp+0x38]
    65001d24:	add    rsp,0x20
    65001d28:	pop    rdi
    65001d29:	ret    
    65001d2a:	mov    QWORD PTR [rcx],0x0
    65001d31:	mov    rsi,QWORD PTR [rsp+0x38]
    65001d36:	add    rsp,0x20
    65001d3a:	pop    rdi
    65001d3b:	ret    
    65001d3c:	int3   
    65001d3d:	int3   
    65001d3e:	int3   
    65001d3f:	int3   
    65001d40:	rex push rdi
    65001d42:	sub    rsp,0x20
    65001d46:	mov    rdi,QWORD PTR [rcx]
    65001d49:	test   rdi,rdi
    65001d4c:	je     0x65001e10
    65001d52:	mov    QWORD PTR [rsp+0x30],rbx
    65001d57:	mov    QWORD PTR [rsp+0x38],rbp
    65001d5c:	mov    QWORD PTR [rsp+0x40],rsi
    65001d61:	mov    rsi,QWORD PTR [rdi+0x18]
    65001d65:	test   rsi,rsi
    65001d68:	je     0x65001d83
    65001d6a:	call   QWORD PTR [rip+0x32308]        # 0x65034078
    65001d70:	mov    rcx,rsi
    65001d73:	mov    ebx,eax
    65001d75:	call   QWORD PTR [rip+0x322f5]        # 0x65034070
    65001d7b:	mov    ecx,ebx
    65001d7d:	call   QWORD PTR [rip+0x32385]        # 0x65034108
    65001d83:	xor    ebp,ebp
    65001d85:	mov    QWORD PTR [rdi+0x18],rbp
    65001d89:	mov    rsi,QWORD PTR [rdi+0x10]
    65001d8d:	test   rsi,rsi
    65001d90:	je     0x65001dab
    65001d92:	call   QWORD PTR [rip+0x322e0]        # 0x65034078
    65001d98:	mov    rcx,rsi
    65001d9b:	mov    ebx,eax
    65001d9d:	call   QWORD PTR [rip+0x322cd]        # 0x65034070
    65001da3:	mov    ecx,ebx
    65001da5:	call   QWORD PTR [rip+0x3235d]        # 0x65034108
    65001dab:	mov    QWORD PTR [rdi+0x10],rbp
    65001daf:	mov    rsi,QWORD PTR [rdi+0x8]
    65001db3:	test   rsi,rsi
    65001db6:	je     0x65001dd1
    65001db8:	call   QWORD PTR [rip+0x322ba]        # 0x65034078
    65001dbe:	mov    rcx,rsi
    65001dc1:	mov    ebx,eax
    65001dc3:	call   QWORD PTR [rip+0x322a7]        # 0x65034070
    65001dc9:	mov    ecx,ebx
    65001dcb:	call   QWORD PTR [rip+0x32337]        # 0x65034108
    65001dd1:	mov    QWORD PTR [rdi+0x8],rbp
    65001dd5:	mov    rsi,QWORD PTR [rdi]
    65001dd8:	test   rsi,rsi
    65001ddb:	je     0x65001df6
    65001ddd:	call   QWORD PTR [rip+0x32295]        # 0x65034078
    65001de3:	mov    rcx,rsi
    65001de6:	mov    ebx,eax
    65001de8:	call   QWORD PTR [rip+0x32282]        # 0x65034070
    65001dee:	mov    ecx,ebx
    65001df0:	call   QWORD PTR [rip+0x32312]        # 0x65034108
    65001df6:	mov    rcx,rdi
    65001df9:	mov    QWORD PTR [rdi],rbp
    65001dfc:	call   0x6501d190
    65001e01:	mov    rsi,QWORD PTR [rsp+0x40]
    65001e06:	mov    rbp,QWORD PTR [rsp+0x38]
    65001e0b:	mov    rbx,QWORD PTR [rsp+0x30]
    65001e10:	add    rsp,0x20
    65001e14:	pop    rdi
    65001e15:	ret    
    65001e16:	int3   
    65001e17:	int3   
    65001e18:	int3   
    65001e19:	int3   
    65001e1a:	int3   
    65001e1b:	int3   
    65001e1c:	int3   
    65001e1d:	int3   
    65001e1e:	int3   
    65001e1f:	int3   
    65001e20:	mov    QWORD PTR [rsp+0x8],rbx
    65001e25:	mov    QWORD PTR [rsp+0x10],rbp
    65001e2a:	mov    QWORD PTR [rsp+0x18],rsi
    65001e2f:	mov    QWORD PTR [rsp+0x20],rdi
    65001e34:	push   r12
    65001e36:	sub    rsp,0x20
    65001e3a:	cmp    QWORD PTR [rdx+0x18],r8
    65001e3e:	mov    r12,r9
    65001e41:	mov    rbp,r8
    65001e44:	mov    rsi,rdx
    65001e47:	mov    rbx,rcx
    65001e4a:	jae    0x65001e51
    65001e4c:	call   0x6501d0b0
    65001e51:	mov    rdi,QWORD PTR [rsi+0x18]
    65001e55:	sub    rdi,rbp
    65001e58:	cmp    r12,rdi
    65001e5b:	cmovb  rdi,r12
    65001e5f:	cmp    rbx,rsi
    65001e62:	jne    0x65001f47
    65001e68:	lea    r12,[rdi+rbp*1]
    65001e6c:	or     rsi,0xffffffffffffffff
    65001e70:	cmp    QWORD PTR [rbx+0x18],r12
    65001e74:	jae    0x65001e7b
    65001e76:	call   0x6501d0b0
    65001e7b:	mov    r9,QWORD PTR [rbx+0x18]
    65001e7f:	sub    r9,r12
    65001e82:	cmp    r9,0xffffffffffffffff
    65001e86:	jae    0x65001e90
    65001e88:	test   r9,r9
    65001e8b:	mov    rsi,r9
    65001e8e:	je     0x65001ee4
    65001e90:	mov    rdx,QWORD PTR [rbx+0x20]
    65001e94:	lea    rdi,[rbx+0x8]
    65001e98:	cmp    rdx,0x10
    65001e9c:	jb     0x65001ea3
    65001e9e:	mov    rcx,QWORD PTR [rdi]
    65001ea1:	jmp    0x65001ea6
    65001ea3:	mov    rcx,rdi
    65001ea6:	cmp    rdx,0x10
    65001eaa:	jb     0x65001eb1
    65001eac:	mov    rax,QWORD PTR [rdi]
    65001eaf:	jmp    0x65001eb4
    65001eb1:	mov    rax,rdi
    65001eb4:	lea    r8,[rcx+r12*1]
    65001eb8:	lea    rcx,[rax+r12*1]
    65001ebc:	sub    r9,rsi
    65001ebf:	add    r8,rsi
    65001ec2:	sub    rdx,r12
    65001ec5:	call   0x6501d710
    65001eca:	mov    r11,QWORD PTR [rbx+0x18]
    65001ece:	sub    r11,rsi
    65001ed1:	cmp    QWORD PTR [rbx+0x20],0x10
    65001ed6:	mov    QWORD PTR [rbx+0x18],r11
    65001eda:	jb     0x65001edf
    65001edc:	mov    rdi,QWORD PTR [rdi]
    65001edf:	mov    BYTE PTR [rdi+r11*1],0x0
    65001ee4:	mov    r9,QWORD PTR [rbx+0x18]
    65001ee8:	cmp    r9,rbp
    65001eeb:	cmovb  rbp,r9
    65001eef:	test   rbp,rbp
    65001ef2:	je     0x65001fd5
    65001ef8:	mov    rdx,QWORD PTR [rbx+0x20]
    65001efc:	lea    rdi,[rbx+0x8]
    65001f00:	cmp    rdx,0x10
    65001f04:	jb     0x65001f0b
    65001f06:	mov    rax,QWORD PTR [rdi]
    65001f09:	jmp    0x65001f0e
    65001f0b:	mov    rax,rdi
    65001f0e:	cmp    rdx,0x10
    65001f12:	jb     0x65001f19
    65001f14:	mov    rcx,QWORD PTR [rdi]
    65001f17:	jmp    0x65001f1c
    65001f19:	mov    rcx,rdi
    65001f1c:	lea    r8,[rax+rbp*1]
    65001f20:	sub    r9,rbp
    65001f23:	call   0x6501d710
    65001f28:	mov    r11,QWORD PTR [rbx+0x18]
    65001f2c:	sub    r11,rbp
    65001f2f:	cmp    QWORD PTR [rbx+0x20],0x10
    65001f34:	mov    QWORD PTR [rbx+0x18],r11
    65001f38:	jb     0x65001f3d
    65001f3a:	mov    rdi,QWORD PTR [rdi]
    65001f3d:	mov    BYTE PTR [rdi+r11*1],0x0
    65001f42:	jmp    0x65001fd5
    65001f47:	cmp    rdi,0xfffffffffffffffe
    65001f4b:	jbe    0x65001f52
    65001f4d:	call   0x6501cfe0
    65001f52:	mov    rax,QWORD PTR [rbx+0x20]
    65001f56:	cmp    rax,rdi
    65001f59:	jae    0x65001f7c
    65001f5b:	mov    r8,QWORD PTR [rbx+0x18]
    65001f5f:	mov    rdx,rdi
    65001f62:	mov    rcx,rbx
    65001f65:	call   0x65002330
    65001f6a:	test   rdi,rdi
    65001f6d:	je     0x65001fd5
    65001f6f:	cmp    QWORD PTR [rsi+0x20],0x10
    65001f74:	jb     0x65001f9d
    65001f76:	mov    rax,QWORD PTR [rsi+0x8]
    65001f7a:	jmp    0x65001fa1
    65001f7c:	test   rdi,rdi
    65001f7f:	jne    0x65001f6f
    65001f81:	cmp    rax,0x10
    65001f85:	mov    QWORD PTR [rbx+0x18],rdi
    65001f89:	jb     0x65001f94
    65001f8b:	mov    rax,QWORD PTR [rbx+0x8]
    65001f8f:	mov    BYTE PTR [rax],dil
    65001f92:	jmp    0x65001fd5
    65001f94:	lea    rax,[rbx+0x8]
    65001f98:	mov    BYTE PTR [rax],0x0
    65001f9b:	jmp    0x65001fd5
    65001f9d:	lea    rax,[rsi+0x8]
    65001fa1:	mov    rdx,QWORD PTR [rbx+0x20]
    65001fa5:	lea    rsi,[rbx+0x8]
    65001fa9:	cmp    rdx,0x10
    65001fad:	jb     0x65001fb4
    65001faf:	mov    rcx,QWORD PTR [rsi]
    65001fb2:	jmp    0x65001fb7
    65001fb4:	mov    rcx,rsi
    65001fb7:	lea    r8,[rax+rbp*1]
    65001fbb:	mov    r9,rdi
    65001fbe:	call   0x6501d640
    65001fc3:	cmp    QWORD PTR [rbx+0x20],0x10
    65001fc8:	mov    QWORD PTR [rbx+0x18],rdi
    65001fcc:	jb     0x65001fd1
    65001fce:	mov    rsi,QWORD PTR [rsi]
    65001fd1:	mov    BYTE PTR [rsi+rdi*1],0x0
    65001fd5:	mov    rbp,QWORD PTR [rsp+0x38]
    65001fda:	mov    rsi,QWORD PTR [rsp+0x40]
    65001fdf:	mov    rdi,QWORD PTR [rsp+0x48]
    65001fe4:	mov    rax,rbx
    65001fe7:	mov    rbx,QWORD PTR [rsp+0x30]
    65001fec:	add    rsp,0x20
    65001ff0:	pop    r12
    65001ff2:	ret    
    65001ff3:	int3   
    65001ff4:	int3   
    65001ff5:	int3   
    65001ff6:	int3   
    65001ff7:	int3   
    65001ff8:	int3   
    65001ff9:	int3   
    65001ffa:	int3   
    65001ffb:	int3   
    65001ffc:	int3   
    65001ffd:	int3   
    65001ffe:	int3   
    65001fff:	int3   
    65002000:	mov    QWORD PTR [rsp+0x8],rbx
    65002005:	mov    QWORD PTR [rsp+0x10],rbp
    6500200a:	mov    QWORD PTR [rsp+0x18],rsi
    6500200f:	push   rdi
    65002010:	sub    rsp,0x20
    65002014:	mov    rsi,r8
    65002017:	mov    r8,QWORD PTR [rcx+0x20]
    6500201b:	mov    rbp,rdx
    6500201e:	cmp    r8,0x10
    65002022:	mov    rdi,rcx
    65002025:	lea    rbx,[rcx+0x8]
    65002029:	jb     0x65002030
    6500202b:	mov    rax,QWORD PTR [rbx]
    6500202e:	jmp    0x65002033
    65002030:	mov    rax,rbx
    65002033:	cmp    rdx,rax
    65002036:	jb     0x6500206e
    65002038:	cmp    r8,0x10
    6500203c:	jb     0x65002043
    6500203e:	mov    rcx,QWORD PTR [rbx]
    65002041:	jmp    0x65002046
    65002043:	mov    rcx,rbx
    65002046:	add    rcx,QWORD PTR [rdi+0x18]
    6500204a:	cmp    rcx,rdx
    6500204d:	jbe    0x6500206e
    6500204f:	cmp    r8,0x10
    65002053:	jb     0x65002058
    65002055:	mov    rbx,QWORD PTR [rbx]
    65002058:	sub    rbp,rbx
    6500205b:	mov    r9,rsi
    6500205e:	mov    rdx,rdi
    65002061:	mov    r8,rbp
    65002064:	mov    rcx,rdi
    65002067:	call   0x65001e20
    6500206c:	jmp    0x650020df
    6500206e:	cmp    rsi,0xfffffffffffffffe
    65002072:	jbe    0x65002079
    65002074:	call   0x6501cfe0
    65002079:	mov    rax,QWORD PTR [rdi+0x20]
    6500207d:	cmp    rax,rsi
    65002080:	jae    0x650020a5
    65002082:	mov    r8,QWORD PTR [rdi+0x18]
    65002086:	mov    rdx,rsi
    65002089:	mov    rcx,rdi
    6500208c:	call   0x65002330
    65002091:	test   rsi,rsi
    65002094:	je     0x650020dc
    65002096:	mov    rdx,QWORD PTR [rdi+0x20]
    6500209a:	cmp    rdx,0x10
    6500209e:	jb     0x650020bc
    650020a0:	mov    rcx,QWORD PTR [rbx]
    650020a3:	jmp    0x650020bf
    650020a5:	test   rsi,rsi
    650020a8:	jne    0x65002096
    650020aa:	cmp    rax,0x10
    650020ae:	mov    QWORD PTR [rdi+0x18],rsi
    650020b2:	jb     0x650020b7
    650020b4:	mov    rbx,QWORD PTR [rbx]
    650020b7:	mov    BYTE PTR [rbx],0x0
    650020ba:	jmp    0x650020dc
    650020bc:	mov    rcx,rbx
    650020bf:	mov    r9,rsi
    650020c2:	mov    r8,rbp
    650020c5:	call   0x6501d640
    650020ca:	cmp    QWORD PTR [rdi+0x20],0x10
    650020cf:	mov    QWORD PTR [rdi+0x18],rsi
    650020d3:	jb     0x650020d8
    650020d5:	mov    rbx,QWORD PTR [rbx]
    650020d8:	mov    BYTE PTR [rbx+rsi*1],0x0
    650020dc:	mov    rax,rdi
    650020df:	mov    rbx,QWORD PTR [rsp+0x30]
    650020e4:	mov    rbp,QWORD PTR [rsp+0x38]
    650020e9:	mov    rsi,QWORD PTR [rsp+0x40]
    650020ee:	add    rsp,0x20
    650020f2:	pop    rdi
    650020f3:	ret    
    650020f4:	int3   
    650020f5:	int3   
    650020f6:	int3   
    650020f7:	int3   
    650020f8:	int3   
    650020f9:	int3   
    650020fa:	int3   
    650020fb:	int3   
    650020fc:	int3   
    650020fd:	int3   
    650020fe:	int3   
    650020ff:	int3   
    65002100:	sub    rsp,0x28
    65002104:	mov    rdx,QWORD PTR [rcx]
    65002107:	sub    rdx,0x18
    6500210b:	or     eax,0xffffffff
    6500210e:	lock xadd DWORD PTR [rdx+0x10],eax
    65002113:	add    eax,0xffffffff
    65002116:	test   eax,eax
    65002118:	jg     0x65002123
    6500211a:	mov    rcx,QWORD PTR [rdx]
    6500211d:	mov    rax,QWORD PTR [rcx]
    65002120:	call   QWORD PTR [rax+0x8]
    65002123:	add    rsp,0x28
    65002127:	ret    
    65002128:	int3   
    65002129:	int3   
    6500212a:	int3   
    6500212b:	int3   
    6500212c:	int3   
    6500212d:	int3   
    6500212e:	int3   
    6500212f:	int3   
    65002130:	mov    QWORD PTR [rsp+0x8],rbx
    65002135:	mov    QWORD PTR [rsp+0x10],rbp
    6500213a:	mov    QWORD PTR [rsp+0x18],rsi
    6500213f:	mov    QWORD PTR [rsp+0x20],rdi
    65002144:	push   r12
    65002146:	sub    rsp,0x20
    6500214a:	mov    rbx,QWORD PTR [rcx]
    6500214d:	mov    rsi,rcx
    65002150:	mov    edi,edx
    65002152:	mov    rcx,QWORD PTR [rbx-0x18]
    65002156:	mov    ebp,DWORD PTR [rbx-0x10]
    65002159:	mov    rax,QWORD PTR [rcx]
    6500215c:	call   QWORD PTR [rax+0x20]
    6500215f:	mov    r8d,0x2
    65002165:	mov    edx,edi
    65002167:	mov    r9,QWORD PTR [rax]
    6500216a:	mov    rcx,rax
    6500216d:	call   QWORD PTR [r9]
    65002170:	test   rax,rax
    65002173:	mov    r12,rax
    65002176:	jne    0x6500217e
    65002178:	call   0x65002320
    6500217d:	int3   
    6500217e:	cmp    ebp,edi
    65002180:	mov    r8,rbx
    65002183:	cmovl  edi,ebp
    65002186:	add    edi,0x1
    65002189:	movsxd rdx,edi
    6500218c:	lea    rdi,[rax+0x18]
    65002190:	add    rdx,rdx
    65002193:	mov    rcx,rdi
    65002196:	mov    r9,rdx
    65002199:	call   0x6501d640
    6500219e:	mov    DWORD PTR [r12+0x8],ebp
    650021a3:	or     eax,0xffffffff
    650021a6:	lock xadd DWORD PTR [rbx-0x8],eax
    650021ab:	add    eax,0xffffffff
    650021ae:	test   eax,eax
    650021b0:	jg     0x650021c0
    650021b2:	mov    rcx,QWORD PTR [rbx-0x18]
    650021b6:	lea    rdx,[rbx-0x18]
    650021ba:	mov    rax,QWORD PTR [rcx]
    650021bd:	call   QWORD PTR [rax+0x8]
    650021c0:	mov    rbx,QWORD PTR [rsp+0x30]
    650021c5:	mov    rbp,QWORD PTR [rsp+0x38]
    650021ca:	mov    QWORD PTR [rsi],rdi
    650021cd:	mov    rsi,QWORD PTR [rsp+0x40]
    650021d2:	mov    rdi,QWORD PTR [rsp+0x48]
    650021d7:	add    rsp,0x20
    650021db:	pop    r12
    650021dd:	ret    
    650021de:	int3   
    650021df:	int3   
    650021e0:	mov    QWORD PTR [rsp+0x10],rbx
    650021e5:	mov    QWORD PTR [rsp+0x18],rbp
    650021ea:	mov    QWORD PTR [rsp+0x20],rdi
    650021ef:	push   r12
    650021f1:	sub    rsp,0x20
    650021f5:	cmp    QWORD PTR [rdx+0x18],r8
    650021f9:	mov    rbp,r9
    650021fc:	mov    r12,r8
    650021ff:	mov    rdi,rdx
    65002202:	mov    rbx,rcx
    65002205:	jae    0x6500220c
    65002207:	call   0x6501d0b0
    6500220c:	mov    rax,QWORD PTR [rdi+0x18]
    65002210:	mov    rcx,QWORD PTR [rbx+0x18]
    65002214:	sub    rax,r12
    65002217:	cmp    rax,rbp
    6500221a:	cmovb  rbp,rax
    6500221e:	or     rax,0xffffffffffffffff
    65002222:	sub    rax,rcx
    65002225:	cmp    rax,rbp
    65002228:	jbe    0x65002233
    6500222a:	lea    rax,[rcx+rbp*1]
    6500222e:	cmp    rax,rcx
    65002231:	jae    0x65002238
    65002233:	call   0x6501cfe0
    65002238:	test   rbp,rbp
    6500223b:	je     0x6500230d
    65002241:	mov    QWORD PTR [rsp+0x30],rsi
    65002246:	mov    rsi,QWORD PTR [rbx+0x18]
    6500224a:	add    rsi,rbp
    6500224d:	cmp    rsi,0xfffffffffffffffe
    65002251:	jbe    0x65002258
    65002253:	call   0x6501cfe0
    65002258:	mov    rax,QWORD PTR [rbx+0x20]
    6500225c:	cmp    rax,rsi
    6500225f:	jae    0x65002286
    65002261:	mov    r8,QWORD PTR [rbx+0x18]
    65002265:	mov    rdx,rsi
    65002268:	mov    rcx,rbx
    6500226b:	call   0x65002330
    65002270:	test   rsi,rsi
    65002273:	je     0x65002308
    65002279:	cmp    QWORD PTR [rdi+0x20],0x10
    6500227e:	jb     0x650022c0
    65002280:	mov    rcx,QWORD PTR [rdi+0x8]
    65002284:	jmp    0x650022c4
    65002286:	test   rsi,rsi
    65002289:	jne    0x65002270
    6500228b:	cmp    rax,0x10
    6500228f:	mov    QWORD PTR [rbx+0x18],rsi
    65002293:	jb     0x6500229b
    65002295:	mov    rax,QWORD PTR [rbx+0x8]
    65002299:	jmp    0x6500229f
    6500229b:	lea    rax,[rbx+0x8]
    6500229f:	mov    BYTE PTR [rax],0x0
    650022a2:	mov    rax,rbx
    650022a5:	mov    rsi,QWORD PTR [rsp+0x30]
    650022aa:	mov    rbx,QWORD PTR [rsp+0x38]
    650022af:	mov    rbp,QWORD PTR [rsp+0x40]
    650022b4:	mov    rdi,QWORD PTR [rsp+0x48]
    650022b9:	add    rsp,0x20
    650022bd:	pop    r12
    650022bf:	ret    
    650022c0:	lea    rcx,[rdi+0x8]
    650022c4:	mov    rdx,QWORD PTR [rbx+0x20]
    650022c8:	cmp    rdx,0x10
    650022cc:	jb     0x650022d8
    650022ce:	mov    r9,QWORD PTR [rbx+0x8]
    650022d2:	lea    rdi,[rbx+0x8]
    650022d6:	jmp    0x650022df
    650022d8:	lea    rdi,[rbx+0x8]
    650022dc:	mov    r9,rdi
    650022df:	mov    rax,QWORD PTR [rbx+0x18]
    650022e3:	lea    r8,[rcx+r12*1]
    650022e7:	lea    rcx,[rax+r9*1]
    650022eb:	sub    rdx,rax
    650022ee:	mov    r9,rbp
    650022f1:	call   0x6501d640
    650022f6:	cmp    QWORD PTR [rbx+0x20],0x10
    650022fb:	mov    QWORD PTR [rbx+0x18],rsi
    650022ff:	jb     0x65002304
    65002301:	mov    rdi,QWORD PTR [rdi]
    65002304:	mov    BYTE PTR [rdi+rsi*1],0x0
    65002308:	mov    rax,rbx
    6500230b:	jmp    0x650022a5
    6500230d:	mov    rax,rbx
    65002310:	jmp    0x650022aa
    65002312:	int3   
    65002313:	int3   
    65002314:	int3   
    65002315:	int3   
    65002316:	int3   
    65002317:	int3   
    65002318:	int3   
    65002319:	int3   
    6500231a:	int3   
    6500231b:	int3   
    6500231c:	int3   
    6500231d:	int3   
    6500231e:	int3   
    6500231f:	int3   
    65002320:	sub    rsp,0x28
    65002324:	mov    ecx,0x8007000e
    65002329:	call   0x65001050
    6500232e:	int3   
    6500232f:	int3   
    65002330:	mov    QWORD PTR [rsp+0x18],r8
    65002335:	mov    QWORD PTR [rsp+0x10],rdx
    6500233a:	mov    QWORD PTR [rsp+0x8],rcx
    6500233f:	push   rbx
    65002340:	push   rsi
    65002341:	push   rdi
    65002342:	push   r12
    65002344:	sub    rsp,0x58
    65002348:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    65002351:	mov    rsi,r8
    65002354:	mov    rbx,rcx
    65002357:	mov    rdi,rdx
    6500235a:	or     rdi,0xf
    6500235e:	cmp    rdi,0xfffffffffffffffe
    65002362:	jbe    0x65002369
    65002364:	mov    rdi,rdx
    65002367:	jmp    0x6500239b
    65002369:	mov    r8,QWORD PTR [rcx+0x20]
    6500236d:	mov    rcx,r8
    65002370:	shr    rcx,1
    65002373:	movabs rax,0xaaaaaaaaaaaaaaab
    6500237d:	mul    rdi
    65002380:	shr    rdx,1
    65002383:	cmp    rdx,rcx
    65002386:	jae    0x6500239b
    65002388:	mov    rax,0xfffffffffffffffe
    6500238f:	sub    rax,rcx
    65002392:	cmp    r8,rax
    65002395:	ja     0x6500239b
    65002397:	lea    rdi,[rcx+r8*1]
    6500239b:	lea    rcx,[rdi+0x1]
    6500239f:	test   rcx,rcx
    650023a2:	je     0x650023ec
    650023a4:	xor    edx,edx
    650023a6:	or     rax,0xffffffffffffffff
    650023aa:	div    rcx
    650023ad:	cmp    rax,0x1
    650023b1:	jae    0x650023ec
    650023b3:	xor    ecx,ecx
    650023b5:	mov    QWORD PTR [rsp+0x98],rcx
    650023bd:	lea    rdx,[rsp+0x98]
    650023c5:	lea    rcx,[rsp+0x30]
    650023ca:	call   0x6501d1c0
    650023cf:	lea    rax,[rip+0x32d32]        # 0x65035108
    650023d6:	mov    QWORD PTR [rsp+0x30],rax
    650023db:	lea    rdx,[rip+0x3ed5e]        # 0x65041140
    650023e2:	lea    rcx,[rsp+0x30]
    650023e7:	call   0x6501daf0
    650023ec:	call   0x6501da50
    650023f1:	mov    r12,rax
    650023f4:	jmp    0x65002413
    650023f6:	mov    rbx,QWORD PTR [rsp+0x80]
    650023fe:	mov    rsi,QWORD PTR [rsp+0x90]
    65002406:	mov    rdi,QWORD PTR [rsp+0x88]
    6500240e:	mov    r12,QWORD PTR [rsp+0x20]
    65002413:	test   rsi,rsi
    65002416:	je     0x65002438
    65002418:	cmp    QWORD PTR [rbx+0x20],0x10
    6500241d:	jb     0x65002425
    6500241f:	mov    r8,QWORD PTR [rbx+0x8]
    65002423:	jmp    0x65002429
    65002425:	lea    r8,[rbx+0x8]
    65002429:	lea    rdx,[rdi+0x1]
    6500242d:	mov    r9,rsi
    65002430:	mov    rcx,r12
    65002433:	call   0x6501d640
    65002438:	cmp    QWORD PTR [rbx+0x20],0x10
    6500243d:	jb     0x65002448
    6500243f:	mov    rcx,QWORD PTR [rbx+0x8]
    65002443:	call   0x6501d190
    65002448:	lea    rax,[rbx+0x8]
    6500244c:	mov    BYTE PTR [rax],0x0
    6500244f:	mov    QWORD PTR [rax],r12
    65002452:	mov    QWORD PTR [rbx+0x20],rdi
    65002456:	mov    QWORD PTR [rbx+0x18],rsi
    6500245a:	cmp    rdi,0x10
    6500245e:	cmovae rax,r12
    65002462:	mov    BYTE PTR [rax+rsi*1],0x0
    65002466:	add    rsp,0x58
    6500246a:	pop    r12
    6500246c:	pop    rdi
    6500246d:	pop    rsi
    6500246e:	pop    rbx
    6500246f:	ret    
    65002470:	mov    QWORD PTR [rsp+0x10],rdx
    65002475:	push   rbp
    65002476:	sub    rsp,0x20
    6500247a:	mov    rbp,rdx
    6500247d:	mov    rdx,QWORD PTR [rbp+0x88]
    65002484:	mov    QWORD PTR [rbp+0x88],rdx
    6500248b:	add    rdx,0x1
    6500248f:	mov    rcx,QWORD PTR [rbp+0x80]
    65002496:	call   0x65002500
    6500249b:	mov    QWORD PTR [rbp+0x20],rax
    6500249f:	lea    rax,[rip+0xffffffffffffff50]        # 0x650023f6
    650024a6:	add    rsp,0x20
    650024aa:	pop    rbp
    650024ab:	ret    
    650024ac:	int3   
    650024ad:	int3   
    650024ae:	int3   
    650024af:	int3   
    650024b0:	mov    QWORD PTR [rsp+0x10],rdx
    650024b5:	push   rbx
    650024b6:	push   rbp
    650024b7:	sub    rsp,0x28
    650024bb:	mov    rbp,rdx
    650024be:	mov    rbx,QWORD PTR [rbp+0x80]
    650024c5:	cmp    QWORD PTR [rbx+0x20],0x10
    650024ca:	jb     0x650024d5
    650024cc:	mov    rcx,QWORD PTR [rbx+0x8]
    650024d0:	call   0x6501d190
    650024d5:	mov    QWORD PTR [rbx+0x20],0xf
    650024dd:	xor    ecx,ecx
    650024df:	mov    QWORD PTR [rbx+0x18],rcx
    650024e3:	mov    BYTE PTR [rbx+0x8],cl
    650024e6:	xor    edx,edx
    650024e8:	call   0x6501daf0
    650024ed:	nop
    650024ee:	add    rsp,0x28
    650024f2:	pop    rbp
    650024f3:	pop    rbx
    650024f4:	ret    
    650024f5:	int3   
    650024f6:	int3   
    650024f7:	int3   
    650024f8:	int3   
    650024f9:	int3   
    650024fa:	int3   
    650024fb:	int3   
    650024fc:	int3   
    650024fd:	int3   
    650024fe:	int3   
    650024ff:	int3   
    65002500:	sub    rsp,0x48
    65002504:	test   rdx,rdx
    65002507:	mov    r8,rdx
    6500250a:	jne    0x65002519
    6500250c:	mov    rcx,r8
    6500250f:	call   0x6501da50
    65002514:	add    rsp,0x48
    65002518:	ret    
    65002519:	xor    edx,edx
    6500251b:	or     rax,0xffffffffffffffff
    6500251f:	div    r8
    65002522:	cmp    rax,0x1
    65002526:	jae    0x6500250c
    65002528:	xor    r8d,r8d
    6500252b:	lea    rdx,[rsp+0x58]
    65002530:	lea    rcx,[rsp+0x20]
    65002535:	mov    QWORD PTR [rsp+0x58],r8
    6500253a:	call   0x6501d1c0
    6500253f:	lea    r11,[rip+0x32bc2]        # 0x65035108
    65002546:	lea    rdx,[rip+0x3ebf3]        # 0x65041140
    6500254d:	lea    rcx,[rsp+0x20]
    65002552:	mov    QWORD PTR [rsp+0x20],r11
    65002557:	call   0x6501daf0
    6500255c:	int3   
    6500255d:	int3   
    6500255e:	int3   
    6500255f:	int3   
    65002560:	mov    QWORD PTR [rsp+0x10],rdx
    65002565:	mov    QWORD PTR [rsp+0x18],r8
    6500256a:	mov    QWORD PTR [rsp+0x20],r9
    6500256f:	push   rbp
    65002570:	push   rsi
    65002571:	push   rdi
    65002572:	sub    rsp,0x30
    65002576:	test   rdx,rdx
    65002579:	mov    rsi,rdx
    6500257c:	mov    rdi,rcx
    6500257f:	lea    rbp,[rsp+0x60]
    65002584:	jne    0x65002591
    65002586:	mov    ecx,0x80070057
    6500258b:	call   0x65001050
    65002590:	int3   
    65002591:	mov    rdx,rbp
    65002594:	mov    rcx,rsi
    65002597:	mov    QWORD PTR [rsp+0x28],rbx
    6500259c:	call   0x6501e710
    650025a1:	mov    rcx,QWORD PTR [rdi]
    650025a4:	mov    edx,0x1
    650025a9:	sub    edx,DWORD PTR [rcx-0x8]
    650025ac:	mov    ecx,DWORD PTR [rcx-0xc]
    650025af:	movsxd rbx,eax
    650025b2:	sub    ecx,ebx
    650025b4:	or     edx,ecx
    650025b6:	jge    0x650025c2
    650025b8:	mov    edx,ebx
    650025ba:	mov    rcx,rdi
    650025bd:	call   0x65002640
    650025c2:	mov    rcx,QWORD PTR [rdi]
    650025c5:	lea    eax,[rbx+0x1]
    650025c8:	mov    r9,rbp
    650025cb:	movsxd rdx,eax
    650025ce:	mov    r8,rsi
    650025d1:	call   0x6501e8d0
    650025d6:	test   ebx,ebx
    650025d8:	js     0x650025fb
    650025da:	mov    rax,QWORD PTR [rdi]
    650025dd:	cmp    ebx,DWORD PTR [rax-0xc]
    650025e0:	jg     0x650025fb
    650025e2:	mov    DWORD PTR [rax-0x10],ebx
    650025e5:	mov    rax,QWORD PTR [rdi]
    650025e8:	mov    WORD PTR [rax+rbx*2],0x0
    650025ee:	mov    rbx,QWORD PTR [rsp+0x28]
    650025f3:	add    rsp,0x30
    650025f7:	pop    rdi
    650025f8:	pop    rsi
    650025f9:	pop    rbp
    650025fa:	ret    
    650025fb:	mov    ecx,0x80070057
    65002600:	call   0x65001050
    65002605:	int3   
    65002606:	int3   
    65002607:	int3   
    65002608:	int3   
    65002609:	int3   
    6500260a:	int3   
    6500260b:	int3   
    6500260c:	int3   
    6500260d:	int3   
    6500260e:	int3   
    6500260f:	int3   
    65002610:	rex push rbx
    65002612:	sub    rsp,0x20
    65002616:	mov    rbx,rcx
    65002619:	call   0x6501d270
    6500261e:	lea    r11,[rip+0x32ae3]        # 0x65035108
    65002625:	mov    QWORD PTR [rbx],r11
    65002628:	mov    rax,rbx
    6500262b:	add    rsp,0x20
    6500262f:	pop    rbx
    65002630:	ret    
    65002631:	int3   
    65002632:	int3   
    65002633:	int3   
    65002634:	int3   
    65002635:	int3   
    65002636:	int3   
    65002637:	int3   
    65002638:	int3   
    65002639:	int3   
    6500263a:	int3   
    6500263b:	int3   
    6500263c:	int3   
    6500263d:	int3   
    6500263e:	int3   
    6500263f:	int3   
    65002640:	sub    rsp,0x28
    65002644:	mov    r8d,edx
    65002647:	mov    rdx,QWORD PTR [rcx]
    6500264a:	mov    eax,DWORD PTR [rdx-0x10]
    6500264d:	cmp    eax,r8d
    65002650:	cmovg  r8d,eax
    65002654:	cmp    DWORD PTR [rdx-0x8],0x1
    65002658:	jle    0x65002666
    6500265a:	mov    edx,r8d
    6500265d:	add    rsp,0x28
    65002661:	jmp    0x65002130
    65002666:	mov    edx,DWORD PTR [rdx-0xc]
    65002669:	cmp    edx,r8d
    6500266c:	jge    0x6500269a
    6500266e:	cmp    edx,0x400
    65002674:	jle    0x6500268c
    65002676:	add    edx,0x400
    6500267c:	cmp    edx,r8d
    6500267f:	cmovl  edx,r8d
    65002683:	add    rsp,0x28
    65002687:	jmp    0x650026a0
    6500268c:	add    edx,edx
    6500268e:	cmp    edx,r8d
    65002691:	cmovl  edx,r8d
    65002695:	call   0x650026a0
    6500269a:	add    rsp,0x28
    6500269e:	ret    
    6500269f:	int3   
    650026a0:	rex push rbx
    650026a2:	sub    rsp,0x20
    650026a6:	mov    r8d,edx
    650026a9:	mov    rdx,QWORD PTR [rcx]
    650026ac:	mov    rbx,rcx
    650026af:	mov    rcx,QWORD PTR [rdx-0x18]
    650026b3:	sub    rdx,0x18
    650026b7:	cmp    DWORD PTR [rdx+0xc],r8d
    650026bb:	jge    0x650026e6
    650026bd:	test   r8d,r8d
    650026c0:	jle    0x650026e6
    650026c2:	mov    rax,QWORD PTR [rcx]
    650026c5:	mov    r9d,0x2
    650026cb:	call   QWORD PTR [rax+0x10]
    650026ce:	test   rax,rax
    650026d1:	jne    0x650026d9
    650026d3:	call   0x65002320
    650026d8:	int3   
    650026d9:	add    rax,0x18
    650026dd:	mov    QWORD PTR [rbx],rax
    650026e0:	add    rsp,0x20
    650026e4:	pop    rbx
    650026e5:	ret    
    650026e6:	call   0x65002320
    650026eb:	int3   
    650026ec:	int3   
    650026ed:	int3   
    650026ee:	int3   
    650026ef:	int3   
    650026f0:	mov    QWORD PTR [rsp+0x8],rbx
    650026f5:	mov    QWORD PTR [rsp+0x10],rbp
    650026fa:	mov    QWORD PTR [rsp+0x18],rsi
    650026ff:	mov    QWORD PTR [rsp+0x20],rdi
    65002704:	push   r12
    65002706:	push   r13
    65002708:	push   r14
    6500270a:	sub    rsp,0x20
    6500270e:	mov    r12d,ecx
    65002711:	movzx  r13d,dx
    65002715:	lea    rcx,[rip+0x41434]        # 0x65043b50
    6500271c:	xor    r14d,r14d
    6500271f:	xor    edx,edx
    65002721:	mov    rbx,r14
    65002724:	call   0x6501cc7c
    65002729:	lea    ebp,[r14+0x1]
    6500272d:	test   rax,rax
    65002730:	mov    rsi,rax
    65002733:	je     0x65002806
    65002739:	data16 xchg ax,ax
    6500273c:	data16 data16 xchg ax,ax
    65002740:	test   rbx,rbx
    65002743:	jne    0x65002806
    65002749:	mov    eax,r12d
    6500274c:	lea    edx,[rbx+0x6]
    6500274f:	movzx  r9d,r13w
    65002753:	shr    eax,0x4
    65002756:	mov    rcx,rsi
    65002759:	add    ax,0x1
    6500275d:	movzx  r8d,ax
    65002761:	call   QWORD PTR [rip+0x31901]        # 0x65034068
    65002767:	test   rax,rax
    6500276a:	mov    rdi,rax
    6500276d:	jne    0x65002774
    6500276f:	mov    rbx,r14
    65002772:	jmp    0x650027e9
    65002774:	mov    rdx,rax
    65002777:	mov    rcx,rsi
    6500277a:	call   QWORD PTR [rip+0x318d8]        # 0x65034058
    65002780:	test   rax,rax
    65002783:	jne    0x6500278a
    65002785:	mov    rbx,r14
    65002788:	jmp    0x650027e4
    6500278a:	mov    rcx,rax
    6500278d:	call   QWORD PTR [rip+0x318bd]        # 0x65034050
    65002793:	test   rax,rax
    65002796:	mov    rbx,rax
    65002799:	jne    0x650027a0
    6500279b:	mov    rbx,r14
    6500279e:	jmp    0x650027e4
    650027a0:	mov    rdx,rdi
    650027a3:	mov    rcx,rsi
    650027a6:	call   QWORD PTR [rip+0x3189c]        # 0x65034048
    650027ac:	mov    ecx,r12d
    650027af:	mov    r11d,eax
    650027b2:	add    r11,rbx
    650027b5:	and    ecx,0xf
    650027b8:	jbe    0x650027d2
    650027ba:	data16 xchg ax,ax
    650027bd:	data16 xchg ax,ax
    650027c0:	cmp    rbx,r11
    650027c3:	jae    0x650027d7
    650027c5:	add    ecx,0xffffffff
    650027c8:	movzx  eax,WORD PTR [rbx]
    650027cb:	lea    rbx,[rbx+rax*2+0x2]
    650027d0:	jne    0x650027c0
    650027d2:	cmp    rbx,r11
    650027d5:	jb     0x650027dc
    650027d7:	mov    rbx,r14
    650027da:	jmp    0x650027e4
    650027dc:	cmp    WORD PTR [rbx],r14w
    650027e0:	cmove  rbx,r14
    650027e4:	test   rbx,rbx
    650027e7:	jne    0x65002827
    650027e9:	lea    rcx,[rip+0x41360]        # 0x65043b50
    650027f0:	mov    edx,ebp
    650027f2:	call   0x6501cc7c
    650027f7:	add    ebp,0x1
    650027fa:	test   rax,rax
    650027fd:	mov    rsi,rax
    65002800:	jne    0x65002740
    65002806:	xor    eax,eax
    65002808:	mov    rbx,QWORD PTR [rsp+0x40]
    6500280d:	mov    rbp,QWORD PTR [rsp+0x48]
    65002812:	mov    rsi,QWORD PTR [rsp+0x50]
    65002817:	mov    rdi,QWORD PTR [rsp+0x58]
    6500281c:	add    rsp,0x20
    65002820:	pop    r14
    65002822:	pop    r13
    65002824:	pop    r12
    65002826:	ret    
    65002827:	mov    rax,rsi
    6500282a:	jmp    0x65002808
    6500282c:	int3   
    6500282d:	int3   
    6500282e:	int3   
    6500282f:	int3   
    65002830:	rex push rbx
    65002832:	sub    rsp,0x20
    65002836:	lea    rax,[rip+0x3477b]        # 0x65036fb8
    6500283d:	mov    rbx,rcx
    65002840:	mov    QWORD PTR [rcx],rax
    65002843:	cmp    QWORD PTR [rcx+0x38],0x10
    65002848:	jb     0x65002853
    6500284a:	mov    rcx,QWORD PTR [rcx+0x20]
    6500284e:	call   0x6501d190
    65002853:	mov    QWORD PTR [rbx+0x38],0xf
    6500285b:	mov    QWORD PTR [rbx+0x30],0x0
    65002863:	mov    rcx,rbx
    65002866:	mov    BYTE PTR [rbx+0x20],0x0
    6500286a:	add    rsp,0x20
    6500286e:	pop    rbx
    6500286f:	jmp    0x6501d320
    65002874:	int3   
    65002875:	int3   
    65002876:	int3   
    65002877:	int3   
    65002878:	int3   
    65002879:	int3   
    6500287a:	int3   
    6500287b:	int3   
    6500287c:	int3   
    6500287d:	int3   
    6500287e:	int3   
    6500287f:	int3   
    65002880:	cmp    QWORD PTR [rcx+0x38],0x10
    65002885:	jb     0x6500288c
    65002887:	mov    rax,QWORD PTR [rcx+0x20]
    6500288b:	ret    
    6500288c:	lea    rax,[rcx+0x20]
    65002890:	ret    
    65002891:	int3   
    65002892:	int3   
    65002893:	int3   
    65002894:	int3   
    65002895:	int3   
    65002896:	int3   
    65002897:	int3   
    65002898:	int3   
    65002899:	int3   
    6500289a:	int3   
    6500289b:	int3   
    6500289c:	int3   
    6500289d:	int3   
    6500289e:	int3   
    6500289f:	int3   
    650028a0:	mov    QWORD PTR [rsp+0x8],rbx
    650028a5:	push   rdi
    650028a6:	sub    rsp,0x20
    650028aa:	lea    rax,[rip+0x34707]        # 0x65036fb8
    650028b1:	mov    edi,edx
    650028b3:	mov    rbx,rcx
    650028b6:	mov    QWORD PTR [rcx],rax
    650028b9:	cmp    QWORD PTR [rcx+0x38],0x10
    650028be:	jb     0x650028c9
    650028c0:	mov    rcx,QWORD PTR [rcx+0x20]
    650028c4:	call   0x6501d190
    650028c9:	mov    QWORD PTR [rbx+0x38],0xf
    650028d1:	mov    QWORD PTR [rbx+0x30],0x0
    650028d9:	mov    rcx,rbx
    650028dc:	mov    BYTE PTR [rbx+0x20],0x0
    650028e0:	call   0x6501d320
    650028e5:	test   dil,0x1
    650028e9:	je     0x650028f3
    650028eb:	mov    rcx,rbx
    650028ee:	call   0x6501d190
    650028f3:	mov    rax,rbx
    650028f6:	mov    rbx,QWORD PTR [rsp+0x30]
    650028fb:	add    rsp,0x20
    650028ff:	pop    rdi
    65002900:	ret    
    65002901:	int3   
    65002902:	int3   
    65002903:	int3   
    65002904:	int3   
    65002905:	int3   
    65002906:	int3   
    65002907:	int3   
    65002908:	int3   
    65002909:	int3   
    6500290a:	int3   
    6500290b:	int3   
    6500290c:	int3   
    6500290d:	int3   
    6500290e:	int3   
    6500290f:	int3   
    65002910:	mov    QWORD PTR [rsp+0x8],rcx
    65002915:	push   rdi
    65002916:	sub    rsp,0x30
    6500291a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65002923:	mov    QWORD PTR [rsp+0x48],rbx
    65002928:	mov    rbx,rdx
    6500292b:	mov    rdi,rcx
    6500292e:	call   0x6501d270
    65002933:	nop
    65002934:	lea    rax,[rip+0x3467d]        # 0x65036fb8
    6500293b:	mov    QWORD PTR [rdi],rax
    6500293e:	lea    rdx,[rbx+0x18]
    65002942:	lea    rcx,[rdi+0x18]
    65002946:	mov    QWORD PTR [rcx+0x20],0xf
    6500294e:	mov    QWORD PTR [rcx+0x18],0x0
    65002956:	mov    BYTE PTR [rcx+0x8],0x0
    6500295a:	or     r9,0xffffffffffffffff
    6500295e:	xor    r8d,r8d
    65002961:	call   0x65001e20
    65002966:	nop
    65002967:	mov    rax,rdi
    6500296a:	mov    rbx,QWORD PTR [rsp+0x48]
    6500296f:	add    rsp,0x30
    65002973:	pop    rdi
    65002974:	ret    
    65002975:	int3   
    65002976:	int3   
    65002977:	int3   
    65002978:	int3   
    65002979:	int3   
    6500297a:	int3   
    6500297b:	int3   
    6500297c:	int3   
    6500297d:	int3   
    6500297e:	int3   
    6500297f:	int3   
    65002980:	rex push rbp
    65002982:	sub    rsp,0x20
    65002986:	mov    rbp,rdx
    65002989:	mov    rcx,QWORD PTR [rbp+0x40]
    6500298d:	call   0x6501d320
    65002992:	add    rsp,0x20
    65002996:	pop    rbp
    65002997:	ret    
    65002998:	int3   
    65002999:	int3   
    6500299a:	int3   
    6500299b:	int3   
    6500299c:	int3   
    6500299d:	int3   
    6500299e:	int3   
    6500299f:	int3   
    650029a0:	rex push rbp
    650029a2:	push   rsi
    650029a3:	push   rdi
    650029a4:	push   r12
    650029a6:	push   r13
    650029a8:	push   r14
    650029aa:	push   r15
    650029ac:	sub    rsp,0x490
    650029b3:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
    650029bc:	mov    QWORD PTR [rsp+0x4e8],rbx
    650029c4:	mov    rax,QWORD PTR [rip+0x3f755]        # 0x65042120
    650029cb:	xor    rax,rsp
    650029ce:	mov    QWORD PTR [rsp+0x480],rax
    650029d6:	mov    r13,r8
    650029d9:	mov    QWORD PTR [rsp+0x50],rdx
    650029de:	mov    r12,rcx
    650029e1:	mov    QWORD PTR [rsp+0x48],rcx
    650029e6:	xor    r15d,r15d
    650029e9:	mov    DWORD PTR [rsp+0x38],r15d
    650029ee:	xor    eax,eax
    650029f0:	mov    r14d,0x1
    650029f6:	lock cmpxchg DWORD PTR [rip+0x44361],r14d        # 0x65046d60
    650029ff:	jne    0x65002a68
    65002a01:	lea    r8,[rip+0x36930]        # 0x65039338
    65002a08:	lea    edx,[r15+0xc]
    65002a0c:	lea    rcx,[rip+0x3694d]        # 0x65039360
    65002a13:	call   0x6500bc30
    65002a18:	mov    rdi,rax
    65002a1b:	lea    r8,[rip+0x3694e]        # 0x65039370
    65002a22:	lea    edx,[r15+0x8]
    65002a26:	lea    rcx,[rip+0x36703]        # 0x65039130
    65002a2d:	call   0x6500c5e0
    65002a32:	mov    rcx,rax
    65002a35:	call   QWORD PTR [rip+0x315ed]        # 0x65034028
    65002a3b:	add    DWORD PTR [rip+0x40f06],r14d        # 0x65043948
    65002a42:	test   rax,rax
    65002a45:	je     0x65002a5c
    65002a47:	mov    rdx,rdi
    65002a4a:	mov    rcx,rax
    65002a4d:	call   QWORD PTR [rip+0x3165d]        # 0x650340b0
    65002a53:	add    DWORD PTR [rip+0x40ef2],r14d        # 0x6504394c
    65002a5a:	jmp    0x65002a5f
    65002a5c:	mov    rax,r15
    65002a5f:	mov    QWORD PTR [rip+0x44422],rax        # 0x65046e88
    65002a66:	jmp    0x65002a6f
    65002a68:	mov    rax,QWORD PTR [rip+0x44419]        # 0x65046e88
    65002a6f:	lea    rdx,[rsp+0x270]
    65002a77:	mov    ecx,0x100
    65002a7c:	call   rax
    65002a7e:	cmp    eax,0x100
    65002a83:	jbe    0x65002af3
    65002a85:	lea    rcx,[rip+0x3f614]        # 0x650420a0
    65002a8c:	mov    rax,QWORD PTR [rip+0x3f60d]        # 0x650420a0
    65002a93:	call   QWORD PTR [rax+0x18]
    65002a96:	add    rax,0x18
    65002a9a:	mov    QWORD PTR [r12],rax
    65002a9e:	lea    rdx,[rip+0x34503]        # 0x65036fa8
    65002aa5:	test   rdx,0xffffffffffff0000
    65002aac:	jne    0x65002acf
    65002aae:	movzx  edi,dx
    65002ab1:	xor    edx,edx
    65002ab3:	mov    ecx,edi
    65002ab5:	call   0x650026f0
    65002aba:	test   rax,rax
    65002abd:	je     0x65002aeb
    65002abf:	mov    r8d,edi
    65002ac2:	mov    rdx,rax
    65002ac5:	mov    rcx,r12
    65002ac8:	call   0x65003e00
    65002acd:	jmp    0x65002aeb
    65002acf:	xor    eax,eax
    65002ad1:	or     rcx,0xffffffffffffffff
    65002ad5:	mov    rdi,rdx
    65002ad8:	repnz scas ax,WORD PTR es:[rdi]
    65002adb:	not    rcx
    65002ade:	lea    r8d,[rcx-0x1]
    65002ae2:	mov    rcx,r12
    65002ae5:	call   0x65003f90
    65002aea:	nop
    65002aeb:	mov    rax,r12
    65002aee:	jmp    0x650033eb
    65002af3:	xor    eax,eax
    65002af5:	lock cmpxchg DWORD PTR [rip+0x44266],r14d        # 0x65046d64
    65002afe:	jne    0x65002b69
    65002b00:	lea    r8,[rip+0x36891]        # 0x65039398
    65002b07:	mov    edx,0x10
    65002b0c:	lea    rcx,[rip+0x368ad]        # 0x650393c0
    65002b13:	call   0x6500bc30
    65002b18:	mov    rdi,rax
    65002b1b:	lea    r8,[rip+0x368b6]        # 0x650393d8
    65002b22:	mov    edx,0x8
    65002b27:	lea    rcx,[rip+0x36602]        # 0x65039130
    65002b2e:	call   0x6500c5e0
    65002b33:	mov    rcx,rax
    65002b36:	call   QWORD PTR [rip+0x314ec]        # 0x65034028
    65002b3c:	add    DWORD PTR [rip+0x40e05],r14d        # 0x65043948
    65002b43:	test   rax,rax
    65002b46:	je     0x65002b5d
    65002b48:	mov    rdx,rdi
    65002b4b:	mov    rcx,rax
    65002b4e:	call   QWORD PTR [rip+0x3155c]        # 0x650340b0
    65002b54:	add    DWORD PTR [rip+0x40df1],r14d        # 0x6504394c
    65002b5b:	jmp    0x65002b60
    65002b5d:	mov    rax,r15
    65002b60:	mov    QWORD PTR [rip+0x44329],rax        # 0x65046e90
    65002b67:	jmp    0x65002b70
    65002b69:	mov    rax,QWORD PTR [rip+0x44320]        # 0x65046e90
    65002b70:	lea    r9,[rsp+0x60]
    65002b75:	xor    r8d,r8d
    65002b78:	lea    rdx,[rip+0x3442d]        # 0x65036fac
    65002b7f:	lea    rcx,[rsp+0x270]
    65002b87:	call   rax
    65002b89:	test   eax,eax
    65002b8b:	jne    0x65002bfb
    65002b8d:	lea    rcx,[rip+0x3f50c]        # 0x650420a0
    65002b94:	mov    rax,QWORD PTR [rip+0x3f505]        # 0x650420a0
    65002b9b:	call   QWORD PTR [rax+0x18]
    65002b9e:	add    rax,0x18
    65002ba2:	mov    QWORD PTR [r12],rax
    65002ba6:	lea    rdx,[rip+0x343fb]        # 0x65036fa8
    65002bad:	test   rdx,0xffffffffffff0000
    65002bb4:	jne    0x65002bd7
    65002bb6:	movzx  edi,dx
    65002bb9:	xor    edx,edx
    65002bbb:	mov    ecx,edi
    65002bbd:	call   0x650026f0
    65002bc2:	test   rax,rax
    65002bc5:	je     0x65002bf3
    65002bc7:	mov    r8d,edi
    65002bca:	mov    rdx,rax
    65002bcd:	mov    rcx,r12
    65002bd0:	call   0x65003e00
    65002bd5:	jmp    0x65002bf3
    65002bd7:	xor    eax,eax
    65002bd9:	or     rcx,0xffffffffffffffff
    65002bdd:	mov    rdi,rdx
    65002be0:	repnz scas ax,WORD PTR es:[rdi]
    65002be3:	not    rcx
    65002be6:	lea    r8d,[rcx-0x1]
    65002bea:	mov    rcx,r12
    65002bed:	call   0x65003f90
    65002bf2:	nop
    65002bf3:	mov    rax,r12
    65002bf6:	jmp    0x650033eb
    65002bfb:	mov    edi,r15d
    65002bfe:	xchg   ax,ax
    65002c00:	cmp    edi,0x708
    65002c06:	je     0x65003382
    65002c0c:	xor    eax,eax
    65002c0e:	lock cmpxchg DWORD PTR [rip+0x44141],r14d        # 0x65046d58
    65002c17:	jne    0x65002c82
    65002c19:	lea    r8,[rip+0x36628]        # 0x65039248
    65002c20:	mov    edx,0xb
    65002c25:	lea    rcx,[rip+0x3665c]        # 0x65039288
    65002c2c:	call   0x6500bc30
    65002c31:	mov    rbx,rax
    65002c34:	lea    r8,[rip+0x3665d]        # 0x65039298
    65002c3b:	mov    edx,0x8
    65002c40:	lea    rcx,[rip+0x364e9]        # 0x65039130
    65002c47:	call   0x6500c5e0
    65002c4c:	mov    rcx,rax
    65002c4f:	call   QWORD PTR [rip+0x313d3]        # 0x65034028
    65002c55:	add    DWORD PTR [rip+0x40cec],r14d        # 0x65043948
    65002c5c:	test   rax,rax
    65002c5f:	je     0x65002c76
    65002c61:	mov    rdx,rbx
    65002c64:	mov    rcx,rax
    65002c67:	call   QWORD PTR [rip+0x31443]        # 0x650340b0
    65002c6d:	add    DWORD PTR [rip+0x40cd8],r14d        # 0x6504394c
    65002c74:	jmp    0x65002c79
    65002c76:	mov    rax,r15
    65002c79:	mov    QWORD PTR [rip+0x441f8],rax        # 0x65046e78
    65002c80:	jmp    0x65002c89
    65002c82:	mov    rax,QWORD PTR [rip+0x441ef]        # 0x65046e78
    65002c89:	lea    rcx,[rsp+0x60]
    65002c8e:	call   rax
    65002c90:	test   eax,eax
    65002c92:	jne    0x65002cae
    65002c94:	mov    ecx,edi
    65002c96:	call   QWORD PTR [rip+0x313ec]        # 0x65034088
    65002c9c:	add    edi,0xc8
    65002ca2:	cmp    edi,0x7d0
    65002ca8:	jne    0x65002c00
    65002cae:	mov    edi,r15d
    65002cb1:	cmp    edi,0x708
    65002cb7:	je     0x65003317
    65002cbd:	xor    eax,eax
    65002cbf:	lock cmpxchg DWORD PTR [rip+0x440a0],r14d        # 0x65046d68
    65002cc8:	jne    0x65002d33
    65002cca:	lea    r8,[rip+0x3672f]        # 0x65039400
    65002cd1:	mov    edx,0x10
    65002cd6:	lea    rcx,[rip+0x3675b]        # 0x65039438
    65002cdd:	call   0x6500bc30
    65002ce2:	mov    rbx,rax
    65002ce5:	lea    r8,[rip+0x36764]        # 0x65039450
    65002cec:	mov    edx,0x8
    65002cf1:	lea    rcx,[rip+0x36438]        # 0x65039130
    65002cf8:	call   0x6500c5e0
    65002cfd:	mov    rcx,rax
    65002d00:	call   QWORD PTR [rip+0x31322]        # 0x65034028
    65002d06:	add    DWORD PTR [rip+0x40c3b],r14d        # 0x65043948
    65002d0d:	test   rax,rax
    65002d10:	je     0x65002d27
    65002d12:	mov    rdx,rbx
    65002d15:	mov    rcx,rax
    65002d18:	call   QWORD PTR [rip+0x31392]        # 0x650340b0
    65002d1e:	add    DWORD PTR [rip+0x40c27],r14d        # 0x6504394c
    65002d25:	jmp    0x65002d2a
    65002d27:	mov    rax,r15
    65002d2a:	mov    QWORD PTR [rip+0x44167],rax        # 0x65046e98
    65002d31:	jmp    0x65002d3a
    65002d33:	mov    rax,QWORD PTR [rip+0x4415e]        # 0x65046e98
    65002d3a:	xor    edx,edx
    65002d3c:	lea    rcx,[rsp+0x60]
    65002d41:	call   rax
    65002d43:	test   eax,eax
    65002d45:	jne    0x65002d61
    65002d47:	mov    ecx,edi
    65002d49:	call   QWORD PTR [rip+0x31339]        # 0x65034088
    65002d4f:	add    edi,0xc8
    65002d55:	cmp    edi,0x7d0
    65002d5b:	jne    0x65002cb1
    65002d61:	xor    eax,eax
    65002d63:	or     rsi,0xffffffffffffffff
    65002d67:	mov    rcx,rsi
    65002d6a:	lea    rdi,[rsp+0x60]
    65002d6f:	repnz scas ax,WORD PTR es:[rdi]
    65002d72:	not    rcx
    65002d75:	sub    rcx,r14
    65002d78:	mov    rdi,rcx
    65002d7b:	test   ecx,ecx
    65002d7d:	jne    0x65002de9
    65002d7f:	mov    rax,QWORD PTR [r13+0x0]
    65002d83:	lea    rdx,[rax-0x18]
    65002d87:	mov    rdi,QWORD PTR [rdx]
    65002d8a:	cmp    DWORD PTR [rdx+0x8],r15d
    65002d8e:	je     0x65002e6d
    65002d94:	cmp    DWORD PTR [rdx+0x10],r15d
    65002d98:	jge    0x65002dbc
    65002d9a:	cmp    DWORD PTR [rax-0xc],r15d
    65002d9e:	jge    0x65002dab
    65002da0:	mov    ecx,0x80070057
    65002da5:	call   0x65001050
    65002daa:	int3   
    65002dab:	mov    DWORD PTR [rax-0x10],r15d
    65002daf:	mov    rax,QWORD PTR [r13+0x0]
    65002db3:	mov    WORD PTR [rax],r15w
    65002db7:	jmp    0x65002e6d
    65002dbc:	mov    eax,esi
    65002dbe:	lock xadd DWORD PTR [rdx+0x10],eax
    65002dc3:	add    eax,0xffffffff
    65002dc6:	test   eax,eax
    65002dc8:	jg     0x65002dd3
    65002dca:	mov    rcx,QWORD PTR [rdx]
    65002dcd:	mov    rax,QWORD PTR [rcx]
    65002dd0:	call   QWORD PTR [rax+0x8]
    65002dd3:	mov    rax,QWORD PTR [rdi]
    65002dd6:	mov    rcx,rdi
    65002dd9:	call   QWORD PTR [rax+0x18]
    65002ddc:	add    rax,0x18
    65002de0:	mov    QWORD PTR [r13+0x0],rax
    65002de4:	jmp    0x65002e6d
    65002de9:	mov    rax,QWORD PTR [r13+0x0]
    65002ded:	mov    ebx,DWORD PTR [rax-0x10]
    65002df0:	lea    rbp,[rsp+0x60]
    65002df5:	sub    rbp,rax
    65002df8:	sar    rbp,1
    65002dfb:	mov    ecx,r14d
    65002dfe:	sub    ecx,DWORD PTR [rax-0x8]
    65002e01:	mov    eax,DWORD PTR [rax-0xc]
    65002e04:	sub    eax,edi
    65002e06:	or     eax,ecx
    65002e08:	jge    0x65002e14
    65002e0a:	mov    edx,edi
    65002e0c:	mov    rcx,r13
    65002e0f:	call   0x65002640
    65002e14:	mov    rcx,QWORD PTR [r13+0x0]
    65002e18:	cmp    rbp,rbx
    65002e1b:	ja     0x65002e35
    65002e1d:	movsxd rax,edi
    65002e20:	lea    rbx,[rax+rax*1]
    65002e24:	lea    r8,[rcx+rbp*2]
    65002e28:	mov    r9,rbx
    65002e2b:	mov    rdx,rbx
    65002e2e:	call   0x6501d710
    65002e33:	jmp    0x65002e4c
    65002e35:	movsxd rax,edi
    65002e38:	lea    rbx,[rax+rax*1]
    65002e3c:	mov    r9,rbx
    65002e3f:	lea    r8,[rsp+0x60]
    65002e44:	mov    rdx,rbx
    65002e47:	call   0x6501d640
    65002e4c:	test   edi,edi
    65002e4e:	js     0x6500330c
    65002e54:	mov    rax,QWORD PTR [r13+0x0]
    65002e58:	cmp    edi,DWORD PTR [rax-0xc]
    65002e5b:	jg     0x6500330c
    65002e61:	mov    DWORD PTR [rax-0x10],edi
    65002e64:	mov    rax,QWORD PTR [r13+0x0]
    65002e68:	mov    WORD PTR [rbx+rax*1],r15w
    65002e6d:	lea    rcx,[rip+0x3f22c]        # 0x650420a0
    65002e74:	mov    rax,QWORD PTR [rip+0x3f225]        # 0x650420a0
    65002e7b:	call   QWORD PTR [rax+0x18]
    65002e7e:	lea    rbx,[rax+0x18]
    65002e82:	mov    QWORD PTR [rsp+0x30],rbx
    65002e87:	lea    rcx,[rsp+0x60]
    65002e8c:	lea    rax,[rsp+0x60]
    65002e91:	test   rax,0xffffffffffff0000
    65002e97:	jne    0x65002ec8
    65002e99:	movzx  edi,cx
    65002e9c:	xor    edx,edx
    65002e9e:	mov    ecx,edi
    65002ea0:	call   0x650026f0
    65002ea5:	test   rax,rax
    65002ea8:	je     0x65002fc4
    65002eae:	mov    r8d,edi
    65002eb1:	mov    rdx,rax
    65002eb4:	lea    rcx,[rsp+0x30]
    65002eb9:	call   0x65003e00
    65002ebe:	mov    rbx,QWORD PTR [rsp+0x30]
    65002ec3:	jmp    0x65002fc4
    65002ec8:	xor    eax,eax
    65002eca:	mov    rcx,rsi
    65002ecd:	lea    rdi,[rsp+0x60]
    65002ed2:	repnz scas ax,WORD PTR es:[rdi]
    65002ed5:	not    rcx
    65002ed8:	sub    rcx,0x1
    65002edc:	mov    rdi,rcx
    65002edf:	test   ecx,ecx
    65002ee1:	jne    0x65002f42
    65002ee3:	lea    rdx,[rbx-0x18]
    65002ee7:	mov    rdi,QWORD PTR [rdx]
    65002eea:	cmp    DWORD PTR [rdx+0x8],eax
    65002eed:	je     0x65002fc4
    65002ef3:	cmp    DWORD PTR [rdx+0x10],eax
    65002ef6:	jge    0x65002f14
    65002ef8:	cmp    DWORD PTR [rbx-0xc],eax
    65002efb:	jge    0x65002f08
    65002efd:	mov    ecx,0x80070057
    65002f02:	call   0x65001050
    65002f07:	int3   
    65002f08:	mov    DWORD PTR [rbx-0x10],r15d
    65002f0c:	mov    WORD PTR [rbx],ax
    65002f0f:	jmp    0x65002fc4
    65002f14:	mov    eax,esi
    65002f16:	lock xadd DWORD PTR [rdx+0x10],eax
    65002f1b:	add    eax,0xffffffff
    65002f1e:	test   eax,eax
    65002f20:	jg     0x65002f2b
    65002f22:	mov    rcx,QWORD PTR [rdx]
    65002f25:	mov    rax,QWORD PTR [rcx]
    65002f28:	call   QWORD PTR [rax+0x8]
    65002f2b:	mov    rax,QWORD PTR [rdi]
    65002f2e:	mov    rcx,rdi
    65002f31:	call   QWORD PTR [rax+0x18]
    65002f34:	lea    rbx,[rax+0x18]
    65002f38:	mov    QWORD PTR [rsp+0x30],rbx
    65002f3d:	jmp    0x65002fc4
    65002f42:	mov    ebp,DWORD PTR [rbx-0x10]
    65002f45:	lea    r13,[rsp+0x60]
    65002f4a:	sub    r13,rbx
    65002f4d:	sar    r13,1
    65002f50:	mov    ecx,r14d
    65002f53:	sub    ecx,DWORD PTR [rbx-0x8]
    65002f56:	mov    eax,DWORD PTR [rbx-0xc]
    65002f59:	sub    eax,edi
    65002f5b:	or     eax,ecx
    65002f5d:	jge    0x65002f70
    65002f5f:	mov    edx,edi
    65002f61:	lea    rcx,[rsp+0x30]
    65002f66:	call   0x65002640
    65002f6b:	mov    rbx,QWORD PTR [rsp+0x30]
    65002f70:	cmp    r13,rbp
    65002f73:	ja     0x65002f90
    65002f75:	movsxd rax,edi
    65002f78:	lea    rbp,[rax+rax*1]
    65002f7c:	lea    r8,[rbx+r13*2]
    65002f80:	mov    r9,rbp
    65002f83:	mov    rdx,rbp
    65002f86:	mov    rcx,rbx
    65002f89:	call   0x6501d710
    65002f8e:	jmp    0x65002faa
    65002f90:	movsxd rax,edi
    65002f93:	lea    rbp,[rax+rax*1]
    65002f97:	mov    r9,rbp
    65002f9a:	lea    r8,[rsp+0x60]
    65002f9f:	mov    rdx,rbp
    65002fa2:	mov    rcx,rbx
    65002fa5:	call   0x6501d640
    65002faa:	test   edi,edi
    65002fac:	js     0x65003301
    65002fb2:	cmp    edi,DWORD PTR [rbx-0xc]
    65002fb5:	jg     0x65003301
    65002fbb:	mov    DWORD PTR [rbx-0x10],edi
    65002fbe:	mov    WORD PTR [rbx+rbp*1],0x0
    65002fc4:	lea    rax,[rbx-0x18]
    65002fc8:	mov    QWORD PTR [rsp+0x48],rax
    65002fcd:	mov    rcx,QWORD PTR [rax]
    65002fd0:	test   rcx,rcx
    65002fd3:	je     0x65002fe3
    65002fd5:	mov    rax,QWORD PTR [rcx]
    65002fd8:	call   QWORD PTR [rax+0x20]
    65002fdb:	mov    rdx,rax
    65002fde:	test   rax,rax
    65002fe1:	jne    0x65002ff7
    65002fe3:	lea    rcx,[rip+0x3f0b6]        # 0x650420a0
    65002fea:	mov    rax,QWORD PTR [rip+0x3f0af]        # 0x650420a0
    65002ff1:	call   QWORD PTR [rax+0x20]
    65002ff4:	mov    rdx,rax
    65002ff7:	mov    ecx,r15d
    65002ffa:	test   rdx,rdx
    65002ffd:	setne  cl
    65003000:	test   ecx,ecx
    65003002:	jne    0x6500300f
    65003004:	mov    ecx,0x80004005
    65003009:	call   0x65001050
    6500300e:	int3   
    6500300f:	mov    rax,QWORD PTR [rdx]
    65003012:	mov    rcx,rdx
    65003015:	call   QWORD PTR [rax+0x18]
    65003018:	lea    rdi,[rax+0x18]
    6500301c:	mov    QWORD PTR [rsp+0x40],rdi
    65003021:	lea    r13,[rip+0x33f8c]        # 0x65036fb4
    65003028:	test   r13,0xffffffffffff0000
    6500302f:	jne    0x65003061
    65003031:	movzx  ebp,r13w
    65003035:	xor    edx,edx
    65003037:	mov    ecx,ebp
    65003039:	call   0x650026f0
    6500303e:	test   rax,rax
    65003041:	je     0x65003143
    65003047:	mov    r8d,ebp
    6500304a:	mov    rdx,rax
    6500304d:	lea    rcx,[rsp+0x40]
    65003052:	call   0x65003e00
    65003057:	mov    rdi,QWORD PTR [rsp+0x40]
    6500305c:	jmp    0x65003143
    65003061:	call   QWORD PTR [rip+0x3f031]        # 0x65042098
    65003067:	mov    DWORD PTR [rsp+0x28],r15d
    6500306c:	mov    QWORD PTR [rsp+0x20],r15
    65003071:	mov    r9d,esi
    65003074:	mov    r8,r13
    65003077:	xor    edx,edx
    65003079:	mov    ecx,eax
    6500307b:	call   QWORD PTR [rip+0x30fb7]        # 0x65034038
    65003081:	lea    ebp,[rax-0x1]
    65003084:	test   ebp,ebp
    65003086:	jle    0x650030e5
    65003088:	mov    edx,r14d
    6500308b:	sub    edx,DWORD PTR [rdi-0x8]
    6500308e:	mov    ecx,DWORD PTR [rdi-0xc]
    65003091:	sub    ecx,ebp
    65003093:	or     ecx,edx
    65003095:	jge    0x650030a8
    65003097:	mov    edx,ebp
    65003099:	lea    rcx,[rsp+0x40]
    6500309e:	call   0x65002640
    650030a3:	mov    rdi,QWORD PTR [rsp+0x40]
    650030a8:	call   QWORD PTR [rip+0x3efea]        # 0x65042098
    650030ae:	mov    ecx,eax
    650030b0:	mov    DWORD PTR [rsp+0x28],ebp
    650030b4:	mov    QWORD PTR [rsp+0x20],rdi
    650030b9:	mov    r9d,esi
    650030bc:	mov    r8,r13
    650030bf:	xor    edx,edx
    650030c1:	call   QWORD PTR [rip+0x30f71]        # 0x65034038
    650030c7:	cmp    ebp,DWORD PTR [rdi-0xc]
    650030ca:	jg     0x650030da
    650030cc:	mov    DWORD PTR [rdi-0x10],ebp
    650030cf:	movsxd rax,ebp
    650030d2:	mov    WORD PTR [rdi+rax*2],0x0
    650030d8:	jmp    0x65003143
    650030da:	mov    ecx,0x80070057
    650030df:	call   0x65001050
    650030e4:	int3   
    650030e5:	lea    rdx,[rdi-0x18]
    650030e9:	mov    rbp,QWORD PTR [rdx]
    650030ec:	cmp    DWORD PTR [rdx+0x8],0x0
    650030f0:	je     0x65003143
    650030f2:	cmp    DWORD PTR [rdx+0x10],0x0
    650030f6:	jge    0x65003114
    650030f8:	cmp    DWORD PTR [rdi-0xc],0x0
    650030fc:	jge    0x65003109
    650030fe:	mov    ecx,0x80070057
    65003103:	call   0x65001050
    65003108:	int3   
    65003109:	mov    DWORD PTR [rdi-0x10],r15d
    6500310d:	mov    WORD PTR [rdi],0x0
    65003112:	jmp    0x65003143
    65003114:	mov    eax,esi
    65003116:	lock xadd DWORD PTR [rdx+0x10],eax
    6500311b:	add    eax,0xffffffff
    6500311e:	test   eax,eax
    65003120:	jg     0x6500312b
    65003122:	mov    rcx,QWORD PTR [rdx]
    65003125:	mov    rax,QWORD PTR [rcx]
    65003128:	call   QWORD PTR [rax+0x8]
    6500312b:	mov    rax,QWORD PTR [rbp+0x0]
    6500312f:	mov    rcx,rbp
    65003132:	call   QWORD PTR [rax+0x18]
    65003135:	lea    rdi,[rax+0x18]
    65003139:	mov    QWORD PTR [rsp+0x40],rdi
    6500313e:	mov    rbx,QWORD PTR [rsp+0x30]
    65003143:	mov    edx,DWORD PTR [rdi-0x10]
    65003146:	mov    DWORD PTR [rsp+0x38],edx
    6500314a:	mov    r14,rdi
    6500314d:	mov    r13,rdi
    65003150:	sub    r13,rbx
    65003153:	sar    r13,1
    65003156:	mov    r15d,DWORD PTR [rbx-0x10]
    6500315a:	lea    ebp,[r15+rdx*1]
    6500315e:	mov    ecx,0x1
    65003163:	mov    rax,QWORD PTR [rsp+0x48]
    65003168:	sub    ecx,DWORD PTR [rax+0x10]
    6500316b:	mov    eax,DWORD PTR [rax+0xc]
    6500316e:	sub    eax,ebp
    65003170:	or     eax,ecx
    65003172:	jge    0x65003189
    65003174:	mov    edx,ebp
    65003176:	lea    rcx,[rsp+0x30]
    6500317b:	call   0x65002640
    65003180:	mov    rbx,QWORD PTR [rsp+0x30]
    65003185:	mov    edx,DWORD PTR [rsp+0x38]
    65003189:	cmp    r13,r15
    6500318c:	ja     0x65003192
    6500318e:	lea    r14,[rbx+r13*2]
    65003192:	movsxd rdx,edx
    65003195:	add    rdx,rdx
    65003198:	lea    rcx,[rbx+r15*2]
    6500319c:	mov    r9,rdx
    6500319f:	mov    r8,r14
    650031a2:	call   0x6501d640
    650031a7:	test   ebp,ebp
    650031a9:	js     0x650032f6
    650031af:	cmp    ebp,DWORD PTR [rbx-0xc]
    650031b2:	jg     0x650032f6
    650031b8:	mov    DWORD PTR [rbx-0x10],ebp
    650031bb:	movsxd rax,ebp
    650031be:	mov    WORD PTR [rbx+rax*2],0x0
    650031c4:	lea    rdx,[rdi-0x18]
    650031c8:	mov    eax,esi
    650031ca:	lock xadd DWORD PTR [rdx+0x10],eax
    650031cf:	add    eax,0xffffffff
    650031d2:	test   eax,eax
    650031d4:	jg     0x650031df
    650031d6:	mov    rcx,QWORD PTR [rdx]
    650031d9:	mov    rax,QWORD PTR [rcx]
    650031dc:	call   QWORD PTR [rax+0x8]
    650031df:	mov    r13,QWORD PTR [rsp+0x50]
    650031e4:	mov    r13,QWORD PTR [r13+0x0]
    650031e8:	movsxd r15,DWORD PTR [r13-0x10]
    650031ec:	mov    rbp,r13
    650031ef:	mov    rdi,QWORD PTR [rsp+0x30]
    650031f4:	sub    rbp,rdi
    650031f7:	sar    rbp,1
    650031fa:	mov    r14d,DWORD PTR [rbx-0x10]
    650031fe:	lea    ebx,[r14+r15*1]
    65003202:	mov    ecx,0x1
    65003207:	sub    ecx,DWORD PTR [rdi-0x8]
    6500320a:	mov    eax,DWORD PTR [rdi-0xc]
    6500320d:	sub    eax,ebx
    6500320f:	or     eax,ecx
    65003211:	jge    0x65003224
    65003213:	mov    edx,ebx
    65003215:	lea    rcx,[rsp+0x30]
    6500321a:	call   0x65002640
    6500321f:	mov    rdi,QWORD PTR [rsp+0x30]
    65003224:	cmp    rbp,r14
    65003227:	ja     0x6500322d
    65003229:	lea    r13,[rdi+rbp*2]
    6500322d:	mov    rdx,r15
    65003230:	add    rdx,rdx
    65003233:	lea    rcx,[rdi+r14*2]
    65003237:	mov    r9,rdx
    6500323a:	mov    r8,r13
    6500323d:	call   0x6501d640
    65003242:	test   ebx,ebx
    65003244:	js     0x650032eb
    6500324a:	cmp    ebx,DWORD PTR [rdi-0xc]
    6500324d:	jg     0x650032eb
    65003253:	mov    DWORD PTR [rdi-0x10],ebx
    65003256:	movsxd rax,ebx
    65003259:	mov    WORD PTR [rdi+rax*2],0x0
    6500325f:	mov    rcx,QWORD PTR [rdi-0x18]
    65003263:	mov    rax,QWORD PTR [rcx]
    65003266:	call   QWORD PTR [rax+0x20]
    65003269:	mov    rcx,rax
    6500326c:	cmp    DWORD PTR [rdi-0x8],0x0
    65003270:	jl     0x65003283
    65003272:	cmp    rax,QWORD PTR [rdi-0x18]
    65003276:	jne    0x65003283
    65003278:	lea    rbx,[rdi-0x18]
    6500327c:	lock add DWORD PTR [rdi-0x8],0x1
    65003281:	jmp    0x650032c1
    65003283:	mov    rax,QWORD PTR [rax]
    65003286:	mov    r8d,0x2
    6500328c:	mov    edx,DWORD PTR [rdi-0x10]
    6500328f:	call   QWORD PTR [rax]
    65003291:	mov    rbx,rax
    65003294:	test   rax,rax
    65003297:	jne    0x6500329f
    65003299:	call   0x65002320
    6500329e:	int3   
    6500329f:	mov    eax,DWORD PTR [rdi-0x10]
    650032a2:	mov    DWORD PTR [rbx+0x8],eax
    650032a5:	mov    eax,DWORD PTR [rdi-0x10]
    650032a8:	add    eax,0x1
    650032ab:	movsxd rdx,eax
    650032ae:	lea    r9,[rdx+rdx*1]
    650032b2:	mov    r8,rdi
    650032b5:	add    rdx,rdx
    650032b8:	lea    rcx,[rbx+0x18]
    650032bc:	call   0x6501d640
    650032c1:	lea    rax,[rbx+0x18]
    650032c5:	mov    QWORD PTR [r12],rax
    650032c9:	lock xadd DWORD PTR [rdi-0x8],esi
    650032ce:	add    esi,0xffffffff
    650032d1:	test   esi,esi
    650032d3:	jg     0x650032e3
    650032d5:	mov    rcx,QWORD PTR [rdi-0x18]
    650032d9:	mov    rax,QWORD PTR [rcx]
    650032dc:	lea    rdx,[rdi-0x18]
    650032e0:	call   QWORD PTR [rax+0x8]
    650032e3:	mov    rax,r12
    650032e6:	jmp    0x650033eb
    650032eb:	mov    ecx,0x80070057
    650032f0:	call   0x65001050
    650032f5:	nop
    650032f6:	mov    ecx,0x80070057
    650032fb:	call   0x65001050
    65003300:	nop
    65003301:	mov    ecx,0x80070057
    65003306:	call   0x65001050
    6500330b:	nop
    6500330c:	mov    ecx,0x80070057
    65003311:	call   0x65001050
    65003316:	int3   
    65003317:	lea    rcx,[rip+0x3ed82]        # 0x650420a0
    6500331e:	mov    rax,QWORD PTR [rip+0x3ed7b]        # 0x650420a0
    65003325:	call   QWORD PTR [rax+0x18]
    65003328:	add    rax,0x18
    6500332c:	mov    QWORD PTR [r12],rax
    65003330:	lea    rdx,[rip+0x33c71]        # 0x65036fa8
    65003337:	test   rdx,0xffffffffffff0000
    6500333e:	jne    0x65003361
    65003340:	movzx  edi,dx
    65003343:	xor    edx,edx
    65003345:	mov    ecx,edi
    65003347:	call   0x650026f0
    6500334c:	test   rax,rax
    6500334f:	je     0x6500337d
    65003351:	mov    r8d,edi
    65003354:	mov    rdx,rax
    65003357:	mov    rcx,r12
    6500335a:	call   0x65003e00
    6500335f:	jmp    0x6500337d
    65003361:	xor    eax,eax
    65003363:	or     rcx,0xffffffffffffffff
    65003367:	mov    rdi,rdx
    6500336a:	repnz scas ax,WORD PTR es:[rdi]
    6500336d:	not    rcx
    65003370:	lea    r8d,[rcx-0x1]
    65003374:	mov    rcx,r12
    65003377:	call   0x65003f90
    6500337c:	nop
    6500337d:	mov    rax,r12
    65003380:	jmp    0x650033eb
    65003382:	lea    rcx,[rip+0x3ed17]        # 0x650420a0
    65003389:	mov    rax,QWORD PTR [rip+0x3ed10]        # 0x650420a0
    65003390:	call   QWORD PTR [rax+0x18]
    65003393:	add    rax,0x18
    65003397:	mov    QWORD PTR [r12],rax
    6500339b:	lea    rdx,[rip+0x33c06]        # 0x65036fa8
    650033a2:	test   rdx,0xffffffffffff0000
    650033a9:	jne    0x650033cc
    650033ab:	movzx  edi,dx
    650033ae:	xor    edx,edx
    650033b0:	mov    ecx,edi
    650033b2:	call   0x650026f0
    650033b7:	test   rax,rax
    650033ba:	je     0x650033e8
    650033bc:	mov    r8d,edi
    650033bf:	mov    rdx,rax
    650033c2:	mov    rcx,r12
    650033c5:	call   0x65003e00
    650033ca:	jmp    0x650033e8
    650033cc:	xor    eax,eax
    650033ce:	or     rcx,0xffffffffffffffff
    650033d2:	mov    rdi,rdx
    650033d5:	repnz scas ax,WORD PTR es:[rdi]
    650033d8:	not    rcx
    650033db:	lea    r8d,[rcx-0x1]
    650033df:	mov    rcx,r12
    650033e2:	call   0x65003f90
    650033e7:	nop
    650033e8:	mov    rax,r12
    650033eb:	mov    rcx,QWORD PTR [rsp+0x480]
    650033f3:	xor    rcx,rsp
    650033f6:	call   0x6501e4e0
    650033fb:	mov    rbx,QWORD PTR [rsp+0x4e8]
    65003403:	add    rsp,0x490
    6500340a:	pop    r15
    6500340c:	pop    r14
    6500340e:	pop    r13
    65003410:	pop    r12
    65003412:	pop    rdi
    65003413:	pop    rsi
    65003414:	pop    rbp
    65003415:	ret    
    65003416:	int3   
    65003417:	int3   
    65003418:	int3   
    65003419:	int3   
    6500341a:	int3   
    6500341b:	int3   
    6500341c:	int3   
    6500341d:	int3   
    6500341e:	int3   
    6500341f:	int3   
    65003420:	rex push rbp
    65003422:	sub    rsp,0x20
    65003426:	mov    rbp,rdx
    65003429:	mov    rcx,QWORD PTR [rbp+0x48]
    6500342d:	call   0x65002100
    65003432:	add    rsp,0x20
    65003436:	pop    rbp
    65003437:	ret    
    65003438:	int3   
    65003439:	int3   
    6500343a:	int3   
    6500343b:	int3   
    6500343c:	int3   
    6500343d:	int3   
    6500343e:	int3   
    6500343f:	int3   
    65003440:	rex push rbp
    65003442:	sub    rsp,0x20
    65003446:	mov    rbp,rdx
    65003449:	mov    rcx,QWORD PTR [rbp+0x48]
    6500344d:	call   0x65002100
    65003452:	add    rsp,0x20
    65003456:	pop    rbp
    65003457:	ret    
    65003458:	int3   
    65003459:	int3   
    6500345a:	int3   
    6500345b:	int3   
    6500345c:	int3   
    6500345d:	int3   
    6500345e:	int3   
    6500345f:	int3   
    65003460:	rex push rbp
    65003462:	sub    rsp,0x20
    65003466:	mov    rbp,rdx
    65003469:	mov    rcx,QWORD PTR [rbp+0x48]
    6500346d:	call   0x65002100
    65003472:	add    rsp,0x20
    65003476:	pop    rbp
    65003477:	ret    
    65003478:	int3   
    65003479:	int3   
    6500347a:	int3   
    6500347b:	int3   
    6500347c:	int3   
    6500347d:	int3   
    6500347e:	int3   
    6500347f:	int3   
    65003480:	rex push rbp
    65003482:	sub    rsp,0x20
    65003486:	mov    rbp,rdx
    65003489:	mov    rcx,QWORD PTR [rbp+0x48]
    6500348d:	call   0x65002100
    65003492:	add    rsp,0x20
    65003496:	pop    rbp
    65003497:	ret    
    65003498:	int3   
    65003499:	int3   
    6500349a:	int3   
    6500349b:	int3   
    6500349c:	int3   
    6500349d:	int3   
    6500349e:	int3   
    6500349f:	int3   
    650034a0:	rex push rbp
    650034a2:	sub    rsp,0x20
    650034a6:	mov    rbp,rdx
    650034a9:	lea    rcx,[rbp+0x30]
    650034ad:	call   0x65002100
    650034b2:	add    rsp,0x20
    650034b6:	pop    rbp
    650034b7:	ret    
    650034b8:	int3   
    650034b9:	int3   
    650034ba:	int3   
    650034bb:	int3   
    650034bc:	int3   
    650034bd:	int3   
    650034be:	int3   
    650034bf:	int3   
    650034c0:	rex push rbp
    650034c2:	sub    rsp,0x20
    650034c6:	mov    rbp,rdx
    650034c9:	lea    rcx,[rbp+0x30]
    650034cd:	call   0x65001cb0
    650034d2:	add    rsp,0x20
    650034d6:	pop    rbp
    650034d7:	ret    
    650034d8:	int3   
    650034d9:	int3   
    650034da:	int3   
    650034db:	int3   
    650034dc:	int3   
    650034dd:	int3   
    650034de:	int3   
    650034df:	int3   
    650034e0:	rex push rbp
    650034e2:	sub    rsp,0x20
    650034e6:	mov    rbp,rdx
    650034e9:	lea    rcx,[rbp+0x40]
    650034ed:	call   0x65002100
    650034f2:	add    rsp,0x20
    650034f6:	pop    rbp
    650034f7:	ret    
    650034f8:	int3   
    650034f9:	int3   
    650034fa:	int3   
    650034fb:	int3   
    650034fc:	int3   
    650034fd:	int3   
    650034fe:	int3   
    650034ff:	int3   
    65003500:	rex push rbp
    65003502:	sub    rsp,0x20
    65003506:	mov    rbp,rdx
    65003509:	lea    rcx,[rbp+0x40]
    6500350d:	call   0x65001cb0
    65003512:	add    rsp,0x20
    65003516:	pop    rbp
    65003517:	ret    
    65003518:	int3   
    65003519:	int3   
    6500351a:	int3   
    6500351b:	int3   
    6500351c:	int3   
    6500351d:	int3   
    6500351e:	int3   
    6500351f:	int3   
    65003520:	mov    QWORD PTR [rsp+0x8],rcx
    65003525:	push   rbp
    65003526:	push   rsi
    65003527:	push   rdi
    65003528:	push   r12
    6500352a:	push   r13
    6500352c:	sub    rsp,0x120
    65003533:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
    6500353c:	mov    QWORD PTR [rsp+0x158],rbx
    65003544:	mov    rdi,r8
    65003547:	mov    rbp,rdx
    6500354a:	mov    rsi,rcx
    6500354d:	mov    rbx,QWORD PTR [rcx]
    65003550:	mov    ecx,0x1
    65003555:	xor    eax,eax
    65003557:	xor    r13d,r13d
    6500355a:	lock cmpxchg DWORD PTR [rip+0x437fa],ecx        # 0x65046d5c
    65003562:	jne    0x650035ca
    65003564:	lea    r8,[rip+0x35d65]        # 0x650392d0
    6500356b:	lea    edx,[rcx+0xa]
    6500356e:	lea    rcx,[rip+0x35d8b]        # 0x65039300
    65003575:	call   0x6500bc30
    6500357a:	mov    r12,rax
    6500357d:	lea    r8,[rip+0x35d8c]        # 0x65039310
    65003584:	lea    edx,[r13+0x8]
    65003588:	lea    rcx,[rip+0x35ba1]        # 0x65039130
    6500358f:	call   0x6500c5e0
    65003594:	mov    rcx,rax
    65003597:	call   QWORD PTR [rip+0x30a8b]        # 0x65034028
    6500359d:	add    DWORD PTR [rip+0x403a4],0x1        # 0x65043948
    650035a4:	test   rax,rax
    650035a7:	je     0x650035be
    650035a9:	mov    rdx,r12
    650035ac:	mov    rcx,rax
    650035af:	call   QWORD PTR [rip+0x30afb]        # 0x650340b0
    650035b5:	add    DWORD PTR [rip+0x40390],0x1        # 0x6504394c
    650035bc:	jmp    0x650035c1
    650035be:	mov    rax,r13
    650035c1:	mov    QWORD PTR [rip+0x438b8],rax        # 0x65046e80
    650035c8:	jmp    0x650035d1
    650035ca:	mov    rax,QWORD PTR [rip+0x438af]        # 0x65046e80
    650035d1:	mov    QWORD PTR [rsp+0x30],r13
    650035d6:	mov    DWORD PTR [rsp+0x28],0x80
    650035de:	mov    DWORD PTR [rsp+0x20],0x2
    650035e6:	xor    r9d,r9d
    650035e9:	xor    r8d,r8d
    650035ec:	mov    edx,0x40000000
    650035f1:	mov    rcx,rbx
    650035f4:	call   rax
    650035f6:	mov    rbx,rax
    650035f9:	mov    QWORD PTR [rsp+0x40],rax
    650035fe:	cmp    rax,0xffffffffffffffff
    65003602:	jne    0x6500368e
    65003608:	mov    QWORD PTR [rsp+0xf0],0xf
    65003614:	mov    QWORD PTR [rsp+0xe8],r13
    6500361c:	mov    BYTE PTR [rsp+0xd8],0x0
    65003624:	lea    rcx,[rsp+0x90]
    6500362c:	call   0x6501d1a0
    65003631:	nop
    65003632:	lea    rax,[rip+0x3397f]        # 0x65036fb8
    65003639:	mov    QWORD PTR [rsp+0x90],rax
    65003641:	mov    QWORD PTR [rsp+0xc8],0xf
    6500364d:	mov    QWORD PTR [rsp+0xc0],r13
    65003655:	mov    BYTE PTR [rsp+0xb0],0x0
    6500365d:	or     r9,rbx
    65003660:	xor    r8d,r8d
    65003663:	lea    rdx,[rsp+0xd0]
    6500366b:	lea    rcx,[rsp+0xa8]
    65003673:	call   0x65001e20
    65003678:	nop
    65003679:	lea    rdx,[rip+0x3db20]        # 0x650411a0
    65003680:	lea    rcx,[rsp+0x90]
    65003688:	call   0x6501daf0
    6500368d:	nop
    6500368e:	mov    QWORD PTR [rsp+0x20],r13
    65003693:	lea    r9,[rsp+0x168]
    6500369b:	mov    r8d,edi
    6500369e:	mov    rdx,rbp
    650036a1:	mov    rcx,rax
    650036a4:	call   QWORD PTR [rip+0x30a56]        # 0x65034100
    650036aa:	test   eax,eax
    650036ac:	jne    0x65003725
    650036ae:	mov    QWORD PTR [rsp+0x118],0xf
    650036ba:	mov    QWORD PTR [rsp+0x110],r13
    650036c2:	mov    BYTE PTR [rsp+0x100],al
    650036c9:	lea    rcx,[rsp+0x50]
    650036ce:	call   0x6501d1a0
    650036d3:	nop
    650036d4:	lea    rax,[rip+0x338dd]        # 0x65036fb8
    650036db:	mov    QWORD PTR [rsp+0x50],rax
    650036e0:	mov    QWORD PTR [rsp+0x88],0xf
    650036ec:	mov    QWORD PTR [rsp+0x80],r13
    650036f4:	mov    BYTE PTR [rsp+0x70],0x0
    650036f9:	or     r9,0xffffffffffffffff
    650036fd:	xor    r8d,r8d
    65003700:	lea    rdx,[rsp+0xf8]
    65003708:	lea    rcx,[rsp+0x68]
    6500370d:	call   0x65001e20
    65003712:	nop
    65003713:	lea    rdx,[rip+0x3da86]        # 0x650411a0
    6500371a:	lea    rcx,[rsp+0x50]
    6500371f:	call   0x6501daf0
    65003724:	nop
    65003725:	test   rbx,rbx
    65003728:	je     0x65003744
    6500372a:	call   QWORD PTR [rip+0x30948]        # 0x65034078
    65003730:	mov    edi,eax
    65003732:	mov    rcx,rbx
    65003735:	call   QWORD PTR [rip+0x30935]        # 0x65034070
    6500373b:	mov    ecx,edi
    6500373d:	call   QWORD PTR [rip+0x309c5]        # 0x65034108
    65003743:	nop
    65003744:	mov    rdx,QWORD PTR [rsi]
    65003747:	sub    rdx,0x18
    6500374b:	or     rax,0xffffffffffffffff
    6500374f:	lock xadd DWORD PTR [rdx+0x10],eax
    65003754:	add    eax,0xffffffff
    65003757:	test   eax,eax
    65003759:	jg     0x65003764
    6500375b:	mov    rcx,QWORD PTR [rdx]
    6500375e:	mov    rax,QWORD PTR [rcx]
    65003761:	call   QWORD PTR [rax+0x8]
    65003764:	mov    rbx,QWORD PTR [rsp+0x158]
    6500376c:	add    rsp,0x120
    65003773:	pop    r13
    65003775:	pop    r12
    65003777:	pop    rdi
    65003778:	pop    rsi
    65003779:	pop    rbp
    6500377a:	ret    
    6500377b:	int3   
    6500377c:	int3   
    6500377d:	int3   
    6500377e:	int3   
    6500377f:	int3   
    65003780:	rex push rbp
    65003782:	sub    rsp,0x20
    65003786:	mov    rbp,rdx
    65003789:	mov    rcx,QWORD PTR [rbp+0x150]
    65003790:	call   0x65001cb0
    65003795:	add    rsp,0x20
    65003799:	pop    rbp
    6500379a:	ret    
    6500379b:	int3   
    6500379c:	int3   
    6500379d:	int3   
    6500379e:	int3   
    6500379f:	int3   
    650037a0:	rex push rbp
    650037a2:	sub    rsp,0x20
    650037a6:	mov    rbp,rdx
    650037a9:	lea    rcx,[rbp+0x40]
    650037ad:	call   0x65001ce0
    650037b2:	add    rsp,0x20
    650037b6:	pop    rbp
    650037b7:	ret    
    650037b8:	int3   
    650037b9:	int3   
    650037ba:	int3   
    650037bb:	int3   
    650037bc:	int3   
    650037bd:	int3   
    650037be:	int3   
    650037bf:	int3   
    650037c0:	rex push rbp
    650037c2:	sub    rsp,0x20
    650037c6:	mov    rbp,rdx
    650037c9:	lea    rcx,[rbp+0xd0]
    650037d0:	call   0x65001c70
    650037d5:	add    rsp,0x20
    650037d9:	pop    rbp
    650037da:	ret    
    650037db:	int3   
    650037dc:	int3   
    650037dd:	int3   
    650037de:	int3   
    650037df:	int3   
    650037e0:	rex push rbp
    650037e2:	sub    rsp,0x20
    650037e6:	mov    rbp,rdx
    650037e9:	lea    rcx,[rbp+0x90]
    650037f0:	call   0x6501d320
    650037f5:	add    rsp,0x20
    650037f9:	pop    rbp
    650037fa:	ret    
    650037fb:	int3   
    650037fc:	int3   
    650037fd:	int3   
    650037fe:	int3   
    650037ff:	int3   
    65003800:	rex push rbp
    65003802:	sub    rsp,0x20
    65003806:	mov    rbp,rdx
    65003809:	lea    rcx,[rbp+0xf8]
    65003810:	call   0x65001c70
    65003815:	add    rsp,0x20
    65003819:	pop    rbp
    6500381a:	ret    
    6500381b:	int3   
    6500381c:	int3   
    6500381d:	int3   
    6500381e:	int3   
    6500381f:	int3   
    65003820:	rex push rbp
    65003822:	sub    rsp,0x20
    65003826:	mov    rbp,rdx
    65003829:	lea    rcx,[rbp+0x50]
    6500382d:	call   0x6501d320
    65003832:	add    rsp,0x20
    65003836:	pop    rbp
    65003837:	ret    
    65003838:	int3   
    65003839:	int3   
    6500383a:	int3   
    6500383b:	int3   
    6500383c:	int3   
    6500383d:	int3   
    6500383e:	int3   
    6500383f:	int3   
    65003840:	mov    QWORD PTR [rsp+0x8],rbx
    65003845:	mov    QWORD PTR [rsp+0x20],rbp
    6500384a:	push   rsi
    6500384b:	push   rdi
    6500384c:	push   r12
    6500384e:	sub    rsp,0x40
    65003852:	xor    ebp,ebp
    65003854:	mov    rbx,rdx
    65003857:	mov    rdi,rcx
    6500385a:	mov    QWORD PTR [rsp+0x68],rbp
    6500385f:	mov    QWORD PTR [rsp+0x70],rbp
    65003864:	call   QWORD PTR [rip+0x3e82e]        # 0x65042098
    6500386a:	mov    rsi,QWORD PTR [rbx]
    6500386d:	xor    eax,eax
    6500386f:	mov    r12d,0x1
    65003875:	lock cmpxchg DWORD PTR [rip+0x4351a],r12d        # 0x65046d98
    6500387e:	jne    0x650038ec
    65003880:	lea    r8,[rip+0x35e19]        # 0x650396a0
    65003887:	lea    edx,[rbp+0x15]
    6500388a:	lea    rcx,[rip+0x35e47]        # 0x650396d8
    65003891:	call   0x6500bc30
    65003896:	lea    r8,[rip+0x35e53]        # 0x650396f0
    6500389d:	lea    edx,[rbp+0x8]
    650038a0:	lea    rcx,[rip+0x35de1]        # 0x65039688
    650038a7:	mov    rbx,rax
    650038aa:	call   0x6500c5e0
    650038af:	mov    rcx,rax
    650038b2:	call   QWORD PTR [rip+0x30770]        # 0x65034028
    650038b8:	add    DWORD PTR [rip+0x40089],r12d        # 0x65043948
    650038bf:	test   rax,rax
    650038c2:	je     0x650038e0
    650038c4:	mov    rdx,rbx
    650038c7:	mov    rcx,rax
    650038ca:	call   QWORD PTR [rip+0x307e0]        # 0x650340b0
    650038d0:	add    DWORD PTR [rip+0x40075],r12d        # 0x6504394c
    650038d7:	mov    QWORD PTR [rip+0x435e2],rax        # 0x65046ec0
    650038de:	jmp    0x650038f3
    650038e0:	mov    rax,rbp
    650038e3:	mov    QWORD PTR [rip+0x435d6],rax        # 0x65046ec0
    650038ea:	jmp    0x650038f3
    650038ec:	mov    rax,QWORD PTR [rip+0x435cd]        # 0x65046ec0
    650038f3:	lea    rcx,[rsp+0x70]
    650038f8:	xor    r9d,r9d
    650038fb:	mov    edx,r12d
    650038fe:	mov    QWORD PTR [rsp+0x38],rcx
    65003903:	lea    rcx,[rsp+0x68]
    65003908:	mov    QWORD PTR [rsp+0x30],rbp
    6500390d:	mov    QWORD PTR [rsp+0x28],rcx
    65003912:	lea    r8d,[r9+0x5]
    65003916:	mov    rcx,rsi
    65003919:	mov    QWORD PTR [rsp+0x20],rbp
    6500391e:	call   rax
    65003920:	test   eax,eax
    65003922:	jne    0x650039d4
    65003928:	mov    rbx,QWORD PTR [rdi]
    6500392b:	lock cmpxchg DWORD PTR [rip+0x43468],r12d        # 0x65046d9c
    65003934:	jne    0x650039a9
    65003936:	lea    r8,[rip+0x35de3]        # 0x65039720
    6500393d:	lea    rcx,[rip+0x35e14]        # 0x65039758
    65003944:	mov    edx,0x15
    65003949:	call   0x6500bc30
    6500394e:	lea    r8,[rip+0x35e1b]        # 0x65039770
    65003955:	lea    rcx,[rip+0x35d2c]        # 0x65039688
    6500395c:	mov    edx,0x8
    65003961:	mov    rdi,rax
    65003964:	call   0x6500c5e0
    65003969:	mov    rcx,rax
    6500396c:	call   QWORD PTR [rip+0x306b6]        # 0x65034028
    65003972:	add    DWORD PTR [rip+0x3ffcf],r12d        # 0x65043948
    65003979:	test   rax,rax
    6500397c:	je     0x6500399d
    6500397e:	mov    rdx,rdi
    65003981:	mov    rcx,rax
    65003984:	call   QWORD PTR [rip+0x30726]        # 0x650340b0
    6500398a:	add    DWORD PTR [rip+0x3ffbb],r12d        # 0x6504394c
    65003991:	mov    r11,rax
    65003994:	mov    QWORD PTR [rip+0x4352d],rax        # 0x65046ec8
    6500399b:	jmp    0x650039b0
    6500399d:	mov    r11,rbp
    650039a0:	mov    QWORD PTR [rip+0x43521],rbp        # 0x65046ec8
    650039a7:	jmp    0x650039b0
    650039a9:	mov    r11,QWORD PTR [rip+0x43518]        # 0x65046ec8
    650039b0:	mov    rax,QWORD PTR [rsp+0x68]
    650039b5:	xor    r9d,r9d
    650039b8:	mov    QWORD PTR [rsp+0x30],rbp
    650039bd:	mov    QWORD PTR [rsp+0x28],rax
    650039c2:	lea    r8d,[r9+0x4]
    650039c6:	mov    edx,r12d
    650039c9:	mov    rcx,rbx
    650039cc:	mov    QWORD PTR [rsp+0x20],rbp
    650039d1:	call   r11
    650039d4:	mov    rbx,QWORD PTR [rsp+0x60]
    650039d9:	mov    rbp,QWORD PTR [rsp+0x78]
    650039de:	add    rsp,0x40
    650039e2:	pop    r12
    650039e4:	pop    rdi
    650039e5:	pop    rsi
    650039e6:	ret    
    650039e7:	int3   
    650039e8:	int3   
    650039e9:	int3   
    650039ea:	int3   
    650039eb:	int3   
    650039ec:	int3   
    650039ed:	int3   
    650039ee:	int3   
    650039ef:	int3   
    650039f0:	mov    QWORD PTR [rsp+0x8],rbx
    650039f5:	mov    QWORD PTR [rsp+0x10],rbp
    650039fa:	mov    QWORD PTR [rsp+0x18],rsi
    650039ff:	push   rdi
    65003a00:	push   r12
    65003a02:	push   r13
    65003a04:	sub    rsp,0x20
    65003a08:	mov    rbp,QWORD PTR [rdx]
    65003a0b:	mov    rax,QWORD PTR [rcx]
    65003a0e:	mov    edx,0x1
    65003a13:	mov    r12d,DWORD PTR [rax-0x10]
    65003a17:	sub    edx,DWORD PTR [rax-0x8]
    65003a1a:	movsxd r13,DWORD PTR [rbp-0x10]
    65003a1e:	mov    rsi,rbp
    65003a21:	lea    edi,[r12+r13*1]
    65003a25:	mov    rbx,rcx
    65003a28:	sub    rsi,rax
    65003a2b:	mov    eax,DWORD PTR [rax-0xc]
    65003a2e:	sub    eax,edi
    65003a30:	sar    rsi,1
    65003a33:	or     edx,eax
    65003a35:	jge    0x65003a3e
    65003a37:	mov    edx,edi
    65003a39:	call   0x65002640
    65003a3e:	cmp    rsi,r12
    65003a41:	mov    rax,QWORD PTR [rbx]
    65003a44:	ja     0x65003a4a
    65003a46:	lea    rbp,[rax+rsi*2]
    65003a4a:	mov    rdx,r13
    65003a4d:	lea    rcx,[rax+r12*2]
    65003a51:	mov    r8,rbp
    65003a54:	add    rdx,rdx
    65003a57:	mov    r9,rdx
    65003a5a:	call   0x6501d640
    65003a5f:	test   edi,edi
    65003a61:	js     0x65003a96
    65003a63:	mov    rax,QWORD PTR [rbx]
    65003a66:	cmp    edi,DWORD PTR [rax-0xc]
    65003a69:	jg     0x65003a96
    65003a6b:	mov    rbp,QWORD PTR [rsp+0x48]
    65003a70:	mov    rsi,QWORD PTR [rsp+0x50]
    65003a75:	mov    DWORD PTR [rax-0x10],edi
    65003a78:	mov    rax,QWORD PTR [rbx]
    65003a7b:	movsxd rcx,edi
    65003a7e:	mov    WORD PTR [rax+rcx*2],0x0
    65003a84:	mov    rax,rbx
    65003a87:	mov    rbx,QWORD PTR [rsp+0x40]
    65003a8c:	add    rsp,0x20
    65003a90:	pop    r13
    65003a92:	pop    r12
    65003a94:	pop    rdi
    65003a95:	ret    
    65003a96:	mov    ecx,0x80070057
    65003a9b:	call   0x65001050
    65003aa0:	int3   
    65003aa1:	int3   
    65003aa2:	int3   
    65003aa3:	int3   
    65003aa4:	int3   
    65003aa5:	int3   
    65003aa6:	int3   
    65003aa7:	int3   
    65003aa8:	int3   
    65003aa9:	int3   
    65003aaa:	int3   
    65003aab:	int3   
    65003aac:	int3   
    65003aad:	int3   
    65003aae:	int3   
    65003aaf:	int3   
    65003ab0:	rex push rsi
    65003ab2:	push   rdi
    65003ab3:	push   r12
    65003ab5:	push   r13
    65003ab7:	push   r14
    65003ab9:	sub    rsp,0x30
    65003abd:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65003ac6:	mov    QWORD PTR [rsp+0x68],rbx
    65003acb:	mov    QWORD PTR [rsp+0x70],rbp
    65003ad0:	mov    rsi,rdx
    65003ad3:	mov    rdi,rcx
    65003ad6:	mov    rax,QWORD PTR [rcx]
    65003ad9:	mov    rcx,QWORD PTR [rax-0x18]
    65003add:	test   rcx,rcx
    65003ae0:	je     0x65003af0
    65003ae2:	mov    rax,QWORD PTR [rcx]
    65003ae5:	call   QWORD PTR [rax+0x20]
    65003ae8:	mov    r11,rax
    65003aeb:	test   rax,rax
    65003aee:	jne    0x65003b04
    65003af0:	lea    rcx,[rip+0x3e5a9]        # 0x650420a0
    65003af7:	mov    rax,QWORD PTR [rip+0x3e5a2]        # 0x650420a0
    65003afe:	call   QWORD PTR [rax+0x20]
    65003b01:	mov    r11,rax
    65003b04:	xor    ecx,ecx
    65003b06:	test   r11,r11
    65003b09:	setne  cl
    65003b0c:	test   ecx,ecx
    65003b0e:	jne    0x65003b1b
    65003b10:	mov    ecx,0x80004005
    65003b15:	call   0x65001050
    65003b1a:	int3   
    65003b1b:	mov    rax,QWORD PTR [r11]
    65003b1e:	mov    rcx,r11
    65003b21:	call   QWORD PTR [rax+0x18]
    65003b24:	lea    rbx,[rax+0x18]
    65003b28:	mov    QWORD PTR [rsp+0x60],rbx
    65003b2d:	test   rsi,rsi
    65003b30:	je     0x65003b63
    65003b32:	test   rsi,0xffffffffffff0000
    65003b39:	jne    0x65003b63
    65003b3b:	movzx  esi,si
    65003b3e:	xor    edx,edx
    65003b40:	mov    ecx,esi
    65003b42:	call   0x650026f0
    65003b47:	test   rax,rax
    65003b4a:	je     0x65003b75
    65003b4c:	mov    r8d,esi
    65003b4f:	mov    rdx,rax
    65003b52:	lea    rcx,[rsp+0x60]
    65003b57:	call   0x65003e00
    65003b5c:	mov    rbx,QWORD PTR [rsp+0x60]
    65003b61:	jmp    0x65003b75
    65003b63:	mov    rdx,rsi
    65003b66:	lea    rcx,[rsp+0x60]
    65003b6b:	call   0x65003cc0
    65003b70:	mov    rbx,QWORD PTR [rsp+0x60]
    65003b75:	movsxd r14,DWORD PTR [rbx-0x10]
    65003b79:	mov    r12,rbx
    65003b7c:	mov    rax,QWORD PTR [rdi]
    65003b7f:	mov    rbp,rbx
    65003b82:	sub    rbp,rax
    65003b85:	sar    rbp,1
    65003b88:	mov    r13d,DWORD PTR [rax-0x10]
    65003b8c:	lea    esi,[r13+r14*1+0x0]
    65003b91:	mov    ecx,0x1
    65003b96:	sub    ecx,DWORD PTR [rax-0x8]
    65003b99:	mov    eax,DWORD PTR [rax-0xc]
    65003b9c:	sub    eax,esi
    65003b9e:	or     eax,ecx
    65003ba0:	jge    0x65003bac
    65003ba2:	mov    edx,esi
    65003ba4:	mov    rcx,rdi
    65003ba7:	call   0x65002640
    65003bac:	mov    rax,QWORD PTR [rdi]
    65003baf:	cmp    rbp,r13
    65003bb2:	ja     0x65003bb8
    65003bb4:	lea    r12,[rax+rbp*2]
    65003bb8:	mov    rdx,r14
    65003bbb:	add    rdx,rdx
    65003bbe:	lea    rcx,[rax+r13*2]
    65003bc2:	mov    r9,rdx
    65003bc5:	mov    r8,r12
    65003bc8:	call   0x6501d640
    65003bcd:	test   esi,esi
    65003bcf:	js     0x65003c09
    65003bd1:	mov    rax,QWORD PTR [rdi]
    65003bd4:	cmp    esi,DWORD PTR [rax-0xc]
    65003bd7:	jg     0x65003c09
    65003bd9:	mov    DWORD PTR [rax-0x10],esi
    65003bdc:	movsxd rcx,esi
    65003bdf:	mov    rax,QWORD PTR [rdi]
    65003be2:	mov    WORD PTR [rax+rcx*2],0x0
    65003be8:	lea    rdx,[rbx-0x18]
    65003bec:	or     eax,0xffffffff
    65003bef:	lock xadd DWORD PTR [rdx+0x10],eax
    65003bf4:	add    eax,0xffffffff
    65003bf7:	test   eax,eax
    65003bf9:	jg     0x65003c04
    65003bfb:	mov    rcx,QWORD PTR [rdx]
    65003bfe:	mov    rax,QWORD PTR [rcx]
    65003c01:	call   QWORD PTR [rax+0x8]
    65003c04:	mov    rax,rdi
    65003c07:	jmp    0x65003c14
    65003c09:	mov    ecx,0x80070057
    65003c0e:	call   0x65001050
    65003c13:	nop
    65003c14:	mov    rbx,QWORD PTR [rsp+0x68]
    65003c19:	mov    rbp,QWORD PTR [rsp+0x70]
    65003c1e:	add    rsp,0x30
    65003c22:	pop    r14
    65003c24:	pop    r13
    65003c26:	pop    r12
    65003c28:	pop    rdi
    65003c29:	pop    rsi
    65003c2a:	ret    
    65003c2b:	int3   
    65003c2c:	int3   
    65003c2d:	int3   
    65003c2e:	int3   
    65003c2f:	int3   
    65003c30:	rex push rbp
    65003c32:	sub    rsp,0x20
    65003c36:	mov    rbp,rdx
    65003c39:	lea    rcx,[rbp+0x60]
    65003c3d:	call   0x65002100
    65003c42:	add    rsp,0x20
    65003c46:	pop    rbp
    65003c47:	ret    
    65003c48:	int3   
    65003c49:	int3   
    65003c4a:	int3   
    65003c4b:	int3   
    65003c4c:	int3   
    65003c4d:	int3   
    65003c4e:	int3   
    65003c4f:	int3   
    65003c50:	rex push rbp
    65003c52:	sub    rsp,0x20
    65003c56:	mov    rbp,rdx
    65003c59:	lea    rcx,[rbp+0x60]
    65003c5d:	call   0x65001cb0
    65003c62:	add    rsp,0x20
    65003c66:	pop    rbp
    65003c67:	ret    
    65003c68:	int3   
    65003c69:	int3   
    65003c6a:	int3   
    65003c6b:	int3   
    65003c6c:	int3   
    65003c6d:	int3   
    65003c6e:	int3   
    65003c6f:	int3   
    65003c70:	mov    QWORD PTR [rsp+0x8],rbx
    65003c75:	push   rdi
    65003c76:	sub    rsp,0x20
    65003c7a:	mov    QWORD PTR [rcx+0x20],0xf
    65003c82:	mov    QWORD PTR [rcx+0x18],0x0
    65003c8a:	mov    rbx,rcx
    65003c8d:	mov    BYTE PTR [rcx+0x8],0x0
    65003c91:	or     rcx,0xffffffffffffffff
    65003c95:	xor    eax,eax
    65003c97:	mov    rdi,rdx
    65003c9a:	repnz scas al,BYTE PTR es:[rdi]
    65003c9c:	not    rcx
    65003c9f:	lea    r8,[rcx-0x1]
    65003ca3:	mov    rcx,rbx
    65003ca6:	call   0x65002000
    65003cab:	mov    rax,rbx
    65003cae:	mov    rbx,QWORD PTR [rsp+0x30]
    65003cb3:	add    rsp,0x20
    65003cb7:	pop    rdi
    65003cb8:	ret    
    65003cb9:	int3   
    65003cba:	int3   
    65003cbb:	int3   
    65003cbc:	int3   
    65003cbd:	int3   
    65003cbe:	int3   
    65003cbf:	int3   
    65003cc0:	mov    QWORD PTR [rsp+0x8],rbx
    65003cc5:	mov    QWORD PTR [rsp+0x10],rbp
    65003cca:	mov    QWORD PTR [rsp+0x18],rsi
    65003ccf:	mov    QWORD PTR [rsp+0x20],rdi
    65003cd4:	push   r12
    65003cd6:	sub    rsp,0x30
    65003cda:	or     esi,0xffffffff
    65003cdd:	test   rdx,rdx
    65003ce0:	mov    r12,rdx
    65003ce3:	mov    rdi,rcx
    65003ce6:	je     0x65003d80
    65003cec:	call   QWORD PTR [rip+0x3e3a6]        # 0x65042098
    65003cf2:	mov    r9d,esi
    65003cf5:	mov    r8,r12
    65003cf8:	xor    edx,edx
    65003cfa:	mov    ecx,eax
    65003cfc:	mov    DWORD PTR [rsp+0x28],0x0
    65003d04:	mov    QWORD PTR [rsp+0x20],0x0
    65003d0d:	call   QWORD PTR [rip+0x30325]        # 0x65034038
    65003d13:	lea    ebp,[rax-0x1]
    65003d16:	test   ebp,ebp
    65003d18:	jle    0x65003d80
    65003d1a:	mov    rcx,QWORD PTR [rdi]
    65003d1d:	mov    edx,0x1
    65003d22:	sub    edx,DWORD PTR [rcx-0x8]
    65003d25:	mov    ecx,DWORD PTR [rcx-0xc]
    65003d28:	sub    ecx,ebp
    65003d2a:	or     edx,ecx
    65003d2c:	jge    0x65003d38
    65003d2e:	mov    edx,ebp
    65003d30:	mov    rcx,rdi
    65003d33:	call   0x65002640
    65003d38:	mov    rbx,QWORD PTR [rdi]
    65003d3b:	call   QWORD PTR [rip+0x3e357]        # 0x65042098
    65003d41:	mov    r9d,esi
    65003d44:	mov    r8,r12
    65003d47:	xor    edx,edx
    65003d49:	mov    ecx,eax
    65003d4b:	mov    DWORD PTR [rsp+0x28],ebp
    65003d4f:	mov    QWORD PTR [rsp+0x20],rbx
    65003d54:	call   QWORD PTR [rip+0x302de]        # 0x65034038
    65003d5a:	mov    r11,QWORD PTR [rdi]
    65003d5d:	cmp    ebp,DWORD PTR [r11-0xc]
    65003d61:	jg     0x65003d75
    65003d63:	mov    DWORD PTR [r11-0x10],ebp
    65003d67:	mov    rax,QWORD PTR [rdi]
    65003d6a:	movsxd rcx,ebp
    65003d6d:	mov    WORD PTR [rax+rcx*2],0x0
    65003d73:	jmp    0x65003dde
    65003d75:	mov    ecx,0x80070057
    65003d7a:	call   0x65001050
    65003d7f:	int3   
    65003d80:	mov    rax,QWORD PTR [rdi]
    65003d83:	cmp    DWORD PTR [rax-0x10],0x0
    65003d87:	mov    rbx,QWORD PTR [rax-0x18]
    65003d8b:	lea    rdx,[rax-0x18]
    65003d8f:	je     0x65003dde
    65003d91:	cmp    DWORD PTR [rdx+0x10],0x0
    65003d95:	jge    0x65003db9
    65003d97:	cmp    DWORD PTR [rax-0xc],0x0
    65003d9b:	jge    0x65003da8
    65003d9d:	mov    ecx,0x80070057
    65003da2:	call   0x65001050
    65003da7:	int3   
    65003da8:	mov    DWORD PTR [rax-0x10],0x0
    65003daf:	mov    rax,QWORD PTR [rdi]
    65003db2:	mov    WORD PTR [rax],0x0
    65003db7:	jmp    0x65003dde
    65003db9:	lock xadd DWORD PTR [rdx+0x10],esi
    65003dbe:	add    esi,0xffffffff
    65003dc1:	test   esi,esi
    65003dc3:	jg     0x65003dce
    65003dc5:	mov    rcx,QWORD PTR [rdx]
    65003dc8:	mov    rax,QWORD PTR [rcx]
    65003dcb:	call   QWORD PTR [rax+0x8]
    65003dce:	mov    rax,QWORD PTR [rbx]
    65003dd1:	mov    rcx,rbx
    65003dd4:	call   QWORD PTR [rax+0x18]
    65003dd7:	add    rax,0x18
    65003ddb:	mov    QWORD PTR [rdi],rax
    65003dde:	mov    rbx,QWORD PTR [rsp+0x40]
    65003de3:	mov    rbp,QWORD PTR [rsp+0x48]
    65003de8:	mov    rsi,QWORD PTR [rsp+0x50]
    65003ded:	mov    rax,rdi
    65003df0:	mov    rdi,QWORD PTR [rsp+0x58]
    65003df5:	add    rsp,0x30
    65003df9:	pop    r12
    65003dfb:	ret    
    65003dfc:	int3   
    65003dfd:	int3   
    65003dfe:	int3   
    65003dff:	int3   
    65003e00:	mov    QWORD PTR [rsp+0x8],rbx
    65003e05:	mov    QWORD PTR [rsp+0x10],rbp
    65003e0a:	mov    QWORD PTR [rsp+0x18],rsi
    65003e0f:	mov    QWORD PTR [rsp+0x20],rdi
    65003e14:	push   r12
    65003e16:	sub    rsp,0x20
    65003e1a:	mov    eax,r8d
    65003e1d:	mov    rbp,rdx
    65003e20:	mov    ebx,r8d
    65003e23:	shr    eax,0x4
    65003e26:	mov    rsi,rcx
    65003e29:	mov    r8d,0x6
    65003e2f:	add    ax,0x1
    65003e33:	mov    rcx,rbp
    65003e36:	movzx  edx,ax
    65003e39:	call   QWORD PTR [rip+0x30221]        # 0x65034060
    65003e3f:	test   rax,rax
    65003e42:	mov    r12,rax
    65003e45:	je     0x65003f71
    65003e4b:	mov    rdx,rax
    65003e4e:	mov    rcx,rbp
    65003e51:	call   QWORD PTR [rip+0x30201]        # 0x65034058
    65003e57:	test   rax,rax
    65003e5a:	je     0x65003f71
    65003e60:	mov    rcx,rax
    65003e63:	call   QWORD PTR [rip+0x301e7]        # 0x65034050
    65003e69:	test   rax,rax
    65003e6c:	mov    rdi,rax
    65003e6f:	je     0x65003f71
    65003e75:	mov    rdx,r12
    65003e78:	mov    rcx,rbp
    65003e7b:	call   QWORD PTR [rip+0x301c7]        # 0x65034048
    65003e81:	mov    r11d,eax
    65003e84:	add    r11,rdi
    65003e87:	and    ebx,0xf
    65003e8a:	jbe    0x65003ea6
    65003e8c:	data16 data16 xchg ax,ax
    65003e90:	cmp    rdi,r11
    65003e93:	jae    0x65003f71
    65003e99:	add    ebx,0xffffffff
    65003e9c:	movzx  eax,WORD PTR [rdi]
    65003e9f:	lea    rdi,[rdi+rax*2+0x2]
    65003ea4:	jne    0x65003e90
    65003ea6:	cmp    rdi,r11
    65003ea9:	jae    0x65003f71
    65003eaf:	movzx  eax,WORD PTR [rdi]
    65003eb2:	test   ax,ax
    65003eb5:	je     0x65003f71
    65003ebb:	movzx  ebx,ax
    65003ebe:	mov    rax,QWORD PTR [rsi]
    65003ec1:	mov    ecx,0x1
    65003ec6:	sub    ecx,DWORD PTR [rax-0x8]
    65003ec9:	mov    eax,DWORD PTR [rax-0xc]
    65003ecc:	sub    eax,ebx
    65003ece:	or     ecx,eax
    65003ed0:	jge    0x65003edc
    65003ed2:	mov    edx,ebx
    65003ed4:	mov    rcx,rsi
    65003ed7:	call   0x65002640
    65003edc:	movzx  ecx,WORD PTR [rdi]
    65003edf:	lea    r8,[rdi+0x2]
    65003ee3:	cmp    ecx,0xffffffff
    65003ee6:	jne    0x65003ef9
    65003ee8:	or     rcx,0xffffffffffffffff
    65003eec:	xor    eax,eax
    65003eee:	mov    rdi,r8
    65003ef1:	repnz scas ax,WORD PTR es:[rdi]
    65003ef4:	not    rcx
    65003ef7:	and    ecx,ecx
    65003ef9:	movsxd r9,ecx
    65003efc:	mov    rcx,QWORD PTR [rsi]
    65003eff:	lea    rdi,[rbx+rbx*1]
    65003f03:	mov    rdx,rdi
    65003f06:	add    r9,r9
    65003f09:	call   0x6501d640
    65003f0e:	test   eax,eax
    65003f10:	je     0x65003f47
    65003f12:	cmp    eax,0xc
    65003f15:	je     0x65003f3c
    65003f17:	cmp    eax,0x16
    65003f1a:	je     0x65003f31
    65003f1c:	cmp    eax,0x22
    65003f1f:	je     0x65003f31
    65003f21:	cmp    eax,0x50
    65003f24:	je     0x65003f47
    65003f26:	mov    ecx,0x80004005
    65003f2b:	call   0x65001050
    65003f30:	int3   
    65003f31:	mov    ecx,0x80070057
    65003f36:	call   0x65001050
    65003f3b:	int3   
    65003f3c:	mov    ecx,0x8007000e
    65003f41:	call   0x65001050
    65003f46:	int3   
    65003f47:	test   ebx,ebx
    65003f49:	js     0x65003f66
    65003f4b:	mov    rcx,QWORD PTR [rsi]
    65003f4e:	cmp    ebx,DWORD PTR [rcx-0xc]
    65003f51:	jg     0x65003f66
    65003f53:	mov    DWORD PTR [rcx-0x10],ebx
    65003f56:	mov    rcx,QWORD PTR [rsi]
    65003f59:	mov    eax,0x1
    65003f5e:	mov    WORD PTR [rdi+rcx*1],0x0
    65003f64:	jmp    0x65003f73
    65003f66:	mov    ecx,0x80070057
    65003f6b:	call   0x65001050
    65003f70:	int3   
    65003f71:	xor    eax,eax
    65003f73:	mov    rbx,QWORD PTR [rsp+0x30]
    65003f78:	mov    rbp,QWORD PTR [rsp+0x38]
    65003f7d:	mov    rsi,QWORD PTR [rsp+0x40]
    65003f82:	mov    rdi,QWORD PTR [rsp+0x48]
    65003f87:	add    rsp,0x20
    65003f8b:	pop    r12
    65003f8d:	ret    
    65003f8e:	int3   
    65003f8f:	int3   
    65003f90:	mov    QWORD PTR [rsp+0x18],rbx
    65003f95:	mov    QWORD PTR [rsp+0x20],rbp
    65003f9a:	push   rdi
    65003f9b:	sub    rsp,0x20
    65003f9f:	test   r8d,r8d
    65003fa2:	movsxd rdi,r8d
    65003fa5:	mov    rbp,rdx
    65003fa8:	mov    rbx,rcx
    65003fab:	jne    0x65004034
    65003fb1:	mov    rax,QWORD PTR [rcx]
    65003fb4:	cmp    DWORD PTR [rax-0x10],r8d
    65003fb8:	mov    rdi,QWORD PTR [rax-0x18]
    65003fbc:	lea    rdx,[rax-0x18]
    65003fc0:	je     0x650040c9
    65003fc6:	cmp    DWORD PTR [rdx+0x10],r8d
    65003fca:	jge    0x65003ffc
    65003fcc:	cmp    DWORD PTR [rax-0xc],r8d
    65003fd0:	jge    0x65003fdd
    65003fd2:	mov    ecx,0x80070057
    65003fd7:	call   0x65001050
    65003fdc:	int3   
    65003fdd:	mov    DWORD PTR [rax-0x10],0x0
    65003fe4:	mov    rax,QWORD PTR [rcx]
    65003fe7:	mov    WORD PTR [rax],0x0
    65003fec:	mov    rbx,QWORD PTR [rsp+0x40]
    65003ff1:	mov    rbp,QWORD PTR [rsp+0x48]
    65003ff6:	add    rsp,0x20
    65003ffa:	pop    rdi
    65003ffb:	ret    
    65003ffc:	or     eax,0xffffffff
    65003fff:	lock xadd DWORD PTR [rdx+0x10],eax
    65004004:	add    eax,0xffffffff
    65004007:	test   eax,eax
    65004009:	jg     0x65004014
    6500400b:	mov    rcx,QWORD PTR [rdx]
    6500400e:	mov    rax,QWORD PTR [rcx]
    65004011:	call   QWORD PTR [rax+0x8]
    65004014:	mov    rax,QWORD PTR [rdi]
    65004017:	mov    rcx,rdi
    6500401a:	call   QWORD PTR [rax+0x18]
    6500401d:	add    rax,0x18
    65004021:	mov    QWORD PTR [rbx],rax
    65004024:	mov    rbx,QWORD PTR [rsp+0x40]
    65004029:	mov    rbp,QWORD PTR [rsp+0x48]
    6500402e:	add    rsp,0x20
    65004032:	pop    rdi
    65004033:	ret    
    65004034:	test   rdx,rdx
    65004037:	jne    0x65004044
    65004039:	mov    ecx,0x80070057
    6500403e:	call   0x65001050
    65004043:	int3   
    65004044:	mov    rax,QWORD PTR [rcx]
    65004047:	mov    QWORD PTR [rsp+0x30],rsi
    6500404c:	mov    QWORD PTR [rsp+0x38],r12
    65004051:	mov    esi,DWORD PTR [rax-0x10]
    65004054:	mov    r12,rdx
    65004057:	mov    ecx,0x1
    6500405c:	sub    ecx,DWORD PTR [rax-0x8]
    6500405f:	sub    r12,rax
    65004062:	mov    eax,DWORD PTR [rax-0xc]
    65004065:	sub    eax,edi
    65004067:	sar    r12,1
    6500406a:	or     ecx,eax
    6500406c:	jge    0x65004078
    6500406e:	mov    edx,edi
    65004070:	mov    rcx,rbx
    65004073:	call   0x65002640
    65004078:	cmp    r12,rsi
    6500407b:	mov    rcx,QWORD PTR [rbx]
    6500407e:	ja     0x65004095
    65004080:	lea    rsi,[rdi+rdi*1]
    65004084:	lea    r8,[rcx+r12*2]
    65004088:	mov    r9,rsi
    6500408b:	mov    rdx,rsi
    6500408e:	call   0x6501d710
    65004093:	jmp    0x650040a7
    65004095:	lea    rsi,[rdi+rdi*1]
    65004099:	mov    r8,rbp
    6500409c:	mov    r9,rsi
    6500409f:	mov    rdx,rsi
    650040a2:	call   0x6501d640
    650040a7:	test   edi,edi
    650040a9:	mov    r12,QWORD PTR [rsp+0x38]
    650040ae:	js     0x650040d9
    650040b0:	mov    rax,QWORD PTR [rbx]
    650040b3:	cmp    edi,DWORD PTR [rax-0xc]
    650040b6:	jg     0x650040d9
    650040b8:	mov    DWORD PTR [rax-0x10],edi
    650040bb:	mov    rax,QWORD PTR [rbx]
    650040be:	mov    WORD PTR [rsi+rax*1],0x0
    650040c4:	mov    rsi,QWORD PTR [rsp+0x30]
    650040c9:	mov    rbx,QWORD PTR [rsp+0x40]
    650040ce:	mov    rbp,QWORD PTR [rsp+0x48]
    650040d3:	add    rsp,0x20
    650040d7:	pop    rdi
    650040d8:	ret    
    650040d9:	mov    ecx,0x80070057
    650040de:	call   0x65001050
    650040e3:	int3   
    650040e4:	int3   
    650040e5:	int3   
    650040e6:	int3   
    650040e7:	int3   
    650040e8:	int3   
    650040e9:	int3   
    650040ea:	int3   
    650040eb:	int3   
    650040ec:	int3   
    650040ed:	int3   
    650040ee:	int3   
    650040ef:	int3   
    650040f0:	rex push rbx
    650040f2:	sub    rsp,0x40
    650040f6:	test   rcx,rcx
    650040f9:	mov    eax,r9d
    650040fc:	mov    rbx,rcx
    650040ff:	je     0x65004149
    65004101:	test   rdx,rdx
    65004104:	je     0x65004149
    65004106:	mov    BYTE PTR [rcx],0x0
    65004109:	mov    QWORD PTR [rsp+0x50],rdi
    6500410e:	xor    edi,edi
    65004110:	mov    QWORD PTR [rsp+0x38],rdi
    65004115:	mov    QWORD PTR [rsp+0x30],rdi
    6500411a:	mov    DWORD PTR [rsp+0x28],r8d
    6500411f:	mov    QWORD PTR [rsp+0x20],rcx
    65004124:	mov    r8,rdx
    65004127:	or     r9d,0xffffffff
    6500412b:	xor    edx,edx
    6500412d:	mov    ecx,eax
    6500412f:	call   QWORD PTR [rip+0x2ff0b]        # 0x65034040
    65004135:	test   eax,eax
    65004137:	cmove  rbx,rdi
    6500413b:	mov    rdi,QWORD PTR [rsp+0x50]
    65004140:	mov    rax,rbx
    65004143:	add    rsp,0x40
    65004147:	pop    rbx
    65004148:	ret    
    65004149:	xor    eax,eax
    6500414b:	add    rsp,0x40
    6500414f:	pop    rbx
    65004150:	ret    
    65004151:	int3   
    65004152:	int3   
    65004153:	int3   
    65004154:	int3   
    65004155:	int3   
    65004156:	int3   
    65004157:	int3   
    65004158:	int3   
    65004159:	int3   
    6500415a:	int3   
    6500415b:	int3   
    6500415c:	int3   
    6500415d:	int3   
    6500415e:	int3   
    6500415f:	int3   
    65004160:	rex push rbx
    65004162:	sub    rsp,0x20
    65004166:	mov    rbx,rcx
    65004169:	mov    rcx,QWORD PTR [rcx]
    6500416c:	test   rcx,rcx
    6500416f:	je     0x6500417e
    65004171:	call   QWORD PTR [rip+0x2fea1]        # 0x65034018
    65004177:	mov    QWORD PTR [rbx],0x0
    6500417e:	add    rsp,0x20
    65004182:	pop    rbx
    65004183:	ret    
    65004184:	int3   
    65004185:	int3   
    65004186:	int3   
    65004187:	int3   
    65004188:	int3   
    65004189:	int3   
    6500418a:	int3   
    6500418b:	int3   
    6500418c:	int3   
    6500418d:	int3   
    6500418e:	int3   
    6500418f:	int3   
    65004190:	ret    0x0
    65004193:	int3   
    65004194:	int3   
    65004195:	int3   
    65004196:	int3   
    65004197:	int3   
    65004198:	int3   
    65004199:	int3   
    6500419a:	int3   
    6500419b:	int3   
    6500419c:	int3   
    6500419d:	int3   
    6500419e:	int3   
    6500419f:	int3   
    650041a0:	mov    QWORD PTR [rsp+0x8],rbx
    650041a5:	push   rdi
    650041a6:	sub    rsp,0x20
    650041aa:	lea    rax,[rip+0x30f6f]        # 0x65035120
    650041b1:	mov    edi,edx
    650041b3:	mov    rbx,rcx
    650041b6:	mov    QWORD PTR [rcx],rax
    650041b9:	cmp    QWORD PTR [rcx+0x38],0x10
    650041be:	jb     0x650041c9
    650041c0:	mov    rcx,QWORD PTR [rcx+0x20]
    650041c4:	call   0x6501d190
    650041c9:	mov    QWORD PTR [rbx+0x38],0xf
    650041d1:	mov    QWORD PTR [rbx+0x30],0x0
    650041d9:	mov    rcx,rbx
    650041dc:	mov    BYTE PTR [rbx+0x20],0x0
    650041e0:	call   0x6501d320
    650041e5:	test   dil,0x1
    650041e9:	je     0x650041f3
    650041eb:	mov    rcx,rbx
    650041ee:	call   0x6501d190
    650041f3:	mov    rax,rbx
    650041f6:	mov    rbx,QWORD PTR [rsp+0x30]
    650041fb:	add    rsp,0x20
    650041ff:	pop    rdi
    65004200:	ret    
    65004201:	int3   
    65004202:	int3   
    65004203:	int3   
    65004204:	int3   
    65004205:	int3   
    65004206:	int3   
    65004207:	int3   
    65004208:	int3   
    65004209:	int3   
    6500420a:	int3   
    6500420b:	int3   
    6500420c:	int3   
    6500420d:	int3   
    6500420e:	int3   
    6500420f:	int3   
    65004210:	rex push rbx
    65004212:	sub    rsp,0x20
    65004216:	lea    rax,[rip+0x30f03]        # 0x65035120
    6500421d:	mov    rbx,rcx
    65004220:	mov    QWORD PTR [rcx],rax
    65004223:	cmp    QWORD PTR [rcx+0x38],0x10
    65004228:	jb     0x65004233
    6500422a:	mov    rcx,QWORD PTR [rcx+0x20]
    6500422e:	call   0x6501d190
    65004233:	mov    QWORD PTR [rbx+0x38],0xf
    6500423b:	mov    QWORD PTR [rbx+0x30],0x0
    65004243:	mov    rcx,rbx
    65004246:	mov    BYTE PTR [rbx+0x20],0x0
    6500424a:	add    rsp,0x20
    6500424e:	pop    rbx
    6500424f:	jmp    0x6501d320
    65004254:	int3   
    65004255:	int3   
    65004256:	int3   
    65004257:	int3   
    65004258:	int3   
    65004259:	int3   
    6500425a:	int3   
    6500425b:	int3   
    6500425c:	int3   
    6500425d:	int3   
    6500425e:	int3   
    6500425f:	int3   
    65004260:	mov    QWORD PTR [rsp+0x8],rbx
    65004265:	push   rdi
    65004266:	sub    rsp,0x20
    6500426a:	lea    rax,[rip+0x30eaf]        # 0x65035120
    65004271:	mov    edi,edx
    65004273:	mov    rbx,rcx
    65004276:	mov    QWORD PTR [rcx],rax
    65004279:	cmp    QWORD PTR [rcx+0x38],0x10
    6500427e:	jb     0x65004289
    65004280:	mov    rcx,QWORD PTR [rcx+0x20]
    65004284:	call   0x6501d190
    65004289:	mov    QWORD PTR [rbx+0x38],0xf
    65004291:	mov    QWORD PTR [rbx+0x30],0x0
    65004299:	mov    rcx,rbx
    6500429c:	mov    BYTE PTR [rbx+0x20],0x0
    650042a0:	call   0x6501d320
    650042a5:	test   dil,0x1
    650042a9:	je     0x650042b3
    650042ab:	mov    rcx,rbx
    650042ae:	call   0x6501d190
    650042b3:	mov    rax,rbx
    650042b6:	mov    rbx,QWORD PTR [rsp+0x30]
    650042bb:	add    rsp,0x20
    650042bf:	pop    rdi
    650042c0:	ret    
    650042c1:	int3   
    650042c2:	int3   
    650042c3:	int3   
    650042c4:	int3   
    650042c5:	int3   
    650042c6:	int3   
    650042c7:	int3   
    650042c8:	int3   
    650042c9:	int3   
    650042ca:	int3   
    650042cb:	int3   
    650042cc:	int3   
    650042cd:	int3   
    650042ce:	int3   
    650042cf:	int3   
    650042d0:	rex push rbx
    650042d2:	sub    rsp,0x20
    650042d6:	lea    rax,[rip+0x30e43]        # 0x65035120
    650042dd:	mov    rbx,rcx
    650042e0:	mov    QWORD PTR [rcx],rax
    650042e3:	cmp    QWORD PTR [rcx+0x38],0x10
    650042e8:	jb     0x650042f3
    650042ea:	mov    rcx,QWORD PTR [rcx+0x20]
    650042ee:	call   0x6501d190
    650042f3:	mov    QWORD PTR [rbx+0x38],0xf
    650042fb:	mov    QWORD PTR [rbx+0x30],0x0
    65004303:	mov    rcx,rbx
    65004306:	mov    BYTE PTR [rbx+0x20],0x0
    6500430a:	add    rsp,0x20
    6500430e:	pop    rbx
    6500430f:	jmp    0x6501d320
    65004314:	int3   
    65004315:	int3   
    65004316:	int3   
    65004317:	int3   
    65004318:	int3   
    65004319:	int3   
    6500431a:	int3   
    6500431b:	int3   
    6500431c:	int3   
    6500431d:	int3   
    6500431e:	int3   
    6500431f:	int3   
    65004320:	mov    QWORD PTR [rsp+0x8],rbx
    65004325:	push   rdi
    65004326:	sub    rsp,0x20
    6500432a:	lea    rax,[rip+0x30def]        # 0x65035120
    65004331:	mov    edi,edx
    65004333:	mov    rbx,rcx
    65004336:	mov    QWORD PTR [rcx],rax
    65004339:	cmp    QWORD PTR [rcx+0x38],0x10
    6500433e:	jb     0x65004349
    65004340:	mov    rcx,QWORD PTR [rcx+0x20]
    65004344:	call   0x6501d190
    65004349:	mov    QWORD PTR [rbx+0x38],0xf
    65004351:	mov    QWORD PTR [rbx+0x30],0x0
    65004359:	mov    rcx,rbx
    6500435c:	mov    BYTE PTR [rbx+0x20],0x0
    65004360:	call   0x6501d320
    65004365:	test   dil,0x1
    65004369:	je     0x65004373
    6500436b:	mov    rcx,rbx
    6500436e:	call   0x6501d190
    65004373:	mov    rax,rbx
    65004376:	mov    rbx,QWORD PTR [rsp+0x30]
    6500437b:	add    rsp,0x20
    6500437f:	pop    rdi
    65004380:	ret    
    65004381:	int3   
    65004382:	int3   
    65004383:	int3   
    65004384:	int3   
    65004385:	int3   
    65004386:	int3   
    65004387:	int3   
    65004388:	int3   
    65004389:	int3   
    6500438a:	int3   
    6500438b:	int3   
    6500438c:	int3   
    6500438d:	int3   
    6500438e:	int3   
    6500438f:	int3   
    65004390:	mov    QWORD PTR [rsp+0x8],rcx
    65004395:	push   rdi
    65004396:	sub    rsp,0x30
    6500439a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    650043a3:	mov    QWORD PTR [rsp+0x48],rbx
    650043a8:	mov    rbx,rdx
    650043ab:	mov    rdi,rcx
    650043ae:	call   0x6501d270
    650043b3:	nop
    650043b4:	lea    rax,[rip+0x30d65]        # 0x65035120
    650043bb:	mov    QWORD PTR [rdi],rax
    650043be:	lea    rdx,[rbx+0x18]
    650043c2:	lea    rcx,[rdi+0x18]
    650043c6:	mov    QWORD PTR [rcx+0x20],0xf
    650043ce:	mov    QWORD PTR [rcx+0x18],0x0
    650043d6:	mov    BYTE PTR [rcx+0x8],0x0
    650043da:	or     r9,0xffffffffffffffff
    650043de:	xor    r8d,r8d
    650043e1:	call   0x65001e20
    650043e6:	nop
    650043e7:	lea    rax,[rip+0x30d62]        # 0x65035150
    650043ee:	mov    QWORD PTR [rdi],rax
    650043f1:	mov    rax,rdi
    650043f4:	mov    rbx,QWORD PTR [rsp+0x48]
    650043f9:	add    rsp,0x30
    650043fd:	pop    rdi
    650043fe:	ret    
    650043ff:	int3   
    65004400:	rex push rbp
    65004402:	sub    rsp,0x20
    65004406:	mov    rbp,rdx
    65004409:	mov    rcx,QWORD PTR [rbp+0x40]
    6500440d:	call   0x6501d320
    65004412:	add    rsp,0x20
    65004416:	pop    rbp
    65004417:	ret    
    65004418:	int3   
    65004419:	int3   
    6500441a:	int3   
    6500441b:	int3   
    6500441c:	int3   
    6500441d:	int3   
    6500441e:	int3   
    6500441f:	int3   
    65004420:	mov    QWORD PTR [rsp+0x8],rcx
    65004425:	push   rdi
    65004426:	sub    rsp,0x30
    6500442a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65004433:	mov    QWORD PTR [rsp+0x48],rbx
    65004438:	mov    rbx,rdx
    6500443b:	mov    rdi,rcx
    6500443e:	call   0x6501d270
    65004443:	nop
    65004444:	lea    rax,[rip+0x30cd5]        # 0x65035120
    6500444b:	mov    QWORD PTR [rdi],rax
    6500444e:	lea    rdx,[rbx+0x18]
    65004452:	lea    rcx,[rdi+0x18]
    65004456:	mov    QWORD PTR [rcx+0x20],0xf
    6500445e:	mov    QWORD PTR [rcx+0x18],0x0
    65004466:	mov    BYTE PTR [rcx+0x8],0x0
    6500446a:	or     r9,0xffffffffffffffff
    6500446e:	xor    r8d,r8d
    65004471:	call   0x65001e20
    65004476:	nop
    65004477:	mov    rax,rdi
    6500447a:	mov    rbx,QWORD PTR [rsp+0x48]
    6500447f:	add    rsp,0x30
    65004483:	pop    rdi
    65004484:	ret    
    65004485:	int3   
    65004486:	int3   
    65004487:	int3   
    65004488:	int3   
    65004489:	int3   
    6500448a:	int3   
    6500448b:	int3   
    6500448c:	int3   
    6500448d:	int3   
    6500448e:	int3   
    6500448f:	int3   
    65004490:	rex push rbp
    65004492:	sub    rsp,0x20
    65004496:	mov    rbp,rdx
    65004499:	mov    rcx,QWORD PTR [rbp+0x40]
    6500449d:	call   0x6501d320
    650044a2:	add    rsp,0x20
    650044a6:	pop    rbp
    650044a7:	ret    
    650044a8:	int3   
    650044a9:	int3   
    650044aa:	int3   
    650044ab:	int3   
    650044ac:	int3   
    650044ad:	int3   
    650044ae:	int3   
    650044af:	int3   
    650044b0:	rex push rbp
    650044b2:	push   rsi
    650044b3:	push   rdi
    650044b4:	push   r12
    650044b6:	push   r13
    650044b8:	push   r14
    650044ba:	push   r15
    650044bc:	sub    rsp,0x120
    650044c3:	mov    QWORD PTR [rsp+0x88],0xfffffffffffffffe
    650044cf:	mov    QWORD PTR [rsp+0x170],rbx
    650044d7:	mov    rax,QWORD PTR [rip+0x3dc42]        # 0x65042120
    650044de:	xor    rax,rsp
    650044e1:	mov    QWORD PTR [rsp+0x110],rax
    650044e9:	mov    QWORD PTR [rsp+0x80],rdx
    650044f1:	mov    QWORD PTR [rsp+0x78],rcx
    650044f6:	mov    QWORD PTR [rsp+0x90],rcx
    650044fe:	mov    DWORD PTR [rsp+0x70],0x0
    65004506:	movzx  ebx,BYTE PTR [rdx+0xf]
    6500450a:	movzx  edi,BYTE PTR [rdx+0xe]
    6500450e:	movzx  esi,BYTE PTR [rdx+0xd]
    65004512:	movzx  ebp,BYTE PTR [rdx+0xc]
    65004516:	movzx  r12d,BYTE PTR [rdx+0xb]
    6500451b:	movzx  r13d,BYTE PTR [rdx+0xa]
    65004520:	movzx  r14d,BYTE PTR [rdx+0x9]
    65004525:	movzx  r15d,BYTE PTR [rdx+0x8]
    6500452a:	movzx  eax,WORD PTR [rdx+0x6]
    6500452e:	mov    DWORD PTR [rsp+0x74],eax
    65004532:	movzx  eax,WORD PTR [rdx+0x4]
    65004536:	mov    DWORD PTR [rsp+0x70],eax
    6500453a:	lea    r8,[rip+0x32a8f]        # 0x65036fd0
    65004541:	mov    edx,0x32
    65004546:	lea    rcx,[rip+0x32ac3]        # 0x65037010
    6500454d:	call   0x6500bc30
    65004552:	mov    r8,rax
    65004555:	mov    DWORD PTR [rsp+0x68],ebx
    65004559:	mov    DWORD PTR [rsp+0x60],edi
    6500455d:	mov    DWORD PTR [rsp+0x58],esi
    65004561:	mov    DWORD PTR [rsp+0x50],ebp
    65004565:	mov    DWORD PTR [rsp+0x48],r12d
    6500456a:	mov    DWORD PTR [rsp+0x40],r13d
    6500456f:	mov    DWORD PTR [rsp+0x38],r14d
    65004574:	mov    DWORD PTR [rsp+0x30],r15d
    65004579:	mov    eax,DWORD PTR [rsp+0x74]
    6500457d:	mov    DWORD PTR [rsp+0x28],eax
    65004581:	mov    eax,DWORD PTR [rsp+0x70]
    65004585:	mov    DWORD PTR [rsp+0x20],eax
    65004589:	mov    rax,QWORD PTR [rsp+0x80]
    65004591:	mov    r9d,DWORD PTR [rax]
    65004594:	mov    edx,0x64
    65004599:	lea    rcx,[rsp+0xa0]
    650045a1:	call   0x6501f490
    650045a6:	lea    rcx,[rip+0x3daf3]        # 0x650420a0
    650045ad:	mov    rax,QWORD PTR [rip+0x3daec]        # 0x650420a0
    650045b4:	call   QWORD PTR [rax+0x18]
    650045b7:	add    rax,0x18
    650045bb:	mov    rbx,QWORD PTR [rsp+0x78]
    650045c0:	mov    QWORD PTR [rbx],rax
    650045c3:	lea    rcx,[rsp+0xa0]
    650045cb:	lea    rax,[rsp+0xa0]
    650045d3:	test   rax,0xffffffffffff0000
    650045d9:	jne    0x65004605
    650045db:	movzx  edi,cx
    650045de:	xor    edx,edx
    650045e0:	mov    ecx,edi
    650045e2:	call   0x650026f0
    650045e7:	test   rax,rax
    650045ea:	je     0x65004600
    650045ec:	mov    r8d,edi
    650045ef:	mov    rdx,rax
    650045f2:	mov    rcx,rbx
    650045f5:	call   0x65003e00
    650045fa:	nop
    650045fb:	mov    rax,rbx
    650045fe:	jmp    0x65004619
    65004600:	mov    rax,rbx
    65004603:	jmp    0x65004619
    65004605:	lea    rdx,[rsp+0xa0]
    6500460d:	mov    rcx,rbx
    65004610:	call   0x65003cc0
    65004615:	nop
    65004616:	mov    rax,rbx
    65004619:	mov    rcx,QWORD PTR [rsp+0x110]
    65004621:	xor    rcx,rsp
    65004624:	call   0x6501e4e0
    65004629:	mov    rbx,QWORD PTR [rsp+0x170]
    65004631:	add    rsp,0x120
    65004638:	pop    r15
    6500463a:	pop    r14
    6500463c:	pop    r13
    6500463e:	pop    r12
    65004640:	pop    rdi
    65004641:	pop    rsi
    65004642:	pop    rbp
    65004643:	ret    
    65004644:	int3   
    65004645:	int3   
    65004646:	int3   
    65004647:	int3   
    65004648:	int3   
    65004649:	int3   
    6500464a:	int3   
    6500464b:	int3   
    6500464c:	int3   
    6500464d:	int3   
    6500464e:	int3   
    6500464f:	int3   
    65004650:	rex push rbp
    65004652:	sub    rsp,0x20
    65004656:	mov    rbp,rdx
    65004659:	mov    rcx,QWORD PTR [rbp+0x90]
    65004660:	call   0x65002100
    65004665:	add    rsp,0x20
    65004669:	pop    rbp
    6500466a:	ret    
    6500466b:	int3   
    6500466c:	int3   
    6500466d:	int3   
    6500466e:	int3   
    6500466f:	int3   
    65004670:	rex push rdi
    65004672:	sub    rsp,0x60
    65004676:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500467f:	mov    QWORD PTR [rsp+0x70],rbx
    65004684:	mov    QWORD PTR [rsp+0x80],rsi
    6500468c:	mov    rax,QWORD PTR [rip+0x3da8d]        # 0x65042120
    65004693:	xor    rax,rsp
    65004696:	mov    QWORD PTR [rsp+0x50],rax
    6500469b:	mov    rdi,rdx
    6500469e:	mov    rsi,rcx
    650046a1:	mov    QWORD PTR [rsp+0x20],rdx
    650046a6:	call   QWORD PTR [rip+0x3d9ec]        # 0x65042098
    650046ac:	lea    r11,[rsp+0x40]
    650046b1:	mov    eax,DWORD PTR [rip+0x309c1]        # 0x65035078
    650046b7:	mov    DWORD PTR [r11],eax
    650046ba:	mov    eax,DWORD PTR [rip+0x309bc]        # 0x6503507c
    650046c0:	mov    DWORD PTR [r11+0x4],eax
    650046c4:	mov    eax,DWORD PTR [rip+0x309b6]        # 0x65035080
    650046ca:	mov    DWORD PTR [r11+0x8],eax
    650046ce:	mov    eax,DWORD PTR [rip+0x309b0]        # 0x65035084
    650046d4:	mov    DWORD PTR [r11+0xc],eax
    650046d8:	mov    rax,QWORD PTR [rdi]
    650046db:	cmp    DWORD PTR [rax-0x10],0x0
    650046df:	jle    0x65004789
    650046e5:	mov    dx,0x7b
    650046e9:	mov    rcx,rdi
    650046ec:	call   0x6500bb40
    650046f1:	mov    rdx,rax
    650046f4:	mov    rcx,rdi
    650046f7:	call   0x6500ba50
    650046fc:	mov    r11,QWORD PTR [rdi]
    650046ff:	mov    rax,r11
    65004702:	xor    ebx,ebx
    65004704:	movzx  ecx,WORD PTR [r11]
    65004708:	test   cx,cx
    6500470b:	je     0x6500477e
    6500470d:	data16 xchg ax,ax
    65004710:	cmp    cx,0x7d
    65004714:	jne    0x65004720
    65004716:	test   rbx,rbx
    65004719:	jne    0x65004722
    6500471b:	mov    rbx,rax
    6500471e:	jmp    0x65004722
    65004720:	xor    ebx,ebx
    65004722:	add    rax,0x2
    65004726:	mov    cx,WORD PTR [rax]
    65004729:	test   cx,cx
    6500472c:	jne    0x65004710
    6500472e:	test   rbx,rbx
    65004731:	je     0x6500477e
    65004733:	sub    rbx,r11
    65004736:	sar    rbx,1
    65004739:	mov    ecx,0x1
    6500473e:	sub    ecx,DWORD PTR [r11-0x8]
    65004742:	mov    eax,DWORD PTR [r11-0xc]
    65004746:	sub    eax,ebx
    65004748:	or     eax,ecx
    6500474a:	jge    0x65004756
    6500474c:	mov    edx,ebx
    6500474e:	mov    rcx,rdi
    65004751:	call   0x65002640
    65004756:	test   ebx,ebx
    65004758:	js     0x65004773
    6500475a:	mov    rax,QWORD PTR [rdi]
    6500475d:	cmp    ebx,DWORD PTR [rax-0xc]
    65004760:	jg     0x65004773
    65004762:	mov    DWORD PTR [rax-0x10],ebx
    65004765:	movsxd rcx,ebx
    65004768:	mov    rax,QWORD PTR [rdi]
    6500476b:	mov    WORD PTR [rax+rcx*2],0x0
    65004771:	jmp    0x6500477e
    65004773:	mov    ecx,0x80070057
    65004778:	call   0x65001050
    6500477d:	int3   
    6500477e:	mov    rdx,rdi
    65004781:	mov    rcx,rdi
    65004784:	call   0x6500ba50
    65004789:	mov    rax,QWORD PTR [rdi]
    6500478c:	cmp    DWORD PTR [rax-0x8],0x1
    65004790:	jle    0x6500479d
    65004792:	mov    edx,DWORD PTR [rax-0x10]
    65004795:	mov    rcx,rdi
    65004798:	call   0x65002130
    6500479d:	lea    rdx,[rsp+0x40]
    650047a2:	mov    rcx,QWORD PTR [rdi]
    650047a5:	call   QWORD PTR [rip+0x2fbb5]        # 0x65034360
    650047ab:	test   eax,eax
    650047ad:	je     0x65004816
    650047af:	lea    rcx,[rsp+0x20]
    650047b4:	mov    eax,DWORD PTR [rip+0x308be]        # 0x65035078
    650047ba:	mov    DWORD PTR [rcx],eax
    650047bc:	mov    eax,DWORD PTR [rip+0x308ba]        # 0x6503507c
    650047c2:	mov    DWORD PTR [rcx+0x4],eax
    650047c5:	mov    eax,DWORD PTR [rip+0x308b5]        # 0x65035080
    650047cb:	mov    DWORD PTR [rcx+0x8],eax
    650047ce:	mov    eax,DWORD PTR [rip+0x308b0]        # 0x65035084
    650047d4:	mov    DWORD PTR [rcx+0xc],eax
    650047d7:	mov    rdx,QWORD PTR [rdi]
    650047da:	sub    rdx,0x18
    650047de:	or     eax,0xffffffff
    650047e1:	lock xadd DWORD PTR [rdx+0x10],eax
    650047e6:	add    eax,0xffffffff
    650047e9:	test   eax,eax
    650047eb:	jg     0x650047f6
    650047ed:	mov    rcx,QWORD PTR [rdx]
    650047f0:	mov    rax,QWORD PTR [rcx]
    650047f3:	call   QWORD PTR [rax+0x8]
    650047f6:	lea    rcx,[rsp+0x20]
    650047fb:	mov    eax,DWORD PTR [rcx]
    650047fd:	mov    DWORD PTR [rsi],eax
    650047ff:	mov    eax,DWORD PTR [rcx+0x4]
    65004802:	mov    DWORD PTR [rsi+0x4],eax
    65004805:	mov    eax,DWORD PTR [rcx+0x8]
    65004808:	mov    DWORD PTR [rsi+0x8],eax
    6500480b:	mov    eax,DWORD PTR [rcx+0xc]
    6500480e:	mov    DWORD PTR [rsi+0xc],eax
    65004811:	mov    rax,rsi
    65004814:	jmp    0x6500485e
    65004816:	movaps xmm0,XMMWORD PTR [rsp+0x40]
    6500481b:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    65004821:	mov    rdx,QWORD PTR [rdi]
    65004824:	sub    rdx,0x18
    65004828:	or     eax,0xffffffff
    6500482b:	lock xadd DWORD PTR [rdx+0x10],eax
    65004830:	add    eax,0xffffffff
    65004833:	test   eax,eax
    65004835:	jg     0x65004840
    65004837:	mov    rcx,QWORD PTR [rdx]
    6500483a:	mov    rax,QWORD PTR [rcx]
    6500483d:	call   QWORD PTR [rax+0x8]
    65004840:	lea    rcx,[rsp+0x20]
    65004845:	mov    eax,DWORD PTR [rcx]
    65004847:	mov    DWORD PTR [rsi],eax
    65004849:	mov    eax,DWORD PTR [rcx+0x4]
    6500484c:	mov    DWORD PTR [rsi+0x4],eax
    6500484f:	mov    eax,DWORD PTR [rcx+0x8]
    65004852:	mov    DWORD PTR [rsi+0x8],eax
    65004855:	mov    eax,DWORD PTR [rcx+0xc]
    65004858:	mov    DWORD PTR [rsi+0xc],eax
    6500485b:	mov    rax,rsi
    6500485e:	mov    rcx,QWORD PTR [rsp+0x50]
    65004863:	xor    rcx,rsp
    65004866:	call   0x6501e4e0
    6500486b:	mov    rbx,QWORD PTR [rsp+0x70]
    65004870:	mov    rsi,QWORD PTR [rsp+0x80]
    65004878:	add    rsp,0x60
    6500487c:	pop    rdi
    6500487d:	ret    
    6500487e:	int3   
    6500487f:	int3   
    65004880:	rex push rbp
    65004882:	sub    rsp,0x20
    65004886:	mov    rbp,rdx
    65004889:	mov    rcx,QWORD PTR [rbp+0x20]
    6500488d:	call   0x65001cb0
    65004892:	add    rsp,0x20
    65004896:	pop    rbp
    65004897:	ret    
    65004898:	int3   
    65004899:	int3   
    6500489a:	int3   
    6500489b:	int3   
    6500489c:	int3   
    6500489d:	int3   
    6500489e:	int3   
    6500489f:	int3   
    650048a0:	rex push rbp
    650048a2:	push   rsi
    650048a3:	push   rdi
    650048a4:	push   r12
    650048a6:	push   r13
    650048a8:	sub    rsp,0x60
    650048ac:	lea    rbp,[rsp+0x30]
    650048b1:	mov    QWORD PTR [rbp+0x8],0xfffffffffffffffe
    650048b9:	mov    QWORD PTR [rbp+0x70],rbx
    650048bd:	mov    rax,QWORD PTR [rip+0x3d85c]        # 0x65042120
    650048c4:	xor    rax,rbp
    650048c7:	mov    QWORD PTR [rbp+0x28],rax
    650048cb:	movzx  edi,dl
    650048ce:	mov    rsi,rcx
    650048d1:	mov    QWORD PTR [rbp+0x10],rcx
    650048d5:	xor    r13d,r13d
    650048d8:	mov    DWORD PTR [rbp+0x0],r13d
    650048dc:	call   QWORD PTR [rip+0x3d7b6]        # 0x65042098
    650048e2:	mov    r12d,eax
    650048e5:	lea    r8,[rip+0x3275c]        # 0x65037048
    650048ec:	lea    edx,[r13+0x6]
    650048f0:	lea    rcx,[rip+0x32785]        # 0x6503707c
    650048f7:	call   0x6500bc30
    650048fc:	mov    rdx,rax
    650048ff:	mov    r8d,edi
    65004902:	lea    rcx,[rbp+0x18]
    65004906:	call   0x6501f3e0
    6500490b:	lea    rcx,[rbp+0x18]
    6500490f:	call   QWORD PTR [rip+0x2f783]        # 0x65034098
    65004915:	lea    edx,[rax+0x1]
    65004918:	cmp    edx,0x3fffffff
    6500491e:	jle    0x65004925
    65004920:	mov    rbx,r13
    65004923:	jmp    0x65004982
    65004925:	movsxd rax,edx
    65004928:	add    rax,rax
    6500492b:	lea    rcx,[rax+0xf]
    6500492f:	cmp    rcx,rax
    65004932:	ja     0x6500493e
    65004934:	movabs rcx,0xffffffffffffff0
    6500493e:	and    rcx,0xfffffffffffffff0
    65004942:	mov    rax,rcx
    65004945:	call   0x650330c0
    6500494a:	sub    rsp,rcx
    6500494d:	lea    rbx,[rsp+0x30]
    65004952:	test   rbx,rbx
    65004955:	je     0x6500497f
    65004957:	mov    WORD PTR [rbx],r13w
    6500495b:	mov    DWORD PTR [rsp+0x28],edx
    6500495f:	mov    QWORD PTR [rsp+0x20],rbx
    65004964:	or     r9d,0xffffffff
    65004968:	lea    r8,[rbp+0x18]
    6500496c:	xor    edx,edx
    6500496e:	mov    ecx,r12d
    65004971:	call   QWORD PTR [rip+0x2f6c1]        # 0x65034038
    65004977:	test   eax,eax
    65004979:	cmove  rbx,r13
    6500497d:	jmp    0x65004982
    6500497f:	mov    rbx,r13
    65004982:	lea    rcx,[rip+0x3d717]        # 0x650420a0
    65004989:	mov    rax,QWORD PTR [rip+0x3d710]        # 0x650420a0
    65004990:	call   QWORD PTR [rax+0x18]
    65004993:	add    rax,0x18
    65004997:	mov    QWORD PTR [rsi],rax
    6500499a:	test   rbx,rbx
    6500499d:	je     0x650049e7
    6500499f:	test   rbx,0xffffffffffff0000
    650049a6:	jne    0x650049d2
    650049a8:	movzx  edi,bx
    650049ab:	xor    edx,edx
    650049ad:	mov    ecx,edi
    650049af:	call   0x650026f0
    650049b4:	test   rax,rax
    650049b7:	je     0x650049cd
    650049b9:	mov    r8d,edi
    650049bc:	mov    rdx,rax
    650049bf:	mov    rcx,rsi
    650049c2:	call   0x65003e00
    650049c7:	nop
    650049c8:	mov    rax,rsi
    650049cb:	jmp    0x650049fc
    650049cd:	mov    rax,rsi
    650049d0:	jmp    0x650049fc
    650049d2:	xor    eax,eax
    650049d4:	or     rcx,0xffffffffffffffff
    650049d8:	mov    rdi,rbx
    650049db:	repnz scas ax,WORD PTR es:[rdi]
    650049de:	not    rcx
    650049e1:	sub    rcx,0x1
    650049e5:	jmp    0x650049ea
    650049e7:	mov    ecx,r13d
    650049ea:	mov    r8d,ecx
    650049ed:	mov    rdx,rbx
    650049f0:	mov    rcx,rsi
    650049f3:	call   0x65003f90
    650049f8:	nop
    650049f9:	mov    rax,rsi
    650049fc:	mov    rcx,QWORD PTR [rbp+0x28]
    65004a00:	xor    rcx,rbp
    65004a03:	call   0x6501e4e0
    65004a08:	mov    rbx,QWORD PTR [rbp+0x70]
    65004a0c:	lea    rsp,[rbp+0x30]
    65004a10:	pop    r13
    65004a12:	pop    r12
    65004a14:	pop    rdi
    65004a15:	pop    rsi
    65004a16:	pop    rbp
    65004a17:	ret    
    65004a18:	int3   
    65004a19:	int3   
    65004a1a:	int3   
    65004a1b:	int3   
    65004a1c:	int3   
    65004a1d:	int3   
    65004a1e:	int3   
    65004a1f:	int3   
    65004a20:	rex push rbp
    65004a22:	sub    rsp,0x20
    65004a26:	lea    rbp,[rdx+0x30]
    65004a2a:	mov    rcx,QWORD PTR [rbp+0x10]
    65004a2e:	call   0x65002100
    65004a33:	add    rsp,0x20
    65004a37:	pop    rbp
    65004a38:	ret    
    65004a39:	int3   
    65004a3a:	int3   
    65004a3b:	int3   
    65004a3c:	int3   
    65004a3d:	int3   
    65004a3e:	int3   
    65004a3f:	int3   
    65004a40:	mov    QWORD PTR [rsp+0x8],rcx
    65004a45:	push   rbx
    65004a46:	push   rbp
    65004a47:	push   rsi
    65004a48:	push   rdi
    65004a49:	push   r12
    65004a4b:	sub    rsp,0x50
    65004a4f:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
    65004a58:	mov    rsi,rdx
    65004a5b:	mov    rbx,rcx
    65004a5e:	mov    DWORD PTR [rsp+0x90],0x0
    65004a69:	lea    rcx,[rip+0x3d630]        # 0x650420a0
    65004a70:	mov    rax,QWORD PTR [rip+0x3d629]        # 0x650420a0
    65004a77:	call   QWORD PTR [rax+0x18]
    65004a7a:	add    rax,0x18
    65004a7e:	mov    QWORD PTR [rbx],rax
    65004a81:	mov    DWORD PTR [rsp+0x90],0x1
    65004a8c:	mov    rax,QWORD PTR [rsi]
    65004a8f:	sub    rax,0x18
    65004a93:	cmp    DWORD PTR [rax+0x10],0x1
    65004a97:	jle    0x65004aa4
    65004a99:	mov    edx,DWORD PTR [rax+0x8]
    65004a9c:	mov    rcx,rsi
    65004a9f:	call   0x65002130
    65004aa4:	mov    rsi,QWORD PTR [rsi]
    65004aa7:	movzx  eax,WORD PTR [rsi]
    65004aaa:	test   ax,ax
    65004aad:	je     0x65004ee1
    65004ab3:	cmp    ax,0x41
    65004ab7:	jb     0x65004b1a
    65004ab9:	cmp    ax,0x5a
    65004abd:	ja     0x65004b1a
    65004abf:	movzx  r12d,BYTE PTR [rsi]
    65004ac3:	mov    rax,QWORD PTR [rbx]
    65004ac6:	mov    ebp,DWORD PTR [rax-0x10]
    65004ac9:	lea    edi,[rbp+0x1]
    65004acc:	mov    ecx,0x1
    65004ad1:	sub    ecx,DWORD PTR [rax-0x8]
    65004ad4:	mov    eax,DWORD PTR [rax-0xc]
    65004ad7:	sub    eax,edi
    65004ad9:	or     eax,ecx
    65004adb:	jge    0x65004ae7
    65004add:	mov    edx,edi
    65004adf:	mov    rcx,rbx
    65004ae2:	call   0x65002640
    65004ae7:	mov    rdx,QWORD PTR [rbx]
    65004aea:	movsx  ecx,r12b
    65004aee:	mov    WORD PTR [rdx+rbp*2],cx
    65004af2:	test   edi,edi
    65004af4:	js     0x65004eaa
    65004afa:	mov    rax,QWORD PTR [rbx]
    65004afd:	cmp    edi,DWORD PTR [rax-0xc]
    65004b00:	jg     0x65004eaa
    65004b06:	mov    DWORD PTR [rax-0x10],edi
    65004b09:	movsxd rcx,edi
    65004b0c:	mov    rax,QWORD PTR [rbx]
    65004b0f:	mov    WORD PTR [rax+rcx*2],0x0
    65004b15:	jmp    0x65004e99
    65004b1a:	cmp    ax,0x61
    65004b1e:	jb     0x65004b81
    65004b20:	cmp    ax,0x7a
    65004b24:	ja     0x65004b81
    65004b26:	movzx  r12d,BYTE PTR [rsi]
    65004b2a:	mov    rax,QWORD PTR [rbx]
    65004b2d:	mov    ebp,DWORD PTR [rax-0x10]
    65004b30:	lea    edi,[rbp+0x1]
    65004b33:	mov    ecx,0x1
    65004b38:	sub    ecx,DWORD PTR [rax-0x8]
    65004b3b:	mov    eax,DWORD PTR [rax-0xc]
    65004b3e:	sub    eax,edi
    65004b40:	or     eax,ecx
    65004b42:	jge    0x65004b4e
    65004b44:	mov    edx,edi
    65004b46:	mov    rcx,rbx
    65004b49:	call   0x65002640
    65004b4e:	mov    rdx,QWORD PTR [rbx]
    65004b51:	movsx  ecx,r12b
    65004b55:	mov    WORD PTR [rdx+rbp*2],cx
    65004b59:	test   edi,edi
    65004b5b:	js     0x65004eb5
    65004b61:	mov    rax,QWORD PTR [rbx]
    65004b64:	cmp    edi,DWORD PTR [rax-0xc]
    65004b67:	jg     0x65004eb5
    65004b6d:	mov    DWORD PTR [rax-0x10],edi
    65004b70:	movsxd rcx,edi
    65004b73:	mov    rax,QWORD PTR [rbx]
    65004b76:	mov    WORD PTR [rax+rcx*2],0x0
    65004b7c:	jmp    0x65004e99
    65004b81:	cmp    ax,0x30
    65004b85:	jb     0x65004be8
    65004b87:	cmp    ax,0x39
    65004b8b:	ja     0x65004be8
    65004b8d:	movzx  r12d,BYTE PTR [rsi]
    65004b91:	mov    rax,QWORD PTR [rbx]
    65004b94:	mov    ebp,DWORD PTR [rax-0x10]
    65004b97:	lea    edi,[rbp+0x1]
    65004b9a:	mov    ecx,0x1
    65004b9f:	sub    ecx,DWORD PTR [rax-0x8]
    65004ba2:	mov    eax,DWORD PTR [rax-0xc]
    65004ba5:	sub    eax,edi
    65004ba7:	or     eax,ecx
    65004ba9:	jge    0x65004bb5
    65004bab:	mov    edx,edi
    65004bad:	mov    rcx,rbx
    65004bb0:	call   0x65002640
    65004bb5:	mov    rdx,QWORD PTR [rbx]
    65004bb8:	movsx  ecx,r12b
    65004bbc:	mov    WORD PTR [rdx+rbp*2],cx
    65004bc0:	test   edi,edi
    65004bc2:	js     0x65004ec0
    65004bc8:	mov    rax,QWORD PTR [rbx]
    65004bcb:	cmp    edi,DWORD PTR [rax-0xc]
    65004bce:	jg     0x65004ec0
    65004bd4:	mov    DWORD PTR [rax-0x10],edi
    65004bd7:	movsxd rcx,edi
    65004bda:	mov    rax,QWORD PTR [rbx]
    65004bdd:	mov    WORD PTR [rax+rcx*2],0x0
    65004be3:	jmp    0x65004e99
    65004be8:	cmp    ax,0x20
    65004bec:	jne    0x65004c43
    65004bee:	mov    rax,QWORD PTR [rbx]
    65004bf1:	mov    ebp,DWORD PTR [rax-0x10]
    65004bf4:	lea    edi,[rbp+0x1]
    65004bf7:	mov    ecx,0x1
    65004bfc:	sub    ecx,DWORD PTR [rax-0x8]
    65004bff:	mov    eax,DWORD PTR [rax-0xc]
    65004c02:	sub    eax,edi
    65004c04:	or     eax,ecx
    65004c06:	jge    0x65004c12
    65004c08:	mov    edx,edi
    65004c0a:	mov    rcx,rbx
    65004c0d:	call   0x65002640
    65004c12:	mov    rcx,QWORD PTR [rbx]
    65004c15:	mov    WORD PTR [rcx+rbp*2],0x2b
    65004c1b:	test   edi,edi
    65004c1d:	js     0x65004ecb
    65004c23:	mov    rax,QWORD PTR [rbx]
    65004c26:	cmp    edi,DWORD PTR [rax-0xc]
    65004c29:	jg     0x65004ecb
    65004c2f:	mov    DWORD PTR [rax-0x10],edi
    65004c32:	movsxd rcx,edi
    65004c35:	mov    rax,QWORD PTR [rbx]
    65004c38:	mov    WORD PTR [rax+rcx*2],0x0
    65004c3e:	jmp    0x65004e99
    65004c43:	cmp    ax,0x2d
    65004c47:	je     0x65004e4b
    65004c4d:	cmp    ax,0x5f
    65004c51:	je     0x65004e4b
    65004c57:	cmp    ax,0x2e
    65004c5b:	je     0x65004e4b
    65004c61:	cmp    ax,0x21
    65004c65:	je     0x65004e4b
    65004c6b:	cmp    ax,0x7e
    65004c6f:	je     0x65004e4b
    65004c75:	cmp    ax,0x2a
    65004c79:	je     0x65004e4b
    65004c7f:	cmp    ax,0x27
    65004c83:	je     0x65004e4b
    65004c89:	cmp    ax,0x28
    65004c8d:	je     0x65004e4b
    65004c93:	cmp    ax,0x29
    65004c97:	je     0x65004e4b
    65004c9d:	cmp    ax,0x7f
    65004ca1:	ja     0x65004ced
    65004ca3:	movzx  edx,BYTE PTR [rsi]
    65004ca6:	lea    rcx,[rsp+0x98]
    65004cae:	call   0x650048a0
    65004cb3:	nop
    65004cb4:	mov    rdx,rax
    65004cb7:	mov    rcx,rbx
    65004cba:	call   0x650039f0
    65004cbf:	nop
    65004cc0:	mov    rdx,QWORD PTR [rsp+0x98]
    65004cc8:	add    rdx,0xffffffffffffffe8
    65004ccc:	or     eax,0xffffffff
    65004ccf:	lock xadd DWORD PTR [rdx+0x10],eax
    65004cd4:	add    eax,0xffffffff
    65004cd7:	test   eax,eax
    65004cd9:	jg     0x65004e99
    65004cdf:	mov    rcx,QWORD PTR [rdx]
    65004ce2:	mov    rax,QWORD PTR [rcx]
    65004ce5:	call   QWORD PTR [rax+0x8]
    65004ce8:	jmp    0x65004e99
    65004ced:	cmp    ax,0x7ff
    65004cf1:	ja     0x65004d82
    65004cf7:	shr    ax,0x6
    65004cfb:	or     al,0xc0
    65004cfd:	movzx  edx,al
    65004d00:	lea    rcx,[rsp+0x20]
    65004d05:	call   0x650048a0
    65004d0a:	nop
    65004d0b:	mov    rdx,rax
    65004d0e:	mov    rcx,rbx
    65004d11:	call   0x650039f0
    65004d16:	nop
    65004d17:	mov    rdx,QWORD PTR [rsp+0x20]
    65004d1c:	add    rdx,0xffffffffffffffe8
    65004d20:	or     eax,0xffffffff
    65004d23:	lock xadd DWORD PTR [rdx+0x10],eax
    65004d28:	add    eax,0xffffffff
    65004d2b:	test   eax,eax
    65004d2d:	jg     0x65004d38
    65004d2f:	mov    rcx,QWORD PTR [rdx]
    65004d32:	mov    rax,QWORD PTR [rcx]
    65004d35:	call   QWORD PTR [rax+0x8]
    65004d38:	movzx  edx,BYTE PTR [rsi]
    65004d3b:	and    dl,0x3f
    65004d3e:	or     dl,0x80
    65004d41:	lea    rcx,[rsp+0x28]
    65004d46:	call   0x650048a0
    65004d4b:	nop
    65004d4c:	mov    rdx,rax
    65004d4f:	mov    rcx,rbx
    65004d52:	call   0x650039f0
    65004d57:	nop
    65004d58:	mov    rdx,QWORD PTR [rsp+0x28]
    65004d5d:	add    rdx,0xffffffffffffffe8
    65004d61:	or     eax,0xffffffff
    65004d64:	lock xadd DWORD PTR [rdx+0x10],eax
    65004d69:	add    eax,0xffffffff
    65004d6c:	test   eax,eax
    65004d6e:	jg     0x65004e99
    65004d74:	mov    rcx,QWORD PTR [rdx]
    65004d77:	mov    rax,QWORD PTR [rcx]
    65004d7a:	call   QWORD PTR [rax+0x8]
    65004d7d:	jmp    0x65004e99
    65004d82:	shr    ax,0xc
    65004d86:	or     al,0xe0
    65004d88:	movzx  edx,al
    65004d8b:	lea    rcx,[rsp+0x30]
    65004d90:	call   0x650048a0
    65004d95:	nop
    65004d96:	mov    rdx,rax
    65004d99:	mov    rcx,rbx
    65004d9c:	call   0x650039f0
    65004da1:	nop
    65004da2:	mov    rdx,QWORD PTR [rsp+0x30]
    65004da7:	add    rdx,0xffffffffffffffe8
    65004dab:	or     eax,0xffffffff
    65004dae:	lock xadd DWORD PTR [rdx+0x10],eax
    65004db3:	add    eax,0xffffffff
    65004db6:	test   eax,eax
    65004db8:	jg     0x65004dc3
    65004dba:	mov    rcx,QWORD PTR [rdx]
    65004dbd:	mov    rax,QWORD PTR [rcx]
    65004dc0:	call   QWORD PTR [rax+0x8]
    65004dc3:	movzx  edx,WORD PTR [rsi]
    65004dc6:	shr    dx,0x6
    65004dca:	and    dl,0x3f
    65004dcd:	or     dl,0x80
    65004dd0:	lea    rcx,[rsp+0x38]
    65004dd5:	call   0x650048a0
    65004dda:	nop
    65004ddb:	mov    rdx,rax
    65004dde:	mov    rcx,rbx
    65004de1:	call   0x650039f0
    65004de6:	nop
    65004de7:	mov    rdx,QWORD PTR [rsp+0x38]
    65004dec:	add    rdx,0xffffffffffffffe8
    65004df0:	or     eax,0xffffffff
    65004df3:	lock xadd DWORD PTR [rdx+0x10],eax
    65004df8:	add    eax,0xffffffff
    65004dfb:	test   eax,eax
    65004dfd:	jg     0x65004e08
    65004dff:	mov    rcx,QWORD PTR [rdx]
    65004e02:	mov    rax,QWORD PTR [rcx]
    65004e05:	call   QWORD PTR [rax+0x8]
    65004e08:	movzx  edx,BYTE PTR [rsi]
    65004e0b:	and    dl,0x3f
    65004e0e:	or     dl,0x80
    65004e11:	lea    rcx,[rsp+0x40]
    65004e16:	call   0x650048a0
    65004e1b:	nop
    65004e1c:	mov    rdx,rax
    65004e1f:	mov    rcx,rbx
    65004e22:	call   0x650039f0
    65004e27:	nop
    65004e28:	mov    rdx,QWORD PTR [rsp+0x40]
    65004e2d:	add    rdx,0xffffffffffffffe8
    65004e31:	or     eax,0xffffffff
    65004e34:	lock xadd DWORD PTR [rdx+0x10],eax
    65004e39:	add    eax,0xffffffff
    65004e3c:	test   eax,eax
    65004e3e:	jg     0x65004e99
    65004e40:	mov    rcx,QWORD PTR [rdx]
    65004e43:	mov    rax,QWORD PTR [rcx]
    65004e46:	call   QWORD PTR [rax+0x8]
    65004e49:	jmp    0x65004e99
    65004e4b:	movzx  r12d,BYTE PTR [rsi]
    65004e4f:	mov    rax,QWORD PTR [rbx]
    65004e52:	mov    ebp,DWORD PTR [rax-0x10]
    65004e55:	lea    edi,[rbp+0x1]
    65004e58:	mov    ecx,0x1
    65004e5d:	sub    ecx,DWORD PTR [rax-0x8]
    65004e60:	mov    eax,DWORD PTR [rax-0xc]
    65004e63:	sub    eax,edi
    65004e65:	or     eax,ecx
    65004e67:	jge    0x65004e73
    65004e69:	mov    edx,edi
    65004e6b:	mov    rcx,rbx
    65004e6e:	call   0x65002640
    65004e73:	mov    rdx,QWORD PTR [rbx]
    65004e76:	movsx  ecx,r12b
    65004e7a:	mov    WORD PTR [rdx+rbp*2],cx
    65004e7e:	test   edi,edi
    65004e80:	js     0x65004ed6
    65004e82:	mov    rax,QWORD PTR [rbx]
    65004e85:	cmp    edi,DWORD PTR [rax-0xc]
    65004e88:	jg     0x65004ed6
    65004e8a:	mov    DWORD PTR [rax-0x10],edi
    65004e8d:	movsxd rcx,edi
    65004e90:	mov    rax,QWORD PTR [rbx]
    65004e93:	mov    WORD PTR [rax+rcx*2],0x0
    65004e99:	add    rsi,0x2
    65004e9d:	mov    ax,WORD PTR [rsi]
    65004ea0:	test   ax,ax
    65004ea3:	je     0x65004ee1
    65004ea5:	jmp    0x65004ab3
    65004eaa:	mov    ecx,0x80070057
    65004eaf:	call   0x65001050
    65004eb4:	int3   
    65004eb5:	mov    ecx,0x80070057
    65004eba:	call   0x65001050
    65004ebf:	int3   
    65004ec0:	mov    ecx,0x80070057
    65004ec5:	call   0x65001050
    65004eca:	int3   
    65004ecb:	mov    ecx,0x80070057
    65004ed0:	call   0x65001050
    65004ed5:	int3   
    65004ed6:	mov    ecx,0x80070057
    65004edb:	call   0x65001050
    65004ee0:	int3   
    65004ee1:	mov    rax,rbx
    65004ee4:	add    rsp,0x50
    65004ee8:	pop    r12
    65004eea:	pop    rdi
    65004eeb:	pop    rsi
    65004eec:	pop    rbp
    65004eed:	pop    rbx
    65004eee:	ret    
    65004eef:	int3   
    65004ef0:	rex push rbp
    65004ef2:	sub    rsp,0x20
    65004ef6:	mov    rbp,rdx
    65004ef9:	mov    eax,DWORD PTR [rbp+0x90]
    65004eff:	and    eax,0x1
    65004f02:	test   eax,eax
    65004f04:	je     0x65004f19
    65004f06:	and    DWORD PTR [rbp+0x90],0xfffffffe
    65004f0d:	mov    rcx,QWORD PTR [rbp+0x80]
    65004f14:	call   0x65001cb0
    65004f19:	add    rsp,0x20
    65004f1d:	pop    rbp
    65004f1e:	ret    
    65004f1f:	int3   
    65004f20:	rex push rbp
    65004f22:	sub    rsp,0x20
    65004f26:	mov    rbp,rdx
    65004f29:	lea    rcx,[rbp+0x98]
    65004f30:	call   0x65001cb0
    65004f35:	add    rsp,0x20
    65004f39:	pop    rbp
    65004f3a:	ret    
    65004f3b:	int3   
    65004f3c:	int3   
    65004f3d:	int3   
    65004f3e:	int3   
    65004f3f:	int3   
    65004f40:	rex push rbp
    65004f42:	sub    rsp,0x20
    65004f46:	mov    rbp,rdx
    65004f49:	lea    rcx,[rbp+0x20]
    65004f4d:	call   0x65001cb0
    65004f52:	add    rsp,0x20
    65004f56:	pop    rbp
    65004f57:	ret    
    65004f58:	int3   
    65004f59:	int3   
    65004f5a:	int3   
    65004f5b:	int3   
    65004f5c:	int3   
    65004f5d:	int3   
    65004f5e:	int3   
    65004f5f:	int3   
    65004f60:	rex push rbp
    65004f62:	sub    rsp,0x20
    65004f66:	mov    rbp,rdx
    65004f69:	lea    rcx,[rbp+0x28]
    65004f6d:	call   0x65001cb0
    65004f72:	add    rsp,0x20
    65004f76:	pop    rbp
    65004f77:	ret    
    65004f78:	int3   
    65004f79:	int3   
    65004f7a:	int3   
    65004f7b:	int3   
    65004f7c:	int3   
    65004f7d:	int3   
    65004f7e:	int3   
    65004f7f:	int3   
    65004f80:	rex push rbp
    65004f82:	sub    rsp,0x20
    65004f86:	mov    rbp,rdx
    65004f89:	lea    rcx,[rbp+0x30]
    65004f8d:	call   0x65001cb0
    65004f92:	add    rsp,0x20
    65004f96:	pop    rbp
    65004f97:	ret    
    65004f98:	int3   
    65004f99:	int3   
    65004f9a:	int3   
    65004f9b:	int3   
    65004f9c:	int3   
    65004f9d:	int3   
    65004f9e:	int3   
    65004f9f:	int3   
    65004fa0:	rex push rbp
    65004fa2:	sub    rsp,0x20
    65004fa6:	mov    rbp,rdx
    65004fa9:	lea    rcx,[rbp+0x38]
    65004fad:	call   0x65001cb0
    65004fb2:	add    rsp,0x20
    65004fb6:	pop    rbp
    65004fb7:	ret    
    65004fb8:	int3   
    65004fb9:	int3   
    65004fba:	int3   
    65004fbb:	int3   
    65004fbc:	int3   
    65004fbd:	int3   
    65004fbe:	int3   
    65004fbf:	int3   
    65004fc0:	rex push rbp
    65004fc2:	sub    rsp,0x20
    65004fc6:	mov    rbp,rdx
    65004fc9:	lea    rcx,[rbp+0x40]
    65004fcd:	call   0x65001cb0
    65004fd2:	add    rsp,0x20
    65004fd6:	pop    rbp
    65004fd7:	ret    
    65004fd8:	int3   
    65004fd9:	int3   
    65004fda:	int3   
    65004fdb:	int3   
    65004fdc:	int3   
    65004fdd:	int3   
    65004fde:	int3   
    65004fdf:	int3   
    65004fe0:	mov    rax,rsp
    65004fe3:	mov    QWORD PTR [rax+0x8],rcx
    65004fe7:	push   rsi
    65004fe8:	push   rdi
    65004fe9:	push   r12
    65004feb:	sub    rsp,0x100
    65004ff2:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
    65004ffb:	mov    QWORD PTR [rax+0x10],rbx
    65004fff:	mov    QWORD PTR [rax+0x20],rbp
    65005003:	movzx  edi,dl
    65005006:	mov    rbx,rcx
    65005009:	xor    esi,esi
    6500500b:	mov    DWORD PTR [rax+0x18],esi
    6500500e:	lea    rcx,[rip+0x3d08b]        # 0x650420a0
    65005015:	mov    rax,QWORD PTR [rip+0x3d084]        # 0x650420a0
    6500501c:	call   QWORD PTR [rax+0x18]
    6500501f:	add    rax,0x18
    65005023:	mov    QWORD PTR [rbx],rax
    65005026:	mov    ebp,0x1
    6500502b:	mov    DWORD PTR [rsp+0x130],ebp
    65005032:	test   dil,dil
    65005035:	je     0x65005210
    6500503b:	mov    ecx,ebp
    6500503d:	sub    ecx,DWORD PTR [rax-0x8]
    65005040:	mov    eax,DWORD PTR [rax-0xc]
    65005043:	sub    eax,0x800
    65005048:	or     eax,ecx
    6500504a:	jge    0x65005059
    6500504c:	mov    edx,0x800
    65005051:	mov    rcx,rbx
    65005054:	call   0x65002640
    65005059:	mov    rdi,QWORD PTR [rbx]
    6500505c:	xor    eax,eax
    6500505e:	lock cmpxchg DWORD PTR [rip+0x41d0a],ebp        # 0x65046d70
    65005066:	jne    0x650050cf
    65005068:	lea    r8,[rip+0x34499]        # 0x65039508
    6500506f:	mov    edx,0x18
    65005074:	lea    rcx,[rip+0x344b5]        # 0x65039530
    6500507b:	call   0x6500bc30
    65005080:	mov    r12,rax
    65005083:	lea    r8,[rip+0x344c6]        # 0x65039550
    6500508a:	mov    edx,0x8
    6500508f:	lea    rcx,[rip+0x3409a]        # 0x65039130
    65005096:	call   0x6500c5e0
    6500509b:	mov    rcx,rax
    6500509e:	call   QWORD PTR [rip+0x2ef84]        # 0x65034028
    650050a4:	add    DWORD PTR [rip+0x3e89e],ebp        # 0x65043948
    650050aa:	test   rax,rax
    650050ad:	je     0x650050c3
    650050af:	mov    rdx,r12
    650050b2:	mov    rcx,rax
    650050b5:	call   QWORD PTR [rip+0x2eff5]        # 0x650340b0
    650050bb:	add    DWORD PTR [rip+0x3e88b],ebp        # 0x6504394c
    650050c1:	jmp    0x650050c6
    650050c3:	mov    rax,rsi
    650050c6:	mov    QWORD PTR [rip+0x41ddb],rax        # 0x65046ea8
    650050cd:	jmp    0x650050d6
    650050cf:	mov    rax,QWORD PTR [rip+0x41dd2]        # 0x65046ea8
    650050d6:	mov    edx,0x800
    650050db:	mov    rcx,rdi
    650050de:	call   rax
    650050e0:	test   eax,eax
    650050e2:	jne    0x650053ee
    650050e8:	lea    r8,[rip+0x31f99]        # 0x65037088
    650050ef:	lea    edx,[rax+0x22]
    650050f2:	lea    rcx,[rip+0x31fc7]        # 0x650370c0
    650050f9:	call   0x6500bc30
    650050fe:	mov    rbx,rax
    65005101:	mov    edx,0xf
    65005106:	mov    QWORD PTR [rsp+0x68],rdx
    6500510b:	mov    r8,rsi
    6500510e:	mov    QWORD PTR [rsp+0x60],rsi
    65005113:	mov    BYTE PTR [rsp+0x50],r8b
    65005118:	xor    eax,eax
    6500511a:	or     rcx,0xffffffffffffffff
    6500511e:	mov    rdi,rbx
    65005121:	repnz scas al,BYTE PTR es:[rdi]
    65005123:	not    rcx
    65005126:	sub    rcx,rbp
    65005129:	mov    rdi,rcx
    6500512c:	cmp    rcx,0xfffffffffffffffe
    65005130:	jbe    0x65005141
    65005132:	call   0x6501cfe0
    65005137:	mov    rdx,QWORD PTR [rsp+0x68]
    6500513c:	mov    r8,QWORD PTR [rsp+0x60]
    65005141:	cmp    rdx,rdi
    65005144:	jae    0x6500515a
    65005146:	mov    rdx,rdi
    65005149:	lea    rcx,[rsp+0x48]
    6500514e:	call   0x65002330
    65005153:	mov    rdx,QWORD PTR [rsp+0x68]
    65005158:	jmp    0x65005178
    6500515a:	test   rdi,rdi
    6500515d:	jne    0x65005178
    6500515f:	mov    QWORD PTR [rsp+0x60],rsi
    65005164:	lea    rax,[rsp+0x50]
    65005169:	cmp    rdx,0x10
    6500516d:	cmovae rax,QWORD PTR [rsp+0x50]
    65005173:	mov    BYTE PTR [rax],dil
    65005176:	jmp    0x650051b1
    65005178:	test   rdi,rdi
    6500517b:	je     0x650051b1
    6500517d:	lea    rcx,[rsp+0x50]
    65005182:	cmp    rdx,0x10
    65005186:	cmovae rcx,QWORD PTR [rsp+0x50]
    6500518c:	mov    r9,rdi
    6500518f:	mov    r8,rbx
    65005192:	call   0x6501d640
    65005197:	mov    QWORD PTR [rsp+0x60],rdi
    6500519c:	lea    rax,[rsp+0x50]
    650051a1:	cmp    QWORD PTR [rsp+0x68],0x10
    650051a7:	cmovae rax,QWORD PTR [rsp+0x50]
    650051ad:	mov    BYTE PTR [rax+rdi*1],0x0
    650051b1:	lea    rcx,[rsp+0x78]
    650051b6:	call   0x6501d1a0
    650051bb:	nop
    650051bc:	lea    rax,[rip+0x31df5]        # 0x65036fb8
    650051c3:	mov    QWORD PTR [rsp+0x78],rax
    650051c8:	mov    QWORD PTR [rsp+0xb0],0xf
    650051d4:	mov    QWORD PTR [rsp+0xa8],rsi
    650051dc:	mov    BYTE PTR [rsp+0x98],0x0
    650051e4:	or     r9,0xffffffffffffffff
    650051e8:	xor    r8d,r8d
    650051eb:	lea    rdx,[rsp+0x48]
    650051f0:	lea    rcx,[rsp+0x90]
    650051f8:	call   0x65001e20
    650051fd:	nop
    650051fe:	lea    rdx,[rip+0x3bf9b]        # 0x650411a0
    65005205:	lea    rcx,[rsp+0x78]
    6500520a:	call   0x6501daf0
    6500520f:	nop
    65005210:	mov    ecx,ebp
    65005212:	sub    ecx,DWORD PTR [rax-0x8]
    65005215:	mov    eax,DWORD PTR [rax-0xc]
    65005218:	sub    eax,0x800
    6500521d:	or     eax,ecx
    6500521f:	jge    0x6500522e
    65005221:	mov    edx,0x800
    65005226:	mov    rcx,rbx
    65005229:	call   0x65002640
    6500522e:	mov    rdi,QWORD PTR [rbx]
    65005231:	xor    eax,eax
    65005233:	lock cmpxchg DWORD PTR [rip+0x41b11],ebp        # 0x65046d4c
    6500523b:	jne    0x650052a4
    6500523d:	lea    r8,[rip+0x33e6c]        # 0x650390b0
    65005244:	mov    edx,0x13
    65005249:	lea    rcx,[rip+0x33ea0]        # 0x650390f0
    65005250:	call   0x6500bc30
    65005255:	mov    r12,rax
    65005258:	lea    r8,[rip+0x33ea9]        # 0x65039108
    6500525f:	mov    edx,0x8
    65005264:	lea    rcx,[rip+0x33ec5]        # 0x65039130
    6500526b:	call   0x6500c5e0
    65005270:	mov    rcx,rax
    65005273:	call   QWORD PTR [rip+0x2edaf]        # 0x65034028
    65005279:	add    DWORD PTR [rip+0x3e6c9],ebp        # 0x65043948
    6500527f:	test   rax,rax
    65005282:	je     0x65005298
    65005284:	mov    rdx,r12
    65005287:	mov    rcx,rax
    6500528a:	call   QWORD PTR [rip+0x2ee20]        # 0x650340b0
    65005290:	add    DWORD PTR [rip+0x3e6b6],ebp        # 0x6504394c
    65005296:	jmp    0x6500529b
    65005298:	mov    rax,rsi
    6500529b:	mov    QWORD PTR [rip+0x41bbe],rax        # 0x65046e60
    650052a2:	jmp    0x650052ab
    650052a4:	mov    rax,QWORD PTR [rip+0x41bb5]        # 0x65046e60
    650052ab:	mov    edx,0x800
    650052b0:	mov    rcx,rdi
    650052b3:	call   rax
    650052b5:	test   eax,eax
    650052b7:	jne    0x650053ee
    650052bd:	lea    r8,[rip+0x31e24]        # 0x650370e8
    650052c4:	lea    edx,[rax+0x1c]
    650052c7:	lea    rcx,[rip+0x31e52]        # 0x65037120
    650052ce:	call   0x6500bc30
    650052d3:	mov    rbx,rax
    650052d6:	mov    edx,0xf
    650052db:	mov    QWORD PTR [rsp+0x40],rdx
    650052e0:	mov    r8,rsi
    650052e3:	mov    QWORD PTR [rsp+0x38],rsi
    650052e8:	mov    BYTE PTR [rsp+0x28],r8b
    650052ed:	xor    eax,eax
    650052ef:	or     rcx,0xffffffffffffffff
    650052f3:	mov    rdi,rbx
    650052f6:	repnz scas al,BYTE PTR es:[rdi]
    650052f8:	not    rcx
    650052fb:	sub    rcx,rbp
    650052fe:	mov    rdi,rcx
    65005301:	cmp    rcx,0xfffffffffffffffe
    65005305:	jbe    0x65005316
    65005307:	call   0x6501cfe0
    6500530c:	mov    rdx,QWORD PTR [rsp+0x40]
    65005311:	mov    r8,QWORD PTR [rsp+0x38]
    65005316:	cmp    rdx,rdi
    65005319:	jae    0x6500532f
    6500531b:	mov    rdx,rdi
    6500531e:	lea    rcx,[rsp+0x20]
    65005323:	call   0x65002330
    65005328:	mov    rdx,QWORD PTR [rsp+0x40]
    6500532d:	jmp    0x6500534d
    6500532f:	test   rdi,rdi
    65005332:	jne    0x6500534d
    65005334:	mov    QWORD PTR [rsp+0x38],rsi
    65005339:	lea    rax,[rsp+0x28]
    6500533e:	cmp    rdx,0x10
    65005342:	cmovae rax,QWORD PTR [rsp+0x28]
    65005348:	mov    BYTE PTR [rax],dil
    6500534b:	jmp    0x65005386
    6500534d:	test   rdi,rdi
    65005350:	je     0x65005386
    65005352:	lea    rcx,[rsp+0x28]
    65005357:	cmp    rdx,0x10
    6500535b:	cmovae rcx,QWORD PTR [rsp+0x28]
    65005361:	mov    r9,rdi
    65005364:	mov    r8,rbx
    65005367:	call   0x6501d640
    6500536c:	mov    QWORD PTR [rsp+0x38],rdi
    65005371:	lea    rax,[rsp+0x28]
    65005376:	cmp    QWORD PTR [rsp+0x40],0x10
    6500537c:	cmovae rax,QWORD PTR [rsp+0x28]
    65005382:	mov    BYTE PTR [rax+rdi*1],0x0
    65005386:	lea    rcx,[rsp+0xb8]
    6500538e:	call   0x6501d1a0
    65005393:	nop
    65005394:	lea    rax,[rip+0x31c1d]        # 0x65036fb8
    6500539b:	mov    QWORD PTR [rsp+0xb8],rax
    650053a3:	mov    QWORD PTR [rsp+0xf0],0xf
    650053af:	mov    QWORD PTR [rsp+0xe8],rsi
    650053b7:	mov    BYTE PTR [rsp+0xd8],0x0
    650053bf:	or     r9,0xffffffffffffffff
    650053c3:	xor    r8d,r8d
    650053c6:	lea    rdx,[rsp+0x20]
    650053cb:	lea    rcx,[rsp+0xd0]
    650053d3:	call   0x65001e20
    650053d8:	nop
    650053d9:	lea    rdx,[rip+0x3bdc0]        # 0x650411a0
    650053e0:	lea    rcx,[rsp+0xb8]
    650053e8:	call   0x6501daf0
    650053ed:	nop
    650053ee:	mov    rdx,QWORD PTR [rbx]
    650053f1:	test   rdx,rdx
    650053f4:	je     0x65005412
    650053f6:	xor    eax,eax
    650053f8:	or     rcx,0xffffffffffffffff
    650053fc:	mov    rdi,rdx
    650053ff:	repnz scas ax,WORD PTR es:[rdi]
    65005402:	not    rcx
    65005405:	sub    rcx,rbp
    65005408:	mov    esi,ecx
    6500540a:	test   ecx,ecx
    6500540c:	js     0x6500549e
    65005412:	cmp    esi,DWORD PTR [rdx-0xc]
    65005415:	jg     0x6500549e
    6500541b:	mov    DWORD PTR [rdx-0x10],esi
    6500541e:	movsxd rcx,esi
    65005421:	mov    rax,QWORD PTR [rbx]
    65005424:	mov    WORD PTR [rax+rcx*2],0x0
    6500542a:	mov    rcx,QWORD PTR [rbx]
    6500542d:	mov    esi,DWORD PTR [rcx-0x10]
    65005430:	lea    eax,[rsi-0x1]
    65005433:	test   eax,eax
    65005435:	js     0x65005493
    65005437:	cmp    eax,esi
    65005439:	jg     0x65005493
    6500543b:	cdqe   
    6500543d:	cmp    WORD PTR [rcx+rax*2],0x5c
    65005442:	je     0x6500548e
    65005444:	lea    edi,[rsi+0x1]
    65005447:	sub    ebp,DWORD PTR [rcx-0x8]
    6500544a:	mov    eax,DWORD PTR [rcx-0xc]
    6500544d:	sub    eax,edi
    6500544f:	or     eax,ebp
    65005451:	jge    0x6500545d
    65005453:	mov    edx,edi
    65005455:	mov    rcx,rbx
    65005458:	call   0x65002640
    6500545d:	mov    rcx,QWORD PTR [rbx]
    65005460:	mov    WORD PTR [rcx+rsi*2],0x5c
    65005466:	test   edi,edi
    65005468:	js     0x65005483
    6500546a:	mov    rax,QWORD PTR [rbx]
    6500546d:	cmp    edi,DWORD PTR [rax-0xc]
    65005470:	jg     0x65005483
    65005472:	mov    DWORD PTR [rax-0x10],edi
    65005475:	movsxd rcx,edi
    65005478:	mov    rax,QWORD PTR [rbx]
    6500547b:	mov    WORD PTR [rax+rcx*2],0x0
    65005481:	jmp    0x6500548e
    65005483:	mov    ecx,0x80070057
    65005488:	call   0x65001050
    6500548d:	int3   
    6500548e:	mov    rax,rbx
    65005491:	jmp    0x650054a9
    65005493:	mov    ecx,0x80070057
    65005498:	call   0x65001050
    6500549d:	int3   
    6500549e:	mov    ecx,0x80070057
    650054a3:	call   0x65001050
    650054a8:	nop
    650054a9:	lea    r11,[rsp+0x100]
    650054b1:	mov    rbx,QWORD PTR [r11+0x28]
    650054b5:	mov    rbp,QWORD PTR [r11+0x38]
    650054b9:	mov    rsp,r11
    650054bc:	pop    r12
    650054be:	pop    rdi
    650054bf:	pop    rsi
    650054c0:	ret    
    650054c1:	int3   
    650054c2:	int3   
    650054c3:	int3   
    650054c4:	int3   
    650054c5:	int3   
    650054c6:	int3   
    650054c7:	int3   
    650054c8:	int3   
    650054c9:	int3   
    650054ca:	int3   
    650054cb:	int3   
    650054cc:	int3   
    650054cd:	int3   
    650054ce:	int3   
    650054cf:	int3   
    650054d0:	rex push rbp
    650054d2:	sub    rsp,0x20
    650054d6:	mov    rbp,rdx
    650054d9:	mov    eax,DWORD PTR [rbp+0x130]
    650054df:	and    eax,0x1
    650054e2:	test   eax,eax
    650054e4:	je     0x650054f9
    650054e6:	and    DWORD PTR [rbp+0x130],0xfffffffe
    650054ed:	mov    rcx,QWORD PTR [rbp+0x120]
    650054f4:	call   0x65001cb0
    650054f9:	add    rsp,0x20
    650054fd:	pop    rbp
    650054fe:	ret    
    650054ff:	int3   
    65005500:	rex push rbp
    65005502:	sub    rsp,0x20
    65005506:	mov    rbp,rdx
    65005509:	lea    rcx,[rbp+0x48]
    6500550d:	call   0x65001c70
    65005512:	add    rsp,0x20
    65005516:	pop    rbp
    65005517:	ret    
    65005518:	int3   
    65005519:	int3   
    6500551a:	int3   
    6500551b:	int3   
    6500551c:	int3   
    6500551d:	int3   
    6500551e:	int3   
    6500551f:	int3   
    65005520:	rex push rbp
    65005522:	sub    rsp,0x20
    65005526:	mov    rbp,rdx
    65005529:	lea    rcx,[rbp+0x78]
    6500552d:	call   0x6501d320
    65005532:	add    rsp,0x20
    65005536:	pop    rbp
    65005537:	ret    
    65005538:	int3   
    65005539:	int3   
    6500553a:	int3   
    6500553b:	int3   
    6500553c:	int3   
    6500553d:	int3   
    6500553e:	int3   
    6500553f:	int3   
    65005540:	rex push rbp
    65005542:	sub    rsp,0x20
    65005546:	mov    rbp,rdx
    65005549:	lea    rcx,[rbp+0x20]
    6500554d:	call   0x65001c70
    65005552:	add    rsp,0x20
    65005556:	pop    rbp
    65005557:	ret    
    65005558:	int3   
    65005559:	int3   
    6500555a:	int3   
    6500555b:	int3   
    6500555c:	int3   
    6500555d:	int3   
    6500555e:	int3   
    6500555f:	int3   
    65005560:	rex push rbp
    65005562:	sub    rsp,0x20
    65005566:	mov    rbp,rdx
    65005569:	lea    rcx,[rbp+0xb8]
    65005570:	call   0x6501d320
    65005575:	add    rsp,0x20
    65005579:	pop    rbp
    6500557a:	ret    
    6500557b:	int3   
    6500557c:	int3   
    6500557d:	int3   
    6500557e:	int3   
    6500557f:	int3   
    65005580:	mov    rax,rsp
    65005583:	mov    QWORD PTR [rax+0x8],rcx
    65005587:	push   rsi
    65005588:	push   rdi
    65005589:	push   r12
    6500558b:	sub    rsp,0x90
    65005592:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500559b:	mov    QWORD PTR [rax+0x18],rbx
    6500559f:	mov    QWORD PTR [rax+0x20],rbp
    650055a3:	mov    rbx,rcx
    650055a6:	xor    ebp,ebp
    650055a8:	mov    DWORD PTR [rax+0x10],ebp
    650055ab:	xor    edx,edx
    650055ad:	call   0x65004fe0
    650055b2:	mov    r12d,0x1
    650055b8:	mov    DWORD PTR [rsp+0xb8],r12d
    650055c0:	mov    rax,QWORD PTR [rbx]
    650055c3:	cmp    DWORD PTR [rax-0x8],r12d
    650055c7:	jle    0x650055d4
    650055c9:	mov    edx,DWORD PTR [rax-0x10]
    650055cc:	mov    rcx,rbx
    650055cf:	call   0x65002130
    650055d4:	mov    dx,0x5c
    650055d8:	mov    rcx,QWORD PTR [rbx]
    650055db:	call   0x6501f330
    650055e0:	mov    rsi,rax
    650055e3:	test   rax,rax
    650055e6:	jne    0x6500570e
    650055ec:	lea    r8,[rip+0x31b4d]        # 0x65037140
    650055f3:	lea    edx,[rax+0x18]
    650055f6:	lea    rcx,[rip+0x31b83]        # 0x65037180
    650055fd:	call   0x6500bc30
    65005602:	mov    rbx,rax
    65005605:	mov    edx,0xf
    6500560a:	mov    QWORD PTR [rsp+0x48],rdx
    6500560f:	mov    r8,rbp
    65005612:	mov    QWORD PTR [rsp+0x40],rbp
    65005617:	mov    BYTE PTR [rsp+0x30],r8b
    6500561c:	xor    eax,eax
    6500561e:	or     rcx,0xffffffffffffffff
    65005622:	mov    rdi,rbx
    65005625:	repnz scas al,BYTE PTR es:[rdi]
    65005627:	not    rcx
    6500562a:	sub    rcx,r12
    6500562d:	mov    rdi,rcx
    65005630:	cmp    rcx,0xfffffffffffffffe
    65005634:	jbe    0x65005645
    65005636:	call   0x6501cfe0
    6500563b:	mov    rdx,QWORD PTR [rsp+0x48]
    65005640:	mov    r8,QWORD PTR [rsp+0x40]
    65005645:	cmp    rdx,rdi
    65005648:	jae    0x6500565e
    6500564a:	mov    rdx,rdi
    6500564d:	lea    rcx,[rsp+0x28]
    65005652:	call   0x65002330
    65005657:	mov    rdx,QWORD PTR [rsp+0x48]
    6500565c:	jmp    0x6500567c
    6500565e:	test   rdi,rdi
    65005661:	jne    0x6500567c
    65005663:	mov    QWORD PTR [rsp+0x40],rbp
    65005668:	lea    rax,[rsp+0x30]
    6500566d:	cmp    rdx,0x10
    65005671:	cmovae rax,QWORD PTR [rsp+0x30]
    65005677:	mov    BYTE PTR [rax],dil
    6500567a:	jmp    0x650056b5
    6500567c:	test   rdi,rdi
    6500567f:	je     0x650056b5
    65005681:	lea    rcx,[rsp+0x30]
    65005686:	cmp    rdx,0x10
    6500568a:	cmovae rcx,QWORD PTR [rsp+0x30]
    65005690:	mov    r9,rdi
    65005693:	mov    r8,rbx
    65005696:	call   0x6501d640
    6500569b:	mov    QWORD PTR [rsp+0x40],rdi
    650056a0:	lea    rax,[rsp+0x30]
    650056a5:	cmp    QWORD PTR [rsp+0x48],0x10
    650056ab:	cmovae rax,QWORD PTR [rsp+0x30]
    650056b1:	mov    BYTE PTR [rax+rdi*1],0x0
    650056b5:	lea    rcx,[rsp+0x50]
    650056ba:	call   0x6501d1a0
    650056bf:	nop
    650056c0:	lea    rax,[rip+0x318f1]        # 0x65036fb8
    650056c7:	mov    QWORD PTR [rsp+0x50],rax
    650056cc:	mov    QWORD PTR [rsp+0x88],0xf
    650056d8:	mov    QWORD PTR [rsp+0x80],rbp
    650056e0:	mov    BYTE PTR [rsp+0x70],0x0
    650056e5:	or     r9,0xffffffffffffffff
    650056e9:	xor    r8d,r8d
    650056ec:	lea    rdx,[rsp+0x28]
    650056f1:	lea    rcx,[rsp+0x68]
    650056f6:	call   0x65001e20
    650056fb:	nop
    650056fc:	lea    rdx,[rip+0x3ba9d]        # 0x650411a0
    65005703:	lea    rcx,[rsp+0x50]
    65005708:	call   0x6501daf0
    6500570d:	nop
    6500570e:	mov    rax,QWORD PTR [rbx]
    65005711:	cmp    DWORD PTR [rax-0x8],r12d
    65005715:	jle    0x65005722
    65005717:	mov    edx,DWORD PTR [rax-0x10]
    6500571a:	mov    rcx,rbx
    6500571d:	call   0x65002130
    65005722:	mov    rdx,QWORD PTR [rbx]
    65005725:	sub    rsi,rdx
    65005728:	sar    rsi,1
    6500572b:	add    rsi,r12
    6500572e:	test   rdx,rdx
    65005731:	je     0x6500574b
    65005733:	xor    eax,eax
    65005735:	or     rcx,0xffffffffffffffff
    65005739:	mov    rdi,rdx
    6500573c:	repnz scas ax,WORD PTR es:[rdi]
    6500573f:	not    rcx
    65005742:	sub    rcx,r12
    65005745:	mov    ebp,ecx
    65005747:	test   ecx,ecx
    65005749:	js     0x650057a5
    6500574b:	cmp    ebp,DWORD PTR [rdx-0xc]
    6500574e:	jg     0x650057a5
    65005750:	mov    DWORD PTR [rdx-0x10],ebp
    65005753:	movsxd rcx,ebp
    65005756:	mov    rax,QWORD PTR [rbx]
    65005759:	mov    WORD PTR [rax+rcx*2],0x0
    6500575f:	mov    rax,QWORD PTR [rbx]
    65005762:	sub    r12d,DWORD PTR [rax-0x8]
    65005766:	mov    eax,DWORD PTR [rax-0xc]
    65005769:	sub    eax,esi
    6500576b:	or     eax,r12d
    6500576e:	jge    0x6500577a
    65005770:	mov    edx,esi
    65005772:	mov    rcx,rbx
    65005775:	call   0x65002640
    6500577a:	test   esi,esi
    6500577c:	js     0x6500579a
    6500577e:	mov    rax,QWORD PTR [rbx]
    65005781:	cmp    esi,DWORD PTR [rax-0xc]
    65005784:	jg     0x6500579a
    65005786:	mov    DWORD PTR [rax-0x10],esi
    65005789:	movsxd rcx,esi
    6500578c:	mov    rax,QWORD PTR [rbx]
    6500578f:	mov    WORD PTR [rax+rcx*2],0x0
    65005795:	mov    rax,rbx
    65005798:	jmp    0x650057b0
    6500579a:	mov    ecx,0x80070057
    6500579f:	call   0x65001050
    650057a4:	int3   
    650057a5:	mov    ecx,0x80070057
    650057aa:	call   0x65001050
    650057af:	nop
    650057b0:	lea    r11,[rsp+0x90]
    650057b8:	mov    rbx,QWORD PTR [r11+0x30]
    650057bc:	mov    rbp,QWORD PTR [r11+0x38]
    650057c0:	mov    rsp,r11
    650057c3:	pop    r12
    650057c5:	pop    rdi
    650057c6:	pop    rsi
    650057c7:	ret    
    650057c8:	int3   
    650057c9:	int3   
    650057ca:	int3   
    650057cb:	int3   
    650057cc:	int3   
    650057cd:	int3   
    650057ce:	int3   
    650057cf:	int3   
    650057d0:	rex push rbp
    650057d2:	sub    rsp,0x20
    650057d6:	mov    rbp,rdx
    650057d9:	mov    eax,DWORD PTR [rbp+0xb8]
    650057df:	and    eax,0x1
    650057e2:	test   eax,eax
    650057e4:	je     0x650057f9
    650057e6:	and    DWORD PTR [rbp+0xb8],0xfffffffe
    650057ed:	mov    rcx,QWORD PTR [rbp+0xb0]
    650057f4:	call   0x65001cb0
    650057f9:	add    rsp,0x20
    650057fd:	pop    rbp
    650057fe:	ret    
    650057ff:	int3   
    65005800:	rex push rbp
    65005802:	sub    rsp,0x20
    65005806:	mov    rbp,rdx
    65005809:	lea    rcx,[rbp+0x28]
    6500580d:	call   0x65001c70
    65005812:	add    rsp,0x20
    65005816:	pop    rbp
    65005817:	ret    
    65005818:	int3   
    65005819:	int3   
    6500581a:	int3   
    6500581b:	int3   
    6500581c:	int3   
    6500581d:	int3   
    6500581e:	int3   
    6500581f:	int3   
    65005820:	rex push rbp
    65005822:	sub    rsp,0x20
    65005826:	mov    rbp,rdx
    65005829:	lea    rcx,[rbp+0x50]
    6500582d:	call   0x6501d320
    65005832:	add    rsp,0x20
    65005836:	pop    rbp
    65005837:	ret    
    65005838:	int3   
    65005839:	int3   
    6500583a:	int3   
    6500583b:	int3   
    6500583c:	int3   
    6500583d:	int3   
    6500583e:	int3   
    6500583f:	int3   
    65005840:	rex push rbp
    65005842:	push   r12
    65005844:	push   r13
    65005846:	sub    rsp,0x1f0
    6500584d:	lea    rbp,[rsp+0x40]
    65005852:	mov    QWORD PTR [rbp+0x40],0xfffffffffffffffe
    6500585a:	mov    QWORD PTR [rbp+0x1d0],rbx
    65005861:	mov    QWORD PTR [rbp+0x1d8],rsi
    65005868:	mov    QWORD PTR [rbp+0x1e0],rdi
    6500586f:	mov    rax,QWORD PTR [rip+0x3c8aa]        # 0x65042120
    65005876:	xor    rax,rbp
    65005879:	mov    QWORD PTR [rbp+0x1a0],rax
    65005880:	call   QWORD PTR [rip+0x3c812]        # 0x65042098
    65005886:	mov    r12d,eax
    65005889:	lea    rcx,[rbp+0x8]
    6500588d:	call   0x65005580
    65005892:	nop
    65005893:	mov    rdi,QWORD PTR [rbp+0x8]
    65005897:	mov    ecx,0x1
    6500589c:	xor    eax,eax
    6500589e:	xor    r13d,r13d
    650058a1:	lock cmpxchg DWORD PTR [rip+0x414c3],ecx        # 0x65046d6c
    650058a9:	jne    0x65005911
    650058ab:	lea    r8,[rip+0x33bce]        # 0x65039480
    650058b2:	lea    edx,[rcx+0x14]
    650058b5:	lea    rcx,[rip+0x33bfc]        # 0x650394b8
    650058bc:	call   0x6500bc30
    650058c1:	mov    rbx,rax
    650058c4:	lea    r8,[rip+0x33c05]        # 0x650394d0
    650058cb:	lea    edx,[r13+0x8]
    650058cf:	lea    rcx,[rip+0x3385a]        # 0x65039130
    650058d6:	call   0x6500c5e0
    650058db:	mov    rcx,rax
    650058de:	call   QWORD PTR [rip+0x2e744]        # 0x65034028
    650058e4:	add    DWORD PTR [rip+0x3e05d],0x1        # 0x65043948
    650058eb:	test   rax,rax
    650058ee:	je     0x65005905
    650058f0:	mov    rdx,rbx
    650058f3:	mov    rcx,rax
    650058f6:	call   QWORD PTR [rip+0x2e7b4]        # 0x650340b0
    650058fc:	add    DWORD PTR [rip+0x3e049],0x1        # 0x6504394c
    65005903:	jmp    0x65005908
    65005905:	mov    rax,r13
    65005908:	mov    QWORD PTR [rip+0x41591],rax        # 0x65046ea0
    6500590f:	jmp    0x65005918
    65005911:	mov    rax,QWORD PTR [rip+0x41588]        # 0x65046ea0
    65005918:	mov    DWORD PTR [rsp+0x38],r13d
    6500591d:	mov    QWORD PTR [rsp+0x30],r13
    65005922:	lea    rcx,[rbp+0x38]
    65005926:	mov    QWORD PTR [rsp+0x28],rcx
    6500592b:	lea    rcx,[rbp+0x3c]
    6500592f:	mov    QWORD PTR [rsp+0x20],rcx
    65005934:	lea    r9,[rbp+0x0]
    65005938:	xor    r8d,r8d
    6500593b:	xor    edx,edx
    6500593d:	mov    rcx,rdi
    65005940:	call   rax
    65005942:	test   eax,eax
    65005944:	jne    0x65005b71
    6500594a:	call   QWORD PTR [rip+0x2e728]        # 0x65034078
    65005950:	mov    r8d,0xa
    65005956:	lea    rdx,[rbp+0x130]
    6500595d:	mov    ecx,eax
    6500595f:	call   0x6501f360
    65005964:	mov    rdi,QWORD PTR [rbp+0x8]
    65005968:	or     rbx,0xffffffffffffffff
    6500596c:	test   rdi,rdi
    6500596f:	jne    0x65005979
    65005971:	mov    rsi,r13
    65005974:	jmp    0x650059f9
    65005979:	mov    rcx,rdi
    6500597c:	call   QWORD PTR [rip+0x2e70e]        # 0x65034090
    65005982:	lea    edx,[rax+0x1]
    65005985:	cmp    edx,0x3fffffff
    6500598b:	jle    0x65005992
    6500598d:	mov    rsi,r13
    65005990:	jmp    0x650059f9
    65005992:	movsxd rax,edx
    65005995:	add    rax,rax
    65005998:	lea    rcx,[rax+0xf]
    6500599c:	cmp    rcx,rax
    6500599f:	ja     0x650059ab
    650059a1:	movabs rcx,0xffffffffffffff0
    650059ab:	and    rcx,0xfffffffffffffff0
    650059af:	mov    rax,rcx
    650059b2:	call   0x650330c0
    650059b7:	sub    rsp,rcx
    650059ba:	lea    rsi,[rsp+0x40]
    650059bf:	test   rsi,rsi
    650059c2:	je     0x650059f6
    650059c4:	mov    BYTE PTR [rsi],r13b
    650059c7:	lea    eax,[rdx+rdx*1]
    650059ca:	mov    QWORD PTR [rsp+0x38],r13
    650059cf:	mov    QWORD PTR [rsp+0x30],r13
    650059d4:	mov    DWORD PTR [rsp+0x28],eax
    650059d8:	mov    QWORD PTR [rsp+0x20],rsi
    650059dd:	mov    r9d,ebx
    650059e0:	mov    r8,rdi
    650059e3:	xor    edx,edx
    650059e5:	mov    ecx,r12d
    650059e8:	call   QWORD PTR [rip+0x2e652]        # 0x65034040
    650059ee:	test   eax,eax
    650059f0:	cmove  rsi,r13
    650059f4:	jmp    0x650059f9
    650059f6:	mov    rsi,r13
    650059f9:	lea    r8,[rip+0x317d8]        # 0x650371d8
    65005a00:	mov    edx,0x21
    65005a05:	lea    rcx,[rip+0x31804]        # 0x65037210
    65005a0c:	call   0x6500bc30
    65005a11:	mov    r12,rax
    65005a14:	mov    edx,0xf
    65005a19:	mov    QWORD PTR [rbp+0x30],rdx
    65005a1d:	mov    r8,r13
    65005a20:	mov    QWORD PTR [rbp+0x28],r13
    65005a24:	mov    BYTE PTR [rbp+0x18],r8b
    65005a28:	xor    eax,eax
    65005a2a:	mov    rcx,rbx
    65005a2d:	mov    rdi,r12
    65005a30:	repnz scas al,BYTE PTR es:[rdi]
    65005a32:	not    rcx
    65005a35:	sub    rcx,0x1
    65005a39:	mov    rdi,rcx
    65005a3c:	cmp    rcx,0xfffffffffffffffe
    65005a40:	jbe    0x65005a4f
    65005a42:	call   0x6501cfe0
    65005a47:	mov    rdx,QWORD PTR [rbp+0x30]
    65005a4b:	mov    r8,QWORD PTR [rbp+0x28]
    65005a4f:	cmp    rdx,rdi
    65005a52:	jae    0x65005a66
    65005a54:	mov    rdx,rdi
    65005a57:	lea    rcx,[rbp+0x10]
    65005a5b:	call   0x65002330
    65005a60:	mov    rdx,QWORD PTR [rbp+0x30]
    65005a64:	jmp    0x65005a81
    65005a66:	test   rdi,rdi
    65005a69:	jne    0x65005a81
    65005a6b:	mov    QWORD PTR [rbp+0x28],r13
    65005a6f:	lea    rax,[rbp+0x18]
    65005a73:	cmp    rdx,0x10
    65005a77:	cmovae rax,QWORD PTR [rbp+0x18]
    65005a7c:	mov    BYTE PTR [rax],r13b
    65005a7f:	jmp    0x65005ab4
    65005a81:	test   rdi,rdi
    65005a84:	je     0x65005ab4
    65005a86:	lea    rcx,[rbp+0x18]
    65005a8a:	cmp    rdx,0x10
    65005a8e:	cmovae rcx,QWORD PTR [rbp+0x18]
    65005a93:	mov    r9,rdi
    65005a96:	mov    r8,r12
    65005a99:	call   0x6501d640
    65005a9e:	mov    QWORD PTR [rbp+0x28],rdi
    65005aa2:	lea    rax,[rbp+0x18]
    65005aa6:	cmp    QWORD PTR [rbp+0x30],0x10
    65005aab:	cmovae rax,QWORD PTR [rbp+0x18]
    65005ab0:	mov    BYTE PTR [rax+rdi*1],r13b
    65005ab4:	mov    r8,rsi
    65005ab7:	lea    rdx,[rbp+0x10]
    65005abb:	lea    rcx,[rbp+0xd8]
    65005ac2:	call   0x65011370
    65005ac7:	mov    rdi,rax
    65005aca:	lea    r8,[rip+0x316cf]        # 0x650371a0
    65005ad1:	mov    edx,0x7
    65005ad6:	lea    rcx,[rip+0x316f3]        # 0x650371d0
    65005add:	call   0x6500bc30
    65005ae2:	mov    r8,rax
    65005ae5:	mov    rdx,rdi
    65005ae8:	lea    rcx,[rbp+0x88]
    65005aef:	call   0x65011370
    65005af4:	nop
    65005af5:	lea    r8,[rbp+0x130]
    65005afc:	mov    rdx,rax
    65005aff:	lea    rcx,[rbp+0x100]
    65005b06:	call   0x65011370
    65005b0b:	nop
    65005b0c:	lea    r8,[rip+0x31689]        # 0x6503719c
    65005b13:	mov    rdx,rax
    65005b16:	lea    rcx,[rbp+0xb0]
    65005b1d:	call   0x65011370
    65005b22:	mov    rdi,rax
    65005b25:	lea    rcx,[rbp+0x48]
    65005b29:	call   0x6501d1a0
    65005b2e:	nop
    65005b2f:	lea    rax,[rip+0x31482]        # 0x65036fb8
    65005b36:	mov    QWORD PTR [rbp+0x48],rax
    65005b3a:	mov    QWORD PTR [rbp+0x80],0xf
    65005b45:	mov    QWORD PTR [rbp+0x78],r13
    65005b49:	mov    BYTE PTR [rbp+0x68],0x0
    65005b4d:	mov    r9,rbx
    65005b50:	xor    r8d,r8d
    65005b53:	mov    rdx,rdi
    65005b56:	lea    rcx,[rbp+0x60]
    65005b5a:	call   0x65001e20
    65005b5f:	nop
    65005b60:	lea    rdx,[rip+0x3b639]        # 0x650411a0
    65005b67:	lea    rcx,[rbp+0x48]
    65005b6b:	call   0x6501daf0
    65005b70:	nop
    65005b71:	mov    edi,DWORD PTR [rbp+0x0]
    65005b74:	mov    rdx,QWORD PTR [rbp+0x8]
    65005b78:	add    rdx,0xffffffffffffffe8
    65005b7c:	or     rbx,0xffffffffffffffff
    65005b80:	lock xadd DWORD PTR [rdx+0x10],ebx
    65005b85:	add    ebx,0xffffffff
    65005b88:	test   ebx,ebx
    65005b8a:	jg     0x65005b95
    65005b8c:	mov    rcx,QWORD PTR [rdx]
    65005b8f:	mov    rax,QWORD PTR [rcx]
    65005b92:	call   QWORD PTR [rax+0x8]
    65005b95:	mov    eax,edi
    65005b97:	mov    rcx,QWORD PTR [rbp+0x1a0]
    65005b9e:	xor    rcx,rbp
    65005ba1:	call   0x6501e4e0
    65005ba6:	mov    rbx,QWORD PTR [rbp+0x1d0]
    65005bad:	mov    rsi,QWORD PTR [rbp+0x1d8]
    65005bb4:	mov    rdi,QWORD PTR [rbp+0x1e0]
    65005bbb:	lea    rsp,[rbp+0x1b0]
    65005bc2:	pop    r13
    65005bc4:	pop    r12
    65005bc6:	pop    rbp
    65005bc7:	ret    
    65005bc8:	int3   
    65005bc9:	int3   
    65005bca:	int3   
    65005bcb:	int3   
    65005bcc:	int3   
    65005bcd:	int3   
    65005bce:	int3   
    65005bcf:	int3   
    65005bd0:	rex push rbp
    65005bd2:	sub    rsp,0x20
    65005bd6:	lea    rbp,[rdx+0x40]
    65005bda:	lea    rcx,[rbp+0x8]
    65005bde:	call   0x65001cb0
    65005be3:	add    rsp,0x20
    65005be7:	pop    rbp
    65005be8:	ret    
    65005be9:	int3   
    65005bea:	int3   
    65005beb:	int3   
    65005bec:	int3   
    65005bed:	int3   
    65005bee:	int3   
    65005bef:	int3   
    65005bf0:	rex push rbp
    65005bf2:	sub    rsp,0x20
    65005bf6:	lea    rbp,[rdx+0x40]
    65005bfa:	lea    rcx,[rbp+0x10]
    65005bfe:	call   0x65001c70
    65005c03:	add    rsp,0x20
    65005c07:	pop    rbp
    65005c08:	ret    
    65005c09:	int3   
    65005c0a:	int3   
    65005c0b:	int3   
    65005c0c:	int3   
    65005c0d:	int3   
    65005c0e:	int3   
    65005c0f:	int3   
    65005c10:	rex push rbp
    65005c12:	sub    rsp,0x20
    65005c16:	lea    rbp,[rdx+0x40]
    65005c1a:	lea    rcx,[rbp+0xd8]
    65005c21:	call   0x65001c70
    65005c26:	add    rsp,0x20
    65005c2a:	pop    rbp
    65005c2b:	ret    
    65005c2c:	int3   
    65005c2d:	int3   
    65005c2e:	int3   
    65005c2f:	int3   
    65005c30:	rex push rbp
    65005c32:	sub    rsp,0x20
    65005c36:	lea    rbp,[rdx+0x40]
    65005c3a:	lea    rcx,[rbp+0x88]
    65005c41:	call   0x65001c70
    65005c46:	add    rsp,0x20
    65005c4a:	pop    rbp
    65005c4b:	ret    
    65005c4c:	int3   
    65005c4d:	int3   
    65005c4e:	int3   
    65005c4f:	int3   
    65005c50:	rex push rbp
    65005c52:	sub    rsp,0x20
    65005c56:	lea    rbp,[rdx+0x40]
    65005c5a:	lea    rcx,[rbp+0x100]
    65005c61:	call   0x65001c70
    65005c66:	add    rsp,0x20
    65005c6a:	pop    rbp
    65005c6b:	ret    
    65005c6c:	int3   
    65005c6d:	int3   
    65005c6e:	int3   
    65005c6f:	int3   
    65005c70:	rex push rbp
    65005c72:	sub    rsp,0x20
    65005c76:	lea    rbp,[rdx+0x40]
    65005c7a:	lea    rcx,[rbp+0xb0]
    65005c81:	call   0x65001c70
    65005c86:	add    rsp,0x20
    65005c8a:	pop    rbp
    65005c8b:	ret    
    65005c8c:	int3   
    65005c8d:	int3   
    65005c8e:	int3   
    65005c8f:	int3   
    65005c90:	rex push rbp
    65005c92:	sub    rsp,0x20
    65005c96:	lea    rbp,[rdx+0x40]
    65005c9a:	lea    rcx,[rbp+0x48]
    65005c9e:	call   0x6501d320
    65005ca3:	add    rsp,0x20
    65005ca7:	pop    rbp
    65005ca8:	ret    
    65005ca9:	int3   
    65005caa:	int3   
    65005cab:	int3   
    65005cac:	int3   
    65005cad:	int3   
    65005cae:	int3   
    65005caf:	int3   
    65005cb0:	mov    rax,rsp
    65005cb3:	push   rdi
    65005cb4:	push   r12
    65005cb6:	push   r13
    65005cb8:	push   r14
    65005cba:	push   r15
    65005cbc:	sub    rsp,0x890
    65005cc3:	mov    QWORD PTR [rsp+0x60],0xfffffffffffffffe
    65005ccc:	mov    QWORD PTR [rax+0x8],rbx
    65005cd0:	mov    QWORD PTR [rax+0x10],rbp
    65005cd4:	mov    QWORD PTR [rax+0x18],rsi
    65005cd8:	mov    rax,QWORD PTR [rip+0x3c441]        # 0x65042120
    65005cdf:	xor    rax,rsp
    65005ce2:	mov    QWORD PTR [rsp+0x880],rax
    65005cea:	mov    rsi,rcx
    65005ced:	xor    edi,edi
    65005cef:	mov    DWORD PTR [rsp+0x70],edi
    65005cf3:	xor    eax,eax
    65005cf5:	mov    DWORD PTR [rsp+0x74],eax
    65005cf9:	mov    DWORD PTR [rsp+0x78],eax
    65005cfd:	mov    DWORD PTR [rsp+0x7c],eax
    65005d01:	mov    QWORD PTR [rsp+0x48],rdi
    65005d06:	lea    r8,[rip+0x3152b]        # 0x65037238
    65005d0d:	lea    edx,[rdi+0x1f]
    65005d10:	lea    rcx,[rip+0x31559]        # 0x65037270
    65005d17:	call   0x6500c5e0
    65005d1c:	mov    QWORD PTR [rsp+0x40],rdi
    65005d21:	lea    rcx,[rsp+0x40]
    65005d26:	mov    QWORD PTR [rsp+0x20],rcx
    65005d2b:	mov    r9d,0x20019
    65005d31:	xor    r8d,r8d
    65005d34:	mov    rdx,rax
    65005d37:	mov    rcx,0xffffffff80000002
    65005d3e:	call   QWORD PTR [rip+0x2e2cc]        # 0x65034010
    65005d44:	test   eax,eax
    65005d46:	jne    0x65006044
    65005d4c:	mov    rdi,QWORD PTR [rsp+0x40]
    65005d51:	mov    QWORD PTR [rsp+0x48],rdi
    65005d56:	lea    r8,[rip+0x31553]        # 0x650372b0
    65005d5d:	lea    edx,[rax+0xb]
    65005d60:	lea    rcx,[rip+0x31571]        # 0x650372d8
    65005d67:	call   0x6500c5e0
    65005d6c:	mov    DWORD PTR [rsp+0x38],0x800
    65005d74:	lea    rcx,[rsp+0x38]
    65005d79:	mov    QWORD PTR [rsp+0x28],rcx
    65005d7e:	lea    rcx,[rsp+0x80]
    65005d86:	mov    QWORD PTR [rsp+0x20],rcx
    65005d8b:	lea    r9,[rsp+0x3c]
    65005d90:	xor    r8d,r8d
    65005d93:	mov    rdx,rax
    65005d96:	mov    rcx,rdi
    65005d99:	call   QWORD PTR [rip+0x2e269]        # 0x65034008
    65005d9f:	test   eax,eax
    65005da1:	jne    0x6500600b
    65005da7:	mov    eax,DWORD PTR [rsp+0x3c]
    65005dab:	cmp    eax,0x1
    65005dae:	je     0x65005db9
    65005db0:	cmp    eax,0x2
    65005db3:	jne    0x6500600b
    65005db9:	mov    eax,DWORD PTR [rsp+0x38]
    65005dbd:	test   eax,eax
    65005dbf:	je     0x65005dd9
    65005dc1:	test   al,0x1
    65005dc3:	jne    0x6500600b
    65005dc9:	shr    rax,1
    65005dcc:	cmp    WORD PTR [rsp+rax*2+0x7e],0x0
    65005dd2:	je     0x65005de3
    65005dd4:	jmp    0x6500600b
    65005dd9:	mov    WORD PTR [rsp+0x80],0x0
    65005de3:	lea    rcx,[rip+0x3c2b6]        # 0x650420a0
    65005dea:	mov    rax,QWORD PTR [rip+0x3c2af]        # 0x650420a0
    65005df1:	call   QWORD PTR [rax+0x18]
    65005df4:	lea    rbx,[rax+0x18]
    65005df8:	mov    QWORD PTR [rsp+0x30],rbx
    65005dfd:	lea    rdx,[rip+0x314ec]        # 0x650372f0
    65005e04:	or     rbp,0xffffffffffffffff
    65005e08:	test   rdx,0xffffffffffff0000
    65005e0f:	jne    0x65005e39
    65005e11:	movzx  edi,dx
    65005e14:	xor    edx,edx
    65005e16:	mov    ecx,edi
    65005e18:	call   0x650026f0
    65005e1d:	test   rax,rax
    65005e20:	je     0x65005e5a
    65005e22:	mov    r8d,edi
    65005e25:	mov    rdx,rax
    65005e28:	lea    rcx,[rsp+0x30]
    65005e2d:	call   0x65003e00
    65005e32:	mov    rbx,QWORD PTR [rsp+0x30]
    65005e37:	jmp    0x65005e5a
    65005e39:	xor    eax,eax
    65005e3b:	mov    rcx,rbp
    65005e3e:	mov    rdi,rdx
    65005e41:	repnz scas ax,WORD PTR es:[rdi]
    65005e44:	not    rcx
    65005e47:	lea    r8d,[rcx-0x1]
    65005e4b:	lea    rcx,[rsp+0x30]
    65005e50:	call   0x65003f90
    65005e55:	mov    rbx,QWORD PTR [rsp+0x30]
    65005e5a:	xor    eax,eax
    65005e5c:	mov    rcx,rbp
    65005e5f:	lea    rdi,[rsp+0x80]
    65005e67:	repnz scas ax,WORD PTR es:[rdi]
    65005e6a:	not    rcx
    65005e6d:	lea    r15,[rcx-0x1]
    65005e71:	lea    r13,[rsp+0x80]
    65005e79:	lea    rdi,[rsp+0x80]
    65005e81:	sub    rdi,rbx
    65005e84:	sar    rdi,1
    65005e87:	mov    r14d,DWORD PTR [rbx-0x10]
    65005e8b:	lea    r12d,[r14+rcx*1-0x1]
    65005e90:	mov    edx,0x1
    65005e95:	sub    edx,DWORD PTR [rbx-0x8]
    65005e98:	mov    eax,DWORD PTR [rbx-0xc]
    65005e9b:	sub    eax,r12d
    65005e9e:	or     eax,edx
    65005ea0:	jge    0x65005eb4
    65005ea2:	mov    edx,r12d
    65005ea5:	lea    rcx,[rsp+0x30]
    65005eaa:	call   0x65002640
    65005eaf:	mov    rbx,QWORD PTR [rsp+0x30]
    65005eb4:	cmp    rdi,r14
    65005eb7:	ja     0x65005ebd
    65005eb9:	lea    r13,[rbx+rdi*2]
    65005ebd:	movsxd rdx,r15d
    65005ec0:	add    rdx,rdx
    65005ec3:	lea    rcx,[rbx+r14*2]
    65005ec7:	mov    r9,rdx
    65005eca:	mov    r8,r13
    65005ecd:	call   0x6501d640
    65005ed2:	test   r12d,r12d
    65005ed5:	js     0x65006000
    65005edb:	cmp    r12d,DWORD PTR [rbx-0xc]
    65005edf:	jg     0x65006000
    65005ee5:	mov    DWORD PTR [rbx-0x10],r12d
    65005ee9:	movsxd rax,r12d
    65005eec:	mov    WORD PTR [rbx+rax*2],0x0
    65005ef2:	xor    eax,eax
    65005ef4:	mov    rcx,rbp
    65005ef7:	lea    r13,[rip+0x313f6]        # 0x650372f4
    65005efe:	mov    rdi,r13
    65005f01:	repnz scas ax,WORD PTR es:[rdi]
    65005f04:	not    rcx
    65005f07:	lea    r15,[rcx-0x1]
    65005f0b:	mov    r12,r13
    65005f0e:	sub    r12,rbx
    65005f11:	sar    r12,1
    65005f14:	mov    r14d,DWORD PTR [rbx-0x10]
    65005f18:	lea    edi,[r14+rcx*1-0x1]
    65005f1d:	mov    ecx,0x1
    65005f22:	sub    ecx,DWORD PTR [rbx-0x8]
    65005f25:	mov    eax,DWORD PTR [rbx-0xc]
    65005f28:	sub    eax,edi
    65005f2a:	or     eax,ecx
    65005f2c:	jge    0x65005f3f
    65005f2e:	mov    edx,edi
    65005f30:	lea    rcx,[rsp+0x30]
    65005f35:	call   0x65002640
    65005f3a:	mov    rbx,QWORD PTR [rsp+0x30]
    65005f3f:	cmp    r12,r14
    65005f42:	ja     0x65005f48
    65005f44:	lea    r13,[rbx+r12*2]
    65005f48:	movsxd rdx,r15d
    65005f4b:	add    rdx,rdx
    65005f4e:	lea    rcx,[rbx+r14*2]
    65005f52:	mov    r9,rdx
    65005f55:	mov    r8,r13
    65005f58:	call   0x6501d640
    65005f5d:	test   edi,edi
    65005f5f:	js     0x65005ff5
    65005f65:	cmp    edi,DWORD PTR [rbx-0xc]
    65005f68:	jg     0x65005ff5
    65005f6e:	mov    DWORD PTR [rbx-0x10],edi
    65005f71:	movsxd rax,edi
    65005f74:	mov    WORD PTR [rbx+rax*2],0x0
    65005f7a:	cmp    DWORD PTR [rbx-0x8],0x1
    65005f7e:	jle    0x65005f92
    65005f80:	mov    edx,DWORD PTR [rbx-0x10]
    65005f83:	lea    rcx,[rsp+0x30]
    65005f88:	call   0x65002130
    65005f8d:	mov    rbx,QWORD PTR [rsp+0x30]
    65005f92:	lea    rdx,[rsp+0x70]
    65005f97:	mov    rcx,rbx
    65005f9a:	call   QWORD PTR [rip+0x2e420]        # 0x650343c0
    65005fa0:	movaps xmm5,XMMWORD PTR [rsp+0x70]
    65005fa5:	movdqa XMMWORD PTR [rsp+0x50],xmm5
    65005fab:	lea    rdx,[rbx-0x18]
    65005faf:	lock xadd DWORD PTR [rdx+0x10],ebp
    65005fb4:	add    ebp,0xffffffff
    65005fb7:	test   ebp,ebp
    65005fb9:	jg     0x65005fc5
    65005fbb:	mov    rcx,QWORD PTR [rdx]
    65005fbe:	mov    rax,QWORD PTR [rcx]
    65005fc1:	call   QWORD PTR [rax+0x8]
    65005fc4:	nop
    65005fc5:	mov    rcx,QWORD PTR [rsp+0x40]
    65005fca:	test   rcx,rcx
    65005fcd:	je     0x65005fd5
    65005fcf:	call   QWORD PTR [rip+0x2e043]        # 0x65034018
    65005fd5:	lea    rcx,[rsp+0x50]
    65005fda:	mov    eax,DWORD PTR [rcx]
    65005fdc:	mov    DWORD PTR [rsi],eax
    65005fde:	mov    eax,DWORD PTR [rcx+0x4]
    65005fe1:	mov    DWORD PTR [rsi+0x4],eax
    65005fe4:	mov    eax,DWORD PTR [rcx+0x8]
    65005fe7:	mov    DWORD PTR [rsi+0x8],eax
    65005fea:	mov    eax,DWORD PTR [rcx+0xc]
    65005fed:	mov    DWORD PTR [rsi+0xc],eax
    65005ff0:	mov    rax,rsi
    65005ff3:	jmp    0x65006062
    65005ff5:	mov    ecx,0x80070057
    65005ffa:	call   0x65001050
    65005fff:	int3   
    65006000:	mov    ecx,0x80070057
    65006005:	call   0x65001050
    6500600a:	nop
    6500600b:	movaps xmm0,XMMWORD PTR [rsp+0x70]
    65006010:	movdqa XMMWORD PTR [rsp+0x50],xmm0
    65006016:	test   rdi,rdi
    65006019:	je     0x65006024
    6500601b:	mov    rcx,rdi
    6500601e:	call   QWORD PTR [rip+0x2dff4]        # 0x65034018
    65006024:	lea    rcx,[rsp+0x50]
    65006029:	mov    eax,DWORD PTR [rcx]
    6500602b:	mov    DWORD PTR [rsi],eax
    6500602d:	mov    eax,DWORD PTR [rcx+0x4]
    65006030:	mov    DWORD PTR [rsi+0x4],eax
    65006033:	mov    eax,DWORD PTR [rcx+0x8]
    65006036:	mov    DWORD PTR [rsi+0x8],eax
    65006039:	mov    eax,DWORD PTR [rcx+0xc]
    6500603c:	mov    DWORD PTR [rsi+0xc],eax
    6500603f:	mov    rax,rsi
    65006042:	jmp    0x65006062
    65006044:	lea    rcx,[rsp+0x70]
    65006049:	mov    eax,DWORD PTR [rcx]
    6500604b:	mov    DWORD PTR [rsi],eax
    6500604d:	mov    eax,DWORD PTR [rcx+0x4]
    65006050:	mov    DWORD PTR [rsi+0x4],eax
    65006053:	mov    eax,DWORD PTR [rcx+0x8]
    65006056:	mov    DWORD PTR [rsi+0x8],eax
    65006059:	mov    eax,DWORD PTR [rcx+0xc]
    6500605c:	mov    DWORD PTR [rsi+0xc],eax
    6500605f:	mov    rax,rsi
    65006062:	mov    rcx,QWORD PTR [rsp+0x880]
    6500606a:	xor    rcx,rsp
    6500606d:	call   0x6501e4e0
    65006072:	lea    r11,[rsp+0x890]
    6500607a:	mov    rbx,QWORD PTR [r11+0x30]
    6500607e:	mov    rbp,QWORD PTR [r11+0x38]
    65006082:	mov    rsi,QWORD PTR [r11+0x40]
    65006086:	mov    rsp,r11
    65006089:	pop    r15
    6500608b:	pop    r14
    6500608d:	pop    r13
    6500608f:	pop    r12
    65006091:	pop    rdi
    65006092:	ret    
    65006093:	int3   
    65006094:	int3   
    65006095:	int3   
    65006096:	int3   
    65006097:	int3   
    65006098:	int3   
    65006099:	int3   
    6500609a:	int3   
    6500609b:	int3   
    6500609c:	int3   
    6500609d:	int3   
    6500609e:	int3   
    6500609f:	int3   
    650060a0:	rex push rbp
    650060a2:	sub    rsp,0x20
    650060a6:	mov    rbp,rdx
    650060a9:	lea    rcx,[rbp+0x48]
    650060ad:	call   0x65004160
    650060b2:	add    rsp,0x20
    650060b6:	pop    rbp
    650060b7:	ret    
    650060b8:	int3   
    650060b9:	int3   
    650060ba:	int3   
    650060bb:	int3   
    650060bc:	int3   
    650060bd:	int3   
    650060be:	int3   
    650060bf:	int3   
    650060c0:	rex push rbp
    650060c2:	sub    rsp,0x20
    650060c6:	mov    rbp,rdx
    650060c9:	lea    rcx,[rbp+0x30]
    650060cd:	call   0x65002100
    650060d2:	add    rsp,0x20
    650060d6:	pop    rbp
    650060d7:	ret    
    650060d8:	int3   
    650060d9:	int3   
    650060da:	int3   
    650060db:	int3   
    650060dc:	int3   
    650060dd:	int3   
    650060de:	int3   
    650060df:	int3   
    650060e0:	rex push rbp
    650060e2:	sub    rsp,0x20
    650060e6:	mov    rbp,rdx
    650060e9:	lea    rcx,[rbp+0x30]
    650060ed:	call   0x65001cb0
    650060f2:	add    rsp,0x20
    650060f6:	pop    rbp
    650060f7:	ret    
    650060f8:	int3   
    650060f9:	int3   
    650060fa:	int3   
    650060fb:	int3   
    650060fc:	int3   
    650060fd:	int3   
    650060fe:	int3   
    650060ff:	int3   
    65006100:	mov    rax,rsp
    65006103:	push   rsi
    65006104:	push   rdi
    65006105:	push   r12
    65006107:	sub    rsp,0x4b0
    6500610e:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
    65006117:	mov    QWORD PTR [rax+0x18],rbx
    6500611b:	mov    QWORD PTR [rax+0x20],rbp
    6500611f:	mov    rax,QWORD PTR [rip+0x3bffa]        # 0x65042120
    65006126:	xor    rax,rsp
    65006129:	mov    QWORD PTR [rsp+0x4a0],rax
    65006131:	mov    rsi,rdx
    65006134:	mov    rbp,rcx
    65006137:	xor    r12d,r12d
    6500613a:	mov    DWORD PTR [rsp+0x48],r12d
    6500613f:	mov    eax,DWORD PTR [rip+0x40dcb]        # 0x65046f10
    65006145:	test   al,0x1
    65006147:	jne    0x6500619d
    65006149:	or     eax,0x1
    6500614c:	mov    DWORD PTR [rip+0x40dbe],eax        # 0x65046f10
    65006152:	lea    rcx,[rip+0x40d9f]        # 0x65046ef8
    65006159:	call   0x6500ef70
    6500615e:	mov    QWORD PTR [rip+0x40d9b],rax        # 0x65046f00
    65006165:	mov    BYTE PTR [rax+0x41],0x1
    65006169:	mov    rax,QWORD PTR [rip+0x40d90]        # 0x65046f00
    65006170:	mov    QWORD PTR [rax+0x8],rax
    65006174:	mov    rax,QWORD PTR [rip+0x40d85]        # 0x65046f00
    6500617b:	mov    QWORD PTR [rax],rax
    6500617e:	mov    rax,QWORD PTR [rip+0x40d7b]        # 0x65046f00
    65006185:	mov    QWORD PTR [rax+0x10],rax
    65006189:	mov    QWORD PTR [rip+0x40d78],r12        # 0x65046f08
    65006190:	lea    rcx,[rip+0x2d0b9]        # 0x65033250
    65006197:	call   0x6501e680
    6500619c:	nop
    6500619d:	mov    rax,QWORD PTR [rsi+0x8]
    650061a1:	mov    rbx,QWORD PTR [rax]
    650061a4:	cmp    rbx,QWORD PTR [rsi+0x8]
    650061a8:	je     0x6500639b
    650061ae:	cmp    rbx,QWORD PTR [rsi+0x8]
    650061b2:	jne    0x650061b9
    650061b4:	call   0x6501d960
    650061b9:	cmp    QWORD PTR [rbx+0x38],0x10
    650061be:	jb     0x650061c6
    650061c0:	mov    rcx,QWORD PTR [rbx+0x20]
    650061c4:	jmp    0x650061ca
    650061c6:	lea    rcx,[rbx+0x20]
    650061ca:	lea    rdx,[rsp+0xa0]
    650061d2:	xchg   ax,ax
    650061d4:	data16 data16 xchg ax,ax
    650061d8:	data16 data16 xchg ax,ax
    650061dc:	data16 data16 xchg ax,ax
    650061e0:	movzx  eax,BYTE PTR [rcx]
    650061e3:	mov    BYTE PTR [rdx],al
    650061e5:	add    rcx,0x1
    650061e9:	add    rdx,0x1
    650061ed:	test   al,al
    650061ef:	jne    0x650061e0
    650061f1:	cmp    rbx,QWORD PTR [rsi+0x8]
    650061f5:	jne    0x650061fc
    650061f7:	call   0x6501d960
    650061fc:	mov    QWORD PTR [rsp+0x90],0xf
    65006208:	mov    QWORD PTR [rsp+0x88],r12
    65006210:	mov    BYTE PTR [rsp+0x78],0x0
    65006215:	or     r9,0xffffffffffffffff
    65006219:	xor    r8d,r8d
    6500621c:	lea    rdx,[rbx+0x18]
    65006220:	lea    rcx,[rsp+0x70]
    65006225:	call   0x65001e20
    6500622a:	nop
    6500622b:	lea    rcx,[rsp+0xa0]
    65006233:	call   0x6502edd0
    65006238:	mov    edx,0xf
    6500623d:	mov    QWORD PTR [rsp+0x40],rdx
    65006242:	mov    r8,r12
    65006245:	mov    QWORD PTR [rsp+0x38],r12
    6500624a:	mov    BYTE PTR [rsp+0x28],r8b
    6500624f:	xor    eax,eax
    65006251:	or     rcx,0xffffffffffffffff
    65006255:	lea    rdi,[rsp+0xa0]
    6500625d:	repnz scas al,BYTE PTR es:[rdi]
    6500625f:	not    rcx
    65006262:	sub    rcx,0x1
    65006266:	mov    rdi,rcx
    65006269:	cmp    rcx,0xfffffffffffffffe
    6500626d:	jbe    0x6500627e
    6500626f:	call   0x6501cfe0
    65006274:	mov    rdx,QWORD PTR [rsp+0x40]
    65006279:	mov    r8,QWORD PTR [rsp+0x38]
    6500627e:	cmp    rdx,rdi
    65006281:	jae    0x65006297
    65006283:	mov    rdx,rdi
    65006286:	lea    rcx,[rsp+0x20]
    6500628b:	call   0x65002330
    65006290:	mov    rdx,QWORD PTR [rsp+0x40]
    65006295:	jmp    0x650062b5
    65006297:	test   rdi,rdi
    6500629a:	jne    0x650062b5
    6500629c:	mov    QWORD PTR [rsp+0x38],r12
    650062a1:	lea    rax,[rsp+0x28]
    650062a6:	cmp    rdx,0x10
    650062aa:	cmovae rax,QWORD PTR [rsp+0x28]
    650062b0:	mov    BYTE PTR [rax],dil
    650062b3:	jmp    0x650062f3
    650062b5:	test   rdi,rdi
    650062b8:	je     0x650062f3
    650062ba:	lea    rcx,[rsp+0x28]
    650062bf:	cmp    rdx,0x10
    650062c3:	cmovae rcx,QWORD PTR [rsp+0x28]
    650062c9:	mov    r9,rdi
    650062cc:	lea    r8,[rsp+0xa0]
    650062d4:	call   0x6501d640
    650062d9:	mov    QWORD PTR [rsp+0x38],rdi
    650062de:	lea    rax,[rsp+0x28]
    650062e3:	cmp    QWORD PTR [rsp+0x40],0x10
    650062e9:	cmovae rax,QWORD PTR [rsp+0x28]
    650062ef:	mov    BYTE PTR [rax+rdi*1],0x0
    650062f3:	lea    r8,[rsp+0x20]
    650062f8:	lea    rdx,[rsp+0x58]
    650062fd:	lea    rcx,[rip+0x40bf4]        # 0x65046ef8
    65006304:	call   0x6500d050
    65006309:	nop
    6500630a:	cmp    QWORD PTR [rsp+0x40],0x10
    65006310:	jb     0x6500631d
    65006312:	mov    rcx,QWORD PTR [rsp+0x28]
    65006317:	call   0x6501d190
    6500631c:	nop
    6500631d:	cmp    QWORD PTR [rsp+0x90],0x10
    65006326:	jb     0x65006332
    65006328:	mov    rcx,QWORD PTR [rsp+0x78]
    6500632d:	call   0x6501d190
    65006332:	cmp    BYTE PTR [rbx+0x41],0x0
    65006336:	je     0x65006342
    65006338:	call   0x6501d960
    6500633d:	jmp    0x650061a4
    65006342:	mov    rax,QWORD PTR [rbx+0x10]
    65006346:	cmp    BYTE PTR [rax+0x41],0x0
    6500634a:	jne    0x65006371
    6500634c:	mov    rbx,rax
    6500634f:	mov    rax,QWORD PTR [rax]
    65006352:	cmp    BYTE PTR [rax+0x41],0x0
    65006356:	jne    0x650061a4
    6500635c:	data16 data16 xchg ax,ax
    65006360:	mov    rbx,rax
    65006363:	mov    rax,QWORD PTR [rax]
    65006366:	cmp    BYTE PTR [rax+0x41],0x0
    6500636a:	je     0x65006360
    6500636c:	jmp    0x650061a4
    65006371:	mov    rax,QWORD PTR [rbx+0x8]
    65006375:	cmp    BYTE PTR [rax+0x41],0x0
    65006379:	jne    0x65006393
    6500637b:	xchg   ax,ax
    6500637d:	data16 xchg ax,ax
    65006380:	cmp    rbx,QWORD PTR [rax+0x10]
    65006384:	jne    0x65006393
    65006386:	mov    rbx,rax
    65006389:	mov    rax,QWORD PTR [rax+0x8]
    6500638d:	cmp    BYTE PTR [rax+0x41],0x0
    65006391:	je     0x65006380
    65006393:	mov    rbx,rax
    65006396:	jmp    0x650061a4
    6500639b:	lea    rdx,[rip+0x40b56]        # 0x65046ef8
    650063a2:	mov    rcx,rbp
    650063a5:	call   0x6500ce40
    650063aa:	mov    rax,rbp
    650063ad:	mov    rcx,QWORD PTR [rsp+0x4a0]
    650063b5:	xor    rcx,rsp
    650063b8:	call   0x6501e4e0
    650063bd:	lea    r11,[rsp+0x4b0]
    650063c5:	mov    rbx,QWORD PTR [r11+0x30]
    650063c9:	mov    rbp,QWORD PTR [r11+0x38]
    650063cd:	mov    rsp,r11
    650063d0:	pop    r12
    650063d2:	pop    rdi
    650063d3:	pop    rsi
    650063d4:	ret    
    650063d5:	int3   
    650063d6:	int3   
    650063d7:	int3   
    650063d8:	int3   
    650063d9:	int3   
    650063da:	int3   
    650063db:	int3   
    650063dc:	int3   
    650063dd:	int3   
    650063de:	int3   
    650063df:	int3   
    650063e0:	rex push rbp
    650063e2:	mov    rbp,rdx
    650063e5:	mov    eax,DWORD PTR [rip+0x40b25]        # 0x65046f10
    650063eb:	and    eax,0xfffffffe
    650063ee:	mov    DWORD PTR [rip+0x40b1c],eax        # 0x65046f10
    650063f4:	pop    rbp
    650063f5:	ret    
    650063f6:	int3   
    650063f7:	int3   
    650063f8:	int3   
    650063f9:	int3   
    650063fa:	int3   
    650063fb:	int3   
    650063fc:	int3   
    650063fd:	int3   
    650063fe:	int3   
    650063ff:	int3   
    65006400:	rex push rbp
    65006402:	sub    rsp,0x20
    65006406:	mov    rbp,rdx
    65006409:	lea    rcx,[rbp+0x70]
    6500640d:	call   0x65001c70
    65006412:	add    rsp,0x20
    65006416:	pop    rbp
    65006417:	ret    
    65006418:	int3   
    65006419:	int3   
    6500641a:	int3   
    6500641b:	int3   
    6500641c:	int3   
    6500641d:	int3   
    6500641e:	int3   
    6500641f:	int3   
    65006420:	rex push rbp
    65006422:	sub    rsp,0x20
    65006426:	mov    rbp,rdx
    65006429:	lea    rcx,[rbp+0x20]
    6500642d:	call   0x65001c70
    65006432:	add    rsp,0x20
    65006436:	pop    rbp
    65006437:	ret    
    65006438:	int3   
    65006439:	int3   
    6500643a:	int3   
    6500643b:	int3   
    6500643c:	int3   
    6500643d:	int3   
    6500643e:	int3   
    6500643f:	int3   
    65006440:	mov    r11,rsp
    65006443:	push   rbx
    65006444:	sub    rsp,0x50
    65006448:	mov    rax,QWORD PTR [rcx+0x8]
    6500644c:	mov    QWORD PTR [r11-0x38],rcx
    65006450:	lea    r9,[r11-0x28]
    65006454:	mov    QWORD PTR [r11-0x30],rax
    65006458:	mov    rax,QWORD PTR [rax]
    6500645b:	lea    r8,[r11-0x38]
    6500645f:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65006464:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6500646a:	mov    QWORD PTR [r11-0x38],rcx
    6500646e:	mov    QWORD PTR [r11-0x30],rax
    65006472:	lea    rdx,[r11-0x18]
    65006476:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500647b:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    65006481:	mov    rbx,rcx
    65006484:	call   0x6500d770
    65006489:	mov    rcx,QWORD PTR [rbx+0x8]
    6500648d:	call   0x6501d190
    65006492:	xor    r11d,r11d
    65006495:	mov    QWORD PTR [rbx+0x8],r11
    65006499:	mov    QWORD PTR [rbx+0x10],r11
    6500649d:	add    rsp,0x50
    650064a1:	pop    rbx
    650064a2:	ret    
    650064a3:	int3   
    650064a4:	int3   
    650064a5:	int3   
    650064a6:	int3   
    650064a7:	int3   
    650064a8:	int3   
    650064a9:	int3   
    650064aa:	int3   
    650064ab:	int3   
    650064ac:	int3   
    650064ad:	int3   
    650064ae:	int3   
    650064af:	int3   
    650064b0:	rex push rbp
    650064b2:	push   r12
    650064b4:	push   r13
    650064b6:	sub    rsp,0xe90
    650064bd:	lea    rbp,[rsp+0x20]
    650064c2:	mov    QWORD PTR [rbp+0x6a0],0xfffffffffffffffe
    650064cd:	mov    QWORD PTR [rbp+0xe98],rbx
    650064d4:	mov    QWORD PTR [rbp+0xea0],rsi
    650064db:	mov    QWORD PTR [rbp+0xea8],rdi
    650064e2:	mov    rax,QWORD PTR [rip+0x3bc37]        # 0x65042120
    650064e9:	xor    rax,rbp
    650064ec:	mov    QWORD PTR [rbp+0xe60],rax
    650064f3:	mov    r12,rcx
    650064f6:	mov    QWORD PTR [rbp+0x670],rcx
    650064fd:	mov    eax,DWORD PTR [rip+0x40a4d]        # 0x65046f50
    65006503:	xor    r13d,r13d
    65006506:	test   al,0x1
    65006508:	jne    0x6500655e
    6500650a:	or     eax,0x1
    6500650d:	mov    DWORD PTR [rip+0x40a3d],eax        # 0x65046f50
    65006513:	lea    rcx,[rip+0x40a1e]        # 0x65046f38
    6500651a:	call   0x6500ef70
    6500651f:	mov    QWORD PTR [rip+0x40a1a],rax        # 0x65046f40
    65006526:	mov    BYTE PTR [rax+0x41],0x1
    6500652a:	mov    rax,QWORD PTR [rip+0x40a0f]        # 0x65046f40
    65006531:	mov    QWORD PTR [rax+0x8],rax
    65006535:	mov    rax,QWORD PTR [rip+0x40a04]        # 0x65046f40
    6500653c:	mov    QWORD PTR [rax],rax
    6500653f:	mov    rax,QWORD PTR [rip+0x409fa]        # 0x65046f40
    65006546:	mov    QWORD PTR [rax+0x10],rax
    6500654a:	mov    QWORD PTR [rip+0x409f7],r13        # 0x65046f48
    65006551:	lea    rcx,[rip+0x2cd78]        # 0x650332d0
    65006558:	call   0x6501e680
    6500655d:	nop
    6500655e:	or     rbx,0xffffffffffffffff
    65006562:	cmp    QWORD PTR [rip+0x409de],0x0        # 0x65046f48
    6500656a:	jne    0x65007ca5
    65006570:	lea    rcx,[rbp+0x0]
    65006574:	call   0x6500ef70
    65006579:	mov    QWORD PTR [rbp+0x8],rax
    6500657d:	mov    BYTE PTR [rax+0x41],0x1
    65006581:	mov    rax,QWORD PTR [rbp+0x8]
    65006585:	mov    QWORD PTR [rax+0x8],rax
    65006589:	mov    rax,QWORD PTR [rbp+0x8]
    6500658d:	mov    QWORD PTR [rax],rax
    65006590:	mov    rax,QWORD PTR [rbp+0x8]
    65006594:	mov    QWORD PTR [rax+0x10],rax
    65006598:	mov    QWORD PTR [rbp+0x10],r13
    6500659c:	lea    r8,[rip+0x30d55]        # 0x650372f8
    650065a3:	lea    edx,[rbx+0x4]
    650065a6:	lea    rcx,[rip+0x30d77]        # 0x65037324
    650065ad:	call   0x6500bc30
    650065b2:	mov    rsi,rax
    650065b5:	mov    edx,0xf
    650065ba:	mov    QWORD PTR [rbp+0x50],rdx
    650065be:	mov    r8,r13
    650065c1:	mov    QWORD PTR [rbp+0x48],r13
    650065c5:	mov    BYTE PTR [rbp+0x38],r8b
    650065c9:	xor    eax,eax
    650065cb:	mov    rcx,rbx
    650065ce:	mov    rdi,rsi
    650065d1:	repnz scas al,BYTE PTR es:[rdi]
    650065d3:	not    rcx
    650065d6:	sub    rcx,0x1
    650065da:	mov    rdi,rcx
    650065dd:	cmp    rcx,0xfffffffffffffffe
    650065e1:	jbe    0x650065f0
    650065e3:	call   0x6501cfe0
    650065e8:	mov    rdx,QWORD PTR [rbp+0x50]
    650065ec:	mov    r8,QWORD PTR [rbp+0x48]
    650065f0:	cmp    rdx,rdi
    650065f3:	jae    0x65006607
    650065f5:	mov    rdx,rdi
    650065f8:	lea    rcx,[rbp+0x30]
    650065fc:	call   0x65002330
    65006601:	mov    rdx,QWORD PTR [rbp+0x50]
    65006605:	jmp    0x65006622
    65006607:	test   rdi,rdi
    6500660a:	jne    0x65006622
    6500660c:	mov    QWORD PTR [rbp+0x48],r13
    65006610:	lea    rax,[rbp+0x38]
    65006614:	cmp    rdx,0x10
    65006618:	cmovae rax,QWORD PTR [rbp+0x38]
    6500661d:	mov    BYTE PTR [rax],dil
    65006620:	jmp    0x65006655
    65006622:	test   rdi,rdi
    65006625:	je     0x65006655
    65006627:	lea    rcx,[rbp+0x38]
    6500662b:	cmp    rdx,0x10
    6500662f:	cmovae rcx,QWORD PTR [rbp+0x38]
    65006634:	mov    r9,rdi
    65006637:	mov    r8,rsi
    6500663a:	call   0x6501d640
    6500663f:	mov    QWORD PTR [rbp+0x48],rdi
    65006643:	lea    rax,[rbp+0x38]
    65006647:	cmp    QWORD PTR [rbp+0x50],0x10
    6500664c:	cmovae rax,QWORD PTR [rbp+0x38]
    65006651:	mov    BYTE PTR [rdi+rax*1],0x0
    65006655:	lea    r8,[rbp+0x30]
    65006659:	lea    rdx,[rbp+0x908]
    65006660:	lea    rcx,[rbp+0x0]
    65006664:	call   0x6500d050
    65006669:	nop
    6500666a:	cmp    QWORD PTR [rbp+0x50],0x10
    6500666f:	jb     0x6500667a
    65006671:	mov    rcx,QWORD PTR [rbp+0x38]
    65006675:	call   0x6501d190
    6500667a:	lea    r8,[rip+0x30ca7]        # 0x65037328
    65006681:	mov    edx,0x8
    65006686:	lea    rcx,[rip+0x30cc3]        # 0x65037350
    6500668d:	call   0x6500bc30
    65006692:	mov    rsi,rax
    65006695:	mov    edx,0xf
    6500669a:	mov    QWORD PTR [rbp+0xa0],rdx
    650066a1:	mov    r8,r13
    650066a4:	mov    QWORD PTR [rbp+0x98],r13
    650066ab:	mov    BYTE PTR [rbp+0x88],r8b
    650066b2:	xor    eax,eax
    650066b4:	mov    rcx,rbx
    650066b7:	mov    rdi,rsi
    650066ba:	repnz scas al,BYTE PTR es:[rdi]
    650066bc:	not    rcx
    650066bf:	sub    rcx,0x1
    650066c3:	mov    rdi,rcx
    650066c6:	cmp    rcx,0xfffffffffffffffe
    650066ca:	jbe    0x650066df
    650066cc:	call   0x6501cfe0
    650066d1:	mov    rdx,QWORD PTR [rbp+0xa0]
    650066d8:	mov    r8,QWORD PTR [rbp+0x98]
    650066df:	cmp    rdx,rdi
    650066e2:	jae    0x650066fc
    650066e4:	mov    rdx,rdi
    650066e7:	lea    rcx,[rbp+0x80]
    650066ee:	call   0x65002330
    650066f3:	mov    rdx,QWORD PTR [rbp+0xa0]
    650066fa:	jmp    0x65006720
    650066fc:	test   rdi,rdi
    650066ff:	jne    0x65006720
    65006701:	mov    QWORD PTR [rbp+0x98],r13
    65006708:	lea    rax,[rbp+0x88]
    6500670f:	cmp    rdx,0x10
    65006713:	cmovae rax,QWORD PTR [rbp+0x88]
    6500671b:	mov    BYTE PTR [rax],dil
    6500671e:	jmp    0x65006765
    65006720:	test   rdi,rdi
    65006723:	je     0x65006765
    65006725:	lea    rcx,[rbp+0x88]
    6500672c:	cmp    rdx,0x10
    65006730:	cmovae rcx,QWORD PTR [rbp+0x88]
    65006738:	mov    r9,rdi
    6500673b:	mov    r8,rsi
    6500673e:	call   0x6501d640
    65006743:	mov    QWORD PTR [rbp+0x98],rdi
    6500674a:	lea    rax,[rbp+0x88]
    65006751:	cmp    QWORD PTR [rbp+0xa0],0x10
    65006759:	cmovae rax,QWORD PTR [rbp+0x88]
    65006761:	mov    BYTE PTR [rdi+rax*1],0x0
    65006765:	lea    r8,[rbp+0x80]
    6500676c:	lea    rdx,[rbp+0x9f8]
    65006773:	lea    rcx,[rbp+0x0]
    65006777:	call   0x6500d050
    6500677c:	nop
    6500677d:	cmp    QWORD PTR [rbp+0xa0],0x10
    65006785:	jb     0x65006793
    65006787:	mov    rcx,QWORD PTR [rbp+0x88]
    6500678e:	call   0x6501d190
    65006793:	lea    r8,[rip+0x30bc6]        # 0x65037360
    6500679a:	mov    edx,0x8
    6500679f:	lea    rcx,[rip+0x30be2]        # 0x65037388
    650067a6:	call   0x6500bc30
    650067ab:	mov    rsi,rax
    650067ae:	mov    edx,0xf
    650067b3:	mov    QWORD PTR [rbp+0x78],rdx
    650067b7:	mov    r8,r13
    650067ba:	mov    QWORD PTR [rbp+0x70],r13
    650067be:	mov    BYTE PTR [rbp+0x60],r8b
    650067c2:	xor    eax,eax
    650067c4:	mov    rcx,rbx
    650067c7:	mov    rdi,rsi
    650067ca:	repnz scas al,BYTE PTR es:[rdi]
    650067cc:	not    rcx
    650067cf:	sub    rcx,0x1
    650067d3:	mov    rdi,rcx
    650067d6:	cmp    rcx,0xfffffffffffffffe
    650067da:	jbe    0x650067e9
    650067dc:	call   0x6501cfe0
    650067e1:	mov    rdx,QWORD PTR [rbp+0x78]
    650067e5:	mov    r8,QWORD PTR [rbp+0x70]
    650067e9:	cmp    rdx,rdi
    650067ec:	jae    0x65006800
    650067ee:	mov    rdx,rdi
    650067f1:	lea    rcx,[rbp+0x58]
    650067f5:	call   0x65002330
    650067fa:	mov    rdx,QWORD PTR [rbp+0x78]
    650067fe:	jmp    0x6500681b
    65006800:	test   rdi,rdi
    65006803:	jne    0x6500681b
    65006805:	mov    QWORD PTR [rbp+0x70],r13
    65006809:	lea    rax,[rbp+0x60]
    6500680d:	cmp    rdx,0x10
    65006811:	cmovae rax,QWORD PTR [rbp+0x60]
    65006816:	mov    BYTE PTR [rax],dil
    65006819:	jmp    0x6500684e
    6500681b:	test   rdi,rdi
    6500681e:	je     0x6500684e
    65006820:	lea    rcx,[rbp+0x60]
    65006824:	cmp    rdx,0x10
    65006828:	cmovae rcx,QWORD PTR [rbp+0x60]
    6500682d:	mov    r9,rdi
    65006830:	mov    r8,rsi
    65006833:	call   0x6501d640
    65006838:	mov    QWORD PTR [rbp+0x70],rdi
    6500683c:	lea    rax,[rbp+0x60]
    65006840:	cmp    QWORD PTR [rbp+0x78],0x10
    65006845:	cmovae rax,QWORD PTR [rbp+0x60]
    6500684a:	mov    BYTE PTR [rdi+rax*1],0x0
    6500684e:	lea    r8,[rbp+0x58]
    65006852:	lea    rdx,[rbp+0xa28]
    65006859:	lea    rcx,[rbp+0x0]
    6500685d:	call   0x6500d050
    65006862:	nop
    65006863:	cmp    QWORD PTR [rbp+0x78],0x10
    65006868:	jb     0x65006873
    6500686a:	mov    rcx,QWORD PTR [rbp+0x60]
    6500686e:	call   0x6501d190
    65006873:	lea    r8,[rip+0x30b1e]        # 0x65037398
    6500687a:	mov    edx,0xa
    6500687f:	lea    rcx,[rip+0x30b4a]        # 0x650373d0
    65006886:	call   0x6500bc30
    6500688b:	mov    rsi,rax
    6500688e:	mov    edx,0xf
    65006893:	mov    QWORD PTR [rbp+0xc8],rdx
    6500689a:	mov    r8,r13
    6500689d:	mov    QWORD PTR [rbp+0xc0],r13
    650068a4:	mov    BYTE PTR [rbp+0xb0],r8b
    650068ab:	xor    eax,eax
    650068ad:	mov    rcx,rbx
    650068b0:	mov    rdi,rsi
    650068b3:	repnz scas al,BYTE PTR es:[rdi]
    650068b5:	not    rcx
    650068b8:	sub    rcx,0x1
    650068bc:	mov    rdi,rcx
    650068bf:	cmp    rcx,0xfffffffffffffffe
    650068c3:	jbe    0x650068d8
    650068c5:	call   0x6501cfe0
    650068ca:	mov    rdx,QWORD PTR [rbp+0xc8]
    650068d1:	mov    r8,QWORD PTR [rbp+0xc0]
    650068d8:	cmp    rdx,rdi
    650068db:	jae    0x650068f5
    650068dd:	mov    rdx,rdi
    650068e0:	lea    rcx,[rbp+0xa8]
    650068e7:	call   0x65002330
    650068ec:	mov    rdx,QWORD PTR [rbp+0xc8]
    650068f3:	jmp    0x65006919
    650068f5:	test   rdi,rdi
    650068f8:	jne    0x65006919
    650068fa:	mov    QWORD PTR [rbp+0xc0],r13
    65006901:	lea    rax,[rbp+0xb0]
    65006908:	cmp    rdx,0x10
    6500690c:	cmovae rax,QWORD PTR [rbp+0xb0]
    65006914:	mov    BYTE PTR [rax],dil
    65006917:	jmp    0x6500695e
    65006919:	test   rdi,rdi
    6500691c:	je     0x6500695e
    6500691e:	lea    rcx,[rbp+0xb0]
    65006925:	cmp    rdx,0x10
    65006929:	cmovae rcx,QWORD PTR [rbp+0xb0]
    65006931:	mov    r9,rdi
    65006934:	mov    r8,rsi
    65006937:	call   0x6501d640
    6500693c:	mov    QWORD PTR [rbp+0xc0],rdi
    65006943:	lea    rax,[rbp+0xb0]
    6500694a:	cmp    QWORD PTR [rbp+0xc8],0x10
    65006952:	cmovae rax,QWORD PTR [rbp+0xb0]
    6500695a:	mov    BYTE PTR [rax+rdi*1],0x0
    6500695e:	lea    r8,[rbp+0xa8]
    65006965:	lea    rdx,[rbp+0x980]
    6500696c:	lea    rcx,[rbp+0x0]
    65006970:	call   0x6500d050
    65006975:	nop
    65006976:	cmp    QWORD PTR [rbp+0xc8],0x10
    6500697e:	jb     0x6500698c
    65006980:	mov    rcx,QWORD PTR [rbp+0xb0]
    65006987:	call   0x6501d190
    6500698c:	lea    r8,[rip+0x30a4d]        # 0x650373e0
    65006993:	mov    edx,0x4
    65006998:	lea    rcx,[rip+0x30a81]        # 0x65037420
    6500699f:	call   0x6500bc30
    650069a4:	mov    rsi,rax
    650069a7:	mov    edx,0xf
    650069ac:	mov    QWORD PTR [rbp+0x118],rdx
    650069b3:	mov    r8,r13
    650069b6:	mov    QWORD PTR [rbp+0x110],r13
    650069bd:	mov    BYTE PTR [rbp+0x100],r8b
    650069c4:	xor    eax,eax
    650069c6:	mov    rcx,rbx
    650069c9:	mov    rdi,rsi
    650069cc:	repnz scas al,BYTE PTR es:[rdi]
    650069ce:	not    rcx
    650069d1:	sub    rcx,0x1
    650069d5:	mov    rdi,rcx
    650069d8:	cmp    rcx,0xfffffffffffffffe
    650069dc:	jbe    0x650069f1
    650069de:	call   0x6501cfe0
    650069e3:	mov    rdx,QWORD PTR [rbp+0x118]
    650069ea:	mov    r8,QWORD PTR [rbp+0x110]
    650069f1:	cmp    rdx,rdi
    650069f4:	jae    0x65006a0e
    650069f6:	mov    rdx,rdi
    650069f9:	lea    rcx,[rbp+0xf8]
    65006a00:	call   0x65002330
    65006a05:	mov    rdx,QWORD PTR [rbp+0x118]
    65006a0c:	jmp    0x65006a32
    65006a0e:	test   rdi,rdi
    65006a11:	jne    0x65006a32
    65006a13:	mov    QWORD PTR [rbp+0x110],r13
    65006a1a:	lea    rax,[rbp+0x100]
    65006a21:	cmp    rdx,0x10
    65006a25:	cmovae rax,QWORD PTR [rbp+0x100]
    65006a2d:	mov    BYTE PTR [rax],dil
    65006a30:	jmp    0x65006a77
    65006a32:	test   rdi,rdi
    65006a35:	je     0x65006a77
    65006a37:	lea    rcx,[rbp+0x100]
    65006a3e:	cmp    rdx,0x10
    65006a42:	cmovae rcx,QWORD PTR [rbp+0x100]
    65006a4a:	mov    r9,rdi
    65006a4d:	mov    r8,rsi
    65006a50:	call   0x6501d640
    65006a55:	mov    QWORD PTR [rbp+0x110],rdi
    65006a5c:	lea    rax,[rbp+0x100]
    65006a63:	cmp    QWORD PTR [rbp+0x118],0x10
    65006a6b:	cmovae rax,QWORD PTR [rbp+0x100]
    65006a73:	mov    BYTE PTR [rax+rdi*1],0x0
    65006a77:	lea    r8,[rbp+0xf8]
    65006a7e:	lea    rdx,[rbp+0x710]
    65006a85:	lea    rcx,[rbp+0x0]
    65006a89:	call   0x6500d050
    65006a8e:	nop
    65006a8f:	cmp    QWORD PTR [rbp+0x118],0x10
    65006a97:	jb     0x65006aa5
    65006a99:	mov    rcx,QWORD PTR [rbp+0x100]
    65006aa0:	call   0x6501d190
    65006aa5:	lea    r8,[rip+0x3097c]        # 0x65037428
    65006aac:	mov    edx,0x8
    65006ab1:	lea    rcx,[rip+0x309b0]        # 0x65037468
    65006ab8:	call   0x6500bc30
    65006abd:	mov    rsi,rax
    65006ac0:	mov    edx,0xf
    65006ac5:	mov    QWORD PTR [rbp+0xf0],rdx
    65006acc:	mov    r8,r13
    65006acf:	mov    QWORD PTR [rbp+0xe8],r13
    65006ad6:	mov    BYTE PTR [rbp+0xd8],r8b
    65006add:	xor    eax,eax
    65006adf:	mov    rcx,rbx
    65006ae2:	mov    rdi,rsi
    65006ae5:	repnz scas al,BYTE PTR es:[rdi]
    65006ae7:	not    rcx
    65006aea:	sub    rcx,0x1
    65006aee:	mov    rdi,rcx
    65006af1:	cmp    rcx,0xfffffffffffffffe
    65006af5:	jbe    0x65006b0a
    65006af7:	call   0x6501cfe0
    65006afc:	mov    rdx,QWORD PTR [rbp+0xf0]
    65006b03:	mov    r8,QWORD PTR [rbp+0xe8]
    65006b0a:	cmp    rdx,rdi
    65006b0d:	jae    0x65006b27
    65006b0f:	mov    rdx,rdi
    65006b12:	lea    rcx,[rbp+0xd0]
    65006b19:	call   0x65002330
    65006b1e:	mov    rdx,QWORD PTR [rbp+0xf0]
    65006b25:	jmp    0x65006b4b
    65006b27:	test   rdi,rdi
    65006b2a:	jne    0x65006b4b
    65006b2c:	mov    QWORD PTR [rbp+0xe8],r13
    65006b33:	lea    rax,[rbp+0xd8]
    65006b3a:	cmp    rdx,0x10
    65006b3e:	cmovae rax,QWORD PTR [rbp+0xd8]
    65006b46:	mov    BYTE PTR [rax],dil
    65006b49:	jmp    0x65006b90
    65006b4b:	test   rdi,rdi
    65006b4e:	je     0x65006b90
    65006b50:	lea    rcx,[rbp+0xd8]
    65006b57:	cmp    rdx,0x10
    65006b5b:	cmovae rcx,QWORD PTR [rbp+0xd8]
    65006b63:	mov    r9,rdi
    65006b66:	mov    r8,rsi
    65006b69:	call   0x6501d640
    65006b6e:	mov    QWORD PTR [rbp+0xe8],rdi
    65006b75:	lea    rax,[rbp+0xd8]
    65006b7c:	cmp    QWORD PTR [rbp+0xf0],0x10
    65006b84:	cmovae rax,QWORD PTR [rbp+0xd8]
    65006b8c:	mov    BYTE PTR [rdi+rax*1],0x0
    65006b90:	lea    r8,[rbp+0xd0]
    65006b97:	lea    rdx,[rbp+0x8c0]
    65006b9e:	lea    rcx,[rbp+0x0]
    65006ba2:	call   0x6500d050
    65006ba7:	nop
    65006ba8:	cmp    QWORD PTR [rbp+0xf0],0x10
    65006bb0:	jb     0x65006bbe
    65006bb2:	mov    rcx,QWORD PTR [rbp+0xd8]
    65006bb9:	call   0x6501d190
    65006bbe:	lea    r8,[rip+0x308b3]        # 0x65037478
    65006bc5:	mov    edx,0x5
    65006bca:	lea    rcx,[rip+0x308d7]        # 0x650374a8
    65006bd1:	call   0x6500bc30
    65006bd6:	mov    rdx,rax
    65006bd9:	mov    QWORD PTR [rbp+0x450],0xf
    65006be4:	mov    QWORD PTR [rbp+0x448],r13
    65006beb:	mov    BYTE PTR [rbp+0x438],0x0
    65006bf2:	xor    eax,eax
    65006bf4:	mov    rcx,rbx
    65006bf7:	mov    rdi,rdx
    65006bfa:	repnz scas al,BYTE PTR es:[rdi]
    65006bfc:	not    rcx
    65006bff:	lea    r8,[rcx-0x1]
    65006c03:	lea    rcx,[rbp+0x430]
    65006c0a:	call   0x65002000
    65006c0f:	nop
    65006c10:	lea    r8,[rbp+0x430]
    65006c17:	lea    rdx,[rbp+0x740]
    65006c1e:	lea    rcx,[rbp+0x0]
    65006c22:	call   0x6500d050
    65006c27:	nop
    65006c28:	cmp    QWORD PTR [rbp+0x450],0x10
    65006c30:	jb     0x65006c3e
    65006c32:	mov    rcx,QWORD PTR [rbp+0x438]
    65006c39:	call   0x6501d190
    65006c3e:	lea    r8,[rip+0x3086b]        # 0x650374b0
    65006c45:	mov    edx,0x8
    65006c4a:	lea    rcx,[rip+0x3088f]        # 0x650374e0
    65006c51:	call   0x6500bc30
    65006c56:	mov    rdx,rax
    65006c59:	mov    QWORD PTR [rbp+0x270],0xf
    65006c64:	mov    QWORD PTR [rbp+0x268],r13
    65006c6b:	mov    BYTE PTR [rbp+0x258],0x0
    65006c72:	xor    eax,eax
    65006c74:	mov    rcx,rbx
    65006c77:	mov    rdi,rdx
    65006c7a:	repnz scas al,BYTE PTR es:[rdi]
    65006c7c:	not    rcx
    65006c7f:	lea    r8,[rcx-0x1]
    65006c83:	lea    rcx,[rbp+0x250]
    65006c8a:	call   0x65002000
    65006c8f:	nop
    65006c90:	lea    r8,[rbp+0x250]
    65006c97:	lea    rdx,[rbp+0xa40]
    65006c9e:	lea    rcx,[rbp+0x0]
    65006ca2:	call   0x6500d050
    65006ca7:	nop
    65006ca8:	cmp    QWORD PTR [rbp+0x270],0x10
    65006cb0:	jb     0x65006cbe
    65006cb2:	mov    rcx,QWORD PTR [rbp+0x258]
    65006cb9:	call   0x6501d190
    65006cbe:	lea    r8,[rip+0x3082b]        # 0x650374f0
    65006cc5:	mov    edx,0xb
    65006cca:	lea    rcx,[rip+0x3085f]        # 0x65037530
    65006cd1:	call   0x6500bc30
    65006cd6:	mov    rdx,rax
    65006cd9:	mov    QWORD PTR [rbp+0x5e0],0xf
    65006ce4:	mov    QWORD PTR [rbp+0x5d8],r13
    65006ceb:	mov    BYTE PTR [rbp+0x5c8],0x0
    65006cf2:	xor    eax,eax
    65006cf4:	mov    rcx,rbx
    65006cf7:	mov    rdi,rdx
    65006cfa:	repnz scas al,BYTE PTR es:[rdi]
    65006cfc:	not    rcx
    65006cff:	lea    r8,[rcx-0x1]
    65006d03:	lea    rcx,[rbp+0x5c0]
    65006d0a:	call   0x65002000
    65006d0f:	nop
    65006d10:	lea    r8,[rbp+0x5c0]
    65006d17:	lea    rdx,[rbp+0x770]
    65006d1e:	lea    rcx,[rbp+0x0]
    65006d22:	call   0x6500d050
    65006d27:	nop
    65006d28:	cmp    QWORD PTR [rbp+0x5e0],0x10
    65006d30:	jb     0x65006d3e
    65006d32:	mov    rcx,QWORD PTR [rbp+0x5c8]
    65006d39:	call   0x6501d190
    65006d3e:	lea    r8,[rip+0x307fb]        # 0x65037540
    65006d45:	mov    edx,0x1e
    65006d4a:	lea    rcx,[rip+0x30817]        # 0x65037568
    65006d51:	call   0x6500bc30
    65006d56:	mov    rdx,rax
    65006d59:	mov    QWORD PTR [rbp+0x2c0],0xf
    65006d64:	mov    QWORD PTR [rbp+0x2b8],r13
    65006d6b:	mov    BYTE PTR [rbp+0x2a8],0x0
    65006d72:	xor    eax,eax
    65006d74:	mov    rcx,rbx
    65006d77:	mov    rdi,rdx
    65006d7a:	repnz scas al,BYTE PTR es:[rdi]
    65006d7c:	not    rcx
    65006d7f:	lea    r8,[rcx-0x1]
    65006d83:	lea    rcx,[rbp+0x2a0]
    65006d8a:	call   0x65002000
    65006d8f:	nop
    65006d90:	lea    r8,[rbp+0x2a0]
    65006d97:	lea    rdx,[rbp+0x8f0]
    65006d9e:	lea    rcx,[rbp+0x0]
    65006da2:	call   0x6500d050
    65006da7:	nop
    65006da8:	cmp    QWORD PTR [rbp+0x2c0],0x10
    65006db0:	jb     0x65006dbe
    65006db2:	mov    rcx,QWORD PTR [rbp+0x2a8]
    65006db9:	call   0x6501d190
    65006dbe:	lea    r8,[rip+0x307c3]        # 0x65037588
    65006dc5:	mov    edx,0x7
    65006dca:	lea    rcx,[rip+0x307f7]        # 0x650375c8
    65006dd1:	call   0x6500bc30
    65006dd6:	mov    rdx,rax
    65006dd9:	mov    QWORD PTR [rbp+0x4a0],0xf
    65006de4:	mov    QWORD PTR [rbp+0x498],r13
    65006deb:	mov    BYTE PTR [rbp+0x488],0x0
    65006df2:	xor    eax,eax
    65006df4:	mov    rcx,rbx
    65006df7:	mov    rdi,rdx
    65006dfa:	repnz scas al,BYTE PTR es:[rdi]
    65006dfc:	not    rcx
    65006dff:	lea    r8,[rcx-0x1]
    65006e03:	lea    rcx,[rbp+0x480]
    65006e0a:	call   0x65002000
    65006e0f:	nop
    65006e10:	lea    r8,[rbp+0x480]
    65006e17:	lea    rdx,[rbp+0x7a0]
    65006e1e:	lea    rcx,[rbp+0x0]
    65006e22:	call   0x6500d050
    65006e27:	nop
    65006e28:	cmp    QWORD PTR [rbp+0x4a0],0x10
    65006e30:	jb     0x65006e3e
    65006e32:	mov    rcx,QWORD PTR [rbp+0x488]
    65006e39:	call   0x6501d190
    65006e3e:	lea    r8,[rip+0x3078b]        # 0x650375d0
    65006e45:	mov    edx,0xc
    65006e4a:	lea    rcx,[rip+0x307b7]        # 0x65037608
    65006e51:	call   0x6500bc30
    65006e56:	mov    rdx,rax
    65006e59:	mov    QWORD PTR [rbp+0x310],0xf
    65006e64:	mov    QWORD PTR [rbp+0x308],r13
    65006e6b:	mov    BYTE PTR [rbp+0x2f8],0x0
    65006e72:	xor    eax,eax
    65006e74:	mov    rcx,rbx
    65006e77:	mov    rdi,rdx
    65006e7a:	repnz scas al,BYTE PTR es:[rdi]
    65006e7c:	not    rcx
    65006e7f:	lea    r8,[rcx-0x1]
    65006e83:	lea    rcx,[rbp+0x2f0]
    65006e8a:	call   0x65002000
    65006e8f:	nop
    65006e90:	lea    r8,[rbp+0x2f0]
    65006e97:	lea    rdx,[rbp+0x9b0]
    65006e9e:	lea    rcx,[rbp+0x0]
    65006ea2:	call   0x6500d050
    65006ea7:	nop
    65006ea8:	cmp    QWORD PTR [rbp+0x310],0x10
    65006eb0:	jb     0x65006ebe
    65006eb2:	mov    rcx,QWORD PTR [rbp+0x2f8]
    65006eb9:	call   0x6501d190
    65006ebe:	lea    r8,[rip+0x30753]        # 0x65037618
    65006ec5:	mov    edx,0x11
    65006eca:	lea    rcx,[rip+0x3077f]        # 0x65037650
    65006ed1:	call   0x6500bc30
    65006ed6:	mov    rdx,rax
    65006ed9:	mov    QWORD PTR [rbp+0x180],0xf
    65006ee4:	mov    QWORD PTR [rbp+0x178],r13
    65006eeb:	mov    BYTE PTR [rbp+0x168],0x0
    65006ef2:	xor    eax,eax
    65006ef4:	mov    rcx,rbx
    65006ef7:	mov    rdi,rdx
    65006efa:	repnz scas al,BYTE PTR es:[rdi]
    65006efc:	not    rcx
    65006eff:	lea    r8,[rcx-0x1]
    65006f03:	lea    rcx,[rbp+0x160]
    65006f0a:	call   0x65002000
    65006f0f:	nop
    65006f10:	lea    r8,[rbp+0x160]
    65006f17:	lea    rdx,[rbp+0x7d0]
    65006f1e:	lea    rcx,[rbp+0x0]
    65006f22:	call   0x6500d050
    65006f27:	nop
    65006f28:	cmp    QWORD PTR [rbp+0x180],0x10
    65006f30:	jb     0x65006f3e
    65006f32:	mov    rcx,QWORD PTR [rbp+0x168]
    65006f39:	call   0x6501d190
    65006f3e:	lea    r8,[rip+0x30723]        # 0x65037668
    65006f45:	mov    edx,0x7
    65006f4a:	lea    rcx,[rip+0x3074f]        # 0x650376a0
    65006f51:	call   0x6500bc30
    65006f56:	mov    rdx,rax
    65006f59:	mov    QWORD PTR [rbp+0x360],0xf
    65006f64:	mov    QWORD PTR [rbp+0x358],r13
    65006f6b:	mov    BYTE PTR [rbp+0x348],0x0
    65006f72:	xor    eax,eax
    65006f74:	mov    rcx,rbx
    65006f77:	mov    rdi,rdx
    65006f7a:	repnz scas al,BYTE PTR es:[rdi]
    65006f7c:	not    rcx
    65006f7f:	lea    r8,[rcx-0x1]
    65006f83:	lea    rcx,[rbp+0x340]
    65006f8a:	call   0x65002000
    65006f8f:	nop
    65006f90:	lea    r8,[rbp+0x340]
    65006f97:	lea    rdx,[rbp+0x920]
    65006f9e:	lea    rcx,[rbp+0x0]
    65006fa2:	call   0x6500d050
    65006fa7:	nop
    65006fa8:	cmp    QWORD PTR [rbp+0x360],0x10
    65006fb0:	jb     0x65006fbe
    65006fb2:	mov    rcx,QWORD PTR [rbp+0x348]
    65006fb9:	call   0x6501d190
    65006fbe:	lea    r8,[rip+0x306e3]        # 0x650376a8
    65006fc5:	mov    edx,0x6
    65006fca:	lea    rcx,[rip+0x30703]        # 0x650376d4
    65006fd1:	call   0x6500bc30
    65006fd6:	mov    rdx,rax
    65006fd9:	mov    QWORD PTR [rbp+0x4f0],0xf
    65006fe4:	mov    QWORD PTR [rbp+0x4e8],r13
    65006feb:	mov    BYTE PTR [rbp+0x4d8],0x0
    65006ff2:	xor    eax,eax
    65006ff4:	mov    rcx,rbx
    65006ff7:	mov    rdi,rdx
    65006ffa:	repnz scas al,BYTE PTR es:[rdi]
    65006ffc:	not    rcx
    65006fff:	lea    r8,[rcx-0x1]
    65007003:	lea    rcx,[rbp+0x4d0]
    6500700a:	call   0x65002000
    6500700f:	nop
    65007010:	lea    r8,[rbp+0x4d0]
    65007017:	lea    rdx,[rbp+0x800]
    6500701e:	lea    rcx,[rbp+0x0]
    65007022:	call   0x6500d050
    65007027:	nop
    65007028:	cmp    QWORD PTR [rbp+0x4f0],0x10
    65007030:	jb     0x6500703e
    65007032:	mov    rcx,QWORD PTR [rbp+0x4d8]
    65007039:	call   0x6501d190
    6500703e:	lea    r8,[rip+0x3069b]        # 0x650376e0
    65007045:	mov    edx,0x3
    6500704a:	lea    rcx,[rip+0x306cb]        # 0x6503771c
    65007051:	call   0x6500bc30
    65007056:	mov    rdx,rax
    65007059:	mov    QWORD PTR [rbp+0x3b0],0xf
    65007064:	mov    QWORD PTR [rbp+0x3a8],r13
    6500706b:	mov    BYTE PTR [rbp+0x398],0x0
    65007072:	xor    eax,eax
    65007074:	mov    rcx,rbx
    65007077:	mov    rdi,rdx
    6500707a:	repnz scas al,BYTE PTR es:[rdi]
    6500707c:	not    rcx
    6500707f:	lea    r8,[rcx-0x1]
    65007083:	lea    rcx,[rbp+0x390]
    6500708a:	call   0x65002000
    6500708f:	nop
    65007090:	lea    r8,[rbp+0x390]
    65007097:	lea    rdx,[rbp+0xa10]
    6500709e:	lea    rcx,[rbp+0x0]
    650070a2:	call   0x6500d050
    650070a7:	nop
    650070a8:	cmp    QWORD PTR [rbp+0x3b0],0x10
    650070b0:	jb     0x650070be
    650070b2:	mov    rcx,QWORD PTR [rbp+0x398]
    650070b9:	call   0x6501d190
    650070be:	lea    r8,[rip+0x3065b]        # 0x65037720
    650070c5:	mov    edx,0x8
    650070ca:	lea    rcx,[rip+0x30687]        # 0x65037758
    650070d1:	call   0x6500bc30
    650070d6:	mov    rdx,rax
    650070d9:	mov    QWORD PTR [rbp+0x630],0xf
    650070e4:	mov    QWORD PTR [rbp+0x628],r13
    650070eb:	mov    BYTE PTR [rbp+0x618],0x0
    650070f2:	xor    eax,eax
    650070f4:	mov    rcx,rbx
    650070f7:	mov    rdi,rdx
    650070fa:	repnz scas al,BYTE PTR es:[rdi]
    650070fc:	not    rcx
    650070ff:	lea    r8,[rcx-0x1]
    65007103:	lea    rcx,[rbp+0x610]
    6500710a:	call   0x65002000
    6500710f:	nop
    65007110:	lea    r8,[rbp+0x610]
    65007117:	lea    rdx,[rbp+0x830]
    6500711e:	lea    rcx,[rbp+0x0]
    65007122:	call   0x6500d050
    65007127:	nop
    65007128:	cmp    QWORD PTR [rbp+0x630],0x10
    65007130:	jb     0x6500713e
    65007132:	mov    rcx,QWORD PTR [rbp+0x618]
    65007139:	call   0x6501d190
    6500713e:	lea    r8,[rip+0x30623]        # 0x65037768
    65007145:	mov    edx,0xb
    6500714a:	lea    rcx,[rip+0x3063f]        # 0x65037790
    65007151:	call   0x6500bc30
    65007156:	mov    rdx,rax
    65007159:	mov    QWORD PTR [rbp+0x1a8],0xf
    65007164:	mov    QWORD PTR [rbp+0x1a0],r13
    6500716b:	mov    BYTE PTR [rbp+0x190],0x0
    65007172:	xor    eax,eax
    65007174:	mov    rcx,rbx
    65007177:	mov    rdi,rdx
    6500717a:	repnz scas al,BYTE PTR es:[rdi]
    6500717c:	not    rcx
    6500717f:	lea    r8,[rcx-0x1]
    65007183:	lea    rcx,[rbp+0x188]
    6500718a:	call   0x65002000
    6500718f:	nop
    65007190:	lea    r8,[rbp+0x188]
    65007197:	lea    rdx,[rbp+0x950]
    6500719e:	lea    rcx,[rbp+0x0]
    650071a2:	call   0x6500d050
    650071a7:	nop
    650071a8:	cmp    QWORD PTR [rbp+0x1a8],0x10
    650071b0:	jb     0x650071be
    650071b2:	mov    rcx,QWORD PTR [rbp+0x190]
    650071b9:	call   0x6501d190
    650071be:	lea    r8,[rip+0x305db]        # 0x650377a0
    650071c5:	mov    edx,0x10
    650071ca:	lea    rcx,[rip+0x305ff]        # 0x650377d0
    650071d1:	call   0x6500bc30
    650071d6:	mov    rdx,rax
    650071d9:	mov    QWORD PTR [rbp+0x1d0],0xf
    650071e4:	mov    QWORD PTR [rbp+0x1c8],r13
    650071eb:	mov    BYTE PTR [rbp+0x1b8],0x0
    650071f2:	xor    eax,eax
    650071f4:	mov    rcx,rbx
    650071f7:	mov    rdi,rdx
    650071fa:	repnz scas al,BYTE PTR es:[rdi]
    650071fc:	not    rcx
    650071ff:	lea    r8,[rcx-0x1]
    65007203:	lea    rcx,[rbp+0x1b0]
    6500720a:	call   0x65002000
    6500720f:	nop
    65007210:	lea    r8,[rbp+0x1b0]
    65007217:	lea    rdx,[rbp+0x860]
    6500721e:	lea    rcx,[rbp+0x0]
    65007222:	call   0x6500d050
    65007227:	nop
    65007228:	cmp    QWORD PTR [rbp+0x1d0],0x10
    65007230:	jb     0x6500723e
    65007232:	mov    rcx,QWORD PTR [rbp+0x1b8]
    65007239:	call   0x6501d190
    6500723e:	lea    r8,[rip+0x305a3]        # 0x650377e8
    65007245:	mov    edx,0x5
    6500724a:	lea    rcx,[rip+0x305bb]        # 0x6503780c
    65007251:	call   0x6500bc30
    65007256:	mov    rdx,rax
    65007259:	mov    QWORD PTR [rbp+0x400],0xf
    65007264:	mov    QWORD PTR [rbp+0x3f8],r13
    6500726b:	mov    BYTE PTR [rbp+0x3e8],0x0
    65007272:	xor    eax,eax
    65007274:	mov    rcx,rbx
    65007277:	mov    rdi,rdx
    6500727a:	repnz scas al,BYTE PTR es:[rdi]
    6500727c:	not    rcx
    6500727f:	lea    r8,[rcx-0x1]
    65007283:	lea    rcx,[rbp+0x3e0]
    6500728a:	call   0x65002000
    6500728f:	nop
    65007290:	lea    r8,[rbp+0x3e0]
    65007297:	lea    rdx,[rbp+0x9e0]
    6500729e:	lea    rcx,[rbp+0x0]
    650072a2:	call   0x6500d050
    650072a7:	nop
    650072a8:	cmp    QWORD PTR [rbp+0x400],0x10
    650072b0:	jb     0x650072be
    650072b2:	mov    rcx,QWORD PTR [rbp+0x3e8]
    650072b9:	call   0x6501d190
    650072be:	lea    r8,[rip+0x30553]        # 0x65037818
    650072c5:	mov    edx,0x5
    650072ca:	lea    rcx,[rip+0x3056f]        # 0x65037840
    650072d1:	call   0x6500bc30
    650072d6:	mov    rdx,rax
    650072d9:	mov    QWORD PTR [rbp+0x540],0xf
    650072e4:	mov    QWORD PTR [rbp+0x538],r13
    650072eb:	mov    BYTE PTR [rbp+0x528],0x0
    650072f2:	xor    eax,eax
    650072f4:	mov    rcx,rbx
    650072f7:	mov    rdi,rdx
    650072fa:	repnz scas al,BYTE PTR es:[rdi]
    650072fc:	not    rcx
    650072ff:	lea    r8,[rcx-0x1]
    65007303:	lea    rcx,[rbp+0x520]
    6500730a:	call   0x65002000
    6500730f:	nop
    65007310:	lea    r8,[rbp+0x520]
    65007317:	lea    rdx,[rbp+0x890]
    6500731e:	lea    rcx,[rbp+0x0]
    65007322:	call   0x6500d050
    65007327:	nop
    65007328:	cmp    QWORD PTR [rbp+0x540],0x10
    65007330:	jb     0x6500733e
    65007332:	mov    rcx,QWORD PTR [rbp+0x528]
    65007339:	call   0x6501d190
    6500733e:	lea    r8,[rip+0x30503]        # 0x65037848
    65007345:	mov    edx,0x8
    6500734a:	lea    rcx,[rip+0x30527]        # 0x65037878
    65007351:	call   0x6500bc30
    65007356:	mov    rdx,rax
    65007359:	mov    QWORD PTR [rbp+0x1f8],0xf
    65007364:	mov    QWORD PTR [rbp+0x1f0],r13
    6500736b:	mov    BYTE PTR [rbp+0x1e0],0x0
    65007372:	xor    eax,eax
    65007374:	mov    rcx,rbx
    65007377:	mov    rdi,rdx
    6500737a:	repnz scas al,BYTE PTR es:[rdi]
    6500737c:	not    rcx
    6500737f:	lea    r8,[rcx-0x1]
    65007383:	lea    rcx,[rbp+0x1d8]
    6500738a:	call   0x65002000
    6500738f:	nop
    65007390:	lea    r8,[rbp+0x1d8]
    65007397:	lea    rdx,[rbp+0x6e0]
    6500739e:	lea    rcx,[rbp+0x0]
    650073a2:	call   0x6500d050
    650073a7:	nop
    650073a8:	cmp    QWORD PTR [rbp+0x1f8],0x10
    650073b0:	jb     0x650073be
    650073b2:	mov    rcx,QWORD PTR [rbp+0x1e0]
    650073b9:	call   0x6501d190
    650073be:	lea    r8,[rip+0x304c3]        # 0x65037888
    650073c5:	mov    edx,0x8
    650073ca:	lea    rcx,[rip+0x304df]        # 0x650378b0
    650073d1:	call   0x6500bc30
    650073d6:	mov    rdx,rax
    650073d9:	mov    QWORD PTR [rbp+0x248],0xf
    650073e4:	mov    QWORD PTR [rbp+0x240],r13
    650073eb:	mov    BYTE PTR [rbp+0x230],0x0
    650073f2:	xor    eax,eax
    650073f4:	mov    rcx,rbx
    650073f7:	mov    rdi,rdx
    650073fa:	repnz scas al,BYTE PTR es:[rdi]
    650073fc:	not    rcx
    650073ff:	lea    r8,[rcx-0x1]
    65007403:	lea    rcx,[rbp+0x228]
    6500740a:	call   0x65002000
    6500740f:	nop
    65007410:	lea    r8,[rbp+0x228]
    65007417:	lea    rdx,[rbp+0x6f8]
    6500741e:	lea    rcx,[rbp+0x0]
    65007422:	call   0x6500d050
    65007427:	nop
    65007428:	cmp    QWORD PTR [rbp+0x248],0x10
    65007430:	jb     0x6500743e
    65007432:	mov    rcx,QWORD PTR [rbp+0x230]
    65007439:	call   0x6501d190
    6500743e:	lea    r8,[rip+0x3047b]        # 0x650378c0
    65007445:	mov    edx,0x4
    6500744a:	lea    rcx,[rip+0x304a7]        # 0x650378f8
    65007451:	call   0x6500bc30
    65007456:	mov    rdx,rax
    65007459:	mov    QWORD PTR [rbp+0x298],0xf
    65007464:	mov    QWORD PTR [rbp+0x290],r13
    6500746b:	mov    BYTE PTR [rbp+0x280],0x0
    65007472:	xor    eax,eax
    65007474:	mov    rcx,rbx
    65007477:	mov    rdi,rdx
    6500747a:	repnz scas al,BYTE PTR es:[rdi]
    6500747c:	not    rcx
    6500747f:	lea    r8,[rcx-0x1]
    65007483:	lea    rcx,[rbp+0x278]
    6500748a:	call   0x65002000
    6500748f:	nop
    65007490:	lea    r8,[rbp+0x278]
    65007497:	lea    rdx,[rbp+0x728]
    6500749e:	lea    rcx,[rbp+0x0]
    650074a2:	call   0x6500d050
    650074a7:	nop
    650074a8:	cmp    QWORD PTR [rbp+0x298],0x10
    650074b0:	jb     0x650074be
    650074b2:	mov    rcx,QWORD PTR [rbp+0x280]
    650074b9:	call   0x6501d190
    650074be:	lea    r8,[rip+0x3043b]        # 0x65037900
    650074c5:	mov    edx,0xc
    650074ca:	lea    rcx,[rip+0x30457]        # 0x65037928
    650074d1:	call   0x6500bc30
    650074d6:	mov    rdx,rax
    650074d9:	mov    QWORD PTR [rbp+0x2e8],0xf
    650074e4:	mov    QWORD PTR [rbp+0x2e0],r13
    650074eb:	mov    BYTE PTR [rbp+0x2d0],0x0
    650074f2:	xor    eax,eax
    650074f4:	mov    rcx,rbx
    650074f7:	mov    rdi,rdx
    650074fa:	repnz scas al,BYTE PTR es:[rdi]
    650074fc:	not    rcx
    650074ff:	lea    r8,[rcx-0x1]
    65007503:	lea    rcx,[rbp+0x2c8]
    6500750a:	call   0x65002000
    6500750f:	nop
    65007510:	lea    r8,[rbp+0x2c8]
    65007517:	lea    rdx,[rbp+0x758]
    6500751e:	lea    rcx,[rbp+0x0]
    65007522:	call   0x6500d050
    65007527:	nop
    65007528:	cmp    QWORD PTR [rbp+0x2e8],0x10
    65007530:	jb     0x6500753e
    65007532:	mov    rcx,QWORD PTR [rbp+0x2d0]
    65007539:	call   0x6501d190
    6500753e:	lea    r8,[rip+0x303f3]        # 0x65037938
    65007545:	mov    edx,0x10
    6500754a:	lea    rcx,[rip+0x3041f]        # 0x65037970
    65007551:	call   0x6500bc30
    65007556:	mov    rdx,rax
    65007559:	mov    QWORD PTR [rbp+0x338],0xf
    65007564:	mov    QWORD PTR [rbp+0x330],r13
    6500756b:	mov    BYTE PTR [rbp+0x320],0x0
    65007572:	xor    eax,eax
    65007574:	mov    rcx,rbx
    65007577:	mov    rdi,rdx
    6500757a:	repnz scas al,BYTE PTR es:[rdi]
    6500757c:	not    rcx
    6500757f:	lea    r8,[rcx-0x1]
    65007583:	lea    rcx,[rbp+0x318]
    6500758a:	call   0x65002000
    6500758f:	nop
    65007590:	lea    r8,[rbp+0x318]
    65007597:	lea    rdx,[rbp+0x788]
    6500759e:	lea    rcx,[rbp+0x0]
    650075a2:	call   0x6500d050
    650075a7:	nop
    650075a8:	cmp    QWORD PTR [rbp+0x338],0x10
    650075b0:	jb     0x650075be
    650075b2:	mov    rcx,QWORD PTR [rbp+0x320]
    650075b9:	call   0x6501d190
    650075be:	lea    r8,[rip+0x303c3]        # 0x65037988
    650075c5:	mov    edx,0x7
    650075ca:	lea    rcx,[rip+0x303e7]        # 0x650379b8
    650075d1:	call   0x6500bc30
    650075d6:	mov    rdx,rax
    650075d9:	mov    QWORD PTR [rbp+0x388],0xf
    650075e4:	mov    QWORD PTR [rbp+0x380],r13
    650075eb:	mov    BYTE PTR [rbp+0x370],0x0
    650075f2:	xor    eax,eax
    650075f4:	mov    rcx,rbx
    650075f7:	mov    rdi,rdx
    650075fa:	repnz scas al,BYTE PTR es:[rdi]
    650075fc:	not    rcx
    650075ff:	lea    r8,[rcx-0x1]
    65007603:	lea    rcx,[rbp+0x368]
    6500760a:	call   0x65002000
    6500760f:	nop
    65007610:	lea    r8,[rbp+0x368]
    65007617:	lea    rdx,[rbp+0x7b8]
    6500761e:	lea    rcx,[rbp+0x0]
    65007622:	call   0x6500d050
    65007627:	nop
    65007628:	cmp    QWORD PTR [rbp+0x388],0x10
    65007630:	jb     0x6500763e
    65007632:	mov    rcx,QWORD PTR [rbp+0x370]
    65007639:	call   0x6501d190
    6500763e:	lea    r8,[rip+0x3037b]        # 0x650379c0
    65007645:	mov    edx,0x9
    6500764a:	lea    rcx,[rip+0x303a7]        # 0x650379f8
    65007651:	call   0x6500bc30
    65007656:	mov    rdx,rax
    65007659:	mov    QWORD PTR [rbp+0x3d8],0xf
    65007664:	mov    QWORD PTR [rbp+0x3d0],r13
    6500766b:	mov    BYTE PTR [rbp+0x3c0],0x0
    65007672:	xor    eax,eax
    65007674:	mov    rcx,rbx
    65007677:	mov    rdi,rdx
    6500767a:	repnz scas al,BYTE PTR es:[rdi]
    6500767c:	not    rcx
    6500767f:	lea    r8,[rcx-0x1]
    65007683:	lea    rcx,[rbp+0x3b8]
    6500768a:	call   0x65002000
    6500768f:	nop
    65007690:	lea    r8,[rbp+0x3b8]
    65007697:	lea    rdx,[rbp+0x7e8]
    6500769e:	lea    rcx,[rbp+0x0]
    650076a2:	call   0x6500d050
    650076a7:	nop
    650076a8:	cmp    QWORD PTR [rbp+0x3d8],0x10
    650076b0:	jb     0x650076be
    650076b2:	mov    rcx,QWORD PTR [rbp+0x3c0]
    650076b9:	call   0x6501d190
    650076be:	lea    r8,[rip+0x30343]        # 0x65037a08
    650076c5:	mov    edx,0x7
    650076ca:	lea    rcx,[rip+0x3036f]        # 0x65037a40
    650076d1:	call   0x6500bc30
    650076d6:	mov    rdx,rax
    650076d9:	mov    QWORD PTR [rbp+0x428],0xf
    650076e4:	mov    QWORD PTR [rbp+0x420],r13
    650076eb:	mov    BYTE PTR [rbp+0x410],0x0
    650076f2:	xor    eax,eax
    650076f4:	mov    rcx,rbx
    650076f7:	mov    rdi,rdx
    650076fa:	repnz scas al,BYTE PTR es:[rdi]
    650076fc:	not    rcx
    650076ff:	lea    r8,[rcx-0x1]
    65007703:	lea    rcx,[rbp+0x408]
    6500770a:	call   0x65002000
    6500770f:	nop
    65007710:	lea    r8,[rbp+0x408]
    65007717:	lea    rdx,[rbp+0x818]
    6500771e:	lea    rcx,[rbp+0x0]
    65007722:	call   0x6500d050
    65007727:	nop
    65007728:	cmp    QWORD PTR [rbp+0x428],0x10
    65007730:	jb     0x6500773e
    65007732:	mov    rcx,QWORD PTR [rbp+0x410]
    65007739:	call   0x6501d190
    6500773e:	lea    r8,[rip+0x3030b]        # 0x65037a50
    65007745:	mov    edx,0xb
    6500774a:	lea    rcx,[rip+0x3033f]        # 0x65037a90
    65007751:	call   0x6500bc30
    65007756:	mov    rdx,rax
    65007759:	mov    QWORD PTR [rbp+0x478],0xf
    65007764:	mov    QWORD PTR [rbp+0x470],r13
    6500776b:	mov    BYTE PTR [rbp+0x460],0x0
    65007772:	xor    eax,eax
    65007774:	mov    rcx,rbx
    65007777:	mov    rdi,rdx
    6500777a:	repnz scas al,BYTE PTR es:[rdi]
    6500777c:	not    rcx
    6500777f:	lea    r8,[rcx-0x1]
    65007783:	lea    rcx,[rbp+0x458]
    6500778a:	call   0x65002000
    6500778f:	nop
    65007790:	lea    r8,[rbp+0x458]
    65007797:	lea    rdx,[rbp+0x848]
    6500779e:	lea    rcx,[rbp+0x0]
    650077a2:	call   0x6500d050
    650077a7:	nop
    650077a8:	cmp    QWORD PTR [rbp+0x478],0x10
    650077b0:	jb     0x650077be
    650077b2:	mov    rcx,QWORD PTR [rbp+0x460]
    650077b9:	call   0x6501d190
    650077be:	lea    r8,[rip+0x302db]        # 0x65037aa0
    650077c5:	mov    edx,0x6
    650077ca:	lea    rcx,[rip+0x30303]        # 0x65037ad4
    650077d1:	call   0x6500bc30
    650077d6:	mov    rdx,rax
    650077d9:	mov    QWORD PTR [rbp+0x4c8],0xf
    650077e4:	mov    QWORD PTR [rbp+0x4c0],r13
    650077eb:	mov    BYTE PTR [rbp+0x4b0],0x0
    650077f2:	xor    eax,eax
    650077f4:	mov    rcx,rbx
    650077f7:	mov    rdi,rdx
    650077fa:	repnz scas al,BYTE PTR es:[rdi]
    650077fc:	not    rcx
    650077ff:	lea    r8,[rcx-0x1]
    65007803:	lea    rcx,[rbp+0x4a8]
    6500780a:	call   0x65002000
    6500780f:	nop
    65007810:	lea    r8,[rbp+0x4a8]
    65007817:	lea    rdx,[rbp+0x878]
    6500781e:	lea    rcx,[rbp+0x0]
    65007822:	call   0x6500d050
    65007827:	nop
    65007828:	cmp    QWORD PTR [rbp+0x4c8],0x10
    65007830:	jb     0x6500783e
    65007832:	mov    rcx,QWORD PTR [rbp+0x4b0]
    65007839:	call   0x6501d190
    6500783e:	lea    r8,[rip+0x3029b]        # 0x65037ae0
    65007845:	mov    edx,0x6
    6500784a:	lea    rcx,[rip+0x302cb]        # 0x65037b1c
    65007851:	call   0x6500bc30
    65007856:	mov    rdx,rax
    65007859:	mov    QWORD PTR [rbp+0x518],0xf
    65007864:	mov    QWORD PTR [rbp+0x510],r13
    6500786b:	mov    BYTE PTR [rbp+0x500],0x0
    65007872:	xor    eax,eax
    65007874:	mov    rcx,rbx
    65007877:	mov    rdi,rdx
    6500787a:	repnz scas al,BYTE PTR es:[rdi]
    6500787c:	not    rcx
    6500787f:	lea    r8,[rcx-0x1]
    65007883:	lea    rcx,[rbp+0x4f8]
    6500788a:	call   0x65002000
    6500788f:	nop
    65007890:	lea    r8,[rbp+0x4f8]
    65007897:	lea    rdx,[rbp+0x8a8]
    6500789e:	lea    rcx,[rbp+0x0]
    650078a2:	call   0x6500d050
    650078a7:	nop
    650078a8:	cmp    QWORD PTR [rbp+0x518],0x10
    650078b0:	jb     0x650078be
    650078b2:	mov    rcx,QWORD PTR [rbp+0x500]
    650078b9:	call   0x6501d190
    650078be:	lea    r8,[rip+0x30263]        # 0x65037b28
    650078c5:	mov    edx,0x7
    650078ca:	lea    rcx,[rip+0x3028f]        # 0x65037b60
    650078d1:	call   0x6500bc30
    650078d6:	mov    rdx,rax
    650078d9:	mov    QWORD PTR [rbp+0x568],0xf
    650078e4:	mov    QWORD PTR [rbp+0x560],r13
    650078eb:	mov    BYTE PTR [rbp+0x550],0x0
    650078f2:	xor    eax,eax
    650078f4:	mov    rcx,rbx
    650078f7:	mov    rdi,rdx
    650078fa:	repnz scas al,BYTE PTR es:[rdi]
    650078fc:	not    rcx
    650078ff:	lea    r8,[rcx-0x1]
    65007903:	lea    rcx,[rbp+0x548]
    6500790a:	call   0x65002000
    6500790f:	nop
    65007910:	lea    r8,[rbp+0x548]
    65007917:	lea    rdx,[rbp+0x8d8]
    6500791e:	lea    rcx,[rbp+0x0]
    65007922:	call   0x6500d050
    65007927:	nop
    65007928:	cmp    QWORD PTR [rbp+0x568],0x10
    65007930:	jb     0x6500793e
    65007932:	mov    rcx,QWORD PTR [rbp+0x550]
    65007939:	call   0x6501d190
    6500793e:	lea    r8,[rip+0x30223]        # 0x65037b68
    65007945:	mov    edx,0x9
    6500794a:	lea    rcx,[rip+0x3023f]        # 0x65037b90
    65007951:	call   0x6500bc30
    65007956:	mov    rdx,rax
    65007959:	mov    QWORD PTR [rbp+0x5b8],0xf
    65007964:	mov    QWORD PTR [rbp+0x5b0],r13
    6500796b:	mov    BYTE PTR [rbp+0x5a0],0x0
    65007972:	xor    eax,eax
    65007974:	mov    rcx,rbx
    65007977:	mov    rdi,rdx
    6500797a:	repnz scas al,BYTE PTR es:[rdi]
    6500797c:	not    rcx
    6500797f:	lea    r8,[rcx-0x1]
    65007983:	lea    rcx,[rbp+0x598]
    6500798a:	call   0x65002000
    6500798f:	nop
    65007990:	lea    r8,[rbp+0x598]
    65007997:	lea    rdx,[rbp+0x6c8]
    6500799e:	lea    rcx,[rbp+0x0]
    650079a2:	call   0x6500d050
    650079a7:	nop
    650079a8:	cmp    QWORD PTR [rbp+0x5b8],0x10
    650079b0:	jb     0x650079be
    650079b2:	mov    rcx,QWORD PTR [rbp+0x5a0]
    650079b9:	call   0x6501d190
    650079be:	lea    r8,[rip+0x301db]        # 0x65037ba0
    650079c5:	mov    edx,0x7
    650079ca:	lea    rcx,[rip+0x301f7]        # 0x65037bc8
    650079d1:	call   0x6500bc30
    650079d6:	mov    rdx,rax
    650079d9:	mov    QWORD PTR [rbp+0x608],0xf
    650079e4:	mov    QWORD PTR [rbp+0x600],r13
    650079eb:	mov    BYTE PTR [rbp+0x5f0],0x0
    650079f2:	xor    eax,eax
    650079f4:	mov    rcx,rbx
    650079f7:	mov    rdi,rdx
    650079fa:	repnz scas al,BYTE PTR es:[rdi]
    650079fc:	not    rcx
    650079ff:	lea    r8,[rcx-0x1]
    65007a03:	lea    rcx,[rbp+0x5e8]
    65007a0a:	call   0x65002000
    65007a0f:	nop
    65007a10:	lea    r8,[rbp+0x5e8]
    65007a17:	lea    rdx,[rbp+0x938]
    65007a1e:	lea    rcx,[rbp+0x0]
    65007a22:	call   0x6500d050
    65007a27:	nop
    65007a28:	cmp    QWORD PTR [rbp+0x608],0x10
    65007a30:	jb     0x65007a3e
    65007a32:	mov    rcx,QWORD PTR [rbp+0x5f0]
    65007a39:	call   0x6501d190
    65007a3e:	lea    r8,[rip+0x3018b]        # 0x65037bd0
    65007a45:	mov    edx,0x6
    65007a4a:	lea    rcx,[rip+0x301ab]        # 0x65037bfc
    65007a51:	call   0x6500bc30
    65007a56:	mov    rdx,rax
    65007a59:	mov    QWORD PTR [rbp+0x658],0xf
    65007a64:	mov    QWORD PTR [rbp+0x650],r13
    65007a6b:	mov    BYTE PTR [rbp+0x640],0x0
    65007a72:	xor    eax,eax
    65007a74:	mov    rcx,rbx
    65007a77:	mov    rdi,rdx
    65007a7a:	repnz scas al,BYTE PTR es:[rdi]
    65007a7c:	not    rcx
    65007a7f:	lea    r8,[rcx-0x1]
    65007a83:	lea    rcx,[rbp+0x638]
    65007a8a:	call   0x65002000
    65007a8f:	nop
    65007a90:	lea    r8,[rbp+0x638]
    65007a97:	lea    rdx,[rbp+0x968]
    65007a9e:	lea    rcx,[rbp+0x0]
    65007aa2:	call   0x6500d050
    65007aa7:	nop
    65007aa8:	cmp    QWORD PTR [rbp+0x658],0x10
    65007ab0:	jb     0x65007abe
    65007ab2:	mov    rcx,QWORD PTR [rbp+0x640]
    65007ab9:	call   0x6501d190
    65007abe:	lea    r8,[rip+0x30143]        # 0x65037c08
    65007ac5:	mov    edx,0x8
    65007aca:	lea    rcx,[rip+0x3016f]        # 0x65037c40
    65007ad1:	call   0x6500bc30
    65007ad6:	mov    rdx,rax
    65007ad9:	mov    QWORD PTR [rbp+0x220],0xf
    65007ae4:	mov    QWORD PTR [rbp+0x218],r13
    65007aeb:	mov    BYTE PTR [rbp+0x208],0x0
    65007af2:	xor    eax,eax
    65007af4:	mov    rcx,rbx
    65007af7:	mov    rdi,rdx
    65007afa:	repnz scas al,BYTE PTR es:[rdi]
    65007afc:	not    rcx
    65007aff:	lea    r8,[rcx-0x1]
    65007b03:	lea    rcx,[rbp+0x200]
    65007b0a:	call   0x65002000
    65007b0f:	nop
    65007b10:	lea    r8,[rbp+0x200]
    65007b17:	lea    rdx,[rbp+0x998]
    65007b1e:	lea    rcx,[rbp+0x0]
    65007b22:	call   0x6500d050
    65007b27:	nop
    65007b28:	cmp    QWORD PTR [rbp+0x220],0x10
    65007b30:	jb     0x65007b3e
    65007b32:	mov    rcx,QWORD PTR [rbp+0x208]
    65007b39:	call   0x6501d190
    65007b3e:	lea    r8,[rip+0x3010b]        # 0x65037c50
    65007b45:	mov    edx,0x6
    65007b4a:	lea    rcx,[rip+0x3012f]        # 0x65037c80
    65007b51:	call   0x6500bc30
    65007b56:	mov    rdx,rax
    65007b59:	mov    QWORD PTR [rbp+0x590],0xf
    65007b64:	mov    QWORD PTR [rbp+0x588],r13
    65007b6b:	mov    BYTE PTR [rbp+0x578],0x0
    65007b72:	xor    eax,eax
    65007b74:	mov    rcx,rbx
    65007b77:	mov    rdi,rdx
    65007b7a:	repnz scas al,BYTE PTR es:[rdi]
    65007b7c:	not    rcx
    65007b7f:	lea    r8,[rcx-0x1]
    65007b83:	lea    rcx,[rbp+0x570]
    65007b8a:	call   0x65002000
    65007b8f:	nop
    65007b90:	lea    r8,[rbp+0x570]
    65007b97:	lea    rdx,[rbp+0x9c8]
    65007b9e:	lea    rcx,[rbp+0x0]
    65007ba2:	call   0x6500d050
    65007ba7:	nop
    65007ba8:	cmp    QWORD PTR [rbp+0x590],0x10
    65007bb0:	jb     0x65007bbe
    65007bb2:	mov    rcx,QWORD PTR [rbp+0x578]
    65007bb9:	call   0x6501d190
    65007bbe:	lea    rdx,[rbp+0x0]
    65007bc2:	lea    rcx,[rbp+0x120]
    65007bc9:	call   0x65006100
    65007bce:	nop
    65007bcf:	mov    rdx,rax
    65007bd2:	lea    rcx,[rip+0x3f35f]        # 0x65046f38
    65007bd9:	call   0x6500cf50
    65007bde:	nop
    65007bdf:	mov    rax,QWORD PTR [rbp+0x128]
    65007be6:	mov    QWORD PTR [rbp+0x28],rax
    65007bea:	lea    rcx,[rbp+0x120]
    65007bf1:	mov    QWORD PTR [rbp+0x20],rcx
    65007bf5:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    65007bf9:	movdqa XMMWORD PTR [rbp+0x680],xmm0
    65007c01:	mov    rax,QWORD PTR [rax]
    65007c04:	mov    QWORD PTR [rbp+0x28],rax
    65007c08:	lea    rax,[rbp+0x120]
    65007c0f:	mov    QWORD PTR [rbp+0x20],rax
    65007c13:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    65007c17:	movdqa XMMWORD PTR [rbp+0x690],xmm0
    65007c1f:	lea    r9,[rbp+0x680]
    65007c26:	lea    r8,[rbp+0x690]
    65007c2d:	lea    rdx,[rbp+0x6b8]
    65007c34:	lea    rcx,[rbp+0x120]
    65007c3b:	call   0x6500d770
    65007c40:	mov    rcx,QWORD PTR [rbp+0x128]
    65007c47:	call   0x6501d190
    65007c4c:	nop
    65007c4d:	mov    rax,QWORD PTR [rbp+0x8]
    65007c51:	mov    QWORD PTR [rbp+0x28],rax
    65007c55:	lea    rcx,[rbp+0x0]
    65007c59:	mov    QWORD PTR [rbp+0x20],rcx
    65007c5d:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    65007c61:	movdqa XMMWORD PTR [rbp+0x660],xmm0
    65007c69:	mov    rax,QWORD PTR [rax]
    65007c6c:	mov    QWORD PTR [rbp+0x28],rax
    65007c70:	lea    rax,[rbp+0x0]
    65007c74:	mov    QWORD PTR [rbp+0x20],rax
    65007c78:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    65007c7c:	movdqa XMMWORD PTR [rbp+0x20],xmm0
    65007c81:	lea    r9,[rbp+0x660]
    65007c88:	lea    r8,[rbp+0x20]
    65007c8c:	lea    rdx,[rbp+0x6a8]
    65007c93:	lea    rcx,[rbp+0x0]
    65007c97:	call   0x6500d770
    65007c9c:	mov    rcx,QWORD PTR [rbp+0x8]
    65007ca0:	call   0x6501d190
    65007ca5:	call   QWORD PTR [rip+0x3a3ed]        # 0x65042098
    65007cab:	mov    esi,eax
    65007cad:	mov    rcx,QWORD PTR [r12]
    65007cb1:	cmp    DWORD PTR [rcx-0x8],0x1
    65007cb5:	jle    0x65007cc2
    65007cb7:	mov    edx,DWORD PTR [rcx-0x10]
    65007cba:	mov    rcx,r12
    65007cbd:	call   0x65002130
    65007cc2:	mov    rdi,QWORD PTR [r12]
    65007cc6:	test   rdi,rdi
    65007cc9:	jne    0x65007cd0
    65007ccb:	mov    rax,r13
    65007cce:	jmp    0x65007d23
    65007cd0:	mov    rcx,rdi
    65007cd3:	call   QWORD PTR [rip+0x2c3b7]        # 0x65034090
    65007cd9:	add    eax,0x1
    65007cdc:	cmp    eax,0x3fffffff
    65007ce1:	jle    0x65007ce8
    65007ce3:	mov    rax,r13
    65007ce6:	jmp    0x65007d23
    65007ce8:	lea    r8d,[rax+rax*1]
    65007cec:	cdqe   
    65007cee:	add    rax,rax
    65007cf1:	lea    rcx,[rax+0xf]
    65007cf5:	cmp    rcx,rax
    65007cf8:	ja     0x65007d04
    65007cfa:	movabs rcx,0xffffffffffffff0
    65007d04:	and    rcx,0xfffffffffffffff0
    65007d08:	mov    rax,rcx
    65007d0b:	call   0x650330c0
    65007d10:	sub    rsp,rcx
    65007d13:	lea    rcx,[rsp+0x20]
    65007d18:	mov    r9d,esi
    65007d1b:	mov    rdx,rdi
    65007d1e:	call   0x650040f0
    65007d23:	lea    rdx,[rbp+0xa60]
    65007d2a:	data16 xchg ax,ax
    65007d2d:	data16 xchg ax,ax
    65007d30:	movzx  ecx,BYTE PTR [rax]
    65007d33:	mov    BYTE PTR [rdx],cl
    65007d35:	add    rax,0x1
    65007d39:	add    rdx,0x1
    65007d3d:	test   cl,cl
    65007d3f:	jne    0x65007d30
    65007d41:	lea    rcx,[rbp+0xa60]
    65007d48:	call   0x6502edd0
    65007d4d:	mov    QWORD PTR [rbp+0x158],0xf
    65007d58:	mov    QWORD PTR [rbp+0x150],r13
    65007d5f:	mov    BYTE PTR [rbp+0x140],0x0
    65007d66:	xor    eax,eax
    65007d68:	mov    rcx,rbx
    65007d6b:	lea    rdi,[rbp+0xa60]
    65007d72:	repnz scas al,BYTE PTR es:[rdi]
    65007d74:	not    rcx
    65007d77:	lea    r8,[rcx-0x1]
    65007d7b:	lea    rdx,[rbp+0xa60]
    65007d82:	lea    rcx,[rbp+0x138]
    65007d89:	call   0x65002000
    65007d8e:	nop
    65007d8f:	lea    rdx,[rbp+0x138]
    65007d96:	lea    rcx,[rip+0x3f19b]        # 0x65046f38
    65007d9d:	call   0x6500d2a0
    65007da2:	test   rax,rax
    65007da5:	setne  dil
    65007da9:	cmp    QWORD PTR [rbp+0x158],0x10
    65007db1:	jb     0x65007dbf
    65007db3:	mov    rcx,QWORD PTR [rbp+0x140]
    65007dba:	call   0x6501d190
    65007dbf:	mov    QWORD PTR [rbp+0x158],0xf
    65007dca:	mov    QWORD PTR [rbp+0x150],r13
    65007dd1:	mov    BYTE PTR [rbp+0x140],0x0
    65007dd8:	mov    rdx,QWORD PTR [r12]
    65007ddc:	sub    rdx,0x18
    65007de0:	lock xadd DWORD PTR [rdx+0x10],ebx
    65007de5:	add    ebx,0xffffffff
    65007de8:	test   ebx,ebx
    65007dea:	jg     0x65007dfa
    65007dec:	mov    rcx,QWORD PTR [rdx]
    65007def:	mov    rax,QWORD PTR [rcx]
    65007df2:	call   QWORD PTR [rax+0x8]
    65007df5:	mov    al,dil
    65007df8:	jmp    0x65007dfd
    65007dfa:	mov    al,dil
    65007dfd:	mov    rcx,QWORD PTR [rbp+0xe60]
    65007e04:	xor    rcx,rbp
    65007e07:	call   0x6501e4e0
    65007e0c:	mov    rbx,QWORD PTR [rbp+0xe98]
    65007e13:	mov    rsi,QWORD PTR [rbp+0xea0]
    65007e1a:	mov    rdi,QWORD PTR [rbp+0xea8]
    65007e21:	lea    rsp,[rbp+0xe70]
    65007e28:	pop    r13
    65007e2a:	pop    r12
    65007e2c:	pop    rbp
    65007e2d:	ret    
    65007e2e:	int3   
    65007e2f:	int3   
    65007e30:	rex push rbp
    65007e32:	sub    rsp,0x20
    65007e36:	lea    rbp,[rdx+0x20]
    65007e3a:	mov    rcx,QWORD PTR [rbp+0x670]
    65007e41:	call   0x65001cb0
    65007e46:	add    rsp,0x20
    65007e4a:	pop    rbp
    65007e4b:	ret    
    65007e4c:	int3   
    65007e4d:	int3   
    65007e4e:	int3   
    65007e4f:	int3   
    65007e50:	rex push rbp
    65007e52:	lea    rbp,[rdx+0x20]
    65007e56:	mov    eax,DWORD PTR [rip+0x3f0f4]        # 0x65046f50
    65007e5c:	and    eax,0xfffffffe
    65007e5f:	mov    DWORD PTR [rip+0x3f0eb],eax        # 0x65046f50
    65007e65:	pop    rbp
    65007e66:	ret    
    65007e67:	int3   
    65007e68:	int3   
    65007e69:	int3   
    65007e6a:	int3   
    65007e6b:	int3   
    65007e6c:	int3   
    65007e6d:	int3   
    65007e6e:	int3   
    65007e6f:	int3   
    65007e70:	rex push rbp
    65007e72:	sub    rsp,0x20
    65007e76:	lea    rbp,[rdx+0x20]
    65007e7a:	lea    rcx,[rbp+0x0]
    65007e7e:	call   0x65006440
    65007e83:	add    rsp,0x20
    65007e87:	pop    rbp
    65007e88:	ret    
    65007e89:	int3   
    65007e8a:	int3   
    65007e8b:	int3   
    65007e8c:	int3   
    65007e8d:	int3   
    65007e8e:	int3   
    65007e8f:	int3   
    65007e90:	rex push rbp
    65007e92:	sub    rsp,0x20
    65007e96:	lea    rbp,[rdx+0x20]
    65007e9a:	lea    rcx,[rbp+0x30]
    65007e9e:	call   0x65001c70
    65007ea3:	add    rsp,0x20
    65007ea7:	pop    rbp
    65007ea8:	ret    
    65007ea9:	int3   
    65007eaa:	int3   
    65007eab:	int3   
    65007eac:	int3   
    65007ead:	int3   
    65007eae:	int3   
    65007eaf:	int3   
    65007eb0:	rex push rbp
    65007eb2:	sub    rsp,0x20
    65007eb6:	lea    rbp,[rdx+0x20]
    65007eba:	lea    rcx,[rbp+0x80]
    65007ec1:	call   0x65001c70
    65007ec6:	add    rsp,0x20
    65007eca:	pop    rbp
    65007ecb:	ret    
    65007ecc:	int3   
    65007ecd:	int3   
    65007ece:	int3   
    65007ecf:	int3   
    65007ed0:	rex push rbp
    65007ed2:	sub    rsp,0x20
    65007ed6:	lea    rbp,[rdx+0x20]
    65007eda:	lea    rcx,[rbp+0x58]
    65007ede:	call   0x65001c70
    65007ee3:	add    rsp,0x20
    65007ee7:	pop    rbp
    65007ee8:	ret    
    65007ee9:	int3   
    65007eea:	int3   
    65007eeb:	int3   
    65007eec:	int3   
    65007eed:	int3   
    65007eee:	int3   
    65007eef:	int3   
    65007ef0:	rex push rbp
    65007ef2:	sub    rsp,0x20
    65007ef6:	lea    rbp,[rdx+0x20]
    65007efa:	lea    rcx,[rbp+0xa8]
    65007f01:	call   0x65001c70
    65007f06:	add    rsp,0x20
    65007f0a:	pop    rbp
    65007f0b:	ret    
    65007f0c:	int3   
    65007f0d:	int3   
    65007f0e:	int3   
    65007f0f:	int3   
    65007f10:	rex push rbp
    65007f12:	sub    rsp,0x20
    65007f16:	lea    rbp,[rdx+0x20]
    65007f1a:	lea    rcx,[rbp+0xf8]
    65007f21:	call   0x65001c70
    65007f26:	add    rsp,0x20
    65007f2a:	pop    rbp
    65007f2b:	ret    
    65007f2c:	int3   
    65007f2d:	int3   
    65007f2e:	int3   
    65007f2f:	int3   
    65007f30:	rex push rbp
    65007f32:	sub    rsp,0x20
    65007f36:	lea    rbp,[rdx+0x20]
    65007f3a:	lea    rcx,[rbp+0xd0]
    65007f41:	call   0x65001c70
    65007f46:	add    rsp,0x20
    65007f4a:	pop    rbp
    65007f4b:	ret    
    65007f4c:	int3   
    65007f4d:	int3   
    65007f4e:	int3   
    65007f4f:	int3   
    65007f50:	rex push rbp
    65007f52:	sub    rsp,0x20
    65007f56:	lea    rbp,[rdx+0x20]
    65007f5a:	lea    rcx,[rbp+0x430]
    65007f61:	call   0x65001c70
    65007f66:	add    rsp,0x20
    65007f6a:	pop    rbp
    65007f6b:	ret    
    65007f6c:	int3   
    65007f6d:	int3   
    65007f6e:	int3   
    65007f6f:	int3   
    65007f70:	rex push rbp
    65007f72:	sub    rsp,0x20
    65007f76:	lea    rbp,[rdx+0x20]
    65007f7a:	lea    rcx,[rbp+0x250]
    65007f81:	call   0x65001c70
    65007f86:	add    rsp,0x20
    65007f8a:	pop    rbp
    65007f8b:	ret    
    65007f8c:	int3   
    65007f8d:	int3   
    65007f8e:	int3   
    65007f8f:	int3   
    65007f90:	rex push rbp
    65007f92:	sub    rsp,0x20
    65007f96:	lea    rbp,[rdx+0x20]
    65007f9a:	lea    rcx,[rbp+0x5c0]
    65007fa1:	call   0x65001c70
    65007fa6:	add    rsp,0x20
    65007faa:	pop    rbp
    65007fab:	ret    
    65007fac:	int3   
    65007fad:	int3   
    65007fae:	int3   
    65007faf:	int3   
    65007fb0:	rex push rbp
    65007fb2:	sub    rsp,0x20
    65007fb6:	lea    rbp,[rdx+0x20]
    65007fba:	lea    rcx,[rbp+0x2a0]
    65007fc1:	call   0x65001c70
    65007fc6:	add    rsp,0x20
    65007fca:	pop    rbp
    65007fcb:	ret    
    65007fcc:	int3   
    65007fcd:	int3   
    65007fce:	int3   
    65007fcf:	int3   
    65007fd0:	rex push rbp
    65007fd2:	sub    rsp,0x20
    65007fd6:	lea    rbp,[rdx+0x20]
    65007fda:	lea    rcx,[rbp+0x480]
    65007fe1:	call   0x65001c70
    65007fe6:	add    rsp,0x20
    65007fea:	pop    rbp
    65007feb:	ret    
    65007fec:	int3   
    65007fed:	int3   
    65007fee:	int3   
    65007fef:	int3   
    65007ff0:	rex push rbp
    65007ff2:	sub    rsp,0x20
    65007ff6:	lea    rbp,[rdx+0x20]
    65007ffa:	lea    rcx,[rbp+0x2f0]
    65008001:	call   0x65001c70
    65008006:	add    rsp,0x20
    6500800a:	pop    rbp
    6500800b:	ret    
    6500800c:	int3   
    6500800d:	int3   
    6500800e:	int3   
    6500800f:	int3   
    65008010:	rex push rbp
    65008012:	sub    rsp,0x20
    65008016:	lea    rbp,[rdx+0x20]
    6500801a:	lea    rcx,[rbp+0x160]
    65008021:	call   0x65001c70
    65008026:	add    rsp,0x20
    6500802a:	pop    rbp
    6500802b:	ret    
    6500802c:	int3   
    6500802d:	int3   
    6500802e:	int3   
    6500802f:	int3   
    65008030:	rex push rbp
    65008032:	sub    rsp,0x20
    65008036:	lea    rbp,[rdx+0x20]
    6500803a:	lea    rcx,[rbp+0x340]
    65008041:	call   0x65001c70
    65008046:	add    rsp,0x20
    6500804a:	pop    rbp
    6500804b:	ret    
    6500804c:	int3   
    6500804d:	int3   
    6500804e:	int3   
    6500804f:	int3   
    65008050:	rex push rbp
    65008052:	sub    rsp,0x20
    65008056:	lea    rbp,[rdx+0x20]
    6500805a:	lea    rcx,[rbp+0x4d0]
    65008061:	call   0x65001c70
    65008066:	add    rsp,0x20
    6500806a:	pop    rbp
    6500806b:	ret    
    6500806c:	int3   
    6500806d:	int3   
    6500806e:	int3   
    6500806f:	int3   
    65008070:	rex push rbp
    65008072:	sub    rsp,0x20
    65008076:	lea    rbp,[rdx+0x20]
    6500807a:	lea    rcx,[rbp+0x390]
    65008081:	call   0x65001c70
    65008086:	add    rsp,0x20
    6500808a:	pop    rbp
    6500808b:	ret    
    6500808c:	int3   
    6500808d:	int3   
    6500808e:	int3   
    6500808f:	int3   
    65008090:	rex push rbp
    65008092:	sub    rsp,0x20
    65008096:	lea    rbp,[rdx+0x20]
    6500809a:	lea    rcx,[rbp+0x610]
    650080a1:	call   0x65001c70
    650080a6:	add    rsp,0x20
    650080aa:	pop    rbp
    650080ab:	ret    
    650080ac:	int3   
    650080ad:	int3   
    650080ae:	int3   
    650080af:	int3   
    650080b0:	rex push rbp
    650080b2:	sub    rsp,0x20
    650080b6:	lea    rbp,[rdx+0x20]
    650080ba:	lea    rcx,[rbp+0x188]
    650080c1:	call   0x65001c70
    650080c6:	add    rsp,0x20
    650080ca:	pop    rbp
    650080cb:	ret    
    650080cc:	int3   
    650080cd:	int3   
    650080ce:	int3   
    650080cf:	int3   
    650080d0:	rex push rbp
    650080d2:	sub    rsp,0x20
    650080d6:	lea    rbp,[rdx+0x20]
    650080da:	lea    rcx,[rbp+0x1b0]
    650080e1:	call   0x65001c70
    650080e6:	add    rsp,0x20
    650080ea:	pop    rbp
    650080eb:	ret    
    650080ec:	int3   
    650080ed:	int3   
    650080ee:	int3   
    650080ef:	int3   
    650080f0:	rex push rbp
    650080f2:	sub    rsp,0x20
    650080f6:	lea    rbp,[rdx+0x20]
    650080fa:	lea    rcx,[rbp+0x3e0]
    65008101:	call   0x65001c70
    65008106:	add    rsp,0x20
    6500810a:	pop    rbp
    6500810b:	ret    
    6500810c:	int3   
    6500810d:	int3   
    6500810e:	int3   
    6500810f:	int3   
    65008110:	rex push rbp
    65008112:	sub    rsp,0x20
    65008116:	lea    rbp,[rdx+0x20]
    6500811a:	lea    rcx,[rbp+0x520]
    65008121:	call   0x65001c70
    65008126:	add    rsp,0x20
    6500812a:	pop    rbp
    6500812b:	ret    
    6500812c:	int3   
    6500812d:	int3   
    6500812e:	int3   
    6500812f:	int3   
    65008130:	rex push rbp
    65008132:	sub    rsp,0x20
    65008136:	lea    rbp,[rdx+0x20]
    6500813a:	lea    rcx,[rbp+0x1d8]
    65008141:	call   0x65001c70
    65008146:	add    rsp,0x20
    6500814a:	pop    rbp
    6500814b:	ret    
    6500814c:	int3   
    6500814d:	int3   
    6500814e:	int3   
    6500814f:	int3   
    65008150:	rex push rbp
    65008152:	sub    rsp,0x20
    65008156:	lea    rbp,[rdx+0x20]
    6500815a:	lea    rcx,[rbp+0x228]
    65008161:	call   0x65001c70
    65008166:	add    rsp,0x20
    6500816a:	pop    rbp
    6500816b:	ret    
    6500816c:	int3   
    6500816d:	int3   
    6500816e:	int3   
    6500816f:	int3   
    65008170:	rex push rbp
    65008172:	sub    rsp,0x20
    65008176:	lea    rbp,[rdx+0x20]
    6500817a:	lea    rcx,[rbp+0x278]
    65008181:	call   0x65001c70
    65008186:	add    rsp,0x20
    6500818a:	pop    rbp
    6500818b:	ret    
    6500818c:	int3   
    6500818d:	int3   
    6500818e:	int3   
    6500818f:	int3   
    65008190:	rex push rbp
    65008192:	sub    rsp,0x20
    65008196:	lea    rbp,[rdx+0x20]
    6500819a:	lea    rcx,[rbp+0x2c8]
    650081a1:	call   0x65001c70
    650081a6:	add    rsp,0x20
    650081aa:	pop    rbp
    650081ab:	ret    
    650081ac:	int3   
    650081ad:	int3   
    650081ae:	int3   
    650081af:	int3   
    650081b0:	rex push rbp
    650081b2:	sub    rsp,0x20
    650081b6:	lea    rbp,[rdx+0x20]
    650081ba:	lea    rcx,[rbp+0x318]
    650081c1:	call   0x65001c70
    650081c6:	add    rsp,0x20
    650081ca:	pop    rbp
    650081cb:	ret    
    650081cc:	int3   
    650081cd:	int3   
    650081ce:	int3   
    650081cf:	int3   
    650081d0:	rex push rbp
    650081d2:	sub    rsp,0x20
    650081d6:	lea    rbp,[rdx+0x20]
    650081da:	lea    rcx,[rbp+0x368]
    650081e1:	call   0x65001c70
    650081e6:	add    rsp,0x20
    650081ea:	pop    rbp
    650081eb:	ret    
    650081ec:	int3   
    650081ed:	int3   
    650081ee:	int3   
    650081ef:	int3   
    650081f0:	rex push rbp
    650081f2:	sub    rsp,0x20
    650081f6:	lea    rbp,[rdx+0x20]
    650081fa:	lea    rcx,[rbp+0x3b8]
    65008201:	call   0x65001c70
    65008206:	add    rsp,0x20
    6500820a:	pop    rbp
    6500820b:	ret    
    6500820c:	int3   
    6500820d:	int3   
    6500820e:	int3   
    6500820f:	int3   
    65008210:	rex push rbp
    65008212:	sub    rsp,0x20
    65008216:	lea    rbp,[rdx+0x20]
    6500821a:	lea    rcx,[rbp+0x408]
    65008221:	call   0x65001c70
    65008226:	add    rsp,0x20
    6500822a:	pop    rbp
    6500822b:	ret    
    6500822c:	int3   
    6500822d:	int3   
    6500822e:	int3   
    6500822f:	int3   
    65008230:	rex push rbp
    65008232:	sub    rsp,0x20
    65008236:	lea    rbp,[rdx+0x20]
    6500823a:	lea    rcx,[rbp+0x458]
    65008241:	call   0x65001c70
    65008246:	add    rsp,0x20
    6500824a:	pop    rbp
    6500824b:	ret    
    6500824c:	int3   
    6500824d:	int3   
    6500824e:	int3   
    6500824f:	int3   
    65008250:	rex push rbp
    65008252:	sub    rsp,0x20
    65008256:	lea    rbp,[rdx+0x20]
    6500825a:	lea    rcx,[rbp+0x4a8]
    65008261:	call   0x65001c70
    65008266:	add    rsp,0x20
    6500826a:	pop    rbp
    6500826b:	ret    
    6500826c:	int3   
    6500826d:	int3   
    6500826e:	int3   
    6500826f:	int3   
    65008270:	rex push rbp
    65008272:	sub    rsp,0x20
    65008276:	lea    rbp,[rdx+0x20]
    6500827a:	lea    rcx,[rbp+0x4f8]
    65008281:	call   0x65001c70
    65008286:	add    rsp,0x20
    6500828a:	pop    rbp
    6500828b:	ret    
    6500828c:	int3   
    6500828d:	int3   
    6500828e:	int3   
    6500828f:	int3   
    65008290:	rex push rbp
    65008292:	sub    rsp,0x20
    65008296:	lea    rbp,[rdx+0x20]
    6500829a:	lea    rcx,[rbp+0x548]
    650082a1:	call   0x65001c70
    650082a6:	add    rsp,0x20
    650082aa:	pop    rbp
    650082ab:	ret    
    650082ac:	int3   
    650082ad:	int3   
    650082ae:	int3   
    650082af:	int3   
    650082b0:	rex push rbp
    650082b2:	sub    rsp,0x20
    650082b6:	lea    rbp,[rdx+0x20]
    650082ba:	lea    rcx,[rbp+0x598]
    650082c1:	call   0x65001c70
    650082c6:	add    rsp,0x20
    650082ca:	pop    rbp
    650082cb:	ret    
    650082cc:	int3   
    650082cd:	int3   
    650082ce:	int3   
    650082cf:	int3   
    650082d0:	rex push rbp
    650082d2:	sub    rsp,0x20
    650082d6:	lea    rbp,[rdx+0x20]
    650082da:	lea    rcx,[rbp+0x5e8]
    650082e1:	call   0x65001c70
    650082e6:	add    rsp,0x20
    650082ea:	pop    rbp
    650082eb:	ret    
    650082ec:	int3   
    650082ed:	int3   
    650082ee:	int3   
    650082ef:	int3   
    650082f0:	rex push rbp
    650082f2:	sub    rsp,0x20
    650082f6:	lea    rbp,[rdx+0x20]
    650082fa:	lea    rcx,[rbp+0x638]
    65008301:	call   0x65001c70
    65008306:	add    rsp,0x20
    6500830a:	pop    rbp
    6500830b:	ret    
    6500830c:	int3   
    6500830d:	int3   
    6500830e:	int3   
    6500830f:	int3   
    65008310:	rex push rbp
    65008312:	sub    rsp,0x20
    65008316:	lea    rbp,[rdx+0x20]
    6500831a:	lea    rcx,[rbp+0x200]
    65008321:	call   0x65001c70
    65008326:	add    rsp,0x20
    6500832a:	pop    rbp
    6500832b:	ret    
    6500832c:	int3   
    6500832d:	int3   
    6500832e:	int3   
    6500832f:	int3   
    65008330:	rex push rbp
    65008332:	sub    rsp,0x20
    65008336:	lea    rbp,[rdx+0x20]
    6500833a:	lea    rcx,[rbp+0x570]
    65008341:	call   0x65001c70
    65008346:	add    rsp,0x20
    6500834a:	pop    rbp
    6500834b:	ret    
    6500834c:	int3   
    6500834d:	int3   
    6500834e:	int3   
    6500834f:	int3   
    65008350:	rex push rbp
    65008352:	sub    rsp,0x20
    65008356:	lea    rbp,[rdx+0x20]
    6500835a:	lea    rcx,[rbp+0x120]
    65008361:	call   0x65006440
    65008366:	add    rsp,0x20
    6500836a:	pop    rbp
    6500836b:	ret    
    6500836c:	int3   
    6500836d:	int3   
    6500836e:	int3   
    6500836f:	int3   
    65008370:	rex push rbp
    65008372:	sub    rsp,0x20
    65008376:	lea    rbp,[rdx+0x20]
    6500837a:	lea    rcx,[rbp+0x138]
    65008381:	call   0x65001c70
    65008386:	add    rsp,0x20
    6500838a:	pop    rbp
    6500838b:	ret    
    6500838c:	int3   
    6500838d:	int3   
    6500838e:	int3   
    6500838f:	int3   
    65008390:	rex push rbp
    65008392:	push   r12
    65008394:	push   r13
    65008396:	mov    eax,0x13d0
    6500839b:	call   0x650330c0
    650083a0:	sub    rsp,rax
    650083a3:	lea    rbp,[rsp+0x20]
    650083a8:	mov    QWORD PTR [rbp+0x9d0],0xfffffffffffffffe
    650083b3:	mov    QWORD PTR [rbp+0x13d8],rbx
    650083ba:	mov    QWORD PTR [rbp+0x13e0],rsi
    650083c1:	mov    QWORD PTR [rbp+0x13e8],rdi
    650083c8:	mov    rax,QWORD PTR [rip+0x39d51]        # 0x65042120
    650083cf:	xor    rax,rbp
    650083d2:	mov    QWORD PTR [rbp+0x13a0],rax
    650083d9:	mov    r12,rcx
    650083dc:	mov    QWORD PTR [rbp+0x9d8],rcx
    650083e3:	mov    eax,DWORD PTR [rip+0x3eb47]        # 0x65046f30
    650083e9:	xor    r13d,r13d
    650083ec:	test   al,0x1
    650083ee:	jne    0x65008444
    650083f0:	or     eax,0x1
    650083f3:	mov    DWORD PTR [rip+0x3eb37],eax        # 0x65046f30
    650083f9:	lea    rcx,[rip+0x3eb18]        # 0x65046f18
    65008400:	call   0x6500ef70
    65008405:	mov    QWORD PTR [rip+0x3eb14],rax        # 0x65046f20
    6500840c:	mov    BYTE PTR [rax+0x41],0x1
    65008410:	mov    rax,QWORD PTR [rip+0x3eb09]        # 0x65046f20
    65008417:	mov    QWORD PTR [rax+0x8],rax
    6500841b:	mov    rax,QWORD PTR [rip+0x3eafe]        # 0x65046f20
    65008422:	mov    QWORD PTR [rax],rax
    65008425:	mov    rax,QWORD PTR [rip+0x3eaf4]        # 0x65046f20
    6500842c:	mov    QWORD PTR [rax+0x10],rax
    65008430:	mov    QWORD PTR [rip+0x3eaf1],r13        # 0x65046f28
    65008437:	lea    rcx,[rip+0x2af12]        # 0x65033350
    6500843e:	call   0x6501e680
    65008443:	nop
    65008444:	or     rbx,0xffffffffffffffff
    65008448:	cmp    QWORD PTR [rip+0x3ead8],0x0        # 0x65046f28
    65008450:	jne    0x6500a60b
    65008456:	lea    rcx,[rbp+0x0]
    6500845a:	call   0x6500ef70
    6500845f:	mov    QWORD PTR [rbp+0x8],rax
    65008463:	mov    BYTE PTR [rax+0x41],0x1
    65008467:	mov    rax,QWORD PTR [rbp+0x8]
    6500846b:	mov    QWORD PTR [rax+0x8],rax
    6500846f:	mov    rax,QWORD PTR [rbp+0x8]
    65008473:	mov    QWORD PTR [rax],rax
    65008476:	mov    rax,QWORD PTR [rbp+0x8]
    6500847a:	mov    QWORD PTR [rax+0x10],rax
    6500847e:	mov    QWORD PTR [rbp+0x10],r13
    65008482:	lea    r8,[rip+0x2f7ff]        # 0x65037c88
    65008489:	lea    edx,[rbx+0xe]
    6500848c:	lea    rcx,[rip+0x2f825]        # 0x65037cb8
    65008493:	call   0x6500bc30
    65008498:	mov    rsi,rax
    6500849b:	mov    edx,0xf
    650084a0:	mov    QWORD PTR [rbp+0x50],rdx
    650084a4:	mov    r8,r13
    650084a7:	mov    QWORD PTR [rbp+0x48],r13
    650084ab:	mov    BYTE PTR [rbp+0x38],r8b
    650084af:	xor    eax,eax
    650084b1:	mov    rcx,rbx
    650084b4:	mov    rdi,rsi
    650084b7:	repnz scas al,BYTE PTR es:[rdi]
    650084b9:	not    rcx
    650084bc:	sub    rcx,0x1
    650084c0:	mov    rdi,rcx
    650084c3:	cmp    rcx,0xfffffffffffffffe
    650084c7:	jbe    0x650084d6
    650084c9:	call   0x6501cfe0
    650084ce:	mov    rdx,QWORD PTR [rbp+0x50]
    650084d2:	mov    r8,QWORD PTR [rbp+0x48]
    650084d6:	cmp    rdx,rdi
    650084d9:	jae    0x650084ed
    650084db:	mov    rdx,rdi
    650084de:	lea    rcx,[rbp+0x30]
    650084e2:	call   0x65002330
    650084e7:	mov    rdx,QWORD PTR [rbp+0x50]
    650084eb:	jmp    0x65008508
    650084ed:	test   rdi,rdi
    650084f0:	jne    0x65008508
    650084f2:	mov    QWORD PTR [rbp+0x48],r13
    650084f6:	lea    rax,[rbp+0x38]
    650084fa:	cmp    rdx,0x10
    650084fe:	cmovae rax,QWORD PTR [rbp+0x38]
    65008503:	mov    BYTE PTR [rax],dil
    65008506:	jmp    0x6500853b
    65008508:	test   rdi,rdi
    6500850b:	je     0x6500853b
    6500850d:	lea    rcx,[rbp+0x38]
    65008511:	cmp    rdx,0x10
    65008515:	cmovae rcx,QWORD PTR [rbp+0x38]
    6500851a:	mov    r9,rdi
    6500851d:	mov    r8,rsi
    65008520:	call   0x6501d640
    65008525:	mov    QWORD PTR [rbp+0x48],rdi
    65008529:	lea    rax,[rbp+0x38]
    6500852d:	cmp    QWORD PTR [rbp+0x50],0x10
    65008532:	cmovae rax,QWORD PTR [rbp+0x38]
    65008537:	mov    BYTE PTR [rdi+rax*1],0x0
    6500853b:	lea    r8,[rbp+0x30]
    6500853f:	lea    rdx,[rbp+0xe48]
    65008546:	lea    rcx,[rbp+0x0]
    6500854a:	call   0x6500d050
    6500854f:	nop
    65008550:	cmp    QWORD PTR [rbp+0x50],0x10
    65008555:	jb     0x65008560
    65008557:	mov    rcx,QWORD PTR [rbp+0x38]
    6500855b:	call   0x6501d190
    65008560:	lea    r8,[rip+0x2f761]        # 0x65037cc8
    65008567:	mov    edx,0x5
    6500856c:	lea    rcx,[rip+0x2f791]        # 0x65037d04
    65008573:	call   0x6500bc30
    65008578:	mov    rsi,rax
    6500857b:	mov    edx,0xf
    65008580:	mov    QWORD PTR [rbp+0xa0],rdx
    65008587:	mov    r8,r13
    6500858a:	mov    QWORD PTR [rbp+0x98],r13
    65008591:	mov    BYTE PTR [rbp+0x88],r8b
    65008598:	xor    eax,eax
    6500859a:	mov    rcx,rbx
    6500859d:	mov    rdi,rsi
    650085a0:	repnz scas al,BYTE PTR es:[rdi]
    650085a2:	not    rcx
    650085a5:	sub    rcx,0x1
    650085a9:	mov    rdi,rcx
    650085ac:	cmp    rcx,0xfffffffffffffffe
    650085b0:	jbe    0x650085c5
    650085b2:	call   0x6501cfe0
    650085b7:	mov    rdx,QWORD PTR [rbp+0xa0]
    650085be:	mov    r8,QWORD PTR [rbp+0x98]
    650085c5:	cmp    rdx,rdi
    650085c8:	jae    0x650085e2
    650085ca:	mov    rdx,rdi
    650085cd:	lea    rcx,[rbp+0x80]
    650085d4:	call   0x65002330
    650085d9:	mov    rdx,QWORD PTR [rbp+0xa0]
    650085e0:	jmp    0x65008606
    650085e2:	test   rdi,rdi
    650085e5:	jne    0x65008606
    650085e7:	mov    QWORD PTR [rbp+0x98],r13
    650085ee:	lea    rax,[rbp+0x88]
    650085f5:	cmp    rdx,0x10
    650085f9:	cmovae rax,QWORD PTR [rbp+0x88]
    65008601:	mov    BYTE PTR [rax],dil
    65008604:	jmp    0x6500864b
    65008606:	test   rdi,rdi
    65008609:	je     0x6500864b
    6500860b:	lea    rcx,[rbp+0x88]
    65008612:	cmp    rdx,0x10
    65008616:	cmovae rcx,QWORD PTR [rbp+0x88]
    6500861e:	mov    r9,rdi
    65008621:	mov    r8,rsi
    65008624:	call   0x6501d640
    65008629:	mov    QWORD PTR [rbp+0x98],rdi
    65008630:	lea    rax,[rbp+0x88]
    65008637:	cmp    QWORD PTR [rbp+0xa0],0x10
    6500863f:	cmovae rax,QWORD PTR [rbp+0x88]
    65008647:	mov    BYTE PTR [rdi+rax*1],0x0
    6500864b:	lea    r8,[rbp+0x80]
    65008652:	lea    rdx,[rbp+0xf38]
    65008659:	lea    rcx,[rbp+0x0]
    6500865d:	call   0x6500d050
    65008662:	nop
    65008663:	cmp    QWORD PTR [rbp+0xa0],0x10
    6500866b:	jb     0x65008679
    6500866d:	mov    rcx,QWORD PTR [rbp+0x88]
    65008674:	call   0x6501d190
    65008679:	lea    r8,[rip+0x2f690]        # 0x65037d10
    65008680:	mov    edx,0x5
    65008685:	lea    rcx,[rip+0x2f6a8]        # 0x65037d34
    6500868c:	call   0x6500bc30
    65008691:	mov    rsi,rax
    65008694:	mov    edx,0xf
    65008699:	mov    QWORD PTR [rbp+0x78],rdx
    6500869d:	mov    r8,r13
    650086a0:	mov    QWORD PTR [rbp+0x70],r13
    650086a4:	mov    BYTE PTR [rbp+0x60],r8b
    650086a8:	xor    eax,eax
    650086aa:	mov    rcx,rbx
    650086ad:	mov    rdi,rsi
    650086b0:	repnz scas al,BYTE PTR es:[rdi]
    650086b2:	not    rcx
    650086b5:	sub    rcx,0x1
    650086b9:	mov    rdi,rcx
    650086bc:	cmp    rcx,0xfffffffffffffffe
    650086c0:	jbe    0x650086cf
    650086c2:	call   0x6501cfe0
    650086c7:	mov    rdx,QWORD PTR [rbp+0x78]
    650086cb:	mov    r8,QWORD PTR [rbp+0x70]
    650086cf:	cmp    rdx,rdi
    650086d2:	jae    0x650086e6
    650086d4:	mov    rdx,rdi
    650086d7:	lea    rcx,[rbp+0x58]
    650086db:	call   0x65002330
    650086e0:	mov    rdx,QWORD PTR [rbp+0x78]
    650086e4:	jmp    0x65008701
    650086e6:	test   rdi,rdi
    650086e9:	jne    0x65008701
    650086eb:	mov    QWORD PTR [rbp+0x70],r13
    650086ef:	lea    rax,[rbp+0x60]
    650086f3:	cmp    rdx,0x10
    650086f7:	cmovae rax,QWORD PTR [rbp+0x60]
    650086fc:	mov    BYTE PTR [rax],dil
    650086ff:	jmp    0x65008734
    65008701:	test   rdi,rdi
    65008704:	je     0x65008734
    65008706:	lea    rcx,[rbp+0x60]
    6500870a:	cmp    rdx,0x10
    6500870e:	cmovae rcx,QWORD PTR [rbp+0x60]
    65008713:	mov    r9,rdi
    65008716:	mov    r8,rsi
    65008719:	call   0x6501d640
    6500871e:	mov    QWORD PTR [rbp+0x70],rdi
    65008722:	lea    rax,[rbp+0x60]
    65008726:	cmp    QWORD PTR [rbp+0x78],0x10
    6500872b:	cmovae rax,QWORD PTR [rbp+0x60]
    65008730:	mov    BYTE PTR [rax+rdi*1],0x0
    65008734:	lea    r8,[rbp+0x58]
    65008738:	lea    rdx,[rbp+0xf68]
    6500873f:	lea    rcx,[rbp+0x0]
    65008743:	call   0x6500d050
    65008748:	nop
    65008749:	cmp    QWORD PTR [rbp+0x78],0x10
    6500874e:	jb     0x65008759
    65008750:	mov    rcx,QWORD PTR [rbp+0x60]
    65008754:	call   0x6501d190
    65008759:	lea    r8,[rip+0x2f5e0]        # 0x65037d40
    65008760:	mov    edx,0x11
    65008765:	lea    rcx,[rip+0x2f604]        # 0x65037d70
    6500876c:	call   0x6500bc30
    65008771:	mov    rsi,rax
    65008774:	mov    edx,0xf
    65008779:	mov    QWORD PTR [rbp+0xc8],rdx
    65008780:	mov    r8,r13
    65008783:	mov    QWORD PTR [rbp+0xc0],r13
    6500878a:	mov    BYTE PTR [rbp+0xb0],r8b
    65008791:	xor    eax,eax
    65008793:	mov    rcx,rbx
    65008796:	mov    rdi,rsi
    65008799:	repnz scas al,BYTE PTR es:[rdi]
    6500879b:	not    rcx
    6500879e:	sub    rcx,0x1
    650087a2:	mov    rdi,rcx
    650087a5:	cmp    rcx,0xfffffffffffffffe
    650087a9:	jbe    0x650087be
    650087ab:	call   0x6501cfe0
    650087b0:	mov    rdx,QWORD PTR [rbp+0xc8]
    650087b7:	mov    r8,QWORD PTR [rbp+0xc0]
    650087be:	cmp    rdx,rdi
    650087c1:	jae    0x650087db
    650087c3:	mov    rdx,rdi
    650087c6:	lea    rcx,[rbp+0xa8]
    650087cd:	call   0x65002330
    650087d2:	mov    rdx,QWORD PTR [rbp+0xc8]
    650087d9:	jmp    0x650087ff
    650087db:	test   rdi,rdi
    650087de:	jne    0x650087ff
    650087e0:	mov    QWORD PTR [rbp+0xc0],r13
    650087e7:	lea    rax,[rbp+0xb0]
    650087ee:	cmp    rdx,0x10
    650087f2:	cmovae rax,QWORD PTR [rbp+0xb0]
    650087fa:	mov    BYTE PTR [rax],dil
    650087fd:	jmp    0x65008844
    650087ff:	test   rdi,rdi
    65008802:	je     0x65008844
    65008804:	lea    rcx,[rbp+0xb0]
    6500880b:	cmp    rdx,0x10
    6500880f:	cmovae rcx,QWORD PTR [rbp+0xb0]
    65008817:	mov    r9,rdi
    6500881a:	mov    r8,rsi
    6500881d:	call   0x6501d640
    65008822:	mov    QWORD PTR [rbp+0xc0],rdi
    65008829:	lea    rax,[rbp+0xb0]
    65008830:	cmp    QWORD PTR [rbp+0xc8],0x10
    65008838:	cmovae rax,QWORD PTR [rbp+0xb0]
    65008840:	mov    BYTE PTR [rdi+rax*1],0x0
    65008844:	lea    r8,[rbp+0xa8]
    6500884b:	lea    rdx,[rbp+0xa40]
    65008852:	lea    rcx,[rbp+0x0]
    65008856:	call   0x6500d050
    6500885b:	nop
    6500885c:	cmp    QWORD PTR [rbp+0xc8],0x10
    65008864:	jb     0x65008872
    65008866:	mov    rcx,QWORD PTR [rbp+0xb0]
    6500886d:	call   0x6501d190
    65008872:	lea    r8,[rip+0x2f50f]        # 0x65037d88
    65008879:	mov    edx,0x6
    6500887e:	lea    rcx,[rip+0x2f53f]        # 0x65037dc4
    65008885:	call   0x6500bc30
    6500888a:	mov    rsi,rax
    6500888d:	mov    edx,0xf
    65008892:	mov    QWORD PTR [rbp+0x118],rdx
    65008899:	mov    r8,r13
    6500889c:	mov    QWORD PTR [rbp+0x110],r13
    650088a3:	mov    BYTE PTR [rbp+0x100],r8b
    650088aa:	xor    eax,eax
    650088ac:	mov    rcx,rbx
    650088af:	mov    rdi,rsi
    650088b2:	repnz scas al,BYTE PTR es:[rdi]
    650088b4:	not    rcx
    650088b7:	sub    rcx,0x1
    650088bb:	mov    rdi,rcx
    650088be:	cmp    rcx,0xfffffffffffffffe
    650088c2:	jbe    0x650088d7
    650088c4:	call   0x6501cfe0
    650088c9:	mov    rdx,QWORD PTR [rbp+0x118]
    650088d0:	mov    r8,QWORD PTR [rbp+0x110]
    650088d7:	cmp    rdx,rdi
    650088da:	jae    0x650088f4
    650088dc:	mov    rdx,rdi
    650088df:	lea    rcx,[rbp+0xf8]
    650088e6:	call   0x65002330
    650088eb:	mov    rdx,QWORD PTR [rbp+0x118]
    650088f2:	jmp    0x65008918
    650088f4:	test   rdi,rdi
    650088f7:	jne    0x65008918
    650088f9:	mov    QWORD PTR [rbp+0x110],r13
    65008900:	lea    rax,[rbp+0x100]
    65008907:	cmp    rdx,0x10
    6500890b:	cmovae rax,QWORD PTR [rbp+0x100]
    65008913:	mov    BYTE PTR [rax],dil
    65008916:	jmp    0x6500895d
    65008918:	test   rdi,rdi
    6500891b:	je     0x6500895d
    6500891d:	lea    rcx,[rbp+0x100]
    65008924:	cmp    rdx,0x10
    65008928:	cmovae rcx,QWORD PTR [rbp+0x100]
    65008930:	mov    r9,rdi
    65008933:	mov    r8,rsi
    65008936:	call   0x6501d640
    6500893b:	mov    QWORD PTR [rbp+0x110],rdi
    65008942:	lea    rax,[rbp+0x100]
    65008949:	cmp    QWORD PTR [rbp+0x118],0x10
    65008951:	cmovae rax,QWORD PTR [rbp+0x100]
    65008959:	mov    BYTE PTR [rdi+rax*1],0x0
    6500895d:	lea    r8,[rbp+0xf8]
    65008964:	lea    rdx,[rbp+0xef0]
    6500896b:	lea    rcx,[rbp+0x0]
    6500896f:	call   0x6500d050
    65008974:	nop
    65008975:	cmp    QWORD PTR [rbp+0x118],0x10
    6500897d:	jb     0x6500898b
    6500897f:	mov    rcx,QWORD PTR [rbp+0x100]
    65008986:	call   0x6501d190
    6500898b:	lea    r8,[rip+0x2f43e]        # 0x65037dd0
    65008992:	mov    edx,0x5
    65008997:	lea    rcx,[rip+0x2f456]        # 0x65037df4
    6500899e:	call   0x6500bc30
    650089a3:	mov    rsi,rax
    650089a6:	mov    edx,0xf
    650089ab:	mov    QWORD PTR [rbp+0xf0],rdx
    650089b2:	mov    r8,r13
    650089b5:	mov    QWORD PTR [rbp+0xe8],r13
    650089bc:	mov    BYTE PTR [rbp+0xd8],r8b
    650089c3:	xor    eax,eax
    650089c5:	mov    rcx,rbx
    650089c8:	mov    rdi,rsi
    650089cb:	repnz scas al,BYTE PTR es:[rdi]
    650089cd:	not    rcx
    650089d0:	sub    rcx,0x1
    650089d4:	mov    rdi,rcx
    650089d7:	cmp    rcx,0xfffffffffffffffe
    650089db:	jbe    0x650089f0
    650089dd:	call   0x6501cfe0
    650089e2:	mov    rdx,QWORD PTR [rbp+0xf0]
    650089e9:	mov    r8,QWORD PTR [rbp+0xe8]
    650089f0:	cmp    rdx,rdi
    650089f3:	jae    0x65008a0d
    650089f5:	mov    rdx,rdi
    650089f8:	lea    rcx,[rbp+0xd0]
    650089ff:	call   0x65002330
    65008a04:	mov    rdx,QWORD PTR [rbp+0xf0]
    65008a0b:	jmp    0x65008a31
    65008a0d:	test   rdi,rdi
    65008a10:	jne    0x65008a31
    65008a12:	mov    QWORD PTR [rbp+0xe8],r13
    65008a19:	lea    rax,[rbp+0xd8]
    65008a20:	cmp    rdx,0x10
    65008a24:	cmovae rax,QWORD PTR [rbp+0xd8]
    65008a2c:	mov    BYTE PTR [rax],dil
    65008a2f:	jmp    0x65008a76
    65008a31:	test   rdi,rdi
    65008a34:	je     0x65008a76
    65008a36:	lea    rcx,[rbp+0xd8]
    65008a3d:	cmp    rdx,0x10
    65008a41:	cmovae rcx,QWORD PTR [rbp+0xd8]
    65008a49:	mov    r9,rdi
    65008a4c:	mov    r8,rsi
    65008a4f:	call   0x6501d640
    65008a54:	mov    QWORD PTR [rbp+0xe8],rdi
    65008a5b:	lea    rax,[rbp+0xd8]
    65008a62:	cmp    QWORD PTR [rbp+0xf0],0x10
    65008a6a:	cmovae rax,QWORD PTR [rbp+0xd8]
    65008a72:	mov    BYTE PTR [rdi+rax*1],0x0
    65008a76:	lea    r8,[rbp+0xd0]
    65008a7d:	lea    rdx,[rbp+0xa70]
    65008a84:	lea    rcx,[rbp+0x0]
    65008a88:	call   0x6500d050
    65008a8d:	nop
    65008a8e:	cmp    QWORD PTR [rbp+0xf0],0x10
    65008a96:	jb     0x65008aa4
    65008a98:	mov    rcx,QWORD PTR [rbp+0xd8]
    65008a9f:	call   0x6501d190
    65008aa4:	lea    r8,[rip+0x2f355]        # 0x65037e00
    65008aab:	mov    edx,0x8
    65008ab0:	lea    rcx,[rip+0x2f371]        # 0x65037e28
    65008ab7:	call   0x6500bc30
    65008abc:	mov    rdx,rax
    65008abf:	mov    QWORD PTR [rbp+0x928],0xf
    65008aca:	mov    QWORD PTR [rbp+0x920],r13
    65008ad1:	mov    BYTE PTR [rbp+0x910],0x0
    65008ad8:	xor    eax,eax
    65008ada:	mov    rcx,rbx
    65008add:	mov    rdi,rdx
    65008ae0:	repnz scas al,BYTE PTR es:[rdi]
    65008ae2:	not    rcx
    65008ae5:	lea    r8,[rcx-0x1]
    65008ae9:	lea    rcx,[rbp+0x908]
    65008af0:	call   0x65002000
    65008af5:	nop
    65008af6:	lea    r8,[rbp+0x908]
    65008afd:	lea    rdx,[rbp+0xd10]
    65008b04:	lea    rcx,[rbp+0x0]
    65008b08:	call   0x6500d050
    65008b0d:	nop
    65008b0e:	cmp    QWORD PTR [rbp+0x928],0x10
    65008b16:	jb     0x65008b24
    65008b18:	mov    rcx,QWORD PTR [rbp+0x910]
    65008b1f:	call   0x6501d190
    65008b24:	lea    r8,[rip+0x2f30d]        # 0x65037e38
    65008b2b:	mov    edx,0x7
    65008b30:	lea    rcx,[rip+0x2f341]        # 0x65037e78
    65008b37:	call   0x6500bc30
    65008b3c:	mov    rdx,rax
    65008b3f:	mov    QWORD PTR [rbp+0x248],0xf
    65008b4a:	mov    QWORD PTR [rbp+0x240],r13
    65008b51:	mov    BYTE PTR [rbp+0x230],0x0
    65008b58:	xor    eax,eax
    65008b5a:	mov    rcx,rbx
    65008b5d:	mov    rdi,rdx
    65008b60:	repnz scas al,BYTE PTR es:[rdi]
    65008b62:	not    rcx
    65008b65:	lea    r8,[rcx-0x1]
    65008b69:	lea    rcx,[rbp+0x228]
    65008b70:	call   0x65002000
    65008b75:	nop
    65008b76:	lea    r8,[rbp+0x228]
    65008b7d:	lea    rdx,[rbp+0xaa0]
    65008b84:	lea    rcx,[rbp+0x0]
    65008b88:	call   0x6500d050
    65008b8d:	nop
    65008b8e:	cmp    QWORD PTR [rbp+0x248],0x10
    65008b96:	jb     0x65008ba4
    65008b98:	mov    rcx,QWORD PTR [rbp+0x230]
    65008b9f:	call   0x6501d190
    65008ba4:	lea    r8,[rip+0x2f2d5]        # 0x65037e80
    65008bab:	mov    edx,0x5
    65008bb0:	lea    rcx,[rip+0x2f301]        # 0x65037eb8
    65008bb7:	call   0x6500bc30
    65008bbc:	mov    rdx,rax
    65008bbf:	mov    QWORD PTR [rbp+0x608],0xf
    65008bca:	mov    QWORD PTR [rbp+0x600],r13
    65008bd1:	mov    BYTE PTR [rbp+0x5f0],0x0
    65008bd8:	xor    eax,eax
    65008bda:	mov    rcx,rbx
    65008bdd:	mov    rdi,rdx
    65008be0:	repnz scas al,BYTE PTR es:[rdi]
    65008be2:	not    rcx
    65008be5:	lea    r8,[rcx-0x1]
    65008be9:	lea    rcx,[rbp+0x5e8]
    65008bf0:	call   0x65002000
    65008bf5:	nop
    65008bf6:	lea    r8,[rbp+0x5e8]
    65008bfd:	lea    rdx,[rbp+0xe60]
    65008c04:	lea    rcx,[rbp+0x0]
    65008c08:	call   0x6500d050
    65008c0d:	nop
    65008c0e:	cmp    QWORD PTR [rbp+0x608],0x10
    65008c16:	jb     0x65008c24
    65008c18:	mov    rcx,QWORD PTR [rbp+0x5f0]
    65008c1f:	call   0x6501d190
    65008c24:	lea    r8,[rip+0x2f295]        # 0x65037ec0
    65008c2b:	mov    edx,0x5
    65008c30:	lea    rcx,[rip+0x2f2ad]        # 0x65037ee4
    65008c37:	call   0x6500bc30
    65008c3c:	mov    rdx,rax
    65008c3f:	mov    QWORD PTR [rbp+0x298],0xf
    65008c4a:	mov    QWORD PTR [rbp+0x290],r13
    65008c51:	mov    BYTE PTR [rbp+0x280],0x0
    65008c58:	xor    eax,eax
    65008c5a:	mov    rcx,rbx
    65008c5d:	mov    rdi,rdx
    65008c60:	repnz scas al,BYTE PTR es:[rdi]
    65008c62:	not    rcx
    65008c65:	lea    r8,[rcx-0x1]
    65008c69:	lea    rcx,[rbp+0x278]
    65008c70:	call   0x65002000
    65008c75:	nop
    65008c76:	lea    r8,[rbp+0x278]
    65008c7d:	lea    rdx,[rbp+0xad0]
    65008c84:	lea    rcx,[rbp+0x0]
    65008c88:	call   0x6500d050
    65008c8d:	nop
    65008c8e:	cmp    QWORD PTR [rbp+0x298],0x10
    65008c96:	jb     0x65008ca4
    65008c98:	mov    rcx,QWORD PTR [rbp+0x280]
    65008c9f:	call   0x6501d190
    65008ca4:	lea    r8,[rip+0x2f245]        # 0x65037ef0
    65008cab:	mov    edx,0xe
    65008cb0:	lea    rcx,[rip+0x2f271]        # 0x65037f28
    65008cb7:	call   0x6500bc30
    65008cbc:	mov    rdx,rax
    65008cbf:	mov    QWORD PTR [rbp+0x7e8],0xf
    65008cca:	mov    QWORD PTR [rbp+0x7e0],r13
    65008cd1:	mov    BYTE PTR [rbp+0x7d0],0x0
    65008cd8:	xor    eax,eax
    65008cda:	mov    rcx,rbx
    65008cdd:	mov    rdi,rdx
    65008ce0:	repnz scas al,BYTE PTR es:[rdi]
    65008ce2:	not    rcx
    65008ce5:	lea    r8,[rcx-0x1]
    65008ce9:	lea    rcx,[rbp+0x7c8]
    65008cf0:	call   0x65002000
    65008cf5:	nop
    65008cf6:	lea    r8,[rbp+0x7c8]
    65008cfd:	lea    rdx,[rbp+0xd40]
    65008d04:	lea    rcx,[rbp+0x0]
    65008d08:	call   0x6500d050
    65008d0d:	nop
    65008d0e:	cmp    QWORD PTR [rbp+0x7e8],0x10
    65008d16:	jb     0x65008d24
    65008d18:	mov    rcx,QWORD PTR [rbp+0x7d0]
    65008d1f:	call   0x6501d190
    65008d24:	lea    r8,[rip+0x2f20d]        # 0x65037f38
    65008d2b:	mov    edx,0x6
    65008d30:	lea    rcx,[rip+0x2f239]        # 0x65037f70
    65008d37:	call   0x6500bc30
    65008d3c:	mov    rdx,rax
    65008d3f:	mov    QWORD PTR [rbp+0x2e8],0xf
    65008d4a:	mov    QWORD PTR [rbp+0x2e0],r13
    65008d51:	mov    BYTE PTR [rbp+0x2d0],0x0
    65008d58:	xor    eax,eax
    65008d5a:	mov    rcx,rbx
    65008d5d:	mov    rdi,rdx
    65008d60:	repnz scas al,BYTE PTR es:[rdi]
    65008d62:	not    rcx
    65008d65:	lea    r8,[rcx-0x1]
    65008d69:	lea    rcx,[rbp+0x2c8]
    65008d70:	call   0x65002000
    65008d75:	nop
    65008d76:	lea    r8,[rbp+0x2c8]
    65008d7d:	lea    rdx,[rbp+0xb00]
    65008d84:	lea    rcx,[rbp+0x0]
    65008d88:	call   0x6500d050
    65008d8d:	nop
    65008d8e:	cmp    QWORD PTR [rbp+0x2e8],0x10
    65008d96:	jb     0x65008da4
    65008d98:	mov    rcx,QWORD PTR [rbp+0x2d0]
    65008d9f:	call   0x6501d190
    65008da4:	lea    r8,[rip+0x2f1cd]        # 0x65037f78
    65008dab:	mov    edx,0x3
    65008db0:	lea    rcx,[rip+0x2f1ed]        # 0x65037fa4
    65008db7:	call   0x6500bc30
    65008dbc:	mov    rdx,rax
    65008dbf:	mov    QWORD PTR [rbp+0x658],0xf
    65008dca:	mov    QWORD PTR [rbp+0x650],r13
    65008dd1:	mov    BYTE PTR [rbp+0x640],0x0
    65008dd8:	xor    eax,eax
    65008dda:	mov    rcx,rbx
    65008ddd:	mov    rdi,rdx
    65008de0:	repnz scas al,BYTE PTR es:[rdi]
    65008de2:	not    rcx
    65008de5:	lea    r8,[rcx-0x1]
    65008de9:	lea    rcx,[rbp+0x638]
    65008df0:	call   0x65002000
    65008df5:	nop
    65008df6:	lea    r8,[rbp+0x638]
    65008dfd:	lea    rdx,[rbp+0xf50]
    65008e04:	lea    rcx,[rbp+0x0]
    65008e08:	call   0x6500d050
    65008e0d:	nop
    65008e0e:	cmp    QWORD PTR [rbp+0x658],0x10
    65008e16:	jb     0x65008e24
    65008e18:	mov    rcx,QWORD PTR [rbp+0x640]
    65008e1f:	call   0x6501d190
    65008e24:	lea    r8,[rip+0x2f17d]        # 0x65037fa8
    65008e2b:	mov    edx,0x3
    65008e30:	lea    rcx,[rip+0x2f195]        # 0x65037fcc
    65008e37:	call   0x6500bc30
    65008e3c:	mov    rdx,rax
    65008e3f:	mov    QWORD PTR [rbp+0x338],0xf
    65008e4a:	mov    QWORD PTR [rbp+0x330],r13
    65008e51:	mov    BYTE PTR [rbp+0x320],0x0
    65008e58:	xor    eax,eax
    65008e5a:	mov    rcx,rbx
    65008e5d:	mov    rdi,rdx
    65008e60:	repnz scas al,BYTE PTR es:[rdi]
    65008e62:	not    rcx
    65008e65:	lea    r8,[rcx-0x1]
    65008e69:	lea    rcx,[rbp+0x318]
    65008e70:	call   0x65002000
    65008e75:	nop
    65008e76:	lea    r8,[rbp+0x318]
    65008e7d:	lea    rdx,[rbp+0xb30]
    65008e84:	lea    rcx,[rbp+0x0]
    65008e88:	call   0x6500d050
    65008e8d:	nop
    65008e8e:	cmp    QWORD PTR [rbp+0x338],0x10
    65008e96:	jb     0x65008ea4
    65008e98:	mov    rcx,QWORD PTR [rbp+0x320]
    65008e9f:	call   0x6501d190
    65008ea4:	lea    r8,[rip+0x2f125]        # 0x65037fd0
    65008eab:	mov    edx,0x3
    65008eb0:	lea    rcx,[rip+0x2f149]        # 0x65038000
    65008eb7:	call   0x6500bc30
    65008ebc:	mov    rdx,rax
    65008ebf:	mov    QWORD PTR [rbp+0x8d8],0xf
    65008eca:	mov    QWORD PTR [rbp+0x8d0],r13
    65008ed1:	mov    BYTE PTR [rbp+0x8c0],0x0
    65008ed8:	xor    eax,eax
    65008eda:	mov    rcx,rbx
    65008edd:	mov    rdi,rdx
    65008ee0:	repnz scas al,BYTE PTR es:[rdi]
    65008ee2:	not    rcx
    65008ee5:	lea    r8,[rcx-0x1]
    65008ee9:	lea    rcx,[rbp+0x8b8]
    65008ef0:	call   0x65002000
    65008ef5:	nop
    65008ef6:	lea    r8,[rbp+0x8b8]
    65008efd:	lea    rdx,[rbp+0xd70]
    65008f04:	lea    rcx,[rbp+0x0]
    65008f08:	call   0x6500d050
    65008f0d:	nop
    65008f0e:	cmp    QWORD PTR [rbp+0x8d8],0x10
    65008f16:	jb     0x65008f24
    65008f18:	mov    rcx,QWORD PTR [rbp+0x8c0]
    65008f1f:	call   0x6501d190
    65008f24:	lea    r8,[rip+0x2f0dd]        # 0x65038008
    65008f2b:	mov    edx,0x4
    65008f30:	lea    rcx,[rip+0x2f0f5]        # 0x6503802c
    65008f37:	call   0x6500bc30
    65008f3c:	mov    rdx,rax
    65008f3f:	mov    QWORD PTR [rbp+0x388],0xf
    65008f4a:	mov    QWORD PTR [rbp+0x380],r13
    65008f51:	mov    BYTE PTR [rbp+0x370],0x0
    65008f58:	xor    eax,eax
    65008f5a:	mov    rcx,rbx
    65008f5d:	mov    rdi,rdx
    65008f60:	repnz scas al,BYTE PTR es:[rdi]
    65008f62:	not    rcx
    65008f65:	lea    r8,[rcx-0x1]
    65008f69:	lea    rcx,[rbp+0x368]
    65008f70:	call   0x65002000
    65008f75:	nop
    65008f76:	lea    r8,[rbp+0x368]
    65008f7d:	lea    rdx,[rbp+0xb60]
    65008f84:	lea    rcx,[rbp+0x0]
    65008f88:	call   0x6500d050
    65008f8d:	nop
    65008f8e:	cmp    QWORD PTR [rbp+0x388],0x10
    65008f96:	jb     0x65008fa4
    65008f98:	mov    rcx,QWORD PTR [rbp+0x370]
    65008f9f:	call   0x6501d190
    65008fa4:	lea    r8,[rip+0x2f08d]        # 0x65038038
    65008fab:	mov    edx,0x5
    65008fb0:	lea    rcx,[rip+0x2f0bd]        # 0x65038074
    65008fb7:	call   0x6500bc30
    65008fbc:	mov    rdx,rax
    65008fbf:	mov    QWORD PTR [rbp+0x6a8],0xf
    65008fca:	mov    QWORD PTR [rbp+0x6a0],r13
    65008fd1:	mov    BYTE PTR [rbp+0x690],0x0
    65008fd8:	xor    eax,eax
    65008fda:	mov    rcx,rbx
    65008fdd:	mov    rdi,rdx
    65008fe0:	repnz scas al,BYTE PTR es:[rdi]
    65008fe2:	not    rcx
    65008fe5:	lea    r8,[rcx-0x1]
    65008fe9:	lea    rcx,[rbp+0x688]
    65008ff0:	call   0x65002000
    65008ff5:	nop
    65008ff6:	lea    r8,[rbp+0x688]
    65008ffd:	lea    rdx,[rbp+0xe90]
    65009004:	lea    rcx,[rbp+0x0]
    65009008:	call   0x6500d050
    6500900d:	nop
    6500900e:	cmp    QWORD PTR [rbp+0x6a8],0x10
    65009016:	jb     0x65009024
    65009018:	mov    rcx,QWORD PTR [rbp+0x690]
    6500901f:	call   0x6501d190
    65009024:	lea    r8,[rip+0x2f055]        # 0x65038080
    6500902b:	mov    edx,0x8
    65009030:	lea    rcx,[rip+0x2f081]        # 0x650380b8
    65009037:	call   0x6500bc30
    6500903c:	mov    rdx,rax
    6500903f:	mov    QWORD PTR [rbp+0x3d8],0xf
    6500904a:	mov    QWORD PTR [rbp+0x3d0],r13
    65009051:	mov    BYTE PTR [rbp+0x3c0],0x0
    65009058:	xor    eax,eax
    6500905a:	mov    rcx,rbx
    6500905d:	mov    rdi,rdx
    65009060:	repnz scas al,BYTE PTR es:[rdi]
    65009062:	not    rcx
    65009065:	lea    r8,[rcx-0x1]
    65009069:	lea    rcx,[rbp+0x3b8]
    65009070:	call   0x65002000
    65009075:	nop
    65009076:	lea    r8,[rbp+0x3b8]
    6500907d:	lea    rdx,[rbp+0xb90]
    65009084:	lea    rcx,[rbp+0x0]
    65009088:	call   0x6500d050
    6500908d:	nop
    6500908e:	cmp    QWORD PTR [rbp+0x3d8],0x10
    65009096:	jb     0x650090a4
    65009098:	mov    rcx,QWORD PTR [rbp+0x3c0]
    6500909f:	call   0x6501d190
    650090a4:	lea    r8,[rip+0x2f025]        # 0x650380d0
    650090ab:	mov    edx,0x4
    650090b0:	lea    rcx,[rip+0x2f059]        # 0x65038110
    650090b7:	call   0x6500bc30
    650090bc:	mov    rdx,rax
    650090bf:	mov    QWORD PTR [rbp+0x838],0xf
    650090ca:	mov    QWORD PTR [rbp+0x830],r13
    650090d1:	mov    BYTE PTR [rbp+0x820],0x0
    650090d8:	xor    eax,eax
    650090da:	mov    rcx,rbx
    650090dd:	mov    rdi,rdx
    650090e0:	repnz scas al,BYTE PTR es:[rdi]
    650090e2:	not    rcx
    650090e5:	lea    r8,[rcx-0x1]
    650090e9:	lea    rcx,[rbp+0x818]
    650090f0:	call   0x65002000
    650090f5:	nop
    650090f6:	lea    r8,[rbp+0x818]
    650090fd:	lea    rdx,[rbp+0xda0]
    65009104:	lea    rcx,[rbp+0x0]
    65009108:	call   0x6500d050
    6500910d:	nop
    6500910e:	cmp    QWORD PTR [rbp+0x838],0x10
    65009116:	jb     0x65009124
    65009118:	mov    rcx,QWORD PTR [rbp+0x820]
    6500911f:	call   0x6501d190
    65009124:	lea    r8,[rip+0x2efed]        # 0x65038118
    6500912b:	mov    edx,0x5
    65009130:	lea    rcx,[rip+0x2f005]        # 0x6503813c
    65009137:	call   0x6500bc30
    6500913c:	mov    rdx,rax
    6500913f:	mov    QWORD PTR [rbp+0x428],0xf
    6500914a:	mov    QWORD PTR [rbp+0x420],r13
    65009151:	mov    BYTE PTR [rbp+0x410],0x0
    65009158:	xor    eax,eax
    6500915a:	mov    rcx,rbx
    6500915d:	mov    rdi,rdx
    65009160:	repnz scas al,BYTE PTR es:[rdi]
    65009162:	not    rcx
    65009165:	lea    r8,[rcx-0x1]
    65009169:	lea    rcx,[rbp+0x408]
    65009170:	call   0x65002000
    65009175:	nop
    65009176:	lea    r8,[rbp+0x408]
    6500917d:	lea    rdx,[rbp+0xbc0]
    65009184:	lea    rcx,[rbp+0x0]
    65009188:	call   0x6500d050
    6500918d:	nop
    6500918e:	cmp    QWORD PTR [rbp+0x428],0x10
    65009196:	jb     0x650091a4
    65009198:	mov    rcx,QWORD PTR [rbp+0x410]
    6500919f:	call   0x6501d190
    650091a4:	lea    r8,[rip+0x2ef9d]        # 0x65038148
    650091ab:	mov    edx,0x5
    650091b0:	lea    rcx,[rip+0x2efb5]        # 0x6503816c
    650091b7:	call   0x6500bc30
    650091bc:	mov    rdx,rax
    650091bf:	mov    QWORD PTR [rbp+0x6f8],0xf
    650091ca:	mov    QWORD PTR [rbp+0x6f0],r13
    650091d1:	mov    BYTE PTR [rbp+0x6e0],0x0
    650091d8:	xor    eax,eax
    650091da:	mov    rcx,rbx
    650091dd:	mov    rdi,rdx
    650091e0:	repnz scas al,BYTE PTR es:[rdi]
    650091e2:	not    rcx
    650091e5:	lea    r8,[rcx-0x1]
    650091e9:	lea    rcx,[rbp+0x6d8]
    650091f0:	call   0x65002000
    650091f5:	nop
    650091f6:	lea    r8,[rbp+0x6d8]
    650091fd:	lea    rdx,[rbp+0xf20]
    65009204:	lea    rcx,[rbp+0x0]
    65009208:	call   0x6500d050
    6500920d:	nop
    6500920e:	cmp    QWORD PTR [rbp+0x6f8],0x10
    65009216:	jb     0x65009224
    65009218:	mov    rcx,QWORD PTR [rbp+0x6e0]
    6500921f:	call   0x6501d190
    65009224:	lea    r8,[rip+0x2ef4d]        # 0x65038178
    6500922b:	mov    edx,0x4
    65009230:	lea    rcx,[rip+0x2ef75]        # 0x650381ac
    65009237:	call   0x6500bc30
    6500923c:	mov    rdx,rax
    6500923f:	mov    QWORD PTR [rbp+0x478],0xf
    6500924a:	mov    QWORD PTR [rbp+0x470],r13
    65009251:	mov    BYTE PTR [rbp+0x460],0x0
    65009258:	xor    eax,eax
    6500925a:	mov    rcx,rbx
    6500925d:	mov    rdi,rdx
    65009260:	repnz scas al,BYTE PTR es:[rdi]
    65009262:	not    rcx
    65009265:	lea    r8,[rcx-0x1]
    65009269:	lea    rcx,[rbp+0x458]
    65009270:	call   0x65002000
    65009275:	nop
    65009276:	lea    r8,[rbp+0x458]
    6500927d:	lea    rdx,[rbp+0xbf0]
    65009284:	lea    rcx,[rbp+0x0]
    65009288:	call   0x6500d050
    6500928d:	nop
    6500928e:	cmp    QWORD PTR [rbp+0x478],0x10
    65009296:	jb     0x650092a4
    65009298:	mov    rcx,QWORD PTR [rbp+0x460]
    6500929f:	call   0x6501d190
    650092a4:	lea    r8,[rip+0x2ef0d]        # 0x650381b8
    650092ab:	mov    edx,0x8
    650092b0:	lea    rcx,[rip+0x2ef39]        # 0x650381f0
    650092b7:	call   0x6500bc30
    650092bc:	mov    rdx,rax
    650092bf:	mov    QWORD PTR [rbp+0x180],0xf
    650092ca:	mov    QWORD PTR [rbp+0x178],r13
    650092d1:	mov    BYTE PTR [rbp+0x168],0x0
    650092d8:	xor    eax,eax
    650092da:	mov    rcx,rbx
    650092dd:	mov    rdi,rdx
    650092e0:	repnz scas al,BYTE PTR es:[rdi]
    650092e2:	not    rcx
    650092e5:	lea    r8,[rcx-0x1]
    650092e9:	lea    rcx,[rbp+0x160]
    650092f0:	call   0x65002000
    650092f5:	nop
    650092f6:	lea    r8,[rbp+0x160]
    650092fd:	lea    rdx,[rbp+0xdd0]
    65009304:	lea    rcx,[rbp+0x0]
    65009308:	call   0x6500d050
    6500930d:	nop
    6500930e:	cmp    QWORD PTR [rbp+0x180],0x10
    65009316:	jb     0x65009324
    65009318:	mov    rcx,QWORD PTR [rbp+0x168]
    6500931f:	call   0x6501d190
    65009324:	lea    r8,[rip+0x2eed5]        # 0x65038200
    6500932b:	mov    edx,0x6
    65009330:	lea    rcx,[rip+0x2eef9]        # 0x65038230
    65009337:	call   0x6500bc30
    6500933c:	mov    rdx,rax
    6500933f:	mov    QWORD PTR [rbp+0x4c8],0xf
    6500934a:	mov    QWORD PTR [rbp+0x4c0],r13
    65009351:	mov    BYTE PTR [rbp+0x4b0],0x0
    65009358:	xor    eax,eax
    6500935a:	mov    rcx,rbx
    6500935d:	mov    rdi,rdx
    65009360:	repnz scas al,BYTE PTR es:[rdi]
    65009362:	not    rcx
    65009365:	lea    r8,[rcx-0x1]
    65009369:	lea    rcx,[rbp+0x4a8]
    65009370:	call   0x65002000
    65009375:	nop
    65009376:	lea    r8,[rbp+0x4a8]
    6500937d:	lea    rdx,[rbp+0xc20]
    65009384:	lea    rcx,[rbp+0x0]
    65009388:	call   0x6500d050
    6500938d:	nop
    6500938e:	cmp    QWORD PTR [rbp+0x4c8],0x10
    65009396:	jb     0x650093a4
    65009398:	mov    rcx,QWORD PTR [rbp+0x4b0]
    6500939f:	call   0x6501d190
    650093a4:	lea    r8,[rip+0x2ee8d]        # 0x65038238
    650093ab:	mov    edx,0x8
    650093b0:	lea    rcx,[rip+0x2eec1]        # 0x65038278
    650093b7:	call   0x6500bc30
    650093bc:	mov    rdx,rax
    650093bf:	mov    QWORD PTR [rbp+0x748],0xf
    650093ca:	mov    QWORD PTR [rbp+0x740],r13
    650093d1:	mov    BYTE PTR [rbp+0x730],0x0
    650093d8:	xor    eax,eax
    650093da:	mov    rcx,rbx
    650093dd:	mov    rdi,rdx
    650093e0:	repnz scas al,BYTE PTR es:[rdi]
    650093e2:	not    rcx
    650093e5:	lea    r8,[rcx-0x1]
    650093e9:	lea    rcx,[rbp+0x728]
    650093f0:	call   0x65002000
    650093f5:	nop
    650093f6:	lea    r8,[rbp+0x728]
    650093fd:	lea    rdx,[rbp+0xec0]
    65009404:	lea    rcx,[rbp+0x0]
    65009408:	call   0x6500d050
    6500940d:	nop
    6500940e:	cmp    QWORD PTR [rbp+0x748],0x10
    65009416:	jb     0x65009424
    65009418:	mov    rcx,QWORD PTR [rbp+0x730]
    6500941f:	call   0x6501d190
    65009424:	lea    r8,[rip+0x2ee5d]        # 0x65038288
    6500942b:	mov    edx,0x6
    65009430:	lea    rcx,[rip+0x2ee7d]        # 0x650382b4
    65009437:	call   0x6500bc30
    6500943c:	mov    rdx,rax
    6500943f:	mov    QWORD PTR [rbp+0x518],0xf
    6500944a:	mov    QWORD PTR [rbp+0x510],r13
    65009451:	mov    BYTE PTR [rbp+0x500],0x0
    65009458:	xor    eax,eax
    6500945a:	mov    rcx,rbx
    6500945d:	mov    rdi,rdx
    65009460:	repnz scas al,BYTE PTR es:[rdi]
    65009462:	not    rcx
    65009465:	lea    r8,[rcx-0x1]
    65009469:	lea    rcx,[rbp+0x4f8]
    65009470:	call   0x65002000
    65009475:	nop
    65009476:	lea    r8,[rbp+0x4f8]
    6500947d:	lea    rdx,[rbp+0xc50]
    65009484:	lea    rcx,[rbp+0x0]
    65009488:	call   0x6500d050
    6500948d:	nop
    6500948e:	cmp    QWORD PTR [rbp+0x518],0x10
    65009496:	jb     0x650094a4
    65009498:	mov    rcx,QWORD PTR [rbp+0x500]
    6500949f:	call   0x6501d190
    650094a4:	lea    r8,[rip+0x2ee15]        # 0x650382c0
    650094ab:	mov    edx,0x7
    650094b0:	lea    rcx,[rip+0x2ee49]        # 0x65038300
    650094b7:	call   0x6500bc30
    650094bc:	mov    rdx,rax
    650094bf:	mov    QWORD PTR [rbp+0x888],0xf
    650094ca:	mov    QWORD PTR [rbp+0x880],r13
    650094d1:	mov    BYTE PTR [rbp+0x870],0x0
    650094d8:	xor    eax,eax
    650094da:	mov    rcx,rbx
    650094dd:	mov    rdi,rdx
    650094e0:	repnz scas al,BYTE PTR es:[rdi]
    650094e2:	not    rcx
    650094e5:	lea    r8,[rcx-0x1]
    650094e9:	lea    rcx,[rbp+0x868]
    650094f0:	call   0x65002000
    650094f5:	nop
    650094f6:	lea    r8,[rbp+0x868]
    650094fd:	lea    rdx,[rbp+0xe00]
    65009504:	lea    rcx,[rbp+0x0]
    65009508:	call   0x6500d050
    6500950d:	nop
    6500950e:	cmp    QWORD PTR [rbp+0x888],0x10
    65009516:	jb     0x65009524
    65009518:	mov    rcx,QWORD PTR [rbp+0x870]
    6500951f:	call   0x6501d190
    65009524:	lea    r8,[rip+0x2eddd]        # 0x65038308
    6500952b:	mov    edx,0x5
    65009530:	lea    rcx,[rip+0x2ee05]        # 0x6503833c
    65009537:	call   0x6500bc30
    6500953c:	mov    rdx,rax
    6500953f:	mov    QWORD PTR [rbp+0x568],0xf
    6500954a:	mov    QWORD PTR [rbp+0x560],r13
    65009551:	mov    BYTE PTR [rbp+0x550],0x0
    65009558:	xor    eax,eax
    6500955a:	mov    rcx,rbx
    6500955d:	mov    rdi,rdx
    65009560:	repnz scas al,BYTE PTR es:[rdi]
    65009562:	not    rcx
    65009565:	lea    r8,[rcx-0x1]
    65009569:	lea    rcx,[rbp+0x548]
    65009570:	call   0x65002000
    65009575:	nop
    65009576:	lea    r8,[rbp+0x548]
    6500957d:	lea    rdx,[rbp+0xc80]
    65009584:	lea    rcx,[rbp+0x0]
    65009588:	call   0x6500d050
    6500958d:	nop
    6500958e:	cmp    QWORD PTR [rbp+0x568],0x10
    65009596:	jb     0x650095a4
    65009598:	mov    rcx,QWORD PTR [rbp+0x550]
    6500959f:	call   0x6501d190
    650095a4:	lea    r8,[rip+0x2ed9d]        # 0x65038348
    650095ab:	mov    edx,0x5
    650095b0:	lea    rcx,[rip+0x2edc1]        # 0x65038378
    650095b7:	call   0x6500bc30
    650095bc:	mov    rdx,rax
    650095bf:	mov    QWORD PTR [rbp+0x1a8],0xf
    650095ca:	mov    QWORD PTR [rbp+0x1a0],r13
    650095d1:	mov    BYTE PTR [rbp+0x190],0x0
    650095d8:	xor    eax,eax
    650095da:	mov    rcx,rbx
    650095dd:	mov    rdi,rdx
    650095e0:	repnz scas al,BYTE PTR es:[rdi]
    650095e2:	not    rcx
    650095e5:	lea    r8,[rcx-0x1]
    650095e9:	lea    rcx,[rbp+0x188]
    650095f0:	call   0x65002000
    650095f5:	nop
    650095f6:	lea    r8,[rbp+0x188]
    650095fd:	lea    rdx,[rbp+0xf80]
    65009604:	lea    rcx,[rbp+0x0]
    65009608:	call   0x6500d050
    6500960d:	nop
    6500960e:	cmp    QWORD PTR [rbp+0x1a8],0x10
    65009616:	jb     0x65009624
    65009618:	mov    rcx,QWORD PTR [rbp+0x190]
    6500961f:	call   0x6501d190
    65009624:	lea    r8,[rip+0x2ed55]        # 0x65038380
    6500962b:	mov    edx,0x7
    65009630:	lea    rcx,[rip+0x2ed81]        # 0x650383b8
    65009637:	call   0x6500bc30
    6500963c:	mov    rdx,rax
    6500963f:	mov    QWORD PTR [rbp+0x798],0xf
    6500964a:	mov    QWORD PTR [rbp+0x790],r13
    65009651:	mov    BYTE PTR [rbp+0x780],0x0
    65009658:	xor    eax,eax
    6500965a:	mov    rcx,rbx
    6500965d:	mov    rdi,rdx
    65009660:	repnz scas al,BYTE PTR es:[rdi]
    65009662:	not    rcx
    65009665:	lea    r8,[rcx-0x1]
    65009669:	lea    rcx,[rbp+0x778]
    65009670:	call   0x65002000
    65009675:	nop
    65009676:	lea    r8,[rbp+0x778]
    6500967d:	lea    rdx,[rbp+0xcb0]
    65009684:	lea    rcx,[rbp+0x0]
    65009688:	call   0x6500d050
    6500968d:	nop
    6500968e:	cmp    QWORD PTR [rbp+0x798],0x10
    65009696:	jb     0x650096a4
    65009698:	mov    rcx,QWORD PTR [rbp+0x780]
    6500969f:	call   0x6501d190
    650096a4:	lea    r8,[rip+0x2ed15]        # 0x650383c0
    650096ab:	mov    edx,0x6
    650096b0:	lea    rcx,[rip+0x2ed45]        # 0x650383fc
    650096b7:	call   0x6500bc30
    650096bc:	mov    rdx,rax
    650096bf:	mov    QWORD PTR [rbp+0x5b8],0xf
    650096ca:	mov    QWORD PTR [rbp+0x5b0],r13
    650096d1:	mov    BYTE PTR [rbp+0x5a0],0x0
    650096d8:	xor    eax,eax
    650096da:	mov    rcx,rbx
    650096dd:	mov    rdi,rdx
    650096e0:	repnz scas al,BYTE PTR es:[rdi]
    650096e2:	not    rcx
    650096e5:	lea    r8,[rcx-0x1]
    650096e9:	lea    rcx,[rbp+0x598]
    650096f0:	call   0x65002000
    650096f5:	nop
    650096f6:	lea    r8,[rbp+0x598]
    650096fd:	lea    rdx,[rbp+0xe30]
    65009704:	lea    rcx,[rbp+0x0]
    65009708:	call   0x6500d050
    6500970d:	nop
    6500970e:	cmp    QWORD PTR [rbp+0x5b8],0x10
    65009716:	jb     0x65009724
    65009718:	mov    rcx,QWORD PTR [rbp+0x5a0]
    6500971f:	call   0x6501d190
    65009724:	lea    r8,[rip+0x2ecdd]        # 0x65038408
    6500972b:	mov    edx,0xe
    65009730:	lea    rcx,[rip+0x2ecf9]        # 0x65038430
    65009737:	call   0x6500bc30
    6500973c:	mov    rdx,rax
    6500973f:	mov    QWORD PTR [rbp+0x1d0],0xf
    6500974a:	mov    QWORD PTR [rbp+0x1c8],r13
    65009751:	mov    BYTE PTR [rbp+0x1b8],0x0
    65009758:	xor    eax,eax
    6500975a:	mov    rcx,rbx
    6500975d:	mov    rdi,rdx
    65009760:	repnz scas al,BYTE PTR es:[rdi]
    65009762:	not    rcx
    65009765:	lea    r8,[rcx-0x1]
    65009769:	lea    rcx,[rbp+0x1b0]
    65009770:	call   0x65002000
    65009775:	nop
    65009776:	lea    r8,[rbp+0x1b0]
    6500977d:	lea    rdx,[rbp+0xce0]
    65009784:	lea    rcx,[rbp+0x0]
    65009788:	call   0x6500d050
    6500978d:	nop
    6500978e:	cmp    QWORD PTR [rbp+0x1d0],0x10
    65009796:	jb     0x650097a4
    65009798:	mov    rcx,QWORD PTR [rbp+0x1b8]
    6500979f:	call   0x6501d190
    650097a4:	lea    r8,[rip+0x2ec95]        # 0x65038440
    650097ab:	mov    edx,0x12
    650097b0:	lea    rcx,[rip+0x2ecb9]        # 0x65038470
    650097b7:	call   0x6500bc30
    650097bc:	mov    rdx,rax
    650097bf:	mov    QWORD PTR [rbp+0x220],0xf
    650097ca:	mov    QWORD PTR [rbp+0x218],r13
    650097d1:	mov    BYTE PTR [rbp+0x208],0x0
    650097d8:	xor    eax,eax
    650097da:	mov    rcx,rbx
    650097dd:	mov    rdi,rdx
    650097e0:	repnz scas al,BYTE PTR es:[rdi]
    650097e2:	not    rcx
    650097e5:	lea    r8,[rcx-0x1]
    650097e9:	lea    rcx,[rbp+0x200]
    650097f0:	call   0x65002000
    650097f5:	nop
    650097f6:	lea    r8,[rbp+0x200]
    650097fd:	lea    rdx,[rbp+0xa28]
    65009804:	lea    rcx,[rbp+0x0]
    65009808:	call   0x6500d050
    6500980d:	nop
    6500980e:	cmp    QWORD PTR [rbp+0x220],0x10
    65009816:	jb     0x65009824
    65009818:	mov    rcx,QWORD PTR [rbp+0x208]
    6500981f:	call   0x6501d190
    65009824:	lea    r8,[rip+0x2ec5d]        # 0x65038488
    6500982b:	mov    edx,0x17
    65009830:	lea    rcx,[rip+0x2ec79]        # 0x650384b0
    65009837:	call   0x6500bc30
    6500983c:	mov    rdx,rax
    6500983f:	mov    QWORD PTR [rbp+0x270],0xf
    6500984a:	mov    QWORD PTR [rbp+0x268],r13
    65009851:	mov    BYTE PTR [rbp+0x258],0x0
    65009858:	xor    eax,eax
    6500985a:	mov    rcx,rbx
    6500985d:	mov    rdi,rdx
    65009860:	repnz scas al,BYTE PTR es:[rdi]
    65009862:	not    rcx
    65009865:	lea    r8,[rcx-0x1]
    65009869:	lea    rcx,[rbp+0x250]
    65009870:	call   0x65002000
    65009875:	nop
    65009876:	lea    r8,[rbp+0x250]
    6500987d:	lea    rdx,[rbp+0xa58]
    65009884:	lea    rcx,[rbp+0x0]
    65009888:	call   0x6500d050
    6500988d:	nop
    6500988e:	cmp    QWORD PTR [rbp+0x270],0x10
    65009896:	jb     0x650098a4
    65009898:	mov    rcx,QWORD PTR [rbp+0x258]
    6500989f:	call   0x6501d190
    650098a4:	lea    r8,[rip+0x2ec25]        # 0x650384d0
    650098ab:	mov    edx,0x11
    650098b0:	lea    rcx,[rip+0x2ec59]        # 0x65038510
    650098b7:	call   0x6500bc30
    650098bc:	mov    rdx,rax
    650098bf:	mov    QWORD PTR [rbp+0x2c0],0xf
    650098ca:	mov    QWORD PTR [rbp+0x2b8],r13
    650098d1:	mov    BYTE PTR [rbp+0x2a8],0x0
    650098d8:	xor    eax,eax
    650098da:	mov    rcx,rbx
    650098dd:	mov    rdi,rdx
    650098e0:	repnz scas al,BYTE PTR es:[rdi]
    650098e2:	not    rcx
    650098e5:	lea    r8,[rcx-0x1]
    650098e9:	lea    rcx,[rbp+0x2a0]
    650098f0:	call   0x65002000
    650098f5:	nop
    650098f6:	lea    r8,[rbp+0x2a0]
    650098fd:	lea    rdx,[rbp+0xa88]
    65009904:	lea    rcx,[rbp+0x0]
    65009908:	call   0x6500d050
    6500990d:	nop
    6500990e:	cmp    QWORD PTR [rbp+0x2c0],0x10
    65009916:	jb     0x65009924
    65009918:	mov    rcx,QWORD PTR [rbp+0x2a8]
    6500991f:	call   0x6501d190
    65009924:	lea    r8,[rip+0x2ebfd]        # 0x65038528
    6500992b:	mov    edx,0x8
    65009930:	lea    rcx,[rip+0x2ec21]        # 0x65038558
    65009937:	call   0x6500bc30
    6500993c:	mov    rdx,rax
    6500993f:	mov    QWORD PTR [rbp+0x310],0xf
    6500994a:	mov    QWORD PTR [rbp+0x308],r13
    65009951:	mov    BYTE PTR [rbp+0x2f8],0x0
    65009958:	xor    eax,eax
    6500995a:	mov    rcx,rbx
    6500995d:	mov    rdi,rdx
    65009960:	repnz scas al,BYTE PTR es:[rdi]
    65009962:	not    rcx
    65009965:	lea    r8,[rcx-0x1]
    65009969:	lea    rcx,[rbp+0x2f0]
    65009970:	call   0x65002000
    65009975:	nop
    65009976:	lea    r8,[rbp+0x2f0]
    6500997d:	lea    rdx,[rbp+0xab8]
    65009984:	lea    rcx,[rbp+0x0]
    65009988:	call   0x6500d050
    6500998d:	nop
    6500998e:	cmp    QWORD PTR [rbp+0x310],0x10
    65009996:	jb     0x650099a4
    65009998:	mov    rcx,QWORD PTR [rbp+0x2f8]
    6500999f:	call   0x6501d190
    650099a4:	lea    r8,[rip+0x2ebbd]        # 0x65038568
    650099ab:	mov    edx,0x6
    650099b0:	lea    rcx,[rip+0x2ebe9]        # 0x650385a0
    650099b7:	call   0x6500bc30
    650099bc:	mov    rdx,rax
    650099bf:	mov    QWORD PTR [rbp+0x360],0xf
    650099ca:	mov    QWORD PTR [rbp+0x358],r13
    650099d1:	mov    BYTE PTR [rbp+0x348],0x0
    650099d8:	xor    eax,eax
    650099da:	mov    rcx,rbx
    650099dd:	mov    rdi,rdx
    650099e0:	repnz scas al,BYTE PTR es:[rdi]
    650099e2:	not    rcx
    650099e5:	lea    r8,[rcx-0x1]
    650099e9:	lea    rcx,[rbp+0x340]
    650099f0:	call   0x65002000
    650099f5:	nop
    650099f6:	lea    r8,[rbp+0x340]
    650099fd:	lea    rdx,[rbp+0xae8]
    65009a04:	lea    rcx,[rbp+0x0]
    65009a08:	call   0x6500d050
    65009a0d:	nop
    65009a0e:	cmp    QWORD PTR [rbp+0x360],0x10
    65009a16:	jb     0x65009a24
    65009a18:	mov    rcx,QWORD PTR [rbp+0x348]
    65009a1f:	call   0x6501d190
    65009a24:	lea    r8,[rip+0x2eb7d]        # 0x650385a8
    65009a2b:	mov    edx,0x6
    65009a30:	lea    rcx,[rip+0x2ebb1]        # 0x650385e8
    65009a37:	call   0x6500bc30
    65009a3c:	mov    rdx,rax
    65009a3f:	mov    QWORD PTR [rbp+0x3b0],0xf
    65009a4a:	mov    QWORD PTR [rbp+0x3a8],r13
    65009a51:	mov    BYTE PTR [rbp+0x398],0x0
    65009a58:	xor    eax,eax
    65009a5a:	mov    rcx,rbx
    65009a5d:	mov    rdi,rdx
    65009a60:	repnz scas al,BYTE PTR es:[rdi]
    65009a62:	not    rcx
    65009a65:	lea    r8,[rcx-0x1]
    65009a69:	lea    rcx,[rbp+0x390]
    65009a70:	call   0x65002000
    65009a75:	nop
    65009a76:	lea    r8,[rbp+0x390]
    65009a7d:	lea    rdx,[rbp+0xb18]
    65009a84:	lea    rcx,[rbp+0x0]
    65009a88:	call   0x6500d050
    65009a8d:	nop
    65009a8e:	cmp    QWORD PTR [rbp+0x3b0],0x10
    65009a96:	jb     0x65009aa4
    65009a98:	mov    rcx,QWORD PTR [rbp+0x398]
    65009a9f:	call   0x6501d190
    65009aa4:	lea    r8,[rip+0x2eb45]        # 0x650385f0
    65009aab:	mov    edx,0x8
    65009ab0:	lea    rcx,[rip+0x2eb71]        # 0x65038628
    65009ab7:	call   0x6500bc30
    65009abc:	mov    rdx,rax
    65009abf:	mov    QWORD PTR [rbp+0x400],0xf
    65009aca:	mov    QWORD PTR [rbp+0x3f8],r13
    65009ad1:	mov    BYTE PTR [rbp+0x3e8],0x0
    65009ad8:	xor    eax,eax
    65009ada:	mov    rcx,rbx
    65009add:	mov    rdi,rdx
    65009ae0:	repnz scas al,BYTE PTR es:[rdi]
    65009ae2:	not    rcx
    65009ae5:	lea    r8,[rcx-0x1]
    65009ae9:	lea    rcx,[rbp+0x3e0]
    65009af0:	call   0x65002000
    65009af5:	nop
    65009af6:	lea    r8,[rbp+0x3e0]
    65009afd:	lea    rdx,[rbp+0xb48]
    65009b04:	lea    rcx,[rbp+0x0]
    65009b08:	call   0x6500d050
    65009b0d:	nop
    65009b0e:	cmp    QWORD PTR [rbp+0x400],0x10
    65009b16:	jb     0x65009b24
    65009b18:	mov    rcx,QWORD PTR [rbp+0x3e8]
    65009b1f:	call   0x6501d190
    65009b24:	lea    r8,[rip+0x2eb0d]        # 0x65038638
    65009b2b:	mov    edx,0x6
    65009b30:	lea    rcx,[rip+0x2eb29]        # 0x65038660
    65009b37:	call   0x6500bc30
    65009b3c:	mov    rdx,rax
    65009b3f:	mov    QWORD PTR [rbp+0x450],0xf
    65009b4a:	mov    QWORD PTR [rbp+0x448],r13
    65009b51:	mov    BYTE PTR [rbp+0x438],0x0
    65009b58:	xor    eax,eax
    65009b5a:	mov    rcx,rbx
    65009b5d:	mov    rdi,rdx
    65009b60:	repnz scas al,BYTE PTR es:[rdi]
    65009b62:	not    rcx
    65009b65:	lea    r8,[rcx-0x1]
    65009b69:	lea    rcx,[rbp+0x430]
    65009b70:	call   0x65002000
    65009b75:	nop
    65009b76:	lea    r8,[rbp+0x430]
    65009b7d:	lea    rdx,[rbp+0xb78]
    65009b84:	lea    rcx,[rbp+0x0]
    65009b88:	call   0x6500d050
    65009b8d:	nop
    65009b8e:	cmp    QWORD PTR [rbp+0x450],0x10
    65009b96:	jb     0x65009ba4
    65009b98:	mov    rcx,QWORD PTR [rbp+0x438]
    65009b9f:	call   0x6501d190
    65009ba4:	lea    r8,[rip+0x2eabd]        # 0x65038668
    65009bab:	mov    edx,0x7
    65009bb0:	lea    rcx,[rip+0x2ead9]        # 0x65038690
    65009bb7:	call   0x6500bc30
    65009bbc:	mov    rdx,rax
    65009bbf:	mov    QWORD PTR [rbp+0x4a0],0xf
    65009bca:	mov    QWORD PTR [rbp+0x498],r13
    65009bd1:	mov    BYTE PTR [rbp+0x488],0x0
    65009bd8:	xor    eax,eax
    65009bda:	mov    rcx,rbx
    65009bdd:	mov    rdi,rdx
    65009be0:	repnz scas al,BYTE PTR es:[rdi]
    65009be2:	not    rcx
    65009be5:	lea    r8,[rcx-0x1]
    65009be9:	lea    rcx,[rbp+0x480]
    65009bf0:	call   0x65002000
    65009bf5:	nop
    65009bf6:	lea    r8,[rbp+0x480]
    65009bfd:	lea    rdx,[rbp+0xba8]
    65009c04:	lea    rcx,[rbp+0x0]
    65009c08:	call   0x6500d050
    65009c0d:	nop
    65009c0e:	cmp    QWORD PTR [rbp+0x4a0],0x10
    65009c16:	jb     0x65009c24
    65009c18:	mov    rcx,QWORD PTR [rbp+0x488]
    65009c1f:	call   0x6501d190
    65009c24:	lea    r8,[rip+0x2ea6d]        # 0x65038698
    65009c2b:	mov    edx,0x6
    65009c30:	lea    rcx,[rip+0x2ea99]        # 0x650386d0
    65009c37:	call   0x6500bc30
    65009c3c:	mov    rdx,rax
    65009c3f:	mov    QWORD PTR [rbp+0x4f0],0xf
    65009c4a:	mov    QWORD PTR [rbp+0x4e8],r13
    65009c51:	mov    BYTE PTR [rbp+0x4d8],0x0
    65009c58:	xor    eax,eax
    65009c5a:	mov    rcx,rbx
    65009c5d:	mov    rdi,rdx
    65009c60:	repnz scas al,BYTE PTR es:[rdi]
    65009c62:	not    rcx
    65009c65:	lea    r8,[rcx-0x1]
    65009c69:	lea    rcx,[rbp+0x4d0]
    65009c70:	call   0x65002000
    65009c75:	nop
    65009c76:	lea    r8,[rbp+0x4d0]
    65009c7d:	lea    rdx,[rbp+0xbd8]
    65009c84:	lea    rcx,[rbp+0x0]
    65009c88:	call   0x6500d050
    65009c8d:	nop
    65009c8e:	cmp    QWORD PTR [rbp+0x4f0],0x10
    65009c96:	jb     0x65009ca4
    65009c98:	mov    rcx,QWORD PTR [rbp+0x4d8]
    65009c9f:	call   0x6501d190
    65009ca4:	lea    r8,[rip+0x2ea2d]        # 0x650386d8
    65009cab:	mov    edx,0x6
    65009cb0:	lea    rcx,[rip+0x2ea49]        # 0x65038700
    65009cb7:	call   0x6500bc30
    65009cbc:	mov    rdx,rax
    65009cbf:	mov    QWORD PTR [rbp+0x540],0xf
    65009cca:	mov    QWORD PTR [rbp+0x538],r13
    65009cd1:	mov    BYTE PTR [rbp+0x528],0x0
    65009cd8:	xor    eax,eax
    65009cda:	mov    rcx,rbx
    65009cdd:	mov    rdi,rdx
    65009ce0:	repnz scas al,BYTE PTR es:[rdi]
    65009ce2:	not    rcx
    65009ce5:	lea    r8,[rcx-0x1]
    65009ce9:	lea    rcx,[rbp+0x520]
    65009cf0:	call   0x65002000
    65009cf5:	nop
    65009cf6:	lea    r8,[rbp+0x520]
    65009cfd:	lea    rdx,[rbp+0xc08]
    65009d04:	lea    rcx,[rbp+0x0]
    65009d08:	call   0x6500d050
    65009d0d:	nop
    65009d0e:	cmp    QWORD PTR [rbp+0x540],0x10
    65009d16:	jb     0x65009d24
    65009d18:	mov    rcx,QWORD PTR [rbp+0x528]
    65009d1f:	call   0x6501d190
    65009d24:	lea    r8,[rip+0x2e9dd]        # 0x65038708
    65009d2b:	mov    edx,0x5
    65009d30:	lea    rcx,[rip+0x2ea05]        # 0x6503873c
    65009d37:	call   0x6500bc30
    65009d3c:	mov    rdx,rax
    65009d3f:	mov    QWORD PTR [rbp+0x590],0xf
    65009d4a:	mov    QWORD PTR [rbp+0x588],r13
    65009d51:	mov    BYTE PTR [rbp+0x578],0x0
    65009d58:	xor    eax,eax
    65009d5a:	mov    rcx,rbx
    65009d5d:	mov    rdi,rdx
    65009d60:	repnz scas al,BYTE PTR es:[rdi]
    65009d62:	not    rcx
    65009d65:	lea    r8,[rcx-0x1]
    65009d69:	lea    rcx,[rbp+0x570]
    65009d70:	call   0x65002000
    65009d75:	nop
    65009d76:	lea    r8,[rbp+0x570]
    65009d7d:	lea    rdx,[rbp+0xc38]
    65009d84:	lea    rcx,[rbp+0x0]
    65009d88:	call   0x6500d050
    65009d8d:	nop
    65009d8e:	cmp    QWORD PTR [rbp+0x590],0x10
    65009d96:	jb     0x65009da4
    65009d98:	mov    rcx,QWORD PTR [rbp+0x578]
    65009d9f:	call   0x6501d190
    65009da4:	lea    r8,[rip+0x2e99d]        # 0x65038748
    65009dab:	mov    edx,0x6
    65009db0:	lea    rcx,[rip+0x2e9bd]        # 0x65038774
    65009db7:	call   0x6500bc30
    65009dbc:	mov    rdx,rax
    65009dbf:	mov    QWORD PTR [rbp+0x5e0],0xf
    65009dca:	mov    QWORD PTR [rbp+0x5d8],r13
    65009dd1:	mov    BYTE PTR [rbp+0x5c8],0x0
    65009dd8:	xor    eax,eax
    65009dda:	mov    rcx,rbx
    65009ddd:	mov    rdi,rdx
    65009de0:	repnz scas al,BYTE PTR es:[rdi]
    65009de2:	not    rcx
    65009de5:	lea    r8,[rcx-0x1]
    65009de9:	lea    rcx,[rbp+0x5c0]
    65009df0:	call   0x65002000
    65009df5:	nop
    65009df6:	lea    r8,[rbp+0x5c0]
    65009dfd:	lea    rdx,[rbp+0xc68]
    65009e04:	lea    rcx,[rbp+0x0]
    65009e08:	call   0x6500d050
    65009e0d:	nop
    65009e0e:	cmp    QWORD PTR [rbp+0x5e0],0x10
    65009e16:	jb     0x65009e24
    65009e18:	mov    rcx,QWORD PTR [rbp+0x5c8]
    65009e1f:	call   0x6501d190
    65009e24:	lea    r8,[rip+0x2e955]        # 0x65038780
    65009e2b:	mov    edx,0xa
    65009e30:	lea    rcx,[rip+0x2e989]        # 0x650387c0
    65009e37:	call   0x6500bc30
    65009e3c:	mov    rdx,rax
    65009e3f:	mov    QWORD PTR [rbp+0x630],0xf
    65009e4a:	mov    QWORD PTR [rbp+0x628],r13
    65009e51:	mov    BYTE PTR [rbp+0x618],0x0
    65009e58:	xor    eax,eax
    65009e5a:	mov    rcx,rbx
    65009e5d:	mov    rdi,rdx
    65009e60:	repnz scas al,BYTE PTR es:[rdi]
    65009e62:	not    rcx
    65009e65:	lea    r8,[rcx-0x1]
    65009e69:	lea    rcx,[rbp+0x610]
    65009e70:	call   0x65002000
    65009e75:	nop
    65009e76:	lea    r8,[rbp+0x610]
    65009e7d:	lea    rdx,[rbp+0xc98]
    65009e84:	lea    rcx,[rbp+0x0]
    65009e88:	call   0x6500d050
    65009e8d:	nop
    65009e8e:	cmp    QWORD PTR [rbp+0x630],0x10
    65009e96:	jb     0x65009ea4
    65009e98:	mov    rcx,QWORD PTR [rbp+0x618]
    65009e9f:	call   0x6501d190
    65009ea4:	lea    r8,[rip+0x2e925]        # 0x650387d0
    65009eab:	mov    edx,0xf
    65009eb0:	lea    rcx,[rip+0x2e959]        # 0x65038810
    65009eb7:	call   0x6500bc30
    65009ebc:	mov    rdx,rax
    65009ebf:	mov    QWORD PTR [rbp+0x680],0xf
    65009eca:	mov    QWORD PTR [rbp+0x678],r13
    65009ed1:	mov    BYTE PTR [rbp+0x668],0x0
    65009ed8:	xor    eax,eax
    65009eda:	mov    rcx,rbx
    65009edd:	mov    rdi,rdx
    65009ee0:	repnz scas al,BYTE PTR es:[rdi]
    65009ee2:	not    rcx
    65009ee5:	lea    r8,[rcx-0x1]
    65009ee9:	lea    rcx,[rbp+0x660]
    65009ef0:	call   0x65002000
    65009ef5:	nop
    65009ef6:	lea    r8,[rbp+0x660]
    65009efd:	lea    rdx,[rbp+0xcc8]
    65009f04:	lea    rcx,[rbp+0x0]
    65009f08:	call   0x6500d050
    65009f0d:	nop
    65009f0e:	cmp    QWORD PTR [rbp+0x680],0x10
    65009f16:	jb     0x65009f24
    65009f18:	mov    rcx,QWORD PTR [rbp+0x668]
    65009f1f:	call   0x6501d190
    65009f24:	lea    r8,[rip+0x2e8f5]        # 0x65038820
    65009f2b:	mov    edx,0xa
    65009f30:	lea    rcx,[rip+0x2e919]        # 0x65038850
    65009f37:	call   0x6500bc30
    65009f3c:	mov    rdx,rax
    65009f3f:	mov    QWORD PTR [rbp+0x6d0],0xf
    65009f4a:	mov    QWORD PTR [rbp+0x6c8],r13
    65009f51:	mov    BYTE PTR [rbp+0x6b8],0x0
    65009f58:	xor    eax,eax
    65009f5a:	mov    rcx,rbx
    65009f5d:	mov    rdi,rdx
    65009f60:	repnz scas al,BYTE PTR es:[rdi]
    65009f62:	not    rcx
    65009f65:	lea    r8,[rcx-0x1]
    65009f69:	lea    rcx,[rbp+0x6b0]
    65009f70:	call   0x65002000
    65009f75:	nop
    65009f76:	lea    r8,[rbp+0x6b0]
    65009f7d:	lea    rdx,[rbp+0xcf8]
    65009f84:	lea    rcx,[rbp+0x0]
    65009f88:	call   0x6500d050
    65009f8d:	nop
    65009f8e:	cmp    QWORD PTR [rbp+0x6d0],0x10
    65009f96:	jb     0x65009fa4
    65009f98:	mov    rcx,QWORD PTR [rbp+0x6b8]
    65009f9f:	call   0x6501d190
    65009fa4:	lea    r8,[rip+0x2e8b5]        # 0x65038860
    65009fab:	mov    edx,0xb
    65009fb0:	lea    rcx,[rip+0x2e8d9]        # 0x65038890
    65009fb7:	call   0x6500bc30
    65009fbc:	mov    rdx,rax
    65009fbf:	mov    QWORD PTR [rbp+0x720],0xf
    65009fca:	mov    QWORD PTR [rbp+0x718],r13
    65009fd1:	mov    BYTE PTR [rbp+0x708],0x0
    65009fd8:	xor    eax,eax
    65009fda:	mov    rcx,rbx
    65009fdd:	mov    rdi,rdx
    65009fe0:	repnz scas al,BYTE PTR es:[rdi]
    65009fe2:	not    rcx
    65009fe5:	lea    r8,[rcx-0x1]
    65009fe9:	lea    rcx,[rbp+0x700]
    65009ff0:	call   0x65002000
    65009ff5:	nop
    65009ff6:	lea    r8,[rbp+0x700]
    65009ffd:	lea    rdx,[rbp+0xd28]
    6500a004:	lea    rcx,[rbp+0x0]
    6500a008:	call   0x6500d050
    6500a00d:	nop
    6500a00e:	cmp    QWORD PTR [rbp+0x720],0x10
    6500a016:	jb     0x6500a024
    6500a018:	mov    rcx,QWORD PTR [rbp+0x708]
    6500a01f:	call   0x6501d190
    6500a024:	lea    r8,[rip+0x2e875]        # 0x650388a0
    6500a02b:	mov    edx,0x1e
    6500a030:	lea    rcx,[rip+0x2e899]        # 0x650388d0
    6500a037:	call   0x6500bc30
    6500a03c:	mov    rdx,rax
    6500a03f:	mov    QWORD PTR [rbp+0x770],0xf
    6500a04a:	mov    QWORD PTR [rbp+0x768],r13
    6500a051:	mov    BYTE PTR [rbp+0x758],0x0
    6500a058:	xor    eax,eax
    6500a05a:	mov    rcx,rbx
    6500a05d:	mov    rdi,rdx
    6500a060:	repnz scas al,BYTE PTR es:[rdi]
    6500a062:	not    rcx
    6500a065:	lea    r8,[rcx-0x1]
    6500a069:	lea    rcx,[rbp+0x750]
    6500a070:	call   0x65002000
    6500a075:	nop
    6500a076:	lea    r8,[rbp+0x750]
    6500a07d:	lea    rdx,[rbp+0xd58]
    6500a084:	lea    rcx,[rbp+0x0]
    6500a088:	call   0x6500d050
    6500a08d:	nop
    6500a08e:	cmp    QWORD PTR [rbp+0x770],0x10
    6500a096:	jb     0x6500a0a4
    6500a098:	mov    rcx,QWORD PTR [rbp+0x758]
    6500a09f:	call   0x6501d190
    6500a0a4:	lea    r8,[rip+0x2e845]        # 0x650388f0
    6500a0ab:	mov    edx,0x16
    6500a0b0:	lea    rcx,[rip+0x2e861]        # 0x65038918
    6500a0b7:	call   0x6500bc30
    6500a0bc:	mov    rdx,rax
    6500a0bf:	mov    QWORD PTR [rbp+0x7c0],0xf
    6500a0ca:	mov    QWORD PTR [rbp+0x7b8],r13
    6500a0d1:	mov    BYTE PTR [rbp+0x7a8],0x0
    6500a0d8:	xor    eax,eax
    6500a0da:	mov    rcx,rbx
    6500a0dd:	mov    rdi,rdx
    6500a0e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a0e2:	not    rcx
    6500a0e5:	lea    r8,[rcx-0x1]
    6500a0e9:	lea    rcx,[rbp+0x7a0]
    6500a0f0:	call   0x65002000
    6500a0f5:	nop
    6500a0f6:	lea    r8,[rbp+0x7a0]
    6500a0fd:	lea    rdx,[rbp+0xd88]
    6500a104:	lea    rcx,[rbp+0x0]
    6500a108:	call   0x6500d050
    6500a10d:	nop
    6500a10e:	cmp    QWORD PTR [rbp+0x7c0],0x10
    6500a116:	jb     0x6500a124
    6500a118:	mov    rcx,QWORD PTR [rbp+0x7a8]
    6500a11f:	call   0x6501d190
    6500a124:	lea    r8,[rip+0x2e805]        # 0x65038930
    6500a12b:	mov    edx,0x19
    6500a130:	lea    rcx,[rip+0x2e831]        # 0x65038968
    6500a137:	call   0x6500bc30
    6500a13c:	mov    rdx,rax
    6500a13f:	mov    QWORD PTR [rbp+0x810],0xf
    6500a14a:	mov    QWORD PTR [rbp+0x808],r13
    6500a151:	mov    BYTE PTR [rbp+0x7f8],0x0
    6500a158:	xor    eax,eax
    6500a15a:	mov    rcx,rbx
    6500a15d:	mov    rdi,rdx
    6500a160:	repnz scas al,BYTE PTR es:[rdi]
    6500a162:	not    rcx
    6500a165:	lea    r8,[rcx-0x1]
    6500a169:	lea    rcx,[rbp+0x7f0]
    6500a170:	call   0x65002000
    6500a175:	nop
    6500a176:	lea    r8,[rbp+0x7f0]
    6500a17d:	lea    rdx,[rbp+0xdb8]
    6500a184:	lea    rcx,[rbp+0x0]
    6500a188:	call   0x6500d050
    6500a18d:	nop
    6500a18e:	cmp    QWORD PTR [rbp+0x810],0x10
    6500a196:	jb     0x6500a1a4
    6500a198:	mov    rcx,QWORD PTR [rbp+0x7f8]
    6500a19f:	call   0x6501d190
    6500a1a4:	lea    r8,[rip+0x2e7dd]        # 0x65038988
    6500a1ab:	mov    edx,0x7
    6500a1b0:	lea    rcx,[rip+0x2e801]        # 0x650389b8
    6500a1b7:	call   0x6500bc30
    6500a1bc:	mov    rdx,rax
    6500a1bf:	mov    QWORD PTR [rbp+0x860],0xf
    6500a1ca:	mov    QWORD PTR [rbp+0x858],r13
    6500a1d1:	mov    BYTE PTR [rbp+0x848],0x0
    6500a1d8:	xor    eax,eax
    6500a1da:	mov    rcx,rbx
    6500a1dd:	mov    rdi,rdx
    6500a1e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a1e2:	not    rcx
    6500a1e5:	lea    r8,[rcx-0x1]
    6500a1e9:	lea    rcx,[rbp+0x840]
    6500a1f0:	call   0x65002000
    6500a1f5:	nop
    6500a1f6:	lea    r8,[rbp+0x840]
    6500a1fd:	lea    rdx,[rbp+0xde8]
    6500a204:	lea    rcx,[rbp+0x0]
    6500a208:	call   0x6500d050
    6500a20d:	nop
    6500a20e:	cmp    QWORD PTR [rbp+0x860],0x10
    6500a216:	jb     0x6500a224
    6500a218:	mov    rcx,QWORD PTR [rbp+0x848]
    6500a21f:	call   0x6501d190
    6500a224:	lea    r8,[rip+0x2e795]        # 0x650389c0
    6500a22b:	mov    edx,0x5
    6500a230:	lea    rcx,[rip+0x2e7c9]        # 0x65038a00
    6500a237:	call   0x6500bc30
    6500a23c:	mov    rdx,rax
    6500a23f:	mov    QWORD PTR [rbp+0x8b0],0xf
    6500a24a:	mov    QWORD PTR [rbp+0x8a8],r13
    6500a251:	mov    BYTE PTR [rbp+0x898],0x0
    6500a258:	xor    eax,eax
    6500a25a:	mov    rcx,rbx
    6500a25d:	mov    rdi,rdx
    6500a260:	repnz scas al,BYTE PTR es:[rdi]
    6500a262:	not    rcx
    6500a265:	lea    r8,[rcx-0x1]
    6500a269:	lea    rcx,[rbp+0x890]
    6500a270:	call   0x65002000
    6500a275:	nop
    6500a276:	lea    r8,[rbp+0x890]
    6500a27d:	lea    rdx,[rbp+0xe18]
    6500a284:	lea    rcx,[rbp+0x0]
    6500a288:	call   0x6500d050
    6500a28d:	nop
    6500a28e:	cmp    QWORD PTR [rbp+0x8b0],0x10
    6500a296:	jb     0x6500a2a4
    6500a298:	mov    rcx,QWORD PTR [rbp+0x898]
    6500a29f:	call   0x6501d190
    6500a2a4:	lea    r8,[rip+0x2e75d]        # 0x65038a08
    6500a2ab:	mov    edx,0xb
    6500a2b0:	lea    rcx,[rip+0x2e791]        # 0x65038a48
    6500a2b7:	call   0x6500bc30
    6500a2bc:	mov    rdx,rax
    6500a2bf:	mov    QWORD PTR [rbp+0x900],0xf
    6500a2ca:	mov    QWORD PTR [rbp+0x8f8],r13
    6500a2d1:	mov    BYTE PTR [rbp+0x8e8],0x0
    6500a2d8:	xor    eax,eax
    6500a2da:	mov    rcx,rbx
    6500a2dd:	mov    rdi,rdx
    6500a2e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a2e2:	not    rcx
    6500a2e5:	lea    r8,[rcx-0x1]
    6500a2e9:	lea    rcx,[rbp+0x8e0]
    6500a2f0:	call   0x65002000
    6500a2f5:	nop
    6500a2f6:	lea    r8,[rbp+0x8e0]
    6500a2fd:	lea    rdx,[rbp+0xa10]
    6500a304:	lea    rcx,[rbp+0x0]
    6500a308:	call   0x6500d050
    6500a30d:	nop
    6500a30e:	cmp    QWORD PTR [rbp+0x900],0x10
    6500a316:	jb     0x6500a324
    6500a318:	mov    rcx,QWORD PTR [rbp+0x8e8]
    6500a31f:	call   0x6501d190
    6500a324:	lea    r8,[rip+0x2e72d]        # 0x65038a58
    6500a32b:	mov    edx,0xc
    6500a330:	lea    rcx,[rip+0x2e751]        # 0x65038a88
    6500a337:	call   0x6500bc30
    6500a33c:	mov    rdx,rax
    6500a33f:	mov    QWORD PTR [rbp+0x950],0xf
    6500a34a:	mov    QWORD PTR [rbp+0x948],r13
    6500a351:	mov    BYTE PTR [rbp+0x938],0x0
    6500a358:	xor    eax,eax
    6500a35a:	mov    rcx,rbx
    6500a35d:	mov    rdi,rdx
    6500a360:	repnz scas al,BYTE PTR es:[rdi]
    6500a362:	not    rcx
    6500a365:	lea    r8,[rcx-0x1]
    6500a369:	lea    rcx,[rbp+0x930]
    6500a370:	call   0x65002000
    6500a375:	nop
    6500a376:	lea    r8,[rbp+0x930]
    6500a37d:	lea    rdx,[rbp+0xe78]
    6500a384:	lea    rcx,[rbp+0x0]
    6500a388:	call   0x6500d050
    6500a38d:	nop
    6500a38e:	cmp    QWORD PTR [rbp+0x950],0x10
    6500a396:	jb     0x6500a3a4
    6500a398:	mov    rcx,QWORD PTR [rbp+0x938]
    6500a39f:	call   0x6501d190
    6500a3a4:	lea    r8,[rip+0x2e6ed]        # 0x65038a98
    6500a3ab:	mov    edx,0x8
    6500a3b0:	lea    rcx,[rip+0x2e711]        # 0x65038ac8
    6500a3b7:	call   0x6500bc30
    6500a3bc:	mov    rdx,rax
    6500a3bf:	mov    QWORD PTR [rbp+0x9a0],0xf
    6500a3ca:	mov    QWORD PTR [rbp+0x998],r13
    6500a3d1:	mov    BYTE PTR [rbp+0x988],0x0
    6500a3d8:	xor    eax,eax
    6500a3da:	mov    rcx,rbx
    6500a3dd:	mov    rdi,rdx
    6500a3e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a3e2:	not    rcx
    6500a3e5:	lea    r8,[rcx-0x1]
    6500a3e9:	lea    rcx,[rbp+0x980]
    6500a3f0:	call   0x65002000
    6500a3f5:	nop
    6500a3f6:	lea    r8,[rbp+0x980]
    6500a3fd:	lea    rdx,[rbp+0xea8]
    6500a404:	lea    rcx,[rbp+0x0]
    6500a408:	call   0x6500d050
    6500a40d:	nop
    6500a40e:	cmp    QWORD PTR [rbp+0x9a0],0x10
    6500a416:	jb     0x6500a424
    6500a418:	mov    rcx,QWORD PTR [rbp+0x988]
    6500a41f:	call   0x6501d190
    6500a424:	lea    r8,[rip+0x2e6ad]        # 0x65038ad8
    6500a42b:	mov    edx,0xc
    6500a430:	lea    rcx,[rip+0x2e6d1]        # 0x65038b08
    6500a437:	call   0x6500bc30
    6500a43c:	mov    rdx,rax
    6500a43f:	mov    QWORD PTR [rbp+0x1f8],0xf
    6500a44a:	mov    QWORD PTR [rbp+0x1f0],r13
    6500a451:	mov    BYTE PTR [rbp+0x1e0],0x0
    6500a458:	xor    eax,eax
    6500a45a:	mov    rcx,rbx
    6500a45d:	mov    rdi,rdx
    6500a460:	repnz scas al,BYTE PTR es:[rdi]
    6500a462:	not    rcx
    6500a465:	lea    r8,[rcx-0x1]
    6500a469:	lea    rcx,[rbp+0x1d8]
    6500a470:	call   0x65002000
    6500a475:	nop
    6500a476:	lea    r8,[rbp+0x1d8]
    6500a47d:	lea    rdx,[rbp+0xed8]
    6500a484:	lea    rcx,[rbp+0x0]
    6500a488:	call   0x6500d050
    6500a48d:	nop
    6500a48e:	cmp    QWORD PTR [rbp+0x1f8],0x10
    6500a496:	jb     0x6500a4a4
    6500a498:	mov    rcx,QWORD PTR [rbp+0x1e0]
    6500a49f:	call   0x6501d190
    6500a4a4:	lea    r8,[rip+0x2e66d]        # 0x65038b18
    6500a4ab:	mov    edx,0xa
    6500a4b0:	lea    rcx,[rip+0x2e699]        # 0x65038b50
    6500a4b7:	call   0x6500bc30
    6500a4bc:	mov    rdx,rax
    6500a4bf:	mov    QWORD PTR [rbp+0x978],0xf
    6500a4ca:	mov    QWORD PTR [rbp+0x970],r13
    6500a4d1:	mov    BYTE PTR [rbp+0x960],0x0
    6500a4d8:	xor    eax,eax
    6500a4da:	mov    rcx,rbx
    6500a4dd:	mov    rdi,rdx
    6500a4e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a4e2:	not    rcx
    6500a4e5:	lea    r8,[rcx-0x1]
    6500a4e9:	lea    rcx,[rbp+0x958]
    6500a4f0:	call   0x65002000
    6500a4f5:	nop
    6500a4f6:	lea    r8,[rbp+0x958]
    6500a4fd:	lea    rdx,[rbp+0xf08]
    6500a504:	lea    rcx,[rbp+0x0]
    6500a508:	call   0x6500d050
    6500a50d:	nop
    6500a50e:	cmp    QWORD PTR [rbp+0x978],0x10
    6500a516:	jb     0x6500a524
    6500a518:	mov    rcx,QWORD PTR [rbp+0x960]
    6500a51f:	call   0x6501d190
    6500a524:	lea    rdx,[rbp+0x0]
    6500a528:	lea    rcx,[rbp+0x120]
    6500a52f:	call   0x65006100
    6500a534:	nop
    6500a535:	mov    rdx,rax
    6500a538:	lea    rcx,[rip+0x3c9d9]        # 0x65046f18
    6500a53f:	call   0x6500cf50
    6500a544:	nop
    6500a545:	mov    rax,QWORD PTR [rbp+0x128]
    6500a54c:	mov    QWORD PTR [rbp+0x28],rax
    6500a550:	lea    rcx,[rbp+0x120]
    6500a557:	mov    QWORD PTR [rbp+0x20],rcx
    6500a55b:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    6500a55f:	movdqa XMMWORD PTR [rbp+0x9c0],xmm0
    6500a567:	mov    rax,QWORD PTR [rax]
    6500a56a:	mov    QWORD PTR [rbp+0x28],rax
    6500a56e:	lea    rax,[rbp+0x120]
    6500a575:	mov    QWORD PTR [rbp+0x20],rax
    6500a579:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    6500a57d:	movdqa XMMWORD PTR [rbp+0x9b0],xmm0
    6500a585:	lea    r9,[rbp+0x9c0]
    6500a58c:	lea    r8,[rbp+0x9b0]
    6500a593:	lea    rdx,[rbp+0x9f0]
    6500a59a:	lea    rcx,[rbp+0x120]
    6500a5a1:	call   0x6500d770
    6500a5a6:	mov    rcx,QWORD PTR [rbp+0x128]
    6500a5ad:	call   0x6501d190
    6500a5b2:	nop
    6500a5b3:	mov    rax,QWORD PTR [rbp+0x8]
    6500a5b7:	mov    QWORD PTR [rbp+0x28],rax
    6500a5bb:	lea    rcx,[rbp+0x0]
    6500a5bf:	mov    QWORD PTR [rbp+0x20],rcx
    6500a5c3:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    6500a5c7:	movdqa XMMWORD PTR [rbp+0x9e0],xmm0
    6500a5cf:	mov    rax,QWORD PTR [rax]
    6500a5d2:	mov    QWORD PTR [rbp+0x28],rax
    6500a5d6:	lea    rax,[rbp+0x0]
    6500a5da:	mov    QWORD PTR [rbp+0x20],rax
    6500a5de:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    6500a5e2:	movdqa XMMWORD PTR [rbp+0x20],xmm0
    6500a5e7:	lea    r9,[rbp+0x9e0]
    6500a5ee:	lea    r8,[rbp+0x20]
    6500a5f2:	lea    rdx,[rbp+0xa00]
    6500a5f9:	lea    rcx,[rbp+0x0]
    6500a5fd:	call   0x6500d770
    6500a602:	mov    rcx,QWORD PTR [rbp+0x8]
    6500a606:	call   0x6501d190
    6500a60b:	call   QWORD PTR [rip+0x37a87]        # 0x65042098
    6500a611:	mov    esi,eax
    6500a613:	mov    rcx,QWORD PTR [r12]
    6500a617:	cmp    DWORD PTR [rcx-0x8],0x1
    6500a61b:	jle    0x6500a628
    6500a61d:	mov    edx,DWORD PTR [rcx-0x10]
    6500a620:	mov    rcx,r12
    6500a623:	call   0x65002130
    6500a628:	mov    rdi,QWORD PTR [r12]
    6500a62c:	test   rdi,rdi
    6500a62f:	jne    0x6500a636
    6500a631:	mov    rax,r13
    6500a634:	jmp    0x6500a689
    6500a636:	mov    rcx,rdi
    6500a639:	call   QWORD PTR [rip+0x29a51]        # 0x65034090
    6500a63f:	add    eax,0x1
    6500a642:	cmp    eax,0x3fffffff
    6500a647:	jle    0x6500a64e
    6500a649:	mov    rax,r13
    6500a64c:	jmp    0x6500a689
    6500a64e:	lea    r8d,[rax+rax*1]
    6500a652:	cdqe   
    6500a654:	add    rax,rax
    6500a657:	lea    rcx,[rax+0xf]
    6500a65b:	cmp    rcx,rax
    6500a65e:	ja     0x6500a66a
    6500a660:	movabs rcx,0xffffffffffffff0
    6500a66a:	and    rcx,0xfffffffffffffff0
    6500a66e:	mov    rax,rcx
    6500a671:	call   0x650330c0
    6500a676:	sub    rsp,rcx
    6500a679:	lea    rcx,[rsp+0x20]
    6500a67e:	mov    r9d,esi
    6500a681:	mov    rdx,rdi
    6500a684:	call   0x650040f0
    6500a689:	lea    rdx,[rbp+0xfa0]
    6500a690:	movzx  ecx,BYTE PTR [rax]
    6500a693:	mov    BYTE PTR [rdx],cl
    6500a695:	add    rax,0x1
    6500a699:	add    rdx,0x1
    6500a69d:	test   cl,cl
    6500a69f:	jne    0x6500a690
    6500a6a1:	lea    rcx,[rbp+0xfa0]
    6500a6a8:	call   0x6502edd0
    6500a6ad:	mov    QWORD PTR [rbp+0x158],0xf
    6500a6b8:	mov    QWORD PTR [rbp+0x150],r13
    6500a6bf:	mov    BYTE PTR [rbp+0x140],0x0
    6500a6c6:	xor    eax,eax
    6500a6c8:	mov    rcx,rbx
    6500a6cb:	lea    rdi,[rbp+0xfa0]
    6500a6d2:	repnz scas al,BYTE PTR es:[rdi]
    6500a6d4:	not    rcx
    6500a6d7:	lea    r8,[rcx-0x1]
    6500a6db:	lea    rdx,[rbp+0xfa0]
    6500a6e2:	lea    rcx,[rbp+0x138]
    6500a6e9:	call   0x65002000
    6500a6ee:	nop
    6500a6ef:	lea    rdx,[rbp+0x138]
    6500a6f6:	lea    rcx,[rip+0x3c81b]        # 0x65046f18
    6500a6fd:	call   0x6500d2a0
    6500a702:	test   rax,rax
    6500a705:	setne  dil
    6500a709:	cmp    QWORD PTR [rbp+0x158],0x10
    6500a711:	jb     0x6500a71f
    6500a713:	mov    rcx,QWORD PTR [rbp+0x140]
    6500a71a:	call   0x6501d190
    6500a71f:	mov    QWORD PTR [rbp+0x158],0xf
    6500a72a:	mov    QWORD PTR [rbp+0x150],r13
    6500a731:	mov    BYTE PTR [rbp+0x140],0x0
    6500a738:	mov    rdx,QWORD PTR [r12]
    6500a73c:	sub    rdx,0x18
    6500a740:	lock xadd DWORD PTR [rdx+0x10],ebx
    6500a745:	add    ebx,0xffffffff
    6500a748:	test   ebx,ebx
    6500a74a:	jg     0x6500a75a
    6500a74c:	mov    rcx,QWORD PTR [rdx]
    6500a74f:	mov    rax,QWORD PTR [rcx]
    6500a752:	call   QWORD PTR [rax+0x8]
    6500a755:	mov    al,dil
    6500a758:	jmp    0x6500a75d
    6500a75a:	mov    al,dil
    6500a75d:	mov    rcx,QWORD PTR [rbp+0x13a0]
    6500a764:	xor    rcx,rbp
    6500a767:	call   0x6501e4e0
    6500a76c:	mov    rbx,QWORD PTR [rbp+0x13d8]
    6500a773:	mov    rsi,QWORD PTR [rbp+0x13e0]
    6500a77a:	mov    rdi,QWORD PTR [rbp+0x13e8]
    6500a781:	lea    rsp,[rbp+0x13b0]
    6500a788:	pop    r13
    6500a78a:	pop    r12
    6500a78c:	pop    rbp
    6500a78d:	ret    
    6500a78e:	int3   
    6500a78f:	int3   
    6500a790:	rex push rbp
    6500a792:	sub    rsp,0x20
    6500a796:	lea    rbp,[rdx+0x20]
    6500a79a:	mov    rcx,QWORD PTR [rbp+0x9d8]
    6500a7a1:	call   0x65001cb0
    6500a7a6:	add    rsp,0x20
    6500a7aa:	pop    rbp
    6500a7ab:	ret    
    6500a7ac:	int3   
    6500a7ad:	int3   
    6500a7ae:	int3   
    6500a7af:	int3   
    6500a7b0:	rex push rbp
    6500a7b2:	lea    rbp,[rdx+0x20]
    6500a7b6:	mov    eax,DWORD PTR [rip+0x3c774]        # 0x65046f30
    6500a7bc:	and    eax,0xfffffffe
    6500a7bf:	mov    DWORD PTR [rip+0x3c76b],eax        # 0x65046f30
    6500a7c5:	pop    rbp
    6500a7c6:	ret    
    6500a7c7:	int3   
    6500a7c8:	int3   
    6500a7c9:	int3   
    6500a7ca:	int3   
    6500a7cb:	int3   
    6500a7cc:	int3   
    6500a7cd:	int3   
    6500a7ce:	int3   
    6500a7cf:	int3   
    6500a7d0:	rex push rbp
    6500a7d2:	sub    rsp,0x20
    6500a7d6:	lea    rbp,[rdx+0x20]
    6500a7da:	lea    rcx,[rbp+0x0]
    6500a7de:	call   0x65006440
    6500a7e3:	add    rsp,0x20
    6500a7e7:	pop    rbp
    6500a7e8:	ret    
    6500a7e9:	int3   
    6500a7ea:	int3   
    6500a7eb:	int3   
    6500a7ec:	int3   
    6500a7ed:	int3   
    6500a7ee:	int3   
    6500a7ef:	int3   
    6500a7f0:	rex push rbp
    6500a7f2:	sub    rsp,0x20
    6500a7f6:	lea    rbp,[rdx+0x20]
    6500a7fa:	lea    rcx,[rbp+0x30]
    6500a7fe:	call   0x65001c70
    6500a803:	add    rsp,0x20
    6500a807:	pop    rbp
    6500a808:	ret    
    6500a809:	int3   
    6500a80a:	int3   
    6500a80b:	int3   
    6500a80c:	int3   
    6500a80d:	int3   
    6500a80e:	int3   
    6500a80f:	int3   
    6500a810:	rex push rbp
    6500a812:	sub    rsp,0x20
    6500a816:	lea    rbp,[rdx+0x20]
    6500a81a:	lea    rcx,[rbp+0x80]
    6500a821:	call   0x65001c70
    6500a826:	add    rsp,0x20
    6500a82a:	pop    rbp
    6500a82b:	ret    
    6500a82c:	int3   
    6500a82d:	int3   
    6500a82e:	int3   
    6500a82f:	int3   
    6500a830:	rex push rbp
    6500a832:	sub    rsp,0x20
    6500a836:	lea    rbp,[rdx+0x20]
    6500a83a:	lea    rcx,[rbp+0x58]
    6500a83e:	call   0x65001c70
    6500a843:	add    rsp,0x20
    6500a847:	pop    rbp
    6500a848:	ret    
    6500a849:	int3   
    6500a84a:	int3   
    6500a84b:	int3   
    6500a84c:	int3   
    6500a84d:	int3   
    6500a84e:	int3   
    6500a84f:	int3   
    6500a850:	rex push rbp
    6500a852:	sub    rsp,0x20
    6500a856:	lea    rbp,[rdx+0x20]
    6500a85a:	lea    rcx,[rbp+0xa8]
    6500a861:	call   0x65001c70
    6500a866:	add    rsp,0x20
    6500a86a:	pop    rbp
    6500a86b:	ret    
    6500a86c:	int3   
    6500a86d:	int3   
    6500a86e:	int3   
    6500a86f:	int3   
    6500a870:	rex push rbp
    6500a872:	sub    rsp,0x20
    6500a876:	lea    rbp,[rdx+0x20]
    6500a87a:	lea    rcx,[rbp+0xf8]
    6500a881:	call   0x65001c70
    6500a886:	add    rsp,0x20
    6500a88a:	pop    rbp
    6500a88b:	ret    
    6500a88c:	int3   
    6500a88d:	int3   
    6500a88e:	int3   
    6500a88f:	int3   
    6500a890:	rex push rbp
    6500a892:	sub    rsp,0x20
    6500a896:	lea    rbp,[rdx+0x20]
    6500a89a:	lea    rcx,[rbp+0xd0]
    6500a8a1:	call   0x65001c70
    6500a8a6:	add    rsp,0x20
    6500a8aa:	pop    rbp
    6500a8ab:	ret    
    6500a8ac:	int3   
    6500a8ad:	int3   
    6500a8ae:	int3   
    6500a8af:	int3   
    6500a8b0:	rex push rbp
    6500a8b2:	sub    rsp,0x20
    6500a8b6:	lea    rbp,[rdx+0x20]
    6500a8ba:	lea    rcx,[rbp+0x908]
    6500a8c1:	call   0x65001c70
    6500a8c6:	add    rsp,0x20
    6500a8ca:	pop    rbp
    6500a8cb:	ret    
    6500a8cc:	int3   
    6500a8cd:	int3   
    6500a8ce:	int3   
    6500a8cf:	int3   
    6500a8d0:	rex push rbp
    6500a8d2:	sub    rsp,0x20
    6500a8d6:	lea    rbp,[rdx+0x20]
    6500a8da:	lea    rcx,[rbp+0x228]
    6500a8e1:	call   0x65001c70
    6500a8e6:	add    rsp,0x20
    6500a8ea:	pop    rbp
    6500a8eb:	ret    
    6500a8ec:	int3   
    6500a8ed:	int3   
    6500a8ee:	int3   
    6500a8ef:	int3   
    6500a8f0:	rex push rbp
    6500a8f2:	sub    rsp,0x20
    6500a8f6:	lea    rbp,[rdx+0x20]
    6500a8fa:	lea    rcx,[rbp+0x5e8]
    6500a901:	call   0x65001c70
    6500a906:	add    rsp,0x20
    6500a90a:	pop    rbp
    6500a90b:	ret    
    6500a90c:	int3   
    6500a90d:	int3   
    6500a90e:	int3   
    6500a90f:	int3   
    6500a910:	rex push rbp
    6500a912:	sub    rsp,0x20
    6500a916:	lea    rbp,[rdx+0x20]
    6500a91a:	lea    rcx,[rbp+0x278]
    6500a921:	call   0x65001c70
    6500a926:	add    rsp,0x20
    6500a92a:	pop    rbp
    6500a92b:	ret    
    6500a92c:	int3   
    6500a92d:	int3   
    6500a92e:	int3   
    6500a92f:	int3   
    6500a930:	rex push rbp
    6500a932:	sub    rsp,0x20
    6500a936:	lea    rbp,[rdx+0x20]
    6500a93a:	lea    rcx,[rbp+0x7c8]
    6500a941:	call   0x65001c70
    6500a946:	add    rsp,0x20
    6500a94a:	pop    rbp
    6500a94b:	ret    
    6500a94c:	int3   
    6500a94d:	int3   
    6500a94e:	int3   
    6500a94f:	int3   
    6500a950:	rex push rbp
    6500a952:	sub    rsp,0x20
    6500a956:	lea    rbp,[rdx+0x20]
    6500a95a:	lea    rcx,[rbp+0x2c8]
    6500a961:	call   0x65001c70
    6500a966:	add    rsp,0x20
    6500a96a:	pop    rbp
    6500a96b:	ret    
    6500a96c:	int3   
    6500a96d:	int3   
    6500a96e:	int3   
    6500a96f:	int3   
    6500a970:	rex push rbp
    6500a972:	sub    rsp,0x20
    6500a976:	lea    rbp,[rdx+0x20]
    6500a97a:	lea    rcx,[rbp+0x638]
    6500a981:	call   0x65001c70
    6500a986:	add    rsp,0x20
    6500a98a:	pop    rbp
    6500a98b:	ret    
    6500a98c:	int3   
    6500a98d:	int3   
    6500a98e:	int3   
    6500a98f:	int3   
    6500a990:	rex push rbp
    6500a992:	sub    rsp,0x20
    6500a996:	lea    rbp,[rdx+0x20]
    6500a99a:	lea    rcx,[rbp+0x318]
    6500a9a1:	call   0x65001c70
    6500a9a6:	add    rsp,0x20
    6500a9aa:	pop    rbp
    6500a9ab:	ret    
    6500a9ac:	int3   
    6500a9ad:	int3   
    6500a9ae:	int3   
    6500a9af:	int3   
    6500a9b0:	rex push rbp
    6500a9b2:	sub    rsp,0x20
    6500a9b6:	lea    rbp,[rdx+0x20]
    6500a9ba:	lea    rcx,[rbp+0x8b8]
    6500a9c1:	call   0x65001c70
    6500a9c6:	add    rsp,0x20
    6500a9ca:	pop    rbp
    6500a9cb:	ret    
    6500a9cc:	int3   
    6500a9cd:	int3   
    6500a9ce:	int3   
    6500a9cf:	int3   
    6500a9d0:	rex push rbp
    6500a9d2:	sub    rsp,0x20
    6500a9d6:	lea    rbp,[rdx+0x20]
    6500a9da:	lea    rcx,[rbp+0x368]
    6500a9e1:	call   0x65001c70
    6500a9e6:	add    rsp,0x20
    6500a9ea:	pop    rbp
    6500a9eb:	ret    
    6500a9ec:	int3   
    6500a9ed:	int3   
    6500a9ee:	int3   
    6500a9ef:	int3   
    6500a9f0:	rex push rbp
    6500a9f2:	sub    rsp,0x20
    6500a9f6:	lea    rbp,[rdx+0x20]
    6500a9fa:	lea    rcx,[rbp+0x688]
    6500aa01:	call   0x65001c70
    6500aa06:	add    rsp,0x20
    6500aa0a:	pop    rbp
    6500aa0b:	ret    
    6500aa0c:	int3   
    6500aa0d:	int3   
    6500aa0e:	int3   
    6500aa0f:	int3   
    6500aa10:	rex push rbp
    6500aa12:	sub    rsp,0x20
    6500aa16:	lea    rbp,[rdx+0x20]
    6500aa1a:	lea    rcx,[rbp+0x3b8]
    6500aa21:	call   0x65001c70
    6500aa26:	add    rsp,0x20
    6500aa2a:	pop    rbp
    6500aa2b:	ret    
    6500aa2c:	int3   
    6500aa2d:	int3   
    6500aa2e:	int3   
    6500aa2f:	int3   
    6500aa30:	rex push rbp
    6500aa32:	sub    rsp,0x20
    6500aa36:	lea    rbp,[rdx+0x20]
    6500aa3a:	lea    rcx,[rbp+0x818]
    6500aa41:	call   0x65001c70
    6500aa46:	add    rsp,0x20
    6500aa4a:	pop    rbp
    6500aa4b:	ret    
    6500aa4c:	int3   
    6500aa4d:	int3   
    6500aa4e:	int3   
    6500aa4f:	int3   
    6500aa50:	rex push rbp
    6500aa52:	sub    rsp,0x20
    6500aa56:	lea    rbp,[rdx+0x20]
    6500aa5a:	lea    rcx,[rbp+0x408]
    6500aa61:	call   0x65001c70
    6500aa66:	add    rsp,0x20
    6500aa6a:	pop    rbp
    6500aa6b:	ret    
    6500aa6c:	int3   
    6500aa6d:	int3   
    6500aa6e:	int3   
    6500aa6f:	int3   
    6500aa70:	rex push rbp
    6500aa72:	sub    rsp,0x20
    6500aa76:	lea    rbp,[rdx+0x20]
    6500aa7a:	lea    rcx,[rbp+0x6d8]
    6500aa81:	call   0x65001c70
    6500aa86:	add    rsp,0x20
    6500aa8a:	pop    rbp
    6500aa8b:	ret    
    6500aa8c:	int3   
    6500aa8d:	int3   
    6500aa8e:	int3   
    6500aa8f:	int3   
    6500aa90:	rex push rbp
    6500aa92:	sub    rsp,0x20
    6500aa96:	lea    rbp,[rdx+0x20]
    6500aa9a:	lea    rcx,[rbp+0x458]
    6500aaa1:	call   0x65001c70
    6500aaa6:	add    rsp,0x20
    6500aaaa:	pop    rbp
    6500aaab:	ret    
    6500aaac:	int3   
    6500aaad:	int3   
    6500aaae:	int3   
    6500aaaf:	int3   
    6500aab0:	rex push rbp
    6500aab2:	sub    rsp,0x20
    6500aab6:	lea    rbp,[rdx+0x20]
    6500aaba:	lea    rcx,[rbp+0x160]
    6500aac1:	call   0x65001c70
    6500aac6:	add    rsp,0x20
    6500aaca:	pop    rbp
    6500aacb:	ret    
    6500aacc:	int3   
    6500aacd:	int3   
    6500aace:	int3   
    6500aacf:	int3   
    6500aad0:	rex push rbp
    6500aad2:	sub    rsp,0x20
    6500aad6:	lea    rbp,[rdx+0x20]
    6500aada:	lea    rcx,[rbp+0x4a8]
    6500aae1:	call   0x65001c70
    6500aae6:	add    rsp,0x20
    6500aaea:	pop    rbp
    6500aaeb:	ret    
    6500aaec:	int3   
    6500aaed:	int3   
    6500aaee:	int3   
    6500aaef:	int3   
    6500aaf0:	rex push rbp
    6500aaf2:	sub    rsp,0x20
    6500aaf6:	lea    rbp,[rdx+0x20]
    6500aafa:	lea    rcx,[rbp+0x728]
    6500ab01:	call   0x65001c70
    6500ab06:	add    rsp,0x20
    6500ab0a:	pop    rbp
    6500ab0b:	ret    
    6500ab0c:	int3   
    6500ab0d:	int3   
    6500ab0e:	int3   
    6500ab0f:	int3   
    6500ab10:	rex push rbp
    6500ab12:	sub    rsp,0x20
    6500ab16:	lea    rbp,[rdx+0x20]
    6500ab1a:	lea    rcx,[rbp+0x4f8]
    6500ab21:	call   0x65001c70
    6500ab26:	add    rsp,0x20
    6500ab2a:	pop    rbp
    6500ab2b:	ret    
    6500ab2c:	int3   
    6500ab2d:	int3   
    6500ab2e:	int3   
    6500ab2f:	int3   
    6500ab30:	rex push rbp
    6500ab32:	sub    rsp,0x20
    6500ab36:	lea    rbp,[rdx+0x20]
    6500ab3a:	lea    rcx,[rbp+0x868]
    6500ab41:	call   0x65001c70
    6500ab46:	add    rsp,0x20
    6500ab4a:	pop    rbp
    6500ab4b:	ret    
    6500ab4c:	int3   
    6500ab4d:	int3   
    6500ab4e:	int3   
    6500ab4f:	int3   
    6500ab50:	rex push rbp
    6500ab52:	sub    rsp,0x20
    6500ab56:	lea    rbp,[rdx+0x20]
    6500ab5a:	lea    rcx,[rbp+0x548]
    6500ab61:	call   0x65001c70
    6500ab66:	add    rsp,0x20
    6500ab6a:	pop    rbp
    6500ab6b:	ret    
    6500ab6c:	int3   
    6500ab6d:	int3   
    6500ab6e:	int3   
    6500ab6f:	int3   
    6500ab70:	rex push rbp
    6500ab72:	sub    rsp,0x20
    6500ab76:	lea    rbp,[rdx+0x20]
    6500ab7a:	lea    rcx,[rbp+0x188]
    6500ab81:	call   0x65001c70
    6500ab86:	add    rsp,0x20
    6500ab8a:	pop    rbp
    6500ab8b:	ret    
    6500ab8c:	int3   
    6500ab8d:	int3   
    6500ab8e:	int3   
    6500ab8f:	int3   
    6500ab90:	rex push rbp
    6500ab92:	sub    rsp,0x20
    6500ab96:	lea    rbp,[rdx+0x20]
    6500ab9a:	lea    rcx,[rbp+0x778]
    6500aba1:	call   0x65001c70
    6500aba6:	add    rsp,0x20
    6500abaa:	pop    rbp
    6500abab:	ret    
    6500abac:	int3   
    6500abad:	int3   
    6500abae:	int3   
    6500abaf:	int3   
    6500abb0:	rex push rbp
    6500abb2:	sub    rsp,0x20
    6500abb6:	lea    rbp,[rdx+0x20]
    6500abba:	lea    rcx,[rbp+0x598]
    6500abc1:	call   0x65001c70
    6500abc6:	add    rsp,0x20
    6500abca:	pop    rbp
    6500abcb:	ret    
    6500abcc:	int3   
    6500abcd:	int3   
    6500abce:	int3   
    6500abcf:	int3   
    6500abd0:	rex push rbp
    6500abd2:	sub    rsp,0x20
    6500abd6:	lea    rbp,[rdx+0x20]
    6500abda:	lea    rcx,[rbp+0x1b0]
    6500abe1:	call   0x65001c70
    6500abe6:	add    rsp,0x20
    6500abea:	pop    rbp
    6500abeb:	ret    
    6500abec:	int3   
    6500abed:	int3   
    6500abee:	int3   
    6500abef:	int3   
    6500abf0:	rex push rbp
    6500abf2:	sub    rsp,0x20
    6500abf6:	lea    rbp,[rdx+0x20]
    6500abfa:	lea    rcx,[rbp+0x200]
    6500ac01:	call   0x65001c70
    6500ac06:	add    rsp,0x20
    6500ac0a:	pop    rbp
    6500ac0b:	ret    
    6500ac0c:	int3   
    6500ac0d:	int3   
    6500ac0e:	int3   
    6500ac0f:	int3   
    6500ac10:	rex push rbp
    6500ac12:	sub    rsp,0x20
    6500ac16:	lea    rbp,[rdx+0x20]
    6500ac1a:	lea    rcx,[rbp+0x250]
    6500ac21:	call   0x65001c70
    6500ac26:	add    rsp,0x20
    6500ac2a:	pop    rbp
    6500ac2b:	ret    
    6500ac2c:	int3   
    6500ac2d:	int3   
    6500ac2e:	int3   
    6500ac2f:	int3   
    6500ac30:	rex push rbp
    6500ac32:	sub    rsp,0x20
    6500ac36:	lea    rbp,[rdx+0x20]
    6500ac3a:	lea    rcx,[rbp+0x2a0]
    6500ac41:	call   0x65001c70
    6500ac46:	add    rsp,0x20
    6500ac4a:	pop    rbp
    6500ac4b:	ret    
    6500ac4c:	int3   
    6500ac4d:	int3   
    6500ac4e:	int3   
    6500ac4f:	int3   
    6500ac50:	rex push rbp
    6500ac52:	sub    rsp,0x20
    6500ac56:	lea    rbp,[rdx+0x20]
    6500ac5a:	lea    rcx,[rbp+0x2f0]
    6500ac61:	call   0x65001c70
    6500ac66:	add    rsp,0x20
    6500ac6a:	pop    rbp
    6500ac6b:	ret    
    6500ac6c:	int3   
    6500ac6d:	int3   
    6500ac6e:	int3   
    6500ac6f:	int3   
    6500ac70:	rex push rbp
    6500ac72:	sub    rsp,0x20
    6500ac76:	lea    rbp,[rdx+0x20]
    6500ac7a:	lea    rcx,[rbp+0x340]
    6500ac81:	call   0x65001c70
    6500ac86:	add    rsp,0x20
    6500ac8a:	pop    rbp
    6500ac8b:	ret    
    6500ac8c:	int3   
    6500ac8d:	int3   
    6500ac8e:	int3   
    6500ac8f:	int3   
    6500ac90:	rex push rbp
    6500ac92:	sub    rsp,0x20
    6500ac96:	lea    rbp,[rdx+0x20]
    6500ac9a:	lea    rcx,[rbp+0x390]
    6500aca1:	call   0x65001c70
    6500aca6:	add    rsp,0x20
    6500acaa:	pop    rbp
    6500acab:	ret    
    6500acac:	int3   
    6500acad:	int3   
    6500acae:	int3   
    6500acaf:	int3   
    6500acb0:	rex push rbp
    6500acb2:	sub    rsp,0x20
    6500acb6:	lea    rbp,[rdx+0x20]
    6500acba:	lea    rcx,[rbp+0x3e0]
    6500acc1:	call   0x65001c70
    6500acc6:	add    rsp,0x20
    6500acca:	pop    rbp
    6500accb:	ret    
    6500accc:	int3   
    6500accd:	int3   
    6500acce:	int3   
    6500accf:	int3   
    6500acd0:	rex push rbp
    6500acd2:	sub    rsp,0x20
    6500acd6:	lea    rbp,[rdx+0x20]
    6500acda:	lea    rcx,[rbp+0x430]
    6500ace1:	call   0x65001c70
    6500ace6:	add    rsp,0x20
    6500acea:	pop    rbp
    6500aceb:	ret    
    6500acec:	int3   
    6500aced:	int3   
    6500acee:	int3   
    6500acef:	int3   
    6500acf0:	rex push rbp
    6500acf2:	sub    rsp,0x20
    6500acf6:	lea    rbp,[rdx+0x20]
    6500acfa:	lea    rcx,[rbp+0x480]
    6500ad01:	call   0x65001c70
    6500ad06:	add    rsp,0x20
    6500ad0a:	pop    rbp
    6500ad0b:	ret    
    6500ad0c:	int3   
    6500ad0d:	int3   
    6500ad0e:	int3   
    6500ad0f:	int3   
    6500ad10:	rex push rbp
    6500ad12:	sub    rsp,0x20
    6500ad16:	lea    rbp,[rdx+0x20]
    6500ad1a:	lea    rcx,[rbp+0x4d0]
    6500ad21:	call   0x65001c70
    6500ad26:	add    rsp,0x20
    6500ad2a:	pop    rbp
    6500ad2b:	ret    
    6500ad2c:	int3   
    6500ad2d:	int3   
    6500ad2e:	int3   
    6500ad2f:	int3   
    6500ad30:	rex push rbp
    6500ad32:	sub    rsp,0x20
    6500ad36:	lea    rbp,[rdx+0x20]
    6500ad3a:	lea    rcx,[rbp+0x520]
    6500ad41:	call   0x65001c70
    6500ad46:	add    rsp,0x20
    6500ad4a:	pop    rbp
    6500ad4b:	ret    
    6500ad4c:	int3   
    6500ad4d:	int3   
    6500ad4e:	int3   
    6500ad4f:	int3   
    6500ad50:	rex push rbp
    6500ad52:	sub    rsp,0x20
    6500ad56:	lea    rbp,[rdx+0x20]
    6500ad5a:	lea    rcx,[rbp+0x570]
    6500ad61:	call   0x65001c70
    6500ad66:	add    rsp,0x20
    6500ad6a:	pop    rbp
    6500ad6b:	ret    
    6500ad6c:	int3   
    6500ad6d:	int3   
    6500ad6e:	int3   
    6500ad6f:	int3   
    6500ad70:	rex push rbp
    6500ad72:	sub    rsp,0x20
    6500ad76:	lea    rbp,[rdx+0x20]
    6500ad7a:	lea    rcx,[rbp+0x5c0]
    6500ad81:	call   0x65001c70
    6500ad86:	add    rsp,0x20
    6500ad8a:	pop    rbp
    6500ad8b:	ret    
    6500ad8c:	int3   
    6500ad8d:	int3   
    6500ad8e:	int3   
    6500ad8f:	int3   
    6500ad90:	rex push rbp
    6500ad92:	sub    rsp,0x20
    6500ad96:	lea    rbp,[rdx+0x20]
    6500ad9a:	lea    rcx,[rbp+0x610]
    6500ada1:	call   0x65001c70
    6500ada6:	add    rsp,0x20
    6500adaa:	pop    rbp
    6500adab:	ret    
    6500adac:	int3   
    6500adad:	int3   
    6500adae:	int3   
    6500adaf:	int3   
    6500adb0:	rex push rbp
    6500adb2:	sub    rsp,0x20
    6500adb6:	lea    rbp,[rdx+0x20]
    6500adba:	lea    rcx,[rbp+0x660]
    6500adc1:	call   0x65001c70
    6500adc6:	add    rsp,0x20
    6500adca:	pop    rbp
    6500adcb:	ret    
    6500adcc:	int3   
    6500adcd:	int3   
    6500adce:	int3   
    6500adcf:	int3   
    6500add0:	rex push rbp
    6500add2:	sub    rsp,0x20
    6500add6:	lea    rbp,[rdx+0x20]
    6500adda:	lea    rcx,[rbp+0x6b0]
    6500ade1:	call   0x65001c70
    6500ade6:	add    rsp,0x20
    6500adea:	pop    rbp
    6500adeb:	ret    
    6500adec:	int3   
    6500aded:	int3   
    6500adee:	int3   
    6500adef:	int3   
    6500adf0:	rex push rbp
    6500adf2:	sub    rsp,0x20
    6500adf6:	lea    rbp,[rdx+0x20]
    6500adfa:	lea    rcx,[rbp+0x700]
    6500ae01:	call   0x65001c70
    6500ae06:	add    rsp,0x20
    6500ae0a:	pop    rbp
    6500ae0b:	ret    
    6500ae0c:	int3   
    6500ae0d:	int3   
    6500ae0e:	int3   
    6500ae0f:	int3   
    6500ae10:	rex push rbp
    6500ae12:	sub    rsp,0x20
    6500ae16:	lea    rbp,[rdx+0x20]
    6500ae1a:	lea    rcx,[rbp+0x750]
    6500ae21:	call   0x65001c70
    6500ae26:	add    rsp,0x20
    6500ae2a:	pop    rbp
    6500ae2b:	ret    
    6500ae2c:	int3   
    6500ae2d:	int3   
    6500ae2e:	int3   
    6500ae2f:	int3   
    6500ae30:	rex push rbp
    6500ae32:	sub    rsp,0x20
    6500ae36:	lea    rbp,[rdx+0x20]
    6500ae3a:	lea    rcx,[rbp+0x7a0]
    6500ae41:	call   0x65001c70
    6500ae46:	add    rsp,0x20
    6500ae4a:	pop    rbp
    6500ae4b:	ret    
    6500ae4c:	int3   
    6500ae4d:	int3   
    6500ae4e:	int3   
    6500ae4f:	int3   
    6500ae50:	rex push rbp
    6500ae52:	sub    rsp,0x20
    6500ae56:	lea    rbp,[rdx+0x20]
    6500ae5a:	lea    rcx,[rbp+0x7f0]
    6500ae61:	call   0x65001c70
    6500ae66:	add    rsp,0x20
    6500ae6a:	pop    rbp
    6500ae6b:	ret    
    6500ae6c:	int3   
    6500ae6d:	int3   
    6500ae6e:	int3   
    6500ae6f:	int3   
    6500ae70:	rex push rbp
    6500ae72:	sub    rsp,0x20
    6500ae76:	lea    rbp,[rdx+0x20]
    6500ae7a:	lea    rcx,[rbp+0x840]
    6500ae81:	call   0x65001c70
    6500ae86:	add    rsp,0x20
    6500ae8a:	pop    rbp
    6500ae8b:	ret    
    6500ae8c:	int3   
    6500ae8d:	int3   
    6500ae8e:	int3   
    6500ae8f:	int3   
    6500ae90:	rex push rbp
    6500ae92:	sub    rsp,0x20
    6500ae96:	lea    rbp,[rdx+0x20]
    6500ae9a:	lea    rcx,[rbp+0x890]
    6500aea1:	call   0x65001c70
    6500aea6:	add    rsp,0x20
    6500aeaa:	pop    rbp
    6500aeab:	ret    
    6500aeac:	int3   
    6500aead:	int3   
    6500aeae:	int3   
    6500aeaf:	int3   
    6500aeb0:	rex push rbp
    6500aeb2:	sub    rsp,0x20
    6500aeb6:	lea    rbp,[rdx+0x20]
    6500aeba:	lea    rcx,[rbp+0x8e0]
    6500aec1:	call   0x65001c70
    6500aec6:	add    rsp,0x20
    6500aeca:	pop    rbp
    6500aecb:	ret    
    6500aecc:	int3   
    6500aecd:	int3   
    6500aece:	int3   
    6500aecf:	int3   
    6500aed0:	rex push rbp
    6500aed2:	sub    rsp,0x20
    6500aed6:	lea    rbp,[rdx+0x20]
    6500aeda:	lea    rcx,[rbp+0x930]
    6500aee1:	call   0x65001c70
    6500aee6:	add    rsp,0x20
    6500aeea:	pop    rbp
    6500aeeb:	ret    
    6500aeec:	int3   
    6500aeed:	int3   
    6500aeee:	int3   
    6500aeef:	int3   
    6500aef0:	rex push rbp
    6500aef2:	sub    rsp,0x20
    6500aef6:	lea    rbp,[rdx+0x20]
    6500aefa:	lea    rcx,[rbp+0x980]
    6500af01:	call   0x65001c70
    6500af06:	add    rsp,0x20
    6500af0a:	pop    rbp
    6500af0b:	ret    
    6500af0c:	int3   
    6500af0d:	int3   
    6500af0e:	int3   
    6500af0f:	int3   
    6500af10:	rex push rbp
    6500af12:	sub    rsp,0x20
    6500af16:	lea    rbp,[rdx+0x20]
    6500af1a:	lea    rcx,[rbp+0x1d8]
    6500af21:	call   0x65001c70
    6500af26:	add    rsp,0x20
    6500af2a:	pop    rbp
    6500af2b:	ret    
    6500af2c:	int3   
    6500af2d:	int3   
    6500af2e:	int3   
    6500af2f:	int3   
    6500af30:	rex push rbp
    6500af32:	sub    rsp,0x20
    6500af36:	lea    rbp,[rdx+0x20]
    6500af3a:	lea    rcx,[rbp+0x958]
    6500af41:	call   0x65001c70
    6500af46:	add    rsp,0x20
    6500af4a:	pop    rbp
    6500af4b:	ret    
    6500af4c:	int3   
    6500af4d:	int3   
    6500af4e:	int3   
    6500af4f:	int3   
    6500af50:	rex push rbp
    6500af52:	sub    rsp,0x20
    6500af56:	lea    rbp,[rdx+0x20]
    6500af5a:	lea    rcx,[rbp+0x120]
    6500af61:	call   0x65006440
    6500af66:	add    rsp,0x20
    6500af6a:	pop    rbp
    6500af6b:	ret    
    6500af6c:	int3   
    6500af6d:	int3   
    6500af6e:	int3   
    6500af6f:	int3   
    6500af70:	rex push rbp
    6500af72:	sub    rsp,0x20
    6500af76:	lea    rbp,[rdx+0x20]
    6500af7a:	lea    rcx,[rbp+0x138]
    6500af81:	call   0x65001c70
    6500af86:	add    rsp,0x20
    6500af8a:	pop    rbp
    6500af8b:	ret    
    6500af8c:	int3   
    6500af8d:	int3   
    6500af8e:	int3   
    6500af8f:	int3   
    6500af90:	mov    BYTE PTR [rsp+0x10],dl
    6500af94:	mov    QWORD PTR [rsp+0x8],rcx
    6500af99:	push   rbx
    6500af9a:	push   rbp
    6500af9b:	push   rsi
    6500af9c:	push   rdi
    6500af9d:	push   r12
    6500af9f:	push   r13
    6500afa1:	push   r14
    6500afa3:	push   r15
    6500afa5:	sub    rsp,0xb8
    6500afac:	mov    QWORD PTR [rsp+0x78],0xfffffffffffffffe
    6500afb5:	movzx  r12d,dl
    6500afb9:	mov    rbp,rcx
    6500afbc:	xor    r14d,r14d
    6500afbf:	mov    DWORD PTR [rsp+0x50],r14d
    6500afc4:	call   QWORD PTR [rip+0x370ce]        # 0x65042098
    6500afca:	lea    rcx,[rip+0x370cf]        # 0x650420a0
    6500afd1:	mov    rax,QWORD PTR [rip+0x370c8]        # 0x650420a0
    6500afd8:	call   QWORD PTR [rax+0x18]
    6500afdb:	add    rax,0x18
    6500afdf:	mov    QWORD PTR [rbp+0x0],rax
    6500afe3:	mov    r13d,0x1
    6500afe9:	mov    DWORD PTR [rsp+0x50],r13d
    6500afee:	xor    eax,eax
    6500aff0:	lock cmpxchg DWORD PTR [rip+0x3bdb3],r13d        # 0x65046dac
    6500aff9:	jne    0x6500b062
    6500affb:	lea    r8,[rip+0x2e846]        # 0x65039848
    6500b002:	lea    edx,[r14+0xe]
    6500b006:	lea    rcx,[rip+0x2e87b]        # 0x65039888
    6500b00d:	call   0x6500bc30
    6500b012:	mov    rdi,rax
    6500b015:	lea    r8,[rip+0x2e87c]        # 0x65039898
    6500b01c:	lea    edx,[r14+0x8]
    6500b020:	lea    rcx,[rip+0x2e661]        # 0x65039688
    6500b027:	call   0x6500c5e0
    6500b02c:	mov    rcx,rax
    6500b02f:	call   QWORD PTR [rip+0x28ff3]        # 0x65034028
    6500b035:	add    DWORD PTR [rip+0x3890c],r13d        # 0x65043948
    6500b03c:	test   rax,rax
    6500b03f:	je     0x6500b056
    6500b041:	mov    rdx,rdi
    6500b044:	mov    rcx,rax
    6500b047:	call   QWORD PTR [rip+0x29063]        # 0x650340b0
    6500b04d:	add    DWORD PTR [rip+0x388f8],r13d        # 0x6504394c
    6500b054:	jmp    0x6500b059
    6500b056:	mov    rax,r14
    6500b059:	mov    QWORD PTR [rip+0x3be78],rax        # 0x65046ed8
    6500b060:	jmp    0x6500b069
    6500b062:	mov    rax,QWORD PTR [rip+0x3be6f]        # 0x65046ed8
    6500b069:	xor    edx,edx
    6500b06b:	xor    ecx,ecx
    6500b06d:	lea    r8d,[rdx+0x4]
    6500b071:	call   rax
    6500b073:	mov    rbx,rax
    6500b076:	mov    QWORD PTR [rsp+0x60],rax
    6500b07b:	test   rax,rax
    6500b07e:	je     0x6500b43c
    6500b084:	mov    DWORD PTR [rsp+0x4c],r14d
    6500b089:	lea    rax,[rsp+0x4c]
    6500b08e:	mov    QWORD PTR [rsp+0x38],rax
    6500b093:	lea    rax,[rsp+0x118]
    6500b09b:	mov    QWORD PTR [rsp+0x30],rax
    6500b0a0:	lea    rax,[rsp+0x48]
    6500b0a5:	mov    QWORD PTR [rsp+0x28],rax
    6500b0aa:	mov    DWORD PTR [rsp+0x20],0x30
    6500b0b2:	lea    r9,[rsp+0x80]
    6500b0ba:	mov    edx,0x13f
    6500b0bf:	mov    r8d,0x3
    6500b0c5:	mov    rcx,rbx
    6500b0c8:	call   QWORD PTR [rip+0x28f32]        # 0x65034000
    6500b0ce:	mov    edi,eax
    6500b0d0:	call   QWORD PTR [rip+0x28fa2]        # 0x65034078
    6500b0d6:	or     r8,0xffffffffffffffff
    6500b0da:	test   edi,edi
    6500b0dc:	je     0x6500b0ef
    6500b0de:	cmp    eax,0xea
    6500b0e3:	je     0x6500b0ef
    6500b0e5:	mov    r15,QWORD PTR [rsp+0x110]
    6500b0ed:	jmp    0x6500b14b
    6500b0ef:	mov    edi,DWORD PTR [rsp+0x48]
    6500b0f3:	add    edi,0x30
    6500b0f6:	mov    ecx,edi
    6500b0f8:	mov    eax,0x30
    6500b0fd:	mul    rcx
    6500b100:	cmovo  rax,r8
    6500b104:	mov    rcx,rax
    6500b107:	call   0x6501d180
    6500b10c:	mov    r15,rax
    6500b10f:	lea    rax,[rsp+0x4c]
    6500b114:	mov    QWORD PTR [rsp+0x38],rax
    6500b119:	lea    rax,[rsp+0x118]
    6500b121:	mov    QWORD PTR [rsp+0x30],rax
    6500b126:	lea    rax,[rsp+0x48]
    6500b12b:	mov    QWORD PTR [rsp+0x28],rax
    6500b130:	mov    DWORD PTR [rsp+0x20],edi
    6500b134:	mov    r9,r15
    6500b137:	mov    edx,0x13f
    6500b13c:	mov    r8d,0x3
    6500b142:	mov    rcx,rbx
    6500b145:	call   QWORD PTR [rip+0x28eb5]        # 0x65034000
    6500b14b:	mov    esi,r14d
    6500b14e:	mov    DWORD PTR [rsp+0x110],r14d
    6500b156:	cmp    DWORD PTR [rsp+0x118],r14d
    6500b15e:	jbe    0x6500b43c
    6500b164:	mov    rbx,QWORD PTR [r15]
    6500b167:	lea    rcx,[rip+0x36f32]        # 0x650420a0
    6500b16e:	mov    rax,QWORD PTR [rip+0x36f2b]        # 0x650420a0
    6500b175:	call   QWORD PTR [rax+0x18]
    6500b178:	add    rax,0x18
    6500b17c:	mov    QWORD PTR [rsp+0x40],rax
    6500b181:	test   rbx,rbx
    6500b184:	je     0x6500b1c7
    6500b186:	test   rbx,0xffffffffffff0000
    6500b18d:	jne    0x6500b1b2
    6500b18f:	movzx  edi,bx
    6500b192:	xor    edx,edx
    6500b194:	mov    ecx,edi
    6500b196:	call   0x650026f0
    6500b19b:	test   rax,rax
    6500b19e:	je     0x6500b1db
    6500b1a0:	mov    r8d,edi
    6500b1a3:	mov    rdx,rax
    6500b1a6:	lea    rcx,[rsp+0x40]
    6500b1ab:	call   0x65003e00
    6500b1b0:	jmp    0x6500b1db
    6500b1b2:	xor    eax,eax
    6500b1b4:	or     rcx,0xffffffffffffffff
    6500b1b8:	mov    rdi,rbx
    6500b1bb:	repnz scas ax,WORD PTR es:[rdi]
    6500b1be:	not    rcx
    6500b1c1:	sub    rcx,0x1
    6500b1c5:	jmp    0x6500b1ca
    6500b1c7:	mov    ecx,r14d
    6500b1ca:	mov    r8d,ecx
    6500b1cd:	mov    rdx,rbx
    6500b1d0:	lea    rcx,[rsp+0x40]
    6500b1d5:	call   0x65003f90
    6500b1da:	nop
    6500b1db:	test   r12b,r12b
    6500b1de:	je     0x6500b269
    6500b1e4:	mov    rdi,QWORD PTR [rsp+0x40]
    6500b1e9:	mov    rcx,QWORD PTR [rdi-0x18]
    6500b1ed:	mov    rax,QWORD PTR [rcx]
    6500b1f0:	call   QWORD PTR [rax+0x20]
    6500b1f3:	mov    rcx,rax
    6500b1f6:	cmp    DWORD PTR [rdi-0x8],0x0
    6500b1fa:	jl     0x6500b20d
    6500b1fc:	cmp    rax,QWORD PTR [rdi-0x18]
    6500b200:	jne    0x6500b20d
    6500b202:	lea    rbx,[rdi-0x18]
    6500b206:	lock add DWORD PTR [rdi-0x8],0x1
    6500b20b:	jmp    0x6500b249
    6500b20d:	mov    rax,QWORD PTR [rax]
    6500b210:	mov    r8d,0x2
    6500b216:	mov    edx,DWORD PTR [rdi-0x10]
    6500b219:	call   QWORD PTR [rax]
    6500b21b:	mov    rbx,rax
    6500b21e:	test   rax,rax
    6500b221:	je     0x6500b418
    6500b227:	mov    ecx,DWORD PTR [rdi-0x10]
    6500b22a:	mov    DWORD PTR [rax+0x8],ecx
    6500b22d:	mov    ecx,DWORD PTR [rdi-0x10]
    6500b230:	add    ecx,0x1
    6500b233:	movsxd rdx,ecx
    6500b236:	lea    r9,[rdx+rdx*1]
    6500b23a:	mov    r8,rdi
    6500b23d:	add    rdx,rdx
    6500b240:	lea    rcx,[rax+0x18]
    6500b244:	call   0x6501d640
    6500b249:	lea    rax,[rbx+0x18]
    6500b24d:	mov    QWORD PTR [rsp+0x58],rax
    6500b252:	lea    rcx,[rsp+0x58]
    6500b257:	call   0x65008390
    6500b25c:	test   al,al
    6500b25e:	jne    0x6500b2e9
    6500b264:	jmp    0x6500b3db
    6500b269:	mov    rdi,QWORD PTR [rsp+0x40]
    6500b26e:	mov    rcx,QWORD PTR [rdi-0x18]
    6500b272:	mov    rax,QWORD PTR [rcx]
    6500b275:	call   QWORD PTR [rax+0x20]
    6500b278:	mov    rcx,rax
    6500b27b:	cmp    DWORD PTR [rdi-0x8],0x0
    6500b27f:	jl     0x6500b292
    6500b281:	cmp    rax,QWORD PTR [rdi-0x18]
    6500b285:	jne    0x6500b292
    6500b287:	lea    rbx,[rdi-0x18]
    6500b28b:	lock add DWORD PTR [rdi-0x8],0x1
    6500b290:	jmp    0x6500b2ce
    6500b292:	mov    rax,QWORD PTR [rax]
    6500b295:	mov    r8d,0x2
    6500b29b:	mov    edx,DWORD PTR [rdi-0x10]
    6500b29e:	call   QWORD PTR [rax]
    6500b2a0:	mov    rbx,rax
    6500b2a3:	test   rax,rax
    6500b2a6:	je     0x6500b436
    6500b2ac:	mov    ecx,DWORD PTR [rdi-0x10]
    6500b2af:	mov    DWORD PTR [rax+0x8],ecx
    6500b2b2:	mov    ecx,DWORD PTR [rdi-0x10]
    6500b2b5:	add    ecx,0x1
    6500b2b8:	movsxd rdx,ecx
    6500b2bb:	lea    r9,[rdx+rdx*1]
    6500b2bf:	mov    r8,rdi
    6500b2c2:	add    rdx,rdx
    6500b2c5:	lea    rcx,[rax+0x18]
    6500b2c9:	call   0x6501d640
    6500b2ce:	lea    rax,[rbx+0x18]
    6500b2d2:	mov    QWORD PTR [rsp+0x68],rax
    6500b2d7:	lea    rcx,[rsp+0x68]
    6500b2dc:	call   0x650064b0
    6500b2e1:	test   al,al
    6500b2e3:	jne    0x6500b3db
    6500b2e9:	lea    r8,[rip+0x2d870]        # 0x65038b60
    6500b2f0:	mov    edx,0x4
    6500b2f5:	lea    rcx,[rip+0x2d88c]        # 0x65038b88
    6500b2fc:	call   0x6500bc30
    6500b301:	mov    rdx,rax
    6500b304:	mov    rcx,rbp
    6500b307:	call   0x65003ab0
    6500b30c:	lea    rdx,[rsp+0x40]
    6500b311:	lea    rcx,[rsp+0x70]
    6500b316:	call   0x65004a40
    6500b31b:	nop
    6500b31c:	mov    rsi,QWORD PTR [rax]
    6500b31f:	movsxd r13,DWORD PTR [rsi-0x10]
    6500b323:	mov    rax,QWORD PTR [rbp+0x0]
    6500b327:	mov    rbx,rsi
    6500b32a:	sub    rbx,rax
    6500b32d:	sar    rbx,1
    6500b330:	mov    r12d,DWORD PTR [rax-0x10]
    6500b334:	lea    edi,[r12+r13*1]
    6500b338:	mov    ecx,0x1
    6500b33d:	sub    ecx,DWORD PTR [rax-0x8]
    6500b340:	mov    eax,DWORD PTR [rax-0xc]
    6500b343:	sub    eax,edi
    6500b345:	or     eax,ecx
    6500b347:	jge    0x6500b353
    6500b349:	mov    edx,edi
    6500b34b:	mov    rcx,rbp
    6500b34e:	call   0x65002640
    6500b353:	mov    rax,QWORD PTR [rbp+0x0]
    6500b357:	cmp    rbx,r12
    6500b35a:	ja     0x6500b360
    6500b35c:	lea    rsi,[rax+rbx*2]
    6500b360:	mov    rdx,r13
    6500b363:	add    rdx,rdx
    6500b366:	lea    rcx,[rax+r12*2]
    6500b36a:	mov    r9,rdx
    6500b36d:	mov    r8,rsi
    6500b370:	call   0x6501d640
    6500b375:	test   edi,edi
    6500b377:	js     0x6500b41e
    6500b37d:	mov    rax,QWORD PTR [rbp+0x0]
    6500b381:	cmp    edi,DWORD PTR [rax-0xc]
    6500b384:	jg     0x6500b41e
    6500b38a:	mov    DWORD PTR [rax-0x10],edi
    6500b38d:	movsxd rcx,edi
    6500b390:	mov    rax,QWORD PTR [rbp+0x0]
    6500b394:	mov    WORD PTR [rax+rcx*2],0x0
    6500b39a:	mov    rdx,QWORD PTR [rsp+0x70]
    6500b39f:	add    rdx,0xffffffffffffffe8
    6500b3a3:	or     eax,0xffffffff
    6500b3a6:	lock xadd DWORD PTR [rdx+0x10],eax
    6500b3ab:	add    eax,0xffffffff
    6500b3ae:	test   eax,eax
    6500b3b0:	jg     0x6500b3cc
    6500b3b2:	mov    rcx,QWORD PTR [rdx]
    6500b3b5:	mov    rax,QWORD PTR [rcx]
    6500b3b8:	call   QWORD PTR [rax+0x8]
    6500b3bb:	mov    esi,DWORD PTR [rsp+0x110]
    6500b3c2:	mov    r12b,BYTE PTR [rsp+0x108]
    6500b3ca:	jmp    0x6500b3db
    6500b3cc:	mov    esi,DWORD PTR [rsp+0x110]
    6500b3d3:	mov    r12b,BYTE PTR [rsp+0x108]
    6500b3db:	mov    rdx,QWORD PTR [rsp+0x40]
    6500b3e0:	add    rdx,0xffffffffffffffe8
    6500b3e4:	or     eax,0xffffffff
    6500b3e7:	lock xadd DWORD PTR [rdx+0x10],eax
    6500b3ec:	add    eax,0xffffffff
    6500b3ef:	test   eax,eax
    6500b3f1:	jg     0x6500b3fc
    6500b3f3:	mov    rcx,QWORD PTR [rdx]
    6500b3f6:	mov    rax,QWORD PTR [rcx]
    6500b3f9:	call   QWORD PTR [rax+0x8]
    6500b3fc:	add    esi,0x1
    6500b3ff:	mov    DWORD PTR [rsp+0x110],esi
    6500b406:	add    r15,0x30
    6500b40a:	cmp    esi,DWORD PTR [rsp+0x118]
    6500b411:	jae    0x6500b429
    6500b413:	jmp    0x6500b164
    6500b418:	call   0x65002320
    6500b41d:	nop
    6500b41e:	mov    ecx,0x80070057
    6500b423:	call   0x65001050
    6500b428:	nop
    6500b429:	mov    rbx,QWORD PTR [rsp+0x60]
    6500b42e:	mov    r13d,0x1
    6500b434:	jmp    0x6500b43c
    6500b436:	call   0x65002320
    6500b43b:	nop
    6500b43c:	xor    eax,eax
    6500b43e:	lock cmpxchg DWORD PTR [rip+0x3b979],r13d        # 0x65046dc0
    6500b447:	jne    0x6500b4b0
    6500b449:	lea    r8,[rip+0x2e480]        # 0x650398d0
    6500b450:	mov    edx,0x12
    6500b455:	lea    rcx,[rip+0x2e49c]        # 0x650398f8
    6500b45c:	call   0x6500bc30
    6500b461:	mov    rdi,rax
    6500b464:	lea    r8,[rip+0x2e4a5]        # 0x65039910
    6500b46b:	mov    edx,0x8
    6500b470:	lea    rcx,[rip+0x2e211]        # 0x65039688
    6500b477:	call   0x6500c5e0
    6500b47c:	mov    rcx,rax
    6500b47f:	call   QWORD PTR [rip+0x28ba3]        # 0x65034028
    6500b485:	add    DWORD PTR [rip+0x384bc],0x1        # 0x65043948
    6500b48c:	test   rax,rax
    6500b48f:	je     0x6500b4a7
    6500b491:	mov    rdx,rdi
    6500b494:	mov    rcx,rax
    6500b497:	call   QWORD PTR [rip+0x28c13]        # 0x650340b0
    6500b49d:	mov    r14,rax
    6500b4a0:	add    DWORD PTR [rip+0x384a5],0x1        # 0x6504394c
    6500b4a7:	mov    QWORD PTR [rip+0x3ba32],r14        # 0x65046ee0
    6500b4ae:	jmp    0x6500b4b7
    6500b4b0:	mov    r14,QWORD PTR [rip+0x3ba29]        # 0x65046ee0
    6500b4b7:	mov    rcx,rbx
    6500b4ba:	call   r14
    6500b4bd:	mov    rax,rbp
    6500b4c0:	add    rsp,0xb8
    6500b4c7:	pop    r15
    6500b4c9:	pop    r14
    6500b4cb:	pop    r13
    6500b4cd:	pop    r12
    6500b4cf:	pop    rdi
    6500b4d0:	pop    rsi
    6500b4d1:	pop    rbp
    6500b4d2:	pop    rbx
    6500b4d3:	ret    
    6500b4d4:	int3   
    6500b4d5:	int3   
    6500b4d6:	int3   
    6500b4d7:	int3   
    6500b4d8:	int3   
    6500b4d9:	int3   
    6500b4da:	int3   
    6500b4db:	int3   
    6500b4dc:	int3   
    6500b4dd:	int3   
    6500b4de:	int3   
    6500b4df:	int3   
    6500b4e0:	rex push rbp
    6500b4e2:	sub    rsp,0x20
    6500b4e6:	mov    rbp,rdx
    6500b4e9:	mov    eax,DWORD PTR [rbp+0x50]
    6500b4ec:	and    eax,0x1
    6500b4ef:	test   eax,eax
    6500b4f1:	je     0x6500b503
    6500b4f3:	and    DWORD PTR [rbp+0x50],0xfffffffe
    6500b4f7:	mov    rcx,QWORD PTR [rbp+0x100]
    6500b4fe:	call   0x65001cb0
    6500b503:	add    rsp,0x20
    6500b507:	pop    rbp
    6500b508:	ret    
    6500b509:	int3   
    6500b50a:	int3   
    6500b50b:	int3   
    6500b50c:	int3   
    6500b50d:	int3   
    6500b50e:	int3   
    6500b50f:	int3   
    6500b510:	rex push rbp
    6500b512:	sub    rsp,0x20
    6500b516:	mov    rbp,rdx
    6500b519:	lea    rcx,[rbp+0x40]
    6500b51d:	call   0x65002100
    6500b522:	add    rsp,0x20
    6500b526:	pop    rbp
    6500b527:	ret    
    6500b528:	int3   
    6500b529:	int3   
    6500b52a:	int3   
    6500b52b:	int3   
    6500b52c:	int3   
    6500b52d:	int3   
    6500b52e:	int3   
    6500b52f:	int3   
    6500b530:	rex push rbp
    6500b532:	sub    rsp,0x20
    6500b536:	mov    rbp,rdx
    6500b539:	lea    rcx,[rbp+0x40]
    6500b53d:	call   0x65001cb0
    6500b542:	add    rsp,0x20
    6500b546:	pop    rbp
    6500b547:	ret    
    6500b548:	int3   
    6500b549:	int3   
    6500b54a:	int3   
    6500b54b:	int3   
    6500b54c:	int3   
    6500b54d:	int3   
    6500b54e:	int3   
    6500b54f:	int3   
    6500b550:	rex push rbp
    6500b552:	sub    rsp,0x20
    6500b556:	mov    rbp,rdx
    6500b559:	lea    rcx,[rbp+0x70]
    6500b55d:	call   0x65001cb0
    6500b562:	add    rsp,0x20
    6500b566:	pop    rbp
    6500b567:	ret    
    6500b568:	int3   
    6500b569:	int3   
    6500b56a:	int3   
    6500b56b:	int3   
    6500b56c:	int3   
    6500b56d:	int3   
    6500b56e:	int3   
    6500b56f:	int3   
    6500b570:	rex push rdi
    6500b572:	sub    rsp,0x1a0
    6500b579:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500b582:	mov    QWORD PTR [rsp+0x1b8],rbx
    6500b58a:	mov    rax,QWORD PTR [rip+0x36b8f]        # 0x65042120
    6500b591:	xor    rax,rsp
    6500b594:	mov    QWORD PTR [rsp+0x190],rax
    6500b59c:	mov    rbx,rcx
    6500b59f:	mov    r9d,0xa0
    6500b5a5:	lea    r8,[rsp+0x50]
    6500b5aa:	mov    edx,0x7d0
    6500b5af:	lea    rcx,[rip+0xffffffffffff4a4a]        # 0x65000000
    6500b5b6:	call   QWORD PTR [rip+0x28dbc]        # 0x65034378
    6500b5bc:	test   eax,eax
    6500b5be:	je     0x6500b66b
    6500b5c4:	lea    rax,[rsp+0x20]
    6500b5c9:	mov    QWORD PTR [rsp+0x28],rax
    6500b5ce:	lea    rcx,[rip+0x36acb]        # 0x650420a0
    6500b5d5:	mov    rax,QWORD PTR [rip+0x36ac4]        # 0x650420a0
    6500b5dc:	call   QWORD PTR [rax+0x18]
    6500b5df:	add    rax,0x18
    6500b5e3:	mov    QWORD PTR [rsp+0x20],rax
    6500b5e8:	lea    rcx,[rsp+0x50]
    6500b5ed:	lea    rax,[rsp+0x50]
    6500b5f2:	test   rax,0xffffffffffff0000
    6500b5f8:	jne    0x6500b61d
    6500b5fa:	movzx  edi,cx
    6500b5fd:	xor    edx,edx
    6500b5ff:	mov    ecx,edi
    6500b601:	call   0x650026f0
    6500b606:	test   rax,rax
    6500b609:	je     0x6500b642
    6500b60b:	mov    r8d,edi
    6500b60e:	mov    rdx,rax
    6500b611:	lea    rcx,[rsp+0x20]
    6500b616:	call   0x65003e00
    6500b61b:	jmp    0x6500b642
    6500b61d:	xor    eax,eax
    6500b61f:	or     rcx,0xffffffffffffffff
    6500b623:	lea    rdi,[rsp+0x50]
    6500b628:	repnz scas ax,WORD PTR es:[rdi]
    6500b62b:	not    rcx
    6500b62e:	lea    r8d,[rcx-0x1]
    6500b632:	lea    rdx,[rsp+0x50]
    6500b637:	lea    rcx,[rsp+0x20]
    6500b63c:	call   0x65003f90
    6500b641:	nop
    6500b642:	lea    rdx,[rsp+0x20]
    6500b647:	lea    rcx,[rsp+0x38]
    6500b64c:	call   0x65004670
    6500b651:	mov    ecx,DWORD PTR [rax]
    6500b653:	mov    DWORD PTR [rbx],ecx
    6500b655:	mov    ecx,DWORD PTR [rax+0x4]
    6500b658:	mov    DWORD PTR [rbx+0x4],ecx
    6500b65b:	mov    ecx,DWORD PTR [rax+0x8]
    6500b65e:	mov    DWORD PTR [rbx+0x8],ecx
    6500b661:	mov    eax,DWORD PTR [rax+0xc]
    6500b664:	mov    DWORD PTR [rbx+0xc],eax
    6500b667:	mov    al,0x1
    6500b669:	jmp    0x6500b690
    6500b66b:	mov    eax,DWORD PTR [rip+0x29a07]        # 0x65035078
    6500b671:	mov    DWORD PTR [rbx],eax
    6500b673:	mov    eax,DWORD PTR [rip+0x29a03]        # 0x6503507c
    6500b679:	mov    DWORD PTR [rbx+0x4],eax
    6500b67c:	mov    eax,DWORD PTR [rip+0x299fe]        # 0x65035080
    6500b682:	mov    DWORD PTR [rbx+0x8],eax
    6500b685:	mov    eax,DWORD PTR [rip+0x299f9]        # 0x65035084
    6500b68b:	mov    DWORD PTR [rbx+0xc],eax
    6500b68e:	xor    al,al
    6500b690:	mov    rcx,QWORD PTR [rsp+0x190]
    6500b698:	xor    rcx,rsp
    6500b69b:	call   0x6501e4e0
    6500b6a0:	mov    rbx,QWORD PTR [rsp+0x1b8]
    6500b6a8:	add    rsp,0x1a0
    6500b6af:	pop    rdi
    6500b6b0:	ret    
    6500b6b1:	int3   
    6500b6b2:	int3   
    6500b6b3:	int3   
    6500b6b4:	int3   
    6500b6b5:	int3   
    6500b6b6:	int3   
    6500b6b7:	int3   
    6500b6b8:	int3   
    6500b6b9:	int3   
    6500b6ba:	int3   
    6500b6bb:	int3   
    6500b6bc:	int3   
    6500b6bd:	int3   
    6500b6be:	int3   
    6500b6bf:	int3   
    6500b6c0:	rex push rbp
    6500b6c2:	sub    rsp,0x20
    6500b6c6:	mov    rbp,rdx
    6500b6c9:	mov    rcx,QWORD PTR [rbp+0x28]
    6500b6cd:	call   0x65002100
    6500b6d2:	add    rsp,0x20
    6500b6d6:	pop    rbp
    6500b6d7:	ret    
    6500b6d8:	int3   
    6500b6d9:	int3   
    6500b6da:	int3   
    6500b6db:	int3   
    6500b6dc:	int3   
    6500b6dd:	int3   
    6500b6de:	int3   
    6500b6df:	int3   
    6500b6e0:	mov    QWORD PTR [rsp+0x10],rdx
    6500b6e5:	push   rbp
    6500b6e6:	sub    rsp,0x20
    6500b6ea:	mov    rbp,rdx
    6500b6ed:	lea    rax,[rip+0xffffffffffffff9a]        # 0x6500b68e
    6500b6f4:	jmp    0x6500b6f6
    6500b6f6:	add    rsp,0x20
    6500b6fa:	pop    rbp
    6500b6fb:	ret    
    6500b6fc:	int3   
    6500b6fd:	int3   
    6500b6fe:	int3   
    6500b6ff:	int3   
    6500b700:	mov    rax,rsp
    6500b703:	push   rdi
    6500b704:	push   r12
    6500b706:	push   r13
    6500b708:	push   r14
    6500b70a:	push   r15
    6500b70c:	sub    rsp,0x160
    6500b713:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500b71c:	mov    QWORD PTR [rax+0x8],rbx
    6500b720:	mov    QWORD PTR [rax+0x10],rbp
    6500b724:	mov    QWORD PTR [rax+0x18],rsi
    6500b728:	mov    rax,QWORD PTR [rip+0x369f1]        # 0x65042120
    6500b72f:	xor    rax,rsp
    6500b732:	mov    QWORD PTR [rsp+0x150],rax
    6500b73a:	cmp    DWORD PTR [rip+0x3b6e7],0x0        # 0x65046e28
    6500b741:	jne    0x6500b9d1
    6500b747:	mov    DWORD PTR [rip+0x3b6d7],0x18        # 0x65046e28
    6500b751:	xor    ebx,ebx
    6500b753:	mov    DWORD PTR [rip+0x3b6df],ebx        # 0x65046e38
    6500b759:	lea    r8,[rip+0x2d430]        # 0x65038b90
    6500b760:	lea    edx,[rbx+0x12]
    6500b763:	lea    rcx,[rip+0x2d456]        # 0x65038bc0
    6500b76a:	call   0x6500c5e0
    6500b76f:	mov    rbp,rax
    6500b772:	lea    rcx,[rip+0x36927]        # 0x650420a0
    6500b779:	mov    rdx,QWORD PTR [rip+0x36920]        # 0x650420a0
    6500b780:	call   QWORD PTR [rdx+0x18]
    6500b783:	add    rax,0x18
    6500b787:	mov    QWORD PTR [rsp+0x20],rax
    6500b78c:	or     rsi,0xffffffffffffffff
    6500b790:	test   rbp,rbp
    6500b793:	je     0x6500b7d5
    6500b795:	test   rbp,0xffffffffffff0000
    6500b79c:	jne    0x6500b7c1
    6500b79e:	movzx  edi,bp
    6500b7a1:	xor    edx,edx
    6500b7a3:	mov    ecx,edi
    6500b7a5:	call   0x650026f0
    6500b7aa:	test   rax,rax
    6500b7ad:	je     0x6500b7e8
    6500b7af:	mov    r8d,edi
    6500b7b2:	mov    rdx,rax
    6500b7b5:	lea    rcx,[rsp+0x20]
    6500b7ba:	call   0x65003e00
    6500b7bf:	jmp    0x6500b7e8
    6500b7c1:	xor    eax,eax
    6500b7c3:	mov    rcx,rsi
    6500b7c6:	mov    rdi,rbp
    6500b7c9:	repnz scas ax,WORD PTR es:[rdi]
    6500b7cc:	not    rcx
    6500b7cf:	sub    rcx,0x1
    6500b7d3:	jmp    0x6500b7d7
    6500b7d5:	mov    ecx,ebx
    6500b7d7:	mov    r8d,ecx
    6500b7da:	mov    rdx,rbp
    6500b7dd:	lea    rcx,[rsp+0x20]
    6500b7e2:	call   0x65003f90
    6500b7e7:	nop
    6500b7e8:	xor    edx,edx
    6500b7ea:	mov    r8d,0x110
    6500b7f0:	lea    rcx,[rsp+0x34]
    6500b7f5:	call   0x6501ee30
    6500b7fa:	mov    DWORD PTR [rsp+0x30],0x114
    6500b802:	lea    rcx,[rip+0x36897]        # 0x650420a0
    6500b809:	mov    rax,QWORD PTR [rip+0x36890]        # 0x650420a0
    6500b810:	call   QWORD PTR [rax+0x18]
    6500b813:	mov    rdi,rax
    6500b816:	lea    rcx,[rsp+0x30]
    6500b81b:	call   QWORD PTR [rip+0x2889f]        # 0x650340c0
    6500b821:	mov    r12d,0x1
    6500b827:	test   eax,eax
    6500b829:	je     0x6500b90b
    6500b82f:	mov    ebp,DWORD PTR [rsp+0x34]
    6500b833:	mov    rdx,rdi
    6500b836:	mov    eax,esi
    6500b838:	lock xadd DWORD PTR [rdi+0x10],eax
    6500b83d:	add    eax,0xffffffff
    6500b840:	test   eax,eax
    6500b842:	jg     0x6500b84d
    6500b844:	mov    rcx,QWORD PTR [rdi]
    6500b847:	mov    rax,QWORD PTR [rcx]
    6500b84a:	call   QWORD PTR [rax+0x8]
    6500b84d:	cmp    ebp,0x6
    6500b850:	jb     0x6500b925
    6500b856:	lea    r8,[rip+0x2d38b]        # 0x65038be8
    6500b85d:	mov    edx,0xf
    6500b862:	lea    rcx,[rip+0x2d3b7]        # 0x65038c20
    6500b869:	call   0x6500c5e0
    6500b86e:	mov    r12,rax
    6500b871:	test   rax,rax
    6500b874:	jne    0x6500b87b
    6500b876:	mov    r13d,ebx
    6500b879:	jmp    0x6500b88d
    6500b87b:	xor    eax,eax
    6500b87d:	mov    rcx,rsi
    6500b880:	mov    rdi,r12
    6500b883:	repnz scas ax,WORD PTR es:[rdi]
    6500b886:	not    rcx
    6500b889:	lea    r13,[rcx-0x1]
    6500b88d:	mov    r14,r12
    6500b890:	mov    rdi,QWORD PTR [rsp+0x20]
    6500b895:	sub    r14,rdi
    6500b898:	sar    r14,1
    6500b89b:	mov    r15d,DWORD PTR [rdi-0x10]
    6500b89f:	lea    ebp,[r15+r13*1]
    6500b8a3:	mov    edx,0x1
    6500b8a8:	sub    edx,DWORD PTR [rdi-0x8]
    6500b8ab:	mov    eax,DWORD PTR [rdi-0xc]
    6500b8ae:	sub    eax,ebp
    6500b8b0:	or     eax,edx
    6500b8b2:	jge    0x6500b8c5
    6500b8b4:	mov    edx,ebp
    6500b8b6:	lea    rcx,[rsp+0x20]
    6500b8bb:	call   0x65002640
    6500b8c0:	mov    rdi,QWORD PTR [rsp+0x20]
    6500b8c5:	cmp    r14,r15
    6500b8c8:	ja     0x6500b8ce
    6500b8ca:	lea    r12,[rdi+r14*2]
    6500b8ce:	movsxd rdx,r13d
    6500b8d1:	add    rdx,rdx
    6500b8d4:	lea    rcx,[rdi+r15*2]
    6500b8d8:	mov    r9,rdx
    6500b8db:	mov    r8,r12
    6500b8de:	call   0x6501d640
    6500b8e3:	test   ebp,ebp
    6500b8e5:	js     0x6500b900
    6500b8e7:	cmp    ebp,DWORD PTR [rdi-0xc]
    6500b8ea:	jg     0x6500b900
    6500b8ec:	mov    DWORD PTR [rdi-0x10],ebp
    6500b8ef:	movsxd rax,ebp
    6500b8f2:	mov    WORD PTR [rdi+rax*2],0x0
    6500b8f8:	mov    r12d,0x1
    6500b8fe:	jmp    0x6500b925
    6500b900:	mov    ecx,0x80070057
    6500b905:	call   0x65001050
    6500b90a:	int3   
    6500b90b:	mov    rdx,rdi
    6500b90e:	mov    eax,esi
    6500b910:	lock xadd DWORD PTR [rdi+0x10],eax
    6500b915:	add    eax,0xffffffff
    6500b918:	test   eax,eax
    6500b91a:	jg     0x6500b925
    6500b91c:	mov    rcx,QWORD PTR [rdi]
    6500b91f:	mov    rax,QWORD PTR [rcx]
    6500b922:	call   QWORD PTR [rax+0x8]
    6500b925:	xor    eax,eax
    6500b927:	lock cmpxchg DWORD PTR [rip+0x3b470],r12d        # 0x65046da0
    6500b930:	jne    0x6500b999
    6500b932:	lea    r8,[rip+0x2de67]        # 0x650397a0
    6500b939:	mov    edx,0x34
    6500b93e:	lea    rcx,[rip+0x2de9b]        # 0x650397e0
    6500b945:	call   0x6500bc30
    6500b94a:	mov    rdi,rax
    6500b94d:	lea    r8,[rip+0x2dec4]        # 0x65039818
    6500b954:	mov    edx,0x8
    6500b959:	lea    rcx,[rip+0x2dd28]        # 0x65039688
    6500b960:	call   0x6500c5e0
    6500b965:	mov    rcx,rax
    6500b968:	call   QWORD PTR [rip+0x286ba]        # 0x65034028
    6500b96e:	add    DWORD PTR [rip+0x37fd3],0x1        # 0x65043948
    6500b975:	test   rax,rax
    6500b978:	je     0x6500b990
    6500b97a:	mov    rdx,rdi
    6500b97d:	mov    rcx,rax
    6500b980:	call   QWORD PTR [rip+0x2872a]        # 0x650340b0
    6500b986:	mov    rbx,rax
    6500b989:	add    DWORD PTR [rip+0x37fbc],0x1        # 0x6504394c
    6500b990:	mov    QWORD PTR [rip+0x3b539],rbx        # 0x65046ed0
    6500b997:	jmp    0x6500b9a0
    6500b999:	mov    rbx,QWORD PTR [rip+0x3b530]        # 0x65046ed0
    6500b9a0:	xor    r9d,r9d
    6500b9a3:	lea    r8,[rip+0x3b486]        # 0x65046e30
    6500b9aa:	mov    edx,r12d
    6500b9ad:	mov    rdi,QWORD PTR [rsp+0x20]
    6500b9b2:	mov    rcx,rdi
    6500b9b5:	call   rbx
    6500b9b7:	nop
    6500b9b8:	lea    rdx,[rdi-0x18]
    6500b9bc:	lock xadd DWORD PTR [rdx+0x10],esi
    6500b9c1:	add    esi,0xffffffff
    6500b9c4:	test   esi,esi
    6500b9c6:	jg     0x6500b9d1
    6500b9c8:	mov    rcx,QWORD PTR [rdx]
    6500b9cb:	mov    rax,QWORD PTR [rcx]
    6500b9ce:	call   QWORD PTR [rax+0x8]
    6500b9d1:	lea    rax,[rip+0x3b450]        # 0x65046e28
    6500b9d8:	mov    rcx,QWORD PTR [rsp+0x150]
    6500b9e0:	xor    rcx,rsp
    6500b9e3:	call   0x6501e4e0
    6500b9e8:	lea    r11,[rsp+0x160]
    6500b9f0:	mov    rbx,QWORD PTR [r11+0x30]
    6500b9f4:	mov    rbp,QWORD PTR [r11+0x38]
    6500b9f8:	mov    rsi,QWORD PTR [r11+0x40]
    6500b9fc:	mov    rsp,r11
    6500b9ff:	pop    r15
    6500ba01:	pop    r14
    6500ba03:	pop    r13
    6500ba05:	pop    r12
    6500ba07:	pop    rdi
    6500ba08:	ret    
    6500ba09:	int3   
    6500ba0a:	int3   
    6500ba0b:	int3   
    6500ba0c:	int3   
    6500ba0d:	int3   
    6500ba0e:	int3   
    6500ba0f:	int3   
    6500ba10:	rex push rbp
    6500ba12:	sub    rsp,0x20
    6500ba16:	mov    rbp,rdx
    6500ba19:	lea    rcx,[rbp+0x20]
    6500ba1d:	call   0x65002100
    6500ba22:	add    rsp,0x20
    6500ba26:	pop    rbp
    6500ba27:	ret    
    6500ba28:	int3   
    6500ba29:	int3   
    6500ba2a:	int3   
    6500ba2b:	int3   
    6500ba2c:	int3   
    6500ba2d:	int3   
    6500ba2e:	int3   
    6500ba2f:	int3   
    6500ba30:	rex push rbp
    6500ba32:	sub    rsp,0x20
    6500ba36:	mov    rbp,rdx
    6500ba39:	lea    rcx,[rbp+0x20]
    6500ba3d:	call   0x65001cb0
    6500ba42:	add    rsp,0x20
    6500ba46:	pop    rbp
    6500ba47:	ret    
    6500ba48:	int3   
    6500ba49:	int3   
    6500ba4a:	int3   
    6500ba4b:	int3   
    6500ba4c:	int3   
    6500ba4d:	int3   
    6500ba4e:	int3   
    6500ba4f:	int3   
    6500ba50:	mov    QWORD PTR [rsp+0x8],rbx
    6500ba55:	mov    QWORD PTR [rsp+0x10],rbp
    6500ba5a:	mov    QWORD PTR [rsp+0x18],rsi
    6500ba5f:	push   rdi
    6500ba60:	sub    rsp,0x20
    6500ba64:	mov    rdx,QWORD PTR [rdx]
    6500ba67:	mov    rbx,QWORD PTR [rcx]
    6500ba6a:	mov    rsi,rcx
    6500ba6d:	lea    rdi,[rdx-0x18]
    6500ba71:	sub    rbx,0x18
    6500ba75:	cmp    rdi,rbx
    6500ba78:	je     0x6500bb20
    6500ba7e:	cmp    DWORD PTR [rbx+0x10],0x0
    6500ba82:	jl     0x6500bb14
    6500ba88:	mov    rcx,QWORD PTR [rdi]
    6500ba8b:	cmp    rcx,QWORD PTR [rbx]
    6500ba8e:	jne    0x6500bb14
    6500ba94:	mov    rax,QWORD PTR [rcx]
    6500ba97:	call   QWORD PTR [rax+0x20]
    6500ba9a:	cmp    DWORD PTR [rdi+0x10],0x0
    6500ba9e:	mov    rcx,rax
    6500baa1:	jl     0x6500bab2
    6500baa3:	cmp    rax,QWORD PTR [rdi]
    6500baa6:	jne    0x6500bab2
    6500baa8:	mov    rbp,rdi
    6500baab:	lock add DWORD PTR [rdi+0x10],0x1
    6500bab0:	jmp    0x6500baf0
    6500bab2:	mov    rax,QWORD PTR [rax]
    6500bab5:	mov    edx,DWORD PTR [rdi+0x8]
    6500bab8:	mov    r8d,0x2
    6500babe:	call   QWORD PTR [rax]
    6500bac0:	test   rax,rax
    6500bac3:	mov    rbp,rax
    6500bac6:	jne    0x6500bace
    6500bac8:	call   0x65002320
    6500bacd:	int3   
    6500bace:	mov    eax,DWORD PTR [rdi+0x8]
    6500bad1:	lea    r8,[rdi+0x18]
    6500bad5:	lea    rcx,[rbp+0x18]
    6500bad9:	mov    DWORD PTR [rbp+0x8],eax
    6500badc:	mov    eax,DWORD PTR [rdi+0x8]
    6500badf:	add    eax,0x1
    6500bae2:	movsxd rdx,eax
    6500bae5:	add    rdx,rdx
    6500bae8:	mov    r9,rdx
    6500baeb:	call   0x6501d640
    6500baf0:	or     eax,0xffffffff
    6500baf3:	lock xadd DWORD PTR [rbx+0x10],eax
    6500baf8:	add    eax,0xffffffff
    6500bafb:	test   eax,eax
    6500bafd:	jg     0x6500bb0b
    6500baff:	mov    rcx,QWORD PTR [rbx]
    6500bb02:	mov    rdx,rbx
    6500bb05:	mov    rax,QWORD PTR [rcx]
    6500bb08:	call   QWORD PTR [rax+0x8]
    6500bb0b:	lea    rax,[rbp+0x18]
    6500bb0f:	mov    QWORD PTR [rsi],rax
    6500bb12:	jmp    0x6500bb20
    6500bb14:	mov    r8d,DWORD PTR [rdx-0x10]
    6500bb18:	mov    rcx,rsi
    6500bb1b:	call   0x65003f90
    6500bb20:	mov    rbx,QWORD PTR [rsp+0x30]
    6500bb25:	mov    rbp,QWORD PTR [rsp+0x38]
    6500bb2a:	mov    rax,rsi
    6500bb2d:	mov    rsi,QWORD PTR [rsp+0x40]
    6500bb32:	add    rsp,0x20
    6500bb36:	pop    rdi
    6500bb37:	ret    
    6500bb38:	int3   
    6500bb39:	int3   
    6500bb3a:	int3   
    6500bb3b:	int3   
    6500bb3c:	int3   
    6500bb3d:	int3   
    6500bb3e:	int3   
    6500bb3f:	int3   
    6500bb40:	mov    QWORD PTR [rsp+0x10],rbx
    6500bb45:	push   rdi
    6500bb46:	sub    rsp,0x20
    6500bb4a:	mov    rax,QWORD PTR [rcx]
    6500bb4d:	mov    rdi,rcx
    6500bb50:	cmp    WORD PTR [rax],0x7b
    6500bb54:	mov    rbx,rax
    6500bb57:	jne    0x6500bb6a
    6500bb59:	data16 xchg ax,ax
    6500bb5c:	data16 data16 xchg ax,ax
    6500bb60:	add    rbx,0x2
    6500bb64:	cmp    WORD PTR [rbx],0x7b
    6500bb68:	je     0x6500bb60
    6500bb6a:	cmp    rbx,rax
    6500bb6d:	mov    QWORD PTR [rsp+0x30],rsi
    6500bb72:	je     0x6500bc0e
    6500bb78:	mov    edx,DWORD PTR [rax-0x10]
    6500bb7b:	sub    rbx,rax
    6500bb7e:	mov    ecx,0x1
    6500bb83:	sub    ecx,DWORD PTR [rax-0x8]
    6500bb86:	mov    eax,DWORD PTR [rax-0xc]
    6500bb89:	sar    rbx,1
    6500bb8c:	sub    eax,edx
    6500bb8e:	or     ecx,eax
    6500bb90:	jge    0x6500bb9a
    6500bb92:	mov    rcx,rdi
    6500bb95:	call   0x65002640
    6500bb9a:	mov    rcx,QWORD PTR [rdi]
    6500bb9d:	mov    esi,DWORD PTR [rcx-0x10]
    6500bba0:	sub    esi,ebx
    6500bba2:	lea    eax,[rsi+0x1]
    6500bba5:	movsxd rdx,eax
    6500bba8:	movsxd rax,ebx
    6500bbab:	add    rdx,rdx
    6500bbae:	lea    r8,[rcx+rax*2]
    6500bbb2:	mov    r9,rdx
    6500bbb5:	call   0x6501d710
    6500bbba:	test   eax,eax
    6500bbbc:	je     0x6500bbf3
    6500bbbe:	cmp    eax,0xc
    6500bbc1:	je     0x6500bbe8
    6500bbc3:	cmp    eax,0x16
    6500bbc6:	je     0x6500bbdd
    6500bbc8:	cmp    eax,0x22
    6500bbcb:	je     0x6500bbdd
    6500bbcd:	cmp    eax,0x50
    6500bbd0:	je     0x6500bbf3
    6500bbd2:	mov    ecx,0x80004005
    6500bbd7:	call   0x65001050
    6500bbdc:	int3   
    6500bbdd:	mov    ecx,0x80070057
    6500bbe2:	call   0x65001050
    6500bbe7:	int3   
    6500bbe8:	mov    ecx,0x8007000e
    6500bbed:	call   0x65001050
    6500bbf2:	int3   
    6500bbf3:	test   esi,esi
    6500bbf5:	js     0x6500bc21
    6500bbf7:	mov    rax,QWORD PTR [rdi]
    6500bbfa:	cmp    esi,DWORD PTR [rax-0xc]
    6500bbfd:	jg     0x6500bc21
    6500bbff:	mov    DWORD PTR [rax-0x10],esi
    6500bc02:	mov    rax,QWORD PTR [rdi]
    6500bc05:	movsxd rcx,esi
    6500bc08:	mov    WORD PTR [rax+rcx*2],0x0
    6500bc0e:	mov    rsi,QWORD PTR [rsp+0x30]
    6500bc13:	mov    rbx,QWORD PTR [rsp+0x38]
    6500bc18:	mov    rax,rdi
    6500bc1b:	add    rsp,0x20
    6500bc1f:	pop    rdi
    6500bc20:	ret    
    6500bc21:	mov    ecx,0x80070057
    6500bc26:	call   0x65001050
    6500bc2b:	int3   
    6500bc2c:	int3   
    6500bc2d:	int3   
    6500bc2e:	int3   
    6500bc2f:	int3   
    6500bc30:	rex push rbp
    6500bc32:	push   rsi
    6500bc33:	push   rdi
    6500bc34:	push   r12
    6500bc36:	push   r13
    6500bc38:	push   r14
    6500bc3a:	push   r15
    6500bc3c:	sub    rsp,0x1c0
    6500bc43:	mov    QWORD PTR [rsp+0x160],0xfffffffffffffffe
    6500bc4f:	mov    QWORD PTR [rsp+0x210],rbx
    6500bc57:	mov    rax,QWORD PTR [rip+0x364c2]        # 0x65042120
    6500bc5e:	xor    rax,rsp
    6500bc61:	mov    QWORD PTR [rsp+0x1b8],rax
    6500bc69:	mov    QWORD PTR [rsp+0x58],r8
    6500bc6e:	mov    rbx,rdx
    6500bc71:	mov    r15,rcx
    6500bc74:	mov    rax,QWORD PTR [rip+0x3b0b5]        # 0x65046d30
    6500bc7b:	test   rax,rax
    6500bc7e:	jne    0x6500bc94
    6500bc80:	xor    r8d,r8d
    6500bc83:	xor    edx,edx
    6500bc85:	xor    ecx,ecx
    6500bc87:	call   QWORD PTR [rip+0x2849b]        # 0x65034128
    6500bc8d:	mov    QWORD PTR [rip+0x3b09c],rax        # 0x65046d30
    6500bc94:	or     edx,0xffffffff
    6500bc97:	mov    rcx,rax
    6500bc9a:	call   QWORD PTR [rip+0x28408]        # 0x650340a8
    6500bca0:	test   eax,eax
    6500bca2:	je     0x6500bcac
    6500bca4:	mov    rax,r15
    6500bca7:	jmp    0x6500c451
    6500bcac:	mov    r12d,0xf
    6500bcb2:	mov    QWORD PTR [rsp+0x188],r12
    6500bcba:	xor    esi,esi
    6500bcbc:	mov    QWORD PTR [rsp+0x180],rsi
    6500bcc4:	mov    BYTE PTR [rsp+0x170],sil
    6500bccc:	cmp    rbx,0xfffffffffffffffe
    6500bcd0:	jbe    0x6500bce7
    6500bcd2:	call   0x6501cfe0
    6500bcd7:	mov    r12,QWORD PTR [rsp+0x188]
    6500bcdf:	mov    rsi,QWORD PTR [rsp+0x180]
    6500bce7:	cmp    r12,rbx
    6500bcea:	jae    0x6500bd11
    6500bcec:	mov    r8,rsi
    6500bcef:	mov    rdx,rbx
    6500bcf2:	lea    rcx,[rsp+0x168]
    6500bcfa:	call   0x65002330
    6500bcff:	mov    r12,QWORD PTR [rsp+0x188]
    6500bd07:	mov    rsi,QWORD PTR [rsp+0x180]
    6500bd0f:	jmp    0x6500bd47
    6500bd11:	test   rbx,rbx
    6500bd14:	jne    0x6500bd47
    6500bd16:	mov    QWORD PTR [rsp+0x180],rbx
    6500bd1e:	lea    rax,[rsp+0x170]
    6500bd26:	cmp    r12,0x10
    6500bd2a:	cmovae rax,QWORD PTR [rsp+0x170]
    6500bd33:	mov    BYTE PTR [rax],bl
    6500bd35:	mov    r12,QWORD PTR [rsp+0x188]
    6500bd3d:	mov    rsi,QWORD PTR [rsp+0x180]
    6500bd45:	jmp    0x6500bda5
    6500bd47:	test   rbx,rbx
    6500bd4a:	je     0x6500bda5
    6500bd4c:	lea    rcx,[rsp+0x170]
    6500bd54:	cmp    r12,0x10
    6500bd58:	cmovae rcx,QWORD PTR [rsp+0x170]
    6500bd61:	mov    r9,rbx
    6500bd64:	mov    r8,r15
    6500bd67:	mov    rdx,r12
    6500bd6a:	call   0x6501d640
    6500bd6f:	mov    QWORD PTR [rsp+0x180],rbx
    6500bd77:	lea    rax,[rsp+0x170]
    6500bd7f:	cmp    QWORD PTR [rsp+0x188],0x10
    6500bd88:	cmovae rax,QWORD PTR [rsp+0x170]
    6500bd91:	mov    BYTE PTR [rbx+rax*1],0x0
    6500bd95:	mov    r12,QWORD PTR [rsp+0x188]
    6500bd9d:	mov    rsi,QWORD PTR [rsp+0x180]
    6500bda5:	mov    ebp,DWORD PTR [rip+0x3b041]        # 0x65046dec
    6500bdab:	lea    rax,[rip+0x3b03e]        # 0x65046df0
    6500bdb2:	test   bpl,0x1
    6500bdb6:	jne    0x6500be22
    6500bdb8:	or     ebp,0x1
    6500bdbb:	mov    DWORD PTR [rip+0x3b02b],ebp        # 0x65046dec
    6500bdc1:	mov    rcx,rax
    6500bdc4:	call   0x65010960
    6500bdc9:	mov    QWORD PTR [rip+0x3b028],rax        # 0x65046df8
    6500bdd0:	mov    BYTE PTR [rax+0x69],0x1
    6500bdd4:	mov    rax,QWORD PTR [rip+0x3b01d]        # 0x65046df8
    6500bddb:	mov    QWORD PTR [rax+0x8],rax
    6500bddf:	mov    rax,QWORD PTR [rip+0x3b012]        # 0x65046df8
    6500bde6:	mov    QWORD PTR [rax],rax
    6500bde9:	mov    rax,QWORD PTR [rip+0x3b008]        # 0x65046df8
    6500bdf0:	mov    QWORD PTR [rax+0x10],rax
    6500bdf4:	mov    QWORD PTR [rip+0x3b001],0x0        # 0x65046e00
    6500bdff:	lea    rcx,[rip+0x275da]        # 0x650333e0
    6500be06:	call   0x6501e680
    6500be0b:	nop
    6500be0c:	mov    r12,QWORD PTR [rsp+0x188]
    6500be14:	mov    rsi,QWORD PTR [rsp+0x180]
    6500be1c:	mov    ebp,DWORD PTR [rip+0x3afca]        # 0x65046dec
    6500be22:	mov    r13,QWORD PTR [rip+0x3afcf]        # 0x65046df8
    6500be29:	mov    rbx,QWORD PTR [r13+0x8]
    6500be2d:	mov    r14,r13
    6500be30:	mov    rax,QWORD PTR [rsp+0x170]
    6500be38:	cmp    BYTE PTR [rbx+0x69],0x0
    6500be3c:	jne    0x6500bead
    6500be3e:	xchg   ax,ax
    6500be40:	lea    rdx,[rsp+0x170]
    6500be48:	cmp    r12,0x10
    6500be4c:	cmovae rdx,rax
    6500be50:	mov    rdi,QWORD PTR [rbx+0x30]
    6500be54:	cmp    rdi,rdi
    6500be57:	cmovb  rdi,rdi
    6500be5b:	cmp    QWORD PTR [rbx+0x38],0x10
    6500be60:	jb     0x6500be68
    6500be62:	mov    rcx,QWORD PTR [rbx+0x20]
    6500be66:	jmp    0x6500be6c
    6500be68:	lea    rcx,[rbx+0x20]
    6500be6c:	mov    r8,rsi
    6500be6f:	cmp    rdi,rsi
    6500be72:	cmovb  r8,rdi
    6500be76:	call   0x6501d570
    6500be7b:	movsxd rcx,eax
    6500be7e:	test   eax,eax
    6500be80:	jne    0x6500be8f
    6500be82:	cmp    rdi,rsi
    6500be85:	jb     0x6500be9b
    6500be87:	cmp    rdi,rsi
    6500be8a:	setne  al
    6500be8d:	mov    ecx,eax
    6500be8f:	test   ecx,ecx
    6500be91:	js     0x6500be9b
    6500be93:	mov    r14,rbx
    6500be96:	mov    rbx,QWORD PTR [rbx]
    6500be99:	jmp    0x6500be9f
    6500be9b:	mov    rbx,QWORD PTR [rbx+0x10]
    6500be9f:	cmp    BYTE PTR [rbx+0x69],0x0
    6500bea3:	mov    rax,QWORD PTR [rsp+0x170]
    6500beab:	je     0x6500be40
    6500bead:	mov    QWORD PTR [rsp+0x68],r14
    6500beb2:	lea    rcx,[rip+0x3af37]        # 0x65046df0
    6500beb9:	mov    QWORD PTR [rsp+0x60],rcx
    6500bebe:	cmp    r14,r13
    6500bec1:	je     0x6500bf1d
    6500bec3:	mov    rbx,QWORD PTR [r14+0x30]
    6500bec7:	cmp    QWORD PTR [r14+0x38],0x10
    6500becc:	jb     0x6500bed4
    6500bece:	mov    rdx,QWORD PTR [r14+0x20]
    6500bed2:	jmp    0x6500bed8
    6500bed4:	lea    rdx,[r14+0x20]
    6500bed8:	lea    rcx,[rsp+0x170]
    6500bee0:	cmp    r12,0x10
    6500bee4:	cmovae rcx,rax
    6500bee8:	mov    r8,rbx
    6500beeb:	cmp    rsi,rbx
    6500beee:	cmovb  r8,rsi
    6500bef2:	call   0x6501d570
    6500bef7:	movsxd rcx,eax
    6500befa:	test   eax,eax
    6500befc:	jne    0x6500bf0b
    6500befe:	cmp    rsi,rbx
    6500bf01:	jb     0x6500bf1d
    6500bf03:	cmp    rsi,rbx
    6500bf06:	setne  al
    6500bf09:	mov    ecx,eax
    6500bf0b:	test   ecx,ecx
    6500bf0d:	js     0x6500bf1d
    6500bf0f:	lea    rcx,[rsp+0x60]
    6500bf14:	lea    r14,[rip+0x3aed5]        # 0x65046df0
    6500bf1b:	jmp    0x6500bf33
    6500bf1d:	mov    QWORD PTR [rsp+0x38],r13
    6500bf22:	lea    r14,[rip+0x3aec7]        # 0x65046df0
    6500bf29:	mov    QWORD PTR [rsp+0x30],r14
    6500bf2e:	lea    rcx,[rsp+0x30]
    6500bf33:	lea    rdx,[rsp+0x20]
    6500bf38:	mov    rax,QWORD PTR [rcx]
    6500bf3b:	mov    QWORD PTR [rdx],rax
    6500bf3e:	mov    rax,QWORD PTR [rcx+0x8]
    6500bf42:	mov    QWORD PTR [rdx+0x8],rax
    6500bf46:	test   bpl,0x1
    6500bf4a:	jne    0x6500bfae
    6500bf4c:	or     ebp,0x1
    6500bf4f:	mov    DWORD PTR [rip+0x3ae97],ebp        # 0x65046dec
    6500bf55:	mov    rcx,r14
    6500bf58:	call   0x65010960
    6500bf5d:	mov    QWORD PTR [rip+0x3ae94],rax        # 0x65046df8
    6500bf64:	mov    BYTE PTR [rax+0x69],0x1
    6500bf68:	mov    rax,QWORD PTR [rip+0x3ae89]        # 0x65046df8
    6500bf6f:	mov    QWORD PTR [rax+0x8],rax
    6500bf73:	mov    rax,QWORD PTR [rip+0x3ae7e]        # 0x65046df8
    6500bf7a:	mov    QWORD PTR [rax],rax
    6500bf7d:	mov    rax,QWORD PTR [rip+0x3ae74]        # 0x65046df8
    6500bf84:	mov    QWORD PTR [rax+0x10],rax
    6500bf88:	xor    r12d,r12d
    6500bf8b:	mov    QWORD PTR [rip+0x3ae6e],r12        # 0x65046e00
    6500bf92:	lea    rcx,[rip+0x27447]        # 0x650333e0
    6500bf99:	call   0x6501e680
    6500bf9e:	nop
    6500bf9f:	mov    ebp,DWORD PTR [rip+0x3ae47]        # 0x65046dec
    6500bfa5:	mov    r13,QWORD PTR [rip+0x3ae4c]        # 0x65046df8
    6500bfac:	jmp    0x6500bfb1
    6500bfae:	xor    r12d,r12d
    6500bfb1:	mov    rbx,r13
    6500bfb4:	mov    rsi,QWORD PTR [rsp+0x20]
    6500bfb9:	test   rsi,rsi
    6500bfbc:	je     0x6500bfc3
    6500bfbe:	cmp    rsi,r14
    6500bfc1:	je     0x6500bfd5
    6500bfc3:	call   0x6501d960
    6500bfc8:	mov    ebp,DWORD PTR [rip+0x3ae1e]        # 0x65046dec
    6500bfce:	mov    r13,QWORD PTR [rip+0x3ae23]        # 0x65046df8
    6500bfd5:	mov    rdi,QWORD PTR [rsp+0x28]
    6500bfda:	cmp    rdi,rbx
    6500bfdd:	jne    0x6500c29c
    6500bfe3:	mov    QWORD PTR [rsp+0x50],0xf
    6500bfec:	mov    QWORD PTR [rsp+0x48],r12
    6500bff1:	mov    BYTE PTR [rsp+0x38],0x0
    6500bff6:	or     r9,0xffffffffffffffff
    6500bffa:	xor    r8d,r8d
    6500bffd:	lea    rdx,[rsp+0x168]
    6500c005:	lea    rcx,[rsp+0x30]
    6500c00a:	call   0x65001e20
    6500c00f:	lea    rdx,[rsp+0x30]
    6500c014:	lea    rcx,[rsp+0x190]
    6500c01c:	call   0x6500d510
    6500c021:	nop
    6500c022:	lea    rax,[rsp+0xc0]
    6500c02a:	mov    QWORD PTR [rsp+0x60],rax
    6500c02f:	mov    QWORD PTR [rsp+0xe0],0xf
    6500c03b:	mov    QWORD PTR [rsp+0xd8],r12
    6500c043:	mov    BYTE PTR [rsp+0xc8],0x0
    6500c04b:	or     r9,0xffffffffffffffff
    6500c04f:	xor    r8d,r8d
    6500c052:	lea    rdx,[rsp+0x190]
    6500c05a:	lea    rcx,[rsp+0xc0]
    6500c062:	call   0x65001e20
    6500c067:	nop
    6500c068:	mov    QWORD PTR [rsp+0x158],0xf
    6500c074:	mov    QWORD PTR [rsp+0x150],r12
    6500c07c:	mov    BYTE PTR [rsp+0x140],0x0
    6500c084:	or     r9,0xffffffffffffffff
    6500c088:	xor    r8d,r8d
    6500c08b:	lea    rdx,[rsp+0x168]
    6500c093:	lea    rcx,[rsp+0x138]
    6500c09b:	call   0x65001e20
    6500c0a0:	nop
    6500c0a1:	lea    r8,[rsp+0xc0]
    6500c0a9:	lea    rdx,[rsp+0x138]
    6500c0b1:	lea    rcx,[rsp+0xe8]
    6500c0b9:	call   0x65011450
    6500c0be:	mov    rbx,rax
    6500c0c1:	mov    QWORD PTR [rsp+0x90],0xf
    6500c0cd:	mov    QWORD PTR [rsp+0x88],r12
    6500c0d5:	mov    BYTE PTR [rsp+0x78],0x0
    6500c0da:	or     r9,0xffffffffffffffff
    6500c0de:	xor    r8d,r8d
    6500c0e1:	mov    rdx,rax
    6500c0e4:	lea    rcx,[rsp+0x70]
    6500c0e9:	call   0x65001e20
    6500c0ee:	nop
    6500c0ef:	lea    rdx,[rbx+0x28]
    6500c0f3:	mov    QWORD PTR [rsp+0xb8],0xf
    6500c0ff:	mov    QWORD PTR [rsp+0xb0],r12
    6500c107:	mov    BYTE PTR [rsp+0xa0],0x0
    6500c10f:	or     r9,0xffffffffffffffff
    6500c113:	xor    r8d,r8d
    6500c116:	lea    rcx,[rsp+0x98]
    6500c11e:	call   0x65001e20
    6500c123:	nop
    6500c124:	mov    eax,DWORD PTR [rip+0x3acc2]        # 0x65046dec
    6500c12a:	test   al,0x1
    6500c12c:	jne    0x6500c17e
    6500c12e:	or     eax,0x1
    6500c131:	mov    DWORD PTR [rip+0x3acb5],eax        # 0x65046dec
    6500c137:	mov    rcx,r14
    6500c13a:	call   0x65010960
    6500c13f:	mov    QWORD PTR [rip+0x3acb2],rax        # 0x65046df8
    6500c146:	mov    BYTE PTR [rax+0x69],0x1
    6500c14a:	mov    rax,QWORD PTR [rip+0x3aca7]        # 0x65046df8
    6500c151:	mov    QWORD PTR [rax+0x8],rax
    6500c155:	mov    rax,QWORD PTR [rip+0x3ac9c]        # 0x65046df8
    6500c15c:	mov    QWORD PTR [rax],rax
    6500c15f:	mov    rax,QWORD PTR [rip+0x3ac92]        # 0x65046df8
    6500c166:	mov    QWORD PTR [rax+0x10],rax
    6500c16a:	mov    QWORD PTR [rip+0x3ac8f],r12        # 0x65046e00
    6500c171:	lea    rcx,[rip+0x27268]        # 0x650333e0
    6500c178:	call   0x6501e680
    6500c17d:	nop
    6500c17e:	lea    r8,[rsp+0x70]
    6500c183:	lea    rdx,[rsp+0x30]
    6500c188:	mov    rcx,r14
    6500c18b:	call   0x6500df50
    6500c190:	nop
    6500c191:	cmp    QWORD PTR [rsp+0xb8],0x10
    6500c19a:	jb     0x6500c1a9
    6500c19c:	mov    rcx,QWORD PTR [rsp+0xa0]
    6500c1a4:	call   0x6501d190
    6500c1a9:	mov    QWORD PTR [rsp+0xb8],0xf
    6500c1b5:	mov    QWORD PTR [rsp+0xb0],r12
    6500c1bd:	mov    BYTE PTR [rsp+0xa0],0x0
    6500c1c5:	cmp    QWORD PTR [rsp+0x90],0x10
    6500c1ce:	jb     0x6500c1da
    6500c1d0:	mov    rcx,QWORD PTR [rsp+0x78]
    6500c1d5:	call   0x6501d190
    6500c1da:	mov    QWORD PTR [rsp+0x90],0xf
    6500c1e6:	mov    QWORD PTR [rsp+0x88],r12
    6500c1ee:	mov    BYTE PTR [rsp+0x78],0x0
    6500c1f3:	cmp    QWORD PTR [rsp+0x130],0x10
    6500c1fc:	jb     0x6500c20b
    6500c1fe:	mov    rcx,QWORD PTR [rsp+0x118]
    6500c206:	call   0x6501d190
    6500c20b:	mov    QWORD PTR [rsp+0x130],0xf
    6500c217:	mov    QWORD PTR [rsp+0x128],r12
    6500c21f:	mov    BYTE PTR [rsp+0x118],0x0
    6500c227:	cmp    QWORD PTR [rsp+0x108],0x10
    6500c230:	jb     0x6500c23f
    6500c232:	mov    rcx,QWORD PTR [rsp+0xf0]
    6500c23a:	call   0x6501d190
    6500c23f:	mov    QWORD PTR [rsp+0x108],0xf
    6500c24b:	mov    QWORD PTR [rsp+0x100],r12
    6500c253:	mov    BYTE PTR [rsp+0xf0],0x0
    6500c25b:	cmp    QWORD PTR [rsp+0x1b0],0x10
    6500c264:	jb     0x6500c273
    6500c266:	mov    rcx,QWORD PTR [rsp+0x198]
    6500c26e:	call   0x6501d190
    6500c273:	mov    QWORD PTR [rsp+0x1b0],0xf
    6500c27f:	mov    QWORD PTR [rsp+0x1a8],r12
    6500c287:	mov    BYTE PTR [rsp+0x198],0x0
    6500c28f:	mov    ebp,DWORD PTR [rip+0x3ab57]        # 0x65046dec
    6500c295:	mov    r13,QWORD PTR [rip+0x3ab5c]        # 0x65046df8
    6500c29c:	mov    rax,QWORD PTR [rsp+0x58]
    6500c2a1:	movzx  eax,BYTE PTR [rax]
    6500c2a4:	cmp    eax,0x100
    6500c2a9:	jge    0x6500c344
    6500c2af:	test   bpl,0x1
    6500c2b3:	jne    0x6500c305
    6500c2b5:	or     ebp,0x1
    6500c2b8:	mov    DWORD PTR [rip+0x3ab2e],ebp        # 0x65046dec
    6500c2be:	mov    rcx,r14
    6500c2c1:	call   0x65010960
    6500c2c6:	mov    QWORD PTR [rip+0x3ab2b],rax        # 0x65046df8
    6500c2cd:	mov    BYTE PTR [rax+0x69],0x1
    6500c2d1:	mov    rax,QWORD PTR [rip+0x3ab20]        # 0x65046df8
    6500c2d8:	mov    QWORD PTR [rax+0x8],rax
    6500c2dc:	mov    rax,QWORD PTR [rip+0x3ab15]        # 0x65046df8
    6500c2e3:	mov    QWORD PTR [rax],rax
    6500c2e6:	mov    rax,QWORD PTR [rip+0x3ab0b]        # 0x65046df8
    6500c2ed:	mov    QWORD PTR [rax+0x10],rax
    6500c2f1:	mov    QWORD PTR [rip+0x3ab08],r12        # 0x65046e00
    6500c2f8:	lea    rcx,[rip+0x270e1]        # 0x650333e0
    6500c2ff:	call   0x6501e680
    6500c304:	nop
    6500c305:	lea    r8,[rsp+0x168]
    6500c30d:	lea    rdx,[rsp+0x30]
    6500c312:	mov    rcx,r14
    6500c315:	call   0x6500e1a0
    6500c31a:	lea    rdx,[rsp+0x20]
    6500c31f:	mov    rcx,QWORD PTR [rax]
    6500c322:	mov    QWORD PTR [rdx],rcx
    6500c325:	mov    rax,QWORD PTR [rax+0x8]
    6500c329:	mov    QWORD PTR [rdx+0x8],rax
    6500c32d:	mov    rdi,QWORD PTR [rsp+0x28]
    6500c332:	mov    rsi,QWORD PTR [rsp+0x20]
    6500c337:	mov    ebp,DWORD PTR [rip+0x3aaaf]        # 0x65046dec
    6500c33d:	mov    r13,QWORD PTR [rip+0x3aab4]        # 0x65046df8
    6500c344:	test   bpl,0x1
    6500c348:	jne    0x6500c3a1
    6500c34a:	or     ebp,0x1
    6500c34d:	mov    DWORD PTR [rip+0x3aa99],ebp        # 0x65046dec
    6500c353:	mov    rcx,r14
    6500c356:	call   0x65010960
    6500c35b:	mov    QWORD PTR [rip+0x3aa96],rax        # 0x65046df8
    6500c362:	mov    BYTE PTR [rax+0x69],0x1
    6500c366:	mov    rax,QWORD PTR [rip+0x3aa8b]        # 0x65046df8
    6500c36d:	mov    QWORD PTR [rax+0x8],rax
    6500c371:	mov    rax,QWORD PTR [rip+0x3aa80]        # 0x65046df8
    6500c378:	mov    QWORD PTR [rax],rax
    6500c37b:	mov    rax,QWORD PTR [rip+0x3aa76]        # 0x65046df8
    6500c382:	mov    QWORD PTR [rax+0x10],rax
    6500c386:	mov    QWORD PTR [rip+0x3aa73],r12        # 0x65046e00
    6500c38d:	lea    rcx,[rip+0x2704c]        # 0x650333e0
    6500c394:	call   0x6501e680
    6500c399:	nop
    6500c39a:	mov    r13,QWORD PTR [rip+0x3aa57]        # 0x65046df8
    6500c3a1:	test   rsi,rsi
    6500c3a4:	je     0x6500c3ab
    6500c3a6:	cmp    rsi,r14
    6500c3a9:	je     0x6500c3b0
    6500c3ab:	call   0x6501d960
    6500c3b0:	cmp    rdi,r13
    6500c3b3:	je     0x6500c3db
    6500c3b5:	test   rsi,rsi
    6500c3b8:	jne    0x6500c3bf
    6500c3ba:	call   0x6501d960
    6500c3bf:	cmp    rdi,QWORD PTR [rsi+0x8]
    6500c3c3:	jne    0x6500c3ca
    6500c3c5:	call   0x6501d960
    6500c3ca:	cmp    QWORD PTR [rdi+0x60],0x10
    6500c3cf:	jb     0x6500c3d7
    6500c3d1:	mov    r15,QWORD PTR [rdi+0x48]
    6500c3d5:	jmp    0x6500c3db
    6500c3d7:	lea    r15,[rdi+0x48]
    6500c3db:	mov    rax,QWORD PTR [rip+0x3871e]        # 0x65044b00
    6500c3e2:	test   rax,rax
    6500c3e5:	jne    0x6500c40b
    6500c3e7:	lea    rcx,[rip+0x2ab22]        # 0x65036f10
    6500c3ee:	call   QWORD PTR [rip+0x27ce4]        # 0x650340d8
    6500c3f4:	mov    rcx,rax
    6500c3f7:	lea    rdx,[rip+0x2ab02]        # 0x65036f00
    6500c3fe:	call   QWORD PTR [rip+0x27cac]        # 0x650340b0
    6500c404:	mov    QWORD PTR [rip+0x386f5],rax        # 0x65044b00
    6500c40b:	mov    rcx,QWORD PTR [rip+0x3a91e]        # 0x65046d30
    6500c412:	test   rcx,rcx
    6500c415:	jne    0x6500c433
    6500c417:	xor    r8d,r8d
    6500c41a:	xor    edx,edx
    6500c41c:	call   QWORD PTR [rip+0x27d06]        # 0x65034128
    6500c422:	mov    rcx,rax
    6500c425:	mov    QWORD PTR [rip+0x3a904],rax        # 0x65046d30
    6500c42c:	mov    rax,QWORD PTR [rip+0x386cd]        # 0x65044b00
    6500c433:	call   rax
    6500c435:	nop
    6500c436:	cmp    QWORD PTR [rsp+0x188],0x10
    6500c43f:	jb     0x6500c44e
    6500c441:	mov    rcx,QWORD PTR [rsp+0x170]
    6500c449:	call   0x6501d190
    6500c44e:	mov    rax,r15
    6500c451:	mov    rcx,QWORD PTR [rsp+0x1b8]
    6500c459:	xor    rcx,rsp
    6500c45c:	call   0x6501e4e0
    6500c461:	mov    rbx,QWORD PTR [rsp+0x210]
    6500c469:	add    rsp,0x1c0
    6500c470:	pop    r15
    6500c472:	pop    r14
    6500c474:	pop    r13
    6500c476:	pop    r12
    6500c478:	pop    rdi
    6500c479:	pop    rsi
    6500c47a:	pop    rbp
    6500c47b:	ret    
    6500c47c:	int3   
    6500c47d:	int3   
    6500c47e:	int3   
    6500c47f:	int3   
    6500c480:	rex push rbp
    6500c482:	sub    rsp,0x20
    6500c486:	mov    rbp,rdx
    6500c489:	lea    rcx,[rbp+0x168]
    6500c490:	call   0x65001c70
    6500c495:	add    rsp,0x20
    6500c499:	pop    rbp
    6500c49a:	ret    
    6500c49b:	int3   
    6500c49c:	int3   
    6500c49d:	int3   
    6500c49e:	int3   
    6500c49f:	int3   
    6500c4a0:	rex push rbp
    6500c4a2:	mov    rbp,rdx
    6500c4a5:	mov    eax,DWORD PTR [rip+0x3a941]        # 0x65046dec
    6500c4ab:	and    eax,0xfffffffe
    6500c4ae:	mov    DWORD PTR [rip+0x3a938],eax        # 0x65046dec
    6500c4b4:	pop    rbp
    6500c4b5:	ret    
    6500c4b6:	int3   
    6500c4b7:	int3   
    6500c4b8:	int3   
    6500c4b9:	int3   
    6500c4ba:	int3   
    6500c4bb:	int3   
    6500c4bc:	int3   
    6500c4bd:	int3   
    6500c4be:	int3   
    6500c4bf:	int3   
    6500c4c0:	rex push rbp
    6500c4c2:	mov    rbp,rdx
    6500c4c5:	mov    eax,DWORD PTR [rip+0x3a921]        # 0x65046dec
    6500c4cb:	and    eax,0xfffffffe
    6500c4ce:	mov    DWORD PTR [rip+0x3a918],eax        # 0x65046dec
    6500c4d4:	pop    rbp
    6500c4d5:	ret    
    6500c4d6:	int3   
    6500c4d7:	int3   
    6500c4d8:	int3   
    6500c4d9:	int3   
    6500c4da:	int3   
    6500c4db:	int3   
    6500c4dc:	int3   
    6500c4dd:	int3   
    6500c4de:	int3   
    6500c4df:	int3   
    6500c4e0:	rex push rbp
    6500c4e2:	sub    rsp,0x20
    6500c4e6:	mov    rbp,rdx
    6500c4e9:	lea    rcx,[rbp+0x190]
    6500c4f0:	call   0x65001c70
    6500c4f5:	add    rsp,0x20
    6500c4f9:	pop    rbp
    6500c4fa:	ret    
    6500c4fb:	int3   
    6500c4fc:	int3   
    6500c4fd:	int3   
    6500c4fe:	int3   
    6500c4ff:	int3   
    6500c500:	rex push rbp
    6500c502:	sub    rsp,0x20
    6500c506:	mov    rbp,rdx
    6500c509:	mov    rcx,QWORD PTR [rbp+0x60]
    6500c50d:	call   0x65001c70
    6500c512:	add    rsp,0x20
    6500c516:	pop    rbp
    6500c517:	ret    
    6500c518:	int3   
    6500c519:	int3   
    6500c51a:	int3   
    6500c51b:	int3   
    6500c51c:	int3   
    6500c51d:	int3   
    6500c51e:	int3   
    6500c51f:	int3   
    6500c520:	rex push rbp
    6500c522:	sub    rsp,0x20
    6500c526:	mov    rbp,rdx
    6500c529:	lea    rcx,[rbp+0xe8]
    6500c530:	call   0x6500d390
    6500c535:	add    rsp,0x20
    6500c539:	pop    rbp
    6500c53a:	ret    
    6500c53b:	int3   
    6500c53c:	int3   
    6500c53d:	int3   
    6500c53e:	int3   
    6500c53f:	int3   
    6500c540:	rex push rbp
    6500c542:	sub    rsp,0x20
    6500c546:	mov    rbp,rdx
    6500c549:	lea    rcx,[rbp+0x70]
    6500c54d:	call   0x65001c70
    6500c552:	add    rsp,0x20
    6500c556:	pop    rbp
    6500c557:	ret    
    6500c558:	int3   
    6500c559:	int3   
    6500c55a:	int3   
    6500c55b:	int3   
    6500c55c:	int3   
    6500c55d:	int3   
    6500c55e:	int3   
    6500c55f:	int3   
    6500c560:	rex push rbp
    6500c562:	sub    rsp,0x20
    6500c566:	mov    rbp,rdx
    6500c569:	lea    rcx,[rbp+0x70]
    6500c56d:	call   0x6500d3f0
    6500c572:	add    rsp,0x20
    6500c576:	pop    rbp
    6500c577:	ret    
    6500c578:	int3   
    6500c579:	int3   
    6500c57a:	int3   
    6500c57b:	int3   
    6500c57c:	int3   
    6500c57d:	int3   
    6500c57e:	int3   
    6500c57f:	int3   
    6500c580:	rex push rbp
    6500c582:	mov    rbp,rdx
    6500c585:	mov    eax,DWORD PTR [rip+0x3a861]        # 0x65046dec
    6500c58b:	and    eax,0xfffffffe
    6500c58e:	mov    DWORD PTR [rip+0x3a858],eax        # 0x65046dec
    6500c594:	pop    rbp
    6500c595:	ret    
    6500c596:	int3   
    6500c597:	int3   
    6500c598:	int3   
    6500c599:	int3   
    6500c59a:	int3   
    6500c59b:	int3   
    6500c59c:	int3   
    6500c59d:	int3   
    6500c59e:	int3   
    6500c59f:	int3   
    6500c5a0:	rex push rbp
    6500c5a2:	mov    rbp,rdx
    6500c5a5:	mov    eax,DWORD PTR [rip+0x3a841]        # 0x65046dec
    6500c5ab:	and    eax,0xfffffffe
    6500c5ae:	mov    DWORD PTR [rip+0x3a838],eax        # 0x65046dec
    6500c5b4:	pop    rbp
    6500c5b5:	ret    
    6500c5b6:	int3   
    6500c5b7:	int3   
    6500c5b8:	int3   
    6500c5b9:	int3   
    6500c5ba:	int3   
    6500c5bb:	int3   
    6500c5bc:	int3   
    6500c5bd:	int3   
    6500c5be:	int3   
    6500c5bf:	int3   
    6500c5c0:	rex push rbp
    6500c5c2:	mov    rbp,rdx
    6500c5c5:	mov    eax,DWORD PTR [rip+0x3a821]        # 0x65046dec
    6500c5cb:	and    eax,0xfffffffe
    6500c5ce:	mov    DWORD PTR [rip+0x3a818],eax        # 0x65046dec
    6500c5d4:	pop    rbp
    6500c5d5:	ret    
    6500c5d6:	int3   
    6500c5d7:	int3   
    6500c5d8:	int3   
    6500c5d9:	int3   
    6500c5da:	int3   
    6500c5db:	int3   
    6500c5dc:	int3   
    6500c5dd:	int3   
    6500c5de:	int3   
    6500c5df:	int3   
    6500c5e0:	mov    rax,rsp
    6500c5e3:	push   rsi
    6500c5e4:	push   rdi
    6500c5e5:	push   r12
    6500c5e7:	push   r13
    6500c5e9:	push   r14
    6500c5eb:	sub    rsp,0x1c0
    6500c5f2:	mov    QWORD PTR [rsp+0xf8],0xfffffffffffffffe
    6500c5fe:	mov    QWORD PTR [rax+0x18],rbx
    6500c602:	mov    QWORD PTR [rax+0x20],rbp
    6500c606:	mov    rax,QWORD PTR [rip+0x35b13]        # 0x65042120
    6500c60d:	xor    rax,rsp
    6500c610:	mov    QWORD PTR [rsp+0x1b8],rax
    6500c618:	mov    r12,r8
    6500c61b:	mov    rdi,rdx
    6500c61e:	mov    rbp,rcx
    6500c621:	mov    rax,QWORD PTR [rip+0x3a708]        # 0x65046d30
    6500c628:	test   rax,rax
    6500c62b:	jne    0x6500c641
    6500c62d:	xor    r8d,r8d
    6500c630:	xor    edx,edx
    6500c632:	xor    ecx,ecx
    6500c634:	call   QWORD PTR [rip+0x27aee]        # 0x65034128
    6500c63a:	mov    QWORD PTR [rip+0x3a6ef],rax        # 0x65046d30
    6500c641:	or     edx,0xffffffff
    6500c644:	mov    rcx,rax
    6500c647:	call   QWORD PTR [rip+0x27a5b]        # 0x650340a8
    6500c64d:	test   eax,eax
    6500c64f:	je     0x6500c659
    6500c651:	mov    rax,rbp
    6500c654:	jmp    0x6500ccac
    6500c659:	mov    edx,0x7
    6500c65e:	mov    QWORD PTR [rsp+0x188],rdx
    6500c666:	xor    r13d,r13d
    6500c669:	mov    r8,r13
    6500c66c:	mov    QWORD PTR [rsp+0x180],r13
    6500c674:	mov    WORD PTR [rsp+0x170],r8w
    6500c67d:	movabs rax,0x7ffffffffffffffe
    6500c687:	cmp    rdi,rax
    6500c68a:	jbe    0x6500c6a1
    6500c68c:	call   0x6501cfe0
    6500c691:	mov    rdx,QWORD PTR [rsp+0x188]
    6500c699:	mov    r8,QWORD PTR [rsp+0x180]
    6500c6a1:	cmp    rdx,rdi
    6500c6a4:	jae    0x6500c6c0
    6500c6a6:	mov    rdx,rdi
    6500c6a9:	lea    rcx,[rsp+0x168]
    6500c6b1:	call   0x65010030
    6500c6b6:	mov    rdx,QWORD PTR [rsp+0x188]
    6500c6be:	jmp    0x6500c6e8
    6500c6c0:	test   rdi,rdi
    6500c6c3:	jne    0x6500c6e8
    6500c6c5:	mov    QWORD PTR [rsp+0x180],r13
    6500c6cd:	lea    rax,[rsp+0x170]
    6500c6d5:	cmp    rdx,0x8
    6500c6d9:	cmovae rax,QWORD PTR [rsp+0x170]
    6500c6e2:	mov    WORD PTR [rax],r13w
    6500c6e6:	jmp    0x6500c73b
    6500c6e8:	test   rdi,rdi
    6500c6eb:	je     0x6500c73b
    6500c6ed:	lea    rcx,[rsp+0x170]
    6500c6f5:	cmp    rdx,0x8
    6500c6f9:	cmovae rcx,QWORD PTR [rsp+0x170]
    6500c702:	lea    rbx,[rdi+rdi*1]
    6500c706:	add    rdx,rdx
    6500c709:	mov    r9,rbx
    6500c70c:	mov    r8,rbp
    6500c70f:	call   0x6501d640
    6500c714:	mov    QWORD PTR [rsp+0x180],rdi
    6500c71c:	lea    rax,[rsp+0x170]
    6500c724:	cmp    QWORD PTR [rsp+0x188],0x8
    6500c72d:	cmovae rax,QWORD PTR [rsp+0x170]
    6500c736:	mov    WORD PTR [rax+rbx*1],r13w
    6500c73b:	mov    eax,DWORD PTR [rip+0x3a6df]        # 0x65046e20
    6500c741:	lea    r14,[rip+0x3a6c0]        # 0x65046e08
    6500c748:	test   al,0x1
    6500c74a:	jne    0x6500c79c
    6500c74c:	or     eax,0x1
    6500c74f:	mov    DWORD PTR [rip+0x3a6cb],eax        # 0x65046e20
    6500c755:	mov    rcx,r14
    6500c758:	call   0x65011190
    6500c75d:	mov    QWORD PTR [rip+0x3a6ac],rax        # 0x65046e10
    6500c764:	mov    BYTE PTR [rax+0x69],0x1
    6500c768:	mov    rax,QWORD PTR [rip+0x3a6a1]        # 0x65046e10
    6500c76f:	mov    QWORD PTR [rax+0x8],rax
    6500c773:	mov    rax,QWORD PTR [rip+0x3a696]        # 0x65046e10
    6500c77a:	mov    QWORD PTR [rax],rax
    6500c77d:	mov    rax,QWORD PTR [rip+0x3a68c]        # 0x65046e10
    6500c784:	mov    QWORD PTR [rax+0x10],rax
    6500c788:	mov    QWORD PTR [rip+0x3a689],r13        # 0x65046e18
    6500c78f:	lea    rcx,[rip+0x26c3a]        # 0x650333d0
    6500c796:	call   0x6501e680
    6500c79b:	nop
    6500c79c:	lea    r8,[rsp+0x168]
    6500c7a4:	lea    rdx,[rsp+0x20]
    6500c7a9:	mov    rcx,r14
    6500c7ac:	call   0x6500e5f0
    6500c7b1:	mov    r11d,DWORD PTR [rip+0x3a668]        # 0x65046e20
    6500c7b8:	test   r11b,0x1
    6500c7bc:	jne    0x6500c817
    6500c7be:	or     r11d,0x1
    6500c7c2:	mov    DWORD PTR [rip+0x3a657],r11d        # 0x65046e20
    6500c7c9:	mov    rcx,r14
    6500c7cc:	call   0x65011190
    6500c7d1:	mov    QWORD PTR [rip+0x3a638],rax        # 0x65046e10
    6500c7d8:	mov    BYTE PTR [rax+0x69],0x1
    6500c7dc:	mov    rax,QWORD PTR [rip+0x3a62d]        # 0x65046e10
    6500c7e3:	mov    QWORD PTR [rax+0x8],rax
    6500c7e7:	mov    rax,QWORD PTR [rip+0x3a622]        # 0x65046e10
    6500c7ee:	mov    QWORD PTR [rax],rax
    6500c7f1:	mov    rax,QWORD PTR [rip+0x3a618]        # 0x65046e10
    6500c7f8:	mov    QWORD PTR [rax+0x10],rax
    6500c7fc:	mov    QWORD PTR [rip+0x3a615],r13        # 0x65046e18
    6500c803:	lea    rcx,[rip+0x26bc6]        # 0x650333d0
    6500c80a:	call   0x6501e680
    6500c80f:	nop
    6500c810:	mov    r11d,DWORD PTR [rip+0x3a609]        # 0x65046e20
    6500c817:	mov    rbx,QWORD PTR [rip+0x3a5f2]        # 0x65046e10
    6500c81e:	mov    rsi,QWORD PTR [rsp+0x20]
    6500c823:	test   rsi,rsi
    6500c826:	je     0x6500c82d
    6500c828:	cmp    rsi,r14
    6500c82b:	je     0x6500c839
    6500c82d:	call   0x6501d960
    6500c832:	mov    r11d,DWORD PTR [rip+0x3a5e7]        # 0x65046e20
    6500c839:	mov    rdi,QWORD PTR [rsp+0x28]
    6500c83e:	cmp    rdi,rbx
    6500c841:	jne    0x6500caf9
    6500c847:	mov    QWORD PTR [rsp+0x120],0x7
    6500c853:	mov    QWORD PTR [rsp+0x118],r13
    6500c85b:	mov    WORD PTR [rsp+0x108],0x0
    6500c865:	or     r9,0xffffffffffffffff
    6500c869:	xor    r8d,r8d
    6500c86c:	lea    rdx,[rsp+0x168]
    6500c874:	lea    rcx,[rsp+0x100]
    6500c87c:	call   0x6500f4d0
    6500c881:	lea    rdx,[rsp+0x100]
    6500c889:	lea    rcx,[rsp+0x190]
    6500c891:	call   0x6500d640
    6500c896:	nop
    6500c897:	lea    rax,[rsp+0x80]
    6500c89f:	mov    QWORD PTR [rsp+0x150],rax
    6500c8a7:	mov    QWORD PTR [rsp+0xa0],0x7
    6500c8b3:	mov    QWORD PTR [rsp+0x98],r13
    6500c8bb:	mov    WORD PTR [rsp+0x88],0x0
    6500c8c5:	or     r9,0xffffffffffffffff
    6500c8c9:	xor    r8d,r8d
    6500c8cc:	lea    rdx,[rsp+0x190]
    6500c8d4:	lea    rcx,[rsp+0x80]
    6500c8dc:	call   0x6500f4d0
    6500c8e1:	nop
    6500c8e2:	mov    QWORD PTR [rsp+0x148],0x7
    6500c8ee:	mov    QWORD PTR [rsp+0x140],r13
    6500c8f6:	mov    WORD PTR [rsp+0x130],0x0
    6500c900:	or     r9,0xffffffffffffffff
    6500c904:	xor    r8d,r8d
    6500c907:	lea    rdx,[rsp+0x168]
    6500c90f:	lea    rcx,[rsp+0x128]
    6500c917:	call   0x6500f4d0
    6500c91c:	nop
    6500c91d:	lea    r8,[rsp+0x80]
    6500c925:	lea    rdx,[rsp+0x128]
    6500c92d:	lea    rcx,[rsp+0xa8]
    6500c935:	call   0x650115a0
    6500c93a:	mov    rbx,rax
    6500c93d:	mov    QWORD PTR [rsp+0x50],0x7
    6500c946:	mov    QWORD PTR [rsp+0x48],r13
    6500c94b:	mov    WORD PTR [rsp+0x38],0x0
    6500c952:	or     r9,0xffffffffffffffff
    6500c956:	xor    r8d,r8d
    6500c959:	mov    rdx,rax
    6500c95c:	lea    rcx,[rsp+0x30]
    6500c961:	call   0x6500f4d0
    6500c966:	nop
    6500c967:	lea    rdx,[rbx+0x28]
    6500c96b:	mov    QWORD PTR [rsp+0x78],0x7
    6500c974:	mov    QWORD PTR [rsp+0x70],r13
    6500c979:	mov    WORD PTR [rsp+0x60],0x0
    6500c980:	or     r9,0xffffffffffffffff
    6500c984:	xor    r8d,r8d
    6500c987:	lea    rcx,[rsp+0x58]
    6500c98c:	call   0x6500f4d0
    6500c991:	nop
    6500c992:	mov    eax,DWORD PTR [rip+0x3a488]        # 0x65046e20
    6500c998:	test   al,0x1
    6500c99a:	jne    0x6500c9ec
    6500c99c:	or     eax,0x1
    6500c99f:	mov    DWORD PTR [rip+0x3a47b],eax        # 0x65046e20
    6500c9a5:	mov    rcx,r14
    6500c9a8:	call   0x65011190
    6500c9ad:	mov    QWORD PTR [rip+0x3a45c],rax        # 0x65046e10
    6500c9b4:	mov    BYTE PTR [rax+0x69],0x1
    6500c9b8:	mov    rax,QWORD PTR [rip+0x3a451]        # 0x65046e10
    6500c9bf:	mov    QWORD PTR [rax+0x8],rax
    6500c9c3:	mov    rax,QWORD PTR [rip+0x3a446]        # 0x65046e10
    6500c9ca:	mov    QWORD PTR [rax],rax
    6500c9cd:	mov    rax,QWORD PTR [rip+0x3a43c]        # 0x65046e10
    6500c9d4:	mov    QWORD PTR [rax+0x10],rax
    6500c9d8:	mov    QWORD PTR [rip+0x3a439],r13        # 0x65046e18
    6500c9df:	lea    rcx,[rip+0x269ea]        # 0x650333d0
    6500c9e6:	call   0x6501e680
    6500c9eb:	nop
    6500c9ec:	lea    r8,[rsp+0x30]
    6500c9f1:	lea    rdx,[rsp+0x150]
    6500c9f9:	mov    rcx,r14
    6500c9fc:	call   0x6500e340
    6500ca01:	nop
    6500ca02:	cmp    QWORD PTR [rsp+0x78],0x8
    6500ca08:	jb     0x6500ca14
    6500ca0a:	mov    rcx,QWORD PTR [rsp+0x60]
    6500ca0f:	call   0x6501d190
    6500ca14:	mov    QWORD PTR [rsp+0x78],0x7
    6500ca1d:	mov    QWORD PTR [rsp+0x70],r13
    6500ca22:	mov    WORD PTR [rsp+0x60],0x0
    6500ca29:	cmp    QWORD PTR [rsp+0x50],0x8
    6500ca2f:	jb     0x6500ca3b
    6500ca31:	mov    rcx,QWORD PTR [rsp+0x38]
    6500ca36:	call   0x6501d190
    6500ca3b:	mov    QWORD PTR [rsp+0x50],0x7
    6500ca44:	mov    QWORD PTR [rsp+0x48],r13
    6500ca49:	mov    WORD PTR [rsp+0x38],0x0
    6500ca50:	cmp    QWORD PTR [rsp+0xf0],0x8
    6500ca59:	jb     0x6500ca68
    6500ca5b:	mov    rcx,QWORD PTR [rsp+0xd8]
    6500ca63:	call   0x6501d190
    6500ca68:	mov    QWORD PTR [rsp+0xf0],0x7
    6500ca74:	mov    QWORD PTR [rsp+0xe8],r13
    6500ca7c:	mov    WORD PTR [rsp+0xd8],0x0
    6500ca86:	cmp    QWORD PTR [rsp+0xc8],0x8
    6500ca8f:	jb     0x6500ca9e
    6500ca91:	mov    rcx,QWORD PTR [rsp+0xb0]
    6500ca99:	call   0x6501d190
    6500ca9e:	mov    QWORD PTR [rsp+0xc8],0x7
    6500caaa:	mov    QWORD PTR [rsp+0xc0],r13
    6500cab2:	mov    WORD PTR [rsp+0xb0],0x0
    6500cabc:	cmp    QWORD PTR [rsp+0x1b0],0x8
    6500cac5:	jb     0x6500cad4
    6500cac7:	mov    rcx,QWORD PTR [rsp+0x198]
    6500cacf:	call   0x6501d190
    6500cad4:	mov    QWORD PTR [rsp+0x1b0],0x7
    6500cae0:	mov    QWORD PTR [rsp+0x1a8],r13
    6500cae8:	mov    WORD PTR [rsp+0x198],0x0
    6500caf2:	mov    r11d,DWORD PTR [rip+0x3a327]        # 0x65046e20
    6500caf9:	movzx  eax,BYTE PTR [r12]
    6500cafe:	cmp    eax,0x100
    6500cb03:	jge    0x6500cb9d
    6500cb09:	test   r11b,0x1
    6500cb0d:	jne    0x6500cb61
    6500cb0f:	or     r11d,0x1
    6500cb13:	mov    DWORD PTR [rip+0x3a306],r11d        # 0x65046e20
    6500cb1a:	mov    rcx,r14
    6500cb1d:	call   0x65011190
    6500cb22:	mov    QWORD PTR [rip+0x3a2e7],rax        # 0x65046e10
    6500cb29:	mov    BYTE PTR [rax+0x69],0x1
    6500cb2d:	mov    rax,QWORD PTR [rip+0x3a2dc]        # 0x65046e10
    6500cb34:	mov    QWORD PTR [rax+0x8],rax
    6500cb38:	mov    rax,QWORD PTR [rip+0x3a2d1]        # 0x65046e10
    6500cb3f:	mov    QWORD PTR [rax],rax
    6500cb42:	mov    rax,QWORD PTR [rip+0x3a2c7]        # 0x65046e10
    6500cb49:	mov    QWORD PTR [rax+0x10],rax
    6500cb4d:	mov    QWORD PTR [rip+0x3a2c4],r13        # 0x65046e18
    6500cb54:	lea    rcx,[rip+0x26875]        # 0x650333d0
    6500cb5b:	call   0x6501e680
    6500cb60:	nop
    6500cb61:	lea    r8,[rsp+0x168]
    6500cb69:	lea    rdx,[rsp+0x150]
    6500cb71:	mov    rcx,r14
    6500cb74:	call   0x6500e5f0
    6500cb79:	lea    rdx,[rsp+0x20]
    6500cb7e:	mov    rcx,QWORD PTR [rax]
    6500cb81:	mov    QWORD PTR [rdx],rcx
    6500cb84:	mov    rax,QWORD PTR [rax+0x8]
    6500cb88:	mov    QWORD PTR [rdx+0x8],rax
    6500cb8c:	mov    rdi,QWORD PTR [rsp+0x28]
    6500cb91:	mov    rsi,QWORD PTR [rsp+0x20]
    6500cb96:	mov    r11d,DWORD PTR [rip+0x3a283]        # 0x65046e20
    6500cb9d:	test   r11b,0x1
    6500cba1:	jne    0x6500cbf5
    6500cba3:	or     r11d,0x1
    6500cba7:	mov    DWORD PTR [rip+0x3a272],r11d        # 0x65046e20
    6500cbae:	mov    rcx,r14
    6500cbb1:	call   0x65011190
    6500cbb6:	mov    QWORD PTR [rip+0x3a253],rax        # 0x65046e10
    6500cbbd:	mov    BYTE PTR [rax+0x69],0x1
    6500cbc1:	mov    rax,QWORD PTR [rip+0x3a248]        # 0x65046e10
    6500cbc8:	mov    QWORD PTR [rax+0x8],rax
    6500cbcc:	mov    rax,QWORD PTR [rip+0x3a23d]        # 0x65046e10
    6500cbd3:	mov    QWORD PTR [rax],rax
    6500cbd6:	mov    rax,QWORD PTR [rip+0x3a233]        # 0x65046e10
    6500cbdd:	mov    QWORD PTR [rax+0x10],rax
    6500cbe1:	mov    QWORD PTR [rip+0x3a230],r13        # 0x65046e18
    6500cbe8:	lea    rcx,[rip+0x267e1]        # 0x650333d0
    6500cbef:	call   0x6501e680
    6500cbf4:	nop
    6500cbf5:	mov    rbx,QWORD PTR [rip+0x3a214]        # 0x65046e10
    6500cbfc:	test   rsi,rsi
    6500cbff:	je     0x6500cc06
    6500cc01:	cmp    rsi,r14
    6500cc04:	je     0x6500cc0b
    6500cc06:	call   0x6501d960
    6500cc0b:	cmp    rdi,rbx
    6500cc0e:	je     0x6500cc36
    6500cc10:	test   rsi,rsi
    6500cc13:	jne    0x6500cc1a
    6500cc15:	call   0x6501d960
    6500cc1a:	cmp    rdi,QWORD PTR [rsi+0x8]
    6500cc1e:	jne    0x6500cc25
    6500cc20:	call   0x6501d960
    6500cc25:	cmp    QWORD PTR [rdi+0x60],0x8
    6500cc2a:	jb     0x6500cc32
    6500cc2c:	mov    rbp,QWORD PTR [rdi+0x48]
    6500cc30:	jmp    0x6500cc36
    6500cc32:	lea    rbp,[rdi+0x48]
    6500cc36:	mov    rax,QWORD PTR [rip+0x37ec3]        # 0x65044b00
    6500cc3d:	test   rax,rax
    6500cc40:	jne    0x6500cc66
    6500cc42:	lea    rcx,[rip+0x2a2c7]        # 0x65036f10
    6500cc49:	call   QWORD PTR [rip+0x27489]        # 0x650340d8
    6500cc4f:	mov    rcx,rax
    6500cc52:	lea    rdx,[rip+0x2a2a7]        # 0x65036f00
    6500cc59:	call   QWORD PTR [rip+0x27451]        # 0x650340b0
    6500cc5f:	mov    QWORD PTR [rip+0x37e9a],rax        # 0x65044b00
    6500cc66:	mov    rcx,QWORD PTR [rip+0x3a0c3]        # 0x65046d30
    6500cc6d:	test   rcx,rcx
    6500cc70:	jne    0x6500cc8e
    6500cc72:	xor    r8d,r8d
    6500cc75:	xor    edx,edx
    6500cc77:	call   QWORD PTR [rip+0x274ab]        # 0x65034128
    6500cc7d:	mov    rcx,rax
    6500cc80:	mov    QWORD PTR [rip+0x3a0a9],rax        # 0x65046d30
    6500cc87:	mov    rax,QWORD PTR [rip+0x37e72]        # 0x65044b00
    6500cc8e:	call   rax
    6500cc90:	nop
    6500cc91:	cmp    QWORD PTR [rsp+0x188],0x8
    6500cc9a:	jb     0x6500cca9
    6500cc9c:	mov    rcx,QWORD PTR [rsp+0x170]
    6500cca4:	call   0x6501d190
    6500cca9:	mov    rax,rbp
    6500ccac:	mov    rcx,QWORD PTR [rsp+0x1b8]
    6500ccb4:	xor    rcx,rsp
    6500ccb7:	call   0x6501e4e0
    6500ccbc:	lea    r11,[rsp+0x1c0]
    6500ccc4:	mov    rbx,QWORD PTR [r11+0x40]
    6500ccc8:	mov    rbp,QWORD PTR [r11+0x48]
    6500cccc:	mov    rsp,r11
    6500cccf:	pop    r14
    6500ccd1:	pop    r13
    6500ccd3:	pop    r12
    6500ccd5:	pop    rdi
    6500ccd6:	pop    rsi
    6500ccd7:	ret    
    6500ccd8:	int3   
    6500ccd9:	int3   
    6500ccda:	int3   
    6500ccdb:	int3   
    6500ccdc:	int3   
    6500ccdd:	int3   
    6500ccde:	int3   
    6500ccdf:	int3   
    6500cce0:	rex push rbp
    6500cce2:	sub    rsp,0x20
    6500cce6:	mov    rbp,rdx
    6500cce9:	lea    rcx,[rbp+0x168]
    6500ccf0:	call   0x6500e300
    6500ccf5:	add    rsp,0x20
    6500ccf9:	pop    rbp
    6500ccfa:	ret    
    6500ccfb:	int3   
    6500ccfc:	int3   
    6500ccfd:	int3   
    6500ccfe:	int3   
    6500ccff:	int3   
    6500cd00:	rex push rbp
    6500cd02:	mov    rbp,rdx
    6500cd05:	mov    eax,DWORD PTR [rip+0x3a115]        # 0x65046e20
    6500cd0b:	and    eax,0xfffffffe
    6500cd0e:	mov    DWORD PTR [rip+0x3a10c],eax        # 0x65046e20
    6500cd14:	pop    rbp
    6500cd15:	ret    
    6500cd16:	int3   
    6500cd17:	int3   
    6500cd18:	int3   
    6500cd19:	int3   
    6500cd1a:	int3   
    6500cd1b:	int3   
    6500cd1c:	int3   
    6500cd1d:	int3   
    6500cd1e:	int3   
    6500cd1f:	int3   
    6500cd20:	rex push rbp
    6500cd22:	mov    rbp,rdx
    6500cd25:	mov    eax,DWORD PTR [rip+0x3a0f5]        # 0x65046e20
    6500cd2b:	and    eax,0xfffffffe
    6500cd2e:	mov    DWORD PTR [rip+0x3a0ec],eax        # 0x65046e20
    6500cd34:	pop    rbp
    6500cd35:	ret    
    6500cd36:	int3   
    6500cd37:	int3   
    6500cd38:	int3   
    6500cd39:	int3   
    6500cd3a:	int3   
    6500cd3b:	int3   
    6500cd3c:	int3   
    6500cd3d:	int3   
    6500cd3e:	int3   
    6500cd3f:	int3   
    6500cd40:	rex push rbp
    6500cd42:	sub    rsp,0x20
    6500cd46:	mov    rbp,rdx
    6500cd49:	lea    rcx,[rbp+0x190]
    6500cd50:	call   0x6500e300
    6500cd55:	add    rsp,0x20
    6500cd59:	pop    rbp
    6500cd5a:	ret    
    6500cd5b:	int3   
    6500cd5c:	int3   
    6500cd5d:	int3   
    6500cd5e:	int3   
    6500cd5f:	int3   
    6500cd60:	rex push rbp
    6500cd62:	sub    rsp,0x20
    6500cd66:	mov    rbp,rdx
    6500cd69:	mov    rcx,QWORD PTR [rbp+0x150]
    6500cd70:	call   0x6500e300
    6500cd75:	add    rsp,0x20
    6500cd79:	pop    rbp
    6500cd7a:	ret    
    6500cd7b:	int3   
    6500cd7c:	int3   
    6500cd7d:	int3   
    6500cd7e:	int3   
    6500cd7f:	int3   
    6500cd80:	rex push rbp
    6500cd82:	sub    rsp,0x20
    6500cd86:	mov    rbp,rdx
    6500cd89:	lea    rcx,[rbp+0xa8]
    6500cd90:	call   0x6500d450
    6500cd95:	add    rsp,0x20
    6500cd99:	pop    rbp
    6500cd9a:	ret    
    6500cd9b:	int3   
    6500cd9c:	int3   
    6500cd9d:	int3   
    6500cd9e:	int3   
    6500cd9f:	int3   
    6500cda0:	rex push rbp
    6500cda2:	sub    rsp,0x20
    6500cda6:	mov    rbp,rdx
    6500cda9:	lea    rcx,[rbp+0x30]
    6500cdad:	call   0x6500e300
    6500cdb2:	add    rsp,0x20
    6500cdb6:	pop    rbp
    6500cdb7:	ret    
    6500cdb8:	int3   
    6500cdb9:	int3   
    6500cdba:	int3   
    6500cdbb:	int3   
    6500cdbc:	int3   
    6500cdbd:	int3   
    6500cdbe:	int3   
    6500cdbf:	int3   
    6500cdc0:	rex push rbp
    6500cdc2:	sub    rsp,0x20
    6500cdc6:	mov    rbp,rdx
    6500cdc9:	lea    rcx,[rbp+0x30]
    6500cdcd:	call   0x6500d4b0
    6500cdd2:	add    rsp,0x20
    6500cdd6:	pop    rbp
    6500cdd7:	ret    
    6500cdd8:	int3   
    6500cdd9:	int3   
    6500cdda:	int3   
    6500cddb:	int3   
    6500cddc:	int3   
    6500cddd:	int3   
    6500cdde:	int3   
    6500cddf:	int3   
    6500cde0:	rex push rbp
    6500cde2:	mov    rbp,rdx
    6500cde5:	mov    eax,DWORD PTR [rip+0x3a035]        # 0x65046e20
    6500cdeb:	and    eax,0xfffffffe
    6500cdee:	mov    DWORD PTR [rip+0x3a02c],eax        # 0x65046e20
    6500cdf4:	pop    rbp
    6500cdf5:	ret    
    6500cdf6:	int3   
    6500cdf7:	int3   
    6500cdf8:	int3   
    6500cdf9:	int3   
    6500cdfa:	int3   
    6500cdfb:	int3   
    6500cdfc:	int3   
    6500cdfd:	int3   
    6500cdfe:	int3   
    6500cdff:	int3   
    6500ce00:	rex push rbp
    6500ce02:	mov    rbp,rdx
    6500ce05:	mov    eax,DWORD PTR [rip+0x3a015]        # 0x65046e20
    6500ce0b:	and    eax,0xfffffffe
    6500ce0e:	mov    DWORD PTR [rip+0x3a00c],eax        # 0x65046e20
    6500ce14:	pop    rbp
    6500ce15:	ret    
    6500ce16:	int3   
    6500ce17:	int3   
    6500ce18:	int3   
    6500ce19:	int3   
    6500ce1a:	int3   
    6500ce1b:	int3   
    6500ce1c:	int3   
    6500ce1d:	int3   
    6500ce1e:	int3   
    6500ce1f:	int3   
    6500ce20:	rex push rbp
    6500ce22:	mov    rbp,rdx
    6500ce25:	mov    eax,DWORD PTR [rip+0x39ff5]        # 0x65046e20
    6500ce2b:	and    eax,0xfffffffe
    6500ce2e:	mov    DWORD PTR [rip+0x39fec],eax        # 0x65046e20
    6500ce34:	pop    rbp
    6500ce35:	ret    
    6500ce36:	int3   
    6500ce37:	int3   
    6500ce38:	int3   
    6500ce39:	int3   
    6500ce3a:	int3   
    6500ce3b:	int3   
    6500ce3c:	int3   
    6500ce3d:	int3   
    6500ce3e:	int3   
    6500ce3f:	int3   
    6500ce40:	mov    QWORD PTR [rsp+0x8],rcx
    6500ce45:	push   rdi
    6500ce46:	sub    rsp,0x30
    6500ce4a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500ce53:	mov    QWORD PTR [rsp+0x48],rbx
    6500ce58:	mov    rbx,rcx
    6500ce5b:	call   0x6500ef70
    6500ce60:	mov    QWORD PTR [rbx+0x8],rax
    6500ce64:	mov    BYTE PTR [rax+0x41],0x1
    6500ce68:	mov    rax,QWORD PTR [rbx+0x8]
    6500ce6c:	mov    QWORD PTR [rax+0x8],rax
    6500ce70:	mov    rax,QWORD PTR [rbx+0x8]
    6500ce74:	mov    QWORD PTR [rax],rax
    6500ce77:	mov    rax,QWORD PTR [rbx+0x8]
    6500ce7b:	mov    QWORD PTR [rax+0x10],rax
    6500ce7f:	mov    QWORD PTR [rbx+0x10],0x0
    6500ce87:	mov    rdx,QWORD PTR [rip+0x3a072]        # 0x65046f00
    6500ce8e:	mov    rdi,QWORD PTR [rbx+0x8]
    6500ce92:	mov    r8,rdi
    6500ce95:	mov    rdx,QWORD PTR [rdx+0x8]
    6500ce99:	mov    rcx,rbx
    6500ce9c:	call   0x6500eea0
    6500cea1:	mov    QWORD PTR [rdi+0x8],rax
    6500cea5:	mov    rax,QWORD PTR [rip+0x3a05c]        # 0x65046f08
    6500ceac:	mov    QWORD PTR [rbx+0x10],rax
    6500ceb0:	mov    rax,QWORD PTR [rbx+0x8]
    6500ceb4:	mov    rcx,QWORD PTR [rax+0x8]
    6500ceb8:	cmp    BYTE PTR [rcx+0x41],0x0
    6500cebc:	jne    0x6500cef9
    6500cebe:	xchg   ax,ax
    6500cec0:	mov    rax,QWORD PTR [rcx]
    6500cec3:	cmp    BYTE PTR [rax+0x41],0x0
    6500cec7:	jne    0x6500cece
    6500cec9:	mov    rcx,rax
    6500cecc:	jmp    0x6500cec0
    6500cece:	mov    rax,QWORD PTR [rbx+0x8]
    6500ced2:	mov    QWORD PTR [rax],rcx
    6500ced5:	mov    rax,QWORD PTR [rbx+0x8]
    6500ced9:	mov    rcx,QWORD PTR [rax+0x8]
    6500cedd:	data16 xchg ax,ax
    6500cee0:	mov    rax,QWORD PTR [rcx+0x10]
    6500cee4:	cmp    BYTE PTR [rax+0x41],0x0
    6500cee8:	jne    0x6500ceef
    6500ceea:	mov    rcx,rax
    6500ceed:	jmp    0x6500cee0
    6500ceef:	mov    rax,QWORD PTR [rbx+0x8]
    6500cef3:	mov    QWORD PTR [rax+0x10],rcx
    6500cef7:	jmp    0x6500cf04
    6500cef9:	mov    QWORD PTR [rax],rax
    6500cefc:	mov    rax,QWORD PTR [rbx+0x8]
    6500cf00:	mov    QWORD PTR [rax+0x10],rax
    6500cf04:	mov    rax,rbx
    6500cf07:	mov    rbx,QWORD PTR [rsp+0x48]
    6500cf0c:	add    rsp,0x30
    6500cf10:	pop    rdi
    6500cf11:	ret    
    6500cf12:	int3   
    6500cf13:	int3   
    6500cf14:	int3   
    6500cf15:	int3   
    6500cf16:	int3   
    6500cf17:	int3   
    6500cf18:	int3   
    6500cf19:	int3   
    6500cf1a:	int3   
    6500cf1b:	int3   
    6500cf1c:	int3   
    6500cf1d:	int3   
    6500cf1e:	int3   
    6500cf1f:	int3   
    6500cf20:	mov    QWORD PTR [rsp+0x10],rdx
    6500cf25:	push   rbp
    6500cf26:	sub    rsp,0x20
    6500cf2a:	mov    rbp,rdx
    6500cf2d:	mov    rcx,QWORD PTR [rbp+0x40]
    6500cf31:	call   0x6500dee0
    6500cf36:	xor    edx,edx
    6500cf38:	xor    ecx,ecx
    6500cf3a:	call   0x6501daf0
    6500cf3f:	nop
    6500cf40:	add    rsp,0x20
    6500cf44:	pop    rbp
    6500cf45:	ret    
    6500cf46:	int3   
    6500cf47:	int3   
    6500cf48:	int3   
    6500cf49:	int3   
    6500cf4a:	int3   
    6500cf4b:	int3   
    6500cf4c:	int3   
    6500cf4d:	int3   
    6500cf4e:	int3   
    6500cf4f:	int3   
    6500cf50:	mov    r11,rsp
    6500cf53:	mov    QWORD PTR [r11+0x10],rsi
    6500cf57:	push   rdi
    6500cf58:	sub    rsp,0x50
    6500cf5c:	cmp    rcx,rdx
    6500cf5f:	mov    rsi,rdx
    6500cf62:	mov    rdi,rcx
    6500cf65:	je     0x6500d03b
    6500cf6b:	mov    rax,QWORD PTR [rcx+0x8]
    6500cf6f:	mov    QWORD PTR [r11-0x38],rcx
    6500cf73:	lea    r9,[r11-0x28]
    6500cf77:	mov    QWORD PTR [r11-0x30],rax
    6500cf7b:	mov    rax,QWORD PTR [rax]
    6500cf7e:	lea    r8,[r11-0x38]
    6500cf82:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500cf87:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6500cf8d:	mov    QWORD PTR [r11-0x38],rcx
    6500cf91:	mov    QWORD PTR [r11-0x30],rax
    6500cf95:	lea    rdx,[r11-0x18]
    6500cf99:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500cf9e:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    6500cfa4:	mov    QWORD PTR [r11+0x8],rbx
    6500cfa8:	call   0x6500d770
    6500cfad:	mov    rdx,QWORD PTR [rsi+0x8]
    6500cfb1:	mov    rbx,QWORD PTR [rdi+0x8]
    6500cfb5:	mov    rdx,QWORD PTR [rdx+0x8]
    6500cfb9:	mov    rcx,rdi
    6500cfbc:	mov    r8,rbx
    6500cfbf:	call   0x6500eea0
    6500cfc4:	mov    QWORD PTR [rbx+0x8],rax
    6500cfc8:	mov    rax,QWORD PTR [rsi+0x10]
    6500cfcc:	mov    rdx,QWORD PTR [rdi+0x8]
    6500cfd0:	mov    rbx,QWORD PTR [rsp+0x60]
    6500cfd5:	mov    QWORD PTR [rdi+0x10],rax
    6500cfd9:	mov    rcx,QWORD PTR [rdx+0x8]
    6500cfdd:	cmp    BYTE PTR [rcx+0x41],0x0
    6500cfe1:	jne    0x6500d030
    6500cfe3:	mov    rax,QWORD PTR [rcx]
    6500cfe6:	cmp    BYTE PTR [rax+0x41],0x0
    6500cfea:	jne    0x6500cffc
    6500cfec:	data16 data16 xchg ax,ax
    6500cff0:	mov    rcx,rax
    6500cff3:	mov    rax,QWORD PTR [rax]
    6500cff6:	cmp    BYTE PTR [rax+0x41],0x0
    6500cffa:	je     0x6500cff0
    6500cffc:	mov    QWORD PTR [rdx],rcx
    6500cfff:	mov    rdx,QWORD PTR [rdi+0x8]
    6500d003:	mov    rcx,QWORD PTR [rdx+0x8]
    6500d007:	mov    rax,QWORD PTR [rcx+0x10]
    6500d00b:	cmp    BYTE PTR [rax+0x41],0x0
    6500d00f:	jne    0x6500d01e
    6500d011:	mov    rcx,rax
    6500d014:	mov    rax,QWORD PTR [rax+0x10]
    6500d018:	cmp    BYTE PTR [rax+0x41],0x0
    6500d01c:	je     0x6500d011
    6500d01e:	mov    QWORD PTR [rdx+0x10],rcx
    6500d022:	mov    rax,rdi
    6500d025:	mov    rsi,QWORD PTR [rsp+0x68]
    6500d02a:	add    rsp,0x50
    6500d02e:	pop    rdi
    6500d02f:	ret    
    6500d030:	mov    QWORD PTR [rdx],rdx
    6500d033:	mov    rax,QWORD PTR [rdi+0x8]
    6500d037:	mov    QWORD PTR [rax+0x10],rax
    6500d03b:	mov    rax,rdi
    6500d03e:	mov    rsi,QWORD PTR [rsp+0x68]
    6500d043:	add    rsp,0x50
    6500d047:	pop    rdi
    6500d048:	ret    
    6500d049:	int3   
    6500d04a:	int3   
    6500d04b:	int3   
    6500d04c:	int3   
    6500d04d:	int3   
    6500d04e:	int3   
    6500d04f:	int3   
    6500d050:	mov    QWORD PTR [rsp+0x18],rbx
    6500d055:	mov    QWORD PTR [rsp+0x10],rdx
    6500d05a:	mov    QWORD PTR [rsp+0x8],rcx
    6500d05f:	push   rbp
    6500d060:	push   rsi
    6500d061:	push   rdi
    6500d062:	push   r12
    6500d064:	push   r13
    6500d066:	push   r14
    6500d068:	push   r15
    6500d06a:	sub    rsp,0x40
    6500d06e:	mov    r12,QWORD PTR [rcx+0x8]
    6500d072:	mov    r14,r8
    6500d075:	mov    r13,rdx
    6500d078:	mov    rbx,QWORD PTR [r12+0x8]
    6500d07d:	mov    r15,rcx
    6500d080:	mov    sil,0x1
    6500d083:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d087:	jne    0x6500d12b
    6500d08d:	mov    r15,QWORD PTR [r8+0x18]
    6500d091:	xor    r13d,r13d
    6500d094:	mov    rax,r15
    6500d097:	data16 xchg ax,ax
    6500d09a:	data16 xchg ax,ax
    6500d09d:	data16 xchg ax,ax
    6500d0a0:	cmp    QWORD PTR [rbx+0x38],0x10
    6500d0a5:	mov    rsi,QWORD PTR [rbx+0x30]
    6500d0a9:	mov    r12,rbx
    6500d0ac:	jb     0x6500d0b4
    6500d0ae:	mov    rdx,QWORD PTR [rbx+0x20]
    6500d0b2:	jmp    0x6500d0b8
    6500d0b4:	lea    rdx,[rbx+0x20]
    6500d0b8:	cmp    rax,r15
    6500d0bb:	mov    rdi,r15
    6500d0be:	cmovb  rdi,rax
    6500d0c2:	cmp    QWORD PTR [r14+0x20],0x10
    6500d0c7:	jb     0x6500d0cf
    6500d0c9:	mov    rcx,QWORD PTR [r14+0x8]
    6500d0cd:	jmp    0x6500d0d3
    6500d0cf:	lea    rcx,[r14+0x8]
    6500d0d3:	mov    r8,rsi
    6500d0d6:	cmp    rdi,rsi
    6500d0d9:	cmovb  r8,rdi
    6500d0dd:	call   0x6501d570
    6500d0e2:	test   eax,eax
    6500d0e4:	movsxd rcx,eax
    6500d0e7:	jne    0x6500d0fe
    6500d0e9:	cmp    rdi,rsi
    6500d0ec:	jae    0x6500d0f3
    6500d0ee:	or     ecx,0xffffffff
    6500d0f1:	jmp    0x6500d0fe
    6500d0f3:	mov    eax,r13d
    6500d0f6:	cmp    rdi,rsi
    6500d0f9:	setne  al
    6500d0fc:	mov    ecx,eax
    6500d0fe:	test   ecx,ecx
    6500d100:	sets   sil
    6500d104:	test   sil,sil
    6500d107:	je     0x6500d10e
    6500d109:	mov    rbx,QWORD PTR [rbx]
    6500d10c:	jmp    0x6500d112
    6500d10e:	mov    rbx,QWORD PTR [rbx+0x10]
    6500d112:	cmp    BYTE PTR [rbx+0x41],r13b
    6500d116:	mov    rax,r15
    6500d119:	je     0x6500d0a0
    6500d11b:	mov    r13,QWORD PTR [rsp+0x88]
    6500d123:	mov    r15,QWORD PTR [rsp+0x80]
    6500d12b:	test   sil,sil
    6500d12e:	mov    rbx,r12
    6500d131:	mov    QWORD PTR [rsp+0x30],r15
    6500d136:	mov    QWORD PTR [rsp+0x38],rbx
    6500d13b:	je     0x6500d1dc
    6500d141:	mov    rax,QWORD PTR [r15+0x8]
    6500d145:	cmp    r12,QWORD PTR [rax]
    6500d148:	jne    0x6500d152
    6500d14a:	mov    r8b,0x1
    6500d14d:	jmp    0x6500d259
    6500d152:	cmp    BYTE PTR [r12+0x41],0x0
    6500d158:	je     0x6500d171
    6500d15a:	mov    rbx,QWORD PTR [r12+0x10]
    6500d15f:	mov    QWORD PTR [rsp+0x38],rbx
    6500d164:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d168:	je     0x6500d1dc
    6500d16a:	call   0x6501d960
    6500d16f:	jmp    0x6500d1dc
    6500d171:	mov    rax,QWORD PTR [r12]
    6500d175:	cmp    BYTE PTR [rax+0x41],0x0
    6500d179:	jne    0x6500d1a4
    6500d17b:	mov    rbx,rax
    6500d17e:	mov    rax,QWORD PTR [rax+0x10]
    6500d182:	cmp    BYTE PTR [rax+0x41],0x0
    6500d186:	jne    0x6500d19d
    6500d188:	data16 data16 xchg ax,ax
    6500d18c:	data16 data16 xchg ax,ax
    6500d190:	mov    rbx,rax
    6500d193:	mov    rax,QWORD PTR [rax+0x10]
    6500d197:	cmp    BYTE PTR [rax+0x41],0x0
    6500d19b:	je     0x6500d190
    6500d19d:	mov    QWORD PTR [rsp+0x38],rbx
    6500d1a2:	jmp    0x6500d1dc
    6500d1a4:	mov    rax,QWORD PTR [r12+0x8]
    6500d1a9:	cmp    BYTE PTR [rax+0x41],0x0
    6500d1ad:	jne    0x6500d1c7
    6500d1af:	nop
    6500d1b0:	cmp    rbx,QWORD PTR [rax]
    6500d1b3:	jne    0x6500d1c7
    6500d1b5:	mov    rbx,rax
    6500d1b8:	mov    QWORD PTR [rsp+0x38],rax
    6500d1bd:	mov    rax,QWORD PTR [rax+0x8]
    6500d1c1:	cmp    BYTE PTR [rax+0x41],0x0
    6500d1c5:	je     0x6500d1b0
    6500d1c7:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d1cb:	je     0x6500d1d4
    6500d1cd:	call   0x6501d960
    6500d1d2:	jmp    0x6500d1dc
    6500d1d4:	mov    rbx,rax
    6500d1d7:	mov    QWORD PTR [rsp+0x38],rax
    6500d1dc:	cmp    QWORD PTR [r14+0x20],0x10
    6500d1e1:	mov    rbp,QWORD PTR [r14+0x18]
    6500d1e5:	jb     0x6500d1ed
    6500d1e7:	mov    rdx,QWORD PTR [r14+0x8]
    6500d1eb:	jmp    0x6500d1f1
    6500d1ed:	lea    rdx,[r14+0x8]
    6500d1f1:	mov    rdi,QWORD PTR [rbx+0x30]
    6500d1f5:	cmp    rdi,rdi
    6500d1f8:	cmovb  rdi,rdi
    6500d1fc:	cmp    QWORD PTR [rbx+0x38],0x10
    6500d201:	jb     0x6500d209
    6500d203:	mov    rcx,QWORD PTR [rbx+0x20]
    6500d207:	jmp    0x6500d20d
    6500d209:	lea    rcx,[rbx+0x20]
    6500d20d:	mov    r8,rbp
    6500d210:	cmp    rdi,rbp
    6500d213:	cmovb  r8,rdi
    6500d217:	call   0x6501d570
    6500d21c:	test   eax,eax
    6500d21e:	movsxd rcx,eax
    6500d221:	jne    0x6500d23a
    6500d223:	cmp    rdi,rbp
    6500d226:	jb     0x6500d255
    6500d228:	mov    r15d,eax
    6500d22b:	setne  r15b
    6500d22f:	mov    ecx,r15d
    6500d232:	mov    r15,QWORD PTR [rsp+0x80]
    6500d23a:	test   ecx,ecx
    6500d23c:	js     0x6500d255
    6500d23e:	lea    rcx,[rsp+0x30]
    6500d243:	mov    BYTE PTR [r13+0x10],0x0
    6500d248:	mov    rax,QWORD PTR [rcx]
    6500d24b:	mov    QWORD PTR [r13+0x0],rax
    6500d24f:	mov    rax,QWORD PTR [rcx+0x8]
    6500d253:	jmp    0x6500d27e
    6500d255:	movzx  r8d,sil
    6500d259:	lea    rdx,[rsp+0x30]
    6500d25e:	mov    r9,r12
    6500d261:	mov    rcx,r15
    6500d264:	mov    QWORD PTR [rsp+0x20],r14
    6500d269:	call   0x6500daf0
    6500d26e:	mov    BYTE PTR [r13+0x10],0x1
    6500d273:	mov    rcx,QWORD PTR [rax]
    6500d276:	mov    rax,QWORD PTR [rax+0x8]
    6500d27a:	mov    QWORD PTR [r13+0x0],rcx
    6500d27e:	mov    rbx,QWORD PTR [rsp+0x90]
    6500d286:	mov    QWORD PTR [r13+0x8],rax
    6500d28a:	mov    rax,r13
    6500d28d:	add    rsp,0x40
    6500d291:	pop    r15
    6500d293:	pop    r14
    6500d295:	pop    r13
    6500d297:	pop    r12
    6500d299:	pop    rdi
    6500d29a:	pop    rsi
    6500d29b:	pop    rbp
    6500d29c:	ret    
    6500d29d:	int3   
    6500d29e:	int3   
    6500d29f:	int3   
    6500d2a0:	mov    QWORD PTR [rsp+0x8],rbx
    6500d2a5:	mov    QWORD PTR [rsp+0x10],rbp
    6500d2aa:	mov    QWORD PTR [rsp+0x18],rsi
    6500d2af:	mov    QWORD PTR [rsp+0x20],rdi
    6500d2b4:	push   r12
    6500d2b6:	sub    rsp,0x50
    6500d2ba:	mov    r8,rdx
    6500d2bd:	lea    rdx,[rsp+0x30]
    6500d2c2:	call   0x6500d950
    6500d2c7:	mov    rbp,QWORD PTR [rsp+0x48]
    6500d2cc:	mov    r12,QWORD PTR [rsp+0x40]
    6500d2d1:	lea    rcx,[rsp+0x30]
    6500d2d6:	lea    rdx,[rsp+0x20]
    6500d2db:	xor    esi,esi
    6500d2dd:	mov    rax,QWORD PTR [rcx]
    6500d2e0:	mov    QWORD PTR [rdx],rax
    6500d2e3:	mov    rax,QWORD PTR [rcx+0x8]
    6500d2e7:	mov    QWORD PTR [rdx+0x8],rax
    6500d2eb:	mov    rdi,QWORD PTR [rsp+0x20]
    6500d2f0:	mov    rbx,QWORD PTR [rsp+0x28]
    6500d2f5:	test   rdi,rdi
    6500d2f8:	je     0x6500d2ff
    6500d2fa:	cmp    rdi,r12
    6500d2fd:	je     0x6500d304
    6500d2ff:	call   0x6501d960
    6500d304:	cmp    rbx,rbp
    6500d307:	je     0x6500d370
    6500d309:	add    rsi,0x1
    6500d30d:	test   rdi,rdi
    6500d310:	jne    0x6500d317
    6500d312:	call   0x6501d960
    6500d317:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d31b:	je     0x6500d324
    6500d31d:	call   0x6501d960
    6500d322:	jmp    0x6500d2f5
    6500d324:	mov    rax,QWORD PTR [rbx+0x10]
    6500d328:	cmp    BYTE PTR [rax+0x41],0x0
    6500d32c:	jne    0x6500d34e
    6500d32e:	mov    rbx,rax
    6500d331:	mov    rax,QWORD PTR [rax]
    6500d334:	cmp    BYTE PTR [rax+0x41],0x0
    6500d338:	jne    0x6500d2f5
    6500d33a:	data16 xchg ax,ax
    6500d33d:	data16 xchg ax,ax
    6500d340:	mov    rbx,rax
    6500d343:	mov    rax,QWORD PTR [rax]
    6500d346:	cmp    BYTE PTR [rax+0x41],0x0
    6500d34a:	je     0x6500d340
    6500d34c:	jmp    0x6500d2f5
    6500d34e:	mov    rax,QWORD PTR [rbx+0x8]
    6500d352:	cmp    BYTE PTR [rax+0x41],0x0
    6500d356:	jne    0x6500d36b
    6500d358:	cmp    rbx,QWORD PTR [rax+0x10]
    6500d35c:	jne    0x6500d36b
    6500d35e:	mov    rbx,rax
    6500d361:	mov    rax,QWORD PTR [rax+0x8]
    6500d365:	cmp    BYTE PTR [rax+0x41],0x0
    6500d369:	je     0x6500d358
    6500d36b:	mov    rbx,rax
    6500d36e:	jmp    0x6500d2f5
    6500d370:	mov    rbx,QWORD PTR [rsp+0x60]
    6500d375:	mov    rbp,QWORD PTR [rsp+0x68]
    6500d37a:	mov    rdi,QWORD PTR [rsp+0x78]
    6500d37f:	mov    rax,rsi
    6500d382:	mov    rsi,QWORD PTR [rsp+0x70]
    6500d387:	add    rsp,0x50
    6500d38b:	pop    r12
    6500d38d:	ret    
    6500d38e:	int3   
    6500d38f:	int3   
    6500d390:	rex push rbx
    6500d392:	sub    rsp,0x20
    6500d396:	cmp    QWORD PTR [rcx+0x48],0x10
    6500d39b:	mov    rbx,rcx
    6500d39e:	jb     0x6500d3a9
    6500d3a0:	mov    rcx,QWORD PTR [rcx+0x30]
    6500d3a4:	call   0x6501d190
    6500d3a9:	mov    QWORD PTR [rbx+0x48],0xf
    6500d3b1:	mov    QWORD PTR [rbx+0x40],0x0
    6500d3b9:	mov    BYTE PTR [rbx+0x30],0x0
    6500d3bd:	cmp    QWORD PTR [rbx+0x20],0x10
    6500d3c2:	jb     0x6500d3cd
    6500d3c4:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d3c8:	call   0x6501d190
    6500d3cd:	mov    QWORD PTR [rbx+0x20],0xf
    6500d3d5:	mov    QWORD PTR [rbx+0x18],0x0
    6500d3dd:	mov    BYTE PTR [rbx+0x8],0x0
    6500d3e1:	add    rsp,0x20
    6500d3e5:	pop    rbx
    6500d3e6:	ret    
    6500d3e7:	int3   
    6500d3e8:	int3   
    6500d3e9:	int3   
    6500d3ea:	int3   
    6500d3eb:	int3   
    6500d3ec:	int3   
    6500d3ed:	int3   
    6500d3ee:	int3   
    6500d3ef:	int3   
    6500d3f0:	rex push rbx
    6500d3f2:	sub    rsp,0x20
    6500d3f6:	cmp    QWORD PTR [rcx+0x48],0x10
    6500d3fb:	mov    rbx,rcx
    6500d3fe:	jb     0x6500d409
    6500d400:	mov    rcx,QWORD PTR [rcx+0x30]
    6500d404:	call   0x6501d190
    6500d409:	mov    QWORD PTR [rbx+0x48],0xf
    6500d411:	mov    QWORD PTR [rbx+0x40],0x0
    6500d419:	mov    BYTE PTR [rbx+0x30],0x0
    6500d41d:	cmp    QWORD PTR [rbx+0x20],0x10
    6500d422:	jb     0x6500d42d
    6500d424:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d428:	call   0x6501d190
    6500d42d:	mov    QWORD PTR [rbx+0x20],0xf
    6500d435:	mov    QWORD PTR [rbx+0x18],0x0
    6500d43d:	mov    BYTE PTR [rbx+0x8],0x0
    6500d441:	add    rsp,0x20
    6500d445:	pop    rbx
    6500d446:	ret    
    6500d447:	int3   
    6500d448:	int3   
    6500d449:	int3   
    6500d44a:	int3   
    6500d44b:	int3   
    6500d44c:	int3   
    6500d44d:	int3   
    6500d44e:	int3   
    6500d44f:	int3   
    6500d450:	rex push rbx
    6500d452:	sub    rsp,0x20
    6500d456:	cmp    QWORD PTR [rcx+0x48],0x8
    6500d45b:	mov    rbx,rcx
    6500d45e:	jb     0x6500d469
    6500d460:	mov    rcx,QWORD PTR [rcx+0x30]
    6500d464:	call   0x6501d190
    6500d469:	mov    QWORD PTR [rbx+0x48],0x7
    6500d471:	mov    QWORD PTR [rbx+0x40],0x0
    6500d479:	mov    WORD PTR [rbx+0x30],0x0
    6500d47f:	cmp    QWORD PTR [rbx+0x20],0x8
    6500d484:	jb     0x6500d48f
    6500d486:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d48a:	call   0x6501d190
    6500d48f:	mov    QWORD PTR [rbx+0x20],0x7
    6500d497:	mov    QWORD PTR [rbx+0x18],0x0
    6500d49f:	mov    WORD PTR [rbx+0x8],0x0
    6500d4a5:	add    rsp,0x20
    6500d4a9:	pop    rbx
    6500d4aa:	ret    
    6500d4ab:	int3   
    6500d4ac:	int3   
    6500d4ad:	int3   
    6500d4ae:	int3   
    6500d4af:	int3   
    6500d4b0:	rex push rbx
    6500d4b2:	sub    rsp,0x20
    6500d4b6:	cmp    QWORD PTR [rcx+0x48],0x8
    6500d4bb:	mov    rbx,rcx
    6500d4be:	jb     0x6500d4c9
    6500d4c0:	mov    rcx,QWORD PTR [rcx+0x30]
    6500d4c4:	call   0x6501d190
    6500d4c9:	mov    QWORD PTR [rbx+0x48],0x7
    6500d4d1:	mov    QWORD PTR [rbx+0x40],0x0
    6500d4d9:	mov    WORD PTR [rbx+0x30],0x0
    6500d4df:	cmp    QWORD PTR [rbx+0x20],0x8
    6500d4e4:	jb     0x6500d4ef
    6500d4e6:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d4ea:	call   0x6501d190
    6500d4ef:	mov    QWORD PTR [rbx+0x20],0x7
    6500d4f7:	mov    QWORD PTR [rbx+0x18],0x0
    6500d4ff:	mov    WORD PTR [rbx+0x8],0x0
    6500d505:	add    rsp,0x20
    6500d509:	pop    rbx
    6500d50a:	ret    
    6500d50b:	int3   
    6500d50c:	int3   
    6500d50d:	int3   
    6500d50e:	int3   
    6500d50f:	int3   
    6500d510:	rex push rbp
    6500d512:	push   rsi
    6500d513:	push   rdi
    6500d514:	push   r12
    6500d516:	push   r13
    6500d518:	sub    rsp,0x40
    6500d51c:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500d525:	mov    QWORD PTR [rsp+0x80],rbx
    6500d52d:	mov    rax,QWORD PTR [rip+0x34bec]        # 0x65042120
    6500d534:	xor    rax,rsp
    6500d537:	mov    QWORD PTR [rsp+0x38],rax
    6500d53c:	mov    r13,rdx
    6500d53f:	mov    rbx,rcx
    6500d542:	mov    QWORD PTR [rsp+0x30],rdx
    6500d547:	mov    DWORD PTR [rsp+0x20],0x0
    6500d54f:	mov    QWORD PTR [rcx+0x20],0xf
    6500d557:	mov    QWORD PTR [rcx+0x18],0x0
    6500d55f:	mov    BYTE PTR [rcx+0x8],0x0
    6500d563:	or     r9,0xffffffffffffffff
    6500d567:	xor    r8d,r8d
    6500d56a:	call   0x65001e20
    6500d56f:	mov    edi,0x1
    6500d574:	cmp    rdi,QWORD PTR [rbx+0x18]
    6500d578:	jae    0x6500d5ce
    6500d57a:	data16 xchg ax,ax
    6500d57d:	data16 xchg ax,ax
    6500d580:	cmp    rdi,QWORD PTR [rbx+0x18]
    6500d584:	jbe    0x6500d58b
    6500d586:	call   0x6501d960
    6500d58b:	cmp    QWORD PTR [rbx+0x20],0x10
    6500d590:	jb     0x6500d598
    6500d592:	mov    rbp,QWORD PTR [rbx+0x8]
    6500d596:	jmp    0x6500d59c
    6500d598:	lea    rbp,[rbx+0x8]
    6500d59c:	lea    r12,[rdi-0x1]
    6500d5a0:	cmp    r12,QWORD PTR [rbx+0x18]
    6500d5a4:	jbe    0x6500d5ab
    6500d5a6:	call   0x6501d960
    6500d5ab:	cmp    QWORD PTR [rbx+0x20],0x10
    6500d5b0:	jb     0x6500d5b8
    6500d5b2:	mov    rax,QWORD PTR [rbx+0x8]
    6500d5b6:	jmp    0x6500d5bc
    6500d5b8:	lea    rax,[rbx+0x8]
    6500d5bc:	movzx  eax,BYTE PTR [r12+rax*1]
    6500d5c1:	xor    BYTE PTR [rdi+rbp*1],al
    6500d5c4:	add    rdi,0x1
    6500d5c8:	cmp    rdi,QWORD PTR [rbx+0x18]
    6500d5cc:	jb     0x6500d580
    6500d5ce:	cmp    QWORD PTR [r13+0x20],0x10
    6500d5d3:	jb     0x6500d5de
    6500d5d5:	mov    rcx,QWORD PTR [r13+0x8]
    6500d5d9:	call   0x6501d190
    6500d5de:	mov    QWORD PTR [r13+0x20],0xf
    6500d5e6:	mov    QWORD PTR [r13+0x18],0x0
    6500d5ee:	mov    BYTE PTR [r13+0x8],0x0
    6500d5f3:	mov    rax,rbx
    6500d5f6:	mov    rcx,QWORD PTR [rsp+0x38]
    6500d5fb:	xor    rcx,rsp
    6500d5fe:	call   0x6501e4e0
    6500d603:	mov    rbx,QWORD PTR [rsp+0x80]
    6500d60b:	add    rsp,0x40
    6500d60f:	pop    r13
    6500d611:	pop    r12
    6500d613:	pop    rdi
    6500d614:	pop    rsi
    6500d615:	pop    rbp
    6500d616:	ret    
    6500d617:	int3   
    6500d618:	int3   
    6500d619:	int3   
    6500d61a:	int3   
    6500d61b:	int3   
    6500d61c:	int3   
    6500d61d:	int3   
    6500d61e:	int3   
    6500d61f:	int3   
    6500d620:	rex push rbp
    6500d622:	sub    rsp,0x20
    6500d626:	mov    rbp,rdx
    6500d629:	mov    rcx,QWORD PTR [rbp+0x30]
    6500d62d:	call   0x65001c70
    6500d632:	add    rsp,0x20
    6500d636:	pop    rbp
    6500d637:	ret    
    6500d638:	int3   
    6500d639:	int3   
    6500d63a:	int3   
    6500d63b:	int3   
    6500d63c:	int3   
    6500d63d:	int3   
    6500d63e:	int3   
    6500d63f:	int3   
    6500d640:	rex push rsi
    6500d642:	push   rdi
    6500d643:	push   r12
    6500d645:	sub    rsp,0x40
    6500d649:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500d652:	mov    QWORD PTR [rsp+0x70],rbx
    6500d657:	mov    QWORD PTR [rsp+0x78],rbp
    6500d65c:	mov    rax,QWORD PTR [rip+0x34abd]        # 0x65042120
    6500d663:	xor    rax,rsp
    6500d666:	mov    QWORD PTR [rsp+0x38],rax
    6500d66b:	mov    r12,rdx
    6500d66e:	mov    rdi,rcx
    6500d671:	mov    QWORD PTR [rsp+0x30],rdx
    6500d676:	mov    DWORD PTR [rsp+0x20],0x0
    6500d67e:	mov    QWORD PTR [rcx+0x20],0x7
    6500d686:	mov    QWORD PTR [rcx+0x18],0x0
    6500d68e:	mov    WORD PTR [rcx+0x8],0x0
    6500d694:	or     r9,0xffffffffffffffff
    6500d698:	xor    r8d,r8d
    6500d69b:	call   0x6500f4d0
    6500d6a0:	mov    ebx,0x1
    6500d6a5:	cmp    rbx,QWORD PTR [rdi+0x18]
    6500d6a9:	jae    0x6500d700
    6500d6ab:	xchg   ax,ax
    6500d6ad:	data16 xchg ax,ax
    6500d6b0:	cmp    rbx,QWORD PTR [rdi+0x18]
    6500d6b4:	jbe    0x6500d6bb
    6500d6b6:	call   0x6501d960
    6500d6bb:	cmp    QWORD PTR [rdi+0x20],0x8
    6500d6c0:	jb     0x6500d6c8
    6500d6c2:	mov    rbp,QWORD PTR [rdi+0x8]
    6500d6c6:	jmp    0x6500d6cc
    6500d6c8:	lea    rbp,[rdi+0x8]
    6500d6cc:	lea    rax,[rbx-0x1]
    6500d6d0:	cmp    rax,QWORD PTR [rdi+0x18]
    6500d6d4:	jbe    0x6500d6db
    6500d6d6:	call   0x6501d960
    6500d6db:	cmp    QWORD PTR [rdi+0x20],0x8
    6500d6e0:	jb     0x6500d6e8
    6500d6e2:	mov    rax,QWORD PTR [rdi+0x8]
    6500d6e6:	jmp    0x6500d6ec
    6500d6e8:	lea    rax,[rdi+0x8]
    6500d6ec:	movzx  eax,WORD PTR [rax+rbx*2-0x2]
    6500d6f1:	xor    WORD PTR [rbp+rbx*2+0x0],ax
    6500d6f6:	add    rbx,0x1
    6500d6fa:	cmp    rbx,QWORD PTR [rdi+0x18]
    6500d6fe:	jb     0x6500d6b0
    6500d700:	cmp    QWORD PTR [r12+0x20],0x8
    6500d706:	jb     0x6500d712
    6500d708:	mov    rcx,QWORD PTR [r12+0x8]
    6500d70d:	call   0x6501d190
    6500d712:	mov    QWORD PTR [r12+0x20],0x7
    6500d71b:	mov    QWORD PTR [r12+0x18],0x0
    6500d724:	mov    WORD PTR [r12+0x8],0x0
    6500d72c:	mov    rax,rdi
    6500d72f:	mov    rcx,QWORD PTR [rsp+0x38]
    6500d734:	xor    rcx,rsp
    6500d737:	call   0x6501e4e0
    6500d73c:	mov    rbx,QWORD PTR [rsp+0x70]
    6500d741:	mov    rbp,QWORD PTR [rsp+0x78]
    6500d746:	add    rsp,0x40
    6500d74a:	pop    r12
    6500d74c:	pop    rdi
    6500d74d:	pop    rsi
    6500d74e:	ret    
    6500d74f:	int3   
    6500d750:	rex push rbp
    6500d752:	sub    rsp,0x20
    6500d756:	mov    rbp,rdx
    6500d759:	mov    rcx,QWORD PTR [rbp+0x30]
    6500d75d:	call   0x6500e300
    6500d762:	add    rsp,0x20
    6500d766:	pop    rbp
    6500d767:	ret    
    6500d768:	int3   
    6500d769:	int3   
    6500d76a:	int3   
    6500d76b:	int3   
    6500d76c:	int3   
    6500d76d:	int3   
    6500d76e:	int3   
    6500d76f:	int3   
    6500d770:	mov    QWORD PTR [rsp+0x8],rbx
    6500d775:	mov    QWORD PTR [rsp+0x10],rbp
    6500d77a:	mov    QWORD PTR [rsp+0x18],rsi
    6500d77f:	mov    QWORD PTR [rsp+0x20],rdi
    6500d784:	push   r12
    6500d786:	sub    rsp,0x50
    6500d78a:	mov    rax,QWORD PTR [rcx+0x8]
    6500d78e:	mov    rsi,r9
    6500d791:	mov    rbx,r8
    6500d794:	mov    rdi,QWORD PTR [rax]
    6500d797:	mov    rax,QWORD PTR [r8]
    6500d79a:	mov    r12,rdx
    6500d79d:	test   rax,rax
    6500d7a0:	mov    rbp,rcx
    6500d7a3:	je     0x6500d7aa
    6500d7a5:	cmp    rax,rcx
    6500d7a8:	je     0x6500d7af
    6500d7aa:	call   0x6501d960
    6500d7af:	cmp    QWORD PTR [rbx+0x8],rdi
    6500d7b3:	jne    0x6500d860
    6500d7b9:	mov    rax,QWORD PTR [rsi]
    6500d7bc:	mov    rdi,QWORD PTR [rbp+0x8]
    6500d7c0:	test   rax,rax
    6500d7c3:	je     0x6500d7ca
    6500d7c5:	cmp    rax,rbp
    6500d7c8:	je     0x6500d7cf
    6500d7ca:	call   0x6501d960
    6500d7cf:	cmp    QWORD PTR [rsi+0x8],rdi
    6500d7d3:	jne    0x6500d860
    6500d7d9:	mov    rax,QWORD PTR [rbp+0x8]
    6500d7dd:	xor    esi,esi
    6500d7df:	mov    rbx,QWORD PTR [rax+0x8]
    6500d7e3:	mov    rdi,rbx
    6500d7e6:	cmp    BYTE PTR [rbx+0x41],sil
    6500d7ea:	jne    0x6500d830
    6500d7ec:	data16 data16 xchg ax,ax
    6500d7f0:	mov    rdx,QWORD PTR [rdi+0x10]
    6500d7f4:	mov    rcx,rbp
    6500d7f7:	call   0x6500fac0
    6500d7fc:	cmp    QWORD PTR [rbx+0x38],0x10
    6500d801:	mov    rdi,QWORD PTR [rdi]
    6500d804:	jb     0x6500d80f
    6500d806:	mov    rcx,QWORD PTR [rbx+0x20]
    6500d80a:	call   0x6501d190
    6500d80f:	mov    QWORD PTR [rbx+0x38],0xf
    6500d817:	mov    QWORD PTR [rbx+0x30],rsi
    6500d81b:	mov    rcx,rbx
    6500d81e:	mov    BYTE PTR [rbx+0x20],sil
    6500d822:	call   0x6501d190
    6500d827:	cmp    BYTE PTR [rdi+0x41],sil
    6500d82b:	mov    rbx,rdi
    6500d82e:	je     0x6500d7f0
    6500d830:	mov    rax,QWORD PTR [rbp+0x8]
    6500d834:	mov    QWORD PTR [r12],rbp
    6500d838:	mov    QWORD PTR [rax+0x8],rax
    6500d83c:	mov    rax,QWORD PTR [rbp+0x8]
    6500d840:	mov    QWORD PTR [rbp+0x10],rsi
    6500d844:	mov    QWORD PTR [rax],rax
    6500d847:	mov    rax,QWORD PTR [rbp+0x8]
    6500d84b:	mov    QWORD PTR [rax+0x10],rax
    6500d84f:	mov    rax,QWORD PTR [rbp+0x8]
    6500d853:	mov    rcx,QWORD PTR [rax]
    6500d856:	mov    QWORD PTR [r12+0x8],rcx
    6500d85b:	jmp    0x6500d92b
    6500d860:	mov    rax,QWORD PTR [rbx]
    6500d863:	test   rax,rax
    6500d866:	je     0x6500d86d
    6500d868:	cmp    rax,QWORD PTR [rsi]
    6500d86b:	je     0x6500d872
    6500d86d:	call   0x6501d960
    6500d872:	mov    rax,QWORD PTR [rsi+0x8]
    6500d876:	cmp    QWORD PTR [rbx+0x8],rax
    6500d87a:	mov    rax,QWORD PTR [rbx]
    6500d87d:	je     0x6500d91e
    6500d883:	cmp    QWORD PTR [rbx],0x0
    6500d887:	lea    rcx,[rsp+0x20]
    6500d88c:	mov    QWORD PTR [rcx],rax
    6500d88f:	mov    rax,QWORD PTR [rbx+0x8]
    6500d893:	mov    QWORD PTR [rcx+0x8],rax
    6500d897:	jne    0x6500d89e
    6500d899:	call   0x6501d960
    6500d89e:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d8a2:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d8a6:	je     0x6500d8af
    6500d8a8:	call   0x6501d960
    6500d8ad:	jmp    0x6500d8fc
    6500d8af:	mov    rax,QWORD PTR [rcx+0x10]
    6500d8b3:	cmp    BYTE PTR [rax+0x41],0x0
    6500d8b7:	jne    0x6500d8d4
    6500d8b9:	mov    rcx,QWORD PTR [rax]
    6500d8bc:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d8c0:	jne    0x6500d8ce
    6500d8c2:	mov    rax,rcx
    6500d8c5:	mov    rcx,QWORD PTR [rcx]
    6500d8c8:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d8cc:	je     0x6500d8c2
    6500d8ce:	mov    QWORD PTR [rbx+0x8],rax
    6500d8d2:	jmp    0x6500d8fc
    6500d8d4:	mov    rcx,QWORD PTR [rcx+0x8]
    6500d8d8:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d8dc:	jne    0x6500d8f8
    6500d8de:	xchg   ax,ax
    6500d8e0:	mov    rax,QWORD PTR [rcx+0x10]
    6500d8e4:	cmp    QWORD PTR [rbx+0x8],rax
    6500d8e8:	jne    0x6500d8f8
    6500d8ea:	mov    QWORD PTR [rbx+0x8],rcx
    6500d8ee:	mov    rcx,QWORD PTR [rcx+0x8]
    6500d8f2:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d8f6:	je     0x6500d8e0
    6500d8f8:	mov    QWORD PTR [rbx+0x8],rcx
    6500d8fc:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500d901:	lea    r8,[rsp+0x30]
    6500d906:	lea    rdx,[rsp+0x40]
    6500d90b:	mov    rcx,rbp
    6500d90e:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6500d914:	call   0x6500e840
    6500d919:	jmp    0x6500d860
    6500d91e:	mov    QWORD PTR [r12],rax
    6500d922:	mov    rax,QWORD PTR [rbx+0x8]
    6500d926:	mov    QWORD PTR [r12+0x8],rax
    6500d92b:	mov    rbx,QWORD PTR [rsp+0x60]
    6500d930:	mov    rbp,QWORD PTR [rsp+0x68]
    6500d935:	mov    rsi,QWORD PTR [rsp+0x70]
    6500d93a:	mov    rdi,QWORD PTR [rsp+0x78]
    6500d93f:	mov    rax,r12
    6500d942:	add    rsp,0x50
    6500d946:	pop    r12
    6500d948:	ret    
    6500d949:	int3   
    6500d94a:	int3   
    6500d94b:	int3   
    6500d94c:	int3   
    6500d94d:	int3   
    6500d94e:	int3   
    6500d94f:	int3   
    6500d950:	mov    QWORD PTR [rsp+0x18],rbx
    6500d955:	mov    QWORD PTR [rsp+0x10],rdx
    6500d95a:	mov    QWORD PTR [rsp+0x8],rcx
    6500d95f:	push   rbp
    6500d960:	push   rsi
    6500d961:	push   rdi
    6500d962:	push   r12
    6500d964:	push   r13
    6500d966:	push   r14
    6500d968:	push   r15
    6500d96a:	sub    rsp,0x40
    6500d96e:	mov    r13,QWORD PTR [rcx+0x8]
    6500d972:	mov    rbp,r8
    6500d975:	mov    r14,rdx
    6500d978:	mov    rbx,QWORD PTR [r13+0x8]
    6500d97c:	mov    r15,rcx
    6500d97f:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d983:	jne    0x6500da09
    6500d989:	mov    r14,QWORD PTR [r8+0x18]
    6500d98d:	data16 xchg ax,ax
    6500d990:	cmp    QWORD PTR [rbx+0x38],0x10
    6500d995:	mov    rsi,QWORD PTR [rbx+0x30]
    6500d999:	jb     0x6500d9a1
    6500d99b:	mov    rdx,QWORD PTR [rbx+0x20]
    6500d99f:	jmp    0x6500d9a5
    6500d9a1:	lea    rdx,[rbx+0x20]
    6500d9a5:	cmp    r14,r14
    6500d9a8:	mov    rdi,r14
    6500d9ab:	cmovb  rdi,r14
    6500d9af:	cmp    QWORD PTR [rbp+0x20],0x10
    6500d9b4:	jb     0x6500d9bc
    6500d9b6:	mov    rcx,QWORD PTR [rbp+0x8]
    6500d9ba:	jmp    0x6500d9c0
    6500d9bc:	lea    rcx,[rbp+0x8]
    6500d9c0:	mov    r8,rsi
    6500d9c3:	cmp    rdi,rsi
    6500d9c6:	cmovb  r8,rdi
    6500d9ca:	call   0x6501d570
    6500d9cf:	test   eax,eax
    6500d9d1:	movsxd rcx,eax
    6500d9d4:	jne    0x6500d9e3
    6500d9d6:	cmp    rdi,rsi
    6500d9d9:	jb     0x6500d9ed
    6500d9db:	cmp    rdi,rsi
    6500d9de:	setne  al
    6500d9e1:	mov    ecx,eax
    6500d9e3:	test   ecx,ecx
    6500d9e5:	js     0x6500d9ed
    6500d9e7:	mov    rbx,QWORD PTR [rbx+0x10]
    6500d9eb:	jmp    0x6500d9f3
    6500d9ed:	mov    r13,rbx
    6500d9f0:	mov    rbx,QWORD PTR [rbx]
    6500d9f3:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d9f7:	je     0x6500d990
    6500d9f9:	mov    r14,QWORD PTR [rsp+0x88]
    6500da01:	mov    r15,QWORD PTR [rsp+0x80]
    6500da09:	mov    r12,QWORD PTR [r15+0x8]
    6500da0d:	mov    QWORD PTR [rsp+0x38],r13
    6500da12:	mov    QWORD PTR [rsp+0x30],r15
    6500da17:	mov    rbx,QWORD PTR [r12+0x8]
    6500da1c:	cmp    BYTE PTR [rbx+0x41],0x0
    6500da20:	jne    0x6500da95
    6500da22:	mov    rsi,QWORD PTR [rbp+0x18]
    6500da26:	mov    r13,QWORD PTR [rbp+0x20]
    6500da2a:	data16 xchg ax,ax
    6500da2d:	data16 xchg ax,ax
    6500da30:	cmp    r13,0x10
    6500da34:	jb     0x6500da3c
    6500da36:	mov    rdx,QWORD PTR [rbp+0x8]
    6500da3a:	jmp    0x6500da40
    6500da3c:	lea    rdx,[rbp+0x8]
    6500da40:	mov    rdi,QWORD PTR [rbx+0x30]
    6500da44:	cmp    rdi,rdi
    6500da47:	cmovb  rdi,rdi
    6500da4b:	cmp    QWORD PTR [rbx+0x38],0x10
    6500da50:	jb     0x6500da58
    6500da52:	mov    rcx,QWORD PTR [rbx+0x20]
    6500da56:	jmp    0x6500da5c
    6500da58:	lea    rcx,[rbx+0x20]
    6500da5c:	mov    r8,rsi
    6500da5f:	cmp    rdi,rsi
    6500da62:	cmovb  r8,rdi
    6500da66:	call   0x6501d570
    6500da6b:	test   eax,eax
    6500da6d:	movsxd rcx,eax
    6500da70:	jne    0x6500da7f
    6500da72:	cmp    rdi,rsi
    6500da75:	jb     0x6500da8b
    6500da77:	cmp    rdi,rsi
    6500da7a:	setne  al
    6500da7d:	mov    ecx,eax
    6500da7f:	test   ecx,ecx
    6500da81:	js     0x6500da8b
    6500da83:	mov    r12,rbx
    6500da86:	mov    rbx,QWORD PTR [rbx]
    6500da89:	jmp    0x6500da8f
    6500da8b:	mov    rbx,QWORD PTR [rbx+0x10]
    6500da8f:	cmp    BYTE PTR [rbx+0x41],0x0
    6500da93:	je     0x6500da30
    6500da95:	mov    rbx,QWORD PTR [rsp+0x90]
    6500da9d:	lea    rcx,[rsp+0x20]
    6500daa2:	mov    QWORD PTR [rsp+0x28],r12
    6500daa7:	mov    QWORD PTR [rsp+0x20],r15
    6500daac:	mov    rax,QWORD PTR [rcx]
    6500daaf:	mov    QWORD PTR [r14],rax
    6500dab2:	mov    rax,QWORD PTR [rcx+0x8]
    6500dab6:	lea    rcx,[rsp+0x30]
    6500dabb:	mov    QWORD PTR [r14+0x8],rax
    6500dabf:	mov    rax,QWORD PTR [rcx]
    6500dac2:	mov    QWORD PTR [r14+0x10],rax
    6500dac6:	mov    rax,QWORD PTR [rcx+0x8]
    6500daca:	mov    QWORD PTR [r14+0x18],rax
    6500dace:	mov    rax,r14
    6500dad1:	add    rsp,0x40
    6500dad5:	pop    r15
    6500dad7:	pop    r14
    6500dad9:	pop    r13
    6500dadb:	pop    r12
    6500dadd:	pop    rdi
    6500dade:	pop    rsi
    6500dadf:	pop    rbp
    6500dae0:	ret    
    6500dae1:	int3   
    6500dae2:	int3   
    6500dae3:	int3   
    6500dae4:	int3   
    6500dae5:	int3   
    6500dae6:	int3   
    6500dae7:	int3   
    6500dae8:	int3   
    6500dae9:	int3   
    6500daea:	int3   
    6500daeb:	int3   
    6500daec:	int3   
    6500daed:	int3   
    6500daee:	int3   
    6500daef:	int3   
    6500daf0:	mov    r11,rsp
    6500daf3:	push   rdi
    6500daf4:	sub    rsp,0xa0
    6500dafb:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500db04:	mov    QWORD PTR [r11+0x8],rbx
    6500db08:	mov    QWORD PTR [r11+0x10],rbp
    6500db0c:	mov    QWORD PTR [r11+0x18],rsi
    6500db10:	mov    rdi,r9
    6500db13:	movzx  esi,r8b
    6500db17:	mov    rbp,rdx
    6500db1a:	mov    rbx,rcx
    6500db1d:	movabs rax,0x666666666666665
    6500db27:	cmp    QWORD PTR [rcx+0x10],rax
    6500db2b:	jb     0x6500dbfa
    6500db31:	mov    QWORD PTR [r11-0x50],0xf
    6500db39:	xor    ebx,ebx
    6500db3b:	mov    QWORD PTR [r11-0x58],rbx
    6500db3f:	mov    BYTE PTR [rsp+0x40],bl
    6500db43:	xor    r8d,r8d
    6500db46:	lea    edx,[rbx+0x13]
    6500db49:	lea    rcx,[r11-0x70]
    6500db4d:	call   0x65002330
    6500db52:	lea    rcx,[rsp+0x40]
    6500db57:	mov    rdx,QWORD PTR [rsp+0x58]
    6500db5c:	cmp    rdx,0x10
    6500db60:	cmovae rcx,QWORD PTR [rsp+0x40]
    6500db66:	lea    r9d,[rbx+0x13]
    6500db6a:	lea    r8,[rip+0x2b0cf]        # 0x65038c40
    6500db71:	call   0x6501d640
    6500db76:	mov    QWORD PTR [rsp+0x50],0x13
    6500db7f:	lea    rax,[rsp+0x40]
    6500db84:	cmp    QWORD PTR [rsp+0x58],0x10
    6500db8a:	cmovae rax,QWORD PTR [rsp+0x40]
    6500db90:	mov    BYTE PTR [rax+0x13],bl
    6500db93:	lea    rcx,[rsp+0x60]
    6500db98:	call   0x6501d1a0
    6500db9d:	nop
    6500db9e:	lea    rax,[rip+0x2757b]        # 0x65035120
    6500dba5:	mov    QWORD PTR [rsp+0x60],rax
    6500dbaa:	mov    QWORD PTR [rsp+0x98],0xf
    6500dbb6:	mov    QWORD PTR [rsp+0x90],rbx
    6500dbbe:	mov    BYTE PTR [rsp+0x80],bl
    6500dbc5:	or     r9,0xffffffffffffffff
    6500dbc9:	xor    r8d,r8d
    6500dbcc:	lea    rdx,[rsp+0x38]
    6500dbd1:	lea    rcx,[rsp+0x78]
    6500dbd6:	call   0x65001e20
    6500dbdb:	nop
    6500dbdc:	lea    rax,[rip+0x27555]        # 0x65035138
    6500dbe3:	mov    QWORD PTR [rsp+0x60],rax
    6500dbe8:	lea    rdx,[rip+0x336a9]        # 0x65041298
    6500dbef:	lea    rcx,[rsp+0x60]
    6500dbf4:	call   0x6501daf0
    6500dbf9:	nop
    6500dbfa:	mov    rdx,QWORD PTR [rcx+0x8]
    6500dbfe:	mov    BYTE PTR [rsp+0x28],0x0
    6500dc03:	mov    rax,QWORD PTR [rsp+0xd0]
    6500dc0b:	mov    QWORD PTR [rsp+0x20],rax
    6500dc10:	mov    r9,rdx
    6500dc13:	mov    r8,rdi
    6500dc16:	call   0x6500eff0
    6500dc1b:	mov    r11,rax
    6500dc1e:	add    QWORD PTR [rbx+0x10],0x1
    6500dc23:	mov    rcx,QWORD PTR [rbx+0x8]
    6500dc27:	cmp    rdi,rcx
    6500dc2a:	jne    0x6500dc41
    6500dc2c:	mov    QWORD PTR [rcx+0x8],rax
    6500dc30:	mov    rcx,QWORD PTR [rbx+0x8]
    6500dc34:	mov    QWORD PTR [rcx],rax
    6500dc37:	mov    rcx,QWORD PTR [rbx+0x8]
    6500dc3b:	mov    QWORD PTR [rcx+0x10],rax
    6500dc3f:	jmp    0x6500dc69
    6500dc41:	test   sil,sil
    6500dc44:	je     0x6500dc57
    6500dc46:	mov    QWORD PTR [rdi],rax
    6500dc49:	mov    rax,QWORD PTR [rbx+0x8]
    6500dc4d:	cmp    rdi,QWORD PTR [rax]
    6500dc50:	jne    0x6500dc69
    6500dc52:	mov    QWORD PTR [rax],r11
    6500dc55:	jmp    0x6500dc69
    6500dc57:	mov    QWORD PTR [rdi+0x10],rax
    6500dc5b:	mov    rax,QWORD PTR [rbx+0x8]
    6500dc5f:	cmp    rdi,QWORD PTR [rax+0x10]
    6500dc63:	jne    0x6500dc69
    6500dc65:	mov    QWORD PTR [rax+0x10],r11
    6500dc69:	mov    r8,r11
    6500dc6c:	lea    rdx,[r11+0x8]
    6500dc70:	mov    rax,QWORD PTR [rdx]
    6500dc73:	cmp    BYTE PTR [rax+0x40],0x0
    6500dc77:	jne    0x6500de68
    6500dc7d:	data16 xchg ax,ax
    6500dc80:	mov    rax,QWORD PTR [rdx]
    6500dc83:	mov    rcx,QWORD PTR [rax+0x8]
    6500dc87:	cmp    rax,QWORD PTR [rcx]
    6500dc8a:	jne    0x6500dd77
    6500dc90:	mov    r9,QWORD PTR [rcx+0x10]
    6500dc94:	cmp    BYTE PTR [r9+0x40],0x0
    6500dc99:	jne    0x6500dcbb
    6500dc9b:	mov    BYTE PTR [rax+0x40],0x1
    6500dc9f:	mov    BYTE PTR [r9+0x40],0x1
    6500dca4:	mov    rax,QWORD PTR [rdx]
    6500dca7:	mov    rcx,QWORD PTR [rax+0x8]
    6500dcab:	mov    BYTE PTR [rcx+0x40],0x0
    6500dcaf:	mov    rax,QWORD PTR [rdx]
    6500dcb2:	mov    r8,QWORD PTR [rax+0x8]
    6500dcb6:	jmp    0x6500de57
    6500dcbb:	cmp    r8,QWORD PTR [rax+0x10]
    6500dcbf:	jne    0x6500dd0e
    6500dcc1:	mov    r8,rax
    6500dcc4:	mov    rcx,QWORD PTR [rax+0x10]
    6500dcc8:	mov    rax,QWORD PTR [rcx]
    6500dccb:	mov    QWORD PTR [r8+0x10],rax
    6500dccf:	mov    rax,QWORD PTR [rcx]
    6500dcd2:	cmp    BYTE PTR [rax+0x41],0x0
    6500dcd6:	jne    0x6500dcdc
    6500dcd8:	mov    QWORD PTR [rax+0x8],r8
    6500dcdc:	lea    rdx,[r8+0x8]
    6500dce0:	mov    rax,QWORD PTR [rdx]
    6500dce3:	mov    QWORD PTR [rcx+0x8],rax
    6500dce7:	mov    rax,QWORD PTR [rbx+0x8]
    6500dceb:	cmp    r8,QWORD PTR [rax+0x8]
    6500dcef:	jne    0x6500dcf7
    6500dcf1:	mov    QWORD PTR [rax+0x8],rcx
    6500dcf5:	jmp    0x6500dd08
    6500dcf7:	mov    rax,QWORD PTR [rdx]
    6500dcfa:	cmp    r8,QWORD PTR [rax]
    6500dcfd:	jne    0x6500dd04
    6500dcff:	mov    QWORD PTR [rax],rcx
    6500dd02:	jmp    0x6500dd08
    6500dd04:	mov    QWORD PTR [rax+0x10],rcx
    6500dd08:	mov    QWORD PTR [rcx],r8
    6500dd0b:	mov    QWORD PTR [rdx],rcx
    6500dd0e:	mov    rax,QWORD PTR [rdx]
    6500dd11:	mov    BYTE PTR [rax+0x40],0x1
    6500dd15:	mov    rax,QWORD PTR [rdx]
    6500dd18:	mov    rcx,QWORD PTR [rax+0x8]
    6500dd1c:	mov    BYTE PTR [rcx+0x40],0x0
    6500dd20:	mov    rax,QWORD PTR [rdx]
    6500dd23:	mov    rcx,QWORD PTR [rax+0x8]
    6500dd27:	mov    rdx,QWORD PTR [rcx]
    6500dd2a:	mov    rax,QWORD PTR [rdx+0x10]
    6500dd2e:	mov    QWORD PTR [rcx],rax
    6500dd31:	mov    rax,QWORD PTR [rdx+0x10]
    6500dd35:	cmp    BYTE PTR [rax+0x41],0x0
    6500dd39:	jne    0x6500dd3f
    6500dd3b:	mov    QWORD PTR [rax+0x8],rcx
    6500dd3f:	mov    rax,QWORD PTR [rcx+0x8]
    6500dd43:	mov    QWORD PTR [rdx+0x8],rax
    6500dd47:	mov    rax,QWORD PTR [rbx+0x8]
    6500dd4b:	cmp    rcx,QWORD PTR [rax+0x8]
    6500dd4f:	jne    0x6500dd57
    6500dd51:	mov    QWORD PTR [rax+0x8],rdx
    6500dd55:	jmp    0x6500dd6a
    6500dd57:	mov    rax,QWORD PTR [rcx+0x8]
    6500dd5b:	cmp    rcx,QWORD PTR [rax+0x10]
    6500dd5f:	jne    0x6500dd67
    6500dd61:	mov    QWORD PTR [rax+0x10],rdx
    6500dd65:	jmp    0x6500dd6a
    6500dd67:	mov    QWORD PTR [rax],rdx
    6500dd6a:	mov    QWORD PTR [rdx+0x10],rcx
    6500dd6e:	mov    QWORD PTR [rcx+0x8],rdx
    6500dd72:	jmp    0x6500de57
    6500dd77:	mov    r9,QWORD PTR [rcx]
    6500dd7a:	cmp    BYTE PTR [r9+0x40],0x0
    6500dd7f:	jne    0x6500dda1
    6500dd81:	mov    BYTE PTR [rax+0x40],0x1
    6500dd85:	mov    BYTE PTR [r9+0x40],0x1
    6500dd8a:	mov    rax,QWORD PTR [rdx]
    6500dd8d:	mov    rcx,QWORD PTR [rax+0x8]
    6500dd91:	mov    BYTE PTR [rcx+0x40],0x0
    6500dd95:	mov    rax,QWORD PTR [rdx]
    6500dd98:	mov    r8,QWORD PTR [rax+0x8]
    6500dd9c:	jmp    0x6500de57
    6500dda1:	cmp    r8,QWORD PTR [rax]
    6500dda4:	jne    0x6500ddf5
    6500dda6:	mov    r8,rax
    6500dda9:	mov    rcx,QWORD PTR [rax]
    6500ddac:	mov    rax,QWORD PTR [rcx+0x10]
    6500ddb0:	mov    QWORD PTR [r8],rax
    6500ddb3:	mov    rax,QWORD PTR [rcx+0x10]
    6500ddb7:	cmp    BYTE PTR [rax+0x41],0x0
    6500ddbb:	jne    0x6500ddc1
    6500ddbd:	mov    QWORD PTR [rax+0x8],r8
    6500ddc1:	lea    rdx,[r8+0x8]
    6500ddc5:	mov    rax,QWORD PTR [rdx]
    6500ddc8:	mov    QWORD PTR [rcx+0x8],rax
    6500ddcc:	mov    rax,QWORD PTR [rbx+0x8]
    6500ddd0:	cmp    r8,QWORD PTR [rax+0x8]
    6500ddd4:	jne    0x6500dddc
    6500ddd6:	mov    QWORD PTR [rax+0x8],rcx
    6500ddda:	jmp    0x6500ddee
    6500dddc:	mov    rax,QWORD PTR [rdx]
    6500dddf:	cmp    r8,QWORD PTR [rax+0x10]
    6500dde3:	jne    0x6500ddeb
    6500dde5:	mov    QWORD PTR [rax+0x10],rcx
    6500dde9:	jmp    0x6500ddee
    6500ddeb:	mov    QWORD PTR [rax],rcx
    6500ddee:	mov    QWORD PTR [rcx+0x10],r8
    6500ddf2:	mov    QWORD PTR [rdx],rcx
    6500ddf5:	mov    rax,QWORD PTR [rdx]
    6500ddf8:	mov    BYTE PTR [rax+0x40],0x1
    6500ddfc:	mov    rax,QWORD PTR [rdx]
    6500ddff:	mov    rcx,QWORD PTR [rax+0x8]
    6500de03:	mov    BYTE PTR [rcx+0x40],0x0
    6500de07:	mov    rax,QWORD PTR [rdx]
    6500de0a:	mov    rcx,QWORD PTR [rax+0x8]
    6500de0e:	mov    rdx,QWORD PTR [rcx+0x10]
    6500de12:	mov    rax,QWORD PTR [rdx]
    6500de15:	mov    QWORD PTR [rcx+0x10],rax
    6500de19:	mov    rax,QWORD PTR [rdx]
    6500de1c:	cmp    BYTE PTR [rax+0x41],0x0
    6500de20:	jne    0x6500de26
    6500de22:	mov    QWORD PTR [rax+0x8],rcx
    6500de26:	mov    rax,QWORD PTR [rcx+0x8]
    6500de2a:	mov    QWORD PTR [rdx+0x8],rax
    6500de2e:	mov    rax,QWORD PTR [rbx+0x8]
    6500de32:	cmp    rcx,QWORD PTR [rax+0x8]
    6500de36:	jne    0x6500de3e
    6500de38:	mov    QWORD PTR [rax+0x8],rdx
    6500de3c:	jmp    0x6500de50
    6500de3e:	mov    rax,QWORD PTR [rcx+0x8]
    6500de42:	cmp    rcx,QWORD PTR [rax]
    6500de45:	jne    0x6500de4c
    6500de47:	mov    QWORD PTR [rax],rdx
    6500de4a:	jmp    0x6500de50
    6500de4c:	mov    QWORD PTR [rax+0x10],rdx
    6500de50:	mov    QWORD PTR [rdx],rcx
    6500de53:	mov    QWORD PTR [rcx+0x8],rdx
    6500de57:	lea    rdx,[r8+0x8]
    6500de5b:	mov    rax,QWORD PTR [rdx]
    6500de5e:	cmp    BYTE PTR [rax+0x40],0x0
    6500de62:	je     0x6500dc80
    6500de68:	mov    rax,QWORD PTR [rbx+0x8]
    6500de6c:	mov    rcx,QWORD PTR [rax+0x8]
    6500de70:	mov    BYTE PTR [rcx+0x40],0x1
    6500de74:	mov    QWORD PTR [rbp+0x8],r11
    6500de78:	mov    QWORD PTR [rbp+0x0],rbx
    6500de7c:	mov    rax,rbp
    6500de7f:	lea    r11,[rsp+0xa0]
    6500de87:	mov    rbx,QWORD PTR [r11+0x10]
    6500de8b:	mov    rbp,QWORD PTR [r11+0x18]
    6500de8f:	mov    rsi,QWORD PTR [r11+0x20]
    6500de93:	mov    rsp,r11
    6500de96:	pop    rdi
    6500de97:	ret    
    6500de98:	int3   
    6500de99:	int3   
    6500de9a:	int3   
    6500de9b:	int3   
    6500de9c:	int3   
    6500de9d:	int3   
    6500de9e:	int3   
    6500de9f:	int3   
    6500dea0:	rex push rbp
    6500dea2:	sub    rsp,0x20
    6500dea6:	mov    rbp,rdx
    6500dea9:	lea    rcx,[rbp+0x38]
    6500dead:	call   0x65001c70
    6500deb2:	add    rsp,0x20
    6500deb6:	pop    rbp
    6500deb7:	ret    
    6500deb8:	int3   
    6500deb9:	int3   
    6500deba:	int3   
    6500debb:	int3   
    6500debc:	int3   
    6500debd:	int3   
    6500debe:	int3   
    6500debf:	int3   
    6500dec0:	rex push rbp
    6500dec2:	sub    rsp,0x20
    6500dec6:	mov    rbp,rdx
    6500dec9:	lea    rcx,[rbp+0x60]
    6500decd:	call   0x6501d320
    6500ded2:	add    rsp,0x20
    6500ded6:	pop    rbp
    6500ded7:	ret    
    6500ded8:	int3   
    6500ded9:	int3   
    6500deda:	int3   
    6500dedb:	int3   
    6500dedc:	int3   
    6500dedd:	int3   
    6500dede:	int3   
    6500dedf:	int3   
    6500dee0:	mov    r11,rsp
    6500dee3:	push   rbx
    6500dee4:	sub    rsp,0x50
    6500dee8:	mov    rax,QWORD PTR [rcx+0x8]
    6500deec:	mov    QWORD PTR [r11-0x38],rcx
    6500def0:	lea    r9,[r11-0x28]
    6500def4:	mov    QWORD PTR [r11-0x30],rax
    6500def8:	mov    rax,QWORD PTR [rax]
    6500defb:	lea    r8,[r11-0x38]
    6500deff:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500df04:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6500df0a:	mov    QWORD PTR [r11-0x38],rcx
    6500df0e:	mov    QWORD PTR [r11-0x30],rax
    6500df12:	lea    rdx,[r11-0x18]
    6500df16:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500df1b:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    6500df21:	mov    rbx,rcx
    6500df24:	call   0x6500d770
    6500df29:	mov    rcx,QWORD PTR [rbx+0x8]
    6500df2d:	call   0x6501d190
    6500df32:	xor    r11d,r11d
    6500df35:	mov    QWORD PTR [rbx+0x8],r11
    6500df39:	mov    QWORD PTR [rbx+0x10],r11
    6500df3d:	add    rsp,0x50
    6500df41:	pop    rbx
    6500df42:	ret    
    6500df43:	int3   
    6500df44:	int3   
    6500df45:	int3   
    6500df46:	int3   
    6500df47:	int3   
    6500df48:	int3   
    6500df49:	int3   
    6500df4a:	int3   
    6500df4b:	int3   
    6500df4c:	int3   
    6500df4d:	int3   
    6500df4e:	int3   
    6500df4f:	int3   
    6500df50:	mov    QWORD PTR [rsp+0x18],rbx
    6500df55:	mov    QWORD PTR [rsp+0x10],rdx
    6500df5a:	mov    QWORD PTR [rsp+0x8],rcx
    6500df5f:	push   rbp
    6500df60:	push   rsi
    6500df61:	push   rdi
    6500df62:	push   r12
    6500df64:	push   r13
    6500df66:	push   r14
    6500df68:	push   r15
    6500df6a:	sub    rsp,0x40
    6500df6e:	mov    r12,QWORD PTR [rcx+0x8]
    6500df72:	mov    r14,r8
    6500df75:	mov    r13,rdx
    6500df78:	mov    rbx,QWORD PTR [r12+0x8]
    6500df7d:	mov    r15,rcx
    6500df80:	mov    sil,0x1
    6500df83:	cmp    BYTE PTR [rbx+0x69],0x0
    6500df87:	jne    0x6500e02b
    6500df8d:	mov    r15,QWORD PTR [r8+0x18]
    6500df91:	xor    r13d,r13d
    6500df94:	mov    rax,r15
    6500df97:	data16 xchg ax,ax
    6500df9a:	data16 xchg ax,ax
    6500df9d:	data16 xchg ax,ax
    6500dfa0:	cmp    QWORD PTR [rbx+0x38],0x10
    6500dfa5:	mov    rsi,QWORD PTR [rbx+0x30]
    6500dfa9:	mov    r12,rbx
    6500dfac:	jb     0x6500dfb4
    6500dfae:	mov    rdx,QWORD PTR [rbx+0x20]
    6500dfb2:	jmp    0x6500dfb8
    6500dfb4:	lea    rdx,[rbx+0x20]
    6500dfb8:	cmp    rax,r15
    6500dfbb:	mov    rdi,r15
    6500dfbe:	cmovb  rdi,rax
    6500dfc2:	cmp    QWORD PTR [r14+0x20],0x10
    6500dfc7:	jb     0x6500dfcf
    6500dfc9:	mov    rcx,QWORD PTR [r14+0x8]
    6500dfcd:	jmp    0x6500dfd3
    6500dfcf:	lea    rcx,[r14+0x8]
    6500dfd3:	mov    r8,rsi
    6500dfd6:	cmp    rdi,rsi
    6500dfd9:	cmovb  r8,rdi
    6500dfdd:	call   0x6501d570
    6500dfe2:	test   eax,eax
    6500dfe4:	movsxd rcx,eax
    6500dfe7:	jne    0x6500dffe
    6500dfe9:	cmp    rdi,rsi
    6500dfec:	jae    0x6500dff3
    6500dfee:	or     ecx,0xffffffff
    6500dff1:	jmp    0x6500dffe
    6500dff3:	mov    eax,r13d
    6500dff6:	cmp    rdi,rsi
    6500dff9:	setne  al
    6500dffc:	mov    ecx,eax
    6500dffe:	test   ecx,ecx
    6500e000:	sets   sil
    6500e004:	test   sil,sil
    6500e007:	je     0x6500e00e
    6500e009:	mov    rbx,QWORD PTR [rbx]
    6500e00c:	jmp    0x6500e012
    6500e00e:	mov    rbx,QWORD PTR [rbx+0x10]
    6500e012:	cmp    BYTE PTR [rbx+0x69],r13b
    6500e016:	mov    rax,r15
    6500e019:	je     0x6500dfa0
    6500e01b:	mov    r13,QWORD PTR [rsp+0x88]
    6500e023:	mov    r15,QWORD PTR [rsp+0x80]
    6500e02b:	test   sil,sil
    6500e02e:	mov    rbx,r12
    6500e031:	mov    QWORD PTR [rsp+0x30],r15
    6500e036:	mov    QWORD PTR [rsp+0x38],rbx
    6500e03b:	je     0x6500e0dc
    6500e041:	mov    rax,QWORD PTR [r15+0x8]
    6500e045:	cmp    r12,QWORD PTR [rax]
    6500e048:	jne    0x6500e052
    6500e04a:	mov    r8b,0x1
    6500e04d:	jmp    0x6500e159
    6500e052:	cmp    BYTE PTR [r12+0x69],0x0
    6500e058:	je     0x6500e071
    6500e05a:	mov    rbx,QWORD PTR [r12+0x10]
    6500e05f:	mov    QWORD PTR [rsp+0x38],rbx
    6500e064:	cmp    BYTE PTR [rbx+0x69],0x0
    6500e068:	je     0x6500e0dc
    6500e06a:	call   0x6501d960
    6500e06f:	jmp    0x6500e0dc
    6500e071:	mov    rax,QWORD PTR [r12]
    6500e075:	cmp    BYTE PTR [rax+0x69],0x0
    6500e079:	jne    0x6500e0a4
    6500e07b:	mov    rbx,rax
    6500e07e:	mov    rax,QWORD PTR [rax+0x10]
    6500e082:	cmp    BYTE PTR [rax+0x69],0x0
    6500e086:	jne    0x6500e09d
    6500e088:	data16 data16 xchg ax,ax
    6500e08c:	data16 data16 xchg ax,ax
    6500e090:	mov    rbx,rax
    6500e093:	mov    rax,QWORD PTR [rax+0x10]
    6500e097:	cmp    BYTE PTR [rax+0x69],0x0
    6500e09b:	je     0x6500e090
    6500e09d:	mov    QWORD PTR [rsp+0x38],rbx
    6500e0a2:	jmp    0x6500e0dc
    6500e0a4:	mov    rax,QWORD PTR [r12+0x8]
    6500e0a9:	cmp    BYTE PTR [rax+0x69],0x0
    6500e0ad:	jne    0x6500e0c7
    6500e0af:	nop
    6500e0b0:	cmp    rbx,QWORD PTR [rax]
    6500e0b3:	jne    0x6500e0c7
    6500e0b5:	mov    rbx,rax
    6500e0b8:	mov    QWORD PTR [rsp+0x38],rax
    6500e0bd:	mov    rax,QWORD PTR [rax+0x8]
    6500e0c1:	cmp    BYTE PTR [rax+0x69],0x0
    6500e0c5:	je     0x6500e0b0
    6500e0c7:	cmp    BYTE PTR [rbx+0x69],0x0
    6500e0cb:	je     0x6500e0d4
    6500e0cd:	call   0x6501d960
    6500e0d2:	jmp    0x6500e0dc
    6500e0d4:	mov    rbx,rax
    6500e0d7:	mov    QWORD PTR [rsp+0x38],rax
    6500e0dc:	cmp    QWORD PTR [r14+0x20],0x10
    6500e0e1:	mov    rbp,QWORD PTR [r14+0x18]
    6500e0e5:	jb     0x6500e0ed
    6500e0e7:	mov    rdx,QWORD PTR [r14+0x8]
    6500e0eb:	jmp    0x6500e0f1
    6500e0ed:	lea    rdx,[r14+0x8]
    6500e0f1:	mov    rdi,QWORD PTR [rbx+0x30]
    6500e0f5:	cmp    rdi,rdi
    6500e0f8:	cmovb  rdi,rdi
    6500e0fc:	cmp    QWORD PTR [rbx+0x38],0x10
    6500e101:	jb     0x6500e109
    6500e103:	mov    rcx,QWORD PTR [rbx+0x20]
    6500e107:	jmp    0x6500e10d
    6500e109:	lea    rcx,[rbx+0x20]
    6500e10d:	mov    r8,rbp
    6500e110:	cmp    rdi,rbp
    6500e113:	cmovb  r8,rdi
    6500e117:	call   0x6501d570
    6500e11c:	test   eax,eax
    6500e11e:	movsxd rcx,eax
    6500e121:	jne    0x6500e13a
    6500e123:	cmp    rdi,rbp
    6500e126:	jb     0x6500e155
    6500e128:	mov    r15d,eax
    6500e12b:	setne  r15b
    6500e12f:	mov    ecx,r15d
    6500e132:	mov    r15,QWORD PTR [rsp+0x80]
    6500e13a:	test   ecx,ecx
    6500e13c:	js     0x6500e155
    6500e13e:	lea    rcx,[rsp+0x30]
    6500e143:	mov    BYTE PTR [r13+0x10],0x0
    6500e148:	mov    rax,QWORD PTR [rcx]
    6500e14b:	mov    QWORD PTR [r13+0x0],rax
    6500e14f:	mov    rax,QWORD PTR [rcx+0x8]
    6500e153:	jmp    0x6500e17e
    6500e155:	movzx  r8d,sil
    6500e159:	lea    rdx,[rsp+0x30]
    6500e15e:	mov    r9,r12
    6500e161:	mov    rcx,r15
    6500e164:	mov    QWORD PTR [rsp+0x20],r14
    6500e169:	call   0x6500f0e0
    6500e16e:	mov    BYTE PTR [r13+0x10],0x1
    6500e173:	mov    rcx,QWORD PTR [rax]
    6500e176:	mov    rax,QWORD PTR [rax+0x8]
    6500e17a:	mov    QWORD PTR [r13+0x0],rcx
    6500e17e:	mov    rbx,QWORD PTR [rsp+0x90]
    6500e186:	mov    QWORD PTR [r13+0x8],rax
    6500e18a:	mov    rax,r13
    6500e18d:	add    rsp,0x40
    6500e191:	pop    r15
    6500e193:	pop    r14
    6500e195:	pop    r13
    6500e197:	pop    r12
    6500e199:	pop    rdi
    6500e19a:	pop    rsi
    6500e19b:	pop    rbp
    6500e19c:	ret    
    6500e19d:	int3   
    6500e19e:	int3   
    6500e19f:	int3   
    6500e1a0:	mov    QWORD PTR [rsp+0x18],rbx
    6500e1a5:	mov    QWORD PTR [rsp+0x10],rdx
    6500e1aa:	mov    QWORD PTR [rsp+0x8],rcx
    6500e1af:	push   rbp
    6500e1b0:	push   rsi
    6500e1b1:	push   rdi
    6500e1b2:	push   r12
    6500e1b4:	push   r13
    6500e1b6:	push   r14
    6500e1b8:	push   r15
    6500e1ba:	sub    rsp,0x40
    6500e1be:	mov    rsi,QWORD PTR [rcx+0x8]
    6500e1c2:	xor    r14d,r14d
    6500e1c5:	mov    r13,r8
    6500e1c8:	mov    rbx,QWORD PTR [rsi+0x8]
    6500e1cc:	mov    r15,rdx
    6500e1cf:	mov    r12,rcx
    6500e1d2:	cmp    BYTE PTR [rbx+0x69],r14b
    6500e1d6:	jne    0x6500e255
    6500e1d8:	mov    rbp,QWORD PTR [r8+0x18]
    6500e1dc:	mov    r15,QWORD PTR [r8+0x20]
    6500e1e0:	cmp    r15,0x10
    6500e1e4:	jb     0x6500e1ec
    6500e1e6:	mov    rdx,QWORD PTR [r13+0x8]
    6500e1ea:	jmp    0x6500e1f0
    6500e1ec:	lea    rdx,[r13+0x8]
    6500e1f0:	mov    rdi,QWORD PTR [rbx+0x30]
    6500e1f4:	cmp    rdi,rdi
    6500e1f7:	cmovb  rdi,rdi
    6500e1fb:	cmp    QWORD PTR [rbx+0x38],0x10
    6500e200:	jb     0x6500e208
    6500e202:	mov    rcx,QWORD PTR [rbx+0x20]
    6500e206:	jmp    0x6500e20c
    6500e208:	lea    rcx,[rbx+0x20]
    6500e20c:	mov    r8,rbp
    6500e20f:	cmp    rdi,rbp
    6500e212:	cmovb  r8,rdi
    6500e216:	call   0x6501d570
    6500e21b:	test   eax,eax
    6500e21d:	movsxd rcx,eax
    6500e220:	jne    0x6500e22f
    6500e222:	cmp    rdi,rbp
    6500e225:	jb     0x6500e23b
    6500e227:	mov    eax,r14d
    6500e22a:	setne  al
    6500e22d:	mov    ecx,eax
    6500e22f:	test   ecx,ecx
    6500e231:	js     0x6500e23b
    6500e233:	mov    rsi,rbx
    6500e236:	mov    rbx,QWORD PTR [rbx]
    6500e239:	jmp    0x6500e23f
    6500e23b:	mov    rbx,QWORD PTR [rbx+0x10]
    6500e23f:	cmp    BYTE PTR [rbx+0x69],r14b
    6500e243:	je     0x6500e1e0
    6500e245:	mov    r12,QWORD PTR [rsp+0x80]
    6500e24d:	mov    r15,QWORD PTR [rsp+0x88]
    6500e255:	mov    rbp,QWORD PTR [r12+0x8]
    6500e25a:	mov    QWORD PTR [rsp+0x28],rsi
    6500e25f:	mov    QWORD PTR [rsp+0x20],r12
    6500e264:	cmp    rsi,rbp
    6500e267:	je     0x6500e2c7
    6500e269:	cmp    QWORD PTR [rsi+0x38],0x10
    6500e26e:	mov    rdi,QWORD PTR [rsi+0x30]
    6500e272:	jb     0x6500e27a
    6500e274:	mov    rdx,QWORD PTR [rsi+0x20]
    6500e278:	jmp    0x6500e27e
    6500e27a:	lea    rdx,[rsi+0x20]
    6500e27e:	mov    rbx,QWORD PTR [r13+0x18]
    6500e282:	cmp    rbx,rbx
    6500e285:	cmovb  rbx,rbx
    6500e289:	cmp    QWORD PTR [r13+0x20],0x10
    6500e28e:	jb     0x6500e296
    6500e290:	mov    rcx,QWORD PTR [r13+0x8]
    6500e294:	jmp    0x6500e29a
    6500e296:	lea    rcx,[r13+0x8]
    6500e29a:	mov    r8,rdi
    6500e29d:	cmp    rbx,rdi
    6500e2a0:	cmovb  r8,rbx
    6500e2a4:	call   0x6501d570
    6500e2a9:	test   eax,eax
    6500e2ab:	movsxd rcx,eax
    6500e2ae:	jne    0x6500e2bc
    6500e2b0:	cmp    rbx,rdi
    6500e2b3:	jb     0x6500e2c7
    6500e2b5:	setne  r14b
    6500e2b9:	mov    ecx,r14d
    6500e2bc:	test   ecx,ecx
    6500e2be:	js     0x6500e2c7
    6500e2c0:	lea    rcx,[rsp+0x20]
    6500e2c5:	jmp    0x6500e2d6
    6500e2c7:	mov    QWORD PTR [rsp+0x38],rbp
    6500e2cc:	mov    QWORD PTR [rsp+0x30],r12
    6500e2d1:	lea    rcx,[rsp+0x30]
    6500e2d6:	mov    rax,QWORD PTR [rcx]
    6500e2d9:	mov    rbx,QWORD PTR [rsp+0x90]
    6500e2e1:	mov    QWORD PTR [r15],rax
    6500e2e4:	mov    rax,QWORD PTR [rcx+0x8]
    6500e2e8:	mov    QWORD PTR [r15+0x8],rax
    6500e2ec:	mov    rax,r15
    6500e2ef:	add    rsp,0x40
    6500e2f3:	pop    r15
    6500e2f5:	pop    r14
    6500e2f7:	pop    r13
    6500e2f9:	pop    r12
    6500e2fb:	pop    rdi
    6500e2fc:	pop    rsi
    6500e2fd:	pop    rbp
    6500e2fe:	ret    
    6500e2ff:	int3   
    6500e300:	rex push rbx
    6500e302:	sub    rsp,0x20
    6500e306:	cmp    QWORD PTR [rcx+0x20],0x8
    6500e30b:	mov    rbx,rcx
    6500e30e:	jb     0x6500e319
    6500e310:	mov    rcx,QWORD PTR [rcx+0x8]
    6500e314:	call   0x6501d190
    6500e319:	mov    QWORD PTR [rbx+0x20],0x7
    6500e321:	mov    QWORD PTR [rbx+0x18],0x0
    6500e329:	mov    WORD PTR [rbx+0x8],0x0
    6500e32f:	add    rsp,0x20
    6500e333:	pop    rbx
    6500e334:	ret    
    6500e335:	int3   
    6500e336:	int3   
    6500e337:	int3   
    6500e338:	int3   
    6500e339:	int3   
    6500e33a:	int3   
    6500e33b:	int3   
    6500e33c:	int3   
    6500e33d:	int3   
    6500e33e:	int3   
    6500e33f:	int3   
    6500e340:	mov    QWORD PTR [rsp+0x18],rbx
    6500e345:	mov    QWORD PTR [rsp+0x10],rdx
    6500e34a:	mov    QWORD PTR [rsp+0x8],rcx
    6500e34f:	push   rbp
    6500e350:	push   rsi
    6500e351:	push   rdi
    6500e352:	push   r12
    6500e354:	push   r13
    6500e356:	push   r14
    6500e358:	push   r15
    6500e35a:	sub    rsp,0x40
    6500e35e:	mov    rsi,QWORD PTR [rcx+0x8]
    6500e362:	xor    r14d,r14d
    6500e365:	or     r13d,0xffffffff
    6500e369:	mov    r9,QWORD PTR [rsi+0x8]
    6500e36d:	mov    r15,r8
    6500e370:	mov    rbp,rdx
    6500e373:	cmp    BYTE PTR [r9+0x69],r14b
    6500e377:	mov    r10,rcx
    6500e37a:	mov    dil,0x1
    6500e37d:	mov    r12d,0x1
    6500e383:	jne    0x6500e451
    6500e389:	mov    r12,QWORD PTR [r8+0x18]
    6500e38d:	lea    ebp,[r13+0x2]
    6500e391:	cmp    QWORD PTR [r9+0x38],0x8
    6500e396:	mov    r11,QWORD PTR [r9+0x30]
    6500e39a:	mov    rsi,r9
    6500e39d:	jb     0x6500e3a5
    6500e39f:	mov    rdx,QWORD PTR [r9+0x20]
    6500e3a3:	jmp    0x6500e3a9
    6500e3a5:	lea    rdx,[r9+0x20]
    6500e3a9:	cmp    r12,r12
    6500e3ac:	mov    r10,r12
    6500e3af:	cmovb  r10,r12
    6500e3b3:	cmp    QWORD PTR [r15+0x20],0x8
    6500e3b8:	jb     0x6500e3c0
    6500e3ba:	mov    rcx,QWORD PTR [r15+0x8]
    6500e3be:	jmp    0x6500e3c4
    6500e3c0:	lea    rcx,[r15+0x8]
    6500e3c4:	cmp    r10,r11
    6500e3c7:	mov    r8,r11
    6500e3ca:	cmovb  r8,r10
    6500e3ce:	test   r8,r8
    6500e3d1:	je     0x6500e3e8
    6500e3d3:	movzx  eax,WORD PTR [rdx]
    6500e3d6:	cmp    WORD PTR [rcx],ax
    6500e3d9:	jne    0x6500e3ff
    6500e3db:	add    rcx,0x2
    6500e3df:	add    rdx,0x2
    6500e3e3:	sub    r8,rbp
    6500e3e6:	jne    0x6500e3d3
    6500e3e8:	mov    r8d,r14d
    6500e3eb:	or     ecx,0xffffffff
    6500e3ee:	test   r8d,r8d
    6500e3f1:	movsxd rax,r8d
    6500e3f4:	jne    0x6500e419
    6500e3f6:	cmp    r10,r11
    6500e3f9:	jae    0x6500e410
    6500e3fb:	mov    eax,ecx
    6500e3fd:	jmp    0x6500e419
    6500e3ff:	cmp    WORD PTR [rcx],ax
    6500e402:	mov    r8d,ebp
    6500e405:	mov    ecx,0xffffffff
    6500e40a:	cmovb  r8d,ecx
    6500e40e:	jmp    0x6500e3ee
    6500e410:	cmp    r10,r11
    6500e413:	mov    eax,r14d
    6500e416:	setne  al
    6500e419:	test   eax,eax
    6500e41b:	sets   dil
    6500e41f:	test   dil,dil
    6500e422:	je     0x6500e429
    6500e424:	mov    r9,QWORD PTR [r9]
    6500e427:	jmp    0x6500e42d
    6500e429:	mov    r9,QWORD PTR [r9+0x10]
    6500e42d:	cmp    BYTE PTR [r9+0x69],r14b
    6500e431:	je     0x6500e391
    6500e437:	mov    rbp,QWORD PTR [rsp+0x88]
    6500e43f:	mov    r10,QWORD PTR [rsp+0x80]
    6500e447:	mov    r12d,0x1
    6500e44d:	or     r13d,0xffffffff
    6500e451:	test   dil,dil
    6500e454:	mov    rbx,rsi
    6500e457:	mov    QWORD PTR [rsp+0x30],r10
    6500e45c:	mov    QWORD PTR [rsp+0x38],rbx
    6500e461:	je     0x6500e514
    6500e467:	mov    rax,QWORD PTR [r10+0x8]
    6500e46b:	cmp    rsi,QWORD PTR [rax]
    6500e46e:	jne    0x6500e478
    6500e470:	mov    r8b,0x1
    6500e473:	jmp    0x6500e5a5
    6500e478:	cmp    BYTE PTR [rsi+0x69],r14b
    6500e47c:	je     0x6500e4a0
    6500e47e:	mov    rbx,QWORD PTR [rsi+0x10]
    6500e482:	mov    QWORD PTR [rsp+0x38],rbx
    6500e487:	cmp    BYTE PTR [rbx+0x69],r14b
    6500e48b:	je     0x6500e514
    6500e491:	call   0x6501d960
    6500e496:	mov    r10,QWORD PTR [rsp+0x80]
    6500e49e:	jmp    0x6500e514
    6500e4a0:	mov    rax,QWORD PTR [rsi]
    6500e4a3:	cmp    BYTE PTR [rax+0x69],r14b
    6500e4a7:	jne    0x6500e4d4
    6500e4a9:	mov    rbx,rax
    6500e4ac:	mov    rax,QWORD PTR [rax+0x10]
    6500e4b0:	cmp    BYTE PTR [rax+0x69],r14b
    6500e4b4:	jne    0x6500e4cd
    6500e4b6:	data16 data16 xchg ax,ax
    6500e4ba:	data16 xchg ax,ax
    6500e4bd:	data16 xchg ax,ax
    6500e4c0:	mov    rbx,rax
    6500e4c3:	mov    rax,QWORD PTR [rax+0x10]
    6500e4c7:	cmp    BYTE PTR [rax+0x69],r14b
    6500e4cb:	je     0x6500e4c0
    6500e4cd:	mov    QWORD PTR [rsp+0x38],rbx
    6500e4d2:	jmp    0x6500e514
    6500e4d4:	mov    rax,QWORD PTR [rsi+0x8]
    6500e4d8:	cmp    BYTE PTR [rax+0x69],r14b
    6500e4dc:	jne    0x6500e4f7
    6500e4de:	xchg   ax,ax
    6500e4e0:	cmp    rbx,QWORD PTR [rax]
    6500e4e3:	jne    0x6500e4f7
    6500e4e5:	mov    rbx,rax
    6500e4e8:	mov    QWORD PTR [rsp+0x38],rax
    6500e4ed:	mov    rax,QWORD PTR [rax+0x8]
    6500e4f1:	cmp    BYTE PTR [rax+0x69],r14b
    6500e4f5:	je     0x6500e4e0
    6500e4f7:	cmp    BYTE PTR [rbx+0x69],r14b
    6500e4fb:	je     0x6500e50c
    6500e4fd:	call   0x6501d960
    6500e502:	mov    r10,QWORD PTR [rsp+0x80]
    6500e50a:	jmp    0x6500e514
    6500e50c:	mov    rbx,rax
    6500e50f:	mov    QWORD PTR [rsp+0x38],rax
    6500e514:	cmp    QWORD PTR [r15+0x20],0x8
    6500e519:	mov    r9,QWORD PTR [r15+0x18]
    6500e51d:	jb     0x6500e525
    6500e51f:	mov    rcx,QWORD PTR [r15+0x8]
    6500e523:	jmp    0x6500e529
    6500e525:	lea    rcx,[r15+0x8]
    6500e529:	mov    r8,QWORD PTR [rbx+0x30]
    6500e52d:	cmp    r8,r8
    6500e530:	cmovb  r8,r8
    6500e534:	cmp    QWORD PTR [rbx+0x38],0x8
    6500e539:	jb     0x6500e541
    6500e53b:	mov    rbx,QWORD PTR [rbx+0x20]
    6500e53f:	jmp    0x6500e545
    6500e541:	add    rbx,0x20
    6500e545:	cmp    r8,r9
    6500e548:	mov    rdx,r9
    6500e54b:	cmovb  rdx,r8
    6500e54f:	test   rdx,rdx
    6500e552:	je     0x6500e56a
    6500e554:	movzx  eax,WORD PTR [rcx]
    6500e557:	cmp    WORD PTR [rbx],ax
    6500e55a:	jne    0x6500e59b
    6500e55c:	add    rbx,0x2
    6500e560:	add    rcx,0x2
    6500e564:	sub    rdx,0x1
    6500e568:	jne    0x6500e554
    6500e56a:	mov    r12d,r14d
    6500e56d:	test   r12d,r12d
    6500e570:	movsxd rax,r12d
    6500e573:	jne    0x6500e581
    6500e575:	cmp    r8,r9
    6500e578:	jb     0x6500e5a1
    6500e57a:	setne  r14b
    6500e57e:	mov    eax,r14d
    6500e581:	test   eax,eax
    6500e583:	js     0x6500e5a1
    6500e585:	lea    rcx,[rsp+0x30]
    6500e58a:	mov    BYTE PTR [rbp+0x10],0x0
    6500e58e:	mov    rax,QWORD PTR [rcx]
    6500e591:	mov    QWORD PTR [rbp+0x0],rax
    6500e595:	mov    rax,QWORD PTR [rcx+0x8]
    6500e599:	jmp    0x6500e5c9
    6500e59b:	cmovb  r12d,r13d
    6500e59f:	jmp    0x6500e56d
    6500e5a1:	movzx  r8d,dil
    6500e5a5:	lea    rdx,[rsp+0x30]
    6500e5aa:	mov    r9,rsi
    6500e5ad:	mov    rcx,r10
    6500e5b0:	mov    QWORD PTR [rsp+0x20],r15
    6500e5b5:	call   0x6500f6d0
    6500e5ba:	mov    BYTE PTR [rbp+0x10],0x1
    6500e5be:	mov    rcx,QWORD PTR [rax]
    6500e5c1:	mov    rax,QWORD PTR [rax+0x8]
    6500e5c5:	mov    QWORD PTR [rbp+0x0],rcx
    6500e5c9:	mov    rbx,QWORD PTR [rsp+0x90]
    6500e5d1:	mov    QWORD PTR [rbp+0x8],rax
    6500e5d5:	mov    rax,rbp
    6500e5d8:	add    rsp,0x40
    6500e5dc:	pop    r15
    6500e5de:	pop    r14
    6500e5e0:	pop    r13
    6500e5e2:	pop    r12
    6500e5e4:	pop    rdi
    6500e5e5:	pop    rsi
    6500e5e6:	pop    rbp
    6500e5e7:	ret    
    6500e5e8:	int3   
    6500e5e9:	int3   
    6500e5ea:	int3   
    6500e5eb:	int3   
    6500e5ec:	int3   
    6500e5ed:	int3   
    6500e5ee:	int3   
    6500e5ef:	int3   
    6500e5f0:	mov    QWORD PTR [rsp+0x18],rbx
    6500e5f5:	mov    QWORD PTR [rsp+0x20],rbp
    6500e5fa:	mov    QWORD PTR [rsp+0x10],rdx
    6500e5ff:	push   rsi
    6500e600:	push   rdi
    6500e601:	push   r13
    6500e603:	push   r14
    6500e605:	push   r15
    6500e607:	sub    rsp,0x20
    6500e60b:	mov    rbx,QWORD PTR [rcx+0x8]
    6500e60f:	xor    edi,edi
    6500e611:	or     esi,0xffffffff
    6500e614:	mov    r9,QWORD PTR [rbx+0x8]
    6500e618:	mov    rbp,r8
    6500e61b:	mov    r15,rdx
    6500e61e:	cmp    BYTE PTR [r9+0x69],dil
    6500e622:	mov    r14,rcx
    6500e625:	mov    r13d,0x1
    6500e62b:	jne    0x6500e6e0
    6500e631:	mov    r11,QWORD PTR [r8+0x18]
    6500e635:	mov    QWORD PTR [rsp+0x50],r12
    6500e63a:	mov    r12,QWORD PTR [r8+0x20]
    6500e63e:	or     r15d,esi
    6500e641:	cmp    r12,0x8
    6500e645:	jb     0x6500e64d
    6500e647:	mov    rdx,QWORD PTR [rbp+0x8]
    6500e64b:	jmp    0x6500e651
    6500e64d:	lea    rdx,[rbp+0x8]
    6500e651:	mov    r10,QWORD PTR [r9+0x30]
    6500e655:	cmp    r10,r10
    6500e658:	cmovb  r10,r10
    6500e65c:	cmp    QWORD PTR [r9+0x38],0x8
    6500e661:	jb     0x6500e669
    6500e663:	mov    rcx,QWORD PTR [r9+0x20]
    6500e667:	jmp    0x6500e66d
    6500e669:	lea    rcx,[r9+0x20]
    6500e66d:	cmp    r10,r11
    6500e670:	mov    r8,r11
    6500e673:	cmovb  r8,r10
    6500e677:	test   r8,r8
    6500e67a:	je     0x6500e695
    6500e67c:	data16 data16 xchg ax,ax
    6500e680:	movzx  eax,WORD PTR [rdx]
    6500e683:	cmp    WORD PTR [rcx],ax
    6500e686:	jne    0x6500e6b9
    6500e688:	add    rcx,0x2
    6500e68c:	add    rdx,0x2
    6500e690:	sub    r8,r13
    6500e693:	jne    0x6500e680
    6500e695:	mov    r8d,edi
    6500e698:	test   r8d,r8d
    6500e69b:	movsxd rax,r8d
    6500e69e:	jne    0x6500e6ad
    6500e6a0:	cmp    r10,r11
    6500e6a3:	jb     0x6500e6c5
    6500e6a5:	cmp    r10,r11
    6500e6a8:	mov    eax,edi
    6500e6aa:	setne  al
    6500e6ad:	test   eax,eax
    6500e6af:	js     0x6500e6c5
    6500e6b1:	mov    rbx,r9
    6500e6b4:	mov    r9,QWORD PTR [r9]
    6500e6b7:	jmp    0x6500e6c9
    6500e6b9:	cmp    WORD PTR [rcx],ax
    6500e6bc:	mov    r8d,r13d
    6500e6bf:	cmovb  r8d,r15d
    6500e6c3:	jmp    0x6500e698
    6500e6c5:	mov    r9,QWORD PTR [r9+0x10]
    6500e6c9:	cmp    BYTE PTR [r9+0x69],dil
    6500e6cd:	je     0x6500e641
    6500e6d3:	mov    r15,QWORD PTR [rsp+0x58]
    6500e6d8:	mov    r12,QWORD PTR [rsp+0x50]
    6500e6dd:	or     esi,0xffffffff
    6500e6e0:	mov    r11,QWORD PTR [r14+0x8]
    6500e6e4:	mov    QWORD PTR [rsp+0x8],rbx
    6500e6e9:	mov    QWORD PTR [rsp],r14
    6500e6ed:	cmp    rbx,r11
    6500e6f0:	je     0x6500e777
    6500e6f6:	cmp    QWORD PTR [rbx+0x38],0x8
    6500e6fb:	mov    r10,QWORD PTR [rbx+0x30]
    6500e6ff:	jb     0x6500e707
    6500e701:	mov    rdx,QWORD PTR [rbx+0x20]
    6500e705:	jmp    0x6500e70b
    6500e707:	lea    rdx,[rbx+0x20]
    6500e70b:	mov    r9,QWORD PTR [rbp+0x18]
    6500e70f:	cmp    r9,r9
    6500e712:	cmovb  r9,r9
    6500e716:	cmp    QWORD PTR [rbp+0x20],0x8
    6500e71b:	jb     0x6500e723
    6500e71d:	mov    rcx,QWORD PTR [rbp+0x8]
    6500e721:	jmp    0x6500e727
    6500e723:	lea    rcx,[rbp+0x8]
    6500e727:	cmp    r9,r10
    6500e72a:	mov    r8,r10
    6500e72d:	cmovb  r8,r9
    6500e731:	test   r8,r8
    6500e734:	je     0x6500e74b
    6500e736:	movzx  eax,WORD PTR [rdx]
    6500e739:	cmp    WORD PTR [rcx],ax
    6500e73c:	jne    0x6500e76e
    6500e73e:	add    rcx,0x2
    6500e742:	add    rdx,0x2
    6500e746:	sub    r8,r13
    6500e749:	jne    0x6500e736
    6500e74b:	mov    r13d,edi
    6500e74e:	test   r13d,r13d
    6500e751:	movsxd rax,r13d
    6500e754:	jne    0x6500e764
    6500e756:	cmp    r9,r10
    6500e759:	jb     0x6500e777
    6500e75b:	cmp    r9,r10
    6500e75e:	setne  dil
    6500e762:	mov    eax,edi
    6500e764:	test   eax,eax
    6500e766:	js     0x6500e777
    6500e768:	lea    rcx,[rsp]
    6500e76c:	jmp    0x6500e786
    6500e76e:	cmp    WORD PTR [rcx],ax
    6500e771:	cmovb  r13d,esi
    6500e775:	jmp    0x6500e74e
    6500e777:	mov    QWORD PTR [rsp+0x18],r11
    6500e77c:	mov    QWORD PTR [rsp+0x10],r14
    6500e781:	lea    rcx,[rsp+0x10]
    6500e786:	mov    rax,QWORD PTR [rcx]
    6500e789:	mov    rbx,QWORD PTR [rsp+0x60]
    6500e78e:	mov    rbp,QWORD PTR [rsp+0x68]
    6500e793:	mov    QWORD PTR [r15],rax
    6500e796:	mov    rax,QWORD PTR [rcx+0x8]
    6500e79a:	mov    QWORD PTR [r15+0x8],rax
    6500e79e:	mov    rax,r15
    6500e7a1:	add    rsp,0x20
    6500e7a5:	pop    r15
    6500e7a7:	pop    r14
    6500e7a9:	pop    r13
    6500e7ab:	pop    rdi
    6500e7ac:	pop    rsi
    6500e7ad:	ret    
    6500e7ae:	int3   
    6500e7af:	int3   
    6500e7b0:	mov    QWORD PTR [rsp+0x8],rcx
    6500e7b5:	push   rdi
    6500e7b6:	sub    rsp,0x30
    6500e7ba:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500e7c3:	mov    QWORD PTR [rsp+0x48],rbx
    6500e7c8:	mov    rbx,rdx
    6500e7cb:	mov    rdi,rcx
    6500e7ce:	call   0x6501d270
    6500e7d3:	nop
    6500e7d4:	lea    rax,[rip+0x26945]        # 0x65035120
    6500e7db:	mov    QWORD PTR [rdi],rax
    6500e7de:	lea    rdx,[rbx+0x18]
    6500e7e2:	lea    rcx,[rdi+0x18]
    6500e7e6:	mov    QWORD PTR [rcx+0x20],0xf
    6500e7ee:	mov    QWORD PTR [rcx+0x18],0x0
    6500e7f6:	mov    BYTE PTR [rcx+0x8],0x0
    6500e7fa:	or     r9,0xffffffffffffffff
    6500e7fe:	xor    r8d,r8d
    6500e801:	call   0x65001e20
    6500e806:	nop
    6500e807:	lea    rax,[rip+0x2692a]        # 0x65035138
    6500e80e:	mov    QWORD PTR [rdi],rax
    6500e811:	mov    rax,rdi
    6500e814:	mov    rbx,QWORD PTR [rsp+0x48]
    6500e819:	add    rsp,0x30
    6500e81d:	pop    rdi
    6500e81e:	ret    
    6500e81f:	int3   
    6500e820:	rex push rbp
    6500e822:	sub    rsp,0x20
    6500e826:	mov    rbp,rdx
    6500e829:	mov    rcx,QWORD PTR [rbp+0x40]
    6500e82d:	call   0x6501d320
    6500e832:	add    rsp,0x20
    6500e836:	pop    rbp
    6500e837:	ret    
    6500e838:	int3   
    6500e839:	int3   
    6500e83a:	int3   
    6500e83b:	int3   
    6500e83c:	int3   
    6500e83d:	int3   
    6500e83e:	int3   
    6500e83f:	int3   
    6500e840:	mov    rax,rsp
    6500e843:	push   r12
    6500e845:	sub    rsp,0x90
    6500e84c:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500e855:	mov    QWORD PTR [rax+0x8],rbx
    6500e859:	mov    QWORD PTR [rax+0x10],rsi
    6500e85d:	mov    QWORD PTR [rax+0x18],rdi
    6500e861:	mov    rsi,r8
    6500e864:	mov    r12,rdx
    6500e867:	mov    rdi,rcx
    6500e86a:	mov    rbx,QWORD PTR [r8+0x8]
    6500e86e:	cmp    BYTE PTR [rbx+0x41],0x0
    6500e872:	je     0x6500e949
    6500e878:	mov    QWORD PTR [rax-0x50],0xf
    6500e880:	mov    QWORD PTR [rax-0x58],0x0
    6500e888:	mov    BYTE PTR [rax-0x68],0x0
    6500e88c:	xor    r8d,r8d
    6500e88f:	lea    edx,[r8+0x1b]
    6500e893:	lea    rcx,[rax-0x70]
    6500e897:	call   0x65002330
    6500e89c:	lea    rcx,[rsp+0x30]
    6500e8a1:	mov    rdx,QWORD PTR [rsp+0x48]
    6500e8a6:	cmp    rdx,0x10
    6500e8aa:	cmovae rcx,QWORD PTR [rsp+0x30]
    6500e8b0:	mov    r9d,0x1b
    6500e8b6:	lea    r8,[rip+0x2a39b]        # 0x65038c58
    6500e8bd:	call   0x6501d640
    6500e8c2:	mov    QWORD PTR [rsp+0x40],0x1b
    6500e8cb:	lea    rax,[rsp+0x30]
    6500e8d0:	cmp    QWORD PTR [rsp+0x48],0x10
    6500e8d6:	cmovae rax,QWORD PTR [rsp+0x30]
    6500e8dc:	mov    BYTE PTR [rax+0x1b],0x0
    6500e8e0:	lea    rcx,[rsp+0x50]
    6500e8e5:	call   0x6501d1a0
    6500e8ea:	nop
    6500e8eb:	lea    rax,[rip+0x2682e]        # 0x65035120
    6500e8f2:	mov    QWORD PTR [rsp+0x50],rax
    6500e8f7:	mov    QWORD PTR [rsp+0x88],0xf
    6500e903:	mov    QWORD PTR [rsp+0x80],0x0
    6500e90f:	mov    BYTE PTR [rsp+0x70],0x0
    6500e914:	or     r9,0xffffffffffffffff
    6500e918:	xor    r8d,r8d
    6500e91b:	lea    rdx,[rsp+0x28]
    6500e920:	lea    rcx,[rsp+0x68]
    6500e925:	call   0x65001e20
    6500e92a:	nop
    6500e92b:	lea    rax,[rip+0x2681e]        # 0x65035150
    6500e932:	mov    QWORD PTR [rsp+0x50],rax
    6500e937:	lea    rdx,[rip+0x328f2]        # 0x65041230
    6500e93e:	lea    rcx,[rsp+0x50]
    6500e943:	call   0x6501daf0
    6500e948:	nop
    6500e949:	cmp    QWORD PTR [r8],0x0
    6500e94d:	jne    0x6500e954
    6500e94f:	call   0x6501d960
    6500e954:	mov    rax,QWORD PTR [rsi+0x8]
    6500e958:	cmp    BYTE PTR [rax+0x41],0x0
    6500e95c:	je     0x6500e965
    6500e95e:	call   0x6501d960
    6500e963:	jmp    0x6500e9bc
    6500e965:	mov    rcx,QWORD PTR [rax+0x10]
    6500e969:	cmp    BYTE PTR [rcx+0x41],0x0
    6500e96d:	jne    0x6500e992
    6500e96f:	mov    rax,QWORD PTR [rcx]
    6500e972:	cmp    BYTE PTR [rax+0x41],0x0
    6500e976:	jne    0x6500e98c
    6500e978:	data16 data16 xchg ax,ax
    6500e97c:	data16 data16 xchg ax,ax
    6500e980:	mov    rcx,rax
    6500e983:	mov    rax,QWORD PTR [rax]
    6500e986:	cmp    BYTE PTR [rax+0x41],0x0
    6500e98a:	je     0x6500e980
    6500e98c:	mov    QWORD PTR [rsi+0x8],rcx
    6500e990:	jmp    0x6500e9bc
    6500e992:	mov    rcx,QWORD PTR [rax+0x8]
    6500e996:	cmp    BYTE PTR [rcx+0x41],0x0
    6500e99a:	jne    0x6500e9b8
    6500e99c:	data16 data16 xchg ax,ax
    6500e9a0:	mov    rax,QWORD PTR [rcx+0x10]
    6500e9a4:	cmp    QWORD PTR [rsi+0x8],rax
    6500e9a8:	jne    0x6500e9b8
    6500e9aa:	mov    QWORD PTR [rsi+0x8],rcx
    6500e9ae:	mov    rcx,QWORD PTR [rcx+0x8]
    6500e9b2:	cmp    BYTE PTR [rcx+0x41],0x0
    6500e9b6:	je     0x6500e9a0
    6500e9b8:	mov    QWORD PTR [rsi+0x8],rcx
    6500e9bc:	mov    rcx,QWORD PTR [rbx]
    6500e9bf:	cmp    BYTE PTR [rcx+0x41],0x0
    6500e9c3:	je     0x6500e9cb
    6500e9c5:	mov    r8,QWORD PTR [rbx+0x10]
    6500e9c9:	jmp    0x6500e9eb
    6500e9cb:	mov    rax,QWORD PTR [rbx+0x10]
    6500e9cf:	cmp    BYTE PTR [rax+0x41],0x0
    6500e9d3:	je     0x6500e9da
    6500e9d5:	mov    r8,rcx
    6500e9d8:	jmp    0x6500e9eb
    6500e9da:	mov    r9,QWORD PTR [rsi+0x8]
    6500e9de:	mov    r8,QWORD PTR [r9+0x10]
    6500e9e2:	cmp    r9,rbx
    6500e9e5:	jne    0x6500ea93
    6500e9eb:	mov    rdx,QWORD PTR [rbx+0x8]
    6500e9ef:	cmp    BYTE PTR [r8+0x41],0x0
    6500e9f4:	jne    0x6500e9fa
    6500e9f6:	mov    QWORD PTR [r8+0x8],rdx
    6500e9fa:	mov    rax,QWORD PTR [rdi+0x8]
    6500e9fe:	cmp    QWORD PTR [rax+0x8],rbx
    6500ea02:	jne    0x6500ea0a
    6500ea04:	mov    QWORD PTR [rax+0x8],r8
    6500ea08:	jmp    0x6500ea18
    6500ea0a:	cmp    QWORD PTR [rdx],rbx
    6500ea0d:	jne    0x6500ea14
    6500ea0f:	mov    QWORD PTR [rdx],r8
    6500ea12:	jmp    0x6500ea18
    6500ea14:	mov    QWORD PTR [rdx+0x10],r8
    6500ea18:	mov    r9,QWORD PTR [rdi+0x8]
    6500ea1c:	cmp    QWORD PTR [r9],rbx
    6500ea1f:	jne    0x6500ea4f
    6500ea21:	cmp    BYTE PTR [r8+0x41],0x0
    6500ea26:	je     0x6500ea2d
    6500ea28:	mov    rcx,rdx
    6500ea2b:	jmp    0x6500ea4c
    6500ea2d:	mov    rcx,r8
    6500ea30:	mov    rax,QWORD PTR [r8]
    6500ea33:	cmp    BYTE PTR [rax+0x41],0x0
    6500ea37:	jne    0x6500ea4c
    6500ea39:	data16 xchg ax,ax
    6500ea3c:	data16 data16 xchg ax,ax
    6500ea40:	mov    rcx,rax
    6500ea43:	mov    rax,QWORD PTR [rax]
    6500ea46:	cmp    BYTE PTR [rax+0x41],0x0
    6500ea4a:	je     0x6500ea40
    6500ea4c:	mov    QWORD PTR [r9],rcx
    6500ea4f:	mov    r9,QWORD PTR [rdi+0x8]
    6500ea53:	cmp    QWORD PTR [r9+0x10],rbx
    6500ea57:	jne    0x6500eb04
    6500ea5d:	cmp    BYTE PTR [r8+0x41],0x0
    6500ea62:	je     0x6500ea69
    6500ea64:	mov    rcx,rdx
    6500ea67:	jmp    0x6500ea8d
    6500ea69:	mov    rcx,r8
    6500ea6c:	mov    rax,QWORD PTR [r8+0x10]
    6500ea70:	cmp    BYTE PTR [rax+0x41],0x0
    6500ea74:	jne    0x6500ea8d
    6500ea76:	data16 data16 xchg ax,ax
    6500ea7a:	data16 xchg ax,ax
    6500ea7d:	data16 xchg ax,ax
    6500ea80:	mov    rcx,rax
    6500ea83:	mov    rax,QWORD PTR [rax+0x10]
    6500ea87:	cmp    BYTE PTR [rax+0x41],0x0
    6500ea8b:	je     0x6500ea80
    6500ea8d:	mov    QWORD PTR [r9+0x10],rcx
    6500ea91:	jmp    0x6500eb04
    6500ea93:	mov    QWORD PTR [rcx+0x8],r9
    6500ea97:	mov    rax,QWORD PTR [rbx]
    6500ea9a:	mov    QWORD PTR [r9],rax
    6500ea9d:	cmp    r9,QWORD PTR [rbx+0x10]
    6500eaa1:	jne    0x6500eaa8
    6500eaa3:	mov    rdx,r9
    6500eaa6:	jmp    0x6500eaca
    6500eaa8:	mov    rdx,QWORD PTR [r9+0x8]
    6500eaac:	cmp    BYTE PTR [r8+0x41],0x0
    6500eab1:	jne    0x6500eab7
    6500eab3:	mov    QWORD PTR [r8+0x8],rdx
    6500eab7:	mov    QWORD PTR [rdx],r8
    6500eaba:	mov    rax,QWORD PTR [rbx+0x10]
    6500eabe:	mov    QWORD PTR [r9+0x10],rax
    6500eac2:	mov    rax,QWORD PTR [rbx+0x10]
    6500eac6:	mov    QWORD PTR [rax+0x8],r9
    6500eaca:	mov    rax,QWORD PTR [rdi+0x8]
    6500eace:	cmp    QWORD PTR [rax+0x8],rbx
    6500ead2:	jne    0x6500eada
    6500ead4:	mov    QWORD PTR [rax+0x8],r9
    6500ead8:	jmp    0x6500eaec
    6500eada:	mov    rax,QWORD PTR [rbx+0x8]
    6500eade:	cmp    QWORD PTR [rax],rbx
    6500eae1:	jne    0x6500eae8
    6500eae3:	mov    QWORD PTR [rax],r9
    6500eae6:	jmp    0x6500eaec
    6500eae8:	mov    QWORD PTR [rax+0x10],r9
    6500eaec:	mov    rax,QWORD PTR [rbx+0x8]
    6500eaf0:	mov    QWORD PTR [r9+0x8],rax
    6500eaf4:	movzx  ecx,BYTE PTR [r9+0x40]
    6500eaf9:	movzx  eax,BYTE PTR [rbx+0x40]
    6500eafd:	mov    BYTE PTR [r9+0x40],al
    6500eb01:	mov    BYTE PTR [rbx+0x40],cl
    6500eb04:	cmp    BYTE PTR [rbx+0x40],0x1
    6500eb08:	jne    0x6500edf3
    6500eb0e:	mov    rax,QWORD PTR [rdi+0x8]
    6500eb12:	cmp    r8,QWORD PTR [rax+0x8]
    6500eb16:	je     0x6500edee
    6500eb1c:	data16 data16 xchg ax,ax
    6500eb20:	cmp    BYTE PTR [r8+0x40],0x1
    6500eb25:	jne    0x6500edee
    6500eb2b:	mov    rcx,QWORD PTR [rdx]
    6500eb2e:	cmp    r8,rcx
    6500eb31:	jne    0x6500ebcb
    6500eb37:	mov    rcx,QWORD PTR [rdx+0x10]
    6500eb3b:	cmp    BYTE PTR [rcx+0x40],0x0
    6500eb3f:	jne    0x6500eb96
    6500eb41:	mov    BYTE PTR [rcx+0x40],0x1
    6500eb45:	mov    BYTE PTR [rdx+0x40],0x0
    6500eb49:	mov    rcx,QWORD PTR [rdx+0x10]
    6500eb4d:	mov    rax,QWORD PTR [rcx]
    6500eb50:	mov    QWORD PTR [rdx+0x10],rax
    6500eb54:	mov    rax,QWORD PTR [rcx]
    6500eb57:	cmp    BYTE PTR [rax+0x41],0x0
    6500eb5b:	jne    0x6500eb61
    6500eb5d:	mov    QWORD PTR [rax+0x8],rdx
    6500eb61:	mov    rax,QWORD PTR [rdx+0x8]
    6500eb65:	mov    QWORD PTR [rcx+0x8],rax
    6500eb69:	mov    rax,QWORD PTR [rdi+0x8]
    6500eb6d:	cmp    rdx,QWORD PTR [rax+0x8]
    6500eb71:	jne    0x6500eb79
    6500eb73:	mov    QWORD PTR [rax+0x8],rcx
    6500eb77:	jmp    0x6500eb8b
    6500eb79:	mov    rax,QWORD PTR [rdx+0x8]
    6500eb7d:	cmp    rdx,QWORD PTR [rax]
    6500eb80:	jne    0x6500eb87
    6500eb82:	mov    QWORD PTR [rax],rcx
    6500eb85:	jmp    0x6500eb8b
    6500eb87:	mov    QWORD PTR [rax+0x10],rcx
    6500eb8b:	mov    QWORD PTR [rcx],rdx
    6500eb8e:	mov    QWORD PTR [rdx+0x8],rcx
    6500eb92:	mov    rcx,QWORD PTR [rdx+0x10]
    6500eb96:	cmp    BYTE PTR [rcx+0x41],0x0
    6500eb9a:	je     0x6500eba4
    6500eb9c:	mov    r8,rdx
    6500eb9f:	jmp    0x6500ec54
    6500eba4:	mov    rax,QWORD PTR [rcx]
    6500eba7:	cmp    BYTE PTR [rax+0x40],0x1
    6500ebab:	jne    0x6500ec6b
    6500ebb1:	mov    rax,QWORD PTR [rcx+0x10]
    6500ebb5:	cmp    BYTE PTR [rax+0x40],0x1
    6500ebb9:	jne    0x6500ec6b
    6500ebbf:	mov    BYTE PTR [rcx+0x40],0x0
    6500ebc3:	mov    r8,rdx
    6500ebc6:	jmp    0x6500ec54
    6500ebcb:	cmp    BYTE PTR [rcx+0x40],0x0
    6500ebcf:	jne    0x6500ec27
    6500ebd1:	mov    BYTE PTR [rcx+0x40],0x1
    6500ebd5:	mov    BYTE PTR [rdx+0x40],0x0
    6500ebd9:	mov    rcx,QWORD PTR [rdx]
    6500ebdc:	mov    rax,QWORD PTR [rcx+0x10]
    6500ebe0:	mov    QWORD PTR [rdx],rax
    6500ebe3:	mov    rax,QWORD PTR [rcx+0x10]
    6500ebe7:	cmp    BYTE PTR [rax+0x41],0x0
    6500ebeb:	jne    0x6500ebf1
    6500ebed:	mov    QWORD PTR [rax+0x8],rdx
    6500ebf1:	mov    rax,QWORD PTR [rdx+0x8]
    6500ebf5:	mov    QWORD PTR [rcx+0x8],rax
    6500ebf9:	mov    rax,QWORD PTR [rdi+0x8]
    6500ebfd:	cmp    rdx,QWORD PTR [rax+0x8]
    6500ec01:	jne    0x6500ec09
    6500ec03:	mov    QWORD PTR [rax+0x8],rcx
    6500ec07:	jmp    0x6500ec1c
    6500ec09:	mov    rax,QWORD PTR [rdx+0x8]
    6500ec0d:	cmp    rdx,QWORD PTR [rax+0x10]
    6500ec11:	jne    0x6500ec19
    6500ec13:	mov    QWORD PTR [rax+0x10],rcx
    6500ec17:	jmp    0x6500ec1c
    6500ec19:	mov    QWORD PTR [rax],rcx
    6500ec1c:	mov    QWORD PTR [rcx+0x10],rdx
    6500ec20:	mov    QWORD PTR [rdx+0x8],rcx
    6500ec24:	mov    rcx,QWORD PTR [rdx]
    6500ec27:	cmp    BYTE PTR [rcx+0x41],0x0
    6500ec2b:	je     0x6500ec32
    6500ec2d:	mov    r8,rdx
    6500ec30:	jmp    0x6500ec54
    6500ec32:	mov    rax,QWORD PTR [rcx+0x10]
    6500ec36:	cmp    BYTE PTR [rax+0x40],0x1
    6500ec3a:	jne    0x6500ed30
    6500ec40:	mov    rax,QWORD PTR [rcx]
    6500ec43:	cmp    BYTE PTR [rax+0x40],0x1
    6500ec47:	jne    0x6500ed30
    6500ec4d:	mov    BYTE PTR [rcx+0x40],0x0
    6500ec51:	mov    r8,rdx
    6500ec54:	mov    rdx,QWORD PTR [rdx+0x8]
    6500ec58:	mov    rax,QWORD PTR [rdi+0x8]
    6500ec5c:	cmp    r8,QWORD PTR [rax+0x8]
    6500ec60:	je     0x6500edee
    6500ec66:	jmp    0x6500eb20
    6500ec6b:	mov    rax,QWORD PTR [rcx+0x10]
    6500ec6f:	cmp    BYTE PTR [rax+0x40],0x1
    6500ec73:	jne    0x6500eccf
    6500ec75:	mov    rax,QWORD PTR [rcx]
    6500ec78:	mov    BYTE PTR [rax+0x40],0x1
    6500ec7c:	mov    BYTE PTR [rcx+0x40],0x0
    6500ec80:	mov    r9,QWORD PTR [rcx]
    6500ec83:	mov    rax,QWORD PTR [r9+0x10]
    6500ec87:	mov    QWORD PTR [rcx],rax
    6500ec8a:	mov    rax,QWORD PTR [r9+0x10]
    6500ec8e:	cmp    BYTE PTR [rax+0x41],0x0
    6500ec92:	jne    0x6500ec98
    6500ec94:	mov    QWORD PTR [rax+0x8],rcx
    6500ec98:	mov    rax,QWORD PTR [rcx+0x8]
    6500ec9c:	mov    QWORD PTR [r9+0x8],rax
    6500eca0:	mov    rax,QWORD PTR [rdi+0x8]
    6500eca4:	cmp    rcx,QWORD PTR [rax+0x8]
    6500eca8:	jne    0x6500ecb0
    6500ecaa:	mov    QWORD PTR [rax+0x8],r9
    6500ecae:	jmp    0x6500ecc3
    6500ecb0:	mov    rax,QWORD PTR [rcx+0x8]
    6500ecb4:	cmp    rcx,QWORD PTR [rax+0x10]
    6500ecb8:	jne    0x6500ecc0
    6500ecba:	mov    QWORD PTR [rax+0x10],r9
    6500ecbe:	jmp    0x6500ecc3
    6500ecc0:	mov    QWORD PTR [rax],r9
    6500ecc3:	mov    QWORD PTR [r9+0x10],rcx
    6500ecc7:	mov    QWORD PTR [rcx+0x8],r9
    6500eccb:	mov    rcx,QWORD PTR [rdx+0x10]
    6500eccf:	movzx  eax,BYTE PTR [rdx+0x40]
    6500ecd3:	mov    BYTE PTR [rcx+0x40],al
    6500ecd6:	mov    BYTE PTR [rdx+0x40],0x1
    6500ecda:	mov    rax,QWORD PTR [rcx+0x10]
    6500ecde:	mov    BYTE PTR [rax+0x40],0x1
    6500ece2:	mov    rcx,QWORD PTR [rdx+0x10]
    6500ece6:	mov    rax,QWORD PTR [rcx]
    6500ece9:	mov    QWORD PTR [rdx+0x10],rax
    6500eced:	mov    rax,QWORD PTR [rcx]
    6500ecf0:	cmp    BYTE PTR [rax+0x41],0x0
    6500ecf4:	jne    0x6500ecfa
    6500ecf6:	mov    QWORD PTR [rax+0x8],rdx
    6500ecfa:	mov    rax,QWORD PTR [rdx+0x8]
    6500ecfe:	mov    QWORD PTR [rcx+0x8],rax
    6500ed02:	mov    rax,QWORD PTR [rdi+0x8]
    6500ed06:	cmp    rdx,QWORD PTR [rax+0x8]
    6500ed0a:	jne    0x6500ed12
    6500ed0c:	mov    QWORD PTR [rax+0x8],rcx
    6500ed10:	jmp    0x6500ed24
    6500ed12:	mov    rax,QWORD PTR [rdx+0x8]
    6500ed16:	cmp    rdx,QWORD PTR [rax]
    6500ed19:	jne    0x6500ed20
    6500ed1b:	mov    QWORD PTR [rax],rcx
    6500ed1e:	jmp    0x6500ed24
    6500ed20:	mov    QWORD PTR [rax+0x10],rcx
    6500ed24:	mov    QWORD PTR [rcx],rdx
    6500ed27:	mov    QWORD PTR [rdx+0x8],rcx
    6500ed2b:	jmp    0x6500edee
    6500ed30:	mov    rax,QWORD PTR [rcx]
    6500ed33:	cmp    BYTE PTR [rax+0x40],0x1
    6500ed37:	jne    0x6500ed91
    6500ed39:	mov    rax,QWORD PTR [rcx+0x10]
    6500ed3d:	mov    BYTE PTR [rax+0x40],0x1
    6500ed41:	mov    BYTE PTR [rcx+0x40],0x0
    6500ed45:	mov    r9,QWORD PTR [rcx+0x10]
    6500ed49:	mov    rax,QWORD PTR [r9]
    6500ed4c:	mov    QWORD PTR [rcx+0x10],rax
    6500ed50:	mov    rax,QWORD PTR [r9]
    6500ed53:	cmp    BYTE PTR [rax+0x41],0x0
    6500ed57:	jne    0x6500ed5d
    6500ed59:	mov    QWORD PTR [rax+0x8],rcx
    6500ed5d:	mov    rax,QWORD PTR [rcx+0x8]
    6500ed61:	mov    QWORD PTR [r9+0x8],rax
    6500ed65:	mov    rax,QWORD PTR [rdi+0x8]
    6500ed69:	cmp    rcx,QWORD PTR [rax+0x8]
    6500ed6d:	jne    0x6500ed75
    6500ed6f:	mov    QWORD PTR [rax+0x8],r9
    6500ed73:	jmp    0x6500ed87
    6500ed75:	mov    rax,QWORD PTR [rcx+0x8]
    6500ed79:	cmp    rcx,QWORD PTR [rax]
    6500ed7c:	jne    0x6500ed83
    6500ed7e:	mov    QWORD PTR [rax],r9
    6500ed81:	jmp    0x6500ed87
    6500ed83:	mov    QWORD PTR [rax+0x10],r9
    6500ed87:	mov    QWORD PTR [r9],rcx
    6500ed8a:	mov    QWORD PTR [rcx+0x8],r9
    6500ed8e:	mov    rcx,QWORD PTR [rdx]
    6500ed91:	movzx  eax,BYTE PTR [rdx+0x40]
    6500ed95:	mov    BYTE PTR [rcx+0x40],al
    6500ed98:	mov    BYTE PTR [rdx+0x40],0x1
    6500ed9c:	mov    rax,QWORD PTR [rcx]
    6500ed9f:	mov    BYTE PTR [rax+0x40],0x1
    6500eda3:	mov    rcx,QWORD PTR [rdx]
    6500eda6:	mov    rax,QWORD PTR [rcx+0x10]
    6500edaa:	mov    QWORD PTR [rdx],rax
    6500edad:	mov    rax,QWORD PTR [rcx+0x10]
    6500edb1:	cmp    BYTE PTR [rax+0x41],0x0
    6500edb5:	jne    0x6500edbb
    6500edb7:	mov    QWORD PTR [rax+0x8],rdx
    6500edbb:	mov    rax,QWORD PTR [rdx+0x8]
    6500edbf:	mov    QWORD PTR [rcx+0x8],rax
    6500edc3:	mov    rax,QWORD PTR [rdi+0x8]
    6500edc7:	cmp    rdx,QWORD PTR [rax+0x8]
    6500edcb:	jne    0x6500edd3
    6500edcd:	mov    QWORD PTR [rax+0x8],rcx
    6500edd1:	jmp    0x6500ede6
    6500edd3:	mov    rax,QWORD PTR [rdx+0x8]
    6500edd7:	cmp    rdx,QWORD PTR [rax+0x10]
    6500eddb:	jne    0x6500ede3
    6500eddd:	mov    QWORD PTR [rax+0x10],rcx
    6500ede1:	jmp    0x6500ede6
    6500ede3:	mov    QWORD PTR [rax],rcx
    6500ede6:	mov    QWORD PTR [rcx+0x10],rdx
    6500edea:	mov    QWORD PTR [rdx+0x8],rcx
    6500edee:	mov    BYTE PTR [r8+0x40],0x1
    6500edf3:	cmp    QWORD PTR [rbx+0x38],0x10
    6500edf8:	jb     0x6500ee03
    6500edfa:	mov    rcx,QWORD PTR [rbx+0x20]
    6500edfe:	call   0x6501d190
    6500ee03:	mov    QWORD PTR [rbx+0x38],0xf
    6500ee0b:	mov    QWORD PTR [rbx+0x30],0x0
    6500ee13:	mov    BYTE PTR [rbx+0x20],0x0
    6500ee17:	mov    rcx,rbx
    6500ee1a:	call   0x6501d190
    6500ee1f:	mov    rax,QWORD PTR [rdi+0x10]
    6500ee23:	test   rax,rax
    6500ee26:	je     0x6500ee30
    6500ee28:	add    rax,0xffffffffffffffff
    6500ee2c:	mov    QWORD PTR [rdi+0x10],rax
    6500ee30:	mov    rax,QWORD PTR [rsi]
    6500ee33:	mov    QWORD PTR [r12],rax
    6500ee37:	mov    rax,QWORD PTR [rsi+0x8]
    6500ee3b:	mov    QWORD PTR [r12+0x8],rax
    6500ee40:	mov    rax,r12
    6500ee43:	lea    r11,[rsp+0x90]
    6500ee4b:	mov    rbx,QWORD PTR [r11+0x10]
    6500ee4f:	mov    rsi,QWORD PTR [r11+0x18]
    6500ee53:	mov    rdi,QWORD PTR [r11+0x20]
    6500ee57:	mov    rsp,r11
    6500ee5a:	pop    r12
    6500ee5c:	ret    
    6500ee5d:	int3   
    6500ee5e:	int3   
    6500ee5f:	int3   
    6500ee60:	rex push rbp
    6500ee62:	sub    rsp,0x20
    6500ee66:	mov    rbp,rdx
    6500ee69:	lea    rcx,[rbp+0x28]
    6500ee6d:	call   0x65001c70
    6500ee72:	add    rsp,0x20
    6500ee76:	pop    rbp
    6500ee77:	ret    
    6500ee78:	int3   
    6500ee79:	int3   
    6500ee7a:	int3   
    6500ee7b:	int3   
    6500ee7c:	int3   
    6500ee7d:	int3   
    6500ee7e:	int3   
    6500ee7f:	int3   
    6500ee80:	rex push rbp
    6500ee82:	sub    rsp,0x20
    6500ee86:	mov    rbp,rdx
    6500ee89:	lea    rcx,[rbp+0x50]
    6500ee8d:	call   0x6501d320
    6500ee92:	add    rsp,0x20
    6500ee96:	pop    rbp
    6500ee97:	ret    
    6500ee98:	int3   
    6500ee99:	int3   
    6500ee9a:	int3   
    6500ee9b:	int3   
    6500ee9c:	int3   
    6500ee9d:	int3   
    6500ee9e:	int3   
    6500ee9f:	int3   
    6500eea0:	mov    QWORD PTR [rsp+0x8],rcx
    6500eea5:	push   rbx
    6500eea6:	push   rsi
    6500eea7:	push   rdi
    6500eea8:	sub    rsp,0x40
    6500eeac:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500eeb5:	mov    rsi,rdx
    6500eeb8:	mov    rbx,rcx
    6500eebb:	mov    rax,QWORD PTR [rcx+0x8]
    6500eebf:	mov    QWORD PTR [rsp+0x68],rax
    6500eec4:	cmp    BYTE PTR [rdx+0x41],0x0
    6500eec8:	jne    0x6500ef29
    6500eeca:	mov    rdx,rax
    6500eecd:	lea    r9,[rsi+0x18]
    6500eed1:	movzx  eax,BYTE PTR [rsi+0x40]
    6500eed5:	mov    BYTE PTR [rsp+0x28],al
    6500eed9:	mov    QWORD PTR [rsp+0x20],r9
    6500eede:	mov    r9,rdx
    6500eee1:	call   0x6500eff0
    6500eee6:	mov    rdi,rax
    6500eee9:	mov    rax,QWORD PTR [rsp+0x68]
    6500eeee:	cmp    BYTE PTR [rax+0x41],0x0
    6500eef2:	cmovne rax,rdi
    6500eef6:	mov    QWORD PTR [rsp+0x68],rax
    6500eefb:	mov    QWORD PTR [rsp+0x78],rax
    6500ef00:	mov    r8,rdi
    6500ef03:	mov    rdx,QWORD PTR [rsi]
    6500ef06:	mov    rcx,rbx
    6500ef09:	call   0x6500eea0
    6500ef0e:	mov    QWORD PTR [rdi],rax
    6500ef11:	mov    r8,rdi
    6500ef14:	mov    rdx,QWORD PTR [rsi+0x10]
    6500ef18:	mov    rcx,rbx
    6500ef1b:	call   0x6500eea0
    6500ef20:	mov    QWORD PTR [rdi+0x10],rax
    6500ef24:	mov    rax,QWORD PTR [rsp+0x68]
    6500ef29:	add    rsp,0x40
    6500ef2d:	pop    rdi
    6500ef2e:	pop    rsi
    6500ef2f:	pop    rbx
    6500ef30:	ret    
    6500ef31:	int3   
    6500ef32:	int3   
    6500ef33:	int3   
    6500ef34:	int3   
    6500ef35:	int3   
    6500ef36:	int3   
    6500ef37:	int3   
    6500ef38:	int3   
    6500ef39:	int3   
    6500ef3a:	int3   
    6500ef3b:	int3   
    6500ef3c:	int3   
    6500ef3d:	int3   
    6500ef3e:	int3   
    6500ef3f:	int3   
    6500ef40:	mov    QWORD PTR [rsp+0x10],rdx
    6500ef45:	push   rbp
    6500ef46:	sub    rsp,0x30
    6500ef4a:	mov    rbp,rdx
    6500ef4d:	mov    rdx,QWORD PTR [rbp+0x78]
    6500ef51:	mov    rcx,QWORD PTR [rbp+0x60]
    6500ef55:	call   0x6500fac0
    6500ef5a:	xor    edx,edx
    6500ef5c:	xor    ecx,ecx
    6500ef5e:	call   0x6501daf0
    6500ef63:	nop
    6500ef64:	add    rsp,0x30
    6500ef68:	pop    rbp
    6500ef69:	ret    
    6500ef6a:	int3   
    6500ef6b:	int3   
    6500ef6c:	int3   
    6500ef6d:	int3   
    6500ef6e:	int3   
    6500ef6f:	int3   
    6500ef70:	sub    rsp,0x38
    6500ef74:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500ef7d:	mov    ecx,0x48
    6500ef82:	call   0x6501da50
    6500ef87:	mov    QWORD PTR [rsp+0x48],rax
    6500ef8c:	test   rax,rax
    6500ef8f:	je     0x6500ef98
    6500ef91:	xor    ecx,ecx
    6500ef93:	mov    QWORD PTR [rax],rcx
    6500ef96:	jmp    0x6500ef9a
    6500ef98:	xor    ecx,ecx
    6500ef9a:	lea    rdx,[rax+0x8]
    6500ef9e:	test   rdx,rdx
    6500efa1:	je     0x6500efa6
    6500efa3:	mov    QWORD PTR [rdx],rcx
    6500efa6:	lea    rdx,[rax+0x10]
    6500efaa:	test   rdx,rdx
    6500efad:	je     0x6500efb2
    6500efaf:	mov    QWORD PTR [rdx],rcx
    6500efb2:	mov    BYTE PTR [rax+0x40],0x1
    6500efb6:	mov    BYTE PTR [rax+0x41],0x0
    6500efba:	add    rsp,0x38
    6500efbe:	ret    
    6500efbf:	int3   
    6500efc0:	mov    QWORD PTR [rsp+0x10],rdx
    6500efc5:	push   rbp
    6500efc6:	sub    rsp,0x20
    6500efca:	mov    rbp,rdx
    6500efcd:	mov    rcx,QWORD PTR [rbp+0x48]
    6500efd1:	call   0x6501d190
    6500efd6:	xor    edx,edx
    6500efd8:	xor    ecx,ecx
    6500efda:	call   0x6501daf0
    6500efdf:	nop
    6500efe0:	add    rsp,0x20
    6500efe4:	pop    rbp
    6500efe5:	ret    
    6500efe6:	int3   
    6500efe7:	int3   
    6500efe8:	int3   
    6500efe9:	int3   
    6500efea:	int3   
    6500efeb:	int3   
    6500efec:	int3   
    6500efed:	int3   
    6500efee:	int3   
    6500efef:	int3   
    6500eff0:	push   r12
    6500eff2:	sub    rsp,0x40
    6500eff6:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500efff:	mov    QWORD PTR [rsp+0x50],rbx
    6500f004:	mov    QWORD PTR [rsp+0x58],rsi
    6500f009:	mov    QWORD PTR [rsp+0x60],rdi
    6500f00e:	mov    rdi,r9
    6500f011:	mov    rsi,r8
    6500f014:	mov    r12,rdx
    6500f017:	mov    ecx,0x48
    6500f01c:	call   0x6501da50
    6500f021:	mov    rbx,rax
    6500f024:	mov    QWORD PTR [rsp+0x20],rax
    6500f029:	mov    QWORD PTR [rsp+0x30],rax
    6500f02e:	test   rax,rax
    6500f031:	je     0x6500f073
    6500f033:	mov    QWORD PTR [rax],r12
    6500f036:	mov    QWORD PTR [rax+0x8],rsi
    6500f03a:	mov    QWORD PTR [rax+0x10],rdi
    6500f03e:	lea    rcx,[rax+0x18]
    6500f042:	mov    QWORD PTR [rcx+0x20],0xf
    6500f04a:	mov    QWORD PTR [rcx+0x18],0x0
    6500f052:	mov    BYTE PTR [rcx+0x8],0x0
    6500f056:	or     r9,0xffffffffffffffff
    6500f05a:	xor    r8d,r8d
    6500f05d:	mov    rdx,QWORD PTR [rsp+0x70]
    6500f062:	call   0x65001e20
    6500f067:	movzx  eax,BYTE PTR [rsp+0x78]
    6500f06c:	mov    BYTE PTR [rbx+0x40],al
    6500f06f:	mov    BYTE PTR [rbx+0x41],0x0
    6500f073:	mov    rax,rbx
    6500f076:	mov    rbx,QWORD PTR [rsp+0x50]
    6500f07b:	mov    rsi,QWORD PTR [rsp+0x58]
    6500f080:	mov    rdi,QWORD PTR [rsp+0x60]
    6500f085:	add    rsp,0x40
    6500f089:	pop    r12
    6500f08b:	ret    
    6500f08c:	int3   
    6500f08d:	int3   
    6500f08e:	int3   
    6500f08f:	int3   
    6500f090:	rex push rbp
    6500f092:	sub    rsp,0x20
    6500f096:	mov    rbp,rdx
    6500f099:	mov    rdx,QWORD PTR [rbp+0x20]
    6500f09d:	mov    rcx,QWORD PTR [rbp+0x30]
    6500f0a1:	call   0x65004190
    6500f0a6:	add    rsp,0x20
    6500f0aa:	pop    rbp
    6500f0ab:	ret    
    6500f0ac:	int3   
    6500f0ad:	int3   
    6500f0ae:	int3   
    6500f0af:	int3   
    6500f0b0:	mov    QWORD PTR [rsp+0x10],rdx
    6500f0b5:	push   rbp
    6500f0b6:	sub    rsp,0x20
    6500f0ba:	mov    rbp,rdx
    6500f0bd:	mov    rcx,QWORD PTR [rbp+0x20]
    6500f0c1:	call   0x6501d190
    6500f0c6:	xor    edx,edx
    6500f0c8:	xor    ecx,ecx
    6500f0ca:	call   0x6501daf0
    6500f0cf:	nop
    6500f0d0:	add    rsp,0x20
    6500f0d4:	pop    rbp
    6500f0d5:	ret    
    6500f0d6:	int3   
    6500f0d7:	int3   
    6500f0d8:	int3   
    6500f0d9:	int3   
    6500f0da:	int3   
    6500f0db:	int3   
    6500f0dc:	int3   
    6500f0dd:	int3   
    6500f0de:	int3   
    6500f0df:	int3   
    6500f0e0:	mov    r11,rsp
    6500f0e3:	push   rdi
    6500f0e4:	sub    rsp,0xa0
    6500f0eb:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500f0f4:	mov    QWORD PTR [r11+0x8],rbx
    6500f0f8:	mov    QWORD PTR [r11+0x10],rbp
    6500f0fc:	mov    QWORD PTR [r11+0x18],rsi
    6500f100:	mov    rdi,r9
    6500f103:	movzx  esi,r8b
    6500f107:	mov    rbp,rdx
    6500f10a:	mov    rbx,rcx
    6500f10d:	movabs rax,0x333333333333332
    6500f117:	cmp    QWORD PTR [rcx+0x10],rax
    6500f11b:	jb     0x6500f1ea
    6500f121:	mov    QWORD PTR [r11-0x50],0xf
    6500f129:	xor    ebx,ebx
    6500f12b:	mov    QWORD PTR [r11-0x58],rbx
    6500f12f:	mov    BYTE PTR [rsp+0x40],bl
    6500f133:	xor    r8d,r8d
    6500f136:	lea    edx,[rbx+0x13]
    6500f139:	lea    rcx,[r11-0x70]
    6500f13d:	call   0x65002330
    6500f142:	lea    rcx,[rsp+0x40]
    6500f147:	mov    rdx,QWORD PTR [rsp+0x58]
    6500f14c:	cmp    rdx,0x10
    6500f150:	cmovae rcx,QWORD PTR [rsp+0x40]
    6500f156:	lea    r9d,[rbx+0x13]
    6500f15a:	lea    r8,[rip+0x29adf]        # 0x65038c40
    6500f161:	call   0x6501d640
    6500f166:	mov    QWORD PTR [rsp+0x50],0x13
    6500f16f:	lea    rax,[rsp+0x40]
    6500f174:	cmp    QWORD PTR [rsp+0x58],0x10
    6500f17a:	cmovae rax,QWORD PTR [rsp+0x40]
    6500f180:	mov    BYTE PTR [rax+0x13],bl
    6500f183:	lea    rcx,[rsp+0x60]
    6500f188:	call   0x6501d1a0
    6500f18d:	nop
    6500f18e:	lea    rax,[rip+0x25f8b]        # 0x65035120
    6500f195:	mov    QWORD PTR [rsp+0x60],rax
    6500f19a:	mov    QWORD PTR [rsp+0x98],0xf
    6500f1a6:	mov    QWORD PTR [rsp+0x90],rbx
    6500f1ae:	mov    BYTE PTR [rsp+0x80],bl
    6500f1b5:	or     r9,0xffffffffffffffff
    6500f1b9:	xor    r8d,r8d
    6500f1bc:	lea    rdx,[rsp+0x38]
    6500f1c1:	lea    rcx,[rsp+0x78]
    6500f1c6:	call   0x65001e20
    6500f1cb:	nop
    6500f1cc:	lea    rax,[rip+0x25f65]        # 0x65035138
    6500f1d3:	mov    QWORD PTR [rsp+0x60],rax
    6500f1d8:	lea    rdx,[rip+0x320b9]        # 0x65041298
    6500f1df:	lea    rcx,[rsp+0x60]
    6500f1e4:	call   0x6501daf0
    6500f1e9:	nop
    6500f1ea:	mov    rdx,QWORD PTR [rcx+0x8]
    6500f1ee:	mov    BYTE PTR [rsp+0x28],0x0
    6500f1f3:	mov    rax,QWORD PTR [rsp+0xd0]
    6500f1fb:	mov    QWORD PTR [rsp+0x20],rax
    6500f200:	mov    r9,rdx
    6500f203:	mov    r8,rdi
    6500f206:	call   0x6500fb50
    6500f20b:	mov    r11,rax
    6500f20e:	add    QWORD PTR [rbx+0x10],0x1
    6500f213:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f217:	cmp    rdi,rcx
    6500f21a:	jne    0x6500f231
    6500f21c:	mov    QWORD PTR [rcx+0x8],rax
    6500f220:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f224:	mov    QWORD PTR [rcx],rax
    6500f227:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f22b:	mov    QWORD PTR [rcx+0x10],rax
    6500f22f:	jmp    0x6500f259
    6500f231:	test   sil,sil
    6500f234:	je     0x6500f247
    6500f236:	mov    QWORD PTR [rdi],rax
    6500f239:	mov    rax,QWORD PTR [rbx+0x8]
    6500f23d:	cmp    rdi,QWORD PTR [rax]
    6500f240:	jne    0x6500f259
    6500f242:	mov    QWORD PTR [rax],r11
    6500f245:	jmp    0x6500f259
    6500f247:	mov    QWORD PTR [rdi+0x10],rax
    6500f24b:	mov    rax,QWORD PTR [rbx+0x8]
    6500f24f:	cmp    rdi,QWORD PTR [rax+0x10]
    6500f253:	jne    0x6500f259
    6500f255:	mov    QWORD PTR [rax+0x10],r11
    6500f259:	mov    r8,r11
    6500f25c:	lea    rdx,[r11+0x8]
    6500f260:	mov    rax,QWORD PTR [rdx]
    6500f263:	cmp    BYTE PTR [rax+0x68],0x0
    6500f267:	jne    0x6500f458
    6500f26d:	data16 xchg ax,ax
    6500f270:	mov    rax,QWORD PTR [rdx]
    6500f273:	mov    rcx,QWORD PTR [rax+0x8]
    6500f277:	cmp    rax,QWORD PTR [rcx]
    6500f27a:	jne    0x6500f367
    6500f280:	mov    r9,QWORD PTR [rcx+0x10]
    6500f284:	cmp    BYTE PTR [r9+0x68],0x0
    6500f289:	jne    0x6500f2ab
    6500f28b:	mov    BYTE PTR [rax+0x68],0x1
    6500f28f:	mov    BYTE PTR [r9+0x68],0x1
    6500f294:	mov    rax,QWORD PTR [rdx]
    6500f297:	mov    rcx,QWORD PTR [rax+0x8]
    6500f29b:	mov    BYTE PTR [rcx+0x68],0x0
    6500f29f:	mov    rax,QWORD PTR [rdx]
    6500f2a2:	mov    r8,QWORD PTR [rax+0x8]
    6500f2a6:	jmp    0x6500f447
    6500f2ab:	cmp    r8,QWORD PTR [rax+0x10]
    6500f2af:	jne    0x6500f2fe
    6500f2b1:	mov    r8,rax
    6500f2b4:	mov    rcx,QWORD PTR [rax+0x10]
    6500f2b8:	mov    rax,QWORD PTR [rcx]
    6500f2bb:	mov    QWORD PTR [r8+0x10],rax
    6500f2bf:	mov    rax,QWORD PTR [rcx]
    6500f2c2:	cmp    BYTE PTR [rax+0x69],0x0
    6500f2c6:	jne    0x6500f2cc
    6500f2c8:	mov    QWORD PTR [rax+0x8],r8
    6500f2cc:	lea    rdx,[r8+0x8]
    6500f2d0:	mov    rax,QWORD PTR [rdx]
    6500f2d3:	mov    QWORD PTR [rcx+0x8],rax
    6500f2d7:	mov    rax,QWORD PTR [rbx+0x8]
    6500f2db:	cmp    r8,QWORD PTR [rax+0x8]
    6500f2df:	jne    0x6500f2e7
    6500f2e1:	mov    QWORD PTR [rax+0x8],rcx
    6500f2e5:	jmp    0x6500f2f8
    6500f2e7:	mov    rax,QWORD PTR [rdx]
    6500f2ea:	cmp    r8,QWORD PTR [rax]
    6500f2ed:	jne    0x6500f2f4
    6500f2ef:	mov    QWORD PTR [rax],rcx
    6500f2f2:	jmp    0x6500f2f8
    6500f2f4:	mov    QWORD PTR [rax+0x10],rcx
    6500f2f8:	mov    QWORD PTR [rcx],r8
    6500f2fb:	mov    QWORD PTR [rdx],rcx
    6500f2fe:	mov    rax,QWORD PTR [rdx]
    6500f301:	mov    BYTE PTR [rax+0x68],0x1
    6500f305:	mov    rax,QWORD PTR [rdx]
    6500f308:	mov    rcx,QWORD PTR [rax+0x8]
    6500f30c:	mov    BYTE PTR [rcx+0x68],0x0
    6500f310:	mov    rax,QWORD PTR [rdx]
    6500f313:	mov    rcx,QWORD PTR [rax+0x8]
    6500f317:	mov    rdx,QWORD PTR [rcx]
    6500f31a:	mov    rax,QWORD PTR [rdx+0x10]
    6500f31e:	mov    QWORD PTR [rcx],rax
    6500f321:	mov    rax,QWORD PTR [rdx+0x10]
    6500f325:	cmp    BYTE PTR [rax+0x69],0x0
    6500f329:	jne    0x6500f32f
    6500f32b:	mov    QWORD PTR [rax+0x8],rcx
    6500f32f:	mov    rax,QWORD PTR [rcx+0x8]
    6500f333:	mov    QWORD PTR [rdx+0x8],rax
    6500f337:	mov    rax,QWORD PTR [rbx+0x8]
    6500f33b:	cmp    rcx,QWORD PTR [rax+0x8]
    6500f33f:	jne    0x6500f347
    6500f341:	mov    QWORD PTR [rax+0x8],rdx
    6500f345:	jmp    0x6500f35a
    6500f347:	mov    rax,QWORD PTR [rcx+0x8]
    6500f34b:	cmp    rcx,QWORD PTR [rax+0x10]
    6500f34f:	jne    0x6500f357
    6500f351:	mov    QWORD PTR [rax+0x10],rdx
    6500f355:	jmp    0x6500f35a
    6500f357:	mov    QWORD PTR [rax],rdx
    6500f35a:	mov    QWORD PTR [rdx+0x10],rcx
    6500f35e:	mov    QWORD PTR [rcx+0x8],rdx
    6500f362:	jmp    0x6500f447
    6500f367:	mov    r9,QWORD PTR [rcx]
    6500f36a:	cmp    BYTE PTR [r9+0x68],0x0
    6500f36f:	jne    0x6500f391
    6500f371:	mov    BYTE PTR [rax+0x68],0x1
    6500f375:	mov    BYTE PTR [r9+0x68],0x1
    6500f37a:	mov    rax,QWORD PTR [rdx]
    6500f37d:	mov    rcx,QWORD PTR [rax+0x8]
    6500f381:	mov    BYTE PTR [rcx+0x68],0x0
    6500f385:	mov    rax,QWORD PTR [rdx]
    6500f388:	mov    r8,QWORD PTR [rax+0x8]
    6500f38c:	jmp    0x6500f447
    6500f391:	cmp    r8,QWORD PTR [rax]
    6500f394:	jne    0x6500f3e5
    6500f396:	mov    r8,rax
    6500f399:	mov    rcx,QWORD PTR [rax]
    6500f39c:	mov    rax,QWORD PTR [rcx+0x10]
    6500f3a0:	mov    QWORD PTR [r8],rax
    6500f3a3:	mov    rax,QWORD PTR [rcx+0x10]
    6500f3a7:	cmp    BYTE PTR [rax+0x69],0x0
    6500f3ab:	jne    0x6500f3b1
    6500f3ad:	mov    QWORD PTR [rax+0x8],r8
    6500f3b1:	lea    rdx,[r8+0x8]
    6500f3b5:	mov    rax,QWORD PTR [rdx]
    6500f3b8:	mov    QWORD PTR [rcx+0x8],rax
    6500f3bc:	mov    rax,QWORD PTR [rbx+0x8]
    6500f3c0:	cmp    r8,QWORD PTR [rax+0x8]
    6500f3c4:	jne    0x6500f3cc
    6500f3c6:	mov    QWORD PTR [rax+0x8],rcx
    6500f3ca:	jmp    0x6500f3de
    6500f3cc:	mov    rax,QWORD PTR [rdx]
    6500f3cf:	cmp    r8,QWORD PTR [rax+0x10]
    6500f3d3:	jne    0x6500f3db
    6500f3d5:	mov    QWORD PTR [rax+0x10],rcx
    6500f3d9:	jmp    0x6500f3de
    6500f3db:	mov    QWORD PTR [rax],rcx
    6500f3de:	mov    QWORD PTR [rcx+0x10],r8
    6500f3e2:	mov    QWORD PTR [rdx],rcx
    6500f3e5:	mov    rax,QWORD PTR [rdx]
    6500f3e8:	mov    BYTE PTR [rax+0x68],0x1
    6500f3ec:	mov    rax,QWORD PTR [rdx]
    6500f3ef:	mov    rcx,QWORD PTR [rax+0x8]
    6500f3f3:	mov    BYTE PTR [rcx+0x68],0x0
    6500f3f7:	mov    rax,QWORD PTR [rdx]
    6500f3fa:	mov    rcx,QWORD PTR [rax+0x8]
    6500f3fe:	mov    rdx,QWORD PTR [rcx+0x10]
    6500f402:	mov    rax,QWORD PTR [rdx]
    6500f405:	mov    QWORD PTR [rcx+0x10],rax
    6500f409:	mov    rax,QWORD PTR [rdx]
    6500f40c:	cmp    BYTE PTR [rax+0x69],0x0
    6500f410:	jne    0x6500f416
    6500f412:	mov    QWORD PTR [rax+0x8],rcx
    6500f416:	mov    rax,QWORD PTR [rcx+0x8]
    6500f41a:	mov    QWORD PTR [rdx+0x8],rax
    6500f41e:	mov    rax,QWORD PTR [rbx+0x8]
    6500f422:	cmp    rcx,QWORD PTR [rax+0x8]
    6500f426:	jne    0x6500f42e
    6500f428:	mov    QWORD PTR [rax+0x8],rdx
    6500f42c:	jmp    0x6500f440
    6500f42e:	mov    rax,QWORD PTR [rcx+0x8]
    6500f432:	cmp    rcx,QWORD PTR [rax]
    6500f435:	jne    0x6500f43c
    6500f437:	mov    QWORD PTR [rax],rdx
    6500f43a:	jmp    0x6500f440
    6500f43c:	mov    QWORD PTR [rax+0x10],rdx
    6500f440:	mov    QWORD PTR [rdx],rcx
    6500f443:	mov    QWORD PTR [rcx+0x8],rdx
    6500f447:	lea    rdx,[r8+0x8]
    6500f44b:	mov    rax,QWORD PTR [rdx]
    6500f44e:	cmp    BYTE PTR [rax+0x68],0x0
    6500f452:	je     0x6500f270
    6500f458:	mov    rax,QWORD PTR [rbx+0x8]
    6500f45c:	mov    rcx,QWORD PTR [rax+0x8]
    6500f460:	mov    BYTE PTR [rcx+0x68],0x1
    6500f464:	mov    QWORD PTR [rbp+0x8],r11
    6500f468:	mov    QWORD PTR [rbp+0x0],rbx
    6500f46c:	mov    rax,rbp
    6500f46f:	lea    r11,[rsp+0xa0]
    6500f477:	mov    rbx,QWORD PTR [r11+0x10]
    6500f47b:	mov    rbp,QWORD PTR [r11+0x18]
    6500f47f:	mov    rsi,QWORD PTR [r11+0x20]
    6500f483:	mov    rsp,r11
    6500f486:	pop    rdi
    6500f487:	ret    
    6500f488:	int3   
    6500f489:	int3   
    6500f48a:	int3   
    6500f48b:	int3   
    6500f48c:	int3   
    6500f48d:	int3   
    6500f48e:	int3   
    6500f48f:	int3   
    6500f490:	rex push rbp
    6500f492:	sub    rsp,0x20
    6500f496:	mov    rbp,rdx
    6500f499:	lea    rcx,[rbp+0x38]
    6500f49d:	call   0x65001c70
    6500f4a2:	add    rsp,0x20
    6500f4a6:	pop    rbp
    6500f4a7:	ret    
    6500f4a8:	int3   
    6500f4a9:	int3   
    6500f4aa:	int3   
    6500f4ab:	int3   
    6500f4ac:	int3   
    6500f4ad:	int3   
    6500f4ae:	int3   
    6500f4af:	int3   
    6500f4b0:	rex push rbp
    6500f4b2:	sub    rsp,0x20
    6500f4b6:	mov    rbp,rdx
    6500f4b9:	lea    rcx,[rbp+0x60]
    6500f4bd:	call   0x6501d320
    6500f4c2:	add    rsp,0x20
    6500f4c6:	pop    rbp
    6500f4c7:	ret    
    6500f4c8:	int3   
    6500f4c9:	int3   
    6500f4ca:	int3   
    6500f4cb:	int3   
    6500f4cc:	int3   
    6500f4cd:	int3   
    6500f4ce:	int3   
    6500f4cf:	int3   
    6500f4d0:	mov    QWORD PTR [rsp+0x8],rbx
    6500f4d5:	mov    QWORD PTR [rsp+0x10],rbp
    6500f4da:	mov    QWORD PTR [rsp+0x18],rsi
    6500f4df:	mov    QWORD PTR [rsp+0x20],rdi
    6500f4e4:	push   r12
    6500f4e6:	sub    rsp,0x20
    6500f4ea:	cmp    QWORD PTR [rdx+0x18],r8
    6500f4ee:	mov    r12,r9
    6500f4f1:	mov    rbp,r8
    6500f4f4:	mov    rsi,rdx
    6500f4f7:	mov    rbx,rcx
    6500f4fa:	jae    0x6500f501
    6500f4fc:	call   0x6501d0b0
    6500f501:	mov    rdi,QWORD PTR [rsi+0x18]
    6500f505:	sub    rdi,rbp
    6500f508:	cmp    r12,rdi
    6500f50b:	cmovb  rdi,r12
    6500f50f:	cmp    rbx,rsi
    6500f512:	jne    0x6500f608
    6500f518:	lea    r12,[rdi+rbp*1]
    6500f51c:	or     rsi,0xffffffffffffffff
    6500f520:	cmp    QWORD PTR [rbx+0x18],r12
    6500f524:	jae    0x6500f52b
    6500f526:	call   0x6501d0b0
    6500f52b:	mov    r9,QWORD PTR [rbx+0x18]
    6500f52f:	sub    r9,r12
    6500f532:	cmp    r9,0xffffffffffffffff
    6500f536:	jae    0x6500f540
    6500f538:	test   r9,r9
    6500f53b:	mov    rsi,r9
    6500f53e:	je     0x6500f59d
    6500f540:	mov    rdx,QWORD PTR [rbx+0x20]
    6500f544:	lea    rdi,[rbx+0x8]
    6500f548:	cmp    rdx,0x8
    6500f54c:	jb     0x6500f553
    6500f54e:	mov    r8,QWORD PTR [rdi]
    6500f551:	jmp    0x6500f556
    6500f553:	mov    r8,rdi
    6500f556:	cmp    rdx,0x8
    6500f55a:	jb     0x6500f561
    6500f55c:	mov    rcx,QWORD PTR [rdi]
    6500f55f:	jmp    0x6500f564
    6500f561:	mov    rcx,rdi
    6500f564:	lea    rax,[r12+rsi*1]
    6500f568:	sub    r9,rsi
    6500f56b:	sub    rdx,r12
    6500f56e:	lea    r8,[r8+rax*2]
    6500f572:	lea    rcx,[rcx+r12*2]
    6500f576:	add    r9,r9
    6500f579:	add    rdx,rdx
    6500f57c:	call   0x6501d710
    6500f581:	mov    r11,QWORD PTR [rbx+0x18]
    6500f585:	sub    r11,rsi
    6500f588:	cmp    QWORD PTR [rbx+0x20],0x8
    6500f58d:	mov    QWORD PTR [rbx+0x18],r11
    6500f591:	jb     0x6500f596
    6500f593:	mov    rdi,QWORD PTR [rdi]
    6500f596:	mov    WORD PTR [rdi+r11*2],0x0
    6500f59d:	mov    r9,QWORD PTR [rbx+0x18]
    6500f5a1:	cmp    r9,rbp
    6500f5a4:	cmovb  rbp,r9
    6500f5a8:	test   rbp,rbp
    6500f5ab:	je     0x6500f6ab
    6500f5b1:	mov    rdx,QWORD PTR [rbx+0x20]
    6500f5b5:	lea    rdi,[rbx+0x8]
    6500f5b9:	cmp    rdx,0x8
    6500f5bd:	jb     0x6500f5c4
    6500f5bf:	mov    rax,QWORD PTR [rdi]
    6500f5c2:	jmp    0x6500f5c7
    6500f5c4:	mov    rax,rdi
    6500f5c7:	cmp    rdx,0x8
    6500f5cb:	jb     0x6500f5d2
    6500f5cd:	mov    rcx,QWORD PTR [rdi]
    6500f5d0:	jmp    0x6500f5d5
    6500f5d2:	mov    rcx,rdi
    6500f5d5:	sub    r9,rbp
    6500f5d8:	lea    r8,[rax+rbp*2]
    6500f5dc:	add    rdx,rdx
    6500f5df:	add    r9,r9
    6500f5e2:	call   0x6501d710
    6500f5e7:	mov    r11,QWORD PTR [rbx+0x18]
    6500f5eb:	sub    r11,rbp
    6500f5ee:	cmp    QWORD PTR [rbx+0x20],0x8
    6500f5f3:	mov    QWORD PTR [rbx+0x18],r11
    6500f5f7:	jb     0x6500f5fc
    6500f5f9:	mov    rdi,QWORD PTR [rdi]
    6500f5fc:	mov    WORD PTR [rdi+r11*2],0x0
    6500f603:	jmp    0x6500f6ab
    6500f608:	movabs rax,0x7ffffffffffffffe
    6500f612:	cmp    rdi,rax
    6500f615:	jbe    0x6500f61c
    6500f617:	call   0x6501cfe0
    6500f61c:	mov    rax,QWORD PTR [rbx+0x20]
    6500f620:	cmp    rax,rdi
    6500f623:	jae    0x6500f646
    6500f625:	mov    r8,QWORD PTR [rbx+0x18]
    6500f629:	mov    rdx,rdi
    6500f62c:	mov    rcx,rbx
    6500f62f:	call   0x65010030
    6500f634:	test   rdi,rdi
    6500f637:	je     0x6500f6ab
    6500f639:	cmp    QWORD PTR [rsi+0x20],0x8
    6500f63e:	jb     0x6500f669
    6500f640:	mov    rax,QWORD PTR [rsi+0x8]
    6500f644:	jmp    0x6500f66d
    6500f646:	test   rdi,rdi
    6500f649:	jne    0x6500f639
    6500f64b:	cmp    rax,0x8
    6500f64f:	mov    QWORD PTR [rbx+0x18],rdi
    6500f653:	jb     0x6500f65e
    6500f655:	mov    rax,QWORD PTR [rbx+0x8]
    6500f659:	mov    WORD PTR [rax],di
    6500f65c:	jmp    0x6500f6ab
    6500f65e:	lea    rax,[rbx+0x8]
    6500f662:	mov    WORD PTR [rax],0x0
    6500f667:	jmp    0x6500f6ab
    6500f669:	lea    rax,[rsi+0x8]
    6500f66d:	mov    rdx,QWORD PTR [rbx+0x20]
    6500f671:	lea    rsi,[rbx+0x8]
    6500f675:	cmp    rdx,0x8
    6500f679:	jb     0x6500f680
    6500f67b:	mov    rcx,QWORD PTR [rsi]
    6500f67e:	jmp    0x6500f683
    6500f680:	mov    rcx,rsi
    6500f683:	lea    r12,[rdi+rdi*1]
    6500f687:	lea    r8,[rax+rbp*2]
    6500f68b:	add    rdx,rdx
    6500f68e:	mov    r9,r12
    6500f691:	call   0x6501d640
    6500f696:	cmp    QWORD PTR [rbx+0x20],0x8
    6500f69b:	mov    QWORD PTR [rbx+0x18],rdi
    6500f69f:	jb     0x6500f6a4
    6500f6a1:	mov    rsi,QWORD PTR [rsi]
    6500f6a4:	mov    WORD PTR [r12+rsi*1],0x0
    6500f6ab:	mov    rbp,QWORD PTR [rsp+0x38]
    6500f6b0:	mov    rsi,QWORD PTR [rsp+0x40]
    6500f6b5:	mov    rdi,QWORD PTR [rsp+0x48]
    6500f6ba:	mov    rax,rbx
    6500f6bd:	mov    rbx,QWORD PTR [rsp+0x30]
    6500f6c2:	add    rsp,0x20
    6500f6c6:	pop    r12
    6500f6c8:	ret    
    6500f6c9:	int3   
    6500f6ca:	int3   
    6500f6cb:	int3   
    6500f6cc:	int3   
    6500f6cd:	int3   
    6500f6ce:	int3   
    6500f6cf:	int3   
    6500f6d0:	mov    r11,rsp
    6500f6d3:	push   rdi
    6500f6d4:	sub    rsp,0xa0
    6500f6db:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500f6e4:	mov    QWORD PTR [r11+0x8],rbx
    6500f6e8:	mov    QWORD PTR [r11+0x10],rbp
    6500f6ec:	mov    QWORD PTR [r11+0x18],rsi
    6500f6f0:	mov    rdi,r9
    6500f6f3:	movzx  esi,r8b
    6500f6f7:	mov    rbp,rdx
    6500f6fa:	mov    rbx,rcx
    6500f6fd:	movabs rax,0x333333333333332
    6500f707:	cmp    QWORD PTR [rcx+0x10],rax
    6500f70b:	jb     0x6500f7da
    6500f711:	mov    QWORD PTR [r11-0x50],0xf
    6500f719:	xor    ebx,ebx
    6500f71b:	mov    QWORD PTR [r11-0x58],rbx
    6500f71f:	mov    BYTE PTR [rsp+0x40],bl
    6500f723:	xor    r8d,r8d
    6500f726:	lea    edx,[rbx+0x13]
    6500f729:	lea    rcx,[r11-0x70]
    6500f72d:	call   0x65002330
    6500f732:	lea    rcx,[rsp+0x40]
    6500f737:	mov    rdx,QWORD PTR [rsp+0x58]
    6500f73c:	cmp    rdx,0x10
    6500f740:	cmovae rcx,QWORD PTR [rsp+0x40]
    6500f746:	lea    r9d,[rbx+0x13]
    6500f74a:	lea    r8,[rip+0x294ef]        # 0x65038c40
    6500f751:	call   0x6501d640
    6500f756:	mov    QWORD PTR [rsp+0x50],0x13
    6500f75f:	lea    rax,[rsp+0x40]
    6500f764:	cmp    QWORD PTR [rsp+0x58],0x10
    6500f76a:	cmovae rax,QWORD PTR [rsp+0x40]
    6500f770:	mov    BYTE PTR [rax+0x13],bl
    6500f773:	lea    rcx,[rsp+0x60]
    6500f778:	call   0x6501d1a0
    6500f77d:	nop
    6500f77e:	lea    rax,[rip+0x2599b]        # 0x65035120
    6500f785:	mov    QWORD PTR [rsp+0x60],rax
    6500f78a:	mov    QWORD PTR [rsp+0x98],0xf
    6500f796:	mov    QWORD PTR [rsp+0x90],rbx
    6500f79e:	mov    BYTE PTR [rsp+0x80],bl
    6500f7a5:	or     r9,0xffffffffffffffff
    6500f7a9:	xor    r8d,r8d
    6500f7ac:	lea    rdx,[rsp+0x38]
    6500f7b1:	lea    rcx,[rsp+0x78]
    6500f7b6:	call   0x65001e20
    6500f7bb:	nop
    6500f7bc:	lea    rax,[rip+0x25975]        # 0x65035138
    6500f7c3:	mov    QWORD PTR [rsp+0x60],rax
    6500f7c8:	lea    rdx,[rip+0x31ac9]        # 0x65041298
    6500f7cf:	lea    rcx,[rsp+0x60]
    6500f7d4:	call   0x6501daf0
    6500f7d9:	nop
    6500f7da:	mov    rdx,QWORD PTR [rcx+0x8]
    6500f7de:	mov    BYTE PTR [rsp+0x28],0x0
    6500f7e3:	mov    rax,QWORD PTR [rsp+0xd0]
    6500f7eb:	mov    QWORD PTR [rsp+0x20],rax
    6500f7f0:	mov    r9,rdx
    6500f7f3:	mov    r8,rdi
    6500f7f6:	call   0x6500fdc0
    6500f7fb:	mov    r11,rax
    6500f7fe:	add    QWORD PTR [rbx+0x10],0x1
    6500f803:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f807:	cmp    rdi,rcx
    6500f80a:	jne    0x6500f821
    6500f80c:	mov    QWORD PTR [rcx+0x8],rax
    6500f810:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f814:	mov    QWORD PTR [rcx],rax
    6500f817:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f81b:	mov    QWORD PTR [rcx+0x10],rax
    6500f81f:	jmp    0x6500f849
    6500f821:	test   sil,sil
    6500f824:	je     0x6500f837
    6500f826:	mov    QWORD PTR [rdi],rax
    6500f829:	mov    rax,QWORD PTR [rbx+0x8]
    6500f82d:	cmp    rdi,QWORD PTR [rax]
    6500f830:	jne    0x6500f849
    6500f832:	mov    QWORD PTR [rax],r11
    6500f835:	jmp    0x6500f849
    6500f837:	mov    QWORD PTR [rdi+0x10],rax
    6500f83b:	mov    rax,QWORD PTR [rbx+0x8]
    6500f83f:	cmp    rdi,QWORD PTR [rax+0x10]
    6500f843:	jne    0x6500f849
    6500f845:	mov    QWORD PTR [rax+0x10],r11
    6500f849:	mov    r8,r11
    6500f84c:	lea    rdx,[r11+0x8]
    6500f850:	mov    rax,QWORD PTR [rdx]
    6500f853:	cmp    BYTE PTR [rax+0x68],0x0
    6500f857:	jne    0x6500fa48
    6500f85d:	data16 xchg ax,ax
    6500f860:	mov    rax,QWORD PTR [rdx]
    6500f863:	mov    rcx,QWORD PTR [rax+0x8]
    6500f867:	cmp    rax,QWORD PTR [rcx]
    6500f86a:	jne    0x6500f957
    6500f870:	mov    r9,QWORD PTR [rcx+0x10]
    6500f874:	cmp    BYTE PTR [r9+0x68],0x0
    6500f879:	jne    0x6500f89b
    6500f87b:	mov    BYTE PTR [rax+0x68],0x1
    6500f87f:	mov    BYTE PTR [r9+0x68],0x1
    6500f884:	mov    rax,QWORD PTR [rdx]
    6500f887:	mov    rcx,QWORD PTR [rax+0x8]
    6500f88b:	mov    BYTE PTR [rcx+0x68],0x0
    6500f88f:	mov    rax,QWORD PTR [rdx]
    6500f892:	mov    r8,QWORD PTR [rax+0x8]
    6500f896:	jmp    0x6500fa37
    6500f89b:	cmp    r8,QWORD PTR [rax+0x10]
    6500f89f:	jne    0x6500f8ee
    6500f8a1:	mov    r8,rax
    6500f8a4:	mov    rcx,QWORD PTR [rax+0x10]
    6500f8a8:	mov    rax,QWORD PTR [rcx]
    6500f8ab:	mov    QWORD PTR [r8+0x10],rax
    6500f8af:	mov    rax,QWORD PTR [rcx]
    6500f8b2:	cmp    BYTE PTR [rax+0x69],0x0
    6500f8b6:	jne    0x6500f8bc
    6500f8b8:	mov    QWORD PTR [rax+0x8],r8
    6500f8bc:	lea    rdx,[r8+0x8]
    6500f8c0:	mov    rax,QWORD PTR [rdx]
    6500f8c3:	mov    QWORD PTR [rcx+0x8],rax
    6500f8c7:	mov    rax,QWORD PTR [rbx+0x8]
    6500f8cb:	cmp    r8,QWORD PTR [rax+0x8]
    6500f8cf:	jne    0x6500f8d7
    6500f8d1:	mov    QWORD PTR [rax+0x8],rcx
    6500f8d5:	jmp    0x6500f8e8
    6500f8d7:	mov    rax,QWORD PTR [rdx]
    6500f8da:	cmp    r8,QWORD PTR [rax]
    6500f8dd:	jne    0x6500f8e4
    6500f8df:	mov    QWORD PTR [rax],rcx
    6500f8e2:	jmp    0x6500f8e8
    6500f8e4:	mov    QWORD PTR [rax+0x10],rcx
    6500f8e8:	mov    QWORD PTR [rcx],r8
    6500f8eb:	mov    QWORD PTR [rdx],rcx
    6500f8ee:	mov    rax,QWORD PTR [rdx]
    6500f8f1:	mov    BYTE PTR [rax+0x68],0x1
    6500f8f5:	mov    rax,QWORD PTR [rdx]
    6500f8f8:	mov    rcx,QWORD PTR [rax+0x8]
    6500f8fc:	mov    BYTE PTR [rcx+0x68],0x0
    6500f900:	mov    rax,QWORD PTR [rdx]
    6500f903:	mov    rcx,QWORD PTR [rax+0x8]
    6500f907:	mov    rdx,QWORD PTR [rcx]
    6500f90a:	mov    rax,QWORD PTR [rdx+0x10]
    6500f90e:	mov    QWORD PTR [rcx],rax
    6500f911:	mov    rax,QWORD PTR [rdx+0x10]
    6500f915:	cmp    BYTE PTR [rax+0x69],0x0
    6500f919:	jne    0x6500f91f
    6500f91b:	mov    QWORD PTR [rax+0x8],rcx
    6500f91f:	mov    rax,QWORD PTR [rcx+0x8]
    6500f923:	mov    QWORD PTR [rdx+0x8],rax
    6500f927:	mov    rax,QWORD PTR [rbx+0x8]
    6500f92b:	cmp    rcx,QWORD PTR [rax+0x8]
    6500f92f:	jne    0x6500f937
    6500f931:	mov    QWORD PTR [rax+0x8],rdx
    6500f935:	jmp    0x6500f94a
    6500f937:	mov    rax,QWORD PTR [rcx+0x8]
    6500f93b:	cmp    rcx,QWORD PTR [rax+0x10]
    6500f93f:	jne    0x6500f947
    6500f941:	mov    QWORD PTR [rax+0x10],rdx
    6500f945:	jmp    0x6500f94a
    6500f947:	mov    QWORD PTR [rax],rdx
    6500f94a:	mov    QWORD PTR [rdx+0x10],rcx
    6500f94e:	mov    QWORD PTR [rcx+0x8],rdx
    6500f952:	jmp    0x6500fa37
    6500f957:	mov    r9,QWORD PTR [rcx]
    6500f95a:	cmp    BYTE PTR [r9+0x68],0x0
    6500f95f:	jne    0x6500f981
    6500f961:	mov    BYTE PTR [rax+0x68],0x1
    6500f965:	mov    BYTE PTR [r9+0x68],0x1
    6500f96a:	mov    rax,QWORD PTR [rdx]
    6500f96d:	mov    rcx,QWORD PTR [rax+0x8]
    6500f971:	mov    BYTE PTR [rcx+0x68],0x0
    6500f975:	mov    rax,QWORD PTR [rdx]
    6500f978:	mov    r8,QWORD PTR [rax+0x8]
    6500f97c:	jmp    0x6500fa37
    6500f981:	cmp    r8,QWORD PTR [rax]
    6500f984:	jne    0x6500f9d5
    6500f986:	mov    r8,rax
    6500f989:	mov    rcx,QWORD PTR [rax]
    6500f98c:	mov    rax,QWORD PTR [rcx+0x10]
    6500f990:	mov    QWORD PTR [r8],rax
    6500f993:	mov    rax,QWORD PTR [rcx+0x10]
    6500f997:	cmp    BYTE PTR [rax+0x69],0x0
    6500f99b:	jne    0x6500f9a1
    6500f99d:	mov    QWORD PTR [rax+0x8],r8
    6500f9a1:	lea    rdx,[r8+0x8]
    6500f9a5:	mov    rax,QWORD PTR [rdx]
    6500f9a8:	mov    QWORD PTR [rcx+0x8],rax
    6500f9ac:	mov    rax,QWORD PTR [rbx+0x8]
    6500f9b0:	cmp    r8,QWORD PTR [rax+0x8]
    6500f9b4:	jne    0x6500f9bc
    6500f9b6:	mov    QWORD PTR [rax+0x8],rcx
    6500f9ba:	jmp    0x6500f9ce
    6500f9bc:	mov    rax,QWORD PTR [rdx]
    6500f9bf:	cmp    r8,QWORD PTR [rax+0x10]
    6500f9c3:	jne    0x6500f9cb
    6500f9c5:	mov    QWORD PTR [rax+0x10],rcx
    6500f9c9:	jmp    0x6500f9ce
    6500f9cb:	mov    QWORD PTR [rax],rcx
    6500f9ce:	mov    QWORD PTR [rcx+0x10],r8
    6500f9d2:	mov    QWORD PTR [rdx],rcx
    6500f9d5:	mov    rax,QWORD PTR [rdx]
    6500f9d8:	mov    BYTE PTR [rax+0x68],0x1
    6500f9dc:	mov    rax,QWORD PTR [rdx]
    6500f9df:	mov    rcx,QWORD PTR [rax+0x8]
    6500f9e3:	mov    BYTE PTR [rcx+0x68],0x0
    6500f9e7:	mov    rax,QWORD PTR [rdx]
    6500f9ea:	mov    rcx,QWORD PTR [rax+0x8]
    6500f9ee:	mov    rdx,QWORD PTR [rcx+0x10]
    6500f9f2:	mov    rax,QWORD PTR [rdx]
    6500f9f5:	mov    QWORD PTR [rcx+0x10],rax
    6500f9f9:	mov    rax,QWORD PTR [rdx]
    6500f9fc:	cmp    BYTE PTR [rax+0x69],0x0
    6500fa00:	jne    0x6500fa06
    6500fa02:	mov    QWORD PTR [rax+0x8],rcx
    6500fa06:	mov    rax,QWORD PTR [rcx+0x8]
    6500fa0a:	mov    QWORD PTR [rdx+0x8],rax
    6500fa0e:	mov    rax,QWORD PTR [rbx+0x8]
    6500fa12:	cmp    rcx,QWORD PTR [rax+0x8]
    6500fa16:	jne    0x6500fa1e
    6500fa18:	mov    QWORD PTR [rax+0x8],rdx
    6500fa1c:	jmp    0x6500fa30
    6500fa1e:	mov    rax,QWORD PTR [rcx+0x8]
    6500fa22:	cmp    rcx,QWORD PTR [rax]
    6500fa25:	jne    0x6500fa2c
    6500fa27:	mov    QWORD PTR [rax],rdx
    6500fa2a:	jmp    0x6500fa30
    6500fa2c:	mov    QWORD PTR [rax+0x10],rdx
    6500fa30:	mov    QWORD PTR [rdx],rcx
    6500fa33:	mov    QWORD PTR [rcx+0x8],rdx
    6500fa37:	lea    rdx,[r8+0x8]
    6500fa3b:	mov    rax,QWORD PTR [rdx]
    6500fa3e:	cmp    BYTE PTR [rax+0x68],0x0
    6500fa42:	je     0x6500f860
    6500fa48:	mov    rax,QWORD PTR [rbx+0x8]
    6500fa4c:	mov    rcx,QWORD PTR [rax+0x8]
    6500fa50:	mov    BYTE PTR [rcx+0x68],0x1
    6500fa54:	mov    QWORD PTR [rbp+0x8],r11
    6500fa58:	mov    QWORD PTR [rbp+0x0],rbx
    6500fa5c:	mov    rax,rbp
    6500fa5f:	lea    r11,[rsp+0xa0]
    6500fa67:	mov    rbx,QWORD PTR [r11+0x10]
    6500fa6b:	mov    rbp,QWORD PTR [r11+0x18]
    6500fa6f:	mov    rsi,QWORD PTR [r11+0x20]
    6500fa73:	mov    rsp,r11
    6500fa76:	pop    rdi
    6500fa77:	ret    
    6500fa78:	int3   
    6500fa79:	int3   
    6500fa7a:	int3   
    6500fa7b:	int3   
    6500fa7c:	int3   
    6500fa7d:	int3   
    6500fa7e:	int3   
    6500fa7f:	int3   
    6500fa80:	rex push rbp
    6500fa82:	sub    rsp,0x20
    6500fa86:	mov    rbp,rdx
    6500fa89:	lea    rcx,[rbp+0x38]
    6500fa8d:	call   0x65001c70
    6500fa92:	add    rsp,0x20
    6500fa96:	pop    rbp
    6500fa97:	ret    
    6500fa98:	int3   
    6500fa99:	int3   
    6500fa9a:	int3   
    6500fa9b:	int3   
    6500fa9c:	int3   
    6500fa9d:	int3   
    6500fa9e:	int3   
    6500fa9f:	int3   
    6500faa0:	rex push rbp
    6500faa2:	sub    rsp,0x20
    6500faa6:	mov    rbp,rdx
    6500faa9:	lea    rcx,[rbp+0x60]
    6500faad:	call   0x6501d320
    6500fab2:	add    rsp,0x20
    6500fab6:	pop    rbp
    6500fab7:	ret    
    6500fab8:	int3   
    6500fab9:	int3   
    6500faba:	int3   
    6500fabb:	int3   
    6500fabc:	int3   
    6500fabd:	int3   
    6500fabe:	int3   
    6500fabf:	int3   
    6500fac0:	mov    QWORD PTR [rsp+0x10],rbx
    6500fac5:	mov    QWORD PTR [rsp+0x18],rsi
    6500faca:	push   rdi
    6500facb:	sub    rsp,0x20
    6500facf:	cmp    BYTE PTR [rdx+0x41],0x0
    6500fad3:	mov    rbx,rdx
    6500fad6:	mov    rsi,rcx
    6500fad9:	mov    rdi,rdx
    6500fadc:	jne    0x6500fb35
    6500fade:	mov    QWORD PTR [rsp+0x30],rbp
    6500fae3:	xor    ebp,ebp
    6500fae5:	data16 data16 xchg ax,ax
    6500fae9:	data16 xchg ax,ax
    6500faec:	data16 data16 xchg ax,ax
    6500faf0:	mov    rdx,QWORD PTR [rdi+0x10]
    6500faf4:	mov    rcx,rsi
    6500faf7:	call   0x6500fac0
    6500fafc:	cmp    QWORD PTR [rbx+0x38],0x10
    6500fb01:	mov    rdi,QWORD PTR [rdi]
    6500fb04:	jb     0x6500fb0f
    6500fb06:	mov    rcx,QWORD PTR [rbx+0x20]
    6500fb0a:	call   0x6501d190
    6500fb0f:	mov    QWORD PTR [rbx+0x38],0xf
    6500fb17:	mov    QWORD PTR [rbx+0x30],rbp
    6500fb1b:	mov    rcx,rbx
    6500fb1e:	mov    BYTE PTR [rbx+0x20],bpl
    6500fb22:	call   0x6501d190
    6500fb27:	cmp    BYTE PTR [rdi+0x41],bpl
    6500fb2b:	mov    rbx,rdi
    6500fb2e:	je     0x6500faf0
    6500fb30:	mov    rbp,QWORD PTR [rsp+0x30]
    6500fb35:	mov    rbx,QWORD PTR [rsp+0x38]
    6500fb3a:	mov    rsi,QWORD PTR [rsp+0x40]
    6500fb3f:	add    rsp,0x20
    6500fb43:	pop    rdi
    6500fb44:	ret    
    6500fb45:	int3   
    6500fb46:	int3   
    6500fb47:	int3   
    6500fb48:	int3   
    6500fb49:	int3   
    6500fb4a:	int3   
    6500fb4b:	int3   
    6500fb4c:	int3   
    6500fb4d:	int3   
    6500fb4e:	int3   
    6500fb4f:	int3   
    6500fb50:	push   r12
    6500fb52:	sub    rsp,0x40
    6500fb56:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500fb5f:	mov    QWORD PTR [rsp+0x50],rbx
    6500fb64:	mov    QWORD PTR [rsp+0x58],rsi
    6500fb69:	mov    QWORD PTR [rsp+0x60],rdi
    6500fb6e:	mov    rdi,r9
    6500fb71:	mov    rsi,r8
    6500fb74:	mov    r12,rdx
    6500fb77:	mov    ecx,0x70
    6500fb7c:	call   0x6501da50
    6500fb81:	mov    rbx,rax
    6500fb84:	mov    QWORD PTR [rsp+0x20],rax
    6500fb89:	mov    QWORD PTR [rsp+0x30],rax
    6500fb8e:	test   rax,rax
    6500fb91:	je     0x6500fc03
    6500fb93:	mov    QWORD PTR [rax],r12
    6500fb96:	mov    QWORD PTR [rax+0x8],rsi
    6500fb9a:	mov    QWORD PTR [rax+0x10],rdi
    6500fb9e:	lea    rdi,[rax+0x18]
    6500fba2:	mov    QWORD PTR [rsp+0x38],rdi
    6500fba7:	mov    QWORD PTR [rdi+0x20],0xf
    6500fbaf:	xor    r12d,r12d
    6500fbb2:	mov    QWORD PTR [rdi+0x18],r12
    6500fbb6:	mov    BYTE PTR [rdi+0x8],r12b
    6500fbba:	or     r9,0xffffffffffffffff
    6500fbbe:	xor    r8d,r8d
    6500fbc1:	mov    rsi,QWORD PTR [rsp+0x70]
    6500fbc6:	mov    rdx,rsi
    6500fbc9:	mov    rcx,rdi
    6500fbcc:	call   0x65001e20
    6500fbd1:	nop
    6500fbd2:	lea    rdx,[rsi+0x28]
    6500fbd6:	lea    rcx,[rdi+0x28]
    6500fbda:	mov    QWORD PTR [rcx+0x20],0xf
    6500fbe2:	mov    QWORD PTR [rcx+0x18],r12
    6500fbe6:	mov    BYTE PTR [rcx+0x8],r12b
    6500fbea:	or     r9,0xffffffffffffffff
    6500fbee:	xor    r8d,r8d
    6500fbf1:	call   0x65001e20
    6500fbf6:	nop
    6500fbf7:	movzx  eax,BYTE PTR [rsp+0x78]
    6500fbfc:	mov    BYTE PTR [rbx+0x68],al
    6500fbff:	mov    BYTE PTR [rbx+0x69],r12b
    6500fc03:	mov    rax,rbx
    6500fc06:	mov    rbx,QWORD PTR [rsp+0x50]
    6500fc0b:	mov    rsi,QWORD PTR [rsp+0x58]
    6500fc10:	mov    rdi,QWORD PTR [rsp+0x60]
    6500fc15:	add    rsp,0x40
    6500fc19:	pop    r12
    6500fc1b:	ret    
    6500fc1c:	int3   
    6500fc1d:	int3   
    6500fc1e:	int3   
    6500fc1f:	int3   
    6500fc20:	rex push rbp
    6500fc22:	sub    rsp,0x20
    6500fc26:	mov    rbp,rdx
    6500fc29:	mov    rdx,QWORD PTR [rbp+0x20]
    6500fc2d:	mov    rcx,QWORD PTR [rbp+0x30]
    6500fc31:	call   0x65004190
    6500fc36:	add    rsp,0x20
    6500fc3a:	pop    rbp
    6500fc3b:	ret    
    6500fc3c:	int3   
    6500fc3d:	int3   
    6500fc3e:	int3   
    6500fc3f:	int3   
    6500fc40:	rex push rbp
    6500fc42:	sub    rsp,0x20
    6500fc46:	mov    rbp,rdx
    6500fc49:	mov    rcx,QWORD PTR [rbp+0x38]
    6500fc4d:	call   0x65001c70
    6500fc52:	add    rsp,0x20
    6500fc56:	pop    rbp
    6500fc57:	ret    
    6500fc58:	int3   
    6500fc59:	int3   
    6500fc5a:	int3   
    6500fc5b:	int3   
    6500fc5c:	int3   
    6500fc5d:	int3   
    6500fc5e:	int3   
    6500fc5f:	int3   
    6500fc60:	mov    QWORD PTR [rsp+0x10],rdx
    6500fc65:	push   rbp
    6500fc66:	sub    rsp,0x20
    6500fc6a:	mov    rbp,rdx
    6500fc6d:	mov    rcx,QWORD PTR [rbp+0x20]
    6500fc71:	call   0x6501d190
    6500fc76:	xor    edx,edx
    6500fc78:	xor    ecx,ecx
    6500fc7a:	call   0x6501daf0
    6500fc7f:	nop
    6500fc80:	add    rsp,0x20
    6500fc84:	pop    rbp
    6500fc85:	ret    
    6500fc86:	int3   
    6500fc87:	int3   
    6500fc88:	int3   
    6500fc89:	int3   
    6500fc8a:	int3   
    6500fc8b:	int3   
    6500fc8c:	int3   
    6500fc8d:	int3   
    6500fc8e:	int3   
    6500fc8f:	int3   
    6500fc90:	mov    QWORD PTR [rsp+0x18],rbp
    6500fc95:	push   rsi
    6500fc96:	sub    rsp,0x60
    6500fc9a:	mov    rbp,QWORD PTR [rcx+0x8]
    6500fc9e:	mov    QWORD PTR [rsp+0x20],rcx
    6500fca3:	mov    rsi,rcx
    6500fca6:	mov    rax,QWORD PTR [rbp+0x0]
    6500fcaa:	cmp    rax,rax
    6500fcad:	mov    QWORD PTR [rsp+0x28],rax
    6500fcb2:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500fcb7:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    6500fcbd:	jne    0x6500fcce
    6500fcbf:	cmp    rbp,rbp
    6500fcc2:	jne    0x6500fcce
    6500fcc4:	call   0x650108a0
    6500fcc9:	jmp    0x6500fd97
    6500fcce:	mov    QWORD PTR [rsp+0x70],rbx
    6500fcd3:	mov    rbx,QWORD PTR [rsp+0x28]
    6500fcd8:	mov    QWORD PTR [rsp+0x78],rdi
    6500fcdd:	movaps XMMWORD PTR [rsp+0x50],xmm6
    6500fce2:	mov    rdi,QWORD PTR [rsp+0x20]
    6500fce7:	test   rdi,rdi
    6500fcea:	je     0x6500fcf1
    6500fcec:	cmp    rdi,rsi
    6500fcef:	je     0x6500fcf6
    6500fcf1:	call   0x6501d960
    6500fcf6:	cmp    rbx,rbp
    6500fcf9:	je     0x6500fd88
    6500fcff:	test   rdi,rdi
    6500fd02:	movaps xmm6,XMMWORD PTR [rsp+0x20]
    6500fd07:	jne    0x6500fd0e
    6500fd09:	call   0x6501d960
    6500fd0e:	cmp    BYTE PTR [rbx+0x69],0x0
    6500fd12:	je     0x6500fd1b
    6500fd14:	call   0x6501d960
    6500fd19:	jmp    0x6500fd6b
    6500fd1b:	mov    rax,QWORD PTR [rbx+0x10]
    6500fd1f:	cmp    BYTE PTR [rax+0x69],0x0
    6500fd23:	jne    0x6500fd44
    6500fd25:	mov    rbx,rax
    6500fd28:	mov    rax,QWORD PTR [rax]
    6500fd2b:	cmp    BYTE PTR [rax+0x69],0x0
    6500fd2f:	jne    0x6500fd3d
    6500fd31:	mov    rbx,rax
    6500fd34:	mov    rax,QWORD PTR [rax]
    6500fd37:	cmp    BYTE PTR [rax+0x69],0x0
    6500fd3b:	je     0x6500fd31
    6500fd3d:	mov    QWORD PTR [rsp+0x28],rbx
    6500fd42:	jmp    0x6500fd6b
    6500fd44:	mov    rax,QWORD PTR [rbx+0x8]
    6500fd48:	cmp    BYTE PTR [rax+0x69],0x0
    6500fd4c:	jne    0x6500fd63
    6500fd4e:	xchg   ax,ax
    6500fd50:	cmp    rbx,QWORD PTR [rax+0x10]
    6500fd54:	jne    0x6500fd63
    6500fd56:	mov    rbx,rax
    6500fd59:	mov    rax,QWORD PTR [rax+0x8]
    6500fd5d:	cmp    BYTE PTR [rax+0x69],0x0
    6500fd61:	je     0x6500fd50
    6500fd63:	mov    rbx,rax
    6500fd66:	mov    QWORD PTR [rsp+0x28],rax
    6500fd6b:	lea    r8,[rsp+0x30]
    6500fd70:	lea    rdx,[rsp+0x40]
    6500fd75:	mov    rcx,rsi
    6500fd78:	movdqa XMMWORD PTR [rsp+0x30],xmm6
    6500fd7e:	call   0x65010210
    6500fd83:	jmp    0x6500fce7
    6500fd88:	movaps xmm6,XMMWORD PTR [rsp+0x50]
    6500fd8d:	mov    rbx,QWORD PTR [rsp+0x70]
    6500fd92:	mov    rdi,QWORD PTR [rsp+0x78]
    6500fd97:	mov    rcx,QWORD PTR [rsi+0x8]
    6500fd9b:	call   0x6501d190
    6500fda0:	mov    rbp,QWORD PTR [rsp+0x80]
    6500fda8:	xor    r11d,r11d
    6500fdab:	mov    QWORD PTR [rsi+0x8],r11
    6500fdaf:	mov    QWORD PTR [rsi+0x10],r11
    6500fdb3:	add    rsp,0x60
    6500fdb7:	pop    rsi
    6500fdb8:	ret    
    6500fdb9:	int3   
    6500fdba:	int3   
    6500fdbb:	int3   
    6500fdbc:	int3   
    6500fdbd:	int3   
    6500fdbe:	int3   
    6500fdbf:	int3   
    6500fdc0:	push   r12
    6500fdc2:	sub    rsp,0x40
    6500fdc6:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500fdcf:	mov    QWORD PTR [rsp+0x50],rbx
    6500fdd4:	mov    QWORD PTR [rsp+0x58],rsi
    6500fdd9:	mov    QWORD PTR [rsp+0x60],rdi
    6500fdde:	mov    rdi,r9
    6500fde1:	mov    rsi,r8
    6500fde4:	mov    r12,rdx
    6500fde7:	mov    ecx,0x70
    6500fdec:	call   0x6501da50
    6500fdf1:	mov    rbx,rax
    6500fdf4:	mov    QWORD PTR [rsp+0x20],rax
    6500fdf9:	mov    QWORD PTR [rsp+0x30],rax
    6500fdfe:	test   rax,rax
    6500fe01:	je     0x6500fe75
    6500fe03:	mov    QWORD PTR [rax],r12
    6500fe06:	mov    QWORD PTR [rax+0x8],rsi
    6500fe0a:	mov    QWORD PTR [rax+0x10],rdi
    6500fe0e:	lea    rdi,[rax+0x18]
    6500fe12:	mov    QWORD PTR [rsp+0x38],rdi
    6500fe17:	mov    QWORD PTR [rdi+0x20],0x7
    6500fe1f:	xor    r12d,r12d
    6500fe22:	mov    QWORD PTR [rdi+0x18],r12
    6500fe26:	mov    WORD PTR [rdi+0x8],r12w
    6500fe2b:	or     r9,0xffffffffffffffff
    6500fe2f:	xor    r8d,r8d
    6500fe32:	mov    rsi,QWORD PTR [rsp+0x70]
    6500fe37:	mov    rdx,rsi
    6500fe3a:	mov    rcx,rdi
    6500fe3d:	call   0x6500f4d0
    6500fe42:	nop
    6500fe43:	lea    rdx,[rsi+0x28]
    6500fe47:	lea    rcx,[rdi+0x28]
    6500fe4b:	mov    QWORD PTR [rcx+0x20],0x7
    6500fe53:	mov    QWORD PTR [rcx+0x18],r12
    6500fe57:	mov    WORD PTR [rcx+0x8],r12w
    6500fe5c:	or     r9,0xffffffffffffffff
    6500fe60:	xor    r8d,r8d
    6500fe63:	call   0x6500f4d0
    6500fe68:	nop
    6500fe69:	movzx  eax,BYTE PTR [rsp+0x78]
    6500fe6e:	mov    BYTE PTR [rbx+0x68],al
    6500fe71:	mov    BYTE PTR [rbx+0x69],r12b
    6500fe75:	mov    rax,rbx
    6500fe78:	mov    rbx,QWORD PTR [rsp+0x50]
    6500fe7d:	mov    rsi,QWORD PTR [rsp+0x58]
    6500fe82:	mov    rdi,QWORD PTR [rsp+0x60]
    6500fe87:	add    rsp,0x40
    6500fe8b:	pop    r12
    6500fe8d:	ret    
    6500fe8e:	int3   
    6500fe8f:	int3   
    6500fe90:	rex push rbp
    6500fe92:	sub    rsp,0x20
    6500fe96:	mov    rbp,rdx
    6500fe99:	mov    rdx,QWORD PTR [rbp+0x20]
    6500fe9d:	mov    rcx,QWORD PTR [rbp+0x30]
    6500fea1:	call   0x65004190
    6500fea6:	add    rsp,0x20
    6500feaa:	pop    rbp
    6500feab:	ret    
    6500feac:	int3   
    6500fead:	int3   
    6500feae:	int3   
    6500feaf:	int3   
    6500feb0:	rex push rbp
    6500feb2:	sub    rsp,0x20
    6500feb6:	mov    rbp,rdx
    6500feb9:	mov    rcx,QWORD PTR [rbp+0x38]
    6500febd:	call   0x6500e300
    6500fec2:	add    rsp,0x20
    6500fec6:	pop    rbp
    6500fec7:	ret    
    6500fec8:	int3   
    6500fec9:	int3   
    6500feca:	int3   
    6500fecb:	int3   
    6500fecc:	int3   
    6500fecd:	int3   
    6500fece:	int3   
    6500fecf:	int3   
    6500fed0:	mov    QWORD PTR [rsp+0x10],rdx
    6500fed5:	push   rbp
    6500fed6:	sub    rsp,0x20
    6500feda:	mov    rbp,rdx
    6500fedd:	mov    rcx,QWORD PTR [rbp+0x20]
    6500fee1:	call   0x6501d190
    6500fee6:	xor    edx,edx
    6500fee8:	xor    ecx,ecx
    6500feea:	call   0x6501daf0
    6500feef:	nop
    6500fef0:	add    rsp,0x20
    6500fef4:	pop    rbp
    6500fef5:	ret    
    6500fef6:	int3   
    6500fef7:	int3   
    6500fef8:	int3   
    6500fef9:	int3   
    6500fefa:	int3   
    6500fefb:	int3   
    6500fefc:	int3   
    6500fefd:	int3   
    6500fefe:	int3   
    6500feff:	int3   
    6500ff00:	mov    QWORD PTR [rsp+0x18],rbp
    6500ff05:	push   rsi
    6500ff06:	sub    rsp,0x60
    6500ff0a:	mov    rbp,QWORD PTR [rcx+0x8]
    6500ff0e:	mov    QWORD PTR [rsp+0x20],rcx
    6500ff13:	mov    rsi,rcx
    6500ff16:	mov    rax,QWORD PTR [rbp+0x0]
    6500ff1a:	cmp    rax,rax
    6500ff1d:	mov    QWORD PTR [rsp+0x28],rax
    6500ff22:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500ff27:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    6500ff2d:	jne    0x6500ff3e
    6500ff2f:	cmp    rbp,rbp
    6500ff32:	jne    0x6500ff3e
    6500ff34:	call   0x650110d0
    6500ff39:	jmp    0x65010007
    6500ff3e:	mov    QWORD PTR [rsp+0x70],rbx
    6500ff43:	mov    rbx,QWORD PTR [rsp+0x28]
    6500ff48:	mov    QWORD PTR [rsp+0x78],rdi
    6500ff4d:	movaps XMMWORD PTR [rsp+0x50],xmm6
    6500ff52:	mov    rdi,QWORD PTR [rsp+0x20]
    6500ff57:	test   rdi,rdi
    6500ff5a:	je     0x6500ff61
    6500ff5c:	cmp    rdi,rsi
    6500ff5f:	je     0x6500ff66
    6500ff61:	call   0x6501d960
    6500ff66:	cmp    rbx,rbp
    6500ff69:	je     0x6500fff8
    6500ff6f:	test   rdi,rdi
    6500ff72:	movaps xmm6,XMMWORD PTR [rsp+0x20]
    6500ff77:	jne    0x6500ff7e
    6500ff79:	call   0x6501d960
    6500ff7e:	cmp    BYTE PTR [rbx+0x69],0x0
    6500ff82:	je     0x6500ff8b
    6500ff84:	call   0x6501d960
    6500ff89:	jmp    0x6500ffdb
    6500ff8b:	mov    rax,QWORD PTR [rbx+0x10]
    6500ff8f:	cmp    BYTE PTR [rax+0x69],0x0
    6500ff93:	jne    0x6500ffb4
    6500ff95:	mov    rbx,rax
    6500ff98:	mov    rax,QWORD PTR [rax]
    6500ff9b:	cmp    BYTE PTR [rax+0x69],0x0
    6500ff9f:	jne    0x6500ffad
    6500ffa1:	mov    rbx,rax
    6500ffa4:	mov    rax,QWORD PTR [rax]
    6500ffa7:	cmp    BYTE PTR [rax+0x69],0x0
    6500ffab:	je     0x6500ffa1
    6500ffad:	mov    QWORD PTR [rsp+0x28],rbx
    6500ffb2:	jmp    0x6500ffdb
    6500ffb4:	mov    rax,QWORD PTR [rbx+0x8]
    6500ffb8:	cmp    BYTE PTR [rax+0x69],0x0
    6500ffbc:	jne    0x6500ffd3
    6500ffbe:	xchg   ax,ax
    6500ffc0:	cmp    rbx,QWORD PTR [rax+0x10]
    6500ffc4:	jne    0x6500ffd3
    6500ffc6:	mov    rbx,rax
    6500ffc9:	mov    rax,QWORD PTR [rax+0x8]
    6500ffcd:	cmp    BYTE PTR [rax+0x69],0x0
    6500ffd1:	je     0x6500ffc0
    6500ffd3:	mov    rbx,rax
    6500ffd6:	mov    QWORD PTR [rsp+0x28],rax
    6500ffdb:	lea    r8,[rsp+0x30]
    6500ffe0:	lea    rdx,[rsp+0x40]
    6500ffe5:	mov    rcx,rsi
    6500ffe8:	movdqa XMMWORD PTR [rsp+0x30],xmm6
    6500ffee:	call   0x65010a40
    6500fff3:	jmp    0x6500ff57
    6500fff8:	movaps xmm6,XMMWORD PTR [rsp+0x50]
    6500fffd:	mov    rbx,QWORD PTR [rsp+0x70]
    65010002:	mov    rdi,QWORD PTR [rsp+0x78]
    65010007:	mov    rcx,QWORD PTR [rsi+0x8]
    6501000b:	call   0x6501d190
    65010010:	mov    rbp,QWORD PTR [rsp+0x80]
    65010018:	xor    r11d,r11d
    6501001b:	mov    QWORD PTR [rsi+0x8],r11
    6501001f:	mov    QWORD PTR [rsi+0x10],r11
    65010023:	add    rsp,0x60
    65010027:	pop    rsi
    65010028:	ret    
    65010029:	int3   
    6501002a:	int3   
    6501002b:	int3   
    6501002c:	int3   
    6501002d:	int3   
    6501002e:	int3   
    6501002f:	int3   
    65010030:	mov    QWORD PTR [rsp+0x18],r8
    65010035:	mov    QWORD PTR [rsp+0x10],rdx
    6501003a:	mov    QWORD PTR [rsp+0x8],rcx
    6501003f:	push   rbx
    65010040:	push   rsi
    65010041:	push   rdi
    65010042:	push   r12
    65010044:	sub    rsp,0x58
    65010048:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    65010051:	mov    r12,r8
    65010054:	mov    rbx,rcx
    65010057:	mov    rdi,rdx
    6501005a:	or     rdi,0x7
    6501005e:	movabs r9,0x7ffffffffffffffe
    65010068:	cmp    rdi,r9
    6501006b:	jbe    0x65010072
    6501006d:	mov    rdi,rdx
    65010070:	jmp    0x6501009d
    65010072:	mov    r8,QWORD PTR [rcx+0x20]
    65010076:	mov    rcx,r8
    65010079:	shr    rcx,1
    6501007c:	movabs rax,0xaaaaaaaaaaaaaaab
    65010086:	mul    rdi
    65010089:	shr    rdx,1
    6501008c:	cmp    rdx,rcx
    6501008f:	jae    0x6501009d
    65010091:	sub    r9,rcx
    65010094:	cmp    r8,r9
    65010097:	ja     0x6501009d
    65010099:	lea    rdi,[rcx+r8*1]
    6501009d:	lea    rcx,[rdi+0x1]
    650100a1:	test   rcx,rcx
    650100a4:	je     0x650100ee
    650100a6:	xor    edx,edx
    650100a8:	or     rax,0xffffffffffffffff
    650100ac:	div    rcx
    650100af:	cmp    rax,0x2
    650100b3:	jae    0x650100ee
    650100b5:	xor    ecx,ecx
    650100b7:	mov    QWORD PTR [rsp+0x98],rcx
    650100bf:	lea    rdx,[rsp+0x98]
    650100c7:	lea    rcx,[rsp+0x30]
    650100cc:	call   0x6501d1c0
    650100d1:	lea    rax,[rip+0x25030]        # 0x65035108
    650100d8:	mov    QWORD PTR [rsp+0x30],rax
    650100dd:	lea    rdx,[rip+0x3105c]        # 0x65041140
    650100e4:	lea    rcx,[rsp+0x30]
    650100e9:	call   0x6501daf0
    650100ee:	add    rcx,rcx
    650100f1:	call   0x6501da50
    650100f6:	mov    rsi,rax
    650100f9:	jmp    0x65010118
    650100fb:	mov    rbx,QWORD PTR [rsp+0x80]
    65010103:	mov    r12,QWORD PTR [rsp+0x90]
    6501010b:	mov    rdi,QWORD PTR [rsp+0x88]
    65010113:	mov    rsi,QWORD PTR [rsp+0x20]
    65010118:	test   r12,r12
    6501011b:	je     0x6501013f
    6501011d:	cmp    QWORD PTR [rbx+0x20],0x8
    65010122:	jb     0x6501012a
    65010124:	mov    r8,QWORD PTR [rbx+0x8]
    65010128:	jmp    0x6501012e
    6501012a:	lea    r8,[rbx+0x8]
    6501012e:	lea    r9,[r12+r12*1]
    65010132:	lea    rdx,[rdi+rdi*1+0x2]
    65010137:	mov    rcx,rsi
    6501013a:	call   0x6501d640
    6501013f:	cmp    QWORD PTR [rbx+0x20],0x8
    65010144:	jb     0x6501014f
    65010146:	mov    rcx,QWORD PTR [rbx+0x8]
    6501014a:	call   0x6501d190
    6501014f:	lea    rax,[rbx+0x8]
    65010153:	mov    WORD PTR [rax],0x0
    65010158:	mov    QWORD PTR [rax],rsi
    6501015b:	mov    QWORD PTR [rbx+0x20],rdi
    6501015f:	mov    QWORD PTR [rbx+0x18],r12
    65010163:	cmp    rdi,0x8
    65010167:	cmovae rax,rsi
    6501016b:	mov    WORD PTR [rax+r12*2],0x0
    65010172:	add    rsp,0x58
    65010176:	pop    r12
    65010178:	pop    rdi
    65010179:	pop    rsi
    6501017a:	pop    rbx
    6501017b:	ret    
    6501017c:	int3   
    6501017d:	int3   
    6501017e:	int3   
    6501017f:	int3   
    65010180:	mov    QWORD PTR [rsp+0x10],rdx
    65010185:	push   rbp
    65010186:	sub    rsp,0x20
    6501018a:	mov    rbp,rdx
    6501018d:	mov    rdx,QWORD PTR [rbp+0x88]
    65010194:	mov    QWORD PTR [rbp+0x88],rdx
    6501019b:	add    rdx,0x1
    6501019f:	mov    rcx,QWORD PTR [rbp+0x80]
    650101a6:	call   0x650109e0
    650101ab:	mov    QWORD PTR [rbp+0x20],rax
    650101af:	lea    rax,[rip+0xffffffffffffff45]        # 0x650100fb
    650101b6:	add    rsp,0x20
    650101ba:	pop    rbp
    650101bb:	ret    
    650101bc:	int3   
    650101bd:	int3   
    650101be:	int3   
    650101bf:	int3   
    650101c0:	mov    QWORD PTR [rsp+0x10],rdx
    650101c5:	push   rbx
    650101c6:	push   rbp
    650101c7:	sub    rsp,0x28
    650101cb:	mov    rbp,rdx
    650101ce:	mov    rbx,QWORD PTR [rbp+0x80]
    650101d5:	cmp    QWORD PTR [rbx+0x20],0x8
    650101da:	jb     0x650101e5
    650101dc:	mov    rcx,QWORD PTR [rbx+0x8]
    650101e0:	call   0x6501d190
    650101e5:	mov    QWORD PTR [rbx+0x20],0x7
    650101ed:	xor    ecx,ecx
    650101ef:	mov    QWORD PTR [rbx+0x18],rcx
    650101f3:	mov    WORD PTR [rbx+0x8],cx
    650101f7:	xor    edx,edx
    650101f9:	call   0x6501daf0
    650101fe:	nop
    650101ff:	add    rsp,0x28
    65010203:	pop    rbp
    65010204:	pop    rbx
    65010205:	ret    
    65010206:	int3   
    65010207:	int3   
    65010208:	int3   
    65010209:	int3   
    6501020a:	int3   
    6501020b:	int3   
    6501020c:	int3   
    6501020d:	int3   
    6501020e:	int3   
    6501020f:	int3   
    65010210:	mov    rax,rsp
    65010213:	push   r12
    65010215:	sub    rsp,0x90
    6501021c:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65010225:	mov    QWORD PTR [rax+0x8],rbx
    65010229:	mov    QWORD PTR [rax+0x10],rsi
    6501022d:	mov    QWORD PTR [rax+0x18],rdi
    65010231:	mov    rsi,r8
    65010234:	mov    r12,rdx
    65010237:	mov    rdi,rcx
    6501023a:	mov    rbx,QWORD PTR [r8+0x8]
    6501023e:	cmp    BYTE PTR [rbx+0x69],0x0
    65010242:	je     0x65010319
    65010248:	mov    QWORD PTR [rax-0x50],0xf
    65010250:	mov    QWORD PTR [rax-0x58],0x0
    65010258:	mov    BYTE PTR [rax-0x68],0x0
    6501025c:	xor    r8d,r8d
    6501025f:	lea    edx,[r8+0x1b]
    65010263:	lea    rcx,[rax-0x70]
    65010267:	call   0x65002330
    6501026c:	lea    rcx,[rsp+0x30]
    65010271:	mov    rdx,QWORD PTR [rsp+0x48]
    65010276:	cmp    rdx,0x10
    6501027a:	cmovae rcx,QWORD PTR [rsp+0x30]
    65010280:	mov    r9d,0x1b
    65010286:	lea    r8,[rip+0x289cb]        # 0x65038c58
    6501028d:	call   0x6501d640
    65010292:	mov    QWORD PTR [rsp+0x40],0x1b
    6501029b:	lea    rax,[rsp+0x30]
    650102a0:	cmp    QWORD PTR [rsp+0x48],0x10
    650102a6:	cmovae rax,QWORD PTR [rsp+0x30]
    650102ac:	mov    BYTE PTR [rax+0x1b],0x0
    650102b0:	lea    rcx,[rsp+0x50]
    650102b5:	call   0x6501d1a0
    650102ba:	nop
    650102bb:	lea    rax,[rip+0x24e5e]        # 0x65035120
    650102c2:	mov    QWORD PTR [rsp+0x50],rax
    650102c7:	mov    QWORD PTR [rsp+0x88],0xf
    650102d3:	mov    QWORD PTR [rsp+0x80],0x0
    650102df:	mov    BYTE PTR [rsp+0x70],0x0
    650102e4:	or     r9,0xffffffffffffffff
    650102e8:	xor    r8d,r8d
    650102eb:	lea    rdx,[rsp+0x28]
    650102f0:	lea    rcx,[rsp+0x68]
    650102f5:	call   0x65001e20
    650102fa:	nop
    650102fb:	lea    rax,[rip+0x24e4e]        # 0x65035150
    65010302:	mov    QWORD PTR [rsp+0x50],rax
    65010307:	lea    rdx,[rip+0x30f22]        # 0x65041230
    6501030e:	lea    rcx,[rsp+0x50]
    65010313:	call   0x6501daf0
    65010318:	nop
    65010319:	cmp    QWORD PTR [r8],0x0
    6501031d:	jne    0x65010324
    6501031f:	call   0x6501d960
    65010324:	mov    rax,QWORD PTR [rsi+0x8]
    65010328:	cmp    BYTE PTR [rax+0x69],0x0
    6501032c:	je     0x65010335
    6501032e:	call   0x6501d960
    65010333:	jmp    0x6501038c
    65010335:	mov    rcx,QWORD PTR [rax+0x10]
    65010339:	cmp    BYTE PTR [rcx+0x69],0x0
    6501033d:	jne    0x65010362
    6501033f:	mov    rax,QWORD PTR [rcx]
    65010342:	cmp    BYTE PTR [rax+0x69],0x0
    65010346:	jne    0x6501035c
    65010348:	data16 data16 xchg ax,ax
    6501034c:	data16 data16 xchg ax,ax
    65010350:	mov    rcx,rax
    65010353:	mov    rax,QWORD PTR [rax]
    65010356:	cmp    BYTE PTR [rax+0x69],0x0
    6501035a:	je     0x65010350
    6501035c:	mov    QWORD PTR [rsi+0x8],rcx
    65010360:	jmp    0x6501038c
    65010362:	mov    rcx,QWORD PTR [rax+0x8]
    65010366:	cmp    BYTE PTR [rcx+0x69],0x0
    6501036a:	jne    0x65010388
    6501036c:	data16 data16 xchg ax,ax
    65010370:	mov    rax,QWORD PTR [rcx+0x10]
    65010374:	cmp    QWORD PTR [rsi+0x8],rax
    65010378:	jne    0x65010388
    6501037a:	mov    QWORD PTR [rsi+0x8],rcx
    6501037e:	mov    rcx,QWORD PTR [rcx+0x8]
    65010382:	cmp    BYTE PTR [rcx+0x69],0x0
    65010386:	je     0x65010370
    65010388:	mov    QWORD PTR [rsi+0x8],rcx
    6501038c:	mov    rcx,QWORD PTR [rbx]
    6501038f:	cmp    BYTE PTR [rcx+0x69],0x0
    65010393:	je     0x6501039b
    65010395:	mov    r8,QWORD PTR [rbx+0x10]
    65010399:	jmp    0x650103bb
    6501039b:	mov    rax,QWORD PTR [rbx+0x10]
    6501039f:	cmp    BYTE PTR [rax+0x69],0x0
    650103a3:	je     0x650103aa
    650103a5:	mov    r8,rcx
    650103a8:	jmp    0x650103bb
    650103aa:	mov    r9,QWORD PTR [rsi+0x8]
    650103ae:	mov    r8,QWORD PTR [r9+0x10]
    650103b2:	cmp    r9,rbx
    650103b5:	jne    0x65010463
    650103bb:	mov    rdx,QWORD PTR [rbx+0x8]
    650103bf:	cmp    BYTE PTR [r8+0x69],0x0
    650103c4:	jne    0x650103ca
    650103c6:	mov    QWORD PTR [r8+0x8],rdx
    650103ca:	mov    rax,QWORD PTR [rdi+0x8]
    650103ce:	cmp    QWORD PTR [rax+0x8],rbx
    650103d2:	jne    0x650103da
    650103d4:	mov    QWORD PTR [rax+0x8],r8
    650103d8:	jmp    0x650103e8
    650103da:	cmp    QWORD PTR [rdx],rbx
    650103dd:	jne    0x650103e4
    650103df:	mov    QWORD PTR [rdx],r8
    650103e2:	jmp    0x650103e8
    650103e4:	mov    QWORD PTR [rdx+0x10],r8
    650103e8:	mov    r9,QWORD PTR [rdi+0x8]
    650103ec:	cmp    QWORD PTR [r9],rbx
    650103ef:	jne    0x6501041f
    650103f1:	cmp    BYTE PTR [r8+0x69],0x0
    650103f6:	je     0x650103fd
    650103f8:	mov    rcx,rdx
    650103fb:	jmp    0x6501041c
    650103fd:	mov    rcx,r8
    65010400:	mov    rax,QWORD PTR [r8]
    65010403:	cmp    BYTE PTR [rax+0x69],0x0
    65010407:	jne    0x6501041c
    65010409:	data16 xchg ax,ax
    6501040c:	data16 data16 xchg ax,ax
    65010410:	mov    rcx,rax
    65010413:	mov    rax,QWORD PTR [rax]
    65010416:	cmp    BYTE PTR [rax+0x69],0x0
    6501041a:	je     0x65010410
    6501041c:	mov    QWORD PTR [r9],rcx
    6501041f:	mov    r9,QWORD PTR [rdi+0x8]
    65010423:	cmp    QWORD PTR [r9+0x10],rbx
    65010427:	jne    0x650104d4
    6501042d:	cmp    BYTE PTR [r8+0x69],0x0
    65010432:	je     0x65010439
    65010434:	mov    rcx,rdx
    65010437:	jmp    0x6501045d
    65010439:	mov    rcx,r8
    6501043c:	mov    rax,QWORD PTR [r8+0x10]
    65010440:	cmp    BYTE PTR [rax+0x69],0x0
    65010444:	jne    0x6501045d
    65010446:	data16 data16 xchg ax,ax
    6501044a:	data16 xchg ax,ax
    6501044d:	data16 xchg ax,ax
    65010450:	mov    rcx,rax
    65010453:	mov    rax,QWORD PTR [rax+0x10]
    65010457:	cmp    BYTE PTR [rax+0x69],0x0
    6501045b:	je     0x65010450
    6501045d:	mov    QWORD PTR [r9+0x10],rcx
    65010461:	jmp    0x650104d4
    65010463:	mov    QWORD PTR [rcx+0x8],r9
    65010467:	mov    rax,QWORD PTR [rbx]
    6501046a:	mov    QWORD PTR [r9],rax
    6501046d:	cmp    r9,QWORD PTR [rbx+0x10]
    65010471:	jne    0x65010478
    65010473:	mov    rdx,r9
    65010476:	jmp    0x6501049a
    65010478:	mov    rdx,QWORD PTR [r9+0x8]
    6501047c:	cmp    BYTE PTR [r8+0x69],0x0
    65010481:	jne    0x65010487
    65010483:	mov    QWORD PTR [r8+0x8],rdx
    65010487:	mov    QWORD PTR [rdx],r8
    6501048a:	mov    rax,QWORD PTR [rbx+0x10]
    6501048e:	mov    QWORD PTR [r9+0x10],rax
    65010492:	mov    rax,QWORD PTR [rbx+0x10]
    65010496:	mov    QWORD PTR [rax+0x8],r9
    6501049a:	mov    rax,QWORD PTR [rdi+0x8]
    6501049e:	cmp    QWORD PTR [rax+0x8],rbx
    650104a2:	jne    0x650104aa
    650104a4:	mov    QWORD PTR [rax+0x8],r9
    650104a8:	jmp    0x650104bc
    650104aa:	mov    rax,QWORD PTR [rbx+0x8]
    650104ae:	cmp    QWORD PTR [rax],rbx
    650104b1:	jne    0x650104b8
    650104b3:	mov    QWORD PTR [rax],r9
    650104b6:	jmp    0x650104bc
    650104b8:	mov    QWORD PTR [rax+0x10],r9
    650104bc:	mov    rax,QWORD PTR [rbx+0x8]
    650104c0:	mov    QWORD PTR [r9+0x8],rax
    650104c4:	movzx  ecx,BYTE PTR [r9+0x68]
    650104c9:	movzx  eax,BYTE PTR [rbx+0x68]
    650104cd:	mov    BYTE PTR [r9+0x68],al
    650104d1:	mov    BYTE PTR [rbx+0x68],cl
    650104d4:	cmp    BYTE PTR [rbx+0x68],0x1
    650104d8:	jne    0x650107c3
    650104de:	mov    rax,QWORD PTR [rdi+0x8]
    650104e2:	cmp    r8,QWORD PTR [rax+0x8]
    650104e6:	je     0x650107be
    650104ec:	data16 data16 xchg ax,ax
    650104f0:	cmp    BYTE PTR [r8+0x68],0x1
    650104f5:	jne    0x650107be
    650104fb:	mov    rcx,QWORD PTR [rdx]
    650104fe:	cmp    r8,rcx
    65010501:	jne    0x6501059b
    65010507:	mov    rcx,QWORD PTR [rdx+0x10]
    6501050b:	cmp    BYTE PTR [rcx+0x68],0x0
    6501050f:	jne    0x65010566
    65010511:	mov    BYTE PTR [rcx+0x68],0x1
    65010515:	mov    BYTE PTR [rdx+0x68],0x0
    65010519:	mov    rcx,QWORD PTR [rdx+0x10]
    6501051d:	mov    rax,QWORD PTR [rcx]
    65010520:	mov    QWORD PTR [rdx+0x10],rax
    65010524:	mov    rax,QWORD PTR [rcx]
    65010527:	cmp    BYTE PTR [rax+0x69],0x0
    6501052b:	jne    0x65010531
    6501052d:	mov    QWORD PTR [rax+0x8],rdx
    65010531:	mov    rax,QWORD PTR [rdx+0x8]
    65010535:	mov    QWORD PTR [rcx+0x8],rax
    65010539:	mov    rax,QWORD PTR [rdi+0x8]
    6501053d:	cmp    rdx,QWORD PTR [rax+0x8]
    65010541:	jne    0x65010549
    65010543:	mov    QWORD PTR [rax+0x8],rcx
    65010547:	jmp    0x6501055b
    65010549:	mov    rax,QWORD PTR [rdx+0x8]
    6501054d:	cmp    rdx,QWORD PTR [rax]
    65010550:	jne    0x65010557
    65010552:	mov    QWORD PTR [rax],rcx
    65010555:	jmp    0x6501055b
    65010557:	mov    QWORD PTR [rax+0x10],rcx
    6501055b:	mov    QWORD PTR [rcx],rdx
    6501055e:	mov    QWORD PTR [rdx+0x8],rcx
    65010562:	mov    rcx,QWORD PTR [rdx+0x10]
    65010566:	cmp    BYTE PTR [rcx+0x69],0x0
    6501056a:	je     0x65010574
    6501056c:	mov    r8,rdx
    6501056f:	jmp    0x65010624
    65010574:	mov    rax,QWORD PTR [rcx]
    65010577:	cmp    BYTE PTR [rax+0x68],0x1
    6501057b:	jne    0x6501063b
    65010581:	mov    rax,QWORD PTR [rcx+0x10]
    65010585:	cmp    BYTE PTR [rax+0x68],0x1
    65010589:	jne    0x6501063b
    6501058f:	mov    BYTE PTR [rcx+0x68],0x0
    65010593:	mov    r8,rdx
    65010596:	jmp    0x65010624
    6501059b:	cmp    BYTE PTR [rcx+0x68],0x0
    6501059f:	jne    0x650105f7
    650105a1:	mov    BYTE PTR [rcx+0x68],0x1
    650105a5:	mov    BYTE PTR [rdx+0x68],0x0
    650105a9:	mov    rcx,QWORD PTR [rdx]
    650105ac:	mov    rax,QWORD PTR [rcx+0x10]
    650105b0:	mov    QWORD PTR [rdx],rax
    650105b3:	mov    rax,QWORD PTR [rcx+0x10]
    650105b7:	cmp    BYTE PTR [rax+0x69],0x0
    650105bb:	jne    0x650105c1
    650105bd:	mov    QWORD PTR [rax+0x8],rdx
    650105c1:	mov    rax,QWORD PTR [rdx+0x8]
    650105c5:	mov    QWORD PTR [rcx+0x8],rax
    650105c9:	mov    rax,QWORD PTR [rdi+0x8]
    650105cd:	cmp    rdx,QWORD PTR [rax+0x8]
    650105d1:	jne    0x650105d9
    650105d3:	mov    QWORD PTR [rax+0x8],rcx
    650105d7:	jmp    0x650105ec
    650105d9:	mov    rax,QWORD PTR [rdx+0x8]
    650105dd:	cmp    rdx,QWORD PTR [rax+0x10]
    650105e1:	jne    0x650105e9
    650105e3:	mov    QWORD PTR [rax+0x10],rcx
    650105e7:	jmp    0x650105ec
    650105e9:	mov    QWORD PTR [rax],rcx
    650105ec:	mov    QWORD PTR [rcx+0x10],rdx
    650105f0:	mov    QWORD PTR [rdx+0x8],rcx
    650105f4:	mov    rcx,QWORD PTR [rdx]
    650105f7:	cmp    BYTE PTR [rcx+0x69],0x0
    650105fb:	je     0x65010602
    650105fd:	mov    r8,rdx
    65010600:	jmp    0x65010624
    65010602:	mov    rax,QWORD PTR [rcx+0x10]
    65010606:	cmp    BYTE PTR [rax+0x68],0x1
    6501060a:	jne    0x65010700
    65010610:	mov    rax,QWORD PTR [rcx]
    65010613:	cmp    BYTE PTR [rax+0x68],0x1
    65010617:	jne    0x65010700
    6501061d:	mov    BYTE PTR [rcx+0x68],0x0
    65010621:	mov    r8,rdx
    65010624:	mov    rdx,QWORD PTR [rdx+0x8]
    65010628:	mov    rax,QWORD PTR [rdi+0x8]
    6501062c:	cmp    r8,QWORD PTR [rax+0x8]
    65010630:	je     0x650107be
    65010636:	jmp    0x650104f0
    6501063b:	mov    rax,QWORD PTR [rcx+0x10]
    6501063f:	cmp    BYTE PTR [rax+0x68],0x1
    65010643:	jne    0x6501069f
    65010645:	mov    rax,QWORD PTR [rcx]
    65010648:	mov    BYTE PTR [rax+0x68],0x1
    6501064c:	mov    BYTE PTR [rcx+0x68],0x0
    65010650:	mov    r9,QWORD PTR [rcx]
    65010653:	mov    rax,QWORD PTR [r9+0x10]
    65010657:	mov    QWORD PTR [rcx],rax
    6501065a:	mov    rax,QWORD PTR [r9+0x10]
    6501065e:	cmp    BYTE PTR [rax+0x69],0x0
    65010662:	jne    0x65010668
    65010664:	mov    QWORD PTR [rax+0x8],rcx
    65010668:	mov    rax,QWORD PTR [rcx+0x8]
    6501066c:	mov    QWORD PTR [r9+0x8],rax
    65010670:	mov    rax,QWORD PTR [rdi+0x8]
    65010674:	cmp    rcx,QWORD PTR [rax+0x8]
    65010678:	jne    0x65010680
    6501067a:	mov    QWORD PTR [rax+0x8],r9
    6501067e:	jmp    0x65010693
    65010680:	mov    rax,QWORD PTR [rcx+0x8]
    65010684:	cmp    rcx,QWORD PTR [rax+0x10]
    65010688:	jne    0x65010690
    6501068a:	mov    QWORD PTR [rax+0x10],r9
    6501068e:	jmp    0x65010693
    65010690:	mov    QWORD PTR [rax],r9
    65010693:	mov    QWORD PTR [r9+0x10],rcx
    65010697:	mov    QWORD PTR [rcx+0x8],r9
    6501069b:	mov    rcx,QWORD PTR [rdx+0x10]
    6501069f:	movzx  eax,BYTE PTR [rdx+0x68]
    650106a3:	mov    BYTE PTR [rcx+0x68],al
    650106a6:	mov    BYTE PTR [rdx+0x68],0x1
    650106aa:	mov    rax,QWORD PTR [rcx+0x10]
    650106ae:	mov    BYTE PTR [rax+0x68],0x1
    650106b2:	mov    rcx,QWORD PTR [rdx+0x10]
    650106b6:	mov    rax,QWORD PTR [rcx]
    650106b9:	mov    QWORD PTR [rdx+0x10],rax
    650106bd:	mov    rax,QWORD PTR [rcx]
    650106c0:	cmp    BYTE PTR [rax+0x69],0x0
    650106c4:	jne    0x650106ca
    650106c6:	mov    QWORD PTR [rax+0x8],rdx
    650106ca:	mov    rax,QWORD PTR [rdx+0x8]
    650106ce:	mov    QWORD PTR [rcx+0x8],rax
    650106d2:	mov    rax,QWORD PTR [rdi+0x8]
    650106d6:	cmp    rdx,QWORD PTR [rax+0x8]
    650106da:	jne    0x650106e2
    650106dc:	mov    QWORD PTR [rax+0x8],rcx
    650106e0:	jmp    0x650106f4
    650106e2:	mov    rax,QWORD PTR [rdx+0x8]
    650106e6:	cmp    rdx,QWORD PTR [rax]
    650106e9:	jne    0x650106f0
    650106eb:	mov    QWORD PTR [rax],rcx
    650106ee:	jmp    0x650106f4
    650106f0:	mov    QWORD PTR [rax+0x10],rcx
    650106f4:	mov    QWORD PTR [rcx],rdx
    650106f7:	mov    QWORD PTR [rdx+0x8],rcx
    650106fb:	jmp    0x650107be
    65010700:	mov    rax,QWORD PTR [rcx]
    65010703:	cmp    BYTE PTR [rax+0x68],0x1
    65010707:	jne    0x65010761
    65010709:	mov    rax,QWORD PTR [rcx+0x10]
    6501070d:	mov    BYTE PTR [rax+0x68],0x1
    65010711:	mov    BYTE PTR [rcx+0x68],0x0
    65010715:	mov    r9,QWORD PTR [rcx+0x10]
    65010719:	mov    rax,QWORD PTR [r9]
    6501071c:	mov    QWORD PTR [rcx+0x10],rax
    65010720:	mov    rax,QWORD PTR [r9]
    65010723:	cmp    BYTE PTR [rax+0x69],0x0
    65010727:	jne    0x6501072d
    65010729:	mov    QWORD PTR [rax+0x8],rcx
    6501072d:	mov    rax,QWORD PTR [rcx+0x8]
    65010731:	mov    QWORD PTR [r9+0x8],rax
    65010735:	mov    rax,QWORD PTR [rdi+0x8]
    65010739:	cmp    rcx,QWORD PTR [rax+0x8]
    6501073d:	jne    0x65010745
    6501073f:	mov    QWORD PTR [rax+0x8],r9
    65010743:	jmp    0x65010757
    65010745:	mov    rax,QWORD PTR [rcx+0x8]
    65010749:	cmp    rcx,QWORD PTR [rax]
    6501074c:	jne    0x65010753
    6501074e:	mov    QWORD PTR [rax],r9
    65010751:	jmp    0x65010757
    65010753:	mov    QWORD PTR [rax+0x10],r9
    65010757:	mov    QWORD PTR [r9],rcx
    6501075a:	mov    QWORD PTR [rcx+0x8],r9
    6501075e:	mov    rcx,QWORD PTR [rdx]
    65010761:	movzx  eax,BYTE PTR [rdx+0x68]
    65010765:	mov    BYTE PTR [rcx+0x68],al
    65010768:	mov    BYTE PTR [rdx+0x68],0x1
    6501076c:	mov    rax,QWORD PTR [rcx]
    6501076f:	mov    BYTE PTR [rax+0x68],0x1
    65010773:	mov    rcx,QWORD PTR [rdx]
    65010776:	mov    rax,QWORD PTR [rcx+0x10]
    6501077a:	mov    QWORD PTR [rdx],rax
    6501077d:	mov    rax,QWORD PTR [rcx+0x10]
    65010781:	cmp    BYTE PTR [rax+0x69],0x0
    65010785:	jne    0x6501078b
    65010787:	mov    QWORD PTR [rax+0x8],rdx
    6501078b:	mov    rax,QWORD PTR [rdx+0x8]
    6501078f:	mov    QWORD PTR [rcx+0x8],rax
    65010793:	mov    rax,QWORD PTR [rdi+0x8]
    65010797:	cmp    rdx,QWORD PTR [rax+0x8]
    6501079b:	jne    0x650107a3
    6501079d:	mov    QWORD PTR [rax+0x8],rcx
    650107a1:	jmp    0x650107b6
    650107a3:	mov    rax,QWORD PTR [rdx+0x8]
    650107a7:	cmp    rdx,QWORD PTR [rax+0x10]
    650107ab:	jne    0x650107b3
    650107ad:	mov    QWORD PTR [rax+0x10],rcx
    650107b1:	jmp    0x650107b6
    650107b3:	mov    QWORD PTR [rax],rcx
    650107b6:	mov    QWORD PTR [rcx+0x10],rdx
    650107ba:	mov    QWORD PTR [rdx+0x8],rcx
    650107be:	mov    BYTE PTR [r8+0x68],0x1
    650107c3:	cmp    QWORD PTR [rbx+0x60],0x10
    650107c8:	jb     0x650107d3
    650107ca:	mov    rcx,QWORD PTR [rbx+0x48]
    650107ce:	call   0x6501d190
    650107d3:	mov    QWORD PTR [rbx+0x60],0xf
    650107db:	mov    QWORD PTR [rbx+0x58],0x0
    650107e3:	mov    BYTE PTR [rbx+0x48],0x0
    650107e7:	cmp    QWORD PTR [rbx+0x38],0x10
    650107ec:	jb     0x650107f7
    650107ee:	mov    rcx,QWORD PTR [rbx+0x20]
    650107f2:	call   0x6501d190
    650107f7:	mov    QWORD PTR [rbx+0x38],0xf
    650107ff:	mov    QWORD PTR [rbx+0x30],0x0
    65010807:	mov    BYTE PTR [rbx+0x20],0x0
    6501080b:	mov    rcx,rbx
    6501080e:	call   0x6501d190
    65010813:	mov    rax,QWORD PTR [rdi+0x10]
    65010817:	test   rax,rax
    6501081a:	je     0x65010824
    6501081c:	add    rax,0xffffffffffffffff
    65010820:	mov    QWORD PTR [rdi+0x10],rax
    65010824:	mov    rax,QWORD PTR [rsi]
    65010827:	mov    QWORD PTR [r12],rax
    6501082b:	mov    rax,QWORD PTR [rsi+0x8]
    6501082f:	mov    QWORD PTR [r12+0x8],rax
    65010834:	mov    rax,r12
    65010837:	lea    r11,[rsp+0x90]
    6501083f:	mov    rbx,QWORD PTR [r11+0x10]
    65010843:	mov    rsi,QWORD PTR [r11+0x18]
    65010847:	mov    rdi,QWORD PTR [r11+0x20]
    6501084b:	mov    rsp,r11
    6501084e:	pop    r12
    65010850:	ret    
    65010851:	int3   
    65010852:	int3   
    65010853:	int3   
    65010854:	int3   
    65010855:	int3   
    65010856:	int3   
    65010857:	int3   
    65010858:	int3   
    65010859:	int3   
    6501085a:	int3   
    6501085b:	int3   
    6501085c:	int3   
    6501085d:	int3   
    6501085e:	int3   
    6501085f:	int3   
    65010860:	rex push rbp
    65010862:	sub    rsp,0x20
    65010866:	mov    rbp,rdx
    65010869:	lea    rcx,[rbp+0x28]
    6501086d:	call   0x65001c70
    65010872:	add    rsp,0x20
    65010876:	pop    rbp
    65010877:	ret    
    65010878:	int3   
    65010879:	int3   
    6501087a:	int3   
    6501087b:	int3   
    6501087c:	int3   
    6501087d:	int3   
    6501087e:	int3   
    6501087f:	int3   
    65010880:	rex push rbp
    65010882:	sub    rsp,0x20
    65010886:	mov    rbp,rdx
    65010889:	lea    rcx,[rbp+0x50]
    6501088d:	call   0x6501d320
    65010892:	add    rsp,0x20
    65010896:	pop    rbp
    65010897:	ret    
    65010898:	int3   
    65010899:	int3   
    6501089a:	int3   
    6501089b:	int3   
    6501089c:	int3   
    6501089d:	int3   
    6501089e:	int3   
    6501089f:	int3   
    650108a0:	mov    QWORD PTR [rsp+0x8],rbx
    650108a5:	mov    QWORD PTR [rsp+0x10],rbp
    650108aa:	mov    QWORD PTR [rsp+0x18],rsi
    650108af:	push   rdi
    650108b0:	sub    rsp,0x20
    650108b4:	mov    rax,QWORD PTR [rcx+0x8]
    650108b8:	xor    ebp,ebp
    650108ba:	mov    rdi,rcx
    650108bd:	mov    rbx,QWORD PTR [rax+0x8]
    650108c1:	mov    rsi,rbx
    650108c4:	cmp    BYTE PTR [rbx+0x69],bpl
    650108c8:	jne    0x65010930
    650108ca:	data16 xchg ax,ax
    650108cd:	data16 xchg ax,ax
    650108d0:	mov    rdx,QWORD PTR [rsi+0x10]
    650108d4:	mov    rcx,rdi
    650108d7:	call   0x65011210
    650108dc:	cmp    QWORD PTR [rbx+0x60],0x10
    650108e1:	mov    rsi,QWORD PTR [rsi]
    650108e4:	jb     0x650108ef
    650108e6:	mov    rcx,QWORD PTR [rbx+0x48]
    650108ea:	call   0x6501d190
    650108ef:	mov    QWORD PTR [rbx+0x60],0xf
    650108f7:	mov    QWORD PTR [rbx+0x58],rbp
    650108fb:	mov    BYTE PTR [rbx+0x48],bpl
    650108ff:	cmp    QWORD PTR [rbx+0x38],0x10
    65010904:	jb     0x6501090f
    65010906:	mov    rcx,QWORD PTR [rbx+0x20]
    6501090a:	call   0x6501d190
    6501090f:	mov    QWORD PTR [rbx+0x38],0xf
    65010917:	mov    QWORD PTR [rbx+0x30],rbp
    6501091b:	mov    rcx,rbx
    6501091e:	mov    BYTE PTR [rbx+0x20],bpl
    65010922:	call   0x6501d190
    65010927:	cmp    BYTE PTR [rsi+0x69],bpl
    6501092b:	mov    rbx,rsi
    6501092e:	je     0x650108d0
    65010930:	mov    rax,QWORD PTR [rdi+0x8]
    65010934:	mov    rbx,QWORD PTR [rsp+0x30]
    65010939:	mov    rsi,QWORD PTR [rsp+0x40]
    6501093e:	mov    QWORD PTR [rax+0x8],rax
    65010942:	mov    rax,QWORD PTR [rdi+0x8]
    65010946:	mov    QWORD PTR [rdi+0x10],rbp
    6501094a:	mov    rbp,QWORD PTR [rsp+0x38]
    6501094f:	mov    QWORD PTR [rax],rax
    65010952:	mov    rax,QWORD PTR [rdi+0x8]
    65010956:	mov    QWORD PTR [rax+0x10],rax
    6501095a:	add    rsp,0x20
    6501095e:	pop    rdi
    6501095f:	ret    
    65010960:	sub    rsp,0x38
    65010964:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501096d:	mov    ecx,0x70
    65010972:	call   0x6501da50
    65010977:	mov    QWORD PTR [rsp+0x48],rax
    6501097c:	test   rax,rax
    6501097f:	je     0x65010988
    65010981:	xor    ecx,ecx
    65010983:	mov    QWORD PTR [rax],rcx
    65010986:	jmp    0x6501098a
    65010988:	xor    ecx,ecx
    6501098a:	lea    rdx,[rax+0x8]
    6501098e:	test   rdx,rdx
    65010991:	je     0x65010996
    65010993:	mov    QWORD PTR [rdx],rcx
    65010996:	lea    rdx,[rax+0x10]
    6501099a:	test   rdx,rdx
    6501099d:	je     0x650109a2
    6501099f:	mov    QWORD PTR [rdx],rcx
    650109a2:	mov    BYTE PTR [rax+0x68],0x1
    650109a6:	mov    BYTE PTR [rax+0x69],0x0
    650109aa:	add    rsp,0x38
    650109ae:	ret    
    650109af:	int3   
    650109b0:	mov    QWORD PTR [rsp+0x10],rdx
    650109b5:	push   rbp
    650109b6:	sub    rsp,0x20
    650109ba:	mov    rbp,rdx
    650109bd:	mov    rcx,QWORD PTR [rbp+0x48]
    650109c1:	call   0x6501d190
    650109c6:	xor    edx,edx
    650109c8:	xor    ecx,ecx
    650109ca:	call   0x6501daf0
    650109cf:	nop
    650109d0:	add    rsp,0x20
    650109d4:	pop    rbp
    650109d5:	ret    
    650109d6:	int3   
    650109d7:	int3   
    650109d8:	int3   
    650109d9:	int3   
    650109da:	int3   
    650109db:	int3   
    650109dc:	int3   
    650109dd:	int3   
    650109de:	int3   
    650109df:	int3   
    650109e0:	sub    rsp,0x48
    650109e4:	test   rdx,rdx
    650109e7:	mov    r8,rdx
    650109ea:	jne    0x650109fa
    650109ec:	lea    rcx,[r8+r8*1]
    650109f0:	call   0x6501da50
    650109f5:	add    rsp,0x48
    650109f9:	ret    
    650109fa:	xor    edx,edx
    650109fc:	or     rax,0xffffffffffffffff
    65010a00:	div    r8
    65010a03:	cmp    rax,0x2
    65010a07:	jae    0x650109ec
    65010a09:	xor    r8d,r8d
    65010a0c:	lea    rdx,[rsp+0x58]
    65010a11:	lea    rcx,[rsp+0x20]
    65010a16:	mov    QWORD PTR [rsp+0x58],r8
    65010a1b:	call   0x6501d1c0
    65010a20:	lea    r11,[rip+0x246e1]        # 0x65035108
    65010a27:	lea    rdx,[rip+0x30712]        # 0x65041140
    65010a2e:	lea    rcx,[rsp+0x20]
    65010a33:	mov    QWORD PTR [rsp+0x20],r11
    65010a38:	call   0x6501daf0
    65010a3d:	int3   
    65010a3e:	int3   
    65010a3f:	int3   
    65010a40:	mov    rax,rsp
    65010a43:	push   r12
    65010a45:	sub    rsp,0x90
    65010a4c:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65010a55:	mov    QWORD PTR [rax+0x8],rbx
    65010a59:	mov    QWORD PTR [rax+0x10],rsi
    65010a5d:	mov    QWORD PTR [rax+0x18],rdi
    65010a61:	mov    rsi,r8
    65010a64:	mov    r12,rdx
    65010a67:	mov    rdi,rcx
    65010a6a:	mov    rbx,QWORD PTR [r8+0x8]
    65010a6e:	cmp    BYTE PTR [rbx+0x69],0x0
    65010a72:	je     0x65010b49
    65010a78:	mov    QWORD PTR [rax-0x50],0xf
    65010a80:	mov    QWORD PTR [rax-0x58],0x0
    65010a88:	mov    BYTE PTR [rax-0x68],0x0
    65010a8c:	xor    r8d,r8d
    65010a8f:	lea    edx,[r8+0x1b]
    65010a93:	lea    rcx,[rax-0x70]
    65010a97:	call   0x65002330
    65010a9c:	lea    rcx,[rsp+0x30]
    65010aa1:	mov    rdx,QWORD PTR [rsp+0x48]
    65010aa6:	cmp    rdx,0x10
    65010aaa:	cmovae rcx,QWORD PTR [rsp+0x30]
    65010ab0:	mov    r9d,0x1b
    65010ab6:	lea    r8,[rip+0x2819b]        # 0x65038c58
    65010abd:	call   0x6501d640
    65010ac2:	mov    QWORD PTR [rsp+0x40],0x1b
    65010acb:	lea    rax,[rsp+0x30]
    65010ad0:	cmp    QWORD PTR [rsp+0x48],0x10
    65010ad6:	cmovae rax,QWORD PTR [rsp+0x30]
    65010adc:	mov    BYTE PTR [rax+0x1b],0x0
    65010ae0:	lea    rcx,[rsp+0x50]
    65010ae5:	call   0x6501d1a0
    65010aea:	nop
    65010aeb:	lea    rax,[rip+0x2462e]        # 0x65035120
    65010af2:	mov    QWORD PTR [rsp+0x50],rax
    65010af7:	mov    QWORD PTR [rsp+0x88],0xf
    65010b03:	mov    QWORD PTR [rsp+0x80],0x0
    65010b0f:	mov    BYTE PTR [rsp+0x70],0x0
    65010b14:	or     r9,0xffffffffffffffff
    65010b18:	xor    r8d,r8d
    65010b1b:	lea    rdx,[rsp+0x28]
    65010b20:	lea    rcx,[rsp+0x68]
    65010b25:	call   0x65001e20
    65010b2a:	nop
    65010b2b:	lea    rax,[rip+0x2461e]        # 0x65035150
    65010b32:	mov    QWORD PTR [rsp+0x50],rax
    65010b37:	lea    rdx,[rip+0x306f2]        # 0x65041230
    65010b3e:	lea    rcx,[rsp+0x50]
    65010b43:	call   0x6501daf0
    65010b48:	nop
    65010b49:	cmp    QWORD PTR [r8],0x0
    65010b4d:	jne    0x65010b54
    65010b4f:	call   0x6501d960
    65010b54:	mov    rax,QWORD PTR [rsi+0x8]
    65010b58:	cmp    BYTE PTR [rax+0x69],0x0
    65010b5c:	je     0x65010b65
    65010b5e:	call   0x6501d960
    65010b63:	jmp    0x65010bbc
    65010b65:	mov    rcx,QWORD PTR [rax+0x10]
    65010b69:	cmp    BYTE PTR [rcx+0x69],0x0
    65010b6d:	jne    0x65010b92
    65010b6f:	mov    rax,QWORD PTR [rcx]
    65010b72:	cmp    BYTE PTR [rax+0x69],0x0
    65010b76:	jne    0x65010b8c
    65010b78:	data16 data16 xchg ax,ax
    65010b7c:	data16 data16 xchg ax,ax
    65010b80:	mov    rcx,rax
    65010b83:	mov    rax,QWORD PTR [rax]
    65010b86:	cmp    BYTE PTR [rax+0x69],0x0
    65010b8a:	je     0x65010b80
    65010b8c:	mov    QWORD PTR [rsi+0x8],rcx
    65010b90:	jmp    0x65010bbc
    65010b92:	mov    rcx,QWORD PTR [rax+0x8]
    65010b96:	cmp    BYTE PTR [rcx+0x69],0x0
    65010b9a:	jne    0x65010bb8
    65010b9c:	data16 data16 xchg ax,ax
    65010ba0:	mov    rax,QWORD PTR [rcx+0x10]
    65010ba4:	cmp    QWORD PTR [rsi+0x8],rax
    65010ba8:	jne    0x65010bb8
    65010baa:	mov    QWORD PTR [rsi+0x8],rcx
    65010bae:	mov    rcx,QWORD PTR [rcx+0x8]
    65010bb2:	cmp    BYTE PTR [rcx+0x69],0x0
    65010bb6:	je     0x65010ba0
    65010bb8:	mov    QWORD PTR [rsi+0x8],rcx
    65010bbc:	mov    rcx,QWORD PTR [rbx]
    65010bbf:	cmp    BYTE PTR [rcx+0x69],0x0
    65010bc3:	je     0x65010bcb
    65010bc5:	mov    r8,QWORD PTR [rbx+0x10]
    65010bc9:	jmp    0x65010beb
    65010bcb:	mov    rax,QWORD PTR [rbx+0x10]
    65010bcf:	cmp    BYTE PTR [rax+0x69],0x0
    65010bd3:	je     0x65010bda
    65010bd5:	mov    r8,rcx
    65010bd8:	jmp    0x65010beb
    65010bda:	mov    r9,QWORD PTR [rsi+0x8]
    65010bde:	mov    r8,QWORD PTR [r9+0x10]
    65010be2:	cmp    r9,rbx
    65010be5:	jne    0x65010c93
    65010beb:	mov    rdx,QWORD PTR [rbx+0x8]
    65010bef:	cmp    BYTE PTR [r8+0x69],0x0
    65010bf4:	jne    0x65010bfa
    65010bf6:	mov    QWORD PTR [r8+0x8],rdx
    65010bfa:	mov    rax,QWORD PTR [rdi+0x8]
    65010bfe:	cmp    QWORD PTR [rax+0x8],rbx
    65010c02:	jne    0x65010c0a
    65010c04:	mov    QWORD PTR [rax+0x8],r8
    65010c08:	jmp    0x65010c18
    65010c0a:	cmp    QWORD PTR [rdx],rbx
    65010c0d:	jne    0x65010c14
    65010c0f:	mov    QWORD PTR [rdx],r8
    65010c12:	jmp    0x65010c18
    65010c14:	mov    QWORD PTR [rdx+0x10],r8
    65010c18:	mov    r9,QWORD PTR [rdi+0x8]
    65010c1c:	cmp    QWORD PTR [r9],rbx
    65010c1f:	jne    0x65010c4f
    65010c21:	cmp    BYTE PTR [r8+0x69],0x0
    65010c26:	je     0x65010c2d
    65010c28:	mov    rcx,rdx
    65010c2b:	jmp    0x65010c4c
    65010c2d:	mov    rcx,r8
    65010c30:	mov    rax,QWORD PTR [r8]
    65010c33:	cmp    BYTE PTR [rax+0x69],0x0
    65010c37:	jne    0x65010c4c
    65010c39:	data16 xchg ax,ax
    65010c3c:	data16 data16 xchg ax,ax
    65010c40:	mov    rcx,rax
    65010c43:	mov    rax,QWORD PTR [rax]
    65010c46:	cmp    BYTE PTR [rax+0x69],0x0
    65010c4a:	je     0x65010c40
    65010c4c:	mov    QWORD PTR [r9],rcx
    65010c4f:	mov    r9,QWORD PTR [rdi+0x8]
    65010c53:	cmp    QWORD PTR [r9+0x10],rbx
    65010c57:	jne    0x65010d04
    65010c5d:	cmp    BYTE PTR [r8+0x69],0x0
    65010c62:	je     0x65010c69
    65010c64:	mov    rcx,rdx
    65010c67:	jmp    0x65010c8d
    65010c69:	mov    rcx,r8
    65010c6c:	mov    rax,QWORD PTR [r8+0x10]
    65010c70:	cmp    BYTE PTR [rax+0x69],0x0
    65010c74:	jne    0x65010c8d
    65010c76:	data16 data16 xchg ax,ax
    65010c7a:	data16 xchg ax,ax
    65010c7d:	data16 xchg ax,ax
    65010c80:	mov    rcx,rax
    65010c83:	mov    rax,QWORD PTR [rax+0x10]
    65010c87:	cmp    BYTE PTR [rax+0x69],0x0
    65010c8b:	je     0x65010c80
    65010c8d:	mov    QWORD PTR [r9+0x10],rcx
    65010c91:	jmp    0x65010d04
    65010c93:	mov    QWORD PTR [rcx+0x8],r9
    65010c97:	mov    rax,QWORD PTR [rbx]
    65010c9a:	mov    QWORD PTR [r9],rax
    65010c9d:	cmp    r9,QWORD PTR [rbx+0x10]
    65010ca1:	jne    0x65010ca8
    65010ca3:	mov    rdx,r9
    65010ca6:	jmp    0x65010cca
    65010ca8:	mov    rdx,QWORD PTR [r9+0x8]
    65010cac:	cmp    BYTE PTR [r8+0x69],0x0
    65010cb1:	jne    0x65010cb7
    65010cb3:	mov    QWORD PTR [r8+0x8],rdx
    65010cb7:	mov    QWORD PTR [rdx],r8
    65010cba:	mov    rax,QWORD PTR [rbx+0x10]
    65010cbe:	mov    QWORD PTR [r9+0x10],rax
    65010cc2:	mov    rax,QWORD PTR [rbx+0x10]
    65010cc6:	mov    QWORD PTR [rax+0x8],r9
    65010cca:	mov    rax,QWORD PTR [rdi+0x8]
    65010cce:	cmp    QWORD PTR [rax+0x8],rbx
    65010cd2:	jne    0x65010cda
    65010cd4:	mov    QWORD PTR [rax+0x8],r9
    65010cd8:	jmp    0x65010cec
    65010cda:	mov    rax,QWORD PTR [rbx+0x8]
    65010cde:	cmp    QWORD PTR [rax],rbx
    65010ce1:	jne    0x65010ce8
    65010ce3:	mov    QWORD PTR [rax],r9
    65010ce6:	jmp    0x65010cec
    65010ce8:	mov    QWORD PTR [rax+0x10],r9
    65010cec:	mov    rax,QWORD PTR [rbx+0x8]
    65010cf0:	mov    QWORD PTR [r9+0x8],rax
    65010cf4:	movzx  ecx,BYTE PTR [r9+0x68]
    65010cf9:	movzx  eax,BYTE PTR [rbx+0x68]
    65010cfd:	mov    BYTE PTR [r9+0x68],al
    65010d01:	mov    BYTE PTR [rbx+0x68],cl
    65010d04:	cmp    BYTE PTR [rbx+0x68],0x1
    65010d08:	jne    0x65010ff3
    65010d0e:	mov    rax,QWORD PTR [rdi+0x8]
    65010d12:	cmp    r8,QWORD PTR [rax+0x8]
    65010d16:	je     0x65010fee
    65010d1c:	data16 data16 xchg ax,ax
    65010d20:	cmp    BYTE PTR [r8+0x68],0x1
    65010d25:	jne    0x65010fee
    65010d2b:	mov    rcx,QWORD PTR [rdx]
    65010d2e:	cmp    r8,rcx
    65010d31:	jne    0x65010dcb
    65010d37:	mov    rcx,QWORD PTR [rdx+0x10]
    65010d3b:	cmp    BYTE PTR [rcx+0x68],0x0
    65010d3f:	jne    0x65010d96
    65010d41:	mov    BYTE PTR [rcx+0x68],0x1
    65010d45:	mov    BYTE PTR [rdx+0x68],0x0
    65010d49:	mov    rcx,QWORD PTR [rdx+0x10]
    65010d4d:	mov    rax,QWORD PTR [rcx]
    65010d50:	mov    QWORD PTR [rdx+0x10],rax
    65010d54:	mov    rax,QWORD PTR [rcx]
    65010d57:	cmp    BYTE PTR [rax+0x69],0x0
    65010d5b:	jne    0x65010d61
    65010d5d:	mov    QWORD PTR [rax+0x8],rdx
    65010d61:	mov    rax,QWORD PTR [rdx+0x8]
    65010d65:	mov    QWORD PTR [rcx+0x8],rax
    65010d69:	mov    rax,QWORD PTR [rdi+0x8]
    65010d6d:	cmp    rdx,QWORD PTR [rax+0x8]
    65010d71:	jne    0x65010d79
    65010d73:	mov    QWORD PTR [rax+0x8],rcx
    65010d77:	jmp    0x65010d8b
    65010d79:	mov    rax,QWORD PTR [rdx+0x8]
    65010d7d:	cmp    rdx,QWORD PTR [rax]
    65010d80:	jne    0x65010d87
    65010d82:	mov    QWORD PTR [rax],rcx
    65010d85:	jmp    0x65010d8b
    65010d87:	mov    QWORD PTR [rax+0x10],rcx
    65010d8b:	mov    QWORD PTR [rcx],rdx
    65010d8e:	mov    QWORD PTR [rdx+0x8],rcx
    65010d92:	mov    rcx,QWORD PTR [rdx+0x10]
    65010d96:	cmp    BYTE PTR [rcx+0x69],0x0
    65010d9a:	je     0x65010da4
    65010d9c:	mov    r8,rdx
    65010d9f:	jmp    0x65010e54
    65010da4:	mov    rax,QWORD PTR [rcx]
    65010da7:	cmp    BYTE PTR [rax+0x68],0x1
    65010dab:	jne    0x65010e6b
    65010db1:	mov    rax,QWORD PTR [rcx+0x10]
    65010db5:	cmp    BYTE PTR [rax+0x68],0x1
    65010db9:	jne    0x65010e6b
    65010dbf:	mov    BYTE PTR [rcx+0x68],0x0
    65010dc3:	mov    r8,rdx
    65010dc6:	jmp    0x65010e54
    65010dcb:	cmp    BYTE PTR [rcx+0x68],0x0
    65010dcf:	jne    0x65010e27
    65010dd1:	mov    BYTE PTR [rcx+0x68],0x1
    65010dd5:	mov    BYTE PTR [rdx+0x68],0x0
    65010dd9:	mov    rcx,QWORD PTR [rdx]
    65010ddc:	mov    rax,QWORD PTR [rcx+0x10]
    65010de0:	mov    QWORD PTR [rdx],rax
    65010de3:	mov    rax,QWORD PTR [rcx+0x10]
    65010de7:	cmp    BYTE PTR [rax+0x69],0x0
    65010deb:	jne    0x65010df1
    65010ded:	mov    QWORD PTR [rax+0x8],rdx
    65010df1:	mov    rax,QWORD PTR [rdx+0x8]
    65010df5:	mov    QWORD PTR [rcx+0x8],rax
    65010df9:	mov    rax,QWORD PTR [rdi+0x8]
    65010dfd:	cmp    rdx,QWORD PTR [rax+0x8]
    65010e01:	jne    0x65010e09
    65010e03:	mov    QWORD PTR [rax+0x8],rcx
    65010e07:	jmp    0x65010e1c
    65010e09:	mov    rax,QWORD PTR [rdx+0x8]
    65010e0d:	cmp    rdx,QWORD PTR [rax+0x10]
    65010e11:	jne    0x65010e19
    65010e13:	mov    QWORD PTR [rax+0x10],rcx
    65010e17:	jmp    0x65010e1c
    65010e19:	mov    QWORD PTR [rax],rcx
    65010e1c:	mov    QWORD PTR [rcx+0x10],rdx
    65010e20:	mov    QWORD PTR [rdx+0x8],rcx
    65010e24:	mov    rcx,QWORD PTR [rdx]
    65010e27:	cmp    BYTE PTR [rcx+0x69],0x0
    65010e2b:	je     0x65010e32
    65010e2d:	mov    r8,rdx
    65010e30:	jmp    0x65010e54
    65010e32:	mov    rax,QWORD PTR [rcx+0x10]
    65010e36:	cmp    BYTE PTR [rax+0x68],0x1
    65010e3a:	jne    0x65010f30
    65010e40:	mov    rax,QWORD PTR [rcx]
    65010e43:	cmp    BYTE PTR [rax+0x68],0x1
    65010e47:	jne    0x65010f30
    65010e4d:	mov    BYTE PTR [rcx+0x68],0x0
    65010e51:	mov    r8,rdx
    65010e54:	mov    rdx,QWORD PTR [rdx+0x8]
    65010e58:	mov    rax,QWORD PTR [rdi+0x8]
    65010e5c:	cmp    r8,QWORD PTR [rax+0x8]
    65010e60:	je     0x65010fee
    65010e66:	jmp    0x65010d20
    65010e6b:	mov    rax,QWORD PTR [rcx+0x10]
    65010e6f:	cmp    BYTE PTR [rax+0x68],0x1
    65010e73:	jne    0x65010ecf
    65010e75:	mov    rax,QWORD PTR [rcx]
    65010e78:	mov    BYTE PTR [rax+0x68],0x1
    65010e7c:	mov    BYTE PTR [rcx+0x68],0x0
    65010e80:	mov    r9,QWORD PTR [rcx]
    65010e83:	mov    rax,QWORD PTR [r9+0x10]
    65010e87:	mov    QWORD PTR [rcx],rax
    65010e8a:	mov    rax,QWORD PTR [r9+0x10]
    65010e8e:	cmp    BYTE PTR [rax+0x69],0x0
    65010e92:	jne    0x65010e98
    65010e94:	mov    QWORD PTR [rax+0x8],rcx
    65010e98:	mov    rax,QWORD PTR [rcx+0x8]
    65010e9c:	mov    QWORD PTR [r9+0x8],rax
    65010ea0:	mov    rax,QWORD PTR [rdi+0x8]
    65010ea4:	cmp    rcx,QWORD PTR [rax+0x8]
    65010ea8:	jne    0x65010eb0
    65010eaa:	mov    QWORD PTR [rax+0x8],r9
    65010eae:	jmp    0x65010ec3
    65010eb0:	mov    rax,QWORD PTR [rcx+0x8]
    65010eb4:	cmp    rcx,QWORD PTR [rax+0x10]
    65010eb8:	jne    0x65010ec0
    65010eba:	mov    QWORD PTR [rax+0x10],r9
    65010ebe:	jmp    0x65010ec3
    65010ec0:	mov    QWORD PTR [rax],r9
    65010ec3:	mov    QWORD PTR [r9+0x10],rcx
    65010ec7:	mov    QWORD PTR [rcx+0x8],r9
    65010ecb:	mov    rcx,QWORD PTR [rdx+0x10]
    65010ecf:	movzx  eax,BYTE PTR [rdx+0x68]
    65010ed3:	mov    BYTE PTR [rcx+0x68],al
    65010ed6:	mov    BYTE PTR [rdx+0x68],0x1
    65010eda:	mov    rax,QWORD PTR [rcx+0x10]
    65010ede:	mov    BYTE PTR [rax+0x68],0x1
    65010ee2:	mov    rcx,QWORD PTR [rdx+0x10]
    65010ee6:	mov    rax,QWORD PTR [rcx]
    65010ee9:	mov    QWORD PTR [rdx+0x10],rax
    65010eed:	mov    rax,QWORD PTR [rcx]
    65010ef0:	cmp    BYTE PTR [rax+0x69],0x0
    65010ef4:	jne    0x65010efa
    65010ef6:	mov    QWORD PTR [rax+0x8],rdx
    65010efa:	mov    rax,QWORD PTR [rdx+0x8]
    65010efe:	mov    QWORD PTR [rcx+0x8],rax
    65010f02:	mov    rax,QWORD PTR [rdi+0x8]
    65010f06:	cmp    rdx,QWORD PTR [rax+0x8]
    65010f0a:	jne    0x65010f12
    65010f0c:	mov    QWORD PTR [rax+0x8],rcx
    65010f10:	jmp    0x65010f24
    65010f12:	mov    rax,QWORD PTR [rdx+0x8]
    65010f16:	cmp    rdx,QWORD PTR [rax]
    65010f19:	jne    0x65010f20
    65010f1b:	mov    QWORD PTR [rax],rcx
    65010f1e:	jmp    0x65010f24
    65010f20:	mov    QWORD PTR [rax+0x10],rcx
    65010f24:	mov    QWORD PTR [rcx],rdx
    65010f27:	mov    QWORD PTR [rdx+0x8],rcx
    65010f2b:	jmp    0x65010fee
    65010f30:	mov    rax,QWORD PTR [rcx]
    65010f33:	cmp    BYTE PTR [rax+0x68],0x1
    65010f37:	jne    0x65010f91
    65010f39:	mov    rax,QWORD PTR [rcx+0x10]
    65010f3d:	mov    BYTE PTR [rax+0x68],0x1
    65010f41:	mov    BYTE PTR [rcx+0x68],0x0
    65010f45:	mov    r9,QWORD PTR [rcx+0x10]
    65010f49:	mov    rax,QWORD PTR [r9]
    65010f4c:	mov    QWORD PTR [rcx+0x10],rax
    65010f50:	mov    rax,QWORD PTR [r9]
    65010f53:	cmp    BYTE PTR [rax+0x69],0x0
    65010f57:	jne    0x65010f5d
    65010f59:	mov    QWORD PTR [rax+0x8],rcx
    65010f5d:	mov    rax,QWORD PTR [rcx+0x8]
    65010f61:	mov    QWORD PTR [r9+0x8],rax
    65010f65:	mov    rax,QWORD PTR [rdi+0x8]
    65010f69:	cmp    rcx,QWORD PTR [rax+0x8]
    65010f6d:	jne    0x65010f75
    65010f6f:	mov    QWORD PTR [rax+0x8],r9
    65010f73:	jmp    0x65010f87
    65010f75:	mov    rax,QWORD PTR [rcx+0x8]
    65010f79:	cmp    rcx,QWORD PTR [rax]
    65010f7c:	jne    0x65010f83
    65010f7e:	mov    QWORD PTR [rax],r9
    65010f81:	jmp    0x65010f87
    65010f83:	mov    QWORD PTR [rax+0x10],r9
    65010f87:	mov    QWORD PTR [r9],rcx
    65010f8a:	mov    QWORD PTR [rcx+0x8],r9
    65010f8e:	mov    rcx,QWORD PTR [rdx]
    65010f91:	movzx  eax,BYTE PTR [rdx+0x68]
    65010f95:	mov    BYTE PTR [rcx+0x68],al
    65010f98:	mov    BYTE PTR [rdx+0x68],0x1
    65010f9c:	mov    rax,QWORD PTR [rcx]
    65010f9f:	mov    BYTE PTR [rax+0x68],0x1
    65010fa3:	mov    rcx,QWORD PTR [rdx]
    65010fa6:	mov    rax,QWORD PTR [rcx+0x10]
    65010faa:	mov    QWORD PTR [rdx],rax
    65010fad:	mov    rax,QWORD PTR [rcx+0x10]
    65010fb1:	cmp    BYTE PTR [rax+0x69],0x0
    65010fb5:	jne    0x65010fbb
    65010fb7:	mov    QWORD PTR [rax+0x8],rdx
    65010fbb:	mov    rax,QWORD PTR [rdx+0x8]
    65010fbf:	mov    QWORD PTR [rcx+0x8],rax
    65010fc3:	mov    rax,QWORD PTR [rdi+0x8]
    65010fc7:	cmp    rdx,QWORD PTR [rax+0x8]
    65010fcb:	jne    0x65010fd3
    65010fcd:	mov    QWORD PTR [rax+0x8],rcx
    65010fd1:	jmp    0x65010fe6
    65010fd3:	mov    rax,QWORD PTR [rdx+0x8]
    65010fd7:	cmp    rdx,QWORD PTR [rax+0x10]
    65010fdb:	jne    0x65010fe3
    65010fdd:	mov    QWORD PTR [rax+0x10],rcx
    65010fe1:	jmp    0x65010fe6
    65010fe3:	mov    QWORD PTR [rax],rcx
    65010fe6:	mov    QWORD PTR [rcx+0x10],rdx
    65010fea:	mov    QWORD PTR [rdx+0x8],rcx
    65010fee:	mov    BYTE PTR [r8+0x68],0x1
    65010ff3:	cmp    QWORD PTR [rbx+0x60],0x8
    65010ff8:	jb     0x65011003
    65010ffa:	mov    rcx,QWORD PTR [rbx+0x48]
    65010ffe:	call   0x6501d190
    65011003:	mov    QWORD PTR [rbx+0x60],0x7
    6501100b:	mov    QWORD PTR [rbx+0x58],0x0
    65011013:	mov    WORD PTR [rbx+0x48],0x0
    65011019:	cmp    QWORD PTR [rbx+0x38],0x8
    6501101e:	jb     0x65011029
    65011020:	mov    rcx,QWORD PTR [rbx+0x20]
    65011024:	call   0x6501d190
    65011029:	mov    QWORD PTR [rbx+0x38],0x7
    65011031:	mov    QWORD PTR [rbx+0x30],0x0
    65011039:	mov    WORD PTR [rbx+0x20],0x0
    6501103f:	mov    rcx,rbx
    65011042:	call   0x6501d190
    65011047:	mov    rax,QWORD PTR [rdi+0x10]
    6501104b:	test   rax,rax
    6501104e:	je     0x65011058
    65011050:	add    rax,0xffffffffffffffff
    65011054:	mov    QWORD PTR [rdi+0x10],rax
    65011058:	mov    rax,QWORD PTR [rsi]
    6501105b:	mov    QWORD PTR [r12],rax
    6501105f:	mov    rax,QWORD PTR [rsi+0x8]
    65011063:	mov    QWORD PTR [r12+0x8],rax
    65011068:	mov    rax,r12
    6501106b:	lea    r11,[rsp+0x90]
    65011073:	mov    rbx,QWORD PTR [r11+0x10]
    65011077:	mov    rsi,QWORD PTR [r11+0x18]
    6501107b:	mov    rdi,QWORD PTR [r11+0x20]
    6501107f:	mov    rsp,r11
    65011082:	pop    r12
    65011084:	ret    
    65011085:	int3   
    65011086:	int3   
    65011087:	int3   
    65011088:	int3   
    65011089:	int3   
    6501108a:	int3   
    6501108b:	int3   
    6501108c:	int3   
    6501108d:	int3   
    6501108e:	int3   
    6501108f:	int3   
    65011090:	rex push rbp
    65011092:	sub    rsp,0x20
    65011096:	mov    rbp,rdx
    65011099:	lea    rcx,[rbp+0x28]
    6501109d:	call   0x65001c70
    650110a2:	add    rsp,0x20
    650110a6:	pop    rbp
    650110a7:	ret    
    650110a8:	int3   
    650110a9:	int3   
    650110aa:	int3   
    650110ab:	int3   
    650110ac:	int3   
    650110ad:	int3   
    650110ae:	int3   
    650110af:	int3   
    650110b0:	rex push rbp
    650110b2:	sub    rsp,0x20
    650110b6:	mov    rbp,rdx
    650110b9:	lea    rcx,[rbp+0x50]
    650110bd:	call   0x6501d320
    650110c2:	add    rsp,0x20
    650110c6:	pop    rbp
    650110c7:	ret    
    650110c8:	int3   
    650110c9:	int3   
    650110ca:	int3   
    650110cb:	int3   
    650110cc:	int3   
    650110cd:	int3   
    650110ce:	int3   
    650110cf:	int3   
    650110d0:	mov    QWORD PTR [rsp+0x8],rbx
    650110d5:	mov    QWORD PTR [rsp+0x10],rbp
    650110da:	mov    QWORD PTR [rsp+0x18],rsi
    650110df:	push   rdi
    650110e0:	sub    rsp,0x20
    650110e4:	mov    rax,QWORD PTR [rcx+0x8]
    650110e8:	xor    ebp,ebp
    650110ea:	mov    rdi,rcx
    650110ed:	mov    rbx,QWORD PTR [rax+0x8]
    650110f1:	mov    rsi,rbx
    650110f4:	cmp    BYTE PTR [rbx+0x69],bpl
    650110f8:	jne    0x65011160
    650110fa:	data16 xchg ax,ax
    650110fd:	data16 xchg ax,ax
    65011100:	mov    rdx,QWORD PTR [rsi+0x10]
    65011104:	mov    rcx,rdi
    65011107:	call   0x650112c0
    6501110c:	cmp    QWORD PTR [rbx+0x60],0x8
    65011111:	mov    rsi,QWORD PTR [rsi]
    65011114:	jb     0x6501111f
    65011116:	mov    rcx,QWORD PTR [rbx+0x48]
    6501111a:	call   0x6501d190
    6501111f:	mov    QWORD PTR [rbx+0x60],0x7
    65011127:	mov    QWORD PTR [rbx+0x58],rbp
    6501112b:	mov    WORD PTR [rbx+0x48],bp
    6501112f:	cmp    QWORD PTR [rbx+0x38],0x8
    65011134:	jb     0x6501113f
    65011136:	mov    rcx,QWORD PTR [rbx+0x20]
    6501113a:	call   0x6501d190
    6501113f:	mov    QWORD PTR [rbx+0x38],0x7
    65011147:	mov    QWORD PTR [rbx+0x30],rbp
    6501114b:	mov    rcx,rbx
    6501114e:	mov    WORD PTR [rbx+0x20],bp
    65011152:	call   0x6501d190
    65011157:	cmp    BYTE PTR [rsi+0x69],bpl
    6501115b:	mov    rbx,rsi
    6501115e:	je     0x65011100
    65011160:	mov    rax,QWORD PTR [rdi+0x8]
    65011164:	mov    rbx,QWORD PTR [rsp+0x30]
    65011169:	mov    rsi,QWORD PTR [rsp+0x40]
    6501116e:	mov    QWORD PTR [rax+0x8],rax
    65011172:	mov    rax,QWORD PTR [rdi+0x8]
    65011176:	mov    QWORD PTR [rdi+0x10],rbp
    6501117a:	mov    rbp,QWORD PTR [rsp+0x38]
    6501117f:	mov    QWORD PTR [rax],rax
    65011182:	mov    rax,QWORD PTR [rdi+0x8]
    65011186:	mov    QWORD PTR [rax+0x10],rax
    6501118a:	add    rsp,0x20
    6501118e:	pop    rdi
    6501118f:	ret    
    65011190:	sub    rsp,0x38
    65011194:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501119d:	mov    ecx,0x70
    650111a2:	call   0x6501da50
    650111a7:	mov    QWORD PTR [rsp+0x48],rax
    650111ac:	test   rax,rax
    650111af:	je     0x650111b8
    650111b1:	xor    ecx,ecx
    650111b3:	mov    QWORD PTR [rax],rcx
    650111b6:	jmp    0x650111ba
    650111b8:	xor    ecx,ecx
    650111ba:	lea    rdx,[rax+0x8]
    650111be:	test   rdx,rdx
    650111c1:	je     0x650111c6
    650111c3:	mov    QWORD PTR [rdx],rcx
    650111c6:	lea    rdx,[rax+0x10]
    650111ca:	test   rdx,rdx
    650111cd:	je     0x650111d2
    650111cf:	mov    QWORD PTR [rdx],rcx
    650111d2:	mov    BYTE PTR [rax+0x68],0x1
    650111d6:	mov    BYTE PTR [rax+0x69],0x0
    650111da:	add    rsp,0x38
    650111de:	ret    
    650111df:	int3   
    650111e0:	mov    QWORD PTR [rsp+0x10],rdx
    650111e5:	push   rbp
    650111e6:	sub    rsp,0x20
    650111ea:	mov    rbp,rdx
    650111ed:	mov    rcx,QWORD PTR [rbp+0x48]
    650111f1:	call   0x6501d190
    650111f6:	xor    edx,edx
    650111f8:	xor    ecx,ecx
    650111fa:	call   0x6501daf0
    650111ff:	nop
    65011200:	add    rsp,0x20
    65011204:	pop    rbp
    65011205:	ret    
    65011206:	int3   
    65011207:	int3   
    65011208:	int3   
    65011209:	int3   
    6501120a:	int3   
    6501120b:	int3   
    6501120c:	int3   
    6501120d:	int3   
    6501120e:	int3   
    6501120f:	int3   
    65011210:	mov    QWORD PTR [rsp+0x10],rbx
    65011215:	mov    QWORD PTR [rsp+0x18],rsi
    6501121a:	push   rdi
    6501121b:	sub    rsp,0x20
    6501121f:	cmp    BYTE PTR [rdx+0x69],0x0
    65011223:	mov    rbx,rdx
    65011226:	mov    rsi,rcx
    65011229:	mov    rdi,rdx
    6501122c:	jne    0x650112a5
    6501122e:	mov    QWORD PTR [rsp+0x30],rbp
    65011233:	xor    ebp,ebp
    65011235:	data16 data16 xchg ax,ax
    65011239:	data16 xchg ax,ax
    6501123c:	data16 data16 xchg ax,ax
    65011240:	mov    rdx,QWORD PTR [rdi+0x10]
    65011244:	mov    rcx,rsi
    65011247:	call   0x65011210
    6501124c:	cmp    QWORD PTR [rbx+0x60],0x10
    65011251:	mov    rdi,QWORD PTR [rdi]
    65011254:	jb     0x6501125f
    65011256:	mov    rcx,QWORD PTR [rbx+0x48]
    6501125a:	call   0x6501d190
    6501125f:	mov    QWORD PTR [rbx+0x60],0xf
    65011267:	mov    QWORD PTR [rbx+0x58],rbp
    6501126b:	mov    BYTE PTR [rbx+0x48],bpl
    6501126f:	cmp    QWORD PTR [rbx+0x38],0x10
    65011274:	jb     0x6501127f
    65011276:	mov    rcx,QWORD PTR [rbx+0x20]
    6501127a:	call   0x6501d190
    6501127f:	mov    QWORD PTR [rbx+0x38],0xf
    65011287:	mov    QWORD PTR [rbx+0x30],rbp
    6501128b:	mov    rcx,rbx
    6501128e:	mov    BYTE PTR [rbx+0x20],bpl
    65011292:	call   0x6501d190
    65011297:	cmp    BYTE PTR [rdi+0x69],bpl
    6501129b:	mov    rbx,rdi
    6501129e:	je     0x65011240
    650112a0:	mov    rbp,QWORD PTR [rsp+0x30]
    650112a5:	mov    rbx,QWORD PTR [rsp+0x38]
    650112aa:	mov    rsi,QWORD PTR [rsp+0x40]
    650112af:	add    rsp,0x20
    650112b3:	pop    rdi
    650112b4:	ret    
    650112b5:	int3   
    650112b6:	int3   
    650112b7:	int3   
    650112b8:	int3   
    650112b9:	int3   
    650112ba:	int3   
    650112bb:	int3   
    650112bc:	int3   
    650112bd:	int3   
    650112be:	int3   
    650112bf:	int3   
    650112c0:	mov    QWORD PTR [rsp+0x10],rbx
    650112c5:	mov    QWORD PTR [rsp+0x18],rsi
    650112ca:	push   rdi
    650112cb:	sub    rsp,0x20
    650112cf:	cmp    BYTE PTR [rdx+0x69],0x0
    650112d3:	mov    rbx,rdx
    650112d6:	mov    rsi,rcx
    650112d9:	mov    rdi,rdx
    650112dc:	jne    0x65011355
    650112de:	mov    QWORD PTR [rsp+0x30],rbp
    650112e3:	xor    ebp,ebp
    650112e5:	data16 data16 xchg ax,ax
    650112e9:	data16 xchg ax,ax
    650112ec:	data16 data16 xchg ax,ax
    650112f0:	mov    rdx,QWORD PTR [rdi+0x10]
    650112f4:	mov    rcx,rsi
    650112f7:	call   0x650112c0
    650112fc:	cmp    QWORD PTR [rbx+0x60],0x8
    65011301:	mov    rdi,QWORD PTR [rdi]
    65011304:	jb     0x6501130f
    65011306:	mov    rcx,QWORD PTR [rbx+0x48]
    6501130a:	call   0x6501d190
    6501130f:	mov    QWORD PTR [rbx+0x60],0x7
    65011317:	mov    QWORD PTR [rbx+0x58],rbp
    6501131b:	mov    WORD PTR [rbx+0x48],bp
    6501131f:	cmp    QWORD PTR [rbx+0x38],0x8
    65011324:	jb     0x6501132f
    65011326:	mov    rcx,QWORD PTR [rbx+0x20]
    6501132a:	call   0x6501d190
    6501132f:	mov    QWORD PTR [rbx+0x38],0x7
    65011337:	mov    QWORD PTR [rbx+0x30],rbp
    6501133b:	mov    rcx,rbx
    6501133e:	mov    WORD PTR [rbx+0x20],bp
    65011342:	call   0x6501d190
    65011347:	cmp    BYTE PTR [rdi+0x69],bpl
    6501134b:	mov    rbx,rdi
    6501134e:	je     0x650112f0
    65011350:	mov    rbp,QWORD PTR [rsp+0x30]
    65011355:	mov    rbx,QWORD PTR [rsp+0x38]
    6501135a:	mov    rsi,QWORD PTR [rsp+0x40]
    6501135f:	add    rsp,0x20
    65011363:	pop    rdi
    65011364:	ret    
    65011365:	int3   
    65011366:	int3   
    65011367:	int3   
    65011368:	int3   
    65011369:	int3   
    6501136a:	int3   
    6501136b:	int3   
    6501136c:	int3   
    6501136d:	int3   
    6501136e:	int3   
    6501136f:	int3   
    65011370:	rex push rdi
    65011372:	sub    rsp,0x50
    65011376:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501137f:	mov    QWORD PTR [rsp+0x68],rbx
    65011384:	mov    QWORD PTR [rsp+0x70],rsi
    65011389:	mov    rbx,r8
    6501138c:	mov    rsi,rcx
    6501138f:	mov    DWORD PTR [rsp+0x60],0x0
    65011397:	mov    QWORD PTR [rsp+0x48],0xf
    650113a0:	mov    QWORD PTR [rsp+0x40],0x0
    650113a9:	mov    BYTE PTR [rsp+0x30],0x0
    650113ae:	or     r9,0xffffffffffffffff
    650113b2:	xor    r8d,r8d
    650113b5:	lea    rcx,[rsp+0x28]
    650113ba:	call   0x65001e20
    650113bf:	nop
    650113c0:	xor    eax,eax
    650113c2:	or     rcx,0xffffffffffffffff
    650113c6:	mov    rdi,rbx
    650113c9:	repnz scas al,BYTE PTR es:[rdi]
    650113cb:	not    rcx
    650113ce:	lea    r8,[rcx-0x1]
    650113d2:	mov    rdx,rbx
    650113d5:	lea    rcx,[rsp+0x28]
    650113da:	call   0x650116f0
    650113df:	mov    QWORD PTR [rsi+0x20],0xf
    650113e7:	mov    QWORD PTR [rsi+0x18],0x0
    650113ef:	mov    BYTE PTR [rsi+0x8],0x0
    650113f3:	or     r9,0xffffffffffffffff
    650113f7:	xor    r8d,r8d
    650113fa:	mov    rdx,rax
    650113fd:	mov    rcx,rsi
    65011400:	call   0x65001e20
    65011405:	nop
    65011406:	cmp    QWORD PTR [rsp+0x48],0x10
    6501140c:	jb     0x6501141d
    6501140e:	mov    rcx,QWORD PTR [rsp+0x30]
    65011413:	call   0x6501d190
    65011418:	mov    rax,rsi
    6501141b:	jmp    0x65011420
    6501141d:	mov    rax,rsi
    65011420:	mov    rbx,QWORD PTR [rsp+0x68]
    65011425:	mov    rsi,QWORD PTR [rsp+0x70]
    6501142a:	add    rsp,0x50
    6501142e:	pop    rdi
    6501142f:	ret    
    65011430:	rex push rbp
    65011432:	sub    rsp,0x20
    65011436:	mov    rbp,rdx
    65011439:	lea    rcx,[rbp+0x28]
    6501143d:	call   0x65001c70
    65011442:	add    rsp,0x20
    65011446:	pop    rbp
    65011447:	ret    
    65011448:	int3   
    65011449:	int3   
    6501144a:	int3   
    6501144b:	int3   
    6501144c:	int3   
    6501144d:	int3   
    6501144e:	int3   
    6501144f:	int3   
    65011450:	mov    r11,rsp
    65011453:	push   rbp
    65011454:	push   rsi
    65011455:	push   rdi
    65011456:	sub    rsp,0x50
    6501145a:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    65011463:	mov    QWORD PTR [r11+0x20],rbx
    65011467:	mov    rax,QWORD PTR [rip+0x30cb2]        # 0x65042120
    6501146e:	xor    rax,rsp
    65011471:	mov    QWORD PTR [rsp+0x48],rax
    65011476:	mov    rbx,r8
    65011479:	mov    rdi,rdx
    6501147c:	mov    rsi,rcx
    6501147f:	mov    QWORD PTR [r11-0x40],rcx
    65011483:	mov    QWORD PTR [r11-0x30],rdx
    65011487:	mov    QWORD PTR [r11-0x28],rbx
    6501148b:	xor    ebp,ebp
    6501148d:	mov    DWORD PTR [rsp+0x20],ebp
    65011491:	mov    QWORD PTR [rcx+0x20],0xf
    65011499:	mov    QWORD PTR [rcx+0x18],rbp
    6501149d:	mov    BYTE PTR [rcx+0x8],bpl
    650114a1:	or     r9,0xffffffffffffffff
    650114a5:	xor    r8d,r8d
    650114a8:	call   0x65001e20
    650114ad:	nop
    650114ae:	lea    rcx,[rsi+0x28]
    650114b2:	mov    QWORD PTR [rcx+0x20],0xf
    650114ba:	mov    QWORD PTR [rcx+0x18],rbp
    650114be:	mov    BYTE PTR [rcx+0x8],bpl
    650114c2:	or     r9,0xffffffffffffffff
    650114c6:	xor    r8d,r8d
    650114c9:	mov    rdx,rbx
    650114cc:	call   0x65001e20
    650114d1:	nop
    650114d2:	cmp    QWORD PTR [rdi+0x20],0x10
    650114d7:	jb     0x650114e2
    650114d9:	mov    rcx,QWORD PTR [rdi+0x8]
    650114dd:	call   0x6501d190
    650114e2:	mov    QWORD PTR [rdi+0x20],0xf
    650114ea:	mov    QWORD PTR [rdi+0x18],rbp
    650114ee:	mov    BYTE PTR [rdi+0x8],0x0
    650114f2:	cmp    QWORD PTR [rbx+0x20],0x10
    650114f7:	jb     0x65011502
    650114f9:	mov    rcx,QWORD PTR [rbx+0x8]
    650114fd:	call   0x6501d190
    65011502:	mov    QWORD PTR [rbx+0x20],0xf
    6501150a:	mov    QWORD PTR [rbx+0x18],rbp
    6501150e:	mov    BYTE PTR [rbx+0x8],0x0
    65011512:	mov    rax,rsi
    65011515:	mov    rcx,QWORD PTR [rsp+0x48]
    6501151a:	xor    rcx,rsp
    6501151d:	call   0x6501e4e0
    65011522:	mov    rbx,QWORD PTR [rsp+0x88]
    6501152a:	add    rsp,0x50
    6501152e:	pop    rdi
    6501152f:	pop    rsi
    65011530:	pop    rbp
    65011531:	ret    
    65011532:	int3   
    65011533:	int3   
    65011534:	int3   
    65011535:	int3   
    65011536:	int3   
    65011537:	int3   
    65011538:	int3   
    65011539:	int3   
    6501153a:	int3   
    6501153b:	int3   
    6501153c:	int3   
    6501153d:	int3   
    6501153e:	int3   
    6501153f:	int3   
    65011540:	rex push rbp
    65011542:	sub    rsp,0x20
    65011546:	mov    rbp,rdx
    65011549:	mov    rcx,QWORD PTR [rbp+0x40]
    6501154d:	call   0x65001c70
    65011552:	add    rsp,0x20
    65011556:	pop    rbp
    65011557:	ret    
    65011558:	int3   
    65011559:	int3   
    6501155a:	int3   
    6501155b:	int3   
    6501155c:	int3   
    6501155d:	int3   
    6501155e:	int3   
    6501155f:	int3   
    65011560:	rex push rbp
    65011562:	sub    rsp,0x20
    65011566:	mov    rbp,rdx
    65011569:	mov    rcx,QWORD PTR [rbp+0x38]
    6501156d:	call   0x65001c70
    65011572:	add    rsp,0x20
    65011576:	pop    rbp
    65011577:	ret    
    65011578:	int3   
    65011579:	int3   
    6501157a:	int3   
    6501157b:	int3   
    6501157c:	int3   
    6501157d:	int3   
    6501157e:	int3   
    6501157f:	int3   
    65011580:	rex push rbp
    65011582:	sub    rsp,0x20
    65011586:	mov    rbp,rdx
    65011589:	mov    rcx,QWORD PTR [rbp+0x28]
    6501158d:	call   0x65001c70
    65011592:	add    rsp,0x20
    65011596:	pop    rbp
    65011597:	ret    
    65011598:	int3   
    65011599:	int3   
    6501159a:	int3   
    6501159b:	int3   
    6501159c:	int3   
    6501159d:	int3   
    6501159e:	int3   
    6501159f:	int3   
    650115a0:	mov    r11,rsp
    650115a3:	push   rbp
    650115a4:	push   rsi
    650115a5:	push   rdi
    650115a6:	sub    rsp,0x50
    650115aa:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    650115b3:	mov    QWORD PTR [r11+0x20],rbx
    650115b7:	mov    rax,QWORD PTR [rip+0x30b62]        # 0x65042120
    650115be:	xor    rax,rsp
    650115c1:	mov    QWORD PTR [rsp+0x48],rax
    650115c6:	mov    rbx,r8
    650115c9:	mov    rdi,rdx
    650115cc:	mov    rsi,rcx
    650115cf:	mov    QWORD PTR [r11-0x40],rcx
    650115d3:	mov    QWORD PTR [r11-0x30],rdx
    650115d7:	mov    QWORD PTR [r11-0x28],rbx
    650115db:	xor    ebp,ebp
    650115dd:	mov    DWORD PTR [rsp+0x20],ebp
    650115e1:	mov    QWORD PTR [rcx+0x20],0x7
    650115e9:	mov    QWORD PTR [rcx+0x18],rbp
    650115ed:	mov    WORD PTR [rcx+0x8],bp
    650115f1:	or     r9,0xffffffffffffffff
    650115f5:	xor    r8d,r8d
    650115f8:	call   0x6500f4d0
    650115fd:	nop
    650115fe:	lea    rcx,[rsi+0x28]
    65011602:	mov    QWORD PTR [rcx+0x20],0x7
    6501160a:	mov    QWORD PTR [rcx+0x18],rbp
    6501160e:	mov    WORD PTR [rcx+0x8],bp
    65011612:	or     r9,0xffffffffffffffff
    65011616:	xor    r8d,r8d
    65011619:	mov    rdx,rbx
    6501161c:	call   0x6500f4d0
    65011621:	nop
    65011622:	cmp    QWORD PTR [rdi+0x20],0x8
    65011627:	jb     0x65011632
    65011629:	mov    rcx,QWORD PTR [rdi+0x8]
    6501162d:	call   0x6501d190
    65011632:	mov    QWORD PTR [rdi+0x20],0x7
    6501163a:	mov    QWORD PTR [rdi+0x18],rbp
    6501163e:	mov    WORD PTR [rdi+0x8],0x0
    65011644:	cmp    QWORD PTR [rbx+0x20],0x8
    65011649:	jb     0x65011654
    6501164b:	mov    rcx,QWORD PTR [rbx+0x8]
    6501164f:	call   0x6501d190
    65011654:	mov    QWORD PTR [rbx+0x20],0x7
    6501165c:	mov    QWORD PTR [rbx+0x18],rbp
    65011660:	mov    WORD PTR [rbx+0x8],0x0
    65011666:	mov    rax,rsi
    65011669:	mov    rcx,QWORD PTR [rsp+0x48]
    6501166e:	xor    rcx,rsp
    65011671:	call   0x6501e4e0
    65011676:	mov    rbx,QWORD PTR [rsp+0x88]
    6501167e:	add    rsp,0x50
    65011682:	pop    rdi
    65011683:	pop    rsi
    65011684:	pop    rbp
    65011685:	ret    
    65011686:	int3   
    65011687:	int3   
    65011688:	int3   
    65011689:	int3   
    6501168a:	int3   
    6501168b:	int3   
    6501168c:	int3   
    6501168d:	int3   
    6501168e:	int3   
    6501168f:	int3   
    65011690:	rex push rbp
    65011692:	sub    rsp,0x20
    65011696:	mov    rbp,rdx
    65011699:	mov    rcx,QWORD PTR [rbp+0x40]
    6501169d:	call   0x6500e300
    650116a2:	add    rsp,0x20
    650116a6:	pop    rbp
    650116a7:	ret    
    650116a8:	int3   
    650116a9:	int3   
    650116aa:	int3   
    650116ab:	int3   
    650116ac:	int3   
    650116ad:	int3   
    650116ae:	int3   
    650116af:	int3   
    650116b0:	rex push rbp
    650116b2:	sub    rsp,0x20
    650116b6:	mov    rbp,rdx
    650116b9:	mov    rcx,QWORD PTR [rbp+0x38]
    650116bd:	call   0x6500e300
    650116c2:	add    rsp,0x20
    650116c6:	pop    rbp
    650116c7:	ret    
    650116c8:	int3   
    650116c9:	int3   
    650116ca:	int3   
    650116cb:	int3   
    650116cc:	int3   
    650116cd:	int3   
    650116ce:	int3   
    650116cf:	int3   
    650116d0:	rex push rbp
    650116d2:	sub    rsp,0x20
    650116d6:	mov    rbp,rdx
    650116d9:	mov    rcx,QWORD PTR [rbp+0x28]
    650116dd:	call   0x6500e300
    650116e2:	add    rsp,0x20
    650116e6:	pop    rbp
    650116e7:	ret    
    650116e8:	int3   
    650116e9:	int3   
    650116ea:	int3   
    650116eb:	int3   
    650116ec:	int3   
    650116ed:	int3   
    650116ee:	int3   
    650116ef:	int3   
    650116f0:	mov    QWORD PTR [rsp+0x10],rbx
    650116f5:	mov    QWORD PTR [rsp+0x18],rbp
    650116fa:	mov    QWORD PTR [rsp+0x20],rdi
    650116ff:	push   r12
    65011701:	sub    rsp,0x20
    65011705:	mov    r9,QWORD PTR [rcx+0x20]
    65011709:	mov    rbp,r8
    6501170c:	mov    r12,rdx
    6501170f:	cmp    r9,0x10
    65011713:	mov    rdi,rcx
    65011716:	jb     0x65011722
    65011718:	mov    rax,QWORD PTR [rcx+0x8]
    6501171c:	lea    rbx,[rcx+0x8]
    65011720:	jmp    0x65011729
    65011722:	lea    rbx,[rcx+0x8]
    65011726:	mov    rax,rbx
    65011729:	cmp    rdx,rax
    6501172c:	jb     0x65011767
    6501172e:	cmp    r9,0x10
    65011732:	jb     0x65011739
    65011734:	mov    rcx,QWORD PTR [rbx]
    65011737:	jmp    0x6501173c
    65011739:	mov    rcx,rbx
    6501173c:	add    rcx,QWORD PTR [rdi+0x18]
    65011740:	cmp    rcx,rdx
    65011743:	jbe    0x65011767
    65011745:	cmp    r9,0x10
    65011749:	jb     0x6501174e
    6501174b:	mov    rbx,QWORD PTR [rbx]
    6501174e:	sub    r12,rbx
    65011751:	mov    r9,r8
    65011754:	mov    rdx,rdi
    65011757:	mov    r8,r12
    6501175a:	mov    rcx,rdi
    6501175d:	call   0x650021e0
    65011762:	jmp    0x6501181a
    65011767:	mov    rcx,QWORD PTR [rdi+0x18]
    6501176b:	or     rax,0xffffffffffffffff
    6501176f:	sub    rax,rcx
    65011772:	cmp    rax,r8
    65011775:	jbe    0x65011780
    65011777:	lea    rax,[rcx+r8*1]
    6501177b:	cmp    rax,rcx
    6501177e:	jae    0x65011785
    65011780:	call   0x6501cfe0
    65011785:	test   rbp,rbp
    65011788:	je     0x65011817
    6501178e:	mov    QWORD PTR [rsp+0x30],rsi
    65011793:	mov    rsi,QWORD PTR [rdi+0x18]
    65011797:	add    rsi,rbp
    6501179a:	cmp    rsi,0xfffffffffffffffe
    6501179e:	jbe    0x650117a5
    650117a0:	call   0x6501cfe0
    650117a5:	mov    rax,QWORD PTR [rdi+0x20]
    650117a9:	cmp    rax,rsi
    650117ac:	jae    0x650117d1
    650117ae:	mov    r8,QWORD PTR [rdi+0x18]
    650117b2:	mov    rdx,rsi
    650117b5:	mov    rcx,rdi
    650117b8:	call   0x65002330
    650117bd:	test   rsi,rsi
    650117c0:	je     0x65011812
    650117c2:	mov    rdx,QWORD PTR [rdi+0x20]
    650117c6:	cmp    rdx,0x10
    650117ca:	jb     0x650117e8
    650117cc:	mov    rcx,QWORD PTR [rbx]
    650117cf:	jmp    0x650117eb
    650117d1:	test   rsi,rsi
    650117d4:	jne    0x650117bd
    650117d6:	cmp    rax,0x10
    650117da:	mov    QWORD PTR [rdi+0x18],rsi
    650117de:	jb     0x650117e3
    650117e0:	mov    rbx,QWORD PTR [rbx]
    650117e3:	mov    BYTE PTR [rbx],0x0
    650117e6:	jmp    0x65011812
    650117e8:	mov    rcx,rbx
    650117eb:	mov    rax,QWORD PTR [rdi+0x18]
    650117ef:	mov    r9,rbp
    650117f2:	mov    r8,r12
    650117f5:	sub    rdx,rax
    650117f8:	add    rcx,rax
    650117fb:	call   0x6501d640
    65011800:	cmp    QWORD PTR [rdi+0x20],0x10
    65011805:	mov    QWORD PTR [rdi+0x18],rsi
    65011809:	jb     0x6501180e
    6501180b:	mov    rbx,QWORD PTR [rbx]
    6501180e:	mov    BYTE PTR [rbx+rsi*1],0x0
    65011812:	mov    rsi,QWORD PTR [rsp+0x30]
    65011817:	mov    rax,rdi
    6501181a:	mov    rbx,QWORD PTR [rsp+0x38]
    6501181f:	mov    rbp,QWORD PTR [rsp+0x40]
    65011824:	mov    rdi,QWORD PTR [rsp+0x48]
    65011829:	add    rsp,0x20
    6501182d:	pop    r12
    6501182f:	ret    
    65011830:	rex push rbx
    65011832:	sub    rsp,0x20
    65011836:	mov    rbx,rcx
    65011839:	xor    eax,eax
    6501183b:	mov    ecx,0x1
    65011840:	lock cmpxchg DWORD PTR [rip+0x354f8],ecx        # 0x65046d40
    65011848:	jne    0x650118e2
    6501184e:	lea    edx,[rcx+0xd]
    65011851:	lea    r8,[rip+0x276e0]        # 0x65038f38
    65011858:	lea    rcx,[rip+0x27709]        # 0x65038f68
    6501185f:	mov    QWORD PTR [rsp+0x30],rdi
    65011864:	call   0x6500bc30
    65011869:	lea    r8,[rip+0x27708]        # 0x65038f78
    65011870:	lea    rcx,[rip+0x276a9]        # 0x65038f20
    65011877:	mov    edx,0x8
    6501187c:	mov    rdi,rax
    6501187f:	call   0x6500c5e0
    65011884:	mov    rcx,rax
    65011887:	call   QWORD PTR [rip+0x2279b]        # 0x65034028
    6501188d:	add    DWORD PTR [rip+0x320b4],0x1        # 0x65043948
    65011894:	test   rax,rax
    65011897:	je     0x650118c6
    65011899:	mov    rdx,rdi
    6501189c:	mov    rcx,rax
    6501189f:	call   QWORD PTR [rip+0x2280b]        # 0x650340b0
    650118a5:	add    DWORD PTR [rip+0x320a0],0x1        # 0x6504394c
    650118ac:	mov    rdi,QWORD PTR [rsp+0x30]
    650118b1:	mov    QWORD PTR [rip+0x35590],rax        # 0x65046e48
    650118b8:	call   rax
    650118ba:	mov    QWORD PTR [rbx],rax
    650118bd:	mov    rax,rbx
    650118c0:	add    rsp,0x20
    650118c4:	pop    rbx
    650118c5:	ret    
    650118c6:	mov    rdi,QWORD PTR [rsp+0x30]
    650118cb:	xor    eax,eax
    650118cd:	mov    QWORD PTR [rip+0x35574],rax        # 0x65046e48
    650118d4:	call   rax
    650118d6:	mov    QWORD PTR [rbx],rax
    650118d9:	mov    rax,rbx
    650118dc:	add    rsp,0x20
    650118e0:	pop    rbx
    650118e1:	ret    
    650118e2:	mov    rax,QWORD PTR [rip+0x3555f]        # 0x65046e48
    650118e9:	call   rax
    650118eb:	mov    QWORD PTR [rbx],rax
    650118ee:	mov    rax,rbx
    650118f1:	add    rsp,0x20
    650118f5:	pop    rbx
    650118f6:	ret    
    650118f7:	int3   
    650118f8:	int3   
    650118f9:	int3   
    650118fa:	int3   
    650118fb:	int3   
    650118fc:	int3   
    650118fd:	int3   
    650118fe:	int3   
    650118ff:	int3   
    65011900:	rex push rbx
    65011902:	sub    rsp,0x20
    65011906:	mov    rbx,rcx
    65011909:	xor    eax,eax
    6501190b:	mov    ecx,0x1
    65011910:	lock cmpxchg DWORD PTR [rip+0x3542c],ecx        # 0x65046d44
    65011918:	jne    0x650119ac
    6501191e:	lea    edx,[rcx+0xe]
    65011921:	lea    r8,[rip+0x27690]        # 0x65038fb8
    65011928:	lea    rcx,[rip+0x276c1]        # 0x65038ff0
    6501192f:	mov    QWORD PTR [rsp+0x30],rdi
    65011934:	call   0x6500bc30
    65011939:	lea    r8,[rip+0x276c0]        # 0x65039000
    65011940:	lea    rcx,[rip+0x275d9]        # 0x65038f20
    65011947:	mov    edx,0x8
    6501194c:	mov    rdi,rax
    6501194f:	call   0x6500c5e0
    65011954:	mov    rcx,rax
    65011957:	call   QWORD PTR [rip+0x226cb]        # 0x65034028
    6501195d:	add    DWORD PTR [rip+0x31fe4],0x1        # 0x65043948
    65011964:	test   rax,rax
    65011967:	je     0x65011993
    65011969:	mov    rdx,rdi
    6501196c:	mov    rcx,rax
    6501196f:	call   QWORD PTR [rip+0x2273b]        # 0x650340b0
    65011975:	mov    rcx,QWORD PTR [rbx]
    65011978:	add    DWORD PTR [rip+0x31fcd],0x1        # 0x6504394c
    6501197f:	mov    rdi,QWORD PTR [rsp+0x30]
    65011984:	mov    QWORD PTR [rip+0x354c5],rax        # 0x65046e50
    6501198b:	add    rsp,0x20
    6501198f:	pop    rbx
    65011990:	rex.W jmp rax
    65011993:	mov    rcx,QWORD PTR [rbx]
    65011996:	mov    rdi,QWORD PTR [rsp+0x30]
    6501199b:	xor    eax,eax
    6501199d:	mov    QWORD PTR [rip+0x354ac],rax        # 0x65046e50
    650119a4:	add    rsp,0x20
    650119a8:	pop    rbx
    650119a9:	rex.W jmp rax
    650119ac:	mov    rax,QWORD PTR [rip+0x3549d]        # 0x65046e50
    650119b3:	mov    rcx,QWORD PTR [rbx]
    650119b6:	add    rsp,0x20
    650119ba:	pop    rbx
    650119bb:	rex.W jmp rax
    650119be:	int3   
    650119bf:	int3   
    650119c0:	rex push rbx
    650119c2:	push   rbp
    650119c3:	push   rsi
    650119c4:	push   rdi
    650119c5:	push   r12
    650119c7:	push   r13
    650119c9:	push   r14
    650119cb:	push   r15
    650119cd:	sub    rsp,0x128
    650119d4:	mov    QWORD PTR [rsp+0x80],0xfffffffffffffffe
    650119e0:	mov    rax,QWORD PTR [rip+0x30739]        # 0x65042120
    650119e7:	xor    rax,rsp
    650119ea:	mov    QWORD PTR [rsp+0x110],rax
    650119f2:	mov    r14,r9
    650119f5:	mov    QWORD PTR [rsp+0x78],r8
    650119fa:	mov    DWORD PTR [rsp+0x64],edx
    650119fe:	mov    QWORD PTR [rsp+0x70],rcx
    65011a03:	mov    rbx,QWORD PTR [rsp+0x190]
    65011a0b:	call   QWORD PTR [rip+0x2268f]        # 0x650340a0
    65011a11:	mov    DWORD PTR [rsp+0x68],eax
    65011a15:	mov    ecx,0x1
    65011a1a:	xor    eax,eax
    65011a1c:	lock cmpxchg DWORD PTR [rip+0x353bc],ecx        # 0x65046de0
    65011a24:	jne    0x65011a8c
    65011a26:	lea    r8,[rip+0x27f1b]        # 0x65039948
    65011a2d:	lea    edx,[rcx+0xb]
    65011a30:	lea    rcx,[rip+0x27f51]        # 0x65039988
    65011a37:	call   0x6500bc30
    65011a3c:	mov    rdi,rax
    65011a3f:	lea    r8,[rip+0x27f52]        # 0x65039998
    65011a46:	mov    edx,0x5
    65011a4b:	lea    rcx,[rip+0x27f76]        # 0x650399c8
    65011a52:	call   0x6500c5e0
    65011a57:	mov    rcx,rax
    65011a5a:	call   QWORD PTR [rip+0x225c8]        # 0x65034028
    65011a60:	add    DWORD PTR [rip+0x31ee1],0x1        # 0x65043948
    65011a67:	test   rax,rax
    65011a6a:	je     0x65011a81
    65011a6c:	mov    rdx,rdi
    65011a6f:	mov    rcx,rax
    65011a72:	call   QWORD PTR [rip+0x22638]        # 0x650340b0
    65011a78:	add    DWORD PTR [rip+0x31ecd],0x1        # 0x6504394c
    65011a7f:	jmp    0x65011a83
    65011a81:	xor    eax,eax
    65011a83:	mov    QWORD PTR [rip+0x3545e],rax        # 0x65046ee8
    65011a8a:	jmp    0x65011a93
    65011a8c:	mov    rax,QWORD PTR [rip+0x35455]        # 0x65046ee8
    65011a93:	lea    rcx,[rsp+0x100]
    65011a9b:	call   rax
    65011a9d:	mov    QWORD PTR [rsp+0xf8],0xf
    65011aa9:	xor    ecx,ecx
    65011aab:	mov    QWORD PTR [rsp+0xf0],rcx
    65011ab3:	mov    BYTE PTR [rsp+0xe0],cl
    65011aba:	mov    r15b,0x1
    65011abd:	mov    BYTE PTR [rsp+0x60],r15b
    65011ac2:	movabs rax,0x1a7b9611a7b9611b
    65011acc:	mul    r14
    65011acf:	mov    r13,r14
    65011ad2:	sub    r13,rdx
    65011ad5:	shr    r13,1
    65011ad8:	add    r13,rdx
    65011adb:	shr    r13,0x8
    65011adf:	xor    ebp,ebp
    65011ae1:	lea    rax,[r13+0x1]
    65011ae5:	mov    r12d,DWORD PTR [rsp+0x198]
    65011aed:	test   rax,rax
    65011af0:	je     0x65011c1f
    65011af6:	xor    esi,esi
    65011af8:	lea    r15,[r13+0x1]
    65011afc:	data16 data16 xchg ax,ax
    65011b00:	lea    eax,[rsi+0x1d0]
    65011b06:	movsxd rcx,eax
    65011b09:	cmp    rcx,r14
    65011b0c:	jb     0x65011b24
    65011b0e:	mov    eax,r13d
    65011b11:	imul   eax,eax,0x1d0
    65011b17:	mov    edi,r14d
    65011b1a:	sub    edi,eax
    65011b1c:	je     0x65011bbc
    65011b22:	jmp    0x65011b29
    65011b24:	mov    edi,0x1d0
    65011b29:	cmp    r12d,0xffffffff
    65011b2d:	jne    0x65011b34
    65011b2f:	or     edx,r12d
    65011b32:	jmp    0x65011b4c
    65011b34:	call   QWORD PTR [rip+0x22566]        # 0x650340a0
    65011b3a:	sub    eax,DWORD PTR [rsp+0x68]
    65011b3e:	cmp    eax,r12d
    65011b41:	ja     0x65011c00
    65011b47:	mov    edx,r12d
    65011b4a:	sub    edx,eax
    65011b4c:	movaps xmm0,XMMWORD PTR [rsp+0x100]
    65011b54:	movdqa XMMWORD PTR [rsp+0xa0],xmm0
    65011b5d:	test   ebp,ebp
    65011b5f:	setne  cl
    65011b62:	movsxd rax,ebp
    65011b65:	cmp    rax,r13
    65011b68:	setb   al
    65011b6b:	mov    r9d,edi
    65011b6e:	movsxd r8,esi
    65011b71:	add    r8,QWORD PTR [rsp+0x78]
    65011b76:	mov    BYTE PTR [rsp+0x50],cl
    65011b7a:	mov    DWORD PTR [rsp+0x48],edx
    65011b7e:	lea    rcx,[rsp+0x60]
    65011b83:	mov    QWORD PTR [rsp+0x40],rcx
    65011b88:	lea    rcx,[rsp+0xd8]
    65011b90:	mov    QWORD PTR [rsp+0x38],rcx
    65011b95:	mov    BYTE PTR [rsp+0x30],al
    65011b99:	mov    DWORD PTR [rsp+0x28],ebp
    65011b9d:	lea    rax,[rsp+0xa0]
    65011ba5:	mov    QWORD PTR [rsp+0x20],rax
    65011baa:	mov    edx,DWORD PTR [rsp+0x64]
    65011bae:	mov    rcx,QWORD PTR [rsp+0x70]
    65011bb3:	call   0x65012020
    65011bb8:	test   al,al
    65011bba:	je     0x65011be1
    65011bbc:	add    ebp,0x1
    65011bbf:	add    esi,0x1d0
    65011bc5:	movsxd rax,ebp
    65011bc8:	cmp    rax,r15
    65011bcb:	jne    0x65011b00
    65011bd1:	mov    rcx,QWORD PTR [rsp+0xf0]
    65011bd9:	movzx  r15d,BYTE PTR [rsp+0x60]
    65011bdf:	jmp    0x65011c1f
    65011be1:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011bea:	jb     0x65011bf9
    65011bec:	mov    rcx,QWORD PTR [rsp+0xe0]
    65011bf4:	call   0x6501d190
    65011bf9:	xor    al,al
    65011bfb:	jmp    0x65011fb4
    65011c00:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011c09:	jb     0x65011c18
    65011c0b:	mov    rcx,QWORD PTR [rsp+0xe0]
    65011c13:	call   0x6501d190
    65011c18:	xor    al,al
    65011c1a:	jmp    0x65011fb4
    65011c1f:	or     rbp,0xffffffffffffffff
    65011c23:	cmp    rcx,rbp
    65011c26:	cmovb  rbp,rcx
    65011c2a:	mov    rcx,QWORD PTR [rbx+0x18]
    65011c2e:	or     rax,0xffffffffffffffff
    65011c32:	sub    rax,rcx
    65011c35:	cmp    rax,rbp
    65011c38:	jbe    0x65011c43
    65011c3a:	lea    rax,[rcx+rbp*1]
    65011c3e:	cmp    rax,rcx
    65011c41:	jae    0x65011c48
    65011c43:	call   0x6501cfe0
    65011c48:	test   rbp,rbp
    65011c4b:	je     0x65011d05
    65011c51:	mov    rdi,QWORD PTR [rbx+0x18]
    65011c55:	add    rdi,rbp
    65011c58:	cmp    rdi,0xfffffffffffffffe
    65011c5c:	jbe    0x65011c63
    65011c5e:	call   0x6501cfe0
    65011c63:	mov    rax,QWORD PTR [rbx+0x20]
    65011c67:	cmp    rax,rdi
    65011c6a:	jae    0x65011c7d
    65011c6c:	mov    r8,QWORD PTR [rbx+0x18]
    65011c70:	mov    rdx,rdi
    65011c73:	mov    rcx,rbx
    65011c76:	call   0x65002330
    65011c7b:	jmp    0x65011c9e
    65011c7d:	test   rdi,rdi
    65011c80:	jne    0x65011c9e
    65011c82:	xor    r14d,r14d
    65011c85:	mov    QWORD PTR [rbx+0x18],r14
    65011c89:	cmp    rax,0x10
    65011c8d:	jb     0x65011c95
    65011c8f:	mov    rax,QWORD PTR [rbx+0x8]
    65011c93:	jmp    0x65011c99
    65011c95:	lea    rax,[rbx+0x8]
    65011c99:	mov    BYTE PTR [rax],r14b
    65011c9c:	jmp    0x65011d08
    65011c9e:	test   rdi,rdi
    65011ca1:	je     0x65011d00
    65011ca3:	lea    r8,[rsp+0xe0]
    65011cab:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011cb4:	cmovae r8,QWORD PTR [rsp+0xe0]
    65011cbd:	mov    rdx,QWORD PTR [rbx+0x20]
    65011cc1:	cmp    rdx,0x10
    65011cc5:	jb     0x65011cd0
    65011cc7:	lea    rsi,[rbx+0x8]
    65011ccb:	mov    rcx,QWORD PTR [rsi]
    65011cce:	jmp    0x65011cd7
    65011cd0:	lea    rsi,[rbx+0x8]
    65011cd4:	mov    rcx,rsi
    65011cd7:	mov    rax,QWORD PTR [rbx+0x18]
    65011cdb:	sub    rdx,rax
    65011cde:	add    rcx,rax
    65011ce1:	mov    r9,rbp
    65011ce4:	call   0x6501d640
    65011ce9:	mov    QWORD PTR [rbx+0x18],rdi
    65011ced:	cmp    QWORD PTR [rbx+0x20],0x10
    65011cf2:	jb     0x65011cf7
    65011cf4:	mov    rsi,QWORD PTR [rsi]
    65011cf7:	mov    BYTE PTR [rsi+rdi*1],0x0
    65011cfb:	xor    r14d,r14d
    65011cfe:	jmp    0x65011d08
    65011d00:	xor    r14d,r14d
    65011d03:	jmp    0x65011d08
    65011d05:	xor    r14d,r14d
    65011d08:	test   r15b,r15b
    65011d0b:	je     0x65011f9a
    65011d11:	mov    r13d,0xfffffffe
    65011d17:	data16 xchg ax,ax
    65011d1a:	data16 xchg ax,ax
    65011d1d:	data16 xchg ax,ax
    65011d20:	mov    QWORD PTR [rsp+0xd0],0xf
    65011d2c:	mov    QWORD PTR [rsp+0xc8],r14
    65011d34:	mov    BYTE PTR [rsp+0xb8],0x0
    65011d3c:	cmp    r12d,0xffffffff
    65011d40:	jne    0x65011d47
    65011d42:	or     ecx,r12d
    65011d45:	jmp    0x65011d5f
    65011d47:	call   QWORD PTR [rip+0x22353]        # 0x650340a0
    65011d4d:	sub    eax,DWORD PTR [rsp+0x68]
    65011d51:	cmp    eax,r12d
    65011d54:	ja     0x65011f4a
    65011d5a:	mov    ecx,r12d
    65011d5d:	sub    ecx,eax
    65011d5f:	movaps xmm0,XMMWORD PTR [rsp+0x100]
    65011d67:	movdqa XMMWORD PTR [rsp+0x90],xmm0
    65011d70:	mov    BYTE PTR [rsp+0x50],0x1
    65011d75:	mov    DWORD PTR [rsp+0x48],ecx
    65011d79:	lea    rax,[rsp+0x60]
    65011d7e:	mov    QWORD PTR [rsp+0x40],rax
    65011d83:	lea    rax,[rsp+0xb0]
    65011d8b:	mov    QWORD PTR [rsp+0x38],rax
    65011d90:	mov    BYTE PTR [rsp+0x30],0x0
    65011d95:	mov    DWORD PTR [rsp+0x28],r13d
    65011d9a:	lea    rax,[rsp+0x90]
    65011da2:	mov    QWORD PTR [rsp+0x20],rax
    65011da7:	xor    r9d,r9d
    65011daa:	xor    r8d,r8d
    65011dad:	mov    edx,DWORD PTR [rsp+0x64]
    65011db1:	mov    rcx,QWORD PTR [rsp+0x70]
    65011db6:	call   0x65012020
    65011dbb:	test   al,al
    65011dbd:	je     0x65011efa
    65011dc3:	mov    rax,QWORD PTR [rsp+0xc8]
    65011dcb:	test   rax,rax
    65011dce:	je     0x65011ed9
    65011dd4:	or     rbp,0xffffffffffffffff
    65011dd8:	cmp    rax,rbp
    65011ddb:	cmovb  rbp,rax
    65011ddf:	mov    rcx,QWORD PTR [rbx+0x18]
    65011de3:	or     rax,0xffffffffffffffff
    65011de7:	sub    rax,rcx
    65011dea:	cmp    rax,rbp
    65011ded:	jbe    0x65011df8
    65011def:	lea    rax,[rcx+rbp*1]
    65011df3:	cmp    rax,rcx
    65011df6:	jae    0x65011dfd
    65011df8:	call   0x6501cfe0
    65011dfd:	test   rbp,rbp
    65011e00:	je     0x65011ead
    65011e06:	mov    rdi,QWORD PTR [rbx+0x18]
    65011e0a:	add    rdi,rbp
    65011e0d:	cmp    rdi,0xfffffffffffffffe
    65011e11:	jbe    0x65011e18
    65011e13:	call   0x6501cfe0
    65011e18:	mov    rax,QWORD PTR [rbx+0x20]
    65011e1c:	cmp    rax,rdi
    65011e1f:	jae    0x65011e32
    65011e21:	mov    r8,QWORD PTR [rbx+0x18]
    65011e25:	mov    rdx,rdi
    65011e28:	mov    rcx,rbx
    65011e2b:	call   0x65002330
    65011e30:	jmp    0x65011e50
    65011e32:	test   rdi,rdi
    65011e35:	jne    0x65011e50
    65011e37:	mov    QWORD PTR [rbx+0x18],r14
    65011e3b:	cmp    rax,0x10
    65011e3f:	jb     0x65011e47
    65011e41:	mov    rax,QWORD PTR [rbx+0x8]
    65011e45:	jmp    0x65011e4b
    65011e47:	lea    rax,[rbx+0x8]
    65011e4b:	mov    BYTE PTR [rax],0x0
    65011e4e:	jmp    0x65011ead
    65011e50:	test   rdi,rdi
    65011e53:	je     0x65011ead
    65011e55:	lea    r8,[rsp+0xb8]
    65011e5d:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011e66:	cmovae r8,QWORD PTR [rsp+0xb8]
    65011e6f:	mov    rdx,QWORD PTR [rbx+0x20]
    65011e73:	cmp    rdx,0x10
    65011e77:	jb     0x65011e82
    65011e79:	lea    rsi,[rbx+0x8]
    65011e7d:	mov    rcx,QWORD PTR [rsi]
    65011e80:	jmp    0x65011e89
    65011e82:	lea    rsi,[rbx+0x8]
    65011e86:	mov    rcx,rsi
    65011e89:	mov    rax,QWORD PTR [rbx+0x18]
    65011e8d:	sub    rdx,rax
    65011e90:	add    rcx,rax
    65011e93:	mov    r9,rbp
    65011e96:	call   0x6501d640
    65011e9b:	mov    QWORD PTR [rbx+0x18],rdi
    65011e9f:	cmp    QWORD PTR [rbx+0x20],0x10
    65011ea4:	jb     0x65011ea9
    65011ea6:	mov    rsi,QWORD PTR [rsi]
    65011ea9:	mov    BYTE PTR [rsi+rdi*1],0x0
    65011ead:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011eb6:	jb     0x65011ec5
    65011eb8:	mov    rcx,QWORD PTR [rsp+0xb8]
    65011ec0:	call   0x6501d190
    65011ec5:	sub    r13d,0x1
    65011ec9:	cmp    BYTE PTR [rsp+0x60],0x0
    65011ece:	je     0x65011f9a
    65011ed4:	jmp    0x65011d20
    65011ed9:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011ee2:	jb     0x65011f9a
    65011ee8:	mov    rcx,QWORD PTR [rsp+0xb8]
    65011ef0:	call   0x6501d190
    65011ef5:	jmp    0x65011f9a
    65011efa:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011f03:	jb     0x65011f12
    65011f05:	mov    rcx,QWORD PTR [rsp+0xb8]
    65011f0d:	call   0x6501d190
    65011f12:	mov    QWORD PTR [rsp+0xd0],0xf
    65011f1e:	mov    QWORD PTR [rsp+0xc8],r14
    65011f26:	mov    BYTE PTR [rsp+0xb8],0x0
    65011f2e:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011f37:	jb     0x65011f46
    65011f39:	mov    rcx,QWORD PTR [rsp+0xe0]
    65011f41:	call   0x6501d190
    65011f46:	xor    al,al
    65011f48:	jmp    0x65011fb4
    65011f4a:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011f53:	jb     0x65011f62
    65011f55:	mov    rcx,QWORD PTR [rsp+0xb8]
    65011f5d:	call   0x6501d190
    65011f62:	mov    QWORD PTR [rsp+0xd0],0xf
    65011f6e:	mov    QWORD PTR [rsp+0xc8],r14
    65011f76:	mov    BYTE PTR [rsp+0xb8],0x0
    65011f7e:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011f87:	jb     0x65011f96
    65011f89:	mov    rcx,QWORD PTR [rsp+0xe0]
    65011f91:	call   0x6501d190
    65011f96:	xor    al,al
    65011f98:	jmp    0x65011fb4
    65011f9a:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011fa3:	jb     0x65011fb2
    65011fa5:	mov    rcx,QWORD PTR [rsp+0xe0]
    65011fad:	call   0x6501d190
    65011fb2:	mov    al,0x1
    65011fb4:	mov    rcx,QWORD PTR [rsp+0x110]
    65011fbc:	xor    rcx,rsp
    65011fbf:	call   0x6501e4e0
    65011fc4:	add    rsp,0x128
    65011fcb:	pop    r15
    65011fcd:	pop    r14
    65011fcf:	pop    r13
    65011fd1:	pop    r12
    65011fd3:	pop    rdi
    65011fd4:	pop    rsi
    65011fd5:	pop    rbp
    65011fd6:	pop    rbx
    65011fd7:	ret    
    65011fd8:	int3   
    65011fd9:	int3   
    65011fda:	int3   
    65011fdb:	int3   
    65011fdc:	int3   
    65011fdd:	int3   
    65011fde:	int3   
    65011fdf:	int3   
    65011fe0:	rex push rbp
    65011fe2:	sub    rsp,0x20
    65011fe6:	mov    rbp,rdx
    65011fe9:	lea    rcx,[rbp+0xd8]
    65011ff0:	call   0x65001c70
    65011ff5:	add    rsp,0x20
    65011ff9:	pop    rbp
    65011ffa:	ret    
    65011ffb:	int3   
    65011ffc:	int3   
    65011ffd:	int3   
    65011ffe:	int3   
    65011fff:	int3   
    65012000:	rex push rbp
    65012002:	sub    rsp,0x20
    65012006:	mov    rbp,rdx
    65012009:	lea    rcx,[rbp+0xb0]
    65012010:	call   0x65001c70
    65012015:	add    rsp,0x20
    65012019:	pop    rbp
    6501201a:	ret    
    6501201b:	int3   
    6501201c:	int3   
    6501201d:	int3   
    6501201e:	int3   
    6501201f:	int3   
    65012020:	rex push rbx
    65012022:	push   rbp
    65012023:	push   rsi
    65012024:	push   rdi
    65012025:	push   r12
    65012027:	push   r13
    65012029:	push   r14
    6501202b:	push   r15
    6501202d:	mov    eax,0x10138
    65012032:	call   0x650330c0
    65012037:	sub    rsp,rax
    6501203a:	mov    QWORD PTR [rsp+0xb8],0xfffffffffffffffe
    65012046:	mov    rax,QWORD PTR [rip+0x300d3]        # 0x65042120
    6501204d:	xor    rax,rsp
    65012050:	mov    QWORD PTR [rsp+0x10120],rax
    65012058:	mov    rbp,r9
    6501205b:	mov    r12,r8
    6501205e:	mov    DWORD PTR [rsp+0x44],edx
    65012062:	mov    QWORD PTR [rsp+0xb0],rcx
    6501206a:	mov    rcx,QWORD PTR [rsp+0x101a0]
    65012072:	mov    QWORD PTR [rsp+0x78],rcx
    65012077:	mov    rax,QWORD PTR [rsp+0x101b8]
    6501207f:	mov    QWORD PTR [rsp+0xa0],rax
    65012087:	mov    rax,QWORD PTR [rsp+0x101c0]
    6501208f:	mov    QWORD PTR [rsp+0x80],rax
    65012097:	mov    BYTE PTR [rsp+0x40],0x0
    6501209c:	xor    edi,edi
    6501209e:	mov    r13d,edi
    650120a1:	mov    r14d,0xf
    650120a7:	mov    r15d,DWORD PTR [rsp+0x101a8]
    650120af:	nop
    650120b0:	mov    QWORD PTR [rsp+0xf0],r14
    650120b8:	mov    QWORD PTR [rsp+0xe8],rdi
    650120c0:	mov    BYTE PTR [rsp+0xd8],0x0
    650120c8:	lea    rdx,[rsp+0xf8]
    650120d0:	mov    eax,DWORD PTR [rcx]
    650120d2:	mov    DWORD PTR [rdx],eax
    650120d4:	mov    eax,DWORD PTR [rcx+0x4]
    650120d7:	mov    DWORD PTR [rdx+0x4],eax
    650120da:	mov    eax,DWORD PTR [rcx+0x8]
    650120dd:	mov    DWORD PTR [rdx+0x8],eax
    650120e0:	mov    eax,DWORD PTR [rcx+0xc]
    650120e3:	mov    DWORD PTR [rdx+0xc],eax
    650120e6:	mov    DWORD PTR [rsp+0x108],r15d
    650120ee:	mov    DWORD PTR [rsp+0x10c],r13d
    650120f6:	movzx  eax,BYTE PTR [rsp+0x101b0]
    650120fe:	mov    BYTE PTR [rsp+0x110],al
    65012105:	mov    ecx,r15d
    65012108:	call   QWORD PTR [rip+0x22282]        # 0x65034390
    6501210e:	mov    DWORD PTR [rsp+0x108],eax
    65012115:	mov    ecx,DWORD PTR [rsp+0x10c]
    6501211c:	call   QWORD PTR [rip+0x2226e]        # 0x65034390
    65012122:	mov    DWORD PTR [rsp+0x10c],eax
    65012129:	lea    rax,[rsp+0xd8]
    65012131:	mov    rcx,QWORD PTR [rsp+0xd8]
    65012139:	mov    r10,QWORD PTR [rsp+0xf0]
    65012141:	cmp    r10,0x10
    65012145:	cmovae rax,rcx
    65012149:	lea    rdx,[rsp+0xf8]
    65012151:	mov    r9,QWORD PTR [rsp+0xe8]
    65012159:	cmp    rdx,rax
    6501215c:	jb     0x65012308
    65012162:	lea    rax,[rsp+0xd8]
    6501216a:	cmp    r10,0x10
    6501216e:	cmovae rax,rcx
    65012172:	add    rax,r9
    65012175:	lea    rdx,[rsp+0xf8]
    6501217d:	cmp    rax,rdx
    65012180:	jbe    0x65012308
    65012186:	lea    rax,[rsp+0xd8]
    6501218e:	cmp    r10,0x10
    65012192:	cmovae rax,rcx
    65012196:	lea    rsi,[rsp+0xf8]
    6501219e:	sub    rsi,rax
    650121a1:	cmp    r9,rsi
    650121a4:	jae    0x650121bb
    650121a6:	call   0x6501d0b0
    650121ab:	mov    r10,QWORD PTR [rsp+0xf0]
    650121b3:	mov    r9,QWORD PTR [rsp+0xe8]
    650121bb:	mov    rax,r9
    650121be:	sub    rax,rsi
    650121c1:	mov    edi,0x19
    650121c6:	cmp    rax,rdi
    650121c9:	cmovb  rdi,rax
    650121cd:	or     rax,0xffffffffffffffff
    650121d1:	sub    rax,r9
    650121d4:	cmp    rax,rdi
    650121d7:	jbe    0x650121e2
    650121d9:	lea    rax,[r9+rdi*1]
    650121dd:	cmp    rax,r9
    650121e0:	jae    0x650121f7
    650121e2:	call   0x6501cfe0
    650121e7:	mov    r10,QWORD PTR [rsp+0xf0]
    650121ef:	mov    r9,QWORD PTR [rsp+0xe8]
    650121f7:	test   rdi,rdi
    650121fa:	je     0x65012425
    65012200:	lea    rbx,[r9+rdi*1]
    65012204:	cmp    rbx,0xfffffffffffffffe
    65012208:	jbe    0x6501221f
    6501220a:	call   0x6501cfe0
    6501220f:	mov    r10,QWORD PTR [rsp+0xf0]
    65012217:	mov    r9,QWORD PTR [rsp+0xe8]
    6501221f:	cmp    r10,rbx
    65012222:	jae    0x65012249
    65012224:	mov    r8,r9
    65012227:	mov    rdx,rbx
    6501222a:	lea    rcx,[rsp+0xd0]
    65012232:	call   0x65002330
    65012237:	mov    r10,QWORD PTR [rsp+0xf0]
    6501223f:	mov    r9,QWORD PTR [rsp+0xe8]
    65012247:	jmp    0x65012285
    65012249:	test   rbx,rbx
    6501224c:	jne    0x65012285
    6501224e:	xor    edi,edi
    65012250:	mov    QWORD PTR [rsp+0xe8],rdi
    65012258:	lea    rax,[rsp+0xd8]
    65012260:	cmp    r10,0x10
    65012264:	cmovae rax,QWORD PTR [rsp+0xd8]
    6501226d:	mov    BYTE PTR [rax],dil
    65012270:	mov    r10,QWORD PTR [rsp+0xf0]
    65012278:	mov    r9,QWORD PTR [rsp+0xe8]
    65012280:	jmp    0x65012427
    65012285:	test   rbx,rbx
    65012288:	je     0x65012421
    6501228e:	lea    r8,[rsp+0xd8]
    65012296:	mov    rcx,QWORD PTR [rsp+0xd8]
    6501229e:	cmp    r10,0x10
    650122a2:	cmovae r8,rcx
    650122a6:	lea    rax,[rsp+0xd8]
    650122ae:	cmp    r10,0x10
    650122b2:	cmovae rax,rcx
    650122b6:	sub    r10,r9
    650122b9:	lea    rcx,[r9+rax*1]
    650122bd:	add    r8,rsi
    650122c0:	mov    r9,rdi
    650122c3:	mov    rdx,r10
    650122c6:	call   0x6501d640
    650122cb:	mov    QWORD PTR [rsp+0xe8],rbx
    650122d3:	lea    rax,[rsp+0xd8]
    650122db:	cmp    QWORD PTR [rsp+0xf0],0x10
    650122e4:	cmovae rax,QWORD PTR [rsp+0xd8]
    650122ed:	mov    BYTE PTR [rax+rbx*1],0x0
    650122f1:	mov    r10,QWORD PTR [rsp+0xf0]
    650122f9:	mov    r9,QWORD PTR [rsp+0xe8]
    65012301:	xor    edi,edi
    65012303:	jmp    0x65012427
    65012308:	or     rax,0xffffffffffffffff
    6501230c:	sub    rax,r9
    6501230f:	cmp    rax,0x19
    65012313:	jbe    0x6501231e
    65012315:	lea    rax,[r9+0x19]
    65012319:	cmp    rax,r9
    6501231c:	jae    0x65012333
    6501231e:	call   0x6501cfe0
    65012323:	mov    r10,QWORD PTR [rsp+0xf0]
    6501232b:	mov    r9,QWORD PTR [rsp+0xe8]
    65012333:	lea    rbx,[r9+0x19]
    65012337:	cmp    rbx,0xfffffffffffffffe
    6501233b:	jbe    0x65012352
    6501233d:	call   0x6501cfe0
    65012342:	mov    r10,QWORD PTR [rsp+0xf0]
    6501234a:	mov    r9,QWORD PTR [rsp+0xe8]
    65012352:	cmp    r10,rbx
    65012355:	jae    0x6501237c
    65012357:	mov    r8,r9
    6501235a:	mov    rdx,rbx
    6501235d:	lea    rcx,[rsp+0xd0]
    65012365:	call   0x65002330
    6501236a:	mov    r10,QWORD PTR [rsp+0xf0]
    65012372:	mov    r9,QWORD PTR [rsp+0xe8]
    6501237a:	jmp    0x650123b2
    6501237c:	test   rbx,rbx
    6501237f:	jne    0x650123b2
    65012381:	mov    QWORD PTR [rsp+0xe8],rdi
    65012389:	lea    rax,[rsp+0xd8]
    65012391:	cmp    r10,0x10
    65012395:	cmovae rax,QWORD PTR [rsp+0xd8]
    6501239e:	mov    BYTE PTR [rax],bl
    650123a0:	mov    r10,QWORD PTR [rsp+0xf0]
    650123a8:	mov    r9,QWORD PTR [rsp+0xe8]
    650123b0:	jmp    0x65012427
    650123b2:	test   rbx,rbx
    650123b5:	je     0x65012427
    650123b7:	lea    rax,[rsp+0xd8]
    650123bf:	cmp    r10,0x10
    650123c3:	cmovae rax,QWORD PTR [rsp+0xd8]
    650123cc:	sub    r10,r9
    650123cf:	lea    rcx,[r9+rax*1]
    650123d3:	mov    r9d,0x19
    650123d9:	lea    r8,[rsp+0xf8]
    650123e1:	mov    rdx,r10
    650123e4:	call   0x6501d640
    650123e9:	mov    QWORD PTR [rsp+0xe8],rbx
    650123f1:	lea    rax,[rsp+0xd8]
    650123f9:	cmp    QWORD PTR [rsp+0xf0],0x10
    65012402:	cmovae rax,QWORD PTR [rsp+0xd8]
    6501240b:	mov    BYTE PTR [rax+rbx*1],0x0
    6501240f:	mov    r10,QWORD PTR [rsp+0xf0]
    65012417:	mov    r9,QWORD PTR [rsp+0xe8]
    6501241f:	jmp    0x65012427
    65012421:	xor    edi,edi
    65012423:	jmp    0x65012427
    65012425:	xor    edi,edi
    65012427:	test   r12,r12
    6501242a:	je     0x650126f9
    65012430:	lea    rax,[rsp+0xd8]
    65012438:	mov    rcx,QWORD PTR [rsp+0xd8]
    65012440:	cmp    r10,0x10
    65012444:	cmovae rax,rcx
    65012448:	cmp    r12,rax
    6501244b:	jb     0x650125e3
    65012451:	lea    rax,[rsp+0xd8]
    65012459:	cmp    r10,0x10
    6501245d:	cmovae rax,rcx
    65012461:	add    rax,r9
    65012464:	cmp    rax,r12
    65012467:	jbe    0x650125e3
    6501246d:	lea    rax,[rsp+0xd8]
    65012475:	cmp    r10,0x10
    65012479:	cmovae rax,rcx
    6501247d:	mov    rsi,r12
    65012480:	sub    rsi,rax
    65012483:	cmp    r9,rsi
    65012486:	jae    0x6501249d
    65012488:	call   0x6501d0b0
    6501248d:	mov    r10,QWORD PTR [rsp+0xf0]
    65012495:	mov    r9,QWORD PTR [rsp+0xe8]
    6501249d:	mov    rax,r9
    650124a0:	sub    rax,rsi
    650124a3:	mov    rdi,rbp
    650124a6:	cmp    rax,rbp
    650124a9:	cmovb  rdi,rax
    650124ad:	or     rax,0xffffffffffffffff
    650124b1:	sub    rax,r9
    650124b4:	cmp    rax,rdi
    650124b7:	jbe    0x650124c2
    650124b9:	lea    rax,[r9+rdi*1]
    650124bd:	cmp    rax,r9
    650124c0:	jae    0x650124d7
    650124c2:	call   0x6501cfe0
    650124c7:	mov    r10,QWORD PTR [rsp+0xf0]
    650124cf:	mov    r9,QWORD PTR [rsp+0xe8]
    650124d7:	test   rdi,rdi
    650124da:	je     0x650126f9
    650124e0:	lea    rbx,[r9+rdi*1]
    650124e4:	cmp    rbx,0xfffffffffffffffe
    650124e8:	jbe    0x650124ff
    650124ea:	call   0x6501cfe0
    650124ef:	mov    r10,QWORD PTR [rsp+0xf0]
    650124f7:	mov    r9,QWORD PTR [rsp+0xe8]
    650124ff:	cmp    r10,rbx
    65012502:	jae    0x65012529
    65012504:	mov    r8,r9
    65012507:	mov    rdx,rbx
    6501250a:	lea    rcx,[rsp+0xd0]
    65012512:	call   0x65002330
    65012517:	mov    r10,QWORD PTR [rsp+0xf0]
    6501251f:	mov    r9,QWORD PTR [rsp+0xe8]
    65012527:	jmp    0x65012562
    65012529:	test   rbx,rbx
    6501252c:	jne    0x65012562
    6501252e:	mov    QWORD PTR [rsp+0xe8],rbx
    65012536:	lea    rax,[rsp+0xd8]
    6501253e:	cmp    r10,0x10
    65012542:	cmovae rax,QWORD PTR [rsp+0xd8]
    6501254b:	mov    BYTE PTR [rax],bl
    6501254d:	mov    r10,QWORD PTR [rsp+0xf0]
    65012555:	mov    r9,QWORD PTR [rsp+0xe8]
    6501255d:	jmp    0x650126f9
    65012562:	test   rbx,rbx
    65012565:	je     0x650126f9
    6501256b:	lea    r8,[rsp+0xd8]
    65012573:	mov    rcx,QWORD PTR [rsp+0xd8]
    6501257b:	cmp    r10,0x10
    6501257f:	cmovae r8,rcx
    65012583:	lea    rax,[rsp+0xd8]
    6501258b:	cmp    r10,0x10
    6501258f:	cmovae rax,rcx
    65012593:	sub    r10,r9
    65012596:	lea    rcx,[rax+r9*1]
    6501259a:	add    r8,rsi
    6501259d:	mov    r9,rdi
    650125a0:	mov    rdx,r10
    650125a3:	call   0x6501d640
    650125a8:	mov    QWORD PTR [rsp+0xe8],rbx
    650125b0:	lea    rax,[rsp+0xd8]
    650125b8:	cmp    QWORD PTR [rsp+0xf0],0x10
    650125c1:	cmovae rax,QWORD PTR [rsp+0xd8]
    650125ca:	mov    BYTE PTR [rax+rbx*1],0x0
    650125ce:	mov    r10,QWORD PTR [rsp+0xf0]
    650125d6:	mov    r9,QWORD PTR [rsp+0xe8]
    650125de:	jmp    0x650126f9
    650125e3:	or     rax,0xffffffffffffffff
    650125e7:	sub    rax,r9
    650125ea:	cmp    rax,rbp
    650125ed:	jbe    0x650125f8
    650125ef:	lea    rax,[r9+rbp*1]
    650125f3:	cmp    rax,r9
    650125f6:	jae    0x6501260d
    650125f8:	call   0x6501cfe0
    650125fd:	mov    r10,QWORD PTR [rsp+0xf0]
    65012605:	mov    r9,QWORD PTR [rsp+0xe8]
    6501260d:	test   rbp,rbp
    65012610:	je     0x650126f9
    65012616:	lea    rbx,[r9+rbp*1]
    6501261a:	cmp    rbx,0xfffffffffffffffe
    6501261e:	jbe    0x65012635
    65012620:	call   0x6501cfe0
    65012625:	mov    r10,QWORD PTR [rsp+0xf0]
    6501262d:	mov    r9,QWORD PTR [rsp+0xe8]
    65012635:	cmp    r10,rbx
    65012638:	jae    0x6501265f
    6501263a:	mov    r8,r9
    6501263d:	mov    rdx,rbx
    65012640:	lea    rcx,[rsp+0xd0]
    65012648:	call   0x65002330
    6501264d:	mov    r10,QWORD PTR [rsp+0xf0]
    65012655:	mov    r9,QWORD PTR [rsp+0xe8]
    6501265d:	jmp    0x65012695
    6501265f:	test   rbx,rbx
    65012662:	jne    0x65012695
    65012664:	mov    QWORD PTR [rsp+0xe8],rdi
    6501266c:	lea    rax,[rsp+0xd8]
    65012674:	cmp    r10,0x10
    65012678:	cmovae rax,QWORD PTR [rsp+0xd8]
    65012681:	mov    BYTE PTR [rax],bl
    65012683:	mov    r10,QWORD PTR [rsp+0xf0]
    6501268b:	mov    r9,QWORD PTR [rsp+0xe8]
    65012693:	jmp    0x650126f9
    65012695:	test   rbx,rbx
    65012698:	je     0x650126f9
    6501269a:	lea    rcx,[rsp+0xd8]
    650126a2:	cmp    r10,0x10
    650126a6:	cmovae rcx,QWORD PTR [rsp+0xd8]
    650126af:	sub    r10,r9
    650126b2:	add    rcx,r9
    650126b5:	mov    r9,rbp
    650126b8:	mov    r8,r12
    650126bb:	mov    rdx,r10
    650126be:	call   0x6501d640
    650126c3:	mov    QWORD PTR [rsp+0xe8],rbx
    650126cb:	lea    rax,[rsp+0xd8]
    650126d3:	cmp    QWORD PTR [rsp+0xf0],0x10
    650126dc:	cmovae rax,QWORD PTR [rsp+0xd8]
    650126e5:	mov    BYTE PTR [rax+rbx*1],0x0
    650126e9:	mov    r10,QWORD PTR [rsp+0xf0]
    650126f1:	mov    r9,QWORD PTR [rsp+0xe8]
    650126f9:	lea    r8,[rsp+0xd8]
    65012701:	cmp    r10,0x10
    65012705:	cmovae r8,QWORD PTR [rsp+0xd8]
    6501270e:	lea    rax,[rsp+0xa8]
    65012716:	mov    QWORD PTR [rsp+0x20],rax
    6501271b:	mov    edx,0x52514f4b
    65012720:	lea    rcx,[rsp+0x88]
    65012728:	call   0x65016bf0
    6501272d:	mov    rdi,QWORD PTR [rax]
    65012730:	mov    QWORD PTR [rax],0x0
    65012737:	mov    QWORD PTR [rsp+0xc0],rdi
    6501273f:	mov    rcx,QWORD PTR [rsp+0x88]
    65012747:	call   0x6501d190
    6501274c:	mov    DWORD PTR [rsp+0x48],0x0
    65012754:	xor    eax,eax
    65012756:	mov    ebx,0x1
    6501275b:	lock cmpxchg DWORD PTR [rip+0x3462d],ebx        # 0x65046d90
    65012763:	jne    0x650127d0
    65012765:	lea    r8,[rip+0x26e9c]        # 0x65039608
    6501276c:	lea    edx,[rbx+0x18]
    6501276f:	lea    rcx,[rip+0x26eba]        # 0x65039630
    65012776:	call   0x6500bc30
    6501277b:	mov    rbx,rax
    6501277e:	lea    r8,[rip+0x26ecb]        # 0x65039650
    65012785:	mov    edx,0x7
    6501278a:	lea    rcx,[rip+0x26ee7]        # 0x65039678
    65012791:	call   0x6500c5e0
    65012796:	mov    rcx,rax
    65012799:	call   QWORD PTR [rip+0x21889]        # 0x65034028
    6501279f:	add    DWORD PTR [rip+0x311a2],0x1        # 0x65043948
    650127a6:	test   rax,rax
    650127a9:	je     0x650127c0
    650127ab:	mov    rdx,rbx
    650127ae:	mov    rcx,rax
    650127b1:	call   QWORD PTR [rip+0x218f9]        # 0x650340b0
    650127b7:	add    DWORD PTR [rip+0x3118e],0x1        # 0x6504394c
    650127be:	jmp    0x650127c2
    650127c0:	xor    eax,eax
    650127c2:	mov    QWORD PTR [rip+0x346ef],rax        # 0x65046eb8
    650127c9:	mov    ebx,0x1
    650127ce:	jmp    0x650127d7
    650127d0:	mov    rax,QWORD PTR [rip+0x346e1]        # 0x65046eb8
    650127d7:	xor    edx,edx
    650127d9:	lea    rcx,[rsp+0x48]
    650127de:	call   rax
    650127e0:	test   eax,eax
    650127e2:	je     0x65012921
    650127e8:	xor    eax,eax
    650127ea:	lock cmpxchg DWORD PTR [rip+0x3454a],ebx        # 0x65046d3c
    650127f2:	jne    0x65012860
    650127f4:	lea    r8,[rip+0x266ad]        # 0x65038ea8
    650127fb:	mov    edx,0xc
    65012800:	lea    rcx,[rip+0x266e1]        # 0x65038ee8
    65012807:	call   0x6500bc30
    6501280c:	mov    rbx,rax
    6501280f:	lea    r8,[rip+0x266e2]        # 0x65038ef8
    65012816:	mov    edx,0x8
    6501281b:	lea    rcx,[rip+0x266fe]        # 0x65038f20
    65012822:	call   0x6500c5e0
    65012827:	mov    rcx,rax
    6501282a:	call   QWORD PTR [rip+0x217f8]        # 0x65034028
    65012830:	add    DWORD PTR [rip+0x31111],0x1        # 0x65043948
    65012837:	test   rax,rax
    6501283a:	je     0x65012854
    6501283c:	mov    rdx,rbx
    6501283f:	mov    rcx,rax
    65012842:	call   QWORD PTR [rip+0x21868]        # 0x650340b0
    65012848:	mov    r11,rax
    6501284b:	add    DWORD PTR [rip+0x310fa],0x1        # 0x6504394c
    65012852:	jmp    0x65012857
    65012854:	xor    r11d,r11d
    65012857:	mov    QWORD PTR [rip+0x345e2],r11        # 0x65046e40
    6501285e:	jmp    0x65012867
    65012860:	mov    r11,QWORD PTR [rip+0x345d9]        # 0x65046e40
    65012867:	mov    eax,0x1388
    6501286c:	mov    esi,DWORD PTR [rsp+0x101c8]
    65012873:	cmp    esi,eax
    65012875:	cmovb  eax,esi
    65012878:	mov    DWORD PTR [rsp+0x38],eax
    6501287c:	mov    DWORD PTR [rsp+0x30],0xffff
    65012884:	lea    rax,[rsp+0x120]
    6501288c:	mov    QWORD PTR [rsp+0x28],rax
    65012891:	mov    QWORD PTR [rsp+0x20],0x0
    6501289a:	movzx  r9d,WORD PTR [rsp+0xa8]
    650128a3:	mov    r8,rdi
    650128a6:	mov    edx,DWORD PTR [rsp+0x44]
    650128aa:	mov    rax,QWORD PTR [rsp+0xb0]
    650128b2:	mov    rcx,QWORD PTR [rax]
    650128b5:	call   r11
    650128b8:	mov    ebx,eax
    650128ba:	test   eax,eax
    650128bc:	jne    0x65012924
    650128be:	cmp    BYTE PTR [rsp+0x101d0],al
    650128c5:	je     0x650128fe
    650128c7:	mov    rcx,rdi
    650128ca:	call   0x6501d190
    650128cf:	nop
    650128d0:	cmp    QWORD PTR [rsp+0xf0],0x10
    650128d9:	jb     0x650128e8
    650128db:	mov    rcx,QWORD PTR [rsp+0xd8]
    650128e3:	call   0x6501d190
    650128e8:	add    r13d,0x1
    650128ec:	cmp    r13d,0x5
    650128f0:	je     0x65012945
    650128f2:	mov    rcx,QWORD PTR [rsp+0x78]
    650128f7:	xor    edi,edi
    650128f9:	jmp    0x650120b0
    650128fe:	mov    rcx,rdi
    65012901:	call   0x6501d190
    65012906:	nop
    65012907:	cmp    QWORD PTR [rsp+0xf0],0x10
    65012910:	jb     0x65012945
    65012912:	mov    rcx,QWORD PTR [rsp+0xd8]
    6501291a:	call   0x6501d190
    6501291f:	jmp    0x65012945
    65012921:	or     ebx,0xffffffff
    65012924:	mov    rcx,rdi
    65012927:	call   0x6501d190
    6501292c:	nop
    6501292d:	cmp    QWORD PTR [rsp+0xf0],0x10
    65012936:	jb     0x65012945
    65012938:	mov    rcx,QWORD PTR [rsp+0xd8]
    65012940:	call   0x6501d190
    65012945:	test   ebx,ebx
    65012947:	je     0x65012b0b
    6501294d:	movzx  eax,WORD PTR [rsp+0x12c]
    65012955:	test   ax,ax
    65012958:	je     0x65012af4
    6501295e:	movzx  r9d,ax
    65012962:	lea    rax,[rsp+0x90]
    6501296a:	mov    QWORD PTR [rsp+0x20],rax
    6501296f:	lea    r8,[rsp+0x148]
    65012977:	mov    edx,0x52534f4b
    6501297c:	lea    rcx,[rsp+0x98]
    65012984:	call   0x65016e00
    65012989:	mov    rdi,QWORD PTR [rax]
    6501298c:	xor    ebp,ebp
    6501298e:	mov    QWORD PTR [rax],rbp
    65012991:	mov    QWORD PTR [rsp+0xc8],rdi
    65012999:	mov    rcx,QWORD PTR [rsp+0x98]
    650129a1:	call   0x6501d190
    650129a6:	test   rdi,rdi
    650129a9:	je     0x65012ae5
    650129af:	mov    ecx,DWORD PTR [rdi+0x10]
    650129b2:	call   QWORD PTR [rip+0x219e0]        # 0x65034398
    650129b8:	mov    r11d,eax
    650129bb:	mov    DWORD PTR [rdi+0x10],eax
    650129be:	cmp    BYTE PTR [rsp+0x101b0],bpl
    650129c6:	jne    0x650129cf
    650129c8:	test   r15d,r15d
    650129cb:	cmovg  r15d,ebp
    650129cf:	mov    rdx,QWORD PTR [rdi]
    650129d2:	mov    rax,QWORD PTR [rsp+0x78]
    650129d7:	cmp    rdx,QWORD PTR [rax]
    650129da:	jne    0x650129ea
    650129dc:	mov    rdx,QWORD PTR [rdi+0x8]
    650129e0:	cmp    rdx,QWORD PTR [rax+0x8]
    650129e4:	jne    0x650129ea
    650129e6:	mov    eax,ebp
    650129e8:	jmp    0x650129ef
    650129ea:	sbb    eax,eax
    650129ec:	sbb    eax,0xffffffff
    650129ef:	test   eax,eax
    650129f1:	jne    0x65012ae5
    650129f7:	cmp    r11d,r15d
    650129fa:	jne    0x65012ae5
    65012a00:	movzx  eax,BYTE PTR [rdi+0x14]
    65012a04:	mov    rcx,QWORD PTR [rsp+0x80]
    65012a0c:	mov    BYTE PTR [rcx],al
    65012a0e:	mov    rax,QWORD PTR [rsp+0x90]
    65012a16:	lea    rbx,[rax-0x15]
    65012a1a:	mov    QWORD PTR [rsp+0x70],r14
    65012a1f:	mov    r8,rbp
    65012a22:	mov    QWORD PTR [rsp+0x68],rbp
    65012a27:	mov    BYTE PTR [rsp+0x58],r8b
    65012a2c:	cmp    rbx,0xfffffffffffffffe
    65012a30:	jbe    0x65012a41
    65012a32:	call   0x6501cfe0
    65012a37:	mov    r14,QWORD PTR [rsp+0x70]
    65012a3c:	mov    r8,QWORD PTR [rsp+0x68]
    65012a41:	cmp    r14,rbx
    65012a44:	jae    0x65012a5a
    65012a46:	mov    rdx,rbx
    65012a49:	lea    rcx,[rsp+0x50]
    65012a4e:	call   0x65002330
    65012a53:	mov    r14,QWORD PTR [rsp+0x70]
    65012a58:	jmp    0x65012a77
    65012a5a:	test   rbx,rbx
    65012a5d:	jne    0x65012a77
    65012a5f:	mov    QWORD PTR [rsp+0x68],rbp
    65012a64:	lea    rax,[rsp+0x58]
    65012a69:	cmp    r14,0x10
    65012a6d:	cmovae rax,QWORD PTR [rsp+0x58]
    65012a73:	mov    BYTE PTR [rax],bl
    65012a75:	jmp    0x65012ab4
    65012a77:	test   rbx,rbx
    65012a7a:	je     0x65012ab4
    65012a7c:	lea    rcx,[rsp+0x58]
    65012a81:	cmp    r14,0x10
    65012a85:	cmovae rcx,QWORD PTR [rsp+0x58]
    65012a8b:	mov    r9,rbx
    65012a8e:	lea    r8,[rdi+0x15]
    65012a92:	mov    rdx,r14
    65012a95:	call   0x6501d640
    65012a9a:	mov    QWORD PTR [rsp+0x68],rbx
    65012a9f:	lea    rax,[rsp+0x58]
    65012aa4:	cmp    QWORD PTR [rsp+0x70],0x10
    65012aaa:	cmovae rax,QWORD PTR [rsp+0x58]
    65012ab0:	mov    BYTE PTR [rbx+rax*1],0x0
    65012ab4:	or     r9,0xffffffffffffffff
    65012ab8:	xor    r8d,r8d
    65012abb:	lea    rdx,[rsp+0x50]
    65012ac0:	mov    rcx,QWORD PTR [rsp+0xa0]
    65012ac8:	call   0x65001e20
    65012acd:	nop
    65012ace:	cmp    QWORD PTR [rsp+0x70],0x10
    65012ad4:	jb     0x65012ae0
    65012ad6:	mov    rcx,QWORD PTR [rsp+0x58]
    65012adb:	call   0x6501d190
    65012ae0:	mov    BYTE PTR [rsp+0x40],0x1
    65012ae5:	mov    rcx,rdi
    65012ae8:	call   0x6501d190
    65012aed:	movzx  eax,BYTE PTR [rsp+0x40]
    65012af2:	jmp    0x65012b0d
    65012af4:	xor    al,al
    65012af6:	movzx  eax,al
    65012af9:	cmp    BYTE PTR [rsp+0x101b0],0x0
    65012b01:	mov    edx,0x1
    65012b06:	cmovne eax,edx
    65012b09:	jmp    0x65012b0d
    65012b0b:	xor    al,al
    65012b0d:	mov    rcx,QWORD PTR [rsp+0x10120]
    65012b15:	xor    rcx,rsp
    65012b18:	call   0x6501e4e0
    65012b1d:	add    rsp,0x10138
    65012b24:	pop    r15
    65012b26:	pop    r14
    65012b28:	pop    r13
    65012b2a:	pop    r12
    65012b2c:	pop    rdi
    65012b2d:	pop    rsi
    65012b2e:	pop    rbp
    65012b2f:	pop    rbx
    65012b30:	ret    
    65012b31:	int3   
    65012b32:	int3   
    65012b33:	int3   
    65012b34:	int3   
    65012b35:	int3   
    65012b36:	int3   
    65012b37:	int3   
    65012b38:	int3   
    65012b39:	int3   
    65012b3a:	int3   
    65012b3b:	int3   
    65012b3c:	int3   
    65012b3d:	int3   
    65012b3e:	int3   
    65012b3f:	int3   
    65012b40:	rex push rbp
    65012b42:	sub    rsp,0x20
    65012b46:	mov    rbp,rdx
    65012b49:	lea    rcx,[rbp+0xd0]
    65012b50:	call   0x65001c70
    65012b55:	add    rsp,0x20
    65012b59:	pop    rbp
    65012b5a:	ret    
    65012b5b:	int3   
    65012b5c:	int3   
    65012b5d:	int3   
    65012b5e:	int3   
    65012b5f:	int3   
    65012b60:	rex push rbp
    65012b62:	sub    rsp,0x20
    65012b66:	mov    rbp,rdx
    65012b69:	lea    rcx,[rbp+0xc0]
    65012b70:	call   0x65014a50
    65012b75:	add    rsp,0x20
    65012b79:	pop    rbp
    65012b7a:	ret    
    65012b7b:	int3   
    65012b7c:	int3   
    65012b7d:	int3   
    65012b7e:	int3   
    65012b7f:	int3   
    65012b80:	rex push rbp
    65012b82:	sub    rsp,0x20
    65012b86:	mov    rbp,rdx
    65012b89:	lea    rcx,[rbp+0xc8]
    65012b90:	call   0x65014a50
    65012b95:	add    rsp,0x20
    65012b99:	pop    rbp
    65012b9a:	ret    
    65012b9b:	int3   
    65012b9c:	int3   
    65012b9d:	int3   
    65012b9e:	int3   
    65012b9f:	int3   
    65012ba0:	rex push rbp
    65012ba2:	sub    rsp,0x20
    65012ba6:	mov    rbp,rdx
    65012ba9:	lea    rcx,[rbp+0x50]
    65012bad:	call   0x65001c70
    65012bb2:	add    rsp,0x20
    65012bb6:	pop    rbp
    65012bb7:	ret    
    65012bb8:	int3   
    65012bb9:	int3   
    65012bba:	int3   
    65012bbb:	int3   
    65012bbc:	int3   
    65012bbd:	int3   
    65012bbe:	int3   
    65012bbf:	int3   
    65012bc0:	mov    QWORD PTR [rsp+0x10],rbx
    65012bc5:	push   rdi
    65012bc6:	sub    rsp,0x20
    65012bca:	mov    rbx,QWORD PTR [rcx]
    65012bcd:	mov    rdi,rcx
    65012bd0:	test   rbx,rbx
    65012bd3:	je     0x65012c12
    65012bd5:	or     eax,0xffffffff
    65012bd8:	lock xadd DWORD PTR [rbx+0x10],eax
    65012bdd:	add    eax,0xffffffff
    65012be0:	jne    0x65012c0b
    65012be2:	test   rbx,rbx
    65012be5:	je     0x65012c0b
    65012be7:	mov    rcx,QWORD PTR [rbx]
    65012bea:	test   rcx,rcx
    65012bed:	je     0x65012bf5
    65012bef:	call   QWORD PTR [rip+0x21753]        # 0x65034348
    65012bf5:	mov    rcx,QWORD PTR [rbx+0x8]
    65012bf9:	test   rcx,rcx
    65012bfc:	je     0x65012c03
    65012bfe:	call   0x6501ee10
    65012c03:	mov    rcx,rbx
    65012c06:	call   0x6501d190
    65012c0b:	mov    QWORD PTR [rdi],0x0
    65012c12:	mov    rbx,QWORD PTR [rsp+0x38]
    65012c17:	add    rsp,0x20
    65012c1b:	pop    rdi
    65012c1c:	ret    
    65012c1d:	int3   
    65012c1e:	int3   
    65012c1f:	int3   
    65012c20:	mov    QWORD PTR [rsp+0x10],rdx
    65012c25:	push   rbx
    65012c26:	push   rsi
    65012c27:	push   rdi
    65012c28:	sub    rsp,0x30
    65012c2c:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65012c35:	mov    rbx,r8
    65012c38:	mov    rdi,rdx
    65012c3b:	mov    DWORD PTR [rsp+0x50],0x0
    65012c43:	mov    rax,QWORD PTR [rcx]
    65012c46:	mov    QWORD PTR [rdx],rax
    65012c49:	test   rax,rax
    65012c4c:	je     0x65012c53
    65012c4e:	lock add DWORD PTR [rax+0x10],0x1
    65012c53:	mov    DWORD PTR [rsp+0x50],0x1
    65012c5b:	mov    ecx,0x18
    65012c60:	call   0x6501da50
    65012c65:	mov    QWORD PTR [rsp+0x68],rax
    65012c6a:	test   rax,rax
    65012c6d:	je     0x65012c82
    65012c6f:	mov    r8,rbx
    65012c72:	mov    rdx,rdi
    65012c75:	mov    rcx,rax
    65012c78:	call   0x65012d40
    65012c7d:	mov    rsi,rax
    65012c80:	jmp    0x65012c84
    65012c82:	xor    esi,esi
    65012c84:	test   rsi,rsi
    65012c87:	jne    0x65012c98
    65012c89:	mov    ecx,0x8007000e
    65012c8e:	call   0x6502ea30
    65012c93:	mov    rax,rdi
    65012c96:	jmp    0x65012ce3
    65012c98:	mov    rbx,QWORD PTR [rdi]
    65012c9b:	test   rbx,rbx
    65012c9e:	je     0x65012cdd
    65012ca0:	or     eax,0xffffffff
    65012ca3:	lock xadd DWORD PTR [rbx+0x10],eax
    65012ca8:	add    eax,0xffffffff
    65012cab:	jne    0x65012cd6
    65012cad:	test   rbx,rbx
    65012cb0:	je     0x65012cd6
    65012cb2:	mov    rcx,QWORD PTR [rbx]
    65012cb5:	test   rcx,rcx
    65012cb8:	je     0x65012cc0
    65012cba:	call   QWORD PTR [rip+0x21688]        # 0x65034348
    65012cc0:	mov    rcx,QWORD PTR [rbx+0x8]
    65012cc4:	test   rcx,rcx
    65012cc7:	je     0x65012cce
    65012cc9:	call   0x6501ee10
    65012cce:	mov    rcx,rbx
    65012cd1:	call   0x6501d190
    65012cd6:	mov    QWORD PTR [rdi],0x0
    65012cdd:	mov    QWORD PTR [rdi],rsi
    65012ce0:	mov    rax,rdi
    65012ce3:	add    rsp,0x30
    65012ce7:	pop    rdi
    65012ce8:	pop    rsi
    65012ce9:	pop    rbx
    65012cea:	ret    
    65012ceb:	int3   
    65012cec:	int3   
    65012ced:	int3   
    65012cee:	int3   
    65012cef:	int3   
    65012cf0:	rex push rbp
    65012cf2:	sub    rsp,0x20
    65012cf6:	mov    rbp,rdx
    65012cf9:	mov    eax,DWORD PTR [rbp+0x50]
    65012cfc:	and    eax,0x1
    65012cff:	test   eax,eax
    65012d01:	je     0x65012d10
    65012d03:	and    DWORD PTR [rbp+0x50],0xfffffffe
    65012d07:	mov    rcx,QWORD PTR [rbp+0x58]
    65012d0b:	call   0x65012bc0
    65012d10:	add    rsp,0x20
    65012d14:	pop    rbp
    65012d15:	ret    
    65012d16:	int3   
    65012d17:	int3   
    65012d18:	int3   
    65012d19:	int3   
    65012d1a:	int3   
    65012d1b:	int3   
    65012d1c:	int3   
    65012d1d:	int3   
    65012d1e:	int3   
    65012d1f:	int3   
    65012d20:	rex push rbp
    65012d22:	sub    rsp,0x20
    65012d26:	mov    rbp,rdx
    65012d29:	mov    rcx,QWORD PTR [rbp+0x68]
    65012d2d:	call   0x6501d190
    65012d32:	add    rsp,0x20
    65012d36:	pop    rbp
    65012d37:	ret    
    65012d38:	int3   
    65012d39:	int3   
    65012d3a:	int3   
    65012d3b:	int3   
    65012d3c:	int3   
    65012d3d:	int3   
    65012d3e:	int3   
    65012d3f:	int3   
    65012d40:	mov    QWORD PTR [rsp+0x8],rbx
    65012d45:	mov    QWORD PTR [rsp+0x10],rbp
    65012d4a:	mov    QWORD PTR [rsp+0x18],rsi
    65012d4f:	push   rdi
    65012d50:	push   r12
    65012d52:	push   r13
    65012d54:	sub    rsp,0x20
    65012d58:	xor    edi,edi
    65012d5a:	mov    rbx,rcx
    65012d5d:	mov    DWORD PTR [rcx+0x10],0x1
    65012d64:	mov    QWORD PTR [rcx+0x8],rdi
    65012d68:	mov    rcx,QWORD PTR [rdx]
    65012d6b:	mov    rbp,r8
    65012d6e:	test   rcx,rcx
    65012d71:	mov    r12,rdx
    65012d74:	je     0x65012d88
    65012d76:	mov    rcx,QWORD PTR [rcx]
    65012d79:	test   rcx,rcx
    65012d7c:	je     0x65012d88
    65012d7e:	call   QWORD PTR [rip+0x215a4]        # 0x65034328
    65012d84:	mov    esi,eax
    65012d86:	jmp    0x65012d8a
    65012d88:	mov    esi,edi
    65012d8a:	mov    rax,QWORD PTR [rbp+0x0]
    65012d8e:	test   rax,rax
    65012d91:	je     0x65012da3
    65012d93:	mov    rcx,QWORD PTR [rax]
    65012d96:	test   rcx,rcx
    65012d99:	je     0x65012da3
    65012d9b:	call   QWORD PTR [rip+0x21587]        # 0x65034328
    65012da1:	mov    edi,eax
    65012da3:	lea    r13d,[rdi+rsi*1]
    65012da7:	xor    ecx,ecx
    65012da9:	lea    edx,[r13+r13*1+0x0]
    65012dae:	call   QWORD PTR [rip+0x2156c]        # 0x65034320
    65012db4:	test   rax,rax
    65012db7:	mov    rcx,rax
    65012dba:	mov    QWORD PTR [rbx],rax
    65012dbd:	jne    0x65012dcb
    65012dbf:	mov    ecx,0x8007000e
    65012dc4:	call   0x6502ea30
    65012dc9:	jmp    0x65012e17
    65012dcb:	mov    rax,QWORD PTR [r12]
    65012dcf:	test   rax,rax
    65012dd2:	je     0x65012def
    65012dd4:	mov    r8,QWORD PTR [rax]
    65012dd7:	test   r8,r8
    65012dda:	je     0x65012def
    65012ddc:	lea    r9d,[rsi+0x1]
    65012de0:	lea    edx,[r13+0x1]
    65012de4:	add    r9,r9
    65012de7:	add    rdx,rdx
    65012dea:	call   0x6501d640
    65012def:	mov    rax,QWORD PTR [rbp+0x0]
    65012df3:	test   rax,rax
    65012df6:	je     0x65012e17
    65012df8:	mov    r8,QWORD PTR [rax]
    65012dfb:	test   r8,r8
    65012dfe:	je     0x65012e17
    65012e00:	mov    rax,QWORD PTR [rbx]
    65012e03:	lea    edx,[rdi+0x1]
    65012e06:	mov    ecx,esi
    65012e08:	add    rdx,rdx
    65012e0b:	lea    rcx,[rax+rcx*2]
    65012e0f:	mov    r9,rdx
    65012e12:	call   0x6501d640
    65012e17:	mov    rbp,QWORD PTR [rsp+0x48]
    65012e1c:	mov    rsi,QWORD PTR [rsp+0x50]
    65012e21:	mov    rax,rbx
    65012e24:	mov    rbx,QWORD PTR [rsp+0x40]
    65012e29:	add    rsp,0x20
    65012e2d:	pop    r13
    65012e2f:	pop    r12
    65012e31:	pop    rdi
    65012e32:	ret    
    65012e33:	int3   
    65012e34:	int3   
    65012e35:	int3   
    65012e36:	int3   
    65012e37:	int3   
    65012e38:	int3   
    65012e39:	int3   
    65012e3a:	int3   
    65012e3b:	int3   
    65012e3c:	int3   
    65012e3d:	int3   
    65012e3e:	int3   
    65012e3f:	int3   
    65012e40:	rex.W jmp QWORD PTR [rip+0x214d1]        # 0x65034318
    65012e47:	int3   
    65012e48:	int3   
    65012e49:	int3   
    65012e4a:	int3   
    65012e4b:	int3   
    65012e4c:	int3   
    65012e4d:	int3   
    65012e4e:	int3   
    65012e4f:	int3   
    65012e50:	mov    QWORD PTR [rsp+0x8],rbx
    65012e55:	mov    DWORD PTR [rsp+0x18],r8d
    65012e5a:	push   rbp
    65012e5b:	push   rsi
    65012e5c:	push   rdi
    65012e5d:	push   r12
    65012e5f:	push   r13
    65012e61:	push   r14
    65012e63:	push   r15
    65012e65:	sub    rsp,0x20
    65012e69:	movsxd rax,edx
    65012e6c:	xor    r14b,r14b
    65012e6f:	xor    ebp,ebp
    65012e71:	mov    rsi,r9
    65012e74:	mov    r15,rcx
    65012e77:	mov    rdi,r9
    65012e7a:	mov    r12d,ebp
    65012e7d:	mov    BYTE PTR [r9],bpl
    65012e80:	lea    r13,[rax+rcx*1]
    65012e84:	mov    QWORD PTR [rsp+0x78],rax
    65012e89:	data16 xchg ax,ax
    65012e8c:	data16 data16 xchg ax,ax
    65012e90:	movzx  eax,BYTE PTR [r13+0x0]
    65012e95:	test   al,al
    65012e97:	je     0x65012f48
    65012e9d:	movsx  ecx,al
    65012ea0:	call   0x6501f730
    65012ea5:	movsx  ecx,al
    65012ea8:	mov    ebx,eax
    65012eaa:	call   0x6501f860
    65012eaf:	movzx  edx,BYTE PTR [rdi]
    65012eb2:	movzx  ecx,bl
    65012eb5:	test   eax,eax
    65012eb7:	mov    eax,0x30
    65012ebc:	cmovne ecx,eax
    65012ebf:	shl    dl,0x4
    65012ec2:	add    r14b,0x1
    65012ec6:	lea    eax,[rcx-0x30]
    65012ec9:	mov    BYTE PTR [rdi],dl
    65012ecb:	cmp    al,0x9
    65012ecd:	ja     0x65012ed5
    65012ecf:	or     al,dl
    65012ed1:	mov    BYTE PTR [rdi],al
    65012ed3:	jmp    0x65012ee3
    65012ed5:	lea    eax,[rcx-0x61]
    65012ed8:	cmp    al,0x5
    65012eda:	ja     0x65012f10
    65012edc:	sub    cl,0x57
    65012edf:	or     cl,dl
    65012ee1:	mov    BYTE PTR [rdi],cl
    65012ee3:	cmp    r14b,0x2
    65012ee7:	jne    0x65012f0a
    65012ee9:	movzx  eax,BYTE PTR [rdi]
    65012eec:	test   al,al
    65012eee:	je     0x65012efc
    65012ef0:	movsx  ecx,al
    65012ef3:	call   0x6501f970
    65012ef8:	test   eax,eax
    65012efa:	je     0x65012f10
    65012efc:	add    rdi,0x1
    65012f00:	add    r12d,0x1
    65012f04:	xor    r14b,r14b
    65012f07:	mov    BYTE PTR [rdi],bpl
    65012f0a:	add    r13,0x1
    65012f0e:	jmp    0x65012e90
    65012f10:	mov    rdi,QWORD PTR [rsp+0x78]
    65012f15:	mov    r12d,ebp
    65012f18:	mov    r13,rsi
    65012f1b:	add    rdi,r15
    65012f1e:	xchg   ax,ax
    65012f20:	movzx  ebx,BYTE PTR [rdi]
    65012f23:	test   bl,bl
    65012f25:	je     0x65012f48
    65012f27:	movsx  ecx,bl
    65012f2a:	call   0x6501f970
    65012f2f:	test   eax,eax
    65012f31:	je     0x65012f45
    65012f33:	mov    BYTE PTR [r13+0x0],bl
    65012f37:	add    r13,0x1
    65012f3b:	add    r12d,0x1
    65012f3f:	add    rdi,0x1
    65012f43:	jmp    0x65012f20
    65012f45:	mov    r12d,ebp
    65012f48:	cmp    DWORD PTR [rsp+0x70],ebp
    65012f4c:	movsxd r8,r12d
    65012f4f:	mov    BYTE PTR [r8+rsi*1],bpl
    65012f53:	je     0x65012f87
    65012f55:	test   r12d,r12d
    65012f58:	jle    0x65012f87
    65012f5a:	add    r8,0xffffffffffffffff
    65012f5e:	lea    rdx,[rsi+0x1]
    65012f62:	shr    r8,1
    65012f65:	add    r8,0x1
    65012f69:	data16 xchg ax,ax
    65012f6c:	data16 data16 xchg ax,ax
    65012f70:	movzx  ecx,BYTE PTR [rdx-0x1]
    65012f74:	movzx  eax,BYTE PTR [rdx]
    65012f77:	add    rdx,0x2
    65012f7b:	sub    r8,0x1
    65012f7f:	mov    BYTE PTR [rdx-0x3],al
    65012f82:	mov    BYTE PTR [rdx-0x2],cl
    65012f85:	jne    0x65012f70
    65012f87:	or     r12d,0xffffffff
    65012f8b:	cmp    BYTE PTR [rsi],bpl
    65012f8e:	mov    ebx,r12d
    65012f91:	je     0x65012ff7
    65012f93:	mov    rdi,rsi
    65012f96:	movsx  ecx,BYTE PTR [rdi]
    65012f99:	call   0x6501f860
    65012f9e:	test   eax,eax
    65012fa0:	jne    0x65012faa
    65012fa2:	test   ebx,ebx
    65012fa4:	mov    r12d,ebp
    65012fa7:	cmovs  ebx,ebp
    65012faa:	add    rdi,0x1
    65012fae:	add    ebp,0x1
    65012fb1:	cmp    BYTE PTR [rdi],0x0
    65012fb4:	jne    0x65012f96
    65012fb6:	test   ebx,ebx
    65012fb8:	js     0x65012ff7
    65012fba:	test   r12d,r12d
    65012fbd:	js     0x65012ff7
    65012fbf:	movsxd r8,ebx
    65012fc2:	movsxd r9,r12d
    65012fc5:	cmp    r8,r9
    65012fc8:	mov    rcx,r8
    65012fcb:	jg     0x65012fed
    65012fcd:	data16 xchg ax,ax
    65012fd0:	movzx  edx,BYTE PTR [rcx+rsi*1]
    65012fd4:	test   dl,dl
    65012fd6:	je     0x65012fed
    65012fd8:	mov    rax,rcx
    65012fdb:	add    rcx,0x1
    65012fdf:	add    ebx,0x1
    65012fe2:	sub    rax,r8
    65012fe5:	cmp    rcx,r9
    65012fe8:	mov    BYTE PTR [rax+rsi*1],dl
    65012feb:	jle    0x65012fd0
    65012fed:	movsxd rax,ebx
    65012ff0:	sub    rax,r8
    65012ff3:	mov    BYTE PTR [rax+rsi*1],0x0
    65012ff7:	mov    rax,rsi
    65012ffa:	mov    rbx,QWORD PTR [rsp+0x60]
    65012fff:	add    rsp,0x20
    65013003:	pop    r15
    65013005:	pop    r14
    65013007:	pop    r13
    65013009:	pop    r12
    6501300b:	pop    rdi
    6501300c:	pop    rsi
    6501300d:	pop    rbp
    6501300e:	ret    
    6501300f:	int3   
    65013010:	rex push rbx
    65013012:	push   rsi
    65013013:	push   rdi
    65013014:	push   r12
    65013016:	push   r14
    65013018:	push   r15
    6501301a:	mov    eax,0x2f98
    6501301f:	call   0x650330c0
    65013024:	sub    rsp,rax
    65013027:	mov    rax,QWORD PTR [rip+0x2f0f2]        # 0x65042120
    6501302e:	xor    rax,rsp
    65013031:	mov    QWORD PTR [rsp+0x2f80],rax
    65013039:	xor    dil,dil
    6501303c:	xor    eax,eax
    6501303e:	mov    r15,r8
    65013041:	xor    r12d,r12d
    65013044:	mov    QWORD PTR [rsp+0x50],rdx
    65013049:	mov    QWORD PTR [rsp+0x48],rcx
    6501304e:	mov    esi,0x1
    65013053:	lock cmpxchg DWORD PTR [rip+0x33d01],esi        # 0x65046d5c
    6501305b:	jne    0x650130ca
    6501305d:	lea    r8,[rip+0x2626c]        # 0x650392d0
    65013064:	lea    edx,[rsi+0xa]
    65013067:	lea    rcx,[rip+0x26292]        # 0x65039300
    6501306e:	call   0x6500bc30
    65013073:	lea    r8,[rip+0x26296]        # 0x65039310
    6501307a:	lea    edx,[rsi+0x7]
    6501307d:	lea    rcx,[rip+0x260ac]        # 0x65039130
    65013084:	mov    rbx,rax
    65013087:	call   0x6500c5e0
    6501308c:	mov    rcx,rax
    6501308f:	call   QWORD PTR [rip+0x20f93]        # 0x65034028
    65013095:	add    DWORD PTR [rip+0x308ad],esi        # 0x65043948
    6501309b:	test   rax,rax
    6501309e:	je     0x650130be
    650130a0:	mov    rdx,rbx
    650130a3:	mov    rcx,rax
    650130a6:	call   QWORD PTR [rip+0x21004]        # 0x650340b0
    650130ac:	add    DWORD PTR [rip+0x3089a],esi        # 0x6504394c
    650130b2:	mov    rbx,rax
    650130b5:	mov    QWORD PTR [rip+0x33dc4],rax        # 0x65046e80
    650130bc:	jmp    0x650130d1
    650130be:	mov    rbx,r12
    650130c1:	mov    QWORD PTR [rip+0x33db8],rbx        # 0x65046e80
    650130c8:	jmp    0x650130d1
    650130ca:	mov    rbx,QWORD PTR [rip+0x33daf]        # 0x65046e80
    650130d1:	lea    r8,[rip+0x25ba0]        # 0x65038c78
    650130d8:	lea    rcx,[rip+0x25bc9]        # 0x65038ca8
    650130df:	mov    edx,0x12
    650130e4:	call   0x6500c5e0
    650130e9:	xor    r9d,r9d
    650130ec:	mov    QWORD PTR [rsp+0x30],r12
    650130f1:	lea    r8d,[r9+0x3]
    650130f5:	xor    edx,edx
    650130f7:	mov    rcx,rax
    650130fa:	mov    DWORD PTR [rsp+0x28],r12d
    650130ff:	mov    DWORD PTR [rsp+0x20],0x3
    65013107:	call   rbx
    65013109:	cmp    rax,0xffffffffffffffff
    6501310d:	mov    r14,rax
    65013110:	jne    0x65013119
    65013112:	xor    al,al
    65013114:	jmp    0x65013563
    65013119:	xor    eax,eax
    6501311b:	lea    rcx,[rsp+0x870]
    65013123:	xor    edx,edx
    65013125:	mov    QWORD PTR [rsp+0x58],rax
    6501312a:	mov    r8d,0x2710
    65013130:	mov    DWORD PTR [rsp+0x40],r12d
    65013135:	mov    DWORD PTR [rsp+0x58],r12d
    6501313a:	mov    DWORD PTR [rsp+0x5c],r12d
    6501313f:	mov    DWORD PTR [rsp+0x60],eax
    65013143:	call   0x6501ee30
    65013148:	xor    eax,eax
    6501314a:	lock cmpxchg DWORD PTR [rip+0x33c22],esi        # 0x65046d74
    65013152:	jne    0x650131c2
    65013154:	lea    r8,[rip+0x2642d]        # 0x65039588
    6501315b:	lea    rcx,[rip+0x26466]        # 0x650395c8
    65013162:	mov    edx,0xf
    65013167:	call   0x6500bc30
    6501316c:	lea    r8,[rip+0x26465]        # 0x650395d8
    65013173:	lea    rcx,[rip+0x25fb6]        # 0x65039130
    6501317a:	mov    edx,0x8
    6501317f:	mov    rbx,rax
    65013182:	call   0x6500c5e0
    65013187:	mov    rcx,rax
    6501318a:	call   QWORD PTR [rip+0x20e98]        # 0x65034028
    65013190:	add    DWORD PTR [rip+0x307b2],esi        # 0x65043948
    65013196:	test   rax,rax
    65013199:	je     0x650131b6
    6501319b:	mov    rdx,rbx
    6501319e:	mov    rcx,rax
    650131a1:	call   QWORD PTR [rip+0x20f09]        # 0x650340b0
    650131a7:	add    DWORD PTR [rip+0x3079f],esi        # 0x6504394c
    650131ad:	mov    QWORD PTR [rip+0x33cfc],rax        # 0x65046eb0
    650131b4:	jmp    0x650131c9
    650131b6:	mov    rax,r12
    650131b9:	mov    QWORD PTR [rip+0x33cf0],rax        # 0x65046eb0
    650131c0:	jmp    0x650131c9
    650131c2:	mov    rax,QWORD PTR [rip+0x33ce7]        # 0x65046eb0
    650131c9:	mov    QWORD PTR [rsp+0x38],r12
    650131ce:	lea    rcx,[rsp+0x40]
    650131d3:	lea    r8,[rsp+0x58]
    650131d8:	mov    QWORD PTR [rsp+0x30],rcx
    650131dd:	lea    rcx,[rsp+0x870]
    650131e5:	mov    DWORD PTR [rsp+0x28],0x2710
    650131ed:	mov    QWORD PTR [rsp+0x20],rcx
    650131f2:	mov    r9d,0xc
    650131f8:	mov    edx,0x2d1400
    650131fd:	mov    rcx,r14
    65013200:	call   rax
    65013202:	test   eax,eax
    65013204:	je     0x6501345c
    6501320a:	mov    edx,DWORD PTR [rsp+0x880]
    65013211:	mov    BYTE PTR [rsp+0x480],r12b
    65013219:	test   edx,edx
    6501321b:	jle    0x65013235
    6501321d:	lea    r9,[rsp+0x480]
    65013225:	lea    rcx,[rsp+0x870]
    6501322d:	xor    r8d,r8d
    65013230:	call   0x65012e50
    65013235:	movsxd rax,DWORD PTR [rsp+0x888]
    6501323d:	mov    BYTE PTR [rsp+0x90],r12b
    65013245:	test   eax,eax
    65013247:	jle    0x65013435
    6501324d:	mov    QWORD PTR [rsp+0x2fe8],rbp
    65013255:	xor    esi,esi
    65013257:	mov    QWORD PTR [rsp+0x2f90],r13
    6501325f:	mov    r13,rax
    65013262:	lea    rdi,[rsp+0x90]
    6501326a:	lea    rbp,[rsp+rax*1+0x870]
    65013272:	mov    BYTE PTR [rsp+0x90],sil
    6501327a:	data16 xchg ax,ax
    6501327d:	data16 xchg ax,ax
    65013280:	movzx  eax,BYTE PTR [rbp+0x0]
    65013284:	test   al,al
    65013286:	je     0x6501333c
    6501328c:	movsx  ecx,al
    6501328f:	call   0x6501f730
    65013294:	movsx  ecx,al
    65013297:	mov    ebx,eax
    65013299:	call   0x6501f860
    6501329e:	movzx  edx,BYTE PTR [rdi]
    650132a1:	movzx  ecx,bl
    650132a4:	test   eax,eax
    650132a6:	mov    eax,0x30
    650132ab:	cmovne ecx,eax
    650132ae:	shl    dl,0x4
    650132b1:	add    r12b,0x1
    650132b5:	lea    eax,[rcx-0x30]
    650132b8:	mov    BYTE PTR [rdi],dl
    650132ba:	cmp    al,0x9
    650132bc:	ja     0x650132c4
    650132be:	or     al,dl
    650132c0:	mov    BYTE PTR [rdi],al
    650132c2:	jmp    0x650132d2
    650132c4:	lea    eax,[rcx-0x61]
    650132c7:	cmp    al,0x5
    650132c9:	ja     0x650132fe
    650132cb:	sub    cl,0x57
    650132ce:	or     cl,dl
    650132d0:	mov    BYTE PTR [rdi],cl
    650132d2:	cmp    r12b,0x2
    650132d6:	jne    0x650132f8
    650132d8:	movzx  eax,BYTE PTR [rdi]
    650132db:	test   al,al
    650132dd:	je     0x650132eb
    650132df:	movsx  ecx,al
    650132e2:	call   0x6501f970
    650132e7:	test   eax,eax
    650132e9:	je     0x650132fe
    650132eb:	add    rdi,0x1
    650132ef:	add    esi,0x1
    650132f2:	xor    r12b,r12b
    650132f5:	mov    BYTE PTR [rdi],r12b
    650132f8:	add    rbp,0x1
    650132fc:	jmp    0x65013280
    650132fe:	xor    r12d,r12d
    65013301:	lea    rbp,[rsp+0x90]
    65013309:	lea    rdi,[rsp+r13*1+0x870]
    65013311:	mov    esi,r12d
    65013314:	movzx  ebx,BYTE PTR [rdi]
    65013317:	test   bl,bl
    65013319:	je     0x6501333f
    6501331b:	movsx  ecx,bl
    6501331e:	call   0x6501f970
    65013323:	test   eax,eax
    65013325:	je     0x65013337
    65013327:	mov    BYTE PTR [rbp+0x0],bl
    6501332a:	add    rbp,0x1
    6501332e:	add    esi,0x1
    65013331:	add    rdi,0x1
    65013335:	jmp    0x65013314
    65013337:	mov    esi,r12d
    6501333a:	jmp    0x6501333f
    6501333c:	xor    r12d,r12d
    6501333f:	test   esi,esi
    65013341:	mov    r13,QWORD PTR [rsp+0x2f90]
    65013349:	movsxd r8,esi
    6501334c:	mov    BYTE PTR [rsp+r8*1+0x90],0x0
    65013355:	mov    rdx,r12
    65013358:	jle    0x65013387
    6501335a:	data16 xchg ax,ax
    6501335d:	data16 xchg ax,ax
    65013360:	movzx  ecx,BYTE PTR [rsp+rdx*1+0x90]
    65013368:	movzx  eax,BYTE PTR [rsp+rdx*1+0x91]
    65013370:	add    rdx,0x2
    65013374:	cmp    rdx,r8
    65013377:	mov    BYTE PTR [rsp+rdx*1+0x8e],al
    6501337e:	mov    BYTE PTR [rsp+rdx*1+0x8f],cl
    65013385:	jl     0x65013360
    65013387:	or     ebp,0xffffffff
    6501338a:	cmp    BYTE PTR [rsp+0x90],0x0
    65013392:	mov    esi,r12d
    65013395:	mov    ebx,ebp
    65013397:	je     0x6501341a
    6501339d:	lea    rdi,[rsp+0x90]
    650133a5:	movsx  ecx,BYTE PTR [rdi]
    650133a8:	call   0x6501f860
    650133ad:	test   eax,eax
    650133af:	jne    0x650133b8
    650133b1:	test   ebx,ebx
    650133b3:	mov    ebp,esi
    650133b5:	cmovs  ebx,esi
    650133b8:	add    rdi,0x1
    650133bc:	add    esi,0x1
    650133bf:	cmp    BYTE PTR [rdi],0x0
    650133c2:	jne    0x650133a5
    650133c4:	test   ebx,ebx
    650133c6:	js     0x65013428
    650133c8:	test   ebp,ebp
    650133ca:	js     0x65013421
    650133cc:	movsxd r8,ebx
    650133cf:	movsxd r9,ebp
    650133d2:	cmp    r8,r9
    650133d5:	mov    rdx,r8
    650133d8:	jg     0x65013405
    650133da:	data16 xchg ax,ax
    650133dd:	data16 xchg ax,ax
    650133e0:	movzx  ecx,BYTE PTR [rsp+rdx*1+0x90]
    650133e8:	test   cl,cl
    650133ea:	je     0x65013405
    650133ec:	mov    rax,rdx
    650133ef:	add    rdx,0x1
    650133f3:	add    ebx,0x1
    650133f6:	sub    rax,r8
    650133f9:	cmp    rdx,r9
    650133fc:	mov    BYTE PTR [rsp+rax*1+0x90],cl
    65013403:	jle    0x650133e0
    65013405:	movsxd rax,ebx
    65013408:	mov    esi,0x1
    6501340d:	sub    rax,r8
    65013410:	mov    BYTE PTR [rsp+rax*1+0x90],0x0
    65013418:	jmp    0x6501342d
    6501341a:	mov    esi,0x1
    6501341f:	jmp    0x6501342d
    65013421:	mov    esi,0x1
    65013426:	jmp    0x6501342d
    65013428:	mov    esi,0x1
    6501342d:	mov    rbp,QWORD PTR [rsp+0x2fe8]
    65013435:	mov    rcx,QWORD PTR [rsp+0x48]
    6501343a:	lea    rdx,[rsp+0x90]
    65013442:	call   0x65003cc0
    65013447:	mov    rcx,QWORD PTR [rsp+0x50]
    6501344c:	lea    rdx,[rsp+0x480]
    65013454:	call   0x65003cc0
    65013459:	mov    dil,0x1
    6501345c:	xor    eax,eax
    6501345e:	mov    DWORD PTR [rsp+0x68],r12d
    65013463:	mov    QWORD PTR [r15],r12
    65013466:	mov    DWORD PTR [rsp+0x6c],eax
    6501346a:	mov    DWORD PTR [rsp+0x70],eax
    6501346e:	mov    DWORD PTR [rsp+0x74],eax
    65013472:	mov    DWORD PTR [rsp+0x78],eax
    65013476:	mov    DWORD PTR [rsp+0x7c],eax
    6501347a:	mov    DWORD PTR [rsp+0x80],eax
    65013481:	mov    DWORD PTR [rsp+0x84],eax
    65013488:	mov    DWORD PTR [rsp+0x88],eax
    6501348f:	mov    DWORD PTR [rsp+0x8c],eax
    65013496:	lock cmpxchg DWORD PTR [rip+0x338d6],esi        # 0x65046d74
    6501349e:	jne    0x65013510
    650134a0:	lea    r8,[rip+0x260e1]        # 0x65039588
    650134a7:	lea    rcx,[rip+0x2611a]        # 0x650395c8
    650134ae:	mov    edx,0xf
    650134b3:	call   0x6500bc30
    650134b8:	lea    r8,[rip+0x26119]        # 0x650395d8
    650134bf:	lea    rcx,[rip+0x25c6a]        # 0x65039130
    650134c6:	mov    edx,0x8
    650134cb:	mov    rbx,rax
    650134ce:	call   0x6500c5e0
    650134d3:	mov    rcx,rax
    650134d6:	call   QWORD PTR [rip+0x20b4c]        # 0x65034028
    650134dc:	add    DWORD PTR [rip+0x30465],0x1        # 0x65043948
    650134e3:	test   rax,rax
    650134e6:	je     0x65013504
    650134e8:	mov    rdx,rbx
    650134eb:	mov    rcx,rax
    650134ee:	call   QWORD PTR [rip+0x20bbc]        # 0x650340b0
    650134f4:	add    DWORD PTR [rip+0x30451],0x1        # 0x6504394c
    650134fb:	mov    QWORD PTR [rip+0x339ae],rax        # 0x65046eb0
    65013502:	jmp    0x65013517
    65013504:	mov    rax,r12
    65013507:	mov    QWORD PTR [rip+0x339a2],rax        # 0x65046eb0
    6501350e:	jmp    0x65013517
    65013510:	mov    rax,QWORD PTR [rip+0x33999]        # 0x65046eb0
    65013517:	mov    QWORD PTR [rsp+0x38],r12
    6501351c:	lea    rcx,[rsp+0x44]
    65013521:	xor    r9d,r9d
    65013524:	mov    QWORD PTR [rsp+0x30],rcx
    65013529:	lea    rcx,[rsp+0x68]
    6501352e:	mov    DWORD PTR [rsp+0x28],0x28
    65013536:	mov    QWORD PTR [rsp+0x20],rcx
    6501353b:	xor    r8d,r8d
    6501353e:	mov    edx,0x700a0
    65013543:	mov    rcx,r14
    65013546:	call   rax
    65013548:	test   eax,eax
    6501354a:	je     0x65013557
    6501354c:	mov    rcx,QWORD PTR [rsp+0x80]
    65013554:	mov    QWORD PTR [r15],rcx
    65013557:	mov    rcx,r14
    6501355a:	call   QWORD PTR [rip+0x20b10]        # 0x65034070
    65013560:	mov    al,dil
    65013563:	mov    rcx,QWORD PTR [rsp+0x2f80]
    6501356b:	xor    rcx,rsp
    6501356e:	call   0x6501e4e0
    65013573:	add    rsp,0x2f98
    6501357a:	pop    r15
    6501357c:	pop    r14
    6501357e:	pop    r12
    65013580:	pop    rdi
    65013581:	pop    rsi
    65013582:	pop    rbx
    65013583:	ret    
    65013584:	int3   
    65013585:	int3   
    65013586:	int3   
    65013587:	int3   
    65013588:	int3   
    65013589:	int3   
    6501358a:	int3   
    6501358b:	int3   
    6501358c:	int3   
    6501358d:	int3   
    6501358e:	int3   
    6501358f:	int3   
    65013590:	rex push rbp
    65013592:	push   r12
    65013594:	push   r13
    65013596:	push   r14
    65013598:	push   r15
    6501359a:	sub    rsp,0x3b0
    650135a1:	lea    rbp,[rsp+0x40]
    650135a6:	mov    QWORD PTR [rbp+0x80],0xfffffffffffffffe
    650135b1:	mov    QWORD PTR [rbp+0x3a8],rbx
    650135b8:	mov    QWORD PTR [rbp+0x3b0],rsi
    650135bf:	mov    QWORD PTR [rbp+0x3b8],rdi
    650135c6:	mov    rax,QWORD PTR [rip+0x2eb53]        # 0x65042120
    650135cd:	xor    rax,rbp
    650135d0:	mov    QWORD PTR [rbp+0x360],rax
    650135d7:	mov    r14,rcx
    650135da:	mov    QWORD PTR [rbp+0x68],rcx
    650135de:	mov    edi,0x1
    650135e3:	mov    DWORD PTR [rbp+0x4],edi
    650135e6:	xor    eax,eax
    650135e8:	xor    r13d,r13d
    650135eb:	lock cmpxchg DWORD PTR [rip+0x33755],edi        # 0x65046d48
    650135f3:	jne    0x65013660
    650135f5:	lea    r8,[rip+0x25a3c]        # 0x65039038
    650135fc:	lea    edx,[rdi+0xe]
    650135ff:	lea    rcx,[rip+0x25a5a]        # 0x65039060
    65013606:	call   0x6500bc30
    6501360b:	mov    rdi,rax
    6501360e:	lea    r8,[rip+0x25a5b]        # 0x65039070
    65013615:	lea    edx,[r13+0x8]
    65013619:	lea    rcx,[rip+0x25900]        # 0x65038f20
    65013620:	call   0x6500c5e0
    65013625:	mov    rcx,rax
    65013628:	call   QWORD PTR [rip+0x209fa]        # 0x65034028
    6501362e:	add    DWORD PTR [rip+0x30313],0x1        # 0x65043948
    65013635:	test   rax,rax
    65013638:	je     0x6501364f
    6501363a:	mov    rdx,rdi
    6501363d:	mov    rcx,rax
    65013640:	call   QWORD PTR [rip+0x20a6a]        # 0x650340b0
    65013646:	add    DWORD PTR [rip+0x302ff],0x1        # 0x6504394c
    6501364d:	jmp    0x65013652
    6501364f:	mov    rax,r13
    65013652:	mov    QWORD PTR [rip+0x337ff],rax        # 0x65046e58
    65013659:	mov    edi,0x1
    6501365e:	jmp    0x65013667
    65013660:	mov    rax,QWORD PTR [rip+0x337f1]        # 0x65046e58
    65013667:	lea    rdx,[rbp+0x4]
    6501366b:	lea    rcx,[rbp+0xa0]
    65013672:	call   rax
    65013674:	cmp    eax,0x6f
    65013677:	jne    0x65013b8c
    6501367d:	mov    ecx,DWORD PTR [rbp+0x4]
    65013680:	call   0x6501d180
    65013685:	mov    QWORD PTR [rbp+0x60],rax
    65013689:	xor    eax,eax
    6501368b:	lock cmpxchg DWORD PTR [rip+0x336b5],edi        # 0x65046d48
    65013693:	jne    0x650136fe
    65013695:	lea    r8,[rip+0x2599c]        # 0x65039038
    6501369c:	mov    edx,0xf
    650136a1:	lea    rcx,[rip+0x259b8]        # 0x65039060
    650136a8:	call   0x6500bc30
    650136ad:	mov    rdi,rax
    650136b0:	lea    r8,[rip+0x259b9]        # 0x65039070
    650136b7:	mov    edx,0x8
    650136bc:	lea    rcx,[rip+0x2585d]        # 0x65038f20
    650136c3:	call   0x6500c5e0
    650136c8:	mov    rcx,rax
    650136cb:	call   QWORD PTR [rip+0x20957]        # 0x65034028
    650136d1:	add    DWORD PTR [rip+0x30270],0x1        # 0x65043948
    650136d8:	test   rax,rax
    650136db:	je     0x650136f2
    650136dd:	mov    rdx,rdi
    650136e0:	mov    rcx,rax
    650136e3:	call   QWORD PTR [rip+0x209c7]        # 0x650340b0
    650136e9:	add    DWORD PTR [rip+0x3025c],0x1        # 0x6504394c
    650136f0:	jmp    0x650136f5
    650136f2:	mov    rax,r13
    650136f5:	mov    QWORD PTR [rip+0x3375c],rax        # 0x65046e58
    650136fc:	jmp    0x65013705
    650136fe:	mov    rax,QWORD PTR [rip+0x33753]        # 0x65046e58
    65013705:	lea    rdx,[rbp+0x4]
    65013709:	mov    r15,QWORD PTR [rbp+0x60]
    6501370d:	mov    QWORD PTR [rbp+0x18],r15
    65013711:	mov    rcx,r15
    65013714:	call   rax
    65013716:	test   eax,eax
    65013718:	je     0x65013727
    6501371a:	mov    rcx,r15
    6501371d:	call   0x6501d190
    65013722:	jmp    0x65013b8c
    65013727:	movabs r12,0xffffffffffffff0
    65013731:	movzx  esi,BYTE PTR [rbp+0x0]
    65013735:	call   QWORD PTR [rip+0x2e95d]        # 0x65042098
    6501373b:	mov    edi,eax
    6501373d:	mov    DWORD PTR [rbp+0x20],eax
    65013740:	lea    rcx,[rip+0x2e959]        # 0x650420a0
    65013747:	mov    rdx,QWORD PTR [rip+0x2e952]        # 0x650420a0
    6501374e:	call   QWORD PTR [rdx+0x18]
    65013751:	lea    rbx,[rax+0x18]
    65013755:	mov    QWORD PTR [rbp+0x8],rbx
    65013759:	cmp    DWORD PTR [r15+0x194],0x0
    65013761:	je     0x6501388c
    65013767:	add    r15,0x198
    6501376e:	xchg   ax,ax
    65013770:	lea    rcx,[rip+0x2e929]        # 0x650420a0
    65013777:	mov    rax,QWORD PTR [rip+0x2e922]        # 0x650420a0
    6501377e:	call   QWORD PTR [rax+0x18]
    65013781:	add    rax,0x18
    65013785:	mov    QWORD PTR [rbp+0x50],rax
    65013789:	movzx  edi,BYTE PTR [r15]
    6501378d:	lea    r8,[rip+0x2553c]        # 0x65038cd0
    65013794:	mov    edx,0x4
    65013799:	lea    rcx,[rip+0x25568]        # 0x65038d08
    650137a0:	call   0x6500c5e0
    650137a5:	mov    rdx,rax
    650137a8:	mov    r8d,edi
    650137ab:	lea    rcx,[rbp+0x50]
    650137af:	call   0x65002560
    650137b4:	mov    rdi,QWORD PTR [rbp+0x50]
    650137b8:	mov    edx,DWORD PTR [rdi-0x10]
    650137bb:	mov    DWORD PTR [rbp+0x14],edx
    650137be:	mov    r8,rdi
    650137c1:	mov    r14,rdi
    650137c4:	sub    r14,rbx
    650137c7:	sar    r14,1
    650137ca:	mov    eax,DWORD PTR [rbx-0x10]
    650137cd:	mov    DWORD PTR [rbp+0x10],eax
    650137d0:	lea    r12d,[rax+rdx*1]
    650137d4:	mov    ecx,0x1
    650137d9:	sub    ecx,DWORD PTR [rbx-0x8]
    650137dc:	mov    eax,DWORD PTR [rbx-0xc]
    650137df:	sub    eax,r12d
    650137e2:	or     eax,ecx
    650137e4:	jge    0x650137fc
    650137e6:	mov    edx,r12d
    650137e9:	lea    rcx,[rbp+0x8]
    650137ed:	call   0x65002640
    650137f2:	mov    rbx,QWORD PTR [rbp+0x8]
    650137f6:	mov    r8,rdi
    650137f9:	mov    edx,DWORD PTR [rbp+0x14]
    650137fc:	mov    eax,DWORD PTR [rbp+0x10]
    650137ff:	cmp    r14,rax
    65013802:	ja     0x65013808
    65013804:	lea    r8,[rbx+r14*2]
    65013808:	movsxd rdx,edx
    6501380b:	add    rdx,rdx
    6501380e:	lea    rcx,[rbx+rax*2]
    65013812:	mov    r9,rdx
    65013815:	call   0x6501d640
    6501381a:	test   r12d,r12d
    6501381d:	js     0x65013b78
    65013823:	cmp    r12d,DWORD PTR [rbx-0xc]
    65013827:	jg     0x65013b78
    6501382d:	mov    DWORD PTR [rbx-0x10],r12d
    65013831:	movsxd rax,r12d
    65013834:	mov    WORD PTR [rbx+rax*2],0x0
    6501383a:	lea    rdx,[rdi-0x18]
    6501383e:	or     eax,0xffffffff
    65013841:	lock xadd DWORD PTR [rdx+0x10],eax
    65013846:	add    eax,0xffffffff
    65013849:	test   eax,eax
    6501384b:	jg     0x65013856
    6501384d:	mov    rcx,QWORD PTR [rdx]
    65013850:	mov    rax,QWORD PTR [rcx]
    65013853:	call   QWORD PTR [rax+0x8]
    65013856:	add    r13d,0x1
    6501385a:	add    r15,0x1
    6501385e:	mov    rax,QWORD PTR [rbp+0x18]
    65013862:	cmp    r13d,DWORD PTR [rax+0x194]
    65013869:	je     0x65013874
    6501386b:	mov    rbx,QWORD PTR [rbp+0x8]
    6501386f:	jmp    0x65013770
    65013874:	mov    rbx,QWORD PTR [rbp+0x8]
    65013878:	mov    r14,QWORD PTR [rbp+0x68]
    6501387c:	mov    r15,rax
    6501387f:	mov    edi,DWORD PTR [rbp+0x20]
    65013882:	movabs r12,0xffffffffffffff0
    6501388c:	cmp    DWORD PTR [rbx-0x8],0x1
    65013890:	jle    0x650138a2
    65013892:	mov    edx,DWORD PTR [rbx-0x10]
    65013895:	lea    rcx,[rbp+0x8]
    65013899:	call   0x65002130
    6501389e:	mov    rbx,QWORD PTR [rbp+0x8]
    650138a2:	test   rbx,rbx
    650138a5:	jne    0x650138b2
    650138a7:	xor    r13d,r13d
    650138aa:	mov    r12,r13
    650138ad:	jmp    0x65013936
    650138b2:	mov    rcx,rbx
    650138b5:	call   QWORD PTR [rip+0x207d5]        # 0x65034090
    650138bb:	lea    edx,[rax+0x1]
    650138be:	cmp    edx,0x3fffffff
    650138c4:	jle    0x650138ce
    650138c6:	xor    r13d,r13d
    650138c9:	mov    r12,r13
    650138cc:	jmp    0x65013936
    650138ce:	movsxd rax,edx
    650138d1:	add    rax,rax
    650138d4:	lea    rcx,[rax+0xf]
    650138d8:	cmp    rcx,rax
    650138db:	ja     0x650138e0
    650138dd:	mov    rcx,r12
    650138e0:	and    rcx,0xfffffffffffffff0
    650138e4:	mov    rax,rcx
    650138e7:	call   0x650330c0
    650138ec:	sub    rsp,rcx
    650138ef:	lea    r12,[rsp+0x40]
    650138f4:	test   r12,r12
    650138f7:	je     0x65013930
    650138f9:	mov    BYTE PTR [r12],0x0
    650138fe:	lea    eax,[rdx+rdx*1]
    65013901:	xor    r13d,r13d
    65013904:	mov    QWORD PTR [rsp+0x38],r13
    65013909:	mov    QWORD PTR [rsp+0x30],r13
    6501390e:	mov    DWORD PTR [rsp+0x28],eax
    65013912:	mov    QWORD PTR [rsp+0x20],r12
    65013917:	or     r9d,0xffffffff
    6501391b:	mov    r8,rbx
    6501391e:	xor    edx,edx
    65013920:	mov    ecx,edi
    65013922:	call   QWORD PTR [rip+0x20718]        # 0x65034040
    65013928:	test   eax,eax
    6501392a:	cmove  r12,r13
    6501392e:	jmp    0x65013936
    65013930:	xor    r13d,r13d
    65013933:	mov    r12,r13
    65013936:	mov    edx,0xf
    6501393b:	mov    QWORD PTR [rbp+0x48],rdx
    6501393f:	mov    r8,r13
    65013942:	mov    QWORD PTR [rbp+0x40],r13
    65013946:	mov    BYTE PTR [rbp+0x30],0x0
    6501394a:	xor    eax,eax
    6501394c:	or     rcx,0xffffffffffffffff
    65013950:	mov    rdi,r12
    65013953:	repnz scas al,BYTE PTR es:[rdi]
    65013955:	not    rcx
    65013958:	sub    rcx,0x1
    6501395c:	mov    rdi,rcx
    6501395f:	cmp    rcx,0xfffffffffffffffe
    65013963:	jbe    0x65013972
    65013965:	call   0x6501cfe0
    6501396a:	mov    rdx,QWORD PTR [rbp+0x48]
    6501396e:	mov    r8,QWORD PTR [rbp+0x40]
    65013972:	cmp    rdx,rdi
    65013975:	jae    0x65013989
    65013977:	mov    rdx,rdi
    6501397a:	lea    rcx,[rbp+0x28]
    6501397e:	call   0x65002330
    65013983:	mov    rdx,QWORD PTR [rbp+0x48]
    65013987:	jmp    0x650139a4
    65013989:	test   rdi,rdi
    6501398c:	jne    0x650139a4
    6501398e:	mov    QWORD PTR [rbp+0x40],r13
    65013992:	lea    rax,[rbp+0x30]
    65013996:	cmp    rdx,0x10
    6501399a:	cmovae rax,QWORD PTR [rbp+0x30]
    6501399f:	mov    BYTE PTR [rax],dil
    650139a2:	jmp    0x650139d7
    650139a4:	test   rdi,rdi
    650139a7:	je     0x650139d7
    650139a9:	lea    rcx,[rbp+0x30]
    650139ad:	cmp    rdx,0x10
    650139b1:	cmovae rcx,QWORD PTR [rbp+0x30]
    650139b6:	mov    r9,rdi
    650139b9:	mov    r8,r12
    650139bc:	call   0x6501d640
    650139c1:	mov    QWORD PTR [rbp+0x40],rdi
    650139c5:	lea    rax,[rbp+0x30]
    650139c9:	cmp    QWORD PTR [rbp+0x48],0x10
    650139ce:	cmovae rax,QWORD PTR [rbp+0x30]
    650139d3:	mov    BYTE PTR [rax+rdi*1],0x0
    650139d7:	mov    r8,QWORD PTR [r14+0x8]
    650139db:	test   r8,r8
    650139de:	jne    0x650139ef
    650139e0:	mov    rdi,r13
    650139e3:	movabs r12,0x6666666666666667
    650139ed:	jmp    0x65013a17
    650139ef:	mov    rcx,QWORD PTR [r14+0x10]
    650139f3:	sub    rcx,r8
    650139f6:	movabs r12,0x6666666666666667
    65013a00:	mov    rax,r12
    65013a03:	imul   rcx
    65013a06:	mov    rdi,rdx
    65013a09:	sar    rdi,0x4
    65013a0d:	mov    rax,rdi
    65013a10:	shr    rax,0x3f
    65013a14:	add    rdi,rax
    65013a17:	test   r8,r8
    65013a1a:	je     0x65013a6d
    65013a1c:	mov    rcx,QWORD PTR [r14+0x18]
    65013a20:	sub    rcx,r8
    65013a23:	mov    rax,r12
    65013a26:	imul   rcx
    65013a29:	sar    rdx,0x4
    65013a2d:	mov    rax,rdx
    65013a30:	shr    rax,0x3f
    65013a34:	add    rdx,rax
    65013a37:	cmp    rdi,rdx
    65013a3a:	jae    0x65013a6d
    65013a3c:	mov    rdi,QWORD PTR [r14+0x10]
    65013a40:	xor    eax,eax
    65013a42:	mov    BYTE PTR [rbp+0x0],al
    65013a45:	mov    BYTE PTR [rsp+0x28],al
    65013a49:	mov    BYTE PTR [rsp+0x20],sil
    65013a4e:	mov    r9,r14
    65013a51:	lea    r8,[rbp+0x28]
    65013a55:	lea    edx,[rax+0x1]
    65013a58:	mov    rcx,rdi
    65013a5b:	call   0x65015110
    65013a60:	lea    rdx,[rdi+0x28]
    65013a64:	mov    QWORD PTR [r14+0x10],rdx
    65013a68:	jmp    0x65013b31
    65013a6d:	mov    rdi,QWORD PTR [r14+0x10]
    65013a71:	cmp    r8,rdi
    65013a74:	jbe    0x65013a7b
    65013a76:	call   0x6501d960
    65013a7b:	mov    QWORD PTR [rbp+0x70],r14
    65013a7f:	mov    QWORD PTR [rbp+0x78],rdi
    65013a83:	mov    r12,QWORD PTR [r14+0x8]
    65013a87:	test   r12,r12
    65013a8a:	je     0x65013ae0
    65013a8c:	mov    r8,QWORD PTR [r14+0x10]
    65013a90:	mov    rcx,r8
    65013a93:	sub    rcx,r12
    65013a96:	movabs rax,0x6666666666666667
    65013aa0:	imul   rcx
    65013aa3:	sar    rdx,0x4
    65013aa7:	mov    rax,rdx
    65013aaa:	shr    rax,0x3f
    65013aae:	add    rdx,rax
    65013ab1:	je     0x65013ae0
    65013ab3:	cmp    r12,r8
    65013ab6:	jbe    0x65013abd
    65013ab8:	call   0x6501d960
    65013abd:	sub    rdi,r12
    65013ac0:	movabs rax,0x6666666666666667
    65013aca:	imul   rdi
    65013acd:	mov    rdi,rdx
    65013ad0:	sar    rdi,0x4
    65013ad4:	mov    rax,rdi
    65013ad7:	shr    rax,0x3f
    65013adb:	add    rdi,rax
    65013ade:	jmp    0x65013ae3
    65013ae0:	mov    rdi,r13
    65013ae3:	movaps xmm0,XMMWORD PTR [rbp+0x70]
    65013ae7:	movdqa XMMWORD PTR [rbp+0x90],xmm0
    65013aef:	lea    r9,[rbp+0x28]
    65013af3:	mov    r8d,0x1
    65013af9:	lea    rdx,[rbp+0x90]
    65013b00:	mov    rcx,r14
    65013b03:	call   0x65014a60
    65013b08:	mov    r12,QWORD PTR [r14+0x8]
    65013b0c:	cmp    r12,QWORD PTR [r14+0x10]
    65013b10:	jbe    0x65013b17
    65013b12:	call   0x6501d960
    65013b17:	lea    rax,[rdi+rdi*4]
    65013b1b:	lea    rcx,[r12+rax*8]
    65013b1f:	cmp    rcx,QWORD PTR [r14+0x10]
    65013b23:	ja     0x65013b2b
    65013b25:	cmp    rcx,QWORD PTR [r14+0x8]
    65013b29:	jae    0x65013b31
    65013b2b:	call   0x6501d960
    65013b30:	nop
    65013b31:	cmp    QWORD PTR [rbp+0x48],0x10
    65013b36:	jb     0x65013b41
    65013b38:	mov    rcx,QWORD PTR [rbp+0x30]
    65013b3c:	call   0x6501d190
    65013b41:	mov    r15,QWORD PTR [r15]
    65013b44:	mov    QWORD PTR [rbp+0x18],r15
    65013b48:	lea    rdx,[rbx-0x18]
    65013b4c:	or     eax,0xffffffff
    65013b4f:	lock xadd DWORD PTR [rdx+0x10],eax
    65013b54:	add    eax,0xffffffff
    65013b57:	test   eax,eax
    65013b59:	jg     0x65013b64
    65013b5b:	mov    rcx,QWORD PTR [rdx]
    65013b5e:	mov    rax,QWORD PTR [rcx]
    65013b61:	call   QWORD PTR [rax+0x8]
    65013b64:	test   r15,r15
    65013b67:	je     0x65013b83
    65013b69:	movabs r12,0xffffffffffffff0
    65013b73:	jmp    0x65013735
    65013b78:	mov    ecx,0x80070057
    65013b7d:	call   0x65001050
    65013b82:	nop
    65013b83:	mov    rcx,QWORD PTR [rbp+0x60]
    65013b87:	call   0x6501d190
    65013b8c:	mov    rcx,QWORD PTR [rbp+0x360]
    65013b93:	xor    rcx,rbp
    65013b96:	call   0x6501e4e0
    65013b9b:	mov    rbx,QWORD PTR [rbp+0x3a8]
    65013ba2:	mov    rsi,QWORD PTR [rbp+0x3b0]
    65013ba9:	mov    rdi,QWORD PTR [rbp+0x3b8]
    65013bb0:	lea    rsp,[rbp+0x370]
    65013bb7:	pop    r15
    65013bb9:	pop    r14
    65013bbb:	pop    r13
    65013bbd:	pop    r12
    65013bbf:	pop    rbp
    65013bc0:	ret    
    65013bc1:	int3   
    65013bc2:	int3   
    65013bc3:	int3   
    65013bc4:	int3   
    65013bc5:	int3   
    65013bc6:	int3   
    65013bc7:	int3   
    65013bc8:	int3   
    65013bc9:	int3   
    65013bca:	int3   
    65013bcb:	int3   
    65013bcc:	int3   
    65013bcd:	int3   
    65013bce:	int3   
    65013bcf:	int3   
    65013bd0:	rex push rbp
    65013bd2:	sub    rsp,0x20
    65013bd6:	lea    rbp,[rdx+0x40]
    65013bda:	lea    rcx,[rbp+0x60]
    65013bde:	call   0x65014a50
    65013be3:	add    rsp,0x20
    65013be7:	pop    rbp
    65013be8:	ret    
    65013be9:	int3   
    65013bea:	int3   
    65013beb:	int3   
    65013bec:	int3   
    65013bed:	int3   
    65013bee:	int3   
    65013bef:	int3   
    65013bf0:	rex push rbp
    65013bf2:	sub    rsp,0x20
    65013bf6:	lea    rbp,[rdx+0x40]
    65013bfa:	lea    rcx,[rbp+0x8]
    65013bfe:	call   0x65001cb0
    65013c03:	add    rsp,0x20
    65013c07:	pop    rbp
    65013c08:	ret    
    65013c09:	int3   
    65013c0a:	int3   
    65013c0b:	int3   
    65013c0c:	int3   
    65013c0d:	int3   
    65013c0e:	int3   
    65013c0f:	int3   
    65013c10:	rex push rbp
    65013c12:	sub    rsp,0x20
    65013c16:	lea    rbp,[rdx+0x40]
    65013c1a:	lea    rcx,[rbp+0x50]
    65013c1e:	call   0x65001cb0
    65013c23:	add    rsp,0x20
    65013c27:	pop    rbp
    65013c28:	ret    
    65013c29:	int3   
    65013c2a:	int3   
    65013c2b:	int3   
    65013c2c:	int3   
    65013c2d:	int3   
    65013c2e:	int3   
    65013c2f:	int3   
    65013c30:	rex push rbp
    65013c32:	sub    rsp,0x20
    65013c36:	lea    rbp,[rdx+0x40]
    65013c3a:	lea    rcx,[rbp+0x28]
    65013c3e:	call   0x65001c70
    65013c43:	add    rsp,0x20
    65013c47:	pop    rbp
    65013c48:	ret    
    65013c49:	int3   
    65013c4a:	int3   
    65013c4b:	int3   
    65013c4c:	int3   
    65013c4d:	int3   
    65013c4e:	int3   
    65013c4f:	int3   
    65013c50:	mov    rax,rsp
    65013c53:	push   rdi
    65013c54:	push   r12
    65013c56:	push   r13
    65013c58:	push   r14
    65013c5a:	push   r15
    65013c5c:	sub    rsp,0xf0
    65013c63:	mov    QWORD PTR [rsp+0xe0],0xfffffffffffffffe
    65013c6f:	mov    QWORD PTR [rax+0x8],rbx
    65013c73:	mov    QWORD PTR [rax+0x10],rbp
    65013c77:	mov    QWORD PTR [rax+0x18],rsi
    65013c7b:	mov    r15,r8
    65013c7e:	mov    r13,rdx
    65013c81:	mov    r12,rcx
    65013c84:	xor    r14d,r14d
    65013c87:	mov    DWORD PTR [rsp+0x138],r14d
    65013c8f:	lea    ecx,[r14+0x18]
    65013c93:	call   0x6501da50
    65013c98:	mov    rbx,rax
    65013c9b:	mov    QWORD PTR [rsp+0x78],rax
    65013ca0:	test   rax,rax
    65013ca3:	je     0x65013cd1
    65013ca5:	mov    QWORD PTR [rax+0x8],r14
    65013ca9:	mov    DWORD PTR [rax+0x10],0x1
    65013cb0:	lea    rcx,[rip+0x232f1]        # 0x65036fa8
    65013cb7:	call   QWORD PTR [rip+0x20683]        # 0x65034340
    65013cbd:	mov    QWORD PTR [rbx],rax
    65013cc0:	test   rax,rax
    65013cc3:	jne    0x65013cd4
    65013cc5:	mov    ecx,0x8007000e
    65013cca:	call   0x6502ea30
    65013ccf:	jmp    0x65013cd4
    65013cd1:	mov    rbx,r14
    65013cd4:	mov    QWORD PTR [rsp+0x58],rbx
    65013cd9:	test   rbx,rbx
    65013cdc:	jne    0x65013ce9
    65013cde:	mov    ecx,0x8007000e
    65013ce3:	call   0x6502ea30
    65013ce8:	nop
    65013ce9:	xor    edx,edx
    65013ceb:	xor    ecx,ecx
    65013ced:	call   QWORD PTR [rip+0x206b5]        # 0x650343a8
    65013cf3:	test   eax,eax
    65013cf5:	jns    0x65013d43
    65013cf7:	mov    QWORD PTR [r12],rbx
    65013cfb:	test   rbx,rbx
    65013cfe:	je     0x65013d05
    65013d00:	lock add DWORD PTR [rbx+0x10],0x1
    65013d05:	test   rbx,rbx
    65013d08:	je     0x65013d3b
    65013d0a:	or     edi,0xffffffff
    65013d0d:	lock xadd DWORD PTR [rbx+0x10],edi
    65013d12:	add    edi,0xffffffff
    65013d15:	jne    0x65013d3b
    65013d17:	mov    rcx,QWORD PTR [rbx]
    65013d1a:	test   rcx,rcx
    65013d1d:	je     0x65013d25
    65013d1f:	call   QWORD PTR [rip+0x20623]        # 0x65034348
    65013d25:	mov    rcx,QWORD PTR [rbx+0x8]
    65013d29:	test   rcx,rcx
    65013d2c:	je     0x65013d33
    65013d2e:	call   0x6501ee10
    65013d33:	mov    rcx,rbx
    65013d36:	call   0x6501d190
    65013d3b:	mov    rax,r12
    65013d3e:	jmp    0x6501455a
    65013d43:	mov    QWORD PTR [rsp+0x60],r14
    65013d48:	lea    rax,[rsp+0x60]
    65013d4d:	mov    QWORD PTR [rsp+0x20],rax
    65013d52:	lea    r9,[rip+0x2118f]        # 0x65034ee8
    65013d59:	xor    edx,edx
    65013d5b:	lea    r8d,[rdx+0x1]
    65013d5f:	lea    rcx,[rip+0x21252]        # 0x65034fb8
    65013d66:	call   QWORD PTR [rip+0x2064c]        # 0x650343b8
    65013d6c:	test   eax,eax
    65013d6e:	jns    0x65013dc2
    65013d70:	call   QWORD PTR [rip+0x2063a]        # 0x650343b0
    65013d76:	mov    QWORD PTR [r12],rbx
    65013d7a:	test   rbx,rbx
    65013d7d:	je     0x65013d84
    65013d7f:	lock add DWORD PTR [rbx+0x10],0x1
    65013d84:	test   rbx,rbx
    65013d87:	je     0x65013dba
    65013d89:	or     edi,0xffffffff
    65013d8c:	lock xadd DWORD PTR [rbx+0x10],edi
    65013d91:	add    edi,0xffffffff
    65013d94:	jne    0x65013dba
    65013d96:	mov    rcx,QWORD PTR [rbx]
    65013d99:	test   rcx,rcx
    65013d9c:	je     0x65013da4
    65013d9e:	call   QWORD PTR [rip+0x205a4]        # 0x65034348
    65013da4:	mov    rcx,QWORD PTR [rbx+0x8]
    65013da8:	test   rcx,rcx
    65013dab:	je     0x65013db2
    65013dad:	call   0x6501ee10
    65013db2:	mov    rcx,rbx
    65013db5:	call   0x6501d190
    65013dba:	mov    rax,r12
    65013dbd:	jmp    0x6501455a
    65013dc2:	mov    QWORD PTR [rsp+0x68],r14
    65013dc7:	lea    r8,[rip+0x24f4a]        # 0x65038d18
    65013dce:	mov    edx,0xa
    65013dd3:	lea    rcx,[rip+0x24f7e]        # 0x65038d58
    65013dda:	call   0x6500c5e0
    65013ddf:	mov    rdi,rax
    65013de2:	mov    ecx,0x18
    65013de7:	call   0x6501da50
    65013dec:	mov    rsi,rax
    65013def:	mov    QWORD PTR [rsp+0x78],rax
    65013df4:	test   rax,rax
    65013df7:	je     0x65013e26
    65013df9:	mov    QWORD PTR [rax+0x8],r14
    65013dfd:	mov    DWORD PTR [rax+0x10],0x1
    65013e04:	mov    rcx,rdi
    65013e07:	call   QWORD PTR [rip+0x20533]        # 0x65034340
    65013e0d:	mov    QWORD PTR [rsi],rax
    65013e10:	test   rax,rax
    65013e13:	jne    0x65013e29
    65013e15:	test   rdi,rdi
    65013e18:	je     0x65013e29
    65013e1a:	mov    ecx,0x8007000e
    65013e1f:	call   0x6502ea30
    65013e24:	jmp    0x65013e29
    65013e26:	mov    rsi,r14
    65013e29:	mov    QWORD PTR [rsp+0xe8],rsi
    65013e31:	test   rsi,rsi
    65013e34:	jne    0x65013e41
    65013e36:	mov    ecx,0x8007000e
    65013e3b:	call   0x6502ea30
    65013e40:	nop
    65013e41:	test   rsi,rsi
    65013e44:	je     0x65013e4b
    65013e46:	mov    rdx,QWORD PTR [rsi]
    65013e49:	jmp    0x65013e4e
    65013e4b:	mov    rdx,r14
    65013e4e:	mov    rcx,QWORD PTR [rsp+0x60]
    65013e53:	mov    rax,QWORD PTR [rcx]
    65013e56:	lea    r8,[rsp+0x68]
    65013e5b:	mov    QWORD PTR [rsp+0x40],r8
    65013e60:	mov    QWORD PTR [rsp+0x38],r14
    65013e65:	mov    QWORD PTR [rsp+0x30],r14
    65013e6a:	mov    DWORD PTR [rsp+0x28],r14d
    65013e6f:	mov    QWORD PTR [rsp+0x20],r14
    65013e74:	xor    r9d,r9d
    65013e77:	xor    r8d,r8d
    65013e7a:	call   QWORD PTR [rax+0x18]
    65013e7d:	mov    ebp,eax
    65013e7f:	or     edi,0xffffffff
    65013e82:	test   rsi,rsi
    65013e85:	je     0x65013eb6
    65013e87:	mov    ecx,edi
    65013e89:	lock xadd DWORD PTR [rsi+0x10],ecx
    65013e8e:	add    ecx,edi
    65013e90:	jne    0x65013eb6
    65013e92:	mov    rcx,QWORD PTR [rsi]
    65013e95:	test   rcx,rcx
    65013e98:	je     0x65013ea0
    65013e9a:	call   QWORD PTR [rip+0x204a8]        # 0x65034348
    65013ea0:	mov    rcx,QWORD PTR [rsi+0x8]
    65013ea4:	test   rcx,rcx
    65013ea7:	je     0x65013eae
    65013ea9:	call   0x6501ee10
    65013eae:	mov    rcx,rsi
    65013eb1:	call   0x6501d190
    65013eb6:	test   ebp,ebp
    65013eb8:	jns    0x65013f14
    65013eba:	mov    rcx,QWORD PTR [rsp+0x60]
    65013ebf:	mov    rax,QWORD PTR [rcx]
    65013ec2:	call   QWORD PTR [rax+0x10]
    65013ec5:	call   QWORD PTR [rip+0x204e5]        # 0x650343b0
    65013ecb:	mov    QWORD PTR [r12],rbx
    65013ecf:	test   rbx,rbx
    65013ed2:	je     0x65013ed9
    65013ed4:	lock add DWORD PTR [rbx+0x10],0x1
    65013ed9:	test   rbx,rbx
    65013edc:	je     0x65013f0c
    65013ede:	lock xadd DWORD PTR [rbx+0x10],edi
    65013ee3:	add    edi,0xffffffff
    65013ee6:	jne    0x65013f0c
    65013ee8:	mov    rcx,QWORD PTR [rbx]
    65013eeb:	test   rcx,rcx
    65013eee:	je     0x65013ef6
    65013ef0:	call   QWORD PTR [rip+0x20452]        # 0x65034348
    65013ef6:	mov    rcx,QWORD PTR [rbx+0x8]
    65013efa:	test   rcx,rcx
    65013efd:	je     0x65013f04
    65013eff:	call   0x6501ee10
    65013f04:	mov    rcx,rbx
    65013f07:	call   0x6501d190
    65013f0c:	mov    rax,r12
    65013f0f:	jmp    0x6501455a
    65013f14:	call   0x65017340
    65013f19:	mov    DWORD PTR [rsp+0x38],r14d
    65013f1e:	mov    QWORD PTR [rsp+0x30],r14
    65013f23:	mov    DWORD PTR [rsp+0x28],0x3
    65013f2b:	mov    DWORD PTR [rsp+0x20],0x3
    65013f33:	xor    r9d,r9d
    65013f36:	xor    r8d,r8d
    65013f39:	lea    edx,[r9+0xa]
    65013f3d:	mov    rcx,QWORD PTR [rsp+0x68]
    65013f42:	call   rax
    65013f44:	test   eax,eax
    65013f46:	jns    0x65013fad
    65013f48:	mov    rcx,QWORD PTR [rsp+0x68]
    65013f4d:	mov    rax,QWORD PTR [rcx]
    65013f50:	call   QWORD PTR [rax+0x10]
    65013f53:	mov    rcx,QWORD PTR [rsp+0x60]
    65013f58:	mov    rax,QWORD PTR [rcx]
    65013f5b:	call   QWORD PTR [rax+0x10]
    65013f5e:	call   QWORD PTR [rip+0x2044c]        # 0x650343b0
    65013f64:	mov    QWORD PTR [r12],rbx
    65013f68:	test   rbx,rbx
    65013f6b:	je     0x65013f72
    65013f6d:	lock add DWORD PTR [rbx+0x10],0x1
    65013f72:	test   rbx,rbx
    65013f75:	je     0x65013fa5
    65013f77:	lock xadd DWORD PTR [rbx+0x10],edi
    65013f7c:	add    edi,0xffffffff
    65013f7f:	jne    0x65013fa5
    65013f81:	mov    rcx,QWORD PTR [rbx]
    65013f84:	test   rcx,rcx
    65013f87:	je     0x65013f8f
    65013f89:	call   QWORD PTR [rip+0x203b9]        # 0x65034348
    65013f8f:	mov    rcx,QWORD PTR [rbx+0x8]
    65013f93:	test   rcx,rcx
    65013f96:	je     0x65013f9d
    65013f98:	call   0x6501ee10
    65013f9d:	mov    rcx,rbx
    65013fa0:	call   0x6501d190
    65013fa5:	mov    rax,r12
    65013fa8:	jmp    0x6501455a
    65013fad:	mov    QWORD PTR [rsp+0x70],r14
    65013fb2:	lea    r8,[rip+0x24db7]        # 0x65038d70
    65013fb9:	mov    edx,0xe
    65013fbe:	lea    rcx,[rip+0x24dd3]        # 0x65038d98
    65013fc5:	call   0x6500bc30
    65013fca:	mov    rsi,rax
    65013fcd:	mov    ecx,0x18
    65013fd2:	call   0x6501da50
    65013fd7:	mov    rbp,rax
    65013fda:	mov    QWORD PTR [rsp+0x78],rax
    65013fdf:	test   rax,rax
    65013fe2:	je     0x65013ffd
    65013fe4:	mov    QWORD PTR [rax+0x8],r14
    65013fe8:	mov    DWORD PTR [rax+0x10],0x1
    65013fef:	mov    rcx,rsi
    65013ff2:	call   0x6502e880
    65013ff7:	mov    QWORD PTR [rbp+0x0],rax
    65013ffb:	jmp    0x65014000
    65013ffd:	mov    rbp,r14
    65014000:	mov    QWORD PTR [rsp+0x78],rbp
    65014005:	test   rbp,rbp
    65014008:	jne    0x65014015
    6501400a:	mov    ecx,0x8007000e
    6501400f:	call   0x6502ea30
    65014014:	nop
    65014015:	mov    r8,r13
    65014018:	lea    rdx,[rsp+0x88]
    65014020:	lea    rcx,[rsp+0x78]
    65014025:	call   0x65012c20
    6501402a:	mov    r14,rax
    6501402d:	lea    r8,[rip+0x24d74]        # 0x65038da8
    65014034:	mov    edx,0x3
    65014039:	lea    rcx,[rip+0x24d90]        # 0x65038dd0
    65014040:	call   0x6500bc30
    65014045:	mov    r13,rax
    65014048:	mov    ecx,0x18
    6501404d:	call   0x6501da50
    65014052:	mov    rsi,rax
    65014055:	mov    QWORD PTR [rsp+0x50],rax
    6501405a:	test   rax,rax
    6501405d:	je     0x6501407b
    6501405f:	mov    QWORD PTR [rax+0x8],0x0
    65014067:	mov    DWORD PTR [rax+0x10],0x1
    6501406e:	mov    rcx,r13
    65014071:	call   0x6502e880
    65014076:	mov    QWORD PTR [rsi],rax
    65014079:	jmp    0x6501407d
    6501407b:	xor    esi,esi
    6501407d:	mov    QWORD PTR [rsp+0xd8],rsi
    65014085:	test   rsi,rsi
    65014088:	jne    0x65014095
    6501408a:	mov    ecx,0x8007000e
    6501408f:	call   0x6502ea30
    65014094:	nop
    65014095:	mov    rax,QWORD PTR [r14]
    65014098:	test   rax,rax
    6501409b:	je     0x650140a5
    6501409d:	mov    r8,QWORD PTR [rax]
    650140a0:	xor    r14d,r14d
    650140a3:	jmp    0x650140ab
    650140a5:	xor    r14d,r14d
    650140a8:	mov    r8,r14
    650140ab:	test   rsi,rsi
    650140ae:	je     0x650140b5
    650140b0:	mov    rdx,QWORD PTR [rsi]
    650140b3:	jmp    0x650140b8
    650140b5:	mov    rdx,r14
    650140b8:	mov    rcx,QWORD PTR [rsp+0x68]
    650140bd:	mov    rax,QWORD PTR [rcx]
    650140c0:	lea    r9,[rsp+0x70]
    650140c5:	mov    QWORD PTR [rsp+0x28],r9
    650140ca:	mov    QWORD PTR [rsp+0x20],r14
    650140cf:	mov    r9d,0x30
    650140d5:	call   QWORD PTR [rax+0xa0]
    650140db:	mov    r13d,eax
    650140de:	test   rsi,rsi
    650140e1:	je     0x65014114
    650140e3:	mov    ecx,edi
    650140e5:	lock xadd DWORD PTR [rsi+0x10],ecx
    650140ea:	add    ecx,0xffffffff
    650140ed:	jne    0x65014114
    650140ef:	mov    rcx,QWORD PTR [rsi]
    650140f2:	test   rcx,rcx
    650140f5:	je     0x650140fd
    650140f7:	call   QWORD PTR [rip+0x2024b]        # 0x65034348
    650140fd:	mov    rcx,QWORD PTR [rsi+0x8]
    65014101:	test   rcx,rcx
    65014104:	je     0x6501410b
    65014106:	call   0x6501ee10
    6501410b:	mov    rcx,rsi
    6501410e:	call   0x6501d190
    65014113:	nop
    65014114:	mov    rsi,QWORD PTR [rsp+0x88]
    6501411c:	test   rsi,rsi
    6501411f:	je     0x6501415e
    65014121:	mov    eax,edi
    65014123:	lock xadd DWORD PTR [rsi+0x10],eax
    65014128:	add    eax,0xffffffff
    6501412b:	jne    0x65014156
    6501412d:	test   rsi,rsi
    65014130:	je     0x65014156
    65014132:	mov    rcx,QWORD PTR [rsi]
    65014135:	test   rcx,rcx
    65014138:	je     0x65014140
    6501413a:	call   QWORD PTR [rip+0x20208]        # 0x65034348
    65014140:	mov    rcx,QWORD PTR [rsi+0x8]
    65014144:	test   rcx,rcx
    65014147:	je     0x6501414e
    65014149:	call   0x6501ee10
    6501414e:	mov    rcx,rsi
    65014151:	call   0x6501d190
    65014156:	mov    QWORD PTR [rsp+0x88],r14
    6501415e:	test   rbp,rbp
    65014161:	je     0x65014194
    65014163:	mov    eax,edi
    65014165:	lock xadd DWORD PTR [rbp+0x10],eax
    6501416a:	add    eax,0xffffffff
    6501416d:	jne    0x65014194
    6501416f:	mov    rcx,QWORD PTR [rbp+0x0]
    65014173:	test   rcx,rcx
    65014176:	je     0x6501417e
    65014178:	call   QWORD PTR [rip+0x201ca]        # 0x65034348
    6501417e:	mov    rcx,QWORD PTR [rbp+0x8]
    65014182:	test   rcx,rcx
    65014185:	je     0x6501418c
    65014187:	call   0x6501ee10
    6501418c:	mov    rcx,rbp
    6501418f:	call   0x6501d190
    65014194:	test   r13d,r13d
    65014197:	jns    0x650141fe
    65014199:	mov    rcx,QWORD PTR [rsp+0x68]
    6501419e:	mov    rax,QWORD PTR [rcx]
    650141a1:	call   QWORD PTR [rax+0x10]
    650141a4:	mov    rcx,QWORD PTR [rsp+0x60]
    650141a9:	mov    rax,QWORD PTR [rcx]
    650141ac:	call   QWORD PTR [rax+0x10]
    650141af:	call   QWORD PTR [rip+0x201fb]        # 0x650343b0
    650141b5:	mov    QWORD PTR [r12],rbx
    650141b9:	test   rbx,rbx
    650141bc:	je     0x650141c3
    650141be:	lock add DWORD PTR [rbx+0x10],0x1
    650141c3:	test   rbx,rbx
    650141c6:	je     0x650141f6
    650141c8:	lock xadd DWORD PTR [rbx+0x10],edi
    650141cd:	add    edi,0xffffffff
    650141d0:	jne    0x650141f6
    650141d2:	mov    rcx,QWORD PTR [rbx]
    650141d5:	test   rcx,rcx
    650141d8:	je     0x650141e0
    650141da:	call   QWORD PTR [rip+0x20168]        # 0x65034348
    650141e0:	mov    rcx,QWORD PTR [rbx+0x8]
    650141e4:	test   rcx,rcx
    650141e7:	je     0x650141ee
    650141e9:	call   0x6501ee10
    650141ee:	mov    rcx,rbx
    650141f1:	call   0x6501d190
    650141f6:	mov    rax,r12
    650141f9:	jmp    0x6501455a
    650141fe:	mov    DWORD PTR [rsp+0x138],r14d
    65014206:	mov    rcx,QWORD PTR [rsp+0x70]
    6501420b:	test   rcx,rcx
    6501420e:	je     0x650144d0
    65014214:	data16 data16 xchg ax,ax
    65014218:	data16 data16 xchg ax,ax
    6501421c:	data16 data16 xchg ax,ax
    65014220:	mov    rax,QWORD PTR [rcx]
    65014223:	lea    rdx,[rsp+0x138]
    6501422b:	mov    QWORD PTR [rsp+0x20],rdx
    65014230:	lea    r9,[rsp+0x80]
    65014238:	mov    r8d,0x1
    6501423e:	mov    edx,edi
    65014240:	call   QWORD PTR [rax+0x20]
    65014243:	cmp    DWORD PTR [rsp+0x138],0x0
    6501424b:	je     0x650144d0
    65014251:	mov    rax,QWORD PTR [r15]
    65014254:	test   rax,rax
    65014257:	je     0x6501425e
    65014259:	mov    rdx,QWORD PTR [rax]
    6501425c:	jmp    0x65014261
    6501425e:	mov    rdx,r14
    65014261:	mov    rcx,QWORD PTR [rsp+0x80]
    65014269:	mov    rax,QWORD PTR [rcx]
    6501426c:	mov    QWORD PTR [rsp+0x28],r14
    65014271:	mov    QWORD PTR [rsp+0x20],r14
    65014276:	lea    r9,[rsp+0xc0]
    6501427e:	xor    r8d,r8d
    65014281:	call   QWORD PTR [rax+0x20]
    65014284:	test   eax,eax
    65014286:	js     0x65014293
    65014288:	cmp    WORD PTR [rsp+0xc0],0x8
    65014291:	je     0x650142c2
    65014293:	lea    rcx,[rsp+0xc0]
    6501429b:	call   QWORD PTR [rip+0x20077]        # 0x65034318
    650142a1:	mov    rcx,QWORD PTR [rsp+0x80]
    650142a9:	mov    rax,QWORD PTR [rcx]
    650142ac:	call   QWORD PTR [rax+0x10]
    650142af:	mov    rcx,QWORD PTR [rsp+0x70]
    650142b4:	test   rcx,rcx
    650142b7:	je     0x650144d0
    650142bd:	jmp    0x65014220
    650142c2:	lea    rcx,[rsp+0x90]
    650142ca:	call   QWORD PTR [rip+0x20068]        # 0x65034338
    650142d0:	lea    rdx,[rsp+0xc0]
    650142d8:	lea    rcx,[rsp+0x90]
    650142e0:	call   QWORD PTR [rip+0x2006a]        # 0x65034350
    650142e6:	test   eax,eax
    650142e8:	jns    0x650142f2
    650142ea:	mov    ecx,eax
    650142ec:	call   0x6502ea30
    650142f1:	nop
    650142f2:	cmp    WORD PTR [rsp+0x90],0x8
    650142fb:	jne    0x650143c2
    65014301:	mov    rsi,QWORD PTR [rsp+0x98]
    65014309:	test   rsi,rsi
    6501430c:	je     0x65014324
    6501430e:	test   rbx,rbx
    65014311:	je     0x65014318
    65014313:	mov    rax,QWORD PTR [rbx]
    65014316:	jmp    0x6501431b
    65014318:	mov    rax,r14
    6501431b:	cmp    rax,rsi
    6501431e:	je     0x650144c2
    65014324:	test   rbx,rbx
    65014327:	je     0x6501435e
    65014329:	mov    eax,edi
    6501432b:	lock xadd DWORD PTR [rbx+0x10],eax
    65014330:	add    eax,0xffffffff
    65014333:	jne    0x65014359
    65014335:	mov    rcx,QWORD PTR [rbx]
    65014338:	test   rcx,rcx
    6501433b:	je     0x65014343
    6501433d:	call   QWORD PTR [rip+0x20005]        # 0x65034348
    65014343:	mov    rcx,QWORD PTR [rbx+0x8]
    65014347:	test   rcx,rcx
    6501434a:	je     0x65014351
    6501434c:	call   0x6501ee10
    65014351:	mov    rcx,rbx
    65014354:	call   0x6501d190
    65014359:	mov    QWORD PTR [rsp+0x58],r14
    6501435e:	mov    ecx,0x18
    65014363:	call   0x6501da50
    65014368:	mov    rbx,rax
    6501436b:	mov    QWORD PTR [rsp+0x50],rax
    65014370:	test   rax,rax
    65014373:	je     0x650143a2
    65014375:	mov    QWORD PTR [rax+0x8],r14
    65014379:	mov    DWORD PTR [rax+0x10],0x1
    65014380:	mov    rcx,rsi
    65014383:	call   QWORD PTR [rip+0x1ffb7]        # 0x65034340
    65014389:	mov    QWORD PTR [rbx],rax
    6501438c:	test   rax,rax
    6501438f:	jne    0x650143a5
    65014391:	test   rsi,rsi
    65014394:	je     0x650143a5
    65014396:	mov    ecx,0x8007000e
    6501439b:	call   0x6502ea30
    650143a0:	jmp    0x650143a5
    650143a2:	mov    rbx,r14
    650143a5:	mov    QWORD PTR [rsp+0x58],rbx
    650143aa:	test   rbx,rbx
    650143ad:	jne    0x650144c2
    650143b3:	mov    ecx,0x8007000e
    650143b8:	call   0x6502ea30
    650143bd:	jmp    0x650144c2
    650143c2:	lea    rcx,[rsp+0xa8]
    650143ca:	call   QWORD PTR [rip+0x1ff68]        # 0x65034338
    650143d0:	nop
    650143d1:	mov    r9w,0x8
    650143d6:	xor    r8d,r8d
    650143d9:	lea    rdx,[rsp+0x90]
    650143e1:	lea    rcx,[rsp+0xa8]
    650143e9:	call   QWORD PTR [rip+0x1ff41]        # 0x65034330
    650143ef:	test   eax,eax
    650143f1:	jns    0x650143fa
    650143f3:	mov    ecx,eax
    650143f5:	call   0x6502ea30
    650143fa:	mov    rsi,QWORD PTR [rsp+0xb0]
    65014402:	test   rsi,rsi
    65014405:	je     0x6501441d
    65014407:	test   rbx,rbx
    6501440a:	je     0x65014411
    6501440c:	mov    rax,QWORD PTR [rbx]
    6501440f:	jmp    0x65014414
    65014411:	mov    rax,r14
    65014414:	cmp    rax,rsi
    65014417:	je     0x650144b3
    6501441d:	test   rbx,rbx
    65014420:	je     0x65014457
    65014422:	mov    eax,edi
    65014424:	lock xadd DWORD PTR [rbx+0x10],eax
    65014429:	add    eax,0xffffffff
    6501442c:	jne    0x65014452
    6501442e:	mov    rcx,QWORD PTR [rbx]
    65014431:	test   rcx,rcx
    65014434:	je     0x6501443c
    65014436:	call   QWORD PTR [rip+0x1ff0c]        # 0x65034348
    6501443c:	mov    rcx,QWORD PTR [rbx+0x8]
    65014440:	test   rcx,rcx
    65014443:	je     0x6501444a
    65014445:	call   0x6501ee10
    6501444a:	mov    rcx,rbx
    6501444d:	call   0x6501d190
    65014452:	mov    QWORD PTR [rsp+0x58],r14
    65014457:	mov    ecx,0x18
    6501445c:	call   0x6501da50
    65014461:	mov    rbx,rax
    65014464:	mov    QWORD PTR [rsp+0x50],rax
    65014469:	test   rax,rax
    6501446c:	je     0x6501449b
    6501446e:	mov    QWORD PTR [rax+0x8],r14
    65014472:	mov    DWORD PTR [rax+0x10],0x1
    65014479:	mov    rcx,rsi
    6501447c:	call   QWORD PTR [rip+0x1febe]        # 0x65034340
    65014482:	mov    QWORD PTR [rbx],rax
    65014485:	test   rax,rax
    65014488:	jne    0x6501449e
    6501448a:	test   rsi,rsi
    6501448d:	je     0x6501449e
    6501448f:	mov    ecx,0x8007000e
    65014494:	call   0x6502ea30
    65014499:	jmp    0x6501449e
    6501449b:	mov    rbx,r14
    6501449e:	mov    QWORD PTR [rsp+0x58],rbx
    650144a3:	test   rbx,rbx
    650144a6:	jne    0x650144b3
    650144a8:	mov    ecx,0x8007000e
    650144ad:	call   0x6502ea30
    650144b2:	nop
    650144b3:	lea    rcx,[rsp+0xa8]
    650144bb:	call   QWORD PTR [rip+0x1fe57]        # 0x65034318
    650144c1:	nop
    650144c2:	lea    rcx,[rsp+0x90]
    650144ca:	call   QWORD PTR [rip+0x1fe48]        # 0x65034318
    650144d0:	mov    rcx,QWORD PTR [rsp+0x68]
    650144d5:	mov    rax,QWORD PTR [rcx]
    650144d8:	call   QWORD PTR [rax+0x10]
    650144db:	mov    rcx,QWORD PTR [rsp+0x60]
    650144e0:	mov    rax,QWORD PTR [rcx]
    650144e3:	call   QWORD PTR [rax+0x10]
    650144e6:	mov    rcx,QWORD PTR [rsp+0x70]
    650144eb:	mov    rax,QWORD PTR [rcx]
    650144ee:	call   QWORD PTR [rax+0x10]
    650144f1:	mov    rcx,QWORD PTR [rsp+0x80]
    650144f9:	mov    rax,QWORD PTR [rcx]
    650144fc:	call   QWORD PTR [rax+0x10]
    650144ff:	call   QWORD PTR [rip+0x1feab]        # 0x650343b0
    65014505:	mov    r11,QWORD PTR [rsp+0x58]
    6501450a:	mov    QWORD PTR [r12],r11
    6501450e:	test   r11,r11
    65014511:	je     0x65014519
    65014513:	lock add DWORD PTR [r11+0x10],0x1
    65014519:	mov    r11,QWORD PTR [rsp+0x58]
    6501451e:	test   r11,r11
    65014521:	je     0x65014557
    65014523:	lock xadd DWORD PTR [r11+0x10],edi
    65014529:	add    edi,0xffffffff
    6501452c:	jne    0x65014557
    6501452e:	mov    rbx,QWORD PTR [rsp+0x58]
    65014533:	mov    rcx,QWORD PTR [rbx]
    65014536:	test   rcx,rcx
    65014539:	je     0x65014541
    6501453b:	call   QWORD PTR [rip+0x1fe07]        # 0x65034348
    65014541:	mov    rcx,QWORD PTR [rbx+0x8]
    65014545:	test   rcx,rcx
    65014548:	je     0x6501454f
    6501454a:	call   0x6501ee10
    6501454f:	mov    rcx,rbx
    65014552:	call   0x6501d190
    65014557:	mov    rax,r12
    6501455a:	lea    r11,[rsp+0xf0]
    65014562:	mov    rbx,QWORD PTR [r11+0x30]
    65014566:	mov    rbp,QWORD PTR [r11+0x38]
    6501456a:	mov    rsi,QWORD PTR [r11+0x40]
    6501456e:	mov    rsp,r11
    65014571:	pop    r15
    65014573:	pop    r14
    65014575:	pop    r13
    65014577:	pop    r12
    65014579:	pop    rdi
    6501457a:	ret    
    6501457b:	int3   
    6501457c:	int3   
    6501457d:	int3   
    6501457e:	int3   
    6501457f:	int3   
    65014580:	rex push rbp
    65014582:	sub    rsp,0x20
    65014586:	mov    rbp,rdx
    65014589:	mov    rcx,QWORD PTR [rbp+0x78]
    6501458d:	call   0x6501d190
    65014592:	add    rsp,0x20
    65014596:	pop    rbp
    65014597:	ret    
    65014598:	int3   
    65014599:	int3   
    6501459a:	int3   
    6501459b:	int3   
    6501459c:	int3   
    6501459d:	int3   
    6501459e:	int3   
    6501459f:	int3   
    650145a0:	rex push rbp
    650145a2:	sub    rsp,0x20
    650145a6:	mov    rbp,rdx
    650145a9:	lea    rcx,[rbp+0x58]
    650145ad:	call   0x65012bc0
    650145b2:	add    rsp,0x20
    650145b6:	pop    rbp
    650145b7:	ret    
    650145b8:	int3   
    650145b9:	int3   
    650145ba:	int3   
    650145bb:	int3   
    650145bc:	int3   
    650145bd:	int3   
    650145be:	int3   
    650145bf:	int3   
    650145c0:	rex push rbp
    650145c2:	sub    rsp,0x20
    650145c6:	mov    rbp,rdx
    650145c9:	mov    rcx,QWORD PTR [rbp+0x78]
    650145cd:	call   0x6501d190
    650145d2:	add    rsp,0x20
    650145d6:	pop    rbp
    650145d7:	ret    
    650145d8:	int3   
    650145d9:	int3   
    650145da:	int3   
    650145db:	int3   
    650145dc:	int3   
    650145dd:	int3   
    650145de:	int3   
    650145df:	int3   
    650145e0:	rex push rbp
    650145e2:	sub    rsp,0x20
    650145e6:	mov    rbp,rdx
    650145e9:	lea    rcx,[rbp+0xe8]
    650145f0:	call   0x65012bc0
    650145f5:	add    rsp,0x20
    650145f9:	pop    rbp
    650145fa:	ret    
    650145fb:	int3   
    650145fc:	int3   
    650145fd:	int3   
    650145fe:	int3   
    650145ff:	int3   
    65014600:	rex push rbp
    65014602:	sub    rsp,0x20
    65014606:	mov    rbp,rdx
    65014609:	mov    rcx,QWORD PTR [rbp+0x78]
    6501460d:	call   0x6501d190
    65014612:	add    rsp,0x20
    65014616:	pop    rbp
    65014617:	ret    
    65014618:	int3   
    65014619:	int3   
    6501461a:	int3   
    6501461b:	int3   
    6501461c:	int3   
    6501461d:	int3   
    6501461e:	int3   
    6501461f:	int3   
    65014620:	rex push rbp
    65014622:	sub    rsp,0x20
    65014626:	mov    rbp,rdx
    65014629:	lea    rcx,[rbp+0x78]
    6501462d:	call   0x65012bc0
    65014632:	add    rsp,0x20
    65014636:	pop    rbp
    65014637:	ret    
    65014638:	int3   
    65014639:	int3   
    6501463a:	int3   
    6501463b:	int3   
    6501463c:	int3   
    6501463d:	int3   
    6501463e:	int3   
    6501463f:	int3   
    65014640:	rex push rbp
    65014642:	sub    rsp,0x20
    65014646:	mov    rbp,rdx
    65014649:	lea    rcx,[rbp+0x88]
    65014650:	call   0x65012bc0
    65014655:	add    rsp,0x20
    65014659:	pop    rbp
    6501465a:	ret    
    6501465b:	int3   
    6501465c:	int3   
    6501465d:	int3   
    6501465e:	int3   
    6501465f:	int3   
    65014660:	rex push rbp
    65014662:	sub    rsp,0x20
    65014666:	mov    rbp,rdx
    65014669:	mov    rcx,QWORD PTR [rbp+0x50]
    6501466d:	call   0x6501d190
    65014672:	add    rsp,0x20
    65014676:	pop    rbp
    65014677:	ret    
    65014678:	int3   
    65014679:	int3   
    6501467a:	int3   
    6501467b:	int3   
    6501467c:	int3   
    6501467d:	int3   
    6501467e:	int3   
    6501467f:	int3   
    65014680:	rex push rbp
    65014682:	sub    rsp,0x20
    65014686:	mov    rbp,rdx
    65014689:	lea    rcx,[rbp+0xd8]
    65014690:	call   0x65012bc0
    65014695:	add    rsp,0x20
    65014699:	pop    rbp
    6501469a:	ret    
    6501469b:	int3   
    6501469c:	int3   
    6501469d:	int3   
    6501469e:	int3   
    6501469f:	int3   
    650146a0:	rex push rbp
    650146a2:	sub    rsp,0x20
    650146a6:	mov    rbp,rdx
    650146a9:	lea    rcx,[rbp+0x90]
    650146b0:	call   0x65012e40
    650146b5:	add    rsp,0x20
    650146b9:	pop    rbp
    650146ba:	ret    
    650146bb:	int3   
    650146bc:	int3   
    650146bd:	int3   
    650146be:	int3   
    650146bf:	int3   
    650146c0:	rex push rbp
    650146c2:	sub    rsp,0x20
    650146c6:	mov    rbp,rdx
    650146c9:	mov    rcx,QWORD PTR [rbp+0x50]
    650146cd:	call   0x6501d190
    650146d2:	add    rsp,0x20
    650146d6:	pop    rbp
    650146d7:	ret    
    650146d8:	int3   
    650146d9:	int3   
    650146da:	int3   
    650146db:	int3   
    650146dc:	int3   
    650146dd:	int3   
    650146de:	int3   
    650146df:	int3   
    650146e0:	rex push rbp
    650146e2:	sub    rsp,0x20
    650146e6:	mov    rbp,rdx
    650146e9:	lea    rcx,[rbp+0xa8]
    650146f0:	call   0x65012e40
    650146f5:	add    rsp,0x20
    650146f9:	pop    rbp
    650146fa:	ret    
    650146fb:	int3   
    650146fc:	int3   
    650146fd:	int3   
    650146fe:	int3   
    650146ff:	int3   
    65014700:	rex push rbp
    65014702:	sub    rsp,0x20
    65014706:	mov    rbp,rdx
    65014709:	mov    rcx,QWORD PTR [rbp+0x50]
    6501470d:	call   0x6501d190
    65014712:	add    rsp,0x20
    65014716:	pop    rbp
    65014717:	ret    
    65014718:	int3   
    65014719:	int3   
    6501471a:	int3   
    6501471b:	int3   
    6501471c:	int3   
    6501471d:	int3   
    6501471e:	int3   
    6501471f:	int3   
    65014720:	mov    QWORD PTR [rsp+0x8],rcx
    65014725:	push   rbx
    65014726:	push   rbp
    65014727:	push   rsi
    65014728:	push   rdi
    65014729:	push   r12
    6501472b:	sub    rsp,0x30
    6501472f:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    65014738:	mov    r12,rcx
    6501473b:	mov    DWORD PTR [rsp+0x68],0x0
    65014743:	call   QWORD PTR [rip+0x2d94f]        # 0x65042098
    65014749:	lea    r8,[rip+0x24688]        # 0x65038dd8
    65014750:	mov    edx,0xc
    65014755:	lea    rcx,[rip+0x246ac]        # 0x65038e08
    6501475c:	call   0x6500c5e0
    65014761:	mov    rdi,rax
    65014764:	mov    ecx,0x18
    65014769:	call   0x6501da50
    6501476e:	mov    rbx,rax
    65014771:	mov    QWORD PTR [rsp+0x68],rax
    65014776:	test   rax,rax
    65014779:	je     0x650147ac
    6501477b:	mov    QWORD PTR [rax+0x8],0x0
    65014783:	mov    DWORD PTR [rax+0x10],0x1
    6501478a:	mov    rcx,rdi
    6501478d:	call   QWORD PTR [rip+0x1fbad]        # 0x65034340
    65014793:	mov    QWORD PTR [rbx],rax
    65014796:	test   rax,rax
    65014799:	jne    0x650147ae
    6501479b:	test   rdi,rdi
    6501479e:	je     0x650147ae
    650147a0:	mov    ecx,0x8007000e
    650147a5:	call   0x6502ea30
    650147aa:	jmp    0x650147ae
    650147ac:	xor    ebx,ebx
    650147ae:	mov    QWORD PTR [rsp+0x78],rbx
    650147b3:	test   rbx,rbx
    650147b6:	jne    0x650147c3
    650147b8:	mov    ecx,0x8007000e
    650147bd:	call   0x6502ea30
    650147c2:	nop
    650147c3:	lea    r8,[rip+0x2465e]        # 0x65038e28
    650147ca:	mov    edx,0x15
    650147cf:	lea    rcx,[rip+0x2468a]        # 0x65038e60
    650147d6:	call   0x6500c5e0
    650147db:	mov    rsi,rax
    650147de:	mov    ecx,0x18
    650147e3:	call   0x6501da50
    650147e8:	mov    rdi,rax
    650147eb:	mov    QWORD PTR [rsp+0x68],rax
    650147f0:	test   rax,rax
    650147f3:	je     0x65014826
    650147f5:	mov    QWORD PTR [rax+0x8],0x0
    650147fd:	mov    DWORD PTR [rax+0x10],0x1
    65014804:	mov    rcx,rsi
    65014807:	call   QWORD PTR [rip+0x1fb33]        # 0x65034340
    6501480d:	mov    QWORD PTR [rdi],rax
    65014810:	test   rax,rax
    65014813:	jne    0x65014828
    65014815:	test   rsi,rsi
    65014818:	je     0x65014828
    6501481a:	mov    ecx,0x8007000e
    6501481f:	call   0x6502ea30
    65014824:	jmp    0x65014828
    65014826:	xor    edi,edi
    65014828:	mov    QWORD PTR [rsp+0x20],rdi
    6501482d:	test   rdi,rdi
    65014830:	jne    0x6501483d
    65014832:	mov    ecx,0x8007000e
    65014837:	call   0x6502ea30
    6501483c:	nop
    6501483d:	lea    r8,[rsp+0x78]
    65014842:	lea    rdx,[rsp+0x20]
    65014847:	lea    rcx,[rsp+0x70]
    6501484c:	call   0x65013c50
    65014851:	nop
    65014852:	or     rsi,0xffffffffffffffff
    65014856:	test   rdi,rdi
    65014859:	je     0x6501488b
    6501485b:	mov    eax,esi
    6501485d:	lock xadd DWORD PTR [rdi+0x10],eax
    65014862:	add    eax,esi
    65014864:	jne    0x6501488b
    65014866:	mov    rcx,QWORD PTR [rdi]
    65014869:	test   rcx,rcx
    6501486c:	je     0x65014874
    6501486e:	call   QWORD PTR [rip+0x1fad4]        # 0x65034348
    65014874:	mov    rcx,QWORD PTR [rdi+0x8]
    65014878:	test   rcx,rcx
    6501487b:	je     0x65014882
    6501487d:	call   0x6501ee10
    65014882:	mov    rcx,rdi
    65014885:	call   0x6501d190
    6501488a:	nop
    6501488b:	test   rbx,rbx
    6501488e:	je     0x650148c0
    65014890:	mov    eax,esi
    65014892:	lock xadd DWORD PTR [rbx+0x10],eax
    65014897:	add    eax,0xffffffff
    6501489a:	jne    0x650148c0
    6501489c:	mov    rcx,QWORD PTR [rbx]
    6501489f:	test   rcx,rcx
    650148a2:	je     0x650148aa
    650148a4:	call   QWORD PTR [rip+0x1fa9e]        # 0x65034348
    650148aa:	mov    rcx,QWORD PTR [rbx+0x8]
    650148ae:	test   rcx,rcx
    650148b1:	je     0x650148b8
    650148b3:	call   0x6501ee10
    650148b8:	mov    rcx,rbx
    650148bb:	call   0x6501d190
    650148c0:	mov    rbx,QWORD PTR [rsp+0x70]
    650148c5:	test   rbx,rbx
    650148c8:	je     0x650148cf
    650148ca:	mov    rbp,QWORD PTR [rbx]
    650148cd:	jmp    0x650148d1
    650148cf:	xor    ebp,ebp
    650148d1:	lea    rcx,[rip+0x2d7c8]        # 0x650420a0
    650148d8:	mov    rax,QWORD PTR [rip+0x2d7c1]        # 0x650420a0
    650148df:	call   QWORD PTR [rax+0x18]
    650148e2:	add    rax,0x18
    650148e6:	mov    QWORD PTR [r12],rax
    650148ea:	test   rbp,rbp
    650148ed:	je     0x6501492d
    650148ef:	test   rbp,0xffffffffffff0000
    650148f6:	jne    0x65014919
    650148f8:	movzx  edi,bp
    650148fb:	xor    edx,edx
    650148fd:	mov    ecx,edi
    650148ff:	call   0x650026f0
    65014904:	test   rax,rax
    65014907:	je     0x6501493e
    65014909:	mov    r8d,edi
    6501490c:	mov    rdx,rax
    6501490f:	mov    rcx,r12
    65014912:	call   0x65003e00
    65014917:	jmp    0x6501493e
    65014919:	xor    eax,eax
    6501491b:	mov    rcx,rsi
    6501491e:	mov    rdi,rbp
    65014921:	repnz scas ax,WORD PTR es:[rdi]
    65014924:	not    rcx
    65014927:	sub    rcx,0x1
    6501492b:	jmp    0x6501492f
    6501492d:	xor    ecx,ecx
    6501492f:	mov    r8d,ecx
    65014932:	mov    rdx,rbp
    65014935:	mov    rcx,r12
    65014938:	call   0x65003f90
    6501493d:	nop
    6501493e:	test   rbx,rbx
    65014941:	je     0x65014980
    65014943:	lock xadd DWORD PTR [rbx+0x10],esi
    65014948:	add    esi,0xffffffff
    6501494b:	jne    0x6501497b
    6501494d:	mov    rdi,QWORD PTR [rsp+0x70]
    65014952:	mov    rcx,QWORD PTR [rdi]
    65014955:	test   rcx,rcx
    65014958:	je     0x65014960
    6501495a:	call   QWORD PTR [rip+0x1f9e8]        # 0x65034348
    65014960:	mov    rcx,QWORD PTR [rdi+0x8]
    65014964:	test   rcx,rcx
    65014967:	je     0x6501496e
    65014969:	call   0x6501ee10
    6501496e:	mov    rcx,rdi
    65014971:	call   0x6501d190
    65014976:	mov    rax,r12
    65014979:	jmp    0x65014983
    6501497b:	mov    rax,r12
    6501497e:	jmp    0x65014983
    65014980:	mov    rax,r12
    65014983:	add    rsp,0x30
    65014987:	pop    r12
    65014989:	pop    rdi
    6501498a:	pop    rsi
    6501498b:	pop    rbp
    6501498c:	pop    rbx
    6501498d:	ret    
    6501498e:	int3   
    6501498f:	int3   
    65014990:	rex push rbp
    65014992:	sub    rsp,0x20
    65014996:	mov    rbp,rdx
    65014999:	mov    rcx,QWORD PTR [rbp+0x68]
    6501499d:	call   0x6501d190
    650149a2:	add    rsp,0x20
    650149a6:	pop    rbp
    650149a7:	ret    
    650149a8:	int3   
    650149a9:	int3   
    650149aa:	int3   
    650149ab:	int3   
    650149ac:	int3   
    650149ad:	int3   
    650149ae:	int3   
    650149af:	int3   
    650149b0:	rex push rbp
    650149b2:	sub    rsp,0x20
    650149b6:	mov    rbp,rdx
    650149b9:	lea    rcx,[rbp+0x78]
    650149bd:	call   0x65012bc0
    650149c2:	add    rsp,0x20
    650149c6:	pop    rbp
    650149c7:	ret    
    650149c8:	int3   
    650149c9:	int3   
    650149ca:	int3   
    650149cb:	int3   
    650149cc:	int3   
    650149cd:	int3   
    650149ce:	int3   
    650149cf:	int3   
    650149d0:	rex push rbp
    650149d2:	sub    rsp,0x20
    650149d6:	mov    rbp,rdx
    650149d9:	mov    rcx,QWORD PTR [rbp+0x68]
    650149dd:	call   0x6501d190
    650149e2:	add    rsp,0x20
    650149e6:	pop    rbp
    650149e7:	ret    
    650149e8:	int3   
    650149e9:	int3   
    650149ea:	int3   
    650149eb:	int3   
    650149ec:	int3   
    650149ed:	int3   
    650149ee:	int3   
    650149ef:	int3   
    650149f0:	rex push rbp
    650149f2:	sub    rsp,0x20
    650149f6:	mov    rbp,rdx
    650149f9:	lea    rcx,[rbp+0x20]
    650149fd:	call   0x65012bc0
    65014a02:	add    rsp,0x20
    65014a06:	pop    rbp
    65014a07:	ret    
    65014a08:	int3   
    65014a09:	int3   
    65014a0a:	int3   
    65014a0b:	int3   
    65014a0c:	int3   
    65014a0d:	int3   
    65014a0e:	int3   
    65014a0f:	int3   
    65014a10:	rex push rbp
    65014a12:	sub    rsp,0x20
    65014a16:	mov    rbp,rdx
    65014a19:	lea    rcx,[rbp+0x70]
    65014a1d:	call   0x65012bc0
    65014a22:	add    rsp,0x20
    65014a26:	pop    rbp
    65014a27:	ret    
    65014a28:	int3   
    65014a29:	int3   
    65014a2a:	int3   
    65014a2b:	int3   
    65014a2c:	int3   
    65014a2d:	int3   
    65014a2e:	int3   
    65014a2f:	int3   
    65014a30:	rex push rbp
    65014a32:	sub    rsp,0x20
    65014a36:	mov    rbp,rdx
    65014a39:	mov    rcx,QWORD PTR [rbp+0x60]
    65014a3d:	call   0x65002100
    65014a42:	add    rsp,0x20
    65014a46:	pop    rbp
    65014a47:	ret    
    65014a48:	int3   
    65014a49:	int3   
    65014a4a:	int3   
    65014a4b:	int3   
    65014a4c:	int3   
    65014a4d:	int3   
    65014a4e:	int3   
    65014a4f:	int3   
    65014a50:	mov    rcx,QWORD PTR [rcx]
    65014a53:	jmp    0x6501d190
    65014a58:	int3   
    65014a59:	int3   
    65014a5a:	int3   
    65014a5b:	int3   
    65014a5c:	int3   
    65014a5d:	int3   
    65014a5e:	int3   
    65014a5f:	int3   
    65014a60:	mov    r11,rsp
    65014a63:	push   rbx
    65014a64:	push   rsi
    65014a65:	push   rdi
    65014a66:	push   r12
    65014a68:	push   r13
    65014a6a:	push   r14
    65014a6c:	push   r15
    65014a6e:	sub    rsp,0xb0
    65014a75:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
    65014a7e:	mov    rax,QWORD PTR [rip+0x2d69b]        # 0x65042120
    65014a85:	xor    rax,rsp
    65014a88:	mov    QWORD PTR [rsp+0xa0],rax
    65014a90:	mov    rax,r9
    65014a93:	mov    rbx,rdx
    65014a96:	mov    rsi,rcx
    65014a99:	mov    QWORD PTR [rsp+0x48],rcx
    65014a9e:	mov    QWORD PTR [rsp+0x40],rdx
    65014aa3:	mov    QWORD PTR [r11-0x50],0xf
    65014aab:	xor    r15d,r15d
    65014aae:	mov    QWORD PTR [r11-0x58],r15
    65014ab2:	mov    BYTE PTR [r11-0x68],r15b
    65014ab6:	or     r9,0xffffffffffffffff
    65014aba:	xor    r8d,r8d
    65014abd:	mov    rdx,rax
    65014ac0:	lea    rcx,[r11-0x70]
    65014ac4:	call   0x65001e20
    65014ac9:	nop
    65014aca:	mov    r8,QWORD PTR [rsi+0x8]
    65014ace:	test   r8,r8
    65014ad1:	jne    0x65014ae2
    65014ad3:	mov    rdi,r15
    65014ad6:	movabs r12,0x6666666666666667
    65014ae0:	jmp    0x65014b0a
    65014ae2:	mov    rcx,QWORD PTR [rsi+0x18]
    65014ae6:	sub    rcx,r8
    65014ae9:	movabs r12,0x6666666666666667
    65014af3:	mov    rax,r12
    65014af6:	imul   rcx
    65014af9:	mov    rdi,rdx
    65014afc:	sar    rdi,0x4
    65014b00:	mov    rax,rdi
    65014b03:	shr    rax,0x3f
    65014b07:	add    rdi,rax
    65014b0a:	test   r8,r8
    65014b0d:	jne    0x65014b14
    65014b0f:	mov    rdx,r15
    65014b12:	jmp    0x65014b2f
    65014b14:	mov    rcx,QWORD PTR [rsi+0x10]
    65014b18:	sub    rcx,r8
    65014b1b:	mov    rax,r12
    65014b1e:	imul   rcx
    65014b21:	sar    rdx,0x4
    65014b25:	mov    rax,rdx
    65014b28:	shr    rax,0x3f
    65014b2c:	add    rdx,rax
    65014b2f:	movabs r9,0x666666666666666
    65014b39:	mov    rax,r9
    65014b3c:	sub    rax,rdx
    65014b3f:	cmp    rax,0x1
    65014b43:	jae    0x65014b4b
    65014b45:	call   0x65014fe0
    65014b4a:	int3   
    65014b4b:	test   r8,r8
    65014b4e:	jne    0x65014b55
    65014b50:	mov    rdx,r15
    65014b53:	jmp    0x65014b70
    65014b55:	mov    rcx,QWORD PTR [rsi+0x10]
    65014b59:	sub    rcx,r8
    65014b5c:	mov    rax,r12
    65014b5f:	imul   rcx
    65014b62:	sar    rdx,0x4
    65014b66:	mov    rax,rdx
    65014b69:	shr    rax,0x3f
    65014b6d:	add    rdx,rax
    65014b70:	lea    rax,[rdx+0x1]
    65014b74:	cmp    rdi,rax
    65014b77:	jae    0x65014d5c
    65014b7d:	mov    rax,rdi
    65014b80:	shr    rax,1
    65014b83:	sub    r9,rax
    65014b86:	cmp    r9,rdi
    65014b89:	jae    0x65014b90
    65014b8b:	mov    rdi,r15
    65014b8e:	jmp    0x65014b93
    65014b90:	add    rdi,rax
    65014b93:	test   r8,r8
    65014b96:	jne    0x65014b9d
    65014b98:	mov    rdx,r15
    65014b9b:	jmp    0x65014bb8
    65014b9d:	mov    rcx,QWORD PTR [rsi+0x10]
    65014ba1:	sub    rcx,r8
    65014ba4:	mov    rax,r12
    65014ba7:	imul   rcx
    65014baa:	sar    rdx,0x4
    65014bae:	mov    rax,rdx
    65014bb1:	shr    rax,0x3f
    65014bb5:	add    rdx,rax
    65014bb8:	lea    rax,[rdx+0x1]
    65014bbc:	cmp    rdi,rax
    65014bbf:	jae    0x65014bea
    65014bc1:	test   r8,r8
    65014bc4:	jne    0x65014bcb
    65014bc6:	mov    rdx,r15
    65014bc9:	jmp    0x65014be6
    65014bcb:	mov    rcx,QWORD PTR [rsi+0x10]
    65014bcf:	sub    rcx,r8
    65014bd2:	mov    rax,r12
    65014bd5:	imul   rcx
    65014bd8:	sar    rdx,0x4
    65014bdc:	mov    rax,rdx
    65014bdf:	shr    rax,0x3f
    65014be3:	add    rdx,rax
    65014be6:	lea    rdi,[rdx+0x1]
    65014bea:	mov    rcx,rdi
    65014bed:	test   rdi,rdi
    65014bf0:	jne    0x65014bf7
    65014bf2:	mov    rcx,r15
    65014bf5:	jmp    0x65014c38
    65014bf7:	xor    edx,edx
    65014bf9:	or     rax,0xffffffffffffffff
    65014bfd:	div    rdi
    65014c00:	cmp    rax,0x28
    65014c04:	jae    0x65014c38
    65014c06:	mov    QWORD PTR [rsp+0x50],r15
    65014c0b:	lea    rdx,[rsp+0x50]
    65014c10:	lea    rcx,[rsp+0x58]
    65014c15:	call   0x6501d1c0
    65014c1a:	lea    r11,[rip+0x204e7]        # 0x65035108
    65014c21:	mov    QWORD PTR [rsp+0x58],r11
    65014c26:	lea    rdx,[rip+0x2c513]        # 0x65041140
    65014c2d:	lea    rcx,[rsp+0x58]
    65014c32:	call   0x6501daf0
    65014c37:	int3   
    65014c38:	lea    rcx,[rcx+rcx*4]
    65014c3c:	shl    rcx,0x3
    65014c40:	call   0x6501da50
    65014c45:	mov    r14,rax
    65014c48:	mov    QWORD PTR [rsp+0x40],rax
    65014c4d:	mov    QWORD PTR [rsp+0x38],rax
    65014c52:	mov    r13,QWORD PTR [rbx+0x8]
    65014c56:	xor    eax,eax
    65014c58:	mov    BYTE PTR [rsp+0x28],al
    65014c5c:	movzx  edx,BYTE PTR [rsp+0x30]
    65014c61:	mov    BYTE PTR [rsp+0x20],dl
    65014c65:	mov    r9,rsi
    65014c68:	mov    r8,r14
    65014c6b:	mov    rdx,r13
    65014c6e:	mov    rcx,QWORD PTR [rsi+0x8]
    65014c72:	call   0x65015370
    65014c77:	mov    rbx,rax
    65014c7a:	mov    QWORD PTR [rsp+0x38],rax
    65014c7f:	xor    eax,eax
    65014c81:	mov    BYTE PTR [rsp+0x28],al
    65014c85:	movzx  eax,BYTE PTR [rsp+0x30]
    65014c8a:	mov    BYTE PTR [rsp+0x20],al
    65014c8e:	mov    r9,rsi
    65014c91:	lea    r8,[rsp+0x78]
    65014c96:	mov    edx,0x1
    65014c9b:	mov    rcx,rbx
    65014c9e:	call   0x65015110
    65014ca3:	add    rbx,0x28
    65014ca7:	mov    QWORD PTR [rsp+0x38],rbx
    65014cac:	xor    eax,eax
    65014cae:	mov    BYTE PTR [rsp+0x28],al
    65014cb2:	movzx  eax,BYTE PTR [rsp+0x30]
    65014cb7:	mov    BYTE PTR [rsp+0x20],al
    65014cbb:	mov    r9,rsi
    65014cbe:	mov    r8,rbx
    65014cc1:	mov    rdx,QWORD PTR [rsi+0x10]
    65014cc5:	mov    rcx,r13
    65014cc8:	call   0x65015370
    65014ccd:	nop
    65014cce:	mov    rbx,QWORD PTR [rsi+0x8]
    65014cd2:	test   rbx,rbx
    65014cd5:	jne    0x65014cdc
    65014cd7:	mov    r12,r15
    65014cda:	jmp    0x65014cfa
    65014cdc:	mov    rcx,QWORD PTR [rsi+0x10]
    65014ce0:	sub    rcx,rbx
    65014ce3:	mov    rax,r12
    65014ce6:	imul   rcx
    65014ce9:	mov    r12,rdx
    65014cec:	sar    r12,0x4
    65014cf0:	mov    rax,r12
    65014cf3:	shr    rax,0x3f
    65014cf7:	add    r12,rax
    65014cfa:	test   rbx,rbx
    65014cfd:	je     0x65014d3a
    65014cff:	mov    r13,QWORD PTR [rsi+0x10]
    65014d03:	cmp    rbx,r13
    65014d06:	je     0x65014d31
    65014d08:	cmp    QWORD PTR [rbx+0x20],0x10
    65014d0d:	jb     0x65014d18
    65014d0f:	mov    rcx,QWORD PTR [rbx+0x8]
    65014d13:	call   0x6501d190
    65014d18:	mov    QWORD PTR [rbx+0x20],0xf
    65014d20:	mov    QWORD PTR [rbx+0x18],r15
    65014d24:	mov    BYTE PTR [rbx+0x8],0x0
    65014d28:	add    rbx,0x28
    65014d2c:	cmp    rbx,r13
    65014d2f:	jne    0x65014d08
    65014d31:	mov    rcx,QWORD PTR [rsi+0x8]
    65014d35:	call   0x6501d190
    65014d3a:	lea    rax,[rdi+rdi*4]
    65014d3e:	lea    rcx,[r14+rax*8]
    65014d42:	mov    QWORD PTR [rsi+0x18],rcx
    65014d46:	lea    rax,[r12+r12*4+0x5]
    65014d4b:	lea    rcx,[r14+rax*8]
    65014d4f:	mov    QWORD PTR [rsi+0x10],rcx
    65014d53:	mov    QWORD PTR [rsi+0x8],r14
    65014d57:	jmp    0x65014e9e
    65014d5c:	mov    r13,QWORD PTR [rsi+0x10]
    65014d60:	mov    rdi,QWORD PTR [rbx+0x8]
    65014d64:	mov    rcx,r13
    65014d67:	sub    rcx,rdi
    65014d6a:	mov    rax,r12
    65014d6d:	imul   rcx
    65014d70:	sar    rdx,0x4
    65014d74:	mov    rax,rdx
    65014d77:	shr    rax,0x3f
    65014d7b:	add    rdx,rax
    65014d7e:	cmp    rdx,0x1
    65014d82:	jae    0x65014e2f
    65014d88:	lea    r8,[rdi+0x28]
    65014d8c:	xor    eax,eax
    65014d8e:	mov    BYTE PTR [rsp+0x28],al
    65014d92:	movzx  eax,BYTE PTR [rsp+0x30]
    65014d97:	mov    BYTE PTR [rsp+0x20],al
    65014d9b:	mov    r9,rsi
    65014d9e:	mov    rdx,r13
    65014da1:	mov    rcx,rdi
    65014da4:	call   0x65015370
    65014da9:	nop
    65014daa:	mov    r10,QWORD PTR [rsi+0x10]
    65014dae:	mov    rcx,r10
    65014db1:	sub    rcx,rdi
    65014db4:	mov    rax,r12
    65014db7:	imul   rcx
    65014dba:	sar    rdx,0x4
    65014dbe:	mov    rax,rdx
    65014dc1:	shr    rax,0x3f
    65014dc5:	add    rdx,rax
    65014dc8:	mov    ecx,0x1
    65014dcd:	sub    rcx,rdx
    65014dd0:	xor    eax,eax
    65014dd2:	mov    BYTE PTR [rsp+0x28],al
    65014dd6:	movzx  eax,BYTE PTR [rsp+0x30]
    65014ddb:	mov    BYTE PTR [rsp+0x20],al
    65014ddf:	mov    r9,rsi
    65014de2:	lea    r8,[rsp+0x78]
    65014de7:	mov    rdx,rcx
    65014dea:	mov    rcx,r10
    65014ded:	call   0x65015110
    65014df2:	nop
    65014df3:	add    QWORD PTR [rsi+0x10],0x28
    65014df8:	mov    rbx,QWORD PTR [rsi+0x10]
    65014dfc:	add    rbx,0xffffffffffffffd8
    65014e00:	cmp    rdi,rbx
    65014e03:	je     0x65014e9e
    65014e09:	data16 xchg ax,ax
    65014e0c:	data16 data16 xchg ax,ax
    65014e10:	or     r9,0xffffffffffffffff
    65014e14:	xor    r8d,r8d
    65014e17:	lea    rdx,[rsp+0x78]
    65014e1c:	mov    rcx,rdi
    65014e1f:	call   0x65001e20
    65014e24:	add    rdi,0x28
    65014e28:	cmp    rdi,rbx
    65014e2b:	jne    0x65014e10
    65014e2d:	jmp    0x65014e9e
    65014e2f:	xor    eax,eax
    65014e31:	mov    BYTE PTR [rsp+0x28],al
    65014e35:	movzx  eax,BYTE PTR [rsp+0x30]
    65014e3a:	mov    BYTE PTR [rsp+0x20],al
    65014e3e:	mov    r9,rsi
    65014e41:	mov    r8,r13
    65014e44:	mov    rdx,r13
    65014e47:	lea    rcx,[r13-0x28]
    65014e4b:	call   0x65015370
    65014e50:	mov    QWORD PTR [rsi+0x10],rax
    65014e54:	xor    eax,eax
    65014e56:	mov    BYTE PTR [rsp+0x28],al
    65014e5a:	movzx  eax,BYTE PTR [rsp+0x30]
    65014e5f:	mov    BYTE PTR [rsp+0x20],al
    65014e63:	movzx  r9d,BYTE PTR [rsp+0x30]
    65014e69:	mov    r8,r13
    65014e6c:	lea    rdx,[r13-0x28]
    65014e70:	mov    rcx,rdi
    65014e73:	call   0x65015210
    65014e78:	lea    rbx,[rdi+0x28]
    65014e7c:	cmp    rdi,rbx
    65014e7f:	je     0x65014e9e
    65014e81:	or     r9,0xffffffffffffffff
    65014e85:	xor    r8d,r8d
    65014e88:	lea    rdx,[rsp+0x78]
    65014e8d:	mov    rcx,rdi
    65014e90:	call   0x65001e20
    65014e95:	add    rdi,0x28
    65014e99:	cmp    rdi,rbx
    65014e9c:	jne    0x65014e81
    65014e9e:	cmp    QWORD PTR [rsp+0x98],0x10
    65014ea7:	jb     0x65014eb6
    65014ea9:	mov    rcx,QWORD PTR [rsp+0x80]
    65014eb1:	call   0x6501d190
    65014eb6:	mov    rcx,QWORD PTR [rsp+0xa0]
    65014ebe:	xor    rcx,rsp
    65014ec1:	call   0x6501e4e0
    65014ec6:	add    rsp,0xb0
    65014ecd:	pop    r15
    65014ecf:	pop    r14
    65014ed1:	pop    r13
    65014ed3:	pop    r12
    65014ed5:	pop    rdi
    65014ed6:	pop    rsi
    65014ed7:	pop    rbx
    65014ed8:	ret    
    65014ed9:	int3   
    65014eda:	int3   
    65014edb:	int3   
    65014edc:	int3   
    65014edd:	int3   
    65014ede:	int3   
    65014edf:	int3   
    65014ee0:	rex push rbp
    65014ee2:	sub    rsp,0x20
    65014ee6:	mov    rbp,rdx
    65014ee9:	lea    rcx,[rbp+0x78]
    65014eed:	call   0x65001c70
    65014ef2:	add    rsp,0x20
    65014ef6:	pop    rbp
    65014ef7:	ret    
    65014ef8:	int3   
    65014ef9:	int3   
    65014efa:	int3   
    65014efb:	int3   
    65014efc:	int3   
    65014efd:	int3   
    65014efe:	int3   
    65014eff:	int3   
    65014f00:	mov    QWORD PTR [rsp+0x10],rdx
    65014f05:	push   rbx
    65014f06:	push   rbp
    65014f07:	sub    rsp,0x38
    65014f0b:	mov    rbp,rdx
    65014f0e:	mov    r8,QWORD PTR [rbp+0x38]
    65014f12:	mov    rbx,QWORD PTR [rbp+0x40]
    65014f16:	mov    rdx,rbx
    65014f19:	mov    rcx,QWORD PTR [rbp+0x48]
    65014f1d:	call   0x65014f80
    65014f22:	mov    rcx,rbx
    65014f25:	call   0x6501d190
    65014f2a:	xor    edx,edx
    65014f2c:	xor    ecx,ecx
    65014f2e:	call   0x6501daf0
    65014f33:	nop
    65014f34:	add    rsp,0x38
    65014f38:	pop    rbp
    65014f39:	pop    rbx
    65014f3a:	ret    
    65014f3b:	int3   
    65014f3c:	int3   
    65014f3d:	int3   
    65014f3e:	int3   
    65014f3f:	int3   
    65014f40:	mov    QWORD PTR [rsp+0x10],rdx
    65014f45:	push   rbp
    65014f46:	sub    rsp,0x30
    65014f4a:	mov    rbp,rdx
    65014f4d:	mov    rcx,QWORD PTR [rbp+0x48]
    65014f51:	mov    r8,QWORD PTR [rcx+0x10]
    65014f55:	add    r8,0x28
    65014f59:	mov    rax,QWORD PTR [rbp+0x40]
    65014f5d:	mov    rdx,QWORD PTR [rax+0x8]
    65014f61:	add    rdx,0x28
    65014f65:	call   0x65014f80
    65014f6a:	xor    edx,edx
    65014f6c:	xor    ecx,ecx
    65014f6e:	call   0x6501daf0
    65014f73:	nop
    65014f74:	add    rsp,0x30
    65014f78:	pop    rbp
    65014f79:	ret    
    65014f7a:	int3   
    65014f7b:	int3   
    65014f7c:	int3   
    65014f7d:	int3   
    65014f7e:	int3   
    65014f7f:	int3   
    65014f80:	cmp    rdx,r8
    65014f83:	je     0x65014fda
    65014f85:	push   rdi
    65014f86:	sub    rsp,0x20
    65014f8a:	mov    QWORD PTR [rsp+0x30],rbx
    65014f8f:	mov    QWORD PTR [rsp+0x38],rsi
    65014f94:	mov    rdi,r8
    65014f97:	xor    esi,esi
    65014f99:	lea    rbx,[rdx+0x20]
    65014f9d:	data16 xchg ax,ax
    65014fa0:	cmp    QWORD PTR [rbx],0x10
    65014fa4:	jb     0x65014faf
    65014fa6:	mov    rcx,QWORD PTR [rbx-0x18]
    65014faa:	call   0x6501d190
    65014faf:	mov    QWORD PTR [rbx],0xf
    65014fb6:	mov    QWORD PTR [rbx-0x8],rsi
    65014fba:	mov    BYTE PTR [rbx-0x18],sil
    65014fbe:	add    rbx,0x28
    65014fc2:	lea    rax,[rbx-0x20]
    65014fc6:	cmp    rax,rdi
    65014fc9:	jne    0x65014fa0
    65014fcb:	mov    rsi,QWORD PTR [rsp+0x38]
    65014fd0:	mov    rbx,QWORD PTR [rsp+0x30]
    65014fd5:	add    rsp,0x20
    65014fd9:	pop    rdi
    65014fda:	ret    0x0
    65014fdd:	int3   
    65014fde:	int3   
    65014fdf:	int3   
    65014fe0:	sub    rsp,0x98
    65014fe7:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65014ff0:	mov    QWORD PTR [rsp+0x48],0xf
    65014ff9:	mov    QWORD PTR [rsp+0x40],0x0
    65015002:	mov    BYTE PTR [rsp+0x30],0x0
    65015007:	xor    r8d,r8d
    6501500a:	lea    edx,[r8+0x12]
    6501500e:	lea    rcx,[rsp+0x28]
    65015013:	call   0x65002330
    65015018:	lea    rcx,[rsp+0x30]
    6501501d:	mov    rdx,QWORD PTR [rsp+0x48]
    65015022:	cmp    rdx,0x10
    65015026:	cmovae rcx,QWORD PTR [rsp+0x30]
    6501502c:	mov    r9d,0x12
    65015032:	lea    r8,[rip+0x23e57]        # 0x65038e90
    65015039:	call   0x6501d640
    6501503e:	mov    QWORD PTR [rsp+0x40],0x12
    65015047:	lea    rax,[rsp+0x30]
    6501504c:	cmp    QWORD PTR [rsp+0x48],0x10
    65015052:	cmovae rax,QWORD PTR [rsp+0x30]
    65015058:	mov    BYTE PTR [rax+0x12],0x0
    6501505c:	lea    rcx,[rsp+0x50]
    65015061:	call   0x6501d1a0
    65015066:	nop
    65015067:	lea    rax,[rip+0x200b2]        # 0x65035120
    6501506e:	mov    QWORD PTR [rsp+0x50],rax
    65015073:	mov    QWORD PTR [rsp+0x88],0xf
    6501507f:	mov    QWORD PTR [rsp+0x80],0x0
    6501508b:	mov    BYTE PTR [rsp+0x70],0x0
    65015090:	or     r9,0xffffffffffffffff
    65015094:	xor    r8d,r8d
    65015097:	lea    rdx,[rsp+0x28]
    6501509c:	lea    rcx,[rsp+0x68]
    650150a1:	call   0x65001e20
    650150a6:	nop
    650150a7:	lea    rax,[rip+0x2008a]        # 0x65035138
    650150ae:	mov    QWORD PTR [rsp+0x50],rax
    650150b3:	lea    rdx,[rip+0x2c1de]        # 0x65041298
    650150ba:	lea    rcx,[rsp+0x50]
    650150bf:	call   0x6501daf0
    650150c4:	int3   
    650150c5:	int3   
    650150c6:	int3   
    650150c7:	int3   
    650150c8:	int3   
    650150c9:	int3   
    650150ca:	int3   
    650150cb:	int3   
    650150cc:	int3   
    650150cd:	int3   
    650150ce:	int3   
    650150cf:	int3   
    650150d0:	rex push rbp
    650150d2:	sub    rsp,0x20
    650150d6:	mov    rbp,rdx
    650150d9:	lea    rcx,[rbp+0x28]
    650150dd:	call   0x65001c70
    650150e2:	add    rsp,0x20
    650150e6:	pop    rbp
    650150e7:	ret    
    650150e8:	int3   
    650150e9:	int3   
    650150ea:	int3   
    650150eb:	int3   
    650150ec:	int3   
    650150ed:	int3   
    650150ee:	int3   
    650150ef:	int3   
    650150f0:	rex push rbp
    650150f2:	sub    rsp,0x20
    650150f6:	mov    rbp,rdx
    650150f9:	lea    rcx,[rbp+0x50]
    650150fd:	call   0x6501d320
    65015102:	add    rsp,0x20
    65015106:	pop    rbp
    65015107:	ret    
    65015108:	int3   
    65015109:	int3   
    6501510a:	int3   
    6501510b:	int3   
    6501510c:	int3   
    6501510d:	int3   
    6501510e:	int3   
    6501510f:	int3   
    65015110:	mov    QWORD PTR [rsp+0x20],r9
    65015115:	mov    QWORD PTR [rsp+0x8],rcx
    6501511a:	push   rsi
    6501511b:	push   rdi
    6501511c:	push   r12
    6501511e:	sub    rsp,0x40
    65015122:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501512b:	mov    QWORD PTR [rsp+0x70],rbx
    65015130:	mov    rsi,r8
    65015133:	mov    rdi,rdx
    65015136:	mov    rbx,rcx
    65015139:	mov    QWORD PTR [rsp+0x68],rcx
    6501513e:	xor    r12d,r12d
    65015141:	test   rdi,rdi
    65015144:	je     0x65015187
    65015146:	mov    QWORD PTR [rsp+0x28],rbx
    6501514b:	mov    QWORD PTR [rsp+0x30],rbx
    65015150:	test   rbx,rbx
    65015153:	je     0x65015178
    65015155:	mov    QWORD PTR [rbx+0x20],0xf
    6501515d:	mov    QWORD PTR [rbx+0x18],r12
    65015161:	mov    BYTE PTR [rbx+0x8],0x0
    65015165:	or     r9,0xffffffffffffffff
    65015169:	xor    r8d,r8d
    6501516c:	mov    rdx,rsi
    6501516f:	mov    rcx,rbx
    65015172:	call   0x65001e20
    65015177:	nop
    65015178:	sub    rdi,0x1
    6501517c:	add    rbx,0x28
    65015180:	mov    QWORD PTR [rsp+0x60],rbx
    65015185:	jmp    0x65015141
    65015187:	mov    rbx,QWORD PTR [rsp+0x70]
    6501518c:	add    rsp,0x40
    65015190:	pop    r12
    65015192:	pop    rdi
    65015193:	pop    rsi
    65015194:	ret    
    65015195:	int3   
    65015196:	int3   
    65015197:	int3   
    65015198:	int3   
    65015199:	int3   
    6501519a:	int3   
    6501519b:	int3   
    6501519c:	int3   
    6501519d:	int3   
    6501519e:	int3   
    6501519f:	int3   
    650151a0:	rex push rbp
    650151a2:	sub    rsp,0x20
    650151a6:	mov    rbp,rdx
    650151a9:	mov    rdx,QWORD PTR [rbp+0x28]
    650151ad:	mov    rcx,QWORD PTR [rbp+0x30]
    650151b1:	call   0x65004190
    650151b6:	add    rsp,0x20
    650151ba:	pop    rbp
    650151bb:	ret    
    650151bc:	int3   
    650151bd:	int3   
    650151be:	int3   
    650151bf:	int3   
    650151c0:	mov    QWORD PTR [rsp+0x10],rdx
    650151c5:	push   rbx
    650151c6:	push   rbp
    650151c7:	push   rsi
    650151c8:	push   rdi
    650151c9:	sub    rsp,0x28
    650151cd:	mov    rbp,rdx
    650151d0:	mov    rbx,QWORD PTR [rbp+0x68]
    650151d4:	mov    rdi,QWORD PTR [rbp+0x60]
    650151d8:	cmp    rbx,rdi
    650151db:	je     0x650151f5
    650151dd:	mov    rsi,QWORD PTR [rbp+0x78]
    650151e1:	mov    rdx,rbx
    650151e4:	mov    rcx,rsi
    650151e7:	call   0x65015330
    650151ec:	add    rbx,0x28
    650151f0:	cmp    rbx,rdi
    650151f3:	jne    0x650151e1
    650151f5:	xor    edx,edx
    650151f7:	xor    ecx,ecx
    650151f9:	call   0x6501daf0
    650151fe:	nop
    650151ff:	add    rsp,0x28
    65015203:	pop    rdi
    65015204:	pop    rsi
    65015205:	pop    rbp
    65015206:	pop    rbx
    65015207:	ret    
    65015208:	int3   
    65015209:	int3   
    6501520a:	int3   
    6501520b:	int3   
    6501520c:	int3   
    6501520d:	int3   
    6501520e:	int3   
    6501520f:	int3   
    65015210:	mov    QWORD PTR [rsp+0x8],rbx
    65015215:	push   rdi
    65015216:	sub    rsp,0x20
    6501521a:	mov    rax,QWORD PTR [rip+0x2ceff]        # 0x65042120
    65015221:	xor    rax,rsp
    65015224:	mov    QWORD PTR [rsp+0x10],rax
    65015229:	mov    r9,rdx
    6501522c:	mov    r10,rdx
    6501522f:	movabs rax,0x6666666666666667
    65015239:	sub    r9,rcx
    6501523c:	mov    rbx,r8
    6501523f:	mov    rdi,rcx
    65015242:	imul   r9
    65015245:	mov    r9,r8
    65015248:	sar    rdx,0x4
    6501524c:	mov    rax,rdx
    6501524f:	shr    rax,0x3f
    65015253:	add    rdx,rax
    65015256:	lea    rax,[rdx+rdx*4]
    6501525a:	shl    rax,0x3
    6501525e:	sub    r9,rax
    65015261:	cmp    rcx,r10
    65015264:	je     0x6501530f
    6501526a:	lea    r11,[r10+0x20]
    6501526e:	add    r8,0x18
    65015272:	sub    r10,rbx
    65015275:	data16 data16 xchg ax,ax
    65015279:	data16 xchg ax,ax
    6501527c:	data16 data16 xchg ax,ax
    65015280:	mov    eax,DWORD PTR [r8-0x38]
    65015284:	sub    r8,0x28
    65015288:	sub    r11,0x28
    6501528c:	lea    rcx,[rsp]
    65015290:	mov    DWORD PTR [rcx],eax
    65015292:	mov    eax,DWORD PTR [r8-0xc]
    65015296:	mov    DWORD PTR [rcx+0x4],eax
    65015299:	mov    eax,DWORD PTR [r8-0x8]
    6501529d:	mov    DWORD PTR [rcx+0x8],eax
    650152a0:	mov    eax,DWORD PTR [r8-0x4]
    650152a4:	mov    DWORD PTR [rcx+0xc],eax
    650152a7:	mov    eax,DWORD PTR [r11-0x18]
    650152ab:	lea    rcx,[rsp]
    650152af:	mov    DWORD PTR [r8-0x10],eax
    650152b3:	mov    eax,DWORD PTR [r11-0x14]
    650152b7:	mov    DWORD PTR [r8-0xc],eax
    650152bb:	mov    eax,DWORD PTR [r11-0x10]
    650152bf:	mov    DWORD PTR [r8-0x8],eax
    650152c3:	mov    eax,DWORD PTR [r11-0xc]
    650152c7:	mov    DWORD PTR [r8-0x4],eax
    650152cb:	mov    eax,DWORD PTR [rcx]
    650152cd:	mov    DWORD PTR [r11-0x18],eax
    650152d1:	mov    eax,DWORD PTR [rcx+0x4]
    650152d4:	mov    DWORD PTR [r11-0x14],eax
    650152d8:	mov    eax,DWORD PTR [rcx+0x8]
    650152db:	mov    DWORD PTR [r11-0x10],eax
    650152df:	mov    eax,DWORD PTR [rcx+0xc]
    650152e2:	mov    rcx,QWORD PTR [r10+r8*1]
    650152e6:	mov    DWORD PTR [r11-0xc],eax
    650152ea:	mov    rdx,QWORD PTR [r8]
    650152ed:	mov    QWORD PTR [r8],rcx
    650152f0:	mov    rcx,QWORD PTR [r11]
    650152f3:	mov    QWORD PTR [r10+r8*1],rdx
    650152f7:	mov    rdx,QWORD PTR [r8+0x8]
    650152fb:	mov    QWORD PTR [r8+0x8],rcx
    650152ff:	lea    rcx,[r11-0x20]
    65015303:	mov    QWORD PTR [r11],rdx
    65015306:	cmp    rcx,rdi
    65015309:	jne    0x65015280
    6501530f:	mov    rax,r9
    65015312:	mov    rcx,QWORD PTR [rsp+0x10]
    65015317:	xor    rcx,rsp
    6501531a:	call   0x6501e4e0
    6501531f:	mov    rbx,QWORD PTR [rsp+0x30]
    65015324:	add    rsp,0x20
    65015328:	pop    rdi
    65015329:	ret    
    6501532a:	int3   
    6501532b:	int3   
    6501532c:	int3   
    6501532d:	int3   
    6501532e:	int3   
    6501532f:	int3   
    65015330:	rex push rbx
    65015332:	sub    rsp,0x20
    65015336:	cmp    QWORD PTR [rdx+0x20],0x10
    6501533b:	mov    rbx,rdx
    6501533e:	jb     0x65015349
    65015340:	mov    rcx,QWORD PTR [rdx+0x8]
    65015344:	call   0x6501d190
    65015349:	mov    QWORD PTR [rbx+0x20],0xf
    65015351:	mov    QWORD PTR [rbx+0x18],0x0
    65015359:	mov    BYTE PTR [rbx+0x8],0x0
    6501535d:	add    rsp,0x20
    65015361:	pop    rbx
    65015362:	ret    
    65015363:	int3   
    65015364:	int3   
    65015365:	int3   
    65015366:	int3   
    65015367:	int3   
    65015368:	int3   
    65015369:	int3   
    6501536a:	int3   
    6501536b:	int3   
    6501536c:	int3   
    6501536d:	int3   
    6501536e:	int3   
    6501536f:	int3   
    65015370:	mov    r11,rsp
    65015373:	mov    QWORD PTR [r11+0x20],r9
    65015377:	push   rsi
    65015378:	push   rdi
    65015379:	push   r12
    6501537b:	sub    rsp,0x90
    65015382:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
    6501538b:	mov    QWORD PTR [r11+0x10],rbx
    6501538f:	mov    rax,QWORD PTR [rip+0x2cd8a]        # 0x65042120
    65015396:	xor    rax,rsp
    65015399:	mov    QWORD PTR [rsp+0x80],rax
    650153a1:	mov    rbx,r8
    650153a4:	mov    rsi,rdx
    650153a7:	mov    rdi,rcx
    650153aa:	mov    QWORD PTR [rsp+0x20],rbx
    650153af:	mov    QWORD PTR [rsp+0x28],rbx
    650153b4:	mov    QWORD PTR [r11-0x40],0xf
    650153bc:	xor    r12d,r12d
    650153bf:	mov    QWORD PTR [r11-0x48],r12
    650153c3:	mov    BYTE PTR [r11-0x58],r12b
    650153c7:	cmp    rdi,rsi
    650153ca:	je     0x65015486
    650153d0:	mov    QWORD PTR [rsp+0x30],rbx
    650153d5:	mov    QWORD PTR [rsp+0x38],rbx
    650153da:	test   rbx,rbx
    650153dd:	je     0x65015404
    650153df:	mov    QWORD PTR [rbx+0x20],0xf
    650153e7:	mov    QWORD PTR [rbx+0x18],r12
    650153eb:	mov    BYTE PTR [rbx+0x8],0x0
    650153ef:	or     r9,0xffffffffffffffff
    650153f3:	xor    r8d,r8d
    650153f6:	lea    rdx,[rsp+0x48]
    650153fb:	mov    rcx,rbx
    650153fe:	call   0x65001e20
    65015403:	nop
    65015404:	lea    rcx,[rsp+0x70]
    65015409:	mov    eax,DWORD PTR [rbx+0x8]
    6501540c:	mov    DWORD PTR [rcx],eax
    6501540e:	mov    eax,DWORD PTR [rbx+0xc]
    65015411:	mov    DWORD PTR [rcx+0x4],eax
    65015414:	mov    eax,DWORD PTR [rbx+0x10]
    65015417:	mov    DWORD PTR [rcx+0x8],eax
    6501541a:	mov    eax,DWORD PTR [rbx+0x14]
    6501541d:	mov    DWORD PTR [rcx+0xc],eax
    65015420:	mov    eax,DWORD PTR [rdi+0x8]
    65015423:	mov    DWORD PTR [rbx+0x8],eax
    65015426:	mov    eax,DWORD PTR [rdi+0xc]
    65015429:	mov    DWORD PTR [rbx+0xc],eax
    6501542c:	mov    eax,DWORD PTR [rdi+0x10]
    6501542f:	mov    DWORD PTR [rbx+0x10],eax
    65015432:	mov    eax,DWORD PTR [rdi+0x14]
    65015435:	mov    DWORD PTR [rbx+0x14],eax
    65015438:	lea    rcx,[rsp+0x70]
    6501543d:	mov    eax,DWORD PTR [rcx]
    6501543f:	mov    DWORD PTR [rdi+0x8],eax
    65015442:	mov    eax,DWORD PTR [rcx+0x4]
    65015445:	mov    DWORD PTR [rdi+0xc],eax
    65015448:	mov    eax,DWORD PTR [rcx+0x8]
    6501544b:	mov    DWORD PTR [rdi+0x10],eax
    6501544e:	mov    eax,DWORD PTR [rcx+0xc]
    65015451:	mov    DWORD PTR [rdi+0x14],eax
    65015454:	mov    rcx,QWORD PTR [rbx+0x18]
    65015458:	mov    rax,QWORD PTR [rdi+0x18]
    6501545c:	mov    QWORD PTR [rbx+0x18],rax
    65015460:	mov    QWORD PTR [rdi+0x18],rcx
    65015464:	mov    rcx,QWORD PTR [rbx+0x20]
    65015468:	mov    rax,QWORD PTR [rdi+0x20]
    6501546c:	mov    QWORD PTR [rbx+0x20],rax
    65015470:	mov    QWORD PTR [rdi+0x20],rcx
    65015474:	add    rbx,0x28
    65015478:	mov    QWORD PTR [rsp+0x20],rbx
    6501547d:	add    rdi,0x28
    65015481:	jmp    0x650153c7
    65015486:	cmp    QWORD PTR [rsp+0x68],0x10
    6501548c:	jb     0x65015498
    6501548e:	mov    rcx,QWORD PTR [rsp+0x50]
    65015493:	call   0x6501d190
    65015498:	mov    rax,rbx
    6501549b:	mov    rcx,QWORD PTR [rsp+0x80]
    650154a3:	xor    rcx,rsp
    650154a6:	call   0x6501e4e0
    650154ab:	mov    rbx,QWORD PTR [rsp+0xb8]
    650154b3:	add    rsp,0x90
    650154ba:	pop    r12
    650154bc:	pop    rdi
    650154bd:	pop    rsi
    650154be:	ret    
    650154bf:	int3   
    650154c0:	rex push rbp
    650154c2:	sub    rsp,0x20
    650154c6:	mov    rbp,rdx
    650154c9:	lea    rcx,[rbp+0x48]
    650154cd:	call   0x65001c70
    650154d2:	add    rsp,0x20
    650154d6:	pop    rbp
    650154d7:	ret    
    650154d8:	int3   
    650154d9:	int3   
    650154da:	int3   
    650154db:	int3   
    650154dc:	int3   
    650154dd:	int3   
    650154de:	int3   
    650154df:	int3   
    650154e0:	rex push rbp
    650154e2:	sub    rsp,0x20
    650154e6:	mov    rbp,rdx
    650154e9:	mov    rdx,QWORD PTR [rbp+0x30]
    650154ed:	mov    rcx,QWORD PTR [rbp+0x38]
    650154f1:	call   0x65004190
    650154f6:	add    rsp,0x20
    650154fa:	pop    rbp
    650154fb:	ret    
    650154fc:	int3   
    650154fd:	int3   
    650154fe:	int3   
    650154ff:	int3   
    65015500:	mov    QWORD PTR [rsp+0x10],rdx
    65015505:	push   rbx
    65015506:	push   rbp
    65015507:	push   rsi
    65015508:	push   rdi
    65015509:	sub    rsp,0x28
    6501550d:	mov    rbp,rdx
    65015510:	mov    rbx,QWORD PTR [rbp+0x28]
    65015514:	mov    rdi,QWORD PTR [rbp+0x20]
    65015518:	cmp    rbx,rdi
    6501551b:	je     0x65015538
    6501551d:	mov    rsi,QWORD PTR [rbp+0xc8]
    65015524:	mov    rdx,rbx
    65015527:	mov    rcx,rsi
    6501552a:	call   0x65015330
    6501552f:	add    rbx,0x28
    65015533:	cmp    rbx,rdi
    65015536:	jne    0x65015524
    65015538:	xor    edx,edx
    6501553a:	xor    ecx,ecx
    6501553c:	call   0x6501daf0
    65015541:	nop
    65015542:	add    rsp,0x28
    65015546:	pop    rdi
    65015547:	pop    rsi
    65015548:	pop    rbp
    65015549:	pop    rbx
    6501554a:	ret    
    6501554b:	int3   
    6501554c:	int3   
    6501554d:	int3   
    6501554e:	int3   
    6501554f:	int3   
    65015550:	mov    QWORD PTR [rsp+0x8],rbx
    65015555:	mov    QWORD PTR [rsp+0x10],rbp
    6501555a:	mov    QWORD PTR [rsp+0x18],rsi
    6501555f:	mov    QWORD PTR [rsp+0x20],rdi
    65015564:	push   r12
    65015566:	push   r13
    65015568:	push   r14
    6501556a:	sub    rsp,0x800
    65015571:	mov    r9d,0x1
    65015577:	xor    r8d,r8d
    6501557a:	lea    r10,[rsp+0x400]
    65015582:	mov    edx,r9d
    65015585:	mov    r11d,0x100
    6501558b:	xchg   ax,ax
    6501558d:	data16 xchg ax,ax
    65015590:	movsxd rax,edx
    65015593:	mov    DWORD PTR [r10],edx
    65015596:	mov    DWORD PTR [rsp+rax*4],r8d
    6501559a:	mov    eax,edx
    6501559c:	and    al,0x80
    6501559e:	neg    al
    650155a0:	lea    eax,[rdx+rdx*1]
    650155a3:	sbb    ecx,ecx
    650155a5:	add    r8d,r9d
    650155a8:	add    r10,0x4
    650155ac:	and    ecx,0x1b
    650155af:	xor    ecx,eax
    650155b1:	xor    ecx,edx
    650155b3:	cmp    r8d,r11d
    650155b6:	movzx  edx,cl
    650155b9:	jl     0x65015590
    650155bb:	mov    edx,r9d
    650155be:	lea    r8,[rip+0x2f543]        # 0x65044b08
    650155c5:	mov    r10d,0xa
    650155cb:	xchg   ax,ax
    650155cd:	data16 xchg ax,ax
    650155d0:	mov    eax,edx
    650155d2:	mov    DWORD PTR [r8],edx
    650155d5:	and    al,0x80
    650155d7:	neg    al
    650155d9:	lea    eax,[rdx+rdx*1]
    650155dc:	sbb    ecx,ecx
    650155de:	add    r8,0x4
    650155e2:	and    ecx,0x1b
    650155e5:	xor    ecx,eax
    650155e7:	sub    r10,r9
    650155ea:	movzx  edx,cl
    650155ed:	jne    0x650155d0
    650155ef:	mov    BYTE PTR [rip+0x3169d],r10b        # 0x65046c93
    650155f6:	mov    BYTE PTR [rip+0x2f533],0x63        # 0x65044b30
    650155fd:	lea    r8,[rip+0x2f52d]        # 0x65044b31
    65015604:	lea    r10,[rsp+0x4]
    65015609:	lea    r14,[rip+0xfffffffffffea9f0]        # 0x65000000
    65015610:	movsxd rcx,DWORD PTR [r10]
    65015613:	lea    rax,[rsp+0x7fc]
    6501561b:	add    r10,0x4
    6501561f:	shl    rcx,0x2
    65015623:	add    r8,0x1
    65015627:	sub    rax,rcx
    6501562a:	mov    edx,DWORD PTR [rax]
    6501562c:	mov    ecx,edx
    6501562e:	sar    ecx,0x7
    65015631:	lea    eax,[rdx+rdx*1]
    65015634:	or     ecx,eax
    65015636:	movzx  eax,cl
    65015639:	xor    edx,eax
    6501563b:	mov    ecx,eax
    6501563d:	add    eax,eax
    6501563f:	sar    ecx,0x7
    65015642:	or     ecx,eax
    65015644:	movzx  eax,cl
    65015647:	xor    edx,eax
    65015649:	mov    ecx,eax
    6501564b:	add    eax,eax
    6501564d:	sar    ecx,0x7
    65015650:	or     ecx,eax
    65015652:	movzx  eax,cl
    65015655:	xor    edx,eax
    65015657:	mov    ecx,eax
    65015659:	add    eax,eax
    6501565b:	sar    ecx,0x7
    6501565e:	or     ecx,eax
    65015660:	xor    ecx,0x63
    65015663:	movzx  eax,cl
    65015666:	xor    edx,eax
    65015668:	movsxd rax,edx
    6501566b:	mov    BYTE PTR [r8-0x1],dl
    6501566f:	mov    BYTE PTR [rax+r14*1+0x46c30],r9b
    65015677:	add    r9d,0x1
    6501567b:	cmp    r9d,r11d
    6501567e:	jl     0x65015610
    65015680:	mov    esi,DWORD PTR [rsp+0x38]
    65015684:	mov    ebp,DWORD PTR [rsp+0x34]
    65015688:	mov    r12d,DWORD PTR [rsp+0x2c]
    6501568d:	mov    r13d,DWORD PTR [rsp+0x24]
    65015692:	xor    r9d,r9d
    65015695:	data16 data16 xchg ax,ax
    65015699:	data16 xchg ax,ax
    6501569c:	data16 data16 xchg ax,ax
    650156a0:	movzx  edx,BYTE PTR [r9+r14*1+0x44b30]
    650156a9:	mov    eax,edx
    650156ab:	and    al,0x80
    650156ad:	neg    al
    650156af:	lea    eax,[rdx+rdx*1]
    650156b2:	sbb    ecx,ecx
    650156b4:	and    ecx,0x1b
    650156b7:	xor    ecx,eax
    650156b9:	movzx  eax,cl
    650156bc:	mov    ecx,eax
    650156be:	xor    ecx,edx
    650156c0:	shl    ecx,0x8
    650156c3:	xor    ecx,edx
    650156c5:	shl    ecx,0x8
    650156c8:	xor    ecx,edx
    650156ca:	shl    ecx,0x8
    650156cd:	xor    ecx,eax
    650156cf:	movzx  eax,BYTE PTR [r9+r14*1+0x46c30]
    650156d8:	mov    DWORD PTR [r14+r9*4+0x46830],ecx
    650156e0:	rol    ecx,0x8
    650156e3:	mov    DWORD PTR [r14+r9*4+0x46430],ecx
    650156eb:	rol    ecx,0x8
    650156ee:	mov    DWORD PTR [r14+r9*4+0x46030],ecx
    650156f6:	rol    ecx,0x8
    650156f9:	test   eax,eax
    650156fb:	mov    DWORD PTR [r14+r9*4+0x45c30],ecx
    65015703:	je     0x650157b4
    65015709:	mov    r8d,DWORD PTR [rsp+rax*4]
    6501570d:	mov    eax,0x80808081
    65015712:	lea    ecx,[r8+rsi*1]
    65015716:	imul   ecx
    65015718:	add    edx,ecx
    6501571a:	sar    edx,0x7
    6501571d:	mov    eax,edx
    6501571f:	shr    eax,0x1f
    65015722:	add    edx,eax
    65015724:	imul   edx,edx,0xff
    6501572a:	sub    ecx,edx
    6501572c:	movsxd rax,ecx
    6501572f:	lea    ecx,[r8+r13*1]
    65015733:	mov    r10d,DWORD PTR [rsp+rax*4+0x400]
    6501573b:	mov    eax,0x80808081
    65015740:	imul   ecx
    65015742:	add    edx,ecx
    65015744:	sar    edx,0x7
    65015747:	mov    eax,edx
    65015749:	shr    eax,0x1f
    6501574c:	add    edx,eax
    6501574e:	imul   edx,edx,0xff
    65015754:	sub    ecx,edx
    65015756:	movsxd rax,ecx
    65015759:	lea    ecx,[r8+rbp*1]
    6501575d:	mov    ebx,DWORD PTR [rsp+rax*4+0x400]
    65015764:	mov    eax,0x80808081
    65015769:	imul   ecx
    6501576b:	add    edx,ecx
    6501576d:	sar    edx,0x7
    65015770:	mov    eax,edx
    65015772:	shr    eax,0x1f
    65015775:	add    edx,eax
    65015777:	imul   edx,edx,0xff
    6501577d:	sub    ecx,edx
    6501577f:	movsxd rax,ecx
    65015782:	lea    ecx,[r8+r12*1]
    65015786:	mov    edi,DWORD PTR [rsp+rax*4+0x400]
    6501578d:	mov    eax,0x80808081
    65015792:	imul   ecx
    65015794:	add    edx,ecx
    65015796:	sar    edx,0x7
    65015799:	mov    eax,edx
    6501579b:	shr    eax,0x1f
    6501579e:	add    edx,eax
    650157a0:	imul   edx,edx,0xff
    650157a6:	sub    ecx,edx
    650157a8:	movsxd rax,ecx
    650157ab:	mov    ecx,DWORD PTR [rsp+rax*4+0x400]
    650157b2:	jmp    0x650157bd
    650157b4:	xor    r10d,r10d
    650157b7:	xor    ebx,ebx
    650157b9:	xor    edi,edi
    650157bb:	xor    ecx,ecx
    650157bd:	shl    ecx,0x8
    650157c0:	add    r9,0x1
    650157c4:	xor    ecx,edi
    650157c6:	shl    ecx,0x8
    650157c9:	xor    ecx,ebx
    650157cb:	shl    ecx,0x8
    650157ce:	xor    ecx,r10d
    650157d1:	mov    DWORD PTR [r14+r9*4+0x4582c],ecx
    650157d9:	rol    ecx,0x8
    650157dc:	mov    DWORD PTR [r14+r9*4+0x4542c],ecx
    650157e4:	rol    ecx,0x8
    650157e7:	mov    DWORD PTR [r14+r9*4+0x4502c],ecx
    650157ef:	rol    ecx,0x8
    650157f2:	sub    r11,0x1
    650157f6:	mov    DWORD PTR [r14+r9*4+0x44c2c],ecx
    650157fe:	jne    0x650156a0
    65015804:	lea    r11,[rsp+0x800]
    6501580c:	mov    rbx,QWORD PTR [r11+0x20]
    65015810:	mov    rbp,QWORD PTR [r11+0x28]
    65015814:	mov    rsi,QWORD PTR [r11+0x30]
    65015818:	mov    rdi,QWORD PTR [r11+0x38]
    6501581c:	mov    rsp,r11
    6501581f:	pop    r14
    65015821:	pop    r13
    65015823:	pop    r12
    65015825:	ret    
    65015826:	int3   
    65015827:	int3   
    65015828:	int3   
    65015829:	int3   
    6501582a:	int3   
    6501582b:	int3   
    6501582c:	int3   
    6501582d:	int3   
    6501582e:	int3   
    6501582f:	int3   
    65015830:	rex push rbx
    65015832:	push   r12
    65015834:	push   r14
    65015836:	sub    rsp,0x30
    6501583a:	cmp    DWORD PTR [rip+0x314f7],0x0        # 0x65046d38
    65015841:	mov    rbx,rcx
    65015844:	jne    0x65015855
    65015846:	call   0x65015550
    6501584b:	mov    DWORD PTR [rip+0x314e3],0x1        # 0x65046d38
    65015855:	lea    r12,[rbx+0x10]
    65015859:	lea    r8,[rip+0x2e0fa]        # 0x6504395a
    65015860:	xor    r9d,r9d
    65015863:	mov    r10,r12
    65015866:	mov    DWORD PTR [rbx],0xa
    6501586c:	lea    r14,[rip+0xfffffffffffea78d]        # 0x65000000
    65015873:	sub    r10,r8
    65015876:	mov    QWORD PTR [rbx+0x8],r12
    6501587a:	data16 xchg ax,ax
    6501587d:	data16 xchg ax,ax
    65015880:	movzx  eax,BYTE PTR [r8]
    65015884:	movzx  edx,BYTE PTR [r8+0x1]
    65015889:	add    r8,0x4
    6501588d:	shl    edx,0x8
    65015890:	or     edx,eax
    65015892:	movzx  eax,BYTE PTR [r8-0x5]
    65015897:	shl    edx,0x8
    6501589a:	or     edx,eax
    6501589c:	lea    eax,[r9*4+0x0]
    650158a4:	add    r9d,0x1
    650158a8:	shl    edx,0x8
    650158ab:	movsxd rcx,eax
    650158ae:	movzx  eax,BYTE PTR [rcx+r14*1+0x43958]
    650158b7:	or     edx,eax
    650158b9:	cmp    r9d,0x4
    650158bd:	mov    DWORD PTR [r10+r8*1-0x4],edx
    650158c2:	jl     0x65015880
    650158c4:	mov    eax,DWORD PTR [rbx]
    650158c6:	mov    QWORD PTR [rsp+0x58],rsi
    650158cb:	mov    QWORD PTR [rsp+0x60],rdi
    650158d0:	cmp    eax,0xa
    650158d3:	mov    QWORD PTR [rsp+0x28],r13
    650158d8:	je     0x65015c61
    650158de:	cmp    eax,0xc
    650158e1:	je     0x65015a05
    650158e7:	cmp    eax,0xe
    650158ea:	jne    0x65015ed1
    650158f0:	lea    r10,[rip+0x2f211]        # 0x65044b08
    650158f7:	lea    r11,[rip+0x2f226]        # 0x65044b24
    650158fe:	xchg   ax,ax
    65015900:	mov    r9d,DWORD PTR [r12+0x1c]
    65015905:	mov    ecx,DWORD PTR [r12+0x8]
    6501590a:	add    r10,0x4
    6501590e:	movzx  eax,r9b
    65015912:	add    r12,0x20
    65015916:	movzx  edx,BYTE PTR [rax+r14*1+0x44b30]
    6501591f:	movzx  eax,BYTE PTR [r12-0x1]
    65015925:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    6501592e:	shl    edx,0x8
    65015931:	xor    edx,eax
    65015933:	movzx  eax,BYTE PTR [r12-0x2]
    65015939:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015942:	shl    edx,0x8
    65015945:	xor    edx,eax
    65015947:	movzx  eax,BYTE PTR [r12-0x3]
    6501594d:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015956:	shl    edx,0x8
    65015959:	xor    edx,eax
    6501595b:	mov    eax,DWORD PTR [r12-0x1c]
    65015960:	xor    edx,DWORD PTR [r12-0x20]
    65015965:	xor    edx,DWORD PTR [r10-0x4]
    65015969:	xor    eax,edx
    6501596b:	mov    DWORD PTR [r12],edx
    6501596f:	xor    ecx,eax
    65015971:	mov    DWORD PTR [r12+0x4],eax
    65015976:	mov    DWORD PTR [r12+0x8],ecx
    6501597b:	xor    ecx,DWORD PTR [r12-0x14]
    65015980:	mov    DWORD PTR [r12+0xc],ecx
    65015985:	movzx  eax,BYTE PTR [r12+0xf]
    6501598b:	movzx  edx,BYTE PTR [rax+r14*1+0x44b30]
    65015994:	movzx  eax,BYTE PTR [r12+0xe]
    6501599a:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    650159a3:	shl    edx,0x8
    650159a6:	xor    edx,eax
    650159a8:	movzx  eax,BYTE PTR [r12+0xd]
    650159ae:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    650159b7:	shl    edx,0x8
    650159ba:	xor    edx,eax
    650159bc:	movzx  eax,cl
    650159bf:	mov    ecx,DWORD PTR [r12-0x8]
    650159c4:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    650159cd:	shl    edx,0x8
    650159d0:	xor    edx,eax
    650159d2:	mov    eax,DWORD PTR [r12-0xc]
    650159d7:	xor    edx,DWORD PTR [r12-0x10]
    650159dc:	xor    eax,edx
    650159de:	mov    DWORD PTR [r12+0x10],edx
    650159e3:	xor    ecx,eax
    650159e5:	mov    DWORD PTR [r12+0x14],eax
    650159ea:	xor    r9d,ecx
    650159ed:	cmp    r10,r11
    650159f0:	mov    DWORD PTR [r12+0x18],ecx
    650159f5:	mov    DWORD PTR [r12+0x1c],r9d
    650159fa:	jl     0x65015900
    65015a00:	jmp    0x65015ed1
    65015a05:	mov    QWORD PTR [rsp+0x50],rbp
    65015a0a:	mov    QWORD PTR [rsp+0x20],r15
    65015a0f:	lea    r13,[rip+0x2f0f6]        # 0x65044b0c
    65015a16:	lea    r15,[rip+0x2f10f]        # 0x65044b2c
    65015a1d:	data16 xchg ax,ax
    65015a20:	mov    edx,DWORD PTR [r12+0x14]
    65015a25:	mov    r8d,DWORD PTR [r12+0x4]
    65015a2a:	mov    edi,DWORD PTR [r12+0x8]
    65015a2f:	mov    esi,DWORD PTR [r12+0xc]
    65015a34:	mov    r9d,DWORD PTR [r12+0x10]
    65015a39:	movzx  eax,dl
    65015a3c:	movzx  r10d,BYTE PTR [rax+r14*1+0x44b30]
    65015a45:	movzx  eax,BYTE PTR [r12+0x17]
    65015a4b:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015a54:	shl    r10d,0x8
    65015a58:	xor    r10d,eax
    65015a5b:	movzx  eax,BYTE PTR [r12+0x16]
    65015a61:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015a6a:	shl    r10d,0x8
    65015a6e:	xor    r10d,eax
    65015a71:	movzx  eax,BYTE PTR [r12+0x15]
    65015a77:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015a80:	shl    r10d,0x8
    65015a84:	xor    r10d,eax
    65015a87:	xor    r10d,DWORD PTR [r13-0x4]
    65015a8b:	xor    r10d,DWORD PTR [r12]
    65015a8f:	mov    DWORD PTR [r12+0x18],r10d
    65015a94:	xor    r8d,r10d
    65015a97:	mov    DWORD PTR [r12+0x1c],r8d
    65015a9c:	xor    edi,r8d
    65015a9f:	mov    DWORD PTR [r12+0x20],edi
    65015aa4:	xor    esi,edi
    65015aa6:	mov    DWORD PTR [r12+0x24],esi
    65015aab:	xor    r9d,esi
    65015aae:	mov    DWORD PTR [r12+0x28],r9d
    65015ab3:	xor    edx,r9d
    65015ab6:	mov    DWORD PTR [r12+0x2c],edx
    65015abb:	movzx  eax,dl
    65015abe:	movzx  r11d,BYTE PTR [rax+r14*1+0x44b30]
    65015ac7:	movzx  eax,BYTE PTR [r12+0x2f]
    65015acd:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015ad6:	shl    r11d,0x8
    65015ada:	xor    r11d,eax
    65015add:	movzx  eax,BYTE PTR [r12+0x2e]
    65015ae3:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015aec:	shl    r11d,0x8
    65015af0:	xor    r11d,eax
    65015af3:	movzx  eax,BYTE PTR [r12+0x2d]
    65015af9:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015b02:	shl    r11d,0x8
    65015b06:	xor    r11d,eax
    65015b09:	xor    r11d,DWORD PTR [r13+0x0]
    65015b0d:	xor    r11d,r10d
    65015b10:	mov    DWORD PTR [r12+0x30],r11d
    65015b15:	mov    r10d,r11d
    65015b18:	xor    r10d,r8d
    65015b1b:	mov    DWORD PTR [r12+0x34],r10d
    65015b20:	xor    edi,r10d
    65015b23:	mov    DWORD PTR [r12+0x38],edi
    65015b28:	xor    esi,edi
    65015b2a:	mov    DWORD PTR [r12+0x3c],esi
    65015b2f:	mov    ebp,esi
    65015b31:	xor    ebp,r9d
    65015b34:	mov    DWORD PTR [r12+0x40],ebp
    65015b39:	xor    edx,ebp
    65015b3b:	mov    DWORD PTR [r12+0x44],edx
    65015b40:	movzx  eax,dl
    65015b43:	movzx  ebx,BYTE PTR [rax+r14*1+0x44b30]
    65015b4c:	movzx  eax,BYTE PTR [r12+0x47]
    65015b52:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015b5b:	shl    ebx,0x8
    65015b5e:	xor    ebx,eax
    65015b60:	movzx  eax,BYTE PTR [r12+0x46]
    65015b66:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015b6f:	shl    ebx,0x8
    65015b72:	xor    ebx,eax
    65015b74:	movzx  eax,BYTE PTR [r12+0x45]
    65015b7a:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015b83:	shl    ebx,0x8
    65015b86:	xor    ebx,eax
    65015b88:	xor    ebx,DWORD PTR [r13+0x4]
    65015b8c:	xor    ebx,r11d
    65015b8f:	mov    r9d,ebx
    65015b92:	mov    DWORD PTR [r12+0x48],ebx
    65015b97:	xor    r9d,r10d
    65015b9a:	mov    DWORD PTR [r12+0x4c],r9d
    65015b9f:	mov    r11d,r9d
    65015ba2:	add    r13,0x10
    65015ba6:	add    r12,0x60
    65015baa:	xor    r11d,edi
    65015bad:	mov    DWORD PTR [r12-0x10],r11d
    65015bb2:	mov    r10d,r11d
    65015bb5:	xor    r10d,esi
    65015bb8:	mov    DWORD PTR [r12-0xc],r10d
    65015bbd:	xor    ebp,r10d
    65015bc0:	xor    edx,ebp
    65015bc2:	mov    DWORD PTR [r12-0x8],ebp
    65015bc7:	mov    r8d,edx
    65015bca:	movzx  eax,dl
    65015bcd:	mov    DWORD PTR [r12-0x4],r8d
    65015bd2:	movzx  edx,BYTE PTR [rax+r14*1+0x44b30]
    65015bdb:	movzx  eax,BYTE PTR [r12-0x1]
    65015be1:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015bea:	shl    edx,0x8
    65015bed:	xor    edx,eax
    65015bef:	movzx  eax,BYTE PTR [r12-0x2]
    65015bf5:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015bfe:	shl    edx,0x8
    65015c01:	xor    edx,eax
    65015c03:	movzx  eax,BYTE PTR [r12-0x3]
    65015c09:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015c12:	shl    edx,0x8
    65015c15:	xor    edx,eax
    65015c17:	xor    edx,DWORD PTR [r13-0x8]
    65015c1b:	xor    edx,ebx
    65015c1d:	mov    DWORD PTR [r12],edx
    65015c21:	xor    edx,r9d
    65015c24:	xor    r11d,edx
    65015c27:	mov    DWORD PTR [r12+0x4],edx
    65015c2c:	xor    r10d,r11d
    65015c2f:	mov    DWORD PTR [r12+0x8],r11d
    65015c34:	xor    ebp,r10d
    65015c37:	mov    DWORD PTR [r12+0xc],r10d
    65015c3c:	xor    r8d,ebp
    65015c3f:	cmp    r13,r15
    65015c42:	mov    DWORD PTR [r12+0x10],ebp
    65015c47:	mov    DWORD PTR [r12+0x14],r8d
    65015c4c:	jl     0x65015a20
    65015c52:	mov    r15,QWORD PTR [rsp+0x20]
    65015c57:	mov    rbp,QWORD PTR [rsp+0x50]
    65015c5c:	jmp    0x65015ed1
    65015c61:	lea    r13,[rip+0x2eea4]        # 0x65044b0c
    65015c68:	lea    rsi,[rip+0x2eec5]        # 0x65044b34
    65015c6f:	nop
    65015c70:	mov    edx,DWORD PTR [r12+0xc]
    65015c75:	mov    r8d,DWORD PTR [r12+0x4]
    65015c7a:	mov    r9d,DWORD PTR [r12+0x8]
    65015c7f:	movzx  eax,dl
    65015c82:	movzx  r10d,BYTE PTR [rax+r14*1+0x44b30]
    65015c8b:	movzx  eax,BYTE PTR [r12+0xf]
    65015c91:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015c9a:	shl    r10d,0x8
    65015c9e:	xor    r10d,eax
    65015ca1:	movzx  eax,BYTE PTR [r12+0xe]
    65015ca7:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015cb0:	shl    r10d,0x8
    65015cb4:	xor    r10d,eax
    65015cb7:	movzx  eax,BYTE PTR [r12+0xd]
    65015cbd:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015cc6:	shl    r10d,0x8
    65015cca:	xor    r10d,eax
    65015ccd:	xor    r10d,DWORD PTR [r13-0x4]
    65015cd1:	xor    r10d,DWORD PTR [r12]
    65015cd5:	mov    DWORD PTR [r12+0x10],r10d
    65015cda:	xor    r8d,r10d
    65015cdd:	mov    DWORD PTR [r12+0x14],r8d
    65015ce2:	xor    r9d,r8d
    65015ce5:	mov    DWORD PTR [r12+0x18],r9d
    65015cea:	xor    edx,r9d
    65015ced:	mov    DWORD PTR [r12+0x1c],edx
    65015cf2:	movzx  eax,dl
    65015cf5:	movzx  r11d,BYTE PTR [rax+r14*1+0x44b30]
    65015cfe:	movzx  eax,BYTE PTR [r12+0x1f]
    65015d04:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015d0d:	shl    r11d,0x8
    65015d11:	xor    r11d,eax
    65015d14:	movzx  eax,BYTE PTR [r12+0x1e]
    65015d1a:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015d23:	shl    r11d,0x8
    65015d27:	xor    r11d,eax
    65015d2a:	movzx  eax,BYTE PTR [r12+0x1d]
    65015d30:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015d39:	shl    r11d,0x8
    65015d3d:	xor    r11d,eax
    65015d40:	xor    r11d,r10d
    65015d43:	xor    r11d,DWORD PTR [r13+0x0]
    65015d47:	mov    DWORD PTR [r12+0x20],r11d
    65015d4c:	mov    r10d,r11d
    65015d4f:	xor    r10d,r8d
    65015d52:	mov    DWORD PTR [r12+0x24],r10d
    65015d57:	mov    r8d,r10d
    65015d5a:	xor    r8d,r9d
    65015d5d:	mov    DWORD PTR [r12+0x28],r8d
    65015d62:	mov    eax,r8d
    65015d65:	xor    eax,edx
    65015d67:	mov    edx,eax
    65015d69:	movzx  eax,al
    65015d6c:	mov    DWORD PTR [r12+0x2c],edx
    65015d71:	movzx  ebx,BYTE PTR [rax+r14*1+0x44b30]
    65015d7a:	movzx  eax,BYTE PTR [r12+0x2f]
    65015d80:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015d89:	shl    ebx,0x8
    65015d8c:	xor    ebx,eax
    65015d8e:	movzx  eax,BYTE PTR [r12+0x2e]
    65015d94:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015d9d:	shl    ebx,0x8
    65015da0:	xor    ebx,eax
    65015da2:	movzx  eax,BYTE PTR [r12+0x2d]
    65015da8:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015db1:	shl    ebx,0x8
    65015db4:	xor    ebx,eax
    65015db6:	xor    ebx,DWORD PTR [r13+0x4]
    65015dba:	xor    ebx,r11d
    65015dbd:	mov    r9d,ebx
    65015dc0:	mov    DWORD PTR [r12+0x30],ebx
    65015dc5:	xor    r9d,r10d
    65015dc8:	mov    r10d,r9d
    65015dcb:	mov    DWORD PTR [r12+0x34],r9d
    65015dd0:	xor    r10d,r8d
    65015dd3:	xor    edx,r10d
    65015dd6:	mov    DWORD PTR [r12+0x38],r10d
    65015ddb:	movzx  eax,dl
    65015dde:	mov    DWORD PTR [r12+0x3c],edx
    65015de3:	movzx  edi,BYTE PTR [rax+r14*1+0x44b30]
    65015dec:	shl    edi,0x8
    65015def:	movzx  eax,BYTE PTR [r12+0x3f]
    65015df5:	add    r13,0x14
    65015df9:	add    r12,0x50
    65015dfd:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015e06:	xor    edi,eax
    65015e08:	movzx  eax,BYTE PTR [r12-0x12]
    65015e0e:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015e17:	shl    edi,0x8
    65015e1a:	xor    edi,eax
    65015e1c:	movzx  eax,BYTE PTR [r12-0x13]
    65015e22:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015e2b:	shl    edi,0x8
    65015e2e:	xor    edi,eax
    65015e30:	xor    edi,DWORD PTR [r13-0xc]
    65015e34:	xor    edi,ebx
    65015e36:	mov    DWORD PTR [r12-0x10],edi
    65015e3b:	mov    r11d,edi
    65015e3e:	xor    r11d,r9d
    65015e41:	mov    DWORD PTR [r12-0xc],r11d
    65015e46:	mov    r9d,r11d
    65015e49:	xor    r9d,r10d
    65015e4c:	mov    DWORD PTR [r12-0x8],r9d
    65015e51:	mov    eax,r9d
    65015e54:	xor    eax,edx
    65015e56:	mov    r8d,eax
    65015e59:	movzx  eax,al
    65015e5c:	mov    DWORD PTR [r12-0x4],r8d
    65015e61:	movzx  edx,BYTE PTR [rax+r14*1+0x44b30]
    65015e6a:	movzx  eax,BYTE PTR [r12-0x1]
    65015e70:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015e79:	shl    edx,0x8
    65015e7c:	xor    edx,eax
    65015e7e:	movzx  eax,BYTE PTR [r12-0x2]
    65015e84:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015e8d:	shl    edx,0x8
    65015e90:	xor    edx,eax
    65015e92:	movzx  eax,BYTE PTR [r12-0x3]
    65015e98:	movzx  eax,BYTE PTR [rax+r14*1+0x44b30]
    65015ea1:	shl    edx,0x8
    65015ea4:	xor    edx,eax
    65015ea6:	xor    edx,DWORD PTR [r13-0x8]
    65015eaa:	xor    edx,edi
    65015eac:	mov    DWORD PTR [r12],edx
    65015eb0:	xor    edx,r11d
    65015eb3:	mov    DWORD PTR [r12+0x4],edx
    65015eb8:	xor    edx,r9d
    65015ebb:	mov    DWORD PTR [r12+0x8],edx
    65015ec0:	xor    edx,r8d
    65015ec3:	cmp    r13,rsi
    65015ec6:	mov    DWORD PTR [r12+0xc],edx
    65015ecb:	jl     0x65015c70
    65015ed1:	mov    r13,QWORD PTR [rsp+0x28]
    65015ed6:	mov    rdi,QWORD PTR [rsp+0x60]
    65015edb:	mov    rsi,QWORD PTR [rsp+0x58]
    65015ee0:	add    rsp,0x30
    65015ee4:	pop    r14
    65015ee6:	pop    r12
    65015ee8:	pop    rbx
    65015ee9:	ret    
    65015eea:	int3   
    65015eeb:	int3   
    65015eec:	int3   
    65015eed:	int3   
    65015eee:	int3   
    65015eef:	int3   
    65015ef0:	mov    QWORD PTR [rsp+0x8],rbx
    65015ef5:	push   rdi
    65015ef6:	sub    rsp,0x140
    65015efd:	lea    rdi,[rcx+0x10]
    65015f01:	mov    rbx,rcx
    65015f04:	mov    DWORD PTR [rcx],0xa
    65015f0a:	mov    QWORD PTR [rcx+0x8],rdi
    65015f0e:	lea    rdx,[rip+0x2da43]        # 0x65043958
    65015f15:	lea    rcx,[rsp+0x20]
    65015f1a:	mov    r8d,0x80
    65015f20:	call   0x65015830
    65015f25:	mov    rax,QWORD PTR [rsp+0x28]
    65015f2a:	mov    r11d,DWORD PTR [rsp+0x20]
    65015f2f:	shl    r11d,0x2
    65015f33:	add    rdi,0x10
    65015f37:	movsxd rdx,r11d
    65015f3a:	lea    r9,[rax+rdx*4]
    65015f3e:	sub    r9,0x10
    65015f42:	mov    eax,DWORD PTR [r9+0x10]
    65015f46:	mov    DWORD PTR [rdi-0x10],eax
    65015f49:	mov    eax,DWORD PTR [r9+0x14]
    65015f4d:	mov    DWORD PTR [rdi-0xc],eax
    65015f50:	mov    eax,DWORD PTR [r9+0x18]
    65015f54:	mov    DWORD PTR [rdi-0x8],eax
    65015f57:	mov    eax,DWORD PTR [r9+0x1c]
    65015f5b:	mov    DWORD PTR [rdi-0x4],eax
    65015f5e:	mov    r10d,DWORD PTR [rbx]
    65015f61:	sub    r10d,0x1
    65015f65:	test   r10d,r10d
    65015f68:	jle    0x65016104
    65015f6e:	lea    r11,[rip+0xfffffffffffea08b]        # 0x65000000
    65015f75:	data16 data16 xchg ax,ax
    65015f79:	data16 xchg ax,ax
    65015f7c:	data16 data16 xchg ax,ax
    65015f80:	movzx  eax,BYTE PTR [r9]
    65015f84:	sub    r10d,0x1
    65015f88:	add    rdi,0x10
    65015f8c:	movzx  edx,BYTE PTR [rax+r11*1+0x44b30]
    65015f95:	movzx  eax,BYTE PTR [r9+0x3]
    65015f9a:	sub    r9,0x10
    65015f9e:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    65015fa7:	mov    r8d,DWORD PTR [r11+rdx*4+0x45830]
    65015faf:	movzx  eax,BYTE PTR [r9+0x12]
    65015fb4:	xor    r8d,DWORD PTR [r11+rcx*4+0x44c30]
    65015fbc:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    65015fc5:	movzx  eax,BYTE PTR [r9+0x11]
    65015fca:	xor    r8d,DWORD PTR [r11+rcx*4+0x45030]
    65015fd2:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    65015fdb:	xor    r8d,DWORD PTR [r11+rcx*4+0x45430]
    65015fe3:	mov    DWORD PTR [rdi-0x10],r8d
    65015fe7:	movzx  eax,BYTE PTR [r9+0x14]
    65015fec:	movzx  edx,BYTE PTR [rax+r11*1+0x44b30]
    65015ff5:	movzx  eax,BYTE PTR [r9+0x17]
    65015ffa:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    65016003:	movzx  eax,BYTE PTR [r9+0x16]
    65016008:	mov    r8d,DWORD PTR [r11+rdx*4+0x45830]
    65016010:	xor    r8d,DWORD PTR [r11+rcx*4+0x44c30]
    65016018:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    65016021:	movzx  eax,BYTE PTR [r9+0x15]
    65016026:	xor    r8d,DWORD PTR [r11+rcx*4+0x45030]
    6501602e:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    65016037:	xor    r8d,DWORD PTR [r11+rcx*4+0x45430]
    6501603f:	mov    DWORD PTR [rdi-0xc],r8d
    65016043:	movzx  eax,BYTE PTR [r9+0x18]
    65016048:	movzx  edx,BYTE PTR [rax+r11*1+0x44b30]
    65016051:	movzx  eax,BYTE PTR [r9+0x1b]
    65016056:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    6501605f:	movzx  eax,BYTE PTR [r9+0x1a]
    65016064:	mov    r8d,DWORD PTR [r11+rdx*4+0x45830]
    6501606c:	xor    r8d,DWORD PTR [r11+rcx*4+0x44c30]
    65016074:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    6501607d:	movzx  eax,BYTE PTR [r9+0x19]
    65016082:	xor    r8d,DWORD PTR [r11+rcx*4+0x45030]
    6501608a:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    65016093:	xor    r8d,DWORD PTR [r11+rcx*4+0x45430]
    6501609b:	mov    DWORD PTR [rdi-0x8],r8d
    6501609f:	movzx  eax,BYTE PTR [r9+0x1c]
    650160a4:	movzx  edx,BYTE PTR [rax+r11*1+0x44b30]
    650160ad:	movzx  eax,BYTE PTR [r9+0x1f]
    650160b2:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    650160bb:	movzx  eax,BYTE PTR [r9+0x1e]
    650160c0:	mov    r8d,DWORD PTR [r11+rdx*4+0x45830]
    650160c8:	xor    r8d,DWORD PTR [r11+rcx*4+0x44c30]
    650160d0:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    650160d9:	movzx  eax,BYTE PTR [r9+0x1d]
    650160de:	xor    r8d,DWORD PTR [r11+rcx*4+0x45030]
    650160e6:	movzx  ecx,BYTE PTR [rax+r11*1+0x44b30]
    650160ef:	xor    r8d,DWORD PTR [r11+rcx*4+0x45430]
    650160f7:	test   r10d,r10d
    650160fa:	mov    DWORD PTR [rdi-0x4],r8d
    650160fe:	jg     0x65015f80
    65016104:	mov    eax,DWORD PTR [r9]
    65016107:	mov    rbx,QWORD PTR [rsp+0x150]
    6501610f:	mov    DWORD PTR [rdi],eax
    65016111:	mov    eax,DWORD PTR [r9+0x4]
    65016115:	mov    DWORD PTR [rdi+0x4],eax
    65016118:	mov    eax,DWORD PTR [r9+0x8]
    6501611c:	mov    DWORD PTR [rdi+0x8],eax
    6501611f:	mov    eax,DWORD PTR [r9+0xc]
    65016123:	mov    DWORD PTR [rdi+0xc],eax
    65016126:	add    rsp,0x140
    6501612d:	pop    rdi
    6501612e:	ret    
    6501612f:	int3   
    65016130:	mov    QWORD PTR [rsp+0x8],rbx
    65016135:	mov    QWORD PTR [rsp+0x18],rbp
    6501613a:	mov    QWORD PTR [rsp+0x20],r9
    6501613f:	push   rsi
    65016140:	push   rdi
    65016141:	push   r12
    65016143:	push   r13
    65016145:	push   r14
    65016147:	push   r15
    65016149:	mov    rbp,QWORD PTR [rcx+0x8]
    6501614d:	movzx  eax,BYTE PTR [r8+0x2]
    65016152:	movzx  ebx,BYTE PTR [r8+0x3]
    65016157:	movzx  r13d,BYTE PTR [r8+0x7]
    6501615c:	movzx  r14d,BYTE PTR [r8+0xb]
    65016161:	shl    ebx,0x8
    65016164:	or     ebx,eax
    65016166:	movzx  eax,BYTE PTR [r8+0x1]
    6501616b:	shl    r13d,0x8
    6501616f:	mov    r15,r9
    65016172:	movzx  r9d,BYTE PTR [r8+0xf]
    65016177:	shl    r14d,0x8
    6501617b:	shl    r9d,0x8
    6501617f:	shl    ebx,0x8
    65016182:	add    rbp,0x10
    65016186:	or     ebx,eax
    65016188:	movzx  eax,BYTE PTR [r8]
    6501618c:	lea    r12,[rip+0xfffffffffffe9e6d]        # 0x65000000
    65016193:	shl    ebx,0x8
    65016196:	or     ebx,eax
    65016198:	movzx  eax,BYTE PTR [r8+0x6]
    6501619d:	xor    ebx,DWORD PTR [rbp-0x10]
    650161a0:	or     r13d,eax
    650161a3:	movzx  eax,BYTE PTR [r8+0x5]
    650161a8:	shl    r13d,0x8
    650161ac:	or     r13d,eax
    650161af:	movzx  eax,BYTE PTR [r8+0x4]
    650161b4:	shl    r13d,0x8
    650161b8:	or     r13d,eax
    650161bb:	movzx  eax,BYTE PTR [r8+0xa]
    650161c0:	xor    r13d,DWORD PTR [rbp-0xc]
    650161c4:	or     r14d,eax
    650161c7:	movzx  eax,BYTE PTR [r8+0x9]
    650161cc:	shl    r14d,0x8
    650161d0:	or     r14d,eax
    650161d3:	movzx  eax,BYTE PTR [r8+0x8]
    650161d8:	shl    r14d,0x8
    650161dc:	or     r14d,eax
    650161df:	movzx  eax,BYTE PTR [r8+0xe]
    650161e4:	xor    r14d,DWORD PTR [rbp-0x8]
    650161e8:	or     r9d,eax
    650161eb:	movzx  eax,BYTE PTR [r8+0xd]
    650161f0:	shl    r9d,0x8
    650161f4:	or     r9d,eax
    650161f7:	movzx  eax,BYTE PTR [r8+0xc]
    650161fc:	shl    r9d,0x8
    65016200:	or     r9d,eax
    65016203:	mov    eax,DWORD PTR [rcx]
    65016205:	xor    r9d,DWORD PTR [rbp-0x4]
    65016209:	sar    eax,1
    6501620b:	sub    eax,0x1
    6501620e:	test   edx,edx
    65016210:	jne    0x650166b4
    65016216:	test   eax,eax
    65016218:	jle    0x65016454
    6501621e:	mov    r15d,eax
    65016221:	mov    edi,ebx
    65016223:	mov    esi,r9d
    65016226:	mov    eax,r14d
    65016229:	shr    rax,0x10
    6501622d:	mov    r10d,r13d
    65016230:	mov    r11d,r14d
    65016233:	movzx  edx,al
    65016236:	mov    eax,r9d
    65016239:	shr    r10,0x10
    6501623d:	mov    ebx,DWORD PTR [r12+rdx*4+0x45030]
    65016245:	shr    rax,0x8
    65016249:	shr    r11,0x8
    6501624d:	movzx  ecx,al
    65016250:	mov    eax,r13d
    65016253:	xor    ebx,DWORD PTR [r12+rcx*4+0x45430]
    6501625b:	shr    rax,0x18
    6501625f:	xor    ebx,DWORD PTR [r12+rax*4+0x44c30]
    65016267:	movzx  eax,dil
    6501626b:	xor    ebx,DWORD PTR [r12+rax*4+0x45830]
    65016273:	mov    rax,rdi
    65016276:	xor    ebx,DWORD PTR [rbp+0x0]
    65016279:	shr    rax,0x8
    6501627d:	movzx  edx,al
    65016280:	mov    eax,r9d
    65016283:	mov    r9d,DWORD PTR [r12+rdx*4+0x45430]
    6501628b:	shr    rax,0x10
    6501628f:	movzx  ecx,al
    65016292:	mov    eax,r14d
    65016295:	xor    r9d,DWORD PTR [r12+rcx*4+0x45030]
    6501629d:	shr    rax,0x18
    650162a1:	xor    r9d,DWORD PTR [r12+rax*4+0x44c30]
    650162a9:	movzx  eax,r13b
    650162ad:	xor    r9d,DWORD PTR [r12+rax*4+0x45830]
    650162b5:	mov    eax,r13d
    650162b8:	xor    r9d,DWORD PTR [rbp+0x4]
    650162bc:	shr    rax,0x8
    650162c0:	movzx  edx,al
    650162c3:	mov    rax,rdi
    650162c6:	shr    rdi,0x18
    650162ca:	mov    r8d,DWORD PTR [r12+rdx*4+0x45430]
    650162d2:	shr    rax,0x10
    650162d6:	movzx  ecx,al
    650162d9:	mov    rax,rsi
    650162dc:	xor    r8d,DWORD PTR [r12+rcx*4+0x45030]
    650162e4:	shr    rax,0x18
    650162e8:	movzx  ecx,r10b
    650162ec:	xor    r8d,DWORD PTR [r12+rax*4+0x44c30]
    650162f4:	mov    edx,DWORD PTR [r12+rcx*4+0x45030]
    650162fc:	movzx  eax,r14b
    65016300:	xor    r8d,DWORD PTR [r12+rax*4+0x45830]
    65016308:	movzx  eax,r11b
    6501630c:	mov    r11d,ebx
    6501630f:	xor    edx,DWORD PTR [r12+rax*4+0x45430]
    65016317:	xor    r8d,DWORD PTR [rbp+0x8]
    6501631b:	movzx  eax,sil
    6501631f:	xor    edx,DWORD PTR [r12+rdi*4+0x44c30]
    65016327:	mov    r10d,r8d
    6501632a:	mov    r8d,r9d
    6501632d:	xor    edx,DWORD PTR [r12+rax*4+0x45830]
    65016335:	mov    rax,r10
    65016338:	xor    edx,DWORD PTR [rbp+0xc]
    6501633b:	shr    rax,0x10
    6501633f:	mov    edi,edx
    65016341:	movzx  edx,al
    65016344:	mov    ebx,DWORD PTR [r12+rdx*4+0x45030]
    6501634c:	mov    rax,rdi
    6501634f:	shr    rax,0x8
    65016353:	movzx  ecx,al
    65016356:	mov    eax,r9d
    65016359:	xor    ebx,DWORD PTR [r12+rcx*4+0x45430]
    65016361:	shr    rax,0x18
    65016365:	xor    ebx,DWORD PTR [r12+rax*4+0x44c30]
    6501636d:	movzx  eax,r11b
    65016371:	xor    ebx,DWORD PTR [r12+rax*4+0x45830]
    65016379:	mov    rax,r11
    6501637c:	xor    ebx,DWORD PTR [rbp+0x10]
    6501637f:	shr    rax,0x8
    65016383:	movzx  edx,al
    65016386:	mov    rax,rdi
    65016389:	shr    rax,0x10
    6501638d:	movzx  ecx,al
    65016390:	mov    r13d,DWORD PTR [r12+rdx*4+0x45430]
    65016398:	mov    rax,r10
    6501639b:	shr    r8,0x10
    6501639f:	xor    r13d,DWORD PTR [r12+rcx*4+0x45030]
    650163a7:	shr    rax,0x18
    650163ab:	sub    r15d,0x1
    650163af:	xor    r13d,DWORD PTR [r12+rax*4+0x44c30]
    650163b7:	movzx  eax,r9b
    650163bb:	add    rbp,0x20
    650163bf:	xor    r13d,DWORD PTR [r12+rax*4+0x45830]
    650163c7:	mov    eax,r9d
    650163ca:	xor    r13d,DWORD PTR [rbp-0xc]
    650163ce:	shr    rax,0x8
    650163d2:	movzx  edx,al
    650163d5:	mov    rax,r11
    650163d8:	shr    r11,0x18
    650163dc:	mov    r14d,DWORD PTR [r12+rdx*4+0x45430]
    650163e4:	shr    rax,0x10
    650163e8:	movzx  ecx,al
    650163eb:	mov    rax,rdi
    650163ee:	xor    r14d,DWORD PTR [r12+rcx*4+0x45030]
    650163f6:	shr    rax,0x18
    650163fa:	movzx  ecx,r8b
    650163fe:	xor    r14d,DWORD PTR [r12+rax*4+0x44c30]
    65016406:	mov    r9d,DWORD PTR [r12+rcx*4+0x45030]
    6501640e:	movzx  eax,r10b
    65016412:	xor    r14d,DWORD PTR [r12+rax*4+0x45830]
    6501641a:	shr    r10,0x8
    6501641e:	xor    r14d,DWORD PTR [rbp-0x8]
    65016422:	movzx  eax,r10b
    65016426:	xor    r9d,DWORD PTR [r12+rax*4+0x45430]
    6501642e:	movzx  eax,dil
    65016432:	xor    r9d,DWORD PTR [r12+r11*4+0x44c30]
    6501643a:	xor    r9d,DWORD PTR [r12+rax*4+0x45830]
    65016442:	xor    r9d,DWORD PTR [rbp-0x4]
    65016446:	test   r15d,r15d
    65016449:	jg     0x65016221
    6501644f:	mov    r15,QWORD PTR [rsp+0x50]
    65016454:	mov    esi,r9d
    65016457:	mov    eax,r14d
    6501645a:	mov    r10d,r13d
    6501645d:	shr    rax,0x10
    65016461:	shr    r10,0x10
    65016465:	mov    r11d,r14d
    65016468:	movzx  edx,al
    6501646b:	mov    eax,r9d
    6501646e:	shr    r11,0x8
    65016472:	mov    edi,DWORD PTR [r12+rdx*4+0x45030]
    6501647a:	shr    rax,0x8
    6501647e:	movzx  ecx,al
    65016481:	mov    eax,r13d
    65016484:	xor    edi,DWORD PTR [r12+rcx*4+0x45430]
    6501648c:	shr    rax,0x18
    65016490:	xor    edi,DWORD PTR [r12+rax*4+0x44c30]
    65016498:	movzx  eax,bl
    6501649b:	xor    edi,DWORD PTR [r12+rax*4+0x45830]
    650164a3:	mov    rax,rbx
    650164a6:	xor    edi,DWORD PTR [rbp+0x0]
    650164a9:	shr    rax,0x8
    650164ad:	movzx  edx,al
    650164b0:	mov    eax,r9d
    650164b3:	mov    r9d,DWORD PTR [r12+rdx*4+0x45430]
    650164bb:	shr    rax,0x10
    650164bf:	movzx  ecx,al
    650164c2:	mov    eax,r14d
    650164c5:	xor    r9d,DWORD PTR [r12+rcx*4+0x45030]
    650164cd:	shr    rax,0x18
    650164d1:	xor    r9d,DWORD PTR [r12+rax*4+0x44c30]
    650164d9:	movzx  eax,r13b
    650164dd:	xor    r9d,DWORD PTR [r12+rax*4+0x45830]
    650164e5:	mov    eax,r13d
    650164e8:	xor    r9d,DWORD PTR [rbp+0x4]
    650164ec:	shr    rax,0x8
    650164f0:	movzx  edx,al
    650164f3:	mov    rax,rbx
    650164f6:	shr    rbx,0x18
    650164fa:	mov    r8d,DWORD PTR [r12+rdx*4+0x45430]
    65016502:	shr    rax,0x10
    65016506:	movzx  ecx,al
    65016509:	mov    rax,rsi
    6501650c:	xor    r8d,DWORD PTR [r12+rcx*4+0x45030]
    65016514:	shr    rax,0x18
    65016518:	movzx  ecx,r10b
    6501651c:	xor    r8d,DWORD PTR [r12+rax*4+0x44c30]
    65016524:	mov    edx,DWORD PTR [r12+rcx*4+0x45030]
    6501652c:	movzx  eax,r14b
    65016530:	xor    r8d,DWORD PTR [r12+rax*4+0x45830]
    65016538:	movzx  eax,r11b
    6501653c:	xor    edx,DWORD PTR [r12+rax*4+0x45430]
    65016544:	xor    r8d,DWORD PTR [rbp+0x8]
    65016548:	movzx  eax,sil
    6501654c:	xor    edx,DWORD PTR [r12+rbx*4+0x44c30]
    65016554:	mov    r10d,r8d
    65016557:	mov    r8d,r9d
    6501655a:	xor    edx,DWORD PTR [r12+rax*4+0x45830]
    65016562:	mov    rax,r8
    65016565:	xor    edx,DWORD PTR [rbp+0xc]
    65016568:	shr    rax,0x18
    6501656c:	movzx  ebx,BYTE PTR [rax+r12*1+0x46c30]
    65016575:	mov    r9d,edx
    65016578:	mov    rax,r10
    6501657b:	shr    rax,0x10
    6501657f:	shl    ebx,0x8
    65016582:	mov    edx,edi
    65016584:	movzx  ecx,al
    65016587:	movzx  eax,BYTE PTR [rcx+r12*1+0x46c30]
    65016590:	xor    ebx,eax
    65016592:	mov    rax,r9
    65016595:	shr    rax,0x8
    65016599:	shl    ebx,0x8
    6501659c:	movzx  ecx,al
    6501659f:	movzx  eax,BYTE PTR [rcx+r12*1+0x46c30]
    650165a8:	xor    ebx,eax
    650165aa:	movzx  eax,dil
    650165ae:	movzx  eax,BYTE PTR [rax+r12*1+0x46c30]
    650165b7:	shl    ebx,0x8
    650165ba:	xor    ebx,eax
    650165bc:	mov    rax,r9
    650165bf:	xor    ebx,DWORD PTR [rbp+0x10]
    650165c2:	shr    rax,0x10
    650165c6:	movzx  ecx,al
    650165c9:	mov    rax,r10
    650165cc:	movzx  edi,BYTE PTR [rcx+r12*1+0x46c30]
    650165d5:	shr    rax,0x18
    650165d9:	movzx  eax,BYTE PTR [rax+r12*1+0x46c30]
    650165e2:	shl    eax,0x8
    650165e5:	xor    edi,eax
    650165e7:	mov    rax,rdx
    650165ea:	shr    rax,0x8
    650165ee:	shl    edi,0x8
    650165f1:	movzx  ecx,al
    650165f4:	movzx  eax,BYTE PTR [rcx+r12*1+0x46c30]
    650165fd:	xor    edi,eax
    650165ff:	movzx  eax,r8b
    65016603:	movzx  eax,BYTE PTR [rax+r12*1+0x46c30]
    6501660c:	shl    edi,0x8
    6501660f:	xor    edi,eax
    65016611:	mov    rax,rdx
    65016614:	shr    rdx,0x18
    65016618:	xor    edi,DWORD PTR [rbp+0x14]
    6501661b:	shr    rax,0x10
    6501661f:	movzx  ecx,al
    65016622:	mov    rax,r9
    65016625:	movzx  esi,BYTE PTR [rcx+r12*1+0x46c30]
    6501662e:	shr    rax,0x18
    65016632:	movzx  eax,BYTE PTR [rax+r12*1+0x46c30]
    6501663b:	shl    eax,0x8
    6501663e:	xor    esi,eax
    65016640:	mov    rax,r8
    65016643:	shr    r8,0x10
    65016647:	shr    rax,0x8
    6501664b:	shl    esi,0x8
    6501664e:	movzx  ecx,al
    65016651:	movzx  eax,BYTE PTR [rcx+r12*1+0x46c30]
    6501665a:	xor    esi,eax
    6501665c:	movzx  eax,r10b
    65016660:	shr    r10,0x8
    65016664:	movzx  eax,BYTE PTR [rax+r12*1+0x46c30]
    6501666d:	shl    esi,0x8
    65016670:	xor    esi,eax
    65016672:	movzx  eax,r8b
    65016676:	movzx  r13d,BYTE PTR [rax+r12*1+0x46c30]
    6501667f:	movzx  eax,BYTE PTR [rdx+r12*1+0x46c30]
    65016688:	shl    eax,0x8
    6501668b:	xor    r13d,eax
    6501668e:	movzx  eax,r10b
    65016692:	movzx  eax,BYTE PTR [rax+r12*1+0x46c30]
    6501669b:	shl    r13d,0x8
    6501669f:	xor    r13d,eax
    650166a2:	movzx  eax,r9b
    650166a6:	movzx  eax,BYTE PTR [rax+r12*1+0x46c30]
    650166af:	jmp    0x65016b4b
    650166b4:	test   eax,eax
    650166b6:	jle    0x650168f0
    650166bc:	mov    r15d,eax
    650166bf:	nop
    650166c0:	mov    r11d,ebx
    650166c3:	mov    ebx,r9d
    650166c6:	mov    eax,r13d
    650166c9:	shr    rax,0x8
    650166cd:	mov    r10d,r13d
    650166d0:	mov    esi,r14d
    650166d3:	movzx  edx,al
    650166d6:	shr    r10,0x10
    650166da:	mov    eax,r14d
    650166dd:	mov    edi,DWORD PTR [r12+rdx*4+0x46430]
    650166e5:	shr    rax,0x10
    650166e9:	shr    rsi,0x18
    650166ed:	movzx  ecx,al
    650166f0:	mov    eax,r9d
    650166f3:	xor    edi,DWORD PTR [r12+rcx*4+0x46030]
    650166fb:	shr    rax,0x18
    650166ff:	xor    edi,DWORD PTR [r12+rax*4+0x45c30]
    65016707:	movzx  eax,r11b
    6501670b:	xor    edi,DWORD PTR [r12+rax*4+0x46830]
    65016713:	mov    eax,r14d
    65016716:	xor    edi,DWORD PTR [rbp+0x0]
    65016719:	shr    rax,0x8
    6501671d:	movzx  edx,al
    65016720:	mov    eax,r9d
    65016723:	mov    r9d,DWORD PTR [r12+rdx*4+0x46430]
    6501672b:	shr    rax,0x10
    6501672f:	movzx  ecx,al
    65016732:	mov    rax,r11
    65016735:	xor    r9d,DWORD PTR [r12+rcx*4+0x46030]
    6501673d:	shr    rax,0x18
    65016741:	xor    r9d,DWORD PTR [r12+rax*4+0x45c30]
    65016749:	movzx  eax,r13b
    6501674d:	xor    r9d,DWORD PTR [r12+rax*4+0x46830]
    65016755:	mov    rax,r11
    65016758:	shr    r11,0x8
    6501675c:	xor    r9d,DWORD PTR [rbp+0x4]
    65016760:	shr    rax,0x10
    65016764:	movzx  edx,al
    65016767:	mov    rax,rbx
    6501676a:	mov    r8d,DWORD PTR [r12+rdx*4+0x46030]
    65016772:	shr    rax,0x8
    65016776:	movzx  ecx,al
    65016779:	mov    eax,r13d
    6501677c:	xor    r8d,DWORD PTR [r12+rcx*4+0x46430]
    65016784:	shr    rax,0x18
    65016788:	movzx  ecx,r10b
    6501678c:	xor    r8d,DWORD PTR [r12+rax*4+0x45c30]
    65016794:	mov    r10d,DWORD PTR [r12+rcx*4+0x46030]
    6501679c:	movzx  eax,r14b
    650167a0:	xor    r8d,DWORD PTR [r12+rax*4+0x46830]
    650167a8:	movzx  eax,r11b
    650167ac:	xor    r10d,DWORD PTR [r12+rax*4+0x46430]
    650167b4:	xor    r8d,DWORD PTR [rbp+0x8]
    650167b8:	movzx  eax,bl
    650167bb:	xor    r10d,DWORD PTR [r12+rsi*4+0x45c30]
    650167c3:	mov    r11d,r8d
    650167c6:	mov    r8d,r9d
    650167c9:	xor    r10d,DWORD PTR [r12+rax*4+0x46830]
    650167d1:	mov    rax,r8
    650167d4:	mov    r9d,edi
    650167d7:	xor    r10d,DWORD PTR [rbp+0xc]
    650167db:	shr    rax,0x8
    650167df:	movzx  edx,al
    650167e2:	mov    rax,r11
    650167e5:	mov    ebx,DWORD PTR [r12+rdx*4+0x46430]
    650167ed:	shr    rax,0x10
    650167f1:	movzx  ecx,al
    650167f4:	mov    rax,r10
    650167f7:	xor    ebx,DWORD PTR [r12+rcx*4+0x46030]
    650167ff:	shr    rax,0x18
    65016803:	xor    ebx,DWORD PTR [r12+rax*4+0x45c30]
    6501680b:	movzx  eax,dil
    6501680f:	xor    ebx,DWORD PTR [r12+rax*4+0x46830]
    65016817:	mov    rax,r11
    6501681a:	xor    ebx,DWORD PTR [rbp+0x10]
    6501681d:	shr    rax,0x8
    65016821:	movzx  edx,al
    65016824:	mov    rax,r10
    65016827:	mov    r13d,DWORD PTR [r12+rdx*4+0x46430]
    6501682f:	shr    rax,0x10
    65016833:	movzx  ecx,al
    65016836:	xor    r13d,DWORD PTR [r12+rcx*4+0x46030]
    6501683e:	shr    r9,0x8
    65016842:	mov    eax,edi
    65016844:	shr    rax,0x18
    65016848:	sub    r15d,0x1
    6501684c:	add    rbp,0x20
    65016850:	xor    r13d,DWORD PTR [r12+rax*4+0x45c30]
    65016858:	movzx  eax,r8b
    6501685c:	xor    r13d,DWORD PTR [r12+rax*4+0x46830]
    65016864:	mov    eax,edi
    65016866:	xor    r13d,DWORD PTR [rbp-0xc]
    6501686a:	shr    rax,0x10
    6501686e:	movzx  edx,al
    65016871:	mov    rax,r10
    65016874:	mov    r14d,DWORD PTR [r12+rdx*4+0x46030]
    6501687c:	shr    rax,0x8
    65016880:	movzx  ecx,al
    65016883:	mov    rax,r8
    65016886:	shr    r8,0x10
    6501688a:	xor    r14d,DWORD PTR [r12+rcx*4+0x46430]
    65016892:	shr    rax,0x18
    65016896:	movzx  ecx,r8b
    6501689a:	xor    r14d,DWORD PTR [r12+rax*4+0x45c30]
    650168a2:	movzx  eax,r11b
    650168a6:	shr    r11,0x18
    650168aa:	xor    r14d,DWORD PTR [r12+rax*4+0x46830]
    650168b2:	movzx  eax,r9b
    650168b6:	mov    r9d,DWORD PTR [r12+rcx*4+0x46030]
    650168be:	xor    r9d,DWORD PTR [r12+rax*4+0x46430]
    650168c6:	xor    r14d,DWORD PTR [rbp-0x8]
    650168ca:	movzx  eax,r10b
    650168ce:	xor    r9d,DWORD PTR [r12+r11*4+0x45c30]
    650168d6:	xor    r9d,DWORD PTR [r12+rax*4+0x46830]
    650168de:	xor    r9d,DWORD PTR [rbp-0x4]
    650168e2:	test   r15d,r15d
    650168e5:	jg     0x650166c0
    650168eb:	mov    r15,QWORD PTR [rsp+0x50]
    650168f0:	mov    r11d,ebx
    650168f3:	mov    ebx,r9d
    650168f6:	mov    eax,r13d
    650168f9:	shr    rax,0x8
    650168fd:	mov    r10d,r13d
    65016900:	mov    esi,r14d
    65016903:	movzx  edx,al
    65016906:	mov    eax,r14d
    65016909:	shr    r10,0x10
    6501690d:	mov    edi,DWORD PTR [r12+rdx*4+0x46430]
    65016915:	shr    rax,0x10
    65016919:	shr    rsi,0x18
    6501691d:	movzx  ecx,al
    65016920:	mov    eax,r9d
    65016923:	xor    edi,DWORD PTR [r12+rcx*4+0x46030]
    6501692b:	shr    rax,0x18
    6501692f:	xor    edi,DWORD PTR [r12+rax*4+0x45c30]
    65016937:	movzx  eax,r11b
    6501693b:	xor    edi,DWORD PTR [r12+rax*4+0x46830]
    65016943:	mov    eax,r14d
    65016946:	xor    edi,DWORD PTR [rbp+0x0]
    65016949:	shr    rax,0x8
    6501694d:	movzx  edx,al
    65016950:	mov    eax,r9d
    65016953:	mov    r9d,DWORD PTR [r12+rdx*4+0x46430]
    6501695b:	shr    rax,0x10
    6501695f:	movzx  ecx,al
    65016962:	mov    rax,r11
    65016965:	xor    r9d,DWORD PTR [r12+rcx*4+0x46030]
    6501696d:	shr    rax,0x18
    65016971:	xor    r9d,DWORD PTR [r12+rax*4+0x45c30]
    65016979:	movzx  eax,r13b
    6501697d:	xor    r9d,DWORD PTR [r12+rax*4+0x46830]
    65016985:	mov    rax,r11
    65016988:	shr    r11,0x8
    6501698c:	xor    r9d,DWORD PTR [rbp+0x4]
    65016990:	shr    rax,0x10
    65016994:	movzx  edx,al
    65016997:	mov    rax,rbx
    6501699a:	mov    r8d,DWORD PTR [r12+rdx*4+0x46030]
    650169a2:	shr    rax,0x8
    650169a6:	mov    edx,r9d
    650169a9:	movzx  ecx,al
    650169ac:	mov    eax,r13d
    650169af:	xor    r8d,DWORD PTR [r12+rcx*4+0x46430]
    650169b7:	shr    rax,0x18
    650169bb:	movzx  ecx,r10b
    650169bf:	xor    r8d,DWORD PTR [r12+rax*4+0x45c30]
    650169c7:	movzx  eax,r14b
    650169cb:	xor    r8d,DWORD PTR [r12+rax*4+0x46830]
    650169d3:	movzx  eax,r11b
    650169d7:	mov    r11d,DWORD PTR [r12+rcx*4+0x46030]
    650169df:	xor    r11d,DWORD PTR [r12+rax*4+0x46430]
    650169e7:	xor    r8d,DWORD PTR [rbp+0x8]
    650169eb:	movzx  eax,bl
    650169ee:	xor    r11d,DWORD PTR [r12+rsi*4+0x45c30]
    650169f6:	mov    r10d,r8d
    650169f9:	mov    r8d,edi
    650169fc:	xor    r11d,DWORD PTR [r12+rax*4+0x46830]
    65016a04:	mov    rax,r10
    65016a07:	xor    r11d,DWORD PTR [rbp+0xc]
    65016a0b:	shr    rax,0x10
    65016a0f:	movzx  ecx,al
    65016a12:	mov    rax,r11
    65016a15:	movzx  ebx,BYTE PTR [rcx+r12*1+0x44b30]
    65016a1e:	shr    rax,0x18
    65016a22:	movzx  eax,BYTE PTR [rax+r12*1+0x44b30]
    65016a2b:	shl    eax,0x8
    65016a2e:	xor    ebx,eax
    65016a30:	mov    eax,r9d
    65016a33:	shr    rax,0x8
    65016a37:	shl    ebx,0x8
    65016a3a:	movzx  ecx,al
    65016a3d:	movzx  eax,BYTE PTR [rcx+r12*1+0x44b30]
    65016a46:	xor    ebx,eax
    65016a48:	movzx  eax,dil
    65016a4c:	movzx  eax,BYTE PTR [rax+r12*1+0x44b30]
    65016a55:	shl    ebx,0x8
    65016a58:	xor    ebx,eax
    65016a5a:	mov    eax,edi
    65016a5c:	xor    ebx,DWORD PTR [rbp+0x10]
    65016a5f:	shr    rax,0x18
    65016a63:	shr    rdx,0x10
    65016a67:	movzx  edi,BYTE PTR [rax+r12*1+0x44b30]
    65016a70:	mov    rax,r11
    65016a73:	shr    rax,0x10
    65016a77:	shl    edi,0x8
    65016a7a:	movzx  ecx,al
    65016a7d:	movzx  eax,BYTE PTR [rcx+r12*1+0x44b30]
    65016a86:	xor    edi,eax
    65016a88:	mov    rax,r10
    65016a8b:	shr    rax,0x8
    65016a8f:	shl    edi,0x8
    65016a92:	movzx  ecx,al
    65016a95:	movzx  eax,BYTE PTR [rcx+r12*1+0x44b30]
    65016a9e:	xor    edi,eax
    65016aa0:	movzx  eax,r9b
    65016aa4:	movzx  eax,BYTE PTR [rax+r12*1+0x44b30]
    65016aad:	shl    edi,0x8
    65016ab0:	xor    edi,eax
    65016ab2:	mov    rax,r8
    65016ab5:	shr    r8,0x8
    65016ab9:	xor    edi,DWORD PTR [rbp+0x14]
    65016abc:	shr    rax,0x10
    65016ac0:	movzx  ecx,al
    65016ac3:	mov    eax,r9d
    65016ac6:	movzx  esi,BYTE PTR [rcx+r12*1+0x44b30]
    65016acf:	shr    rax,0x18
    65016ad3:	movzx  eax,BYTE PTR [rax+r12*1+0x44b30]
    65016adc:	shl    eax,0x8
    65016adf:	xor    esi,eax
    65016ae1:	mov    rax,r11
    65016ae4:	shr    rax,0x8
    65016ae8:	shl    esi,0x8
    65016aeb:	movzx  ecx,al
    65016aee:	movzx  eax,BYTE PTR [rcx+r12*1+0x44b30]
    65016af7:	xor    esi,eax
    65016af9:	movzx  eax,r10b
    65016afd:	shr    r10,0x18
    65016b01:	movzx  eax,BYTE PTR [rax+r12*1+0x44b30]
    65016b0a:	shl    esi,0x8
    65016b0d:	xor    esi,eax
    65016b0f:	movzx  eax,dl
    65016b12:	movzx  r13d,BYTE PTR [rax+r12*1+0x44b30]
    65016b1b:	movzx  eax,BYTE PTR [r10+r12*1+0x44b30]
    65016b24:	shl    eax,0x8
    65016b27:	xor    r13d,eax
    65016b2a:	movzx  eax,r8b
    65016b2e:	movzx  eax,BYTE PTR [rax+r12*1+0x44b30]
    65016b37:	shl    r13d,0x8
    65016b3b:	xor    r13d,eax
    65016b3e:	movzx  eax,r11b
    65016b42:	movzx  eax,BYTE PTR [rax+r12*1+0x44b30]
    65016b4b:	xor    esi,DWORD PTR [rbp+0x18]
    65016b4e:	shl    r13d,0x8
    65016b52:	xor    r13d,eax
    65016b55:	mov    eax,ebx
    65016b57:	xor    r13d,DWORD PTR [rbp+0x1c]
    65016b5b:	mov    rbp,QWORD PTR [rsp+0x48]
    65016b60:	shr    eax,0x8
    65016b63:	mov    BYTE PTR [r15+0x1],al
    65016b67:	mov    eax,ebx
    65016b69:	mov    BYTE PTR [r15],bl
    65016b6c:	shr    eax,0x10
    65016b6f:	shr    ebx,0x18
    65016b72:	mov    BYTE PTR [r15+0x4],dil
    65016b76:	mov    BYTE PTR [r15+0x2],al
    65016b7a:	mov    eax,edi
    65016b7c:	mov    BYTE PTR [r15+0x8],sil
    65016b80:	shr    eax,0x8
    65016b83:	mov    BYTE PTR [r15+0xc],r13b
    65016b87:	mov    BYTE PTR [r15+0x3],bl
    65016b8b:	mov    rbx,QWORD PTR [rsp+0x38]
    65016b90:	mov    BYTE PTR [r15+0x5],al
    65016b94:	mov    eax,edi
    65016b96:	shr    eax,0x10
    65016b99:	shr    edi,0x18
    65016b9c:	mov    BYTE PTR [r15+0x6],al
    65016ba0:	mov    eax,esi
    65016ba2:	mov    BYTE PTR [r15+0x7],dil
    65016ba6:	shr    eax,0x8
    65016ba9:	mov    BYTE PTR [r15+0x9],al
    65016bad:	mov    eax,esi
    65016baf:	shr    esi,0x18
    65016bb2:	shr    eax,0x10
    65016bb5:	mov    BYTE PTR [r15+0xb],sil
    65016bb9:	mov    BYTE PTR [r15+0xa],al
    65016bbd:	mov    eax,r13d
    65016bc0:	shr    eax,0x8
    65016bc3:	mov    BYTE PTR [r15+0xd],al
    65016bc7:	mov    eax,r13d
    65016bca:	shr    eax,0x10
    65016bcd:	shr    r13d,0x18
    65016bd1:	mov    BYTE PTR [r15+0xf],r13b
    65016bd5:	mov    BYTE PTR [r15+0xe],al
    65016bd9:	pop    r15
    65016bdb:	pop    r14
    65016bdd:	pop    r13
    65016bdf:	pop    r12
    65016be1:	pop    rdi
    65016be2:	pop    rsi
    65016be3:	ret    
    65016be4:	int3   
    65016be5:	int3   
    65016be6:	int3   
    65016be7:	int3   
    65016be8:	int3   
    65016be9:	int3   
    65016bea:	int3   
    65016beb:	int3   
    65016bec:	int3   
    65016bed:	int3   
    65016bee:	int3   
    65016bef:	int3   
    65016bf0:	rex push rbp
    65016bf2:	push   rsi
    65016bf3:	push   rdi
    65016bf4:	push   r12
    65016bf6:	push   r13
    65016bf8:	push   r14
    65016bfa:	push   r15
    65016bfc:	sub    rsp,0x170
    65016c03:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    65016c0c:	mov    QWORD PTR [rsp+0x1b8],rbx
    65016c14:	mov    rax,QWORD PTR [rip+0x2b505]        # 0x65042120
    65016c1b:	xor    rax,rsp
    65016c1e:	mov    QWORD PTR [rsp+0x160],rax
    65016c26:	mov    rdi,r9
    65016c29:	mov    rsi,r8
    65016c2c:	mov    r15,rcx
    65016c2f:	mov    rax,QWORD PTR [rsp+0x1d0]
    65016c37:	mov    QWORD PTR [rsp+0x20],rax
    65016c3c:	mov    DWORD PTR [rsp+0x150],0x0
    65016c47:	lea    r13,[r9+0x8]
    65016c4b:	mov    rcx,r13
    65016c4e:	and    ecx,0xf
    65016c51:	je     0x65016c5e
    65016c53:	mov    eax,0x10
    65016c58:	sub    rax,rcx
    65016c5b:	add    r13,rax
    65016c5e:	mov    rcx,r13
    65016c61:	call   0x6501d180
    65016c66:	mov    rbx,rax
    65016c69:	mov    QWORD PTR [rsp+0x150],rax
    65016c71:	mov    rcx,r13
    65016c74:	call   0x6501d180
    65016c79:	mov    QWORD PTR [r15],rax
    65016c7c:	mov    r8,r13
    65016c7f:	xor    edx,edx
    65016c81:	mov    rcx,rbx
    65016c84:	call   0x6501ee30
    65016c89:	mov    DWORD PTR [rbx],0x52514f4b
    65016c8f:	mov    DWORD PTR [rbx+0x4],edi
    65016c92:	lea    rcx,[rbx+0x8]
    65016c96:	mov    r8,rdi
    65016c99:	mov    rdx,rsi
    65016c9c:	call   0x6501fbc0
    65016ca1:	xor    r11d,r11d
    65016ca4:	mov    QWORD PTR [rsp+0x150],r11
    65016cac:	mov    QWORD PTR [rsp+0x158],r11
    65016cb4:	mov    r8d,0x80
    65016cba:	lea    rdx,[rip+0x2cc97]        # 0x65043958
    65016cc1:	lea    rcx,[rsp+0x30]
    65016cc6:	call   0x65015830
    65016ccb:	mov    rdi,QWORD PTR [r15]
    65016cce:	mov    rsi,rbx
    65016cd1:	test   r13d,r13d
    65016cd4:	jle    0x65016d98
    65016cda:	lea    rax,[rsp+0x150]
    65016ce2:	mov    rbp,rdi
    65016ce5:	sub    rbp,rax
    65016ce8:	lea    rax,[rsp+0x150]
    65016cf0:	mov    r12,rbx
    65016cf3:	sub    r12,rax
    65016cf6:	lea    r14d,[r13-0x1]
    65016cfa:	shr    r14d,0x4
    65016cfe:	add    r14d,0x1
    65016d02:	xor    edx,edx
    65016d04:	lea    r8,[rdi+0x1]
    65016d08:	mov    r9,rsi
    65016d0b:	sub    r9,rdi
    65016d0e:	xchg   ax,ax
    65016d10:	lea    rcx,[rsp+rdx*1+0x150]
    65016d18:	movzx  eax,BYTE PTR [r12+rcx*1]
    65016d1d:	xor    al,BYTE PTR [rcx]
    65016d1f:	mov    BYTE PTR [rcx+rbp*1],al
    65016d22:	movzx  eax,BYTE PTR [r9+r8*1]
    65016d27:	xor    al,BYTE PTR [rcx+0x1]
    65016d2a:	mov    BYTE PTR [r8],al
    65016d2d:	movzx  eax,BYTE PTR [rsi+rdx*1+0x2]
    65016d32:	xor    al,BYTE PTR [rcx+0x2]
    65016d35:	mov    BYTE PTR [r8+0x1],al
    65016d39:	movzx  eax,BYTE PTR [rsi+rdx*1+0x3]
    65016d3e:	xor    al,BYTE PTR [rcx+0x3]
    65016d41:	mov    BYTE PTR [r8+0x2],al
    65016d45:	add    rdx,0x4
    65016d49:	add    r8,0x4
    65016d4d:	cmp    rdx,0x10
    65016d51:	jl     0x65016d10
    65016d53:	mov    r9,rdi
    65016d56:	mov    r8,rdi
    65016d59:	mov    edx,0x1
    65016d5e:	lea    rcx,[rsp+0x30]
    65016d63:	call   0x65016130
    65016d68:	lea    r11,[rsp+0x150]
    65016d70:	mov    rax,QWORD PTR [rdi]
    65016d73:	mov    QWORD PTR [r11],rax
    65016d76:	mov    rax,QWORD PTR [rdi+0x8]
    65016d7a:	mov    QWORD PTR [r11+0x8],rax
    65016d7e:	add    rsi,0x10
    65016d82:	add    r12,0x10
    65016d86:	add    rdi,0x10
    65016d8a:	add    rbp,0x10
    65016d8e:	sub    r14,0x1
    65016d92:	jne    0x65016d02
    65016d98:	mov    rax,QWORD PTR [rsp+0x20]
    65016d9d:	mov    QWORD PTR [rax],r13
    65016da0:	xor    ecx,ecx
    65016da2:	call   0x6501d190
    65016da7:	nop
    65016da8:	mov    rcx,rbx
    65016dab:	call   0x6501d190
    65016db0:	mov    rax,r15
    65016db3:	mov    rcx,QWORD PTR [rsp+0x160]
    65016dbb:	xor    rcx,rsp
    65016dbe:	call   0x6501e4e0
    65016dc3:	mov    rbx,QWORD PTR [rsp+0x1b8]
    65016dcb:	add    rsp,0x170
    65016dd2:	pop    r15
    65016dd4:	pop    r14
    65016dd6:	pop    r13
    65016dd8:	pop    r12
    65016dda:	pop    rdi
    65016ddb:	pop    rsi
    65016ddc:	pop    rbp
    65016ddd:	ret    
    65016dde:	int3   
    65016ddf:	int3   
    65016de0:	rex push rbp
    65016de2:	sub    rsp,0x20
    65016de6:	mov    rbp,rdx
    65016de9:	lea    rcx,[rbp+0x150]
    65016df0:	call   0x65014a50
    65016df5:	add    rsp,0x20
    65016df9:	pop    rbp
    65016dfa:	ret    
    65016dfb:	int3   
    65016dfc:	int3   
    65016dfd:	int3   
    65016dfe:	int3   
    65016dff:	int3   
    65016e00:	rex push rbp
    65016e02:	push   r12
    65016e04:	push   r13
    65016e06:	push   r14
    65016e08:	push   r15
    65016e0a:	sub    rsp,0x180
    65016e11:	mov    rax,QWORD PTR [rip+0x2b308]        # 0x65042120
    65016e18:	xor    rax,rsp
    65016e1b:	mov    QWORD PTR [rsp+0x160],rax
    65016e23:	mov    r14,QWORD PTR [rsp+0x1d0]
    65016e2b:	xor    r15d,r15d
    65016e2e:	test   r9b,0xf
    65016e32:	mov    rbp,r9
    65016e35:	mov    r13,r8
    65016e38:	mov    r12,rcx
    65016e3b:	mov    DWORD PTR [rsp+0x140],r15d
    65016e43:	je     0x65016e5c
    65016e45:	mov    QWORD PTR [rcx],r15
    65016e48:	xor    ecx,ecx
    65016e4a:	mov    QWORD PTR [rsp+0x140],r15
    65016e52:	call   0x6501d190
    65016e57:	jmp    0x65016faa
    65016e5c:	mov    rcx,r9
    65016e5f:	mov    QWORD PTR [rsp+0x1b8],rbx
    65016e67:	mov    QWORD PTR [rsp+0x170],rdi
    65016e6f:	call   0x6501d180
    65016e74:	lea    rdx,[rip+0x2cadd]        # 0x65043958
    65016e7b:	lea    rcx,[rsp+0x20]
    65016e80:	mov    rbx,rax
    65016e83:	xor    eax,eax
    65016e85:	mov    r8d,0x80
    65016e8b:	mov    QWORD PTR [rsp+0x140],rax
    65016e93:	mov    QWORD PTR [rsp+0x148],rax
    65016e9b:	call   0x65015ef0
    65016ea0:	test   ebp,ebp
    65016ea2:	mov    rdi,rbx
    65016ea5:	jle    0x65016f4e
    65016eab:	mov    QWORD PTR [rsp+0x178],rsi
    65016eb3:	add    ebp,0xffffffff
    65016eb6:	lea    rsi,[rsp+0x141]
    65016ebe:	shr    ebp,0x4
    65016ec1:	sub    rsi,rbx
    65016ec4:	sub    r13,rbx
    65016ec7:	add    ebp,0x1
    65016eca:	data16 xchg ax,ax
    65016ecd:	data16 xchg ax,ax
    65016ed0:	mov    rax,QWORD PTR [r13+rdi*1+0x0]
    65016ed5:	lea    r8,[r13+rdi*1+0x0]
    65016eda:	lea    rcx,[rsp+0x150]
    65016ee2:	mov    QWORD PTR [rcx],rax
    65016ee5:	mov    rax,QWORD PTR [r8+0x8]
    65016ee9:	mov    r9,rdi
    65016eec:	mov    QWORD PTR [rcx+0x8],rax
    65016ef0:	lea    rcx,[rsp+0x20]
    65016ef5:	xor    edx,edx
    65016ef7:	call   0x65016130
    65016efc:	mov    ecx,0x4
    65016f01:	movzx  eax,BYTE PTR [rsi+rdi*1-0x1]
    65016f06:	add    rdi,0x4
    65016f0a:	xor    BYTE PTR [rdi-0x4],al
    65016f0d:	movzx  eax,BYTE PTR [rsi+rdi*1-0x4]
    65016f12:	xor    BYTE PTR [rdi-0x3],al
    65016f15:	movzx  eax,BYTE PTR [rsi+rdi*1-0x3]
    65016f1a:	xor    BYTE PTR [rdi-0x2],al
    65016f1d:	movzx  eax,BYTE PTR [rsi+rdi*1-0x2]
    65016f22:	xor    BYTE PTR [rdi-0x1],al
    65016f25:	sub    rcx,0x1
    65016f29:	jne    0x65016f01
    65016f2b:	movaps xmm0,XMMWORD PTR [rsp+0x150]
    65016f33:	sub    rsi,0x10
    65016f37:	sub    rbp,0x1
    65016f3b:	movdqa XMMWORD PTR [rsp+0x140],xmm0
    65016f44:	jne    0x65016ed0
    65016f46:	mov    rsi,QWORD PTR [rsp+0x178]
    65016f4e:	cmp    DWORD PTR [rbx],0x52534f4b
    65016f54:	mov    rdi,QWORD PTR [rsp+0x170]
    65016f5c:	je     0x65016f7d
    65016f5e:	xor    ecx,ecx
    65016f60:	mov    QWORD PTR [rsp+0x140],r15
    65016f68:	mov    QWORD PTR [r12],r15
    65016f6c:	call   0x6501d190
    65016f71:	xor    ecx,ecx
    65016f73:	call   0x6501d190
    65016f78:	mov    rcx,rbx
    65016f7b:	jmp    0x65016f9d
    65016f7d:	movsxd r8,DWORD PTR [rbx+0x4]
    65016f81:	lea    rdx,[rbx+0x8]
    65016f85:	mov    rcx,rbx
    65016f88:	mov    QWORD PTR [r14],r8
    65016f8b:	call   0x6501fbc0
    65016f90:	xor    ecx,ecx
    65016f92:	mov    QWORD PTR [r12],rbx
    65016f96:	call   0x6501d190
    65016f9b:	xor    ecx,ecx
    65016f9d:	call   0x6501d190
    65016fa2:	mov    rbx,QWORD PTR [rsp+0x1b8]
    65016faa:	mov    rax,r12
    65016fad:	mov    rcx,QWORD PTR [rsp+0x160]
    65016fb5:	xor    rcx,rsp
    65016fb8:	call   0x6501e4e0
    65016fbd:	add    rsp,0x180
    65016fc4:	pop    r15
    65016fc6:	pop    r14
    65016fc8:	pop    r13
    65016fca:	pop    r12
    65016fcc:	pop    rbp
    65016fcd:	ret    
    65016fce:	int3   
    65016fcf:	int3   
    65016fd0:	sub    rsp,0x28
    65016fd4:	mov    ecx,0x1
    65016fd9:	xor    eax,eax
    65016fdb:	lock cmpxchg DWORD PTR [rip+0x2fd6d],ecx        # 0x65046d50
    65016fe3:	jne    0x6501706b
    65016fe9:	lea    edx,[rcx+0xd]
    65016fec:	lea    r8,[rip+0x22155]        # 0x65039148
    65016ff3:	lea    rcx,[rip+0x22186]        # 0x65039180
    65016ffa:	mov    QWORD PTR [rsp+0x20],rbx
    65016fff:	call   0x6500bc30
    65017004:	lea    r8,[rip+0x22185]        # 0x65039190
    6501700b:	lea    rcx,[rip+0x2211e]        # 0x65039130
    65017012:	mov    edx,0x8
    65017017:	mov    rbx,rax
    6501701a:	call   0x6500c5e0
    6501701f:	mov    rcx,rax
    65017022:	call   QWORD PTR [rip+0x1d000]        # 0x65034028
    65017028:	add    DWORD PTR [rip+0x2c919],0x1        # 0x65043948
    6501702f:	test   rax,rax
    65017032:	je     0x65017058
    65017034:	mov    rdx,rbx
    65017037:	mov    rcx,rax
    6501703a:	call   QWORD PTR [rip+0x1d070]        # 0x650340b0
    65017040:	add    DWORD PTR [rip+0x2c905],0x1        # 0x6504394c
    65017047:	mov    rbx,QWORD PTR [rsp+0x20]
    6501704c:	mov    QWORD PTR [rip+0x2fe15],rax        # 0x65046e68
    65017053:	add    rsp,0x28
    65017057:	ret    
    65017058:	mov    rbx,QWORD PTR [rsp+0x20]
    6501705d:	xor    eax,eax
    6501705f:	mov    QWORD PTR [rip+0x2fe02],rax        # 0x65046e68
    65017066:	add    rsp,0x28
    6501706a:	ret    
    6501706b:	mov    rax,QWORD PTR [rip+0x2fdf6]        # 0x65046e68
    65017072:	add    rsp,0x28
    65017076:	ret    
    65017077:	int3   
    65017078:	int3   
    65017079:	int3   
    6501707a:	int3   
    6501707b:	int3   
    6501707c:	int3   
    6501707d:	int3   
    6501707e:	int3   
    6501707f:	int3   
    65017080:	sub    rsp,0x28
    65017084:	mov    ecx,0x1
    65017089:	xor    eax,eax
    6501708b:	lock cmpxchg DWORD PTR [rip+0x2fcc1],ecx        # 0x65046d54
    65017093:	jne    0x6501711b
    65017099:	lea    edx,[rcx+0xa]
    6501709c:	lea    r8,[rip+0x22125]        # 0x650391c8
    650170a3:	lea    rcx,[rip+0x2215e]        # 0x65039208
    650170aa:	mov    QWORD PTR [rsp+0x20],rbx
    650170af:	call   0x6500bc30
    650170b4:	lea    r8,[rip+0x2215d]        # 0x65039218
    650170bb:	lea    rcx,[rip+0x2206e]        # 0x65039130
    650170c2:	mov    edx,0x8
    650170c7:	mov    rbx,rax
    650170ca:	call   0x6500c5e0
    650170cf:	mov    rcx,rax
    650170d2:	call   QWORD PTR [rip+0x1cf50]        # 0x65034028
    650170d8:	add    DWORD PTR [rip+0x2c869],0x1        # 0x65043948
    650170df:	test   rax,rax
    650170e2:	je     0x65017108
    650170e4:	mov    rdx,rbx
    650170e7:	mov    rcx,rax
    650170ea:	call   QWORD PTR [rip+0x1cfc0]        # 0x650340b0
    650170f0:	add    DWORD PTR [rip+0x2c855],0x1        # 0x6504394c
    650170f7:	mov    rbx,QWORD PTR [rsp+0x20]
    650170fc:	mov    QWORD PTR [rip+0x2fd6d],rax        # 0x65046e70
    65017103:	add    rsp,0x28
    65017107:	ret    
    65017108:	mov    rbx,QWORD PTR [rsp+0x20]
    6501710d:	xor    eax,eax
    6501710f:	mov    QWORD PTR [rip+0x2fd5a],rax        # 0x65046e70
    65017116:	add    rsp,0x28
    6501711a:	ret    
    6501711b:	mov    rax,QWORD PTR [rip+0x2fd4e]        # 0x65046e70
    65017122:	add    rsp,0x28
    65017126:	ret    
    65017127:	int3   
    65017128:	int3   
    65017129:	int3   
    6501712a:	int3   
    6501712b:	int3   
    6501712c:	int3   
    6501712d:	int3   
    6501712e:	int3   
    6501712f:	int3   
    65017130:	sub    rsp,0x28
    65017134:	mov    ecx,0x1
    65017139:	xor    eax,eax
    6501713b:	lock cmpxchg DWORD PTR [rip+0x2fc15],ecx        # 0x65046d58
    65017143:	jne    0x650171cb
    65017149:	lea    edx,[rcx+0xa]
    6501714c:	lea    r8,[rip+0x220f5]        # 0x65039248
    65017153:	lea    rcx,[rip+0x2212e]        # 0x65039288
    6501715a:	mov    QWORD PTR [rsp+0x20],rbx
    6501715f:	call   0x6500bc30
    65017164:	lea    r8,[rip+0x2212d]        # 0x65039298
    6501716b:	lea    rcx,[rip+0x21fbe]        # 0x65039130
    65017172:	mov    edx,0x8
    65017177:	mov    rbx,rax
    6501717a:	call   0x6500c5e0
    6501717f:	mov    rcx,rax
    65017182:	call   QWORD PTR [rip+0x1cea0]        # 0x65034028
    65017188:	add    DWORD PTR [rip+0x2c7b9],0x1        # 0x65043948
    6501718f:	test   rax,rax
    65017192:	je     0x650171b8
    65017194:	mov    rdx,rbx
    65017197:	mov    rcx,rax
    6501719a:	call   QWORD PTR [rip+0x1cf10]        # 0x650340b0
    650171a0:	add    DWORD PTR [rip+0x2c7a5],0x1        # 0x6504394c
    650171a7:	mov    rbx,QWORD PTR [rsp+0x20]
    650171ac:	mov    QWORD PTR [rip+0x2fcc5],rax        # 0x65046e78
    650171b3:	add    rsp,0x28
    650171b7:	ret    
    650171b8:	mov    rbx,QWORD PTR [rsp+0x20]
    650171bd:	xor    eax,eax
    650171bf:	mov    QWORD PTR [rip+0x2fcb2],rax        # 0x65046e78
    650171c6:	add    rsp,0x28
    650171ca:	ret    
    650171cb:	mov    rax,QWORD PTR [rip+0x2fca6]        # 0x65046e78
    650171d2:	add    rsp,0x28
    650171d6:	ret    
    650171d7:	int3   
    650171d8:	int3   
    650171d9:	int3   
    650171da:	int3   
    650171db:	int3   
    650171dc:	int3   
    650171dd:	int3   
    650171de:	int3   
    650171df:	int3   
    650171e0:	sub    rsp,0x28
    650171e4:	mov    ecx,0x1
    650171e9:	xor    eax,eax
    650171eb:	lock cmpxchg DWORD PTR [rip+0x2fb69],ecx        # 0x65046d5c
    650171f3:	jne    0x6501727b
    650171f9:	lea    edx,[rcx+0xa]
    650171fc:	lea    r8,[rip+0x220cd]        # 0x650392d0
    65017203:	lea    rcx,[rip+0x220f6]        # 0x65039300
    6501720a:	mov    QWORD PTR [rsp+0x20],rbx
    6501720f:	call   0x6500bc30
    65017214:	lea    r8,[rip+0x220f5]        # 0x65039310
    6501721b:	lea    rcx,[rip+0x21f0e]        # 0x65039130
    65017222:	mov    edx,0x8
    65017227:	mov    rbx,rax
    6501722a:	call   0x6500c5e0
    6501722f:	mov    rcx,rax
    65017232:	call   QWORD PTR [rip+0x1cdf0]        # 0x65034028
    65017238:	add    DWORD PTR [rip+0x2c709],0x1        # 0x65043948
    6501723f:	test   rax,rax
    65017242:	je     0x65017268
    65017244:	mov    rdx,rbx
    65017247:	mov    rcx,rax
    6501724a:	call   QWORD PTR [rip+0x1ce60]        # 0x650340b0
    65017250:	add    DWORD PTR [rip+0x2c6f5],0x1        # 0x6504394c
    65017257:	mov    rbx,QWORD PTR [rsp+0x20]
    6501725c:	mov    QWORD PTR [rip+0x2fc1d],rax        # 0x65046e80
    65017263:	add    rsp,0x28
    65017267:	ret    
    65017268:	mov    rbx,QWORD PTR [rsp+0x20]
    6501726d:	xor    eax,eax
    6501726f:	mov    QWORD PTR [rip+0x2fc0a],rax        # 0x65046e80
    65017276:	add    rsp,0x28
    6501727a:	ret    
    6501727b:	mov    rax,QWORD PTR [rip+0x2fbfe]        # 0x65046e80
    65017282:	add    rsp,0x28
    65017286:	ret    
    65017287:	int3   
    65017288:	int3   
    65017289:	int3   
    6501728a:	int3   
    6501728b:	int3   
    6501728c:	int3   
    6501728d:	int3   
    6501728e:	int3   
    6501728f:	int3   
    65017290:	sub    rsp,0x28
    65017294:	mov    ecx,0x1
    65017299:	xor    eax,eax
    6501729b:	lock cmpxchg DWORD PTR [rip+0x2faed],ecx        # 0x65046d90
    650172a3:	jne    0x6501732b
    650172a9:	lea    edx,[rcx+0x18]
    650172ac:	lea    r8,[rip+0x22355]        # 0x65039608
    650172b3:	lea    rcx,[rip+0x22376]        # 0x65039630
    650172ba:	mov    QWORD PTR [rsp+0x20],rbx
    650172bf:	call   0x6500bc30
    650172c4:	lea    r8,[rip+0x22385]        # 0x65039650
    650172cb:	lea    rcx,[rip+0x223a6]        # 0x65039678
    650172d2:	mov    edx,0x7
    650172d7:	mov    rbx,rax
    650172da:	call   0x6500c5e0
    650172df:	mov    rcx,rax
    650172e2:	call   QWORD PTR [rip+0x1cd40]        # 0x65034028
    650172e8:	add    DWORD PTR [rip+0x2c659],0x1        # 0x65043948
    650172ef:	test   rax,rax
    650172f2:	je     0x65017318
    650172f4:	mov    rdx,rbx
    650172f7:	mov    rcx,rax
    650172fa:	call   QWORD PTR [rip+0x1cdb0]        # 0x650340b0
    65017300:	add    DWORD PTR [rip+0x2c645],0x1        # 0x6504394c
    65017307:	mov    rbx,QWORD PTR [rsp+0x20]
    6501730c:	mov    QWORD PTR [rip+0x2fba5],rax        # 0x65046eb8
    65017313:	add    rsp,0x28
    65017317:	ret    
    65017318:	mov    rbx,QWORD PTR [rsp+0x20]
    6501731d:	xor    eax,eax
    6501731f:	mov    QWORD PTR [rip+0x2fb92],rax        # 0x65046eb8
    65017326:	add    rsp,0x28
    6501732a:	ret    
    6501732b:	mov    rax,QWORD PTR [rip+0x2fb86]        # 0x65046eb8
    65017332:	add    rsp,0x28
    65017336:	ret    
    65017337:	int3   
    65017338:	int3   
    65017339:	int3   
    6501733a:	int3   
    6501733b:	int3   
    6501733c:	int3   
    6501733d:	int3   
    6501733e:	int3   
    6501733f:	int3   
    65017340:	sub    rsp,0x28
    65017344:	mov    ecx,0x1
    65017349:	xor    eax,eax
    6501734b:	lock cmpxchg DWORD PTR [rip+0x2fa91],ecx        # 0x65046de4
    65017353:	jne    0x650173db
    65017359:	lea    edx,[rcx+0x10]
    6501735c:	lea    r8,[rip+0x22675]        # 0x650399d8
    65017363:	lea    rcx,[rip+0x2269e]        # 0x65039a08
    6501736a:	mov    QWORD PTR [rsp+0x20],rbx
    6501736f:	call   0x6500bc30
    65017374:	lea    r8,[rip+0x226a5]        # 0x65039a20
    6501737b:	lea    rcx,[rip+0x22646]        # 0x650399c8
    65017382:	mov    edx,0x5
    65017387:	mov    rbx,rax
    6501738a:	call   0x6500c5e0
    6501738f:	mov    rcx,rax
    65017392:	call   QWORD PTR [rip+0x1cc90]        # 0x65034028
    65017398:	add    DWORD PTR [rip+0x2c5a9],0x1        # 0x65043948
    6501739f:	test   rax,rax
    650173a2:	je     0x650173c8
    650173a4:	mov    rdx,rbx
    650173a7:	mov    rcx,rax
    650173aa:	call   QWORD PTR [rip+0x1cd00]        # 0x650340b0
    650173b0:	add    DWORD PTR [rip+0x2c595],0x1        # 0x6504394c
    650173b7:	mov    rbx,QWORD PTR [rsp+0x20]
    650173bc:	mov    QWORD PTR [rip+0x2fb2d],rax        # 0x65046ef0
    650173c3:	add    rsp,0x28
    650173c7:	ret    
    650173c8:	mov    rbx,QWORD PTR [rsp+0x20]
    650173cd:	xor    eax,eax
    650173cf:	mov    QWORD PTR [rip+0x2fb1a],rax        # 0x65046ef0
    650173d6:	add    rsp,0x28
    650173da:	ret    
    650173db:	mov    rax,QWORD PTR [rip+0x2fb0e]        # 0x65046ef0
    650173e2:	add    rsp,0x28
    650173e6:	ret    
    650173e7:	int3   
    650173e8:	int3   
    650173e9:	int3   
    650173ea:	int3   
    650173eb:	int3   
    650173ec:	int3   
    650173ed:	int3   
    650173ee:	int3   
    650173ef:	int3   
    650173f0:	mov    QWORD PTR [rsp+0x8],rbx
    650173f5:	push   rdi
    650173f6:	sub    rsp,0x20
    650173fa:	mov    rax,QWORD PTR [rcx+0x18]
    650173fe:	mov    rdi,rcx
    65017401:	cmp    rax,QWORD PTR [rcx+0x28]
    65017405:	je     0x65017423
    65017407:	data16 xchg ax,ax
    6501740a:	data16 xchg ax,ax
    6501740d:	data16 xchg ax,ax
    65017410:	mov    rcx,QWORD PTR [rax-0x8]
    65017414:	lea    rbx,[rax-0x10]
    65017418:	call   QWORD PTR [rbx]
    6501741a:	cmp    rbx,QWORD PTR [rdi+0x28]
    6501741e:	mov    rax,rbx
    65017421:	jne    0x65017410
    65017423:	mov    rcx,QWORD PTR [rdi+0x28]
    65017427:	call   0x6501fa90
    6501742c:	mov    rcx,QWORD PTR [rdi+0x10]
    65017430:	mov    rbx,QWORD PTR [rcx]
    65017433:	call   0x6501fa90
    65017438:	test   rbx,rbx
    6501743b:	je     0x65017450
    6501743d:	data16 xchg ax,ax
    65017440:	mov    rcx,rbx
    65017443:	mov    rbx,QWORD PTR [rbx]
    65017446:	call   0x6501fa90
    6501744b:	test   rbx,rbx
    6501744e:	jne    0x65017440
    65017450:	mov    rbx,QWORD PTR [rsp+0x30]
    65017455:	add    rsp,0x20
    65017459:	pop    rdi
    6501745a:	ret    
    6501745b:	int3   
    6501745c:	int3   
    6501745d:	int3   
    6501745e:	int3   
    6501745f:	int3   
    65017460:	mov    QWORD PTR [rsp+0x8],rbx
    65017465:	push   rdi
    65017466:	sub    rsp,0x20
    6501746a:	mov    rbx,rcx
    6501746d:	mov    QWORD PTR [rcx+0x30],rdx
    65017471:	lea    rcx,[rdx+0x8]
    65017475:	mov    rdi,rdx
    65017478:	call   0x6501fae0
    6501747d:	test   rax,rax
    65017480:	je     0x650174af
    65017482:	mov    QWORD PTR [rbx+0x10],rax
    65017486:	xor    ecx,ecx
    65017488:	mov    QWORD PTR [rbx],rdi
    6501748b:	lea    rdx,[rax+0x8]
    6501748f:	mov    QWORD PTR [rbx+0x8],rdx
    65017493:	mov    QWORD PTR [rax],rcx
    65017496:	mov    QWORD PTR [rbx+0x18],rcx
    6501749a:	mov    QWORD PTR [rbx+0x20],rcx
    6501749e:	mov    QWORD PTR [rbx+0x28],rcx
    650174a2:	mov    al,0x1
    650174a4:	mov    rbx,QWORD PTR [rsp+0x30]
    650174a9:	add    rsp,0x20
    650174ad:	pop    rdi
    650174ae:	ret    
    650174af:	xor    al,al
    650174b1:	mov    rbx,QWORD PTR [rsp+0x30]
    650174b6:	add    rsp,0x20
    650174ba:	pop    rdi
    650174bb:	ret    
    650174bc:	int3   
    650174bd:	int3   
    650174be:	int3   
    650174bf:	int3   
    650174c0:	mov    QWORD PTR [rsp+0x10],rbp
    650174c5:	mov    QWORD PTR [rsp+0x18],rsi
    650174ca:	push   rdi
    650174cb:	sub    rsp,0x20
    650174cf:	mov    eax,edx
    650174d1:	mov    DWORD PTR [r8],0x6
    650174d8:	mov    DWORD PTR [r8+0x8],0x0
    650174e0:	mov    rsi,QWORD PTR [rcx]
    650174e3:	lea    rcx,[rax+rax*2]
    650174e7:	mov    rbp,r8
    650174ea:	mov    rax,QWORD PTR [rsi]
    650174ed:	lea    rdi,[rcx*8+0x3]
    650174f5:	and    rdi,0xfffffffffffffffc
    650174f9:	cmp    rax,rdi
    650174fc:	jae    0x6501753d
    650174fe:	mov    QWORD PTR [rsp+0x30],rbx
    65017503:	mov    rbx,QWORD PTR [rsi+0x30]
    65017507:	cmp    rbx,rdi
    6501750a:	jae    0x65017518
    6501750c:	data16 data16 xchg ax,ax
    65017510:	add    rbx,rbx
    65017513:	cmp    rbx,rdi
    65017516:	jb     0x65017510
    65017518:	lea    rcx,[rbx+0x8]
    6501751c:	call   0x6501fae0
    65017521:	mov    rcx,QWORD PTR [rsi+0x10]
    65017525:	sub    rbx,rdi
    65017528:	mov    QWORD PTR [rax],rcx
    6501752b:	mov    QWORD PTR [rsi],rbx
    6501752e:	mov    rbx,QWORD PTR [rsp+0x30]
    65017533:	lea    rdx,[rax+0x8]
    65017537:	mov    QWORD PTR [rsi+0x10],rax
    6501753b:	jmp    0x65017547
    6501753d:	mov    rdx,QWORD PTR [rsi+0x8]
    65017541:	sub    rax,rdi
    65017544:	mov    QWORD PTR [rsi],rax
    65017547:	lea    rax,[rdx+rdi*1]
    6501754b:	mov    QWORD PTR [rsi+0x8],rax
    6501754f:	mov    rsi,QWORD PTR [rsp+0x40]
    65017554:	mov    QWORD PTR [rbp+0x10],rdx
    65017558:	mov    rbp,QWORD PTR [rsp+0x38]
    6501755d:	neg    rdx
    65017560:	sbb    eax,eax
    65017562:	neg    eax
    65017564:	sub    eax,0x1
    65017567:	add    rsp,0x20
    6501756b:	pop    rdi
    6501756c:	ret    
    6501756d:	int3   
    6501756e:	int3   
    6501756f:	int3   
    65017570:	mov    QWORD PTR [rsp+0x10],rbp
    65017575:	mov    QWORD PTR [rsp+0x18],rsi
    6501757a:	push   rdi
    6501757b:	sub    rsp,0x20
    6501757f:	mov    eax,edx
    65017581:	mov    DWORD PTR [r8],0x7
    65017588:	mov    DWORD PTR [r8+0x8],0x0
    65017590:	mov    rsi,QWORD PTR [rcx]
    65017593:	lea    rdi,[rax+rax*2]
    65017597:	mov    rbp,r8
    6501759a:	mov    rax,QWORD PTR [rsi]
    6501759d:	shl    rdi,0x4
    650175a1:	add    rdi,0x3
    650175a5:	and    rdi,0xfffffffffffffffc
    650175a9:	cmp    rax,rdi
    650175ac:	jae    0x650175ed
    650175ae:	mov    QWORD PTR [rsp+0x30],rbx
    650175b3:	mov    rbx,QWORD PTR [rsi+0x30]
    650175b7:	cmp    rbx,rdi
    650175ba:	jae    0x650175c8
    650175bc:	data16 data16 xchg ax,ax
    650175c0:	add    rbx,rbx
    650175c3:	cmp    rbx,rdi
    650175c6:	jb     0x650175c0
    650175c8:	lea    rcx,[rbx+0x8]
    650175cc:	call   0x6501fae0
    650175d1:	mov    rcx,QWORD PTR [rsi+0x10]
    650175d5:	sub    rbx,rdi
    650175d8:	mov    QWORD PTR [rax],rcx
    650175db:	mov    QWORD PTR [rsi],rbx
    650175de:	mov    rbx,QWORD PTR [rsp+0x30]
    650175e3:	lea    rdx,[rax+0x8]
    650175e7:	mov    QWORD PTR [rsi+0x10],rax
    650175eb:	jmp    0x650175f7
    650175ed:	mov    rdx,QWORD PTR [rsi+0x8]
    650175f1:	sub    rax,rdi
    650175f4:	mov    QWORD PTR [rsi],rax
    650175f7:	lea    rax,[rdx+rdi*1]
    650175fb:	mov    QWORD PTR [rsi+0x8],rax
    650175ff:	mov    rsi,QWORD PTR [rsp+0x40]
    65017604:	mov    QWORD PTR [rbp+0x10],rdx
    65017608:	mov    rbp,QWORD PTR [rsp+0x38]
    6501760d:	neg    rdx
    65017610:	sbb    eax,eax
    65017612:	neg    eax
    65017614:	sub    eax,0x1
    65017617:	add    rsp,0x20
    6501761b:	pop    rdi
    6501761c:	ret    
    6501761d:	int3   
    6501761e:	int3   
    6501761f:	int3   
    65017620:	mov    QWORD PTR [rsp+0x20],r9
    65017625:	mov    QWORD PTR [rsp+0x10],rdx
    6501762a:	push   rbx
    6501762b:	push   rbp
    6501762c:	push   rsi
    6501762d:	push   rdi
    6501762e:	push   r12
    65017630:	push   r13
    65017632:	push   r14
    65017634:	push   r15
    65017636:	sub    rsp,0x58
    6501763a:	mov    rax,QWORD PTR [r9]
    6501763d:	mov    edi,DWORD PTR [rcx+0x18]
    65017640:	xor    ebx,ebx
    65017642:	lea    rbp,[rdx+rax*1]
    65017646:	lea    rax,[rdx+r8*1]
    6501764a:	mov    r8d,DWORD PTR [rcx+0x14]
    6501764e:	cmp    rbp,rax
    65017651:	mov    edx,DWORD PTR [rcx+0x10]
    65017654:	mov    r13,rcx
    65017657:	mov    DWORD PTR [rsp+0xb0],r8d
    6501765f:	mov    QWORD PTR [rsp+0x28],rax
    65017664:	lea    r10,[rip+0xfffffffffffe8995]        # 0x65000000
    6501766b:	mov    DWORD PTR [rsp+0xa0],edx
    65017672:	lea    r9d,[rbx+0x1]
    65017676:	je     0x65018113
    6501767c:	data16 data16 xchg ax,ax
    65017680:	test   edx,edx
    65017682:	jne    0x650178d3
    65017688:	movzx  ecx,BYTE PTR [rbp+0x0]
    6501768c:	cmp    cl,0x7f
    6501768f:	ja     0x650176a6
    65017691:	movzx  eax,cl
    65017694:	mov    DWORD PTR [rsp+0x30],0x2
    6501769c:	mov    QWORD PTR [rsp+0x38],rax
    650176a1:	jmp    0x65017f80
    650176a6:	cmp    cl,0xe0
    650176a9:	jb     0x650176ce
    650176ab:	cmp    cl,0xff
    650176ae:	ja     0x650176ce
    650176b0:	test   cl,cl
    650176b2:	movsx  rax,cl
    650176b6:	mov    QWORD PTR [rsp+0x38],rax
    650176bb:	js     0x65017ba2
    650176c1:	mov    DWORD PTR [rsp+0x30],0x2
    650176c9:	jmp    0x65017f80
    650176ce:	cmp    cl,0xc0
    650176d1:	jb     0x6501778e
    650176d7:	cmp    cl,0xdf
    650176da:	ja     0x6501778e
    650176e0:	movzx  edx,cl
    650176e3:	lea    eax,[rdx-0xc0]
    650176e9:	cmp    eax,0x1f
    650176ec:	ja     0x6501810e
    650176f2:	cdqe   
    650176f4:	movzx  eax,BYTE PTR [r10+rax*1+0x1816c]
    650176fd:	mov    ecx,DWORD PTR [r10+rax*4+0x18154]
    65017705:	add    rcx,r10
    65017708:	jmp    rcx
    6501770a:	mov    DWORD PTR [rsp+0x30],0x0
    65017712:	jmp    0x65017f80
    65017717:	mov    DWORD PTR [rsp+0x30],r9d
    6501771c:	mov    BYTE PTR [rsp+0x38],0x0
    65017721:	jmp    0x65017f80
    65017726:	mov    DWORD PTR [rsp+0x30],r9d
    6501772b:	mov    BYTE PTR [rsp+0x38],0x1
    65017730:	jmp    0x65017f80
    65017735:	mov    rax,QWORD PTR [rsp+0x28]
    6501773a:	mov    ecx,edx
    6501773c:	mov    r8d,r9d
    6501773f:	and    ecx,0x3
    65017742:	shl    r8d,cl
    65017745:	and    edx,0x1f
    65017748:	add    rbp,0x1
    6501774c:	mov    DWORD PTR [rsp+0xa0],edx
    65017753:	mov    DWORD PTR [rsp+0xb0],r8d
    6501775b:	jmp    0x650178d3
    65017760:	mov    rax,QWORD PTR [rsp+0x28]
    65017765:	mov    ecx,edx
    65017767:	mov    r8d,0x2
    6501776d:	and    ecx,0x1
    65017770:	shl    r8d,cl
    65017773:	and    edx,0x1f
    65017776:	add    rbp,0x1
    6501777a:	mov    DWORD PTR [rsp+0xa0],edx
    65017781:	mov    DWORD PTR [rsp+0xb0],r8d
    65017789:	jmp    0x650178d3
    6501778e:	cmp    cl,0xa0
    65017791:	jb     0x650177c2
    65017793:	cmp    cl,0xbf
    65017796:	ja     0x650177c2
    65017798:	mov    r8b,cl
    6501779b:	and    r8d,0x1f
    6501779f:	mov    DWORD PTR [rsp+0xb0],r8d
    650177a7:	je     0x65017baf
    650177ad:	mov    edx,0x20
    650177b2:	add    rbp,0x1
    650177b6:	mov    DWORD PTR [rsp+0xa0],edx
    650177bd:	jmp    0x650178d3
    650177c2:	cmp    cl,0x90
    650177c5:	jb     0x6501786f
    650177cb:	cmp    cl,0x9f
    650177ce:	ja     0x6501786f
    650177d4:	cmp    edi,0x20
    650177d7:	jae    0x6501810e
    650177dd:	mov    dl,cl
    650177df:	mov    eax,edi
    650177e1:	mov    rcx,r13
    650177e4:	shl    rax,0x6
    650177e8:	and    edx,0xf
    650177eb:	lea    rsi,[rax+r13*1+0x20]
    650177f0:	mov    r8,rsi
    650177f3:	call   0x650174c0
    650177f8:	test   eax,eax
    650177fa:	js     0x6501810e
    65017800:	test   BYTE PTR [rbp+0x0],0xf
    65017804:	jne    0x65017826
    65017806:	mov    rax,QWORD PTR [rsi]
    65017809:	lea    rcx,[rsp+0x30]
    6501780e:	mov    QWORD PTR [rcx],rax
    65017811:	mov    rax,QWORD PTR [rsi+0x8]
    65017815:	mov    QWORD PTR [rcx+0x8],rax
    65017819:	mov    rax,QWORD PTR [rsi+0x10]
    6501781d:	mov    QWORD PTR [rcx+0x10],rax
    65017821:	jmp    0x65017f80
    65017826:	mov    DWORD PTR [rsi+0x20],0x0
    6501782d:	mov    al,BYTE PTR [rbp+0x0]
    65017830:	and    eax,0xf
    65017833:	add    edi,0x1
    65017836:	mov    QWORD PTR [rsi+0x18],rax
    6501783a:	mov    r9d,0x1
    65017840:	mov    rax,QWORD PTR [rsp+0x28]
    65017845:	xor    edx,edx
    65017847:	add    rbp,0x1
    6501784b:	cmp    rbp,rax
    6501784e:	mov    DWORD PTR [rsp+0xa0],edx
    65017855:	je     0x65018113
    6501785b:	mov    r8d,DWORD PTR [rsp+0xb0]
    65017863:	lea    r10,[rip+0xfffffffffffe8796]        # 0x65000000
    6501786a:	jmp    0x65017680
    6501786f:	cmp    cl,0x80
    65017872:	jb     0x6501810e
    65017878:	cmp    cl,0x8f
    6501787b:	ja     0x6501810e
    65017881:	cmp    edi,0x20
    65017884:	jae    0x6501810e
    6501788a:	mov    dl,cl
    6501788c:	mov    eax,edi
    6501788e:	mov    rcx,r13
    65017891:	shl    rax,0x6
    65017895:	and    edx,0xf
    65017898:	lea    rsi,[rax+r13*1+0x20]
    6501789d:	mov    r8,rsi
    650178a0:	call   0x65017570
    650178a5:	test   eax,eax
    650178a7:	js     0x6501810e
    650178ad:	test   BYTE PTR [rbp+0x0],0xf
    650178b1:	je     0x65017806
    650178b7:	mov    r9d,0x1
    650178bd:	mov    DWORD PTR [rsi+0x20],r9d
    650178c1:	mov    al,BYTE PTR [rbp+0x0]
    650178c4:	and    eax,0xf
    650178c7:	add    edi,r9d
    650178ca:	mov    QWORD PTR [rsi+0x18],rax
    650178ce:	jmp    0x65017840
    650178d3:	mov    rcx,rax
    650178d6:	mov    eax,r8d
    650178d9:	sub    rcx,rbp
    650178dc:	cmp    rcx,rax
    650178df:	jb     0x65018113
    650178e5:	lea    ecx,[r8-0x1]
    650178e9:	lea    eax,[rdx-0xa]
    650178ec:	mov    rbx,rbp
    650178ef:	add    rbp,rcx
    650178f2:	cmp    eax,0x16
    650178f5:	ja     0x6501810e
    650178fb:	mov    ecx,DWORD PTR [r10+rax*4+0x1818c]
    65017903:	add    rcx,r10
    65017906:	jmp    rcx
    65017908:	movzx  eax,BYTE PTR [rbx]
    6501790b:	shl    ax,0x8
    6501790f:	movzx  r8d,ax
    65017913:	movzx  eax,BYTE PTR [rbx+0x1]
    65017917:	jmp    0x6501793b
    65017919:	movzx  eax,BYTE PTR [rbx+0x1]
    6501791d:	movzx  r8d,BYTE PTR [rbx]
    65017921:	shl    r8d,0x8
    65017925:	or     r8d,eax
    65017928:	movzx  eax,BYTE PTR [rbx+0x2]
    6501792c:	shl    r8d,0x8
    65017930:	or     r8d,eax
    65017933:	movzx  eax,BYTE PTR [rbx+0x3]
    65017937:	shl    r8d,0x8
    6501793b:	or     r8d,eax
    6501793e:	mov    DWORD PTR [rsp+0xb0],r8d
    65017946:	je     0x65017baf
    6501794c:	mov    rax,QWORD PTR [rsp+0x28]
    65017951:	mov    edx,0x20
    65017956:	mov    DWORD PTR [rsp+0xa0],edx
    6501795d:	add    rbp,0x1
    65017961:	jmp    0x650178d3
    65017966:	movzx  eax,BYTE PTR [rbx+0x1]
    6501796a:	movzx  ecx,BYTE PTR [rbx]
    6501796d:	mov    DWORD PTR [rsp+0x30],0x4
    65017975:	shl    ecx,0x8
    65017978:	or     ecx,eax
    6501797a:	movzx  eax,BYTE PTR [rbx+0x2]
    6501797e:	shl    ecx,0x8
    65017981:	or     ecx,eax
    65017983:	movzx  eax,BYTE PTR [rbx+0x3]
    65017987:	shl    ecx,0x8
    6501798a:	or     ecx,eax
    6501798c:	mov    DWORD PTR [rsp+0x20],ecx
    65017990:	cvtss2sd xmm0,DWORD PTR [rsp+0x20]
    65017996:	movsd  QWORD PTR [rsp+0x38],xmm0
    6501799c:	jmp    0x65017f80
    650179a1:	movzx  eax,BYTE PTR [rbx+0x1]
    650179a5:	movzx  ecx,BYTE PTR [rbx]
    650179a8:	mov    DWORD PTR [rsp+0x30],0x4
    650179b0:	shl    rcx,0x8
    650179b4:	or     rcx,rax
    650179b7:	movzx  eax,BYTE PTR [rbx+0x2]
    650179bb:	shl    rcx,0x8
    650179bf:	or     rcx,rax
    650179c2:	movzx  eax,BYTE PTR [rbx+0x3]
    650179c6:	shl    rcx,0x8
    650179ca:	or     rcx,rax
    650179cd:	movzx  eax,BYTE PTR [rbx+0x4]
    650179d1:	shl    rcx,0x8
    650179d5:	or     rcx,rax
    650179d8:	movzx  eax,BYTE PTR [rbx+0x5]
    650179dc:	shl    rcx,0x8
    650179e0:	or     rcx,rax
    650179e3:	movzx  eax,BYTE PTR [rbx+0x6]
    650179e7:	shl    rcx,0x8
    650179eb:	or     rcx,rax
    650179ee:	movzx  eax,BYTE PTR [rbx+0x7]
    650179f2:	shl    rcx,0x8
    650179f6:	or     rcx,rax
    650179f9:	mov    QWORD PTR [rsp+0x20],rcx
    650179fe:	movsd  xmm0,QWORD PTR [rsp+0x20]
    65017a04:	movsd  QWORD PTR [rsp+0x38],xmm0
    65017a0a:	jmp    0x65017f80
    65017a0f:	movzx  eax,BYTE PTR [rbx]
    65017a12:	mov    DWORD PTR [rsp+0x30],0x2
    65017a1a:	mov    QWORD PTR [rsp+0x38],rax
    65017a1f:	jmp    0x65017f80
    65017a24:	movzx  eax,BYTE PTR [rbx]
    65017a27:	mov    DWORD PTR [rsp+0x30],0x2
    65017a2f:	shl    ax,0x8
    65017a33:	movzx  ecx,ax
    65017a36:	movzx  eax,BYTE PTR [rbx+0x1]
    65017a3a:	or     rcx,rax
    65017a3d:	mov    QWORD PTR [rsp+0x38],rcx
    65017a42:	jmp    0x65017f80
    65017a47:	movzx  eax,BYTE PTR [rbx+0x1]
    65017a4b:	movzx  ecx,BYTE PTR [rbx]
    65017a4e:	mov    DWORD PTR [rsp+0x30],0x2
    65017a56:	shl    ecx,0x8
    65017a59:	or     ecx,eax
    65017a5b:	movzx  eax,BYTE PTR [rbx+0x2]
    65017a5f:	shl    ecx,0x8
    65017a62:	or     ecx,eax
    65017a64:	movzx  eax,BYTE PTR [rbx+0x3]
    65017a68:	shl    ecx,0x8
    65017a6b:	or     rcx,rax
    65017a6e:	mov    QWORD PTR [rsp+0x38],rcx
    65017a73:	jmp    0x65017f80
    65017a78:	movzx  eax,BYTE PTR [rbx+0x1]
    65017a7c:	movzx  ecx,BYTE PTR [rbx]
    65017a7f:	mov    DWORD PTR [rsp+0x30],0x2
    65017a87:	shl    rcx,0x8
    65017a8b:	or     rcx,rax
    65017a8e:	movzx  eax,BYTE PTR [rbx+0x2]
    65017a92:	shl    rcx,0x8
    65017a96:	or     rcx,rax
    65017a99:	movzx  eax,BYTE PTR [rbx+0x3]
    65017a9d:	shl    rcx,0x8
    65017aa1:	or     rcx,rax
    65017aa4:	movzx  eax,BYTE PTR [rbx+0x4]
    65017aa8:	shl    rcx,0x8
    65017aac:	or     rcx,rax
    65017aaf:	movzx  eax,BYTE PTR [rbx+0x5]
    65017ab3:	shl    rcx,0x8
    65017ab7:	or     rcx,rax
    65017aba:	movzx  eax,BYTE PTR [rbx+0x6]
    65017abe:	shl    rcx,0x8
    65017ac2:	or     rcx,rax
    65017ac5:	movzx  eax,BYTE PTR [rbx+0x7]
    65017ac9:	shl    rcx,0x8
    65017acd:	or     rcx,rax
    65017ad0:	mov    QWORD PTR [rsp+0x38],rcx
    65017ad5:	jmp    0x65017f80
    65017ada:	movzx  eax,BYTE PTR [rbx]
    65017add:	test   al,al
    65017adf:	movsx  rax,al
    65017ae3:	mov    QWORD PTR [rsp+0x38],rax
    65017ae8:	js     0x65017ba2
    65017aee:	mov    DWORD PTR [rsp+0x30],0x2
    65017af6:	jmp    0x65017f80
    65017afb:	movzx  eax,BYTE PTR [rbx+0x1]
    65017aff:	movzx  ecx,BYTE PTR [rbx]
    65017b02:	shl    cx,0x8
    65017b06:	or     cx,ax
    65017b09:	movsx  rax,cx
    65017b0d:	mov    QWORD PTR [rsp+0x38],rax
    65017b12:	jl     0x65017ba2
    65017b18:	mov    DWORD PTR [rsp+0x30],0x2
    65017b20:	jmp    0x65017f80
    65017b25:	movzx  eax,BYTE PTR [rbx+0x1]
    65017b29:	movzx  ecx,BYTE PTR [rbx]
    65017b2c:	shl    ecx,0x8
    65017b2f:	or     ecx,eax
    65017b31:	movzx  eax,BYTE PTR [rbx+0x2]
    65017b35:	shl    ecx,0x8
    65017b38:	or     ecx,eax
    65017b3a:	movzx  eax,BYTE PTR [rbx+0x3]
    65017b3e:	shl    ecx,0x8
    65017b41:	or     ecx,eax
    65017b43:	movsxd rax,ecx
    65017b46:	jmp    0x65017b0d
    65017b48:	movzx  eax,BYTE PTR [rbx+0x1]
    65017b4c:	movzx  ecx,BYTE PTR [rbx]
    65017b4f:	shl    rcx,0x8
    65017b53:	or     rcx,rax
    65017b56:	movzx  eax,BYTE PTR [rbx+0x2]
    65017b5a:	shl    rcx,0x8
    65017b5e:	or     rcx,rax
    65017b61:	movzx  eax,BYTE PTR [rbx+0x3]
    65017b65:	shl    rcx,0x8
    65017b69:	or     rcx,rax
    65017b6c:	movzx  eax,BYTE PTR [rbx+0x4]
    65017b70:	shl    rcx,0x8
    65017b74:	or     rcx,rax
    65017b77:	movzx  eax,BYTE PTR [rbx+0x5]
    65017b7b:	shl    rcx,0x8
    65017b7f:	or     rcx,rax
    65017b82:	movzx  eax,BYTE PTR [rbx+0x6]
    65017b86:	shl    rcx,0x8
    65017b8a:	or     rcx,rax
    65017b8d:	movzx  eax,BYTE PTR [rbx+0x7]
    65017b91:	shl    rcx,0x8
    65017b95:	or     rcx,rax
    65017b98:	mov    QWORD PTR [rsp+0x38],rcx
    65017b9d:	jmp    0x65017b12
    65017ba2:	mov    DWORD PTR [rsp+0x30],0x3
    65017baa:	jmp    0x65017f80
    65017baf:	mov    DWORD PTR [rsp+0x30],0x5
    65017bb7:	mov    QWORD PTR [rsp+0x40],rbx
    65017bbc:	mov    DWORD PTR [rsp+0x38],r8d
    65017bc1:	mov    BYTE PTR [r13+0x8],0x1
    65017bc6:	jmp    0x65017f80
    65017bcb:	cmp    edi,0x20
    65017bce:	jae    0x6501810e
    65017bd4:	movzx  eax,BYTE PTR [rbx]
    65017bd7:	mov    r14d,edi
    65017bda:	shl    ax,0x8
    65017bde:	shl    r14,0x6
    65017be2:	movzx  ecx,ax
    65017be5:	movzx  eax,BYTE PTR [rbx+0x1]
    65017be9:	mov    DWORD PTR [r14+r13*1+0x20],0x6
    65017bf2:	or     ecx,eax
    65017bf4:	mov    DWORD PTR [r14+r13*1+0x28],0x0
    65017bfd:	mov    r15,QWORD PTR [r13+0x0]
    65017c01:	mov    rax,QWORD PTR [r15]
    65017c04:	lea    rcx,[rcx+rcx*2]
    65017c08:	lea    r12,[rcx*8+0x3]
    65017c10:	and    r12,0xfffffffffffffffc
    65017c14:	cmp    rax,r12
    65017c17:	jae    0x65017c50
    65017c19:	mov    rsi,QWORD PTR [r15+0x30]
    65017c1d:	cmp    rsi,r12
    65017c20:	jae    0x65017c2a
    65017c22:	add    rsi,rsi
    65017c25:	cmp    rsi,r12
    65017c28:	jb     0x65017c22
    65017c2a:	lea    rcx,[rsi+0x8]
    65017c2e:	call   0x6501fae0
    65017c33:	mov    rcx,QWORD PTR [r15+0x10]
    65017c37:	sub    rsi,r12
    65017c3a:	mov    QWORD PTR [rax],rcx
    65017c3d:	mov    QWORD PTR [r15+0x10],rax
    65017c41:	mov    QWORD PTR [r15],rsi
    65017c44:	lea    rdx,[rax+0x8]
    65017c48:	mov    r9d,0x1
    65017c4e:	jmp    0x65017c5a
    65017c50:	mov    rdx,QWORD PTR [r15+0x8]
    65017c54:	sub    rax,r12
    65017c57:	mov    QWORD PTR [r15],rax
    65017c5a:	test   rdx,rdx
    65017c5d:	lea    rax,[rdx+r12*1]
    65017c61:	mov    QWORD PTR [r15+0x8],rax
    65017c65:	mov    QWORD PTR [r14+r13*1+0x30],rdx
    65017c6a:	je     0x6501810e
    65017c70:	movzx  ecx,BYTE PTR [rbx]
    65017c73:	movzx  eax,BYTE PTR [rbx+0x1]
    65017c77:	shl    cx,0x8
    65017c7b:	or     cx,ax
    65017c7e:	je     0x65017f66
    65017c84:	mov    DWORD PTR [r14+r13*1+0x40],0x0
    65017c8d:	jmp    0x65017e6b
    65017c92:	cmp    edi,0x20
    65017c95:	jae    0x6501810e
    65017c9b:	movzx  eax,BYTE PTR [rbx+0x1]
    65017c9f:	movzx  ecx,BYTE PTR [rbx]
    65017ca2:	mov    r14d,edi
    65017ca5:	shl    ecx,0x8
    65017ca8:	shl    r14,0x6
    65017cac:	or     ecx,eax
    65017cae:	movzx  eax,BYTE PTR [rbx+0x2]
    65017cb2:	shl    ecx,0x8
    65017cb5:	or     ecx,eax
    65017cb7:	movzx  eax,BYTE PTR [rbx+0x3]
    65017cbb:	mov    DWORD PTR [r14+r13*1+0x20],0x6
    65017cc4:	shl    ecx,0x8
    65017cc7:	mov    DWORD PTR [r14+r13*1+0x28],0x0
    65017cd0:	mov    r15,QWORD PTR [r13+0x0]
    65017cd4:	or     ecx,eax
    65017cd6:	mov    rax,QWORD PTR [r15]
    65017cd9:	lea    rcx,[rcx+rcx*2]
    65017cdd:	lea    r12,[rcx*8+0x3]
    65017ce5:	and    r12,0xfffffffffffffffc
    65017ce9:	cmp    rax,r12
    65017cec:	jae    0x65017d29
    65017cee:	mov    rsi,QWORD PTR [r15+0x30]
    65017cf2:	cmp    rsi,r12
    65017cf5:	jae    0x65017cff
    65017cf7:	add    rsi,rsi
    65017cfa:	cmp    rsi,r12
    65017cfd:	jb     0x65017cf7
    65017cff:	lea    rcx,[rsi+0x8]
    65017d03:	call   0x6501fae0
    65017d08:	mov    rcx,QWORD PTR [r15+0x10]
    65017d0c:	sub    rsi,r12
    65017d0f:	mov    QWORD PTR [rax],rcx
    65017d12:	lea    rdx,[rax+0x8]
    65017d16:	mov    QWORD PTR [r15+0x10],rax
    65017d1a:	mov    QWORD PTR [r15],rsi
    65017d1d:	mov    r9d,0x1
    65017d23:	lea    rax,[rdx+r12*1]
    65017d27:	jmp    0x65017d37
    65017d29:	mov    rdx,QWORD PTR [r15+0x8]
    65017d2d:	sub    rax,r12
    65017d30:	mov    QWORD PTR [r15],rax
    65017d33:	lea    rax,[r12+rdx*1]
    65017d37:	test   rdx,rdx
    65017d3a:	mov    QWORD PTR [r15+0x8],rax
    65017d3e:	mov    QWORD PTR [r14+r13*1+0x30],rdx
    65017d43:	je     0x6501810e
    65017d49:	movzx  eax,BYTE PTR [rbx+0x1]
    65017d4d:	movzx  ecx,BYTE PTR [rbx]
    65017d50:	shl    ecx,0x8
    65017d53:	or     ecx,eax
    65017d55:	movzx  eax,BYTE PTR [rbx+0x2]
    65017d59:	shl    ecx,0x8
    65017d5c:	or     ecx,eax
    65017d5e:	movzx  eax,BYTE PTR [rbx+0x3]
    65017d62:	shl    ecx,0x8
    65017d65:	or     ecx,eax
    65017d67:	je     0x65017f66
    65017d6d:	mov    DWORD PTR [r14+r13*1+0x40],0x0
    65017d76:	movzx  eax,BYTE PTR [rbx+0x1]
    65017d7a:	movzx  ecx,BYTE PTR [rbx]
    65017d7d:	shl    ecx,0x8
    65017d80:	or     ecx,eax
    65017d82:	movzx  eax,BYTE PTR [rbx+0x2]
    65017d86:	shl    ecx,0x8
    65017d89:	or     ecx,eax
    65017d8b:	movzx  eax,BYTE PTR [rbx+0x3]
    65017d8f:	shl    ecx,0x8
    65017d92:	or     rcx,rax
    65017d95:	add    edi,0x1
    65017d98:	mov    QWORD PTR [r14+r13*1+0x38],rcx
    65017d9d:	jmp    0x65017840
    65017da2:	cmp    edi,0x20
    65017da5:	jae    0x6501810e
    65017dab:	movzx  eax,BYTE PTR [rbx]
    65017dae:	mov    r14d,edi
    65017db1:	shl    ax,0x8
    65017db5:	shl    r14,0x6
    65017db9:	movzx  ecx,ax
    65017dbc:	movzx  eax,BYTE PTR [rbx+0x1]
    65017dc0:	mov    DWORD PTR [r14+r13*1+0x20],0x7
    65017dc9:	or     ecx,eax
    65017dcb:	mov    DWORD PTR [r14+r13*1+0x28],0x0
    65017dd4:	mov    r15,QWORD PTR [r13+0x0]
    65017dd8:	mov    rax,QWORD PTR [r15]
    65017ddb:	lea    r12,[rcx+rcx*2]
    65017ddf:	shl    r12,0x4
    65017de3:	add    r12,0x3
    65017de7:	and    r12,0xfffffffffffffffc
    65017deb:	cmp    rax,r12
    65017dee:	jae    0x65017e32
    65017df0:	mov    rsi,QWORD PTR [r15+0x30]
    65017df4:	cmp    rsi,r12
    65017df7:	jae    0x65017e08
    65017df9:	data16 xchg ax,ax
    65017dfc:	data16 data16 xchg ax,ax
    65017e00:	add    rsi,rsi
    65017e03:	cmp    rsi,r12
    65017e06:	jb     0x65017e00
    65017e08:	lea    rcx,[rsi+0x8]
    65017e0c:	call   0x6501fae0
    65017e11:	mov    rcx,QWORD PTR [r15+0x10]
    65017e15:	sub    rsi,r12
    65017e18:	mov    QWORD PTR [rax],rcx
    65017e1b:	lea    rdx,[rax+0x8]
    65017e1f:	mov    QWORD PTR [r15+0x10],rax
    65017e23:	mov    QWORD PTR [r15],rsi
    65017e26:	mov    r9d,0x1
    65017e2c:	lea    rax,[rdx+r12*1]
    65017e30:	jmp    0x65017e40
    65017e32:	mov    rdx,QWORD PTR [r15+0x8]
    65017e36:	sub    rax,r12
    65017e39:	mov    QWORD PTR [r15],rax
    65017e3c:	lea    rax,[r12+rdx*1]
    65017e40:	test   rdx,rdx
    65017e43:	mov    QWORD PTR [r15+0x8],rax
    65017e47:	mov    QWORD PTR [r14+r13*1+0x30],rdx
    65017e4c:	je     0x6501810e
    65017e52:	movzx  ecx,BYTE PTR [rbx]
    65017e55:	movzx  eax,BYTE PTR [rbx+0x1]
    65017e59:	shl    cx,0x8
    65017e5d:	or     cx,ax
    65017e60:	je     0x65017f66
    65017e66:	mov    DWORD PTR [r14+r13*1+0x40],r9d
    65017e6b:	movzx  eax,BYTE PTR [rbx]
    65017e6e:	shl    ax,0x8
    65017e72:	movzx  ecx,ax
    65017e75:	movzx  eax,BYTE PTR [rbx+0x1]
    65017e79:	or     rcx,rax
    65017e7c:	add    edi,0x1
    65017e7f:	mov    QWORD PTR [r14+r13*1+0x38],rcx
    65017e84:	jmp    0x65017840
    65017e89:	cmp    edi,0x20
    65017e8c:	jae    0x6501810e
    65017e92:	movzx  eax,BYTE PTR [rbx+0x1]
    65017e96:	movzx  ecx,BYTE PTR [rbx]
    65017e99:	mov    r14d,edi
    65017e9c:	shl    ecx,0x8
    65017e9f:	shl    r14,0x6
    65017ea3:	or     ecx,eax
    65017ea5:	movzx  eax,BYTE PTR [rbx+0x2]
    65017ea9:	shl    ecx,0x8
    65017eac:	or     ecx,eax
    65017eae:	movzx  eax,BYTE PTR [rbx+0x3]
    65017eb2:	mov    DWORD PTR [r14+r13*1+0x20],0x7
    65017ebb:	shl    ecx,0x8
    65017ebe:	mov    DWORD PTR [r14+r13*1+0x28],0x0
    65017ec7:	mov    r15,QWORD PTR [r13+0x0]
    65017ecb:	or     ecx,eax
    65017ecd:	mov    rax,QWORD PTR [r15]
    65017ed0:	lea    r12,[rcx+rcx*2]
    65017ed4:	shl    r12,0x4
    65017ed8:	add    r12,0x3
    65017edc:	and    r12,0xfffffffffffffffc
    65017ee0:	cmp    rax,r12
    65017ee3:	jae    0x65017f22
    65017ee5:	mov    rsi,QWORD PTR [r15+0x30]
    65017ee9:	cmp    rsi,r12
    65017eec:	jae    0x65017ef8
    65017eee:	xchg   ax,ax
    65017ef0:	add    rsi,rsi
    65017ef3:	cmp    rsi,r12
    65017ef6:	jb     0x65017ef0
    65017ef8:	lea    rcx,[rsi+0x8]
    65017efc:	call   0x6501fae0
    65017f01:	mov    rcx,QWORD PTR [r15+0x10]
    65017f05:	sub    rsi,r12
    65017f08:	mov    QWORD PTR [rax],rcx
    65017f0b:	lea    rdx,[rax+0x8]
    65017f0f:	mov    QWORD PTR [r15+0x10],rax
    65017f13:	mov    QWORD PTR [r15],rsi
    65017f16:	mov    r9d,0x1
    65017f1c:	lea    rax,[rdx+r12*1]
    65017f20:	jmp    0x65017f30
    65017f22:	mov    rdx,QWORD PTR [r15+0x8]
    65017f26:	sub    rax,r12
    65017f29:	mov    QWORD PTR [r15],rax
    65017f2c:	lea    rax,[r12+rdx*1]
    65017f30:	test   rdx,rdx
    65017f33:	mov    QWORD PTR [r15+0x8],rax
    65017f37:	mov    QWORD PTR [r14+r13*1+0x30],rdx
    65017f3c:	je     0x6501810e
    65017f42:	movzx  eax,BYTE PTR [rbx+0x1]
    65017f46:	movzx  ecx,BYTE PTR [rbx]
    65017f49:	shl    ecx,0x8
    65017f4c:	or     ecx,eax
    65017f4e:	movzx  eax,BYTE PTR [rbx+0x2]
    65017f52:	shl    ecx,0x8
    65017f55:	or     ecx,eax
    65017f57:	movzx  eax,BYTE PTR [rbx+0x3]
    65017f5b:	shl    ecx,0x8
    65017f5e:	or     ecx,eax
    65017f60:	jne    0x650180b6
    65017f66:	mov    rax,QWORD PTR [r14+r13*1+0x20]
    65017f6b:	lea    rcx,[rsp+0x30]
    65017f70:	mov    QWORD PTR [rcx],rax
    65017f73:	mov    rax,QWORD PTR [r14+r13*1+0x28]
    65017f78:	mov    QWORD PTR [rcx+0x8],rax
    65017f7c:	mov    QWORD PTR [rcx+0x10],rdx
    65017f80:	movsxd rax,edi
    65017f83:	shl    rax,0x6
    65017f87:	lea    r8,[rax+r13*1-0x20]
    65017f8c:	lea    r9,[rax+r13*1+0x8]
    65017f91:	test   edi,edi
    65017f93:	je     0x650180e7
    65017f99:	mov    eax,DWORD PTR [r8+0x20]
    65017f9d:	test   eax,eax
    65017f9f:	je     0x65018028
    65017fa5:	sub    eax,0x1
    65017fa8:	je     0x6501808d
    65017fae:	cmp    eax,0x1
    65017fb1:	jne    0x6501810e
    65017fb7:	mov    eax,DWORD PTR [r8+0x8]
    65017fbb:	mov    rcx,QWORD PTR [r8+0x10]
    65017fbf:	lea    r10,[rsp+0x30]
    65017fc4:	lea    rdx,[rax+rax*2]
    65017fc8:	mov    rax,QWORD PTR [r9]
    65017fcb:	add    rdx,rdx
    65017fce:	mov    QWORD PTR [rcx+rdx*8],rax
    65017fd2:	mov    rax,QWORD PTR [r9+0x8]
    65017fd6:	mov    QWORD PTR [rcx+rdx*8+0x8],rax
    65017fdb:	mov    rax,QWORD PTR [r9+0x10]
    65017fdf:	mov    QWORD PTR [rcx+rdx*8+0x10],rax
    65017fe4:	mov    eax,DWORD PTR [r8+0x8]
    65017fe8:	mov    rcx,QWORD PTR [r8+0x10]
    65017fec:	lea    rdx,[rax+rax*2]
    65017ff0:	mov    rax,QWORD PTR [r10]
    65017ff3:	add    rdx,rdx
    65017ff6:	mov    QWORD PTR [rcx+rdx*8+0x18],rax
    65017ffb:	mov    rax,QWORD PTR [r10+0x8]
    65017fff:	mov    QWORD PTR [rcx+rdx*8+0x20],rax
    65018004:	mov    rax,QWORD PTR [r10+0x10]
    65018008:	mov    QWORD PTR [rcx+rdx*8+0x28],rax
    6501800d:	add    DWORD PTR [r8+0x8],0x1
    65018012:	add    QWORD PTR [r8+0x18],0xffffffffffffffff
    65018017:	je     0x65018062
    65018019:	mov    r9d,0x1
    6501801f:	mov    DWORD PTR [r8+0x20],r9d
    65018023:	jmp    0x65017840
    65018028:	mov    eax,DWORD PTR [r8+0x8]
    6501802c:	mov    rcx,QWORD PTR [r8+0x10]
    65018030:	lea    r10,[rsp+0x30]
    65018035:	lea    rdx,[rax+rax*2]
    65018039:	mov    rax,QWORD PTR [r10]
    6501803c:	mov    QWORD PTR [rcx+rdx*8],rax
    65018040:	mov    rax,QWORD PTR [r10+0x8]
    65018044:	mov    QWORD PTR [rcx+rdx*8+0x8],rax
    65018049:	mov    rax,QWORD PTR [r10+0x10]
    6501804d:	mov    QWORD PTR [rcx+rdx*8+0x10],rax
    65018052:	add    DWORD PTR [r8+0x8],0x1
    65018057:	add    QWORD PTR [r8+0x18],0xffffffffffffffff
    6501805c:	jne    0x6501783a
    65018062:	mov    rax,QWORD PTR [r8]
    65018065:	lea    rcx,[rsp+0x30]
    6501806a:	add    edi,0xffffffff
    6501806d:	mov    QWORD PTR [rcx],rax
    65018070:	mov    rax,QWORD PTR [r8+0x8]
    65018074:	sub    r8,0x40
    65018078:	mov    QWORD PTR [rcx+0x8],rax
    6501807c:	mov    rax,QWORD PTR [r8+0x50]
    65018080:	sub    r9,0x40
    65018084:	mov    QWORD PTR [rcx+0x10],rax
    65018088:	jmp    0x65017f91
    6501808d:	lea    rcx,[rsp+0x30]
    65018092:	mov    DWORD PTR [r8+0x20],0x2
    6501809a:	mov    rax,QWORD PTR [rcx]
    6501809d:	mov    QWORD PTR [r8+0x28],rax
    650180a1:	mov    rax,QWORD PTR [rcx+0x8]
    650180a5:	mov    QWORD PTR [r8+0x30],rax
    650180a9:	mov    rax,QWORD PTR [rcx+0x10]
    650180ad:	mov    QWORD PTR [r8+0x38],rax
    650180b1:	jmp    0x6501783a
    650180b6:	mov    DWORD PTR [r14+r13*1+0x40],r9d
    650180bb:	movzx  eax,BYTE PTR [rbx+0x1]
    650180bf:	movzx  ecx,BYTE PTR [rbx]
    650180c2:	shl    ecx,0x8
    650180c5:	or     ecx,eax
    650180c7:	movzx  eax,BYTE PTR [rbx+0x2]
    650180cb:	shl    ecx,0x8
    650180ce:	or     ecx,eax
    650180d0:	movzx  eax,BYTE PTR [rbx+0x3]
    650180d4:	shl    ecx,0x8
    650180d7:	or     rcx,rax
    650180da:	add    edi,0x1
    650180dd:	mov    QWORD PTR [r14+r13*1+0x38],rcx
    650180e2:	jmp    0x65017840
    650180e7:	lea    rcx,[rsp+0x30]
    650180ec:	add    rbp,0x1
    650180f0:	mov    rax,QWORD PTR [rcx]
    650180f3:	mov    QWORD PTR [r13+0x20],rax
    650180f7:	mov    rax,QWORD PTR [rcx+0x8]
    650180fb:	mov    QWORD PTR [r13+0x28],rax
    650180ff:	mov    rax,QWORD PTR [rcx+0x10]
    65018103:	mov    QWORD PTR [r13+0x30],rax
    65018107:	mov    eax,0x1
    6501810c:	jmp    0x65018115
    6501810e:	or     eax,0xffffffff
    65018111:	jmp    0x65018115
    65018113:	xor    eax,eax
    65018115:	mov    ecx,DWORD PTR [rsp+0xa0]
    6501811c:	sub    rbp,QWORD PTR [rsp+0xa8]
    65018124:	mov    DWORD PTR [r13+0x18],edi
    65018128:	mov    DWORD PTR [r13+0x10],ecx
    6501812c:	mov    ecx,DWORD PTR [rsp+0xb0]
    65018133:	mov    DWORD PTR [r13+0x14],ecx
    65018137:	mov    rcx,QWORD PTR [rsp+0xb8]
    6501813f:	mov    QWORD PTR [rcx],rbp
    65018142:	add    rsp,0x58
    65018146:	pop    r15
    65018148:	pop    r14
    6501814a:	pop    r13
    6501814c:	pop    r12
    6501814e:	pop    rdi
    6501814f:	pop    rsi
    65018150:	pop    rbp
    65018151:	pop    rbx
    65018152:	ret    
    65018153:	nop
    65018154:	or     dh,BYTE PTR [rdi+0x1]
    65018157:	add    BYTE PTR [rdi],dl
    65018159:	ja     0x6501815c
    6501815b:	add    BYTE PTR [rsi],ah
    6501815d:	ja     0x65018160
    6501815f:	add    BYTE PTR [rip+0x60000177],dh        # 0xc50182dc
    65018165:	ja     0x65018168
    65018167:	add    BYTE PTR [rsi],cl
    65018169:	add    DWORD PTR [rcx],0x1050000
    6501816f:	add    al,BYTE PTR [rip+0x5050505]        # 0x6a06867a
    65018175:	add    eax,0x3030303
    6501817a:	add    eax,DWORD PTR [rbx]
    6501817c:	add    eax,DWORD PTR [rbx]
    6501817e:	add    eax,DWORD PTR [rbx]
    65018180:	add    eax,0x5050505
    65018185:	add    eax,0x4040404
    6501818a:	add    al,0x4
    6501818c:	data16 jns 0x65018190
    6501818f:	add    BYTE PTR [rcx+0xf000179],ah
    65018195:	jp     0x65018198
    65018197:	add    BYTE PTR [rdx+rdi*2],ah
    6501819a:	add    DWORD PTR [rax],eax
    6501819c:	rex.RXB jp 0x650181a0
    6501819f:	add    BYTE PTR [rax+0x7a],bh
    650181a2:	add    DWORD PTR [rax],eax
    650181a4:	fidivr DWORD PTR [rdx+0x1]
    650181a7:	add    bl,bh
    650181a9:	jp     0x650181ac
    650181ab:	add    BYTE PTR [rip+0x4800017b],ah        # 0xad01832c
    650181b1:	jnp    0x650181b4
    650181b3:	add    BYTE PTR [rsi],cl
    650181b5:	add    DWORD PTR [rcx],0x1810e00
    650181bb:	add    BYTE PTR [rsi],cl
    650181bd:	add    DWORD PTR [rcx],0x1810e00
    650181c3:	add    BYTE PTR [rsi],cl
    650181c5:	add    DWORD PTR [rcx],0x1810e00
    650181cb:	add    BYTE PTR [rax],cl
    650181cd:	jns    0x650181d0
    650181cf:	add    BYTE PTR [rcx],bl
    650181d1:	jns    0x650181d4
    650181d3:	add    bl,cl
    650181d5:	jnp    0x650181d8
    650181d7:	add    BYTE PTR [rdx-0x5dfffe84],dl
    650181dd:	jge    0x650181e0
    650181df:	add    BYTE PTR [rcx-0x50fffe82],cl
    650181e5:	jnp    0x650181e8
    650181e7:	add    ah,cl
    650181e9:	int3   
    650181ea:	int3   
    650181eb:	int3   
    650181ec:	int3   
    650181ed:	int3   
    650181ee:	int3   
    650181ef:	int3   
    650181f0:	mov    r11,rsp
    650181f3:	mov    QWORD PTR [r11+0x8],rbx
    650181f7:	push   rdi
    650181f8:	sub    rsp,0x860
    650181ff:	mov    rdi,rdx
    65018202:	xor    edx,edx
    65018204:	test   r8,r8
    65018207:	mov    rax,rdx
    6501820a:	mov    QWORD PTR [r11+0x10],rdx
    6501820e:	mov    rbx,r8
    65018211:	je     0x6501821a
    65018213:	mov    rax,QWORD PTR [r8]
    65018216:	mov    QWORD PTR [r11+0x10],rax
    6501821a:	cmp    rdi,rax
    6501821d:	ja     0x65018232
    6501821f:	xor    eax,eax
    65018221:	mov    rbx,QWORD PTR [rsp+0x870]
    65018229:	add    rsp,0x860
    65018230:	pop    rdi
    65018231:	ret    
    65018232:	xor    eax,eax
    65018234:	mov    DWORD PTR [rsp+0x50],edx
    65018238:	mov    DWORD PTR [rsp+0x54],edx
    6501823c:	mov    DWORD PTR [rsp+0x58],edx
    65018240:	lea    rdx,[rsp+0x20]
    65018245:	mov    DWORD PTR [rsp+0x20],eax
    65018249:	mov    DWORD PTR [rsp+0x24],eax
    6501824d:	mov    DWORD PTR [rsp+0x28],eax
    65018251:	mov    DWORD PTR [rsp+0x2c],eax
    65018255:	mov    DWORD PTR [rsp+0x30],eax
    65018259:	mov    DWORD PTR [rsp+0x34],eax
    6501825d:	mov    rax,QWORD PTR [rdx]
    65018260:	lea    r8,[rsp+0x60]
    65018265:	mov    QWORD PTR [r8],rax
    65018268:	mov    rax,QWORD PTR [rdx+0x8]
    6501826c:	mov    QWORD PTR [r8+0x8],rax
    65018270:	mov    rax,QWORD PTR [rdx+0x10]
    65018274:	mov    rdx,rcx
    65018277:	mov    QWORD PTR [r8+0x10],rax
    6501827b:	mov    QWORD PTR [rsp+0x40],r9
    65018280:	lea    r9,[rsp+0x878]
    65018288:	lea    rcx,[rsp+0x40]
    6501828d:	mov    r8,rdi
    65018290:	mov    BYTE PTR [rsp+0x48],0x0
    65018295:	call   0x65017620
    6501829a:	test   eax,eax
    6501829c:	jns    0x650182b2
    6501829e:	or     eax,0xffffffff
    650182a1:	mov    rbx,QWORD PTR [rsp+0x870]
    650182a9:	add    rsp,0x860
    650182b0:	pop    rdi
    650182b1:	ret    
    650182b2:	test   rbx,rbx
    650182b5:	mov    rdx,QWORD PTR [rsp+0x878]
    650182bd:	je     0x650182c2
    650182bf:	mov    QWORD PTR [rbx],rdx
    650182c2:	test   eax,eax
    650182c4:	je     0x6501821f
    650182ca:	mov    rcx,QWORD PTR [rsp+0x890]
    650182d2:	mov    rbx,QWORD PTR [rsp+0x870]
    650182da:	lea    r8,[rsp+0x60]
    650182df:	mov    rax,QWORD PTR [r8]
    650182e2:	cmp    rdx,rdi
    650182e5:	mov    QWORD PTR [rcx],rax
    650182e8:	mov    rax,QWORD PTR [r8+0x8]
    650182ec:	mov    QWORD PTR [rcx+0x8],rax
    650182f0:	mov    rax,QWORD PTR [r8+0x10]
    650182f4:	mov    QWORD PTR [rcx+0x10],rax
    650182f8:	sbb    eax,eax
    650182fa:	add    eax,0x2
    650182fd:	add    rsp,0x860
    65018304:	pop    rdi
    65018305:	ret    
    65018306:	int3   
    65018307:	int3   
    65018308:	int3   
    65018309:	int3   
    6501830a:	int3   
    6501830b:	int3   
    6501830c:	int3   
    6501830d:	int3   
    6501830e:	int3   
    6501830f:	int3   
    65018310:	mov    eax,0x1
    65018315:	cmp    edx,eax
    65018317:	jne    0x65018320
    65018319:	mov    QWORD PTR [rip+0x2b7e0],rcx        # 0x65043b00
    65018320:	ret    0x0
    65018323:	int3   
    65018324:	int3   
    65018325:	int3   
    65018326:	int3   
    65018327:	int3   
    65018328:	int3   
    65018329:	int3   
    6501832a:	int3   
    6501832b:	int3   
    6501832c:	int3   
    6501832d:	int3   
    6501832e:	int3   
    6501832f:	int3   
    65018330:	mov    QWORD PTR [rsp+0x10],rsi
    65018335:	push   rdi
    65018336:	sub    rsp,0x20
    6501833a:	cmp    BYTE PTR [rip+0x2b7b7],0x0        # 0x65043af8
    65018341:	mov    rdi,rdx
    65018344:	mov    esi,ecx
    65018346:	jne    0x650183c4
    65018348:	lea    rcx,[rip+0x1c1f1]        # 0x65034540
    6501834f:	mov    QWORD PTR [rsp+0x30],rbx
    65018354:	mov    BYTE PTR [rip+0x2b79d],0x1        # 0x65043af8
    6501835b:	call   QWORD PTR [rip+0x1bcc7]        # 0x65034028
    65018361:	lea    r8,[rip+0x1c1a0]        # 0x65034508
    65018368:	lea    rcx,[rip+0x1c189]        # 0x650344f8
    6501836f:	mov    edx,0xb
    65018374:	mov    rbx,rax
    65018377:	call   0x6500bc30
    6501837c:	mov    rcx,rbx
    6501837f:	mov    rdx,rax
    65018382:	call   QWORD PTR [rip+0x1bd28]        # 0x650340b0
    65018388:	lea    r8,[rip+0x1c131]        # 0x650344c0
    6501838f:	lea    rcx,[rip+0x1c10a]        # 0x650344a0
    65018396:	mov    edx,0x19
    6501839b:	mov    QWORD PTR [rip+0x2b746],rax        # 0x65043ae8
    650183a2:	call   0x6500bc30
    650183a7:	mov    rcx,rbx
    650183aa:	mov    rdx,rax
    650183ad:	call   QWORD PTR [rip+0x1bcfd]        # 0x650340b0
    650183b3:	mov    QWORD PTR [rip+0x2b736],rax        # 0x65043af0
    650183ba:	call   0x6501ca20
    650183bf:	mov    rbx,QWORD PTR [rsp+0x30]
    650183c4:	mov    rax,QWORD PTR [rip+0x2b71d]        # 0x65043ae8
    650183cb:	test   rax,rax
    650183ce:	je     0x650183d7
    650183d0:	mov    rdx,rdi
    650183d3:	mov    ecx,esi
    650183d5:	call   rax
    650183d7:	mov    rsi,QWORD PTR [rsp+0x38]
    650183dc:	add    rsp,0x20
    650183e0:	pop    rdi
    650183e1:	ret    
    650183e2:	int3   
    650183e3:	int3   
    650183e4:	int3   
    650183e5:	int3   
    650183e6:	int3   
    650183e7:	int3   
    650183e8:	int3   
    650183e9:	int3   
    650183ea:	int3   
    650183eb:	int3   
    650183ec:	int3   
    650183ed:	int3   
    650183ee:	int3   
    650183ef:	int3   
    650183f0:	rex push rdi
    650183f2:	sub    rsp,0x20
    650183f6:	cmp    BYTE PTR [rip+0x2b6fb],0x0        # 0x65043af8
    650183fd:	mov    rdi,rcx
    65018400:	jne    0x6501847e
    65018402:	lea    rcx,[rip+0x1c137]        # 0x65034540
    65018409:	mov    QWORD PTR [rsp+0x30],rbx
    6501840e:	mov    BYTE PTR [rip+0x2b6e3],0x1        # 0x65043af8
    65018415:	call   QWORD PTR [rip+0x1bc0d]        # 0x65034028
    6501841b:	lea    r8,[rip+0x1c0e6]        # 0x65034508
    65018422:	lea    rcx,[rip+0x1c0cf]        # 0x650344f8
    65018429:	mov    edx,0xb
    6501842e:	mov    rbx,rax
    65018431:	call   0x6500bc30
    65018436:	mov    rcx,rbx
    65018439:	mov    rdx,rax
    6501843c:	call   QWORD PTR [rip+0x1bc6e]        # 0x650340b0
    65018442:	lea    r8,[rip+0x1c077]        # 0x650344c0
    65018449:	lea    rcx,[rip+0x1c050]        # 0x650344a0
    65018450:	mov    edx,0x19
    65018455:	mov    QWORD PTR [rip+0x2b68c],rax        # 0x65043ae8
    6501845c:	call   0x6500bc30
    65018461:	mov    rcx,rbx
    65018464:	mov    rdx,rax
    65018467:	call   QWORD PTR [rip+0x1bc43]        # 0x650340b0
    6501846d:	mov    QWORD PTR [rip+0x2b67c],rax        # 0x65043af0
    65018474:	call   0x6501ca20
    65018479:	mov    rbx,QWORD PTR [rsp+0x30]
    6501847e:	mov    rax,QWORD PTR [rip+0x2b66b]        # 0x65043af0
    65018485:	test   rax,rax
    65018488:	je     0x6501848f
    6501848a:	mov    rcx,rdi
    6501848d:	call   rax
    6501848f:	add    rsp,0x20
    65018493:	pop    rdi
    65018494:	ret    
    65018495:	int3   
    65018496:	int3   
    65018497:	int3   
    65018498:	int3   
    65018499:	int3   
    6501849a:	int3   
    6501849b:	int3   
    6501849c:	int3   
    6501849d:	int3   
    6501849e:	int3   
    6501849f:	int3   
    650184a0:	mov    rax,QWORD PTR [rcx]
    650184a3:	mov    QWORD PTR [rdx],rax
    650184a6:	mov    rax,QWORD PTR [rcx+0x8]
    650184aa:	mov    QWORD PTR [rdx+0x8],rax
    650184ae:	mov    rax,QWORD PTR [rcx+0x10]
    650184b2:	mov    QWORD PTR [rdx+0x10],rax
    650184b6:	mov    rax,rdx
    650184b9:	ret    
    650184ba:	int3   
    650184bb:	int3   
    650184bc:	int3   
    650184bd:	int3   
    650184be:	int3   
    650184bf:	int3   
    650184c0:	jmp    0x6501d490
    650184c5:	int3   
    650184c6:	int3   
    650184c7:	int3   
    650184c8:	int3   
    650184c9:	int3   
    650184ca:	int3   
    650184cb:	int3   
    650184cc:	int3   
    650184cd:	int3   
    650184ce:	int3   
    650184cf:	int3   
    650184d0:	mov    QWORD PTR [rsp+0x8],rbx
    650184d5:	push   rdi
    650184d6:	sub    rsp,0x20
    650184da:	mov    ebx,edx
    650184dc:	mov    rdi,rcx
    650184df:	call   0x6501d490
    650184e4:	test   bl,0x1
    650184e7:	je     0x650184f1
    650184e9:	mov    rcx,rdi
    650184ec:	call   0x6501d190
    650184f1:	mov    rax,rdi
    650184f4:	mov    rbx,QWORD PTR [rsp+0x30]
    650184f9:	add    rsp,0x20
    650184fd:	pop    rdi
    650184fe:	ret    
    650184ff:	int3   
    65018500:	rex push rbx
    65018502:	sub    rsp,0x20
    65018506:	mov    rbx,QWORD PTR [rcx]
    65018509:	test   rbx,rbx
    6501850c:	je     0x6501851e
    6501850e:	mov    rcx,rbx
    65018511:	call   0x650173f0
    65018516:	mov    rcx,rbx
    65018519:	call   0x6501d190
    6501851e:	add    rsp,0x20
    65018522:	pop    rbx
    65018523:	ret    
    65018524:	int3   
    65018525:	int3   
    65018526:	int3   
    65018527:	int3   
    65018528:	int3   
    65018529:	int3   
    6501852a:	int3   
    6501852b:	int3   
    6501852c:	int3   
    6501852d:	int3   
    6501852e:	int3   
    6501852f:	int3   
    65018530:	rex push rbx
    65018532:	sub    rsp,0x20
    65018536:	mov    rbx,QWORD PTR [rcx+0x18]
    6501853a:	test   rbx,rbx
    6501853d:	je     0x6501854f
    6501853f:	mov    rcx,rbx
    65018542:	call   0x650173f0
    65018547:	mov    rcx,rbx
    6501854a:	call   0x6501d190
    6501854f:	add    rsp,0x20
    65018553:	pop    rbx
    65018554:	ret    
    65018555:	int3   
    65018556:	int3   
    65018557:	int3   
    65018558:	int3   
    65018559:	int3   
    6501855a:	int3   
    6501855b:	int3   
    6501855c:	int3   
    6501855d:	int3   
    6501855e:	int3   
    6501855f:	int3   
    65018560:	rex push rbx
    65018562:	sub    rsp,0x20
    65018566:	cmp    QWORD PTR [rcx+0x48],0x10
    6501856b:	mov    rbx,rcx
    6501856e:	jb     0x65018579
    65018570:	mov    rcx,QWORD PTR [rcx+0x30]
    65018574:	call   0x6501d190
    65018579:	mov    QWORD PTR [rbx+0x48],0xf
    65018581:	mov    QWORD PTR [rbx+0x40],0x0
    65018589:	mov    BYTE PTR [rbx+0x30],0x0
    6501858d:	cmp    QWORD PTR [rbx+0x20],0x10
    65018592:	jb     0x6501859d
    65018594:	mov    rcx,QWORD PTR [rbx+0x8]
    65018598:	call   0x6501d190
    6501859d:	mov    QWORD PTR [rbx+0x20],0xf
    650185a5:	mov    QWORD PTR [rbx+0x18],0x0
    650185ad:	mov    BYTE PTR [rbx+0x8],0x0
    650185b1:	add    rsp,0x20
    650185b5:	pop    rbx
    650185b6:	ret    
    650185b7:	int3   
    650185b8:	int3   
    650185b9:	int3   
    650185ba:	int3   
    650185bb:	int3   
    650185bc:	int3   
    650185bd:	int3   
    650185be:	int3   
    650185bf:	int3   
    650185c0:	mov    QWORD PTR [rsp+0x8],rcx
    650185c5:	push   rsi
    650185c6:	push   rdi
    650185c7:	push   r12
    650185c9:	push   r13
    650185cb:	push   r14
    650185cd:	sub    rsp,0x30
    650185d1:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    650185da:	mov    QWORD PTR [rsp+0x70],rbx
    650185df:	mov    QWORD PTR [rsp+0x78],rbp
    650185e4:	mov    rbp,r8
    650185e7:	mov    rdi,rdx
    650185ea:	mov    rsi,rcx
    650185ed:	xor    ebx,ebx
    650185ef:	mov    DWORD PTR [rsp+0x68],ebx
    650185f3:	mov    rax,QWORD PTR [rdx]
    650185f6:	mov    rcx,QWORD PTR [rax-0x18]
    650185fa:	test   rcx,rcx
    650185fd:	je     0x6501860d
    650185ff:	mov    rax,QWORD PTR [rcx]
    65018602:	call   QWORD PTR [rax+0x20]
    65018605:	mov    rcx,rax
    65018608:	test   rax,rax
    6501860b:	jne    0x65018621
    6501860d:	lea    rcx,[rip+0x29a8c]        # 0x650420a0
    65018614:	mov    rax,QWORD PTR [rip+0x29a85]        # 0x650420a0
    6501861b:	call   QWORD PTR [rax+0x20]
    6501861e:	mov    rcx,rax
    65018621:	test   rcx,rcx
    65018624:	setne  bl
    65018627:	test   ebx,ebx
    65018629:	jne    0x65018636
    6501862b:	mov    ecx,0x80004005
    65018630:	call   0x65001050
    65018635:	int3   
    65018636:	mov    rax,QWORD PTR [rcx]
    65018639:	call   QWORD PTR [rax+0x18]
    6501863c:	add    rax,0x18
    65018640:	mov    QWORD PTR [rsi],rax
    65018643:	mov    ecx,0x1
    65018648:	mov    DWORD PTR [rsp+0x68],ecx
    6501864c:	mov    r13,QWORD PTR [rbp+0x0]
    65018650:	movsxd r12,DWORD PTR [r13-0x10]
    65018654:	mov    r14,QWORD PTR [rdi]
    65018657:	movsxd rbx,DWORD PTR [r14-0x10]
    6501865b:	lea    ebp,[rbx+r12*1]
    6501865f:	sub    ecx,DWORD PTR [rax-0x8]
    65018662:	mov    eax,DWORD PTR [rax-0xc]
    65018665:	sub    eax,ebp
    65018667:	or     eax,ecx
    65018669:	jge    0x65018675
    6501866b:	mov    edx,ebp
    6501866d:	mov    rcx,rsi
    65018670:	call   0x65002640
    65018675:	mov    rdi,QWORD PTR [rsi]
    65018678:	add    rbx,rbx
    6501867b:	mov    r9,rbx
    6501867e:	mov    r8,r14
    65018681:	mov    rdx,rbx
    65018684:	mov    rcx,rdi
    65018687:	call   0x6501d640
    6501868c:	mov    rdx,r12
    6501868f:	add    rdx,rdx
    65018692:	lea    rcx,[rbx+rdi*1]
    65018696:	mov    r9,rdx
    65018699:	mov    r8,r13
    6501869c:	call   0x6501d640
    650186a1:	test   ebp,ebp
    650186a3:	js     0x650186c1
    650186a5:	mov    rax,QWORD PTR [rsi]
    650186a8:	cmp    ebp,DWORD PTR [rax-0xc]
    650186ab:	jg     0x650186c1
    650186ad:	mov    DWORD PTR [rax-0x10],ebp
    650186b0:	movsxd rcx,ebp
    650186b3:	mov    rax,QWORD PTR [rsi]
    650186b6:	mov    WORD PTR [rax+rcx*2],0x0
    650186bc:	mov    rax,rsi
    650186bf:	jmp    0x650186cc
    650186c1:	mov    ecx,0x80070057
    650186c6:	call   0x65001050
    650186cb:	nop
    650186cc:	mov    rbx,QWORD PTR [rsp+0x70]
    650186d1:	mov    rbp,QWORD PTR [rsp+0x78]
    650186d6:	add    rsp,0x30
    650186da:	pop    r14
    650186dc:	pop    r13
    650186de:	pop    r12
    650186e0:	pop    rdi
    650186e1:	pop    rsi
    650186e2:	ret    
    650186e3:	int3   
    650186e4:	int3   
    650186e5:	int3   
    650186e6:	int3   
    650186e7:	int3   
    650186e8:	int3   
    650186e9:	int3   
    650186ea:	int3   
    650186eb:	int3   
    650186ec:	int3   
    650186ed:	int3   
    650186ee:	int3   
    650186ef:	int3   
    650186f0:	rex push rbp
    650186f2:	sub    rsp,0x20
    650186f6:	mov    rbp,rdx
    650186f9:	mov    eax,DWORD PTR [rbp+0x68]
    650186fc:	and    eax,0x1
    650186ff:	test   eax,eax
    65018701:	je     0x65018710
    65018703:	and    DWORD PTR [rbp+0x68],0xfffffffe
    65018707:	mov    rcx,QWORD PTR [rbp+0x60]
    6501870b:	call   0x65001cb0
    65018710:	add    rsp,0x20
    65018714:	pop    rbp
    65018715:	ret    
    65018716:	int3   
    65018717:	int3   
    65018718:	int3   
    65018719:	int3   
    6501871a:	int3   
    6501871b:	int3   
    6501871c:	int3   
    6501871d:	int3   
    6501871e:	int3   
    6501871f:	int3   
    65018720:	mov    QWORD PTR [rsp+0x8],rcx
    65018725:	push   rsi
    65018726:	push   rdi
    65018727:	push   r12
    65018729:	push   r13
    6501872b:	push   r14
    6501872d:	sub    rsp,0x30
    65018731:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501873a:	mov    QWORD PTR [rsp+0x70],rbx
    6501873f:	mov    QWORD PTR [rsp+0x78],rbp
    65018744:	mov    r13,r8
    65018747:	mov    rbx,rdx
    6501874a:	mov    rsi,rcx
    6501874d:	xor    r12d,r12d
    65018750:	mov    DWORD PTR [rsp+0x68],r12d
    65018755:	mov    rax,QWORD PTR [rdx]
    65018758:	mov    rcx,QWORD PTR [rax-0x18]
    6501875c:	test   rcx,rcx
    6501875f:	je     0x6501876f
    65018761:	mov    rax,QWORD PTR [rcx]
    65018764:	call   QWORD PTR [rax+0x20]
    65018767:	mov    rdx,rax
    6501876a:	test   rax,rax
    6501876d:	jne    0x65018783
    6501876f:	lea    rcx,[rip+0x2992a]        # 0x650420a0
    65018776:	mov    rax,QWORD PTR [rip+0x29923]        # 0x650420a0
    6501877d:	call   QWORD PTR [rax+0x20]
    65018780:	mov    rdx,rax
    65018783:	mov    ecx,r12d
    65018786:	test   rdx,rdx
    65018789:	setne  cl
    6501878c:	test   ecx,ecx
    6501878e:	jne    0x6501879b
    65018790:	mov    ecx,0x80004005
    65018795:	call   0x65001050
    6501879a:	int3   
    6501879b:	mov    rax,QWORD PTR [rdx]
    6501879e:	mov    rcx,rdx
    650187a1:	call   QWORD PTR [rax+0x18]
    650187a4:	lea    r8,[rax+0x18]
    650187a8:	mov    QWORD PTR [rsi],r8
    650187ab:	mov    edx,0x1
    650187b0:	mov    DWORD PTR [rsp+0x68],edx
    650187b4:	test   r13,r13
    650187b7:	je     0x650187cc
    650187b9:	xor    eax,eax
    650187bb:	or     rcx,0xffffffffffffffff
    650187bf:	mov    rdi,r13
    650187c2:	repnz scas ax,WORD PTR es:[rdi]
    650187c5:	not    rcx
    650187c8:	lea    r12,[rcx-0x1]
    650187cc:	mov    r14,QWORD PTR [rbx]
    650187cf:	movsxd rdi,DWORD PTR [r14-0x10]
    650187d3:	lea    ebp,[r12+rdi*1]
    650187d7:	sub    edx,DWORD PTR [r8-0x8]
    650187db:	mov    eax,DWORD PTR [r8-0xc]
    650187df:	sub    eax,ebp
    650187e1:	or     eax,edx
    650187e3:	jge    0x650187ef
    650187e5:	mov    edx,ebp
    650187e7:	mov    rcx,rsi
    650187ea:	call   0x65002640
    650187ef:	mov    rbx,QWORD PTR [rsi]
    650187f2:	add    rdi,rdi
    650187f5:	mov    r9,rdi
    650187f8:	mov    r8,r14
    650187fb:	mov    rdx,rdi
    650187fe:	mov    rcx,rbx
    65018801:	call   0x6501d640
    65018806:	movsxd rdx,r12d
    65018809:	add    rdx,rdx
    6501880c:	lea    rcx,[rdi+rbx*1]
    65018810:	mov    r9,rdx
    65018813:	mov    r8,r13
    65018816:	call   0x6501d640
    6501881b:	test   ebp,ebp
    6501881d:	js     0x6501883b
    6501881f:	mov    rax,QWORD PTR [rsi]
    65018822:	cmp    ebp,DWORD PTR [rax-0xc]
    65018825:	jg     0x6501883b
    65018827:	mov    DWORD PTR [rax-0x10],ebp
    6501882a:	movsxd rcx,ebp
    6501882d:	mov    rax,QWORD PTR [rsi]
    65018830:	mov    WORD PTR [rax+rcx*2],0x0
    65018836:	mov    rax,rsi
    65018839:	jmp    0x65018846
    6501883b:	mov    ecx,0x80070057
    65018840:	call   0x65001050
    65018845:	nop
    65018846:	mov    rbx,QWORD PTR [rsp+0x70]
    6501884b:	mov    rbp,QWORD PTR [rsp+0x78]
    65018850:	add    rsp,0x30
    65018854:	pop    r14
    65018856:	pop    r13
    65018858:	pop    r12
    6501885a:	pop    rdi
    6501885b:	pop    rsi
    6501885c:	ret    
    6501885d:	int3   
    6501885e:	int3   
    6501885f:	int3   
    65018860:	rex push rbp
    65018862:	sub    rsp,0x20
    65018866:	mov    rbp,rdx
    65018869:	mov    eax,DWORD PTR [rbp+0x68]
    6501886c:	and    eax,0x1
    6501886f:	test   eax,eax
    65018871:	je     0x65018880
    65018873:	and    DWORD PTR [rbp+0x68],0xfffffffe
    65018877:	mov    rcx,QWORD PTR [rbp+0x60]
    6501887b:	call   0x65001cb0
    65018880:	add    rsp,0x20
    65018884:	pop    rbp
    65018885:	ret    
    65018886:	int3   
    65018887:	int3   
    65018888:	int3   
    65018889:	int3   
    6501888a:	int3   
    6501888b:	int3   
    6501888c:	int3   
    6501888d:	int3   
    6501888e:	int3   
    6501888f:	int3   
    65018890:	rex push rbx
    65018892:	sub    rsp,0x20
    65018896:	mov    rbx,rcx
    65018899:	call   0x6501d400
    6501889e:	lea    r11,[rip+0x1bcf3]        # 0x65034598
    650188a5:	mov    QWORD PTR [rbx],r11
    650188a8:	mov    rax,rbx
    650188ab:	add    rsp,0x20
    650188af:	pop    rbx
    650188b0:	ret    
    650188b1:	int3   
    650188b2:	int3   
    650188b3:	int3   
    650188b4:	int3   
    650188b5:	int3   
    650188b6:	int3   
    650188b7:	int3   
    650188b8:	int3   
    650188b9:	int3   
    650188ba:	int3   
    650188bb:	int3   
    650188bc:	int3   
    650188bd:	int3   
    650188be:	int3   
    650188bf:	int3   
    650188c0:	rex push rbx
    650188c2:	sub    rsp,0x20
    650188c6:	lea    rax,[rip+0x1e6eb]        # 0x65036fb8
    650188cd:	mov    rbx,rcx
    650188d0:	mov    QWORD PTR [rcx],rax
    650188d3:	cmp    QWORD PTR [rcx+0x38],0x10
    650188d8:	jb     0x650188e3
    650188da:	mov    rcx,QWORD PTR [rcx+0x20]
    650188de:	call   0x6501d190
    650188e3:	mov    QWORD PTR [rbx+0x38],0xf
    650188eb:	mov    QWORD PTR [rbx+0x30],0x0
    650188f3:	mov    rcx,rbx
    650188f6:	mov    BYTE PTR [rbx+0x20],0x0
    650188fa:	add    rsp,0x20
    650188fe:	pop    rbx
    650188ff:	jmp    0x6501d320
    65018904:	int3   
    65018905:	int3   
    65018906:	int3   
    65018907:	int3   
    65018908:	int3   
    65018909:	int3   
    6501890a:	int3   
    6501890b:	int3   
    6501890c:	int3   
    6501890d:	int3   
    6501890e:	int3   
    6501890f:	int3   
    65018910:	mov    QWORD PTR [rsp+0x8],rbx
    65018915:	push   rdi
    65018916:	sub    rsp,0x20
    6501891a:	lea    rax,[rip+0x1e697]        # 0x65036fb8
    65018921:	mov    edi,edx
    65018923:	mov    rbx,rcx
    65018926:	mov    QWORD PTR [rcx],rax
    65018929:	cmp    QWORD PTR [rcx+0x38],0x10
    6501892e:	jb     0x65018939
    65018930:	mov    rcx,QWORD PTR [rcx+0x20]
    65018934:	call   0x6501d190
    65018939:	mov    QWORD PTR [rbx+0x38],0xf
    65018941:	mov    QWORD PTR [rbx+0x30],0x0
    65018949:	mov    rcx,rbx
    6501894c:	mov    BYTE PTR [rbx+0x20],0x0
    65018950:	call   0x6501d320
    65018955:	test   dil,0x1
    65018959:	je     0x65018963
    6501895b:	mov    rcx,rbx
    6501895e:	call   0x6501d190
    65018963:	mov    rax,rbx
    65018966:	mov    rbx,QWORD PTR [rsp+0x30]
    6501896b:	add    rsp,0x20
    6501896f:	pop    rdi
    65018970:	ret    
    65018971:	int3   
    65018972:	int3   
    65018973:	int3   
    65018974:	int3   
    65018975:	int3   
    65018976:	int3   
    65018977:	int3   
    65018978:	int3   
    65018979:	int3   
    6501897a:	int3   
    6501897b:	int3   
    6501897c:	int3   
    6501897d:	int3   
    6501897e:	int3   
    6501897f:	int3   
    65018980:	sub    rsp,0x98
    65018987:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65018990:	mov    QWORD PTR [rsp+0x48],0xf
    65018999:	mov    QWORD PTR [rsp+0x40],0x0
    650189a2:	mov    BYTE PTR [rsp+0x30],0x0
    650189a7:	xor    r8d,r8d
    650189aa:	lea    edx,[r8+0x12]
    650189ae:	lea    rcx,[rsp+0x28]
    650189b3:	call   0x65002330
    650189b8:	lea    rcx,[rsp+0x30]
    650189bd:	mov    rdx,QWORD PTR [rsp+0x48]
    650189c2:	cmp    rdx,0x10
    650189c6:	cmovae rcx,QWORD PTR [rsp+0x30]
    650189cc:	mov    r9d,0x12
    650189d2:	lea    r8,[rip+0x204b7]        # 0x65038e90
    650189d9:	call   0x6501d640
    650189de:	mov    QWORD PTR [rsp+0x40],0x12
    650189e7:	lea    rax,[rsp+0x30]
    650189ec:	cmp    QWORD PTR [rsp+0x48],0x10
    650189f2:	cmovae rax,QWORD PTR [rsp+0x30]
    650189f8:	mov    BYTE PTR [rax+0x12],0x0
    650189fc:	lea    rcx,[rsp+0x50]
    65018a01:	call   0x6501d1a0
    65018a06:	nop
    65018a07:	lea    rax,[rip+0x1c712]        # 0x65035120
    65018a0e:	mov    QWORD PTR [rsp+0x50],rax
    65018a13:	mov    QWORD PTR [rsp+0x88],0xf
    65018a1f:	mov    QWORD PTR [rsp+0x80],0x0
    65018a2b:	mov    BYTE PTR [rsp+0x70],0x0
    65018a30:	or     r9,0xffffffffffffffff
    65018a34:	xor    r8d,r8d
    65018a37:	lea    rdx,[rsp+0x28]
    65018a3c:	lea    rcx,[rsp+0x68]
    65018a41:	call   0x65001e20
    65018a46:	nop
    65018a47:	lea    rax,[rip+0x1c6ea]        # 0x65035138
    65018a4e:	mov    QWORD PTR [rsp+0x50],rax
    65018a53:	lea    rdx,[rip+0x2883e]        # 0x65041298
    65018a5a:	lea    rcx,[rsp+0x50]
    65018a5f:	call   0x6501daf0
    65018a64:	int3   
    65018a65:	int3   
    65018a66:	int3   
    65018a67:	int3   
    65018a68:	int3   
    65018a69:	int3   
    65018a6a:	int3   
    65018a6b:	int3   
    65018a6c:	int3   
    65018a6d:	int3   
    65018a6e:	int3   
    65018a6f:	int3   
    65018a70:	rex push rbp
    65018a72:	sub    rsp,0x20
    65018a76:	mov    rbp,rdx
    65018a79:	lea    rcx,[rbp+0x28]
    65018a7d:	call   0x65001c70
    65018a82:	add    rsp,0x20
    65018a86:	pop    rbp
    65018a87:	ret    
    65018a88:	int3   
    65018a89:	int3   
    65018a8a:	int3   
    65018a8b:	int3   
    65018a8c:	int3   
    65018a8d:	int3   
    65018a8e:	int3   
    65018a8f:	int3   
    65018a90:	rex push rbp
    65018a92:	sub    rsp,0x20
    65018a96:	mov    rbp,rdx
    65018a99:	lea    rcx,[rbp+0x50]
    65018a9d:	call   0x6501d320
    65018aa2:	add    rsp,0x20
    65018aa6:	pop    rbp
    65018aa7:	ret    
    65018aa8:	int3   
    65018aa9:	int3   
    65018aaa:	int3   
    65018aab:	int3   
    65018aac:	int3   
    65018aad:	int3   
    65018aae:	int3   
    65018aaf:	int3   
    65018ab0:	mov    rax,rsp
    65018ab3:	push   rdi
    65018ab4:	push   r12
    65018ab6:	push   r13
    65018ab8:	sub    rsp,0x130
    65018abf:	mov    QWORD PTR [rsp+0x98],0xfffffffffffffffe
    65018acb:	mov    QWORD PTR [rax+0x8],rbx
    65018acf:	mov    QWORD PTR [rax+0x10],rbp
    65018ad3:	mov    QWORD PTR [rax+0x18],rsi
    65018ad7:	mov    rsi,r9
    65018ada:	mov    rbp,r8
    65018add:	mov    r12,rdx
    65018ae0:	mov    rbx,rcx
    65018ae3:	xor    r13d,r13d
    65018ae6:	mov    DWORD PTR [rax-0xc8],r13d
    65018aed:	lea    ecx,[r13+0x38]
    65018af1:	call   0x6501da50
    65018af6:	mov    rdi,rax
    65018af9:	test   rax,rax
    65018afc:	je     0x65018b0d
    65018afe:	mov    edx,0x2000
    65018b03:	mov    rcx,rax
    65018b06:	call   0x65017460
    65018b0b:	jmp    0x65018b10
    65018b0d:	mov    rdi,r13
    65018b10:	mov    QWORD PTR [rsp+0xe0],rdi
    65018b18:	lea    rax,[rsp+0x80]
    65018b20:	mov    QWORD PTR [rsp+0x20],rax
    65018b25:	mov    r9,rdi
    65018b28:	mov    r8,rsi
    65018b2b:	mov    rdx,rbp
    65018b2e:	mov    rcx,r12
    65018b31:	call   0x650181f0
    65018b36:	test   eax,eax
    65018b38:	je     0x65018c9d
    65018b3e:	sub    eax,0x1
    65018b41:	je     0x65018c58
    65018b47:	cmp    eax,0x1
    65018b4a:	je     0x65018c13
    65018b50:	mov    QWORD PTR [rsp+0x78],0xf
    65018b59:	mov    QWORD PTR [rsp+0x70],r13
    65018b5e:	mov    BYTE PTR [rsp+0x60],0x0
    65018b63:	mov    r9d,0xb
    65018b69:	lea    r8,[rip+0x1bb10]        # 0x65034680
    65018b70:	lea    edx,[r9+0x4]
    65018b74:	lea    rcx,[rsp+0x60]
    65018b79:	call   0x6501d640
    65018b7e:	mov    QWORD PTR [rsp+0x70],0xb
    65018b87:	lea    rax,[rsp+0x60]
    65018b8c:	cmp    QWORD PTR [rsp+0x78],0x10
    65018b92:	cmovae rax,QWORD PTR [rsp+0x60]
    65018b98:	mov    BYTE PTR [rax+0xb],0x0
    65018b9c:	lea    rcx,[rsp+0xa0]
    65018ba4:	call   0x6501d1a0
    65018ba9:	nop
    65018baa:	lea    rax,[rip+0x1e407]        # 0x65036fb8
    65018bb1:	mov    QWORD PTR [rsp+0xa0],rax
    65018bb9:	mov    QWORD PTR [rsp+0xd8],0xf
    65018bc5:	mov    QWORD PTR [rsp+0xd0],r13
    65018bcd:	mov    BYTE PTR [rsp+0xc0],0x0
    65018bd5:	or     r9,0xffffffffffffffff
    65018bd9:	xor    r8d,r8d
    65018bdc:	lea    rdx,[rsp+0x58]
    65018be1:	lea    rcx,[rsp+0xb8]
    65018be9:	call   0x65001e20
    65018bee:	nop
    65018bef:	lea    rax,[rip+0x1ba12]        # 0x65034608
    65018bf6:	mov    QWORD PTR [rsp+0xa0],rax
    65018bfe:	lea    rdx,[rip+0x2835b]        # 0x65040f60
    65018c05:	lea    rcx,[rsp+0xa0]
    65018c0d:	call   0x6501daf0
    65018c12:	nop
    65018c13:	lea    rcx,[rsp+0x80]
    65018c1b:	mov    rax,QWORD PTR [rcx]
    65018c1e:	mov    QWORD PTR [rbx],rax
    65018c21:	mov    rax,QWORD PTR [rcx+0x8]
    65018c25:	mov    QWORD PTR [rbx+0x8],rax
    65018c29:	mov    rax,QWORD PTR [rcx+0x10]
    65018c2d:	mov    QWORD PTR [rbx+0x10],rax
    65018c31:	mov    rsi,QWORD PTR [rbx+0x18]
    65018c35:	cmp    rdi,rsi
    65018c38:	je     0x65018c4f
    65018c3a:	test   rsi,rsi
    65018c3d:	je     0x65018c4f
    65018c3f:	mov    rcx,rsi
    65018c42:	call   0x650173f0
    65018c47:	mov    rcx,rsi
    65018c4a:	call   0x6501d190
    65018c4f:	mov    QWORD PTR [rbx+0x18],rdi
    65018c53:	jmp    0x65018d7c
    65018c58:	lea    rcx,[rsp+0x80]
    65018c60:	mov    rax,QWORD PTR [rcx]
    65018c63:	mov    QWORD PTR [rbx],rax
    65018c66:	mov    rax,QWORD PTR [rcx+0x8]
    65018c6a:	mov    QWORD PTR [rbx+0x8],rax
    65018c6e:	mov    rax,QWORD PTR [rcx+0x10]
    65018c72:	mov    QWORD PTR [rbx+0x10],rax
    65018c76:	mov    rsi,QWORD PTR [rbx+0x18]
    65018c7a:	cmp    rdi,rsi
    65018c7d:	je     0x65018c94
    65018c7f:	test   rsi,rsi
    65018c82:	je     0x65018c94
    65018c84:	mov    rcx,rsi
    65018c87:	call   0x650173f0
    65018c8c:	mov    rcx,rsi
    65018c8f:	call   0x6501d190
    65018c94:	mov    QWORD PTR [rbx+0x18],rdi
    65018c98:	jmp    0x65018d7c
    65018c9d:	mov    QWORD PTR [rsp+0x50],0xf
    65018ca6:	mov    QWORD PTR [rsp+0x48],r13
    65018cab:	mov    BYTE PTR [rsp+0x38],0x0
    65018cb0:	xor    r8d,r8d
    65018cb3:	lea    edx,[r8+0x12]
    65018cb7:	lea    rcx,[rsp+0x30]
    65018cbc:	call   0x65002330
    65018cc1:	lea    rcx,[rsp+0x38]
    65018cc6:	mov    rdx,QWORD PTR [rsp+0x50]
    65018ccb:	cmp    rdx,0x10
    65018ccf:	cmovae rcx,QWORD PTR [rsp+0x38]
    65018cd5:	mov    r9d,0x12
    65018cdb:	lea    r8,[rip+0x1b986]        # 0x65034668
    65018ce2:	call   0x6501d640
    65018ce7:	mov    QWORD PTR [rsp+0x48],0x12
    65018cf0:	lea    rax,[rsp+0x38]
    65018cf5:	cmp    QWORD PTR [rsp+0x50],0x10
    65018cfb:	cmovae rax,QWORD PTR [rsp+0x38]
    65018d01:	mov    BYTE PTR [rax+0x12],0x0
    65018d05:	lea    rcx,[rsp+0xe8]
    65018d0d:	call   0x6501d1a0
    65018d12:	nop
    65018d13:	lea    rax,[rip+0x1e29e]        # 0x65036fb8
    65018d1a:	mov    QWORD PTR [rsp+0xe8],rax
    65018d22:	mov    QWORD PTR [rsp+0x120],0xf
    65018d2e:	mov    QWORD PTR [rsp+0x118],r13
    65018d36:	mov    BYTE PTR [rsp+0x108],0x0
    65018d3e:	or     r9,0xffffffffffffffff
    65018d42:	xor    r8d,r8d
    65018d45:	lea    rdx,[rsp+0x30]
    65018d4a:	lea    rcx,[rsp+0x100]
    65018d52:	call   0x65001e20
    65018d57:	nop
    65018d58:	lea    rax,[rip+0x1b8a9]        # 0x65034608
    65018d5f:	mov    QWORD PTR [rsp+0xe8],rax
    65018d67:	lea    rdx,[rip+0x281f2]        # 0x65040f60
    65018d6e:	lea    rcx,[rsp+0xe8]
    65018d76:	call   0x6501daf0
    65018d7b:	nop
    65018d7c:	lea    r11,[rsp+0x130]
    65018d84:	mov    rbx,QWORD PTR [r11+0x20]
    65018d88:	mov    rbp,QWORD PTR [r11+0x28]
    65018d8c:	mov    rsi,QWORD PTR [r11+0x30]
    65018d90:	mov    rsp,r11
    65018d93:	pop    r13
    65018d95:	pop    r12
    65018d97:	pop    rdi
    65018d98:	ret    
    65018d99:	int3   
    65018d9a:	int3   
    65018d9b:	int3   
    65018d9c:	int3   
    65018d9d:	int3   
    65018d9e:	int3   
    65018d9f:	int3   
    65018da0:	rex push rbp
    65018da2:	sub    rsp,0x20
    65018da6:	mov    rbp,rdx
    65018da9:	lea    rcx,[rbp+0xe0]
    65018db0:	call   0x65018500
    65018db5:	add    rsp,0x20
    65018db9:	pop    rbp
    65018dba:	ret    
    65018dbb:	int3   
    65018dbc:	int3   
    65018dbd:	int3   
    65018dbe:	int3   
    65018dbf:	int3   
    65018dc0:	rex push rbp
    65018dc2:	sub    rsp,0x20
    65018dc6:	mov    rbp,rdx
    65018dc9:	lea    rcx,[rbp+0x30]
    65018dcd:	call   0x65001c70
    65018dd2:	add    rsp,0x20
    65018dd6:	pop    rbp
    65018dd7:	ret    
    65018dd8:	int3   
    65018dd9:	int3   
    65018dda:	int3   
    65018ddb:	int3   
    65018ddc:	int3   
    65018ddd:	int3   
    65018dde:	int3   
    65018ddf:	int3   
    65018de0:	rex push rbp
    65018de2:	sub    rsp,0x20
    65018de6:	mov    rbp,rdx
    65018de9:	lea    rcx,[rbp+0xe8]
    65018df0:	call   0x6501d320
    65018df5:	add    rsp,0x20
    65018df9:	pop    rbp
    65018dfa:	ret    
    65018dfb:	int3   
    65018dfc:	int3   
    65018dfd:	int3   
    65018dfe:	int3   
    65018dff:	int3   
    65018e00:	rex push rbp
    65018e02:	sub    rsp,0x20
    65018e06:	mov    rbp,rdx
    65018e09:	lea    rcx,[rbp+0x58]
    65018e0d:	call   0x65001c70
    65018e12:	add    rsp,0x20
    65018e16:	pop    rbp
    65018e17:	ret    
    65018e18:	int3   
    65018e19:	int3   
    65018e1a:	int3   
    65018e1b:	int3   
    65018e1c:	int3   
    65018e1d:	int3   
    65018e1e:	int3   
    65018e1f:	int3   
    65018e20:	rex push rbp
    65018e22:	sub    rsp,0x20
    65018e26:	mov    rbp,rdx
    65018e29:	lea    rcx,[rbp+0xa0]
    65018e30:	call   0x6501d320
    65018e35:	add    rsp,0x20
    65018e39:	pop    rbp
    65018e3a:	ret    
    65018e3b:	int3   
    65018e3c:	int3   
    65018e3d:	int3   
    65018e3e:	int3   
    65018e3f:	int3   
    65018e40:	mov    QWORD PTR [rsp+0x8],rcx
    65018e45:	push   rdi
    65018e46:	sub    rsp,0x30
    65018e4a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65018e53:	mov    QWORD PTR [rsp+0x48],rbx
    65018e58:	mov    rbx,rdx
    65018e5b:	mov    rdi,rcx
    65018e5e:	call   0x6501d270
    65018e63:	nop
    65018e64:	lea    rax,[rip+0x1e14d]        # 0x65036fb8
    65018e6b:	mov    QWORD PTR [rdi],rax
    65018e6e:	lea    rdx,[rbx+0x18]
    65018e72:	lea    rcx,[rdi+0x18]
    65018e76:	mov    QWORD PTR [rcx+0x20],0xf
    65018e7e:	mov    QWORD PTR [rcx+0x18],0x0
    65018e86:	mov    BYTE PTR [rcx+0x8],0x0
    65018e8a:	or     r9,0xffffffffffffffff
    65018e8e:	xor    r8d,r8d
    65018e91:	call   0x65001e20
    65018e96:	nop
    65018e97:	lea    rax,[rip+0x1b76a]        # 0x65034608
    65018e9e:	mov    QWORD PTR [rdi],rax
    65018ea1:	mov    rax,rdi
    65018ea4:	mov    rbx,QWORD PTR [rsp+0x48]
    65018ea9:	add    rsp,0x30
    65018ead:	pop    rdi
    65018eae:	ret    
    65018eaf:	int3   
    65018eb0:	rex push rbp
    65018eb2:	sub    rsp,0x20
    65018eb6:	mov    rbp,rdx
    65018eb9:	mov    rcx,QWORD PTR [rbp+0x40]
    65018ebd:	call   0x6501d320
    65018ec2:	add    rsp,0x20
    65018ec6:	pop    rbp
    65018ec7:	ret    
    65018ec8:	int3   
    65018ec9:	int3   
    65018eca:	int3   
    65018ecb:	int3   
    65018ecc:	int3   
    65018ecd:	int3   
    65018ece:	int3   
    65018ecf:	int3   
    65018ed0:	mov    QWORD PTR [rsp+0x10],rdx
    65018ed5:	push   rbx
    65018ed6:	push   rsi
    65018ed7:	push   rdi
    65018ed8:	push   r12
    65018eda:	push   r13
    65018edc:	push   r14
    65018ede:	push   r15
    65018ee0:	sub    rsp,0x40
    65018ee4:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65018eed:	mov    r13,r8
    65018ef0:	mov    r15,rdx
    65018ef3:	mov    r12,rcx
    65018ef6:	mov    ebx,DWORD PTR [r9]
    65018ef9:	mov    rcx,QWORD PTR [rcx+0x8]
    65018efd:	test   rcx,rcx
    65018f00:	jne    0x65018f09
    65018f02:	xor    esi,esi
    65018f04:	mov    rdi,rsi
    65018f07:	jmp    0x65018f17
    65018f09:	mov    rdi,QWORD PTR [r12+0x18]
    65018f0e:	sub    rdi,rcx
    65018f11:	sar    rdi,0x2
    65018f15:	xor    esi,esi
    65018f17:	test   r8,r8
    65018f1a:	je     0x650191db
    65018f20:	test   rcx,rcx
    65018f23:	jne    0x65018f2a
    65018f25:	mov    rdx,rsi
    65018f28:	jmp    0x65018f36
    65018f2a:	mov    rdx,QWORD PTR [r12+0x10]
    65018f2f:	sub    rdx,rcx
    65018f32:	sar    rdx,0x2
    65018f36:	movabs r8,0x3fffffffffffffff
    65018f40:	mov    rax,r8
    65018f43:	sub    rax,rdx
    65018f46:	cmp    rax,r13
    65018f49:	jae    0x65018f51
    65018f4b:	call   0x65018980
    65018f50:	int3   
    65018f51:	test   rcx,rcx
    65018f54:	jne    0x65018f5b
    65018f56:	mov    rax,rsi
    65018f59:	jmp    0x65018f67
    65018f5b:	mov    rax,QWORD PTR [r12+0x10]
    65018f60:	sub    rax,rcx
    65018f63:	sar    rax,0x2
    65018f67:	add    rax,r13
    65018f6a:	cmp    rdi,rax
    65018f6d:	jae    0x650190d3
    65018f73:	mov    rax,rdi
    65018f76:	shr    rax,1
    65018f79:	sub    r8,rax
    65018f7c:	cmp    r8,rdi
    65018f7f:	jae    0x65018f86
    65018f81:	mov    rdi,rsi
    65018f84:	jmp    0x65018f89
    65018f86:	add    rdi,rax
    65018f89:	test   rcx,rcx
    65018f8c:	jne    0x65018f93
    65018f8e:	mov    rax,rsi
    65018f91:	jmp    0x65018f9f
    65018f93:	mov    rax,QWORD PTR [r12+0x10]
    65018f98:	sub    rax,rcx
    65018f9b:	sar    rax,0x2
    65018f9f:	add    rax,r13
    65018fa2:	cmp    rdi,rax
    65018fa5:	jae    0x65018fc1
    65018fa7:	test   rcx,rcx
    65018faa:	jne    0x65018fb1
    65018fac:	mov    rax,rsi
    65018faf:	jmp    0x65018fbd
    65018fb1:	mov    rax,QWORD PTR [r12+0x10]
    65018fb6:	sub    rax,rcx
    65018fb9:	sar    rax,0x2
    65018fbd:	lea    rdi,[rax+r13*1]
    65018fc1:	mov    rcx,rdi
    65018fc4:	test   rdi,rdi
    65018fc7:	jne    0x65018fce
    65018fc9:	mov    rcx,rsi
    65018fcc:	jmp    0x65019015
    65018fce:	xor    edx,edx
    65018fd0:	or     rax,0xffffffffffffffff
    65018fd4:	div    rdi
    65018fd7:	cmp    rax,0x4
    65018fdb:	jae    0x65019015
    65018fdd:	mov    QWORD PTR [rsp+0x80],rsi
    65018fe5:	lea    rdx,[rsp+0x80]
    65018fed:	lea    rcx,[rsp+0x28]
    65018ff2:	call   0x6501d1c0
    65018ff7:	lea    r11,[rip+0x1c10a]        # 0x65035108
    65018ffe:	mov    QWORD PTR [rsp+0x28],r11
    65019003:	lea    rdx,[rip+0x28136]        # 0x65041140
    6501900a:	lea    rcx,[rsp+0x28]
    6501900f:	call   0x6501daf0
    65019014:	int3   
    65019015:	shl    rcx,0x2
    65019019:	call   0x6501da50
    6501901e:	mov    r14,rax
    65019021:	mov    QWORD PTR [rsp+0x90],rax
    65019029:	mov    rcx,QWORD PTR [r15+0x8]
    6501902d:	mov    r8,QWORD PTR [r12+0x8]
    65019032:	sub    rcx,r8
    65019035:	sar    rcx,0x2
    65019039:	lea    rdx,[rcx*4+0x0]
    65019041:	lea    r15,[rdx+rax*1]
    65019045:	je     0x65019052
    65019047:	mov    r9,rdx
    6501904a:	mov    rcx,rax
    6501904d:	call   0x6501d710
    65019052:	mov    rax,r13
    65019055:	mov    rcx,r15
    65019058:	test   rax,rax
    6501905b:	je     0x65019069
    6501905d:	mov    DWORD PTR [rcx],ebx
    6501905f:	sub    rax,0x1
    65019063:	add    rcx,0x4
    65019067:	jmp    0x65019058
    65019069:	lea    rcx,[r15+r13*4]
    6501906d:	mov    rdx,QWORD PTR [r12+0x10]
    65019072:	mov    r8,QWORD PTR [rsp+0x88]
    6501907a:	mov    r8,QWORD PTR [r8+0x8]
    6501907e:	sub    rdx,r8
    65019081:	sar    rdx,0x2
    65019085:	je     0x65019094
    65019087:	shl    rdx,0x2
    6501908b:	mov    r9,rdx
    6501908e:	call   0x6501d710
    65019093:	nop
    65019094:	mov    rcx,QWORD PTR [r12+0x8]
    65019099:	test   rcx,rcx
    6501909c:	je     0x650190aa
    6501909e:	mov    rsi,QWORD PTR [r12+0x10]
    650190a3:	sub    rsi,rcx
    650190a6:	sar    rsi,0x2
    650190aa:	add    r13,rsi
    650190ad:	test   rcx,rcx
    650190b0:	je     0x650190b7
    650190b2:	call   0x6501d190
    650190b7:	lea    rax,[r14+rdi*4]
    650190bb:	mov    QWORD PTR [r12+0x18],rax
    650190c0:	lea    rax,[r14+r13*4]
    650190c4:	mov    QWORD PTR [r12+0x10],rax
    650190c9:	mov    QWORD PTR [r12+0x8],r14
    650190ce:	jmp    0x650191db
    650190d3:	mov    rdi,QWORD PTR [r12+0x10]
    650190d8:	mov    r8,QWORD PTR [r15+0x8]
    650190dc:	mov    rax,rdi
    650190df:	sub    rax,r8
    650190e2:	sar    rax,0x2
    650190e6:	cmp    rax,r13
    650190e9:	jae    0x65019160
    650190eb:	lea    rcx,[r8+r13*4]
    650190ef:	sub    rdi,r8
    650190f2:	sar    rdi,0x2
    650190f6:	je     0x65019109
    650190f8:	lea    rdx,[rdi*4+0x0]
    65019100:	mov    r9,rdx
    65019103:	call   0x6501d710
    65019108:	nop
    65019109:	mov    rdx,QWORD PTR [r12+0x10]
    6501910e:	mov    rax,rdx
    65019111:	sub    rax,QWORD PTR [r15+0x8]
    65019115:	sar    rax,0x2
    65019119:	mov    rcx,r13
    6501911c:	sub    rcx,rax
    6501911f:	nop
    65019120:	test   rcx,rcx
    65019123:	je     0x65019131
    65019125:	mov    DWORD PTR [rdx],ebx
    65019127:	sub    rcx,0x1
    6501912b:	add    rdx,0x4
    6501912f:	jmp    0x65019120
    65019131:	lea    rax,[r13*4+0x0]
    65019139:	add    QWORD PTR [r12+0x10],rax
    6501913e:	mov    rcx,QWORD PTR [r12+0x10]
    65019143:	sub    rcx,rax
    65019146:	mov    rax,QWORD PTR [r15+0x8]
    6501914a:	cmp    rax,rcx
    6501914d:	je     0x650191db
    65019153:	mov    DWORD PTR [rax],ebx
    65019155:	add    rax,0x4
    65019159:	cmp    rax,rcx
    6501915c:	jne    0x65019153
    6501915e:	jmp    0x650191db
    65019160:	shl    r13,0x2
    65019164:	mov    rsi,rdi
    65019167:	sub    rsi,r13
    6501916a:	mov    rax,rdi
    6501916d:	sub    rax,rsi
    65019170:	sar    rax,0x2
    65019174:	lea    rdx,[rax*4+0x0]
    6501917c:	lea    r14,[rdx+rdi*1]
    65019180:	je     0x65019190
    65019182:	mov    r9,rdx
    65019185:	mov    r8,rsi
    65019188:	mov    rcx,rdi
    6501918b:	call   0x6501d710
    65019190:	mov    QWORD PTR [r12+0x10],r14
    65019195:	mov    r8,QWORD PTR [r15+0x8]
    65019199:	sub    rsi,r8
    6501919c:	sar    rsi,0x2
    650191a0:	test   rsi,rsi
    650191a3:	jle    0x650191bb
    650191a5:	lea    rdx,[rsi*4+0x0]
    650191ad:	sub    rdi,rdx
    650191b0:	mov    r9,rdx
    650191b3:	mov    rcx,rdi
    650191b6:	call   0x6501d710
    650191bb:	mov    rax,QWORD PTR [r15+0x8]
    650191bf:	lea    rcx,[r13+rax*1+0x0]
    650191c4:	cmp    rax,rcx
    650191c7:	je     0x650191db
    650191c9:	data16 xchg ax,ax
    650191cc:	data16 data16 xchg ax,ax
    650191d0:	mov    DWORD PTR [rax],ebx
    650191d2:	add    rax,0x4
    650191d6:	cmp    rax,rcx
    650191d9:	jne    0x650191d0
    650191db:	add    rsp,0x40
    650191df:	pop    r15
    650191e1:	pop    r14
    650191e3:	pop    r13
    650191e5:	pop    r12
    650191e7:	pop    rdi
    650191e8:	pop    rsi
    650191e9:	pop    rbx
    650191ea:	ret    
    650191eb:	int3   
    650191ec:	int3   
    650191ed:	int3   
    650191ee:	int3   
    650191ef:	int3   
    650191f0:	mov    QWORD PTR [rsp+0x10],rdx
    650191f5:	push   rbp
    650191f6:	sub    rsp,0x20
    650191fa:	mov    rbp,rdx
    650191fd:	mov    rcx,QWORD PTR [rbp+0x90]
    65019204:	call   0x6501d190
    65019209:	xor    edx,edx
    6501920b:	xor    ecx,ecx
    6501920d:	call   0x6501daf0
    65019212:	nop
    65019213:	add    rsp,0x20
    65019217:	pop    rbp
    65019218:	ret    
    65019219:	int3   
    6501921a:	int3   
    6501921b:	int3   
    6501921c:	int3   
    6501921d:	int3   
    6501921e:	int3   
    6501921f:	int3   
    65019220:	mov    QWORD PTR [rsp+0x10],rdx
    65019225:	push   rbp
    65019226:	sub    rsp,0x20
    6501922a:	mov    rbp,rdx
    6501922d:	xor    edx,edx
    6501922f:	xor    ecx,ecx
    65019231:	call   0x6501daf0
    65019236:	nop
    65019237:	add    rsp,0x20
    6501923b:	pop    rbp
    6501923c:	ret    
    6501923d:	int3   
    6501923e:	int3   
    6501923f:	int3   
    65019240:	rex push rbp
    65019242:	push   rdi
    65019243:	push   r12
    65019245:	push   r13
    65019247:	push   r14
    65019249:	sub    rsp,0x260
    65019250:	lea    rbp,[rsp+0x50]
    65019255:	mov    QWORD PTR [rbp+0x90],0xfffffffffffffffe
    65019260:	mov    QWORD PTR [rbp+0x248],rbx
    65019267:	mov    QWORD PTR [rbp+0x250],rsi
    6501926e:	mov    rax,QWORD PTR [rip+0x28eab]        # 0x65042120
    65019275:	xor    rax,rbp
    65019278:	mov    QWORD PTR [rbp+0x200],rax
    6501927f:	mov    QWORD PTR [rbp+0x1d0],0xf
    6501928a:	xor    ebx,ebx
    6501928c:	mov    QWORD PTR [rbp+0x1c8],rbx
    65019293:	mov    BYTE PTR [rbp+0x1b8],bl
    65019299:	mov    QWORD PTR [rbp+0x1f8],0xf
    650192a4:	mov    QWORD PTR [rbp+0x1f0],rbx
    650192ab:	mov    BYTE PTR [rbp+0x1e0],bl
    650192b1:	mov    DWORD PTR [rbp+0x58],ebx
    650192b4:	mov    QWORD PTR [rbp+0x70],rbx
    650192b8:	mov    r8,QWORD PTR [rcx+0x18]
    650192bc:	cmp    QWORD PTR [rcx+0x20],0x10
    650192c1:	jb     0x650192c9
    650192c3:	mov    rdx,QWORD PTR [rcx+0x8]
    650192c7:	jmp    0x650192cd
    650192c9:	lea    rdx,[rcx+0x8]
    650192cd:	xor    r9d,r9d
    650192d0:	lea    rcx,[rbp+0x58]
    650192d4:	call   0x65018ab0
    650192d9:	lea    rdx,[rbp+0xd0]
    650192e0:	lea    rcx,[rbp+0x58]
    650192e4:	mov    rax,QWORD PTR [rcx]
    650192e7:	mov    QWORD PTR [rdx],rax
    650192ea:	mov    rax,QWORD PTR [rcx+0x8]
    650192ee:	mov    QWORD PTR [rdx+0x8],rax
    650192f2:	mov    rax,QWORD PTR [rcx+0x10]
    650192f6:	mov    QWORD PTR [rdx+0x10],rax
    650192fa:	lea    rdx,[rbp+0xf0]
    65019301:	lea    rcx,[rbp+0xd0]
    65019308:	call   0x650184a0
    6501930d:	lea    rdx,[rbp+0x20]
    65019311:	mov    rcx,QWORD PTR [rax]
    65019314:	mov    QWORD PTR [rdx],rcx
    65019317:	mov    rcx,QWORD PTR [rax+0x8]
    6501931b:	mov    QWORD PTR [rdx+0x8],rcx
    6501931f:	mov    rax,QWORD PTR [rax+0x10]
    65019323:	mov    QWORD PTR [rdx+0x10],rax
    65019327:	cmp    DWORD PTR [rbp+0x20],0x6
    6501932b:	je     0x65019361
    6501932d:	lea    rdx,[rip+0x1b274]        # 0x650345a8
    65019334:	lea    rcx,[rbp+0x98]
    6501933b:	call   0x6501d370
    65019340:	lea    rax,[rip+0x1b251]        # 0x65034598
    65019347:	mov    QWORD PTR [rbp+0x98],rax
    6501934e:	lea    rdx,[rip+0x27b7b]        # 0x65040ed0
    65019355:	lea    rcx,[rbp+0x98]
    6501935c:	call   0x6501daf0
    65019361:	mov    esi,DWORD PTR [rbp+0x28]
    65019364:	test   rsi,rsi
    65019367:	je     0x65019458
    6501936d:	lea    rcx,[rbp+0x180]
    65019374:	mov    rdi,QWORD PTR [rbp+0x30]
    65019378:	mov    rax,QWORD PTR [rdi]
    6501937b:	mov    QWORD PTR [rcx],rax
    6501937e:	mov    rax,QWORD PTR [rdi+0x8]
    65019382:	mov    QWORD PTR [rcx+0x8],rax
    65019386:	mov    rax,QWORD PTR [rdi+0x10]
    6501938a:	mov    QWORD PTR [rcx+0x10],rax
    6501938e:	cmp    DWORD PTR [rbp+0x180],0x5
    65019395:	je     0x650193c2
    65019397:	lea    rdx,[rip+0x1b20a]        # 0x650345a8
    6501939e:	lea    rcx,[rbp+0x78]
    650193a2:	call   0x6501d370
    650193a7:	lea    rax,[rip+0x1b1ea]        # 0x65034598
    650193ae:	mov    QWORD PTR [rbp+0x78],rax
    650193b2:	lea    rdx,[rip+0x27b17]        # 0x65040ed0
    650193b9:	lea    rcx,[rbp+0x78]
    650193bd:	call   0x6501daf0
    650193c2:	mov    r8d,DWORD PTR [rbp+0x188]
    650193c9:	mov    rdx,QWORD PTR [rbp+0x190]
    650193d0:	lea    rcx,[rbp+0x1d8]
    650193d7:	call   0x65002000
    650193dc:	cmp    rsi,0x1
    650193e0:	jbe    0x65019458
    650193e2:	lea    rcx,[rbp+0x180]
    650193e9:	mov    rax,QWORD PTR [rdi+0x18]
    650193ed:	mov    QWORD PTR [rcx],rax
    650193f0:	mov    rax,QWORD PTR [rdi+0x20]
    650193f4:	mov    QWORD PTR [rcx+0x8],rax
    650193f8:	mov    rax,QWORD PTR [rdi+0x28]
    650193fc:	mov    QWORD PTR [rcx+0x10],rax
    65019400:	cmp    DWORD PTR [rbp+0x180],0x5
    65019407:	je     0x6501943d
    65019409:	lea    rdx,[rip+0x1b198]        # 0x650345a8
    65019410:	lea    rcx,[rbp+0xb0]
    65019417:	call   0x6501d370
    6501941c:	lea    rax,[rip+0x1b175]        # 0x65034598
    65019423:	mov    QWORD PTR [rbp+0xb0],rax
    6501942a:	lea    rdx,[rip+0x27a9f]        # 0x65040ed0
    65019431:	lea    rcx,[rbp+0xb0]
    65019438:	call   0x6501daf0
    6501943d:	mov    r8d,DWORD PTR [rbp+0x188]
    65019444:	mov    rdx,QWORD PTR [rbp+0x190]
    6501944b:	lea    rcx,[rbp+0x1b0]
    65019452:	call   0x65002000
    65019457:	nop
    65019458:	call   QWORD PTR [rip+0x28c3a]        # 0x65042098
    6501945e:	mov    r14d,eax
    65019461:	cmp    QWORD PTR [rbp+0x1f8],0x10
    65019469:	jb     0x6501948d
    6501946b:	mov    rdi,QWORD PTR [rbp+0x1e0]
    65019472:	test   rdi,rdi
    65019475:	jne    0x65019494
    65019477:	mov    rsi,rbx
    6501947a:	movabs r13,0xffffffffffffff0
    65019484:	or     r12,0xffffffffffffffff
    65019488:	jmp    0x65019531
    6501948d:	lea    rdi,[rbp+0x1e0]
    65019494:	mov    rcx,rdi
    65019497:	call   QWORD PTR [rip+0x1abfb]        # 0x65034098
    6501949d:	lea    r9d,[rax+0x1]
    650194a1:	cmp    r9d,0x3fffffff
    650194a8:	jle    0x650194bd
    650194aa:	mov    rsi,rbx
    650194ad:	movabs r13,0xffffffffffffff0
    650194b7:	or     r12,0xffffffffffffffff
    650194bb:	jmp    0x65019531
    650194bd:	movsxd rax,r9d
    650194c0:	add    rax,rax
    650194c3:	lea    rcx,[rax+0xf]
    650194c7:	cmp    rcx,rax
    650194ca:	ja     0x650194db
    650194cc:	movabs r13,0xffffffffffffff0
    650194d6:	mov    rcx,r13
    650194d9:	jmp    0x650194e5
    650194db:	movabs r13,0xffffffffffffff0
    650194e5:	and    rcx,0xfffffffffffffff0
    650194e9:	mov    rax,rcx
    650194ec:	call   0x650330c0
    650194f1:	sub    rsp,rcx
    650194f4:	lea    rsi,[rsp+0x50]
    650194f9:	test   rsi,rsi
    650194fc:	je     0x6501952a
    650194fe:	mov    WORD PTR [rsi],0x0
    65019503:	mov    DWORD PTR [rsp+0x28],r9d
    65019508:	mov    QWORD PTR [rsp+0x20],rsi
    6501950d:	or     r12,0xffffffffffffffff
    65019511:	mov    r9d,r12d
    65019514:	mov    r8,rdi
    65019517:	xor    edx,edx
    65019519:	mov    ecx,r14d
    6501951c:	call   QWORD PTR [rip+0x1ab16]        # 0x65034038
    65019522:	test   eax,eax
    65019524:	cmove  rsi,rbx
    65019528:	jmp    0x65019531
    6501952a:	mov    rsi,rbx
    6501952d:	or     r12,0xffffffffffffffff
    65019531:	lea    rcx,[rip+0x28b68]        # 0x650420a0
    65019538:	mov    rax,QWORD PTR [rip+0x28b61]        # 0x650420a0
    6501953f:	call   QWORD PTR [rax+0x18]
    65019542:	add    rax,0x18
    65019546:	mov    QWORD PTR [rbp+0x18],rax
    6501954a:	test   rsi,rsi
    6501954d:	je     0x6501958e
    6501954f:	test   rsi,0xffffffffffff0000
    65019556:	jne    0x6501957a
    65019558:	movzx  edi,si
    6501955b:	xor    edx,edx
    6501955d:	mov    ecx,edi
    6501955f:	call   0x650026f0
    65019564:	test   rax,rax
    65019567:	je     0x650195a0
    65019569:	mov    r8d,edi
    6501956c:	mov    rdx,rax
    6501956f:	lea    rcx,[rbp+0x18]
    65019573:	call   0x65003e00
    65019578:	jmp    0x650195a0
    6501957a:	xor    eax,eax
    6501957c:	mov    rcx,r12
    6501957f:	mov    rdi,rsi
    65019582:	repnz scas ax,WORD PTR es:[rdi]
    65019585:	not    rcx
    65019588:	sub    rcx,0x1
    6501958c:	jmp    0x65019590
    6501958e:	mov    ecx,ebx
    65019590:	mov    r8d,ecx
    65019593:	mov    rdx,rsi
    65019596:	lea    rcx,[rbp+0x18]
    6501959a:	call   0x65003f90
    6501959f:	nop
    650195a0:	lea    rcx,[rip+0x28af9]        # 0x650420a0
    650195a7:	mov    rax,QWORD PTR [rip+0x28af2]        # 0x650420a0
    650195ae:	call   QWORD PTR [rax+0x18]
    650195b1:	add    rax,0x18
    650195b5:	mov    QWORD PTR [rbp+0x10],rax
    650195b9:	lea    r8,[rbp+0x10]
    650195bd:	lea    rdx,[rbp+0x18]
    650195c1:	lea    rcx,[rbp+0x0]
    650195c5:	call   0x650029a0
    650195ca:	nop
    650195cb:	xor    eax,eax
    650195cd:	lea    rdi,[rip+0x1d9d4]        # 0x65036fa8
    650195d4:	mov    rsi,QWORD PTR [rbp+0x0]
    650195d8:	mov    ecx,0x1
    650195dd:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
    650195e0:	je     0x650195e7
    650195e2:	sbb    eax,eax
    650195e4:	sbb    eax,0xffffffff
    650195e7:	test   eax,eax
    650195e9:	setne  al
    650195ec:	test   al,al
    650195ee:	je     0x65019905
    650195f4:	mov    rdi,QWORD PTR [rbp+0x10]
    650195f8:	call   0x65017130
    650195fd:	mov    rcx,rdi
    65019600:	call   rax
    65019602:	mov    rdi,QWORD PTR [rbp+0x0]
    65019606:	mov    rcx,QWORD PTR [rdi-0x18]
    6501960a:	mov    rax,QWORD PTR [rcx]
    6501960d:	call   QWORD PTR [rax+0x20]
    65019610:	mov    rcx,rax
    65019613:	cmp    DWORD PTR [rdi-0x8],0x0
    65019617:	jl     0x6501962a
    65019619:	cmp    rax,QWORD PTR [rdi-0x18]
    6501961d:	jne    0x6501962a
    6501961f:	lea    rsi,[rdi-0x18]
    65019623:	lock add DWORD PTR [rdi-0x8],0x1
    65019628:	jmp    0x65019667
    6501962a:	mov    rax,QWORD PTR [rax]
    6501962d:	mov    r8d,0x2
    65019633:	mov    edx,DWORD PTR [rdi-0x10]
    65019636:	call   QWORD PTR [rax]
    65019638:	mov    rsi,rax
    6501963b:	test   rax,rax
    6501963e:	jne    0x65019645
    65019640:	call   0x65002320
    65019645:	mov    eax,DWORD PTR [rdi-0x10]
    65019648:	mov    DWORD PTR [rsi+0x8],eax
    6501964b:	mov    eax,DWORD PTR [rdi-0x10]
    6501964e:	add    eax,0x1
    65019651:	movsxd rdx,eax
    65019654:	lea    r9,[rdx+rdx*1]
    65019658:	mov    r8,rdi
    6501965b:	add    rdx,rdx
    6501965e:	lea    rcx,[rsi+0x18]
    65019662:	call   0x6501d640
    65019667:	lea    rax,[rsi+0x18]
    6501966b:	mov    QWORD PTR [rbp+0x50],rax
    6501966f:	lea    rdx,[rbp+0x1b8]
    65019676:	cmp    QWORD PTR [rbp+0x1d0],0x10
    6501967e:	cmovae rdx,QWORD PTR [rbp+0x1b8]
    65019686:	mov    r8,QWORD PTR [rbp+0x1c8]
    6501968d:	lea    rcx,[rbp+0x50]
    65019691:	call   0x65003520
    65019696:	xor    edx,edx
    65019698:	lea    rcx,[rbp+0x48]
    6501969c:	call   0x65004fe0
    650196a1:	nop
    650196a2:	lea    r8,[rip+0x1b05f]        # 0x65034708
    650196a9:	mov    rdx,rax
    650196ac:	lea    rcx,[rbp+0x40]
    650196b0:	call   0x65018720
    650196b5:	nop
    650196b6:	mov    rdx,QWORD PTR [rbp+0x48]
    650196ba:	add    rdx,0xffffffffffffffe8
    650196be:	mov    eax,r12d
    650196c1:	lock xadd DWORD PTR [rdx+0x10],eax
    650196c6:	add    eax,0xffffffff
    650196c9:	test   eax,eax
    650196cb:	jg     0x650196d6
    650196cd:	mov    rcx,QWORD PTR [rdx]
    650196d0:	mov    rax,QWORD PTR [rcx]
    650196d3:	call   QWORD PTR [rax+0x8]
    650196d6:	mov    rsi,QWORD PTR [rbp+0x0]
    650196da:	test   rsi,rsi
    650196dd:	jne    0x650196e4
    650196df:	mov    rdi,rbx
    650196e2:	jmp    0x6501975d
    650196e4:	mov    rcx,rsi
    650196e7:	call   QWORD PTR [rip+0x1a9a3]        # 0x65034090
    650196ed:	lea    edx,[rax+0x1]
    650196f0:	cmp    edx,0x3fffffff
    650196f6:	jle    0x650196fd
    650196f8:	mov    rdi,rbx
    650196fb:	jmp    0x6501975d
    650196fd:	movsxd rax,edx
    65019700:	add    rax,rax
    65019703:	lea    rcx,[rax+0xf]
    65019707:	cmp    rcx,rax
    6501970a:	ja     0x6501970f
    6501970c:	mov    rcx,r13
    6501970f:	and    rcx,0xfffffffffffffff0
    65019713:	mov    rax,rcx
    65019716:	call   0x650330c0
    6501971b:	sub    rsp,rcx
    6501971e:	lea    rdi,[rsp+0x50]
    65019723:	test   rdi,rdi
    65019726:	je     0x6501975a
    65019728:	mov    BYTE PTR [rdi],0x0
    6501972b:	lea    eax,[rdx+rdx*1]
    6501972e:	mov    QWORD PTR [rsp+0x38],rbx
    65019733:	mov    QWORD PTR [rsp+0x30],rbx
    65019738:	mov    DWORD PTR [rsp+0x28],eax
    6501973c:	mov    QWORD PTR [rsp+0x20],rdi
    65019741:	mov    r9d,r12d
    65019744:	mov    r8,rsi
    65019747:	xor    edx,edx
    65019749:	mov    ecx,r14d
    6501974c:	call   QWORD PTR [rip+0x1a8ee]        # 0x65034040
    65019752:	test   eax,eax
    65019754:	cmove  rdi,rbx
    65019758:	jmp    0x6501975d
    6501975a:	mov    rdi,rbx
    6501975d:	lea    rcx,[rip+0x2893c]        # 0x650420a0
    65019764:	mov    rax,QWORD PTR [rip+0x28935]        # 0x650420a0
    6501976b:	call   QWORD PTR [rax+0x18]
    6501976e:	add    rax,0x18
    65019772:	mov    QWORD PTR [rbp+0x8],rax
    65019776:	test   rdi,rdi
    65019779:	je     0x650197a6
    6501977b:	test   rdi,0xffffffffffff0000
    65019782:	jne    0x650197a6
    65019784:	movzx  edi,di
    65019787:	xor    edx,edx
    65019789:	mov    ecx,edi
    6501978b:	call   0x650026f0
    65019790:	test   rax,rax
    65019793:	je     0x650197b3
    65019795:	mov    r8d,edi
    65019798:	mov    rdx,rax
    6501979b:	lea    rcx,[rbp+0x8]
    6501979f:	call   0x65003e00
    650197a4:	jmp    0x650197b3
    650197a6:	mov    rdx,rdi
    650197a9:	lea    rcx,[rbp+0x8]
    650197ad:	call   0x65003cc0
    650197b2:	nop
    650197b3:	lea    rdx,[rbp+0x40]
    650197b7:	lea    rcx,[rbp+0x8]
    650197bb:	call   0x65003840
    650197c0:	nop
    650197c1:	mov    rdx,QWORD PTR [rbp+0x8]
    650197c5:	add    rdx,0xffffffffffffffe8
    650197c9:	mov    eax,r12d
    650197cc:	lock xadd DWORD PTR [rdx+0x10],eax
    650197d1:	add    eax,0xffffffff
    650197d4:	test   eax,eax
    650197d6:	jg     0x650197e1
    650197d8:	mov    rcx,QWORD PTR [rdx]
    650197db:	mov    rax,QWORD PTR [rcx]
    650197de:	call   QWORD PTR [rax+0x8]
    650197e1:	mov    QWORD PTR [rbp+0x20],rbx
    650197e5:	xor    eax,eax
    650197e7:	mov    QWORD PTR [rbp+0x28],rax
    650197eb:	mov    QWORD PTR [rbp+0x30],rax
    650197ef:	xor    edx,edx
    650197f1:	lea    r8d,[rax+0x60]
    650197f5:	lea    rcx,[rbp+0x118]
    650197fc:	call   0x6501ee30
    65019801:	mov    DWORD PTR [rbp+0x110],0x68
    6501980b:	lea    rcx,[rbp+0x180]
    65019812:	call   0x65001a80
    65019817:	nop
    65019818:	lea    rdi,[rbp+0x188]
    6501981f:	cmp    QWORD PTR [rbp+0x1a0],0x10
    65019827:	cmovae rdi,QWORD PTR [rbp+0x188]
    6501982f:	mov    rsi,QWORD PTR [rbp+0x0]
    65019833:	call   0x65016fd0
    65019838:	lea    rcx,[rbp+0x20]
    6501983c:	mov    QWORD PTR [rsp+0x48],rcx
    65019841:	lea    rcx,[rbp+0x110]
    65019848:	mov    QWORD PTR [rsp+0x40],rcx
    6501984d:	mov    QWORD PTR [rsp+0x38],rbx
    65019852:	mov    QWORD PTR [rsp+0x30],rdi
    65019857:	mov    DWORD PTR [rsp+0x28],0x400
    6501985f:	mov    DWORD PTR [rsp+0x20],0x1
    65019867:	xor    r9d,r9d
    6501986a:	xor    r8d,r8d
    6501986d:	xor    edx,edx
    6501986f:	mov    rcx,rsi
    65019872:	call   rax
    65019874:	test   eax,eax
    65019876:	je     0x6501988c
    65019878:	mov    rcx,QWORD PTR [rbp+0x28]
    6501987c:	call   QWORD PTR [rip+0x1a7ee]        # 0x65034070
    65019882:	mov    rcx,QWORD PTR [rbp+0x20]
    65019886:	call   QWORD PTR [rip+0x1a7e4]        # 0x65034070
    6501988c:	mov    rdi,QWORD PTR [rbp+0x0]
    65019890:	call   0x65017080
    65019895:	xor    edx,edx
    65019897:	lea    r8d,[rdx+0x4]
    6501989b:	mov    rcx,rdi
    6501989e:	call   rax
    650198a0:	mov    rdi,QWORD PTR [rbp+0x10]
    650198a4:	call   0x65017080
    650198a9:	xor    edx,edx
    650198ab:	lea    r8d,[rdx+0x4]
    650198af:	mov    rcx,rdi
    650198b2:	call   rax
    650198b4:	nop
    650198b5:	cmp    QWORD PTR [rbp+0x1a0],0x10
    650198bd:	jb     0x650198cb
    650198bf:	mov    rcx,QWORD PTR [rbp+0x188]
    650198c6:	call   0x6501d190
    650198cb:	mov    QWORD PTR [rbp+0x1a0],0xf
    650198d6:	mov    QWORD PTR [rbp+0x198],rbx
    650198dd:	mov    BYTE PTR [rbp+0x188],0x0
    650198e4:	mov    rdx,QWORD PTR [rbp+0x40]
    650198e8:	add    rdx,0xffffffffffffffe8
    650198ec:	mov    eax,r12d
    650198ef:	lock xadd DWORD PTR [rdx+0x10],eax
    650198f4:	add    eax,0xffffffff
    650198f7:	test   eax,eax
    650198f9:	jg     0x65019905
    650198fb:	mov    rcx,QWORD PTR [rdx]
    650198fe:	mov    rax,QWORD PTR [rcx]
    65019901:	call   QWORD PTR [rax+0x8]
    65019904:	nop
    65019905:	mov    rdx,QWORD PTR [rbp+0x0]
    65019909:	add    rdx,0xffffffffffffffe8
    6501990d:	mov    eax,r12d
    65019910:	lock xadd DWORD PTR [rdx+0x10],eax
    65019915:	add    eax,0xffffffff
    65019918:	test   eax,eax
    6501991a:	jg     0x65019926
    6501991c:	mov    rcx,QWORD PTR [rdx]
    6501991f:	mov    rax,QWORD PTR [rcx]
    65019922:	call   QWORD PTR [rax+0x8]
    65019925:	nop
    65019926:	mov    rdx,QWORD PTR [rbp+0x10]
    6501992a:	add    rdx,0xffffffffffffffe8
    6501992e:	mov    eax,r12d
    65019931:	lock xadd DWORD PTR [rdx+0x10],eax
    65019936:	add    eax,0xffffffff
    65019939:	test   eax,eax
    6501993b:	jg     0x65019947
    6501993d:	mov    rcx,QWORD PTR [rdx]
    65019940:	mov    rax,QWORD PTR [rcx]
    65019943:	call   QWORD PTR [rax+0x8]
    65019946:	nop
    65019947:	mov    rdx,QWORD PTR [rbp+0x18]
    6501994b:	add    rdx,0xffffffffffffffe8
    6501994f:	lock xadd DWORD PTR [rdx+0x10],r12d
    65019955:	add    r12d,0xffffffff
    65019959:	test   r12d,r12d
    6501995c:	jg     0x65019968
    6501995e:	mov    rcx,QWORD PTR [rdx]
    65019961:	mov    rax,QWORD PTR [rcx]
    65019964:	call   QWORD PTR [rax+0x8]
    65019967:	nop
    65019968:	jmp    0x6501996c
    6501996a:	xor    ebx,ebx
    6501996c:	mov    rdi,QWORD PTR [rbp+0x70]
    65019970:	test   rdi,rdi
    65019973:	je     0x65019986
    65019975:	mov    rcx,rdi
    65019978:	call   0x650173f0
    6501997d:	mov    rcx,rdi
    65019980:	call   0x6501d190
    65019985:	nop
    65019986:	cmp    QWORD PTR [rbp+0x1f8],0x10
    6501998e:	jb     0x6501999c
    65019990:	mov    rcx,QWORD PTR [rbp+0x1e0]
    65019997:	call   0x6501d190
    6501999c:	mov    QWORD PTR [rbp+0x1f8],0xf
    650199a7:	mov    QWORD PTR [rbp+0x1f0],rbx
    650199ae:	mov    BYTE PTR [rbp+0x1e0],0x0
    650199b5:	cmp    QWORD PTR [rbp+0x1d0],0x10
    650199bd:	jb     0x65019a2d
    650199bf:	mov    rcx,QWORD PTR [rbp+0x1b8]
    650199c6:	call   0x6501d190
    650199cb:	jmp    0x65019a2d
    650199cd:	mov    rdi,QWORD PTR [rbp+0x70]
    650199d1:	test   rdi,rdi
    650199d4:	je     0x650199e7
    650199d6:	mov    rcx,rdi
    650199d9:	call   0x650173f0
    650199de:	mov    rcx,rdi
    650199e1:	call   0x6501d190
    650199e6:	nop
    650199e7:	cmp    QWORD PTR [rbp+0x1f8],0x10
    650199ef:	jb     0x650199fd
    650199f1:	mov    rcx,QWORD PTR [rbp+0x1e0]
    650199f8:	call   0x6501d190
    650199fd:	mov    QWORD PTR [rbp+0x1f8],0xf
    65019a08:	xor    ebx,ebx
    65019a0a:	mov    QWORD PTR [rbp+0x1f0],rbx
    65019a11:	mov    BYTE PTR [rbp+0x1e0],bl
    65019a17:	cmp    QWORD PTR [rbp+0x1d0],0x10
    65019a1f:	jb     0x65019a2d
    65019a21:	mov    rcx,QWORD PTR [rbp+0x1b8]
    65019a28:	call   0x6501d190
    65019a2d:	mov    rcx,QWORD PTR [rbp+0x200]
    65019a34:	xor    rcx,rbp
    65019a37:	call   0x6501e4e0
    65019a3c:	mov    rbx,QWORD PTR [rbp+0x248]
    65019a43:	mov    rsi,QWORD PTR [rbp+0x250]
    65019a4a:	lea    rsp,[rbp+0x210]
    65019a51:	pop    r14
    65019a53:	pop    r13
    65019a55:	pop    r12
    65019a57:	pop    rdi
    65019a58:	pop    rbp
    65019a59:	ret    
    65019a5a:	int3   
    65019a5b:	int3   
    65019a5c:	int3   
    65019a5d:	int3   
    65019a5e:	int3   
    65019a5f:	int3   
    65019a60:	rex push rbp
    65019a62:	sub    rsp,0x20
    65019a66:	lea    rbp,[rdx+0x50]
    65019a6a:	lea    rcx,[rbp+0x1b0]
    65019a71:	call   0x65018560
    65019a76:	add    rsp,0x20
    65019a7a:	pop    rbp
    65019a7b:	ret    
    65019a7c:	int3   
    65019a7d:	int3   
    65019a7e:	int3   
    65019a7f:	int3   
    65019a80:	rex push rbp
    65019a82:	sub    rsp,0x20
    65019a86:	lea    rbp,[rdx+0x50]
    65019a8a:	lea    rcx,[rbp+0x58]
    65019a8e:	call   0x65018530
    65019a93:	add    rsp,0x20
    65019a97:	pop    rbp
    65019a98:	ret    
    65019a99:	int3   
    65019a9a:	int3   
    65019a9b:	int3   
    65019a9c:	int3   
    65019a9d:	int3   
    65019a9e:	int3   
    65019a9f:	int3   
    65019aa0:	mov    QWORD PTR [rsp+0x10],rdx
    65019aa5:	push   rbp
    65019aa6:	sub    rsp,0x50
    65019aaa:	lea    rbp,[rdx+0x50]
    65019aae:	lea    rax,[rip+0xffffffffffffff18]        # 0x650199cd
    65019ab5:	jmp    0x65019ab7
    65019ab7:	add    rsp,0x50
    65019abb:	pop    rbp
    65019abc:	ret    
    65019abd:	int3   
    65019abe:	int3   
    65019abf:	int3   
    65019ac0:	rex push rbp
    65019ac2:	sub    rsp,0x20
    65019ac6:	lea    rbp,[rdx+0x50]
    65019aca:	lea    rcx,[rbp+0x18]
    65019ace:	call   0x65002100
    65019ad3:	add    rsp,0x20
    65019ad7:	pop    rbp
    65019ad8:	ret    
    65019ad9:	int3   
    65019ada:	int3   
    65019adb:	int3   
    65019adc:	int3   
    65019add:	int3   
    65019ade:	int3   
    65019adf:	int3   
    65019ae0:	rex push rbp
    65019ae2:	sub    rsp,0x20
    65019ae6:	lea    rbp,[rdx+0x50]
    65019aea:	lea    rcx,[rbp+0x18]
    65019aee:	call   0x65001cb0
    65019af3:	add    rsp,0x20
    65019af7:	pop    rbp
    65019af8:	ret    
    65019af9:	int3   
    65019afa:	int3   
    65019afb:	int3   
    65019afc:	int3   
    65019afd:	int3   
    65019afe:	int3   
    65019aff:	int3   
    65019b00:	rex push rbp
    65019b02:	sub    rsp,0x20
    65019b06:	lea    rbp,[rdx+0x50]
    65019b0a:	lea    rcx,[rbp+0x10]
    65019b0e:	call   0x65001cb0
    65019b13:	add    rsp,0x20
    65019b17:	pop    rbp
    65019b18:	ret    
    65019b19:	int3   
    65019b1a:	int3   
    65019b1b:	int3   
    65019b1c:	int3   
    65019b1d:	int3   
    65019b1e:	int3   
    65019b1f:	int3   
    65019b20:	rex push rbp
    65019b22:	sub    rsp,0x20
    65019b26:	lea    rbp,[rdx+0x50]
    65019b2a:	lea    rcx,[rbp+0x0]
    65019b2e:	call   0x65001cb0
    65019b33:	add    rsp,0x20
    65019b37:	pop    rbp
    65019b38:	ret    
    65019b39:	int3   
    65019b3a:	int3   
    65019b3b:	int3   
    65019b3c:	int3   
    65019b3d:	int3   
    65019b3e:	int3   
    65019b3f:	int3   
    65019b40:	rex push rbp
    65019b42:	sub    rsp,0x20
    65019b46:	lea    rbp,[rdx+0x50]
    65019b4a:	lea    rcx,[rbp+0x48]
    65019b4e:	call   0x65001cb0
    65019b53:	add    rsp,0x20
    65019b57:	pop    rbp
    65019b58:	ret    
    65019b59:	int3   
    65019b5a:	int3   
    65019b5b:	int3   
    65019b5c:	int3   
    65019b5d:	int3   
    65019b5e:	int3   
    65019b5f:	int3   
    65019b60:	rex push rbp
    65019b62:	sub    rsp,0x20
    65019b66:	lea    rbp,[rdx+0x50]
    65019b6a:	lea    rcx,[rbp+0x40]
    65019b6e:	call   0x65001cb0
    65019b73:	add    rsp,0x20
    65019b77:	pop    rbp
    65019b78:	ret    
    65019b79:	int3   
    65019b7a:	int3   
    65019b7b:	int3   
    65019b7c:	int3   
    65019b7d:	int3   
    65019b7e:	int3   
    65019b7f:	int3   
    65019b80:	rex push rbp
    65019b82:	sub    rsp,0x20
    65019b86:	lea    rbp,[rdx+0x50]
    65019b8a:	lea    rcx,[rbp+0x8]
    65019b8e:	call   0x65002100
    65019b93:	add    rsp,0x20
    65019b97:	pop    rbp
    65019b98:	ret    
    65019b99:	int3   
    65019b9a:	int3   
    65019b9b:	int3   
    65019b9c:	int3   
    65019b9d:	int3   
    65019b9e:	int3   
    65019b9f:	int3   
    65019ba0:	rex push rbp
    65019ba2:	sub    rsp,0x20
    65019ba6:	lea    rbp,[rdx+0x50]
    65019baa:	lea    rcx,[rbp+0x8]
    65019bae:	call   0x65001cb0
    65019bb3:	add    rsp,0x20
    65019bb7:	pop    rbp
    65019bb8:	ret    
    65019bb9:	int3   
    65019bba:	int3   
    65019bbb:	int3   
    65019bbc:	int3   
    65019bbd:	int3   
    65019bbe:	int3   
    65019bbf:	int3   
    65019bc0:	rex push rbp
    65019bc2:	sub    rsp,0x20
    65019bc6:	lea    rbp,[rdx+0x50]
    65019bca:	lea    rcx,[rbp+0x180]
    65019bd1:	call   0x65001c70
    65019bd6:	add    rsp,0x20
    65019bda:	pop    rbp
    65019bdb:	ret    
    65019bdc:	int3   
    65019bdd:	int3   
    65019bde:	int3   
    65019bdf:	int3   
    65019be0:	mov    QWORD PTR [rsp+0x10],rdx
    65019be5:	push   rbp
    65019be6:	sub    rsp,0x50
    65019bea:	lea    rbp,[rdx+0x50]
    65019bee:	lea    rax,[rip+0xfffffffffffffd75]        # 0x6501996a
    65019bf5:	jmp    0x65019bf7
    65019bf7:	add    rsp,0x50
    65019bfb:	pop    rbp
    65019bfc:	ret    
    65019bfd:	int3   
    65019bfe:	int3   
    65019bff:	int3   
    65019c00:	mov    QWORD PTR [rsp+0x10],rbx
    65019c05:	mov    QWORD PTR [rsp+0x18],rbp
    65019c0a:	push   rdi
    65019c0b:	sub    rsp,0x20
    65019c0f:	mov    rbx,QWORD PTR [rcx+0x8]
    65019c13:	xor    ebp,ebp
    65019c15:	mov    rdi,rcx
    65019c18:	test   rbx,rbx
    65019c1b:	je     0x65019c67
    65019c1d:	mov    QWORD PTR [rsp+0x30],rsi
    65019c22:	mov    rsi,QWORD PTR [rcx+0x10]
    65019c26:	cmp    rbx,rsi
    65019c29:	je     0x65019c59
    65019c2b:	xchg   ax,ax
    65019c2d:	data16 xchg ax,ax
    65019c30:	cmp    QWORD PTR [rbx+0x20],0x10
    65019c35:	jb     0x65019c40
    65019c37:	mov    rcx,QWORD PTR [rbx+0x8]
    65019c3b:	call   0x6501d190
    65019c40:	mov    QWORD PTR [rbx+0x20],0xf
    65019c48:	mov    QWORD PTR [rbx+0x18],rbp
    65019c4c:	mov    BYTE PTR [rbx+0x8],bpl
    65019c50:	add    rbx,0x28
    65019c54:	cmp    rbx,rsi
    65019c57:	jne    0x65019c30
    65019c59:	mov    rcx,QWORD PTR [rdi+0x8]
    65019c5d:	call   0x6501d190
    65019c62:	mov    rsi,QWORD PTR [rsp+0x30]
    65019c67:	mov    rbx,QWORD PTR [rsp+0x38]
    65019c6c:	mov    QWORD PTR [rdi+0x8],rbp
    65019c70:	mov    QWORD PTR [rdi+0x10],rbp
    65019c74:	mov    QWORD PTR [rdi+0x18],rbp
    65019c78:	mov    rbp,QWORD PTR [rsp+0x40]
    65019c7d:	add    rsp,0x20
    65019c81:	pop    rdi
    65019c82:	ret    
    65019c83:	int3   
    65019c84:	int3   
    65019c85:	int3   
    65019c86:	int3   
    65019c87:	int3   
    65019c88:	int3   
    65019c89:	int3   
    65019c8a:	int3   
    65019c8b:	int3   
    65019c8c:	int3   
    65019c8d:	int3   
    65019c8e:	int3   
    65019c8f:	int3   
    65019c90:	rex push rbp
    65019c92:	push   rsi
    65019c93:	push   rdi
    65019c94:	sub    rsp,0x40
    65019c98:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65019ca1:	mov    QWORD PTR [rsp+0x70],rbx
    65019ca6:	mov    eax,DWORD PTR [rip+0x29e9c]        # 0x65043b48
    65019cac:	xor    ebx,ebx
    65019cae:	test   al,0x1
    65019cb0:	jne    0x65019cdd
    65019cb2:	or     eax,0x1
    65019cb5:	mov    DWORD PTR [rip+0x29e8d],eax        # 0x65043b48
    65019cbb:	mov    QWORD PTR [rip+0x29e6e],rbx        # 0x65043b30
    65019cc2:	mov    QWORD PTR [rip+0x29e6f],rbx        # 0x65043b38
    65019cc9:	mov    QWORD PTR [rip+0x29e70],rbx        # 0x65043b40
    65019cd0:	lea    rcx,[rip+0x19719]        # 0x650333f0
    65019cd7:	call   0x6501e680
    65019cdc:	nop
    65019cdd:	mov    rcx,QWORD PTR [rip+0x29e4c]        # 0x65043b30
    65019ce4:	test   rcx,rcx
    65019ce7:	je     0x65019d07
    65019ce9:	mov    r8,QWORD PTR [rip+0x29e48]        # 0x65043b38
    65019cf0:	mov    rax,r8
    65019cf3:	sub    rax,rcx
    65019cf6:	sar    rax,0x2
    65019cfa:	je     0x65019d07
    65019cfc:	mov    edx,DWORD PTR [rip+0x29e1e]        # 0x65043b20
    65019d02:	jmp    0x6501a2c2
    65019d07:	lea    r8,[rip+0x1ab22]        # 0x65034830
    65019d0e:	mov    edx,0xc
    65019d13:	lea    rcx,[rip+0x1ab06]        # 0x65034820
    65019d1a:	call   0x6500bc30
    65019d1f:	mov    rcx,rax
    65019d22:	call   QWORD PTR [rip+0x1a660]        # 0x65034388
    65019d28:	mov    r11d,eax
    65019d2b:	mov    DWORD PTR [rsp+0x60],eax
    65019d2f:	lea    rbp,[rip+0x29df2]        # 0x65043b28
    65019d36:	mov    rdx,QWORD PTR [rip+0x29dfb]        # 0x65043b38
    65019d3d:	mov    rdi,QWORD PTR [rip+0x29dec]        # 0x65043b30
    65019d44:	test   rdi,rdi
    65019d47:	je     0x65019d79
    65019d49:	mov    rcx,rdx
    65019d4c:	sub    rcx,rdi
    65019d4f:	sar    rcx,0x2
    65019d53:	mov    rax,QWORD PTR [rip+0x29de6]        # 0x65043b40
    65019d5a:	sub    rax,rdi
    65019d5d:	sar    rax,0x2
    65019d61:	cmp    rcx,rax
    65019d64:	jae    0x65019d79
    65019d66:	mov    DWORD PTR [rdx],r11d
    65019d69:	lea    rax,[rdx+0x4]
    65019d6d:	mov    QWORD PTR [rip+0x29dc4],rax        # 0x65043b38
    65019d74:	jmp    0x65019e24
    65019d79:	mov    rsi,rdx
    65019d7c:	cmp    rdi,rdx
    65019d7f:	jbe    0x65019d94
    65019d81:	call   0x6501d960
    65019d86:	mov    rdx,QWORD PTR [rip+0x29dab]        # 0x65043b38
    65019d8d:	mov    rdi,QWORD PTR [rip+0x29d9c]        # 0x65043b30
    65019d94:	mov    QWORD PTR [rsp+0x30],rbp
    65019d99:	mov    QWORD PTR [rsp+0x38],rsi
    65019d9e:	test   rdi,rdi
    65019da1:	je     0x65019dc2
    65019da3:	mov    rax,rdx
    65019da6:	sub    rax,rdi
    65019da9:	sar    rax,0x2
    65019dad:	je     0x65019dc2
    65019daf:	cmp    rdi,rdx
    65019db2:	jbe    0x65019db9
    65019db4:	call   0x6501d960
    65019db9:	sub    rsi,rdi
    65019dbc:	sar    rsi,0x2
    65019dc0:	jmp    0x65019dc5
    65019dc2:	mov    rsi,rbx
    65019dc5:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    65019dca:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    65019dd0:	lea    r9,[rsp+0x60]
    65019dd5:	mov    r8d,0x1
    65019ddb:	lea    rdx,[rsp+0x30]
    65019de0:	mov    rcx,rbp
    65019de3:	call   0x65018ed0
    65019de8:	mov    r11,QWORD PTR [rip+0x29d41]        # 0x65043b30
    65019def:	mov    rdi,r11
    65019df2:	mov    rcx,QWORD PTR [rip+0x29d3f]        # 0x65043b38
    65019df9:	cmp    r11,rcx
    65019dfc:	jbe    0x65019e11
    65019dfe:	call   0x6501d960
    65019e03:	mov    rcx,QWORD PTR [rip+0x29d2e]        # 0x65043b38
    65019e0a:	mov    r11,QWORD PTR [rip+0x29d1f]        # 0x65043b30
    65019e11:	lea    rax,[rdi+rsi*4]
    65019e15:	cmp    rax,rcx
    65019e18:	ja     0x65019e1f
    65019e1a:	cmp    rax,r11
    65019e1d:	jae    0x65019e24
    65019e1f:	call   0x6501d960
    65019e24:	lea    r8,[rip+0x1a9cd]        # 0x650347f8
    65019e2b:	mov    edx,0xc
    65019e30:	lea    rcx,[rip+0x1a9b1]        # 0x650347e8
    65019e37:	call   0x6500bc30
    65019e3c:	mov    rcx,rax
    65019e3f:	call   QWORD PTR [rip+0x1a543]        # 0x65034388
    65019e45:	mov    r11d,eax
    65019e48:	mov    DWORD PTR [rsp+0x60],eax
    65019e4c:	mov    rdx,QWORD PTR [rip+0x29ce5]        # 0x65043b38
    65019e53:	mov    rsi,QWORD PTR [rip+0x29cd6]        # 0x65043b30
    65019e5a:	test   rsi,rsi
    65019e5d:	je     0x65019e8f
    65019e5f:	mov    rcx,rdx
    65019e62:	sub    rcx,rsi
    65019e65:	sar    rcx,0x2
    65019e69:	mov    rax,QWORD PTR [rip+0x29cd0]        # 0x65043b40
    65019e70:	sub    rax,rsi
    65019e73:	sar    rax,0x2
    65019e77:	cmp    rcx,rax
    65019e7a:	jae    0x65019e8f
    65019e7c:	mov    DWORD PTR [rdx],r11d
    65019e7f:	lea    rax,[rdx+0x4]
    65019e83:	mov    QWORD PTR [rip+0x29cae],rax        # 0x65043b38
    65019e8a:	jmp    0x65019f3a
    65019e8f:	mov    rdi,rdx
    65019e92:	cmp    rsi,rdx
    65019e95:	jbe    0x65019eaa
    65019e97:	call   0x6501d960
    65019e9c:	mov    rdx,QWORD PTR [rip+0x29c95]        # 0x65043b38
    65019ea3:	mov    rsi,QWORD PTR [rip+0x29c86]        # 0x65043b30
    65019eaa:	mov    QWORD PTR [rsp+0x30],rbp
    65019eaf:	mov    QWORD PTR [rsp+0x38],rdi
    65019eb4:	test   rsi,rsi
    65019eb7:	je     0x65019ed8
    65019eb9:	mov    rax,rdx
    65019ebc:	sub    rax,rsi
    65019ebf:	sar    rax,0x2
    65019ec3:	je     0x65019ed8
    65019ec5:	cmp    rsi,rdx
    65019ec8:	jbe    0x65019ecf
    65019eca:	call   0x6501d960
    65019ecf:	sub    rdi,rsi
    65019ed2:	sar    rdi,0x2
    65019ed6:	jmp    0x65019edb
    65019ed8:	mov    rdi,rbx
    65019edb:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    65019ee0:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    65019ee6:	lea    r9,[rsp+0x60]
    65019eeb:	mov    r8d,0x1
    65019ef1:	lea    rdx,[rsp+0x30]
    65019ef6:	mov    rcx,rbp
    65019ef9:	call   0x65018ed0
    65019efe:	mov    r11,QWORD PTR [rip+0x29c2b]        # 0x65043b30
    65019f05:	mov    rsi,r11
    65019f08:	mov    rcx,QWORD PTR [rip+0x29c29]        # 0x65043b38
    65019f0f:	cmp    r11,rcx
    65019f12:	jbe    0x65019f27
    65019f14:	call   0x6501d960
    65019f19:	mov    rcx,QWORD PTR [rip+0x29c18]        # 0x65043b38
    65019f20:	mov    r11,QWORD PTR [rip+0x29c09]        # 0x65043b30
    65019f27:	lea    rax,[rsi+rdi*4]
    65019f2b:	cmp    rax,rcx
    65019f2e:	ja     0x65019f35
    65019f30:	cmp    rax,r11
    65019f33:	jae    0x65019f3a
    65019f35:	call   0x6501d960
    65019f3a:	lea    r8,[rip+0x1a867]        # 0x650347a8
    65019f41:	mov    edx,0xc
    65019f46:	lea    rcx,[rip+0x1a89b]        # 0x650347e8
    65019f4d:	call   0x6500bc30
    65019f52:	mov    rcx,rax
    65019f55:	call   QWORD PTR [rip+0x1a42d]        # 0x65034388
    65019f5b:	mov    r11d,eax
    65019f5e:	mov    DWORD PTR [rsp+0x60],eax
    65019f62:	mov    rdx,QWORD PTR [rip+0x29bcf]        # 0x65043b38
    65019f69:	mov    rsi,QWORD PTR [rip+0x29bc0]        # 0x65043b30
    65019f70:	test   rsi,rsi
    65019f73:	je     0x65019fa5
    65019f75:	mov    rcx,rdx
    65019f78:	sub    rcx,rsi
    65019f7b:	sar    rcx,0x2
    65019f7f:	mov    rax,QWORD PTR [rip+0x29bba]        # 0x65043b40
    65019f86:	sub    rax,rsi
    65019f89:	sar    rax,0x2
    65019f8d:	cmp    rcx,rax
    65019f90:	jae    0x65019fa5
    65019f92:	mov    DWORD PTR [rdx],r11d
    65019f95:	lea    rax,[rdx+0x4]
    65019f99:	mov    QWORD PTR [rip+0x29b98],rax        # 0x65043b38
    65019fa0:	jmp    0x6501a050
    65019fa5:	mov    rdi,rdx
    65019fa8:	cmp    rsi,rdx
    65019fab:	jbe    0x65019fc0
    65019fad:	call   0x6501d960
    65019fb2:	mov    rdx,QWORD PTR [rip+0x29b7f]        # 0x65043b38
    65019fb9:	mov    rsi,QWORD PTR [rip+0x29b70]        # 0x65043b30
    65019fc0:	mov    QWORD PTR [rsp+0x30],rbp
    65019fc5:	mov    QWORD PTR [rsp+0x38],rdi
    65019fca:	test   rsi,rsi
    65019fcd:	je     0x65019fee
    65019fcf:	mov    rax,rdx
    65019fd2:	sub    rax,rsi
    65019fd5:	sar    rax,0x2
    65019fd9:	je     0x65019fee
    65019fdb:	cmp    rsi,rdx
    65019fde:	jbe    0x65019fe5
    65019fe0:	call   0x6501d960
    65019fe5:	sub    rdi,rsi
    65019fe8:	sar    rdi,0x2
    65019fec:	jmp    0x65019ff1
    65019fee:	mov    rdi,rbx
    65019ff1:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    65019ff6:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    65019ffc:	lea    r9,[rsp+0x60]
    6501a001:	mov    r8d,0x1
    6501a007:	lea    rdx,[rsp+0x30]
    6501a00c:	mov    rcx,rbp
    6501a00f:	call   0x65018ed0
    6501a014:	mov    r11,QWORD PTR [rip+0x29b15]        # 0x65043b30
    6501a01b:	mov    rsi,r11
    6501a01e:	mov    rcx,QWORD PTR [rip+0x29b13]        # 0x65043b38
    6501a025:	cmp    r11,rcx
    6501a028:	jbe    0x6501a03d
    6501a02a:	call   0x6501d960
    6501a02f:	mov    rcx,QWORD PTR [rip+0x29b02]        # 0x65043b38
    6501a036:	mov    r11,QWORD PTR [rip+0x29af3]        # 0x65043b30
    6501a03d:	lea    rax,[rsi+rdi*4]
    6501a041:	cmp    rax,rcx
    6501a044:	ja     0x6501a04b
    6501a046:	cmp    rax,r11
    6501a049:	jae    0x6501a050
    6501a04b:	call   0x6501d960
    6501a050:	lea    r8,[rip+0x1a729]        # 0x65034780
    6501a057:	mov    edx,0xc
    6501a05c:	lea    rcx,[rip+0x1a70d]        # 0x65034770
    6501a063:	call   0x6500bc30
    6501a068:	mov    rcx,rax
    6501a06b:	call   QWORD PTR [rip+0x1a317]        # 0x65034388
    6501a071:	mov    r11d,eax
    6501a074:	mov    DWORD PTR [rsp+0x60],eax
    6501a078:	mov    rdx,QWORD PTR [rip+0x29ab9]        # 0x65043b38
    6501a07f:	mov    rsi,QWORD PTR [rip+0x29aaa]        # 0x65043b30
    6501a086:	test   rsi,rsi
    6501a089:	je     0x6501a0bb
    6501a08b:	mov    rcx,rdx
    6501a08e:	sub    rcx,rsi
    6501a091:	sar    rcx,0x2
    6501a095:	mov    rax,QWORD PTR [rip+0x29aa4]        # 0x65043b40
    6501a09c:	sub    rax,rsi
    6501a09f:	sar    rax,0x2
    6501a0a3:	cmp    rcx,rax
    6501a0a6:	jae    0x6501a0bb
    6501a0a8:	mov    DWORD PTR [rdx],r11d
    6501a0ab:	lea    rax,[rdx+0x4]
    6501a0af:	mov    QWORD PTR [rip+0x29a82],rax        # 0x65043b38
    6501a0b6:	jmp    0x6501a166
    6501a0bb:	mov    rdi,rdx
    6501a0be:	cmp    rsi,rdx
    6501a0c1:	jbe    0x6501a0d6
    6501a0c3:	call   0x6501d960
    6501a0c8:	mov    rdx,QWORD PTR [rip+0x29a69]        # 0x65043b38
    6501a0cf:	mov    rsi,QWORD PTR [rip+0x29a5a]        # 0x65043b30
    6501a0d6:	mov    QWORD PTR [rsp+0x30],rbp
    6501a0db:	mov    QWORD PTR [rsp+0x38],rdi
    6501a0e0:	test   rsi,rsi
    6501a0e3:	je     0x6501a104
    6501a0e5:	mov    rax,rdx
    6501a0e8:	sub    rax,rsi
    6501a0eb:	sar    rax,0x2
    6501a0ef:	je     0x6501a104
    6501a0f1:	cmp    rsi,rdx
    6501a0f4:	jbe    0x6501a0fb
    6501a0f6:	call   0x6501d960
    6501a0fb:	sub    rdi,rsi
    6501a0fe:	sar    rdi,0x2
    6501a102:	jmp    0x6501a107
    6501a104:	mov    rdi,rbx
    6501a107:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    6501a10c:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6501a112:	lea    r9,[rsp+0x60]
    6501a117:	mov    r8d,0x1
    6501a11d:	lea    rdx,[rsp+0x30]
    6501a122:	mov    rcx,rbp
    6501a125:	call   0x65018ed0
    6501a12a:	mov    r11,QWORD PTR [rip+0x299ff]        # 0x65043b30
    6501a131:	mov    rsi,r11
    6501a134:	mov    rcx,QWORD PTR [rip+0x299fd]        # 0x65043b38
    6501a13b:	cmp    r11,rcx
    6501a13e:	jbe    0x6501a153
    6501a140:	call   0x6501d960
    6501a145:	mov    rcx,QWORD PTR [rip+0x299ec]        # 0x65043b38
    6501a14c:	mov    r11,QWORD PTR [rip+0x299dd]        # 0x65043b30
    6501a153:	lea    rax,[rsi+rdi*4]
    6501a157:	cmp    rax,rcx
    6501a15a:	ja     0x6501a161
    6501a15c:	cmp    rax,r11
    6501a15f:	jae    0x6501a166
    6501a161:	call   0x6501d960
    6501a166:	lea    r8,[rip+0x1a5db]        # 0x65034748
    6501a16d:	mov    edx,0xc
    6501a172:	lea    rcx,[rip+0x1a5f7]        # 0x65034770
    6501a179:	call   0x6500bc30
    6501a17e:	mov    rcx,rax
    6501a181:	call   QWORD PTR [rip+0x1a201]        # 0x65034388
    6501a187:	mov    r11d,eax
    6501a18a:	mov    DWORD PTR [rsp+0x60],eax
    6501a18e:	mov    rdx,QWORD PTR [rip+0x299a3]        # 0x65043b38
    6501a195:	mov    rsi,QWORD PTR [rip+0x29994]        # 0x65043b30
    6501a19c:	test   rsi,rsi
    6501a19f:	je     0x6501a1d1
    6501a1a1:	mov    rcx,rdx
    6501a1a4:	sub    rcx,rsi
    6501a1a7:	sar    rcx,0x2
    6501a1ab:	mov    rax,QWORD PTR [rip+0x2998e]        # 0x65043b40
    6501a1b2:	sub    rax,rsi
    6501a1b5:	sar    rax,0x2
    6501a1b9:	cmp    rcx,rax
    6501a1bc:	jae    0x6501a1d1
    6501a1be:	mov    DWORD PTR [rdx],r11d
    6501a1c1:	lea    rax,[rdx+0x4]
    6501a1c5:	mov    QWORD PTR [rip+0x2996c],rax        # 0x65043b38
    6501a1cc:	jmp    0x6501a27c
    6501a1d1:	mov    rdi,rdx
    6501a1d4:	cmp    rsi,rdx
    6501a1d7:	jbe    0x6501a1ec
    6501a1d9:	call   0x6501d960
    6501a1de:	mov    rdx,QWORD PTR [rip+0x29953]        # 0x65043b38
    6501a1e5:	mov    rsi,QWORD PTR [rip+0x29944]        # 0x65043b30
    6501a1ec:	mov    QWORD PTR [rsp+0x30],rbp
    6501a1f1:	mov    QWORD PTR [rsp+0x38],rdi
    6501a1f6:	test   rsi,rsi
    6501a1f9:	je     0x6501a21a
    6501a1fb:	mov    rax,rdx
    6501a1fe:	sub    rax,rsi
    6501a201:	sar    rax,0x2
    6501a205:	je     0x6501a21a
    6501a207:	cmp    rsi,rdx
    6501a20a:	jbe    0x6501a211
    6501a20c:	call   0x6501d960
    6501a211:	sub    rdi,rsi
    6501a214:	sar    rdi,0x2
    6501a218:	jmp    0x6501a21d
    6501a21a:	mov    rdi,rbx
    6501a21d:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    6501a222:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6501a228:	lea    r9,[rsp+0x60]
    6501a22d:	mov    r8d,0x1
    6501a233:	lea    rdx,[rsp+0x30]
    6501a238:	mov    rcx,rbp
    6501a23b:	call   0x65018ed0
    6501a240:	mov    r11,QWORD PTR [rip+0x298e9]        # 0x65043b30
    6501a247:	mov    rsi,r11
    6501a24a:	mov    rcx,QWORD PTR [rip+0x298e7]        # 0x65043b38
    6501a251:	cmp    r11,rcx
    6501a254:	jbe    0x6501a269
    6501a256:	call   0x6501d960
    6501a25b:	mov    rcx,QWORD PTR [rip+0x298d6]        # 0x65043b38
    6501a262:	mov    r11,QWORD PTR [rip+0x298c7]        # 0x65043b30
    6501a269:	lea    rax,[rsi+rdi*4]
    6501a26d:	cmp    rax,rcx
    6501a270:	ja     0x6501a277
    6501a272:	cmp    rax,r11
    6501a275:	jae    0x6501a27c
    6501a277:	call   0x6501d960
    6501a27c:	call   QWORD PTR [rip+0x19e1e]        # 0x650340a0
    6501a282:	mov    ecx,eax
    6501a284:	call   0x6501ef20
    6501a289:	mov    r11,QWORD PTR [rip+0x298a0]        # 0x65043b30
    6501a290:	test   r11,r11
    6501a293:	jne    0x6501a29a
    6501a295:	mov    rdi,rbx
    6501a298:	jmp    0x6501a2a8
    6501a29a:	mov    rdi,QWORD PTR [rip+0x29897]        # 0x65043b38
    6501a2a1:	sub    rdi,r11
    6501a2a4:	sar    rdi,0x2
    6501a2a8:	call   0x6501ef40
    6501a2ad:	cdqe   
    6501a2af:	xor    edx,edx
    6501a2b1:	div    rdi
    6501a2b4:	mov    r8,QWORD PTR [rip+0x2987d]        # 0x65043b38
    6501a2bb:	mov    rcx,QWORD PTR [rip+0x2986e]        # 0x65043b30
    6501a2c2:	test   rcx,rcx
    6501a2c5:	je     0x6501a2d1
    6501a2c7:	mov    rbx,r8
    6501a2ca:	sub    rbx,rcx
    6501a2cd:	sar    rbx,0x2
    6501a2d1:	lea    eax,[rdx+0x1]
    6501a2d4:	cdqe   
    6501a2d6:	xor    edx,edx
    6501a2d8:	div    rbx
    6501a2db:	mov    DWORD PTR [rip+0x2983f],edx        # 0x65043b20
    6501a2e1:	movsxd rbx,edx
    6501a2e4:	test   rcx,rcx
    6501a2e7:	je     0x6501a2fa
    6501a2e9:	sub    r8,rcx
    6501a2ec:	sar    r8,0x2
    6501a2f0:	cmp    rbx,r8
    6501a2f3:	jae    0x6501a2fa
    6501a2f5:	mov    eax,DWORD PTR [rcx+rbx*4]
    6501a2f8:	jmp    0x6501a30a
    6501a2fa:	call   0x6501d960
    6501a2ff:	mov    r11,QWORD PTR [rip+0x2982a]        # 0x65043b30
    6501a306:	mov    eax,DWORD PTR [r11+rbx*4]
    6501a30a:	mov    rbx,QWORD PTR [rsp+0x70]
    6501a30f:	add    rsp,0x40
    6501a313:	pop    rdi
    6501a314:	pop    rsi
    6501a315:	pop    rbp
    6501a316:	ret    
    6501a317:	int3   
    6501a318:	int3   
    6501a319:	int3   
    6501a31a:	int3   
    6501a31b:	int3   
    6501a31c:	int3   
    6501a31d:	int3   
    6501a31e:	int3   
    6501a31f:	int3   
    6501a320:	rex push rbp
    6501a322:	mov    rbp,rdx
    6501a325:	mov    eax,DWORD PTR [rip+0x2981d]        # 0x65043b48
    6501a32b:	and    eax,0xfffffffe
    6501a32e:	mov    DWORD PTR [rip+0x29814],eax        # 0x65043b48
    6501a334:	pop    rbp
    6501a335:	ret    
    6501a336:	int3   
    6501a337:	int3   
    6501a338:	int3   
    6501a339:	int3   
    6501a33a:	int3   
    6501a33b:	int3   
    6501a33c:	int3   
    6501a33d:	int3   
    6501a33e:	int3   
    6501a33f:	int3   
    6501a340:	rex push rdi
    6501a342:	sub    rsp,0x40
    6501a346:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6501a34f:	mov    QWORD PTR [rsp+0x50],rbx
    6501a354:	mov    QWORD PTR [rsp+0x58],rsi
    6501a359:	mov    rbx,rdx
    6501a35c:	mov    rdi,rcx
    6501a35f:	call   0x65019c90
    6501a364:	mov    esi,eax
    6501a366:	lea    rcx,[rsp+0x60]
    6501a36b:	call   0x65011830
    6501a370:	nop
    6501a371:	mov    r9,QWORD PTR [rdi+0x18]
    6501a375:	cmp    QWORD PTR [rdi+0x20],0x10
    6501a37a:	jb     0x6501a382
    6501a37c:	mov    r8,QWORD PTR [rdi+0x8]
    6501a380:	jmp    0x6501a386
    6501a382:	lea    r8,[rdi+0x8]
    6501a386:	add    r9,0x1
    6501a38a:	mov    DWORD PTR [rsp+0x28],0xffffffff
    6501a392:	mov    QWORD PTR [rsp+0x20],rbx
    6501a397:	mov    edx,esi
    6501a399:	lea    rcx,[rsp+0x60]
    6501a39e:	call   0x650119c0
    6501a3a3:	test   al,al
    6501a3a5:	je     0x6501a3b8
    6501a3a7:	lea    rcx,[rsp+0x60]
    6501a3ac:	call   0x65011900
    6501a3b1:	mov    al,0x1
    6501a3b3:	jmp    0x6501a438
    6501a3b8:	mov    r8,QWORD PTR [rbx+0x20]
    6501a3bc:	cmp    r8,0x10
    6501a3c0:	jb     0x6501a3cb
    6501a3c2:	lea    rdx,[rbx+0x8]
    6501a3c6:	mov    rax,QWORD PTR [rdx]
    6501a3c9:	jmp    0x6501a3d2
    6501a3cb:	lea    rdx,[rbx+0x8]
    6501a3cf:	mov    rax,rdx
    6501a3d2:	lea    r10,[rip+0x1cbd1]        # 0x65036faa
    6501a3d9:	cmp    r10,rax
    6501a3dc:	jb     0x6501a417
    6501a3de:	cmp    r8,0x10
    6501a3e2:	jb     0x6501a3e9
    6501a3e4:	mov    rcx,QWORD PTR [rdx]
    6501a3e7:	jmp    0x6501a3ec
    6501a3e9:	mov    rcx,rdx
    6501a3ec:	mov    rax,QWORD PTR [rbx+0x18]
    6501a3f0:	add    rcx,rax
    6501a3f3:	cmp    rcx,r10
    6501a3f6:	jbe    0x6501a417
    6501a3f8:	cmp    r8,0x10
    6501a3fc:	jb     0x6501a401
    6501a3fe:	mov    rdx,QWORD PTR [rdx]
    6501a401:	sub    r10,rdx
    6501a404:	xor    r9d,r9d
    6501a407:	mov    r8,r10
    6501a40a:	mov    rdx,rbx
    6501a40d:	mov    rcx,rbx
    6501a410:	call   0x65001e20
    6501a415:	jmp    0x6501a42b
    6501a417:	mov    QWORD PTR [rbx+0x18],0x0
    6501a41f:	cmp    r8,0x10
    6501a423:	jb     0x6501a428
    6501a425:	mov    rdx,QWORD PTR [rdx]
    6501a428:	mov    BYTE PTR [rdx],0x0
    6501a42b:	lea    rcx,[rsp+0x60]
    6501a430:	call   0x65011900
    6501a435:	nop
    6501a436:	xor    al,al
    6501a438:	mov    rbx,QWORD PTR [rsp+0x50]
    6501a43d:	mov    rsi,QWORD PTR [rsp+0x58]
    6501a442:	add    rsp,0x40
    6501a446:	pop    rdi
    6501a447:	ret    
    6501a448:	int3   
    6501a449:	int3   
    6501a44a:	int3   
    6501a44b:	int3   
    6501a44c:	int3   
    6501a44d:	int3   
    6501a44e:	int3   
    6501a44f:	int3   
    6501a450:	rex push rbp
    6501a452:	sub    rsp,0x20
    6501a456:	mov    rbp,rdx
    6501a459:	lea    rcx,[rbp+0x60]
    6501a45d:	call   0x65011900
    6501a462:	add    rsp,0x20
    6501a466:	pop    rbp
    6501a467:	ret    
    6501a468:	int3   
    6501a469:	int3   
    6501a46a:	int3   
    6501a46b:	int3   
    6501a46c:	int3   
    6501a46d:	int3   
    6501a46e:	int3   
    6501a46f:	int3   
    6501a470:	mov    QWORD PTR [rsp+0x10],rdx
    6501a475:	push   rbp
    6501a476:	sub    rsp,0x30
    6501a47a:	mov    rbp,rdx
    6501a47d:	lea    rax,[rip+0xffffffffffffffb2]        # 0x6501a436
    6501a484:	jmp    0x6501a486
    6501a486:	add    rsp,0x30
    6501a48a:	pop    rbp
    6501a48b:	ret    
    6501a48c:	int3   
    6501a48d:	int3   
    6501a48e:	int3   
    6501a48f:	int3   
    6501a490:	mov    QWORD PTR [rsp+0x8],rcx
    6501a495:	push   rdi
    6501a496:	sub    rsp,0x30
    6501a49a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501a4a3:	mov    QWORD PTR [rsp+0x50],rbx
    6501a4a8:	mov    rbx,rcx
    6501a4ab:	mov    DWORD PTR [rsp+0x48],0x0
    6501a4b3:	lea    r8,[rip+0x1a406]        # 0x650348c0
    6501a4ba:	mov    edx,0x17
    6501a4bf:	lea    rcx,[rip+0x1a3e2]        # 0x650348a8
    6501a4c6:	call   0x6500bc30
    6501a4cb:	mov    rdi,rax
    6501a4ce:	lea    rcx,[rip+0x27bcb]        # 0x650420a0
    6501a4d5:	mov    rdx,QWORD PTR [rip+0x27bc4]        # 0x650420a0
    6501a4dc:	call   QWORD PTR [rdx+0x18]
    6501a4df:	add    rax,0x18
    6501a4e3:	mov    QWORD PTR [rbx],rax
    6501a4e6:	test   rdi,rdi
    6501a4e9:	je     0x6501a51e
    6501a4eb:	test   rdi,0xffffffffffff0000
    6501a4f2:	jne    0x6501a51e
    6501a4f4:	movzx  edi,di
    6501a4f7:	xor    edx,edx
    6501a4f9:	mov    ecx,edi
    6501a4fb:	call   0x650026f0
    6501a500:	test   rax,rax
    6501a503:	je     0x6501a519
    6501a505:	mov    r8d,edi
    6501a508:	mov    rdx,rax
    6501a50b:	mov    rcx,rbx
    6501a50e:	call   0x65003e00
    6501a513:	nop
    6501a514:	mov    rax,rbx
    6501a517:	jmp    0x6501a52d
    6501a519:	mov    rax,rbx
    6501a51c:	jmp    0x6501a52d
    6501a51e:	mov    rdx,rdi
    6501a521:	mov    rcx,rbx
    6501a524:	call   0x65003cc0
    6501a529:	nop
    6501a52a:	mov    rax,rbx
    6501a52d:	mov    rbx,QWORD PTR [rsp+0x50]
    6501a532:	add    rsp,0x30
    6501a536:	pop    rdi
    6501a537:	ret    
    6501a538:	int3   
    6501a539:	int3   
    6501a53a:	int3   
    6501a53b:	int3   
    6501a53c:	int3   
    6501a53d:	int3   
    6501a53e:	int3   
    6501a53f:	int3   
    6501a540:	rex push rbp
    6501a542:	sub    rsp,0x20
    6501a546:	mov    rbp,rdx
    6501a549:	mov    rcx,QWORD PTR [rbp+0x40]
    6501a54d:	call   0x65002100
    6501a552:	add    rsp,0x20
    6501a556:	pop    rbp
    6501a557:	ret    
    6501a558:	int3   
    6501a559:	int3   
    6501a55a:	int3   
    6501a55b:	int3   
    6501a55c:	int3   
    6501a55d:	int3   
    6501a55e:	int3   
    6501a55f:	int3   
    6501a560:	rex push rbx
    6501a562:	push   rsi
    6501a563:	push   rdi
    6501a564:	sub    rsp,0x50
    6501a568:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
    6501a571:	mov    QWORD PTR [rsp+0x78],0x0
    6501a57a:	lea    r8,[rip+0x1a3af]        # 0x65034930
    6501a581:	mov    edx,0xf
    6501a586:	lea    rcx,[rip+0x1a383]        # 0x65034910
    6501a58d:	call   0x6500c5e0
    6501a592:	mov    rsi,rax
    6501a595:	lea    rcx,[rip+0x27b04]        # 0x650420a0
    6501a59c:	mov    rdx,QWORD PTR [rip+0x27afd]        # 0x650420a0
    6501a5a3:	call   QWORD PTR [rdx+0x18]
    6501a5a6:	lea    rdi,[rax+0x18]
    6501a5aa:	mov    QWORD PTR [rsp+0x70],rdi
    6501a5af:	or     rbx,0xffffffffffffffff
    6501a5b3:	test   rsi,rsi
    6501a5b6:	je     0x6501a5fd
    6501a5b8:	test   rsi,0xffffffffffff0000
    6501a5bf:	jne    0x6501a5e9
    6501a5c1:	movzx  esi,si
    6501a5c4:	xor    edx,edx
    6501a5c6:	mov    ecx,esi
    6501a5c8:	call   0x650026f0
    6501a5cd:	test   rax,rax
    6501a5d0:	je     0x6501a614
    6501a5d2:	mov    r8d,esi
    6501a5d5:	mov    rdx,rax
    6501a5d8:	lea    rcx,[rsp+0x70]
    6501a5dd:	call   0x65003e00
    6501a5e2:	mov    rdi,QWORD PTR [rsp+0x70]
    6501a5e7:	jmp    0x6501a614
    6501a5e9:	xor    eax,eax
    6501a5eb:	mov    rcx,rbx
    6501a5ee:	mov    rdi,rsi
    6501a5f1:	repnz scas ax,WORD PTR es:[rdi]
    6501a5f4:	not    rcx
    6501a5f7:	sub    rcx,0x1
    6501a5fb:	jmp    0x6501a5ff
    6501a5fd:	xor    ecx,ecx
    6501a5ff:	mov    r8d,ecx
    6501a602:	mov    rdx,rsi
    6501a605:	lea    rcx,[rsp+0x70]
    6501a60a:	call   0x65003f90
    6501a60f:	mov    rdi,QWORD PTR [rsp+0x70]
    6501a614:	call   0x650171e0
    6501a619:	mov    QWORD PTR [rsp+0x30],0x0
    6501a622:	mov    DWORD PTR [rsp+0x28],0x0
    6501a62a:	mov    DWORD PTR [rsp+0x20],0x3
    6501a632:	xor    r9d,r9d
    6501a635:	xor    r8d,r8d
    6501a638:	mov    edx,0xc0000000
    6501a63d:	mov    rcx,rdi
    6501a640:	call   rax
    6501a642:	mov    QWORD PTR [rsp+0x80],rax
    6501a64a:	mov    QWORD PTR [rsp+0x78],rax
    6501a64f:	cmp    rax,0xffffffffffffffff
    6501a653:	je     0x6501a699
    6501a655:	lea    rdx,[rdi-0x18]
    6501a659:	lock xadd DWORD PTR [rdx+0x10],ebx
    6501a65e:	add    ebx,0xffffffff
    6501a661:	test   ebx,ebx
    6501a663:	jg     0x6501a66f
    6501a665:	mov    rcx,QWORD PTR [rdx]
    6501a668:	mov    rax,QWORD PTR [rcx]
    6501a66b:	call   QWORD PTR [rax+0x8]
    6501a66e:	nop
    6501a66f:	mov    rdi,QWORD PTR [rsp+0x80]
    6501a677:	test   rdi,rdi
    6501a67a:	je     0x6501a695
    6501a67c:	call   QWORD PTR [rip+0x199f6]        # 0x65034078
    6501a682:	mov    ebx,eax
    6501a684:	mov    rcx,rdi
    6501a687:	call   QWORD PTR [rip+0x199e3]        # 0x65034070
    6501a68d:	mov    ecx,ebx
    6501a68f:	call   QWORD PTR [rip+0x19a73]        # 0x65034108
    6501a695:	mov    al,0x1
    6501a697:	jmp    0x6501a6d0
    6501a699:	lea    rdx,[rdi-0x18]
    6501a69d:	mov    eax,ebx
    6501a69f:	lock xadd DWORD PTR [rdx+0x10],eax
    6501a6a4:	add    eax,0xffffffff
    6501a6a7:	test   eax,eax
    6501a6a9:	jg     0x6501a6b5
    6501a6ab:	mov    rcx,QWORD PTR [rdx]
    6501a6ae:	mov    rax,QWORD PTR [rcx]
    6501a6b1:	call   QWORD PTR [rax+0x8]
    6501a6b4:	nop
    6501a6b5:	call   QWORD PTR [rip+0x199bd]        # 0x65034078
    6501a6bb:	mov    edi,eax
    6501a6bd:	mov    rcx,rbx
    6501a6c0:	call   QWORD PTR [rip+0x199aa]        # 0x65034070
    6501a6c6:	mov    ecx,edi
    6501a6c8:	call   QWORD PTR [rip+0x19a3a]        # 0x65034108
    6501a6ce:	xor    al,al
    6501a6d0:	add    rsp,0x50
    6501a6d4:	pop    rdi
    6501a6d5:	pop    rsi
    6501a6d6:	pop    rbx
    6501a6d7:	ret    
    6501a6d8:	int3   
    6501a6d9:	int3   
    6501a6da:	int3   
    6501a6db:	int3   
    6501a6dc:	int3   
    6501a6dd:	int3   
    6501a6de:	int3   
    6501a6df:	int3   
    6501a6e0:	rex push rbp
    6501a6e2:	sub    rsp,0x20
    6501a6e6:	mov    rbp,rdx
    6501a6e9:	lea    rcx,[rbp+0x78]
    6501a6ed:	call   0x65001ce0
    6501a6f2:	add    rsp,0x20
    6501a6f6:	pop    rbp
    6501a6f7:	ret    
    6501a6f8:	int3   
    6501a6f9:	int3   
    6501a6fa:	int3   
    6501a6fb:	int3   
    6501a6fc:	int3   
    6501a6fd:	int3   
    6501a6fe:	int3   
    6501a6ff:	int3   
    6501a700:	rex push rbp
    6501a702:	sub    rsp,0x20
    6501a706:	mov    rbp,rdx
    6501a709:	lea    rcx,[rbp+0x70]
    6501a70d:	call   0x65002100
    6501a712:	add    rsp,0x20
    6501a716:	pop    rbp
    6501a717:	ret    
    6501a718:	int3   
    6501a719:	int3   
    6501a71a:	int3   
    6501a71b:	int3   
    6501a71c:	int3   
    6501a71d:	int3   
    6501a71e:	int3   
    6501a71f:	int3   
    6501a720:	rex push rbp
    6501a722:	sub    rsp,0x20
    6501a726:	mov    rbp,rdx
    6501a729:	lea    rcx,[rbp+0x70]
    6501a72d:	call   0x65001cb0
    6501a732:	add    rsp,0x20
    6501a736:	pop    rbp
    6501a737:	ret    
    6501a738:	int3   
    6501a739:	int3   
    6501a73a:	int3   
    6501a73b:	int3   
    6501a73c:	int3   
    6501a73d:	int3   
    6501a73e:	int3   
    6501a73f:	int3   
    6501a740:	rex push rbp
    6501a742:	push   r12
    6501a744:	push   r13
    6501a746:	push   r14
    6501a748:	push   r15
    6501a74a:	sub    rsp,0x300
    6501a751:	lea    rbp,[rsp+0x40]
    6501a756:	mov    QWORD PTR [rbp+0x120],0xfffffffffffffffe
    6501a761:	mov    QWORD PTR [rbp+0x2f8],rbx
    6501a768:	mov    QWORD PTR [rbp+0x300],rsi
    6501a76f:	mov    QWORD PTR [rbp+0x308],rdi
    6501a776:	mov    rax,QWORD PTR [rip+0x279a3]        # 0x65042120
    6501a77d:	xor    rax,rbp
    6501a780:	mov    QWORD PTR [rbp+0x2b0],rax
    6501a787:	mov    rsi,rcx
    6501a78a:	mov    QWORD PTR [rbp+0x138],rcx
    6501a791:	xor    r15d,r15d
    6501a794:	mov    DWORD PTR [rbp+0x70],r15d
    6501a798:	call   QWORD PTR [rip+0x278fa]        # 0x65042098
    6501a79e:	lea    rcx,[rip+0x278fb]        # 0x650420a0
    6501a7a5:	mov    rax,QWORD PTR [rip+0x278f4]        # 0x650420a0
    6501a7ac:	call   QWORD PTR [rax+0x18]
    6501a7af:	add    rax,0x18
    6501a7b3:	mov    QWORD PTR [rsi],rax
    6501a7b6:	mov    DWORD PTR [rbp+0x70],0x1
    6501a7bd:	lea    r8,[rip+0x1a644]        # 0x65034e08
    6501a7c4:	lea    edx,[r15+0xd]
    6501a7c8:	lea    rcx,[rip+0x1a629]        # 0x65034df8
    6501a7cf:	call   0x6500bc30
    6501a7d4:	mov    rdx,rax
    6501a7d7:	mov    rcx,rsi
    6501a7da:	call   0x65003ab0
    6501a7df:	lea    r8,[rip+0x1a5d2]        # 0x65034db8
    6501a7e6:	lea    edx,[r15+0x3]
    6501a7ea:	lea    rcx,[rip+0x1a5c3]        # 0x65034db4
    6501a7f1:	call   0x6500bc30
    6501a7f6:	mov    rdx,rax
    6501a7f9:	mov    rcx,rsi
    6501a7fc:	call   0x65003ab0
    6501a801:	lea    rdx,[rip+0x1a5a0]        # 0x65034da8
    6501a808:	mov    rcx,rsi
    6501a80b:	call   0x65003ab0
    6501a810:	lea    r8,[rip+0x1a559]        # 0x65034d70
    6501a817:	lea    edx,[r15+0x3]
    6501a81b:	lea    rcx,[rip+0x1a546]        # 0x65034d68
    6501a822:	call   0x6500bc30
    6501a827:	mov    rdx,rax
    6501a82a:	mov    rcx,rsi
    6501a82d:	call   0x65003ab0
    6501a832:	lea    rdx,[rip+0x1a527]        # 0x65034d60
    6501a839:	mov    rcx,rsi
    6501a83c:	call   0x65003ab0
    6501a841:	lea    rcx,[rip+0x27858]        # 0x650420a0
    6501a848:	mov    rax,QWORD PTR [rip+0x27851]        # 0x650420a0
    6501a84f:	call   QWORD PTR [rax+0x18]
    6501a852:	add    rax,0x18
    6501a856:	mov    QWORD PTR [rbp+0xd0],rax
    6501a85d:	lea    rcx,[rip+0x2783c]        # 0x650420a0
    6501a864:	mov    rax,QWORD PTR [rip+0x27835]        # 0x650420a0
    6501a86b:	call   QWORD PTR [rax+0x18]
    6501a86e:	add    rax,0x18
    6501a872:	mov    QWORD PTR [rbp+0xc0],rax
    6501a879:	lea    rcx,[rbp+0x180]
    6501a880:	call   0x6500b570
    6501a885:	or     r12,0xffffffffffffffff
    6501a889:	test   al,al
    6501a88b:	je     0x6501aa6a
    6501a891:	lea    r8,[rip+0x1a488]        # 0x65034d20
    6501a898:	lea    edx,[r15+0x4]
    6501a89c:	lea    rcx,[rip+0x1a475]        # 0x65034d18
    6501a8a3:	call   0x6500bc30
    6501a8a8:	mov    rbx,rax
    6501a8ab:	lea    rcx,[rip+0x277ee]        # 0x650420a0
    6501a8b2:	mov    rdx,QWORD PTR [rip+0x277e7]        # 0x650420a0
    6501a8b9:	call   QWORD PTR [rdx+0x18]
    6501a8bc:	lea    rdi,[rax+0x18]
    6501a8c0:	mov    QWORD PTR [rbp+0x40],rdi
    6501a8c4:	test   rbx,rbx
    6501a8c7:	je     0x6501a8f8
    6501a8c9:	test   rbx,0xffffffffffff0000
    6501a8d0:	jne    0x6501a8f8
    6501a8d2:	movzx  ebx,bx
    6501a8d5:	xor    edx,edx
    6501a8d7:	mov    ecx,ebx
    6501a8d9:	call   0x650026f0
    6501a8de:	test   rax,rax
    6501a8e1:	je     0x6501a908
    6501a8e3:	mov    r8d,ebx
    6501a8e6:	mov    rdx,rax
    6501a8e9:	lea    rcx,[rbp+0x40]
    6501a8ed:	call   0x65003e00
    6501a8f2:	mov    rdi,QWORD PTR [rbp+0x40]
    6501a8f6:	jmp    0x6501a908
    6501a8f8:	mov    rdx,rbx
    6501a8fb:	lea    rcx,[rbp+0x40]
    6501a8ff:	call   0x65003cc0
    6501a904:	mov    rdi,QWORD PTR [rbp+0x40]
    6501a908:	mov    edx,DWORD PTR [rdi-0x10]
    6501a90b:	mov    DWORD PTR [rbp+0x0],edx
    6501a90e:	mov    r14,rdi
    6501a911:	mov    rax,QWORD PTR [rsi]
    6501a914:	mov    r13,rdi
    6501a917:	sub    r13,rax
    6501a91a:	sar    r13,1
    6501a91d:	mov    r15d,DWORD PTR [rax-0x10]
    6501a921:	lea    ebx,[r15+rdx*1]
    6501a925:	mov    ecx,0x1
    6501a92a:	sub    ecx,DWORD PTR [rax-0x8]
    6501a92d:	mov    eax,DWORD PTR [rax-0xc]
    6501a930:	sub    eax,ebx
    6501a932:	or     eax,ecx
    6501a934:	jge    0x6501a943
    6501a936:	mov    edx,ebx
    6501a938:	mov    rcx,rsi
    6501a93b:	call   0x65002640
    6501a940:	mov    edx,DWORD PTR [rbp+0x0]
    6501a943:	mov    rax,QWORD PTR [rsi]
    6501a946:	cmp    r13,r15
    6501a949:	ja     0x6501a94f
    6501a94b:	lea    r14,[rax+r13*2]
    6501a94f:	movsxd rdx,edx
    6501a952:	add    rdx,rdx
    6501a955:	lea    rcx,[rax+r15*2]
    6501a959:	mov    r9,rdx
    6501a95c:	mov    r8,r14
    6501a95f:	call   0x6501d640
    6501a964:	test   ebx,ebx
    6501a966:	js     0x6501aa5c
    6501a96c:	mov    rax,QWORD PTR [rsi]
    6501a96f:	cmp    ebx,DWORD PTR [rax-0xc]
    6501a972:	jg     0x6501aa5c
    6501a978:	mov    DWORD PTR [rax-0x10],ebx
    6501a97b:	movsxd rcx,ebx
    6501a97e:	mov    rax,QWORD PTR [rsi]
    6501a981:	mov    WORD PTR [rax+rcx*2],0x0
    6501a987:	lea    rdx,[rdi-0x18]
    6501a98b:	mov    eax,r12d
    6501a98e:	lock xadd DWORD PTR [rdx+0x10],eax
    6501a993:	add    eax,0xffffffff
    6501a996:	test   eax,eax
    6501a998:	jg     0x6501a9a3
    6501a99a:	mov    rcx,QWORD PTR [rdx]
    6501a99d:	mov    rax,QWORD PTR [rcx]
    6501a9a0:	call   QWORD PTR [rax+0x8]
    6501a9a3:	lea    rdx,[rbp+0x180]
    6501a9aa:	lea    rcx,[rbp+0xb8]
    6501a9b1:	call   0x650044b0
    6501a9b6:	nop
    6501a9b7:	mov    r13,QWORD PTR [rax]
    6501a9ba:	movsxd r15,DWORD PTR [r13-0x10]
    6501a9be:	mov    rax,QWORD PTR [rsi]
    6501a9c1:	mov    rbx,r13
    6501a9c4:	sub    rbx,rax
    6501a9c7:	sar    rbx,1
    6501a9ca:	mov    r14d,DWORD PTR [rax-0x10]
    6501a9ce:	lea    edi,[r14+r15*1]
    6501a9d2:	mov    ecx,0x1
    6501a9d7:	sub    ecx,DWORD PTR [rax-0x8]
    6501a9da:	mov    eax,DWORD PTR [rax-0xc]
    6501a9dd:	sub    eax,edi
    6501a9df:	or     eax,ecx
    6501a9e1:	jge    0x6501a9ed
    6501a9e3:	mov    edx,edi
    6501a9e5:	mov    rcx,rsi
    6501a9e8:	call   0x65002640
    6501a9ed:	mov    rax,QWORD PTR [rsi]
    6501a9f0:	cmp    rbx,r14
    6501a9f3:	ja     0x6501a9f9
    6501a9f5:	lea    r13,[rax+rbx*2]
    6501a9f9:	mov    rdx,r15
    6501a9fc:	add    rdx,rdx
    6501a9ff:	lea    rcx,[rax+r14*2]
    6501aa03:	mov    r9,rdx
    6501aa06:	mov    r8,r13
    6501aa09:	call   0x6501d640
    6501aa0e:	test   edi,edi
    6501aa10:	js     0x6501aa51
    6501aa12:	mov    rax,QWORD PTR [rsi]
    6501aa15:	cmp    edi,DWORD PTR [rax-0xc]
    6501aa18:	jg     0x6501aa51
    6501aa1a:	mov    DWORD PTR [rax-0x10],edi
    6501aa1d:	movsxd rcx,edi
    6501aa20:	mov    rax,QWORD PTR [rsi]
    6501aa23:	mov    WORD PTR [rax+rcx*2],0x0
    6501aa29:	mov    rdx,QWORD PTR [rbp+0xb8]
    6501aa30:	add    rdx,0xffffffffffffffe8
    6501aa34:	mov    eax,r12d
    6501aa37:	lock xadd DWORD PTR [rdx+0x10],eax
    6501aa3c:	add    eax,0xffffffff
    6501aa3f:	test   eax,eax
    6501aa41:	jg     0x6501aa67
    6501aa43:	mov    rcx,QWORD PTR [rdx]
    6501aa46:	mov    rax,QWORD PTR [rcx]
    6501aa49:	call   QWORD PTR [rax+0x8]
    6501aa4c:	xor    r15d,r15d
    6501aa4f:	jmp    0x6501aa6a
    6501aa51:	mov    ecx,0x80070057
    6501aa56:	call   0x65001050
    6501aa5b:	nop
    6501aa5c:	mov    ecx,0x80070057
    6501aa61:	call   0x65001050
    6501aa66:	nop
    6501aa67:	xor    r15d,r15d
    6501aa6a:	lea    r8,[rip+0x1a27f]        # 0x65034cf0
    6501aa71:	mov    edx,0x7
    6501aa76:	lea    rcx,[rip+0x1a26b]        # 0x65034ce8
    6501aa7d:	call   0x6500bc30
    6501aa82:	mov    rdx,rax
    6501aa85:	mov    rcx,rsi
    6501aa88:	call   0x65003ab0
    6501aa8d:	call   0x6501a560
    6501aa92:	test   al,al
    6501aa94:	je     0x6501aab9
    6501aa96:	lea    r8,[rip+0x1a213]        # 0x65034cb0
    6501aa9d:	mov    edx,0x6
    6501aaa2:	lea    rcx,[rip+0x1a1fb]        # 0x65034ca4
    6501aaa9:	call   0x6500bc30
    6501aaae:	mov    rdx,rax
    6501aab1:	mov    rcx,rsi
    6501aab4:	call   0x65003ab0
    6501aab9:	lea    rcx,[rip+0x275e0]        # 0x650420a0
    6501aac0:	mov    rax,QWORD PTR [rip+0x275d9]        # 0x650420a0
    6501aac7:	call   QWORD PTR [rax+0x18]
    6501aaca:	add    rax,0x18
    6501aace:	mov    QWORD PTR [rbp+0x68],rax
    6501aad2:	lea    rcx,[rip+0x275c7]        # 0x650420a0
    6501aad9:	mov    rax,QWORD PTR [rip+0x275c0]        # 0x650420a0
    6501aae0:	call   QWORD PTR [rax+0x18]
    6501aae3:	add    rax,0x18
    6501aae7:	mov    QWORD PTR [rbp+0xb0],rax
    6501aaee:	lea    rcx,[rip+0x275ab]        # 0x650420a0
    6501aaf5:	mov    rax,QWORD PTR [rip+0x275a4]        # 0x650420a0
    6501aafc:	call   QWORD PTR [rax+0x18]
    6501aaff:	add    rax,0x18
    6501ab03:	mov    QWORD PTR [rbp+0x78],rax
    6501ab07:	mov    QWORD PTR [rbp+0xa0],r15
    6501ab0e:	lea    r8,[rbp+0xa0]
    6501ab15:	lea    rdx,[rbp+0x78]
    6501ab19:	lea    rcx,[rbp+0x68]
    6501ab1d:	call   0x65013010
    6501ab22:	test   al,al
    6501ab24:	je     0x6501af61
    6501ab2a:	lea    rdx,[rbp+0x78]
    6501ab2e:	lea    rcx,[rbp+0xa8]
    6501ab35:	call   0x65004a40
    6501ab3a:	mov    rbx,rax
    6501ab3d:	lea    r8,[rip+0x1a124]        # 0x65034c68
    6501ab44:	mov    edx,0x5
    6501ab49:	lea    rcx,[rip+0x1a110]        # 0x65034c60
    6501ab50:	call   0x6500bc30
    6501ab55:	mov    rdi,rax
    6501ab58:	lea    rcx,[rip+0x27541]        # 0x650420a0
    6501ab5f:	mov    rdx,QWORD PTR [rip+0x2753a]        # 0x650420a0
    6501ab66:	call   QWORD PTR [rdx+0x18]
    6501ab69:	add    rax,0x18
    6501ab6d:	mov    QWORD PTR [rbp+0x30],rax
    6501ab71:	test   rdi,rdi
    6501ab74:	je     0x6501aba1
    6501ab76:	test   rdi,0xffffffffffff0000
    6501ab7d:	jne    0x6501aba1
    6501ab7f:	movzx  edi,di
    6501ab82:	xor    edx,edx
    6501ab84:	mov    ecx,edi
    6501ab86:	call   0x650026f0
    6501ab8b:	test   rax,rax
    6501ab8e:	je     0x6501abae
    6501ab90:	mov    r8d,edi
    6501ab93:	mov    rdx,rax
    6501ab96:	lea    rcx,[rbp+0x30]
    6501ab9a:	call   0x65003e00
    6501ab9f:	jmp    0x6501abae
    6501aba1:	mov    rdx,rdi
    6501aba4:	lea    rcx,[rbp+0x30]
    6501aba8:	call   0x65003cc0
    6501abad:	nop
    6501abae:	mov    r8,rbx
    6501abb1:	lea    rdx,[rbp+0x30]
    6501abb5:	lea    rcx,[rbp+0x100]
    6501abbc:	call   0x650185c0
    6501abc1:	nop
    6501abc2:	mov    r13,QWORD PTR [rax]
    6501abc5:	movsxd r15,DWORD PTR [r13-0x10]
    6501abc9:	mov    rax,QWORD PTR [rsi]
    6501abcc:	mov    rbx,r13
    6501abcf:	sub    rbx,rax
    6501abd2:	sar    rbx,1
    6501abd5:	mov    r14d,DWORD PTR [rax-0x10]
    6501abd9:	lea    edi,[r14+r15*1]
    6501abdd:	mov    ecx,0x1
    6501abe2:	sub    ecx,DWORD PTR [rax-0x8]
    6501abe5:	mov    eax,DWORD PTR [rax-0xc]
    6501abe8:	sub    eax,edi
    6501abea:	or     eax,ecx
    6501abec:	jge    0x6501abf8
    6501abee:	mov    edx,edi
    6501abf0:	mov    rcx,rsi
    6501abf3:	call   0x65002640
    6501abf8:	mov    rax,QWORD PTR [rsi]
    6501abfb:	cmp    rbx,r14
    6501abfe:	ja     0x6501ac04
    6501ac00:	lea    r13,[rax+rbx*2]
    6501ac04:	mov    rdx,r15
    6501ac07:	add    rdx,rdx
    6501ac0a:	lea    rcx,[rax+r14*2]
    6501ac0e:	mov    r9,rdx
    6501ac11:	mov    r8,r13
    6501ac14:	call   0x6501d640
    6501ac19:	test   edi,edi
    6501ac1b:	js     0x6501af56
    6501ac21:	mov    rax,QWORD PTR [rsi]
    6501ac24:	cmp    edi,DWORD PTR [rax-0xc]
    6501ac27:	jg     0x6501af56
    6501ac2d:	mov    DWORD PTR [rax-0x10],edi
    6501ac30:	movsxd rcx,edi
    6501ac33:	mov    rax,QWORD PTR [rsi]
    6501ac36:	mov    WORD PTR [rax+rcx*2],0x0
    6501ac3c:	mov    rdx,QWORD PTR [rbp+0x100]
    6501ac43:	add    rdx,0xffffffffffffffe8
    6501ac47:	mov    eax,r12d
    6501ac4a:	lock xadd DWORD PTR [rdx+0x10],eax
    6501ac4f:	add    eax,0xffffffff
    6501ac52:	test   eax,eax
    6501ac54:	jg     0x6501ac60
    6501ac56:	mov    rcx,QWORD PTR [rdx]
    6501ac59:	mov    rax,QWORD PTR [rcx]
    6501ac5c:	call   QWORD PTR [rax+0x8]
    6501ac5f:	nop
    6501ac60:	mov    rdx,QWORD PTR [rbp+0x30]
    6501ac64:	add    rdx,0xffffffffffffffe8
    6501ac68:	mov    eax,r12d
    6501ac6b:	lock xadd DWORD PTR [rdx+0x10],eax
    6501ac70:	add    eax,0xffffffff
    6501ac73:	test   eax,eax
    6501ac75:	jg     0x6501ac81
    6501ac77:	mov    rcx,QWORD PTR [rdx]
    6501ac7a:	mov    rax,QWORD PTR [rcx]
    6501ac7d:	call   QWORD PTR [rax+0x8]
    6501ac80:	nop
    6501ac81:	mov    rdx,QWORD PTR [rbp+0xa8]
    6501ac88:	add    rdx,0xffffffffffffffe8
    6501ac8c:	mov    eax,r12d
    6501ac8f:	lock xadd DWORD PTR [rdx+0x10],eax
    6501ac94:	add    eax,0xffffffff
    6501ac97:	test   eax,eax
    6501ac99:	jg     0x6501aca4
    6501ac9b:	mov    rcx,QWORD PTR [rdx]
    6501ac9e:	mov    rax,QWORD PTR [rcx]
    6501aca1:	call   QWORD PTR [rax+0x8]
    6501aca4:	lea    rdx,[rbp+0x68]
    6501aca8:	lea    rcx,[rbp+0xc8]
    6501acaf:	call   0x65004a40
    6501acb4:	mov    rbx,rax
    6501acb7:	lea    r8,[rip+0x19f62]        # 0x65034c20
    6501acbe:	mov    edx,0x7
    6501acc3:	lea    rcx,[rip+0x19f4e]        # 0x65034c18
    6501acca:	call   0x6500bc30
    6501accf:	mov    rdi,rax
    6501acd2:	lea    rcx,[rip+0x273c7]        # 0x650420a0
    6501acd9:	mov    rdx,QWORD PTR [rip+0x273c0]        # 0x650420a0
    6501ace0:	call   QWORD PTR [rdx+0x18]
    6501ace3:	add    rax,0x18
    6501ace7:	mov    QWORD PTR [rbp+0x50],rax
    6501aceb:	test   rdi,rdi
    6501acee:	je     0x6501ad1b
    6501acf0:	test   rdi,0xffffffffffff0000
    6501acf7:	jne    0x6501ad1b
    6501acf9:	movzx  edi,di
    6501acfc:	xor    edx,edx
    6501acfe:	mov    ecx,edi
    6501ad00:	call   0x650026f0
    6501ad05:	test   rax,rax
    6501ad08:	je     0x6501ad28
    6501ad0a:	mov    r8d,edi
    6501ad0d:	mov    rdx,rax
    6501ad10:	lea    rcx,[rbp+0x50]
    6501ad14:	call   0x65003e00
    6501ad19:	jmp    0x6501ad28
    6501ad1b:	mov    rdx,rdi
    6501ad1e:	lea    rcx,[rbp+0x50]
    6501ad22:	call   0x65003cc0
    6501ad27:	nop
    6501ad28:	mov    r8,rbx
    6501ad2b:	lea    rdx,[rbp+0x50]
    6501ad2f:	lea    rcx,[rbp+0xe8]
    6501ad36:	call   0x650185c0
    6501ad3b:	nop
    6501ad3c:	mov    r13,QWORD PTR [rax]
    6501ad3f:	movsxd r15,DWORD PTR [r13-0x10]
    6501ad43:	mov    rax,QWORD PTR [rsi]
    6501ad46:	mov    rbx,r13
    6501ad49:	sub    rbx,rax
    6501ad4c:	sar    rbx,1
    6501ad4f:	mov    r14d,DWORD PTR [rax-0x10]
    6501ad53:	lea    edi,[r14+r15*1]
    6501ad57:	mov    ecx,0x1
    6501ad5c:	sub    ecx,DWORD PTR [rax-0x8]
    6501ad5f:	mov    eax,DWORD PTR [rax-0xc]
    6501ad62:	sub    eax,edi
    6501ad64:	or     eax,ecx
    6501ad66:	jge    0x6501ad72
    6501ad68:	mov    edx,edi
    6501ad6a:	mov    rcx,rsi
    6501ad6d:	call   0x65002640
    6501ad72:	mov    rax,QWORD PTR [rsi]
    6501ad75:	cmp    rbx,r14
    6501ad78:	ja     0x6501ad7e
    6501ad7a:	lea    r13,[rax+rbx*2]
    6501ad7e:	mov    rdx,r15
    6501ad81:	add    rdx,rdx
    6501ad84:	lea    rcx,[rax+r14*2]
    6501ad88:	mov    r9,rdx
    6501ad8b:	mov    r8,r13
    6501ad8e:	call   0x6501d640
    6501ad93:	test   edi,edi
    6501ad95:	js     0x6501af4b
    6501ad9b:	mov    rax,QWORD PTR [rsi]
    6501ad9e:	cmp    edi,DWORD PTR [rax-0xc]
    6501ada1:	jg     0x6501af4b
    6501ada7:	mov    DWORD PTR [rax-0x10],edi
    6501adaa:	movsxd rcx,edi
    6501adad:	mov    rax,QWORD PTR [rsi]
    6501adb0:	mov    WORD PTR [rax+rcx*2],0x0
    6501adb6:	mov    rdx,QWORD PTR [rbp+0xe8]
    6501adbd:	add    rdx,0xffffffffffffffe8
    6501adc1:	mov    eax,r12d
    6501adc4:	lock xadd DWORD PTR [rdx+0x10],eax
    6501adc9:	add    eax,0xffffffff
    6501adcc:	test   eax,eax
    6501adce:	jg     0x6501adda
    6501add0:	mov    rcx,QWORD PTR [rdx]
    6501add3:	mov    rax,QWORD PTR [rcx]
    6501add6:	call   QWORD PTR [rax+0x8]
    6501add9:	nop
    6501adda:	mov    rdx,QWORD PTR [rbp+0x50]
    6501adde:	add    rdx,0xffffffffffffffe8
    6501ade2:	mov    eax,r12d
    6501ade5:	lock xadd DWORD PTR [rdx+0x10],eax
    6501adea:	add    eax,0xffffffff
    6501aded:	test   eax,eax
    6501adef:	jg     0x6501adfb
    6501adf1:	mov    rcx,QWORD PTR [rdx]
    6501adf4:	mov    rax,QWORD PTR [rcx]
    6501adf7:	call   QWORD PTR [rax+0x8]
    6501adfa:	nop
    6501adfb:	mov    rdx,QWORD PTR [rbp+0xc8]
    6501ae02:	add    rdx,0xffffffffffffffe8
    6501ae06:	mov    eax,r12d
    6501ae09:	lock xadd DWORD PTR [rdx+0x10],eax
    6501ae0e:	add    eax,0xffffffff
    6501ae11:	test   eax,eax
    6501ae13:	jg     0x6501ae1e
    6501ae15:	mov    rcx,QWORD PTR [rdx]
    6501ae18:	mov    rax,QWORD PTR [rcx]
    6501ae1b:	call   QWORD PTR [rax+0x8]
    6501ae1e:	lea    rcx,[rip+0x2727b]        # 0x650420a0
    6501ae25:	mov    rax,QWORD PTR [rip+0x27274]        # 0x650420a0
    6501ae2c:	call   QWORD PTR [rax+0x18]
    6501ae2f:	add    rax,0x18
    6501ae33:	mov    QWORD PTR [rbp+0x48],rax
    6501ae37:	lea    r8,[rip+0x19da2]        # 0x65034be0
    6501ae3e:	mov    edx,0xc
    6501ae43:	lea    rcx,[rip+0x19d76]        # 0x65034bc0
    6501ae4a:	call   0x6500c5e0
    6501ae4f:	mov    rdx,rax
    6501ae52:	mov    r8,QWORD PTR [rbp+0xa0]
    6501ae59:	lea    rcx,[rbp+0x48]
    6501ae5d:	call   0x65002560
    6501ae62:	call   QWORD PTR [rip+0x27230]        # 0x65042098
    6501ae68:	mov    r13d,eax
    6501ae6b:	mov    rdi,QWORD PTR [rbp+0x48]
    6501ae6f:	cmp    DWORD PTR [rdi-0x8],0x1
    6501ae73:	jle    0x6501ae85
    6501ae75:	mov    edx,DWORD PTR [rdi-0x10]
    6501ae78:	lea    rcx,[rbp+0x48]
    6501ae7c:	call   0x65002130
    6501ae81:	mov    rdi,QWORD PTR [rbp+0x48]
    6501ae85:	test   rdi,rdi
    6501ae88:	jne    0x6501ae95
    6501ae8a:	xor    r15d,r15d
    6501ae8d:	mov    rbx,r15
    6501ae90:	jmp    0x6501af21
    6501ae95:	mov    rcx,rdi
    6501ae98:	call   QWORD PTR [rip+0x191f2]        # 0x65034090
    6501ae9e:	lea    r9d,[rax+0x1]
    6501aea2:	cmp    r9d,0x3fffffff
    6501aea9:	jle    0x6501aeb3
    6501aeab:	xor    r15d,r15d
    6501aeae:	mov    rbx,r15
    6501aeb1:	jmp    0x6501af21
    6501aeb3:	movsxd rax,r9d
    6501aeb6:	add    rax,rax
    6501aeb9:	lea    rcx,[rax+0xf]
    6501aebd:	cmp    rcx,rax
    6501aec0:	ja     0x6501aecc
    6501aec2:	movabs rcx,0xffffffffffffff0
    6501aecc:	and    rcx,0xfffffffffffffff0
    6501aed0:	mov    rax,rcx
    6501aed3:	call   0x650330c0
    6501aed8:	sub    rsp,rcx
    6501aedb:	lea    rbx,[rsp+0x40]
    6501aee0:	test   rbx,rbx
    6501aee3:	je     0x6501af1b
    6501aee5:	mov    BYTE PTR [rbx],0x0
    6501aee8:	lea    eax,[r9+r9*1]
    6501aeec:	xor    r15d,r15d
    6501aeef:	mov    QWORD PTR [rsp+0x38],r15
    6501aef4:	mov    QWORD PTR [rsp+0x30],r15
    6501aef9:	mov    DWORD PTR [rsp+0x28],eax
    6501aefd:	mov    QWORD PTR [rsp+0x20],rbx
    6501af02:	mov    r9d,r12d
    6501af05:	mov    r8,rdi
    6501af08:	xor    edx,edx
    6501af0a:	mov    ecx,r13d
    6501af0d:	call   QWORD PTR [rip+0x1912d]        # 0x65034040
    6501af13:	test   eax,eax
    6501af15:	cmove  rbx,r15
    6501af19:	jmp    0x6501af21
    6501af1b:	xor    r15d,r15d
    6501af1e:	mov    rbx,r15
    6501af21:	mov    rdx,rbx
    6501af24:	mov    rcx,rsi
    6501af27:	call   0x65003ab0
    6501af2c:	nop
    6501af2d:	lea    rdx,[rdi-0x18]
    6501af31:	mov    eax,r12d
    6501af34:	lock xadd DWORD PTR [rdx+0x10],eax
    6501af39:	add    eax,0xffffffff
    6501af3c:	test   eax,eax
    6501af3e:	jg     0x6501af61
    6501af40:	mov    rcx,QWORD PTR [rdx]
    6501af43:	mov    rax,QWORD PTR [rcx]
    6501af46:	call   QWORD PTR [rax+0x8]
    6501af49:	jmp    0x6501af61
    6501af4b:	mov    ecx,0x80070057
    6501af50:	call   0x65001050
    6501af55:	nop
    6501af56:	mov    ecx,0x80070057
    6501af5b:	call   0x65001050
    6501af60:	nop
    6501af61:	mov    QWORD PTR [rbp+0x88],r15
    6501af68:	mov    QWORD PTR [rbp+0x90],r15
    6501af6f:	mov    QWORD PTR [rbp+0x98],r15
    6501af76:	lea    rcx,[rbp+0x80]
    6501af7d:	call   0x65013590
    6501af82:	mov    rbx,r15
    6501af85:	mov    QWORD PTR [rbp+0x60],rbx
    6501af89:	mov    r14,r15
    6501af8c:	movabs rdx,0x6666666666666667
    6501af96:	data16 data16 xchg ax,ax
    6501af9a:	data16 xchg ax,ax
    6501af9d:	data16 xchg ax,ax
    6501afa0:	mov    rax,QWORD PTR [rbp+0x88]
    6501afa7:	test   rax,rax
    6501afaa:	jne    0x6501afb1
    6501afac:	mov    rdx,r15
    6501afaf:	jmp    0x6501afcf
    6501afb1:	mov    rcx,QWORD PTR [rbp+0x90]
    6501afb8:	sub    rcx,rax
    6501afbb:	mov    rax,rdx
    6501afbe:	imul   rcx
    6501afc1:	sar    rdx,0x4
    6501afc5:	mov    rax,rdx
    6501afc8:	shr    rax,0x3f
    6501afcc:	add    rdx,rax
    6501afcf:	cmp    rbx,rdx
    6501afd2:	je     0x6501b260
    6501afd8:	lea    r8,[rip+0x19ba1]        # 0x65034b80
    6501afdf:	mov    edx,0x5
    6501afe4:	lea    rcx,[rip+0x19b8d]        # 0x65034b78
    6501afeb:	call   0x6500bc30
    6501aff0:	mov    r13,rax
    6501aff3:	lea    rcx,[rip+0x270a6]        # 0x650420a0
    6501affa:	mov    rdx,QWORD PTR [rip+0x2709f]        # 0x650420a0
    6501b001:	call   QWORD PTR [rdx+0x18]
    6501b004:	lea    rdi,[rax+0x18]
    6501b008:	mov    QWORD PTR [rbp+0x20],rdi
    6501b00c:	test   r13,r13
    6501b00f:	je     0x6501b0c9
    6501b015:	test   r13,0xffffffffffff0000
    6501b01c:	jne    0x6501b04c
    6501b01e:	movzx  ebx,r13w
    6501b022:	xor    edx,edx
    6501b024:	mov    ecx,ebx
    6501b026:	call   0x650026f0
    6501b02b:	test   rax,rax
    6501b02e:	je     0x6501b11a
    6501b034:	mov    r8d,ebx
    6501b037:	mov    rdx,rax
    6501b03a:	lea    rcx,[rbp+0x20]
    6501b03e:	call   0x65003e00
    6501b043:	mov    rdi,QWORD PTR [rbp+0x20]
    6501b047:	jmp    0x6501b11a
    6501b04c:	call   QWORD PTR [rip+0x27046]        # 0x65042098
    6501b052:	mov    DWORD PTR [rsp+0x28],r15d
    6501b057:	mov    QWORD PTR [rsp+0x20],r15
    6501b05c:	mov    r9d,r12d
    6501b05f:	mov    r8,r13
    6501b062:	xor    edx,edx
    6501b064:	mov    ecx,eax
    6501b066:	call   QWORD PTR [rip+0x18fcc]        # 0x65034038
    6501b06c:	lea    ebx,[rax-0x1]
    6501b06f:	test   ebx,ebx
    6501b071:	jle    0x6501b0c9
    6501b073:	mov    edx,0x1
    6501b078:	sub    edx,DWORD PTR [rdi-0x8]
    6501b07b:	mov    ecx,DWORD PTR [rdi-0xc]
    6501b07e:	sub    ecx,ebx
    6501b080:	or     ecx,edx
    6501b082:	jge    0x6501b093
    6501b084:	mov    edx,ebx
    6501b086:	lea    rcx,[rbp+0x20]
    6501b08a:	call   0x65002640
    6501b08f:	mov    rdi,QWORD PTR [rbp+0x20]
    6501b093:	call   QWORD PTR [rip+0x26fff]        # 0x65042098
    6501b099:	mov    ecx,eax
    6501b09b:	mov    DWORD PTR [rsp+0x28],ebx
    6501b09f:	mov    QWORD PTR [rsp+0x20],rdi
    6501b0a4:	mov    r9d,r12d
    6501b0a7:	mov    r8,r13
    6501b0aa:	xor    edx,edx
    6501b0ac:	call   QWORD PTR [rip+0x18f86]        # 0x65034038
    6501b0b2:	cmp    ebx,DWORD PTR [rdi-0xc]
    6501b0b5:	jg     0x6501b23f
    6501b0bb:	mov    DWORD PTR [rdi-0x10],ebx
    6501b0be:	movsxd rax,ebx
    6501b0c1:	mov    WORD PTR [rdi+rax*2],0x0
    6501b0c7:	jmp    0x6501b11a
    6501b0c9:	lea    rdx,[rdi-0x18]
    6501b0cd:	mov    rbx,QWORD PTR [rdx]
    6501b0d0:	cmp    DWORD PTR [rdx+0x8],0x0
    6501b0d4:	je     0x6501b11a
    6501b0d6:	cmp    DWORD PTR [rdx+0x10],0x0
    6501b0da:	jge    0x6501b0f1
    6501b0dc:	cmp    DWORD PTR [rdi-0xc],0x0
    6501b0e0:	jl     0x6501b24a
    6501b0e6:	mov    DWORD PTR [rdi-0x10],r15d
    6501b0ea:	mov    WORD PTR [rdi],0x0
    6501b0ef:	jmp    0x6501b11a
    6501b0f1:	mov    eax,r12d
    6501b0f4:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b0f9:	add    eax,0xffffffff
    6501b0fc:	test   eax,eax
    6501b0fe:	jg     0x6501b109
    6501b100:	mov    rcx,QWORD PTR [rdx]
    6501b103:	mov    rax,QWORD PTR [rcx]
    6501b106:	call   QWORD PTR [rax+0x8]
    6501b109:	mov    rax,QWORD PTR [rbx]
    6501b10c:	mov    rcx,rbx
    6501b10f:	call   QWORD PTR [rax+0x18]
    6501b112:	lea    rdi,[rax+0x18]
    6501b116:	mov    QWORD PTR [rbp+0x20],rdi
    6501b11a:	mov    edx,DWORD PTR [rdi-0x10]
    6501b11d:	mov    DWORD PTR [rbp+0x0],edx
    6501b120:	mov    r15,rdi
    6501b123:	mov    rax,QWORD PTR [rsi]
    6501b126:	mov    r13,rdi
    6501b129:	sub    r13,rax
    6501b12c:	sar    r13,1
    6501b12f:	mov    ecx,DWORD PTR [rax-0x10]
    6501b132:	mov    DWORD PTR [rbp+0x4],ecx
    6501b135:	lea    ebx,[rcx+rdx*1]
    6501b138:	mov    ecx,0x1
    6501b13d:	sub    ecx,DWORD PTR [rax-0x8]
    6501b140:	mov    eax,DWORD PTR [rax-0xc]
    6501b143:	sub    eax,ebx
    6501b145:	or     eax,ecx
    6501b147:	jge    0x6501b156
    6501b149:	mov    edx,ebx
    6501b14b:	mov    rcx,rsi
    6501b14e:	call   0x65002640
    6501b153:	mov    edx,DWORD PTR [rbp+0x0]
    6501b156:	mov    rax,QWORD PTR [rsi]
    6501b159:	mov    ecx,DWORD PTR [rbp+0x4]
    6501b15c:	cmp    r13,rcx
    6501b15f:	ja     0x6501b165
    6501b161:	lea    r15,[rax+r13*2]
    6501b165:	movsxd rdx,edx
    6501b168:	add    rdx,rdx
    6501b16b:	lea    rcx,[rax+rcx*2]
    6501b16f:	mov    r9,rdx
    6501b172:	mov    r8,r15
    6501b175:	call   0x6501d640
    6501b17a:	test   ebx,ebx
    6501b17c:	js     0x6501b255
    6501b182:	mov    rax,QWORD PTR [rsi]
    6501b185:	cmp    ebx,DWORD PTR [rax-0xc]
    6501b188:	jg     0x6501b255
    6501b18e:	mov    DWORD PTR [rax-0x10],ebx
    6501b191:	movsxd rcx,ebx
    6501b194:	mov    rax,QWORD PTR [rsi]
    6501b197:	mov    WORD PTR [rax+rcx*2],0x0
    6501b19d:	lea    rdx,[rdi-0x18]
    6501b1a1:	mov    eax,r12d
    6501b1a4:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b1a9:	add    eax,0xffffffff
    6501b1ac:	test   eax,eax
    6501b1ae:	jg     0x6501b1b9
    6501b1b0:	mov    rcx,QWORD PTR [rdx]
    6501b1b3:	mov    rax,QWORD PTR [rcx]
    6501b1b6:	call   QWORD PTR [rax+0x8]
    6501b1b9:	mov    rdi,QWORD PTR [rbp+0x88]
    6501b1c0:	test   rdi,rdi
    6501b1c3:	je     0x6501b1f5
    6501b1c5:	mov    rcx,QWORD PTR [rbp+0x90]
    6501b1cc:	sub    rcx,rdi
    6501b1cf:	movabs rax,0x6666666666666667
    6501b1d9:	imul   rcx
    6501b1dc:	sar    rdx,0x4
    6501b1e0:	mov    rax,rdx
    6501b1e3:	shr    rax,0x3f
    6501b1e7:	add    rdx,rax
    6501b1ea:	mov    rbx,QWORD PTR [rbp+0x60]
    6501b1ee:	cmp    rbx,rdx
    6501b1f1:	jb     0x6501b205
    6501b1f3:	jmp    0x6501b1f9
    6501b1f5:	mov    rbx,QWORD PTR [rbp+0x60]
    6501b1f9:	call   0x6501d960
    6501b1fe:	mov    rdi,QWORD PTR [rbp+0x88]
    6501b205:	cmp    QWORD PTR [r14+rdi*1+0x20],0x10
    6501b20b:	jb     0x6501b214
    6501b20d:	mov    rdx,QWORD PTR [r14+rdi*1+0x8]
    6501b212:	jmp    0x6501b219
    6501b214:	lea    rdx,[r14+rdi*1+0x8]
    6501b219:	mov    rcx,rsi
    6501b21c:	call   0x65003ab0
    6501b221:	add    rbx,0x1
    6501b225:	mov    QWORD PTR [rbp+0x60],rbx
    6501b229:	add    r14,0x28
    6501b22d:	xor    r15d,r15d
    6501b230:	movabs rdx,0x6666666666666667
    6501b23a:	jmp    0x6501afa0
    6501b23f:	mov    ecx,0x80070057
    6501b244:	call   0x65001050
    6501b249:	int3   
    6501b24a:	mov    ecx,0x80070057
    6501b24f:	call   0x65001050
    6501b254:	nop
    6501b255:	mov    ecx,0x80070057
    6501b25a:	call   0x65001050
    6501b25f:	nop
    6501b260:	call   QWORD PTR [rip+0x26e32]        # 0x65042098
    6501b266:	mov    r15d,eax
    6501b269:	mov    DWORD PTR [rbp+0x0],eax
    6501b26c:	xor    edx,edx
    6501b26e:	mov    r8d,0x110
    6501b274:	lea    rcx,[rbp+0x194]
    6501b27b:	call   0x6501ee30
    6501b280:	mov    DWORD PTR [rbp+0x190],0x114
    6501b28a:	lea    rcx,[rip+0x26e0f]        # 0x650420a0
    6501b291:	mov    rdx,QWORD PTR [rip+0x26e08]        # 0x650420a0
    6501b298:	call   QWORD PTR [rdx+0x18]
    6501b29b:	lea    rbx,[rax+0x18]
    6501b29f:	mov    QWORD PTR [rbp+0x8],rbx
    6501b2a3:	lea    rcx,[rbp+0x190]
    6501b2aa:	call   QWORD PTR [rip+0x18e10]        # 0x650340c0
    6501b2b0:	test   eax,eax
    6501b2b2:	je     0x6501b2f2
    6501b2b4:	lea    r8,[rip+0x1988d]        # 0x65034b48
    6501b2bb:	mov    edx,0x12
    6501b2c0:	lea    rcx,[rip+0x19859]        # 0x65034b20
    6501b2c7:	call   0x6500c5e0
    6501b2cc:	mov    rdx,rax
    6501b2cf:	mov    r9d,DWORD PTR [rbp+0x198]
    6501b2d6:	mov    r8d,DWORD PTR [rbp+0x194]
    6501b2dd:	lea    rcx,[rbp+0x8]
    6501b2e1:	call   0x65002560
    6501b2e6:	mov    rbx,QWORD PTR [rbp+0x8]
    6501b2ea:	xor    r13d,r13d
    6501b2ed:	jmp    0x6501b405
    6501b2f2:	xor    eax,eax
    6501b2f4:	mov    rcx,r12
    6501b2f7:	lea    rdi,[rip+0x19802]        # 0x65034b00
    6501b2fe:	repnz scas ax,WORD PTR es:[rdi]
    6501b301:	not    rcx
    6501b304:	sub    rcx,0x1
    6501b308:	mov    rdi,rcx
    6501b30b:	test   ecx,ecx
    6501b30d:	jne    0x6501b374
    6501b30f:	lea    rdx,[rbx-0x18]
    6501b313:	mov    rdi,QWORD PTR [rdx]
    6501b316:	cmp    DWORD PTR [rdx+0x8],eax
    6501b319:	je     0x6501b402
    6501b31f:	cmp    DWORD PTR [rdx+0x10],eax
    6501b322:	jge    0x6501b343
    6501b324:	cmp    DWORD PTR [rbx-0xc],eax
    6501b327:	jge    0x6501b334
    6501b329:	mov    ecx,0x80070057
    6501b32e:	call   0x65001050
    6501b333:	int3   
    6501b334:	xor    r13d,r13d
    6501b337:	mov    DWORD PTR [rbx-0x10],r13d
    6501b33b:	mov    WORD PTR [rbx],ax
    6501b33e:	jmp    0x6501b405
    6501b343:	mov    eax,r12d
    6501b346:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b34b:	add    eax,0xffffffff
    6501b34e:	test   eax,eax
    6501b350:	jg     0x6501b35b
    6501b352:	mov    rcx,QWORD PTR [rdx]
    6501b355:	mov    rax,QWORD PTR [rcx]
    6501b358:	call   QWORD PTR [rax+0x8]
    6501b35b:	mov    rax,QWORD PTR [rdi]
    6501b35e:	mov    rcx,rdi
    6501b361:	call   QWORD PTR [rax+0x18]
    6501b364:	lea    rbx,[rax+0x18]
    6501b368:	mov    QWORD PTR [rbp+0x8],rbx
    6501b36c:	xor    r13d,r13d
    6501b36f:	jmp    0x6501b405
    6501b374:	mov    r13d,DWORD PTR [rbx-0x10]
    6501b378:	lea    r14,[rip+0x19781]        # 0x65034b00
    6501b37f:	sub    r14,rbx
    6501b382:	sar    r14,1
    6501b385:	mov    ecx,0x1
    6501b38a:	sub    ecx,DWORD PTR [rbx-0x8]
    6501b38d:	mov    eax,DWORD PTR [rbx-0xc]
    6501b390:	sub    eax,edi
    6501b392:	or     eax,ecx
    6501b394:	jge    0x6501b3a5
    6501b396:	mov    edx,edi
    6501b398:	lea    rcx,[rbp+0x8]
    6501b39c:	call   0x65002640
    6501b3a1:	mov    rbx,QWORD PTR [rbp+0x8]
    6501b3a5:	cmp    r14,r13
    6501b3a8:	ja     0x6501b3c5
    6501b3aa:	movsxd rax,edi
    6501b3ad:	lea    r13,[rax+rax*1]
    6501b3b1:	lea    r8,[rbx+r14*2]
    6501b3b5:	mov    r9,r13
    6501b3b8:	mov    rdx,r13
    6501b3bb:	mov    rcx,rbx
    6501b3be:	call   0x6501d710
    6501b3c3:	jmp    0x6501b3e1
    6501b3c5:	movsxd rax,edi
    6501b3c8:	lea    r13,[rax+rax*1]
    6501b3cc:	mov    r9,r13
    6501b3cf:	lea    r8,[rip+0x1972a]        # 0x65034b00
    6501b3d6:	mov    rdx,r13
    6501b3d9:	mov    rcx,rbx
    6501b3dc:	call   0x6501d640
    6501b3e1:	test   edi,edi
    6501b3e3:	js     0x6501c06f
    6501b3e9:	cmp    edi,DWORD PTR [rbx-0xc]
    6501b3ec:	jg     0x6501c06f
    6501b3f2:	mov    DWORD PTR [rbx-0x10],edi
    6501b3f5:	mov    WORD PTR [r13+rbx*1+0x0],0x0
    6501b3fd:	xor    r13d,r13d
    6501b400:	jmp    0x6501b405
    6501b402:	xor    r13d,r13d
    6501b405:	mov    DWORD PTR [rbp+0x140],r13d
    6501b40c:	xor    edx,edx
    6501b40e:	lea    r8d,[rdx+0x2c]
    6501b412:	lea    rcx,[rbp+0x144]
    6501b419:	call   0x6501ee30
    6501b41e:	lea    rcx,[rbp+0x140]
    6501b425:	call   QWORD PTR [rip+0x18c8d]        # 0x650340b8
    6501b42b:	movzx  edx,WORD PTR [rbp+0x140]
    6501b432:	test   edx,edx
    6501b434:	je     0x6501b4fa
    6501b43a:	cmp    edx,0x9
    6501b43d:	jne    0x6501b5a9
    6501b443:	lea    r8,[rip+0x19686]        # 0x65034ad0
    6501b44a:	mov    edx,0x4
    6501b44f:	lea    rcx,[rip+0x1966a]        # 0x65034ac0
    6501b456:	call   0x6500c5e0
    6501b45b:	mov    r14,rax
    6501b45e:	test   rax,rax
    6501b461:	jne    0x6501b468
    6501b463:	mov    r15d,r13d
    6501b466:	jmp    0x6501b47a
    6501b468:	xor    eax,eax
    6501b46a:	mov    rcx,r12
    6501b46d:	mov    rdi,r14
    6501b470:	repnz scas ax,WORD PTR es:[rdi]
    6501b473:	not    rcx
    6501b476:	lea    r15,[rcx-0x1]
    6501b47a:	mov    r13,r14
    6501b47d:	sub    r13,rbx
    6501b480:	sar    r13,1
    6501b483:	mov    eax,DWORD PTR [rbx-0x10]
    6501b486:	mov    DWORD PTR [rbp+0x4],eax
    6501b489:	lea    edi,[rax+r15*1]
    6501b48d:	mov    edx,0x1
    6501b492:	sub    edx,DWORD PTR [rbx-0x8]
    6501b495:	mov    eax,DWORD PTR [rbx-0xc]
    6501b498:	sub    eax,edi
    6501b49a:	or     eax,edx
    6501b49c:	jge    0x6501b4ad
    6501b49e:	mov    edx,edi
    6501b4a0:	lea    rcx,[rbp+0x8]
    6501b4a4:	call   0x65002640
    6501b4a9:	mov    rbx,QWORD PTR [rbp+0x8]
    6501b4ad:	mov    eax,DWORD PTR [rbp+0x4]
    6501b4b0:	cmp    r13,rax
    6501b4b3:	ja     0x6501b4b9
    6501b4b5:	lea    r14,[rbx+r13*2]
    6501b4b9:	movsxd rdx,r15d
    6501b4bc:	add    rdx,rdx
    6501b4bf:	lea    rcx,[rbx+rax*2]
    6501b4c3:	mov    r9,rdx
    6501b4c6:	mov    r8,r14
    6501b4c9:	call   0x6501d640
    6501b4ce:	test   edi,edi
    6501b4d0:	js     0x6501b4ef
    6501b4d2:	cmp    edi,DWORD PTR [rbx-0xc]
    6501b4d5:	jg     0x6501b4ef
    6501b4d7:	mov    DWORD PTR [rbx-0x10],edi
    6501b4da:	movsxd rax,edi
    6501b4dd:	mov    WORD PTR [rbx+rax*2],0x0
    6501b4e3:	mov    r15d,DWORD PTR [rbp+0x0]
    6501b4e7:	xor    r13d,r13d
    6501b4ea:	jmp    0x6501b5a9
    6501b4ef:	mov    ecx,0x80070057
    6501b4f4:	call   0x65001050
    6501b4f9:	int3   
    6501b4fa:	lea    r8,[rip+0x1958f]        # 0x65034a90
    6501b501:	mov    edx,0x4
    6501b506:	lea    rcx,[rip+0x19573]        # 0x65034a80
    6501b50d:	call   0x6500c5e0
    6501b512:	mov    r14,rax
    6501b515:	test   rax,rax
    6501b518:	jne    0x6501b51f
    6501b51a:	mov    r15d,r13d
    6501b51d:	jmp    0x6501b531
    6501b51f:	xor    eax,eax
    6501b521:	mov    rcx,r12
    6501b524:	mov    rdi,r14
    6501b527:	repnz scas ax,WORD PTR es:[rdi]
    6501b52a:	not    rcx
    6501b52d:	lea    r15,[rcx-0x1]
    6501b531:	mov    r13,r14
    6501b534:	sub    r13,rbx
    6501b537:	sar    r13,1
    6501b53a:	mov    eax,DWORD PTR [rbx-0x10]
    6501b53d:	mov    DWORD PTR [rbp+0x4],eax
    6501b540:	lea    edi,[rax+r15*1]
    6501b544:	mov    edx,0x1
    6501b549:	sub    edx,DWORD PTR [rbx-0x8]
    6501b54c:	mov    eax,DWORD PTR [rbx-0xc]
    6501b54f:	sub    eax,edi
    6501b551:	or     eax,edx
    6501b553:	jge    0x6501b564
    6501b555:	mov    edx,edi
    6501b557:	lea    rcx,[rbp+0x8]
    6501b55b:	call   0x65002640
    6501b560:	mov    rbx,QWORD PTR [rbp+0x8]
    6501b564:	mov    eax,DWORD PTR [rbp+0x4]
    6501b567:	cmp    r13,rax
    6501b56a:	ja     0x6501b570
    6501b56c:	lea    r14,[rbx+r13*2]
    6501b570:	movsxd rdx,r15d
    6501b573:	add    rdx,rdx
    6501b576:	lea    rcx,[rbx+rax*2]
    6501b57a:	mov    r9,rdx
    6501b57d:	mov    r8,r14
    6501b580:	call   0x6501d640
    6501b585:	test   edi,edi
    6501b587:	js     0x6501c064
    6501b58d:	cmp    edi,DWORD PTR [rbx-0xc]
    6501b590:	jg     0x6501c064
    6501b596:	mov    DWORD PTR [rbx-0x10],edi
    6501b599:	movsxd rax,edi
    6501b59c:	mov    WORD PTR [rbx+rax*2],0x0
    6501b5a2:	mov    r15d,DWORD PTR [rbp+0x0]
    6501b5a6:	xor    r13d,r13d
    6501b5a9:	test   rbx,rbx
    6501b5ac:	jne    0x6501b5b6
    6501b5ae:	mov    rdi,r13
    6501b5b1:	jmp    0x6501b639
    6501b5b6:	mov    rcx,rbx
    6501b5b9:	call   QWORD PTR [rip+0x18ad1]        # 0x65034090
    6501b5bf:	lea    r9d,[rax+0x1]
    6501b5c3:	cmp    r9d,0x3fffffff
    6501b5ca:	jle    0x6501b5d1
    6501b5cc:	mov    rdi,r13
    6501b5cf:	jmp    0x6501b639
    6501b5d1:	movsxd rax,r9d
    6501b5d4:	add    rax,rax
    6501b5d7:	lea    rcx,[rax+0xf]
    6501b5db:	cmp    rcx,rax
    6501b5de:	ja     0x6501b5ea
    6501b5e0:	movabs rcx,0xffffffffffffff0
    6501b5ea:	and    rcx,0xfffffffffffffff0
    6501b5ee:	mov    rax,rcx
    6501b5f1:	call   0x650330c0
    6501b5f6:	sub    rsp,rcx
    6501b5f9:	lea    rdi,[rsp+0x40]
    6501b5fe:	test   rdi,rdi
    6501b601:	je     0x6501b636
    6501b603:	mov    BYTE PTR [rdi],0x0
    6501b606:	lea    eax,[r9+r9*1]
    6501b60a:	mov    QWORD PTR [rsp+0x38],r13
    6501b60f:	mov    QWORD PTR [rsp+0x30],r13
    6501b614:	mov    DWORD PTR [rsp+0x28],eax
    6501b618:	mov    QWORD PTR [rsp+0x20],rdi
    6501b61d:	mov    r9d,r12d
    6501b620:	mov    r8,rbx
    6501b623:	xor    edx,edx
    6501b625:	mov    ecx,r15d
    6501b628:	call   QWORD PTR [rip+0x18a12]        # 0x65034040
    6501b62e:	test   eax,eax
    6501b630:	cmove  rdi,r13
    6501b634:	jmp    0x6501b639
    6501b636:	mov    rdi,r13
    6501b639:	mov    rdx,rdi
    6501b63c:	mov    rcx,rsi
    6501b63f:	call   0x65003ab0
    6501b644:	nop
    6501b645:	lea    rdx,[rbx-0x18]
    6501b649:	mov    eax,r12d
    6501b64c:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b651:	add    eax,0xffffffff
    6501b654:	test   eax,eax
    6501b656:	jg     0x6501b661
    6501b658:	mov    rcx,QWORD PTR [rdx]
    6501b65b:	mov    rax,QWORD PTR [rcx]
    6501b65e:	call   QWORD PTR [rax+0x8]
    6501b661:	lea    rcx,[rbp+0x108]
    6501b668:	call   0x65014720
    6501b66d:	nop
    6501b66e:	mov    rdx,rax
    6501b671:	lea    rcx,[rbp+0xd8]
    6501b678:	call   0x65004a40
    6501b67d:	mov    r14,rax
    6501b680:	lea    r8,[rip+0x193c1]        # 0x65034a48
    6501b687:	mov    edx,0x7
    6501b68c:	lea    rcx,[rip+0x193ad]        # 0x65034a40
    6501b693:	call   0x6500bc30
    6501b698:	mov    r13,rax
    6501b69b:	lea    rcx,[rip+0x269fe]        # 0x650420a0
    6501b6a2:	mov    rdx,QWORD PTR [rip+0x269f7]        # 0x650420a0
    6501b6a9:	call   QWORD PTR [rdx+0x18]
    6501b6ac:	lea    rdi,[rax+0x18]
    6501b6b0:	mov    QWORD PTR [rbp+0x10],rdi
    6501b6b4:	test   r13,r13
    6501b6b7:	je     0x6501b776
    6501b6bd:	test   r13,0xffffffffffff0000
    6501b6c4:	jne    0x6501b6f0
    6501b6c6:	movzx  edi,r13w
    6501b6ca:	xor    edx,edx
    6501b6cc:	mov    ecx,edi
    6501b6ce:	call   0x650026f0
    6501b6d3:	test   rax,rax
    6501b6d6:	je     0x6501b7d1
    6501b6dc:	mov    r8d,edi
    6501b6df:	mov    rdx,rax
    6501b6e2:	lea    rcx,[rbp+0x10]
    6501b6e6:	call   0x65003e00
    6501b6eb:	jmp    0x6501b7d1
    6501b6f0:	call   QWORD PTR [rip+0x269a2]        # 0x65042098
    6501b6f6:	xor    r15d,r15d
    6501b6f9:	mov    DWORD PTR [rsp+0x28],r15d
    6501b6fe:	mov    QWORD PTR [rsp+0x20],r15
    6501b703:	mov    r9d,r12d
    6501b706:	mov    r8,r13
    6501b709:	xor    edx,edx
    6501b70b:	mov    ecx,eax
    6501b70d:	call   QWORD PTR [rip+0x18925]        # 0x65034038
    6501b713:	lea    ebx,[rax-0x1]
    6501b716:	test   ebx,ebx
    6501b718:	jle    0x6501b779
    6501b71a:	mov    edx,0x1
    6501b71f:	sub    edx,DWORD PTR [rdi-0x8]
    6501b722:	mov    ecx,DWORD PTR [rdi-0xc]
    6501b725:	sub    ecx,ebx
    6501b727:	or     ecx,edx
    6501b729:	jge    0x6501b73a
    6501b72b:	mov    edx,ebx
    6501b72d:	lea    rcx,[rbp+0x10]
    6501b731:	call   0x65002640
    6501b736:	mov    rdi,QWORD PTR [rbp+0x10]
    6501b73a:	call   QWORD PTR [rip+0x26958]        # 0x65042098
    6501b740:	mov    ecx,eax
    6501b742:	mov    DWORD PTR [rsp+0x28],ebx
    6501b746:	mov    QWORD PTR [rsp+0x20],rdi
    6501b74b:	mov    r9d,r12d
    6501b74e:	mov    r8,r13
    6501b751:	xor    edx,edx
    6501b753:	call   QWORD PTR [rip+0x188df]        # 0x65034038
    6501b759:	cmp    ebx,DWORD PTR [rdi-0xc]
    6501b75c:	jg     0x6501b76b
    6501b75e:	mov    DWORD PTR [rdi-0x10],ebx
    6501b761:	movsxd rax,ebx
    6501b764:	mov    WORD PTR [rdi+rax*2],r15w
    6501b769:	jmp    0x6501b7d1
    6501b76b:	mov    ecx,0x80070057
    6501b770:	call   0x65001050
    6501b775:	int3   
    6501b776:	xor    r15d,r15d
    6501b779:	lea    rdx,[rdi-0x18]
    6501b77d:	mov    rbx,QWORD PTR [rdx]
    6501b780:	cmp    DWORD PTR [rdx+0x8],0x0
    6501b784:	je     0x6501b7d1
    6501b786:	cmp    DWORD PTR [rdx+0x10],0x0
    6501b78a:	jge    0x6501b7a8
    6501b78c:	cmp    DWORD PTR [rdi-0xc],0x0
    6501b790:	jge    0x6501b79d
    6501b792:	mov    ecx,0x80070057
    6501b797:	call   0x65001050
    6501b79c:	int3   
    6501b79d:	mov    DWORD PTR [rdi-0x10],r15d
    6501b7a1:	mov    WORD PTR [rdi],0x0
    6501b7a6:	jmp    0x6501b7d1
    6501b7a8:	mov    eax,r12d
    6501b7ab:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b7b0:	add    eax,0xffffffff
    6501b7b3:	test   eax,eax
    6501b7b5:	jg     0x6501b7c0
    6501b7b7:	mov    rcx,QWORD PTR [rdx]
    6501b7ba:	mov    rax,QWORD PTR [rcx]
    6501b7bd:	call   QWORD PTR [rax+0x8]
    6501b7c0:	mov    rax,QWORD PTR [rbx]
    6501b7c3:	mov    rcx,rbx
    6501b7c6:	call   QWORD PTR [rax+0x18]
    6501b7c9:	add    rax,0x18
    6501b7cd:	mov    QWORD PTR [rbp+0x10],rax
    6501b7d1:	mov    r8,r14
    6501b7d4:	lea    rdx,[rbp+0x10]
    6501b7d8:	lea    rcx,[rbp+0xf8]
    6501b7df:	call   0x650185c0
    6501b7e4:	nop
    6501b7e5:	mov    r13,QWORD PTR [rax]
    6501b7e8:	movsxd r15,DWORD PTR [r13-0x10]
    6501b7ec:	mov    rax,QWORD PTR [rsi]
    6501b7ef:	mov    rbx,r13
    6501b7f2:	sub    rbx,rax
    6501b7f5:	sar    rbx,1
    6501b7f8:	mov    r14d,DWORD PTR [rax-0x10]
    6501b7fc:	lea    edi,[r14+r15*1]
    6501b800:	mov    ecx,0x1
    6501b805:	sub    ecx,DWORD PTR [rax-0x8]
    6501b808:	mov    eax,DWORD PTR [rax-0xc]
    6501b80b:	sub    eax,edi
    6501b80d:	or     eax,ecx
    6501b80f:	jge    0x6501b81b
    6501b811:	mov    edx,edi
    6501b813:	mov    rcx,rsi
    6501b816:	call   0x65002640
    6501b81b:	mov    rax,QWORD PTR [rsi]
    6501b81e:	cmp    rbx,r14
    6501b821:	ja     0x6501b827
    6501b823:	lea    r13,[rax+rbx*2]
    6501b827:	mov    rdx,r15
    6501b82a:	add    rdx,rdx
    6501b82d:	lea    rcx,[rax+r14*2]
    6501b831:	mov    r9,rdx
    6501b834:	mov    r8,r13
    6501b837:	call   0x6501d640
    6501b83c:	test   edi,edi
    6501b83e:	js     0x6501c059
    6501b844:	mov    rax,QWORD PTR [rsi]
    6501b847:	cmp    edi,DWORD PTR [rax-0xc]
    6501b84a:	jg     0x6501c059
    6501b850:	mov    DWORD PTR [rax-0x10],edi
    6501b853:	movsxd rcx,edi
    6501b856:	mov    rax,QWORD PTR [rsi]
    6501b859:	mov    WORD PTR [rax+rcx*2],0x0
    6501b85f:	mov    rdx,QWORD PTR [rbp+0xf8]
    6501b866:	add    rdx,0xffffffffffffffe8
    6501b86a:	mov    eax,r12d
    6501b86d:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b872:	add    eax,0xffffffff
    6501b875:	test   eax,eax
    6501b877:	jg     0x6501b883
    6501b879:	mov    rcx,QWORD PTR [rdx]
    6501b87c:	mov    rax,QWORD PTR [rcx]
    6501b87f:	call   QWORD PTR [rax+0x8]
    6501b882:	nop
    6501b883:	mov    rdx,QWORD PTR [rbp+0x10]
    6501b887:	add    rdx,0xffffffffffffffe8
    6501b88b:	mov    eax,r12d
    6501b88e:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b893:	add    eax,0xffffffff
    6501b896:	test   eax,eax
    6501b898:	jg     0x6501b8a4
    6501b89a:	mov    rcx,QWORD PTR [rdx]
    6501b89d:	mov    rax,QWORD PTR [rcx]
    6501b8a0:	call   QWORD PTR [rax+0x8]
    6501b8a3:	nop
    6501b8a4:	mov    rdx,QWORD PTR [rbp+0xd8]
    6501b8ab:	add    rdx,0xffffffffffffffe8
    6501b8af:	mov    eax,r12d
    6501b8b2:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b8b7:	add    eax,0xffffffff
    6501b8ba:	test   eax,eax
    6501b8bc:	jg     0x6501b8c8
    6501b8be:	mov    rcx,QWORD PTR [rdx]
    6501b8c1:	mov    rax,QWORD PTR [rcx]
    6501b8c4:	call   QWORD PTR [rax+0x8]
    6501b8c7:	nop
    6501b8c8:	mov    rdx,QWORD PTR [rbp+0x108]
    6501b8cf:	add    rdx,0xffffffffffffffe8
    6501b8d3:	mov    eax,r12d
    6501b8d6:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b8db:	add    eax,0xffffffff
    6501b8de:	test   eax,eax
    6501b8e0:	jg     0x6501b8eb
    6501b8e2:	mov    rcx,QWORD PTR [rdx]
    6501b8e5:	mov    rax,QWORD PTR [rcx]
    6501b8e8:	call   QWORD PTR [rax+0x8]
    6501b8eb:	call   QWORD PTR [rip+0x267a7]        # 0x65042098
    6501b8f1:	mov    r13d,eax
    6501b8f4:	lea    rcx,[rip+0x267a5]        # 0x650420a0
    6501b8fb:	mov    rax,QWORD PTR [rip+0x2679e]        # 0x650420a0
    6501b902:	call   QWORD PTR [rax+0x18]
    6501b905:	add    rax,0x18
    6501b909:	mov    QWORD PTR [rbp+0x28],rax
    6501b90d:	call   0x65005840
    6501b912:	mov    edi,eax
    6501b914:	lea    r8,[rip+0x190ed]        # 0x65034a08
    6501b91b:	mov    edx,0x4
    6501b920:	lea    rcx,[rip+0x190d1]        # 0x650349f8
    6501b927:	call   0x6500c5e0
    6501b92c:	mov    rdx,rax
    6501b92f:	mov    r8d,edi
    6501b932:	lea    rcx,[rbp+0x28]
    6501b936:	call   0x65002560
    6501b93b:	mov    rdi,QWORD PTR [rbp+0x28]
    6501b93f:	mov    r14d,0x1
    6501b945:	mov    ecx,r14d
    6501b948:	sub    ecx,DWORD PTR [rdi-0x8]
    6501b94b:	mov    eax,DWORD PTR [rdi-0xc]
    6501b94e:	add    eax,r14d
    6501b951:	or     eax,ecx
    6501b953:	jge    0x6501b965
    6501b955:	mov    edx,r12d
    6501b958:	lea    rcx,[rbp+0x28]
    6501b95c:	call   0x65002640
    6501b961:	mov    rdi,QWORD PTR [rbp+0x28]
    6501b965:	test   rdi,rdi
    6501b968:	jne    0x6501b975
    6501b96a:	xor    r15d,r15d
    6501b96d:	mov    rbx,r15
    6501b970:	jmp    0x6501ba01
    6501b975:	mov    rcx,rdi
    6501b978:	call   QWORD PTR [rip+0x18712]        # 0x65034090
    6501b97e:	lea    r9d,[rax+0x1]
    6501b982:	cmp    r9d,0x3fffffff
    6501b989:	jle    0x6501b993
    6501b98b:	xor    r15d,r15d
    6501b98e:	mov    rbx,r15
    6501b991:	jmp    0x6501ba01
    6501b993:	movsxd rax,r9d
    6501b996:	add    rax,rax
    6501b999:	lea    rcx,[rax+0xf]
    6501b99d:	cmp    rcx,rax
    6501b9a0:	ja     0x6501b9ac
    6501b9a2:	movabs rcx,0xffffffffffffff0
    6501b9ac:	and    rcx,0xfffffffffffffff0
    6501b9b0:	mov    rax,rcx
    6501b9b3:	call   0x650330c0
    6501b9b8:	sub    rsp,rcx
    6501b9bb:	lea    rbx,[rsp+0x40]
    6501b9c0:	test   rbx,rbx
    6501b9c3:	je     0x6501b9fb
    6501b9c5:	mov    BYTE PTR [rbx],0x0
    6501b9c8:	lea    eax,[r9+r9*1]
    6501b9cc:	xor    r15d,r15d
    6501b9cf:	mov    QWORD PTR [rsp+0x38],r15
    6501b9d4:	mov    QWORD PTR [rsp+0x30],r15
    6501b9d9:	mov    DWORD PTR [rsp+0x28],eax
    6501b9dd:	mov    QWORD PTR [rsp+0x20],rbx
    6501b9e2:	mov    r9d,r12d
    6501b9e5:	mov    r8,rdi
    6501b9e8:	xor    edx,edx
    6501b9ea:	mov    ecx,r13d
    6501b9ed:	call   QWORD PTR [rip+0x1864d]        # 0x65034040
    6501b9f3:	test   eax,eax
    6501b9f5:	cmove  rbx,r15
    6501b9f9:	jmp    0x6501ba01
    6501b9fb:	xor    r15d,r15d
    6501b9fe:	mov    rbx,r15
    6501ba01:	lea    rcx,[rip+0x26698]        # 0x650420a0
    6501ba08:	mov    rax,QWORD PTR [rip+0x26691]        # 0x650420a0
    6501ba0f:	call   QWORD PTR [rax+0x18]
    6501ba12:	lea    rdi,[rax+0x18]
    6501ba16:	mov    QWORD PTR [rbp+0x18],rdi
    6501ba1a:	test   rbx,rbx
    6501ba1d:	je     0x6501bade
    6501ba23:	test   rbx,0xffffffffffff0000
    6501ba2a:	jne    0x6501ba55
    6501ba2c:	movzx  edi,bx
    6501ba2f:	xor    edx,edx
    6501ba31:	mov    ecx,edi
    6501ba33:	call   0x650026f0
    6501ba38:	test   rax,rax
    6501ba3b:	je     0x6501bb36
    6501ba41:	mov    r8d,edi
    6501ba44:	mov    rdx,rax
    6501ba47:	lea    rcx,[rbp+0x18]
    6501ba4b:	call   0x65003e00
    6501ba50:	jmp    0x6501bb36
    6501ba55:	call   QWORD PTR [rip+0x2663d]        # 0x65042098
    6501ba5b:	mov    DWORD PTR [rsp+0x28],r15d
    6501ba60:	mov    QWORD PTR [rsp+0x20],r15
    6501ba65:	mov    r9d,r12d
    6501ba68:	mov    r8,rbx
    6501ba6b:	xor    edx,edx
    6501ba6d:	mov    ecx,eax
    6501ba6f:	call   QWORD PTR [rip+0x185c3]        # 0x65034038
    6501ba75:	lea    r13d,[rax-0x1]
    6501ba79:	test   r13d,r13d
    6501ba7c:	jle    0x6501bade
    6501ba7e:	mov    edx,r14d
    6501ba81:	sub    edx,DWORD PTR [rdi-0x8]
    6501ba84:	mov    ecx,DWORD PTR [rdi-0xc]
    6501ba87:	sub    ecx,r13d
    6501ba8a:	or     ecx,edx
    6501ba8c:	jge    0x6501ba9e
    6501ba8e:	mov    edx,r13d
    6501ba91:	lea    rcx,[rbp+0x18]
    6501ba95:	call   0x65002640
    6501ba9a:	mov    rdi,QWORD PTR [rbp+0x18]
    6501ba9e:	call   QWORD PTR [rip+0x265f4]        # 0x65042098
    6501baa4:	mov    ecx,eax
    6501baa6:	mov    DWORD PTR [rsp+0x28],r13d
    6501baab:	mov    QWORD PTR [rsp+0x20],rdi
    6501bab0:	mov    r9d,r12d
    6501bab3:	mov    r8,rbx
    6501bab6:	xor    edx,edx
    6501bab8:	call   QWORD PTR [rip+0x1857a]        # 0x65034038
    6501babe:	cmp    r13d,DWORD PTR [rdi-0xc]
    6501bac2:	jg     0x6501bad3
    6501bac4:	mov    DWORD PTR [rdi-0x10],r13d
    6501bac8:	movsxd rax,r13d
    6501bacb:	mov    WORD PTR [rdi+rax*2],0x0
    6501bad1:	jmp    0x6501bb36
    6501bad3:	mov    ecx,0x80070057
    6501bad8:	call   0x65001050
    6501badd:	int3   
    6501bade:	lea    rdx,[rdi-0x18]
    6501bae2:	mov    rbx,QWORD PTR [rdx]
    6501bae5:	cmp    DWORD PTR [rdx+0x8],0x0
    6501bae9:	je     0x6501bb36
    6501baeb:	cmp    DWORD PTR [rdx+0x10],0x0
    6501baef:	jge    0x6501bb0d
    6501baf1:	cmp    DWORD PTR [rdi-0xc],0x0
    6501baf5:	jge    0x6501bb02
    6501baf7:	mov    ecx,0x80070057
    6501bafc:	call   0x65001050
    6501bb01:	int3   
    6501bb02:	mov    DWORD PTR [rdi-0x10],r15d
    6501bb06:	mov    WORD PTR [rdi],0x0
    6501bb0b:	jmp    0x6501bb36
    6501bb0d:	mov    eax,r12d
    6501bb10:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bb15:	add    eax,0xffffffff
    6501bb18:	test   eax,eax
    6501bb1a:	jg     0x6501bb25
    6501bb1c:	mov    rcx,QWORD PTR [rdx]
    6501bb1f:	mov    rax,QWORD PTR [rcx]
    6501bb22:	call   QWORD PTR [rax+0x8]
    6501bb25:	mov    rax,QWORD PTR [rbx]
    6501bb28:	mov    rcx,rbx
    6501bb2b:	call   QWORD PTR [rax+0x18]
    6501bb2e:	add    rax,0x18
    6501bb32:	mov    QWORD PTR [rbp+0x18],rax
    6501bb36:	lea    r8,[rip+0x18e8b]        # 0x650349c8
    6501bb3d:	mov    edx,0x5
    6501bb42:	lea    rcx,[rip+0x18e73]        # 0x650349bc
    6501bb49:	call   0x6500bc30
    6501bb4e:	mov    rdi,rax
    6501bb51:	lea    rcx,[rip+0x26548]        # 0x650420a0
    6501bb58:	mov    rdx,QWORD PTR [rip+0x26541]        # 0x650420a0
    6501bb5f:	call   QWORD PTR [rdx+0x18]
    6501bb62:	add    rax,0x18
    6501bb66:	mov    QWORD PTR [rbp+0x58],rax
    6501bb6a:	test   rdi,rdi
    6501bb6d:	je     0x6501bb9a
    6501bb6f:	test   rdi,0xffffffffffff0000
    6501bb76:	jne    0x6501bb9a
    6501bb78:	movzx  edi,di
    6501bb7b:	xor    edx,edx
    6501bb7d:	mov    ecx,edi
    6501bb7f:	call   0x650026f0
    6501bb84:	test   rax,rax
    6501bb87:	je     0x6501bba7
    6501bb89:	mov    r8d,edi
    6501bb8c:	mov    rdx,rax
    6501bb8f:	lea    rcx,[rbp+0x58]
    6501bb93:	call   0x65003e00
    6501bb98:	jmp    0x6501bba7
    6501bb9a:	mov    rdx,rdi
    6501bb9d:	lea    rcx,[rbp+0x58]
    6501bba1:	call   0x65003cc0
    6501bba6:	nop
    6501bba7:	lea    r8,[rbp+0x18]
    6501bbab:	lea    rdx,[rbp+0x58]
    6501bbaf:	lea    rcx,[rbp+0x118]
    6501bbb6:	call   0x650185c0
    6501bbbb:	nop
    6501bbbc:	mov    r13,QWORD PTR [rax]
    6501bbbf:	movsxd r15,DWORD PTR [r13-0x10]
    6501bbc3:	mov    rax,QWORD PTR [rsi]
    6501bbc6:	mov    rbx,r13
    6501bbc9:	sub    rbx,rax
    6501bbcc:	sar    rbx,1
    6501bbcf:	mov    r14d,DWORD PTR [rax-0x10]
    6501bbd3:	lea    edi,[r14+r15*1]
    6501bbd7:	mov    ecx,0x1
    6501bbdc:	sub    ecx,DWORD PTR [rax-0x8]
    6501bbdf:	mov    eax,DWORD PTR [rax-0xc]
    6501bbe2:	sub    eax,edi
    6501bbe4:	or     eax,ecx
    6501bbe6:	jge    0x6501bbf2
    6501bbe8:	mov    edx,edi
    6501bbea:	mov    rcx,rsi
    6501bbed:	call   0x65002640
    6501bbf2:	mov    rax,QWORD PTR [rsi]
    6501bbf5:	cmp    rbx,r14
    6501bbf8:	ja     0x6501bbfe
    6501bbfa:	lea    r13,[rax+rbx*2]
    6501bbfe:	mov    rdx,r15
    6501bc01:	add    rdx,rdx
    6501bc04:	lea    rcx,[rax+r14*2]
    6501bc08:	mov    r9,rdx
    6501bc0b:	mov    r8,r13
    6501bc0e:	call   0x6501d640
    6501bc13:	test   edi,edi
    6501bc15:	js     0x6501c04e
    6501bc1b:	mov    rax,QWORD PTR [rsi]
    6501bc1e:	cmp    edi,DWORD PTR [rax-0xc]
    6501bc21:	jg     0x6501c04e
    6501bc27:	mov    DWORD PTR [rax-0x10],edi
    6501bc2a:	movsxd rcx,edi
    6501bc2d:	mov    rax,QWORD PTR [rsi]
    6501bc30:	mov    WORD PTR [rax+rcx*2],0x0
    6501bc36:	mov    rdx,QWORD PTR [rbp+0x118]
    6501bc3d:	add    rdx,0xffffffffffffffe8
    6501bc41:	mov    eax,r12d
    6501bc44:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bc49:	add    eax,0xffffffff
    6501bc4c:	test   eax,eax
    6501bc4e:	jg     0x6501bc5a
    6501bc50:	mov    rcx,QWORD PTR [rdx]
    6501bc53:	mov    rax,QWORD PTR [rcx]
    6501bc56:	call   QWORD PTR [rax+0x8]
    6501bc59:	nop
    6501bc5a:	mov    rdx,QWORD PTR [rbp+0x58]
    6501bc5e:	add    rdx,0xffffffffffffffe8
    6501bc62:	mov    eax,r12d
    6501bc65:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bc6a:	add    eax,0xffffffff
    6501bc6d:	test   eax,eax
    6501bc6f:	jg     0x6501bc7b
    6501bc71:	mov    rcx,QWORD PTR [rdx]
    6501bc74:	mov    rax,QWORD PTR [rcx]
    6501bc77:	call   QWORD PTR [rax+0x8]
    6501bc7a:	nop
    6501bc7b:	mov    rdx,QWORD PTR [rbp+0x18]
    6501bc7f:	add    rdx,0xffffffffffffffe8
    6501bc83:	mov    eax,r12d
    6501bc86:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bc8b:	add    eax,0xffffffff
    6501bc8e:	test   eax,eax
    6501bc90:	jg     0x6501bc9c
    6501bc92:	mov    rcx,QWORD PTR [rdx]
    6501bc95:	mov    rax,QWORD PTR [rcx]
    6501bc98:	call   QWORD PTR [rax+0x8]
    6501bc9b:	nop
    6501bc9c:	mov    rdx,QWORD PTR [rbp+0x28]
    6501bca0:	add    rdx,0xffffffffffffffe8
    6501bca4:	mov    eax,r12d
    6501bca7:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bcac:	add    eax,0xffffffff
    6501bcaf:	test   eax,eax
    6501bcb1:	jg     0x6501bcbc
    6501bcb3:	mov    rcx,QWORD PTR [rdx]
    6501bcb6:	mov    rax,QWORD PTR [rcx]
    6501bcb9:	call   QWORD PTR [rax+0x8]
    6501bcbc:	lea    rcx,[rbp+0x170]
    6501bcc3:	call   0x65005cb0
    6501bcc8:	mov    rcx,rax
    6501bccb:	lea    rdx,[rbp+0x128]
    6501bcd2:	mov    eax,DWORD PTR [rax]
    6501bcd4:	mov    DWORD PTR [rdx],eax
    6501bcd6:	mov    eax,DWORD PTR [rcx+0x4]
    6501bcd9:	mov    DWORD PTR [rdx+0x4],eax
    6501bcdc:	mov    eax,DWORD PTR [rcx+0x8]
    6501bcdf:	mov    DWORD PTR [rdx+0x8],eax
    6501bce2:	mov    eax,DWORD PTR [rcx+0xc]
    6501bce5:	mov    DWORD PTR [rdx+0xc],eax
    6501bce8:	lea    r8,[rip+0x18ca1]        # 0x65034990
    6501bcef:	mov    edx,0x5
    6501bcf4:	lea    rcx,[rip+0x18c8d]        # 0x65034988
    6501bcfb:	call   0x6500bc30
    6501bd00:	mov    rdi,rax
    6501bd03:	lea    rcx,[rip+0x26396]        # 0x650420a0
    6501bd0a:	mov    rdx,QWORD PTR [rip+0x2638f]        # 0x650420a0
    6501bd11:	call   QWORD PTR [rdx+0x18]
    6501bd14:	add    rax,0x18
    6501bd18:	mov    QWORD PTR [rbp+0x38],rax
    6501bd1c:	test   rdi,rdi
    6501bd1f:	je     0x6501bd4c
    6501bd21:	test   rdi,0xffffffffffff0000
    6501bd28:	jne    0x6501bd4c
    6501bd2a:	movzx  edi,di
    6501bd2d:	xor    edx,edx
    6501bd2f:	mov    ecx,edi
    6501bd31:	call   0x650026f0
    6501bd36:	test   rax,rax
    6501bd39:	je     0x6501bd59
    6501bd3b:	mov    r8d,edi
    6501bd3e:	mov    rdx,rax
    6501bd41:	lea    rcx,[rbp+0x38]
    6501bd45:	call   0x65003e00
    6501bd4a:	jmp    0x6501bd59
    6501bd4c:	mov    rdx,rdi
    6501bd4f:	lea    rcx,[rbp+0x38]
    6501bd53:	call   0x65003cc0
    6501bd58:	nop
    6501bd59:	lea    rdx,[rbp+0x128]
    6501bd60:	lea    rcx,[rbp+0x110]
    6501bd67:	call   0x650044b0
    6501bd6c:	nop
    6501bd6d:	mov    r8,rax
    6501bd70:	lea    rdx,[rbp+0x38]
    6501bd74:	lea    rcx,[rbp+0xf0]
    6501bd7b:	call   0x650185c0
    6501bd80:	nop
    6501bd81:	mov    r13,QWORD PTR [rax]
    6501bd84:	movsxd r15,DWORD PTR [r13-0x10]
    6501bd88:	mov    rax,QWORD PTR [rsi]
    6501bd8b:	mov    rbx,r13
    6501bd8e:	sub    rbx,rax
    6501bd91:	sar    rbx,1
    6501bd94:	mov    r14d,DWORD PTR [rax-0x10]
    6501bd98:	lea    edi,[r14+r15*1]
    6501bd9c:	mov    ecx,0x1
    6501bda1:	sub    ecx,DWORD PTR [rax-0x8]
    6501bda4:	mov    eax,DWORD PTR [rax-0xc]
    6501bda7:	sub    eax,edi
    6501bda9:	or     eax,ecx
    6501bdab:	jge    0x6501bdb7
    6501bdad:	mov    edx,edi
    6501bdaf:	mov    rcx,rsi
    6501bdb2:	call   0x65002640
    6501bdb7:	mov    rax,QWORD PTR [rsi]
    6501bdba:	cmp    rbx,r14
    6501bdbd:	ja     0x6501bdc3
    6501bdbf:	lea    r13,[rax+rbx*2]
    6501bdc3:	mov    rdx,r15
    6501bdc6:	add    rdx,rdx
    6501bdc9:	lea    rcx,[rax+r14*2]
    6501bdcd:	mov    r9,rdx
    6501bdd0:	mov    r8,r13
    6501bdd3:	call   0x6501d640
    6501bdd8:	test   edi,edi
    6501bdda:	js     0x6501c043
    6501bde0:	mov    rax,QWORD PTR [rsi]
    6501bde3:	cmp    edi,DWORD PTR [rax-0xc]
    6501bde6:	jg     0x6501c043
    6501bdec:	mov    DWORD PTR [rax-0x10],edi
    6501bdef:	movsxd rcx,edi
    6501bdf2:	mov    rax,QWORD PTR [rsi]
    6501bdf5:	mov    WORD PTR [rax+rcx*2],0x0
    6501bdfb:	mov    rdx,QWORD PTR [rbp+0xf0]
    6501be02:	add    rdx,0xffffffffffffffe8
    6501be06:	mov    eax,r12d
    6501be09:	lock xadd DWORD PTR [rdx+0x10],eax
    6501be0e:	add    eax,0xffffffff
    6501be11:	test   eax,eax
    6501be13:	jg     0x6501be1f
    6501be15:	mov    rcx,QWORD PTR [rdx]
    6501be18:	mov    rax,QWORD PTR [rcx]
    6501be1b:	call   QWORD PTR [rax+0x8]
    6501be1e:	nop
    6501be1f:	mov    rdx,QWORD PTR [rbp+0x110]
    6501be26:	add    rdx,0xffffffffffffffe8
    6501be2a:	mov    eax,r12d
    6501be2d:	lock xadd DWORD PTR [rdx+0x10],eax
    6501be32:	add    eax,0xffffffff
    6501be35:	test   eax,eax
    6501be37:	jg     0x6501be43
    6501be39:	mov    rcx,QWORD PTR [rdx]
    6501be3c:	mov    rax,QWORD PTR [rcx]
    6501be3f:	call   QWORD PTR [rax+0x8]
    6501be42:	nop
    6501be43:	mov    rdx,QWORD PTR [rbp+0x38]
    6501be47:	add    rdx,0xffffffffffffffe8
    6501be4b:	mov    eax,r12d
    6501be4e:	lock xadd DWORD PTR [rdx+0x10],eax
    6501be53:	add    eax,0xffffffff
    6501be56:	test   eax,eax
    6501be58:	jg     0x6501be63
    6501be5a:	mov    rcx,QWORD PTR [rdx]
    6501be5d:	mov    rax,QWORD PTR [rcx]
    6501be60:	call   QWORD PTR [rax+0x8]
    6501be63:	mov    dl,0x1
    6501be65:	lea    rcx,[rbp+0xe0]
    6501be6c:	call   0x6500af90
    6501be71:	nop
    6501be72:	mov    r13,QWORD PTR [rax]
    6501be75:	movsxd r15,DWORD PTR [r13-0x10]
    6501be79:	mov    rax,QWORD PTR [rsi]
    6501be7c:	mov    rbx,r13
    6501be7f:	sub    rbx,rax
    6501be82:	sar    rbx,1
    6501be85:	mov    r14d,DWORD PTR [rax-0x10]
    6501be89:	lea    edi,[r14+r15*1]
    6501be8d:	mov    ecx,0x1
    6501be92:	sub    ecx,DWORD PTR [rax-0x8]
    6501be95:	mov    eax,DWORD PTR [rax-0xc]
    6501be98:	sub    eax,edi
    6501be9a:	or     eax,ecx
    6501be9c:	jge    0x6501bea8
    6501be9e:	mov    edx,edi
    6501bea0:	mov    rcx,rsi
    6501bea3:	call   0x65002640
    6501bea8:	mov    rax,QWORD PTR [rsi]
    6501beab:	cmp    rbx,r14
    6501beae:	ja     0x6501beb4
    6501beb0:	lea    r13,[rax+rbx*2]
    6501beb4:	mov    rdx,r15
    6501beb7:	add    rdx,rdx
    6501beba:	lea    rcx,[rax+r14*2]
    6501bebe:	mov    r9,rdx
    6501bec1:	mov    r8,r13
    6501bec4:	call   0x6501d640
    6501bec9:	test   edi,edi
    6501becb:	js     0x6501c038
    6501bed1:	mov    rax,QWORD PTR [rsi]
    6501bed4:	cmp    edi,DWORD PTR [rax-0xc]
    6501bed7:	jg     0x6501c038
    6501bedd:	mov    DWORD PTR [rax-0x10],edi
    6501bee0:	movsxd rcx,edi
    6501bee3:	mov    rax,QWORD PTR [rsi]
    6501bee6:	mov    WORD PTR [rax+rcx*2],0x0
    6501beec:	mov    rdx,QWORD PTR [rbp+0xe0]
    6501bef3:	add    rdx,0xffffffffffffffe8
    6501bef7:	mov    eax,r12d
    6501befa:	lock xadd DWORD PTR [rdx+0x10],eax
    6501beff:	add    eax,0xffffffff
    6501bf02:	test   eax,eax
    6501bf04:	jg     0x6501bf10
    6501bf06:	mov    rcx,QWORD PTR [rdx]
    6501bf09:	mov    rax,QWORD PTR [rcx]
    6501bf0c:	call   QWORD PTR [rax+0x8]
    6501bf0f:	nop
    6501bf10:	mov    rcx,QWORD PTR [rbp+0x88]
    6501bf17:	test   rcx,rcx
    6501bf1a:	je     0x6501bf6e
    6501bf1c:	mov    rbx,QWORD PTR [rbp+0x90]
    6501bf23:	cmp    rcx,rbx
    6501bf26:	je     0x6501bf64
    6501bf28:	lea    rdi,[rcx+0x20]
    6501bf2c:	xor    r15d,r15d
    6501bf2f:	nop
    6501bf30:	cmp    QWORD PTR [rdi],0x10
    6501bf34:	jb     0x6501bf3f
    6501bf36:	mov    rcx,QWORD PTR [rdi-0x18]
    6501bf3a:	call   0x6501d190
    6501bf3f:	mov    QWORD PTR [rdi],0xf
    6501bf46:	mov    QWORD PTR [rdi-0x8],r15
    6501bf4a:	mov    BYTE PTR [rdi-0x18],r15b
    6501bf4e:	add    rdi,0x28
    6501bf52:	lea    rax,[rdi-0x20]
    6501bf56:	cmp    rax,rbx
    6501bf59:	jne    0x6501bf30
    6501bf5b:	mov    rcx,QWORD PTR [rbp+0x88]
    6501bf62:	jmp    0x6501bf67
    6501bf64:	xor    r15d,r15d
    6501bf67:	call   0x6501d190
    6501bf6c:	jmp    0x6501bf71
    6501bf6e:	xor    r15d,r15d
    6501bf71:	mov    QWORD PTR [rbp+0x88],r15
    6501bf78:	mov    QWORD PTR [rbp+0x90],r15
    6501bf7f:	mov    QWORD PTR [rbp+0x98],r15
    6501bf86:	mov    rdx,QWORD PTR [rbp+0x78]
    6501bf8a:	add    rdx,0xffffffffffffffe8
    6501bf8e:	mov    eax,r12d
    6501bf91:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bf96:	add    eax,0xffffffff
    6501bf99:	test   eax,eax
    6501bf9b:	jg     0x6501bfa7
    6501bf9d:	mov    rcx,QWORD PTR [rdx]
    6501bfa0:	mov    rax,QWORD PTR [rcx]
    6501bfa3:	call   QWORD PTR [rax+0x8]
    6501bfa6:	nop
    6501bfa7:	mov    rdx,QWORD PTR [rbp+0xb0]
    6501bfae:	add    rdx,0xffffffffffffffe8
    6501bfb2:	mov    eax,r12d
    6501bfb5:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bfba:	add    eax,0xffffffff
    6501bfbd:	test   eax,eax
    6501bfbf:	jg     0x6501bfcb
    6501bfc1:	mov    rcx,QWORD PTR [rdx]
    6501bfc4:	mov    rax,QWORD PTR [rcx]
    6501bfc7:	call   QWORD PTR [rax+0x8]
    6501bfca:	nop
    6501bfcb:	mov    rdx,QWORD PTR [rbp+0x68]
    6501bfcf:	add    rdx,0xffffffffffffffe8
    6501bfd3:	mov    eax,r12d
    6501bfd6:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bfdb:	add    eax,0xffffffff
    6501bfde:	test   eax,eax
    6501bfe0:	jg     0x6501bfec
    6501bfe2:	mov    rcx,QWORD PTR [rdx]
    6501bfe5:	mov    rax,QWORD PTR [rcx]
    6501bfe8:	call   QWORD PTR [rax+0x8]
    6501bfeb:	nop
    6501bfec:	mov    rdx,QWORD PTR [rbp+0xc0]
    6501bff3:	add    rdx,0xffffffffffffffe8
    6501bff7:	mov    eax,r12d
    6501bffa:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bfff:	add    eax,0xffffffff
    6501c002:	test   eax,eax
    6501c004:	jg     0x6501c010
    6501c006:	mov    rcx,QWORD PTR [rdx]
    6501c009:	mov    rax,QWORD PTR [rcx]
    6501c00c:	call   QWORD PTR [rax+0x8]
    6501c00f:	nop
    6501c010:	mov    rdx,QWORD PTR [rbp+0xd0]
    6501c017:	add    rdx,0xffffffffffffffe8
    6501c01b:	lock xadd DWORD PTR [rdx+0x10],r12d
    6501c021:	add    r12d,0xffffffff
    6501c025:	test   r12d,r12d
    6501c028:	jg     0x6501c033
    6501c02a:	mov    rcx,QWORD PTR [rdx]
    6501c02d:	mov    rax,QWORD PTR [rcx]
    6501c030:	call   QWORD PTR [rax+0x8]
    6501c033:	mov    rax,rsi
    6501c036:	jmp    0x6501c07a
    6501c038:	mov    ecx,0x80070057
    6501c03d:	call   0x65001050
    6501c042:	nop
    6501c043:	mov    ecx,0x80070057
    6501c048:	call   0x65001050
    6501c04d:	nop
    6501c04e:	mov    ecx,0x80070057
    6501c053:	call   0x65001050
    6501c058:	nop
    6501c059:	mov    ecx,0x80070057
    6501c05e:	call   0x65001050
    6501c063:	nop
    6501c064:	mov    ecx,0x80070057
    6501c069:	call   0x65001050
    6501c06e:	int3   
    6501c06f:	mov    ecx,0x80070057
    6501c074:	call   0x65001050
    6501c079:	nop
    6501c07a:	mov    rcx,QWORD PTR [rbp+0x2b0]
    6501c081:	xor    rcx,rbp
    6501c084:	call   0x6501e4e0
    6501c089:	mov    rbx,QWORD PTR [rbp+0x2f8]
    6501c090:	mov    rsi,QWORD PTR [rbp+0x300]
    6501c097:	mov    rdi,QWORD PTR [rbp+0x308]
    6501c09e:	lea    rsp,[rbp+0x2c0]
    6501c0a5:	pop    r15
    6501c0a7:	pop    r14
    6501c0a9:	pop    r13
    6501c0ab:	pop    r12
    6501c0ad:	pop    rbp
    6501c0ae:	ret    
    6501c0af:	int3   
    6501c0b0:	rex push rbp
    6501c0b2:	sub    rsp,0x20
    6501c0b6:	lea    rbp,[rdx+0x40]
    6501c0ba:	mov    eax,DWORD PTR [rbp+0x70]
    6501c0bd:	and    eax,0x1
    6501c0c0:	test   eax,eax
    6501c0c2:	je     0x6501c0d4
    6501c0c4:	and    DWORD PTR [rbp+0x70],0xfffffffe
    6501c0c8:	mov    rcx,QWORD PTR [rbp+0x138]
    6501c0cf:	call   0x65001cb0
    6501c0d4:	add    rsp,0x20
    6501c0d8:	pop    rbp
    6501c0d9:	ret    
    6501c0da:	int3   
    6501c0db:	int3   
    6501c0dc:	int3   
    6501c0dd:	int3   
    6501c0de:	int3   
    6501c0df:	int3   
    6501c0e0:	rex push rbp
    6501c0e2:	sub    rsp,0x20
    6501c0e6:	lea    rbp,[rdx+0x40]
    6501c0ea:	lea    rcx,[rbp+0xd0]
    6501c0f1:	call   0x65001cb0
    6501c0f6:	add    rsp,0x20
    6501c0fa:	pop    rbp
    6501c0fb:	ret    
    6501c0fc:	int3   
    6501c0fd:	int3   
    6501c0fe:	int3   
    6501c0ff:	int3   
    6501c100:	rex push rbp
    6501c102:	sub    rsp,0x20
    6501c106:	lea    rbp,[rdx+0x40]
    6501c10a:	lea    rcx,[rbp+0xc0]
    6501c111:	call   0x65001cb0
    6501c116:	add    rsp,0x20
    6501c11a:	pop    rbp
    6501c11b:	ret    
    6501c11c:	int3   
    6501c11d:	int3   
    6501c11e:	int3   
    6501c11f:	int3   
    6501c120:	rex push rbp
    6501c122:	sub    rsp,0x20
    6501c126:	lea    rbp,[rdx+0x40]
    6501c12a:	lea    rcx,[rbp+0x40]
    6501c12e:	call   0x65002100
    6501c133:	add    rsp,0x20
    6501c137:	pop    rbp
    6501c138:	ret    
    6501c139:	int3   
    6501c13a:	int3   
    6501c13b:	int3   
    6501c13c:	int3   
    6501c13d:	int3   
    6501c13e:	int3   
    6501c13f:	int3   
    6501c140:	rex push rbp
    6501c142:	sub    rsp,0x20
    6501c146:	lea    rbp,[rdx+0x40]
    6501c14a:	lea    rcx,[rbp+0x40]
    6501c14e:	call   0x65001cb0
    6501c153:	add    rsp,0x20
    6501c157:	pop    rbp
    6501c158:	ret    
    6501c159:	int3   
    6501c15a:	int3   
    6501c15b:	int3   
    6501c15c:	int3   
    6501c15d:	int3   
    6501c15e:	int3   
    6501c15f:	int3   
    6501c160:	rex push rbp
    6501c162:	sub    rsp,0x20
    6501c166:	lea    rbp,[rdx+0x40]
    6501c16a:	lea    rcx,[rbp+0xb8]
    6501c171:	call   0x65001cb0
    6501c176:	add    rsp,0x20
    6501c17a:	pop    rbp
    6501c17b:	ret    
    6501c17c:	int3   
    6501c17d:	int3   
    6501c17e:	int3   
    6501c17f:	int3   
    6501c180:	rex push rbp
    6501c182:	sub    rsp,0x20
    6501c186:	lea    rbp,[rdx+0x40]
    6501c18a:	lea    rcx,[rbp+0x68]
    6501c18e:	call   0x65001cb0
    6501c193:	add    rsp,0x20
    6501c197:	pop    rbp
    6501c198:	ret    
    6501c199:	int3   
    6501c19a:	int3   
    6501c19b:	int3   
    6501c19c:	int3   
    6501c19d:	int3   
    6501c19e:	int3   
    6501c19f:	int3   
    6501c1a0:	rex push rbp
    6501c1a2:	sub    rsp,0x20
    6501c1a6:	lea    rbp,[rdx+0x40]
    6501c1aa:	lea    rcx,[rbp+0xb0]
    6501c1b1:	call   0x65001cb0
    6501c1b6:	add    rsp,0x20
    6501c1ba:	pop    rbp
    6501c1bb:	ret    
    6501c1bc:	int3   
    6501c1bd:	int3   
    6501c1be:	int3   
    6501c1bf:	int3   
    6501c1c0:	rex push rbp
    6501c1c2:	sub    rsp,0x20
    6501c1c6:	lea    rbp,[rdx+0x40]
    6501c1ca:	lea    rcx,[rbp+0x78]
    6501c1ce:	call   0x65001cb0
    6501c1d3:	add    rsp,0x20
    6501c1d7:	pop    rbp
    6501c1d8:	ret    
    6501c1d9:	int3   
    6501c1da:	int3   
    6501c1db:	int3   
    6501c1dc:	int3   
    6501c1dd:	int3   
    6501c1de:	int3   
    6501c1df:	int3   
    6501c1e0:	rex push rbp
    6501c1e2:	sub    rsp,0x20
    6501c1e6:	lea    rbp,[rdx+0x40]
    6501c1ea:	lea    rcx,[rbp+0xa8]
    6501c1f1:	call   0x65001cb0
    6501c1f6:	add    rsp,0x20
    6501c1fa:	pop    rbp
    6501c1fb:	ret    
    6501c1fc:	int3   
    6501c1fd:	int3   
    6501c1fe:	int3   
    6501c1ff:	int3   
    6501c200:	rex push rbp
    6501c202:	sub    rsp,0x20
    6501c206:	lea    rbp,[rdx+0x40]
    6501c20a:	lea    rcx,[rbp+0x30]
    6501c20e:	call   0x65002100
    6501c213:	add    rsp,0x20
    6501c217:	pop    rbp
    6501c218:	ret    
    6501c219:	int3   
    6501c21a:	int3   
    6501c21b:	int3   
    6501c21c:	int3   
    6501c21d:	int3   
    6501c21e:	int3   
    6501c21f:	int3   
    6501c220:	rex push rbp
    6501c222:	sub    rsp,0x20
    6501c226:	lea    rbp,[rdx+0x40]
    6501c22a:	lea    rcx,[rbp+0x30]
    6501c22e:	call   0x65001cb0
    6501c233:	add    rsp,0x20
    6501c237:	pop    rbp
    6501c238:	ret    
    6501c239:	int3   
    6501c23a:	int3   
    6501c23b:	int3   
    6501c23c:	int3   
    6501c23d:	int3   
    6501c23e:	int3   
    6501c23f:	int3   
    6501c240:	rex push rbp
    6501c242:	sub    rsp,0x20
    6501c246:	lea    rbp,[rdx+0x40]
    6501c24a:	lea    rcx,[rbp+0x100]
    6501c251:	call   0x65001cb0
    6501c256:	add    rsp,0x20
    6501c25a:	pop    rbp
    6501c25b:	ret    
    6501c25c:	int3   
    6501c25d:	int3   
    6501c25e:	int3   
    6501c25f:	int3   
    6501c260:	rex push rbp
    6501c262:	sub    rsp,0x20
    6501c266:	lea    rbp,[rdx+0x40]
    6501c26a:	lea    rcx,[rbp+0xc8]
    6501c271:	call   0x65001cb0
    6501c276:	add    rsp,0x20
    6501c27a:	pop    rbp
    6501c27b:	ret    
    6501c27c:	int3   
    6501c27d:	int3   
    6501c27e:	int3   
    6501c27f:	int3   
    6501c280:	rex push rbp
    6501c282:	sub    rsp,0x20
    6501c286:	lea    rbp,[rdx+0x40]
    6501c28a:	lea    rcx,[rbp+0x50]
    6501c28e:	call   0x65002100
    6501c293:	add    rsp,0x20
    6501c297:	pop    rbp
    6501c298:	ret    
    6501c299:	int3   
    6501c29a:	int3   
    6501c29b:	int3   
    6501c29c:	int3   
    6501c29d:	int3   
    6501c29e:	int3   
    6501c29f:	int3   
    6501c2a0:	rex push rbp
    6501c2a2:	sub    rsp,0x20
    6501c2a6:	lea    rbp,[rdx+0x40]
    6501c2aa:	lea    rcx,[rbp+0x50]
    6501c2ae:	call   0x65001cb0
    6501c2b3:	add    rsp,0x20
    6501c2b7:	pop    rbp
    6501c2b8:	ret    
    6501c2b9:	int3   
    6501c2ba:	int3   
    6501c2bb:	int3   
    6501c2bc:	int3   
    6501c2bd:	int3   
    6501c2be:	int3   
    6501c2bf:	int3   
    6501c2c0:	rex push rbp
    6501c2c2:	sub    rsp,0x20
    6501c2c6:	lea    rbp,[rdx+0x40]
    6501c2ca:	lea    rcx,[rbp+0xe8]
    6501c2d1:	call   0x65001cb0
    6501c2d6:	add    rsp,0x20
    6501c2da:	pop    rbp
    6501c2db:	ret    
    6501c2dc:	int3   
    6501c2dd:	int3   
    6501c2de:	int3   
    6501c2df:	int3   
    6501c2e0:	rex push rbp
    6501c2e2:	sub    rsp,0x20
    6501c2e6:	lea    rbp,[rdx+0x40]
    6501c2ea:	lea    rcx,[rbp+0x48]
    6501c2ee:	call   0x65001cb0
    6501c2f3:	add    rsp,0x20
    6501c2f7:	pop    rbp
    6501c2f8:	ret    
    6501c2f9:	int3   
    6501c2fa:	int3   
    6501c2fb:	int3   
    6501c2fc:	int3   
    6501c2fd:	int3   
    6501c2fe:	int3   
    6501c2ff:	int3   
    6501c300:	rex push rbp
    6501c302:	sub    rsp,0x20
    6501c306:	lea    rbp,[rdx+0x40]
    6501c30a:	lea    rcx,[rbp+0x80]
    6501c311:	call   0x65019c00
    6501c316:	add    rsp,0x20
    6501c31a:	pop    rbp
    6501c31b:	ret    
    6501c31c:	int3   
    6501c31d:	int3   
    6501c31e:	int3   
    6501c31f:	int3   
    6501c320:	rex push rbp
    6501c322:	sub    rsp,0x20
    6501c326:	lea    rbp,[rdx+0x40]
    6501c32a:	lea    rcx,[rbp+0x20]
    6501c32e:	call   0x65002100
    6501c333:	add    rsp,0x20
    6501c337:	pop    rbp
    6501c338:	ret    
    6501c339:	int3   
    6501c33a:	int3   
    6501c33b:	int3   
    6501c33c:	int3   
    6501c33d:	int3   
    6501c33e:	int3   
    6501c33f:	int3   
    6501c340:	rex push rbp
    6501c342:	sub    rsp,0x20
    6501c346:	lea    rbp,[rdx+0x40]
    6501c34a:	lea    rcx,[rbp+0x20]
    6501c34e:	call   0x65001cb0
    6501c353:	add    rsp,0x20
    6501c357:	pop    rbp
    6501c358:	ret    
    6501c359:	int3   
    6501c35a:	int3   
    6501c35b:	int3   
    6501c35c:	int3   
    6501c35d:	int3   
    6501c35e:	int3   
    6501c35f:	int3   
    6501c360:	rex push rbp
    6501c362:	sub    rsp,0x20
    6501c366:	lea    rbp,[rdx+0x40]
    6501c36a:	lea    rcx,[rbp+0x8]
    6501c36e:	call   0x65001cb0
    6501c373:	add    rsp,0x20
    6501c377:	pop    rbp
    6501c378:	ret    
    6501c379:	int3   
    6501c37a:	int3   
    6501c37b:	int3   
    6501c37c:	int3   
    6501c37d:	int3   
    6501c37e:	int3   
    6501c37f:	int3   
    6501c380:	rex push rbp
    6501c382:	sub    rsp,0x20
    6501c386:	lea    rbp,[rdx+0x40]
    6501c38a:	lea    rcx,[rbp+0x108]
    6501c391:	call   0x65001cb0
    6501c396:	add    rsp,0x20
    6501c39a:	pop    rbp
    6501c39b:	ret    
    6501c39c:	int3   
    6501c39d:	int3   
    6501c39e:	int3   
    6501c39f:	int3   
    6501c3a0:	rex push rbp
    6501c3a2:	sub    rsp,0x20
    6501c3a6:	lea    rbp,[rdx+0x40]
    6501c3aa:	lea    rcx,[rbp+0xd8]
    6501c3b1:	call   0x65001cb0
    6501c3b6:	add    rsp,0x20
    6501c3ba:	pop    rbp
    6501c3bb:	ret    
    6501c3bc:	int3   
    6501c3bd:	int3   
    6501c3be:	int3   
    6501c3bf:	int3   
    6501c3c0:	rex push rbp
    6501c3c2:	sub    rsp,0x20
    6501c3c6:	lea    rbp,[rdx+0x40]
    6501c3ca:	lea    rcx,[rbp+0x10]
    6501c3ce:	call   0x65002100
    6501c3d3:	add    rsp,0x20
    6501c3d7:	pop    rbp
    6501c3d8:	ret    
    6501c3d9:	int3   
    6501c3da:	int3   
    6501c3db:	int3   
    6501c3dc:	int3   
    6501c3dd:	int3   
    6501c3de:	int3   
    6501c3df:	int3   
    6501c3e0:	rex push rbp
    6501c3e2:	sub    rsp,0x20
    6501c3e6:	lea    rbp,[rdx+0x40]
    6501c3ea:	lea    rcx,[rbp+0x10]
    6501c3ee:	call   0x65001cb0
    6501c3f3:	add    rsp,0x20
    6501c3f7:	pop    rbp
    6501c3f8:	ret    
    6501c3f9:	int3   
    6501c3fa:	int3   
    6501c3fb:	int3   
    6501c3fc:	int3   
    6501c3fd:	int3   
    6501c3fe:	int3   
    6501c3ff:	int3   
    6501c400:	rex push rbp
    6501c402:	sub    rsp,0x20
    6501c406:	lea    rbp,[rdx+0x40]
    6501c40a:	lea    rcx,[rbp+0xf8]
    6501c411:	call   0x65001cb0
    6501c416:	add    rsp,0x20
    6501c41a:	pop    rbp
    6501c41b:	ret    
    6501c41c:	int3   
    6501c41d:	int3   
    6501c41e:	int3   
    6501c41f:	int3   
    6501c420:	rex push rbp
    6501c422:	sub    rsp,0x20
    6501c426:	lea    rbp,[rdx+0x40]
    6501c42a:	lea    rcx,[rbp+0x28]
    6501c42e:	call   0x65001cb0
    6501c433:	add    rsp,0x20
    6501c437:	pop    rbp
    6501c438:	ret    
    6501c439:	int3   
    6501c43a:	int3   
    6501c43b:	int3   
    6501c43c:	int3   
    6501c43d:	int3   
    6501c43e:	int3   
    6501c43f:	int3   
    6501c440:	rex push rbp
    6501c442:	sub    rsp,0x20
    6501c446:	lea    rbp,[rdx+0x40]
    6501c44a:	lea    rcx,[rbp+0x18]
    6501c44e:	call   0x65002100
    6501c453:	add    rsp,0x20
    6501c457:	pop    rbp
    6501c458:	ret    
    6501c459:	int3   
    6501c45a:	int3   
    6501c45b:	int3   
    6501c45c:	int3   
    6501c45d:	int3   
    6501c45e:	int3   
    6501c45f:	int3   
    6501c460:	rex push rbp
    6501c462:	sub    rsp,0x20
    6501c466:	lea    rbp,[rdx+0x40]
    6501c46a:	lea    rcx,[rbp+0x18]
    6501c46e:	call   0x65001cb0
    6501c473:	add    rsp,0x20
    6501c477:	pop    rbp
    6501c478:	ret    
    6501c479:	int3   
    6501c47a:	int3   
    6501c47b:	int3   
    6501c47c:	int3   
    6501c47d:	int3   
    6501c47e:	int3   
    6501c47f:	int3   
    6501c480:	rex push rbp
    6501c482:	sub    rsp,0x20
    6501c486:	lea    rbp,[rdx+0x40]
    6501c48a:	lea    rcx,[rbp+0x58]
    6501c48e:	call   0x65002100
    6501c493:	add    rsp,0x20
    6501c497:	pop    rbp
    6501c498:	ret    
    6501c499:	int3   
    6501c49a:	int3   
    6501c49b:	int3   
    6501c49c:	int3   
    6501c49d:	int3   
    6501c49e:	int3   
    6501c49f:	int3   
    6501c4a0:	rex push rbp
    6501c4a2:	sub    rsp,0x20
    6501c4a6:	lea    rbp,[rdx+0x40]
    6501c4aa:	lea    rcx,[rbp+0x58]
    6501c4ae:	call   0x65001cb0
    6501c4b3:	add    rsp,0x20
    6501c4b7:	pop    rbp
    6501c4b8:	ret    
    6501c4b9:	int3   
    6501c4ba:	int3   
    6501c4bb:	int3   
    6501c4bc:	int3   
    6501c4bd:	int3   
    6501c4be:	int3   
    6501c4bf:	int3   
    6501c4c0:	rex push rbp
    6501c4c2:	sub    rsp,0x20
    6501c4c6:	lea    rbp,[rdx+0x40]
    6501c4ca:	lea    rcx,[rbp+0x118]
    6501c4d1:	call   0x65001cb0
    6501c4d6:	add    rsp,0x20
    6501c4da:	pop    rbp
    6501c4db:	ret    
    6501c4dc:	int3   
    6501c4dd:	int3   
    6501c4de:	int3   
    6501c4df:	int3   
    6501c4e0:	rex push rbp
    6501c4e2:	sub    rsp,0x20
    6501c4e6:	lea    rbp,[rdx+0x40]
    6501c4ea:	lea    rcx,[rbp+0x38]
    6501c4ee:	call   0x65002100
    6501c4f3:	add    rsp,0x20
    6501c4f7:	pop    rbp
    6501c4f8:	ret    
    6501c4f9:	int3   
    6501c4fa:	int3   
    6501c4fb:	int3   
    6501c4fc:	int3   
    6501c4fd:	int3   
    6501c4fe:	int3   
    6501c4ff:	int3   
    6501c500:	rex push rbp
    6501c502:	sub    rsp,0x20
    6501c506:	lea    rbp,[rdx+0x40]
    6501c50a:	lea    rcx,[rbp+0x38]
    6501c50e:	call   0x65001cb0
    6501c513:	add    rsp,0x20
    6501c517:	pop    rbp
    6501c518:	ret    
    6501c519:	int3   
    6501c51a:	int3   
    6501c51b:	int3   
    6501c51c:	int3   
    6501c51d:	int3   
    6501c51e:	int3   
    6501c51f:	int3   
    6501c520:	rex push rbp
    6501c522:	sub    rsp,0x20
    6501c526:	lea    rbp,[rdx+0x40]
    6501c52a:	lea    rcx,[rbp+0x110]
    6501c531:	call   0x65001cb0
    6501c536:	add    rsp,0x20
    6501c53a:	pop    rbp
    6501c53b:	ret    
    6501c53c:	int3   
    6501c53d:	int3   
    6501c53e:	int3   
    6501c53f:	int3   
    6501c540:	rex push rbp
    6501c542:	sub    rsp,0x20
    6501c546:	lea    rbp,[rdx+0x40]
    6501c54a:	lea    rcx,[rbp+0xf0]
    6501c551:	call   0x65001cb0
    6501c556:	add    rsp,0x20
    6501c55a:	pop    rbp
    6501c55b:	ret    
    6501c55c:	int3   
    6501c55d:	int3   
    6501c55e:	int3   
    6501c55f:	int3   
    6501c560:	rex push rbp
    6501c562:	sub    rsp,0x20
    6501c566:	lea    rbp,[rdx+0x40]
    6501c56a:	lea    rcx,[rbp+0xe0]
    6501c571:	call   0x65001cb0
    6501c576:	add    rsp,0x20
    6501c57a:	pop    rbp
    6501c57b:	ret    
    6501c57c:	int3   
    6501c57d:	int3   
    6501c57e:	int3   
    6501c57f:	int3   
    6501c580:	rex push rbp
    6501c582:	push   r13
    6501c584:	push   r14
    6501c586:	sub    rsp,0xc0
    6501c58d:	lea    rbp,[rsp+0x40]
    6501c592:	mov    QWORD PTR [rbp+0x40],0xfffffffffffffffe
    6501c59a:	mov    QWORD PTR [rbp+0xa0],rbx
    6501c5a1:	mov    QWORD PTR [rbp+0xa8],rsi
    6501c5a8:	mov    QWORD PTR [rbp+0xb0],rdi
    6501c5af:	mov    QWORD PTR [rbp+0xb8],r12
    6501c5b6:	mov    rax,QWORD PTR [rip+0x25b63]        # 0x65042120
    6501c5bd:	xor    rax,rbp
    6501c5c0:	mov    QWORD PTR [rbp+0x70],rax
    6501c5c4:	call   QWORD PTR [rip+0x25ace]        # 0x65042098
    6501c5ca:	mov    r12d,eax
    6501c5cd:	xor    r13d,r13d
    6501c5d0:	mov    edi,r13d
    6501c5d3:	mov    DWORD PTR [rbp+0x8],r13d
    6501c5d7:	call   0x65017290
    6501c5dc:	xor    edx,edx
    6501c5de:	lea    rcx,[rbp+0x8]
    6501c5e2:	call   rax
    6501c5e4:	test   eax,eax
    6501c5e6:	je     0x6501c5f6
    6501c5e8:	add    edi,0x3e8
    6501c5ee:	cmp    edi,0xea60
    6501c5f4:	ja     0x6501c603
    6501c5f6:	mov    ecx,0x3e8
    6501c5fb:	call   QWORD PTR [rip+0x17a87]        # 0x65034088
    6501c601:	jmp    0x6501c5d3
    6501c603:	movabs r14,0xffffffffffffff0
    6501c60d:	data16 xchg ax,ax
    6501c610:	mov    esi,r13d
    6501c613:	lea    rcx,[rbp+0x0]
    6501c617:	call   0x6501a740
    6501c61c:	nop
    6501c61d:	mov    QWORD PTR [rbp+0x68],0xf
    6501c625:	mov    QWORD PTR [rbp+0x60],r13
    6501c629:	mov    BYTE PTR [rbp+0x50],0x0
    6501c62d:	mov    rdi,QWORD PTR [rbp+0x0]
    6501c631:	test   rdi,rdi
    6501c634:	jne    0x6501c63b
    6501c636:	mov    rbx,r13
    6501c639:	jmp    0x6501c6b5
    6501c63b:	mov    rcx,rdi
    6501c63e:	call   QWORD PTR [rip+0x17a4c]        # 0x65034090
    6501c644:	lea    edx,[rax+0x1]
    6501c647:	cmp    edx,0x3fffffff
    6501c64d:	jle    0x6501c654
    6501c64f:	mov    rbx,r13
    6501c652:	jmp    0x6501c6b5
    6501c654:	movsxd rax,edx
    6501c657:	add    rax,rax
    6501c65a:	lea    rcx,[rax+0xf]
    6501c65e:	cmp    rcx,rax
    6501c661:	ja     0x6501c666
    6501c663:	mov    rcx,r14
    6501c666:	and    rcx,0xfffffffffffffff0
    6501c66a:	mov    rax,rcx
    6501c66d:	call   0x650330c0
    6501c672:	sub    rsp,rcx
    6501c675:	lea    rbx,[rsp+0x40]
    6501c67a:	test   rbx,rbx
    6501c67d:	je     0x6501c6b2
    6501c67f:	mov    BYTE PTR [rbx],0x0
    6501c682:	lea    eax,[rdx+rdx*1]
    6501c685:	mov    QWORD PTR [rsp+0x38],r13
    6501c68a:	mov    QWORD PTR [rsp+0x30],r13
    6501c68f:	mov    DWORD PTR [rsp+0x28],eax
    6501c693:	mov    QWORD PTR [rsp+0x20],rbx
    6501c698:	or     r9d,0xffffffff
    6501c69c:	mov    r8,rdi
    6501c69f:	xor    edx,edx
    6501c6a1:	mov    ecx,r12d
    6501c6a4:	call   QWORD PTR [rip+0x17996]        # 0x65034040
    6501c6aa:	test   eax,eax
    6501c6ac:	cmove  rbx,r13
    6501c6b0:	jmp    0x6501c6b5
    6501c6b2:	mov    rbx,r13
    6501c6b5:	mov    edx,0xf
    6501c6ba:	mov    QWORD PTR [rbp+0x38],rdx
    6501c6be:	mov    r8,r13
    6501c6c1:	mov    QWORD PTR [rbp+0x30],r13
    6501c6c5:	mov    BYTE PTR [rbp+0x20],r8b
    6501c6c9:	xor    eax,eax
    6501c6cb:	or     rcx,0xffffffffffffffff
    6501c6cf:	mov    rdi,rbx
    6501c6d2:	repnz scas al,BYTE PTR es:[rdi]
    6501c6d4:	not    rcx
    6501c6d7:	sub    rcx,0x1
    6501c6db:	mov    rdi,rcx
    6501c6de:	cmp    rcx,0xfffffffffffffffe
    6501c6e2:	jbe    0x6501c6f1
    6501c6e4:	call   0x6501cfe0
    6501c6e9:	mov    rdx,QWORD PTR [rbp+0x38]
    6501c6ed:	mov    r8,QWORD PTR [rbp+0x30]
    6501c6f1:	cmp    rdx,rdi
    6501c6f4:	jae    0x6501c708
    6501c6f6:	mov    rdx,rdi
    6501c6f9:	lea    rcx,[rbp+0x18]
    6501c6fd:	call   0x65002330
    6501c702:	mov    rdx,QWORD PTR [rbp+0x38]
    6501c706:	jmp    0x6501c723
    6501c708:	test   rdi,rdi
    6501c70b:	jne    0x6501c723
    6501c70d:	mov    QWORD PTR [rbp+0x30],r13
    6501c711:	lea    rax,[rbp+0x20]
    6501c715:	cmp    rdx,0x10
    6501c719:	cmovae rax,QWORD PTR [rbp+0x20]
    6501c71e:	mov    BYTE PTR [rax],dil
    6501c721:	jmp    0x6501c756
    6501c723:	test   rdi,rdi
    6501c726:	je     0x6501c756
    6501c728:	lea    rcx,[rbp+0x20]
    6501c72c:	cmp    rdx,0x10
    6501c730:	cmovae rcx,QWORD PTR [rbp+0x20]
    6501c735:	mov    r9,rdi
    6501c738:	mov    r8,rbx
    6501c73b:	call   0x6501d640
    6501c740:	mov    QWORD PTR [rbp+0x30],rdi
    6501c744:	lea    rax,[rbp+0x20]
    6501c748:	cmp    QWORD PTR [rbp+0x38],0x10
    6501c74d:	cmovae rax,QWORD PTR [rbp+0x20]
    6501c752:	mov    BYTE PTR [rax+rdi*1],0x0
    6501c756:	lea    rdx,[rbp+0x48]
    6501c75a:	lea    rcx,[rbp+0x18]
    6501c75e:	call   0x6501a340
    6501c763:	movzx  edi,al
    6501c766:	cmp    QWORD PTR [rbp+0x38],0x10
    6501c76b:	jb     0x6501c776
    6501c76d:	mov    rcx,QWORD PTR [rbp+0x20]
    6501c771:	call   0x6501d190
    6501c776:	test   dil,dil
    6501c779:	jne    0x6501c800
    6501c77f:	mov    edi,r13d
    6501c782:	mov    DWORD PTR [rbp+0xc],r13d
    6501c786:	call   0x65017290
    6501c78b:	xor    edx,edx
    6501c78d:	lea    rcx,[rbp+0xc]
    6501c791:	call   rax
    6501c793:	test   eax,eax
    6501c795:	je     0x6501c7a5
    6501c797:	add    edi,0x3e8
    6501c79d:	cmp    edi,0x493e0
    6501c7a3:	ja     0x6501c7b2
    6501c7a5:	mov    ecx,0x3e8
    6501c7aa:	call   QWORD PTR [rip+0x178d8]        # 0x65034088
    6501c7b0:	jmp    0x6501c782
    6501c7b2:	cmp    QWORD PTR [rbp+0x68],0x10
    6501c7b7:	jb     0x6501c7c2
    6501c7b9:	mov    rcx,QWORD PTR [rbp+0x50]
    6501c7bd:	call   0x6501d190
    6501c7c2:	mov    QWORD PTR [rbp+0x68],0xf
    6501c7ca:	mov    QWORD PTR [rbp+0x60],r13
    6501c7ce:	mov    BYTE PTR [rbp+0x50],0x0
    6501c7d2:	mov    rdx,QWORD PTR [rbp+0x0]
    6501c7d6:	add    rdx,0xffffffffffffffe8
    6501c7da:	or     eax,0xffffffff
    6501c7dd:	lock xadd DWORD PTR [rdx+0x10],eax
    6501c7e2:	add    eax,0xffffffff
    6501c7e5:	test   eax,eax
    6501c7e7:	jg     0x6501c7f2
    6501c7e9:	mov    rcx,QWORD PTR [rdx]
    6501c7ec:	mov    rax,QWORD PTR [rcx]
    6501c7ef:	call   QWORD PTR [rax+0x8]
    6501c7f2:	add    esi,0x1
    6501c7f5:	cmp    esi,0x3
    6501c7f8:	jne    0x6501c613
    6501c7fe:	jmp    0x6501c851
    6501c800:	cmp    QWORD PTR [rbp+0x60],0x0
    6501c805:	je     0x6501c811
    6501c807:	lea    rcx,[rbp+0x48]
    6501c80b:	call   0x65019240
    6501c810:	nop
    6501c811:	cmp    QWORD PTR [rbp+0x68],0x10
    6501c816:	jb     0x6501c821
    6501c818:	mov    rcx,QWORD PTR [rbp+0x50]
    6501c81c:	call   0x6501d190
    6501c821:	mov    QWORD PTR [rbp+0x68],0xf
    6501c829:	mov    QWORD PTR [rbp+0x60],r13
    6501c82d:	mov    BYTE PTR [rbp+0x50],0x0
    6501c831:	mov    rdx,QWORD PTR [rbp+0x0]
    6501c835:	add    rdx,0xffffffffffffffe8
    6501c839:	or     eax,0xffffffff
    6501c83c:	lock xadd DWORD PTR [rdx+0x10],eax
    6501c841:	add    eax,0xffffffff
    6501c844:	test   eax,eax
    6501c846:	jg     0x6501c851
    6501c848:	mov    rcx,QWORD PTR [rdx]
    6501c84b:	mov    rax,QWORD PTR [rcx]
    6501c84e:	call   QWORD PTR [rax+0x8]
    6501c851:	mov    edi,r13d
    6501c854:	mov    DWORD PTR [rbp+0x10],r13d
    6501c858:	call   0x65017290
    6501c85d:	xor    edx,edx
    6501c85f:	lea    rcx,[rbp+0x10]
    6501c863:	call   rax
    6501c865:	test   eax,eax
    6501c867:	je     0x6501c87b
    6501c869:	add    edi,0x3e8
    6501c86f:	cmp    edi,0x12e1fc0
    6501c875:	ja     0x6501c610
    6501c87b:	mov    ecx,0x3e8
    6501c880:	call   QWORD PTR [rip+0x17802]        # 0x65034088
    6501c886:	jmp    0x6501c854
    6501c888:	int3   
    6501c889:	int3   
    6501c88a:	int3   
    6501c88b:	int3   
    6501c88c:	int3   
    6501c88d:	int3   
    6501c88e:	int3   
    6501c88f:	int3   
    6501c890:	rex push rbp
    6501c892:	sub    rsp,0x20
    6501c896:	lea    rbp,[rdx+0x40]
    6501c89a:	lea    rcx,[rbp+0x0]
    6501c89e:	call   0x65001cb0
    6501c8a3:	add    rsp,0x20
    6501c8a7:	pop    rbp
    6501c8a8:	ret    
    6501c8a9:	int3   
    6501c8aa:	int3   
    6501c8ab:	int3   
    6501c8ac:	int3   
    6501c8ad:	int3   
    6501c8ae:	int3   
    6501c8af:	int3   
    6501c8b0:	rex push rbp
    6501c8b2:	sub    rsp,0x20
    6501c8b6:	lea    rbp,[rdx+0x40]
    6501c8ba:	lea    rcx,[rbp+0x48]
    6501c8be:	call   0x65001c70
    6501c8c3:	add    rsp,0x20
    6501c8c7:	pop    rbp
    6501c8c8:	ret    
    6501c8c9:	int3   
    6501c8ca:	int3   
    6501c8cb:	int3   
    6501c8cc:	int3   
    6501c8cd:	int3   
    6501c8ce:	int3   
    6501c8cf:	int3   
    6501c8d0:	rex push rbp
    6501c8d2:	sub    rsp,0x20
    6501c8d6:	lea    rbp,[rdx+0x40]
    6501c8da:	lea    rcx,[rbp+0x18]
    6501c8de:	call   0x65001c70
    6501c8e3:	add    rsp,0x20
    6501c8e7:	pop    rbp
    6501c8e8:	ret    
    6501c8e9:	int3   
    6501c8ea:	int3   
    6501c8eb:	int3   
    6501c8ec:	int3   
    6501c8ed:	int3   
    6501c8ee:	int3   
    6501c8ef:	int3   
    6501c8f0:	rex push rbx
    6501c8f2:	sub    rsp,0x260
    6501c8f9:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
    6501c902:	mov    rax,QWORD PTR [rip+0x25817]        # 0x65042120
    6501c909:	xor    rax,rsp
    6501c90c:	mov    QWORD PTR [rsp+0x250],rax
    6501c914:	mov    r8d,0x208
    6501c91a:	lea    rdx,[rsp+0x40]
    6501c91f:	xor    ecx,ecx
    6501c921:	call   QWORD PTR [rip+0x177a9]        # 0x650340d0
    6501c927:	test   eax,eax
    6501c929:	je     0x6501c9e1
    6501c92f:	mov    edx,0x104
    6501c934:	lea    rcx,[rsp+0x40]
    6501c939:	call   0x6501ed30
    6501c93e:	lea    rdx,[rip+0x1853b]        # 0x65034e80
    6501c945:	lea    rcx,[rsp+0x40]
    6501c94a:	call   0x6501e6a0
    6501c94f:	test   rax,rax
    6501c952:	je     0x6501c9df
    6501c958:	lea    rcx,[rsp+0x30]
    6501c95d:	call   0x6501a490
    6501c962:	nop
    6501c963:	mov    rbx,QWORD PTR [rax]
    6501c966:	call   0x6500b700
    6501c96b:	mov    rcx,rax
    6501c96e:	mov    r8,rbx
    6501c971:	xor    edx,edx
    6501c973:	call   QWORD PTR [rip+0x177af]        # 0x65034128
    6501c979:	mov    rbx,rax
    6501c97c:	mov    rdx,QWORD PTR [rsp+0x30]
    6501c981:	add    rdx,0xffffffffffffffe8
    6501c985:	or     ecx,0xffffffff
    6501c988:	lock xadd DWORD PTR [rdx+0x10],ecx
    6501c98d:	add    ecx,0xffffffff
    6501c990:	test   ecx,ecx
    6501c992:	jg     0x6501c99e
    6501c994:	mov    rcx,QWORD PTR [rdx]
    6501c997:	mov    r8,QWORD PTR [rcx]
    6501c99a:	call   QWORD PTR [r8+0x8]
    6501c99e:	test   rbx,rbx
    6501c9a1:	je     0x6501c9df
    6501c9a3:	xor    edx,edx
    6501c9a5:	mov    rcx,rbx
    6501c9a8:	call   QWORD PTR [rip+0x176fa]        # 0x650340a8
    6501c9ae:	test   eax,eax
    6501c9b0:	jne    0x6501c9df
    6501c9b2:	xor    eax,eax
    6501c9b4:	mov    QWORD PTR [rsp+0x28],rax
    6501c9b9:	mov    DWORD PTR [rsp+0x20],eax
    6501c9bd:	xor    r9d,r9d
    6501c9c0:	lea    r8,[rip+0xfffffffffffffbb9]        # 0x6501c580
    6501c9c7:	xor    edx,edx
    6501c9c9:	xor    ecx,ecx
    6501c9cb:	call   QWORD PTR [rip+0x176f7]        # 0x650340c8
    6501c9d1:	test   rax,rax
    6501c9d4:	je     0x6501c9df
    6501c9d6:	mov    rcx,rax
    6501c9d9:	call   QWORD PTR [rip+0x17691]        # 0x65034070
    6501c9df:	xor    eax,eax
    6501c9e1:	mov    rcx,QWORD PTR [rsp+0x250]
    6501c9e9:	xor    rcx,rsp
    6501c9ec:	call   0x6501e4e0
    6501c9f1:	add    rsp,0x260
    6501c9f8:	pop    rbx
    6501c9f9:	ret    
    6501c9fa:	int3   
    6501c9fb:	int3   
    6501c9fc:	int3   
    6501c9fd:	int3   
    6501c9fe:	int3   
    6501c9ff:	int3   
    6501ca00:	rex push rbp
    6501ca02:	sub    rsp,0x20
    6501ca06:	mov    rbp,rdx
    6501ca09:	lea    rcx,[rbp+0x30]
    6501ca0d:	call   0x65001cb0
    6501ca12:	add    rsp,0x20
    6501ca16:	pop    rbp
    6501ca17:	ret    
    6501ca18:	int3   
    6501ca19:	int3   
    6501ca1a:	int3   
    6501ca1b:	int3   
    6501ca1c:	int3   
    6501ca1d:	int3   
    6501ca1e:	int3   
    6501ca1f:	int3   
    6501ca20:	sub    rsp,0x38
    6501ca24:	xor    eax,eax
    6501ca26:	lea    r8,[rip+0xfffffffffffffec3]        # 0x6501c8f0
    6501ca2d:	xor    r9d,r9d
    6501ca30:	mov    QWORD PTR [rsp+0x28],rax
    6501ca35:	xor    edx,edx
    6501ca37:	xor    ecx,ecx
    6501ca39:	mov    DWORD PTR [rsp+0x20],eax
    6501ca3d:	call   QWORD PTR [rip+0x17685]        # 0x650340c8
    6501ca43:	add    rsp,0x38
    6501ca47:	ret    
    6501ca48:	rex push rbx
    6501ca4a:	sub    rsp,0x30
    6501ca4e:	mov    rax,QWORD PTR [rip+0x256cb]        # 0x65042120
    6501ca55:	xor    rax,rsp
    6501ca58:	mov    QWORD PTR [rsp+0x28],rax
    6501ca5d:	xor    ebx,ebx
    6501ca5f:	call   QWORD PTR [rip+0x17743]        # 0x650341a8
    6501ca65:	lea    r9d,[rbx+0x7]
    6501ca69:	lea    r8,[rsp+0x20]
    6501ca6e:	mov    edx,0x1004
    6501ca73:	mov    ecx,eax
    6501ca75:	call   QWORD PTR [rip+0x17725]        # 0x650341a0
    6501ca7b:	test   eax,eax
    6501ca7d:	je     0x6501caa4
    6501ca7f:	mov    al,BYTE PTR [rsp+0x20]
    6501ca83:	lea    rdx,[rsp+0x20]
    6501ca88:	test   al,al
    6501ca8a:	je     0x6501caa4
    6501ca8c:	movsx  eax,al
    6501ca8f:	add    rdx,0x1
    6501ca93:	lea    ecx,[rbx+rbx*4]
    6501ca96:	lea    ebx,[rax+rcx*2-0x30]
    6501ca9a:	mov    al,BYTE PTR [rdx]
    6501ca9c:	test   al,al
    6501ca9e:	jne    0x6501ca8c
    6501caa0:	test   ebx,ebx
    6501caa2:	jne    0x6501caac
    6501caa4:	call   QWORD PTR [rip+0x17686]        # 0x65034130
    6501caaa:	mov    ebx,eax
    6501caac:	mov    eax,ebx
    6501caae:	mov    rcx,QWORD PTR [rsp+0x28]
    6501cab3:	xor    rcx,rsp
    6501cab6:	call   0x6501e4e0
    6501cabb:	add    rsp,0x30
    6501cabf:	pop    rbx
    6501cac0:	ret    
    6501cac1:	int3   
    6501cac2:	int3   
    6501cac3:	int3   
    6501cac4:	mov    eax,0x3
    6501cac9:	ret    
    6501caca:	int3   
    6501cacb:	int3   
    6501cacc:	sub    rsp,0xd8
    6501cad3:	mov    rax,QWORD PTR [rip+0x25646]        # 0x65042120
    6501cada:	xor    rax,rsp
    6501cadd:	mov    QWORD PTR [rsp+0xc0],rax
    6501cae5:	lea    rcx,[rsp+0x20]
    6501caea:	mov    DWORD PTR [rsp+0x20],0x94
    6501caf2:	call   QWORD PTR [rip+0x176b8]        # 0x650341b0
    6501caf8:	cmp    DWORD PTR [rsp+0x30],0x2
    6501cafd:	jne    0x6501cb0d
    6501caff:	cmp    DWORD PTR [rsp+0x24],0x5
    6501cb04:	lea    rax,[rip+0xffffffffffffffb9]        # 0x6501cac4
    6501cb0b:	jae    0x6501cb14
    6501cb0d:	lea    rax,[rip+0xffffffffffffff34]        # 0x6501ca48
    6501cb14:	xchg   QWORD PTR [rip+0x2557d],rax        # 0x65042098
    6501cb1b:	call   QWORD PTR [rip+0x25577]        # 0x65042098
    6501cb21:	mov    rcx,QWORD PTR [rsp+0xc0]
    6501cb29:	xor    rcx,rsp
    6501cb2c:	call   0x6501e4e0
    6501cb31:	add    rsp,0xd8
    6501cb38:	ret    
    6501cb39:	int3   
    6501cb3a:	int3   
    6501cb3b:	int3   
    6501cb3c:	sub    rsp,0x38
    6501cb40:	call   QWORD PTR [rip+0x174ea]        # 0x65034030
    6501cb46:	xor    r11d,r11d
    6501cb49:	mov    DWORD PTR [rsp+0x20],r11d
    6501cb4e:	jmp    0x6501cb5b
    6501cb50:	mov    r11d,0x8007000e
    6501cb56:	mov    DWORD PTR [rsp+0x20],r11d
    6501cb5b:	mov    eax,r11d
    6501cb5e:	add    rsp,0x38
    6501cb62:	ret    
    6501cb63:	int3   
    6501cb64:	int3   
    6501cb65:	int3   
    6501cb66:	int3   
    6501cb67:	int3   
    6501cb68:	int3   
    6501cb69:	int3   
    6501cb6a:	int3   
    6501cb6b:	int3   
    6501cb6c:	rex push rbp
    6501cb6e:	sub    rsp,0x20
    6501cb72:	mov    rbp,rdx
    6501cb75:	mov    rax,QWORD PTR [rcx]
    6501cb78:	xor    r11d,r11d
    6501cb7b:	cmp    DWORD PTR [rax],0xc0000017
    6501cb81:	sete   r11b
    6501cb85:	mov    eax,r11d
    6501cb88:	add    rsp,0x20
    6501cb8c:	pop    rbp
    6501cb8d:	ret    
    6501cb8e:	int3   
    6501cb8f:	int3   
    6501cb90:	mov    QWORD PTR [rsp+0x8],rbx
    6501cb95:	mov    QWORD PTR [rsp+0x10],rbp
    6501cb9a:	mov    QWORD PTR [rsp+0x18],rsi
    6501cb9f:	push   rdi
    6501cba0:	sub    rsp,0x20
    6501cba4:	test   rcx,rcx
    6501cba7:	mov    rbp,rdx
    6501cbaa:	mov    rbx,rcx
    6501cbad:	jne    0x6501cbb6
    6501cbaf:	mov    eax,0x80070057
    6501cbb4:	jmp    0x6501cc1a
    6501cbb6:	cmp    DWORD PTR [rcx],0x0
    6501cbb9:	je     0x6501cc18
    6501cbbb:	cmp    DWORD PTR [rcx],0x48
    6501cbbe:	jne    0x6501cbaf
    6501cbc0:	xor    edi,edi
    6501cbc2:	cmp    DWORD PTR [rcx+0x40],edi
    6501cbc5:	jle    0x6501cbf0
    6501cbc7:	xor    esi,esi
    6501cbc9:	test   rsi,rsi
    6501cbcc:	js     0x6501cc2f
    6501cbce:	cmp    edi,DWORD PTR [rbx+0x40]
    6501cbd1:	jge    0x6501cc2f
    6501cbd3:	mov    rax,QWORD PTR [rbx+0x38]
    6501cbd7:	mov    rdx,rbp
    6501cbda:	movzx  ecx,WORD PTR [rax+rsi*1]
    6501cbde:	call   QWORD PTR [rip+0x1778c]        # 0x65034370
    6501cbe4:	add    edi,0x1
    6501cbe7:	add    rsi,0x2
    6501cbeb:	cmp    edi,DWORD PTR [rbx+0x40]
    6501cbee:	jl     0x6501cbc9
    6501cbf0:	mov    rcx,QWORD PTR [rbx+0x38]
    6501cbf4:	test   rcx,rcx
    6501cbf7:	je     0x6501cc03
    6501cbf9:	call   0x6501fa90
    6501cbfe:	and    QWORD PTR [rbx+0x38],0x0
    6501cc03:	and    DWORD PTR [rbx+0x40],0x0
    6501cc07:	and    DWORD PTR [rbx+0x44],0x0
    6501cc0b:	lea    rcx,[rbx+0x8]
    6501cc0f:	call   QWORD PTR [rip+0x1750b]        # 0x65034120
    6501cc15:	and    DWORD PTR [rbx],0x0
    6501cc18:	xor    eax,eax
    6501cc1a:	mov    rbx,QWORD PTR [rsp+0x30]
    6501cc1f:	mov    rbp,QWORD PTR [rsp+0x38]
    6501cc24:	mov    rsi,QWORD PTR [rsp+0x40]
    6501cc29:	add    rsp,0x20
    6501cc2d:	pop    rdi
    6501cc2e:	ret    
    6501cc2f:	xor    r9d,r9d
    6501cc32:	xor    r8d,r8d
    6501cc35:	mov    ecx,0xc000008c
    6501cc3a:	lea    edx,[r9+0x1]
    6501cc3e:	call   QWORD PTR [rip+0x17574]        # 0x650341b8
    6501cc44:	int3   
    6501cc45:	int3   
    6501cc46:	int3   
    6501cc47:	int3   
    6501cc48:	rex push rbx
    6501cc4a:	sub    rsp,0x20
    6501cc4e:	mov    rbx,rcx
    6501cc51:	add    rcx,0x28
    6501cc55:	call   QWORD PTR [rip+0x174c5]        # 0x65034120
    6501cc5b:	mov    rcx,QWORD PTR [rbx+0x50]
    6501cc5f:	test   rcx,rcx
    6501cc62:	je     0x6501cc6e
    6501cc64:	call   0x6501fa90
    6501cc69:	and    QWORD PTR [rbx+0x50],0x0
    6501cc6e:	and    DWORD PTR [rbx+0x58],0x0
    6501cc72:	and    DWORD PTR [rbx+0x5c],0x0
    6501cc76:	add    rsp,0x20
    6501cc7a:	pop    rbx
    6501cc7b:	ret    
    6501cc7c:	mov    QWORD PTR [rsp+0x8],rbx
    6501cc81:	mov    QWORD PTR [rsp+0x10],rsi
    6501cc86:	push   rdi
    6501cc87:	sub    rsp,0x20
    6501cc8b:	mov    rsi,rcx
    6501cc8e:	add    rcx,0x28
    6501cc92:	movsxd rbx,edx
    6501cc95:	call   QWORD PTR [rip+0x17475]        # 0x65034110
    6501cc9b:	cmp    ebx,DWORD PTR [rsi+0x58]
    6501cc9e:	jg     0x6501ccde
    6501cca0:	test   ebx,ebx
    6501cca2:	js     0x6501ccde
    6501cca4:	cmp    ebx,DWORD PTR [rsi+0x58]
    6501cca7:	jne    0x6501ccbc
    6501cca9:	mov    rbx,QWORD PTR [rsi+0x10]
    6501ccad:	lea    rcx,[rsi+0x28]
    6501ccb1:	call   QWORD PTR [rip+0x17461]        # 0x65034118
    6501ccb7:	mov    rax,rbx
    6501ccba:	jmp    0x6501ccea
    6501ccbc:	jge    0x6501ccc8
    6501ccbe:	mov    rax,QWORD PTR [rsi+0x50]
    6501ccc2:	mov    rbx,QWORD PTR [rax+rbx*8]
    6501ccc6:	jmp    0x6501ccad
    6501ccc8:	xor    r9d,r9d
    6501cccb:	xor    r8d,r8d
    6501ccce:	mov    ecx,0xc000008c
    6501ccd3:	lea    edx,[r9+0x1]
    6501ccd7:	call   QWORD PTR [rip+0x174db]        # 0x650341b8
    6501ccdd:	int3   
    6501ccde:	lea    rcx,[rsi+0x28]
    6501cce2:	call   QWORD PTR [rip+0x17430]        # 0x65034118
    6501cce8:	xor    eax,eax
    6501ccea:	mov    rbx,QWORD PTR [rsp+0x30]
    6501ccef:	mov    rsi,QWORD PTR [rsp+0x38]
    6501ccf4:	add    rsp,0x20
    6501ccf8:	pop    rdi
    6501ccf9:	ret    
    6501ccfa:	int3   
    6501ccfb:	int3   
    6501ccfc:	mov    QWORD PTR [rsp+0x10],rbx
    6501cd01:	mov    QWORD PTR [rsp+0x18],rsi
    6501cd06:	push   rdi
    6501cd07:	sub    rsp,0xd0
    6501cd0e:	mov    rax,QWORD PTR [rip+0x2540b]        # 0x65042120
    6501cd15:	xor    rax,rsp
    6501cd18:	mov    QWORD PTR [rsp+0xc0],rax
    6501cd20:	xor    edx,edx
    6501cd22:	mov    rbx,rcx
    6501cd25:	lea    r8d,[rdx+0x28]
    6501cd29:	add    rcx,r8
    6501cd2c:	call   0x6501ee30
    6501cd31:	and    QWORD PTR [rbx+0x50],0x0
    6501cd36:	and    DWORD PTR [rbx+0x58],0x0
    6501cd3a:	and    DWORD PTR [rbx+0x5c],0x0
    6501cd3e:	lea    rax,[rip+0xfffffffffffe32bb]        # 0x65000000
    6501cd45:	mov    esi,0x94
    6501cd4a:	lea    rcx,[rsp+0x20]
    6501cd4f:	mov    r8,rsi
    6501cd52:	xor    edx,edx
    6501cd54:	mov    QWORD PTR [rbx+0x10],rax
    6501cd58:	mov    QWORD PTR [rbx+0x8],rax
    6501cd5c:	mov    DWORD PTR [rbx],0x60
    6501cd62:	mov    BYTE PTR [rbx+0x18],0x0
    6501cd66:	call   0x6501ee30
    6501cd6b:	lea    rcx,[rsp+0x20]
    6501cd70:	mov    DWORD PTR [rsp+0x20],esi
    6501cd74:	call   QWORD PTR [rip+0x17436]        # 0x650341b0
    6501cd7a:	cmp    DWORD PTR [rsp+0x30],0x2
    6501cd7f:	mov    esi,0x1
    6501cd84:	jne    0x6501cd8f
    6501cd86:	cmp    DWORD PTR [rsp+0x24],0x5
    6501cd8b:	jb     0x6501cda9
    6501cd8d:	jmp    0x6501cda5
    6501cd8f:	cmp    DWORD PTR [rsp+0x30],esi
    6501cd93:	jne    0x6501cda9
    6501cd95:	cmp    DWORD PTR [rsp+0x24],0x4
    6501cd9a:	ja     0x6501cda5
    6501cd9c:	jne    0x6501cda9
    6501cd9e:	cmp    DWORD PTR [rsp+0x28],0x0
    6501cda3:	jbe    0x6501cda9
    6501cda5:	mov    BYTE PTR [rbx+0x18],sil
    6501cda9:	lea    rax,[rip+0x182e8]        # 0x65035098
    6501cdb0:	lea    rcx,[rbx+0x28]
    6501cdb4:	mov    DWORD PTR [rbx+0x1c],0x800
    6501cdbb:	mov    QWORD PTR [rbx+0x20],rax
    6501cdbf:	call   0x6501cb3c
    6501cdc4:	movzx  ecx,BYTE PTR [rip+0x2a01d]        # 0x65046de8
    6501cdcb:	test   eax,eax
    6501cdcd:	mov    rax,rbx
    6501cdd0:	cmovs  ecx,esi
    6501cdd3:	mov    BYTE PTR [rip+0x2a00f],cl        # 0x65046de8
    6501cdd9:	mov    rcx,QWORD PTR [rsp+0xc0]
    6501cde1:	xor    rcx,rsp
    6501cde4:	call   0x6501e4e0
    6501cde9:	lea    r11,[rsp+0xd0]
    6501cdf1:	mov    rbx,QWORD PTR [r11+0x18]
    6501cdf5:	mov    rsi,QWORD PTR [r11+0x20]
    6501cdf9:	mov    rsp,r11
    6501cdfc:	pop    rdi
    6501cdfd:	ret    
    6501cdfe:	int3   
    6501cdff:	int3   
    6501ce00:	mov    rcx,QWORD PTR [rcx+0x8]
    6501ce04:	mov    r8,rdx
    6501ce07:	xor    edx,edx
    6501ce09:	rex.W jmp QWORD PTR [rip+0x173b8]        # 0x650341c8
    6501ce10:	sub    rsp,0x28
    6501ce14:	test   rdx,rdx
    6501ce17:	je     0x6501ce28
    6501ce19:	mov    rcx,QWORD PTR [rcx+0x8]
    6501ce1d:	mov    r8,rdx
    6501ce20:	xor    edx,edx
    6501ce22:	call   QWORD PTR [rip+0x173a8]        # 0x650341d0
    6501ce28:	add    rsp,0x28
    6501ce2c:	ret    
    6501ce2d:	int3   
    6501ce2e:	int3   
    6501ce2f:	int3   
    6501ce30:	sub    rsp,0x28
    6501ce34:	test   rdx,rdx
    6501ce37:	jne    0x6501ce43
    6501ce39:	mov    rax,QWORD PTR [rcx]
    6501ce3c:	mov    rdx,r8
    6501ce3f:	call   QWORD PTR [rax]
    6501ce41:	jmp    0x6501ce64
    6501ce43:	test   r8,r8
    6501ce46:	jne    0x6501ce52
    6501ce48:	mov    rax,QWORD PTR [rcx]
    6501ce4b:	call   QWORD PTR [rax+0x8]
    6501ce4e:	xor    eax,eax
    6501ce50:	jmp    0x6501ce64
    6501ce52:	mov    rcx,QWORD PTR [rcx+0x8]
    6501ce56:	mov    r9,r8
    6501ce59:	mov    r8,rdx
    6501ce5c:	xor    edx,edx
    6501ce5e:	call   QWORD PTR [rip+0x17374]        # 0x650341d8
    6501ce64:	add    rsp,0x28
    6501ce68:	ret    
    6501ce69:	int3   
    6501ce6a:	int3   
    6501ce6b:	int3   
    6501ce6c:	mov    rcx,QWORD PTR [rcx+0x8]
    6501ce70:	mov    r8,rdx
    6501ce73:	xor    edx,edx
    6501ce75:	rex.W jmp QWORD PTR [rip+0x17364]        # 0x650341e0
    6501ce7c:	mov    QWORD PTR [rsp+0x8],rbx
    6501ce81:	push   rdi
    6501ce82:	sub    rsp,0x20
    6501ce86:	cmp    BYTE PTR [rcx+0x10],0x0
    6501ce8a:	lea    rax,[rip+0x18217]        # 0x650350a8
    6501ce91:	mov    edi,edx
    6501ce93:	mov    QWORD PTR [rcx],rax
    6501ce96:	mov    rbx,rcx
    6501ce99:	je     0x6501ceaa
    6501ce9b:	mov    rcx,QWORD PTR [rcx+0x8]
    6501ce9f:	test   rcx,rcx
    6501cea2:	je     0x6501ceaa
    6501cea4:	call   QWORD PTR [rip+0x17316]        # 0x650341c0
    6501ceaa:	test   dil,0x1
    6501ceae:	je     0x6501ceb8
    6501ceb0:	mov    rcx,rbx
    6501ceb3:	call   0x6501d190
    6501ceb8:	mov    rax,rbx
    6501cebb:	mov    rbx,QWORD PTR [rsp+0x30]
    6501cec0:	add    rsp,0x20
    6501cec4:	pop    rdi
    6501cec5:	ret    
    6501cec6:	int3   
    6501cec7:	int3   
    6501cec8:	mov    rcx,QWORD PTR [rcx+0x8]
    6501cecc:	mov    rax,QWORD PTR [rcx]
    6501cecf:	rex.W jmp QWORD PTR [rax+0x8]
    6501ced3:	int3   
    6501ced4:	lock add DWORD PTR [rcx+0x20],0x1
    6501ced9:	lea    rax,[rcx+0x10]
    6501cedd:	ret    
    6501cede:	int3   
    6501cedf:	int3   
    6501cee0:	mov    rax,rcx
    6501cee3:	ret    
    6501cee4:	rex push rbx
    6501cee6:	sub    rsp,0x20
    6501ceea:	test   dl,0x1
    6501ceed:	lea    rax,[rip+0x181dc]        # 0x650350d0
    6501cef4:	mov    rbx,rcx
    6501cef7:	mov    QWORD PTR [rcx],rax
    6501cefa:	je     0x6501cf01
    6501cefc:	call   0x6501d190
    6501cf01:	mov    rax,rbx
    6501cf04:	add    rsp,0x20
    6501cf08:	pop    rbx
    6501cf09:	ret    
    6501cf0a:	int3   
    6501cf0b:	int3   
    6501cf0c:	mov    QWORD PTR [rsp+0x8],rbx
    6501cf11:	push   rdi
    6501cf12:	sub    rsp,0x20
    6501cf16:	lea    ebx,[rdx+0x8]
    6501cf19:	movsxd r9,r8d
    6501cf1c:	mov    rdi,rcx
    6501cf1f:	and    ebx,0xfffffff8
    6501cf22:	movsxd r8,ebx
    6501cf25:	jne    0x6501cf2c
    6501cf27:	xor    r8d,r8d
    6501cf2a:	jmp    0x6501cf44
    6501cf2c:	xor    edx,edx
    6501cf2e:	or     rax,0xffffffffffffffff
    6501cf32:	div    r8
    6501cf35:	cmp    rax,r9
    6501cf38:	jb     0x6501cf74
    6501cf3a:	imul   r8,r9
    6501cf3e:	cmp    r8,0xffffffffffffffe7
    6501cf42:	ja     0x6501cf74
    6501cf44:	mov    rcx,QWORD PTR [rcx+0x8]
    6501cf48:	lea    rdx,[r8+0x18]
    6501cf4c:	mov    rax,QWORD PTR [rcx]
    6501cf4f:	call   QWORD PTR [rax]
    6501cf51:	test   rax,rax
    6501cf54:	mov    r11,rax
    6501cf57:	je     0x6501cf74
    6501cf59:	and    DWORD PTR [r11+0x8],0x0
    6501cf5e:	mov    QWORD PTR [rax],rdi
    6501cf61:	mov    DWORD PTR [rax+0x10],0x1
    6501cf68:	lea    eax,[rbx-0x1]
    6501cf6b:	mov    DWORD PTR [r11+0xc],eax
    6501cf6f:	mov    rax,r11
    6501cf72:	jmp    0x6501cf76
    6501cf74:	xor    eax,eax
    6501cf76:	mov    rbx,QWORD PTR [rsp+0x30]
    6501cf7b:	add    rsp,0x20
    6501cf7f:	pop    rdi
    6501cf80:	ret    
    6501cf81:	int3   
    6501cf82:	int3   
    6501cf83:	int3   
    6501cf84:	rex push rbx
    6501cf86:	sub    rsp,0x20
    6501cf8a:	lea    ebx,[r8+0x8]
    6501cf8e:	mov    eax,r9d
    6501cf91:	and    ebx,0xfffffff8
    6501cf94:	mov    r8d,ebx
    6501cf97:	imul   r8,rax
    6501cf9b:	mov    eax,0xffffffff
    6501cfa0:	cmp    r8,rax
    6501cfa3:	ja     0x6501cfce
    6501cfa5:	cmp    r8d,0xffffffe7
    6501cfa9:	ja     0x6501cfce
    6501cfab:	mov    rcx,QWORD PTR [rcx+0x8]
    6501cfaf:	add    r8d,0x18
    6501cfb3:	mov    r9,QWORD PTR [rcx]
    6501cfb6:	call   QWORD PTR [r9+0x10]
    6501cfba:	test   rax,rax
    6501cfbd:	mov    r11,rax
    6501cfc0:	je     0x6501cfce
    6501cfc2:	lea    eax,[rbx-0x1]
    6501cfc5:	mov    DWORD PTR [r11+0xc],eax
    6501cfc9:	mov    rax,r11
    6501cfcc:	jmp    0x6501cfd0
    6501cfce:	xor    eax,eax
    6501cfd0:	add    rsp,0x20
    6501cfd4:	pop    rbx
    6501cfd5:	ret    
    6501cfd6:	int3   
    6501cfd7:	int3   
    6501cfd8:	int3   
    6501cfd9:	int3   
    6501cfda:	int3   
    6501cfdb:	int3   
    6501cfdc:	int3   
    6501cfdd:	int3   
    6501cfde:	int3   
    6501cfdf:	int3   
    6501cfe0:	sub    rsp,0x98
    6501cfe7:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501cff0:	lea    rdx,[rip+0x18191]        # 0x65035188
    6501cff7:	lea    rcx,[rsp+0x28]
    6501cffc:	call   0x65003c70
    6501d001:	nop
    6501d002:	lea    rcx,[rsp+0x50]
    6501d007:	call   0x6501d1a0
    6501d00c:	nop
    6501d00d:	lea    rax,[rip+0x1810c]        # 0x65035120
    6501d014:	mov    QWORD PTR [rsp+0x50],rax
    6501d019:	mov    QWORD PTR [rsp+0x88],0xf
    6501d025:	mov    QWORD PTR [rsp+0x80],0x0
    6501d031:	mov    BYTE PTR [rsp+0x70],0x0
    6501d036:	or     r9,0xffffffffffffffff
    6501d03a:	xor    r8d,r8d
    6501d03d:	lea    rdx,[rsp+0x28]
    6501d042:	lea    rcx,[rsp+0x68]
    6501d047:	call   0x65001e20
    6501d04c:	nop
    6501d04d:	lea    rax,[rip+0x180e4]        # 0x65035138
    6501d054:	mov    QWORD PTR [rsp+0x50],rax
    6501d059:	lea    rdx,[rip+0x24238]        # 0x65041298
    6501d060:	lea    rcx,[rsp+0x50]
    6501d065:	call   0x6501daf0
    6501d06a:	int3   
    6501d06b:	int3   
    6501d06c:	int3   
    6501d06d:	int3   
    6501d06e:	int3   
    6501d06f:	int3   
    6501d070:	rex push rbp
    6501d072:	sub    rsp,0x20
    6501d076:	mov    rbp,rdx
    6501d079:	lea    rcx,[rbp+0x28]
    6501d07d:	call   0x65001c70
    6501d082:	add    rsp,0x20
    6501d086:	pop    rbp
    6501d087:	ret    
    6501d088:	int3   
    6501d089:	int3   
    6501d08a:	int3   
    6501d08b:	int3   
    6501d08c:	int3   
    6501d08d:	int3   
    6501d08e:	int3   
    6501d08f:	int3   
    6501d090:	rex push rbp
    6501d092:	sub    rsp,0x20
    6501d096:	mov    rbp,rdx
    6501d099:	lea    rcx,[rbp+0x50]
    6501d09d:	call   0x6501d320
    6501d0a2:	add    rsp,0x20
    6501d0a6:	pop    rbp
    6501d0a7:	ret    
    6501d0a8:	int3   
    6501d0a9:	int3   
    6501d0aa:	int3   
    6501d0ab:	int3   
    6501d0ac:	int3   
    6501d0ad:	int3   
    6501d0ae:	int3   
    6501d0af:	int3   
    6501d0b0:	sub    rsp,0x98
    6501d0b7:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501d0c0:	lea    rdx,[rip+0x180f9]        # 0x650351c0
    6501d0c7:	lea    rcx,[rsp+0x28]
    6501d0cc:	call   0x65003c70
    6501d0d1:	nop
    6501d0d2:	lea    rcx,[rsp+0x50]
    6501d0d7:	call   0x6501d1a0
    6501d0dc:	nop
    6501d0dd:	lea    rax,[rip+0x1803c]        # 0x65035120
    6501d0e4:	mov    QWORD PTR [rsp+0x50],rax
    6501d0e9:	mov    QWORD PTR [rsp+0x88],0xf
    6501d0f5:	mov    QWORD PTR [rsp+0x80],0x0
    6501d101:	mov    BYTE PTR [rsp+0x70],0x0
    6501d106:	or     r9,0xffffffffffffffff
    6501d10a:	xor    r8d,r8d
    6501d10d:	lea    rdx,[rsp+0x28]
    6501d112:	lea    rcx,[rsp+0x68]
    6501d117:	call   0x65001e20
    6501d11c:	nop
    6501d11d:	lea    rax,[rip+0x1802c]        # 0x65035150
    6501d124:	mov    QWORD PTR [rsp+0x50],rax
    6501d129:	lea    rdx,[rip+0x24100]        # 0x65041230
    6501d130:	lea    rcx,[rsp+0x50]
    6501d135:	call   0x6501daf0
    6501d13a:	int3   
    6501d13b:	int3   
    6501d13c:	int3   
    6501d13d:	int3   
    6501d13e:	int3   
    6501d13f:	int3   
    6501d140:	rex push rbp
    6501d142:	sub    rsp,0x20
    6501d146:	mov    rbp,rdx
    6501d149:	lea    rcx,[rbp+0x28]
    6501d14d:	call   0x65001c70
    6501d152:	add    rsp,0x20
    6501d156:	pop    rbp
    6501d157:	ret    
    6501d158:	int3   
    6501d159:	int3   
    6501d15a:	int3   
    6501d15b:	int3   
    6501d15c:	int3   
    6501d15d:	int3   
    6501d15e:	int3   
    6501d15f:	int3   
    6501d160:	rex push rbp
    6501d162:	sub    rsp,0x20
    6501d166:	mov    rbp,rdx
    6501d169:	lea    rcx,[rbp+0x50]
    6501d16d:	call   0x6501d320
    6501d172:	add    rsp,0x20
    6501d176:	pop    rbp
    6501d177:	ret    
    6501d178:	int3   
    6501d179:	int3   
    6501d17a:	int3   
    6501d17b:	int3   
    6501d17c:	int3   
    6501d17d:	int3   
    6501d17e:	int3   
    6501d17f:	int3   
    6501d180:	jmp    0x6501da50
    6501d185:	int3   
    6501d186:	int3   
    6501d187:	int3   
    6501d188:	int3   
    6501d189:	int3   
    6501d18a:	int3   
    6501d18b:	int3   
    6501d18c:	int3   
    6501d18d:	int3   
    6501d18e:	int3   
    6501d18f:	int3   
    6501d190:	jmp    0x6501fa90
    6501d195:	int3   
    6501d196:	int3   
    6501d197:	int3   
    6501d198:	int3   
    6501d199:	int3   
    6501d19a:	int3   
    6501d19b:	int3   
    6501d19c:	int3   
    6501d19d:	int3   
    6501d19e:	int3   
    6501d19f:	int3   
    6501d1a0:	lea    rax,[rip+0x18039]        # 0x650351e0
    6501d1a7:	mov    QWORD PTR [rcx],rax
    6501d1aa:	xor    eax,eax
    6501d1ac:	mov    QWORD PTR [rcx+0x8],rax
    6501d1b0:	mov    DWORD PTR [rcx+0x10],eax
    6501d1b3:	mov    rax,rcx
    6501d1b6:	ret    
    6501d1b7:	int3   
    6501d1b8:	int3   
    6501d1b9:	int3   
    6501d1ba:	int3   
    6501d1bb:	int3   
    6501d1bc:	int3   
    6501d1bd:	int3   
    6501d1be:	int3   
    6501d1bf:	int3   
    6501d1c0:	mov    QWORD PTR [rsp+0x8],rbx
    6501d1c5:	mov    QWORD PTR [rsp+0x10],rsi
    6501d1ca:	push   rdi
    6501d1cb:	sub    rsp,0x20
    6501d1cf:	lea    rax,[rip+0x1800a]        # 0x650351e0
    6501d1d6:	mov    rsi,rdx
    6501d1d9:	mov    rbx,rcx
    6501d1dc:	mov    QWORD PTR [rcx],rax
    6501d1df:	mov    rdi,QWORD PTR [rdx]
    6501d1e2:	test   rdi,rdi
    6501d1e5:	je     0x6501d22d
    6501d1e7:	or     rcx,0xffffffffffffffff
    6501d1eb:	xor    eax,eax
    6501d1ed:	repnz scas al,BYTE PTR es:[rdi]
    6501d1ef:	not    rcx
    6501d1f2:	lea    rdi,[rcx-0x1]
    6501d1f6:	call   0x6501fae0
    6501d1fb:	test   rax,rax
    6501d1fe:	mov    QWORD PTR [rbx+0x8],rax
    6501d202:	je     0x6501d213
    6501d204:	mov    r8,QWORD PTR [rsi]
    6501d207:	lea    rdx,[rdi+0x1]
    6501d20b:	mov    rcx,rax
    6501d20e:	call   0x650201b0
    6501d213:	mov    DWORD PTR [rbx+0x10],0x1
    6501d21a:	mov    rax,rbx
    6501d21d:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d222:	mov    rsi,QWORD PTR [rsp+0x38]
    6501d227:	add    rsp,0x20
    6501d22b:	pop    rdi
    6501d22c:	ret    
    6501d22d:	mov    rsi,QWORD PTR [rsp+0x38]
    6501d232:	mov    rax,rbx
    6501d235:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d23a:	mov    QWORD PTR [rcx+0x8],0x0
    6501d242:	mov    DWORD PTR [rcx+0x10],0x1
    6501d249:	add    rsp,0x20
    6501d24d:	pop    rdi
    6501d24e:	ret    
    6501d24f:	int3   
    6501d250:	lea    rax,[rip+0x17f89]        # 0x650351e0
    6501d257:	mov    QWORD PTR [rcx],rax
    6501d25a:	mov    rax,QWORD PTR [rdx]
    6501d25d:	mov    DWORD PTR [rcx+0x10],0x0
    6501d264:	mov    QWORD PTR [rcx+0x8],rax
    6501d268:	mov    rax,rcx
    6501d26b:	ret    
    6501d26c:	int3   
    6501d26d:	int3   
    6501d26e:	int3   
    6501d26f:	int3   
    6501d270:	mov    QWORD PTR [rsp+0x10],rbx
    6501d275:	push   rsi
    6501d276:	sub    rsp,0x20
    6501d27a:	lea    rax,[rip+0x17f5f]        # 0x650351e0
    6501d281:	mov    rsi,rdx
    6501d284:	mov    rbx,rcx
    6501d287:	mov    QWORD PTR [rcx],rax
    6501d28a:	mov    eax,DWORD PTR [rdx+0x10]
    6501d28d:	test   eax,eax
    6501d28f:	mov    DWORD PTR [rcx+0x10],eax
    6501d292:	je     0x6501d2fd
    6501d294:	mov    QWORD PTR [rsp+0x30],rdi
    6501d299:	mov    rdi,QWORD PTR [rdx+0x8]
    6501d29d:	test   rdi,rdi
    6501d2a0:	je     0x6501d2e2
    6501d2a2:	or     rcx,0xffffffffffffffff
    6501d2a6:	xor    eax,eax
    6501d2a8:	repnz scas al,BYTE PTR es:[rdi]
    6501d2aa:	not    rcx
    6501d2ad:	lea    rdi,[rcx-0x1]
    6501d2b1:	call   0x6501fae0
    6501d2b6:	test   rax,rax
    6501d2b9:	mov    QWORD PTR [rbx+0x8],rax
    6501d2bd:	je     0x6501d2cf
    6501d2bf:	mov    r8,QWORD PTR [rsi+0x8]
    6501d2c3:	lea    rdx,[rdi+0x1]
    6501d2c7:	mov    rcx,rax
    6501d2ca:	call   0x650201b0
    6501d2cf:	mov    rax,rbx
    6501d2d2:	mov    rdi,QWORD PTR [rsp+0x30]
    6501d2d7:	mov    rbx,QWORD PTR [rsp+0x38]
    6501d2dc:	add    rsp,0x20
    6501d2e0:	pop    rsi
    6501d2e1:	ret    
    6501d2e2:	mov    rdi,QWORD PTR [rsp+0x30]
    6501d2e7:	mov    QWORD PTR [rcx+0x8],0x0
    6501d2ef:	mov    rax,rbx
    6501d2f2:	mov    rbx,QWORD PTR [rsp+0x38]
    6501d2f7:	add    rsp,0x20
    6501d2fb:	pop    rsi
    6501d2fc:	ret    
    6501d2fd:	mov    rax,QWORD PTR [rdx+0x8]
    6501d301:	mov    rbx,QWORD PTR [rsp+0x38]
    6501d306:	mov    QWORD PTR [rcx+0x8],rax
    6501d30a:	mov    rax,rcx
    6501d30d:	add    rsp,0x20
    6501d311:	pop    rsi
    6501d312:	ret    
    6501d313:	int3   
    6501d314:	int3   
    6501d315:	int3   
    6501d316:	int3   
    6501d317:	int3   
    6501d318:	int3   
    6501d319:	int3   
    6501d31a:	int3   
    6501d31b:	int3   
    6501d31c:	int3   
    6501d31d:	int3   
    6501d31e:	int3   
    6501d31f:	int3   
    6501d320:	sub    rsp,0x28
    6501d324:	cmp    DWORD PTR [rcx+0x10],0x0
    6501d328:	lea    rax,[rip+0x17eb1]        # 0x650351e0
    6501d32f:	mov    QWORD PTR [rcx],rax
    6501d332:	je     0x6501d33d
    6501d334:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d338:	call   0x6501fa90
    6501d33d:	add    rsp,0x28
    6501d341:	ret    
    6501d342:	int3   
    6501d343:	int3   
    6501d344:	int3   
    6501d345:	int3   
    6501d346:	int3   
    6501d347:	int3   
    6501d348:	int3   
    6501d349:	int3   
    6501d34a:	int3   
    6501d34b:	int3   
    6501d34c:	int3   
    6501d34d:	int3   
    6501d34e:	int3   
    6501d34f:	int3   
    6501d350:	mov    rax,QWORD PTR [rcx+0x8]
    6501d354:	test   rax,rax
    6501d357:	jne    0x6501d360
    6501d359:	lea    rax,[rip+0x17e90]        # 0x650351f0
    6501d360:	ret    0x0
    6501d363:	int3   
    6501d364:	int3   
    6501d365:	int3   
    6501d366:	int3   
    6501d367:	int3   
    6501d368:	int3   
    6501d369:	int3   
    6501d36a:	int3   
    6501d36b:	int3   
    6501d36c:	int3   
    6501d36d:	int3   
    6501d36e:	int3   
    6501d36f:	int3   
    6501d370:	mov    QWORD PTR [rsp+0x8],rbx
    6501d375:	mov    QWORD PTR [rsp+0x10],rsi
    6501d37a:	push   rdi
    6501d37b:	sub    rsp,0x20
    6501d37f:	test   rdx,rdx
    6501d382:	lea    rax,[rip+0x17e57]        # 0x650351e0
    6501d389:	mov    rsi,rdx
    6501d38c:	mov    QWORD PTR [rcx],rax
    6501d38f:	mov    rbx,rcx
    6501d392:	je     0x6501d3c5
    6501d394:	or     rcx,0xffffffffffffffff
    6501d398:	xor    eax,eax
    6501d39a:	mov    rdi,rdx
    6501d39d:	repnz scas al,BYTE PTR es:[rdi]
    6501d39f:	not    rcx
    6501d3a2:	lea    rdi,[rcx-0x1]
    6501d3a6:	call   0x6501fae0
    6501d3ab:	test   rax,rax
    6501d3ae:	mov    QWORD PTR [rbx+0x8],rax
    6501d3b2:	je     0x6501d3cd
    6501d3b4:	lea    rdx,[rdi+0x1]
    6501d3b8:	mov    r8,rsi
    6501d3bb:	mov    rcx,rax
    6501d3be:	call   0x650201b0
    6501d3c3:	jmp    0x6501d3cd
    6501d3c5:	mov    QWORD PTR [rcx+0x8],0x0
    6501d3cd:	mov    rsi,QWORD PTR [rsp+0x38]
    6501d3d2:	lea    rax,[rip+0x17e37]        # 0x65035210
    6501d3d9:	mov    DWORD PTR [rbx+0x10],0x1
    6501d3e0:	mov    QWORD PTR [rbx],rax
    6501d3e3:	mov    rax,rbx
    6501d3e6:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d3eb:	add    rsp,0x20
    6501d3ef:	pop    rdi
    6501d3f0:	ret    
    6501d3f1:	int3   
    6501d3f2:	int3   
    6501d3f3:	int3   
    6501d3f4:	int3   
    6501d3f5:	int3   
    6501d3f6:	int3   
    6501d3f7:	int3   
    6501d3f8:	int3   
    6501d3f9:	int3   
    6501d3fa:	int3   
    6501d3fb:	int3   
    6501d3fc:	int3   
    6501d3fd:	int3   
    6501d3fe:	int3   
    6501d3ff:	int3   
    6501d400:	mov    QWORD PTR [rsp+0x8],rbx
    6501d405:	mov    QWORD PTR [rsp+0x10],rsi
    6501d40a:	push   rdi
    6501d40b:	sub    rsp,0x20
    6501d40f:	lea    rax,[rip+0x17dca]        # 0x650351e0
    6501d416:	mov    rsi,rdx
    6501d419:	mov    rbx,rcx
    6501d41c:	mov    QWORD PTR [rcx],rax
    6501d41f:	mov    eax,DWORD PTR [rdx+0x10]
    6501d422:	test   eax,eax
    6501d424:	mov    DWORD PTR [rcx+0x10],eax
    6501d427:	je     0x6501d46b
    6501d429:	mov    rdi,QWORD PTR [rdx+0x8]
    6501d42d:	test   rdi,rdi
    6501d430:	je     0x6501d461
    6501d432:	or     rcx,0xffffffffffffffff
    6501d436:	xor    eax,eax
    6501d438:	repnz scas al,BYTE PTR es:[rdi]
    6501d43a:	not    rcx
    6501d43d:	lea    rdi,[rcx-0x1]
    6501d441:	call   0x6501fae0
    6501d446:	test   rax,rax
    6501d449:	mov    QWORD PTR [rbx+0x8],rax
    6501d44d:	je     0x6501d473
    6501d44f:	mov    r8,QWORD PTR [rsi+0x8]
    6501d453:	lea    rdx,[rdi+0x1]
    6501d457:	mov    rcx,rax
    6501d45a:	call   0x650201b0
    6501d45f:	jmp    0x6501d473
    6501d461:	mov    QWORD PTR [rcx+0x8],0x0
    6501d469:	jmp    0x6501d473
    6501d46b:	mov    rax,QWORD PTR [rdx+0x8]
    6501d46f:	mov    QWORD PTR [rcx+0x8],rax
    6501d473:	mov    rsi,QWORD PTR [rsp+0x38]
    6501d478:	lea    rax,[rip+0x17d91]        # 0x65035210
    6501d47f:	mov    QWORD PTR [rbx],rax
    6501d482:	mov    rax,rbx
    6501d485:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d48a:	add    rsp,0x20
    6501d48e:	pop    rdi
    6501d48f:	ret    
    6501d490:	sub    rsp,0x28
    6501d494:	cmp    DWORD PTR [rcx+0x10],0x0
    6501d498:	lea    rax,[rip+0x17d41]        # 0x650351e0
    6501d49f:	mov    QWORD PTR [rcx],rax
    6501d4a2:	je     0x6501d4ad
    6501d4a4:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d4a8:	call   0x6501fa90
    6501d4ad:	add    rsp,0x28
    6501d4b1:	ret    
    6501d4b2:	int3   
    6501d4b3:	int3   
    6501d4b4:	int3   
    6501d4b5:	int3   
    6501d4b6:	int3   
    6501d4b7:	int3   
    6501d4b8:	int3   
    6501d4b9:	int3   
    6501d4ba:	int3   
    6501d4bb:	int3   
    6501d4bc:	int3   
    6501d4bd:	int3   
    6501d4be:	int3   
    6501d4bf:	int3   
    6501d4c0:	mov    QWORD PTR [rsp+0x8],rbx
    6501d4c5:	push   rdi
    6501d4c6:	sub    rsp,0x20
    6501d4ca:	cmp    DWORD PTR [rcx+0x10],0x0
    6501d4ce:	lea    rax,[rip+0x17d0b]        # 0x650351e0
    6501d4d5:	mov    edi,edx
    6501d4d7:	mov    QWORD PTR [rcx],rax
    6501d4da:	mov    rbx,rcx
    6501d4dd:	je     0x6501d4e8
    6501d4df:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d4e3:	call   0x6501fa90
    6501d4e8:	test   dil,0x1
    6501d4ec:	je     0x6501d4f6
    6501d4ee:	mov    rcx,rbx
    6501d4f1:	call   0x6501d190
    6501d4f6:	mov    rax,rbx
    6501d4f9:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d4fe:	add    rsp,0x20
    6501d502:	pop    rdi
    6501d503:	ret    
    6501d504:	int3   
    6501d505:	int3   
    6501d506:	int3   
    6501d507:	int3   
    6501d508:	int3   
    6501d509:	int3   
    6501d50a:	int3   
    6501d50b:	int3   
    6501d50c:	int3   
    6501d50d:	int3   
    6501d50e:	int3   
    6501d50f:	int3   
    6501d510:	mov    QWORD PTR [rsp+0x8],rbx
    6501d515:	push   rdi
    6501d516:	sub    rsp,0x20
    6501d51a:	cmp    DWORD PTR [rcx+0x10],0x0
    6501d51e:	lea    rax,[rip+0x17cbb]        # 0x650351e0
    6501d525:	mov    edi,edx
    6501d527:	mov    QWORD PTR [rcx],rax
    6501d52a:	mov    rbx,rcx
    6501d52d:	je     0x6501d538
    6501d52f:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d533:	call   0x6501fa90
    6501d538:	test   dil,0x1
    6501d53c:	je     0x6501d546
    6501d53e:	mov    rcx,rbx
    6501d541:	call   0x6501d190
    6501d546:	mov    rax,rbx
    6501d549:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d54e:	add    rsp,0x20
    6501d552:	pop    rdi
    6501d553:	ret    
    6501d554:	int3   
    6501d555:	int3   
    6501d556:	int3   
    6501d557:	int3   
    6501d558:	int3   
    6501d559:	int3   
    6501d55a:	int3   
    6501d55b:	int3   
    6501d55c:	int3   
    6501d55d:	int3   
    6501d55e:	int3   
    6501d55f:	int3   
    6501d560:	int3   
    6501d561:	int3   
    6501d562:	int3   
    6501d563:	int3   
    6501d564:	int3   
    6501d565:	int3   
    6501d566:	data16 data16 xchg ax,ax
    6501d56a:	data16 data16 xchg ax,ax
    6501d56e:	xchg   ax,ax
    6501d570:	sub    rdx,rcx
    6501d573:	cmp    r8,0x8
    6501d577:	jb     0x6501d59b
    6501d579:	test   cl,0x7
    6501d57c:	je     0x6501d592
    6501d57e:	xchg   ax,ax
    6501d580:	mov    al,BYTE PTR [rcx]
    6501d582:	cmp    al,BYTE PTR [rdx+rcx*1]
    6501d585:	jne    0x6501d5b3
    6501d587:	inc    rcx
    6501d58a:	dec    r8
    6501d58d:	test   cl,0x7
    6501d590:	jne    0x6501d580
    6501d592:	mov    r9,r8
    6501d595:	shr    r9,0x3
    6501d599:	jne    0x6501d5ba
    6501d59b:	test   r8,r8
    6501d59e:	je     0x6501d5af
    6501d5a0:	mov    al,BYTE PTR [rcx]
    6501d5a2:	cmp    al,BYTE PTR [rdx+rcx*1]
    6501d5a5:	jne    0x6501d5b3
    6501d5a7:	inc    rcx
    6501d5aa:	dec    r8
    6501d5ad:	jne    0x6501d5a0
    6501d5af:	xor    rax,rax
    6501d5b2:	ret    
    6501d5b3:	sbb    eax,eax
    6501d5b5:	sbb    eax,0xffffffff
    6501d5b8:	ret    
    6501d5b9:	nop
    6501d5ba:	shr    r9,0x2
    6501d5be:	je     0x6501d5f7
    6501d5c0:	mov    rax,QWORD PTR [rcx]
    6501d5c3:	cmp    rax,QWORD PTR [rdx+rcx*1]
    6501d5c7:	jne    0x6501d624
    6501d5c9:	mov    rax,QWORD PTR [rcx+0x8]
    6501d5cd:	cmp    rax,QWORD PTR [rdx+rcx*1+0x8]
    6501d5d2:	jne    0x6501d620
    6501d5d4:	mov    rax,QWORD PTR [rcx+0x10]
    6501d5d8:	cmp    rax,QWORD PTR [rdx+rcx*1+0x10]
    6501d5dd:	jne    0x6501d61c
    6501d5df:	mov    rax,QWORD PTR [rcx+0x18]
    6501d5e3:	cmp    rax,QWORD PTR [rdx+rcx*1+0x18]
    6501d5e8:	jne    0x6501d618
    6501d5ea:	add    rcx,0x20
    6501d5ee:	dec    r9
    6501d5f1:	jne    0x6501d5c0
    6501d5f3:	and    r8,0x1f
    6501d5f7:	mov    r9,r8
    6501d5fa:	shr    r9,0x3
    6501d5fe:	je     0x6501d59b
    6501d600:	mov    rax,QWORD PTR [rcx]
    6501d603:	cmp    rax,QWORD PTR [rdx+rcx*1]
    6501d607:	jne    0x6501d624
    6501d609:	add    rcx,0x8
    6501d60d:	dec    r9
    6501d610:	jne    0x6501d600
    6501d612:	and    r8,0x7
    6501d616:	jmp    0x6501d59b
    6501d618:	add    rcx,0x8
    6501d61c:	add    rcx,0x8
    6501d620:	add    rcx,0x8
    6501d624:	mov    rcx,QWORD PTR [rcx+rdx*1]
    6501d628:	bswap  rax
    6501d62b:	bswap  rcx
    6501d62e:	cmp    rax,rcx
    6501d631:	sbb    eax,eax
    6501d633:	sbb    eax,0xffffffff
    6501d636:	ret    
    6501d637:	int3   
    6501d638:	int3   
    6501d639:	int3   
    6501d63a:	int3   
    6501d63b:	int3   
    6501d63c:	int3   
    6501d63d:	int3   
    6501d63e:	int3   
    6501d63f:	int3   
    6501d640:	mov    QWORD PTR [rsp+0x8],rbx
    6501d645:	mov    QWORD PTR [rsp+0x10],rsi
    6501d64a:	push   rdi
    6501d64b:	sub    rsp,0x30
    6501d64f:	test   r9,r9
    6501d652:	mov    rbx,r9
    6501d655:	mov    rsi,r8
    6501d658:	mov    rdi,rdx
    6501d65b:	je     0x6501d6af
    6501d65d:	test   rcx,rcx
    6501d660:	jne    0x6501d69a
    6501d662:	call   0x650202b0
    6501d667:	xor    r9d,r9d
    6501d66a:	xor    r8d,r8d
    6501d66d:	xor    edx,edx
    6501d66f:	xor    ecx,ecx
    6501d671:	mov    QWORD PTR [rsp+0x20],0x0
    6501d67a:	mov    DWORD PTR [rax],0x16
    6501d680:	call   0x6501d850
    6501d685:	mov    eax,0x16
    6501d68a:	mov    rbx,QWORD PTR [rsp+0x40]
    6501d68f:	mov    rsi,QWORD PTR [rsp+0x48]
    6501d694:	add    rsp,0x30
    6501d698:	pop    rdi
    6501d699:	ret    
    6501d69a:	test   r8,r8
    6501d69d:	je     0x6501d6c1
    6501d69f:	cmp    rdx,rbx
    6501d6a2:	jb     0x6501d6c1
    6501d6a4:	mov    r8,rbx
    6501d6a7:	mov    rdx,rsi
    6501d6aa:	call   0x6501fbc0
    6501d6af:	xor    eax,eax
    6501d6b1:	mov    rbx,QWORD PTR [rsp+0x40]
    6501d6b6:	mov    rsi,QWORD PTR [rsp+0x48]
    6501d6bb:	add    rsp,0x30
    6501d6bf:	pop    rdi
    6501d6c0:	ret    
    6501d6c1:	mov    r8,rdx
    6501d6c4:	xor    edx,edx
    6501d6c6:	call   0x6501ee30
    6501d6cb:	test   rsi,rsi
    6501d6ce:	je     0x6501d662
    6501d6d0:	cmp    rdi,rbx
    6501d6d3:	jae    0x6501d685
    6501d6d5:	call   0x650202b0
    6501d6da:	xor    r9d,r9d
    6501d6dd:	xor    r8d,r8d
    6501d6e0:	xor    edx,edx
    6501d6e2:	xor    ecx,ecx
    6501d6e4:	mov    QWORD PTR [rsp+0x20],0x0
    6501d6ed:	mov    DWORD PTR [rax],0x22
    6501d6f3:	call   0x6501d850
    6501d6f8:	mov    rbx,QWORD PTR [rsp+0x40]
    6501d6fd:	mov    rsi,QWORD PTR [rsp+0x48]
    6501d702:	mov    eax,0x22
    6501d707:	add    rsp,0x30
    6501d70b:	pop    rdi
    6501d70c:	ret    
    6501d70d:	int3   
    6501d70e:	int3   
    6501d70f:	int3   
    6501d710:	sub    rsp,0x38
    6501d714:	test   r9,r9
    6501d717:	mov    rax,r8
    6501d71a:	je     0x6501d790
    6501d71c:	test   rcx,rcx
    6501d71f:	jne    0x6501d74e
    6501d721:	call   0x650202b0
    6501d726:	xor    r9d,r9d
    6501d729:	xor    r8d,r8d
    6501d72c:	xor    edx,edx
    6501d72e:	xor    ecx,ecx
    6501d730:	mov    QWORD PTR [rsp+0x20],0x0
    6501d739:	mov    DWORD PTR [rax],0x16
    6501d73f:	call   0x6501d850
    6501d744:	mov    eax,0x16
    6501d749:	add    rsp,0x38
    6501d74d:	ret    
    6501d74e:	test   rax,rax
    6501d751:	je     0x6501d721
    6501d753:	cmp    rdx,r9
    6501d756:	jae    0x6501d785
    6501d758:	call   0x650202b0
    6501d75d:	xor    r9d,r9d
    6501d760:	xor    r8d,r8d
    6501d763:	xor    edx,edx
    6501d765:	xor    ecx,ecx
    6501d767:	mov    QWORD PTR [rsp+0x20],0x0
    6501d770:	mov    DWORD PTR [rax],0x22
    6501d776:	call   0x6501d850
    6501d77b:	mov    eax,0x22
    6501d780:	add    rsp,0x38
    6501d784:	ret    
    6501d785:	mov    r8,r9
    6501d788:	mov    rdx,rax
    6501d78b:	call   0x6501fbc0
    6501d790:	xor    eax,eax
    6501d792:	add    rsp,0x38
    6501d796:	ret    
    6501d797:	int3   
    6501d798:	int3   
    6501d799:	int3   
    6501d79a:	int3   
    6501d79b:	int3   
    6501d79c:	int3   
    6501d79d:	int3   
    6501d79e:	int3   
    6501d79f:	int3   
    6501d7a0:	mov    QWORD PTR [rip+0x26469],rcx        # 0x65043c10
    6501d7a7:	ret    
    6501d7a8:	int3   
    6501d7a9:	int3   
    6501d7aa:	int3   
    6501d7ab:	int3   
    6501d7ac:	int3   
    6501d7ad:	int3   
    6501d7ae:	int3   
    6501d7af:	int3   
    6501d7b0:	rex push rbx
    6501d7b2:	sub    rsp,0x5a0
    6501d7b9:	lea    rcx,[rsp+0xd0]
    6501d7c1:	call   QWORD PTR [rip+0x16a49]        # 0x65034210
    6501d7c7:	lea    rcx,[rsp+0x30]
    6501d7cc:	xor    edx,edx
    6501d7ce:	mov    r8d,0x98
    6501d7d4:	call   0x6501ee30
    6501d7d9:	mov    rax,QWORD PTR [rsp+0x5a8]
    6501d7e1:	mov    DWORD PTR [rsp+0x30],0xc000000d
    6501d7e9:	mov    QWORD PTR [rsp+0x40],rax
    6501d7ee:	lea    rax,[rsp+0x30]
    6501d7f3:	mov    QWORD PTR [rsp+0x20],rax
    6501d7f8:	lea    rax,[rsp+0xd0]
    6501d800:	mov    QWORD PTR [rsp+0x28],rax
    6501d805:	call   QWORD PTR [rip+0x169fd]        # 0x65034208
    6501d80b:	xor    ecx,ecx
    6501d80d:	mov    ebx,eax
    6501d80f:	call   QWORD PTR [rip+0x169eb]        # 0x65034200
    6501d815:	lea    rcx,[rsp+0x20]
    6501d81a:	call   QWORD PTR [rip+0x169d8]        # 0x650341f8
    6501d820:	test   eax,eax
    6501d822:	jne    0x6501d830
    6501d824:	test   ebx,ebx
    6501d826:	jne    0x6501d830
    6501d828:	lea    ecx,[rax+0x2]
    6501d82b:	call   0x650203a0
    6501d830:	call   QWORD PTR [rip+0x1684a]        # 0x65034080
    6501d836:	mov    edx,0xc000000d
    6501d83b:	mov    rcx,rax
    6501d83e:	call   QWORD PTR [rip+0x169ac]        # 0x650341f0
    6501d844:	add    rsp,0x5a0
    6501d84b:	pop    rbx
    6501d84c:	ret    
    6501d84d:	int3   
    6501d84e:	int3   
    6501d84f:	int3   
    6501d850:	mov    QWORD PTR [rsp+0x8],rbx
    6501d855:	mov    QWORD PTR [rsp+0x10],rbp
    6501d85a:	mov    QWORD PTR [rsp+0x18],rsi
    6501d85f:	push   rdi
    6501d860:	sub    rsp,0x5b0
    6501d867:	mov    rbp,rcx
    6501d86a:	mov    rcx,QWORD PTR [rip+0x2639f]        # 0x65043c10
    6501d871:	mov    ebx,r9d
    6501d874:	mov    rdi,r8
    6501d877:	mov    rsi,rdx
    6501d87a:	call   0x65020570
    6501d87f:	test   rax,rax
    6501d882:	je     0x6501d8a4
    6501d884:	mov    r10,QWORD PTR [rsp+0x5e0]
    6501d88c:	mov    r9d,ebx
    6501d88f:	mov    r8,rdi
    6501d892:	mov    rdx,rsi
    6501d895:	mov    rcx,rbp
    6501d898:	mov    QWORD PTR [rsp+0x20],r10
    6501d89d:	call   rax
    6501d89f:	jmp    0x6501d939
    6501d8a4:	mov    ecx,0x2
    6501d8a9:	call   0x650203a0
    6501d8ae:	lea    rcx,[rsp+0xe0]
    6501d8b6:	call   QWORD PTR [rip+0x16954]        # 0x65034210
    6501d8bc:	lea    rcx,[rsp+0x40]
    6501d8c1:	xor    edx,edx
    6501d8c3:	mov    r8d,0x98
    6501d8c9:	call   0x6501ee30
    6501d8ce:	mov    rax,QWORD PTR [rsp+0x5b8]
    6501d8d6:	mov    DWORD PTR [rsp+0x40],0xc000000d
    6501d8de:	mov    QWORD PTR [rsp+0x50],rax
    6501d8e3:	lea    rax,[rsp+0x40]
    6501d8e8:	mov    QWORD PTR [rsp+0x30],rax
    6501d8ed:	lea    rax,[rsp+0xe0]
    6501d8f5:	mov    QWORD PTR [rsp+0x38],rax
    6501d8fa:	call   QWORD PTR [rip+0x16908]        # 0x65034208
    6501d900:	xor    ecx,ecx
    6501d902:	mov    ebx,eax
    6501d904:	call   QWORD PTR [rip+0x168f6]        # 0x65034200
    6501d90a:	lea    rcx,[rsp+0x30]
    6501d90f:	call   QWORD PTR [rip+0x168e3]        # 0x650341f8
    6501d915:	test   eax,eax
    6501d917:	jne    0x6501d925
    6501d919:	test   ebx,ebx
    6501d91b:	jne    0x6501d925
    6501d91d:	lea    ecx,[rax+0x2]
    6501d920:	call   0x650203a0
    6501d925:	call   QWORD PTR [rip+0x16755]        # 0x65034080
    6501d92b:	mov    edx,0xc000000d
    6501d930:	mov    rcx,rax
    6501d933:	call   QWORD PTR [rip+0x168b7]        # 0x650341f0
    6501d939:	lea    r11,[rsp+0x5b0]
    6501d941:	mov    rbx,QWORD PTR [r11+0x10]
    6501d945:	mov    rbp,QWORD PTR [r11+0x18]
    6501d949:	mov    rsi,QWORD PTR [r11+0x20]
    6501d94d:	mov    rsp,r11
    6501d950:	pop    rdi
    6501d951:	ret    
    6501d952:	int3   
    6501d953:	int3   
    6501d954:	int3   
    6501d955:	int3   
    6501d956:	int3   
    6501d957:	int3   
    6501d958:	int3   
    6501d959:	int3   
    6501d95a:	int3   
    6501d95b:	int3   
    6501d95c:	int3   
    6501d95d:	int3   
    6501d95e:	int3   
    6501d95f:	int3   
    6501d960:	sub    rsp,0x5b8
    6501d967:	mov    rcx,QWORD PTR [rip+0x262a2]        # 0x65043c10
    6501d96e:	call   0x65020570
    6501d973:	test   rax,rax
    6501d976:	je     0x6501d995
    6501d978:	xor    r9d,r9d
    6501d97b:	xor    r8d,r8d
    6501d97e:	xor    edx,edx
    6501d980:	xor    ecx,ecx
    6501d982:	mov    QWORD PTR [rsp+0x20],0x0
    6501d98b:	call   rax
    6501d98d:	add    rsp,0x5b8
    6501d994:	ret    
    6501d995:	mov    ecx,0x2
    6501d99a:	mov    QWORD PTR [rsp+0x5b0],rbx
    6501d9a2:	call   0x650203a0
    6501d9a7:	lea    rcx,[rsp+0xe0]
    6501d9af:	call   QWORD PTR [rip+0x1685b]        # 0x65034210
    6501d9b5:	lea    rcx,[rsp+0x40]
    6501d9ba:	xor    edx,edx
    6501d9bc:	mov    r8d,0x98
    6501d9c2:	call   0x6501ee30
    6501d9c7:	mov    rax,QWORD PTR [rsp+0x5b8]
    6501d9cf:	mov    DWORD PTR [rsp+0x40],0xc000000d
    6501d9d7:	mov    QWORD PTR [rsp+0x50],rax
    6501d9dc:	lea    rax,[rsp+0x40]
    6501d9e1:	mov    QWORD PTR [rsp+0x30],rax
    6501d9e6:	lea    rax,[rsp+0xe0]
    6501d9ee:	mov    QWORD PTR [rsp+0x38],rax
    6501d9f3:	call   QWORD PTR [rip+0x1680f]        # 0x65034208
    6501d9f9:	xor    ecx,ecx
    6501d9fb:	mov    ebx,eax
    6501d9fd:	call   QWORD PTR [rip+0x167fd]        # 0x65034200
    6501da03:	lea    rcx,[rsp+0x30]
    6501da08:	call   QWORD PTR [rip+0x167ea]        # 0x650341f8
    6501da0e:	test   eax,eax
    6501da10:	jne    0x6501da1e
    6501da12:	test   ebx,ebx
    6501da14:	jne    0x6501da1e
    6501da16:	lea    ecx,[rax+0x2]
    6501da19:	call   0x650203a0
    6501da1e:	call   QWORD PTR [rip+0x1665c]        # 0x65034080
    6501da24:	mov    edx,0xc000000d
    6501da29:	mov    rcx,rax
    6501da2c:	call   QWORD PTR [rip+0x167be]        # 0x650341f0
    6501da32:	mov    rbx,QWORD PTR [rsp+0x5b0]
    6501da3a:	add    rsp,0x5b8
    6501da41:	ret    
    6501da42:	int3   
    6501da43:	int3   
    6501da44:	int3   
    6501da45:	int3   
    6501da46:	int3   
    6501da47:	int3   
    6501da48:	int3   
    6501da49:	int3   
    6501da4a:	int3   
    6501da4b:	int3   
    6501da4c:	int3   
    6501da4d:	int3   
    6501da4e:	int3   
    6501da4f:	int3   
    6501da50:	rex push rbx
    6501da52:	sub    rsp,0x40
    6501da56:	mov    rbx,rcx
    6501da59:	call   0x6501fae0
    6501da5e:	test   rax,rax
    6501da61:	jne    0x6501da7c
    6501da63:	mov    rcx,rbx
    6501da66:	call   0x65020c60
    6501da6b:	test   eax,eax
    6501da6d:	je     0x6501da82
    6501da6f:	mov    rcx,rbx
    6501da72:	call   0x6501fae0
    6501da77:	test   rax,rax
    6501da7a:	je     0x6501da63
    6501da7c:	add    rsp,0x40
    6501da80:	pop    rbx
    6501da81:	ret    
    6501da82:	mov    eax,DWORD PTR [rip+0x261a8]        # 0x65043c30
    6501da88:	lea    rbx,[rip+0x17679]        # 0x65035108
    6501da8f:	test   al,0x1
    6501da91:	jne    0x6501dac8
    6501da93:	or     eax,0x1
    6501da96:	lea    rdx,[rip+0x24653]        # 0x650420f0
    6501da9d:	lea    rcx,[rip+0x26174]        # 0x65043c18
    6501daa4:	mov    r8d,0x1
    6501daaa:	mov    DWORD PTR [rip+0x26180],eax        # 0x65043c30
    6501dab0:	call   0x6501d250
    6501dab5:	lea    rcx,[rip+0x15a04]        # 0x650334c0
    6501dabc:	mov    QWORD PTR [rip+0x26155],rbx        # 0x65043c18
    6501dac3:	call   0x6501e680
    6501dac8:	lea    rdx,[rip+0x26149]        # 0x65043c18
    6501dacf:	lea    rcx,[rsp+0x20]
    6501dad4:	call   0x6501d270
    6501dad9:	lea    rdx,[rip+0x23660]        # 0x65041140
    6501dae0:	lea    rcx,[rsp+0x20]
    6501dae5:	mov    QWORD PTR [rsp+0x20],rbx
    6501daea:	call   0x6501daf0
    6501daef:	int3   
    6501daf0:	rex push rbx
    6501daf2:	sub    rsp,0x60
    6501daf6:	mov    rax,QWORD PTR [rip+0x17723]        # 0x65035220
    6501dafd:	mov    rbx,rdx
    6501db00:	lea    rdx,[rsp+0x20]
    6501db05:	mov    QWORD PTR [rdx],rax
    6501db08:	mov    rax,QWORD PTR [rip+0x17719]        # 0x65035228
    6501db0f:	mov    QWORD PTR [rdx+0x8],rax
    6501db13:	mov    rax,QWORD PTR [rip+0x17716]        # 0x65035230
    6501db1a:	mov    QWORD PTR [rdx+0x10],rax
    6501db1e:	mov    rax,QWORD PTR [rip+0x17713]        # 0x65035238
    6501db25:	mov    QWORD PTR [rdx+0x18],rax
    6501db29:	mov    rax,QWORD PTR [rip+0x17710]        # 0x65035240
    6501db30:	mov    QWORD PTR [rdx+0x20],rax
    6501db34:	mov    rax,QWORD PTR [rip+0x1770d]        # 0x65035248
    6501db3b:	mov    QWORD PTR [rdx+0x28],rax
    6501db3f:	mov    rax,QWORD PTR [rip+0x1770a]        # 0x65035250
    6501db46:	mov    QWORD PTR [rdx+0x30],rax
    6501db4a:	mov    rax,QWORD PTR [rip+0x17707]        # 0x65035258
    6501db51:	mov    QWORD PTR [rdx+0x38],rax
    6501db55:	mov    QWORD PTR [rsp+0x48],rcx
    6501db5a:	lea    rdx,[rsp+0x70]
    6501db5f:	mov    rcx,rbx
    6501db62:	mov    QWORD PTR [rsp+0x50],rbx
    6501db67:	call   0x6502eb76
    6501db6c:	test   rbx,rbx
    6501db6f:	mov    r11,rax
    6501db72:	mov    QWORD PTR [rsp+0x70],rax
    6501db77:	mov    QWORD PTR [rsp+0x58],rax
    6501db7c:	je     0x6501db9c
    6501db7e:	test   BYTE PTR [rbx],0x8
    6501db81:	mov    ecx,0x1994000
    6501db86:	je     0x6501db8e
    6501db88:	mov    DWORD PTR [rsp+0x40],ecx
    6501db8c:	jmp    0x6501db9c
    6501db8e:	mov    eax,DWORD PTR [rsp+0x40]
    6501db92:	test   r11,r11
    6501db95:	cmove  eax,ecx
    6501db98:	mov    DWORD PTR [rsp+0x40],eax
    6501db9c:	mov    r8d,DWORD PTR [rsp+0x38]
    6501dba1:	mov    edx,DWORD PTR [rsp+0x24]
    6501dba5:	mov    ecx,DWORD PTR [rsp+0x20]
    6501dba9:	lea    r9,[rsp+0x40]
    6501dbae:	call   QWORD PTR [rip+0x16604]        # 0x650341b8
    6501dbb4:	add    rsp,0x60
    6501dbb8:	pop    rbx
    6501dbb9:	ret    
    6501dbba:	int3   
    6501dbbb:	int3   
    6501dbbc:	int3   
    6501dbbd:	int3   
    6501dbbe:	int3   
    6501dbbf:	int3   
    6501dbc0:	mov    QWORD PTR [rsp+0x8],rbx
    6501dbc5:	push   rdi
    6501dbc6:	sub    rsp,0x20
    6501dbca:	lea    rax,[rip+0x17697]        # 0x65035268
    6501dbd1:	mov    ebx,edx
    6501dbd3:	mov    rdi,rcx
    6501dbd6:	mov    QWORD PTR [rcx],rax
    6501dbd9:	call   0x65020ca0
    6501dbde:	test   bl,0x1
    6501dbe1:	je     0x6501dbeb
    6501dbe3:	mov    rcx,rdi
    6501dbe6:	call   0x6501d190
    6501dbeb:	mov    rax,rdi
    6501dbee:	mov    rbx,QWORD PTR [rsp+0x30]
    6501dbf3:	add    rsp,0x20
    6501dbf7:	pop    rdi
    6501dbf8:	ret    
    6501dbf9:	int3   
    6501dbfa:	int3   
    6501dbfb:	int3   
    6501dbfc:	int3   
    6501dbfd:	int3   
    6501dbfe:	int3   
    6501dbff:	int3   
    6501dc00:	lea    r8,[rcx+0x11]
    6501dc04:	add    rdx,0x11
    6501dc08:	sub    r8,rdx
    6501dc0b:	xchg   ax,ax
    6501dc0d:	data16 xchg ax,ax
    6501dc10:	movzx  ecx,BYTE PTR [rdx]
    6501dc13:	movzx  eax,BYTE PTR [rdx+r8*1]
    6501dc18:	sub    ecx,eax
    6501dc1a:	jne    0x6501dc24
    6501dc1c:	add    rdx,0x1
    6501dc20:	test   eax,eax
    6501dc22:	jne    0x6501dc10
    6501dc24:	test   ecx,ecx
    6501dc26:	sete   al
    6501dc29:	ret    
    6501dc2a:	int3   
    6501dc2b:	int3   
    6501dc2c:	int3   
    6501dc2d:	int3   
    6501dc2e:	int3   
    6501dc2f:	int3   
    6501dc30:	mov    QWORD PTR [rsp+0x20],rbp
    6501dc35:	push   rdi
    6501dc36:	push   r12
    6501dc38:	push   r13
    6501dc3a:	push   r14
    6501dc3c:	push   r15
    6501dc3e:	sub    rsp,0x20
    6501dc42:	movsxd rdi,DWORD PTR [r8+0xc]
    6501dc46:	mov    r15,rcx
    6501dc49:	mov    rcx,r8
    6501dc4c:	mov    r12,r9
    6501dc4f:	mov    r14,r8
    6501dc52:	mov    r13,rdx
    6501dc55:	call   0x65020dd0
    6501dc5a:	test   edi,edi
    6501dc5c:	mov    r10,QWORD PTR [r15]
    6501dc5f:	mov    QWORD PTR [r12],r10
    6501dc63:	mov    ebp,eax
    6501dc65:	je     0x6501dd29
    6501dc6b:	lea    rcx,[rdi+rdi*4]
    6501dc6f:	mov    QWORD PTR [rsp+0x58],rbx
    6501dc74:	mov    QWORD PTR [rsp+0x60],rsi
    6501dc79:	lea    rsi,[rcx*4-0x14]
    6501dc81:	data16 xchg ax,ax
    6501dc84:	data16 data16 xchg ax,ax
    6501dc88:	data16 data16 xchg ax,ax
    6501dc8c:	data16 data16 xchg ax,ax
    6501dc90:	movsxd rbx,DWORD PTR [r14+0x10]
    6501dc94:	add    rbx,QWORD PTR [r13+0x8]
    6501dc98:	add    rbx,rsi
    6501dc9b:	cmp    ebp,DWORD PTR [rbx+0x4]
    6501dc9e:	jle    0x6501dcea
    6501dca0:	cmp    ebp,DWORD PTR [rbx+0x8]
    6501dca3:	jg     0x6501dcea
    6501dca5:	mov    rcx,QWORD PTR [r13+0x0]
    6501dca9:	lea    rdx,[rsp+0x50]
    6501dcae:	xor    r8d,r8d
    6501dcb1:	call   0x6502eb7c
    6501dcb6:	movsxd r10,DWORD PTR [rbx+0x10]
    6501dcba:	mov    r8d,DWORD PTR [rbx+0xc]
    6501dcbe:	add    r10,QWORD PTR [rsp+0x50]
    6501dcc3:	mov    r9d,DWORD PTR [rax]
    6501dcc6:	xor    edx,edx
    6501dcc8:	test   r8d,r8d
    6501dccb:	je     0x6501dce5
    6501dccd:	lea    rcx,[r10+0xc]
    6501dcd1:	movsxd rax,DWORD PTR [rcx]
    6501dcd4:	cmp    rax,r9
    6501dcd7:	je     0x6501dce5
    6501dcd9:	add    edx,0x1
    6501dcdc:	add    rcx,0x14
    6501dce0:	cmp    edx,r8d
    6501dce3:	jb     0x6501dcd1
    6501dce5:	cmp    edx,r8d
    6501dce8:	jb     0x6501dcf5
    6501dcea:	sub    rsi,0x14
    6501dcee:	add    edi,0xffffffff
    6501dcf1:	jne    0x6501dc90
    6501dcf3:	jmp    0x6501dd09
    6501dcf5:	mov    rax,QWORD PTR [r15]
    6501dcf8:	lea    rcx,[rdx+rdx*4]
    6501dcfc:	movsxd rcx,DWORD PTR [r10+rcx*4+0x10]
    6501dd01:	mov    rcx,QWORD PTR [rcx+rax*1]
    6501dd05:	mov    QWORD PTR [r12],rcx
    6501dd09:	mov    rbx,QWORD PTR [rsp+0x58]
    6501dd0e:	mov    rsi,QWORD PTR [rsp+0x60]
    6501dd13:	mov    rax,r12
    6501dd16:	mov    rbp,QWORD PTR [rsp+0x68]
    6501dd1b:	add    rsp,0x20
    6501dd1f:	pop    r15
    6501dd21:	pop    r14
    6501dd23:	pop    r13
    6501dd25:	pop    r12
    6501dd27:	pop    rdi
    6501dd28:	ret    
    6501dd29:	mov    rax,r12
    6501dd2c:	mov    rbp,QWORD PTR [rsp+0x68]
    6501dd31:	add    rsp,0x20
    6501dd35:	pop    r15
    6501dd37:	pop    r14
    6501dd39:	pop    r13
    6501dd3b:	pop    r12
    6501dd3d:	pop    rdi
    6501dd3e:	ret    
    6501dd3f:	int3   
    6501dd40:	sub    rsp,0x28
    6501dd44:	call   0x650208c0
    6501dd49:	mov    rax,QWORD PTR [rax+0x128]
    6501dd50:	add    rsp,0x28
    6501dd54:	ret    
    6501dd55:	int3   
    6501dd56:	int3   
    6501dd57:	int3   
    6501dd58:	int3   
    6501dd59:	int3   
    6501dd5a:	int3   
    6501dd5b:	int3   
    6501dd5c:	int3   
    6501dd5d:	int3   
    6501dd5e:	int3   
    6501dd5f:	int3   
    6501dd60:	sub    rsp,0x28
    6501dd64:	call   0x650208c0
    6501dd69:	mov    rax,QWORD PTR [rax+0x130]
    6501dd70:	add    rsp,0x28
    6501dd74:	ret    
    6501dd75:	int3   
    6501dd76:	int3   
    6501dd77:	int3   
    6501dd78:	int3   
    6501dd79:	int3   
    6501dd7a:	int3   
    6501dd7b:	int3   
    6501dd7c:	int3   
    6501dd7d:	int3   
    6501dd7e:	int3   
    6501dd7f:	int3   
    6501dd80:	rex push rbx
    6501dd82:	sub    rsp,0x20
    6501dd86:	mov    rbx,rcx
    6501dd89:	call   0x650208c0
    6501dd8e:	mov    QWORD PTR [rax+0x128],rbx
    6501dd95:	add    rsp,0x20
    6501dd99:	pop    rbx
    6501dd9a:	ret    
    6501dd9b:	int3   
    6501dd9c:	int3   
    6501dd9d:	int3   
    6501dd9e:	int3   
    6501dd9f:	int3   
    6501dda0:	rex push rbx
    6501dda2:	sub    rsp,0x20
    6501dda6:	mov    rbx,rcx
    6501dda9:	call   0x650208c0
    6501ddae:	mov    QWORD PTR [rax+0x130],rbx
    6501ddb5:	add    rsp,0x20
    6501ddb9:	pop    rbx
    6501ddba:	ret    
    6501ddbb:	int3   
    6501ddbc:	int3   
    6501ddbd:	int3   
    6501ddbe:	int3   
    6501ddbf:	int3   
    6501ddc0:	mov    QWORD PTR [rsp+0x10],rbx
    6501ddc5:	mov    QWORD PTR [rsp+0x20],rbp
    6501ddca:	push   rsi
    6501ddcb:	push   rdi
    6501ddcc:	push   r12
    6501ddce:	push   r13
    6501ddd0:	push   r14
    6501ddd2:	sub    rsp,0x20
    6501ddd6:	movsxd rdi,DWORD PTR [r8+0xc]
    6501ddda:	mov    r14,rcx
    6501dddd:	mov    rcx,r8
    6501dde0:	mov    rbp,r8
    6501dde3:	mov    r13,rdx
    6501dde6:	call   0x65020dd0
    6501ddeb:	test   edi,edi
    6501dded:	mov    r9,QWORD PTR [r14]
    6501ddf0:	mov    r12d,eax
    6501ddf3:	mov    QWORD PTR [rsp+0x50],r9
    6501ddf8:	je     0x6501de8c
    6501ddfe:	lea    rcx,[rdi+rdi*4]
    6501de02:	lea    rsi,[rcx*4-0x14]
    6501de0a:	data16 xchg ax,ax
    6501de0d:	data16 xchg ax,ax
    6501de10:	movsxd rbx,DWORD PTR [rbp+0x10]
    6501de14:	add    rbx,QWORD PTR [r13+0x8]
    6501de18:	add    rbx,rsi
    6501de1b:	cmp    r12d,DWORD PTR [rbx+0x4]
    6501de1f:	jle    0x6501de6c
    6501de21:	cmp    r12d,DWORD PTR [rbx+0x8]
    6501de25:	jg     0x6501de6c
    6501de27:	mov    rcx,QWORD PTR [r13+0x0]
    6501de2b:	lea    rdx,[rsp+0x60]
    6501de30:	xor    r8d,r8d
    6501de33:	call   0x6502eb7c
    6501de38:	movsxd r10,DWORD PTR [rbx+0x10]
    6501de3c:	mov    r8d,DWORD PTR [rbx+0xc]
    6501de40:	add    r10,QWORD PTR [rsp+0x60]
    6501de45:	mov    r9d,DWORD PTR [rax]
    6501de48:	xor    edx,edx
    6501de4a:	test   r8d,r8d
    6501de4d:	je     0x6501de67
    6501de4f:	lea    rcx,[r10+0xc]
    6501de53:	movsxd rax,DWORD PTR [rcx]
    6501de56:	cmp    rax,r9
    6501de59:	je     0x6501de67
    6501de5b:	add    edx,0x1
    6501de5e:	add    rcx,0x14
    6501de62:	cmp    edx,r8d
    6501de65:	jb     0x6501de53
    6501de67:	cmp    edx,r8d
    6501de6a:	jb     0x6501de77
    6501de6c:	sub    rsi,0x14
    6501de70:	add    edi,0xffffffff
    6501de73:	jne    0x6501de10
    6501de75:	jmp    0x6501de8c
    6501de77:	mov    rax,QWORD PTR [r14]
    6501de7a:	lea    rcx,[rdx+rdx*4]
    6501de7e:	movsxd rcx,DWORD PTR [r10+rcx*4+0x10]
    6501de83:	mov    rcx,QWORD PTR [rcx+rax*1]
    6501de87:	mov    QWORD PTR [rsp+0x50],rcx
    6501de8c:	mov    rdx,r13
    6501de8f:	mov    rcx,rbp
    6501de92:	call   0x65020dd0
    6501de97:	movsxd rbx,DWORD PTR [rbp+0xc]
    6501de9b:	test   ebx,ebx
    6501de9d:	mov    esi,eax
    6501de9f:	je     0x6501ded8
    6501dea1:	lea    rcx,[rbx+rbx*4]
    6501dea5:	lea    rdi,[rcx*4-0x14]
    6501dead:	data16 xchg ax,ax
    6501deb0:	call   0x650208c0
    6501deb5:	movsxd rcx,DWORD PTR [rbp+0x10]
    6501deb9:	mov    rdx,QWORD PTR [rax+0x128]
    6501dec0:	add    rdx,rcx
    6501dec3:	cmp    esi,DWORD PTR [rdx+rdi*1+0x4]
    6501dec7:	jle    0x6501decf
    6501dec9:	cmp    esi,DWORD PTR [rdx+rdi*1+0x8]
    6501decd:	jle    0x6501df03
    6501decf:	sub    rdi,0x14
    6501ded3:	add    ebx,0xffffffff
    6501ded6:	jne    0x6501deb0
    6501ded8:	or     r9d,0xffffffff
    6501dedc:	lea    rcx,[rsp+0x50]
    6501dee1:	mov    r8,rbp
    6501dee4:	mov    rdx,r13
    6501dee7:	call   0x65021020
    6501deec:	mov    rbx,QWORD PTR [rsp+0x58]
    6501def1:	mov    rbp,QWORD PTR [rsp+0x68]
    6501def6:	add    rsp,0x20
    6501defa:	pop    r14
    6501defc:	pop    r13
    6501defe:	pop    r12
    6501df00:	pop    rdi
    6501df01:	pop    rsi
    6501df02:	ret    
    6501df03:	mov    r9d,DWORD PTR [rdx+rdi*1+0x4]
    6501df08:	jmp    0x6501dedc
    6501df0a:	int3   
    6501df0b:	int3   
    6501df0c:	int3   
    6501df0d:	int3   
    6501df0e:	int3   
    6501df0f:	int3   
    6501df10:	mov    QWORD PTR [rsp+0x10],rbx
    6501df15:	mov    QWORD PTR [rsp+0x18],rsi
    6501df1a:	push   rdi
    6501df1b:	sub    rsp,0x40
    6501df1f:	mov    rbx,r9
    6501df22:	mov    rdi,r8
    6501df25:	mov    rsi,rcx
    6501df28:	mov    QWORD PTR [rsp+0x50],rdx
    6501df2d:	call   0x650208c0
    6501df32:	mov    rdx,QWORD PTR [rbx+0x8]
    6501df36:	mov    QWORD PTR [rax+0x128],rdx
    6501df3d:	call   0x650208c0
    6501df42:	mov    rdx,QWORD PTR [rsi+0x38]
    6501df46:	mov    QWORD PTR [rax+0x130],rdx
    6501df4d:	call   0x650208c0
    6501df52:	mov    rdx,QWORD PTR [rbx+0x38]
    6501df56:	mov    r8d,DWORD PTR [rdx]
    6501df59:	lea    rdx,[rsp+0x50]
    6501df5e:	mov    r9,rbx
    6501df61:	add    r8,QWORD PTR [rax+0x128]
    6501df68:	xor    eax,eax
    6501df6a:	mov    rcx,rsi
    6501df6d:	mov    DWORD PTR [rsp+0x38],eax
    6501df71:	mov    QWORD PTR [rsp+0x30],rax
    6501df76:	mov    DWORD PTR [rsp+0x28],eax
    6501df7a:	mov    QWORD PTR [rsp+0x20],r8
    6501df7f:	mov    r8,rdi
    6501df82:	call   0x65022520
    6501df87:	mov    rbx,QWORD PTR [rsp+0x58]
    6501df8c:	mov    rsi,QWORD PTR [rsp+0x60]
    6501df91:	add    rsp,0x40
    6501df95:	pop    rdi
    6501df96:	ret    
    6501df97:	int3   
    6501df98:	int3   
    6501df99:	int3   
    6501df9a:	int3   
    6501df9b:	int3   
    6501df9c:	int3   
    6501df9d:	int3   
    6501df9e:	int3   
    6501df9f:	int3   
    6501dfa0:	mov    QWORD PTR [rsp+0x8],rbx
    6501dfa5:	mov    QWORD PTR [rsp+0x10],rbp
    6501dfaa:	mov    QWORD PTR [rsp+0x18],rsi
    6501dfaf:	push   rdi
    6501dfb0:	sub    rsp,0x40
    6501dfb4:	mov    rsi,r9
    6501dfb7:	mov    rbp,r8
    6501dfba:	mov    rbx,rdx
    6501dfbd:	mov    rdi,rcx
    6501dfc0:	call   0x650208c0
    6501dfc5:	mov    QWORD PTR [rax+0x138],rbx
    6501dfcc:	mov    rbx,QWORD PTR [rdi]
    6501dfcf:	call   0x650208c0
    6501dfd4:	mov    rdx,QWORD PTR [rbx+0x38]
    6501dfd8:	mov    rcx,QWORD PTR [rsp+0x78]
    6501dfdd:	mov    r9,QWORD PTR [rsp+0x70]
    6501dfe2:	mov    DWORD PTR [rsp+0x38],0x1
    6501dfea:	mov    QWORD PTR [rax+0x130],rdx
    6501dff1:	xor    ebx,ebx
    6501dff3:	mov    QWORD PTR [rsp+0x30],rbx
    6501dff8:	mov    DWORD PTR [rsp+0x28],ebx
    6501dffc:	mov    QWORD PTR [rsp+0x20],rcx
    6501e001:	mov    rcx,QWORD PTR [rdi]
    6501e004:	mov    r8,rsi
    6501e007:	mov    rdx,rbp
    6501e00a:	call   0x65022520
    6501e00f:	call   0x650208c0
    6501e014:	mov    rcx,QWORD PTR [rsp+0x80]
    6501e01c:	mov    rbp,QWORD PTR [rsp+0x58]
    6501e021:	mov    rsi,QWORD PTR [rsp+0x60]
    6501e026:	mov    QWORD PTR [rax+0x138],rbx
    6501e02d:	lea    eax,[rbx+0x1]
    6501e030:	mov    rbx,QWORD PTR [rsp+0x50]
    6501e035:	mov    DWORD PTR [rcx],0x1
    6501e03b:	add    rsp,0x40
    6501e03f:	pop    rdi
    6501e040:	ret    
    6501e041:	int3   
    6501e042:	int3   
    6501e043:	int3   
    6501e044:	int3   
    6501e045:	int3   
    6501e046:	int3   
    6501e047:	int3   
    6501e048:	int3   
    6501e049:	int3   
    6501e04a:	int3   
    6501e04b:	int3   
    6501e04c:	int3   
    6501e04d:	int3   
    6501e04e:	int3   
    6501e04f:	int3   
    6501e050:	mov    rax,rsp
    6501e053:	mov    QWORD PTR [rax+0x20],r9
    6501e057:	mov    QWORD PTR [rax+0x18],r8
    6501e05b:	mov    QWORD PTR [rax+0x10],rdx
    6501e05f:	mov    QWORD PTR [rax+0x8],rcx
    6501e063:	push   rbx
    6501e064:	sub    rsp,0x60
    6501e068:	mov    rbx,rcx
    6501e06b:	mov    DWORD PTR [rax-0x28],0x0
    6501e072:	mov    QWORD PTR [rax-0x20],rcx
    6501e076:	mov    QWORD PTR [rax-0x18],r8
    6501e07a:	call   0x650208c0
    6501e07f:	mov    r8,QWORD PTR [rax+0xe0]
    6501e086:	lea    rdx,[rsp+0x48]
    6501e08b:	mov    ecx,DWORD PTR [rbx]
    6501e08d:	call   r8
    6501e090:	mov    DWORD PTR [rsp+0x40],0x0
    6501e098:	jmp    0x6501e09a
    6501e09a:	mov    eax,DWORD PTR [rsp+0x40]
    6501e09e:	add    rsp,0x60
    6501e0a2:	pop    rbx
    6501e0a3:	ret    
    6501e0a4:	int3   
    6501e0a5:	int3   
    6501e0a6:	int3   
    6501e0a7:	int3   
    6501e0a8:	int3   
    6501e0a9:	int3   
    6501e0aa:	int3   
    6501e0ab:	int3   
    6501e0ac:	int3   
    6501e0ad:	int3   
    6501e0ae:	int3   
    6501e0af:	int3   
    6501e0b0:	rex push rbp
    6501e0b2:	sub    rsp,0x40
    6501e0b6:	mov    rbp,rdx
    6501e0b9:	lea    rax,[rbp+0x40]
    6501e0bd:	mov    QWORD PTR [rsp+0x30],rax
    6501e0c2:	mov    rax,QWORD PTR [rbp+0x90]
    6501e0c9:	mov    QWORD PTR [rsp+0x28],rax
    6501e0ce:	mov    rax,QWORD PTR [rbp+0x88]
    6501e0d5:	mov    QWORD PTR [rsp+0x20],rax
    6501e0da:	mov    r9,QWORD PTR [rbp+0x80]
    6501e0e1:	mov    r8,QWORD PTR [rbp+0x78]
    6501e0e5:	mov    rdx,QWORD PTR [rbp+0x70]
    6501e0e9:	call   0x6501dfa0
    6501e0ee:	add    rsp,0x40
    6501e0f2:	pop    rbp
    6501e0f3:	ret    
    6501e0f4:	int3   
    6501e0f5:	int3   
    6501e0f6:	int3   
    6501e0f7:	int3   
    6501e0f8:	int3   
    6501e0f9:	int3   
    6501e0fa:	int3   
    6501e0fb:	int3   
    6501e0fc:	int3   
    6501e0fd:	int3   
    6501e0fe:	int3   
    6501e0ff:	int3   
    6501e100:	mov    QWORD PTR [rsp+0x8],rbx
    6501e105:	mov    QWORD PTR [rsp+0x10],rbp
    6501e10a:	mov    QWORD PTR [rsp+0x18],rsi
    6501e10f:	push   rdi
    6501e110:	push   r12
    6501e112:	push   r13
    6501e114:	sub    rsp,0x20
    6501e118:	movsxd rsi,DWORD PTR [rdx+0xc]
    6501e11c:	mov    r13,QWORD PTR [rsp+0x70]
    6501e121:	mov    r12,rdx
    6501e124:	mov    rcx,r12
    6501e127:	mov    rdx,r13
    6501e12a:	mov    ebp,r9d
    6501e12d:	xor    edi,edi
    6501e12f:	call   0x65020dd0
    6501e134:	test   esi,esi
    6501e136:	mov    ebx,eax
    6501e138:	jne    0x6501e13f
    6501e13a:	call   0x65022770
    6501e13f:	test   esi,esi
    6501e141:	mov    r10,QWORD PTR [rsp+0x68]
    6501e146:	mov    r9,QWORD PTR [rsp+0x60]
    6501e14b:	mov    DWORD PTR [r10],0xffffffff
    6501e152:	mov    DWORD PTR [r9],0xffffffff
    6501e159:	mov    r8d,esi
    6501e15c:	je     0x6501e187
    6501e15e:	movsxd rcx,DWORD PTR [r12+0x10]
    6501e163:	lea    rax,[rsi+rsi*4]
    6501e167:	lea    rcx,[rcx+rax*4]
    6501e16b:	mov    rax,QWORD PTR [r13+0x8]
    6501e16f:	lea    rdx,[rcx+rax*1-0xc]
    6501e174:	cmp    ebx,DWORD PTR [rdx-0x4]
    6501e177:	jle    0x6501e17d
    6501e179:	cmp    ebx,DWORD PTR [rdx]
    6501e17b:	jle    0x6501e187
    6501e17d:	sub    rdx,0x14
    6501e181:	add    r8d,0xffffffff
    6501e185:	jne    0x6501e174
    6501e187:	test   r8d,r8d
    6501e18a:	je     0x6501e1a1
    6501e18c:	lea    eax,[r8-0x1]
    6501e190:	lea    rdx,[rax+rax*4]
    6501e194:	movsxd rax,DWORD PTR [r12+0x10]
    6501e199:	lea    rdi,[rax+rdx*4]
    6501e19d:	add    rdi,QWORD PTR [r13+0x8]
    6501e1a1:	xor    edx,edx
    6501e1a3:	test   esi,esi
    6501e1a5:	je     0x6501e20e
    6501e1a7:	xor    r8d,r8d
    6501e1aa:	data16 xchg ax,ax
    6501e1ad:	data16 xchg ax,ax
    6501e1b0:	movsxd rcx,DWORD PTR [r12+0x10]
    6501e1b5:	add    rcx,QWORD PTR [r13+0x8]
    6501e1b9:	add    rcx,r8
    6501e1bc:	test   rdi,rdi
    6501e1bf:	je     0x6501e1d0
    6501e1c1:	mov    eax,DWORD PTR [rdi+0x4]
    6501e1c4:	cmp    DWORD PTR [rcx],eax
    6501e1c6:	jle    0x6501e1e8
    6501e1c8:	mov    eax,DWORD PTR [rdi+0x8]
    6501e1cb:	cmp    DWORD PTR [rcx+0x4],eax
    6501e1ce:	jg     0x6501e1e8
    6501e1d0:	cmp    ebp,DWORD PTR [rcx]
    6501e1d2:	jl     0x6501e1e8
    6501e1d4:	cmp    ebp,DWORD PTR [rcx+0x4]
    6501e1d7:	jg     0x6501e1e8
    6501e1d9:	cmp    DWORD PTR [r9],0xffffffff
    6501e1dd:	jne    0x6501e1e2
    6501e1df:	mov    DWORD PTR [r9],edx
    6501e1e2:	lea    eax,[rdx+0x1]
    6501e1e5:	mov    DWORD PTR [r10],eax
    6501e1e8:	add    edx,0x1
    6501e1eb:	add    r8,0x14
    6501e1ef:	cmp    edx,esi
    6501e1f1:	jb     0x6501e1b0
    6501e1f3:	mov    eax,DWORD PTR [r9]
    6501e1f6:	cmp    eax,0xffffffff
    6501e1f9:	je     0x6501e20e
    6501e1fb:	lea    rcx,[rax+rax*4]
    6501e1ff:	movsxd rax,DWORD PTR [r12+0x10]
    6501e204:	lea    rax,[rax+rcx*4]
    6501e208:	add    rax,QWORD PTR [r13+0x8]
    6501e20c:	jmp    0x6501e21e
    6501e20e:	mov    DWORD PTR [r9],0x0
    6501e215:	xor    eax,eax
    6501e217:	mov    DWORD PTR [r10],0x0
    6501e21e:	mov    rbx,QWORD PTR [rsp+0x40]
    6501e223:	mov    rbp,QWORD PTR [rsp+0x48]
    6501e228:	mov    rsi,QWORD PTR [rsp+0x50]
    6501e22d:	add    rsp,0x20
    6501e231:	pop    r13
    6501e233:	pop    r12
    6501e235:	pop    rdi
    6501e236:	ret    
    6501e237:	int3   
    6501e238:	int3   
    6501e239:	int3   
    6501e23a:	int3   
    6501e23b:	int3   
    6501e23c:	int3   
    6501e23d:	int3   
    6501e23e:	int3   
    6501e23f:	int3   
    6501e240:	rex push rbx
    6501e242:	sub    rsp,0x20
    6501e246:	mov    rbx,rcx
    6501e249:	mov    QWORD PTR [rcx],rdx
    6501e24c:	call   0x650208c0
    6501e251:	cmp    rbx,QWORD PTR [rax+0x120]
    6501e258:	jae    0x6501e268
    6501e25a:	call   0x650208c0
    6501e25f:	mov    rcx,QWORD PTR [rax+0x120]
    6501e266:	jmp    0x6501e26a
    6501e268:	xor    ecx,ecx
    6501e26a:	mov    QWORD PTR [rbx+0x8],rcx
    6501e26e:	call   0x650208c0
    6501e273:	mov    QWORD PTR [rax+0x120],rbx
    6501e27a:	mov    rax,rbx
    6501e27d:	add    rsp,0x20
    6501e281:	pop    rbx
    6501e282:	ret    
    6501e283:	int3   
    6501e284:	int3   
    6501e285:	int3   
    6501e286:	int3   
    6501e287:	int3   
    6501e288:	int3   
    6501e289:	int3   
    6501e28a:	int3   
    6501e28b:	int3   
    6501e28c:	int3   
    6501e28d:	int3   
    6501e28e:	int3   
    6501e28f:	int3   
    6501e290:	rex push rbx
    6501e292:	sub    rsp,0x20
    6501e296:	mov    rbx,rcx
    6501e299:	call   0x650208c0
    6501e29e:	mov    rdx,QWORD PTR [rax+0x120]
    6501e2a5:	test   rdx,rdx
    6501e2a8:	je     0x6501e2be
    6501e2aa:	data16 xchg ax,ax
    6501e2ad:	data16 xchg ax,ax
    6501e2b0:	cmp    QWORD PTR [rdx],rbx
    6501e2b3:	je     0x6501e2c9
    6501e2b5:	mov    rdx,QWORD PTR [rdx+0x8]
    6501e2b9:	test   rdx,rdx
    6501e2bc:	jne    0x6501e2b0
    6501e2be:	mov    eax,0x1
    6501e2c3:	add    rsp,0x20
    6501e2c7:	pop    rbx
    6501e2c8:	ret    
    6501e2c9:	xor    eax,eax
    6501e2cb:	add    rsp,0x20
    6501e2cf:	pop    rbx
    6501e2d0:	ret    
    6501e2d1:	int3   
    6501e2d2:	int3   
    6501e2d3:	int3   
    6501e2d4:	int3   
    6501e2d5:	int3   
    6501e2d6:	int3   
    6501e2d7:	int3   
    6501e2d8:	int3   
    6501e2d9:	int3   
    6501e2da:	int3   
    6501e2db:	int3   
    6501e2dc:	int3   
    6501e2dd:	int3   
    6501e2de:	int3   
    6501e2df:	int3   
    6501e2e0:	mov    QWORD PTR [rsp+0x8],rbx
    6501e2e5:	push   rdi
    6501e2e6:	sub    rsp,0x20
    6501e2ea:	mov    rdi,rcx
    6501e2ed:	call   0x650208c0
    6501e2f2:	cmp    rdi,QWORD PTR [rax+0x120]
    6501e2f9:	je     0x6501e300
    6501e2fb:	call   0x65022770
    6501e300:	call   0x650208c0
    6501e305:	mov    rbx,QWORD PTR [rax+0x120]
    6501e30c:	test   rbx,rbx
    6501e30f:	je     0x6501e31f
    6501e311:	cmp    rdi,rbx
    6501e314:	je     0x6501e32e
    6501e316:	mov    rbx,QWORD PTR [rbx+0x8]
    6501e31a:	test   rbx,rbx
    6501e31d:	jne    0x6501e311
    6501e31f:	mov    rbx,QWORD PTR [rsp+0x30]
    6501e324:	add    rsp,0x20
    6501e328:	pop    rdi
    6501e329:	jmp    0x65022770
    6501e32e:	call   0x650208c0
    6501e333:	mov    rcx,QWORD PTR [rbx+0x8]
    6501e337:	mov    rbx,QWORD PTR [rsp+0x30]
    6501e33c:	mov    QWORD PTR [rax+0x120],rcx
    6501e343:	add    rsp,0x20
    6501e347:	pop    rdi
    6501e348:	ret    
    6501e349:	int3   
    6501e34a:	int3   
    6501e34b:	int3   
    6501e34c:	int3   
    6501e34d:	int3   
    6501e34e:	int3   
    6501e34f:	int3   
    6501e350:	mov    QWORD PTR [rsp+0x8],rbx
    6501e355:	mov    QWORD PTR [rsp+0x10],rbp
    6501e35a:	mov    QWORD PTR [rsp+0x18],rsi
    6501e35f:	push   rdi
    6501e360:	sub    rsp,0x5a0
    6501e367:	mov    rsi,rdx
    6501e36a:	mov    rbp,rcx
    6501e36d:	mov    rdi,r8
    6501e370:	lea    rcx,[rsp+0x30]
    6501e375:	lea    rdx,[rip+0x16ef4]        # 0x65035270
    6501e37c:	mov    r8d,0x98
    6501e382:	mov    rbx,r9
    6501e385:	call   0x6501fbc0
    6501e38a:	mov    rax,QWORD PTR [rsp+0x5d0]
    6501e392:	mov    rdx,QWORD PTR [rsp+0x5e8]
    6501e39a:	mov    rcx,QWORD PTR [rbp+0x0]
    6501e39e:	mov    QWORD PTR [rsp+0x60],rax
    6501e3a3:	movsxd rax,DWORD PTR [rsp+0x5d8]
    6501e3ab:	lea    r11,[rip+0x328e]        # 0x65021640
    6501e3b2:	lea    r8,[rsp+0x30]
    6501e3b7:	mov    QWORD PTR [rsp+0x68],rax
    6501e3bc:	mov    rax,QWORD PTR [rsp+0x5e0]
    6501e3c4:	xor    r9d,r9d
    6501e3c7:	mov    QWORD PTR [rsp+0x78],rax
    6501e3cc:	movzx  eax,BYTE PTR [rsp+0x5f0]
    6501e3d4:	mov    QWORD PTR [rsp+0x50],r11
    6501e3d9:	mov    QWORD PTR [rsp+0x88],rax
    6501e3e1:	mov    rax,QWORD PTR [rdx+0x40]
    6501e3e5:	mov    rdx,QWORD PTR [rdx]
    6501e3e8:	mov    QWORD PTR [rsp+0x28],rax
    6501e3ed:	lea    rax,[rsp+0xd0]
    6501e3f5:	mov    QWORD PTR [rsp+0x58],rbx
    6501e3fa:	mov    QWORD PTR [rsp+0x70],rdi
    6501e3ff:	mov    QWORD PTR [rsp+0x80],rsi
    6501e407:	mov    QWORD PTR [rsp+0x90],0x19930520
    6501e413:	mov    QWORD PTR [rsp+0x20],rax
    6501e418:	call   0x6502eb82
    6501e41d:	lea    r11,[rsp+0x5a0]
    6501e425:	mov    rbx,QWORD PTR [r11+0x10]
    6501e429:	mov    rbp,QWORD PTR [r11+0x18]
    6501e42d:	mov    rsi,QWORD PTR [r11+0x20]
    6501e431:	mov    rsp,r11
    6501e434:	pop    rdi
    6501e435:	ret    
    6501e436:	int3   
    6501e437:	int3   
    6501e438:	int3   
    6501e439:	int3   
    6501e43a:	int3   
    6501e43b:	int3   
    6501e43c:	int3   
    6501e43d:	int3   
    6501e43e:	int3   
    6501e43f:	int3   
    6501e440:	mov    QWORD PTR [rsp+0x8],rbx
    6501e445:	mov    QWORD PTR [rsp+0x10],rbp
    6501e44a:	mov    QWORD PTR [rsp+0x18],rsi
    6501e44f:	mov    QWORD PTR [rsp+0x20],rdi
    6501e454:	push   r12
    6501e456:	sub    rsp,0x20
    6501e45a:	mov    rbx,QWORD PTR [r9+0x38]
    6501e45e:	mov    rsi,rdx
    6501e461:	mov    r12,r8
    6501e464:	mov    rbp,rcx
    6501e467:	lea    r8,[rbx+0x4]
    6501e46b:	mov    rdx,r9
    6501e46e:	mov    rcx,rsi
    6501e471:	mov    rdi,r9
    6501e474:	call   0x6501e960
    6501e479:	test   BYTE PTR [rbp+0x4],0x66
    6501e47d:	mov    r11d,DWORD PTR [rbx+0x4]
    6501e481:	jne    0x6501e489
    6501e483:	and    r11d,0x1
    6501e487:	jmp    0x6501e48d
    6501e489:	and    r11d,0x2
    6501e48d:	test   r11d,r11d
    6501e490:	je     0x6501e4a5
    6501e492:	mov    r9,rdi
    6501e495:	mov    r8,r12
    6501e498:	mov    rdx,rsi
    6501e49b:	mov    rcx,rbp
    6501e49e:	call   0x6501df10
    6501e4a3:	jmp    0x6501e4aa
    6501e4a5:	mov    eax,0x1
    6501e4aa:	mov    rbx,QWORD PTR [rsp+0x30]
    6501e4af:	mov    rbp,QWORD PTR [rsp+0x38]
    6501e4b4:	mov    rsi,QWORD PTR [rsp+0x40]
    6501e4b9:	mov    rdi,QWORD PTR [rsp+0x48]
    6501e4be:	add    rsp,0x20
    6501e4c2:	pop    r12
    6501e4c4:	ret    
    6501e4c5:	int3   
    6501e4c6:	int3   
    6501e4c7:	int3   
    6501e4c8:	int3   
    6501e4c9:	int3   
    6501e4ca:	int3   
    6501e4cb:	int3   
    6501e4cc:	int3   
    6501e4cd:	int3   
    6501e4ce:	int3   
    6501e4cf:	int3   
    6501e4d0:	int3   
    6501e4d1:	int3   
    6501e4d2:	int3   
    6501e4d3:	int3   
    6501e4d4:	int3   
    6501e4d5:	int3   
    6501e4d6:	data16 data16 xchg ax,ax
    6501e4da:	data16 data16 xchg ax,ax
    6501e4de:	xchg   ax,ax
    6501e4e0:	cmp    rcx,QWORD PTR [rip+0x23c39]        # 0x65042120
    6501e4e7:	jne    0x6501e4fa
    6501e4e9:	rol    rcx,0x10
    6501e4ed:	test   cx,0xffff
    6501e4f2:	jne    0x6501e4f6
    6501e4f4:	repz ret 
    6501e4f6:	ror    rcx,0x10
    6501e4fa:	jmp    0x650227c0
    6501e4ff:	int3   
    6501e500:	rex push rbx
    6501e502:	sub    rsp,0x20
    6501e506:	mov    edx,0x8
    6501e50b:	lea    ecx,[rdx+0x18]
    6501e50e:	call   0x65022980
    6501e513:	mov    rcx,rax
    6501e516:	mov    rbx,rax
    6501e519:	call   0x650203b0
    6501e51e:	test   rbx,rbx
    6501e521:	mov    QWORD PTR [rip+0x29c68],rax        # 0x65048190
    6501e528:	mov    QWORD PTR [rip+0x29c59],rax        # 0x65048188
    6501e52f:	jne    0x6501e53a
    6501e531:	lea    eax,[rbx+0x18]
    6501e534:	add    rsp,0x20
    6501e538:	pop    rbx
    6501e539:	ret    
    6501e53a:	mov    QWORD PTR [rbx],0x0
    6501e541:	xor    eax,eax
    6501e543:	add    rsp,0x20
    6501e547:	pop    rbx
    6501e548:	ret    
    6501e549:	int3   
    6501e54a:	int3   
    6501e54b:	int3   
    6501e54c:	int3   
    6501e54d:	int3   
    6501e54e:	int3   
    6501e54f:	int3   
    6501e550:	mov    QWORD PTR [rsp+0x8],rbx
    6501e555:	mov    QWORD PTR [rsp+0x10],rsi
    6501e55a:	mov    QWORD PTR [rsp+0x18],rdi
    6501e55f:	push   r12
    6501e561:	push   r13
    6501e563:	push   r14
    6501e565:	sub    rsp,0x20
    6501e569:	mov    rbx,rcx
    6501e56c:	call   0x65022b60
    6501e571:	nop
    6501e572:	mov    rcx,QWORD PTR [rip+0x29c17]        # 0x65048190
    6501e579:	call   0x65020570
    6501e57e:	mov    r13,rax
    6501e581:	mov    rcx,QWORD PTR [rip+0x29c00]        # 0x65048188
    6501e588:	call   0x65020570
    6501e58d:	mov    rsi,rax
    6501e590:	cmp    rax,r13
    6501e593:	jb     0x6501e62f
    6501e599:	mov    rdi,rax
    6501e59c:	sub    rdi,r13
    6501e59f:	lea    r14,[rdi+0x8]
    6501e5a3:	cmp    r14,0x8
    6501e5a7:	jb     0x6501e62f
    6501e5ad:	mov    rcx,r13
    6501e5b0:	call   0x65022aa0
    6501e5b5:	mov    r12,rax
    6501e5b8:	cmp    rax,r14
    6501e5bb:	jae    0x6501e612
    6501e5bd:	mov    edx,0x1000
    6501e5c2:	cmp    rax,rdx
    6501e5c5:	cmovb  rdx,rax
    6501e5c9:	add    rdx,rax
    6501e5cc:	cmp    rdx,rax
    6501e5cf:	jb     0x6501e5de
    6501e5d1:	mov    rcx,r13
    6501e5d4:	call   0x65022a10
    6501e5d9:	test   rax,rax
    6501e5dc:	jne    0x6501e5f5
    6501e5de:	lea    rdx,[r12+0x20]
    6501e5e3:	cmp    rdx,r12
    6501e5e6:	jb     0x6501e60e
    6501e5e8:	mov    rcx,r13
    6501e5eb:	call   0x65022a10
    6501e5f0:	test   rax,rax
    6501e5f3:	je     0x6501e60e
    6501e5f5:	sar    rdi,0x3
    6501e5f9:	lea    rsi,[rax+rdi*8]
    6501e5fd:	mov    rcx,rax
    6501e600:	call   0x650203b0
    6501e605:	mov    QWORD PTR [rip+0x29b84],rax        # 0x65048190
    6501e60c:	jmp    0x6501e612
    6501e60e:	xor    ebx,ebx
    6501e610:	jmp    0x6501e631
    6501e612:	mov    rcx,rbx
    6501e615:	call   0x650203b0
    6501e61a:	mov    QWORD PTR [rsi],rax
    6501e61d:	lea    rcx,[rsi+0x8]
    6501e621:	call   0x650203b0
    6501e626:	mov    QWORD PTR [rip+0x29b5b],rax        # 0x65048188
    6501e62d:	jmp    0x6501e631
    6501e62f:	xor    ebx,ebx
    6501e631:	call   0x65022b70
    6501e636:	mov    rax,rbx
    6501e639:	mov    rbx,QWORD PTR [rsp+0x40]
    6501e63e:	mov    rsi,QWORD PTR [rsp+0x48]
    6501e643:	mov    rdi,QWORD PTR [rsp+0x50]
    6501e648:	add    rsp,0x20
    6501e64c:	pop    r14
    6501e64e:	pop    r13
    6501e650:	pop    r12
    6501e652:	ret    
    6501e653:	int3   
    6501e654:	int3   
    6501e655:	int3   
    6501e656:	int3   
    6501e657:	int3   
    6501e658:	int3   
    6501e659:	int3   
    6501e65a:	int3   
    6501e65b:	int3   
    6501e65c:	int3   
    6501e65d:	int3   
    6501e65e:	int3   
    6501e65f:	int3   
    6501e660:	rex push rbp
    6501e662:	sub    rsp,0x20
    6501e666:	mov    rbp,rdx
    6501e669:	call   0x65022b70
    6501e66e:	add    rsp,0x20
    6501e672:	pop    rbp
    6501e673:	ret    
    6501e674:	int3   
    6501e675:	int3   
    6501e676:	int3   
    6501e677:	int3   
    6501e678:	int3   
    6501e679:	int3   
    6501e67a:	int3   
    6501e67b:	int3   
    6501e67c:	int3   
    6501e67d:	int3   
    6501e67e:	int3   
    6501e67f:	int3   
    6501e680:	sub    rsp,0x28
    6501e684:	call   0x6501e550
    6501e689:	neg    rax
    6501e68c:	sbb    eax,eax
    6501e68e:	neg    eax
    6501e690:	sub    eax,0x1
    6501e693:	add    rsp,0x28
    6501e697:	ret    
    6501e698:	int3   
    6501e699:	int3   
    6501e69a:	int3   
    6501e69b:	int3   
    6501e69c:	int3   
    6501e69d:	int3   
    6501e69e:	int3   
    6501e69f:	int3   
    6501e6a0:	cmp    WORD PTR [rdx],0x0
    6501e6a4:	mov    r10,rdx
    6501e6a7:	mov    r9,rcx
    6501e6aa:	jne    0x6501e6b0
    6501e6ac:	mov    rax,rcx
    6501e6af:	ret    
    6501e6b0:	movzx  eax,WORD PTR [rcx]
    6501e6b3:	test   ax,ax
    6501e6b6:	je     0x6501e700
    6501e6b8:	mov    r8,rcx
    6501e6bb:	sub    r8,rdx
    6501e6be:	xchg   ax,ax
    6501e6c0:	test   ax,ax
    6501e6c3:	mov    rdx,r10
    6501e6c6:	je     0x6501e6e8
    6501e6c8:	movzx  eax,WORD PTR [rdx]
    6501e6cb:	test   ax,ax
    6501e6ce:	je     0x6501e703
    6501e6d0:	movzx  ecx,WORD PTR [r8+rdx*1]
    6501e6d5:	movzx  eax,ax
    6501e6d8:	cmp    ecx,eax
    6501e6da:	jne    0x6501e6e8
    6501e6dc:	add    rdx,0x2
    6501e6e0:	cmp    WORD PTR [r8+rdx*1],0x0
    6501e6e6:	jne    0x6501e6c8
    6501e6e8:	cmp    WORD PTR [rdx],0x0
    6501e6ec:	je     0x6501e703
    6501e6ee:	mov    ax,WORD PTR [r9+0x2]
    6501e6f3:	add    r9,0x2
    6501e6f7:	add    r8,0x2
    6501e6fb:	test   ax,ax
    6501e6fe:	jne    0x6501e6c0
    6501e700:	xor    eax,eax
    6501e702:	ret    
    6501e703:	mov    rax,r9
    6501e706:	ret    
    6501e707:	int3   
    6501e708:	int3   
    6501e709:	int3   
    6501e70a:	int3   
    6501e70b:	int3   
    6501e70c:	int3   
    6501e70d:	int3   
    6501e70e:	int3   
    6501e70f:	int3   
    6501e710:	sub    rsp,0x68
    6501e714:	test   rcx,rcx
    6501e717:	jne    0x6501e742
    6501e719:	call   0x650202b0
    6501e71e:	xor    r9d,r9d
    6501e721:	xor    r8d,r8d
    6501e724:	mov    DWORD PTR [rax],0x16
    6501e72a:	xor    eax,eax
    6501e72c:	xor    edx,edx
    6501e72e:	xor    ecx,ecx
    6501e730:	mov    QWORD PTR [rsp+0x20],rax
    6501e735:	call   0x6501d850
    6501e73a:	or     eax,0xffffffff
    6501e73d:	add    rsp,0x68
    6501e741:	ret    
    6501e742:	xor    eax,eax
    6501e744:	mov    r9,rdx
    6501e747:	mov    rdx,rcx
    6501e74a:	lea    rcx,[rsp+0x30]
    6501e74f:	xor    r8d,r8d
    6501e752:	mov    DWORD PTR [rsp+0x38],0x7fffffff
    6501e75a:	mov    DWORD PTR [rsp+0x48],0x42
    6501e762:	mov    QWORD PTR [rsp+0x40],rax
    6501e767:	mov    QWORD PTR [rsp+0x30],rax
    6501e76c:	call   0x65024050
    6501e771:	add    rsp,0x68
    6501e775:	ret    
    6501e776:	int3   
    6501e777:	int3   
    6501e778:	int3   
    6501e779:	int3   
    6501e77a:	int3   
    6501e77b:	int3   
    6501e77c:	int3   
    6501e77d:	int3   
    6501e77e:	int3   
    6501e77f:	int3   
    6501e780:	mov    QWORD PTR [rsp+0x10],rbx
    6501e785:	push   rsi
    6501e786:	sub    rsp,0x60
    6501e78a:	test   r9,r9
    6501e78d:	mov    r10,r9
    6501e790:	mov    rsi,r8
    6501e793:	mov    rbx,rdx
    6501e796:	mov    r11,rcx
    6501e799:	jne    0x6501e7ca
    6501e79b:	call   0x650202b0
    6501e7a0:	xor    r9d,r9d
    6501e7a3:	xor    r8d,r8d
    6501e7a6:	mov    DWORD PTR [rax],0x16
    6501e7ac:	xor    eax,eax
    6501e7ae:	xor    edx,edx
    6501e7b0:	xor    ecx,ecx
    6501e7b2:	mov    QWORD PTR [rsp+0x20],rax
    6501e7b7:	call   0x6501d850
    6501e7bc:	or     eax,0xffffffff
    6501e7bf:	mov    rbx,QWORD PTR [rsp+0x78]
    6501e7c4:	add    rsp,0x60
    6501e7c8:	pop    rsi
    6501e7c9:	ret    
    6501e7ca:	test   r8,r8
    6501e7cd:	je     0x6501e7d4
    6501e7cf:	test   rdx,rdx
    6501e7d2:	je     0x6501e79b
    6501e7d4:	cmp    r8,0x3fffffff
    6501e7db:	mov    QWORD PTR [rsp+0x70],rdi
    6501e7e0:	mov    DWORD PTR [rsp+0x48],0x42
    6501e7e8:	mov    QWORD PTR [rsp+0x40],rdx
    6501e7ed:	mov    QWORD PTR [rsp+0x30],rdx
    6501e7f2:	jbe    0x6501e7fe
    6501e7f4:	mov    DWORD PTR [rsp+0x38],0x7fffffff
    6501e7fc:	jmp    0x6501e806
    6501e7fe:	lea    eax,[r8+r8*1]
    6501e802:	mov    DWORD PTR [rsp+0x38],eax
    6501e806:	mov    r9,QWORD PTR [rsp+0x98]
    6501e80e:	mov    r8,QWORD PTR [rsp+0x90]
    6501e816:	lea    rcx,[rsp+0x30]
    6501e81b:	mov    rdx,r10
    6501e81e:	call   r11
    6501e821:	test   rbx,rbx
    6501e824:	mov    edi,eax
    6501e826:	je     0x6501e8b7
    6501e82c:	test   eax,eax
    6501e82e:	js     0x6501e8a4
    6501e830:	sub    DWORD PTR [rsp+0x38],0x1
    6501e835:	js     0x6501e84f
    6501e837:	mov    rax,QWORD PTR [rsp+0x30]
    6501e83c:	mov    BYTE PTR [rax],0x0
    6501e83f:	mov    rax,QWORD PTR [rsp+0x30]
    6501e844:	add    rax,0x1
    6501e848:	mov    QWORD PTR [rsp+0x30],rax
    6501e84d:	jmp    0x6501e865
    6501e84f:	lea    rdx,[rsp+0x30]
    6501e854:	xor    ecx,ecx
    6501e856:	call   0x65023dc0
    6501e85b:	cmp    eax,0xffffffff
    6501e85e:	je     0x6501e8a4
    6501e860:	mov    rax,QWORD PTR [rsp+0x30]
    6501e865:	sub    DWORD PTR [rsp+0x38],0x1
    6501e86a:	js     0x6501e881
    6501e86c:	mov    BYTE PTR [rax],0x0
    6501e86f:	mov    eax,edi
    6501e871:	mov    rdi,QWORD PTR [rsp+0x70]
    6501e876:	mov    rbx,QWORD PTR [rsp+0x78]
    6501e87b:	add    rsp,0x60
    6501e87f:	pop    rsi
    6501e880:	ret    
    6501e881:	lea    rdx,[rsp+0x30]
    6501e886:	xor    ecx,ecx
    6501e888:	call   0x65023dc0
    6501e88d:	cmp    eax,0xffffffff
    6501e890:	je     0x6501e8a4
    6501e892:	mov    eax,edi
    6501e894:	mov    rdi,QWORD PTR [rsp+0x70]
    6501e899:	mov    rbx,QWORD PTR [rsp+0x78]
    6501e89e:	add    rsp,0x60
    6501e8a2:	pop    rsi
    6501e8a3:	ret    
    6501e8a4:	xor    eax,eax
    6501e8a6:	mov    WORD PTR [rbx+rsi*2-0x2],0x0
    6501e8ad:	cmp    DWORD PTR [rsp+0x38],eax
    6501e8b1:	setge  al
    6501e8b4:	add    eax,0xfffffffe
    6501e8b7:	mov    rdi,QWORD PTR [rsp+0x70]
    6501e8bc:	mov    rbx,QWORD PTR [rsp+0x78]
    6501e8c1:	add    rsp,0x60
    6501e8c5:	pop    rsi
    6501e8c6:	ret    
    6501e8c7:	int3   
    6501e8c8:	int3   
    6501e8c9:	int3   
    6501e8ca:	int3   
    6501e8cb:	int3   
    6501e8cc:	int3   
    6501e8cd:	int3   
    6501e8ce:	int3   
    6501e8cf:	int3   
    6501e8d0:	rex push rbx
    6501e8d2:	sub    rsp,0x30
    6501e8d6:	test   r8,r8
    6501e8d9:	mov    rbx,rcx
    6501e8dc:	je     0x6501e926
    6501e8de:	test   rcx,rcx
    6501e8e1:	je     0x6501e926
    6501e8e3:	test   rdx,rdx
    6501e8e6:	je     0x6501e926
    6501e8e8:	mov    QWORD PTR [rsp+0x28],r9
    6501e8ed:	mov    r9,r8
    6501e8f0:	mov    r8,rdx
    6501e8f3:	mov    rdx,rcx
    6501e8f6:	lea    rcx,[rip+0x6753]        # 0x65025050
    6501e8fd:	mov    QWORD PTR [rsp+0x20],0x0
    6501e906:	call   0x6501e780
    6501e90b:	test   eax,eax
    6501e90d:	jns    0x6501e914
    6501e90f:	mov    WORD PTR [rbx],0x0
    6501e914:	cmp    eax,0xfffffffe
    6501e917:	jne    0x6501e94c
    6501e919:	call   0x650202b0
    6501e91e:	mov    DWORD PTR [rax],0x22
    6501e924:	jmp    0x6501e931
    6501e926:	call   0x650202b0
    6501e92b:	mov    DWORD PTR [rax],0x16
    6501e931:	xor    r9d,r9d
    6501e934:	xor    r8d,r8d
    6501e937:	xor    edx,edx
    6501e939:	xor    ecx,ecx
    6501e93b:	mov    QWORD PTR [rsp+0x20],0x0
    6501e944:	call   0x6501d850
    6501e949:	or     eax,0xffffffff
    6501e94c:	add    rsp,0x30
    6501e950:	pop    rbx
    6501e951:	ret    
    6501e952:	int3   
    6501e953:	int3   
    6501e954:	int3   
    6501e955:	int3   
    6501e956:	int3   
    6501e957:	int3   
    6501e958:	int3   
    6501e959:	int3   
    6501e95a:	int3   
    6501e95b:	int3   
    6501e95c:	int3   
    6501e95d:	int3   
    6501e95e:	int3   
    6501e95f:	int3   
    6501e960:	rex push rbx
    6501e962:	sub    rsp,0x20
    6501e966:	mov    eax,DWORD PTR [r8]
    6501e969:	mov    rbx,rdx
    6501e96c:	mov    r9,rcx
    6501e96f:	mov    r11d,eax
    6501e972:	mov    r10,rcx
    6501e975:	and    r11d,0xfffffff8
    6501e979:	test   al,0x4
    6501e97b:	je     0x6501e990
    6501e97d:	mov    eax,DWORD PTR [r8+0x8]
    6501e981:	movsxd r10,DWORD PTR [r8+0x4]
    6501e985:	neg    eax
    6501e987:	add    r10,rcx
    6501e98a:	movsxd rcx,eax
    6501e98d:	and    r10,rcx
    6501e990:	movsxd rax,r11d
    6501e993:	mov    rdx,QWORD PTR [rax+r10*1]
    6501e997:	mov    rax,QWORD PTR [rbx+0x10]
    6501e99b:	mov    ecx,DWORD PTR [rax+0x8]
    6501e99e:	add    rcx,QWORD PTR [rbx+0x8]
    6501e9a2:	movzx  eax,BYTE PTR [rcx+0x3]
    6501e9a6:	test   al,0xf
    6501e9a8:	je     0x6501e9b5
    6501e9aa:	movzx  eax,al
    6501e9ad:	and    eax,0xfffffff0
    6501e9b0:	cdqe   
    6501e9b2:	add    r9,rax
    6501e9b5:	xor    r9,rdx
    6501e9b8:	mov    rcx,r9
    6501e9bb:	add    rsp,0x20
    6501e9bf:	pop    rbx
    6501e9c0:	jmp    0x6501e4e0
    6501e9c5:	int3   
    6501e9c6:	int3   
    6501e9c7:	int3   
    6501e9c8:	int3   
    6501e9c9:	int3   
    6501e9ca:	int3   
    6501e9cb:	int3   
    6501e9cc:	int3   
    6501e9cd:	int3   
    6501e9ce:	int3   
    6501e9cf:	int3   
    6501e9d0:	sub    rsp,0x28
    6501e9d4:	mov    rcx,QWORD PTR [r9+0x38]
    6501e9d8:	mov    r10,r9
    6501e9db:	mov    r8,rdx
    6501e9de:	mov    eax,DWORD PTR [rcx]
    6501e9e0:	mov    r9d,eax
    6501e9e3:	and    r9d,0xfffffff8
    6501e9e7:	test   al,0x4
    6501e9e9:	je     0x6501e9fd
    6501e9eb:	mov    eax,DWORD PTR [rcx+0x8]
    6501e9ee:	movsxd r8,DWORD PTR [rcx+0x4]
    6501e9f2:	neg    eax
    6501e9f4:	add    r8,rdx
    6501e9f7:	movsxd rcx,eax
    6501e9fa:	and    r8,rcx
    6501e9fd:	movsxd rax,r9d
    6501ea00:	mov    r9,QWORD PTR [rax+r8*1]
    6501ea04:	mov    rax,QWORD PTR [r10+0x10]
    6501ea08:	mov    ecx,DWORD PTR [rax+0x8]
    6501ea0b:	add    rcx,QWORD PTR [r10+0x8]
    6501ea0f:	movzx  eax,BYTE PTR [rcx+0x3]
    6501ea13:	test   al,0xf
    6501ea15:	je     0x6501ea22
    6501ea17:	movzx  eax,al
    6501ea1a:	and    eax,0xfffffff0
    6501ea1d:	cdqe   
    6501ea1f:	add    rdx,rax
    6501ea22:	xor    rdx,r9
    6501ea25:	mov    rcx,rdx
    6501ea28:	call   0x6501e4e0
    6501ea2d:	mov    eax,0x1
    6501ea32:	add    rsp,0x28
    6501ea36:	ret    
    6501ea37:	int3   
    6501ea38:	int3   
    6501ea39:	int3   
    6501ea3a:	int3   
    6501ea3b:	int3   
    6501ea3c:	int3   
    6501ea3d:	int3   
    6501ea3e:	int3   
    6501ea3f:	int3   
    6501ea40:	sub    rsp,0x38
    6501ea44:	test   rcx,rcx
    6501ea47:	mov    r9,rcx
    6501ea4a:	je     0x6501ea5a
    6501ea4c:	test   rdx,rdx
    6501ea4f:	je     0x6501ea5a
    6501ea51:	test   r8,r8
    6501ea54:	jne    0x6501ea90
    6501ea56:	mov    WORD PTR [rcx],r8w
    6501ea5a:	call   0x650202b0
    6501ea5f:	xor    r9d,r9d
    6501ea62:	xor    r8d,r8d
    6501ea65:	xor    edx,edx
    6501ea67:	xor    ecx,ecx
    6501ea69:	mov    QWORD PTR [rsp+0x20],0x0
    6501ea72:	mov    DWORD PTR [rax],0x16
    6501ea78:	call   0x6501d850
    6501ea7d:	mov    eax,0x16
    6501ea82:	add    rsp,0x38
    6501ea86:	ret    
    6501ea87:	data16 xchg ax,ax
    6501ea8a:	data16 xchg ax,ax
    6501ea8d:	data16 xchg ax,ax
    6501ea90:	movzx  eax,WORD PTR [r8]
    6501ea94:	add    rcx,0x2
    6501ea98:	add    r8,0x2
    6501ea9c:	test   ax,ax
    6501ea9f:	mov    WORD PTR [rcx-0x2],ax
    6501eaa3:	je     0x6501eaab
    6501eaa5:	sub    rdx,0x1
    6501eaa9:	jne    0x6501ea90
    6501eaab:	test   rdx,rdx
    6501eaae:	jne    0x6501eae1
    6501eab0:	mov    WORD PTR [r9],dx
    6501eab4:	call   0x650202b0
    6501eab9:	xor    r9d,r9d
    6501eabc:	xor    r8d,r8d
    6501eabf:	xor    edx,edx
    6501eac1:	xor    ecx,ecx
    6501eac3:	mov    DWORD PTR [rax],0x22
    6501eac9:	mov    QWORD PTR [rsp+0x20],0x0
    6501ead2:	call   0x6501d850
    6501ead7:	mov    eax,0x22
    6501eadc:	add    rsp,0x38
    6501eae0:	ret    
    6501eae1:	xor    eax,eax
    6501eae3:	add    rsp,0x38
    6501eae7:	ret    
    6501eae8:	int3   
    6501eae9:	int3   
    6501eaea:	int3   
    6501eaeb:	int3   
    6501eaec:	int3   
    6501eaed:	int3   
    6501eaee:	int3   
    6501eaef:	int3   
    6501eaf0:	rex push rbp
    6501eaf2:	push   r12
    6501eaf4:	push   r13
    6501eaf6:	sub    rsp,0x50
    6501eafa:	lea    rbp,[rsp+0x40]
    6501eaff:	mov    QWORD PTR [rbp+0x30],rbx
    6501eb03:	mov    QWORD PTR [rbp+0x38],rsi
    6501eb07:	mov    QWORD PTR [rbp+0x40],rdi
    6501eb0b:	mov    rax,QWORD PTR [rip+0x2360e]        # 0x65042120
    6501eb12:	xor    rax,rbp
    6501eb15:	mov    QWORD PTR [rbp+0x0],rax
    6501eb19:	test   rcx,rcx
    6501eb1c:	mov    r12,r8
    6501eb1f:	mov    rsi,rdx
    6501eb22:	mov    rbx,rcx
    6501eb25:	je     0x6501eb36
    6501eb27:	call   0x65026520
    6501eb2c:	cmp    rax,rsi
    6501eb2f:	jb     0x6501eb5f
    6501eb31:	mov    WORD PTR [rbx],0x0
    6501eb36:	call   0x650202b0
    6501eb3b:	xor    edi,edi
    6501eb3d:	xor    r9d,r9d
    6501eb40:	xor    r8d,r8d
    6501eb43:	xor    edx,edx
    6501eb45:	xor    ecx,ecx
    6501eb47:	mov    DWORD PTR [rax],0x16
    6501eb4d:	mov    QWORD PTR [rsp+0x20],rdi
    6501eb52:	call   0x6501d850
    6501eb57:	lea    eax,[rdi+0x16]
    6501eb5a:	jmp    0x6501ed06
    6501eb5f:	mov    rax,QWORD PTR [r12]
    6501eb63:	mov    edx,DWORD PTR [rax+0x14]
    6501eb66:	test   edx,edx
    6501eb68:	jne    0x6501eb97
    6501eb6a:	cmp    WORD PTR [rbx],dx
    6501eb6d:	je     0x6501eb90
    6501eb6f:	nop
    6501eb70:	movzx  eax,WORD PTR [rbx]
    6501eb73:	cmp    ax,0x41
    6501eb77:	jb     0x6501eb86
    6501eb79:	cmp    ax,0x5a
    6501eb7d:	ja     0x6501eb86
    6501eb7f:	add    ax,0x20
    6501eb83:	mov    WORD PTR [rbx],ax
    6501eb86:	add    rbx,0x2
    6501eb8a:	cmp    WORD PTR [rbx],0x0
    6501eb8e:	jne    0x6501eb70
    6501eb90:	xor    eax,eax
    6501eb92:	jmp    0x6501ed06
    6501eb97:	mov    eax,DWORD PTR [rax+0x4]
    6501eb9a:	xor    edi,edi
    6501eb9c:	mov    r9,rbx
    6501eb9f:	mov    DWORD PTR [rsp+0x38],eax
    6501eba3:	mov    DWORD PTR [rsp+0x30],edi
    6501eba7:	mov    r8d,0x100
    6501ebad:	mov    rcx,r12
    6501ebb0:	mov    QWORD PTR [rsp+0x28],rdi
    6501ebb5:	mov    DWORD PTR [rsp+0x20],0xffffffff
    6501ebbd:	call   0x650263d0
    6501ebc2:	test   eax,eax
    6501ebc4:	movsxd r13,eax
    6501ebc7:	jne    0x6501ebda
    6501ebc9:	call   0x650202b0
    6501ebce:	mov    ebx,0x2a
    6501ebd3:	mov    DWORD PTR [rax],ebx
    6501ebd5:	jmp    0x6501ecff
    6501ebda:	cmp    rsi,r13
    6501ebdd:	mov    rcx,r13
    6501ebe0:	jae    0x6501ec0e
    6501ebe2:	mov    WORD PTR [rbx],di
    6501ebe5:	call   0x650202b0
    6501ebea:	xor    r9d,r9d
    6501ebed:	xor    r8d,r8d
    6501ebf0:	xor    edx,edx
    6501ebf2:	xor    ecx,ecx
    6501ebf4:	mov    DWORD PTR [rax],0x22
    6501ebfa:	mov    QWORD PTR [rsp+0x20],rdi
    6501ebff:	call   0x6501d850
    6501ec04:	mov    eax,0x22
    6501ec09:	jmp    0x6501ed06
    6501ec0e:	test   eax,eax
    6501ec10:	jle    0x6501ecf4
    6501ec16:	xor    edx,edx
    6501ec18:	mov    rax,0xffffffffffffffe0
    6501ec1f:	div    rcx
    6501ec22:	cmp    rax,0x2
    6501ec26:	jb     0x6501ecf4
    6501ec2c:	lea    rcx,[r13+r13*1+0x10]
    6501ec31:	cmp    rcx,0x400
    6501ec38:	ja     0x6501ec6f
    6501ec3a:	lea    rax,[rcx+0xf]
    6501ec3e:	cmp    rax,rcx
    6501ec41:	ja     0x6501ec4d
    6501ec43:	movabs rax,0xffffffffffffff0
    6501ec4d:	and    rax,0xfffffffffffffff0
    6501ec51:	call   0x650330c0
    6501ec56:	sub    rsp,rax
    6501ec59:	lea    rdi,[rsp+0x40]
    6501ec5e:	test   rdi,rdi
    6501ec61:	je     0x6501ecf4
    6501ec67:	mov    DWORD PTR [rdi],0xcccc
    6501ec6d:	jmp    0x6501ec82
    6501ec6f:	call   0x6501fae0
    6501ec74:	test   rax,rax
    6501ec77:	mov    rdi,rax
    6501ec7a:	je     0x6501ec86
    6501ec7c:	mov    DWORD PTR [rax],0xdddd
    6501ec82:	add    rdi,0x10
    6501ec86:	test   rdi,rdi
    6501ec89:	je     0x6501ecf4
    6501ec8b:	mov    rcx,QWORD PTR [r12]
    6501ec8f:	mov    r9,rbx
    6501ec92:	mov    r8d,0x100
    6501ec98:	mov    eax,DWORD PTR [rcx+0x4]
    6501ec9b:	mov    edx,DWORD PTR [rcx+0x14]
    6501ec9e:	mov    rcx,r12
    6501eca1:	mov    DWORD PTR [rsp+0x38],eax
    6501eca5:	mov    DWORD PTR [rsp+0x30],r13d
    6501ecaa:	mov    QWORD PTR [rsp+0x28],rdi
    6501ecaf:	mov    DWORD PTR [rsp+0x20],0xffffffff
    6501ecb7:	call   0x650263d0
    6501ecbc:	test   eax,eax
    6501ecbe:	je     0x6501ecd2
    6501ecc0:	mov    r8,rdi
    6501ecc3:	mov    rdx,rsi
    6501ecc6:	mov    rcx,rbx
    6501ecc9:	call   0x6501ea40
    6501ecce:	mov    ebx,eax
    6501ecd0:	jmp    0x6501ecde
    6501ecd2:	call   0x650202b0
    6501ecd7:	mov    ebx,0x2a
    6501ecdc:	mov    DWORD PTR [rax],ebx
    6501ecde:	cmp    DWORD PTR [rdi-0x10],0xdddd
    6501ece5:	lea    rcx,[rdi-0x10]
    6501ece9:	jne    0x6501ecf0
    6501eceb:	call   0x6501fa90
    6501ecf0:	mov    eax,ebx
    6501ecf2:	jmp    0x6501ed06
    6501ecf4:	call   0x650202b0
    6501ecf9:	mov    DWORD PTR [rax],0xc
    6501ecff:	call   0x650202b0
    6501ed04:	mov    eax,DWORD PTR [rax]
    6501ed06:	mov    rcx,QWORD PTR [rbp+0x0]
    6501ed0a:	xor    rcx,rbp
    6501ed0d:	call   0x6501e4e0
    6501ed12:	mov    rbx,QWORD PTR [rbp+0x30]
    6501ed16:	mov    rsi,QWORD PTR [rbp+0x38]
    6501ed1a:	mov    rdi,QWORD PTR [rbp+0x40]
    6501ed1e:	lea    rsp,[rbp+0x10]
    6501ed22:	pop    r13
    6501ed24:	pop    r12
    6501ed26:	pop    rbp
    6501ed27:	ret    
    6501ed28:	int3   
    6501ed29:	int3   
    6501ed2a:	int3   
    6501ed2b:	int3   
    6501ed2c:	int3   
    6501ed2d:	int3   
    6501ed2e:	int3   
    6501ed2f:	int3   
    6501ed30:	mov    QWORD PTR [rsp+0x8],rbx
    6501ed35:	push   rdi
    6501ed36:	sub    rsp,0x40
    6501ed3a:	mov    rbx,rdx
    6501ed3d:	mov    rdi,rcx
    6501ed40:	mov    BYTE PTR [rsp+0x38],0x0
    6501ed45:	call   0x650208c0
    6501ed4a:	mov    QWORD PTR [rsp+0x30],rax
    6501ed4f:	mov    r11,rax
    6501ed52:	mov    r8,QWORD PTR [rax+0xc0]
    6501ed59:	cmp    r8,QWORD PTR [rip+0x23c40]        # 0x650429a0
    6501ed60:	mov    QWORD PTR [rsp+0x20],r8
    6501ed65:	mov    rax,QWORD PTR [rax+0xb8]
    6501ed6c:	mov    QWORD PTR [rsp+0x28],rax
    6501ed71:	je     0x6501ed97
    6501ed73:	mov    r8d,DWORD PTR [r11+0xc8]
    6501ed7a:	test   DWORD PTR [rip+0x23aa7],r8d        # 0x65042828
    6501ed81:	jne    0x6501ed97
    6501ed83:	call   0x65023d20
    6501ed88:	mov    r11,QWORD PTR [rsp+0x30]
    6501ed8d:	mov    QWORD PTR [rsp+0x20],rax
    6501ed92:	mov    rax,QWORD PTR [rsp+0x28]
    6501ed97:	cmp    rax,QWORD PTR [rip+0x23982]        # 0x65042720
    6501ed9e:	je     0x6501edbe
    6501eda0:	mov    eax,DWORD PTR [r11+0xc8]
    6501eda7:	test   DWORD PTR [rip+0x23a7b],eax        # 0x65042828
    6501edad:	jne    0x6501edbe
    6501edaf:	call   0x650231d0
    6501edb4:	mov    r11,QWORD PTR [rsp+0x30]
    6501edb9:	mov    QWORD PTR [rsp+0x28],rax
    6501edbe:	test   BYTE PTR [r11+0xc8],0x2
    6501edc6:	jne    0x6501edd5
    6501edc8:	or     DWORD PTR [r11+0xc8],0x2
    6501edd0:	mov    BYTE PTR [rsp+0x38],0x1
    6501edd5:	lea    r8,[rsp+0x20]
    6501edda:	mov    rdx,rbx
    6501eddd:	mov    rcx,rdi
    6501ede0:	call   0x6501eaf0
    6501ede5:	cmp    BYTE PTR [rsp+0x38],0x0
    6501edea:	je     0x6501edf8
    6501edec:	mov    rcx,QWORD PTR [rsp+0x30]
    6501edf1:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    6501edf8:	mov    rbx,QWORD PTR [rsp+0x50]
    6501edfd:	add    rsp,0x40
    6501ee01:	pop    rdi
    6501ee02:	ret    
    6501ee03:	int3   
    6501ee04:	int3   
    6501ee05:	int3   
    6501ee06:	int3   
    6501ee07:	int3   
    6501ee08:	int3   
    6501ee09:	int3   
    6501ee0a:	int3   
    6501ee0b:	int3   
    6501ee0c:	int3   
    6501ee0d:	int3   
    6501ee0e:	int3   
    6501ee0f:	int3   
    6501ee10:	jmp    0x6501d190
    6501ee15:	int3   
    6501ee16:	int3   
    6501ee17:	int3   
    6501ee18:	int3   
    6501ee19:	int3   
    6501ee1a:	int3   
    6501ee1b:	int3   
    6501ee1c:	int3   
    6501ee1d:	int3   
    6501ee1e:	int3   
    6501ee1f:	int3   
    6501ee20:	int3   
    6501ee21:	int3   
    6501ee22:	int3   
    6501ee23:	int3   
    6501ee24:	int3   
    6501ee25:	int3   
    6501ee26:	data16 data16 xchg ax,ax
    6501ee2a:	data16 data16 xchg ax,ax
    6501ee2e:	xchg   ax,ax
    6501ee30:	mov    rax,rcx
    6501ee33:	cmp    r8,0x8
    6501ee37:	jb     0x6501ee8c
    6501ee39:	movzx  edx,dl
    6501ee3c:	movabs r9,0x101010101010101
    6501ee46:	imul   rdx,r9
    6501ee4a:	cmp    r8,0x40
    6501ee4e:	jb     0x6501ee6e
    6501ee50:	neg    rcx
    6501ee53:	and    ecx,0x7
    6501ee56:	je     0x6501ee5e
    6501ee58:	sub    r8,rcx
    6501ee5b:	mov    QWORD PTR [rax],rdx
    6501ee5e:	add    rcx,rax
    6501ee61:	mov    r9,r8
    6501ee64:	and    r8,0x3f
    6501ee68:	shr    r9,0x6
    6501ee6c:	jne    0x6501eea7
    6501ee6e:	mov    r9,r8
    6501ee71:	and    r8,0x7
    6501ee75:	shr    r9,0x3
    6501ee79:	je     0x6501ee8c
    6501ee7b:	data16 data16 xchg ax,ax
    6501ee7f:	nop
    6501ee80:	mov    QWORD PTR [rcx],rdx
    6501ee83:	add    rcx,0x8
    6501ee87:	dec    r9
    6501ee8a:	jne    0x6501ee80
    6501ee8c:	test   r8,r8
    6501ee8f:	je     0x6501ee9b
    6501ee91:	mov    BYTE PTR [rcx],dl
    6501ee93:	inc    rcx
    6501ee96:	dec    r8
    6501ee99:	jne    0x6501ee91
    6501ee9b:	ret    
    6501ee9c:	data16 data16 xchg ax,ax
    6501eea0:	data16 data16 xchg ax,ax
    6501eea4:	data16 xchg ax,ax
    6501eea7:	cmp    r9,0x1c00
    6501eeae:	jae    0x6501eee0
    6501eeb0:	mov    QWORD PTR [rcx],rdx
    6501eeb3:	mov    QWORD PTR [rcx+0x8],rdx
    6501eeb7:	mov    QWORD PTR [rcx+0x10],rdx
    6501eebb:	add    rcx,0x40
    6501eebf:	mov    QWORD PTR [rcx-0x28],rdx
    6501eec3:	mov    QWORD PTR [rcx-0x20],rdx
    6501eec7:	dec    r9
    6501eeca:	mov    QWORD PTR [rcx-0x18],rdx
    6501eece:	mov    QWORD PTR [rcx-0x10],rdx
    6501eed2:	mov    QWORD PTR [rcx-0x8],rdx
    6501eed6:	jne    0x6501eeb0
    6501eed8:	jmp    0x6501ee6e
    6501eeda:	data16 xchg ax,ax
    6501eedd:	data16 xchg ax,ax
    6501eee0:	movnti QWORD PTR [rcx],rdx
    6501eee4:	movnti QWORD PTR [rcx+0x8],rdx
    6501eee9:	movnti QWORD PTR [rcx+0x10],rdx
    6501eeee:	add    rcx,0x40
    6501eef2:	movnti QWORD PTR [rcx-0x28],rdx
    6501eef7:	movnti QWORD PTR [rcx-0x20],rdx
    6501eefc:	dec    r9
    6501eeff:	movnti QWORD PTR [rcx-0x18],rdx
    6501ef04:	movnti QWORD PTR [rcx-0x10],rdx
    6501ef09:	movnti QWORD PTR [rcx-0x8],rdx
    6501ef0e:	jne    0x6501eee0
    6501ef10:	lock or BYTE PTR [rsp],0x0
    6501ef15:	jmp    0x6501ee6e
    6501ef1a:	int3   
    6501ef1b:	int3   
    6501ef1c:	int3   
    6501ef1d:	int3   
    6501ef1e:	int3   
    6501ef1f:	int3   
    6501ef20:	rex push rbx
    6501ef22:	sub    rsp,0x20
    6501ef26:	mov    ebx,ecx
    6501ef28:	call   0x650208c0
    6501ef2d:	mov    DWORD PTR [rax+0x1c],ebx
    6501ef30:	add    rsp,0x20
    6501ef34:	pop    rbx
    6501ef35:	ret    
    6501ef36:	int3   
    6501ef37:	int3   
    6501ef38:	int3   
    6501ef39:	int3   
    6501ef3a:	int3   
    6501ef3b:	int3   
    6501ef3c:	int3   
    6501ef3d:	int3   
    6501ef3e:	int3   
    6501ef3f:	int3   
    6501ef40:	sub    rsp,0x28
    6501ef44:	call   0x650208c0
    6501ef49:	mov    ecx,DWORD PTR [rax+0x1c]
    6501ef4c:	imul   ecx,ecx,0x343fd
    6501ef52:	add    ecx,0x269ec3
    6501ef58:	mov    DWORD PTR [rax+0x1c],ecx
    6501ef5b:	shr    ecx,0x10
    6501ef5e:	and    ecx,0x7fff
    6501ef64:	mov    eax,ecx
    6501ef66:	add    rsp,0x28
    6501ef6a:	ret    
    6501ef6b:	int3   
    6501ef6c:	int3   
    6501ef6d:	int3   
    6501ef6e:	int3   
    6501ef6f:	int3   
    6501ef70:	rex push rbx
    6501ef72:	sub    rsp,0x20
    6501ef76:	cmp    edx,0x1
    6501ef79:	mov    rbx,r8
    6501ef7c:	jne    0x6501f0d7
    6501ef82:	call   QWORD PTR [rip+0x15260]        # 0x650341e8
    6501ef88:	xor    edx,edx
    6501ef8a:	mov    r8d,0x94
    6501ef90:	mov    rcx,rax
    6501ef93:	call   QWORD PTR [rip+0x1522f]        # 0x650341c8
    6501ef99:	test   rax,rax
    6501ef9c:	mov    rbx,rax
    6501ef9f:	je     0x6501efc8
    6501efa1:	mov    rcx,rax
    6501efa4:	mov    DWORD PTR [rax],0x94
    6501efaa:	call   QWORD PTR [rip+0x15200]        # 0x650341b0
    6501efb0:	test   eax,eax
    6501efb2:	jne    0x6501efd0
    6501efb4:	call   QWORD PTR [rip+0x1522e]        # 0x650341e8
    6501efba:	mov    r8,rbx
    6501efbd:	xor    edx,edx
    6501efbf:	mov    rcx,rax
    6501efc2:	call   QWORD PTR [rip+0x15208]        # 0x650341d0
    6501efc8:	xor    eax,eax
    6501efca:	add    rsp,0x20
    6501efce:	pop    rbx
    6501efcf:	ret    
    6501efd0:	mov    QWORD PTR [rsp+0x30],rbp
    6501efd5:	mov    ebp,DWORD PTR [rbx+0x8]
    6501efd8:	mov    QWORD PTR [rsp+0x38],rsi
    6501efdd:	mov    esi,DWORD PTR [rbx+0x4]
    6501efe0:	mov    QWORD PTR [rsp+0x40],rdi
    6501efe5:	mov    edi,DWORD PTR [rbx+0xc]
    6501efe8:	mov    QWORD PTR [rsp+0x48],r12
    6501efed:	mov    r12d,DWORD PTR [rbx+0x10]
    6501eff1:	and    edi,0x7fff
    6501eff7:	call   QWORD PTR [rip+0x151eb]        # 0x650341e8
    6501effd:	mov    r8,rbx
    6501f000:	xor    edx,edx
    6501f002:	mov    rcx,rax
    6501f005:	call   QWORD PTR [rip+0x151c5]        # 0x650341d0
    6501f00b:	cmp    r12d,0x2
    6501f00f:	je     0x6501f015
    6501f011:	bts    edi,0xf
    6501f015:	mov    eax,esi
    6501f017:	mov    ecx,0x1
    6501f01c:	mov    DWORD PTR [rip+0x251d9],r12d        # 0x650441fc
    6501f023:	shl    eax,0x8
    6501f026:	mov    DWORD PTR [rip+0x251dc],esi        # 0x65044208
    6501f02c:	mov    DWORD PTR [rip+0x251da],ebp        # 0x6504420c
    6501f032:	add    eax,ebp
    6501f034:	mov    DWORD PTR [rip+0x251c6],edi        # 0x65044200
    6501f03a:	mov    DWORD PTR [rip+0x251c4],eax        # 0x65044204
    6501f040:	call   0x65026540
    6501f045:	mov    r12,QWORD PTR [rsp+0x48]
    6501f04a:	test   eax,eax
    6501f04c:	mov    rdi,QWORD PTR [rsp+0x40]
    6501f051:	mov    rsi,QWORD PTR [rsp+0x38]
    6501f056:	mov    rbp,QWORD PTR [rsp+0x30]
    6501f05b:	je     0x6501efc8
    6501f061:	call   0x65020b30
    6501f066:	test   eax,eax
    6501f068:	je     0x6501f0ca
    6501f06a:	call   0x65027010
    6501f06f:	call   QWORD PTR [rip+0x151cb]        # 0x65034240
    6501f075:	mov    QWORD PTR [rip+0x29134],rax        # 0x650481b0
    6501f07c:	call   0x65026e40
    6501f081:	mov    QWORD PTR [rip+0x24bb8],rax        # 0x65043c40
    6501f088:	call   0x650265d0
    6501f08d:	test   eax,eax
    6501f08f:	js     0x6501f0c5
    6501f091:	call   0x65026d30
    6501f096:	test   eax,eax
    6501f098:	js     0x6501f0c0
    6501f09a:	call   0x650269a0
    6501f09f:	test   eax,eax
    6501f0a1:	js     0x6501f0c0
    6501f0a3:	xor    ecx,ecx
    6501f0a5:	call   0x65022c60
    6501f0aa:	test   eax,eax
    6501f0ac:	jne    0x6501f0c0
    6501f0ae:	add    DWORD PTR [rip+0x24b83],0x1        # 0x65043c38
    6501f0b5:	mov    eax,0x1
    6501f0ba:	add    rsp,0x20
    6501f0be:	pop    rbx
    6501f0bf:	ret    
    6501f0c0:	call   0x65026910
    6501f0c5:	call   0x65020650
    6501f0ca:	call   0x650265a0
    6501f0cf:	xor    eax,eax
    6501f0d1:	add    rsp,0x20
    6501f0d5:	pop    rbx
    6501f0d6:	ret    
    6501f0d7:	test   edx,edx
    6501f0d9:	jne    0x6501f120
    6501f0db:	mov    eax,DWORD PTR [rip+0x24b57]        # 0x65043c38
    6501f0e1:	test   eax,eax
    6501f0e3:	jle    0x6501efc8
    6501f0e9:	sub    eax,0x1
    6501f0ec:	cmp    DWORD PTR [rip+0x25166],edx        # 0x65044258
    6501f0f2:	mov    DWORD PTR [rip+0x24b40],eax        # 0x65043c38
    6501f0f8:	jne    0x6501f0ff
    6501f0fa:	call   0x65022e80
    6501f0ff:	test   rbx,rbx
    6501f102:	jne    0x6501f199
    6501f108:	call   0x65026910
    6501f10d:	call   0x65020650
    6501f112:	call   0x650265a0
    6501f117:	lea    eax,[rbx+0x1]
    6501f11a:	add    rsp,0x20
    6501f11e:	pop    rbx
    6501f11f:	ret    
    6501f120:	cmp    edx,0x2
    6501f123:	jne    0x6501f18d
    6501f125:	call   0x65020640
    6501f12a:	mov    edx,0x2d8
    6501f12f:	mov    ecx,0x1
    6501f134:	call   0x65022980
    6501f139:	test   rax,rax
    6501f13c:	mov    rbx,rax
    6501f13f:	je     0x6501efc8
    6501f145:	mov    ecx,DWORD PTR [rip+0x23155]        # 0x650422a0
    6501f14b:	mov    rdx,rax
    6501f14e:	call   QWORD PTR [rip+0x150e4]        # 0x65034238
    6501f154:	test   eax,eax
    6501f156:	je     0x6501f17d
    6501f158:	xor    edx,edx
    6501f15a:	mov    rcx,rbx
    6501f15d:	call   0x650206a0
    6501f162:	call   QWORD PTR [rip+0x150c8]        # 0x65034230
    6501f168:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
    6501f170:	mov    DWORD PTR [rbx],eax
    6501f172:	mov    eax,0x1
    6501f177:	add    rsp,0x20
    6501f17b:	pop    rbx
    6501f17c:	ret    
    6501f17d:	mov    rcx,rbx
    6501f180:	call   0x6501fa90
    6501f185:	xor    eax,eax
    6501f187:	add    rsp,0x20
    6501f18b:	pop    rbx
    6501f18c:	ret    
    6501f18d:	cmp    edx,0x3
    6501f190:	jne    0x6501f199
    6501f192:	xor    ecx,ecx
    6501f194:	call   0x65020ad0
    6501f199:	mov    eax,0x1
    6501f19e:	add    rsp,0x20
    6501f1a2:	pop    rbx
    6501f1a3:	ret    
    6501f1a4:	int3   
    6501f1a5:	int3   
    6501f1a6:	int3   
    6501f1a7:	int3   
    6501f1a8:	int3   
    6501f1a9:	int3   
    6501f1aa:	int3   
    6501f1ab:	int3   
    6501f1ac:	int3   
    6501f1ad:	int3   
    6501f1ae:	int3   
    6501f1af:	int3   
    6501f1b0:	mov    QWORD PTR [rsp+0x8],rbx
    6501f1b5:	mov    QWORD PTR [rsp+0x10],rsi
    6501f1ba:	mov    QWORD PTR [rsp+0x18],rdi
    6501f1bf:	push   r12
    6501f1c1:	sub    rsp,0x30
    6501f1c5:	mov    rsi,r8
    6501f1c8:	mov    edi,edx
    6501f1ca:	mov    r12,rcx
    6501f1cd:	mov    eax,0x1
    6501f1d2:	test   edx,edx
    6501f1d4:	jne    0x6501f1e5
    6501f1d6:	cmp    DWORD PTR [rip+0x24a5c],edx        # 0x65043c38
    6501f1dc:	jne    0x6501f1e5
    6501f1de:	xor    eax,eax
    6501f1e0:	jmp    0x6501f2b4
    6501f1e5:	cmp    edx,0x1
    6501f1e8:	je     0x6501f1ef
    6501f1ea:	cmp    edx,0x2
    6501f1ed:	jne    0x6501f21f
    6501f1ef:	mov    r9,QWORD PTR [rip+0x16112]        # 0x65035308
    6501f1f6:	test   r9,r9
    6501f1f9:	je     0x6501f202
    6501f1fb:	call   r9
    6501f1fe:	mov    DWORD PTR [rsp+0x20],eax
    6501f202:	test   eax,eax
    6501f204:	je     0x6501f217
    6501f206:	mov    r8,rsi
    6501f209:	mov    edx,edi
    6501f20b:	mov    rcx,r12
    6501f20e:	call   0x6501ef70
    6501f213:	mov    DWORD PTR [rsp+0x20],eax
    6501f217:	test   eax,eax
    6501f219:	je     0x6501f2b4
    6501f21f:	mov    r8,rsi
    6501f222:	mov    edx,edi
    6501f224:	mov    rcx,r12
    6501f227:	call   0x65018310
    6501f22c:	mov    ebx,eax
    6501f22e:	mov    DWORD PTR [rsp+0x20],eax
    6501f232:	cmp    edi,0x1
    6501f235:	jne    0x6501f26c
    6501f237:	test   eax,eax
    6501f239:	jne    0x6501f26c
    6501f23b:	mov    r8,rsi
    6501f23e:	xor    edx,edx
    6501f240:	mov    rcx,r12
    6501f243:	call   0x65018310
    6501f248:	mov    r8,rsi
    6501f24b:	xor    edx,edx
    6501f24d:	mov    rcx,r12
    6501f250:	call   0x6501ef70
    6501f255:	mov    r11,QWORD PTR [rip+0x160ac]        # 0x65035308
    6501f25c:	test   r11,r11
    6501f25f:	je     0x6501f26c
    6501f261:	mov    r8,rsi
    6501f264:	xor    edx,edx
    6501f266:	mov    rcx,r12
    6501f269:	call   r11
    6501f26c:	test   edi,edi
    6501f26e:	je     0x6501f275
    6501f270:	cmp    edi,0x3
    6501f273:	jne    0x6501f2ae
    6501f275:	mov    r8,rsi
    6501f278:	mov    edx,edi
    6501f27a:	mov    rcx,r12
    6501f27d:	call   0x6501ef70
    6501f282:	test   eax,eax
    6501f284:	jne    0x6501f28e
    6501f286:	xor    ebx,ebx
    6501f288:	mov    DWORD PTR [rsp+0x20],ebx
    6501f28c:	jmp    0x6501f2ae
    6501f28e:	test   ebx,ebx
    6501f290:	je     0x6501f2ae
    6501f292:	mov    rax,QWORD PTR [rip+0x1606f]        # 0x65035308
    6501f299:	test   rax,rax
    6501f29c:	je     0x6501f2ae
    6501f29e:	mov    r8,rsi
    6501f2a1:	mov    edx,edi
    6501f2a3:	mov    rcx,r12
    6501f2a6:	call   rax
    6501f2a8:	mov    ebx,eax
    6501f2aa:	mov    DWORD PTR [rsp+0x20],eax
    6501f2ae:	mov    eax,ebx
    6501f2b0:	jmp    0x6501f2b4
    6501f2b2:	xor    eax,eax
    6501f2b4:	mov    rbx,QWORD PTR [rsp+0x40]
    6501f2b9:	mov    rsi,QWORD PTR [rsp+0x48]
    6501f2be:	mov    rdi,QWORD PTR [rsp+0x50]
    6501f2c3:	add    rsp,0x30
    6501f2c7:	pop    r12
    6501f2c9:	ret    
    6501f2ca:	int3   
    6501f2cb:	int3   
    6501f2cc:	int3   
    6501f2cd:	int3   
    6501f2ce:	int3   
    6501f2cf:	int3   
    6501f2d0:	rex push rbp
    6501f2d2:	sub    rsp,0x20
    6501f2d6:	mov    rbp,rdx
    6501f2d9:	mov    rax,QWORD PTR [rcx]
    6501f2dc:	mov    rdx,rcx
    6501f2df:	mov    ecx,DWORD PTR [rax]
    6501f2e1:	call   0x650272a0
    6501f2e6:	add    rsp,0x20
    6501f2ea:	pop    rbp
    6501f2eb:	ret    
    6501f2ec:	int3   
    6501f2ed:	int3   
    6501f2ee:	int3   
    6501f2ef:	int3   
    6501f2f0:	mov    QWORD PTR [rsp+0x8],rbx
    6501f2f5:	mov    QWORD PTR [rsp+0x10],rsi
    6501f2fa:	push   rdi
    6501f2fb:	sub    rsp,0x20
    6501f2ff:	cmp    edx,0x1
    6501f302:	mov    rdi,r8
    6501f305:	mov    ebx,edx
    6501f307:	mov    rsi,rcx
    6501f30a:	jne    0x6501f311
    6501f30c:	call   0x650272b0
    6501f311:	mov    r8,rdi
    6501f314:	mov    edx,ebx
    6501f316:	mov    rcx,rsi
    6501f319:	mov    rbx,QWORD PTR [rsp+0x30]
    6501f31e:	mov    rsi,QWORD PTR [rsp+0x38]
    6501f323:	add    rsp,0x20
    6501f327:	pop    rdi
    6501f328:	jmp    0x6501f1b0
    6501f32d:	int3   
    6501f32e:	int3   
    6501f32f:	int3   
    6501f330:	movzx  eax,WORD PTR [rcx]
    6501f333:	test   ax,ax
    6501f336:	je     0x6501f34a
    6501f338:	cmp    ax,dx
    6501f33b:	je     0x6501f34f
    6501f33d:	mov    ax,WORD PTR [rcx+0x2]
    6501f341:	add    rcx,0x2
    6501f345:	test   ax,ax
    6501f348:	jne    0x6501f338
    6501f34a:	cmp    WORD PTR [rcx],dx
    6501f34d:	jne    0x6501f353
    6501f34f:	mov    rax,rcx
    6501f352:	ret    
    6501f353:	xor    eax,eax
    6501f355:	ret    
    6501f356:	int3   
    6501f357:	int3   
    6501f358:	int3   
    6501f359:	int3   
    6501f35a:	int3   
    6501f35b:	int3   
    6501f35c:	int3   
    6501f35d:	int3   
    6501f35e:	int3   
    6501f35f:	int3   
    6501f360:	cmp    r8d,0xa
    6501f364:	mov    r11d,r8d
    6501f367:	mov    r10,rdx
    6501f36a:	mov    eax,ecx
    6501f36c:	jne    0x6501f378
    6501f36e:	test   ecx,ecx
    6501f370:	jns    0x6501f378
    6501f372:	lea    ecx,[r8-0x9]
    6501f376:	jmp    0x6501f37a
    6501f378:	xor    ecx,ecx
    6501f37a:	test   ecx,ecx
    6501f37c:	mov    r8,rdx
    6501f37f:	je     0x6501f38a
    6501f381:	mov    BYTE PTR [rdx],0x2d
    6501f384:	lea    r8,[rdx+0x1]
    6501f388:	neg    eax
    6501f38a:	mov    r9,r8
    6501f38d:	data16 xchg ax,ax
    6501f390:	xor    edx,edx
    6501f392:	div    r11d
    6501f395:	cmp    edx,0x9
    6501f398:	jbe    0x6501f39f
    6501f39a:	add    dl,0x57
    6501f39d:	jmp    0x6501f3a2
    6501f39f:	add    dl,0x30
    6501f3a2:	mov    BYTE PTR [r8],dl
    6501f3a5:	add    r8,0x1
    6501f3a9:	test   eax,eax
    6501f3ab:	jne    0x6501f390
    6501f3ad:	mov    BYTE PTR [r8],al
    6501f3b0:	sub    r8,0x1
    6501f3b4:	data16 data16 xchg ax,ax
    6501f3b8:	data16 data16 xchg ax,ax
    6501f3bc:	data16 data16 xchg ax,ax
    6501f3c0:	movzx  eax,BYTE PTR [r9]
    6501f3c4:	movzx  ecx,BYTE PTR [r8]
    6501f3c8:	add    r9,0x1
    6501f3cc:	mov    BYTE PTR [r8],al
    6501f3cf:	mov    BYTE PTR [r9-0x1],cl
    6501f3d3:	sub    r8,0x1
    6501f3d7:	cmp    r9,r8
    6501f3da:	jb     0x6501f3c0
    6501f3dc:	mov    rax,r10
    6501f3df:	ret    
    6501f3e0:	mov    QWORD PTR [rsp+0x10],rdx
    6501f3e5:	mov    QWORD PTR [rsp+0x18],r8
    6501f3ea:	mov    QWORD PTR [rsp+0x20],r9
    6501f3ef:	sub    rsp,0x68
    6501f3f3:	test   rdx,rdx
    6501f3f6:	jne    0x6501f423
    6501f3f8:	call   0x650202b0
    6501f3fd:	xor    r9d,r9d
    6501f400:	xor    r8d,r8d
    6501f403:	xor    edx,edx
    6501f405:	xor    ecx,ecx
    6501f407:	mov    QWORD PTR [rsp+0x20],0x0
    6501f410:	mov    DWORD PTR [rax],0x16
    6501f416:	call   0x6501d850
    6501f41b:	or     eax,0xffffffff
    6501f41e:	add    rsp,0x68
    6501f422:	ret    
    6501f423:	test   rcx,rcx
    6501f426:	je     0x6501f3f8
    6501f428:	mov    QWORD PTR [rsp+0x40],rcx
    6501f42d:	mov    QWORD PTR [rsp+0x30],rcx
    6501f432:	lea    r9,[rsp+0x80]
    6501f43a:	lea    rcx,[rsp+0x30]
    6501f43f:	xor    r8d,r8d
    6501f442:	mov    QWORD PTR [rsp+0x60],rbx
    6501f447:	mov    DWORD PTR [rsp+0x38],0x7fffffff
    6501f44f:	mov    DWORD PTR [rsp+0x48],0x42
    6501f457:	call   0x650274f0
    6501f45c:	sub    DWORD PTR [rsp+0x38],0x1
    6501f461:	mov    ebx,eax
    6501f463:	js     0x6501f477
    6501f465:	mov    rcx,QWORD PTR [rsp+0x30]
    6501f46a:	mov    rbx,QWORD PTR [rsp+0x60]
    6501f46f:	mov    BYTE PTR [rcx],0x0
    6501f472:	add    rsp,0x68
    6501f476:	ret    
    6501f477:	lea    rdx,[rsp+0x30]
    6501f47c:	xor    ecx,ecx
    6501f47e:	call   0x65023dc0
    6501f483:	mov    eax,ebx
    6501f485:	mov    rbx,QWORD PTR [rsp+0x60]
    6501f48a:	add    rsp,0x68
    6501f48e:	ret    
    6501f48f:	int3   
    6501f490:	mov    QWORD PTR [rsp+0x18],r8
    6501f495:	mov    QWORD PTR [rsp+0x20],r9
    6501f49a:	sub    rsp,0x38
    6501f49e:	lea    rax,[rsp+0x58]
    6501f4a3:	xor    r9d,r9d
    6501f4a6:	mov    QWORD PTR [rsp+0x20],rax
    6501f4ab:	call   0x650285d0
    6501f4b0:	add    rsp,0x38
    6501f4b4:	ret    
    6501f4b5:	int3   
    6501f4b6:	int3   
    6501f4b7:	int3   
    6501f4b8:	int3   
    6501f4b9:	int3   
    6501f4ba:	int3   
    6501f4bb:	int3   
    6501f4bc:	int3   
    6501f4bd:	int3   
    6501f4be:	int3   
    6501f4bf:	int3   
    6501f4c0:	rex push rbx
    6501f4c2:	sub    rsp,0x70
    6501f4c6:	test   rdx,rdx
    6501f4c9:	movsxd rbx,ecx
    6501f4cc:	mov    BYTE PTR [rsp+0x68],0x0
    6501f4d1:	jne    0x6501f57a
    6501f4d7:	call   0x650208c0
    6501f4dc:	mov    QWORD PTR [rsp+0x60],rax
    6501f4e1:	mov    r11,rax
    6501f4e4:	mov    rdx,QWORD PTR [rax+0xc0]
    6501f4eb:	cmp    rdx,QWORD PTR [rip+0x234ae]        # 0x650429a0
    6501f4f2:	mov    QWORD PTR [rsp+0x50],rdx
    6501f4f7:	mov    rax,QWORD PTR [rax+0xb8]
    6501f4fe:	mov    QWORD PTR [rsp+0x58],rax
    6501f503:	je     0x6501f52b
    6501f505:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f50c:	test   DWORD PTR [rip+0x23316],ecx        # 0x65042828
    6501f512:	jne    0x6501f52b
    6501f514:	call   0x65023d20
    6501f519:	mov    r11,QWORD PTR [rsp+0x60]
    6501f51e:	mov    rdx,rax
    6501f521:	mov    QWORD PTR [rsp+0x50],rax
    6501f526:	mov    rax,QWORD PTR [rsp+0x58]
    6501f52b:	cmp    rax,QWORD PTR [rip+0x231ee]        # 0x65042720
    6501f532:	je     0x6501f557
    6501f534:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f53b:	test   DWORD PTR [rip+0x232e7],ecx        # 0x65042828
    6501f541:	jne    0x6501f557
    6501f543:	call   0x650231d0
    6501f548:	mov    r11,QWORD PTR [rsp+0x60]
    6501f54d:	mov    rdx,QWORD PTR [rsp+0x50]
    6501f552:	mov    QWORD PTR [rsp+0x58],rax
    6501f557:	test   BYTE PTR [r11+0xc8],0x2
    6501f55f:	jne    0x6501f597
    6501f561:	or     DWORD PTR [r11+0xc8],0x2
    6501f569:	mov    r11,QWORD PTR [rsp+0x60]
    6501f56e:	mov    rdx,QWORD PTR [rsp+0x50]
    6501f573:	mov    BYTE PTR [rsp+0x68],0x1
    6501f578:	jmp    0x6501f597
    6501f57a:	mov    rax,QWORD PTR [rdx]
    6501f57d:	lea    rcx,[rsp+0x50]
    6501f582:	mov    QWORD PTR [rcx],rax
    6501f585:	mov    rax,QWORD PTR [rdx+0x8]
    6501f589:	mov    QWORD PTR [rcx+0x8],rax
    6501f58d:	mov    r11,QWORD PTR [rsp+0x60]
    6501f592:	mov    rdx,QWORD PTR [rsp+0x50]
    6501f597:	cmp    ebx,0x100
    6501f59d:	jae    0x6501f611
    6501f59f:	cmp    DWORD PTR [rdx+0x10c],0x1
    6501f5a6:	jle    0x6501f5c5
    6501f5a8:	lea    r8,[rsp+0x50]
    6501f5ad:	mov    edx,0x1
    6501f5b2:	mov    ecx,ebx
    6501f5b4:	call   0x65028ec0
    6501f5b9:	mov    r11,QWORD PTR [rsp+0x60]
    6501f5be:	mov    rdx,QWORD PTR [rsp+0x50]
    6501f5c3:	jmp    0x6501f5d2
    6501f5c5:	mov    rax,QWORD PTR [rdx+0x140]
    6501f5cc:	mov    al,BYTE PTR [rax+rbx*2]
    6501f5cf:	and    eax,0x1
    6501f5d2:	test   eax,eax
    6501f5d4:	je     0x6501f5fa
    6501f5d6:	cmp    BYTE PTR [rsp+0x68],0x0
    6501f5db:	mov    rax,QWORD PTR [rdx+0x148]
    6501f5e2:	movzx  eax,BYTE PTR [rax+rbx*1]
    6501f5e6:	je     0x6501f720
    6501f5ec:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501f5f4:	add    rsp,0x70
    6501f5f8:	pop    rbx
    6501f5f9:	ret    
    6501f5fa:	cmp    BYTE PTR [rsp+0x68],0x0
    6501f5ff:	je     0x6501f609
    6501f601:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501f609:	mov    eax,ebx
    6501f60b:	add    rsp,0x70
    6501f60f:	pop    rbx
    6501f610:	ret    
    6501f611:	cmp    DWORD PTR [rdx+0x10c],0x1
    6501f618:	mov    QWORD PTR [rsp+0x90],rdi
    6501f620:	jle    0x6501f657
    6501f622:	mov    edi,ebx
    6501f624:	lea    rdx,[rsp+0x50]
    6501f629:	sar    edi,0x8
    6501f62c:	movzx  ecx,dil
    6501f630:	call   0x65028d00
    6501f635:	test   eax,eax
    6501f637:	je     0x6501f657
    6501f639:	mov    BYTE PTR [rsp+0x80],dil
    6501f641:	mov    BYTE PTR [rsp+0x81],bl
    6501f648:	mov    BYTE PTR [rsp+0x82],0x0
    6501f650:	mov    edx,0x2
    6501f655:	jmp    0x6501f676
    6501f657:	call   0x650202b0
    6501f65c:	mov    edx,0x1
    6501f661:	mov    DWORD PTR [rax],0x2a
    6501f667:	mov    BYTE PTR [rsp+0x80],bl
    6501f66e:	mov    BYTE PTR [rsp+0x81],0x0
    6501f676:	mov    rcx,QWORD PTR [rsp+0x50]
    6501f67b:	mov    DWORD PTR [rsp+0x40],0x1
    6501f683:	lea    r9,[rsp+0x80]
    6501f68b:	mov    eax,DWORD PTR [rcx+0x4]
    6501f68e:	mov    r8d,0x100
    6501f694:	mov    DWORD PTR [rsp+0x38],eax
    6501f698:	lea    rax,[rsp+0x88]
    6501f6a0:	mov    DWORD PTR [rsp+0x30],0x3
    6501f6a8:	mov    QWORD PTR [rsp+0x28],rax
    6501f6ad:	mov    DWORD PTR [rsp+0x20],edx
    6501f6b1:	mov    edx,DWORD PTR [rcx+0x14]
    6501f6b4:	lea    rcx,[rsp+0x50]
    6501f6b9:	call   0x65028ba0
    6501f6be:	mov    rdi,QWORD PTR [rsp+0x90]
    6501f6c6:	test   eax,eax
    6501f6c8:	jne    0x6501f6e4
    6501f6ca:	cmp    BYTE PTR [rsp+0x68],al
    6501f6ce:	je     0x6501f6dc
    6501f6d0:	mov    rax,QWORD PTR [rsp+0x60]
    6501f6d5:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6501f6dc:	mov    eax,ebx
    6501f6de:	add    rsp,0x70
    6501f6e2:	pop    rbx
    6501f6e3:	ret    
    6501f6e4:	cmp    eax,0x1
    6501f6e7:	jne    0x6501f6f8
    6501f6e9:	movzx  eax,BYTE PTR [rsp+0x88]
    6501f6f1:	cmp    BYTE PTR [rsp+0x68],0x0
    6501f6f6:	jmp    0x6501f712
    6501f6f8:	movzx  eax,BYTE PTR [rsp+0x88]
    6501f700:	movzx  ecx,BYTE PTR [rsp+0x89]
    6501f708:	shl    eax,0x8
    6501f70b:	or     eax,ecx
    6501f70d:	cmp    BYTE PTR [rsp+0x68],0x0
    6501f712:	je     0x6501f720
    6501f714:	mov    rcx,QWORD PTR [rsp+0x60]
    6501f719:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    6501f720:	add    rsp,0x70
    6501f724:	pop    rbx
    6501f725:	ret    
    6501f726:	int3   
    6501f727:	int3   
    6501f728:	int3   
    6501f729:	int3   
    6501f72a:	int3   
    6501f72b:	int3   
    6501f72c:	int3   
    6501f72d:	int3   
    6501f72e:	int3   
    6501f72f:	int3   
    6501f730:	cmp    DWORD PTR [rip+0x24b49],0x0        # 0x65044280
    6501f737:	jne    0x6501f747
    6501f739:	lea    eax,[rcx-0x41]
    6501f73c:	cmp    eax,0x19
    6501f73f:	ja     0x6501f744
    6501f741:	add    ecx,0x20
    6501f744:	mov    eax,ecx
    6501f746:	ret    
    6501f747:	xor    edx,edx
    6501f749:	jmp    0x6501f4c0
    6501f74e:	int3   
    6501f74f:	int3   
    6501f750:	rex push rbx
    6501f752:	sub    rsp,0x40
    6501f756:	cmp    DWORD PTR [rip+0x24b23],0x0        # 0x65044280
    6501f75d:	movsxd rbx,ecx
    6501f760:	jne    0x6501f775
    6501f762:	mov    rax,QWORD PTR [rip+0x23217]        # 0x65042980
    6501f769:	mov    al,BYTE PTR [rax+rbx*2]
    6501f76c:	and    eax,0x4
    6501f76f:	add    rsp,0x40
    6501f773:	pop    rbx
    6501f774:	ret    
    6501f775:	mov    BYTE PTR [rsp+0x38],0x0
    6501f77a:	call   0x650208c0
    6501f77f:	mov    r11,rax
    6501f782:	mov    QWORD PTR [rsp+0x30],rax
    6501f787:	mov    rax,QWORD PTR [rax+0xc0]
    6501f78e:	cmp    rax,QWORD PTR [rip+0x2320b]        # 0x650429a0
    6501f795:	mov    QWORD PTR [rsp+0x20],rax
    6501f79a:	mov    rdx,QWORD PTR [r11+0xb8]
    6501f7a1:	mov    QWORD PTR [rsp+0x28],rdx
    6501f7a6:	je     0x6501f7cb
    6501f7a8:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f7af:	test   DWORD PTR [rip+0x23073],ecx        # 0x65042828
    6501f7b5:	jne    0x6501f7cb
    6501f7b7:	call   0x65023d20
    6501f7bc:	mov    r11,QWORD PTR [rsp+0x30]
    6501f7c1:	mov    rdx,QWORD PTR [rsp+0x28]
    6501f7c6:	mov    QWORD PTR [rsp+0x20],rax
    6501f7cb:	cmp    rdx,QWORD PTR [rip+0x22f4e]        # 0x65042720
    6501f7d2:	je     0x6501f7f7
    6501f7d4:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f7db:	test   DWORD PTR [rip+0x23047],ecx        # 0x65042828
    6501f7e1:	jne    0x6501f7f7
    6501f7e3:	call   0x650231d0
    6501f7e8:	mov    r11,QWORD PTR [rsp+0x30]
    6501f7ed:	mov    QWORD PTR [rsp+0x28],rax
    6501f7f2:	mov    rax,QWORD PTR [rsp+0x20]
    6501f7f7:	test   BYTE PTR [r11+0xc8],0x2
    6501f7ff:	jne    0x6501f818
    6501f801:	or     DWORD PTR [r11+0xc8],0x2
    6501f809:	mov    r11,QWORD PTR [rsp+0x30]
    6501f80e:	mov    rax,QWORD PTR [rsp+0x20]
    6501f813:	mov    BYTE PTR [rsp+0x38],0x1
    6501f818:	cmp    DWORD PTR [rax+0x10c],0x1
    6501f81f:	jle    0x6501f839
    6501f821:	lea    r8,[rsp+0x20]
    6501f826:	mov    edx,0x4
    6501f82b:	mov    ecx,ebx
    6501f82d:	call   0x65028ec0
    6501f832:	mov    r11,QWORD PTR [rsp+0x30]
    6501f837:	jmp    0x6501f846
    6501f839:	mov    rax,QWORD PTR [rax+0x140]
    6501f840:	mov    al,BYTE PTR [rax+rbx*2]
    6501f843:	and    eax,0x4
    6501f846:	cmp    BYTE PTR [rsp+0x38],0x0
    6501f84b:	je     0x6501f855
    6501f84d:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501f855:	add    rsp,0x40
    6501f859:	pop    rbx
    6501f85a:	ret    
    6501f85b:	int3   
    6501f85c:	int3   
    6501f85d:	int3   
    6501f85e:	int3   
    6501f85f:	int3   
    6501f860:	rex push rbx
    6501f862:	sub    rsp,0x40
    6501f866:	cmp    DWORD PTR [rip+0x24a13],0x0        # 0x65044280
    6501f86d:	movsxd rbx,ecx
    6501f870:	jne    0x6501f885
    6501f872:	mov    rax,QWORD PTR [rip+0x23107]        # 0x65042980
    6501f879:	mov    al,BYTE PTR [rax+rbx*2]
    6501f87c:	and    eax,0x8
    6501f87f:	add    rsp,0x40
    6501f883:	pop    rbx
    6501f884:	ret    
    6501f885:	mov    BYTE PTR [rsp+0x38],0x0
    6501f88a:	call   0x650208c0
    6501f88f:	mov    r11,rax
    6501f892:	mov    QWORD PTR [rsp+0x30],rax
    6501f897:	mov    rax,QWORD PTR [rax+0xc0]
    6501f89e:	cmp    rax,QWORD PTR [rip+0x230fb]        # 0x650429a0
    6501f8a5:	mov    QWORD PTR [rsp+0x20],rax
    6501f8aa:	mov    rdx,QWORD PTR [r11+0xb8]
    6501f8b1:	mov    QWORD PTR [rsp+0x28],rdx
    6501f8b6:	je     0x6501f8db
    6501f8b8:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f8bf:	test   DWORD PTR [rip+0x22f63],ecx        # 0x65042828
    6501f8c5:	jne    0x6501f8db
    6501f8c7:	call   0x65023d20
    6501f8cc:	mov    r11,QWORD PTR [rsp+0x30]
    6501f8d1:	mov    rdx,QWORD PTR [rsp+0x28]
    6501f8d6:	mov    QWORD PTR [rsp+0x20],rax
    6501f8db:	cmp    rdx,QWORD PTR [rip+0x22e3e]        # 0x65042720
    6501f8e2:	je     0x6501f907
    6501f8e4:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f8eb:	test   DWORD PTR [rip+0x22f37],ecx        # 0x65042828
    6501f8f1:	jne    0x6501f907
    6501f8f3:	call   0x650231d0
    6501f8f8:	mov    r11,QWORD PTR [rsp+0x30]
    6501f8fd:	mov    QWORD PTR [rsp+0x28],rax
    6501f902:	mov    rax,QWORD PTR [rsp+0x20]
    6501f907:	test   BYTE PTR [r11+0xc8],0x2
    6501f90f:	jne    0x6501f928
    6501f911:	or     DWORD PTR [r11+0xc8],0x2
    6501f919:	mov    r11,QWORD PTR [rsp+0x30]
    6501f91e:	mov    rax,QWORD PTR [rsp+0x20]
    6501f923:	mov    BYTE PTR [rsp+0x38],0x1
    6501f928:	cmp    DWORD PTR [rax+0x10c],0x1
    6501f92f:	jle    0x6501f949
    6501f931:	lea    r8,[rsp+0x20]
    6501f936:	mov    edx,0x8
    6501f93b:	mov    ecx,ebx
    6501f93d:	call   0x65028ec0
    6501f942:	mov    r11,QWORD PTR [rsp+0x30]
    6501f947:	jmp    0x6501f956
    6501f949:	mov    rax,QWORD PTR [rax+0x140]
    6501f950:	mov    al,BYTE PTR [rax+rbx*2]
    6501f953:	and    eax,0x8
    6501f956:	cmp    BYTE PTR [rsp+0x38],0x0
    6501f95b:	je     0x6501f965
    6501f95d:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501f965:	add    rsp,0x40
    6501f969:	pop    rbx
    6501f96a:	ret    
    6501f96b:	int3   
    6501f96c:	int3   
    6501f96d:	int3   
    6501f96e:	int3   
    6501f96f:	int3   
    6501f970:	rex push rbx
    6501f972:	sub    rsp,0x40
    6501f976:	cmp    DWORD PTR [rip+0x24903],0x0        # 0x65044280
    6501f97d:	movsxd rbx,ecx
    6501f980:	jne    0x6501f998
    6501f982:	mov    rax,QWORD PTR [rip+0x22ff7]        # 0x65042980
    6501f989:	mov    ax,WORD PTR [rax+rbx*2]
    6501f98d:	and    eax,0x157
    6501f992:	add    rsp,0x40
    6501f996:	pop    rbx
    6501f997:	ret    
    6501f998:	mov    BYTE PTR [rsp+0x38],0x0
    6501f99d:	call   0x650208c0
    6501f9a2:	mov    r11,rax
    6501f9a5:	mov    QWORD PTR [rsp+0x30],rax
    6501f9aa:	mov    rax,QWORD PTR [rax+0xc0]
    6501f9b1:	cmp    rax,QWORD PTR [rip+0x22fe8]        # 0x650429a0
    6501f9b8:	mov    QWORD PTR [rsp+0x20],rax
    6501f9bd:	mov    rdx,QWORD PTR [r11+0xb8]
    6501f9c4:	mov    QWORD PTR [rsp+0x28],rdx
    6501f9c9:	je     0x6501f9ee
    6501f9cb:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f9d2:	test   DWORD PTR [rip+0x22e50],ecx        # 0x65042828
    6501f9d8:	jne    0x6501f9ee
    6501f9da:	call   0x65023d20
    6501f9df:	mov    r11,QWORD PTR [rsp+0x30]
    6501f9e4:	mov    rdx,QWORD PTR [rsp+0x28]
    6501f9e9:	mov    QWORD PTR [rsp+0x20],rax
    6501f9ee:	cmp    rdx,QWORD PTR [rip+0x22d2b]        # 0x65042720
    6501f9f5:	je     0x6501fa1a
    6501f9f7:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f9fe:	test   DWORD PTR [rip+0x22e24],ecx        # 0x65042828
    6501fa04:	jne    0x6501fa1a
    6501fa06:	call   0x650231d0
    6501fa0b:	mov    r11,QWORD PTR [rsp+0x30]
    6501fa10:	mov    QWORD PTR [rsp+0x28],rax
    6501fa15:	mov    rax,QWORD PTR [rsp+0x20]
    6501fa1a:	test   BYTE PTR [r11+0xc8],0x2
    6501fa22:	jne    0x6501fa3b
    6501fa24:	or     DWORD PTR [r11+0xc8],0x2
    6501fa2c:	mov    r11,QWORD PTR [rsp+0x30]
    6501fa31:	mov    rax,QWORD PTR [rsp+0x20]
    6501fa36:	mov    BYTE PTR [rsp+0x38],0x1
    6501fa3b:	cmp    DWORD PTR [rax+0x10c],0x1
    6501fa42:	jle    0x6501fa5c
    6501fa44:	lea    r8,[rsp+0x20]
    6501fa49:	mov    edx,0x157
    6501fa4e:	mov    ecx,ebx
    6501fa50:	call   0x65028ec0
    6501fa55:	mov    r11,QWORD PTR [rsp+0x30]
    6501fa5a:	jmp    0x6501fa6c
    6501fa5c:	mov    rax,QWORD PTR [rax+0x140]
    6501fa63:	mov    ax,WORD PTR [rax+rbx*2]
    6501fa67:	and    eax,0x157
    6501fa6c:	cmp    BYTE PTR [rsp+0x38],0x0
    6501fa71:	je     0x6501fa7b
    6501fa73:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501fa7b:	add    rsp,0x40
    6501fa7f:	pop    rbx
    6501fa80:	ret    
    6501fa81:	int3   
    6501fa82:	int3   
    6501fa83:	int3   
    6501fa84:	int3   
    6501fa85:	int3   
    6501fa86:	int3   
    6501fa87:	int3   
    6501fa88:	int3   
    6501fa89:	int3   
    6501fa8a:	int3   
    6501fa8b:	int3   
    6501fa8c:	int3   
    6501fa8d:	int3   
    6501fa8e:	int3   
    6501fa8f:	int3   
    6501fa90:	sub    rsp,0x28
    6501fa94:	test   rcx,rcx
    6501fa97:	je     0x6501fad0
    6501fa99:	mov    r8,rcx
    6501fa9c:	mov    rcx,QWORD PTR [rip+0x2480d]        # 0x650442b0
    6501faa3:	xor    edx,edx
    6501faa5:	call   QWORD PTR [rip+0x14725]        # 0x650341d0
    6501faab:	test   eax,eax
    6501faad:	jne    0x6501fad0
    6501faaf:	mov    QWORD PTR [rsp+0x20],rbx
    6501fab4:	call   0x650202b0
    6501fab9:	mov    rbx,rax
    6501fabc:	call   QWORD PTR [rip+0x145b6]        # 0x65034078
    6501fac2:	mov    ecx,eax
    6501fac4:	call   0x65020260
    6501fac9:	mov    DWORD PTR [rbx],eax
    6501facb:	mov    rbx,QWORD PTR [rsp+0x20]
    6501fad0:	add    rsp,0x28
    6501fad4:	ret    
    6501fad5:	int3   
    6501fad6:	int3   
    6501fad7:	int3   
    6501fad8:	int3   
    6501fad9:	int3   
    6501fada:	int3   
    6501fadb:	int3   
    6501fadc:	int3   
    6501fadd:	int3   
    6501fade:	int3   
    6501fadf:	int3   
    6501fae0:	rex push rbx
    6501fae2:	sub    rsp,0x20
    6501fae6:	cmp    rcx,0xffffffffffffffe0
    6501faea:	mov    rbx,rcx
    6501faed:	ja     0x6501fb8e
    6501faf3:	mov    QWORD PTR [rsp+0x30],rsi
    6501faf8:	test   rcx,rcx
    6501fafb:	mov    esi,0x1
    6501fb00:	cmovne rsi,rcx
    6501fb04:	mov    QWORD PTR [rsp+0x38],rdi
    6501fb09:	data16 xchg ax,ax
    6501fb0c:	data16 data16 xchg ax,ax
    6501fb10:	mov    rcx,QWORD PTR [rip+0x24799]        # 0x650442b0
    6501fb17:	test   rcx,rcx
    6501fb1a:	jne    0x6501fb3c
    6501fb1c:	call   0x650292f0
    6501fb21:	mov    ecx,0x1e
    6501fb26:	call   0x650290b0
    6501fb2b:	mov    ecx,0xff
    6501fb30:	call   0x65022b20
    6501fb35:	mov    rcx,QWORD PTR [rip+0x24774]        # 0x650442b0
    6501fb3c:	mov    r8,rsi
    6501fb3f:	xor    edx,edx
    6501fb41:	call   QWORD PTR [rip+0x14681]        # 0x650341c8
    6501fb47:	test   rax,rax
    6501fb4a:	mov    rdi,rax
    6501fb4d:	jne    0x6501fb7b
    6501fb4f:	cmp    DWORD PTR [rip+0x24b8f],eax        # 0x650446e4
    6501fb55:	je     0x6501fb65
    6501fb57:	mov    rcx,rbx
    6501fb5a:	call   0x65020c60
    6501fb5f:	test   eax,eax
    6501fb61:	jne    0x6501fb10
    6501fb63:	jmp    0x6501fb70
    6501fb65:	call   0x650202b0
    6501fb6a:	mov    DWORD PTR [rax],0xc
    6501fb70:	call   0x650202b0
    6501fb75:	mov    DWORD PTR [rax],0xc
    6501fb7b:	mov    rsi,QWORD PTR [rsp+0x30]
    6501fb80:	mov    rax,rdi
    6501fb83:	mov    rdi,QWORD PTR [rsp+0x38]
    6501fb88:	add    rsp,0x20
    6501fb8c:	pop    rbx
    6501fb8d:	ret    
    6501fb8e:	call   0x65020c60
    6501fb93:	call   0x650202b0
    6501fb98:	mov    DWORD PTR [rax],0xc
    6501fb9e:	xor    eax,eax
    6501fba0:	add    rsp,0x20
    6501fba4:	pop    rbx
    6501fba5:	ret    
    6501fba6:	int3   
    6501fba7:	int3   
    6501fba8:	int3   
    6501fba9:	int3   
    6501fbaa:	int3   
    6501fbab:	int3   
    6501fbac:	int3   
    6501fbad:	int3   
    6501fbae:	int3   
    6501fbaf:	int3   
    6501fbb0:	int3   
    6501fbb1:	int3   
    6501fbb2:	int3   
    6501fbb3:	int3   
    6501fbb4:	int3   
    6501fbb5:	int3   
    6501fbb6:	data16 data16 xchg ax,ax
    6501fbba:	data16 data16 xchg ax,ax
    6501fbbe:	xchg   ax,ax
    6501fbc0:	mov    r11,rcx
    6501fbc3:	sub    rdx,rcx
    6501fbc6:	jb     0x6501fd6a
    6501fbcc:	cmp    r8,0x8
    6501fbd0:	jb     0x6501fc33
    6501fbd2:	test   cl,0x7
    6501fbd5:	je     0x6501fc0d
    6501fbd7:	test   cl,0x1
    6501fbda:	je     0x6501fbe7
    6501fbdc:	mov    al,BYTE PTR [rdx+rcx*1]
    6501fbdf:	dec    r8
    6501fbe2:	mov    BYTE PTR [rcx],al
    6501fbe4:	inc    rcx
    6501fbe7:	test   cl,0x2
    6501fbea:	je     0x6501fbfb
    6501fbec:	mov    ax,WORD PTR [rdx+rcx*1]
    6501fbf0:	sub    r8,0x2
    6501fbf4:	mov    WORD PTR [rcx],ax
    6501fbf7:	add    rcx,0x2
    6501fbfb:	test   cl,0x4
    6501fbfe:	je     0x6501fc0d
    6501fc00:	mov    eax,DWORD PTR [rdx+rcx*1]
    6501fc03:	sub    r8,0x4
    6501fc07:	mov    DWORD PTR [rcx],eax
    6501fc09:	add    rcx,0x4
    6501fc0d:	mov    r9,r8
    6501fc10:	shr    r9,0x5
    6501fc14:	jne    0x6501fc67
    6501fc16:	mov    r9,r8
    6501fc19:	shr    r9,0x3
    6501fc1d:	je     0x6501fc33
    6501fc1f:	mov    rax,QWORD PTR [rdx+rcx*1]
    6501fc23:	mov    QWORD PTR [rcx],rax
    6501fc26:	add    rcx,0x8
    6501fc2a:	dec    r9
    6501fc2d:	jne    0x6501fc1f
    6501fc2f:	and    r8,0x7
    6501fc33:	test   r8,r8
    6501fc36:	jne    0x6501fc40
    6501fc38:	mov    rax,r11
    6501fc3b:	ret    
    6501fc3c:	data16 data16 xchg ax,ax
    6501fc40:	mov    al,BYTE PTR [rdx+rcx*1]
    6501fc43:	mov    BYTE PTR [rcx],al
    6501fc45:	inc    rcx
    6501fc48:	dec    r8
    6501fc4b:	jne    0x6501fc40
    6501fc4d:	mov    rax,r11
    6501fc50:	ret    
    6501fc51:	data16 data16 xchg ax,ax
    6501fc55:	data16 data16 xchg ax,ax
    6501fc59:	data16 data16 xchg ax,ax
    6501fc5d:	data16 xchg ax,ax
    6501fc60:	data16 data16 xchg ax,ax
    6501fc64:	data16 xchg ax,ax
    6501fc67:	cmp    r9,0x2000
    6501fc6e:	jae    0x6501fcb2
    6501fc70:	mov    rax,QWORD PTR [rdx+rcx*1]
    6501fc74:	mov    r10,QWORD PTR [rdx+rcx*1+0x8]
    6501fc79:	add    rcx,0x20
    6501fc7d:	mov    QWORD PTR [rcx-0x20],rax
    6501fc81:	mov    QWORD PTR [rcx-0x18],r10
    6501fc85:	mov    rax,QWORD PTR [rdx+rcx*1-0x10]
    6501fc8a:	mov    r10,QWORD PTR [rdx+rcx*1-0x8]
    6501fc8f:	dec    r9
    6501fc92:	mov    QWORD PTR [rcx-0x10],rax
    6501fc96:	mov    QWORD PTR [rcx-0x8],r10
    6501fc9a:	jne    0x6501fc70
    6501fc9c:	and    r8,0x1f
    6501fca0:	jmp    0x6501fc16
    6501fca5:	data16 data16 xchg ax,ax
    6501fca9:	data16 data16 xchg ax,ax
    6501fcad:	data16 xchg ax,ax
    6501fcb0:	xchg   ax,ax
    6501fcb2:	cmp    rdx,0x1000
    6501fcb9:	jb     0x6501fc70
    6501fcbb:	mov    eax,0x20
    6501fcc0:	prefetchnta BYTE PTR [rdx+rcx*1]
    6501fcc4:	prefetchnta BYTE PTR [rdx+rcx*1+0x40]
    6501fcc9:	add    rcx,0x80
    6501fcd0:	dec    eax
    6501fcd2:	jne    0x6501fcc0
    6501fcd4:	sub    rcx,0x1000
    6501fcdb:	mov    eax,0x40
    6501fce0:	mov    r9,QWORD PTR [rdx+rcx*1]
    6501fce4:	mov    r10,QWORD PTR [rdx+rcx*1+0x8]
    6501fce9:	movnti QWORD PTR [rcx],r9
    6501fced:	movnti QWORD PTR [rcx+0x8],r10
    6501fcf2:	mov    r9,QWORD PTR [rdx+rcx*1+0x10]
    6501fcf7:	mov    r10,QWORD PTR [rdx+rcx*1+0x18]
    6501fcfc:	movnti QWORD PTR [rcx+0x10],r9
    6501fd01:	movnti QWORD PTR [rcx+0x18],r10
    6501fd06:	mov    r9,QWORD PTR [rdx+rcx*1+0x20]
    6501fd0b:	mov    r10,QWORD PTR [rdx+rcx*1+0x28]
    6501fd10:	add    rcx,0x40
    6501fd14:	movnti QWORD PTR [rcx-0x20],r9
    6501fd19:	movnti QWORD PTR [rcx-0x18],r10
    6501fd1e:	mov    r9,QWORD PTR [rdx+rcx*1-0x10]
    6501fd23:	mov    r10,QWORD PTR [rdx+rcx*1-0x8]
    6501fd28:	dec    eax
    6501fd2a:	movnti QWORD PTR [rcx-0x10],r9
    6501fd2f:	movnti QWORD PTR [rcx-0x8],r10
    6501fd34:	jne    0x6501fce0
    6501fd36:	sub    r8,0x1000
    6501fd3d:	cmp    r8,0x1000
    6501fd44:	jae    0x6501fcbb
    6501fd4a:	lock or BYTE PTR [rsp],0x0
    6501fd4f:	jmp    0x6501fc0d
    6501fd54:	data16 data16 xchg ax,ax
    6501fd58:	data16 data16 xchg ax,ax
    6501fd5c:	data16 data16 xchg ax,ax
    6501fd60:	data16 data16 xchg ax,ax
    6501fd64:	data16 data16 xchg ax,ax
    6501fd68:	xchg   ax,ax
    6501fd6a:	add    rcx,r8
    6501fd6d:	cmp    r8,0x8
    6501fd71:	jb     0x6501fdd4
    6501fd73:	test   cl,0x7
    6501fd76:	je     0x6501fdae
    6501fd78:	test   cl,0x1
    6501fd7b:	je     0x6501fd88
    6501fd7d:	dec    rcx
    6501fd80:	mov    al,BYTE PTR [rdx+rcx*1]
    6501fd83:	dec    r8
    6501fd86:	mov    BYTE PTR [rcx],al
    6501fd88:	test   cl,0x2
    6501fd8b:	je     0x6501fd9c
    6501fd8d:	sub    rcx,0x2
    6501fd91:	mov    ax,WORD PTR [rdx+rcx*1]
    6501fd95:	sub    r8,0x2
    6501fd99:	mov    WORD PTR [rcx],ax
    6501fd9c:	test   cl,0x4
    6501fd9f:	je     0x6501fdae
    6501fda1:	sub    rcx,0x4
    6501fda5:	mov    eax,DWORD PTR [rdx+rcx*1]
    6501fda8:	sub    r8,0x4
    6501fdac:	mov    DWORD PTR [rcx],eax
    6501fdae:	mov    r9,r8
    6501fdb1:	shr    r9,0x5
    6501fdb5:	jne    0x6501fe07
    6501fdb7:	mov    r9,r8
    6501fdba:	shr    r9,0x3
    6501fdbe:	je     0x6501fdd4
    6501fdc0:	sub    rcx,0x8
    6501fdc4:	mov    rax,QWORD PTR [rdx+rcx*1]
    6501fdc8:	dec    r9
    6501fdcb:	mov    QWORD PTR [rcx],rax
    6501fdce:	jne    0x6501fdc0
    6501fdd0:	and    r8,0x7
    6501fdd4:	test   r8,r8
    6501fdd7:	jne    0x6501fde0
    6501fdd9:	mov    rax,r11
    6501fddc:	ret    
    6501fddd:	data16 xchg ax,ax
    6501fde0:	dec    rcx
    6501fde3:	mov    al,BYTE PTR [rdx+rcx*1]
    6501fde6:	dec    r8
    6501fde9:	mov    BYTE PTR [rcx],al
    6501fdeb:	jne    0x6501fde0
    6501fded:	mov    rax,r11
    6501fdf0:	ret    
    6501fdf1:	data16 data16 xchg ax,ax
    6501fdf5:	data16 data16 xchg ax,ax
    6501fdf9:	data16 data16 xchg ax,ax
    6501fdfd:	data16 xchg ax,ax
    6501fe00:	data16 data16 xchg ax,ax
    6501fe04:	data16 xchg ax,ax
    6501fe07:	cmp    r9,0x2000
    6501fe0e:	jae    0x6501fe52
    6501fe10:	mov    rax,QWORD PTR [rdx+rcx*1-0x8]
    6501fe15:	mov    r10,QWORD PTR [rdx+rcx*1-0x10]
    6501fe1a:	sub    rcx,0x20
    6501fe1e:	mov    QWORD PTR [rcx+0x18],rax
    6501fe22:	mov    QWORD PTR [rcx+0x10],r10
    6501fe26:	mov    rax,QWORD PTR [rdx+rcx*1+0x8]
    6501fe2b:	mov    r10,QWORD PTR [rdx+rcx*1]
    6501fe2f:	dec    r9
    6501fe32:	mov    QWORD PTR [rcx+0x8],rax
    6501fe36:	mov    QWORD PTR [rcx],r10
    6501fe39:	jne    0x6501fe10
    6501fe3b:	and    r8,0x1f
    6501fe3f:	jmp    0x6501fdb7
    6501fe44:	data16 data16 xchg ax,ax
    6501fe48:	data16 data16 xchg ax,ax
    6501fe4c:	data16 data16 xchg ax,ax
    6501fe50:	xchg   ax,ax
    6501fe52:	cmp    rdx,0xfffffffffffff000
    6501fe59:	ja     0x6501fe10
    6501fe5b:	mov    eax,0x20
    6501fe60:	sub    rcx,0x80
    6501fe67:	prefetchnta BYTE PTR [rdx+rcx*1]
    6501fe6b:	prefetchnta BYTE PTR [rdx+rcx*1+0x40]
    6501fe70:	dec    eax
    6501fe72:	jne    0x6501fe60
    6501fe74:	add    rcx,0x1000
    6501fe7b:	mov    eax,0x40
    6501fe80:	mov    r9,QWORD PTR [rdx+rcx*1-0x8]
    6501fe85:	mov    r10,QWORD PTR [rdx+rcx*1-0x10]
    6501fe8a:	movnti QWORD PTR [rcx-0x8],r9
    6501fe8f:	movnti QWORD PTR [rcx-0x10],r10
    6501fe94:	mov    r9,QWORD PTR [rdx+rcx*1-0x18]
    6501fe99:	mov    r10,QWORD PTR [rdx+rcx*1-0x20]
    6501fe9e:	movnti QWORD PTR [rcx-0x18],r9
    6501fea3:	movnti QWORD PTR [rcx-0x20],r10
    6501fea8:	mov    r9,QWORD PTR [rdx+rcx*1-0x28]
    6501fead:	mov    r10,QWORD PTR [rdx+rcx*1-0x30]
    6501feb2:	sub    rcx,0x40
    6501feb6:	movnti QWORD PTR [rcx+0x18],r9
    6501febb:	movnti QWORD PTR [rcx+0x10],r10
    6501fec0:	mov    r9,QWORD PTR [rdx+rcx*1+0x8]
    6501fec5:	mov    r10,QWORD PTR [rdx+rcx*1]
    6501fec9:	dec    eax
    6501fecb:	movnti QWORD PTR [rcx+0x8],r9
    6501fed0:	movnti QWORD PTR [rcx],r10
    6501fed4:	jne    0x6501fe80
    6501fed6:	sub    r8,0x1000
    6501fedd:	cmp    r8,0x1000
    6501fee4:	jae    0x6501fe5b
    6501feea:	lock or BYTE PTR [rsp],0x0
    6501feef:	jmp    0x6501fdae
    6501fef4:	int3   
    6501fef5:	int3   
    6501fef6:	int3   
    6501fef7:	int3   
    6501fef8:	int3   
    6501fef9:	int3   
    6501fefa:	int3   
    6501fefb:	int3   
    6501fefc:	int3   
    6501fefd:	int3   
    6501fefe:	int3   
    6501feff:	int3   
    6501ff00:	mov    QWORD PTR [rsp+0x18],rbx
    6501ff05:	push   rdi
    6501ff06:	sub    rsp,0x20
    6501ff0a:	test   rcx,rcx
    6501ff0d:	mov    rbx,rdx
    6501ff10:	mov    rdi,rcx
    6501ff13:	jne    0x6501ff27
    6501ff15:	mov    rcx,rdx
    6501ff18:	mov    rbx,QWORD PTR [rsp+0x40]
    6501ff1d:	add    rsp,0x20
    6501ff21:	pop    rdi
    6501ff22:	jmp    0x6501fae0
    6501ff27:	test   rdx,rdx
    6501ff2a:	jne    0x6501ff3e
    6501ff2c:	call   0x6501fa90
    6501ff31:	xor    eax,eax
    6501ff33:	mov    rbx,QWORD PTR [rsp+0x40]
    6501ff38:	add    rsp,0x20
    6501ff3c:	pop    rdi
    6501ff3d:	ret    
    6501ff3e:	cmp    rdx,0xffffffffffffffe0
    6501ff42:	mov    QWORD PTR [rsp+0x30],rbp
    6501ff47:	mov    QWORD PTR [rsp+0x38],rsi
    6501ff4c:	ja     0x6501ff91
    6501ff4e:	mov    ebp,0x1
    6501ff53:	mov    rcx,QWORD PTR [rip+0x24356]        # 0x650442b0
    6501ff5a:	test   rbx,rbx
    6501ff5d:	mov    r8,rdi
    6501ff60:	cmove  rbx,rbp
    6501ff64:	xor    edx,edx
    6501ff66:	mov    r9,rbx
    6501ff69:	call   QWORD PTR [rip+0x14269]        # 0x650341d8
    6501ff6f:	test   rax,rax
    6501ff72:	mov    rsi,rax
    6501ff75:	jne    0x6501ffeb
    6501ff77:	cmp    DWORD PTR [rip+0x24767],eax        # 0x650446e4
    6501ff7d:	je     0x6501ffd4
    6501ff7f:	mov    rcx,rbx
    6501ff82:	call   0x65020c60
    6501ff87:	test   eax,eax
    6501ff89:	je     0x6501ffbb
    6501ff8b:	cmp    rbx,0xffffffffffffffe0
    6501ff8f:	jbe    0x6501ff53
    6501ff91:	mov    rcx,rbx
    6501ff94:	call   0x65020c60
    6501ff99:	call   0x650202b0
    6501ff9e:	mov    DWORD PTR [rax],0xc
    6501ffa4:	xor    eax,eax
    6501ffa6:	mov    rbp,QWORD PTR [rsp+0x30]
    6501ffab:	mov    rsi,QWORD PTR [rsp+0x38]
    6501ffb0:	mov    rbx,QWORD PTR [rsp+0x40]
    6501ffb5:	add    rsp,0x20
    6501ffb9:	pop    rdi
    6501ffba:	ret    
    6501ffbb:	call   0x650202b0
    6501ffc0:	mov    rbx,rax
    6501ffc3:	call   QWORD PTR [rip+0x140af]        # 0x65034078
    6501ffc9:	mov    ecx,eax
    6501ffcb:	call   0x65020260
    6501ffd0:	mov    DWORD PTR [rbx],eax
    6501ffd2:	jmp    0x6501ffa4
    6501ffd4:	call   0x650202b0
    6501ffd9:	mov    rbx,rax
    6501ffdc:	call   QWORD PTR [rip+0x14096]        # 0x65034078
    6501ffe2:	mov    ecx,eax
    6501ffe4:	call   0x65020260
    6501ffe9:	mov    DWORD PTR [rbx],eax
    6501ffeb:	mov    rax,rsi
    6501ffee:	jmp    0x6501ffa6
    6501fff0:	mov    QWORD PTR [rsp+0x8],rbx
    6501fff5:	mov    QWORD PTR [rsp+0x18],rbp
    6501fffa:	mov    QWORD PTR [rsp+0x20],rsi
    6501ffff:	mov    QWORD PTR [rsp+0x10],rdx
    65020004:	push   rdi
    65020005:	push   r12
    65020007:	push   r13
    65020009:	push   r14
    6502000b:	push   r15
    6502000d:	sub    rsp,0x40
    65020011:	mov    r14,QWORD PTR [r9+0x8]
    65020015:	mov    rbp,QWORD PTR [r9]
    65020018:	mov    r13,QWORD PTR [r9+0x38]
    6502001c:	sub    rbp,r14
    6502001f:	xor    edi,edi
    65020021:	test   BYTE PTR [rcx+0x4],0x66
    65020025:	mov    r15,r9
    65020028:	mov    rsi,rdx
    6502002b:	mov    r12,rcx
    6502002e:	jne    0x6502011a
    65020034:	mov    QWORD PTR [rsp+0x30],rcx
    65020039:	mov    QWORD PTR [rsp+0x38],r8
    6502003e:	cmp    DWORD PTR [r13+0x0],edi
    65020042:	jbe    0x65020183
    65020048:	lea    rbx,[r13+0xc]
    6502004c:	data16 data16 xchg ax,ax
    65020050:	mov    eax,DWORD PTR [rbx-0x8]
    65020053:	cmp    rbp,rax
    65020056:	jb     0x65020103
    6502005c:	mov    eax,DWORD PTR [rbx-0x4]
    6502005f:	cmp    rbp,rax
    65020062:	jae    0x65020103
    65020068:	cmp    DWORD PTR [rbx+0x4],0x0
    6502006c:	je     0x65020103
    65020072:	mov    eax,DWORD PTR [rbx]
    65020074:	cmp    eax,0x1
    65020077:	je     0x65020090
    65020079:	lea    rcx,[rsp+0x30]
    6502007e:	add    rax,r14
    65020081:	mov    rdx,rsi
    65020084:	call   rax
    65020086:	test   eax,eax
    65020088:	js     0x65020116
    6502008e:	jle    0x65020103
    65020090:	cmp    DWORD PTR [r12],0xe06d7363
    65020098:	jne    0x650200c2
    6502009a:	cmp    QWORD PTR [rip+0x152a6],0x0        # 0x65035348
    650200a2:	je     0x650200c2
    650200a4:	lea    rcx,[rip+0x1529d]        # 0x65035348
    650200ab:	call   0x650294e0
    650200b0:	test   eax,eax
    650200b2:	je     0x650200c2
    650200b4:	mov    edx,0x1
    650200b9:	mov    rcx,r12
    650200bc:	call   QWORD PTR [rip+0x15286]        # 0x65035348
    650200c2:	mov    ecx,DWORD PTR [rbx+0x4]
    650200c5:	mov    r8d,0x1
    650200cb:	mov    rdx,rsi
    650200ce:	add    rcx,r14
    650200d1:	call   0x65029420
    650200d6:	mov    rax,QWORD PTR [r15+0x40]
    650200da:	mov    edx,DWORD PTR [rbx+0x4]
    650200dd:	movsxd r9,DWORD PTR [r12]
    650200e1:	mov    QWORD PTR [rsp+0x28],rax
    650200e6:	mov    rax,QWORD PTR [r15+0x28]
    650200ea:	add    rdx,r14
    650200ed:	mov    r8,r12
    650200f0:	mov    rcx,rsi
    650200f3:	mov    QWORD PTR [rsp+0x20],rax
    650200f8:	call   QWORD PTR [rip+0x1412a]        # 0x65034228
    650200fe:	call   0x65029450
    65020103:	add    edi,0x1
    65020106:	add    rbx,0x10
    6502010a:	cmp    edi,DWORD PTR [r13+0x0]
    6502010e:	jb     0x65020050
    65020114:	jmp    0x65020183
    65020116:	xor    eax,eax
    65020118:	jmp    0x65020188
    6502011a:	mov    rsi,QWORD PTR [r9+0x20]
    6502011e:	sub    rsi,r14
    65020121:	cmp    DWORD PTR [r13+0x0],edi
    65020125:	jbe    0x65020183
    65020127:	lea    rbx,[r13+0x10]
    6502012b:	xchg   ax,ax
    6502012d:	data16 xchg ax,ax
    65020130:	mov    ecx,DWORD PTR [rbx-0xc]
    65020133:	cmp    rbp,rcx
    65020136:	jb     0x65020176
    65020138:	mov    eax,DWORD PTR [rbx-0x8]
    6502013b:	cmp    rbp,rax
    6502013e:	jae    0x65020176
    65020140:	cmp    rsi,rcx
    65020143:	jb     0x65020152
    65020145:	cmp    rsi,rax
    65020148:	ja     0x65020152
    6502014a:	test   BYTE PTR [r12+0x4],0x20
    65020150:	jne    0x65020183
    65020152:	mov    ecx,DWORD PTR [rbx]
    65020154:	test   ecx,ecx
    65020156:	je     0x6502015f
    65020158:	cmp    rsi,rcx
    6502015b:	je     0x65020183
    6502015d:	jmp    0x65020176
    6502015f:	mov    rdx,QWORD PTR [rsp+0x78]
    65020164:	add    rax,r14
    65020167:	mov    cl,0x1
    65020169:	mov    QWORD PTR [r15],rax
    6502016c:	mov    r8d,DWORD PTR [rbx-0x4]
    65020170:	add    r8,r14
    65020173:	call   r8
    65020176:	add    edi,0x1
    65020179:	add    rbx,0x10
    6502017d:	cmp    edi,DWORD PTR [r13+0x0]
    65020181:	jb     0x65020130
    65020183:	mov    eax,0x1
    65020188:	lea    r11,[rsp+0x40]
    6502018d:	mov    rbx,QWORD PTR [r11+0x30]
    65020191:	mov    rbp,QWORD PTR [r11+0x40]
    65020195:	mov    rsi,QWORD PTR [r11+0x48]
    65020199:	mov    rsp,r11
    6502019c:	pop    r15
    6502019e:	pop    r14
    650201a0:	pop    r13
    650201a2:	pop    r12
    650201a4:	pop    rdi
    650201a5:	ret    
    650201a6:	int3   
    650201a7:	int3   
    650201a8:	int3   
    650201a9:	int3   
    650201aa:	int3   
    650201ab:	int3   
    650201ac:	int3   
    650201ad:	int3   
    650201ae:	int3   
    650201af:	int3   
    650201b0:	sub    rsp,0x38
    650201b4:	test   rcx,rcx
    650201b7:	mov    r9,rcx
    650201ba:	je     0x650201c9
    650201bc:	test   rdx,rdx
    650201bf:	je     0x650201c9
    650201c1:	test   r8,r8
    650201c4:	jne    0x65020200
    650201c6:	mov    BYTE PTR [rcx],r8b
    650201c9:	call   0x650202b0
    650201ce:	xor    r9d,r9d
    650201d1:	xor    r8d,r8d
    650201d4:	xor    edx,edx
    650201d6:	xor    ecx,ecx
    650201d8:	mov    QWORD PTR [rsp+0x20],0x0
    650201e1:	mov    DWORD PTR [rax],0x16
    650201e7:	call   0x6501d850
    650201ec:	mov    eax,0x16
    650201f1:	add    rsp,0x38
    650201f5:	ret    
    650201f6:	data16 data16 xchg ax,ax
    650201fa:	data16 xchg ax,ax
    650201fd:	data16 xchg ax,ax
    65020200:	movzx  eax,BYTE PTR [r8]
    65020204:	add    rcx,0x1
    65020208:	add    r8,0x1
    6502020c:	test   al,al
    6502020e:	mov    BYTE PTR [rcx-0x1],al
    65020211:	je     0x65020219
    65020213:	sub    rdx,0x1
    65020217:	jne    0x65020200
    65020219:	test   rdx,rdx
    6502021c:	jne    0x6502024e
    6502021e:	mov    BYTE PTR [r9],dl
    65020221:	call   0x650202b0
    65020226:	xor    r9d,r9d
    65020229:	xor    r8d,r8d
    6502022c:	xor    edx,edx
    6502022e:	xor    ecx,ecx
    65020230:	mov    DWORD PTR [rax],0x22
    65020236:	mov    QWORD PTR [rsp+0x20],0x0
    6502023f:	call   0x6501d850
    65020244:	mov    eax,0x22
    65020249:	add    rsp,0x38
    6502024d:	ret    
    6502024e:	xor    eax,eax
    65020250:	add    rsp,0x38
    65020254:	ret    
    65020255:	int3   
    65020256:	int3   
    65020257:	int3   
    65020258:	int3   
    65020259:	int3   
    6502025a:	int3   
    6502025b:	int3   
    6502025c:	int3   
    6502025d:	int3   
    6502025e:	int3   
    6502025f:	int3   
    65020260:	lea    r8,[rip+0x21ec9]        # 0x65042130
    65020267:	xor    edx,edx
    65020269:	mov    rax,r8
    6502026c:	data16 data16 xchg ax,ax
    65020270:	cmp    ecx,DWORD PTR [rax]
    65020272:	je     0x650202a5
    65020274:	add    edx,0x1
    65020277:	add    rax,0x8
    6502027b:	cmp    edx,0x2d
    6502027e:	jb     0x65020270
    65020280:	lea    eax,[rcx-0x13]
    65020283:	cmp    eax,0x11
    65020286:	ja     0x6502028e
    65020288:	mov    eax,0xd
    6502028d:	ret    
    6502028e:	add    ecx,0xffffff44
    65020294:	mov    eax,0x16
    65020299:	mov    edx,0x8
    6502029e:	cmp    ecx,0xe
    650202a1:	cmovbe eax,edx
    650202a4:	ret    
    650202a5:	movsxd rax,edx
    650202a8:	mov    eax,DWORD PTR [r8+rax*8+0x4]
    650202ad:	ret    
    650202ae:	int3   
    650202af:	int3   
    650202b0:	sub    rsp,0x28
    650202b4:	call   0x65020830
    650202b9:	test   rax,rax
    650202bc:	jne    0x650202ca
    650202be:	lea    rax,[rip+0x21fd3]        # 0x65042298
    650202c5:	add    rsp,0x28
    650202c9:	ret    
    650202ca:	add    rax,0x10
    650202ce:	add    rsp,0x28
    650202d2:	ret    
    650202d3:	int3   
    650202d4:	int3   
    650202d5:	int3   
    650202d6:	int3   
    650202d7:	int3   
    650202d8:	int3   
    650202d9:	int3   
    650202da:	int3   
    650202db:	int3   
    650202dc:	int3   
    650202dd:	int3   
    650202de:	int3   
    650202df:	int3   
    650202e0:	sub    rsp,0x28
    650202e4:	call   0x65020830
    650202e9:	test   rax,rax
    650202ec:	jne    0x650202fa
    650202ee:	lea    rax,[rip+0x21fa7]        # 0x6504229c
    650202f5:	add    rsp,0x28
    650202f9:	ret    
    650202fa:	add    rax,0x14
    650202fe:	add    rsp,0x28
    65020302:	ret    
    65020303:	int3   
    65020304:	int3   
    65020305:	int3   
    65020306:	int3   
    65020307:	int3   
    65020308:	int3   
    65020309:	int3   
    6502030a:	int3   
    6502030b:	int3   
    6502030c:	int3   
    6502030d:	int3   
    6502030e:	int3   
    6502030f:	int3   
    65020310:	rex push rbx
    65020312:	sub    rsp,0x20
    65020316:	mov    ebx,ecx
    65020318:	call   0x65020830
    6502031d:	test   rax,rax
    65020320:	jne    0x6502032b
    65020322:	lea    rax,[rip+0x21f73]        # 0x6504229c
    65020329:	jmp    0x6502032f
    6502032b:	add    rax,0x14
    6502032f:	lea    rdx,[rip+0x21dfa]        # 0x65042130
    65020336:	mov    DWORD PTR [rax],ebx
    65020338:	xor    ecx,ecx
    6502033a:	mov    rax,rdx
    6502033d:	data16 xchg ax,ax
    65020340:	cmp    ebx,DWORD PTR [rax]
    65020342:	je     0x65020377
    65020344:	add    ecx,0x1
    65020347:	add    rax,0x8
    6502034b:	cmp    ecx,0x2d
    6502034e:	jb     0x65020340
    65020350:	lea    eax,[rbx-0x13]
    65020353:	cmp    eax,0x11
    65020356:	ja     0x6502035f
    65020358:	mov    ebx,0xd
    6502035d:	jmp    0x6502037e
    6502035f:	lea    eax,[rbx-0xbc]
    65020365:	mov    ecx,0x8
    6502036a:	mov    ebx,0x16
    6502036f:	cmp    eax,0xe
    65020372:	cmovbe ebx,ecx
    65020375:	jmp    0x6502037e
    65020377:	movsxd rax,ecx
    6502037a:	mov    ebx,DWORD PTR [rdx+rax*8+0x4]
    6502037e:	call   0x65020830
    65020383:	test   rax,rax
    65020386:	jne    0x65020394
    65020388:	mov    DWORD PTR [rip+0x21f0a],ebx        # 0x65042298
    6502038e:	add    rsp,0x20
    65020392:	pop    rbx
    65020393:	ret    
    65020394:	mov    DWORD PTR [rax+0x10],ebx
    65020397:	add    rsp,0x20
    6502039b:	pop    rbx
    6502039c:	ret    
    6502039d:	int3   
    6502039e:	int3   
    6502039f:	int3   
    650203a0:	mov    DWORD PTR [rip+0x27dfe],0x0        # 0x650481a8
    650203aa:	ret    
    650203ab:	int3   
    650203ac:	int3   
    650203ad:	int3   
    650203ae:	int3   
    650203af:	int3   
    650203b0:	mov    QWORD PTR [rsp+0x10],rbx
    650203b5:	mov    QWORD PTR [rsp+0x18],rbp
    650203ba:	push   rsi
    650203bb:	push   rdi
    650203bc:	push   r12
    650203be:	sub    rsp,0x20
    650203c2:	mov    rbp,rcx
    650203c5:	mov    ecx,DWORD PTR [rip+0x21ed5]        # 0x650422a0
    650203cb:	cmp    ecx,0xffffffff
    650203ce:	je     0x650203e4
    650203d0:	call   QWORD PTR [rip+0x13e7a]        # 0x65034250
    650203d6:	test   rax,rax
    650203d9:	je     0x650203e4
    650203db:	mov    rax,QWORD PTR [rax+0x2a8]
    650203e2:	jmp    0x6502045e
    650203e4:	lea    rcx,[rip+0x14f3d]        # 0x65035328
    650203eb:	call   QWORD PTR [rip+0x13e57]        # 0x65034248
    650203f1:	test   rax,rax
    650203f4:	mov    r12,rax
    650203f7:	je     0x6502046a
    650203f9:	lea    rcx,[rsp+0x40]
    650203fe:	xor    ebx,ebx
    65020400:	mov    DWORD PTR [rsp+0x40],ebx
    65020404:	call   0x65022c10
    65020409:	cmp    DWORD PTR [rsp+0x40],0x5
    6502040e:	jg     0x6502044e
    65020410:	xor    ecx,ecx
    65020412:	call   QWORD PTR [rip+0x13e30]        # 0x65034248
    65020418:	movsxd rcx,DWORD PTR [rax+0x3c]
    6502041c:	add    rcx,rax
    6502041f:	movzx  eax,WORD PTR [rcx+0x14]
    65020423:	lea    rdx,[rax+rcx*1+0x18]
    65020428:	movzx  eax,WORD PTR [rcx+0x6]
    6502042c:	test   eax,eax
    6502042e:	je     0x6502044e
    65020430:	lea    rsi,[rip+0x14ed9]        # 0x65035310
    65020437:	mov    rdi,rdx
    6502043a:	mov    ecx,0x8
    6502043f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    65020441:	je     0x6502046a
    65020443:	add    ebx,0x1
    65020446:	add    rdx,0x28
    6502044a:	cmp    ebx,eax
    6502044c:	jb     0x65020430
    6502044e:	lea    rdx,[rip+0x14ec3]        # 0x65035318
    65020455:	mov    rcx,r12
    65020458:	call   QWORD PTR [rip+0x13c52]        # 0x650340b0
    6502045e:	test   rax,rax
    65020461:	je     0x6502046a
    65020463:	mov    rcx,rbp
    65020466:	call   rax
    65020468:	jmp    0x6502046d
    6502046a:	mov    rax,rbp
    6502046d:	mov    rbx,QWORD PTR [rsp+0x48]
    65020472:	mov    rbp,QWORD PTR [rsp+0x50]
    65020477:	add    rsp,0x20
    6502047b:	pop    r12
    6502047d:	pop    rdi
    6502047e:	pop    rsi
    6502047f:	ret    
    65020480:	mov    QWORD PTR [rsp+0x10],rbx
    65020485:	mov    QWORD PTR [rsp+0x18],rsi
    6502048a:	push   rdi
    6502048b:	sub    rsp,0x20
    6502048f:	mov    ecx,DWORD PTR [rip+0x21e0b]        # 0x650422a0
    65020495:	cmp    ecx,0xffffffff
    65020498:	je     0x650204b1
    6502049a:	call   QWORD PTR [rip+0x13db0]        # 0x65034250
    650204a0:	test   rax,rax
    650204a3:	je     0x650204b1
    650204a5:	mov    rax,QWORD PTR [rax+0x2a8]
    650204ac:	jmp    0x6502053e
    650204b1:	lea    rcx,[rip+0x14e70]        # 0x65035328
    650204b8:	call   QWORD PTR [rip+0x13d8a]        # 0x65034248
    650204be:	test   rax,rax
    650204c1:	mov    rbx,rax
    650204c4:	je     0x65020557
    650204ca:	lea    rcx,[rsp+0x30]
    650204cf:	mov    DWORD PTR [rsp+0x30],0x0
    650204d7:	call   0x65022c10
    650204dc:	cmp    DWORD PTR [rsp+0x30],0x5
    650204e1:	jg     0x6502052e
    650204e3:	xor    ecx,ecx
    650204e5:	call   QWORD PTR [rip+0x13d5d]        # 0x65034248
    650204eb:	xor    edx,edx
    650204ed:	movsxd rcx,DWORD PTR [rax+0x3c]
    650204f1:	add    rcx,rax
    650204f4:	movzx  eax,WORD PTR [rcx+0x14]
    650204f8:	lea    r8,[rax+rcx*1+0x18]
    650204fd:	movzx  eax,WORD PTR [rcx+0x6]
    65020501:	test   eax,eax
    65020503:	je     0x6502052e
    65020505:	data16 data16 xchg ax,ax
    65020509:	data16 xchg ax,ax
    6502050c:	data16 data16 xchg ax,ax
    65020510:	lea    rsi,[rip+0x14df9]        # 0x65035310
    65020517:	mov    rdi,r8
    6502051a:	mov    ecx,0x8
    6502051f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    65020521:	je     0x65020557
    65020523:	add    edx,0x1
    65020526:	add    r8,0x28
    6502052a:	cmp    edx,eax
    6502052c:	jb     0x65020510
    6502052e:	lea    rdx,[rip+0x14de3]        # 0x65035318
    65020535:	mov    rcx,rbx
    65020538:	call   QWORD PTR [rip+0x13b72]        # 0x650340b0
    6502053e:	test   rax,rax
    65020541:	je     0x65020557
    65020543:	xor    ecx,ecx
    65020545:	call   rax
    65020547:	mov    rbx,QWORD PTR [rsp+0x38]
    6502054c:	mov    rsi,QWORD PTR [rsp+0x40]
    65020551:	add    rsp,0x20
    65020555:	pop    rdi
    65020556:	ret    
    65020557:	mov    rbx,QWORD PTR [rsp+0x38]
    6502055c:	mov    rsi,QWORD PTR [rsp+0x40]
    65020561:	xor    eax,eax
    65020563:	add    rsp,0x20
    65020567:	pop    rdi
    65020568:	ret    
    65020569:	int3   
    6502056a:	int3   
    6502056b:	int3   
    6502056c:	int3   
    6502056d:	int3   
    6502056e:	int3   
    6502056f:	int3   
    65020570:	mov    QWORD PTR [rsp+0x10],rbx
    65020575:	mov    QWORD PTR [rsp+0x18],rbp
    6502057a:	push   rsi
    6502057b:	push   rdi
    6502057c:	push   r12
    6502057e:	sub    rsp,0x20
    65020582:	mov    rbp,rcx
    65020585:	mov    ecx,DWORD PTR [rip+0x21d15]        # 0x650422a0
    6502058b:	cmp    ecx,0xffffffff
    6502058e:	je     0x650205a4
    65020590:	call   QWORD PTR [rip+0x13cba]        # 0x65034250
    65020596:	test   rax,rax
    65020599:	je     0x650205a4
    6502059b:	mov    rax,QWORD PTR [rax+0x2b0]
    650205a2:	jmp    0x6502061e
    650205a4:	lea    rcx,[rip+0x14d7d]        # 0x65035328
    650205ab:	call   QWORD PTR [rip+0x13c97]        # 0x65034248
    650205b1:	test   rax,rax
    650205b4:	mov    r12,rax
    650205b7:	je     0x6502062a
    650205b9:	lea    rcx,[rsp+0x40]
    650205be:	xor    ebx,ebx
    650205c0:	mov    DWORD PTR [rsp+0x40],ebx
    650205c4:	call   0x65022c10
    650205c9:	cmp    DWORD PTR [rsp+0x40],0x5
    650205ce:	jg     0x6502060e
    650205d0:	xor    ecx,ecx
    650205d2:	call   QWORD PTR [rip+0x13c70]        # 0x65034248
    650205d8:	movsxd rcx,DWORD PTR [rax+0x3c]
    650205dc:	add    rcx,rax
    650205df:	movzx  eax,WORD PTR [rcx+0x14]
    650205e3:	lea    rdx,[rax+rcx*1+0x18]
    650205e8:	movzx  eax,WORD PTR [rcx+0x6]
    650205ec:	test   eax,eax
    650205ee:	je     0x6502060e
    650205f0:	lea    rsi,[rip+0x14d19]        # 0x65035310
    650205f7:	mov    rdi,rdx
    650205fa:	mov    ecx,0x8
    650205ff:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    65020601:	je     0x6502062a
    65020603:	add    ebx,0x1
    65020606:	add    rdx,0x28
    6502060a:	cmp    ebx,eax
    6502060c:	jb     0x650205f0
    6502060e:	lea    rdx,[rip+0x14d23]        # 0x65035338
    65020615:	mov    rcx,r12
    65020618:	call   QWORD PTR [rip+0x13a92]        # 0x650340b0
    6502061e:	test   rax,rax
    65020621:	je     0x6502062a
    65020623:	mov    rcx,rbp
    65020626:	call   rax
    65020628:	jmp    0x6502062d
    6502062a:	mov    rax,rbp
    6502062d:	mov    rbx,QWORD PTR [rsp+0x48]
    65020632:	mov    rbp,QWORD PTR [rsp+0x50]
    65020637:	add    rsp,0x20
    6502063b:	pop    r12
    6502063d:	pop    rdi
    6502063e:	pop    rsi
    6502063f:	ret    
    65020640:	xor    eax,eax
    65020642:	ret    
    65020643:	int3   
    65020644:	int3   
    65020645:	int3   
    65020646:	int3   
    65020647:	int3   
    65020648:	int3   
    65020649:	int3   
    6502064a:	int3   
    6502064b:	int3   
    6502064c:	int3   
    6502064d:	int3   
    6502064e:	int3   
    6502064f:	int3   
    65020650:	sub    rsp,0x28
    65020654:	mov    ecx,DWORD PTR [rip+0x21c46]        # 0x650422a0
    6502065a:	cmp    ecx,0xffffffff
    6502065d:	je     0x6502066f
    6502065f:	call   QWORD PTR [rip+0x13bfb]        # 0x65034260
    65020665:	mov    DWORD PTR [rip+0x21c31],0xffffffff        # 0x650422a0
    6502066f:	mov    ecx,DWORD PTR [rip+0x21c2f]        # 0x650422a4
    65020675:	cmp    ecx,0xffffffff
    65020678:	je     0x6502068a
    6502067a:	call   QWORD PTR [rip+0x13bd8]        # 0x65034258
    65020680:	mov    DWORD PTR [rip+0x21c1a],0xffffffff        # 0x650422a4
    6502068a:	add    rsp,0x28
    6502068e:	jmp    0x650295f0
    65020693:	int3   
    65020694:	int3   
    65020695:	int3   
    65020696:	int3   
    65020697:	int3   
    65020698:	int3   
    65020699:	int3   
    6502069a:	int3   
    6502069b:	int3   
    6502069c:	int3   
    6502069d:	int3   
    6502069e:	int3   
    6502069f:	int3   
    650206a0:	mov    QWORD PTR [rsp+0x10],rbx
    650206a5:	mov    QWORD PTR [rsp+0x18],rsi
    650206aa:	mov    QWORD PTR [rsp+0x20],rdi
    650206af:	push   r12
    650206b1:	push   r13
    650206b3:	push   r14
    650206b5:	sub    rsp,0x20
    650206b9:	mov    r13,rdx
    650206bc:	mov    r12,rcx
    650206bf:	lea    rcx,[rip+0x14c62]        # 0x65035328
    650206c6:	call   QWORD PTR [rip+0x13b7c]        # 0x65034248
    650206cc:	mov    r14,rax
    650206cf:	lea    rax,[rip+0x2235a]        # 0x65042a30
    650206d6:	mov    QWORD PTR [r12+0xa0],rax
    650206de:	mov    DWORD PTR [r12+0x1c],0x1
    650206e7:	test   r14,r14
    650206ea:	je     0x6502077e
    650206f0:	xor    ebx,ebx
    650206f2:	mov    DWORD PTR [rsp+0x40],ebx
    650206f6:	lea    rcx,[rsp+0x40]
    650206fb:	call   0x65022c10
    65020700:	cmp    DWORD PTR [rsp+0x40],0x5
    65020705:	jg     0x6502074e
    65020707:	xor    ecx,ecx
    65020709:	call   QWORD PTR [rip+0x13b39]        # 0x65034248
    6502070f:	movsxd rcx,DWORD PTR [rax+0x3c]
    65020713:	add    rcx,rax
    65020716:	movzx  eax,WORD PTR [rcx+0x14]
    6502071a:	lea    rdx,[rax+rcx*1+0x18]
    6502071f:	movzx  eax,WORD PTR [rcx+0x6]
    65020723:	test   eax,eax
    65020725:	je     0x6502074e
    65020727:	data16 xchg ax,ax
    6502072a:	data16 xchg ax,ax
    6502072d:	data16 xchg ax,ax
    65020730:	lea    rsi,[rip+0x14bd9]        # 0x65035310
    65020737:	mov    rdi,rdx
    6502073a:	mov    ecx,0x8
    6502073f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    65020741:	je     0x6502077e
    65020743:	add    ebx,0x1
    65020746:	add    rdx,0x28
    6502074a:	cmp    ebx,eax
    6502074c:	jb     0x65020730
    6502074e:	lea    rdx,[rip+0x14bc3]        # 0x65035318
    65020755:	mov    rcx,r14
    65020758:	call   QWORD PTR [rip+0x13952]        # 0x650340b0
    6502075e:	mov    QWORD PTR [r12+0x2a8],rax
    65020766:	lea    rdx,[rip+0x14bcb]        # 0x65035338
    6502076d:	mov    rcx,r14
    65020770:	call   QWORD PTR [rip+0x1393a]        # 0x650340b0
    65020776:	mov    QWORD PTR [r12+0x2b0],rax
    6502077e:	mov    DWORD PTR [r12+0xc8],0x1
    6502078a:	mov    BYTE PTR [r12+0x174],0x43
    65020793:	mov    BYTE PTR [r12+0x1f7],0x43
    6502079c:	lea    rax,[rip+0x21b4d]        # 0x650422f0
    650207a3:	mov    QWORD PTR [r12+0xb8],rax
    650207ab:	lock add DWORD PTR [rip+0x21b3d],0x1        # 0x650422f0
    650207b3:	mov    ecx,0xc
    650207b8:	call   0x650297c0
    650207bd:	nop
    650207be:	mov    QWORD PTR [r12+0xc0],r13
    650207c6:	test   r13,r13
    650207c9:	jne    0x650207da
    650207cb:	mov    rax,QWORD PTR [rip+0x221ce]        # 0x650429a0
    650207d2:	mov    QWORD PTR [r12+0xc0],rax
    650207da:	mov    rcx,QWORD PTR [r12+0xc0]
    650207e2:	call   0x65023b70
    650207e7:	nop
    650207e8:	mov    ecx,0xc
    650207ed:	call   0x65029690
    650207f2:	mov    rbx,QWORD PTR [rsp+0x48]
    650207f7:	mov    rsi,QWORD PTR [rsp+0x50]
    650207fc:	mov    rdi,QWORD PTR [rsp+0x58]
    65020801:	add    rsp,0x20
    65020805:	pop    r14
    65020807:	pop    r13
    65020809:	pop    r12
    6502080b:	ret    
    6502080c:	int3   
    6502080d:	int3   
    6502080e:	int3   
    6502080f:	int3   
    65020810:	rex push rbp
    65020812:	sub    rsp,0x20
    65020816:	mov    rbp,rdx
    65020819:	mov    ecx,0xc
    6502081e:	call   0x65029690
    65020823:	add    rsp,0x20
    65020827:	pop    rbp
    65020828:	ret    
    65020829:	int3   
    6502082a:	int3   
    6502082b:	int3   
    6502082c:	int3   
    6502082d:	int3   
    6502082e:	int3   
    6502082f:	int3   
    65020830:	mov    QWORD PTR [rsp+0x8],rbx
    65020835:	push   rdi
    65020836:	sub    rsp,0x20
    6502083a:	call   QWORD PTR [rip+0x13838]        # 0x65034078
    65020840:	mov    ecx,DWORD PTR [rip+0x21a5a]        # 0x650422a0
    65020846:	mov    edi,eax
    65020848:	call   QWORD PTR [rip+0x13a02]        # 0x65034250
    6502084e:	test   rax,rax
    65020851:	mov    rbx,rax
    65020854:	jne    0x650208a1
    65020856:	lea    ecx,[rax+0x1]
    65020859:	mov    edx,0x2d8
    6502085e:	call   0x65022980
    65020863:	test   rax,rax
    65020866:	mov    rbx,rax
    65020869:	je     0x650208a1
    6502086b:	mov    ecx,DWORD PTR [rip+0x21a2f]        # 0x650422a0
    65020871:	mov    rdx,rax
    65020874:	call   QWORD PTR [rip+0x139be]        # 0x65034238
    6502087a:	mov    rcx,rbx
    6502087d:	test   eax,eax
    6502087f:	je     0x6502089a
    65020881:	xor    edx,edx
    65020883:	call   0x650206a0
    65020888:	call   QWORD PTR [rip+0x139a2]        # 0x65034230
    6502088e:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
    65020896:	mov    DWORD PTR [rbx],eax
    65020898:	jmp    0x650208a1
    6502089a:	call   0x6501fa90
    6502089f:	xor    ebx,ebx
    650208a1:	mov    ecx,edi
    650208a3:	call   QWORD PTR [rip+0x1385f]        # 0x65034108
    650208a9:	mov    rax,rbx
    650208ac:	mov    rbx,QWORD PTR [rsp+0x30]
    650208b1:	add    rsp,0x20
    650208b5:	pop    rdi
    650208b6:	ret    
    650208b7:	int3   
    650208b8:	int3   
    650208b9:	int3   
    650208ba:	int3   
    650208bb:	int3   
    650208bc:	int3   
    650208bd:	int3   
    650208be:	int3   
    650208bf:	int3   
    650208c0:	mov    QWORD PTR [rsp+0x8],rbx
    650208c5:	push   rdi
    650208c6:	sub    rsp,0x20
    650208ca:	call   QWORD PTR [rip+0x137a8]        # 0x65034078
    650208d0:	mov    ecx,DWORD PTR [rip+0x219ca]        # 0x650422a0
    650208d6:	mov    edi,eax
    650208d8:	call   QWORD PTR [rip+0x13972]        # 0x65034250
    650208de:	test   rax,rax
    650208e1:	mov    rbx,rax
    650208e4:	jne    0x65020931
    650208e6:	lea    ecx,[rax+0x1]
    650208e9:	mov    edx,0x2d8
    650208ee:	call   0x65022980
    650208f3:	test   rax,rax
    650208f6:	mov    rbx,rax
    650208f9:	je     0x65020931
    650208fb:	mov    ecx,DWORD PTR [rip+0x2199f]        # 0x650422a0
    65020901:	mov    rdx,rax
    65020904:	call   QWORD PTR [rip+0x1392e]        # 0x65034238
    6502090a:	mov    rcx,rbx
    6502090d:	test   eax,eax
    6502090f:	je     0x6502092a
    65020911:	xor    edx,edx
    65020913:	call   0x650206a0
    65020918:	call   QWORD PTR [rip+0x13912]        # 0x65034230
    6502091e:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
    65020926:	mov    DWORD PTR [rbx],eax
    65020928:	jmp    0x65020931
    6502092a:	call   0x6501fa90
    6502092f:	xor    ebx,ebx
    65020931:	mov    ecx,edi
    65020933:	call   QWORD PTR [rip+0x137cf]        # 0x65034108
    65020939:	test   rbx,rbx
    6502093c:	jne    0x65020946
    6502093e:	lea    ecx,[rbx+0x10]
    65020941:	call   0x65022af0
    65020946:	mov    rax,rbx
    65020949:	mov    rbx,QWORD PTR [rsp+0x30]
    6502094e:	add    rsp,0x20
    65020952:	pop    rdi
    65020953:	ret    
    65020954:	int3   
    65020955:	int3   
    65020956:	int3   
    65020957:	int3   
    65020958:	int3   
    65020959:	int3   
    6502095a:	int3   
    6502095b:	int3   
    6502095c:	int3   
    6502095d:	int3   
    6502095e:	int3   
    6502095f:	int3   
    65020960:	test   rcx,rcx
    65020963:	je     0x65020a86
    65020969:	mov    QWORD PTR [rsp+0x10],rbx
    6502096e:	push   rdi
    6502096f:	sub    rsp,0x20
    65020973:	mov    rbx,rcx
    65020976:	mov    rcx,QWORD PTR [rcx+0x38]
    6502097a:	test   rcx,rcx
    6502097d:	je     0x65020984
    6502097f:	call   0x6501fa90
    65020984:	mov    rcx,QWORD PTR [rbx+0x48]
    65020988:	test   rcx,rcx
    6502098b:	je     0x65020992
    6502098d:	call   0x6501fa90
    65020992:	mov    rcx,QWORD PTR [rbx+0x58]
    65020996:	test   rcx,rcx
    65020999:	je     0x650209a0
    6502099b:	call   0x6501fa90
    650209a0:	mov    rcx,QWORD PTR [rbx+0x68]
    650209a4:	test   rcx,rcx
    650209a7:	je     0x650209ae
    650209a9:	call   0x6501fa90
    650209ae:	mov    rcx,QWORD PTR [rbx+0x78]
    650209b2:	test   rcx,rcx
    650209b5:	je     0x650209bc
    650209b7:	call   0x6501fa90
    650209bc:	mov    rcx,QWORD PTR [rbx+0x80]
    650209c3:	test   rcx,rcx
    650209c6:	je     0x650209cd
    650209c8:	call   0x6501fa90
    650209cd:	mov    rcx,QWORD PTR [rbx+0xa0]
    650209d4:	lea    rax,[rip+0x22055]        # 0x65042a30
    650209db:	cmp    rcx,rax
    650209de:	je     0x650209e5
    650209e0:	call   0x6501fa90
    650209e5:	mov    ecx,0xd
    650209ea:	call   0x650297c0
    650209ef:	nop
    650209f0:	mov    rcx,QWORD PTR [rbx+0xb8]
    650209f7:	mov    QWORD PTR [rsp+0x30],rcx
    650209fc:	test   rcx,rcx
    650209ff:	je     0x65020a1e
    65020a01:	lock add DWORD PTR [rcx],0xffffffff
    65020a05:	jne    0x65020a1e
    65020a07:	lea    rax,[rip+0x218e2]        # 0x650422f0
    65020a0e:	mov    rcx,QWORD PTR [rsp+0x30]
    65020a13:	cmp    rcx,rax
    65020a16:	je     0x65020a1e
    65020a18:	call   0x6501fa90
    65020a1d:	nop
    65020a1e:	mov    ecx,0xd
    65020a23:	call   0x65029690
    65020a28:	mov    ecx,0xc
    65020a2d:	call   0x650297c0
    65020a32:	nop
    65020a33:	mov    rdi,QWORD PTR [rbx+0xc0]
    65020a3a:	test   rdi,rdi
    65020a3d:	je     0x65020a6a
    65020a3f:	mov    rcx,rdi
    65020a42:	call   0x65023c10
    65020a47:	cmp    rdi,QWORD PTR [rip+0x21f52]        # 0x650429a0
    65020a4e:	je     0x65020a6a
    65020a50:	lea    rax,[rip+0x21de9]        # 0x65042840
    65020a57:	cmp    rdi,rax
    65020a5a:	je     0x65020a6a
    65020a5c:	cmp    DWORD PTR [rdi],0x0
    65020a5f:	jne    0x65020a6a
    65020a61:	mov    rcx,rdi
    65020a64:	call   0x650239e0
    65020a69:	nop
    65020a6a:	mov    ecx,0xc
    65020a6f:	call   0x65029690
    65020a74:	mov    rcx,rbx
    65020a77:	call   0x6501fa90
    65020a7c:	mov    rbx,QWORD PTR [rsp+0x38]
    65020a81:	add    rsp,0x20
    65020a85:	pop    rdi
    65020a86:	ret    0x0
    65020a89:	int3   
    65020a8a:	int3   
    65020a8b:	int3   
    65020a8c:	int3   
    65020a8d:	int3   
    65020a8e:	int3   
    65020a8f:	int3   
    65020a90:	rex push rbp
    65020a92:	sub    rsp,0x20
    65020a96:	mov    rbp,rdx
    65020a99:	mov    ecx,0xd
    65020a9e:	call   0x65029690
    65020aa3:	add    rsp,0x20
    65020aa7:	pop    rbp
    65020aa8:	ret    
    65020aa9:	int3   
    65020aaa:	int3   
    65020aab:	int3   
    65020aac:	int3   
    65020aad:	int3   
    65020aae:	int3   
    65020aaf:	int3   
    65020ab0:	rex push rbp
    65020ab2:	sub    rsp,0x20
    65020ab6:	mov    rbp,rdx
    65020ab9:	mov    ecx,0xc
    65020abe:	call   0x65029690
    65020ac3:	add    rsp,0x20
    65020ac7:	pop    rbp
    65020ac8:	ret    
    65020ac9:	int3   
    65020aca:	int3   
    65020acb:	int3   
    65020acc:	int3   
    65020acd:	int3   
    65020ace:	int3   
    65020acf:	int3   
    65020ad0:	rex push rbx
    65020ad2:	sub    rsp,0x20
    65020ad6:	mov    rbx,rcx
    65020ad9:	mov    ecx,DWORD PTR [rip+0x217c1]        # 0x650422a0
    65020adf:	cmp    ecx,0xffffffff
    65020ae2:	je     0x65020b08
    65020ae4:	test   rbx,rbx
    65020ae7:	jne    0x65020af8
    65020ae9:	call   QWORD PTR [rip+0x13761]        # 0x65034250
    65020aef:	mov    ecx,DWORD PTR [rip+0x217ab]        # 0x650422a0
    65020af5:	mov    rbx,rax
    65020af8:	xor    edx,edx
    65020afa:	call   QWORD PTR [rip+0x13738]        # 0x65034238
    65020b00:	mov    rcx,rbx
    65020b03:	call   0x65020960
    65020b08:	mov    ecx,DWORD PTR [rip+0x21796]        # 0x650422a4
    65020b0e:	cmp    ecx,0xffffffff
    65020b11:	je     0x65020b1b
    65020b13:	xor    edx,edx
    65020b15:	call   QWORD PTR [rip+0x1374d]        # 0x65034268
    65020b1b:	add    rsp,0x20
    65020b1f:	pop    rbx
    65020b20:	ret    
    65020b21:	int3   
    65020b22:	int3   
    65020b23:	int3   
    65020b24:	int3   
    65020b25:	int3   
    65020b26:	int3   
    65020b27:	int3   
    65020b28:	int3   
    65020b29:	int3   
    65020b2a:	int3   
    65020b2b:	int3   
    65020b2c:	int3   
    65020b2d:	int3   
    65020b2e:	int3   
    65020b2f:	int3   
    65020b30:	sub    rsp,0x28
    65020b34:	call   0x65022e90
    65020b39:	call   0x65029550
    65020b3e:	test   eax,eax
    65020b40:	jne    0x65020b84
    65020b42:	mov    ecx,DWORD PTR [rip+0x21758]        # 0x650422a0
    65020b48:	cmp    ecx,0xffffffff
    65020b4b:	je     0x65020b5d
    65020b4d:	call   QWORD PTR [rip+0x1370d]        # 0x65034260
    65020b53:	mov    DWORD PTR [rip+0x21743],0xffffffff        # 0x650422a0
    65020b5d:	mov    ecx,DWORD PTR [rip+0x21741]        # 0x650422a4
    65020b63:	cmp    ecx,0xffffffff
    65020b66:	je     0x65020b78
    65020b68:	call   QWORD PTR [rip+0x136ea]        # 0x65034258
    65020b6e:	mov    DWORD PTR [rip+0x2172c],0xffffffff        # 0x650422a4
    65020b78:	call   0x650295f0
    65020b7d:	xor    eax,eax
    65020b7f:	add    rsp,0x28
    65020b83:	ret    
    65020b84:	lea    rcx,[rip+0xfffffffffffffdd5]        # 0x65020960
    65020b8b:	call   QWORD PTR [rip+0x136df]        # 0x65034270
    65020b91:	cmp    eax,0xffffffff
    65020b94:	mov    DWORD PTR [rip+0x21706],eax        # 0x650422a0
    65020b9a:	jne    0x65020ba8
    65020b9c:	mov    ecx,DWORD PTR [rip+0x21702]        # 0x650422a4
    65020ba2:	cmp    ecx,eax
    65020ba4:	je     0x65020b78
    65020ba6:	jmp    0x65020b68
    65020ba8:	mov    edx,0x2d8
    65020bad:	mov    ecx,0x1
    65020bb2:	mov    QWORD PTR [rsp+0x20],rbx
    65020bb7:	call   0x65022980
    65020bbc:	test   rax,rax
    65020bbf:	mov    rbx,rax
    65020bc2:	je     0x65020c00
    65020bc4:	mov    ecx,DWORD PTR [rip+0x216d6]        # 0x650422a0
    65020bca:	mov    rdx,rax
    65020bcd:	call   QWORD PTR [rip+0x13665]        # 0x65034238
    65020bd3:	test   eax,eax
    65020bd5:	je     0x65020c00
    65020bd7:	xor    edx,edx
    65020bd9:	mov    rcx,rbx
    65020bdc:	call   0x650206a0
    65020be1:	call   QWORD PTR [rip+0x13649]        # 0x65034230
    65020be7:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
    65020bef:	mov    DWORD PTR [rbx],eax
    65020bf1:	mov    rbx,QWORD PTR [rsp+0x20]
    65020bf6:	mov    eax,0x1
    65020bfb:	add    rsp,0x28
    65020bff:	ret    
    65020c00:	mov    ecx,DWORD PTR [rip+0x2169a]        # 0x650422a0
    65020c06:	cmp    ecx,0xffffffff
    65020c09:	je     0x65020c1b
    65020c0b:	call   QWORD PTR [rip+0x1364f]        # 0x65034260
    65020c11:	mov    DWORD PTR [rip+0x21685],0xffffffff        # 0x650422a0
    65020c1b:	mov    ecx,DWORD PTR [rip+0x21683]        # 0x650422a4
    65020c21:	cmp    ecx,0xffffffff
    65020c24:	je     0x65020c36
    65020c26:	call   QWORD PTR [rip+0x1362c]        # 0x65034258
    65020c2c:	mov    DWORD PTR [rip+0x2166e],0xffffffff        # 0x650422a4
    65020c36:	call   0x650295f0
    65020c3b:	mov    rbx,QWORD PTR [rsp+0x20]
    65020c40:	xor    eax,eax
    65020c42:	add    rsp,0x28
    65020c46:	ret    
    65020c47:	int3   
    65020c48:	int3   
    65020c49:	int3   
    65020c4a:	int3   
    65020c4b:	int3   
    65020c4c:	int3   
    65020c4d:	int3   
    65020c4e:	int3   
    65020c4f:	int3   
    65020c50:	mov    QWORD PTR [rip+0x23001],rcx        # 0x65043c58
    65020c57:	ret    
    65020c58:	int3   
    65020c59:	int3   
    65020c5a:	int3   
    65020c5b:	int3   
    65020c5c:	int3   
    65020c5d:	int3   
    65020c5e:	int3   
    65020c5f:	int3   
    65020c60:	rex push rbx
    65020c62:	sub    rsp,0x20
    65020c66:	mov    rbx,rcx
    65020c69:	mov    rcx,QWORD PTR [rip+0x22fe8]        # 0x65043c58
    65020c70:	call   0x65020570
    65020c75:	test   rax,rax
    65020c78:	je     0x65020c8e
    65020c7a:	mov    rcx,rbx
    65020c7d:	call   rax
    65020c7f:	test   eax,eax
    65020c81:	je     0x65020c8e
    65020c83:	mov    eax,0x1
    65020c88:	add    rsp,0x20
    65020c8c:	pop    rbx
    65020c8d:	ret    
    65020c8e:	xor    eax,eax
    65020c90:	add    rsp,0x20
    65020c94:	pop    rbx
    65020c95:	ret    
    65020c96:	int3   
    65020c97:	int3   
    65020c98:	int3   
    65020c99:	int3   
    65020c9a:	int3   
    65020c9b:	int3   
    65020c9c:	int3   
    65020c9d:	int3   
    65020c9e:	int3   
    65020c9f:	int3   
    65020ca0:	rex push rbx
    65020ca2:	sub    rsp,0x30
    65020ca6:	mov    rbx,rcx
    65020ca9:	mov    ecx,0xe
    65020cae:	call   0x650297c0
    65020cb3:	nop
    65020cb4:	mov    rax,QWORD PTR [rbx+0x8]
    65020cb8:	test   rax,rax
    65020cbb:	je     0x65020d04
    65020cbd:	mov    rcx,QWORD PTR [rip+0x22fa4]        # 0x65043c68
    65020cc4:	mov    QWORD PTR [rsp+0x20],rcx
    65020cc9:	lea    rdx,[rip+0x22f90]        # 0x65043c60
    65020cd0:	test   rcx,rcx
    65020cd3:	je     0x65020cf3
    65020cd5:	cmp    QWORD PTR [rcx],rax
    65020cd8:	jne    0x65020ce9
    65020cda:	mov    rax,QWORD PTR [rcx+0x8]
    65020cde:	mov    QWORD PTR [rdx+0x8],rax
    65020ce2:	call   0x6501fa90
    65020ce7:	jmp    0x65020cf3
    65020ce9:	mov    rdx,rcx
    65020cec:	mov    QWORD PTR [rsp+0x20],rcx
    65020cf1:	jmp    0x65020cd0
    65020cf3:	mov    rcx,QWORD PTR [rbx+0x8]
    65020cf7:	call   0x6501fa90
    65020cfc:	mov    QWORD PTR [rbx+0x8],0x0
    65020d04:	mov    ecx,0xe
    65020d09:	call   0x65029690
    65020d0e:	add    rsp,0x30
    65020d12:	pop    rbx
    65020d13:	ret    
    65020d14:	int3   
    65020d15:	int3   
    65020d16:	int3   
    65020d17:	int3   
    65020d18:	int3   
    65020d19:	int3   
    65020d1a:	int3   
    65020d1b:	int3   
    65020d1c:	int3   
    65020d1d:	int3   
    65020d1e:	int3   
    65020d1f:	int3   
    65020d20:	rex push rbp
    65020d22:	sub    rsp,0x20
    65020d26:	mov    rbp,rdx
    65020d29:	mov    ecx,0xe
    65020d2e:	call   0x65029690
    65020d33:	add    rsp,0x20
    65020d37:	pop    rbp
    65020d38:	ret    
    65020d39:	int3   
    65020d3a:	int3   
    65020d3b:	int3   
    65020d3c:	int3   
    65020d3d:	int3   
    65020d3e:	int3   
    65020d3f:	int3   
    65020d40:	mov    QWORD PTR [rsp+0x8],rbx
    65020d45:	mov    QWORD PTR [rsp+0x10],rbp
    65020d4a:	mov    QWORD PTR [rsp+0x18],rsi
    65020d4f:	push   rdi
    65020d50:	sub    rsp,0x20
    65020d54:	test   rcx,rcx
    65020d57:	mov    rsi,r8
    65020d5a:	mov    rbp,rdx
    65020d5d:	mov    rbx,rcx
    65020d60:	jne    0x65020d67
    65020d62:	call   0x65022770
    65020d67:	movsxd rax,DWORD PTR [rbx+0x18]
    65020d6b:	mov    edi,DWORD PTR [rbx+0x14]
    65020d6e:	add    rax,QWORD PTR [rbp+0x8]
    65020d72:	jne    0x65020d79
    65020d74:	call   0x65022770
    65020d79:	xor    ecx,ecx
    65020d7b:	test   edi,edi
    65020d7d:	je     0x65020db8
    65020d7f:	mov    r8,QWORD PTR [rbp+0x8]
    65020d83:	movsxd r9,DWORD PTR [rbx+0x18]
    65020d87:	lea    rdx,[r8+r9*1]
    65020d8b:	xchg   ax,ax
    65020d8d:	data16 xchg ax,ax
    65020d90:	movsxd rax,DWORD PTR [rdx]
    65020d93:	add    rax,r8
    65020d96:	cmp    rsi,rax
    65020d99:	jl     0x65020da6
    65020d9b:	add    ecx,0x1
    65020d9e:	add    rdx,0x8
    65020da2:	cmp    ecx,edi
    65020da4:	jb     0x65020d90
    65020da6:	test   ecx,ecx
    65020da8:	je     0x65020db8
    65020daa:	lea    eax,[rcx-0x1]
    65020dad:	lea    rdx,[r9+rax*8]
    65020db1:	mov    eax,DWORD PTR [rdx+r8*1+0x4]
    65020db6:	jmp    0x65020dbb
    65020db8:	or     eax,0xffffffff
    65020dbb:	mov    rbx,QWORD PTR [rsp+0x30]
    65020dc0:	mov    rbp,QWORD PTR [rsp+0x38]
    65020dc5:	mov    rsi,QWORD PTR [rsp+0x40]
    65020dca:	add    rsp,0x20
    65020dce:	pop    rdi
    65020dcf:	ret    
    65020dd0:	mov    QWORD PTR [rsp+0x8],rbx
    65020dd5:	mov    QWORD PTR [rsp+0x10],rbp
    65020dda:	mov    QWORD PTR [rsp+0x18],rsi
    65020ddf:	push   rdi
    65020de0:	sub    rsp,0x20
    65020de4:	test   rcx,rcx
    65020de7:	mov    rbp,QWORD PTR [rdx]
    65020dea:	mov    rsi,rdx
    65020ded:	mov    rbx,rcx
    65020df0:	jne    0x65020df7
    65020df2:	call   0x65022770
    65020df7:	movsxd rax,DWORD PTR [rbx+0x18]
    65020dfb:	mov    edi,DWORD PTR [rbx+0x14]
    65020dfe:	add    rax,QWORD PTR [rsi+0x8]
    65020e02:	jne    0x65020e09
    65020e04:	call   0x65022770
    65020e09:	xor    ecx,ecx
    65020e0b:	test   edi,edi
    65020e0d:	je     0x65020e48
    65020e0f:	mov    r8,QWORD PTR [rsi+0x8]
    65020e13:	movsxd r9,DWORD PTR [rbx+0x18]
    65020e17:	lea    rdx,[r8+r9*1]
    65020e1b:	xchg   ax,ax
    65020e1d:	data16 xchg ax,ax
    65020e20:	movsxd rax,DWORD PTR [rdx]
    65020e23:	add    rax,r8
    65020e26:	cmp    rbp,rax
    65020e29:	jl     0x65020e36
    65020e2b:	add    ecx,0x1
    65020e2e:	add    rdx,0x8
    65020e32:	cmp    ecx,edi
    65020e34:	jb     0x65020e20
    65020e36:	test   ecx,ecx
    65020e38:	je     0x65020e48
    65020e3a:	lea    eax,[rcx-0x1]
    65020e3d:	lea    rcx,[r8+rax*8]
    65020e41:	mov    eax,DWORD PTR [rcx+r9*1+0x4]
    65020e46:	jmp    0x65020e4b
    65020e48:	or     eax,0xffffffff
    65020e4b:	mov    rbx,QWORD PTR [rsp+0x30]
    65020e50:	mov    rbp,QWORD PTR [rsp+0x38]
    65020e55:	mov    rsi,QWORD PTR [rsp+0x40]
    65020e5a:	add    rsp,0x20
    65020e5e:	pop    rdi
    65020e5f:	ret    
    65020e60:	mov    QWORD PTR [rsp+0x18],rbp
    65020e65:	push   rdi
    65020e66:	sub    rsp,0x20
    65020e6a:	movsxd r9,DWORD PTR [r8+0x1c]
    65020e6e:	mov    rax,QWORD PTR [rcx]
    65020e71:	mov    rdi,r8
    65020e74:	mov    eax,DWORD PTR [r9+rax*1]
    65020e78:	mov    rbp,rdx
    65020e7b:	cmp    eax,0xfffffffe
    65020e7e:	jne    0x65020ee7
    65020e80:	movsxd rax,DWORD PTR [r8+0x18]
    65020e84:	mov    QWORD PTR [rsp+0x30],rbx
    65020e89:	mov    ebx,DWORD PTR [r8+0x14]
    65020e8d:	add    rax,QWORD PTR [rdx+0x8]
    65020e91:	mov    QWORD PTR [rsp+0x38],rsi
    65020e96:	mov    rsi,QWORD PTR [rdx]
    65020e99:	jne    0x65020ea0
    65020e9b:	call   0x65022770
    65020ea0:	xor    ecx,ecx
    65020ea2:	test   ebx,ebx
    65020ea4:	je     0x65020eda
    65020ea6:	mov    r8,QWORD PTR [rbp+0x8]
    65020eaa:	movsxd r9,DWORD PTR [rdi+0x18]
    65020eae:	lea    rdx,[r8+r9*1]
    65020eb2:	movsxd rax,DWORD PTR [rdx]
    65020eb5:	add    rax,r8
    65020eb8:	cmp    rsi,rax
    65020ebb:	jl     0x65020ec8
    65020ebd:	add    ecx,0x1
    65020ec0:	add    rdx,0x8
    65020ec4:	cmp    ecx,ebx
    65020ec6:	jb     0x65020eb2
    65020ec8:	test   ecx,ecx
    65020eca:	je     0x65020eda
    65020ecc:	lea    eax,[rcx-0x1]
    65020ecf:	lea    rdx,[r9+rax*8]
    65020ed3:	mov    eax,DWORD PTR [rdx+r8*1+0x4]
    65020ed8:	jmp    0x65020edd
    65020eda:	or     eax,0xffffffff
    65020edd:	mov    rsi,QWORD PTR [rsp+0x38]
    65020ee2:	mov    rbx,QWORD PTR [rsp+0x30]
    65020ee7:	mov    rbp,QWORD PTR [rsp+0x40]
    65020eec:	add    rsp,0x20
    65020ef0:	pop    rdi
    65020ef1:	ret    
    65020ef2:	int3   
    65020ef3:	int3   
    65020ef4:	int3   
    65020ef5:	int3   
    65020ef6:	int3   
    65020ef7:	int3   
    65020ef8:	int3   
    65020ef9:	int3   
    65020efa:	int3   
    65020efb:	int3   
    65020efc:	int3   
    65020efd:	int3   
    65020efe:	int3   
    65020eff:	int3   
    65020f00:	movsxd rdx,DWORD PTR [r8+0x1c]
    65020f04:	mov    rax,QWORD PTR [rcx]
    65020f07:	mov    DWORD PTR [rdx+rax*1],r9d
    65020f0b:	ret    
    65020f0c:	int3   
    65020f0d:	int3   
    65020f0e:	int3   
    65020f0f:	int3   
    65020f10:	mov    QWORD PTR [rsp+0x8],rbx
    65020f15:	push   rdi
    65020f16:	sub    rsp,0x20
    65020f1a:	mov    edi,r9d
    65020f1d:	lea    r9,[rsp+0x40]
    65020f22:	mov    rbx,r8
    65020f25:	call   0x6501dc30
    65020f2a:	mov    rcx,QWORD PTR [rax]
    65020f2d:	movsxd rax,DWORD PTR [rbx+0x1c]
    65020f31:	mov    QWORD PTR [rsp+0x40],rcx
    65020f36:	cmp    edi,DWORD PTR [rax+rcx*1+0x4]
    65020f3a:	jle    0x65020f40
    65020f3c:	mov    DWORD PTR [rax+rcx*1+0x4],edi
    65020f40:	mov    rbx,QWORD PTR [rsp+0x30]
    65020f45:	add    rsp,0x20
    65020f49:	pop    rdi
    65020f4a:	ret    
    65020f4b:	int3   
    65020f4c:	int3   
    65020f4d:	int3   
    65020f4e:	int3   
    65020f4f:	int3   
    65020f50:	rex push rbx
    65020f52:	sub    rsp,0x20
    65020f56:	lea    r9,[rsp+0x40]
    65020f5b:	mov    rbx,r8
    65020f5e:	call   0x6501dc30
    65020f63:	mov    rcx,QWORD PTR [rax]
    65020f66:	movsxd rax,DWORD PTR [rbx+0x1c]
    65020f6a:	mov    QWORD PTR [rsp+0x40],rcx
    65020f6f:	mov    eax,DWORD PTR [rax+rcx*1+0x4]
    65020f73:	add    rsp,0x20
    65020f77:	pop    rbx
    65020f78:	ret    
    65020f79:	int3   
    65020f7a:	int3   
    65020f7b:	int3   
    65020f7c:	int3   
    65020f7d:	int3   
    65020f7e:	int3   
    65020f7f:	int3   
    65020f80:	lea    rax,[rip+0x143d1]        # 0x65035358
    65020f87:	mov    QWORD PTR [rcx],rax
    65020f8a:	jmp    0x6501d320
    65020f8f:	int3   
    65020f90:	mov    QWORD PTR [rsp+0x8],rbx
    65020f95:	push   rdi
    65020f96:	sub    rsp,0x20
    65020f9a:	lea    rax,[rip+0x143b7]        # 0x65035358
    65020fa1:	mov    ebx,edx
    65020fa3:	mov    rdi,rcx
    65020fa6:	mov    QWORD PTR [rcx],rax
    65020fa9:	call   0x6501d320
    65020fae:	test   bl,0x1
    65020fb1:	je     0x65020fbb
    65020fb3:	mov    rcx,rdi
    65020fb6:	call   0x6501d190
    65020fbb:	mov    rax,rdi
    65020fbe:	mov    rbx,QWORD PTR [rsp+0x30]
    65020fc3:	add    rsp,0x20
    65020fc7:	pop    rdi
    65020fc8:	ret    
    65020fc9:	int3   
    65020fca:	int3   
    65020fcb:	int3   
    65020fcc:	int3   
    65020fcd:	int3   
    65020fce:	int3   
    65020fcf:	int3   
    65020fd0:	sub    rsp,0x28
    65020fd4:	mov    rax,QWORD PTR [rcx]
    65020fd7:	mov    ecx,DWORD PTR [rax]
    65020fd9:	cmp    ecx,0xe0434f4d
    65020fdf:	je     0x65020ffe
    65020fe1:	cmp    ecx,0xe06d7363
    65020fe7:	jne    0x65021018
    65020fe9:	call   0x650208c0
    65020fee:	mov    DWORD PTR [rax+0x100],0x0
    65020ff8:	call   0x65022740
    65020ffd:	int3   
    65020ffe:	call   0x650208c0
    65021003:	cmp    DWORD PTR [rax+0x100],0x0
    6502100a:	jle    0x65021018
    6502100c:	call   0x650208c0
    65021011:	add    DWORD PTR [rax+0x100],0xffffffff
    65021018:	xor    eax,eax
    6502101a:	add    rsp,0x28
    6502101e:	ret    
    6502101f:	int3   
    65021020:	mov    DWORD PTR [rsp+0x20],r9d
    65021025:	mov    QWORD PTR [rsp+0x18],r8
    6502102a:	mov    QWORD PTR [rsp+0x10],rdx
    6502102f:	mov    QWORD PTR [rsp+0x8],rcx
    65021034:	push   rbx
    65021035:	push   rsi
    65021036:	push   rdi
    65021037:	push   r12
    65021039:	push   r13
    6502103b:	push   r14
    6502103d:	push   r15
    6502103f:	sub    rsp,0x30
    65021043:	mov    r13d,r9d
    65021046:	mov    rsi,r8
    65021049:	mov    rbx,rdx
    6502104c:	mov    r14,rcx
    6502104f:	call   0x65020e60
    65021054:	mov    edi,eax
    65021056:	call   0x6501dd40
    6502105b:	mov    r15,rax
    6502105e:	mov    QWORD PTR [rsp+0x28],rax
    65021063:	call   0x650208c0
    65021068:	add    DWORD PTR [rax+0x100],0x1
    6502106f:	nop
    65021070:	cmp    edi,0xffffffff
    65021073:	je     0x65021168
    65021079:	cmp    edi,r13d
    6502107c:	jle    0x65021168
    65021082:	cmp    edi,0xffffffff
    65021085:	jle    0x6502108c
    65021087:	cmp    edi,DWORD PTR [rsi+0x4]
    6502108a:	jl     0x65021091
    6502108c:	call   0x65022770
    65021091:	movsxd r12,edi
    65021094:	call   0x6501dd40
    65021099:	movsxd rcx,DWORD PTR [rsi+0x8]
    6502109d:	lea    rax,[rax+r12*8]
    650210a1:	mov    edi,DWORD PTR [rcx+rax*1]
    650210a4:	mov    DWORD PTR [rsp+0x20],edi
    650210a8:	call   0x6501dd40
    650210ad:	movsxd rcx,DWORD PTR [rsi+0x8]
    650210b1:	lea    rax,[rax+r12*8]
    650210b5:	cmp    DWORD PTR [rcx+rax*1+0x4],0x0
    650210ba:	je     0x6502113a
    650210bc:	call   0x6501dd40
    650210c1:	movsxd rcx,DWORD PTR [rsi+0x8]
    650210c5:	lea    rax,[rax+r12*8]
    650210c9:	movsxd rbx,DWORD PTR [rcx+rax*1+0x4]
    650210ce:	call   0x6501dd40
    650210d3:	lea    rcx,[rax+rbx*1]
    650210d7:	test   rcx,rcx
    650210da:	je     0x6502113a
    650210dc:	mov    r9d,edi
    650210df:	mov    r8,rsi
    650210e2:	mov    rdx,QWORD PTR [rsp+0x78]
    650210e7:	mov    rcx,r14
    650210ea:	call   0x65020f00
    650210ef:	call   0x6501dd40
    650210f4:	movsxd rcx,DWORD PTR [rsi+0x8]
    650210f8:	lea    rax,[rax+r12*8]
    650210fc:	cmp    DWORD PTR [rcx+rax*1+0x4],0x0
    65021101:	je     0x6502111f
    65021103:	call   0x6501dd40
    65021108:	movsxd rcx,DWORD PTR [rsi+0x8]
    6502110c:	lea    rax,[rax+r12*8]
    65021110:	movsxd rbx,DWORD PTR [rcx+rax*1+0x4]
    65021115:	call   0x6501dd40
    6502111a:	add    rax,rbx
    6502111d:	jmp    0x65021121
    6502111f:	xor    eax,eax
    65021121:	mov    r8d,0x103
    65021127:	mov    rdx,r14
    6502112a:	mov    rcx,rax
    6502112d:	call   0x65033120
    65021132:	mov    rcx,r15
    65021135:	call   0x6501dd80
    6502113a:	jmp    0x6502115a
    6502113c:	mov    r13d,DWORD PTR [rsp+0x88]
    65021144:	mov    rsi,QWORD PTR [rsp+0x80]
    6502114c:	mov    r14,QWORD PTR [rsp+0x70]
    65021151:	mov    r15,QWORD PTR [rsp+0x28]
    65021156:	mov    edi,DWORD PTR [rsp+0x20]
    6502115a:	mov    DWORD PTR [rsp+0x24],edi
    6502115e:	mov    rbx,QWORD PTR [rsp+0x78]
    65021163:	jmp    0x65021070
    65021168:	call   0x650208c0
    6502116d:	cmp    DWORD PTR [rax+0x100],0x0
    65021174:	jle    0x65021182
    65021176:	call   0x650208c0
    6502117b:	add    DWORD PTR [rax+0x100],0xffffffff
    65021182:	cmp    edi,0xffffffff
    65021185:	je     0x65021191
    65021187:	cmp    edi,r13d
    6502118a:	jle    0x65021191
    6502118c:	call   0x65022770
    65021191:	mov    r9d,edi
    65021194:	mov    r8,rsi
    65021197:	mov    rdx,rbx
    6502119a:	mov    rcx,r14
    6502119d:	call   0x65020f00
    650211a2:	add    rsp,0x30
    650211a6:	pop    r15
    650211a8:	pop    r14
    650211aa:	pop    r13
    650211ac:	pop    r12
    650211ae:	pop    rdi
    650211af:	pop    rsi
    650211b0:	pop    rbx
    650211b1:	ret    
    650211b2:	int3   
    650211b3:	int3   
    650211b4:	int3   
    650211b5:	int3   
    650211b6:	int3   
    650211b7:	int3   
    650211b8:	int3   
    650211b9:	int3   
    650211ba:	int3   
    650211bb:	int3   
    650211bc:	int3   
    650211bd:	int3   
    650211be:	int3   
    650211bf:	int3   
    650211c0:	rex push rbp
    650211c2:	sub    rsp,0x20
    650211c6:	mov    rbp,rdx
    650211c9:	call   0x65020fd0
    650211ce:	add    rsp,0x20
    650211d2:	pop    rbp
    650211d3:	ret    
    650211d4:	int3   
    650211d5:	int3   
    650211d6:	int3   
    650211d7:	int3   
    650211d8:	int3   
    650211d9:	int3   
    650211da:	int3   
    650211db:	int3   
    650211dc:	int3   
    650211dd:	int3   
    650211de:	int3   
    650211df:	int3   
    650211e0:	rex push rbp
    650211e2:	sub    rsp,0x20
    650211e6:	mov    rbp,rdx
    650211e9:	call   0x650208c0
    650211ee:	cmp    DWORD PTR [rax+0x100],0x0
    650211f5:	jle    0x65021203
    650211f7:	call   0x650208c0
    650211fc:	add    DWORD PTR [rax+0x100],0xffffffff
    65021203:	add    rsp,0x20
    65021207:	pop    rbp
    65021208:	ret    
    65021209:	int3   
    6502120a:	int3   
    6502120b:	int3   
    6502120c:	int3   
    6502120d:	int3   
    6502120e:	int3   
    6502120f:	int3   
    65021210:	rex push rbx
    65021212:	sub    rsp,0x20
    65021216:	mov    r9,QWORD PTR [rcx]
    65021219:	mov    DWORD PTR [r8],0x0
    65021220:	mov    rbx,r8
    65021223:	cmp    DWORD PTR [r9],0xe06d7363
    6502122a:	jne    0x650212b4
    65021230:	cmp    DWORD PTR [r9+0x18],0x4
    65021235:	jne    0x65021261
    65021237:	mov    eax,DWORD PTR [r9+0x20]
    6502123b:	cmp    eax,0x19930520
    65021240:	je     0x65021250
    65021242:	cmp    eax,0x19930521
    65021247:	je     0x65021250
    65021249:	cmp    eax,0x19930522
    6502124e:	jne    0x65021261
    65021250:	mov    rax,QWORD PTR [rdx+0x28]
    65021254:	cmp    QWORD PTR [r9+0x28],rax
    65021258:	jne    0x65021261
    6502125a:	mov    DWORD PTR [r8],0x1
    65021261:	cmp    DWORD PTR [r9],0xe06d7363
    65021268:	jne    0x650212b4
    6502126a:	cmp    DWORD PTR [r9+0x18],0x4
    6502126f:	jne    0x650212b4
    65021271:	mov    ecx,DWORD PTR [r9+0x20]
    65021275:	cmp    ecx,0x19930520
    6502127b:	je     0x6502128d
    6502127d:	cmp    ecx,0x19930521
    65021283:	je     0x6502128d
    65021285:	cmp    ecx,0x19930522
    6502128b:	jne    0x650212b4
    6502128d:	cmp    QWORD PTR [r9+0x30],0x0
    65021292:	jne    0x650212b4
    65021294:	call   0x650208c0
    65021299:	mov    DWORD PTR [rax+0x2d0],0x1
    650212a3:	mov    DWORD PTR [rbx],0x1
    650212a9:	mov    eax,0x1
    650212ae:	add    rsp,0x20
    650212b2:	pop    rbx
    650212b3:	ret    
    650212b4:	xor    eax,eax
    650212b6:	add    rsp,0x20
    650212ba:	pop    rbx
    650212bb:	ret    
    650212bc:	int3   
    650212bd:	int3   
    650212be:	int3   
    650212bf:	int3   
    650212c0:	test   rcx,rcx
    650212c3:	je     0x65021302
    650212c5:	mov    BYTE PTR [rsp+0x10],dl
    650212c9:	sub    rsp,0x28
    650212cd:	cmp    DWORD PTR [rcx],0xe06d7363
    650212d3:	jne    0x650212fe
    650212d5:	mov    rax,QWORD PTR [rcx+0x30]
    650212d9:	test   rax,rax
    650212dc:	je     0x650212fe
    650212de:	movsxd rdx,DWORD PTR [rax+0x4]
    650212e2:	test   edx,edx
    650212e4:	je     0x650212fe
    650212e6:	mov    rax,rdx
    650212e9:	mov    rdx,QWORD PTR [rcx+0x38]
    650212ed:	add    rdx,rax
    650212f0:	mov    rcx,QWORD PTR [rcx+0x28]
    650212f4:	call   rdx
    650212f6:	jmp    0x650212fe
    650212f8:	call   0x65022740
    650212fd:	nop
    650212fe:	add    rsp,0x28
    65021302:	ret    0x0
    65021305:	int3   
    65021306:	int3   
    65021307:	int3   
    65021308:	int3   
    65021309:	int3   
    6502130a:	int3   
    6502130b:	int3   
    6502130c:	int3   
    6502130d:	int3   
    6502130e:	int3   
    6502130f:	int3   
    65021310:	rex push rbp
    65021312:	sub    rsp,0x20
    65021316:	mov    rbp,rdx
    65021319:	xor    eax,eax
    6502131b:	cmp    BYTE PTR [rbp+0x38],al
    6502131e:	setne  al
    65021321:	add    rsp,0x20
    65021325:	pop    rbp
    65021326:	ret    
    65021327:	int3   
    65021328:	int3   
    65021329:	int3   
    6502132a:	int3   
    6502132b:	int3   
    6502132c:	int3   
    6502132d:	int3   
    6502132e:	int3   
    6502132f:	int3   
    65021330:	movsxd rax,DWORD PTR [rdx]
    65021333:	add    rax,rcx
    65021336:	cmp    DWORD PTR [rdx+0x4],0x0
    6502133a:	jl     0x65021352
    6502133c:	movsxd r9,DWORD PTR [rdx+0x4]
    65021340:	movsxd rdx,DWORD PTR [rdx+0x8]
    65021344:	mov    rcx,QWORD PTR [r9+rcx*1]
    65021348:	movsxd r8,DWORD PTR [rdx+rcx*1]
    6502134c:	add    r8,r9
    6502134f:	add    rax,r8
    65021352:	ret    0x0
    65021355:	int3   
    65021356:	int3   
    65021357:	int3   
    65021358:	int3   
    65021359:	int3   
    6502135a:	int3   
    6502135b:	int3   
    6502135c:	int3   
    6502135d:	int3   
    6502135e:	int3   
    6502135f:	int3   
    65021360:	mov    QWORD PTR [rsp+0x10],rdx
    65021365:	mov    QWORD PTR [rsp+0x8],rcx
    6502136a:	push   rbx
    6502136b:	push   rdi
    6502136c:	sub    rsp,0x48
    65021370:	test   rdx,rdx
    65021373:	mov    rbx,rdx
    65021376:	mov    rdi,rcx
    65021379:	jne    0x65021386
    6502137b:	call   0x65022770
    65021380:	call   0x65022740
    65021385:	int3   
    65021386:	mov    QWORD PTR [rsp+0x78],rbp
    6502138b:	xor    bpl,bpl
    6502138e:	mov    QWORD PTR [rsp+0x28],r14
    65021393:	xor    r14d,r14d
    65021396:	mov    BYTE PTR [rsp+0x70],bpl
    6502139b:	cmp    DWORD PTR [rdx],r14d
    6502139e:	jle    0x65021590
    650213a4:	mov    QWORD PTR [rsp+0x40],rsi
    650213a9:	mov    QWORD PTR [rsp+0x38],r12
    650213ae:	mov    QWORD PTR [rsp+0x30],r13
    650213b3:	mov    QWORD PTR [rsp+0x20],r15
    650213b8:	xor    r15d,r15d
    650213bb:	xchg   ax,ax
    650213bd:	data16 xchg ax,ax
    650213c0:	call   0x6501dd60
    650213c5:	mov    r11,rax
    650213c8:	mov    rax,QWORD PTR [rdi+0x30]
    650213cc:	movsxd rcx,DWORD PTR [rax+0xc]
    650213d0:	lea    r12,[r11+rcx*1+0x4]
    650213d5:	call   0x6501dd60
    650213da:	mov    r11,rax
    650213dd:	mov    rax,QWORD PTR [rdi+0x30]
    650213e1:	movsxd rcx,DWORD PTR [rax+0xc]
    650213e5:	mov    esi,DWORD PTR [r11+rcx*1]
    650213e9:	test   esi,esi
    650213eb:	jle    0x6502156b
    650213f1:	call   0x6501dd60
    650213f6:	mov    r13,QWORD PTR [rdi+0x30]
    650213fa:	mov    rbp,rax
    650213fd:	movsxd rax,DWORD PTR [r12]
    65021401:	add    rbp,rax
    65021404:	call   0x6501dd40
    65021409:	movsxd rdi,DWORD PTR [rbx+0x4]
    6502140d:	add    rax,r15
    65021410:	add    rdi,rax
    65021413:	cmp    DWORD PTR [rdi+0x4],0x0
    65021417:	je     0x6502154d
    6502141d:	movsxd rbx,DWORD PTR [rdi+0x4]
    65021421:	call   0x6501dd40
    65021426:	mov    r11,rax
    65021429:	add    r11,rbx
    6502142c:	je     0x65021520
    65021432:	test   ebx,ebx
    65021434:	je     0x65021445
    65021436:	movsxd rbx,DWORD PTR [rdi+0x4]
    6502143a:	call   0x6501dd40
    6502143f:	lea    r11,[rbx+rax*1]
    65021443:	jmp    0x65021448
    65021445:	xor    r11d,r11d
    65021448:	cmp    BYTE PTR [r11+0x10],0x0
    6502144d:	je     0x6502150c
    65021453:	test   ebx,ebx
    65021455:	je     0x65021468
    65021457:	call   0x6501dd40
    6502145c:	mov    rbx,rax
    6502145f:	movsxd rax,DWORD PTR [rdi+0x4]
    65021463:	add    rbx,rax
    65021466:	jmp    0x6502146a
    65021468:	xor    ebx,ebx
    6502146a:	call   0x6501dd60
    6502146f:	mov    r11,rax
    65021472:	movsxd rax,DWORD PTR [rbp+0x4]
    65021476:	add    r11,rax
    65021479:	cmp    rbx,r11
    6502147c:	je     0x650214c8
    6502147e:	cmp    DWORD PTR [rdi+0x4],0x0
    65021482:	je     0x65021495
    65021484:	call   0x6501dd40
    65021489:	mov    rbx,rax
    6502148c:	movsxd rax,DWORD PTR [rdi+0x4]
    65021490:	add    rbx,rax
    65021493:	jmp    0x65021497
    65021495:	xor    ebx,ebx
    65021497:	call   0x6501dd60
    6502149c:	mov    r11,rax
    6502149f:	movsxd rax,DWORD PTR [rbp+0x4]
    650214a3:	lea    r8,[r11+rax*1+0x10]
    650214a8:	lea    rax,[rbx+0x10]
    650214ac:	sub    r8,rax
    650214af:	nop
    650214b0:	movzx  edx,BYTE PTR [rax]
    650214b3:	movzx  ecx,BYTE PTR [rax+r8*1]
    650214b8:	sub    edx,ecx
    650214ba:	jne    0x650214c4
    650214bc:	add    rax,0x1
    650214c0:	test   ecx,ecx
    650214c2:	jne    0x650214b0
    650214c4:	test   edx,edx
    650214c6:	jne    0x650214f2
    650214c8:	test   BYTE PTR [rbp+0x0],0x2
    650214cc:	je     0x650214d3
    650214ce:	test   BYTE PTR [rdi],0x8
    650214d1:	je     0x650214f2
    650214d3:	mov    eax,DWORD PTR [r13+0x0]
    650214d7:	test   al,0x1
    650214d9:	je     0x650214e0
    650214db:	test   BYTE PTR [rdi],0x1
    650214de:	je     0x650214f2
    650214e0:	test   al,0x4
    650214e2:	je     0x650214e9
    650214e4:	test   BYTE PTR [rdi],0x4
    650214e7:	je     0x650214f2
    650214e9:	test   al,0x2
    650214eb:	je     0x65021548
    650214ed:	test   BYTE PTR [rdi],0x2
    650214f0:	jne    0x65021534
    650214f2:	sub    esi,0x1
    650214f5:	add    r12,0x4
    650214f9:	test   esi,esi
    650214fb:	jle    0x6502155c
    650214fd:	mov    rbx,QWORD PTR [rsp+0x68]
    65021502:	mov    rdi,QWORD PTR [rsp+0x60]
    65021507:	jmp    0x650213f1
    6502150c:	mov    rbx,QWORD PTR [rsp+0x68]
    65021511:	mov    rdi,QWORD PTR [rsp+0x60]
    65021516:	mov    bpl,0x1
    65021519:	mov    BYTE PTR [rsp+0x70],bpl
    6502151e:	jmp    0x6502156b
    65021520:	mov    rbx,QWORD PTR [rsp+0x68]
    65021525:	mov    rdi,QWORD PTR [rsp+0x60]
    6502152a:	mov    bpl,0x1
    6502152d:	mov    BYTE PTR [rsp+0x70],bpl
    65021532:	jmp    0x6502156b
    65021534:	mov    rbx,QWORD PTR [rsp+0x68]
    65021539:	mov    rdi,QWORD PTR [rsp+0x60]
    6502153e:	mov    bpl,0x1
    65021541:	mov    BYTE PTR [rsp+0x70],bpl
    65021546:	jmp    0x6502156b
    65021548:	mov    rbx,QWORD PTR [rsp+0x68]
    6502154d:	mov    rdi,QWORD PTR [rsp+0x60]
    65021552:	mov    bpl,0x1
    65021555:	mov    BYTE PTR [rsp+0x70],bpl
    6502155a:	jmp    0x6502156b
    6502155c:	mov    rbx,QWORD PTR [rsp+0x68]
    65021561:	mov    rdi,QWORD PTR [rsp+0x60]
    65021566:	movzx  ebp,BYTE PTR [rsp+0x70]
    6502156b:	add    r14d,0x1
    6502156f:	add    r15,0x14
    65021573:	cmp    r14d,DWORD PTR [rbx]
    65021576:	jl     0x650213c0
    6502157c:	mov    r15,QWORD PTR [rsp+0x20]
    65021581:	mov    r13,QWORD PTR [rsp+0x30]
    65021586:	mov    r12,QWORD PTR [rsp+0x38]
    6502158b:	mov    rsi,QWORD PTR [rsp+0x40]
    65021590:	mov    r14,QWORD PTR [rsp+0x28]
    65021595:	mov    al,bpl
    65021598:	mov    rbp,QWORD PTR [rsp+0x78]
    6502159d:	add    rsp,0x48
    650215a1:	pop    rdi
    650215a2:	pop    rbx
    650215a3:	ret    
    650215a4:	int3   
    650215a5:	int3   
    650215a6:	int3   
    650215a7:	int3   
    650215a8:	int3   
    650215a9:	int3   
    650215aa:	int3   
    650215ab:	int3   
    650215ac:	int3   
    650215ad:	int3   
    650215ae:	int3   
    650215af:	int3   
    650215b0:	mov    QWORD PTR [rsp+0x8],rbx
    650215b5:	mov    QWORD PTR [rsp+0x10],rbp
    650215ba:	mov    QWORD PTR [rsp+0x18],rsi
    650215bf:	push   rdi
    650215c0:	sub    rsp,0x20
    650215c4:	xor    edi,edi
    650215c6:	mov    rbp,rcx
    650215c9:	cmp    DWORD PTR [rcx],edi
    650215cb:	jle    0x6502161f
    650215cd:	xor    esi,esi
    650215cf:	nop
    650215d0:	call   0x6501dd40
    650215d5:	movsxd rcx,DWORD PTR [rbp+0x4]
    650215d9:	add    rax,rsi
    650215dc:	cmp    DWORD PTR [rcx+rax*1+0x4],0x0
    650215e1:	je     0x650215fe
    650215e3:	call   0x6501dd40
    650215e8:	movsxd rcx,DWORD PTR [rbp+0x4]
    650215ec:	add    rax,rsi
    650215ef:	movsxd rbx,DWORD PTR [rcx+rax*1+0x4]
    650215f4:	call   0x6501dd40
    650215f9:	add    rax,rbx
    650215fc:	jmp    0x65021600
    650215fe:	xor    eax,eax
    65021600:	lea    rdx,[rip+0x20cb1]        # 0x650422b8
    65021607:	mov    rcx,rax
    6502160a:	call   0x6501dc00
    6502160f:	test   al,al
    65021611:	jne    0x65021636
    65021613:	add    edi,0x1
    65021616:	add    rsi,0x14
    6502161a:	cmp    edi,DWORD PTR [rbp+0x0]
    6502161d:	jl     0x650215d0
    6502161f:	xor    al,al
    65021621:	mov    rbx,QWORD PTR [rsp+0x30]
    65021626:	mov    rbp,QWORD PTR [rsp+0x38]
    6502162b:	mov    rsi,QWORD PTR [rsp+0x40]
    65021630:	add    rsp,0x20
    65021634:	pop    rdi
    65021635:	ret    
    65021636:	mov    al,0x1
    65021638:	jmp    0x65021621
    6502163a:	int3   
    6502163b:	int3   
    6502163c:	int3   
    6502163d:	int3   
    6502163e:	int3   
    6502163f:	int3   
    65021640:	rex push rbx
    65021642:	push   rsi
    65021643:	push   rdi
    65021644:	push   r12
    65021646:	push   r13
    65021648:	push   r14
    6502164a:	push   r15
    6502164c:	sub    rsp,0x70
    65021650:	mov    rdi,rcx
    65021653:	xor    r12d,r12d
    65021656:	mov    DWORD PTR [rsp+0x20],r12d
    6502165b:	mov    DWORD PTR [rsp+0xb0],r12d
    65021663:	mov    QWORD PTR [rsp+0x40],r12
    65021668:	mov    QWORD PTR [rsp+0xc8],r12
    65021670:	call   0x650208c0
    65021675:	mov    r15,QWORD PTR [rax+0xf8]
    6502167c:	mov    QWORD PTR [rsp+0x28],r15
    65021681:	call   0x650208c0
    65021686:	mov    rax,QWORD PTR [rax+0xf0]
    6502168d:	mov    QWORD PTR [rsp+0xc0],rax
    65021695:	mov    rsi,QWORD PTR [rdi+0x50]
    65021699:	mov    QWORD PTR [rsp+0xb8],rsi
    650216a1:	mov    rax,QWORD PTR [rdi+0x48]
    650216a5:	mov    QWORD PTR [rsp+0x38],rax
    650216aa:	mov    rbx,QWORD PTR [rdi+0x40]
    650216ae:	mov    rax,QWORD PTR [rdi+0x30]
    650216b2:	mov    QWORD PTR [rsp+0x48],rax
    650216b7:	mov    r13,QWORD PTR [rdi+0x28]
    650216bb:	mov    QWORD PTR [rsp+0x50],r13
    650216c0:	call   0x650208c0
    650216c5:	mov    QWORD PTR [rax+0xf0],rsi
    650216cc:	call   0x650208c0
    650216d1:	mov    QWORD PTR [rax+0xf8],rbx
    650216d8:	call   0x650208c0
    650216dd:	mov    rdx,QWORD PTR [rax+0xf0]
    650216e4:	mov    rdx,QWORD PTR [rdx+0x28]
    650216e8:	lea    rcx,[rsp+0x60]
    650216ed:	call   0x6501e240
    650216f2:	mov    r14,rax
    650216f5:	mov    QWORD PTR [rsp+0x30],rax
    650216fa:	cmp    QWORD PTR [rdi+0x58],r12
    650216fe:	je     0x6502172b
    65021700:	mov    DWORD PTR [rsp+0xb0],0x1
    6502170b:	call   0x650208c0
    65021710:	mov    rbx,QWORD PTR [rax+0x138]
    65021717:	mov    QWORD PTR [rsp+0xc8],rbx
    6502171f:	call   0x650208c0
    65021724:	mov    QWORD PTR [rax+0xf0],rbx
    6502172b:	mov    r8d,0x100
    65021731:	mov    rdx,r13
    65021734:	mov    rcx,QWORD PTR [rsp+0x48]
    65021739:	call   0x65033120
    6502173e:	mov    rbx,rax
    65021741:	mov    QWORD PTR [rsp+0x40],rax
    65021746:	mov    rdi,QWORD PTR [rsp+0xc0]
    6502174e:	jmp    0x650217e1
    65021753:	mov    DWORD PTR [rsp+0x20],0x1
    6502175b:	call   0x650208c0
    65021760:	xor    r12d,r12d
    65021763:	mov    DWORD PTR [rax+0x2d0],r12d
    6502176a:	cmp    DWORD PTR [rsp+0xb0],r12d
    65021772:	je     0x650217a5
    65021774:	mov    dl,0x1
    65021776:	mov    rsi,QWORD PTR [rsp+0xb8]
    6502177e:	mov    rcx,rsi
    65021781:	call   0x650212c0
    65021786:	mov    r11,QWORD PTR [rsp+0xc8]
    6502178e:	lea    r9,[r11+0x20]
    65021792:	mov    r8d,DWORD PTR [r11+0x18]
    65021796:	mov    edx,DWORD PTR [r11+0x4]
    6502179a:	mov    ecx,DWORD PTR [r11]
    6502179d:	call   QWORD PTR [rip+0x12a15]        # 0x650341b8
    650217a3:	jmp    0x650217c0
    650217a5:	mov    rsi,QWORD PTR [rsp+0xb8]
    650217ad:	lea    r9,[rsi+0x20]
    650217b1:	mov    r8d,DWORD PTR [rsi+0x18]
    650217b5:	mov    edx,DWORD PTR [rsi+0x4]
    650217b8:	mov    ecx,DWORD PTR [rsi]
    650217ba:	call   QWORD PTR [rip+0x129f8]        # 0x650341b8
    650217c0:	mov    r12d,DWORD PTR [rsp+0x20]
    650217c5:	mov    rbx,QWORD PTR [rsp+0x40]
    650217ca:	mov    r15,QWORD PTR [rsp+0x28]
    650217cf:	mov    rdi,QWORD PTR [rsp+0xc0]
    650217d7:	mov    r13,QWORD PTR [rsp+0x50]
    650217dc:	mov    r14,QWORD PTR [rsp+0x30]
    650217e1:	mov    rcx,r14
    650217e4:	call   0x6501e2e0
    650217e9:	test   r12d,r12d
    650217ec:	jne    0x6502182b
    650217ee:	cmp    DWORD PTR [rsi],0xe06d7363
    650217f4:	jne    0x6502182b
    650217f6:	cmp    DWORD PTR [rsi+0x18],0x4
    650217fa:	jne    0x6502182b
    650217fc:	mov    eax,DWORD PTR [rsi+0x20]
    650217ff:	cmp    eax,0x19930520
    65021804:	je     0x65021814
    65021806:	cmp    eax,0x19930521
    6502180b:	je     0x65021814
    6502180d:	cmp    eax,0x19930522
    65021812:	jne    0x6502182b
    65021814:	mov    rcx,QWORD PTR [rsi+0x28]
    65021818:	call   0x6501e290
    6502181d:	test   eax,eax
    6502181f:	je     0x6502182b
    65021821:	mov    dl,0x1
    65021823:	mov    rcx,rsi
    65021826:	call   0x650212c0
    6502182b:	call   0x650208c0
    65021830:	mov    QWORD PTR [rax+0xf0],rdi
    65021837:	call   0x650208c0
    6502183c:	mov    QWORD PTR [rax+0xf8],r15
    65021843:	mov    rax,QWORD PTR [rsp+0x38]
    65021848:	movsxd rcx,DWORD PTR [rax+0x1c]
    6502184c:	mov    rax,QWORD PTR [r13+0x0]
    65021850:	mov    QWORD PTR [rcx+rax*1],0xfffffffffffffffe
    65021858:	mov    rax,rbx
    6502185b:	add    rsp,0x70
    6502185f:	pop    r15
    65021861:	pop    r14
    65021863:	pop    r13
    65021865:	pop    r12
    65021867:	pop    rdi
    65021868:	pop    rsi
    65021869:	pop    rbx
    6502186a:	ret    
    6502186b:	int3   
    6502186c:	int3   
    6502186d:	int3   
    6502186e:	int3   
    6502186f:	int3   
    65021870:	rex push rbp
    65021872:	sub    rsp,0x20
    65021876:	mov    rbp,rdx
    65021879:	mov    QWORD PTR [rbp+0x58],rcx
    6502187d:	lea    r8,[rbp+0x20]
    65021881:	mov    rdx,QWORD PTR [rbp+0xb8]
    65021888:	call   0x65021210
    6502188d:	add    rsp,0x20
    65021891:	pop    rbp
    65021892:	ret    
    65021893:	int3   
    65021894:	int3   
    65021895:	int3   
    65021896:	int3   
    65021897:	int3   
    65021898:	int3   
    65021899:	int3   
    6502189a:	int3   
    6502189b:	int3   
    6502189c:	int3   
    6502189d:	int3   
    6502189e:	int3   
    6502189f:	int3   
    650218a0:	rex push rbx
    650218a2:	push   rbp
    650218a3:	sub    rsp,0x28
    650218a7:	mov    rbp,rdx
    650218aa:	mov    rcx,QWORD PTR [rbp+0x30]
    650218ae:	call   0x6501e2e0
    650218b3:	cmp    DWORD PTR [rbp+0x20],0x0
    650218b7:	jne    0x650218fd
    650218b9:	mov    rbx,QWORD PTR [rbp+0xb8]
    650218c0:	cmp    DWORD PTR [rbx],0xe06d7363
    650218c6:	jne    0x650218fd
    650218c8:	cmp    DWORD PTR [rbx+0x18],0x4
    650218cc:	jne    0x650218fd
    650218ce:	mov    eax,DWORD PTR [rbx+0x20]
    650218d1:	cmp    eax,0x19930520
    650218d6:	je     0x650218e6
    650218d8:	cmp    eax,0x19930521
    650218dd:	je     0x650218e6
    650218df:	cmp    eax,0x19930522
    650218e4:	jne    0x650218fd
    650218e6:	mov    rcx,QWORD PTR [rbx+0x28]
    650218ea:	call   0x6501e290
    650218ef:	test   eax,eax
    650218f1:	je     0x650218fd
    650218f3:	mov    dl,0x1
    650218f5:	mov    rcx,rbx
    650218f8:	call   0x650212c0
    650218fd:	call   0x650208c0
    65021902:	mov    rcx,QWORD PTR [rbp+0xc0]
    65021909:	mov    QWORD PTR [rax+0xf0],rcx
    65021910:	call   0x650208c0
    65021915:	mov    rcx,QWORD PTR [rbp+0x28]
    65021919:	mov    QWORD PTR [rax+0xf8],rcx
    65021920:	add    rsp,0x28
    65021924:	pop    rbp
    65021925:	pop    rbx
    65021926:	ret    
    65021927:	int3   
    65021928:	int3   
    65021929:	int3   
    6502192a:	int3   
    6502192b:	int3   
    6502192c:	int3   
    6502192d:	int3   
    6502192e:	int3   
    6502192f:	int3   
    65021930:	mov    QWORD PTR [rsp+0x8],rbx
    65021935:	mov    QWORD PTR [rsp+0x10],rsi
    6502193a:	mov    QWORD PTR [rsp+0x18],rdi
    6502193f:	push   r12
    65021941:	push   r13
    65021943:	push   r14
    65021945:	sub    rsp,0x30
    65021949:	mov    rdi,r9
    6502194c:	mov    r12,r8
    6502194f:	mov    rsi,rdx
    65021952:	mov    r14,rcx
    65021955:	xor    ebx,ebx
    65021957:	cmp    DWORD PTR [r8+0x4],ebx
    6502195b:	je     0x65021b3b
    65021961:	movsxd r13,DWORD PTR [r8+0x4]
    65021965:	call   0x6501dd40
    6502196a:	lea    rdx,[r13+rax*1+0x0]
    6502196f:	test   rdx,rdx
    65021972:	je     0x65021b3b
    65021978:	test   r13d,r13d
    6502197b:	je     0x6502198f
    6502197d:	call   0x6501dd40
    65021982:	mov    r11,rax
    65021985:	movsxd rax,DWORD PTR [r12+0x4]
    6502198a:	add    r11,rax
    6502198d:	jmp    0x65021992
    6502198f:	mov    r11,rbx
    65021992:	cmp    BYTE PTR [r11+0x10],bl
    65021996:	je     0x65021b3b
    6502199c:	movsxd rax,DWORD PTR [r12+0x8]
    650219a1:	test   eax,eax
    650219a3:	jne    0x650219b1
    650219a5:	bt     DWORD PTR [r12],0x1f
    650219ab:	jae    0x65021b3b
    650219b1:	mov    ecx,DWORD PTR [r12]
    650219b5:	bt     ecx,0x1f
    650219b9:	jb     0x650219c1
    650219bb:	add    rax,QWORD PTR [rsi]
    650219be:	mov    rsi,rax
    650219c1:	test   cl,0x8
    650219c4:	je     0x65021a0b
    650219c6:	mov    edx,0x1
    650219cb:	mov    rcx,QWORD PTR [r14+0x28]
    650219cf:	call   0x65029820
    650219d4:	test   eax,eax
    650219d6:	je     0x65021a01
    650219d8:	mov    edx,0x1
    650219dd:	mov    rcx,rsi
    650219e0:	call   0x65029820
    650219e5:	test   eax,eax
    650219e7:	je     0x65021a01
    650219e9:	mov    rcx,QWORD PTR [r14+0x28]
    650219ed:	mov    QWORD PTR [rsi],rcx
    650219f0:	lea    rdx,[rdi+0x8]
    650219f4:	call   0x65021330
    650219f9:	mov    QWORD PTR [rsi],rax
    650219fc:	jmp    0x65021b31
    65021a01:	call   0x65022770
    65021a06:	jmp    0x65021b31
    65021a0b:	test   BYTE PTR [rdi],0x1
    65021a0e:	je     0x65021a74
    65021a10:	mov    edx,0x1
    65021a15:	mov    rcx,QWORD PTR [r14+0x28]
    65021a19:	call   0x65029820
    65021a1e:	test   eax,eax
    65021a20:	je     0x65021a6a
    65021a22:	mov    edx,0x1
    65021a27:	mov    rcx,rsi
    65021a2a:	call   0x65029820
    65021a2f:	test   eax,eax
    65021a31:	je     0x65021a6a
    65021a33:	movsxd r8,DWORD PTR [rdi+0x14]
    65021a37:	mov    rdx,QWORD PTR [r14+0x28]
    65021a3b:	mov    rcx,rsi
    65021a3e:	call   0x6501fbc0
    65021a43:	cmp    DWORD PTR [rdi+0x14],0x8
    65021a47:	jne    0x65021b31
    65021a4d:	mov    rcx,QWORD PTR [rsi]
    65021a50:	test   rcx,rcx
    65021a53:	je     0x65021b31
    65021a59:	lea    rdx,[rdi+0x8]
    65021a5d:	call   0x65021330
    65021a62:	mov    QWORD PTR [rsi],rax
    65021a65:	jmp    0x65021b31
    65021a6a:	call   0x65022770
    65021a6f:	jmp    0x65021b31
    65021a74:	cmp    DWORD PTR [rdi+0x18],0x0
    65021a78:	je     0x65021ae7
    65021a7a:	call   0x6501dd60
    65021a7f:	mov    rdx,rax
    65021a82:	movsxd rax,DWORD PTR [rdi+0x18]
    65021a86:	add    rdx,rax
    65021a89:	je     0x65021ae7
    65021a8b:	mov    edx,0x1
    65021a90:	mov    rcx,QWORD PTR [r14+0x28]
    65021a94:	call   0x65029820
    65021a99:	test   eax,eax
    65021a9b:	je     0x65021ae0
    65021a9d:	mov    edx,0x1
    65021aa2:	mov    rcx,rsi
    65021aa5:	call   0x65029820
    65021aaa:	test   eax,eax
    65021aac:	je     0x65021ae0
    65021aae:	cmp    DWORD PTR [rdi+0x18],0x0
    65021ab2:	je     0x65021ac5
    65021ab4:	call   0x6501dd60
    65021ab9:	mov    rcx,rax
    65021abc:	movsxd rax,DWORD PTR [rdi+0x18]
    65021ac0:	add    rcx,rax
    65021ac3:	jmp    0x65021ac8
    65021ac5:	mov    rcx,rbx
    65021ac8:	call   0x65029820
    65021acd:	test   eax,eax
    65021acf:	je     0x65021ae0
    65021ad1:	test   BYTE PTR [rdi],0x4
    65021ad4:	setne  bl
    65021ad7:	add    ebx,0x1
    65021ada:	mov    DWORD PTR [rsp+0x20],ebx
    65021ade:	jmp    0x65021b31
    65021ae0:	call   0x65022770
    65021ae5:	jmp    0x65021b31
    65021ae7:	mov    edx,0x1
    65021aec:	mov    rcx,QWORD PTR [r14+0x28]
    65021af0:	call   0x65029820
    65021af5:	test   eax,eax
    65021af7:	je     0x65021b2b
    65021af9:	mov    edx,0x1
    65021afe:	mov    rcx,rsi
    65021b01:	call   0x65029820
    65021b06:	test   eax,eax
    65021b08:	je     0x65021b2b
    65021b0a:	movsxd r10,DWORD PTR [rdi+0x14]
    65021b0e:	lea    rdx,[rdi+0x8]
    65021b12:	mov    rcx,QWORD PTR [r14+0x28]
    65021b16:	call   0x65021330
    65021b1b:	mov    rdx,rax
    65021b1e:	mov    r8,r10
    65021b21:	mov    rcx,rsi
    65021b24:	call   0x6501fbc0
    65021b29:	jmp    0x65021b31
    65021b2b:	call   0x65022770
    65021b30:	nop
    65021b31:	mov    eax,ebx
    65021b33:	jmp    0x65021b3d
    65021b35:	call   0x65022740
    65021b3a:	nop
    65021b3b:	xor    eax,eax
    65021b3d:	mov    rbx,QWORD PTR [rsp+0x50]
    65021b42:	mov    rsi,QWORD PTR [rsp+0x58]
    65021b47:	mov    rdi,QWORD PTR [rsp+0x60]
    65021b4c:	add    rsp,0x30
    65021b50:	pop    r14
    65021b52:	pop    r13
    65021b54:	pop    r12
    65021b56:	ret    
    65021b57:	int3   
    65021b58:	int3   
    65021b59:	int3   
    65021b5a:	int3   
    65021b5b:	int3   
    65021b5c:	int3   
    65021b5d:	int3   
    65021b5e:	int3   
    65021b5f:	int3   
    65021b60:	mov    QWORD PTR [rsp+0x8],rbx
    65021b65:	mov    QWORD PTR [rsp+0x10],rsi
    65021b6a:	push   rdi
    65021b6b:	sub    rsp,0x20
    65021b6f:	mov    rbx,r9
    65021b72:	mov    rsi,rcx
    65021b75:	bt     DWORD PTR [r8],0x1f
    65021b7a:	jae    0x65021b81
    65021b7c:	mov    rdi,rdx
    65021b7f:	jmp    0x65021b88
    65021b81:	movsxd rdi,DWORD PTR [r8+0x8]
    65021b85:	add    rdi,QWORD PTR [rdx]
    65021b88:	call   0x65021930
    65021b8d:	sub    eax,0x1
    65021b90:	je     0x65021bcf
    65021b92:	cmp    eax,0x1
    65021b95:	jne    0x65021bfc
    65021b97:	cmp    DWORD PTR [rbx+0x18],0x0
    65021b9b:	je     0x65021bae
    65021b9d:	call   0x6501dd60
    65021ba2:	mov    r11,rax
    65021ba5:	movsxd rax,DWORD PTR [rbx+0x18]
    65021ba9:	add    r11,rax
    65021bac:	jmp    0x65021bb1
    65021bae:	xor    r11d,r11d
    65021bb1:	lea    rdx,[rbx+0x8]
    65021bb5:	mov    rcx,QWORD PTR [rsi+0x28]
    65021bb9:	call   0x65021330
    65021bbe:	mov    rdx,rax
    65021bc1:	mov    r8d,0x1
    65021bc7:	mov    rcx,rdi
    65021bca:	call   r11
    65021bcd:	jmp    0x65021bfc
    65021bcf:	cmp    DWORD PTR [rbx+0x18],0x0
    65021bd3:	je     0x65021be3
    65021bd5:	call   0x6501dd60
    65021bda:	movsxd r11,DWORD PTR [rbx+0x18]
    65021bde:	add    r11,rax
    65021be1:	jmp    0x65021be6
    65021be3:	xor    r11d,r11d
    65021be6:	lea    rdx,[rbx+0x8]
    65021bea:	mov    rcx,QWORD PTR [rsi+0x28]
    65021bee:	call   0x65021330
    65021bf3:	mov    rdx,rax
    65021bf6:	mov    rcx,rdi
    65021bf9:	call   r11
    65021bfc:	jmp    0x65021c04
    65021bfe:	call   0x65022740
    65021c03:	nop
    65021c04:	mov    rbx,QWORD PTR [rsp+0x30]
    65021c09:	mov    rsi,QWORD PTR [rsp+0x38]
    65021c0e:	add    rsp,0x20
    65021c12:	pop    rdi
    65021c13:	ret    
    65021c14:	int3   
    65021c15:	int3   
    65021c16:	int3   
    65021c17:	int3   
    65021c18:	int3   
    65021c19:	int3   
    65021c1a:	int3   
    65021c1b:	int3   
    65021c1c:	int3   
    65021c1d:	int3   
    65021c1e:	int3   
    65021c1f:	int3   
    65021c20:	mov    rax,rsp
    65021c23:	mov    QWORD PTR [rax+0x18],r8
    65021c27:	push   rsi
    65021c28:	push   r12
    65021c2a:	push   r14
    65021c2c:	push   r15
    65021c2e:	sub    rsp,0x78
    65021c32:	cmp    DWORD PTR [rcx],0x80000003
    65021c38:	mov    r14,r9
    65021c3b:	mov    rsi,r8
    65021c3e:	mov    r15,rdx
    65021c41:	mov    r12,rcx
    65021c44:	je     0x65021e8b
    65021c4a:	mov    QWORD PTR [rax+0x10],rbx
    65021c4e:	mov    QWORD PTR [rax-0x30],rdi
    65021c52:	mov    QWORD PTR [rax-0x38],r13
    65021c56:	call   0x650208c0
    65021c5b:	mov    edi,DWORD PTR [rsp+0xd0]
    65021c62:	mov    r13,QWORD PTR [rsp+0xc0]
    65021c6a:	cmp    QWORD PTR [rax+0xe0],0x0
    65021c72:	je     0x65021cc3
    65021c74:	call   0x650208c0
    65021c79:	mov    rbx,rax
    65021c7c:	call   0x65020480
    65021c81:	cmp    QWORD PTR [rbx+0xe0],rax
    65021c88:	je     0x65021cc3
    65021c8a:	cmp    DWORD PTR [r12],0xe0434f4d
    65021c92:	je     0x65021cc3
    65021c94:	mov    rax,QWORD PTR [rsp+0xd8]
    65021c9c:	mov    r9,r14
    65021c9f:	mov    r8,rsi
    65021ca2:	mov    QWORD PTR [rsp+0x30],rax
    65021ca7:	mov    rdx,r15
    65021caa:	mov    rcx,r12
    65021cad:	mov    DWORD PTR [rsp+0x28],edi
    65021cb1:	mov    QWORD PTR [rsp+0x20],r13
    65021cb6:	call   0x6501e050
    65021cbb:	test   eax,eax
    65021cbd:	jne    0x65021e79
    65021cc3:	cmp    DWORD PTR [r13+0xc],0x0
    65021cc8:	mov    QWORD PTR [rsp+0x70],rbp
    65021ccd:	jne    0x65021cd4
    65021ccf:	call   0x65022770
    65021cd4:	mov    ebp,DWORD PTR [rsp+0xc8]
    65021cdb:	lea    rax,[rsp+0x50]
    65021ce0:	mov    QWORD PTR [rsp+0x30],r14
    65021ce5:	mov    QWORD PTR [rsp+0x28],rax
    65021cea:	lea    rax,[rsp+0xa0]
    65021cf2:	mov    r8d,edi
    65021cf5:	mov    r9d,ebp
    65021cf8:	mov    rdx,r13
    65021cfb:	mov    rcx,r15
    65021cfe:	mov    QWORD PTR [rsp+0x20],rax
    65021d03:	call   0x6501e100
    65021d08:	mov    rsi,rax
    65021d0b:	mov    eax,DWORD PTR [rsp+0xa0]
    65021d12:	cmp    eax,DWORD PTR [rsp+0x50]
    65021d16:	jae    0x65021e74
    65021d1c:	data16 data16 xchg ax,ax
    65021d20:	cmp    ebp,DWORD PTR [rsi]
    65021d22:	jl     0x65021e5c
    65021d28:	cmp    ebp,DWORD PTR [rsi+0x4]
    65021d2b:	jg     0x65021e5c
    65021d31:	call   0x6501dd40
    65021d36:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021d3a:	lea    rdx,[rcx+rcx*4]
    65021d3e:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021d42:	lea    rdx,[rcx+rdx*4]
    65021d46:	cmp    DWORD PTR [rax+rdx*1-0x10],0x0
    65021d4b:	je     0x65021dc1
    65021d4d:	call   0x6501dd40
    65021d52:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021d56:	lea    rdx,[rcx+rcx*4]
    65021d5a:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021d5e:	lea    rdx,[rcx+rdx*4]
    65021d62:	movsxd rbx,DWORD PTR [rax+rdx*1-0x10]
    65021d67:	call   0x6501dd40
    65021d6c:	lea    rcx,[rax+rbx*1]
    65021d70:	test   rcx,rcx
    65021d73:	je     0x65021dc1
    65021d75:	call   0x6501dd40
    65021d7a:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021d7e:	lea    rdx,[rcx+rcx*4]
    65021d82:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021d86:	lea    rdx,[rcx+rdx*4]
    65021d8a:	cmp    DWORD PTR [rax+rdx*1-0x10],0x0
    65021d8f:	je     0x65021db5
    65021d91:	call   0x6501dd40
    65021d96:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021d9a:	lea    rdx,[rcx+rcx*4]
    65021d9e:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021da2:	lea    rdx,[rcx+rdx*4]
    65021da6:	movsxd rbx,DWORD PTR [rax+rdx*1-0x10]
    65021dab:	call   0x6501dd40
    65021db0:	add    rax,rbx
    65021db3:	jmp    0x65021db7
    65021db5:	xor    eax,eax
    65021db7:	cmp    BYTE PTR [rax+0x10],0x0
    65021dbb:	jne    0x65021e55
    65021dc1:	call   0x6501dd40
    65021dc6:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021dca:	lea    rdx,[rcx+rcx*4]
    65021dce:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021dd2:	lea    rdx,[rcx+rdx*4]
    65021dd6:	test   BYTE PTR [rax+rdx*1-0x14],0x40
    65021ddb:	jne    0x65021e55
    65021ddd:	call   0x6501dd40
    65021de2:	mov    ecx,DWORD PTR [rsi+0xc]
    65021de5:	lea    r9,[rsp+0x58]
    65021dea:	sub    ecx,0x1
    65021ded:	mov    r8,r13
    65021df0:	movsxd rcx,ecx
    65021df3:	lea    rdx,[rcx+rcx*4]
    65021df7:	mov    rcx,r15
    65021dfa:	lea    rdi,[rax+rdx*4]
    65021dfe:	movsxd rax,DWORD PTR [rsi+0x10]
    65021e02:	mov    rdx,r14
    65021e05:	add    rdi,rax
    65021e08:	call   0x6501dc30
    65021e0d:	mov    rbx,rax
    65021e10:	call   0x6501dd40
    65021e15:	movsxd rcx,DWORD PTR [rdi+0xc]
    65021e19:	mov    r8,QWORD PTR [rsp+0xb0]
    65021e21:	add    rax,rcx
    65021e24:	mov    ecx,DWORD PTR [rsi]
    65021e26:	mov    BYTE PTR [rsp+0x40],0x0
    65021e2b:	mov    QWORD PTR [rsp+0x38],r14
    65021e30:	mov    QWORD PTR [rsp+0x30],r13
    65021e35:	mov    DWORD PTR [rsp+0x28],ecx
    65021e39:	mov    r9,rbx
    65021e3c:	mov    rdx,r12
    65021e3f:	mov    rcx,r15
    65021e42:	mov    QWORD PTR [rsp+0x20],rax
    65021e47:	call   0x6501e350
    65021e4c:	mov    eax,DWORD PTR [rsp+0xa0]
    65021e53:	jmp    0x65021e5c
    65021e55:	mov    eax,DWORD PTR [rsp+0xa0]
    65021e5c:	add    eax,0x1
    65021e5f:	add    rsi,0x14
    65021e63:	cmp    eax,DWORD PTR [rsp+0x50]
    65021e67:	mov    DWORD PTR [rsp+0xa0],eax
    65021e6e:	jb     0x65021d20
    65021e74:	mov    rbp,QWORD PTR [rsp+0x70]
    65021e79:	mov    rdi,QWORD PTR [rsp+0x68]
    65021e7e:	mov    rbx,QWORD PTR [rsp+0xa8]
    65021e86:	mov    r13,QWORD PTR [rsp+0x60]
    65021e8b:	add    rsp,0x78
    65021e8f:	pop    r15
    65021e91:	pop    r14
    65021e93:	pop    r12
    65021e95:	pop    rsi
    65021e96:	ret    
    65021e97:	int3   
    65021e98:	int3   
    65021e99:	int3   
    65021e9a:	int3   
    65021e9b:	int3   
    65021e9c:	int3   
    65021e9d:	int3   
    65021e9e:	int3   
    65021e9f:	int3   
    65021ea0:	mov    QWORD PTR [rsp+0x20],r9
    65021ea5:	mov    QWORD PTR [rsp+0x18],r8
    65021eaa:	mov    QWORD PTR [rsp+0x10],rdx
    65021eaf:	push   rbx
    65021eb0:	push   rbp
    65021eb1:	push   rdi
    65021eb2:	push   r12
    65021eb4:	push   r13
    65021eb6:	push   r14
    65021eb8:	push   r15
    65021eba:	sub    rsp,0x570
    65021ec1:	mov    rbp,QWORD PTR [rsp+0x5d0]
    65021ec9:	mov    r13,rdx
    65021ecc:	mov    r14,rcx
    65021ecf:	xor    r15b,r15b
    65021ed2:	mov    rdx,r9
    65021ed5:	mov    rcx,rbp
    65021ed8:	mov    r12,r9
    65021edb:	mov    rbx,r8
    65021ede:	mov    BYTE PTR [rsp+0x5b0],r15b
    65021ee6:	call   0x65020dd0
    65021eeb:	lea    r9,[rsp+0x68]
    65021ef0:	mov    r8,rbp
    65021ef3:	mov    rdx,r12
    65021ef6:	mov    rcx,r13
    65021ef9:	mov    edi,eax
    65021efb:	mov    DWORD PTR [rsp+0x58],eax
    65021eff:	call   0x6501dc30
    65021f04:	mov    r8,rbp
    65021f07:	mov    rdx,r12
    65021f0a:	mov    rcx,r13
    65021f0d:	call   0x65020f50
    65021f12:	cmp    edi,eax
    65021f14:	jle    0x65021f3c
    65021f16:	lea    rcx,[rsp+0x68]
    65021f1b:	mov    r9d,edi
    65021f1e:	mov    r8,rbp
    65021f21:	mov    rdx,r12
    65021f24:	call   0x65020f00
    65021f29:	mov    r9d,edi
    65021f2c:	mov    r8,rbp
    65021f2f:	mov    rdx,r12
    65021f32:	mov    rcx,r13
    65021f35:	call   0x65020f10
    65021f3a:	jmp    0x65021f50
    65021f3c:	mov    r8,rbp
    65021f3f:	mov    rdx,r12
    65021f42:	mov    rcx,r13
    65021f45:	call   0x65020f50
    65021f4a:	mov    edi,eax
    65021f4c:	mov    DWORD PTR [rsp+0x58],eax
    65021f50:	cmp    edi,0xffffffff
    65021f53:	jl     0x65021f5a
    65021f55:	cmp    edi,DWORD PTR [rbp+0x4]
    65021f58:	jl     0x65021f5f
    65021f5a:	call   0x65022770
    65021f5f:	cmp    DWORD PTR [r14],0xe06d7363
    65021f66:	jne    0x650220c7
    65021f6c:	cmp    DWORD PTR [r14+0x18],0x4
    65021f71:	jne    0x650220c7
    65021f77:	mov    eax,DWORD PTR [r14+0x20]
    65021f7b:	cmp    eax,0x19930520
    65021f80:	je     0x65021f94
    65021f82:	cmp    eax,0x19930521
    65021f87:	je     0x65021f94
    65021f89:	cmp    eax,0x19930522
    65021f8e:	jne    0x650220c7
    65021f94:	cmp    QWORD PTR [r14+0x30],0x0
    65021f99:	jne    0x650220c7
    65021f9f:	call   0x650208c0
    65021fa4:	cmp    QWORD PTR [rax+0xf0],0x0
    65021fac:	je     0x65022486
    65021fb2:	call   0x650208c0
    65021fb7:	mov    r14,QWORD PTR [rax+0xf0]
    65021fbe:	call   0x650208c0
    65021fc3:	mov    rcx,QWORD PTR [r14+0x38]
    65021fc7:	mov    rbx,QWORD PTR [rax+0xf8]
    65021fce:	mov    QWORD PTR [rsp+0x5c0],rbx
    65021fd6:	call   0x6501dda0
    65021fdb:	mov    edx,0x1
    65021fe0:	mov    rcx,r14
    65021fe3:	call   0x65029820
    65021fe8:	test   eax,eax
    65021fea:	jne    0x65021ff1
    65021fec:	call   0x65022770
    65021ff1:	cmp    DWORD PTR [r14],0xe06d7363
    65021ff8:	jne    0x65022026
    65021ffa:	cmp    DWORD PTR [r14+0x18],0x4
    65021fff:	jne    0x65022026
    65022001:	mov    eax,DWORD PTR [r14+0x20]
    65022005:	cmp    eax,0x19930520
    6502200a:	je     0x6502201a
    6502200c:	cmp    eax,0x19930521
    65022011:	je     0x6502201a
    65022013:	cmp    eax,0x19930522
    65022018:	jne    0x65022026
    6502201a:	cmp    QWORD PTR [r14+0x30],0x0
    6502201f:	jne    0x65022026
    65022021:	call   0x65022770
    65022026:	call   0x650208c0
    6502202b:	cmp    QWORD PTR [rax+0x108],0x0
    65022033:	je     0x650220c7
    65022039:	call   0x650208c0
    6502203e:	mov    rbx,QWORD PTR [rax+0x108]
    65022045:	call   0x650208c0
    6502204a:	mov    rdx,rbx
    6502204d:	mov    rcx,r14
    65022050:	mov    QWORD PTR [rax+0x108],0x0
    6502205b:	call   0x65021360
    65022060:	test   al,al
    65022062:	jne    0x650220bf
    65022064:	mov    rcx,rbx
    65022067:	call   0x650215b0
    6502206c:	test   al,al
    6502206e:	je     0x650220b9
    65022070:	mov    dl,0x1
    65022072:	mov    rcx,r14
    65022075:	call   0x650212c0
    6502207a:	lea    r11,[rip+0x132e7]        # 0x65035368
    65022081:	lea    rdx,[rsp+0x5b0]
    65022089:	lea    rcx,[rsp+0x78]
    6502208e:	mov    QWORD PTR [rsp+0x5b0],r11
    65022096:	call   0x6501d1c0
    6502209b:	lea    r11,[rip+0x132b6]        # 0x65035358
    650220a2:	lea    rdx,[rip+0x1ef1f]        # 0x65040fc8
    650220a9:	lea    rcx,[rsp+0x78]
    650220ae:	mov    QWORD PTR [rsp+0x78],r11
    650220b3:	call   0x6501daf0
    650220b8:	int3   
    650220b9:	call   0x65022740
    650220be:	int3   
    650220bf:	mov    rbx,QWORD PTR [rsp+0x5c0]
    650220c7:	cmp    DWORD PTR [r14],0xe06d7363
    650220ce:	jne    0x65022499
    650220d4:	cmp    DWORD PTR [r14+0x18],0x4
    650220d9:	jne    0x65022499
    650220df:	mov    eax,DWORD PTR [r14+0x20]
    650220e3:	cmp    eax,0x19930520
    650220e8:	je     0x650220fc
    650220ea:	cmp    eax,0x19930521
    650220ef:	je     0x650220fc
    650220f1:	cmp    eax,0x19930522
    650220f6:	jne    0x65022499
    650220fc:	cmp    DWORD PTR [rbp+0xc],0x0
    65022100:	jbe    0x650223b7
    65022106:	mov    r8d,DWORD PTR [rsp+0x5e0]
    6502210e:	lea    rax,[rsp+0x54]
    65022113:	mov    QWORD PTR [rsp+0x30],r12
    65022118:	mov    QWORD PTR [rsp+0x28],rax
    6502211d:	lea    rax,[rsp+0x50]
    65022122:	mov    r9d,edi
    65022125:	mov    rdx,rbp
    65022128:	mov    rcx,r13
    6502212b:	mov    QWORD PTR [rsp+0x20],rax
    65022130:	call   0x6501e100
    65022135:	mov    ecx,DWORD PTR [rsp+0x50]
    65022139:	mov    edx,DWORD PTR [rsp+0x54]
    6502213d:	cmp    ecx,edx
    6502213f:	mov    rbx,rax
    65022142:	mov    QWORD PTR [rsp+0x60],rax
    65022147:	jae    0x650223b7
    6502214d:	mov    QWORD PTR [rsp+0x568],rsi
    65022155:	cmp    DWORD PTR [rbx],edi
    65022157:	jg     0x6502238e
    6502215d:	cmp    edi,DWORD PTR [rbx+0x4]
    65022160:	jg     0x6502238e
    65022166:	call   0x6501dd40
    6502216b:	movsxd rdi,DWORD PTR [rbx+0x10]
    6502216f:	mov    r15d,DWORD PTR [rbx+0xc]
    65022173:	add    rdi,rax
    65022176:	test   r15d,r15d
    65022179:	jle    0x6502237a
    6502217f:	nop
    65022180:	call   0x6501dd60
    65022185:	mov    rcx,QWORD PTR [r14+0x30]
    65022189:	movsxd rdx,DWORD PTR [rcx+0xc]
    6502218d:	lea    r13,[rax+rdx*1+0x4]
    65022192:	call   0x6501dd60
    65022197:	mov    rcx,QWORD PTR [r14+0x30]
    6502219b:	movsxd rdx,DWORD PTR [rcx+0xc]
    6502219f:	mov    ebp,DWORD PTR [rax+rdx*1]
    650221a2:	test   ebp,ebp
    650221a4:	jle    0x650222a0
    650221aa:	data16 xchg ax,ax
    650221ad:	data16 xchg ax,ax
    650221b0:	call   0x6501dd60
    650221b5:	mov    r12,QWORD PTR [r14+0x30]
    650221b9:	mov    rsi,rax
    650221bc:	movsxd rax,DWORD PTR [r13+0x0]
    650221c0:	add    rsi,rax
    650221c3:	cmp    DWORD PTR [rdi+0x4],0x0
    650221c7:	je     0x650222dc
    650221cd:	movsxd rbx,DWORD PTR [rdi+0x4]
    650221d1:	call   0x6501dd40
    650221d6:	add    rax,rbx
    650221d9:	je     0x650222dc
    650221df:	test   ebx,ebx
    650221e1:	je     0x650221f1
    650221e3:	movsxd rbx,DWORD PTR [rdi+0x4]
    650221e7:	call   0x6501dd40
    650221ec:	add    rax,rbx
    650221ef:	jmp    0x650221f3
    650221f1:	xor    eax,eax
    650221f3:	cmp    BYTE PTR [rax+0x10],0x0
    650221f7:	je     0x650222dc
    650221fd:	test   ebx,ebx
    650221ff:	je     0x6502220f
    65022201:	call   0x6501dd40
    65022206:	movsxd rbx,DWORD PTR [rdi+0x4]
    6502220a:	add    rbx,rax
    6502220d:	jmp    0x65022211
    6502220f:	xor    ebx,ebx
    65022211:	call   0x6501dd60
    65022216:	movsxd rcx,DWORD PTR [rsi+0x4]
    6502221a:	add    rax,rcx
    6502221d:	cmp    rbx,rax
    65022220:	je     0x65022268
    65022222:	cmp    DWORD PTR [rdi+0x4],0x0
    65022226:	je     0x65022236
    65022228:	call   0x6501dd40
    6502222d:	movsxd rbx,DWORD PTR [rdi+0x4]
    65022231:	add    rbx,rax
    65022234:	jmp    0x65022238
    65022236:	xor    ebx,ebx
    65022238:	call   0x6501dd60
    6502223d:	movsxd rcx,DWORD PTR [rsi+0x4]
    65022241:	lea    r8,[rax+rcx*1+0x10]
    65022246:	lea    rcx,[rbx+0x10]
    6502224a:	sub    r8,rcx
    6502224d:	data16 xchg ax,ax
    65022250:	movzx  edx,BYTE PTR [rcx]
    65022253:	movzx  eax,BYTE PTR [rcx+r8*1]
    65022258:	sub    edx,eax
    6502225a:	jne    0x65022264
    6502225c:	add    rcx,0x1
    65022260:	test   eax,eax
    65022262:	jne    0x65022250
    65022264:	test   edx,edx
    65022266:	jne    0x65022291
    65022268:	test   BYTE PTR [rsi],0x2
    6502226b:	je     0x65022272
    6502226d:	test   BYTE PTR [rdi],0x8
    65022270:	je     0x65022291
    65022272:	mov    eax,DWORD PTR [r12]
    65022276:	test   al,0x1
    65022278:	je     0x6502227f
    6502227a:	test   BYTE PTR [rdi],0x1
    6502227d:	je     0x65022291
    6502227f:	test   al,0x4
    65022281:	je     0x65022288
    65022283:	test   BYTE PTR [rdi],0x4
    65022286:	je     0x65022291
    65022288:	test   al,0x2
    6502228a:	je     0x650222dc
    6502228c:	test   BYTE PTR [rdi],0x2
    6502228f:	jne    0x650222dc
    65022291:	sub    ebp,0x1
    65022294:	add    r13,0x4
    65022298:	test   ebp,ebp
    6502229a:	jg     0x650221b0
    650222a0:	sub    r15d,0x1
    650222a4:	add    rdi,0x14
    650222a8:	test   r15d,r15d
    650222ab:	jg     0x65022180
    650222b1:	mov    rbx,QWORD PTR [rsp+0x60]
    650222b6:	mov    rbp,QWORD PTR [rsp+0x5d0]
    650222be:	mov    r12,QWORD PTR [rsp+0x5c8]
    650222c6:	mov    r13,QWORD PTR [rsp+0x5b8]
    650222ce:	movzx  r15d,BYTE PTR [rsp+0x5b0]
    650222d7:	jmp    0x65022382
    650222dc:	mov    rbp,QWORD PTR [rsp+0x5d0]
    650222e4:	mov    r12,QWORD PTR [rsp+0x5c8]
    650222ec:	mov    r13,QWORD PTR [rsp+0x5b8]
    650222f4:	lea    r9,[rsp+0x70]
    650222f9:	mov    r15b,0x1
    650222fc:	mov    r8,rbp
    650222ff:	mov    rdx,r12
    65022302:	mov    rcx,r13
    65022305:	mov    BYTE PTR [rsp+0x5b0],r15b
    6502230d:	call   0x6501dc30
    65022312:	test   rsi,rsi
    65022315:	mov    rbx,rax
    65022318:	je     0x6502232b
    6502231a:	mov    r9,rsi
    6502231d:	mov    r8,rdi
    65022320:	mov    rdx,rax
    65022323:	mov    rcx,r14
    65022326:	call   0x65021b60
    6502232b:	call   0x6501dd40
    65022330:	movsxd rcx,DWORD PTR [rdi+0xc]
    65022334:	mov    r8,QWORD PTR [rsp+0x5c0]
    6502233c:	add    rax,rcx
    6502233f:	movzx  ecx,BYTE PTR [rsp+0x5d8]
    65022347:	mov    r9,rbx
    6502234a:	mov    BYTE PTR [rsp+0x40],cl
    6502234e:	mov    rcx,QWORD PTR [rsp+0x60]
    65022353:	mov    QWORD PTR [rsp+0x38],r12
    65022358:	mov    ecx,DWORD PTR [rcx]
    6502235a:	mov    QWORD PTR [rsp+0x30],rbp
    6502235f:	mov    rdx,r14
    65022362:	mov    DWORD PTR [rsp+0x28],ecx
    65022366:	mov    rcx,r13
    65022369:	mov    QWORD PTR [rsp+0x20],rax
    6502236e:	call   0x6501e350
    65022373:	mov    rbx,QWORD PTR [rsp+0x60]
    65022378:	jmp    0x65022382
    6502237a:	mov    r15b,BYTE PTR [rsp+0x5b0]
    65022382:	mov    edx,DWORD PTR [rsp+0x54]
    65022386:	mov    ecx,DWORD PTR [rsp+0x50]
    6502238a:	mov    edi,DWORD PTR [rsp+0x58]
    6502238e:	add    ecx,0x1
    65022391:	add    rbx,0x14
    65022395:	cmp    ecx,edx
    65022397:	mov    DWORD PTR [rsp+0x50],ecx
    6502239b:	mov    QWORD PTR [rsp+0x60],rbx
    650223a0:	jb     0x65022155
    650223a6:	test   r15b,r15b
    650223a9:	mov    rsi,QWORD PTR [rsp+0x568]
    650223b1:	jne    0x65022472
    650223b7:	mov    eax,DWORD PTR [rbp+0x0]
    650223ba:	and    eax,0x1fffffff
    650223bf:	cmp    eax,0x19930521
    650223c4:	jb     0x65022472
    650223ca:	cmp    DWORD PTR [rbp+0x20],0x0
    650223ce:	je     0x65022472
    650223d4:	movsxd rbx,DWORD PTR [rbp+0x20]
    650223d8:	call   0x6501dd40
    650223dd:	add    rax,rbx
    650223e0:	je     0x65022472
    650223e6:	test   ebx,ebx
    650223e8:	je     0x650223fb
    650223ea:	call   0x6501dd40
    650223ef:	mov    rdx,rax
    650223f2:	movsxd rax,DWORD PTR [rbp+0x20]
    650223f6:	add    rdx,rax
    650223f9:	jmp    0x650223fd
    650223fb:	xor    edx,edx
    650223fd:	mov    rcx,r14
    65022400:	call   0x65021360
    65022405:	test   al,al
    65022407:	jne    0x65022472
    65022409:	lea    r9,[rsp+0x5b0]
    65022411:	mov    r8,rbp
    65022414:	mov    rdx,r12
    65022417:	mov    rcx,r13
    6502241a:	call   0x6501dc30
    6502241f:	mov    rbx,rax
    65022422:	call   0x650208c0
    65022427:	mov    r8,QWORD PTR [rsp+0x5c0]
    6502242f:	lea    rcx,[rsp+0x90]
    65022437:	mov    r9,rbx
    6502243a:	mov    rdx,r14
    6502243d:	mov    QWORD PTR [rax+0x110],rcx
    65022444:	mov    al,BYTE PTR [rsp+0x5d8]
    6502244b:	mov    rcx,r13
    6502244e:	mov    BYTE PTR [rsp+0x40],al
    65022452:	mov    QWORD PTR [rsp+0x38],r12
    65022457:	mov    QWORD PTR [rsp+0x30],rbp
    6502245c:	mov    DWORD PTR [rsp+0x28],0xffffffff
    65022464:	mov    QWORD PTR [rsp+0x20],0x0
    6502246d:	call   0x6501e350
    65022472:	call   0x650208c0
    65022477:	cmp    QWORD PTR [rax+0x108],0x0
    6502247f:	je     0x65022486
    65022481:	call   0x65022770
    65022486:	add    rsp,0x570
    6502248d:	pop    r15
    6502248f:	pop    r14
    65022491:	pop    r13
    65022493:	pop    r12
    65022495:	pop    rdi
    65022496:	pop    rbp
    65022497:	pop    rbx
    65022498:	ret    
    65022499:	cmp    DWORD PTR [rbp+0xc],0x0
    6502249d:	jbe    0x65022472
    6502249f:	cmp    BYTE PTR [rsp+0x5d8],0x0
    650224a7:	jne    0x650224dd
    650224a9:	mov    rax,QWORD PTR [rsp+0x5e8]
    650224b1:	mov    r9,r12
    650224b4:	mov    r8,rbx
    650224b7:	mov    QWORD PTR [rsp+0x38],rax
    650224bc:	mov    eax,DWORD PTR [rsp+0x5e0]
    650224c3:	mov    rdx,r13
    650224c6:	mov    DWORD PTR [rsp+0x30],eax
    650224ca:	mov    rcx,r14
    650224cd:	mov    DWORD PTR [rsp+0x28],edi
    650224d1:	mov    QWORD PTR [rsp+0x20],rbp
    650224d6:	call   0x65021c20
    650224db:	jmp    0x65022472
    650224dd:	call   0x65022740
    650224e2:	int3   
    650224e3:	int3   
    650224e4:	int3   
    650224e5:	int3   
    650224e6:	int3   
    650224e7:	int3   
    650224e8:	int3   
    650224e9:	int3   
    650224ea:	int3   
    650224eb:	int3   
    650224ec:	int3   
    650224ed:	int3   
    650224ee:	int3   
    650224ef:	int3   
    650224f0:	rex push rbx
    650224f2:	sub    rsp,0x20
    650224f6:	mov    rbx,rcx
    650224f9:	call   0x6501d270
    650224fe:	lea    r11,[rip+0x12e53]        # 0x65035358
    65022505:	mov    QWORD PTR [rbx],r11
    65022508:	mov    rax,rbx
    6502250b:	add    rsp,0x20
    6502250f:	pop    rbx
    65022510:	ret    
    65022511:	int3   
    65022512:	int3   
    65022513:	int3   
    65022514:	int3   
    65022515:	int3   
    65022516:	int3   
    65022517:	int3   
    65022518:	int3   
    65022519:	int3   
    6502251a:	int3   
    6502251b:	int3   
    6502251c:	int3   
    6502251d:	int3   
    6502251e:	int3   
    6502251f:	int3   
    65022520:	mov    QWORD PTR [rsp+0x8],rbx
    65022525:	mov    QWORD PTR [rsp+0x10],rbp
    6502252a:	mov    QWORD PTR [rsp+0x18],rsi
    6502252f:	mov    QWORD PTR [rsp+0x20],rdi
    65022534:	push   r12
    65022536:	sub    rsp,0x40
    6502253a:	mov    rbp,r9
    6502253d:	mov    r12,r8
    65022540:	mov    rsi,rdx
    65022543:	mov    rbx,rcx
    65022546:	call   0x650208c0
    6502254b:	mov    rdi,QWORD PTR [rsp+0x70]
    65022550:	cmp    DWORD PTR [rax+0x2d0],0x0
    65022557:	jne    0x65022598
    65022559:	mov    eax,DWORD PTR [rbx]
    6502255b:	cmp    eax,0xe06d7363
    65022560:	je     0x65022598
    65022562:	cmp    eax,0x80000029
    65022567:	jne    0x65022579
    65022569:	cmp    DWORD PTR [rbx+0x18],0xf
    6502256d:	jne    0x65022579
    6502256f:	cmp    QWORD PTR [rbx+0x60],0x19930520
    65022577:	je     0x65022598
    65022579:	cmp    eax,0x80000026
    6502257e:	je     0x65022598
    65022580:	mov    eax,DWORD PTR [rdi]
    65022582:	and    eax,0x1fffffff
    65022587:	cmp    eax,0x19930522
    6502258c:	jb     0x65022598
    6502258e:	test   BYTE PTR [rdi+0x24],0x1
    65022592:	jne    0x6502271b
    65022598:	mov    eax,DWORD PTR [rbx+0x4]
    6502259b:	test   al,0x66
    6502259d:	je     0x65022647
    650225a3:	mov    ecx,DWORD PTR [rdi+0x4]
    650225a6:	test   ecx,ecx
    650225a8:	je     0x6502271b
    650225ae:	cmp    DWORD PTR [rsp+0x78],0x0
    650225b3:	jne    0x6502271b
    650225b9:	and    eax,0x20
    650225bc:	je     0x65022600
    650225be:	cmp    DWORD PTR [rbx],0x80000026
    650225c4:	jne    0x65022600
    650225c6:	mov    r8,QWORD PTR [r12+0xf8]
    650225ce:	mov    rdx,rbp
    650225d1:	mov    rcx,rdi
    650225d4:	call   0x65020d40
    650225d9:	cmp    eax,0xffffffff
    650225dc:	mov    ebx,eax
    650225de:	jl     0x650225e5
    650225e0:	cmp    eax,DWORD PTR [rdi+0x4]
    650225e3:	jl     0x650225ea
    650225e5:	call   0x65022770
    650225ea:	mov    r9d,ebx
    650225ed:	mov    r8,rdi
    650225f0:	mov    rdx,rbp
    650225f3:	mov    rcx,rsi
    650225f6:	call   0x65021020
    650225fb:	jmp    0x6502271b
    65022600:	test   eax,eax
    65022602:	je     0x65022634
    65022604:	cmp    DWORD PTR [rbx],0x80000029
    6502260a:	jne    0x65022634
    6502260c:	mov    esi,DWORD PTR [rbx+0x38]
    6502260f:	cmp    esi,0xffffffff
    65022612:	jl     0x65022618
    65022614:	cmp    esi,ecx
    65022616:	jl     0x6502261d
    65022618:	call   0x65022770
    6502261d:	mov    rcx,QWORD PTR [rbx+0x28]
    65022621:	mov    r9d,esi
    65022624:	mov    r8,rdi
    65022627:	mov    rdx,rbp
    6502262a:	call   0x65021020
    6502262f:	jmp    0x6502271b
    65022634:	mov    r8,rdi
    65022637:	mov    rdx,rbp
    6502263a:	mov    rcx,rsi
    6502263d:	call   0x6501ddc0
    65022642:	jmp    0x6502271b
    65022647:	cmp    DWORD PTR [rdi+0xc],0x0
    6502264b:	jne    0x6502267b
    6502264d:	mov    eax,DWORD PTR [rdi]
    6502264f:	and    eax,0x1fffffff
    65022654:	cmp    eax,0x19930521
    65022659:	jb     0x6502271b
    6502265f:	cmp    DWORD PTR [rdi+0x20],0x0
    65022663:	je     0x6502271b
    65022669:	call   0x6501dd40
    6502266e:	movsxd rcx,DWORD PTR [rdi+0x20]
    65022672:	add    rax,rcx
    65022675:	je     0x6502271b
    6502267b:	cmp    DWORD PTR [rbx],0xe06d7363
    65022681:	jne    0x650226e4
    65022683:	cmp    DWORD PTR [rbx+0x18],0x3
    65022687:	jb     0x650226e4
    65022689:	cmp    DWORD PTR [rbx+0x20],0x19930522
    65022690:	jbe    0x650226e4
    65022692:	mov    rax,QWORD PTR [rbx+0x30]
    65022696:	cmp    DWORD PTR [rax+0x8],0x0
    6502269a:	je     0x650226e4
    6502269c:	call   0x6501dd60
    650226a1:	mov    rcx,QWORD PTR [rbx+0x30]
    650226a5:	movsxd rdx,DWORD PTR [rcx+0x8]
    650226a9:	add    rax,rdx
    650226ac:	je     0x650226e4
    650226ae:	movzx  ecx,BYTE PTR [rsp+0x88]
    650226b6:	mov    r9,rbp
    650226b9:	mov    r8,r12
    650226bc:	mov    DWORD PTR [rsp+0x38],ecx
    650226c0:	mov    rcx,QWORD PTR [rsp+0x80]
    650226c8:	mov    rdx,rsi
    650226cb:	mov    QWORD PTR [rsp+0x30],rcx
    650226d0:	mov    ecx,DWORD PTR [rsp+0x78]
    650226d4:	mov    DWORD PTR [rsp+0x28],ecx
    650226d8:	mov    rcx,rbx
    650226db:	mov    QWORD PTR [rsp+0x20],rdi
    650226e0:	call   rax
    650226e2:	jmp    0x65022720
    650226e4:	mov    rax,QWORD PTR [rsp+0x80]
    650226ec:	mov    r9,rbp
    650226ef:	mov    r8,r12
    650226f2:	mov    QWORD PTR [rsp+0x38],rax
    650226f7:	mov    eax,DWORD PTR [rsp+0x78]
    650226fb:	mov    rdx,rsi
    650226fe:	mov    DWORD PTR [rsp+0x30],eax
    65022702:	movzx  eax,BYTE PTR [rsp+0x88]
    6502270a:	mov    rcx,rbx
    6502270d:	mov    BYTE PTR [rsp+0x28],al
    65022711:	mov    QWORD PTR [rsp+0x20],rdi
    65022716:	call   0x65021ea0
    6502271b:	mov    eax,0x1
    65022720:	mov    rbx,QWORD PTR [rsp+0x50]
    65022725:	mov    rbp,QWORD PTR [rsp+0x58]
    6502272a:	mov    rsi,QWORD PTR [rsp+0x60]
    6502272f:	mov    rdi,QWORD PTR [rsp+0x68]
    65022734:	add    rsp,0x40
    65022738:	pop    r12
    6502273a:	ret    
    6502273b:	int3   
    6502273c:	int3   
    6502273d:	int3   
    6502273e:	int3   
    6502273f:	int3   
    65022740:	sub    rsp,0x28
    65022744:	call   0x650208c0
    65022749:	mov    rcx,QWORD PTR [rax+0xd0]
    65022750:	test   rcx,rcx
    65022753:	je     0x65022759
    65022755:	call   rcx
    65022757:	jmp    0x65022759
    65022759:	call   0x65029830
    6502275e:	add    rsp,0x28
    65022762:	ret    
    65022763:	int3   
    65022764:	int3   
    65022765:	int3   
    65022766:	int3   
    65022767:	int3   
    65022768:	int3   
    65022769:	int3   
    6502276a:	int3   
    6502276b:	int3   
    6502276c:	int3   
    6502276d:	int3   
    6502276e:	int3   
    6502276f:	int3   
    65022770:	sub    rsp,0x28
    65022774:	mov    rcx,QWORD PTR [rip+0x214f5]        # 0x65043c70
    6502277b:	call   0x65020570
    65022780:	test   rax,rax
    65022783:	je     0x65022789
    65022785:	call   rax
    65022787:	jmp    0x65022789
    65022789:	call   0x65022740
    6502278e:	int3   
    6502278f:	add    rsp,0x28
    65022793:	ret    
    65022794:	int3   
    65022795:	int3   
    65022796:	int3   
    65022797:	int3   
    65022798:	int3   
    65022799:	int3   
    6502279a:	int3   
    6502279b:	int3   
    6502279c:	int3   
    6502279d:	int3   
    6502279e:	int3   
    6502279f:	int3   
    650227a0:	sub    rsp,0x28
    650227a4:	lea    rcx,[rip+0xffffffffffffff95]        # 0x65022740
    650227ab:	call   0x650203b0
    650227b0:	mov    QWORD PTR [rip+0x214b9],rax        # 0x65043c70
    650227b7:	add    rsp,0x28
    650227bb:	ret    
    650227bc:	int3   
    650227bd:	int3   
    650227be:	int3   
    650227bf:	int3   
    650227c0:	mov    QWORD PTR [rsp+0x8],rcx
    650227c5:	sub    rsp,0x88
    650227cc:	lea    rcx,[rip+0x2154d]        # 0x65043d20
    650227d3:	call   QWORD PTR [rip+0x11a37]        # 0x65034210
    650227d9:	mov    rax,QWORD PTR [rip+0x21638]        # 0x65043e18
    650227e0:	mov    QWORD PTR [rsp+0x58],rax
    650227e5:	xor    r8d,r8d
    650227e8:	lea    rdx,[rsp+0x60]
    650227ed:	mov    rcx,QWORD PTR [rsp+0x58]
    650227f2:	call   0x6502eb7c
    650227f7:	mov    QWORD PTR [rsp+0x50],rax
    650227fc:	cmp    QWORD PTR [rsp+0x50],0x0
    65022802:	je     0x65022845
    65022804:	mov    QWORD PTR [rsp+0x38],0x0
    6502280d:	lea    rax,[rsp+0x48]
    65022812:	mov    QWORD PTR [rsp+0x30],rax
    65022817:	lea    rax,[rsp+0x40]
    6502281c:	mov    QWORD PTR [rsp+0x28],rax
    65022821:	lea    rax,[rip+0x214f8]        # 0x65043d20
    65022828:	mov    QWORD PTR [rsp+0x20],rax
    6502282d:	mov    r9,QWORD PTR [rsp+0x50]
    65022832:	mov    r8,QWORD PTR [rsp+0x58]
    65022837:	mov    rdx,QWORD PTR [rsp+0x60]
    6502283c:	xor    ecx,ecx
    6502283e:	call   0x6502eb88
    65022843:	jmp    0x65022867
    65022845:	mov    rax,QWORD PTR [rsp+0x88]
    6502284d:	mov    QWORD PTR [rip+0x215c4],rax        # 0x65043e18
    65022854:	lea    rax,[rsp+0x88]
    6502285c:	add    rax,0x8
    65022860:	mov    QWORD PTR [rip+0x21551],rax        # 0x65043db8
    65022867:	mov    rax,QWORD PTR [rip+0x215aa]        # 0x65043e18
    6502286e:	mov    QWORD PTR [rip+0x2141b],rax        # 0x65043c90
    65022875:	mov    rax,QWORD PTR [rsp+0x90]
    6502287d:	mov    QWORD PTR [rip+0x2151c],rax        # 0x65043da0
    65022884:	mov    DWORD PTR [rip+0x213f2],0xc0000409        # 0x65043c80
    6502288e:	mov    DWORD PTR [rip+0x213ec],0x1        # 0x65043c84
    65022898:	mov    rax,QWORD PTR [rip+0x1f881]        # 0x65042120
    6502289f:	mov    QWORD PTR [rsp+0x68],rax
    650228a4:	mov    rax,QWORD PTR [rip+0x1f87d]        # 0x65042128
    650228ab:	mov    QWORD PTR [rsp+0x70],rax
    650228b0:	call   QWORD PTR [rip+0x11952]        # 0x65034208
    650228b6:	mov    DWORD PTR [rip+0x2145c],eax        # 0x65043d18
    650228bc:	mov    ecx,0x1
    650228c1:	call   0x650203a0
    650228c6:	xor    ecx,ecx
    650228c8:	call   QWORD PTR [rip+0x11932]        # 0x65034200
    650228ce:	lea    rcx,[rip+0x12aa3]        # 0x65035378
    650228d5:	call   QWORD PTR [rip+0x1191d]        # 0x650341f8
    650228db:	cmp    DWORD PTR [rip+0x21436],0x0        # 0x65043d18
    650228e2:	jne    0x650228ee
    650228e4:	mov    ecx,0x1
    650228e9:	call   0x650203a0
    650228ee:	call   QWORD PTR [rip+0x1178c]        # 0x65034080
    650228f4:	mov    edx,0xc0000409
    650228f9:	mov    rcx,rax
    650228fc:	call   QWORD PTR [rip+0x118ee]        # 0x650341f0
    65022902:	add    rsp,0x88
    65022909:	ret    
    6502290a:	int3   
    6502290b:	int3   
    6502290c:	int3   
    6502290d:	int3   
    6502290e:	int3   
    6502290f:	int3   
    65022910:	mov    QWORD PTR [rsp+0x8],rbx
    65022915:	mov    QWORD PTR [rsp+0x10],rbp
    6502291a:	mov    QWORD PTR [rsp+0x18],rsi
    6502291f:	push   rdi
    65022920:	sub    rsp,0x20
    65022924:	xor    edi,edi
    65022926:	mov    rsi,rcx
    65022929:	or     ebp,0xffffffff
    6502292c:	data16 data16 xchg ax,ax
    65022930:	mov    rcx,rsi
    65022933:	call   0x6501fae0
    65022938:	test   rax,rax
    6502293b:	mov    rbx,rax
    6502293e:	jne    0x6502296b
    65022940:	cmp    DWORD PTR [rip+0x218aa],eax        # 0x650441f0
    65022946:	jbe    0x6502296b
    65022948:	mov    ecx,edi
    6502294a:	call   QWORD PTR [rip+0x11738]        # 0x65034088
    65022950:	lea    r11d,[rdi+0x3e8]
    65022957:	cmp    r11d,DWORD PTR [rip+0x21892]        # 0x650441f0
    6502295e:	mov    edi,r11d
    65022961:	cmova  edi,ebp
    65022964:	cmp    edi,ebp
    65022966:	jne    0x65022930
    65022968:	mov    rax,rbx
    6502296b:	mov    rbx,QWORD PTR [rsp+0x30]
    65022970:	mov    rbp,QWORD PTR [rsp+0x38]
    65022975:	mov    rsi,QWORD PTR [rsp+0x40]
    6502297a:	add    rsp,0x20
    6502297e:	pop    rdi
    6502297f:	ret    
    65022980:	mov    QWORD PTR [rsp+0x8],rbx
    65022985:	mov    QWORD PTR [rsp+0x10],rbp
    6502298a:	mov    QWORD PTR [rsp+0x18],rsi
    6502298f:	mov    QWORD PTR [rsp+0x20],rdi
    65022994:	push   r12
    65022996:	sub    rsp,0x20
    6502299a:	xor    edi,edi
    6502299c:	mov    rsi,rdx
    6502299f:	mov    rbp,rcx
    650229a2:	or     r12d,0xffffffff
    650229a6:	data16 data16 xchg ax,ax
    650229aa:	data16 xchg ax,ax
    650229ad:	data16 xchg ax,ax
    650229b0:	xor    r8d,r8d
    650229b3:	mov    rdx,rsi
    650229b6:	mov    rcx,rbp
    650229b9:	call   0x650298e0
    650229be:	test   rax,rax
    650229c1:	mov    rbx,rax
    650229c4:	jne    0x650229f3
    650229c6:	cmp    DWORD PTR [rip+0x21824],eax        # 0x650441f0
    650229cc:	jbe    0x650229f3
    650229ce:	mov    ecx,edi
    650229d0:	call   QWORD PTR [rip+0x116b2]        # 0x65034088
    650229d6:	lea    r11d,[rdi+0x3e8]
    650229dd:	cmp    r11d,DWORD PTR [rip+0x2180c]        # 0x650441f0
    650229e4:	mov    edi,r11d
    650229e7:	cmova  edi,r12d
    650229eb:	cmp    edi,r12d
    650229ee:	jne    0x650229b0
    650229f0:	mov    rax,rbx
    650229f3:	mov    rbx,QWORD PTR [rsp+0x30]
    650229f8:	mov    rbp,QWORD PTR [rsp+0x38]
    650229fd:	mov    rsi,QWORD PTR [rsp+0x40]
    65022a02:	mov    rdi,QWORD PTR [rsp+0x48]
    65022a07:	add    rsp,0x20
    65022a0b:	pop    r12
    65022a0d:	ret    
    65022a0e:	int3   
    65022a0f:	int3   
    65022a10:	mov    QWORD PTR [rsp+0x8],rbx
    65022a15:	mov    QWORD PTR [rsp+0x10],rbp
    65022a1a:	mov    QWORD PTR [rsp+0x18],rsi
    65022a1f:	mov    QWORD PTR [rsp+0x20],rdi
    65022a24:	push   r12
    65022a26:	sub    rsp,0x20
    65022a2a:	xor    esi,esi
    65022a2c:	mov    rdi,rdx
    65022a2f:	mov    rbp,rcx
    65022a32:	or     r12d,0xffffffff
    65022a36:	data16 data16 xchg ax,ax
    65022a3a:	data16 xchg ax,ax
    65022a3d:	data16 xchg ax,ax
    65022a40:	mov    rdx,rdi
    65022a43:	mov    rcx,rbp
    65022a46:	call   0x6501ff00
    65022a4b:	test   rax,rax
    65022a4e:	mov    rbx,rax
    65022a51:	jne    0x65022a85
    65022a53:	test   rdi,rdi
    65022a56:	je     0x65022a85
    65022a58:	cmp    DWORD PTR [rip+0x21792],eax        # 0x650441f0
    65022a5e:	jbe    0x65022a85
    65022a60:	mov    ecx,esi
    65022a62:	call   QWORD PTR [rip+0x11620]        # 0x65034088
    65022a68:	lea    r11d,[rsi+0x3e8]
    65022a6f:	cmp    r11d,DWORD PTR [rip+0x2177a]        # 0x650441f0
    65022a76:	mov    esi,r11d
    65022a79:	cmova  esi,r12d
    65022a7d:	cmp    esi,r12d
    65022a80:	jne    0x65022a40
    65022a82:	mov    rax,rbx
    65022a85:	mov    rbx,QWORD PTR [rsp+0x30]
    65022a8a:	mov    rbp,QWORD PTR [rsp+0x38]
    65022a8f:	mov    rsi,QWORD PTR [rsp+0x40]
    65022a94:	mov    rdi,QWORD PTR [rsp+0x48]
    65022a99:	add    rsp,0x20
    65022a9d:	pop    r12
    65022a9f:	ret    
    65022aa0:	sub    rsp,0x38
    65022aa4:	test   rcx,rcx
    65022aa7:	jne    0x65022ad5
    65022aa9:	call   0x650202b0
    65022aae:	xor    r9d,r9d
    65022ab1:	xor    r8d,r8d
    65022ab4:	xor    edx,edx
    65022ab6:	xor    ecx,ecx
    65022ab8:	mov    QWORD PTR [rsp+0x20],0x0
    65022ac1:	mov    DWORD PTR [rax],0x16
    65022ac7:	call   0x6501d850
    65022acc:	or     rax,0xffffffffffffffff
    65022ad0:	add    rsp,0x38
    65022ad4:	ret    
    65022ad5:	mov    r8,rcx
    65022ad8:	mov    rcx,QWORD PTR [rip+0x217d1]        # 0x650442b0
    65022adf:	xor    edx,edx
    65022ae1:	add    rsp,0x38
    65022ae5:	rex.W jmp QWORD PTR [rip+0x116f4]        # 0x650341e0
    65022aec:	int3   
    65022aed:	int3   
    65022aee:	int3   
    65022aef:	int3   
    65022af0:	rex push rbx
    65022af2:	sub    rsp,0x20
    65022af6:	mov    ebx,ecx
    65022af8:	call   0x650292f0
    65022afd:	mov    ecx,ebx
    65022aff:	call   0x650290b0
    65022b04:	mov    rcx,QWORD PTR [rip+0x1f7d5]        # 0x650422e0
    65022b0b:	call   0x65020570
    65022b10:	mov    ecx,0xff
    65022b15:	add    rsp,0x20
    65022b19:	pop    rbx
    65022b1a:	rex.W jmp rax
    65022b1d:	int3   
    65022b1e:	int3   
    65022b1f:	int3   
    65022b20:	rex push rbx
    65022b22:	sub    rsp,0x20
    65022b26:	mov    ebx,ecx
    65022b28:	lea    rcx,[rip+0x12869]        # 0x65035398
    65022b2f:	call   QWORD PTR [rip+0x11713]        # 0x65034248
    65022b35:	test   rax,rax
    65022b38:	je     0x65022b53
    65022b3a:	lea    rdx,[rip+0x12847]        # 0x65035388
    65022b41:	mov    rcx,rax
    65022b44:	call   QWORD PTR [rip+0x11566]        # 0x650340b0
    65022b4a:	test   rax,rax
    65022b4d:	je     0x65022b53
    65022b4f:	mov    ecx,ebx
    65022b51:	call   rax
    65022b53:	mov    ecx,ebx
    65022b55:	call   QWORD PTR [rip+0x11725]        # 0x65034280
    65022b5b:	int3   
    65022b5c:	int3   
    65022b5d:	int3   
    65022b5e:	int3   
    65022b5f:	int3   
    65022b60:	mov    ecx,0x8
    65022b65:	jmp    0x650297c0
    65022b6a:	int3   
    65022b6b:	int3   
    65022b6c:	int3   
    65022b6d:	int3   
    65022b6e:	int3   
    65022b6f:	int3   
    65022b70:	mov    ecx,0x8
    65022b75:	jmp    0x65029690
    65022b7a:	int3   
    65022b7b:	int3   
    65022b7c:	int3   
    65022b7d:	int3   
    65022b7e:	int3   
    65022b7f:	int3   
    65022b80:	cmp    rcx,rdx
    65022b83:	jae    0x65022bb2
    65022b85:	mov    QWORD PTR [rsp+0x8],rbx
    65022b8a:	push   rdi
    65022b8b:	sub    rsp,0x20
    65022b8f:	mov    rdi,rdx
    65022b92:	mov    rbx,rcx
    65022b95:	mov    rax,QWORD PTR [rbx]
    65022b98:	test   rax,rax
    65022b9b:	je     0x65022b9f
    65022b9d:	call   rax
    65022b9f:	add    rbx,0x8
    65022ba3:	cmp    rbx,rdi
    65022ba6:	jb     0x65022b95
    65022ba8:	mov    rbx,QWORD PTR [rsp+0x30]
    65022bad:	add    rsp,0x20
    65022bb1:	pop    rdi
    65022bb2:	ret    0x0
    65022bb5:	int3   
    65022bb6:	int3   
    65022bb7:	int3   
    65022bb8:	int3   
    65022bb9:	int3   
    65022bba:	int3   
    65022bbb:	int3   
    65022bbc:	int3   
    65022bbd:	int3   
    65022bbe:	int3   
    65022bbf:	int3   
    65022bc0:	sub    rsp,0x38
    65022bc4:	test   rcx,rcx
    65022bc7:	jne    0x65022bf6
    65022bc9:	call   0x650202b0
    65022bce:	xor    r9d,r9d
    65022bd1:	xor    r8d,r8d
    65022bd4:	xor    edx,edx
    65022bd6:	xor    ecx,ecx
    65022bd8:	mov    QWORD PTR [rsp+0x20],0x0
    65022be1:	mov    DWORD PTR [rax],0x16
    65022be7:	call   0x6501d850
    65022bec:	mov    eax,0x16
    65022bf1:	add    rsp,0x38
    65022bf5:	ret    
    65022bf6:	mov    eax,DWORD PTR [rip+0x21600]        # 0x650441fc
    65022bfc:	test   eax,eax
    65022bfe:	je     0x65022bc9
    65022c00:	mov    DWORD PTR [rcx],eax
    65022c02:	xor    eax,eax
    65022c04:	add    rsp,0x38
    65022c08:	ret    
    65022c09:	int3   
    65022c0a:	int3   
    65022c0b:	int3   
    65022c0c:	int3   
    65022c0d:	int3   
    65022c0e:	int3   
    65022c0f:	int3   
    65022c10:	sub    rsp,0x38
    65022c14:	test   rcx,rcx
    65022c17:	jne    0x65022c46
    65022c19:	call   0x650202b0
    65022c1e:	xor    r9d,r9d
    65022c21:	xor    r8d,r8d
    65022c24:	xor    edx,edx
    65022c26:	xor    ecx,ecx
    65022c28:	mov    QWORD PTR [rsp+0x20],0x0
    65022c31:	mov    DWORD PTR [rax],0x16
    65022c37:	call   0x6501d850
    65022c3c:	mov    eax,0x16
    65022c41:	add    rsp,0x38
    65022c45:	ret    
    65022c46:	cmp    DWORD PTR [rip+0x215af],0x0        # 0x650441fc
    65022c4d:	je     0x65022c19
    65022c4f:	mov    eax,DWORD PTR [rip+0x215b3]        # 0x65044208
    65022c55:	mov    DWORD PTR [rcx],eax
    65022c57:	xor    eax,eax
    65022c59:	add    rsp,0x38
    65022c5d:	ret    
    65022c5e:	int3   
    65022c5f:	int3   
    65022c60:	mov    QWORD PTR [rsp+0x8],rbx
    65022c65:	push   rdi
    65022c66:	sub    rsp,0x20
    65022c6a:	cmp    QWORD PTR [rip+0x14236],0x0        # 0x65036ea8
    65022c72:	mov    ebx,ecx
    65022c74:	je     0x65022c8e
    65022c76:	lea    rcx,[rip+0x1422b]        # 0x65036ea8
    65022c7d:	call   0x650294e0
    65022c82:	test   eax,eax
    65022c84:	je     0x65022c8e
    65022c86:	mov    ecx,ebx
    65022c88:	call   QWORD PTR [rip+0x1421a]        # 0x65036ea8
    65022c8e:	call   0x650299b0
    65022c93:	lea    rbx,[rip+0x1176e]        # 0x65034408
    65022c9a:	lea    rdi,[rip+0x11787]        # 0x65034428
    65022ca1:	xor    eax,eax
    65022ca3:	cmp    rbx,rdi
    65022ca6:	jae    0x65022cc3
    65022ca8:	test   eax,eax
    65022caa:	jne    0x65022d20
    65022cac:	mov    rcx,QWORD PTR [rbx]
    65022caf:	test   rcx,rcx
    65022cb2:	je     0x65022cb6
    65022cb4:	call   rcx
    65022cb6:	add    rbx,0x8
    65022cba:	cmp    rbx,rdi
    65022cbd:	jb     0x65022ca8
    65022cbf:	test   eax,eax
    65022cc1:	jne    0x65022d20
    65022cc3:	lea    rcx,[rip+0x4386]        # 0x65027050
    65022cca:	call   0x6501e680
    65022ccf:	lea    rbx,[rip+0x116fa]        # 0x650343d0
    65022cd6:	lea    rdi,[rip+0x11723]        # 0x65034400
    65022cdd:	cmp    rbx,rdi
    65022ce0:	jae    0x65022cf5
    65022ce2:	mov    rax,QWORD PTR [rbx]
    65022ce5:	test   rax,rax
    65022ce8:	je     0x65022cec
    65022cea:	call   rax
    65022cec:	add    rbx,0x8
    65022cf0:	cmp    rbx,rdi
    65022cf3:	jb     0x65022ce2
    65022cf5:	cmp    QWORD PTR [rip+0x254a3],0x0        # 0x650481a0
    65022cfd:	je     0x65022d1e
    65022cff:	lea    rcx,[rip+0x2549a]        # 0x650481a0
    65022d06:	call   0x650294e0
    65022d0b:	test   eax,eax
    65022d0d:	je     0x65022d1e
    65022d0f:	xor    r8d,r8d
    65022d12:	xor    ecx,ecx
    65022d14:	lea    edx,[r8+0x2]
    65022d18:	call   QWORD PTR [rip+0x25482]        # 0x650481a0
    65022d1e:	xor    eax,eax
    65022d20:	mov    rbx,QWORD PTR [rsp+0x30]
    65022d25:	add    rsp,0x20
    65022d29:	pop    rdi
    65022d2a:	ret    
    65022d2b:	int3   
    65022d2c:	int3   
    65022d2d:	int3   
    65022d2e:	int3   
    65022d2f:	int3   
    65022d30:	mov    QWORD PTR [rsp+0x8],rbx
    65022d35:	mov    QWORD PTR [rsp+0x10],rsi
    65022d3a:	mov    DWORD PTR [rsp+0x18],r8d
    65022d3f:	push   rdi
    65022d40:	push   r12
    65022d42:	push   r13
    65022d44:	sub    rsp,0x30
    65022d48:	mov    r12d,r8d
    65022d4b:	mov    ebx,edx
    65022d4d:	mov    r13d,ecx
    65022d50:	mov    ecx,0x8
    65022d55:	call   0x650297c0
    65022d5a:	nop
    65022d5b:	cmp    DWORD PTR [rip+0x214fa],0x1        # 0x6504425c
    65022d62:	je     0x65022e04
    65022d68:	mov    DWORD PTR [rip+0x214e6],0x1        # 0x65044258
    65022d72:	mov    BYTE PTR [rip+0x2149b],r12b        # 0x65044214
    65022d79:	test   ebx,ebx
    65022d7b:	jne    0x65022df0
    65022d7d:	mov    rcx,QWORD PTR [rip+0x2540c]        # 0x65048190
    65022d84:	call   0x65020570
    65022d89:	mov    rsi,rax
    65022d8c:	mov    rcx,QWORD PTR [rip+0x253f5]        # 0x65048188
    65022d93:	call   0x65020570
    65022d98:	mov    rbx,rax
    65022d9b:	mov    QWORD PTR [rsp+0x20],rax
    65022da0:	test   rsi,rsi
    65022da3:	je     0x65022ddd
    65022da5:	data16 data16 xchg ax,ax
    65022da9:	data16 xchg ax,ax
    65022dac:	data16 data16 xchg ax,ax
    65022db0:	sub    rbx,0x8
    65022db4:	mov    QWORD PTR [rsp+0x20],rbx
    65022db9:	cmp    rbx,rsi
    65022dbc:	jb     0x65022ddd
    65022dbe:	cmp    QWORD PTR [rbx],0x0
    65022dc2:	je     0x65022ddb
    65022dc4:	mov    rdi,QWORD PTR [rbx]
    65022dc7:	call   0x65020480
    65022dcc:	cmp    rdi,rax
    65022dcf:	je     0x65022ddb
    65022dd1:	mov    rcx,rdi
    65022dd4:	call   0x65020570
    65022dd9:	call   rax
    65022ddb:	jmp    0x65022db0
    65022ddd:	lea    rdx,[rip+0x11664]        # 0x65034448
    65022de4:	lea    rcx,[rip+0x11645]        # 0x65034430
    65022deb:	call   0x65022b80
    65022df0:	lea    rdx,[rip+0x11661]        # 0x65034458
    65022df7:	lea    rcx,[rip+0x11652]        # 0x65034450
    65022dfe:	call   0x65022b80
    65022e03:	nop
    65022e04:	test   r12d,r12d
    65022e07:	je     0x65022e13
    65022e09:	mov    ecx,0x8
    65022e0e:	call   0x65029690
    65022e13:	test   r12d,r12d
    65022e16:	jne    0x65022e35
    65022e18:	mov    DWORD PTR [rip+0x2143a],0x1        # 0x6504425c
    65022e22:	lea    ecx,[r12+0x8]
    65022e27:	call   0x65029690
    65022e2c:	mov    ecx,r13d
    65022e2f:	call   0x65022b20
    65022e34:	int3   
    65022e35:	mov    rbx,QWORD PTR [rsp+0x50]
    65022e3a:	mov    rsi,QWORD PTR [rsp+0x58]
    65022e3f:	add    rsp,0x30
    65022e43:	pop    r13
    65022e45:	pop    r12
    65022e47:	pop    rdi
    65022e48:	ret    
    65022e49:	int3   
    65022e4a:	int3   
    65022e4b:	int3   
    65022e4c:	int3   
    65022e4d:	int3   
    65022e4e:	int3   
    65022e4f:	int3   
    65022e50:	rex push rbp
    65022e52:	sub    rsp,0x20
    65022e56:	mov    rbp,rdx
    65022e59:	cmp    DWORD PTR [rbp+0x60],0x0
    65022e5d:	je     0x65022e69
    65022e5f:	mov    ecx,0x8
    65022e64:	call   0x65029690
    65022e69:	add    rsp,0x20
    65022e6d:	pop    rbp
    65022e6e:	ret    
    65022e6f:	int3   
    65022e70:	xor    r8d,r8d
    65022e73:	lea    edx,[r8+0x1]
    65022e77:	jmp    0x65022d30
    65022e7c:	int3   
    65022e7d:	int3   
    65022e7e:	int3   
    65022e7f:	int3   
    65022e80:	xor    edx,edx
    65022e82:	xor    ecx,ecx
    65022e84:	lea    r8d,[rdx+0x1]
    65022e88:	jmp    0x65022d30
    65022e8d:	int3   
    65022e8e:	int3   
    65022e8f:	int3   
    65022e90:	rex push rbx
    65022e92:	sub    rsp,0x20
    65022e96:	call   0x65020480
    65022e9b:	mov    rcx,rax
    65022e9e:	mov    rbx,rax
    65022ea1:	call   0x65020c50
    65022ea6:	mov    rcx,rbx
    65022ea9:	call   0x65029cf0
    65022eae:	mov    rcx,rbx
    65022eb1:	call   0x6501d7a0
    65022eb6:	mov    rcx,rbx
    65022eb9:	call   0x65029ce0
    65022ebe:	mov    rcx,rbx
    65022ec1:	call   0x65029cd0
    65022ec6:	mov    rcx,rbx
    65022ec9:	call   0x650299f0
    65022ece:	mov    rcx,rbx
    65022ed1:	call   0x65004190
    65022ed6:	mov    rcx,rbx
    65022ed9:	call   0x650227a0
    65022ede:	lea    rcx,[rip+0xffffffffffffff8b]        # 0x65022e70
    65022ee5:	call   0x650203b0
    65022eea:	mov    QWORD PTR [rip+0x1f3ef],rax        # 0x650422e0
    65022ef1:	add    rsp,0x20
    65022ef5:	pop    rbx
    65022ef6:	ret    
    65022ef7:	int3   
    65022ef8:	int3   
    65022ef9:	int3   
    65022efa:	int3   
    65022efb:	int3   
    65022efc:	int3   
    65022efd:	int3   
    65022efe:	int3   
    65022eff:	int3   
    65022f00:	mov    QWORD PTR [rsp+0x8],rbx
    65022f05:	mov    QWORD PTR [rsp+0x10],rsi
    65022f0a:	push   rdi
    65022f0b:	sub    rsp,0x20
    65022f0f:	lea    rbx,[rcx+0x1c]
    65022f13:	mov    rsi,rcx
    65022f16:	mov    edi,0x101
    65022f1b:	mov    rcx,rbx
    65022f1e:	mov    r8,rdi
    65022f21:	xor    edx,edx
    65022f23:	call   0x6501ee30
    65022f28:	xor    r11d,r11d
    65022f2b:	lea    r8,[rip+0x1f3be]        # 0x650422f0
    65022f32:	mov    DWORD PTR [rsi+0x4],r11d
    65022f36:	mov    DWORD PTR [rsi+0x8],r11d
    65022f3a:	mov    DWORD PTR [rsi+0xc],r11d
    65022f3e:	mov    QWORD PTR [rsi+0x10],r11
    65022f42:	sub    r8,rsi
    65022f45:	mov    DWORD PTR [rsi+0x18],r11d
    65022f49:	data16 xchg ax,ax
    65022f4c:	data16 data16 xchg ax,ax
    65022f50:	movzx  eax,BYTE PTR [r8+rbx*1]
    65022f55:	add    rbx,0x1
    65022f59:	sub    rdi,0x1
    65022f5d:	mov    BYTE PTR [rbx-0x1],al
    65022f60:	jne    0x65022f50
    65022f62:	lea    r9,[rip+0x1f388]        # 0x650422f1
    65022f69:	lea    rcx,[rsi+0x11d]
    65022f70:	mov    edx,0x80
    65022f75:	sub    r9,rsi
    65022f78:	data16 data16 xchg ax,ax
    65022f7c:	data16 data16 xchg ax,ax
    65022f80:	movzx  eax,BYTE PTR [rcx+r8*1]
    65022f85:	add    rcx,0x2
    65022f89:	sub    rdx,0x1
    65022f8d:	mov    BYTE PTR [rcx-0x2],al
    65022f90:	movzx  eax,BYTE PTR [r9+rcx*1-0x2]
    65022f96:	mov    BYTE PTR [rcx-0x1],al
    65022f99:	jne    0x65022f80
    65022f9b:	mov    rbx,QWORD PTR [rsp+0x30]
    65022fa0:	mov    rsi,QWORD PTR [rsp+0x38]
    65022fa5:	add    rsp,0x20
    65022fa9:	pop    rdi
    65022faa:	ret    
    65022fab:	int3   
    65022fac:	int3   
    65022fad:	int3   
    65022fae:	int3   
    65022faf:	int3   
    65022fb0:	mov    QWORD PTR [rsp+0x18],rbx
    65022fb5:	mov    QWORD PTR [rsp+0x20],rbp
    65022fba:	push   rdi
    65022fbb:	sub    rsp,0x580
    65022fc2:	mov    rax,QWORD PTR [rip+0x1f157]        # 0x65042120
    65022fc9:	xor    rax,rsp
    65022fcc:	mov    QWORD PTR [rsp+0x570],rax
    65022fd4:	mov    rbp,rcx
    65022fd7:	mov    ecx,DWORD PTR [rcx+0x4]
    65022fda:	lea    rdx,[rsp+0x50]
    65022fdf:	call   QWORD PTR [rip+0x112a3]        # 0x65034288
    65022fe5:	test   eax,eax
    65022fe7:	je     0x6502314d
    65022fed:	xor    ebx,ebx
    65022fef:	mov    QWORD PTR [rsp+0x598],rsi
    65022ff7:	lea    rdx,[rsp+0x70]
    65022ffc:	mov    eax,ebx
    65022ffe:	mov    edi,0x100
    65023003:	mov    BYTE PTR [rdx],al
    65023005:	add    eax,0x1
    65023008:	add    rdx,0x1
    6502300c:	cmp    eax,edi
    6502300e:	jb     0x65023003
    65023010:	movzx  eax,BYTE PTR [rsp+0x56]
    65023015:	mov    BYTE PTR [rsp+0x70],0x20
    6502301a:	lea    rsi,[rsp+0x56]
    6502301f:	test   al,al
    65023021:	je     0x65023051
    65023023:	movzx  edx,BYTE PTR [rsi+0x1]
    65023027:	movzx  r8d,al
    6502302b:	cmp    r8d,edx
    6502302e:	ja     0x65023046
    65023030:	sub    edx,r8d
    65023033:	mov    rax,r8
    65023036:	lea    rcx,[rsp+r8*1+0x70]
    6502303b:	lea    r8d,[rdx+0x1]
    6502303f:	mov    dl,0x20
    65023041:	call   0x6501ee30
    65023046:	mov    al,BYTE PTR [rsi+0x2]
    65023049:	add    rsi,0x2
    6502304d:	test   al,al
    6502304f:	jne    0x65023023
    65023051:	mov    eax,DWORD PTR [rbp+0xc]
    65023054:	mov    DWORD PTR [rsp+0x38],ebx
    65023058:	lea    r8,[rsp+0x70]
    6502305d:	mov    DWORD PTR [rsp+0x30],eax
    65023061:	mov    eax,DWORD PTR [rbp+0x4]
    65023064:	mov    r9d,edi
    65023067:	mov    DWORD PTR [rsp+0x28],eax
    6502306b:	lea    rax,[rsp+0x370]
    65023073:	mov    edx,0x1
    65023078:	xor    ecx,ecx
    6502307a:	mov    QWORD PTR [rsp+0x20],rax
    6502307f:	call   0x6502a0a0
    65023084:	mov    eax,DWORD PTR [rbp+0x4]
    65023087:	mov    edx,DWORD PTR [rbp+0xc]
    6502308a:	mov    DWORD PTR [rsp+0x40],ebx
    6502308e:	mov    DWORD PTR [rsp+0x38],eax
    65023092:	lea    rax,[rsp+0x170]
    6502309a:	mov    DWORD PTR [rsp+0x30],edi
    6502309e:	mov    QWORD PTR [rsp+0x28],rax
    650230a3:	lea    r9,[rsp+0x70]
    650230a8:	mov    r8d,edi
    650230ab:	xor    ecx,ecx
    650230ad:	mov    DWORD PTR [rsp+0x20],edi
    650230b1:	call   0x65028ba0
    650230b6:	mov    eax,DWORD PTR [rbp+0x4]
    650230b9:	mov    edx,DWORD PTR [rbp+0xc]
    650230bc:	mov    DWORD PTR [rsp+0x40],ebx
    650230c0:	mov    DWORD PTR [rsp+0x38],eax
    650230c4:	lea    rax,[rsp+0x270]
    650230cc:	mov    DWORD PTR [rsp+0x30],edi
    650230d0:	mov    QWORD PTR [rsp+0x28],rax
    650230d5:	lea    r9,[rsp+0x70]
    650230da:	mov    r8d,0x200
    650230e0:	xor    ecx,ecx
    650230e2:	mov    DWORD PTR [rsp+0x20],edi
    650230e6:	call   0x65028ba0
    650230eb:	mov    rsi,QWORD PTR [rsp+0x598]
    650230f3:	lea    r11,[rsp+0x370]
    650230fb:	lea    rcx,[rbp+0x1d]
    650230ff:	nop
    65023100:	movzx  eax,WORD PTR [r11]
    65023104:	test   al,0x1
    65023106:	je     0x6502311b
    65023108:	movzx  eax,BYTE PTR [rsp+rbx*1+0x170]
    65023110:	or     BYTE PTR [rcx],0x10
    65023113:	mov    BYTE PTR [rcx+0x100],al
    65023119:	jmp    0x65023139
    6502311b:	test   al,0x2
    6502311d:	je     0x65023132
    6502311f:	movzx  eax,BYTE PTR [rsp+rbx*1+0x270]
    65023127:	or     BYTE PTR [rcx],0x20
    6502312a:	mov    BYTE PTR [rcx+0x100],al
    65023130:	jmp    0x65023139
    65023132:	mov    BYTE PTR [rcx+0x100],0x0
    65023139:	add    rcx,0x1
    6502313d:	add    rbx,0x1
    65023141:	add    r11,0x2
    65023145:	sub    rdi,0x1
    65023149:	jne    0x65023100
    6502314b:	jmp    0x6502319e
    6502314d:	xor    ebx,ebx
    6502314f:	lea    rcx,[rbp+0x1d]
    65023153:	mov    edi,0x100
    65023158:	data16 data16 xchg ax,ax
    6502315c:	data16 data16 xchg ax,ax
    65023160:	lea    edx,[rbx-0x61]
    65023163:	lea    eax,[rdx+0x20]
    65023166:	cmp    eax,0x19
    65023169:	ja     0x65023179
    6502316b:	or     BYTE PTR [rcx],0x10
    6502316e:	lea    eax,[rbx+0x20]
    65023171:	mov    BYTE PTR [rcx+0x100],al
    65023177:	jmp    0x65023193
    65023179:	cmp    edx,0x19
    6502317c:	ja     0x6502318c
    6502317e:	or     BYTE PTR [rcx],0x20
    65023181:	lea    eax,[rbx-0x20]
    65023184:	mov    BYTE PTR [rcx+0x100],al
    6502318a:	jmp    0x65023193
    6502318c:	mov    BYTE PTR [rcx+0x100],0x0
    65023193:	add    ebx,0x1
    65023196:	add    rcx,0x1
    6502319a:	cmp    ebx,edi
    6502319c:	jb     0x65023160
    6502319e:	mov    rcx,QWORD PTR [rsp+0x570]
    650231a6:	xor    rcx,rsp
    650231a9:	call   0x6501e4e0
    650231ae:	lea    r11,[rsp+0x580]
    650231b6:	mov    rbx,QWORD PTR [r11+0x20]
    650231ba:	mov    rbp,QWORD PTR [r11+0x28]
    650231be:	mov    rsp,r11
    650231c1:	pop    rdi
    650231c2:	ret    
    650231c3:	int3   
    650231c4:	int3   
    650231c5:	int3   
    650231c6:	int3   
    650231c7:	int3   
    650231c8:	int3   
    650231c9:	int3   
    650231ca:	int3   
    650231cb:	int3   
    650231cc:	int3   
    650231cd:	int3   
    650231ce:	int3   
    650231cf:	int3   
    650231d0:	mov    QWORD PTR [rsp+0x10],rbx
    650231d5:	push   rdi
    650231d6:	sub    rsp,0x20
    650231da:	call   0x650208c0
    650231df:	mov    rdi,rax
    650231e2:	mov    ecx,DWORD PTR [rax+0xc8]
    650231e8:	test   DWORD PTR [rip+0x1f63a],ecx        # 0x65042828
    650231ee:	je     0x65023203
    650231f0:	cmp    QWORD PTR [rax+0xc0],0x0
    650231f8:	je     0x65023203
    650231fa:	mov    rbx,QWORD PTR [rax+0xb8]
    65023201:	jmp    0x65023271
    65023203:	mov    ecx,0xd
    65023208:	call   0x650297c0
    6502320d:	nop
    6502320e:	mov    rbx,QWORD PTR [rdi+0xb8]
    65023215:	mov    QWORD PTR [rsp+0x30],rbx
    6502321a:	cmp    rbx,QWORD PTR [rip+0x1f4ff]        # 0x65042720
    65023221:	je     0x65023267
    65023223:	test   rbx,rbx
    65023226:	je     0x65023244
    65023228:	lock add DWORD PTR [rbx],0xffffffff
    6502322c:	jne    0x65023244
    6502322e:	lea    rax,[rip+0x1f0bb]        # 0x650422f0
    65023235:	mov    rcx,QWORD PTR [rsp+0x30]
    6502323a:	cmp    rcx,rax
    6502323d:	je     0x65023244
    6502323f:	call   0x6501fa90
    65023244:	mov    rax,QWORD PTR [rip+0x1f4d5]        # 0x65042720
    6502324b:	mov    QWORD PTR [rdi+0xb8],rax
    65023252:	mov    rax,QWORD PTR [rip+0x1f4c7]        # 0x65042720
    65023259:	mov    QWORD PTR [rsp+0x30],rax
    6502325e:	lock add DWORD PTR [rax],0x1
    65023262:	mov    rbx,QWORD PTR [rsp+0x30]
    65023267:	mov    ecx,0xd
    6502326c:	call   0x65029690
    65023271:	test   rbx,rbx
    65023274:	jne    0x6502327e
    65023276:	lea    ecx,[rbx+0x20]
    65023279:	call   0x65022af0
    6502327e:	mov    rax,rbx
    65023281:	mov    rbx,QWORD PTR [rsp+0x38]
    65023286:	add    rsp,0x20
    6502328a:	pop    rdi
    6502328b:	ret    
    6502328c:	int3   
    6502328d:	int3   
    6502328e:	int3   
    6502328f:	int3   
    65023290:	rex push rbp
    65023292:	sub    rsp,0x20
    65023296:	mov    rbp,rdx
    65023299:	mov    ecx,0xd
    6502329e:	call   0x65029690
    650232a3:	add    rsp,0x20
    650232a7:	pop    rbp
    650232a8:	ret    
    650232a9:	int3   
    650232aa:	int3   
    650232ab:	int3   
    650232ac:	int3   
    650232ad:	int3   
    650232ae:	int3   
    650232af:	int3   
    650232b0:	mov    QWORD PTR [rsp+0x8],rbx
    650232b5:	mov    QWORD PTR [rsp+0x10],rbp
    650232ba:	mov    QWORD PTR [rsp+0x18],rsi
    650232bf:	mov    QWORD PTR [rsp+0x20],rdi
    650232c4:	push   r12
    650232c6:	sub    rsp,0x20
    650232ca:	mov    edi,ecx
    650232cc:	xor    sil,sil
    650232cf:	call   0x650208c0
    650232d4:	mov    r12,QWORD PTR [rax+0xc0]
    650232db:	mov    rbp,QWORD PTR [rax+0xb8]
    650232e2:	mov    rbx,rax
    650232e5:	cmp    r12,QWORD PTR [rip+0x1f6b4]        # 0x650429a0
    650232ec:	je     0x65023304
    650232ee:	mov    edx,DWORD PTR [rax+0xc8]
    650232f4:	test   DWORD PTR [rip+0x1f52e],edx        # 0x65042828
    650232fa:	jne    0x65023304
    650232fc:	call   0x65023d20
    65023301:	mov    r12,rax
    65023304:	cmp    rbp,QWORD PTR [rip+0x1f415]        # 0x65042720
    6502330b:	je     0x65023320
    6502330d:	mov    ecx,DWORD PTR [rbx+0xc8]
    65023313:	test   DWORD PTR [rip+0x1f50f],ecx        # 0x65042828
    65023319:	jne    0x65023320
    6502331b:	call   0x650231d0
    65023320:	mov    ecx,DWORD PTR [rbx+0xc8]
    65023326:	test   cl,0x2
    65023329:	jne    0x65023337
    6502332b:	or     ecx,0x2
    6502332e:	mov    sil,0x1
    65023331:	mov    DWORD PTR [rbx+0xc8],ecx
    65023337:	cmp    edi,0xfffffffe
    6502333a:	mov    DWORD PTR [rip+0x20f1c],0x0        # 0x65044260
    65023344:	jne    0x65023364
    65023346:	mov    DWORD PTR [rip+0x20f10],0x1        # 0x65044260
    65023350:	call   QWORD PTR [rip+0x10f3a]        # 0x65034290
    65023356:	test   sil,sil
    65023359:	je     0x6502339f
    6502335b:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    65023362:	jmp    0x6502339f
    65023364:	cmp    edi,0xfffffffd
    65023367:	jne    0x6502337b
    65023369:	mov    DWORD PTR [rip+0x20eed],0x1        # 0x65044260
    65023373:	call   QWORD PTR [rip+0x10db7]        # 0x65034130
    65023379:	jmp    0x65023356
    6502337b:	cmp    edi,0xfffffffc
    6502337e:	jne    0x65023391
    65023380:	mov    eax,DWORD PTR [r12+0x4]
    65023385:	mov    DWORD PTR [rip+0x20ed1],0x1        # 0x65044260
    6502338f:	jmp    0x65023356
    65023391:	test   sil,sil
    65023394:	je     0x6502339d
    65023396:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502339d:	mov    eax,edi
    6502339f:	mov    rbx,QWORD PTR [rsp+0x30]
    650233a4:	mov    rbp,QWORD PTR [rsp+0x38]
    650233a9:	mov    rsi,QWORD PTR [rsp+0x40]
    650233ae:	mov    rdi,QWORD PTR [rsp+0x48]
    650233b3:	add    rsp,0x20
    650233b7:	pop    r12
    650233b9:	ret    
    650233ba:	int3   
    650233bb:	int3   
    650233bc:	int3   
    650233bd:	int3   
    650233be:	int3   
    650233bf:	int3   
    650233c0:	rex push rbx
    650233c2:	push   rbp
    650233c3:	push   rsi
    650233c4:	push   rdi
    650233c5:	sub    rsp,0x48
    650233c9:	mov    rax,QWORD PTR [rip+0x1ed50]        # 0x65042120
    650233d0:	xor    rax,rsp
    650233d3:	mov    QWORD PTR [rsp+0x38],rax
    650233d8:	mov    rbx,rdx
    650233db:	call   0x650232b0
    650233e0:	test   eax,eax
    650233e2:	mov    edi,eax
    650233e4:	jne    0x65023471
    650233ea:	lea    rdi,[rbx+0x1c]
    650233ee:	mov    esi,0x101
    650233f3:	xor    edx,edx
    650233f5:	mov    rcx,rdi
    650233f8:	mov    r8,rsi
    650233fb:	call   0x6501ee30
    65023400:	xor    ebp,ebp
    65023402:	lea    rdx,[rip+0x1eee7]        # 0x650422f0
    65023409:	mov    DWORD PTR [rbx+0x4],ebp
    6502340c:	mov    DWORD PTR [rbx+0x8],ebp
    6502340f:	mov    DWORD PTR [rbx+0xc],ebp
    65023412:	mov    QWORD PTR [rbx+0x10],rbp
    65023416:	sub    rdx,rbx
    65023419:	mov    DWORD PTR [rbx+0x18],ebp
    6502341c:	data16 data16 xchg ax,ax
    65023420:	movzx  eax,BYTE PTR [rdx+rdi*1]
    65023424:	add    rdi,0x1
    65023428:	sub    rsi,0x1
    6502342c:	mov    BYTE PTR [rdi-0x1],al
    6502342f:	jne    0x65023420
    65023431:	lea    r9,[rip+0x1eeb9]        # 0x650422f1
    65023438:	lea    rcx,[rbx+0x11d]
    6502343f:	mov    r8d,0x80
    65023445:	sub    r9,rbx
    65023448:	data16 data16 xchg ax,ax
    6502344c:	data16 data16 xchg ax,ax
    65023450:	movzx  eax,BYTE PTR [rcx+rdx*1]
    65023454:	add    rcx,0x2
    65023458:	sub    r8,0x1
    6502345c:	mov    BYTE PTR [rcx-0x2],al
    6502345f:	movzx  eax,BYTE PTR [r9+rcx*1-0x2]
    65023465:	mov    BYTE PTR [rcx-0x1],al
    65023468:	jne    0x65023450
    6502346a:	xor    eax,eax
    6502346c:	jmp    0x65023766
    65023471:	mov    QWORD PTR [rsp+0x80],r12
    65023479:	xor    ebp,ebp
    6502347b:	mov    QWORD PTR [rsp+0x40],r13
    65023480:	lea    r13,[rip+0x1f2a9]        # 0x65042730
    65023487:	mov    ecx,ebp
    65023489:	mov    r12,rbp
    6502348c:	mov    rax,r13
    6502348f:	nop
    65023490:	cmp    DWORD PTR [rax],edi
    65023492:	je     0x6502363b
    65023498:	add    ecx,0x1
    6502349b:	add    r12,0x1
    6502349f:	add    rax,0x30
    650234a3:	cmp    ecx,0x5
    650234a6:	jb     0x65023490
    650234a8:	cmp    edi,0xfde8
    650234ae:	je     0x65023633
    650234b4:	cmp    edi,0xfde9
    650234ba:	je     0x65023633
    650234c0:	movzx  ecx,di
    650234c3:	call   QWORD PTR [rip+0x10dcf]        # 0x65034298
    650234c9:	test   eax,eax
    650234cb:	je     0x65023633
    650234d1:	lea    rdx,[rsp+0x20]
    650234d6:	mov    ecx,edi
    650234d8:	call   QWORD PTR [rip+0x10daa]        # 0x65034288
    650234de:	test   eax,eax
    650234e0:	je     0x6502361e
    650234e6:	lea    rcx,[rbx+0x1c]
    650234ea:	mov    r8d,0x101
    650234f0:	xor    edx,edx
    650234f2:	call   0x6501ee30
    650234f7:	cmp    DWORD PTR [rsp+0x20],0x1
    650234fc:	mov    DWORD PTR [rbx+0x4],edi
    650234ff:	mov    DWORD PTR [rbx+0xc],ebp
    65023502:	jbe    0x6502360f
    65023508:	cmp    BYTE PTR [rsp+0x26],bpl
    6502350d:	lea    rdx,[rsp+0x26]
    65023512:	je     0x65023549
    65023514:	movzx  eax,BYTE PTR [rdx+0x1]
    65023518:	test   al,al
    6502351a:	je     0x65023549
    6502351c:	movzx  r8d,BYTE PTR [rdx]
    65023520:	movzx  ecx,al
    65023523:	cmp    r8d,ecx
    65023526:	ja     0x65023540
    65023528:	sub    ecx,r8d
    6502352b:	lea    rax,[r8+rbx*1+0x1d]
    65023530:	add    ecx,0x1
    65023533:	or     BYTE PTR [rax],0x4
    65023536:	add    rax,0x1
    6502353a:	sub    rcx,0x1
    6502353e:	jne    0x65023533
    65023540:	add    rdx,0x2
    65023544:	cmp    BYTE PTR [rdx],bpl
    65023547:	jne    0x65023514
    65023549:	lea    rax,[rbx+0x1f]
    6502354d:	mov    ecx,0x7f
    65023552:	xchg   ax,ax
    65023554:	data16 data16 xchg ax,ax
    65023558:	data16 data16 xchg ax,ax
    6502355c:	data16 data16 xchg ax,ax
    65023560:	or     BYTE PTR [rax-0x1],0x8
    65023564:	or     BYTE PTR [rax],0x8
    65023567:	add    rax,0x2
    6502356b:	sub    rcx,0x1
    6502356f:	jne    0x65023560
    65023571:	mov    ecx,DWORD PTR [rbx+0x4]
    65023574:	sub    ecx,0x3a4
    6502357a:	je     0x650235f4
    6502357c:	sub    ecx,0x4
    6502357f:	je     0x650235d9
    65023581:	sub    ecx,0xd
    65023584:	je     0x650235be
    65023586:	cmp    ecx,0x1
    65023589:	je     0x650235a3
    6502358b:	mov    DWORD PTR [rbx+0x8],0x1
    65023592:	mov    eax,ebp
    65023594:	mov    DWORD PTR [rbx+0xc],eax
    65023597:	mov    QWORD PTR [rbx+0x10],rbp
    6502359b:	mov    DWORD PTR [rbx+0x18],ebp
    6502359e:	jmp    0x6502374f
    650235a3:	mov    DWORD PTR [rbx+0x8],0x1
    650235aa:	mov    eax,0x404
    650235af:	mov    DWORD PTR [rbx+0xc],eax
    650235b2:	mov    QWORD PTR [rbx+0x10],rbp
    650235b6:	mov    DWORD PTR [rbx+0x18],ebp
    650235b9:	jmp    0x6502374f
    650235be:	mov    DWORD PTR [rbx+0x8],0x1
    650235c5:	mov    eax,0x412
    650235ca:	mov    DWORD PTR [rbx+0xc],eax
    650235cd:	mov    QWORD PTR [rbx+0x10],rbp
    650235d1:	mov    DWORD PTR [rbx+0x18],ebp
    650235d4:	jmp    0x6502374f
    650235d9:	mov    DWORD PTR [rbx+0x8],0x1
    650235e0:	mov    eax,0x804
    650235e5:	mov    DWORD PTR [rbx+0xc],eax
    650235e8:	mov    QWORD PTR [rbx+0x10],rbp
    650235ec:	mov    DWORD PTR [rbx+0x18],ebp
    650235ef:	jmp    0x6502374f
    650235f4:	mov    DWORD PTR [rbx+0x8],0x1
    650235fb:	mov    eax,0x411
    65023600:	mov    DWORD PTR [rbx+0xc],eax
    65023603:	mov    QWORD PTR [rbx+0x10],rbp
    65023607:	mov    DWORD PTR [rbx+0x18],ebp
    6502360a:	jmp    0x6502374f
    6502360f:	mov    DWORD PTR [rbx+0x8],ebp
    65023612:	mov    QWORD PTR [rbx+0x10],rbp
    65023616:	mov    DWORD PTR [rbx+0x18],ebp
    65023619:	jmp    0x6502374f
    6502361e:	cmp    DWORD PTR [rip+0x20c3c],ebp        # 0x65044260
    65023624:	je     0x65023633
    65023626:	mov    rcx,rbx
    65023629:	call   0x65022f00
    6502362e:	jmp    0x65023757
    65023633:	or     eax,0xffffffff
    65023636:	jmp    0x65023759
    6502363b:	lea    rcx,[rbx+0x1c]
    6502363f:	mov    r8d,0x101
    65023645:	xor    edx,edx
    65023647:	call   0x6501ee30
    6502364c:	lea    r9,[r12+r12*2]
    65023650:	lea    rax,[rip+0x1f0e9]        # 0x65042740
    65023657:	shl    r9,0x4
    6502365b:	lea    r11,[rip+0x1f0c6]        # 0x65042728
    65023662:	mov    r10d,0x4
    65023668:	add    r9,rax
    6502366b:	xchg   ax,ax
    6502366d:	data16 xchg ax,ax
    65023670:	cmp    BYTE PTR [r9],bpl
    65023673:	mov    r8,r9
    65023676:	je     0x650236c0
    65023678:	data16 data16 xchg ax,ax
    6502367c:	data16 data16 xchg ax,ax
    65023680:	movzx  eax,BYTE PTR [r8+0x1]
    65023685:	test   al,al
    65023687:	je     0x650236c0
    65023689:	movzx  edx,BYTE PTR [r8]
    6502368d:	movzx  eax,al
    65023690:	cmp    edx,eax
    65023692:	ja     0x650236b7
    65023694:	lea    rcx,[rdx+rbx*1+0x1d]
    65023699:	data16 xchg ax,ax
    6502369c:	data16 data16 xchg ax,ax
    650236a0:	movzx  eax,BYTE PTR [r11]
    650236a4:	add    edx,0x1
    650236a7:	add    rcx,0x1
    650236ab:	or     BYTE PTR [rcx-0x1],al
    650236ae:	movzx  eax,BYTE PTR [r8+0x1]
    650236b3:	cmp    edx,eax
    650236b5:	jbe    0x650236a0
    650236b7:	add    r8,0x2
    650236bb:	cmp    BYTE PTR [r8],bpl
    650236be:	jne    0x65023680
    650236c0:	add    r9,0x8
    650236c4:	add    r11,0x1
    650236c8:	sub    r10,0x1
    650236cc:	jne    0x65023670
    650236ce:	mov    DWORD PTR [rbx+0x4],edi
    650236d1:	sub    edi,0x3a4
    650236d7:	mov    DWORD PTR [rbx+0x8],0x1
    650236de:	je     0x65023704
    650236e0:	sub    edi,0x4
    650236e3:	je     0x650236fd
    650236e5:	sub    edi,0xd
    650236e8:	je     0x650236f6
    650236ea:	cmp    edi,0x1
    650236ed:	jne    0x65023709
    650236ef:	mov    ebp,0x404
    650236f4:	jmp    0x65023709
    650236f6:	mov    ebp,0x412
    650236fb:	jmp    0x65023709
    650236fd:	mov    ebp,0x804
    65023702:	jmp    0x65023709
    65023704:	mov    ebp,0x411
    65023709:	mov    DWORD PTR [rbx+0xc],ebp
    6502370c:	lea    rcx,[r12+r12*2]
    65023710:	add    rcx,rcx
    65023713:	movzx  eax,WORD PTR [r13+rcx*8+0x4]
    65023719:	mov    WORD PTR [rbx+0x10],ax
    6502371d:	movzx  eax,WORD PTR [r13+rcx*8+0x6]
    65023723:	mov    WORD PTR [rbx+0x12],ax
    65023727:	movzx  eax,WORD PTR [r13+rcx*8+0x8]
    6502372d:	mov    WORD PTR [rbx+0x14],ax
    65023731:	movzx  eax,WORD PTR [r13+rcx*8+0xa]
    65023737:	mov    WORD PTR [rbx+0x16],ax
    6502373b:	movzx  eax,WORD PTR [r13+rcx*8+0xc]
    65023741:	mov    WORD PTR [rbx+0x18],ax
    65023745:	movzx  eax,WORD PTR [r13+rcx*8+0xe]
    6502374b:	mov    WORD PTR [rbx+0x1a],ax
    6502374f:	mov    rcx,rbx
    65023752:	call   0x65022fb0
    65023757:	xor    eax,eax
    65023759:	mov    r12,QWORD PTR [rsp+0x80]
    65023761:	mov    r13,QWORD PTR [rsp+0x40]
    65023766:	mov    rcx,QWORD PTR [rsp+0x38]
    6502376b:	xor    rcx,rsp
    6502376e:	call   0x6501e4e0
    65023773:	add    rsp,0x48
    65023777:	pop    rdi
    65023778:	pop    rsi
    65023779:	pop    rbp
    6502377a:	pop    rbx
    6502377b:	ret    
    6502377c:	int3   
    6502377d:	int3   
    6502377e:	int3   
    6502377f:	int3   
    65023780:	mov    QWORD PTR [rsp+0x8],rbx
    65023785:	mov    QWORD PTR [rsp+0x10],rsi
    6502378a:	mov    QWORD PTR [rsp+0x18],rdi
    6502378f:	push   r12
    65023791:	push   r13
    65023793:	push   r14
    65023795:	sub    rsp,0x30
    65023799:	mov    edi,ecx
    6502379b:	or     r14d,0xffffffff
    6502379f:	call   0x650208c0
    650237a4:	mov    rsi,rax
    650237a7:	call   0x650231d0
    650237ac:	mov    rbx,QWORD PTR [rsi+0xb8]
    650237b3:	mov    ecx,edi
    650237b5:	call   0x650232b0
    650237ba:	mov    r12d,eax
    650237bd:	cmp    eax,DWORD PTR [rbx+0x4]
    650237c0:	je     0x6502395f
    650237c6:	mov    ecx,0x220
    650237cb:	call   0x65022910
    650237d0:	mov    rdi,rax
    650237d3:	test   rax,rax
    650237d6:	je     0x65023964
    650237dc:	mov    rdx,QWORD PTR [rsi+0xb8]
    650237e3:	mov    rcx,rax
    650237e6:	mov    r8d,0x220
    650237ec:	call   0x6501fbc0
    650237f1:	xor    ebx,ebx
    650237f3:	mov    DWORD PTR [rdi],ebx
    650237f5:	mov    rdx,rdi
    650237f8:	mov    ecx,r12d
    650237fb:	call   0x650233c0
    65023800:	mov    r14d,eax
    65023803:	test   eax,eax
    65023805:	jne    0x65023939
    6502380b:	mov    rcx,QWORD PTR [rsi+0xb8]
    65023812:	lock add DWORD PTR [rcx],0xffffffff
    65023816:	jne    0x65023832
    65023818:	mov    rcx,QWORD PTR [rsi+0xb8]
    6502381f:	lea    r12,[rip+0x1eaca]        # 0x650422f0
    65023826:	cmp    rcx,r12
    65023829:	je     0x65023839
    6502382b:	call   0x6501fa90
    65023830:	jmp    0x65023839
    65023832:	lea    r12,[rip+0x1eab7]        # 0x650422f0
    65023839:	mov    QWORD PTR [rsi+0xb8],rdi
    65023840:	lock add DWORD PTR [rdi],0x1
    65023844:	test   BYTE PTR [rsi+0xc8],0x2
    6502384b:	jne    0x65023964
    65023851:	test   BYTE PTR [rip+0x1efd0],0x1        # 0x65042828
    65023858:	jne    0x65023964
    6502385e:	mov    ecx,0xd
    65023863:	call   0x650297c0
    65023868:	nop
    65023869:	mov    eax,DWORD PTR [rdi+0x4]
    6502386c:	mov    DWORD PTR [rip+0x20a02],eax        # 0x65044274
    65023872:	mov    eax,DWORD PTR [rdi+0x8]
    65023875:	mov    DWORD PTR [rip+0x209fd],eax        # 0x65044278
    6502387b:	mov    eax,DWORD PTR [rdi+0xc]
    6502387e:	mov    DWORD PTR [rip+0x209f8],eax        # 0x6504427c
    65023884:	mov    edx,ebx
    65023886:	mov    DWORD PTR [rsp+0x20],ebx
    6502388a:	lea    r8,[rip+0xfffffffffffdc76f]        # 0x65000000
    65023891:	cmp    edx,0x5
    65023894:	jge    0x650238b0
    65023896:	movsxd rcx,edx
    65023899:	movzx  eax,WORD PTR [rdi+rcx*2+0x10]
    6502389e:	mov    WORD PTR [r8+rcx*2+0x44268],ax
    650238a7:	add    edx,0x1
    650238aa:	mov    DWORD PTR [rsp+0x20],edx
    650238ae:	jmp    0x65023891
    650238b0:	mov    edx,ebx
    650238b2:	mov    DWORD PTR [rsp+0x20],ebx
    650238b6:	cmp    edx,0x101
    650238bc:	jge    0x650238d7
    650238be:	movsxd rcx,edx
    650238c1:	movzx  eax,BYTE PTR [rcx+rdi*1+0x1c]
    650238c6:	mov    BYTE PTR [rcx+r8*1+0x42510],al
    650238ce:	add    edx,0x1
    650238d1:	mov    DWORD PTR [rsp+0x20],edx
    650238d5:	jmp    0x650238b6
    650238d7:	mov    DWORD PTR [rsp+0x20],ebx
    650238db:	xchg   ax,ax
    650238dd:	data16 xchg ax,ax
    650238e0:	cmp    ebx,0x100
    650238e6:	jge    0x65023904
    650238e8:	movsxd rcx,ebx
    650238eb:	movzx  eax,BYTE PTR [rcx+rdi*1+0x11d]
    650238f3:	mov    BYTE PTR [rcx+r8*1+0x42620],al
    650238fb:	add    ebx,0x1
    650238fe:	mov    DWORD PTR [rsp+0x20],ebx
    65023902:	jmp    0x650238e0
    65023904:	mov    rax,QWORD PTR [rip+0x1ee15]        # 0x65042720
    6502390b:	lock add DWORD PTR [rax],0xffffffff
    6502390f:	jne    0x65023922
    65023911:	mov    rcx,QWORD PTR [rip+0x1ee08]        # 0x65042720
    65023918:	cmp    rcx,r12
    6502391b:	je     0x65023922
    6502391d:	call   0x6501fa90
    65023922:	mov    QWORD PTR [rip+0x1edf7],rdi        # 0x65042720
    65023929:	lock add DWORD PTR [rdi],0x1
    6502392d:	mov    ecx,0xd
    65023932:	call   0x65029690
    65023937:	jmp    0x65023964
    65023939:	cmp    eax,0xffffffff
    6502393c:	jne    0x65023964
    6502393e:	lea    r12,[rip+0x1e9ab]        # 0x650422f0
    65023945:	cmp    rdi,r12
    65023948:	je     0x65023952
    6502394a:	mov    rcx,rdi
    6502394d:	call   0x6501fa90
    65023952:	call   0x650202b0
    65023957:	mov    DWORD PTR [rax],0x16
    6502395d:	jmp    0x65023964
    6502395f:	xor    ebx,ebx
    65023961:	mov    r14d,ebx
    65023964:	mov    eax,r14d
    65023967:	mov    rbx,QWORD PTR [rsp+0x50]
    6502396c:	mov    rsi,QWORD PTR [rsp+0x58]
    65023971:	mov    rdi,QWORD PTR [rsp+0x60]
    65023976:	add    rsp,0x30
    6502397a:	pop    r14
    6502397c:	pop    r13
    6502397e:	pop    r12
    65023980:	ret    
    65023981:	int3   
    65023982:	int3   
    65023983:	int3   
    65023984:	int3   
    65023985:	int3   
    65023986:	int3   
    65023987:	int3   
    65023988:	int3   
    65023989:	int3   
    6502398a:	int3   
    6502398b:	int3   
    6502398c:	int3   
    6502398d:	int3   
    6502398e:	int3   
    6502398f:	int3   
    65023990:	rex push rbp
    65023992:	sub    rsp,0x20
    65023996:	mov    rbp,rdx
    65023999:	mov    ecx,0xd
    6502399e:	call   0x65029690
    650239a3:	add    rsp,0x20
    650239a7:	pop    rbp
    650239a8:	ret    
    650239a9:	int3   
    650239aa:	int3   
    650239ab:	int3   
    650239ac:	int3   
    650239ad:	int3   
    650239ae:	int3   
    650239af:	int3   
    650239b0:	sub    rsp,0x28
    650239b4:	cmp    DWORD PTR [rip+0x247dd],0x0        # 0x65048198
    650239bb:	jne    0x650239d1
    650239bd:	mov    ecx,0xfffffffd
    650239c2:	call   0x65023780
    650239c7:	mov    DWORD PTR [rip+0x247c7],0x1        # 0x65048198
    650239d1:	xor    eax,eax
    650239d3:	add    rsp,0x28
    650239d7:	ret    
    650239d8:	int3   
    650239d9:	int3   
    650239da:	int3   
    650239db:	int3   
    650239dc:	int3   
    650239dd:	int3   
    650239de:	int3   
    650239df:	int3   
    650239e0:	mov    QWORD PTR [rsp+0x8],rbx
    650239e5:	mov    QWORD PTR [rsp+0x10],rbp
    650239ea:	mov    QWORD PTR [rsp+0x18],rsi
    650239ef:	push   rdi
    650239f0:	sub    rsp,0x20
    650239f4:	mov    rax,QWORD PTR [rcx+0x128]
    650239fb:	mov    rdi,rcx
    650239fe:	test   rax,rax
    65023a01:	je     0x65023a7c
    65023a03:	lea    rcx,[rip+0x1f686]        # 0x65043090
    65023a0a:	cmp    rax,rcx
    65023a0d:	je     0x65023a7c
    65023a0f:	mov    rax,QWORD PTR [rdi+0x110]
    65023a16:	test   rax,rax
    65023a19:	je     0x65023a7c
    65023a1b:	cmp    DWORD PTR [rax],0x0
    65023a1e:	jne    0x65023a7c
    65023a20:	mov    rcx,QWORD PTR [rdi+0x120]
    65023a27:	test   rcx,rcx
    65023a2a:	je     0x65023a42
    65023a2c:	cmp    DWORD PTR [rcx],0x0
    65023a2f:	jne    0x65023a42
    65023a31:	call   0x6501fa90
    65023a36:	mov    rcx,QWORD PTR [rdi+0x128]
    65023a3d:	call   0x6502a430
    65023a42:	mov    rcx,QWORD PTR [rdi+0x118]
    65023a49:	test   rcx,rcx
    65023a4c:	je     0x65023a64
    65023a4e:	cmp    DWORD PTR [rcx],0x0
    65023a51:	jne    0x65023a64
    65023a53:	call   0x6501fa90
    65023a58:	mov    rcx,QWORD PTR [rdi+0x128]
    65023a5f:	call   0x6502a3e0
    65023a64:	mov    rcx,QWORD PTR [rdi+0x110]
    65023a6b:	call   0x6501fa90
    65023a70:	mov    rcx,QWORD PTR [rdi+0x128]
    65023a77:	call   0x6501fa90
    65023a7c:	mov    rax,QWORD PTR [rdi+0x130]
    65023a83:	test   rax,rax
    65023a86:	je     0x65023acc
    65023a88:	cmp    DWORD PTR [rax],0x0
    65023a8b:	jne    0x65023acc
    65023a8d:	mov    rcx,QWORD PTR [rdi+0x138]
    65023a94:	sub    rcx,0xfe
    65023a9b:	call   0x6501fa90
    65023aa0:	mov    rcx,QWORD PTR [rdi+0x148]
    65023aa7:	add    rcx,0xffffffffffffff80
    65023aab:	call   0x6501fa90
    65023ab0:	mov    rcx,QWORD PTR [rdi+0x150]
    65023ab7:	add    rcx,0xffffffffffffff80
    65023abb:	call   0x6501fa90
    65023ac0:	mov    rcx,QWORD PTR [rdi+0x130]
    65023ac7:	call   0x6501fa90
    65023acc:	mov    rcx,QWORD PTR [rdi+0x158]
    65023ad3:	lea    rax,[rip+0x1f436]        # 0x65042f10
    65023ada:	cmp    rcx,rax
    65023add:	je     0x65023af9
    65023adf:	cmp    DWORD PTR [rcx+0x160],0x0
    65023ae6:	jne    0x65023af9
    65023ae8:	call   0x6502a1f0
    65023aed:	mov    rcx,QWORD PTR [rdi+0x158]
    65023af4:	call   0x6501fa90
    65023af9:	lea    rbx,[rdi+0x58]
    65023afd:	mov    esi,0x6
    65023b02:	lea    rbp,[rip+0x1ed27]        # 0x65042830
    65023b09:	data16 xchg ax,ax
    65023b0c:	data16 data16 xchg ax,ax
    65023b10:	cmp    QWORD PTR [rbx-0x10],rbp
    65023b14:	je     0x65023b28
    65023b16:	mov    rcx,QWORD PTR [rbx]
    65023b19:	test   rcx,rcx
    65023b1c:	je     0x65023b28
    65023b1e:	cmp    DWORD PTR [rcx],0x0
    65023b21:	jne    0x65023b28
    65023b23:	call   0x6501fa90
    65023b28:	cmp    QWORD PTR [rbx-0x8],0x0
    65023b2d:	je     0x65023b42
    65023b2f:	mov    rcx,QWORD PTR [rbx+0x8]
    65023b33:	test   rcx,rcx
    65023b36:	je     0x65023b42
    65023b38:	cmp    DWORD PTR [rcx],0x0
    65023b3b:	jne    0x65023b42
    65023b3d:	call   0x6501fa90
    65023b42:	add    rbx,0x20
    65023b46:	sub    rsi,0x1
    65023b4a:	jne    0x65023b10
    65023b4c:	mov    rcx,rdi
    65023b4f:	mov    rbx,QWORD PTR [rsp+0x30]
    65023b54:	mov    rbp,QWORD PTR [rsp+0x38]
    65023b59:	mov    rsi,QWORD PTR [rsp+0x40]
    65023b5e:	add    rsp,0x20
    65023b62:	pop    rdi
    65023b63:	jmp    0x6501fa90
    65023b68:	int3   
    65023b69:	int3   
    65023b6a:	int3   
    65023b6b:	int3   
    65023b6c:	int3   
    65023b6d:	int3   
    65023b6e:	int3   
    65023b6f:	int3   
    65023b70:	mov    rdx,rcx
    65023b73:	lock add DWORD PTR [rcx],0x1
    65023b77:	mov    rax,QWORD PTR [rcx+0x110]
    65023b7e:	test   rax,rax
    65023b81:	je     0x65023b87
    65023b83:	lock add DWORD PTR [rax],0x1
    65023b87:	mov    rax,QWORD PTR [rcx+0x120]
    65023b8e:	test   rax,rax
    65023b91:	je     0x65023b97
    65023b93:	lock add DWORD PTR [rax],0x1
    65023b97:	mov    rax,QWORD PTR [rcx+0x118]
    65023b9e:	test   rax,rax
    65023ba1:	je     0x65023ba7
    65023ba3:	lock add DWORD PTR [rax],0x1
    65023ba7:	mov    rax,QWORD PTR [rcx+0x130]
    65023bae:	test   rax,rax
    65023bb1:	je     0x65023bb7
    65023bb3:	lock add DWORD PTR [rax],0x1
    65023bb7:	lea    rax,[rcx+0x58]
    65023bbb:	mov    r8d,0x6
    65023bc1:	lea    r9,[rip+0x1ec68]        # 0x65042830
    65023bc8:	cmp    QWORD PTR [rax-0x10],r9
    65023bcc:	je     0x65023bda
    65023bce:	mov    rcx,QWORD PTR [rax]
    65023bd1:	test   rcx,rcx
    65023bd4:	je     0x65023bda
    65023bd6:	lock add DWORD PTR [rcx],0x1
    65023bda:	cmp    QWORD PTR [rax-0x8],0x0
    65023bdf:	je     0x65023bee
    65023be1:	mov    rcx,QWORD PTR [rax+0x8]
    65023be5:	test   rcx,rcx
    65023be8:	je     0x65023bee
    65023bea:	lock add DWORD PTR [rcx],0x1
    65023bee:	add    rax,0x20
    65023bf2:	sub    r8,0x1
    65023bf6:	jne    0x65023bc8
    65023bf8:	mov    rax,QWORD PTR [rdx+0x158]
    65023bff:	lock add DWORD PTR [rax+0x160],0x1
    65023c07:	ret    
    65023c08:	int3   
    65023c09:	int3   
    65023c0a:	int3   
    65023c0b:	int3   
    65023c0c:	int3   
    65023c0d:	int3   
    65023c0e:	int3   
    65023c0f:	int3   
    65023c10:	test   rcx,rcx
    65023c13:	je     0x65023caf
    65023c19:	lock add DWORD PTR [rcx],0xffffffff
    65023c1d:	mov    rax,QWORD PTR [rcx+0x110]
    65023c24:	test   rax,rax
    65023c27:	je     0x65023c2d
    65023c29:	lock add DWORD PTR [rax],0xffffffff
    65023c2d:	mov    rax,QWORD PTR [rcx+0x120]
    65023c34:	test   rax,rax
    65023c37:	je     0x65023c3d
    65023c39:	lock add DWORD PTR [rax],0xffffffff
    65023c3d:	mov    rax,QWORD PTR [rcx+0x118]
    65023c44:	test   rax,rax
    65023c47:	je     0x65023c4d
    65023c49:	lock add DWORD PTR [rax],0xffffffff
    65023c4d:	mov    rax,QWORD PTR [rcx+0x130]
    65023c54:	test   rax,rax
    65023c57:	je     0x65023c5d
    65023c59:	lock add DWORD PTR [rax],0xffffffff
    65023c5d:	lea    rax,[rcx+0x58]
    65023c61:	mov    r8d,0x6
    65023c67:	lea    r9,[rip+0x1ebc2]        # 0x65042830
    65023c6e:	xchg   ax,ax
    65023c70:	cmp    QWORD PTR [rax-0x10],r9
    65023c74:	je     0x65023c82
    65023c76:	mov    rdx,QWORD PTR [rax]
    65023c79:	test   rdx,rdx
    65023c7c:	je     0x65023c82
    65023c7e:	lock add DWORD PTR [rdx],0xffffffff
    65023c82:	cmp    QWORD PTR [rax-0x8],0x0
    65023c87:	je     0x65023c96
    65023c89:	mov    rdx,QWORD PTR [rax+0x8]
    65023c8d:	test   rdx,rdx
    65023c90:	je     0x65023c96
    65023c92:	lock add DWORD PTR [rdx],0xffffffff
    65023c96:	add    rax,0x20
    65023c9a:	sub    r8,0x1
    65023c9e:	jne    0x65023c70
    65023ca0:	mov    rax,QWORD PTR [rcx+0x158]
    65023ca7:	lock add DWORD PTR [rax+0x160],0xffffffff
    65023caf:	mov    rax,rcx
    65023cb2:	ret    
    65023cb3:	int3   
    65023cb4:	int3   
    65023cb5:	int3   
    65023cb6:	int3   
    65023cb7:	int3   
    65023cb8:	int3   
    65023cb9:	int3   
    65023cba:	int3   
    65023cbb:	int3   
    65023cbc:	int3   
    65023cbd:	int3   
    65023cbe:	int3   
    65023cbf:	int3   
    65023cc0:	rex push rbx
    65023cc2:	sub    rsp,0x20
    65023cc6:	test   rdx,rdx
    65023cc9:	mov    rbx,rdx
    65023ccc:	je     0x65023d13
    65023cce:	test   rcx,rcx
    65023cd1:	je     0x65023d13
    65023cd3:	mov    r10,QWORD PTR [rcx]
    65023cd6:	cmp    r10,rdx
    65023cd9:	je     0x65023d0a
    65023cdb:	mov    QWORD PTR [rcx],rdx
    65023cde:	mov    rcx,rdx
    65023ce1:	call   0x65023b70
    65023ce6:	test   r10,r10
    65023ce9:	je     0x65023d0a
    65023ceb:	mov    rcx,r10
    65023cee:	call   0x65023c10
    65023cf3:	cmp    DWORD PTR [r10],0x0
    65023cf7:	jne    0x65023d0a
    65023cf9:	lea    rax,[rip+0x1eb40]        # 0x65042840
    65023d00:	cmp    r10,rax
    65023d03:	je     0x65023d0a
    65023d05:	call   0x650239e0
    65023d0a:	mov    rax,rbx
    65023d0d:	add    rsp,0x20
    65023d11:	pop    rbx
    65023d12:	ret    
    65023d13:	xor    eax,eax
    65023d15:	add    rsp,0x20
    65023d19:	pop    rbx
    65023d1a:	ret    
    65023d1b:	int3   
    65023d1c:	int3   
    65023d1d:	int3   
    65023d1e:	int3   
    65023d1f:	int3   
    65023d20:	rex push rbx
    65023d22:	sub    rsp,0x20
    65023d26:	call   0x650208c0
    65023d2b:	mov    rbx,rax
    65023d2e:	mov    ecx,DWORD PTR [rax+0xc8]
    65023d34:	test   DWORD PTR [rip+0x1eaee],ecx        # 0x65042828
    65023d3a:	je     0x65023d54
    65023d3c:	cmp    QWORD PTR [rax+0xc0],0x0
    65023d44:	je     0x65023d54
    65023d46:	call   0x650208c0
    65023d4b:	mov    rbx,QWORD PTR [rax+0xc0]
    65023d52:	jmp    0x65023d7f
    65023d54:	mov    ecx,0xc
    65023d59:	call   0x650297c0
    65023d5e:	nop
    65023d5f:	lea    rcx,[rbx+0xc0]
    65023d66:	mov    rdx,QWORD PTR [rip+0x1ec33]        # 0x650429a0
    65023d6d:	call   0x65023cc0
    65023d72:	mov    rbx,rax
    65023d75:	mov    ecx,0xc
    65023d7a:	call   0x65029690
    65023d7f:	test   rbx,rbx
    65023d82:	jne    0x65023d8c
    65023d84:	lea    ecx,[rbx+0x20]
    65023d87:	call   0x65022af0
    65023d8c:	mov    rax,rbx
    65023d8f:	add    rsp,0x20
    65023d93:	pop    rbx
    65023d94:	ret    
    65023d95:	int3   
    65023d96:	int3   
    65023d97:	int3   
    65023d98:	int3   
    65023d99:	int3   
    65023d9a:	int3   
    65023d9b:	int3   
    65023d9c:	int3   
    65023d9d:	int3   
    65023d9e:	int3   
    65023d9f:	int3   
    65023da0:	rex push rbp
    65023da2:	sub    rsp,0x20
    65023da6:	mov    rbp,rdx
    65023da9:	mov    ecx,0xc
    65023dae:	call   0x65029690
    65023db3:	add    rsp,0x20
    65023db7:	pop    rbp
    65023db8:	ret    
    65023db9:	int3   
    65023dba:	int3   
    65023dbb:	int3   
    65023dbc:	int3   
    65023dbd:	int3   
    65023dbe:	int3   
    65023dbf:	int3   
    65023dc0:	mov    QWORD PTR [rsp+0x20],rbx
    65023dc5:	mov    DWORD PTR [rsp+0x8],ecx
    65023dc9:	push   rdi
    65023dca:	sub    rsp,0x20
    65023dce:	mov    rcx,rdx
    65023dd1:	mov    rbx,rdx
    65023dd4:	call   0x6502b620
    65023dd9:	mov    ecx,DWORD PTR [rbx+0x18]
    65023ddc:	test   cl,0x82
    65023ddf:	movsxd rdi,eax
    65023de2:	jne    0x65023e01
    65023de4:	call   0x650202b0
    65023de9:	mov    DWORD PTR [rax],0x9
    65023def:	or     DWORD PTR [rbx+0x18],0x20
    65023df3:	or     eax,0xffffffff
    65023df6:	mov    rbx,QWORD PTR [rsp+0x48]
    65023dfb:	add    rsp,0x20
    65023dff:	pop    rdi
    65023e00:	ret    
    65023e01:	test   cl,0x40
    65023e04:	je     0x65023e23
    65023e06:	call   0x650202b0
    65023e0b:	mov    DWORD PTR [rax],0x22
    65023e11:	or     DWORD PTR [rbx+0x18],0x20
    65023e15:	or     eax,0xffffffff
    65023e18:	mov    rbx,QWORD PTR [rsp+0x48]
    65023e1d:	add    rsp,0x20
    65023e21:	pop    rdi
    65023e22:	ret    
    65023e23:	mov    QWORD PTR [rsp+0x40],rsi
    65023e28:	xor    esi,esi
    65023e2a:	test   cl,0x1
    65023e2d:	je     0x65023e48
    65023e2f:	test   cl,0x10
    65023e32:	mov    DWORD PTR [rbx+0x8],esi
    65023e35:	je     0x65023ed8
    65023e3b:	mov    rax,QWORD PTR [rbx+0x10]
    65023e3f:	and    ecx,0xfffffffe
    65023e42:	mov    QWORD PTR [rbx],rax
    65023e45:	mov    DWORD PTR [rbx+0x18],ecx
    65023e48:	mov    eax,DWORD PTR [rbx+0x18]
    65023e4b:	mov    DWORD PTR [rbx+0x8],esi
    65023e4e:	and    eax,0xffffffef
    65023e51:	or     eax,0x2
    65023e54:	test   eax,0x10c
    65023e59:	mov    DWORD PTR [rbx+0x18],eax
    65023e5c:	jne    0x65023e8d
    65023e5e:	call   0x6502b3c0
    65023e63:	add    rax,0x30
    65023e67:	cmp    rbx,rax
    65023e6a:	je     0x65023e7a
    65023e6c:	call   0x6502b3c0
    65023e71:	add    rax,0x60
    65023e75:	cmp    rbx,rax
    65023e78:	jne    0x65023e85
    65023e7a:	mov    ecx,edi
    65023e7c:	call   0x6502b340
    65023e81:	test   eax,eax
    65023e83:	jne    0x65023e8d
    65023e85:	mov    rcx,rbx
    65023e88:	call   0x6502b2e0
    65023e8d:	test   DWORD PTR [rbx+0x18],0x108
    65023e94:	mov    QWORD PTR [rsp+0x38],rbp
    65023e99:	je     0x65023f45
    65023e9f:	mov    ebp,DWORD PTR [rbx]
    65023ea1:	mov    rdx,QWORD PTR [rbx+0x10]
    65023ea5:	sub    ebp,DWORD PTR [rbx+0x10]
    65023ea8:	lea    rax,[rdx+0x1]
    65023eac:	mov    QWORD PTR [rbx],rax
    65023eaf:	mov    eax,DWORD PTR [rbx+0x24]
    65023eb2:	sub    eax,0x1
    65023eb5:	test   ebp,ebp
    65023eb7:	mov    DWORD PTR [rbx+0x8],eax
    65023eba:	jle    0x65023ef1
    65023ebc:	mov    r8d,ebp
    65023ebf:	mov    ecx,edi
    65023ec1:	call   0x6502b190
    65023ec6:	mov    rcx,QWORD PTR [rbx+0x10]
    65023eca:	mov    esi,eax
    65023ecc:	movzx  eax,BYTE PTR [rsp+0x30]
    65023ed1:	mov    BYTE PTR [rcx],al
    65023ed3:	jmp    0x65023f5b
    65023ed8:	mov    rsi,QWORD PTR [rsp+0x40]
    65023edd:	or     ecx,0x20
    65023ee0:	or     eax,0xffffffff
    65023ee3:	mov    DWORD PTR [rbx+0x18],ecx
    65023ee6:	mov    rbx,QWORD PTR [rsp+0x48]
    65023eeb:	add    rsp,0x20
    65023eef:	pop    rdi
    65023ef0:	ret    
    65023ef1:	cmp    edi,0xffffffff
    65023ef4:	je     0x65023f19
    65023ef6:	cmp    edi,0xfffffffe
    65023ef9:	je     0x65023f19
    65023efb:	mov    rax,rdi
    65023efe:	mov    rcx,rdi
    65023f01:	lea    rdx,[rip+0x24078]        # 0x65047f80
    65023f08:	and    eax,0x1f
    65023f0b:	sar    rcx,0x5
    65023f0f:	imul   rax,rax,0x58
    65023f13:	add    rax,QWORD PTR [rdx+rcx*8]
    65023f17:	jmp    0x65023f20
    65023f19:	lea    rax,[rip+0x1eab0]        # 0x650429d0
    65023f20:	test   BYTE PTR [rax+0x8],0x20
    65023f24:	je     0x65023f39
    65023f26:	xor    edx,edx
    65023f28:	mov    ecx,edi
    65023f2a:	lea    r8d,[rdx+0x2]
    65023f2e:	call   0x6502a830
    65023f33:	cmp    rax,0xffffffffffffffff
    65023f37:	je     0x65023f5f
    65023f39:	mov    rcx,QWORD PTR [rbx+0x10]
    65023f3d:	mov    al,BYTE PTR [rsp+0x30]
    65023f41:	mov    BYTE PTR [rcx],al
    65023f43:	jmp    0x65023f5b
    65023f45:	mov    ebp,0x1
    65023f4a:	lea    rdx,[rsp+0x30]
    65023f4f:	mov    ecx,edi
    65023f51:	mov    r8d,ebp
    65023f54:	call   0x6502b190
    65023f59:	mov    esi,eax
    65023f5b:	cmp    esi,ebp
    65023f5d:	je     0x65023f68
    65023f5f:	or     DWORD PTR [rbx+0x18],0x20
    65023f63:	or     eax,0xffffffff
    65023f66:	jmp    0x65023f6d
    65023f68:	movzx  eax,BYTE PTR [rsp+0x30]
    65023f6d:	mov    rbp,QWORD PTR [rsp+0x38]
    65023f72:	mov    rsi,QWORD PTR [rsp+0x40]
    65023f77:	mov    rbx,QWORD PTR [rsp+0x48]
    65023f7c:	add    rsp,0x20
    65023f80:	pop    rdi
    65023f81:	ret    
    65023f82:	int3   
    65023f83:	int3   
    65023f84:	int3   
    65023f85:	int3   
    65023f86:	int3   
    65023f87:	int3   
    65023f88:	int3   
    65023f89:	int3   
    65023f8a:	int3   
    65023f8b:	int3   
    65023f8c:	int3   
    65023f8d:	int3   
    65023f8e:	int3   
    65023f8f:	int3   
    65023f90:	mov    QWORD PTR [rsp+0x8],rbx
    65023f95:	mov    QWORD PTR [rsp+0x10],rbp
    65023f9a:	mov    QWORD PTR [rsp+0x18],rsi
    65023f9f:	push   rdi
    65023fa0:	sub    rsp,0x20
    65023fa4:	test   BYTE PTR [r8+0x18],0x40
    65023fa9:	mov    rbx,r9
    65023fac:	mov    rdi,r8
    65023faf:	mov    esi,edx
    65023fb1:	mov    rbp,rcx
    65023fb4:	je     0x65023fc2
    65023fb6:	cmp    QWORD PTR [r8+0x10],0x0
    65023fbb:	jne    0x65023fc2
    65023fbd:	add    DWORD PTR [r9],edx
    65023fc0:	jmp    0x65024034
    65023fc2:	test   edx,edx
    65023fc4:	jle    0x65024034
    65023fc6:	sub    esi,0x1
    65023fc9:	test   BYTE PTR [rdi+0x18],0x40
    65023fcd:	je     0x65023fd6
    65023fcf:	cmp    QWORD PTR [rdi+0x10],0x0
    65023fd4:	je     0x65023ff0
    65023fd6:	movzx  ecx,WORD PTR [rbp+0x0]
    65023fda:	mov    rdx,rdi
    65023fdd:	call   0x6502b660
    65023fe2:	cmp    ax,0xffff
    65023fe6:	jne    0x65023ff0
    65023fe8:	mov    DWORD PTR [rbx],0xffffffff
    65023fee:	jmp    0x65023ff3
    65023ff0:	add    DWORD PTR [rbx],0x1
    65023ff3:	add    rbp,0x2
    65023ff7:	cmp    DWORD PTR [rbx],0xffffffff
    65023ffa:	jne    0x65024030
    65023ffc:	call   0x650202b0
    65024001:	cmp    DWORD PTR [rax],0x2a
    65024004:	jne    0x65024034
    65024006:	test   BYTE PTR [rdi+0x18],0x40
    6502400a:	je     0x65024013
    6502400c:	cmp    QWORD PTR [rdi+0x10],0x0
    65024011:	je     0x6502402d
    65024013:	mov    rdx,rdi
    65024016:	mov    cx,0x3f
    6502401a:	call   0x6502b660
    6502401f:	cmp    ax,0xffff
    65024023:	jne    0x6502402d
    65024025:	mov    DWORD PTR [rbx],0xffffffff
    6502402b:	jmp    0x65024030
    6502402d:	add    DWORD PTR [rbx],0x1
    65024030:	test   esi,esi
    65024032:	jg     0x65023fc6
    65024034:	mov    rbx,QWORD PTR [rsp+0x30]
    65024039:	mov    rbp,QWORD PTR [rsp+0x38]
    6502403e:	mov    rsi,QWORD PTR [rsp+0x40]
    65024043:	add    rsp,0x20
    65024047:	pop    rdi
    65024048:	ret    
    65024049:	int3   
    6502404a:	int3   
    6502404b:	int3   
    6502404c:	int3   
    6502404d:	int3   
    6502404e:	int3   
    6502404f:	int3   
    65024050:	rex push rbx
    65024052:	push   rsi
    65024053:	push   rdi
    65024054:	push   r13
    65024056:	push   r14
    65024058:	sub    rsp,0x4f0
    6502405f:	mov    rax,QWORD PTR [rip+0x1e0ba]        # 0x65042120
    65024066:	xor    rax,rsp
    65024069:	mov    QWORD PTR [rsp+0x4c0],rax
    65024071:	xor    ebx,ebx
    65024073:	test   r8,r8
    65024076:	mov    rdi,r9
    65024079:	mov    QWORD PTR [rsp+0x58],r9
    6502407e:	mov    rsi,rdx
    65024081:	mov    r13,rcx
    65024084:	mov    DWORD PTR [rsp+0x74],ebx
    65024088:	mov    r14d,ebx
    6502408b:	mov    DWORD PTR [rsp+0x40],ebx
    6502408f:	mov    r11d,ebx
    65024092:	mov    DWORD PTR [rsp+0x50],ebx
    65024096:	mov    r9d,ebx
    65024099:	mov    DWORD PTR [rsp+0x48],ebx
    6502409d:	mov    r10d,ebx
    650240a0:	mov    DWORD PTR [rsp+0x4c],ebx
    650240a4:	mov    DWORD PTR [rsp+0x70],ebx
    650240a8:	mov    DWORD PTR [rsp+0x60],ebx
    650240ac:	mov    BYTE PTR [rsp+0x90],bl
    650240b3:	jne    0x65024177
    650240b9:	call   0x650208c0
    650240be:	mov    QWORD PTR [rsp+0x88],rax
    650240c6:	mov    rdx,rax
    650240c9:	mov    rcx,QWORD PTR [rax+0xc0]
    650240d0:	cmp    rcx,QWORD PTR [rip+0x1e8c9]        # 0x650429a0
    650240d7:	mov    QWORD PTR [rsp+0x78],rcx
    650240dc:	mov    rax,QWORD PTR [rax+0xb8]
    650240e3:	mov    QWORD PTR [rsp+0x80],rax
    650240eb:	je     0x65024115
    650240ed:	mov    ecx,DWORD PTR [rdx+0xc8]
    650240f3:	test   DWORD PTR [rip+0x1e72f],ecx        # 0x65042828
    650240f9:	jne    0x65024115
    650240fb:	call   0x65023d20
    65024100:	mov    rdx,QWORD PTR [rsp+0x88]
    65024108:	mov    QWORD PTR [rsp+0x78],rax
    6502410d:	mov    rax,QWORD PTR [rsp+0x80]
    65024115:	cmp    rax,QWORD PTR [rip+0x1e604]        # 0x65042720
    6502411c:	je     0x65024141
    6502411e:	mov    eax,DWORD PTR [rdx+0xc8]
    65024124:	test   DWORD PTR [rip+0x1e6fe],eax        # 0x65042828
    6502412a:	jne    0x65024141
    6502412c:	call   0x650231d0
    65024131:	mov    rdx,QWORD PTR [rsp+0x88]
    65024139:	mov    QWORD PTR [rsp+0x80],rax
    65024141:	test   BYTE PTR [rdx+0xc8],0x2
    65024148:	jne    0x6502416c
    6502414a:	or     DWORD PTR [rdx+0xc8],0x2
    65024151:	mov    rdx,QWORD PTR [rsp+0x88]
    65024159:	mov    r9d,ebx
    6502415c:	mov    BYTE PTR [rsp+0x90],0x1
    65024164:	mov    r10d,ebx
    65024167:	mov    r11d,ebx
    6502416a:	jmp    0x65024192
    6502416c:	mov    r9d,ebx
    6502416f:	mov    r10d,ebx
    65024172:	mov    r11d,ebx
    65024175:	jmp    0x65024192
    65024177:	mov    rax,QWORD PTR [r8]
    6502417a:	lea    rcx,[rsp+0x78]
    6502417f:	mov    QWORD PTR [rcx],rax
    65024182:	mov    rax,QWORD PTR [r8+0x8]
    65024186:	mov    QWORD PTR [rcx+0x8],rax
    6502418a:	mov    rdx,QWORD PTR [rsp+0x88]
    65024192:	test   r13,r13
    65024195:	jne    0x650241d6
    65024197:	call   0x650202b0
    6502419c:	xor    r9d,r9d
    6502419f:	xor    r8d,r8d
    650241a2:	xor    edx,edx
    650241a4:	xor    ecx,ecx
    650241a6:	mov    QWORD PTR [rsp+0x20],rbx
    650241ab:	mov    DWORD PTR [rax],0x16
    650241b1:	call   0x6501d850
    650241b6:	cmp    BYTE PTR [rsp+0x90],bl
    650241bd:	je     0x650241ce
    650241bf:	mov    rax,QWORD PTR [rsp+0x88]
    650241c7:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650241ce:	or     eax,0xffffffff
    650241d1:	jmp    0x65024ed6
    650241d6:	test   rsi,rsi
    650241d9:	je     0x65024197
    650241db:	mov    QWORD PTR [rsp+0x4e8],rbp
    650241e3:	mov    QWORD PTR [rsp+0x4e0],r12
    650241eb:	movzx  r12d,WORD PTR [rsi]
    650241ef:	test   r12w,r12w
    650241f3:	mov    QWORD PTR [rsp+0x4d8],r15
    650241fb:	mov    ebp,ebx
    650241fd:	mov    DWORD PTR [rsp+0x44],ebx
    65024201:	mov    r8d,ebx
    65024204:	mov    QWORD PTR [rsp+0xa0],rbx
    6502420c:	mov    r15d,ebx
    6502420f:	je     0x65024eab
    65024215:	mov    rbx,QWORD PTR [rsp+0xb0]
    6502421d:	lea    rdx,[rip+0xfffffffffffdbddc]        # 0x65000000
    65024224:	data16 data16 xchg ax,ax
    65024228:	data16 data16 xchg ax,ax
    6502422c:	data16 data16 xchg ax,ax
    65024230:	add    rsi,0x2
    65024234:	test   ebp,ebp
    65024236:	mov    QWORD PTR [rsp+0xa8],rsi
    6502423e:	js     0x65024ea3
    65024244:	lea    eax,[r12-0x20]
    65024249:	cmp    ax,0x58
    6502424d:	ja     0x6502425f
    6502424f:	movzx  eax,r12w
    65024253:	mov    cl,BYTE PTR [rax+rdx*1+0x35430]
    6502425a:	and    ecx,0xf
    6502425d:	jmp    0x65024263
    6502425f:	xor    eax,eax
    65024261:	mov    ecx,eax
    65024263:	movsxd rax,r8d
    65024266:	movsxd rcx,ecx
    65024269:	lea    rdx,[rax+rcx*8]
    6502426d:	lea    rax,[rip+0xfffffffffffdbd8c]        # 0x65000000
    65024274:	movsx  eax,BYTE PTR [rdx+rax*1+0x35450]
    6502427c:	sar    eax,0x4
    6502427f:	cmp    eax,0x7
    65024282:	mov    DWORD PTR [rsp+0x98],eax
    65024289:	ja     0x65024e46
    6502428f:	lea    rdx,[rip+0xfffffffffffdbd6a]        # 0x65000000
    65024296:	cdqe   
    65024298:	mov    ecx,DWORD PTR [rdx+rax*4+0x24ef8]
    6502429f:	add    rcx,rdx
    650242a2:	jmp    rcx
    650242a4:	xor    eax,eax
    650242a6:	or     r9d,0xffffffff
    650242aa:	mov    DWORD PTR [rsp+0x48],r9d
    650242af:	mov    DWORD PTR [rsp+0x9c],eax
    650242b6:	mov    DWORD PTR [rsp+0x70],eax
    650242ba:	mov    r11d,eax
    650242bd:	mov    DWORD PTR [rsp+0x50],eax
    650242c1:	mov    r10d,eax
    650242c4:	mov    DWORD PTR [rsp+0x4c],eax
    650242c8:	mov    r14d,eax
    650242cb:	mov    DWORD PTR [rsp+0x40],eax
    650242cf:	mov    DWORD PTR [rsp+0x60],eax
    650242d3:	jmp    0x65024e4d
    650242d8:	movzx  eax,r12w
    650242dc:	cmp    eax,0x20
    650242df:	je     0x65024332
    650242e1:	cmp    eax,0x23
    650242e4:	je     0x65024323
    650242e6:	cmp    eax,0x2b
    650242e9:	je     0x65024315
    650242eb:	cmp    eax,0x2d
    650242ee:	je     0x65024307
    650242f0:	cmp    eax,0x30
    650242f3:	jne    0x65024e4d
    650242f9:	or     r14d,0x8
    650242fd:	mov    DWORD PTR [rsp+0x40],r14d
    65024302:	jmp    0x65024e4d
    65024307:	or     r14d,0x4
    6502430b:	mov    DWORD PTR [rsp+0x40],r14d
    65024310:	jmp    0x65024e4d
    65024315:	or     r14d,0x1
    65024319:	mov    DWORD PTR [rsp+0x40],r14d
    6502431e:	jmp    0x65024e4d
    65024323:	bts    r14d,0x7
    65024328:	mov    DWORD PTR [rsp+0x40],r14d
    6502432d:	jmp    0x65024e4d
    65024332:	or     r14d,0x2
    65024336:	mov    DWORD PTR [rsp+0x40],r14d
    6502433b:	jmp    0x65024e4d
    65024340:	cmp    r12w,0x2a
    65024345:	jne    0x65024377
    65024347:	mov    r11d,DWORD PTR [rdi]
    6502434a:	add    rdi,0x8
    6502434e:	test   r11d,r11d
    65024351:	mov    QWORD PTR [rsp+0x58],rdi
    65024356:	mov    DWORD PTR [rsp+0x50],r11d
    6502435b:	jns    0x65024e4d
    65024361:	or     r14d,0x4
    65024365:	neg    r11d
    65024368:	mov    DWORD PTR [rsp+0x50],r11d
    6502436d:	mov    DWORD PTR [rsp+0x40],r14d
    65024372:	jmp    0x65024e4d
    65024377:	lea    ecx,[r11+r11*4]
    6502437b:	movzx  eax,r12w
    6502437f:	lea    r11d,[rax+rcx*2-0x30]
    65024384:	mov    DWORD PTR [rsp+0x50],r11d
    65024389:	jmp    0x65024e4d
    6502438e:	xor    eax,eax
    65024390:	mov    r9d,eax
    65024393:	mov    DWORD PTR [rsp+0x48],eax
    65024397:	jmp    0x65024e4d
    6502439c:	cmp    r12w,0x2a
    650243a1:	jne    0x650243cb
    650243a3:	mov    r9d,DWORD PTR [rdi]
    650243a6:	add    rdi,0x8
    650243aa:	test   r9d,r9d
    650243ad:	mov    QWORD PTR [rsp+0x58],rdi
    650243b2:	mov    DWORD PTR [rsp+0x48],r9d
    650243b7:	jns    0x65024e4d
    650243bd:	or     r9d,0xffffffff
    650243c1:	mov    DWORD PTR [rsp+0x48],r9d
    650243c6:	jmp    0x65024e4d
    650243cb:	lea    ecx,[r9+r9*4]
    650243cf:	movzx  eax,r12w
    650243d3:	lea    r9d,[rax+rcx*2-0x30]
    650243d8:	mov    DWORD PTR [rsp+0x48],r9d
    650243dd:	jmp    0x65024e4d
    650243e2:	movzx  eax,r12w
    650243e6:	cmp    eax,0x49
    650243e9:	je     0x65024442
    650243eb:	cmp    eax,0x68
    650243ee:	je     0x65024434
    650243f0:	cmp    eax,0x6c
    650243f3:	je     0x6502440d
    650243f5:	cmp    eax,0x77
    650243f8:	jne    0x65024e4d
    650243fe:	bts    r14d,0xb
    65024403:	mov    DWORD PTR [rsp+0x40],r14d
    65024408:	jmp    0x65024e4d
    6502440d:	cmp    WORD PTR [rsi],0x6c
    65024411:	jne    0x65024426
    65024413:	add    rsi,0x2
    65024417:	bts    r14d,0xc
    6502441c:	mov    DWORD PTR [rsp+0x40],r14d
    65024421:	jmp    0x65024e4d
    65024426:	or     r14d,0x10
    6502442a:	mov    DWORD PTR [rsp+0x40],r14d
    6502442f:	jmp    0x65024e4d
    65024434:	or     r14d,0x20
    65024438:	mov    DWORD PTR [rsp+0x40],r14d
    6502443d:	jmp    0x65024e4d
    65024442:	movzx  eax,WORD PTR [rsi]
    65024445:	bts    r14d,0xf
    6502444a:	cmp    ax,0x36
    6502444e:	mov    DWORD PTR [rsp+0x40],r14d
    65024453:	jne    0x6502446f
    65024455:	cmp    WORD PTR [rsi+0x2],0x34
    6502445a:	jne    0x6502446f
    6502445c:	add    rsi,0x4
    65024460:	bts    r14d,0xf
    65024465:	mov    DWORD PTR [rsp+0x40],r14d
    6502446a:	jmp    0x65024e4d
    6502446f:	cmp    ax,0x33
    65024473:	jne    0x6502448f
    65024475:	cmp    WORD PTR [rsi+0x2],0x32
    6502447a:	jne    0x6502448f
    6502447c:	add    rsi,0x4
    65024480:	btr    r14d,0xf
    65024485:	mov    DWORD PTR [rsp+0x40],r14d
    6502448a:	jmp    0x65024e4d
    6502448f:	cmp    ax,0x64
    65024493:	je     0x65024e4d
    65024499:	cmp    ax,0x69
    6502449d:	je     0x65024e4d
    650244a3:	cmp    ax,0x6f
    650244a7:	je     0x65024e4d
    650244ad:	cmp    ax,0x75
    650244b1:	je     0x65024e4d
    650244b7:	cmp    ax,0x78
    650244bb:	je     0x65024e4d
    650244c1:	cmp    ax,0x58
    650244c5:	je     0x65024e4d
    650244cb:	xor    eax,eax
    650244cd:	mov    DWORD PTR [rsp+0x98],eax
    650244d4:	test   BYTE PTR [r13+0x18],0x40
    650244d9:	mov    DWORD PTR [rsp+0x60],0x1
    650244e1:	je     0x650244f6
    650244e3:	cmp    QWORD PTR [r13+0x10],0x0
    650244e8:	jne    0x650244f6
    650244ea:	add    ebp,0x1
    650244ed:	mov    DWORD PTR [rsp+0x44],ebp
    650244f1:	jmp    0x65024e4d
    650244f6:	mov    rdx,r13
    650244f9:	movzx  ecx,r12w
    650244fd:	call   0x6502b660
    65024502:	cmp    ax,0xffff
    65024506:	jne    0x6502452a
    65024508:	mov    r9d,DWORD PTR [rsp+0x48]
    6502450d:	mov    r10d,DWORD PTR [rsp+0x4c]
    65024512:	mov    r11d,DWORD PTR [rsp+0x50]
    65024517:	or     ebp,0xffffffff
    6502451a:	lea    rdx,[rip+0xfffffffffffdbadf]        # 0x65000000
    65024521:	mov    DWORD PTR [rsp+0x44],ebp
    65024525:	jmp    0x65024e4d
    6502452a:	mov    r9d,DWORD PTR [rsp+0x48]
    6502452f:	mov    r10d,DWORD PTR [rsp+0x4c]
    65024534:	mov    r11d,DWORD PTR [rsp+0x50]
    65024539:	add    ebp,0x1
    6502453c:	lea    rdx,[rip+0xfffffffffffdbabd]        # 0x65000000
    65024543:	mov    DWORD PTR [rsp+0x44],ebp
    65024547:	jmp    0x65024e4d
    6502454c:	movzx  eax,r12w
    65024550:	add    eax,0xffffffbf
    65024553:	cmp    eax,0x37
    65024556:	ja     0x65024aa7
    6502455c:	cdqe   
    6502455e:	movzx  eax,BYTE PTR [rdx+rax*1+0x24f54]
    65024566:	mov    ecx,DWORD PTR [rdx+rax*4+0x24f18]
    6502456d:	add    rcx,rdx
    65024570:	jmp    rcx
    65024572:	test   r14d,0x830
    65024579:	jne    0x65024584
    6502457b:	or     r14d,0x20
    6502457f:	mov    DWORD PTR [rsp+0x40],r14d
    65024584:	movzx  eax,WORD PTR [rdi]
    65024587:	add    rdi,0x8
    6502458b:	test   r14b,0x20
    6502458f:	mov    WORD PTR [rsp+0x68],ax
    65024594:	mov    DWORD PTR [rsp+0x60],0x1
    6502459c:	mov    QWORD PTR [rsp+0x58],rdi
    650245a1:	je     0x650245ee
    650245a3:	mov    BYTE PTR [rsp+0x6c],al
    650245a7:	mov    rax,QWORD PTR [rsp+0x78]
    650245ac:	mov    BYTE PTR [rsp+0x6d],0x0
    650245b1:	movsxd r8,DWORD PTR [rax+0x10c]
    650245b8:	lea    r9,[rsp+0x78]
    650245bd:	lea    rdx,[rsp+0x6c]
    650245c2:	lea    rcx,[rsp+0xc0]
    650245ca:	call   0x6502b8f0
    650245cf:	test   eax,eax
    650245d1:	jns    0x650245f6
    650245d3:	mov    DWORD PTR [rsp+0x70],0x1
    650245db:	lea    rbx,[rsp+0xc0]
    650245e3:	mov    r15d,0x1
    650245e9:	jmp    0x65024aa7
    650245ee:	mov    WORD PTR [rsp+0xc0],ax
    650245f6:	lea    rbx,[rsp+0xc0]
    650245fe:	mov    r15d,0x1
    65024604:	jmp    0x65024aa7
    65024609:	mov    rax,QWORD PTR [rdi]
    6502460c:	add    rdi,0x8
    65024610:	test   rax,rax
    65024613:	mov    QWORD PTR [rsp+0x58],rdi
    65024618:	je     0x65024651
    6502461a:	mov    rbx,QWORD PTR [rax+0x8]
    6502461e:	test   rbx,rbx
    65024621:	je     0x65024651
    65024623:	bt     r14d,0xb
    65024628:	jae    0x65024642
    6502462a:	movsx  eax,WORD PTR [rax]
    6502462d:	mov    DWORD PTR [rsp+0x60],0x1
    65024635:	cdq    
    65024636:	sub    eax,edx
    65024638:	sar    eax,1
    6502463a:	mov    r15d,eax
    6502463d:	jmp    0x65024aa7
    65024642:	movsx  r15d,WORD PTR [rax]
    65024646:	xor    ecx,ecx
    65024648:	mov    DWORD PTR [rsp+0x60],ecx
    6502464c:	jmp    0x65024aa7
    65024651:	mov    rbx,QWORD PTR [rip+0x1e488]        # 0x65042ae0
    65024658:	or     rcx,0xffffffffffffffff
    6502465c:	xor    eax,eax
    6502465e:	mov    rdi,rbx
    65024661:	repnz scas al,BYTE PTR es:[rdi]
    65024663:	not    rcx
    65024666:	sub    rcx,0x1
    6502466a:	mov    r15,rcx
    6502466d:	jmp    0x65024aa7
    65024672:	test   r14d,0x830
    65024679:	jne    0x65024684
    6502467b:	or     r14d,0x20
    6502467f:	mov    DWORD PTR [rsp+0x40],r14d
    65024684:	mov    rbx,QWORD PTR [rdi]
    65024687:	cmp    r9d,0xffffffff
    6502468b:	mov    esi,r9d
    6502468e:	mov    eax,0x7fffffff
    65024693:	cmove  esi,eax
    65024696:	add    rdi,0x8
    6502469a:	test   r14b,0x20
    6502469e:	mov    QWORD PTR [rsp+0x58],rdi
    650246a3:	je     0x650246f2
    650246a5:	test   rbx,rbx
    650246a8:	cmove  rbx,QWORD PTR [rip+0x1e430]        # 0x65042ae0
    650246b0:	xor    eax,eax
    650246b2:	test   esi,esi
    650246b4:	mov    rdi,rbx
    650246b7:	mov    r15d,eax
    650246ba:	jle    0x65024aa7
    650246c0:	movzx  eax,BYTE PTR [rdi]
    650246c3:	test   al,al
    650246c5:	je     0x65024aa7
    650246cb:	lea    rdx,[rsp+0x78]
    650246d0:	movzx  ecx,al
    650246d3:	call   0x65028d00
    650246d8:	test   eax,eax
    650246da:	je     0x650246e0
    650246dc:	add    rdi,0x1
    650246e0:	add    r15d,0x1
    650246e4:	add    rdi,0x1
    650246e8:	cmp    r15d,esi
    650246eb:	jl     0x650246c0
    650246ed:	jmp    0x65024aa7
    650246f2:	test   rbx,rbx
    650246f5:	mov    DWORD PTR [rsp+0x60],0x1
    650246fd:	cmove  rbx,QWORD PTR [rip+0x1e3e3]        # 0x65042ae8
    65024705:	test   esi,esi
    65024707:	mov    rax,rbx
    6502470a:	je     0x65024721
    6502470c:	data16 data16 xchg ax,ax
    65024710:	sub    esi,0x1
    65024713:	cmp    WORD PTR [rax],0x0
    65024717:	je     0x65024721
    65024719:	add    rax,0x2
    6502471d:	test   esi,esi
    6502471f:	jne    0x65024710
    65024721:	sub    rax,rbx
    65024724:	sar    rax,1
    65024727:	mov    r15d,eax
    6502472a:	jmp    0x65024aa7
    6502472f:	add    rdi,0x8
    65024733:	mov    QWORD PTR [rsp+0x58],rdi
    65024738:	mov    rdi,QWORD PTR [rdi-0x8]
    6502473c:	call   0x6502b8d0
    65024741:	test   eax,eax
    65024743:	je     0x65024e64
    65024749:	test   r14b,0x20
    6502474d:	je     0x6502475f
    6502474f:	mov    WORD PTR [rdi],bp
    65024752:	mov    DWORD PTR [rsp+0x70],0x1
    6502475a:	jmp    0x65024db3
    6502475f:	mov    DWORD PTR [rdi],ebp
    65024761:	mov    DWORD PTR [rsp+0x70],0x1
    65024769:	jmp    0x65024db3
    6502476e:	mov    DWORD PTR [rsp+0x9c],0x1
    65024779:	add    r12w,0x20
    6502477e:	or     r14d,0x40
    65024782:	test   r9d,r9d
    65024785:	mov    eax,0x200
    6502478a:	mov    DWORD PTR [rsp+0x40],r14d
    6502478f:	mov    esi,eax
    65024791:	lea    rbx,[rsp+0xc0]
    65024799:	jns    0x650247a8
    6502479b:	mov    r15d,0x6
    650247a1:	mov    DWORD PTR [rsp+0x48],r15d
    650247a6:	jmp    0x65024823
    650247a8:	test   r9d,r9d
    650247ab:	jne    0x650247c1
    650247ad:	cmp    r12w,0x67
    650247b2:	jne    0x65024817
    650247b4:	mov    r15d,0x1
    650247ba:	mov    DWORD PTR [rsp+0x48],r15d
    650247bf:	jmp    0x65024823
    650247c1:	cmp    r9d,eax
    650247c4:	jle    0x650247cf
    650247c6:	mov    r9d,eax
    650247c9:	mov    DWORD PTR [rsp+0x48],eax
    650247cd:	jmp    0x650247d8
    650247cf:	cmp    r9d,0xa3
    650247d6:	jle    0x6502481e
    650247d8:	lea    edi,[r9+0x15d]
    650247df:	movsxd rcx,edi
    650247e2:	call   0x65022910
    650247e7:	test   rax,rax
    650247ea:	mov    QWORD PTR [rsp+0xa0],rax
    650247f2:	je     0x65024805
    650247f4:	mov    r15d,DWORD PTR [rsp+0x48]
    650247f9:	mov    esi,edi
    650247fb:	mov    rdi,QWORD PTR [rsp+0x58]
    65024800:	mov    rbx,rax
    65024803:	jmp    0x65024823
    65024805:	mov    rdi,QWORD PTR [rsp+0x58]
    6502480a:	mov    r15d,0xa3
    65024810:	mov    DWORD PTR [rsp+0x48],r15d
    65024815:	jmp    0x65024823
    65024817:	mov    r15d,DWORD PTR [rsp+0x48]
    6502481c:	jmp    0x65024823
    6502481e:	mov    r15d,DWORD PTR [rsp+0x48]
    65024823:	mov    rax,QWORD PTR [rdi]
    65024826:	mov    rcx,QWORD PTR [rip+0x1e6b3]        # 0x65042ee0
    6502482d:	add    rdi,0x8
    65024831:	mov    QWORD PTR [rsp+0x58],rdi
    65024836:	movsxd rsi,esi
    65024839:	mov    QWORD PTR [rsp+0xb0],rax
    65024841:	movsx  edi,r12b
    65024845:	call   0x65020570
    6502484a:	lea    rcx,[rsp+0x78]
    6502484f:	mov    QWORD PTR [rsp+0x30],rcx
    65024854:	mov    ecx,DWORD PTR [rsp+0x9c]
    6502485b:	mov    r9d,edi
    6502485e:	mov    DWORD PTR [rsp+0x28],ecx
    65024862:	lea    rcx,[rsp+0xb0]
    6502486a:	mov    r8,rsi
    6502486d:	mov    rdx,rbx
    65024870:	mov    DWORD PTR [rsp+0x20],r15d
    65024875:	call   rax
    65024877:	mov    edi,r14d
    6502487a:	and    edi,0x80
    65024880:	je     0x6502489d
    65024882:	test   r15d,r15d
    65024885:	jne    0x6502489d
    65024887:	mov    rcx,QWORD PTR [rip+0x1e66a]        # 0x65042ef8
    6502488e:	call   0x65020570
    65024893:	lea    rdx,[rsp+0x78]
    65024898:	mov    rcx,rbx
    6502489b:	call   rax
    6502489d:	cmp    r12w,0x67
    650248a2:	jne    0x650248be
    650248a4:	test   edi,edi
    650248a6:	jne    0x650248be
    650248a8:	mov    rcx,QWORD PTR [rip+0x1e641]        # 0x65042ef0
    650248af:	call   0x65020570
    650248b4:	lea    rdx,[rsp+0x78]
    650248b9:	mov    rcx,rbx
    650248bc:	call   rax
    650248be:	cmp    BYTE PTR [rbx],0x2d
    650248c1:	jne    0x650248d1
    650248c3:	bts    r14d,0x8
    650248c8:	add    rbx,0x1
    650248cc:	mov    DWORD PTR [rsp+0x40],r14d
    650248d1:	or     rcx,0xffffffffffffffff
    650248d5:	xor    eax,eax
    650248d7:	mov    rdi,rbx
    650248da:	repnz scas al,BYTE PTR es:[rdi]
    650248dc:	not    rcx
    650248df:	sub    rcx,0x1
    650248e3:	mov    r15d,ecx
    650248e6:	jmp    0x65024aa7
    650248eb:	or     r14d,0x40
    650248ef:	mov    r8d,0xa
    650248f5:	mov    DWORD PTR [rsp+0x40],r14d
    650248fa:	jmp    0x6502495e
    650248fc:	mov    r8d,0xa
    65024902:	jmp    0x6502495e
    65024904:	bts    r14d,0xf
    65024909:	mov    r9d,0x10
    6502490f:	mov    DWORD PTR [rsp+0x40],r14d
    65024914:	mov    eax,0x7
    65024919:	mov    DWORD PTR [rsp+0x74],eax
    6502491d:	jmp    0x65024928
    6502491f:	mov    eax,0x27
    65024924:	mov    DWORD PTR [rsp+0x74],eax
    65024928:	test   r14b,r14b
    6502492b:	mov    r8d,0x10
    65024931:	jns    0x6502495e
    65024933:	add    ax,0x51
    65024937:	mov    WORD PTR [rsp+0x64],0x30
    6502493e:	lea    r10d,[r8-0xe]
    65024942:	mov    WORD PTR [rsp+0x66],ax
    65024947:	jmp    0x6502495e
    65024949:	test   r14b,r14b
    6502494c:	mov    r8d,0x8
    65024952:	jns    0x6502495e
    65024954:	bts    r14d,0x9
    65024959:	mov    DWORD PTR [rsp+0x40],r14d
    6502495e:	bt     r14d,0xf
    65024963:	jae    0x65024974
    65024965:	add    rdi,0x8
    65024969:	mov    QWORD PTR [rsp+0x58],rdi
    6502496e:	mov    rdi,QWORD PTR [rdi-0x8]
    65024972:	jmp    0x650249d6
    65024974:	bt     r14d,0xc
    65024979:	jae    0x6502498a
    6502497b:	add    rdi,0x8
    6502497f:	mov    QWORD PTR [rsp+0x58],rdi
    65024984:	mov    rdi,QWORD PTR [rdi-0x8]
    65024988:	jmp    0x650249d6
    6502498a:	test   r14b,0x20
    6502498e:	je     0x650249b5
    65024990:	test   r14b,0x40
    65024994:	je     0x650249a6
    65024996:	add    rdi,0x8
    6502499a:	mov    QWORD PTR [rsp+0x58],rdi
    6502499f:	movsx  rdi,WORD PTR [rdi-0x8]
    650249a4:	jmp    0x650249d6
    650249a6:	add    rdi,0x8
    650249aa:	mov    QWORD PTR [rsp+0x58],rdi
    650249af:	movzx  edi,WORD PTR [rdi-0x8]
    650249b3:	jmp    0x650249d6
    650249b5:	test   r14b,0x40
    650249b9:	je     0x650249ca
    650249bb:	add    rdi,0x8
    650249bf:	mov    QWORD PTR [rsp+0x58],rdi
    650249c4:	movsxd rdi,DWORD PTR [rdi-0x8]
    650249c8:	jmp    0x650249d6
    650249ca:	add    rdi,0x8
    650249ce:	mov    QWORD PTR [rsp+0x58],rdi
    650249d3:	mov    edi,DWORD PTR [rdi-0x8]
    650249d6:	test   r14b,0x40
    650249da:	je     0x650249ee
    650249dc:	test   rdi,rdi
    650249df:	jns    0x650249ee
    650249e1:	neg    rdi
    650249e4:	bts    r14d,0x8
    650249e9:	mov    DWORD PTR [rsp+0x40],r14d
    650249ee:	bt     r14d,0xf
    650249f3:	jb     0x650249fe
    650249f5:	bt     r14d,0xc
    650249fa:	jb     0x650249fe
    650249fc:	mov    edi,edi
    650249fe:	test   r9d,r9d
    65024a01:	jns    0x65024a0b
    65024a03:	mov    r9d,0x1
    65024a09:	jmp    0x65024a20
    65024a0b:	mov    eax,0x200
    65024a10:	and    r14d,0xfffffff7
    65024a14:	cmp    r9d,eax
    65024a17:	mov    DWORD PTR [rsp+0x40],r14d
    65024a1c:	cmovg  r9d,eax
    65024a20:	mov    r14d,DWORD PTR [rsp+0x74]
    65024a25:	test   rdi,rdi
    65024a28:	mov    eax,0x0
    65024a2d:	cmove  r10d,eax
    65024a31:	lea    rbx,[rsp+0x2bf]
    65024a39:	mov    DWORD PTR [rsp+0x4c],r10d
    65024a3e:	xchg   ax,ax
    65024a40:	mov    ecx,r9d
    65024a43:	sub    r9d,0x1
    65024a47:	test   ecx,ecx
    65024a49:	jg     0x65024a50
    65024a4b:	test   rdi,rdi
    65024a4e:	je     0x65024a71
    65024a50:	xor    edx,edx
    65024a52:	mov    rax,rdi
    65024a55:	movsxd rcx,r8d
    65024a58:	div    rcx
    65024a5b:	mov    rdi,rax
    65024a5e:	lea    eax,[rdx+0x30]
    65024a61:	cmp    eax,0x39
    65024a64:	jle    0x65024a69
    65024a66:	add    eax,r14d
    65024a69:	mov    BYTE PTR [rbx],al
    65024a6b:	sub    rbx,0x1
    65024a6f:	jmp    0x65024a40
    65024a71:	mov    r14d,DWORD PTR [rsp+0x40]
    65024a76:	lea    rax,[rsp+0x2bf]
    65024a7e:	mov    DWORD PTR [rsp+0x48],r9d
    65024a83:	sub    eax,ebx
    65024a85:	add    rbx,0x1
    65024a89:	bt     r14d,0x9
    65024a8e:	mov    r15d,eax
    65024a91:	jae    0x65024aa7
    65024a93:	test   eax,eax
    65024a95:	je     0x65024a9c
    65024a97:	cmp    BYTE PTR [rbx],0x30
    65024a9a:	je     0x65024aa7
    65024a9c:	sub    rbx,0x1
    65024aa0:	add    r15d,0x1
    65024aa4:	mov    BYTE PTR [rbx],0x30
    65024aa7:	cmp    DWORD PTR [rsp+0x70],0x0
    65024aac:	jne    0x65024db3
    65024ab2:	test   r14b,0x40
    65024ab6:	je     0x65024b01
    65024ab8:	bt     r14d,0x8
    65024abd:	jae    0x65024ad1
    65024abf:	mov    eax,0x1
    65024ac4:	mov    WORD PTR [rsp+0x64],0x2d
    65024acb:	mov    DWORD PTR [rsp+0x4c],eax
    65024acf:	jmp    0x65024b0b
    65024ad1:	test   r14b,0x1
    65024ad5:	je     0x65024ae9
    65024ad7:	mov    eax,0x1
    65024adc:	mov    WORD PTR [rsp+0x64],0x2b
    65024ae3:	mov    DWORD PTR [rsp+0x4c],eax
    65024ae7:	jmp    0x65024b0b
    65024ae9:	test   r14b,0x2
    65024aed:	je     0x65024b07
    65024aef:	mov    eax,0x1
    65024af4:	mov    WORD PTR [rsp+0x64],0x20
    65024afb:	mov    DWORD PTR [rsp+0x4c],eax
    65024aff:	jmp    0x65024b0b
    65024b01:	mov    eax,DWORD PTR [rsp+0x4c]
    65024b05:	jmp    0x65024b0b
    65024b07:	mov    eax,DWORD PTR [rsp+0x4c]
    65024b0b:	mov    r14d,DWORD PTR [rsp+0x50]
    65024b10:	mov    r12d,DWORD PTR [rsp+0x40]
    65024b15:	sub    r14d,r15d
    65024b18:	sub    r14d,eax
    65024b1b:	test   r12b,0xc
    65024b1f:	jne    0x65024b7d
    65024b21:	test   r14d,r14d
    65024b24:	mov    edi,r14d
    65024b27:	jle    0x65024b7d
    65024b29:	data16 xchg ax,ax
    65024b2c:	data16 data16 xchg ax,ax
    65024b30:	sub    edi,0x1
    65024b33:	test   BYTE PTR [r13+0x18],0x40
    65024b38:	je     0x65024b4a
    65024b3a:	cmp    QWORD PTR [r13+0x10],0x0
    65024b3f:	jne    0x65024b4a
    65024b41:	add    ebp,0x1
    65024b44:	mov    DWORD PTR [rsp+0x44],ebp
    65024b48:	jmp    0x65024b63
    65024b4a:	mov    rdx,r13
    65024b4d:	mov    cx,0x20
    65024b51:	call   0x6502b660
    65024b56:	cmp    ax,0xffff
    65024b5a:	je     0x65024b72
    65024b5c:	add    ebp,0x1
    65024b5f:	mov    DWORD PTR [rsp+0x44],ebp
    65024b63:	cmp    ebp,0xffffffff
    65024b66:	je     0x65024b6c
    65024b68:	test   edi,edi
    65024b6a:	jg     0x65024b30
    65024b6c:	mov    eax,DWORD PTR [rsp+0x4c]
    65024b70:	jmp    0x65024b7d
    65024b72:	mov    eax,DWORD PTR [rsp+0x4c]
    65024b76:	or     ebp,0xffffffff
    65024b79:	mov    DWORD PTR [rsp+0x44],ebp
    65024b7d:	test   BYTE PTR [r13+0x18],0x40
    65024b82:	mov    esi,eax
    65024b84:	lea    rdi,[rsp+0x64]
    65024b89:	je     0x65024b9d
    65024b8b:	cmp    QWORD PTR [r13+0x10],0x0
    65024b90:	jne    0x65024b9d
    65024b92:	add    ebp,eax
    65024b94:	mov    DWORD PTR [rsp+0x44],ebp
    65024b98:	jmp    0x65024c3f
    65024b9d:	test   eax,eax
    65024b9f:	jle    0x65024c3f
    65024ba5:	xor    r12d,r12d
    65024ba8:	data16 data16 xchg ax,ax
    65024bac:	data16 data16 xchg ax,ax
    65024bb0:	sub    esi,0x1
    65024bb3:	test   BYTE PTR [r13+0x18],0x40
    65024bb8:	je     0x65024bc9
    65024bba:	cmp    QWORD PTR [r13+0x10],r12
    65024bbe:	jne    0x65024bc9
    65024bc0:	add    ebp,0x1
    65024bc3:	mov    DWORD PTR [rsp+0x44],ebp
    65024bc7:	jmp    0x65024bea
    65024bc9:	movzx  ecx,WORD PTR [rdi]
    65024bcc:	mov    rdx,r13
    65024bcf:	call   0x6502b660
    65024bd4:	cmp    ax,0xffff
    65024bd8:	jne    0x65024be3
    65024bda:	or     ebp,0xffffffff
    65024bdd:	mov    DWORD PTR [rsp+0x44],ebp
    65024be1:	jmp    0x65024bea
    65024be3:	add    ebp,0x1
    65024be6:	mov    DWORD PTR [rsp+0x44],ebp
    65024bea:	add    rdi,0x2
    65024bee:	cmp    ebp,0xffffffff
    65024bf1:	jne    0x65024c32
    65024bf3:	call   0x650202b0
    65024bf8:	cmp    DWORD PTR [rax],0x2a
    65024bfb:	jne    0x65024c3a
    65024bfd:	test   BYTE PTR [r13+0x18],0x40
    65024c02:	je     0x65024c14
    65024c04:	cmp    QWORD PTR [r13+0x10],r12
    65024c08:	jne    0x65024c14
    65024c0a:	mov    ebp,r12d
    65024c0d:	mov    DWORD PTR [rsp+0x44],r12d
    65024c12:	jmp    0x65024c32
    65024c14:	mov    rdx,r13
    65024c17:	mov    cx,0x3f
    65024c1b:	call   0x6502b660
    65024c20:	mov    ebp,r12d
    65024c23:	cmp    ax,0xffff
    65024c27:	setne  bpl
    65024c2b:	sub    ebp,0x1
    65024c2e:	mov    DWORD PTR [rsp+0x44],ebp
    65024c32:	test   esi,esi
    65024c34:	jg     0x65024bb0
    65024c3a:	mov    r12d,DWORD PTR [rsp+0x40]
    65024c3f:	test   r12b,0x8
    65024c43:	je     0x65024c98
    65024c45:	test   r12b,0x4
    65024c49:	jne    0x65024c98
    65024c4b:	test   r14d,r14d
    65024c4e:	mov    edi,r14d
    65024c51:	jle    0x65024c98
    65024c53:	sub    edi,0x1
    65024c56:	test   BYTE PTR [r13+0x18],0x40
    65024c5b:	je     0x65024c6d
    65024c5d:	cmp    QWORD PTR [r13+0x10],0x0
    65024c62:	jne    0x65024c6d
    65024c64:	add    ebp,0x1
    65024c67:	mov    DWORD PTR [rsp+0x44],ebp
    65024c6b:	jmp    0x65024c86
    65024c6d:	mov    rdx,r13
    65024c70:	mov    cx,0x30
    65024c74:	call   0x6502b660
    65024c79:	cmp    ax,0xffff
    65024c7d:	je     0x65024c91
    65024c7f:	add    ebp,0x1
    65024c82:	mov    DWORD PTR [rsp+0x44],ebp
    65024c86:	cmp    ebp,0xffffffff
    65024c89:	je     0x65024c98
    65024c8b:	test   edi,edi
    65024c8d:	jg     0x65024c53
    65024c8f:	jmp    0x65024c98
    65024c91:	or     ebp,0xffffffff
    65024c94:	mov    DWORD PTR [rsp+0x44],ebp
    65024c98:	cmp    DWORD PTR [rsp+0x60],0x0
    65024c9d:	jne    0x65024d3e
    65024ca3:	test   r15d,r15d
    65024ca6:	jle    0x65024d3e
    65024cac:	mov    rdi,rbx
    65024caf:	mov    esi,r15d
    65024cb2:	xchg   ax,ax
    65024cb4:	data16 data16 xchg ax,ax
    65024cb8:	data16 data16 xchg ax,ax
    65024cbc:	data16 data16 xchg ax,ax
    65024cc0:	mov    rax,QWORD PTR [rsp+0x78]
    65024cc5:	lea    r9,[rsp+0x78]
    65024cca:	lea    rcx,[rsp+0x68]
    65024ccf:	movsxd r8,DWORD PTR [rax+0x10c]
    65024cd6:	mov    rdx,rdi
    65024cd9:	sub    esi,0x1
    65024cdc:	call   0x6502b8f0
    65024ce1:	test   eax,eax
    65024ce3:	movsxd r12,eax
    65024ce6:	jle    0x65024d30
    65024ce8:	test   BYTE PTR [r13+0x18],0x40
    65024ced:	je     0x65024cff
    65024cef:	cmp    QWORD PTR [r13+0x10],0x0
    65024cf4:	jne    0x65024cff
    65024cf6:	add    ebp,0x1
    65024cf9:	mov    DWORD PTR [rsp+0x44],ebp
    65024cfd:	jmp    0x65024d22
    65024cff:	movzx  ecx,WORD PTR [rsp+0x68]
    65024d04:	mov    rdx,r13
    65024d07:	call   0x6502b660
    65024d0c:	cmp    ax,0xffff
    65024d10:	jne    0x65024d1b
    65024d12:	or     ebp,0xffffffff
    65024d15:	mov    DWORD PTR [rsp+0x44],ebp
    65024d19:	jmp    0x65024d22
    65024d1b:	add    ebp,0x1
    65024d1e:	mov    DWORD PTR [rsp+0x44],ebp
    65024d22:	add    rdi,r12
    65024d25:	test   esi,esi
    65024d27:	jg     0x65024cc0
    65024d29:	mov    r12d,DWORD PTR [rsp+0x40]
    65024d2e:	jmp    0x65024d55
    65024d30:	mov    r14d,DWORD PTR [rsp+0x40]
    65024d35:	or     ebp,0xffffffff
    65024d38:	mov    DWORD PTR [rsp+0x44],ebp
    65024d3c:	jmp    0x65024db3
    65024d3e:	lea    r9,[rsp+0x44]
    65024d43:	mov    r8,r13
    65024d46:	mov    edx,r15d
    65024d49:	mov    rcx,rbx
    65024d4c:	call   0x65023f90
    65024d51:	mov    ebp,DWORD PTR [rsp+0x44]
    65024d55:	test   ebp,ebp
    65024d57:	js     0x65024e13
    65024d5d:	test   r12b,0x4
    65024d61:	je     0x65024e1a
    65024d67:	test   r14d,r14d
    65024d6a:	jle    0x65024e0c
    65024d70:	sub    r14d,0x1
    65024d74:	test   BYTE PTR [r13+0x18],0x40
    65024d79:	je     0x65024d8b
    65024d7b:	cmp    QWORD PTR [r13+0x10],0x0
    65024d80:	jne    0x65024d8b
    65024d82:	add    ebp,0x1
    65024d85:	mov    DWORD PTR [rsp+0x44],ebp
    65024d89:	jmp    0x65024da4
    65024d8b:	mov    rdx,r13
    65024d8e:	mov    cx,0x20
    65024d92:	call   0x6502b660
    65024d97:	cmp    ax,0xffff
    65024d9b:	je     0x65024df7
    65024d9d:	add    ebp,0x1
    65024da0:	mov    DWORD PTR [rsp+0x44],ebp
    65024da4:	cmp    ebp,0xffffffff
    65024da7:	je     0x65024e05
    65024da9:	test   r14d,r14d
    65024dac:	jg     0x65024d70
    65024dae:	mov    r14d,DWORD PTR [rsp+0x40]
    65024db3:	mov    rax,QWORD PTR [rsp+0xa0]
    65024dbb:	test   rax,rax
    65024dbe:	je     0x65024e21
    65024dc0:	mov    rcx,rax
    65024dc3:	call   0x6501fa90
    65024dc8:	mov    r9d,DWORD PTR [rsp+0x48]
    65024dcd:	mov    rdi,QWORD PTR [rsp+0x58]
    65024dd2:	mov    rsi,QWORD PTR [rsp+0xa8]
    65024dda:	mov    r10d,DWORD PTR [rsp+0x4c]
    65024ddf:	mov    r11d,DWORD PTR [rsp+0x50]
    65024de4:	xor    ecx,ecx
    65024de6:	lea    rdx,[rip+0xfffffffffffdb213]        # 0x65000000
    65024ded:	mov    QWORD PTR [rsp+0xa0],rcx
    65024df5:	jmp    0x65024e4d
    65024df7:	mov    r14d,DWORD PTR [rsp+0x40]
    65024dfc:	or     ebp,0xffffffff
    65024dff:	mov    DWORD PTR [rsp+0x44],ebp
    65024e03:	jmp    0x65024db3
    65024e05:	mov    r14d,DWORD PTR [rsp+0x40]
    65024e0a:	jmp    0x65024db3
    65024e0c:	mov    r14d,DWORD PTR [rsp+0x40]
    65024e11:	jmp    0x65024db3
    65024e13:	mov    r14d,DWORD PTR [rsp+0x40]
    65024e18:	jmp    0x65024db3
    65024e1a:	mov    r14d,DWORD PTR [rsp+0x40]
    65024e1f:	jmp    0x65024db3
    65024e21:	mov    r9d,DWORD PTR [rsp+0x48]
    65024e26:	mov    rdi,QWORD PTR [rsp+0x58]
    65024e2b:	mov    rsi,QWORD PTR [rsp+0xa8]
    65024e33:	mov    r10d,DWORD PTR [rsp+0x4c]
    65024e38:	mov    r11d,DWORD PTR [rsp+0x50]
    65024e3d:	lea    rdx,[rip+0xfffffffffffdb1bc]        # 0x65000000
    65024e44:	jmp    0x65024e4d
    65024e46:	lea    rdx,[rip+0xfffffffffffdb1b3]        # 0x65000000
    65024e4d:	mov    r12w,WORD PTR [rsi]
    65024e51:	test   r12w,r12w
    65024e55:	je     0x65024ea3
    65024e57:	mov    r8d,DWORD PTR [rsp+0x98]
    65024e5f:	jmp    0x65024230
    65024e64:	call   0x650202b0
    65024e69:	xor    r9d,r9d
    65024e6c:	xor    r8d,r8d
    65024e6f:	mov    DWORD PTR [rax],0x16
    65024e75:	xor    eax,eax
    65024e77:	xor    edx,edx
    65024e79:	xor    ecx,ecx
    65024e7b:	mov    QWORD PTR [rsp+0x20],rax
    65024e80:	call   0x6501d850
    65024e85:	cmp    BYTE PTR [rsp+0x90],0x0
    65024e8d:	je     0x65024e9e
    65024e8f:	mov    rax,QWORD PTR [rsp+0x88]
    65024e97:	and    DWORD PTR [rax+0xc8],0xfffffffd
    65024e9e:	or     eax,0xffffffff
    65024ea1:	jmp    0x65024ebe
    65024ea3:	mov    rdx,QWORD PTR [rsp+0x88]
    65024eab:	cmp    BYTE PTR [rsp+0x90],0x0
    65024eb3:	je     0x65024ebc
    65024eb5:	and    DWORD PTR [rdx+0xc8],0xfffffffd
    65024ebc:	mov    eax,ebp
    65024ebe:	mov    r12,QWORD PTR [rsp+0x4e0]
    65024ec6:	mov    rbp,QWORD PTR [rsp+0x4e8]
    65024ece:	mov    r15,QWORD PTR [rsp+0x4d8]
    65024ed6:	mov    rcx,QWORD PTR [rsp+0x4c0]
    65024ede:	xor    rcx,rsp
    65024ee1:	call   0x6501e4e0
    65024ee6:	add    rsp,0x4f0
    65024eed:	pop    r14
    65024eef:	pop    r13
    65024ef1:	pop    rdi
    65024ef2:	pop    rsi
    65024ef3:	pop    rbx
    65024ef4:	ret    
    65024ef5:	data16 xchg ax,ax
    65024ef8:	(bad)  
    65024ef9:	add    r8b,BYTE PTR [rax]
    65024efc:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
    65024efd:	rex.X add al,BYTE PTR [rax]
    65024f00:	fadd   DWORD PTR [rdx+0x2]
    65024f03:	add    BYTE PTR [rax+0x43],al
    65024f06:	add    al,BYTE PTR [rax]
    65024f08:	mov    es,WORD PTR [rbx+0x2]
    65024f0b:	add    BYTE PTR [rbx+rax*2+0x43e20002],bl
    65024f12:	add    al,BYTE PTR [rax]
    65024f14:	rex.WR
    65024f15:	add    r8b,BYTE PTR [r8]
    65024f18:	outs   dx,BYTE PTR ds:[rsi]
    65024f19:	rex.RXB add r8b,BYTE PTR [r8]
    65024f1c:	jb     0x65024f63
    65024f1e:	add    al,BYTE PTR [rax]
    65024f20:	jb     0x65024f68
    65024f22:	add    al,BYTE PTR [rax]
    65024f24:	adc    al,0x49
    65024f26:	add    al,BYTE PTR [rax]
    65024f28:	or     DWORD PTR [rsi+0x2],eax
    65024f2b:	add    BYTE PTR [rsi+0x47],bh
    65024f2e:	add    al,BYTE PTR [rax]
    65024f30:	test   BYTE PTR [rbp+0x2],al
    65024f33:	add    bl,ch
    65024f35:	rex.W add al,BYTE PTR [rax]
    65024f38:	(bad)  
    65024f39:	rex.RXB add r8b,BYTE PTR [r8]
    65024f3c:	rex.WB
    65024f3d:	rex.WB add al,BYTE PTR [r8]
    65024f40:	add    al,0x49
    65024f42:	add    al,BYTE PTR [rax]
    65024f44:	test   BYTE PTR [rsi+0x2],al
    65024f47:	add    ah,bh
    65024f49:	rex.W add al,BYTE PTR [rax]
    65024f4c:	(bad)  
    65024f4d:	rex.WB add al,BYTE PTR [r8]
    65024f50:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
    65024f51:	rex.WX add al,BYTE PTR [rax]
    65024f54:	add    BYTE PTR [rsi],cl
    65024f56:	add    DWORD PTR [rsi],ecx
    65024f58:	add    BYTE PTR [rsi],cl
    65024f5a:	add    BYTE PTR [rsi],cl
    65024f5c:	(bad)  
    65024f5d:	(bad)  
    65024f5e:	(bad)  
    65024f5f:	(bad)  
    65024f60:	(bad)  
    65024f61:	(bad)  
    65024f62:	(bad)  
    65024f63:	(bad)  
    65024f64:	(bad)  
    65024f65:	(bad)  
    65024f66:	add    cl,BYTE PTR [rsi]
    65024f68:	(bad)  
    65024f69:	(bad)  
    65024f6a:	(bad)  
    65024f6b:	add    ecx,DWORD PTR [rsi]
    65024f6d:	add    al,0xe
    65024f6f:	(bad)  
    65024f70:	(bad)  
    65024f71:	(bad)  
    65024f72:	(bad)  
    65024f73:	(bad)  
    65024f74:	add    eax,0x507060e
    65024f79:	add    eax,0xe070e05
    65024f7e:	(bad)  
    65024f7f:	(bad)  
    65024f80:	(bad)  
    65024f81:	or     BYTE PTR [rcx],cl
    65024f83:	or     cl,BYTE PTR [rsi]
    65024f85:	(bad)  
    65024f86:	or     ecx,DWORD PTR [rsi]
    65024f88:	or     al,0xe
    65024f8a:	(bad)  
    65024f8b:	or     eax,0xcccccccc
    65024f90:	mov    QWORD PTR [rsp+0x8],rbx
    65024f95:	mov    QWORD PTR [rsp+0x10],rbp
    65024f9a:	mov    QWORD PTR [rsp+0x18],rsi
    65024f9f:	push   rdi
    65024fa0:	sub    rsp,0x20
    65024fa4:	test   BYTE PTR [r8+0x18],0x40
    65024fa9:	mov    rbx,r9
    65024fac:	mov    rdi,r8
    65024faf:	mov    esi,edx
    65024fb1:	mov    rbp,rcx
    65024fb4:	je     0x65024fc2
    65024fb6:	cmp    QWORD PTR [r8+0x10],0x0
    65024fbb:	jne    0x65024fc2
    65024fbd:	add    DWORD PTR [r9],edx
    65024fc0:	jmp    0x65025034
    65024fc2:	test   edx,edx
    65024fc4:	jle    0x65025034
    65024fc6:	sub    esi,0x1
    65024fc9:	test   BYTE PTR [rdi+0x18],0x40
    65024fcd:	je     0x65024fd6
    65024fcf:	cmp    QWORD PTR [rdi+0x10],0x0
    65024fd4:	je     0x65024ff0
    65024fd6:	movzx  ecx,WORD PTR [rbp+0x0]
    65024fda:	mov    rdx,rdi
    65024fdd:	call   0x6502b660
    65024fe2:	cmp    ax,0xffff
    65024fe6:	jne    0x65024ff0
    65024fe8:	mov    DWORD PTR [rbx],0xffffffff
    65024fee:	jmp    0x65024ff3
    65024ff0:	add    DWORD PTR [rbx],0x1
    65024ff3:	add    rbp,0x2
    65024ff7:	cmp    DWORD PTR [rbx],0xffffffff
    65024ffa:	jne    0x65025030
    65024ffc:	call   0x650202b0
    65025001:	cmp    DWORD PTR [rax],0x2a
    65025004:	jne    0x65025034
    65025006:	test   BYTE PTR [rdi+0x18],0x40
    6502500a:	je     0x65025013
    6502500c:	cmp    QWORD PTR [rdi+0x10],0x0
    65025011:	je     0x6502502d
    65025013:	mov    rdx,rdi
    65025016:	mov    cx,0x3f
    6502501a:	call   0x6502b660
    6502501f:	cmp    ax,0xffff
    65025023:	jne    0x6502502d
    65025025:	mov    DWORD PTR [rbx],0xffffffff
    6502502b:	jmp    0x65025030
    6502502d:	add    DWORD PTR [rbx],0x1
    65025030:	test   esi,esi
    65025032:	jg     0x65024fc6
    65025034:	mov    rbx,QWORD PTR [rsp+0x30]
    65025039:	mov    rbp,QWORD PTR [rsp+0x38]
    6502503e:	mov    rsi,QWORD PTR [rsp+0x40]
    65025043:	add    rsp,0x20
    65025047:	pop    rdi
    65025048:	ret    
    65025049:	int3   
    6502504a:	int3   
    6502504b:	int3   
    6502504c:	int3   
    6502504d:	int3   
    6502504e:	int3   
    6502504f:	int3   
    65025050:	rex push rbx
    65025052:	push   rsi
    65025053:	push   rdi
    65025054:	push   r13
    65025056:	push   r14
    65025058:	sub    rsp,0x4f0
    6502505f:	mov    rax,QWORD PTR [rip+0x1d0ba]        # 0x65042120
    65025066:	xor    rax,rsp
    65025069:	mov    QWORD PTR [rsp+0x4c0],rax
    65025071:	xor    ebx,ebx
    65025073:	test   r8,r8
    65025076:	mov    rdi,r9
    65025079:	mov    QWORD PTR [rsp+0x58],r9
    6502507e:	mov    rsi,rdx
    65025081:	mov    r13,rcx
    65025084:	mov    DWORD PTR [rsp+0x98],ebx
    6502508b:	mov    r14d,ebx
    6502508e:	mov    DWORD PTR [rsp+0x44],ebx
    65025092:	mov    r11d,ebx
    65025095:	mov    DWORD PTR [rsp+0x54],ebx
    65025099:	mov    r9d,ebx
    6502509c:	mov    DWORD PTR [rsp+0x4c],ebx
    650250a0:	mov    r10d,ebx
    650250a3:	mov    DWORD PTR [rsp+0x50],ebx
    650250a7:	mov    DWORD PTR [rsp+0x70],ebx
    650250ab:	mov    DWORD PTR [rsp+0x60],ebx
    650250af:	mov    BYTE PTR [rsp+0x90],bl
    650250b6:	jne    0x6502517a
    650250bc:	call   0x650208c0
    650250c1:	mov    QWORD PTR [rsp+0x88],rax
    650250c9:	mov    rdx,rax
    650250cc:	mov    rcx,QWORD PTR [rax+0xc0]
    650250d3:	cmp    rcx,QWORD PTR [rip+0x1d8c6]        # 0x650429a0
    650250da:	mov    QWORD PTR [rsp+0x78],rcx
    650250df:	mov    rax,QWORD PTR [rax+0xb8]
    650250e6:	mov    QWORD PTR [rsp+0x80],rax
    650250ee:	je     0x65025118
    650250f0:	mov    ecx,DWORD PTR [rdx+0xc8]
    650250f6:	test   DWORD PTR [rip+0x1d72c],ecx        # 0x65042828
    650250fc:	jne    0x65025118
    650250fe:	call   0x65023d20
    65025103:	mov    rdx,QWORD PTR [rsp+0x88]
    6502510b:	mov    QWORD PTR [rsp+0x78],rax
    65025110:	mov    rax,QWORD PTR [rsp+0x80]
    65025118:	cmp    rax,QWORD PTR [rip+0x1d601]        # 0x65042720
    6502511f:	je     0x65025144
    65025121:	mov    eax,DWORD PTR [rdx+0xc8]
    65025127:	test   DWORD PTR [rip+0x1d6fb],eax        # 0x65042828
    6502512d:	jne    0x65025144
    6502512f:	call   0x650231d0
    65025134:	mov    rdx,QWORD PTR [rsp+0x88]
    6502513c:	mov    QWORD PTR [rsp+0x80],rax
    65025144:	test   BYTE PTR [rdx+0xc8],0x2
    6502514b:	jne    0x6502516f
    6502514d:	or     DWORD PTR [rdx+0xc8],0x2
    65025154:	mov    rdx,QWORD PTR [rsp+0x88]
    6502515c:	mov    r9d,ebx
    6502515f:	mov    BYTE PTR [rsp+0x90],0x1
    65025167:	mov    r10d,ebx
    6502516a:	mov    r11d,ebx
    6502516d:	jmp    0x65025195
    6502516f:	mov    r9d,ebx
    65025172:	mov    r10d,ebx
    65025175:	mov    r11d,ebx
    65025178:	jmp    0x65025195
    6502517a:	mov    rax,QWORD PTR [r8]
    6502517d:	lea    rcx,[rsp+0x78]
    65025182:	mov    QWORD PTR [rcx],rax
    65025185:	mov    rax,QWORD PTR [r8+0x8]
    65025189:	mov    QWORD PTR [rcx+0x8],rax
    6502518d:	mov    rdx,QWORD PTR [rsp+0x88]
    65025195:	test   r13,r13
    65025198:	jne    0x650251d9
    6502519a:	call   0x650202b0
    6502519f:	xor    r9d,r9d
    650251a2:	xor    r8d,r8d
    650251a5:	xor    edx,edx
    650251a7:	xor    ecx,ecx
    650251a9:	mov    QWORD PTR [rsp+0x20],rbx
    650251ae:	mov    DWORD PTR [rax],0x16
    650251b4:	call   0x6501d850
    650251b9:	cmp    BYTE PTR [rsp+0x90],bl
    650251c0:	je     0x650251d1
    650251c2:	mov    rax,QWORD PTR [rsp+0x88]
    650251ca:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650251d1:	or     eax,0xffffffff
    650251d4:	jmp    0x65025f59
    650251d9:	test   rsi,rsi
    650251dc:	je     0x6502519a
    650251de:	xor    r8d,r8d
    650251e1:	mov    QWORD PTR [rsp+0x4e8],rbp
    650251e9:	mov    QWORD PTR [rsp+0x4e0],r12
    650251f1:	movzx  r12d,WORD PTR [rsi]
    650251f5:	mov    eax,r8d
    650251f8:	mov    rcx,r8
    650251fb:	test   r12w,r12w
    650251ff:	mov    QWORD PTR [rsp+0x4d8],r15
    65025207:	mov    ebp,r8d
    6502520a:	mov    DWORD PTR [rsp+0x48],r8d
    6502520f:	mov    DWORD PTR [rsp+0x40],eax
    65025213:	mov    QWORD PTR [rsp+0xa0],rcx
    6502521b:	mov    r15d,r8d
    6502521e:	je     0x65025f2e
    65025224:	mov    rbx,QWORD PTR [rsp+0xb0]
    6502522c:	lea    rdx,[rip+0xfffffffffffdadcd]        # 0x65000000
    65025233:	nop
    65025234:	data16 data16 xchg ax,ax
    65025238:	data16 data16 xchg ax,ax
    6502523c:	data16 data16 xchg ax,ax
    65025240:	add    rsi,0x2
    65025244:	test   ebp,ebp
    65025246:	mov    QWORD PTR [rsp+0xa8],rsi
    6502524e:	js     0x65025ede
    65025254:	lea    eax,[r12-0x20]
    65025259:	cmp    ax,0x58
    6502525d:	ja     0x6502526f
    6502525f:	movzx  eax,r12w
    65025263:	mov    cl,BYTE PTR [rax+rdx*1+0x36d50]
    6502526a:	and    ecx,0xf
    6502526d:	jmp    0x65025272
    6502526f:	mov    ecx,r8d
    65025272:	movsxd rax,ecx
    65025275:	lea    rcx,[rax+rax*8]
    65025279:	movsxd rax,DWORD PTR [rsp+0x40]
    6502527e:	add    rcx,rax
    65025281:	movzx  eax,BYTE PTR [rcx+rdx*1+0x36d70]
    65025289:	shr    eax,0x4
    6502528c:	cmp    eax,0x8
    6502528f:	mov    DWORD PTR [rsp+0x40],eax
    65025293:	je     0x65025ee7
    65025299:	cmp    eax,0x7
    6502529c:	ja     0x65025ed0
    650252a2:	mov    ecx,DWORD PTR [rdx+rax*4+0x25f78]
    650252a9:	add    rcx,rdx
    650252ac:	jmp    rcx
    650252ae:	or     r9d,0xffffffff
    650252b2:	mov    DWORD PTR [rsp+0x9c],r8d
    650252ba:	mov    DWORD PTR [rsp+0x70],r8d
    650252bf:	mov    r11d,r8d
    650252c2:	mov    DWORD PTR [rsp+0x54],r8d
    650252c7:	mov    r10d,r8d
    650252ca:	mov    DWORD PTR [rsp+0x4c],r9d
    650252cf:	mov    DWORD PTR [rsp+0x50],r8d
    650252d4:	mov    r14d,r8d
    650252d7:	mov    DWORD PTR [rsp+0x44],r8d
    650252dc:	mov    DWORD PTR [rsp+0x60],r8d
    650252e1:	jmp    0x65025ed0
    650252e6:	movzx  eax,r12w
    650252ea:	cmp    eax,0x20
    650252ed:	je     0x65025350
    650252ef:	cmp    eax,0x23
    650252f2:	je     0x6502533d
    650252f4:	cmp    eax,0x2b
    650252f7:	je     0x6502532b
    650252f9:	cmp    eax,0x2d
    650252fc:	je     0x65025319
    650252fe:	cmp    eax,0x30
    65025301:	jne    0x65025ecc
    65025307:	mov    eax,DWORD PTR [rsp+0x40]
    6502530b:	or     r14d,0x8
    6502530f:	mov    DWORD PTR [rsp+0x44],r14d
    65025314:	jmp    0x65025ed0
    65025319:	mov    eax,DWORD PTR [rsp+0x40]
    6502531d:	or     r14d,0x4
    65025321:	mov    DWORD PTR [rsp+0x44],r14d
    65025326:	jmp    0x65025ed0
    6502532b:	mov    eax,DWORD PTR [rsp+0x40]
    6502532f:	or     r14d,0x1
    65025333:	mov    DWORD PTR [rsp+0x44],r14d
    65025338:	jmp    0x65025ed0
    6502533d:	mov    eax,DWORD PTR [rsp+0x40]
    65025341:	bts    r14d,0x7
    65025346:	mov    DWORD PTR [rsp+0x44],r14d
    6502534b:	jmp    0x65025ed0
    65025350:	mov    eax,DWORD PTR [rsp+0x40]
    65025354:	or     r14d,0x2
    65025358:	mov    DWORD PTR [rsp+0x44],r14d
    6502535d:	jmp    0x65025ed0
    65025362:	cmp    r12w,0x2a
    65025367:	jne    0x65025399
    65025369:	mov    r11d,DWORD PTR [rdi]
    6502536c:	add    rdi,0x8
    65025370:	test   r11d,r11d
    65025373:	mov    QWORD PTR [rsp+0x58],rdi
    65025378:	mov    DWORD PTR [rsp+0x54],r11d
    6502537d:	jns    0x65025ed0
    65025383:	or     r14d,0x4
    65025387:	neg    r11d
    6502538a:	mov    DWORD PTR [rsp+0x54],r11d
    6502538f:	mov    DWORD PTR [rsp+0x44],r14d
    65025394:	jmp    0x65025ed0
    65025399:	movzx  eax,r12w
    6502539d:	lea    ecx,[r11+r11*4]
    650253a1:	lea    r11d,[rax+rcx*2-0x30]
    650253a6:	mov    eax,DWORD PTR [rsp+0x40]
    650253aa:	mov    DWORD PTR [rsp+0x54],r11d
    650253af:	jmp    0x65025ed0
    650253b4:	mov    r9d,r8d
    650253b7:	mov    DWORD PTR [rsp+0x4c],r8d
    650253bc:	jmp    0x65025ed0
    650253c1:	cmp    r12w,0x2a
    650253c6:	jne    0x650253f0
    650253c8:	mov    r9d,DWORD PTR [rdi]
    650253cb:	add    rdi,0x8
    650253cf:	test   r9d,r9d
    650253d2:	mov    QWORD PTR [rsp+0x58],rdi
    650253d7:	mov    DWORD PTR [rsp+0x4c],r9d
    650253dc:	jns    0x65025ed0
    650253e2:	or     r9d,0xffffffff
    650253e6:	mov    DWORD PTR [rsp+0x4c],r9d
    650253eb:	jmp    0x65025ed0
    650253f0:	movzx  eax,r12w
    650253f4:	lea    ecx,[r9+r9*4]
    650253f8:	lea    r9d,[rax+rcx*2-0x30]
    650253fd:	mov    eax,DWORD PTR [rsp+0x40]
    65025401:	mov    DWORD PTR [rsp+0x4c],r9d
    65025406:	jmp    0x65025ed0
    6502540b:	movzx  eax,r12w
    6502540f:	cmp    eax,0x49
    65025412:	je     0x6502547b
    65025414:	cmp    eax,0x68
    65025417:	je     0x65025469
    65025419:	cmp    eax,0x6c
    6502541c:	je     0x6502543a
    6502541e:	cmp    eax,0x77
    65025421:	jne    0x65025ea2
    65025427:	mov    eax,DWORD PTR [rsp+0x40]
    6502542b:	bts    r14d,0xb
    65025430:	mov    DWORD PTR [rsp+0x44],r14d
    65025435:	jmp    0x65025ed0
    6502543a:	cmp    WORD PTR [rsi],0x6c
    6502543e:	jne    0x65025457
    65025440:	mov    eax,DWORD PTR [rsp+0x40]
    65025444:	add    rsi,0x2
    65025448:	bts    r14d,0xc
    6502544d:	mov    DWORD PTR [rsp+0x44],r14d
    65025452:	jmp    0x65025ed0
    65025457:	mov    eax,DWORD PTR [rsp+0x40]
    6502545b:	or     r14d,0x10
    6502545f:	mov    DWORD PTR [rsp+0x44],r14d
    65025464:	jmp    0x65025ed0
    65025469:	mov    eax,DWORD PTR [rsp+0x40]
    6502546d:	or     r14d,0x20
    65025471:	mov    DWORD PTR [rsp+0x44],r14d
    65025476:	jmp    0x65025ed0
    6502547b:	movzx  eax,WORD PTR [rsi]
    6502547e:	bts    r14d,0xf
    65025483:	cmp    ax,0x36
    65025487:	mov    DWORD PTR [rsp+0x44],r14d
    6502548c:	jne    0x650254ac
    6502548e:	cmp    WORD PTR [rsi+0x2],0x34
    65025493:	jne    0x650254ac
    65025495:	mov    eax,DWORD PTR [rsp+0x40]
    65025499:	add    rsi,0x4
    6502549d:	bts    r14d,0xf
    650254a2:	mov    DWORD PTR [rsp+0x44],r14d
    650254a7:	jmp    0x65025ed0
    650254ac:	cmp    ax,0x33
    650254b0:	jne    0x650254d0
    650254b2:	cmp    WORD PTR [rsi+0x2],0x32
    650254b7:	jne    0x650254d0
    650254b9:	mov    eax,DWORD PTR [rsp+0x40]
    650254bd:	add    rsi,0x4
    650254c1:	btr    r14d,0xf
    650254c6:	mov    DWORD PTR [rsp+0x44],r14d
    650254cb:	jmp    0x65025ed0
    650254d0:	cmp    ax,0x64
    650254d4:	je     0x65025ec6
    650254da:	cmp    ax,0x69
    650254de:	je     0x65025ec0
    650254e4:	cmp    ax,0x6f
    650254e8:	je     0x65025eba
    650254ee:	cmp    ax,0x75
    650254f2:	je     0x65025eb4
    650254f8:	cmp    ax,0x78
    650254fc:	je     0x65025eae
    65025502:	cmp    ax,0x58
    65025506:	je     0x65025ea8
    6502550c:	mov    eax,r8d
    6502550f:	mov    DWORD PTR [rsp+0x40],eax
    65025513:	test   BYTE PTR [r13+0x18],0x40
    65025518:	mov    DWORD PTR [rsp+0x60],0x1
    65025520:	je     0x65025535
    65025522:	cmp    QWORD PTR [r13+0x10],0x0
    65025527:	jne    0x65025535
    65025529:	add    ebp,0x1
    6502552c:	mov    DWORD PTR [rsp+0x48],ebp
    65025530:	jmp    0x65025ed0
    65025535:	mov    rdx,r13
    65025538:	movzx  ecx,r12w
    6502553c:	call   0x6502b660
    65025541:	cmp    ax,0xffff
    65025545:	jne    0x65025570
    65025547:	mov    r9d,DWORD PTR [rsp+0x4c]
    6502554c:	mov    eax,DWORD PTR [rsp+0x40]
    65025550:	mov    r10d,DWORD PTR [rsp+0x50]
    65025555:	mov    r11d,DWORD PTR [rsp+0x54]
    6502555a:	or     ebp,0xffffffff
    6502555d:	lea    rdx,[rip+0xfffffffffffdaa9c]        # 0x65000000
    65025564:	mov    DWORD PTR [rsp+0x48],ebp
    65025568:	xor    r8d,r8d
    6502556b:	jmp    0x65025ed0
    65025570:	mov    r9d,DWORD PTR [rsp+0x4c]
    65025575:	mov    eax,DWORD PTR [rsp+0x40]
    65025579:	mov    r10d,DWORD PTR [rsp+0x50]
    6502557e:	mov    r11d,DWORD PTR [rsp+0x54]
    65025583:	add    ebp,0x1
    65025586:	lea    rdx,[rip+0xfffffffffffdaa73]        # 0x65000000
    6502558d:	mov    DWORD PTR [rsp+0x48],ebp
    65025591:	xor    r8d,r8d
    65025594:	jmp    0x65025ed0
    65025599:	movzx  eax,r12w
    6502559d:	add    eax,0xffffffbf
    650255a0:	cmp    eax,0x37
    650255a3:	ja     0x65025afb
    650255a9:	cdqe   
    650255ab:	movzx  eax,BYTE PTR [rdx+rax*1+0x25fd4]
    650255b3:	mov    ecx,DWORD PTR [rdx+rax*4+0x25f98]
    650255ba:	add    rcx,rdx
    650255bd:	jmp    rcx
    650255bf:	test   r14d,0x830
    650255c6:	jne    0x650255d1
    650255c8:	or     r14d,0x20
    650255cc:	mov    DWORD PTR [rsp+0x44],r14d
    650255d1:	movzx  eax,WORD PTR [rdi]
    650255d4:	add    rdi,0x8
    650255d8:	test   r14b,0x20
    650255dc:	mov    WORD PTR [rsp+0x68],ax
    650255e1:	mov    DWORD PTR [rsp+0x60],0x1
    650255e9:	mov    QWORD PTR [rsp+0x58],rdi
    650255ee:	je     0x6502563b
    650255f0:	mov    BYTE PTR [rsp+0x6c],al
    650255f4:	mov    rax,QWORD PTR [rsp+0x78]
    650255f9:	mov    BYTE PTR [rsp+0x6d],0x0
    650255fe:	movsxd r8,DWORD PTR [rax+0x10c]
    65025605:	lea    r9,[rsp+0x78]
    6502560a:	lea    rdx,[rsp+0x6c]
    6502560f:	lea    rcx,[rsp+0xc0]
    65025617:	call   0x6502b8f0
    6502561c:	test   eax,eax
    6502561e:	jns    0x65025643
    65025620:	mov    DWORD PTR [rsp+0x70],0x1
    65025628:	lea    rbx,[rsp+0xc0]
    65025630:	mov    r15d,0x1
    65025636:	jmp    0x65025afb
    6502563b:	mov    WORD PTR [rsp+0xc0],ax
    65025643:	lea    rbx,[rsp+0xc0]
    6502564b:	mov    r15d,0x1
    65025651:	jmp    0x65025afb
    65025656:	mov    rax,QWORD PTR [rdi]
    65025659:	add    rdi,0x8
    6502565d:	test   rax,rax
    65025660:	mov    QWORD PTR [rsp+0x58],rdi
    65025665:	je     0x6502569d
    65025667:	mov    rbx,QWORD PTR [rax+0x8]
    6502566b:	test   rbx,rbx
    6502566e:	je     0x6502569d
    65025670:	bt     r14d,0xb
    65025675:	jae    0x6502568f
    65025677:	movsx  eax,WORD PTR [rax]
    6502567a:	mov    DWORD PTR [rsp+0x60],0x1
    65025682:	cdq    
    65025683:	sub    eax,edx
    65025685:	sar    eax,1
    65025687:	mov    r15d,eax
    6502568a:	jmp    0x65025afb
    6502568f:	movsx  r15d,WORD PTR [rax]
    65025693:	mov    DWORD PTR [rsp+0x60],r8d
    65025698:	jmp    0x65025afb
    6502569d:	mov    rbx,QWORD PTR [rip+0x1d43c]        # 0x65042ae0
    650256a4:	or     rcx,0xffffffffffffffff
    650256a8:	xor    eax,eax
    650256aa:	mov    rdi,rbx
    650256ad:	repnz scas al,BYTE PTR es:[rdi]
    650256af:	not    rcx
    650256b2:	lea    r15,[rcx-0x1]
    650256b6:	jmp    0x65025afb
    650256bb:	test   r14d,0x830
    650256c2:	jne    0x650256cd
    650256c4:	or     r14d,0x20
    650256c8:	mov    DWORD PTR [rsp+0x44],r14d
    650256cd:	mov    rbx,QWORD PTR [rdi]
    650256d0:	cmp    r9d,0xffffffff
    650256d4:	mov    esi,r9d
    650256d7:	mov    eax,0x7fffffff
    650256dc:	cmove  esi,eax
    650256df:	add    rdi,0x8
    650256e3:	test   r14b,0x20
    650256e7:	mov    QWORD PTR [rsp+0x58],rdi
    650256ec:	je     0x65025742
    650256ee:	test   rbx,rbx
    650256f1:	mov    r15d,r8d
    650256f4:	cmove  rbx,QWORD PTR [rip+0x1d3e4]        # 0x65042ae0
    650256fc:	test   esi,esi
    650256fe:	mov    rdi,rbx
    65025701:	jle    0x65025afb
    65025707:	data16 xchg ax,ax
    6502570a:	data16 xchg ax,ax
    6502570d:	data16 xchg ax,ax
    65025710:	movzx  eax,BYTE PTR [rdi]
    65025713:	test   al,al
    65025715:	je     0x65025afb
    6502571b:	lea    rdx,[rsp+0x78]
    65025720:	movzx  ecx,al
    65025723:	call   0x65028d00
    65025728:	test   eax,eax
    6502572a:	je     0x65025730
    6502572c:	add    rdi,0x1
    65025730:	add    r15d,0x1
    65025734:	add    rdi,0x1
    65025738:	cmp    r15d,esi
    6502573b:	jl     0x65025710
    6502573d:	jmp    0x65025afb
    65025742:	test   rbx,rbx
    65025745:	mov    DWORD PTR [rsp+0x60],0x1
    6502574d:	cmove  rbx,QWORD PTR [rip+0x1d393]        # 0x65042ae8
    65025755:	test   esi,esi
    65025757:	mov    rax,rbx
    6502575a:	je     0x65025771
    6502575c:	data16 data16 xchg ax,ax
    65025760:	sub    esi,0x1
    65025763:	cmp    WORD PTR [rax],0x0
    65025767:	je     0x65025771
    65025769:	add    rax,0x2
    6502576d:	test   esi,esi
    6502576f:	jne    0x65025760
    65025771:	sub    rax,rbx
    65025774:	sar    rax,1
    65025777:	mov    r15d,eax
    6502577a:	jmp    0x65025afb
    6502577f:	add    rdi,0x8
    65025783:	mov    QWORD PTR [rsp+0x58],rdi
    65025788:	mov    rdi,QWORD PTR [rdi-0x8]
    6502578c:	call   0x6502b8d0
    65025791:	test   eax,eax
    65025793:	je     0x65025ee7
    65025799:	test   r14b,0x20
    6502579d:	je     0x650257af
    6502579f:	mov    WORD PTR [rdi],bp
    650257a2:	mov    DWORD PTR [rsp+0x70],0x1
    650257aa:	jmp    0x65025e03
    650257af:	mov    DWORD PTR [rdi],ebp
    650257b1:	mov    DWORD PTR [rsp+0x70],0x1
    650257b9:	jmp    0x65025e03
    650257be:	mov    DWORD PTR [rsp+0x9c],0x1
    650257c9:	add    r12w,0x20
    650257ce:	or     r14d,0x40
    650257d2:	test   r9d,r9d
    650257d5:	mov    eax,0x200
    650257da:	mov    DWORD PTR [rsp+0x44],r14d
    650257df:	mov    esi,eax
    650257e1:	lea    rbx,[rsp+0xc0]
    650257e9:	jns    0x650257f8
    650257eb:	mov    r15d,0x6
    650257f1:	mov    DWORD PTR [rsp+0x4c],r15d
    650257f6:	jmp    0x65025873
    650257f8:	test   r9d,r9d
    650257fb:	jne    0x65025811
    650257fd:	cmp    r12w,0x67
    65025802:	jne    0x65025867
    65025804:	mov    r15d,0x1
    6502580a:	mov    DWORD PTR [rsp+0x4c],r15d
    6502580f:	jmp    0x65025873
    65025811:	cmp    r9d,eax
    65025814:	jle    0x6502581f
    65025816:	mov    r9d,eax
    65025819:	mov    DWORD PTR [rsp+0x4c],eax
    6502581d:	jmp    0x65025828
    6502581f:	cmp    r9d,0xa3
    65025826:	jle    0x6502586e
    65025828:	lea    edi,[r9+0x15d]
    6502582f:	movsxd rcx,edi
    65025832:	call   0x65022910
    65025837:	test   rax,rax
    6502583a:	mov    QWORD PTR [rsp+0xa0],rax
    65025842:	je     0x65025855
    65025844:	mov    r15d,DWORD PTR [rsp+0x4c]
    65025849:	mov    esi,edi
    6502584b:	mov    rdi,QWORD PTR [rsp+0x58]
    65025850:	mov    rbx,rax
    65025853:	jmp    0x65025873
    65025855:	mov    rdi,QWORD PTR [rsp+0x58]
    6502585a:	mov    r15d,0xa3
    65025860:	mov    DWORD PTR [rsp+0x4c],r15d
    65025865:	jmp    0x65025873
    65025867:	mov    r15d,DWORD PTR [rsp+0x4c]
    6502586c:	jmp    0x65025873
    6502586e:	mov    r15d,DWORD PTR [rsp+0x4c]
    65025873:	mov    rax,QWORD PTR [rdi]
    65025876:	mov    rcx,QWORD PTR [rip+0x1d663]        # 0x65042ee0
    6502587d:	add    rdi,0x8
    65025881:	mov    QWORD PTR [rsp+0x58],rdi
    65025886:	movsxd rsi,esi
    65025889:	mov    QWORD PTR [rsp+0xb0],rax
    65025891:	movsx  edi,r12b
    65025895:	call   0x65020570
    6502589a:	lea    rcx,[rsp+0x78]
    6502589f:	mov    QWORD PTR [rsp+0x30],rcx
    650258a4:	mov    ecx,DWORD PTR [rsp+0x9c]
    650258ab:	mov    r9d,edi
    650258ae:	mov    DWORD PTR [rsp+0x28],ecx
    650258b2:	lea    rcx,[rsp+0xb0]
    650258ba:	mov    r8,rsi
    650258bd:	mov    rdx,rbx
    650258c0:	mov    DWORD PTR [rsp+0x20],r15d
    650258c5:	call   rax
    650258c7:	mov    edi,r14d
    650258ca:	and    edi,0x80
    650258d0:	je     0x650258ed
    650258d2:	test   r15d,r15d
    650258d5:	jne    0x650258ed
    650258d7:	mov    rcx,QWORD PTR [rip+0x1d61a]        # 0x65042ef8
    650258de:	call   0x65020570
    650258e3:	lea    rdx,[rsp+0x78]
    650258e8:	mov    rcx,rbx
    650258eb:	call   rax
    650258ed:	cmp    r12w,0x67
    650258f2:	jne    0x6502590e
    650258f4:	test   edi,edi
    650258f6:	jne    0x6502590e
    650258f8:	mov    rcx,QWORD PTR [rip+0x1d5f1]        # 0x65042ef0
    650258ff:	call   0x65020570
    65025904:	lea    rdx,[rsp+0x78]
    65025909:	mov    rcx,rbx
    6502590c:	call   rax
    6502590e:	cmp    BYTE PTR [rbx],0x2d
    65025911:	jne    0x65025921
    65025913:	bts    r14d,0x8
    65025918:	add    rbx,0x1
    6502591c:	mov    DWORD PTR [rsp+0x44],r14d
    65025921:	or     rcx,0xffffffffffffffff
    65025925:	xor    eax,eax
    65025927:	mov    rdi,rbx
    6502592a:	repnz scas al,BYTE PTR es:[rdi]
    6502592c:	not    rcx
    6502592f:	lea    r15d,[rcx-0x1]
    65025933:	jmp    0x65025afb
    65025938:	or     r14d,0x40
    6502593c:	mov    r8d,0xa
    65025942:	mov    DWORD PTR [rsp+0x44],r14d
    65025947:	jmp    0x650259b1
    65025949:	mov    r8d,0xa
    6502594f:	jmp    0x650259b1
    65025951:	bts    r14d,0xf
    65025956:	mov    r9d,0x10
    6502595c:	mov    DWORD PTR [rsp+0x44],r14d
    65025961:	mov    eax,0x7
    65025966:	mov    DWORD PTR [rsp+0x98],eax
    6502596d:	jmp    0x6502597b
    6502596f:	mov    eax,0x27
    65025974:	mov    DWORD PTR [rsp+0x98],eax
    6502597b:	test   r14b,r14b
    6502597e:	mov    r8d,0x10
    65025984:	jns    0x650259b1
    65025986:	add    ax,0x51
    6502598a:	mov    WORD PTR [rsp+0x64],0x30
    65025991:	lea    r10d,[r8-0xe]
    65025995:	mov    WORD PTR [rsp+0x66],ax
    6502599a:	jmp    0x650259b1
    6502599c:	test   r14b,r14b
    6502599f:	mov    r8d,0x8
    650259a5:	jns    0x650259b1
    650259a7:	bts    r14d,0x9
    650259ac:	mov    DWORD PTR [rsp+0x44],r14d
    650259b1:	bt     r14d,0xf
    650259b6:	jae    0x650259c7
    650259b8:	add    rdi,0x8
    650259bc:	mov    QWORD PTR [rsp+0x58],rdi
    650259c1:	mov    rdi,QWORD PTR [rdi-0x8]
    650259c5:	jmp    0x65025a29
    650259c7:	bt     r14d,0xc
    650259cc:	jae    0x650259dd
    650259ce:	add    rdi,0x8
    650259d2:	mov    QWORD PTR [rsp+0x58],rdi
    650259d7:	mov    rdi,QWORD PTR [rdi-0x8]
    650259db:	jmp    0x65025a29
    650259dd:	test   r14b,0x20
    650259e1:	je     0x65025a08
    650259e3:	test   r14b,0x40
    650259e7:	je     0x650259f9
    650259e9:	add    rdi,0x8
    650259ed:	mov    QWORD PTR [rsp+0x58],rdi
    650259f2:	movsx  rdi,WORD PTR [rdi-0x8]
    650259f7:	jmp    0x65025a29
    650259f9:	add    rdi,0x8
    650259fd:	mov    QWORD PTR [rsp+0x58],rdi
    65025a02:	movzx  edi,WORD PTR [rdi-0x8]
    65025a06:	jmp    0x65025a29
    65025a08:	test   r14b,0x40
    65025a0c:	je     0x65025a1d
    65025a0e:	add    rdi,0x8
    65025a12:	mov    QWORD PTR [rsp+0x58],rdi
    65025a17:	movsxd rdi,DWORD PTR [rdi-0x8]
    65025a1b:	jmp    0x65025a29
    65025a1d:	add    rdi,0x8
    65025a21:	mov    QWORD PTR [rsp+0x58],rdi
    65025a26:	mov    edi,DWORD PTR [rdi-0x8]
    65025a29:	test   r14b,0x40
    65025a2d:	je     0x65025a41
    65025a2f:	test   rdi,rdi
    65025a32:	jns    0x65025a41
    65025a34:	neg    rdi
    65025a37:	bts    r14d,0x8
    65025a3c:	mov    DWORD PTR [rsp+0x44],r14d
    65025a41:	bt     r14d,0xf
    65025a46:	jb     0x65025a51
    65025a48:	bt     r14d,0xc
    65025a4d:	jb     0x65025a51
    65025a4f:	mov    edi,edi
    65025a51:	test   r9d,r9d
    65025a54:	jns    0x65025a5e
    65025a56:	mov    r9d,0x1
    65025a5c:	jmp    0x65025a73
    65025a5e:	mov    eax,0x200
    65025a63:	and    r14d,0xfffffff7
    65025a67:	cmp    r9d,eax
    65025a6a:	mov    DWORD PTR [rsp+0x44],r14d
    65025a6f:	cmovg  r9d,eax
    65025a73:	mov    r14d,DWORD PTR [rsp+0x98]
    65025a7b:	test   rdi,rdi
    65025a7e:	mov    eax,0x0
    65025a83:	cmove  r10d,eax
    65025a87:	lea    rbx,[rsp+0x2bf]
    65025a8f:	mov    DWORD PTR [rsp+0x50],r10d
    65025a94:	mov    ecx,r9d
    65025a97:	sub    r9d,0x1
    65025a9b:	test   ecx,ecx
    65025a9d:	jg     0x65025aa4
    65025a9f:	test   rdi,rdi
    65025aa2:	je     0x65025ac5
    65025aa4:	xor    edx,edx
    65025aa6:	mov    rax,rdi
    65025aa9:	movsxd rcx,r8d
    65025aac:	div    rcx
    65025aaf:	mov    rdi,rax
    65025ab2:	lea    eax,[rdx+0x30]
    65025ab5:	cmp    eax,0x39
    65025ab8:	jle    0x65025abd
    65025aba:	add    eax,r14d
    65025abd:	mov    BYTE PTR [rbx],al
    65025abf:	sub    rbx,0x1
    65025ac3:	jmp    0x65025a94
    65025ac5:	mov    r14d,DWORD PTR [rsp+0x44]
    65025aca:	lea    rax,[rsp+0x2bf]
    65025ad2:	mov    DWORD PTR [rsp+0x4c],r9d
    65025ad7:	sub    eax,ebx
    65025ad9:	add    rbx,0x1
    65025add:	bt     r14d,0x9
    65025ae2:	mov    r15d,eax
    65025ae5:	jae    0x65025afb
    65025ae7:	test   eax,eax
    65025ae9:	je     0x65025af0
    65025aeb:	cmp    BYTE PTR [rbx],0x30
    65025aee:	je     0x65025afb
    65025af0:	sub    rbx,0x1
    65025af4:	add    r15d,0x1
    65025af8:	mov    BYTE PTR [rbx],0x30
    65025afb:	cmp    DWORD PTR [rsp+0x70],0x0
    65025b00:	jne    0x65025e03
    65025b06:	test   r14b,0x40
    65025b0a:	je     0x65025b55
    65025b0c:	bt     r14d,0x8
    65025b11:	jae    0x65025b25
    65025b13:	mov    eax,0x1
    65025b18:	mov    WORD PTR [rsp+0x64],0x2d
    65025b1f:	mov    DWORD PTR [rsp+0x50],eax
    65025b23:	jmp    0x65025b5f
    65025b25:	test   r14b,0x1
    65025b29:	je     0x65025b3d
    65025b2b:	mov    eax,0x1
    65025b30:	mov    WORD PTR [rsp+0x64],0x2b
    65025b37:	mov    DWORD PTR [rsp+0x50],eax
    65025b3b:	jmp    0x65025b5f
    65025b3d:	test   r14b,0x2
    65025b41:	je     0x65025b5b
    65025b43:	mov    eax,0x1
    65025b48:	mov    WORD PTR [rsp+0x64],0x20
    65025b4f:	mov    DWORD PTR [rsp+0x50],eax
    65025b53:	jmp    0x65025b5f
    65025b55:	mov    eax,DWORD PTR [rsp+0x50]
    65025b59:	jmp    0x65025b5f
    65025b5b:	mov    eax,DWORD PTR [rsp+0x50]
    65025b5f:	mov    r14d,DWORD PTR [rsp+0x54]
    65025b64:	mov    r12d,DWORD PTR [rsp+0x44]
    65025b69:	sub    r14d,r15d
    65025b6c:	sub    r14d,eax
    65025b6f:	test   r12b,0xc
    65025b73:	jne    0x65025bcd
    65025b75:	test   r14d,r14d
    65025b78:	mov    edi,r14d
    65025b7b:	jle    0x65025bcd
    65025b7d:	data16 xchg ax,ax
    65025b80:	sub    edi,0x1
    65025b83:	test   BYTE PTR [r13+0x18],0x40
    65025b88:	je     0x65025b9a
    65025b8a:	cmp    QWORD PTR [r13+0x10],0x0
    65025b8f:	jne    0x65025b9a
    65025b91:	add    ebp,0x1
    65025b94:	mov    DWORD PTR [rsp+0x48],ebp
    65025b98:	jmp    0x65025bb3
    65025b9a:	mov    rdx,r13
    65025b9d:	mov    cx,0x20
    65025ba1:	call   0x6502b660
    65025ba6:	cmp    ax,0xffff
    65025baa:	je     0x65025bc2
    65025bac:	add    ebp,0x1
    65025baf:	mov    DWORD PTR [rsp+0x48],ebp
    65025bb3:	cmp    ebp,0xffffffff
    65025bb6:	je     0x65025bbc
    65025bb8:	test   edi,edi
    65025bba:	jg     0x65025b80
    65025bbc:	mov    eax,DWORD PTR [rsp+0x50]
    65025bc0:	jmp    0x65025bcd
    65025bc2:	mov    eax,DWORD PTR [rsp+0x50]
    65025bc6:	or     ebp,0xffffffff
    65025bc9:	mov    DWORD PTR [rsp+0x48],ebp
    65025bcd:	test   BYTE PTR [r13+0x18],0x40
    65025bd2:	mov    esi,eax
    65025bd4:	lea    rdi,[rsp+0x64]
    65025bd9:	je     0x65025bed
    65025bdb:	cmp    QWORD PTR [r13+0x10],0x0
    65025be0:	jne    0x65025bed
    65025be2:	add    ebp,eax
    65025be4:	mov    DWORD PTR [rsp+0x48],ebp
    65025be8:	jmp    0x65025c8f
    65025bed:	test   eax,eax
    65025bef:	jle    0x65025c8f
    65025bf5:	xor    r12d,r12d
    65025bf8:	data16 data16 xchg ax,ax
    65025bfc:	data16 data16 xchg ax,ax
    65025c00:	sub    esi,0x1
    65025c03:	test   BYTE PTR [r13+0x18],0x40
    65025c08:	je     0x65025c19
    65025c0a:	cmp    QWORD PTR [r13+0x10],r12
    65025c0e:	jne    0x65025c19
    65025c10:	add    ebp,0x1
    65025c13:	mov    DWORD PTR [rsp+0x48],ebp
    65025c17:	jmp    0x65025c3a
    65025c19:	movzx  ecx,WORD PTR [rdi]
    65025c1c:	mov    rdx,r13
    65025c1f:	call   0x6502b660
    65025c24:	cmp    ax,0xffff
    65025c28:	jne    0x65025c33
    65025c2a:	or     ebp,0xffffffff
    65025c2d:	mov    DWORD PTR [rsp+0x48],ebp
    65025c31:	jmp    0x65025c3a
    65025c33:	add    ebp,0x1
    65025c36:	mov    DWORD PTR [rsp+0x48],ebp
    65025c3a:	add    rdi,0x2
    65025c3e:	cmp    ebp,0xffffffff
    65025c41:	jne    0x65025c82
    65025c43:	call   0x650202b0
    65025c48:	cmp    DWORD PTR [rax],0x2a
    65025c4b:	jne    0x65025c8a
    65025c4d:	test   BYTE PTR [r13+0x18],0x40
    65025c52:	je     0x65025c64
    65025c54:	cmp    QWORD PTR [r13+0x10],r12
    65025c58:	jne    0x65025c64
    65025c5a:	mov    ebp,r12d
    65025c5d:	mov    DWORD PTR [rsp+0x48],r12d
    65025c62:	jmp    0x65025c82
    65025c64:	mov    rdx,r13
    65025c67:	mov    cx,0x3f
    65025c6b:	call   0x6502b660
    65025c70:	mov    ebp,r12d
    65025c73:	cmp    ax,0xffff
    65025c77:	setne  bpl
    65025c7b:	sub    ebp,0x1
    65025c7e:	mov    DWORD PTR [rsp+0x48],ebp
    65025c82:	test   esi,esi
    65025c84:	jg     0x65025c00
    65025c8a:	mov    r12d,DWORD PTR [rsp+0x44]
    65025c8f:	test   r12b,0x8
    65025c93:	je     0x65025ce8
    65025c95:	test   r12b,0x4
    65025c99:	jne    0x65025ce8
    65025c9b:	test   r14d,r14d
    65025c9e:	mov    edi,r14d
    65025ca1:	jle    0x65025ce8
    65025ca3:	sub    edi,0x1
    65025ca6:	test   BYTE PTR [r13+0x18],0x40
    65025cab:	je     0x65025cbd
    65025cad:	cmp    QWORD PTR [r13+0x10],0x0
    65025cb2:	jne    0x65025cbd
    65025cb4:	add    ebp,0x1
    65025cb7:	mov    DWORD PTR [rsp+0x48],ebp
    65025cbb:	jmp    0x65025cd6
    65025cbd:	mov    rdx,r13
    65025cc0:	mov    cx,0x30
    65025cc4:	call   0x6502b660
    65025cc9:	cmp    ax,0xffff
    65025ccd:	je     0x65025ce1
    65025ccf:	add    ebp,0x1
    65025cd2:	mov    DWORD PTR [rsp+0x48],ebp
    65025cd6:	cmp    ebp,0xffffffff
    65025cd9:	je     0x65025ce8
    65025cdb:	test   edi,edi
    65025cdd:	jg     0x65025ca3
    65025cdf:	jmp    0x65025ce8
    65025ce1:	or     ebp,0xffffffff
    65025ce4:	mov    DWORD PTR [rsp+0x48],ebp
    65025ce8:	cmp    DWORD PTR [rsp+0x60],0x0
    65025ced:	jne    0x65025d8e
    65025cf3:	test   r15d,r15d
    65025cf6:	jle    0x65025d8e
    65025cfc:	mov    rdi,rbx
    65025cff:	mov    esi,r15d
    65025d02:	xchg   ax,ax
    65025d04:	data16 data16 xchg ax,ax
    65025d08:	data16 data16 xchg ax,ax
    65025d0c:	data16 data16 xchg ax,ax
    65025d10:	mov    rax,QWORD PTR [rsp+0x78]
    65025d15:	lea    r9,[rsp+0x78]
    65025d1a:	lea    rcx,[rsp+0x68]
    65025d1f:	movsxd r8,DWORD PTR [rax+0x10c]
    65025d26:	mov    rdx,rdi
    65025d29:	sub    esi,0x1
    65025d2c:	call   0x6502b8f0
    65025d31:	test   eax,eax
    65025d33:	movsxd r12,eax
    65025d36:	jle    0x65025d80
    65025d38:	test   BYTE PTR [r13+0x18],0x40
    65025d3d:	je     0x65025d4f
    65025d3f:	cmp    QWORD PTR [r13+0x10],0x0
    65025d44:	jne    0x65025d4f
    65025d46:	add    ebp,0x1
    65025d49:	mov    DWORD PTR [rsp+0x48],ebp
    65025d4d:	jmp    0x65025d72
    65025d4f:	movzx  ecx,WORD PTR [rsp+0x68]
    65025d54:	mov    rdx,r13
    65025d57:	call   0x6502b660
    65025d5c:	cmp    ax,0xffff
    65025d60:	jne    0x65025d6b
    65025d62:	or     ebp,0xffffffff
    65025d65:	mov    DWORD PTR [rsp+0x48],ebp
    65025d69:	jmp    0x65025d72
    65025d6b:	add    ebp,0x1
    65025d6e:	mov    DWORD PTR [rsp+0x48],ebp
    65025d72:	add    rdi,r12
    65025d75:	test   esi,esi
    65025d77:	jg     0x65025d10
    65025d79:	mov    r12d,DWORD PTR [rsp+0x44]
    65025d7e:	jmp    0x65025da5
    65025d80:	mov    r14d,DWORD PTR [rsp+0x44]
    65025d85:	or     ebp,0xffffffff
    65025d88:	mov    DWORD PTR [rsp+0x48],ebp
    65025d8c:	jmp    0x65025e03
    65025d8e:	lea    r9,[rsp+0x48]
    65025d93:	mov    r8,r13
    65025d96:	mov    edx,r15d
    65025d99:	mov    rcx,rbx
    65025d9c:	call   0x65024f90
    65025da1:	mov    ebp,DWORD PTR [rsp+0x48]
    65025da5:	test   ebp,ebp
    65025da7:	js     0x65025e68
    65025dad:	test   r12b,0x4
    65025db1:	je     0x65025e6f
    65025db7:	test   r14d,r14d
    65025dba:	jle    0x65025e61
    65025dc0:	sub    r14d,0x1
    65025dc4:	test   BYTE PTR [r13+0x18],0x40
    65025dc9:	je     0x65025ddb
    65025dcb:	cmp    QWORD PTR [r13+0x10],0x0
    65025dd0:	jne    0x65025ddb
    65025dd2:	add    ebp,0x1
    65025dd5:	mov    DWORD PTR [rsp+0x48],ebp
    65025dd9:	jmp    0x65025df4
    65025ddb:	mov    rdx,r13
    65025dde:	mov    cx,0x20
    65025de2:	call   0x6502b660
    65025de7:	cmp    ax,0xffff
    65025deb:	je     0x65025e4c
    65025ded:	add    ebp,0x1
    65025df0:	mov    DWORD PTR [rsp+0x48],ebp
    65025df4:	cmp    ebp,0xffffffff
    65025df7:	je     0x65025e5a
    65025df9:	test   r14d,r14d
    65025dfc:	jg     0x65025dc0
    65025dfe:	mov    r14d,DWORD PTR [rsp+0x44]
    65025e03:	mov    rcx,QWORD PTR [rsp+0xa0]
    65025e0b:	test   rcx,rcx
    65025e0e:	je     0x65025e76
    65025e10:	call   0x6501fa90
    65025e15:	mov    r9d,DWORD PTR [rsp+0x4c]
    65025e1a:	mov    rdi,QWORD PTR [rsp+0x58]
    65025e1f:	mov    rsi,QWORD PTR [rsp+0xa8]
    65025e27:	mov    eax,DWORD PTR [rsp+0x40]
    65025e2b:	mov    r10d,DWORD PTR [rsp+0x50]
    65025e30:	mov    r11d,DWORD PTR [rsp+0x54]
    65025e35:	xor    r8d,r8d
    65025e38:	lea    rdx,[rip+0xfffffffffffda1c1]        # 0x65000000
    65025e3f:	mov    QWORD PTR [rsp+0xa0],r8
    65025e47:	jmp    0x65025ed0
    65025e4c:	mov    r14d,DWORD PTR [rsp+0x44]
    65025e51:	or     ebp,0xffffffff
    65025e54:	mov    DWORD PTR [rsp+0x48],ebp
    65025e58:	jmp    0x65025e03
    65025e5a:	mov    r14d,DWORD PTR [rsp+0x44]
    65025e5f:	jmp    0x65025e03
    65025e61:	mov    r14d,DWORD PTR [rsp+0x44]
    65025e66:	jmp    0x65025e03
    65025e68:	mov    r14d,DWORD PTR [rsp+0x44]
    65025e6d:	jmp    0x65025e03
    65025e6f:	mov    r14d,DWORD PTR [rsp+0x44]
    65025e74:	jmp    0x65025e03
    65025e76:	mov    r9d,DWORD PTR [rsp+0x4c]
    65025e7b:	mov    rdi,QWORD PTR [rsp+0x58]
    65025e80:	mov    rsi,QWORD PTR [rsp+0xa8]
    65025e88:	mov    eax,DWORD PTR [rsp+0x40]
    65025e8c:	mov    r10d,DWORD PTR [rsp+0x50]
    65025e91:	mov    r11d,DWORD PTR [rsp+0x54]
    65025e96:	xor    r8d,r8d
    65025e99:	lea    rdx,[rip+0xfffffffffffda160]        # 0x65000000
    65025ea0:	jmp    0x65025ed0
    65025ea2:	mov    eax,DWORD PTR [rsp+0x40]
    65025ea6:	jmp    0x65025ed0
    65025ea8:	mov    eax,DWORD PTR [rsp+0x40]
    65025eac:	jmp    0x65025ed0
    65025eae:	mov    eax,DWORD PTR [rsp+0x40]
    65025eb2:	jmp    0x65025ed0
    65025eb4:	mov    eax,DWORD PTR [rsp+0x40]
    65025eb8:	jmp    0x65025ed0
    65025eba:	mov    eax,DWORD PTR [rsp+0x40]
    65025ebe:	jmp    0x65025ed0
    65025ec0:	mov    eax,DWORD PTR [rsp+0x40]
    65025ec4:	jmp    0x65025ed0
    65025ec6:	mov    eax,DWORD PTR [rsp+0x40]
    65025eca:	jmp    0x65025ed0
    65025ecc:	mov    eax,DWORD PTR [rsp+0x40]
    65025ed0:	mov    r12w,WORD PTR [rsi]
    65025ed4:	test   r12w,r12w
    65025ed8:	jne    0x65025240
    65025ede:	test   eax,eax
    65025ee0:	je     0x65025f26
    65025ee2:	cmp    eax,0x7
    65025ee5:	je     0x65025f26
    65025ee7:	call   0x650202b0
    65025eec:	xor    r9d,r9d
    65025eef:	xor    r8d,r8d
    65025ef2:	mov    DWORD PTR [rax],0x16
    65025ef8:	xor    eax,eax
    65025efa:	xor    edx,edx
    65025efc:	xor    ecx,ecx
    65025efe:	mov    QWORD PTR [rsp+0x20],rax
    65025f03:	call   0x6501d850
    65025f08:	cmp    BYTE PTR [rsp+0x90],0x0
    65025f10:	je     0x65025f21
    65025f12:	mov    rax,QWORD PTR [rsp+0x88]
    65025f1a:	and    DWORD PTR [rax+0xc8],0xfffffffd
    65025f21:	or     eax,0xffffffff
    65025f24:	jmp    0x65025f41
    65025f26:	mov    rdx,QWORD PTR [rsp+0x88]
    65025f2e:	cmp    BYTE PTR [rsp+0x90],0x0
    65025f36:	je     0x65025f3f
    65025f38:	and    DWORD PTR [rdx+0xc8],0xfffffffd
    65025f3f:	mov    eax,ebp
    65025f41:	mov    r12,QWORD PTR [rsp+0x4e0]
    65025f49:	mov    rbp,QWORD PTR [rsp+0x4e8]
    65025f51:	mov    r15,QWORD PTR [rsp+0x4d8]
    65025f59:	mov    rcx,QWORD PTR [rsp+0x4c0]
    65025f61:	xor    rcx,rsp
    65025f64:	call   0x6501e4e0
    65025f69:	add    rsp,0x4f0
    65025f70:	pop    r14
    65025f72:	pop    r13
    65025f74:	pop    rdi
    65025f75:	pop    rsi
    65025f76:	pop    rbx
    65025f77:	ret    
    65025f78:	adc    edx,DWORD PTR [rbp+0x2]
    65025f7b:	add    BYTE PTR [rsi-0x19fffdae],ch
    65025f81:	push   rdx
    65025f82:	add    al,BYTE PTR [rax]
    65025f84:	(bad)  
    65025f86:	add    al,BYTE PTR [rax]
    65025f88:	mov    ah,0x53
    65025f8a:	add    al,BYTE PTR [rax]
    65025f8c:	rcl    DWORD PTR [rbx+0x2],0x0
    65025f90:	or     edx,DWORD PTR [rdx+rax*1+0x0]
    65025f94:	cdq    
    65025f95:	push   rbp
    65025f96:	add    al,BYTE PTR [rax]
    65025f98:	mov    esi,0xbf000257
    65025f9d:	push   rbp
    65025f9e:	add    al,BYTE PTR [rax]
    65025fa0:	mov    ebx,0x61000256
    65025fa5:	pop    rcx
    65025fa6:	add    al,BYTE PTR [rax]
    65025fa8:	push   rsi
    65025fa9:	push   rsi
    65025faa:	add    al,BYTE PTR [rax]
    65025fac:	(bad)  
    65025fad:	push   rdi
    65025fae:	add    al,BYTE PTR [rax]
    65025fb0:	rcl    DWORD PTR [rbp+0x2],1
    65025fb3:	add    BYTE PTR [rax],bh
    65025fb5:	pop    rcx
    65025fb6:	add    al,BYTE PTR [rax]
    65025fb8:	jg     0x65026011
    65025fba:	add    al,BYTE PTR [rax]
    65025fbc:	pushf  
    65025fbd:	pop    rcx
    65025fbe:	add    al,BYTE PTR [rax]
    65025fc0:	push   rcx
    65025fc1:	pop    rcx
    65025fc2:	add    al,BYTE PTR [rax]
    65025fc4:	int    0x56
    65025fc6:	add    al,BYTE PTR [rax]
    65025fc8:	rex.WB pop r9
    65025fca:	add    al,BYTE PTR [rax]
    65025fcc:	outs   dx,DWORD PTR ds:[rsi]
    65025fcd:	pop    rcx
    65025fce:	add    al,BYTE PTR [rax]
    65025fd0:	sti    
    65025fd1:	pop    rdx
    65025fd2:	add    al,BYTE PTR [rax]
    65025fd4:	add    BYTE PTR [rsi],cl
    65025fd6:	add    DWORD PTR [rsi],ecx
    65025fd8:	add    BYTE PTR [rsi],cl
    65025fda:	add    BYTE PTR [rsi],cl
    65025fdc:	(bad)  
    65025fdd:	(bad)  
    65025fde:	(bad)  
    65025fdf:	(bad)  
    65025fe0:	(bad)  
    65025fe1:	(bad)  
    65025fe2:	(bad)  
    65025fe3:	(bad)  
    65025fe4:	(bad)  
    65025fe5:	(bad)  
    65025fe6:	add    cl,BYTE PTR [rsi]
    65025fe8:	(bad)  
    65025fe9:	(bad)  
    65025fea:	(bad)  
    65025feb:	add    ecx,DWORD PTR [rsi]
    65025fed:	add    al,0xe
    65025fef:	(bad)  
    65025ff0:	(bad)  
    65025ff1:	(bad)  
    65025ff2:	(bad)  
    65025ff3:	(bad)  
    65025ff4:	add    eax,0x507060e
    65025ff9:	add    eax,0xe070e05
    65025ffe:	(bad)  
    65025fff:	(bad)  
    65026000:	(bad)  
    65026001:	or     BYTE PTR [rcx],cl
    65026003:	or     cl,BYTE PTR [rsi]
    65026005:	(bad)  
    65026006:	or     ecx,DWORD PTR [rsi]
    65026008:	or     al,0xe
    6502600a:	(bad)  
    6502600b:	or     eax,0xcccccccc
    65026010:	rex push rbp
    65026012:	push   r12
    65026014:	push   r13
    65026016:	push   r14
    65026018:	push   r15
    6502601a:	sub    rsp,0x60
    6502601e:	lea    rbp,[rsp+0x40]
    65026023:	mov    QWORD PTR [rbp+0x50],rbx
    65026027:	mov    QWORD PTR [rbp+0x58],rsi
    6502602b:	mov    QWORD PTR [rbp+0x60],rdi
    6502602f:	mov    rax,QWORD PTR [rip+0x1c0ea]        # 0x65042120
    65026036:	xor    rax,rbp
    65026039:	mov    QWORD PTR [rbp+0x10],rax
    6502603d:	mov    r10d,DWORD PTR [rip+0x1e264]        # 0x650442a8
    65026044:	xor    r13d,r13d
    65026047:	mov    r12,r9
    6502604a:	test   r10d,r10d
    6502604d:	mov    QWORD PTR [rbp+0x8],r9
    65026051:	mov    r11d,r8d
    65026054:	mov    DWORD PTR [rbp+0x0],r8d
    65026058:	mov    r15d,edx
    6502605b:	mov    rdi,rcx
    6502605e:	jne    0x650260b0
    65026060:	lea    r9d,[r13+0x1]
    65026064:	lea    r8,[rip+0x10f39]        # 0x65036fa4
    6502606b:	mov    edx,0x100
    65026070:	xor    ecx,ecx
    65026072:	mov    DWORD PTR [rsp+0x28],r13d
    65026077:	mov    QWORD PTR [rsp+0x20],r13
    6502607c:	call   QWORD PTR [rip+0xe226]        # 0x650342a8
    65026082:	test   eax,eax
    65026084:	je     0x6502608c
    65026086:	lea    r10d,[r13+0x1]
    6502608a:	jmp    0x650260a5
    6502608c:	call   QWORD PTR [rip+0xdfe6]        # 0x65034078
    65026092:	mov    r10d,DWORD PTR [rip+0x1e20f]        # 0x650442a8
    65026099:	mov    ecx,0x2
    6502609e:	cmp    eax,0x78
    650260a1:	cmove  r10d,ecx
    650260a5:	mov    r11d,DWORD PTR [rbp+0x0]
    650260a9:	mov    DWORD PTR [rip+0x1e1f8],r10d        # 0x650442a8
    650260b0:	mov    ebx,DWORD PTR [rbp+0x70]
    650260b3:	test   ebx,ebx
    650260b5:	jle    0x650260da
    650260b7:	mov    eax,ebx
    650260b9:	mov    rcx,r12
    650260bc:	data16 data16 xchg ax,ax
    650260c0:	sub    eax,0x1
    650260c3:	or     edx,0xffffffff
    650260c6:	cmp    WORD PTR [rcx],r13w
    650260ca:	je     0x650260d6
    650260cc:	add    rcx,0x2
    650260d0:	test   eax,eax
    650260d2:	jne    0x650260c0
    650260d4:	mov    eax,edx
    650260d6:	sub    edx,eax
    650260d8:	add    ebx,edx
    650260da:	cmp    r10d,0x1
    650260de:	jne    0x6502610a
    650260e0:	mov    eax,DWORD PTR [rbp+0x80]
    650260e6:	mov    r9d,ebx
    650260e9:	mov    r8,r12
    650260ec:	mov    DWORD PTR [rsp+0x28],eax
    650260f0:	mov    rax,QWORD PTR [rbp+0x78]
    650260f4:	mov    edx,r11d
    650260f7:	mov    ecx,r15d
    650260fa:	mov    QWORD PTR [rsp+0x20],rax
    650260ff:	call   QWORD PTR [rip+0xe1a3]        # 0x650342a8
    65026105:	jmp    0x6502639f
    6502610a:	cmp    r10d,0x2
    6502610e:	je     0x65026119
    65026110:	test   r10d,r10d
    65026113:	jne    0x6502639d
    65026119:	test   r15d,r15d
    6502611c:	mov    r14d,r13d
    6502611f:	jne    0x65026128
    65026121:	mov    rax,QWORD PTR [rdi]
    65026124:	mov    r15d,DWORD PTR [rax+0x14]
    65026128:	mov    esi,DWORD PTR [rbp+0x88]
    6502612e:	test   esi,esi
    65026130:	jne    0x65026138
    65026132:	mov    rax,QWORD PTR [rdi]
    65026135:	mov    esi,DWORD PTR [rax+0x4]
    65026138:	mov    ecx,r15d
    6502613b:	call   0x6502ccf0
    65026140:	cmp    esi,eax
    65026142:	je     0x6502614a
    65026144:	cmp    eax,0xffffffff
    65026147:	cmovne esi,eax
    6502614a:	mov    QWORD PTR [rsp+0x38],r13
    6502614f:	mov    QWORD PTR [rsp+0x30],r13
    65026154:	mov    r9d,ebx
    65026157:	mov    r8,r12
    6502615a:	xor    edx,edx
    6502615c:	mov    ecx,esi
    6502615e:	mov    DWORD PTR [rsp+0x28],r13d
    65026163:	mov    QWORD PTR [rsp+0x20],r13
    65026168:	call   QWORD PTR [rip+0xded2]        # 0x65034040
    6502616e:	test   eax,eax
    65026170:	movsxd r13,eax
    65026173:	je     0x6502639d
    65026179:	jle    0x6502639d
    6502617f:	xor    edx,edx
    65026181:	mov    rax,0xffffffffffffffe0
    65026188:	mov    rcx,r13
    6502618b:	div    r13
    6502618e:	cmp    rax,0x1
    65026192:	jb     0x6502639d
    65026198:	add    rcx,0x10
    6502619c:	movabs rdx,0xffffffffffffff0
    650261a6:	cmp    rcx,0x400
    650261ad:	ja     0x650261df
    650261af:	lea    rax,[rcx+0xf]
    650261b3:	cmp    rax,rcx
    650261b6:	ja     0x650261bb
    650261b8:	mov    rax,rdx
    650261bb:	and    rax,0xfffffffffffffff0
    650261bf:	call   0x650330c0
    650261c4:	sub    rsp,rax
    650261c7:	lea    r12,[rsp+0x40]
    650261cc:	test   r12,r12
    650261cf:	je     0x6502639d
    650261d5:	mov    DWORD PTR [r12],0xcccc
    650261dd:	jmp    0x650261f2
    650261df:	call   0x6501fae0
    650261e4:	test   rax,rax
    650261e7:	mov    r12,rax
    650261ea:	je     0x650261f6
    650261ec:	mov    DWORD PTR [rax],0xdddd
    650261f2:	add    r12,0x10
    650261f6:	test   r12,r12
    650261f9:	je     0x6502639d
    650261ff:	mov    r8,QWORD PTR [rbp+0x8]
    65026203:	xor    edi,edi
    65026205:	mov    r9d,ebx
    65026208:	mov    QWORD PTR [rsp+0x38],rdi
    6502620d:	mov    QWORD PTR [rsp+0x30],rdi
    65026212:	xor    edx,edx
    65026214:	mov    ecx,esi
    65026216:	mov    DWORD PTR [rsp+0x28],r13d
    6502621b:	mov    QWORD PTR [rsp+0x20],r12
    65026220:	call   QWORD PTR [rip+0xde1a]        # 0x65034040
    65026226:	test   eax,eax
    65026228:	je     0x65026383
    6502622e:	mov    edx,DWORD PTR [rbp+0x0]
    65026231:	mov    r9d,r13d
    65026234:	mov    r8,r12
    65026237:	mov    ecx,r15d
    6502623a:	mov    DWORD PTR [rsp+0x28],edi
    6502623e:	mov    QWORD PTR [rsp+0x20],rdi
    65026243:	call   QWORD PTR [rip+0xe057]        # 0x650342a0
    65026249:	test   eax,eax
    6502624b:	movsxd rdi,eax
    6502624e:	jle    0x65026383
    65026254:	xor    edx,edx
    65026256:	mov    rax,0xffffffffffffffe0
    6502625d:	mov    rcx,rdi
    65026260:	div    rdi
    65026263:	cmp    rax,0x1
    65026267:	jb     0x65026383
    6502626d:	add    rcx,0x10
    65026271:	cmp    rcx,0x400
    65026278:	ja     0x650262af
    6502627a:	lea    rax,[rcx+0xf]
    6502627e:	cmp    rax,rcx
    65026281:	ja     0x6502628d
    65026283:	movabs rax,0xffffffffffffff0
    6502628d:	and    rax,0xfffffffffffffff0
    65026291:	call   0x650330c0
    65026296:	sub    rsp,rax
    65026299:	lea    rbx,[rsp+0x40]
    6502629e:	test   rbx,rbx
    650262a1:	je     0x65026383
    650262a7:	mov    DWORD PTR [rbx],0xcccc
    650262ad:	jmp    0x650262c2
    650262af:	call   0x6501fae0
    650262b4:	test   rax,rax
    650262b7:	mov    rbx,rax
    650262ba:	je     0x650262c6
    650262bc:	mov    DWORD PTR [rax],0xdddd
    650262c2:	add    rbx,0x10
    650262c6:	test   rbx,rbx
    650262c9:	je     0x65026383
    650262cf:	mov    r9d,r13d
    650262d2:	mov    r13d,DWORD PTR [rbp+0x0]
    650262d6:	mov    r8,r12
    650262d9:	mov    ecx,r15d
    650262dc:	mov    edx,r13d
    650262df:	mov    DWORD PTR [rsp+0x28],edi
    650262e3:	mov    QWORD PTR [rsp+0x20],rbx
    650262e8:	call   QWORD PTR [rip+0xdfb2]        # 0x650342a0
    650262ee:	test   eax,eax
    650262f0:	je     0x65026371
    650262f2:	bt     r13d,0xa
    650262f7:	jae    0x6502633c
    650262f9:	movsxd rax,DWORD PTR [rbp+0x80]
    65026300:	mov    r14d,edi
    65026303:	test   eax,eax
    65026305:	je     0x65026371
    65026307:	cmp    eax,edi
    65026309:	jg     0x6502630e
    6502630b:	lea    edi,[rax-0x1]
    6502630e:	mov    rcx,QWORD PTR [rbp+0x78]
    65026312:	movsxd r9,edi
    65026315:	mov    rdx,rax
    65026318:	mov    r8,rbx
    6502631b:	call   0x6502a590
    65026320:	test   eax,eax
    65026322:	je     0x65026371
    65026324:	xor    eax,eax
    65026326:	xor    r9d,r9d
    65026329:	xor    r8d,r8d
    6502632c:	xor    edx,edx
    6502632e:	xor    ecx,ecx
    65026330:	mov    QWORD PTR [rsp+0x20],rax
    65026335:	call   0x6501d7b0
    6502633a:	jmp    0x65026371
    6502633c:	mov    eax,DWORD PTR [rbp+0x80]
    65026342:	mov    r9d,edi
    65026345:	mov    r8,rbx
    65026348:	test   eax,eax
    6502634a:	mov    edx,0x1
    6502634f:	mov    ecx,esi
    65026351:	jne    0x6502635b
    65026353:	xor    eax,eax
    65026355:	mov    DWORD PTR [rsp+0x28],eax
    65026359:	jmp    0x65026363
    6502635b:	mov    DWORD PTR [rsp+0x28],eax
    6502635f:	mov    rax,QWORD PTR [rbp+0x78]
    65026363:	mov    QWORD PTR [rsp+0x20],rax
    65026368:	call   QWORD PTR [rip+0xdcca]        # 0x65034038
    6502636e:	mov    r14d,eax
    65026371:	cmp    DWORD PTR [rbx-0x10],0xdddd
    65026378:	lea    rcx,[rbx-0x10]
    6502637c:	jne    0x65026383
    6502637e:	call   0x6501fa90
    65026383:	cmp    DWORD PTR [r12-0x10],0xdddd
    6502638c:	lea    rcx,[r12-0x10]
    65026391:	jne    0x65026398
    65026393:	call   0x6501fa90
    65026398:	mov    eax,r14d
    6502639b:	jmp    0x6502639f
    6502639d:	xor    eax,eax
    6502639f:	mov    rcx,QWORD PTR [rbp+0x10]
    650263a3:	xor    rcx,rbp
    650263a6:	call   0x6501e4e0
    650263ab:	mov    rbx,QWORD PTR [rbp+0x50]
    650263af:	mov    rsi,QWORD PTR [rbp+0x58]
    650263b3:	mov    rdi,QWORD PTR [rbp+0x60]
    650263b7:	lea    rsp,[rbp+0x20]
    650263bb:	pop    r15
    650263bd:	pop    r14
    650263bf:	pop    r13
    650263c1:	pop    r12
    650263c3:	pop    rbp
    650263c4:	ret    
    650263c5:	int3   
    650263c6:	int3   
    650263c7:	int3   
    650263c8:	int3   
    650263c9:	int3   
    650263ca:	int3   
    650263cb:	int3   
    650263cc:	int3   
    650263cd:	int3   
    650263ce:	int3   
    650263cf:	int3   
    650263d0:	mov    rax,rsp
    650263d3:	push   rbx
    650263d4:	sub    rsp,0x70
    650263d8:	mov    QWORD PTR [rax+0x8],rbp
    650263dc:	mov    QWORD PTR [rax+0x18],rdi
    650263e0:	xor    dil,dil
    650263e3:	test   rcx,rcx
    650263e6:	mov    QWORD PTR [rax-0x10],r12
    650263ea:	mov    QWORD PTR [rax-0x18],r13
    650263ee:	mov    BYTE PTR [rax-0x20],dil
    650263f2:	mov    rbp,r9
    650263f5:	mov    r12d,r8d
    650263f8:	mov    r13d,edx
    650263fb:	jne    0x6502648e
    65026401:	mov    QWORD PTR [rax+0x10],rsi
    65026405:	call   0x650208c0
    6502640a:	mov    rcx,QWORD PTR [rax+0xc0]
    65026411:	mov    rsi,QWORD PTR [rax+0xb8]
    65026418:	mov    rbx,rax
    6502641b:	cmp    rcx,QWORD PTR [rip+0x1c57e]        # 0x650429a0
    65026422:	mov    QWORD PTR [rsp+0x50],rax
    65026427:	mov    QWORD PTR [rsp+0x40],rcx
    6502642c:	mov    QWORD PTR [rsp+0x48],rsi
    65026431:	je     0x6502644b
    65026433:	mov    ecx,DWORD PTR [rax+0xc8]
    65026439:	test   DWORD PTR [rip+0x1c3e9],ecx        # 0x65042828
    6502643f:	jne    0x6502644b
    65026441:	call   0x65023d20
    65026446:	mov    QWORD PTR [rsp+0x40],rax
    6502644b:	cmp    rsi,QWORD PTR [rip+0x1c2ce]        # 0x65042720
    65026452:	mov    rsi,QWORD PTR [rsp+0x88]
    6502645a:	je     0x65026474
    6502645c:	mov    eax,DWORD PTR [rbx+0xc8]
    65026462:	test   DWORD PTR [rip+0x1c3c0],eax        # 0x65042828
    65026468:	jne    0x65026474
    6502646a:	call   0x650231d0
    6502646f:	mov    QWORD PTR [rsp+0x48],rax
    65026474:	test   BYTE PTR [rbx+0xc8],0x2
    6502647b:	jne    0x650264ab
    6502647d:	or     DWORD PTR [rbx+0xc8],0x2
    65026484:	mov    dil,0x1
    65026487:	mov    BYTE PTR [rsp+0x58],dil
    6502648c:	jmp    0x650264ab
    6502648e:	mov    rax,QWORD PTR [rcx]
    65026491:	lea    rdx,[rsp+0x40]
    65026496:	mov    QWORD PTR [rdx],rax
    65026499:	mov    rax,QWORD PTR [rcx+0x8]
    6502649d:	mov    QWORD PTR [rdx+0x8],rax
    650264a1:	movzx  edi,BYTE PTR [rsp+0x58]
    650264a6:	mov    rbx,QWORD PTR [rsp+0x50]
    650264ab:	mov    eax,DWORD PTR [rsp+0xb8]
    650264b2:	lea    rcx,[rsp+0x40]
    650264b7:	mov    r9,rbp
    650264ba:	mov    DWORD PTR [rsp+0x38],eax
    650264be:	mov    eax,DWORD PTR [rsp+0xb0]
    650264c5:	mov    r8d,r12d
    650264c8:	mov    DWORD PTR [rsp+0x30],eax
    650264cc:	mov    rax,QWORD PTR [rsp+0xa8]
    650264d4:	mov    edx,r13d
    650264d7:	mov    QWORD PTR [rsp+0x28],rax
    650264dc:	mov    eax,DWORD PTR [rsp+0xa0]
    650264e3:	mov    DWORD PTR [rsp+0x20],eax
    650264e7:	call   0x65026010
    650264ec:	mov    r13,QWORD PTR [rsp+0x60]
    650264f1:	mov    r12,QWORD PTR [rsp+0x68]
    650264f6:	mov    rbp,QWORD PTR [rsp+0x80]
    650264fe:	test   dil,dil
    65026501:	mov    rdi,QWORD PTR [rsp+0x90]
    65026509:	je     0x65026512
    6502650b:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    65026512:	add    rsp,0x70
    65026516:	pop    rbx
    65026517:	ret    
    65026518:	int3   
    65026519:	int3   
    6502651a:	int3   
    6502651b:	int3   
    6502651c:	int3   
    6502651d:	int3   
    6502651e:	int3   
    6502651f:	int3   
    65026520:	xor    eax,eax
    65026522:	test   rdx,rdx
    65026525:	je     0x6502653a
    65026527:	cmp    WORD PTR [rcx],0x0
    6502652b:	je     0x6502653a
    6502652d:	add    rax,0x1
    65026531:	add    rcx,0x2
    65026535:	cmp    rax,rdx
    65026538:	jb     0x65026527
    6502653a:	ret    0x0
    6502653d:	int3   
    6502653e:	int3   
    6502653f:	int3   
    65026540:	mov    DWORD PTR [rsp+0x8],ecx
    65026544:	sub    rsp,0x28
    65026548:	xor    r8d,r8d
    6502654b:	mov    edx,0x1000
    65026550:	xor    ecx,ecx
    65026552:	call   QWORD PTR [rip+0xdd60]        # 0x650342b8
    65026558:	test   rax,rax
    6502655b:	mov    QWORD PTR [rip+0x1dd4e],rax        # 0x650442b0
    65026562:	jne    0x65026569
    65026564:	add    rsp,0x28
    65026568:	ret    
    65026569:	lea    r8,[rsp+0x30]
    6502656e:	mov    r9d,0x4
    65026574:	xor    edx,edx
    65026576:	mov    rcx,rax
    65026579:	mov    DWORD PTR [rsp+0x30],0x2
    65026581:	call   QWORD PTR [rip+0xdd29]        # 0x650342b0
    65026587:	mov    eax,0x1
    6502658c:	add    rsp,0x28
    65026590:	ret    
    65026591:	int3   
    65026592:	int3   
    65026593:	int3   
    65026594:	int3   
    65026595:	int3   
    65026596:	int3   
    65026597:	int3   
    65026598:	int3   
    65026599:	int3   
    6502659a:	int3   
    6502659b:	int3   
    6502659c:	int3   
    6502659d:	int3   
    6502659e:	int3   
    6502659f:	int3   
    650265a0:	sub    rsp,0x28
    650265a4:	mov    rcx,QWORD PTR [rip+0x1dd05]        # 0x650442b0
    650265ab:	call   QWORD PTR [rip+0xdc0f]        # 0x650341c0
    650265b1:	mov    QWORD PTR [rip+0x1dcf4],0x0        # 0x650442b0
    650265bc:	add    rsp,0x28
    650265c0:	ret    
    650265c1:	int3   
    650265c2:	int3   
    650265c3:	int3   
    650265c4:	int3   
    650265c5:	int3   
    650265c6:	int3   
    650265c7:	int3   
    650265c8:	int3   
    650265c9:	int3   
    650265ca:	int3   
    650265cb:	int3   
    650265cc:	int3   
    650265cd:	int3   
    650265ce:	int3   
    650265cf:	int3   
    650265d0:	mov    QWORD PTR [rsp+0x8],rbx
    650265d5:	mov    QWORD PTR [rsp+0x10],rsi
    650265da:	mov    QWORD PTR [rsp+0x18],rdi
    650265df:	mov    QWORD PTR [rsp+0x20],r12
    650265e4:	push   r13
    650265e6:	push   r14
    650265e8:	push   r15
    650265ea:	sub    rsp,0x90
    650265f1:	lea    rcx,[rsp+0x20]
    650265f6:	call   QWORD PTR [rip+0xdcdc]        # 0x650342d8
    650265fc:	nop
    650265fd:	mov    edx,0x58
    65026602:	lea    ecx,[rdx-0x38]
    65026605:	call   0x65022980
    6502660a:	mov    r11,rax
    6502660d:	test   rax,rax
    65026610:	jne    0x6502661a
    65026612:	or     eax,0xffffffff
    65026615:	jmp    0x650268cc
    6502661a:	mov    QWORD PTR [rip+0x2195f],rax        # 0x65047f80
    65026621:	mov    ecx,0x20
    65026626:	mov    DWORD PTR [rip+0x21938],ecx        # 0x65047f64
    6502662c:	add    rax,0xb00
    65026632:	cmp    r11,rax
    65026635:	jae    0x65026688
    65026637:	xor    edi,edi
    65026639:	data16 xchg ax,ax
    6502663c:	data16 data16 xchg ax,ax
    65026640:	mov    BYTE PTR [r11+0x8],dil
    65026644:	mov    QWORD PTR [r11],0xffffffffffffffff
    6502664b:	mov    BYTE PTR [r11+0x9],0xa
    65026650:	mov    DWORD PTR [r11+0xc],edi
    65026654:	mov    BYTE PTR [r11+0x38],dil
    65026658:	mov    BYTE PTR [r11+0x39],0xa
    6502665d:	mov    BYTE PTR [r11+0x3a],0xa
    65026662:	mov    DWORD PTR [r11+0x50],edi
    65026666:	mov    BYTE PTR [r11+0x4c],dil
    6502666a:	add    r11,0x58
    6502666e:	mov    rax,QWORD PTR [rip+0x2190b]        # 0x65047f80
    65026675:	add    rax,0xb00
    6502667b:	cmp    r11,rax
    6502667e:	jb     0x65026640
    65026680:	mov    ecx,DWORD PTR [rip+0x218de]        # 0x65047f64
    65026686:	jmp    0x6502668a
    65026688:	xor    edi,edi
    6502668a:	cmp    WORD PTR [rsp+0x62],0x0
    65026690:	je     0x650267fc
    65026696:	mov    r14,QWORD PTR [rsp+0x68]
    6502669b:	test   r14,r14
    6502669e:	je     0x650267fc
    650266a4:	movsxd rax,DWORD PTR [r14]
    650266a7:	add    r14,0x4
    650266ab:	lea    r13,[r14+rax*1]
    650266af:	mov    r15d,0x800
    650266b5:	cmp    eax,r15d
    650266b8:	cmovl  r15d,eax
    650266bc:	mov    ebx,0x1
    650266c1:	cmp    ecx,r15d
    650266c4:	jge    0x6502676e
    650266ca:	lea    r12,[rip+0x218af]        # 0x65047f80
    650266d1:	mov    edx,0x58
    650266d6:	lea    ecx,[rdx-0x38]
    650266d9:	call   0x65022980
    650266de:	mov    r11,rax
    650266e1:	test   rax,rax
    650266e4:	je     0x65026765
    650266e6:	mov    QWORD PTR [r12+rbx*8],rax
    650266ea:	mov    eax,DWORD PTR [rip+0x21874]        # 0x65047f64
    650266f0:	add    eax,0x20
    650266f3:	mov    DWORD PTR [rip+0x2186b],eax        # 0x65047f64
    650266f9:	lea    rcx,[r11+0xb00]
    65026700:	cmp    r11,rcx
    65026703:	jae    0x65026756
    65026705:	data16 data16 xchg ax,ax
    65026709:	data16 xchg ax,ax
    6502670c:	data16 data16 xchg ax,ax
    65026710:	mov    BYTE PTR [r11+0x8],0x0
    65026715:	mov    QWORD PTR [r11],0xffffffffffffffff
    6502671c:	mov    BYTE PTR [r11+0x9],0xa
    65026721:	mov    DWORD PTR [r11+0xc],edi
    65026725:	and    BYTE PTR [r11+0x38],0x80
    6502672a:	mov    BYTE PTR [r11+0x39],0xa
    6502672f:	mov    BYTE PTR [r11+0x3a],0xa
    65026734:	mov    DWORD PTR [r11+0x50],edi
    65026738:	mov    BYTE PTR [r11+0x4c],0x0
    6502673d:	add    r11,0x58
    65026741:	mov    rax,QWORD PTR [r12+rbx*8]
    65026745:	add    rax,0xb00
    6502674b:	cmp    r11,rax
    6502674e:	jb     0x65026710
    65026750:	mov    eax,DWORD PTR [rip+0x2180e]        # 0x65047f64
    65026756:	add    rbx,0x1
    6502675a:	cmp    eax,r15d
    6502675d:	jl     0x650266d1
    65026763:	jmp    0x65026775
    65026765:	mov    r15d,DWORD PTR [rip+0x217f8]        # 0x65047f64
    6502676c:	jmp    0x65026775
    6502676e:	lea    r12,[rip+0x2180b]        # 0x65047f80
    65026775:	mov    ebx,edi
    65026777:	test   r15d,r15d
    6502677a:	jle    0x650267fc
    65026780:	mov    rcx,QWORD PTR [r13+0x0]
    65026784:	cmp    rcx,0xffffffffffffffff
    65026788:	je     0x650267ec
    6502678a:	cmp    rcx,0xfffffffffffffffe
    6502678e:	je     0x650267ec
    65026790:	movzx  eax,BYTE PTR [r14]
    65026794:	test   al,0x1
    65026796:	je     0x650267ec
    65026798:	test   al,0x8
    6502679a:	jne    0x650267a6
    6502679c:	call   QWORD PTR [rip+0xdb2e]        # 0x650342d0
    650267a2:	test   eax,eax
    650267a4:	je     0x650267ec
    650267a6:	movsxd rax,ebx
    650267a9:	mov    rcx,rax
    650267ac:	sar    rcx,0x5
    650267b0:	mov    sil,al
    650267b3:	and    esi,0x1f
    650267b6:	imul   rsi,rsi,0x58
    650267ba:	add    rsi,QWORD PTR [r12+rcx*8]
    650267be:	mov    rax,QWORD PTR [r13+0x0]
    650267c2:	mov    QWORD PTR [rsi],rax
    650267c5:	movzx  eax,BYTE PTR [r14]
    650267c9:	mov    BYTE PTR [rsi+0x8],al
    650267cc:	lea    rcx,[rsi+0x10]
    650267d0:	mov    edx,0xfa0
    650267d5:	call   0x65029d20
    650267da:	test   eax,eax
    650267dc:	je     0x650267e4
    650267de:	add    DWORD PTR [rsi+0xc],0x1
    650267e2:	jmp    0x650267ec
    650267e4:	or     eax,0xffffffff
    650267e7:	jmp    0x650268cc
    650267ec:	add    ebx,0x1
    650267ef:	add    r14,0x1
    650267f3:	add    r13,0x8
    650267f7:	cmp    ebx,r15d
    650267fa:	jl     0x65026780
    650267fc:	mov    r13d,edi
    650267ff:	mov    rsi,rdi
    65026802:	mov    rbx,rsi
    65026805:	imul   rbx,rbx,0x58
    65026809:	add    rbx,QWORD PTR [rip+0x21770]        # 0x65047f80
    65026810:	mov    rax,QWORD PTR [rbx]
    65026813:	cmp    rax,0xffffffffffffffff
    65026817:	je     0x65026828
    65026819:	cmp    rax,0xfffffffffffffffe
    6502681d:	je     0x65026828
    6502681f:	or     BYTE PTR [rbx+0x8],0x80
    65026823:	jmp    0x650268a7
    65026828:	mov    BYTE PTR [rbx+0x8],0x81
    6502682c:	test   rsi,rsi
    6502682f:	jne    0x65026838
    65026831:	mov    ecx,0xfffffff6
    65026836:	jmp    0x65026844
    65026838:	mov    ecx,edi
    6502683a:	cmp    r13d,0x1
    6502683e:	sete   cl
    65026841:	add    ecx,0xfffffff4
    65026844:	call   QWORD PTR [rip+0xda7e]        # 0x650342c8
    6502684a:	mov    r12,rax
    6502684d:	cmp    rax,0xffffffffffffffff
    65026851:	je     0x6502689c
    65026853:	test   rax,rax
    65026856:	je     0x6502689c
    65026858:	mov    rcx,rax
    6502685b:	call   QWORD PTR [rip+0xda6f]        # 0x650342d0
    65026861:	test   eax,eax
    65026863:	je     0x6502689c
    65026865:	mov    QWORD PTR [rbx],r12
    65026868:	movzx  eax,al
    6502686b:	cmp    eax,0x2
    6502686e:	jne    0x65026876
    65026870:	or     BYTE PTR [rbx+0x8],0x40
    65026874:	jmp    0x6502687f
    65026876:	cmp    eax,0x3
    65026879:	jne    0x6502687f
    6502687b:	or     BYTE PTR [rbx+0x8],0x8
    6502687f:	lea    rcx,[rbx+0x10]
    65026883:	mov    edx,0xfa0
    65026888:	call   0x65029d20
    6502688d:	test   eax,eax
    6502688f:	je     0x65026897
    65026891:	add    DWORD PTR [rbx+0xc],0x1
    65026895:	jmp    0x650268a7
    65026897:	or     eax,0xffffffff
    6502689a:	jmp    0x650268cc
    6502689c:	or     BYTE PTR [rbx+0x8],0x40
    650268a0:	mov    QWORD PTR [rbx],0xfffffffffffffffe
    650268a7:	add    r13d,0x1
    650268ab:	add    rsi,0x1
    650268af:	cmp    rsi,0x3
    650268b3:	jl     0x65026802
    650268b9:	mov    ecx,DWORD PTR [rip+0x216a5]        # 0x65047f64
    650268bf:	call   QWORD PTR [rip+0xd9fb]        # 0x650342c0
    650268c5:	xor    eax,eax
    650268c7:	jmp    0x650268cc
    650268c9:	or     eax,0xffffffff
    650268cc:	lea    r11,[rsp+0x90]
    650268d4:	mov    rbx,QWORD PTR [r11+0x20]
    650268d8:	mov    rsi,QWORD PTR [r11+0x28]
    650268dc:	mov    rdi,QWORD PTR [r11+0x30]
    650268e0:	mov    r12,QWORD PTR [r11+0x38]
    650268e4:	mov    rsp,r11
    650268e7:	pop    r15
    650268e9:	pop    r14
    650268eb:	pop    r13
    650268ed:	ret    
    650268ee:	int3   
    650268ef:	int3   
    650268f0:	rex push rbx
    650268f2:	push   rbp
    650268f3:	sub    rsp,0x28
    650268f7:	mov    rbp,rdx
    650268fa:	mov    ebx,0x1
    650268ff:	mov    eax,ebx
    65026901:	mov    eax,ebx
    65026903:	add    rsp,0x28
    65026907:	pop    rbp
    65026908:	pop    rbx
    65026909:	ret    
    6502690a:	int3   
    6502690b:	int3   
    6502690c:	int3   
    6502690d:	int3   
    6502690e:	int3   
    6502690f:	int3   
    65026910:	mov    QWORD PTR [rsp+0x8],rbx
    65026915:	mov    QWORD PTR [rsp+0x10],rbp
    6502691a:	mov    QWORD PTR [rsp+0x18],rsi
    6502691f:	push   rdi
    65026920:	sub    rsp,0x20
    65026924:	lea    rdi,[rip+0x21655]        # 0x65047f80
    6502692b:	xor    esi,esi
    6502692d:	lea    rbp,[rip+0x2184c]        # 0x65048180
    65026934:	mov    rbx,QWORD PTR [rdi]
    65026937:	test   rbx,rbx
    6502693a:	je     0x65026974
    6502693c:	lea    rax,[rbx+0xb00]
    65026943:	cmp    rbx,rax
    65026946:	jae    0x65026969
    65026948:	cmp    DWORD PTR [rbx+0xc],esi
    6502694b:	je     0x65026957
    6502694d:	lea    rcx,[rbx+0x10]
    65026951:	call   QWORD PTR [rip+0xd7c9]        # 0x65034120
    65026957:	mov    rax,QWORD PTR [rdi]
    6502695a:	add    rbx,0x58
    6502695e:	add    rax,0xb00
    65026964:	cmp    rbx,rax
    65026967:	jb     0x65026948
    65026969:	mov    rcx,QWORD PTR [rdi]
    6502696c:	call   0x6501fa90
    65026971:	mov    QWORD PTR [rdi],rsi
    65026974:	add    rdi,0x8
    65026978:	cmp    rdi,rbp
    6502697b:	jl     0x65026934
    6502697d:	mov    rbx,QWORD PTR [rsp+0x30]
    65026982:	mov    rbp,QWORD PTR [rsp+0x38]
    65026987:	mov    rsi,QWORD PTR [rsp+0x40]
    6502698c:	add    rsp,0x20
    65026990:	pop    rdi
    65026991:	ret    
    65026992:	int3   
    65026993:	int3   
    65026994:	int3   
    65026995:	int3   
    65026996:	int3   
    65026997:	int3   
    65026998:	int3   
    65026999:	int3   
    6502699a:	int3   
    6502699b:	int3   
    6502699c:	int3   
    6502699d:	int3   
    6502699e:	int3   
    6502699f:	int3   
    650269a0:	push   r12
    650269a2:	sub    rsp,0x30
    650269a6:	cmp    DWORD PTR [rip+0x217eb],0x0        # 0x65048198
    650269ad:	jne    0x650269b4
    650269af:	call   0x650239b0
    650269b4:	mov    rdx,QWORD PTR [rip+0x1d285]        # 0x65043c40
    650269bb:	xor    r12d,r12d
    650269be:	test   rdx,rdx
    650269c1:	mov    r8d,r12d
    650269c4:	jne    0x650269d0
    650269c6:	or     eax,0xffffffff
    650269c9:	add    rsp,0x30
    650269cd:	pop    r12
    650269cf:	ret    
    650269d0:	movzx  eax,BYTE PTR [rdx]
    650269d3:	mov    QWORD PTR [rsp+0x50],rsi
    650269d8:	mov    QWORD PTR [rsp+0x58],rdi
    650269dd:	test   al,al
    650269df:	je     0x65026a00
    650269e1:	cmp    al,0x3d
    650269e3:	je     0x650269e9
    650269e5:	add    r8d,0x1
    650269e9:	xor    eax,eax
    650269eb:	or     rcx,0xffffffffffffffff
    650269ef:	mov    rdi,rdx
    650269f2:	repnz scas al,BYTE PTR es:[rdi]
    650269f4:	not    rcx
    650269f7:	add    rdx,rcx
    650269fa:	mov    al,BYTE PTR [rdx]
    650269fc:	test   al,al
    650269fe:	jne    0x650269e1
    65026a00:	lea    eax,[r8+0x1]
    65026a04:	mov    edx,0x8
    65026a09:	movsxd rcx,eax
    65026a0c:	call   0x65022980
    65026a11:	test   rax,rax
    65026a14:	mov    rsi,rax
    65026a17:	mov    QWORD PTR [rip+0x1d80a],rax        # 0x65044228
    65026a1e:	jne    0x65026a34
    65026a20:	mov    rsi,QWORD PTR [rsp+0x50]
    65026a25:	mov    rdi,QWORD PTR [rsp+0x58]
    65026a2a:	or     eax,0xffffffff
    65026a2d:	add    rsp,0x30
    65026a31:	pop    r12
    65026a33:	ret    
    65026a34:	mov    QWORD PTR [rsp+0x40],rbx
    65026a39:	mov    rbx,QWORD PTR [rip+0x1d200]        # 0x65043c40
    65026a40:	mov    QWORD PTR [rsp+0x48],rbp
    65026a45:	movzx  edx,BYTE PTR [rbx]
    65026a48:	test   dl,dl
    65026a4a:	je     0x65026ab6
    65026a4c:	data16 data16 xchg ax,ax
    65026a50:	or     rcx,0xffffffffffffffff
    65026a54:	xor    eax,eax
    65026a56:	mov    rdi,rbx
    65026a59:	repnz scas al,BYTE PTR es:[rdi]
    65026a5b:	cmp    dl,0x3d
    65026a5e:	not    rcx
    65026a61:	movsxd rdi,ecx
    65026a64:	je     0x65026aa6
    65026a66:	movsxd rbp,ecx
    65026a69:	lea    edx,[rax+0x1]
    65026a6c:	mov    rcx,rbp
    65026a6f:	call   0x65022980
    65026a74:	test   rax,rax
    65026a77:	mov    QWORD PTR [rsi],rax
    65026a7a:	je     0x65026aef
    65026a7c:	mov    r8,rbx
    65026a7f:	mov    rdx,rbp
    65026a82:	mov    rcx,rax
    65026a85:	call   0x650201b0
    65026a8a:	test   eax,eax
    65026a8c:	je     0x65026aa2
    65026a8e:	xor    r9d,r9d
    65026a91:	xor    r8d,r8d
    65026a94:	xor    edx,edx
    65026a96:	xor    ecx,ecx
    65026a98:	mov    QWORD PTR [rsp+0x20],r12
    65026a9d:	call   0x6501d7b0
    65026aa2:	add    rsi,0x8
    65026aa6:	add    rbx,rdi
    65026aa9:	mov    dl,BYTE PTR [rbx]
    65026aab:	test   dl,dl
    65026aad:	jne    0x65026a50
    65026aaf:	mov    rbx,QWORD PTR [rip+0x1d18a]        # 0x65043c40
    65026ab6:	mov    rcx,rbx
    65026ab9:	call   0x6501fa90
    65026abe:	mov    QWORD PTR [rip+0x1d17b],r12        # 0x65043c40
    65026ac5:	mov    QWORD PTR [rsi],r12
    65026ac8:	mov    DWORD PTR [rip+0x216ae],0x1        # 0x65048180
    65026ad2:	xor    eax,eax
    65026ad4:	mov    rbp,QWORD PTR [rsp+0x48]
    65026ad9:	mov    rbx,QWORD PTR [rsp+0x40]
    65026ade:	mov    rsi,QWORD PTR [rsp+0x50]
    65026ae3:	mov    rdi,QWORD PTR [rsp+0x58]
    65026ae8:	add    rsp,0x30
    65026aec:	pop    r12
    65026aee:	ret    
    65026aef:	mov    rcx,QWORD PTR [rip+0x1d732]        # 0x65044228
    65026af6:	call   0x6501fa90
    65026afb:	mov    QWORD PTR [rip+0x1d726],r12        # 0x65044228
    65026b02:	or     eax,0xffffffff
    65026b05:	jmp    0x65026ad4
    65026b07:	int3   
    65026b08:	int3   
    65026b09:	int3   
    65026b0a:	int3   
    65026b0b:	int3   
    65026b0c:	int3   
    65026b0d:	int3   
    65026b0e:	int3   
    65026b0f:	int3   
    65026b10:	mov    QWORD PTR [rsp+0x8],rbx
    65026b15:	mov    QWORD PTR [rsp+0x10],rbp
    65026b1a:	mov    QWORD PTR [rsp+0x18],rsi
    65026b1f:	mov    QWORD PTR [rsp+0x20],rdi
    65026b24:	push   r12
    65026b26:	push   r13
    65026b28:	push   r14
    65026b2a:	sub    rsp,0x20
    65026b2e:	test   rdx,rdx
    65026b31:	mov    rbp,QWORD PTR [rsp+0x60]
    65026b36:	mov    r14,r9
    65026b39:	mov    DWORD PTR [rbp+0x0],0x0
    65026b40:	mov    rdi,r8
    65026b43:	mov    r13,rdx
    65026b46:	mov    DWORD PTR [r9],0x1
    65026b4d:	mov    rbx,rcx
    65026b50:	je     0x65026b59
    65026b52:	mov    QWORD PTR [rdx],r8
    65026b55:	add    r13,0x8
    65026b59:	xor    r12d,r12d
    65026b5c:	data16 data16 xchg ax,ax
    65026b60:	cmp    BYTE PTR [rbx],0x22
    65026b63:	jne    0x65026b79
    65026b65:	xor    eax,eax
    65026b67:	test   r12d,r12d
    65026b6a:	mov    sil,0x22
    65026b6d:	sete   al
    65026b70:	add    rbx,0x1
    65026b74:	mov    r12d,eax
    65026b77:	jmp    0x65026bba
    65026b79:	add    DWORD PTR [rbp+0x0],0x1
    65026b7d:	test   rdi,rdi
    65026b80:	je     0x65026b8c
    65026b82:	movzx  eax,BYTE PTR [rbx]
    65026b85:	add    rdi,0x1
    65026b89:	mov    BYTE PTR [rdi-0x1],al
    65026b8c:	movzx  esi,BYTE PTR [rbx]
    65026b8f:	add    rbx,0x1
    65026b93:	mov    ecx,esi
    65026b95:	call   0x6502cff0
    65026b9a:	test   eax,eax
    65026b9c:	je     0x65026bb5
    65026b9e:	add    DWORD PTR [rbp+0x0],0x1
    65026ba2:	test   rdi,rdi
    65026ba5:	je     0x65026bb1
    65026ba7:	movzx  eax,BYTE PTR [rbx]
    65026baa:	add    rdi,0x1
    65026bae:	mov    BYTE PTR [rdi-0x1],al
    65026bb1:	add    rbx,0x1
    65026bb5:	test   sil,sil
    65026bb8:	je     0x65026bd6
    65026bba:	test   r12d,r12d
    65026bbd:	jne    0x65026b60
    65026bbf:	cmp    sil,0x20
    65026bc3:	je     0x65026bcb
    65026bc5:	cmp    sil,0x9
    65026bc9:	jne    0x65026b60
    65026bcb:	test   rdi,rdi
    65026bce:	je     0x65026bda
    65026bd0:	mov    BYTE PTR [rdi-0x1],0x0
    65026bd4:	jmp    0x65026bda
    65026bd6:	sub    rbx,0x1
    65026bda:	xor    esi,esi
    65026bdc:	data16 data16 xchg ax,ax
    65026be0:	cmp    BYTE PTR [rbx],0x0
    65026be3:	je     0x65026cfd
    65026be9:	data16 xchg ax,ax
    65026bec:	data16 data16 xchg ax,ax
    65026bf0:	movzx  eax,BYTE PTR [rbx]
    65026bf3:	cmp    al,0x20
    65026bf5:	je     0x65026bfb
    65026bf7:	cmp    al,0x9
    65026bf9:	jne    0x65026c01
    65026bfb:	add    rbx,0x1
    65026bff:	jmp    0x65026bf0
    65026c01:	cmp    BYTE PTR [rbx],0x0
    65026c04:	je     0x65026cfd
    65026c0a:	test   r13,r13
    65026c0d:	je     0x65026c17
    65026c0f:	mov    QWORD PTR [r13+0x0],rdi
    65026c13:	add    r13,0x8
    65026c17:	add    DWORD PTR [r14],0x1
    65026c1b:	xchg   ax,ax
    65026c1d:	data16 xchg ax,ax
    65026c20:	xor    ecx,ecx
    65026c22:	cmp    BYTE PTR [rbx],0x5c
    65026c25:	mov    edx,0x1
    65026c2a:	jne    0x65026c3a
    65026c2c:	data16 data16 xchg ax,ax
    65026c30:	add    rbx,rdx
    65026c33:	add    ecx,edx
    65026c35:	cmp    BYTE PTR [rbx],0x5c
    65026c38:	je     0x65026c30
    65026c3a:	cmp    BYTE PTR [rbx],0x22
    65026c3d:	jne    0x65026c63
    65026c3f:	test   dl,cl
    65026c41:	jne    0x65026c61
    65026c43:	test   esi,esi
    65026c45:	je     0x65026c56
    65026c47:	cmp    BYTE PTR [rbx+0x1],0x22
    65026c4b:	lea    rax,[rbx+0x1]
    65026c4f:	jne    0x65026c56
    65026c51:	mov    rbx,rax
    65026c54:	jmp    0x65026c61
    65026c56:	xor    eax,eax
    65026c58:	xor    edx,edx
    65026c5a:	test   esi,esi
    65026c5c:	sete   al
    65026c5f:	mov    esi,eax
    65026c61:	shr    ecx,1
    65026c63:	test   ecx,ecx
    65026c65:	je     0x65026c7e
    65026c67:	add    ecx,0xffffffff
    65026c6a:	test   rdi,rdi
    65026c6d:	je     0x65026c76
    65026c6f:	mov    BYTE PTR [rdi],0x5c
    65026c72:	add    rdi,0x1
    65026c76:	add    DWORD PTR [rbp+0x0],0x1
    65026c7a:	test   ecx,ecx
    65026c7c:	jne    0x65026c67
    65026c7e:	movzx  eax,BYTE PTR [rbx]
    65026c81:	test   al,al
    65026c83:	je     0x65026ce8
    65026c85:	test   esi,esi
    65026c87:	jne    0x65026c91
    65026c89:	cmp    al,0x20
    65026c8b:	je     0x65026ce8
    65026c8d:	cmp    al,0x9
    65026c8f:	je     0x65026ce8
    65026c91:	test   edx,edx
    65026c93:	je     0x65026cdf
    65026c95:	movsx  ecx,al
    65026c98:	call   0x6502cff0
    65026c9d:	test   rdi,rdi
    65026ca0:	je     0x65026ccf
    65026ca2:	test   eax,eax
    65026ca4:	je     0x65026cb8
    65026ca6:	movzx  eax,BYTE PTR [rbx]
    65026ca9:	add    rdi,0x1
    65026cad:	add    rbx,0x1
    65026cb1:	mov    BYTE PTR [rdi-0x1],al
    65026cb4:	add    DWORD PTR [rbp+0x0],0x1
    65026cb8:	movzx  eax,BYTE PTR [rbx]
    65026cbb:	add    rdi,0x1
    65026cbf:	mov    BYTE PTR [rdi-0x1],al
    65026cc2:	add    DWORD PTR [rbp+0x0],0x1
    65026cc6:	add    rbx,0x1
    65026cca:	jmp    0x65026c20
    65026ccf:	test   eax,eax
    65026cd1:	je     0x65026cdb
    65026cd3:	add    rbx,0x1
    65026cd7:	add    DWORD PTR [rbp+0x0],0x1
    65026cdb:	add    DWORD PTR [rbp+0x0],0x1
    65026cdf:	add    rbx,0x1
    65026ce3:	jmp    0x65026c20
    65026ce8:	test   rdi,rdi
    65026ceb:	je     0x65026cf4
    65026ced:	mov    BYTE PTR [rdi],0x0
    65026cf0:	add    rdi,0x1
    65026cf4:	add    DWORD PTR [rbp+0x0],0x1
    65026cf8:	jmp    0x65026be0
    65026cfd:	test   r13,r13
    65026d00:	je     0x65026d0a
    65026d02:	mov    QWORD PTR [r13+0x0],0x0
    65026d0a:	add    DWORD PTR [r14],0x1
    65026d0e:	mov    rbx,QWORD PTR [rsp+0x40]
    65026d13:	mov    rbp,QWORD PTR [rsp+0x48]
    65026d18:	mov    rsi,QWORD PTR [rsp+0x50]
    65026d1d:	mov    rdi,QWORD PTR [rsp+0x58]
    65026d22:	add    rsp,0x20
    65026d26:	pop    r14
    65026d28:	pop    r13
    65026d2a:	pop    r12
    65026d2c:	ret    
    65026d2d:	int3   
    65026d2e:	int3   
    65026d2f:	int3   
    65026d30:	mov    QWORD PTR [rsp+0x18],rbx
    65026d35:	mov    QWORD PTR [rsp+0x20],rsi
    65026d3a:	push   rdi
    65026d3b:	sub    rsp,0x30
    65026d3f:	cmp    DWORD PTR [rip+0x21452],0x0        # 0x65048198
    65026d46:	jne    0x65026d4d
    65026d48:	call   0x650239b0
    65026d4d:	lea    rdi,[rip+0x1d56c]        # 0x650442c0
    65026d54:	mov    r8d,0x104
    65026d5a:	xor    ecx,ecx
    65026d5c:	mov    rdx,rdi
    65026d5f:	mov    BYTE PTR [rip+0x1d65e],0x0        # 0x650443c4
    65026d66:	call   QWORD PTR [rip+0xd574]        # 0x650342e0
    65026d6c:	mov    rbx,QWORD PTR [rip+0x2143d]        # 0x650481b0
    65026d73:	mov    QWORD PTR [rip+0x1d4ce],rdi        # 0x65044248
    65026d7a:	test   rbx,rbx
    65026d7d:	je     0x65026d84
    65026d7f:	cmp    BYTE PTR [rbx],0x0
    65026d82:	jne    0x65026d87
    65026d84:	mov    rbx,rdi
    65026d87:	lea    rax,[rsp+0x48]
    65026d8c:	lea    r9,[rsp+0x40]
    65026d91:	xor    r8d,r8d
    65026d94:	xor    edx,edx
    65026d96:	mov    rcx,rbx
    65026d99:	mov    QWORD PTR [rsp+0x20],rax
    65026d9e:	call   0x65026b10
    65026da3:	movsxd rsi,DWORD PTR [rsp+0x40]
    65026da8:	movabs rax,0x1fffffffffffffff
    65026db2:	cmp    rsi,rax
    65026db5:	jae    0x65026e1f
    65026db7:	movsxd rax,DWORD PTR [rsp+0x48]
    65026dbc:	cmp    rax,0xffffffffffffffff
    65026dc0:	jae    0x65026e1f
    65026dc2:	lea    rcx,[rax+rsi*8]
    65026dc6:	cmp    rcx,rax
    65026dc9:	jb     0x65026e1f
    65026dcb:	call   0x65022910
    65026dd0:	test   rax,rax
    65026dd3:	mov    rdi,rax
    65026dd6:	je     0x65026e1f
    65026dd8:	lea    r8,[rax+rsi*8]
    65026ddc:	lea    rax,[rsp+0x48]
    65026de1:	lea    r9,[rsp+0x40]
    65026de6:	mov    rdx,rdi
    65026de9:	mov    rcx,rbx
    65026dec:	mov    QWORD PTR [rsp+0x20],rax
    65026df1:	call   0x65026b10
    65026df6:	mov    r11d,DWORD PTR [rsp+0x40]
    65026dfb:	mov    QWORD PTR [rip+0x1d416],rdi        # 0x65044218
    65026e02:	add    r11d,0xffffffff
    65026e06:	xor    eax,eax
    65026e08:	mov    DWORD PTR [rip+0x1d401],r11d        # 0x65044210
    65026e0f:	mov    rbx,QWORD PTR [rsp+0x50]
    65026e14:	mov    rsi,QWORD PTR [rsp+0x58]
    65026e19:	add    rsp,0x30
    65026e1d:	pop    rdi
    65026e1e:	ret    
    65026e1f:	mov    rbx,QWORD PTR [rsp+0x50]
    65026e24:	mov    rsi,QWORD PTR [rsp+0x58]
    65026e29:	or     eax,0xffffffff
    65026e2c:	add    rsp,0x30
    65026e30:	pop    rdi
    65026e31:	ret    
    65026e32:	int3   
    65026e33:	int3   
    65026e34:	int3   
    65026e35:	int3   
    65026e36:	int3   
    65026e37:	int3   
    65026e38:	int3   
    65026e39:	int3   
    65026e3a:	int3   
    65026e3b:	int3   
    65026e3c:	int3   
    65026e3d:	int3   
    65026e3e:	int3   
    65026e3f:	int3   
    65026e40:	mov    QWORD PTR [rsp+0x18],rbx
    65026e45:	mov    QWORD PTR [rsp+0x20],rsi
    65026e4a:	push   rdi
    65026e4b:	sub    rsp,0x40
    65026e4f:	mov    eax,DWORD PTR [rip+0x1d573]        # 0x650443c8
    65026e55:	test   eax,eax
    65026e57:	jne    0x65026e93
    65026e59:	call   QWORD PTR [rip+0xd291]        # 0x650340f0
    65026e5f:	test   rax,rax
    65026e62:	mov    rdi,rax
    65026e65:	je     0x65026e73
    65026e67:	mov    DWORD PTR [rip+0x1d557],0x1        # 0x650443c8
    65026e71:	jmp    0x65026eae
    65026e73:	call   QWORD PTR [rip+0xd1ff]        # 0x65034078
    65026e79:	cmp    eax,0x78
    65026e7c:	jne    0x65026e8d
    65026e7e:	mov    DWORD PTR [rip+0x1d540],0x2        # 0x650443c8
    65026e88:	jmp    0x65026f89
    65026e8d:	mov    eax,DWORD PTR [rip+0x1d535]        # 0x650443c8
    65026e93:	cmp    eax,0x1
    65026e96:	jne    0x65026f80
    65026e9c:	call   QWORD PTR [rip+0xd24e]        # 0x650340f0
    65026ea2:	test   rax,rax
    65026ea5:	mov    rdi,rax
    65026ea8:	je     0x65026fd3
    65026eae:	cmp    WORD PTR [rdi],0x0
    65026eb2:	mov    QWORD PTR [rsp+0x50],rbp
    65026eb7:	mov    rbx,rdi
    65026eba:	mov    QWORD PTR [rsp+0x58],r12
    65026ebf:	je     0x65026ed5
    65026ec1:	add    rbx,0x2
    65026ec5:	cmp    WORD PTR [rbx],0x0
    65026ec9:	jne    0x65026ec1
    65026ecb:	add    rbx,0x2
    65026ecf:	cmp    WORD PTR [rbx],0x0
    65026ed3:	jne    0x65026ec1
    65026ed5:	xor    r12d,r12d
    65026ed8:	sub    rbx,rdi
    65026edb:	mov    r8,rdi
    65026ede:	mov    QWORD PTR [rsp+0x38],r12
    65026ee3:	mov    QWORD PTR [rsp+0x30],r12
    65026ee8:	sar    rbx,1
    65026eeb:	lea    r9d,[rbx+0x1]
    65026eef:	xor    edx,edx
    65026ef1:	xor    ecx,ecx
    65026ef3:	mov    DWORD PTR [rsp+0x28],r12d
    65026ef8:	mov    QWORD PTR [rsp+0x20],r12
    65026efd:	call   QWORD PTR [rip+0xd13d]        # 0x65034040
    65026f03:	test   eax,eax
    65026f05:	movsxd rbp,eax
    65026f08:	je     0x65026f73
    65026f0a:	mov    rcx,rbp
    65026f0d:	call   0x65022910
    65026f12:	test   rax,rax
    65026f15:	mov    rsi,rax
    65026f18:	je     0x65026f73
    65026f1a:	mov    QWORD PTR [rsp+0x38],r12
    65026f1f:	mov    QWORD PTR [rsp+0x30],r12
    65026f24:	lea    r9d,[rbx+0x1]
    65026f28:	mov    r8,rdi
    65026f2b:	xor    edx,edx
    65026f2d:	xor    ecx,ecx
    65026f2f:	mov    DWORD PTR [rsp+0x28],ebp
    65026f33:	mov    QWORD PTR [rsp+0x20],rax
    65026f38:	call   QWORD PTR [rip+0xd102]        # 0x65034040
    65026f3e:	test   eax,eax
    65026f40:	jne    0x65026f4d
    65026f42:	mov    rcx,rsi
    65026f45:	call   0x6501fa90
    65026f4a:	mov    rsi,r12
    65026f4d:	mov    rcx,rdi
    65026f50:	call   QWORD PTR [rip+0xd3a2]        # 0x650342f8
    65026f56:	mov    rax,rsi
    65026f59:	mov    rbp,QWORD PTR [rsp+0x50]
    65026f5e:	mov    r12,QWORD PTR [rsp+0x58]
    65026f63:	mov    rbx,QWORD PTR [rsp+0x60]
    65026f68:	mov    rsi,QWORD PTR [rsp+0x68]
    65026f6d:	add    rsp,0x40
    65026f71:	pop    rdi
    65026f72:	ret    
    65026f73:	mov    rcx,rdi
    65026f76:	call   QWORD PTR [rip+0xd37c]        # 0x650342f8
    65026f7c:	xor    eax,eax
    65026f7e:	jmp    0x65026f59
    65026f80:	cmp    eax,0x2
    65026f83:	je     0x65026f89
    65026f85:	test   eax,eax
    65026f87:	jne    0x65026fd3
    65026f89:	call   QWORD PTR [rip+0xd361]        # 0x650342f0
    65026f8f:	test   rax,rax
    65026f92:	mov    rbx,rax
    65026f95:	je     0x65026fd3
    65026f97:	cmp    BYTE PTR [rax],0x0
    65026f9a:	je     0x65026fb2
    65026f9c:	data16 data16 xchg ax,ax
    65026fa0:	add    rax,0x1
    65026fa4:	cmp    BYTE PTR [rax],0x0
    65026fa7:	jne    0x65026fa0
    65026fa9:	add    rax,0x1
    65026fad:	cmp    BYTE PTR [rax],0x0
    65026fb0:	jne    0x65026fa0
    65026fb2:	sub    eax,ebx
    65026fb4:	add    eax,0x1
    65026fb7:	movsxd rsi,eax
    65026fba:	mov    rcx,rsi
    65026fbd:	call   0x65022910
    65026fc2:	test   rax,rax
    65026fc5:	mov    rdi,rax
    65026fc8:	jne    0x65026fe5
    65026fca:	mov    rcx,rbx
    65026fcd:	call   QWORD PTR [rip+0xd315]        # 0x650342e8
    65026fd3:	xor    eax,eax
    65026fd5:	mov    rbx,QWORD PTR [rsp+0x60]
    65026fda:	mov    rsi,QWORD PTR [rsp+0x68]
    65026fdf:	add    rsp,0x40
    65026fe3:	pop    rdi
    65026fe4:	ret    
    65026fe5:	mov    r8,rsi
    65026fe8:	mov    rdx,rbx
    65026feb:	mov    rcx,rax
    65026fee:	call   0x6501fbc0
    65026ff3:	mov    rcx,rbx
    65026ff6:	call   QWORD PTR [rip+0xd2ec]        # 0x650342e8
    65026ffc:	mov    rbx,QWORD PTR [rsp+0x60]
    65027001:	mov    rsi,QWORD PTR [rsp+0x68]
    65027006:	mov    rax,rdi
    65027009:	add    rsp,0x40
    6502700d:	pop    rdi
    6502700e:	ret    
    6502700f:	int3   
    65027010:	mov    QWORD PTR [rsp+0x8],rbx
    65027015:	push   rdi
    65027016:	sub    rsp,0x20
    6502701a:	lea    rbx,[rip+0x13777]        # 0x6503a798
    65027021:	lea    rdi,[rip+0x13770]        # 0x6503a798
    65027028:	cmp    rbx,rdi
    6502702b:	jae    0x65027043
    6502702d:	data16 xchg ax,ax
    65027030:	mov    rax,QWORD PTR [rbx]
    65027033:	test   rax,rax
    65027036:	je     0x6502703a
    65027038:	call   rax
    6502703a:	add    rbx,0x8
    6502703e:	cmp    rbx,rdi
    65027041:	jb     0x65027030
    65027043:	mov    rbx,QWORD PTR [rsp+0x30]
    65027048:	add    rsp,0x20
    6502704c:	pop    rdi
    6502704d:	ret    
    6502704e:	int3   
    6502704f:	int3   
    65027050:	mov    QWORD PTR [rsp+0x8],rbx
    65027055:	push   rdi
    65027056:	sub    rsp,0x20
    6502705a:	lea    rbx,[rip+0x13747]        # 0x6503a7a8
    65027061:	lea    rdi,[rip+0x13740]        # 0x6503a7a8
    65027068:	cmp    rbx,rdi
    6502706b:	jae    0x65027083
    6502706d:	data16 xchg ax,ax
    65027070:	mov    rax,QWORD PTR [rbx]
    65027073:	test   rax,rax
    65027076:	je     0x6502707a
    65027078:	call   rax
    6502707a:	add    rbx,0x8
    6502707e:	cmp    rbx,rdi
    65027081:	jb     0x65027070
    65027083:	mov    rbx,QWORD PTR [rsp+0x30]
    65027088:	add    rsp,0x20
    6502708c:	pop    rdi
    6502708d:	ret    
    6502708e:	int3   
    6502708f:	int3   
    65027090:	mov    QWORD PTR [rsp+0x10],rbx
    65027095:	mov    QWORD PTR [rsp+0x18],rsi
    6502709a:	push   rdi
    6502709b:	sub    rsp,0x20
    6502709f:	mov    rsi,rdx
    650270a2:	mov    edi,ecx
    650270a4:	call   0x65020830
    650270a9:	test   rax,rax
    650270ac:	mov    rbx,rax
    650270af:	je     0x6502728e
    650270b5:	mov    rcx,QWORD PTR [rax+0xa0]
    650270bc:	movsxd r8,DWORD PTR [rip+0x1ba19]        # 0x65042adc
    650270c3:	mov    rdx,rcx
    650270c6:	cmp    DWORD PTR [rdx],edi
    650270c8:	je     0x650270dd
    650270ca:	mov    rax,r8
    650270cd:	add    rdx,0x10
    650270d1:	shl    rax,0x4
    650270d5:	add    rax,rcx
    650270d8:	cmp    rdx,rax
    650270db:	jb     0x650270c6
    650270dd:	mov    rax,r8
    650270e0:	shl    rax,0x4
    650270e4:	add    rax,rcx
    650270e7:	cmp    rdx,rax
    650270ea:	jae    0x6502728e
    650270f0:	cmp    DWORD PTR [rdx],edi
    650270f2:	jne    0x6502728e
    650270f8:	mov    r9,QWORD PTR [rdx+0x8]
    650270fc:	test   r9,r9
    650270ff:	je     0x6502728e
    65027105:	cmp    r9,0x5
    65027109:	jne    0x65027126
    6502710b:	xor    r8d,r8d
    6502710e:	lea    eax,[r9-0x4]
    65027112:	mov    QWORD PTR [rdx+0x8],r8
    65027116:	mov    rbx,QWORD PTR [rsp+0x38]
    6502711b:	mov    rsi,QWORD PTR [rsp+0x40]
    65027120:	add    rsp,0x20
    65027124:	pop    rdi
    65027125:	ret    
    65027126:	cmp    r9,0x1
    6502712a:	jne    0x6502713f
    6502712c:	or     eax,0xffffffff
    6502712f:	mov    rbx,QWORD PTR [rsp+0x38]
    65027134:	mov    rsi,QWORD PTR [rsp+0x40]
    65027139:	add    rsp,0x20
    6502713d:	pop    rdi
    6502713e:	ret    
    6502713f:	mov    QWORD PTR [rsp+0x30],rbp
    65027144:	mov    rbp,QWORD PTR [rbx+0xa8]
    6502714b:	mov    QWORD PTR [rbx+0xa8],rsi
    65027152:	mov    ecx,DWORD PTR [rdx+0x4]
    65027155:	cmp    ecx,0x8
    65027158:	jne    0x65027265
    6502715e:	movsxd r10,DWORD PTR [rip+0x1b96b]        # 0x65042ad0
    65027165:	mov    ecx,DWORD PTR [rip+0x1b969]        # 0x65042ad4
    6502716b:	add    ecx,r10d
    6502716e:	mov    r11,r10
    65027171:	cmp    r10d,ecx
    65027174:	jge    0x650271a7
    65027176:	shl    r11,0x4
    6502717a:	xor    r8d,r8d
    6502717d:	data16 xchg ax,ax
    65027180:	mov    rax,QWORD PTR [rbx+0xa0]
    65027187:	add    r10d,0x1
    6502718b:	add    r11,0x10
    6502718f:	mov    QWORD PTR [r11+rax*1-0x8],r8
    65027194:	mov    ecx,DWORD PTR [rip+0x1b93a]        # 0x65042ad4
    6502719a:	mov    eax,DWORD PTR [rip+0x1b930]        # 0x65042ad0
    650271a0:	add    ecx,eax
    650271a2:	cmp    r10d,ecx
    650271a5:	jl     0x65027180
    650271a7:	mov    eax,DWORD PTR [rdx]
    650271a9:	mov    edi,DWORD PTR [rbx+0xb0]
    650271af:	cmp    eax,0xc000008e
    650271b4:	jne    0x650271c2
    650271b6:	mov    DWORD PTR [rbx+0xb0],0x83
    650271c0:	jmp    0x65027232
    650271c2:	cmp    eax,0xc0000090
    650271c7:	jne    0x650271d5
    650271c9:	mov    DWORD PTR [rbx+0xb0],0x81
    650271d3:	jmp    0x65027232
    650271d5:	cmp    eax,0xc0000091
    650271da:	jne    0x650271e8
    650271dc:	mov    DWORD PTR [rbx+0xb0],0x84
    650271e6:	jmp    0x65027232
    650271e8:	cmp    eax,0xc0000093
    650271ed:	jne    0x650271fb
    650271ef:	mov    DWORD PTR [rbx+0xb0],0x85
    650271f9:	jmp    0x65027232
    650271fb:	cmp    eax,0xc000008d
    65027200:	jne    0x6502720e
    65027202:	mov    DWORD PTR [rbx+0xb0],0x82
    6502720c:	jmp    0x65027232
    6502720e:	cmp    eax,0xc000008f
    65027213:	jne    0x65027221
    65027215:	mov    DWORD PTR [rbx+0xb0],0x86
    6502721f:	jmp    0x65027232
    65027221:	cmp    eax,0xc0000092
    65027226:	jne    0x65027232
    65027228:	mov    DWORD PTR [rbx+0xb0],0x8a
    65027232:	mov    edx,DWORD PTR [rbx+0xb0]
    65027238:	mov    ecx,0x8
    6502723d:	call   r9
    65027240:	mov    QWORD PTR [rbx+0xa8],rbp
    65027247:	mov    rbp,QWORD PTR [rsp+0x30]
    6502724c:	mov    DWORD PTR [rbx+0xb0],edi
    65027252:	or     eax,0xffffffff
    65027255:	mov    rbx,QWORD PTR [rsp+0x38]
    6502725a:	mov    rsi,QWORD PTR [rsp+0x40]
    6502725f:	add    rsp,0x20
    65027263:	pop    rdi
    65027264:	ret    
    65027265:	xor    r8d,r8d
    65027268:	mov    QWORD PTR [rdx+0x8],r8
    6502726c:	call   r9
    6502726f:	mov    QWORD PTR [rbx+0xa8],rbp
    65027276:	mov    rbp,QWORD PTR [rsp+0x30]
    6502727b:	or     eax,0xffffffff
    6502727e:	mov    rbx,QWORD PTR [rsp+0x38]
    65027283:	mov    rsi,QWORD PTR [rsp+0x40]
    65027288:	add    rsp,0x20
    6502728c:	pop    rdi
    6502728d:	ret    
    6502728e:	mov    rbx,QWORD PTR [rsp+0x38]
    65027293:	mov    rsi,QWORD PTR [rsp+0x40]
    65027298:	xor    eax,eax
    6502729a:	add    rsp,0x20
    6502729e:	pop    rdi
    6502729f:	ret    
    650272a0:	cmp    ecx,0xe06d7363
    650272a6:	jne    0x650272ad
    650272a8:	jmp    0x65027090
    650272ad:	xor    eax,eax
    650272af:	ret    
    650272b0:	rex push rdi
    650272b2:	sub    rsp,0x20
    650272b6:	mov    rax,QWORD PTR [rip+0x1ae63]        # 0x65042120
    650272bd:	movabs rdi,0x2b992ddfa232
    650272c7:	mov    QWORD PTR [rsp+0x30],0x0
    650272d0:	cmp    rax,rdi
    650272d3:	je     0x650272e5
    650272d5:	not    rax
    650272d8:	mov    QWORD PTR [rip+0x1ae49],rax        # 0x65042128
    650272df:	add    rsp,0x20
    650272e3:	pop    rdi
    650272e4:	ret    
    650272e5:	lea    rcx,[rsp+0x30]
    650272ea:	mov    QWORD PTR [rsp+0x40],rbx
    650272ef:	call   QWORD PTR [rip+0xcea3]        # 0x65034198
    650272f5:	mov    rbx,QWORD PTR [rsp+0x30]
    650272fa:	call   QWORD PTR [rip+0xd008]        # 0x65034308
    65027300:	mov    r11d,eax
    65027303:	xor    rbx,r11
    65027306:	call   QWORD PTR [rip+0xcf24]        # 0x65034230
    6502730c:	mov    r11d,eax
    6502730f:	xor    rbx,r11
    65027312:	call   QWORD PTR [rip+0xcd88]        # 0x650340a0
    65027318:	lea    rcx,[rsp+0x38]
    6502731d:	mov    r11d,eax
    65027320:	xor    rbx,r11
    65027323:	call   QWORD PTR [rip+0xcfd7]        # 0x65034300
    65027329:	mov    r11,QWORD PTR [rsp+0x38]
    6502732e:	xor    r11,rbx
    65027331:	mov    rbx,QWORD PTR [rsp+0x40]
    65027336:	movabs rax,0xffffffffffff
    65027340:	and    r11,rax
    65027343:	movabs rax,0x2b992ddfa233
    6502734d:	cmp    r11,rdi
    65027350:	cmove  r11,rax
    65027354:	mov    QWORD PTR [rip+0x1adc5],r11        # 0x65042120
    6502735b:	not    r11
    6502735e:	mov    QWORD PTR [rip+0x1adc3],r11        # 0x65042128
    65027365:	add    rsp,0x20
    65027369:	pop    rdi
    6502736a:	ret    
    6502736b:	int3   
    6502736c:	int3   
    6502736d:	int3   
    6502736e:	int3   
    6502736f:	int3   
    65027370:	test   edx,edx
    65027372:	jle    0x650273f8
    65027378:	mov    QWORD PTR [rsp+0x8],rbx
    6502737d:	mov    QWORD PTR [rsp+0x10],rbp
    65027382:	mov    QWORD PTR [rsp+0x18],rsi
    65027387:	push   rdi
    65027388:	sub    rsp,0x20
    6502738c:	mov    rdi,r9
    6502738f:	mov    rbx,r8
    65027392:	mov    esi,edx
    65027394:	movzx  ebp,cl
    65027397:	sub    esi,0x1
    6502739a:	test   BYTE PTR [rbx+0x18],0x40
    6502739e:	je     0x650273a7
    650273a0:	cmp    QWORD PTR [rbx+0x10],0x0
    650273a5:	je     0x650273ce
    650273a7:	add    DWORD PTR [rbx+0x8],0xffffffff
    650273ab:	js     0x650273bd
    650273ad:	mov    rax,QWORD PTR [rbx]
    650273b0:	mov    BYTE PTR [rax],bpl
    650273b3:	add    QWORD PTR [rbx],0x1
    650273b7:	movzx  eax,bpl
    650273bb:	jmp    0x650273c9
    650273bd:	movsx  ecx,bpl
    650273c1:	mov    rdx,rbx
    650273c4:	call   0x65023dc0
    650273c9:	cmp    eax,0xffffffff
    650273cc:	je     0x650273de
    650273ce:	add    DWORD PTR [rdi],0x1
    650273d1:	mov    eax,DWORD PTR [rdi]
    650273d3:	cmp    eax,0xffffffff
    650273d6:	je     0x650273e4
    650273d8:	test   esi,esi
    650273da:	jg     0x65027397
    650273dc:	jmp    0x650273e4
    650273de:	mov    DWORD PTR [rdi],0xffffffff
    650273e4:	mov    rbx,QWORD PTR [rsp+0x30]
    650273e9:	mov    rbp,QWORD PTR [rsp+0x38]
    650273ee:	mov    rsi,QWORD PTR [rsp+0x40]
    650273f3:	add    rsp,0x20
    650273f7:	pop    rdi
    650273f8:	ret    0x0
    650273fb:	int3   
    650273fc:	int3   
    650273fd:	int3   
    650273fe:	int3   
    650273ff:	int3   
    65027400:	mov    QWORD PTR [rsp+0x8],rbx
    65027405:	mov    QWORD PTR [rsp+0x10],rbp
    6502740a:	mov    QWORD PTR [rsp+0x18],rsi
    6502740f:	push   rdi
    65027410:	sub    rsp,0x20
    65027414:	test   BYTE PTR [r8+0x18],0x40
    65027419:	mov    rdi,r9
    6502741c:	mov    rbx,r8
    6502741f:	mov    esi,edx
    65027421:	mov    rbp,rcx
    65027424:	je     0x65027435
    65027426:	cmp    QWORD PTR [r8+0x10],0x0
    6502742b:	jne    0x65027435
    6502742d:	add    DWORD PTR [r9],edx
    65027430:	jmp    0x650274b6
    65027435:	test   edx,edx
    65027437:	jle    0x650274b6
    6502743d:	data16 xchg ax,ax
    65027440:	movzx  ecx,BYTE PTR [rbp+0x0]
    65027444:	sub    esi,0x1
    65027447:	test   BYTE PTR [rbx+0x18],0x40
    6502744b:	je     0x65027454
    6502744d:	cmp    QWORD PTR [rbx+0x10],0x0
    65027452:	je     0x6502747c
    65027454:	add    DWORD PTR [rbx+0x8],0xffffffff
    65027458:	js     0x65027468
    6502745a:	mov    rax,QWORD PTR [rbx]
    6502745d:	mov    BYTE PTR [rax],cl
    6502745f:	add    QWORD PTR [rbx],0x1
    65027463:	movzx  eax,cl
    65027466:	jmp    0x65027473
    65027468:	movsx  ecx,cl
    6502746b:	mov    rdx,rbx
    6502746e:	call   0x65023dc0
    65027473:	cmp    eax,0xffffffff
    65027476:	jne    0x6502747c
    65027478:	mov    DWORD PTR [rdi],eax
    6502747a:	jmp    0x6502747f
    6502747c:	add    DWORD PTR [rdi],0x1
    6502747f:	add    rbp,0x1
    65027483:	cmp    DWORD PTR [rdi],0xffffffff
    65027486:	jne    0x650274b2
    65027488:	call   0x650202b0
    6502748d:	cmp    DWORD PTR [rax],0x2a
    65027490:	jne    0x650274b6
    65027492:	test   BYTE PTR [rbx+0x18],0x40
    65027496:	je     0x6502749f
    65027498:	cmp    QWORD PTR [rbx+0x10],0x0
    6502749d:	je     0x650274af
    6502749f:	add    DWORD PTR [rbx+0x8],0xffffffff
    650274a3:	js     0x650274cb
    650274a5:	mov    rax,QWORD PTR [rbx]
    650274a8:	mov    BYTE PTR [rax],0x3f
    650274ab:	add    QWORD PTR [rbx],0x1
    650274af:	add    DWORD PTR [rdi],0x1
    650274b2:	test   esi,esi
    650274b4:	jg     0x65027440
    650274b6:	mov    rbx,QWORD PTR [rsp+0x30]
    650274bb:	mov    rbp,QWORD PTR [rsp+0x38]
    650274c0:	mov    rsi,QWORD PTR [rsp+0x40]
    650274c5:	add    rsp,0x20
    650274c9:	pop    rdi
    650274ca:	ret    
    650274cb:	mov    rdx,rbx
    650274ce:	mov    ecx,0x3f
    650274d3:	call   0x65023dc0
    650274d8:	cmp    eax,0xffffffff
    650274db:	jne    0x650274af
    650274dd:	mov    DWORD PTR [rdi],eax
    650274df:	jmp    0x650274b2
    650274e1:	int3   
    650274e2:	int3   
    650274e3:	int3   
    650274e4:	int3   
    650274e5:	int3   
    650274e6:	int3   
    650274e7:	int3   
    650274e8:	int3   
    650274e9:	int3   
    650274ea:	int3   
    650274eb:	int3   
    650274ec:	int3   
    650274ed:	int3   
    650274ee:	int3   
    650274ef:	int3   
    650274f0:	rex push rbp
    650274f2:	push   rsi
    650274f3:	push   rdi
    650274f4:	push   r12
    650274f6:	push   r14
    650274f8:	push   r15
    650274fa:	sub    rsp,0x2e8
    65027501:	mov    rax,QWORD PTR [rip+0x1ac18]        # 0x65042120
    65027508:	xor    rax,rsp
    6502750b:	mov    QWORD PTR [rsp+0x2c8],rax
    65027513:	xor    ebp,ebp
    65027515:	test   r8,r8
    65027518:	mov    rdi,r9
    6502751b:	mov    QWORD PTR [rsp+0x60],r9
    65027520:	mov    rsi,rdx
    65027523:	mov    r12,rcx
    65027526:	mov    DWORD PTR [rsp+0x74],ebp
    6502752a:	mov    r14d,ebp
    6502752d:	mov    DWORD PTR [rsp+0x40],ebp
    65027531:	mov    DWORD PTR [rsp+0x68],ebp
    65027535:	mov    r15d,ebp
    65027538:	mov    DWORD PTR [rsp+0x48],ebp
    6502753c:	mov    DWORD PTR [rsp+0x54],ebp
    65027540:	mov    DWORD PTR [rsp+0x70],ebp
    65027544:	mov    DWORD PTR [rsp+0x4c],ebp
    65027548:	mov    BYTE PTR [rsp+0x90],bpl
    65027550:	jne    0x65027600
    65027556:	call   0x650208c0
    6502755b:	mov    QWORD PTR [rsp+0x88],rax
    65027563:	mov    rdx,rax
    65027566:	mov    rcx,QWORD PTR [rax+0xc0]
    6502756d:	cmp    rcx,QWORD PTR [rip+0x1b42c]        # 0x650429a0
    65027574:	mov    QWORD PTR [rsp+0x78],rcx
    65027579:	mov    rax,QWORD PTR [rax+0xb8]
    65027580:	mov    QWORD PTR [rsp+0x80],rax
    65027588:	je     0x650275b2
    6502758a:	mov    ecx,DWORD PTR [rdx+0xc8]
    65027590:	test   DWORD PTR [rip+0x1b292],ecx        # 0x65042828
    65027596:	jne    0x650275b2
    65027598:	call   0x65023d20
    6502759d:	mov    rdx,QWORD PTR [rsp+0x88]
    650275a5:	mov    QWORD PTR [rsp+0x78],rax
    650275aa:	mov    rax,QWORD PTR [rsp+0x80]
    650275b2:	cmp    rax,QWORD PTR [rip+0x1b167]        # 0x65042720
    650275b9:	je     0x650275de
    650275bb:	mov    eax,DWORD PTR [rdx+0xc8]
    650275c1:	test   DWORD PTR [rip+0x1b261],eax        # 0x65042828
    650275c7:	jne    0x650275de
    650275c9:	call   0x650231d0
    650275ce:	mov    rdx,QWORD PTR [rsp+0x88]
    650275d6:	mov    QWORD PTR [rsp+0x80],rax
    650275de:	test   BYTE PTR [rdx+0xc8],0x2
    650275e5:	jne    0x6502761b
    650275e7:	or     DWORD PTR [rdx+0xc8],0x2
    650275ee:	mov    rdx,QWORD PTR [rsp+0x88]
    650275f6:	mov    BYTE PTR [rsp+0x90],0x1
    650275fe:	jmp    0x6502761b
    65027600:	mov    rax,QWORD PTR [r8]
    65027603:	lea    rcx,[rsp+0x78]
    65027608:	mov    QWORD PTR [rcx],rax
    6502760b:	mov    rax,QWORD PTR [r8+0x8]
    6502760f:	mov    QWORD PTR [rcx+0x8],rax
    65027613:	mov    rdx,QWORD PTR [rsp+0x88]
    6502761b:	test   r12,r12
    6502761e:	jne    0x65027660
    65027620:	call   0x650202b0
    65027625:	xor    r9d,r9d
    65027628:	xor    r8d,r8d
    6502762b:	xor    edx,edx
    6502762d:	xor    ecx,ecx
    6502762f:	mov    QWORD PTR [rsp+0x20],rbp
    65027634:	mov    DWORD PTR [rax],0x16
    6502763a:	call   0x6501d850
    6502763f:	cmp    BYTE PTR [rsp+0x90],bpl
    65027647:	je     0x65027658
    65027649:	mov    rax,QWORD PTR [rsp+0x88]
    65027651:	and    DWORD PTR [rax+0xc8],0xfffffffd
    65027658:	or     eax,0xffffffff
    6502765b:	jmp    0x65028406
    65027660:	test   BYTE PTR [r12+0x18],0x40
    65027666:	mov    QWORD PTR [rsp+0x2e0],rbx
    6502766e:	lea    r10,[rip+0xfffffffffffd898b]        # 0x65000000
    65027675:	mov    QWORD PTR [rsp+0x2d8],r13
    6502767d:	jne    0x6502774e
    65027683:	mov    rcx,r12
    65027686:	call   0x6502b620
    6502768b:	lea    rbx,[rip+0x1b33e]        # 0x650429d0
    65027692:	cmp    eax,0xffffffff
    65027695:	je     0x650276da
    65027697:	mov    rcx,r12
    6502769a:	call   0x6502b620
    6502769f:	cmp    eax,0xfffffffe
    650276a2:	je     0x650276da
    650276a4:	mov    rcx,r12
    650276a7:	call   0x6502b620
    650276ac:	lea    r13,[rip+0xfffffffffffd894d]        # 0x65000000
    650276b3:	movsxd rcx,eax
    650276b6:	sar    rcx,0x5
    650276ba:	mov    rdi,QWORD PTR [r13+rcx*8+0x47f80]
    650276c2:	mov    rcx,r12
    650276c5:	call   0x6502b620
    650276ca:	mov    r11d,eax
    650276cd:	and    r11d,0x1f
    650276d1:	imul   r11,r11,0x58
    650276d5:	add    r11,rdi
    650276d8:	jmp    0x650276e4
    650276da:	mov    r11,rbx
    650276dd:	lea    r13,[rip+0xfffffffffffd891c]        # 0x65000000
    650276e4:	test   BYTE PTR [r11+0x38],0x7f
    650276e9:	jne    0x6502777f
    650276ef:	mov    rcx,r12
    650276f2:	call   0x6502b620
    650276f7:	cmp    eax,0xffffffff
    650276fa:	je     0x65027734
    650276fc:	mov    rcx,r12
    650276ff:	call   0x6502b620
    65027704:	cmp    eax,0xfffffffe
    65027707:	je     0x65027734
    65027709:	mov    rcx,r12
    6502770c:	call   0x6502b620
    65027711:	movsxd rcx,eax
    65027714:	sar    rcx,0x5
    65027718:	mov    rdi,QWORD PTR [r13+rcx*8+0x47f80]
    65027720:	mov    rcx,r12
    65027723:	call   0x6502b620
    65027728:	mov    ebx,eax
    6502772a:	and    ebx,0x1f
    6502772d:	imul   rbx,rbx,0x58
    65027731:	add    rbx,rdi
    65027734:	test   BYTE PTR [rbx+0x38],0x80
    65027738:	jne    0x6502777f
    6502773a:	mov    rdx,QWORD PTR [rsp+0x88]
    65027742:	mov    rdi,QWORD PTR [rsp+0x60]
    65027747:	lea    r10,[rip+0xfffffffffffd88b2]        # 0x65000000
    6502774e:	test   rsi,rsi
    65027751:	jne    0x650277ab
    65027753:	call   0x650202b0
    65027758:	xor    r9d,r9d
    6502775b:	xor    r8d,r8d
    6502775e:	xor    edx,edx
    65027760:	xor    ecx,ecx
    65027762:	mov    QWORD PTR [rsp+0x20],rbp
    65027767:	mov    DWORD PTR [rax],0x16
    6502776d:	call   0x6501d850
    65027772:	cmp    BYTE PTR [rsp+0x90],bpl
    6502777a:	jmp    0x650283c5
    6502777f:	call   0x650202b0
    65027784:	xor    r9d,r9d
    65027787:	xor    r8d,r8d
    6502778a:	xor    edx,edx
    6502778c:	xor    ecx,ecx
    6502778e:	mov    QWORD PTR [rsp+0x20],rbp
    65027793:	mov    DWORD PTR [rax],0x16
    65027799:	call   0x6501d850
    6502779e:	cmp    BYTE PTR [rsp+0x90],bpl
    650277a6:	jmp    0x650283c5
    650277ab:	movzx  r13d,BYTE PTR [rsi]
    650277af:	xor    r9d,r9d
    650277b2:	test   r13b,r13b
    650277b5:	mov    DWORD PTR [rsp+0x44],r9d
    650277ba:	mov    DWORD PTR [rsp+0x50],r9d
    650277bf:	mov    r8d,r9d
    650277c2:	mov    QWORD PTR [rsp+0xa0],r9
    650277ca:	je     0x650283e3
    650277d0:	mov    rbx,QWORD PTR [rsp+0xb0]
    650277d8:	mov    r11d,0x200
    650277de:	xchg   ax,ax
    650277e0:	add    rsi,0x1
    650277e4:	test   ebp,ebp
    650277e6:	mov    QWORD PTR [rsp+0xb8],rsi
    650277ee:	js     0x650283db
    650277f4:	lea    eax,[r13-0x20]
    650277f8:	cmp    al,0x58
    650277fa:	ja     0x6502780d
    650277fc:	movsx  rax,r13b
    65027800:	mov    cl,BYTE PTR [rax+r10*1+0x35430]
    65027808:	and    ecx,0xf
    6502780b:	jmp    0x65027810
    6502780d:	mov    ecx,r9d
    65027810:	movsxd rax,r8d
    65027813:	movsxd rcx,ecx
    65027816:	lea    rdx,[rax+rcx*8]
    6502781a:	movsx  r8d,BYTE PTR [rdx+r10*1+0x35450]
    65027823:	sar    r8d,0x4
    65027827:	cmp    r8d,0x7
    6502782b:	mov    DWORD PTR [rsp+0x6c],r8d
    65027830:	ja     0x65028388
    65027836:	movsxd rax,r8d
    65027839:	mov    ecx,DWORD PTR [r10+rax*4+0x28428]
    65027841:	add    rcx,r10
    65027844:	jmp    rcx
    65027846:	or     r15d,0xffffffff
    6502784a:	mov    DWORD PTR [rsp+0x98],r9d
    65027852:	mov    DWORD PTR [rsp+0x70],r9d
    65027857:	mov    DWORD PTR [rsp+0x68],r9d
    6502785c:	mov    DWORD PTR [rsp+0x54],r9d
    65027861:	mov    r14d,r9d
    65027864:	mov    DWORD PTR [rsp+0x48],r15d
    65027869:	mov    DWORD PTR [rsp+0x40],r9d
    6502786e:	mov    DWORD PTR [rsp+0x4c],r9d
    65027873:	jmp    0x65028388
    65027878:	cmp    r13b,0x20
    6502787c:	je     0x650278d3
    6502787e:	cmp    r13b,0x23
    65027882:	je     0x650278c4
    65027884:	cmp    r13b,0x2b
    65027888:	je     0x650278b6
    6502788a:	cmp    r13b,0x2d
    6502788e:	je     0x650278a8
    65027890:	cmp    r13b,0x30
    65027894:	jne    0x65028388
    6502789a:	or     r14d,0x8
    6502789e:	mov    DWORD PTR [rsp+0x40],r14d
    650278a3:	jmp    0x65028388
    650278a8:	or     r14d,0x4
    650278ac:	mov    DWORD PTR [rsp+0x40],r14d
    650278b1:	jmp    0x65028388
    650278b6:	or     r14d,0x1
    650278ba:	mov    DWORD PTR [rsp+0x40],r14d
    650278bf:	jmp    0x65028388
    650278c4:	bts    r14d,0x7
    650278c9:	mov    DWORD PTR [rsp+0x40],r14d
    650278ce:	jmp    0x65028388
    650278d3:	or     r14d,0x2
    650278d7:	mov    DWORD PTR [rsp+0x40],r14d
    650278dc:	jmp    0x65028388
    650278e1:	cmp    r13b,0x2a
    650278e5:	jne    0x65027912
    650278e7:	mov    eax,DWORD PTR [rdi]
    650278e9:	add    rdi,0x8
    650278ed:	test   eax,eax
    650278ef:	mov    QWORD PTR [rsp+0x60],rdi
    650278f4:	mov    DWORD PTR [rsp+0x68],eax
    650278f8:	jns    0x65028388
    650278fe:	or     r14d,0x4
    65027902:	neg    eax
    65027904:	mov    DWORD PTR [rsp+0x68],eax
    65027908:	mov    DWORD PTR [rsp+0x40],r14d
    6502790d:	jmp    0x65028388
    65027912:	mov    eax,DWORD PTR [rsp+0x68]
    65027916:	lea    ecx,[rax+rax*4]
    65027919:	movsx  eax,r13b
    6502791d:	lea    eax,[rax+rcx*2-0x30]
    65027921:	mov    DWORD PTR [rsp+0x68],eax
    65027925:	jmp    0x65028388
    6502792a:	mov    r15d,r9d
    6502792d:	mov    DWORD PTR [rsp+0x48],r9d
    65027932:	jmp    0x65028388
    65027937:	cmp    r13b,0x2a
    6502793b:	jne    0x65027965
    6502793d:	mov    r15d,DWORD PTR [rdi]
    65027940:	add    rdi,0x8
    65027944:	test   r15d,r15d
    65027947:	mov    QWORD PTR [rsp+0x60],rdi
    6502794c:	mov    DWORD PTR [rsp+0x48],r15d
    65027951:	jns    0x65028388
    65027957:	or     r15d,0xffffffff
    6502795b:	mov    DWORD PTR [rsp+0x48],r15d
    65027960:	jmp    0x65028388
    65027965:	lea    ecx,[r15+r15*4]
    65027969:	movsx  eax,r13b
    6502796d:	lea    r15d,[rax+rcx*2-0x30]
    65027972:	mov    DWORD PTR [rsp+0x48],r15d
    65027977:	jmp    0x65028388
    6502797c:	cmp    r13b,0x49
    65027980:	je     0x650279db
    65027982:	cmp    r13b,0x68
    65027986:	je     0x650279cd
    65027988:	cmp    r13b,0x6c
    6502798c:	je     0x650279a7
    6502798e:	cmp    r13b,0x77
    65027992:	jne    0x65028388
    65027998:	bts    r14d,0xb
    6502799d:	mov    DWORD PTR [rsp+0x40],r14d
    650279a2:	jmp    0x65028388
    650279a7:	cmp    BYTE PTR [rsi],0x6c
    650279aa:	jne    0x650279bf
    650279ac:	add    rsi,0x1
    650279b0:	bts    r14d,0xc
    650279b5:	mov    DWORD PTR [rsp+0x40],r14d
    650279ba:	jmp    0x65028388
    650279bf:	or     r14d,0x10
    650279c3:	mov    DWORD PTR [rsp+0x40],r14d
    650279c8:	jmp    0x65028388
    650279cd:	or     r14d,0x20
    650279d1:	mov    DWORD PTR [rsp+0x40],r14d
    650279d6:	jmp    0x65028388
    650279db:	movzx  eax,BYTE PTR [rsi]
    650279de:	bts    r14d,0xf
    650279e3:	cmp    al,0x36
    650279e5:	mov    DWORD PTR [rsp+0x40],r14d
    650279ea:	jne    0x65027a05
    650279ec:	cmp    BYTE PTR [rsi+0x1],0x34
    650279f0:	jne    0x65027a05
    650279f2:	add    rsi,0x2
    650279f6:	bts    r14d,0xf
    650279fb:	mov    DWORD PTR [rsp+0x40],r14d
    65027a00:	jmp    0x65028388
    65027a05:	cmp    al,0x33
    65027a07:	jne    0x65027a22
    65027a09:	cmp    BYTE PTR [rsi+0x1],0x32
    65027a0d:	jne    0x65027a22
    65027a0f:	add    rsi,0x2
    65027a13:	btr    r14d,0xf
    65027a18:	mov    DWORD PTR [rsp+0x40],r14d
    65027a1d:	jmp    0x65028388
    65027a22:	cmp    al,0x64
    65027a24:	je     0x65028388
    65027a2a:	cmp    al,0x69
    65027a2c:	je     0x65028388
    65027a32:	cmp    al,0x6f
    65027a34:	je     0x65028388
    65027a3a:	cmp    al,0x75
    65027a3c:	je     0x65028388
    65027a42:	cmp    al,0x78
    65027a44:	je     0x65028388
    65027a4a:	cmp    al,0x58
    65027a4c:	je     0x65028388
    65027a52:	mov    DWORD PTR [rsp+0x6c],r9d
    65027a57:	movzx  edi,r13b
    65027a5b:	lea    rdx,[rsp+0x78]
    65027a60:	mov    DWORD PTR [rsp+0x4c],r9d
    65027a65:	mov    ecx,edi
    65027a67:	call   0x65028d00
    65027a6c:	test   eax,eax
    65027a6e:	je     0x65027ac5
    65027a70:	test   BYTE PTR [r12+0x18],0x40
    65027a76:	je     0x65027a85
    65027a78:	cmp    QWORD PTR [r12+0x10],0x0
    65027a7e:	jne    0x65027a85
    65027a80:	add    ebp,0x1
    65027a83:	jmp    0x65027ab5
    65027a85:	add    DWORD PTR [r12+0x8],0xffffffff
    65027a8b:	js     0x65027a9b
    65027a8d:	mov    rax,QWORD PTR [r12]
    65027a91:	mov    BYTE PTR [rax],r13b
    65027a94:	add    QWORD PTR [r12],0x1
    65027a99:	jmp    0x65027aa9
    65027a9b:	movsx  ecx,r13b
    65027a9f:	mov    rdx,r12
    65027aa2:	call   0x65023dc0
    65027aa7:	mov    edi,eax
    65027aa9:	cmp    edi,0xffffffff
    65027aac:	jne    0x65027ab2
    65027aae:	or     ebp,edi
    65027ab0:	jmp    0x65027ab5
    65027ab2:	add    ebp,0x1
    65027ab5:	mov    r13b,BYTE PTR [rsi]
    65027ab8:	add    rsi,0x1
    65027abc:	test   r13b,r13b
    65027abf:	je     0x6502839a
    65027ac5:	test   BYTE PTR [r12+0x18],0x40
    65027acb:	je     0x65027af6
    65027acd:	cmp    QWORD PTR [r12+0x10],0x0
    65027ad3:	jne    0x65027af6
    65027ad5:	mov    r8d,DWORD PTR [rsp+0x6c]
    65027ada:	add    ebp,0x1
    65027add:	lea    r10,[rip+0xfffffffffffd851c]        # 0x65000000
    65027ae4:	mov    DWORD PTR [rsp+0x44],ebp
    65027ae8:	xor    r9d,r9d
    65027aeb:	mov    r11d,0x200
    65027af1:	jmp    0x65028388
    65027af6:	add    DWORD PTR [r12+0x8],0xffffffff
    65027afc:	js     0x65027b10
    65027afe:	mov    rax,QWORD PTR [r12]
    65027b02:	mov    BYTE PTR [rax],r13b
    65027b05:	add    QWORD PTR [r12],0x1
    65027b0a:	movzx  eax,r13b
    65027b0e:	jmp    0x65027b1c
    65027b10:	movsx  ecx,r13b
    65027b14:	mov    rdx,r12
    65027b17:	call   0x65023dc0
    65027b1c:	cmp    eax,0xffffffff
    65027b1f:	jne    0x65027b41
    65027b21:	mov    r8d,DWORD PTR [rsp+0x6c]
    65027b26:	or     ebp,eax
    65027b28:	lea    r10,[rip+0xfffffffffffd84d1]        # 0x65000000
    65027b2f:	mov    DWORD PTR [rsp+0x44],ebp
    65027b33:	xor    r9d,r9d
    65027b36:	mov    r11d,0x200
    65027b3c:	jmp    0x65028388
    65027b41:	mov    r8d,DWORD PTR [rsp+0x6c]
    65027b46:	add    ebp,0x1
    65027b49:	lea    r10,[rip+0xfffffffffffd84b0]        # 0x65000000
    65027b50:	mov    DWORD PTR [rsp+0x44],ebp
    65027b54:	xor    r9d,r9d
    65027b57:	mov    r11d,0x200
    65027b5d:	jmp    0x65028388
    65027b62:	movsx  eax,r13b
    65027b66:	add    eax,0xffffffbf
    65027b69:	cmp    eax,0x37
    65027b6c:	ja     0x650280a5
    65027b72:	cdqe   
    65027b74:	movzx  eax,BYTE PTR [r10+rax*1+0x28484]
    65027b7d:	mov    ecx,DWORD PTR [r10+rax*4+0x28448]
    65027b85:	add    rcx,r10
    65027b88:	jmp    rcx
    65027b8a:	test   r14d,0x830
    65027b91:	jne    0x65027b9d
    65027b93:	bts    r14d,0xb
    65027b98:	mov    DWORD PTR [rsp+0x40],r14d
    65027b9d:	test   r14d,0x810
    65027ba4:	je     0x65027be5
    65027ba6:	movzx  r9d,WORD PTR [rdi]
    65027baa:	add    rdi,0x8
    65027bae:	lea    rdx,[rsp+0xc0]
    65027bb6:	lea    rcx,[rsp+0x50]
    65027bbb:	mov    r8,r11
    65027bbe:	mov    QWORD PTR [rsp+0x60],rdi
    65027bc3:	call   0x6502d360
    65027bc8:	test   eax,eax
    65027bca:	je     0x65027c00
    65027bcc:	mov    esi,DWORD PTR [rsp+0x4c]
    65027bd0:	mov    DWORD PTR [rsp+0x70],0x1
    65027bd8:	lea    rbx,[rsp+0xc0]
    65027be0:	jmp    0x650280b5
    65027be5:	movzx  eax,BYTE PTR [rdi]
    65027be8:	add    rdi,0x8
    65027bec:	mov    DWORD PTR [rsp+0x50],0x1
    65027bf4:	mov    BYTE PTR [rsp+0xc0],al
    65027bfb:	mov    QWORD PTR [rsp+0x60],rdi
    65027c00:	mov    esi,DWORD PTR [rsp+0x4c]
    65027c04:	lea    rbx,[rsp+0xc0]
    65027c0c:	jmp    0x650280b5
    65027c11:	mov    rax,QWORD PTR [rdi]
    65027c14:	add    rdi,0x8
    65027c18:	test   rax,rax
    65027c1b:	mov    QWORD PTR [rsp+0x60],rdi
    65027c20:	je     0x65027c60
    65027c22:	mov    rbx,QWORD PTR [rax+0x8]
    65027c26:	test   rbx,rbx
    65027c29:	je     0x65027c60
    65027c2b:	bt     r14d,0xb
    65027c30:	jae    0x65027c4c
    65027c32:	movsx  eax,WORD PTR [rax]
    65027c35:	mov    esi,0x1
    65027c3a:	cdq    
    65027c3b:	mov    DWORD PTR [rsp+0x4c],esi
    65027c3f:	sub    eax,edx
    65027c41:	sar    eax,1
    65027c43:	mov    DWORD PTR [rsp+0x50],eax
    65027c47:	jmp    0x650280b5
    65027c4c:	movsx  eax,WORD PTR [rax]
    65027c4f:	mov    esi,r9d
    65027c52:	mov    DWORD PTR [rsp+0x4c],r9d
    65027c57:	mov    DWORD PTR [rsp+0x50],eax
    65027c5b:	jmp    0x650280b5
    65027c60:	mov    rbx,QWORD PTR [rip+0x1ae79]        # 0x65042ae0
    65027c67:	mov    esi,DWORD PTR [rsp+0x4c]
    65027c6b:	or     rcx,0xffffffffffffffff
    65027c6f:	xor    eax,eax
    65027c71:	mov    rdi,rbx
    65027c74:	repnz scas al,BYTE PTR es:[rdi]
    65027c76:	not    rcx
    65027c79:	sub    rcx,0x1
    65027c7d:	mov    DWORD PTR [rsp+0x50],ecx
    65027c81:	jmp    0x650280b5
    65027c86:	test   r14d,0x830
    65027c8d:	jne    0x65027c99
    65027c8f:	bts    r14d,0xb
    65027c94:	mov    DWORD PTR [rsp+0x40],r14d
    65027c99:	mov    rbx,QWORD PTR [rdi]
    65027c9c:	cmp    r15d,0xffffffff
    65027ca0:	mov    eax,r15d
    65027ca3:	mov    ecx,0x7fffffff
    65027ca8:	cmove  eax,ecx
    65027cab:	add    rdi,0x8
    65027caf:	test   r14d,0x810
    65027cb6:	mov    QWORD PTR [rsp+0x60],rdi
    65027cbb:	je     0x65027cf7
    65027cbd:	test   rbx,rbx
    65027cc0:	mov    esi,0x1
    65027cc5:	cmove  rbx,QWORD PTR [rip+0x1ae1b]        # 0x65042ae8
    65027ccd:	test   eax,eax
    65027ccf:	mov    DWORD PTR [rsp+0x4c],esi
    65027cd3:	mov    rcx,rbx
    65027cd6:	je     0x65027ce8
    65027cd8:	sub    eax,esi
    65027cda:	cmp    WORD PTR [rcx],0x0
    65027cde:	je     0x65027ce8
    65027ce0:	add    rcx,0x2
    65027ce4:	test   eax,eax
    65027ce6:	jne    0x65027cd8
    65027ce8:	sub    rcx,rbx
    65027ceb:	sar    rcx,1
    65027cee:	mov    DWORD PTR [rsp+0x50],ecx
    65027cf2:	jmp    0x650280b5
    65027cf7:	test   rbx,rbx
    65027cfa:	cmove  rbx,QWORD PTR [rip+0x1adde]        # 0x65042ae0
    65027d02:	test   eax,eax
    65027d04:	mov    rcx,rbx
    65027d07:	je     0x65027d20
    65027d09:	data16 xchg ax,ax
    65027d0c:	data16 data16 xchg ax,ax
    65027d10:	sub    eax,0x1
    65027d13:	cmp    BYTE PTR [rcx],0x0
    65027d16:	je     0x65027d20
    65027d18:	add    rcx,0x1
    65027d1c:	test   eax,eax
    65027d1e:	jne    0x65027d10
    65027d20:	mov    esi,DWORD PTR [rsp+0x4c]
    65027d24:	sub    ecx,ebx
    65027d26:	mov    DWORD PTR [rsp+0x50],ecx
    65027d2a:	jmp    0x650280b5
    65027d2f:	add    rdi,0x8
    65027d33:	mov    QWORD PTR [rsp+0x60],rdi
    65027d38:	mov    rdi,QWORD PTR [rdi-0x8]
    65027d3c:	call   0x6502b8d0
    65027d41:	test   eax,eax
    65027d43:	je     0x6502839a
    65027d49:	test   r14b,0x20
    65027d4d:	je     0x65027d5f
    65027d4f:	mov    WORD PTR [rdi],bp
    65027d52:	mov    DWORD PTR [rsp+0x70],0x1
    65027d5a:	jmp    0x65028325
    65027d5f:	mov    DWORD PTR [rdi],ebp
    65027d61:	mov    DWORD PTR [rsp+0x70],0x1
    65027d69:	jmp    0x65028325
    65027d6e:	mov    DWORD PTR [rsp+0x98],0x1
    65027d79:	add    r13b,0x20
    65027d7d:	or     r14d,0x40
    65027d81:	test   r15d,r15d
    65027d84:	lea    rbx,[rsp+0xc0]
    65027d8c:	mov    DWORD PTR [rsp+0x40],r14d
    65027d91:	mov    esi,r11d
    65027d94:	jns    0x65027da3
    65027d96:	mov    r15d,0x6
    65027d9c:	mov    DWORD PTR [rsp+0x48],r15d
    65027da1:	jmp    0x65027e01
    65027da3:	test   r15d,r15d
    65027da6:	jne    0x65027dbb
    65027da8:	cmp    r13b,0x67
    65027dac:	jne    0x65027e01
    65027dae:	mov    r15d,0x1
    65027db4:	mov    DWORD PTR [rsp+0x48],r15d
    65027db9:	jmp    0x65027e01
    65027dbb:	cmp    r15d,r11d
    65027dbe:	jle    0x65027dca
    65027dc0:	mov    r15d,r11d
    65027dc3:	mov    DWORD PTR [rsp+0x48],r11d
    65027dc8:	jmp    0x65027dd3
    65027dca:	cmp    r15d,0xa3
    65027dd1:	jle    0x65027e01
    65027dd3:	lea    edi,[r15+0x15d]
    65027dda:	movsxd rcx,edi
    65027ddd:	call   0x65022910
    65027de2:	test   rax,rax
    65027de5:	mov    QWORD PTR [rsp+0xa0],rax
    65027ded:	je     0x65027df6
    65027def:	mov    rbx,rax
    65027df2:	mov    esi,edi
    65027df4:	jmp    0x65027e01
    65027df6:	mov    r15d,0xa3
    65027dfc:	mov    DWORD PTR [rsp+0x48],r15d
    65027e01:	mov    rax,QWORD PTR [rsp+0x60]
    65027e06:	mov    rcx,QWORD PTR [rip+0x1b0d3]        # 0x65042ee0
    65027e0d:	movsx  edi,r13b
    65027e11:	add    rax,0x8
    65027e15:	movsxd rsi,esi
    65027e18:	mov    QWORD PTR [rsp+0x60],rax
    65027e1d:	mov    rax,QWORD PTR [rax-0x8]
    65027e21:	mov    QWORD PTR [rsp+0xb0],rax
    65027e29:	call   0x65020570
    65027e2e:	lea    rcx,[rsp+0x78]
    65027e33:	mov    QWORD PTR [rsp+0x30],rcx
    65027e38:	mov    ecx,DWORD PTR [rsp+0x98]
    65027e3f:	mov    r9d,edi
    65027e42:	mov    DWORD PTR [rsp+0x28],ecx
    65027e46:	lea    rcx,[rsp+0xb0]
    65027e4e:	mov    r8,rsi
    65027e51:	mov    rdx,rbx
    65027e54:	mov    DWORD PTR [rsp+0x20],r15d
    65027e59:	call   rax
    65027e5b:	mov    edi,r14d
    65027e5e:	and    edi,0x80
    65027e64:	je     0x65027e81
    65027e66:	test   r15d,r15d
    65027e69:	jne    0x65027e81
    65027e6b:	mov    rcx,QWORD PTR [rip+0x1b086]        # 0x65042ef8
    65027e72:	call   0x65020570
    65027e77:	lea    rdx,[rsp+0x78]
    65027e7c:	mov    rcx,rbx
    65027e7f:	call   rax
    65027e81:	cmp    r13b,0x67
    65027e85:	jne    0x65027ea1
    65027e87:	test   edi,edi
    65027e89:	jne    0x65027ea1
    65027e8b:	mov    rcx,QWORD PTR [rip+0x1b05e]        # 0x65042ef0
    65027e92:	call   0x65020570
    65027e97:	lea    rdx,[rsp+0x78]
    65027e9c:	mov    rcx,rbx
    65027e9f:	call   rax
    65027ea1:	cmp    BYTE PTR [rbx],0x2d
    65027ea4:	jne    0x65027eb4
    65027ea6:	bts    r14d,0x8
    65027eab:	add    rbx,0x1
    65027eaf:	mov    DWORD PTR [rsp+0x40],r14d
    65027eb4:	mov    esi,DWORD PTR [rsp+0x4c]
    65027eb8:	or     rcx,0xffffffffffffffff
    65027ebc:	xor    eax,eax
    65027ebe:	mov    rdi,rbx
    65027ec1:	repnz scas al,BYTE PTR es:[rdi]
    65027ec3:	not    rcx
    65027ec6:	sub    rcx,0x1
    65027eca:	mov    DWORD PTR [rsp+0x50],ecx
    65027ece:	jmp    0x650280b5
    65027ed3:	mov    eax,DWORD PTR [rsp+0x54]
    65027ed7:	or     r14d,0x40
    65027edb:	mov    r8d,0xa
    65027ee1:	mov    DWORD PTR [rsp+0x40],r14d
    65027ee6:	jmp    0x65027f59
    65027ee8:	mov    eax,DWORD PTR [rsp+0x54]
    65027eec:	mov    r8d,0xa
    65027ef2:	jmp    0x65027f59
    65027ef4:	bts    r14d,0xf
    65027ef9:	mov    r15d,0x10
    65027eff:	mov    DWORD PTR [rsp+0x40],r14d
    65027f04:	mov    eax,0x7
    65027f09:	mov    DWORD PTR [rsp+0x74],eax
    65027f0d:	jmp    0x65027f18
    65027f0f:	mov    eax,0x27
    65027f14:	mov    DWORD PTR [rsp+0x74],eax
    65027f18:	test   r14b,r14b
    65027f1b:	mov    r8d,0x10
    65027f21:	jns    0x65027f4f
    65027f23:	add    al,0x51
    65027f25:	mov    BYTE PTR [rsp+0x58],0x30
    65027f2a:	mov    BYTE PTR [rsp+0x59],al
    65027f2e:	lea    eax,[r8-0xe]
    65027f32:	jmp    0x65027f59
    65027f34:	test   r14b,r14b
    65027f37:	mov    r8d,0x8
    65027f3d:	jns    0x65027f55
    65027f3f:	mov    eax,DWORD PTR [rsp+0x54]
    65027f43:	bts    r14d,0x9
    65027f48:	mov    DWORD PTR [rsp+0x40],r14d
    65027f4d:	jmp    0x65027f59
    65027f4f:	mov    eax,DWORD PTR [rsp+0x54]
    65027f53:	jmp    0x65027f59
    65027f55:	mov    eax,DWORD PTR [rsp+0x54]
    65027f59:	bt     r14d,0xf
    65027f5e:	jae    0x65027f6f
    65027f60:	add    rdi,0x8
    65027f64:	mov    QWORD PTR [rsp+0x60],rdi
    65027f69:	mov    rdi,QWORD PTR [rdi-0x8]
    65027f6d:	jmp    0x65027fd1
    65027f6f:	bt     r14d,0xc
    65027f74:	jae    0x65027f85
    65027f76:	add    rdi,0x8
    65027f7a:	mov    QWORD PTR [rsp+0x60],rdi
    65027f7f:	mov    rdi,QWORD PTR [rdi-0x8]
    65027f83:	jmp    0x65027fd1
    65027f85:	test   r14b,0x20
    65027f89:	je     0x65027fb0
    65027f8b:	test   r14b,0x40
    65027f8f:	je     0x65027fa1
    65027f91:	add    rdi,0x8
    65027f95:	mov    QWORD PTR [rsp+0x60],rdi
    65027f9a:	movsx  rdi,WORD PTR [rdi-0x8]
    65027f9f:	jmp    0x65027fd1
    65027fa1:	add    rdi,0x8
    65027fa5:	mov    QWORD PTR [rsp+0x60],rdi
    65027faa:	movzx  edi,WORD PTR [rdi-0x8]
    65027fae:	jmp    0x65027fd1
    65027fb0:	test   r14b,0x40
    65027fb4:	je     0x65027fc5
    65027fb6:	add    rdi,0x8
    65027fba:	mov    QWORD PTR [rsp+0x60],rdi
    65027fbf:	movsxd rdi,DWORD PTR [rdi-0x8]
    65027fc3:	jmp    0x65027fd1
    65027fc5:	add    rdi,0x8
    65027fc9:	mov    QWORD PTR [rsp+0x60],rdi
    65027fce:	mov    edi,DWORD PTR [rdi-0x8]
    65027fd1:	test   r14b,0x40
    65027fd5:	je     0x65027fe9
    65027fd7:	test   rdi,rdi
    65027fda:	jns    0x65027fe9
    65027fdc:	neg    rdi
    65027fdf:	bts    r14d,0x8
    65027fe4:	mov    DWORD PTR [rsp+0x40],r14d
    65027fe9:	bt     r14d,0xf
    65027fee:	jb     0x65027ff9
    65027ff0:	bt     r14d,0xc
    65027ff5:	jb     0x65027ff9
    65027ff7:	mov    edi,edi
    65027ff9:	test   r15d,r15d
    65027ffc:	jns    0x65028006
    65027ffe:	mov    r15d,0x1
    65028004:	jmp    0x65028016
    65028006:	and    r14d,0xfffffff7
    6502800a:	cmp    r15d,r11d
    6502800d:	cmovg  r15d,r11d
    65028011:	mov    DWORD PTR [rsp+0x40],r14d
    65028016:	mov    r14d,DWORD PTR [rsp+0x74]
    6502801b:	test   rdi,rdi
    6502801e:	lea    rbx,[rsp+0x2bf]
    65028026:	cmove  eax,r9d
    6502802a:	mov    DWORD PTR [rsp+0x54],eax
    6502802e:	xchg   ax,ax
    65028030:	mov    ecx,r15d
    65028033:	sub    r15d,0x1
    65028037:	test   ecx,ecx
    65028039:	jg     0x65028040
    6502803b:	test   rdi,rdi
    6502803e:	je     0x65028061
    65028040:	xor    edx,edx
    65028042:	mov    rax,rdi
    65028045:	movsxd rcx,r8d
    65028048:	div    rcx
    6502804b:	mov    rdi,rax
    6502804e:	lea    eax,[rdx+0x30]
    65028051:	cmp    eax,0x39
    65028054:	jle    0x65028059
    65028056:	add    eax,r14d
    65028059:	mov    BYTE PTR [rbx],al
    6502805b:	sub    rbx,0x1
    6502805f:	jmp    0x65028030
    65028061:	mov    r14d,DWORD PTR [rsp+0x40]
    65028066:	lea    rax,[rsp+0x2bf]
    6502806e:	mov    DWORD PTR [rsp+0x48],r15d
    65028073:	sub    eax,ebx
    65028075:	add    rbx,0x1
    65028079:	bt     r14d,0x9
    6502807e:	mov    DWORD PTR [rsp+0x50],eax
    65028082:	jae    0x650280b1
    65028084:	test   eax,eax
    65028086:	je     0x6502808d
    65028088:	cmp    BYTE PTR [rbx],0x30
    6502808b:	je     0x650280ab
    6502808d:	mov    esi,DWORD PTR [rsp+0x4c]
    65028091:	sub    rbx,0x1
    65028095:	add    DWORD PTR [rsp+0x50],0x1
    6502809a:	mov    BYTE PTR [rbx],0x30
    6502809d:	jmp    0x650280b5
    6502809f:	mov    esi,DWORD PTR [rsp+0x4c]
    650280a3:	jmp    0x650280b5
    650280a5:	mov    esi,DWORD PTR [rsp+0x4c]
    650280a9:	jmp    0x650280b5
    650280ab:	mov    esi,DWORD PTR [rsp+0x4c]
    650280af:	jmp    0x650280b5
    650280b1:	mov    esi,DWORD PTR [rsp+0x4c]
    650280b5:	cmp    DWORD PTR [rsp+0x70],0x0
    650280ba:	jne    0x65028325
    650280c0:	test   r14b,0x40
    650280c4:	je     0x65028109
    650280c6:	bt     r14d,0x8
    650280cb:	jae    0x650280dd
    650280cd:	mov    edi,0x1
    650280d2:	mov    BYTE PTR [rsp+0x58],0x2d
    650280d7:	mov    DWORD PTR [rsp+0x54],edi
    650280db:	jmp    0x65028113
    650280dd:	test   r14b,0x1
    650280e1:	je     0x650280f3
    650280e3:	mov    edi,0x1
    650280e8:	mov    BYTE PTR [rsp+0x58],0x2b
    650280ed:	mov    DWORD PTR [rsp+0x54],edi
    650280f1:	jmp    0x65028113
    650280f3:	test   r14b,0x2
    650280f7:	je     0x6502810f
    650280f9:	mov    edi,0x1
    650280fe:	mov    BYTE PTR [rsp+0x58],0x20
    65028103:	mov    DWORD PTR [rsp+0x54],edi
    65028107:	jmp    0x65028113
    65028109:	mov    edi,DWORD PTR [rsp+0x54]
    6502810d:	jmp    0x65028113
    6502810f:	mov    edi,DWORD PTR [rsp+0x54]
    65028113:	mov    r15d,DWORD PTR [rsp+0x68]
    65028118:	sub    r15d,DWORD PTR [rsp+0x50]
    6502811d:	sub    r15d,edi
    65028120:	test   r14b,0xc
    65028124:	jne    0x65028138
    65028126:	lea    r9,[rsp+0x44]
    6502812b:	mov    r8,r12
    6502812e:	mov    edx,r15d
    65028131:	mov    cl,0x20
    65028133:	call   0x65027370
    65028138:	lea    r9,[rsp+0x44]
    6502813d:	lea    rcx,[rsp+0x58]
    65028142:	mov    r8,r12
    65028145:	mov    edx,edi
    65028147:	call   0x65027400
    6502814c:	test   r14b,0x8
    65028150:	je     0x6502816a
    65028152:	test   r14b,0x4
    65028156:	jne    0x6502816a
    65028158:	lea    r9,[rsp+0x44]
    6502815d:	mov    r8,r12
    65028160:	mov    edx,r15d
    65028163:	mov    cl,0x30
    65028165:	call   0x65027370
    6502816a:	test   esi,esi
    6502816c:	mov    r13d,DWORD PTR [rsp+0x50]
    65028171:	je     0x650282db
    65028177:	test   r13d,r13d
    6502817a:	jle    0x650282db
    65028180:	mov    ebp,DWORD PTR [rsp+0x44]
    65028184:	mov    r14,rbx
    65028187:	data16 xchg ax,ax
    6502818a:	data16 xchg ax,ax
    6502818d:	data16 xchg ax,ax
    65028190:	movzx  r9d,WORD PTR [r14]
    65028194:	lea    rdx,[rsp+0x2c0]
    6502819c:	lea    rcx,[rsp+0xa8]
    650281a4:	mov    r8d,0x6
    650281aa:	sub    r13d,0x1
    650281ae:	add    r14,0x2
    650281b2:	call   0x6502d360
    650281b7:	test   eax,eax
    650281b9:	jne    0x650282cd
    650281bf:	mov    edi,DWORD PTR [rsp+0xa8]
    650281c6:	test   edi,edi
    650281c8:	je     0x650282cd
    650281ce:	test   BYTE PTR [r12+0x18],0x40
    650281d4:	lea    rsi,[rsp+0x2c0]
    650281dc:	je     0x650281f1
    650281de:	cmp    QWORD PTR [r12+0x10],0x0
    650281e4:	jne    0x650281f1
    650281e6:	add    ebp,edi
    650281e8:	mov    DWORD PTR [rsp+0x44],ebp
    650281ec:	jmp    0x650282a3
    650281f1:	test   edi,edi
    650281f3:	jle    0x650282a3
    650281f9:	data16 xchg ax,ax
    650281fc:	data16 data16 xchg ax,ax
    65028200:	movzx  ecx,BYTE PTR [rsi]
    65028203:	sub    edi,0x1
    65028206:	test   BYTE PTR [r12+0x18],0x40
    6502820c:	je     0x6502821f
    6502820e:	cmp    QWORD PTR [r12+0x10],0x0
    65028214:	jne    0x6502821f
    65028216:	add    ebp,0x1
    65028219:	mov    DWORD PTR [rsp+0x44],ebp
    6502821d:	jmp    0x65028256
    6502821f:	add    DWORD PTR [r12+0x8],0xffffffff
    65028225:	js     0x65028237
    65028227:	mov    rax,QWORD PTR [r12]
    6502822b:	mov    BYTE PTR [rax],cl
    6502822d:	add    QWORD PTR [r12],0x1
    65028232:	movzx  eax,cl
    65028235:	jmp    0x65028242
    65028237:	movsx  ecx,cl
    6502823a:	mov    rdx,r12
    6502823d:	call   0x65023dc0
    65028242:	cmp    eax,0xffffffff
    65028245:	jne    0x6502824f
    65028247:	or     ebp,eax
    65028249:	mov    DWORD PTR [rsp+0x44],ebp
    6502824d:	jmp    0x65028256
    6502824f:	add    ebp,0x1
    65028252:	mov    DWORD PTR [rsp+0x44],ebp
    65028256:	add    rsi,0x1
    6502825a:	cmp    ebp,0xffffffff
    6502825d:	jne    0x6502829b
    6502825f:	call   0x650202b0
    65028264:	cmp    DWORD PTR [rax],0x2a
    65028267:	jne    0x650282a3
    65028269:	test   BYTE PTR [r12+0x18],0x40
    6502826f:	je     0x65028281
    65028271:	cmp    QWORD PTR [r12+0x10],0x0
    65028277:	jne    0x65028281
    65028279:	xor    ebp,ebp
    6502827b:	mov    DWORD PTR [rsp+0x44],ebp
    6502827f:	jmp    0x6502829b
    65028281:	add    DWORD PTR [r12+0x8],0xffffffff
    65028287:	js     0x650282b3
    65028289:	mov    rax,QWORD PTR [r12]
    6502828d:	mov    BYTE PTR [rax],0x3f
    65028290:	add    QWORD PTR [r12],0x1
    65028295:	xor    ebp,ebp
    65028297:	mov    DWORD PTR [rsp+0x44],ebp
    6502829b:	test   edi,edi
    6502829d:	jg     0x65028200
    650282a3:	test   r13d,r13d
    650282a6:	jne    0x65028190
    650282ac:	mov    r14d,DWORD PTR [rsp+0x40]
    650282b1:	jmp    0x650282f2
    650282b3:	mov    rdx,r12
    650282b6:	mov    ecx,0x3f
    650282bb:	call   0x65023dc0
    650282c0:	cmp    eax,0xffffffff
    650282c3:	jne    0x65028295
    650282c5:	or     ebp,eax
    650282c7:	mov    DWORD PTR [rsp+0x44],ebp
    650282cb:	jmp    0x6502829b
    650282cd:	mov    r15d,DWORD PTR [rsp+0x48]
    650282d2:	or     ebp,0xffffffff
    650282d5:	mov    DWORD PTR [rsp+0x44],ebp
    650282d9:	jmp    0x65028325
    650282db:	lea    r9,[rsp+0x44]
    650282e0:	mov    r8,r12
    650282e3:	mov    edx,r13d
    650282e6:	mov    rcx,rbx
    650282e9:	call   0x65027400
    650282ee:	mov    ebp,DWORD PTR [rsp+0x44]
    650282f2:	test   ebp,ebp
    650282f4:	js     0x65028319
    650282f6:	test   r14b,0x4
    650282fa:	je     0x65028320
    650282fc:	lea    r9,[rsp+0x44]
    65028301:	mov    r8,r12
    65028304:	mov    edx,r15d
    65028307:	mov    cl,0x20
    65028309:	call   0x65027370
    6502830e:	mov    ebp,DWORD PTR [rsp+0x44]
    65028312:	mov    r15d,DWORD PTR [rsp+0x48]
    65028317:	jmp    0x65028325
    65028319:	mov    r15d,DWORD PTR [rsp+0x48]
    6502831e:	jmp    0x65028325
    65028320:	mov    r15d,DWORD PTR [rsp+0x48]
    65028325:	mov    rax,QWORD PTR [rsp+0xa0]
    6502832d:	test   rax,rax
    65028330:	je     0x65028366
    65028332:	mov    rcx,rax
    65028335:	call   0x6501fa90
    6502833a:	mov    r14d,DWORD PTR [rsp+0x40]
    6502833f:	mov    rsi,QWORD PTR [rsp+0xb8]
    65028347:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502834c:	xor    r9d,r9d
    6502834f:	lea    r10,[rip+0xfffffffffffd7caa]        # 0x65000000
    65028356:	mov    QWORD PTR [rsp+0xa0],r9
    6502835e:	mov    r11d,0x200
    65028364:	jmp    0x65028388
    65028366:	mov    r14d,DWORD PTR [rsp+0x40]
    6502836b:	mov    rsi,QWORD PTR [rsp+0xb8]
    65028373:	mov    r8d,DWORD PTR [rsp+0x6c]
    65028378:	xor    r9d,r9d
    6502837b:	lea    r10,[rip+0xfffffffffffd7c7e]        # 0x65000000
    65028382:	mov    r11d,0x200
    65028388:	mov    r13b,BYTE PTR [rsi]
    6502838b:	test   r13b,r13b
    6502838e:	je     0x650283db
    65028390:	mov    rdi,QWORD PTR [rsp+0x60]
    65028395:	jmp    0x650277e0
    6502839a:	call   0x650202b0
    6502839f:	xor    r9d,r9d
    650283a2:	xor    r8d,r8d
    650283a5:	xor    edx,edx
    650283a7:	xor    ecx,ecx
    650283a9:	mov    QWORD PTR [rsp+0x20],0x0
    650283b2:	mov    DWORD PTR [rax],0x16
    650283b8:	call   0x6501d850
    650283bd:	cmp    BYTE PTR [rsp+0x90],0x0
    650283c5:	je     0x650283d6
    650283c7:	mov    rax,QWORD PTR [rsp+0x88]
    650283cf:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650283d6:	or     eax,0xffffffff
    650283d9:	jmp    0x650283f6
    650283db:	mov    rdx,QWORD PTR [rsp+0x88]
    650283e3:	cmp    BYTE PTR [rsp+0x90],0x0
    650283eb:	je     0x650283f4
    650283ed:	and    DWORD PTR [rdx+0xc8],0xfffffffd
    650283f4:	mov    eax,ebp
    650283f6:	mov    rbx,QWORD PTR [rsp+0x2e0]
    650283fe:	mov    r13,QWORD PTR [rsp+0x2d8]
    65028406:	mov    rcx,QWORD PTR [rsp+0x2c8]
    6502840e:	xor    rcx,rsp
    65028411:	call   0x6501e4e0
    65028416:	add    rsp,0x2e8
    6502841d:	pop    r15
    6502841f:	pop    r14
    65028421:	pop    r12
    65028423:	pop    rdi
    65028424:	pop    rsi
    65028425:	pop    rbp
    65028426:	ret    
    65028427:	nop
    65028428:	push   rdi
    65028429:	jp     0x6502842d
    6502842b:	add    BYTE PTR [rsi+0x78],al
    6502842e:	add    al,BYTE PTR [rax]
    65028430:	js     0x650284aa
    65028432:	add    al,BYTE PTR [rax]
    65028434:	loope  0x650284ae
    65028436:	add    al,BYTE PTR [rax]
    65028438:	sub    bh,BYTE PTR [rcx+0x2]
    6502843b:	add    BYTE PTR [rdi],dh
    6502843d:	jns    0x65028441
    6502843f:	add    BYTE PTR [rcx+rdi*2+0x2],bh
    65028443:	add    BYTE PTR [rdx+0x7b],ah
    65028446:	add    al,BYTE PTR [rax]
    65028448:	outs   dx,BYTE PTR ds:[rsi]
    65028449:	jge    0x6502844d
    6502844b:	add    BYTE PTR [rdx-0x79fffd85],cl
    65028451:	jl     0x65028455
    65028453:	add    BYTE PTR [rdi+rdi*2],al
    65028456:	add    al,BYTE PTR [rax]
    65028458:	adc    DWORD PTR [rdx+rax*1+0x0],edi
    6502845c:	jge    0x650284db
    6502845e:	add    al,BYTE PTR [rax]
    65028460:	popf   
    65028461:	jnp    0x65028465
    65028463:	add    bl,dl
    65028465:	jle    0x65028469
    65028467:	add    BYTE PTR [rdi],ch
    65028469:	jge    0x6502846d
    6502846b:	add    BYTE PTR [rdi+rdi*2],dh
    6502846e:	add    al,BYTE PTR [rax]
    65028470:	hlt    
    65028471:	jle    0x65028475
    65028473:	add    BYTE PTR [rcx-0x17fffd84],bl
    65028479:	jle    0x6502847d
    6502847b:	add    BYTE PTR [rdi],cl
    6502847d:	jg     0x65028481
    6502847f:	add    BYTE PTR [rdi+0x280],bl
    65028485:	(bad)  
    65028486:	add    DWORD PTR [rsi],ecx
    65028488:	add    BYTE PTR [rsi],cl
    6502848a:	add    BYTE PTR [rsi],cl
    6502848c:	(bad)  
    6502848d:	(bad)  
    6502848e:	(bad)  
    6502848f:	(bad)  
    65028490:	(bad)  
    65028491:	(bad)  
    65028492:	(bad)  
    65028493:	(bad)  
    65028494:	(bad)  
    65028495:	(bad)  
    65028496:	add    cl,BYTE PTR [rsi]
    65028498:	(bad)  
    65028499:	(bad)  
    6502849a:	(bad)  
    6502849b:	add    ecx,DWORD PTR [rsi]
    6502849d:	add    al,0xe
    6502849f:	(bad)  
    650284a0:	(bad)  
    650284a1:	(bad)  
    650284a2:	(bad)  
    650284a3:	(bad)  
    650284a4:	add    eax,0x507060e
    650284a9:	add    eax,0xe070e05
    650284ae:	(bad)  
    650284af:	(bad)  
    650284b0:	(bad)  
    650284b1:	or     BYTE PTR [rcx],cl
    650284b3:	or     cl,BYTE PTR [rsi]
    650284b5:	(bad)  
    650284b6:	or     ecx,DWORD PTR [rsi]
    650284b8:	or     al,0xe
    650284ba:	(bad)  
    650284bb:	or     eax,0xcccccccc
    650284c0:	mov    QWORD PTR [rsp+0x10],rsi
    650284c5:	push   rdi
    650284c6:	sub    rsp,0x60
    650284ca:	test   r9,r9
    650284cd:	mov    r10,r9
    650284d0:	mov    rsi,r8
    650284d3:	mov    rdi,rdx
    650284d6:	mov    r11,rcx
    650284d9:	jne    0x6502850a
    650284db:	call   0x650202b0
    650284e0:	xor    r9d,r9d
    650284e3:	xor    r8d,r8d
    650284e6:	mov    DWORD PTR [rax],0x16
    650284ec:	xor    eax,eax
    650284ee:	xor    edx,edx
    650284f0:	xor    ecx,ecx
    650284f2:	mov    QWORD PTR [rsp+0x20],rax
    650284f7:	call   0x6501d850
    650284fc:	or     eax,0xffffffff
    650284ff:	mov    rsi,QWORD PTR [rsp+0x78]
    65028504:	add    rsp,0x60
    65028508:	pop    rdi
    65028509:	ret    
    6502850a:	test   r8,r8
    6502850d:	je     0x65028514
    6502850f:	test   rdx,rdx
    65028512:	je     0x650284db
    65028514:	mov    r9,QWORD PTR [rsp+0x98]
    6502851c:	mov    ecx,0x7fffffff
    65028521:	mov    eax,r8d
    65028524:	cmp    r8,rcx
    65028527:	mov    r8,QWORD PTR [rsp+0x90]
    6502852f:	mov    QWORD PTR [rsp+0x40],rdx
    65028534:	cmova  eax,ecx
    65028537:	mov    QWORD PTR [rsp+0x30],rdx
    6502853c:	lea    rcx,[rsp+0x30]
    65028541:	mov    rdx,r10
    65028544:	mov    QWORD PTR [rsp+0x70],rbx
    65028549:	mov    DWORD PTR [rsp+0x48],0x42
    65028551:	mov    DWORD PTR [rsp+0x38],eax
    65028555:	call   r11
    65028558:	test   rdi,rdi
    6502855b:	mov    ebx,eax
    6502855d:	je     0x650285b8
    6502855f:	test   eax,eax
    65028561:	js     0x650285a7
    65028563:	sub    DWORD PTR [rsp+0x38],0x1
    65028568:	js     0x65028584
    6502856a:	mov    rax,QWORD PTR [rsp+0x30]
    6502856f:	mov    BYTE PTR [rax],0x0
    65028572:	mov    eax,ebx
    65028574:	mov    rbx,QWORD PTR [rsp+0x70]
    65028579:	mov    rsi,QWORD PTR [rsp+0x78]
    6502857e:	add    rsp,0x60
    65028582:	pop    rdi
    65028583:	ret    
    65028584:	lea    rdx,[rsp+0x30]
    65028589:	xor    ecx,ecx
    6502858b:	call   0x65023dc0
    65028590:	cmp    eax,0xffffffff
    65028593:	je     0x650285a7
    65028595:	mov    eax,ebx
    65028597:	mov    rbx,QWORD PTR [rsp+0x70]
    6502859c:	mov    rsi,QWORD PTR [rsp+0x78]
    650285a1:	add    rsp,0x60
    650285a5:	pop    rdi
    650285a6:	ret    
    650285a7:	xor    eax,eax
    650285a9:	mov    BYTE PTR [rdi+rsi*1-0x1],0x0
    650285ae:	cmp    DWORD PTR [rsp+0x38],eax
    650285b2:	setge  al
    650285b5:	add    eax,0xfffffffe
    650285b8:	mov    rbx,QWORD PTR [rsp+0x70]
    650285bd:	mov    rsi,QWORD PTR [rsp+0x78]
    650285c2:	add    rsp,0x60
    650285c6:	pop    rdi
    650285c7:	ret    
    650285c8:	int3   
    650285c9:	int3   
    650285ca:	int3   
    650285cb:	int3   
    650285cc:	int3   
    650285cd:	int3   
    650285ce:	int3   
    650285cf:	int3   
    650285d0:	rex push rbx
    650285d2:	sub    rsp,0x30
    650285d6:	test   r8,r8
    650285d9:	mov    rbx,rcx
    650285dc:	je     0x65028625
    650285de:	test   rcx,rcx
    650285e1:	je     0x65028625
    650285e3:	test   rdx,rdx
    650285e6:	je     0x65028625
    650285e8:	mov    rax,QWORD PTR [rsp+0x60]
    650285ed:	mov    QWORD PTR [rsp+0x28],rax
    650285f2:	mov    QWORD PTR [rsp+0x20],r9
    650285f7:	mov    r9,r8
    650285fa:	mov    r8,rdx
    650285fd:	mov    rdx,rcx
    65028600:	lea    rcx,[rip+0x36d9]        # 0x6502bce0
    65028607:	call   0x650284c0
    6502860c:	test   eax,eax
    6502860e:	jns    0x65028613
    65028610:	mov    BYTE PTR [rbx],0x0
    65028613:	cmp    eax,0xfffffffe
    65028616:	jne    0x6502864b
    65028618:	call   0x650202b0
    6502861d:	mov    DWORD PTR [rax],0x22
    65028623:	jmp    0x65028630
    65028625:	call   0x650202b0
    6502862a:	mov    DWORD PTR [rax],0x16
    65028630:	xor    r9d,r9d
    65028633:	xor    r8d,r8d
    65028636:	xor    edx,edx
    65028638:	xor    ecx,ecx
    6502863a:	mov    QWORD PTR [rsp+0x20],0x0
    65028643:	call   0x6501d850
    65028648:	or     eax,0xffffffff
    6502864b:	add    rsp,0x30
    6502864f:	pop    rbx
    65028650:	ret    
    65028651:	int3   
    65028652:	int3   
    65028653:	int3   
    65028654:	int3   
    65028655:	int3   
    65028656:	int3   
    65028657:	int3   
    65028658:	int3   
    65028659:	int3   
    6502865a:	int3   
    6502865b:	int3   
    6502865c:	int3   
    6502865d:	int3   
    6502865e:	int3   
    6502865f:	int3   
    65028660:	rex push rbp
    65028662:	push   r12
    65028664:	push   r13
    65028666:	push   r14
    65028668:	push   r15
    6502866a:	sub    rsp,0x60
    6502866e:	lea    rbp,[rsp+0x40]
    65028673:	mov    QWORD PTR [rbp+0x50],rbx
    65028677:	mov    QWORD PTR [rbp+0x58],rsi
    6502867b:	mov    QWORD PTR [rbp+0x60],rdi
    6502867f:	mov    rax,QWORD PTR [rip+0x19a9a]        # 0x65042120
    65028686:	xor    rax,rbp
    65028689:	mov    QWORD PTR [rbp+0x18],rax
    6502868d:	mov    r10d,DWORD PTR [rip+0x1bd38]        # 0x650443cc
    65028694:	xor    ebx,ebx
    65028696:	mov    r14,r9
    65028699:	test   r10d,r10d
    6502869c:	mov    QWORD PTR [rbp+0x8],r9
    650286a0:	mov    DWORD PTR [rbp+0x0],r8d
    650286a4:	mov    r15d,edx
    650286a7:	mov    DWORD PTR [rbp+0x10],edx
    650286aa:	mov    rdi,rcx
    650286ad:	jne    0x650286fa
    650286af:	lea    r9d,[rbx+0x1]
    650286b3:	lea    r8,[rip+0xe8ea]        # 0x65036fa4
    650286ba:	mov    edx,0x100
    650286bf:	xor    ecx,ecx
    650286c1:	mov    DWORD PTR [rsp+0x28],ebx
    650286c5:	mov    QWORD PTR [rsp+0x20],rbx
    650286ca:	call   QWORD PTR [rip+0xbbd8]        # 0x650342a8
    650286d0:	test   eax,eax
    650286d2:	je     0x650286da
    650286d4:	lea    r10d,[rbx+0x1]
    650286d8:	jmp    0x650286f3
    650286da:	call   QWORD PTR [rip+0xb998]        # 0x65034078
    650286e0:	mov    r10d,DWORD PTR [rip+0x1bce5]        # 0x650443cc
    650286e7:	mov    ecx,0x2
    650286ec:	cmp    eax,0x78
    650286ef:	cmove  r10d,ecx
    650286f3:	mov    DWORD PTR [rip+0x1bcd2],r10d        # 0x650443cc
    650286fa:	mov    r9d,DWORD PTR [rbp+0x70]
    650286fe:	test   r9d,r9d
    65028701:	jle    0x6502873f
    65028703:	mov    eax,r9d
    65028706:	mov    rcx,r14
    65028709:	data16 xchg ax,ax
    6502870c:	data16 data16 xchg ax,ax
    65028710:	sub    eax,0x1
    65028713:	cmp    BYTE PTR [rcx],bl
    65028715:	je     0x65028722
    65028717:	add    rcx,0x1
    6502871b:	test   eax,eax
    6502871d:	jne    0x65028710
    6502871f:	or     eax,0xffffffff
    65028722:	mov    ecx,r9d
    65028725:	sub    ecx,eax
    65028727:	sub    ecx,0x1
    6502872a:	cmp    ecx,r9d
    6502872d:	jge    0x65028739
    6502872f:	lea    r9d,[rcx+0x1]
    65028733:	mov    DWORD PTR [rbp+0x70],r9d
    65028737:	jmp    0x6502873f
    65028739:	mov    r9d,ecx
    6502873c:	mov    DWORD PTR [rbp+0x70],ecx
    6502873f:	cmp    r10d,0x2
    65028743:	je     0x650289ba
    65028749:	test   r10d,r10d
    6502874c:	je     0x650289ba
    65028752:	cmp    r10d,0x1
    65028756:	jne    0x650289ed
    6502875c:	mov    r13d,DWORD PTR [rbp+0x88]
    65028763:	mov    r12d,ebx
    65028766:	test   r13d,r13d
    65028769:	jne    0x65028772
    6502876b:	mov    rax,QWORD PTR [rdi]
    6502876e:	mov    r13d,DWORD PTR [rax+0x4]
    65028772:	cmp    DWORD PTR [rbp+0x90],ebx
    65028778:	mov    edx,0x1
    6502877d:	mov    eax,0x9
    65028782:	mov    r8,r14
    65028785:	mov    ecx,r13d
    65028788:	cmovne edx,eax
    6502878b:	mov    DWORD PTR [rsp+0x28],ebx
    6502878f:	mov    QWORD PTR [rsp+0x20],rbx
    65028794:	call   QWORD PTR [rip+0xb89e]        # 0x65034038
    6502879a:	test   eax,eax
    6502879c:	movsxd r14,eax
    6502879f:	je     0x650289ed
    650287a5:	jle    0x650289ed
    650287ab:	xor    edx,edx
    650287ad:	mov    rax,0xffffffffffffffe0
    650287b4:	div    r14
    650287b7:	cmp    rax,0x2
    650287bb:	jb     0x650289ed
    650287c1:	lea    rcx,[r14+r14*1+0x10]
    650287c6:	movabs rdi,0xffffffffffffff0
    650287d0:	cmp    rcx,0x400
    650287d7:	ja     0x65028807
    650287d9:	lea    rax,[rcx+0xf]
    650287dd:	cmp    rax,rcx
    650287e0:	ja     0x650287e5
    650287e2:	mov    rax,rdi
    650287e5:	and    rax,0xfffffffffffffff0
    650287e9:	call   0x650330c0
    650287ee:	sub    rsp,rax
    650287f1:	lea    rsi,[rsp+0x40]
    650287f6:	test   rsi,rsi
    650287f9:	je     0x650289ed
    650287ff:	mov    DWORD PTR [rsi],0xcccc
    65028805:	jmp    0x6502881a
    65028807:	call   0x6501fae0
    6502880c:	test   rax,rax
    6502880f:	mov    rsi,rax
    65028812:	je     0x6502881e
    65028814:	mov    DWORD PTR [rax],0xdddd
    6502881a:	add    rsi,0x10
    6502881e:	test   rsi,rsi
    65028821:	je     0x650289ed
    65028827:	mov    r9d,DWORD PTR [rbp+0x70]
    6502882b:	mov    r8,QWORD PTR [rbp+0x8]
    6502882f:	mov    edx,0x1
    65028834:	mov    ecx,r13d
    65028837:	mov    DWORD PTR [rsp+0x28],r14d
    6502883c:	mov    QWORD PTR [rsp+0x20],rsi
    65028841:	call   QWORD PTR [rip+0xb7f1]        # 0x65034038
    65028847:	test   eax,eax
    65028849:	je     0x650289a0
    6502884f:	mov    edx,DWORD PTR [rbp+0x0]
    65028852:	mov    r9d,r14d
    65028855:	mov    r8,rsi
    65028858:	mov    ecx,r15d
    6502885b:	mov    DWORD PTR [rsp+0x28],ebx
    6502885f:	mov    QWORD PTR [rsp+0x20],rbx
    65028864:	call   QWORD PTR [rip+0xba3e]        # 0x650342a8
    6502886a:	test   eax,eax
    6502886c:	movsxd r12,eax
    6502886f:	je     0x650289a0
    65028875:	mov    ecx,DWORD PTR [rbp+0x0]
    65028878:	bt     ecx,0xa
    6502887c:	jae    0x650288b8
    6502887e:	mov    eax,DWORD PTR [rbp+0x80]
    65028884:	test   eax,eax
    65028886:	je     0x650289a0
    6502888c:	cmp    r12d,eax
    6502888f:	jg     0x650289a0
    65028895:	mov    DWORD PTR [rsp+0x28],eax
    65028899:	mov    rax,QWORD PTR [rbp+0x78]
    6502889d:	mov    edx,ecx
    6502889f:	mov    r9d,r14d
    650288a2:	mov    r8,rsi
    650288a5:	mov    ecx,r15d
    650288a8:	mov    QWORD PTR [rsp+0x20],rax
    650288ad:	call   QWORD PTR [rip+0xb9f5]        # 0x650342a8
    650288b3:	jmp    0x650289a0
    650288b8:	test   eax,eax
    650288ba:	jle    0x650289a0
    650288c0:	xor    edx,edx
    650288c2:	mov    rax,0xffffffffffffffe0
    650288c9:	div    r12
    650288cc:	cmp    rax,0x2
    650288d0:	jb     0x650289a0
    650288d6:	lea    rcx,[r12+r12*1+0x10]
    650288db:	cmp    rcx,0x400
    650288e2:	ja     0x65028912
    650288e4:	lea    rax,[rcx+0xf]
    650288e8:	cmp    rax,rcx
    650288eb:	ja     0x650288f0
    650288ed:	mov    rax,rdi
    650288f0:	and    rax,0xfffffffffffffff0
    650288f4:	call   0x650330c0
    650288f9:	sub    rsp,rax
    650288fc:	lea    rdi,[rsp+0x40]
    65028901:	test   rdi,rdi
    65028904:	je     0x650289a0
    6502890a:	mov    DWORD PTR [rdi],0xcccc
    65028910:	jmp    0x65028925
    65028912:	call   0x6501fae0
    65028917:	test   rax,rax
    6502891a:	mov    rdi,rax
    6502891d:	je     0x65028929
    6502891f:	mov    DWORD PTR [rax],0xdddd
    65028925:	add    rdi,0x10
    65028929:	test   rdi,rdi
    6502892c:	je     0x650289a0
    6502892e:	mov    edx,DWORD PTR [rbp+0x0]
    65028931:	mov    r9d,r14d
    65028934:	mov    r8,rsi
    65028937:	mov    ecx,r15d
    6502893a:	mov    DWORD PTR [rsp+0x28],r12d
    6502893f:	mov    QWORD PTR [rsp+0x20],rdi
    65028944:	call   QWORD PTR [rip+0xb95e]        # 0x650342a8
    6502894a:	test   eax,eax
    6502894c:	je     0x6502898e
    6502894e:	mov    eax,DWORD PTR [rbp+0x80]
    65028954:	xor    edx,edx
    65028956:	mov    QWORD PTR [rsp+0x38],rbx
    6502895b:	test   eax,eax
    6502895d:	mov    r9d,r12d
    65028960:	mov    r8,rdi
    65028963:	mov    ecx,r13d
    65028966:	mov    QWORD PTR [rsp+0x30],rbx
    6502896b:	jne    0x65028978
    6502896d:	mov    DWORD PTR [rsp+0x28],ebx
    65028971:	mov    QWORD PTR [rsp+0x20],rbx
    65028976:	jmp    0x65028985
    65028978:	mov    DWORD PTR [rsp+0x28],eax
    6502897c:	mov    rax,QWORD PTR [rbp+0x78]
    65028980:	mov    QWORD PTR [rsp+0x20],rax
    65028985:	call   QWORD PTR [rip+0xb6b5]        # 0x65034040
    6502898b:	mov    r12d,eax
    6502898e:	cmp    DWORD PTR [rdi-0x10],0xdddd
    65028995:	lea    rcx,[rdi-0x10]
    65028999:	jne    0x650289a0
    6502899b:	call   0x6501fa90
    650289a0:	cmp    DWORD PTR [rsi-0x10],0xdddd
    650289a7:	lea    rcx,[rsi-0x10]
    650289ab:	jne    0x650289b2
    650289ad:	call   0x6501fa90
    650289b2:	mov    eax,r12d
    650289b5:	jmp    0x65028b76
    650289ba:	test   r15d,r15d
    650289bd:	mov    r12,rbx
    650289c0:	jne    0x650289cd
    650289c2:	mov    rax,QWORD PTR [rdi]
    650289c5:	mov    r15d,DWORD PTR [rax+0x14]
    650289c9:	mov    DWORD PTR [rbp+0x10],r15d
    650289cd:	mov    esi,DWORD PTR [rbp+0x88]
    650289d3:	test   esi,esi
    650289d5:	jne    0x650289dd
    650289d7:	mov    rax,QWORD PTR [rdi]
    650289da:	mov    esi,DWORD PTR [rax+0x4]
    650289dd:	mov    ecx,r15d
    650289e0:	call   0x6502ccf0
    650289e5:	cmp    eax,0xffffffff
    650289e8:	mov    r13d,eax
    650289eb:	jne    0x650289f4
    650289ed:	xor    eax,eax
    650289ef:	jmp    0x65028b76
    650289f4:	cmp    eax,esi
    650289f6:	mov    r8,r14
    650289f9:	je     0x65028b4f
    650289ff:	lea    r9,[rbp+0x70]
    65028a03:	mov    edx,eax
    65028a05:	mov    ecx,esi
    65028a07:	mov    DWORD PTR [rsp+0x28],ebx
    65028a0b:	mov    QWORD PTR [rsp+0x20],rbx
    65028a10:	call   0x6502cd60
    65028a15:	test   rax,rax
    65028a18:	mov    r14,rax
    65028a1b:	je     0x650289ed
    65028a1d:	mov    r9d,DWORD PTR [rbp+0x70]
    65028a21:	mov    edx,DWORD PTR [rbp+0x0]
    65028a24:	mov    r8,rax
    65028a27:	mov    ecx,r15d
    65028a2a:	mov    DWORD PTR [rsp+0x28],ebx
    65028a2e:	mov    QWORD PTR [rsp+0x20],rbx
    65028a33:	call   QWORD PTR [rip+0xb867]        # 0x650342a0
    65028a39:	mov    r15,QWORD PTR [rbp+0x78]
    65028a3d:	test   eax,eax
    65028a3f:	movsxd r9,eax
    65028a42:	mov    DWORD PTR [rbp+0x8],r9d
    65028a46:	jle    0x65028b33
    65028a4c:	cmp    r9,0xffffffffffffffe0
    65028a50:	mov    rcx,r9
    65028a53:	ja     0x65028b33
    65028a59:	add    rcx,0x10
    65028a5d:	cmp    rcx,0x400
    65028a64:	ja     0x65028a9e
    65028a66:	lea    rdi,[rcx+0xf]
    65028a6a:	cmp    rdi,rcx
    65028a6d:	ja     0x65028a79
    65028a6f:	movabs rdi,0xffffffffffffff0
    65028a79:	and    rdi,0xfffffffffffffff0
    65028a7d:	mov    rax,rdi
    65028a80:	call   0x650330c0
    65028a85:	sub    rsp,rdi
    65028a88:	lea    rdi,[rsp+0x40]
    65028a8d:	test   rdi,rdi
    65028a90:	je     0x65028b33
    65028a96:	mov    DWORD PTR [rdi],0xcccc
    65028a9c:	jmp    0x65028ab1
    65028a9e:	call   0x6501fae0
    65028aa3:	test   rax,rax
    65028aa6:	mov    rdi,rax
    65028aa9:	je     0x65028ab5
    65028aab:	mov    DWORD PTR [rax],0xdddd
    65028ab1:	add    rdi,0x10
    65028ab5:	test   rdi,rdi
    65028ab8:	mov    r9d,DWORD PTR [rbp+0x8]
    65028abc:	je     0x65028b33
    65028abe:	movsxd r8,r9d
    65028ac1:	xor    edx,edx
    65028ac3:	mov    rcx,rdi
    65028ac6:	call   0x6501ee30
    65028acb:	mov    r11d,DWORD PTR [rbp+0x8]
    65028acf:	mov    r9d,DWORD PTR [rbp+0x70]
    65028ad3:	mov    edx,DWORD PTR [rbp+0x0]
    65028ad6:	mov    ecx,DWORD PTR [rbp+0x10]
    65028ad9:	mov    DWORD PTR [rsp+0x28],r11d
    65028ade:	mov    r8,r14
    65028ae1:	mov    QWORD PTR [rsp+0x20],rdi
    65028ae6:	call   QWORD PTR [rip+0xb7b4]        # 0x650342a0
    65028aec:	test   eax,eax
    65028aee:	mov    DWORD PTR [rbp+0x8],eax
    65028af1:	je     0x65028b21
    65028af3:	mov    eax,DWORD PTR [rbp+0x80]
    65028af9:	lea    r9,[rbp+0x8]
    65028afd:	mov    r8,rdi
    65028b00:	mov    DWORD PTR [rsp+0x28],eax
    65028b04:	mov    edx,esi
    65028b06:	mov    ecx,r13d
    65028b09:	mov    QWORD PTR [rsp+0x20],r15
    65028b0e:	call   0x6502cd60
    65028b13:	mov    ecx,DWORD PTR [rbp+0x8]
    65028b16:	test   rax,rax
    65028b19:	mov    r12,rax
    65028b1c:	cmove  ecx,ebx
    65028b1f:	mov    ebx,ecx
    65028b21:	cmp    DWORD PTR [rdi-0x10],0xdddd
    65028b28:	lea    rcx,[rdi-0x10]
    65028b2c:	jne    0x65028b33
    65028b2e:	call   0x6501fa90
    65028b33:	mov    rcx,r14
    65028b36:	call   0x6501fa90
    65028b3b:	test   r12,r12
    65028b3e:	je     0x65028b74
    65028b40:	cmp    r15,r12
    65028b43:	je     0x65028b74
    65028b45:	mov    rcx,r12
    65028b48:	call   0x6501fa90
    65028b4d:	jmp    0x65028b74
    65028b4f:	mov    eax,DWORD PTR [rbp+0x80]
    65028b55:	mov    r9d,DWORD PTR [rbp+0x70]
    65028b59:	mov    edx,DWORD PTR [rbp+0x0]
    65028b5c:	mov    DWORD PTR [rsp+0x28],eax
    65028b60:	mov    rax,QWORD PTR [rbp+0x78]
    65028b64:	mov    ecx,r15d
    65028b67:	mov    QWORD PTR [rsp+0x20],rax
    65028b6c:	call   QWORD PTR [rip+0xb72e]        # 0x650342a0
    65028b72:	mov    ebx,eax
    65028b74:	mov    eax,ebx
    65028b76:	mov    rcx,QWORD PTR [rbp+0x18]
    65028b7a:	xor    rcx,rbp
    65028b7d:	call   0x6501e4e0
    65028b82:	mov    rbx,QWORD PTR [rbp+0x50]
    65028b86:	mov    rsi,QWORD PTR [rbp+0x58]
    65028b8a:	mov    rdi,QWORD PTR [rbp+0x60]
    65028b8e:	lea    rsp,[rbp+0x20]
    65028b92:	pop    r15
    65028b94:	pop    r14
    65028b96:	pop    r13
    65028b98:	pop    r12
    65028b9a:	pop    rbp
    65028b9b:	ret    
    65028b9c:	int3   
    65028b9d:	int3   
    65028b9e:	int3   
    65028b9f:	int3   
    65028ba0:	mov    rax,rsp
    65028ba3:	push   rbx
    65028ba4:	sub    rsp,0x80
    65028bab:	mov    QWORD PTR [rax+0x8],rbp
    65028baf:	mov    QWORD PTR [rax+0x18],rdi
    65028bb3:	xor    dil,dil
    65028bb6:	test   rcx,rcx
    65028bb9:	mov    QWORD PTR [rax-0x10],r12
    65028bbd:	mov    QWORD PTR [rax-0x18],r13
    65028bc1:	mov    BYTE PTR [rax-0x20],dil
    65028bc5:	mov    rbp,r9
    65028bc8:	mov    r12d,r8d
    65028bcb:	mov    r13d,edx
    65028bce:	jne    0x65028c61
    65028bd4:	mov    QWORD PTR [rax+0x10],rsi
    65028bd8:	call   0x650208c0
    65028bdd:	mov    rcx,QWORD PTR [rax+0xc0]
    65028be4:	mov    rsi,QWORD PTR [rax+0xb8]
    65028beb:	mov    rbx,rax
    65028bee:	cmp    rcx,QWORD PTR [rip+0x19dab]        # 0x650429a0
    65028bf5:	mov    QWORD PTR [rsp+0x60],rax
    65028bfa:	mov    QWORD PTR [rsp+0x50],rcx
    65028bff:	mov    QWORD PTR [rsp+0x58],rsi
    65028c04:	je     0x65028c1e
    65028c06:	mov    ecx,DWORD PTR [rax+0xc8]
    65028c0c:	test   DWORD PTR [rip+0x19c16],ecx        # 0x65042828
    65028c12:	jne    0x65028c1e
    65028c14:	call   0x65023d20
    65028c19:	mov    QWORD PTR [rsp+0x50],rax
    65028c1e:	cmp    rsi,QWORD PTR [rip+0x19afb]        # 0x65042720
    65028c25:	mov    rsi,QWORD PTR [rsp+0x98]
    65028c2d:	je     0x65028c47
    65028c2f:	mov    eax,DWORD PTR [rbx+0xc8]
    65028c35:	test   DWORD PTR [rip+0x19bed],eax        # 0x65042828
    65028c3b:	jne    0x65028c47
    65028c3d:	call   0x650231d0
    65028c42:	mov    QWORD PTR [rsp+0x58],rax
    65028c47:	test   BYTE PTR [rbx+0xc8],0x2
    65028c4e:	jne    0x65028c7e
    65028c50:	or     DWORD PTR [rbx+0xc8],0x2
    65028c57:	mov    dil,0x1
    65028c5a:	mov    BYTE PTR [rsp+0x68],dil
    65028c5f:	jmp    0x65028c7e
    65028c61:	mov    rax,QWORD PTR [rcx]
    65028c64:	lea    rdx,[rsp+0x50]
    65028c69:	mov    QWORD PTR [rdx],rax
    65028c6c:	mov    rax,QWORD PTR [rcx+0x8]
    65028c70:	mov    QWORD PTR [rdx+0x8],rax
    65028c74:	movzx  edi,BYTE PTR [rsp+0x68]
    65028c79:	mov    rbx,QWORD PTR [rsp+0x60]
    65028c7e:	mov    eax,DWORD PTR [rsp+0xd0]
    65028c85:	lea    rcx,[rsp+0x50]
    65028c8a:	mov    r9,rbp
    65028c8d:	mov    DWORD PTR [rsp+0x40],eax
    65028c91:	mov    eax,DWORD PTR [rsp+0xc8]
    65028c98:	mov    r8d,r12d
    65028c9b:	mov    DWORD PTR [rsp+0x38],eax
    65028c9f:	mov    eax,DWORD PTR [rsp+0xc0]
    65028ca6:	mov    edx,r13d
    65028ca9:	mov    DWORD PTR [rsp+0x30],eax
    65028cad:	mov    rax,QWORD PTR [rsp+0xb8]
    65028cb5:	mov    QWORD PTR [rsp+0x28],rax
    65028cba:	mov    eax,DWORD PTR [rsp+0xb0]
    65028cc1:	mov    DWORD PTR [rsp+0x20],eax
    65028cc5:	call   0x65028660
    65028cca:	mov    r13,QWORD PTR [rsp+0x70]
    65028ccf:	mov    r12,QWORD PTR [rsp+0x78]
    65028cd4:	mov    rbp,QWORD PTR [rsp+0x90]
    65028cdc:	test   dil,dil
    65028cdf:	mov    rdi,QWORD PTR [rsp+0xa0]
    65028ce7:	je     0x65028cf0
    65028ce9:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    65028cf0:	add    rsp,0x80
    65028cf7:	pop    rbx
    65028cf8:	ret    
    65028cf9:	int3   
    65028cfa:	int3   
    65028cfb:	int3   
    65028cfc:	int3   
    65028cfd:	int3   
    65028cfe:	int3   
    65028cff:	int3   
    65028d00:	rex push rbx
    65028d02:	sub    rsp,0x40
    65028d06:	mov    QWORD PTR [rsp+0x58],rsi
    65028d0b:	mov    QWORD PTR [rsp+0x60],rdi
    65028d10:	xor    dil,dil
    65028d13:	test   rdx,rdx
    65028d16:	mov    QWORD PTR [rsp+0x68],r12
    65028d1b:	mov    BYTE PTR [rsp+0x38],dil
    65028d20:	mov    r12d,ecx
    65028d23:	jne    0x65028d99
    65028d25:	mov    QWORD PTR [rsp+0x50],rbp
    65028d2a:	call   0x650208c0
    65028d2f:	mov    rsi,QWORD PTR [rax+0xc0]
    65028d36:	mov    rbp,QWORD PTR [rax+0xb8]
    65028d3d:	mov    rbx,rax
    65028d40:	cmp    rsi,QWORD PTR [rip+0x19c59]        # 0x650429a0
    65028d47:	je     0x65028d5f
    65028d49:	mov    edx,DWORD PTR [rax+0xc8]
    65028d4f:	test   DWORD PTR [rip+0x19ad3],edx        # 0x65042828
    65028d55:	jne    0x65028d5f
    65028d57:	call   0x65023d20
    65028d5c:	mov    rsi,rax
    65028d5f:	cmp    rbp,QWORD PTR [rip+0x199ba]        # 0x65042720
    65028d66:	mov    rbp,QWORD PTR [rsp+0x50]
    65028d6b:	je     0x65028d80
    65028d6d:	mov    ecx,DWORD PTR [rbx+0xc8]
    65028d73:	test   DWORD PTR [rip+0x19aaf],ecx        # 0x65042828
    65028d79:	jne    0x65028d80
    65028d7b:	call   0x650231d0
    65028d80:	mov    ecx,DWORD PTR [rbx+0xc8]
    65028d86:	test   cl,0x2
    65028d89:	jne    0x65028dbb
    65028d8b:	or     ecx,0x2
    65028d8e:	mov    dil,0x1
    65028d91:	mov    DWORD PTR [rbx+0xc8],ecx
    65028d97:	jmp    0x65028dbb
    65028d99:	mov    rax,QWORD PTR [rdx]
    65028d9c:	lea    rcx,[rsp+0x20]
    65028da1:	mov    QWORD PTR [rcx],rax
    65028da4:	mov    rax,QWORD PTR [rdx+0x8]
    65028da8:	mov    QWORD PTR [rcx+0x8],rax
    65028dac:	movzx  edi,BYTE PTR [rsp+0x38]
    65028db1:	mov    rbx,QWORD PTR [rsp+0x30]
    65028db6:	mov    rsi,QWORD PTR [rsp+0x20]
    65028dbb:	mov    rax,QWORD PTR [rsi+0x140]
    65028dc2:	mov    rsi,QWORD PTR [rsp+0x58]
    65028dc7:	movzx  ecx,r12b
    65028dcb:	mov    ax,WORD PTR [rax+rcx*2]
    65028dcf:	mov    r12,QWORD PTR [rsp+0x68]
    65028dd4:	and    eax,0x8000
    65028dd9:	test   dil,dil
    65028ddc:	mov    rdi,QWORD PTR [rsp+0x60]
    65028de1:	je     0x65028dea
    65028de3:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    65028dea:	add    rsp,0x40
    65028dee:	pop    rbx
    65028def:	ret    
    65028df0:	mov    QWORD PTR [rsp+0x8],rbx
    65028df5:	mov    QWORD PTR [rsp+0x10],rbp
    65028dfa:	mov    QWORD PTR [rsp+0x18],rsi
    65028dff:	mov    QWORD PTR [rsp+0x20],rdi
    65028e04:	push   r12
    65028e06:	sub    rsp,0x20
    65028e0a:	mov    r12d,ecx
    65028e0d:	xor    bpl,bpl
    65028e10:	call   0x650208c0
    65028e15:	mov    rsi,QWORD PTR [rax+0xc0]
    65028e1c:	mov    rdi,QWORD PTR [rax+0xb8]
    65028e23:	mov    rbx,rax
    65028e26:	cmp    rsi,QWORD PTR [rip+0x19b73]        # 0x650429a0
    65028e2d:	je     0x65028e45
    65028e2f:	mov    edx,DWORD PTR [rax+0xc8]
    65028e35:	test   DWORD PTR [rip+0x199ed],edx        # 0x65042828
    65028e3b:	jne    0x65028e45
    65028e3d:	call   0x65023d20
    65028e42:	mov    rsi,rax
    65028e45:	cmp    rdi,QWORD PTR [rip+0x198d4]        # 0x65042720
    65028e4c:	je     0x65028e61
    65028e4e:	mov    ecx,DWORD PTR [rbx+0xc8]
    65028e54:	test   DWORD PTR [rip+0x199ce],ecx        # 0x65042828
    65028e5a:	jne    0x65028e61
    65028e5c:	call   0x650231d0
    65028e61:	mov    ecx,DWORD PTR [rbx+0xc8]
    65028e67:	test   cl,0x2
    65028e6a:	jne    0x65028e78
    65028e6c:	or     ecx,0x2
    65028e6f:	mov    bpl,0x1
    65028e72:	mov    DWORD PTR [rbx+0xc8],ecx
    65028e78:	mov    rax,QWORD PTR [rsi+0x140]
    65028e7f:	movzx  ecx,r12b
    65028e83:	mov    ax,WORD PTR [rax+rcx*2]
    65028e87:	and    eax,0x8000
    65028e8c:	test   bpl,bpl
    65028e8f:	je     0x65028e98
    65028e91:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    65028e98:	mov    rbx,QWORD PTR [rsp+0x30]
    65028e9d:	mov    rbp,QWORD PTR [rsp+0x38]
    65028ea2:	mov    rsi,QWORD PTR [rsp+0x40]
    65028ea7:	mov    rdi,QWORD PTR [rsp+0x48]
    65028eac:	add    rsp,0x20
    65028eb0:	pop    r12
    65028eb2:	ret    
    65028eb3:	int3   
    65028eb4:	int3   
    65028eb5:	int3   
    65028eb6:	int3   
    65028eb7:	int3   
    65028eb8:	int3   
    65028eb9:	int3   
    65028eba:	int3   
    65028ebb:	int3   
    65028ebc:	int3   
    65028ebd:	int3   
    65028ebe:	int3   
    65028ebf:	int3   
    65028ec0:	mov    QWORD PTR [rsp+0x20],rbx
    65028ec5:	push   rsi
    65028ec6:	sub    rsp,0x60
    65028eca:	test   r8,r8
    65028ecd:	mov    esi,edx
    65028ecf:	movsxd rbx,ecx
    65028ed2:	mov    BYTE PTR [rsp+0x58],0x0
    65028ed7:	jne    0x65028f73
    65028edd:	call   0x650208c0
    65028ee2:	mov    QWORD PTR [rsp+0x50],rax
    65028ee7:	mov    r11,rax
    65028eea:	mov    r8,QWORD PTR [rax+0xc0]
    65028ef1:	cmp    r8,QWORD PTR [rip+0x19aa8]        # 0x650429a0
    65028ef8:	mov    QWORD PTR [rsp+0x40],r8
    65028efd:	mov    rax,QWORD PTR [rax+0xb8]
    65028f04:	mov    QWORD PTR [rsp+0x48],rax
    65028f09:	je     0x65028f2e
    65028f0b:	mov    ecx,DWORD PTR [r11+0xc8]
    65028f12:	test   DWORD PTR [rip+0x19910],ecx        # 0x65042828
    65028f18:	jne    0x65028f2e
    65028f1a:	call   0x65023d20
    65028f1f:	mov    r11,QWORD PTR [rsp+0x50]
    65028f24:	mov    QWORD PTR [rsp+0x40],rax
    65028f29:	mov    rax,QWORD PTR [rsp+0x48]
    65028f2e:	cmp    rax,QWORD PTR [rip+0x197eb]        # 0x65042720
    65028f35:	je     0x65028f55
    65028f37:	mov    eax,DWORD PTR [r11+0xc8]
    65028f3e:	test   DWORD PTR [rip+0x198e4],eax        # 0x65042828
    65028f44:	jne    0x65028f55
    65028f46:	call   0x650231d0
    65028f4b:	mov    r11,QWORD PTR [rsp+0x50]
    65028f50:	mov    QWORD PTR [rsp+0x48],rax
    65028f55:	test   BYTE PTR [r11+0xc8],0x2
    65028f5d:	jne    0x65028f8b
    65028f5f:	or     DWORD PTR [r11+0xc8],0x2
    65028f67:	mov    r11,QWORD PTR [rsp+0x50]
    65028f6c:	mov    BYTE PTR [rsp+0x58],0x1
    65028f71:	jmp    0x65028f8b
    65028f73:	mov    rax,QWORD PTR [r8]
    65028f76:	lea    rcx,[rsp+0x40]
    65028f7b:	mov    QWORD PTR [rcx],rax
    65028f7e:	mov    rax,QWORD PTR [r8+0x8]
    65028f82:	mov    QWORD PTR [rcx+0x8],rax
    65028f86:	mov    r11,QWORD PTR [rsp+0x50]
    65028f8b:	lea    eax,[rbx+0x1]
    65028f8e:	cmp    eax,0x100
    65028f93:	ja     0x65028fc8
    65028f95:	mov    rax,QWORD PTR [rsp+0x40]
    65028f9a:	mov    rcx,QWORD PTR [rax+0x140]
    65028fa1:	movzx  eax,WORD PTR [rcx+rbx*2]
    65028fa5:	and    eax,esi
    65028fa7:	cmp    BYTE PTR [rsp+0x58],0x0
    65028fac:	je     0x65029099
    65028fb2:	and    DWORD PTR [r11+0xc8],0xfffffffd
    65028fba:	mov    rbx,QWORD PTR [rsp+0x88]
    65028fc2:	add    rsp,0x60
    65028fc6:	pop    rsi
    65028fc7:	ret    
    65028fc8:	mov    QWORD PTR [rsp+0x78],rdi
    65028fcd:	mov    edi,ebx
    65028fcf:	lea    rdx,[rsp+0x40]
    65028fd4:	sar    edi,0x8
    65028fd7:	movzx  ecx,dil
    65028fdb:	call   0x65028d00
    65028fe0:	test   eax,eax
    65028fe2:	je     0x65029003
    65028fe4:	mov    BYTE PTR [rsp+0x80],dil
    65028fec:	mov    BYTE PTR [rsp+0x81],bl
    65028ff3:	mov    BYTE PTR [rsp+0x82],0x0
    65028ffb:	mov    r9d,0x2
    65029001:	jmp    0x65029018
    65029003:	mov    BYTE PTR [rsp+0x80],bl
    6502900a:	mov    BYTE PTR [rsp+0x81],0x0
    65029012:	mov    r9d,0x1
    65029018:	mov    rcx,QWORD PTR [rsp+0x40]
    6502901d:	mov    DWORD PTR [rsp+0x38],0x1
    65029025:	lea    r8,[rsp+0x80]
    6502902d:	mov    eax,DWORD PTR [rcx+0x14]
    65029030:	mov    edx,0x1
    65029035:	mov    DWORD PTR [rsp+0x30],eax
    65029039:	mov    eax,DWORD PTR [rcx+0x4]
    6502903c:	lea    rcx,[rsp+0x40]
    65029041:	mov    DWORD PTR [rsp+0x28],eax
    65029045:	lea    rax,[rsp+0x70]
    6502904a:	mov    QWORD PTR [rsp+0x20],rax
    6502904f:	call   0x6502a0a0
    65029054:	mov    rdi,QWORD PTR [rsp+0x78]
    65029059:	test   eax,eax
    6502905b:	jne    0x6502907f
    6502905d:	cmp    BYTE PTR [rsp+0x58],al
    65029061:	je     0x6502906f
    65029063:	mov    rax,QWORD PTR [rsp+0x50]
    65029068:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502906f:	xor    eax,eax
    65029071:	mov    rbx,QWORD PTR [rsp+0x88]
    65029079:	add    rsp,0x60
    6502907d:	pop    rsi
    6502907e:	ret    
    6502907f:	movzx  eax,WORD PTR [rsp+0x70]
    65029084:	and    eax,esi
    65029086:	cmp    BYTE PTR [rsp+0x58],0x0
    6502908b:	je     0x65029099
    6502908d:	mov    rcx,QWORD PTR [rsp+0x50]
    65029092:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    65029099:	mov    rbx,QWORD PTR [rsp+0x88]
    650290a1:	add    rsp,0x60
    650290a5:	pop    rsi
    650290a6:	ret    
    650290a7:	int3   
    650290a8:	int3   
    650290a9:	int3   
    650290aa:	int3   
    650290ab:	int3   
    650290ac:	int3   
    650290ad:	int3   
    650290ae:	int3   
    650290af:	int3   
    650290b0:	mov    QWORD PTR [rsp+0x18],rbx
    650290b5:	push   rsi
    650290b6:	push   rdi
    650290b7:	push   r12
    650290b9:	sub    rsp,0x30
    650290bd:	lea    r12,[rip+0x19a2c]        # 0x65042af0
    650290c4:	xor    esi,esi
    650290c6:	mov    edi,ecx
    650290c8:	mov    rax,r12
    650290cb:	mov    ebx,esi
    650290cd:	data16 xchg ax,ax
    650290d0:	cmp    ecx,DWORD PTR [rax]
    650290d2:	je     0x650290ee
    650290d4:	add    ebx,0x1
    650290d7:	add    rax,0x10
    650290db:	cmp    ebx,0x17
    650290de:	jb     0x650290d0
    650290e0:	mov    rbx,QWORD PTR [rsp+0x60]
    650290e5:	add    rsp,0x30
    650290e9:	pop    r12
    650290eb:	pop    rdi
    650290ec:	pop    rsi
    650290ed:	ret    
    650290ee:	cmp    ebx,0x17
    650290f1:	jae    0x650292d5
    650290f7:	mov    ecx,0x3
    650290fc:	call   0x6502d5e0
    65029101:	cmp    eax,0x1
    65029104:	je     0x6502928c
    6502910a:	mov    ecx,0x3
    6502910f:	call   0x6502d5e0
    65029114:	test   eax,eax
    65029116:	jne    0x65029125
    65029118:	cmp    DWORD PTR [rip+0x1ab31],0x1        # 0x65043c50
    6502911f:	je     0x6502928c
    65029125:	cmp    edi,0xfc
    6502912b:	je     0x650292d5
    65029131:	mov    QWORD PTR [rsp+0x50],rbp
    65029136:	lea    rbp,[rip+0x1b293]        # 0x650443d0
    6502913d:	lea    r8,[rip+0xc93c]        # 0x65035a80
    65029144:	mov    rcx,rbp
    65029147:	mov    edx,0x314
    6502914c:	call   0x650201b0
    65029151:	test   eax,eax
    65029153:	je     0x65029169
    65029155:	xor    r9d,r9d
    65029158:	xor    r8d,r8d
    6502915b:	xor    edx,edx
    6502915d:	xor    ecx,ecx
    6502915f:	mov    QWORD PTR [rsp+0x20],rsi
    65029164:	call   0x6501d7b0
    65029169:	lea    rdx,[rip+0x1b279]        # 0x650443e9
    65029170:	mov    r8d,0x104
    65029176:	xor    ecx,ecx
    65029178:	mov    BYTE PTR [rip+0x1b36e],sil        # 0x650444ed
    6502917f:	call   QWORD PTR [rip+0xb15b]        # 0x650342e0
    65029185:	test   eax,eax
    65029187:	jne    0x650291b9
    65029189:	lea    r8,[rip+0xc8d8]        # 0x65035a68
    65029190:	lea    rcx,[rip+0x1b252]        # 0x650443e9
    65029197:	mov    edx,0x2fb
    6502919c:	call   0x650201b0
    650291a1:	test   eax,eax
    650291a3:	je     0x650291b9
    650291a5:	xor    r9d,r9d
    650291a8:	xor    r8d,r8d
    650291ab:	xor    edx,edx
    650291ad:	xor    ecx,ecx
    650291af:	mov    QWORD PTR [rsp+0x20],rsi
    650291b4:	call   0x6501d7b0
    650291b9:	or     rcx,0xffffffffffffffff
    650291bd:	xor    eax,eax
    650291bf:	lea    rdi,[rip+0x1b223]        # 0x650443e9
    650291c6:	repnz scas al,BYTE PTR es:[rdi]
    650291c8:	not    rcx
    650291cb:	cmp    rcx,0x3c
    650291cf:	jbe    0x65029208
    650291d1:	lea    rcx,[rcx+rbp*1-0x23]
    650291d6:	lea    rdx,[rip+0x1b507]        # 0x650446e4
    650291dd:	lea    r9d,[rax+0x3]
    650291e1:	lea    r8,[rip+0xc87c]        # 0x65035a64
    650291e8:	sub    rdx,rcx
    650291eb:	call   0x6502a590
    650291f0:	test   eax,eax
    650291f2:	je     0x65029208
    650291f4:	xor    r9d,r9d
    650291f7:	xor    r8d,r8d
    650291fa:	xor    edx,edx
    650291fc:	xor    ecx,ecx
    650291fe:	mov    QWORD PTR [rsp+0x20],rsi
    65029203:	call   0x6501d7b0
    65029208:	lea    r8,[rip+0xc851]        # 0x65035a60
    6502920f:	mov    edx,0x314
    65029214:	mov    rcx,rbp
    65029217:	call   0x6502a4d0
    6502921c:	test   eax,eax
    6502921e:	je     0x65029234
    65029220:	xor    r9d,r9d
    65029223:	xor    r8d,r8d
    65029226:	xor    edx,edx
    65029228:	xor    ecx,ecx
    6502922a:	mov    QWORD PTR [rsp+0x20],rsi
    6502922f:	call   0x6501d7b0
    65029234:	movsxd r8,ebx
    65029237:	mov    edx,0x314
    6502923c:	mov    rcx,rbp
    6502923f:	add    r8,r8
    65029242:	mov    r8,QWORD PTR [r12+r8*8+0x8]
    65029247:	call   0x6502a4d0
    6502924c:	test   eax,eax
    6502924e:	je     0x65029264
    65029250:	xor    r9d,r9d
    65029253:	xor    r8d,r8d
    65029256:	xor    edx,edx
    65029258:	xor    ecx,ecx
    6502925a:	mov    QWORD PTR [rsp+0x20],rsi
    6502925f:	call   0x6501d7b0
    65029264:	lea    rdx,[rip+0xc7cd]        # 0x65035a38
    6502926b:	mov    r8d,0x12010
    65029271:	mov    rcx,rbp
    65029274:	call   0x6502d380
    65029279:	mov    rbp,QWORD PTR [rsp+0x50]
    6502927e:	mov    rbx,QWORD PTR [rsp+0x60]
    65029283:	add    rsp,0x30
    65029287:	pop    r12
    65029289:	pop    rdi
    6502928a:	pop    rsi
    6502928b:	ret    
    6502928c:	mov    ecx,0xfffffff4
    65029291:	call   QWORD PTR [rip+0xb031]        # 0x650342c8
    65029297:	test   rax,rax
    6502929a:	mov    r11,rax
    6502929d:	je     0x650292d5
    6502929f:	cmp    rax,0xffffffffffffffff
    650292a3:	je     0x650292d5
    650292a5:	xor    eax,eax
    650292a7:	movsxd rcx,ebx
    650292aa:	lea    r9,[rsp+0x58]
    650292af:	add    rcx,rcx
    650292b2:	mov    QWORD PTR [rsp+0x20],rsi
    650292b7:	mov    rdx,QWORD PTR [r12+rcx*8+0x8]
    650292bc:	or     rcx,0xffffffffffffffff
    650292c0:	mov    rdi,rdx
    650292c3:	repnz scas al,BYTE PTR es:[rdi]
    650292c5:	not    rcx
    650292c8:	lea    r8,[rcx-0x1]
    650292cc:	mov    rcx,r11
    650292cf:	call   QWORD PTR [rip+0xae2b]        # 0x65034100
    650292d5:	mov    rbx,QWORD PTR [rsp+0x60]
    650292da:	add    rsp,0x30
    650292de:	pop    r12
    650292e0:	pop    rdi
    650292e1:	pop    rsi
    650292e2:	ret    
    650292e3:	int3   
    650292e4:	int3   
    650292e5:	int3   
    650292e6:	int3   
    650292e7:	int3   
    650292e8:	int3   
    650292e9:	int3   
    650292ea:	int3   
    650292eb:	int3   
    650292ec:	int3   
    650292ed:	int3   
    650292ee:	int3   
    650292ef:	int3   
    650292f0:	sub    rsp,0x38
    650292f4:	mov    ecx,0x3
    650292f9:	call   0x6502d5e0
    650292fe:	cmp    eax,0x1
    65029301:	je     0x65029322
    65029303:	mov    ecx,0x3
    65029308:	call   0x6502d5e0
    6502930d:	test   eax,eax
    6502930f:	jne    0x650293d6
    65029315:	cmp    DWORD PTR [rip+0x1a934],0x1        # 0x65043c50
    6502931c:	jne    0x650293d6
    65029322:	mov    QWORD PTR [rsp+0x48],rbx
    65029327:	lea    rbx,[rip+0x197c2]        # 0x65042af0
    6502932e:	mov    QWORD PTR [rsp+0x30],rdi
    65029333:	mov    rax,rbx
    65029336:	xor    edi,edi
    65029338:	cmp    DWORD PTR [rax],0xfc
    6502933e:	je     0x6502934e
    65029340:	add    edi,0x1
    65029343:	add    rax,0x10
    65029347:	cmp    edi,0x17
    6502934a:	jb     0x65029338
    6502934c:	jmp    0x650293c2
    6502934e:	cmp    edi,0x17
    65029351:	jae    0x650293c2
    65029353:	mov    ecx,0x3
    65029358:	call   0x6502d5e0
    6502935d:	cmp    eax,0x1
    65029360:	je     0x65029379
    65029362:	mov    ecx,0x3
    65029367:	call   0x6502d5e0
    6502936c:	test   eax,eax
    6502936e:	jne    0x650293c2
    65029370:	cmp    DWORD PTR [rip+0x1a8d9],0x1        # 0x65043c50
    65029377:	jne    0x650293c2
    65029379:	mov    ecx,0xfffffff4
    6502937e:	call   QWORD PTR [rip+0xaf44]        # 0x650342c8
    65029384:	test   rax,rax
    65029387:	mov    r11,rax
    6502938a:	je     0x650293c2
    6502938c:	cmp    rax,0xffffffffffffffff
    65029390:	je     0x650293c2
    65029392:	movsxd rcx,edi
    65029395:	xor    eax,eax
    65029397:	lea    r9,[rsp+0x40]
    6502939c:	add    rcx,rcx
    6502939f:	mov    QWORD PTR [rsp+0x20],rax
    650293a4:	mov    rdx,QWORD PTR [rbx+rcx*8+0x8]
    650293a9:	or     rcx,0xffffffffffffffff
    650293ad:	mov    rdi,rdx
    650293b0:	repnz scas al,BYTE PTR es:[rdi]
    650293b2:	not    rcx
    650293b5:	lea    r8,[rcx-0x1]
    650293b9:	mov    rcx,r11
    650293bc:	call   QWORD PTR [rip+0xad3e]        # 0x65034100
    650293c2:	mov    ecx,0xff
    650293c7:	call   0x650290b0
    650293cc:	mov    rdi,QWORD PTR [rsp+0x30]
    650293d1:	mov    rbx,QWORD PTR [rsp+0x48]
    650293d6:	add    rsp,0x38
    650293da:	ret    
    650293db:	int3   
    650293dc:	int3   
    650293dd:	int3   
    650293de:	int3   
    650293df:	int3   
    650293e0:	int3   
    650293e1:	int3   
    650293e2:	int3   
    650293e3:	int3   
    650293e4:	int3   
    650293e5:	int3   
    650293e6:	data16 data16 xchg ax,ax
    650293ea:	data16 data16 xchg ax,ax
    650293ee:	xchg   ax,ax
    650293f0:	sub    rsp,0x4d8
    650293f7:	xor    r8,r8
    650293fa:	xor    r9,r9
    650293fd:	mov    QWORD PTR [rsp+0x20],rsp
    65029402:	mov    QWORD PTR [rsp+0x28],r8
    65029407:	call   0x6502eb82
    6502940c:	add    rsp,0x4d8
    65029413:	ret    
    65029414:	int3   
    65029415:	int3   
    65029416:	int3   
    65029417:	int3   
    65029418:	int3   
    65029419:	int3   
    6502941a:	data16 xchg ax,ax
    6502941d:	data16 xchg ax,ax
    65029420:	mov    QWORD PTR [rsp+0x8],rcx
    65029425:	mov    QWORD PTR [rsp+0x18],rdx
    6502942a:	mov    DWORD PTR [rsp+0x10],r8d
    6502942f:	mov    r9,0x19930520
    65029436:	jmp    0x65029440
    65029438:	int3   
    65029439:	int3   
    6502943a:	int3   
    6502943b:	int3   
    6502943c:	int3   
    6502943d:	int3   
    6502943e:	xchg   ax,ax
    65029440:	ret    
    65029441:	int3   
    65029442:	int3   
    65029443:	int3   
    65029444:	int3   
    65029445:	int3   
    65029446:	int3   
    65029447:	data16 data16 xchg ax,ax
    6502944b:	data16 data16 xchg ax,ax
    6502944f:	nop
    65029450:	ret    
    65029451:	int3   
    65029452:	int3   
    65029453:	int3   
    65029454:	int3   
    65029455:	int3   
    65029456:	int3   
    65029457:	int3   
    65029458:	int3   
    65029459:	int3   
    6502945a:	int3   
    6502945b:	int3   
    6502945c:	int3   
    6502945d:	int3   
    6502945e:	int3   
    6502945f:	int3   
    65029460:	xor    eax,eax
    65029462:	cmp    WORD PTR [rcx],0x5a4d
    65029467:	jne    0x65029480
    65029469:	movsxd rdx,DWORD PTR [rcx+0x3c]
    6502946d:	cmp    DWORD PTR [rdx+rcx*1],0x4550
    65029474:	jne    0x65029480
    65029476:	cmp    WORD PTR [rdx+rcx*1+0x18],0x20b
    6502947d:	sete   al
    65029480:	ret    0x0
    65029483:	int3   
    65029484:	int3   
    65029485:	int3   
    65029486:	int3   
    65029487:	int3   
    65029488:	int3   
    65029489:	int3   
    6502948a:	int3   
    6502948b:	int3   
    6502948c:	int3   
    6502948d:	int3   
    6502948e:	int3   
    6502948f:	int3   
    65029490:	movsxd r8,DWORD PTR [rcx+0x3c]
    65029494:	xor    r9d,r9d
    65029497:	mov    r10,rdx
    6502949a:	add    r8,rcx
    6502949d:	movzx  eax,WORD PTR [r8+0x14]
    650294a2:	movzx  r11d,WORD PTR [r8+0x6]
    650294a7:	test   r11d,r11d
    650294aa:	lea    rcx,[rax+r8*1+0x18]
    650294af:	je     0x650294d0
    650294b1:	mov    edx,DWORD PTR [rcx+0xc]
    650294b4:	cmp    r10,rdx
    650294b7:	jb     0x650294c3
    650294b9:	mov    eax,DWORD PTR [rcx+0x8]
    650294bc:	add    eax,edx
    650294be:	cmp    r10,rax
    650294c1:	jb     0x650294d3
    650294c3:	add    r9d,0x1
    650294c7:	add    rcx,0x28
    650294cb:	cmp    r9d,r11d
    650294ce:	jb     0x650294b1
    650294d0:	xor    eax,eax
    650294d2:	ret    
    650294d3:	mov    rax,rcx
    650294d6:	ret    
    650294d7:	int3   
    650294d8:	int3   
    650294d9:	int3   
    650294da:	int3   
    650294db:	int3   
    650294dc:	int3   
    650294dd:	int3   
    650294de:	int3   
    650294df:	int3   
    650294e0:	sub    rsp,0x28
    650294e4:	mov    r8,rcx
    650294e7:	lea    rcx,[rip+0xfffffffffffd6b12]        # 0x65000000
    650294ee:	call   0x65029460
    650294f3:	test   eax,eax
    650294f5:	je     0x65029516
    650294f7:	sub    r8,rcx
    650294fa:	mov    rdx,r8
    650294fd:	call   0x65029490
    65029502:	test   rax,rax
    65029505:	je     0x65029516
    65029507:	mov    eax,DWORD PTR [rax+0x24]
    6502950a:	shr    eax,0x1f
    6502950d:	not    eax
    6502950f:	and    eax,0x1
    65029512:	jmp    0x65029516
    65029514:	xor    eax,eax
    65029516:	add    rsp,0x28
    6502951a:	ret    
    6502951b:	int3   
    6502951c:	int3   
    6502951d:	int3   
    6502951e:	int3   
    6502951f:	int3   
    65029520:	rex push rbp
    65029522:	sub    rsp,0x20
    65029526:	mov    rbp,rdx
    65029529:	mov    rax,QWORD PTR [rcx]
    6502952c:	xor    ecx,ecx
    6502952e:	cmp    DWORD PTR [rax],0xc0000005
    65029534:	sete   cl
    65029537:	mov    eax,ecx
    65029539:	mov    eax,ecx
    6502953b:	add    rsp,0x20
    6502953f:	pop    rbp
    65029540:	ret    
    65029541:	int3   
    65029542:	int3   
    65029543:	int3   
    65029544:	int3   
    65029545:	int3   
    65029546:	int3   
    65029547:	int3   
    65029548:	int3   
    65029549:	int3   
    6502954a:	int3   
    6502954b:	int3   
    6502954c:	int3   
    6502954d:	int3   
    6502954e:	int3   
    6502954f:	int3   
    65029550:	mov    QWORD PTR [rsp+0x8],rbx
    65029555:	mov    QWORD PTR [rsp+0x10],rbp
    6502955a:	mov    QWORD PTR [rsp+0x18],rsi
    6502955f:	push   rdi
    65029560:	push   r12
    65029562:	push   r13
    65029564:	sub    rsp,0x20
    65029568:	lea    r12,[rip+0x196f1]        # 0x65042c60
    6502956f:	xor    esi,esi
    65029571:	lea    r13,[rip+0x1b178]        # 0x650446f0
    65029578:	xor    edi,edi
    6502957a:	lea    rbp,[rip+0x1991f]        # 0x65042ea0
    65029581:	mov    rbx,r12
    65029584:	cmp    DWORD PTR [rbx+0x8],0x1
    65029588:	jne    0x650295aa
    6502958a:	movsxd rax,esi
    6502958d:	mov    edx,0xfa0
    65029592:	add    esi,0x1
    65029595:	lea    rcx,[rax+rax*4]
    65029599:	lea    rcx,[r13+rcx*8+0x0]
    6502959e:	mov    QWORD PTR [rbx],rcx
    650295a1:	call   0x65029d20
    650295a6:	test   eax,eax
    650295a8:	je     0x650295d4
    650295aa:	add    rbx,0x10
    650295ae:	add    edi,0x1
    650295b1:	cmp    rbx,rbp
    650295b4:	jl     0x65029584
    650295b6:	mov    eax,0x1
    650295bb:	mov    rbx,QWORD PTR [rsp+0x40]
    650295c0:	mov    rbp,QWORD PTR [rsp+0x48]
    650295c5:	mov    rsi,QWORD PTR [rsp+0x50]
    650295ca:	add    rsp,0x20
    650295ce:	pop    r13
    650295d0:	pop    r12
    650295d2:	pop    rdi
    650295d3:	ret    
    650295d4:	movsxd rax,edi
    650295d7:	add    rax,rax
    650295da:	mov    QWORD PTR [r12+rax*8],0x0
    650295e2:	xor    eax,eax
    650295e4:	jmp    0x650295bb
    650295e6:	int3   
    650295e7:	int3   
    650295e8:	int3   
    650295e9:	int3   
    650295ea:	int3   
    650295eb:	int3   
    650295ec:	int3   
    650295ed:	int3   
    650295ee:	int3   
    650295ef:	int3   
    650295f0:	mov    QWORD PTR [rsp+0x8],rbx
    650295f5:	mov    QWORD PTR [rsp+0x10],rbp
    650295fa:	mov    QWORD PTR [rsp+0x18],rsi
    650295ff:	mov    QWORD PTR [rsp+0x20],rdi
    65029604:	push   r12
    65029606:	sub    rsp,0x20
    6502960a:	lea    rbx,[rip+0x1964f]        # 0x65042c60
    65029611:	xor    r12d,r12d
    65029614:	lea    rbp,[rip+0x19885]        # 0x65042ea0
    6502961b:	mov    rdi,rbx
    6502961e:	xchg   ax,ax
    65029620:	mov    rsi,QWORD PTR [rdi]
    65029623:	test   rsi,rsi
    65029626:	je     0x65029642
    65029628:	cmp    DWORD PTR [rdi+0x8],0x1
    6502962c:	je     0x65029642
    6502962e:	mov    rcx,rsi
    65029631:	call   QWORD PTR [rip+0xaae9]        # 0x65034120
    65029637:	mov    rcx,rsi
    6502963a:	call   0x6501fa90
    6502963f:	mov    QWORD PTR [rdi],r12
    65029642:	add    rdi,0x10
    65029646:	cmp    rdi,rbp
    65029649:	jl     0x65029620
    6502964b:	xchg   ax,ax
    6502964d:	data16 xchg ax,ax
    65029650:	mov    rcx,QWORD PTR [rbx]
    65029653:	test   rcx,rcx
    65029656:	je     0x65029664
    65029658:	cmp    DWORD PTR [rbx+0x8],0x1
    6502965c:	jne    0x65029664
    6502965e:	call   QWORD PTR [rip+0xaabc]        # 0x65034120
    65029664:	add    rbx,0x10
    65029668:	cmp    rbx,rbp
    6502966b:	jl     0x65029650
    6502966d:	mov    rbx,QWORD PTR [rsp+0x30]
    65029672:	mov    rbp,QWORD PTR [rsp+0x38]
    65029677:	mov    rsi,QWORD PTR [rsp+0x40]
    6502967c:	mov    rdi,QWORD PTR [rsp+0x48]
    65029681:	add    rsp,0x20
    65029685:	pop    r12
    65029687:	ret    
    65029688:	int3   
    65029689:	int3   
    6502968a:	int3   
    6502968b:	int3   
    6502968c:	int3   
    6502968d:	int3   
    6502968e:	int3   
    6502968f:	int3   
    65029690:	movsxd rcx,ecx
    65029693:	lea    rax,[rip+0x195c6]        # 0x65042c60
    6502969a:	add    rcx,rcx
    6502969d:	mov    rcx,QWORD PTR [rax+rcx*8]
    650296a1:	rex.W jmp QWORD PTR [rip+0xaa70]        # 0x65034118
    650296a8:	int3   
    650296a9:	int3   
    650296aa:	int3   
    650296ab:	int3   
    650296ac:	int3   
    650296ad:	int3   
    650296ae:	int3   
    650296af:	int3   
    650296b0:	mov    QWORD PTR [rsp+0x8],rbx
    650296b5:	mov    QWORD PTR [rsp+0x10],rsi
    650296ba:	mov    QWORD PTR [rsp+0x18],rdi
    650296bf:	push   r12
    650296c1:	sub    rsp,0x20
    650296c5:	movsxd rbx,ecx
    650296c8:	mov    esi,0x1
    650296cd:	cmp    QWORD PTR [rip+0x1abdb],0x0        # 0x650442b0
    650296d5:	jne    0x650296ee
    650296d7:	call   0x650292f0
    650296dc:	lea    ecx,[rsi+0x1d]
    650296df:	call   0x650290b0
    650296e4:	mov    ecx,0xff
    650296e9:	call   0x65022b20
    650296ee:	mov    rdi,rbx
    650296f1:	add    rdi,rdi
    650296f4:	lea    r12,[rip+0x19565]        # 0x65042c60
    650296fb:	cmp    QWORD PTR [r12+rdi*8],0x0
    65029700:	je     0x65029706
    65029702:	mov    eax,esi
    65029704:	jmp    0x6502977f
    65029706:	mov    ecx,0x28
    6502970b:	call   0x65022910
    65029710:	mov    rbx,rax
    65029713:	test   rax,rax
    65029716:	jne    0x65029727
    65029718:	call   0x650202b0
    6502971d:	mov    DWORD PTR [rax],0xc
    65029723:	xor    eax,eax
    65029725:	jmp    0x6502977f
    65029727:	mov    ecx,0xa
    6502972c:	call   0x650297c0
    65029731:	nop
    65029732:	cmp    QWORD PTR [r12+rdi*8],0x0
    65029737:	jne    0x65029767
    65029739:	mov    edx,0xfa0
    6502973e:	mov    rcx,rbx
    65029741:	call   0x65029d20
    65029746:	test   eax,eax
    65029748:	jne    0x65029761
    6502974a:	mov    rcx,rbx
    6502974d:	call   0x6501fa90
    65029752:	call   0x650202b0
    65029757:	mov    DWORD PTR [rax],0xc
    6502975d:	xor    esi,esi
    6502975f:	jmp    0x65029770
    65029761:	mov    QWORD PTR [r12+rdi*8],rbx
    65029765:	jmp    0x65029770
    65029767:	mov    rcx,rbx
    6502976a:	call   0x6501fa90
    6502976f:	nop
    65029770:	mov    rcx,QWORD PTR [rip+0x19589]        # 0x65042d00
    65029777:	call   QWORD PTR [rip+0xa99b]        # 0x65034118
    6502977d:	mov    eax,esi
    6502977f:	mov    rbx,QWORD PTR [rsp+0x30]
    65029784:	mov    rsi,QWORD PTR [rsp+0x38]
    65029789:	mov    rdi,QWORD PTR [rsp+0x40]
    6502978e:	add    rsp,0x20
    65029792:	pop    r12
    65029794:	ret    
    65029795:	int3   
    65029796:	int3   
    65029797:	int3   
    65029798:	int3   
    65029799:	int3   
    6502979a:	int3   
    6502979b:	int3   
    6502979c:	int3   
    6502979d:	int3   
    6502979e:	int3   
    6502979f:	int3   
    650297a0:	rex push rbp
    650297a2:	sub    rsp,0x20
    650297a6:	mov    rbp,rdx
    650297a9:	mov    rcx,QWORD PTR [rip+0x19550]        # 0x65042d00
    650297b0:	call   QWORD PTR [rip+0xa962]        # 0x65034118
    650297b6:	add    rsp,0x20
    650297ba:	pop    rbp
    650297bb:	ret    
    650297bc:	int3   
    650297bd:	int3   
    650297be:	int3   
    650297bf:	int3   
    650297c0:	mov    QWORD PTR [rsp+0x8],rbx
    650297c5:	push   rdi
    650297c6:	sub    rsp,0x20
    650297ca:	movsxd rbx,ecx
    650297cd:	lea    rdi,[rip+0x1948c]        # 0x65042c60
    650297d4:	add    rbx,rbx
    650297d7:	cmp    QWORD PTR [rdi+rbx*8],0x0
    650297dc:	jne    0x650297ef
    650297de:	call   0x650296b0
    650297e3:	test   eax,eax
    650297e5:	jne    0x650297ef
    650297e7:	lea    ecx,[rax+0x11]
    650297ea:	call   0x65022af0
    650297ef:	mov    rcx,QWORD PTR [rdi+rbx*8]
    650297f3:	mov    rbx,QWORD PTR [rsp+0x30]
    650297f8:	add    rsp,0x20
    650297fc:	pop    rdi
    650297fd:	rex.W jmp QWORD PTR [rip+0xa90c]        # 0x65034110
    65029804:	int3   
    65029805:	int3   
    65029806:	int3   
    65029807:	int3   
    65029808:	int3   
    65029809:	int3   
    6502980a:	int3   
    6502980b:	int3   
    6502980c:	int3   
    6502980d:	int3   
    6502980e:	int3   
    6502980f:	int3   
    65029810:	mov    rax,QWORD PTR [rsp]
    65029814:	mov    QWORD PTR [rcx],rax
    65029817:	ret    
    65029818:	int3   
    65029819:	int3   
    6502981a:	int3   
    6502981b:	int3   
    6502981c:	int3   
    6502981d:	int3   
    6502981e:	int3   
    6502981f:	int3   
    65029820:	xor    edx,edx
    65029822:	mov    eax,0x1
    65029827:	test   rcx,rcx
    6502982a:	cmove  eax,edx
    6502982d:	ret    
    6502982e:	int3   
    6502982f:	int3   
    65029830:	sub    rsp,0x5a8
    65029837:	test   BYTE PTR [rip+0x19662],0x1        # 0x65042ea0
    6502983e:	je     0x6502984a
    65029840:	mov    ecx,0xa
    65029845:	call   0x650290b0
    6502984a:	call   0x65029a10
    6502984f:	test   rax,rax
    65029852:	je     0x6502985e
    65029854:	mov    ecx,0x16
    65029859:	call   0x65029a20
    6502985e:	test   BYTE PTR [rip+0x1963b],0x2        # 0x65042ea0
    65029865:	je     0x650298c6
    65029867:	lea    rcx,[rsp+0xd0]
    6502986f:	call   QWORD PTR [rip+0xa99b]        # 0x65034210
    65029875:	lea    rcx,[rsp+0x30]
    6502987a:	xor    edx,edx
    6502987c:	mov    r8d,0x98
    65029882:	call   0x6501ee30
    65029887:	mov    rax,QWORD PTR [rsp+0x5a8]
    6502988f:	xor    ecx,ecx
    65029891:	mov    QWORD PTR [rsp+0x40],rax
    65029896:	lea    rax,[rsp+0x30]
    6502989b:	mov    DWORD PTR [rsp+0x30],0x40000015
    650298a3:	mov    QWORD PTR [rsp+0x20],rax
    650298a8:	lea    rax,[rsp+0xd0]
    650298b0:	mov    QWORD PTR [rsp+0x28],rax
    650298b5:	call   QWORD PTR [rip+0xa945]        # 0x65034200
    650298bb:	lea    rcx,[rsp+0x20]
    650298c0:	call   QWORD PTR [rip+0xa932]        # 0x650341f8
    650298c6:	mov    ecx,0x3
    650298cb:	call   0x65022e70
    650298d0:	int3   
    650298d1:	int3   
    650298d2:	int3   
    650298d3:	int3   
    650298d4:	int3   
    650298d5:	int3   
    650298d6:	int3   
    650298d7:	int3   
    650298d8:	int3   
    650298d9:	int3   
    650298da:	int3   
    650298db:	int3   
    650298dc:	int3   
    650298dd:	int3   
    650298de:	int3   
    650298df:	int3   
    650298e0:	mov    QWORD PTR [rsp+0x8],rbx
    650298e5:	push   rdi
    650298e6:	sub    rsp,0x30
    650298ea:	test   rcx,rcx
    650298ed:	mov    rdi,r8
    650298f0:	mov    rbx,rdx
    650298f3:	je     0x65029936
    650298f5:	xor    edx,edx
    650298f7:	mov    rax,0xffffffffffffffe0
    650298fe:	div    rcx
    65029901:	cmp    rax,rbx
    65029904:	jae    0x65029936
    65029906:	call   0x650202b0
    6502990b:	xor    r9d,r9d
    6502990e:	xor    r8d,r8d
    65029911:	xor    edx,edx
    65029913:	xor    ecx,ecx
    65029915:	mov    QWORD PTR [rsp+0x20],0x0
    6502991e:	mov    DWORD PTR [rax],0xc
    65029924:	call   0x6501d850
    65029929:	xor    eax,eax
    6502992b:	mov    rbx,QWORD PTR [rsp+0x40]
    65029930:	add    rsp,0x30
    65029934:	pop    rdi
    65029935:	ret    
    65029936:	imul   rbx,rcx
    6502993a:	mov    eax,0x1
    6502993f:	test   rbx,rbx
    65029942:	cmove  rbx,rax
    65029946:	xor    eax,eax
    65029948:	cmp    rbx,0xffffffffffffffe0
    6502994c:	ja     0x65029966
    6502994e:	mov    rcx,QWORD PTR [rip+0x1a95b]        # 0x650442b0
    65029955:	lea    edx,[rax+0x8]
    65029958:	mov    r8,rbx
    6502995b:	call   QWORD PTR [rip+0xa867]        # 0x650341c8
    65029961:	test   rax,rax
    65029964:	jne    0x6502999e
    65029966:	cmp    DWORD PTR [rip+0x1ad77],0x0        # 0x650446e4
    6502996d:	je     0x65029993
    6502996f:	mov    rcx,rbx
    65029972:	call   0x65020c60
    65029977:	test   eax,eax
    65029979:	jne    0x65029946
    6502997b:	test   rdi,rdi
    6502997e:	je     0x65029986
    65029980:	mov    DWORD PTR [rdi],0xc
    65029986:	xor    eax,eax
    65029988:	mov    rbx,QWORD PTR [rsp+0x40]
    6502998d:	add    rsp,0x30
    65029991:	pop    rdi
    65029992:	ret    
    65029993:	test   rdi,rdi
    65029996:	je     0x6502999e
    65029998:	mov    DWORD PTR [rdi],0xc
    6502999e:	mov    rbx,QWORD PTR [rsp+0x40]
    650299a3:	add    rsp,0x30
    650299a7:	pop    rdi
    650299a8:	ret    
    650299a9:	int3   
    650299aa:	int3   
    650299ab:	int3   
    650299ac:	int3   
    650299ad:	int3   
    650299ae:	int3   
    650299af:	int3   
    650299b0:	mov    QWORD PTR [rsp+0x8],rbx
    650299b5:	push   rdi
    650299b6:	sub    rsp,0x20
    650299ba:	lea    rbx,[rip+0x194ef]        # 0x65042eb0
    650299c1:	mov    edi,0xa
    650299c6:	mov    rcx,QWORD PTR [rbx]
    650299c9:	call   0x650203b0
    650299ce:	add    rbx,0x8
    650299d2:	sub    rdi,0x1
    650299d6:	mov    QWORD PTR [rbx-0x8],rax
    650299da:	jne    0x650299c6
    650299dc:	mov    rbx,QWORD PTR [rsp+0x30]
    650299e1:	add    rsp,0x20
    650299e5:	pop    rdi
    650299e6:	ret    
    650299e7:	int3   
    650299e8:	int3   
    650299e9:	int3   
    650299ea:	int3   
    650299eb:	int3   
    650299ec:	int3   
    650299ed:	int3   
    650299ee:	int3   
    650299ef:	int3   
    650299f0:	mov    QWORD PTR [rip+0x1af99],rcx        # 0x65044990
    650299f7:	mov    QWORD PTR [rip+0x1af9a],rcx        # 0x65044998
    650299fe:	mov    QWORD PTR [rip+0x1af9b],rcx        # 0x650449a0
    65029a05:	mov    QWORD PTR [rip+0x1af9c],rcx        # 0x650449a8
    65029a0c:	ret    
    65029a0d:	int3   
    65029a0e:	int3   
    65029a0f:	int3   
    65029a10:	mov    rcx,QWORD PTR [rip+0x1af89]        # 0x650449a0
    65029a17:	jmp    0x65020570
    65029a1c:	int3   
    65029a1d:	int3   
    65029a1e:	int3   
    65029a1f:	int3   
    65029a20:	mov    QWORD PTR [rsp+0x10],rbx
    65029a25:	mov    QWORD PTR [rsp+0x18],rsi
    65029a2a:	push   rdi
    65029a2b:	push   r12
    65029a2d:	push   r13
    65029a2f:	push   r14
    65029a31:	push   r15
    65029a33:	sub    rsp,0x40
    65029a37:	mov    ebx,ecx
    65029a39:	xor    r14d,r14d
    65029a3c:	mov    edi,r14d
    65029a3f:	mov    DWORD PTR [rsp+0x70],r14d
    65029a44:	mov    rsi,r14
    65029a47:	lea    eax,[rcx-0x2]
    65029a4a:	cmp    eax,0x14
    65029a4d:	ja     0x65029c3e
    65029a53:	cdqe   
    65029a55:	lea    rcx,[rip+0xfffffffffffd65a4]        # 0x65000000
    65029a5c:	movzx  eax,BYTE PTR [rcx+rax*1+0x29c94]
    65029a64:	mov    edx,DWORD PTR [rcx+rax*4+0x29c7c]
    65029a6b:	add    rdx,rcx
    65029a6e:	jmp    rdx
    65029a70:	lea    r12,[rip+0x1af19]        # 0x65044990
    65029a77:	mov    rcx,QWORD PTR [rip+0x1af12]        # 0x65044990
    65029a7e:	mov    edi,0x1
    65029a83:	mov    DWORD PTR [rsp+0x70],edi
    65029a87:	jmp    0x65029ad2
    65029a89:	lea    r12,[rip+0x1af08]        # 0x65044998
    65029a90:	mov    rcx,QWORD PTR [rip+0x1af01]        # 0x65044998
    65029a97:	mov    edi,0x1
    65029a9c:	mov    DWORD PTR [rsp+0x70],edi
    65029aa0:	jmp    0x65029ad2
    65029aa2:	lea    r12,[rip+0x1aef7]        # 0x650449a0
    65029aa9:	mov    rcx,QWORD PTR [rip+0x1aef0]        # 0x650449a0
    65029ab0:	mov    edi,0x1
    65029ab5:	mov    DWORD PTR [rsp+0x70],edi
    65029ab9:	jmp    0x65029ad2
    65029abb:	lea    r12,[rip+0x1aee6]        # 0x650449a8
    65029ac2:	mov    rcx,QWORD PTR [rip+0x1aedf]        # 0x650449a8
    65029ac9:	mov    edi,0x1
    65029ace:	mov    DWORD PTR [rsp+0x70],edi
    65029ad2:	call   0x65020570
    65029ad7:	mov    r13,rax
    65029ada:	jmp    0x65029b39
    65029adc:	call   0x65020830
    65029ae1:	mov    rsi,rax
    65029ae4:	test   rax,rax
    65029ae7:	jne    0x65029af1
    65029ae9:	or     eax,0xffffffff
    65029aec:	jmp    0x65029c60
    65029af1:	mov    rdx,QWORD PTR [rax+0xa0]
    65029af8:	mov    rcx,rdx
    65029afb:	movsxd r8,DWORD PTR [rip+0x18fda]        # 0x65042adc
    65029b02:	cmp    DWORD PTR [rcx+0x4],ebx
    65029b05:	je     0x65029b1a
    65029b07:	add    rcx,0x10
    65029b0b:	mov    rax,r8
    65029b0e:	shl    rax,0x4
    65029b12:	add    rax,rdx
    65029b15:	cmp    rcx,rax
    65029b18:	jb     0x65029b02
    65029b1a:	mov    rax,r8
    65029b1d:	shl    rax,0x4
    65029b21:	add    rax,rdx
    65029b24:	cmp    rcx,rax
    65029b27:	jae    0x65029b2e
    65029b29:	cmp    DWORD PTR [rcx+0x4],ebx
    65029b2c:	je     0x65029b31
    65029b2e:	mov    rcx,r14
    65029b31:	lea    r12,[rcx+0x8]
    65029b35:	mov    r13,QWORD PTR [r12]
    65029b39:	cmp    r13,0x1
    65029b3d:	jne    0x65029b46
    65029b3f:	xor    eax,eax
    65029b41:	jmp    0x65029c60
    65029b46:	test   r13,r13
    65029b49:	jne    0x65029b55
    65029b4b:	lea    ecx,[r13+0x3]
    65029b4f:	call   0x65022e70
    65029b54:	int3   
    65029b55:	test   edi,edi
    65029b57:	je     0x65029b61
    65029b59:	xor    ecx,ecx
    65029b5b:	call   0x650297c0
    65029b60:	nop
    65029b61:	cmp    ebx,0x8
    65029b64:	je     0x65029b7c
    65029b66:	cmp    ebx,0xb
    65029b69:	je     0x65029b7c
    65029b6b:	cmp    ebx,0x4
    65029b6e:	je     0x65029b7c
    65029b70:	mov    r15,QWORD PTR [rsp+0x38]
    65029b75:	mov    r14d,DWORD PTR [rsp+0x70]
    65029b7a:	jmp    0x65029bac
    65029b7c:	mov    r15,QWORD PTR [rsi+0xa8]
    65029b83:	mov    QWORD PTR [rsp+0x38],r15
    65029b88:	mov    QWORD PTR [rsi+0xa8],r14
    65029b8f:	cmp    ebx,0x8
    65029b92:	jne    0x65029ba7
    65029b94:	mov    r14d,DWORD PTR [rsi+0xb0]
    65029b9b:	mov    DWORD PTR [rsi+0xb0],0x8c
    65029ba5:	jmp    0x65029bac
    65029ba7:	mov    r14d,DWORD PTR [rsp+0x70]
    65029bac:	cmp    ebx,0x8
    65029baf:	jne    0x65029bed
    65029bb1:	mov    ecx,DWORD PTR [rip+0x18f19]        # 0x65042ad0
    65029bb7:	mov    edx,ecx
    65029bb9:	mov    DWORD PTR [rsp+0x30],ecx
    65029bbd:	xor    r8d,r8d
    65029bc0:	mov    eax,DWORD PTR [rip+0x18f0e]        # 0x65042ad4
    65029bc6:	add    ecx,eax
    65029bc8:	cmp    edx,ecx
    65029bca:	jge    0x65029bf6
    65029bcc:	movsxd rcx,edx
    65029bcf:	add    rcx,rcx
    65029bd2:	mov    rax,QWORD PTR [rsi+0xa0]
    65029bd9:	mov    QWORD PTR [rax+rcx*8+0x8],r8
    65029bde:	add    edx,0x1
    65029be1:	mov    DWORD PTR [rsp+0x30],edx
    65029be5:	mov    ecx,DWORD PTR [rip+0x18ee5]        # 0x65042ad0
    65029beb:	jmp    0x65029bc0
    65029bed:	call   0x65020480
    65029bf2:	mov    QWORD PTR [r12],rax
    65029bf6:	test   edi,edi
    65029bf8:	je     0x65029c01
    65029bfa:	xor    ecx,ecx
    65029bfc:	call   0x65029690
    65029c01:	cmp    ebx,0x8
    65029c04:	jne    0x65029c13
    65029c06:	mov    edx,DWORD PTR [rsi+0xb0]
    65029c0c:	mov    ecx,ebx
    65029c0e:	call   r13
    65029c11:	jmp    0x65029c18
    65029c13:	mov    ecx,ebx
    65029c15:	call   r13
    65029c18:	cmp    ebx,0x8
    65029c1b:	je     0x65029c27
    65029c1d:	cmp    ebx,0xb
    65029c20:	je     0x65029c27
    65029c22:	cmp    ebx,0x4
    65029c25:	jne    0x65029c3a
    65029c27:	mov    QWORD PTR [rsi+0xa8],r15
    65029c2e:	cmp    ebx,0x8
    65029c31:	jne    0x65029c3a
    65029c33:	mov    DWORD PTR [rsi+0xb0],r14d
    65029c3a:	xor    eax,eax
    65029c3c:	jmp    0x65029c60
    65029c3e:	call   0x650202b0
    65029c43:	mov    DWORD PTR [rax],0x16
    65029c49:	mov    QWORD PTR [rsp+0x20],r14
    65029c4e:	xor    r9d,r9d
    65029c51:	xor    r8d,r8d
    65029c54:	xor    edx,edx
    65029c56:	xor    ecx,ecx
    65029c58:	call   0x6501d850
    65029c5d:	or     eax,0xffffffff
    65029c60:	mov    rbx,QWORD PTR [rsp+0x78]
    65029c65:	mov    rsi,QWORD PTR [rsp+0x80]
    65029c6d:	add    rsp,0x40
    65029c71:	pop    r15
    65029c73:	pop    r14
    65029c75:	pop    r13
    65029c77:	pop    r12
    65029c79:	pop    rdi
    65029c7a:	ret    
    65029c7b:	nop
    65029c7c:	jo     0x65029c18
    65029c7e:	add    al,BYTE PTR [rax]
    65029c80:	fcomp  QWORD PTR [rdx-0x655dfffe]
    65029c86:	add    al,BYTE PTR [rax]
    65029c88:	mov    ebx,0x8900029a
    65029c8d:	(bad)  
    65029c8e:	add    al,BYTE PTR [rax]
    65029c90:	ds pushf 
    65029c92:	add    al,BYTE PTR [rax]
    65029c94:	add    BYTE PTR [rip+0x5020501],al        # 0x6a04a19b
    65029c9a:	add    DWORD PTR [rip+0x5050105],eax        # 0x6a079da5
    65029ca0:	add    eax,0x5050503
    65029ca5:	add    eax,0xcc020405
    65029caa:	int3   
    65029cab:	int3   
    65029cac:	int3   
    65029cad:	int3   
    65029cae:	int3   
    65029caf:	int3   
    65029cb0:	rex push rbp
    65029cb2:	sub    rsp,0x30
    65029cb6:	mov    rbp,rdx
    65029cb9:	cmp    DWORD PTR [rbp+0x70],0x0
    65029cbd:	je     0x65029cc6
    65029cbf:	xor    ecx,ecx
    65029cc1:	call   0x65029690
    65029cc6:	add    rsp,0x30
    65029cca:	pop    rbp
    65029ccb:	ret    
    65029ccc:	int3   
    65029ccd:	int3   
    65029cce:	int3   
    65029ccf:	int3   
    65029cd0:	mov    QWORD PTR [rip+0x1ace1],rcx        # 0x650449b8
    65029cd7:	ret    
    65029cd8:	int3   
    65029cd9:	int3   
    65029cda:	int3   
    65029cdb:	int3   
    65029cdc:	int3   
    65029cdd:	int3   
    65029cde:	int3   
    65029cdf:	int3   
    65029ce0:	mov    QWORD PTR [rip+0x1ace1],rcx        # 0x650449c8
    65029ce7:	ret    
    65029ce8:	int3   
    65029ce9:	int3   
    65029cea:	int3   
    65029ceb:	int3   
    65029cec:	int3   
    65029ced:	int3   
    65029cee:	int3   
    65029cef:	int3   
    65029cf0:	mov    QWORD PTR [rip+0x1acd9],rcx        # 0x650449d0
    65029cf7:	ret    
    65029cf8:	int3   
    65029cf9:	int3   
    65029cfa:	int3   
    65029cfb:	int3   
    65029cfc:	int3   
    65029cfd:	int3   
    65029cfe:	int3   
    65029cff:	int3   
    65029d00:	sub    rsp,0x28
    65029d04:	call   QWORD PTR [rip+0xa326]        # 0x65034030
    65029d0a:	mov    eax,0x1
    65029d0f:	add    rsp,0x28
    65029d13:	ret    
    65029d14:	int3   
    65029d15:	int3   
    65029d16:	int3   
    65029d17:	int3   
    65029d18:	int3   
    65029d19:	int3   
    65029d1a:	int3   
    65029d1b:	int3   
    65029d1c:	int3   
    65029d1d:	int3   
    65029d1e:	int3   
    65029d1f:	int3   
    65029d20:	mov    QWORD PTR [rsp+0x8],rbx
    65029d25:	mov    QWORD PTR [rsp+0x10],rsi
    65029d2a:	mov    QWORD PTR [rsp+0x20],rdi
    65029d2f:	push   r12
    65029d31:	sub    rsp,0x40
    65029d35:	mov    esi,edx
    65029d37:	mov    r12,rcx
    65029d3a:	xor    edi,edi
    65029d3c:	mov    DWORD PTR [rsp+0x60],edi
    65029d40:	mov    rcx,QWORD PTR [rip+0x1ac89]        # 0x650449d0
    65029d47:	call   0x65020570
    65029d4c:	mov    rbx,rax
    65029d4f:	test   rax,rax
    65029d52:	jne    0x65029dcf
    65029d54:	lea    rcx,[rsp+0x60]
    65029d59:	call   0x65022bc0
    65029d5e:	test   eax,eax
    65029d60:	je     0x65029d76
    65029d62:	mov    QWORD PTR [rsp+0x20],rdi
    65029d67:	xor    r9d,r9d
    65029d6a:	xor    r8d,r8d
    65029d6d:	xor    edx,edx
    65029d6f:	xor    ecx,ecx
    65029d71:	call   0x6501d7b0
    65029d76:	cmp    DWORD PTR [rsp+0x60],0x1
    65029d7b:	jne    0x65029d86
    65029d7d:	lea    rbx,[rip+0xffffffffffffff7c]        # 0x65029d00
    65029d84:	jmp    0x65029dc0
    65029d86:	lea    rcx,[rip+0xc65b]        # 0x650363e8
    65029d8d:	call   QWORD PTR [rip+0xa4b5]        # 0x65034248
    65029d93:	test   rax,rax
    65029d96:	je     0x65029db9
    65029d98:	lea    rdx,[rip+0xc621]        # 0x650363c0
    65029d9f:	mov    rcx,rax
    65029da2:	call   QWORD PTR [rip+0xa308]        # 0x650340b0
    65029da8:	mov    rbx,rax
    65029dab:	test   rax,rax
    65029dae:	jne    0x65029dc0
    65029db0:	lea    rbx,[rip+0xffffffffffffff49]        # 0x65029d00
    65029db7:	jmp    0x65029dc0
    65029db9:	lea    rbx,[rip+0xffffffffffffff40]        # 0x65029d00
    65029dc0:	mov    rcx,rbx
    65029dc3:	call   0x650203b0
    65029dc8:	mov    QWORD PTR [rip+0x1ac01],rax        # 0x650449d0
    65029dcf:	mov    edx,esi
    65029dd1:	mov    rcx,r12
    65029dd4:	call   rbx
    65029dd6:	mov    edi,eax
    65029dd8:	mov    DWORD PTR [rsp+0x30],eax
    65029ddc:	jmp    0x65029df6
    65029dde:	cmp    eax,0xc0000017
    65029de3:	jne    0x65029df0
    65029de5:	mov    ecx,0x8
    65029dea:	call   QWORD PTR [rip+0xa318]        # 0x65034108
    65029df0:	xor    edi,edi
    65029df2:	mov    DWORD PTR [rsp+0x30],edi
    65029df6:	mov    eax,edi
    65029df8:	mov    rbx,QWORD PTR [rsp+0x50]
    65029dfd:	mov    rsi,QWORD PTR [rsp+0x58]
    65029e02:	mov    rdi,QWORD PTR [rsp+0x68]
    65029e07:	add    rsp,0x40
    65029e0b:	pop    r12
    65029e0d:	ret    
    65029e0e:	int3   
    65029e0f:	int3   
    65029e10:	rex push rbp
    65029e12:	push   rdi
    65029e13:	sub    rsp,0x38
    65029e17:	mov    rbp,rdx
    65029e1a:	mov    rax,QWORD PTR [rcx]
    65029e1d:	xor    edi,edi
    65029e1f:	cmp    DWORD PTR [rax],0xc0000017
    65029e25:	sete   dil
    65029e29:	mov    eax,edi
    65029e2b:	add    rsp,0x38
    65029e2f:	pop    rdi
    65029e30:	pop    rbp
    65029e31:	ret    
    65029e32:	int3   
    65029e33:	int3   
    65029e34:	int3   
    65029e35:	int3   
    65029e36:	int3   
    65029e37:	int3   
    65029e38:	int3   
    65029e39:	int3   
    65029e3a:	int3   
    65029e3b:	int3   
    65029e3c:	int3   
    65029e3d:	int3   
    65029e3e:	int3   
    65029e3f:	int3   
    65029e40:	mov    DWORD PTR [rsp+0x20],r9d
    65029e45:	push   rbp
    65029e46:	push   r12
    65029e48:	push   r13
    65029e4a:	push   r14
    65029e4c:	push   r15
    65029e4e:	sub    rsp,0x40
    65029e52:	lea    rbp,[rsp+0x30]
    65029e57:	mov    QWORD PTR [rbp+0x40],rbx
    65029e5b:	mov    QWORD PTR [rbp+0x48],rsi
    65029e5f:	mov    QWORD PTR [rbp+0x50],rdi
    65029e63:	mov    rax,QWORD PTR [rip+0x182b6]        # 0x65042120
    65029e6a:	xor    rax,rbp
    65029e6d:	mov    QWORD PTR [rbp+0x8],rax
    65029e71:	mov    eax,DWORD PTR [rip+0x1ab61]        # 0x650449d8
    65029e77:	mov    r14,r8
    65029e7a:	mov    r15d,edx
    65029e7d:	test   eax,eax
    65029e7f:	mov    r12,rcx
    65029e82:	jne    0x65029efe
    65029e84:	mov    r8d,0x1
    65029e8a:	lea    r9,[rbp+0x0]
    65029e8e:	lea    rdx,[rip+0xd10f]        # 0x65036fa4
    65029e95:	mov    ecx,r8d
    65029e98:	call   QWORD PTR [rip+0xa2c2]        # 0x65034160
    65029e9e:	test   eax,eax
    65029ea0:	je     0x65029eae
    65029ea2:	mov    DWORD PTR [rip+0x1ab2c],0x1        # 0x650449d8
    65029eac:	jmp    0x65029f0c
    65029eae:	call   QWORD PTR [rip+0xa1c4]        # 0x65034078
    65029eb4:	cmp    eax,0x78
    65029eb7:	jne    0x65029ef8
    65029eb9:	mov    DWORD PTR [rip+0x1ab15],0x2        # 0x650449d8
    65029ec3:	mov    esi,DWORD PTR [rbp+0x70]
    65029ec6:	xor    edi,edi
    65029ec8:	test   esi,esi
    65029eca:	jne    0x65029ed3
    65029ecc:	mov    rax,QWORD PTR [r12]
    65029ed0:	mov    esi,DWORD PTR [rax+0x14]
    65029ed3:	mov    ebx,DWORD PTR [rbp+0x68]
    65029ed6:	test   ebx,ebx
    65029ed8:	jne    0x65029ee1
    65029eda:	mov    rax,QWORD PTR [r12]
    65029ede:	mov    ebx,DWORD PTR [rax+0x4]
    65029ee1:	mov    ecx,esi
    65029ee3:	call   0x6502ccf0
    65029ee8:	cmp    eax,0xffffffff
    65029eeb:	jne    0x6502a01a
    65029ef1:	xor    eax,eax
    65029ef3:	jmp    0x6502a072
    65029ef8:	mov    eax,DWORD PTR [rip+0x1aada]        # 0x650449d8
    65029efe:	cmp    eax,0x2
    65029f01:	je     0x65029ec3
    65029f03:	test   eax,eax
    65029f05:	je     0x65029ec3
    65029f07:	cmp    eax,0x1
    65029f0a:	jne    0x65029ef1
    65029f0c:	mov    esi,DWORD PTR [rbp+0x68]
    65029f0f:	xor    edi,edi
    65029f11:	test   esi,esi
    65029f13:	jne    0x65029f1c
    65029f15:	mov    rax,QWORD PTR [r12]
    65029f19:	mov    esi,DWORD PTR [rax+0x4]
    65029f1c:	cmp    DWORD PTR [rbp+0x78],edi
    65029f1f:	mov    r9d,DWORD PTR [rbp+0x58]
    65029f23:	mov    edx,0x1
    65029f28:	mov    eax,0x9
    65029f2d:	mov    r8,r14
    65029f30:	mov    ecx,esi
    65029f32:	cmovne edx,eax
    65029f35:	mov    DWORD PTR [rsp+0x28],edi
    65029f39:	mov    QWORD PTR [rsp+0x20],rdi
    65029f3e:	call   QWORD PTR [rip+0xa0f4]        # 0x65034038
    65029f44:	test   eax,eax
    65029f46:	movsxd r12,eax
    65029f49:	je     0x65029ef1
    65029f4b:	jle    0x65029ef1
    65029f4d:	movabs rax,0x7ffffffffffffff0
    65029f57:	cmp    r12,rax
    65029f5a:	ja     0x65029ef1
    65029f5c:	lea    rcx,[r12+r12*1+0x10]
    65029f61:	cmp    rcx,0x400
    65029f68:	ja     0x65029f9f
    65029f6a:	lea    rax,[rcx+0xf]
    65029f6e:	cmp    rax,rcx
    65029f71:	ja     0x65029f7d
    65029f73:	movabs rax,0xffffffffffffff0
    65029f7d:	and    rax,0xfffffffffffffff0
    65029f81:	call   0x650330c0
    65029f86:	sub    rsp,rax
    65029f89:	lea    rbx,[rsp+0x30]
    65029f8e:	test   rbx,rbx
    65029f91:	je     0x65029ef1
    65029f97:	mov    DWORD PTR [rbx],0xcccc
    65029f9d:	jmp    0x65029fb2
    65029f9f:	call   0x6501fae0
    65029fa4:	test   rax,rax
    65029fa7:	mov    rbx,rax
    65029faa:	je     0x65029fb6
    65029fac:	mov    DWORD PTR [rax],0xdddd
    65029fb2:	add    rbx,0x10
    65029fb6:	test   rbx,rbx
    65029fb9:	je     0x65029ef1
    65029fbf:	lea    r8,[r12+r12*1]
    65029fc3:	xor    edx,edx
    65029fc5:	mov    rcx,rbx
    65029fc8:	call   0x6501ee30
    65029fcd:	mov    r9d,DWORD PTR [rbp+0x58]
    65029fd1:	mov    r8,r14
    65029fd4:	mov    edx,0x1
    65029fd9:	mov    ecx,esi
    65029fdb:	mov    DWORD PTR [rsp+0x28],r12d
    65029fe0:	mov    QWORD PTR [rsp+0x20],rbx
    65029fe5:	call   QWORD PTR [rip+0xa04d]        # 0x65034038
    65029feb:	test   eax,eax
    65029fed:	je     0x6502a004
    65029fef:	mov    r9,QWORD PTR [rbp+0x60]
    65029ff3:	mov    r8d,eax
    65029ff6:	mov    rdx,rbx
    65029ff9:	mov    ecx,r15d
    65029ffc:	call   QWORD PTR [rip+0xa15e]        # 0x65034160
    6502a002:	mov    edi,eax
    6502a004:	cmp    DWORD PTR [rbx-0x10],0xdddd
    6502a00b:	lea    rcx,[rbx-0x10]
    6502a00f:	jne    0x6502a016
    6502a011:	call   0x6501fa90
    6502a016:	mov    eax,edi
    6502a018:	jmp    0x6502a072
    6502a01a:	cmp    eax,ebx
    6502a01c:	je     0x6502a046
    6502a01e:	lea    r9,[rbp+0x58]
    6502a022:	mov    r8,r14
    6502a025:	mov    edx,eax
    6502a027:	mov    ecx,ebx
    6502a029:	mov    DWORD PTR [rsp+0x28],edi
    6502a02d:	mov    QWORD PTR [rsp+0x20],rdi
    6502a032:	call   0x6502cd60
    6502a037:	test   rax,rax
    6502a03a:	mov    rdi,rax
    6502a03d:	je     0x65029ef1
    6502a043:	mov    r14,rax
    6502a046:	mov    rax,QWORD PTR [rbp+0x60]
    6502a04a:	mov    r9d,DWORD PTR [rbp+0x58]
    6502a04e:	mov    r8,r14
    6502a051:	mov    edx,r15d
    6502a054:	mov    ecx,esi
    6502a056:	mov    QWORD PTR [rsp+0x20],rax
    6502a05b:	call   QWORD PTR [rip+0xa107]        # 0x65034168
    6502a061:	test   rdi,rdi
    6502a064:	mov    ebx,eax
    6502a066:	je     0x6502a070
    6502a068:	mov    rcx,rdi
    6502a06b:	call   0x6501fa90
    6502a070:	mov    eax,ebx
    6502a072:	mov    rcx,QWORD PTR [rbp+0x8]
    6502a076:	xor    rcx,rbp
    6502a079:	call   0x6501e4e0
    6502a07e:	mov    rbx,QWORD PTR [rbp+0x40]
    6502a082:	mov    rsi,QWORD PTR [rbp+0x48]
    6502a086:	mov    rdi,QWORD PTR [rbp+0x50]
    6502a08a:	lea    rsp,[rbp+0x10]
    6502a08e:	pop    r15
    6502a090:	pop    r14
    6502a092:	pop    r13
    6502a094:	pop    r12
    6502a096:	pop    rbp
    6502a097:	ret    
    6502a098:	int3   
    6502a099:	int3   
    6502a09a:	int3   
    6502a09b:	int3   
    6502a09c:	int3   
    6502a09d:	int3   
    6502a09e:	int3   
    6502a09f:	int3   
    6502a0a0:	mov    rax,rsp
    6502a0a3:	push   rbx
    6502a0a4:	sub    rsp,0x70
    6502a0a8:	mov    QWORD PTR [rax+0x8],rbp
    6502a0ac:	mov    QWORD PTR [rax+0x18],rdi
    6502a0b0:	xor    dil,dil
    6502a0b3:	test   rcx,rcx
    6502a0b6:	mov    QWORD PTR [rax-0x10],r12
    6502a0ba:	mov    QWORD PTR [rax-0x18],r13
    6502a0be:	mov    BYTE PTR [rax-0x20],dil
    6502a0c2:	mov    ebp,r9d
    6502a0c5:	mov    r12,r8
    6502a0c8:	mov    r13d,edx
    6502a0cb:	jne    0x6502a15e
    6502a0d1:	mov    QWORD PTR [rax+0x10],rsi
    6502a0d5:	call   0x650208c0
    6502a0da:	mov    rcx,QWORD PTR [rax+0xc0]
    6502a0e1:	mov    rsi,QWORD PTR [rax+0xb8]
    6502a0e8:	mov    rbx,rax
    6502a0eb:	cmp    rcx,QWORD PTR [rip+0x188ae]        # 0x650429a0
    6502a0f2:	mov    QWORD PTR [rsp+0x50],rax
    6502a0f7:	mov    QWORD PTR [rsp+0x40],rcx
    6502a0fc:	mov    QWORD PTR [rsp+0x48],rsi
    6502a101:	je     0x6502a11b
    6502a103:	mov    ecx,DWORD PTR [rax+0xc8]
    6502a109:	test   DWORD PTR [rip+0x18719],ecx        # 0x65042828
    6502a10f:	jne    0x6502a11b
    6502a111:	call   0x65023d20
    6502a116:	mov    QWORD PTR [rsp+0x40],rax
    6502a11b:	cmp    rsi,QWORD PTR [rip+0x185fe]        # 0x65042720
    6502a122:	mov    rsi,QWORD PTR [rsp+0x88]
    6502a12a:	je     0x6502a144
    6502a12c:	mov    eax,DWORD PTR [rbx+0xc8]
    6502a132:	test   DWORD PTR [rip+0x186f0],eax        # 0x65042828
    6502a138:	jne    0x6502a144
    6502a13a:	call   0x650231d0
    6502a13f:	mov    QWORD PTR [rsp+0x48],rax
    6502a144:	test   BYTE PTR [rbx+0xc8],0x2
    6502a14b:	jne    0x6502a17b
    6502a14d:	or     DWORD PTR [rbx+0xc8],0x2
    6502a154:	mov    dil,0x1
    6502a157:	mov    BYTE PTR [rsp+0x58],dil
    6502a15c:	jmp    0x6502a17b
    6502a15e:	mov    rax,QWORD PTR [rcx]
    6502a161:	lea    rdx,[rsp+0x40]
    6502a166:	mov    QWORD PTR [rdx],rax
    6502a169:	mov    rax,QWORD PTR [rcx+0x8]
    6502a16d:	mov    QWORD PTR [rdx+0x8],rax
    6502a171:	movzx  edi,BYTE PTR [rsp+0x58]
    6502a176:	mov    rbx,QWORD PTR [rsp+0x50]
    6502a17b:	mov    eax,DWORD PTR [rsp+0xb8]
    6502a182:	lea    rcx,[rsp+0x40]
    6502a187:	mov    r9d,ebp
    6502a18a:	mov    DWORD PTR [rsp+0x38],eax
    6502a18e:	mov    eax,DWORD PTR [rsp+0xb0]
    6502a195:	mov    r8,r12
    6502a198:	mov    DWORD PTR [rsp+0x30],eax
    6502a19c:	mov    eax,DWORD PTR [rsp+0xa8]
    6502a1a3:	mov    edx,r13d
    6502a1a6:	mov    DWORD PTR [rsp+0x28],eax
    6502a1aa:	mov    rax,QWORD PTR [rsp+0xa0]
    6502a1b2:	mov    QWORD PTR [rsp+0x20],rax
    6502a1b7:	call   0x65029e40
    6502a1bc:	mov    r13,QWORD PTR [rsp+0x60]
    6502a1c1:	mov    r12,QWORD PTR [rsp+0x68]
    6502a1c6:	mov    rbp,QWORD PTR [rsp+0x80]
    6502a1ce:	test   dil,dil
    6502a1d1:	mov    rdi,QWORD PTR [rsp+0x90]
    6502a1d9:	je     0x6502a1e2
    6502a1db:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502a1e2:	add    rsp,0x70
    6502a1e6:	pop    rbx
    6502a1e7:	ret    
    6502a1e8:	int3   
    6502a1e9:	int3   
    6502a1ea:	int3   
    6502a1eb:	int3   
    6502a1ec:	int3   
    6502a1ed:	int3   
    6502a1ee:	int3   
    6502a1ef:	int3   
    6502a1f0:	test   rcx,rcx
    6502a1f3:	je     0x6502a3d9
    6502a1f9:	push   rbx
    6502a1fa:	sub    rsp,0x20
    6502a1fe:	mov    rbx,rcx
    6502a201:	mov    rcx,QWORD PTR [rcx+0x8]
    6502a205:	call   0x6501fa90
    6502a20a:	mov    rcx,QWORD PTR [rbx+0x10]
    6502a20e:	call   0x6501fa90
    6502a213:	mov    rcx,QWORD PTR [rbx+0x18]
    6502a217:	call   0x6501fa90
    6502a21c:	mov    rcx,QWORD PTR [rbx+0x20]
    6502a220:	call   0x6501fa90
    6502a225:	mov    rcx,QWORD PTR [rbx+0x28]
    6502a229:	call   0x6501fa90
    6502a22e:	mov    rcx,QWORD PTR [rbx+0x30]
    6502a232:	call   0x6501fa90
    6502a237:	mov    rcx,QWORD PTR [rbx]
    6502a23a:	call   0x6501fa90
    6502a23f:	mov    rcx,QWORD PTR [rbx+0x40]
    6502a243:	call   0x6501fa90
    6502a248:	mov    rcx,QWORD PTR [rbx+0x48]
    6502a24c:	call   0x6501fa90
    6502a251:	mov    rcx,QWORD PTR [rbx+0x50]
    6502a255:	call   0x6501fa90
    6502a25a:	mov    rcx,QWORD PTR [rbx+0x58]
    6502a25e:	call   0x6501fa90
    6502a263:	mov    rcx,QWORD PTR [rbx+0x60]
    6502a267:	call   0x6501fa90
    6502a26c:	mov    rcx,QWORD PTR [rbx+0x68]
    6502a270:	call   0x6501fa90
    6502a275:	mov    rcx,QWORD PTR [rbx+0x38]
    6502a279:	call   0x6501fa90
    6502a27e:	mov    rcx,QWORD PTR [rbx+0x70]
    6502a282:	call   0x6501fa90
    6502a287:	mov    rcx,QWORD PTR [rbx+0x78]
    6502a28b:	call   0x6501fa90
    6502a290:	mov    rcx,QWORD PTR [rbx+0x80]
    6502a297:	call   0x6501fa90
    6502a29c:	mov    rcx,QWORD PTR [rbx+0x88]
    6502a2a3:	call   0x6501fa90
    6502a2a8:	mov    rcx,QWORD PTR [rbx+0x90]
    6502a2af:	call   0x6501fa90
    6502a2b4:	mov    rcx,QWORD PTR [rbx+0x98]
    6502a2bb:	call   0x6501fa90
    6502a2c0:	mov    rcx,QWORD PTR [rbx+0xa0]
    6502a2c7:	call   0x6501fa90
    6502a2cc:	mov    rcx,QWORD PTR [rbx+0xa8]
    6502a2d3:	call   0x6501fa90
    6502a2d8:	mov    rcx,QWORD PTR [rbx+0xb0]
    6502a2df:	call   0x6501fa90
    6502a2e4:	mov    rcx,QWORD PTR [rbx+0xb8]
    6502a2eb:	call   0x6501fa90
    6502a2f0:	mov    rcx,QWORD PTR [rbx+0xc0]
    6502a2f7:	call   0x6501fa90
    6502a2fc:	mov    rcx,QWORD PTR [rbx+0xc8]
    6502a303:	call   0x6501fa90
    6502a308:	mov    rcx,QWORD PTR [rbx+0xd0]
    6502a30f:	call   0x6501fa90
    6502a314:	mov    rcx,QWORD PTR [rbx+0xd8]
    6502a31b:	call   0x6501fa90
    6502a320:	mov    rcx,QWORD PTR [rbx+0xe0]
    6502a327:	call   0x6501fa90
    6502a32c:	mov    rcx,QWORD PTR [rbx+0xe8]
    6502a333:	call   0x6501fa90
    6502a338:	mov    rcx,QWORD PTR [rbx+0xf0]
    6502a33f:	call   0x6501fa90
    6502a344:	mov    rcx,QWORD PTR [rbx+0xf8]
    6502a34b:	call   0x6501fa90
    6502a350:	mov    rcx,QWORD PTR [rbx+0x100]
    6502a357:	call   0x6501fa90
    6502a35c:	mov    rcx,QWORD PTR [rbx+0x108]
    6502a363:	call   0x6501fa90
    6502a368:	mov    rcx,QWORD PTR [rbx+0x110]
    6502a36f:	call   0x6501fa90
    6502a374:	mov    rcx,QWORD PTR [rbx+0x118]
    6502a37b:	call   0x6501fa90
    6502a380:	mov    rcx,QWORD PTR [rbx+0x120]
    6502a387:	call   0x6501fa90
    6502a38c:	mov    rcx,QWORD PTR [rbx+0x128]
    6502a393:	call   0x6501fa90
    6502a398:	mov    rcx,QWORD PTR [rbx+0x130]
    6502a39f:	call   0x6501fa90
    6502a3a4:	mov    rcx,QWORD PTR [rbx+0x138]
    6502a3ab:	call   0x6501fa90
    6502a3b0:	mov    rcx,QWORD PTR [rbx+0x140]
    6502a3b7:	call   0x6501fa90
    6502a3bc:	mov    rcx,QWORD PTR [rbx+0x148]
    6502a3c3:	call   0x6501fa90
    6502a3c8:	mov    rcx,QWORD PTR [rbx+0x150]
    6502a3cf:	call   0x6501fa90
    6502a3d4:	add    rsp,0x20
    6502a3d8:	pop    rbx
    6502a3d9:	ret    0x0
    6502a3dc:	int3   
    6502a3dd:	int3   
    6502a3de:	int3   
    6502a3df:	int3   
    6502a3e0:	test   rcx,rcx
    6502a3e3:	je     0x6502a427
    6502a3e5:	push   rbx
    6502a3e6:	sub    rsp,0x20
    6502a3ea:	mov    rbx,rcx
    6502a3ed:	mov    rcx,QWORD PTR [rcx]
    6502a3f0:	cmp    rcx,QWORD PTR [rip+0x18c99]        # 0x65043090
    6502a3f7:	je     0x6502a3fe
    6502a3f9:	call   0x6501fa90
    6502a3fe:	mov    rcx,QWORD PTR [rbx+0x8]
    6502a402:	cmp    rcx,QWORD PTR [rip+0x18c8f]        # 0x65043098
    6502a409:	je     0x6502a410
    6502a40b:	call   0x6501fa90
    6502a410:	mov    rcx,QWORD PTR [rbx+0x10]
    6502a414:	cmp    rcx,QWORD PTR [rip+0x18c85]        # 0x650430a0
    6502a41b:	je     0x6502a422
    6502a41d:	call   0x6501fa90
    6502a422:	add    rsp,0x20
    6502a426:	pop    rbx
    6502a427:	ret    0x0
    6502a42a:	int3   
    6502a42b:	int3   
    6502a42c:	int3   
    6502a42d:	int3   
    6502a42e:	int3   
    6502a42f:	int3   
    6502a430:	test   rcx,rcx
    6502a433:	je     0x6502a4c4
    6502a439:	push   rbx
    6502a43a:	sub    rsp,0x20
    6502a43e:	mov    rbx,rcx
    6502a441:	mov    rcx,QWORD PTR [rcx+0x18]
    6502a445:	cmp    rcx,QWORD PTR [rip+0x18c5c]        # 0x650430a8
    6502a44c:	je     0x6502a453
    6502a44e:	call   0x6501fa90
    6502a453:	mov    rcx,QWORD PTR [rbx+0x20]
    6502a457:	cmp    rcx,QWORD PTR [rip+0x18c52]        # 0x650430b0
    6502a45e:	je     0x6502a465
    6502a460:	call   0x6501fa90
    6502a465:	mov    rcx,QWORD PTR [rbx+0x28]
    6502a469:	cmp    rcx,QWORD PTR [rip+0x18c48]        # 0x650430b8
    6502a470:	je     0x6502a477
    6502a472:	call   0x6501fa90
    6502a477:	mov    rcx,QWORD PTR [rbx+0x30]
    6502a47b:	cmp    rcx,QWORD PTR [rip+0x18c3e]        # 0x650430c0
    6502a482:	je     0x6502a489
    6502a484:	call   0x6501fa90
    6502a489:	mov    rcx,QWORD PTR [rbx+0x38]
    6502a48d:	cmp    rcx,QWORD PTR [rip+0x18c34]        # 0x650430c8
    6502a494:	je     0x6502a49b
    6502a496:	call   0x6501fa90
    6502a49b:	mov    rcx,QWORD PTR [rbx+0x40]
    6502a49f:	cmp    rcx,QWORD PTR [rip+0x18c2a]        # 0x650430d0
    6502a4a6:	je     0x6502a4ad
    6502a4a8:	call   0x6501fa90
    6502a4ad:	mov    rcx,QWORD PTR [rbx+0x48]
    6502a4b1:	cmp    rcx,QWORD PTR [rip+0x18c20]        # 0x650430d8
    6502a4b8:	je     0x6502a4bf
    6502a4ba:	call   0x6501fa90
    6502a4bf:	add    rsp,0x20
    6502a4c3:	pop    rbx
    6502a4c4:	ret    0x0
    6502a4c7:	int3   
    6502a4c8:	int3   
    6502a4c9:	int3   
    6502a4ca:	int3   
    6502a4cb:	int3   
    6502a4cc:	int3   
    6502a4cd:	int3   
    6502a4ce:	int3   
    6502a4cf:	int3   
    6502a4d0:	sub    rsp,0x38
    6502a4d4:	test   rcx,rcx
    6502a4d7:	mov    r9,rcx
    6502a4da:	je     0x6502a4e9
    6502a4dc:	test   rdx,rdx
    6502a4df:	je     0x6502a4e9
    6502a4e1:	test   r8,r8
    6502a4e4:	jne    0x6502a516
    6502a4e6:	mov    BYTE PTR [rcx],r8b
    6502a4e9:	call   0x650202b0
    6502a4ee:	xor    r9d,r9d
    6502a4f1:	xor    r8d,r8d
    6502a4f4:	xor    edx,edx
    6502a4f6:	xor    ecx,ecx
    6502a4f8:	mov    QWORD PTR [rsp+0x20],0x0
    6502a501:	mov    DWORD PTR [rax],0x16
    6502a507:	call   0x6501d850
    6502a50c:	mov    eax,0x16
    6502a511:	add    rsp,0x38
    6502a515:	ret    
    6502a516:	cmp    BYTE PTR [rcx],0x0
    6502a519:	je     0x6502a525
    6502a51b:	add    rcx,0x1
    6502a51f:	sub    rdx,0x1
    6502a523:	jne    0x6502a516
    6502a525:	test   rdx,rdx
    6502a528:	jne    0x6502a530
    6502a52a:	mov    BYTE PTR [r9],dl
    6502a52d:	jmp    0x6502a4e9
    6502a52f:	nop
    6502a530:	movzx  eax,BYTE PTR [r8]
    6502a534:	add    rcx,0x1
    6502a538:	add    r8,0x1
    6502a53c:	test   al,al
    6502a53e:	mov    BYTE PTR [rcx-0x1],al
    6502a541:	je     0x6502a549
    6502a543:	sub    rdx,0x1
    6502a547:	jne    0x6502a530
    6502a549:	test   rdx,rdx
    6502a54c:	jne    0x6502a57e
    6502a54e:	mov    BYTE PTR [r9],dl
    6502a551:	call   0x650202b0
    6502a556:	xor    r9d,r9d
    6502a559:	xor    r8d,r8d
    6502a55c:	xor    edx,edx
    6502a55e:	xor    ecx,ecx
    6502a560:	mov    DWORD PTR [rax],0x22
    6502a566:	mov    QWORD PTR [rsp+0x20],0x0
    6502a56f:	call   0x6501d850
    6502a574:	mov    eax,0x22
    6502a579:	add    rsp,0x38
    6502a57d:	ret    
    6502a57e:	xor    eax,eax
    6502a580:	add    rsp,0x38
    6502a584:	ret    
    6502a585:	int3   
    6502a586:	int3   
    6502a587:	int3   
    6502a588:	int3   
    6502a589:	int3   
    6502a58a:	int3   
    6502a58b:	int3   
    6502a58c:	int3   
    6502a58d:	int3   
    6502a58e:	int3   
    6502a58f:	int3   
    6502a590:	sub    rsp,0x38
    6502a594:	test   r9,r9
    6502a597:	mov    r11,rdx
    6502a59a:	mov    r10,rcx
    6502a59d:	jne    0x6502a5b0
    6502a59f:	test   rcx,rcx
    6502a5a2:	jne    0x6502a5b5
    6502a5a4:	test   rdx,rdx
    6502a5a7:	jne    0x6502a5d1
    6502a5a9:	xor    eax,eax
    6502a5ab:	add    rsp,0x38
    6502a5af:	ret    
    6502a5b0:	test   rcx,rcx
    6502a5b3:	je     0x6502a5d1
    6502a5b5:	test   rdx,rdx
    6502a5b8:	je     0x6502a5d1
    6502a5ba:	test   r9,r9
    6502a5bd:	jne    0x6502a5c9
    6502a5bf:	mov    BYTE PTR [rcx],r9b
    6502a5c2:	xor    eax,eax
    6502a5c4:	add    rsp,0x38
    6502a5c8:	ret    
    6502a5c9:	test   r8,r8
    6502a5cc:	jne    0x6502a5fe
    6502a5ce:	mov    BYTE PTR [rcx],r8b
    6502a5d1:	call   0x650202b0
    6502a5d6:	xor    r9d,r9d
    6502a5d9:	xor    r8d,r8d
    6502a5dc:	xor    edx,edx
    6502a5de:	xor    ecx,ecx
    6502a5e0:	mov    QWORD PTR [rsp+0x20],0x0
    6502a5e9:	mov    DWORD PTR [rax],0x16
    6502a5ef:	call   0x6501d850
    6502a5f4:	mov    eax,0x16
    6502a5f9:	add    rsp,0x38
    6502a5fd:	ret    
    6502a5fe:	cmp    r9,0xffffffffffffffff
    6502a602:	mov    rdx,rcx
    6502a605:	mov    rcx,r11
    6502a608:	jne    0x6502a630
    6502a60a:	data16 xchg ax,ax
    6502a60d:	data16 xchg ax,ax
    6502a610:	movzx  eax,BYTE PTR [r8]
    6502a614:	add    rdx,0x1
    6502a618:	add    r8,0x1
    6502a61c:	test   al,al
    6502a61e:	mov    BYTE PTR [rdx-0x1],al
    6502a621:	je     0x6502a657
    6502a623:	sub    rcx,0x1
    6502a627:	jne    0x6502a610
    6502a629:	jmp    0x6502a657
    6502a62b:	xchg   ax,ax
    6502a62d:	data16 xchg ax,ax
    6502a630:	movzx  eax,BYTE PTR [r8]
    6502a634:	add    rdx,0x1
    6502a638:	add    r8,0x1
    6502a63c:	test   al,al
    6502a63e:	mov    BYTE PTR [rdx-0x1],al
    6502a641:	je     0x6502a64f
    6502a643:	sub    rcx,0x1
    6502a647:	je     0x6502a64f
    6502a649:	sub    r9,0x1
    6502a64d:	jne    0x6502a630
    6502a64f:	test   r9,r9
    6502a652:	jne    0x6502a657
    6502a654:	mov    BYTE PTR [rdx],r9b
    6502a657:	test   rcx,rcx
    6502a65a:	jne    0x6502a5a9
    6502a660:	cmp    r9,0xffffffffffffffff
    6502a664:	jne    0x6502a673
    6502a666:	mov    BYTE PTR [r10+r11*1-0x1],cl
    6502a66b:	lea    eax,[rcx+0x50]
    6502a66e:	add    rsp,0x38
    6502a672:	ret    
    6502a673:	mov    BYTE PTR [r10],0x0
    6502a677:	call   0x650202b0
    6502a67c:	xor    r9d,r9d
    6502a67f:	xor    r8d,r8d
    6502a682:	xor    edx,edx
    6502a684:	xor    ecx,ecx
    6502a686:	mov    DWORD PTR [rax],0x22
    6502a68c:	mov    QWORD PTR [rsp+0x20],0x0
    6502a695:	call   0x6501d850
    6502a69a:	mov    eax,0x22
    6502a69f:	add    rsp,0x38
    6502a6a3:	ret    
    6502a6a4:	int3   
    6502a6a5:	int3   
    6502a6a6:	int3   
    6502a6a7:	int3   
    6502a6a8:	int3   
    6502a6a9:	int3   
    6502a6aa:	int3   
    6502a6ab:	int3   
    6502a6ac:	int3   
    6502a6ad:	int3   
    6502a6ae:	int3   
    6502a6af:	int3   
    6502a6b0:	int3   
    6502a6b1:	int3   
    6502a6b2:	int3   
    6502a6b3:	int3   
    6502a6b4:	int3   
    6502a6b5:	int3   
    6502a6b6:	data16 data16 xchg ax,ax
    6502a6ba:	data16 data16 xchg ax,ax
    6502a6be:	xchg   ax,ax
    6502a6c0:	test   r8,r8
    6502a6c3:	je     0x6502a73a
    6502a6c5:	sub    rdx,rcx
    6502a6c8:	mov    r9,rdx
    6502a6cb:	movabs r11,0x8101010101010100
    6502a6d5:	test   cl,0x7
    6502a6d8:	je     0x6502a6f9
    6502a6da:	mov    al,BYTE PTR [rcx]
    6502a6dc:	mov    dl,BYTE PTR [rcx+r9*1]
    6502a6e0:	inc    rcx
    6502a6e3:	cmp    al,dl
    6502a6e5:	jne    0x6502a73e
    6502a6e7:	dec    r8
    6502a6ea:	je     0x6502a73a
    6502a6ec:	test   al,al
    6502a6ee:	je     0x6502a73a
    6502a6f0:	test   rcx,0x7
    6502a6f7:	jne    0x6502a6da
    6502a6f9:	lea    rdx,[rcx+r9*1]
    6502a6fd:	and    dx,0xfff
    6502a702:	cmp    dx,0xff8
    6502a707:	ja     0x6502a6da
    6502a709:	mov    rax,QWORD PTR [rcx]
    6502a70c:	mov    rdx,QWORD PTR [rcx+r9*1]
    6502a710:	cmp    rax,rdx
    6502a713:	jne    0x6502a6da
    6502a715:	add    rcx,0x8
    6502a719:	sub    r8,0x8
    6502a71d:	movabs r10,0x7efefefefefefeff
    6502a727:	jbe    0x6502a73a
    6502a729:	xor    rax,0xffffffffffffffff
    6502a72d:	add    r10,rdx
    6502a730:	xor    rax,r10
    6502a733:	test   r11,rax
    6502a736:	je     0x6502a6f9
    6502a738:	jmp    0x6502a746
    6502a73a:	xor    rax,rax
    6502a73d:	ret    
    6502a73e:	sbb    rax,rax
    6502a741:	sbb    rax,0xffffffffffffffff
    6502a745:	ret    
    6502a746:	test   dl,dl
    6502a748:	je     0x6502a771
    6502a74a:	test   dh,dh
    6502a74c:	je     0x6502a771
    6502a74e:	shr    rdx,0x10
    6502a752:	test   dl,dl
    6502a754:	je     0x6502a771
    6502a756:	test   dh,dh
    6502a758:	je     0x6502a771
    6502a75a:	shr    rdx,0x10
    6502a75e:	test   dl,dl
    6502a760:	je     0x6502a771
    6502a762:	test   dh,dh
    6502a764:	je     0x6502a771
    6502a766:	shr    edx,0x10
    6502a769:	test   dl,dl
    6502a76b:	je     0x6502a771
    6502a76d:	test   dh,dh
    6502a76f:	jne    0x6502a6f9
    6502a771:	xor    rax,rax
    6502a774:	ret    
    6502a775:	int3   
    6502a776:	int3   
    6502a777:	int3   
    6502a778:	int3   
    6502a779:	int3   
    6502a77a:	int3   
    6502a77b:	int3   
    6502a77c:	int3   
    6502a77d:	int3   
    6502a77e:	int3   
    6502a77f:	int3   
    6502a780:	mov    QWORD PTR [rsp+0x8],rbx
    6502a785:	push   rdi
    6502a786:	sub    rsp,0x20
    6502a78a:	movsxd rbx,ecx
    6502a78d:	mov    edi,r8d
    6502a790:	mov    QWORD PTR [rsp+0x38],rdx
    6502a795:	mov    ecx,ebx
    6502a797:	call   0x6502d730
    6502a79c:	cmp    rax,0xffffffffffffffff
    6502a7a0:	jne    0x6502a7bc
    6502a7a2:	call   0x650202b0
    6502a7a7:	mov    DWORD PTR [rax],0x9
    6502a7ad:	or     rax,0xffffffffffffffff
    6502a7b1:	mov    rbx,QWORD PTR [rsp+0x30]
    6502a7b6:	add    rsp,0x20
    6502a7ba:	pop    rdi
    6502a7bb:	ret    
    6502a7bc:	mov    edx,DWORD PTR [rsp+0x38]
    6502a7c0:	lea    r8,[rsp+0x3c]
    6502a7c5:	mov    r9d,edi
    6502a7c8:	mov    rcx,rax
    6502a7cb:	call   QWORD PTR [rip+0x999f]        # 0x65034170
    6502a7d1:	cmp    eax,0xffffffff
    6502a7d4:	mov    DWORD PTR [rsp+0x38],eax
    6502a7d8:	jne    0x6502a7fa
    6502a7da:	call   QWORD PTR [rip+0x9898]        # 0x65034078
    6502a7e0:	test   eax,eax
    6502a7e2:	je     0x6502a7fa
    6502a7e4:	mov    ecx,eax
    6502a7e6:	call   0x65020310
    6502a7eb:	or     rax,0xffffffffffffffff
    6502a7ef:	mov    rbx,QWORD PTR [rsp+0x30]
    6502a7f4:	add    rsp,0x20
    6502a7f8:	pop    rdi
    6502a7f9:	ret    
    6502a7fa:	mov    cl,bl
    6502a7fc:	mov    rdx,rbx
    6502a7ff:	mov    rbx,QWORD PTR [rsp+0x30]
    6502a804:	sar    rdx,0x5
    6502a808:	and    ecx,0x1f
    6502a80b:	lea    r8,[rip+0x1d76e]        # 0x65047f80
    6502a812:	mov    rax,QWORD PTR [r8+rdx*8]
    6502a816:	imul   rcx,rcx,0x58
    6502a81a:	and    BYTE PTR [rax+rcx*1+0x8],0xfd
    6502a81f:	mov    rax,QWORD PTR [rsp+0x38]
    6502a824:	add    rsp,0x20
    6502a828:	pop    rdi
    6502a829:	ret    
    6502a82a:	int3   
    6502a82b:	int3   
    6502a82c:	int3   
    6502a82d:	int3   
    6502a82e:	int3   
    6502a82f:	int3   
    6502a830:	mov    QWORD PTR [rsp+0x10],rbx
    6502a835:	mov    DWORD PTR [rsp+0x8],ecx
    6502a839:	push   rsi
    6502a83a:	push   rdi
    6502a83b:	push   r12
    6502a83d:	push   r13
    6502a83f:	push   r14
    6502a841:	sub    rsp,0x30
    6502a845:	mov    r12d,r8d
    6502a848:	mov    r13,rdx
    6502a84b:	movsxd rbx,ecx
    6502a84e:	cmp    ebx,0xfffffffe
    6502a851:	jne    0x6502a870
    6502a853:	call   0x650202e0
    6502a858:	xor    edi,edi
    6502a85a:	mov    DWORD PTR [rax],edi
    6502a85c:	call   0x650202b0
    6502a861:	mov    DWORD PTR [rax],0x9
    6502a867:	or     rax,0xffffffffffffffff
    6502a86b:	jmp    0x6502a94c
    6502a870:	test   ecx,ecx
    6502a872:	js     0x6502a920
    6502a878:	cmp    ebx,DWORD PTR [rip+0x1d6e6]        # 0x65047f64
    6502a87e:	jae    0x6502a920
    6502a884:	mov    rsi,rbx
    6502a887:	sar    rsi,0x5
    6502a88b:	lea    r14,[rip+0x1d6ee]        # 0x65047f80
    6502a892:	mov    dil,bl
    6502a895:	and    edi,0x1f
    6502a898:	imul   rdi,rdi,0x58
    6502a89c:	mov    rax,QWORD PTR [r14+rsi*8]
    6502a8a0:	mov    cl,BYTE PTR [rax+rdi*1+0x8]
    6502a8a4:	and    ecx,0x1
    6502a8a7:	jne    0x6502a8d7
    6502a8a9:	call   0x650202e0
    6502a8ae:	xor    edi,edi
    6502a8b0:	mov    DWORD PTR [rax],edi
    6502a8b2:	call   0x650202b0
    6502a8b7:	mov    DWORD PTR [rax],0x9
    6502a8bd:	mov    QWORD PTR [rsp+0x20],rdi
    6502a8c2:	xor    r9d,r9d
    6502a8c5:	xor    r8d,r8d
    6502a8c8:	xor    edx,edx
    6502a8ca:	xor    ecx,ecx
    6502a8cc:	call   0x6501d850
    6502a8d1:	or     rax,0xffffffffffffffff
    6502a8d5:	jmp    0x6502a94c
    6502a8d7:	mov    ecx,ebx
    6502a8d9:	call   0x6502d7d0
    6502a8de:	nop
    6502a8df:	mov    rax,QWORD PTR [r14+rsi*8]
    6502a8e3:	test   BYTE PTR [rax+rdi*1+0x8],0x1
    6502a8e8:	je     0x6502a8fc
    6502a8ea:	mov    r8d,r12d
    6502a8ed:	mov    rdx,r13
    6502a8f0:	mov    ecx,ebx
    6502a8f2:	call   0x6502a780
    6502a8f7:	mov    rdi,rax
    6502a8fa:	jmp    0x6502a914
    6502a8fc:	call   0x650202b0
    6502a901:	mov    DWORD PTR [rax],0x9
    6502a907:	call   0x650202e0
    6502a90c:	xor    edi,edi
    6502a90e:	mov    DWORD PTR [rax],edi
    6502a910:	or     rdi,0xffffffffffffffff
    6502a914:	mov    ecx,ebx
    6502a916:	call   0x6502d8a0
    6502a91b:	mov    rax,rdi
    6502a91e:	jmp    0x6502a94c
    6502a920:	call   0x650202e0
    6502a925:	xor    edi,edi
    6502a927:	mov    DWORD PTR [rax],edi
    6502a929:	call   0x650202b0
    6502a92e:	mov    DWORD PTR [rax],0x9
    6502a934:	mov    QWORD PTR [rsp+0x20],rdi
    6502a939:	xor    r9d,r9d
    6502a93c:	xor    r8d,r8d
    6502a93f:	xor    edx,edx
    6502a941:	xor    ecx,ecx
    6502a943:	call   0x6501d850
    6502a948:	or     rax,0xffffffffffffffff
    6502a94c:	mov    rbx,QWORD PTR [rsp+0x68]
    6502a951:	add    rsp,0x30
    6502a955:	pop    r14
    6502a957:	pop    r13
    6502a959:	pop    r12
    6502a95b:	pop    rdi
    6502a95c:	pop    rsi
    6502a95d:	ret    
    6502a95e:	int3   
    6502a95f:	int3   
    6502a960:	rex push rbp
    6502a962:	sub    rsp,0x30
    6502a966:	mov    rbp,rdx
    6502a969:	mov    ecx,DWORD PTR [rbp+0x60]
    6502a96c:	call   0x6502d8a0
    6502a971:	add    rsp,0x30
    6502a975:	pop    rbp
    6502a976:	ret    
    6502a977:	int3   
    6502a978:	int3   
    6502a979:	int3   
    6502a97a:	int3   
    6502a97b:	int3   
    6502a97c:	int3   
    6502a97d:	int3   
    6502a97e:	int3   
    6502a97f:	int3   
    6502a980:	rex push rbx
    6502a982:	push   rbp
    6502a983:	push   rsi
    6502a984:	push   rdi
    6502a985:	push   r13
    6502a987:	push   r14
    6502a989:	sub    rsp,0x5f8
    6502a990:	mov    rax,QWORD PTR [rip+0x17789]        # 0x65042120
    6502a997:	xor    rax,rsp
    6502a99a:	mov    QWORD PTR [rsp+0x5e0],rax
    6502a9a2:	xor    edi,edi
    6502a9a4:	test   r8d,r8d
    6502a9a7:	mov    r13d,r8d
    6502a9aa:	mov    rbp,rdx
    6502a9ad:	movsxd rbx,ecx
    6502a9b0:	mov    r14d,edi
    6502a9b3:	mov    esi,edi
    6502a9b5:	jne    0x6502a9be
    6502a9b7:	xor    eax,eax
    6502a9b9:	jmp    0x6502b166
    6502a9be:	test   rdx,rdx
    6502a9c1:	jne    0x6502a9f1
    6502a9c3:	call   0x650202e0
    6502a9c8:	mov    DWORD PTR [rax],edi
    6502a9ca:	call   0x650202b0
    6502a9cf:	xor    r9d,r9d
    6502a9d2:	xor    r8d,r8d
    6502a9d5:	xor    edx,edx
    6502a9d7:	xor    ecx,ecx
    6502a9d9:	mov    DWORD PTR [rax],0x16
    6502a9df:	mov    QWORD PTR [rsp+0x20],rdi
    6502a9e4:	call   0x6501d850
    6502a9e9:	or     eax,0xffffffff
    6502a9ec:	jmp    0x6502b166
    6502a9f1:	mov    QWORD PTR [rsp+0x648],r12
    6502a9f9:	mov    QWORD PTR [rsp+0x5f0],r15
    6502aa01:	mov    r12b,bl
    6502aa04:	and    r12d,0x1f
    6502aa08:	mov    r15,rbx
    6502aa0b:	lea    rcx,[rip+0x1d56e]        # 0x65047f80
    6502aa12:	sar    r15,0x5
    6502aa16:	mov    QWORD PTR [rsp+0x50],r15
    6502aa1b:	imul   r12,r12,0x58
    6502aa1f:	mov    rcx,QWORD PTR [rcx+r15*8]
    6502aa23:	mov    QWORD PTR [rsp+0x58],r12
    6502aa28:	movzx  edi,BYTE PTR [r12+rcx*1+0x38]
    6502aa2e:	add    dil,dil
    6502aa31:	sar    dil,1
    6502aa34:	cmp    dil,0x2
    6502aa38:	je     0x6502aa40
    6502aa3a:	cmp    dil,0x1
    6502aa3e:	jne    0x6502aa76
    6502aa40:	mov    eax,r13d
    6502aa43:	not    eax
    6502aa45:	test   al,0x1
    6502aa47:	jne    0x6502aa76
    6502aa49:	call   0x650202e0
    6502aa4e:	xor    ebx,ebx
    6502aa50:	mov    DWORD PTR [rax],ebx
    6502aa52:	call   0x650202b0
    6502aa57:	xor    r9d,r9d
    6502aa5a:	xor    r8d,r8d
    6502aa5d:	xor    edx,edx
    6502aa5f:	xor    ecx,ecx
    6502aa61:	mov    DWORD PTR [rax],0x16
    6502aa67:	mov    QWORD PTR [rsp+0x20],rbx
    6502aa6c:	call   0x6501d850
    6502aa71:	jmp    0x6502b153
    6502aa76:	test   BYTE PTR [r12+rcx*1+0x8],0x20
    6502aa7c:	je     0x6502aa8b
    6502aa7e:	xor    edx,edx
    6502aa80:	mov    ecx,ebx
    6502aa82:	lea    r8d,[rdx+0x2]
    6502aa86:	call   0x6502a780
    6502aa8b:	mov    ecx,ebx
    6502aa8d:	call   0x6502b340
    6502aa92:	test   eax,eax
    6502aa94:	je     0x6502add1
    6502aa9a:	lea    rdx,[rip+0x1d4df]        # 0x65047f80
    6502aaa1:	mov    rax,QWORD PTR [rdx+r15*8]
    6502aaa5:	test   BYTE PTR [r12+rax*1+0x8],0x80
    6502aaab:	je     0x6502adea
    6502aab1:	call   0x650208c0
    6502aab6:	xor    ebx,ebx
    6502aab8:	lea    rdx,[rsp+0x4c]
    6502aabd:	mov    rcx,QWORD PTR [rax+0xc0]
    6502aac4:	lea    rax,[rip+0x1d4b5]        # 0x65047f80
    6502aacb:	cmp    DWORD PTR [rcx+0x14],ebx
    6502aace:	mov    rcx,QWORD PTR [rax+r15*8]
    6502aad2:	mov    rcx,QWORD PTR [r12+rcx*1]
    6502aad6:	sete   bl
    6502aad9:	call   QWORD PTR [rip+0x96a9]        # 0x65034188
    6502aadf:	test   eax,eax
    6502aae1:	je     0x6502ade3
    6502aae7:	test   ebx,ebx
    6502aae9:	je     0x6502aaf4
    6502aaeb:	test   dil,dil
    6502aaee:	je     0x6502adda
    6502aaf4:	call   QWORD PTR [rip+0x9696]        # 0x65034190
    6502aafa:	test   r13d,r13d
    6502aafd:	mov    DWORD PTR [rsp+0x44],esi
    6502ab01:	mov    r12d,eax
    6502ab04:	mov    DWORD PTR [rsp+0x4c],eax
    6502ab08:	mov    rbx,rbp
    6502ab0b:	je     0x6502adc7
    6502ab11:	mov    r15d,DWORD PTR [rsp+0x4c]
    6502ab16:	test   dil,dil
    6502ab19:	jne    0x6502acd7
    6502ab1f:	mov    rdx,QWORD PTR [rsp+0x50]
    6502ab24:	movzx  ecx,BYTE PTR [rbx]
    6502ab27:	mov    r8,QWORD PTR [rsp+0x58]
    6502ab2c:	xor    r15d,r15d
    6502ab2f:	cmp    cl,0xa
    6502ab32:	lea    rax,[rip+0x1d447]        # 0x65047f80
    6502ab39:	mov    rdx,QWORD PTR [rax+rdx*8]
    6502ab3d:	sete   r15b
    6502ab41:	cmp    DWORD PTR [r8+rdx*1+0x50],0x0
    6502ab47:	je     0x6502ab84
    6502ab49:	movzx  eax,BYTE PTR [r8+rdx*1+0x4c]
    6502ab4f:	mov    BYTE PTR [rsp+0x61],cl
    6502ab53:	lea    rcx,[rsp+0x40]
    6502ab58:	mov    BYTE PTR [rsp+0x60],al
    6502ab5c:	mov    DWORD PTR [r8+rdx*1+0x50],0x0
    6502ab65:	lea    rdx,[rsp+0x60]
    6502ab6a:	mov    r8d,0x2
    6502ab70:	call   0x6502bb50
    6502ab75:	cmp    eax,0xffffffff
    6502ab78:	jne    0x6502abd9
    6502ab7a:	mov    r15d,DWORD PTR [rsp+0x44]
    6502ab7f:	jmp    0x6502b0d6
    6502ab84:	movsx  ecx,cl
    6502ab87:	call   0x65028df0
    6502ab8c:	test   eax,eax
    6502ab8e:	je     0x6502abc1
    6502ab90:	mov    rax,r13
    6502ab93:	sub    rax,rbx
    6502ab96:	add    rax,rbp
    6502ab99:	cmp    rax,0x1
    6502ab9d:	jle    0x6502ad59
    6502aba3:	lea    rcx,[rsp+0x40]
    6502aba8:	mov    r8d,0x2
    6502abae:	mov    rdx,rbx
    6502abb1:	call   0x6502bb50
    6502abb6:	cmp    eax,0xffffffff
    6502abb9:	je     0x6502ab7a
    6502abbb:	add    rbx,0x1
    6502abbf:	jmp    0x6502abd9
    6502abc1:	lea    rcx,[rsp+0x40]
    6502abc6:	mov    r8d,0x1
    6502abcc:	mov    rdx,rbx
    6502abcf:	call   0x6502bb50
    6502abd4:	cmp    eax,0xffffffff
    6502abd7:	je     0x6502ab7a
    6502abd9:	xor    eax,eax
    6502abdb:	lea    r8,[rsp+0x40]
    6502abe0:	mov    r9d,0x1
    6502abe6:	mov    QWORD PTR [rsp+0x38],rax
    6502abeb:	mov    QWORD PTR [rsp+0x30],rax
    6502abf0:	lea    rax,[rsp+0x60]
    6502abf5:	xor    edx,edx
    6502abf7:	mov    ecx,r12d
    6502abfa:	mov    DWORD PTR [rsp+0x28],0x5
    6502ac02:	mov    QWORD PTR [rsp+0x20],rax
    6502ac07:	add    rbx,0x1
    6502ac0b:	call   QWORD PTR [rip+0x942f]        # 0x65034040
    6502ac11:	test   eax,eax
    6502ac13:	mov    r12d,eax
    6502ac16:	je     0x6502ab7a
    6502ac1c:	mov    rax,QWORD PTR [rsp+0x50]
    6502ac21:	lea    rcx,[rip+0x1d358]        # 0x65047f80
    6502ac28:	lea    r9,[rsp+0x44]
    6502ac2d:	mov    rcx,QWORD PTR [rcx+rax*8]
    6502ac31:	mov    rax,QWORD PTR [rsp+0x58]
    6502ac36:	lea    rdx,[rsp+0x60]
    6502ac3b:	mov    rcx,QWORD PTR [rax+rcx*1]
    6502ac3f:	mov    r8d,r12d
    6502ac42:	mov    QWORD PTR [rsp+0x20],0x0
    6502ac4b:	call   QWORD PTR [rip+0x94af]        # 0x65034100
    6502ac51:	test   eax,eax
    6502ac53:	je     0x6502ad9d
    6502ac59:	mov    r14d,ebx
    6502ac5c:	sub    r14d,ebp
    6502ac5f:	add    r14d,esi
    6502ac62:	cmp    DWORD PTR [rsp+0x44],r12d
    6502ac67:	jl     0x6502ab7a
    6502ac6d:	test   r15d,r15d
    6502ac70:	je     0x6502acd0
    6502ac72:	mov    rax,QWORD PTR [rsp+0x50]
    6502ac77:	mov    BYTE PTR [rsp+0x60],0xd
    6502ac7c:	lea    rcx,[rip+0x1d2fd]        # 0x65047f80
    6502ac83:	mov    rcx,QWORD PTR [rcx+rax*8]
    6502ac87:	mov    rax,QWORD PTR [rsp+0x58]
    6502ac8c:	lea    r9,[rsp+0x44]
    6502ac91:	mov    rcx,QWORD PTR [rax+rcx*1]
    6502ac95:	lea    rdx,[rsp+0x60]
    6502ac9a:	mov    r8d,0x1
    6502aca0:	mov    QWORD PTR [rsp+0x20],0x0
    6502aca9:	call   QWORD PTR [rip+0x9451]        # 0x65034100
    6502acaf:	test   eax,eax
    6502acb1:	je     0x6502ad8f
    6502acb7:	cmp    DWORD PTR [rsp+0x44],0x1
    6502acbc:	jl     0x6502ab7a
    6502acc2:	mov    r12d,DWORD PTR [rsp+0x4c]
    6502acc7:	add    esi,0x1
    6502acca:	add    r14d,0x1
    6502acce:	jmp    0x6502ad42
    6502acd0:	mov    r12d,DWORD PTR [rsp+0x4c]
    6502acd5:	jmp    0x6502ad42
    6502acd7:	cmp    dil,0x1
    6502acdb:	je     0x6502ace3
    6502acdd:	cmp    dil,0x2
    6502ace1:	jne    0x6502acfa
    6502ace3:	movzx  eax,WORD PTR [rbx]
    6502ace6:	xor    r15d,r15d
    6502ace9:	cmp    ax,0xa
    6502aced:	mov    WORD PTR [rsp+0x40],ax
    6502acf2:	sete   r15b
    6502acf6:	add    rbx,0x2
    6502acfa:	cmp    dil,0x1
    6502acfe:	je     0x6502ad06
    6502ad00:	cmp    dil,0x2
    6502ad04:	jne    0x6502ad42
    6502ad06:	movzx  ecx,WORD PTR [rsp+0x40]
    6502ad0b:	call   0x6502d8d0
    6502ad10:	cmp    ax,WORD PTR [rsp+0x40]
    6502ad15:	jne    0x6502adb9
    6502ad1b:	add    r14d,0x1
    6502ad1f:	test   r15d,r15d
    6502ad22:	je     0x6502ad42
    6502ad24:	mov    cx,0xd
    6502ad28:	mov    WORD PTR [rsp+0x40],0xd
    6502ad2f:	call   0x6502d8d0
    6502ad34:	cmp    ax,WORD PTR [rsp+0x40]
    6502ad39:	jne    0x6502adab
    6502ad3b:	add    r14d,0x1
    6502ad3f:	add    esi,0x1
    6502ad42:	mov    eax,ebx
    6502ad44:	sub    eax,ebp
    6502ad46:	cmp    eax,r13d
    6502ad49:	jb     0x6502ab16
    6502ad4f:	mov    r15d,DWORD PTR [rsp+0x44]
    6502ad54:	jmp    0x6502b0d6
    6502ad59:	movzx  eax,BYTE PTR [rbx]
    6502ad5c:	mov    r8,QWORD PTR [rsp+0x50]
    6502ad61:	mov    rdx,QWORD PTR [rsp+0x58]
    6502ad66:	lea    r9,[rip+0x1d213]        # 0x65047f80
    6502ad6d:	add    r14d,0x1
    6502ad71:	mov    rcx,QWORD PTR [r9+r8*8]
    6502ad75:	mov    BYTE PTR [rdx+rcx*1+0x4c],al
    6502ad79:	mov    rax,QWORD PTR [r9+r8*8]
    6502ad7d:	mov    DWORD PTR [rdx+rax*1+0x50],0x1
    6502ad85:	mov    r15d,DWORD PTR [rsp+0x44]
    6502ad8a:	jmp    0x6502b0d6
    6502ad8f:	call   QWORD PTR [rip+0x92e3]        # 0x65034078
    6502ad95:	mov    r15d,eax
    6502ad98:	jmp    0x6502b0d6
    6502ad9d:	call   QWORD PTR [rip+0x92d5]        # 0x65034078
    6502ada3:	mov    r15d,eax
    6502ada6:	jmp    0x6502b0d6
    6502adab:	call   QWORD PTR [rip+0x92c7]        # 0x65034078
    6502adb1:	mov    r15d,eax
    6502adb4:	jmp    0x6502b0d6
    6502adb9:	call   QWORD PTR [rip+0x92b9]        # 0x65034078
    6502adbf:	mov    r15d,eax
    6502adc2:	jmp    0x6502b0d6
    6502adc7:	mov    r15d,DWORD PTR [rsp+0x44]
    6502adcc:	jmp    0x6502b0ec
    6502add1:	lea    rdx,[rip+0x1d1a8]        # 0x65047f80
    6502add8:	jmp    0x6502adea
    6502adda:	lea    rdx,[rip+0x1d19f]        # 0x65047f80
    6502ade1:	jmp    0x6502adea
    6502ade3:	lea    rdx,[rip+0x1d196]        # 0x65047f80
    6502adea:	mov    rcx,QWORD PTR [rdx+r15*8]
    6502adee:	test   BYTE PTR [r12+rcx*1+0x8],0x80
    6502adf4:	je     0x6502b0b0
    6502adfa:	xor    r15d,r15d
    6502adfd:	test   dil,dil
    6502ae00:	jne    0x6502aec6
    6502ae06:	test   r13d,r13d
    6502ae09:	mov    rdi,rbp
    6502ae0c:	je     0x6502b122
    6502ae12:	lea    rbx,[rsp+0x70]
    6502ae17:	xor    ecx,ecx
    6502ae19:	data16 xchg ax,ax
    6502ae1c:	data16 data16 xchg ax,ax
    6502ae20:	mov    eax,edi
    6502ae22:	sub    eax,ebp
    6502ae24:	cmp    eax,r13d
    6502ae27:	jae    0x6502ae55
    6502ae29:	movzx  eax,BYTE PTR [rdi]
    6502ae2c:	add    rdi,0x1
    6502ae30:	cmp    al,0xa
    6502ae32:	jne    0x6502ae42
    6502ae34:	mov    BYTE PTR [rbx],0xd
    6502ae37:	add    rbx,0x1
    6502ae3b:	add    esi,0x1
    6502ae3e:	add    rcx,0x1
    6502ae42:	add    rcx,0x1
    6502ae46:	mov    BYTE PTR [rbx],al
    6502ae48:	add    rbx,0x1
    6502ae4c:	cmp    rcx,0x400
    6502ae53:	jb     0x6502ae20
    6502ae55:	lea    rax,[rsp+0x70]
    6502ae5a:	mov    r8d,ebx
    6502ae5d:	lea    r9,[rsp+0x48]
    6502ae62:	sub    r8d,eax
    6502ae65:	mov    rax,QWORD PTR [rsp+0x50]
    6502ae6a:	mov    QWORD PTR [rsp+0x20],r15
    6502ae6f:	mov    rcx,QWORD PTR [rdx+rax*8]
    6502ae73:	lea    rdx,[rsp+0x70]
    6502ae78:	mov    rcx,QWORD PTR [r12+rcx*1]
    6502ae7c:	call   QWORD PTR [rip+0x927e]        # 0x65034100
    6502ae82:	test   eax,eax
    6502ae84:	je     0x6502aeb8
    6502ae86:	movsxd rax,DWORD PTR [rsp+0x48]
    6502ae8b:	lea    rcx,[rsp+0x70]
    6502ae90:	sub    rbx,rcx
    6502ae93:	add    r14d,eax
    6502ae96:	cmp    rax,rbx
    6502ae99:	jl     0x6502b0d6
    6502ae9f:	mov    eax,edi
    6502aea1:	lea    rdx,[rip+0x1d0d8]        # 0x65047f80
    6502aea8:	sub    eax,ebp
    6502aeaa:	cmp    eax,r13d
    6502aead:	jb     0x6502ae12
    6502aeb3:	jmp    0x6502b0d6
    6502aeb8:	call   QWORD PTR [rip+0x91ba]        # 0x65034078
    6502aebe:	mov    r15d,eax
    6502aec1:	jmp    0x6502b0d6
    6502aec6:	cmp    dil,0x2
    6502aeca:	jne    0x6502af92
    6502aed0:	test   r13d,r13d
    6502aed3:	mov    rdi,rbp
    6502aed6:	je     0x6502b122
    6502aedc:	data16 data16 xchg ax,ax
    6502aee0:	lea    rbx,[rsp+0x70]
    6502aee5:	xor    ecx,ecx
    6502aee7:	mov    eax,edi
    6502aee9:	sub    eax,ebp
    6502aeeb:	cmp    eax,r13d
    6502aeee:	jae    0x6502af21
    6502aef0:	movzx  eax,WORD PTR [rdi]
    6502aef3:	add    rdi,0x2
    6502aef7:	cmp    ax,0xa
    6502aefb:	jne    0x6502af0d
    6502aefd:	mov    WORD PTR [rbx],0xd
    6502af02:	add    rbx,0x2
    6502af06:	add    esi,0x2
    6502af09:	add    rcx,0x2
    6502af0d:	add    rcx,0x2
    6502af11:	mov    WORD PTR [rbx],ax
    6502af14:	add    rbx,0x2
    6502af18:	cmp    rcx,0x3ff
    6502af1f:	jb     0x6502aee7
    6502af21:	lea    rax,[rsp+0x70]
    6502af26:	mov    r8d,ebx
    6502af29:	lea    r9,[rsp+0x48]
    6502af2e:	sub    r8d,eax
    6502af31:	mov    rax,QWORD PTR [rsp+0x50]
    6502af36:	mov    QWORD PTR [rsp+0x20],r15
    6502af3b:	mov    rcx,QWORD PTR [rdx+rax*8]
    6502af3f:	lea    rdx,[rsp+0x70]
    6502af44:	mov    rcx,QWORD PTR [r12+rcx*1]
    6502af48:	call   QWORD PTR [rip+0x91b2]        # 0x65034100
    6502af4e:	test   eax,eax
    6502af50:	je     0x6502af84
    6502af52:	movsxd rax,DWORD PTR [rsp+0x48]
    6502af57:	lea    rcx,[rsp+0x70]
    6502af5c:	sub    rbx,rcx
    6502af5f:	add    r14d,eax
    6502af62:	cmp    rax,rbx
    6502af65:	jl     0x6502b0d6
    6502af6b:	mov    eax,edi
    6502af6d:	lea    rdx,[rip+0x1d00c]        # 0x65047f80
    6502af74:	sub    eax,ebp
    6502af76:	cmp    eax,r13d
    6502af79:	jb     0x6502aee0
    6502af7f:	jmp    0x6502b0d6
    6502af84:	call   QWORD PTR [rip+0x90ee]        # 0x65034078
    6502af8a:	mov    r15d,eax
    6502af8d:	jmp    0x6502b0d6
    6502af92:	test   r13d,r13d
    6502af95:	mov    rdi,rbp
    6502af98:	je     0x6502b122
    6502af9e:	xchg   ax,ax
    6502afa0:	lea    rcx,[rsp+0x480]
    6502afa8:	xor    edx,edx
    6502afaa:	data16 xchg ax,ax
    6502afad:	data16 xchg ax,ax
    6502afb0:	mov    eax,edi
    6502afb2:	sub    eax,ebp
    6502afb4:	cmp    eax,r13d
    6502afb7:	jae    0x6502afe7
    6502afb9:	movzx  eax,WORD PTR [rdi]
    6502afbc:	add    rdi,0x2
    6502afc0:	cmp    ax,0xa
    6502afc4:	jne    0x6502afd3
    6502afc6:	mov    WORD PTR [rcx],0xd
    6502afcb:	add    rcx,0x2
    6502afcf:	add    rdx,0x2
    6502afd3:	add    rdx,0x2
    6502afd7:	mov    WORD PTR [rcx],ax
    6502afda:	add    rcx,0x2
    6502afde:	cmp    rdx,0x152
    6502afe5:	jb     0x6502afb0
    6502afe7:	lea    rax,[rsp+0x480]
    6502afef:	mov    QWORD PTR [rsp+0x38],rsi
    6502aff4:	mov    QWORD PTR [rsp+0x30],rsi
    6502aff9:	sub    ecx,eax
    6502affb:	lea    r8,[rsp+0x480]
    6502b003:	mov    DWORD PTR [rsp+0x28],0x2ab
    6502b00b:	mov    eax,ecx
    6502b00d:	mov    ecx,0xfde9
    6502b012:	cdq    
    6502b013:	sub    eax,edx
    6502b015:	xor    edx,edx
    6502b017:	sar    eax,1
    6502b019:	mov    r9d,eax
    6502b01c:	lea    rax,[rsp+0x70]
    6502b021:	mov    QWORD PTR [rsp+0x20],rax
    6502b026:	call   QWORD PTR [rip+0x9014]        # 0x65034040
    6502b02c:	test   eax,eax
    6502b02e:	mov    r12d,eax
    6502b031:	je     0x6502b0a5
    6502b033:	xor    ebx,ebx
    6502b035:	data16 data16 xchg ax,ax
    6502b039:	data16 xchg ax,ax
    6502b03c:	data16 data16 xchg ax,ax
    6502b040:	mov    rax,QWORD PTR [rsp+0x50]
    6502b045:	movsxd rcx,ebx
    6502b048:	mov    r8d,r12d
    6502b04b:	lea    rdx,[rsp+rcx*1+0x70]
    6502b050:	lea    rcx,[rip+0x1cf29]        # 0x65047f80
    6502b057:	lea    r9,[rsp+0x48]
    6502b05c:	mov    rcx,QWORD PTR [rcx+rax*8]
    6502b060:	mov    rax,QWORD PTR [rsp+0x58]
    6502b065:	sub    r8d,ebx
    6502b068:	mov    rcx,QWORD PTR [rax+rcx*1]
    6502b06c:	mov    QWORD PTR [rsp+0x20],rsi
    6502b071:	call   QWORD PTR [rip+0x9089]        # 0x65034100
    6502b077:	test   eax,eax
    6502b079:	je     0x6502b086
    6502b07b:	add    ebx,DWORD PTR [rsp+0x48]
    6502b07f:	cmp    r12d,ebx
    6502b082:	jg     0x6502b040
    6502b084:	jmp    0x6502b094
    6502b086:	call   QWORD PTR [rip+0x8fec]        # 0x65034078
    6502b08c:	cmp    r12d,ebx
    6502b08f:	mov    r15d,eax
    6502b092:	jg     0x6502b0d6
    6502b094:	mov    r14d,edi
    6502b097:	sub    r14d,ebp
    6502b09a:	cmp    r14d,r13d
    6502b09d:	jb     0x6502afa0
    6502b0a3:	jmp    0x6502b0d6
    6502b0a5:	call   QWORD PTR [rip+0x8fcd]        # 0x65034078
    6502b0ab:	mov    r15d,eax
    6502b0ae:	jmp    0x6502b0d6
    6502b0b0:	mov    rcx,QWORD PTR [r12+rcx*1]
    6502b0b4:	lea    r9,[rsp+0x48]
    6502b0b9:	mov    r8d,r13d
    6502b0bc:	mov    rdx,rbp
    6502b0bf:	mov    QWORD PTR [rsp+0x20],rsi
    6502b0c4:	call   QWORD PTR [rip+0x9036]        # 0x65034100
    6502b0ca:	test   eax,eax
    6502b0cc:	je     0x6502b0e3
    6502b0ce:	mov    r14d,DWORD PTR [rsp+0x48]
    6502b0d3:	xor    r15d,r15d
    6502b0d6:	test   r14d,r14d
    6502b0d9:	je     0x6502b0ec
    6502b0db:	sub    r14d,esi
    6502b0de:	mov    eax,r14d
    6502b0e1:	jmp    0x6502b156
    6502b0e3:	call   QWORD PTR [rip+0x8f8f]        # 0x65034078
    6502b0e9:	mov    r15d,eax
    6502b0ec:	test   r15d,r15d
    6502b0ef:	je     0x6502b116
    6502b0f1:	cmp    r15d,0x5
    6502b0f5:	jne    0x6502b10c
    6502b0f7:	call   0x650202b0
    6502b0fc:	mov    DWORD PTR [rax],0x9
    6502b102:	call   0x650202e0
    6502b107:	mov    DWORD PTR [rax],r15d
    6502b10a:	jmp    0x6502b153
    6502b10c:	mov    ecx,r15d
    6502b10f:	call   0x65020310
    6502b114:	jmp    0x6502b153
    6502b116:	mov    r12,QWORD PTR [rsp+0x58]
    6502b11b:	lea    rdx,[rip+0x1ce5e]        # 0x65047f80
    6502b122:	mov    rax,QWORD PTR [rsp+0x50]
    6502b127:	mov    rax,QWORD PTR [rdx+rax*8]
    6502b12b:	test   BYTE PTR [r12+rax*1+0x8],0x40
    6502b131:	je     0x6502b13d
    6502b133:	cmp    BYTE PTR [rbp+0x0],0x1a
    6502b137:	jne    0x6502b13d
    6502b139:	xor    eax,eax
    6502b13b:	jmp    0x6502b156
    6502b13d:	call   0x650202b0
    6502b142:	mov    DWORD PTR [rax],0x1c
    6502b148:	call   0x650202e0
    6502b14d:	mov    DWORD PTR [rax],0x0
    6502b153:	or     eax,0xffffffff
    6502b156:	mov    r12,QWORD PTR [rsp+0x648]
    6502b15e:	mov    r15,QWORD PTR [rsp+0x5f0]
    6502b166:	mov    rcx,QWORD PTR [rsp+0x5e0]
    6502b16e:	xor    rcx,rsp
    6502b171:	call   0x6501e4e0
    6502b176:	add    rsp,0x5f8
    6502b17d:	pop    r14
    6502b17f:	pop    r13
    6502b181:	pop    rdi
    6502b182:	pop    rsi
    6502b183:	pop    rbp
    6502b184:	pop    rbx
    6502b185:	ret    
    6502b186:	int3   
    6502b187:	int3   
    6502b188:	int3   
    6502b189:	int3   
    6502b18a:	int3   
    6502b18b:	int3   
    6502b18c:	int3   
    6502b18d:	int3   
    6502b18e:	int3   
    6502b18f:	int3   
    6502b190:	mov    QWORD PTR [rsp+0x10],rbx
    6502b195:	mov    DWORD PTR [rsp+0x8],ecx
    6502b199:	push   rsi
    6502b19a:	push   rdi
    6502b19b:	push   r12
    6502b19d:	push   r13
    6502b19f:	push   r14
    6502b1a1:	sub    rsp,0x30
    6502b1a5:	mov    r12d,r8d
    6502b1a8:	mov    r13,rdx
    6502b1ab:	movsxd rbx,ecx
    6502b1ae:	cmp    ebx,0xfffffffe
    6502b1b1:	jne    0x6502b1cf
    6502b1b3:	call   0x650202e0
    6502b1b8:	xor    edi,edi
    6502b1ba:	mov    DWORD PTR [rax],edi
    6502b1bc:	call   0x650202b0
    6502b1c1:	mov    DWORD PTR [rax],0x9
    6502b1c7:	or     eax,0xffffffff
    6502b1ca:	jmp    0x6502b2a6
    6502b1cf:	test   ecx,ecx
    6502b1d1:	js     0x6502b27b
    6502b1d7:	cmp    ebx,DWORD PTR [rip+0x1cd87]        # 0x65047f64
    6502b1dd:	jae    0x6502b27b
    6502b1e3:	mov    rsi,rbx
    6502b1e6:	sar    rsi,0x5
    6502b1ea:	lea    r14,[rip+0x1cd8f]        # 0x65047f80
    6502b1f1:	mov    dil,bl
    6502b1f4:	and    edi,0x1f
    6502b1f7:	imul   rdi,rdi,0x58
    6502b1fb:	mov    rax,QWORD PTR [r14+rsi*8]
    6502b1ff:	mov    cl,BYTE PTR [rax+rdi*1+0x8]
    6502b203:	and    ecx,0x1
    6502b206:	jne    0x6502b235
    6502b208:	call   0x650202e0
    6502b20d:	xor    edi,edi
    6502b20f:	mov    DWORD PTR [rax],edi
    6502b211:	call   0x650202b0
    6502b216:	mov    DWORD PTR [rax],0x9
    6502b21c:	mov    QWORD PTR [rsp+0x20],rdi
    6502b221:	xor    r9d,r9d
    6502b224:	xor    r8d,r8d
    6502b227:	xor    edx,edx
    6502b229:	xor    ecx,ecx
    6502b22b:	call   0x6501d850
    6502b230:	or     eax,0xffffffff
    6502b233:	jmp    0x6502b2a6
    6502b235:	mov    ecx,ebx
    6502b237:	call   0x6502d7d0
    6502b23c:	nop
    6502b23d:	mov    rax,QWORD PTR [r14+rsi*8]
    6502b241:	test   BYTE PTR [rax+rdi*1+0x8],0x1
    6502b246:	je     0x6502b259
    6502b248:	mov    r8d,r12d
    6502b24b:	mov    rdx,r13
    6502b24e:	mov    ecx,ebx
    6502b250:	call   0x6502a980
    6502b255:	mov    edi,eax
    6502b257:	jmp    0x6502b270
    6502b259:	call   0x650202b0
    6502b25e:	mov    DWORD PTR [rax],0x9
    6502b264:	call   0x650202e0
    6502b269:	xor    edi,edi
    6502b26b:	mov    DWORD PTR [rax],edi
    6502b26d:	or     edi,0xffffffff
    6502b270:	mov    ecx,ebx
    6502b272:	call   0x6502d8a0
    6502b277:	mov    eax,edi
    6502b279:	jmp    0x6502b2a6
    6502b27b:	call   0x650202e0
    6502b280:	xor    edi,edi
    6502b282:	mov    DWORD PTR [rax],edi
    6502b284:	call   0x650202b0
    6502b289:	mov    DWORD PTR [rax],0x9
    6502b28f:	mov    QWORD PTR [rsp+0x20],rdi
    6502b294:	xor    r9d,r9d
    6502b297:	xor    r8d,r8d
    6502b29a:	xor    edx,edx
    6502b29c:	xor    ecx,ecx
    6502b29e:	call   0x6501d850
    6502b2a3:	or     eax,0xffffffff
    6502b2a6:	mov    rbx,QWORD PTR [rsp+0x68]
    6502b2ab:	add    rsp,0x30
    6502b2af:	pop    r14
    6502b2b1:	pop    r13
    6502b2b3:	pop    r12
    6502b2b5:	pop    rdi
    6502b2b6:	pop    rsi
    6502b2b7:	ret    
    6502b2b8:	int3   
    6502b2b9:	int3   
    6502b2ba:	int3   
    6502b2bb:	int3   
    6502b2bc:	int3   
    6502b2bd:	int3   
    6502b2be:	int3   
    6502b2bf:	int3   
    6502b2c0:	rex push rbp
    6502b2c2:	sub    rsp,0x30
    6502b2c6:	mov    rbp,rdx
    6502b2c9:	mov    ecx,DWORD PTR [rbp+0x60]
    6502b2cc:	call   0x6502d8a0
    6502b2d1:	add    rsp,0x30
    6502b2d5:	pop    rbp
    6502b2d6:	ret    
    6502b2d7:	int3   
    6502b2d8:	int3   
    6502b2d9:	int3   
    6502b2da:	int3   
    6502b2db:	int3   
    6502b2dc:	int3   
    6502b2dd:	int3   
    6502b2de:	int3   
    6502b2df:	int3   
    6502b2e0:	rex push rbx
    6502b2e2:	sub    rsp,0x20
    6502b2e6:	add    DWORD PTR [rip+0x196f3],0x1        # 0x650449e0
    6502b2ed:	mov    rbx,rcx
    6502b2f0:	mov    ecx,0x1000
    6502b2f5:	call   0x65022910
    6502b2fa:	test   rax,rax
    6502b2fd:	mov    QWORD PTR [rbx+0x10],rax
    6502b301:	je     0x6502b310
    6502b303:	or     DWORD PTR [rbx+0x18],0x8
    6502b307:	mov    DWORD PTR [rbx+0x24],0x1000
    6502b30e:	jmp    0x6502b323
    6502b310:	or     DWORD PTR [rbx+0x18],0x4
    6502b314:	lea    rax,[rbx+0x20]
    6502b318:	mov    DWORD PTR [rbx+0x24],0x2
    6502b31f:	mov    QWORD PTR [rbx+0x10],rax
    6502b323:	mov    rax,QWORD PTR [rbx+0x10]
    6502b327:	mov    DWORD PTR [rbx+0x8],0x0
    6502b32e:	mov    QWORD PTR [rbx],rax
    6502b331:	add    rsp,0x20
    6502b335:	pop    rbx
    6502b336:	ret    
    6502b337:	int3   
    6502b338:	int3   
    6502b339:	int3   
    6502b33a:	int3   
    6502b33b:	int3   
    6502b33c:	int3   
    6502b33d:	int3   
    6502b33e:	int3   
    6502b33f:	int3   
    6502b340:	sub    rsp,0x38
    6502b344:	cmp    ecx,0xfffffffe
    6502b347:	jne    0x6502b35b
    6502b349:	call   0x650202b0
    6502b34e:	mov    DWORD PTR [rax],0x9
    6502b354:	xor    eax,eax
    6502b356:	add    rsp,0x38
    6502b35a:	ret    
    6502b35b:	test   ecx,ecx
    6502b35d:	js     0x6502b391
    6502b35f:	cmp    ecx,DWORD PTR [rip+0x1cbff]        # 0x65047f64
    6502b365:	jae    0x6502b391
    6502b367:	movsxd rax,ecx
    6502b36a:	lea    r8,[rip+0x1cc0f]        # 0x65047f80
    6502b371:	mov    cl,al
    6502b373:	mov    rdx,rax
    6502b376:	sar    rdx,0x5
    6502b37a:	and    ecx,0x1f
    6502b37d:	mov    rax,QWORD PTR [r8+rdx*8]
    6502b381:	imul   rcx,rcx,0x58
    6502b385:	mov    al,BYTE PTR [rax+rcx*1+0x8]
    6502b389:	and    eax,0x40
    6502b38c:	add    rsp,0x38
    6502b390:	ret    
    6502b391:	call   0x650202b0
    6502b396:	xor    r9d,r9d
    6502b399:	xor    r8d,r8d
    6502b39c:	xor    edx,edx
    6502b39e:	xor    ecx,ecx
    6502b3a0:	mov    QWORD PTR [rsp+0x20],0x0
    6502b3a9:	mov    DWORD PTR [rax],0x9
    6502b3af:	call   0x6501d850
    6502b3b4:	xor    eax,eax
    6502b3b6:	add    rsp,0x38
    6502b3ba:	ret    
    6502b3bb:	int3   
    6502b3bc:	int3   
    6502b3bd:	int3   
    6502b3be:	int3   
    6502b3bf:	int3   
    6502b3c0:	lea    rax,[rip+0x17d39]        # 0x65043100
    6502b3c7:	ret    
    6502b3c8:	int3   
    6502b3c9:	int3   
    6502b3ca:	int3   
    6502b3cb:	int3   
    6502b3cc:	int3   
    6502b3cd:	int3   
    6502b3ce:	int3   
    6502b3cf:	int3   
    6502b3d0:	rex push rbx
    6502b3d2:	sub    rsp,0x20
    6502b3d6:	mov    eax,DWORD PTR [rip+0x1cb84]        # 0x65047f60
    6502b3dc:	mov    ebx,0x14
    6502b3e1:	test   eax,eax
    6502b3e3:	jne    0x6502b3ec
    6502b3e5:	mov    eax,0x200
    6502b3ea:	jmp    0x6502b3f1
    6502b3ec:	cmp    eax,ebx
    6502b3ee:	cmovl  eax,ebx
    6502b3f1:	movsxd rcx,eax
    6502b3f4:	mov    edx,0x8
    6502b3f9:	mov    DWORD PTR [rip+0x1cb61],eax        # 0x65047f60
    6502b3ff:	call   0x65022980
    6502b404:	test   rax,rax
    6502b407:	mov    QWORD PTR [rip+0x1bb4a],rax        # 0x65046f58
    6502b40e:	jne    0x6502b438
    6502b410:	lea    edx,[rax+0x8]
    6502b413:	mov    rcx,rbx
    6502b416:	mov    DWORD PTR [rip+0x1cb44],ebx        # 0x65047f60
    6502b41c:	call   0x65022980
    6502b421:	test   rax,rax
    6502b424:	mov    QWORD PTR [rip+0x1bb2d],rax        # 0x65046f58
    6502b42b:	jne    0x6502b438
    6502b42d:	mov    eax,0x1a
    6502b432:	add    rsp,0x20
    6502b436:	pop    rbx
    6502b437:	ret    
    6502b438:	xor    r8d,r8d
    6502b43b:	lea    rdx,[rip+0x17cbe]        # 0x65043100
    6502b442:	mov    rcx,r8
    6502b445:	data16 data16 xchg ax,ax
    6502b449:	data16 xchg ax,ax
    6502b44c:	data16 data16 xchg ax,ax
    6502b450:	mov    QWORD PTR [rcx+rax*1],rdx
    6502b454:	add    rcx,0x8
    6502b458:	add    rdx,0x30
    6502b45c:	sub    rbx,0x1
    6502b460:	je     0x6502b46b
    6502b462:	mov    rax,QWORD PTR [rip+0x1baef]        # 0x65046f58
    6502b469:	jmp    0x6502b450
    6502b46b:	lea    rdx,[rip+0x17caa]        # 0x6504311c
    6502b472:	mov    r10d,0x3
    6502b478:	lea    r11,[rip+0x1cb01]        # 0x65047f80
    6502b47f:	nop
    6502b480:	mov    cl,r8b
    6502b483:	mov    rax,r8
    6502b486:	sar    rax,0x5
    6502b48a:	and    ecx,0x1f
    6502b48d:	mov    rax,QWORD PTR [r11+rax*8]
    6502b491:	imul   rcx,rcx,0x58
    6502b495:	mov    r9,QWORD PTR [rcx+rax*1]
    6502b499:	cmp    r9,0xffffffffffffffff
    6502b49d:	je     0x6502b4aa
    6502b49f:	cmp    r9,0xfffffffffffffffe
    6502b4a3:	je     0x6502b4aa
    6502b4a5:	test   r9,r9
    6502b4a8:	jne    0x6502b4b0
    6502b4aa:	mov    DWORD PTR [rdx],0xfffffffe
    6502b4b0:	add    r8,0x1
    6502b4b4:	add    rdx,0x30
    6502b4b8:	sub    r10,0x1
    6502b4bc:	jne    0x6502b480
    6502b4be:	xor    eax,eax
    6502b4c0:	add    rsp,0x20
    6502b4c4:	pop    rbx
    6502b4c5:	ret    
    6502b4c6:	int3   
    6502b4c7:	int3   
    6502b4c8:	int3   
    6502b4c9:	int3   
    6502b4ca:	int3   
    6502b4cb:	int3   
    6502b4cc:	int3   
    6502b4cd:	int3   
    6502b4ce:	int3   
    6502b4cf:	int3   
    6502b4d0:	sub    rsp,0x28
    6502b4d4:	call   0x6502dd80
    6502b4d9:	cmp    BYTE PTR [rip+0x18d34],0x0        # 0x65044214
    6502b4e0:	je     0x6502b4e7
    6502b4e2:	call   0x6502da00
    6502b4e7:	mov    rcx,QWORD PTR [rip+0x1ba6a]        # 0x65046f58
    6502b4ee:	add    rsp,0x28
    6502b4f2:	jmp    0x6501fa90
    6502b4f7:	int3   
    6502b4f8:	int3   
    6502b4f9:	int3   
    6502b4fa:	int3   
    6502b4fb:	int3   
    6502b4fc:	int3   
    6502b4fd:	int3   
    6502b4fe:	int3   
    6502b4ff:	int3   
    6502b500:	rex push rbx
    6502b502:	sub    rsp,0x20
    6502b506:	mov    rbx,rcx
    6502b509:	lea    rcx,[rip+0x17bf0]        # 0x65043100
    6502b510:	cmp    rbx,rcx
    6502b513:	jb     0x6502b555
    6502b515:	lea    rax,[rip+0x17f74]        # 0x65043490
    6502b51c:	cmp    rbx,rax
    6502b51f:	ja     0x6502b555
    6502b521:	mov    rdx,rbx
    6502b524:	movabs rax,0x2aaaaaaaaaaaaaab
    6502b52e:	sub    rdx,rcx
    6502b531:	imul   rdx
    6502b534:	sar    rdx,0x3
    6502b538:	mov    rcx,rdx
    6502b53b:	shr    rcx,0x3f
    6502b53f:	lea    ecx,[rcx+rdx*1+0x10]
    6502b543:	call   0x650297c0
    6502b548:	or     DWORD PTR [rbx+0x18],0x8000
    6502b54f:	add    rsp,0x20
    6502b553:	pop    rbx
    6502b554:	ret    
    6502b555:	lea    rcx,[rbx+0x30]
    6502b559:	add    rsp,0x20
    6502b55d:	pop    rbx
    6502b55e:	rex.W jmp QWORD PTR [rip+0x8bab]        # 0x65034110
    6502b565:	int3   
    6502b566:	int3   
    6502b567:	int3   
    6502b568:	int3   
    6502b569:	int3   
    6502b56a:	int3   
    6502b56b:	int3   
    6502b56c:	int3   
    6502b56d:	int3   
    6502b56e:	int3   
    6502b56f:	int3   
    6502b570:	rex push rbx
    6502b572:	sub    rsp,0x20
    6502b576:	cmp    ecx,0x14
    6502b579:	mov    rbx,rdx
    6502b57c:	jge    0x6502b593
    6502b57e:	add    ecx,0x10
    6502b581:	call   0x650297c0
    6502b586:	or     DWORD PTR [rbx+0x18],0x8000
    6502b58d:	add    rsp,0x20
    6502b591:	pop    rbx
    6502b592:	ret    
    6502b593:	lea    rcx,[rdx+0x30]
    6502b597:	add    rsp,0x20
    6502b59b:	pop    rbx
    6502b59c:	rex.W jmp QWORD PTR [rip+0x8b6d]        # 0x65034110
    6502b5a3:	int3   
    6502b5a4:	int3   
    6502b5a5:	int3   
    6502b5a6:	int3   
    6502b5a7:	int3   
    6502b5a8:	int3   
    6502b5a9:	int3   
    6502b5aa:	int3   
    6502b5ab:	int3   
    6502b5ac:	int3   
    6502b5ad:	int3   
    6502b5ae:	int3   
    6502b5af:	int3   
    6502b5b0:	lea    rdx,[rip+0x17b49]        # 0x65043100
    6502b5b7:	cmp    rcx,rdx
    6502b5ba:	jb     0x6502b5f3
    6502b5bc:	lea    rax,[rip+0x17ecd]        # 0x65043490
    6502b5c3:	cmp    rcx,rax
    6502b5c6:	ja     0x6502b5f3
    6502b5c8:	and    DWORD PTR [rcx+0x18],0xffff7fff
    6502b5cf:	sub    rcx,rdx
    6502b5d2:	movabs rax,0x2aaaaaaaaaaaaaab
    6502b5dc:	imul   rcx
    6502b5df:	sar    rdx,0x3
    6502b5e3:	mov    rcx,rdx
    6502b5e6:	shr    rcx,0x3f
    6502b5ea:	lea    ecx,[rcx+rdx*1+0x10]
    6502b5ee:	jmp    0x65029690
    6502b5f3:	add    rcx,0x30
    6502b5f7:	rex.W jmp QWORD PTR [rip+0x8b1a]        # 0x65034118
    6502b5fe:	int3   
    6502b5ff:	int3   
    6502b600:	cmp    ecx,0x14
    6502b603:	jge    0x6502b614
    6502b605:	and    DWORD PTR [rdx+0x18],0xffff7fff
    6502b60c:	add    ecx,0x10
    6502b60f:	jmp    0x65029690
    6502b614:	lea    rcx,[rdx+0x30]
    6502b618:	rex.W jmp QWORD PTR [rip+0x8af9]        # 0x65034118
    6502b61f:	int3   
    6502b620:	sub    rsp,0x38
    6502b624:	test   rcx,rcx
    6502b627:	jne    0x6502b654
    6502b629:	call   0x650202b0
    6502b62e:	xor    r9d,r9d
    6502b631:	xor    r8d,r8d
    6502b634:	xor    edx,edx
    6502b636:	xor    ecx,ecx
    6502b638:	mov    QWORD PTR [rsp+0x20],0x0
    6502b641:	mov    DWORD PTR [rax],0x16
    6502b647:	call   0x6501d850
    6502b64c:	or     eax,0xffffffff
    6502b64f:	add    rsp,0x38
    6502b653:	ret    
    6502b654:	mov    eax,DWORD PTR [rcx+0x1c]
    6502b657:	add    rsp,0x38
    6502b65b:	ret    
    6502b65c:	int3   
    6502b65d:	int3   
    6502b65e:	int3   
    6502b65f:	int3   
    6502b660:	mov    QWORD PTR [rsp+0x18],rbx
    6502b665:	mov    QWORD PTR [rsp+0x20],rbp
    6502b66a:	push   rsi
    6502b66b:	push   rdi
    6502b66c:	push   r12
    6502b66e:	sub    rsp,0x40
    6502b672:	mov    rax,QWORD PTR [rip+0x16aa7]        # 0x65042120
    6502b679:	xor    rax,rsp
    6502b67c:	mov    QWORD PTR [rsp+0x30],rax
    6502b681:	test   BYTE PTR [rdx+0x18],0x40
    6502b685:	mov    rdi,rdx
    6502b688:	movzx  ebp,cx
    6502b68b:	mov    WORD PTR [rsp+0x20],cx
    6502b690:	jne    0x6502b88b
    6502b696:	mov    rcx,rdx
    6502b699:	call   0x6502b620
    6502b69e:	lea    rsi,[rip+0x1732b]        # 0x650429d0
    6502b6a5:	lea    r12,[rip+0x1c8d4]        # 0x65047f80
    6502b6ac:	cmp    eax,0xffffffff
    6502b6af:	je     0x6502b6e6
    6502b6b1:	mov    rcx,rdi
    6502b6b4:	call   0x6502b620
    6502b6b9:	cmp    eax,0xfffffffe
    6502b6bc:	je     0x6502b6e6
    6502b6be:	mov    rcx,rdi
    6502b6c1:	call   0x6502b620
    6502b6c6:	mov    rcx,rdi
    6502b6c9:	movsxd rbx,eax
    6502b6cc:	sar    rbx,0x5
    6502b6d0:	call   0x6502b620
    6502b6d5:	mov    r11d,eax
    6502b6d8:	and    r11d,0x1f
    6502b6dc:	imul   r11,r11,0x58
    6502b6e0:	add    r11,QWORD PTR [r12+rbx*8]
    6502b6e4:	jmp    0x6502b6e9
    6502b6e6:	mov    r11,rsi
    6502b6e9:	movzx  ecx,BYTE PTR [r11+0x38]
    6502b6ee:	and    cl,0x7f
    6502b6f1:	cmp    cl,0x2
    6502b6f4:	jne    0x6502b712
    6502b6f6:	add    DWORD PTR [rdi+0x8],0xfffffffe
    6502b6fa:	js     0x6502b8a0
    6502b700:	mov    rcx,QWORD PTR [rdi]
    6502b703:	mov    ax,bp
    6502b706:	mov    WORD PTR [rcx],bp
    6502b709:	add    QWORD PTR [rdi],0x2
    6502b70d:	jmp    0x6502b8ab
    6502b712:	mov    rcx,rdi
    6502b715:	call   0x6502b620
    6502b71a:	cmp    eax,0xffffffff
    6502b71d:	je     0x6502b754
    6502b71f:	mov    rcx,rdi
    6502b722:	call   0x6502b620
    6502b727:	cmp    eax,0xfffffffe
    6502b72a:	je     0x6502b754
    6502b72c:	mov    rcx,rdi
    6502b72f:	call   0x6502b620
    6502b734:	mov    rcx,rdi
    6502b737:	movsxd rbx,eax
    6502b73a:	sar    rbx,0x5
    6502b73e:	call   0x6502b620
    6502b743:	mov    r11d,eax
    6502b746:	and    r11d,0x1f
    6502b74a:	imul   r11,r11,0x58
    6502b74e:	add    r11,QWORD PTR [r12+rbx*8]
    6502b752:	jmp    0x6502b757
    6502b754:	mov    r11,rsi
    6502b757:	movzx  eax,BYTE PTR [r11+0x38]
    6502b75c:	and    al,0x7f
    6502b75e:	cmp    al,0x1
    6502b760:	jne    0x6502b7d4
    6502b762:	add    DWORD PTR [rdi+0x8],0xffffffff
    6502b766:	js     0x6502b77d
    6502b768:	mov    rax,QWORD PTR [rdi]
    6502b76b:	mov    BYTE PTR [rax],bpl
    6502b76e:	mov    rax,QWORD PTR [rdi]
    6502b771:	movzx  ecx,BYTE PTR [rax]
    6502b774:	add    rax,0x1
    6502b778:	mov    QWORD PTR [rdi],rax
    6502b77b:	jmp    0x6502b78b
    6502b77d:	movsx  ecx,bpl
    6502b781:	mov    rdx,rdi
    6502b784:	call   0x65023dc0
    6502b789:	mov    ecx,eax
    6502b78b:	cmp    ecx,0xffffffff
    6502b78e:	jne    0x6502b799
    6502b790:	or     ax,0xffff
    6502b794:	jmp    0x6502b8ab
    6502b799:	add    DWORD PTR [rdi+0x8],0xffffffff
    6502b79d:	js     0x6502b7b8
    6502b79f:	mov    rcx,QWORD PTR [rdi]
    6502b7a2:	movzx  eax,BYTE PTR [rsp+0x21]
    6502b7a7:	mov    BYTE PTR [rcx],al
    6502b7a9:	mov    rax,QWORD PTR [rdi]
    6502b7ac:	movzx  ecx,BYTE PTR [rax]
    6502b7af:	add    rax,0x1
    6502b7b3:	mov    QWORD PTR [rdi],rax
    6502b7b6:	jmp    0x6502b7c7
    6502b7b8:	movsx  ecx,BYTE PTR [rsp+0x21]
    6502b7bd:	mov    rdx,rdi
    6502b7c0:	call   0x65023dc0
    6502b7c5:	mov    ecx,eax
    6502b7c7:	cmp    ecx,0xffffffff
    6502b7ca:	je     0x6502b790
    6502b7cc:	mov    ax,bp
    6502b7cf:	jmp    0x6502b8ab
    6502b7d4:	mov    rcx,rdi
    6502b7d7:	call   0x6502b620
    6502b7dc:	cmp    eax,0xffffffff
    6502b7df:	je     0x6502b812
    6502b7e1:	mov    rcx,rdi
    6502b7e4:	call   0x6502b620
    6502b7e9:	cmp    eax,0xfffffffe
    6502b7ec:	je     0x6502b812
    6502b7ee:	mov    rcx,rdi
    6502b7f1:	call   0x6502b620
    6502b7f6:	mov    rcx,rdi
    6502b7f9:	movsxd rbx,eax
    6502b7fc:	sar    rbx,0x5
    6502b800:	call   0x6502b620
    6502b805:	mov    esi,eax
    6502b807:	and    esi,0x1f
    6502b80a:	imul   rsi,rsi,0x58
    6502b80e:	add    rsi,QWORD PTR [r12+rbx*8]
    6502b812:	test   BYTE PTR [rsi+0x8],0x80
    6502b816:	je     0x6502b88b
    6502b818:	lea    rdx,[rsp+0x24]
    6502b81d:	lea    rcx,[rsp+0x20]
    6502b822:	movzx  r9d,bp
    6502b826:	mov    r8d,0x5
    6502b82c:	call   0x6502d360
    6502b831:	test   eax,eax
    6502b833:	jne    0x6502b790
    6502b839:	xor    esi,esi
    6502b83b:	cmp    DWORD PTR [rsp+0x20],esi
    6502b83f:	jle    0x6502b7cc
    6502b841:	lea    rbx,[rsp+0x24]
    6502b846:	add    DWORD PTR [rdi+0x8],0xffffffff
    6502b84a:	js     0x6502b863
    6502b84c:	mov    rcx,QWORD PTR [rdi]
    6502b84f:	movzx  eax,BYTE PTR [rbx]
    6502b852:	mov    BYTE PTR [rcx],al
    6502b854:	mov    rax,QWORD PTR [rdi]
    6502b857:	movzx  ecx,BYTE PTR [rax]
    6502b85a:	add    rax,0x1
    6502b85e:	mov    QWORD PTR [rdi],rax
    6502b861:	jmp    0x6502b870
    6502b863:	movsx  ecx,BYTE PTR [rbx]
    6502b866:	mov    rdx,rdi
    6502b869:	call   0x65023dc0
    6502b86e:	mov    ecx,eax
    6502b870:	cmp    ecx,0xffffffff
    6502b873:	je     0x6502b790
    6502b879:	add    esi,0x1
    6502b87c:	add    rbx,0x1
    6502b880:	cmp    esi,DWORD PTR [rsp+0x20]
    6502b884:	jl     0x6502b846
    6502b886:	mov    ax,bp
    6502b889:	jmp    0x6502b8ab
    6502b88b:	add    DWORD PTR [rdi+0x8],0xfffffffe
    6502b88f:	js     0x6502b8a0
    6502b891:	mov    rax,QWORD PTR [rdi]
    6502b894:	mov    WORD PTR [rax],bp
    6502b897:	add    QWORD PTR [rdi],0x2
    6502b89b:	mov    ax,bp
    6502b89e:	jmp    0x6502b8ab
    6502b8a0:	mov    rdx,rdi
    6502b8a3:	movzx  ecx,bp
    6502b8a6:	call   0x6502dd90
    6502b8ab:	mov    rcx,QWORD PTR [rsp+0x30]
    6502b8b0:	xor    rcx,rsp
    6502b8b3:	call   0x6501e4e0
    6502b8b8:	mov    rbx,QWORD PTR [rsp+0x70]
    6502b8bd:	mov    rbp,QWORD PTR [rsp+0x78]
    6502b8c2:	add    rsp,0x40
    6502b8c6:	pop    r12
    6502b8c8:	pop    rdi
    6502b8c9:	pop    rsi
    6502b8ca:	ret    
    6502b8cb:	int3   
    6502b8cc:	int3   
    6502b8cd:	int3   
    6502b8ce:	int3   
    6502b8cf:	int3   
    6502b8d0:	mov    rcx,QWORD PTR [rip+0x16849]        # 0x65042120
    6502b8d7:	xor    eax,eax
    6502b8d9:	or     rcx,0x1
    6502b8dd:	cmp    QWORD PTR [rip+0x19104],rcx        # 0x650449e8
    6502b8e4:	sete   al
    6502b8e7:	ret    
    6502b8e8:	int3   
    6502b8e9:	int3   
    6502b8ea:	int3   
    6502b8eb:	int3   
    6502b8ec:	int3   
    6502b8ed:	int3   
    6502b8ee:	int3   
    6502b8ef:	int3   
    6502b8f0:	mov    QWORD PTR [rsp+0x8],rbx
    6502b8f5:	mov    QWORD PTR [rsp+0x10],rsi
    6502b8fa:	push   rdi
    6502b8fb:	sub    rsp,0x50
    6502b8ff:	test   rdx,rdx
    6502b902:	mov    rsi,r8
    6502b905:	mov    rdi,rdx
    6502b908:	mov    rbx,rcx
    6502b90b:	je     0x6502b921
    6502b90d:	test   r8,r8
    6502b910:	je     0x6502b921
    6502b912:	cmp    BYTE PTR [rdx],0x0
    6502b915:	jne    0x6502b933
    6502b917:	test   rcx,rcx
    6502b91a:	je     0x6502b921
    6502b91c:	mov    WORD PTR [rcx],0x0
    6502b921:	xor    eax,eax
    6502b923:	mov    rbx,QWORD PTR [rsp+0x60]
    6502b928:	mov    rsi,QWORD PTR [rsp+0x68]
    6502b92d:	add    rsp,0x50
    6502b931:	pop    rdi
    6502b932:	ret    
    6502b933:	test   r9,r9
    6502b936:	mov    BYTE PTR [rsp+0x48],0x0
    6502b93b:	jne    0x6502b9d2
    6502b941:	call   0x650208c0
    6502b946:	mov    QWORD PTR [rsp+0x40],rax
    6502b94b:	mov    r11,rax
    6502b94e:	mov    rcx,QWORD PTR [rax+0xc0]
    6502b955:	cmp    rcx,QWORD PTR [rip+0x17044]        # 0x650429a0
    6502b95c:	mov    QWORD PTR [rsp+0x30],rcx
    6502b961:	mov    rax,QWORD PTR [rax+0xb8]
    6502b968:	mov    QWORD PTR [rsp+0x38],rax
    6502b96d:	je     0x6502b992
    6502b96f:	mov    ecx,DWORD PTR [r11+0xc8]
    6502b976:	test   DWORD PTR [rip+0x16eac],ecx        # 0x65042828
    6502b97c:	jne    0x6502b992
    6502b97e:	call   0x65023d20
    6502b983:	mov    r11,QWORD PTR [rsp+0x40]
    6502b988:	mov    QWORD PTR [rsp+0x30],rax
    6502b98d:	mov    rax,QWORD PTR [rsp+0x38]
    6502b992:	cmp    rax,QWORD PTR [rip+0x16d87]        # 0x65042720
    6502b999:	je     0x6502b9b9
    6502b99b:	mov    eax,DWORD PTR [r11+0xc8]
    6502b9a2:	test   DWORD PTR [rip+0x16e80],eax        # 0x65042828
    6502b9a8:	jne    0x6502b9b9
    6502b9aa:	call   0x650231d0
    6502b9af:	mov    r11,QWORD PTR [rsp+0x40]
    6502b9b4:	mov    QWORD PTR [rsp+0x38],rax
    6502b9b9:	test   BYTE PTR [r11+0xc8],0x2
    6502b9c1:	jne    0x6502b9ea
    6502b9c3:	or     DWORD PTR [r11+0xc8],0x2
    6502b9cb:	mov    BYTE PTR [rsp+0x48],0x1
    6502b9d0:	jmp    0x6502b9e5
    6502b9d2:	mov    rax,QWORD PTR [r9]
    6502b9d5:	lea    rcx,[rsp+0x30]
    6502b9da:	mov    QWORD PTR [rcx],rax
    6502b9dd:	mov    rax,QWORD PTR [r9+0x8]
    6502b9e1:	mov    QWORD PTR [rcx+0x8],rax
    6502b9e5:	mov    r11,QWORD PTR [rsp+0x40]
    6502b9ea:	mov    rax,QWORD PTR [rsp+0x30]
    6502b9ef:	cmp    DWORD PTR [rax+0x14],0x0
    6502b9f3:	jne    0x6502ba24
    6502b9f5:	test   rbx,rbx
    6502b9f8:	je     0x6502ba00
    6502b9fa:	movzx  eax,BYTE PTR [rdi]
    6502b9fd:	mov    WORD PTR [rbx],ax
    6502ba00:	cmp    BYTE PTR [rsp+0x48],0x0
    6502ba05:	je     0x6502ba0f
    6502ba07:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6502ba0f:	mov    eax,0x1
    6502ba14:	mov    rbx,QWORD PTR [rsp+0x60]
    6502ba19:	mov    rsi,QWORD PTR [rsp+0x68]
    6502ba1e:	add    rsp,0x50
    6502ba22:	pop    rdi
    6502ba23:	ret    
    6502ba24:	movzx  ecx,BYTE PTR [rdi]
    6502ba27:	lea    rdx,[rsp+0x30]
    6502ba2c:	call   0x65028d00
    6502ba31:	test   eax,eax
    6502ba33:	je     0x6502baeb
    6502ba39:	mov    rcx,QWORD PTR [rsp+0x30]
    6502ba3e:	mov    r9d,DWORD PTR [rcx+0x10c]
    6502ba45:	cmp    r9d,0x1
    6502ba49:	jle    0x6502ba7b
    6502ba4b:	cmp    esi,r9d
    6502ba4e:	jl     0x6502ba7b
    6502ba50:	mov    ecx,DWORD PTR [rcx+0x4]
    6502ba53:	xor    eax,eax
    6502ba55:	test   rbx,rbx
    6502ba58:	setne  al
    6502ba5b:	mov    r8,rdi
    6502ba5e:	mov    edx,0x9
    6502ba63:	mov    DWORD PTR [rsp+0x28],eax
    6502ba67:	mov    QWORD PTR [rsp+0x20],rbx
    6502ba6c:	call   QWORD PTR [rip+0x85c6]        # 0x65034038
    6502ba72:	test   eax,eax
    6502ba74:	mov    rcx,QWORD PTR [rsp+0x30]
    6502ba79:	jne    0x6502ba8d
    6502ba7b:	movsxd rax,DWORD PTR [rcx+0x10c]
    6502ba82:	cmp    rsi,rax
    6502ba85:	jb     0x6502baba
    6502ba87:	cmp    BYTE PTR [rdi+0x1],0x0
    6502ba8b:	je     0x6502baba
    6502ba8d:	cmp    BYTE PTR [rsp+0x48],0x0
    6502ba92:	mov    eax,DWORD PTR [rcx+0x10c]
    6502ba98:	je     0x6502b923
    6502ba9e:	mov    rcx,QWORD PTR [rsp+0x40]
    6502baa3:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    6502baaa:	mov    rbx,QWORD PTR [rsp+0x60]
    6502baaf:	mov    rsi,QWORD PTR [rsp+0x68]
    6502bab4:	add    rsp,0x50
    6502bab8:	pop    rdi
    6502bab9:	ret    
    6502baba:	call   0x650202b0
    6502babf:	mov    DWORD PTR [rax],0x2a
    6502bac5:	cmp    BYTE PTR [rsp+0x48],0x0
    6502baca:	je     0x6502bad8
    6502bacc:	mov    rax,QWORD PTR [rsp+0x40]
    6502bad1:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502bad8:	or     eax,0xffffffff
    6502badb:	mov    rbx,QWORD PTR [rsp+0x60]
    6502bae0:	mov    rsi,QWORD PTR [rsp+0x68]
    6502bae5:	add    rsp,0x50
    6502bae9:	pop    rdi
    6502baea:	ret    
    6502baeb:	xor    eax,eax
    6502baed:	mov    r9d,0x1
    6502baf3:	test   rbx,rbx
    6502baf6:	setne  al
    6502baf9:	lea    edx,[r9+0x8]
    6502bafd:	mov    r8,rdi
    6502bb00:	mov    DWORD PTR [rsp+0x28],eax
    6502bb04:	mov    rax,QWORD PTR [rsp+0x30]
    6502bb09:	mov    QWORD PTR [rsp+0x20],rbx
    6502bb0e:	mov    ecx,DWORD PTR [rax+0x4]
    6502bb11:	call   QWORD PTR [rip+0x8521]        # 0x65034038
    6502bb17:	test   eax,eax
    6502bb19:	je     0x6502baba
    6502bb1b:	cmp    BYTE PTR [rsp+0x48],0x0
    6502bb20:	je     0x6502bb2e
    6502bb22:	mov    rax,QWORD PTR [rsp+0x40]
    6502bb27:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502bb2e:	mov    rbx,QWORD PTR [rsp+0x60]
    6502bb33:	mov    rsi,QWORD PTR [rsp+0x68]
    6502bb38:	mov    eax,0x1
    6502bb3d:	add    rsp,0x50
    6502bb41:	pop    rdi
    6502bb42:	ret    
    6502bb43:	int3   
    6502bb44:	int3   
    6502bb45:	int3   
    6502bb46:	int3   
    6502bb47:	int3   
    6502bb48:	int3   
    6502bb49:	int3   
    6502bb4a:	int3   
    6502bb4b:	int3   
    6502bb4c:	int3   
    6502bb4d:	int3   
    6502bb4e:	int3   
    6502bb4f:	int3   
    6502bb50:	xor    r9d,r9d
    6502bb53:	jmp    0x6502b8f0
    6502bb58:	int3   
    6502bb59:	int3   
    6502bb5a:	int3   
    6502bb5b:	int3   
    6502bb5c:	int3   
    6502bb5d:	int3   
    6502bb5e:	int3   
    6502bb5f:	int3   
    6502bb60:	test   edx,edx
    6502bb62:	jle    0x6502bbe8
    6502bb68:	mov    QWORD PTR [rsp+0x8],rbx
    6502bb6d:	mov    QWORD PTR [rsp+0x10],rbp
    6502bb72:	mov    QWORD PTR [rsp+0x18],rsi
    6502bb77:	push   rdi
    6502bb78:	sub    rsp,0x20
    6502bb7c:	mov    rdi,r9
    6502bb7f:	mov    rbx,r8
    6502bb82:	mov    esi,edx
    6502bb84:	movzx  ebp,cl
    6502bb87:	sub    esi,0x1
    6502bb8a:	test   BYTE PTR [rbx+0x18],0x40
    6502bb8e:	je     0x6502bb97
    6502bb90:	cmp    QWORD PTR [rbx+0x10],0x0
    6502bb95:	je     0x6502bbbe
    6502bb97:	add    DWORD PTR [rbx+0x8],0xffffffff
    6502bb9b:	js     0x6502bbad
    6502bb9d:	mov    rax,QWORD PTR [rbx]
    6502bba0:	mov    BYTE PTR [rax],bpl
    6502bba3:	add    QWORD PTR [rbx],0x1
    6502bba7:	movzx  eax,bpl
    6502bbab:	jmp    0x6502bbb9
    6502bbad:	movsx  ecx,bpl
    6502bbb1:	mov    rdx,rbx
    6502bbb4:	call   0x65023dc0
    6502bbb9:	cmp    eax,0xffffffff
    6502bbbc:	je     0x6502bbce
    6502bbbe:	add    DWORD PTR [rdi],0x1
    6502bbc1:	mov    eax,DWORD PTR [rdi]
    6502bbc3:	cmp    eax,0xffffffff
    6502bbc6:	je     0x6502bbd4
    6502bbc8:	test   esi,esi
    6502bbca:	jg     0x6502bb87
    6502bbcc:	jmp    0x6502bbd4
    6502bbce:	mov    DWORD PTR [rdi],0xffffffff
    6502bbd4:	mov    rbx,QWORD PTR [rsp+0x30]
    6502bbd9:	mov    rbp,QWORD PTR [rsp+0x38]
    6502bbde:	mov    rsi,QWORD PTR [rsp+0x40]
    6502bbe3:	add    rsp,0x20
    6502bbe7:	pop    rdi
    6502bbe8:	ret    0x0
    6502bbeb:	int3   
    6502bbec:	int3   
    6502bbed:	int3   
    6502bbee:	int3   
    6502bbef:	int3   
    6502bbf0:	mov    QWORD PTR [rsp+0x8],rbx
    6502bbf5:	mov    QWORD PTR [rsp+0x10],rbp
    6502bbfa:	mov    QWORD PTR [rsp+0x18],rsi
    6502bbff:	push   rdi
    6502bc00:	sub    rsp,0x20
    6502bc04:	test   BYTE PTR [r8+0x18],0x40
    6502bc09:	mov    rdi,r9
    6502bc0c:	mov    rbx,r8
    6502bc0f:	mov    esi,edx
    6502bc11:	mov    rbp,rcx
    6502bc14:	je     0x6502bc25
    6502bc16:	cmp    QWORD PTR [r8+0x10],0x0
    6502bc1b:	jne    0x6502bc25
    6502bc1d:	add    DWORD PTR [r9],edx
    6502bc20:	jmp    0x6502bca6
    6502bc25:	test   edx,edx
    6502bc27:	jle    0x6502bca6
    6502bc2d:	data16 xchg ax,ax
    6502bc30:	movzx  ecx,BYTE PTR [rbp+0x0]
    6502bc34:	sub    esi,0x1
    6502bc37:	test   BYTE PTR [rbx+0x18],0x40
    6502bc3b:	je     0x6502bc44
    6502bc3d:	cmp    QWORD PTR [rbx+0x10],0x0
    6502bc42:	je     0x6502bc6c
    6502bc44:	add    DWORD PTR [rbx+0x8],0xffffffff
    6502bc48:	js     0x6502bc58
    6502bc4a:	mov    rax,QWORD PTR [rbx]
    6502bc4d:	mov    BYTE PTR [rax],cl
    6502bc4f:	add    QWORD PTR [rbx],0x1
    6502bc53:	movzx  eax,cl
    6502bc56:	jmp    0x6502bc63
    6502bc58:	movsx  ecx,cl
    6502bc5b:	mov    rdx,rbx
    6502bc5e:	call   0x65023dc0
    6502bc63:	cmp    eax,0xffffffff
    6502bc66:	jne    0x6502bc6c
    6502bc68:	mov    DWORD PTR [rdi],eax
    6502bc6a:	jmp    0x6502bc6f
    6502bc6c:	add    DWORD PTR [rdi],0x1
    6502bc6f:	add    rbp,0x1
    6502bc73:	cmp    DWORD PTR [rdi],0xffffffff
    6502bc76:	jne    0x6502bca2
    6502bc78:	call   0x650202b0
    6502bc7d:	cmp    DWORD PTR [rax],0x2a
    6502bc80:	jne    0x6502bca6
    6502bc82:	test   BYTE PTR [rbx+0x18],0x40
    6502bc86:	je     0x6502bc8f
    6502bc88:	cmp    QWORD PTR [rbx+0x10],0x0
    6502bc8d:	je     0x6502bc9f
    6502bc8f:	add    DWORD PTR [rbx+0x8],0xffffffff
    6502bc93:	js     0x6502bcbb
    6502bc95:	mov    rax,QWORD PTR [rbx]
    6502bc98:	mov    BYTE PTR [rax],0x3f
    6502bc9b:	add    QWORD PTR [rbx],0x1
    6502bc9f:	add    DWORD PTR [rdi],0x1
    6502bca2:	test   esi,esi
    6502bca4:	jg     0x6502bc30
    6502bca6:	mov    rbx,QWORD PTR [rsp+0x30]
    6502bcab:	mov    rbp,QWORD PTR [rsp+0x38]
    6502bcb0:	mov    rsi,QWORD PTR [rsp+0x40]
    6502bcb5:	add    rsp,0x20
    6502bcb9:	pop    rdi
    6502bcba:	ret    
    6502bcbb:	mov    rdx,rbx
    6502bcbe:	mov    ecx,0x3f
    6502bcc3:	call   0x65023dc0
    6502bcc8:	cmp    eax,0xffffffff
    6502bccb:	jne    0x6502bc9f
    6502bccd:	mov    DWORD PTR [rdi],eax
    6502bccf:	jmp    0x6502bca2
    6502bcd1:	int3   
    6502bcd2:	int3   
    6502bcd3:	int3   
    6502bcd4:	int3   
    6502bcd5:	int3   
    6502bcd6:	int3   
    6502bcd7:	int3   
    6502bcd8:	int3   
    6502bcd9:	int3   
    6502bcda:	int3   
    6502bcdb:	int3   
    6502bcdc:	int3   
    6502bcdd:	int3   
    6502bcde:	int3   
    6502bcdf:	int3   
    6502bce0:	rex push rbp
    6502bce2:	push   rsi
    6502bce3:	push   rdi
    6502bce4:	push   r12
    6502bce6:	push   r14
    6502bce8:	push   r15
    6502bcea:	sub    rsp,0x2e8
    6502bcf1:	mov    rax,QWORD PTR [rip+0x16428]        # 0x65042120
    6502bcf8:	xor    rax,rsp
    6502bcfb:	mov    QWORD PTR [rsp+0x2c8],rax
    6502bd03:	xor    ebp,ebp
    6502bd05:	test   r8,r8
    6502bd08:	mov    rdi,r9
    6502bd0b:	mov    QWORD PTR [rsp+0x60],r9
    6502bd10:	mov    rsi,rdx
    6502bd13:	mov    r12,rcx
    6502bd16:	mov    DWORD PTR [rsp+0x98],ebp
    6502bd1d:	mov    r14d,ebp
    6502bd20:	mov    DWORD PTR [rsp+0x40],ebp
    6502bd24:	mov    DWORD PTR [rsp+0x68],ebp
    6502bd28:	mov    r15d,ebp
    6502bd2b:	mov    DWORD PTR [rsp+0x48],ebp
    6502bd2f:	mov    DWORD PTR [rsp+0x54],ebp
    6502bd33:	mov    DWORD PTR [rsp+0x70],ebp
    6502bd37:	mov    DWORD PTR [rsp+0x4c],ebp
    6502bd3b:	mov    BYTE PTR [rsp+0x90],bpl
    6502bd43:	jne    0x6502bdf3
    6502bd49:	call   0x650208c0
    6502bd4e:	mov    QWORD PTR [rsp+0x88],rax
    6502bd56:	mov    rdx,rax
    6502bd59:	mov    rcx,QWORD PTR [rax+0xc0]
    6502bd60:	cmp    rcx,QWORD PTR [rip+0x16c39]        # 0x650429a0
    6502bd67:	mov    QWORD PTR [rsp+0x78],rcx
    6502bd6c:	mov    rax,QWORD PTR [rax+0xb8]
    6502bd73:	mov    QWORD PTR [rsp+0x80],rax
    6502bd7b:	je     0x6502bda5
    6502bd7d:	mov    ecx,DWORD PTR [rdx+0xc8]
    6502bd83:	test   DWORD PTR [rip+0x16a9f],ecx        # 0x65042828
    6502bd89:	jne    0x6502bda5
    6502bd8b:	call   0x65023d20
    6502bd90:	mov    rdx,QWORD PTR [rsp+0x88]
    6502bd98:	mov    QWORD PTR [rsp+0x78],rax
    6502bd9d:	mov    rax,QWORD PTR [rsp+0x80]
    6502bda5:	cmp    rax,QWORD PTR [rip+0x16974]        # 0x65042720
    6502bdac:	je     0x6502bdd1
    6502bdae:	mov    eax,DWORD PTR [rdx+0xc8]
    6502bdb4:	test   DWORD PTR [rip+0x16a6e],eax        # 0x65042828
    6502bdba:	jne    0x6502bdd1
    6502bdbc:	call   0x650231d0
    6502bdc1:	mov    rdx,QWORD PTR [rsp+0x88]
    6502bdc9:	mov    QWORD PTR [rsp+0x80],rax
    6502bdd1:	test   BYTE PTR [rdx+0xc8],0x2
    6502bdd8:	jne    0x6502be0e
    6502bdda:	or     DWORD PTR [rdx+0xc8],0x2
    6502bde1:	mov    rdx,QWORD PTR [rsp+0x88]
    6502bde9:	mov    BYTE PTR [rsp+0x90],0x1
    6502bdf1:	jmp    0x6502be0e
    6502bdf3:	mov    rax,QWORD PTR [r8]
    6502bdf6:	lea    rcx,[rsp+0x78]
    6502bdfb:	mov    QWORD PTR [rcx],rax
    6502bdfe:	mov    rax,QWORD PTR [r8+0x8]
    6502be02:	mov    QWORD PTR [rcx+0x8],rax
    6502be06:	mov    rdx,QWORD PTR [rsp+0x88]
    6502be0e:	test   r12,r12
    6502be11:	jne    0x6502be53
    6502be13:	call   0x650202b0
    6502be18:	xor    r9d,r9d
    6502be1b:	xor    r8d,r8d
    6502be1e:	xor    edx,edx
    6502be20:	xor    ecx,ecx
    6502be22:	mov    QWORD PTR [rsp+0x20],rbp
    6502be27:	mov    DWORD PTR [rax],0x16
    6502be2d:	call   0x6501d850
    6502be32:	cmp    BYTE PTR [rsp+0x90],bpl
    6502be3a:	je     0x6502be4b
    6502be3c:	mov    rax,QWORD PTR [rsp+0x88]
    6502be44:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502be4b:	or     eax,0xffffffff
    6502be4e:	jmp    0x6502cc3b
    6502be53:	test   BYTE PTR [r12+0x18],0x40
    6502be59:	mov    QWORD PTR [rsp+0x2e0],rbx
    6502be61:	lea    r10,[rip+0xfffffffffffd4198]        # 0x65000000
    6502be68:	mov    QWORD PTR [rsp+0x2d8],r13
    6502be70:	jne    0x6502bf41
    6502be76:	mov    rcx,r12
    6502be79:	call   0x6502b620
    6502be7e:	lea    rbx,[rip+0x16b4b]        # 0x650429d0
    6502be85:	cmp    eax,0xffffffff
    6502be88:	je     0x6502becd
    6502be8a:	mov    rcx,r12
    6502be8d:	call   0x6502b620
    6502be92:	cmp    eax,0xfffffffe
    6502be95:	je     0x6502becd
    6502be97:	mov    rcx,r12
    6502be9a:	call   0x6502b620
    6502be9f:	lea    r13,[rip+0xfffffffffffd415a]        # 0x65000000
    6502bea6:	movsxd rcx,eax
    6502bea9:	sar    rcx,0x5
    6502bead:	mov    rdi,QWORD PTR [r13+rcx*8+0x47f80]
    6502beb5:	mov    rcx,r12
    6502beb8:	call   0x6502b620
    6502bebd:	mov    r11d,eax
    6502bec0:	and    r11d,0x1f
    6502bec4:	imul   r11,r11,0x58
    6502bec8:	add    r11,rdi
    6502becb:	jmp    0x6502bed7
    6502becd:	mov    r11,rbx
    6502bed0:	lea    r13,[rip+0xfffffffffffd4129]        # 0x65000000
    6502bed7:	test   BYTE PTR [r11+0x38],0x7f
    6502bedc:	jne    0x6502bf72
    6502bee2:	mov    rcx,r12
    6502bee5:	call   0x6502b620
    6502beea:	cmp    eax,0xffffffff
    6502beed:	je     0x6502bf27
    6502beef:	mov    rcx,r12
    6502bef2:	call   0x6502b620
    6502bef7:	cmp    eax,0xfffffffe
    6502befa:	je     0x6502bf27
    6502befc:	mov    rcx,r12
    6502beff:	call   0x6502b620
    6502bf04:	movsxd rcx,eax
    6502bf07:	sar    rcx,0x5
    6502bf0b:	mov    rdi,QWORD PTR [r13+rcx*8+0x47f80]
    6502bf13:	mov    rcx,r12
    6502bf16:	call   0x6502b620
    6502bf1b:	mov    ebx,eax
    6502bf1d:	and    ebx,0x1f
    6502bf20:	imul   rbx,rbx,0x58
    6502bf24:	add    rbx,rdi
    6502bf27:	test   BYTE PTR [rbx+0x38],0x80
    6502bf2b:	jne    0x6502bf72
    6502bf2d:	mov    rdx,QWORD PTR [rsp+0x88]
    6502bf35:	mov    rdi,QWORD PTR [rsp+0x60]
    6502bf3a:	lea    r10,[rip+0xfffffffffffd40bf]        # 0x65000000
    6502bf41:	test   rsi,rsi
    6502bf44:	jne    0x6502bf9e
    6502bf46:	call   0x650202b0
    6502bf4b:	xor    r9d,r9d
    6502bf4e:	xor    r8d,r8d
    6502bf51:	xor    edx,edx
    6502bf53:	xor    ecx,ecx
    6502bf55:	mov    QWORD PTR [rsp+0x20],rbp
    6502bf5a:	mov    DWORD PTR [rax],0x16
    6502bf60:	call   0x6501d850
    6502bf65:	cmp    BYTE PTR [rsp+0x90],bpl
    6502bf6d:	jmp    0x6502cbfa
    6502bf72:	call   0x650202b0
    6502bf77:	xor    r9d,r9d
    6502bf7a:	xor    r8d,r8d
    6502bf7d:	xor    edx,edx
    6502bf7f:	xor    ecx,ecx
    6502bf81:	mov    QWORD PTR [rsp+0x20],rbp
    6502bf86:	mov    DWORD PTR [rax],0x16
    6502bf8c:	call   0x6501d850
    6502bf91:	cmp    BYTE PTR [rsp+0x90],bpl
    6502bf99:	jmp    0x6502cbfa
    6502bf9e:	movzx  r13d,BYTE PTR [rsi]
    6502bfa2:	xor    r9d,r9d
    6502bfa5:	test   r13b,r13b
    6502bfa8:	mov    DWORD PTR [rsp+0x44],r9d
    6502bfad:	mov    DWORD PTR [rsp+0x50],r9d
    6502bfb2:	mov    r8d,r9d
    6502bfb5:	mov    QWORD PTR [rsp+0xa0],r9
    6502bfbd:	je     0x6502cc18
    6502bfc3:	mov    rbx,QWORD PTR [rsp+0xb0]
    6502bfcb:	mov    edx,0x200
    6502bfd0:	mov    r11d,0x7fffffff
    6502bfd6:	data16 data16 xchg ax,ax
    6502bfda:	data16 xchg ax,ax
    6502bfdd:	data16 xchg ax,ax
    6502bfe0:	add    rsi,0x1
    6502bfe4:	test   ebp,ebp
    6502bfe6:	mov    QWORD PTR [rsp+0xb8],rsi
    6502bfee:	js     0x6502cbc4
    6502bff4:	lea    eax,[r13-0x20]
    6502bff8:	cmp    al,0x58
    6502bffa:	ja     0x6502c00d
    6502bffc:	movsx  rax,r13b
    6502c000:	mov    cl,BYTE PTR [rax+r10*1+0x36d50]
    6502c008:	and    ecx,0xf
    6502c00b:	jmp    0x6502c010
    6502c00d:	mov    ecx,r9d
    6502c010:	movsxd rax,ecx
    6502c013:	lea    rcx,[rax+rax*8]
    6502c017:	movsxd rax,r8d
    6502c01a:	add    rcx,rax
    6502c01d:	movzx  r8d,BYTE PTR [rcx+r10*1+0x36d70]
    6502c026:	shr    r8d,0x4
    6502c02a:	cmp    r8d,0x8
    6502c02e:	mov    DWORD PTR [rsp+0x6c],r8d
    6502c033:	je     0x6502cbcf
    6502c039:	cmp    r8d,0x7
    6502c03d:	ja     0x6502cbb2
    6502c043:	mov    ecx,DWORD PTR [r10+r8*4+0x2cc5c]
    6502c04b:	mov    eax,r8d
    6502c04e:	add    rcx,r10
    6502c051:	jmp    rcx
    6502c053:	or     r15d,0xffffffff
    6502c057:	mov    DWORD PTR [rsp+0x9c],r9d
    6502c05f:	mov    DWORD PTR [rsp+0x70],r9d
    6502c064:	mov    DWORD PTR [rsp+0x68],r9d
    6502c069:	mov    DWORD PTR [rsp+0x54],r9d
    6502c06e:	mov    r14d,r9d
    6502c071:	mov    DWORD PTR [rsp+0x48],r15d
    6502c076:	mov    DWORD PTR [rsp+0x40],r9d
    6502c07b:	mov    DWORD PTR [rsp+0x4c],r9d
    6502c080:	jmp    0x6502cbb2
    6502c085:	cmp    r13b,0x20
    6502c089:	je     0x6502c0e0
    6502c08b:	cmp    r13b,0x23
    6502c08f:	je     0x6502c0d1
    6502c091:	cmp    r13b,0x2b
    6502c095:	je     0x6502c0c3
    6502c097:	cmp    r13b,0x2d
    6502c09b:	je     0x6502c0b5
    6502c09d:	cmp    r13b,0x30
    6502c0a1:	jne    0x6502cbb2
    6502c0a7:	or     r14d,0x8
    6502c0ab:	mov    DWORD PTR [rsp+0x40],r14d
    6502c0b0:	jmp    0x6502cbb2
    6502c0b5:	or     r14d,0x4
    6502c0b9:	mov    DWORD PTR [rsp+0x40],r14d
    6502c0be:	jmp    0x6502cbb2
    6502c0c3:	or     r14d,0x1
    6502c0c7:	mov    DWORD PTR [rsp+0x40],r14d
    6502c0cc:	jmp    0x6502cbb2
    6502c0d1:	bts    r14d,0x7
    6502c0d6:	mov    DWORD PTR [rsp+0x40],r14d
    6502c0db:	jmp    0x6502cbb2
    6502c0e0:	or     r14d,0x2
    6502c0e4:	mov    DWORD PTR [rsp+0x40],r14d
    6502c0e9:	jmp    0x6502cbb2
    6502c0ee:	cmp    r13b,0x2a
    6502c0f2:	jne    0x6502c11f
    6502c0f4:	mov    eax,DWORD PTR [rdi]
    6502c0f6:	add    rdi,0x8
    6502c0fa:	test   eax,eax
    6502c0fc:	mov    QWORD PTR [rsp+0x60],rdi
    6502c101:	mov    DWORD PTR [rsp+0x68],eax
    6502c105:	jns    0x6502cbb2
    6502c10b:	or     r14d,0x4
    6502c10f:	neg    eax
    6502c111:	mov    DWORD PTR [rsp+0x68],eax
    6502c115:	mov    DWORD PTR [rsp+0x40],r14d
    6502c11a:	jmp    0x6502cbb2
    6502c11f:	mov    eax,DWORD PTR [rsp+0x68]
    6502c123:	lea    ecx,[rax+rax*4]
    6502c126:	movsx  eax,r13b
    6502c12a:	lea    eax,[rax+rcx*2-0x30]
    6502c12e:	mov    DWORD PTR [rsp+0x68],eax
    6502c132:	jmp    0x6502cbb2
    6502c137:	mov    r15d,r9d
    6502c13a:	mov    DWORD PTR [rsp+0x48],r9d
    6502c13f:	jmp    0x6502cbb2
    6502c144:	cmp    r13b,0x2a
    6502c148:	jne    0x6502c172
    6502c14a:	mov    r15d,DWORD PTR [rdi]
    6502c14d:	add    rdi,0x8
    6502c151:	test   r15d,r15d
    6502c154:	mov    QWORD PTR [rsp+0x60],rdi
    6502c159:	mov    DWORD PTR [rsp+0x48],r15d
    6502c15e:	jns    0x6502cbb2
    6502c164:	or     r15d,0xffffffff
    6502c168:	mov    DWORD PTR [rsp+0x48],r15d
    6502c16d:	jmp    0x6502cbb2
    6502c172:	lea    ecx,[r15+r15*4]
    6502c176:	movsx  eax,r13b
    6502c17a:	lea    r15d,[rax+rcx*2-0x30]
    6502c17f:	mov    DWORD PTR [rsp+0x48],r15d
    6502c184:	jmp    0x6502cbb2
    6502c189:	cmp    r13b,0x49
    6502c18d:	je     0x6502c1e8
    6502c18f:	cmp    r13b,0x68
    6502c193:	je     0x6502c1da
    6502c195:	cmp    r13b,0x6c
    6502c199:	je     0x6502c1b4
    6502c19b:	cmp    r13b,0x77
    6502c19f:	jne    0x6502cbb2
    6502c1a5:	bts    r14d,0xb
    6502c1aa:	mov    DWORD PTR [rsp+0x40],r14d
    6502c1af:	jmp    0x6502cbb2
    6502c1b4:	cmp    BYTE PTR [rsi],0x6c
    6502c1b7:	jne    0x6502c1cc
    6502c1b9:	add    rsi,0x1
    6502c1bd:	bts    r14d,0xc
    6502c1c2:	mov    DWORD PTR [rsp+0x40],r14d
    6502c1c7:	jmp    0x6502cbb2
    6502c1cc:	or     r14d,0x10
    6502c1d0:	mov    DWORD PTR [rsp+0x40],r14d
    6502c1d5:	jmp    0x6502cbb2
    6502c1da:	or     r14d,0x20
    6502c1de:	mov    DWORD PTR [rsp+0x40],r14d
    6502c1e3:	jmp    0x6502cbb2
    6502c1e8:	movzx  eax,BYTE PTR [rsi]
    6502c1eb:	bts    r14d,0xf
    6502c1f0:	cmp    al,0x36
    6502c1f2:	mov    DWORD PTR [rsp+0x40],r14d
    6502c1f7:	jne    0x6502c212
    6502c1f9:	cmp    BYTE PTR [rsi+0x1],0x34
    6502c1fd:	jne    0x6502c212
    6502c1ff:	add    rsi,0x2
    6502c203:	bts    r14d,0xf
    6502c208:	mov    DWORD PTR [rsp+0x40],r14d
    6502c20d:	jmp    0x6502cbb2
    6502c212:	cmp    al,0x33
    6502c214:	jne    0x6502c22f
    6502c216:	cmp    BYTE PTR [rsi+0x1],0x32
    6502c21a:	jne    0x6502c22f
    6502c21c:	add    rsi,0x2
    6502c220:	btr    r14d,0xf
    6502c225:	mov    DWORD PTR [rsp+0x40],r14d
    6502c22a:	jmp    0x6502cbb2
    6502c22f:	cmp    al,0x64
    6502c231:	je     0x6502cbb2
    6502c237:	cmp    al,0x69
    6502c239:	je     0x6502cbb2
    6502c23f:	cmp    al,0x6f
    6502c241:	je     0x6502cbb2
    6502c247:	cmp    al,0x75
    6502c249:	je     0x6502cbb2
    6502c24f:	cmp    al,0x78
    6502c251:	je     0x6502cbb2
    6502c257:	cmp    al,0x58
    6502c259:	je     0x6502cbb2
    6502c25f:	mov    DWORD PTR [rsp+0x6c],r9d
    6502c264:	movzx  edi,r13b
    6502c268:	lea    rdx,[rsp+0x78]
    6502c26d:	mov    DWORD PTR [rsp+0x4c],r9d
    6502c272:	mov    ecx,edi
    6502c274:	call   0x65028d00
    6502c279:	test   eax,eax
    6502c27b:	je     0x6502c2d2
    6502c27d:	test   BYTE PTR [r12+0x18],0x40
    6502c283:	je     0x6502c292
    6502c285:	cmp    QWORD PTR [r12+0x10],0x0
    6502c28b:	jne    0x6502c292
    6502c28d:	add    ebp,0x1
    6502c290:	jmp    0x6502c2c2
    6502c292:	add    DWORD PTR [r12+0x8],0xffffffff
    6502c298:	js     0x6502c2a8
    6502c29a:	mov    rax,QWORD PTR [r12]
    6502c29e:	mov    BYTE PTR [rax],r13b
    6502c2a1:	add    QWORD PTR [r12],0x1
    6502c2a6:	jmp    0x6502c2b6
    6502c2a8:	movsx  ecx,r13b
    6502c2ac:	mov    rdx,r12
    6502c2af:	call   0x65023dc0
    6502c2b4:	mov    edi,eax
    6502c2b6:	cmp    edi,0xffffffff
    6502c2b9:	jne    0x6502c2bf
    6502c2bb:	or     ebp,edi
    6502c2bd:	jmp    0x6502c2c2
    6502c2bf:	add    ebp,0x1
    6502c2c2:	mov    r13b,BYTE PTR [rsi]
    6502c2c5:	add    rsi,0x1
    6502c2c9:	test   r13b,r13b
    6502c2cc:	je     0x6502cbcf
    6502c2d2:	test   BYTE PTR [r12+0x18],0x40
    6502c2d8:	je     0x6502c308
    6502c2da:	cmp    QWORD PTR [r12+0x10],0x0
    6502c2e0:	jne    0x6502c308
    6502c2e2:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502c2e7:	add    ebp,0x1
    6502c2ea:	lea    r10,[rip+0xfffffffffffd3d0f]        # 0x65000000
    6502c2f1:	mov    DWORD PTR [rsp+0x44],ebp
    6502c2f5:	xor    r9d,r9d
    6502c2f8:	mov    edx,0x200
    6502c2fd:	mov    r11d,0x7fffffff
    6502c303:	jmp    0x6502cbb2
    6502c308:	add    DWORD PTR [r12+0x8],0xffffffff
    6502c30e:	js     0x6502c322
    6502c310:	mov    rax,QWORD PTR [r12]
    6502c314:	mov    BYTE PTR [rax],r13b
    6502c317:	add    QWORD PTR [r12],0x1
    6502c31c:	movzx  eax,r13b
    6502c320:	jmp    0x6502c32e
    6502c322:	movsx  ecx,r13b
    6502c326:	mov    rdx,r12
    6502c329:	call   0x65023dc0
    6502c32e:	cmp    eax,0xffffffff
    6502c331:	jne    0x6502c358
    6502c333:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502c338:	or     ebp,eax
    6502c33a:	lea    r10,[rip+0xfffffffffffd3cbf]        # 0x65000000
    6502c341:	mov    DWORD PTR [rsp+0x44],ebp
    6502c345:	xor    r9d,r9d
    6502c348:	mov    edx,0x200
    6502c34d:	mov    r11d,0x7fffffff
    6502c353:	jmp    0x6502cbb2
    6502c358:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502c35d:	add    ebp,0x1
    6502c360:	lea    r10,[rip+0xfffffffffffd3c99]        # 0x65000000
    6502c367:	mov    DWORD PTR [rsp+0x44],ebp
    6502c36b:	xor    r9d,r9d
    6502c36e:	mov    edx,0x200
    6502c373:	mov    r11d,0x7fffffff
    6502c379:	jmp    0x6502cbb2
    6502c37e:	movsx  eax,r13b
    6502c382:	add    eax,0xffffffbf
    6502c385:	cmp    eax,0x37
    6502c388:	ja     0x6502c8c5
    6502c38e:	cdqe   
    6502c390:	movzx  eax,BYTE PTR [r10+rax*1+0x2ccb8]
    6502c399:	mov    ecx,DWORD PTR [r10+rax*4+0x2cc7c]
    6502c3a1:	add    rcx,r10
    6502c3a4:	jmp    rcx
    6502c3a6:	test   r14d,0x830
    6502c3ad:	jne    0x6502c3b9
    6502c3af:	bts    r14d,0xb
    6502c3b4:	mov    DWORD PTR [rsp+0x40],r14d
    6502c3b9:	test   r14d,0x810
    6502c3c0:	je     0x6502c401
    6502c3c2:	movzx  r9d,WORD PTR [rdi]
    6502c3c6:	add    rdi,0x8
    6502c3ca:	mov    r8,rdx
    6502c3cd:	lea    rdx,[rsp+0xc0]
    6502c3d5:	lea    rcx,[rsp+0x50]
    6502c3da:	mov    QWORD PTR [rsp+0x60],rdi
    6502c3df:	call   0x6502d360
    6502c3e4:	test   eax,eax
    6502c3e6:	je     0x6502c41c
    6502c3e8:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c3ec:	mov    DWORD PTR [rsp+0x70],0x1
    6502c3f4:	lea    rbx,[rsp+0xc0]
    6502c3fc:	jmp    0x6502c8d5
    6502c401:	movzx  eax,BYTE PTR [rdi]
    6502c404:	add    rdi,0x8
    6502c408:	mov    DWORD PTR [rsp+0x50],0x1
    6502c410:	mov    BYTE PTR [rsp+0xc0],al
    6502c417:	mov    QWORD PTR [rsp+0x60],rdi
    6502c41c:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c420:	lea    rbx,[rsp+0xc0]
    6502c428:	jmp    0x6502c8d5
    6502c42d:	mov    rax,QWORD PTR [rdi]
    6502c430:	add    rdi,0x8
    6502c434:	test   rax,rax
    6502c437:	mov    QWORD PTR [rsp+0x60],rdi
    6502c43c:	je     0x6502c47c
    6502c43e:	mov    rbx,QWORD PTR [rax+0x8]
    6502c442:	test   rbx,rbx
    6502c445:	je     0x6502c47c
    6502c447:	bt     r14d,0xb
    6502c44c:	jae    0x6502c468
    6502c44e:	movsx  eax,WORD PTR [rax]
    6502c451:	mov    esi,0x1
    6502c456:	cdq    
    6502c457:	mov    DWORD PTR [rsp+0x4c],esi
    6502c45b:	sub    eax,edx
    6502c45d:	sar    eax,1
    6502c45f:	mov    DWORD PTR [rsp+0x50],eax
    6502c463:	jmp    0x6502c8d5
    6502c468:	movsx  eax,WORD PTR [rax]
    6502c46b:	mov    esi,r9d
    6502c46e:	mov    DWORD PTR [rsp+0x4c],r9d
    6502c473:	mov    DWORD PTR [rsp+0x50],eax
    6502c477:	jmp    0x6502c8d5
    6502c47c:	mov    rbx,QWORD PTR [rip+0x1665d]        # 0x65042ae0
    6502c483:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c487:	or     rcx,0xffffffffffffffff
    6502c48b:	xor    eax,eax
    6502c48d:	mov    rdi,rbx
    6502c490:	repnz scas al,BYTE PTR es:[rdi]
    6502c492:	not    rcx
    6502c495:	sub    rcx,0x1
    6502c499:	mov    DWORD PTR [rsp+0x50],ecx
    6502c49d:	jmp    0x6502c8d5
    6502c4a2:	test   r14d,0x830
    6502c4a9:	jne    0x6502c4b5
    6502c4ab:	bts    r14d,0xb
    6502c4b0:	mov    DWORD PTR [rsp+0x40],r14d
    6502c4b5:	mov    rbx,QWORD PTR [rdi]
    6502c4b8:	cmp    r15d,0xffffffff
    6502c4bc:	mov    eax,r15d
    6502c4bf:	cmove  eax,r11d
    6502c4c3:	add    rdi,0x8
    6502c4c7:	test   r14d,0x810
    6502c4ce:	mov    QWORD PTR [rsp+0x60],rdi
    6502c4d3:	je     0x6502c50f
    6502c4d5:	test   rbx,rbx
    6502c4d8:	mov    esi,0x1
    6502c4dd:	cmove  rbx,QWORD PTR [rip+0x16603]        # 0x65042ae8
    6502c4e5:	test   eax,eax
    6502c4e7:	mov    DWORD PTR [rsp+0x4c],esi
    6502c4eb:	mov    rcx,rbx
    6502c4ee:	je     0x6502c500
    6502c4f0:	sub    eax,esi
    6502c4f2:	cmp    WORD PTR [rcx],0x0
    6502c4f6:	je     0x6502c500
    6502c4f8:	add    rcx,0x2
    6502c4fc:	test   eax,eax
    6502c4fe:	jne    0x6502c4f0
    6502c500:	sub    rcx,rbx
    6502c503:	sar    rcx,1
    6502c506:	mov    DWORD PTR [rsp+0x50],ecx
    6502c50a:	jmp    0x6502c8d5
    6502c50f:	test   rbx,rbx
    6502c512:	cmove  rbx,QWORD PTR [rip+0x165c6]        # 0x65042ae0
    6502c51a:	test   eax,eax
    6502c51c:	mov    rcx,rbx
    6502c51f:	je     0x6502c531
    6502c521:	sub    eax,0x1
    6502c524:	cmp    BYTE PTR [rcx],0x0
    6502c527:	je     0x6502c531
    6502c529:	add    rcx,0x1
    6502c52d:	test   eax,eax
    6502c52f:	jne    0x6502c521
    6502c531:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c535:	sub    ecx,ebx
    6502c537:	mov    DWORD PTR [rsp+0x50],ecx
    6502c53b:	jmp    0x6502c8d5
    6502c540:	add    rdi,0x8
    6502c544:	mov    QWORD PTR [rsp+0x60],rdi
    6502c549:	mov    rdi,QWORD PTR [rdi-0x8]
    6502c54d:	call   0x6502b8d0
    6502c552:	test   eax,eax
    6502c554:	je     0x6502cbcf
    6502c55a:	test   r14b,0x20
    6502c55e:	je     0x6502c570
    6502c560:	mov    WORD PTR [rdi],bp
    6502c563:	mov    DWORD PTR [rsp+0x70],0x1
    6502c56b:	jmp    0x6502cb45
    6502c570:	mov    DWORD PTR [rdi],ebp
    6502c572:	mov    DWORD PTR [rsp+0x70],0x1
    6502c57a:	jmp    0x6502cb45
    6502c57f:	mov    DWORD PTR [rsp+0x9c],0x1
    6502c58a:	add    r13b,0x20
    6502c58e:	or     r14d,0x40
    6502c592:	test   r15d,r15d
    6502c595:	lea    rbx,[rsp+0xc0]
    6502c59d:	mov    DWORD PTR [rsp+0x40],r14d
    6502c5a2:	mov    esi,edx
    6502c5a4:	jns    0x6502c5b3
    6502c5a6:	mov    r15d,0x6
    6502c5ac:	mov    DWORD PTR [rsp+0x48],r15d
    6502c5b1:	jmp    0x6502c610
    6502c5b3:	test   r15d,r15d
    6502c5b6:	jne    0x6502c5cb
    6502c5b8:	cmp    r13b,0x67
    6502c5bc:	jne    0x6502c610
    6502c5be:	mov    r15d,0x1
    6502c5c4:	mov    DWORD PTR [rsp+0x48],r15d
    6502c5c9:	jmp    0x6502c610
    6502c5cb:	cmp    r15d,edx
    6502c5ce:	jle    0x6502c5d9
    6502c5d0:	mov    r15d,edx
    6502c5d3:	mov    DWORD PTR [rsp+0x48],edx
    6502c5d7:	jmp    0x6502c5e2
    6502c5d9:	cmp    r15d,0xa3
    6502c5e0:	jle    0x6502c610
    6502c5e2:	lea    edi,[r15+0x15d]
    6502c5e9:	movsxd rcx,edi
    6502c5ec:	call   0x65022910
    6502c5f1:	test   rax,rax
    6502c5f4:	mov    QWORD PTR [rsp+0xa0],rax
    6502c5fc:	je     0x6502c605
    6502c5fe:	mov    rbx,rax
    6502c601:	mov    esi,edi
    6502c603:	jmp    0x6502c610
    6502c605:	mov    r15d,0xa3
    6502c60b:	mov    DWORD PTR [rsp+0x48],r15d
    6502c610:	mov    rax,QWORD PTR [rsp+0x60]
    6502c615:	mov    rcx,QWORD PTR [rip+0x168c4]        # 0x65042ee0
    6502c61c:	movsx  edi,r13b
    6502c620:	add    rax,0x8
    6502c624:	movsxd rsi,esi
    6502c627:	mov    QWORD PTR [rsp+0x60],rax
    6502c62c:	mov    rax,QWORD PTR [rax-0x8]
    6502c630:	mov    QWORD PTR [rsp+0xb0],rax
    6502c638:	call   0x65020570
    6502c63d:	lea    rcx,[rsp+0x78]
    6502c642:	mov    QWORD PTR [rsp+0x30],rcx
    6502c647:	mov    ecx,DWORD PTR [rsp+0x9c]
    6502c64e:	mov    r9d,edi
    6502c651:	mov    DWORD PTR [rsp+0x28],ecx
    6502c655:	lea    rcx,[rsp+0xb0]
    6502c65d:	mov    r8,rsi
    6502c660:	mov    rdx,rbx
    6502c663:	mov    DWORD PTR [rsp+0x20],r15d
    6502c668:	call   rax
    6502c66a:	mov    edi,r14d
    6502c66d:	and    edi,0x80
    6502c673:	je     0x6502c690
    6502c675:	test   r15d,r15d
    6502c678:	jne    0x6502c690
    6502c67a:	mov    rcx,QWORD PTR [rip+0x16877]        # 0x65042ef8
    6502c681:	call   0x65020570
    6502c686:	lea    rdx,[rsp+0x78]
    6502c68b:	mov    rcx,rbx
    6502c68e:	call   rax
    6502c690:	cmp    r13b,0x67
    6502c694:	jne    0x6502c6b0
    6502c696:	test   edi,edi
    6502c698:	jne    0x6502c6b0
    6502c69a:	mov    rcx,QWORD PTR [rip+0x1684f]        # 0x65042ef0
    6502c6a1:	call   0x65020570
    6502c6a6:	lea    rdx,[rsp+0x78]
    6502c6ab:	mov    rcx,rbx
    6502c6ae:	call   rax
    6502c6b0:	cmp    BYTE PTR [rbx],0x2d
    6502c6b3:	jne    0x6502c6c3
    6502c6b5:	bts    r14d,0x8
    6502c6ba:	add    rbx,0x1
    6502c6be:	mov    DWORD PTR [rsp+0x40],r14d
    6502c6c3:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c6c7:	or     rcx,0xffffffffffffffff
    6502c6cb:	xor    eax,eax
    6502c6cd:	mov    rdi,rbx
    6502c6d0:	repnz scas al,BYTE PTR es:[rdi]
    6502c6d2:	not    rcx
    6502c6d5:	sub    rcx,0x1
    6502c6d9:	mov    DWORD PTR [rsp+0x50],ecx
    6502c6dd:	jmp    0x6502c8d5
    6502c6e2:	mov    eax,DWORD PTR [rsp+0x54]
    6502c6e6:	or     r14d,0x40
    6502c6ea:	mov    r8d,0xa
    6502c6f0:	mov    DWORD PTR [rsp+0x40],r14d
    6502c6f5:	jmp    0x6502c76e
    6502c6f7:	mov    eax,DWORD PTR [rsp+0x54]
    6502c6fb:	mov    r8d,0xa
    6502c701:	jmp    0x6502c76e
    6502c703:	bts    r14d,0xf
    6502c708:	mov    r15d,0x10
    6502c70e:	mov    DWORD PTR [rsp+0x40],r14d
    6502c713:	mov    eax,0x7
    6502c718:	mov    DWORD PTR [rsp+0x98],eax
    6502c71f:	jmp    0x6502c72d
    6502c721:	mov    eax,0x27
    6502c726:	mov    DWORD PTR [rsp+0x98],eax
    6502c72d:	test   r14b,r14b
    6502c730:	mov    r8d,0x10
    6502c736:	jns    0x6502c764
    6502c738:	add    al,0x51
    6502c73a:	mov    BYTE PTR [rsp+0x58],0x30
    6502c73f:	mov    BYTE PTR [rsp+0x59],al
    6502c743:	lea    eax,[r8-0xe]
    6502c747:	jmp    0x6502c76e
    6502c749:	test   r14b,r14b
    6502c74c:	mov    r8d,0x8
    6502c752:	jns    0x6502c76a
    6502c754:	mov    eax,DWORD PTR [rsp+0x54]
    6502c758:	bts    r14d,0x9
    6502c75d:	mov    DWORD PTR [rsp+0x40],r14d
    6502c762:	jmp    0x6502c76e
    6502c764:	mov    eax,DWORD PTR [rsp+0x54]
    6502c768:	jmp    0x6502c76e
    6502c76a:	mov    eax,DWORD PTR [rsp+0x54]
    6502c76e:	bt     r14d,0xf
    6502c773:	jae    0x6502c784
    6502c775:	add    rdi,0x8
    6502c779:	mov    QWORD PTR [rsp+0x60],rdi
    6502c77e:	mov    rdi,QWORD PTR [rdi-0x8]
    6502c782:	jmp    0x6502c7e6
    6502c784:	bt     r14d,0xc
    6502c789:	jae    0x6502c79a
    6502c78b:	add    rdi,0x8
    6502c78f:	mov    QWORD PTR [rsp+0x60],rdi
    6502c794:	mov    rdi,QWORD PTR [rdi-0x8]
    6502c798:	jmp    0x6502c7e6
    6502c79a:	test   r14b,0x20
    6502c79e:	je     0x6502c7c5
    6502c7a0:	test   r14b,0x40
    6502c7a4:	je     0x6502c7b6
    6502c7a6:	add    rdi,0x8
    6502c7aa:	mov    QWORD PTR [rsp+0x60],rdi
    6502c7af:	movsx  rdi,WORD PTR [rdi-0x8]
    6502c7b4:	jmp    0x6502c7e6
    6502c7b6:	add    rdi,0x8
    6502c7ba:	mov    QWORD PTR [rsp+0x60],rdi
    6502c7bf:	movzx  edi,WORD PTR [rdi-0x8]
    6502c7c3:	jmp    0x6502c7e6
    6502c7c5:	test   r14b,0x40
    6502c7c9:	je     0x6502c7da
    6502c7cb:	add    rdi,0x8
    6502c7cf:	mov    QWORD PTR [rsp+0x60],rdi
    6502c7d4:	movsxd rdi,DWORD PTR [rdi-0x8]
    6502c7d8:	jmp    0x6502c7e6
    6502c7da:	add    rdi,0x8
    6502c7de:	mov    QWORD PTR [rsp+0x60],rdi
    6502c7e3:	mov    edi,DWORD PTR [rdi-0x8]
    6502c7e6:	test   r14b,0x40
    6502c7ea:	je     0x6502c7fe
    6502c7ec:	test   rdi,rdi
    6502c7ef:	jns    0x6502c7fe
    6502c7f1:	neg    rdi
    6502c7f4:	bts    r14d,0x8
    6502c7f9:	mov    DWORD PTR [rsp+0x40],r14d
    6502c7fe:	bt     r14d,0xf
    6502c803:	jb     0x6502c80e
    6502c805:	bt     r14d,0xc
    6502c80a:	jb     0x6502c80e
    6502c80c:	mov    edi,edi
    6502c80e:	test   r15d,r15d
    6502c811:	jns    0x6502c81b
    6502c813:	mov    r15d,0x1
    6502c819:	jmp    0x6502c82b
    6502c81b:	and    r14d,0xfffffff7
    6502c81f:	cmp    r15d,edx
    6502c822:	cmovg  r15d,edx
    6502c826:	mov    DWORD PTR [rsp+0x40],r14d
    6502c82b:	mov    r14d,DWORD PTR [rsp+0x98]
    6502c833:	test   rdi,rdi
    6502c836:	lea    rbx,[rsp+0x2bf]
    6502c83e:	cmove  eax,r9d
    6502c842:	mov    DWORD PTR [rsp+0x54],eax
    6502c846:	data16 data16 xchg ax,ax
    6502c84a:	data16 xchg ax,ax
    6502c84d:	data16 xchg ax,ax
    6502c850:	mov    ecx,r15d
    6502c853:	sub    r15d,0x1
    6502c857:	test   ecx,ecx
    6502c859:	jg     0x6502c860
    6502c85b:	test   rdi,rdi
    6502c85e:	je     0x6502c881
    6502c860:	xor    edx,edx
    6502c862:	mov    rax,rdi
    6502c865:	movsxd rcx,r8d
    6502c868:	div    rcx
    6502c86b:	mov    rdi,rax
    6502c86e:	lea    eax,[rdx+0x30]
    6502c871:	cmp    eax,0x39
    6502c874:	jle    0x6502c879
    6502c876:	add    eax,r14d
    6502c879:	mov    BYTE PTR [rbx],al
    6502c87b:	sub    rbx,0x1
    6502c87f:	jmp    0x6502c850
    6502c881:	mov    r14d,DWORD PTR [rsp+0x40]
    6502c886:	lea    rax,[rsp+0x2bf]
    6502c88e:	mov    DWORD PTR [rsp+0x48],r15d
    6502c893:	sub    eax,ebx
    6502c895:	add    rbx,0x1
    6502c899:	bt     r14d,0x9
    6502c89e:	mov    DWORD PTR [rsp+0x50],eax
    6502c8a2:	jae    0x6502c8d1
    6502c8a4:	test   eax,eax
    6502c8a6:	je     0x6502c8ad
    6502c8a8:	cmp    BYTE PTR [rbx],0x30
    6502c8ab:	je     0x6502c8cb
    6502c8ad:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c8b1:	sub    rbx,0x1
    6502c8b5:	add    DWORD PTR [rsp+0x50],0x1
    6502c8ba:	mov    BYTE PTR [rbx],0x30
    6502c8bd:	jmp    0x6502c8d5
    6502c8bf:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c8c3:	jmp    0x6502c8d5
    6502c8c5:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c8c9:	jmp    0x6502c8d5
    6502c8cb:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c8cf:	jmp    0x6502c8d5
    6502c8d1:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c8d5:	cmp    DWORD PTR [rsp+0x70],0x0
    6502c8da:	jne    0x6502cb45
    6502c8e0:	test   r14b,0x40
    6502c8e4:	je     0x6502c929
    6502c8e6:	bt     r14d,0x8
    6502c8eb:	jae    0x6502c8fd
    6502c8ed:	mov    edi,0x1
    6502c8f2:	mov    BYTE PTR [rsp+0x58],0x2d
    6502c8f7:	mov    DWORD PTR [rsp+0x54],edi
    6502c8fb:	jmp    0x6502c933
    6502c8fd:	test   r14b,0x1
    6502c901:	je     0x6502c913
    6502c903:	mov    edi,0x1
    6502c908:	mov    BYTE PTR [rsp+0x58],0x2b
    6502c90d:	mov    DWORD PTR [rsp+0x54],edi
    6502c911:	jmp    0x6502c933
    6502c913:	test   r14b,0x2
    6502c917:	je     0x6502c92f
    6502c919:	mov    edi,0x1
    6502c91e:	mov    BYTE PTR [rsp+0x58],0x20
    6502c923:	mov    DWORD PTR [rsp+0x54],edi
    6502c927:	jmp    0x6502c933
    6502c929:	mov    edi,DWORD PTR [rsp+0x54]
    6502c92d:	jmp    0x6502c933
    6502c92f:	mov    edi,DWORD PTR [rsp+0x54]
    6502c933:	mov    r15d,DWORD PTR [rsp+0x68]
    6502c938:	sub    r15d,DWORD PTR [rsp+0x50]
    6502c93d:	sub    r15d,edi
    6502c940:	test   r14b,0xc
    6502c944:	jne    0x6502c958
    6502c946:	lea    r9,[rsp+0x44]
    6502c94b:	mov    r8,r12
    6502c94e:	mov    edx,r15d
    6502c951:	mov    cl,0x20
    6502c953:	call   0x6502bb60
    6502c958:	lea    r9,[rsp+0x44]
    6502c95d:	lea    rcx,[rsp+0x58]
    6502c962:	mov    r8,r12
    6502c965:	mov    edx,edi
    6502c967:	call   0x6502bbf0
    6502c96c:	test   r14b,0x8
    6502c970:	je     0x6502c98a
    6502c972:	test   r14b,0x4
    6502c976:	jne    0x6502c98a
    6502c978:	lea    r9,[rsp+0x44]
    6502c97d:	mov    r8,r12
    6502c980:	mov    edx,r15d
    6502c983:	mov    cl,0x30
    6502c985:	call   0x6502bb60
    6502c98a:	test   esi,esi
    6502c98c:	mov    r13d,DWORD PTR [rsp+0x50]
    6502c991:	je     0x6502cafb
    6502c997:	test   r13d,r13d
    6502c99a:	jle    0x6502cafb
    6502c9a0:	mov    ebp,DWORD PTR [rsp+0x44]
    6502c9a4:	mov    r14,rbx
    6502c9a7:	data16 xchg ax,ax
    6502c9aa:	data16 xchg ax,ax
    6502c9ad:	data16 xchg ax,ax
    6502c9b0:	movzx  r9d,WORD PTR [r14]
    6502c9b4:	lea    rdx,[rsp+0x2c0]
    6502c9bc:	lea    rcx,[rsp+0xa8]
    6502c9c4:	mov    r8d,0x6
    6502c9ca:	sub    r13d,0x1
    6502c9ce:	add    r14,0x2
    6502c9d2:	call   0x6502d360
    6502c9d7:	test   eax,eax
    6502c9d9:	jne    0x6502caed
    6502c9df:	mov    edi,DWORD PTR [rsp+0xa8]
    6502c9e6:	test   edi,edi
    6502c9e8:	je     0x6502caed
    6502c9ee:	test   BYTE PTR [r12+0x18],0x40
    6502c9f4:	lea    rsi,[rsp+0x2c0]
    6502c9fc:	je     0x6502ca11
    6502c9fe:	cmp    QWORD PTR [r12+0x10],0x0
    6502ca04:	jne    0x6502ca11
    6502ca06:	add    ebp,edi
    6502ca08:	mov    DWORD PTR [rsp+0x44],ebp
    6502ca0c:	jmp    0x6502cac3
    6502ca11:	test   edi,edi
    6502ca13:	jle    0x6502cac3
    6502ca19:	data16 xchg ax,ax
    6502ca1c:	data16 data16 xchg ax,ax
    6502ca20:	movzx  ecx,BYTE PTR [rsi]
    6502ca23:	sub    edi,0x1
    6502ca26:	test   BYTE PTR [r12+0x18],0x40
    6502ca2c:	je     0x6502ca3f
    6502ca2e:	cmp    QWORD PTR [r12+0x10],0x0
    6502ca34:	jne    0x6502ca3f
    6502ca36:	add    ebp,0x1
    6502ca39:	mov    DWORD PTR [rsp+0x44],ebp
    6502ca3d:	jmp    0x6502ca76
    6502ca3f:	add    DWORD PTR [r12+0x8],0xffffffff
    6502ca45:	js     0x6502ca57
    6502ca47:	mov    rax,QWORD PTR [r12]
    6502ca4b:	mov    BYTE PTR [rax],cl
    6502ca4d:	add    QWORD PTR [r12],0x1
    6502ca52:	movzx  eax,cl
    6502ca55:	jmp    0x6502ca62
    6502ca57:	movsx  ecx,cl
    6502ca5a:	mov    rdx,r12
    6502ca5d:	call   0x65023dc0
    6502ca62:	cmp    eax,0xffffffff
    6502ca65:	jne    0x6502ca6f
    6502ca67:	or     ebp,eax
    6502ca69:	mov    DWORD PTR [rsp+0x44],ebp
    6502ca6d:	jmp    0x6502ca76
    6502ca6f:	add    ebp,0x1
    6502ca72:	mov    DWORD PTR [rsp+0x44],ebp
    6502ca76:	add    rsi,0x1
    6502ca7a:	cmp    ebp,0xffffffff
    6502ca7d:	jne    0x6502cabb
    6502ca7f:	call   0x650202b0
    6502ca84:	cmp    DWORD PTR [rax],0x2a
    6502ca87:	jne    0x6502cac3
    6502ca89:	test   BYTE PTR [r12+0x18],0x40
    6502ca8f:	je     0x6502caa1
    6502ca91:	cmp    QWORD PTR [r12+0x10],0x0
    6502ca97:	jne    0x6502caa1
    6502ca99:	xor    ebp,ebp
    6502ca9b:	mov    DWORD PTR [rsp+0x44],ebp
    6502ca9f:	jmp    0x6502cabb
    6502caa1:	add    DWORD PTR [r12+0x8],0xffffffff
    6502caa7:	js     0x6502cad3
    6502caa9:	mov    rax,QWORD PTR [r12]
    6502caad:	mov    BYTE PTR [rax],0x3f
    6502cab0:	add    QWORD PTR [r12],0x1
    6502cab5:	xor    ebp,ebp
    6502cab7:	mov    DWORD PTR [rsp+0x44],ebp
    6502cabb:	test   edi,edi
    6502cabd:	jg     0x6502ca20
    6502cac3:	test   r13d,r13d
    6502cac6:	jne    0x6502c9b0
    6502cacc:	mov    r14d,DWORD PTR [rsp+0x40]
    6502cad1:	jmp    0x6502cb12
    6502cad3:	mov    rdx,r12
    6502cad6:	mov    ecx,0x3f
    6502cadb:	call   0x65023dc0
    6502cae0:	cmp    eax,0xffffffff
    6502cae3:	jne    0x6502cab5
    6502cae5:	or     ebp,eax
    6502cae7:	mov    DWORD PTR [rsp+0x44],ebp
    6502caeb:	jmp    0x6502cabb
    6502caed:	mov    r15d,DWORD PTR [rsp+0x48]
    6502caf2:	or     ebp,0xffffffff
    6502caf5:	mov    DWORD PTR [rsp+0x44],ebp
    6502caf9:	jmp    0x6502cb45
    6502cafb:	lea    r9,[rsp+0x44]
    6502cb00:	mov    r8,r12
    6502cb03:	mov    edx,r13d
    6502cb06:	mov    rcx,rbx
    6502cb09:	call   0x6502bbf0
    6502cb0e:	mov    ebp,DWORD PTR [rsp+0x44]
    6502cb12:	test   ebp,ebp
    6502cb14:	js     0x6502cb39
    6502cb16:	test   r14b,0x4
    6502cb1a:	je     0x6502cb40
    6502cb1c:	lea    r9,[rsp+0x44]
    6502cb21:	mov    r8,r12
    6502cb24:	mov    edx,r15d
    6502cb27:	mov    cl,0x20
    6502cb29:	call   0x6502bb60
    6502cb2e:	mov    ebp,DWORD PTR [rsp+0x44]
    6502cb32:	mov    r15d,DWORD PTR [rsp+0x48]
    6502cb37:	jmp    0x6502cb45
    6502cb39:	mov    r15d,DWORD PTR [rsp+0x48]
    6502cb3e:	jmp    0x6502cb45
    6502cb40:	mov    r15d,DWORD PTR [rsp+0x48]
    6502cb45:	mov    rax,QWORD PTR [rsp+0xa0]
    6502cb4d:	test   rax,rax
    6502cb50:	je     0x6502cb8b
    6502cb52:	mov    rcx,rax
    6502cb55:	call   0x6501fa90
    6502cb5a:	mov    r14d,DWORD PTR [rsp+0x40]
    6502cb5f:	mov    rsi,QWORD PTR [rsp+0xb8]
    6502cb67:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502cb6c:	xor    r9d,r9d
    6502cb6f:	lea    r10,[rip+0xfffffffffffd348a]        # 0x65000000
    6502cb76:	mov    QWORD PTR [rsp+0xa0],r9
    6502cb7e:	mov    edx,0x200
    6502cb83:	mov    r11d,0x7fffffff
    6502cb89:	jmp    0x6502cbb2
    6502cb8b:	mov    r14d,DWORD PTR [rsp+0x40]
    6502cb90:	mov    rsi,QWORD PTR [rsp+0xb8]
    6502cb98:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502cb9d:	xor    r9d,r9d
    6502cba0:	lea    r10,[rip+0xfffffffffffd3459]        # 0x65000000
    6502cba7:	mov    edx,0x200
    6502cbac:	mov    r11d,0x7fffffff
    6502cbb2:	mov    r13b,BYTE PTR [rsi]
    6502cbb5:	test   r13b,r13b
    6502cbb8:	je     0x6502cbc4
    6502cbba:	mov    rdi,QWORD PTR [rsp+0x60]
    6502cbbf:	jmp    0x6502bfe0
    6502cbc4:	test   r8d,r8d
    6502cbc7:	je     0x6502cc10
    6502cbc9:	cmp    r8d,0x7
    6502cbcd:	je     0x6502cc10
    6502cbcf:	call   0x650202b0
    6502cbd4:	xor    r9d,r9d
    6502cbd7:	xor    r8d,r8d
    6502cbda:	xor    edx,edx
    6502cbdc:	xor    ecx,ecx
    6502cbde:	mov    QWORD PTR [rsp+0x20],0x0
    6502cbe7:	mov    DWORD PTR [rax],0x16
    6502cbed:	call   0x6501d850
    6502cbf2:	cmp    BYTE PTR [rsp+0x90],0x0
    6502cbfa:	je     0x6502cc0b
    6502cbfc:	mov    rax,QWORD PTR [rsp+0x88]
    6502cc04:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502cc0b:	or     eax,0xffffffff
    6502cc0e:	jmp    0x6502cc2b
    6502cc10:	mov    rdx,QWORD PTR [rsp+0x88]
    6502cc18:	cmp    BYTE PTR [rsp+0x90],0x0
    6502cc20:	je     0x6502cc29
    6502cc22:	and    DWORD PTR [rdx+0xc8],0xfffffffd
    6502cc29:	mov    eax,ebp
    6502cc2b:	mov    rbx,QWORD PTR [rsp+0x2e0]
    6502cc33:	mov    r13,QWORD PTR [rsp+0x2d8]
    6502cc3b:	mov    rcx,QWORD PTR [rsp+0x2c8]
    6502cc43:	xor    rcx,rsp
    6502cc46:	call   0x6501e4e0
    6502cc4b:	add    rsp,0x2e8
    6502cc52:	pop    r15
    6502cc54:	pop    r14
    6502cc56:	pop    r12
    6502cc58:	pop    rdi
    6502cc59:	pop    rsi
    6502cc5a:	pop    rbp
    6502cc5b:	ret    
    6502cc5c:	fs ret 0x2
    6502cc60:	push   rbx
    6502cc61:	rol    BYTE PTR [rdx],0x0
    6502cc64:	test   eax,eax
    6502cc66:	add    al,BYTE PTR [rax]
    6502cc68:	out    dx,al
    6502cc69:	rol    BYTE PTR [rdx],0x0
    6502cc6c:	(bad)  
    6502cc6d:	rol    DWORD PTR [rdx],0x0
    6502cc70:	rex.R rol DWORD PTR [rdx],0x0
    6502cc74:	mov    ecx,eax
    6502cc76:	add    al,BYTE PTR [rax]
    6502cc78:	jle    0x6502cc3d
    6502cc7a:	add    al,BYTE PTR [rax]
    6502cc7c:	jg     0x6502cc43
    6502cc7e:	add    al,BYTE PTR [rax]
    6502cc80:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    6502cc81:	ret    
    6502cc82:	add    al,BYTE PTR [rax]
    6502cc84:	movabs ds:0x2d0002c7130002c4,al
    6502cc8d:	(bad)
    6502cc91:	(bad)
    6502cc94:	mov    ecx,0xe20002c3
    6502cc99:	mov    BYTE PTR [rdx],0x0
    6502cc9c:	(bad)
    6502cca0:	mov    QWORD PTR [r10],0x2c70300
    6502cca7:	add    BYTE PTR [rbp-0x8fffd3c],dh
    6502ccad:	mov    BYTE PTR [rdx],0x0
    6502ccb0:	and    edi,eax
    6502ccb2:	add    al,BYTE PTR [rax]
    6502ccb4:	mov    edi,0x2c8
    6502ccb9:	(bad)  
    6502ccba:	add    DWORD PTR [rsi],ecx
    6502ccbc:	add    BYTE PTR [rsi],cl
    6502ccbe:	add    BYTE PTR [rsi],cl
    6502ccc0:	(bad)  
    6502ccc1:	(bad)  
    6502ccc2:	(bad)  
    6502ccc3:	(bad)  
    6502ccc4:	(bad)  
    6502ccc5:	(bad)  
    6502ccc6:	(bad)  
    6502ccc7:	(bad)  
    6502ccc8:	(bad)  
    6502ccc9:	(bad)  
    6502ccca:	add    cl,BYTE PTR [rsi]
    6502cccc:	(bad)  
    6502cccd:	(bad)  
    6502ccce:	(bad)  
    6502cccf:	add    ecx,DWORD PTR [rsi]
    6502ccd1:	add    al,0xe
    6502ccd3:	(bad)  
    6502ccd4:	(bad)  
    6502ccd5:	(bad)  
    6502ccd6:	(bad)  
    6502ccd7:	(bad)  
    6502ccd8:	add    eax,0x507060e
    6502ccdd:	add    eax,0xe070e05
    6502cce2:	(bad)  
    6502cce3:	(bad)  
    6502cce4:	(bad)  
    6502cce5:	or     BYTE PTR [rcx],cl
    6502cce7:	or     cl,BYTE PTR [rsi]
    6502cce9:	(bad)  
    6502ccea:	or     ecx,DWORD PTR [rsi]
    6502ccec:	or     al,0xe
    6502ccee:	(bad)  
    6502ccef:	or     eax,0x38ec8348
    6502ccf4:	mov    rax,QWORD PTR [rip+0x15425]        # 0x65042120
    6502ccfb:	xor    rax,rsp
    6502ccfe:	mov    QWORD PTR [rsp+0x28],rax
    6502cd03:	lea    r8,[rsp+0x20]
    6502cd08:	mov    r9d,0x6
    6502cd0e:	mov    edx,0x1004
    6502cd13:	mov    BYTE PTR [rsp+0x26],0x0
    6502cd18:	call   QWORD PTR [rip+0x7482]        # 0x650341a0
    6502cd1e:	test   eax,eax
    6502cd20:	jne    0x6502cd37
    6502cd22:	or     eax,0xffffffff
    6502cd25:	mov    rcx,QWORD PTR [rsp+0x28]
    6502cd2a:	xor    rcx,rsp
    6502cd2d:	call   0x6501e4e0
    6502cd32:	add    rsp,0x38
    6502cd36:	ret    
    6502cd37:	lea    rcx,[rsp+0x20]
    6502cd3c:	call   0x6502d640
    6502cd41:	mov    rcx,QWORD PTR [rsp+0x28]
    6502cd46:	xor    rcx,rsp
    6502cd49:	call   0x6501e4e0
    6502cd4e:	add    rsp,0x38
    6502cd52:	ret    
    6502cd53:	int3   
    6502cd54:	int3   
    6502cd55:	int3   
    6502cd56:	int3   
    6502cd57:	int3   
    6502cd58:	int3   
    6502cd59:	int3   
    6502cd5a:	int3   
    6502cd5b:	int3   
    6502cd5c:	int3   
    6502cd5d:	int3   
    6502cd5e:	int3   
    6502cd5f:	int3   
    6502cd60:	rex push rbp
    6502cd62:	push   rbx
    6502cd63:	push   rsi
    6502cd64:	push   rdi
    6502cd65:	push   r12
    6502cd67:	push   r13
    6502cd69:	push   r14
    6502cd6b:	push   r15
    6502cd6d:	sub    rsp,0x88
    6502cd74:	lea    rbp,[rsp+0x40]
    6502cd79:	mov    rax,QWORD PTR [rip+0x153a0]        # 0x65042120
    6502cd80:	xor    rax,rbp
    6502cd83:	mov    QWORD PTR [rbp+0x30],rax
    6502cd87:	mov    r15,QWORD PTR [rbp+0xb0]
    6502cd8e:	mov    r12d,DWORD PTR [r9]
    6502cd91:	xor    r13d,r13d
    6502cd94:	cmp    ecx,edx
    6502cd96:	mov    rbx,r8
    6502cd99:	mov    rsi,r13
    6502cd9c:	mov    DWORD PTR [rbp+0x0],r13d
    6502cda0:	mov    QWORD PTR [rbp+0x10],r9
    6502cda4:	mov    r14d,edx
    6502cda7:	mov    QWORD PTR [rbp+0x8],rbx
    6502cdab:	mov    edi,ecx
    6502cdad:	mov    DWORD PTR [rbp+0x4],ecx
    6502cdb0:	je     0x6502cfc3
    6502cdb6:	lea    rdx,[rbp+0x18]
    6502cdba:	call   QWORD PTR [rip+0x74c8]        # 0x65034288
    6502cdc0:	test   eax,eax
    6502cdc2:	je     0x6502ce68
    6502cdc8:	cmp    DWORD PTR [rbp+0x18],0x1
    6502cdcc:	jne    0x6502ce68
    6502cdd2:	lea    rdx,[rbp+0x18]
    6502cdd6:	mov    ecx,r14d
    6502cdd9:	call   QWORD PTR [rip+0x74a9]        # 0x65034288
    6502cddf:	test   eax,eax
    6502cde1:	je     0x6502ce68
    6502cde7:	cmp    DWORD PTR [rbp+0x18],0x1
    6502cdeb:	jne    0x6502ce68
    6502cded:	cmp    r12d,0xffffffff
    6502cdf1:	mov    DWORD PTR [rbp+0x0],0x1
    6502cdf8:	je     0x6502ce56
    6502cdfa:	mov    ebx,r12d
    6502cdfd:	test   ebx,ebx
    6502cdff:	jle    0x6502ce8f
    6502ce05:	movsxd r13,ebx
    6502ce08:	movabs rax,0x7ffffffffffffff0
    6502ce12:	cmp    r13,rax
    6502ce15:	ja     0x6502ce8f
    6502ce17:	lea    rcx,[r13+r13*1+0x10]
    6502ce1c:	cmp    rcx,0x400
    6502ce23:	ja     0x6502ce96
    6502ce25:	lea    rax,[rcx+0xf]
    6502ce29:	cmp    rax,rcx
    6502ce2c:	ja     0x6502ce38
    6502ce2e:	movabs rax,0xffffffffffffff0
    6502ce38:	and    rax,0xfffffffffffffff0
    6502ce3c:	call   0x650330c0
    6502ce41:	sub    rsp,rax
    6502ce44:	lea    rdi,[rsp+0x40]
    6502ce49:	test   rdi,rdi
    6502ce4c:	je     0x6502ce8f
    6502ce4e:	mov    DWORD PTR [rdi],0xcccc
    6502ce54:	jmp    0x6502cea9
    6502ce56:	or     rcx,0xffffffffffffffff
    6502ce5a:	mov    rdi,rbx
    6502ce5d:	xor    eax,eax
    6502ce5f:	repnz scas al,BYTE PTR es:[rdi]
    6502ce61:	not    rcx
    6502ce64:	mov    ebx,ecx
    6502ce66:	jmp    0x6502cdfd
    6502ce68:	mov    r9d,r12d
    6502ce6b:	mov    r8,rbx
    6502ce6e:	mov    edx,0x1
    6502ce73:	mov    ecx,edi
    6502ce75:	mov    DWORD PTR [rsp+0x28],r13d
    6502ce7a:	mov    QWORD PTR [rsp+0x20],r13
    6502ce7f:	call   QWORD PTR [rip+0x71b3]        # 0x65034038
    6502ce85:	test   eax,eax
    6502ce87:	mov    ebx,eax
    6502ce89:	jne    0x6502cdfd
    6502ce8f:	xor    eax,eax
    6502ce91:	jmp    0x6502cfc6
    6502ce96:	call   0x6501fae0
    6502ce9b:	test   rax,rax
    6502ce9e:	mov    rdi,rax
    6502cea1:	je     0x6502cead
    6502cea3:	mov    DWORD PTR [rax],0xdddd
    6502cea9:	add    rdi,0x10
    6502cead:	test   rdi,rdi
    6502ceb0:	je     0x6502ce8f
    6502ceb2:	lea    r8,[r13+r13*1+0x0]
    6502ceb7:	xor    edx,edx
    6502ceb9:	mov    rcx,rdi
    6502cebc:	call   0x6501ee30
    6502cec1:	mov    r8,QWORD PTR [rbp+0x8]
    6502cec5:	mov    ecx,DWORD PTR [rbp+0x4]
    6502cec8:	mov    r9d,r12d
    6502cecb:	mov    edx,0x1
    6502ced0:	mov    DWORD PTR [rsp+0x28],ebx
    6502ced4:	mov    QWORD PTR [rsp+0x20],rdi
    6502ced9:	call   QWORD PTR [rip+0x7159]        # 0x65034038
    6502cedf:	test   eax,eax
    6502cee1:	je     0x6502cfb1
    6502cee7:	test   r15,r15
    6502ceea:	je     0x6502cf28
    6502ceec:	xor    eax,eax
    6502ceee:	mov    r9d,ebx
    6502cef1:	mov    r8,rdi
    6502cef4:	mov    QWORD PTR [rsp+0x38],rax
    6502cef9:	mov    QWORD PTR [rsp+0x30],rax
    6502cefe:	mov    eax,DWORD PTR [rbp+0xb8]
    6502cf04:	mov    DWORD PTR [rsp+0x28],eax
    6502cf08:	xor    edx,edx
    6502cf0a:	mov    ecx,r14d
    6502cf0d:	mov    QWORD PTR [rsp+0x20],r15
    6502cf12:	call   QWORD PTR [rip+0x7128]        # 0x65034040
    6502cf18:	test   eax,eax
    6502cf1a:	je     0x6502cfb1
    6502cf20:	mov    rsi,r15
    6502cf23:	jmp    0x6502cfb1
    6502cf28:	xor    r13d,r13d
    6502cf2b:	cmp    DWORD PTR [rbp+0x0],esi
    6502cf2e:	jne    0x6502cf5b
    6502cf30:	mov    QWORD PTR [rsp+0x38],r13
    6502cf35:	mov    QWORD PTR [rsp+0x30],r13
    6502cf3a:	mov    r9d,ebx
    6502cf3d:	mov    r8,rdi
    6502cf40:	xor    edx,edx
    6502cf42:	mov    ecx,r14d
    6502cf45:	mov    DWORD PTR [rsp+0x28],r13d
    6502cf4a:	mov    QWORD PTR [rsp+0x20],r13
    6502cf4f:	call   QWORD PTR [rip+0x70eb]        # 0x65034040
    6502cf55:	test   eax,eax
    6502cf57:	mov    ebx,eax
    6502cf59:	je     0x6502cfb1
    6502cf5b:	movsxd rdx,ebx
    6502cf5e:	mov    ecx,0x1
    6502cf63:	call   0x65022980
    6502cf68:	test   rax,rax
    6502cf6b:	mov    rsi,rax
    6502cf6e:	je     0x6502cfb1
    6502cf70:	mov    QWORD PTR [rsp+0x38],r13
    6502cf75:	mov    QWORD PTR [rsp+0x30],r13
    6502cf7a:	mov    r9d,ebx
    6502cf7d:	mov    r8,rdi
    6502cf80:	xor    edx,edx
    6502cf82:	mov    ecx,r14d
    6502cf85:	mov    DWORD PTR [rsp+0x28],ebx
    6502cf89:	mov    QWORD PTR [rsp+0x20],rax
    6502cf8e:	call   QWORD PTR [rip+0x70ac]        # 0x65034040
    6502cf94:	test   eax,eax
    6502cf96:	jne    0x6502cfa5
    6502cf98:	mov    rcx,rsi
    6502cf9b:	call   0x6501fa90
    6502cfa0:	mov    rsi,r13
    6502cfa3:	jmp    0x6502cfb1
    6502cfa5:	cmp    r12d,0xffffffff
    6502cfa9:	je     0x6502cfb1
    6502cfab:	mov    rcx,QWORD PTR [rbp+0x10]
    6502cfaf:	mov    DWORD PTR [rcx],eax
    6502cfb1:	cmp    DWORD PTR [rdi-0x10],0xdddd
    6502cfb8:	lea    rcx,[rdi-0x10]
    6502cfbc:	jne    0x6502cfc3
    6502cfbe:	call   0x6501fa90
    6502cfc3:	mov    rax,rsi
    6502cfc6:	mov    rcx,QWORD PTR [rbp+0x30]
    6502cfca:	xor    rcx,rbp
    6502cfcd:	call   0x6501e4e0
    6502cfd2:	lea    rsp,[rbp+0x48]
    6502cfd6:	pop    r15
    6502cfd8:	pop    r14
    6502cfda:	pop    r13
    6502cfdc:	pop    r12
    6502cfde:	pop    rdi
    6502cfdf:	pop    rsi
    6502cfe0:	pop    rbx
    6502cfe1:	pop    rbp
    6502cfe2:	ret    
    6502cfe3:	int3   
    6502cfe4:	int3   
    6502cfe5:	int3   
    6502cfe6:	int3   
    6502cfe7:	int3   
    6502cfe8:	int3   
    6502cfe9:	int3   
    6502cfea:	int3   
    6502cfeb:	int3   
    6502cfec:	int3   
    6502cfed:	int3   
    6502cfee:	int3   
    6502cfef:	int3   
    6502cff0:	mov    QWORD PTR [rsp+0x8],rbx
    6502cff5:	mov    QWORD PTR [rsp+0x10],rbp
    6502cffa:	mov    QWORD PTR [rsp+0x18],rsi
    6502cfff:	push   rdi
    6502d000:	sub    rsp,0x20
    6502d004:	mov    ebp,ecx
    6502d006:	xor    sil,sil
    6502d009:	call   0x650208c0
    6502d00e:	mov    rdx,QWORD PTR [rax+0xc0]
    6502d015:	mov    rdi,QWORD PTR [rax+0xb8]
    6502d01c:	mov    rbx,rax
    6502d01f:	cmp    rdx,QWORD PTR [rip+0x1597a]        # 0x650429a0
    6502d026:	je     0x6502d03b
    6502d028:	mov    edx,DWORD PTR [rax+0xc8]
    6502d02e:	test   DWORD PTR [rip+0x157f4],edx        # 0x65042828
    6502d034:	jne    0x6502d03b
    6502d036:	call   0x65023d20
    6502d03b:	cmp    rdi,QWORD PTR [rip+0x156de]        # 0x65042720
    6502d042:	je     0x6502d05a
    6502d044:	mov    eax,DWORD PTR [rbx+0xc8]
    6502d04a:	test   DWORD PTR [rip+0x157d8],eax        # 0x65042828
    6502d050:	jne    0x6502d05a
    6502d052:	call   0x650231d0
    6502d057:	mov    rdi,rax
    6502d05a:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502d060:	test   cl,0x2
    6502d063:	jne    0x6502d071
    6502d065:	or     ecx,0x2
    6502d068:	mov    sil,0x1
    6502d06b:	mov    DWORD PTR [rbx+0xc8],ecx
    6502d071:	movzx  eax,bpl
    6502d075:	movzx  eax,BYTE PTR [rax+rdi*1+0x1d]
    6502d07a:	shr    eax,0x2
    6502d07d:	and    eax,0x1
    6502d080:	test   sil,sil
    6502d083:	je     0x6502d08c
    6502d085:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502d08c:	mov    rbx,QWORD PTR [rsp+0x30]
    6502d091:	mov    rbp,QWORD PTR [rsp+0x38]
    6502d096:	mov    rsi,QWORD PTR [rsp+0x40]
    6502d09b:	add    rsp,0x20
    6502d09f:	pop    rdi
    6502d0a0:	ret    
    6502d0a1:	int3   
    6502d0a2:	int3   
    6502d0a3:	int3   
    6502d0a4:	int3   
    6502d0a5:	int3   
    6502d0a6:	int3   
    6502d0a7:	int3   
    6502d0a8:	int3   
    6502d0a9:	int3   
    6502d0aa:	int3   
    6502d0ab:	int3   
    6502d0ac:	int3   
    6502d0ad:	int3   
    6502d0ae:	int3   
    6502d0af:	int3   
    6502d0b0:	mov    WORD PTR [rsp+0x20],r9w
    6502d0b6:	push   rsi
    6502d0b7:	push   rdi
    6502d0b8:	push   r12
    6502d0ba:	push   r13
    6502d0bc:	sub    rsp,0x68
    6502d0c0:	test   rdx,rdx
    6502d0c3:	mov    rsi,r8
    6502d0c6:	mov    r13,rdx
    6502d0c9:	mov    rdi,rcx
    6502d0cc:	jne    0x6502d0eb
    6502d0ce:	test   r8,r8
    6502d0d1:	je     0x6502d0eb
    6502d0d3:	test   rcx,rcx
    6502d0d6:	je     0x6502d0de
    6502d0d8:	xor    r12d,r12d
    6502d0db:	mov    DWORD PTR [rcx],r12d
    6502d0de:	xor    eax,eax
    6502d0e0:	add    rsp,0x68
    6502d0e4:	pop    r13
    6502d0e6:	pop    r12
    6502d0e8:	pop    rdi
    6502d0e9:	pop    rsi
    6502d0ea:	ret    
    6502d0eb:	test   rcx,rcx
    6502d0ee:	je     0x6502d0f6
    6502d0f0:	mov    DWORD PTR [rcx],0xffffffff
    6502d0f6:	cmp    r8,0x7fffffff
    6502d0fd:	jbe    0x6502d131
    6502d0ff:	call   0x650202b0
    6502d104:	xor    r12d,r12d
    6502d107:	xor    r9d,r9d
    6502d10a:	xor    r8d,r8d
    6502d10d:	xor    edx,edx
    6502d10f:	xor    ecx,ecx
    6502d111:	mov    DWORD PTR [rax],0x16
    6502d117:	mov    QWORD PTR [rsp+0x20],r12
    6502d11c:	call   0x6501d850
    6502d121:	lea    eax,[r12+0x16]
    6502d126:	add    rsp,0x68
    6502d12a:	pop    r13
    6502d12c:	pop    r12
    6502d12e:	pop    rdi
    6502d12f:	pop    rsi
    6502d130:	ret    
    6502d131:	mov    rcx,QWORD PTR [rsp+0xb0]
    6502d139:	mov    QWORD PTR [rsp+0x90],rbx
    6502d141:	mov    QWORD PTR [rsp+0xa0],rbp
    6502d149:	xor    bpl,bpl
    6502d14c:	test   rcx,rcx
    6502d14f:	mov    QWORD PTR [rsp+0x60],r14
    6502d154:	mov    BYTE PTR [rsp+0x58],bpl
    6502d159:	jne    0x6502d1d9
    6502d15b:	call   0x650208c0
    6502d160:	mov    rbx,rax
    6502d163:	mov    r14,QWORD PTR [rax+0xc0]
    6502d16a:	mov    r12,QWORD PTR [rax+0xb8]
    6502d171:	cmp    r14,QWORD PTR [rip+0x15828]        # 0x650429a0
    6502d178:	je     0x6502d190
    6502d17a:	mov    ecx,DWORD PTR [rax+0xc8]
    6502d180:	test   DWORD PTR [rip+0x156a2],ecx        # 0x65042828
    6502d186:	jne    0x6502d190
    6502d188:	call   0x65023d20
    6502d18d:	mov    r14,rax
    6502d190:	cmp    r12,QWORD PTR [rip+0x15589]        # 0x65042720
    6502d197:	je     0x6502d1ac
    6502d199:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502d19f:	test   DWORD PTR [rip+0x15683],ecx        # 0x65042828
    6502d1a5:	jne    0x6502d1ac
    6502d1a7:	call   0x650231d0
    6502d1ac:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502d1b2:	test   cl,0x2
    6502d1b5:	jne    0x6502d1ce
    6502d1b7:	or     ecx,0x2
    6502d1ba:	mov    bpl,0x1
    6502d1bd:	mov    DWORD PTR [rbx+0xc8],ecx
    6502d1c3:	movzx  r9d,WORD PTR [rsp+0xa8]
    6502d1cc:	jmp    0x6502d1fb
    6502d1ce:	mov    r9w,WORD PTR [rsp+0xa8]
    6502d1d7:	jmp    0x6502d1fb
    6502d1d9:	mov    rax,QWORD PTR [rcx]
    6502d1dc:	lea    rdx,[rsp+0x40]
    6502d1e1:	mov    QWORD PTR [rdx],rax
    6502d1e4:	mov    rax,QWORD PTR [rcx+0x8]
    6502d1e8:	mov    QWORD PTR [rdx+0x8],rax
    6502d1ec:	movzx  ebp,BYTE PTR [rsp+0x58]
    6502d1f1:	mov    rbx,QWORD PTR [rsp+0x50]
    6502d1f6:	mov    r14,QWORD PTR [rsp+0x40]
    6502d1fb:	cmp    DWORD PTR [r14+0x14],0x0
    6502d200:	jne    0x6502d269
    6502d202:	cmp    r9w,0xff
    6502d208:	jbe    0x6502d23b
    6502d20a:	test   r13,r13
    6502d20d:	je     0x6502d221
    6502d20f:	test   rsi,rsi
    6502d212:	je     0x6502d221
    6502d214:	mov    r8,rsi
    6502d217:	xor    edx,edx
    6502d219:	mov    rcx,r13
    6502d21c:	call   0x6501ee30
    6502d221:	call   0x650202b0
    6502d226:	mov    DWORD PTR [rax],0x2a
    6502d22c:	call   0x650202b0
    6502d231:	test   bpl,bpl
    6502d234:	mov    eax,DWORD PTR [rax]
    6502d236:	jmp    0x6502d336
    6502d23b:	test   r13,r13
    6502d23e:	je     0x6502d25c
    6502d240:	test   rsi,rsi
    6502d243:	jne    0x6502d258
    6502d245:	call   0x650202b0
    6502d24a:	xor    r12d,r12d
    6502d24d:	mov    DWORD PTR [rax],0x22
    6502d253:	jmp    0x6502d2fa
    6502d258:	mov    BYTE PTR [r13+0x0],r9b
    6502d25c:	test   rdi,rdi
    6502d25f:	je     0x6502d2bd
    6502d261:	mov    DWORD PTR [rdi],0x1
    6502d267:	jmp    0x6502d2bd
    6502d269:	mov    ecx,DWORD PTR [r14+0x4]
    6502d26d:	xor    r12d,r12d
    6502d270:	lea    rax,[rsp+0x98]
    6502d278:	mov    QWORD PTR [rsp+0x38],rax
    6502d27d:	mov    QWORD PTR [rsp+0x30],r12
    6502d282:	lea    r8,[rsp+0xa8]
    6502d28a:	lea    r9d,[r12+0x1]
    6502d28f:	xor    edx,edx
    6502d291:	mov    DWORD PTR [rsp+0x28],esi
    6502d295:	mov    QWORD PTR [rsp+0x20],r13
    6502d29a:	mov    DWORD PTR [rsp+0x98],r12d
    6502d2a2:	call   QWORD PTR [rip+0x6d98]        # 0x65034040
    6502d2a8:	test   eax,eax
    6502d2aa:	je     0x6502d2cd
    6502d2ac:	cmp    DWORD PTR [rsp+0x98],r12d
    6502d2b4:	jne    0x6502d321
    6502d2b6:	test   rdi,rdi
    6502d2b9:	je     0x6502d2bd
    6502d2bb:	mov    DWORD PTR [rdi],eax
    6502d2bd:	test   bpl,bpl
    6502d2c0:	je     0x6502d2c9
    6502d2c2:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502d2c9:	xor    eax,eax
    6502d2cb:	jmp    0x6502d33f
    6502d2cd:	call   QWORD PTR [rip+0x6da5]        # 0x65034078
    6502d2d3:	cmp    eax,0x7a
    6502d2d6:	jne    0x6502d321
    6502d2d8:	test   r13,r13
    6502d2db:	je     0x6502d2ef
    6502d2dd:	test   rsi,rsi
    6502d2e0:	je     0x6502d2ef
    6502d2e2:	mov    r8,rsi
    6502d2e5:	xor    edx,edx
    6502d2e7:	mov    rcx,r13
    6502d2ea:	call   0x6501ee30
    6502d2ef:	call   0x650202b0
    6502d2f4:	mov    DWORD PTR [rax],0x22
    6502d2fa:	xor    r9d,r9d
    6502d2fd:	xor    r8d,r8d
    6502d300:	xor    edx,edx
    6502d302:	xor    ecx,ecx
    6502d304:	mov    QWORD PTR [rsp+0x20],r12
    6502d309:	call   0x6501d850
    6502d30e:	test   bpl,bpl
    6502d311:	je     0x6502d31a
    6502d313:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502d31a:	mov    eax,0x22
    6502d31f:	jmp    0x6502d33f
    6502d321:	call   0x650202b0
    6502d326:	mov    DWORD PTR [rax],0x2a
    6502d32c:	call   0x650202b0
    6502d331:	test   bpl,bpl
    6502d334:	mov    eax,DWORD PTR [rax]
    6502d336:	je     0x6502d33f
    6502d338:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502d33f:	mov    rbp,QWORD PTR [rsp+0xa0]
    6502d347:	mov    rbx,QWORD PTR [rsp+0x90]
    6502d34f:	mov    r14,QWORD PTR [rsp+0x60]
    6502d354:	add    rsp,0x68
    6502d358:	pop    r13
    6502d35a:	pop    r12
    6502d35c:	pop    rdi
    6502d35d:	pop    rsi
    6502d35e:	ret    
    6502d35f:	int3   
    6502d360:	sub    rsp,0x38
    6502d364:	mov    QWORD PTR [rsp+0x20],0x0
    6502d36d:	call   0x6502d0b0
    6502d372:	add    rsp,0x38
    6502d376:	ret    
    6502d377:	int3   
    6502d378:	int3   
    6502d379:	int3   
    6502d37a:	int3   
    6502d37b:	int3   
    6502d37c:	int3   
    6502d37d:	int3   
    6502d37e:	int3   
    6502d37f:	int3   
    6502d380:	mov    QWORD PTR [rsp+0x10],rbx
    6502d385:	push   rbp
    6502d386:	push   rsi
    6502d387:	push   rdi
    6502d388:	push   r13
    6502d38a:	push   r14
    6502d38c:	sub    rsp,0x50
    6502d390:	mov    edi,r8d
    6502d393:	mov    r13,rdx
    6502d396:	mov    r14,rcx
    6502d399:	call   0x65020480
    6502d39e:	xor    ebx,ebx
    6502d3a0:	cmp    QWORD PTR [rip+0x17649],rbx        # 0x650449f0
    6502d3a7:	mov    rbp,rax
    6502d3aa:	mov    DWORD PTR [rsp+0x98],ebx
    6502d3b1:	mov    DWORD PTR [rsp+0x30],ebx
    6502d3b5:	jne    0x6502d4ac
    6502d3bb:	lea    rcx,[rip+0x9a7e]        # 0x65036e40
    6502d3c2:	call   QWORD PTR [rip+0x6db0]        # 0x65034178
    6502d3c8:	test   rax,rax
    6502d3cb:	mov    rsi,rax
    6502d3ce:	je     0x6502d5bf
    6502d3d4:	lea    rdx,[rip+0x9a55]        # 0x65036e30
    6502d3db:	mov    rcx,rax
    6502d3de:	call   QWORD PTR [rip+0x6ccc]        # 0x650340b0
    6502d3e4:	test   rax,rax
    6502d3e7:	je     0x6502d5bf
    6502d3ed:	mov    rcx,rax
    6502d3f0:	call   0x650203b0
    6502d3f5:	lea    rdx,[rip+0x9a24]        # 0x65036e20
    6502d3fc:	mov    rcx,rsi
    6502d3ff:	mov    QWORD PTR [rip+0x175ea],rax        # 0x650449f0
    6502d406:	call   QWORD PTR [rip+0x6ca4]        # 0x650340b0
    6502d40c:	mov    rcx,rax
    6502d40f:	call   0x650203b0
    6502d414:	lea    rdx,[rip+0x99ed]        # 0x65036e08
    6502d41b:	mov    rcx,rsi
    6502d41e:	mov    QWORD PTR [rip+0x175d3],rax        # 0x650449f8
    6502d425:	call   QWORD PTR [rip+0x6c85]        # 0x650340b0
    6502d42b:	mov    rcx,rax
    6502d42e:	call   0x650203b0
    6502d433:	lea    rcx,[rsp+0x98]
    6502d43b:	mov    QWORD PTR [rip+0x175be],rax        # 0x65044a00
    6502d442:	call   0x65022bc0
    6502d447:	test   eax,eax
    6502d449:	je     0x6502d45f
    6502d44b:	xor    r9d,r9d
    6502d44e:	xor    r8d,r8d
    6502d451:	xor    edx,edx
    6502d453:	xor    ecx,ecx
    6502d455:	mov    QWORD PTR [rsp+0x20],rbx
    6502d45a:	call   0x6501d7b0
    6502d45f:	cmp    DWORD PTR [rsp+0x98],0x2
    6502d467:	jne    0x6502d4ac
    6502d469:	lea    rdx,[rip+0x9978]        # 0x65036de8
    6502d470:	mov    rcx,rsi
    6502d473:	call   QWORD PTR [rip+0x6c37]        # 0x650340b0
    6502d479:	mov    rcx,rax
    6502d47c:	call   0x650203b0
    6502d481:	test   rax,rax
    6502d484:	mov    QWORD PTR [rip+0x17585],rax        # 0x65044a10
    6502d48b:	je     0x6502d4ac
    6502d48d:	lea    rdx,[rip+0x993c]        # 0x65036dd0
    6502d494:	mov    rcx,rsi
    6502d497:	call   QWORD PTR [rip+0x6c13]        # 0x650340b0
    6502d49d:	mov    rcx,rax
    6502d4a0:	call   0x650203b0
    6502d4a5:	mov    QWORD PTR [rip+0x1755c],rax        # 0x65044a08
    6502d4ac:	mov    rcx,QWORD PTR [rip+0x17555]        # 0x65044a08
    6502d4b3:	mov    QWORD PTR [rsp+0x80],r12
    6502d4bb:	cmp    rcx,rbp
    6502d4be:	je     0x6502d558
    6502d4c4:	cmp    QWORD PTR [rip+0x17545],rbp        # 0x65044a10
    6502d4cb:	je     0x6502d558
    6502d4d1:	call   0x65020570
    6502d4d6:	mov    rcx,QWORD PTR [rip+0x17533]        # 0x65044a10
    6502d4dd:	mov    rsi,rax
    6502d4e0:	call   0x65020570
    6502d4e5:	test   rsi,rsi
    6502d4e8:	mov    r12,rax
    6502d4eb:	je     0x6502d558
    6502d4ed:	test   rax,rax
    6502d4f0:	je     0x6502d558
    6502d4f2:	call   rsi
    6502d4f4:	test   rax,rax
    6502d4f7:	je     0x6502d523
    6502d4f9:	lea    rcx,[rsp+0x34]
    6502d4fe:	mov    r9d,0xc
    6502d504:	lea    r8,[rsp+0x38]
    6502d509:	mov    QWORD PTR [rsp+0x20],rcx
    6502d50e:	lea    edx,[r9-0xb]
    6502d512:	mov    rcx,rax
    6502d515:	call   r12
    6502d518:	test   eax,eax
    6502d51a:	je     0x6502d523
    6502d51c:	test   BYTE PTR [rsp+0x40],0x1
    6502d521:	jne    0x6502d558
    6502d523:	lea    rcx,[rsp+0x30]
    6502d528:	call   0x65022c10
    6502d52d:	test   eax,eax
    6502d52f:	je     0x6502d545
    6502d531:	xor    r9d,r9d
    6502d534:	xor    r8d,r8d
    6502d537:	xor    edx,edx
    6502d539:	xor    ecx,ecx
    6502d53b:	mov    QWORD PTR [rsp+0x20],rbx
    6502d540:	call   0x6501d7b0
    6502d545:	cmp    DWORD PTR [rsp+0x30],0x4
    6502d54a:	jb     0x6502d552
    6502d54c:	bts    edi,0x15
    6502d550:	jmp    0x6502d596
    6502d552:	bts    edi,0x12
    6502d556:	jmp    0x6502d596
    6502d558:	mov    rcx,QWORD PTR [rip+0x17499]        # 0x650449f8
    6502d55f:	cmp    rcx,rbp
    6502d562:	je     0x6502d596
    6502d564:	call   0x65020570
    6502d569:	test   rax,rax
    6502d56c:	je     0x6502d596
    6502d56e:	call   rax
    6502d570:	test   rax,rax
    6502d573:	mov    rbx,rax
    6502d576:	je     0x6502d596
    6502d578:	mov    rcx,QWORD PTR [rip+0x17481]        # 0x65044a00
    6502d57f:	cmp    rcx,rbp
    6502d582:	je     0x6502d596
    6502d584:	call   0x65020570
    6502d589:	test   rax,rax
    6502d58c:	je     0x6502d596
    6502d58e:	mov    rcx,rbx
    6502d591:	call   rax
    6502d593:	mov    rbx,rax
    6502d596:	mov    rcx,QWORD PTR [rip+0x17453]        # 0x650449f0
    6502d59d:	call   0x65020570
    6502d5a2:	mov    r12,QWORD PTR [rsp+0x80]
    6502d5aa:	test   rax,rax
    6502d5ad:	je     0x6502d5bf
    6502d5af:	mov    r9d,edi
    6502d5b2:	mov    r8,r13
    6502d5b5:	mov    rdx,r14
    6502d5b8:	mov    rcx,rbx
    6502d5bb:	call   rax
    6502d5bd:	jmp    0x6502d5c1
    6502d5bf:	xor    eax,eax
    6502d5c1:	mov    rbx,QWORD PTR [rsp+0x88]
    6502d5c9:	add    rsp,0x50
    6502d5cd:	pop    r14
    6502d5cf:	pop    r13
    6502d5d1:	pop    rdi
    6502d5d2:	pop    rsi
    6502d5d3:	pop    rbp
    6502d5d4:	ret    
    6502d5d5:	int3   
    6502d5d6:	int3   
    6502d5d7:	int3   
    6502d5d8:	int3   
    6502d5d9:	int3   
    6502d5da:	int3   
    6502d5db:	int3   
    6502d5dc:	int3   
    6502d5dd:	int3   
    6502d5de:	int3   
    6502d5df:	int3   
    6502d5e0:	sub    rsp,0x38
    6502d5e4:	test   ecx,ecx
    6502d5e6:	js     0x6502d60e
    6502d5e8:	cmp    ecx,0x2
    6502d5eb:	jle    0x6502d5fd
    6502d5ed:	cmp    ecx,0x3
    6502d5f0:	jne    0x6502d60e
    6502d5f2:	mov    eax,DWORD PTR [rip+0x16644]        # 0x65043c3c
    6502d5f8:	add    rsp,0x38
    6502d5fc:	ret    
    6502d5fd:	mov    eax,DWORD PTR [rip+0x16639]        # 0x65043c3c
    6502d603:	mov    DWORD PTR [rip+0x16633],ecx        # 0x65043c3c
    6502d609:	add    rsp,0x38
    6502d60d:	ret    
    6502d60e:	call   0x650202b0
    6502d613:	xor    r9d,r9d
    6502d616:	xor    r8d,r8d
    6502d619:	xor    edx,edx
    6502d61b:	xor    ecx,ecx
    6502d61d:	mov    QWORD PTR [rsp+0x20],0x0
    6502d626:	mov    DWORD PTR [rax],0x16
    6502d62c:	call   0x6501d850
    6502d631:	or     eax,0xffffffff
    6502d634:	add    rsp,0x38
    6502d638:	ret    
    6502d639:	int3   
    6502d63a:	int3   
    6502d63b:	int3   
    6502d63c:	int3   
    6502d63d:	int3   
    6502d63e:	int3   
    6502d63f:	int3   
    6502d640:	xor    edx,edx
    6502d642:	lea    r8d,[rdx+0xa]
    6502d646:	jmp    0x6502e2e0
    6502d64b:	int3   
    6502d64c:	int3   
    6502d64d:	int3   
    6502d64e:	int3   
    6502d64f:	int3   
    6502d650:	mov    ecx,0x2
    6502d655:	jmp    0x65022af0
    6502d65a:	int3   
    6502d65b:	int3   
    6502d65c:	int3   
    6502d65d:	int3   
    6502d65e:	int3   
    6502d65f:	int3   
    6502d660:	mov    QWORD PTR [rsp+0x8],rbx
    6502d665:	mov    QWORD PTR [rsp+0x10],rsi
    6502d66a:	push   rdi
    6502d66b:	sub    rsp,0x20
    6502d66f:	test   ecx,ecx
    6502d671:	js     0x6502d6fb
    6502d677:	cmp    ecx,DWORD PTR [rip+0x1a8e7]        # 0x65047f64
    6502d67d:	jae    0x6502d6fb
    6502d67f:	movsxd rax,ecx
    6502d682:	lea    rsi,[rip+0x1a8f7]        # 0x65047f80
    6502d689:	mov    bl,al
    6502d68b:	mov    rdi,rax
    6502d68e:	sar    rdi,0x5
    6502d692:	and    ebx,0x1f
    6502d695:	mov    rax,QWORD PTR [rsi+rdi*8]
    6502d699:	imul   rbx,rbx,0x58
    6502d69d:	test   BYTE PTR [rax+rbx*1+0x8],0x1
    6502d6a2:	je     0x6502d6fb
    6502d6a4:	cmp    QWORD PTR [rax+rbx*1],0xffffffffffffffff
    6502d6a9:	je     0x6502d6fb
    6502d6ab:	cmp    DWORD PTR [rip+0x1659e],0x1        # 0x65043c50
    6502d6b2:	jne    0x6502d6dd
    6502d6b4:	test   ecx,ecx
    6502d6b6:	je     0x6502d6d0
    6502d6b8:	sub    ecx,0x1
    6502d6bb:	je     0x6502d6c9
    6502d6bd:	cmp    ecx,0x1
    6502d6c0:	jne    0x6502d6dd
    6502d6c2:	mov    ecx,0xfffffff4
    6502d6c7:	jmp    0x6502d6d5
    6502d6c9:	mov    ecx,0xfffffff5
    6502d6ce:	jmp    0x6502d6d5
    6502d6d0:	mov    ecx,0xfffffff6
    6502d6d5:	xor    edx,edx
    6502d6d7:	call   QWORD PTR [rip+0x6aa3]        # 0x65034180
    6502d6dd:	mov    rax,QWORD PTR [rsi+rdi*8]
    6502d6e1:	mov    QWORD PTR [rbx+rax*1],0xffffffffffffffff
    6502d6e9:	xor    eax,eax
    6502d6eb:	mov    rbx,QWORD PTR [rsp+0x30]
    6502d6f0:	mov    rsi,QWORD PTR [rsp+0x38]
    6502d6f5:	add    rsp,0x20
    6502d6f9:	pop    rdi
    6502d6fa:	ret    
    6502d6fb:	call   0x650202b0
    6502d700:	mov    DWORD PTR [rax],0x9
    6502d706:	call   0x650202e0
    6502d70b:	mov    rbx,QWORD PTR [rsp+0x30]
    6502d710:	mov    rsi,QWORD PTR [rsp+0x38]
    6502d715:	mov    DWORD PTR [rax],0x0
    6502d71b:	or     eax,0xffffffff
    6502d71e:	add    rsp,0x20
    6502d722:	pop    rdi
    6502d723:	ret    
    6502d724:	int3   
    6502d725:	int3   
    6502d726:	int3   
    6502d727:	int3   
    6502d728:	int3   
    6502d729:	int3   
    6502d72a:	int3   
    6502d72b:	int3   
    6502d72c:	int3   
    6502d72d:	int3   
    6502d72e:	int3   
    6502d72f:	int3   
    6502d730:	sub    rsp,0x38
    6502d734:	cmp    ecx,0xfffffffe
    6502d737:	jne    0x6502d758
    6502d739:	call   0x650202e0
    6502d73e:	mov    DWORD PTR [rax],0x0
    6502d744:	call   0x650202b0
    6502d749:	mov    DWORD PTR [rax],0x9
    6502d74f:	or     rax,0xffffffffffffffff
    6502d753:	add    rsp,0x38
    6502d757:	ret    
    6502d758:	test   ecx,ecx
    6502d75a:	js     0x6502d790
    6502d75c:	cmp    ecx,DWORD PTR [rip+0x1a802]        # 0x65047f64
    6502d762:	jae    0x6502d790
    6502d764:	movsxd rax,ecx
    6502d767:	lea    rdx,[rip+0x1a812]        # 0x65047f80
    6502d76e:	mov    rcx,rax
    6502d771:	and    eax,0x1f
    6502d774:	sar    rcx,0x5
    6502d778:	imul   rax,rax,0x58
    6502d77c:	mov    rdx,QWORD PTR [rdx+rcx*8]
    6502d780:	test   BYTE PTR [rdx+rax*1+0x8],0x1
    6502d785:	je     0x6502d790
    6502d787:	mov    rax,QWORD PTR [rdx+rax*1]
    6502d78b:	add    rsp,0x38
    6502d78f:	ret    
    6502d790:	call   0x650202e0
    6502d795:	mov    DWORD PTR [rax],0x0
    6502d79b:	call   0x650202b0
    6502d7a0:	xor    r9d,r9d
    6502d7a3:	xor    r8d,r8d
    6502d7a6:	xor    edx,edx
    6502d7a8:	xor    ecx,ecx
    6502d7aa:	mov    DWORD PTR [rax],0x9
    6502d7b0:	mov    QWORD PTR [rsp+0x20],0x0
    6502d7b9:	call   0x6501d850
    6502d7be:	or     rax,0xffffffffffffffff
    6502d7c2:	add    rsp,0x38
    6502d7c6:	ret    
    6502d7c7:	int3   
    6502d7c8:	int3   
    6502d7c9:	int3   
    6502d7ca:	int3   
    6502d7cb:	int3   
    6502d7cc:	int3   
    6502d7cd:	int3   
    6502d7ce:	int3   
    6502d7cf:	int3   
    6502d7d0:	mov    QWORD PTR [rsp+0x8],rbx
    6502d7d5:	mov    QWORD PTR [rsp+0x10],rsi
    6502d7da:	mov    QWORD PTR [rsp+0x18],rdi
    6502d7df:	mov    QWORD PTR [rsp+0x20],r12
    6502d7e4:	push   r13
    6502d7e6:	sub    rsp,0x20
    6502d7ea:	movsxd rax,ecx
    6502d7ed:	mov    r12,rax
    6502d7f0:	sar    r12,0x5
    6502d7f4:	lea    r13,[rip+0x1a785]        # 0x65047f80
    6502d7fb:	mov    dil,al
    6502d7fe:	and    edi,0x1f
    6502d801:	imul   rdi,rdi,0x58
    6502d805:	mov    rsi,QWORD PTR [r13+r12*8+0x0]
    6502d80a:	mov    ebx,0x1
    6502d80f:	cmp    DWORD PTR [rdi+rsi*1+0xc],0x0
    6502d814:	jne    0x6502d84b
    6502d816:	lea    ecx,[rbx+0x9]
    6502d819:	call   0x650297c0
    6502d81e:	nop
    6502d81f:	cmp    DWORD PTR [rdi+rsi*1+0xc],0x0
    6502d824:	jne    0x6502d841
    6502d826:	lea    rcx,[rdi+rsi*1+0x10]
    6502d82b:	mov    edx,0xfa0
    6502d830:	call   0x65029d20
    6502d835:	xor    ecx,ecx
    6502d837:	test   eax,eax
    6502d839:	cmove  ebx,ecx
    6502d83c:	add    DWORD PTR [rdi+rsi*1+0xc],0x1
    6502d841:	mov    ecx,0xa
    6502d846:	call   0x65029690
    6502d84b:	test   ebx,ebx
    6502d84d:	je     0x6502d85f
    6502d84f:	mov    rcx,QWORD PTR [r13+r12*8+0x0]
    6502d854:	lea    rcx,[rcx+rdi*1+0x10]
    6502d859:	call   QWORD PTR [rip+0x68b1]        # 0x65034110
    6502d85f:	mov    eax,ebx
    6502d861:	mov    rbx,QWORD PTR [rsp+0x30]
    6502d866:	mov    rsi,QWORD PTR [rsp+0x38]
    6502d86b:	mov    rdi,QWORD PTR [rsp+0x40]
    6502d870:	mov    r12,QWORD PTR [rsp+0x48]
    6502d875:	add    rsp,0x20
    6502d879:	pop    r13
    6502d87b:	ret    
    6502d87c:	int3   
    6502d87d:	int3   
    6502d87e:	int3   
    6502d87f:	int3   
    6502d880:	rex push rbp
    6502d882:	sub    rsp,0x20
    6502d886:	mov    rbp,rdx
    6502d889:	mov    ecx,0xa
    6502d88e:	call   0x65029690
    6502d893:	add    rsp,0x20
    6502d897:	pop    rbp
    6502d898:	ret    
    6502d899:	int3   
    6502d89a:	int3   
    6502d89b:	int3   
    6502d89c:	int3   
    6502d89d:	int3   
    6502d89e:	int3   
    6502d89f:	int3   
    6502d8a0:	movsxd rax,ecx
    6502d8a3:	lea    r8,[rip+0x1a6d6]        # 0x65047f80
    6502d8aa:	mov    cl,al
    6502d8ac:	mov    rdx,rax
    6502d8af:	and    ecx,0x1f
    6502d8b2:	sar    rdx,0x5
    6502d8b6:	mov    rax,QWORD PTR [r8+rdx*8]
    6502d8ba:	imul   rcx,rcx,0x58
    6502d8be:	lea    rcx,[rax+rcx*1+0x10]
    6502d8c3:	rex.W jmp QWORD PTR [rip+0x684e]        # 0x65034118
    6502d8ca:	int3   
    6502d8cb:	int3   
    6502d8cc:	int3   
    6502d8cd:	int3   
    6502d8ce:	int3   
    6502d8cf:	int3   
    6502d8d0:	rex push rbx
    6502d8d2:	sub    rsp,0x60
    6502d8d6:	mov    rax,QWORD PTR [rip+0x14843]        # 0x65042120
    6502d8dd:	xor    rax,rsp
    6502d8e0:	mov    QWORD PTR [rsp+0x50],rax
    6502d8e5:	xor    ebx,ebx
    6502d8e7:	mov    WORD PTR [rsp+0x40],cx
    6502d8ec:	cmp    DWORD PTR [rip+0x15c8a],ebx        # 0x6504357c
    6502d8f2:	je     0x6502d95c
    6502d8f4:	mov    rcx,QWORD PTR [rip+0x15cfd]        # 0x650435f8
    6502d8fb:	cmp    rcx,0xfffffffffffffffe
    6502d8ff:	jne    0x6502d90d
    6502d901:	call   0x6502e320
    6502d906:	mov    rcx,QWORD PTR [rip+0x15ceb]        # 0x650435f8
    6502d90d:	cmp    rcx,0xffffffffffffffff
    6502d911:	je     0x6502d9e0
    6502d917:	lea    r9,[rsp+0x44]
    6502d91c:	lea    rdx,[rsp+0x40]
    6502d921:	mov    r8d,0x1
    6502d927:	mov    QWORD PTR [rsp+0x20],rbx
    6502d92c:	call   QWORD PTR [rip+0x6816]        # 0x65034148
    6502d932:	test   eax,eax
    6502d934:	jne    0x6502d9d4
    6502d93a:	cmp    DWORD PTR [rip+0x15c3b],0x2        # 0x6504357c
    6502d941:	jne    0x6502d9e0
    6502d947:	call   QWORD PTR [rip+0x672b]        # 0x65034078
    6502d94d:	cmp    eax,0x78
    6502d950:	jne    0x6502d9e0
    6502d956:	mov    DWORD PTR [rip+0x15c20],ebx        # 0x6504357c
    6502d95c:	call   QWORD PTR [rip+0x67ee]        # 0x65034150
    6502d962:	mov    QWORD PTR [rsp+0x38],rbx
    6502d967:	mov    QWORD PTR [rsp+0x30],rbx
    6502d96c:	mov    ecx,eax
    6502d96e:	lea    rax,[rsp+0x48]
    6502d973:	lea    r8,[rsp+0x40]
    6502d978:	mov    r9d,0x1
    6502d97e:	xor    edx,edx
    6502d980:	mov    DWORD PTR [rsp+0x28],0x5
    6502d988:	mov    QWORD PTR [rsp+0x20],rax
    6502d98d:	call   QWORD PTR [rip+0x66ad]        # 0x65034040
    6502d993:	mov    rcx,QWORD PTR [rip+0x15c5e]        # 0x650435f8
    6502d99a:	cmp    rcx,0xffffffffffffffff
    6502d99e:	je     0x6502d9e0
    6502d9a0:	lea    r9,[rsp+0x44]
    6502d9a5:	lea    rdx,[rsp+0x48]
    6502d9aa:	mov    r8d,eax
    6502d9ad:	mov    QWORD PTR [rsp+0x20],rbx
    6502d9b2:	call   QWORD PTR [rip+0x67a0]        # 0x65034158
    6502d9b8:	test   eax,eax
    6502d9ba:	je     0x6502d9e0
    6502d9bc:	mov    ax,WORD PTR [rsp+0x40]
    6502d9c1:	mov    rcx,QWORD PTR [rsp+0x50]
    6502d9c6:	xor    rcx,rsp
    6502d9c9:	call   0x6501e4e0
    6502d9ce:	add    rsp,0x60
    6502d9d2:	pop    rbx
    6502d9d3:	ret    
    6502d9d4:	mov    DWORD PTR [rip+0x15b9e],0x1        # 0x6504357c
    6502d9de:	jmp    0x6502d9bc
    6502d9e0:	or     ax,0xffff
    6502d9e4:	mov    rcx,QWORD PTR [rsp+0x50]
    6502d9e9:	xor    rcx,rsp
    6502d9ec:	call   0x6501e4e0
    6502d9f1:	add    rsp,0x60
    6502d9f5:	pop    rbx
    6502d9f6:	ret    
    6502d9f7:	int3   
    6502d9f8:	int3   
    6502d9f9:	int3   
    6502d9fa:	int3   
    6502d9fb:	int3   
    6502d9fc:	int3   
    6502d9fd:	int3   
    6502d9fe:	int3   
    6502d9ff:	int3   
    6502da00:	mov    QWORD PTR [rsp+0x8],rbx
    6502da05:	mov    QWORD PTR [rsp+0x10],rsi
    6502da0a:	mov    QWORD PTR [rsp+0x18],rdi
    6502da0f:	push   r12
    6502da11:	sub    rsp,0x30
    6502da15:	xor    r12d,r12d
    6502da18:	mov    edi,r12d
    6502da1b:	lea    ecx,[r12+0x1]
    6502da20:	call   0x650297c0
    6502da25:	nop
    6502da26:	mov    ebx,0x3
    6502da2b:	mov    DWORD PTR [rsp+0x20],ebx
    6502da2f:	nop
    6502da30:	cmp    ebx,DWORD PTR [rip+0x1a52a]        # 0x65047f60
    6502da36:	jge    0x6502daa2
    6502da38:	movsxd rsi,ebx
    6502da3b:	mov    rax,QWORD PTR [rip+0x19516]        # 0x65046f58
    6502da42:	cmp    QWORD PTR [rax+rsi*8],0x0
    6502da47:	je     0x6502da99
    6502da49:	mov    rcx,QWORD PTR [rax+rsi*8]
    6502da4d:	test   BYTE PTR [rcx+0x18],0x83
    6502da51:	je     0x6502da64
    6502da53:	call   0x6502e440
    6502da58:	cmp    eax,0xffffffff
    6502da5b:	je     0x6502da64
    6502da5d:	add    edi,0x1
    6502da60:	mov    DWORD PTR [rsp+0x24],edi
    6502da64:	cmp    ebx,0x14
    6502da67:	jl     0x6502da99
    6502da69:	mov    rax,QWORD PTR [rip+0x194e8]        # 0x65046f58
    6502da70:	mov    rcx,QWORD PTR [rax+rsi*8]
    6502da74:	add    rcx,0x30
    6502da78:	call   QWORD PTR [rip+0x66a2]        # 0x65034120
    6502da7e:	mov    rcx,QWORD PTR [rip+0x194d3]        # 0x65046f58
    6502da85:	mov    rcx,QWORD PTR [rcx+rsi*8]
    6502da89:	call   0x6501fa90
    6502da8e:	mov    r11,QWORD PTR [rip+0x194c3]        # 0x65046f58
    6502da95:	mov    QWORD PTR [r11+rsi*8],r12
    6502da99:	add    ebx,0x1
    6502da9c:	mov    DWORD PTR [rsp+0x20],ebx
    6502daa0:	jmp    0x6502da30
    6502daa2:	mov    ecx,0x1
    6502daa7:	call   0x65029690
    6502daac:	mov    eax,edi
    6502daae:	mov    rbx,QWORD PTR [rsp+0x40]
    6502dab3:	mov    rsi,QWORD PTR [rsp+0x48]
    6502dab8:	mov    rdi,QWORD PTR [rsp+0x50]
    6502dabd:	add    rsp,0x30
    6502dac1:	pop    r12
    6502dac3:	ret    
    6502dac4:	int3   
    6502dac5:	int3   
    6502dac6:	int3   
    6502dac7:	int3   
    6502dac8:	int3   
    6502dac9:	int3   
    6502daca:	int3   
    6502dacb:	int3   
    6502dacc:	int3   
    6502dacd:	int3   
    6502dace:	int3   
    6502dacf:	int3   
    6502dad0:	rex push rbp
    6502dad2:	sub    rsp,0x20
    6502dad6:	mov    rbp,rdx
    6502dad9:	mov    ecx,0x1
    6502dade:	call   0x65029690
    6502dae3:	add    rsp,0x20
    6502dae7:	pop    rbp
    6502dae8:	ret    
    6502dae9:	int3   
    6502daea:	int3   
    6502daeb:	int3   
    6502daec:	int3   
    6502daed:	int3   
    6502daee:	int3   
    6502daef:	int3   
    6502daf0:	mov    QWORD PTR [rsp+0x10],rbx
    6502daf5:	push   rsi
    6502daf6:	sub    rsp,0x20
    6502dafa:	mov    rbx,rcx
    6502dafd:	mov    ecx,DWORD PTR [rcx+0x18]
    6502db00:	xor    esi,esi
    6502db02:	mov    eax,ecx
    6502db04:	and    al,0x3
    6502db06:	cmp    al,0x2
    6502db08:	jne    0x6502db55
    6502db0a:	test   ecx,0x108
    6502db10:	je     0x6502db55
    6502db12:	mov    QWORD PTR [rsp+0x30],rdi
    6502db17:	mov    edi,DWORD PTR [rbx]
    6502db19:	sub    edi,DWORD PTR [rbx+0x10]
    6502db1c:	test   edi,edi
    6502db1e:	jle    0x6502db50
    6502db20:	mov    rcx,rbx
    6502db23:	call   0x6502b620
    6502db28:	mov    rdx,QWORD PTR [rbx+0x10]
    6502db2c:	mov    r8d,edi
    6502db2f:	mov    ecx,eax
    6502db31:	call   0x6502b190
    6502db36:	cmp    eax,edi
    6502db38:	jne    0x6502db49
    6502db3a:	mov    eax,DWORD PTR [rbx+0x18]
    6502db3d:	test   al,al
    6502db3f:	jns    0x6502db50
    6502db41:	and    eax,0xfffffffd
    6502db44:	mov    DWORD PTR [rbx+0x18],eax
    6502db47:	jmp    0x6502db50
    6502db49:	or     DWORD PTR [rbx+0x18],0x20
    6502db4d:	or     esi,0xffffffff
    6502db50:	mov    rdi,QWORD PTR [rsp+0x30]
    6502db55:	mov    rcx,QWORD PTR [rbx+0x10]
    6502db59:	mov    DWORD PTR [rbx+0x8],0x0
    6502db60:	mov    eax,esi
    6502db62:	mov    QWORD PTR [rbx],rcx
    6502db65:	mov    rbx,QWORD PTR [rsp+0x38]
    6502db6a:	add    rsp,0x20
    6502db6e:	pop    rsi
    6502db6f:	ret    
    6502db70:	rex push rbx
    6502db72:	sub    rsp,0x20
    6502db76:	test   rcx,rcx
    6502db79:	mov    rbx,rcx
    6502db7c:	jne    0x6502db88
    6502db7e:	add    rsp,0x20
    6502db82:	pop    rbx
    6502db83:	jmp    0x6502dc30
    6502db88:	mov    ecx,DWORD PTR [rcx+0x18]
    6502db8b:	mov    QWORD PTR [rsp+0x30],rsi
    6502db90:	xor    esi,esi
    6502db92:	mov    eax,ecx
    6502db94:	and    al,0x3
    6502db96:	cmp    al,0x2
    6502db98:	jne    0x6502dbe5
    6502db9a:	test   ecx,0x108
    6502dba0:	je     0x6502dbe5
    6502dba2:	mov    QWORD PTR [rsp+0x38],rdi
    6502dba7:	mov    edi,DWORD PTR [rbx]
    6502dba9:	sub    edi,DWORD PTR [rbx+0x10]
    6502dbac:	test   edi,edi
    6502dbae:	jle    0x6502dbe0
    6502dbb0:	mov    rcx,rbx
    6502dbb3:	call   0x6502b620
    6502dbb8:	mov    rdx,QWORD PTR [rbx+0x10]
    6502dbbc:	mov    r8d,edi
    6502dbbf:	mov    ecx,eax
    6502dbc1:	call   0x6502b190
    6502dbc6:	cmp    eax,edi
    6502dbc8:	jne    0x6502dbd9
    6502dbca:	mov    eax,DWORD PTR [rbx+0x18]
    6502dbcd:	test   al,al
    6502dbcf:	jns    0x6502dbe0
    6502dbd1:	and    eax,0xfffffffd
    6502dbd4:	mov    DWORD PTR [rbx+0x18],eax
    6502dbd7:	jmp    0x6502dbe0
    6502dbd9:	or     DWORD PTR [rbx+0x18],0x20
    6502dbdd:	or     esi,0xffffffff
    6502dbe0:	mov    rdi,QWORD PTR [rsp+0x38]
    6502dbe5:	mov    rcx,QWORD PTR [rbx+0x10]
    6502dbe9:	test   esi,esi
    6502dbeb:	mov    rsi,QWORD PTR [rsp+0x30]
    6502dbf0:	mov    QWORD PTR [rbx],rcx
    6502dbf3:	mov    DWORD PTR [rbx+0x8],0x0
    6502dbfa:	je     0x6502dc05
    6502dbfc:	or     eax,0xffffffff
    6502dbff:	add    rsp,0x20
    6502dc03:	pop    rbx
    6502dc04:	ret    
    6502dc05:	bt     DWORD PTR [rbx+0x18],0xe
    6502dc0a:	jae    0x6502dc25
    6502dc0c:	mov    rcx,rbx
    6502dc0f:	call   0x6502b620
    6502dc14:	mov    ecx,eax
    6502dc16:	call   0x6502e4e0
    6502dc1b:	neg    eax
    6502dc1d:	sbb    eax,eax
    6502dc1f:	add    rsp,0x20
    6502dc23:	pop    rbx
    6502dc24:	ret    
    6502dc25:	xor    eax,eax
    6502dc27:	add    rsp,0x20
    6502dc2b:	pop    rbx
    6502dc2c:	ret    
    6502dc2d:	int3   
    6502dc2e:	int3   
    6502dc2f:	int3   
    6502dc30:	mov    QWORD PTR [rsp+0x8],rbx
    6502dc35:	mov    QWORD PTR [rsp+0x10],rsi
    6502dc3a:	mov    QWORD PTR [rsp+0x18],rdi
    6502dc3f:	push   r12
    6502dc41:	push   r13
    6502dc43:	push   r14
    6502dc45:	sub    rsp,0x30
    6502dc49:	mov    r12d,ecx
    6502dc4c:	xor    edi,edi
    6502dc4e:	mov    r13d,edi
    6502dc51:	lea    ecx,[rdi+0x1]
    6502dc54:	call   0x650297c0
    6502dc59:	nop
    6502dc5a:	mov    ebx,edi
    6502dc5c:	mov    DWORD PTR [rsp+0x20],ebx
    6502dc60:	or     r14d,0xffffffff
    6502dc64:	cmp    ebx,DWORD PTR [rip+0x1a2f6]        # 0x65047f60
    6502dc6a:	jge    0x6502dcf6
    6502dc70:	movsxd rsi,ebx
    6502dc73:	mov    rax,QWORD PTR [rip+0x192de]        # 0x65046f58
    6502dc7a:	cmp    QWORD PTR [rax+rsi*8],0x0
    6502dc7f:	je     0x6502dcea
    6502dc81:	mov    rdx,QWORD PTR [rax+rsi*8]
    6502dc85:	test   BYTE PTR [rdx+0x18],0x83
    6502dc89:	je     0x6502dcea
    6502dc8b:	mov    ecx,ebx
    6502dc8d:	call   0x6502b570
    6502dc92:	nop
    6502dc93:	mov    rax,QWORD PTR [rip+0x192be]        # 0x65046f58
    6502dc9a:	mov    rcx,QWORD PTR [rax+rsi*8]
    6502dc9e:	mov    eax,DWORD PTR [rcx+0x18]
    6502dca1:	test   al,0x83
    6502dca3:	je     0x6502dcd8
    6502dca5:	cmp    r12d,0x1
    6502dca9:	jne    0x6502dcbe
    6502dcab:	call   0x6502db70
    6502dcb0:	cmp    eax,0xffffffff
    6502dcb3:	je     0x6502dcd8
    6502dcb5:	add    edi,r12d
    6502dcb8:	mov    DWORD PTR [rsp+0x24],edi
    6502dcbc:	jmp    0x6502dcd8
    6502dcbe:	test   r12d,r12d
    6502dcc1:	jne    0x6502dcd8
    6502dcc3:	test   al,0x2
    6502dcc5:	je     0x6502dcd8
    6502dcc7:	call   0x6502db70
    6502dccc:	cmp    eax,0xffffffff
    6502dccf:	cmove  r13d,r14d
    6502dcd3:	mov    DWORD PTR [rsp+0x28],r13d
    6502dcd8:	mov    rdx,QWORD PTR [rip+0x19279]        # 0x65046f58
    6502dcdf:	mov    rdx,QWORD PTR [rdx+rsi*8]
    6502dce3:	mov    ecx,ebx
    6502dce5:	call   0x6502b600
    6502dcea:	add    ebx,0x1
    6502dced:	mov    DWORD PTR [rsp+0x20],ebx
    6502dcf1:	jmp    0x6502dc64
    6502dcf6:	mov    ecx,0x1
    6502dcfb:	call   0x65029690
    6502dd00:	cmp    r12d,0x1
    6502dd04:	cmove  r13d,edi
    6502dd08:	mov    eax,r13d
    6502dd0b:	mov    rbx,QWORD PTR [rsp+0x50]
    6502dd10:	mov    rsi,QWORD PTR [rsp+0x58]
    6502dd15:	mov    rdi,QWORD PTR [rsp+0x60]
    6502dd1a:	add    rsp,0x30
    6502dd1e:	pop    r14
    6502dd20:	pop    r13
    6502dd22:	pop    r12
    6502dd24:	ret    
    6502dd25:	int3   
    6502dd26:	int3   
    6502dd27:	int3   
    6502dd28:	int3   
    6502dd29:	int3   
    6502dd2a:	int3   
    6502dd2b:	int3   
    6502dd2c:	int3   
    6502dd2d:	int3   
    6502dd2e:	int3   
    6502dd2f:	int3   
    6502dd30:	rex push rbp
    6502dd32:	sub    rsp,0x20
    6502dd36:	mov    rbp,rdx
    6502dd39:	movsxd rcx,DWORD PTR [rbp+0x20]
    6502dd3d:	mov    rax,rcx
    6502dd40:	mov    rdx,QWORD PTR [rip+0x19211]        # 0x65046f58
    6502dd47:	mov    rdx,QWORD PTR [rdx+rcx*8]
    6502dd4b:	call   0x6502b600
    6502dd50:	add    rsp,0x20
    6502dd54:	pop    rbp
    6502dd55:	ret    
    6502dd56:	int3   
    6502dd57:	int3   
    6502dd58:	int3   
    6502dd59:	int3   
    6502dd5a:	int3   
    6502dd5b:	int3   
    6502dd5c:	int3   
    6502dd5d:	int3   
    6502dd5e:	int3   
    6502dd5f:	int3   
    6502dd60:	rex push rbp
    6502dd62:	sub    rsp,0x20
    6502dd66:	mov    rbp,rdx
    6502dd69:	mov    ecx,0x1
    6502dd6e:	call   0x65029690
    6502dd73:	add    rsp,0x20
    6502dd77:	pop    rbp
    6502dd78:	ret    
    6502dd79:	int3   
    6502dd7a:	int3   
    6502dd7b:	int3   
    6502dd7c:	int3   
    6502dd7d:	int3   
    6502dd7e:	int3   
    6502dd7f:	int3   
    6502dd80:	mov    ecx,0x1
    6502dd85:	jmp    0x6502dc30
    6502dd8a:	int3   
    6502dd8b:	int3   
    6502dd8c:	int3   
    6502dd8d:	int3   
    6502dd8e:	int3   
    6502dd8f:	int3   
    6502dd90:	rex push rbx
    6502dd92:	push   rdi
    6502dd93:	push   r12
    6502dd95:	sub    rsp,0x20
    6502dd99:	mov    r12d,ecx
    6502dd9c:	mov    rcx,rdx
    6502dd9f:	mov    rbx,rdx
    6502dda2:	call   0x6502b620
    6502dda7:	mov    edx,DWORD PTR [rbx+0x18]
    6502ddaa:	test   dl,0x82
    6502ddad:	movsxd rdi,eax
    6502ddb0:	jne    0x6502ddcf
    6502ddb2:	call   0x650202b0
    6502ddb7:	mov    DWORD PTR [rax],0x9
    6502ddbd:	or     DWORD PTR [rbx+0x18],0x20
    6502ddc1:	mov    eax,0xffff
    6502ddc6:	add    rsp,0x20
    6502ddca:	pop    r12
    6502ddcc:	pop    rdi
    6502ddcd:	pop    rbx
    6502ddce:	ret    
    6502ddcf:	test   dl,0x40
    6502ddd2:	je     0x6502ddf1
    6502ddd4:	call   0x650202b0
    6502ddd9:	mov    DWORD PTR [rax],0x22
    6502dddf:	or     DWORD PTR [rbx+0x18],0x20
    6502dde3:	mov    eax,0xffff
    6502dde8:	add    rsp,0x20
    6502ddec:	pop    r12
    6502ddee:	pop    rdi
    6502ddef:	pop    rbx
    6502ddf0:	ret    
    6502ddf1:	mov    QWORD PTR [rsp+0x50],rsi
    6502ddf6:	xor    esi,esi
    6502ddf8:	test   dl,0x1
    6502ddfb:	je     0x6502de16
    6502ddfd:	test   dl,0x10
    6502de00:	mov    DWORD PTR [rbx+0x8],esi
    6502de03:	je     0x6502dea3
    6502de09:	mov    rax,QWORD PTR [rbx+0x10]
    6502de0d:	and    edx,0xfffffffe
    6502de10:	mov    QWORD PTR [rbx],rax
    6502de13:	mov    DWORD PTR [rbx+0x18],edx
    6502de16:	mov    eax,DWORD PTR [rbx+0x18]
    6502de19:	mov    DWORD PTR [rbx+0x8],esi
    6502de1c:	and    eax,0xffffffef
    6502de1f:	or     eax,0x2
    6502de22:	test   eax,0x10c
    6502de27:	mov    DWORD PTR [rbx+0x18],eax
    6502de2a:	jne    0x6502de5b
    6502de2c:	call   0x6502b3c0
    6502de31:	add    rax,0x30
    6502de35:	cmp    rbx,rax
    6502de38:	je     0x6502de48
    6502de3a:	call   0x6502b3c0
    6502de3f:	add    rax,0x60
    6502de43:	cmp    rbx,rax
    6502de46:	jne    0x6502de53
    6502de48:	mov    ecx,edi
    6502de4a:	call   0x6502b340
    6502de4f:	test   eax,eax
    6502de51:	jne    0x6502de5b
    6502de53:	mov    rcx,rbx
    6502de56:	call   0x6502b2e0
    6502de5b:	test   DWORD PTR [rbx+0x18],0x108
    6502de62:	mov    QWORD PTR [rsp+0x40],rbp
    6502de67:	je     0x6502df0e
    6502de6d:	mov    ebp,DWORD PTR [rbx]
    6502de6f:	mov    rdx,QWORD PTR [rbx+0x10]
    6502de73:	sub    ebp,DWORD PTR [rbx+0x10]
    6502de76:	lea    rax,[rdx+0x2]
    6502de7a:	mov    QWORD PTR [rbx],rax
    6502de7d:	mov    eax,DWORD PTR [rbx+0x24]
    6502de80:	sub    eax,0x2
    6502de83:	test   ebp,ebp
    6502de85:	mov    DWORD PTR [rbx+0x8],eax
    6502de88:	jle    0x6502debc
    6502de8a:	mov    r8d,ebp
    6502de8d:	mov    ecx,edi
    6502de8f:	call   0x6502b190
    6502de94:	mov    esi,eax
    6502de96:	mov    rax,QWORD PTR [rbx+0x10]
    6502de9a:	mov    WORD PTR [rax],r12w
    6502de9e:	jmp    0x6502df2a
    6502dea3:	mov    rsi,QWORD PTR [rsp+0x50]
    6502dea8:	or     edx,0x20
    6502deab:	mov    eax,0xffff
    6502deb0:	mov    DWORD PTR [rbx+0x18],edx
    6502deb3:	add    rsp,0x20
    6502deb7:	pop    r12
    6502deb9:	pop    rdi
    6502deba:	pop    rbx
    6502debb:	ret    
    6502debc:	cmp    edi,0xffffffff
    6502debf:	je     0x6502dee4
    6502dec1:	cmp    edi,0xfffffffe
    6502dec4:	je     0x6502dee4
    6502dec6:	mov    rax,rdi
    6502dec9:	mov    rcx,rdi
    6502decc:	lea    rdx,[rip+0x1a0ad]        # 0x65047f80
    6502ded3:	and    eax,0x1f
    6502ded6:	sar    rcx,0x5
    6502deda:	imul   rax,rax,0x58
    6502dede:	add    rax,QWORD PTR [rdx+rcx*8]
    6502dee2:	jmp    0x6502deeb
    6502dee4:	lea    rax,[rip+0x14ae5]        # 0x650429d0
    6502deeb:	test   BYTE PTR [rax+0x8],0x20
    6502deef:	je     0x6502df04
    6502def1:	xor    edx,edx
    6502def3:	mov    ecx,edi
    6502def5:	lea    r8d,[rdx+0x2]
    6502def9:	call   0x6502a830
    6502defe:	cmp    rax,0xffffffffffffffff
    6502df02:	je     0x6502df2e
    6502df04:	mov    rax,QWORD PTR [rbx+0x10]
    6502df08:	mov    WORD PTR [rax],r12w
    6502df0c:	jmp    0x6502df2a
    6502df0e:	mov    ebp,0x2
    6502df13:	lea    rdx,[rsp+0x48]
    6502df18:	mov    ecx,edi
    6502df1a:	mov    r8d,ebp
    6502df1d:	mov    WORD PTR [rsp+0x48],r12w
    6502df23:	call   0x6502b190
    6502df28:	mov    esi,eax
    6502df2a:	cmp    esi,ebp
    6502df2c:	je     0x6502df39
    6502df2e:	or     DWORD PTR [rbx+0x18],0x20
    6502df32:	mov    eax,0xffff
    6502df37:	jmp    0x6502df3d
    6502df39:	movzx  eax,r12w
    6502df3d:	mov    rbp,QWORD PTR [rsp+0x40]
    6502df42:	mov    rsi,QWORD PTR [rsp+0x50]
    6502df47:	add    rsp,0x20
    6502df4b:	pop    r12
    6502df4d:	pop    rdi
    6502df4e:	pop    rbx
    6502df4f:	ret    
    6502df50:	push   r12
    6502df52:	push   r13
    6502df54:	push   r14
    6502df56:	sub    rsp,0x50
    6502df5a:	test   rcx,rcx
    6502df5d:	mov    r12d,r9d
    6502df60:	mov    r13,r8
    6502df63:	mov    r14,rdx
    6502df66:	mov    BYTE PTR [rsp+0x48],0x0
    6502df6b:	jne    0x6502e008
    6502df71:	call   0x650208c0
    6502df76:	mov    QWORD PTR [rsp+0x40],rax
    6502df7b:	mov    r10,QWORD PTR [rax+0xc0]
    6502df82:	cmp    r10,QWORD PTR [rip+0x14a17]        # 0x650429a0
    6502df89:	mov    QWORD PTR [rsp+0x30],r10
    6502df8e:	mov    r11,QWORD PTR [rax+0xb8]
    6502df95:	mov    QWORD PTR [rsp+0x38],r11
    6502df9a:	je     0x6502dfc1
    6502df9c:	mov    ecx,DWORD PTR [rax+0xc8]
    6502dfa2:	test   DWORD PTR [rip+0x14880],ecx        # 0x65042828
    6502dfa8:	jne    0x6502dfc1
    6502dfaa:	call   0x65023d20
    6502dfaf:	mov    r11,QWORD PTR [rsp+0x38]
    6502dfb4:	mov    r10,rax
    6502dfb7:	mov    QWORD PTR [rsp+0x30],rax
    6502dfbc:	mov    rax,QWORD PTR [rsp+0x40]
    6502dfc1:	cmp    r11,QWORD PTR [rip+0x14758]        # 0x65042720
    6502dfc8:	je     0x6502dfec
    6502dfca:	mov    ecx,DWORD PTR [rax+0xc8]
    6502dfd0:	test   DWORD PTR [rip+0x14852],ecx        # 0x65042828
    6502dfd6:	jne    0x6502dfec
    6502dfd8:	call   0x650231d0
    6502dfdd:	mov    r10,QWORD PTR [rsp+0x30]
    6502dfe2:	mov    QWORD PTR [rsp+0x38],rax
    6502dfe7:	mov    rax,QWORD PTR [rsp+0x40]
    6502dfec:	test   BYTE PTR [rax+0xc8],0x2
    6502dff3:	jne    0x6502e020
    6502dff5:	or     DWORD PTR [rax+0xc8],0x2
    6502dffc:	mov    r10,QWORD PTR [rsp+0x30]
    6502e001:	mov    BYTE PTR [rsp+0x48],0x1
    6502e006:	jmp    0x6502e020
    6502e008:	mov    rax,QWORD PTR [rcx]
    6502e00b:	lea    rdx,[rsp+0x30]
    6502e010:	mov    QWORD PTR [rdx],rax
    6502e013:	mov    rax,QWORD PTR [rcx+0x8]
    6502e017:	mov    QWORD PTR [rdx+0x8],rax
    6502e01b:	mov    r10,QWORD PTR [rsp+0x30]
    6502e020:	test   r13,r13
    6502e023:	je     0x6502e029
    6502e025:	mov    QWORD PTR [r13+0x0],r14
    6502e029:	test   r14,r14
    6502e02c:	jne    0x6502e071
    6502e02e:	call   0x650202b0
    6502e033:	xor    r9d,r9d
    6502e036:	xor    r8d,r8d
    6502e039:	xor    edx,edx
    6502e03b:	xor    ecx,ecx
    6502e03d:	mov    QWORD PTR [rsp+0x20],0x0
    6502e046:	mov    DWORD PTR [rax],0x16
    6502e04c:	call   0x6501d850
    6502e051:	cmp    BYTE PTR [rsp+0x48],0x0
    6502e056:	je     0x6502e064
    6502e058:	mov    rax,QWORD PTR [rsp+0x40]
    6502e05d:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502e064:	xor    eax,eax
    6502e066:	add    rsp,0x50
    6502e06a:	pop    r14
    6502e06c:	pop    r13
    6502e06e:	pop    r12
    6502e070:	ret    
    6502e071:	test   r12d,r12d
    6502e074:	je     0x6502e082
    6502e076:	cmp    r12d,0x2
    6502e07a:	jl     0x6502e02e
    6502e07c:	cmp    r12d,0x24
    6502e080:	jg     0x6502e02e
    6502e082:	mov    QWORD PTR [rsp+0x70],rbx
    6502e087:	mov    QWORD PTR [rsp+0x80],rsi
    6502e08f:	mov    QWORD PTR [rsp+0x88],rdi
    6502e097:	movzx  edi,BYTE PTR [r14]
    6502e09b:	xor    esi,esi
    6502e09d:	lea    rbx,[r14+0x1]
    6502e0a1:	cmp    DWORD PTR [r10+0x10c],0x1
    6502e0a9:	jle    0x6502e0c5
    6502e0ab:	lea    r8,[rsp+0x30]
    6502e0b0:	movzx  ecx,dil
    6502e0b4:	mov    edx,0x8
    6502e0b9:	call   0x65028ec0
    6502e0be:	mov    r10,QWORD PTR [rsp+0x30]
    6502e0c3:	jmp    0x6502e0d6
    6502e0c5:	mov    rax,QWORD PTR [r10+0x140]
    6502e0cc:	movzx  ecx,dil
    6502e0d0:	mov    al,BYTE PTR [rax+rcx*2]
    6502e0d3:	and    eax,0x8
    6502e0d6:	test   eax,eax
    6502e0d8:	je     0x6502e0e3
    6502e0da:	mov    dil,BYTE PTR [rbx]
    6502e0dd:	add    rbx,0x1
    6502e0e1:	jmp    0x6502e0a1
    6502e0e3:	cmp    dil,0x2d
    6502e0e7:	mov    QWORD PTR [rsp+0x78],rbp
    6502e0ec:	jne    0x6502e101
    6502e0ee:	mov    ebp,DWORD PTR [rsp+0x90]
    6502e0f5:	mov    dil,BYTE PTR [rbx]
    6502e0f8:	or     ebp,0x2
    6502e0fb:	add    rbx,0x1
    6502e0ff:	jmp    0x6502e11e
    6502e101:	cmp    dil,0x2b
    6502e105:	jne    0x6502e117
    6502e107:	mov    dil,BYTE PTR [rbx]
    6502e10a:	mov    ebp,DWORD PTR [rsp+0x90]
    6502e111:	add    rbx,0x1
    6502e115:	jmp    0x6502e11e
    6502e117:	mov    ebp,DWORD PTR [rsp+0x90]
    6502e11e:	test   r12d,r12d
    6502e121:	js     0x6502e292
    6502e127:	cmp    r12d,0x1
    6502e12b:	je     0x6502e292
    6502e131:	cmp    r12d,0x24
    6502e135:	jg     0x6502e292
    6502e13b:	test   r12d,r12d
    6502e13e:	jne    0x6502e169
    6502e140:	cmp    dil,0x30
    6502e144:	je     0x6502e14e
    6502e146:	mov    r12d,0xa
    6502e14c:	jmp    0x6502e188
    6502e14e:	movzx  eax,BYTE PTR [rbx]
    6502e151:	cmp    al,0x78
    6502e153:	je     0x6502e161
    6502e155:	cmp    al,0x58
    6502e157:	je     0x6502e161
    6502e159:	mov    r12d,0x8
    6502e15f:	jmp    0x6502e188
    6502e161:	mov    r12d,0x10
    6502e167:	jmp    0x6502e175
    6502e169:	cmp    r12d,0x10
    6502e16d:	jne    0x6502e188
    6502e16f:	cmp    dil,0x30
    6502e173:	jne    0x6502e188
    6502e175:	movzx  eax,BYTE PTR [rbx]
    6502e178:	cmp    al,0x78
    6502e17a:	je     0x6502e180
    6502e17c:	cmp    al,0x58
    6502e17e:	jne    0x6502e188
    6502e180:	mov    dil,BYTE PTR [rbx+0x1]
    6502e184:	add    rbx,0x2
    6502e188:	mov    r11,QWORD PTR [r10+0x140]
    6502e18f:	xor    edx,edx
    6502e191:	or     eax,0xffffffff
    6502e194:	div    r12d
    6502e197:	mov    r9d,eax
    6502e19a:	data16 xchg ax,ax
    6502e19d:	data16 xchg ax,ax
    6502e1a0:	movzx  ecx,dil
    6502e1a4:	movzx  r8d,WORD PTR [r11+rcx*2]
    6502e1a9:	test   r8b,0x4
    6502e1ad:	je     0x6502e1b8
    6502e1af:	movsx  ecx,dil
    6502e1b3:	sub    ecx,0x30
    6502e1b6:	jmp    0x6502e1d8
    6502e1b8:	test   r8d,0x103
    6502e1bf:	je     0x6502e1f6
    6502e1c1:	lea    eax,[rdi-0x61]
    6502e1c4:	cmp    al,0x19
    6502e1c6:	ja     0x6502e1d1
    6502e1c8:	movsx  ecx,dil
    6502e1cc:	sub    ecx,0x20
    6502e1cf:	jmp    0x6502e1d5
    6502e1d1:	movsx  ecx,dil
    6502e1d5:	add    ecx,0xffffffc9
    6502e1d8:	cmp    ecx,r12d
    6502e1db:	jae    0x6502e1f6
    6502e1dd:	or     ebp,0x8
    6502e1e0:	cmp    esi,r9d
    6502e1e3:	jb     0x6502e20b
    6502e1e5:	cmp    esi,r9d
    6502e1e8:	jne    0x6502e1ee
    6502e1ea:	cmp    ecx,edx
    6502e1ec:	jbe    0x6502e20b
    6502e1ee:	or     ebp,0x4
    6502e1f1:	test   r13,r13
    6502e1f4:	jne    0x6502e211
    6502e1f6:	sub    rbx,0x1
    6502e1fa:	test   bpl,0x8
    6502e1fe:	jne    0x6502e21a
    6502e200:	test   r13,r13
    6502e203:	cmovne rbx,r14
    6502e207:	xor    esi,esi
    6502e209:	jmp    0x6502e26a
    6502e20b:	imul   esi,r12d
    6502e20f:	add    esi,ecx
    6502e211:	mov    dil,BYTE PTR [rbx]
    6502e214:	add    rbx,0x1
    6502e218:	jmp    0x6502e1a0
    6502e21a:	test   bpl,0x4
    6502e21e:	jne    0x6502e241
    6502e220:	test   bpl,0x1
    6502e224:	jne    0x6502e26a
    6502e226:	mov    eax,ebp
    6502e228:	and    eax,0x2
    6502e22b:	je     0x6502e235
    6502e22d:	cmp    esi,0x80000000
    6502e233:	ja     0x6502e241
    6502e235:	test   eax,eax
    6502e237:	jne    0x6502e26a
    6502e239:	cmp    esi,0x7fffffff
    6502e23f:	jbe    0x6502e26a
    6502e241:	call   0x650202b0
    6502e246:	test   bpl,0x1
    6502e24a:	mov    DWORD PTR [rax],0x22
    6502e250:	je     0x6502e257
    6502e252:	or     esi,0xffffffff
    6502e255:	jmp    0x6502e26a
    6502e257:	test   bpl,0x2
    6502e25b:	mov    esi,0x0
    6502e260:	setne  sil
    6502e264:	add    esi,0x7fffffff
    6502e26a:	test   r13,r13
    6502e26d:	je     0x6502e273
    6502e26f:	mov    QWORD PTR [r13+0x0],rbx
    6502e273:	test   bpl,0x2
    6502e277:	je     0x6502e27b
    6502e279:	neg    esi
    6502e27b:	cmp    BYTE PTR [rsp+0x48],0x0
    6502e280:	je     0x6502e28e
    6502e282:	mov    rcx,QWORD PTR [rsp+0x40]
    6502e287:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    6502e28e:	mov    eax,esi
    6502e290:	jmp    0x6502e2b0
    6502e292:	test   r13,r13
    6502e295:	je     0x6502e29b
    6502e297:	mov    QWORD PTR [r13+0x0],r14
    6502e29b:	cmp    BYTE PTR [rsp+0x48],sil
    6502e2a0:	je     0x6502e2ae
    6502e2a2:	mov    rax,QWORD PTR [rsp+0x40]
    6502e2a7:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502e2ae:	xor    eax,eax
    6502e2b0:	mov    rbp,QWORD PTR [rsp+0x78]
    6502e2b5:	mov    rsi,QWORD PTR [rsp+0x80]
    6502e2bd:	mov    rbx,QWORD PTR [rsp+0x70]
    6502e2c2:	mov    rdi,QWORD PTR [rsp+0x88]
    6502e2ca:	add    rsp,0x50
    6502e2ce:	pop    r14
    6502e2d0:	pop    r13
    6502e2d2:	pop    r12
    6502e2d4:	ret    
    6502e2d5:	int3   
    6502e2d6:	int3   
    6502e2d7:	int3   
    6502e2d8:	int3   
    6502e2d9:	int3   
    6502e2da:	int3   
    6502e2db:	int3   
    6502e2dc:	int3   
    6502e2dd:	int3   
    6502e2de:	int3   
    6502e2df:	int3   
    6502e2e0:	sub    rsp,0x38
    6502e2e4:	cmp    DWORD PTR [rip+0x15f95],0x0        # 0x65044280
    6502e2eb:	mov    r9d,r8d
    6502e2ee:	mov    r8,rdx
    6502e2f1:	mov    rdx,rcx
    6502e2f4:	mov    DWORD PTR [rsp+0x20],0x0
    6502e2fc:	jne    0x6502e30f
    6502e2fe:	lea    rcx,[rip+0x146ab]        # 0x650429b0
    6502e305:	call   0x6502df50
    6502e30a:	add    rsp,0x38
    6502e30e:	ret    
    6502e30f:	xor    ecx,ecx
    6502e311:	call   0x6502df50
    6502e316:	add    rsp,0x38
    6502e31a:	ret    
    6502e31b:	int3   
    6502e31c:	int3   
    6502e31d:	int3   
    6502e31e:	int3   
    6502e31f:	int3   
    6502e320:	sub    rsp,0x48
    6502e324:	xor    eax,eax
    6502e326:	lea    rcx,[rip+0x8b63]        # 0x65036e90
    6502e32d:	xor    r9d,r9d
    6502e330:	mov    QWORD PTR [rsp+0x30],rax
    6502e335:	mov    DWORD PTR [rsp+0x28],eax
    6502e339:	lea    r8d,[rax+0x3]
    6502e33d:	mov    edx,0x40000000
    6502e342:	mov    DWORD PTR [rsp+0x20],0x3
    6502e34a:	call   QWORD PTR [rip+0x5df0]        # 0x65034140
    6502e350:	mov    QWORD PTR [rip+0x152a1],rax        # 0x650435f8
    6502e357:	add    rsp,0x48
    6502e35b:	ret    
    6502e35c:	int3   
    6502e35d:	int3   
    6502e35e:	int3   
    6502e35f:	int3   
    6502e360:	sub    rsp,0x28
    6502e364:	mov    rcx,QWORD PTR [rip+0x1528d]        # 0x650435f8
    6502e36b:	cmp    rcx,0xffffffffffffffff
    6502e36f:	je     0x6502e37d
    6502e371:	cmp    rcx,0xfffffffffffffffe
    6502e375:	je     0x6502e37d
    6502e377:	call   QWORD PTR [rip+0x5cf3]        # 0x65034070
    6502e37d:	mov    rcx,QWORD PTR [rip+0x1526c]        # 0x650435f0
    6502e384:	cmp    rcx,0xffffffffffffffff
    6502e388:	je     0x6502e396
    6502e38a:	cmp    rcx,0xfffffffffffffffe
    6502e38e:	je     0x6502e396
    6502e390:	call   QWORD PTR [rip+0x5cda]        # 0x65034070
    6502e396:	add    rsp,0x28
    6502e39a:	ret    
    6502e39b:	int3   
    6502e39c:	int3   
    6502e39d:	int3   
    6502e39e:	int3   
    6502e39f:	int3   
    6502e3a0:	mov    QWORD PTR [rsp+0x8],rbx
    6502e3a5:	push   rsi
    6502e3a6:	sub    rsp,0x30
    6502e3aa:	or     esi,0xffffffff
    6502e3ad:	test   rcx,rcx
    6502e3b0:	mov    rbx,rcx
    6502e3b3:	jne    0x6502e3e1
    6502e3b5:	call   0x650202b0
    6502e3ba:	xor    r9d,r9d
    6502e3bd:	xor    r8d,r8d
    6502e3c0:	xor    edx,edx
    6502e3c2:	xor    ecx,ecx
    6502e3c4:	mov    QWORD PTR [rsp+0x20],rbx
    6502e3c9:	mov    DWORD PTR [rax],0x16
    6502e3cf:	call   0x6501d850
    6502e3d4:	or     eax,esi
    6502e3d6:	mov    rbx,QWORD PTR [rsp+0x40]
    6502e3db:	add    rsp,0x30
    6502e3df:	pop    rsi
    6502e3e0:	ret    
    6502e3e1:	test   BYTE PTR [rcx+0x18],0x83
    6502e3e5:	je     0x6502e424
    6502e3e7:	call   0x6502daf0
    6502e3ec:	mov    rcx,rbx
    6502e3ef:	mov    esi,eax
    6502e3f1:	call   0x6502e840
    6502e3f6:	mov    rcx,rbx
    6502e3f9:	call   0x6502b620
    6502e3fe:	mov    ecx,eax
    6502e400:	call   0x6502e710
    6502e405:	test   eax,eax
    6502e407:	jns    0x6502e40e
    6502e409:	or     esi,0xffffffff
    6502e40c:	jmp    0x6502e424
    6502e40e:	mov    rcx,QWORD PTR [rbx+0x28]
    6502e412:	test   rcx,rcx
    6502e415:	je     0x6502e424
    6502e417:	call   0x6501fa90
    6502e41c:	mov    QWORD PTR [rbx+0x28],0x0
    6502e424:	mov    DWORD PTR [rbx+0x18],0x0
    6502e42b:	mov    rbx,QWORD PTR [rsp+0x40]
    6502e430:	mov    eax,esi
    6502e432:	add    rsp,0x30
    6502e436:	pop    rsi
    6502e437:	ret    
    6502e438:	int3   
    6502e439:	int3   
    6502e43a:	int3   
    6502e43b:	int3   
    6502e43c:	int3   
    6502e43d:	int3   
    6502e43e:	int3   
    6502e43f:	int3   
    6502e440:	mov    QWORD PTR [rsp+0x10],rbx
    6502e445:	mov    QWORD PTR [rsp+0x8],rcx
    6502e44a:	push   rdi
    6502e44b:	sub    rsp,0x30
    6502e44f:	mov    rbx,rcx
    6502e452:	or     edi,0xffffffff
    6502e455:	xor    eax,eax
    6502e457:	test   rcx,rcx
    6502e45a:	setne  al
    6502e45d:	test   eax,eax
    6502e45f:	jne    0x6502e488
    6502e461:	call   0x650202b0
    6502e466:	mov    DWORD PTR [rax],0x16
    6502e46c:	mov    QWORD PTR [rsp+0x20],0x0
    6502e475:	xor    r9d,r9d
    6502e478:	xor    r8d,r8d
    6502e47b:	xor    edx,edx
    6502e47d:	xor    ecx,ecx
    6502e47f:	call   0x6501d850
    6502e484:	mov    eax,edi
    6502e486:	jmp    0x6502e4b1
    6502e488:	test   BYTE PTR [rcx+0x18],0x40
    6502e48c:	je     0x6502e497
    6502e48e:	mov    DWORD PTR [rcx+0x18],0x0
    6502e495:	jmp    0x6502e4af
    6502e497:	call   0x6502b500
    6502e49c:	nop
    6502e49d:	mov    rcx,rbx
    6502e4a0:	call   0x6502e3a0
    6502e4a5:	mov    edi,eax
    6502e4a7:	mov    rcx,rbx
    6502e4aa:	call   0x6502b5b0
    6502e4af:	mov    eax,edi
    6502e4b1:	mov    rbx,QWORD PTR [rsp+0x48]
    6502e4b6:	add    rsp,0x30
    6502e4ba:	pop    rdi
    6502e4bb:	ret    
    6502e4bc:	int3   
    6502e4bd:	int3   
    6502e4be:	int3   
    6502e4bf:	int3   
    6502e4c0:	rex push rbp
    6502e4c2:	sub    rsp,0x30
    6502e4c6:	mov    rbp,rdx
    6502e4c9:	mov    rcx,QWORD PTR [rbp+0x40]
    6502e4cd:	call   0x6502b5b0
    6502e4d2:	add    rsp,0x30
    6502e4d6:	pop    rbp
    6502e4d7:	ret    
    6502e4d8:	int3   
    6502e4d9:	int3   
    6502e4da:	int3   
    6502e4db:	int3   
    6502e4dc:	int3   
    6502e4dd:	int3   
    6502e4de:	int3   
    6502e4df:	int3   
    6502e4e0:	mov    QWORD PTR [rsp+0x18],rbx
    6502e4e5:	mov    DWORD PTR [rsp+0x8],ecx
    6502e4e9:	push   rsi
    6502e4ea:	push   rdi
    6502e4eb:	push   r12
    6502e4ed:	sub    rsp,0x30
    6502e4f1:	movsxd rbx,ecx
    6502e4f4:	cmp    ebx,0xfffffffe
    6502e4f7:	jne    0x6502e50c
    6502e4f9:	call   0x650202b0
    6502e4fe:	mov    DWORD PTR [rax],0x9
    6502e504:	or     eax,0xffffffff
    6502e507:	jmp    0x6502e5e8
    6502e50c:	test   ecx,ecx
    6502e50e:	js     0x6502e5c4
    6502e514:	cmp    ebx,DWORD PTR [rip+0x19a4a]        # 0x65047f64
    6502e51a:	jae    0x6502e5c4
    6502e520:	mov    rsi,rbx
    6502e523:	sar    rsi,0x5
    6502e527:	lea    r12,[rip+0x19a52]        # 0x65047f80
    6502e52e:	mov    dil,bl
    6502e531:	and    edi,0x1f
    6502e534:	imul   rdi,rdi,0x58
    6502e538:	mov    rax,QWORD PTR [r12+rsi*8]
    6502e53c:	mov    cl,BYTE PTR [rax+rdi*1+0x8]
    6502e540:	and    ecx,0x1
    6502e543:	jne    0x6502e56b
    6502e545:	call   0x650202b0
    6502e54a:	mov    DWORD PTR [rax],0x9
    6502e550:	xor    edi,edi
    6502e552:	mov    QWORD PTR [rsp+0x20],rdi
    6502e557:	xor    r9d,r9d
    6502e55a:	xor    r8d,r8d
    6502e55d:	xor    edx,edx
    6502e55f:	xor    ecx,ecx
    6502e561:	call   0x6501d850
    6502e566:	or     eax,0xffffffff
    6502e569:	jmp    0x6502e5e8
    6502e56b:	mov    ecx,ebx
    6502e56d:	call   0x6502d7d0
    6502e572:	nop
    6502e573:	mov    rax,QWORD PTR [r12+rsi*8]
    6502e577:	test   BYTE PTR [rax+rdi*1+0x8],0x1
    6502e57c:	je     0x6502e5ab
    6502e57e:	mov    ecx,ebx
    6502e580:	call   0x6502d730
    6502e585:	mov    rcx,rax
    6502e588:	call   QWORD PTR [rip+0x5baa]        # 0x65034138
    6502e58e:	test   eax,eax
    6502e590:	jne    0x6502e5a7
    6502e592:	call   QWORD PTR [rip+0x5ae0]        # 0x65034078
    6502e598:	mov    edi,eax
    6502e59a:	test   eax,eax
    6502e59c:	je     0x6502e5b9
    6502e59e:	call   0x650202e0
    6502e5a3:	mov    DWORD PTR [rax],edi
    6502e5a5:	jmp    0x6502e5ab
    6502e5a7:	xor    edi,edi
    6502e5a9:	jmp    0x6502e5b9
    6502e5ab:	call   0x650202b0
    6502e5b0:	mov    DWORD PTR [rax],0x9
    6502e5b6:	or     edi,0xffffffff
    6502e5b9:	mov    ecx,ebx
    6502e5bb:	call   0x6502d8a0
    6502e5c0:	mov    eax,edi
    6502e5c2:	jmp    0x6502e5e8
    6502e5c4:	call   0x650202b0
    6502e5c9:	mov    DWORD PTR [rax],0x9
    6502e5cf:	xor    edi,edi
    6502e5d1:	mov    QWORD PTR [rsp+0x20],rdi
    6502e5d6:	xor    r9d,r9d
    6502e5d9:	xor    r8d,r8d
    6502e5dc:	xor    edx,edx
    6502e5de:	xor    ecx,ecx
    6502e5e0:	call   0x6501d850
    6502e5e5:	or     eax,0xffffffff
    6502e5e8:	mov    rbx,QWORD PTR [rsp+0x60]
    6502e5ed:	add    rsp,0x30
    6502e5f1:	pop    r12
    6502e5f3:	pop    rdi
    6502e5f4:	pop    rsi
    6502e5f5:	ret    
    6502e5f6:	int3   
    6502e5f7:	int3   
    6502e5f8:	int3   
    6502e5f9:	int3   
    6502e5fa:	int3   
    6502e5fb:	int3   
    6502e5fc:	int3   
    6502e5fd:	int3   
    6502e5fe:	int3   
    6502e5ff:	int3   
    6502e600:	rex push rbp
    6502e602:	sub    rsp,0x30
    6502e606:	mov    rbp,rdx
    6502e609:	mov    ecx,DWORD PTR [rbp+0x50]
    6502e60c:	call   0x6502d8a0
    6502e611:	add    rsp,0x30
    6502e615:	pop    rbp
    6502e616:	ret    
    6502e617:	int3   
    6502e618:	int3   
    6502e619:	int3   
    6502e61a:	int3   
    6502e61b:	int3   
    6502e61c:	int3   
    6502e61d:	int3   
    6502e61e:	int3   
    6502e61f:	int3   
    6502e620:	xor    eax,eax
    6502e622:	test   rdx,rdx
    6502e625:	je     0x6502e639
    6502e627:	cmp    BYTE PTR [rcx],0x0
    6502e62a:	je     0x6502e639
    6502e62c:	add    rax,0x1
    6502e630:	add    rcx,0x1
    6502e634:	cmp    rax,rdx
    6502e637:	jb     0x6502e627
    6502e639:	ret    0x0
    6502e63c:	int3   
    6502e63d:	int3   
    6502e63e:	int3   
    6502e63f:	int3   
    6502e640:	mov    QWORD PTR [rsp+0x8],rbx
    6502e645:	push   rdi
    6502e646:	sub    rsp,0x20
    6502e64a:	movsxd rdi,ecx
    6502e64d:	mov    ecx,edi
    6502e64f:	call   0x6502d730
    6502e654:	cmp    rax,0xffffffffffffffff
    6502e658:	je     0x6502e6bd
    6502e65a:	cmp    edi,0x1
    6502e65d:	jne    0x6502e671
    6502e65f:	mov    rax,QWORD PTR [rip+0x1991a]        # 0x65047f80
    6502e666:	test   BYTE PTR [rax+0xb8],dil
    6502e66d:	jne    0x6502e683
    6502e66f:	jmp    0x6502e69f
    6502e671:	cmp    edi,0x2
    6502e674:	jne    0x6502e69f
    6502e676:	mov    rax,QWORD PTR [rip+0x19903]        # 0x65047f80
    6502e67d:	test   BYTE PTR [rax+0x60],0x1
    6502e681:	je     0x6502e69f
    6502e683:	mov    ecx,0x2
    6502e688:	call   0x6502d730
    6502e68d:	mov    ecx,0x1
    6502e692:	mov    rbx,rax
    6502e695:	call   0x6502d730
    6502e69a:	cmp    rax,rbx
    6502e69d:	je     0x6502e6bd
    6502e69f:	mov    ecx,edi
    6502e6a1:	call   0x6502d730
    6502e6a6:	mov    rcx,rax
    6502e6a9:	call   QWORD PTR [rip+0x59c1]        # 0x65034070
    6502e6af:	test   eax,eax
    6502e6b1:	jne    0x6502e6bd
    6502e6b3:	call   QWORD PTR [rip+0x59bf]        # 0x65034078
    6502e6b9:	mov    ebx,eax
    6502e6bb:	jmp    0x6502e6bf
    6502e6bd:	xor    ebx,ebx
    6502e6bf:	mov    ecx,edi
    6502e6c1:	call   0x6502d660
    6502e6c6:	mov    r11,rdi
    6502e6c9:	mov    rax,rdi
    6502e6cc:	sar    rax,0x5
    6502e6d0:	and    r11d,0x1f
    6502e6d4:	lea    rcx,[rip+0x198a5]        # 0x65047f80
    6502e6db:	mov    rax,QWORD PTR [rcx+rax*8]
    6502e6df:	imul   r11,r11,0x58
    6502e6e3:	test   ebx,ebx
    6502e6e5:	mov    BYTE PTR [rax+r11*1+0x8],0x0
    6502e6eb:	je     0x6502e702
    6502e6ed:	mov    ecx,ebx
    6502e6ef:	call   0x65020310
    6502e6f4:	or     eax,0xffffffff
    6502e6f7:	mov    rbx,QWORD PTR [rsp+0x30]
    6502e6fc:	add    rsp,0x20
    6502e700:	pop    rdi
    6502e701:	ret    
    6502e702:	xor    eax,eax
    6502e704:	mov    rbx,QWORD PTR [rsp+0x30]
    6502e709:	add    rsp,0x20
    6502e70d:	pop    rdi
    6502e70e:	ret    
    6502e70f:	int3   
    6502e710:	mov    QWORD PTR [rsp+0x18],rbx
    6502e715:	mov    DWORD PTR [rsp+0x8],ecx
    6502e719:	push   rsi
    6502e71a:	push   rdi
    6502e71b:	push   r12
    6502e71d:	sub    rsp,0x30
    6502e721:	movsxd rbx,ecx
    6502e724:	cmp    ebx,0xfffffffe
    6502e727:	jne    0x6502e745
    6502e729:	call   0x650202e0
    6502e72e:	xor    ebx,ebx
    6502e730:	mov    DWORD PTR [rax],ebx
    6502e732:	call   0x650202b0
    6502e737:	mov    DWORD PTR [rax],0x9
    6502e73d:	or     eax,0xffffffff
    6502e740:	jmp    0x6502e80d
    6502e745:	test   ecx,ecx
    6502e747:	js     0x6502e7e2
    6502e74d:	cmp    ebx,DWORD PTR [rip+0x19811]        # 0x65047f64
    6502e753:	jae    0x6502e7e2
    6502e759:	mov    rsi,rbx
    6502e75c:	sar    rsi,0x5
    6502e760:	lea    r12,[rip+0x19819]        # 0x65047f80
    6502e767:	mov    dil,bl
    6502e76a:	and    edi,0x1f
    6502e76d:	imul   rdi,rdi,0x58
    6502e771:	mov    rax,QWORD PTR [r12+rsi*8]
    6502e775:	mov    cl,BYTE PTR [rax+rdi*1+0x8]
    6502e779:	and    ecx,0x1
    6502e77c:	jne    0x6502e7ab
    6502e77e:	call   0x650202e0
    6502e783:	xor    ebx,ebx
    6502e785:	mov    DWORD PTR [rax],ebx
    6502e787:	call   0x650202b0
    6502e78c:	mov    DWORD PTR [rax],0x9
    6502e792:	mov    QWORD PTR [rsp+0x20],rbx
    6502e797:	xor    r9d,r9d
    6502e79a:	xor    r8d,r8d
    6502e79d:	xor    edx,edx
    6502e79f:	xor    ecx,ecx
    6502e7a1:	call   0x6501d850
    6502e7a6:	or     eax,0xffffffff
    6502e7a9:	jmp    0x6502e80d
    6502e7ab:	mov    ecx,ebx
    6502e7ad:	call   0x6502d7d0
    6502e7b2:	nop
    6502e7b3:	mov    rax,QWORD PTR [r12+rsi*8]
    6502e7b7:	test   BYTE PTR [rax+rdi*1+0x8],0x1
    6502e7bc:	je     0x6502e7c9
    6502e7be:	mov    ecx,ebx
    6502e7c0:	call   0x6502e640
    6502e7c5:	mov    edi,eax
    6502e7c7:	jmp    0x6502e7d7
    6502e7c9:	call   0x650202b0
    6502e7ce:	mov    DWORD PTR [rax],0x9
    6502e7d4:	or     edi,0xffffffff
    6502e7d7:	mov    ecx,ebx
    6502e7d9:	call   0x6502d8a0
    6502e7de:	mov    eax,edi
    6502e7e0:	jmp    0x6502e80d
    6502e7e2:	call   0x650202e0
    6502e7e7:	xor    ebx,ebx
    6502e7e9:	mov    DWORD PTR [rax],ebx
    6502e7eb:	call   0x650202b0
    6502e7f0:	mov    DWORD PTR [rax],0x9
    6502e7f6:	mov    QWORD PTR [rsp+0x20],rbx
    6502e7fb:	xor    r9d,r9d
    6502e7fe:	xor    r8d,r8d
    6502e801:	xor    edx,edx
    6502e803:	xor    ecx,ecx
    6502e805:	call   0x6501d850
    6502e80a:	or     eax,0xffffffff
    6502e80d:	mov    rbx,QWORD PTR [rsp+0x60]
    6502e812:	add    rsp,0x30
    6502e816:	pop    r12
    6502e818:	pop    rdi
    6502e819:	pop    rsi
    6502e81a:	ret    
    6502e81b:	int3   
    6502e81c:	int3   
    6502e81d:	int3   
    6502e81e:	int3   
    6502e81f:	int3   
    6502e820:	rex push rbp
    6502e822:	sub    rsp,0x30
    6502e826:	mov    rbp,rdx
    6502e829:	mov    ecx,DWORD PTR [rbp+0x50]
    6502e82c:	call   0x6502d8a0
    6502e831:	add    rsp,0x30
    6502e835:	pop    rbp
    6502e836:	ret    
    6502e837:	int3   
    6502e838:	int3   
    6502e839:	int3   
    6502e83a:	int3   
    6502e83b:	int3   
    6502e83c:	int3   
    6502e83d:	int3   
    6502e83e:	int3   
    6502e83f:	int3   
    6502e840:	rex push rbx
    6502e842:	sub    rsp,0x20
    6502e846:	mov    eax,DWORD PTR [rcx+0x18]
    6502e849:	mov    rbx,rcx
    6502e84c:	test   al,0x83
    6502e84e:	je     0x6502e870
    6502e850:	test   al,0x8
    6502e852:	je     0x6502e870
    6502e854:	mov    rcx,QWORD PTR [rcx+0x10]
    6502e858:	call   0x6501fa90
    6502e85d:	and    DWORD PTR [rbx+0x18],0xfffffbf7
    6502e864:	xor    eax,eax
    6502e866:	mov    QWORD PTR [rbx],rax
    6502e869:	mov    QWORD PTR [rbx+0x10],rax
    6502e86d:	mov    DWORD PTR [rbx+0x8],eax
    6502e870:	add    rsp,0x20
    6502e874:	pop    rbx
    6502e875:	ret    
    6502e876:	int3   
    6502e877:	int3   
    6502e878:	int3   
    6502e879:	int3   
    6502e87a:	int3   
    6502e87b:	int3   
    6502e87c:	int3   
    6502e87d:	int3   
    6502e87e:	int3   
    6502e87f:	int3   
    6502e880:	mov    QWORD PTR [rsp+0x8],rcx
    6502e885:	push   rbp
    6502e886:	push   rdi
    6502e887:	push   r12
    6502e889:	sub    rsp,0x50
    6502e88d:	lea    rbp,[rsp+0x30]
    6502e892:	mov    QWORD PTR [rbp+0x48],rbx
    6502e896:	mov    QWORD PTR [rbp+0x50],rsi
    6502e89a:	mov    rax,QWORD PTR [rip+0x1387f]        # 0x65042120
    6502e8a1:	xor    rax,rbp
    6502e8a4:	mov    QWORD PTR [rbp+0x10],rax
    6502e8a8:	mov    rsi,rcx
    6502e8ab:	test   rcx,rcx
    6502e8ae:	jne    0x6502e8b7
    6502e8b0:	xor    eax,eax
    6502e8b2:	jmp    0x6502ea10
    6502e8b7:	call   QWORD PTR [rip+0x57db]        # 0x65034098
    6502e8bd:	lea    r12d,[rax+0x1]
    6502e8c1:	mov    DWORD PTR [rbp+0x4],r12d
    6502e8c5:	xor    ebx,ebx
    6502e8c7:	mov    DWORD PTR [rsp+0x28],ebx
    6502e8cb:	mov    QWORD PTR [rsp+0x20],rbx
    6502e8d0:	mov    r9d,r12d
    6502e8d3:	mov    r8,rsi
    6502e8d6:	xor    edx,edx
    6502e8d8:	xor    ecx,ecx
    6502e8da:	call   QWORD PTR [rip+0x5758]        # 0x65034038
    6502e8e0:	movsxd rdi,eax
    6502e8e3:	mov    DWORD PTR [rbp+0x0],edi
    6502e8e6:	test   eax,eax
    6502e8e8:	jne    0x6502e918
    6502e8ea:	call   QWORD PTR [rip+0x5788]        # 0x65034078
    6502e8f0:	test   eax,eax
    6502e8f2:	jg     0x6502e8fc
    6502e8f4:	call   QWORD PTR [rip+0x577e]        # 0x65034078
    6502e8fa:	jmp    0x6502e90a
    6502e8fc:	call   QWORD PTR [rip+0x5776]        # 0x65034078
    6502e902:	movzx  eax,ax
    6502e905:	or     eax,0x80070000
    6502e90a:	mov    ecx,eax
    6502e90c:	call   0x6502ea30
    6502e911:	xor    eax,eax
    6502e913:	jmp    0x6502ea10
    6502e918:	cmp    edi,0x1000
    6502e91e:	jge    0x6502e94f
    6502e920:	mov    rax,rdi
    6502e923:	add    rax,rax
    6502e926:	lea    rcx,[rax+0xf]
    6502e92a:	cmp    rcx,rax
    6502e92d:	ja     0x6502e939
    6502e92f:	movabs rcx,0xffffffffffffff0
    6502e939:	and    rcx,0xfffffffffffffff0
    6502e93d:	mov    rax,rcx
    6502e940:	call   0x650330c0
    6502e945:	sub    rsp,rcx
    6502e948:	lea    rbx,[rsp+0x30]
    6502e94d:	jmp    0x6502e95d
    6502e94f:	mov    rcx,rdi
    6502e952:	add    rcx,rcx
    6502e955:	call   0x6501fae0
    6502e95a:	mov    rbx,rax
    6502e95d:	mov    QWORD PTR [rbp+0x8],rbx
    6502e961:	jmp    0x6502e974
    6502e963:	xor    ebx,ebx
    6502e965:	mov    QWORD PTR [rbp+0x8],rbx
    6502e969:	mov    rsi,QWORD PTR [rbp+0x40]
    6502e96d:	mov    r12d,DWORD PTR [rbp+0x4]
    6502e971:	mov    edi,DWORD PTR [rbp+0x0]
    6502e974:	test   rbx,rbx
    6502e977:	jne    0x6502e98a
    6502e979:	mov    ecx,0x8007000e
    6502e97e:	call   0x6502ea30
    6502e983:	xor    eax,eax
    6502e985:	jmp    0x6502ea10
    6502e98a:	mov    DWORD PTR [rsp+0x28],edi
    6502e98e:	mov    QWORD PTR [rsp+0x20],rbx
    6502e993:	mov    r9d,r12d
    6502e996:	mov    r8,rsi
    6502e999:	xor    edx,edx
    6502e99b:	xor    ecx,ecx
    6502e99d:	call   QWORD PTR [rip+0x5695]        # 0x65034038
    6502e9a3:	test   eax,eax
    6502e9a5:	jne    0x6502e9e2
    6502e9a7:	cmp    edi,0x1000
    6502e9ad:	jl     0x6502e9b7
    6502e9af:	mov    rcx,rbx
    6502e9b2:	call   0x6501fa90
    6502e9b7:	call   QWORD PTR [rip+0x56bb]        # 0x65034078
    6502e9bd:	test   eax,eax
    6502e9bf:	jg     0x6502e9c9
    6502e9c1:	call   QWORD PTR [rip+0x56b1]        # 0x65034078
    6502e9c7:	jmp    0x6502e9d7
    6502e9c9:	call   QWORD PTR [rip+0x56a9]        # 0x65034078
    6502e9cf:	movzx  eax,ax
    6502e9d2:	or     eax,0x80070000
    6502e9d7:	mov    ecx,eax
    6502e9d9:	call   0x6502ea30
    6502e9de:	xor    eax,eax
    6502e9e0:	jmp    0x6502ea10
    6502e9e2:	mov    rcx,rbx
    6502e9e5:	call   QWORD PTR [rip+0x5955]        # 0x65034340
    6502e9eb:	mov    rsi,rax
    6502e9ee:	cmp    edi,0x1000
    6502e9f4:	jl     0x6502e9fe
    6502e9f6:	mov    rcx,rbx
    6502e9f9:	call   0x6501fa90
    6502e9fe:	test   rsi,rsi
    6502ea01:	jne    0x6502ea0d
    6502ea03:	mov    ecx,0x8007000e
    6502ea08:	call   0x6502ea30
    6502ea0d:	mov    rax,rsi
    6502ea10:	mov    rcx,QWORD PTR [rbp+0x10]
    6502ea14:	xor    rcx,rbp
    6502ea17:	call   0x6501e4e0
    6502ea1c:	mov    rbx,QWORD PTR [rbp+0x48]
    6502ea20:	mov    rsi,QWORD PTR [rbp+0x50]
    6502ea24:	lea    rsp,[rbp+0x20]
    6502ea28:	pop    r12
    6502ea2a:	pop    rdi
    6502ea2b:	pop    rbp
    6502ea2c:	ret    
    6502ea2d:	int3   
    6502ea2e:	int3   
    6502ea2f:	int3   
    6502ea30:	xor    edx,edx
    6502ea32:	rex.W jmp QWORD PTR [rip+0x14bdf]        # 0x65043618
    6502ea39:	int3   
    6502ea3a:	int3   
    6502ea3b:	int3   
    6502ea3c:	int3   
    6502ea3d:	int3   
    6502ea3e:	int3   
    6502ea3f:	int3   
    6502ea40:	rex push rbx
    6502ea42:	sub    rsp,0x20
    6502ea46:	lea    rax,[rip+0x8453]        # 0x65036ea0
    6502ea4d:	mov    rbx,rcx
    6502ea50:	mov    QWORD PTR [rcx],rax
    6502ea53:	mov    rcx,QWORD PTR [rcx+0x10]
    6502ea57:	test   rcx,rcx
    6502ea5a:	je     0x6502ea62
    6502ea5c:	mov    rax,QWORD PTR [rcx]
    6502ea5f:	call   QWORD PTR [rax+0x10]
    6502ea62:	cmp    QWORD PTR [rbx+0x18],0x0
    6502ea67:	je     0x6502ea83
    6502ea69:	call   QWORD PTR [rip+0x5779]        # 0x650341e8
    6502ea6f:	test   rax,rax
    6502ea72:	je     0x6502ea83
    6502ea74:	mov    r8,QWORD PTR [rbx+0x18]
    6502ea78:	xor    edx,edx
    6502ea7a:	mov    rcx,rax
    6502ea7d:	call   QWORD PTR [rip+0x574d]        # 0x650341d0
    6502ea83:	add    rsp,0x20
    6502ea87:	pop    rbx
    6502ea88:	ret    
    6502ea89:	int3   
    6502ea8a:	int3   
    6502ea8b:	int3   
    6502ea8c:	int3   
    6502ea8d:	int3   
    6502ea8e:	int3   
    6502ea8f:	int3   
    6502ea90:	sub    rsp,0x48
    6502ea94:	lea    rax,[rip+0x8405]        # 0x65036ea0
    6502ea9b:	mov    DWORD PTR [rsp+0x28],ecx
    6502ea9f:	mov    QWORD PTR [rsp+0x30],rdx
    6502eaa4:	lea    rdx,[rip+0x1257d]        # 0x65041028
    6502eaab:	lea    rcx,[rsp+0x20]
    6502eab0:	mov    QWORD PTR [rsp+0x38],0x0
    6502eab9:	mov    QWORD PTR [rsp+0x20],rax
    6502eabe:	call   0x6501daf0
    6502eac3:	int3   
    6502eac4:	int3   
    6502eac5:	int3   
    6502eac6:	int3   
    6502eac7:	int3   
    6502eac8:	int3   
    6502eac9:	int3   
    6502eaca:	int3   
    6502eacb:	int3   
    6502eacc:	int3   
    6502eacd:	int3   
    6502eace:	int3   
    6502eacf:	int3   
    6502ead0:	rex push rbx
    6502ead2:	sub    rsp,0x20
    6502ead6:	lea    rax,[rip+0x83c3]        # 0x65036ea0
    6502eadd:	mov    rbx,rcx
    6502eae0:	mov    QWORD PTR [rcx],rax
    6502eae3:	mov    eax,DWORD PTR [rdx+0x8]
    6502eae6:	mov    DWORD PTR [rcx+0x8],eax
    6502eae9:	mov    rax,QWORD PTR [rdx+0x10]
    6502eaed:	mov    QWORD PTR [rcx+0x18],0x0
    6502eaf5:	test   rax,rax
    6502eaf8:	mov    QWORD PTR [rcx+0x10],rax
    6502eafc:	mov    rcx,rax
    6502eaff:	je     0x6502eb07
    6502eb01:	mov    rax,QWORD PTR [rax]
    6502eb04:	call   QWORD PTR [rax+0x8]
    6502eb07:	mov    rax,rbx
    6502eb0a:	add    rsp,0x20
    6502eb0e:	pop    rbx
    6502eb0f:	ret    
    6502eb10:	mov    QWORD PTR [rsp+0x8],rbx
    6502eb15:	push   rdi
    6502eb16:	sub    rsp,0x20
    6502eb1a:	lea    rax,[rip+0x837f]        # 0x65036ea0
    6502eb21:	mov    rbx,rcx
    6502eb24:	mov    edi,edx
    6502eb26:	mov    QWORD PTR [rcx],rax
    6502eb29:	mov    rcx,QWORD PTR [rcx+0x10]
    6502eb2d:	test   rcx,rcx
    6502eb30:	je     0x6502eb38
    6502eb32:	mov    rax,QWORD PTR [rcx]
    6502eb35:	call   QWORD PTR [rax+0x10]
    6502eb38:	cmp    QWORD PTR [rbx+0x18],0x0
    6502eb3d:	je     0x6502eb59
    6502eb3f:	call   QWORD PTR [rip+0x56a3]        # 0x650341e8
    6502eb45:	test   rax,rax
    6502eb48:	je     0x6502eb59
    6502eb4a:	mov    r8,QWORD PTR [rbx+0x18]
    6502eb4e:	xor    edx,edx
    6502eb50:	mov    rcx,rax
    6502eb53:	call   QWORD PTR [rip+0x5677]        # 0x650341d0
    6502eb59:	test   dil,0x1
    6502eb5d:	je     0x6502eb67
    6502eb5f:	mov    rcx,rbx
    6502eb62:	call   0x6501d190
    6502eb67:	mov    rax,rbx
    6502eb6a:	mov    rbx,QWORD PTR [rsp+0x30]
    6502eb6f:	add    rsp,0x20
    6502eb73:	pop    rdi
    6502eb74:	ret    
    6502eb75:	int3   
    6502eb76:	jmp    QWORD PTR [rip+0x569c]        # 0x65034218
    6502eb7c:	jmp    QWORD PTR [rip+0x569e]        # 0x65034220
    6502eb82:	jmp    QWORD PTR [rip+0x56a0]        # 0x65034228
    6502eb88:	jmp    QWORD PTR [rip+0x56ea]        # 0x65034278
    6502eb8e:	int3   
    6502eb8f:	int3   
    6502eb90:	rex push rbp
    6502eb92:	push   r12
    6502eb94:	push   r13
    6502eb96:	sub    rsp,0x60
    6502eb9a:	lea    rbp,[rsp+0x50]
    6502eb9f:	mov    QWORD PTR [rbp+0x30],rbx
    6502eba3:	mov    QWORD PTR [rbp+0x38],rsi
    6502eba7:	mov    QWORD PTR [rbp+0x40],rdi
    6502ebab:	mov    rax,QWORD PTR [rip+0x1356e]        # 0x65042120
    6502ebb2:	xor    rax,rbp
    6502ebb5:	mov    QWORD PTR [rbp+0x0],rax
    6502ebb9:	test   rcx,rcx
    6502ebbc:	mov    r12,r8
    6502ebbf:	mov    rsi,rdx
    6502ebc2:	mov    rbx,rcx
    6502ebc5:	je     0x6502ebd4
    6502ebc7:	call   0x6502e620
    6502ebcc:	cmp    rax,rsi
    6502ebcf:	jb     0x6502ebfd
    6502ebd1:	mov    BYTE PTR [rbx],0x0
    6502ebd4:	call   0x650202b0
    6502ebd9:	xor    edi,edi
    6502ebdb:	xor    r9d,r9d
    6502ebde:	xor    r8d,r8d
    6502ebe1:	xor    edx,edx
    6502ebe3:	xor    ecx,ecx
    6502ebe5:	mov    DWORD PTR [rax],0x16
    6502ebeb:	mov    QWORD PTR [rsp+0x20],rdi
    6502ebf0:	call   0x6501d850
    6502ebf5:	lea    eax,[rdi+0x16]
    6502ebf8:	jmp    0x6502edad
    6502ebfd:	mov    rax,QWORD PTR [r12]
    6502ec01:	mov    edx,DWORD PTR [rax+0x14]
    6502ec04:	test   edx,edx
    6502ec06:	jne    0x6502ec2f
    6502ec08:	cmp    BYTE PTR [rbx],dl
    6502ec0a:	je     0x6502ec28
    6502ec0c:	data16 data16 xchg ax,ax
    6502ec10:	movzx  eax,BYTE PTR [rbx]
    6502ec13:	cmp    al,0x41
    6502ec15:	jl     0x6502ec1f
    6502ec17:	cmp    al,0x5a
    6502ec19:	jg     0x6502ec1f
    6502ec1b:	add    al,0x20
    6502ec1d:	mov    BYTE PTR [rbx],al
    6502ec1f:	add    rbx,0x1
    6502ec23:	cmp    BYTE PTR [rbx],0x0
    6502ec26:	jne    0x6502ec10
    6502ec28:	xor    eax,eax
    6502ec2a:	jmp    0x6502edad
    6502ec2f:	mov    eax,DWORD PTR [rax+0x4]
    6502ec32:	mov    DWORD PTR [rsp+0x40],0x1
    6502ec3a:	xor    edi,edi
    6502ec3c:	mov    DWORD PTR [rsp+0x38],eax
    6502ec40:	mov    DWORD PTR [rsp+0x30],edi
    6502ec44:	mov    r9,rbx
    6502ec47:	mov    r8d,0x100
    6502ec4d:	mov    rcx,r12
    6502ec50:	mov    QWORD PTR [rsp+0x28],rdi
    6502ec55:	mov    DWORD PTR [rsp+0x20],0xffffffff
    6502ec5d:	call   0x65028ba0
    6502ec62:	test   eax,eax
    6502ec64:	movsxd r13,eax
    6502ec67:	jne    0x6502ec7a
    6502ec69:	call   0x650202b0
    6502ec6e:	mov    ebx,0x2a
    6502ec73:	mov    DWORD PTR [rax],ebx
    6502ec75:	jmp    0x6502eda6
    6502ec7a:	cmp    rsi,r13
    6502ec7d:	mov    rcx,r13
    6502ec80:	jae    0x6502ecae
    6502ec82:	mov    BYTE PTR [rbx],dil
    6502ec85:	call   0x650202b0
    6502ec8a:	xor    r9d,r9d
    6502ec8d:	xor    r8d,r8d
    6502ec90:	xor    edx,edx
    6502ec92:	xor    ecx,ecx
    6502ec94:	mov    DWORD PTR [rax],0x22
    6502ec9a:	mov    QWORD PTR [rsp+0x20],rdi
    6502ec9f:	call   0x6501d850
    6502eca4:	mov    eax,0x22
    6502eca9:	jmp    0x6502edad
    6502ecae:	test   eax,eax
    6502ecb0:	jle    0x6502ed9b
    6502ecb6:	xor    edx,edx
    6502ecb8:	mov    rax,0xffffffffffffffe0
    6502ecbf:	div    rcx
    6502ecc2:	cmp    rax,0x1
    6502ecc6:	jb     0x6502ed9b
    6502eccc:	add    rcx,0x10
    6502ecd0:	cmp    rcx,0x400
    6502ecd7:	ja     0x6502ed0e
    6502ecd9:	lea    rax,[rcx+0xf]
    6502ecdd:	cmp    rax,rcx
    6502ece0:	ja     0x6502ecec
    6502ece2:	movabs rax,0xffffffffffffff0
    6502ecec:	and    rax,0xfffffffffffffff0
    6502ecf0:	call   0x650330c0
    6502ecf5:	sub    rsp,rax
    6502ecf8:	lea    rdi,[rsp+0x50]
    6502ecfd:	test   rdi,rdi
    6502ed00:	je     0x6502ed9b
    6502ed06:	mov    DWORD PTR [rdi],0xcccc
    6502ed0c:	jmp    0x6502ed21
    6502ed0e:	call   0x6501fae0
    6502ed13:	test   rax,rax
    6502ed16:	mov    rdi,rax
    6502ed19:	je     0x6502ed25
    6502ed1b:	mov    DWORD PTR [rax],0xdddd
    6502ed21:	add    rdi,0x10
    6502ed25:	test   rdi,rdi
    6502ed28:	je     0x6502ed9b
    6502ed2a:	mov    rcx,QWORD PTR [r12]
    6502ed2e:	mov    DWORD PTR [rsp+0x40],0x1
    6502ed36:	mov    r9,rbx
    6502ed39:	mov    eax,DWORD PTR [rcx+0x4]
    6502ed3c:	mov    edx,DWORD PTR [rcx+0x14]
    6502ed3f:	mov    r8d,0x100
    6502ed45:	mov    DWORD PTR [rsp+0x38],eax
    6502ed49:	mov    DWORD PTR [rsp+0x30],r13d
    6502ed4e:	mov    rcx,r12
    6502ed51:	mov    QWORD PTR [rsp+0x28],rdi
    6502ed56:	mov    DWORD PTR [rsp+0x20],0xffffffff
    6502ed5e:	call   0x65028ba0
    6502ed63:	test   eax,eax
    6502ed65:	je     0x6502ed79
    6502ed67:	mov    r8,rdi
    6502ed6a:	mov    rdx,rsi
    6502ed6d:	mov    rcx,rbx
    6502ed70:	call   0x650201b0
    6502ed75:	mov    ebx,eax
    6502ed77:	jmp    0x6502ed85
    6502ed79:	call   0x650202b0
    6502ed7e:	mov    ebx,0x2a
    6502ed83:	mov    DWORD PTR [rax],ebx
    6502ed85:	cmp    DWORD PTR [rdi-0x10],0xdddd
    6502ed8c:	lea    rcx,[rdi-0x10]
    6502ed90:	jne    0x6502ed97
    6502ed92:	call   0x6501fa90
    6502ed97:	mov    eax,ebx
    6502ed99:	jmp    0x6502edad
    6502ed9b:	call   0x650202b0
    6502eda0:	mov    DWORD PTR [rax],0xc
    6502eda6:	call   0x650202b0
    6502edab:	mov    eax,DWORD PTR [rax]
    6502edad:	mov    rcx,QWORD PTR [rbp+0x0]
    6502edb1:	xor    rcx,rbp
    6502edb4:	call   0x6501e4e0
    6502edb9:	mov    rbx,QWORD PTR [rbp+0x30]
    6502edbd:	mov    rsi,QWORD PTR [rbp+0x38]
    6502edc1:	mov    rdi,QWORD PTR [rbp+0x40]
    6502edc5:	lea    rsp,[rbp+0x10]
    6502edc9:	pop    r13
    6502edcb:	pop    r12
    6502edcd:	pop    rbp
    6502edce:	ret    
    6502edcf:	int3   
    6502edd0:	rex push rbx
    6502edd2:	sub    rsp,0x50
    6502edd6:	cmp    DWORD PTR [rip+0x154a3],0x0        # 0x65044280
    6502eddd:	mov    rbx,rcx
    6502ede0:	jne    0x6502ee44
    6502ede2:	test   rcx,rcx
    6502ede5:	jne    0x6502ee0e
    6502ede7:	call   0x650202b0
    6502edec:	xor    r9d,r9d
    6502edef:	xor    r8d,r8d
    6502edf2:	xor    edx,edx
    6502edf4:	xor    ecx,ecx
    6502edf6:	mov    QWORD PTR [rsp+0x20],rbx
    6502edfb:	mov    DWORD PTR [rax],0x16
    6502ee01:	call   0x6501d850
    6502ee06:	xor    eax,eax
    6502ee08:	add    rsp,0x50
    6502ee0c:	pop    rbx
    6502ee0d:	ret    
    6502ee0e:	cmp    BYTE PTR [rcx],0x0
    6502ee11:	mov    rax,rcx
    6502ee14:	je     0x6502eefc
    6502ee1a:	data16 xchg ax,ax
    6502ee1d:	data16 xchg ax,ax
    6502ee20:	movzx  ecx,BYTE PTR [rax]
    6502ee23:	cmp    cl,0x41
    6502ee26:	jl     0x6502ee32
    6502ee28:	cmp    cl,0x5a
    6502ee2b:	jg     0x6502ee32
    6502ee2d:	add    cl,0x20
    6502ee30:	mov    BYTE PTR [rax],cl
    6502ee32:	add    rax,0x1
    6502ee36:	cmp    BYTE PTR [rax],0x0
    6502ee39:	jne    0x6502ee20
    6502ee3b:	mov    rax,rbx
    6502ee3e:	add    rsp,0x50
    6502ee42:	pop    rbx
    6502ee43:	ret    
    6502ee44:	mov    BYTE PTR [rsp+0x48],0x0
    6502ee49:	call   0x650208c0
    6502ee4e:	mov    QWORD PTR [rsp+0x40],rax
    6502ee53:	mov    rcx,QWORD PTR [rax+0xc0]
    6502ee5a:	mov    r11,rax
    6502ee5d:	cmp    rcx,QWORD PTR [rip+0x13b3c]        # 0x650429a0
    6502ee64:	mov    QWORD PTR [rsp+0x30],rcx
    6502ee69:	mov    rax,QWORD PTR [rax+0xb8]
    6502ee70:	mov    QWORD PTR [rsp+0x38],rax
    6502ee75:	je     0x6502ee9a
    6502ee77:	mov    ecx,DWORD PTR [r11+0xc8]
    6502ee7e:	test   DWORD PTR [rip+0x139a4],ecx        # 0x65042828
    6502ee84:	jne    0x6502ee9a
    6502ee86:	call   0x65023d20
    6502ee8b:	mov    r11,QWORD PTR [rsp+0x40]
    6502ee90:	mov    QWORD PTR [rsp+0x30],rax
    6502ee95:	mov    rax,QWORD PTR [rsp+0x38]
    6502ee9a:	cmp    rax,QWORD PTR [rip+0x1387f]        # 0x65042720
    6502eea1:	je     0x6502eec1
    6502eea3:	mov    eax,DWORD PTR [r11+0xc8]
    6502eeaa:	test   DWORD PTR [rip+0x13978],eax        # 0x65042828
    6502eeb0:	jne    0x6502eec1
    6502eeb2:	call   0x650231d0
    6502eeb7:	mov    r11,QWORD PTR [rsp+0x40]
    6502eebc:	mov    QWORD PTR [rsp+0x38],rax
    6502eec1:	test   BYTE PTR [r11+0xc8],0x2
    6502eec9:	jne    0x6502eed8
    6502eecb:	or     DWORD PTR [r11+0xc8],0x2
    6502eed3:	mov    BYTE PTR [rsp+0x48],0x1
    6502eed8:	lea    r8,[rsp+0x30]
    6502eedd:	or     rdx,0xffffffffffffffff
    6502eee1:	mov    rcx,rbx
    6502eee4:	call   0x6502eb90
    6502eee9:	cmp    BYTE PTR [rsp+0x48],0x0
    6502eeee:	je     0x6502eefc
    6502eef0:	mov    rax,QWORD PTR [rsp+0x40]
    6502eef5:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502eefc:	mov    rax,rbx
    6502eeff:	add    rsp,0x50
    6502ef03:	pop    rbx
    6502ef04:	ret    
    6502ef05:	int3   
    6502ef06:	int3   
    6502ef07:	int3   
    6502ef08:	int3   
    6502ef09:	int3   
    6502ef0a:	int3   
    6502ef0b:	int3   
    6502ef0c:	int3   
    6502ef0d:	int3   
    6502ef0e:	int3   
    6502ef0f:	int3   
    6502ef10:	mov    QWORD PTR [rsp+0x8],rbx
    6502ef15:	mov    QWORD PTR [rsp+0x10],rbp
    6502ef1a:	mov    QWORD PTR [rsp+0x18],rsi
    6502ef1f:	mov    QWORD PTR [rsp+0x20],rdi
    6502ef24:	push   r12
    6502ef26:	sub    rsp,0x20
    6502ef2a:	mov    r10,QWORD PTR [r9+0x38]
    6502ef2e:	mov    rsi,rdx
    6502ef31:	mov    r12,r8
    6502ef34:	mov    eax,DWORD PTR [r10]
    6502ef37:	mov    rbp,rcx
    6502ef3a:	mov    rdx,r9
    6502ef3d:	add    rax,rax
    6502ef40:	mov    rcx,rsi
    6502ef43:	mov    rdi,r9
    6502ef46:	lea    rbx,[r10+rax*8+0x4]
    6502ef4b:	mov    r8,rbx
    6502ef4e:	call   0x6501e960
    6502ef53:	test   BYTE PTR [rbp+0x4],0x66
    6502ef57:	mov    r11d,DWORD PTR [rbx]
    6502ef5a:	jne    0x6502ef62
    6502ef5c:	and    r11d,0x1
    6502ef60:	jmp    0x6502ef66
    6502ef62:	and    r11d,0x2
    6502ef66:	test   r11d,r11d
    6502ef69:	je     0x6502ef7e
    6502ef6b:	mov    r9,rdi
    6502ef6e:	mov    r8,r12
    6502ef71:	mov    rdx,rsi
    6502ef74:	mov    rcx,rbp
    6502ef77:	call   0x6501fff0
    6502ef7c:	jmp    0x6502ef83
    6502ef7e:	mov    eax,0x1
    6502ef83:	mov    rbx,QWORD PTR [rsp+0x30]
    6502ef88:	mov    rbp,QWORD PTR [rsp+0x38]
    6502ef8d:	mov    rsi,QWORD PTR [rsp+0x40]
    6502ef92:	mov    rdi,QWORD PTR [rsp+0x48]
    6502ef97:	add    rsp,0x20
    6502ef9b:	pop    r12
    6502ef9d:	ret    
    6502ef9e:	int3   
    6502ef9f:	int3   
    6502efa0:	lea    rax,[rip+0x409]        # 0x6502f3b0
    6502efa7:	lea    rcx,[rip+0x1292]        # 0x65030240
    6502efae:	mov    QWORD PTR [rip+0x13f03],rax        # 0x65042eb8
    6502efb5:	lea    rax,[rip+0x394]        # 0x6502f350
    6502efbc:	mov    QWORD PTR [rip+0x13eed],rcx        # 0x65042eb0
    6502efc3:	mov    QWORD PTR [rip+0x13ef6],rax        # 0x65042ec0
    6502efca:	lea    rax,[rip+0x3cf]        # 0x6502f3a0
    6502efd1:	mov    QWORD PTR [rip+0x13f00],rcx        # 0x65042ed8
    6502efd8:	mov    QWORD PTR [rip+0x13ee9],rax        # 0x65042ec8
    6502efdf:	lea    rax,[rip+0x2fa]        # 0x6502f2e0
    6502efe6:	mov    QWORD PTR [rip+0x13ee3],rax        # 0x65042ed0
    6502efed:	lea    rax,[rip+0x11ac]        # 0x650301a0
    6502eff4:	mov    QWORD PTR [rip+0x13ee5],rax        # 0x65042ee0
    6502effb:	lea    rax,[rip+0x2fe]        # 0x6502f300
    6502f002:	mov    QWORD PTR [rip+0x13edf],rax        # 0x65042ee8
    6502f009:	lea    rax,[rip+0x160]        # 0x6502f170
    6502f010:	mov    QWORD PTR [rip+0x13ed9],rax        # 0x65042ef0
    6502f017:	lea    rax,[rip+0x12]        # 0x6502f030
    6502f01e:	mov    QWORD PTR [rip+0x13ed3],rax        # 0x65042ef8
    6502f025:	ret    
    6502f026:	int3   
    6502f027:	int3   
    6502f028:	int3   
    6502f029:	int3   
    6502f02a:	int3   
    6502f02b:	int3   
    6502f02c:	int3   
    6502f02d:	int3   
    6502f02e:	int3   
    6502f02f:	int3   
    6502f030:	rex push rdi
    6502f032:	sub    rsp,0x40
    6502f036:	mov    QWORD PTR [rsp+0x50],rbx
    6502f03b:	mov    QWORD PTR [rsp+0x58],rbp
    6502f040:	xor    bpl,bpl
    6502f043:	test   rdx,rdx
    6502f046:	mov    QWORD PTR [rsp+0x68],r12
    6502f04b:	mov    rbx,rcx
    6502f04e:	mov    BYTE PTR [rsp+0x38],bpl
    6502f053:	jne    0x6502f0c9
    6502f055:	mov    QWORD PTR [rsp+0x60],rsi
    6502f05a:	call   0x650208c0
    6502f05f:	mov    r12,QWORD PTR [rax+0xc0]
    6502f066:	mov    rsi,QWORD PTR [rax+0xb8]
    6502f06d:	mov    rdi,rax
    6502f070:	cmp    r12,QWORD PTR [rip+0x13929]        # 0x650429a0
    6502f077:	je     0x6502f08f
    6502f079:	mov    edx,DWORD PTR [rax+0xc8]
    6502f07f:	test   DWORD PTR [rip+0x137a3],edx        # 0x65042828
    6502f085:	jne    0x6502f08f
    6502f087:	call   0x65023d20
    6502f08c:	mov    r12,rax
    6502f08f:	cmp    rsi,QWORD PTR [rip+0x1368a]        # 0x65042720
    6502f096:	mov    rsi,QWORD PTR [rsp+0x60]
    6502f09b:	je     0x6502f0b0
    6502f09d:	mov    ecx,DWORD PTR [rdi+0xc8]
    6502f0a3:	test   DWORD PTR [rip+0x1377f],ecx        # 0x65042828
    6502f0a9:	jne    0x6502f0b0
    6502f0ab:	call   0x650231d0
    6502f0b0:	mov    ecx,DWORD PTR [rdi+0xc8]
    6502f0b6:	test   cl,0x2
    6502f0b9:	jne    0x6502f0eb
    6502f0bb:	or     ecx,0x2
    6502f0be:	mov    bpl,0x1
    6502f0c1:	mov    DWORD PTR [rdi+0xc8],ecx
    6502f0c7:	jmp    0x6502f0eb
    6502f0c9:	mov    rax,QWORD PTR [rdx]
    6502f0cc:	lea    rcx,[rsp+0x20]
    6502f0d1:	mov    QWORD PTR [rcx],rax
    6502f0d4:	mov    rax,QWORD PTR [rdx+0x8]
    6502f0d8:	mov    QWORD PTR [rcx+0x8],rax
    6502f0dc:	movzx  ebp,BYTE PTR [rsp+0x38]
    6502f0e1:	mov    rdi,QWORD PTR [rsp+0x30]
    6502f0e6:	mov    r12,QWORD PTR [rsp+0x20]
    6502f0eb:	movsx  ecx,BYTE PTR [rbx]
    6502f0ee:	call   0x6501f730
    6502f0f3:	cmp    eax,0x65
    6502f0f6:	je     0x6502f111
    6502f0f8:	data16 data16 xchg ax,ax
    6502f0fc:	data16 data16 xchg ax,ax
    6502f100:	movzx  ecx,BYTE PTR [rbx+0x1]
    6502f104:	add    rbx,0x1
    6502f108:	call   0x6501f750
    6502f10d:	test   eax,eax
    6502f10f:	jne    0x6502f100
    6502f111:	movsx  ecx,BYTE PTR [rbx]
    6502f114:	call   0x6501f730
    6502f119:	cmp    eax,0x78
    6502f11c:	jne    0x6502f122
    6502f11e:	add    rbx,0x2
    6502f122:	mov    rax,QWORD PTR [r12+0x128]
    6502f12a:	movzx  edx,BYTE PTR [rbx]
    6502f12d:	mov    r12,QWORD PTR [rsp+0x68]
    6502f132:	mov    rcx,QWORD PTR [rax]
    6502f135:	add    rbx,0x1
    6502f139:	movzx  eax,BYTE PTR [rcx]
    6502f13c:	mov    BYTE PTR [rbx-0x1],al
    6502f13f:	nop
    6502f140:	movzx  eax,BYTE PTR [rbx]
    6502f143:	mov    BYTE PTR [rbx],dl
    6502f145:	add    rbx,0x1
    6502f149:	mov    dl,al
    6502f14b:	movzx  eax,BYTE PTR [rbx-0x1]
    6502f14f:	test   al,al
    6502f151:	jne    0x6502f140
    6502f153:	mov    rbx,QWORD PTR [rsp+0x50]
    6502f158:	test   bpl,bpl
    6502f15b:	mov    rbp,QWORD PTR [rsp+0x58]
    6502f160:	je     0x6502f169
    6502f162:	and    DWORD PTR [rdi+0xc8],0xfffffffd
    6502f169:	add    rsp,0x40
    6502f16d:	pop    rdi
    6502f16e:	ret    
    6502f16f:	int3   
    6502f170:	rex push rdi
    6502f172:	sub    rsp,0x40
    6502f176:	mov    QWORD PTR [rsp+0x50],rbx
    6502f17b:	mov    QWORD PTR [rsp+0x58],rbp
    6502f180:	mov    QWORD PTR [rsp+0x68],r12
    6502f185:	xor    r12b,r12b
    6502f188:	test   rdx,rdx
    6502f18b:	mov    rbx,rcx
    6502f18e:	mov    BYTE PTR [rsp+0x38],r12b
    6502f193:	jne    0x6502f209
    6502f195:	mov    QWORD PTR [rsp+0x60],rsi
    6502f19a:	call   0x650208c0
    6502f19f:	mov    rbp,QWORD PTR [rax+0xc0]
    6502f1a6:	mov    rsi,QWORD PTR [rax+0xb8]
    6502f1ad:	mov    rdi,rax
    6502f1b0:	cmp    rbp,QWORD PTR [rip+0x137e9]        # 0x650429a0
    6502f1b7:	je     0x6502f1cf
    6502f1b9:	mov    edx,DWORD PTR [rax+0xc8]
    6502f1bf:	test   DWORD PTR [rip+0x13663],edx        # 0x65042828
    6502f1c5:	jne    0x6502f1cf
    6502f1c7:	call   0x65023d20
    6502f1cc:	mov    rbp,rax
    6502f1cf:	cmp    rsi,QWORD PTR [rip+0x1354a]        # 0x65042720
    6502f1d6:	mov    rsi,QWORD PTR [rsp+0x60]
    6502f1db:	je     0x6502f1f0
    6502f1dd:	mov    ecx,DWORD PTR [rdi+0xc8]
    6502f1e3:	test   DWORD PTR [rip+0x1363f],ecx        # 0x65042828
    6502f1e9:	jne    0x6502f1f0
    6502f1eb:	call   0x650231d0
    6502f1f0:	mov    ecx,DWORD PTR [rdi+0xc8]
    6502f1f6:	test   cl,0x2
    6502f1f9:	jne    0x6502f22c
    6502f1fb:	or     ecx,0x2
    6502f1fe:	mov    r12b,0x1
    6502f201:	mov    DWORD PTR [rdi+0xc8],ecx
    6502f207:	jmp    0x6502f22c
    6502f209:	mov    rax,QWORD PTR [rdx]
    6502f20c:	lea    rcx,[rsp+0x20]
    6502f211:	mov    QWORD PTR [rcx],rax
    6502f214:	mov    rax,QWORD PTR [rdx+0x8]
    6502f218:	mov    QWORD PTR [rcx+0x8],rax
    6502f21c:	movzx  r12d,BYTE PTR [rsp+0x38]
    6502f222:	mov    rdi,QWORD PTR [rsp+0x30]
    6502f227:	mov    rbp,QWORD PTR [rsp+0x20]
    6502f22c:	movzx  edx,BYTE PTR [rbx]
    6502f22f:	test   dl,dl
    6502f231:	je     0x6502f24f
    6502f233:	mov    rax,QWORD PTR [rbp+0x128]
    6502f23a:	mov    rcx,QWORD PTR [rax]
    6502f23d:	movzx  eax,BYTE PTR [rcx]
    6502f240:	cmp    dl,al
    6502f242:	je     0x6502f24f
    6502f244:	mov    dl,BYTE PTR [rbx+0x1]
    6502f247:	add    rbx,0x1
    6502f24b:	test   dl,dl
    6502f24d:	jne    0x6502f240
    6502f24f:	movzx  eax,BYTE PTR [rbx]
    6502f252:	add    rbx,0x1
    6502f256:	test   al,al
    6502f258:	je     0x6502f2b1
    6502f25a:	movzx  eax,BYTE PTR [rbx]
    6502f25d:	test   al,al
    6502f25f:	je     0x6502f274
    6502f261:	cmp    al,0x65
    6502f263:	je     0x6502f274
    6502f265:	cmp    al,0x45
    6502f267:	je     0x6502f274
    6502f269:	mov    al,BYTE PTR [rbx+0x1]
    6502f26c:	add    rbx,0x1
    6502f270:	test   al,al
    6502f272:	jne    0x6502f261
    6502f274:	mov    rdx,rbx
    6502f277:	sub    rbx,0x1
    6502f27b:	cmp    BYTE PTR [rbx],0x30
    6502f27e:	jne    0x6502f289
    6502f280:	sub    rbx,0x1
    6502f284:	cmp    BYTE PTR [rbx],0x30
    6502f287:	je     0x6502f280
    6502f289:	mov    rax,QWORD PTR [rbp+0x128]
    6502f290:	mov    rcx,QWORD PTR [rax]
    6502f293:	movzx  eax,BYTE PTR [rcx]
    6502f296:	cmp    BYTE PTR [rbx],al
    6502f298:	jne    0x6502f2a0
    6502f29a:	sub    rbx,0x1
    6502f29e:	xchg   ax,ax
    6502f2a0:	movzx  eax,BYTE PTR [rdx]
    6502f2a3:	add    rbx,0x1
    6502f2a7:	add    rdx,0x1
    6502f2ab:	test   al,al
    6502f2ad:	mov    BYTE PTR [rbx],al
    6502f2af:	jne    0x6502f2a0
    6502f2b1:	mov    rbp,QWORD PTR [rsp+0x58]
    6502f2b6:	mov    rbx,QWORD PTR [rsp+0x50]
    6502f2bb:	test   r12b,r12b
    6502f2be:	mov    r12,QWORD PTR [rsp+0x68]
    6502f2c3:	je     0x6502f2cc
    6502f2c5:	and    DWORD PTR [rdi+0xc8],0xfffffffd
    6502f2cc:	add    rsp,0x40
    6502f2d0:	pop    rdi
    6502f2d1:	ret    
    6502f2d2:	int3   
    6502f2d3:	int3   
    6502f2d4:	int3   
    6502f2d5:	int3   
    6502f2d6:	int3   
    6502f2d7:	int3   
    6502f2d8:	int3   
    6502f2d9:	int3   
    6502f2da:	int3   
    6502f2db:	int3   
    6502f2dc:	int3   
    6502f2dd:	int3   
    6502f2de:	int3   
    6502f2df:	int3   
    6502f2e0:	movsd  xmm0,QWORD PTR [rcx]
    6502f2e4:	comisd xmm0,QWORD PTR [rip+0x7bd4]        # 0x65036ec0
    6502f2ec:	jb     0x6502f2f4
    6502f2ee:	mov    eax,0x1
    6502f2f3:	ret    
    6502f2f4:	xor    eax,eax
    6502f2f6:	ret    
    6502f2f7:	int3   
    6502f2f8:	int3   
    6502f2f9:	int3   
    6502f2fa:	int3   
    6502f2fb:	int3   
    6502f2fc:	int3   
    6502f2fd:	int3   
    6502f2fe:	int3   
    6502f2ff:	int3   
    6502f300:	rex push rbx
    6502f302:	sub    rsp,0x30
    6502f306:	test   ecx,ecx
    6502f308:	mov    rax,r8
    6502f30b:	mov    rbx,rdx
    6502f30e:	mov    rdx,rax
    6502f311:	mov    r8,r9
    6502f314:	je     0x6502f32e
    6502f316:	lea    rcx,[rsp+0x20]
    6502f31b:	call   0x65030310
    6502f320:	mov    r11,QWORD PTR [rsp+0x20]
    6502f325:	mov    QWORD PTR [rbx],r11
    6502f328:	add    rsp,0x30
    6502f32c:	pop    rbx
    6502f32d:	ret    
    6502f32e:	lea    rcx,[rsp+0x40]
    6502f333:	call   0x650304a0
    6502f338:	mov    r11d,DWORD PTR [rsp+0x40]
    6502f33d:	mov    DWORD PTR [rbx],r11d
    6502f340:	add    rsp,0x30
    6502f344:	pop    rbx
    6502f345:	ret    
    6502f346:	int3   
    6502f347:	int3   
    6502f348:	int3   
    6502f349:	int3   
    6502f34a:	int3   
    6502f34b:	int3   
    6502f34c:	int3   
    6502f34d:	int3   
    6502f34e:	int3   
    6502f34f:	int3   
    6502f350:	rex push rbx
    6502f352:	sub    rsp,0x20
    6502f356:	mov    rax,r8
    6502f359:	xor    r8d,r8d
    6502f35c:	test   ecx,ecx
    6502f35e:	mov    rbx,rdx
    6502f361:	mov    rdx,rax
    6502f364:	je     0x6502f37e
    6502f366:	lea    rcx,[rsp+0x48]
    6502f36b:	call   0x65030310
    6502f370:	mov    r11,QWORD PTR [rsp+0x48]
    6502f375:	mov    QWORD PTR [rbx],r11
    6502f378:	add    rsp,0x20
    6502f37c:	pop    rbx
    6502f37d:	ret    
    6502f37e:	lea    rcx,[rsp+0x30]
    6502f383:	call   0x650304a0
    6502f388:	mov    r11d,DWORD PTR [rsp+0x30]
    6502f38d:	mov    DWORD PTR [rbx],r11d
    6502f390:	add    rsp,0x20
    6502f394:	pop    rbx
    6502f395:	ret    
    6502f396:	int3   
    6502f397:	int3   
    6502f398:	int3   
    6502f399:	int3   
    6502f39a:	int3   
    6502f39b:	int3   
    6502f39c:	int3   
    6502f39d:	int3   
    6502f39e:	int3   
    6502f39f:	int3   
    6502f3a0:	xor    edx,edx
    6502f3a2:	jmp    0x6502f030
    6502f3a7:	int3   
    6502f3a8:	int3   
    6502f3a9:	int3   
    6502f3aa:	int3   
    6502f3ab:	int3   
    6502f3ac:	int3   
    6502f3ad:	int3   
    6502f3ae:	int3   
    6502f3af:	int3   
    6502f3b0:	xor    edx,edx
    6502f3b2:	jmp    0x6502f170
    6502f3b7:	int3   
    6502f3b8:	int3   
    6502f3b9:	int3   
    6502f3ba:	int3   
    6502f3bb:	int3   
    6502f3bc:	int3   
    6502f3bd:	int3   
    6502f3be:	int3   
    6502f3bf:	int3   
    6502f3c0:	mov    DWORD PTR [rsp+0x20],r9d
    6502f3c5:	mov    QWORD PTR [rsp+0x10],rdx
    6502f3ca:	push   rbx
    6502f3cb:	push   rsi
    6502f3cc:	push   rdi
    6502f3cd:	push   r12
    6502f3cf:	push   r13
    6502f3d1:	push   r15
    6502f3d3:	sub    rsp,0x58
    6502f3d7:	xor    r12b,r12b
    6502f3da:	mov    r13,rcx
    6502f3dd:	mov    rcx,QWORD PTR [rsp+0xc0]
    6502f3e5:	test   rcx,rcx
    6502f3e8:	movsxd r15,r8d
    6502f3eb:	mov    r8,rdx
    6502f3ee:	mov    BYTE PTR [rsp+0x48],r12b
    6502f3f3:	jne    0x6502f47b
    6502f3f9:	call   0x650208c0
    6502f3fe:	mov    rbx,rax
    6502f401:	mov    rdi,QWORD PTR [rax+0xc0]
    6502f408:	mov    rsi,QWORD PTR [rax+0xb8]
    6502f40f:	cmp    rdi,QWORD PTR [rip+0x1358a]        # 0x650429a0
    6502f416:	mov    QWORD PTR [rsp+0xc0],rdi
    6502f41e:	je     0x6502f43e
    6502f420:	mov    ecx,DWORD PTR [rax+0xc8]
    6502f426:	test   DWORD PTR [rip+0x133fc],ecx        # 0x65042828
    6502f42c:	jne    0x6502f43e
    6502f42e:	call   0x65023d20
    6502f433:	mov    rdi,rax
    6502f436:	mov    QWORD PTR [rsp+0xc0],rax
    6502f43e:	cmp    rsi,QWORD PTR [rip+0x132db]        # 0x65042720
    6502f445:	je     0x6502f45a
    6502f447:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502f44d:	test   DWORD PTR [rip+0x133d5],ecx        # 0x65042828
    6502f453:	jne    0x6502f45a
    6502f455:	call   0x650231d0
    6502f45a:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502f460:	test   cl,0x2
    6502f463:	jne    0x6502f4a8
    6502f465:	mov    r8,QWORD PTR [rsp+0x98]
    6502f46d:	or     ecx,0x2
    6502f470:	mov    r12b,0x1
    6502f473:	mov    DWORD PTR [rbx+0xc8],ecx
    6502f479:	jmp    0x6502f4b0
    6502f47b:	mov    rax,QWORD PTR [rcx]
    6502f47e:	lea    rdx,[rsp+0x30]
    6502f483:	mov    QWORD PTR [rdx],rax
    6502f486:	mov    rax,QWORD PTR [rcx+0x8]
    6502f48a:	mov    QWORD PTR [rdx+0x8],rax
    6502f48e:	mov    rdi,QWORD PTR [rsp+0x30]
    6502f493:	movzx  r12d,BYTE PTR [rsp+0x48]
    6502f499:	mov    rbx,QWORD PTR [rsp+0x40]
    6502f49e:	mov    QWORD PTR [rsp+0xc0],rdi
    6502f4a6:	jmp    0x6502f4b0
    6502f4a8:	mov    r8,QWORD PTR [rsp+0x98]
    6502f4b0:	test   r13,r13
    6502f4b3:	jne    0x6502f4f5
    6502f4b5:	call   0x650202b0
    6502f4ba:	xor    esi,esi
    6502f4bc:	xor    r9d,r9d
    6502f4bf:	xor    r8d,r8d
    6502f4c2:	xor    edx,edx
    6502f4c4:	xor    ecx,ecx
    6502f4c6:	mov    DWORD PTR [rax],0x16
    6502f4cc:	mov    QWORD PTR [rsp+0x20],rsi
    6502f4d1:	call   0x6501d850
    6502f4d6:	test   r12b,r12b
    6502f4d9:	je     0x6502f4e2
    6502f4db:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502f4e2:	mov    eax,0x16
    6502f4e7:	add    rsp,0x58
    6502f4eb:	pop    r15
    6502f4ed:	pop    r13
    6502f4ef:	pop    r12
    6502f4f1:	pop    rdi
    6502f4f2:	pop    rsi
    6502f4f3:	pop    rbx
    6502f4f4:	ret    
    6502f4f5:	test   r8,r8
    6502f4f8:	je     0x6502f4b5
    6502f4fa:	xor    esi,esi
    6502f4fc:	test   r15d,r15d
    6502f4ff:	mov    eax,esi
    6502f501:	cmovg  eax,r15d
    6502f505:	add    eax,0x9
    6502f508:	cdqe   
    6502f50a:	cmp    r8,rax
    6502f50d:	ja     0x6502f54d
    6502f50f:	call   0x650202b0
    6502f514:	xor    r9d,r9d
    6502f517:	xor    r8d,r8d
    6502f51a:	xor    edx,edx
    6502f51c:	xor    ecx,ecx
    6502f51e:	mov    QWORD PTR [rsp+0x20],rsi
    6502f523:	mov    DWORD PTR [rax],0x22
    6502f529:	call   0x6501d850
    6502f52e:	test   r12b,r12b
    6502f531:	je     0x6502f53a
    6502f533:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502f53a:	mov    eax,0x22
    6502f53f:	add    rsp,0x58
    6502f543:	pop    r15
    6502f545:	pop    r13
    6502f547:	pop    r12
    6502f549:	pop    rdi
    6502f54a:	pop    rsi
    6502f54b:	pop    rbx
    6502f54c:	ret    
    6502f54d:	movzx  r9d,BYTE PTR [rsp+0xb8]
    6502f556:	mov    QWORD PTR [rsp+0x90],rbp
    6502f55e:	or     rbp,0xffffffffffffffff
    6502f562:	test   r9b,r9b
    6502f565:	mov    QWORD PTR [rsp+0x50],r14
    6502f56a:	mov    r14,QWORD PTR [rsp+0xb0]
    6502f572:	je     0x6502f5d0
    6502f574:	cmp    DWORD PTR [r14],0x2d
    6502f578:	mov    rdx,rsi
    6502f57b:	mov    r9d,esi
    6502f57e:	sete   dl
    6502f581:	add    rdx,r13
    6502f584:	test   r15d,r15d
    6502f587:	setg   r9b
    6502f58b:	test   r9d,r9d
    6502f58e:	je     0x6502f5c8
    6502f590:	xor    eax,eax
    6502f592:	mov    rdi,rdx
    6502f595:	mov    rcx,rbp
    6502f598:	repnz scas al,BYTE PTR es:[rdi]
    6502f59a:	movsxd rax,r9d
    6502f59d:	not    rcx
    6502f5a0:	add    rax,rdx
    6502f5a3:	mov    r8,rcx
    6502f5a6:	mov    rcx,rax
    6502f5a9:	call   0x6501fbc0
    6502f5ae:	mov    rdi,QWORD PTR [rsp+0xc0]
    6502f5b6:	mov    r8,QWORD PTR [rsp+0x98]
    6502f5be:	mov    r9b,BYTE PTR [rsp+0xb8]
    6502f5c6:	jmp    0x6502f5d0
    6502f5c8:	mov    r9b,BYTE PTR [rsp+0xb8]
    6502f5d0:	cmp    DWORD PTR [r14],0x2d
    6502f5d4:	mov    rdx,r13
    6502f5d7:	jne    0x6502f5e2
    6502f5d9:	mov    BYTE PTR [r13+0x0],0x2d
    6502f5de:	lea    rdx,[r13+0x1]
    6502f5e2:	test   r15d,r15d
    6502f5e5:	jle    0x6502f601
    6502f5e7:	movzx  eax,BYTE PTR [rdx+0x1]
    6502f5eb:	add    rdx,0x1
    6502f5ef:	mov    BYTE PTR [rdx-0x1],al
    6502f5f2:	mov    rax,QWORD PTR [rdi+0x128]
    6502f5f9:	mov    rcx,QWORD PTR [rax]
    6502f5fc:	movzx  eax,BYTE PTR [rcx]
    6502f5ff:	mov    BYTE PTR [rdx],al
    6502f601:	test   r9b,r9b
    6502f604:	mov    rcx,rsi
    6502f607:	lea    rdi,[rdx+r15*1]
    6502f60b:	sete   cl
    6502f60e:	add    rdi,rcx
    6502f611:	cmp    r8,0xffffffffffffffff
    6502f615:	je     0x6502f620
    6502f617:	mov    rbp,r13
    6502f61a:	sub    rbp,rdi
    6502f61d:	add    rbp,r8
    6502f620:	lea    r8,[rip+0x78a1]        # 0x65036ec8
    6502f627:	mov    rdx,rbp
    6502f62a:	mov    rcx,rdi
    6502f62d:	call   0x650201b0
    6502f632:	mov    rbp,QWORD PTR [rsp+0x90]
    6502f63a:	test   eax,eax
    6502f63c:	je     0x6502f652
    6502f63e:	xor    r9d,r9d
    6502f641:	xor    r8d,r8d
    6502f644:	xor    edx,edx
    6502f646:	xor    ecx,ecx
    6502f648:	mov    QWORD PTR [rsp+0x20],rsi
    6502f64d:	call   0x6501d7b0
    6502f652:	cmp    DWORD PTR [rsp+0xa8],esi
    6502f659:	lea    rcx,[rdi+0x2]
    6502f65d:	je     0x6502f662
    6502f65f:	mov    BYTE PTR [rdi],0x45
    6502f662:	mov    rax,QWORD PTR [r14+0x10]
    6502f666:	cmp    BYTE PTR [rax],0x30
    6502f669:	je     0x6502f6c2
    6502f66b:	mov    r8d,DWORD PTR [r14+0x4]
    6502f66f:	sub    r8d,0x1
    6502f673:	jns    0x6502f67c
    6502f675:	neg    r8d
    6502f678:	mov    BYTE PTR [rdi+0x1],0x2d
    6502f67c:	cmp    r8d,0x64
    6502f680:	jl     0x6502f69d
    6502f682:	mov    eax,0x51eb851f
    6502f687:	imul   r8d
    6502f68a:	sar    edx,0x5
    6502f68d:	mov    eax,edx
    6502f68f:	shr    eax,0x1f
    6502f692:	add    edx,eax
    6502f694:	add    BYTE PTR [rdi+0x2],dl
    6502f697:	imul   edx,edx,0xffffff9c
    6502f69a:	add    r8d,edx
    6502f69d:	cmp    r8d,0xa
    6502f6a1:	jl     0x6502f6be
    6502f6a3:	mov    eax,0x66666667
    6502f6a8:	imul   r8d
    6502f6ab:	sar    edx,0x2
    6502f6ae:	mov    eax,edx
    6502f6b0:	shr    eax,0x1f
    6502f6b3:	add    edx,eax
    6502f6b5:	add    BYTE PTR [rdi+0x3],dl
    6502f6b8:	imul   edx,edx,0xfffffff6
    6502f6bb:	add    r8d,edx
    6502f6be:	add    BYTE PTR [rdi+0x4],r8b
    6502f6c2:	test   BYTE PTR [rip+0x1542b],0x1        # 0x65044af4
    6502f6c9:	mov    r14,QWORD PTR [rsp+0x50]
    6502f6ce:	je     0x6502f6e4
    6502f6d0:	cmp    BYTE PTR [rcx],0x30
    6502f6d3:	jne    0x6502f6e4
    6502f6d5:	lea    rdx,[rcx+0x1]
    6502f6d9:	mov    r8d,0x3
    6502f6df:	call   0x6501fbc0
    6502f6e4:	test   r12b,r12b
    6502f6e7:	je     0x6502f6f0
    6502f6e9:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502f6f0:	xor    eax,eax
    6502f6f2:	add    rsp,0x58
    6502f6f6:	pop    r15
    6502f6f8:	pop    r13
    6502f6fa:	pop    r12
    6502f6fc:	pop    rdi
    6502f6fd:	pop    rsi
    6502f6fe:	pop    rbx
    6502f6ff:	ret    
    6502f700:	rex push rbx
    6502f702:	push   rbp
    6502f703:	push   rsi
    6502f704:	push   rdi
    6502f705:	sub    rsp,0x88
    6502f70c:	mov    rax,QWORD PTR [rip+0x12a0d]        # 0x65042120
    6502f713:	xor    rax,rsp
    6502f716:	mov    QWORD PTR [rsp+0x70],rax
    6502f71b:	mov    rcx,QWORD PTR [rcx]
    6502f71e:	mov    rbp,QWORD PTR [rsp+0xd8]
    6502f726:	mov    rbx,r8
    6502f729:	mov    rdi,rdx
    6502f72c:	mov    esi,r9d
    6502f72f:	lea    r8,[rsp+0x58]
    6502f734:	lea    rdx,[rsp+0x40]
    6502f739:	mov    r9d,0x16
    6502f73f:	call   0x65030750
    6502f744:	test   rdi,rdi
    6502f747:	jne    0x6502f772
    6502f749:	call   0x650202b0
    6502f74e:	xor    ecx,ecx
    6502f750:	xor    r9d,r9d
    6502f753:	xor    r8d,r8d
    6502f756:	xor    edx,edx
    6502f758:	mov    DWORD PTR [rax],0x16
    6502f75e:	mov    QWORD PTR [rsp+0x20],rcx
    6502f763:	call   0x6501d850
    6502f768:	mov    eax,0x16
    6502f76d:	jmp    0x6502f7fa
    6502f772:	test   rbx,rbx
    6502f775:	je     0x6502f749
    6502f777:	mov    r9d,DWORD PTR [rsp+0x40]
    6502f77c:	xor    ecx,ecx
    6502f77e:	cmp    rbx,0xffffffffffffffff
    6502f782:	jne    0x6502f789
    6502f784:	or     rdx,rbx
    6502f787:	jmp    0x6502f7a4
    6502f789:	cmp    r9d,0x2d
    6502f78d:	mov    rax,rcx
    6502f790:	mov    rdx,rbx
    6502f793:	sete   al
    6502f796:	sub    rdx,rax
    6502f799:	test   esi,esi
    6502f79b:	mov    rax,rcx
    6502f79e:	setg   al
    6502f7a1:	sub    rdx,rax
    6502f7a4:	mov    rax,rcx
    6502f7a7:	cmp    r9d,0x2d
    6502f7ab:	lea    r8d,[rsi+0x1]
    6502f7af:	sete   al
    6502f7b2:	test   esi,esi
    6502f7b4:	lea    r9,[rsp+0x40]
    6502f7b9:	setg   cl
    6502f7bc:	add    rax,rdi
    6502f7bf:	add    rcx,rax
    6502f7c2:	call   0x65030630
    6502f7c7:	test   eax,eax
    6502f7c9:	je     0x6502f7d0
    6502f7cb:	mov    BYTE PTR [rdi],0x0
    6502f7ce:	jmp    0x6502f7fa
    6502f7d0:	mov    r9d,DWORD PTR [rsp+0xd0]
    6502f7d8:	lea    rax,[rsp+0x40]
    6502f7dd:	mov    QWORD PTR [rsp+0x30],rbp
    6502f7e2:	mov    r8d,esi
    6502f7e5:	mov    rdx,rbx
    6502f7e8:	mov    rcx,rdi
    6502f7eb:	mov    BYTE PTR [rsp+0x28],0x0
    6502f7f0:	mov    QWORD PTR [rsp+0x20],rax
    6502f7f5:	call   0x6502f3c0
    6502f7fa:	mov    rcx,QWORD PTR [rsp+0x70]
    6502f7ff:	xor    rcx,rsp
    6502f802:	call   0x6501e4e0
    6502f807:	add    rsp,0x88
    6502f80e:	pop    rdi
    6502f80f:	pop    rsi
    6502f810:	pop    rbp
    6502f811:	pop    rbx
    6502f812:	ret    
    6502f813:	int3   
    6502f814:	int3   
    6502f815:	int3   
    6502f816:	int3   
    6502f817:	int3   
    6502f818:	int3   
    6502f819:	int3   
    6502f81a:	int3   
    6502f81b:	int3   
    6502f81c:	int3   
    6502f81d:	int3   
    6502f81e:	int3   
    6502f81f:	int3   
    6502f820:	mov    QWORD PTR [rsp+0x18],rbx
    6502f825:	mov    QWORD PTR [rsp+0x8],rcx
    6502f82a:	push   rbp
    6502f82b:	push   rsi
    6502f82c:	push   rdi
    6502f82d:	push   r12
    6502f82f:	push   r13
    6502f831:	push   r14
    6502f833:	push   r15
    6502f835:	sub    rsp,0x50
    6502f839:	xor    r15b,r15b
    6502f83c:	mov    rdi,rdx
    6502f83f:	mov    rdx,QWORD PTR [rsp+0xb8]
    6502f847:	test   rdx,rdx
    6502f84a:	mov    ebx,r9d
    6502f84d:	mov    r9d,0x3ff
    6502f853:	mov    r12,r8
    6502f856:	mov    r14,rcx
    6502f859:	mov    bp,0x30
    6502f85d:	mov    QWORD PTR [rsp+0x98],r9
    6502f865:	mov    BYTE PTR [rsp+0x48],r15b
    6502f86a:	jne    0x6502f8e4
    6502f86c:	call   0x650208c0
    6502f871:	mov    rsi,rax
    6502f874:	mov    r13,QWORD PTR [rax+0xc0]
    6502f87b:	mov    r14,QWORD PTR [rax+0xb8]
    6502f882:	cmp    r13,QWORD PTR [rip+0x13117]        # 0x650429a0
    6502f889:	je     0x6502f8a1
    6502f88b:	mov    ecx,DWORD PTR [rax+0xc8]
    6502f891:	test   DWORD PTR [rip+0x12f91],ecx        # 0x65042828
    6502f897:	jne    0x6502f8a1
    6502f899:	call   0x65023d20
    6502f89e:	mov    r13,rax
    6502f8a1:	cmp    r14,QWORD PTR [rip+0x12e78]        # 0x65042720
    6502f8a8:	je     0x6502f8bd
    6502f8aa:	mov    ecx,DWORD PTR [rsi+0xc8]
    6502f8b0:	test   DWORD PTR [rip+0x12f72],ecx        # 0x65042828
    6502f8b6:	jne    0x6502f8bd
    6502f8b8:	call   0x650231d0
    6502f8bd:	mov    ecx,DWORD PTR [rsi+0xc8]
    6502f8c3:	mov    r14,QWORD PTR [rsp+0x90]
    6502f8cb:	mov    r9d,0x3ff
    6502f8d1:	test   cl,0x2
    6502f8d4:	jne    0x6502f907
    6502f8d6:	or     ecx,0x2
    6502f8d9:	mov    r15b,0x1
    6502f8dc:	mov    DWORD PTR [rsi+0xc8],ecx
    6502f8e2:	jmp    0x6502f907
    6502f8e4:	mov    rax,QWORD PTR [rdx]
    6502f8e7:	lea    rcx,[rsp+0x30]
    6502f8ec:	mov    QWORD PTR [rcx],rax
    6502f8ef:	mov    rax,QWORD PTR [rdx+0x8]
    6502f8f3:	mov    QWORD PTR [rcx+0x8],rax
    6502f8f7:	movzx  r15d,BYTE PTR [rsp+0x48]
    6502f8fd:	mov    rsi,QWORD PTR [rsp+0x40]
    6502f902:	mov    r13,QWORD PTR [rsp+0x30]
    6502f907:	xor    edx,edx
    6502f909:	test   ebx,ebx
    6502f90b:	cmovs  ebx,edx
    6502f90e:	test   rdi,rdi
    6502f911:	jne    0x6502f94c
    6502f913:	call   0x650202b0
    6502f918:	xor    r9d,r9d
    6502f91b:	xor    r8d,r8d
    6502f91e:	xor    edx,edx
    6502f920:	xor    ecx,ecx
    6502f922:	mov    QWORD PTR [rsp+0x20],0x0
    6502f92b:	mov    DWORD PTR [rax],0x16
    6502f931:	call   0x6501d850
    6502f936:	test   r15b,r15b
    6502f939:	je     0x6502f942
    6502f93b:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502f942:	mov    eax,0x16
    6502f947:	jmp    0x6502fcc8
    6502f94c:	test   r12,r12
    6502f94f:	je     0x6502f913
    6502f951:	lea    eax,[rbx+0xb]
    6502f954:	mov    BYTE PTR [rdi],dl
    6502f956:	movsxd rcx,eax
    6502f959:	cmp    r12,rcx
    6502f95c:	ja     0x6502f997
    6502f95e:	call   0x650202b0
    6502f963:	xor    r9d,r9d
    6502f966:	xor    r8d,r8d
    6502f969:	xor    edx,edx
    6502f96b:	xor    ecx,ecx
    6502f96d:	mov    QWORD PTR [rsp+0x20],0x0
    6502f976:	mov    DWORD PTR [rax],0x22
    6502f97c:	call   0x6501d850
    6502f981:	test   r15b,r15b
    6502f984:	je     0x6502f98d
    6502f986:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502f98d:	mov    eax,0x22
    6502f992:	jmp    0x6502fcc8
    6502f997:	mov    rcx,QWORD PTR [r14]
    6502f99a:	mov    rax,rcx
    6502f99d:	shr    rax,0x34
    6502f9a1:	and    eax,0x7ff
    6502f9a6:	cmp    rax,0x7ff
    6502f9ac:	jne    0x6502fa50
    6502f9b2:	cmp    r12,0xffffffffffffffff
    6502f9b6:	jne    0x6502f9bd
    6502f9b8:	or     r8,r12
    6502f9bb:	jmp    0x6502f9c2
    6502f9bd:	lea    r8,[r12-0x2]
    6502f9c2:	mov    QWORD PTR [rsp+0x28],rdx
    6502f9c7:	mov    DWORD PTR [rsp+0x20],edx
    6502f9cb:	lea    rdx,[rdi+0x2]
    6502f9cf:	mov    r9d,ebx
    6502f9d2:	mov    rcx,r14
    6502f9d5:	call   0x6502f700
    6502f9da:	test   eax,eax
    6502f9dc:	je     0x6502f9f6
    6502f9de:	test   r15b,r15b
    6502f9e1:	mov    BYTE PTR [rdi],0x0
    6502f9e4:	je     0x6502fcc8
    6502f9ea:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502f9f1:	jmp    0x6502fcc8
    6502f9f6:	cmp    BYTE PTR [rdi+0x2],0x2d
    6502f9fa:	jne    0x6502fa03
    6502f9fc:	mov    BYTE PTR [rdi],0x2d
    6502f9ff:	add    rdi,0x1
    6502fa03:	mov    ebx,DWORD PTR [rsp+0xb0]
    6502fa0a:	mov    eax,0x78
    6502fa0f:	mov    ecx,0x58
    6502fa14:	mov    BYTE PTR [rdi],0x30
    6502fa17:	test   ebx,ebx
    6502fa19:	mov    edx,0x65
    6502fa1e:	cmovne eax,ecx
    6502fa21:	lea    rcx,[rdi+0x2]
    6502fa25:	mov    BYTE PTR [rdi+0x1],al
    6502fa28:	call   0x650302e0
    6502fa2d:	test   rax,rax
    6502fa30:	je     0x6502fcba
    6502fa36:	mov    ecx,0x70
    6502fa3b:	mov    edx,0x50
    6502fa40:	test   ebx,ebx
    6502fa42:	cmovne ecx,edx
    6502fa45:	mov    BYTE PTR [rax],cl
    6502fa47:	mov    BYTE PTR [rax+0x3],0x0
    6502fa4b:	jmp    0x6502fcba
    6502fa50:	movabs rax,0x8000000000000000
    6502fa5a:	test   rax,rcx
    6502fa5d:	je     0x6502fa66
    6502fa5f:	mov    BYTE PTR [rdi],0x2d
    6502fa62:	add    rdi,0x1
    6502fa66:	mov    edx,DWORD PTR [rsp+0xb0]
    6502fa6d:	mov    eax,0x78
    6502fa72:	mov    BYTE PTR [rdi],0x30
    6502fa75:	test   edx,edx
    6502fa77:	mov    ecx,0x58
    6502fa7c:	mov    r8d,0x61
    6502fa82:	cmovne eax,ecx
    6502fa85:	test   edx,edx
    6502fa87:	movabs r10,0xfffffffffffff
    6502fa91:	mov    BYTE PTR [rdi+0x1],al
    6502fa94:	mov    eax,0x41
    6502fa99:	cmovne r8d,eax
    6502fa9d:	movabs rax,0x7ff0000000000000
    6502faa7:	sub    r8d,0x3a
    6502faab:	test   QWORD PTR [r14],rax
    6502faae:	jne    0x6502fad5
    6502fab0:	mov    BYTE PTR [rdi+0x2],0x30
    6502fab4:	mov    rax,QWORD PTR [r14]
    6502fab7:	add    rdi,0x3
    6502fabb:	and    rax,r10
    6502fabe:	neg    rax
    6502fac1:	sbb    r9,r9
    6502fac4:	and    r9d,0x3fe
    6502facb:	mov    QWORD PTR [rsp+0x98],r9
    6502fad3:	jmp    0x6502fadd
    6502fad5:	mov    BYTE PTR [rdi+0x2],0x31
    6502fad9:	add    rdi,0x3
    6502fadd:	mov    r12,rdi
    6502fae0:	add    rdi,0x1
    6502fae4:	test   ebx,ebx
    6502fae6:	jne    0x6502faee
    6502fae8:	mov    BYTE PTR [r12],bl
    6502faec:	jmp    0x6502faff
    6502faee:	mov    rax,QWORD PTR [r13+0x128]
    6502faf5:	mov    rcx,QWORD PTR [rax]
    6502faf8:	movzx  eax,BYTE PTR [rcx]
    6502fafb:	mov    BYTE PTR [r12],al
    6502faff:	test   QWORD PTR [r14],r10
    6502fb02:	jbe    0x6502fb9f
    6502fb08:	movabs rdx,0xf000000000000
    6502fb12:	test   ebx,ebx
    6502fb14:	jle    0x6502fb49
    6502fb16:	mov    rax,QWORD PTR [r14]
    6502fb19:	movzx  ecx,bpl
    6502fb1d:	and    rax,rdx
    6502fb20:	and    rax,r10
    6502fb23:	shr    rax,cl
    6502fb26:	add    ax,0x30
    6502fb2a:	cmp    ax,0x39
    6502fb2e:	jbe    0x6502fb34
    6502fb30:	add    ax,r8w
    6502fb34:	mov    BYTE PTR [rdi],al
    6502fb36:	add    rdi,0x1
    6502fb3a:	shr    rdx,0x4
    6502fb3e:	sub    ebx,0x1
    6502fb41:	add    bp,0xfffc
    6502fb45:	jns    0x6502fb12
    6502fb47:	jmp    0x6502fb9f
    6502fb49:	test   bp,bp
    6502fb4c:	js     0x6502fb9f
    6502fb4e:	mov    rax,QWORD PTR [r14]
    6502fb51:	movzx  ecx,bpl
    6502fb55:	and    rax,rdx
    6502fb58:	and    rax,r10
    6502fb5b:	shr    rax,cl
    6502fb5e:	cmp    ax,0x8
    6502fb62:	jbe    0x6502fb9f
    6502fb64:	lea    rax,[rdi-0x1]
    6502fb68:	movzx  ecx,BYTE PTR [rax]
    6502fb6b:	cmp    cl,0x66
    6502fb6e:	je     0x6502fb75
    6502fb70:	cmp    cl,0x46
    6502fb73:	jne    0x6502fb7e
    6502fb75:	mov    BYTE PTR [rax],0x30
    6502fb78:	sub    rax,0x1
    6502fb7c:	jmp    0x6502fb68
    6502fb7e:	cmp    rax,r12
    6502fb81:	je     0x6502fb9b
    6502fb83:	movzx  ecx,BYTE PTR [rax]
    6502fb86:	cmp    cl,0x39
    6502fb89:	jne    0x6502fb94
    6502fb8b:	add    r8b,0x3a
    6502fb8f:	mov    BYTE PTR [rax],r8b
    6502fb92:	jmp    0x6502fb9f
    6502fb94:	add    cl,0x1
    6502fb97:	mov    BYTE PTR [rax],cl
    6502fb99:	jmp    0x6502fb9f
    6502fb9b:	add    BYTE PTR [rax-0x1],0x1
    6502fb9f:	test   ebx,ebx
    6502fba1:	jle    0x6502fbbb
    6502fba3:	mov    r8,rbx
    6502fba6:	mov    dl,0x30
    6502fba8:	mov    rcx,rdi
    6502fbab:	call   0x6501ee30
    6502fbb0:	mov    r9,QWORD PTR [rsp+0x98]
    6502fbb8:	add    rdi,rbx
    6502fbbb:	cmp    BYTE PTR [r12],0x0
    6502fbc0:	mov    ecx,0x70
    6502fbc5:	mov    edx,0x50
    6502fbca:	cmove  rdi,r12
    6502fbce:	cmp    DWORD PTR [rsp+0xb0],0x0
    6502fbd6:	cmovne ecx,edx
    6502fbd9:	mov    BYTE PTR [rdi],cl
    6502fbdb:	mov    rcx,QWORD PTR [r14]
    6502fbde:	shr    rcx,0x34
    6502fbe2:	and    ecx,0x7ff
    6502fbe8:	sub    rcx,r9
    6502fbeb:	js     0x6502fbf7
    6502fbed:	mov    BYTE PTR [rdi+0x1],0x2b
    6502fbf1:	add    rdi,0x2
    6502fbf5:	jmp    0x6502fc02
    6502fbf7:	mov    BYTE PTR [rdi+0x1],0x2d
    6502fbfb:	add    rdi,0x2
    6502fbff:	neg    rcx
    6502fc02:	cmp    rcx,0x3e8
    6502fc09:	mov    r8,rdi
    6502fc0c:	mov    BYTE PTR [rdi],0x30
    6502fc0f:	jl     0x6502fc45
    6502fc11:	movabs rax,0x20c49ba5e353f7cf
    6502fc1b:	add    rdi,0x1
    6502fc1f:	imul   rcx
    6502fc22:	sar    rdx,0x7
    6502fc26:	mov    rax,rdx
    6502fc29:	shr    rax,0x3f
    6502fc2d:	add    rdx,rax
    6502fc30:	lea    eax,[rdx+0x30]
    6502fc33:	imul   rdx,rdx,0xfffffffffffffc18
    6502fc3a:	mov    BYTE PTR [rdi-0x1],al
    6502fc3d:	add    rcx,rdx
    6502fc40:	cmp    rdi,r8
    6502fc43:	jne    0x6502fc4b
    6502fc45:	cmp    rcx,0x64
    6502fc49:	jl     0x6502fc7a
    6502fc4b:	movabs rax,0xa3d70a3d70a3d70b
    6502fc55:	add    rdi,0x1
    6502fc59:	imul   rcx
    6502fc5c:	add    rdx,rcx
    6502fc5f:	sar    rdx,0x6
    6502fc63:	mov    rax,rdx
    6502fc66:	shr    rax,0x3f
    6502fc6a:	add    rdx,rax
    6502fc6d:	lea    eax,[rdx+0x30]
    6502fc70:	imul   rdx,rdx,0xffffffffffffff9c
    6502fc74:	mov    BYTE PTR [rdi-0x1],al
    6502fc77:	add    rcx,rdx
    6502fc7a:	cmp    rdi,r8
    6502fc7d:	jne    0x6502fc85
    6502fc7f:	cmp    rcx,0xa
    6502fc83:	jl     0x6502fcb1
    6502fc85:	movabs rax,0x6666666666666667
    6502fc8f:	add    rdi,0x1
    6502fc93:	imul   rcx
    6502fc96:	sar    rdx,0x2
    6502fc9a:	mov    rax,rdx
    6502fc9d:	shr    rax,0x3f
    6502fca1:	add    rdx,rax
    6502fca4:	lea    eax,[rdx+0x30]
    6502fca7:	imul   rdx,rdx,0xfffffffffffffff6
    6502fcab:	mov    BYTE PTR [rdi-0x1],al
    6502fcae:	add    rcx,rdx
    6502fcb1:	add    cl,0x30
    6502fcb4:	mov    BYTE PTR [rdi],cl
    6502fcb6:	mov    BYTE PTR [rdi+0x1],0x0
    6502fcba:	test   r15b,r15b
    6502fcbd:	je     0x6502fcc6
    6502fcbf:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502fcc6:	xor    eax,eax
    6502fcc8:	mov    rbx,QWORD PTR [rsp+0xa0]
    6502fcd0:	add    rsp,0x50
    6502fcd4:	pop    r15
    6502fcd6:	pop    r14
    6502fcd8:	pop    r13
    6502fcda:	pop    r12
    6502fcdc:	pop    rdi
    6502fcdd:	pop    rsi
    6502fcde:	pop    rbp
    6502fcdf:	ret    
    6502fce0:	mov    QWORD PTR [rsp+0x8],rbx
    6502fce5:	mov    QWORD PTR [rsp+0x18],rbp
    6502fcea:	mov    QWORD PTR [rsp+0x20],rsi
    6502fcef:	mov    QWORD PTR [rsp+0x10],rdx
    6502fcf4:	push   rdi
    6502fcf5:	push   r12
    6502fcf7:	push   r13
    6502fcf9:	push   r14
    6502fcfb:	push   r15
    6502fcfd:	sub    rsp,0x50
    6502fd01:	mov    edi,DWORD PTR [r9+0x4]
    6502fd05:	xor    r12b,r12b
    6502fd08:	mov    rbp,rcx
    6502fd0b:	mov    rcx,QWORD PTR [rsp+0xa8]
    6502fd13:	sub    edi,0x1
    6502fd16:	mov    r14,r9
    6502fd19:	test   rcx,rcx
    6502fd1c:	mov    r15d,r8d
    6502fd1f:	mov    BYTE PTR [rsp+0x48],r12b
    6502fd24:	jne    0x6502fda5
    6502fd26:	call   0x650208c0
    6502fd2b:	mov    rsi,rax
    6502fd2e:	mov    r13,QWORD PTR [rax+0xc0]
    6502fd35:	mov    rbx,QWORD PTR [rax+0xb8]
    6502fd3c:	cmp    r13,QWORD PTR [rip+0x12c5d]        # 0x650429a0
    6502fd43:	mov    QWORD PTR [rsp+0xa8],r13
    6502fd4b:	je     0x6502fd68
    6502fd4d:	mov    ecx,DWORD PTR [rax+0xc8]
    6502fd53:	test   DWORD PTR [rip+0x12acf],ecx        # 0x65042828
    6502fd59:	jne    0x6502fd68
    6502fd5b:	call   0x65023d20
    6502fd60:	mov    QWORD PTR [rsp+0xa8],rax
    6502fd68:	cmp    rbx,QWORD PTR [rip+0x129b1]        # 0x65042720
    6502fd6f:	je     0x6502fd84
    6502fd71:	mov    ecx,DWORD PTR [rsi+0xc8]
    6502fd77:	test   DWORD PTR [rip+0x12aab],ecx        # 0x65042828
    6502fd7d:	jne    0x6502fd84
    6502fd7f:	call   0x650231d0
    6502fd84:	mov    ecx,DWORD PTR [rsi+0xc8]
    6502fd8a:	mov    rdx,QWORD PTR [rsp+0x88]
    6502fd92:	test   cl,0x2
    6502fd95:	jne    0x6502fdd0
    6502fd97:	or     ecx,0x2
    6502fd9a:	mov    r12b,0x1
    6502fd9d:	mov    DWORD PTR [rsi+0xc8],ecx
    6502fda3:	jmp    0x6502fdd0
    6502fda5:	mov    rax,QWORD PTR [rcx]
    6502fda8:	lea    r8,[rsp+0x30]
    6502fdad:	mov    QWORD PTR [r8],rax
    6502fdb0:	mov    rax,QWORD PTR [rcx+0x8]
    6502fdb4:	mov    QWORD PTR [r8+0x8],rax
    6502fdb8:	mov    rax,QWORD PTR [rsp+0x30]
    6502fdbd:	movzx  r12d,BYTE PTR [rsp+0x48]
    6502fdc3:	mov    rsi,QWORD PTR [rsp+0x40]
    6502fdc8:	mov    QWORD PTR [rsp+0xa8],rax
    6502fdd0:	test   rbp,rbp
    6502fdd3:	jne    0x6502fe0c
    6502fdd5:	call   0x650202b0
    6502fdda:	xor    r9d,r9d
    6502fddd:	xor    r8d,r8d
    6502fde0:	mov    DWORD PTR [rax],0x16
    6502fde6:	xor    eax,eax
    6502fde8:	xor    edx,edx
    6502fdea:	xor    ecx,ecx
    6502fdec:	mov    QWORD PTR [rsp+0x20],rax
    6502fdf1:	call   0x6501d850
    6502fdf6:	test   r12b,r12b
    6502fdf9:	je     0x6502fe02
    6502fdfb:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502fe02:	mov    eax,0x16
    6502fe07:	jmp    0x6502ff1c
    6502fe0c:	test   rdx,rdx
    6502fe0f:	je     0x6502fdd5
    6502fe11:	cmp    BYTE PTR [rsp+0xa0],0x0
    6502fe19:	je     0x6502fe38
    6502fe1b:	cmp    edi,r15d
    6502fe1e:	jne    0x6502fe38
    6502fe20:	xor    eax,eax
    6502fe22:	cmp    DWORD PTR [r14],0x2d
    6502fe26:	movsxd rcx,edi
    6502fe29:	sete   al
    6502fe2c:	add    rax,rbp
    6502fe2f:	mov    BYTE PTR [rcx+rax*1],0x30
    6502fe33:	mov    BYTE PTR [rcx+rax*1+0x1],0x0
    6502fe38:	cmp    DWORD PTR [r14],0x2d
    6502fe3c:	jne    0x6502fe46
    6502fe3e:	mov    BYTE PTR [rbp+0x0],0x2d
    6502fe42:	add    rbp,0x1
    6502fe46:	movsxd rax,DWORD PTR [r14+0x4]
    6502fe4a:	test   eax,eax
    6502fe4c:	jg     0x6502fe75
    6502fe4e:	or     rcx,0xffffffffffffffff
    6502fe52:	xor    eax,eax
    6502fe54:	mov    rdi,rbp
    6502fe57:	repnz scas al,BYTE PTR es:[rdi]
    6502fe59:	mov    rdx,rbp
    6502fe5c:	not    rcx
    6502fe5f:	mov    r8,rcx
    6502fe62:	lea    rcx,[rbp+0x1]
    6502fe66:	call   0x6501fbc0
    6502fe6b:	mov    BYTE PTR [rbp+0x0],0x30
    6502fe6f:	add    rbp,0x1
    6502fe73:	jmp    0x6502fe78
    6502fe75:	add    rbp,rax
    6502fe78:	test   r15d,r15d
    6502fe7b:	jle    0x6502ff0e
    6502fe81:	or     rcx,0xffffffffffffffff
    6502fe85:	xor    eax,eax
    6502fe87:	mov    rdi,rbp
    6502fe8a:	repnz scas al,BYTE PTR es:[rdi]
    6502fe8c:	lea    r13,[rbp+0x1]
    6502fe90:	mov    rdx,rbp
    6502fe93:	not    rcx
    6502fe96:	mov    r8,rcx
    6502fe99:	mov    rcx,r13
    6502fe9c:	call   0x6501fbc0
    6502fea1:	mov    rcx,QWORD PTR [rsp+0xa8]
    6502fea9:	mov    rdx,QWORD PTR [rcx+0x128]
    6502feb0:	mov    rax,QWORD PTR [rdx]
    6502feb3:	movzx  ecx,BYTE PTR [rax]
    6502feb6:	mov    BYTE PTR [rbp+0x0],cl
    6502feb9:	mov    ebx,DWORD PTR [r14+0x4]
    6502febd:	test   ebx,ebx
    6502febf:	jns    0x6502ff0e
    6502fec1:	neg    ebx
    6502fec3:	cmp    BYTE PTR [rsp+0xa0],0x0
    6502fecb:	jne    0x6502fed8
    6502fecd:	mov    eax,ebx
    6502fecf:	mov    ebx,r15d
    6502fed2:	cmp    r15d,eax
    6502fed5:	cmovge ebx,eax
    6502fed8:	test   ebx,ebx
    6502feda:	je     0x6502fefe
    6502fedc:	xor    eax,eax
    6502fede:	or     rcx,0xffffffffffffffff
    6502fee2:	mov    rdi,r13
    6502fee5:	repnz scas al,BYTE PTR es:[rdi]
    6502fee7:	movsxd rax,ebx
    6502feea:	mov    rdx,r13
    6502feed:	not    rcx
    6502fef0:	add    rax,r13
    6502fef3:	mov    r8,rcx
    6502fef6:	mov    rcx,rax
    6502fef9:	call   0x6501fbc0
    6502fefe:	movsxd r8,ebx
    6502ff01:	mov    edx,0x30
    6502ff06:	mov    rcx,r13
    6502ff09:	call   0x6501ee30
    6502ff0e:	test   r12b,r12b
    6502ff11:	je     0x6502ff1a
    6502ff13:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502ff1a:	xor    eax,eax
    6502ff1c:	lea    r11,[rsp+0x50]
    6502ff21:	mov    rbx,QWORD PTR [r11+0x30]
    6502ff25:	mov    rbp,QWORD PTR [r11+0x40]
    6502ff29:	mov    rsi,QWORD PTR [r11+0x48]
    6502ff2d:	mov    rsp,r11
    6502ff30:	pop    r15
    6502ff32:	pop    r14
    6502ff34:	pop    r13
    6502ff36:	pop    r12
    6502ff38:	pop    rdi
    6502ff39:	ret    
    6502ff3a:	int3   
    6502ff3b:	int3   
    6502ff3c:	int3   
    6502ff3d:	int3   
    6502ff3e:	int3   
    6502ff3f:	int3   
    6502ff40:	rex push rbx
    6502ff42:	push   rbp
    6502ff43:	push   rsi
    6502ff44:	push   rdi
    6502ff45:	sub    rsp,0x78
    6502ff49:	mov    rax,QWORD PTR [rip+0x121d0]        # 0x65042120
    6502ff50:	xor    rax,rsp
    6502ff53:	mov    QWORD PTR [rsp+0x60],rax
    6502ff58:	mov    rcx,QWORD PTR [rcx]
    6502ff5b:	mov    rbp,QWORD PTR [rsp+0xc0]
    6502ff63:	mov    rbx,r8
    6502ff66:	mov    rdi,rdx
    6502ff69:	mov    esi,r9d
    6502ff6c:	lea    r8,[rsp+0x48]
    6502ff71:	lea    rdx,[rsp+0x30]
    6502ff76:	mov    r9d,0x16
    6502ff7c:	call   0x65030750
    6502ff81:	test   rdi,rdi
    6502ff84:	jne    0x6502ffac
    6502ff86:	call   0x650202b0
    6502ff8b:	xor    ecx,ecx
    6502ff8d:	xor    r9d,r9d
    6502ff90:	xor    r8d,r8d
    6502ff93:	xor    edx,edx
    6502ff95:	mov    DWORD PTR [rax],0x16
    6502ff9b:	mov    QWORD PTR [rsp+0x20],rcx
    6502ffa0:	call   0x6501d850
    6502ffa5:	mov    eax,0x16
    6502ffaa:	jmp    0x65030015
    6502ffac:	test   rbx,rbx
    6502ffaf:	je     0x6502ff86
    6502ffb1:	mov    r9d,DWORD PTR [rsp+0x30]
    6502ffb6:	xor    ecx,ecx
    6502ffb8:	cmp    rbx,0xffffffffffffffff
    6502ffbc:	jne    0x6502ffc3
    6502ffbe:	or     rdx,rbx
    6502ffc1:	jmp    0x6502ffd3
    6502ffc3:	cmp    r9d,0x2d
    6502ffc7:	mov    rax,rcx
    6502ffca:	mov    rdx,rbx
    6502ffcd:	sete   al
    6502ffd0:	sub    rdx,rax
    6502ffd3:	mov    r8d,DWORD PTR [rsp+0x34]
    6502ffd8:	add    r8d,esi
    6502ffdb:	cmp    r9d,0x2d
    6502ffdf:	lea    r9,[rsp+0x30]
    6502ffe4:	sete   cl
    6502ffe7:	add    rcx,rdi
    6502ffea:	call   0x65030630
    6502ffef:	test   eax,eax
    6502fff1:	je     0x6502fff8
    6502fff3:	mov    BYTE PTR [rdi],0x0
    6502fff6:	jmp    0x65030015
    6502fff8:	lea    r9,[rsp+0x30]
    6502fffd:	mov    r8d,esi
    65030000:	mov    rdx,rbx
    65030003:	mov    rcx,rdi
    65030006:	mov    QWORD PTR [rsp+0x28],rbp
    6503000b:	mov    BYTE PTR [rsp+0x20],0x0
    65030010:	call   0x6502fce0
    65030015:	mov    rcx,QWORD PTR [rsp+0x60]
    6503001a:	xor    rcx,rsp
    6503001d:	call   0x6501e4e0
    65030022:	add    rsp,0x78
    65030026:	pop    rdi
    65030027:	pop    rsi
    65030028:	pop    rbp
    65030029:	pop    rbx
    6503002a:	ret    
    6503002b:	int3   
    6503002c:	int3   
    6503002d:	int3   
    6503002e:	int3   
    6503002f:	int3   
    65030030:	rex push rbp
    65030032:	push   rsi
    65030033:	push   rdi
    65030034:	push   r13
    65030036:	sub    rsp,0x98
    6503003d:	mov    rax,QWORD PTR [rip+0x120dc]        # 0x65042120
    65030044:	xor    rax,rsp
    65030047:	mov    QWORD PTR [rsp+0x70],rax
    6503004c:	mov    rcx,QWORD PTR [rcx]
    6503004f:	mov    r13,QWORD PTR [rsp+0xe8]
    65030057:	mov    rdi,r8
    6503005a:	mov    rsi,rdx
    6503005d:	mov    ebp,r9d
    65030060:	lea    r8,[rsp+0x58]
    65030065:	lea    rdx,[rsp+0x40]
    6503006a:	mov    r9d,0x16
    65030070:	call   0x65030750
    65030075:	test   rsi,rsi
    65030078:	jne    0x650300a3
    6503007a:	call   0x650202b0
    6503007f:	xor    ecx,ecx
    65030081:	xor    r9d,r9d
    65030084:	xor    r8d,r8d
    65030087:	xor    edx,edx
    65030089:	mov    DWORD PTR [rax],0x16
    6503008f:	mov    QWORD PTR [rsp+0x20],rcx
    65030094:	call   0x6501d850
    65030099:	mov    eax,0x16
    6503009e:	jmp    0x6503017a
    650300a3:	test   rdi,rdi
    650300a6:	je     0x6503007a
    650300a8:	xor    ecx,ecx
    650300aa:	mov    QWORD PTR [rsp+0x90],rbx
    650300b2:	mov    QWORD PTR [rsp+0x88],r12
    650300ba:	mov    r12d,DWORD PTR [rsp+0x44]
    650300bf:	add    r12d,0xffffffff
    650300c3:	cmp    DWORD PTR [rsp+0x40],0x2d
    650300c8:	sete   cl
    650300cb:	cmp    rdi,0xffffffffffffffff
    650300cf:	lea    rbx,[rcx+rsi*1]
    650300d3:	jne    0x650300da
    650300d5:	or     rdx,rdi
    650300d8:	jmp    0x650300e0
    650300da:	mov    rdx,rdi
    650300dd:	sub    rdx,rcx
    650300e0:	lea    r9,[rsp+0x40]
    650300e5:	mov    r8d,ebp
    650300e8:	mov    rcx,rbx
    650300eb:	call   0x65030630
    650300f0:	test   eax,eax
    650300f2:	je     0x650300f9
    650300f4:	mov    BYTE PTR [rsi],0x0
    650300f7:	jmp    0x6503016a
    650300f9:	mov    eax,DWORD PTR [rsp+0x44]
    650300fd:	add    eax,0xffffffff
    65030100:	cmp    r12d,eax
    65030103:	setl   cl
    65030106:	cmp    eax,0xfffffffc
    65030109:	jl     0x65030140
    6503010b:	cmp    eax,ebp
    6503010d:	jge    0x65030140
    6503010f:	test   cl,cl
    65030111:	je     0x65030121
    65030113:	movzx  eax,BYTE PTR [rbx]
    65030116:	add    rbx,0x1
    6503011a:	test   al,al
    6503011c:	jne    0x65030113
    6503011e:	mov    BYTE PTR [rbx-0x2],al
    65030121:	lea    r9,[rsp+0x40]
    65030126:	mov    r8d,ebp
    65030129:	mov    rdx,rdi
    6503012c:	mov    rcx,rsi
    6503012f:	mov    QWORD PTR [rsp+0x28],r13
    65030134:	mov    BYTE PTR [rsp+0x20],0x1
    65030139:	call   0x6502fce0
    6503013e:	jmp    0x6503016a
    65030140:	mov    r9d,DWORD PTR [rsp+0xe0]
    65030148:	lea    rax,[rsp+0x40]
    6503014d:	mov    QWORD PTR [rsp+0x30],r13
    65030152:	mov    r8d,ebp
    65030155:	mov    rdx,rdi
    65030158:	mov    rcx,rsi
    6503015b:	mov    BYTE PTR [rsp+0x28],0x1
    65030160:	mov    QWORD PTR [rsp+0x20],rax
    65030165:	call   0x6502f3c0
    6503016a:	mov    rbx,QWORD PTR [rsp+0x90]
    65030172:	mov    r12,QWORD PTR [rsp+0x88]
    6503017a:	mov    rcx,QWORD PTR [rsp+0x70]
    6503017f:	xor    rcx,rsp
    65030182:	call   0x6501e4e0
    65030187:	add    rsp,0x98
    6503018e:	pop    r13
    65030190:	pop    rdi
    65030191:	pop    rsi
    65030192:	pop    rbp
    65030193:	ret    
    65030194:	int3   
    65030195:	int3   
    65030196:	int3   
    65030197:	int3   
    65030198:	int3   
    65030199:	int3   
    6503019a:	int3   
    6503019b:	int3   
    6503019c:	int3   
    6503019d:	int3   
    6503019e:	int3   
    6503019f:	int3   
    650301a0:	sub    rsp,0x38
    650301a4:	cmp    r9d,0x65
    650301a8:	je     0x6503021d
    650301aa:	cmp    r9d,0x45
    650301ae:	je     0x6503021d
    650301b0:	cmp    r9d,0x66
    650301b4:	jne    0x650301cf
    650301b6:	mov    rax,QWORD PTR [rsp+0x70]
    650301bb:	mov    r9d,DWORD PTR [rsp+0x60]
    650301c0:	mov    QWORD PTR [rsp+0x20],rax
    650301c5:	call   0x6502ff40
    650301ca:	add    rsp,0x38
    650301ce:	ret    
    650301cf:	cmp    r9d,0x61
    650301d3:	je     0x650301fc
    650301d5:	cmp    r9d,0x41
    650301d9:	je     0x650301fc
    650301db:	mov    rax,QWORD PTR [rsp+0x70]
    650301e0:	mov    r9d,DWORD PTR [rsp+0x60]
    650301e5:	mov    QWORD PTR [rsp+0x28],rax
    650301ea:	mov    eax,DWORD PTR [rsp+0x68]
    650301ee:	mov    DWORD PTR [rsp+0x20],eax
    650301f2:	call   0x65030030
    650301f7:	add    rsp,0x38
    650301fb:	ret    
    650301fc:	mov    rax,QWORD PTR [rsp+0x70]
    65030201:	mov    r9d,DWORD PTR [rsp+0x60]
    65030206:	mov    QWORD PTR [rsp+0x28],rax
    6503020b:	mov    eax,DWORD PTR [rsp+0x68]
    6503020f:	mov    DWORD PTR [rsp+0x20],eax
    65030213:	call   0x6502f820
    65030218:	add    rsp,0x38
    6503021c:	ret    
    6503021d:	mov    rax,QWORD PTR [rsp+0x70]
    65030222:	mov    r9d,DWORD PTR [rsp+0x60]
    65030227:	mov    QWORD PTR [rsp+0x28],rax
    6503022c:	mov    eax,DWORD PTR [rsp+0x68]
    65030230:	mov    DWORD PTR [rsp+0x20],eax
    65030234:	call   0x6502f700
    65030239:	add    rsp,0x38
    6503023d:	ret    
    6503023e:	int3   
    6503023f:	int3   
    65030240:	sub    rsp,0x38
    65030244:	cmp    r9d,0x65
    65030248:	je     0x650302ba
    6503024a:	cmp    r9d,0x45
    6503024e:	je     0x650302ba
    65030250:	cmp    r9d,0x66
    65030254:	jne    0x6503026e
    65030256:	mov    r9d,DWORD PTR [rsp+0x60]
    6503025b:	mov    QWORD PTR [rsp+0x20],0x0
    65030264:	call   0x6502ff40
    65030269:	add    rsp,0x38
    6503026d:	ret    
    6503026e:	cmp    r9d,0x61
    65030272:	je     0x6503029a
    65030274:	cmp    r9d,0x41
    65030278:	je     0x6503029a
    6503027a:	mov    eax,DWORD PTR [rsp+0x68]
    6503027e:	mov    r9d,DWORD PTR [rsp+0x60]
    65030283:	mov    QWORD PTR [rsp+0x28],0x0
    6503028c:	mov    DWORD PTR [rsp+0x20],eax
    65030290:	call   0x65030030
    65030295:	add    rsp,0x38
    65030299:	ret    
    6503029a:	mov    eax,DWORD PTR [rsp+0x68]
    6503029e:	mov    r9d,DWORD PTR [rsp+0x60]
    650302a3:	mov    QWORD PTR [rsp+0x28],0x0
    650302ac:	mov    DWORD PTR [rsp+0x20],eax
    650302b0:	call   0x6502f820
    650302b5:	add    rsp,0x38
    650302b9:	ret    
    650302ba:	mov    eax,DWORD PTR [rsp+0x68]
    650302be:	mov    r9d,DWORD PTR [rsp+0x60]
    650302c3:	mov    QWORD PTR [rsp+0x28],0x0
    650302cc:	mov    DWORD PTR [rsp+0x20],eax
    650302d0:	call   0x6502f700
    650302d5:	add    rsp,0x38
    650302d9:	ret    
    650302da:	int3   
    650302db:	int3   
    650302dc:	int3   
    650302dd:	int3   
    650302de:	int3   
    650302df:	int3   
    650302e0:	mov    r8,rcx
    650302e3:	movzx  eax,BYTE PTR [rcx]
    650302e6:	add    rcx,0x1
    650302ea:	test   al,al
    650302ec:	jne    0x650302e3
    650302ee:	xchg   ax,ax
    650302f0:	sub    rcx,0x1
    650302f4:	cmp    rcx,r8
    650302f7:	je     0x65030301
    650302f9:	cmp    BYTE PTR [rcx],dl
    650302fb:	jne    0x650302f0
    650302fd:	mov    rax,rcx
    65030300:	ret    
    65030301:	cmp    BYTE PTR [rcx],dl
    65030303:	jne    0x65030309
    65030305:	mov    rax,rcx
    65030308:	ret    
    65030309:	xor    eax,eax
    6503030b:	ret    
    6503030c:	int3   
    6503030d:	int3   
    6503030e:	int3   
    6503030f:	int3   
    65030310:	mov    QWORD PTR [rsp+0x20],rbx
    65030315:	push   rdi
    65030316:	sub    rsp,0x80
    6503031d:	mov    rax,QWORD PTR [rip+0x11dfc]        # 0x65042120
    65030324:	xor    rax,rsp
    65030327:	mov    QWORD PTR [rsp+0x78],rax
    6503032c:	test   r8,r8
    6503032f:	mov    rbx,rdx
    65030332:	mov    rdi,rcx
    65030335:	mov    BYTE PTR [rsp+0x58],0x0
    6503033a:	jne    0x650303d1
    65030340:	call   0x650208c0
    65030345:	mov    QWORD PTR [rsp+0x50],rax
    6503034a:	mov    r11,rax
    6503034d:	mov    rcx,QWORD PTR [rax+0xc0]
    65030354:	cmp    rcx,QWORD PTR [rip+0x12645]        # 0x650429a0
    6503035b:	mov    QWORD PTR [rsp+0x40],rcx
    65030360:	mov    rax,QWORD PTR [rax+0xb8]
    65030367:	mov    QWORD PTR [rsp+0x48],rax
    6503036c:	je     0x65030391
    6503036e:	mov    ecx,DWORD PTR [r11+0xc8]
    65030375:	test   DWORD PTR [rip+0x124ad],ecx        # 0x65042828
    6503037b:	jne    0x65030391
    6503037d:	call   0x65023d20
    65030382:	mov    r11,QWORD PTR [rsp+0x50]
    65030387:	mov    QWORD PTR [rsp+0x40],rax
    6503038c:	mov    rax,QWORD PTR [rsp+0x48]
    65030391:	cmp    rax,QWORD PTR [rip+0x12388]        # 0x65042720
    65030398:	je     0x650303b8
    6503039a:	mov    eax,DWORD PTR [r11+0xc8]
    650303a1:	test   DWORD PTR [rip+0x12481],eax        # 0x65042828
    650303a7:	jne    0x650303b8
    650303a9:	call   0x650231d0
    650303ae:	mov    r11,QWORD PTR [rsp+0x50]
    650303b3:	mov    QWORD PTR [rsp+0x48],rax
    650303b8:	test   BYTE PTR [r11+0xc8],0x2
    650303c0:	jne    0x650303e4
    650303c2:	or     DWORD PTR [r11+0xc8],0x2
    650303ca:	mov    BYTE PTR [rsp+0x58],0x1
    650303cf:	jmp    0x650303e4
    650303d1:	mov    rax,QWORD PTR [r8]
    650303d4:	lea    rcx,[rsp+0x40]
    650303d9:	mov    QWORD PTR [rcx],rax
    650303dc:	mov    rax,QWORD PTR [r8+0x8]
    650303e0:	mov    QWORD PTR [rcx+0x8],rax
    650303e4:	lea    rax,[rsp+0x40]
    650303e9:	lea    rdx,[rsp+0x60]
    650303ee:	lea    rcx,[rsp+0x68]
    650303f3:	mov    QWORD PTR [rsp+0x38],rax
    650303f8:	xor    eax,eax
    650303fa:	xor    r9d,r9d
    650303fd:	mov    DWORD PTR [rsp+0x30],eax
    65030401:	mov    DWORD PTR [rsp+0x28],eax
    65030405:	mov    r8,rbx
    65030408:	mov    DWORD PTR [rsp+0x20],eax
    6503040c:	call   0x65031640
    65030411:	lea    rcx,[rsp+0x68]
    65030416:	mov    rdx,rdi
    65030419:	mov    ebx,eax
    6503041b:	call   0x650308c0
    65030420:	test   bl,0x3
    65030423:	jne    0x65030463
    65030425:	cmp    eax,0x1
    65030428:	jne    0x65030444
    6503042a:	cmp    BYTE PTR [rsp+0x58],0x0
    6503042f:	je     0x6503043d
    65030431:	mov    rax,QWORD PTR [rsp+0x50]
    65030436:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6503043d:	mov    eax,0x3
    65030442:	jmp    0x65030482
    65030444:	cmp    eax,0x2
    65030447:	jne    0x6503046d
    65030449:	cmp    BYTE PTR [rsp+0x58],0x0
    6503044e:	je     0x6503045c
    65030450:	mov    rax,QWORD PTR [rsp+0x50]
    65030455:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6503045c:	mov    eax,0x4
    65030461:	jmp    0x65030482
    65030463:	test   bl,0x1
    65030466:	jne    0x65030449
    65030468:	test   bl,0x2
    6503046b:	jne    0x6503042a
    6503046d:	cmp    BYTE PTR [rsp+0x58],0x0
    65030472:	je     0x65030480
    65030474:	mov    rax,QWORD PTR [rsp+0x50]
    65030479:	and    DWORD PTR [rax+0xc8],0xfffffffd
    65030480:	xor    eax,eax
    65030482:	mov    rcx,QWORD PTR [rsp+0x78]
    65030487:	xor    rcx,rsp
    6503048a:	call   0x6501e4e0
    6503048f:	mov    rbx,QWORD PTR [rsp+0xa8]
    65030497:	add    rsp,0x80
    6503049e:	pop    rdi
    6503049f:	ret    
    650304a0:	mov    QWORD PTR [rsp+0x20],rbx
    650304a5:	push   rdi
    650304a6:	sub    rsp,0x80
    650304ad:	mov    rax,QWORD PTR [rip+0x11c6c]        # 0x65042120
    650304b4:	xor    rax,rsp
    650304b7:	mov    QWORD PTR [rsp+0x78],rax
    650304bc:	test   r8,r8
    650304bf:	mov    rbx,rdx
    650304c2:	mov    rdi,rcx
    650304c5:	mov    BYTE PTR [rsp+0x58],0x0
    650304ca:	jne    0x65030561
    650304d0:	call   0x650208c0
    650304d5:	mov    QWORD PTR [rsp+0x50],rax
    650304da:	mov    r11,rax
    650304dd:	mov    rcx,QWORD PTR [rax+0xc0]
    650304e4:	cmp    rcx,QWORD PTR [rip+0x124b5]        # 0x650429a0
    650304eb:	mov    QWORD PTR [rsp+0x40],rcx
    650304f0:	mov    rax,QWORD PTR [rax+0xb8]
    650304f7:	mov    QWORD PTR [rsp+0x48],rax
    650304fc:	je     0x65030521
    650304fe:	mov    ecx,DWORD PTR [r11+0xc8]
    65030505:	test   DWORD PTR [rip+0x1231d],ecx        # 0x65042828
    6503050b:	jne    0x65030521
    6503050d:	call   0x65023d20
    65030512:	mov    r11,QWORD PTR [rsp+0x50]
    65030517:	mov    QWORD PTR [rsp+0x40],rax
    6503051c:	mov    rax,QWORD PTR [rsp+0x48]
    65030521:	cmp    rax,QWORD PTR [rip+0x121f8]        # 0x65042720
    65030528:	je     0x65030548
    6503052a:	mov    eax,DWORD PTR [r11+0xc8]
    65030531:	test   DWORD PTR [rip+0x122f1],eax        # 0x65042828
    65030537:	jne    0x65030548
    65030539:	call   0x650231d0
    6503053e:	mov    r11,QWORD PTR [rsp+0x50]
    65030543:	mov    QWORD PTR [rsp+0x48],rax
    65030548:	test   BYTE PTR [r11+0xc8],0x2
    65030550:	jne    0x65030574
    65030552:	or     DWORD PTR [r11+0xc8],0x2
    6503055a:	mov    BYTE PTR [rsp+0x58],0x1
    6503055f:	jmp    0x65030574
    65030561:	mov    rax,QWORD PTR [r8]
    65030564:	lea    rcx,[rsp+0x40]
    65030569:	mov    QWORD PTR [rcx],rax
    6503056c:	mov    rax,QWORD PTR [r8+0x8]
    65030570:	mov    QWORD PTR [rcx+0x8],rax
    65030574:	lea    rax,[rsp+0x40]
    65030579:	lea    rdx,[rsp+0x60]
    6503057e:	lea    rcx,[rsp+0x68]
    65030583:	mov    QWORD PTR [rsp+0x38],rax
    65030588:	xor    eax,eax
    6503058a:	xor    r9d,r9d
    6503058d:	mov    DWORD PTR [rsp+0x30],eax
    65030591:	mov    DWORD PTR [rsp+0x28],eax
    65030595:	mov    r8,rbx
    65030598:	mov    DWORD PTR [rsp+0x20],eax
    6503059c:	call   0x65031640
    650305a1:	lea    rcx,[rsp+0x68]
    650305a6:	mov    rdx,rdi
    650305a9:	mov    ebx,eax
    650305ab:	call   0x65030f80
    650305b0:	test   bl,0x3
    650305b3:	jne    0x650305f3
    650305b5:	cmp    eax,0x1
    650305b8:	jne    0x650305d4
    650305ba:	cmp    BYTE PTR [rsp+0x58],0x0
    650305bf:	je     0x650305cd
    650305c1:	mov    rax,QWORD PTR [rsp+0x50]
    650305c6:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650305cd:	mov    eax,0x3
    650305d2:	jmp    0x65030612
    650305d4:	cmp    eax,0x2
    650305d7:	jne    0x650305fd
    650305d9:	cmp    BYTE PTR [rsp+0x58],0x0
    650305de:	je     0x650305ec
    650305e0:	mov    rax,QWORD PTR [rsp+0x50]
    650305e5:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650305ec:	mov    eax,0x4
    650305f1:	jmp    0x65030612
    650305f3:	test   bl,0x1
    650305f6:	jne    0x650305d9
    650305f8:	test   bl,0x2
    650305fb:	jne    0x650305ba
    650305fd:	cmp    BYTE PTR [rsp+0x58],0x0
    65030602:	je     0x65030610
    65030604:	mov    rax,QWORD PTR [rsp+0x50]
    65030609:	and    DWORD PTR [rax+0xc8],0xfffffffd
    65030610:	xor    eax,eax
    65030612:	mov    rcx,QWORD PTR [rsp+0x78]
    65030617:	xor    rcx,rsp
    6503061a:	call   0x6501e4e0
    6503061f:	mov    rbx,QWORD PTR [rsp+0xa8]
    65030627:	add    rsp,0x80
    6503062e:	pop    rdi
    6503062f:	ret    
    65030630:	rex push rdi
    65030632:	sub    rsp,0x30
    65030636:	test   rcx,rcx
    65030639:	mov    rdi,QWORD PTR [r9+0x10]
    6503063d:	mov    r10,rcx
    65030640:	jne    0x65030670
    65030642:	call   0x650202b0
    65030647:	xor    r9d,r9d
    6503064a:	xor    r8d,r8d
    6503064d:	xor    edx,edx
    6503064f:	xor    ecx,ecx
    65030651:	mov    QWORD PTR [rsp+0x20],0x0
    6503065a:	mov    DWORD PTR [rax],0x16
    65030660:	call   0x6501d850
    65030665:	mov    eax,0x16
    6503066a:	add    rsp,0x30
    6503066e:	pop    rdi
    6503066f:	ret    
    65030670:	test   rdx,rdx
    65030673:	je     0x65030642
    65030675:	xor    eax,eax
    65030677:	test   r8d,r8d
    6503067a:	mov    BYTE PTR [rcx],0x0
    6503067d:	cmovg  eax,r8d
    65030681:	add    eax,0x1
    65030684:	cdqe   
    65030686:	cmp    rdx,rax
    65030689:	ja     0x650306b9
    6503068b:	call   0x650202b0
    65030690:	xor    r9d,r9d
    65030693:	xor    r8d,r8d
    65030696:	xor    edx,edx
    65030698:	xor    ecx,ecx
    6503069a:	mov    QWORD PTR [rsp+0x20],0x0
    650306a3:	mov    DWORD PTR [rax],0x22
    650306a9:	call   0x6501d850
    650306ae:	mov    eax,0x22
    650306b3:	add    rsp,0x30
    650306b7:	pop    rdi
    650306b8:	ret    
    650306b9:	test   r8d,r8d
    650306bc:	mov    BYTE PTR [rcx],0x30
    650306bf:	lea    rax,[rcx+0x1]
    650306c3:	jle    0x650306e9
    650306c5:	movzx  ecx,BYTE PTR [rdi]
    650306c8:	test   cl,cl
    650306ca:	je     0x650306d5
    650306cc:	movsx  edx,cl
    650306cf:	add    rdi,0x1
    650306d3:	jmp    0x650306da
    650306d5:	mov    edx,0x30
    650306da:	sub    r8d,0x1
    650306de:	mov    BYTE PTR [rax],dl
    650306e0:	add    rax,0x1
    650306e4:	test   r8d,r8d
    650306e7:	jg     0x650306c5
    650306e9:	test   r8d,r8d
    650306ec:	mov    BYTE PTR [rax],0x0
    650306ef:	js     0x6503070f
    650306f1:	cmp    BYTE PTR [rdi],0x35
    650306f4:	jl     0x6503070f
    650306f6:	sub    rax,0x1
    650306fa:	cmp    BYTE PTR [rax],0x39
    650306fd:	jne    0x6503070c
    650306ff:	nop
    65030700:	mov    BYTE PTR [rax],0x30
    65030703:	sub    rax,0x1
    65030707:	cmp    BYTE PTR [rax],0x39
    6503070a:	je     0x65030700
    6503070c:	add    BYTE PTR [rax],0x1
    6503070f:	cmp    BYTE PTR [r10],0x31
    65030713:	jne    0x65030722
    65030715:	add    DWORD PTR [r9+0x4],0x1
    6503071a:	xor    eax,eax
    6503071c:	add    rsp,0x30
    65030720:	pop    rdi
    65030721:	ret    
    65030722:	or     rcx,0xffffffffffffffff
    65030726:	lea    rdi,[r10+0x1]
    6503072a:	xor    eax,eax
    6503072c:	repnz scas al,BYTE PTR es:[rdi]
    6503072e:	lea    rdx,[r10+0x1]
    65030732:	not    rcx
    65030735:	mov    r8,rcx
    65030738:	mov    rcx,r10
    6503073b:	call   0x6501fbc0
    65030740:	xor    eax,eax
    65030742:	add    rsp,0x30
    65030746:	pop    rdi
    65030747:	ret    
    65030748:	int3   
    65030749:	int3   
    6503074a:	int3   
    6503074b:	int3   
    6503074c:	int3   
    6503074d:	int3   
    6503074e:	int3   
    6503074f:	int3   
    65030750:	rex push rbx
    65030752:	push   rbp
    65030753:	push   rsi
    65030754:	sub    rsp,0x80
    6503075b:	mov    rax,QWORD PTR [rip+0x119be]        # 0x65042120
    65030762:	xor    rax,rsp
    65030765:	mov    QWORD PTR [rsp+0x70],rax
    6503076a:	mov    rbp,r9
    6503076d:	mov    rsi,r8
    65030770:	mov    r9,rcx
    65030773:	shr    r9,0x30
    65030777:	mov    rax,rcx
    6503077a:	mov    rbx,rdx
    6503077d:	movzx  r8d,r9w
    65030781:	shr    rax,0x20
    65030785:	and    r9w,0x8000
    6503078b:	shr    r8w,0x4
    65030790:	and    eax,0xfffff
    65030795:	mov    r10d,0x80000000
    6503079b:	and    r8w,0x7ff
    650307a1:	movzx  edx,r8w
    650307a5:	test   edx,edx
    650307a7:	je     0x650307c0
    650307a9:	cmp    edx,0x7ff
    650307af:	je     0x650307b9
    650307b1:	add    r8w,0x3c00
    650307b7:	jmp    0x650307db
    650307b9:	mov    r8w,0x7fff
    650307be:	jmp    0x650307db
    650307c0:	test   eax,eax
    650307c2:	jne    0x650307d2
    650307c4:	test   ecx,ecx
    650307c6:	jne    0x650307d2
    650307c8:	mov    DWORD PTR [rsp+0x44],ecx
    650307cc:	mov    DWORD PTR [rsp+0x40],ecx
    650307d0:	jmp    0x65030823
    650307d2:	add    r8w,0x3c01
    650307d8:	xor    r10d,r10d
    650307db:	mov    edx,ecx
    650307dd:	shl    eax,0xb
    650307e0:	shl    ecx,0xb
    650307e3:	shr    edx,0x15
    650307e6:	mov    DWORD PTR [rsp+0x40],ecx
    650307ea:	or     edx,eax
    650307ec:	or     edx,r10d
    650307ef:	bt     edx,0x1f
    650307f3:	mov    DWORD PTR [rsp+0x44],edx
    650307f7:	jb     0x6503081f
    650307f9:	data16 xchg ax,ax
    650307fc:	data16 data16 xchg ax,ax
    65030800:	mov    eax,ecx
    65030802:	add    edx,edx
    65030804:	add    ecx,ecx
    65030806:	shr    eax,0x1f
    65030809:	add    r8w,0xffff
    6503080f:	mov    DWORD PTR [rsp+0x40],ecx
    65030813:	or     edx,eax
    65030815:	bt     edx,0x1f
    65030819:	jae    0x65030800
    6503081b:	mov    DWORD PTR [rsp+0x44],edx
    6503081f:	or     r9w,r8w
    65030823:	mov    WORD PTR [rsp+0x48],r9w
    65030829:	lea    rdx,[rsp+0x30]
    6503082e:	lea    rcx,[rsp+0x40]
    65030833:	mov    rax,QWORD PTR [rcx]
    65030836:	xor    r8d,r8d
    65030839:	lea    r9,[rsp+0x50]
    6503083e:	mov    QWORD PTR [rdx],rax
    65030841:	movzx  eax,WORD PTR [rcx+0x8]
    65030845:	lea    rcx,[rsp+0x30]
    6503084a:	mov    WORD PTR [rdx+0x8],ax
    6503084e:	lea    edx,[r8+0x11]
    65030852:	call   0x65032070
    65030857:	lea    r8,[rsp+0x54]
    6503085c:	mov    rdx,rbp
    6503085f:	mov    DWORD PTR [rbx+0x8],eax
    65030862:	movsx  eax,BYTE PTR [rsp+0x52]
    65030867:	mov    rcx,rsi
    6503086a:	mov    DWORD PTR [rbx],eax
    6503086c:	movsx  eax,WORD PTR [rsp+0x50]
    65030871:	mov    DWORD PTR [rbx+0x4],eax
    65030874:	call   0x650201b0
    65030879:	test   eax,eax
    6503087b:	je     0x65030895
    6503087d:	xor    r9d,r9d
    65030880:	xor    r8d,r8d
    65030883:	xor    edx,edx
    65030885:	xor    ecx,ecx
    65030887:	mov    QWORD PTR [rsp+0x20],0x0
    65030890:	call   0x6501d7b0
    65030895:	mov    rax,rbx
    65030898:	mov    QWORD PTR [rbx+0x10],rsi
    6503089c:	mov    rcx,QWORD PTR [rsp+0x70]
    650308a1:	xor    rcx,rsp
    650308a4:	call   0x6501e4e0
    650308a9:	add    rsp,0x80
    650308b0:	pop    rsi
    650308b1:	pop    rbp
    650308b2:	pop    rbx
    650308b3:	ret    
    650308b4:	int3   
    650308b5:	int3   
    650308b6:	int3   
    650308b7:	int3   
    650308b8:	int3   
    650308b9:	int3   
    650308ba:	int3   
    650308bb:	int3   
    650308bc:	int3   
    650308bd:	int3   
    650308be:	int3   
    650308bf:	int3   
    650308c0:	mov    rax,rsp
    650308c3:	mov    QWORD PTR [rax+0x10],rdx
    650308c7:	push   rdi
    650308c8:	sub    rsp,0x70
    650308cc:	mov    QWORD PTR [rax+0x20],rbx
    650308d0:	mov    QWORD PTR [rax-0x18],rsi
    650308d4:	mov    QWORD PTR [rax-0x38],r15
    650308d8:	movzx  eax,WORD PTR [rcx+0xa]
    650308dc:	mov    r9d,0x1f
    650308e2:	mov    esi,eax
    650308e4:	and    eax,0x8000
    650308e9:	mov    DWORD PTR [rsp+0x80],eax
    650308f0:	mov    eax,DWORD PTR [rcx+0x6]
    650308f3:	and    esi,0x7fff
    650308f9:	mov    DWORD PTR [rsp+0x20],eax
    650308fd:	mov    eax,DWORD PTR [rcx+0x2]
    65030900:	sub    esi,0x3fff
    65030906:	mov    DWORD PTR [rsp+0x24],eax
    6503090a:	movzx  eax,WORD PTR [rcx]
    6503090d:	shl    eax,0x10
    65030910:	cmp    esi,0xffffc001
    65030916:	mov    DWORD PTR [rsp+0x28],eax
    6503091a:	jne    0x65030956
    6503091c:	xor    edi,edi
    6503091e:	mov    r9d,edi
    65030921:	mov    rax,rdi
    65030924:	cmp    DWORD PTR [rsp+rax*4+0x20],edi
    65030928:	jne    0x6503093f
    6503092a:	add    rax,0x1
    6503092e:	cmp    rax,0x3
    65030932:	jl     0x65030924
    65030934:	mov    r15d,0x1f
    6503093a:	jmp    0x65030f0d
    6503093f:	mov    QWORD PTR [rsp+0x20],rdi
    65030944:	mov    DWORD PTR [rsp+0x28],edi
    65030948:	mov    edi,0x2
    6503094d:	lea    r15d,[rdi+0x1d]
    65030951:	jmp    0x65030f0d
    65030956:	mov    QWORD PTR [rsp+0x68],rbp
    6503095b:	lea    rcx,[rsp+0x20]
    65030960:	mov    QWORD PTR [rsp+0x58],r12
    65030965:	mov    rax,QWORD PTR [rcx]
    65030968:	mov    QWORD PTR [rsp+0x50],r13
    6503096d:	mov    QWORD PTR [rsp+0x48],r14
    65030972:	mov    r14d,DWORD PTR [rip+0x12cdf]        # 0x65043658
    65030979:	mov    QWORD PTR [rsp+0x30],rax
    6503097e:	mov    eax,DWORD PTR [rcx+0x8]
    65030981:	mov    DWORD PTR [rsp+0x38],eax
    65030985:	xor    edi,edi
    65030987:	mov    eax,r14d
    6503098a:	cdq    
    6503098b:	mov    r11d,r9d
    6503098e:	or     ebp,0xffffffff
    65030991:	and    edx,r9d
    65030994:	mov    r15d,esi
    65030997:	mov    ebx,edi
    65030999:	add    eax,edx
    6503099b:	mov    r10d,eax
    6503099e:	and    eax,r9d
    650309a1:	sar    r10d,0x5
    650309a5:	sub    eax,edx
    650309a7:	movsxd r12,r10d
    650309aa:	sub    r11d,eax
    650309ad:	mov    ecx,DWORD PTR [rsp+r12*4+0x20]
    650309b2:	bt     ecx,r11d
    650309b6:	jae    0x65030a69
    650309bc:	mov    ecx,r11d
    650309bf:	mov    eax,ebp
    650309c1:	movsxd rdx,r10d
    650309c4:	shl    eax,cl
    650309c6:	not    eax
    650309c8:	test   DWORD PTR [rsp+rdx*4+0x20],eax
    650309cc:	jne    0x650309f2
    650309ce:	lea    eax,[r10+0x1]
    650309d2:	movsxd rcx,eax
    650309d5:	cmp    rcx,0x3
    650309d9:	jge    0x65030a69
    650309df:	nop
    650309e0:	cmp    DWORD PTR [rsp+rcx*4+0x20],ebx
    650309e4:	jne    0x650309f2
    650309e6:	add    rcx,0x1
    650309ea:	cmp    rcx,0x3
    650309ee:	jl     0x650309e0
    650309f0:	jmp    0x65030a69
    650309f2:	mov    ecx,r9d
    650309f5:	lea    eax,[r14-0x1]
    650309f9:	cdq    
    650309fa:	and    edx,r9d
    650309fd:	add    eax,edx
    650309ff:	mov    r8d,eax
    65030a02:	and    eax,r9d
    65030a05:	sub    eax,edx
    65030a07:	sar    r8d,0x5
    65030a0b:	mov    edx,0x1
    65030a10:	sub    ecx,eax
    65030a12:	movsxd r9,r8d
    65030a15:	mov    eax,DWORD PTR [rsp+r9*4+0x20]
    65030a1a:	shl    edx,cl
    65030a1c:	lea    ecx,[rax+rdx*1]
    65030a1f:	cmp    ecx,eax
    65030a21:	jb     0x65030a27
    65030a23:	cmp    ecx,edx
    65030a25:	jae    0x65030a2c
    65030a27:	mov    ebx,0x1
    65030a2c:	lea    eax,[r8-0x1]
    65030a30:	mov    DWORD PTR [rsp+r9*4+0x20],ecx
    65030a35:	test   eax,eax
    65030a37:	movsxd rdx,eax
    65030a3a:	js     0x65030a69
    65030a3c:	data16 data16 xchg ax,ax
    65030a40:	test   ebx,ebx
    65030a42:	je     0x65030a69
    65030a44:	mov    eax,DWORD PTR [rsp+rdx*4+0x20]
    65030a48:	mov    ebx,edi
    65030a4a:	lea    r8d,[rax+0x1]
    65030a4e:	cmp    r8d,eax
    65030a51:	jb     0x65030a59
    65030a53:	cmp    r8d,0x1
    65030a57:	jae    0x65030a5e
    65030a59:	mov    ebx,0x1
    65030a5e:	mov    DWORD PTR [rsp+rdx*4+0x20],r8d
    65030a63:	sub    rdx,0x1
    65030a67:	jns    0x65030a40
    65030a69:	mov    ecx,r11d
    65030a6c:	mov    eax,ebp
    65030a6e:	mov    r13d,0x3
    65030a74:	shl    eax,cl
    65030a76:	and    DWORD PTR [rsp+r12*4+0x20],eax
    65030a7b:	lea    eax,[r10+0x1]
    65030a7f:	movsxd rdx,eax
    65030a82:	cmp    rdx,r13
    65030a85:	jge    0x65030a9d
    65030a87:	lea    rcx,[rsp+rdx*4+0x20]
    65030a8c:	mov    r8,r13
    65030a8f:	sub    r8,rdx
    65030a92:	xor    edx,edx
    65030a94:	shl    r8,0x2
    65030a98:	call   0x6501ee30
    65030a9d:	test   ebx,ebx
    65030a9f:	je     0x65030aa4
    65030aa1:	add    esi,0x1
    65030aa4:	mov    edx,DWORD PTR [rip+0x12baa]        # 0x65043654
    65030aaa:	mov    eax,edx
    65030aac:	sub    eax,r14d
    65030aaf:	cmp    esi,eax
    65030ab1:	jge    0x65030ad5
    65030ab3:	mov    rdx,QWORD PTR [rsp+0x88]
    65030abb:	mov    QWORD PTR [rsp+0x20],rdi
    65030ac0:	mov    DWORD PTR [rsp+0x28],edi
    65030ac4:	mov    r9d,edi
    65030ac7:	mov    edi,0x2
    65030acc:	lea    r15d,[rdi+0x1d]
    65030ad0:	jmp    0x65030ef9
    65030ad5:	cmp    esi,edx
    65030ad7:	jg     0x65030d5d
    65030add:	sub    edx,r15d
    65030ae0:	lea    rax,[rsp+0x30]
    65030ae5:	mov    r10d,ebp
    65030ae8:	mov    rcx,QWORD PTR [rax]
    65030aeb:	mov    esi,0x20
    65030af0:	mov    r9d,edi
    65030af3:	mov    QWORD PTR [rsp+0x20],rcx
    65030af8:	mov    ecx,DWORD PTR [rax+0x8]
    65030afb:	mov    eax,edx
    65030afd:	cdq    
    65030afe:	mov    DWORD PTR [rsp+0x28],ecx
    65030b02:	mov    ebx,esi
    65030b04:	and    edx,0x1f
    65030b07:	mov    r8,rdi
    65030b0a:	add    eax,edx
    65030b0c:	mov    r12d,eax
    65030b0f:	and    eax,0x1f
    65030b12:	sub    eax,edx
    65030b14:	sar    r12d,0x5
    65030b18:	mov    ecx,eax
    65030b1a:	mov    r11d,eax
    65030b1d:	shl    r10d,cl
    65030b20:	sub    ebx,eax
    65030b22:	not    r10d
    65030b25:	data16 data16 xchg ax,ax
    65030b29:	data16 xchg ax,ax
    65030b2c:	data16 data16 xchg ax,ax
    65030b30:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65030b35:	mov    ecx,r11d
    65030b38:	add    r8,0x1
    65030b3c:	mov    eax,edx
    65030b3e:	shr    edx,cl
    65030b40:	mov    ecx,ebx
    65030b42:	or     edx,r9d
    65030b45:	and    eax,r10d
    65030b48:	mov    DWORD PTR [rsp+0x90],eax
    65030b4f:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    65030b54:	mov    r9d,DWORD PTR [rsp+0x90]
    65030b5c:	shl    r9d,cl
    65030b5f:	cmp    r8,r13
    65030b62:	jl     0x65030b30
    65030b64:	movsxd r8,r12d
    65030b67:	lea    rdx,[rsp+0x28]
    65030b6c:	mov    ebx,0x2
    65030b71:	lea    rax,[r8*4+0x0]
    65030b79:	mov    rcx,rbx
    65030b7c:	sub    rdx,rax
    65030b7f:	nop
    65030b80:	cmp    rcx,r8
    65030b83:	jl     0x65030b8d
    65030b85:	mov    eax,DWORD PTR [rdx]
    65030b87:	mov    DWORD PTR [rsp+rcx*4+0x20],eax
    65030b8b:	jmp    0x65030b91
    65030b8d:	mov    DWORD PTR [rsp+rcx*4+0x20],edi
    65030b91:	sub    rdx,0x4
    65030b95:	sub    rcx,0x1
    65030b99:	jns    0x65030b80
    65030b9b:	mov    r8d,DWORD PTR [rip+0x12ab6]        # 0x65043658
    65030ba2:	mov    r15d,0x1f
    65030ba8:	mov    eax,r8d
    65030bab:	mov    r12d,r15d
    65030bae:	cdq    
    65030baf:	and    edx,0x1f
    65030bb2:	add    eax,edx
    65030bb4:	mov    r11d,eax
    65030bb7:	and    eax,0x1f
    65030bba:	sar    r11d,0x5
    65030bbe:	sub    eax,edx
    65030bc0:	movsxd r14,r11d
    65030bc3:	sub    r12d,eax
    65030bc6:	mov    ecx,DWORD PTR [rsp+r14*4+0x20]
    65030bcb:	bt     ecx,r12d
    65030bcf:	jae    0x65030c81
    65030bd5:	mov    ecx,r12d
    65030bd8:	mov    eax,ebp
    65030bda:	movsxd rdx,r11d
    65030bdd:	shl    eax,cl
    65030bdf:	not    eax
    65030be1:	test   DWORD PTR [rsp+rdx*4+0x20],eax
    65030be5:	jne    0x65030c08
    65030be7:	lea    eax,[r11+0x1]
    65030beb:	movsxd rcx,eax
    65030bee:	cmp    rcx,r13
    65030bf1:	jge    0x65030c81
    65030bf7:	cmp    DWORD PTR [rsp+rcx*4+0x20],edi
    65030bfb:	jne    0x65030c08
    65030bfd:	add    rcx,0x1
    65030c01:	cmp    rcx,r13
    65030c04:	jl     0x65030bf7
    65030c06:	jmp    0x65030c81
    65030c08:	lea    eax,[r8-0x1]
    65030c0c:	mov    ecx,r15d
    65030c0f:	mov    r8d,0x1
    65030c15:	cdq    
    65030c16:	and    edx,r15d
    65030c19:	add    eax,edx
    65030c1b:	mov    r9d,eax
    65030c1e:	and    eax,r15d
    65030c21:	sub    eax,edx
    65030c23:	sar    r9d,0x5
    65030c27:	sub    ecx,eax
    65030c29:	movsxd r10,r9d
    65030c2c:	mov    eax,DWORD PTR [rsp+r10*4+0x20]
    65030c31:	shl    r8d,cl
    65030c34:	mov    ecx,edi
    65030c36:	lea    edx,[rax+r8*1]
    65030c3a:	cmp    edx,eax
    65030c3c:	jb     0x65030c43
    65030c3e:	cmp    edx,r8d
    65030c41:	jae    0x65030c48
    65030c43:	mov    ecx,0x1
    65030c48:	lea    eax,[r9-0x1]
    65030c4c:	mov    DWORD PTR [rsp+r10*4+0x20],edx
    65030c51:	test   eax,eax
    65030c53:	movsxd rdx,eax
    65030c56:	js     0x65030c81
    65030c58:	test   ecx,ecx
    65030c5a:	je     0x65030c81
    65030c5c:	mov    eax,DWORD PTR [rsp+rdx*4+0x20]
    65030c60:	mov    ecx,edi
    65030c62:	lea    r8d,[rax+0x1]
    65030c66:	cmp    r8d,eax
    65030c69:	jb     0x65030c71
    65030c6b:	cmp    r8d,0x1
    65030c6f:	jae    0x65030c76
    65030c71:	mov    ecx,0x1
    65030c76:	mov    DWORD PTR [rsp+rdx*4+0x20],r8d
    65030c7b:	sub    rdx,0x1
    65030c7f:	jns    0x65030c58
    65030c81:	mov    ecx,r12d
    65030c84:	mov    eax,ebp
    65030c86:	shl    eax,cl
    65030c88:	and    DWORD PTR [rsp+r14*4+0x20],eax
    65030c8d:	lea    eax,[r11+0x1]
    65030c91:	movsxd rdx,eax
    65030c94:	cmp    rdx,r13
    65030c97:	jge    0x65030caf
    65030c99:	sub    r13,rdx
    65030c9c:	lea    rcx,[rsp+rdx*4+0x20]
    65030ca1:	xor    edx,edx
    65030ca3:	shl    r13,0x2
    65030ca7:	mov    r8,r13
    65030caa:	call   0x6501ee30
    65030caf:	mov    eax,DWORD PTR [rip+0x129a7]        # 0x6504365c
    65030cb5:	mov    r9d,edi
    65030cb8:	mov    r8,rdi
    65030cbb:	add    eax,0x1
    65030cbe:	cdq    
    65030cbf:	and    edx,r15d
    65030cc2:	add    eax,edx
    65030cc4:	mov    r11d,eax
    65030cc7:	and    eax,r15d
    65030cca:	sub    eax,edx
    65030ccc:	sar    r11d,0x5
    65030cd0:	mov    ecx,eax
    65030cd2:	mov    r10d,eax
    65030cd5:	shl    ebp,cl
    65030cd7:	sub    esi,eax
    65030cd9:	not    ebp
    65030cdb:	xchg   ax,ax
    65030cdd:	data16 xchg ax,ax
    65030ce0:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65030ce5:	mov    ecx,r10d
    65030ce8:	mov    eax,ebp
    65030cea:	and    eax,edx
    65030cec:	shr    edx,cl
    65030cee:	mov    ecx,esi
    65030cf0:	or     edx,r9d
    65030cf3:	mov    DWORD PTR [rsp+0x90],eax
    65030cfa:	add    r8,0x1
    65030cfe:	mov    r9d,DWORD PTR [rsp+0x90]
    65030d06:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    65030d0b:	shl    r9d,cl
    65030d0e:	cmp    r8,0x3
    65030d12:	jl     0x65030ce0
    65030d14:	movsxd r8,r11d
    65030d17:	lea    rdx,[rsp+0x28]
    65030d1c:	mov    rcx,rbx
    65030d1f:	lea    rax,[r8*4+0x0]
    65030d27:	sub    rdx,rax
    65030d2a:	data16 xchg ax,ax
    65030d2d:	data16 xchg ax,ax
    65030d30:	cmp    rcx,r8
    65030d33:	jl     0x65030d3d
    65030d35:	mov    eax,DWORD PTR [rdx]
    65030d37:	mov    DWORD PTR [rsp+rcx*4+0x20],eax
    65030d3b:	jmp    0x65030d41
    65030d3d:	mov    DWORD PTR [rsp+rcx*4+0x20],edi
    65030d41:	sub    rdx,0x4
    65030d45:	sub    rcx,0x1
    65030d49:	jns    0x65030d30
    65030d4b:	mov    rdx,QWORD PTR [rsp+0x88]
    65030d53:	mov    r9d,edi
    65030d56:	mov    edi,ebx
    65030d58:	jmp    0x65030ef9
    65030d5d:	cmp    esi,DWORD PTR [rip+0x128ed]        # 0x65043650
    65030d63:	jl     0x65030e41
    65030d69:	mov    eax,DWORD PTR [rip+0x128ed]        # 0x6504365c
    65030d6f:	mov    esi,0x20
    65030d74:	mov    QWORD PTR [rsp+0x20],rdi
    65030d79:	bts    DWORD PTR [rsp+0x20],0x1f
    65030d7f:	cdq    
    65030d80:	mov    DWORD PTR [rsp+0x28],edi
    65030d84:	and    edx,0x1f
    65030d87:	mov    r9d,edi
    65030d8a:	mov    r8,rdi
    65030d8d:	add    eax,edx
    65030d8f:	mov    r11d,eax
    65030d92:	and    eax,0x1f
    65030d95:	sub    eax,edx
    65030d97:	sar    r11d,0x5
    65030d9b:	mov    ecx,eax
    65030d9d:	mov    r10d,eax
    65030da0:	shl    ebp,cl
    65030da2:	sub    esi,eax
    65030da4:	not    ebp
    65030da6:	data16 data16 xchg ax,ax
    65030daa:	data16 xchg ax,ax
    65030dad:	data16 xchg ax,ax
    65030db0:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65030db5:	mov    ecx,r10d
    65030db8:	mov    eax,ebp
    65030dba:	and    eax,edx
    65030dbc:	shr    edx,cl
    65030dbe:	mov    ecx,esi
    65030dc0:	or     edx,r9d
    65030dc3:	mov    DWORD PTR [rsp+0x90],eax
    65030dca:	add    r8,0x1
    65030dce:	mov    r9d,DWORD PTR [rsp+0x90]
    65030dd6:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    65030ddb:	shl    r9d,cl
    65030dde:	cmp    r8,r13
    65030de1:	jl     0x65030db0
    65030de3:	movsxd rdx,r11d
    65030de6:	lea    rcx,[rsp+0x28]
    65030deb:	mov    ebx,0x2
    65030df0:	lea    rax,[rdx*4+0x0]
    65030df8:	sub    rcx,rax
    65030dfb:	xchg   ax,ax
    65030dfd:	data16 xchg ax,ax
    65030e00:	cmp    rbx,rdx
    65030e03:	jl     0x65030e0d
    65030e05:	mov    eax,DWORD PTR [rcx]
    65030e07:	mov    DWORD PTR [rsp+rbx*4+0x20],eax
    65030e0b:	jmp    0x65030e11
    65030e0d:	mov    DWORD PTR [rsp+rbx*4+0x20],edi
    65030e11:	sub    rcx,0x4
    65030e15:	sub    rbx,0x1
    65030e19:	jns    0x65030e00
    65030e1b:	mov    ecx,DWORD PTR [rip+0x1282f]        # 0x65043650
    65030e21:	mov    r9d,DWORD PTR [rip+0x1283c]        # 0x65043664
    65030e28:	mov    rdx,QWORD PTR [rsp+0x88]
    65030e30:	mov    edi,0x1
    65030e35:	add    r9d,ecx
    65030e38:	lea    r15d,[rdi+0x1e]
    65030e3c:	jmp    0x65030ef9
    65030e41:	mov    eax,DWORD PTR [rip+0x12815]        # 0x6504365c
    65030e47:	mov    r9d,DWORD PTR [rip+0x12816]        # 0x65043664
    65030e4e:	btr    DWORD PTR [rsp+0x20],0x1f
    65030e54:	cdq    
    65030e55:	add    r9d,esi
    65030e58:	mov    esi,0x20
    65030e5d:	and    edx,0x1f
    65030e60:	mov    r10d,edi
    65030e63:	mov    r8,rdi
    65030e66:	add    eax,edx
    65030e68:	mov    r12d,eax
    65030e6b:	and    eax,0x1f
    65030e6e:	sub    eax,edx
    65030e70:	sar    r12d,0x5
    65030e74:	mov    ecx,eax
    65030e76:	mov    r11d,eax
    65030e79:	shl    ebp,cl
    65030e7b:	sub    esi,eax
    65030e7d:	not    ebp
    65030e7f:	nop
    65030e80:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65030e85:	mov    ecx,r11d
    65030e88:	mov    eax,ebp
    65030e8a:	and    eax,edx
    65030e8c:	shr    edx,cl
    65030e8e:	mov    ecx,esi
    65030e90:	or     edx,r10d
    65030e93:	mov    DWORD PTR [rsp+0x90],eax
    65030e9a:	add    r8,0x1
    65030e9e:	mov    r10d,DWORD PTR [rsp+0x90]
    65030ea6:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    65030eab:	shl    r10d,cl
    65030eae:	cmp    r8,r13
    65030eb1:	jl     0x65030e80
    65030eb3:	movsxd rdx,r12d
    65030eb6:	lea    rcx,[rsp+0x28]
    65030ebb:	mov    ebx,0x2
    65030ec0:	lea    rax,[rdx*4+0x0]
    65030ec8:	sub    rcx,rax
    65030ecb:	xchg   ax,ax
    65030ecd:	data16 xchg ax,ax
    65030ed0:	cmp    rbx,rdx
    65030ed3:	jl     0x65030edd
    65030ed5:	mov    eax,DWORD PTR [rcx]
    65030ed7:	mov    DWORD PTR [rsp+rbx*4+0x20],eax
    65030edb:	jmp    0x65030ee1
    65030edd:	mov    DWORD PTR [rsp+rbx*4+0x20],edi
    65030ee1:	sub    rcx,0x4
    65030ee5:	sub    rbx,0x1
    65030ee9:	jns    0x65030ed0
    65030eeb:	mov    rdx,QWORD PTR [rsp+0x88]
    65030ef3:	mov    r15d,0x1f
    65030ef9:	mov    r13,QWORD PTR [rsp+0x50]
    65030efe:	mov    r12,QWORD PTR [rsp+0x58]
    65030f03:	mov    rbp,QWORD PTR [rsp+0x68]
    65030f08:	mov    r14,QWORD PTR [rsp+0x48]
    65030f0d:	sub    r15d,DWORD PTR [rip+0x12748]        # 0x6504365c
    65030f14:	mov    eax,DWORD PTR [rip+0x12746]        # 0x65043660
    65030f1a:	mov    rsi,QWORD PTR [rsp+0x60]
    65030f1f:	mov    rbx,QWORD PTR [rsp+0x98]
    65030f27:	movzx  ecx,r15b
    65030f2b:	mov    r15,QWORD PTR [rsp+0x40]
    65030f30:	shl    r9d,cl
    65030f33:	neg    DWORD PTR [rsp+0x80]
    65030f3a:	sbb    ecx,ecx
    65030f3c:	and    ecx,0x80000000
    65030f42:	or     r9d,ecx
    65030f45:	or     r9d,DWORD PTR [rsp+0x20]
    65030f4a:	cmp    eax,0x40
    65030f4d:	jne    0x65030f61
    65030f4f:	mov    ecx,DWORD PTR [rsp+0x24]
    65030f53:	mov    DWORD PTR [rdx+0x4],r9d
    65030f57:	mov    eax,edi
    65030f59:	mov    DWORD PTR [rdx],ecx
    65030f5b:	add    rsp,0x70
    65030f5f:	pop    rdi
    65030f60:	ret    
    65030f61:	cmp    eax,0x20
    65030f64:	jne    0x65030f69
    65030f66:	mov    DWORD PTR [rdx],r9d
    65030f69:	mov    eax,edi
    65030f6b:	add    rsp,0x70
    65030f6f:	pop    rdi
    65030f70:	ret    
    65030f71:	int3   
    65030f72:	int3   
    65030f73:	int3   
    65030f74:	int3   
    65030f75:	int3   
    65030f76:	int3   
    65030f77:	int3   
    65030f78:	int3   
    65030f79:	int3   
    65030f7a:	int3   
    65030f7b:	int3   
    65030f7c:	int3   
    65030f7d:	int3   
    65030f7e:	int3   
    65030f7f:	int3   
    65030f80:	mov    rax,rsp
    65030f83:	mov    QWORD PTR [rax+0x10],rdx
    65030f87:	push   rdi
    65030f88:	sub    rsp,0x70
    65030f8c:	mov    QWORD PTR [rax+0x20],rbx
    65030f90:	mov    QWORD PTR [rax-0x18],rsi
    65030f94:	mov    QWORD PTR [rax-0x38],r15
    65030f98:	movzx  eax,WORD PTR [rcx+0xa]
    65030f9c:	mov    r9d,0x1f
    65030fa2:	mov    esi,eax
    65030fa4:	and    eax,0x8000
    65030fa9:	mov    DWORD PTR [rsp+0x80],eax
    65030fb0:	mov    eax,DWORD PTR [rcx+0x6]
    65030fb3:	and    esi,0x7fff
    65030fb9:	mov    DWORD PTR [rsp+0x20],eax
    65030fbd:	mov    eax,DWORD PTR [rcx+0x2]
    65030fc0:	sub    esi,0x3fff
    65030fc6:	mov    DWORD PTR [rsp+0x24],eax
    65030fca:	movzx  eax,WORD PTR [rcx]
    65030fcd:	shl    eax,0x10
    65030fd0:	cmp    esi,0xffffc001
    65030fd6:	mov    DWORD PTR [rsp+0x28],eax
    65030fda:	jne    0x65031016
    65030fdc:	xor    edi,edi
    65030fde:	mov    r9d,edi
    65030fe1:	mov    rax,rdi
    65030fe4:	cmp    DWORD PTR [rsp+rax*4+0x20],edi
    65030fe8:	jne    0x65030fff
    65030fea:	add    rax,0x1
    65030fee:	cmp    rax,0x3
    65030ff2:	jl     0x65030fe4
    65030ff4:	mov    r15d,0x1f
    65030ffa:	jmp    0x650315cd
    65030fff:	mov    QWORD PTR [rsp+0x20],rdi
    65031004:	mov    DWORD PTR [rsp+0x28],edi
    65031008:	mov    edi,0x2
    6503100d:	lea    r15d,[rdi+0x1d]
    65031011:	jmp    0x650315cd
    65031016:	mov    QWORD PTR [rsp+0x68],rbp
    6503101b:	lea    rcx,[rsp+0x20]
    65031020:	mov    QWORD PTR [rsp+0x58],r12
    65031025:	mov    rax,QWORD PTR [rcx]
    65031028:	mov    QWORD PTR [rsp+0x50],r13
    6503102d:	mov    QWORD PTR [rsp+0x48],r14
    65031032:	mov    r14d,DWORD PTR [rip+0x12637]        # 0x65043670
    65031039:	mov    QWORD PTR [rsp+0x30],rax
    6503103e:	mov    eax,DWORD PTR [rcx+0x8]
    65031041:	mov    DWORD PTR [rsp+0x38],eax
    65031045:	xor    edi,edi
    65031047:	mov    eax,r14d
    6503104a:	cdq    
    6503104b:	mov    r11d,r9d
    6503104e:	or     ebp,0xffffffff
    65031051:	and    edx,r9d
    65031054:	mov    r15d,esi
    65031057:	mov    ebx,edi
    65031059:	add    eax,edx
    6503105b:	mov    r10d,eax
    6503105e:	and    eax,r9d
    65031061:	sar    r10d,0x5
    65031065:	sub    eax,edx
    65031067:	movsxd r12,r10d
    6503106a:	sub    r11d,eax
    6503106d:	mov    ecx,DWORD PTR [rsp+r12*4+0x20]
    65031072:	bt     ecx,r11d
    65031076:	jae    0x65031129
    6503107c:	mov    ecx,r11d
    6503107f:	mov    eax,ebp
    65031081:	movsxd rdx,r10d
    65031084:	shl    eax,cl
    65031086:	not    eax
    65031088:	test   DWORD PTR [rsp+rdx*4+0x20],eax
    6503108c:	jne    0x650310b2
    6503108e:	lea    eax,[r10+0x1]
    65031092:	movsxd rcx,eax
    65031095:	cmp    rcx,0x3
    65031099:	jge    0x65031129
    6503109f:	nop
    650310a0:	cmp    DWORD PTR [rsp+rcx*4+0x20],ebx
    650310a4:	jne    0x650310b2
    650310a6:	add    rcx,0x1
    650310aa:	cmp    rcx,0x3
    650310ae:	jl     0x650310a0
    650310b0:	jmp    0x65031129
    650310b2:	mov    ecx,r9d
    650310b5:	lea    eax,[r14-0x1]
    650310b9:	cdq    
    650310ba:	and    edx,r9d
    650310bd:	add    eax,edx
    650310bf:	mov    r8d,eax
    650310c2:	and    eax,r9d
    650310c5:	sub    eax,edx
    650310c7:	sar    r8d,0x5
    650310cb:	mov    edx,0x1
    650310d0:	sub    ecx,eax
    650310d2:	movsxd r9,r8d
    650310d5:	mov    eax,DWORD PTR [rsp+r9*4+0x20]
    650310da:	shl    edx,cl
    650310dc:	lea    ecx,[rax+rdx*1]
    650310df:	cmp    ecx,eax
    650310e1:	jb     0x650310e7
    650310e3:	cmp    ecx,edx
    650310e5:	jae    0x650310ec
    650310e7:	mov    ebx,0x1
    650310ec:	lea    eax,[r8-0x1]
    650310f0:	mov    DWORD PTR [rsp+r9*4+0x20],ecx
    650310f5:	test   eax,eax
    650310f7:	movsxd rdx,eax
    650310fa:	js     0x65031129
    650310fc:	data16 data16 xchg ax,ax
    65031100:	test   ebx,ebx
    65031102:	je     0x65031129
    65031104:	mov    eax,DWORD PTR [rsp+rdx*4+0x20]
    65031108:	mov    ebx,edi
    6503110a:	lea    r8d,[rax+0x1]
    6503110e:	cmp    r8d,eax
    65031111:	jb     0x65031119
    65031113:	cmp    r8d,0x1
    65031117:	jae    0x6503111e
    65031119:	mov    ebx,0x1
    6503111e:	mov    DWORD PTR [rsp+rdx*4+0x20],r8d
    65031123:	sub    rdx,0x1
    65031127:	jns    0x65031100
    65031129:	mov    ecx,r11d
    6503112c:	mov    eax,ebp
    6503112e:	mov    r13d,0x3
    65031134:	shl    eax,cl
    65031136:	and    DWORD PTR [rsp+r12*4+0x20],eax
    6503113b:	lea    eax,[r10+0x1]
    6503113f:	movsxd rdx,eax
    65031142:	cmp    rdx,r13
    65031145:	jge    0x6503115d
    65031147:	lea    rcx,[rsp+rdx*4+0x20]
    6503114c:	mov    r8,r13
    6503114f:	sub    r8,rdx
    65031152:	xor    edx,edx
    65031154:	shl    r8,0x2
    65031158:	call   0x6501ee30
    6503115d:	test   ebx,ebx
    6503115f:	je     0x65031164
    65031161:	add    esi,0x1
    65031164:	mov    edx,DWORD PTR [rip+0x12502]        # 0x6504366c
    6503116a:	mov    eax,edx
    6503116c:	sub    eax,r14d
    6503116f:	cmp    esi,eax
    65031171:	jge    0x65031195
    65031173:	mov    rdx,QWORD PTR [rsp+0x88]
    6503117b:	mov    QWORD PTR [rsp+0x20],rdi
    65031180:	mov    DWORD PTR [rsp+0x28],edi
    65031184:	mov    r9d,edi
    65031187:	mov    edi,0x2
    6503118c:	lea    r15d,[rdi+0x1d]
    65031190:	jmp    0x650315b9
    65031195:	cmp    esi,edx
    65031197:	jg     0x6503141d
    6503119d:	sub    edx,r15d
    650311a0:	lea    rax,[rsp+0x30]
    650311a5:	mov    r10d,ebp
    650311a8:	mov    rcx,QWORD PTR [rax]
    650311ab:	mov    esi,0x20
    650311b0:	mov    r9d,edi
    650311b3:	mov    QWORD PTR [rsp+0x20],rcx
    650311b8:	mov    ecx,DWORD PTR [rax+0x8]
    650311bb:	mov    eax,edx
    650311bd:	cdq    
    650311be:	mov    DWORD PTR [rsp+0x28],ecx
    650311c2:	mov    ebx,esi
    650311c4:	and    edx,0x1f
    650311c7:	mov    r8,rdi
    650311ca:	add    eax,edx
    650311cc:	mov    r12d,eax
    650311cf:	and    eax,0x1f
    650311d2:	sub    eax,edx
    650311d4:	sar    r12d,0x5
    650311d8:	mov    ecx,eax
    650311da:	mov    r11d,eax
    650311dd:	shl    r10d,cl
    650311e0:	sub    ebx,eax
    650311e2:	not    r10d
    650311e5:	data16 data16 xchg ax,ax
    650311e9:	data16 xchg ax,ax
    650311ec:	data16 data16 xchg ax,ax
    650311f0:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    650311f5:	mov    ecx,r11d
    650311f8:	add    r8,0x1
    650311fc:	mov    eax,edx
    650311fe:	shr    edx,cl
    65031200:	mov    ecx,ebx
    65031202:	or     edx,r9d
    65031205:	and    eax,r10d
    65031208:	mov    DWORD PTR [rsp+0x90],eax
    6503120f:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    65031214:	mov    r9d,DWORD PTR [rsp+0x90]
    6503121c:	shl    r9d,cl
    6503121f:	cmp    r8,r13
    65031222:	jl     0x650311f0
    65031224:	movsxd r8,r12d
    65031227:	lea    rdx,[rsp+0x28]
    6503122c:	mov    ebx,0x2
    65031231:	lea    rax,[r8*4+0x0]
    65031239:	mov    rcx,rbx
    6503123c:	sub    rdx,rax
    6503123f:	nop
    65031240:	cmp    rcx,r8
    65031243:	jl     0x6503124d
    65031245:	mov    eax,DWORD PTR [rdx]
    65031247:	mov    DWORD PTR [rsp+rcx*4+0x20],eax
    6503124b:	jmp    0x65031251
    6503124d:	mov    DWORD PTR [rsp+rcx*4+0x20],edi
    65031251:	sub    rdx,0x4
    65031255:	sub    rcx,0x1
    65031259:	jns    0x65031240
    6503125b:	mov    r8d,DWORD PTR [rip+0x1240e]        # 0x65043670
    65031262:	mov    r15d,0x1f
    65031268:	mov    eax,r8d
    6503126b:	mov    r12d,r15d
    6503126e:	cdq    
    6503126f:	and    edx,0x1f
    65031272:	add    eax,edx
    65031274:	mov    r11d,eax
    65031277:	and    eax,0x1f
    6503127a:	sar    r11d,0x5
    6503127e:	sub    eax,edx
    65031280:	movsxd r14,r11d
    65031283:	sub    r12d,eax
    65031286:	mov    ecx,DWORD PTR [rsp+r14*4+0x20]
    6503128b:	bt     ecx,r12d
    6503128f:	jae    0x65031341
    65031295:	mov    ecx,r12d
    65031298:	mov    eax,ebp
    6503129a:	movsxd rdx,r11d
    6503129d:	shl    eax,cl
    6503129f:	not    eax
    650312a1:	test   DWORD PTR [rsp+rdx*4+0x20],eax
    650312a5:	jne    0x650312c8
    650312a7:	lea    eax,[r11+0x1]
    650312ab:	movsxd rcx,eax
    650312ae:	cmp    rcx,r13
    650312b1:	jge    0x65031341
    650312b7:	cmp    DWORD PTR [rsp+rcx*4+0x20],edi
    650312bb:	jne    0x650312c8
    650312bd:	add    rcx,0x1
    650312c1:	cmp    rcx,r13
    650312c4:	jl     0x650312b7
    650312c6:	jmp    0x65031341
    650312c8:	lea    eax,[r8-0x1]
    650312cc:	mov    ecx,r15d
    650312cf:	mov    r8d,0x1
    650312d5:	cdq    
    650312d6:	and    edx,r15d
    650312d9:	add    eax,edx
    650312db:	mov    r9d,eax
    650312de:	and    eax,r15d
    650312e1:	sub    eax,edx
    650312e3:	sar    r9d,0x5
    650312e7:	sub    ecx,eax
    650312e9:	movsxd r10,r9d
    650312ec:	mov    eax,DWORD PTR [rsp+r10*4+0x20]
    650312f1:	shl    r8d,cl
    650312f4:	mov    ecx,edi
    650312f6:	lea    edx,[rax+r8*1]
    650312fa:	cmp    edx,eax
    650312fc:	jb     0x65031303
    650312fe:	cmp    edx,r8d
    65031301:	jae    0x65031308
    65031303:	mov    ecx,0x1
    65031308:	lea    eax,[r9-0x1]
    6503130c:	mov    DWORD PTR [rsp+r10*4+0x20],edx
    65031311:	test   eax,eax
    65031313:	movsxd rdx,eax
    65031316:	js     0x65031341
    65031318:	test   ecx,ecx
    6503131a:	je     0x65031341
    6503131c:	mov    eax,DWORD PTR [rsp+rdx*4+0x20]
    65031320:	mov    ecx,edi
    65031322:	lea    r8d,[rax+0x1]
    65031326:	cmp    r8d,eax
    65031329:	jb     0x65031331
    6503132b:	cmp    r8d,0x1
    6503132f:	jae    0x65031336
    65031331:	mov    ecx,0x1
    65031336:	mov    DWORD PTR [rsp+rdx*4+0x20],r8d
    6503133b:	sub    rdx,0x1
    6503133f:	jns    0x65031318
    65031341:	mov    ecx,r12d
    65031344:	mov    eax,ebp
    65031346:	shl    eax,cl
    65031348:	and    DWORD PTR [rsp+r14*4+0x20],eax
    6503134d:	lea    eax,[r11+0x1]
    65031351:	movsxd rdx,eax
    65031354:	cmp    rdx,r13
    65031357:	jge    0x6503136f
    65031359:	sub    r13,rdx
    6503135c:	lea    rcx,[rsp+rdx*4+0x20]
    65031361:	xor    edx,edx
    65031363:	shl    r13,0x2
    65031367:	mov    r8,r13
    6503136a:	call   0x6501ee30
    6503136f:	mov    eax,DWORD PTR [rip+0x122ff]        # 0x65043674
    65031375:	mov    r9d,edi
    65031378:	mov    r8,rdi
    6503137b:	add    eax,0x1
    6503137e:	cdq    
    6503137f:	and    edx,r15d
    65031382:	add    eax,edx
    65031384:	mov    r11d,eax
    65031387:	and    eax,r15d
    6503138a:	sub    eax,edx
    6503138c:	sar    r11d,0x5
    65031390:	mov    ecx,eax
    65031392:	mov    r10d,eax
    65031395:	shl    ebp,cl
    65031397:	sub    esi,eax
    65031399:	not    ebp
    6503139b:	xchg   ax,ax
    6503139d:	data16 xchg ax,ax
    650313a0:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    650313a5:	mov    ecx,r10d
    650313a8:	mov    eax,ebp
    650313aa:	and    eax,edx
    650313ac:	shr    edx,cl
    650313ae:	mov    ecx,esi
    650313b0:	or     edx,r9d
    650313b3:	mov    DWORD PTR [rsp+0x90],eax
    650313ba:	add    r8,0x1
    650313be:	mov    r9d,DWORD PTR [rsp+0x90]
    650313c6:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    650313cb:	shl    r9d,cl
    650313ce:	cmp    r8,0x3
    650313d2:	jl     0x650313a0
    650313d4:	movsxd r8,r11d
    650313d7:	lea    rdx,[rsp+0x28]
    650313dc:	mov    rcx,rbx
    650313df:	lea    rax,[r8*4+0x0]
    650313e7:	sub    rdx,rax
    650313ea:	data16 xchg ax,ax
    650313ed:	data16 xchg ax,ax
    650313f0:	cmp    rcx,r8
    650313f3:	jl     0x650313fd
    650313f5:	mov    eax,DWORD PTR [rdx]
    650313f7:	mov    DWORD PTR [rsp+rcx*4+0x20],eax
    650313fb:	jmp    0x65031401
    650313fd:	mov    DWORD PTR [rsp+rcx*4+0x20],edi
    65031401:	sub    rdx,0x4
    65031405:	sub    rcx,0x1
    65031409:	jns    0x650313f0
    6503140b:	mov    rdx,QWORD PTR [rsp+0x88]
    65031413:	mov    r9d,edi
    65031416:	mov    edi,ebx
    65031418:	jmp    0x650315b9
    6503141d:	cmp    esi,DWORD PTR [rip+0x12245]        # 0x65043668
    65031423:	jl     0x65031501
    65031429:	mov    eax,DWORD PTR [rip+0x12245]        # 0x65043674
    6503142f:	mov    esi,0x20
    65031434:	mov    QWORD PTR [rsp+0x20],rdi
    65031439:	bts    DWORD PTR [rsp+0x20],0x1f
    6503143f:	cdq    
    65031440:	mov    DWORD PTR [rsp+0x28],edi
    65031444:	and    edx,0x1f
    65031447:	mov    r9d,edi
    6503144a:	mov    r8,rdi
    6503144d:	add    eax,edx
    6503144f:	mov    r11d,eax
    65031452:	and    eax,0x1f
    65031455:	sub    eax,edx
    65031457:	sar    r11d,0x5
    6503145b:	mov    ecx,eax
    6503145d:	mov    r10d,eax
    65031460:	shl    ebp,cl
    65031462:	sub    esi,eax
    65031464:	not    ebp
    65031466:	data16 data16 xchg ax,ax
    6503146a:	data16 xchg ax,ax
    6503146d:	data16 xchg ax,ax
    65031470:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65031475:	mov    ecx,r10d
    65031478:	mov    eax,ebp
    6503147a:	and    eax,edx
    6503147c:	shr    edx,cl
    6503147e:	mov    ecx,esi
    65031480:	or     edx,r9d
    65031483:	mov    DWORD PTR [rsp+0x90],eax
    6503148a:	add    r8,0x1
    6503148e:	mov    r9d,DWORD PTR [rsp+0x90]
    65031496:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    6503149b:	shl    r9d,cl
    6503149e:	cmp    r8,r13
    650314a1:	jl     0x65031470
    650314a3:	movsxd rdx,r11d
    650314a6:	lea    rcx,[rsp+0x28]
    650314ab:	mov    ebx,0x2
    650314b0:	lea    rax,[rdx*4+0x0]
    650314b8:	sub    rcx,rax
    650314bb:	xchg   ax,ax
    650314bd:	data16 xchg ax,ax
    650314c0:	cmp    rbx,rdx
    650314c3:	jl     0x650314cd
    650314c5:	mov    eax,DWORD PTR [rcx]
    650314c7:	mov    DWORD PTR [rsp+rbx*4+0x20],eax
    650314cb:	jmp    0x650314d1
    650314cd:	mov    DWORD PTR [rsp+rbx*4+0x20],edi
    650314d1:	sub    rcx,0x4
    650314d5:	sub    rbx,0x1
    650314d9:	jns    0x650314c0
    650314db:	mov    ecx,DWORD PTR [rip+0x12187]        # 0x65043668
    650314e1:	mov    r9d,DWORD PTR [rip+0x12194]        # 0x6504367c
    650314e8:	mov    rdx,QWORD PTR [rsp+0x88]
    650314f0:	mov    edi,0x1
    650314f5:	add    r9d,ecx
    650314f8:	lea    r15d,[rdi+0x1e]
    650314fc:	jmp    0x650315b9
    65031501:	mov    eax,DWORD PTR [rip+0x1216d]        # 0x65043674
    65031507:	mov    r9d,DWORD PTR [rip+0x1216e]        # 0x6504367c
    6503150e:	btr    DWORD PTR [rsp+0x20],0x1f
    65031514:	cdq    
    65031515:	add    r9d,esi
    65031518:	mov    esi,0x20
    6503151d:	and    edx,0x1f
    65031520:	mov    r10d,edi
    65031523:	mov    r8,rdi
    65031526:	add    eax,edx
    65031528:	mov    r12d,eax
    6503152b:	and    eax,0x1f
    6503152e:	sub    eax,edx
    65031530:	sar    r12d,0x5
    65031534:	mov    ecx,eax
    65031536:	mov    r11d,eax
    65031539:	shl    ebp,cl
    6503153b:	sub    esi,eax
    6503153d:	not    ebp
    6503153f:	nop
    65031540:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65031545:	mov    ecx,r11d
    65031548:	mov    eax,ebp
    6503154a:	and    eax,edx
    6503154c:	shr    edx,cl
    6503154e:	mov    ecx,esi
    65031550:	or     edx,r10d
    65031553:	mov    DWORD PTR [rsp+0x90],eax
    6503155a:	add    r8,0x1
    6503155e:	mov    r10d,DWORD PTR [rsp+0x90]
    65031566:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    6503156b:	shl    r10d,cl
    6503156e:	cmp    r8,r13
    65031571:	jl     0x65031540
    65031573:	movsxd rdx,r12d
    65031576:	lea    rcx,[rsp+0x28]
    6503157b:	mov    ebx,0x2
    65031580:	lea    rax,[rdx*4+0x0]
    65031588:	sub    rcx,rax
    6503158b:	xchg   ax,ax
    6503158d:	data16 xchg ax,ax
    65031590:	cmp    rbx,rdx
    65031593:	jl     0x6503159d
    65031595:	mov    eax,DWORD PTR [rcx]
    65031597:	mov    DWORD PTR [rsp+rbx*4+0x20],eax
    6503159b:	jmp    0x650315a1
    6503159d:	mov    DWORD PTR [rsp+rbx*4+0x20],edi
    650315a1:	sub    rcx,0x4
    650315a5:	sub    rbx,0x1
    650315a9:	jns    0x65031590
    650315ab:	mov    rdx,QWORD PTR [rsp+0x88]
    650315b3:	mov    r15d,0x1f
    650315b9:	mov    r13,QWORD PTR [rsp+0x50]
    650315be:	mov    r12,QWORD PTR [rsp+0x58]
    650315c3:	mov    rbp,QWORD PTR [rsp+0x68]
    650315c8:	mov    r14,QWORD PTR [rsp+0x48]
    650315cd:	sub    r15d,DWORD PTR [rip+0x120a0]        # 0x65043674
    650315d4:	mov    eax,DWORD PTR [rip+0x1209e]        # 0x65043678
    650315da:	mov    rsi,QWORD PTR [rsp+0x60]
    650315df:	mov    rbx,QWORD PTR [rsp+0x98]
    650315e7:	movzx  ecx,r15b
    650315eb:	mov    r15,QWORD PTR [rsp+0x40]
    650315f0:	shl    r9d,cl
    650315f3:	neg    DWORD PTR [rsp+0x80]
    650315fa:	sbb    ecx,ecx
    650315fc:	and    ecx,0x80000000
    65031602:	or     r9d,ecx
    65031605:	or     r9d,DWORD PTR [rsp+0x20]
    6503160a:	cmp    eax,0x40
    6503160d:	jne    0x65031621
    6503160f:	mov    ecx,DWORD PTR [rsp+0x24]
    65031613:	mov    DWORD PTR [rdx+0x4],r9d
    65031617:	mov    eax,edi
    65031619:	mov    DWORD PTR [rdx],ecx
    6503161b:	add    rsp,0x70
    6503161f:	pop    rdi
    65031620:	ret    
    65031621:	cmp    eax,0x20
    65031624:	jne    0x65031629
    65031626:	mov    DWORD PTR [rdx],r9d
    65031629:	mov    eax,edi
    6503162b:	add    rsp,0x70
    6503162f:	pop    rdi
    65031630:	ret    
    65031631:	int3   
    65031632:	int3   
    65031633:	int3   
    65031634:	int3   
    65031635:	int3   
    65031636:	int3   
    65031637:	int3   
    65031638:	int3   
    65031639:	int3   
    6503163a:	int3   
    6503163b:	int3   
    6503163c:	int3   
    6503163d:	int3   
    6503163e:	int3   
    6503163f:	int3   
    65031640:	mov    QWORD PTR [rsp+0x18],rbx
    65031645:	push   rbp
    65031646:	push   rsi
    65031647:	push   rdi
    65031648:	push   r12
    6503164a:	push   r13
    6503164c:	push   r14
    6503164e:	push   r15
    65031650:	sub    rsp,0xb0
    65031657:	mov    rax,QWORD PTR [rip+0x10ac2]        # 0x65042120
    6503165e:	xor    rax,rsp
    65031661:	mov    QWORD PTR [rsp+0xa0],rax
    65031669:	mov    rsi,QWORD PTR [rsp+0x128]
    65031671:	xor    edi,edi
    65031673:	mov    DWORD PTR [rsp+0x38],r9d
    65031678:	test   rsi,rsi
    6503167b:	mov    eax,edi
    6503167d:	mov    r13,rdx
    65031680:	mov    QWORD PTR [rsp+0x48],rcx
    65031685:	lea    r11,[rsp+0x80]
    6503168d:	mov    WORD PTR [rsp+0x34],0x0
    65031694:	lea    r14d,[rdi+0x1]
    65031698:	mov    r10d,edi
    6503169b:	mov    ebp,edi
    6503169d:	mov    r15d,edi
    650316a0:	mov    r12d,edi
    650316a3:	mov    DWORD PTR [rsp+0x30],eax
    650316a7:	mov    ebx,edi
    650316a9:	mov    r9d,edi
    650316ac:	jne    0x650316d4
    650316ae:	call   0x650202b0
    650316b3:	xor    r9d,r9d
    650316b6:	xor    r8d,r8d
    650316b9:	xor    edx,edx
    650316bb:	xor    ecx,ecx
    650316bd:	mov    QWORD PTR [rsp+0x20],rdi
    650316c2:	mov    DWORD PTR [rax],0x16
    650316c8:	call   0x6501d850
    650316cd:	xor    eax,eax
    650316cf:	jmp    0x65031f34
    650316d4:	mov    rdi,r8
    650316d7:	movzx  eax,BYTE PTR [r8]
    650316db:	cmp    al,0x20
    650316dd:	je     0x650316eb
    650316df:	cmp    al,0x9
    650316e1:	je     0x650316eb
    650316e3:	cmp    al,0xa
    650316e5:	je     0x650316eb
    650316e7:	cmp    al,0xd
    650316e9:	jne    0x650316f6
    650316eb:	add    r8,r14
    650316ee:	jmp    0x650316d7
    650316f0:	mov    r9d,0x5
    650316f6:	lea    rcx,[rip+0xfffffffffffce903]        # 0x65000000
    650316fd:	data16 xchg ax,ax
    65031700:	movzx  edx,BYTE PTR [r8]
    65031704:	add    r8,0x1
    65031708:	cmp    r9d,0xb
    6503170c:	ja     0x65031a05
    65031712:	movsxd rax,r9d
    65031715:	mov    ecx,DWORD PTR [rcx+rax*4+0x31f60]
    6503171c:	lea    rax,[rip+0xfffffffffffce8dd]        # 0x65000000
    65031723:	add    rcx,rax
    65031726:	jmp    rcx
    65031728:	lea    eax,[rdx-0x31]
    6503172b:	cmp    al,0x8
    6503172d:	ja     0x6503173b
    6503172f:	mov    r9d,0x3
    65031735:	sub    r8,0x1
    65031739:	jmp    0x650316f6
    6503173b:	mov    rax,QWORD PTR [rsi]
    6503173e:	mov    rcx,QWORD PTR [rax+0x128]
    65031745:	mov    rax,QWORD PTR [rcx]
    65031748:	cmp    dl,BYTE PTR [rax]
    6503174a:	je     0x650316f0
    6503174c:	cmp    dl,0x2b
    6503174f:	je     0x65031776
    65031751:	cmp    dl,0x2d
    65031754:	je     0x65031767
    65031756:	cmp    dl,0x30
    65031759:	jne    0x65031a4b
    6503175f:	mov    r9d,0x1
    65031765:	jmp    0x650316f6
    65031767:	mov    r9d,0x2
    6503176d:	mov    WORD PTR [rsp+0x34],0x8000
    65031774:	jmp    0x650316f6
    65031776:	mov    r9d,0x2
    6503177c:	mov    WORD PTR [rsp+0x34],0x0
    65031783:	jmp    0x650316f6
    65031788:	lea    eax,[rdx-0x31]
    6503178b:	mov    ebp,0x1
    65031790:	cmp    al,0x8
    65031792:	ja     0x650317a0
    65031794:	lea    r9d,[rbp+0x2]
    65031798:	sub    r8,rbp
    6503179b:	jmp    0x650316f6
    650317a0:	mov    rax,QWORD PTR [rsi]
    650317a3:	mov    rcx,QWORD PTR [rax+0x128]
    650317aa:	mov    rax,QWORD PTR [rcx]
    650317ad:	cmp    dl,BYTE PTR [rax]
    650317af:	jne    0x650317bc
    650317b1:	mov    r9d,0x4
    650317b7:	jmp    0x650316f6
    650317bc:	movsx  eax,dl
    650317bf:	add    eax,0xffffffd5
    650317c2:	cmp    eax,0x3a
    650317c5:	ja     0x65031a51
    650317cb:	lea    rdx,[rip+0xfffffffffffce82e]        # 0x65000000
    650317d2:	cdqe   
    650317d4:	movzx  eax,BYTE PTR [rdx+rax*1+0x31fa0]
    650317dc:	mov    ecx,DWORD PTR [rdx+rax*4+0x31f90]
    650317e3:	add    rcx,rdx
    650317e6:	jmp    rcx
    650317e8:	mov    r9d,ebp
    650317eb:	jmp    0x650316f6
    650317f0:	lea    eax,[rdx-0x31]
    650317f3:	cmp    al,0x8
    650317f5:	jbe    0x6503172f
    650317fb:	mov    rax,QWORD PTR [rsi]
    650317fe:	mov    rcx,QWORD PTR [rax+0x128]
    65031805:	mov    rax,QWORD PTR [rcx]
    65031808:	cmp    dl,BYTE PTR [rax]
    6503180a:	je     0x650316f0
    65031810:	cmp    dl,0x30
    65031813:	jne    0x65031a56
    65031819:	mov    r9d,0x1
    6503181f:	jmp    0x650316f6
    65031824:	cmp    dl,0x30
    65031827:	mov    ebp,0x1
    6503182c:	jl     0x65031856
    6503182e:	xchg   ax,ax
    65031830:	cmp    dl,0x39
    65031833:	jg     0x65031856
    65031835:	cmp    r10d,0x19
    65031839:	jae    0x65031849
    6503183b:	sub    dl,0x30
    6503183e:	add    r10d,ebp
    65031841:	mov    BYTE PTR [r11],dl
    65031844:	add    r11,rbp
    65031847:	jmp    0x6503184b
    65031849:	add    ebx,ebp
    6503184b:	mov    dl,BYTE PTR [r8]
    6503184e:	add    r8,rbp
    65031851:	cmp    dl,0x30
    65031854:	jge    0x65031830
    65031856:	mov    rax,QWORD PTR [rsi]
    65031859:	mov    rcx,QWORD PTR [rax+0x128]
    65031860:	mov    rax,QWORD PTR [rcx]
    65031863:	cmp    dl,BYTE PTR [rax]
    65031865:	jne    0x65031872
    65031867:	mov    r9d,0x4
    6503186d:	jmp    0x650316f6
    65031872:	movsx  eax,dl
    65031875:	add    eax,0xffffffd5
    65031878:	cmp    eax,0x3a
    6503187b:	ja     0x65031a51
    65031881:	lea    rdx,[rip+0xfffffffffffce778]        # 0x65000000
    65031888:	cdqe   
    6503188a:	movzx  eax,BYTE PTR [rdx+rax*1+0x31fe8]
    65031892:	mov    ecx,DWORD PTR [rdx+rax*4+0x31fdc]
    65031899:	add    rcx,rdx
    6503189c:	jmp    rcx
    6503189e:	mov    r9d,0x6
    650318a4:	jmp    0x650316f6
    650318a9:	test   r10d,r10d
    650318ac:	mov    ebp,0x1
    650318b1:	mov    r15d,ebp
    650318b4:	jne    0x650318cd
    650318b6:	cmp    dl,0x30
    650318b9:	jne    0x650318d0
    650318bb:	xchg   ax,ax
    650318bd:	data16 xchg ax,ax
    650318c0:	mov    dl,BYTE PTR [r8]
    650318c3:	sub    ebx,ebp
    650318c5:	add    r8,rbp
    650318c8:	cmp    dl,0x30
    650318cb:	je     0x650318c0
    650318cd:	cmp    dl,0x30
    650318d0:	jl     0x650318f6
    650318d2:	cmp    dl,0x39
    650318d5:	jg     0x650318f6
    650318d7:	cmp    r10d,0x19
    650318db:	jae    0x650318eb
    650318dd:	sub    dl,0x30
    650318e0:	add    r10d,ebp
    650318e3:	mov    BYTE PTR [r11],dl
    650318e6:	add    r11,rbp
    650318e9:	sub    ebx,ebp
    650318eb:	mov    dl,BYTE PTR [r8]
    650318ee:	add    r8,rbp
    650318f1:	cmp    dl,0x30
    650318f4:	jge    0x650318d2
    650318f6:	movsx  eax,dl
    650318f9:	add    eax,0xffffffd5
    650318fc:	cmp    eax,0x3a
    650318ff:	ja     0x65031a51
    65031905:	lea    rdx,[rip+0xfffffffffffce6f4]        # 0x65000000
    6503190c:	cdqe   
    6503190e:	movzx  eax,BYTE PTR [rdx+rax*1+0x32030]
    65031916:	mov    ecx,DWORD PTR [rdx+rax*4+0x32024]
    6503191d:	add    rcx,rdx
    65031920:	jmp    rcx
    65031922:	sub    r8,rbp
    65031925:	mov    r9d,0xb
    6503192b:	jmp    0x650316f6
    65031930:	sub    dl,0x30
    65031933:	mov    r15d,0x1
    65031939:	cmp    dl,0x9
    6503193c:	ja     0x65031a56
    65031942:	lea    r9d,[r15+0x3]
    65031946:	sub    r8,r15
    65031949:	jmp    0x650316f6
    6503194e:	lea    eax,[rdx-0x31]
    65031951:	lea    rdi,[r8-0x2]
    65031955:	cmp    al,0x8
    65031957:	ja     0x65031968
    65031959:	mov    r9d,0x9
    6503195f:	sub    r8,0x1
    65031963:	jmp    0x650316f6
    65031968:	cmp    dl,0x2b
    6503196b:	je     0x65031986
    6503196d:	cmp    dl,0x2d
    65031970:	je     0x650319ef
    65031972:	cmp    dl,0x30
    65031975:	jne    0x65031a56
    6503197b:	mov    r9d,0x8
    65031981:	jmp    0x650316f6
    65031986:	mov    r9d,0x7
    6503198c:	jmp    0x650316f6
    65031991:	cmp    dl,0x30
    65031994:	mov    r12d,0x1
    6503199a:	jne    0x650319ab
    6503199c:	data16 data16 xchg ax,ax
    650319a0:	mov    dl,BYTE PTR [r8]
    650319a3:	add    r8,r12
    650319a6:	cmp    dl,0x30
    650319a9:	je     0x650319a0
    650319ab:	sub    dl,0x31
    650319ae:	sub    r8,r12
    650319b1:	cmp    dl,0x8
    650319b4:	ja     0x65031a0f
    650319b6:	mov    r9d,0x9
    650319bc:	jmp    0x650316f6
    650319c1:	lea    eax,[rdx-0x31]
    650319c4:	cmp    al,0x8
    650319c6:	ja     0x65031972
    650319c8:	mov    r9d,0x9
    650319ce:	sub    r8,0x1
    650319d2:	jmp    0x650316f6
    650319d7:	cmp    DWORD PTR [rsp+0x120],0x0
    650319df:	je     0x65031a4b
    650319e1:	cmp    dl,0x2b
    650319e4:	lea    rdi,[r8-0x1]
    650319e8:	je     0x65031986
    650319ea:	cmp    dl,0x2d
    650319ed:	jne    0x65031a56
    650319ef:	mov    r9d,0x7
    650319f5:	or     r14d,0xffffffff
    650319f9:	jmp    0x650316f6
    650319fe:	lea    rcx,[rip+0xfffffffffffce5fb]        # 0x65000000
    65031a05:	cmp    r9d,0xa
    65031a09:	jne    0x65031700
    65031a0f:	xor    edi,edi
    65031a11:	test   ebp,ebp
    65031a13:	mov    QWORD PTR [r13+0x0],r8
    65031a17:	je     0x65031f07
    65031a1d:	cmp    r10d,0x18
    65031a21:	jbe    0x65031abd
    65031a27:	movzx  eax,BYTE PTR [rsp+0x97]
    65031a2f:	cmp    al,0x5
    65031a31:	jl     0x65031a3c
    65031a33:	add    al,0x1
    65031a35:	mov    BYTE PTR [rsp+0x97],al
    65031a3c:	sub    r11,0x1
    65031a40:	mov    r10d,0x18
    65031a46:	add    ebx,0x1
    65031a49:	jmp    0x65031ac6
    65031a4b:	sub    r8,0x1
    65031a4f:	jmp    0x65031a0f
    65031a51:	sub    r8,rbp
    65031a54:	jmp    0x65031a0f
    65031a56:	mov    r8,rdi
    65031a59:	jmp    0x65031a0f
    65031a5b:	xor    edi,edi
    65031a5d:	cmp    dl,0x30
    65031a60:	mov    eax,edi
    65031a62:	lea    r12d,[rdi+0x1]
    65031a66:	mov    DWORD PTR [rsp+0x30],eax
    65031a6a:	jl     0x65031ab5
    65031a6c:	data16 data16 xchg ax,ax
    65031a70:	cmp    dl,0x39
    65031a73:	jg     0x65031aa0
    65031a75:	lea    ecx,[rax+rax*4]
    65031a78:	movsx  eax,dl
    65031a7b:	lea    eax,[rax+rcx*2-0x30]
    65031a7f:	cmp    eax,0x1450
    65031a84:	mov    DWORD PTR [rsp+0x30],eax
    65031a88:	jg     0x65031a97
    65031a8a:	mov    dl,BYTE PTR [r8]
    65031a8d:	add    r8,r12
    65031a90:	cmp    dl,0x30
    65031a93:	jge    0x65031a70
    65031a95:	jmp    0x65031aa0
    65031a97:	mov    eax,0x1451
    65031a9c:	mov    DWORD PTR [rsp+0x30],eax
    65031aa0:	cmp    dl,0x30
    65031aa3:	jl     0x65031ab5
    65031aa5:	cmp    dl,0x39
    65031aa8:	jg     0x65031ab5
    65031aaa:	mov    dl,BYTE PTR [r8]
    65031aad:	add    r8,r12
    65031ab0:	cmp    dl,0x30
    65031ab3:	jge    0x65031aa5
    65031ab5:	sub    r8,r12
    65031ab8:	jmp    0x65031a11
    65031abd:	test   r10d,r10d
    65031ac0:	je     0x65031f00
    65031ac6:	sub    r11,0x1
    65031aca:	cmp    BYTE PTR [r11],0x0
    65031ace:	jne    0x65031ae1
    65031ad0:	sub    r11,0x1
    65031ad4:	add    r10d,0xffffffff
    65031ad8:	add    ebx,0x1
    65031adb:	cmp    BYTE PTR [r11],0x0
    65031adf:	je     0x65031ad0
    65031ae1:	lea    r8,[rsp+0x60]
    65031ae6:	lea    rcx,[rsp+0x80]
    65031aee:	mov    edx,r10d
    65031af1:	call   0x65032e70
    65031af6:	test   r14d,r14d
    65031af9:	mov    r8d,DWORD PTR [rsp+0x30]
    65031afe:	jns    0x65031b03
    65031b00:	neg    r8d
    65031b03:	add    r8d,ebx
    65031b06:	test   r12d,r12d
    65031b09:	jne    0x65031b13
    65031b0b:	add    r8d,DWORD PTR [rsp+0x110]
    65031b13:	test   r15d,r15d
    65031b16:	jne    0x65031b20
    65031b18:	sub    r8d,DWORD PTR [rsp+0x118]
    65031b20:	cmp    r8d,0x1450
    65031b27:	jg     0x65031eea
    65031b2d:	cmp    r8d,0xffffebb0
    65031b34:	jl     0x65031ede
    65031b3a:	lea    rdx,[rip+0x11b3f]        # 0x65043680
    65031b41:	sub    rdx,0x60
    65031b45:	test   r8d,r8d
    65031b48:	je     0x65031ec7
    65031b4e:	jns    0x65031b5e
    65031b50:	lea    rdx,[rip+0x11c89]        # 0x650437e0
    65031b57:	neg    r8d
    65031b5a:	sub    rdx,0x60
    65031b5e:	movzx  eax,WORD PTR [rsp+0x60]
    65031b63:	cmp    DWORD PTR [rsp+0x38],0x0
    65031b68:	mov    ebp,0x0
    65031b6d:	cmove  ax,bp
    65031b71:	test   r8d,r8d
    65031b74:	mov    WORD PTR [rsp+0x60],ax
    65031b79:	je     0x65031ec5
    65031b7f:	mov    r9d,0xffff8000
    65031b85:	data16 data16 xchg ax,ax
    65031b89:	data16 xchg ax,ax
    65031b8c:	data16 data16 xchg ax,ax
    65031b90:	mov    eax,r8d
    65031b93:	add    rdx,0x54
    65031b97:	sar    r8d,0x3
    65031b9b:	and    eax,0x7
    65031b9e:	mov    DWORD PTR [rsp+0x30],r8d
    65031ba3:	mov    QWORD PTR [rsp+0x40],rdx
    65031ba8:	je     0x65031ebc
    65031bae:	cdqe   
    65031bb0:	lea    rcx,[rax+rax*2]
    65031bb4:	cmp    WORD PTR [rdx+rcx*4],0x8000
    65031bba:	lea    r14,[rdx+rcx*4]
    65031bbe:	jb     0x65031be7
    65031bc0:	mov    rax,QWORD PTR [r14]
    65031bc3:	lea    rcx,[rsp+0x70]
    65031bc8:	mov    QWORD PTR [rcx],rax
    65031bcb:	mov    eax,DWORD PTR [r14+0x8]
    65031bcf:	lea    r14,[rsp+0x70]
    65031bd4:	mov    DWORD PTR [rcx+0x8],eax
    65031bd7:	mov    rax,QWORD PTR [rsp+0x70]
    65031bdc:	shr    rax,0x10
    65031be0:	sub    eax,0x1
    65031be3:	mov    DWORD PTR [rsp+0x72],eax
    65031be7:	movzx  ecx,WORD PTR [r14+0xa]
    65031bec:	movzx  eax,WORD PTR [rsp+0x6a]
    65031bf1:	mov    r15d,ebp
    65031bf4:	movzx  edx,cx
    65031bf7:	and    cx,0x7fff
    65031bfc:	mov    DWORD PTR [rsp+0x50],ebp
    65031c00:	xor    dx,ax
    65031c03:	and    ax,0x7fff
    65031c07:	mov    DWORD PTR [rsp+0x54],ebp
    65031c0b:	and    dx,0x8000
    65031c10:	cmp    ax,0x7fff
    65031c14:	mov    DWORD PTR [rsp+0x58],ebp
    65031c18:	mov    WORD PTR [rsp+0x38],dx
    65031c1d:	lea    edi,[rax+rcx*1]
    65031c20:	jae    0x65031e9f
    65031c26:	cmp    cx,0x7fff
    65031c2b:	jae    0x65031e9f
    65031c31:	cmp    di,0xbffd
    65031c36:	ja     0x65031e9f
    65031c3c:	cmp    di,0x3fbf
    65031c41:	ja     0x65031c4c
    65031c43:	mov    DWORD PTR [rsp+0x68],ebp
    65031c47:	jmp    0x65031eaf
    65031c4c:	test   ax,ax
    65031c4f:	jne    0x65031c77
    65031c51:	mov    eax,DWORD PTR [rsp+0x68]
    65031c55:	add    di,0x1
    65031c59:	btr    eax,0x1f
    65031c5d:	test   eax,eax
    65031c5f:	jne    0x65031c77
    65031c61:	cmp    DWORD PTR [rsp+0x64],ebp
    65031c65:	jne    0x65031c77
    65031c67:	cmp    DWORD PTR [rsp+0x60],ebp
    65031c6b:	jne    0x65031c77
    65031c6d:	mov    WORD PTR [rsp+0x6a],bp
    65031c72:	jmp    0x65031eb7
    65031c77:	test   cx,cx
    65031c7a:	jne    0x65031ca0
    65031c7c:	mov    eax,DWORD PTR [r14+0x8]
    65031c80:	add    di,0x1
    65031c84:	btr    eax,0x1f
    65031c88:	test   eax,eax
    65031c8a:	jne    0x65031ca0
    65031c8c:	cmp    DWORD PTR [r14+0x4],ebp
    65031c90:	jne    0x65031ca0
    65031c92:	cmp    DWORD PTR [r14],ebp
    65031c95:	jne    0x65031ca0
    65031c97:	mov    DWORD PTR [rsp+0x68],ebp
    65031c9b:	jmp    0x65031eaf
    65031ca0:	mov    r13d,ebp
    65031ca3:	lea    rdx,[rsp+0x54]
    65031ca8:	mov    r12d,0x5
    65031cae:	xchg   ax,ax
    65031cb0:	test   r12d,r12d
    65031cb3:	lea    eax,[r13+r13*1+0x0]
    65031cb8:	mov    ebx,r12d
    65031cbb:	movsxd rcx,eax
    65031cbe:	jle    0x65031d11
    65031cc0:	mov    esi,r13d
    65031cc3:	lea    r10,[r14+0x8]
    65031cc7:	lea    r11,[rsp+rcx*1+0x60]
    65031ccc:	and    esi,0x1
    65031ccf:	nop
    65031cd0:	movzx  eax,WORD PTR [r10]
    65031cd4:	movzx  ecx,WORD PTR [r11]
    65031cd8:	mov    r8d,ebp
    65031cdb:	imul   ecx,eax
    65031cde:	mov    eax,DWORD PTR [rdx-0x4]
    65031ce1:	lea    r9d,[rax+rcx*1]
    65031ce5:	cmp    r9d,eax
    65031ce8:	jb     0x65031cef
    65031cea:	cmp    r9d,ecx
    65031ced:	jae    0x65031cf5
    65031cef:	mov    r8d,0x1
    65031cf5:	test   r8d,r8d
    65031cf8:	mov    DWORD PTR [rdx-0x4],r9d
    65031cfc:	je     0x65031d02
    65031cfe:	add    WORD PTR [rdx],0x1
    65031d02:	sub    ebx,0x1
    65031d05:	add    r11,0x2
    65031d09:	sub    r10,0x2
    65031d0d:	test   ebx,ebx
    65031d0f:	jg     0x65031cd0
    65031d11:	sub    r12d,0x1
    65031d15:	add    rdx,0x2
    65031d19:	add    r13d,0x1
    65031d1d:	test   r12d,r12d
    65031d20:	jg     0x65031cb0
    65031d22:	mov    r8d,DWORD PTR [rsp+0x58]
    65031d27:	mov    edx,DWORD PTR [rsp+0x54]
    65031d2b:	mov    r9d,DWORD PTR [rsp+0x50]
    65031d30:	add    di,0xc002
    65031d35:	test   di,di
    65031d38:	jle    0x65031d7e
    65031d3a:	data16 xchg ax,ax
    65031d3d:	data16 xchg ax,ax
    65031d40:	bt     r8d,0x1f
    65031d45:	jb     0x65031d79
    65031d47:	mov    ecx,edx
    65031d49:	mov    eax,r9d
    65031d4c:	add    r8d,r8d
    65031d4f:	add    edx,edx
    65031d51:	shr    eax,0x1f
    65031d54:	shr    ecx,0x1f
    65031d57:	add    r9d,r9d
    65031d5a:	or     edx,eax
    65031d5c:	or     r8d,ecx
    65031d5f:	add    di,0xffff
    65031d64:	mov    DWORD PTR [rsp+0x54],edx
    65031d68:	mov    DWORD PTR [rsp+0x58],r8d
    65031d6d:	test   di,di
    65031d70:	mov    DWORD PTR [rsp+0x50],r9d
    65031d75:	jg     0x65031d40
    65031d77:	jmp    0x65031d7e
    65031d79:	test   di,di
    65031d7c:	jg     0x65031de3
    65031d7e:	add    di,0xffff
    65031d83:	jns    0x65031de3
    65031d85:	movzx  eax,di
    65031d88:	neg    ax
    65031d8b:	movzx  r10d,ax
    65031d8f:	add    di,r10w
    65031d93:	test   BYTE PTR [rsp+0x50],0x1
    65031d98:	je     0x65031d9e
    65031d9a:	add    r15d,0x1
    65031d9e:	mov    ecx,edx
    65031da0:	mov    eax,r8d
    65031da3:	shr    r9d,1
    65031da6:	shl    ecx,0x1f
    65031da9:	shr    edx,1
    65031dab:	shl    eax,0x1f
    65031dae:	or     r9d,ecx
    65031db1:	shr    r8d,1
    65031db4:	or     edx,eax
    65031db6:	sub    r10,0x1
    65031dba:	mov    DWORD PTR [rsp+0x50],r9d
    65031dbf:	jne    0x65031d93
    65031dc1:	test   r15d,r15d
    65031dc4:	mov    DWORD PTR [rsp+0x54],edx
    65031dc8:	mov    DWORD PTR [rsp+0x58],r8d
    65031dcd:	je     0x65031de3
    65031dcf:	movzx  eax,r9w
    65031dd3:	or     ax,0x1
    65031dd7:	mov    WORD PTR [rsp+0x50],ax
    65031ddc:	mov    r9d,DWORD PTR [rsp+0x50]
    65031de1:	jmp    0x65031de8
    65031de3:	mov    ax,WORD PTR [rsp+0x50]
    65031de8:	cmp    ax,0x8000
    65031dec:	ja     0x65031dfe
    65031dee:	and    r9d,0x1ffff
    65031df5:	cmp    r9d,0x18000
    65031dfc:	jne    0x65031e62
    65031dfe:	mov    eax,DWORD PTR [rsp+0x52]
    65031e02:	cmp    eax,0xffffffff
    65031e05:	jne    0x65031e57
    65031e07:	mov    eax,DWORD PTR [rsp+0x56]
    65031e0b:	mov    DWORD PTR [rsp+0x52],ebp
    65031e0f:	cmp    eax,0xffffffff
    65031e12:	jne    0x65031e49
    65031e14:	movzx  eax,WORD PTR [rsp+0x5a]
    65031e19:	mov    DWORD PTR [rsp+0x56],ebp
    65031e1d:	mov    edx,DWORD PTR [rsp+0x54]
    65031e21:	cmp    ax,0xffff
    65031e25:	jne    0x65031e39
    65031e27:	mov    WORD PTR [rsp+0x5a],0x8000
    65031e2e:	mov    r8d,DWORD PTR [rsp+0x58]
    65031e33:	add    di,0x1
    65031e37:	jmp    0x65031e62
    65031e39:	add    ax,0x1
    65031e3d:	mov    WORD PTR [rsp+0x5a],ax
    65031e42:	mov    r8d,DWORD PTR [rsp+0x58]
    65031e47:	jmp    0x65031e62
    65031e49:	add    eax,0x1
    65031e4c:	mov    DWORD PTR [rsp+0x56],eax
    65031e50:	mov    r8d,DWORD PTR [rsp+0x58]
    65031e55:	jmp    0x65031e5e
    65031e57:	add    eax,0x1
    65031e5a:	mov    DWORD PTR [rsp+0x52],eax
    65031e5e:	mov    edx,DWORD PTR [rsp+0x54]
    65031e62:	cmp    di,0x7fff
    65031e67:	mov    r9d,0xffff8000
    65031e6d:	jb     0x65031e7b
    65031e6f:	cmp    WORD PTR [rsp+0x38],bp
    65031e74:	mov    r8d,DWORD PTR [rsp+0x30]
    65031e79:	jmp    0x65031ea2
    65031e7b:	movzx  eax,WORD PTR [rsp+0x52]
    65031e80:	or     di,WORD PTR [rsp+0x38]
    65031e85:	mov    DWORD PTR [rsp+0x66],r8d
    65031e8a:	mov    r8d,DWORD PTR [rsp+0x30]
    65031e8f:	mov    WORD PTR [rsp+0x60],ax
    65031e94:	mov    WORD PTR [rsp+0x6a],di
    65031e99:	mov    DWORD PTR [rsp+0x62],edx
    65031e9d:	jmp    0x65031eb7
    65031e9f:	test   dx,dx
    65031ea2:	mov    eax,0x7fff8000
    65031ea7:	cmovne eax,r9d
    65031eab:	mov    DWORD PTR [rsp+0x68],eax
    65031eaf:	mov    DWORD PTR [rsp+0x60],ebp
    65031eb3:	mov    DWORD PTR [rsp+0x64],ebp
    65031eb7:	mov    rdx,QWORD PTR [rsp+0x40]
    65031ebc:	test   r8d,r8d
    65031ebf:	jne    0x65031b90
    65031ec5:	xor    edi,edi
    65031ec7:	mov    eax,DWORD PTR [rsp+0x68]
    65031ecb:	movzx  ecx,WORD PTR [rsp+0x60]
    65031ed0:	mov    edx,DWORD PTR [rsp+0x62]
    65031ed4:	mov    r8d,DWORD PTR [rsp+0x66]
    65031ed9:	shr    eax,0x10
    65031edc:	jmp    0x65031f17
    65031ede:	mov    r8d,edi
    65031ee1:	mov    edx,edi
    65031ee3:	mov    edi,0x1
    65031ee8:	jmp    0x65031f11
    65031eea:	mov    edx,edi
    65031eec:	mov    ax,0x7fff
    65031ef0:	mov    r8d,0x80000000
    65031ef6:	mov    edi,0x2
    65031efb:	xor    cx,cx
    65031efe:	jmp    0x65031f17
    65031f00:	mov    r8d,edi
    65031f03:	mov    edx,edi
    65031f05:	jmp    0x65031f11
    65031f07:	mov    r8d,edi
    65031f0a:	mov    edx,edi
    65031f0c:	mov    edi,0x4
    65031f11:	xor    cx,cx
    65031f14:	xor    ax,ax
    65031f17:	mov    r9,QWORD PTR [rsp+0x48]
    65031f1c:	or     ax,WORD PTR [rsp+0x34]
    65031f21:	mov    WORD PTR [r9+0xa],ax
    65031f26:	mov    eax,edi
    65031f28:	mov    WORD PTR [r9],cx
    65031f2c:	mov    DWORD PTR [r9+0x2],edx
    65031f30:	mov    DWORD PTR [r9+0x6],r8d
    65031f34:	mov    rcx,QWORD PTR [rsp+0xa0]
    65031f3c:	xor    rcx,rsp
    65031f3f:	call   0x6501e4e0
    65031f44:	mov    rbx,QWORD PTR [rsp+0x100]
    65031f4c:	add    rsp,0xb0
    65031f53:	pop    r15
    65031f55:	pop    r14
    65031f57:	pop    r13
    65031f59:	pop    r12
    65031f5b:	pop    rdi
    65031f5c:	pop    rsi
    65031f5d:	pop    rbp
    65031f5e:	ret    
    65031f5f:	nop
    65031f60:	sub    BYTE PTR [rdi],dl
    65031f62:	add    eax,DWORD PTR [rax]
    65031f64:	mov    BYTE PTR [rdi],dl
    65031f66:	add    eax,DWORD PTR [rax]
    65031f68:	lock (bad) 
    65031f6a:	add    eax,DWORD PTR [rax]
    65031f6c:	and    al,0x18
    65031f6e:	add    eax,DWORD PTR [rax]
    65031f70:	test   eax,0x30000318
    65031f75:	sbb    DWORD PTR [rbx],eax
    65031f77:	add    BYTE PTR [rsi+0x19],cl
    65031f7a:	add    eax,DWORD PTR [rax]
    65031f7c:	rcr    DWORD PTR [rcx],0x3
    65031f7f:	add    BYTE PTR [rcx+0x5b000319],dl
    65031f85:	sbb    al,BYTE PTR [rbx]
    65031f87:	add    dh,bh
    65031f89:	sbb    DWORD PTR [rbx],eax
    65031f8b:	add    bh,dl
    65031f8d:	sbb    DWORD PTR [rbx],eax
    65031f8f:	add    BYTE PTR [rdx],ah
    65031f91:	sbb    DWORD PTR [rbx],eax
    65031f93:	add    al,ch
    65031f95:	(bad)  
    65031f96:	add    eax,DWORD PTR [rax]
    65031f98:	sahf   
    65031f99:	sbb    BYTE PTR [rbx],al
    65031f9b:	add    BYTE PTR [rcx+0x1a],dl
    65031f9e:	add    eax,DWORD PTR [rax]
    65031fa0:	add    BYTE PTR [rbx],al
    65031fa2:	add    BYTE PTR [rbx],al
    65031fa4:	add    eax,DWORD PTR [rcx]
    65031fa6:	add    eax,DWORD PTR [rbx]
    65031fa8:	add    eax,DWORD PTR [rbx]
    65031faa:	add    eax,DWORD PTR [rbx]
    65031fac:	add    eax,DWORD PTR [rbx]
    65031fae:	add    eax,DWORD PTR [rbx]
    65031fb0:	add    eax,DWORD PTR [rbx]
    65031fb2:	add    eax,DWORD PTR [rbx]
    65031fb4:	add    eax,DWORD PTR [rbx]
    65031fb6:	add    eax,DWORD PTR [rbx]
    65031fb8:	add    eax,DWORD PTR [rdx]
    65031fba:	add    al,BYTE PTR [rbx]
    65031fbc:	add    eax,DWORD PTR [rbx]
    65031fbe:	add    eax,DWORD PTR [rbx]
    65031fc0:	add    eax,DWORD PTR [rbx]
    65031fc2:	add    eax,DWORD PTR [rbx]
    65031fc4:	add    eax,DWORD PTR [rbx]
    65031fc6:	add    eax,DWORD PTR [rbx]
    65031fc8:	add    eax,DWORD PTR [rbx]
    65031fca:	add    eax,DWORD PTR [rbx]
    65031fcc:	add    eax,DWORD PTR [rbx]
    65031fce:	add    eax,DWORD PTR [rbx]
    65031fd0:	add    eax,DWORD PTR [rbx]
    65031fd2:	add    eax,DWORD PTR [rbx]
    65031fd4:	add    eax,DWORD PTR [rbx]
    65031fd6:	add    eax,DWORD PTR [rbx]
    65031fd8:	add    eax,DWORD PTR [rdx]
    65031fda:	add    dl,BYTE PTR [rax+0x31922]
    65031fe0:	sahf   
    65031fe1:	sbb    BYTE PTR [rbx],al
    65031fe3:	add    BYTE PTR [rcx+0x1a],dl
    65031fe6:	add    eax,DWORD PTR [rax]
    65031fe8:	add    BYTE PTR [rdx],al
    65031fea:	add    BYTE PTR [rdx],al
    65031fec:	add    al,BYTE PTR [rdx]
    65031fee:	add    al,BYTE PTR [rdx]
    65031ff0:	add    al,BYTE PTR [rdx]
    65031ff2:	add    al,BYTE PTR [rdx]
    65031ff4:	add    al,BYTE PTR [rdx]
    65031ff6:	add    al,BYTE PTR [rdx]
    65031ff8:	add    al,BYTE PTR [rdx]
    65031ffa:	add    al,BYTE PTR [rdx]
    65031ffc:	add    al,BYTE PTR [rdx]
    65031ffe:	add    al,BYTE PTR [rdx]
    65032000:	add    al,BYTE PTR [rcx]
    65032002:	add    DWORD PTR [rdx],eax
    65032004:	add    al,BYTE PTR [rdx]
    65032006:	add    al,BYTE PTR [rdx]
    65032008:	add    al,BYTE PTR [rdx]
    6503200a:	add    al,BYTE PTR [rdx]
    6503200c:	add    al,BYTE PTR [rdx]
    6503200e:	add    al,BYTE PTR [rdx]
    65032010:	add    al,BYTE PTR [rdx]
    65032012:	add    al,BYTE PTR [rdx]
    65032014:	add    al,BYTE PTR [rdx]
    65032016:	add    al,BYTE PTR [rdx]
    65032018:	add    al,BYTE PTR [rdx]
    6503201a:	add    al,BYTE PTR [rdx]
    6503201c:	add    al,BYTE PTR [rdx]
    6503201e:	add    al,BYTE PTR [rdx]
    65032020:	add    al,BYTE PTR [rcx]
    65032022:	add    DWORD PTR [rax+0x31922],edx
    65032028:	sahf   
    65032029:	sbb    BYTE PTR [rbx],al
    6503202b:	add    BYTE PTR [rcx+0x1a],dl
    6503202e:	add    eax,DWORD PTR [rax]
    65032030:	add    BYTE PTR [rdx],al
    65032032:	add    BYTE PTR [rdx],al
    65032034:	add    al,BYTE PTR [rdx]
    65032036:	add    al,BYTE PTR [rdx]
    65032038:	add    al,BYTE PTR [rdx]
    6503203a:	add    al,BYTE PTR [rdx]
    6503203c:	add    al,BYTE PTR [rdx]
    6503203e:	add    al,BYTE PTR [rdx]
    65032040:	add    al,BYTE PTR [rdx]
    65032042:	add    al,BYTE PTR [rdx]
    65032044:	add    al,BYTE PTR [rdx]
    65032046:	add    al,BYTE PTR [rdx]
    65032048:	add    al,BYTE PTR [rcx]
    6503204a:	add    DWORD PTR [rdx],eax
    6503204c:	add    al,BYTE PTR [rdx]
    6503204e:	add    al,BYTE PTR [rdx]
    65032050:	add    al,BYTE PTR [rdx]
    65032052:	add    al,BYTE PTR [rdx]
    65032054:	add    al,BYTE PTR [rdx]
    65032056:	add    al,BYTE PTR [rdx]
    65032058:	add    al,BYTE PTR [rdx]
    6503205a:	add    al,BYTE PTR [rdx]
    6503205c:	add    al,BYTE PTR [rdx]
    6503205e:	add    al,BYTE PTR [rdx]
    65032060:	add    al,BYTE PTR [rdx]
    65032062:	add    al,BYTE PTR [rdx]
    65032064:	add    al,BYTE PTR [rdx]
    65032066:	add    al,BYTE PTR [rdx]
    65032068:	add    al,BYTE PTR [rcx]
    6503206a:	add    esp,ecx
    6503206c:	int3   
    6503206d:	int3   
    6503206e:	int3   
    6503206f:	int3   
    65032070:	mov    r11,rsp
    65032073:	push   rsi
    65032074:	push   rdi
    65032075:	sub    rsp,0xd8
    6503207c:	mov    rax,QWORD PTR [rip+0x1009d]        # 0x65042120
    65032083:	xor    rax,rsp
    65032086:	mov    QWORD PTR [rsp+0xa0],rax
    6503208e:	movzx  r10d,WORD PTR [rcx+0x8]
    65032093:	mov    DWORD PTR [rsp+0x44],edx
    65032097:	mov    rdi,r9
    6503209a:	movzx  edx,r10w
    6503209e:	and    r10w,0x7fff
    650320a4:	mov    QWORD PTR [rsp+0x58],r9
    650320a9:	mov    r9d,DWORD PTR [rcx+0x4]
    650320ad:	and    dx,0x8000
    650320b2:	mov    BYTE PTR [r11-0x68],0xcc
    650320b7:	test   dx,dx
    650320ba:	mov    BYTE PTR [r11-0x67],0xcc
    650320bf:	mov    BYTE PTR [r11-0x66],0xcc
    650320c4:	mov    BYTE PTR [r11-0x65],0xcc
    650320c9:	mov    BYTE PTR [r11-0x64],0xcc
    650320ce:	mov    BYTE PTR [r11-0x63],0xcc
    650320d3:	mov    BYTE PTR [r11-0x62],0xcc
    650320d8:	mov    BYTE PTR [r11-0x61],0xcc
    650320dd:	mov    BYTE PTR [r11-0x60],0xcc
    650320e2:	mov    BYTE PTR [r11-0x5f],0xcc
    650320e7:	mov    BYTE PTR [r11-0x5e],0xfb
    650320ec:	mov    BYTE PTR [r11-0x5d],0x3f
    650320f1:	mov    r11d,DWORD PTR [rcx]
    650320f4:	mov    DWORD PTR [rsp+0x50],r8d
    650320f9:	mov    esi,0x1
    650320fe:	mov    WORD PTR [rsp+0x30],dx
    65032103:	je     0x6503210b
    65032105:	mov    BYTE PTR [rdi+0x2],0x2d
    65032109:	jmp    0x6503210f
    6503210b:	mov    BYTE PTR [rdi+0x2],0x20
    6503210f:	test   r10w,r10w
    65032113:	mov    QWORD PTR [rsp+0xf8],rbx
    6503211b:	mov    QWORD PTR [rsp+0xd0],rbp
    65032123:	mov    QWORD PTR [rsp+0xc8],r12
    6503212b:	mov    QWORD PTR [rsp+0xc0],r13
    65032133:	jne    0x65032171
    65032135:	test   r9d,r9d
    65032138:	jne    0x650322a4
    6503213e:	test   r11d,r11d
    65032141:	jne    0x650322a4
    65032147:	mov    eax,0x20
    6503214c:	mov    ecx,0x2d
    65032151:	cmp    dx,0x8000
    65032156:	cmove  eax,ecx
    65032159:	mov    WORD PTR [rdi],r11w
    6503215d:	mov    BYTE PTR [rdi+0x3],sil
    65032161:	mov    BYTE PTR [rdi+0x4],0x30
    65032165:	mov    BYTE PTR [rdi+0x5],r11b
    65032169:	mov    BYTE PTR [rdi+0x2],al
    6503216c:	jmp    0x65032ddc
    65032171:	cmp    r10w,0x7fff
    65032177:	jne    0x650322a4
    6503217d:	cmp    r9d,0x80000000
    65032184:	mov    WORD PTR [rdi],si
    65032187:	jne    0x6503218e
    65032189:	test   r11d,r11d
    6503218c:	je     0x650321d3
    6503218e:	bt     r9d,0x1e
    65032193:	jb     0x650321d3
    65032195:	lea    rcx,[rdi+0x4]
    65032199:	lea    r8,[rip+0x4d48]        # 0x65036ee8
    650321a0:	mov    edx,0x16
    650321a5:	call   0x650201b0
    650321aa:	xor    ebx,ebx
    650321ac:	test   eax,eax
    650321ae:	je     0x65032299
    650321b4:	xor    r9d,r9d
    650321b7:	xor    r8d,r8d
    650321ba:	xor    edx,edx
    650321bc:	xor    ecx,ecx
    650321be:	mov    QWORD PTR [rsp+0x20],rbx
    650321c3:	call   0x6501d7b0
    650321c8:	mov    BYTE PTR [rdi+0x3],0x6
    650321cc:	mov    esi,ebx
    650321ce:	jmp    0x65032ddc
    650321d3:	test   dx,dx
    650321d6:	je     0x65032223
    650321d8:	cmp    r9d,0xc0000000
    650321df:	jne    0x65032223
    650321e1:	test   r11d,r11d
    650321e4:	jne    0x6503226a
    650321ea:	lea    rcx,[rdi+0x4]
    650321ee:	lea    r8,[rip+0x4ceb]        # 0x65036ee0
    650321f5:	lea    edx,[r11+0x16]
    650321f9:	call   0x650201b0
    650321fe:	xor    ebx,ebx
    65032200:	test   eax,eax
    65032202:	je     0x6503225f
    65032204:	xor    r9d,r9d
    65032207:	xor    r8d,r8d
    6503220a:	xor    edx,edx
    6503220c:	xor    ecx,ecx
    6503220e:	mov    QWORD PTR [rsp+0x20],rbx
    65032213:	call   0x6501d7b0
    65032218:	mov    BYTE PTR [rdi+0x3],0x5
    6503221c:	mov    esi,ebx
    6503221e:	jmp    0x65032ddc
    65032223:	cmp    r9d,0x80000000
    6503222a:	jne    0x6503226a
    6503222c:	test   r11d,r11d
    6503222f:	jne    0x6503226a
    65032231:	lea    rcx,[rdi+0x4]
    65032235:	lea    r8,[rip+0x4c9c]        # 0x65036ed8
    6503223c:	lea    edx,[r11+0x16]
    65032240:	call   0x650201b0
    65032245:	xor    ebx,ebx
    65032247:	test   eax,eax
    65032249:	je     0x6503225f
    6503224b:	xor    r9d,r9d
    6503224e:	xor    r8d,r8d
    65032251:	xor    edx,edx
    65032253:	xor    ecx,ecx
    65032255:	mov    QWORD PTR [rsp+0x20],rbx
    6503225a:	call   0x6501d7b0
    6503225f:	mov    BYTE PTR [rdi+0x3],0x5
    65032263:	mov    esi,ebx
    65032265:	jmp    0x65032ddc
    6503226a:	lea    rcx,[rdi+0x4]
    6503226e:	lea    r8,[rip+0x4c5b]        # 0x65036ed0
    65032275:	mov    edx,0x16
    6503227a:	call   0x650201b0
    6503227f:	xor    ebx,ebx
    65032281:	test   eax,eax
    65032283:	je     0x65032299
    65032285:	xor    r9d,r9d
    65032288:	xor    r8d,r8d
    6503228b:	xor    edx,edx
    6503228d:	xor    ecx,ecx
    6503228f:	mov    QWORD PTR [rsp+0x20],rbx
    65032294:	call   0x6501d7b0
    65032299:	mov    BYTE PTR [rdi+0x3],0x6
    6503229d:	mov    esi,ebx
    6503229f:	jmp    0x65032ddc
    650322a4:	movzx  r8d,r10w
    650322a8:	mov    WORD PTR [rsp+0x7a],r10w
    650322ae:	mov    ecx,r9d
    650322b1:	shr    ecx,0x18
    650322b4:	mov    eax,r8d
    650322b7:	mov    DWORD PTR [rsp+0x72],r11d
    650322bc:	shr    eax,0x8
    650322bf:	mov    r11d,0x5
    650322c5:	xor    ebx,ebx
    650322c7:	imul   r8d,r8d,0x4d10
    650322ce:	lea    edx,[rax+rcx*2]
    650322d1:	mov    QWORD PTR [rsp+0xb8],r14
    650322d9:	mov    DWORD PTR [rsp+0x76],r9d
    650322de:	mov    QWORD PTR [rsp+0xb0],r15
    650322e6:	mov    WORD PTR [rsp+0x70],0x0
    650322ed:	mov    DWORD PTR [rsp+0x48],r11d
    650322f2:	imul   edx,edx,0x4d
    650322f5:	lea    ecx,[rdx+r8*1-0x134312f4]
    650322fd:	lea    rdx,[rip+0x1137c]        # 0x65043680
    65032304:	mov    edi,0x7fff8000
    65032309:	sar    ecx,0x10
    6503230c:	sub    rdx,0x60
    65032310:	mov    r12d,0xffff8000
    65032316:	movsx  r10d,cx
    6503231a:	mov    DWORD PTR [rsp+0x34],ecx
    6503231e:	neg    r10d
    65032321:	je     0x6503275d
    65032327:	test   r10d,r10d
    6503232a:	jns    0x6503233a
    6503232c:	lea    rdx,[rip+0x114ad]        # 0x650437e0
    65032333:	neg    r10d
    65032336:	sub    rdx,0x60
    6503233a:	test   r10d,r10d
    6503233d:	je     0x6503275d
    65032343:	mov    r9d,DWORD PTR [rsp+0x74]
    65032348:	mov    r8d,DWORD PTR [rsp+0x70]
    6503234d:	data16 xchg ax,ax
    65032350:	mov    eax,r10d
    65032353:	add    rdx,0x54
    65032357:	sar    r10d,0x3
    6503235b:	and    eax,0x7
    6503235e:	mov    DWORD PTR [rsp+0x40],r10d
    65032363:	mov    QWORD PTR [rsp+0x38],rdx
    65032368:	je     0x6503274e
    6503236e:	cdqe   
    65032370:	lea    rcx,[rax+rax*2]
    65032374:	cmp    WORD PTR [rdx+rcx*4],0x8000
    6503237a:	lea    r15,[rdx+rcx*4]
    6503237e:	jb     0x650323b3
    65032380:	mov    rax,QWORD PTR [r15]
    65032383:	lea    rcx,[rsp+0x90]
    6503238b:	mov    QWORD PTR [rcx],rax
    6503238e:	mov    eax,DWORD PTR [r15+0x8]
    65032392:	lea    r15,[rsp+0x90]
    6503239a:	mov    DWORD PTR [rcx+0x8],eax
    6503239d:	mov    rax,QWORD PTR [rsp+0x90]
    650323a5:	shr    rax,0x10
    650323a9:	sub    eax,0x1
    650323ac:	mov    DWORD PTR [rsp+0x92],eax
    650323b3:	movzx  ecx,WORD PTR [r15+0xa]
    650323b8:	movzx  eax,WORD PTR [rsp+0x7a]
    650323bd:	mov    DWORD PTR [rsp+0x60],ebx
    650323c1:	movzx  edx,cx
    650323c4:	and    cx,0x7fff
    650323c9:	mov    DWORD PTR [rsp+0x64],ebx
    650323cd:	xor    dx,ax
    650323d0:	and    ax,0x7fff
    650323d4:	mov    DWORD PTR [rsp+0x68],ebx
    650323d8:	and    dx,0x8000
    650323dd:	cmp    ax,0x7fff
    650323e1:	lea    ebp,[rax+rcx*1]
    650323e4:	mov    WORD PTR [rsp+0x32],dx
    650323e9:	jae    0x6503272e
    650323ef:	cmp    cx,0x7fff
    650323f4:	jae    0x6503272e
    650323fa:	cmp    bp,0xbffd
    650323ff:	ja     0x6503272e
    65032405:	cmp    bp,0x3fbf
    6503240a:	ja     0x65032428
    6503240c:	mov    rdx,QWORD PTR [rsp+0x38]
    65032411:	mov    DWORD PTR [rsp+0x78],ebx
    65032415:	mov    r9d,ebx
    65032418:	mov    DWORD PTR [rsp+0x74],ebx
    6503241c:	mov    r8d,ebx
    6503241f:	mov    DWORD PTR [rsp+0x70],ebx
    65032423:	jmp    0x6503274e
    65032428:	test   ax,ax
    6503242b:	jne    0x65032456
    6503242d:	mov    eax,DWORD PTR [rsp+0x78]
    65032431:	add    bp,0x1
    65032435:	btr    eax,0x1f
    65032439:	test   eax,eax
    6503243b:	jne    0x65032456
    6503243d:	test   r9d,r9d
    65032440:	jne    0x65032456
    65032442:	test   r8d,r8d
    65032445:	jne    0x65032456
    65032447:	mov    rdx,QWORD PTR [rsp+0x38]
    6503244c:	mov    WORD PTR [rsp+0x7a],bx
    65032451:	jmp    0x6503274e
    65032456:	test   cx,cx
    65032459:	jne    0x65032492
    6503245b:	mov    eax,DWORD PTR [r15+0x8]
    6503245f:	add    bp,0x1
    65032463:	btr    eax,0x1f
    65032467:	test   eax,eax
    65032469:	jne    0x65032492
    6503246b:	cmp    DWORD PTR [r15+0x4],ebx
    6503246f:	jne    0x65032492
    65032471:	cmp    DWORD PTR [r15],ebx
    65032474:	jne    0x65032492
    65032476:	mov    rdx,QWORD PTR [rsp+0x38]
    6503247b:	mov    DWORD PTR [rsp+0x78],ebx
    6503247f:	mov    r9d,ebx
    65032482:	mov    DWORD PTR [rsp+0x74],ebx
    65032486:	mov    r8d,ebx
    65032489:	mov    DWORD PTR [rsp+0x70],ebx
    6503248d:	jmp    0x6503274e
    65032492:	mov    r14d,ebx
    65032495:	lea    rdx,[rsp+0x64]
    6503249a:	mov    r13d,r11d
    6503249d:	data16 xchg ax,ax
    650324a0:	test   r13d,r13d
    650324a3:	lea    eax,[r14+r14*1]
    650324a7:	mov    edi,r13d
    650324aa:	movsxd rcx,eax
    650324ad:	jle    0x65032520
    650324af:	mov    r12d,r14d
    650324b2:	lea    r10,[rsp+rcx*1+0x70]
    650324b7:	lea    r11,[r15+0x8]
    650324bb:	and    r12d,0x1
    650324bf:	nop
    650324c0:	movzx  ecx,WORD PTR [r10]
    650324c4:	movzx  eax,WORD PTR [r11]
    650324c8:	imul   ecx,eax
    650324cb:	test   r12d,r12d
    650324ce:	je     0x650324ed
    650324d0:	mov    eax,DWORD PTR [rdx-0x4]
    650324d3:	mov    r8d,ebx
    650324d6:	lea    r9d,[rax+rcx*1]
    650324da:	cmp    r9d,eax
    650324dd:	jb     0x650324e4
    650324df:	cmp    r9d,ecx
    650324e2:	jae    0x650324e7
    650324e4:	mov    r8d,esi
    650324e7:	mov    DWORD PTR [rdx-0x4],r9d
    650324eb:	jmp    0x65032508
    650324ed:	mov    eax,DWORD PTR [rdx-0x4]
    650324f0:	mov    r8d,ebx
    650324f3:	lea    r9d,[rax+rcx*1]
    650324f7:	cmp    r9d,eax
    650324fa:	jb     0x65032501
    650324fc:	cmp    r9d,ecx
    650324ff:	jae    0x65032504
    65032501:	mov    r8d,esi
    65032504:	mov    DWORD PTR [rdx-0x4],r9d
    65032508:	test   r8d,r8d
    6503250b:	je     0x65032511
    6503250d:	add    WORD PTR [rdx],0x1
    65032511:	sub    edi,0x1
    65032514:	add    r10,0x2
    65032518:	sub    r11,0x2
    6503251c:	test   edi,edi
    6503251e:	jg     0x650324c0
    65032520:	sub    r13d,0x1
    65032524:	add    rdx,0x2
    65032528:	add    r14d,0x1
    6503252c:	test   r13d,r13d
    6503252f:	jg     0x650324a0
    65032535:	add    bp,0xc002
    6503253a:	test   bp,bp
    6503253d:	jle    0x650325f8
    65032543:	mov    r9d,DWORD PTR [rsp+0x68]
    65032548:	mov    edx,DWORD PTR [rsp+0x64]
    6503254c:	mov    r8d,DWORD PTR [rsp+0x60]
    65032551:	bt     r9d,0x1f
    65032556:	jb     0x6503258a
    65032558:	mov    ecx,edx
    6503255a:	mov    eax,r8d
    6503255d:	add    r9d,r9d
    65032560:	add    edx,edx
    65032562:	shr    eax,0x1f
    65032565:	shr    ecx,0x1f
    65032568:	add    r8d,r8d
    6503256b:	or     edx,eax
    6503256d:	or     r9d,ecx
    65032570:	add    bp,0xffff
    65032575:	mov    DWORD PTR [rsp+0x64],edx
    65032579:	mov    DWORD PTR [rsp+0x68],r9d
    6503257e:	test   bp,bp
    65032581:	mov    DWORD PTR [rsp+0x60],r8d
    65032586:	jg     0x65032551
    65032588:	jmp    0x65032606
    6503258a:	test   bp,bp
    6503258d:	jle    0x65032606
    6503258f:	movzx  eax,WORD PTR [rsp+0x60]
    65032594:	cmp    ax,0x8000
    65032598:	ja     0x650325ae
    6503259a:	and    r8d,0x1ffff
    650325a1:	cmp    r8d,0x18000
    650325a8:	jne    0x650326a9
    650325ae:	mov    eax,DWORD PTR [rsp+0x62]
    650325b2:	cmp    eax,0xffffffff
    650325b5:	jne    0x6503269e
    650325bb:	mov    eax,DWORD PTR [rsp+0x66]
    650325bf:	mov    DWORD PTR [rsp+0x62],ebx
    650325c3:	cmp    eax,0xffffffff
    650325c6:	jne    0x6503268c
    650325cc:	movzx  eax,WORD PTR [rsp+0x6a]
    650325d1:	mov    DWORD PTR [rsp+0x66],ebx
    650325d5:	cmp    ax,0xffff
    650325d9:	jne    0x65032678
    650325df:	mov    edx,DWORD PTR [rsp+0x64]
    650325e3:	mov    WORD PTR [rsp+0x6a],0x8000
    650325ea:	mov    r9d,DWORD PTR [rsp+0x68]
    650325ef:	add    bp,0x1
    650325f3:	jmp    0x650326a9
    650325f8:	mov    r9d,DWORD PTR [rsp+0x68]
    650325fd:	mov    edx,DWORD PTR [rsp+0x64]
    65032601:	mov    r8d,DWORD PTR [rsp+0x60]
    65032606:	add    bp,0xffff
    6503260b:	jns    0x6503258f
    6503260d:	movzx  eax,bp
    65032610:	mov    esi,ebx
    65032612:	neg    ax
    65032615:	movzx  r10d,ax
    65032619:	add    bp,r10w
    6503261d:	data16 xchg ax,ax
    65032620:	test   BYTE PTR [rsp+0x60],0x1
    65032625:	je     0x6503262a
    65032627:	add    esi,0x1
    6503262a:	mov    ecx,edx
    6503262c:	mov    eax,r9d
    6503262f:	shr    r8d,1
    65032632:	shl    ecx,0x1f
    65032635:	shr    edx,1
    65032637:	shl    eax,0x1f
    6503263a:	or     r8d,ecx
    6503263d:	shr    r9d,1
    65032640:	or     edx,eax
    65032642:	sub    r10,0x1
    65032646:	mov    DWORD PTR [rsp+0x60],r8d
    6503264b:	jne    0x65032620
    6503264d:	test   esi,esi
    6503264f:	mov    DWORD PTR [rsp+0x64],edx
    65032653:	mov    DWORD PTR [rsp+0x68],r9d
    65032658:	lea    esi,[r10+0x1]
    6503265c:	je     0x6503258f
    65032662:	mov    ax,r8w
    65032666:	or     ax,si
    65032669:	mov    WORD PTR [rsp+0x60],ax
    6503266e:	mov    r8d,DWORD PTR [rsp+0x60]
    65032673:	jmp    0x65032594
    65032678:	mov    edx,DWORD PTR [rsp+0x64]
    6503267c:	add    ax,0x1
    65032680:	mov    WORD PTR [rsp+0x6a],ax
    65032685:	mov    r9d,DWORD PTR [rsp+0x68]
    6503268a:	jmp    0x650326a9
    6503268c:	add    eax,0x1
    6503268f:	mov    DWORD PTR [rsp+0x66],eax
    65032693:	mov    r9d,DWORD PTR [rsp+0x68]
    65032698:	mov    edx,DWORD PTR [rsp+0x64]
    6503269c:	jmp    0x650326a9
    6503269e:	add    eax,0x1
    650326a1:	mov    DWORD PTR [rsp+0x62],eax
    650326a5:	mov    edx,DWORD PTR [rsp+0x64]
    650326a9:	cmp    bp,0x7fff
    650326ae:	jb     0x650326ea
    650326b0:	cmp    WORD PTR [rsp+0x32],bx
    650326b5:	mov    r10d,DWORD PTR [rsp+0x40]
    650326ba:	mov    rdx,QWORD PTR [rsp+0x38]
    650326bf:	mov    edi,0x7fff8000
    650326c4:	mov    r12d,0xffff8000
    650326ca:	mov    r9d,ebx
    650326cd:	mov    eax,edi
    650326cf:	mov    DWORD PTR [rsp+0x74],ebx
    650326d3:	mov    r8d,ebx
    650326d6:	cmovne eax,r12d
    650326da:	mov    DWORD PTR [rsp+0x70],ebx
    650326de:	mov    r11d,0x5
    650326e4:	mov    DWORD PTR [rsp+0x78],eax
    650326e8:	jmp    0x6503274e
    650326ea:	movzx  eax,WORD PTR [rsp+0x62]
    650326ef:	or     bp,WORD PTR [rsp+0x32]
    650326f4:	mov    r10d,DWORD PTR [rsp+0x40]
    650326f9:	mov    DWORD PTR [rsp+0x72],edx
    650326fd:	mov    rdx,QWORD PTR [rsp+0x38]
    65032702:	mov    WORD PTR [rsp+0x70],ax
    65032707:	mov    r8d,DWORD PTR [rsp+0x70]
    6503270c:	mov    DWORD PTR [rsp+0x76],r9d
    65032711:	mov    r9d,DWORD PTR [rsp+0x74]
    65032716:	mov    WORD PTR [rsp+0x7a],bp
    6503271b:	mov    edi,0x7fff8000
    65032720:	mov    r11d,0x5
    65032726:	mov    r12d,0xffff8000
    6503272c:	jmp    0x6503274e
    6503272e:	test   dx,dx
    65032731:	mov    rdx,QWORD PTR [rsp+0x38]
    65032736:	mov    eax,edi
    65032738:	cmovne eax,r12d
    6503273c:	mov    r9d,ebx
    6503273f:	mov    DWORD PTR [rsp+0x74],ebx
    65032743:	mov    r8d,ebx
    65032746:	mov    DWORD PTR [rsp+0x70],ebx
    6503274a:	mov    DWORD PTR [rsp+0x78],eax
    6503274e:	test   r10d,r10d
    65032751:	jne    0x65032350
    65032757:	mov    ecx,DWORD PTR [rsp+0x34]
    6503275b:	jmp    0x65032767
    6503275d:	mov    r9d,DWORD PTR [rsp+0x74]
    65032762:	mov    r8d,DWORD PTR [rsp+0x70]
    65032767:	mov    eax,DWORD PTR [rsp+0x78]
    6503276b:	shr    eax,0x10
    6503276e:	cmp    ax,0x3fff
    65032772:	jb     0x65032ad7
    65032778:	add    cx,0x1
    6503277c:	mov    r14d,ebx
    6503277f:	mov    DWORD PTR [rsp+0x60],ebx
    65032783:	mov    DWORD PTR [rsp+0x34],ecx
    65032787:	movzx  ecx,WORD PTR [rsp+0x8a]
    6503278f:	mov    DWORD PTR [rsp+0x64],ebx
    65032793:	movzx  r15d,cx
    65032797:	and    cx,0x7fff
    6503279c:	mov    DWORD PTR [rsp+0x68],ebx
    650327a0:	xor    r15w,ax
    650327a4:	and    ax,0x7fff
    650327a8:	and    r15w,0x8000
    650327ae:	cmp    ax,0x7fff
    650327b2:	lea    ebp,[rax+rcx*1]
    650327b5:	jae    0x65032ac5
    650327bb:	cmp    cx,0x7fff
    650327c0:	jae    0x65032ac5
    650327c6:	cmp    bp,0xbffd
    650327cb:	ja     0x65032ac5
    650327d1:	cmp    bp,0x3fbf
    650327d6:	ja     0x650327e7
    650327d8:	mov    DWORD PTR [rsp+0x78],ebx
    650327dc:	mov    r9d,ebx
    650327df:	mov    r8d,ebx
    650327e2:	jmp    0x65032ad7
    650327e7:	test   ax,ax
    650327ea:	jne    0x65032810
    650327ec:	mov    eax,DWORD PTR [rsp+0x78]
    650327f0:	add    bp,0x1
    650327f4:	btr    eax,0x1f
    650327f8:	test   eax,eax
    650327fa:	jne    0x65032810
    650327fc:	test   r9d,r9d
    650327ff:	jne    0x65032810
    65032801:	test   r8d,r8d
    65032804:	jne    0x65032810
    65032806:	mov    WORD PTR [rsp+0x7a],bx
    6503280b:	jmp    0x65032ad7
    65032810:	test   cx,cx
    65032813:	jne    0x65032849
    65032815:	mov    eax,DWORD PTR [rsp+0x88]
    6503281c:	add    bp,0x1
    65032820:	btr    eax,0x1f
    65032824:	test   eax,eax
    65032826:	jne    0x65032849
    65032828:	cmp    DWORD PTR [rsp+0x84],ebx
    6503282f:	jne    0x65032849
    65032831:	cmp    DWORD PTR [rsp+0x80],ebx
    65032838:	jne    0x65032849
    6503283a:	mov    DWORD PTR [rsp+0x78],ebx
    6503283e:	mov    r9d,ebx
    65032841:	mov    r8d,ebx
    65032844:	jmp    0x65032ad7
    65032849:	mov    r13d,ebx
    6503284c:	lea    rdx,[rsp+0x64]
    65032851:	test   r11d,r11d
    65032854:	lea    eax,[r13+r13*1+0x0]
    65032859:	mov    edi,r11d
    6503285c:	movsxd rcx,eax
    6503285f:	jle    0x650328e5
    65032865:	mov    r12d,r13d
    65032868:	lea    r10,[rsp+0x88]
    65032870:	lea    r11,[rsp+rcx*1+0x70]
    65032875:	and    r12d,0x1
    65032879:	data16 xchg ax,ax
    6503287c:	data16 data16 xchg ax,ax
    65032880:	movzx  ecx,WORD PTR [r10]
    65032884:	movzx  eax,WORD PTR [r11]
    65032888:	imul   ecx,eax
    6503288b:	test   r12d,r12d
    6503288e:	je     0x650328ad
    65032890:	mov    eax,DWORD PTR [rdx-0x4]
    65032893:	mov    r8d,ebx
    65032896:	lea    r9d,[rax+rcx*1]
    6503289a:	cmp    r9d,eax
    6503289d:	jb     0x650328a4
    6503289f:	cmp    r9d,ecx
    650328a2:	jae    0x650328a7
    650328a4:	mov    r8d,esi
    650328a7:	mov    DWORD PTR [rdx-0x4],r9d
    650328ab:	jmp    0x650328c8
    650328ad:	mov    eax,DWORD PTR [rdx-0x4]
    650328b0:	mov    r8d,ebx
    650328b3:	lea    r9d,[rax+rcx*1]
    650328b7:	cmp    r9d,eax
    650328ba:	jb     0x650328c1
    650328bc:	cmp    r9d,ecx
    650328bf:	jae    0x650328c4
    650328c1:	mov    r8d,esi
    650328c4:	mov    DWORD PTR [rdx-0x4],r9d
    650328c8:	test   r8d,r8d
    650328cb:	je     0x650328d1
    650328cd:	add    WORD PTR [rdx],0x1
    650328d1:	sub    edi,0x1
    650328d4:	add    r11,0x2
    650328d8:	sub    r10,0x2
    650328dc:	test   edi,edi
    650328de:	jg     0x65032880
    650328e0:	mov    r11d,DWORD PTR [rsp+0x48]
    650328e5:	sub    r11d,0x1
    650328e9:	add    rdx,0x2
    650328ed:	add    r13d,0x1
    650328f1:	test   r11d,r11d
    650328f4:	mov    DWORD PTR [rsp+0x48],r11d
    650328f9:	jg     0x65032851
    650328ff:	add    bp,0xc002
    65032904:	test   bp,bp
    65032907:	jle    0x650329ce
    6503290d:	mov    r9d,DWORD PTR [rsp+0x68]
    65032912:	mov    edx,DWORD PTR [rsp+0x64]
    65032916:	mov    r8d,DWORD PTR [rsp+0x60]
    6503291b:	xchg   ax,ax
    6503291d:	data16 xchg ax,ax
    65032920:	bt     r9d,0x1f
    65032925:	jb     0x6503295c
    65032927:	mov    ecx,edx
    65032929:	mov    eax,r8d
    6503292c:	add    r9d,r9d
    6503292f:	add    edx,edx
    65032931:	shr    eax,0x1f
    65032934:	shr    ecx,0x1f
    65032937:	add    r8d,r8d
    6503293a:	or     edx,eax
    6503293c:	or     r9d,ecx
    6503293f:	add    bp,0xffff
    65032944:	mov    DWORD PTR [rsp+0x64],edx
    65032948:	mov    DWORD PTR [rsp+0x68],r9d
    6503294d:	test   bp,bp
    65032950:	mov    DWORD PTR [rsp+0x60],r8d
    65032955:	jg     0x65032920
    65032957:	jmp    0x650329dc
    6503295c:	test   bp,bp
    6503295f:	jle    0x650329dc
    65032965:	movzx  eax,WORD PTR [rsp+0x60]
    6503296a:	cmp    ax,0x8000
    6503296e:	ja     0x65032984
    65032970:	and    r8d,0x1ffff
    65032977:	cmp    r8d,0x18000
    6503297e:	jne    0x65032a79
    65032984:	mov    eax,DWORD PTR [rsp+0x62]
    65032988:	cmp    eax,0xffffffff
    6503298b:	jne    0x65032a6e
    65032991:	mov    eax,DWORD PTR [rsp+0x66]
    65032995:	mov    DWORD PTR [rsp+0x62],ebx
    65032999:	cmp    eax,0xffffffff
    6503299c:	jne    0x65032a5c
    650329a2:	movzx  eax,WORD PTR [rsp+0x6a]
    650329a7:	mov    DWORD PTR [rsp+0x66],ebx
    650329ab:	cmp    ax,0xffff
    650329af:	jne    0x65032a48
    650329b5:	mov    edx,DWORD PTR [rsp+0x64]
    650329b9:	mov    WORD PTR [rsp+0x6a],0x8000
    650329c0:	mov    r9d,DWORD PTR [rsp+0x68]
    650329c5:	add    bp,0x1
    650329c9:	jmp    0x65032a79
    650329ce:	mov    r9d,DWORD PTR [rsp+0x68]
    650329d3:	mov    edx,DWORD PTR [rsp+0x64]
    650329d7:	mov    r8d,DWORD PTR [rsp+0x60]
    650329dc:	add    bp,0xffff
    650329e1:	jns    0x65032965
    650329e3:	movzx  eax,bp
    650329e6:	neg    ax
    650329e9:	movzx  r10d,ax
    650329ed:	add    bp,r10w
    650329f1:	test   BYTE PTR [rsp+0x60],0x1
    650329f6:	je     0x650329fc
    650329f8:	add    r14d,0x1
    650329fc:	mov    ecx,edx
    650329fe:	mov    eax,r9d
    65032a01:	shr    r8d,1
    65032a04:	shl    ecx,0x1f
    65032a07:	shr    edx,1
    65032a09:	shl    eax,0x1f
    65032a0c:	or     r8d,ecx
    65032a0f:	shr    r9d,1
    65032a12:	or     edx,eax
    65032a14:	sub    r10,0x1
    65032a18:	mov    DWORD PTR [rsp+0x60],r8d
    65032a1d:	jne    0x650329f1
    65032a1f:	test   r14d,r14d
    65032a22:	mov    DWORD PTR [rsp+0x64],edx
    65032a26:	mov    DWORD PTR [rsp+0x68],r9d
    65032a2b:	je     0x65032965
    65032a31:	mov    ax,r8w
    65032a35:	or     ax,0x1
    65032a39:	mov    WORD PTR [rsp+0x60],ax
    65032a3e:	mov    r8d,DWORD PTR [rsp+0x60]
    65032a43:	jmp    0x6503296a
    65032a48:	mov    edx,DWORD PTR [rsp+0x64]
    65032a4c:	add    ax,0x1
    65032a50:	mov    WORD PTR [rsp+0x6a],ax
    65032a55:	mov    r9d,DWORD PTR [rsp+0x68]
    65032a5a:	jmp    0x65032a79
    65032a5c:	add    eax,0x1
    65032a5f:	mov    DWORD PTR [rsp+0x66],eax
    65032a63:	mov    r9d,DWORD PTR [rsp+0x68]
    65032a68:	mov    edx,DWORD PTR [rsp+0x64]
    65032a6c:	jmp    0x65032a79
    65032a6e:	add    eax,0x1
    65032a71:	mov    DWORD PTR [rsp+0x62],eax
    65032a75:	mov    edx,DWORD PTR [rsp+0x64]
    65032a79:	cmp    bp,0x7fff
    65032a7e:	jb     0x65032a9d
    65032a80:	test   r15w,r15w
    65032a84:	mov    eax,0x7fff8000
    65032a89:	mov    ecx,0xffff8000
    65032a8e:	cmovne eax,ecx
    65032a91:	mov    r9d,ebx
    65032a94:	mov    r8d,ebx
    65032a97:	mov    DWORD PTR [rsp+0x78],eax
    65032a9b:	jmp    0x65032ad7
    65032a9d:	movzx  eax,WORD PTR [rsp+0x62]
    65032aa2:	mov    DWORD PTR [rsp+0x72],edx
    65032aa6:	or     bp,r15w
    65032aaa:	mov    DWORD PTR [rsp+0x76],r9d
    65032aaf:	mov    r9d,DWORD PTR [rsp+0x74]
    65032ab4:	mov    WORD PTR [rsp+0x70],ax
    65032ab9:	mov    r8d,DWORD PTR [rsp+0x70]
    65032abe:	mov    WORD PTR [rsp+0x7a],bp
    65032ac3:	jmp    0x65032ad7
    65032ac5:	test   r15w,r15w
    65032ac9:	mov    r9d,ebx
    65032acc:	mov    r8d,ebx
    65032acf:	cmovne edi,r12d
    65032ad3:	mov    DWORD PTR [rsp+0x78],edi
    65032ad7:	test   BYTE PTR [rsp+0x50],0x1
    65032adc:	mov    r13,QWORD PTR [rsp+0x58]
    65032ae1:	mov    eax,DWORD PTR [rsp+0x34]
    65032ae5:	mov    r15,QWORD PTR [rsp+0xb0]
    65032aed:	mov    r14,QWORD PTR [rsp+0xb8]
    65032af5:	mov    WORD PTR [r13+0x0],ax
    65032afa:	je     0x65032b37
    65032afc:	mov    edi,DWORD PTR [rsp+0x44]
    65032b00:	cwde   
    65032b01:	add    edi,eax
    65032b03:	test   edi,edi
    65032b05:	jg     0x65032b3b
    65032b07:	cmp    WORD PTR [rsp+0x30],0x8000
    65032b0e:	mov    eax,0x20
    65032b13:	mov    ecx,0x2d
    65032b18:	cmove  eax,ecx
    65032b1b:	mov    WORD PTR [r13+0x0],bx
    65032b20:	mov    BYTE PTR [r13+0x3],0x1
    65032b25:	mov    BYTE PTR [r13+0x4],0x30
    65032b2a:	mov    BYTE PTR [r13+0x5],bl
    65032b2e:	mov    BYTE PTR [r13+0x2],al
    65032b32:	jmp    0x65032ddc
    65032b37:	mov    edi,DWORD PTR [rsp+0x44]
    65032b3b:	mov    r10d,DWORD PTR [rsp+0x78]
    65032b40:	mov    ecx,r9d
    65032b43:	mov    eax,0x15
    65032b48:	cmp    edi,eax
    65032b4a:	mov    WORD PTR [rsp+0x7a],bx
    65032b4f:	cmovg  edi,eax
    65032b52:	add    r9d,r9d
    65032b55:	shr    ecx,0x1f
    65032b58:	mov    eax,r8d
    65032b5b:	add    r8d,r8d
    65032b5e:	shr    r10d,0x10
    65032b62:	shr    eax,0x1f
    65032b65:	or     r9d,eax
    65032b68:	mov    eax,DWORD PTR [rsp+0x78]
    65032b6c:	lea    edx,[rax+rax*1]
    65032b6f:	mov    eax,r8d
    65032b72:	add    r8d,r8d
    65032b75:	or     edx,ecx
    65032b77:	mov    ecx,r9d
    65032b7a:	add    r9d,r9d
    65032b7d:	shr    eax,0x1f
    65032b80:	shr    ecx,0x1f
    65032b83:	add    edx,edx
    65032b85:	or     r9d,eax
    65032b88:	or     edx,ecx
    65032b8a:	mov    eax,r8d
    65032b8d:	mov    ecx,r9d
    65032b90:	shr    eax,0x1f
    65032b93:	add    r9d,r9d
    65032b96:	or     r9d,eax
    65032b99:	shr    ecx,0x1f
    65032b9c:	add    edx,edx
    65032b9e:	or     edx,ecx
    65032ba0:	mov    ecx,r9d
    65032ba3:	add    r9d,r9d
    65032ba6:	shr    ecx,0x1f
    65032ba9:	add    edx,edx
    65032bab:	add    r8d,r8d
    65032bae:	or     edx,ecx
    65032bb0:	mov    eax,r8d
    65032bb3:	add    r8d,r8d
    65032bb6:	shr    eax,0x1f
    65032bb9:	add    edx,edx
    65032bbb:	or     r9d,eax
    65032bbe:	mov    eax,r8d
    65032bc1:	add    r8d,r8d
    65032bc4:	mov    ecx,r9d
    65032bc7:	shr    eax,0x1f
    65032bca:	add    r9d,r9d
    65032bcd:	or     r9d,eax
    65032bd0:	shr    ecx,0x1f
    65032bd3:	mov    eax,r8d
    65032bd6:	or     edx,ecx
    65032bd8:	mov    ecx,r9d
    65032bdb:	shr    eax,0x1f
    65032bde:	add    r9d,r9d
    65032be1:	shr    ecx,0x1f
    65032be4:	add    r8d,r8d
    65032be7:	or     r9d,eax
    65032bea:	add    edx,edx
    65032bec:	mov    eax,r8d
    65032bef:	or     edx,ecx
    65032bf1:	mov    ecx,r9d
    65032bf4:	shr    eax,0x1f
    65032bf7:	add    r9d,r9d
    65032bfa:	shr    ecx,0x1f
    65032bfd:	add    r8d,r8d
    65032c00:	or     r9d,eax
    65032c03:	add    edx,edx
    65032c05:	mov    eax,r8d
    65032c08:	or     edx,ecx
    65032c0a:	mov    ecx,r9d
    65032c0d:	shr    eax,0x1f
    65032c10:	add    r9d,r9d
    65032c13:	add    r8d,r8d
    65032c16:	lea    r11d,[rdx+rdx*1]
    65032c1a:	or     r9d,eax
    65032c1d:	shr    ecx,0x1f
    65032c20:	mov    DWORD PTR [rsp+0x70],r8d
    65032c25:	or     r11d,ecx
    65032c28:	mov    DWORD PTR [rsp+0x74],r9d
    65032c2d:	sub    r10d,0x3ffe
    65032c34:	mov    DWORD PTR [rsp+0x78],r11d
    65032c39:	jns    0x65032c81
    65032c3b:	neg    r10d
    65032c3e:	movzx  edx,r10b
    65032c42:	test   edx,edx
    65032c44:	jle    0x65032c81
    65032c46:	data16 data16 xchg ax,ax
    65032c4a:	data16 xchg ax,ax
    65032c4d:	data16 xchg ax,ax
    65032c50:	mov    ecx,r9d
    65032c53:	mov    eax,r11d
    65032c56:	shr    r8d,1
    65032c59:	shr    r9d,1
    65032c5c:	shl    eax,0x1f
    65032c5f:	shl    ecx,0x1f
    65032c62:	sub    edx,0x1
    65032c65:	shr    r11d,1
    65032c68:	or     r9d,eax
    65032c6b:	or     r8d,ecx
    65032c6e:	test   edx,edx
    65032c70:	jg     0x65032c50
    65032c72:	mov    DWORD PTR [rsp+0x74],r9d
    65032c77:	mov    DWORD PTR [rsp+0x70],r8d
    65032c7c:	mov    DWORD PTR [rsp+0x78],r11d
    65032c81:	lea    r12d,[rdi+0x1]
    65032c85:	lea    rbp,[r13+0x4]
    65032c89:	test   r12d,r12d
    65032c8c:	mov    r10,rbp
    65032c8f:	jle    0x65032d8c
    65032c95:	data16 data16 xchg ax,ax
    65032c99:	data16 xchg ax,ax
    65032c9c:	data16 data16 xchg ax,ax
    65032ca0:	lea    rcx,[rsp+0x70]
    65032ca5:	lea    rdx,[rsp+0x90]
    65032cad:	mov    rax,QWORD PTR [rcx]
    65032cb0:	mov    QWORD PTR [rdx],rax
    65032cb3:	mov    eax,DWORD PTR [rcx+0x8]
    65032cb6:	mov    ecx,r9d
    65032cb9:	mov    DWORD PTR [rdx+0x8],eax
    65032cbc:	mov    eax,r8d
    65032cbf:	lea    edx,[r8+r8*1]
    65032cc3:	shr    eax,0x1f
    65032cc6:	shr    ecx,0x1f
    65032cc9:	lea    r8d,[r9+r9*1]
    65032ccd:	or     r8d,eax
    65032cd0:	lea    r9d,[r11+r11*1]
    65032cd4:	mov    eax,edx
    65032cd6:	or     r9d,ecx
    65032cd9:	mov    ecx,r8d
    65032cdc:	shr    eax,0x1f
    65032cdf:	add    r8d,r8d
    65032ce2:	add    edx,edx
    65032ce4:	shr    ecx,0x1f
    65032ce7:	or     r8d,eax
    65032cea:	mov    rax,QWORD PTR [rsp+0x90]
    65032cf2:	lea    r11d,[r9+r9*1]
    65032cf6:	lea    edi,[rax+rdx*1]
    65032cf9:	or     r11d,ecx
    65032cfc:	cmp    edi,edx
    65032cfe:	jb     0x65032d04
    65032d00:	cmp    edi,eax
    65032d02:	jae    0x65032d21
    65032d04:	lea    ecx,[r8+0x1]
    65032d08:	mov    edx,ebx
    65032d0a:	cmp    ecx,r8d
    65032d0d:	jb     0x65032d14
    65032d0f:	cmp    ecx,0x1
    65032d12:	jae    0x65032d16
    65032d14:	mov    edx,esi
    65032d16:	test   edx,edx
    65032d18:	mov    r8d,ecx
    65032d1b:	je     0x65032d21
    65032d1d:	add    r11d,0x1
    65032d21:	shr    rax,0x20
    65032d25:	lea    r9d,[r8+rax*1]
    65032d29:	cmp    r9d,r8d
    65032d2c:	jb     0x65032d33
    65032d2e:	cmp    r9d,eax
    65032d31:	jae    0x65032d37
    65032d33:	add    r11d,0x1
    65032d37:	add    r11d,DWORD PTR [rsp+0x98]
    65032d3f:	mov    ecx,r9d
    65032d42:	add    r9d,r9d
    65032d45:	shr    ecx,0x1f
    65032d48:	mov    eax,edi
    65032d4a:	lea    r8d,[rdi+rdi*1]
    65032d4e:	shr    eax,0x1f
    65032d51:	sub    r12d,0x1
    65032d55:	add    r10,0x1
    65032d59:	or     r9d,eax
    65032d5c:	lea    eax,[r11+r11*1]
    65032d60:	mov    DWORD PTR [rsp+0x70],r8d
    65032d65:	or     eax,ecx
    65032d67:	mov    DWORD PTR [rsp+0x74],r9d
    65032d6c:	mov    DWORD PTR [rsp+0x78],eax
    65032d70:	shr    eax,0x18
    65032d73:	mov    BYTE PTR [rsp+0x7b],bl
    65032d77:	add    al,0x30
    65032d79:	test   r12d,r12d
    65032d7c:	mov    BYTE PTR [r10-0x1],al
    65032d80:	jle    0x65032d8c
    65032d82:	mov    r11d,DWORD PTR [rsp+0x78]
    65032d87:	jmp    0x65032ca0
    65032d8c:	movzx  eax,BYTE PTR [r10-0x1]
    65032d91:	sub    r10,0x2
    65032d95:	cmp    al,0x35
    65032d97:	jl     0x65032e18
    65032d9d:	cmp    r10,rbp
    65032da0:	jb     0x65032db5
    65032da2:	cmp    BYTE PTR [r10],0x39
    65032da6:	jne    0x65032db5
    65032da8:	mov    BYTE PTR [r10],0x30
    65032dac:	sub    r10,0x1
    65032db0:	cmp    r10,rbp
    65032db3:	jae    0x65032da2
    65032db5:	cmp    r10,rbp
    65032db8:	jae    0x65032dc4
    65032dba:	add    r10,0x1
    65032dbe:	add    WORD PTR [r13+0x0],0x1
    65032dc4:	add    BYTE PTR [r10],0x1
    65032dc8:	sub    r10b,r13b
    65032dcb:	sub    r10b,0x3
    65032dcf:	movsx  rcx,r10b
    65032dd3:	mov    BYTE PTR [r13+0x3],r10b
    65032dd7:	mov    BYTE PTR [rcx+r13*1+0x4],bl
    65032ddc:	mov    r13,QWORD PTR [rsp+0xc0]
    65032de4:	mov    r12,QWORD PTR [rsp+0xc8]
    65032dec:	mov    rbp,QWORD PTR [rsp+0xd0]
    65032df4:	mov    rbx,QWORD PTR [rsp+0xf8]
    65032dfc:	mov    eax,esi
    65032dfe:	mov    rcx,QWORD PTR [rsp+0xa0]
    65032e06:	xor    rcx,rsp
    65032e09:	call   0x6501e4e0
    65032e0e:	add    rsp,0xd8
    65032e15:	pop    rdi
    65032e16:	pop    rsi
    65032e17:	ret    
    65032e18:	cmp    r10,rbp
    65032e1b:	jb     0x65032e2f
    65032e1d:	data16 xchg ax,ax
    65032e20:	cmp    BYTE PTR [r10],0x30
    65032e24:	jne    0x65032e2f
    65032e26:	sub    r10,0x1
    65032e2a:	cmp    r10,rbp
    65032e2d:	jae    0x65032e20
    65032e2f:	cmp    r10,rbp
    65032e32:	jae    0x65032dc8
    65032e34:	cmp    WORD PTR [rsp+0x30],0x8000
    65032e3b:	mov    eax,0x20
    65032e40:	mov    ecx,0x2d
    65032e45:	cmove  eax,ecx
    65032e48:	mov    WORD PTR [r13+0x0],bx
    65032e4d:	mov    BYTE PTR [r13+0x3],0x1
    65032e52:	mov    BYTE PTR [rbp+0x0],0x30
    65032e56:	mov    BYTE PTR [r13+0x5],bl
    65032e5a:	mov    BYTE PTR [r13+0x2],al
    65032e5e:	jmp    0x65032ddc
    65032e63:	int3   
    65032e64:	int3   
    65032e65:	int3   
    65032e66:	int3   
    65032e67:	int3   
    65032e68:	int3   
    65032e69:	int3   
    65032e6a:	int3   
    65032e6b:	int3   
    65032e6c:	int3   
    65032e6d:	int3   
    65032e6e:	int3   
    65032e6f:	int3   
    65032e70:	mov    QWORD PTR [rsp+0x8],rbx
    65032e75:	mov    QWORD PTR [rsp+0x10],rbp
    65032e7a:	mov    QWORD PTR [rsp+0x20],rsi
    65032e7f:	push   rdi
    65032e80:	sub    rsp,0x20
    65032e84:	mov    rax,QWORD PTR [rip+0xf295]        # 0x65042120
    65032e8b:	xor    rax,rsp
    65032e8e:	mov    QWORD PTR [rsp+0x10],rax
    65032e93:	test   edx,edx
    65032e95:	mov    rbx,r8
    65032e98:	mov    esi,edx
    65032e9a:	mov    rbp,rcx
    65032e9d:	mov    di,0x404e
    65032ea1:	mov    DWORD PTR [r8],0x0
    65032ea8:	mov    DWORD PTR [r8+0x4],0x0
    65032eb0:	mov    DWORD PTR [r8+0x8],0x0
    65032eb8:	je     0x6503300a
    65032ebe:	xchg   ax,ax
    65032ec0:	mov    rax,QWORD PTR [rbx]
    65032ec3:	mov    r11d,DWORD PTR [rbx+0x8]
    65032ec7:	lea    rcx,[rsp]
    65032ecb:	mov    QWORD PTR [rcx],rax
    65032ece:	mov    eax,DWORD PTR [rbx+0x8]
    65032ed1:	add    r11d,r11d
    65032ed4:	mov    DWORD PTR [rcx+0x8],eax
    65032ed7:	mov    ecx,DWORD PTR [rbx]
    65032ed9:	mov    eax,DWORD PTR [rbx+0x4]
    65032edc:	lea    r9d,[rcx+rcx*1]
    65032ee0:	mov    edx,ecx
    65032ee2:	lea    r10d,[rax+rax*1]
    65032ee6:	mov    r8d,eax
    65032ee9:	shr    edx,0x1f
    65032eec:	mov    eax,r9d
    65032eef:	or     r10d,edx
    65032ef2:	shr    r8d,0x1f
    65032ef6:	lea    edx,[r9+r9*1]
    65032efa:	or     r11d,r8d
    65032efd:	mov    ecx,r10d
    65032f00:	shr    eax,0x1f
    65032f03:	shr    ecx,0x1f
    65032f06:	add    r11d,r11d
    65032f09:	add    r10d,r10d
    65032f0c:	or     r11d,ecx
    65032f0f:	mov    ecx,DWORD PTR [rsp]
    65032f12:	or     r10d,eax
    65032f15:	lea    r8d,[rdx+rcx*1]
    65032f19:	xor    eax,eax
    65032f1b:	mov    DWORD PTR [rbx],edx
    65032f1d:	cmp    r8d,edx
    65032f20:	mov    DWORD PTR [rbx+0x4],r10d
    65032f24:	mov    DWORD PTR [rbx+0x8],r11d
    65032f28:	jb     0x65032f2f
    65032f2a:	cmp    r8d,ecx
    65032f2d:	jae    0x65032f34
    65032f2f:	mov    eax,0x1
    65032f34:	test   eax,eax
    65032f36:	mov    DWORD PTR [rbx],r8d
    65032f39:	je     0x65032f5e
    65032f3b:	lea    eax,[r10+0x1]
    65032f3f:	xor    ecx,ecx
    65032f41:	cmp    eax,r10d
    65032f44:	jb     0x65032f4b
    65032f46:	cmp    eax,0x1
    65032f49:	jae    0x65032f50
    65032f4b:	mov    ecx,0x1
    65032f50:	test   ecx,ecx
    65032f52:	mov    DWORD PTR [rbx+0x4],eax
    65032f55:	je     0x65032f5e
    65032f57:	lea    eax,[r11+0x1]
    65032f5b:	mov    DWORD PTR [rbx+0x8],eax
    65032f5e:	mov    eax,DWORD PTR [rbx+0x4]
    65032f61:	mov    rcx,QWORD PTR [rsp]
    65032f65:	xor    edx,edx
    65032f67:	shr    rcx,0x20
    65032f6b:	lea    r9d,[rax+rcx*1]
    65032f6f:	cmp    r9d,eax
    65032f72:	jb     0x65032f79
    65032f74:	cmp    r9d,ecx
    65032f77:	jae    0x65032f7e
    65032f79:	mov    edx,0x1
    65032f7e:	test   edx,edx
    65032f80:	mov    DWORD PTR [rbx+0x4],r9d
    65032f84:	je     0x65032f8a
    65032f86:	add    DWORD PTR [rbx+0x8],0x1
    65032f8a:	mov    eax,DWORD PTR [rsp+0x8]
    65032f8e:	mov    ecx,r9d
    65032f91:	add    r9d,r9d
    65032f94:	add    DWORD PTR [rbx+0x8],eax
    65032f97:	mov    edx,DWORD PTR [rbx+0x8]
    65032f9a:	shr    ecx,0x1f
    65032f9d:	mov    eax,r8d
    65032fa0:	add    r8d,r8d
    65032fa3:	add    edx,edx
    65032fa5:	shr    eax,0x1f
    65032fa8:	or     edx,ecx
    65032faa:	mov    DWORD PTR [rbx],r8d
    65032fad:	or     r9d,eax
    65032fb0:	mov    DWORD PTR [rbx+0x8],edx
    65032fb3:	xor    r10d,r10d
    65032fb6:	mov    DWORD PTR [rbx+0x4],r9d
    65032fba:	movsx  ecx,BYTE PTR [rbp+0x0]
    65032fbe:	lea    eax,[r8+rcx*1]
    65032fc2:	mov    DWORD PTR [rsp],ecx
    65032fc5:	cmp    eax,r8d
    65032fc8:	jb     0x65032fce
    65032fca:	cmp    eax,ecx
    65032fcc:	jae    0x65032fd4
    65032fce:	mov    r10d,0x1
    65032fd4:	test   r10d,r10d
    65032fd7:	mov    DWORD PTR [rbx],eax
    65032fd9:	je     0x65032ffd
    65032fdb:	lea    eax,[r9+0x1]
    65032fdf:	xor    ecx,ecx
    65032fe1:	cmp    eax,r9d
    65032fe4:	jb     0x65032feb
    65032fe6:	cmp    eax,0x1
    65032fe9:	jae    0x65032ff0
    65032feb:	mov    ecx,0x1
    65032ff0:	test   ecx,ecx
    65032ff2:	mov    DWORD PTR [rbx+0x4],eax
    65032ff5:	je     0x65032ffd
    65032ff7:	lea    eax,[rdx+0x1]
    65032ffa:	mov    DWORD PTR [rbx+0x8],eax
    65032ffd:	add    rbp,0x1
    65033001:	add    esi,0xffffffff
    65033004:	jne    0x65032ec0
    6503300a:	cmp    DWORD PTR [rbx+0x8],0x0
    6503300e:	jne    0x6503303c
    65033010:	mov    ecx,DWORD PTR [rbx]
    65033012:	mov    edx,DWORD PTR [rbx+0x4]
    65033015:	add    di,0xfff0
    6503301a:	mov    r8d,edx
    6503301d:	mov    eax,ecx
    6503301f:	shl    edx,0x10
    65033022:	shr    eax,0x10
    65033025:	shr    r8d,0x10
    65033029:	shl    ecx,0x10
    6503302c:	or     edx,eax
    6503302e:	test   r8d,r8d
    65033031:	mov    DWORD PTR [rbx+0x8],r8d
    65033035:	mov    DWORD PTR [rbx+0x4],edx
    65033038:	mov    DWORD PTR [rbx],ecx
    6503303a:	je     0x65033010
    6503303c:	bt     DWORD PTR [rbx+0x8],0xf
    65033041:	jb     0x65033083
    65033043:	nop
    65033044:	data16 data16 xchg ax,ax
    65033048:	data16 data16 xchg ax,ax
    6503304c:	data16 data16 xchg ax,ax
    65033050:	mov    eax,DWORD PTR [rbx]
    65033052:	mov    ecx,DWORD PTR [rbx+0x4]
    65033055:	add    di,0xffff
    6503305a:	mov    edx,eax
    6503305c:	add    eax,eax
    6503305e:	mov    r8d,ecx
    65033061:	mov    DWORD PTR [rbx],eax
    65033063:	shr    edx,0x1f
    65033066:	shr    r8d,0x1f
    6503306a:	lea    eax,[rcx+rcx*1]
    6503306d:	or     eax,edx
    6503306f:	mov    DWORD PTR [rbx+0x4],eax
    65033072:	mov    eax,DWORD PTR [rbx+0x8]
    65033075:	add    eax,eax
    65033077:	or     eax,r8d
    6503307a:	bt     eax,0xf
    6503307e:	mov    DWORD PTR [rbx+0x8],eax
    65033081:	jae    0x65033050
    65033083:	mov    WORD PTR [rbx+0xa],di
    65033087:	mov    rcx,QWORD PTR [rsp+0x10]
    6503308c:	xor    rcx,rsp
    6503308f:	call   0x6501e4e0
    65033094:	mov    rbx,QWORD PTR [rsp+0x30]
    65033099:	mov    rbp,QWORD PTR [rsp+0x38]
    6503309e:	mov    rsi,QWORD PTR [rsp+0x48]
    650330a3:	add    rsp,0x20
    650330a7:	pop    rdi
    650330a8:	ret    
    650330a9:	int3   
    650330aa:	int3   
    650330ab:	int3   
    650330ac:	int3   
    650330ad:	int3   
    650330ae:	int3   
    650330af:	int3   
    650330b0:	int3   
    650330b1:	int3   
    650330b2:	int3   
    650330b3:	int3   
    650330b4:	int3   
    650330b5:	int3   
    650330b6:	data16 data16 xchg ax,ax
    650330ba:	data16 data16 xchg ax,ax
    650330be:	xchg   ax,ax
    650330c0:	sub    rsp,0x10
    650330c4:	mov    QWORD PTR [rsp],r10
    650330c8:	mov    QWORD PTR [rsp+0x8],r11
    650330cd:	xor    r11,r11
    650330d0:	lea    r10,[rsp+0x18]
    650330d5:	sub    r10,rax
    650330d8:	cmovb  r10,r11
    650330dc:	mov    r11,QWORD PTR gs:0x10
    650330e5:	cmp    r10,r11
    650330e8:	jae    0x65033100
    650330ea:	and    r10w,0xf000
    650330f0:	lea    r11,[r11-0x1000]
    650330f7:	mov    BYTE PTR [r11],0x0
    650330fb:	cmp    r10,r11
    650330fe:	jne    0x650330f0
    65033100:	mov    r10,QWORD PTR [rsp]
    65033104:	mov    r11,QWORD PTR [rsp+0x8]
    65033109:	add    rsp,0x10
    6503310d:	ret    
    6503310e:	int3   
    6503310f:	int3   
    65033110:	int3   
    65033111:	int3   
    65033112:	int3   
    65033113:	int3   
    65033114:	int3   
    65033115:	int3   
    65033116:	data16 data16 xchg ax,ax
    6503311a:	data16 data16 xchg ax,ax
    6503311e:	xchg   ax,ax
    65033120:	sub    rsp,0x18
    65033124:	mov    QWORD PTR [rsp+0x20],rcx
    65033129:	mov    QWORD PTR [rsp+0x28],rdx
    6503312e:	mov    DWORD PTR [rsp+0x30],r8d
    65033133:	mov    rdx,QWORD PTR [rdx]
    65033136:	mov    rax,rcx
    65033139:	call   0x65029420
    6503313e:	call   rax
    65033140:	call   0x65029450
    65033145:	mov    rcx,rax
    65033148:	mov    rdx,QWORD PTR [rsp+0x28]
    6503314d:	mov    rdx,QWORD PTR [rdx]
    65033150:	mov    r8d,0x2
    65033156:	call   0x65029420
    6503315b:	mov    QWORD PTR [rsp+0x10],rax
    65033160:	add    rsp,0x18
    65033164:	ret    
    65033165:	int3   
    65033166:	int3   
    65033167:	int3   
    65033168:	int3   
    65033169:	int3   
    6503316a:	int3   
    6503316b:	int3   
    6503316c:	int3   
    6503316d:	int3   
    6503316e:	int3   
    6503316f:	int3   
    65033170:	sub    rsp,0x28
    65033174:	lea    rcx,[rip+0x109d5]        # 0x65043b50
    6503317b:	call   0x6501ccfc
    65033180:	lea    rcx,[rip+0x29d]        # 0x65033424
    65033187:	add    rsp,0x28
    6503318b:	jmp    0x6501e680
    65033190:	sub    rsp,0x28
    65033194:	xor    edx,edx
    65033196:	lea    rcx,[rip+0x10a1b]        # 0x65043bb8
    6503319d:	lea    r8d,[rdx+0x28]
    650331a1:	call   0x6501ee30
    650331a6:	and    QWORD PTR [rip+0x10a3a],0x0        # 0x65043be8
    650331ae:	and    DWORD PTR [rip+0x10a3b],0x0        # 0x65043bf0
    650331b5:	and    DWORD PTR [rip+0x10a38],0x0        # 0x65043bf4
    650331bc:	and    QWORD PTR [rip+0x10a1c],0x0        # 0x65043be0
    650331c4:	lea    rcx,[rip+0x109ed]        # 0x65043bb8
    650331cb:	mov    DWORD PTR [rip+0x109db],0x48        # 0x65043bb0
    650331d5:	call   0x6501cb3c
    650331da:	test   eax,eax
    650331dc:	jns    0x650331ec
    650331de:	and    DWORD PTR [rip+0x109cb],0x0        # 0x65043bb0
    650331e5:	mov    BYTE PTR [rip+0x13bfc],0x1        # 0x65046de8
    650331ec:	lea    rcx,[rip+0x23d]        # 0x65033430
    650331f3:	add    rsp,0x28
    650331f7:	jmp    0x6501e680
    650331fc:	sub    rsp,0x28
    65033200:	call   QWORD PTR [rip+0xfe2]        # 0x650341e8
    65033206:	lea    rcx,[rip+0x1e9b]        # 0x650350a8
    6503320d:	mov    BYTE PTR [rip+0x109f4],0x0        # 0x65043c08
    65033214:	mov    QWORD PTR [rip+0x109dd],rcx        # 0x65043bf8
    6503321b:	lea    rcx,[rip+0x252]        # 0x65033474
    65033222:	mov    QWORD PTR [rip+0x109d7],rax        # 0x65043c00
    65033229:	add    rsp,0x28
    6503322d:	jmp    0x6501e680
    65033232:	int3   
    65033233:	int3   
    65033234:	lea    rcx,[rip+0x26d]        # 0x650334a8
    6503323b:	jmp    0x6501e680
    65033240:	lea    rcx,[rip+0x299]        # 0x650334e0
    65033247:	jmp    0x6501e680
    6503324c:	int3   
    6503324d:	int3   
    6503324e:	int3   
    6503324f:	int3   
    65033250:	mov    r11,rsp
    65033253:	sub    rsp,0x58
    65033257:	mov    rax,QWORD PTR [rip+0x13ca2]        # 0x65046f00
    6503325e:	lea    rcx,[rip+0x13c93]        # 0x65046ef8
    65033265:	lea    r9,[r11-0x28]
    65033269:	mov    QWORD PTR [r11-0x30],rax
    6503326d:	mov    rax,QWORD PTR [rax]
    65033270:	mov    QWORD PTR [r11-0x38],rcx
    65033274:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65033279:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6503327f:	mov    QWORD PTR [r11-0x38],rcx
    65033283:	mov    QWORD PTR [r11-0x30],rax
    65033287:	lea    r8,[r11-0x38]
    6503328b:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65033290:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    65033296:	lea    rdx,[r11-0x18]
    6503329a:	call   0x6500d770
    6503329f:	mov    rcx,QWORD PTR [rip+0x13c5a]        # 0x65046f00
    650332a6:	call   0x6501d190
    650332ab:	xor    r11d,r11d
    650332ae:	mov    QWORD PTR [rip+0x13c4b],r11        # 0x65046f00
    650332b5:	mov    QWORD PTR [rip+0x13c4c],r11        # 0x65046f08
    650332bc:	add    rsp,0x58
    650332c0:	ret    
    650332c1:	int3   
    650332c2:	int3   
    650332c3:	int3   
    650332c4:	int3   
    650332c5:	int3   
    650332c6:	int3   
    650332c7:	int3   
    650332c8:	int3   
    650332c9:	int3   
    650332ca:	int3   
    650332cb:	int3   
    650332cc:	int3   
    650332cd:	int3   
    650332ce:	int3   
    650332cf:	int3   
    650332d0:	mov    r11,rsp
    650332d3:	sub    rsp,0x58
    650332d7:	mov    rax,QWORD PTR [rip+0x13c62]        # 0x65046f40
    650332de:	lea    rcx,[rip+0x13c53]        # 0x65046f38
    650332e5:	lea    r9,[r11-0x28]
    650332e9:	mov    QWORD PTR [r11-0x30],rax
    650332ed:	mov    rax,QWORD PTR [rax]
    650332f0:	mov    QWORD PTR [r11-0x38],rcx
    650332f4:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    650332f9:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    650332ff:	mov    QWORD PTR [r11-0x38],rcx
    65033303:	mov    QWORD PTR [r11-0x30],rax
    65033307:	lea    r8,[r11-0x38]
    6503330b:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65033310:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    65033316:	lea    rdx,[r11-0x18]
    6503331a:	call   0x6500d770
    6503331f:	mov    rcx,QWORD PTR [rip+0x13c1a]        # 0x65046f40
    65033326:	call   0x6501d190
    6503332b:	xor    r11d,r11d
    6503332e:	mov    QWORD PTR [rip+0x13c0b],r11        # 0x65046f40
    65033335:	mov    QWORD PTR [rip+0x13c0c],r11        # 0x65046f48
    6503333c:	add    rsp,0x58
    65033340:	ret    
    65033341:	int3   
    65033342:	int3   
    65033343:	int3   
    65033344:	int3   
    65033345:	int3   
    65033346:	int3   
    65033347:	int3   
    65033348:	int3   
    65033349:	int3   
    6503334a:	int3   
    6503334b:	int3   
    6503334c:	int3   
    6503334d:	int3   
    6503334e:	int3   
    6503334f:	int3   
    65033350:	mov    r11,rsp
    65033353:	sub    rsp,0x58
    65033357:	mov    rax,QWORD PTR [rip+0x13bc2]        # 0x65046f20
    6503335e:	lea    rcx,[rip+0x13bb3]        # 0x65046f18
    65033365:	lea    r9,[r11-0x28]
    65033369:	mov    QWORD PTR [r11-0x30],rax
    6503336d:	mov    rax,QWORD PTR [rax]
    65033370:	mov    QWORD PTR [r11-0x38],rcx
    65033374:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65033379:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6503337f:	mov    QWORD PTR [r11-0x38],rcx
    65033383:	mov    QWORD PTR [r11-0x30],rax
    65033387:	lea    r8,[r11-0x38]
    6503338b:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65033390:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    65033396:	lea    rdx,[r11-0x18]
    6503339a:	call   0x6500d770
    6503339f:	mov    rcx,QWORD PTR [rip+0x13b7a]        # 0x65046f20
    650333a6:	call   0x6501d190
    650333ab:	xor    r11d,r11d
    650333ae:	mov    QWORD PTR [rip+0x13b6b],r11        # 0x65046f20
    650333b5:	mov    QWORD PTR [rip+0x13b6c],r11        # 0x65046f28
    650333bc:	add    rsp,0x58
    650333c0:	ret    
    650333c1:	int3   
    650333c2:	int3   
    650333c3:	int3   
    650333c4:	int3   
    650333c5:	int3   
    650333c6:	int3   
    650333c7:	int3   
    650333c8:	int3   
    650333c9:	int3   
    650333ca:	int3   
    650333cb:	int3   
    650333cc:	int3   
    650333cd:	int3   
    650333ce:	int3   
    650333cf:	int3   
    650333d0:	lea    rcx,[rip+0x13a31]        # 0x65046e08
    650333d7:	jmp    0x6500ff00
    650333dc:	int3   
    650333dd:	int3   
    650333de:	int3   
    650333df:	int3   
    650333e0:	lea    rcx,[rip+0x13a09]        # 0x65046df0
    650333e7:	jmp    0x6500fc90
    650333ec:	int3   
    650333ed:	int3   
    650333ee:	int3   
    650333ef:	int3   
    650333f0:	sub    rsp,0x28
    650333f4:	mov    rcx,QWORD PTR [rip+0x10735]        # 0x65043b30
    650333fb:	test   rcx,rcx
    650333fe:	je     0x65033405
    65033400:	call   0x6501d190
    65033405:	xor    eax,eax
    65033407:	mov    QWORD PTR [rip+0x10722],rax        # 0x65043b30
    6503340e:	mov    QWORD PTR [rip+0x10723],rax        # 0x65043b38
    65033415:	mov    QWORD PTR [rip+0x10724],rax        # 0x65043b40
    6503341c:	add    rsp,0x28
    65033420:	ret    
    65033421:	int3   
    65033422:	int3   
    65033423:	int3   
    65033424:	lea    rcx,[rip+0x10725]        # 0x65043b50
    6503342b:	jmp    0x6501cc48
    65033430:	sub    rsp,0x28
    65033434:	mov    rdx,QWORD PTR [rip+0x1071d]        # 0x65043b58
    6503343b:	lea    rcx,[rip+0x1076e]        # 0x65043bb0
    65033442:	call   0x6501cb90
    65033447:	mov    rcx,QWORD PTR [rip+0x1079a]        # 0x65043be8
    6503344e:	test   rcx,rcx
    65033451:	je     0x65033460
    65033453:	call   0x6501fa90
    65033458:	and    QWORD PTR [rip+0x10788],0x0        # 0x65043be8
    65033460:	and    DWORD PTR [rip+0x10789],0x0        # 0x65043bf0
    65033467:	and    DWORD PTR [rip+0x10786],0x0        # 0x65043bf4
    6503346e:	add    rsp,0x28
    65033472:	ret    
    65033473:	int3   
    65033474:	sub    rsp,0x28
    65033478:	cmp    BYTE PTR [rip+0x10789],0x0        # 0x65043c08
    6503347f:	lea    rax,[rip+0x1c22]        # 0x650350a8
    65033486:	mov    QWORD PTR [rip+0x1076b],rax        # 0x65043bf8
    6503348d:	je     0x650334a1
    6503348f:	mov    rcx,QWORD PTR [rip+0x1076a]        # 0x65043c00
    65033496:	test   rcx,rcx
    65033499:	je     0x650334a1
    6503349b:	call   QWORD PTR [rip+0xd1f]        # 0x650341c0
    650334a1:	add    rsp,0x28
    650334a5:	ret    
    650334a6:	int3   
    650334a7:	int3   
    650334a8:	lea    rax,[rip+0x1c21]        # 0x650350d0
    650334af:	mov    QWORD PTR [rip+0xebea],rax        # 0x650420a0
    650334b6:	ret    
    650334b7:	int3   
    650334b8:	int3   
    650334b9:	int3   
    650334ba:	int3   
    650334bb:	int3   
    650334bc:	int3   
    650334bd:	int3   
    650334be:	int3   
    650334bf:	int3   
    650334c0:	lea    rax,[rip+0x1c41]        # 0x65035108
    650334c7:	lea    rcx,[rip+0x1074a]        # 0x65043c18
    650334ce:	mov    QWORD PTR [rip+0x10743],rax        # 0x65043c18
    650334d5:	jmp    0x6501d320
    650334da:	int3   
    650334db:	int3   
    650334dc:	int3   
    650334dd:	int3   
    650334de:	int3   
    650334df:	int3   
    650334e0:	lea    rcx,[rip+0x10119]        # 0x65043600
    650334e7:	rex.W jmp QWORD PTR [rip+0xe2a]        # 0x65034318
