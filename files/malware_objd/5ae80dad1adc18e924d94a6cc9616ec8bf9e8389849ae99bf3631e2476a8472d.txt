
5ae80dad1adc18e924d94a6cc9616ec8bf9e8389849ae99bf3631e2476a8472d.exe:     file format pei-x86-64


Disassembly of section .text:

0000000065001000 <.text>:
    65001000:	lea    rax,[rip+0x341b1]        # 0x650351b8
    65001007:	mov    QWORD PTR [rcx],rax
    6500100a:	jmp    0x6501d490
    6500100f:	int3   
    65001010:	mov    QWORD PTR [rsp+0x8],rbx
    65001015:	push   rdi
    65001016:	sub    rsp,0x20
    6500101a:	lea    rax,[rip+0x34197]        # 0x650351b8
    65001021:	mov    ebx,edx
    65001023:	mov    rdi,rcx
    65001026:	mov    QWORD PTR [rcx],rax
    65001029:	call   0x6501d490
    6500102e:	test   bl,0x1
    65001031:	je     0x6500103b
    65001033:	mov    rcx,rdi
    65001036:	call   0x6501d300
    6500103b:	mov    rax,rdi
    6500103e:	mov    rbx,QWORD PTR [rsp+0x30]
    65001043:	add    rsp,0x20
    65001047:	pop    rdi
    65001048:	ret    
    65001049:	int3   
    6500104a:	int3   
    6500104b:	int3   
    6500104c:	int3   
    6500104d:	int3   
    6500104e:	int3   
    6500104f:	int3   
    65001050:	sub    rsp,0x28
    65001054:	mov    DWORD PTR [rsp+0x30],ecx
    65001058:	lea    rdx,[rip+0x40361]        # 0x650413c0
    6500105f:	lea    rcx,[rsp+0x30]
    65001064:	call   0x6501dc60
    65001069:	int3   
    6500106a:	int3   
    6500106b:	int3   
    6500106c:	int3   
    6500106d:	int3   
    6500106e:	int3   
    6500106f:	int3   
    65001070:	mov    QWORD PTR [rsp+0x18],rbx
    65001075:	mov    QWORD PTR [rsp+0x20],rsi
    6500107a:	push   rdi
    6500107b:	sub    rsp,0x30
    6500107f:	mov    rdi,rcx
    65001082:	mov    ecx,0x2710
    65001087:	call   QWORD PTR [rip+0x32feb]        # 0x65034078
    6500108d:	xor    esi,esi
    6500108f:	mov    DWORD PTR [rsp+0x40],esi
    65001093:	mov    ebx,esi
    65001095:	data16 data16 xchg ax,ax
    65001099:	data16 xchg ax,ax
    6500109c:	data16 data16 xchg ax,ax
    650010a0:	lea    r9,[rsp+0x48]
    650010a5:	lea    rdx,[rsp+0x40]
    650010aa:	mov    r8d,0x4
    650010b0:	mov    rcx,rdi
    650010b3:	mov    QWORD PTR [rsp+0x20],rsi
    650010b8:	call   QWORD PTR [rip+0x33032]        # 0x650340f0
    650010be:	test   eax,eax
    650010c0:	je     0x650010ca
    650010c2:	add    ebx,0x1
    650010c5:	cmp    ebx,0xa
    650010c8:	jne    0x650010a0
    650010ca:	test   rdi,rdi
    650010cd:	je     0x650010e8
    650010cf:	call   QWORD PTR [rip+0x32f93]        # 0x65034068
    650010d5:	mov    rcx,rdi
    650010d8:	mov    ebx,eax
    650010da:	call   QWORD PTR [rip+0x32f80]        # 0x65034060
    650010e0:	mov    ecx,ebx
    650010e2:	call   QWORD PTR [rip+0x33028]        # 0x65034110
    650010e8:	mov    rbx,QWORD PTR [rsp+0x50]
    650010ed:	mov    rsi,QWORD PTR [rsp+0x58]
    650010f2:	xor    eax,eax
    650010f4:	add    rsp,0x30
    650010f8:	pop    rdi
    650010f9:	ret    
    650010fa:	int3   
    650010fb:	int3   
    650010fc:	int3   
    650010fd:	int3   
    650010fe:	int3   
    650010ff:	int3   
    65001100:	rex push rbx
    65001102:	push   rbp
    65001103:	push   rsi
    65001104:	push   rdi
    65001105:	sub    rsp,0x58
    65001109:	xor    ebp,ebp
    6500110b:	mov    rsi,rcx
    6500110e:	mov    QWORD PTR [rsp+0x48],rcx
    65001113:	mov    QWORD PTR [rsp+0x40],rbp
    65001118:	mov    rdi,QWORD PTR [rcx+0x18]
    6500111c:	call   QWORD PTR [rip+0x32f4e]        # 0x65034070
    65001122:	mov    rbx,rax
    65001125:	call   QWORD PTR [rip+0x32f45]        # 0x65034070
    6500112b:	mov    DWORD PTR [rsp+0x30],0x2
    65001133:	lea    r9,[rsp+0x40]
    65001138:	mov    r8,rbx
    6500113b:	mov    rdx,rdi
    6500113e:	mov    rcx,rax
    65001141:	mov    DWORD PTR [rsp+0x28],ebp
    65001145:	mov    DWORD PTR [rsp+0x20],ebp
    65001149:	call   QWORD PTR [rip+0x32f89]        # 0x650340d8
    6500114f:	test   eax,eax
    65001151:	je     0x65001233
    65001157:	mov    r9,QWORD PTR [rsp+0x40]
    6500115c:	lea    r8,[rip+0xffffffffffffff0d]        # 0x65001070
    65001163:	xor    edx,edx
    65001165:	xor    ecx,ecx
    65001167:	mov    QWORD PTR [rsp+0x28],rbp
    6500116c:	mov    DWORD PTR [rsp+0x20],ebp
    65001170:	call   QWORD PTR [rip+0x32f42]        # 0x650340b8
    65001176:	mov    DWORD PTR [rsp+0x80],ebp
    6500117d:	mov    rcx,QWORD PTR [rsi+0x10]
    65001181:	lea    r9,[rsp+0x88]
    65001189:	lea    r8d,[rbp+0x4]
    6500118d:	lea    rdx,[rsp+0x80]
    65001195:	mov    rbx,rax
    65001198:	mov    QWORD PTR [rsp+0x20],rbp
    6500119d:	call   QWORD PTR [rip+0x32f45]        # 0x650340e8
    650011a3:	test   eax,eax
    650011a5:	je     0x65001215
    650011a7:	cmp    DWORD PTR [rsp+0x88],0x4
    650011af:	jne    0x65001215
    650011b1:	mov    eax,DWORD PTR [rsp+0x80]
    650011b8:	lea    r9,[rsp+0x98]
    650011c0:	lea    r8d,[rbp+0x4]
    650011c4:	mov    DWORD PTR [rsp+0x90],eax
    650011cb:	mov    rcx,QWORD PTR [rsi+0x8]
    650011cf:	lea    rdx,[rsp+0x90]
    650011d7:	mov    QWORD PTR [rsp+0x20],rbp
    650011dc:	call   QWORD PTR [rip+0x32f0e]        # 0x650340f0
    650011e2:	test   rbx,rbx
    650011e5:	je     0x65001200
    650011e7:	call   QWORD PTR [rip+0x32e7b]        # 0x65034068
    650011ed:	mov    rcx,rbx
    650011f0:	mov    edi,eax
    650011f2:	call   QWORD PTR [rip+0x32e68]        # 0x65034060
    650011f8:	mov    ecx,edi
    650011fa:	call   QWORD PTR [rip+0x32f10]        # 0x65034110
    65001200:	lea    rcx,[rsp+0x48]
    65001205:	call   0x65001d40
    6500120a:	xor    eax,eax
    6500120c:	add    rsp,0x58
    65001210:	pop    rdi
    65001211:	pop    rsi
    65001212:	pop    rbp
    65001213:	pop    rbx
    65001214:	ret    
    65001215:	test   rbx,rbx
    65001218:	je     0x65001233
    6500121a:	call   QWORD PTR [rip+0x32e48]        # 0x65034068
    65001220:	mov    rcx,rbx
    65001223:	mov    edi,eax
    65001225:	call   QWORD PTR [rip+0x32e35]        # 0x65034060
    6500122b:	mov    ecx,edi
    6500122d:	call   QWORD PTR [rip+0x32edd]        # 0x65034110
    65001233:	mov    rdi,QWORD PTR [rsi+0x18]
    65001237:	test   rdi,rdi
    6500123a:	je     0x65001255
    6500123c:	call   QWORD PTR [rip+0x32e26]        # 0x65034068
    65001242:	mov    rcx,rdi
    65001245:	mov    ebx,eax
    65001247:	call   QWORD PTR [rip+0x32e13]        # 0x65034060
    6500124d:	mov    ecx,ebx
    6500124f:	call   QWORD PTR [rip+0x32ebb]        # 0x65034110
    65001255:	mov    QWORD PTR [rsi+0x18],rbp
    65001259:	mov    rdi,QWORD PTR [rsi+0x10]
    6500125d:	test   rdi,rdi
    65001260:	je     0x6500127b
    65001262:	call   QWORD PTR [rip+0x32e00]        # 0x65034068
    65001268:	mov    rcx,rdi
    6500126b:	mov    ebx,eax
    6500126d:	call   QWORD PTR [rip+0x32ded]        # 0x65034060
    65001273:	mov    ecx,ebx
    65001275:	call   QWORD PTR [rip+0x32e95]        # 0x65034110
    6500127b:	mov    QWORD PTR [rsi+0x10],rbp
    6500127f:	mov    rdi,QWORD PTR [rsi+0x8]
    65001283:	test   rdi,rdi
    65001286:	je     0x650012a1
    65001288:	call   QWORD PTR [rip+0x32dda]        # 0x65034068
    6500128e:	mov    rcx,rdi
    65001291:	mov    ebx,eax
    65001293:	call   QWORD PTR [rip+0x32dc7]        # 0x65034060
    65001299:	mov    ecx,ebx
    6500129b:	call   QWORD PTR [rip+0x32e6f]        # 0x65034110
    650012a1:	mov    QWORD PTR [rsi+0x8],rbp
    650012a5:	mov    rdi,QWORD PTR [rsi]
    650012a8:	test   rdi,rdi
    650012ab:	je     0x650012c6
    650012ad:	call   QWORD PTR [rip+0x32db5]        # 0x65034068
    650012b3:	mov    rcx,rdi
    650012b6:	mov    ebx,eax
    650012b8:	call   QWORD PTR [rip+0x32da2]        # 0x65034060
    650012be:	mov    ecx,ebx
    650012c0:	call   QWORD PTR [rip+0x32e4a]        # 0x65034110
    650012c6:	mov    rcx,rsi
    650012c9:	mov    QWORD PTR [rsi],rbp
    650012cc:	call   0x6501d300
    650012d1:	xor    eax,eax
    650012d3:	add    rsp,0x58
    650012d7:	pop    rdi
    650012d8:	pop    rsi
    650012d9:	pop    rbp
    650012da:	pop    rbx
    650012db:	ret    
    650012dc:	int3   
    650012dd:	int3   
    650012de:	int3   
    650012df:	int3   
    650012e0:	mov    r11,rsp
    650012e3:	push   rsi
    650012e4:	push   rdi
    650012e5:	push   r12
    650012e7:	push   r13
    650012e9:	push   r14
    650012eb:	sub    rsp,0xf0
    650012f2:	mov    QWORD PTR [rsp+0x90],0xfffffffffffffffe
    650012fe:	mov    QWORD PTR [r11+0x18],rbx
    65001302:	mov    QWORD PTR [r11+0x20],rbp
    65001306:	mov    rax,QWORD PTR [rip+0x41e13]        # 0x65043120
    6500130d:	xor    rax,rsp
    65001310:	mov    QWORD PTR [rsp+0xe8],rax
    65001318:	mov    r13,rdx
    6500131b:	mov    rdi,rcx
    6500131e:	mov    QWORD PTR [r11-0x90],rcx
    65001325:	xor    r14d,r14d
    65001328:	mov    DWORD PTR [rsp+0x30],r14d
    6500132d:	mov    QWORD PTR [rcx+0x20],0xf
    65001335:	mov    QWORD PTR [rcx+0x18],r14
    65001339:	lea    rbp,[rcx+0x8]
    6500133d:	mov    BYTE PTR [rbp+0x0],r14b
    65001341:	mov    DWORD PTR [rsp+0x30],0x1
    65001349:	call   QWORD PTR [rip+0x32d91]        # 0x650340e0
    6500134f:	mov    rsi,rax
    65001352:	mov    ecx,r14d
    65001355:	mov    rax,r14
    65001358:	test   rax,rax
    6500135b:	jle    0x6500136c
    6500135d:	cmp    WORD PTR [rsi+rax*2-0x2],0x0
    65001363:	jne    0x6500136c
    65001365:	cmp    WORD PTR [rsi+rax*2],0x0
    6500136a:	je     0x65001375
    6500136c:	add    ecx,0x1
    6500136f:	add    rax,0x1
    65001373:	jmp    0x65001358
    65001375:	movsxd rbx,ecx
    65001378:	add    rbx,rbx
    6500137b:	mov    edx,0xf
    65001380:	mov    QWORD PTR [rsp+0x58],rdx
    65001385:	mov    r8,r14
    65001388:	mov    QWORD PTR [rsp+0x50],r14
    6500138d:	mov    BYTE PTR [rsp+0x40],r8b
    65001392:	cmp    rbx,0xfffffffffffffffe
    65001396:	jbe    0x650013a7
    65001398:	call   0x6501d150
    6500139d:	mov    rdx,QWORD PTR [rsp+0x58]
    650013a2:	mov    r8,QWORD PTR [rsp+0x50]
    650013a7:	cmp    rdx,rbx
    650013aa:	jae    0x650013c0
    650013ac:	mov    rdx,rbx
    650013af:	lea    rcx,[rsp+0x38]
    650013b4:	call   0x65002330
    650013b9:	mov    rdx,QWORD PTR [rsp+0x58]
    650013be:	jmp    0x650013dd
    650013c0:	test   rbx,rbx
    650013c3:	jne    0x650013dd
    650013c5:	mov    QWORD PTR [rsp+0x50],r14
    650013ca:	lea    rax,[rsp+0x40]
    650013cf:	cmp    rdx,0x10
    650013d3:	cmovae rax,QWORD PTR [rsp+0x40]
    650013d9:	mov    BYTE PTR [rax],bl
    650013db:	jmp    0x65001416
    650013dd:	test   rbx,rbx
    650013e0:	je     0x65001416
    650013e2:	lea    rcx,[rsp+0x40]
    650013e7:	cmp    rdx,0x10
    650013eb:	cmovae rcx,QWORD PTR [rsp+0x40]
    650013f1:	mov    r9,rbx
    650013f4:	mov    r8,rsi
    650013f7:	call   0x6501d7b0
    650013fc:	mov    QWORD PTR [rsp+0x50],rbx
    65001401:	lea    rax,[rsp+0x40]
    65001406:	cmp    QWORD PTR [rsp+0x58],0x10
    6500140c:	cmovae rax,QWORD PTR [rsp+0x40]
    65001412:	mov    BYTE PTR [rax+rbx*1],0x0
    65001416:	or     r9,0xffffffffffffffff
    6500141a:	xor    r8d,r8d
    6500141d:	lea    rdx,[rsp+0x38]
    65001422:	mov    rcx,rdi
    65001425:	call   0x650021e0
    6500142a:	nop
    6500142b:	cmp    QWORD PTR [rsp+0x58],0x10
    65001431:	jb     0x6500143d
    65001433:	mov    rcx,QWORD PTR [rsp+0x40]
    65001438:	call   0x6501d300
    6500143d:	lea    rcx,[rip+0x41c5c]        # 0x650430a0
    65001444:	mov    rax,QWORD PTR [rip+0x41c55]        # 0x650430a0
    6500144b:	call   QWORD PTR [rax+0x18]
    6500144e:	add    rax,0x18
    65001452:	mov    QWORD PTR [rsp+0x28],rax
    65001457:	mov    r8,QWORD PTR [r13+0x0]
    6500145b:	lea    rdx,[rip+0x35bd6]        # 0x65037038
    65001462:	lea    rcx,[rsp+0x28]
    65001467:	call   0x65002560
    6500146c:	mov    rbx,QWORD PTR [rsp+0x28]
    65001471:	mov    esi,DWORD PTR [rbx-0x10]
    65001474:	cmp    DWORD PTR [rbx-0x8],0x1
    65001478:	jle    0x6500148b
    6500147a:	mov    edx,esi
    6500147c:	lea    rcx,[rsp+0x28]
    65001481:	call   0x65002130
    65001486:	mov    rbx,QWORD PTR [rsp+0x28]
    6500148b:	lea    eax,[rsi+0x1]
    6500148e:	movsxd rsi,eax
    65001491:	add    rsi,rsi
    65001494:	mov    QWORD PTR [rsp+0xe0],0xf
    650014a0:	mov    QWORD PTR [rsp+0xd8],r14
    650014a8:	mov    BYTE PTR [rsp+0xc8],0x0
    650014b0:	cmp    rsi,0xfffffffffffffffe
    650014b4:	jbe    0x650014bb
    650014b6:	call   0x6501d150
    650014bb:	cmp    QWORD PTR [rsp+0xe0],rsi
    650014c3:	jae    0x650014df
    650014c5:	mov    r8,QWORD PTR [rsp+0xd8]
    650014cd:	mov    rdx,rsi
    650014d0:	lea    rcx,[rsp+0xc0]
    650014d8:	call   0x65002330
    650014dd:	jmp    0x6500150b
    650014df:	test   rsi,rsi
    650014e2:	jne    0x6500150b
    650014e4:	mov    QWORD PTR [rsp+0xd8],r14
    650014ec:	lea    rax,[rsp+0xc8]
    650014f4:	cmp    QWORD PTR [rsp+0xe0],0x10
    650014fd:	cmovae rax,QWORD PTR [rsp+0xc8]
    65001506:	mov    BYTE PTR [rax],sil
    65001509:	jmp    0x6500155e
    6500150b:	test   rsi,rsi
    6500150e:	je     0x6500155e
    65001510:	lea    rcx,[rsp+0xc8]
    65001518:	mov    rdx,QWORD PTR [rsp+0xe0]
    65001520:	cmp    rdx,0x10
    65001524:	cmovae rcx,QWORD PTR [rsp+0xc8]
    6500152d:	mov    r9,rsi
    65001530:	mov    r8,rbx
    65001533:	call   0x6501d7b0
    65001538:	mov    QWORD PTR [rsp+0xd8],rsi
    65001540:	lea    rax,[rsp+0xc8]
    65001548:	cmp    QWORD PTR [rsp+0xe0],0x10
    65001551:	cmovae rax,QWORD PTR [rsp+0xc8]
    6500155a:	mov    BYTE PTR [rax+rsi*1],0x0
    6500155e:	or     r12,0xffffffffffffffff
    65001562:	mov    rax,QWORD PTR [rsp+0xd8]
    6500156a:	cmp    rax,r12
    6500156d:	cmovb  r12,rax
    65001571:	mov    rcx,QWORD PTR [rdi+0x18]
    65001575:	or     rax,0xffffffffffffffff
    65001579:	sub    rax,rcx
    6500157c:	cmp    rax,r12
    6500157f:	jbe    0x6500158a
    65001581:	lea    rax,[rcx+r12*1]
    65001585:	cmp    rax,rcx
    65001588:	jae    0x6500158f
    6500158a:	call   0x6501d150
    6500158f:	test   r12,r12
    65001592:	je     0x6500163e
    65001598:	mov    rax,QWORD PTR [rdi+0x18]
    6500159c:	lea    rsi,[r12+rax*1]
    650015a0:	cmp    rsi,0xfffffffffffffffe
    650015a4:	jbe    0x650015ab
    650015a6:	call   0x6501d150
    650015ab:	mov    rax,QWORD PTR [rdi+0x20]
    650015af:	cmp    rax,rsi
    650015b2:	jae    0x650015c5
    650015b4:	mov    r8,QWORD PTR [rdi+0x18]
    650015b8:	mov    rdx,rsi
    650015bb:	mov    rcx,rdi
    650015be:	call   0x65002330
    650015c3:	jmp    0x650015e2
    650015c5:	test   rsi,rsi
    650015c8:	jne    0x650015e2
    650015ca:	mov    QWORD PTR [rdi+0x18],r14
    650015ce:	cmp    rax,0x10
    650015d2:	jb     0x650015da
    650015d4:	mov    rax,QWORD PTR [rbp+0x0]
    650015d8:	jmp    0x650015dd
    650015da:	mov    rax,rbp
    650015dd:	mov    BYTE PTR [rax],0x0
    650015e0:	jmp    0x6500163e
    650015e2:	test   rsi,rsi
    650015e5:	je     0x6500163e
    650015e7:	lea    r8,[rsp+0xc8]
    650015ef:	cmp    QWORD PTR [rsp+0xe0],0x10
    650015f8:	cmovae r8,QWORD PTR [rsp+0xc8]
    65001601:	mov    rdx,QWORD PTR [rdi+0x20]
    65001605:	cmp    rdx,0x10
    65001609:	jb     0x65001611
    6500160b:	mov    rcx,QWORD PTR [rbp+0x0]
    6500160f:	jmp    0x65001614
    65001611:	mov    rcx,rbp
    65001614:	mov    rax,QWORD PTR [rdi+0x18]
    65001618:	sub    rdx,rax
    6500161b:	add    rcx,rax
    6500161e:	mov    r9,r12
    65001621:	call   0x6501d7b0
    65001626:	mov    QWORD PTR [rdi+0x18],rsi
    6500162a:	cmp    QWORD PTR [rdi+0x20],0x10
    6500162f:	jb     0x65001637
    65001631:	mov    rax,QWORD PTR [rbp+0x0]
    65001635:	jmp    0x6500163a
    65001637:	mov    rax,rbp
    6500163a:	mov    BYTE PTR [rax+rsi*1],0x0
    6500163e:	cmp    QWORD PTR [rsp+0xe0],0x10
    65001647:	jb     0x65001656
    65001649:	mov    rcx,QWORD PTR [rsp+0xc8]
    65001651:	call   0x6501d300
    65001656:	mov    QWORD PTR [rsp+0xe0],0xf
    65001662:	mov    QWORD PTR [rsp+0xd8],r14
    6500166a:	mov    BYTE PTR [rsp+0xc8],0x0
    65001672:	lea    rdx,[rbx-0x18]
    65001676:	or     eax,0xffffffff
    65001679:	lock xadd DWORD PTR [rdx+0x10],eax
    6500167e:	add    eax,0xffffffff
    65001681:	test   eax,eax
    65001683:	jg     0x6500168e
    65001685:	mov    rcx,QWORD PTR [rdx]
    65001688:	mov    rax,QWORD PTR [rcx]
    6500168b:	call   QWORD PTR [rax+0x8]
    6500168e:	lea    rcx,[rip+0x41a0b]        # 0x650430a0
    65001695:	mov    rax,QWORD PTR [rip+0x41a04]        # 0x650430a0
    6500169c:	call   QWORD PTR [rax+0x18]
    6500169f:	add    rax,0x18
    650016a3:	mov    QWORD PTR [rsp+0x20],rax
    650016a8:	mov    r8,QWORD PTR [r13+0x18]
    650016ac:	lea    rdx,[rip+0x35995]        # 0x65037048
    650016b3:	lea    rcx,[rsp+0x20]
    650016b8:	call   0x65002560
    650016bd:	mov    rbx,QWORD PTR [rsp+0x20]
    650016c2:	mov    esi,DWORD PTR [rbx-0x10]
    650016c5:	cmp    DWORD PTR [rbx-0x8],0x1
    650016c9:	jle    0x650016dc
    650016cb:	mov    edx,esi
    650016cd:	lea    rcx,[rsp+0x20]
    650016d2:	call   0x65002130
    650016d7:	mov    rbx,QWORD PTR [rsp+0x20]
    650016dc:	lea    eax,[rsi+0x1]
    650016df:	movsxd rsi,eax
    650016e2:	add    rsi,rsi
    650016e5:	mov    QWORD PTR [rsp+0xb8],0xf
    650016f1:	mov    QWORD PTR [rsp+0xb0],r14
    650016f9:	mov    BYTE PTR [rsp+0xa0],0x0
    65001701:	cmp    rsi,0xfffffffffffffffe
    65001705:	jbe    0x6500170c
    65001707:	call   0x6501d150
    6500170c:	cmp    QWORD PTR [rsp+0xb8],rsi
    65001714:	jae    0x65001730
    65001716:	mov    r8,QWORD PTR [rsp+0xb0]
    6500171e:	mov    rdx,rsi
    65001721:	lea    rcx,[rsp+0x98]
    65001729:	call   0x65002330
    6500172e:	jmp    0x6500175c
    65001730:	test   rsi,rsi
    65001733:	jne    0x6500175c
    65001735:	mov    QWORD PTR [rsp+0xb0],r14
    6500173d:	lea    rax,[rsp+0xa0]
    65001745:	cmp    QWORD PTR [rsp+0xb8],0x10
    6500174e:	cmovae rax,QWORD PTR [rsp+0xa0]
    65001757:	mov    BYTE PTR [rax],sil
    6500175a:	jmp    0x650017af
    6500175c:	test   rsi,rsi
    6500175f:	je     0x650017af
    65001761:	lea    rcx,[rsp+0xa0]
    65001769:	mov    rdx,QWORD PTR [rsp+0xb8]
    65001771:	cmp    rdx,0x10
    65001775:	cmovae rcx,QWORD PTR [rsp+0xa0]
    6500177e:	mov    r9,rsi
    65001781:	mov    r8,rbx
    65001784:	call   0x6501d7b0
    65001789:	mov    QWORD PTR [rsp+0xb0],rsi
    65001791:	lea    rax,[rsp+0xa0]
    65001799:	cmp    QWORD PTR [rsp+0xb8],0x10
    650017a2:	cmovae rax,QWORD PTR [rsp+0xa0]
    650017ab:	mov    BYTE PTR [rsi+rax*1],0x0
    650017af:	or     r12,0xffffffffffffffff
    650017b3:	mov    rax,QWORD PTR [rsp+0xb0]
    650017bb:	cmp    rax,r12
    650017be:	cmovb  r12,rax
    650017c2:	mov    rcx,QWORD PTR [rdi+0x18]
    650017c6:	or     rax,0xffffffffffffffff
    650017ca:	sub    rax,rcx
    650017cd:	cmp    rax,r12
    650017d0:	jbe    0x650017db
    650017d2:	lea    rax,[rcx+r12*1]
    650017d6:	cmp    rax,rcx
    650017d9:	jae    0x650017e0
    650017db:	call   0x6501d150
    650017e0:	test   r12,r12
    650017e3:	je     0x65001886
    650017e9:	mov    rax,QWORD PTR [rdi+0x18]
    650017ed:	lea    rsi,[r12+rax*1]
    650017f1:	cmp    rsi,0xfffffffffffffffe
    650017f5:	jbe    0x650017fc
    650017f7:	call   0x6501d150
    650017fc:	mov    rax,QWORD PTR [rdi+0x20]
    65001800:	cmp    rax,rsi
    65001803:	jae    0x65001816
    65001805:	mov    r8,QWORD PTR [rdi+0x18]
    65001809:	mov    rdx,rsi
    6500180c:	mov    rcx,rdi
    6500180f:	call   0x65002330
    65001814:	jmp    0x6500182f
    65001816:	test   rsi,rsi
    65001819:	jne    0x6500182f
    6500181b:	mov    QWORD PTR [rdi+0x18],r14
    6500181f:	cmp    rax,0x10
    65001823:	jb     0x65001829
    65001825:	mov    rbp,QWORD PTR [rbp+0x0]
    65001829:	mov    BYTE PTR [rbp+0x0],0x0
    6500182d:	jmp    0x65001886
    6500182f:	test   rsi,rsi
    65001832:	je     0x65001886
    65001834:	lea    r8,[rsp+0xa0]
    6500183c:	cmp    QWORD PTR [rsp+0xb8],0x10
    65001845:	cmovae r8,QWORD PTR [rsp+0xa0]
    6500184e:	mov    rdx,QWORD PTR [rdi+0x20]
    65001852:	cmp    rdx,0x10
    65001856:	jb     0x6500185e
    65001858:	mov    rcx,QWORD PTR [rbp+0x0]
    6500185c:	jmp    0x65001861
    6500185e:	mov    rcx,rbp
    65001861:	mov    rax,QWORD PTR [rdi+0x18]
    65001865:	sub    rdx,rax
    65001868:	add    rcx,rax
    6500186b:	mov    r9,r12
    6500186e:	call   0x6501d7b0
    65001873:	mov    QWORD PTR [rdi+0x18],rsi
    65001877:	cmp    QWORD PTR [rdi+0x20],0x10
    6500187c:	jb     0x65001882
    6500187e:	mov    rbp,QWORD PTR [rbp+0x0]
    65001882:	mov    BYTE PTR [rsi+rbp*1],0x0
    65001886:	cmp    QWORD PTR [rsp+0xb8],0x10
    6500188f:	jb     0x6500189e
    65001891:	mov    rcx,QWORD PTR [rsp+0xa0]
    65001899:	call   0x6501d300
    6500189e:	mov    QWORD PTR [rsp+0xb8],0xf
    650018aa:	mov    QWORD PTR [rsp+0xb0],r14
    650018b2:	mov    BYTE PTR [rsp+0xa0],0x0
    650018ba:	lea    rdx,[rbx-0x18]
    650018be:	or     eax,0xffffffff
    650018c1:	lock xadd DWORD PTR [rdx+0x10],eax
    650018c6:	add    eax,0xffffffff
    650018c9:	test   eax,eax
    650018cb:	jg     0x650018d6
    650018cd:	mov    rcx,QWORD PTR [rdx]
    650018d0:	mov    rax,QWORD PTR [rcx]
    650018d3:	call   QWORD PTR [rax+0x8]
    650018d6:	mov    QWORD PTR [rsp+0x80],0xf
    650018e2:	mov    QWORD PTR [rsp+0x78],r14
    650018e7:	mov    BYTE PTR [rsp+0x68],0x0
    650018ec:	mov    r9d,0x2
    650018f2:	lea    r8,[rip+0x3575b]        # 0x65037054
    650018f9:	lea    edx,[r9+0xd]
    650018fd:	lea    rcx,[rsp+0x68]
    65001902:	call   0x6501d7b0
    65001907:	mov    QWORD PTR [rsp+0x78],0x2
    65001910:	lea    rcx,[rsp+0x68]
    65001915:	cmp    QWORD PTR [rsp+0x80],0x10
    6500191e:	cmovae rcx,QWORD PTR [rsp+0x68]
    65001924:	mov    BYTE PTR [rcx+0x2],0x0
    65001928:	or     r9,0xffffffffffffffff
    6500192c:	xor    r8d,r8d
    6500192f:	lea    rdx,[rsp+0x60]
    65001934:	mov    rcx,rdi
    65001937:	call   0x650021e0
    6500193c:	nop
    6500193d:	cmp    QWORD PTR [rsp+0x80],0x10
    65001946:	jb     0x65001957
    65001948:	mov    rcx,QWORD PTR [rsp+0x68]
    6500194d:	call   0x6501d300
    65001952:	mov    rax,rdi
    65001955:	jmp    0x6500195a
    65001957:	mov    rax,rdi
    6500195a:	mov    rcx,QWORD PTR [rsp+0xe8]
    65001962:	xor    rcx,rsp
    65001965:	call   0x6501e650
    6500196a:	lea    r11,[rsp+0xf0]
    65001972:	mov    rbx,QWORD PTR [r11+0x40]
    65001976:	mov    rbp,QWORD PTR [r11+0x48]
    6500197a:	mov    rsp,r11
    6500197d:	pop    r14
    6500197f:	pop    r13
    65001981:	pop    r12
    65001983:	pop    rdi
    65001984:	pop    rsi
    65001985:	ret    
    65001986:	int3   
    65001987:	int3   
    65001988:	int3   
    65001989:	int3   
    6500198a:	int3   
    6500198b:	int3   
    6500198c:	int3   
    6500198d:	int3   
    6500198e:	int3   
    6500198f:	int3   
    65001990:	rex push rbp
    65001992:	sub    rsp,0x20
    65001996:	mov    rbp,rdx
    65001999:	mov    eax,DWORD PTR [rbp+0x30]
    6500199c:	and    eax,0x1
    6500199f:	test   eax,eax
    650019a1:	je     0x650019b3
    650019a3:	and    DWORD PTR [rbp+0x30],0xfffffffe
    650019a7:	mov    rcx,QWORD PTR [rbp+0x88]
    650019ae:	call   0x65001c70
    650019b3:	add    rsp,0x20
    650019b7:	pop    rbp
    650019b8:	ret    
    650019b9:	int3   
    650019ba:	int3   
    650019bb:	int3   
    650019bc:	int3   
    650019bd:	int3   
    650019be:	int3   
    650019bf:	int3   
    650019c0:	rex push rbp
    650019c2:	sub    rsp,0x20
    650019c6:	mov    rbp,rdx
    650019c9:	lea    rcx,[rbp+0x38]
    650019cd:	call   0x65001c70
    650019d2:	add    rsp,0x20
    650019d6:	pop    rbp
    650019d7:	ret    
    650019d8:	int3   
    650019d9:	int3   
    650019da:	int3   
    650019db:	int3   
    650019dc:	int3   
    650019dd:	int3   
    650019de:	int3   
    650019df:	int3   
    650019e0:	rex push rbp
    650019e2:	sub    rsp,0x20
    650019e6:	mov    rbp,rdx
    650019e9:	lea    rcx,[rbp+0x28]
    650019ed:	call   0x65001cb0
    650019f2:	add    rsp,0x20
    650019f6:	pop    rbp
    650019f7:	ret    
    650019f8:	int3   
    650019f9:	int3   
    650019fa:	int3   
    650019fb:	int3   
    650019fc:	int3   
    650019fd:	int3   
    650019fe:	int3   
    650019ff:	int3   
    65001a00:	rex push rbp
    65001a02:	sub    rsp,0x20
    65001a06:	mov    rbp,rdx
    65001a09:	lea    rcx,[rbp+0xc0]
    65001a10:	call   0x65001c70
    65001a15:	add    rsp,0x20
    65001a19:	pop    rbp
    65001a1a:	ret    
    65001a1b:	int3   
    65001a1c:	int3   
    65001a1d:	int3   
    65001a1e:	int3   
    65001a1f:	int3   
    65001a20:	rex push rbp
    65001a22:	sub    rsp,0x20
    65001a26:	mov    rbp,rdx
    65001a29:	lea    rcx,[rbp+0x20]
    65001a2d:	call   0x65001cb0
    65001a32:	add    rsp,0x20
    65001a36:	pop    rbp
    65001a37:	ret    
    65001a38:	int3   
    65001a39:	int3   
    65001a3a:	int3   
    65001a3b:	int3   
    65001a3c:	int3   
    65001a3d:	int3   
    65001a3e:	int3   
    65001a3f:	int3   
    65001a40:	rex push rbp
    65001a42:	sub    rsp,0x20
    65001a46:	mov    rbp,rdx
    65001a49:	lea    rcx,[rbp+0x98]
    65001a50:	call   0x65001c70
    65001a55:	add    rsp,0x20
    65001a59:	pop    rbp
    65001a5a:	ret    
    65001a5b:	int3   
    65001a5c:	int3   
    65001a5d:	int3   
    65001a5e:	int3   
    65001a5f:	int3   
    65001a60:	rex push rbp
    65001a62:	sub    rsp,0x20
    65001a66:	mov    rbp,rdx
    65001a69:	lea    rcx,[rbp+0x60]
    65001a6d:	call   0x65001c70
    65001a72:	add    rsp,0x20
    65001a76:	pop    rbp
    65001a77:	ret    
    65001a78:	int3   
    65001a79:	int3   
    65001a7a:	int3   
    65001a7b:	int3   
    65001a7c:	int3   
    65001a7d:	int3   
    65001a7e:	int3   
    65001a7f:	int3   
    65001a80:	mov    rax,rsp
    65001a83:	push   rdi
    65001a84:	push   r12
    65001a86:	push   r13
    65001a88:	sub    rsp,0x70
    65001a8c:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
    65001a95:	mov    QWORD PTR [rax+0x10],rbx
    65001a99:	mov    QWORD PTR [rax+0x18],rbp
    65001a9d:	mov    QWORD PTR [rax+0x20],rsi
    65001aa1:	mov    r12,rcx
    65001aa4:	xor    r13d,r13d
    65001aa7:	mov    DWORD PTR [rsp+0x30],r13d
    65001aac:	lea    ecx,[r13+0x20]
    65001ab0:	call   0x6501dbc0
    65001ab5:	mov    rdi,rax
    65001ab8:	test   rax,rax
    65001abb:	je     0x65001ace
    65001abd:	mov    QWORD PTR [rax],r13
    65001ac0:	mov    QWORD PTR [rax+0x8],r13
    65001ac4:	mov    QWORD PTR [rax+0x10],r13
    65001ac8:	mov    QWORD PTR [rax+0x18],r13
    65001acc:	jmp    0x65001ad1
    65001ace:	mov    rdi,r13
    65001ad1:	mov    QWORD PTR [rsp+0x60],rdi
    65001ad6:	mov    DWORD PTR [rsp+0x40],0x18
    65001ade:	mov    DWORD PTR [rsp+0x50],0x1
    65001ae6:	mov    QWORD PTR [rsp+0x48],r13
    65001aeb:	mov    QWORD PTR [rsp+0x30],r13
    65001af0:	mov    QWORD PTR [rsp+0x38],r13
    65001af5:	xor    r9d,r9d
    65001af8:	lea    r8,[rsp+0x40]
    65001afd:	lea    rdx,[rsp+0x38]
    65001b02:	lea    rcx,[rsp+0x30]
    65001b07:	call   QWORD PTR [rip+0x325c3]        # 0x650340d0
    65001b0d:	test   eax,eax
    65001b0f:	je     0x65001b67
    65001b11:	mov    rbp,QWORD PTR [rsp+0x30]
    65001b16:	mov    rsi,QWORD PTR [rdi+0x10]
    65001b1a:	test   rsi,rsi
    65001b1d:	je     0x65001b38
    65001b1f:	call   QWORD PTR [rip+0x32543]        # 0x65034068
    65001b25:	mov    ebx,eax
    65001b27:	mov    rcx,rsi
    65001b2a:	call   QWORD PTR [rip+0x32530]        # 0x65034060
    65001b30:	mov    ecx,ebx
    65001b32:	call   QWORD PTR [rip+0x325d8]        # 0x65034110
    65001b38:	mov    QWORD PTR [rdi+0x10],rbp
    65001b3c:	mov    rsi,QWORD PTR [rsp+0x38]
    65001b41:	mov    rbp,QWORD PTR [rdi+0x18]
    65001b45:	test   rbp,rbp
    65001b48:	je     0x65001b63
    65001b4a:	call   QWORD PTR [rip+0x32518]        # 0x65034068
    65001b50:	mov    ebx,eax
    65001b52:	mov    rcx,rbp
    65001b55:	call   QWORD PTR [rip+0x32505]        # 0x65034060
    65001b5b:	mov    ecx,ebx
    65001b5d:	call   QWORD PTR [rip+0x325ad]        # 0x65034110
    65001b63:	mov    QWORD PTR [rdi+0x18],rsi
    65001b67:	xor    r9d,r9d
    65001b6a:	lea    r8,[rsp+0x40]
    65001b6f:	lea    rdx,[rsp+0x38]
    65001b74:	lea    rcx,[rsp+0x30]
    65001b79:	call   QWORD PTR [rip+0x32551]        # 0x650340d0
    65001b7f:	test   eax,eax
    65001b81:	je     0x65001bd7
    65001b83:	mov    rbp,QWORD PTR [rsp+0x30]
    65001b88:	mov    rsi,QWORD PTR [rdi]
    65001b8b:	test   rsi,rsi
    65001b8e:	je     0x65001ba9
    65001b90:	call   QWORD PTR [rip+0x324d2]        # 0x65034068
    65001b96:	mov    ebx,eax
    65001b98:	mov    rcx,rsi
    65001b9b:	call   QWORD PTR [rip+0x324bf]        # 0x65034060
    65001ba1:	mov    ecx,ebx
    65001ba3:	call   QWORD PTR [rip+0x32567]        # 0x65034110
    65001ba9:	mov    QWORD PTR [rdi],rbp
    65001bac:	mov    rbp,QWORD PTR [rsp+0x38]
    65001bb1:	mov    rsi,QWORD PTR [rdi+0x8]
    65001bb5:	test   rsi,rsi
    65001bb8:	je     0x65001bd3
    65001bba:	call   QWORD PTR [rip+0x324a8]        # 0x65034068
    65001bc0:	mov    ebx,eax
    65001bc2:	mov    rcx,rsi
    65001bc5:	call   QWORD PTR [rip+0x32495]        # 0x65034060
    65001bcb:	mov    ecx,ebx
    65001bcd:	call   QWORD PTR [rip+0x3253d]        # 0x65034110
    65001bd3:	mov    QWORD PTR [rdi+0x8],rbp
    65001bd7:	mov    rdx,rdi
    65001bda:	mov    rcx,r12
    65001bdd:	call   0x650012e0
    65001be2:	mov    QWORD PTR [rsp+0x28],r13
    65001be7:	mov    DWORD PTR [rsp+0x20],r13d
    65001bec:	mov    r9,rdi
    65001bef:	lea    r8,[rip+0xfffffffffffff50a]        # 0x65001100
    65001bf6:	xor    edx,edx
    65001bf8:	xor    ecx,ecx
    65001bfa:	call   QWORD PTR [rip+0x324b8]        # 0x650340b8
    65001c00:	mov    rbx,rax
    65001c03:	test   rax,rax
    65001c06:	je     0x65001c27
    65001c08:	call   QWORD PTR [rip+0x3245a]        # 0x65034068
    65001c0e:	mov    edi,eax
    65001c10:	mov    rcx,rbx
    65001c13:	call   QWORD PTR [rip+0x32447]        # 0x65034060
    65001c19:	mov    ecx,edi
    65001c1b:	call   QWORD PTR [rip+0x324ef]        # 0x65034110
    65001c21:	nop
    65001c22:	mov    rax,r12
    65001c25:	jmp    0x65001c2a
    65001c27:	mov    rax,r12
    65001c2a:	lea    r11,[rsp+0x70]
    65001c2f:	mov    rbx,QWORD PTR [r11+0x28]
    65001c33:	mov    rbp,QWORD PTR [r11+0x30]
    65001c37:	mov    rsi,QWORD PTR [r11+0x38]
    65001c3b:	mov    rsp,r11
    65001c3e:	pop    r13
    65001c40:	pop    r12
    65001c42:	pop    rdi
    65001c43:	ret    
    65001c44:	int3   
    65001c45:	int3   
    65001c46:	int3   
    65001c47:	int3   
    65001c48:	int3   
    65001c49:	int3   
    65001c4a:	int3   
    65001c4b:	int3   
    65001c4c:	int3   
    65001c4d:	int3   
    65001c4e:	int3   
    65001c4f:	int3   
    65001c50:	rex push rbp
    65001c52:	sub    rsp,0x20
    65001c56:	mov    rbp,rdx
    65001c59:	lea    rcx,[rbp+0x60]
    65001c5d:	call   0x65001d40
    65001c62:	add    rsp,0x20
    65001c66:	pop    rbp
    65001c67:	ret    
    65001c68:	int3   
    65001c69:	int3   
    65001c6a:	int3   
    65001c6b:	int3   
    65001c6c:	int3   
    65001c6d:	int3   
    65001c6e:	int3   
    65001c6f:	int3   
    65001c70:	rex push rbx
    65001c72:	sub    rsp,0x20
    65001c76:	cmp    QWORD PTR [rcx+0x20],0x10
    65001c7b:	mov    rbx,rcx
    65001c7e:	jb     0x65001c89
    65001c80:	mov    rcx,QWORD PTR [rcx+0x8]
    65001c84:	call   0x6501d300
    65001c89:	mov    QWORD PTR [rbx+0x20],0xf
    65001c91:	mov    QWORD PTR [rbx+0x18],0x0
    65001c99:	mov    BYTE PTR [rbx+0x8],0x0
    65001c9d:	add    rsp,0x20
    65001ca1:	pop    rbx
    65001ca2:	ret    
    65001ca3:	int3   
    65001ca4:	int3   
    65001ca5:	int3   
    65001ca6:	int3   
    65001ca7:	int3   
    65001ca8:	int3   
    65001ca9:	int3   
    65001caa:	int3   
    65001cab:	int3   
    65001cac:	int3   
    65001cad:	int3   
    65001cae:	int3   
    65001caf:	int3   
    65001cb0:	sub    rsp,0x28
    65001cb4:	mov    rdx,QWORD PTR [rcx]
    65001cb7:	sub    rdx,0x18
    65001cbb:	or     eax,0xffffffff
    65001cbe:	lock xadd DWORD PTR [rdx+0x10],eax
    65001cc3:	add    eax,0xffffffff
    65001cc6:	test   eax,eax
    65001cc8:	jg     0x65001cd3
    65001cca:	mov    rcx,QWORD PTR [rdx]
    65001ccd:	mov    rax,QWORD PTR [rcx]
    65001cd0:	call   QWORD PTR [rax+0x8]
    65001cd3:	add    rsp,0x28
    65001cd7:	ret    
    65001cd8:	int3   
    65001cd9:	int3   
    65001cda:	int3   
    65001cdb:	int3   
    65001cdc:	int3   
    65001cdd:	int3   
    65001cde:	int3   
    65001cdf:	int3   
    65001ce0:	mov    QWORD PTR [rsp+0x10],rsi
    65001ce5:	push   rdi
    65001ce6:	sub    rsp,0x20
    65001cea:	mov    rsi,QWORD PTR [rcx]
    65001ced:	mov    rdi,rcx
    65001cf0:	test   rsi,rsi
    65001cf3:	je     0x65001d2a
    65001cf5:	mov    QWORD PTR [rsp+0x30],rbx
    65001cfa:	call   QWORD PTR [rip+0x32368]        # 0x65034068
    65001d00:	mov    rcx,rsi
    65001d03:	mov    ebx,eax
    65001d05:	call   QWORD PTR [rip+0x32355]        # 0x65034060
    65001d0b:	mov    ecx,ebx
    65001d0d:	call   QWORD PTR [rip+0x323fd]        # 0x65034110
    65001d13:	mov    rbx,QWORD PTR [rsp+0x30]
    65001d18:	mov    QWORD PTR [rdi],0x0
    65001d1f:	mov    rsi,QWORD PTR [rsp+0x38]
    65001d24:	add    rsp,0x20
    65001d28:	pop    rdi
    65001d29:	ret    
    65001d2a:	mov    QWORD PTR [rcx],0x0
    65001d31:	mov    rsi,QWORD PTR [rsp+0x38]
    65001d36:	add    rsp,0x20
    65001d3a:	pop    rdi
    65001d3b:	ret    
    65001d3c:	int3   
    65001d3d:	int3   
    65001d3e:	int3   
    65001d3f:	int3   
    65001d40:	rex push rdi
    65001d42:	sub    rsp,0x20
    65001d46:	mov    rdi,QWORD PTR [rcx]
    65001d49:	test   rdi,rdi
    65001d4c:	je     0x65001e10
    65001d52:	mov    QWORD PTR [rsp+0x30],rbx
    65001d57:	mov    QWORD PTR [rsp+0x38],rbp
    65001d5c:	mov    QWORD PTR [rsp+0x40],rsi
    65001d61:	mov    rsi,QWORD PTR [rdi+0x18]
    65001d65:	test   rsi,rsi
    65001d68:	je     0x65001d83
    65001d6a:	call   QWORD PTR [rip+0x322f8]        # 0x65034068
    65001d70:	mov    rcx,rsi
    65001d73:	mov    ebx,eax
    65001d75:	call   QWORD PTR [rip+0x322e5]        # 0x65034060
    65001d7b:	mov    ecx,ebx
    65001d7d:	call   QWORD PTR [rip+0x3238d]        # 0x65034110
    65001d83:	xor    ebp,ebp
    65001d85:	mov    QWORD PTR [rdi+0x18],rbp
    65001d89:	mov    rsi,QWORD PTR [rdi+0x10]
    65001d8d:	test   rsi,rsi
    65001d90:	je     0x65001dab
    65001d92:	call   QWORD PTR [rip+0x322d0]        # 0x65034068
    65001d98:	mov    rcx,rsi
    65001d9b:	mov    ebx,eax
    65001d9d:	call   QWORD PTR [rip+0x322bd]        # 0x65034060
    65001da3:	mov    ecx,ebx
    65001da5:	call   QWORD PTR [rip+0x32365]        # 0x65034110
    65001dab:	mov    QWORD PTR [rdi+0x10],rbp
    65001daf:	mov    rsi,QWORD PTR [rdi+0x8]
    65001db3:	test   rsi,rsi
    65001db6:	je     0x65001dd1
    65001db8:	call   QWORD PTR [rip+0x322aa]        # 0x65034068
    65001dbe:	mov    rcx,rsi
    65001dc1:	mov    ebx,eax
    65001dc3:	call   QWORD PTR [rip+0x32297]        # 0x65034060
    65001dc9:	mov    ecx,ebx
    65001dcb:	call   QWORD PTR [rip+0x3233f]        # 0x65034110
    65001dd1:	mov    QWORD PTR [rdi+0x8],rbp
    65001dd5:	mov    rsi,QWORD PTR [rdi]
    65001dd8:	test   rsi,rsi
    65001ddb:	je     0x65001df6
    65001ddd:	call   QWORD PTR [rip+0x32285]        # 0x65034068
    65001de3:	mov    rcx,rsi
    65001de6:	mov    ebx,eax
    65001de8:	call   QWORD PTR [rip+0x32272]        # 0x65034060
    65001dee:	mov    ecx,ebx
    65001df0:	call   QWORD PTR [rip+0x3231a]        # 0x65034110
    65001df6:	mov    rcx,rdi
    65001df9:	mov    QWORD PTR [rdi],rbp
    65001dfc:	call   0x6501d300
    65001e01:	mov    rsi,QWORD PTR [rsp+0x40]
    65001e06:	mov    rbp,QWORD PTR [rsp+0x38]
    65001e0b:	mov    rbx,QWORD PTR [rsp+0x30]
    65001e10:	add    rsp,0x20
    65001e14:	pop    rdi
    65001e15:	ret    
    65001e16:	int3   
    65001e17:	int3   
    65001e18:	int3   
    65001e19:	int3   
    65001e1a:	int3   
    65001e1b:	int3   
    65001e1c:	int3   
    65001e1d:	int3   
    65001e1e:	int3   
    65001e1f:	int3   
    65001e20:	mov    QWORD PTR [rsp+0x8],rbx
    65001e25:	mov    QWORD PTR [rsp+0x10],rbp
    65001e2a:	mov    QWORD PTR [rsp+0x18],rsi
    65001e2f:	mov    QWORD PTR [rsp+0x20],rdi
    65001e34:	push   r12
    65001e36:	sub    rsp,0x20
    65001e3a:	cmp    QWORD PTR [rdx+0x18],r8
    65001e3e:	mov    r12,r9
    65001e41:	mov    rbp,r8
    65001e44:	mov    rsi,rdx
    65001e47:	mov    rbx,rcx
    65001e4a:	jae    0x65001e51
    65001e4c:	call   0x6501d220
    65001e51:	mov    rdi,QWORD PTR [rsi+0x18]
    65001e55:	sub    rdi,rbp
    65001e58:	cmp    r12,rdi
    65001e5b:	cmovb  rdi,r12
    65001e5f:	cmp    rbx,rsi
    65001e62:	jne    0x65001f47
    65001e68:	lea    r12,[rdi+rbp*1]
    65001e6c:	or     rsi,0xffffffffffffffff
    65001e70:	cmp    QWORD PTR [rbx+0x18],r12
    65001e74:	jae    0x65001e7b
    65001e76:	call   0x6501d220
    65001e7b:	mov    r9,QWORD PTR [rbx+0x18]
    65001e7f:	sub    r9,r12
    65001e82:	cmp    r9,0xffffffffffffffff
    65001e86:	jae    0x65001e90
    65001e88:	test   r9,r9
    65001e8b:	mov    rsi,r9
    65001e8e:	je     0x65001ee4
    65001e90:	mov    rdx,QWORD PTR [rbx+0x20]
    65001e94:	lea    rdi,[rbx+0x8]
    65001e98:	cmp    rdx,0x10
    65001e9c:	jb     0x65001ea3
    65001e9e:	mov    rcx,QWORD PTR [rdi]
    65001ea1:	jmp    0x65001ea6
    65001ea3:	mov    rcx,rdi
    65001ea6:	cmp    rdx,0x10
    65001eaa:	jb     0x65001eb1
    65001eac:	mov    rax,QWORD PTR [rdi]
    65001eaf:	jmp    0x65001eb4
    65001eb1:	mov    rax,rdi
    65001eb4:	lea    r8,[rcx+r12*1]
    65001eb8:	lea    rcx,[rax+r12*1]
    65001ebc:	sub    r9,rsi
    65001ebf:	add    r8,rsi
    65001ec2:	sub    rdx,r12
    65001ec5:	call   0x6501d880
    65001eca:	mov    r11,QWORD PTR [rbx+0x18]
    65001ece:	sub    r11,rsi
    65001ed1:	cmp    QWORD PTR [rbx+0x20],0x10
    65001ed6:	mov    QWORD PTR [rbx+0x18],r11
    65001eda:	jb     0x65001edf
    65001edc:	mov    rdi,QWORD PTR [rdi]
    65001edf:	mov    BYTE PTR [rdi+r11*1],0x0
    65001ee4:	mov    r9,QWORD PTR [rbx+0x18]
    65001ee8:	cmp    r9,rbp
    65001eeb:	cmovb  rbp,r9
    65001eef:	test   rbp,rbp
    65001ef2:	je     0x65001fd5
    65001ef8:	mov    rdx,QWORD PTR [rbx+0x20]
    65001efc:	lea    rdi,[rbx+0x8]
    65001f00:	cmp    rdx,0x10
    65001f04:	jb     0x65001f0b
    65001f06:	mov    rax,QWORD PTR [rdi]
    65001f09:	jmp    0x65001f0e
    65001f0b:	mov    rax,rdi
    65001f0e:	cmp    rdx,0x10
    65001f12:	jb     0x65001f19
    65001f14:	mov    rcx,QWORD PTR [rdi]
    65001f17:	jmp    0x65001f1c
    65001f19:	mov    rcx,rdi
    65001f1c:	lea    r8,[rax+rbp*1]
    65001f20:	sub    r9,rbp
    65001f23:	call   0x6501d880
    65001f28:	mov    r11,QWORD PTR [rbx+0x18]
    65001f2c:	sub    r11,rbp
    65001f2f:	cmp    QWORD PTR [rbx+0x20],0x10
    65001f34:	mov    QWORD PTR [rbx+0x18],r11
    65001f38:	jb     0x65001f3d
    65001f3a:	mov    rdi,QWORD PTR [rdi]
    65001f3d:	mov    BYTE PTR [rdi+r11*1],0x0
    65001f42:	jmp    0x65001fd5
    65001f47:	cmp    rdi,0xfffffffffffffffe
    65001f4b:	jbe    0x65001f52
    65001f4d:	call   0x6501d150
    65001f52:	mov    rax,QWORD PTR [rbx+0x20]
    65001f56:	cmp    rax,rdi
    65001f59:	jae    0x65001f7c
    65001f5b:	mov    r8,QWORD PTR [rbx+0x18]
    65001f5f:	mov    rdx,rdi
    65001f62:	mov    rcx,rbx
    65001f65:	call   0x65002330
    65001f6a:	test   rdi,rdi
    65001f6d:	je     0x65001fd5
    65001f6f:	cmp    QWORD PTR [rsi+0x20],0x10
    65001f74:	jb     0x65001f9d
    65001f76:	mov    rax,QWORD PTR [rsi+0x8]
    65001f7a:	jmp    0x65001fa1
    65001f7c:	test   rdi,rdi
    65001f7f:	jne    0x65001f6f
    65001f81:	cmp    rax,0x10
    65001f85:	mov    QWORD PTR [rbx+0x18],rdi
    65001f89:	jb     0x65001f94
    65001f8b:	mov    rax,QWORD PTR [rbx+0x8]
    65001f8f:	mov    BYTE PTR [rax],dil
    65001f92:	jmp    0x65001fd5
    65001f94:	lea    rax,[rbx+0x8]
    65001f98:	mov    BYTE PTR [rax],0x0
    65001f9b:	jmp    0x65001fd5
    65001f9d:	lea    rax,[rsi+0x8]
    65001fa1:	mov    rdx,QWORD PTR [rbx+0x20]
    65001fa5:	lea    rsi,[rbx+0x8]
    65001fa9:	cmp    rdx,0x10
    65001fad:	jb     0x65001fb4
    65001faf:	mov    rcx,QWORD PTR [rsi]
    65001fb2:	jmp    0x65001fb7
    65001fb4:	mov    rcx,rsi
    65001fb7:	lea    r8,[rax+rbp*1]
    65001fbb:	mov    r9,rdi
    65001fbe:	call   0x6501d7b0
    65001fc3:	cmp    QWORD PTR [rbx+0x20],0x10
    65001fc8:	mov    QWORD PTR [rbx+0x18],rdi
    65001fcc:	jb     0x65001fd1
    65001fce:	mov    rsi,QWORD PTR [rsi]
    65001fd1:	mov    BYTE PTR [rsi+rdi*1],0x0
    65001fd5:	mov    rbp,QWORD PTR [rsp+0x38]
    65001fda:	mov    rsi,QWORD PTR [rsp+0x40]
    65001fdf:	mov    rdi,QWORD PTR [rsp+0x48]
    65001fe4:	mov    rax,rbx
    65001fe7:	mov    rbx,QWORD PTR [rsp+0x30]
    65001fec:	add    rsp,0x20
    65001ff0:	pop    r12
    65001ff2:	ret    
    65001ff3:	int3   
    65001ff4:	int3   
    65001ff5:	int3   
    65001ff6:	int3   
    65001ff7:	int3   
    65001ff8:	int3   
    65001ff9:	int3   
    65001ffa:	int3   
    65001ffb:	int3   
    65001ffc:	int3   
    65001ffd:	int3   
    65001ffe:	int3   
    65001fff:	int3   
    65002000:	mov    QWORD PTR [rsp+0x8],rbx
    65002005:	mov    QWORD PTR [rsp+0x10],rbp
    6500200a:	mov    QWORD PTR [rsp+0x18],rsi
    6500200f:	push   rdi
    65002010:	sub    rsp,0x20
    65002014:	mov    rsi,r8
    65002017:	mov    r8,QWORD PTR [rcx+0x20]
    6500201b:	mov    rbp,rdx
    6500201e:	cmp    r8,0x10
    65002022:	mov    rdi,rcx
    65002025:	lea    rbx,[rcx+0x8]
    65002029:	jb     0x65002030
    6500202b:	mov    rax,QWORD PTR [rbx]
    6500202e:	jmp    0x65002033
    65002030:	mov    rax,rbx
    65002033:	cmp    rdx,rax
    65002036:	jb     0x6500206e
    65002038:	cmp    r8,0x10
    6500203c:	jb     0x65002043
    6500203e:	mov    rcx,QWORD PTR [rbx]
    65002041:	jmp    0x65002046
    65002043:	mov    rcx,rbx
    65002046:	add    rcx,QWORD PTR [rdi+0x18]
    6500204a:	cmp    rcx,rdx
    6500204d:	jbe    0x6500206e
    6500204f:	cmp    r8,0x10
    65002053:	jb     0x65002058
    65002055:	mov    rbx,QWORD PTR [rbx]
    65002058:	sub    rbp,rbx
    6500205b:	mov    r9,rsi
    6500205e:	mov    rdx,rdi
    65002061:	mov    r8,rbp
    65002064:	mov    rcx,rdi
    65002067:	call   0x65001e20
    6500206c:	jmp    0x650020df
    6500206e:	cmp    rsi,0xfffffffffffffffe
    65002072:	jbe    0x65002079
    65002074:	call   0x6501d150
    65002079:	mov    rax,QWORD PTR [rdi+0x20]
    6500207d:	cmp    rax,rsi
    65002080:	jae    0x650020a5
    65002082:	mov    r8,QWORD PTR [rdi+0x18]
    65002086:	mov    rdx,rsi
    65002089:	mov    rcx,rdi
    6500208c:	call   0x65002330
    65002091:	test   rsi,rsi
    65002094:	je     0x650020dc
    65002096:	mov    rdx,QWORD PTR [rdi+0x20]
    6500209a:	cmp    rdx,0x10
    6500209e:	jb     0x650020bc
    650020a0:	mov    rcx,QWORD PTR [rbx]
    650020a3:	jmp    0x650020bf
    650020a5:	test   rsi,rsi
    650020a8:	jne    0x65002096
    650020aa:	cmp    rax,0x10
    650020ae:	mov    QWORD PTR [rdi+0x18],rsi
    650020b2:	jb     0x650020b7
    650020b4:	mov    rbx,QWORD PTR [rbx]
    650020b7:	mov    BYTE PTR [rbx],0x0
    650020ba:	jmp    0x650020dc
    650020bc:	mov    rcx,rbx
    650020bf:	mov    r9,rsi
    650020c2:	mov    r8,rbp
    650020c5:	call   0x6501d7b0
    650020ca:	cmp    QWORD PTR [rdi+0x20],0x10
    650020cf:	mov    QWORD PTR [rdi+0x18],rsi
    650020d3:	jb     0x650020d8
    650020d5:	mov    rbx,QWORD PTR [rbx]
    650020d8:	mov    BYTE PTR [rbx+rsi*1],0x0
    650020dc:	mov    rax,rdi
    650020df:	mov    rbx,QWORD PTR [rsp+0x30]
    650020e4:	mov    rbp,QWORD PTR [rsp+0x38]
    650020e9:	mov    rsi,QWORD PTR [rsp+0x40]
    650020ee:	add    rsp,0x20
    650020f2:	pop    rdi
    650020f3:	ret    
    650020f4:	int3   
    650020f5:	int3   
    650020f6:	int3   
    650020f7:	int3   
    650020f8:	int3   
    650020f9:	int3   
    650020fa:	int3   
    650020fb:	int3   
    650020fc:	int3   
    650020fd:	int3   
    650020fe:	int3   
    650020ff:	int3   
    65002100:	sub    rsp,0x28
    65002104:	mov    rdx,QWORD PTR [rcx]
    65002107:	sub    rdx,0x18
    6500210b:	or     eax,0xffffffff
    6500210e:	lock xadd DWORD PTR [rdx+0x10],eax
    65002113:	add    eax,0xffffffff
    65002116:	test   eax,eax
    65002118:	jg     0x65002123
    6500211a:	mov    rcx,QWORD PTR [rdx]
    6500211d:	mov    rax,QWORD PTR [rcx]
    65002120:	call   QWORD PTR [rax+0x8]
    65002123:	add    rsp,0x28
    65002127:	ret    
    65002128:	int3   
    65002129:	int3   
    6500212a:	int3   
    6500212b:	int3   
    6500212c:	int3   
    6500212d:	int3   
    6500212e:	int3   
    6500212f:	int3   
    65002130:	mov    QWORD PTR [rsp+0x8],rbx
    65002135:	mov    QWORD PTR [rsp+0x10],rbp
    6500213a:	mov    QWORD PTR [rsp+0x18],rsi
    6500213f:	mov    QWORD PTR [rsp+0x20],rdi
    65002144:	push   r12
    65002146:	sub    rsp,0x20
    6500214a:	mov    rbx,QWORD PTR [rcx]
    6500214d:	mov    rsi,rcx
    65002150:	mov    edi,edx
    65002152:	mov    rcx,QWORD PTR [rbx-0x18]
    65002156:	mov    ebp,DWORD PTR [rbx-0x10]
    65002159:	mov    rax,QWORD PTR [rcx]
    6500215c:	call   QWORD PTR [rax+0x20]
    6500215f:	mov    r8d,0x2
    65002165:	mov    edx,edi
    65002167:	mov    r9,QWORD PTR [rax]
    6500216a:	mov    rcx,rax
    6500216d:	call   QWORD PTR [r9]
    65002170:	test   rax,rax
    65002173:	mov    r12,rax
    65002176:	jne    0x6500217e
    65002178:	call   0x65002320
    6500217d:	int3   
    6500217e:	cmp    ebp,edi
    65002180:	mov    r8,rbx
    65002183:	cmovl  edi,ebp
    65002186:	add    edi,0x1
    65002189:	movsxd rdx,edi
    6500218c:	lea    rdi,[rax+0x18]
    65002190:	add    rdx,rdx
    65002193:	mov    rcx,rdi
    65002196:	mov    r9,rdx
    65002199:	call   0x6501d7b0
    6500219e:	mov    DWORD PTR [r12+0x8],ebp
    650021a3:	or     eax,0xffffffff
    650021a6:	lock xadd DWORD PTR [rbx-0x8],eax
    650021ab:	add    eax,0xffffffff
    650021ae:	test   eax,eax
    650021b0:	jg     0x650021c0
    650021b2:	mov    rcx,QWORD PTR [rbx-0x18]
    650021b6:	lea    rdx,[rbx-0x18]
    650021ba:	mov    rax,QWORD PTR [rcx]
    650021bd:	call   QWORD PTR [rax+0x8]
    650021c0:	mov    rbx,QWORD PTR [rsp+0x30]
    650021c5:	mov    rbp,QWORD PTR [rsp+0x38]
    650021ca:	mov    QWORD PTR [rsi],rdi
    650021cd:	mov    rsi,QWORD PTR [rsp+0x40]
    650021d2:	mov    rdi,QWORD PTR [rsp+0x48]
    650021d7:	add    rsp,0x20
    650021db:	pop    r12
    650021dd:	ret    
    650021de:	int3   
    650021df:	int3   
    650021e0:	mov    QWORD PTR [rsp+0x10],rbx
    650021e5:	mov    QWORD PTR [rsp+0x18],rbp
    650021ea:	mov    QWORD PTR [rsp+0x20],rdi
    650021ef:	push   r12
    650021f1:	sub    rsp,0x20
    650021f5:	cmp    QWORD PTR [rdx+0x18],r8
    650021f9:	mov    rbp,r9
    650021fc:	mov    r12,r8
    650021ff:	mov    rdi,rdx
    65002202:	mov    rbx,rcx
    65002205:	jae    0x6500220c
    65002207:	call   0x6501d220
    6500220c:	mov    rax,QWORD PTR [rdi+0x18]
    65002210:	mov    rcx,QWORD PTR [rbx+0x18]
    65002214:	sub    rax,r12
    65002217:	cmp    rax,rbp
    6500221a:	cmovb  rbp,rax
    6500221e:	or     rax,0xffffffffffffffff
    65002222:	sub    rax,rcx
    65002225:	cmp    rax,rbp
    65002228:	jbe    0x65002233
    6500222a:	lea    rax,[rcx+rbp*1]
    6500222e:	cmp    rax,rcx
    65002231:	jae    0x65002238
    65002233:	call   0x6501d150
    65002238:	test   rbp,rbp
    6500223b:	je     0x6500230d
    65002241:	mov    QWORD PTR [rsp+0x30],rsi
    65002246:	mov    rsi,QWORD PTR [rbx+0x18]
    6500224a:	add    rsi,rbp
    6500224d:	cmp    rsi,0xfffffffffffffffe
    65002251:	jbe    0x65002258
    65002253:	call   0x6501d150
    65002258:	mov    rax,QWORD PTR [rbx+0x20]
    6500225c:	cmp    rax,rsi
    6500225f:	jae    0x65002286
    65002261:	mov    r8,QWORD PTR [rbx+0x18]
    65002265:	mov    rdx,rsi
    65002268:	mov    rcx,rbx
    6500226b:	call   0x65002330
    65002270:	test   rsi,rsi
    65002273:	je     0x65002308
    65002279:	cmp    QWORD PTR [rdi+0x20],0x10
    6500227e:	jb     0x650022c0
    65002280:	mov    rcx,QWORD PTR [rdi+0x8]
    65002284:	jmp    0x650022c4
    65002286:	test   rsi,rsi
    65002289:	jne    0x65002270
    6500228b:	cmp    rax,0x10
    6500228f:	mov    QWORD PTR [rbx+0x18],rsi
    65002293:	jb     0x6500229b
    65002295:	mov    rax,QWORD PTR [rbx+0x8]
    65002299:	jmp    0x6500229f
    6500229b:	lea    rax,[rbx+0x8]
    6500229f:	mov    BYTE PTR [rax],0x0
    650022a2:	mov    rax,rbx
    650022a5:	mov    rsi,QWORD PTR [rsp+0x30]
    650022aa:	mov    rbx,QWORD PTR [rsp+0x38]
    650022af:	mov    rbp,QWORD PTR [rsp+0x40]
    650022b4:	mov    rdi,QWORD PTR [rsp+0x48]
    650022b9:	add    rsp,0x20
    650022bd:	pop    r12
    650022bf:	ret    
    650022c0:	lea    rcx,[rdi+0x8]
    650022c4:	mov    rdx,QWORD PTR [rbx+0x20]
    650022c8:	cmp    rdx,0x10
    650022cc:	jb     0x650022d8
    650022ce:	mov    r9,QWORD PTR [rbx+0x8]
    650022d2:	lea    rdi,[rbx+0x8]
    650022d6:	jmp    0x650022df
    650022d8:	lea    rdi,[rbx+0x8]
    650022dc:	mov    r9,rdi
    650022df:	mov    rax,QWORD PTR [rbx+0x18]
    650022e3:	lea    r8,[rcx+r12*1]
    650022e7:	lea    rcx,[rax+r9*1]
    650022eb:	sub    rdx,rax
    650022ee:	mov    r9,rbp
    650022f1:	call   0x6501d7b0
    650022f6:	cmp    QWORD PTR [rbx+0x20],0x10
    650022fb:	mov    QWORD PTR [rbx+0x18],rsi
    650022ff:	jb     0x65002304
    65002301:	mov    rdi,QWORD PTR [rdi]
    65002304:	mov    BYTE PTR [rdi+rsi*1],0x0
    65002308:	mov    rax,rbx
    6500230b:	jmp    0x650022a5
    6500230d:	mov    rax,rbx
    65002310:	jmp    0x650022aa
    65002312:	int3   
    65002313:	int3   
    65002314:	int3   
    65002315:	int3   
    65002316:	int3   
    65002317:	int3   
    65002318:	int3   
    65002319:	int3   
    6500231a:	int3   
    6500231b:	int3   
    6500231c:	int3   
    6500231d:	int3   
    6500231e:	int3   
    6500231f:	int3   
    65002320:	sub    rsp,0x28
    65002324:	mov    ecx,0x8007000e
    65002329:	call   0x65001050
    6500232e:	int3   
    6500232f:	int3   
    65002330:	mov    QWORD PTR [rsp+0x18],r8
    65002335:	mov    QWORD PTR [rsp+0x10],rdx
    6500233a:	mov    QWORD PTR [rsp+0x8],rcx
    6500233f:	push   rbx
    65002340:	push   rsi
    65002341:	push   rdi
    65002342:	push   r12
    65002344:	sub    rsp,0x58
    65002348:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    65002351:	mov    rsi,r8
    65002354:	mov    rbx,rcx
    65002357:	mov    rdi,rdx
    6500235a:	or     rdi,0xf
    6500235e:	cmp    rdi,0xfffffffffffffffe
    65002362:	jbe    0x65002369
    65002364:	mov    rdi,rdx
    65002367:	jmp    0x6500239b
    65002369:	mov    r8,QWORD PTR [rcx+0x20]
    6500236d:	mov    rcx,r8
    65002370:	shr    rcx,1
    65002373:	movabs rax,0xaaaaaaaaaaaaaaab
    6500237d:	mul    rdi
    65002380:	shr    rdx,1
    65002383:	cmp    rdx,rcx
    65002386:	jae    0x6500239b
    65002388:	mov    rax,0xfffffffffffffffe
    6500238f:	sub    rax,rcx
    65002392:	cmp    r8,rax
    65002395:	ja     0x6500239b
    65002397:	lea    rdi,[rcx+r8*1]
    6500239b:	lea    rcx,[rdi+0x1]
    6500239f:	test   rcx,rcx
    650023a2:	je     0x650023ec
    650023a4:	xor    edx,edx
    650023a6:	or     rax,0xffffffffffffffff
    650023aa:	div    rcx
    650023ad:	cmp    rax,0x1
    650023b1:	jae    0x650023ec
    650023b3:	xor    ecx,ecx
    650023b5:	mov    QWORD PTR [rsp+0x98],rcx
    650023bd:	lea    rdx,[rsp+0x98]
    650023c5:	lea    rcx,[rsp+0x30]
    650023ca:	call   0x6501d330
    650023cf:	lea    rax,[rip+0x32de2]        # 0x650351b8
    650023d6:	mov    QWORD PTR [rsp+0x30],rax
    650023db:	lea    rdx,[rip+0x3f03e]        # 0x65041420
    650023e2:	lea    rcx,[rsp+0x30]
    650023e7:	call   0x6501dc60
    650023ec:	call   0x6501dbc0
    650023f1:	mov    r12,rax
    650023f4:	jmp    0x65002413
    650023f6:	mov    rbx,QWORD PTR [rsp+0x80]
    650023fe:	mov    rsi,QWORD PTR [rsp+0x90]
    65002406:	mov    rdi,QWORD PTR [rsp+0x88]
    6500240e:	mov    r12,QWORD PTR [rsp+0x20]
    65002413:	test   rsi,rsi
    65002416:	je     0x65002438
    65002418:	cmp    QWORD PTR [rbx+0x20],0x10
    6500241d:	jb     0x65002425
    6500241f:	mov    r8,QWORD PTR [rbx+0x8]
    65002423:	jmp    0x65002429
    65002425:	lea    r8,[rbx+0x8]
    65002429:	lea    rdx,[rdi+0x1]
    6500242d:	mov    r9,rsi
    65002430:	mov    rcx,r12
    65002433:	call   0x6501d7b0
    65002438:	cmp    QWORD PTR [rbx+0x20],0x10
    6500243d:	jb     0x65002448
    6500243f:	mov    rcx,QWORD PTR [rbx+0x8]
    65002443:	call   0x6501d300
    65002448:	lea    rax,[rbx+0x8]
    6500244c:	mov    BYTE PTR [rax],0x0
    6500244f:	mov    QWORD PTR [rax],r12
    65002452:	mov    QWORD PTR [rbx+0x20],rdi
    65002456:	mov    QWORD PTR [rbx+0x18],rsi
    6500245a:	cmp    rdi,0x10
    6500245e:	cmovae rax,r12
    65002462:	mov    BYTE PTR [rax+rsi*1],0x0
    65002466:	add    rsp,0x58
    6500246a:	pop    r12
    6500246c:	pop    rdi
    6500246d:	pop    rsi
    6500246e:	pop    rbx
    6500246f:	ret    
    65002470:	mov    QWORD PTR [rsp+0x10],rdx
    65002475:	push   rbp
    65002476:	sub    rsp,0x20
    6500247a:	mov    rbp,rdx
    6500247d:	mov    rdx,QWORD PTR [rbp+0x88]
    65002484:	mov    QWORD PTR [rbp+0x88],rdx
    6500248b:	add    rdx,0x1
    6500248f:	mov    rcx,QWORD PTR [rbp+0x80]
    65002496:	call   0x65002500
    6500249b:	mov    QWORD PTR [rbp+0x20],rax
    6500249f:	lea    rax,[rip+0xffffffffffffff50]        # 0x650023f6
    650024a6:	add    rsp,0x20
    650024aa:	pop    rbp
    650024ab:	ret    
    650024ac:	int3   
    650024ad:	int3   
    650024ae:	int3   
    650024af:	int3   
    650024b0:	mov    QWORD PTR [rsp+0x10],rdx
    650024b5:	push   rbx
    650024b6:	push   rbp
    650024b7:	sub    rsp,0x28
    650024bb:	mov    rbp,rdx
    650024be:	mov    rbx,QWORD PTR [rbp+0x80]
    650024c5:	cmp    QWORD PTR [rbx+0x20],0x10
    650024ca:	jb     0x650024d5
    650024cc:	mov    rcx,QWORD PTR [rbx+0x8]
    650024d0:	call   0x6501d300
    650024d5:	mov    QWORD PTR [rbx+0x20],0xf
    650024dd:	xor    ecx,ecx
    650024df:	mov    QWORD PTR [rbx+0x18],rcx
    650024e3:	mov    BYTE PTR [rbx+0x8],cl
    650024e6:	xor    edx,edx
    650024e8:	call   0x6501dc60
    650024ed:	nop
    650024ee:	add    rsp,0x28
    650024f2:	pop    rbp
    650024f3:	pop    rbx
    650024f4:	ret    
    650024f5:	int3   
    650024f6:	int3   
    650024f7:	int3   
    650024f8:	int3   
    650024f9:	int3   
    650024fa:	int3   
    650024fb:	int3   
    650024fc:	int3   
    650024fd:	int3   
    650024fe:	int3   
    650024ff:	int3   
    65002500:	sub    rsp,0x48
    65002504:	test   rdx,rdx
    65002507:	mov    r8,rdx
    6500250a:	jne    0x65002519
    6500250c:	mov    rcx,r8
    6500250f:	call   0x6501dbc0
    65002514:	add    rsp,0x48
    65002518:	ret    
    65002519:	xor    edx,edx
    6500251b:	or     rax,0xffffffffffffffff
    6500251f:	div    r8
    65002522:	cmp    rax,0x1
    65002526:	jae    0x6500250c
    65002528:	xor    r8d,r8d
    6500252b:	lea    rdx,[rsp+0x58]
    65002530:	lea    rcx,[rsp+0x20]
    65002535:	mov    QWORD PTR [rsp+0x58],r8
    6500253a:	call   0x6501d330
    6500253f:	lea    r11,[rip+0x32c72]        # 0x650351b8
    65002546:	lea    rdx,[rip+0x3eed3]        # 0x65041420
    6500254d:	lea    rcx,[rsp+0x20]
    65002552:	mov    QWORD PTR [rsp+0x20],r11
    65002557:	call   0x6501dc60
    6500255c:	int3   
    6500255d:	int3   
    6500255e:	int3   
    6500255f:	int3   
    65002560:	mov    QWORD PTR [rsp+0x10],rdx
    65002565:	mov    QWORD PTR [rsp+0x18],r8
    6500256a:	mov    QWORD PTR [rsp+0x20],r9
    6500256f:	push   rbp
    65002570:	push   rsi
    65002571:	push   rdi
    65002572:	sub    rsp,0x30
    65002576:	test   rdx,rdx
    65002579:	mov    rsi,rdx
    6500257c:	mov    rdi,rcx
    6500257f:	lea    rbp,[rsp+0x60]
    65002584:	jne    0x65002591
    65002586:	mov    ecx,0x80070057
    6500258b:	call   0x65001050
    65002590:	int3   
    65002591:	mov    rdx,rbp
    65002594:	mov    rcx,rsi
    65002597:	mov    QWORD PTR [rsp+0x28],rbx
    6500259c:	call   0x6501e880
    650025a1:	mov    rcx,QWORD PTR [rdi]
    650025a4:	mov    edx,0x1
    650025a9:	sub    edx,DWORD PTR [rcx-0x8]
    650025ac:	mov    ecx,DWORD PTR [rcx-0xc]
    650025af:	movsxd rbx,eax
    650025b2:	sub    ecx,ebx
    650025b4:	or     edx,ecx
    650025b6:	jge    0x650025c2
    650025b8:	mov    edx,ebx
    650025ba:	mov    rcx,rdi
    650025bd:	call   0x65002640
    650025c2:	mov    rcx,QWORD PTR [rdi]
    650025c5:	lea    eax,[rbx+0x1]
    650025c8:	mov    r9,rbp
    650025cb:	movsxd rdx,eax
    650025ce:	mov    r8,rsi
    650025d1:	call   0x6501ea40
    650025d6:	test   ebx,ebx
    650025d8:	js     0x650025fb
    650025da:	mov    rax,QWORD PTR [rdi]
    650025dd:	cmp    ebx,DWORD PTR [rax-0xc]
    650025e0:	jg     0x650025fb
    650025e2:	mov    DWORD PTR [rax-0x10],ebx
    650025e5:	mov    rax,QWORD PTR [rdi]
    650025e8:	mov    WORD PTR [rax+rbx*2],0x0
    650025ee:	mov    rbx,QWORD PTR [rsp+0x28]
    650025f3:	add    rsp,0x30
    650025f7:	pop    rdi
    650025f8:	pop    rsi
    650025f9:	pop    rbp
    650025fa:	ret    
    650025fb:	mov    ecx,0x80070057
    65002600:	call   0x65001050
    65002605:	int3   
    65002606:	int3   
    65002607:	int3   
    65002608:	int3   
    65002609:	int3   
    6500260a:	int3   
    6500260b:	int3   
    6500260c:	int3   
    6500260d:	int3   
    6500260e:	int3   
    6500260f:	int3   
    65002610:	rex push rbx
    65002612:	sub    rsp,0x20
    65002616:	mov    rbx,rcx
    65002619:	call   0x6501d3e0
    6500261e:	lea    r11,[rip+0x32b93]        # 0x650351b8
    65002625:	mov    QWORD PTR [rbx],r11
    65002628:	mov    rax,rbx
    6500262b:	add    rsp,0x20
    6500262f:	pop    rbx
    65002630:	ret    
    65002631:	int3   
    65002632:	int3   
    65002633:	int3   
    65002634:	int3   
    65002635:	int3   
    65002636:	int3   
    65002637:	int3   
    65002638:	int3   
    65002639:	int3   
    6500263a:	int3   
    6500263b:	int3   
    6500263c:	int3   
    6500263d:	int3   
    6500263e:	int3   
    6500263f:	int3   
    65002640:	sub    rsp,0x28
    65002644:	mov    r8d,edx
    65002647:	mov    rdx,QWORD PTR [rcx]
    6500264a:	mov    eax,DWORD PTR [rdx-0x10]
    6500264d:	cmp    eax,r8d
    65002650:	cmovg  r8d,eax
    65002654:	cmp    DWORD PTR [rdx-0x8],0x1
    65002658:	jle    0x65002666
    6500265a:	mov    edx,r8d
    6500265d:	add    rsp,0x28
    65002661:	jmp    0x65002130
    65002666:	mov    edx,DWORD PTR [rdx-0xc]
    65002669:	cmp    edx,r8d
    6500266c:	jge    0x6500269a
    6500266e:	cmp    edx,0x400
    65002674:	jle    0x6500268c
    65002676:	add    edx,0x400
    6500267c:	cmp    edx,r8d
    6500267f:	cmovl  edx,r8d
    65002683:	add    rsp,0x28
    65002687:	jmp    0x650026a0
    6500268c:	add    edx,edx
    6500268e:	cmp    edx,r8d
    65002691:	cmovl  edx,r8d
    65002695:	call   0x650026a0
    6500269a:	add    rsp,0x28
    6500269e:	ret    
    6500269f:	int3   
    650026a0:	rex push rbx
    650026a2:	sub    rsp,0x20
    650026a6:	mov    r8d,edx
    650026a9:	mov    rdx,QWORD PTR [rcx]
    650026ac:	mov    rbx,rcx
    650026af:	mov    rcx,QWORD PTR [rdx-0x18]
    650026b3:	sub    rdx,0x18
    650026b7:	cmp    DWORD PTR [rdx+0xc],r8d
    650026bb:	jge    0x650026e6
    650026bd:	test   r8d,r8d
    650026c0:	jle    0x650026e6
    650026c2:	mov    rax,QWORD PTR [rcx]
    650026c5:	mov    r9d,0x2
    650026cb:	call   QWORD PTR [rax+0x10]
    650026ce:	test   rax,rax
    650026d1:	jne    0x650026d9
    650026d3:	call   0x65002320
    650026d8:	int3   
    650026d9:	add    rax,0x18
    650026dd:	mov    QWORD PTR [rbx],rax
    650026e0:	add    rsp,0x20
    650026e4:	pop    rbx
    650026e5:	ret    
    650026e6:	call   0x65002320
    650026eb:	int3   
    650026ec:	int3   
    650026ed:	int3   
    650026ee:	int3   
    650026ef:	int3   
    650026f0:	mov    QWORD PTR [rsp+0x8],rbx
    650026f5:	mov    QWORD PTR [rsp+0x10],rbp
    650026fa:	mov    QWORD PTR [rsp+0x18],rsi
    650026ff:	mov    QWORD PTR [rsp+0x20],rdi
    65002704:	push   r12
    65002706:	push   r13
    65002708:	push   r14
    6500270a:	sub    rsp,0x20
    6500270e:	mov    r12d,ecx
    65002711:	movzx  r13d,dx
    65002715:	lea    rcx,[rip+0x42434]        # 0x65044b50
    6500271c:	xor    r14d,r14d
    6500271f:	xor    edx,edx
    65002721:	mov    rbx,r14
    65002724:	call   0x6501cdec
    65002729:	lea    ebp,[r14+0x1]
    6500272d:	test   rax,rax
    65002730:	mov    rsi,rax
    65002733:	je     0x65002806
    65002739:	data16 xchg ax,ax
    6500273c:	data16 data16 xchg ax,ax
    65002740:	test   rbx,rbx
    65002743:	jne    0x65002806
    65002749:	mov    eax,r12d
    6500274c:	lea    edx,[rbx+0x6]
    6500274f:	movzx  r9d,r13w
    65002753:	shr    eax,0x4
    65002756:	mov    rcx,rsi
    65002759:	add    ax,0x1
    6500275d:	movzx  r8d,ax
    65002761:	call   QWORD PTR [rip+0x318f1]        # 0x65034058
    65002767:	test   rax,rax
    6500276a:	mov    rdi,rax
    6500276d:	jne    0x65002774
    6500276f:	mov    rbx,r14
    65002772:	jmp    0x650027e9
    65002774:	mov    rdx,rax
    65002777:	mov    rcx,rsi
    6500277a:	call   QWORD PTR [rip+0x318c8]        # 0x65034048
    65002780:	test   rax,rax
    65002783:	jne    0x6500278a
    65002785:	mov    rbx,r14
    65002788:	jmp    0x650027e4
    6500278a:	mov    rcx,rax
    6500278d:	call   QWORD PTR [rip+0x318ad]        # 0x65034040
    65002793:	test   rax,rax
    65002796:	mov    rbx,rax
    65002799:	jne    0x650027a0
    6500279b:	mov    rbx,r14
    6500279e:	jmp    0x650027e4
    650027a0:	mov    rdx,rdi
    650027a3:	mov    rcx,rsi
    650027a6:	call   QWORD PTR [rip+0x3188c]        # 0x65034038
    650027ac:	mov    ecx,r12d
    650027af:	mov    r11d,eax
    650027b2:	add    r11,rbx
    650027b5:	and    ecx,0xf
    650027b8:	jbe    0x650027d2
    650027ba:	data16 xchg ax,ax
    650027bd:	data16 xchg ax,ax
    650027c0:	cmp    rbx,r11
    650027c3:	jae    0x650027d7
    650027c5:	add    ecx,0xffffffff
    650027c8:	movzx  eax,WORD PTR [rbx]
    650027cb:	lea    rbx,[rbx+rax*2+0x2]
    650027d0:	jne    0x650027c0
    650027d2:	cmp    rbx,r11
    650027d5:	jb     0x650027dc
    650027d7:	mov    rbx,r14
    650027da:	jmp    0x650027e4
    650027dc:	cmp    WORD PTR [rbx],r14w
    650027e0:	cmove  rbx,r14
    650027e4:	test   rbx,rbx
    650027e7:	jne    0x65002827
    650027e9:	lea    rcx,[rip+0x42360]        # 0x65044b50
    650027f0:	mov    edx,ebp
    650027f2:	call   0x6501cdec
    650027f7:	add    ebp,0x1
    650027fa:	test   rax,rax
    650027fd:	mov    rsi,rax
    65002800:	jne    0x65002740
    65002806:	xor    eax,eax
    65002808:	mov    rbx,QWORD PTR [rsp+0x40]
    6500280d:	mov    rbp,QWORD PTR [rsp+0x48]
    65002812:	mov    rsi,QWORD PTR [rsp+0x50]
    65002817:	mov    rdi,QWORD PTR [rsp+0x58]
    6500281c:	add    rsp,0x20
    65002820:	pop    r14
    65002822:	pop    r13
    65002824:	pop    r12
    65002826:	ret    
    65002827:	mov    rax,rsi
    6500282a:	jmp    0x65002808
    6500282c:	int3   
    6500282d:	int3   
    6500282e:	int3   
    6500282f:	int3   
    65002830:	rex push rbx
    65002832:	sub    rsp,0x20
    65002836:	lea    rax,[rip+0x3482b]        # 0x65037068
    6500283d:	mov    rbx,rcx
    65002840:	mov    QWORD PTR [rcx],rax
    65002843:	cmp    QWORD PTR [rcx+0x38],0x10
    65002848:	jb     0x65002853
    6500284a:	mov    rcx,QWORD PTR [rcx+0x20]
    6500284e:	call   0x6501d300
    65002853:	mov    QWORD PTR [rbx+0x38],0xf
    6500285b:	mov    QWORD PTR [rbx+0x30],0x0
    65002863:	mov    rcx,rbx
    65002866:	mov    BYTE PTR [rbx+0x20],0x0
    6500286a:	add    rsp,0x20
    6500286e:	pop    rbx
    6500286f:	jmp    0x6501d490
    65002874:	int3   
    65002875:	int3   
    65002876:	int3   
    65002877:	int3   
    65002878:	int3   
    65002879:	int3   
    6500287a:	int3   
    6500287b:	int3   
    6500287c:	int3   
    6500287d:	int3   
    6500287e:	int3   
    6500287f:	int3   
    65002880:	cmp    QWORD PTR [rcx+0x38],0x10
    65002885:	jb     0x6500288c
    65002887:	mov    rax,QWORD PTR [rcx+0x20]
    6500288b:	ret    
    6500288c:	lea    rax,[rcx+0x20]
    65002890:	ret    
    65002891:	int3   
    65002892:	int3   
    65002893:	int3   
    65002894:	int3   
    65002895:	int3   
    65002896:	int3   
    65002897:	int3   
    65002898:	int3   
    65002899:	int3   
    6500289a:	int3   
    6500289b:	int3   
    6500289c:	int3   
    6500289d:	int3   
    6500289e:	int3   
    6500289f:	int3   
    650028a0:	mov    QWORD PTR [rsp+0x8],rbx
    650028a5:	push   rdi
    650028a6:	sub    rsp,0x20
    650028aa:	lea    rax,[rip+0x347b7]        # 0x65037068
    650028b1:	mov    edi,edx
    650028b3:	mov    rbx,rcx
    650028b6:	mov    QWORD PTR [rcx],rax
    650028b9:	cmp    QWORD PTR [rcx+0x38],0x10
    650028be:	jb     0x650028c9
    650028c0:	mov    rcx,QWORD PTR [rcx+0x20]
    650028c4:	call   0x6501d300
    650028c9:	mov    QWORD PTR [rbx+0x38],0xf
    650028d1:	mov    QWORD PTR [rbx+0x30],0x0
    650028d9:	mov    rcx,rbx
    650028dc:	mov    BYTE PTR [rbx+0x20],0x0
    650028e0:	call   0x6501d490
    650028e5:	test   dil,0x1
    650028e9:	je     0x650028f3
    650028eb:	mov    rcx,rbx
    650028ee:	call   0x6501d300
    650028f3:	mov    rax,rbx
    650028f6:	mov    rbx,QWORD PTR [rsp+0x30]
    650028fb:	add    rsp,0x20
    650028ff:	pop    rdi
    65002900:	ret    
    65002901:	int3   
    65002902:	int3   
    65002903:	int3   
    65002904:	int3   
    65002905:	int3   
    65002906:	int3   
    65002907:	int3   
    65002908:	int3   
    65002909:	int3   
    6500290a:	int3   
    6500290b:	int3   
    6500290c:	int3   
    6500290d:	int3   
    6500290e:	int3   
    6500290f:	int3   
    65002910:	mov    QWORD PTR [rsp+0x8],rcx
    65002915:	push   rdi
    65002916:	sub    rsp,0x30
    6500291a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65002923:	mov    QWORD PTR [rsp+0x48],rbx
    65002928:	mov    rbx,rdx
    6500292b:	mov    rdi,rcx
    6500292e:	call   0x6501d3e0
    65002933:	nop
    65002934:	lea    rax,[rip+0x3472d]        # 0x65037068
    6500293b:	mov    QWORD PTR [rdi],rax
    6500293e:	lea    rdx,[rbx+0x18]
    65002942:	lea    rcx,[rdi+0x18]
    65002946:	mov    QWORD PTR [rcx+0x20],0xf
    6500294e:	mov    QWORD PTR [rcx+0x18],0x0
    65002956:	mov    BYTE PTR [rcx+0x8],0x0
    6500295a:	or     r9,0xffffffffffffffff
    6500295e:	xor    r8d,r8d
    65002961:	call   0x65001e20
    65002966:	nop
    65002967:	mov    rax,rdi
    6500296a:	mov    rbx,QWORD PTR [rsp+0x48]
    6500296f:	add    rsp,0x30
    65002973:	pop    rdi
    65002974:	ret    
    65002975:	int3   
    65002976:	int3   
    65002977:	int3   
    65002978:	int3   
    65002979:	int3   
    6500297a:	int3   
    6500297b:	int3   
    6500297c:	int3   
    6500297d:	int3   
    6500297e:	int3   
    6500297f:	int3   
    65002980:	rex push rbp
    65002982:	sub    rsp,0x20
    65002986:	mov    rbp,rdx
    65002989:	mov    rcx,QWORD PTR [rbp+0x40]
    6500298d:	call   0x6501d490
    65002992:	add    rsp,0x20
    65002996:	pop    rbp
    65002997:	ret    
    65002998:	int3   
    65002999:	int3   
    6500299a:	int3   
    6500299b:	int3   
    6500299c:	int3   
    6500299d:	int3   
    6500299e:	int3   
    6500299f:	int3   
    650029a0:	rex push rbp
    650029a2:	push   rsi
    650029a3:	push   rdi
    650029a4:	push   r12
    650029a6:	push   r13
    650029a8:	push   r14
    650029aa:	push   r15
    650029ac:	sub    rsp,0x490
    650029b3:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
    650029bc:	mov    QWORD PTR [rsp+0x4e8],rbx
    650029c4:	mov    rax,QWORD PTR [rip+0x40755]        # 0x65043120
    650029cb:	xor    rax,rsp
    650029ce:	mov    QWORD PTR [rsp+0x480],rax
    650029d6:	mov    r13,r8
    650029d9:	mov    QWORD PTR [rsp+0x50],rdx
    650029de:	mov    r12,rcx
    650029e1:	mov    QWORD PTR [rsp+0x48],rcx
    650029e6:	xor    r15d,r15d
    650029e9:	mov    DWORD PTR [rsp+0x38],r15d
    650029ee:	xor    eax,eax
    650029f0:	mov    r14d,0x1
    650029f6:	lock cmpxchg DWORD PTR [rip+0x45361],r14d        # 0x65047d60
    650029ff:	jne    0x65002a68
    65002a01:	lea    r8,[rip+0x36ad0]        # 0x650394d8
    65002a08:	lea    edx,[r15+0xc]
    65002a0c:	lea    rcx,[rip+0x36b05]        # 0x65039518
    65002a13:	call   0x6500bcb0
    65002a18:	mov    rdi,rax
    65002a1b:	lea    r8,[rip+0x36b06]        # 0x65039528
    65002a22:	lea    edx,[r15+0x8]
    65002a26:	lea    rcx,[rip+0x368ab]        # 0x650392d8
    65002a2d:	call   0x6500c660
    65002a32:	mov    rcx,rax
    65002a35:	call   QWORD PTR [rip+0x316c5]        # 0x65034100
    65002a3b:	add    DWORD PTR [rip+0x41f06],r14d        # 0x65044948
    65002a42:	test   rax,rax
    65002a45:	je     0x65002a5c
    65002a47:	mov    rdx,rdi
    65002a4a:	mov    rcx,rax
    65002a4d:	call   QWORD PTR [rip+0x316b5]        # 0x65034108
    65002a53:	add    DWORD PTR [rip+0x41ef2],r14d        # 0x6504494c
    65002a5a:	jmp    0x65002a5f
    65002a5c:	mov    rax,r15
    65002a5f:	mov    QWORD PTR [rip+0x4542a],rax        # 0x65047e90
    65002a66:	jmp    0x65002a6f
    65002a68:	mov    rax,QWORD PTR [rip+0x45421]        # 0x65047e90
    65002a6f:	lea    rdx,[rsp+0x270]
    65002a77:	mov    ecx,0x100
    65002a7c:	call   rax
    65002a7e:	cmp    eax,0x100
    65002a83:	jbe    0x65002af3
    65002a85:	lea    rcx,[rip+0x40614]        # 0x650430a0
    65002a8c:	mov    rax,QWORD PTR [rip+0x4060d]        # 0x650430a0
    65002a93:	call   QWORD PTR [rax+0x18]
    65002a96:	add    rax,0x18
    65002a9a:	mov    QWORD PTR [r12],rax
    65002a9e:	lea    rdx,[rip+0x345b3]        # 0x65037058
    65002aa5:	test   rdx,0xffffffffffff0000
    65002aac:	jne    0x65002acf
    65002aae:	movzx  edi,dx
    65002ab1:	xor    edx,edx
    65002ab3:	mov    ecx,edi
    65002ab5:	call   0x650026f0
    65002aba:	test   rax,rax
    65002abd:	je     0x65002aeb
    65002abf:	mov    r8d,edi
    65002ac2:	mov    rdx,rax
    65002ac5:	mov    rcx,r12
    65002ac8:	call   0x65003e00
    65002acd:	jmp    0x65002aeb
    65002acf:	xor    eax,eax
    65002ad1:	or     rcx,0xffffffffffffffff
    65002ad5:	mov    rdi,rdx
    65002ad8:	repnz scas ax,WORD PTR es:[rdi]
    65002adb:	not    rcx
    65002ade:	lea    r8d,[rcx-0x1]
    65002ae2:	mov    rcx,r12
    65002ae5:	call   0x65003f90
    65002aea:	nop
    65002aeb:	mov    rax,r12
    65002aee:	jmp    0x650033eb
    65002af3:	xor    eax,eax
    65002af5:	lock cmpxchg DWORD PTR [rip+0x45266],r14d        # 0x65047d64
    65002afe:	jne    0x65002b69
    65002b00:	lea    r8,[rip+0x36a61]        # 0x65039568
    65002b07:	mov    edx,0x10
    65002b0c:	lea    rcx,[rip+0x36a7d]        # 0x65039590
    65002b13:	call   0x6500bcb0
    65002b18:	mov    rdi,rax
    65002b1b:	lea    r8,[rip+0x36a86]        # 0x650395a8
    65002b22:	mov    edx,0x8
    65002b27:	lea    rcx,[rip+0x367aa]        # 0x650392d8
    65002b2e:	call   0x6500c660
    65002b33:	mov    rcx,rax
    65002b36:	call   QWORD PTR [rip+0x315c4]        # 0x65034100
    65002b3c:	add    DWORD PTR [rip+0x41e05],r14d        # 0x65044948
    65002b43:	test   rax,rax
    65002b46:	je     0x65002b5d
    65002b48:	mov    rdx,rdi
    65002b4b:	mov    rcx,rax
    65002b4e:	call   QWORD PTR [rip+0x315b4]        # 0x65034108
    65002b54:	add    DWORD PTR [rip+0x41df1],r14d        # 0x6504494c
    65002b5b:	jmp    0x65002b60
    65002b5d:	mov    rax,r15
    65002b60:	mov    QWORD PTR [rip+0x45331],rax        # 0x65047e98
    65002b67:	jmp    0x65002b70
    65002b69:	mov    rax,QWORD PTR [rip+0x45328]        # 0x65047e98
    65002b70:	lea    r9,[rsp+0x60]
    65002b75:	xor    r8d,r8d
    65002b78:	lea    rdx,[rip+0x344dd]        # 0x6503705c
    65002b7f:	lea    rcx,[rsp+0x270]
    65002b87:	call   rax
    65002b89:	test   eax,eax
    65002b8b:	jne    0x65002bfb
    65002b8d:	lea    rcx,[rip+0x4050c]        # 0x650430a0
    65002b94:	mov    rax,QWORD PTR [rip+0x40505]        # 0x650430a0
    65002b9b:	call   QWORD PTR [rax+0x18]
    65002b9e:	add    rax,0x18
    65002ba2:	mov    QWORD PTR [r12],rax
    65002ba6:	lea    rdx,[rip+0x344ab]        # 0x65037058
    65002bad:	test   rdx,0xffffffffffff0000
    65002bb4:	jne    0x65002bd7
    65002bb6:	movzx  edi,dx
    65002bb9:	xor    edx,edx
    65002bbb:	mov    ecx,edi
    65002bbd:	call   0x650026f0
    65002bc2:	test   rax,rax
    65002bc5:	je     0x65002bf3
    65002bc7:	mov    r8d,edi
    65002bca:	mov    rdx,rax
    65002bcd:	mov    rcx,r12
    65002bd0:	call   0x65003e00
    65002bd5:	jmp    0x65002bf3
    65002bd7:	xor    eax,eax
    65002bd9:	or     rcx,0xffffffffffffffff
    65002bdd:	mov    rdi,rdx
    65002be0:	repnz scas ax,WORD PTR es:[rdi]
    65002be3:	not    rcx
    65002be6:	lea    r8d,[rcx-0x1]
    65002bea:	mov    rcx,r12
    65002bed:	call   0x65003f90
    65002bf2:	nop
    65002bf3:	mov    rax,r12
    65002bf6:	jmp    0x650033eb
    65002bfb:	mov    edi,r15d
    65002bfe:	xchg   ax,ax
    65002c00:	cmp    edi,0x708
    65002c06:	je     0x65003382
    65002c0c:	xor    eax,eax
    65002c0e:	lock cmpxchg DWORD PTR [rip+0x45141],r14d        # 0x65047d58
    65002c17:	jne    0x65002c82
    65002c19:	lea    r8,[rip+0x367c0]        # 0x650393e0
    65002c20:	mov    edx,0xb
    65002c25:	lea    rcx,[rip+0x367e4]        # 0x65039410
    65002c2c:	call   0x6500bcb0
    65002c31:	mov    rbx,rax
    65002c34:	lea    r8,[rip+0x367e5]        # 0x65039420
    65002c3b:	mov    edx,0x8
    65002c40:	lea    rcx,[rip+0x36691]        # 0x650392d8
    65002c47:	call   0x6500c660
    65002c4c:	mov    rcx,rax
    65002c4f:	call   QWORD PTR [rip+0x314ab]        # 0x65034100
    65002c55:	add    DWORD PTR [rip+0x41cec],r14d        # 0x65044948
    65002c5c:	test   rax,rax
    65002c5f:	je     0x65002c76
    65002c61:	mov    rdx,rbx
    65002c64:	mov    rcx,rax
    65002c67:	call   QWORD PTR [rip+0x3149b]        # 0x65034108
    65002c6d:	add    DWORD PTR [rip+0x41cd8],r14d        # 0x6504494c
    65002c74:	jmp    0x65002c79
    65002c76:	mov    rax,r15
    65002c79:	mov    QWORD PTR [rip+0x45200],rax        # 0x65047e80
    65002c80:	jmp    0x65002c89
    65002c82:	mov    rax,QWORD PTR [rip+0x451f7]        # 0x65047e80
    65002c89:	lea    rcx,[rsp+0x60]
    65002c8e:	call   rax
    65002c90:	test   eax,eax
    65002c92:	jne    0x65002cae
    65002c94:	mov    ecx,edi
    65002c96:	call   QWORD PTR [rip+0x313dc]        # 0x65034078
    65002c9c:	add    edi,0xc8
    65002ca2:	cmp    edi,0x7d0
    65002ca8:	jne    0x65002c00
    65002cae:	mov    edi,r15d
    65002cb1:	cmp    edi,0x708
    65002cb7:	je     0x65003317
    65002cbd:	xor    eax,eax
    65002cbf:	lock cmpxchg DWORD PTR [rip+0x450a0],r14d        # 0x65047d68
    65002cc8:	jne    0x65002d33
    65002cca:	lea    r8,[rip+0x36907]        # 0x650395d8
    65002cd1:	mov    edx,0x10
    65002cd6:	lea    rcx,[rip+0x36933]        # 0x65039610
    65002cdd:	call   0x6500bcb0
    65002ce2:	mov    rbx,rax
    65002ce5:	lea    r8,[rip+0x3693c]        # 0x65039628
    65002cec:	mov    edx,0x8
    65002cf1:	lea    rcx,[rip+0x365e0]        # 0x650392d8
    65002cf8:	call   0x6500c660
    65002cfd:	mov    rcx,rax
    65002d00:	call   QWORD PTR [rip+0x313fa]        # 0x65034100
    65002d06:	add    DWORD PTR [rip+0x41c3b],r14d        # 0x65044948
    65002d0d:	test   rax,rax
    65002d10:	je     0x65002d27
    65002d12:	mov    rdx,rbx
    65002d15:	mov    rcx,rax
    65002d18:	call   QWORD PTR [rip+0x313ea]        # 0x65034108
    65002d1e:	add    DWORD PTR [rip+0x41c27],r14d        # 0x6504494c
    65002d25:	jmp    0x65002d2a
    65002d27:	mov    rax,r15
    65002d2a:	mov    QWORD PTR [rip+0x4516f],rax        # 0x65047ea0
    65002d31:	jmp    0x65002d3a
    65002d33:	mov    rax,QWORD PTR [rip+0x45166]        # 0x65047ea0
    65002d3a:	xor    edx,edx
    65002d3c:	lea    rcx,[rsp+0x60]
    65002d41:	call   rax
    65002d43:	test   eax,eax
    65002d45:	jne    0x65002d61
    65002d47:	mov    ecx,edi
    65002d49:	call   QWORD PTR [rip+0x31329]        # 0x65034078
    65002d4f:	add    edi,0xc8
    65002d55:	cmp    edi,0x7d0
    65002d5b:	jne    0x65002cb1
    65002d61:	xor    eax,eax
    65002d63:	or     rsi,0xffffffffffffffff
    65002d67:	mov    rcx,rsi
    65002d6a:	lea    rdi,[rsp+0x60]
    65002d6f:	repnz scas ax,WORD PTR es:[rdi]
    65002d72:	not    rcx
    65002d75:	sub    rcx,r14
    65002d78:	mov    rdi,rcx
    65002d7b:	test   ecx,ecx
    65002d7d:	jne    0x65002de9
    65002d7f:	mov    rax,QWORD PTR [r13+0x0]
    65002d83:	lea    rdx,[rax-0x18]
    65002d87:	mov    rdi,QWORD PTR [rdx]
    65002d8a:	cmp    DWORD PTR [rdx+0x8],r15d
    65002d8e:	je     0x65002e6d
    65002d94:	cmp    DWORD PTR [rdx+0x10],r15d
    65002d98:	jge    0x65002dbc
    65002d9a:	cmp    DWORD PTR [rax-0xc],r15d
    65002d9e:	jge    0x65002dab
    65002da0:	mov    ecx,0x80070057
    65002da5:	call   0x65001050
    65002daa:	int3   
    65002dab:	mov    DWORD PTR [rax-0x10],r15d
    65002daf:	mov    rax,QWORD PTR [r13+0x0]
    65002db3:	mov    WORD PTR [rax],r15w
    65002db7:	jmp    0x65002e6d
    65002dbc:	mov    eax,esi
    65002dbe:	lock xadd DWORD PTR [rdx+0x10],eax
    65002dc3:	add    eax,0xffffffff
    65002dc6:	test   eax,eax
    65002dc8:	jg     0x65002dd3
    65002dca:	mov    rcx,QWORD PTR [rdx]
    65002dcd:	mov    rax,QWORD PTR [rcx]
    65002dd0:	call   QWORD PTR [rax+0x8]
    65002dd3:	mov    rax,QWORD PTR [rdi]
    65002dd6:	mov    rcx,rdi
    65002dd9:	call   QWORD PTR [rax+0x18]
    65002ddc:	add    rax,0x18
    65002de0:	mov    QWORD PTR [r13+0x0],rax
    65002de4:	jmp    0x65002e6d
    65002de9:	mov    rax,QWORD PTR [r13+0x0]
    65002ded:	mov    ebx,DWORD PTR [rax-0x10]
    65002df0:	lea    rbp,[rsp+0x60]
    65002df5:	sub    rbp,rax
    65002df8:	sar    rbp,1
    65002dfb:	mov    ecx,r14d
    65002dfe:	sub    ecx,DWORD PTR [rax-0x8]
    65002e01:	mov    eax,DWORD PTR [rax-0xc]
    65002e04:	sub    eax,edi
    65002e06:	or     eax,ecx
    65002e08:	jge    0x65002e14
    65002e0a:	mov    edx,edi
    65002e0c:	mov    rcx,r13
    65002e0f:	call   0x65002640
    65002e14:	mov    rcx,QWORD PTR [r13+0x0]
    65002e18:	cmp    rbp,rbx
    65002e1b:	ja     0x65002e35
    65002e1d:	movsxd rax,edi
    65002e20:	lea    rbx,[rax+rax*1]
    65002e24:	lea    r8,[rcx+rbp*2]
    65002e28:	mov    r9,rbx
    65002e2b:	mov    rdx,rbx
    65002e2e:	call   0x6501d880
    65002e33:	jmp    0x65002e4c
    65002e35:	movsxd rax,edi
    65002e38:	lea    rbx,[rax+rax*1]
    65002e3c:	mov    r9,rbx
    65002e3f:	lea    r8,[rsp+0x60]
    65002e44:	mov    rdx,rbx
    65002e47:	call   0x6501d7b0
    65002e4c:	test   edi,edi
    65002e4e:	js     0x6500330c
    65002e54:	mov    rax,QWORD PTR [r13+0x0]
    65002e58:	cmp    edi,DWORD PTR [rax-0xc]
    65002e5b:	jg     0x6500330c
    65002e61:	mov    DWORD PTR [rax-0x10],edi
    65002e64:	mov    rax,QWORD PTR [r13+0x0]
    65002e68:	mov    WORD PTR [rbx+rax*1],r15w
    65002e6d:	lea    rcx,[rip+0x4022c]        # 0x650430a0
    65002e74:	mov    rax,QWORD PTR [rip+0x40225]        # 0x650430a0
    65002e7b:	call   QWORD PTR [rax+0x18]
    65002e7e:	lea    rbx,[rax+0x18]
    65002e82:	mov    QWORD PTR [rsp+0x30],rbx
    65002e87:	lea    rcx,[rsp+0x60]
    65002e8c:	lea    rax,[rsp+0x60]
    65002e91:	test   rax,0xffffffffffff0000
    65002e97:	jne    0x65002ec8
    65002e99:	movzx  edi,cx
    65002e9c:	xor    edx,edx
    65002e9e:	mov    ecx,edi
    65002ea0:	call   0x650026f0
    65002ea5:	test   rax,rax
    65002ea8:	je     0x65002fc4
    65002eae:	mov    r8d,edi
    65002eb1:	mov    rdx,rax
    65002eb4:	lea    rcx,[rsp+0x30]
    65002eb9:	call   0x65003e00
    65002ebe:	mov    rbx,QWORD PTR [rsp+0x30]
    65002ec3:	jmp    0x65002fc4
    65002ec8:	xor    eax,eax
    65002eca:	mov    rcx,rsi
    65002ecd:	lea    rdi,[rsp+0x60]
    65002ed2:	repnz scas ax,WORD PTR es:[rdi]
    65002ed5:	not    rcx
    65002ed8:	sub    rcx,0x1
    65002edc:	mov    rdi,rcx
    65002edf:	test   ecx,ecx
    65002ee1:	jne    0x65002f42
    65002ee3:	lea    rdx,[rbx-0x18]
    65002ee7:	mov    rdi,QWORD PTR [rdx]
    65002eea:	cmp    DWORD PTR [rdx+0x8],eax
    65002eed:	je     0x65002fc4
    65002ef3:	cmp    DWORD PTR [rdx+0x10],eax
    65002ef6:	jge    0x65002f14
    65002ef8:	cmp    DWORD PTR [rbx-0xc],eax
    65002efb:	jge    0x65002f08
    65002efd:	mov    ecx,0x80070057
    65002f02:	call   0x65001050
    65002f07:	int3   
    65002f08:	mov    DWORD PTR [rbx-0x10],r15d
    65002f0c:	mov    WORD PTR [rbx],ax
    65002f0f:	jmp    0x65002fc4
    65002f14:	mov    eax,esi
    65002f16:	lock xadd DWORD PTR [rdx+0x10],eax
    65002f1b:	add    eax,0xffffffff
    65002f1e:	test   eax,eax
    65002f20:	jg     0x65002f2b
    65002f22:	mov    rcx,QWORD PTR [rdx]
    65002f25:	mov    rax,QWORD PTR [rcx]
    65002f28:	call   QWORD PTR [rax+0x8]
    65002f2b:	mov    rax,QWORD PTR [rdi]
    65002f2e:	mov    rcx,rdi
    65002f31:	call   QWORD PTR [rax+0x18]
    65002f34:	lea    rbx,[rax+0x18]
    65002f38:	mov    QWORD PTR [rsp+0x30],rbx
    65002f3d:	jmp    0x65002fc4
    65002f42:	mov    ebp,DWORD PTR [rbx-0x10]
    65002f45:	lea    r13,[rsp+0x60]
    65002f4a:	sub    r13,rbx
    65002f4d:	sar    r13,1
    65002f50:	mov    ecx,r14d
    65002f53:	sub    ecx,DWORD PTR [rbx-0x8]
    65002f56:	mov    eax,DWORD PTR [rbx-0xc]
    65002f59:	sub    eax,edi
    65002f5b:	or     eax,ecx
    65002f5d:	jge    0x65002f70
    65002f5f:	mov    edx,edi
    65002f61:	lea    rcx,[rsp+0x30]
    65002f66:	call   0x65002640
    65002f6b:	mov    rbx,QWORD PTR [rsp+0x30]
    65002f70:	cmp    r13,rbp
    65002f73:	ja     0x65002f90
    65002f75:	movsxd rax,edi
    65002f78:	lea    rbp,[rax+rax*1]
    65002f7c:	lea    r8,[rbx+r13*2]
    65002f80:	mov    r9,rbp
    65002f83:	mov    rdx,rbp
    65002f86:	mov    rcx,rbx
    65002f89:	call   0x6501d880
    65002f8e:	jmp    0x65002faa
    65002f90:	movsxd rax,edi
    65002f93:	lea    rbp,[rax+rax*1]
    65002f97:	mov    r9,rbp
    65002f9a:	lea    r8,[rsp+0x60]
    65002f9f:	mov    rdx,rbp
    65002fa2:	mov    rcx,rbx
    65002fa5:	call   0x6501d7b0
    65002faa:	test   edi,edi
    65002fac:	js     0x65003301
    65002fb2:	cmp    edi,DWORD PTR [rbx-0xc]
    65002fb5:	jg     0x65003301
    65002fbb:	mov    DWORD PTR [rbx-0x10],edi
    65002fbe:	mov    WORD PTR [rbx+rbp*1],0x0
    65002fc4:	lea    rax,[rbx-0x18]
    65002fc8:	mov    QWORD PTR [rsp+0x48],rax
    65002fcd:	mov    rcx,QWORD PTR [rax]
    65002fd0:	test   rcx,rcx
    65002fd3:	je     0x65002fe3
    65002fd5:	mov    rax,QWORD PTR [rcx]
    65002fd8:	call   QWORD PTR [rax+0x20]
    65002fdb:	mov    rdx,rax
    65002fde:	test   rax,rax
    65002fe1:	jne    0x65002ff7
    65002fe3:	lea    rcx,[rip+0x400b6]        # 0x650430a0
    65002fea:	mov    rax,QWORD PTR [rip+0x400af]        # 0x650430a0
    65002ff1:	call   QWORD PTR [rax+0x20]
    65002ff4:	mov    rdx,rax
    65002ff7:	mov    ecx,r15d
    65002ffa:	test   rdx,rdx
    65002ffd:	setne  cl
    65003000:	test   ecx,ecx
    65003002:	jne    0x6500300f
    65003004:	mov    ecx,0x80004005
    65003009:	call   0x65001050
    6500300e:	int3   
    6500300f:	mov    rax,QWORD PTR [rdx]
    65003012:	mov    rcx,rdx
    65003015:	call   QWORD PTR [rax+0x18]
    65003018:	lea    rdi,[rax+0x18]
    6500301c:	mov    QWORD PTR [rsp+0x40],rdi
    65003021:	lea    r13,[rip+0x3403c]        # 0x65037064
    65003028:	test   r13,0xffffffffffff0000
    6500302f:	jne    0x65003061
    65003031:	movzx  ebp,r13w
    65003035:	xor    edx,edx
    65003037:	mov    ecx,ebp
    65003039:	call   0x650026f0
    6500303e:	test   rax,rax
    65003041:	je     0x65003143
    65003047:	mov    r8d,ebp
    6500304a:	mov    rdx,rax
    6500304d:	lea    rcx,[rsp+0x40]
    65003052:	call   0x65003e00
    65003057:	mov    rdi,QWORD PTR [rsp+0x40]
    6500305c:	jmp    0x65003143
    65003061:	call   QWORD PTR [rip+0x40031]        # 0x65043098
    65003067:	mov    DWORD PTR [rsp+0x28],r15d
    6500306c:	mov    QWORD PTR [rsp+0x20],r15
    65003071:	mov    r9d,esi
    65003074:	mov    r8,r13
    65003077:	xor    edx,edx
    65003079:	mov    ecx,eax
    6500307b:	call   QWORD PTR [rip+0x30fa7]        # 0x65034028
    65003081:	lea    ebp,[rax-0x1]
    65003084:	test   ebp,ebp
    65003086:	jle    0x650030e5
    65003088:	mov    edx,r14d
    6500308b:	sub    edx,DWORD PTR [rdi-0x8]
    6500308e:	mov    ecx,DWORD PTR [rdi-0xc]
    65003091:	sub    ecx,ebp
    65003093:	or     ecx,edx
    65003095:	jge    0x650030a8
    65003097:	mov    edx,ebp
    65003099:	lea    rcx,[rsp+0x40]
    6500309e:	call   0x65002640
    650030a3:	mov    rdi,QWORD PTR [rsp+0x40]
    650030a8:	call   QWORD PTR [rip+0x3ffea]        # 0x65043098
    650030ae:	mov    ecx,eax
    650030b0:	mov    DWORD PTR [rsp+0x28],ebp
    650030b4:	mov    QWORD PTR [rsp+0x20],rdi
    650030b9:	mov    r9d,esi
    650030bc:	mov    r8,r13
    650030bf:	xor    edx,edx
    650030c1:	call   QWORD PTR [rip+0x30f61]        # 0x65034028
    650030c7:	cmp    ebp,DWORD PTR [rdi-0xc]
    650030ca:	jg     0x650030da
    650030cc:	mov    DWORD PTR [rdi-0x10],ebp
    650030cf:	movsxd rax,ebp
    650030d2:	mov    WORD PTR [rdi+rax*2],0x0
    650030d8:	jmp    0x65003143
    650030da:	mov    ecx,0x80070057
    650030df:	call   0x65001050
    650030e4:	int3   
    650030e5:	lea    rdx,[rdi-0x18]
    650030e9:	mov    rbp,QWORD PTR [rdx]
    650030ec:	cmp    DWORD PTR [rdx+0x8],0x0
    650030f0:	je     0x65003143
    650030f2:	cmp    DWORD PTR [rdx+0x10],0x0
    650030f6:	jge    0x65003114
    650030f8:	cmp    DWORD PTR [rdi-0xc],0x0
    650030fc:	jge    0x65003109
    650030fe:	mov    ecx,0x80070057
    65003103:	call   0x65001050
    65003108:	int3   
    65003109:	mov    DWORD PTR [rdi-0x10],r15d
    6500310d:	mov    WORD PTR [rdi],0x0
    65003112:	jmp    0x65003143
    65003114:	mov    eax,esi
    65003116:	lock xadd DWORD PTR [rdx+0x10],eax
    6500311b:	add    eax,0xffffffff
    6500311e:	test   eax,eax
    65003120:	jg     0x6500312b
    65003122:	mov    rcx,QWORD PTR [rdx]
    65003125:	mov    rax,QWORD PTR [rcx]
    65003128:	call   QWORD PTR [rax+0x8]
    6500312b:	mov    rax,QWORD PTR [rbp+0x0]
    6500312f:	mov    rcx,rbp
    65003132:	call   QWORD PTR [rax+0x18]
    65003135:	lea    rdi,[rax+0x18]
    65003139:	mov    QWORD PTR [rsp+0x40],rdi
    6500313e:	mov    rbx,QWORD PTR [rsp+0x30]
    65003143:	mov    edx,DWORD PTR [rdi-0x10]
    65003146:	mov    DWORD PTR [rsp+0x38],edx
    6500314a:	mov    r14,rdi
    6500314d:	mov    r13,rdi
    65003150:	sub    r13,rbx
    65003153:	sar    r13,1
    65003156:	mov    r15d,DWORD PTR [rbx-0x10]
    6500315a:	lea    ebp,[r15+rdx*1]
    6500315e:	mov    ecx,0x1
    65003163:	mov    rax,QWORD PTR [rsp+0x48]
    65003168:	sub    ecx,DWORD PTR [rax+0x10]
    6500316b:	mov    eax,DWORD PTR [rax+0xc]
    6500316e:	sub    eax,ebp
    65003170:	or     eax,ecx
    65003172:	jge    0x65003189
    65003174:	mov    edx,ebp
    65003176:	lea    rcx,[rsp+0x30]
    6500317b:	call   0x65002640
    65003180:	mov    rbx,QWORD PTR [rsp+0x30]
    65003185:	mov    edx,DWORD PTR [rsp+0x38]
    65003189:	cmp    r13,r15
    6500318c:	ja     0x65003192
    6500318e:	lea    r14,[rbx+r13*2]
    65003192:	movsxd rdx,edx
    65003195:	add    rdx,rdx
    65003198:	lea    rcx,[rbx+r15*2]
    6500319c:	mov    r9,rdx
    6500319f:	mov    r8,r14
    650031a2:	call   0x6501d7b0
    650031a7:	test   ebp,ebp
    650031a9:	js     0x650032f6
    650031af:	cmp    ebp,DWORD PTR [rbx-0xc]
    650031b2:	jg     0x650032f6
    650031b8:	mov    DWORD PTR [rbx-0x10],ebp
    650031bb:	movsxd rax,ebp
    650031be:	mov    WORD PTR [rbx+rax*2],0x0
    650031c4:	lea    rdx,[rdi-0x18]
    650031c8:	mov    eax,esi
    650031ca:	lock xadd DWORD PTR [rdx+0x10],eax
    650031cf:	add    eax,0xffffffff
    650031d2:	test   eax,eax
    650031d4:	jg     0x650031df
    650031d6:	mov    rcx,QWORD PTR [rdx]
    650031d9:	mov    rax,QWORD PTR [rcx]
    650031dc:	call   QWORD PTR [rax+0x8]
    650031df:	mov    r13,QWORD PTR [rsp+0x50]
    650031e4:	mov    r13,QWORD PTR [r13+0x0]
    650031e8:	movsxd r15,DWORD PTR [r13-0x10]
    650031ec:	mov    rbp,r13
    650031ef:	mov    rdi,QWORD PTR [rsp+0x30]
    650031f4:	sub    rbp,rdi
    650031f7:	sar    rbp,1
    650031fa:	mov    r14d,DWORD PTR [rbx-0x10]
    650031fe:	lea    ebx,[r14+r15*1]
    65003202:	mov    ecx,0x1
    65003207:	sub    ecx,DWORD PTR [rdi-0x8]
    6500320a:	mov    eax,DWORD PTR [rdi-0xc]
    6500320d:	sub    eax,ebx
    6500320f:	or     eax,ecx
    65003211:	jge    0x65003224
    65003213:	mov    edx,ebx
    65003215:	lea    rcx,[rsp+0x30]
    6500321a:	call   0x65002640
    6500321f:	mov    rdi,QWORD PTR [rsp+0x30]
    65003224:	cmp    rbp,r14
    65003227:	ja     0x6500322d
    65003229:	lea    r13,[rdi+rbp*2]
    6500322d:	mov    rdx,r15
    65003230:	add    rdx,rdx
    65003233:	lea    rcx,[rdi+r14*2]
    65003237:	mov    r9,rdx
    6500323a:	mov    r8,r13
    6500323d:	call   0x6501d7b0
    65003242:	test   ebx,ebx
    65003244:	js     0x650032eb
    6500324a:	cmp    ebx,DWORD PTR [rdi-0xc]
    6500324d:	jg     0x650032eb
    65003253:	mov    DWORD PTR [rdi-0x10],ebx
    65003256:	movsxd rax,ebx
    65003259:	mov    WORD PTR [rdi+rax*2],0x0
    6500325f:	mov    rcx,QWORD PTR [rdi-0x18]
    65003263:	mov    rax,QWORD PTR [rcx]
    65003266:	call   QWORD PTR [rax+0x20]
    65003269:	mov    rcx,rax
    6500326c:	cmp    DWORD PTR [rdi-0x8],0x0
    65003270:	jl     0x65003283
    65003272:	cmp    rax,QWORD PTR [rdi-0x18]
    65003276:	jne    0x65003283
    65003278:	lea    rbx,[rdi-0x18]
    6500327c:	lock add DWORD PTR [rdi-0x8],0x1
    65003281:	jmp    0x650032c1
    65003283:	mov    rax,QWORD PTR [rax]
    65003286:	mov    r8d,0x2
    6500328c:	mov    edx,DWORD PTR [rdi-0x10]
    6500328f:	call   QWORD PTR [rax]
    65003291:	mov    rbx,rax
    65003294:	test   rax,rax
    65003297:	jne    0x6500329f
    65003299:	call   0x65002320
    6500329e:	int3   
    6500329f:	mov    eax,DWORD PTR [rdi-0x10]
    650032a2:	mov    DWORD PTR [rbx+0x8],eax
    650032a5:	mov    eax,DWORD PTR [rdi-0x10]
    650032a8:	add    eax,0x1
    650032ab:	movsxd rdx,eax
    650032ae:	lea    r9,[rdx+rdx*1]
    650032b2:	mov    r8,rdi
    650032b5:	add    rdx,rdx
    650032b8:	lea    rcx,[rbx+0x18]
    650032bc:	call   0x6501d7b0
    650032c1:	lea    rax,[rbx+0x18]
    650032c5:	mov    QWORD PTR [r12],rax
    650032c9:	lock xadd DWORD PTR [rdi-0x8],esi
    650032ce:	add    esi,0xffffffff
    650032d1:	test   esi,esi
    650032d3:	jg     0x650032e3
    650032d5:	mov    rcx,QWORD PTR [rdi-0x18]
    650032d9:	mov    rax,QWORD PTR [rcx]
    650032dc:	lea    rdx,[rdi-0x18]
    650032e0:	call   QWORD PTR [rax+0x8]
    650032e3:	mov    rax,r12
    650032e6:	jmp    0x650033eb
    650032eb:	mov    ecx,0x80070057
    650032f0:	call   0x65001050
    650032f5:	nop
    650032f6:	mov    ecx,0x80070057
    650032fb:	call   0x65001050
    65003300:	nop
    65003301:	mov    ecx,0x80070057
    65003306:	call   0x65001050
    6500330b:	nop
    6500330c:	mov    ecx,0x80070057
    65003311:	call   0x65001050
    65003316:	int3   
    65003317:	lea    rcx,[rip+0x3fd82]        # 0x650430a0
    6500331e:	mov    rax,QWORD PTR [rip+0x3fd7b]        # 0x650430a0
    65003325:	call   QWORD PTR [rax+0x18]
    65003328:	add    rax,0x18
    6500332c:	mov    QWORD PTR [r12],rax
    65003330:	lea    rdx,[rip+0x33d21]        # 0x65037058
    65003337:	test   rdx,0xffffffffffff0000
    6500333e:	jne    0x65003361
    65003340:	movzx  edi,dx
    65003343:	xor    edx,edx
    65003345:	mov    ecx,edi
    65003347:	call   0x650026f0
    6500334c:	test   rax,rax
    6500334f:	je     0x6500337d
    65003351:	mov    r8d,edi
    65003354:	mov    rdx,rax
    65003357:	mov    rcx,r12
    6500335a:	call   0x65003e00
    6500335f:	jmp    0x6500337d
    65003361:	xor    eax,eax
    65003363:	or     rcx,0xffffffffffffffff
    65003367:	mov    rdi,rdx
    6500336a:	repnz scas ax,WORD PTR es:[rdi]
    6500336d:	not    rcx
    65003370:	lea    r8d,[rcx-0x1]
    65003374:	mov    rcx,r12
    65003377:	call   0x65003f90
    6500337c:	nop
    6500337d:	mov    rax,r12
    65003380:	jmp    0x650033eb
    65003382:	lea    rcx,[rip+0x3fd17]        # 0x650430a0
    65003389:	mov    rax,QWORD PTR [rip+0x3fd10]        # 0x650430a0
    65003390:	call   QWORD PTR [rax+0x18]
    65003393:	add    rax,0x18
    65003397:	mov    QWORD PTR [r12],rax
    6500339b:	lea    rdx,[rip+0x33cb6]        # 0x65037058
    650033a2:	test   rdx,0xffffffffffff0000
    650033a9:	jne    0x650033cc
    650033ab:	movzx  edi,dx
    650033ae:	xor    edx,edx
    650033b0:	mov    ecx,edi
    650033b2:	call   0x650026f0
    650033b7:	test   rax,rax
    650033ba:	je     0x650033e8
    650033bc:	mov    r8d,edi
    650033bf:	mov    rdx,rax
    650033c2:	mov    rcx,r12
    650033c5:	call   0x65003e00
    650033ca:	jmp    0x650033e8
    650033cc:	xor    eax,eax
    650033ce:	or     rcx,0xffffffffffffffff
    650033d2:	mov    rdi,rdx
    650033d5:	repnz scas ax,WORD PTR es:[rdi]
    650033d8:	not    rcx
    650033db:	lea    r8d,[rcx-0x1]
    650033df:	mov    rcx,r12
    650033e2:	call   0x65003f90
    650033e7:	nop
    650033e8:	mov    rax,r12
    650033eb:	mov    rcx,QWORD PTR [rsp+0x480]
    650033f3:	xor    rcx,rsp
    650033f6:	call   0x6501e650
    650033fb:	mov    rbx,QWORD PTR [rsp+0x4e8]
    65003403:	add    rsp,0x490
    6500340a:	pop    r15
    6500340c:	pop    r14
    6500340e:	pop    r13
    65003410:	pop    r12
    65003412:	pop    rdi
    65003413:	pop    rsi
    65003414:	pop    rbp
    65003415:	ret    
    65003416:	int3   
    65003417:	int3   
    65003418:	int3   
    65003419:	int3   
    6500341a:	int3   
    6500341b:	int3   
    6500341c:	int3   
    6500341d:	int3   
    6500341e:	int3   
    6500341f:	int3   
    65003420:	rex push rbp
    65003422:	sub    rsp,0x20
    65003426:	mov    rbp,rdx
    65003429:	mov    rcx,QWORD PTR [rbp+0x48]
    6500342d:	call   0x65002100
    65003432:	add    rsp,0x20
    65003436:	pop    rbp
    65003437:	ret    
    65003438:	int3   
    65003439:	int3   
    6500343a:	int3   
    6500343b:	int3   
    6500343c:	int3   
    6500343d:	int3   
    6500343e:	int3   
    6500343f:	int3   
    65003440:	rex push rbp
    65003442:	sub    rsp,0x20
    65003446:	mov    rbp,rdx
    65003449:	mov    rcx,QWORD PTR [rbp+0x48]
    6500344d:	call   0x65002100
    65003452:	add    rsp,0x20
    65003456:	pop    rbp
    65003457:	ret    
    65003458:	int3   
    65003459:	int3   
    6500345a:	int3   
    6500345b:	int3   
    6500345c:	int3   
    6500345d:	int3   
    6500345e:	int3   
    6500345f:	int3   
    65003460:	rex push rbp
    65003462:	sub    rsp,0x20
    65003466:	mov    rbp,rdx
    65003469:	mov    rcx,QWORD PTR [rbp+0x48]
    6500346d:	call   0x65002100
    65003472:	add    rsp,0x20
    65003476:	pop    rbp
    65003477:	ret    
    65003478:	int3   
    65003479:	int3   
    6500347a:	int3   
    6500347b:	int3   
    6500347c:	int3   
    6500347d:	int3   
    6500347e:	int3   
    6500347f:	int3   
    65003480:	rex push rbp
    65003482:	sub    rsp,0x20
    65003486:	mov    rbp,rdx
    65003489:	mov    rcx,QWORD PTR [rbp+0x48]
    6500348d:	call   0x65002100
    65003492:	add    rsp,0x20
    65003496:	pop    rbp
    65003497:	ret    
    65003498:	int3   
    65003499:	int3   
    6500349a:	int3   
    6500349b:	int3   
    6500349c:	int3   
    6500349d:	int3   
    6500349e:	int3   
    6500349f:	int3   
    650034a0:	rex push rbp
    650034a2:	sub    rsp,0x20
    650034a6:	mov    rbp,rdx
    650034a9:	lea    rcx,[rbp+0x30]
    650034ad:	call   0x65002100
    650034b2:	add    rsp,0x20
    650034b6:	pop    rbp
    650034b7:	ret    
    650034b8:	int3   
    650034b9:	int3   
    650034ba:	int3   
    650034bb:	int3   
    650034bc:	int3   
    650034bd:	int3   
    650034be:	int3   
    650034bf:	int3   
    650034c0:	rex push rbp
    650034c2:	sub    rsp,0x20
    650034c6:	mov    rbp,rdx
    650034c9:	lea    rcx,[rbp+0x30]
    650034cd:	call   0x65001cb0
    650034d2:	add    rsp,0x20
    650034d6:	pop    rbp
    650034d7:	ret    
    650034d8:	int3   
    650034d9:	int3   
    650034da:	int3   
    650034db:	int3   
    650034dc:	int3   
    650034dd:	int3   
    650034de:	int3   
    650034df:	int3   
    650034e0:	rex push rbp
    650034e2:	sub    rsp,0x20
    650034e6:	mov    rbp,rdx
    650034e9:	lea    rcx,[rbp+0x40]
    650034ed:	call   0x65002100
    650034f2:	add    rsp,0x20
    650034f6:	pop    rbp
    650034f7:	ret    
    650034f8:	int3   
    650034f9:	int3   
    650034fa:	int3   
    650034fb:	int3   
    650034fc:	int3   
    650034fd:	int3   
    650034fe:	int3   
    650034ff:	int3   
    65003500:	rex push rbp
    65003502:	sub    rsp,0x20
    65003506:	mov    rbp,rdx
    65003509:	lea    rcx,[rbp+0x40]
    6500350d:	call   0x65001cb0
    65003512:	add    rsp,0x20
    65003516:	pop    rbp
    65003517:	ret    
    65003518:	int3   
    65003519:	int3   
    6500351a:	int3   
    6500351b:	int3   
    6500351c:	int3   
    6500351d:	int3   
    6500351e:	int3   
    6500351f:	int3   
    65003520:	mov    QWORD PTR [rsp+0x8],rcx
    65003525:	push   rbp
    65003526:	push   rsi
    65003527:	push   rdi
    65003528:	push   r12
    6500352a:	push   r13
    6500352c:	sub    rsp,0x120
    65003533:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
    6500353c:	mov    QWORD PTR [rsp+0x158],rbx
    65003544:	mov    rdi,r8
    65003547:	mov    rbp,rdx
    6500354a:	mov    rsi,rcx
    6500354d:	mov    rbx,QWORD PTR [rcx]
    65003550:	mov    ecx,0x1
    65003555:	xor    eax,eax
    65003557:	xor    r13d,r13d
    6500355a:	lock cmpxchg DWORD PTR [rip+0x447fa],ecx        # 0x65047d5c
    65003562:	jne    0x650035ca
    65003564:	lea    r8,[rip+0x35ee5]        # 0x65039450
    6500356b:	lea    edx,[rcx+0xa]
    6500356e:	lea    rcx,[rip+0x35f1b]        # 0x65039490
    65003575:	call   0x6500bcb0
    6500357a:	mov    r12,rax
    6500357d:	lea    r8,[rip+0x35f1c]        # 0x650394a0
    65003584:	lea    edx,[r13+0x8]
    65003588:	lea    rcx,[rip+0x35d49]        # 0x650392d8
    6500358f:	call   0x6500c660
    65003594:	mov    rcx,rax
    65003597:	call   QWORD PTR [rip+0x30b63]        # 0x65034100
    6500359d:	add    DWORD PTR [rip+0x413a4],0x1        # 0x65044948
    650035a4:	test   rax,rax
    650035a7:	je     0x650035be
    650035a9:	mov    rdx,r12
    650035ac:	mov    rcx,rax
    650035af:	call   QWORD PTR [rip+0x30b53]        # 0x65034108
    650035b5:	add    DWORD PTR [rip+0x41390],0x1        # 0x6504494c
    650035bc:	jmp    0x650035c1
    650035be:	mov    rax,r13
    650035c1:	mov    QWORD PTR [rip+0x448c0],rax        # 0x65047e88
    650035c8:	jmp    0x650035d1
    650035ca:	mov    rax,QWORD PTR [rip+0x448b7]        # 0x65047e88
    650035d1:	mov    QWORD PTR [rsp+0x30],r13
    650035d6:	mov    DWORD PTR [rsp+0x28],0x80
    650035de:	mov    DWORD PTR [rsp+0x20],0x2
    650035e6:	xor    r9d,r9d
    650035e9:	xor    r8d,r8d
    650035ec:	mov    edx,0x40000000
    650035f1:	mov    rcx,rbx
    650035f4:	call   rax
    650035f6:	mov    rbx,rax
    650035f9:	mov    QWORD PTR [rsp+0x40],rax
    650035fe:	cmp    rax,0xffffffffffffffff
    65003602:	jne    0x6500368e
    65003608:	mov    QWORD PTR [rsp+0xf0],0xf
    65003614:	mov    QWORD PTR [rsp+0xe8],r13
    6500361c:	mov    BYTE PTR [rsp+0xd8],0x0
    65003624:	lea    rcx,[rsp+0x90]
    6500362c:	call   0x6501d310
    65003631:	nop
    65003632:	lea    rax,[rip+0x33a2f]        # 0x65037068
    65003639:	mov    QWORD PTR [rsp+0x90],rax
    65003641:	mov    QWORD PTR [rsp+0xc8],0xf
    6500364d:	mov    QWORD PTR [rsp+0xc0],r13
    65003655:	mov    BYTE PTR [rsp+0xb0],0x0
    6500365d:	or     r9,rbx
    65003660:	xor    r8d,r8d
    65003663:	lea    rdx,[rsp+0xd0]
    6500366b:	lea    rcx,[rsp+0xa8]
    65003673:	call   0x65001e20
    65003678:	nop
    65003679:	lea    rdx,[rip+0x3de00]        # 0x65041480
    65003680:	lea    rcx,[rsp+0x90]
    65003688:	call   0x6501dc60
    6500368d:	nop
    6500368e:	mov    QWORD PTR [rsp+0x20],r13
    65003693:	lea    r9,[rsp+0x168]
    6500369b:	mov    r8d,edi
    6500369e:	mov    rdx,rbp
    650036a1:	mov    rcx,rax
    650036a4:	call   QWORD PTR [rip+0x30a46]        # 0x650340f0
    650036aa:	test   eax,eax
    650036ac:	jne    0x65003725
    650036ae:	mov    QWORD PTR [rsp+0x118],0xf
    650036ba:	mov    QWORD PTR [rsp+0x110],r13
    650036c2:	mov    BYTE PTR [rsp+0x100],al
    650036c9:	lea    rcx,[rsp+0x50]
    650036ce:	call   0x6501d310
    650036d3:	nop
    650036d4:	lea    rax,[rip+0x3398d]        # 0x65037068
    650036db:	mov    QWORD PTR [rsp+0x50],rax
    650036e0:	mov    QWORD PTR [rsp+0x88],0xf
    650036ec:	mov    QWORD PTR [rsp+0x80],r13
    650036f4:	mov    BYTE PTR [rsp+0x70],0x0
    650036f9:	or     r9,0xffffffffffffffff
    650036fd:	xor    r8d,r8d
    65003700:	lea    rdx,[rsp+0xf8]
    65003708:	lea    rcx,[rsp+0x68]
    6500370d:	call   0x65001e20
    65003712:	nop
    65003713:	lea    rdx,[rip+0x3dd66]        # 0x65041480
    6500371a:	lea    rcx,[rsp+0x50]
    6500371f:	call   0x6501dc60
    65003724:	nop
    65003725:	test   rbx,rbx
    65003728:	je     0x65003744
    6500372a:	call   QWORD PTR [rip+0x30938]        # 0x65034068
    65003730:	mov    edi,eax
    65003732:	mov    rcx,rbx
    65003735:	call   QWORD PTR [rip+0x30925]        # 0x65034060
    6500373b:	mov    ecx,edi
    6500373d:	call   QWORD PTR [rip+0x309cd]        # 0x65034110
    65003743:	nop
    65003744:	mov    rdx,QWORD PTR [rsi]
    65003747:	sub    rdx,0x18
    6500374b:	or     rax,0xffffffffffffffff
    6500374f:	lock xadd DWORD PTR [rdx+0x10],eax
    65003754:	add    eax,0xffffffff
    65003757:	test   eax,eax
    65003759:	jg     0x65003764
    6500375b:	mov    rcx,QWORD PTR [rdx]
    6500375e:	mov    rax,QWORD PTR [rcx]
    65003761:	call   QWORD PTR [rax+0x8]
    65003764:	mov    rbx,QWORD PTR [rsp+0x158]
    6500376c:	add    rsp,0x120
    65003773:	pop    r13
    65003775:	pop    r12
    65003777:	pop    rdi
    65003778:	pop    rsi
    65003779:	pop    rbp
    6500377a:	ret    
    6500377b:	int3   
    6500377c:	int3   
    6500377d:	int3   
    6500377e:	int3   
    6500377f:	int3   
    65003780:	rex push rbp
    65003782:	sub    rsp,0x20
    65003786:	mov    rbp,rdx
    65003789:	mov    rcx,QWORD PTR [rbp+0x150]
    65003790:	call   0x65001cb0
    65003795:	add    rsp,0x20
    65003799:	pop    rbp
    6500379a:	ret    
    6500379b:	int3   
    6500379c:	int3   
    6500379d:	int3   
    6500379e:	int3   
    6500379f:	int3   
    650037a0:	rex push rbp
    650037a2:	sub    rsp,0x20
    650037a6:	mov    rbp,rdx
    650037a9:	lea    rcx,[rbp+0x40]
    650037ad:	call   0x65001ce0
    650037b2:	add    rsp,0x20
    650037b6:	pop    rbp
    650037b7:	ret    
    650037b8:	int3   
    650037b9:	int3   
    650037ba:	int3   
    650037bb:	int3   
    650037bc:	int3   
    650037bd:	int3   
    650037be:	int3   
    650037bf:	int3   
    650037c0:	rex push rbp
    650037c2:	sub    rsp,0x20
    650037c6:	mov    rbp,rdx
    650037c9:	lea    rcx,[rbp+0xd0]
    650037d0:	call   0x65001c70
    650037d5:	add    rsp,0x20
    650037d9:	pop    rbp
    650037da:	ret    
    650037db:	int3   
    650037dc:	int3   
    650037dd:	int3   
    650037de:	int3   
    650037df:	int3   
    650037e0:	rex push rbp
    650037e2:	sub    rsp,0x20
    650037e6:	mov    rbp,rdx
    650037e9:	lea    rcx,[rbp+0x90]
    650037f0:	call   0x6501d490
    650037f5:	add    rsp,0x20
    650037f9:	pop    rbp
    650037fa:	ret    
    650037fb:	int3   
    650037fc:	int3   
    650037fd:	int3   
    650037fe:	int3   
    650037ff:	int3   
    65003800:	rex push rbp
    65003802:	sub    rsp,0x20
    65003806:	mov    rbp,rdx
    65003809:	lea    rcx,[rbp+0xf8]
    65003810:	call   0x65001c70
    65003815:	add    rsp,0x20
    65003819:	pop    rbp
    6500381a:	ret    
    6500381b:	int3   
    6500381c:	int3   
    6500381d:	int3   
    6500381e:	int3   
    6500381f:	int3   
    65003820:	rex push rbp
    65003822:	sub    rsp,0x20
    65003826:	mov    rbp,rdx
    65003829:	lea    rcx,[rbp+0x50]
    6500382d:	call   0x6501d490
    65003832:	add    rsp,0x20
    65003836:	pop    rbp
    65003837:	ret    
    65003838:	int3   
    65003839:	int3   
    6500383a:	int3   
    6500383b:	int3   
    6500383c:	int3   
    6500383d:	int3   
    6500383e:	int3   
    6500383f:	int3   
    65003840:	mov    QWORD PTR [rsp+0x8],rbx
    65003845:	mov    QWORD PTR [rsp+0x20],rbp
    6500384a:	push   rsi
    6500384b:	push   rdi
    6500384c:	push   r12
    6500384e:	sub    rsp,0x40
    65003852:	xor    ebp,ebp
    65003854:	mov    rbx,rdx
    65003857:	mov    rdi,rcx
    6500385a:	mov    QWORD PTR [rsp+0x68],rbp
    6500385f:	mov    QWORD PTR [rsp+0x70],rbp
    65003864:	call   QWORD PTR [rip+0x3f82e]        # 0x65043098
    6500386a:	mov    rsi,QWORD PTR [rbx]
    6500386d:	xor    eax,eax
    6500386f:	mov    r12d,0x1
    65003875:	lock cmpxchg DWORD PTR [rip+0x4451a],r12d        # 0x65047d98
    6500387e:	jne    0x650038ec
    65003880:	lea    r8,[rip+0x36009]        # 0x65039890
    65003887:	lea    edx,[rbp+0x15]
    6500388a:	lea    rcx,[rip+0x3602f]        # 0x650398c0
    65003891:	call   0x6500bcb0
    65003896:	lea    r8,[rip+0x3603b]        # 0x650398d8
    6500389d:	lea    edx,[rbp+0x8]
    650038a0:	lea    rcx,[rip+0x35fd1]        # 0x65039878
    650038a7:	mov    rbx,rax
    650038aa:	call   0x6500c660
    650038af:	mov    rcx,rax
    650038b2:	call   QWORD PTR [rip+0x30848]        # 0x65034100
    650038b8:	add    DWORD PTR [rip+0x41089],r12d        # 0x65044948
    650038bf:	test   rax,rax
    650038c2:	je     0x650038e0
    650038c4:	mov    rdx,rbx
    650038c7:	mov    rcx,rax
    650038ca:	call   QWORD PTR [rip+0x30838]        # 0x65034108
    650038d0:	add    DWORD PTR [rip+0x41075],r12d        # 0x6504494c
    650038d7:	mov    QWORD PTR [rip+0x445ea],rax        # 0x65047ec8
    650038de:	jmp    0x650038f3
    650038e0:	mov    rax,rbp
    650038e3:	mov    QWORD PTR [rip+0x445de],rax        # 0x65047ec8
    650038ea:	jmp    0x650038f3
    650038ec:	mov    rax,QWORD PTR [rip+0x445d5]        # 0x65047ec8
    650038f3:	lea    rcx,[rsp+0x70]
    650038f8:	xor    r9d,r9d
    650038fb:	mov    edx,r12d
    650038fe:	mov    QWORD PTR [rsp+0x38],rcx
    65003903:	lea    rcx,[rsp+0x68]
    65003908:	mov    QWORD PTR [rsp+0x30],rbp
    6500390d:	mov    QWORD PTR [rsp+0x28],rcx
    65003912:	lea    r8d,[r9+0x5]
    65003916:	mov    rcx,rsi
    65003919:	mov    QWORD PTR [rsp+0x20],rbp
    6500391e:	call   rax
    65003920:	test   eax,eax
    65003922:	jne    0x650039d4
    65003928:	mov    rbx,QWORD PTR [rdi]
    6500392b:	lock cmpxchg DWORD PTR [rip+0x44468],r12d        # 0x65047d9c
    65003934:	jne    0x650039a9
    65003936:	lea    r8,[rip+0x35fc3]        # 0x65039900
    6500393d:	lea    rcx,[rip+0x35fe4]        # 0x65039928
    65003944:	mov    edx,0x15
    65003949:	call   0x6500bcb0
    6500394e:	lea    r8,[rip+0x35feb]        # 0x65039940
    65003955:	lea    rcx,[rip+0x35f1c]        # 0x65039878
    6500395c:	mov    edx,0x8
    65003961:	mov    rdi,rax
    65003964:	call   0x6500c660
    65003969:	mov    rcx,rax
    6500396c:	call   QWORD PTR [rip+0x3078e]        # 0x65034100
    65003972:	add    DWORD PTR [rip+0x40fcf],r12d        # 0x65044948
    65003979:	test   rax,rax
    6500397c:	je     0x6500399d
    6500397e:	mov    rdx,rdi
    65003981:	mov    rcx,rax
    65003984:	call   QWORD PTR [rip+0x3077e]        # 0x65034108
    6500398a:	add    DWORD PTR [rip+0x40fbb],r12d        # 0x6504494c
    65003991:	mov    r11,rax
    65003994:	mov    QWORD PTR [rip+0x44535],rax        # 0x65047ed0
    6500399b:	jmp    0x650039b0
    6500399d:	mov    r11,rbp
    650039a0:	mov    QWORD PTR [rip+0x44529],rbp        # 0x65047ed0
    650039a7:	jmp    0x650039b0
    650039a9:	mov    r11,QWORD PTR [rip+0x44520]        # 0x65047ed0
    650039b0:	mov    rax,QWORD PTR [rsp+0x68]
    650039b5:	xor    r9d,r9d
    650039b8:	mov    QWORD PTR [rsp+0x30],rbp
    650039bd:	mov    QWORD PTR [rsp+0x28],rax
    650039c2:	lea    r8d,[r9+0x4]
    650039c6:	mov    edx,r12d
    650039c9:	mov    rcx,rbx
    650039cc:	mov    QWORD PTR [rsp+0x20],rbp
    650039d1:	call   r11
    650039d4:	mov    rbx,QWORD PTR [rsp+0x60]
    650039d9:	mov    rbp,QWORD PTR [rsp+0x78]
    650039de:	add    rsp,0x40
    650039e2:	pop    r12
    650039e4:	pop    rdi
    650039e5:	pop    rsi
    650039e6:	ret    
    650039e7:	int3   
    650039e8:	int3   
    650039e9:	int3   
    650039ea:	int3   
    650039eb:	int3   
    650039ec:	int3   
    650039ed:	int3   
    650039ee:	int3   
    650039ef:	int3   
    650039f0:	mov    QWORD PTR [rsp+0x8],rbx
    650039f5:	mov    QWORD PTR [rsp+0x10],rbp
    650039fa:	mov    QWORD PTR [rsp+0x18],rsi
    650039ff:	push   rdi
    65003a00:	push   r12
    65003a02:	push   r13
    65003a04:	sub    rsp,0x20
    65003a08:	mov    rbp,QWORD PTR [rdx]
    65003a0b:	mov    rax,QWORD PTR [rcx]
    65003a0e:	mov    edx,0x1
    65003a13:	mov    r12d,DWORD PTR [rax-0x10]
    65003a17:	sub    edx,DWORD PTR [rax-0x8]
    65003a1a:	movsxd r13,DWORD PTR [rbp-0x10]
    65003a1e:	mov    rsi,rbp
    65003a21:	lea    edi,[r12+r13*1]
    65003a25:	mov    rbx,rcx
    65003a28:	sub    rsi,rax
    65003a2b:	mov    eax,DWORD PTR [rax-0xc]
    65003a2e:	sub    eax,edi
    65003a30:	sar    rsi,1
    65003a33:	or     edx,eax
    65003a35:	jge    0x65003a3e
    65003a37:	mov    edx,edi
    65003a39:	call   0x65002640
    65003a3e:	cmp    rsi,r12
    65003a41:	mov    rax,QWORD PTR [rbx]
    65003a44:	ja     0x65003a4a
    65003a46:	lea    rbp,[rax+rsi*2]
    65003a4a:	mov    rdx,r13
    65003a4d:	lea    rcx,[rax+r12*2]
    65003a51:	mov    r8,rbp
    65003a54:	add    rdx,rdx
    65003a57:	mov    r9,rdx
    65003a5a:	call   0x6501d7b0
    65003a5f:	test   edi,edi
    65003a61:	js     0x65003a96
    65003a63:	mov    rax,QWORD PTR [rbx]
    65003a66:	cmp    edi,DWORD PTR [rax-0xc]
    65003a69:	jg     0x65003a96
    65003a6b:	mov    rbp,QWORD PTR [rsp+0x48]
    65003a70:	mov    rsi,QWORD PTR [rsp+0x50]
    65003a75:	mov    DWORD PTR [rax-0x10],edi
    65003a78:	mov    rax,QWORD PTR [rbx]
    65003a7b:	movsxd rcx,edi
    65003a7e:	mov    WORD PTR [rax+rcx*2],0x0
    65003a84:	mov    rax,rbx
    65003a87:	mov    rbx,QWORD PTR [rsp+0x40]
    65003a8c:	add    rsp,0x20
    65003a90:	pop    r13
    65003a92:	pop    r12
    65003a94:	pop    rdi
    65003a95:	ret    
    65003a96:	mov    ecx,0x80070057
    65003a9b:	call   0x65001050
    65003aa0:	int3   
    65003aa1:	int3   
    65003aa2:	int3   
    65003aa3:	int3   
    65003aa4:	int3   
    65003aa5:	int3   
    65003aa6:	int3   
    65003aa7:	int3   
    65003aa8:	int3   
    65003aa9:	int3   
    65003aaa:	int3   
    65003aab:	int3   
    65003aac:	int3   
    65003aad:	int3   
    65003aae:	int3   
    65003aaf:	int3   
    65003ab0:	rex push rsi
    65003ab2:	push   rdi
    65003ab3:	push   r12
    65003ab5:	push   r13
    65003ab7:	push   r14
    65003ab9:	sub    rsp,0x30
    65003abd:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65003ac6:	mov    QWORD PTR [rsp+0x68],rbx
    65003acb:	mov    QWORD PTR [rsp+0x70],rbp
    65003ad0:	mov    rsi,rdx
    65003ad3:	mov    rdi,rcx
    65003ad6:	mov    rax,QWORD PTR [rcx]
    65003ad9:	mov    rcx,QWORD PTR [rax-0x18]
    65003add:	test   rcx,rcx
    65003ae0:	je     0x65003af0
    65003ae2:	mov    rax,QWORD PTR [rcx]
    65003ae5:	call   QWORD PTR [rax+0x20]
    65003ae8:	mov    r11,rax
    65003aeb:	test   rax,rax
    65003aee:	jne    0x65003b04
    65003af0:	lea    rcx,[rip+0x3f5a9]        # 0x650430a0
    65003af7:	mov    rax,QWORD PTR [rip+0x3f5a2]        # 0x650430a0
    65003afe:	call   QWORD PTR [rax+0x20]
    65003b01:	mov    r11,rax
    65003b04:	xor    ecx,ecx
    65003b06:	test   r11,r11
    65003b09:	setne  cl
    65003b0c:	test   ecx,ecx
    65003b0e:	jne    0x65003b1b
    65003b10:	mov    ecx,0x80004005
    65003b15:	call   0x65001050
    65003b1a:	int3   
    65003b1b:	mov    rax,QWORD PTR [r11]
    65003b1e:	mov    rcx,r11
    65003b21:	call   QWORD PTR [rax+0x18]
    65003b24:	lea    rbx,[rax+0x18]
    65003b28:	mov    QWORD PTR [rsp+0x60],rbx
    65003b2d:	test   rsi,rsi
    65003b30:	je     0x65003b63
    65003b32:	test   rsi,0xffffffffffff0000
    65003b39:	jne    0x65003b63
    65003b3b:	movzx  esi,si
    65003b3e:	xor    edx,edx
    65003b40:	mov    ecx,esi
    65003b42:	call   0x650026f0
    65003b47:	test   rax,rax
    65003b4a:	je     0x65003b75
    65003b4c:	mov    r8d,esi
    65003b4f:	mov    rdx,rax
    65003b52:	lea    rcx,[rsp+0x60]
    65003b57:	call   0x65003e00
    65003b5c:	mov    rbx,QWORD PTR [rsp+0x60]
    65003b61:	jmp    0x65003b75
    65003b63:	mov    rdx,rsi
    65003b66:	lea    rcx,[rsp+0x60]
    65003b6b:	call   0x65003cc0
    65003b70:	mov    rbx,QWORD PTR [rsp+0x60]
    65003b75:	movsxd r14,DWORD PTR [rbx-0x10]
    65003b79:	mov    r12,rbx
    65003b7c:	mov    rax,QWORD PTR [rdi]
    65003b7f:	mov    rbp,rbx
    65003b82:	sub    rbp,rax
    65003b85:	sar    rbp,1
    65003b88:	mov    r13d,DWORD PTR [rax-0x10]
    65003b8c:	lea    esi,[r13+r14*1+0x0]
    65003b91:	mov    ecx,0x1
    65003b96:	sub    ecx,DWORD PTR [rax-0x8]
    65003b99:	mov    eax,DWORD PTR [rax-0xc]
    65003b9c:	sub    eax,esi
    65003b9e:	or     eax,ecx
    65003ba0:	jge    0x65003bac
    65003ba2:	mov    edx,esi
    65003ba4:	mov    rcx,rdi
    65003ba7:	call   0x65002640
    65003bac:	mov    rax,QWORD PTR [rdi]
    65003baf:	cmp    rbp,r13
    65003bb2:	ja     0x65003bb8
    65003bb4:	lea    r12,[rax+rbp*2]
    65003bb8:	mov    rdx,r14
    65003bbb:	add    rdx,rdx
    65003bbe:	lea    rcx,[rax+r13*2]
    65003bc2:	mov    r9,rdx
    65003bc5:	mov    r8,r12
    65003bc8:	call   0x6501d7b0
    65003bcd:	test   esi,esi
    65003bcf:	js     0x65003c09
    65003bd1:	mov    rax,QWORD PTR [rdi]
    65003bd4:	cmp    esi,DWORD PTR [rax-0xc]
    65003bd7:	jg     0x65003c09
    65003bd9:	mov    DWORD PTR [rax-0x10],esi
    65003bdc:	movsxd rcx,esi
    65003bdf:	mov    rax,QWORD PTR [rdi]
    65003be2:	mov    WORD PTR [rax+rcx*2],0x0
    65003be8:	lea    rdx,[rbx-0x18]
    65003bec:	or     eax,0xffffffff
    65003bef:	lock xadd DWORD PTR [rdx+0x10],eax
    65003bf4:	add    eax,0xffffffff
    65003bf7:	test   eax,eax
    65003bf9:	jg     0x65003c04
    65003bfb:	mov    rcx,QWORD PTR [rdx]
    65003bfe:	mov    rax,QWORD PTR [rcx]
    65003c01:	call   QWORD PTR [rax+0x8]
    65003c04:	mov    rax,rdi
    65003c07:	jmp    0x65003c14
    65003c09:	mov    ecx,0x80070057
    65003c0e:	call   0x65001050
    65003c13:	nop
    65003c14:	mov    rbx,QWORD PTR [rsp+0x68]
    65003c19:	mov    rbp,QWORD PTR [rsp+0x70]
    65003c1e:	add    rsp,0x30
    65003c22:	pop    r14
    65003c24:	pop    r13
    65003c26:	pop    r12
    65003c28:	pop    rdi
    65003c29:	pop    rsi
    65003c2a:	ret    
    65003c2b:	int3   
    65003c2c:	int3   
    65003c2d:	int3   
    65003c2e:	int3   
    65003c2f:	int3   
    65003c30:	rex push rbp
    65003c32:	sub    rsp,0x20
    65003c36:	mov    rbp,rdx
    65003c39:	lea    rcx,[rbp+0x60]
    65003c3d:	call   0x65002100
    65003c42:	add    rsp,0x20
    65003c46:	pop    rbp
    65003c47:	ret    
    65003c48:	int3   
    65003c49:	int3   
    65003c4a:	int3   
    65003c4b:	int3   
    65003c4c:	int3   
    65003c4d:	int3   
    65003c4e:	int3   
    65003c4f:	int3   
    65003c50:	rex push rbp
    65003c52:	sub    rsp,0x20
    65003c56:	mov    rbp,rdx
    65003c59:	lea    rcx,[rbp+0x60]
    65003c5d:	call   0x65001cb0
    65003c62:	add    rsp,0x20
    65003c66:	pop    rbp
    65003c67:	ret    
    65003c68:	int3   
    65003c69:	int3   
    65003c6a:	int3   
    65003c6b:	int3   
    65003c6c:	int3   
    65003c6d:	int3   
    65003c6e:	int3   
    65003c6f:	int3   
    65003c70:	mov    QWORD PTR [rsp+0x8],rbx
    65003c75:	push   rdi
    65003c76:	sub    rsp,0x20
    65003c7a:	mov    QWORD PTR [rcx+0x20],0xf
    65003c82:	mov    QWORD PTR [rcx+0x18],0x0
    65003c8a:	mov    rbx,rcx
    65003c8d:	mov    BYTE PTR [rcx+0x8],0x0
    65003c91:	or     rcx,0xffffffffffffffff
    65003c95:	xor    eax,eax
    65003c97:	mov    rdi,rdx
    65003c9a:	repnz scas al,BYTE PTR es:[rdi]
    65003c9c:	not    rcx
    65003c9f:	lea    r8,[rcx-0x1]
    65003ca3:	mov    rcx,rbx
    65003ca6:	call   0x65002000
    65003cab:	mov    rax,rbx
    65003cae:	mov    rbx,QWORD PTR [rsp+0x30]
    65003cb3:	add    rsp,0x20
    65003cb7:	pop    rdi
    65003cb8:	ret    
    65003cb9:	int3   
    65003cba:	int3   
    65003cbb:	int3   
    65003cbc:	int3   
    65003cbd:	int3   
    65003cbe:	int3   
    65003cbf:	int3   
    65003cc0:	mov    QWORD PTR [rsp+0x8],rbx
    65003cc5:	mov    QWORD PTR [rsp+0x10],rbp
    65003cca:	mov    QWORD PTR [rsp+0x18],rsi
    65003ccf:	mov    QWORD PTR [rsp+0x20],rdi
    65003cd4:	push   r12
    65003cd6:	sub    rsp,0x30
    65003cda:	or     esi,0xffffffff
    65003cdd:	test   rdx,rdx
    65003ce0:	mov    r12,rdx
    65003ce3:	mov    rdi,rcx
    65003ce6:	je     0x65003d80
    65003cec:	call   QWORD PTR [rip+0x3f3a6]        # 0x65043098
    65003cf2:	mov    r9d,esi
    65003cf5:	mov    r8,r12
    65003cf8:	xor    edx,edx
    65003cfa:	mov    ecx,eax
    65003cfc:	mov    DWORD PTR [rsp+0x28],0x0
    65003d04:	mov    QWORD PTR [rsp+0x20],0x0
    65003d0d:	call   QWORD PTR [rip+0x30315]        # 0x65034028
    65003d13:	lea    ebp,[rax-0x1]
    65003d16:	test   ebp,ebp
    65003d18:	jle    0x65003d80
    65003d1a:	mov    rcx,QWORD PTR [rdi]
    65003d1d:	mov    edx,0x1
    65003d22:	sub    edx,DWORD PTR [rcx-0x8]
    65003d25:	mov    ecx,DWORD PTR [rcx-0xc]
    65003d28:	sub    ecx,ebp
    65003d2a:	or     edx,ecx
    65003d2c:	jge    0x65003d38
    65003d2e:	mov    edx,ebp
    65003d30:	mov    rcx,rdi
    65003d33:	call   0x65002640
    65003d38:	mov    rbx,QWORD PTR [rdi]
    65003d3b:	call   QWORD PTR [rip+0x3f357]        # 0x65043098
    65003d41:	mov    r9d,esi
    65003d44:	mov    r8,r12
    65003d47:	xor    edx,edx
    65003d49:	mov    ecx,eax
    65003d4b:	mov    DWORD PTR [rsp+0x28],ebp
    65003d4f:	mov    QWORD PTR [rsp+0x20],rbx
    65003d54:	call   QWORD PTR [rip+0x302ce]        # 0x65034028
    65003d5a:	mov    r11,QWORD PTR [rdi]
    65003d5d:	cmp    ebp,DWORD PTR [r11-0xc]
    65003d61:	jg     0x65003d75
    65003d63:	mov    DWORD PTR [r11-0x10],ebp
    65003d67:	mov    rax,QWORD PTR [rdi]
    65003d6a:	movsxd rcx,ebp
    65003d6d:	mov    WORD PTR [rax+rcx*2],0x0
    65003d73:	jmp    0x65003dde
    65003d75:	mov    ecx,0x80070057
    65003d7a:	call   0x65001050
    65003d7f:	int3   
    65003d80:	mov    rax,QWORD PTR [rdi]
    65003d83:	cmp    DWORD PTR [rax-0x10],0x0
    65003d87:	mov    rbx,QWORD PTR [rax-0x18]
    65003d8b:	lea    rdx,[rax-0x18]
    65003d8f:	je     0x65003dde
    65003d91:	cmp    DWORD PTR [rdx+0x10],0x0
    65003d95:	jge    0x65003db9
    65003d97:	cmp    DWORD PTR [rax-0xc],0x0
    65003d9b:	jge    0x65003da8
    65003d9d:	mov    ecx,0x80070057
    65003da2:	call   0x65001050
    65003da7:	int3   
    65003da8:	mov    DWORD PTR [rax-0x10],0x0
    65003daf:	mov    rax,QWORD PTR [rdi]
    65003db2:	mov    WORD PTR [rax],0x0
    65003db7:	jmp    0x65003dde
    65003db9:	lock xadd DWORD PTR [rdx+0x10],esi
    65003dbe:	add    esi,0xffffffff
    65003dc1:	test   esi,esi
    65003dc3:	jg     0x65003dce
    65003dc5:	mov    rcx,QWORD PTR [rdx]
    65003dc8:	mov    rax,QWORD PTR [rcx]
    65003dcb:	call   QWORD PTR [rax+0x8]
    65003dce:	mov    rax,QWORD PTR [rbx]
    65003dd1:	mov    rcx,rbx
    65003dd4:	call   QWORD PTR [rax+0x18]
    65003dd7:	add    rax,0x18
    65003ddb:	mov    QWORD PTR [rdi],rax
    65003dde:	mov    rbx,QWORD PTR [rsp+0x40]
    65003de3:	mov    rbp,QWORD PTR [rsp+0x48]
    65003de8:	mov    rsi,QWORD PTR [rsp+0x50]
    65003ded:	mov    rax,rdi
    65003df0:	mov    rdi,QWORD PTR [rsp+0x58]
    65003df5:	add    rsp,0x30
    65003df9:	pop    r12
    65003dfb:	ret    
    65003dfc:	int3   
    65003dfd:	int3   
    65003dfe:	int3   
    65003dff:	int3   
    65003e00:	mov    QWORD PTR [rsp+0x8],rbx
    65003e05:	mov    QWORD PTR [rsp+0x10],rbp
    65003e0a:	mov    QWORD PTR [rsp+0x18],rsi
    65003e0f:	mov    QWORD PTR [rsp+0x20],rdi
    65003e14:	push   r12
    65003e16:	sub    rsp,0x20
    65003e1a:	mov    eax,r8d
    65003e1d:	mov    rbp,rdx
    65003e20:	mov    ebx,r8d
    65003e23:	shr    eax,0x4
    65003e26:	mov    rsi,rcx
    65003e29:	mov    r8d,0x6
    65003e2f:	add    ax,0x1
    65003e33:	mov    rcx,rbp
    65003e36:	movzx  edx,ax
    65003e39:	call   QWORD PTR [rip+0x30211]        # 0x65034050
    65003e3f:	test   rax,rax
    65003e42:	mov    r12,rax
    65003e45:	je     0x65003f71
    65003e4b:	mov    rdx,rax
    65003e4e:	mov    rcx,rbp
    65003e51:	call   QWORD PTR [rip+0x301f1]        # 0x65034048
    65003e57:	test   rax,rax
    65003e5a:	je     0x65003f71
    65003e60:	mov    rcx,rax
    65003e63:	call   QWORD PTR [rip+0x301d7]        # 0x65034040
    65003e69:	test   rax,rax
    65003e6c:	mov    rdi,rax
    65003e6f:	je     0x65003f71
    65003e75:	mov    rdx,r12
    65003e78:	mov    rcx,rbp
    65003e7b:	call   QWORD PTR [rip+0x301b7]        # 0x65034038
    65003e81:	mov    r11d,eax
    65003e84:	add    r11,rdi
    65003e87:	and    ebx,0xf
    65003e8a:	jbe    0x65003ea6
    65003e8c:	data16 data16 xchg ax,ax
    65003e90:	cmp    rdi,r11
    65003e93:	jae    0x65003f71
    65003e99:	add    ebx,0xffffffff
    65003e9c:	movzx  eax,WORD PTR [rdi]
    65003e9f:	lea    rdi,[rdi+rax*2+0x2]
    65003ea4:	jne    0x65003e90
    65003ea6:	cmp    rdi,r11
    65003ea9:	jae    0x65003f71
    65003eaf:	movzx  eax,WORD PTR [rdi]
    65003eb2:	test   ax,ax
    65003eb5:	je     0x65003f71
    65003ebb:	movzx  ebx,ax
    65003ebe:	mov    rax,QWORD PTR [rsi]
    65003ec1:	mov    ecx,0x1
    65003ec6:	sub    ecx,DWORD PTR [rax-0x8]
    65003ec9:	mov    eax,DWORD PTR [rax-0xc]
    65003ecc:	sub    eax,ebx
    65003ece:	or     ecx,eax
    65003ed0:	jge    0x65003edc
    65003ed2:	mov    edx,ebx
    65003ed4:	mov    rcx,rsi
    65003ed7:	call   0x65002640
    65003edc:	movzx  ecx,WORD PTR [rdi]
    65003edf:	lea    r8,[rdi+0x2]
    65003ee3:	cmp    ecx,0xffffffff
    65003ee6:	jne    0x65003ef9
    65003ee8:	or     rcx,0xffffffffffffffff
    65003eec:	xor    eax,eax
    65003eee:	mov    rdi,r8
    65003ef1:	repnz scas ax,WORD PTR es:[rdi]
    65003ef4:	not    rcx
    65003ef7:	and    ecx,ecx
    65003ef9:	movsxd r9,ecx
    65003efc:	mov    rcx,QWORD PTR [rsi]
    65003eff:	lea    rdi,[rbx+rbx*1]
    65003f03:	mov    rdx,rdi
    65003f06:	add    r9,r9
    65003f09:	call   0x6501d7b0
    65003f0e:	test   eax,eax
    65003f10:	je     0x65003f47
    65003f12:	cmp    eax,0xc
    65003f15:	je     0x65003f3c
    65003f17:	cmp    eax,0x16
    65003f1a:	je     0x65003f31
    65003f1c:	cmp    eax,0x22
    65003f1f:	je     0x65003f31
    65003f21:	cmp    eax,0x50
    65003f24:	je     0x65003f47
    65003f26:	mov    ecx,0x80004005
    65003f2b:	call   0x65001050
    65003f30:	int3   
    65003f31:	mov    ecx,0x80070057
    65003f36:	call   0x65001050
    65003f3b:	int3   
    65003f3c:	mov    ecx,0x8007000e
    65003f41:	call   0x65001050
    65003f46:	int3   
    65003f47:	test   ebx,ebx
    65003f49:	js     0x65003f66
    65003f4b:	mov    rcx,QWORD PTR [rsi]
    65003f4e:	cmp    ebx,DWORD PTR [rcx-0xc]
    65003f51:	jg     0x65003f66
    65003f53:	mov    DWORD PTR [rcx-0x10],ebx
    65003f56:	mov    rcx,QWORD PTR [rsi]
    65003f59:	mov    eax,0x1
    65003f5e:	mov    WORD PTR [rdi+rcx*1],0x0
    65003f64:	jmp    0x65003f73
    65003f66:	mov    ecx,0x80070057
    65003f6b:	call   0x65001050
    65003f70:	int3   
    65003f71:	xor    eax,eax
    65003f73:	mov    rbx,QWORD PTR [rsp+0x30]
    65003f78:	mov    rbp,QWORD PTR [rsp+0x38]
    65003f7d:	mov    rsi,QWORD PTR [rsp+0x40]
    65003f82:	mov    rdi,QWORD PTR [rsp+0x48]
    65003f87:	add    rsp,0x20
    65003f8b:	pop    r12
    65003f8d:	ret    
    65003f8e:	int3   
    65003f8f:	int3   
    65003f90:	mov    QWORD PTR [rsp+0x18],rbx
    65003f95:	mov    QWORD PTR [rsp+0x20],rbp
    65003f9a:	push   rdi
    65003f9b:	sub    rsp,0x20
    65003f9f:	test   r8d,r8d
    65003fa2:	movsxd rdi,r8d
    65003fa5:	mov    rbp,rdx
    65003fa8:	mov    rbx,rcx
    65003fab:	jne    0x65004034
    65003fb1:	mov    rax,QWORD PTR [rcx]
    65003fb4:	cmp    DWORD PTR [rax-0x10],r8d
    65003fb8:	mov    rdi,QWORD PTR [rax-0x18]
    65003fbc:	lea    rdx,[rax-0x18]
    65003fc0:	je     0x650040c9
    65003fc6:	cmp    DWORD PTR [rdx+0x10],r8d
    65003fca:	jge    0x65003ffc
    65003fcc:	cmp    DWORD PTR [rax-0xc],r8d
    65003fd0:	jge    0x65003fdd
    65003fd2:	mov    ecx,0x80070057
    65003fd7:	call   0x65001050
    65003fdc:	int3   
    65003fdd:	mov    DWORD PTR [rax-0x10],0x0
    65003fe4:	mov    rax,QWORD PTR [rcx]
    65003fe7:	mov    WORD PTR [rax],0x0
    65003fec:	mov    rbx,QWORD PTR [rsp+0x40]
    65003ff1:	mov    rbp,QWORD PTR [rsp+0x48]
    65003ff6:	add    rsp,0x20
    65003ffa:	pop    rdi
    65003ffb:	ret    
    65003ffc:	or     eax,0xffffffff
    65003fff:	lock xadd DWORD PTR [rdx+0x10],eax
    65004004:	add    eax,0xffffffff
    65004007:	test   eax,eax
    65004009:	jg     0x65004014
    6500400b:	mov    rcx,QWORD PTR [rdx]
    6500400e:	mov    rax,QWORD PTR [rcx]
    65004011:	call   QWORD PTR [rax+0x8]
    65004014:	mov    rax,QWORD PTR [rdi]
    65004017:	mov    rcx,rdi
    6500401a:	call   QWORD PTR [rax+0x18]
    6500401d:	add    rax,0x18
    65004021:	mov    QWORD PTR [rbx],rax
    65004024:	mov    rbx,QWORD PTR [rsp+0x40]
    65004029:	mov    rbp,QWORD PTR [rsp+0x48]
    6500402e:	add    rsp,0x20
    65004032:	pop    rdi
    65004033:	ret    
    65004034:	test   rdx,rdx
    65004037:	jne    0x65004044
    65004039:	mov    ecx,0x80070057
    6500403e:	call   0x65001050
    65004043:	int3   
    65004044:	mov    rax,QWORD PTR [rcx]
    65004047:	mov    QWORD PTR [rsp+0x30],rsi
    6500404c:	mov    QWORD PTR [rsp+0x38],r12
    65004051:	mov    esi,DWORD PTR [rax-0x10]
    65004054:	mov    r12,rdx
    65004057:	mov    ecx,0x1
    6500405c:	sub    ecx,DWORD PTR [rax-0x8]
    6500405f:	sub    r12,rax
    65004062:	mov    eax,DWORD PTR [rax-0xc]
    65004065:	sub    eax,edi
    65004067:	sar    r12,1
    6500406a:	or     ecx,eax
    6500406c:	jge    0x65004078
    6500406e:	mov    edx,edi
    65004070:	mov    rcx,rbx
    65004073:	call   0x65002640
    65004078:	cmp    r12,rsi
    6500407b:	mov    rcx,QWORD PTR [rbx]
    6500407e:	ja     0x65004095
    65004080:	lea    rsi,[rdi+rdi*1]
    65004084:	lea    r8,[rcx+r12*2]
    65004088:	mov    r9,rsi
    6500408b:	mov    rdx,rsi
    6500408e:	call   0x6501d880
    65004093:	jmp    0x650040a7
    65004095:	lea    rsi,[rdi+rdi*1]
    65004099:	mov    r8,rbp
    6500409c:	mov    r9,rsi
    6500409f:	mov    rdx,rsi
    650040a2:	call   0x6501d7b0
    650040a7:	test   edi,edi
    650040a9:	mov    r12,QWORD PTR [rsp+0x38]
    650040ae:	js     0x650040d9
    650040b0:	mov    rax,QWORD PTR [rbx]
    650040b3:	cmp    edi,DWORD PTR [rax-0xc]
    650040b6:	jg     0x650040d9
    650040b8:	mov    DWORD PTR [rax-0x10],edi
    650040bb:	mov    rax,QWORD PTR [rbx]
    650040be:	mov    WORD PTR [rsi+rax*1],0x0
    650040c4:	mov    rsi,QWORD PTR [rsp+0x30]
    650040c9:	mov    rbx,QWORD PTR [rsp+0x40]
    650040ce:	mov    rbp,QWORD PTR [rsp+0x48]
    650040d3:	add    rsp,0x20
    650040d7:	pop    rdi
    650040d8:	ret    
    650040d9:	mov    ecx,0x80070057
    650040de:	call   0x65001050
    650040e3:	int3   
    650040e4:	int3   
    650040e5:	int3   
    650040e6:	int3   
    650040e7:	int3   
    650040e8:	int3   
    650040e9:	int3   
    650040ea:	int3   
    650040eb:	int3   
    650040ec:	int3   
    650040ed:	int3   
    650040ee:	int3   
    650040ef:	int3   
    650040f0:	rex push rbx
    650040f2:	sub    rsp,0x40
    650040f6:	test   rcx,rcx
    650040f9:	mov    eax,r9d
    650040fc:	mov    rbx,rcx
    650040ff:	je     0x65004149
    65004101:	test   rdx,rdx
    65004104:	je     0x65004149
    65004106:	mov    BYTE PTR [rcx],0x0
    65004109:	mov    QWORD PTR [rsp+0x50],rdi
    6500410e:	xor    edi,edi
    65004110:	mov    QWORD PTR [rsp+0x38],rdi
    65004115:	mov    QWORD PTR [rsp+0x30],rdi
    6500411a:	mov    DWORD PTR [rsp+0x28],r8d
    6500411f:	mov    QWORD PTR [rsp+0x20],rcx
    65004124:	mov    r8,rdx
    65004127:	or     r9d,0xffffffff
    6500412b:	xor    edx,edx
    6500412d:	mov    ecx,eax
    6500412f:	call   QWORD PTR [rip+0x2fefb]        # 0x65034030
    65004135:	test   eax,eax
    65004137:	cmove  rbx,rdi
    6500413b:	mov    rdi,QWORD PTR [rsp+0x50]
    65004140:	mov    rax,rbx
    65004143:	add    rsp,0x40
    65004147:	pop    rbx
    65004148:	ret    
    65004149:	xor    eax,eax
    6500414b:	add    rsp,0x40
    6500414f:	pop    rbx
    65004150:	ret    
    65004151:	int3   
    65004152:	int3   
    65004153:	int3   
    65004154:	int3   
    65004155:	int3   
    65004156:	int3   
    65004157:	int3   
    65004158:	int3   
    65004159:	int3   
    6500415a:	int3   
    6500415b:	int3   
    6500415c:	int3   
    6500415d:	int3   
    6500415e:	int3   
    6500415f:	int3   
    65004160:	rex push rbx
    65004162:	sub    rsp,0x20
    65004166:	mov    rbx,rcx
    65004169:	mov    rcx,QWORD PTR [rcx]
    6500416c:	test   rcx,rcx
    6500416f:	je     0x6500417e
    65004171:	call   QWORD PTR [rip+0x2fea1]        # 0x65034018
    65004177:	mov    QWORD PTR [rbx],0x0
    6500417e:	add    rsp,0x20
    65004182:	pop    rbx
    65004183:	ret    
    65004184:	int3   
    65004185:	int3   
    65004186:	int3   
    65004187:	int3   
    65004188:	int3   
    65004189:	int3   
    6500418a:	int3   
    6500418b:	int3   
    6500418c:	int3   
    6500418d:	int3   
    6500418e:	int3   
    6500418f:	int3   
    65004190:	ret    0x0
    65004193:	int3   
    65004194:	int3   
    65004195:	int3   
    65004196:	int3   
    65004197:	int3   
    65004198:	int3   
    65004199:	int3   
    6500419a:	int3   
    6500419b:	int3   
    6500419c:	int3   
    6500419d:	int3   
    6500419e:	int3   
    6500419f:	int3   
    650041a0:	mov    QWORD PTR [rsp+0x8],rbx
    650041a5:	push   rdi
    650041a6:	sub    rsp,0x20
    650041aa:	lea    rax,[rip+0x3101f]        # 0x650351d0
    650041b1:	mov    edi,edx
    650041b3:	mov    rbx,rcx
    650041b6:	mov    QWORD PTR [rcx],rax
    650041b9:	cmp    QWORD PTR [rcx+0x38],0x10
    650041be:	jb     0x650041c9
    650041c0:	mov    rcx,QWORD PTR [rcx+0x20]
    650041c4:	call   0x6501d300
    650041c9:	mov    QWORD PTR [rbx+0x38],0xf
    650041d1:	mov    QWORD PTR [rbx+0x30],0x0
    650041d9:	mov    rcx,rbx
    650041dc:	mov    BYTE PTR [rbx+0x20],0x0
    650041e0:	call   0x6501d490
    650041e5:	test   dil,0x1
    650041e9:	je     0x650041f3
    650041eb:	mov    rcx,rbx
    650041ee:	call   0x6501d300
    650041f3:	mov    rax,rbx
    650041f6:	mov    rbx,QWORD PTR [rsp+0x30]
    650041fb:	add    rsp,0x20
    650041ff:	pop    rdi
    65004200:	ret    
    65004201:	int3   
    65004202:	int3   
    65004203:	int3   
    65004204:	int3   
    65004205:	int3   
    65004206:	int3   
    65004207:	int3   
    65004208:	int3   
    65004209:	int3   
    6500420a:	int3   
    6500420b:	int3   
    6500420c:	int3   
    6500420d:	int3   
    6500420e:	int3   
    6500420f:	int3   
    65004210:	rex push rbx
    65004212:	sub    rsp,0x20
    65004216:	lea    rax,[rip+0x30fb3]        # 0x650351d0
    6500421d:	mov    rbx,rcx
    65004220:	mov    QWORD PTR [rcx],rax
    65004223:	cmp    QWORD PTR [rcx+0x38],0x10
    65004228:	jb     0x65004233
    6500422a:	mov    rcx,QWORD PTR [rcx+0x20]
    6500422e:	call   0x6501d300
    65004233:	mov    QWORD PTR [rbx+0x38],0xf
    6500423b:	mov    QWORD PTR [rbx+0x30],0x0
    65004243:	mov    rcx,rbx
    65004246:	mov    BYTE PTR [rbx+0x20],0x0
    6500424a:	add    rsp,0x20
    6500424e:	pop    rbx
    6500424f:	jmp    0x6501d490
    65004254:	int3   
    65004255:	int3   
    65004256:	int3   
    65004257:	int3   
    65004258:	int3   
    65004259:	int3   
    6500425a:	int3   
    6500425b:	int3   
    6500425c:	int3   
    6500425d:	int3   
    6500425e:	int3   
    6500425f:	int3   
    65004260:	mov    QWORD PTR [rsp+0x8],rbx
    65004265:	push   rdi
    65004266:	sub    rsp,0x20
    6500426a:	lea    rax,[rip+0x30f5f]        # 0x650351d0
    65004271:	mov    edi,edx
    65004273:	mov    rbx,rcx
    65004276:	mov    QWORD PTR [rcx],rax
    65004279:	cmp    QWORD PTR [rcx+0x38],0x10
    6500427e:	jb     0x65004289
    65004280:	mov    rcx,QWORD PTR [rcx+0x20]
    65004284:	call   0x6501d300
    65004289:	mov    QWORD PTR [rbx+0x38],0xf
    65004291:	mov    QWORD PTR [rbx+0x30],0x0
    65004299:	mov    rcx,rbx
    6500429c:	mov    BYTE PTR [rbx+0x20],0x0
    650042a0:	call   0x6501d490
    650042a5:	test   dil,0x1
    650042a9:	je     0x650042b3
    650042ab:	mov    rcx,rbx
    650042ae:	call   0x6501d300
    650042b3:	mov    rax,rbx
    650042b6:	mov    rbx,QWORD PTR [rsp+0x30]
    650042bb:	add    rsp,0x20
    650042bf:	pop    rdi
    650042c0:	ret    
    650042c1:	int3   
    650042c2:	int3   
    650042c3:	int3   
    650042c4:	int3   
    650042c5:	int3   
    650042c6:	int3   
    650042c7:	int3   
    650042c8:	int3   
    650042c9:	int3   
    650042ca:	int3   
    650042cb:	int3   
    650042cc:	int3   
    650042cd:	int3   
    650042ce:	int3   
    650042cf:	int3   
    650042d0:	rex push rbx
    650042d2:	sub    rsp,0x20
    650042d6:	lea    rax,[rip+0x30ef3]        # 0x650351d0
    650042dd:	mov    rbx,rcx
    650042e0:	mov    QWORD PTR [rcx],rax
    650042e3:	cmp    QWORD PTR [rcx+0x38],0x10
    650042e8:	jb     0x650042f3
    650042ea:	mov    rcx,QWORD PTR [rcx+0x20]
    650042ee:	call   0x6501d300
    650042f3:	mov    QWORD PTR [rbx+0x38],0xf
    650042fb:	mov    QWORD PTR [rbx+0x30],0x0
    65004303:	mov    rcx,rbx
    65004306:	mov    BYTE PTR [rbx+0x20],0x0
    6500430a:	add    rsp,0x20
    6500430e:	pop    rbx
    6500430f:	jmp    0x6501d490
    65004314:	int3   
    65004315:	int3   
    65004316:	int3   
    65004317:	int3   
    65004318:	int3   
    65004319:	int3   
    6500431a:	int3   
    6500431b:	int3   
    6500431c:	int3   
    6500431d:	int3   
    6500431e:	int3   
    6500431f:	int3   
    65004320:	mov    QWORD PTR [rsp+0x8],rbx
    65004325:	push   rdi
    65004326:	sub    rsp,0x20
    6500432a:	lea    rax,[rip+0x30e9f]        # 0x650351d0
    65004331:	mov    edi,edx
    65004333:	mov    rbx,rcx
    65004336:	mov    QWORD PTR [rcx],rax
    65004339:	cmp    QWORD PTR [rcx+0x38],0x10
    6500433e:	jb     0x65004349
    65004340:	mov    rcx,QWORD PTR [rcx+0x20]
    65004344:	call   0x6501d300
    65004349:	mov    QWORD PTR [rbx+0x38],0xf
    65004351:	mov    QWORD PTR [rbx+0x30],0x0
    65004359:	mov    rcx,rbx
    6500435c:	mov    BYTE PTR [rbx+0x20],0x0
    65004360:	call   0x6501d490
    65004365:	test   dil,0x1
    65004369:	je     0x65004373
    6500436b:	mov    rcx,rbx
    6500436e:	call   0x6501d300
    65004373:	mov    rax,rbx
    65004376:	mov    rbx,QWORD PTR [rsp+0x30]
    6500437b:	add    rsp,0x20
    6500437f:	pop    rdi
    65004380:	ret    
    65004381:	int3   
    65004382:	int3   
    65004383:	int3   
    65004384:	int3   
    65004385:	int3   
    65004386:	int3   
    65004387:	int3   
    65004388:	int3   
    65004389:	int3   
    6500438a:	int3   
    6500438b:	int3   
    6500438c:	int3   
    6500438d:	int3   
    6500438e:	int3   
    6500438f:	int3   
    65004390:	mov    QWORD PTR [rsp+0x8],rcx
    65004395:	push   rdi
    65004396:	sub    rsp,0x30
    6500439a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    650043a3:	mov    QWORD PTR [rsp+0x48],rbx
    650043a8:	mov    rbx,rdx
    650043ab:	mov    rdi,rcx
    650043ae:	call   0x6501d3e0
    650043b3:	nop
    650043b4:	lea    rax,[rip+0x30e15]        # 0x650351d0
    650043bb:	mov    QWORD PTR [rdi],rax
    650043be:	lea    rdx,[rbx+0x18]
    650043c2:	lea    rcx,[rdi+0x18]
    650043c6:	mov    QWORD PTR [rcx+0x20],0xf
    650043ce:	mov    QWORD PTR [rcx+0x18],0x0
    650043d6:	mov    BYTE PTR [rcx+0x8],0x0
    650043da:	or     r9,0xffffffffffffffff
    650043de:	xor    r8d,r8d
    650043e1:	call   0x65001e20
    650043e6:	nop
    650043e7:	lea    rax,[rip+0x30e12]        # 0x65035200
    650043ee:	mov    QWORD PTR [rdi],rax
    650043f1:	mov    rax,rdi
    650043f4:	mov    rbx,QWORD PTR [rsp+0x48]
    650043f9:	add    rsp,0x30
    650043fd:	pop    rdi
    650043fe:	ret    
    650043ff:	int3   
    65004400:	rex push rbp
    65004402:	sub    rsp,0x20
    65004406:	mov    rbp,rdx
    65004409:	mov    rcx,QWORD PTR [rbp+0x40]
    6500440d:	call   0x6501d490
    65004412:	add    rsp,0x20
    65004416:	pop    rbp
    65004417:	ret    
    65004418:	int3   
    65004419:	int3   
    6500441a:	int3   
    6500441b:	int3   
    6500441c:	int3   
    6500441d:	int3   
    6500441e:	int3   
    6500441f:	int3   
    65004420:	mov    QWORD PTR [rsp+0x8],rcx
    65004425:	push   rdi
    65004426:	sub    rsp,0x30
    6500442a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65004433:	mov    QWORD PTR [rsp+0x48],rbx
    65004438:	mov    rbx,rdx
    6500443b:	mov    rdi,rcx
    6500443e:	call   0x6501d3e0
    65004443:	nop
    65004444:	lea    rax,[rip+0x30d85]        # 0x650351d0
    6500444b:	mov    QWORD PTR [rdi],rax
    6500444e:	lea    rdx,[rbx+0x18]
    65004452:	lea    rcx,[rdi+0x18]
    65004456:	mov    QWORD PTR [rcx+0x20],0xf
    6500445e:	mov    QWORD PTR [rcx+0x18],0x0
    65004466:	mov    BYTE PTR [rcx+0x8],0x0
    6500446a:	or     r9,0xffffffffffffffff
    6500446e:	xor    r8d,r8d
    65004471:	call   0x65001e20
    65004476:	nop
    65004477:	mov    rax,rdi
    6500447a:	mov    rbx,QWORD PTR [rsp+0x48]
    6500447f:	add    rsp,0x30
    65004483:	pop    rdi
    65004484:	ret    
    65004485:	int3   
    65004486:	int3   
    65004487:	int3   
    65004488:	int3   
    65004489:	int3   
    6500448a:	int3   
    6500448b:	int3   
    6500448c:	int3   
    6500448d:	int3   
    6500448e:	int3   
    6500448f:	int3   
    65004490:	rex push rbp
    65004492:	sub    rsp,0x20
    65004496:	mov    rbp,rdx
    65004499:	mov    rcx,QWORD PTR [rbp+0x40]
    6500449d:	call   0x6501d490
    650044a2:	add    rsp,0x20
    650044a6:	pop    rbp
    650044a7:	ret    
    650044a8:	int3   
    650044a9:	int3   
    650044aa:	int3   
    650044ab:	int3   
    650044ac:	int3   
    650044ad:	int3   
    650044ae:	int3   
    650044af:	int3   
    650044b0:	rex push rbp
    650044b2:	push   rsi
    650044b3:	push   rdi
    650044b4:	push   r12
    650044b6:	push   r13
    650044b8:	push   r14
    650044ba:	push   r15
    650044bc:	sub    rsp,0x120
    650044c3:	mov    QWORD PTR [rsp+0x88],0xfffffffffffffffe
    650044cf:	mov    QWORD PTR [rsp+0x170],rbx
    650044d7:	mov    rax,QWORD PTR [rip+0x3ec42]        # 0x65043120
    650044de:	xor    rax,rsp
    650044e1:	mov    QWORD PTR [rsp+0x110],rax
    650044e9:	mov    QWORD PTR [rsp+0x80],rdx
    650044f1:	mov    QWORD PTR [rsp+0x78],rcx
    650044f6:	mov    QWORD PTR [rsp+0x90],rcx
    650044fe:	mov    DWORD PTR [rsp+0x70],0x0
    65004506:	movzx  ebx,BYTE PTR [rdx+0xf]
    6500450a:	movzx  edi,BYTE PTR [rdx+0xe]
    6500450e:	movzx  esi,BYTE PTR [rdx+0xd]
    65004512:	movzx  ebp,BYTE PTR [rdx+0xc]
    65004516:	movzx  r12d,BYTE PTR [rdx+0xb]
    6500451b:	movzx  r13d,BYTE PTR [rdx+0xa]
    65004520:	movzx  r14d,BYTE PTR [rdx+0x9]
    65004525:	movzx  r15d,BYTE PTR [rdx+0x8]
    6500452a:	movzx  eax,WORD PTR [rdx+0x6]
    6500452e:	mov    DWORD PTR [rsp+0x74],eax
    65004532:	movzx  eax,WORD PTR [rdx+0x4]
    65004536:	mov    DWORD PTR [rsp+0x70],eax
    6500453a:	lea    r8,[rip+0x32b37]        # 0x65037078
    65004541:	mov    edx,0x32
    65004546:	lea    rcx,[rip+0x32b53]        # 0x650370a0
    6500454d:	call   0x6500bcb0
    65004552:	mov    r8,rax
    65004555:	mov    DWORD PTR [rsp+0x68],ebx
    65004559:	mov    DWORD PTR [rsp+0x60],edi
    6500455d:	mov    DWORD PTR [rsp+0x58],esi
    65004561:	mov    DWORD PTR [rsp+0x50],ebp
    65004565:	mov    DWORD PTR [rsp+0x48],r12d
    6500456a:	mov    DWORD PTR [rsp+0x40],r13d
    6500456f:	mov    DWORD PTR [rsp+0x38],r14d
    65004574:	mov    DWORD PTR [rsp+0x30],r15d
    65004579:	mov    eax,DWORD PTR [rsp+0x74]
    6500457d:	mov    DWORD PTR [rsp+0x28],eax
    65004581:	mov    eax,DWORD PTR [rsp+0x70]
    65004585:	mov    DWORD PTR [rsp+0x20],eax
    65004589:	mov    rax,QWORD PTR [rsp+0x80]
    65004591:	mov    r9d,DWORD PTR [rax]
    65004594:	mov    edx,0x64
    65004599:	lea    rcx,[rsp+0xa0]
    650045a1:	call   0x6501f600
    650045a6:	lea    rcx,[rip+0x3eaf3]        # 0x650430a0
    650045ad:	mov    rax,QWORD PTR [rip+0x3eaec]        # 0x650430a0
    650045b4:	call   QWORD PTR [rax+0x18]
    650045b7:	add    rax,0x18
    650045bb:	mov    rbx,QWORD PTR [rsp+0x78]
    650045c0:	mov    QWORD PTR [rbx],rax
    650045c3:	lea    rcx,[rsp+0xa0]
    650045cb:	lea    rax,[rsp+0xa0]
    650045d3:	test   rax,0xffffffffffff0000
    650045d9:	jne    0x65004605
    650045db:	movzx  edi,cx
    650045de:	xor    edx,edx
    650045e0:	mov    ecx,edi
    650045e2:	call   0x650026f0
    650045e7:	test   rax,rax
    650045ea:	je     0x65004600
    650045ec:	mov    r8d,edi
    650045ef:	mov    rdx,rax
    650045f2:	mov    rcx,rbx
    650045f5:	call   0x65003e00
    650045fa:	nop
    650045fb:	mov    rax,rbx
    650045fe:	jmp    0x65004619
    65004600:	mov    rax,rbx
    65004603:	jmp    0x65004619
    65004605:	lea    rdx,[rsp+0xa0]
    6500460d:	mov    rcx,rbx
    65004610:	call   0x65003cc0
    65004615:	nop
    65004616:	mov    rax,rbx
    65004619:	mov    rcx,QWORD PTR [rsp+0x110]
    65004621:	xor    rcx,rsp
    65004624:	call   0x6501e650
    65004629:	mov    rbx,QWORD PTR [rsp+0x170]
    65004631:	add    rsp,0x120
    65004638:	pop    r15
    6500463a:	pop    r14
    6500463c:	pop    r13
    6500463e:	pop    r12
    65004640:	pop    rdi
    65004641:	pop    rsi
    65004642:	pop    rbp
    65004643:	ret    
    65004644:	int3   
    65004645:	int3   
    65004646:	int3   
    65004647:	int3   
    65004648:	int3   
    65004649:	int3   
    6500464a:	int3   
    6500464b:	int3   
    6500464c:	int3   
    6500464d:	int3   
    6500464e:	int3   
    6500464f:	int3   
    65004650:	rex push rbp
    65004652:	sub    rsp,0x20
    65004656:	mov    rbp,rdx
    65004659:	mov    rcx,QWORD PTR [rbp+0x90]
    65004660:	call   0x65002100
    65004665:	add    rsp,0x20
    65004669:	pop    rbp
    6500466a:	ret    
    6500466b:	int3   
    6500466c:	int3   
    6500466d:	int3   
    6500466e:	int3   
    6500466f:	int3   
    65004670:	mov    r11,rsp
    65004673:	push   rsi
    65004674:	push   rdi
    65004675:	push   r12
    65004677:	sub    rsp,0x60
    6500467b:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    65004684:	mov    QWORD PTR [r11+0x8],rbx
    65004688:	mov    QWORD PTR [r11+0x18],rbp
    6500468c:	mov    rax,QWORD PTR [rip+0x3ea8d]        # 0x65043120
    65004693:	xor    rax,rsp
    65004696:	mov    QWORD PTR [rsp+0x50],rax
    6500469b:	mov    rdi,rdx
    6500469e:	mov    rsi,rcx
    650046a1:	mov    QWORD PTR [r11-0x58],rdx
    650046a5:	call   QWORD PTR [rip+0x3e9ed]        # 0x65043098
    650046ab:	lea    r11,[rsp+0x40]
    650046b0:	mov    eax,DWORD PTR [rip+0x30a72]        # 0x65035128
    650046b6:	mov    DWORD PTR [r11],eax
    650046b9:	mov    eax,DWORD PTR [rip+0x30a6d]        # 0x6503512c
    650046bf:	mov    DWORD PTR [r11+0x4],eax
    650046c3:	mov    eax,DWORD PTR [rip+0x30a67]        # 0x65035130
    650046c9:	mov    DWORD PTR [r11+0x8],eax
    650046cd:	mov    eax,DWORD PTR [rip+0x30a61]        # 0x65035134
    650046d3:	mov    DWORD PTR [r11+0xc],eax
    650046d7:	mov    rax,QWORD PTR [rdi]
    650046da:	xor    ebp,ebp
    650046dc:	lea    r12d,[rbp+0x1]
    650046e0:	cmp    DWORD PTR [rax-0x10],ebp
    650046e3:	jle    0x65004788
    650046e9:	mov    dx,0x7b
    650046ed:	mov    rcx,rdi
    650046f0:	call   0x6500bbc0
    650046f5:	mov    rdx,rax
    650046f8:	mov    rcx,rdi
    650046fb:	call   0x6500bad0
    65004700:	mov    r11,QWORD PTR [rdi]
    65004703:	mov    rax,r11
    65004706:	mov    rbx,rbp
    65004709:	movzx  ecx,WORD PTR [r11]
    6500470d:	test   cx,cx
    65004710:	je     0x6500477d
    65004712:	cmp    cx,0x7d
    65004716:	jne    0x65004722
    65004718:	test   rbx,rbx
    6500471b:	jne    0x65004725
    6500471d:	mov    rbx,rax
    65004720:	jmp    0x65004725
    65004722:	mov    rbx,rbp
    65004725:	add    rax,0x2
    65004729:	mov    cx,WORD PTR [rax]
    6500472c:	test   cx,cx
    6500472f:	jne    0x65004712
    65004731:	test   rbx,rbx
    65004734:	je     0x6500477d
    65004736:	sub    rbx,r11
    65004739:	sar    rbx,1
    6500473c:	mov    ecx,r12d
    6500473f:	sub    ecx,DWORD PTR [r11-0x8]
    65004743:	mov    eax,DWORD PTR [r11-0xc]
    65004747:	sub    eax,ebx
    65004749:	or     eax,ecx
    6500474b:	jge    0x65004757
    6500474d:	mov    edx,ebx
    6500474f:	mov    rcx,rdi
    65004752:	call   0x65002640
    65004757:	test   ebx,ebx
    65004759:	js     0x65004772
    6500475b:	mov    rax,QWORD PTR [rdi]
    6500475e:	cmp    ebx,DWORD PTR [rax-0xc]
    65004761:	jg     0x65004772
    65004763:	mov    DWORD PTR [rax-0x10],ebx
    65004766:	movsxd rcx,ebx
    65004769:	mov    rax,QWORD PTR [rdi]
    6500476c:	mov    WORD PTR [rax+rcx*2],bp
    65004770:	jmp    0x6500477d
    65004772:	mov    ecx,0x80070057
    65004777:	call   0x65001050
    6500477c:	int3   
    6500477d:	mov    rdx,rdi
    65004780:	mov    rcx,rdi
    65004783:	call   0x6500bad0
    65004788:	mov    rax,QWORD PTR [rdi]
    6500478b:	cmp    DWORD PTR [rax-0x8],r12d
    6500478f:	jle    0x6500479c
    65004791:	mov    edx,DWORD PTR [rax-0x10]
    65004794:	mov    rcx,rdi
    65004797:	call   0x65002130
    6500479c:	mov    rbx,QWORD PTR [rdi]
    6500479f:	xor    eax,eax
    650047a1:	lock cmpxchg DWORD PTR [rip+0x43642],r12d        # 0x65047dec
    650047aa:	jne    0x65004813
    650047ac:	lea    r8,[rip+0x35505]        # 0x65039cb8
    650047b3:	mov    edx,0xf
    650047b8:	lea    rcx,[rip+0x35529]        # 0x65039ce8
    650047bf:	call   0x6500bcb0
    650047c4:	mov    r12,rax
    650047c7:	lea    r8,[rip+0x3552a]        # 0x65039cf8
    650047ce:	mov    edx,0x6
    650047d3:	lea    rcx,[rip+0x35546]        # 0x65039d20
    650047da:	call   0x6500c660
    650047df:	mov    rcx,rax
    650047e2:	call   QWORD PTR [rip+0x2f918]        # 0x65034100
    650047e8:	add    DWORD PTR [rip+0x40159],0x1        # 0x65044948
    650047ef:	test   rax,rax
    650047f2:	je     0x6500480a
    650047f4:	mov    rdx,r12
    650047f7:	mov    rcx,rax
    650047fa:	call   QWORD PTR [rip+0x2f908]        # 0x65034108
    65004800:	mov    rbp,rax
    65004803:	add    DWORD PTR [rip+0x40142],0x1        # 0x6504494c
    6500480a:	mov    QWORD PTR [rip+0x436f7],rbp        # 0x65047f08
    65004811:	jmp    0x6500481a
    65004813:	mov    rbp,QWORD PTR [rip+0x436ee]        # 0x65047f08
    6500481a:	lea    rdx,[rsp+0x40]
    6500481f:	mov    rcx,rbx
    65004822:	call   rbp
    65004824:	test   eax,eax
    65004826:	je     0x6500488f
    65004828:	lea    rcx,[rsp+0x20]
    6500482d:	mov    eax,DWORD PTR [rip+0x308f5]        # 0x65035128
    65004833:	mov    DWORD PTR [rcx],eax
    65004835:	mov    eax,DWORD PTR [rip+0x308f1]        # 0x6503512c
    6500483b:	mov    DWORD PTR [rcx+0x4],eax
    6500483e:	mov    eax,DWORD PTR [rip+0x308ec]        # 0x65035130
    65004844:	mov    DWORD PTR [rcx+0x8],eax
    65004847:	mov    eax,DWORD PTR [rip+0x308e7]        # 0x65035134
    6500484d:	mov    DWORD PTR [rcx+0xc],eax
    65004850:	mov    rdx,QWORD PTR [rdi]
    65004853:	sub    rdx,0x18
    65004857:	or     eax,0xffffffff
    6500485a:	lock xadd DWORD PTR [rdx+0x10],eax
    6500485f:	add    eax,0xffffffff
    65004862:	test   eax,eax
    65004864:	jg     0x6500486f
    65004866:	mov    rcx,QWORD PTR [rdx]
    65004869:	mov    rax,QWORD PTR [rcx]
    6500486c:	call   QWORD PTR [rax+0x8]
    6500486f:	lea    rcx,[rsp+0x20]
    65004874:	mov    eax,DWORD PTR [rcx]
    65004876:	mov    DWORD PTR [rsi],eax
    65004878:	mov    eax,DWORD PTR [rcx+0x4]
    6500487b:	mov    DWORD PTR [rsi+0x4],eax
    6500487e:	mov    eax,DWORD PTR [rcx+0x8]
    65004881:	mov    DWORD PTR [rsi+0x8],eax
    65004884:	mov    eax,DWORD PTR [rcx+0xc]
    65004887:	mov    DWORD PTR [rsi+0xc],eax
    6500488a:	mov    rax,rsi
    6500488d:	jmp    0x650048d7
    6500488f:	movaps xmm0,XMMWORD PTR [rsp+0x40]
    65004894:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    6500489a:	mov    rdx,QWORD PTR [rdi]
    6500489d:	sub    rdx,0x18
    650048a1:	or     eax,0xffffffff
    650048a4:	lock xadd DWORD PTR [rdx+0x10],eax
    650048a9:	add    eax,0xffffffff
    650048ac:	test   eax,eax
    650048ae:	jg     0x650048b9
    650048b0:	mov    rcx,QWORD PTR [rdx]
    650048b3:	mov    rax,QWORD PTR [rcx]
    650048b6:	call   QWORD PTR [rax+0x8]
    650048b9:	lea    rcx,[rsp+0x20]
    650048be:	mov    eax,DWORD PTR [rcx]
    650048c0:	mov    DWORD PTR [rsi],eax
    650048c2:	mov    eax,DWORD PTR [rcx+0x4]
    650048c5:	mov    DWORD PTR [rsi+0x4],eax
    650048c8:	mov    eax,DWORD PTR [rcx+0x8]
    650048cb:	mov    DWORD PTR [rsi+0x8],eax
    650048ce:	mov    eax,DWORD PTR [rcx+0xc]
    650048d1:	mov    DWORD PTR [rsi+0xc],eax
    650048d4:	mov    rax,rsi
    650048d7:	mov    rcx,QWORD PTR [rsp+0x50]
    650048dc:	xor    rcx,rsp
    650048df:	call   0x6501e650
    650048e4:	lea    r11,[rsp+0x60]
    650048e9:	mov    rbx,QWORD PTR [r11+0x20]
    650048ed:	mov    rbp,QWORD PTR [r11+0x30]
    650048f1:	mov    rsp,r11
    650048f4:	pop    r12
    650048f6:	pop    rdi
    650048f7:	pop    rsi
    650048f8:	ret    
    650048f9:	int3   
    650048fa:	int3   
    650048fb:	int3   
    650048fc:	int3   
    650048fd:	int3   
    650048fe:	int3   
    650048ff:	int3   
    65004900:	rex push rbp
    65004902:	sub    rsp,0x20
    65004906:	mov    rbp,rdx
    65004909:	mov    rcx,QWORD PTR [rbp+0x20]
    6500490d:	call   0x65001cb0
    65004912:	add    rsp,0x20
    65004916:	pop    rbp
    65004917:	ret    
    65004918:	int3   
    65004919:	int3   
    6500491a:	int3   
    6500491b:	int3   
    6500491c:	int3   
    6500491d:	int3   
    6500491e:	int3   
    6500491f:	int3   
    65004920:	rex push rbp
    65004922:	push   rsi
    65004923:	push   rdi
    65004924:	push   r12
    65004926:	push   r13
    65004928:	sub    rsp,0x60
    6500492c:	lea    rbp,[rsp+0x30]
    65004931:	mov    QWORD PTR [rbp+0x8],0xfffffffffffffffe
    65004939:	mov    QWORD PTR [rbp+0x70],rbx
    6500493d:	mov    rax,QWORD PTR [rip+0x3e7dc]        # 0x65043120
    65004944:	xor    rax,rbp
    65004947:	mov    QWORD PTR [rbp+0x28],rax
    6500494b:	movzx  edi,dl
    6500494e:	mov    rsi,rcx
    65004951:	mov    QWORD PTR [rbp+0x10],rcx
    65004955:	xor    r13d,r13d
    65004958:	mov    DWORD PTR [rbp+0x0],r13d
    6500495c:	call   QWORD PTR [rip+0x3e736]        # 0x65043098
    65004962:	mov    r12d,eax
    65004965:	lea    r8,[rip+0x3276c]        # 0x650370d8
    6500496c:	lea    edx,[r13+0x6]
    65004970:	lea    rcx,[rip+0x32795]        # 0x6503710c
    65004977:	call   0x6500bcb0
    6500497c:	mov    rdx,rax
    6500497f:	mov    r8d,edi
    65004982:	lea    rcx,[rbp+0x18]
    65004986:	call   0x6501f550
    6500498b:	lea    rcx,[rbp+0x18]
    6500498f:	call   QWORD PTR [rip+0x2f6f3]        # 0x65034088
    65004995:	lea    edx,[rax+0x1]
    65004998:	cmp    edx,0x3fffffff
    6500499e:	jle    0x650049a5
    650049a0:	mov    rbx,r13
    650049a3:	jmp    0x65004a02
    650049a5:	movsxd rax,edx
    650049a8:	add    rax,rax
    650049ab:	lea    rcx,[rax+0xf]
    650049af:	cmp    rcx,rax
    650049b2:	ja     0x650049be
    650049b4:	movabs rcx,0xffffffffffffff0
    650049be:	and    rcx,0xfffffffffffffff0
    650049c2:	mov    rax,rcx
    650049c5:	call   0x65033230
    650049ca:	sub    rsp,rcx
    650049cd:	lea    rbx,[rsp+0x30]
    650049d2:	test   rbx,rbx
    650049d5:	je     0x650049ff
    650049d7:	mov    WORD PTR [rbx],r13w
    650049db:	mov    DWORD PTR [rsp+0x28],edx
    650049df:	mov    QWORD PTR [rsp+0x20],rbx
    650049e4:	or     r9d,0xffffffff
    650049e8:	lea    r8,[rbp+0x18]
    650049ec:	xor    edx,edx
    650049ee:	mov    ecx,r12d
    650049f1:	call   QWORD PTR [rip+0x2f631]        # 0x65034028
    650049f7:	test   eax,eax
    650049f9:	cmove  rbx,r13
    650049fd:	jmp    0x65004a02
    650049ff:	mov    rbx,r13
    65004a02:	lea    rcx,[rip+0x3e697]        # 0x650430a0
    65004a09:	mov    rax,QWORD PTR [rip+0x3e690]        # 0x650430a0
    65004a10:	call   QWORD PTR [rax+0x18]
    65004a13:	add    rax,0x18
    65004a17:	mov    QWORD PTR [rsi],rax
    65004a1a:	test   rbx,rbx
    65004a1d:	je     0x65004a67
    65004a1f:	test   rbx,0xffffffffffff0000
    65004a26:	jne    0x65004a52
    65004a28:	movzx  edi,bx
    65004a2b:	xor    edx,edx
    65004a2d:	mov    ecx,edi
    65004a2f:	call   0x650026f0
    65004a34:	test   rax,rax
    65004a37:	je     0x65004a4d
    65004a39:	mov    r8d,edi
    65004a3c:	mov    rdx,rax
    65004a3f:	mov    rcx,rsi
    65004a42:	call   0x65003e00
    65004a47:	nop
    65004a48:	mov    rax,rsi
    65004a4b:	jmp    0x65004a7c
    65004a4d:	mov    rax,rsi
    65004a50:	jmp    0x65004a7c
    65004a52:	xor    eax,eax
    65004a54:	or     rcx,0xffffffffffffffff
    65004a58:	mov    rdi,rbx
    65004a5b:	repnz scas ax,WORD PTR es:[rdi]
    65004a5e:	not    rcx
    65004a61:	sub    rcx,0x1
    65004a65:	jmp    0x65004a6a
    65004a67:	mov    ecx,r13d
    65004a6a:	mov    r8d,ecx
    65004a6d:	mov    rdx,rbx
    65004a70:	mov    rcx,rsi
    65004a73:	call   0x65003f90
    65004a78:	nop
    65004a79:	mov    rax,rsi
    65004a7c:	mov    rcx,QWORD PTR [rbp+0x28]
    65004a80:	xor    rcx,rbp
    65004a83:	call   0x6501e650
    65004a88:	mov    rbx,QWORD PTR [rbp+0x70]
    65004a8c:	lea    rsp,[rbp+0x30]
    65004a90:	pop    r13
    65004a92:	pop    r12
    65004a94:	pop    rdi
    65004a95:	pop    rsi
    65004a96:	pop    rbp
    65004a97:	ret    
    65004a98:	int3   
    65004a99:	int3   
    65004a9a:	int3   
    65004a9b:	int3   
    65004a9c:	int3   
    65004a9d:	int3   
    65004a9e:	int3   
    65004a9f:	int3   
    65004aa0:	rex push rbp
    65004aa2:	sub    rsp,0x20
    65004aa6:	lea    rbp,[rdx+0x30]
    65004aaa:	mov    rcx,QWORD PTR [rbp+0x10]
    65004aae:	call   0x65002100
    65004ab3:	add    rsp,0x20
    65004ab7:	pop    rbp
    65004ab8:	ret    
    65004ab9:	int3   
    65004aba:	int3   
    65004abb:	int3   
    65004abc:	int3   
    65004abd:	int3   
    65004abe:	int3   
    65004abf:	int3   
    65004ac0:	mov    QWORD PTR [rsp+0x8],rcx
    65004ac5:	push   rbx
    65004ac6:	push   rbp
    65004ac7:	push   rsi
    65004ac8:	push   rdi
    65004ac9:	push   r12
    65004acb:	sub    rsp,0x50
    65004acf:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
    65004ad8:	mov    rsi,rdx
    65004adb:	mov    rbx,rcx
    65004ade:	mov    DWORD PTR [rsp+0x90],0x0
    65004ae9:	lea    rcx,[rip+0x3e5b0]        # 0x650430a0
    65004af0:	mov    rax,QWORD PTR [rip+0x3e5a9]        # 0x650430a0
    65004af7:	call   QWORD PTR [rax+0x18]
    65004afa:	add    rax,0x18
    65004afe:	mov    QWORD PTR [rbx],rax
    65004b01:	mov    DWORD PTR [rsp+0x90],0x1
    65004b0c:	mov    rax,QWORD PTR [rsi]
    65004b0f:	sub    rax,0x18
    65004b13:	cmp    DWORD PTR [rax+0x10],0x1
    65004b17:	jle    0x65004b24
    65004b19:	mov    edx,DWORD PTR [rax+0x8]
    65004b1c:	mov    rcx,rsi
    65004b1f:	call   0x65002130
    65004b24:	mov    rsi,QWORD PTR [rsi]
    65004b27:	movzx  eax,WORD PTR [rsi]
    65004b2a:	test   ax,ax
    65004b2d:	je     0x65004f61
    65004b33:	cmp    ax,0x41
    65004b37:	jb     0x65004b9a
    65004b39:	cmp    ax,0x5a
    65004b3d:	ja     0x65004b9a
    65004b3f:	movzx  r12d,BYTE PTR [rsi]
    65004b43:	mov    rax,QWORD PTR [rbx]
    65004b46:	mov    ebp,DWORD PTR [rax-0x10]
    65004b49:	lea    edi,[rbp+0x1]
    65004b4c:	mov    ecx,0x1
    65004b51:	sub    ecx,DWORD PTR [rax-0x8]
    65004b54:	mov    eax,DWORD PTR [rax-0xc]
    65004b57:	sub    eax,edi
    65004b59:	or     eax,ecx
    65004b5b:	jge    0x65004b67
    65004b5d:	mov    edx,edi
    65004b5f:	mov    rcx,rbx
    65004b62:	call   0x65002640
    65004b67:	mov    rdx,QWORD PTR [rbx]
    65004b6a:	movsx  ecx,r12b
    65004b6e:	mov    WORD PTR [rdx+rbp*2],cx
    65004b72:	test   edi,edi
    65004b74:	js     0x65004f2a
    65004b7a:	mov    rax,QWORD PTR [rbx]
    65004b7d:	cmp    edi,DWORD PTR [rax-0xc]
    65004b80:	jg     0x65004f2a
    65004b86:	mov    DWORD PTR [rax-0x10],edi
    65004b89:	movsxd rcx,edi
    65004b8c:	mov    rax,QWORD PTR [rbx]
    65004b8f:	mov    WORD PTR [rax+rcx*2],0x0
    65004b95:	jmp    0x65004f19
    65004b9a:	cmp    ax,0x61
    65004b9e:	jb     0x65004c01
    65004ba0:	cmp    ax,0x7a
    65004ba4:	ja     0x65004c01
    65004ba6:	movzx  r12d,BYTE PTR [rsi]
    65004baa:	mov    rax,QWORD PTR [rbx]
    65004bad:	mov    ebp,DWORD PTR [rax-0x10]
    65004bb0:	lea    edi,[rbp+0x1]
    65004bb3:	mov    ecx,0x1
    65004bb8:	sub    ecx,DWORD PTR [rax-0x8]
    65004bbb:	mov    eax,DWORD PTR [rax-0xc]
    65004bbe:	sub    eax,edi
    65004bc0:	or     eax,ecx
    65004bc2:	jge    0x65004bce
    65004bc4:	mov    edx,edi
    65004bc6:	mov    rcx,rbx
    65004bc9:	call   0x65002640
    65004bce:	mov    rdx,QWORD PTR [rbx]
    65004bd1:	movsx  ecx,r12b
    65004bd5:	mov    WORD PTR [rdx+rbp*2],cx
    65004bd9:	test   edi,edi
    65004bdb:	js     0x65004f35
    65004be1:	mov    rax,QWORD PTR [rbx]
    65004be4:	cmp    edi,DWORD PTR [rax-0xc]
    65004be7:	jg     0x65004f35
    65004bed:	mov    DWORD PTR [rax-0x10],edi
    65004bf0:	movsxd rcx,edi
    65004bf3:	mov    rax,QWORD PTR [rbx]
    65004bf6:	mov    WORD PTR [rax+rcx*2],0x0
    65004bfc:	jmp    0x65004f19
    65004c01:	cmp    ax,0x30
    65004c05:	jb     0x65004c68
    65004c07:	cmp    ax,0x39
    65004c0b:	ja     0x65004c68
    65004c0d:	movzx  r12d,BYTE PTR [rsi]
    65004c11:	mov    rax,QWORD PTR [rbx]
    65004c14:	mov    ebp,DWORD PTR [rax-0x10]
    65004c17:	lea    edi,[rbp+0x1]
    65004c1a:	mov    ecx,0x1
    65004c1f:	sub    ecx,DWORD PTR [rax-0x8]
    65004c22:	mov    eax,DWORD PTR [rax-0xc]
    65004c25:	sub    eax,edi
    65004c27:	or     eax,ecx
    65004c29:	jge    0x65004c35
    65004c2b:	mov    edx,edi
    65004c2d:	mov    rcx,rbx
    65004c30:	call   0x65002640
    65004c35:	mov    rdx,QWORD PTR [rbx]
    65004c38:	movsx  ecx,r12b
    65004c3c:	mov    WORD PTR [rdx+rbp*2],cx
    65004c40:	test   edi,edi
    65004c42:	js     0x65004f40
    65004c48:	mov    rax,QWORD PTR [rbx]
    65004c4b:	cmp    edi,DWORD PTR [rax-0xc]
    65004c4e:	jg     0x65004f40
    65004c54:	mov    DWORD PTR [rax-0x10],edi
    65004c57:	movsxd rcx,edi
    65004c5a:	mov    rax,QWORD PTR [rbx]
    65004c5d:	mov    WORD PTR [rax+rcx*2],0x0
    65004c63:	jmp    0x65004f19
    65004c68:	cmp    ax,0x20
    65004c6c:	jne    0x65004cc3
    65004c6e:	mov    rax,QWORD PTR [rbx]
    65004c71:	mov    ebp,DWORD PTR [rax-0x10]
    65004c74:	lea    edi,[rbp+0x1]
    65004c77:	mov    ecx,0x1
    65004c7c:	sub    ecx,DWORD PTR [rax-0x8]
    65004c7f:	mov    eax,DWORD PTR [rax-0xc]
    65004c82:	sub    eax,edi
    65004c84:	or     eax,ecx
    65004c86:	jge    0x65004c92
    65004c88:	mov    edx,edi
    65004c8a:	mov    rcx,rbx
    65004c8d:	call   0x65002640
    65004c92:	mov    rcx,QWORD PTR [rbx]
    65004c95:	mov    WORD PTR [rcx+rbp*2],0x2b
    65004c9b:	test   edi,edi
    65004c9d:	js     0x65004f4b
    65004ca3:	mov    rax,QWORD PTR [rbx]
    65004ca6:	cmp    edi,DWORD PTR [rax-0xc]
    65004ca9:	jg     0x65004f4b
    65004caf:	mov    DWORD PTR [rax-0x10],edi
    65004cb2:	movsxd rcx,edi
    65004cb5:	mov    rax,QWORD PTR [rbx]
    65004cb8:	mov    WORD PTR [rax+rcx*2],0x0
    65004cbe:	jmp    0x65004f19
    65004cc3:	cmp    ax,0x2d
    65004cc7:	je     0x65004ecb
    65004ccd:	cmp    ax,0x5f
    65004cd1:	je     0x65004ecb
    65004cd7:	cmp    ax,0x2e
    65004cdb:	je     0x65004ecb
    65004ce1:	cmp    ax,0x21
    65004ce5:	je     0x65004ecb
    65004ceb:	cmp    ax,0x7e
    65004cef:	je     0x65004ecb
    65004cf5:	cmp    ax,0x2a
    65004cf9:	je     0x65004ecb
    65004cff:	cmp    ax,0x27
    65004d03:	je     0x65004ecb
    65004d09:	cmp    ax,0x28
    65004d0d:	je     0x65004ecb
    65004d13:	cmp    ax,0x29
    65004d17:	je     0x65004ecb
    65004d1d:	cmp    ax,0x7f
    65004d21:	ja     0x65004d6d
    65004d23:	movzx  edx,BYTE PTR [rsi]
    65004d26:	lea    rcx,[rsp+0x98]
    65004d2e:	call   0x65004920
    65004d33:	nop
    65004d34:	mov    rdx,rax
    65004d37:	mov    rcx,rbx
    65004d3a:	call   0x650039f0
    65004d3f:	nop
    65004d40:	mov    rdx,QWORD PTR [rsp+0x98]
    65004d48:	add    rdx,0xffffffffffffffe8
    65004d4c:	or     eax,0xffffffff
    65004d4f:	lock xadd DWORD PTR [rdx+0x10],eax
    65004d54:	add    eax,0xffffffff
    65004d57:	test   eax,eax
    65004d59:	jg     0x65004f19
    65004d5f:	mov    rcx,QWORD PTR [rdx]
    65004d62:	mov    rax,QWORD PTR [rcx]
    65004d65:	call   QWORD PTR [rax+0x8]
    65004d68:	jmp    0x65004f19
    65004d6d:	cmp    ax,0x7ff
    65004d71:	ja     0x65004e02
    65004d77:	shr    ax,0x6
    65004d7b:	or     al,0xc0
    65004d7d:	movzx  edx,al
    65004d80:	lea    rcx,[rsp+0x20]
    65004d85:	call   0x65004920
    65004d8a:	nop
    65004d8b:	mov    rdx,rax
    65004d8e:	mov    rcx,rbx
    65004d91:	call   0x650039f0
    65004d96:	nop
    65004d97:	mov    rdx,QWORD PTR [rsp+0x20]
    65004d9c:	add    rdx,0xffffffffffffffe8
    65004da0:	or     eax,0xffffffff
    65004da3:	lock xadd DWORD PTR [rdx+0x10],eax
    65004da8:	add    eax,0xffffffff
    65004dab:	test   eax,eax
    65004dad:	jg     0x65004db8
    65004daf:	mov    rcx,QWORD PTR [rdx]
    65004db2:	mov    rax,QWORD PTR [rcx]
    65004db5:	call   QWORD PTR [rax+0x8]
    65004db8:	movzx  edx,BYTE PTR [rsi]
    65004dbb:	and    dl,0x3f
    65004dbe:	or     dl,0x80
    65004dc1:	lea    rcx,[rsp+0x28]
    65004dc6:	call   0x65004920
    65004dcb:	nop
    65004dcc:	mov    rdx,rax
    65004dcf:	mov    rcx,rbx
    65004dd2:	call   0x650039f0
    65004dd7:	nop
    65004dd8:	mov    rdx,QWORD PTR [rsp+0x28]
    65004ddd:	add    rdx,0xffffffffffffffe8
    65004de1:	or     eax,0xffffffff
    65004de4:	lock xadd DWORD PTR [rdx+0x10],eax
    65004de9:	add    eax,0xffffffff
    65004dec:	test   eax,eax
    65004dee:	jg     0x65004f19
    65004df4:	mov    rcx,QWORD PTR [rdx]
    65004df7:	mov    rax,QWORD PTR [rcx]
    65004dfa:	call   QWORD PTR [rax+0x8]
    65004dfd:	jmp    0x65004f19
    65004e02:	shr    ax,0xc
    65004e06:	or     al,0xe0
    65004e08:	movzx  edx,al
    65004e0b:	lea    rcx,[rsp+0x30]
    65004e10:	call   0x65004920
    65004e15:	nop
    65004e16:	mov    rdx,rax
    65004e19:	mov    rcx,rbx
    65004e1c:	call   0x650039f0
    65004e21:	nop
    65004e22:	mov    rdx,QWORD PTR [rsp+0x30]
    65004e27:	add    rdx,0xffffffffffffffe8
    65004e2b:	or     eax,0xffffffff
    65004e2e:	lock xadd DWORD PTR [rdx+0x10],eax
    65004e33:	add    eax,0xffffffff
    65004e36:	test   eax,eax
    65004e38:	jg     0x65004e43
    65004e3a:	mov    rcx,QWORD PTR [rdx]
    65004e3d:	mov    rax,QWORD PTR [rcx]
    65004e40:	call   QWORD PTR [rax+0x8]
    65004e43:	movzx  edx,WORD PTR [rsi]
    65004e46:	shr    dx,0x6
    65004e4a:	and    dl,0x3f
    65004e4d:	or     dl,0x80
    65004e50:	lea    rcx,[rsp+0x38]
    65004e55:	call   0x65004920
    65004e5a:	nop
    65004e5b:	mov    rdx,rax
    65004e5e:	mov    rcx,rbx
    65004e61:	call   0x650039f0
    65004e66:	nop
    65004e67:	mov    rdx,QWORD PTR [rsp+0x38]
    65004e6c:	add    rdx,0xffffffffffffffe8
    65004e70:	or     eax,0xffffffff
    65004e73:	lock xadd DWORD PTR [rdx+0x10],eax
    65004e78:	add    eax,0xffffffff
    65004e7b:	test   eax,eax
    65004e7d:	jg     0x65004e88
    65004e7f:	mov    rcx,QWORD PTR [rdx]
    65004e82:	mov    rax,QWORD PTR [rcx]
    65004e85:	call   QWORD PTR [rax+0x8]
    65004e88:	movzx  edx,BYTE PTR [rsi]
    65004e8b:	and    dl,0x3f
    65004e8e:	or     dl,0x80
    65004e91:	lea    rcx,[rsp+0x40]
    65004e96:	call   0x65004920
    65004e9b:	nop
    65004e9c:	mov    rdx,rax
    65004e9f:	mov    rcx,rbx
    65004ea2:	call   0x650039f0
    65004ea7:	nop
    65004ea8:	mov    rdx,QWORD PTR [rsp+0x40]
    65004ead:	add    rdx,0xffffffffffffffe8
    65004eb1:	or     eax,0xffffffff
    65004eb4:	lock xadd DWORD PTR [rdx+0x10],eax
    65004eb9:	add    eax,0xffffffff
    65004ebc:	test   eax,eax
    65004ebe:	jg     0x65004f19
    65004ec0:	mov    rcx,QWORD PTR [rdx]
    65004ec3:	mov    rax,QWORD PTR [rcx]
    65004ec6:	call   QWORD PTR [rax+0x8]
    65004ec9:	jmp    0x65004f19
    65004ecb:	movzx  r12d,BYTE PTR [rsi]
    65004ecf:	mov    rax,QWORD PTR [rbx]
    65004ed2:	mov    ebp,DWORD PTR [rax-0x10]
    65004ed5:	lea    edi,[rbp+0x1]
    65004ed8:	mov    ecx,0x1
    65004edd:	sub    ecx,DWORD PTR [rax-0x8]
    65004ee0:	mov    eax,DWORD PTR [rax-0xc]
    65004ee3:	sub    eax,edi
    65004ee5:	or     eax,ecx
    65004ee7:	jge    0x65004ef3
    65004ee9:	mov    edx,edi
    65004eeb:	mov    rcx,rbx
    65004eee:	call   0x65002640
    65004ef3:	mov    rdx,QWORD PTR [rbx]
    65004ef6:	movsx  ecx,r12b
    65004efa:	mov    WORD PTR [rdx+rbp*2],cx
    65004efe:	test   edi,edi
    65004f00:	js     0x65004f56
    65004f02:	mov    rax,QWORD PTR [rbx]
    65004f05:	cmp    edi,DWORD PTR [rax-0xc]
    65004f08:	jg     0x65004f56
    65004f0a:	mov    DWORD PTR [rax-0x10],edi
    65004f0d:	movsxd rcx,edi
    65004f10:	mov    rax,QWORD PTR [rbx]
    65004f13:	mov    WORD PTR [rax+rcx*2],0x0
    65004f19:	add    rsi,0x2
    65004f1d:	mov    ax,WORD PTR [rsi]
    65004f20:	test   ax,ax
    65004f23:	je     0x65004f61
    65004f25:	jmp    0x65004b33
    65004f2a:	mov    ecx,0x80070057
    65004f2f:	call   0x65001050
    65004f34:	int3   
    65004f35:	mov    ecx,0x80070057
    65004f3a:	call   0x65001050
    65004f3f:	int3   
    65004f40:	mov    ecx,0x80070057
    65004f45:	call   0x65001050
    65004f4a:	int3   
    65004f4b:	mov    ecx,0x80070057
    65004f50:	call   0x65001050
    65004f55:	int3   
    65004f56:	mov    ecx,0x80070057
    65004f5b:	call   0x65001050
    65004f60:	int3   
    65004f61:	mov    rax,rbx
    65004f64:	add    rsp,0x50
    65004f68:	pop    r12
    65004f6a:	pop    rdi
    65004f6b:	pop    rsi
    65004f6c:	pop    rbp
    65004f6d:	pop    rbx
    65004f6e:	ret    
    65004f6f:	int3   
    65004f70:	rex push rbp
    65004f72:	sub    rsp,0x20
    65004f76:	mov    rbp,rdx
    65004f79:	mov    eax,DWORD PTR [rbp+0x90]
    65004f7f:	and    eax,0x1
    65004f82:	test   eax,eax
    65004f84:	je     0x65004f99
    65004f86:	and    DWORD PTR [rbp+0x90],0xfffffffe
    65004f8d:	mov    rcx,QWORD PTR [rbp+0x80]
    65004f94:	call   0x65001cb0
    65004f99:	add    rsp,0x20
    65004f9d:	pop    rbp
    65004f9e:	ret    
    65004f9f:	int3   
    65004fa0:	rex push rbp
    65004fa2:	sub    rsp,0x20
    65004fa6:	mov    rbp,rdx
    65004fa9:	lea    rcx,[rbp+0x98]
    65004fb0:	call   0x65001cb0
    65004fb5:	add    rsp,0x20
    65004fb9:	pop    rbp
    65004fba:	ret    
    65004fbb:	int3   
    65004fbc:	int3   
    65004fbd:	int3   
    65004fbe:	int3   
    65004fbf:	int3   
    65004fc0:	rex push rbp
    65004fc2:	sub    rsp,0x20
    65004fc6:	mov    rbp,rdx
    65004fc9:	lea    rcx,[rbp+0x20]
    65004fcd:	call   0x65001cb0
    65004fd2:	add    rsp,0x20
    65004fd6:	pop    rbp
    65004fd7:	ret    
    65004fd8:	int3   
    65004fd9:	int3   
    65004fda:	int3   
    65004fdb:	int3   
    65004fdc:	int3   
    65004fdd:	int3   
    65004fde:	int3   
    65004fdf:	int3   
    65004fe0:	rex push rbp
    65004fe2:	sub    rsp,0x20
    65004fe6:	mov    rbp,rdx
    65004fe9:	lea    rcx,[rbp+0x28]
    65004fed:	call   0x65001cb0
    65004ff2:	add    rsp,0x20
    65004ff6:	pop    rbp
    65004ff7:	ret    
    65004ff8:	int3   
    65004ff9:	int3   
    65004ffa:	int3   
    65004ffb:	int3   
    65004ffc:	int3   
    65004ffd:	int3   
    65004ffe:	int3   
    65004fff:	int3   
    65005000:	rex push rbp
    65005002:	sub    rsp,0x20
    65005006:	mov    rbp,rdx
    65005009:	lea    rcx,[rbp+0x30]
    6500500d:	call   0x65001cb0
    65005012:	add    rsp,0x20
    65005016:	pop    rbp
    65005017:	ret    
    65005018:	int3   
    65005019:	int3   
    6500501a:	int3   
    6500501b:	int3   
    6500501c:	int3   
    6500501d:	int3   
    6500501e:	int3   
    6500501f:	int3   
    65005020:	rex push rbp
    65005022:	sub    rsp,0x20
    65005026:	mov    rbp,rdx
    65005029:	lea    rcx,[rbp+0x38]
    6500502d:	call   0x65001cb0
    65005032:	add    rsp,0x20
    65005036:	pop    rbp
    65005037:	ret    
    65005038:	int3   
    65005039:	int3   
    6500503a:	int3   
    6500503b:	int3   
    6500503c:	int3   
    6500503d:	int3   
    6500503e:	int3   
    6500503f:	int3   
    65005040:	rex push rbp
    65005042:	sub    rsp,0x20
    65005046:	mov    rbp,rdx
    65005049:	lea    rcx,[rbp+0x40]
    6500504d:	call   0x65001cb0
    65005052:	add    rsp,0x20
    65005056:	pop    rbp
    65005057:	ret    
    65005058:	int3   
    65005059:	int3   
    6500505a:	int3   
    6500505b:	int3   
    6500505c:	int3   
    6500505d:	int3   
    6500505e:	int3   
    6500505f:	int3   
    65005060:	mov    rax,rsp
    65005063:	mov    QWORD PTR [rax+0x8],rcx
    65005067:	push   rsi
    65005068:	push   rdi
    65005069:	push   r12
    6500506b:	sub    rsp,0x100
    65005072:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
    6500507b:	mov    QWORD PTR [rax+0x10],rbx
    6500507f:	mov    QWORD PTR [rax+0x20],rbp
    65005083:	movzx  edi,dl
    65005086:	mov    rbx,rcx
    65005089:	xor    esi,esi
    6500508b:	mov    DWORD PTR [rax+0x18],esi
    6500508e:	lea    rcx,[rip+0x3e00b]        # 0x650430a0
    65005095:	mov    rax,QWORD PTR [rip+0x3e004]        # 0x650430a0
    6500509c:	call   QWORD PTR [rax+0x18]
    6500509f:	add    rax,0x18
    650050a3:	mov    QWORD PTR [rbx],rax
    650050a6:	mov    ebp,0x1
    650050ab:	mov    DWORD PTR [rsp+0x130],ebp
    650050b2:	test   dil,dil
    650050b5:	je     0x65005290
    650050bb:	mov    ecx,ebp
    650050bd:	sub    ecx,DWORD PTR [rax-0x8]
    650050c0:	mov    eax,DWORD PTR [rax-0xc]
    650050c3:	sub    eax,0x800
    650050c8:	or     eax,ecx
    650050ca:	jge    0x650050d9
    650050cc:	mov    edx,0x800
    650050d1:	mov    rcx,rbx
    650050d4:	call   0x65002640
    650050d9:	mov    rdi,QWORD PTR [rbx]
    650050dc:	xor    eax,eax
    650050de:	lock cmpxchg DWORD PTR [rip+0x42c8a],ebp        # 0x65047d70
    650050e6:	jne    0x6500514f
    650050e8:	lea    r8,[rip+0x345e9]        # 0x650396d8
    650050ef:	mov    edx,0x18
    650050f4:	lea    rcx,[rip+0x3460d]        # 0x65039708
    650050fb:	call   0x6500bcb0
    65005100:	mov    r12,rax
    65005103:	lea    r8,[rip+0x3461e]        # 0x65039728
    6500510a:	mov    edx,0x8
    6500510f:	lea    rcx,[rip+0x341c2]        # 0x650392d8
    65005116:	call   0x6500c660
    6500511b:	mov    rcx,rax
    6500511e:	call   QWORD PTR [rip+0x2efdc]        # 0x65034100
    65005124:	add    DWORD PTR [rip+0x3f81e],ebp        # 0x65044948
    6500512a:	test   rax,rax
    6500512d:	je     0x65005143
    6500512f:	mov    rdx,r12
    65005132:	mov    rcx,rax
    65005135:	call   QWORD PTR [rip+0x2efcd]        # 0x65034108
    6500513b:	add    DWORD PTR [rip+0x3f80b],ebp        # 0x6504494c
    65005141:	jmp    0x65005146
    65005143:	mov    rax,rsi
    65005146:	mov    QWORD PTR [rip+0x42d63],rax        # 0x65047eb0
    6500514d:	jmp    0x65005156
    6500514f:	mov    rax,QWORD PTR [rip+0x42d5a]        # 0x65047eb0
    65005156:	mov    edx,0x800
    6500515b:	mov    rcx,rdi
    6500515e:	call   rax
    65005160:	test   eax,eax
    65005162:	jne    0x6500546e
    65005168:	lea    r8,[rip+0x31fa9]        # 0x65037118
    6500516f:	lea    edx,[rax+0x22]
    65005172:	lea    rcx,[rip+0x31fcf]        # 0x65037148
    65005179:	call   0x6500bcb0
    6500517e:	mov    rbx,rax
    65005181:	mov    edx,0xf
    65005186:	mov    QWORD PTR [rsp+0x68],rdx
    6500518b:	mov    r8,rsi
    6500518e:	mov    QWORD PTR [rsp+0x60],rsi
    65005193:	mov    BYTE PTR [rsp+0x50],r8b
    65005198:	xor    eax,eax
    6500519a:	or     rcx,0xffffffffffffffff
    6500519e:	mov    rdi,rbx
    650051a1:	repnz scas al,BYTE PTR es:[rdi]
    650051a3:	not    rcx
    650051a6:	sub    rcx,rbp
    650051a9:	mov    rdi,rcx
    650051ac:	cmp    rcx,0xfffffffffffffffe
    650051b0:	jbe    0x650051c1
    650051b2:	call   0x6501d150
    650051b7:	mov    rdx,QWORD PTR [rsp+0x68]
    650051bc:	mov    r8,QWORD PTR [rsp+0x60]
    650051c1:	cmp    rdx,rdi
    650051c4:	jae    0x650051da
    650051c6:	mov    rdx,rdi
    650051c9:	lea    rcx,[rsp+0x48]
    650051ce:	call   0x65002330
    650051d3:	mov    rdx,QWORD PTR [rsp+0x68]
    650051d8:	jmp    0x650051f8
    650051da:	test   rdi,rdi
    650051dd:	jne    0x650051f8
    650051df:	mov    QWORD PTR [rsp+0x60],rsi
    650051e4:	lea    rax,[rsp+0x50]
    650051e9:	cmp    rdx,0x10
    650051ed:	cmovae rax,QWORD PTR [rsp+0x50]
    650051f3:	mov    BYTE PTR [rax],dil
    650051f6:	jmp    0x65005231
    650051f8:	test   rdi,rdi
    650051fb:	je     0x65005231
    650051fd:	lea    rcx,[rsp+0x50]
    65005202:	cmp    rdx,0x10
    65005206:	cmovae rcx,QWORD PTR [rsp+0x50]
    6500520c:	mov    r9,rdi
    6500520f:	mov    r8,rbx
    65005212:	call   0x6501d7b0
    65005217:	mov    QWORD PTR [rsp+0x60],rdi
    6500521c:	lea    rax,[rsp+0x50]
    65005221:	cmp    QWORD PTR [rsp+0x68],0x10
    65005227:	cmovae rax,QWORD PTR [rsp+0x50]
    6500522d:	mov    BYTE PTR [rax+rdi*1],0x0
    65005231:	lea    rcx,[rsp+0x78]
    65005236:	call   0x6501d310
    6500523b:	nop
    6500523c:	lea    rax,[rip+0x31e25]        # 0x65037068
    65005243:	mov    QWORD PTR [rsp+0x78],rax
    65005248:	mov    QWORD PTR [rsp+0xb0],0xf
    65005254:	mov    QWORD PTR [rsp+0xa8],rsi
    6500525c:	mov    BYTE PTR [rsp+0x98],0x0
    65005264:	or     r9,0xffffffffffffffff
    65005268:	xor    r8d,r8d
    6500526b:	lea    rdx,[rsp+0x48]
    65005270:	lea    rcx,[rsp+0x90]
    65005278:	call   0x65001e20
    6500527d:	nop
    6500527e:	lea    rdx,[rip+0x3c1fb]        # 0x65041480
    65005285:	lea    rcx,[rsp+0x78]
    6500528a:	call   0x6501dc60
    6500528f:	nop
    65005290:	mov    ecx,ebp
    65005292:	sub    ecx,DWORD PTR [rax-0x8]
    65005295:	mov    eax,DWORD PTR [rax-0xc]
    65005298:	sub    eax,0x800
    6500529d:	or     eax,ecx
    6500529f:	jge    0x650052ae
    650052a1:	mov    edx,0x800
    650052a6:	mov    rcx,rbx
    650052a9:	call   0x65002640
    650052ae:	mov    rdi,QWORD PTR [rbx]
    650052b1:	xor    eax,eax
    650052b3:	lock cmpxchg DWORD PTR [rip+0x42a91],ebp        # 0x65047d4c
    650052bb:	jne    0x65005324
    650052bd:	lea    r8,[rip+0x33f9c]        # 0x65039260
    650052c4:	mov    edx,0x13
    650052c9:	lea    rcx,[rip+0x33fc0]        # 0x65039290
    650052d0:	call   0x6500bcb0
    650052d5:	mov    r12,rax
    650052d8:	lea    r8,[rip+0x33fc9]        # 0x650392a8
    650052df:	mov    edx,0x8
    650052e4:	lea    rcx,[rip+0x33fed]        # 0x650392d8
    650052eb:	call   0x6500c660
    650052f0:	mov    rcx,rax
    650052f3:	call   QWORD PTR [rip+0x2ee07]        # 0x65034100
    650052f9:	add    DWORD PTR [rip+0x3f649],ebp        # 0x65044948
    650052ff:	test   rax,rax
    65005302:	je     0x65005318
    65005304:	mov    rdx,r12
    65005307:	mov    rcx,rax
    6500530a:	call   QWORD PTR [rip+0x2edf8]        # 0x65034108
    65005310:	add    DWORD PTR [rip+0x3f636],ebp        # 0x6504494c
    65005316:	jmp    0x6500531b
    65005318:	mov    rax,rsi
    6500531b:	mov    QWORD PTR [rip+0x42b46],rax        # 0x65047e68
    65005322:	jmp    0x6500532b
    65005324:	mov    rax,QWORD PTR [rip+0x42b3d]        # 0x65047e68
    6500532b:	mov    edx,0x800
    65005330:	mov    rcx,rdi
    65005333:	call   rax
    65005335:	test   eax,eax
    65005337:	jne    0x6500546e
    6500533d:	lea    r8,[rip+0x31e2c]        # 0x65037170
    65005344:	lea    edx,[rax+0x1c]
    65005347:	lea    rcx,[rip+0x31e62]        # 0x650371b0
    6500534e:	call   0x6500bcb0
    65005353:	mov    rbx,rax
    65005356:	mov    edx,0xf
    6500535b:	mov    QWORD PTR [rsp+0x40],rdx
    65005360:	mov    r8,rsi
    65005363:	mov    QWORD PTR [rsp+0x38],rsi
    65005368:	mov    BYTE PTR [rsp+0x28],r8b
    6500536d:	xor    eax,eax
    6500536f:	or     rcx,0xffffffffffffffff
    65005373:	mov    rdi,rbx
    65005376:	repnz scas al,BYTE PTR es:[rdi]
    65005378:	not    rcx
    6500537b:	sub    rcx,rbp
    6500537e:	mov    rdi,rcx
    65005381:	cmp    rcx,0xfffffffffffffffe
    65005385:	jbe    0x65005396
    65005387:	call   0x6501d150
    6500538c:	mov    rdx,QWORD PTR [rsp+0x40]
    65005391:	mov    r8,QWORD PTR [rsp+0x38]
    65005396:	cmp    rdx,rdi
    65005399:	jae    0x650053af
    6500539b:	mov    rdx,rdi
    6500539e:	lea    rcx,[rsp+0x20]
    650053a3:	call   0x65002330
    650053a8:	mov    rdx,QWORD PTR [rsp+0x40]
    650053ad:	jmp    0x650053cd
    650053af:	test   rdi,rdi
    650053b2:	jne    0x650053cd
    650053b4:	mov    QWORD PTR [rsp+0x38],rsi
    650053b9:	lea    rax,[rsp+0x28]
    650053be:	cmp    rdx,0x10
    650053c2:	cmovae rax,QWORD PTR [rsp+0x28]
    650053c8:	mov    BYTE PTR [rax],dil
    650053cb:	jmp    0x65005406
    650053cd:	test   rdi,rdi
    650053d0:	je     0x65005406
    650053d2:	lea    rcx,[rsp+0x28]
    650053d7:	cmp    rdx,0x10
    650053db:	cmovae rcx,QWORD PTR [rsp+0x28]
    650053e1:	mov    r9,rdi
    650053e4:	mov    r8,rbx
    650053e7:	call   0x6501d7b0
    650053ec:	mov    QWORD PTR [rsp+0x38],rdi
    650053f1:	lea    rax,[rsp+0x28]
    650053f6:	cmp    QWORD PTR [rsp+0x40],0x10
    650053fc:	cmovae rax,QWORD PTR [rsp+0x28]
    65005402:	mov    BYTE PTR [rax+rdi*1],0x0
    65005406:	lea    rcx,[rsp+0xb8]
    6500540e:	call   0x6501d310
    65005413:	nop
    65005414:	lea    rax,[rip+0x31c4d]        # 0x65037068
    6500541b:	mov    QWORD PTR [rsp+0xb8],rax
    65005423:	mov    QWORD PTR [rsp+0xf0],0xf
    6500542f:	mov    QWORD PTR [rsp+0xe8],rsi
    65005437:	mov    BYTE PTR [rsp+0xd8],0x0
    6500543f:	or     r9,0xffffffffffffffff
    65005443:	xor    r8d,r8d
    65005446:	lea    rdx,[rsp+0x20]
    6500544b:	lea    rcx,[rsp+0xd0]
    65005453:	call   0x65001e20
    65005458:	nop
    65005459:	lea    rdx,[rip+0x3c020]        # 0x65041480
    65005460:	lea    rcx,[rsp+0xb8]
    65005468:	call   0x6501dc60
    6500546d:	nop
    6500546e:	mov    rdx,QWORD PTR [rbx]
    65005471:	test   rdx,rdx
    65005474:	je     0x65005492
    65005476:	xor    eax,eax
    65005478:	or     rcx,0xffffffffffffffff
    6500547c:	mov    rdi,rdx
    6500547f:	repnz scas ax,WORD PTR es:[rdi]
    65005482:	not    rcx
    65005485:	sub    rcx,rbp
    65005488:	mov    esi,ecx
    6500548a:	test   ecx,ecx
    6500548c:	js     0x6500551e
    65005492:	cmp    esi,DWORD PTR [rdx-0xc]
    65005495:	jg     0x6500551e
    6500549b:	mov    DWORD PTR [rdx-0x10],esi
    6500549e:	movsxd rcx,esi
    650054a1:	mov    rax,QWORD PTR [rbx]
    650054a4:	mov    WORD PTR [rax+rcx*2],0x0
    650054aa:	mov    rcx,QWORD PTR [rbx]
    650054ad:	mov    esi,DWORD PTR [rcx-0x10]
    650054b0:	lea    eax,[rsi-0x1]
    650054b3:	test   eax,eax
    650054b5:	js     0x65005513
    650054b7:	cmp    eax,esi
    650054b9:	jg     0x65005513
    650054bb:	cdqe   
    650054bd:	cmp    WORD PTR [rcx+rax*2],0x5c
    650054c2:	je     0x6500550e
    650054c4:	lea    edi,[rsi+0x1]
    650054c7:	sub    ebp,DWORD PTR [rcx-0x8]
    650054ca:	mov    eax,DWORD PTR [rcx-0xc]
    650054cd:	sub    eax,edi
    650054cf:	or     eax,ebp
    650054d1:	jge    0x650054dd
    650054d3:	mov    edx,edi
    650054d5:	mov    rcx,rbx
    650054d8:	call   0x65002640
    650054dd:	mov    rcx,QWORD PTR [rbx]
    650054e0:	mov    WORD PTR [rcx+rsi*2],0x5c
    650054e6:	test   edi,edi
    650054e8:	js     0x65005503
    650054ea:	mov    rax,QWORD PTR [rbx]
    650054ed:	cmp    edi,DWORD PTR [rax-0xc]
    650054f0:	jg     0x65005503
    650054f2:	mov    DWORD PTR [rax-0x10],edi
    650054f5:	movsxd rcx,edi
    650054f8:	mov    rax,QWORD PTR [rbx]
    650054fb:	mov    WORD PTR [rax+rcx*2],0x0
    65005501:	jmp    0x6500550e
    65005503:	mov    ecx,0x80070057
    65005508:	call   0x65001050
    6500550d:	int3   
    6500550e:	mov    rax,rbx
    65005511:	jmp    0x65005529
    65005513:	mov    ecx,0x80070057
    65005518:	call   0x65001050
    6500551d:	int3   
    6500551e:	mov    ecx,0x80070057
    65005523:	call   0x65001050
    65005528:	nop
    65005529:	lea    r11,[rsp+0x100]
    65005531:	mov    rbx,QWORD PTR [r11+0x28]
    65005535:	mov    rbp,QWORD PTR [r11+0x38]
    65005539:	mov    rsp,r11
    6500553c:	pop    r12
    6500553e:	pop    rdi
    6500553f:	pop    rsi
    65005540:	ret    
    65005541:	int3   
    65005542:	int3   
    65005543:	int3   
    65005544:	int3   
    65005545:	int3   
    65005546:	int3   
    65005547:	int3   
    65005548:	int3   
    65005549:	int3   
    6500554a:	int3   
    6500554b:	int3   
    6500554c:	int3   
    6500554d:	int3   
    6500554e:	int3   
    6500554f:	int3   
    65005550:	rex push rbp
    65005552:	sub    rsp,0x20
    65005556:	mov    rbp,rdx
    65005559:	mov    eax,DWORD PTR [rbp+0x130]
    6500555f:	and    eax,0x1
    65005562:	test   eax,eax
    65005564:	je     0x65005579
    65005566:	and    DWORD PTR [rbp+0x130],0xfffffffe
    6500556d:	mov    rcx,QWORD PTR [rbp+0x120]
    65005574:	call   0x65001cb0
    65005579:	add    rsp,0x20
    6500557d:	pop    rbp
    6500557e:	ret    
    6500557f:	int3   
    65005580:	rex push rbp
    65005582:	sub    rsp,0x20
    65005586:	mov    rbp,rdx
    65005589:	lea    rcx,[rbp+0x48]
    6500558d:	call   0x65001c70
    65005592:	add    rsp,0x20
    65005596:	pop    rbp
    65005597:	ret    
    65005598:	int3   
    65005599:	int3   
    6500559a:	int3   
    6500559b:	int3   
    6500559c:	int3   
    6500559d:	int3   
    6500559e:	int3   
    6500559f:	int3   
    650055a0:	rex push rbp
    650055a2:	sub    rsp,0x20
    650055a6:	mov    rbp,rdx
    650055a9:	lea    rcx,[rbp+0x78]
    650055ad:	call   0x6501d490
    650055b2:	add    rsp,0x20
    650055b6:	pop    rbp
    650055b7:	ret    
    650055b8:	int3   
    650055b9:	int3   
    650055ba:	int3   
    650055bb:	int3   
    650055bc:	int3   
    650055bd:	int3   
    650055be:	int3   
    650055bf:	int3   
    650055c0:	rex push rbp
    650055c2:	sub    rsp,0x20
    650055c6:	mov    rbp,rdx
    650055c9:	lea    rcx,[rbp+0x20]
    650055cd:	call   0x65001c70
    650055d2:	add    rsp,0x20
    650055d6:	pop    rbp
    650055d7:	ret    
    650055d8:	int3   
    650055d9:	int3   
    650055da:	int3   
    650055db:	int3   
    650055dc:	int3   
    650055dd:	int3   
    650055de:	int3   
    650055df:	int3   
    650055e0:	rex push rbp
    650055e2:	sub    rsp,0x20
    650055e6:	mov    rbp,rdx
    650055e9:	lea    rcx,[rbp+0xb8]
    650055f0:	call   0x6501d490
    650055f5:	add    rsp,0x20
    650055f9:	pop    rbp
    650055fa:	ret    
    650055fb:	int3   
    650055fc:	int3   
    650055fd:	int3   
    650055fe:	int3   
    650055ff:	int3   
    65005600:	mov    rax,rsp
    65005603:	mov    QWORD PTR [rax+0x8],rcx
    65005607:	push   rsi
    65005608:	push   rdi
    65005609:	push   r12
    6500560b:	sub    rsp,0x90
    65005612:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500561b:	mov    QWORD PTR [rax+0x18],rbx
    6500561f:	mov    QWORD PTR [rax+0x20],rbp
    65005623:	mov    rbx,rcx
    65005626:	xor    ebp,ebp
    65005628:	mov    DWORD PTR [rax+0x10],ebp
    6500562b:	xor    edx,edx
    6500562d:	call   0x65005060
    65005632:	mov    r12d,0x1
    65005638:	mov    DWORD PTR [rsp+0xb8],r12d
    65005640:	mov    rax,QWORD PTR [rbx]
    65005643:	cmp    DWORD PTR [rax-0x8],r12d
    65005647:	jle    0x65005654
    65005649:	mov    edx,DWORD PTR [rax-0x10]
    6500564c:	mov    rcx,rbx
    6500564f:	call   0x65002130
    65005654:	mov    dx,0x5c
    65005658:	mov    rcx,QWORD PTR [rbx]
    6500565b:	call   0x6501f4a0
    65005660:	mov    rsi,rax
    65005663:	test   rax,rax
    65005666:	jne    0x6500578e
    6500566c:	lea    r8,[rip+0x31b5d]        # 0x650371d0
    65005673:	lea    edx,[rax+0x18]
    65005676:	lea    rcx,[rip+0x31b93]        # 0x65037210
    6500567d:	call   0x6500bcb0
    65005682:	mov    rbx,rax
    65005685:	mov    edx,0xf
    6500568a:	mov    QWORD PTR [rsp+0x48],rdx
    6500568f:	mov    r8,rbp
    65005692:	mov    QWORD PTR [rsp+0x40],rbp
    65005697:	mov    BYTE PTR [rsp+0x30],r8b
    6500569c:	xor    eax,eax
    6500569e:	or     rcx,0xffffffffffffffff
    650056a2:	mov    rdi,rbx
    650056a5:	repnz scas al,BYTE PTR es:[rdi]
    650056a7:	not    rcx
    650056aa:	sub    rcx,r12
    650056ad:	mov    rdi,rcx
    650056b0:	cmp    rcx,0xfffffffffffffffe
    650056b4:	jbe    0x650056c5
    650056b6:	call   0x6501d150
    650056bb:	mov    rdx,QWORD PTR [rsp+0x48]
    650056c0:	mov    r8,QWORD PTR [rsp+0x40]
    650056c5:	cmp    rdx,rdi
    650056c8:	jae    0x650056de
    650056ca:	mov    rdx,rdi
    650056cd:	lea    rcx,[rsp+0x28]
    650056d2:	call   0x65002330
    650056d7:	mov    rdx,QWORD PTR [rsp+0x48]
    650056dc:	jmp    0x650056fc
    650056de:	test   rdi,rdi
    650056e1:	jne    0x650056fc
    650056e3:	mov    QWORD PTR [rsp+0x40],rbp
    650056e8:	lea    rax,[rsp+0x30]
    650056ed:	cmp    rdx,0x10
    650056f1:	cmovae rax,QWORD PTR [rsp+0x30]
    650056f7:	mov    BYTE PTR [rax],dil
    650056fa:	jmp    0x65005735
    650056fc:	test   rdi,rdi
    650056ff:	je     0x65005735
    65005701:	lea    rcx,[rsp+0x30]
    65005706:	cmp    rdx,0x10
    6500570a:	cmovae rcx,QWORD PTR [rsp+0x30]
    65005710:	mov    r9,rdi
    65005713:	mov    r8,rbx
    65005716:	call   0x6501d7b0
    6500571b:	mov    QWORD PTR [rsp+0x40],rdi
    65005720:	lea    rax,[rsp+0x30]
    65005725:	cmp    QWORD PTR [rsp+0x48],0x10
    6500572b:	cmovae rax,QWORD PTR [rsp+0x30]
    65005731:	mov    BYTE PTR [rax+rdi*1],0x0
    65005735:	lea    rcx,[rsp+0x50]
    6500573a:	call   0x6501d310
    6500573f:	nop
    65005740:	lea    rax,[rip+0x31921]        # 0x65037068
    65005747:	mov    QWORD PTR [rsp+0x50],rax
    6500574c:	mov    QWORD PTR [rsp+0x88],0xf
    65005758:	mov    QWORD PTR [rsp+0x80],rbp
    65005760:	mov    BYTE PTR [rsp+0x70],0x0
    65005765:	or     r9,0xffffffffffffffff
    65005769:	xor    r8d,r8d
    6500576c:	lea    rdx,[rsp+0x28]
    65005771:	lea    rcx,[rsp+0x68]
    65005776:	call   0x65001e20
    6500577b:	nop
    6500577c:	lea    rdx,[rip+0x3bcfd]        # 0x65041480
    65005783:	lea    rcx,[rsp+0x50]
    65005788:	call   0x6501dc60
    6500578d:	nop
    6500578e:	mov    rax,QWORD PTR [rbx]
    65005791:	cmp    DWORD PTR [rax-0x8],r12d
    65005795:	jle    0x650057a2
    65005797:	mov    edx,DWORD PTR [rax-0x10]
    6500579a:	mov    rcx,rbx
    6500579d:	call   0x65002130
    650057a2:	mov    rdx,QWORD PTR [rbx]
    650057a5:	sub    rsi,rdx
    650057a8:	sar    rsi,1
    650057ab:	add    rsi,r12
    650057ae:	test   rdx,rdx
    650057b1:	je     0x650057cb
    650057b3:	xor    eax,eax
    650057b5:	or     rcx,0xffffffffffffffff
    650057b9:	mov    rdi,rdx
    650057bc:	repnz scas ax,WORD PTR es:[rdi]
    650057bf:	not    rcx
    650057c2:	sub    rcx,r12
    650057c5:	mov    ebp,ecx
    650057c7:	test   ecx,ecx
    650057c9:	js     0x65005825
    650057cb:	cmp    ebp,DWORD PTR [rdx-0xc]
    650057ce:	jg     0x65005825
    650057d0:	mov    DWORD PTR [rdx-0x10],ebp
    650057d3:	movsxd rcx,ebp
    650057d6:	mov    rax,QWORD PTR [rbx]
    650057d9:	mov    WORD PTR [rax+rcx*2],0x0
    650057df:	mov    rax,QWORD PTR [rbx]
    650057e2:	sub    r12d,DWORD PTR [rax-0x8]
    650057e6:	mov    eax,DWORD PTR [rax-0xc]
    650057e9:	sub    eax,esi
    650057eb:	or     eax,r12d
    650057ee:	jge    0x650057fa
    650057f0:	mov    edx,esi
    650057f2:	mov    rcx,rbx
    650057f5:	call   0x65002640
    650057fa:	test   esi,esi
    650057fc:	js     0x6500581a
    650057fe:	mov    rax,QWORD PTR [rbx]
    65005801:	cmp    esi,DWORD PTR [rax-0xc]
    65005804:	jg     0x6500581a
    65005806:	mov    DWORD PTR [rax-0x10],esi
    65005809:	movsxd rcx,esi
    6500580c:	mov    rax,QWORD PTR [rbx]
    6500580f:	mov    WORD PTR [rax+rcx*2],0x0
    65005815:	mov    rax,rbx
    65005818:	jmp    0x65005830
    6500581a:	mov    ecx,0x80070057
    6500581f:	call   0x65001050
    65005824:	int3   
    65005825:	mov    ecx,0x80070057
    6500582a:	call   0x65001050
    6500582f:	nop
    65005830:	lea    r11,[rsp+0x90]
    65005838:	mov    rbx,QWORD PTR [r11+0x30]
    6500583c:	mov    rbp,QWORD PTR [r11+0x38]
    65005840:	mov    rsp,r11
    65005843:	pop    r12
    65005845:	pop    rdi
    65005846:	pop    rsi
    65005847:	ret    
    65005848:	int3   
    65005849:	int3   
    6500584a:	int3   
    6500584b:	int3   
    6500584c:	int3   
    6500584d:	int3   
    6500584e:	int3   
    6500584f:	int3   
    65005850:	rex push rbp
    65005852:	sub    rsp,0x20
    65005856:	mov    rbp,rdx
    65005859:	mov    eax,DWORD PTR [rbp+0xb8]
    6500585f:	and    eax,0x1
    65005862:	test   eax,eax
    65005864:	je     0x65005879
    65005866:	and    DWORD PTR [rbp+0xb8],0xfffffffe
    6500586d:	mov    rcx,QWORD PTR [rbp+0xb0]
    65005874:	call   0x65001cb0
    65005879:	add    rsp,0x20
    6500587d:	pop    rbp
    6500587e:	ret    
    6500587f:	int3   
    65005880:	rex push rbp
    65005882:	sub    rsp,0x20
    65005886:	mov    rbp,rdx
    65005889:	lea    rcx,[rbp+0x28]
    6500588d:	call   0x65001c70
    65005892:	add    rsp,0x20
    65005896:	pop    rbp
    65005897:	ret    
    65005898:	int3   
    65005899:	int3   
    6500589a:	int3   
    6500589b:	int3   
    6500589c:	int3   
    6500589d:	int3   
    6500589e:	int3   
    6500589f:	int3   
    650058a0:	rex push rbp
    650058a2:	sub    rsp,0x20
    650058a6:	mov    rbp,rdx
    650058a9:	lea    rcx,[rbp+0x50]
    650058ad:	call   0x6501d490
    650058b2:	add    rsp,0x20
    650058b6:	pop    rbp
    650058b7:	ret    
    650058b8:	int3   
    650058b9:	int3   
    650058ba:	int3   
    650058bb:	int3   
    650058bc:	int3   
    650058bd:	int3   
    650058be:	int3   
    650058bf:	int3   
    650058c0:	rex push rbp
    650058c2:	push   r12
    650058c4:	push   r13
    650058c6:	sub    rsp,0x1f0
    650058cd:	lea    rbp,[rsp+0x40]
    650058d2:	mov    QWORD PTR [rbp+0x40],0xfffffffffffffffe
    650058da:	mov    QWORD PTR [rbp+0x1d0],rbx
    650058e1:	mov    QWORD PTR [rbp+0x1d8],rsi
    650058e8:	mov    QWORD PTR [rbp+0x1e0],rdi
    650058ef:	mov    rax,QWORD PTR [rip+0x3d82a]        # 0x65043120
    650058f6:	xor    rax,rbp
    650058f9:	mov    QWORD PTR [rbp+0x1a0],rax
    65005900:	call   QWORD PTR [rip+0x3d792]        # 0x65043098
    65005906:	mov    r12d,eax
    65005909:	lea    rcx,[rbp+0x8]
    6500590d:	call   0x65005600
    65005912:	nop
    65005913:	mov    rdi,QWORD PTR [rbp+0x8]
    65005917:	mov    ecx,0x1
    6500591c:	xor    eax,eax
    6500591e:	xor    r13d,r13d
    65005921:	lock cmpxchg DWORD PTR [rip+0x42443],ecx        # 0x65047d6c
    65005929:	jne    0x65005991
    6500592b:	lea    r8,[rip+0x33d2e]        # 0x65039660
    65005932:	lea    edx,[rcx+0x14]
    65005935:	lea    rcx,[rip+0x33d5c]        # 0x65039698
    6500593c:	call   0x6500bcb0
    65005941:	mov    rbx,rax
    65005944:	lea    r8,[rip+0x33d65]        # 0x650396b0
    6500594b:	lea    edx,[r13+0x8]
    6500594f:	lea    rcx,[rip+0x33982]        # 0x650392d8
    65005956:	call   0x6500c660
    6500595b:	mov    rcx,rax
    6500595e:	call   QWORD PTR [rip+0x2e79c]        # 0x65034100
    65005964:	add    DWORD PTR [rip+0x3efdd],0x1        # 0x65044948
    6500596b:	test   rax,rax
    6500596e:	je     0x65005985
    65005970:	mov    rdx,rbx
    65005973:	mov    rcx,rax
    65005976:	call   QWORD PTR [rip+0x2e78c]        # 0x65034108
    6500597c:	add    DWORD PTR [rip+0x3efc9],0x1        # 0x6504494c
    65005983:	jmp    0x65005988
    65005985:	mov    rax,r13
    65005988:	mov    QWORD PTR [rip+0x42519],rax        # 0x65047ea8
    6500598f:	jmp    0x65005998
    65005991:	mov    rax,QWORD PTR [rip+0x42510]        # 0x65047ea8
    65005998:	mov    DWORD PTR [rsp+0x38],r13d
    6500599d:	mov    QWORD PTR [rsp+0x30],r13
    650059a2:	lea    rcx,[rbp+0x38]
    650059a6:	mov    QWORD PTR [rsp+0x28],rcx
    650059ab:	lea    rcx,[rbp+0x3c]
    650059af:	mov    QWORD PTR [rsp+0x20],rcx
    650059b4:	lea    r9,[rbp+0x0]
    650059b8:	xor    r8d,r8d
    650059bb:	xor    edx,edx
    650059bd:	mov    rcx,rdi
    650059c0:	call   rax
    650059c2:	test   eax,eax
    650059c4:	jne    0x65005bf1
    650059ca:	call   QWORD PTR [rip+0x2e698]        # 0x65034068
    650059d0:	mov    r8d,0xa
    650059d6:	lea    rdx,[rbp+0x130]
    650059dd:	mov    ecx,eax
    650059df:	call   0x6501f4d0
    650059e4:	mov    rdi,QWORD PTR [rbp+0x8]
    650059e8:	or     rbx,0xffffffffffffffff
    650059ec:	test   rdi,rdi
    650059ef:	jne    0x650059f9
    650059f1:	mov    rsi,r13
    650059f4:	jmp    0x65005a79
    650059f9:	mov    rcx,rdi
    650059fc:	call   QWORD PTR [rip+0x2e67e]        # 0x65034080
    65005a02:	lea    edx,[rax+0x1]
    65005a05:	cmp    edx,0x3fffffff
    65005a0b:	jle    0x65005a12
    65005a0d:	mov    rsi,r13
    65005a10:	jmp    0x65005a79
    65005a12:	movsxd rax,edx
    65005a15:	add    rax,rax
    65005a18:	lea    rcx,[rax+0xf]
    65005a1c:	cmp    rcx,rax
    65005a1f:	ja     0x65005a2b
    65005a21:	movabs rcx,0xffffffffffffff0
    65005a2b:	and    rcx,0xfffffffffffffff0
    65005a2f:	mov    rax,rcx
    65005a32:	call   0x65033230
    65005a37:	sub    rsp,rcx
    65005a3a:	lea    rsi,[rsp+0x40]
    65005a3f:	test   rsi,rsi
    65005a42:	je     0x65005a76
    65005a44:	mov    BYTE PTR [rsi],r13b
    65005a47:	lea    eax,[rdx+rdx*1]
    65005a4a:	mov    QWORD PTR [rsp+0x38],r13
    65005a4f:	mov    QWORD PTR [rsp+0x30],r13
    65005a54:	mov    DWORD PTR [rsp+0x28],eax
    65005a58:	mov    QWORD PTR [rsp+0x20],rsi
    65005a5d:	mov    r9d,ebx
    65005a60:	mov    r8,rdi
    65005a63:	xor    edx,edx
    65005a65:	mov    ecx,r12d
    65005a68:	call   QWORD PTR [rip+0x2e5c2]        # 0x65034030
    65005a6e:	test   eax,eax
    65005a70:	cmove  rsi,r13
    65005a74:	jmp    0x65005a79
    65005a76:	mov    rsi,r13
    65005a79:	lea    r8,[rip+0x317f8]        # 0x65037278
    65005a80:	mov    edx,0x21
    65005a85:	lea    rcx,[rip+0x3182c]        # 0x650372b8
    65005a8c:	call   0x6500bcb0
    65005a91:	mov    r12,rax
    65005a94:	mov    edx,0xf
    65005a99:	mov    QWORD PTR [rbp+0x30],rdx
    65005a9d:	mov    r8,r13
    65005aa0:	mov    QWORD PTR [rbp+0x28],r13
    65005aa4:	mov    BYTE PTR [rbp+0x18],r8b
    65005aa8:	xor    eax,eax
    65005aaa:	mov    rcx,rbx
    65005aad:	mov    rdi,r12
    65005ab0:	repnz scas al,BYTE PTR es:[rdi]
    65005ab2:	not    rcx
    65005ab5:	sub    rcx,0x1
    65005ab9:	mov    rdi,rcx
    65005abc:	cmp    rcx,0xfffffffffffffffe
    65005ac0:	jbe    0x65005acf
    65005ac2:	call   0x6501d150
    65005ac7:	mov    rdx,QWORD PTR [rbp+0x30]
    65005acb:	mov    r8,QWORD PTR [rbp+0x28]
    65005acf:	cmp    rdx,rdi
    65005ad2:	jae    0x65005ae6
    65005ad4:	mov    rdx,rdi
    65005ad7:	lea    rcx,[rbp+0x10]
    65005adb:	call   0x65002330
    65005ae0:	mov    rdx,QWORD PTR [rbp+0x30]
    65005ae4:	jmp    0x65005b01
    65005ae6:	test   rdi,rdi
    65005ae9:	jne    0x65005b01
    65005aeb:	mov    QWORD PTR [rbp+0x28],r13
    65005aef:	lea    rax,[rbp+0x18]
    65005af3:	cmp    rdx,0x10
    65005af7:	cmovae rax,QWORD PTR [rbp+0x18]
    65005afc:	mov    BYTE PTR [rax],r13b
    65005aff:	jmp    0x65005b34
    65005b01:	test   rdi,rdi
    65005b04:	je     0x65005b34
    65005b06:	lea    rcx,[rbp+0x18]
    65005b0a:	cmp    rdx,0x10
    65005b0e:	cmovae rcx,QWORD PTR [rbp+0x18]
    65005b13:	mov    r9,rdi
    65005b16:	mov    r8,r12
    65005b19:	call   0x6501d7b0
    65005b1e:	mov    QWORD PTR [rbp+0x28],rdi
    65005b22:	lea    rax,[rbp+0x18]
    65005b26:	cmp    QWORD PTR [rbp+0x30],0x10
    65005b2b:	cmovae rax,QWORD PTR [rbp+0x18]
    65005b30:	mov    BYTE PTR [rax+rdi*1],r13b
    65005b34:	mov    r8,rsi
    65005b37:	lea    rdx,[rbp+0x10]
    65005b3b:	lea    rcx,[rbp+0xd8]
    65005b42:	call   0x650113f0
    65005b47:	mov    rdi,rax
    65005b4a:	lea    r8,[rip+0x316df]        # 0x65037230
    65005b51:	mov    edx,0x7
    65005b56:	lea    rcx,[rip+0x31713]        # 0x65037270
    65005b5d:	call   0x6500bcb0
    65005b62:	mov    r8,rax
    65005b65:	mov    rdx,rdi
    65005b68:	lea    rcx,[rbp+0x88]
    65005b6f:	call   0x650113f0
    65005b74:	nop
    65005b75:	lea    r8,[rbp+0x130]
    65005b7c:	mov    rdx,rax
    65005b7f:	lea    rcx,[rbp+0x100]
    65005b86:	call   0x650113f0
    65005b8b:	nop
    65005b8c:	lea    r8,[rip+0x31699]        # 0x6503722c
    65005b93:	mov    rdx,rax
    65005b96:	lea    rcx,[rbp+0xb0]
    65005b9d:	call   0x650113f0
    65005ba2:	mov    rdi,rax
    65005ba5:	lea    rcx,[rbp+0x48]
    65005ba9:	call   0x6501d310
    65005bae:	nop
    65005baf:	lea    rax,[rip+0x314b2]        # 0x65037068
    65005bb6:	mov    QWORD PTR [rbp+0x48],rax
    65005bba:	mov    QWORD PTR [rbp+0x80],0xf
    65005bc5:	mov    QWORD PTR [rbp+0x78],r13
    65005bc9:	mov    BYTE PTR [rbp+0x68],0x0
    65005bcd:	mov    r9,rbx
    65005bd0:	xor    r8d,r8d
    65005bd3:	mov    rdx,rdi
    65005bd6:	lea    rcx,[rbp+0x60]
    65005bda:	call   0x65001e20
    65005bdf:	nop
    65005be0:	lea    rdx,[rip+0x3b899]        # 0x65041480
    65005be7:	lea    rcx,[rbp+0x48]
    65005beb:	call   0x6501dc60
    65005bf0:	nop
    65005bf1:	mov    edi,DWORD PTR [rbp+0x0]
    65005bf4:	mov    rdx,QWORD PTR [rbp+0x8]
    65005bf8:	add    rdx,0xffffffffffffffe8
    65005bfc:	or     rbx,0xffffffffffffffff
    65005c00:	lock xadd DWORD PTR [rdx+0x10],ebx
    65005c05:	add    ebx,0xffffffff
    65005c08:	test   ebx,ebx
    65005c0a:	jg     0x65005c15
    65005c0c:	mov    rcx,QWORD PTR [rdx]
    65005c0f:	mov    rax,QWORD PTR [rcx]
    65005c12:	call   QWORD PTR [rax+0x8]
    65005c15:	mov    eax,edi
    65005c17:	mov    rcx,QWORD PTR [rbp+0x1a0]
    65005c1e:	xor    rcx,rbp
    65005c21:	call   0x6501e650
    65005c26:	mov    rbx,QWORD PTR [rbp+0x1d0]
    65005c2d:	mov    rsi,QWORD PTR [rbp+0x1d8]
    65005c34:	mov    rdi,QWORD PTR [rbp+0x1e0]
    65005c3b:	lea    rsp,[rbp+0x1b0]
    65005c42:	pop    r13
    65005c44:	pop    r12
    65005c46:	pop    rbp
    65005c47:	ret    
    65005c48:	int3   
    65005c49:	int3   
    65005c4a:	int3   
    65005c4b:	int3   
    65005c4c:	int3   
    65005c4d:	int3   
    65005c4e:	int3   
    65005c4f:	int3   
    65005c50:	rex push rbp
    65005c52:	sub    rsp,0x20
    65005c56:	lea    rbp,[rdx+0x40]
    65005c5a:	lea    rcx,[rbp+0x8]
    65005c5e:	call   0x65001cb0
    65005c63:	add    rsp,0x20
    65005c67:	pop    rbp
    65005c68:	ret    
    65005c69:	int3   
    65005c6a:	int3   
    65005c6b:	int3   
    65005c6c:	int3   
    65005c6d:	int3   
    65005c6e:	int3   
    65005c6f:	int3   
    65005c70:	rex push rbp
    65005c72:	sub    rsp,0x20
    65005c76:	lea    rbp,[rdx+0x40]
    65005c7a:	lea    rcx,[rbp+0x10]
    65005c7e:	call   0x65001c70
    65005c83:	add    rsp,0x20
    65005c87:	pop    rbp
    65005c88:	ret    
    65005c89:	int3   
    65005c8a:	int3   
    65005c8b:	int3   
    65005c8c:	int3   
    65005c8d:	int3   
    65005c8e:	int3   
    65005c8f:	int3   
    65005c90:	rex push rbp
    65005c92:	sub    rsp,0x20
    65005c96:	lea    rbp,[rdx+0x40]
    65005c9a:	lea    rcx,[rbp+0xd8]
    65005ca1:	call   0x65001c70
    65005ca6:	add    rsp,0x20
    65005caa:	pop    rbp
    65005cab:	ret    
    65005cac:	int3   
    65005cad:	int3   
    65005cae:	int3   
    65005caf:	int3   
    65005cb0:	rex push rbp
    65005cb2:	sub    rsp,0x20
    65005cb6:	lea    rbp,[rdx+0x40]
    65005cba:	lea    rcx,[rbp+0x88]
    65005cc1:	call   0x65001c70
    65005cc6:	add    rsp,0x20
    65005cca:	pop    rbp
    65005ccb:	ret    
    65005ccc:	int3   
    65005ccd:	int3   
    65005cce:	int3   
    65005ccf:	int3   
    65005cd0:	rex push rbp
    65005cd2:	sub    rsp,0x20
    65005cd6:	lea    rbp,[rdx+0x40]
    65005cda:	lea    rcx,[rbp+0x100]
    65005ce1:	call   0x65001c70
    65005ce6:	add    rsp,0x20
    65005cea:	pop    rbp
    65005ceb:	ret    
    65005cec:	int3   
    65005ced:	int3   
    65005cee:	int3   
    65005cef:	int3   
    65005cf0:	rex push rbp
    65005cf2:	sub    rsp,0x20
    65005cf6:	lea    rbp,[rdx+0x40]
    65005cfa:	lea    rcx,[rbp+0xb0]
    65005d01:	call   0x65001c70
    65005d06:	add    rsp,0x20
    65005d0a:	pop    rbp
    65005d0b:	ret    
    65005d0c:	int3   
    65005d0d:	int3   
    65005d0e:	int3   
    65005d0f:	int3   
    65005d10:	rex push rbp
    65005d12:	sub    rsp,0x20
    65005d16:	lea    rbp,[rdx+0x40]
    65005d1a:	lea    rcx,[rbp+0x48]
    65005d1e:	call   0x6501d490
    65005d23:	add    rsp,0x20
    65005d27:	pop    rbp
    65005d28:	ret    
    65005d29:	int3   
    65005d2a:	int3   
    65005d2b:	int3   
    65005d2c:	int3   
    65005d2d:	int3   
    65005d2e:	int3   
    65005d2f:	int3   
    65005d30:	mov    rax,rsp
    65005d33:	push   rdi
    65005d34:	push   r12
    65005d36:	push   r13
    65005d38:	push   r14
    65005d3a:	push   r15
    65005d3c:	sub    rsp,0x890
    65005d43:	mov    QWORD PTR [rsp+0x60],0xfffffffffffffffe
    65005d4c:	mov    QWORD PTR [rax+0x8],rbx
    65005d50:	mov    QWORD PTR [rax+0x10],rbp
    65005d54:	mov    QWORD PTR [rax+0x18],rsi
    65005d58:	mov    rax,QWORD PTR [rip+0x3d3c1]        # 0x65043120
    65005d5f:	xor    rax,rsp
    65005d62:	mov    QWORD PTR [rsp+0x880],rax
    65005d6a:	mov    rsi,rcx
    65005d6d:	xor    edi,edi
    65005d6f:	mov    DWORD PTR [rsp+0x70],edi
    65005d73:	xor    eax,eax
    65005d75:	mov    DWORD PTR [rsp+0x74],eax
    65005d79:	mov    DWORD PTR [rsp+0x78],eax
    65005d7d:	mov    DWORD PTR [rsp+0x7c],eax
    65005d81:	mov    QWORD PTR [rsp+0x48],rdi
    65005d86:	lea    r8,[rip+0x31553]        # 0x650372e0
    65005d8d:	lea    edx,[rdi+0x1f]
    65005d90:	lea    rcx,[rip+0x31579]        # 0x65037310
    65005d97:	call   0x6500c660
    65005d9c:	mov    QWORD PTR [rsp+0x40],rdi
    65005da1:	lea    rcx,[rsp+0x40]
    65005da6:	mov    QWORD PTR [rsp+0x20],rcx
    65005dab:	mov    r9d,0x20019
    65005db1:	xor    r8d,r8d
    65005db4:	mov    rdx,rax
    65005db7:	mov    rcx,0xffffffff80000002
    65005dbe:	call   QWORD PTR [rip+0x2e24c]        # 0x65034010
    65005dc4:	test   eax,eax
    65005dc6:	jne    0x650060c4
    65005dcc:	mov    rdi,QWORD PTR [rsp+0x40]
    65005dd1:	mov    QWORD PTR [rsp+0x48],rdi
    65005dd6:	lea    r8,[rip+0x31573]        # 0x65037350
    65005ddd:	lea    edx,[rax+0xb]
    65005de0:	lea    rcx,[rip+0x31591]        # 0x65037378
    65005de7:	call   0x6500c660
    65005dec:	mov    DWORD PTR [rsp+0x38],0x800
    65005df4:	lea    rcx,[rsp+0x38]
    65005df9:	mov    QWORD PTR [rsp+0x28],rcx
    65005dfe:	lea    rcx,[rsp+0x80]
    65005e06:	mov    QWORD PTR [rsp+0x20],rcx
    65005e0b:	lea    r9,[rsp+0x3c]
    65005e10:	xor    r8d,r8d
    65005e13:	mov    rdx,rax
    65005e16:	mov    rcx,rdi
    65005e19:	call   QWORD PTR [rip+0x2e1e9]        # 0x65034008
    65005e1f:	test   eax,eax
    65005e21:	jne    0x6500608b
    65005e27:	mov    eax,DWORD PTR [rsp+0x3c]
    65005e2b:	cmp    eax,0x1
    65005e2e:	je     0x65005e39
    65005e30:	cmp    eax,0x2
    65005e33:	jne    0x6500608b
    65005e39:	mov    eax,DWORD PTR [rsp+0x38]
    65005e3d:	test   eax,eax
    65005e3f:	je     0x65005e59
    65005e41:	test   al,0x1
    65005e43:	jne    0x6500608b
    65005e49:	shr    rax,1
    65005e4c:	cmp    WORD PTR [rsp+rax*2+0x7e],0x0
    65005e52:	je     0x65005e63
    65005e54:	jmp    0x6500608b
    65005e59:	mov    WORD PTR [rsp+0x80],0x0
    65005e63:	lea    rcx,[rip+0x3d236]        # 0x650430a0
    65005e6a:	mov    rax,QWORD PTR [rip+0x3d22f]        # 0x650430a0
    65005e71:	call   QWORD PTR [rax+0x18]
    65005e74:	lea    rbx,[rax+0x18]
    65005e78:	mov    QWORD PTR [rsp+0x30],rbx
    65005e7d:	lea    rdx,[rip+0x3150c]        # 0x65037390
    65005e84:	or     rbp,0xffffffffffffffff
    65005e88:	test   rdx,0xffffffffffff0000
    65005e8f:	jne    0x65005eb9
    65005e91:	movzx  edi,dx
    65005e94:	xor    edx,edx
    65005e96:	mov    ecx,edi
    65005e98:	call   0x650026f0
    65005e9d:	test   rax,rax
    65005ea0:	je     0x65005eda
    65005ea2:	mov    r8d,edi
    65005ea5:	mov    rdx,rax
    65005ea8:	lea    rcx,[rsp+0x30]
    65005ead:	call   0x65003e00
    65005eb2:	mov    rbx,QWORD PTR [rsp+0x30]
    65005eb7:	jmp    0x65005eda
    65005eb9:	xor    eax,eax
    65005ebb:	mov    rcx,rbp
    65005ebe:	mov    rdi,rdx
    65005ec1:	repnz scas ax,WORD PTR es:[rdi]
    65005ec4:	not    rcx
    65005ec7:	lea    r8d,[rcx-0x1]
    65005ecb:	lea    rcx,[rsp+0x30]
    65005ed0:	call   0x65003f90
    65005ed5:	mov    rbx,QWORD PTR [rsp+0x30]
    65005eda:	xor    eax,eax
    65005edc:	mov    rcx,rbp
    65005edf:	lea    rdi,[rsp+0x80]
    65005ee7:	repnz scas ax,WORD PTR es:[rdi]
    65005eea:	not    rcx
    65005eed:	lea    r15,[rcx-0x1]
    65005ef1:	lea    r13,[rsp+0x80]
    65005ef9:	lea    rdi,[rsp+0x80]
    65005f01:	sub    rdi,rbx
    65005f04:	sar    rdi,1
    65005f07:	mov    r14d,DWORD PTR [rbx-0x10]
    65005f0b:	lea    r12d,[r14+rcx*1-0x1]
    65005f10:	mov    edx,0x1
    65005f15:	sub    edx,DWORD PTR [rbx-0x8]
    65005f18:	mov    eax,DWORD PTR [rbx-0xc]
    65005f1b:	sub    eax,r12d
    65005f1e:	or     eax,edx
    65005f20:	jge    0x65005f34
    65005f22:	mov    edx,r12d
    65005f25:	lea    rcx,[rsp+0x30]
    65005f2a:	call   0x65002640
    65005f2f:	mov    rbx,QWORD PTR [rsp+0x30]
    65005f34:	cmp    rdi,r14
    65005f37:	ja     0x65005f3d
    65005f39:	lea    r13,[rbx+rdi*2]
    65005f3d:	movsxd rdx,r15d
    65005f40:	add    rdx,rdx
    65005f43:	lea    rcx,[rbx+r14*2]
    65005f47:	mov    r9,rdx
    65005f4a:	mov    r8,r13
    65005f4d:	call   0x6501d7b0
    65005f52:	test   r12d,r12d
    65005f55:	js     0x65006080
    65005f5b:	cmp    r12d,DWORD PTR [rbx-0xc]
    65005f5f:	jg     0x65006080
    65005f65:	mov    DWORD PTR [rbx-0x10],r12d
    65005f69:	movsxd rax,r12d
    65005f6c:	mov    WORD PTR [rbx+rax*2],0x0
    65005f72:	xor    eax,eax
    65005f74:	mov    rcx,rbp
    65005f77:	lea    r13,[rip+0x31416]        # 0x65037394
    65005f7e:	mov    rdi,r13
    65005f81:	repnz scas ax,WORD PTR es:[rdi]
    65005f84:	not    rcx
    65005f87:	lea    r15,[rcx-0x1]
    65005f8b:	mov    r12,r13
    65005f8e:	sub    r12,rbx
    65005f91:	sar    r12,1
    65005f94:	mov    r14d,DWORD PTR [rbx-0x10]
    65005f98:	lea    edi,[r14+rcx*1-0x1]
    65005f9d:	mov    ecx,0x1
    65005fa2:	sub    ecx,DWORD PTR [rbx-0x8]
    65005fa5:	mov    eax,DWORD PTR [rbx-0xc]
    65005fa8:	sub    eax,edi
    65005faa:	or     eax,ecx
    65005fac:	jge    0x65005fbf
    65005fae:	mov    edx,edi
    65005fb0:	lea    rcx,[rsp+0x30]
    65005fb5:	call   0x65002640
    65005fba:	mov    rbx,QWORD PTR [rsp+0x30]
    65005fbf:	cmp    r12,r14
    65005fc2:	ja     0x65005fc8
    65005fc4:	lea    r13,[rbx+r12*2]
    65005fc8:	movsxd rdx,r15d
    65005fcb:	add    rdx,rdx
    65005fce:	lea    rcx,[rbx+r14*2]
    65005fd2:	mov    r9,rdx
    65005fd5:	mov    r8,r13
    65005fd8:	call   0x6501d7b0
    65005fdd:	test   edi,edi
    65005fdf:	js     0x65006075
    65005fe5:	cmp    edi,DWORD PTR [rbx-0xc]
    65005fe8:	jg     0x65006075
    65005fee:	mov    DWORD PTR [rbx-0x10],edi
    65005ff1:	movsxd rax,edi
    65005ff4:	mov    WORD PTR [rbx+rax*2],0x0
    65005ffa:	cmp    DWORD PTR [rbx-0x8],0x1
    65005ffe:	jle    0x65006012
    65006000:	mov    edx,DWORD PTR [rbx-0x10]
    65006003:	lea    rcx,[rsp+0x30]
    65006008:	call   0x65002130
    6500600d:	mov    rbx,QWORD PTR [rsp+0x30]
    65006012:	lea    rdx,[rsp+0x70]
    65006017:	mov    rcx,rbx
    6500601a:	call   QWORD PTR [rip+0x2e380]        # 0x650343a0
    65006020:	movaps xmm5,XMMWORD PTR [rsp+0x70]
    65006025:	movdqa XMMWORD PTR [rsp+0x50],xmm5
    6500602b:	lea    rdx,[rbx-0x18]
    6500602f:	lock xadd DWORD PTR [rdx+0x10],ebp
    65006034:	add    ebp,0xffffffff
    65006037:	test   ebp,ebp
    65006039:	jg     0x65006045
    6500603b:	mov    rcx,QWORD PTR [rdx]
    6500603e:	mov    rax,QWORD PTR [rcx]
    65006041:	call   QWORD PTR [rax+0x8]
    65006044:	nop
    65006045:	mov    rcx,QWORD PTR [rsp+0x40]
    6500604a:	test   rcx,rcx
    6500604d:	je     0x65006055
    6500604f:	call   QWORD PTR [rip+0x2dfc3]        # 0x65034018
    65006055:	lea    rcx,[rsp+0x50]
    6500605a:	mov    eax,DWORD PTR [rcx]
    6500605c:	mov    DWORD PTR [rsi],eax
    6500605e:	mov    eax,DWORD PTR [rcx+0x4]
    65006061:	mov    DWORD PTR [rsi+0x4],eax
    65006064:	mov    eax,DWORD PTR [rcx+0x8]
    65006067:	mov    DWORD PTR [rsi+0x8],eax
    6500606a:	mov    eax,DWORD PTR [rcx+0xc]
    6500606d:	mov    DWORD PTR [rsi+0xc],eax
    65006070:	mov    rax,rsi
    65006073:	jmp    0x650060e2
    65006075:	mov    ecx,0x80070057
    6500607a:	call   0x65001050
    6500607f:	int3   
    65006080:	mov    ecx,0x80070057
    65006085:	call   0x65001050
    6500608a:	nop
    6500608b:	movaps xmm0,XMMWORD PTR [rsp+0x70]
    65006090:	movdqa XMMWORD PTR [rsp+0x50],xmm0
    65006096:	test   rdi,rdi
    65006099:	je     0x650060a4
    6500609b:	mov    rcx,rdi
    6500609e:	call   QWORD PTR [rip+0x2df74]        # 0x65034018
    650060a4:	lea    rcx,[rsp+0x50]
    650060a9:	mov    eax,DWORD PTR [rcx]
    650060ab:	mov    DWORD PTR [rsi],eax
    650060ad:	mov    eax,DWORD PTR [rcx+0x4]
    650060b0:	mov    DWORD PTR [rsi+0x4],eax
    650060b3:	mov    eax,DWORD PTR [rcx+0x8]
    650060b6:	mov    DWORD PTR [rsi+0x8],eax
    650060b9:	mov    eax,DWORD PTR [rcx+0xc]
    650060bc:	mov    DWORD PTR [rsi+0xc],eax
    650060bf:	mov    rax,rsi
    650060c2:	jmp    0x650060e2
    650060c4:	lea    rcx,[rsp+0x70]
    650060c9:	mov    eax,DWORD PTR [rcx]
    650060cb:	mov    DWORD PTR [rsi],eax
    650060cd:	mov    eax,DWORD PTR [rcx+0x4]
    650060d0:	mov    DWORD PTR [rsi+0x4],eax
    650060d3:	mov    eax,DWORD PTR [rcx+0x8]
    650060d6:	mov    DWORD PTR [rsi+0x8],eax
    650060d9:	mov    eax,DWORD PTR [rcx+0xc]
    650060dc:	mov    DWORD PTR [rsi+0xc],eax
    650060df:	mov    rax,rsi
    650060e2:	mov    rcx,QWORD PTR [rsp+0x880]
    650060ea:	xor    rcx,rsp
    650060ed:	call   0x6501e650
    650060f2:	lea    r11,[rsp+0x890]
    650060fa:	mov    rbx,QWORD PTR [r11+0x30]
    650060fe:	mov    rbp,QWORD PTR [r11+0x38]
    65006102:	mov    rsi,QWORD PTR [r11+0x40]
    65006106:	mov    rsp,r11
    65006109:	pop    r15
    6500610b:	pop    r14
    6500610d:	pop    r13
    6500610f:	pop    r12
    65006111:	pop    rdi
    65006112:	ret    
    65006113:	int3   
    65006114:	int3   
    65006115:	int3   
    65006116:	int3   
    65006117:	int3   
    65006118:	int3   
    65006119:	int3   
    6500611a:	int3   
    6500611b:	int3   
    6500611c:	int3   
    6500611d:	int3   
    6500611e:	int3   
    6500611f:	int3   
    65006120:	rex push rbp
    65006122:	sub    rsp,0x20
    65006126:	mov    rbp,rdx
    65006129:	lea    rcx,[rbp+0x48]
    6500612d:	call   0x65004160
    65006132:	add    rsp,0x20
    65006136:	pop    rbp
    65006137:	ret    
    65006138:	int3   
    65006139:	int3   
    6500613a:	int3   
    6500613b:	int3   
    6500613c:	int3   
    6500613d:	int3   
    6500613e:	int3   
    6500613f:	int3   
    65006140:	rex push rbp
    65006142:	sub    rsp,0x20
    65006146:	mov    rbp,rdx
    65006149:	lea    rcx,[rbp+0x30]
    6500614d:	call   0x65002100
    65006152:	add    rsp,0x20
    65006156:	pop    rbp
    65006157:	ret    
    65006158:	int3   
    65006159:	int3   
    6500615a:	int3   
    6500615b:	int3   
    6500615c:	int3   
    6500615d:	int3   
    6500615e:	int3   
    6500615f:	int3   
    65006160:	rex push rbp
    65006162:	sub    rsp,0x20
    65006166:	mov    rbp,rdx
    65006169:	lea    rcx,[rbp+0x30]
    6500616d:	call   0x65001cb0
    65006172:	add    rsp,0x20
    65006176:	pop    rbp
    65006177:	ret    
    65006178:	int3   
    65006179:	int3   
    6500617a:	int3   
    6500617b:	int3   
    6500617c:	int3   
    6500617d:	int3   
    6500617e:	int3   
    6500617f:	int3   
    65006180:	mov    rax,rsp
    65006183:	push   rsi
    65006184:	push   rdi
    65006185:	push   r12
    65006187:	sub    rsp,0x4b0
    6500618e:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
    65006197:	mov    QWORD PTR [rax+0x18],rbx
    6500619b:	mov    QWORD PTR [rax+0x20],rbp
    6500619f:	mov    rax,QWORD PTR [rip+0x3cf7a]        # 0x65043120
    650061a6:	xor    rax,rsp
    650061a9:	mov    QWORD PTR [rsp+0x4a0],rax
    650061b1:	mov    rsi,rdx
    650061b4:	mov    rbp,rcx
    650061b7:	xor    r12d,r12d
    650061ba:	mov    DWORD PTR [rsp+0x48],r12d
    650061bf:	mov    eax,DWORD PTR [rip+0x41d63]        # 0x65047f28
    650061c5:	test   al,0x1
    650061c7:	jne    0x6500621d
    650061c9:	or     eax,0x1
    650061cc:	mov    DWORD PTR [rip+0x41d56],eax        # 0x65047f28
    650061d2:	lea    rcx,[rip+0x41d37]        # 0x65047f10
    650061d9:	call   0x6500eff0
    650061de:	mov    QWORD PTR [rip+0x41d33],rax        # 0x65047f18
    650061e5:	mov    BYTE PTR [rax+0x41],0x1
    650061e9:	mov    rax,QWORD PTR [rip+0x41d28]        # 0x65047f18
    650061f0:	mov    QWORD PTR [rax+0x8],rax
    650061f4:	mov    rax,QWORD PTR [rip+0x41d1d]        # 0x65047f18
    650061fb:	mov    QWORD PTR [rax],rax
    650061fe:	mov    rax,QWORD PTR [rip+0x41d13]        # 0x65047f18
    65006205:	mov    QWORD PTR [rax+0x10],rax
    65006209:	mov    QWORD PTR [rip+0x41d10],r12        # 0x65047f20
    65006210:	lea    rcx,[rip+0x2d1a9]        # 0x650333c0
    65006217:	call   0x6501e7f0
    6500621c:	nop
    6500621d:	mov    rax,QWORD PTR [rsi+0x8]
    65006221:	mov    rbx,QWORD PTR [rax]
    65006224:	cmp    rbx,QWORD PTR [rsi+0x8]
    65006228:	je     0x6500641b
    6500622e:	cmp    rbx,QWORD PTR [rsi+0x8]
    65006232:	jne    0x65006239
    65006234:	call   0x6501dad0
    65006239:	cmp    QWORD PTR [rbx+0x38],0x10
    6500623e:	jb     0x65006246
    65006240:	mov    rcx,QWORD PTR [rbx+0x20]
    65006244:	jmp    0x6500624a
    65006246:	lea    rcx,[rbx+0x20]
    6500624a:	lea    rdx,[rsp+0xa0]
    65006252:	xchg   ax,ax
    65006254:	data16 data16 xchg ax,ax
    65006258:	data16 data16 xchg ax,ax
    6500625c:	data16 data16 xchg ax,ax
    65006260:	movzx  eax,BYTE PTR [rcx]
    65006263:	mov    BYTE PTR [rdx],al
    65006265:	add    rcx,0x1
    65006269:	add    rdx,0x1
    6500626d:	test   al,al
    6500626f:	jne    0x65006260
    65006271:	cmp    rbx,QWORD PTR [rsi+0x8]
    65006275:	jne    0x6500627c
    65006277:	call   0x6501dad0
    6500627c:	mov    QWORD PTR [rsp+0x90],0xf
    65006288:	mov    QWORD PTR [rsp+0x88],r12
    65006290:	mov    BYTE PTR [rsp+0x78],0x0
    65006295:	or     r9,0xffffffffffffffff
    65006299:	xor    r8d,r8d
    6500629c:	lea    rdx,[rbx+0x18]
    650062a0:	lea    rcx,[rsp+0x70]
    650062a5:	call   0x65001e20
    650062aa:	nop
    650062ab:	lea    rcx,[rsp+0xa0]
    650062b3:	call   0x6502ef40
    650062b8:	mov    edx,0xf
    650062bd:	mov    QWORD PTR [rsp+0x40],rdx
    650062c2:	mov    r8,r12
    650062c5:	mov    QWORD PTR [rsp+0x38],r12
    650062ca:	mov    BYTE PTR [rsp+0x28],r8b
    650062cf:	xor    eax,eax
    650062d1:	or     rcx,0xffffffffffffffff
    650062d5:	lea    rdi,[rsp+0xa0]
    650062dd:	repnz scas al,BYTE PTR es:[rdi]
    650062df:	not    rcx
    650062e2:	sub    rcx,0x1
    650062e6:	mov    rdi,rcx
    650062e9:	cmp    rcx,0xfffffffffffffffe
    650062ed:	jbe    0x650062fe
    650062ef:	call   0x6501d150
    650062f4:	mov    rdx,QWORD PTR [rsp+0x40]
    650062f9:	mov    r8,QWORD PTR [rsp+0x38]
    650062fe:	cmp    rdx,rdi
    65006301:	jae    0x65006317
    65006303:	mov    rdx,rdi
    65006306:	lea    rcx,[rsp+0x20]
    6500630b:	call   0x65002330
    65006310:	mov    rdx,QWORD PTR [rsp+0x40]
    65006315:	jmp    0x65006335
    65006317:	test   rdi,rdi
    6500631a:	jne    0x65006335
    6500631c:	mov    QWORD PTR [rsp+0x38],r12
    65006321:	lea    rax,[rsp+0x28]
    65006326:	cmp    rdx,0x10
    6500632a:	cmovae rax,QWORD PTR [rsp+0x28]
    65006330:	mov    BYTE PTR [rax],dil
    65006333:	jmp    0x65006373
    65006335:	test   rdi,rdi
    65006338:	je     0x65006373
    6500633a:	lea    rcx,[rsp+0x28]
    6500633f:	cmp    rdx,0x10
    65006343:	cmovae rcx,QWORD PTR [rsp+0x28]
    65006349:	mov    r9,rdi
    6500634c:	lea    r8,[rsp+0xa0]
    65006354:	call   0x6501d7b0
    65006359:	mov    QWORD PTR [rsp+0x38],rdi
    6500635e:	lea    rax,[rsp+0x28]
    65006363:	cmp    QWORD PTR [rsp+0x40],0x10
    65006369:	cmovae rax,QWORD PTR [rsp+0x28]
    6500636f:	mov    BYTE PTR [rax+rdi*1],0x0
    65006373:	lea    r8,[rsp+0x20]
    65006378:	lea    rdx,[rsp+0x58]
    6500637d:	lea    rcx,[rip+0x41b8c]        # 0x65047f10
    65006384:	call   0x6500d0d0
    65006389:	nop
    6500638a:	cmp    QWORD PTR [rsp+0x40],0x10
    65006390:	jb     0x6500639d
    65006392:	mov    rcx,QWORD PTR [rsp+0x28]
    65006397:	call   0x6501d300
    6500639c:	nop
    6500639d:	cmp    QWORD PTR [rsp+0x90],0x10
    650063a6:	jb     0x650063b2
    650063a8:	mov    rcx,QWORD PTR [rsp+0x78]
    650063ad:	call   0x6501d300
    650063b2:	cmp    BYTE PTR [rbx+0x41],0x0
    650063b6:	je     0x650063c2
    650063b8:	call   0x6501dad0
    650063bd:	jmp    0x65006224
    650063c2:	mov    rax,QWORD PTR [rbx+0x10]
    650063c6:	cmp    BYTE PTR [rax+0x41],0x0
    650063ca:	jne    0x650063f1
    650063cc:	mov    rbx,rax
    650063cf:	mov    rax,QWORD PTR [rax]
    650063d2:	cmp    BYTE PTR [rax+0x41],0x0
    650063d6:	jne    0x65006224
    650063dc:	data16 data16 xchg ax,ax
    650063e0:	mov    rbx,rax
    650063e3:	mov    rax,QWORD PTR [rax]
    650063e6:	cmp    BYTE PTR [rax+0x41],0x0
    650063ea:	je     0x650063e0
    650063ec:	jmp    0x65006224
    650063f1:	mov    rax,QWORD PTR [rbx+0x8]
    650063f5:	cmp    BYTE PTR [rax+0x41],0x0
    650063f9:	jne    0x65006413
    650063fb:	xchg   ax,ax
    650063fd:	data16 xchg ax,ax
    65006400:	cmp    rbx,QWORD PTR [rax+0x10]
    65006404:	jne    0x65006413
    65006406:	mov    rbx,rax
    65006409:	mov    rax,QWORD PTR [rax+0x8]
    6500640d:	cmp    BYTE PTR [rax+0x41],0x0
    65006411:	je     0x65006400
    65006413:	mov    rbx,rax
    65006416:	jmp    0x65006224
    6500641b:	lea    rdx,[rip+0x41aee]        # 0x65047f10
    65006422:	mov    rcx,rbp
    65006425:	call   0x6500cec0
    6500642a:	mov    rax,rbp
    6500642d:	mov    rcx,QWORD PTR [rsp+0x4a0]
    65006435:	xor    rcx,rsp
    65006438:	call   0x6501e650
    6500643d:	lea    r11,[rsp+0x4b0]
    65006445:	mov    rbx,QWORD PTR [r11+0x30]
    65006449:	mov    rbp,QWORD PTR [r11+0x38]
    6500644d:	mov    rsp,r11
    65006450:	pop    r12
    65006452:	pop    rdi
    65006453:	pop    rsi
    65006454:	ret    
    65006455:	int3   
    65006456:	int3   
    65006457:	int3   
    65006458:	int3   
    65006459:	int3   
    6500645a:	int3   
    6500645b:	int3   
    6500645c:	int3   
    6500645d:	int3   
    6500645e:	int3   
    6500645f:	int3   
    65006460:	rex push rbp
    65006462:	mov    rbp,rdx
    65006465:	mov    eax,DWORD PTR [rip+0x41abd]        # 0x65047f28
    6500646b:	and    eax,0xfffffffe
    6500646e:	mov    DWORD PTR [rip+0x41ab4],eax        # 0x65047f28
    65006474:	pop    rbp
    65006475:	ret    
    65006476:	int3   
    65006477:	int3   
    65006478:	int3   
    65006479:	int3   
    6500647a:	int3   
    6500647b:	int3   
    6500647c:	int3   
    6500647d:	int3   
    6500647e:	int3   
    6500647f:	int3   
    65006480:	rex push rbp
    65006482:	sub    rsp,0x20
    65006486:	mov    rbp,rdx
    65006489:	lea    rcx,[rbp+0x70]
    6500648d:	call   0x65001c70
    65006492:	add    rsp,0x20
    65006496:	pop    rbp
    65006497:	ret    
    65006498:	int3   
    65006499:	int3   
    6500649a:	int3   
    6500649b:	int3   
    6500649c:	int3   
    6500649d:	int3   
    6500649e:	int3   
    6500649f:	int3   
    650064a0:	rex push rbp
    650064a2:	sub    rsp,0x20
    650064a6:	mov    rbp,rdx
    650064a9:	lea    rcx,[rbp+0x20]
    650064ad:	call   0x65001c70
    650064b2:	add    rsp,0x20
    650064b6:	pop    rbp
    650064b7:	ret    
    650064b8:	int3   
    650064b9:	int3   
    650064ba:	int3   
    650064bb:	int3   
    650064bc:	int3   
    650064bd:	int3   
    650064be:	int3   
    650064bf:	int3   
    650064c0:	mov    r11,rsp
    650064c3:	push   rbx
    650064c4:	sub    rsp,0x50
    650064c8:	mov    rax,QWORD PTR [rcx+0x8]
    650064cc:	mov    QWORD PTR [r11-0x38],rcx
    650064d0:	lea    r9,[r11-0x28]
    650064d4:	mov    QWORD PTR [r11-0x30],rax
    650064d8:	mov    rax,QWORD PTR [rax]
    650064db:	lea    r8,[r11-0x38]
    650064df:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    650064e4:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    650064ea:	mov    QWORD PTR [r11-0x38],rcx
    650064ee:	mov    QWORD PTR [r11-0x30],rax
    650064f2:	lea    rdx,[r11-0x18]
    650064f6:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    650064fb:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    65006501:	mov    rbx,rcx
    65006504:	call   0x6500d7f0
    65006509:	mov    rcx,QWORD PTR [rbx+0x8]
    6500650d:	call   0x6501d300
    65006512:	xor    r11d,r11d
    65006515:	mov    QWORD PTR [rbx+0x8],r11
    65006519:	mov    QWORD PTR [rbx+0x10],r11
    6500651d:	add    rsp,0x50
    65006521:	pop    rbx
    65006522:	ret    
    65006523:	int3   
    65006524:	int3   
    65006525:	int3   
    65006526:	int3   
    65006527:	int3   
    65006528:	int3   
    65006529:	int3   
    6500652a:	int3   
    6500652b:	int3   
    6500652c:	int3   
    6500652d:	int3   
    6500652e:	int3   
    6500652f:	int3   
    65006530:	rex push rbp
    65006532:	push   r12
    65006534:	push   r13
    65006536:	sub    rsp,0xe90
    6500653d:	lea    rbp,[rsp+0x20]
    65006542:	mov    QWORD PTR [rbp+0x6a0],0xfffffffffffffffe
    6500654d:	mov    QWORD PTR [rbp+0xe98],rbx
    65006554:	mov    QWORD PTR [rbp+0xea0],rsi
    6500655b:	mov    QWORD PTR [rbp+0xea8],rdi
    65006562:	mov    rax,QWORD PTR [rip+0x3cbb7]        # 0x65043120
    65006569:	xor    rax,rbp
    6500656c:	mov    QWORD PTR [rbp+0xe60],rax
    65006573:	mov    r12,rcx
    65006576:	mov    QWORD PTR [rbp+0x670],rcx
    6500657d:	mov    eax,DWORD PTR [rip+0x419e5]        # 0x65047f68
    65006583:	xor    r13d,r13d
    65006586:	test   al,0x1
    65006588:	jne    0x650065de
    6500658a:	or     eax,0x1
    6500658d:	mov    DWORD PTR [rip+0x419d5],eax        # 0x65047f68
    65006593:	lea    rcx,[rip+0x419b6]        # 0x65047f50
    6500659a:	call   0x6500eff0
    6500659f:	mov    QWORD PTR [rip+0x419b2],rax        # 0x65047f58
    650065a6:	mov    BYTE PTR [rax+0x41],0x1
    650065aa:	mov    rax,QWORD PTR [rip+0x419a7]        # 0x65047f58
    650065b1:	mov    QWORD PTR [rax+0x8],rax
    650065b5:	mov    rax,QWORD PTR [rip+0x4199c]        # 0x65047f58
    650065bc:	mov    QWORD PTR [rax],rax
    650065bf:	mov    rax,QWORD PTR [rip+0x41992]        # 0x65047f58
    650065c6:	mov    QWORD PTR [rax+0x10],rax
    650065ca:	mov    QWORD PTR [rip+0x4198f],r13        # 0x65047f60
    650065d1:	lea    rcx,[rip+0x2ce68]        # 0x65033440
    650065d8:	call   0x6501e7f0
    650065dd:	nop
    650065de:	or     rbx,0xffffffffffffffff
    650065e2:	cmp    QWORD PTR [rip+0x41976],0x0        # 0x65047f60
    650065ea:	jne    0x65007d25
    650065f0:	lea    rcx,[rbp+0x0]
    650065f4:	call   0x6500eff0
    650065f9:	mov    QWORD PTR [rbp+0x8],rax
    650065fd:	mov    BYTE PTR [rax+0x41],0x1
    65006601:	mov    rax,QWORD PTR [rbp+0x8]
    65006605:	mov    QWORD PTR [rax+0x8],rax
    65006609:	mov    rax,QWORD PTR [rbp+0x8]
    6500660d:	mov    QWORD PTR [rax],rax
    65006610:	mov    rax,QWORD PTR [rbp+0x8]
    65006614:	mov    QWORD PTR [rax+0x10],rax
    65006618:	mov    QWORD PTR [rbp+0x10],r13
    6500661c:	lea    r8,[rip+0x30d75]        # 0x65037398
    65006623:	lea    edx,[rbx+0x4]
    65006626:	lea    rcx,[rip+0x30da7]        # 0x650373d4
    6500662d:	call   0x6500bcb0
    65006632:	mov    rsi,rax
    65006635:	mov    edx,0xf
    6500663a:	mov    QWORD PTR [rbp+0x50],rdx
    6500663e:	mov    r8,r13
    65006641:	mov    QWORD PTR [rbp+0x48],r13
    65006645:	mov    BYTE PTR [rbp+0x38],r8b
    65006649:	xor    eax,eax
    6500664b:	mov    rcx,rbx
    6500664e:	mov    rdi,rsi
    65006651:	repnz scas al,BYTE PTR es:[rdi]
    65006653:	not    rcx
    65006656:	sub    rcx,0x1
    6500665a:	mov    rdi,rcx
    6500665d:	cmp    rcx,0xfffffffffffffffe
    65006661:	jbe    0x65006670
    65006663:	call   0x6501d150
    65006668:	mov    rdx,QWORD PTR [rbp+0x50]
    6500666c:	mov    r8,QWORD PTR [rbp+0x48]
    65006670:	cmp    rdx,rdi
    65006673:	jae    0x65006687
    65006675:	mov    rdx,rdi
    65006678:	lea    rcx,[rbp+0x30]
    6500667c:	call   0x65002330
    65006681:	mov    rdx,QWORD PTR [rbp+0x50]
    65006685:	jmp    0x650066a2
    65006687:	test   rdi,rdi
    6500668a:	jne    0x650066a2
    6500668c:	mov    QWORD PTR [rbp+0x48],r13
    65006690:	lea    rax,[rbp+0x38]
    65006694:	cmp    rdx,0x10
    65006698:	cmovae rax,QWORD PTR [rbp+0x38]
    6500669d:	mov    BYTE PTR [rax],dil
    650066a0:	jmp    0x650066d5
    650066a2:	test   rdi,rdi
    650066a5:	je     0x650066d5
    650066a7:	lea    rcx,[rbp+0x38]
    650066ab:	cmp    rdx,0x10
    650066af:	cmovae rcx,QWORD PTR [rbp+0x38]
    650066b4:	mov    r9,rdi
    650066b7:	mov    r8,rsi
    650066ba:	call   0x6501d7b0
    650066bf:	mov    QWORD PTR [rbp+0x48],rdi
    650066c3:	lea    rax,[rbp+0x38]
    650066c7:	cmp    QWORD PTR [rbp+0x50],0x10
    650066cc:	cmovae rax,QWORD PTR [rbp+0x38]
    650066d1:	mov    BYTE PTR [rdi+rax*1],0x0
    650066d5:	lea    r8,[rbp+0x30]
    650066d9:	lea    rdx,[rbp+0x908]
    650066e0:	lea    rcx,[rbp+0x0]
    650066e4:	call   0x6500d0d0
    650066e9:	nop
    650066ea:	cmp    QWORD PTR [rbp+0x50],0x10
    650066ef:	jb     0x650066fa
    650066f1:	mov    rcx,QWORD PTR [rbp+0x38]
    650066f5:	call   0x6501d300
    650066fa:	lea    r8,[rip+0x30cd7]        # 0x650373d8
    65006701:	mov    edx,0x8
    65006706:	lea    rcx,[rip+0x30d0b]        # 0x65037418
    6500670d:	call   0x6500bcb0
    65006712:	mov    rsi,rax
    65006715:	mov    edx,0xf
    6500671a:	mov    QWORD PTR [rbp+0xa0],rdx
    65006721:	mov    r8,r13
    65006724:	mov    QWORD PTR [rbp+0x98],r13
    6500672b:	mov    BYTE PTR [rbp+0x88],r8b
    65006732:	xor    eax,eax
    65006734:	mov    rcx,rbx
    65006737:	mov    rdi,rsi
    6500673a:	repnz scas al,BYTE PTR es:[rdi]
    6500673c:	not    rcx
    6500673f:	sub    rcx,0x1
    65006743:	mov    rdi,rcx
    65006746:	cmp    rcx,0xfffffffffffffffe
    6500674a:	jbe    0x6500675f
    6500674c:	call   0x6501d150
    65006751:	mov    rdx,QWORD PTR [rbp+0xa0]
    65006758:	mov    r8,QWORD PTR [rbp+0x98]
    6500675f:	cmp    rdx,rdi
    65006762:	jae    0x6500677c
    65006764:	mov    rdx,rdi
    65006767:	lea    rcx,[rbp+0x80]
    6500676e:	call   0x65002330
    65006773:	mov    rdx,QWORD PTR [rbp+0xa0]
    6500677a:	jmp    0x650067a0
    6500677c:	test   rdi,rdi
    6500677f:	jne    0x650067a0
    65006781:	mov    QWORD PTR [rbp+0x98],r13
    65006788:	lea    rax,[rbp+0x88]
    6500678f:	cmp    rdx,0x10
    65006793:	cmovae rax,QWORD PTR [rbp+0x88]
    6500679b:	mov    BYTE PTR [rax],dil
    6500679e:	jmp    0x650067e5
    650067a0:	test   rdi,rdi
    650067a3:	je     0x650067e5
    650067a5:	lea    rcx,[rbp+0x88]
    650067ac:	cmp    rdx,0x10
    650067b0:	cmovae rcx,QWORD PTR [rbp+0x88]
    650067b8:	mov    r9,rdi
    650067bb:	mov    r8,rsi
    650067be:	call   0x6501d7b0
    650067c3:	mov    QWORD PTR [rbp+0x98],rdi
    650067ca:	lea    rax,[rbp+0x88]
    650067d1:	cmp    QWORD PTR [rbp+0xa0],0x10
    650067d9:	cmovae rax,QWORD PTR [rbp+0x88]
    650067e1:	mov    BYTE PTR [rdi+rax*1],0x0
    650067e5:	lea    r8,[rbp+0x80]
    650067ec:	lea    rdx,[rbp+0x9f8]
    650067f3:	lea    rcx,[rbp+0x0]
    650067f7:	call   0x6500d0d0
    650067fc:	nop
    650067fd:	cmp    QWORD PTR [rbp+0xa0],0x10
    65006805:	jb     0x65006813
    65006807:	mov    rcx,QWORD PTR [rbp+0x88]
    6500680e:	call   0x6501d300
    65006813:	lea    r8,[rip+0x30c0e]        # 0x65037428
    6500681a:	mov    edx,0x8
    6500681f:	lea    rcx,[rip+0x30c42]        # 0x65037468
    65006826:	call   0x6500bcb0
    6500682b:	mov    rsi,rax
    6500682e:	mov    edx,0xf
    65006833:	mov    QWORD PTR [rbp+0x78],rdx
    65006837:	mov    r8,r13
    6500683a:	mov    QWORD PTR [rbp+0x70],r13
    6500683e:	mov    BYTE PTR [rbp+0x60],r8b
    65006842:	xor    eax,eax
    65006844:	mov    rcx,rbx
    65006847:	mov    rdi,rsi
    6500684a:	repnz scas al,BYTE PTR es:[rdi]
    6500684c:	not    rcx
    6500684f:	sub    rcx,0x1
    65006853:	mov    rdi,rcx
    65006856:	cmp    rcx,0xfffffffffffffffe
    6500685a:	jbe    0x65006869
    6500685c:	call   0x6501d150
    65006861:	mov    rdx,QWORD PTR [rbp+0x78]
    65006865:	mov    r8,QWORD PTR [rbp+0x70]
    65006869:	cmp    rdx,rdi
    6500686c:	jae    0x65006880
    6500686e:	mov    rdx,rdi
    65006871:	lea    rcx,[rbp+0x58]
    65006875:	call   0x65002330
    6500687a:	mov    rdx,QWORD PTR [rbp+0x78]
    6500687e:	jmp    0x6500689b
    65006880:	test   rdi,rdi
    65006883:	jne    0x6500689b
    65006885:	mov    QWORD PTR [rbp+0x70],r13
    65006889:	lea    rax,[rbp+0x60]
    6500688d:	cmp    rdx,0x10
    65006891:	cmovae rax,QWORD PTR [rbp+0x60]
    65006896:	mov    BYTE PTR [rax],dil
    65006899:	jmp    0x650068ce
    6500689b:	test   rdi,rdi
    6500689e:	je     0x650068ce
    650068a0:	lea    rcx,[rbp+0x60]
    650068a4:	cmp    rdx,0x10
    650068a8:	cmovae rcx,QWORD PTR [rbp+0x60]
    650068ad:	mov    r9,rdi
    650068b0:	mov    r8,rsi
    650068b3:	call   0x6501d7b0
    650068b8:	mov    QWORD PTR [rbp+0x70],rdi
    650068bc:	lea    rax,[rbp+0x60]
    650068c0:	cmp    QWORD PTR [rbp+0x78],0x10
    650068c5:	cmovae rax,QWORD PTR [rbp+0x60]
    650068ca:	mov    BYTE PTR [rdi+rax*1],0x0
    650068ce:	lea    r8,[rbp+0x58]
    650068d2:	lea    rdx,[rbp+0xa28]
    650068d9:	lea    rcx,[rbp+0x0]
    650068dd:	call   0x6500d0d0
    650068e2:	nop
    650068e3:	cmp    QWORD PTR [rbp+0x78],0x10
    650068e8:	jb     0x650068f3
    650068ea:	mov    rcx,QWORD PTR [rbp+0x60]
    650068ee:	call   0x6501d300
    650068f3:	lea    r8,[rip+0x30b7e]        # 0x65037478
    650068fa:	mov    edx,0xa
    650068ff:	lea    rcx,[rip+0x30baa]        # 0x650374b0
    65006906:	call   0x6500bcb0
    6500690b:	mov    rsi,rax
    6500690e:	mov    edx,0xf
    65006913:	mov    QWORD PTR [rbp+0xc8],rdx
    6500691a:	mov    r8,r13
    6500691d:	mov    QWORD PTR [rbp+0xc0],r13
    65006924:	mov    BYTE PTR [rbp+0xb0],r8b
    6500692b:	xor    eax,eax
    6500692d:	mov    rcx,rbx
    65006930:	mov    rdi,rsi
    65006933:	repnz scas al,BYTE PTR es:[rdi]
    65006935:	not    rcx
    65006938:	sub    rcx,0x1
    6500693c:	mov    rdi,rcx
    6500693f:	cmp    rcx,0xfffffffffffffffe
    65006943:	jbe    0x65006958
    65006945:	call   0x6501d150
    6500694a:	mov    rdx,QWORD PTR [rbp+0xc8]
    65006951:	mov    r8,QWORD PTR [rbp+0xc0]
    65006958:	cmp    rdx,rdi
    6500695b:	jae    0x65006975
    6500695d:	mov    rdx,rdi
    65006960:	lea    rcx,[rbp+0xa8]
    65006967:	call   0x65002330
    6500696c:	mov    rdx,QWORD PTR [rbp+0xc8]
    65006973:	jmp    0x65006999
    65006975:	test   rdi,rdi
    65006978:	jne    0x65006999
    6500697a:	mov    QWORD PTR [rbp+0xc0],r13
    65006981:	lea    rax,[rbp+0xb0]
    65006988:	cmp    rdx,0x10
    6500698c:	cmovae rax,QWORD PTR [rbp+0xb0]
    65006994:	mov    BYTE PTR [rax],dil
    65006997:	jmp    0x650069de
    65006999:	test   rdi,rdi
    6500699c:	je     0x650069de
    6500699e:	lea    rcx,[rbp+0xb0]
    650069a5:	cmp    rdx,0x10
    650069a9:	cmovae rcx,QWORD PTR [rbp+0xb0]
    650069b1:	mov    r9,rdi
    650069b4:	mov    r8,rsi
    650069b7:	call   0x6501d7b0
    650069bc:	mov    QWORD PTR [rbp+0xc0],rdi
    650069c3:	lea    rax,[rbp+0xb0]
    650069ca:	cmp    QWORD PTR [rbp+0xc8],0x10
    650069d2:	cmovae rax,QWORD PTR [rbp+0xb0]
    650069da:	mov    BYTE PTR [rax+rdi*1],0x0
    650069de:	lea    r8,[rbp+0xa8]
    650069e5:	lea    rdx,[rbp+0x980]
    650069ec:	lea    rcx,[rbp+0x0]
    650069f0:	call   0x6500d0d0
    650069f5:	nop
    650069f6:	cmp    QWORD PTR [rbp+0xc8],0x10
    650069fe:	jb     0x65006a0c
    65006a00:	mov    rcx,QWORD PTR [rbp+0xb0]
    65006a07:	call   0x6501d300
    65006a0c:	lea    r8,[rip+0x30aad]        # 0x650374c0
    65006a13:	mov    edx,0x4
    65006a18:	lea    rcx,[rip+0x30ad9]        # 0x650374f8
    65006a1f:	call   0x6500bcb0
    65006a24:	mov    rsi,rax
    65006a27:	mov    edx,0xf
    65006a2c:	mov    QWORD PTR [rbp+0x118],rdx
    65006a33:	mov    r8,r13
    65006a36:	mov    QWORD PTR [rbp+0x110],r13
    65006a3d:	mov    BYTE PTR [rbp+0x100],r8b
    65006a44:	xor    eax,eax
    65006a46:	mov    rcx,rbx
    65006a49:	mov    rdi,rsi
    65006a4c:	repnz scas al,BYTE PTR es:[rdi]
    65006a4e:	not    rcx
    65006a51:	sub    rcx,0x1
    65006a55:	mov    rdi,rcx
    65006a58:	cmp    rcx,0xfffffffffffffffe
    65006a5c:	jbe    0x65006a71
    65006a5e:	call   0x6501d150
    65006a63:	mov    rdx,QWORD PTR [rbp+0x118]
    65006a6a:	mov    r8,QWORD PTR [rbp+0x110]
    65006a71:	cmp    rdx,rdi
    65006a74:	jae    0x65006a8e
    65006a76:	mov    rdx,rdi
    65006a79:	lea    rcx,[rbp+0xf8]
    65006a80:	call   0x65002330
    65006a85:	mov    rdx,QWORD PTR [rbp+0x118]
    65006a8c:	jmp    0x65006ab2
    65006a8e:	test   rdi,rdi
    65006a91:	jne    0x65006ab2
    65006a93:	mov    QWORD PTR [rbp+0x110],r13
    65006a9a:	lea    rax,[rbp+0x100]
    65006aa1:	cmp    rdx,0x10
    65006aa5:	cmovae rax,QWORD PTR [rbp+0x100]
    65006aad:	mov    BYTE PTR [rax],dil
    65006ab0:	jmp    0x65006af7
    65006ab2:	test   rdi,rdi
    65006ab5:	je     0x65006af7
    65006ab7:	lea    rcx,[rbp+0x100]
    65006abe:	cmp    rdx,0x10
    65006ac2:	cmovae rcx,QWORD PTR [rbp+0x100]
    65006aca:	mov    r9,rdi
    65006acd:	mov    r8,rsi
    65006ad0:	call   0x6501d7b0
    65006ad5:	mov    QWORD PTR [rbp+0x110],rdi
    65006adc:	lea    rax,[rbp+0x100]
    65006ae3:	cmp    QWORD PTR [rbp+0x118],0x10
    65006aeb:	cmovae rax,QWORD PTR [rbp+0x100]
    65006af3:	mov    BYTE PTR [rax+rdi*1],0x0
    65006af7:	lea    r8,[rbp+0xf8]
    65006afe:	lea    rdx,[rbp+0x710]
    65006b05:	lea    rcx,[rbp+0x0]
    65006b09:	call   0x6500d0d0
    65006b0e:	nop
    65006b0f:	cmp    QWORD PTR [rbp+0x118],0x10
    65006b17:	jb     0x65006b25
    65006b19:	mov    rcx,QWORD PTR [rbp+0x100]
    65006b20:	call   0x6501d300
    65006b25:	lea    r8,[rip+0x309d4]        # 0x65037500
    65006b2c:	mov    edx,0x8
    65006b31:	lea    rcx,[rip+0x30a08]        # 0x65037540
    65006b38:	call   0x6500bcb0
    65006b3d:	mov    rsi,rax
    65006b40:	mov    edx,0xf
    65006b45:	mov    QWORD PTR [rbp+0xf0],rdx
    65006b4c:	mov    r8,r13
    65006b4f:	mov    QWORD PTR [rbp+0xe8],r13
    65006b56:	mov    BYTE PTR [rbp+0xd8],r8b
    65006b5d:	xor    eax,eax
    65006b5f:	mov    rcx,rbx
    65006b62:	mov    rdi,rsi
    65006b65:	repnz scas al,BYTE PTR es:[rdi]
    65006b67:	not    rcx
    65006b6a:	sub    rcx,0x1
    65006b6e:	mov    rdi,rcx
    65006b71:	cmp    rcx,0xfffffffffffffffe
    65006b75:	jbe    0x65006b8a
    65006b77:	call   0x6501d150
    65006b7c:	mov    rdx,QWORD PTR [rbp+0xf0]
    65006b83:	mov    r8,QWORD PTR [rbp+0xe8]
    65006b8a:	cmp    rdx,rdi
    65006b8d:	jae    0x65006ba7
    65006b8f:	mov    rdx,rdi
    65006b92:	lea    rcx,[rbp+0xd0]
    65006b99:	call   0x65002330
    65006b9e:	mov    rdx,QWORD PTR [rbp+0xf0]
    65006ba5:	jmp    0x65006bcb
    65006ba7:	test   rdi,rdi
    65006baa:	jne    0x65006bcb
    65006bac:	mov    QWORD PTR [rbp+0xe8],r13
    65006bb3:	lea    rax,[rbp+0xd8]
    65006bba:	cmp    rdx,0x10
    65006bbe:	cmovae rax,QWORD PTR [rbp+0xd8]
    65006bc6:	mov    BYTE PTR [rax],dil
    65006bc9:	jmp    0x65006c10
    65006bcb:	test   rdi,rdi
    65006bce:	je     0x65006c10
    65006bd0:	lea    rcx,[rbp+0xd8]
    65006bd7:	cmp    rdx,0x10
    65006bdb:	cmovae rcx,QWORD PTR [rbp+0xd8]
    65006be3:	mov    r9,rdi
    65006be6:	mov    r8,rsi
    65006be9:	call   0x6501d7b0
    65006bee:	mov    QWORD PTR [rbp+0xe8],rdi
    65006bf5:	lea    rax,[rbp+0xd8]
    65006bfc:	cmp    QWORD PTR [rbp+0xf0],0x10
    65006c04:	cmovae rax,QWORD PTR [rbp+0xd8]
    65006c0c:	mov    BYTE PTR [rdi+rax*1],0x0
    65006c10:	lea    r8,[rbp+0xd0]
    65006c17:	lea    rdx,[rbp+0x8c0]
    65006c1e:	lea    rcx,[rbp+0x0]
    65006c22:	call   0x6500d0d0
    65006c27:	nop
    65006c28:	cmp    QWORD PTR [rbp+0xf0],0x10
    65006c30:	jb     0x65006c3e
    65006c32:	mov    rcx,QWORD PTR [rbp+0xd8]
    65006c39:	call   0x6501d300
    65006c3e:	lea    r8,[rip+0x3090b]        # 0x65037550
    65006c45:	mov    edx,0x5
    65006c4a:	lea    rcx,[rip+0x30927]        # 0x65037578
    65006c51:	call   0x6500bcb0
    65006c56:	mov    rdx,rax
    65006c59:	mov    QWORD PTR [rbp+0x450],0xf
    65006c64:	mov    QWORD PTR [rbp+0x448],r13
    65006c6b:	mov    BYTE PTR [rbp+0x438],0x0
    65006c72:	xor    eax,eax
    65006c74:	mov    rcx,rbx
    65006c77:	mov    rdi,rdx
    65006c7a:	repnz scas al,BYTE PTR es:[rdi]
    65006c7c:	not    rcx
    65006c7f:	lea    r8,[rcx-0x1]
    65006c83:	lea    rcx,[rbp+0x430]
    65006c8a:	call   0x65002000
    65006c8f:	nop
    65006c90:	lea    r8,[rbp+0x430]
    65006c97:	lea    rdx,[rbp+0x740]
    65006c9e:	lea    rcx,[rbp+0x0]
    65006ca2:	call   0x6500d0d0
    65006ca7:	nop
    65006ca8:	cmp    QWORD PTR [rbp+0x450],0x10
    65006cb0:	jb     0x65006cbe
    65006cb2:	mov    rcx,QWORD PTR [rbp+0x438]
    65006cb9:	call   0x6501d300
    65006cbe:	lea    r8,[rip+0x308bb]        # 0x65037580
    65006cc5:	mov    edx,0x8
    65006cca:	lea    rcx,[rip+0x308df]        # 0x650375b0
    65006cd1:	call   0x6500bcb0
    65006cd6:	mov    rdx,rax
    65006cd9:	mov    QWORD PTR [rbp+0x270],0xf
    65006ce4:	mov    QWORD PTR [rbp+0x268],r13
    65006ceb:	mov    BYTE PTR [rbp+0x258],0x0
    65006cf2:	xor    eax,eax
    65006cf4:	mov    rcx,rbx
    65006cf7:	mov    rdi,rdx
    65006cfa:	repnz scas al,BYTE PTR es:[rdi]
    65006cfc:	not    rcx
    65006cff:	lea    r8,[rcx-0x1]
    65006d03:	lea    rcx,[rbp+0x250]
    65006d0a:	call   0x65002000
    65006d0f:	nop
    65006d10:	lea    r8,[rbp+0x250]
    65006d17:	lea    rdx,[rbp+0xa40]
    65006d1e:	lea    rcx,[rbp+0x0]
    65006d22:	call   0x6500d0d0
    65006d27:	nop
    65006d28:	cmp    QWORD PTR [rbp+0x270],0x10
    65006d30:	jb     0x65006d3e
    65006d32:	mov    rcx,QWORD PTR [rbp+0x258]
    65006d39:	call   0x6501d300
    65006d3e:	lea    r8,[rip+0x3087b]        # 0x650375c0
    65006d45:	mov    edx,0xb
    65006d4a:	lea    rcx,[rip+0x308a7]        # 0x650375f8
    65006d51:	call   0x6500bcb0
    65006d56:	mov    rdx,rax
    65006d59:	mov    QWORD PTR [rbp+0x5e0],0xf
    65006d64:	mov    QWORD PTR [rbp+0x5d8],r13
    65006d6b:	mov    BYTE PTR [rbp+0x5c8],0x0
    65006d72:	xor    eax,eax
    65006d74:	mov    rcx,rbx
    65006d77:	mov    rdi,rdx
    65006d7a:	repnz scas al,BYTE PTR es:[rdi]
    65006d7c:	not    rcx
    65006d7f:	lea    r8,[rcx-0x1]
    65006d83:	lea    rcx,[rbp+0x5c0]
    65006d8a:	call   0x65002000
    65006d8f:	nop
    65006d90:	lea    r8,[rbp+0x5c0]
    65006d97:	lea    rdx,[rbp+0x770]
    65006d9e:	lea    rcx,[rbp+0x0]
    65006da2:	call   0x6500d0d0
    65006da7:	nop
    65006da8:	cmp    QWORD PTR [rbp+0x5e0],0x10
    65006db0:	jb     0x65006dbe
    65006db2:	mov    rcx,QWORD PTR [rbp+0x5c8]
    65006db9:	call   0x6501d300
    65006dbe:	lea    r8,[rip+0x30843]        # 0x65037608
    65006dc5:	mov    edx,0x1e
    65006dca:	lea    rcx,[rip+0x3086f]        # 0x65037640
    65006dd1:	call   0x6500bcb0
    65006dd6:	mov    rdx,rax
    65006dd9:	mov    QWORD PTR [rbp+0x2c0],0xf
    65006de4:	mov    QWORD PTR [rbp+0x2b8],r13
    65006deb:	mov    BYTE PTR [rbp+0x2a8],0x0
    65006df2:	xor    eax,eax
    65006df4:	mov    rcx,rbx
    65006df7:	mov    rdi,rdx
    65006dfa:	repnz scas al,BYTE PTR es:[rdi]
    65006dfc:	not    rcx
    65006dff:	lea    r8,[rcx-0x1]
    65006e03:	lea    rcx,[rbp+0x2a0]
    65006e0a:	call   0x65002000
    65006e0f:	nop
    65006e10:	lea    r8,[rbp+0x2a0]
    65006e17:	lea    rdx,[rbp+0x8f0]
    65006e1e:	lea    rcx,[rbp+0x0]
    65006e22:	call   0x6500d0d0
    65006e27:	nop
    65006e28:	cmp    QWORD PTR [rbp+0x2c0],0x10
    65006e30:	jb     0x65006e3e
    65006e32:	mov    rcx,QWORD PTR [rbp+0x2a8]
    65006e39:	call   0x6501d300
    65006e3e:	lea    r8,[rip+0x3081b]        # 0x65037660
    65006e45:	mov    edx,0x7
    65006e4a:	lea    rcx,[rip+0x3084f]        # 0x650376a0
    65006e51:	call   0x6500bcb0
    65006e56:	mov    rdx,rax
    65006e59:	mov    QWORD PTR [rbp+0x4a0],0xf
    65006e64:	mov    QWORD PTR [rbp+0x498],r13
    65006e6b:	mov    BYTE PTR [rbp+0x488],0x0
    65006e72:	xor    eax,eax
    65006e74:	mov    rcx,rbx
    65006e77:	mov    rdi,rdx
    65006e7a:	repnz scas al,BYTE PTR es:[rdi]
    65006e7c:	not    rcx
    65006e7f:	lea    r8,[rcx-0x1]
    65006e83:	lea    rcx,[rbp+0x480]
    65006e8a:	call   0x65002000
    65006e8f:	nop
    65006e90:	lea    r8,[rbp+0x480]
    65006e97:	lea    rdx,[rbp+0x7a0]
    65006e9e:	lea    rcx,[rbp+0x0]
    65006ea2:	call   0x6500d0d0
    65006ea7:	nop
    65006ea8:	cmp    QWORD PTR [rbp+0x4a0],0x10
    65006eb0:	jb     0x65006ebe
    65006eb2:	mov    rcx,QWORD PTR [rbp+0x488]
    65006eb9:	call   0x6501d300
    65006ebe:	lea    r8,[rip+0x307e3]        # 0x650376a8
    65006ec5:	mov    edx,0xc
    65006eca:	lea    rcx,[rip+0x307ff]        # 0x650376d0
    65006ed1:	call   0x6500bcb0
    65006ed6:	mov    rdx,rax
    65006ed9:	mov    QWORD PTR [rbp+0x310],0xf
    65006ee4:	mov    QWORD PTR [rbp+0x308],r13
    65006eeb:	mov    BYTE PTR [rbp+0x2f8],0x0
    65006ef2:	xor    eax,eax
    65006ef4:	mov    rcx,rbx
    65006ef7:	mov    rdi,rdx
    65006efa:	repnz scas al,BYTE PTR es:[rdi]
    65006efc:	not    rcx
    65006eff:	lea    r8,[rcx-0x1]
    65006f03:	lea    rcx,[rbp+0x2f0]
    65006f0a:	call   0x65002000
    65006f0f:	nop
    65006f10:	lea    r8,[rbp+0x2f0]
    65006f17:	lea    rdx,[rbp+0x9b0]
    65006f1e:	lea    rcx,[rbp+0x0]
    65006f22:	call   0x6500d0d0
    65006f27:	nop
    65006f28:	cmp    QWORD PTR [rbp+0x310],0x10
    65006f30:	jb     0x65006f3e
    65006f32:	mov    rcx,QWORD PTR [rbp+0x2f8]
    65006f39:	call   0x6501d300
    65006f3e:	lea    r8,[rip+0x3079b]        # 0x650376e0
    65006f45:	mov    edx,0x11
    65006f4a:	lea    rcx,[rip+0x307bf]        # 0x65037710
    65006f51:	call   0x6500bcb0
    65006f56:	mov    rdx,rax
    65006f59:	mov    QWORD PTR [rbp+0x180],0xf
    65006f64:	mov    QWORD PTR [rbp+0x178],r13
    65006f6b:	mov    BYTE PTR [rbp+0x168],0x0
    65006f72:	xor    eax,eax
    65006f74:	mov    rcx,rbx
    65006f77:	mov    rdi,rdx
    65006f7a:	repnz scas al,BYTE PTR es:[rdi]
    65006f7c:	not    rcx
    65006f7f:	lea    r8,[rcx-0x1]
    65006f83:	lea    rcx,[rbp+0x160]
    65006f8a:	call   0x65002000
    65006f8f:	nop
    65006f90:	lea    r8,[rbp+0x160]
    65006f97:	lea    rdx,[rbp+0x7d0]
    65006f9e:	lea    rcx,[rbp+0x0]
    65006fa2:	call   0x6500d0d0
    65006fa7:	nop
    65006fa8:	cmp    QWORD PTR [rbp+0x180],0x10
    65006fb0:	jb     0x65006fbe
    65006fb2:	mov    rcx,QWORD PTR [rbp+0x168]
    65006fb9:	call   0x6501d300
    65006fbe:	lea    r8,[rip+0x30763]        # 0x65037728
    65006fc5:	mov    edx,0x7
    65006fca:	lea    rcx,[rip+0x30797]        # 0x65037768
    65006fd1:	call   0x6500bcb0
    65006fd6:	mov    rdx,rax
    65006fd9:	mov    QWORD PTR [rbp+0x360],0xf
    65006fe4:	mov    QWORD PTR [rbp+0x358],r13
    65006feb:	mov    BYTE PTR [rbp+0x348],0x0
    65006ff2:	xor    eax,eax
    65006ff4:	mov    rcx,rbx
    65006ff7:	mov    rdi,rdx
    65006ffa:	repnz scas al,BYTE PTR es:[rdi]
    65006ffc:	not    rcx
    65006fff:	lea    r8,[rcx-0x1]
    65007003:	lea    rcx,[rbp+0x340]
    6500700a:	call   0x65002000
    6500700f:	nop
    65007010:	lea    r8,[rbp+0x340]
    65007017:	lea    rdx,[rbp+0x920]
    6500701e:	lea    rcx,[rbp+0x0]
    65007022:	call   0x6500d0d0
    65007027:	nop
    65007028:	cmp    QWORD PTR [rbp+0x360],0x10
    65007030:	jb     0x6500703e
    65007032:	mov    rcx,QWORD PTR [rbp+0x348]
    65007039:	call   0x6501d300
    6500703e:	lea    r8,[rip+0x3072b]        # 0x65037770
    65007045:	mov    edx,0x6
    6500704a:	lea    rcx,[rip+0x3074b]        # 0x6503779c
    65007051:	call   0x6500bcb0
    65007056:	mov    rdx,rax
    65007059:	mov    QWORD PTR [rbp+0x4f0],0xf
    65007064:	mov    QWORD PTR [rbp+0x4e8],r13
    6500706b:	mov    BYTE PTR [rbp+0x4d8],0x0
    65007072:	xor    eax,eax
    65007074:	mov    rcx,rbx
    65007077:	mov    rdi,rdx
    6500707a:	repnz scas al,BYTE PTR es:[rdi]
    6500707c:	not    rcx
    6500707f:	lea    r8,[rcx-0x1]
    65007083:	lea    rcx,[rbp+0x4d0]
    6500708a:	call   0x65002000
    6500708f:	nop
    65007090:	lea    r8,[rbp+0x4d0]
    65007097:	lea    rdx,[rbp+0x800]
    6500709e:	lea    rcx,[rbp+0x0]
    650070a2:	call   0x6500d0d0
    650070a7:	nop
    650070a8:	cmp    QWORD PTR [rbp+0x4f0],0x10
    650070b0:	jb     0x650070be
    650070b2:	mov    rcx,QWORD PTR [rbp+0x4d8]
    650070b9:	call   0x6501d300
    650070be:	lea    r8,[rip+0x306e3]        # 0x650377a8
    650070c5:	mov    edx,0x3
    650070ca:	lea    rcx,[rip+0x30717]        # 0x650377e8
    650070d1:	call   0x6500bcb0
    650070d6:	mov    rdx,rax
    650070d9:	mov    QWORD PTR [rbp+0x3b0],0xf
    650070e4:	mov    QWORD PTR [rbp+0x3a8],r13
    650070eb:	mov    BYTE PTR [rbp+0x398],0x0
    650070f2:	xor    eax,eax
    650070f4:	mov    rcx,rbx
    650070f7:	mov    rdi,rdx
    650070fa:	repnz scas al,BYTE PTR es:[rdi]
    650070fc:	not    rcx
    650070ff:	lea    r8,[rcx-0x1]
    65007103:	lea    rcx,[rbp+0x390]
    6500710a:	call   0x65002000
    6500710f:	nop
    65007110:	lea    r8,[rbp+0x390]
    65007117:	lea    rdx,[rbp+0xa10]
    6500711e:	lea    rcx,[rbp+0x0]
    65007122:	call   0x6500d0d0
    65007127:	nop
    65007128:	cmp    QWORD PTR [rbp+0x3b0],0x10
    65007130:	jb     0x6500713e
    65007132:	mov    rcx,QWORD PTR [rbp+0x398]
    65007139:	call   0x6501d300
    6500713e:	lea    r8,[rip+0x306ab]        # 0x650377f0
    65007145:	mov    edx,0x8
    6500714a:	lea    rcx,[rip+0x306c7]        # 0x65037818
    65007151:	call   0x6500bcb0
    65007156:	mov    rdx,rax
    65007159:	mov    QWORD PTR [rbp+0x630],0xf
    65007164:	mov    QWORD PTR [rbp+0x628],r13
    6500716b:	mov    BYTE PTR [rbp+0x618],0x0
    65007172:	xor    eax,eax
    65007174:	mov    rcx,rbx
    65007177:	mov    rdi,rdx
    6500717a:	repnz scas al,BYTE PTR es:[rdi]
    6500717c:	not    rcx
    6500717f:	lea    r8,[rcx-0x1]
    65007183:	lea    rcx,[rbp+0x610]
    6500718a:	call   0x65002000
    6500718f:	nop
    65007190:	lea    r8,[rbp+0x610]
    65007197:	lea    rdx,[rbp+0x830]
    6500719e:	lea    rcx,[rbp+0x0]
    650071a2:	call   0x6500d0d0
    650071a7:	nop
    650071a8:	cmp    QWORD PTR [rbp+0x630],0x10
    650071b0:	jb     0x650071be
    650071b2:	mov    rcx,QWORD PTR [rbp+0x618]
    650071b9:	call   0x6501d300
    650071be:	lea    r8,[rip+0x30663]        # 0x65037828
    650071c5:	mov    edx,0xb
    650071ca:	lea    rcx,[rip+0x30697]        # 0x65037868
    650071d1:	call   0x6500bcb0
    650071d6:	mov    rdx,rax
    650071d9:	mov    QWORD PTR [rbp+0x1a8],0xf
    650071e4:	mov    QWORD PTR [rbp+0x1a0],r13
    650071eb:	mov    BYTE PTR [rbp+0x190],0x0
    650071f2:	xor    eax,eax
    650071f4:	mov    rcx,rbx
    650071f7:	mov    rdi,rdx
    650071fa:	repnz scas al,BYTE PTR es:[rdi]
    650071fc:	not    rcx
    650071ff:	lea    r8,[rcx-0x1]
    65007203:	lea    rcx,[rbp+0x188]
    6500720a:	call   0x65002000
    6500720f:	nop
    65007210:	lea    r8,[rbp+0x188]
    65007217:	lea    rdx,[rbp+0x950]
    6500721e:	lea    rcx,[rbp+0x0]
    65007222:	call   0x6500d0d0
    65007227:	nop
    65007228:	cmp    QWORD PTR [rbp+0x1a8],0x10
    65007230:	jb     0x6500723e
    65007232:	mov    rcx,QWORD PTR [rbp+0x190]
    65007239:	call   0x6501d300
    6500723e:	lea    r8,[rip+0x30633]        # 0x65037878
    65007245:	mov    edx,0x10
    6500724a:	lea    rcx,[rip+0x30667]        # 0x650378b8
    65007251:	call   0x6500bcb0
    65007256:	mov    rdx,rax
    65007259:	mov    QWORD PTR [rbp+0x1d0],0xf
    65007264:	mov    QWORD PTR [rbp+0x1c8],r13
    6500726b:	mov    BYTE PTR [rbp+0x1b8],0x0
    65007272:	xor    eax,eax
    65007274:	mov    rcx,rbx
    65007277:	mov    rdi,rdx
    6500727a:	repnz scas al,BYTE PTR es:[rdi]
    6500727c:	not    rcx
    6500727f:	lea    r8,[rcx-0x1]
    65007283:	lea    rcx,[rbp+0x1b0]
    6500728a:	call   0x65002000
    6500728f:	nop
    65007290:	lea    r8,[rbp+0x1b0]
    65007297:	lea    rdx,[rbp+0x860]
    6500729e:	lea    rcx,[rbp+0x0]
    650072a2:	call   0x6500d0d0
    650072a7:	nop
    650072a8:	cmp    QWORD PTR [rbp+0x1d0],0x10
    650072b0:	jb     0x650072be
    650072b2:	mov    rcx,QWORD PTR [rbp+0x1b8]
    650072b9:	call   0x6501d300
    650072be:	lea    r8,[rip+0x3060b]        # 0x650378d0
    650072c5:	mov    edx,0x5
    650072ca:	lea    rcx,[rip+0x30623]        # 0x650378f4
    650072d1:	call   0x6500bcb0
    650072d6:	mov    rdx,rax
    650072d9:	mov    QWORD PTR [rbp+0x400],0xf
    650072e4:	mov    QWORD PTR [rbp+0x3f8],r13
    650072eb:	mov    BYTE PTR [rbp+0x3e8],0x0
    650072f2:	xor    eax,eax
    650072f4:	mov    rcx,rbx
    650072f7:	mov    rdi,rdx
    650072fa:	repnz scas al,BYTE PTR es:[rdi]
    650072fc:	not    rcx
    650072ff:	lea    r8,[rcx-0x1]
    65007303:	lea    rcx,[rbp+0x3e0]
    6500730a:	call   0x65002000
    6500730f:	nop
    65007310:	lea    r8,[rbp+0x3e0]
    65007317:	lea    rdx,[rbp+0x9e0]
    6500731e:	lea    rcx,[rbp+0x0]
    65007322:	call   0x6500d0d0
    65007327:	nop
    65007328:	cmp    QWORD PTR [rbp+0x400],0x10
    65007330:	jb     0x6500733e
    65007332:	mov    rcx,QWORD PTR [rbp+0x3e8]
    65007339:	call   0x6501d300
    6500733e:	lea    r8,[rip+0x305bb]        # 0x65037900
    65007345:	mov    edx,0x5
    6500734a:	lea    rcx,[rip+0x305e7]        # 0x65037938
    65007351:	call   0x6500bcb0
    65007356:	mov    rdx,rax
    65007359:	mov    QWORD PTR [rbp+0x540],0xf
    65007364:	mov    QWORD PTR [rbp+0x538],r13
    6500736b:	mov    BYTE PTR [rbp+0x528],0x0
    65007372:	xor    eax,eax
    65007374:	mov    rcx,rbx
    65007377:	mov    rdi,rdx
    6500737a:	repnz scas al,BYTE PTR es:[rdi]
    6500737c:	not    rcx
    6500737f:	lea    r8,[rcx-0x1]
    65007383:	lea    rcx,[rbp+0x520]
    6500738a:	call   0x65002000
    6500738f:	nop
    65007390:	lea    r8,[rbp+0x520]
    65007397:	lea    rdx,[rbp+0x890]
    6500739e:	lea    rcx,[rbp+0x0]
    650073a2:	call   0x6500d0d0
    650073a7:	nop
    650073a8:	cmp    QWORD PTR [rbp+0x540],0x10
    650073b0:	jb     0x650073be
    650073b2:	mov    rcx,QWORD PTR [rbp+0x528]
    650073b9:	call   0x6501d300
    650073be:	lea    r8,[rip+0x3057b]        # 0x65037940
    650073c5:	mov    edx,0x8
    650073ca:	lea    rcx,[rip+0x30597]        # 0x65037968
    650073d1:	call   0x6500bcb0
    650073d6:	mov    rdx,rax
    650073d9:	mov    QWORD PTR [rbp+0x1f8],0xf
    650073e4:	mov    QWORD PTR [rbp+0x1f0],r13
    650073eb:	mov    BYTE PTR [rbp+0x1e0],0x0
    650073f2:	xor    eax,eax
    650073f4:	mov    rcx,rbx
    650073f7:	mov    rdi,rdx
    650073fa:	repnz scas al,BYTE PTR es:[rdi]
    650073fc:	not    rcx
    650073ff:	lea    r8,[rcx-0x1]
    65007403:	lea    rcx,[rbp+0x1d8]
    6500740a:	call   0x65002000
    6500740f:	nop
    65007410:	lea    r8,[rbp+0x1d8]
    65007417:	lea    rdx,[rbp+0x6e0]
    6500741e:	lea    rcx,[rbp+0x0]
    65007422:	call   0x6500d0d0
    65007427:	nop
    65007428:	cmp    QWORD PTR [rbp+0x1f8],0x10
    65007430:	jb     0x6500743e
    65007432:	mov    rcx,QWORD PTR [rbp+0x1e0]
    65007439:	call   0x6501d300
    6500743e:	lea    r8,[rip+0x30533]        # 0x65037978
    65007445:	mov    edx,0x8
    6500744a:	lea    rcx,[rip+0x3055f]        # 0x650379b0
    65007451:	call   0x6500bcb0
    65007456:	mov    rdx,rax
    65007459:	mov    QWORD PTR [rbp+0x248],0xf
    65007464:	mov    QWORD PTR [rbp+0x240],r13
    6500746b:	mov    BYTE PTR [rbp+0x230],0x0
    65007472:	xor    eax,eax
    65007474:	mov    rcx,rbx
    65007477:	mov    rdi,rdx
    6500747a:	repnz scas al,BYTE PTR es:[rdi]
    6500747c:	not    rcx
    6500747f:	lea    r8,[rcx-0x1]
    65007483:	lea    rcx,[rbp+0x228]
    6500748a:	call   0x65002000
    6500748f:	nop
    65007490:	lea    r8,[rbp+0x228]
    65007497:	lea    rdx,[rbp+0x6f8]
    6500749e:	lea    rcx,[rbp+0x0]
    650074a2:	call   0x6500d0d0
    650074a7:	nop
    650074a8:	cmp    QWORD PTR [rbp+0x248],0x10
    650074b0:	jb     0x650074be
    650074b2:	mov    rcx,QWORD PTR [rbp+0x230]
    650074b9:	call   0x6501d300
    650074be:	lea    r8,[rip+0x304fb]        # 0x650379c0
    650074c5:	mov    edx,0x4
    650074ca:	lea    rcx,[rip+0x30513]        # 0x650379e4
    650074d1:	call   0x6500bcb0
    650074d6:	mov    rdx,rax
    650074d9:	mov    QWORD PTR [rbp+0x298],0xf
    650074e4:	mov    QWORD PTR [rbp+0x290],r13
    650074eb:	mov    BYTE PTR [rbp+0x280],0x0
    650074f2:	xor    eax,eax
    650074f4:	mov    rcx,rbx
    650074f7:	mov    rdi,rdx
    650074fa:	repnz scas al,BYTE PTR es:[rdi]
    650074fc:	not    rcx
    650074ff:	lea    r8,[rcx-0x1]
    65007503:	lea    rcx,[rbp+0x278]
    6500750a:	call   0x65002000
    6500750f:	nop
    65007510:	lea    r8,[rbp+0x278]
    65007517:	lea    rdx,[rbp+0x728]
    6500751e:	lea    rcx,[rbp+0x0]
    65007522:	call   0x6500d0d0
    65007527:	nop
    65007528:	cmp    QWORD PTR [rbp+0x298],0x10
    65007530:	jb     0x6500753e
    65007532:	mov    rcx,QWORD PTR [rbp+0x280]
    65007539:	call   0x6501d300
    6500753e:	lea    r8,[rip+0x304ab]        # 0x650379f0
    65007545:	mov    edx,0xc
    6500754a:	lea    rcx,[rip+0x304df]        # 0x65037a30
    65007551:	call   0x6500bcb0
    65007556:	mov    rdx,rax
    65007559:	mov    QWORD PTR [rbp+0x2e8],0xf
    65007564:	mov    QWORD PTR [rbp+0x2e0],r13
    6500756b:	mov    BYTE PTR [rbp+0x2d0],0x0
    65007572:	xor    eax,eax
    65007574:	mov    rcx,rbx
    65007577:	mov    rdi,rdx
    6500757a:	repnz scas al,BYTE PTR es:[rdi]
    6500757c:	not    rcx
    6500757f:	lea    r8,[rcx-0x1]
    65007583:	lea    rcx,[rbp+0x2c8]
    6500758a:	call   0x65002000
    6500758f:	nop
    65007590:	lea    r8,[rbp+0x2c8]
    65007597:	lea    rdx,[rbp+0x758]
    6500759e:	lea    rcx,[rbp+0x0]
    650075a2:	call   0x6500d0d0
    650075a7:	nop
    650075a8:	cmp    QWORD PTR [rbp+0x2e8],0x10
    650075b0:	jb     0x650075be
    650075b2:	mov    rcx,QWORD PTR [rbp+0x2d0]
    650075b9:	call   0x6501d300
    650075be:	lea    r8,[rip+0x3047b]        # 0x65037a40
    650075c5:	mov    edx,0x10
    650075ca:	lea    rcx,[rip+0x304a7]        # 0x65037a78
    650075d1:	call   0x6500bcb0
    650075d6:	mov    rdx,rax
    650075d9:	mov    QWORD PTR [rbp+0x338],0xf
    650075e4:	mov    QWORD PTR [rbp+0x330],r13
    650075eb:	mov    BYTE PTR [rbp+0x320],0x0
    650075f2:	xor    eax,eax
    650075f4:	mov    rcx,rbx
    650075f7:	mov    rdi,rdx
    650075fa:	repnz scas al,BYTE PTR es:[rdi]
    650075fc:	not    rcx
    650075ff:	lea    r8,[rcx-0x1]
    65007603:	lea    rcx,[rbp+0x318]
    6500760a:	call   0x65002000
    6500760f:	nop
    65007610:	lea    r8,[rbp+0x318]
    65007617:	lea    rdx,[rbp+0x788]
    6500761e:	lea    rcx,[rbp+0x0]
    65007622:	call   0x6500d0d0
    65007627:	nop
    65007628:	cmp    QWORD PTR [rbp+0x338],0x10
    65007630:	jb     0x6500763e
    65007632:	mov    rcx,QWORD PTR [rbp+0x320]
    65007639:	call   0x6501d300
    6500763e:	lea    r8,[rip+0x3044b]        # 0x65037a90
    65007645:	mov    edx,0x7
    6500764a:	lea    rcx,[rip+0x30467]        # 0x65037ab8
    65007651:	call   0x6500bcb0
    65007656:	mov    rdx,rax
    65007659:	mov    QWORD PTR [rbp+0x388],0xf
    65007664:	mov    QWORD PTR [rbp+0x380],r13
    6500766b:	mov    BYTE PTR [rbp+0x370],0x0
    65007672:	xor    eax,eax
    65007674:	mov    rcx,rbx
    65007677:	mov    rdi,rdx
    6500767a:	repnz scas al,BYTE PTR es:[rdi]
    6500767c:	not    rcx
    6500767f:	lea    r8,[rcx-0x1]
    65007683:	lea    rcx,[rbp+0x368]
    6500768a:	call   0x65002000
    6500768f:	nop
    65007690:	lea    r8,[rbp+0x368]
    65007697:	lea    rdx,[rbp+0x7b8]
    6500769e:	lea    rcx,[rbp+0x0]
    650076a2:	call   0x6500d0d0
    650076a7:	nop
    650076a8:	cmp    QWORD PTR [rbp+0x388],0x10
    650076b0:	jb     0x650076be
    650076b2:	mov    rcx,QWORD PTR [rbp+0x370]
    650076b9:	call   0x6501d300
    650076be:	lea    r8,[rip+0x303fb]        # 0x65037ac0
    650076c5:	mov    edx,0x9
    650076ca:	lea    rcx,[rip+0x3042f]        # 0x65037b00
    650076d1:	call   0x6500bcb0
    650076d6:	mov    rdx,rax
    650076d9:	mov    QWORD PTR [rbp+0x3d8],0xf
    650076e4:	mov    QWORD PTR [rbp+0x3d0],r13
    650076eb:	mov    BYTE PTR [rbp+0x3c0],0x0
    650076f2:	xor    eax,eax
    650076f4:	mov    rcx,rbx
    650076f7:	mov    rdi,rdx
    650076fa:	repnz scas al,BYTE PTR es:[rdi]
    650076fc:	not    rcx
    650076ff:	lea    r8,[rcx-0x1]
    65007703:	lea    rcx,[rbp+0x3b8]
    6500770a:	call   0x65002000
    6500770f:	nop
    65007710:	lea    r8,[rbp+0x3b8]
    65007717:	lea    rdx,[rbp+0x7e8]
    6500771e:	lea    rcx,[rbp+0x0]
    65007722:	call   0x6500d0d0
    65007727:	nop
    65007728:	cmp    QWORD PTR [rbp+0x3d8],0x10
    65007730:	jb     0x6500773e
    65007732:	mov    rcx,QWORD PTR [rbp+0x3c0]
    65007739:	call   0x6501d300
    6500773e:	lea    r8,[rip+0x303cb]        # 0x65037b10
    65007745:	mov    edx,0x7
    6500774a:	lea    rcx,[rip+0x303e7]        # 0x65037b38
    65007751:	call   0x6500bcb0
    65007756:	mov    rdx,rax
    65007759:	mov    QWORD PTR [rbp+0x428],0xf
    65007764:	mov    QWORD PTR [rbp+0x420],r13
    6500776b:	mov    BYTE PTR [rbp+0x410],0x0
    65007772:	xor    eax,eax
    65007774:	mov    rcx,rbx
    65007777:	mov    rdi,rdx
    6500777a:	repnz scas al,BYTE PTR es:[rdi]
    6500777c:	not    rcx
    6500777f:	lea    r8,[rcx-0x1]
    65007783:	lea    rcx,[rbp+0x408]
    6500778a:	call   0x65002000
    6500778f:	nop
    65007790:	lea    r8,[rbp+0x408]
    65007797:	lea    rdx,[rbp+0x818]
    6500779e:	lea    rcx,[rbp+0x0]
    650077a2:	call   0x6500d0d0
    650077a7:	nop
    650077a8:	cmp    QWORD PTR [rbp+0x428],0x10
    650077b0:	jb     0x650077be
    650077b2:	mov    rcx,QWORD PTR [rbp+0x410]
    650077b9:	call   0x6501d300
    650077be:	lea    r8,[rip+0x3037b]        # 0x65037b40
    650077c5:	mov    edx,0xb
    650077ca:	lea    rcx,[rip+0x303af]        # 0x65037b80
    650077d1:	call   0x6500bcb0
    650077d6:	mov    rdx,rax
    650077d9:	mov    QWORD PTR [rbp+0x478],0xf
    650077e4:	mov    QWORD PTR [rbp+0x470],r13
    650077eb:	mov    BYTE PTR [rbp+0x460],0x0
    650077f2:	xor    eax,eax
    650077f4:	mov    rcx,rbx
    650077f7:	mov    rdi,rdx
    650077fa:	repnz scas al,BYTE PTR es:[rdi]
    650077fc:	not    rcx
    650077ff:	lea    r8,[rcx-0x1]
    65007803:	lea    rcx,[rbp+0x458]
    6500780a:	call   0x65002000
    6500780f:	nop
    65007810:	lea    r8,[rbp+0x458]
    65007817:	lea    rdx,[rbp+0x848]
    6500781e:	lea    rcx,[rbp+0x0]
    65007822:	call   0x6500d0d0
    65007827:	nop
    65007828:	cmp    QWORD PTR [rbp+0x478],0x10
    65007830:	jb     0x6500783e
    65007832:	mov    rcx,QWORD PTR [rbp+0x460]
    65007839:	call   0x6501d300
    6500783e:	lea    r8,[rip+0x3034b]        # 0x65037b90
    65007845:	mov    edx,0x6
    6500784a:	lea    rcx,[rip+0x30377]        # 0x65037bc8
    65007851:	call   0x6500bcb0
    65007856:	mov    rdx,rax
    65007859:	mov    QWORD PTR [rbp+0x4c8],0xf
    65007864:	mov    QWORD PTR [rbp+0x4c0],r13
    6500786b:	mov    BYTE PTR [rbp+0x4b0],0x0
    65007872:	xor    eax,eax
    65007874:	mov    rcx,rbx
    65007877:	mov    rdi,rdx
    6500787a:	repnz scas al,BYTE PTR es:[rdi]
    6500787c:	not    rcx
    6500787f:	lea    r8,[rcx-0x1]
    65007883:	lea    rcx,[rbp+0x4a8]
    6500788a:	call   0x65002000
    6500788f:	nop
    65007890:	lea    r8,[rbp+0x4a8]
    65007897:	lea    rdx,[rbp+0x878]
    6500789e:	lea    rcx,[rbp+0x0]
    650078a2:	call   0x6500d0d0
    650078a7:	nop
    650078a8:	cmp    QWORD PTR [rbp+0x4c8],0x10
    650078b0:	jb     0x650078be
    650078b2:	mov    rcx,QWORD PTR [rbp+0x4b0]
    650078b9:	call   0x6501d300
    650078be:	lea    r8,[rip+0x3030b]        # 0x65037bd0
    650078c5:	mov    edx,0x6
    650078ca:	lea    rcx,[rip+0x30337]        # 0x65037c08
    650078d1:	call   0x6500bcb0
    650078d6:	mov    rdx,rax
    650078d9:	mov    QWORD PTR [rbp+0x518],0xf
    650078e4:	mov    QWORD PTR [rbp+0x510],r13
    650078eb:	mov    BYTE PTR [rbp+0x500],0x0
    650078f2:	xor    eax,eax
    650078f4:	mov    rcx,rbx
    650078f7:	mov    rdi,rdx
    650078fa:	repnz scas al,BYTE PTR es:[rdi]
    650078fc:	not    rcx
    650078ff:	lea    r8,[rcx-0x1]
    65007903:	lea    rcx,[rbp+0x4f8]
    6500790a:	call   0x65002000
    6500790f:	nop
    65007910:	lea    r8,[rbp+0x4f8]
    65007917:	lea    rdx,[rbp+0x8a8]
    6500791e:	lea    rcx,[rbp+0x0]
    65007922:	call   0x6500d0d0
    65007927:	nop
    65007928:	cmp    QWORD PTR [rbp+0x518],0x10
    65007930:	jb     0x6500793e
    65007932:	mov    rcx,QWORD PTR [rbp+0x500]
    65007939:	call   0x6501d300
    6500793e:	lea    r8,[rip+0x302cb]        # 0x65037c10
    65007945:	mov    edx,0x7
    6500794a:	lea    rcx,[rip+0x302f7]        # 0x65037c48
    65007951:	call   0x6500bcb0
    65007956:	mov    rdx,rax
    65007959:	mov    QWORD PTR [rbp+0x568],0xf
    65007964:	mov    QWORD PTR [rbp+0x560],r13
    6500796b:	mov    BYTE PTR [rbp+0x550],0x0
    65007972:	xor    eax,eax
    65007974:	mov    rcx,rbx
    65007977:	mov    rdi,rdx
    6500797a:	repnz scas al,BYTE PTR es:[rdi]
    6500797c:	not    rcx
    6500797f:	lea    r8,[rcx-0x1]
    65007983:	lea    rcx,[rbp+0x548]
    6500798a:	call   0x65002000
    6500798f:	nop
    65007990:	lea    r8,[rbp+0x548]
    65007997:	lea    rdx,[rbp+0x8d8]
    6500799e:	lea    rcx,[rbp+0x0]
    650079a2:	call   0x6500d0d0
    650079a7:	nop
    650079a8:	cmp    QWORD PTR [rbp+0x568],0x10
    650079b0:	jb     0x650079be
    650079b2:	mov    rcx,QWORD PTR [rbp+0x550]
    650079b9:	call   0x6501d300
    650079be:	lea    r8,[rip+0x3028b]        # 0x65037c50
    650079c5:	mov    edx,0x9
    650079ca:	lea    rcx,[rip+0x302a7]        # 0x65037c78
    650079d1:	call   0x6500bcb0
    650079d6:	mov    rdx,rax
    650079d9:	mov    QWORD PTR [rbp+0x5b8],0xf
    650079e4:	mov    QWORD PTR [rbp+0x5b0],r13
    650079eb:	mov    BYTE PTR [rbp+0x5a0],0x0
    650079f2:	xor    eax,eax
    650079f4:	mov    rcx,rbx
    650079f7:	mov    rdi,rdx
    650079fa:	repnz scas al,BYTE PTR es:[rdi]
    650079fc:	not    rcx
    650079ff:	lea    r8,[rcx-0x1]
    65007a03:	lea    rcx,[rbp+0x598]
    65007a0a:	call   0x65002000
    65007a0f:	nop
    65007a10:	lea    r8,[rbp+0x598]
    65007a17:	lea    rdx,[rbp+0x6c8]
    65007a1e:	lea    rcx,[rbp+0x0]
    65007a22:	call   0x6500d0d0
    65007a27:	nop
    65007a28:	cmp    QWORD PTR [rbp+0x5b8],0x10
    65007a30:	jb     0x65007a3e
    65007a32:	mov    rcx,QWORD PTR [rbp+0x5a0]
    65007a39:	call   0x6501d300
    65007a3e:	lea    r8,[rip+0x30243]        # 0x65037c88
    65007a45:	mov    edx,0x7
    65007a4a:	lea    rcx,[rip+0x3026f]        # 0x65037cc0
    65007a51:	call   0x6500bcb0
    65007a56:	mov    rdx,rax
    65007a59:	mov    QWORD PTR [rbp+0x608],0xf
    65007a64:	mov    QWORD PTR [rbp+0x600],r13
    65007a6b:	mov    BYTE PTR [rbp+0x5f0],0x0
    65007a72:	xor    eax,eax
    65007a74:	mov    rcx,rbx
    65007a77:	mov    rdi,rdx
    65007a7a:	repnz scas al,BYTE PTR es:[rdi]
    65007a7c:	not    rcx
    65007a7f:	lea    r8,[rcx-0x1]
    65007a83:	lea    rcx,[rbp+0x5e8]
    65007a8a:	call   0x65002000
    65007a8f:	nop
    65007a90:	lea    r8,[rbp+0x5e8]
    65007a97:	lea    rdx,[rbp+0x938]
    65007a9e:	lea    rcx,[rbp+0x0]
    65007aa2:	call   0x6500d0d0
    65007aa7:	nop
    65007aa8:	cmp    QWORD PTR [rbp+0x608],0x10
    65007ab0:	jb     0x65007abe
    65007ab2:	mov    rcx,QWORD PTR [rbp+0x5f0]
    65007ab9:	call   0x6501d300
    65007abe:	lea    r8,[rip+0x30203]        # 0x65037cc8
    65007ac5:	mov    edx,0x6
    65007aca:	lea    rcx,[rip+0x3022b]        # 0x65037cfc
    65007ad1:	call   0x6500bcb0
    65007ad6:	mov    rdx,rax
    65007ad9:	mov    QWORD PTR [rbp+0x658],0xf
    65007ae4:	mov    QWORD PTR [rbp+0x650],r13
    65007aeb:	mov    BYTE PTR [rbp+0x640],0x0
    65007af2:	xor    eax,eax
    65007af4:	mov    rcx,rbx
    65007af7:	mov    rdi,rdx
    65007afa:	repnz scas al,BYTE PTR es:[rdi]
    65007afc:	not    rcx
    65007aff:	lea    r8,[rcx-0x1]
    65007b03:	lea    rcx,[rbp+0x638]
    65007b0a:	call   0x65002000
    65007b0f:	nop
    65007b10:	lea    r8,[rbp+0x638]
    65007b17:	lea    rdx,[rbp+0x968]
    65007b1e:	lea    rcx,[rbp+0x0]
    65007b22:	call   0x6500d0d0
    65007b27:	nop
    65007b28:	cmp    QWORD PTR [rbp+0x658],0x10
    65007b30:	jb     0x65007b3e
    65007b32:	mov    rcx,QWORD PTR [rbp+0x640]
    65007b39:	call   0x6501d300
    65007b3e:	lea    r8,[rip+0x301c3]        # 0x65037d08
    65007b45:	mov    edx,0x8
    65007b4a:	lea    rcx,[rip+0x301ef]        # 0x65037d40
    65007b51:	call   0x6500bcb0
    65007b56:	mov    rdx,rax
    65007b59:	mov    QWORD PTR [rbp+0x220],0xf
    65007b64:	mov    QWORD PTR [rbp+0x218],r13
    65007b6b:	mov    BYTE PTR [rbp+0x208],0x0
    65007b72:	xor    eax,eax
    65007b74:	mov    rcx,rbx
    65007b77:	mov    rdi,rdx
    65007b7a:	repnz scas al,BYTE PTR es:[rdi]
    65007b7c:	not    rcx
    65007b7f:	lea    r8,[rcx-0x1]
    65007b83:	lea    rcx,[rbp+0x200]
    65007b8a:	call   0x65002000
    65007b8f:	nop
    65007b90:	lea    r8,[rbp+0x200]
    65007b97:	lea    rdx,[rbp+0x998]
    65007b9e:	lea    rcx,[rbp+0x0]
    65007ba2:	call   0x6500d0d0
    65007ba7:	nop
    65007ba8:	cmp    QWORD PTR [rbp+0x220],0x10
    65007bb0:	jb     0x65007bbe
    65007bb2:	mov    rcx,QWORD PTR [rbp+0x208]
    65007bb9:	call   0x6501d300
    65007bbe:	lea    r8,[rip+0x3018b]        # 0x65037d50
    65007bc5:	mov    edx,0x6
    65007bca:	lea    rcx,[rip+0x301b3]        # 0x65037d84
    65007bd1:	call   0x6500bcb0
    65007bd6:	mov    rdx,rax
    65007bd9:	mov    QWORD PTR [rbp+0x590],0xf
    65007be4:	mov    QWORD PTR [rbp+0x588],r13
    65007beb:	mov    BYTE PTR [rbp+0x578],0x0
    65007bf2:	xor    eax,eax
    65007bf4:	mov    rcx,rbx
    65007bf7:	mov    rdi,rdx
    65007bfa:	repnz scas al,BYTE PTR es:[rdi]
    65007bfc:	not    rcx
    65007bff:	lea    r8,[rcx-0x1]
    65007c03:	lea    rcx,[rbp+0x570]
    65007c0a:	call   0x65002000
    65007c0f:	nop
    65007c10:	lea    r8,[rbp+0x570]
    65007c17:	lea    rdx,[rbp+0x9c8]
    65007c1e:	lea    rcx,[rbp+0x0]
    65007c22:	call   0x6500d0d0
    65007c27:	nop
    65007c28:	cmp    QWORD PTR [rbp+0x590],0x10
    65007c30:	jb     0x65007c3e
    65007c32:	mov    rcx,QWORD PTR [rbp+0x578]
    65007c39:	call   0x6501d300
    65007c3e:	lea    rdx,[rbp+0x0]
    65007c42:	lea    rcx,[rbp+0x120]
    65007c49:	call   0x65006180
    65007c4e:	nop
    65007c4f:	mov    rdx,rax
    65007c52:	lea    rcx,[rip+0x402f7]        # 0x65047f50
    65007c59:	call   0x6500cfd0
    65007c5e:	nop
    65007c5f:	mov    rax,QWORD PTR [rbp+0x128]
    65007c66:	mov    QWORD PTR [rbp+0x28],rax
    65007c6a:	lea    rcx,[rbp+0x120]
    65007c71:	mov    QWORD PTR [rbp+0x20],rcx
    65007c75:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    65007c79:	movdqa XMMWORD PTR [rbp+0x680],xmm0
    65007c81:	mov    rax,QWORD PTR [rax]
    65007c84:	mov    QWORD PTR [rbp+0x28],rax
    65007c88:	lea    rax,[rbp+0x120]
    65007c8f:	mov    QWORD PTR [rbp+0x20],rax
    65007c93:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    65007c97:	movdqa XMMWORD PTR [rbp+0x690],xmm0
    65007c9f:	lea    r9,[rbp+0x680]
    65007ca6:	lea    r8,[rbp+0x690]
    65007cad:	lea    rdx,[rbp+0x6b8]
    65007cb4:	lea    rcx,[rbp+0x120]
    65007cbb:	call   0x6500d7f0
    65007cc0:	mov    rcx,QWORD PTR [rbp+0x128]
    65007cc7:	call   0x6501d300
    65007ccc:	nop
    65007ccd:	mov    rax,QWORD PTR [rbp+0x8]
    65007cd1:	mov    QWORD PTR [rbp+0x28],rax
    65007cd5:	lea    rcx,[rbp+0x0]
    65007cd9:	mov    QWORD PTR [rbp+0x20],rcx
    65007cdd:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    65007ce1:	movdqa XMMWORD PTR [rbp+0x660],xmm0
    65007ce9:	mov    rax,QWORD PTR [rax]
    65007cec:	mov    QWORD PTR [rbp+0x28],rax
    65007cf0:	lea    rax,[rbp+0x0]
    65007cf4:	mov    QWORD PTR [rbp+0x20],rax
    65007cf8:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    65007cfc:	movdqa XMMWORD PTR [rbp+0x20],xmm0
    65007d01:	lea    r9,[rbp+0x660]
    65007d08:	lea    r8,[rbp+0x20]
    65007d0c:	lea    rdx,[rbp+0x6a8]
    65007d13:	lea    rcx,[rbp+0x0]
    65007d17:	call   0x6500d7f0
    65007d1c:	mov    rcx,QWORD PTR [rbp+0x8]
    65007d20:	call   0x6501d300
    65007d25:	call   QWORD PTR [rip+0x3b36d]        # 0x65043098
    65007d2b:	mov    esi,eax
    65007d2d:	mov    rcx,QWORD PTR [r12]
    65007d31:	cmp    DWORD PTR [rcx-0x8],0x1
    65007d35:	jle    0x65007d42
    65007d37:	mov    edx,DWORD PTR [rcx-0x10]
    65007d3a:	mov    rcx,r12
    65007d3d:	call   0x65002130
    65007d42:	mov    rdi,QWORD PTR [r12]
    65007d46:	test   rdi,rdi
    65007d49:	jne    0x65007d50
    65007d4b:	mov    rax,r13
    65007d4e:	jmp    0x65007da3
    65007d50:	mov    rcx,rdi
    65007d53:	call   QWORD PTR [rip+0x2c327]        # 0x65034080
    65007d59:	add    eax,0x1
    65007d5c:	cmp    eax,0x3fffffff
    65007d61:	jle    0x65007d68
    65007d63:	mov    rax,r13
    65007d66:	jmp    0x65007da3
    65007d68:	lea    r8d,[rax+rax*1]
    65007d6c:	cdqe   
    65007d6e:	add    rax,rax
    65007d71:	lea    rcx,[rax+0xf]
    65007d75:	cmp    rcx,rax
    65007d78:	ja     0x65007d84
    65007d7a:	movabs rcx,0xffffffffffffff0
    65007d84:	and    rcx,0xfffffffffffffff0
    65007d88:	mov    rax,rcx
    65007d8b:	call   0x65033230
    65007d90:	sub    rsp,rcx
    65007d93:	lea    rcx,[rsp+0x20]
    65007d98:	mov    r9d,esi
    65007d9b:	mov    rdx,rdi
    65007d9e:	call   0x650040f0
    65007da3:	lea    rdx,[rbp+0xa60]
    65007daa:	data16 xchg ax,ax
    65007dad:	data16 xchg ax,ax
    65007db0:	movzx  ecx,BYTE PTR [rax]
    65007db3:	mov    BYTE PTR [rdx],cl
    65007db5:	add    rax,0x1
    65007db9:	add    rdx,0x1
    65007dbd:	test   cl,cl
    65007dbf:	jne    0x65007db0
    65007dc1:	lea    rcx,[rbp+0xa60]
    65007dc8:	call   0x6502ef40
    65007dcd:	mov    QWORD PTR [rbp+0x158],0xf
    65007dd8:	mov    QWORD PTR [rbp+0x150],r13
    65007ddf:	mov    BYTE PTR [rbp+0x140],0x0
    65007de6:	xor    eax,eax
    65007de8:	mov    rcx,rbx
    65007deb:	lea    rdi,[rbp+0xa60]
    65007df2:	repnz scas al,BYTE PTR es:[rdi]
    65007df4:	not    rcx
    65007df7:	lea    r8,[rcx-0x1]
    65007dfb:	lea    rdx,[rbp+0xa60]
    65007e02:	lea    rcx,[rbp+0x138]
    65007e09:	call   0x65002000
    65007e0e:	nop
    65007e0f:	lea    rdx,[rbp+0x138]
    65007e16:	lea    rcx,[rip+0x40133]        # 0x65047f50
    65007e1d:	call   0x6500d320
    65007e22:	test   rax,rax
    65007e25:	setne  dil
    65007e29:	cmp    QWORD PTR [rbp+0x158],0x10
    65007e31:	jb     0x65007e3f
    65007e33:	mov    rcx,QWORD PTR [rbp+0x140]
    65007e3a:	call   0x6501d300
    65007e3f:	mov    QWORD PTR [rbp+0x158],0xf
    65007e4a:	mov    QWORD PTR [rbp+0x150],r13
    65007e51:	mov    BYTE PTR [rbp+0x140],0x0
    65007e58:	mov    rdx,QWORD PTR [r12]
    65007e5c:	sub    rdx,0x18
    65007e60:	lock xadd DWORD PTR [rdx+0x10],ebx
    65007e65:	add    ebx,0xffffffff
    65007e68:	test   ebx,ebx
    65007e6a:	jg     0x65007e7a
    65007e6c:	mov    rcx,QWORD PTR [rdx]
    65007e6f:	mov    rax,QWORD PTR [rcx]
    65007e72:	call   QWORD PTR [rax+0x8]
    65007e75:	mov    al,dil
    65007e78:	jmp    0x65007e7d
    65007e7a:	mov    al,dil
    65007e7d:	mov    rcx,QWORD PTR [rbp+0xe60]
    65007e84:	xor    rcx,rbp
    65007e87:	call   0x6501e650
    65007e8c:	mov    rbx,QWORD PTR [rbp+0xe98]
    65007e93:	mov    rsi,QWORD PTR [rbp+0xea0]
    65007e9a:	mov    rdi,QWORD PTR [rbp+0xea8]
    65007ea1:	lea    rsp,[rbp+0xe70]
    65007ea8:	pop    r13
    65007eaa:	pop    r12
    65007eac:	pop    rbp
    65007ead:	ret    
    65007eae:	int3   
    65007eaf:	int3   
    65007eb0:	rex push rbp
    65007eb2:	sub    rsp,0x20
    65007eb6:	lea    rbp,[rdx+0x20]
    65007eba:	mov    rcx,QWORD PTR [rbp+0x670]
    65007ec1:	call   0x65001cb0
    65007ec6:	add    rsp,0x20
    65007eca:	pop    rbp
    65007ecb:	ret    
    65007ecc:	int3   
    65007ecd:	int3   
    65007ece:	int3   
    65007ecf:	int3   
    65007ed0:	rex push rbp
    65007ed2:	lea    rbp,[rdx+0x20]
    65007ed6:	mov    eax,DWORD PTR [rip+0x4008c]        # 0x65047f68
    65007edc:	and    eax,0xfffffffe
    65007edf:	mov    DWORD PTR [rip+0x40083],eax        # 0x65047f68
    65007ee5:	pop    rbp
    65007ee6:	ret    
    65007ee7:	int3   
    65007ee8:	int3   
    65007ee9:	int3   
    65007eea:	int3   
    65007eeb:	int3   
    65007eec:	int3   
    65007eed:	int3   
    65007eee:	int3   
    65007eef:	int3   
    65007ef0:	rex push rbp
    65007ef2:	sub    rsp,0x20
    65007ef6:	lea    rbp,[rdx+0x20]
    65007efa:	lea    rcx,[rbp+0x0]
    65007efe:	call   0x650064c0
    65007f03:	add    rsp,0x20
    65007f07:	pop    rbp
    65007f08:	ret    
    65007f09:	int3   
    65007f0a:	int3   
    65007f0b:	int3   
    65007f0c:	int3   
    65007f0d:	int3   
    65007f0e:	int3   
    65007f0f:	int3   
    65007f10:	rex push rbp
    65007f12:	sub    rsp,0x20
    65007f16:	lea    rbp,[rdx+0x20]
    65007f1a:	lea    rcx,[rbp+0x30]
    65007f1e:	call   0x65001c70
    65007f23:	add    rsp,0x20
    65007f27:	pop    rbp
    65007f28:	ret    
    65007f29:	int3   
    65007f2a:	int3   
    65007f2b:	int3   
    65007f2c:	int3   
    65007f2d:	int3   
    65007f2e:	int3   
    65007f2f:	int3   
    65007f30:	rex push rbp
    65007f32:	sub    rsp,0x20
    65007f36:	lea    rbp,[rdx+0x20]
    65007f3a:	lea    rcx,[rbp+0x80]
    65007f41:	call   0x65001c70
    65007f46:	add    rsp,0x20
    65007f4a:	pop    rbp
    65007f4b:	ret    
    65007f4c:	int3   
    65007f4d:	int3   
    65007f4e:	int3   
    65007f4f:	int3   
    65007f50:	rex push rbp
    65007f52:	sub    rsp,0x20
    65007f56:	lea    rbp,[rdx+0x20]
    65007f5a:	lea    rcx,[rbp+0x58]
    65007f5e:	call   0x65001c70
    65007f63:	add    rsp,0x20
    65007f67:	pop    rbp
    65007f68:	ret    
    65007f69:	int3   
    65007f6a:	int3   
    65007f6b:	int3   
    65007f6c:	int3   
    65007f6d:	int3   
    65007f6e:	int3   
    65007f6f:	int3   
    65007f70:	rex push rbp
    65007f72:	sub    rsp,0x20
    65007f76:	lea    rbp,[rdx+0x20]
    65007f7a:	lea    rcx,[rbp+0xa8]
    65007f81:	call   0x65001c70
    65007f86:	add    rsp,0x20
    65007f8a:	pop    rbp
    65007f8b:	ret    
    65007f8c:	int3   
    65007f8d:	int3   
    65007f8e:	int3   
    65007f8f:	int3   
    65007f90:	rex push rbp
    65007f92:	sub    rsp,0x20
    65007f96:	lea    rbp,[rdx+0x20]
    65007f9a:	lea    rcx,[rbp+0xf8]
    65007fa1:	call   0x65001c70
    65007fa6:	add    rsp,0x20
    65007faa:	pop    rbp
    65007fab:	ret    
    65007fac:	int3   
    65007fad:	int3   
    65007fae:	int3   
    65007faf:	int3   
    65007fb0:	rex push rbp
    65007fb2:	sub    rsp,0x20
    65007fb6:	lea    rbp,[rdx+0x20]
    65007fba:	lea    rcx,[rbp+0xd0]
    65007fc1:	call   0x65001c70
    65007fc6:	add    rsp,0x20
    65007fca:	pop    rbp
    65007fcb:	ret    
    65007fcc:	int3   
    65007fcd:	int3   
    65007fce:	int3   
    65007fcf:	int3   
    65007fd0:	rex push rbp
    65007fd2:	sub    rsp,0x20
    65007fd6:	lea    rbp,[rdx+0x20]
    65007fda:	lea    rcx,[rbp+0x430]
    65007fe1:	call   0x65001c70
    65007fe6:	add    rsp,0x20
    65007fea:	pop    rbp
    65007feb:	ret    
    65007fec:	int3   
    65007fed:	int3   
    65007fee:	int3   
    65007fef:	int3   
    65007ff0:	rex push rbp
    65007ff2:	sub    rsp,0x20
    65007ff6:	lea    rbp,[rdx+0x20]
    65007ffa:	lea    rcx,[rbp+0x250]
    65008001:	call   0x65001c70
    65008006:	add    rsp,0x20
    6500800a:	pop    rbp
    6500800b:	ret    
    6500800c:	int3   
    6500800d:	int3   
    6500800e:	int3   
    6500800f:	int3   
    65008010:	rex push rbp
    65008012:	sub    rsp,0x20
    65008016:	lea    rbp,[rdx+0x20]
    6500801a:	lea    rcx,[rbp+0x5c0]
    65008021:	call   0x65001c70
    65008026:	add    rsp,0x20
    6500802a:	pop    rbp
    6500802b:	ret    
    6500802c:	int3   
    6500802d:	int3   
    6500802e:	int3   
    6500802f:	int3   
    65008030:	rex push rbp
    65008032:	sub    rsp,0x20
    65008036:	lea    rbp,[rdx+0x20]
    6500803a:	lea    rcx,[rbp+0x2a0]
    65008041:	call   0x65001c70
    65008046:	add    rsp,0x20
    6500804a:	pop    rbp
    6500804b:	ret    
    6500804c:	int3   
    6500804d:	int3   
    6500804e:	int3   
    6500804f:	int3   
    65008050:	rex push rbp
    65008052:	sub    rsp,0x20
    65008056:	lea    rbp,[rdx+0x20]
    6500805a:	lea    rcx,[rbp+0x480]
    65008061:	call   0x65001c70
    65008066:	add    rsp,0x20
    6500806a:	pop    rbp
    6500806b:	ret    
    6500806c:	int3   
    6500806d:	int3   
    6500806e:	int3   
    6500806f:	int3   
    65008070:	rex push rbp
    65008072:	sub    rsp,0x20
    65008076:	lea    rbp,[rdx+0x20]
    6500807a:	lea    rcx,[rbp+0x2f0]
    65008081:	call   0x65001c70
    65008086:	add    rsp,0x20
    6500808a:	pop    rbp
    6500808b:	ret    
    6500808c:	int3   
    6500808d:	int3   
    6500808e:	int3   
    6500808f:	int3   
    65008090:	rex push rbp
    65008092:	sub    rsp,0x20
    65008096:	lea    rbp,[rdx+0x20]
    6500809a:	lea    rcx,[rbp+0x160]
    650080a1:	call   0x65001c70
    650080a6:	add    rsp,0x20
    650080aa:	pop    rbp
    650080ab:	ret    
    650080ac:	int3   
    650080ad:	int3   
    650080ae:	int3   
    650080af:	int3   
    650080b0:	rex push rbp
    650080b2:	sub    rsp,0x20
    650080b6:	lea    rbp,[rdx+0x20]
    650080ba:	lea    rcx,[rbp+0x340]
    650080c1:	call   0x65001c70
    650080c6:	add    rsp,0x20
    650080ca:	pop    rbp
    650080cb:	ret    
    650080cc:	int3   
    650080cd:	int3   
    650080ce:	int3   
    650080cf:	int3   
    650080d0:	rex push rbp
    650080d2:	sub    rsp,0x20
    650080d6:	lea    rbp,[rdx+0x20]
    650080da:	lea    rcx,[rbp+0x4d0]
    650080e1:	call   0x65001c70
    650080e6:	add    rsp,0x20
    650080ea:	pop    rbp
    650080eb:	ret    
    650080ec:	int3   
    650080ed:	int3   
    650080ee:	int3   
    650080ef:	int3   
    650080f0:	rex push rbp
    650080f2:	sub    rsp,0x20
    650080f6:	lea    rbp,[rdx+0x20]
    650080fa:	lea    rcx,[rbp+0x390]
    65008101:	call   0x65001c70
    65008106:	add    rsp,0x20
    6500810a:	pop    rbp
    6500810b:	ret    
    6500810c:	int3   
    6500810d:	int3   
    6500810e:	int3   
    6500810f:	int3   
    65008110:	rex push rbp
    65008112:	sub    rsp,0x20
    65008116:	lea    rbp,[rdx+0x20]
    6500811a:	lea    rcx,[rbp+0x610]
    65008121:	call   0x65001c70
    65008126:	add    rsp,0x20
    6500812a:	pop    rbp
    6500812b:	ret    
    6500812c:	int3   
    6500812d:	int3   
    6500812e:	int3   
    6500812f:	int3   
    65008130:	rex push rbp
    65008132:	sub    rsp,0x20
    65008136:	lea    rbp,[rdx+0x20]
    6500813a:	lea    rcx,[rbp+0x188]
    65008141:	call   0x65001c70
    65008146:	add    rsp,0x20
    6500814a:	pop    rbp
    6500814b:	ret    
    6500814c:	int3   
    6500814d:	int3   
    6500814e:	int3   
    6500814f:	int3   
    65008150:	rex push rbp
    65008152:	sub    rsp,0x20
    65008156:	lea    rbp,[rdx+0x20]
    6500815a:	lea    rcx,[rbp+0x1b0]
    65008161:	call   0x65001c70
    65008166:	add    rsp,0x20
    6500816a:	pop    rbp
    6500816b:	ret    
    6500816c:	int3   
    6500816d:	int3   
    6500816e:	int3   
    6500816f:	int3   
    65008170:	rex push rbp
    65008172:	sub    rsp,0x20
    65008176:	lea    rbp,[rdx+0x20]
    6500817a:	lea    rcx,[rbp+0x3e0]
    65008181:	call   0x65001c70
    65008186:	add    rsp,0x20
    6500818a:	pop    rbp
    6500818b:	ret    
    6500818c:	int3   
    6500818d:	int3   
    6500818e:	int3   
    6500818f:	int3   
    65008190:	rex push rbp
    65008192:	sub    rsp,0x20
    65008196:	lea    rbp,[rdx+0x20]
    6500819a:	lea    rcx,[rbp+0x520]
    650081a1:	call   0x65001c70
    650081a6:	add    rsp,0x20
    650081aa:	pop    rbp
    650081ab:	ret    
    650081ac:	int3   
    650081ad:	int3   
    650081ae:	int3   
    650081af:	int3   
    650081b0:	rex push rbp
    650081b2:	sub    rsp,0x20
    650081b6:	lea    rbp,[rdx+0x20]
    650081ba:	lea    rcx,[rbp+0x1d8]
    650081c1:	call   0x65001c70
    650081c6:	add    rsp,0x20
    650081ca:	pop    rbp
    650081cb:	ret    
    650081cc:	int3   
    650081cd:	int3   
    650081ce:	int3   
    650081cf:	int3   
    650081d0:	rex push rbp
    650081d2:	sub    rsp,0x20
    650081d6:	lea    rbp,[rdx+0x20]
    650081da:	lea    rcx,[rbp+0x228]
    650081e1:	call   0x65001c70
    650081e6:	add    rsp,0x20
    650081ea:	pop    rbp
    650081eb:	ret    
    650081ec:	int3   
    650081ed:	int3   
    650081ee:	int3   
    650081ef:	int3   
    650081f0:	rex push rbp
    650081f2:	sub    rsp,0x20
    650081f6:	lea    rbp,[rdx+0x20]
    650081fa:	lea    rcx,[rbp+0x278]
    65008201:	call   0x65001c70
    65008206:	add    rsp,0x20
    6500820a:	pop    rbp
    6500820b:	ret    
    6500820c:	int3   
    6500820d:	int3   
    6500820e:	int3   
    6500820f:	int3   
    65008210:	rex push rbp
    65008212:	sub    rsp,0x20
    65008216:	lea    rbp,[rdx+0x20]
    6500821a:	lea    rcx,[rbp+0x2c8]
    65008221:	call   0x65001c70
    65008226:	add    rsp,0x20
    6500822a:	pop    rbp
    6500822b:	ret    
    6500822c:	int3   
    6500822d:	int3   
    6500822e:	int3   
    6500822f:	int3   
    65008230:	rex push rbp
    65008232:	sub    rsp,0x20
    65008236:	lea    rbp,[rdx+0x20]
    6500823a:	lea    rcx,[rbp+0x318]
    65008241:	call   0x65001c70
    65008246:	add    rsp,0x20
    6500824a:	pop    rbp
    6500824b:	ret    
    6500824c:	int3   
    6500824d:	int3   
    6500824e:	int3   
    6500824f:	int3   
    65008250:	rex push rbp
    65008252:	sub    rsp,0x20
    65008256:	lea    rbp,[rdx+0x20]
    6500825a:	lea    rcx,[rbp+0x368]
    65008261:	call   0x65001c70
    65008266:	add    rsp,0x20
    6500826a:	pop    rbp
    6500826b:	ret    
    6500826c:	int3   
    6500826d:	int3   
    6500826e:	int3   
    6500826f:	int3   
    65008270:	rex push rbp
    65008272:	sub    rsp,0x20
    65008276:	lea    rbp,[rdx+0x20]
    6500827a:	lea    rcx,[rbp+0x3b8]
    65008281:	call   0x65001c70
    65008286:	add    rsp,0x20
    6500828a:	pop    rbp
    6500828b:	ret    
    6500828c:	int3   
    6500828d:	int3   
    6500828e:	int3   
    6500828f:	int3   
    65008290:	rex push rbp
    65008292:	sub    rsp,0x20
    65008296:	lea    rbp,[rdx+0x20]
    6500829a:	lea    rcx,[rbp+0x408]
    650082a1:	call   0x65001c70
    650082a6:	add    rsp,0x20
    650082aa:	pop    rbp
    650082ab:	ret    
    650082ac:	int3   
    650082ad:	int3   
    650082ae:	int3   
    650082af:	int3   
    650082b0:	rex push rbp
    650082b2:	sub    rsp,0x20
    650082b6:	lea    rbp,[rdx+0x20]
    650082ba:	lea    rcx,[rbp+0x458]
    650082c1:	call   0x65001c70
    650082c6:	add    rsp,0x20
    650082ca:	pop    rbp
    650082cb:	ret    
    650082cc:	int3   
    650082cd:	int3   
    650082ce:	int3   
    650082cf:	int3   
    650082d0:	rex push rbp
    650082d2:	sub    rsp,0x20
    650082d6:	lea    rbp,[rdx+0x20]
    650082da:	lea    rcx,[rbp+0x4a8]
    650082e1:	call   0x65001c70
    650082e6:	add    rsp,0x20
    650082ea:	pop    rbp
    650082eb:	ret    
    650082ec:	int3   
    650082ed:	int3   
    650082ee:	int3   
    650082ef:	int3   
    650082f0:	rex push rbp
    650082f2:	sub    rsp,0x20
    650082f6:	lea    rbp,[rdx+0x20]
    650082fa:	lea    rcx,[rbp+0x4f8]
    65008301:	call   0x65001c70
    65008306:	add    rsp,0x20
    6500830a:	pop    rbp
    6500830b:	ret    
    6500830c:	int3   
    6500830d:	int3   
    6500830e:	int3   
    6500830f:	int3   
    65008310:	rex push rbp
    65008312:	sub    rsp,0x20
    65008316:	lea    rbp,[rdx+0x20]
    6500831a:	lea    rcx,[rbp+0x548]
    65008321:	call   0x65001c70
    65008326:	add    rsp,0x20
    6500832a:	pop    rbp
    6500832b:	ret    
    6500832c:	int3   
    6500832d:	int3   
    6500832e:	int3   
    6500832f:	int3   
    65008330:	rex push rbp
    65008332:	sub    rsp,0x20
    65008336:	lea    rbp,[rdx+0x20]
    6500833a:	lea    rcx,[rbp+0x598]
    65008341:	call   0x65001c70
    65008346:	add    rsp,0x20
    6500834a:	pop    rbp
    6500834b:	ret    
    6500834c:	int3   
    6500834d:	int3   
    6500834e:	int3   
    6500834f:	int3   
    65008350:	rex push rbp
    65008352:	sub    rsp,0x20
    65008356:	lea    rbp,[rdx+0x20]
    6500835a:	lea    rcx,[rbp+0x5e8]
    65008361:	call   0x65001c70
    65008366:	add    rsp,0x20
    6500836a:	pop    rbp
    6500836b:	ret    
    6500836c:	int3   
    6500836d:	int3   
    6500836e:	int3   
    6500836f:	int3   
    65008370:	rex push rbp
    65008372:	sub    rsp,0x20
    65008376:	lea    rbp,[rdx+0x20]
    6500837a:	lea    rcx,[rbp+0x638]
    65008381:	call   0x65001c70
    65008386:	add    rsp,0x20
    6500838a:	pop    rbp
    6500838b:	ret    
    6500838c:	int3   
    6500838d:	int3   
    6500838e:	int3   
    6500838f:	int3   
    65008390:	rex push rbp
    65008392:	sub    rsp,0x20
    65008396:	lea    rbp,[rdx+0x20]
    6500839a:	lea    rcx,[rbp+0x200]
    650083a1:	call   0x65001c70
    650083a6:	add    rsp,0x20
    650083aa:	pop    rbp
    650083ab:	ret    
    650083ac:	int3   
    650083ad:	int3   
    650083ae:	int3   
    650083af:	int3   
    650083b0:	rex push rbp
    650083b2:	sub    rsp,0x20
    650083b6:	lea    rbp,[rdx+0x20]
    650083ba:	lea    rcx,[rbp+0x570]
    650083c1:	call   0x65001c70
    650083c6:	add    rsp,0x20
    650083ca:	pop    rbp
    650083cb:	ret    
    650083cc:	int3   
    650083cd:	int3   
    650083ce:	int3   
    650083cf:	int3   
    650083d0:	rex push rbp
    650083d2:	sub    rsp,0x20
    650083d6:	lea    rbp,[rdx+0x20]
    650083da:	lea    rcx,[rbp+0x120]
    650083e1:	call   0x650064c0
    650083e6:	add    rsp,0x20
    650083ea:	pop    rbp
    650083eb:	ret    
    650083ec:	int3   
    650083ed:	int3   
    650083ee:	int3   
    650083ef:	int3   
    650083f0:	rex push rbp
    650083f2:	sub    rsp,0x20
    650083f6:	lea    rbp,[rdx+0x20]
    650083fa:	lea    rcx,[rbp+0x138]
    65008401:	call   0x65001c70
    65008406:	add    rsp,0x20
    6500840a:	pop    rbp
    6500840b:	ret    
    6500840c:	int3   
    6500840d:	int3   
    6500840e:	int3   
    6500840f:	int3   
    65008410:	rex push rbp
    65008412:	push   r12
    65008414:	push   r13
    65008416:	mov    eax,0x13d0
    6500841b:	call   0x65033230
    65008420:	sub    rsp,rax
    65008423:	lea    rbp,[rsp+0x20]
    65008428:	mov    QWORD PTR [rbp+0x9d0],0xfffffffffffffffe
    65008433:	mov    QWORD PTR [rbp+0x13d8],rbx
    6500843a:	mov    QWORD PTR [rbp+0x13e0],rsi
    65008441:	mov    QWORD PTR [rbp+0x13e8],rdi
    65008448:	mov    rax,QWORD PTR [rip+0x3acd1]        # 0x65043120
    6500844f:	xor    rax,rbp
    65008452:	mov    QWORD PTR [rbp+0x13a0],rax
    65008459:	mov    r12,rcx
    6500845c:	mov    QWORD PTR [rbp+0x9d8],rcx
    65008463:	mov    eax,DWORD PTR [rip+0x3fadf]        # 0x65047f48
    65008469:	xor    r13d,r13d
    6500846c:	test   al,0x1
    6500846e:	jne    0x650084c4
    65008470:	or     eax,0x1
    65008473:	mov    DWORD PTR [rip+0x3facf],eax        # 0x65047f48
    65008479:	lea    rcx,[rip+0x3fab0]        # 0x65047f30
    65008480:	call   0x6500eff0
    65008485:	mov    QWORD PTR [rip+0x3faac],rax        # 0x65047f38
    6500848c:	mov    BYTE PTR [rax+0x41],0x1
    65008490:	mov    rax,QWORD PTR [rip+0x3faa1]        # 0x65047f38
    65008497:	mov    QWORD PTR [rax+0x8],rax
    6500849b:	mov    rax,QWORD PTR [rip+0x3fa96]        # 0x65047f38
    650084a2:	mov    QWORD PTR [rax],rax
    650084a5:	mov    rax,QWORD PTR [rip+0x3fa8c]        # 0x65047f38
    650084ac:	mov    QWORD PTR [rax+0x10],rax
    650084b0:	mov    QWORD PTR [rip+0x3fa89],r13        # 0x65047f40
    650084b7:	lea    rcx,[rip+0x2b002]        # 0x650334c0
    650084be:	call   0x6501e7f0
    650084c3:	nop
    650084c4:	or     rbx,0xffffffffffffffff
    650084c8:	cmp    QWORD PTR [rip+0x3fa70],0x0        # 0x65047f40
    650084d0:	jne    0x6500a68b
    650084d6:	lea    rcx,[rbp+0x0]
    650084da:	call   0x6500eff0
    650084df:	mov    QWORD PTR [rbp+0x8],rax
    650084e3:	mov    BYTE PTR [rax+0x41],0x1
    650084e7:	mov    rax,QWORD PTR [rbp+0x8]
    650084eb:	mov    QWORD PTR [rax+0x8],rax
    650084ef:	mov    rax,QWORD PTR [rbp+0x8]
    650084f3:	mov    QWORD PTR [rax],rax
    650084f6:	mov    rax,QWORD PTR [rbp+0x8]
    650084fa:	mov    QWORD PTR [rax+0x10],rax
    650084fe:	mov    QWORD PTR [rbp+0x10],r13
    65008502:	lea    r8,[rip+0x2f887]        # 0x65037d90
    65008509:	lea    edx,[rbx+0xe]
    6500850c:	lea    rcx,[rip+0x2f8ad]        # 0x65037dc0
    65008513:	call   0x6500bcb0
    65008518:	mov    rsi,rax
    6500851b:	mov    edx,0xf
    65008520:	mov    QWORD PTR [rbp+0x50],rdx
    65008524:	mov    r8,r13
    65008527:	mov    QWORD PTR [rbp+0x48],r13
    6500852b:	mov    BYTE PTR [rbp+0x38],r8b
    6500852f:	xor    eax,eax
    65008531:	mov    rcx,rbx
    65008534:	mov    rdi,rsi
    65008537:	repnz scas al,BYTE PTR es:[rdi]
    65008539:	not    rcx
    6500853c:	sub    rcx,0x1
    65008540:	mov    rdi,rcx
    65008543:	cmp    rcx,0xfffffffffffffffe
    65008547:	jbe    0x65008556
    65008549:	call   0x6501d150
    6500854e:	mov    rdx,QWORD PTR [rbp+0x50]
    65008552:	mov    r8,QWORD PTR [rbp+0x48]
    65008556:	cmp    rdx,rdi
    65008559:	jae    0x6500856d
    6500855b:	mov    rdx,rdi
    6500855e:	lea    rcx,[rbp+0x30]
    65008562:	call   0x65002330
    65008567:	mov    rdx,QWORD PTR [rbp+0x50]
    6500856b:	jmp    0x65008588
    6500856d:	test   rdi,rdi
    65008570:	jne    0x65008588
    65008572:	mov    QWORD PTR [rbp+0x48],r13
    65008576:	lea    rax,[rbp+0x38]
    6500857a:	cmp    rdx,0x10
    6500857e:	cmovae rax,QWORD PTR [rbp+0x38]
    65008583:	mov    BYTE PTR [rax],dil
    65008586:	jmp    0x650085bb
    65008588:	test   rdi,rdi
    6500858b:	je     0x650085bb
    6500858d:	lea    rcx,[rbp+0x38]
    65008591:	cmp    rdx,0x10
    65008595:	cmovae rcx,QWORD PTR [rbp+0x38]
    6500859a:	mov    r9,rdi
    6500859d:	mov    r8,rsi
    650085a0:	call   0x6501d7b0
    650085a5:	mov    QWORD PTR [rbp+0x48],rdi
    650085a9:	lea    rax,[rbp+0x38]
    650085ad:	cmp    QWORD PTR [rbp+0x50],0x10
    650085b2:	cmovae rax,QWORD PTR [rbp+0x38]
    650085b7:	mov    BYTE PTR [rdi+rax*1],0x0
    650085bb:	lea    r8,[rbp+0x30]
    650085bf:	lea    rdx,[rbp+0xe48]
    650085c6:	lea    rcx,[rbp+0x0]
    650085ca:	call   0x6500d0d0
    650085cf:	nop
    650085d0:	cmp    QWORD PTR [rbp+0x50],0x10
    650085d5:	jb     0x650085e0
    650085d7:	mov    rcx,QWORD PTR [rbp+0x38]
    650085db:	call   0x6501d300
    650085e0:	lea    r8,[rip+0x2f7e9]        # 0x65037dd0
    650085e7:	mov    edx,0x5
    650085ec:	lea    rcx,[rip+0x2f80d]        # 0x65037e00
    650085f3:	call   0x6500bcb0
    650085f8:	mov    rsi,rax
    650085fb:	mov    edx,0xf
    65008600:	mov    QWORD PTR [rbp+0xa0],rdx
    65008607:	mov    r8,r13
    6500860a:	mov    QWORD PTR [rbp+0x98],r13
    65008611:	mov    BYTE PTR [rbp+0x88],r8b
    65008618:	xor    eax,eax
    6500861a:	mov    rcx,rbx
    6500861d:	mov    rdi,rsi
    65008620:	repnz scas al,BYTE PTR es:[rdi]
    65008622:	not    rcx
    65008625:	sub    rcx,0x1
    65008629:	mov    rdi,rcx
    6500862c:	cmp    rcx,0xfffffffffffffffe
    65008630:	jbe    0x65008645
    65008632:	call   0x6501d150
    65008637:	mov    rdx,QWORD PTR [rbp+0xa0]
    6500863e:	mov    r8,QWORD PTR [rbp+0x98]
    65008645:	cmp    rdx,rdi
    65008648:	jae    0x65008662
    6500864a:	mov    rdx,rdi
    6500864d:	lea    rcx,[rbp+0x80]
    65008654:	call   0x65002330
    65008659:	mov    rdx,QWORD PTR [rbp+0xa0]
    65008660:	jmp    0x65008686
    65008662:	test   rdi,rdi
    65008665:	jne    0x65008686
    65008667:	mov    QWORD PTR [rbp+0x98],r13
    6500866e:	lea    rax,[rbp+0x88]
    65008675:	cmp    rdx,0x10
    65008679:	cmovae rax,QWORD PTR [rbp+0x88]
    65008681:	mov    BYTE PTR [rax],dil
    65008684:	jmp    0x650086cb
    65008686:	test   rdi,rdi
    65008689:	je     0x650086cb
    6500868b:	lea    rcx,[rbp+0x88]
    65008692:	cmp    rdx,0x10
    65008696:	cmovae rcx,QWORD PTR [rbp+0x88]
    6500869e:	mov    r9,rdi
    650086a1:	mov    r8,rsi
    650086a4:	call   0x6501d7b0
    650086a9:	mov    QWORD PTR [rbp+0x98],rdi
    650086b0:	lea    rax,[rbp+0x88]
    650086b7:	cmp    QWORD PTR [rbp+0xa0],0x10
    650086bf:	cmovae rax,QWORD PTR [rbp+0x88]
    650086c7:	mov    BYTE PTR [rdi+rax*1],0x0
    650086cb:	lea    r8,[rbp+0x80]
    650086d2:	lea    rdx,[rbp+0xf38]
    650086d9:	lea    rcx,[rbp+0x0]
    650086dd:	call   0x6500d0d0
    650086e2:	nop
    650086e3:	cmp    QWORD PTR [rbp+0xa0],0x10
    650086eb:	jb     0x650086f9
    650086ed:	mov    rcx,QWORD PTR [rbp+0x88]
    650086f4:	call   0x6501d300
    650086f9:	lea    r8,[rip+0x2f708]        # 0x65037e08
    65008700:	mov    edx,0x5
    65008705:	lea    rcx,[rip+0x2f724]        # 0x65037e30
    6500870c:	call   0x6500bcb0
    65008711:	mov    rsi,rax
    65008714:	mov    edx,0xf
    65008719:	mov    QWORD PTR [rbp+0x78],rdx
    6500871d:	mov    r8,r13
    65008720:	mov    QWORD PTR [rbp+0x70],r13
    65008724:	mov    BYTE PTR [rbp+0x60],r8b
    65008728:	xor    eax,eax
    6500872a:	mov    rcx,rbx
    6500872d:	mov    rdi,rsi
    65008730:	repnz scas al,BYTE PTR es:[rdi]
    65008732:	not    rcx
    65008735:	sub    rcx,0x1
    65008739:	mov    rdi,rcx
    6500873c:	cmp    rcx,0xfffffffffffffffe
    65008740:	jbe    0x6500874f
    65008742:	call   0x6501d150
    65008747:	mov    rdx,QWORD PTR [rbp+0x78]
    6500874b:	mov    r8,QWORD PTR [rbp+0x70]
    6500874f:	cmp    rdx,rdi
    65008752:	jae    0x65008766
    65008754:	mov    rdx,rdi
    65008757:	lea    rcx,[rbp+0x58]
    6500875b:	call   0x65002330
    65008760:	mov    rdx,QWORD PTR [rbp+0x78]
    65008764:	jmp    0x65008781
    65008766:	test   rdi,rdi
    65008769:	jne    0x65008781
    6500876b:	mov    QWORD PTR [rbp+0x70],r13
    6500876f:	lea    rax,[rbp+0x60]
    65008773:	cmp    rdx,0x10
    65008777:	cmovae rax,QWORD PTR [rbp+0x60]
    6500877c:	mov    BYTE PTR [rax],dil
    6500877f:	jmp    0x650087b4
    65008781:	test   rdi,rdi
    65008784:	je     0x650087b4
    65008786:	lea    rcx,[rbp+0x60]
    6500878a:	cmp    rdx,0x10
    6500878e:	cmovae rcx,QWORD PTR [rbp+0x60]
    65008793:	mov    r9,rdi
    65008796:	mov    r8,rsi
    65008799:	call   0x6501d7b0
    6500879e:	mov    QWORD PTR [rbp+0x70],rdi
    650087a2:	lea    rax,[rbp+0x60]
    650087a6:	cmp    QWORD PTR [rbp+0x78],0x10
    650087ab:	cmovae rax,QWORD PTR [rbp+0x60]
    650087b0:	mov    BYTE PTR [rax+rdi*1],0x0
    650087b4:	lea    r8,[rbp+0x58]
    650087b8:	lea    rdx,[rbp+0xf68]
    650087bf:	lea    rcx,[rbp+0x0]
    650087c3:	call   0x6500d0d0
    650087c8:	nop
    650087c9:	cmp    QWORD PTR [rbp+0x78],0x10
    650087ce:	jb     0x650087d9
    650087d0:	mov    rcx,QWORD PTR [rbp+0x60]
    650087d4:	call   0x6501d300
    650087d9:	lea    r8,[rip+0x2f658]        # 0x65037e38
    650087e0:	mov    edx,0x11
    650087e5:	lea    rcx,[rip+0x2f67c]        # 0x65037e68
    650087ec:	call   0x6500bcb0
    650087f1:	mov    rsi,rax
    650087f4:	mov    edx,0xf
    650087f9:	mov    QWORD PTR [rbp+0xc8],rdx
    65008800:	mov    r8,r13
    65008803:	mov    QWORD PTR [rbp+0xc0],r13
    6500880a:	mov    BYTE PTR [rbp+0xb0],r8b
    65008811:	xor    eax,eax
    65008813:	mov    rcx,rbx
    65008816:	mov    rdi,rsi
    65008819:	repnz scas al,BYTE PTR es:[rdi]
    6500881b:	not    rcx
    6500881e:	sub    rcx,0x1
    65008822:	mov    rdi,rcx
    65008825:	cmp    rcx,0xfffffffffffffffe
    65008829:	jbe    0x6500883e
    6500882b:	call   0x6501d150
    65008830:	mov    rdx,QWORD PTR [rbp+0xc8]
    65008837:	mov    r8,QWORD PTR [rbp+0xc0]
    6500883e:	cmp    rdx,rdi
    65008841:	jae    0x6500885b
    65008843:	mov    rdx,rdi
    65008846:	lea    rcx,[rbp+0xa8]
    6500884d:	call   0x65002330
    65008852:	mov    rdx,QWORD PTR [rbp+0xc8]
    65008859:	jmp    0x6500887f
    6500885b:	test   rdi,rdi
    6500885e:	jne    0x6500887f
    65008860:	mov    QWORD PTR [rbp+0xc0],r13
    65008867:	lea    rax,[rbp+0xb0]
    6500886e:	cmp    rdx,0x10
    65008872:	cmovae rax,QWORD PTR [rbp+0xb0]
    6500887a:	mov    BYTE PTR [rax],dil
    6500887d:	jmp    0x650088c4
    6500887f:	test   rdi,rdi
    65008882:	je     0x650088c4
    65008884:	lea    rcx,[rbp+0xb0]
    6500888b:	cmp    rdx,0x10
    6500888f:	cmovae rcx,QWORD PTR [rbp+0xb0]
    65008897:	mov    r9,rdi
    6500889a:	mov    r8,rsi
    6500889d:	call   0x6501d7b0
    650088a2:	mov    QWORD PTR [rbp+0xc0],rdi
    650088a9:	lea    rax,[rbp+0xb0]
    650088b0:	cmp    QWORD PTR [rbp+0xc8],0x10
    650088b8:	cmovae rax,QWORD PTR [rbp+0xb0]
    650088c0:	mov    BYTE PTR [rdi+rax*1],0x0
    650088c4:	lea    r8,[rbp+0xa8]
    650088cb:	lea    rdx,[rbp+0xa40]
    650088d2:	lea    rcx,[rbp+0x0]
    650088d6:	call   0x6500d0d0
    650088db:	nop
    650088dc:	cmp    QWORD PTR [rbp+0xc8],0x10
    650088e4:	jb     0x650088f2
    650088e6:	mov    rcx,QWORD PTR [rbp+0xb0]
    650088ed:	call   0x6501d300
    650088f2:	lea    r8,[rip+0x2f587]        # 0x65037e80
    650088f9:	mov    edx,0x6
    650088fe:	lea    rcx,[rip+0x2f5b3]        # 0x65037eb8
    65008905:	call   0x6500bcb0
    6500890a:	mov    rsi,rax
    6500890d:	mov    edx,0xf
    65008912:	mov    QWORD PTR [rbp+0x118],rdx
    65008919:	mov    r8,r13
    6500891c:	mov    QWORD PTR [rbp+0x110],r13
    65008923:	mov    BYTE PTR [rbp+0x100],r8b
    6500892a:	xor    eax,eax
    6500892c:	mov    rcx,rbx
    6500892f:	mov    rdi,rsi
    65008932:	repnz scas al,BYTE PTR es:[rdi]
    65008934:	not    rcx
    65008937:	sub    rcx,0x1
    6500893b:	mov    rdi,rcx
    6500893e:	cmp    rcx,0xfffffffffffffffe
    65008942:	jbe    0x65008957
    65008944:	call   0x6501d150
    65008949:	mov    rdx,QWORD PTR [rbp+0x118]
    65008950:	mov    r8,QWORD PTR [rbp+0x110]
    65008957:	cmp    rdx,rdi
    6500895a:	jae    0x65008974
    6500895c:	mov    rdx,rdi
    6500895f:	lea    rcx,[rbp+0xf8]
    65008966:	call   0x65002330
    6500896b:	mov    rdx,QWORD PTR [rbp+0x118]
    65008972:	jmp    0x65008998
    65008974:	test   rdi,rdi
    65008977:	jne    0x65008998
    65008979:	mov    QWORD PTR [rbp+0x110],r13
    65008980:	lea    rax,[rbp+0x100]
    65008987:	cmp    rdx,0x10
    6500898b:	cmovae rax,QWORD PTR [rbp+0x100]
    65008993:	mov    BYTE PTR [rax],dil
    65008996:	jmp    0x650089dd
    65008998:	test   rdi,rdi
    6500899b:	je     0x650089dd
    6500899d:	lea    rcx,[rbp+0x100]
    650089a4:	cmp    rdx,0x10
    650089a8:	cmovae rcx,QWORD PTR [rbp+0x100]
    650089b0:	mov    r9,rdi
    650089b3:	mov    r8,rsi
    650089b6:	call   0x6501d7b0
    650089bb:	mov    QWORD PTR [rbp+0x110],rdi
    650089c2:	lea    rax,[rbp+0x100]
    650089c9:	cmp    QWORD PTR [rbp+0x118],0x10
    650089d1:	cmovae rax,QWORD PTR [rbp+0x100]
    650089d9:	mov    BYTE PTR [rdi+rax*1],0x0
    650089dd:	lea    r8,[rbp+0xf8]
    650089e4:	lea    rdx,[rbp+0xef0]
    650089eb:	lea    rcx,[rbp+0x0]
    650089ef:	call   0x6500d0d0
    650089f4:	nop
    650089f5:	cmp    QWORD PTR [rbp+0x118],0x10
    650089fd:	jb     0x65008a0b
    650089ff:	mov    rcx,QWORD PTR [rbp+0x100]
    65008a06:	call   0x6501d300
    65008a0b:	lea    r8,[rip+0x2f4ae]        # 0x65037ec0
    65008a12:	mov    edx,0x5
    65008a17:	lea    rcx,[rip+0x2f4e2]        # 0x65037f00
    65008a1e:	call   0x6500bcb0
    65008a23:	mov    rsi,rax
    65008a26:	mov    edx,0xf
    65008a2b:	mov    QWORD PTR [rbp+0xf0],rdx
    65008a32:	mov    r8,r13
    65008a35:	mov    QWORD PTR [rbp+0xe8],r13
    65008a3c:	mov    BYTE PTR [rbp+0xd8],r8b
    65008a43:	xor    eax,eax
    65008a45:	mov    rcx,rbx
    65008a48:	mov    rdi,rsi
    65008a4b:	repnz scas al,BYTE PTR es:[rdi]
    65008a4d:	not    rcx
    65008a50:	sub    rcx,0x1
    65008a54:	mov    rdi,rcx
    65008a57:	cmp    rcx,0xfffffffffffffffe
    65008a5b:	jbe    0x65008a70
    65008a5d:	call   0x6501d150
    65008a62:	mov    rdx,QWORD PTR [rbp+0xf0]
    65008a69:	mov    r8,QWORD PTR [rbp+0xe8]
    65008a70:	cmp    rdx,rdi
    65008a73:	jae    0x65008a8d
    65008a75:	mov    rdx,rdi
    65008a78:	lea    rcx,[rbp+0xd0]
    65008a7f:	call   0x65002330
    65008a84:	mov    rdx,QWORD PTR [rbp+0xf0]
    65008a8b:	jmp    0x65008ab1
    65008a8d:	test   rdi,rdi
    65008a90:	jne    0x65008ab1
    65008a92:	mov    QWORD PTR [rbp+0xe8],r13
    65008a99:	lea    rax,[rbp+0xd8]
    65008aa0:	cmp    rdx,0x10
    65008aa4:	cmovae rax,QWORD PTR [rbp+0xd8]
    65008aac:	mov    BYTE PTR [rax],dil
    65008aaf:	jmp    0x65008af6
    65008ab1:	test   rdi,rdi
    65008ab4:	je     0x65008af6
    65008ab6:	lea    rcx,[rbp+0xd8]
    65008abd:	cmp    rdx,0x10
    65008ac1:	cmovae rcx,QWORD PTR [rbp+0xd8]
    65008ac9:	mov    r9,rdi
    65008acc:	mov    r8,rsi
    65008acf:	call   0x6501d7b0
    65008ad4:	mov    QWORD PTR [rbp+0xe8],rdi
    65008adb:	lea    rax,[rbp+0xd8]
    65008ae2:	cmp    QWORD PTR [rbp+0xf0],0x10
    65008aea:	cmovae rax,QWORD PTR [rbp+0xd8]
    65008af2:	mov    BYTE PTR [rdi+rax*1],0x0
    65008af6:	lea    r8,[rbp+0xd0]
    65008afd:	lea    rdx,[rbp+0xa70]
    65008b04:	lea    rcx,[rbp+0x0]
    65008b08:	call   0x6500d0d0
    65008b0d:	nop
    65008b0e:	cmp    QWORD PTR [rbp+0xf0],0x10
    65008b16:	jb     0x65008b24
    65008b18:	mov    rcx,QWORD PTR [rbp+0xd8]
    65008b1f:	call   0x6501d300
    65008b24:	lea    r8,[rip+0x2f3dd]        # 0x65037f08
    65008b2b:	mov    edx,0x8
    65008b30:	lea    rcx,[rip+0x2f409]        # 0x65037f40
    65008b37:	call   0x6500bcb0
    65008b3c:	mov    rdx,rax
    65008b3f:	mov    QWORD PTR [rbp+0x928],0xf
    65008b4a:	mov    QWORD PTR [rbp+0x920],r13
    65008b51:	mov    BYTE PTR [rbp+0x910],0x0
    65008b58:	xor    eax,eax
    65008b5a:	mov    rcx,rbx
    65008b5d:	mov    rdi,rdx
    65008b60:	repnz scas al,BYTE PTR es:[rdi]
    65008b62:	not    rcx
    65008b65:	lea    r8,[rcx-0x1]
    65008b69:	lea    rcx,[rbp+0x908]
    65008b70:	call   0x65002000
    65008b75:	nop
    65008b76:	lea    r8,[rbp+0x908]
    65008b7d:	lea    rdx,[rbp+0xd10]
    65008b84:	lea    rcx,[rbp+0x0]
    65008b88:	call   0x6500d0d0
    65008b8d:	nop
    65008b8e:	cmp    QWORD PTR [rbp+0x928],0x10
    65008b96:	jb     0x65008ba4
    65008b98:	mov    rcx,QWORD PTR [rbp+0x910]
    65008b9f:	call   0x6501d300
    65008ba4:	lea    r8,[rip+0x2f3a5]        # 0x65037f50
    65008bab:	mov    edx,0x7
    65008bb0:	lea    rcx,[rip+0x2f3d9]        # 0x65037f90
    65008bb7:	call   0x6500bcb0
    65008bbc:	mov    rdx,rax
    65008bbf:	mov    QWORD PTR [rbp+0x248],0xf
    65008bca:	mov    QWORD PTR [rbp+0x240],r13
    65008bd1:	mov    BYTE PTR [rbp+0x230],0x0
    65008bd8:	xor    eax,eax
    65008bda:	mov    rcx,rbx
    65008bdd:	mov    rdi,rdx
    65008be0:	repnz scas al,BYTE PTR es:[rdi]
    65008be2:	not    rcx
    65008be5:	lea    r8,[rcx-0x1]
    65008be9:	lea    rcx,[rbp+0x228]
    65008bf0:	call   0x65002000
    65008bf5:	nop
    65008bf6:	lea    r8,[rbp+0x228]
    65008bfd:	lea    rdx,[rbp+0xaa0]
    65008c04:	lea    rcx,[rbp+0x0]
    65008c08:	call   0x6500d0d0
    65008c0d:	nop
    65008c0e:	cmp    QWORD PTR [rbp+0x248],0x10
    65008c16:	jb     0x65008c24
    65008c18:	mov    rcx,QWORD PTR [rbp+0x230]
    65008c1f:	call   0x6501d300
    65008c24:	lea    r8,[rip+0x2f36d]        # 0x65037f98
    65008c2b:	mov    edx,0x5
    65008c30:	lea    rcx,[rip+0x2f389]        # 0x65037fc0
    65008c37:	call   0x6500bcb0
    65008c3c:	mov    rdx,rax
    65008c3f:	mov    QWORD PTR [rbp+0x608],0xf
    65008c4a:	mov    QWORD PTR [rbp+0x600],r13
    65008c51:	mov    BYTE PTR [rbp+0x5f0],0x0
    65008c58:	xor    eax,eax
    65008c5a:	mov    rcx,rbx
    65008c5d:	mov    rdi,rdx
    65008c60:	repnz scas al,BYTE PTR es:[rdi]
    65008c62:	not    rcx
    65008c65:	lea    r8,[rcx-0x1]
    65008c69:	lea    rcx,[rbp+0x5e8]
    65008c70:	call   0x65002000
    65008c75:	nop
    65008c76:	lea    r8,[rbp+0x5e8]
    65008c7d:	lea    rdx,[rbp+0xe60]
    65008c84:	lea    rcx,[rbp+0x0]
    65008c88:	call   0x6500d0d0
    65008c8d:	nop
    65008c8e:	cmp    QWORD PTR [rbp+0x608],0x10
    65008c96:	jb     0x65008ca4
    65008c98:	mov    rcx,QWORD PTR [rbp+0x5f0]
    65008c9f:	call   0x6501d300
    65008ca4:	lea    r8,[rip+0x2f325]        # 0x65037fd0
    65008cab:	mov    edx,0x5
    65008cb0:	lea    rcx,[rip+0x2f359]        # 0x65038010
    65008cb7:	call   0x6500bcb0
    65008cbc:	mov    rdx,rax
    65008cbf:	mov    QWORD PTR [rbp+0x298],0xf
    65008cca:	mov    QWORD PTR [rbp+0x290],r13
    65008cd1:	mov    BYTE PTR [rbp+0x280],0x0
    65008cd8:	xor    eax,eax
    65008cda:	mov    rcx,rbx
    65008cdd:	mov    rdi,rdx
    65008ce0:	repnz scas al,BYTE PTR es:[rdi]
    65008ce2:	not    rcx
    65008ce5:	lea    r8,[rcx-0x1]
    65008ce9:	lea    rcx,[rbp+0x278]
    65008cf0:	call   0x65002000
    65008cf5:	nop
    65008cf6:	lea    r8,[rbp+0x278]
    65008cfd:	lea    rdx,[rbp+0xad0]
    65008d04:	lea    rcx,[rbp+0x0]
    65008d08:	call   0x6500d0d0
    65008d0d:	nop
    65008d0e:	cmp    QWORD PTR [rbp+0x298],0x10
    65008d16:	jb     0x65008d24
    65008d18:	mov    rcx,QWORD PTR [rbp+0x280]
    65008d1f:	call   0x6501d300
    65008d24:	lea    r8,[rip+0x2f2ed]        # 0x65038018
    65008d2b:	mov    edx,0xe
    65008d30:	lea    rcx,[rip+0x2f311]        # 0x65038048
    65008d37:	call   0x6500bcb0
    65008d3c:	mov    rdx,rax
    65008d3f:	mov    QWORD PTR [rbp+0x7e8],0xf
    65008d4a:	mov    QWORD PTR [rbp+0x7e0],r13
    65008d51:	mov    BYTE PTR [rbp+0x7d0],0x0
    65008d58:	xor    eax,eax
    65008d5a:	mov    rcx,rbx
    65008d5d:	mov    rdi,rdx
    65008d60:	repnz scas al,BYTE PTR es:[rdi]
    65008d62:	not    rcx
    65008d65:	lea    r8,[rcx-0x1]
    65008d69:	lea    rcx,[rbp+0x7c8]
    65008d70:	call   0x65002000
    65008d75:	nop
    65008d76:	lea    r8,[rbp+0x7c8]
    65008d7d:	lea    rdx,[rbp+0xd40]
    65008d84:	lea    rcx,[rbp+0x0]
    65008d88:	call   0x6500d0d0
    65008d8d:	nop
    65008d8e:	cmp    QWORD PTR [rbp+0x7e8],0x10
    65008d96:	jb     0x65008da4
    65008d98:	mov    rcx,QWORD PTR [rbp+0x7d0]
    65008d9f:	call   0x6501d300
    65008da4:	lea    r8,[rip+0x2f2ad]        # 0x65038058
    65008dab:	mov    edx,0x6
    65008db0:	lea    rcx,[rip+0x2f2d5]        # 0x6503808c
    65008db7:	call   0x6500bcb0
    65008dbc:	mov    rdx,rax
    65008dbf:	mov    QWORD PTR [rbp+0x2e8],0xf
    65008dca:	mov    QWORD PTR [rbp+0x2e0],r13
    65008dd1:	mov    BYTE PTR [rbp+0x2d0],0x0
    65008dd8:	xor    eax,eax
    65008dda:	mov    rcx,rbx
    65008ddd:	mov    rdi,rdx
    65008de0:	repnz scas al,BYTE PTR es:[rdi]
    65008de2:	not    rcx
    65008de5:	lea    r8,[rcx-0x1]
    65008de9:	lea    rcx,[rbp+0x2c8]
    65008df0:	call   0x65002000
    65008df5:	nop
    65008df6:	lea    r8,[rbp+0x2c8]
    65008dfd:	lea    rdx,[rbp+0xb00]
    65008e04:	lea    rcx,[rbp+0x0]
    65008e08:	call   0x6500d0d0
    65008e0d:	nop
    65008e0e:	cmp    QWORD PTR [rbp+0x2e8],0x10
    65008e16:	jb     0x65008e24
    65008e18:	mov    rcx,QWORD PTR [rbp+0x2d0]
    65008e1f:	call   0x6501d300
    65008e24:	lea    r8,[rip+0x2f26d]        # 0x65038098
    65008e2b:	mov    edx,0x3
    65008e30:	lea    rcx,[rip+0x2f28d]        # 0x650380c4
    65008e37:	call   0x6500bcb0
    65008e3c:	mov    rdx,rax
    65008e3f:	mov    QWORD PTR [rbp+0x658],0xf
    65008e4a:	mov    QWORD PTR [rbp+0x650],r13
    65008e51:	mov    BYTE PTR [rbp+0x640],0x0
    65008e58:	xor    eax,eax
    65008e5a:	mov    rcx,rbx
    65008e5d:	mov    rdi,rdx
    65008e60:	repnz scas al,BYTE PTR es:[rdi]
    65008e62:	not    rcx
    65008e65:	lea    r8,[rcx-0x1]
    65008e69:	lea    rcx,[rbp+0x638]
    65008e70:	call   0x65002000
    65008e75:	nop
    65008e76:	lea    r8,[rbp+0x638]
    65008e7d:	lea    rdx,[rbp+0xf50]
    65008e84:	lea    rcx,[rbp+0x0]
    65008e88:	call   0x6500d0d0
    65008e8d:	nop
    65008e8e:	cmp    QWORD PTR [rbp+0x658],0x10
    65008e96:	jb     0x65008ea4
    65008e98:	mov    rcx,QWORD PTR [rbp+0x640]
    65008e9f:	call   0x6501d300
    65008ea4:	lea    r8,[rip+0x2f21d]        # 0x650380c8
    65008eab:	mov    edx,0x3
    65008eb0:	lea    rcx,[rip+0x2f24d]        # 0x65038104
    65008eb7:	call   0x6500bcb0
    65008ebc:	mov    rdx,rax
    65008ebf:	mov    QWORD PTR [rbp+0x338],0xf
    65008eca:	mov    QWORD PTR [rbp+0x330],r13
    65008ed1:	mov    BYTE PTR [rbp+0x320],0x0
    65008ed8:	xor    eax,eax
    65008eda:	mov    rcx,rbx
    65008edd:	mov    rdi,rdx
    65008ee0:	repnz scas al,BYTE PTR es:[rdi]
    65008ee2:	not    rcx
    65008ee5:	lea    r8,[rcx-0x1]
    65008ee9:	lea    rcx,[rbp+0x318]
    65008ef0:	call   0x65002000
    65008ef5:	nop
    65008ef6:	lea    r8,[rbp+0x318]
    65008efd:	lea    rdx,[rbp+0xb30]
    65008f04:	lea    rcx,[rbp+0x0]
    65008f08:	call   0x6500d0d0
    65008f0d:	nop
    65008f0e:	cmp    QWORD PTR [rbp+0x338],0x10
    65008f16:	jb     0x65008f24
    65008f18:	mov    rcx,QWORD PTR [rbp+0x320]
    65008f1f:	call   0x6501d300
    65008f24:	lea    r8,[rip+0x2f1dd]        # 0x65038108
    65008f2b:	mov    edx,0x3
    65008f30:	lea    rcx,[rip+0x2f201]        # 0x65038138
    65008f37:	call   0x6500bcb0
    65008f3c:	mov    rdx,rax
    65008f3f:	mov    QWORD PTR [rbp+0x8d8],0xf
    65008f4a:	mov    QWORD PTR [rbp+0x8d0],r13
    65008f51:	mov    BYTE PTR [rbp+0x8c0],0x0
    65008f58:	xor    eax,eax
    65008f5a:	mov    rcx,rbx
    65008f5d:	mov    rdi,rdx
    65008f60:	repnz scas al,BYTE PTR es:[rdi]
    65008f62:	not    rcx
    65008f65:	lea    r8,[rcx-0x1]
    65008f69:	lea    rcx,[rbp+0x8b8]
    65008f70:	call   0x65002000
    65008f75:	nop
    65008f76:	lea    r8,[rbp+0x8b8]
    65008f7d:	lea    rdx,[rbp+0xd70]
    65008f84:	lea    rcx,[rbp+0x0]
    65008f88:	call   0x6500d0d0
    65008f8d:	nop
    65008f8e:	cmp    QWORD PTR [rbp+0x8d8],0x10
    65008f96:	jb     0x65008fa4
    65008f98:	mov    rcx,QWORD PTR [rbp+0x8c0]
    65008f9f:	call   0x6501d300
    65008fa4:	lea    r8,[rip+0x2f195]        # 0x65038140
    65008fab:	mov    edx,0x4
    65008fb0:	lea    rcx,[rip+0x2f1c9]        # 0x65038180
    65008fb7:	call   0x6500bcb0
    65008fbc:	mov    rdx,rax
    65008fbf:	mov    QWORD PTR [rbp+0x388],0xf
    65008fca:	mov    QWORD PTR [rbp+0x380],r13
    65008fd1:	mov    BYTE PTR [rbp+0x370],0x0
    65008fd8:	xor    eax,eax
    65008fda:	mov    rcx,rbx
    65008fdd:	mov    rdi,rdx
    65008fe0:	repnz scas al,BYTE PTR es:[rdi]
    65008fe2:	not    rcx
    65008fe5:	lea    r8,[rcx-0x1]
    65008fe9:	lea    rcx,[rbp+0x368]
    65008ff0:	call   0x65002000
    65008ff5:	nop
    65008ff6:	lea    r8,[rbp+0x368]
    65008ffd:	lea    rdx,[rbp+0xb60]
    65009004:	lea    rcx,[rbp+0x0]
    65009008:	call   0x6500d0d0
    6500900d:	nop
    6500900e:	cmp    QWORD PTR [rbp+0x388],0x10
    65009016:	jb     0x65009024
    65009018:	mov    rcx,QWORD PTR [rbp+0x370]
    6500901f:	call   0x6501d300
    65009024:	lea    r8,[rip+0x2f15d]        # 0x65038188
    6500902b:	mov    edx,0x5
    65009030:	lea    rcx,[rip+0x2f189]        # 0x650381c0
    65009037:	call   0x6500bcb0
    6500903c:	mov    rdx,rax
    6500903f:	mov    QWORD PTR [rbp+0x6a8],0xf
    6500904a:	mov    QWORD PTR [rbp+0x6a0],r13
    65009051:	mov    BYTE PTR [rbp+0x690],0x0
    65009058:	xor    eax,eax
    6500905a:	mov    rcx,rbx
    6500905d:	mov    rdi,rdx
    65009060:	repnz scas al,BYTE PTR es:[rdi]
    65009062:	not    rcx
    65009065:	lea    r8,[rcx-0x1]
    65009069:	lea    rcx,[rbp+0x688]
    65009070:	call   0x65002000
    65009075:	nop
    65009076:	lea    r8,[rbp+0x688]
    6500907d:	lea    rdx,[rbp+0xe90]
    65009084:	lea    rcx,[rbp+0x0]
    65009088:	call   0x6500d0d0
    6500908d:	nop
    6500908e:	cmp    QWORD PTR [rbp+0x6a8],0x10
    65009096:	jb     0x650090a4
    65009098:	mov    rcx,QWORD PTR [rbp+0x690]
    6500909f:	call   0x6501d300
    650090a4:	lea    r8,[rip+0x2f11d]        # 0x650381c8
    650090ab:	mov    edx,0x8
    650090b0:	lea    rcx,[rip+0x2f151]        # 0x65038208
    650090b7:	call   0x6500bcb0
    650090bc:	mov    rdx,rax
    650090bf:	mov    QWORD PTR [rbp+0x3d8],0xf
    650090ca:	mov    QWORD PTR [rbp+0x3d0],r13
    650090d1:	mov    BYTE PTR [rbp+0x3c0],0x0
    650090d8:	xor    eax,eax
    650090da:	mov    rcx,rbx
    650090dd:	mov    rdi,rdx
    650090e0:	repnz scas al,BYTE PTR es:[rdi]
    650090e2:	not    rcx
    650090e5:	lea    r8,[rcx-0x1]
    650090e9:	lea    rcx,[rbp+0x3b8]
    650090f0:	call   0x65002000
    650090f5:	nop
    650090f6:	lea    r8,[rbp+0x3b8]
    650090fd:	lea    rdx,[rbp+0xb90]
    65009104:	lea    rcx,[rbp+0x0]
    65009108:	call   0x6500d0d0
    6500910d:	nop
    6500910e:	cmp    QWORD PTR [rbp+0x3d8],0x10
    65009116:	jb     0x65009124
    65009118:	mov    rcx,QWORD PTR [rbp+0x3c0]
    6500911f:	call   0x6501d300
    65009124:	lea    r8,[rip+0x2f0ed]        # 0x65038218
    6500912b:	mov    edx,0x4
    65009130:	lea    rcx,[rip+0x2f119]        # 0x65038250
    65009137:	call   0x6500bcb0
    6500913c:	mov    rdx,rax
    6500913f:	mov    QWORD PTR [rbp+0x838],0xf
    6500914a:	mov    QWORD PTR [rbp+0x830],r13
    65009151:	mov    BYTE PTR [rbp+0x820],0x0
    65009158:	xor    eax,eax
    6500915a:	mov    rcx,rbx
    6500915d:	mov    rdi,rdx
    65009160:	repnz scas al,BYTE PTR es:[rdi]
    65009162:	not    rcx
    65009165:	lea    r8,[rcx-0x1]
    65009169:	lea    rcx,[rbp+0x818]
    65009170:	call   0x65002000
    65009175:	nop
    65009176:	lea    r8,[rbp+0x818]
    6500917d:	lea    rdx,[rbp+0xda0]
    65009184:	lea    rcx,[rbp+0x0]
    65009188:	call   0x6500d0d0
    6500918d:	nop
    6500918e:	cmp    QWORD PTR [rbp+0x838],0x10
    65009196:	jb     0x650091a4
    65009198:	mov    rcx,QWORD PTR [rbp+0x820]
    6500919f:	call   0x6501d300
    650091a4:	lea    r8,[rip+0x2f0ad]        # 0x65038258
    650091ab:	mov    edx,0x5
    650091b0:	lea    rcx,[rip+0x2f0c9]        # 0x65038280
    650091b7:	call   0x6500bcb0
    650091bc:	mov    rdx,rax
    650091bf:	mov    QWORD PTR [rbp+0x428],0xf
    650091ca:	mov    QWORD PTR [rbp+0x420],r13
    650091d1:	mov    BYTE PTR [rbp+0x410],0x0
    650091d8:	xor    eax,eax
    650091da:	mov    rcx,rbx
    650091dd:	mov    rdi,rdx
    650091e0:	repnz scas al,BYTE PTR es:[rdi]
    650091e2:	not    rcx
    650091e5:	lea    r8,[rcx-0x1]
    650091e9:	lea    rcx,[rbp+0x408]
    650091f0:	call   0x65002000
    650091f5:	nop
    650091f6:	lea    r8,[rbp+0x408]
    650091fd:	lea    rdx,[rbp+0xbc0]
    65009204:	lea    rcx,[rbp+0x0]
    65009208:	call   0x6500d0d0
    6500920d:	nop
    6500920e:	cmp    QWORD PTR [rbp+0x428],0x10
    65009216:	jb     0x65009224
    65009218:	mov    rcx,QWORD PTR [rbp+0x410]
    6500921f:	call   0x6501d300
    65009224:	lea    r8,[rip+0x2f05d]        # 0x65038288
    6500922b:	mov    edx,0x5
    65009230:	lea    rcx,[rip+0x2f085]        # 0x650382bc
    65009237:	call   0x6500bcb0
    6500923c:	mov    rdx,rax
    6500923f:	mov    QWORD PTR [rbp+0x6f8],0xf
    6500924a:	mov    QWORD PTR [rbp+0x6f0],r13
    65009251:	mov    BYTE PTR [rbp+0x6e0],0x0
    65009258:	xor    eax,eax
    6500925a:	mov    rcx,rbx
    6500925d:	mov    rdi,rdx
    65009260:	repnz scas al,BYTE PTR es:[rdi]
    65009262:	not    rcx
    65009265:	lea    r8,[rcx-0x1]
    65009269:	lea    rcx,[rbp+0x6d8]
    65009270:	call   0x65002000
    65009275:	nop
    65009276:	lea    r8,[rbp+0x6d8]
    6500927d:	lea    rdx,[rbp+0xf20]
    65009284:	lea    rcx,[rbp+0x0]
    65009288:	call   0x6500d0d0
    6500928d:	nop
    6500928e:	cmp    QWORD PTR [rbp+0x6f8],0x10
    65009296:	jb     0x650092a4
    65009298:	mov    rcx,QWORD PTR [rbp+0x6e0]
    6500929f:	call   0x6501d300
    650092a4:	lea    r8,[rip+0x2f01d]        # 0x650382c8
    650092ab:	mov    edx,0x4
    650092b0:	lea    rcx,[rip+0x2f041]        # 0x650382f8
    650092b7:	call   0x6500bcb0
    650092bc:	mov    rdx,rax
    650092bf:	mov    QWORD PTR [rbp+0x478],0xf
    650092ca:	mov    QWORD PTR [rbp+0x470],r13
    650092d1:	mov    BYTE PTR [rbp+0x460],0x0
    650092d8:	xor    eax,eax
    650092da:	mov    rcx,rbx
    650092dd:	mov    rdi,rdx
    650092e0:	repnz scas al,BYTE PTR es:[rdi]
    650092e2:	not    rcx
    650092e5:	lea    r8,[rcx-0x1]
    650092e9:	lea    rcx,[rbp+0x458]
    650092f0:	call   0x65002000
    650092f5:	nop
    650092f6:	lea    r8,[rbp+0x458]
    650092fd:	lea    rdx,[rbp+0xbf0]
    65009304:	lea    rcx,[rbp+0x0]
    65009308:	call   0x6500d0d0
    6500930d:	nop
    6500930e:	cmp    QWORD PTR [rbp+0x478],0x10
    65009316:	jb     0x65009324
    65009318:	mov    rcx,QWORD PTR [rbp+0x460]
    6500931f:	call   0x6501d300
    65009324:	lea    r8,[rip+0x2efd5]        # 0x65038300
    6500932b:	mov    edx,0x8
    65009330:	lea    rcx,[rip+0x2f009]        # 0x65038340
    65009337:	call   0x6500bcb0
    6500933c:	mov    rdx,rax
    6500933f:	mov    QWORD PTR [rbp+0x180],0xf
    6500934a:	mov    QWORD PTR [rbp+0x178],r13
    65009351:	mov    BYTE PTR [rbp+0x168],0x0
    65009358:	xor    eax,eax
    6500935a:	mov    rcx,rbx
    6500935d:	mov    rdi,rdx
    65009360:	repnz scas al,BYTE PTR es:[rdi]
    65009362:	not    rcx
    65009365:	lea    r8,[rcx-0x1]
    65009369:	lea    rcx,[rbp+0x160]
    65009370:	call   0x65002000
    65009375:	nop
    65009376:	lea    r8,[rbp+0x160]
    6500937d:	lea    rdx,[rbp+0xdd0]
    65009384:	lea    rcx,[rbp+0x0]
    65009388:	call   0x6500d0d0
    6500938d:	nop
    6500938e:	cmp    QWORD PTR [rbp+0x180],0x10
    65009396:	jb     0x650093a4
    65009398:	mov    rcx,QWORD PTR [rbp+0x168]
    6500939f:	call   0x6501d300
    650093a4:	lea    r8,[rip+0x2efa5]        # 0x65038350
    650093ab:	mov    edx,0x6
    650093b0:	lea    rcx,[rip+0x2efd9]        # 0x65038390
    650093b7:	call   0x6500bcb0
    650093bc:	mov    rdx,rax
    650093bf:	mov    QWORD PTR [rbp+0x4c8],0xf
    650093ca:	mov    QWORD PTR [rbp+0x4c0],r13
    650093d1:	mov    BYTE PTR [rbp+0x4b0],0x0
    650093d8:	xor    eax,eax
    650093da:	mov    rcx,rbx
    650093dd:	mov    rdi,rdx
    650093e0:	repnz scas al,BYTE PTR es:[rdi]
    650093e2:	not    rcx
    650093e5:	lea    r8,[rcx-0x1]
    650093e9:	lea    rcx,[rbp+0x4a8]
    650093f0:	call   0x65002000
    650093f5:	nop
    650093f6:	lea    r8,[rbp+0x4a8]
    650093fd:	lea    rdx,[rbp+0xc20]
    65009404:	lea    rcx,[rbp+0x0]
    65009408:	call   0x6500d0d0
    6500940d:	nop
    6500940e:	cmp    QWORD PTR [rbp+0x4c8],0x10
    65009416:	jb     0x65009424
    65009418:	mov    rcx,QWORD PTR [rbp+0x4b0]
    6500941f:	call   0x6501d300
    65009424:	lea    r8,[rip+0x2ef6d]        # 0x65038398
    6500942b:	mov    edx,0x8
    65009430:	lea    rcx,[rip+0x2ef99]        # 0x650383d0
    65009437:	call   0x6500bcb0
    6500943c:	mov    rdx,rax
    6500943f:	mov    QWORD PTR [rbp+0x748],0xf
    6500944a:	mov    QWORD PTR [rbp+0x740],r13
    65009451:	mov    BYTE PTR [rbp+0x730],0x0
    65009458:	xor    eax,eax
    6500945a:	mov    rcx,rbx
    6500945d:	mov    rdi,rdx
    65009460:	repnz scas al,BYTE PTR es:[rdi]
    65009462:	not    rcx
    65009465:	lea    r8,[rcx-0x1]
    65009469:	lea    rcx,[rbp+0x728]
    65009470:	call   0x65002000
    65009475:	nop
    65009476:	lea    r8,[rbp+0x728]
    6500947d:	lea    rdx,[rbp+0xec0]
    65009484:	lea    rcx,[rbp+0x0]
    65009488:	call   0x6500d0d0
    6500948d:	nop
    6500948e:	cmp    QWORD PTR [rbp+0x748],0x10
    65009496:	jb     0x650094a4
    65009498:	mov    rcx,QWORD PTR [rbp+0x730]
    6500949f:	call   0x6501d300
    650094a4:	lea    r8,[rip+0x2ef35]        # 0x650383e0
    650094ab:	mov    edx,0x6
    650094b0:	lea    rcx,[rip+0x2ef59]        # 0x65038410
    650094b7:	call   0x6500bcb0
    650094bc:	mov    rdx,rax
    650094bf:	mov    QWORD PTR [rbp+0x518],0xf
    650094ca:	mov    QWORD PTR [rbp+0x510],r13
    650094d1:	mov    BYTE PTR [rbp+0x500],0x0
    650094d8:	xor    eax,eax
    650094da:	mov    rcx,rbx
    650094dd:	mov    rdi,rdx
    650094e0:	repnz scas al,BYTE PTR es:[rdi]
    650094e2:	not    rcx
    650094e5:	lea    r8,[rcx-0x1]
    650094e9:	lea    rcx,[rbp+0x4f8]
    650094f0:	call   0x65002000
    650094f5:	nop
    650094f6:	lea    r8,[rbp+0x4f8]
    650094fd:	lea    rdx,[rbp+0xc50]
    65009504:	lea    rcx,[rbp+0x0]
    65009508:	call   0x6500d0d0
    6500950d:	nop
    6500950e:	cmp    QWORD PTR [rbp+0x518],0x10
    65009516:	jb     0x65009524
    65009518:	mov    rcx,QWORD PTR [rbp+0x500]
    6500951f:	call   0x6501d300
    65009524:	lea    r8,[rip+0x2eeed]        # 0x65038418
    6500952b:	mov    edx,0x7
    65009530:	lea    rcx,[rip+0x2ef21]        # 0x65038458
    65009537:	call   0x6500bcb0
    6500953c:	mov    rdx,rax
    6500953f:	mov    QWORD PTR [rbp+0x888],0xf
    6500954a:	mov    QWORD PTR [rbp+0x880],r13
    65009551:	mov    BYTE PTR [rbp+0x870],0x0
    65009558:	xor    eax,eax
    6500955a:	mov    rcx,rbx
    6500955d:	mov    rdi,rdx
    65009560:	repnz scas al,BYTE PTR es:[rdi]
    65009562:	not    rcx
    65009565:	lea    r8,[rcx-0x1]
    65009569:	lea    rcx,[rbp+0x868]
    65009570:	call   0x65002000
    65009575:	nop
    65009576:	lea    r8,[rbp+0x868]
    6500957d:	lea    rdx,[rbp+0xe00]
    65009584:	lea    rcx,[rbp+0x0]
    65009588:	call   0x6500d0d0
    6500958d:	nop
    6500958e:	cmp    QWORD PTR [rbp+0x888],0x10
    65009596:	jb     0x650095a4
    65009598:	mov    rcx,QWORD PTR [rbp+0x870]
    6500959f:	call   0x6501d300
    650095a4:	lea    r8,[rip+0x2eeb5]        # 0x65038460
    650095ab:	mov    edx,0x5
    650095b0:	lea    rcx,[rip+0x2eed9]        # 0x65038490
    650095b7:	call   0x6500bcb0
    650095bc:	mov    rdx,rax
    650095bf:	mov    QWORD PTR [rbp+0x568],0xf
    650095ca:	mov    QWORD PTR [rbp+0x560],r13
    650095d1:	mov    BYTE PTR [rbp+0x550],0x0
    650095d8:	xor    eax,eax
    650095da:	mov    rcx,rbx
    650095dd:	mov    rdi,rdx
    650095e0:	repnz scas al,BYTE PTR es:[rdi]
    650095e2:	not    rcx
    650095e5:	lea    r8,[rcx-0x1]
    650095e9:	lea    rcx,[rbp+0x548]
    650095f0:	call   0x65002000
    650095f5:	nop
    650095f6:	lea    r8,[rbp+0x548]
    650095fd:	lea    rdx,[rbp+0xc80]
    65009604:	lea    rcx,[rbp+0x0]
    65009608:	call   0x6500d0d0
    6500960d:	nop
    6500960e:	cmp    QWORD PTR [rbp+0x568],0x10
    65009616:	jb     0x65009624
    65009618:	mov    rcx,QWORD PTR [rbp+0x550]
    6500961f:	call   0x6501d300
    65009624:	lea    r8,[rip+0x2ee6d]        # 0x65038498
    6500962b:	mov    edx,0x5
    65009630:	lea    rcx,[rip+0x2ee8d]        # 0x650384c4
    65009637:	call   0x6500bcb0
    6500963c:	mov    rdx,rax
    6500963f:	mov    QWORD PTR [rbp+0x1a8],0xf
    6500964a:	mov    QWORD PTR [rbp+0x1a0],r13
    65009651:	mov    BYTE PTR [rbp+0x190],0x0
    65009658:	xor    eax,eax
    6500965a:	mov    rcx,rbx
    6500965d:	mov    rdi,rdx
    65009660:	repnz scas al,BYTE PTR es:[rdi]
    65009662:	not    rcx
    65009665:	lea    r8,[rcx-0x1]
    65009669:	lea    rcx,[rbp+0x188]
    65009670:	call   0x65002000
    65009675:	nop
    65009676:	lea    r8,[rbp+0x188]
    6500967d:	lea    rdx,[rbp+0xf80]
    65009684:	lea    rcx,[rbp+0x0]
    65009688:	call   0x6500d0d0
    6500968d:	nop
    6500968e:	cmp    QWORD PTR [rbp+0x1a8],0x10
    65009696:	jb     0x650096a4
    65009698:	mov    rcx,QWORD PTR [rbp+0x190]
    6500969f:	call   0x6501d300
    650096a4:	lea    r8,[rip+0x2ee25]        # 0x650384d0
    650096ab:	mov    edx,0x7
    650096b0:	lea    rcx,[rip+0x2ee49]        # 0x65038500
    650096b7:	call   0x6500bcb0
    650096bc:	mov    rdx,rax
    650096bf:	mov    QWORD PTR [rbp+0x798],0xf
    650096ca:	mov    QWORD PTR [rbp+0x790],r13
    650096d1:	mov    BYTE PTR [rbp+0x780],0x0
    650096d8:	xor    eax,eax
    650096da:	mov    rcx,rbx
    650096dd:	mov    rdi,rdx
    650096e0:	repnz scas al,BYTE PTR es:[rdi]
    650096e2:	not    rcx
    650096e5:	lea    r8,[rcx-0x1]
    650096e9:	lea    rcx,[rbp+0x778]
    650096f0:	call   0x65002000
    650096f5:	nop
    650096f6:	lea    r8,[rbp+0x778]
    650096fd:	lea    rdx,[rbp+0xcb0]
    65009704:	lea    rcx,[rbp+0x0]
    65009708:	call   0x6500d0d0
    6500970d:	nop
    6500970e:	cmp    QWORD PTR [rbp+0x798],0x10
    65009716:	jb     0x65009724
    65009718:	mov    rcx,QWORD PTR [rbp+0x780]
    6500971f:	call   0x6501d300
    65009724:	lea    r8,[rip+0x2eddd]        # 0x65038508
    6500972b:	mov    edx,0x6
    65009730:	lea    rcx,[rip+0x2ee09]        # 0x65038540
    65009737:	call   0x6500bcb0
    6500973c:	mov    rdx,rax
    6500973f:	mov    QWORD PTR [rbp+0x5b8],0xf
    6500974a:	mov    QWORD PTR [rbp+0x5b0],r13
    65009751:	mov    BYTE PTR [rbp+0x5a0],0x0
    65009758:	xor    eax,eax
    6500975a:	mov    rcx,rbx
    6500975d:	mov    rdi,rdx
    65009760:	repnz scas al,BYTE PTR es:[rdi]
    65009762:	not    rcx
    65009765:	lea    r8,[rcx-0x1]
    65009769:	lea    rcx,[rbp+0x598]
    65009770:	call   0x65002000
    65009775:	nop
    65009776:	lea    r8,[rbp+0x598]
    6500977d:	lea    rdx,[rbp+0xe30]
    65009784:	lea    rcx,[rbp+0x0]
    65009788:	call   0x6500d0d0
    6500978d:	nop
    6500978e:	cmp    QWORD PTR [rbp+0x5b8],0x10
    65009796:	jb     0x650097a4
    65009798:	mov    rcx,QWORD PTR [rbp+0x5a0]
    6500979f:	call   0x6501d300
    650097a4:	lea    r8,[rip+0x2ed9d]        # 0x65038548
    650097ab:	mov    edx,0xe
    650097b0:	lea    rcx,[rip+0x2edc1]        # 0x65038578
    650097b7:	call   0x6500bcb0
    650097bc:	mov    rdx,rax
    650097bf:	mov    QWORD PTR [rbp+0x1d0],0xf
    650097ca:	mov    QWORD PTR [rbp+0x1c8],r13
    650097d1:	mov    BYTE PTR [rbp+0x1b8],0x0
    650097d8:	xor    eax,eax
    650097da:	mov    rcx,rbx
    650097dd:	mov    rdi,rdx
    650097e0:	repnz scas al,BYTE PTR es:[rdi]
    650097e2:	not    rcx
    650097e5:	lea    r8,[rcx-0x1]
    650097e9:	lea    rcx,[rbp+0x1b0]
    650097f0:	call   0x65002000
    650097f5:	nop
    650097f6:	lea    r8,[rbp+0x1b0]
    650097fd:	lea    rdx,[rbp+0xce0]
    65009804:	lea    rcx,[rbp+0x0]
    65009808:	call   0x6500d0d0
    6500980d:	nop
    6500980e:	cmp    QWORD PTR [rbp+0x1d0],0x10
    65009816:	jb     0x65009824
    65009818:	mov    rcx,QWORD PTR [rbp+0x1b8]
    6500981f:	call   0x6501d300
    65009824:	lea    r8,[rip+0x2ed5d]        # 0x65038588
    6500982b:	mov    edx,0x12
    65009830:	lea    rcx,[rip+0x2ed81]        # 0x650385b8
    65009837:	call   0x6500bcb0
    6500983c:	mov    rdx,rax
    6500983f:	mov    QWORD PTR [rbp+0x220],0xf
    6500984a:	mov    QWORD PTR [rbp+0x218],r13
    65009851:	mov    BYTE PTR [rbp+0x208],0x0
    65009858:	xor    eax,eax
    6500985a:	mov    rcx,rbx
    6500985d:	mov    rdi,rdx
    65009860:	repnz scas al,BYTE PTR es:[rdi]
    65009862:	not    rcx
    65009865:	lea    r8,[rcx-0x1]
    65009869:	lea    rcx,[rbp+0x200]
    65009870:	call   0x65002000
    65009875:	nop
    65009876:	lea    r8,[rbp+0x200]
    6500987d:	lea    rdx,[rbp+0xa28]
    65009884:	lea    rcx,[rbp+0x0]
    65009888:	call   0x6500d0d0
    6500988d:	nop
    6500988e:	cmp    QWORD PTR [rbp+0x220],0x10
    65009896:	jb     0x650098a4
    65009898:	mov    rcx,QWORD PTR [rbp+0x208]
    6500989f:	call   0x6501d300
    650098a4:	lea    r8,[rip+0x2ed25]        # 0x650385d0
    650098ab:	mov    edx,0x17
    650098b0:	lea    rcx,[rip+0x2ed51]        # 0x65038608
    650098b7:	call   0x6500bcb0
    650098bc:	mov    rdx,rax
    650098bf:	mov    QWORD PTR [rbp+0x270],0xf
    650098ca:	mov    QWORD PTR [rbp+0x268],r13
    650098d1:	mov    BYTE PTR [rbp+0x258],0x0
    650098d8:	xor    eax,eax
    650098da:	mov    rcx,rbx
    650098dd:	mov    rdi,rdx
    650098e0:	repnz scas al,BYTE PTR es:[rdi]
    650098e2:	not    rcx
    650098e5:	lea    r8,[rcx-0x1]
    650098e9:	lea    rcx,[rbp+0x250]
    650098f0:	call   0x65002000
    650098f5:	nop
    650098f6:	lea    r8,[rbp+0x250]
    650098fd:	lea    rdx,[rbp+0xa58]
    65009904:	lea    rcx,[rbp+0x0]
    65009908:	call   0x6500d0d0
    6500990d:	nop
    6500990e:	cmp    QWORD PTR [rbp+0x270],0x10
    65009916:	jb     0x65009924
    65009918:	mov    rcx,QWORD PTR [rbp+0x258]
    6500991f:	call   0x6501d300
    65009924:	lea    r8,[rip+0x2ecf5]        # 0x65038620
    6500992b:	mov    edx,0x11
    65009930:	lea    rcx,[rip+0x2ed29]        # 0x65038660
    65009937:	call   0x6500bcb0
    6500993c:	mov    rdx,rax
    6500993f:	mov    QWORD PTR [rbp+0x2c0],0xf
    6500994a:	mov    QWORD PTR [rbp+0x2b8],r13
    65009951:	mov    BYTE PTR [rbp+0x2a8],0x0
    65009958:	xor    eax,eax
    6500995a:	mov    rcx,rbx
    6500995d:	mov    rdi,rdx
    65009960:	repnz scas al,BYTE PTR es:[rdi]
    65009962:	not    rcx
    65009965:	lea    r8,[rcx-0x1]
    65009969:	lea    rcx,[rbp+0x2a0]
    65009970:	call   0x65002000
    65009975:	nop
    65009976:	lea    r8,[rbp+0x2a0]
    6500997d:	lea    rdx,[rbp+0xa88]
    65009984:	lea    rcx,[rbp+0x0]
    65009988:	call   0x6500d0d0
    6500998d:	nop
    6500998e:	cmp    QWORD PTR [rbp+0x2c0],0x10
    65009996:	jb     0x650099a4
    65009998:	mov    rcx,QWORD PTR [rbp+0x2a8]
    6500999f:	call   0x6501d300
    650099a4:	lea    r8,[rip+0x2eccd]        # 0x65038678
    650099ab:	mov    edx,0x8
    650099b0:	lea    rcx,[rip+0x2ed01]        # 0x650386b8
    650099b7:	call   0x6500bcb0
    650099bc:	mov    rdx,rax
    650099bf:	mov    QWORD PTR [rbp+0x310],0xf
    650099ca:	mov    QWORD PTR [rbp+0x308],r13
    650099d1:	mov    BYTE PTR [rbp+0x2f8],0x0
    650099d8:	xor    eax,eax
    650099da:	mov    rcx,rbx
    650099dd:	mov    rdi,rdx
    650099e0:	repnz scas al,BYTE PTR es:[rdi]
    650099e2:	not    rcx
    650099e5:	lea    r8,[rcx-0x1]
    650099e9:	lea    rcx,[rbp+0x2f0]
    650099f0:	call   0x65002000
    650099f5:	nop
    650099f6:	lea    r8,[rbp+0x2f0]
    650099fd:	lea    rdx,[rbp+0xab8]
    65009a04:	lea    rcx,[rbp+0x0]
    65009a08:	call   0x6500d0d0
    65009a0d:	nop
    65009a0e:	cmp    QWORD PTR [rbp+0x310],0x10
    65009a16:	jb     0x65009a24
    65009a18:	mov    rcx,QWORD PTR [rbp+0x2f8]
    65009a1f:	call   0x6501d300
    65009a24:	lea    r8,[rip+0x2ec9d]        # 0x650386c8
    65009a2b:	mov    edx,0x6
    65009a30:	lea    rcx,[rip+0x2ecd1]        # 0x65038708
    65009a37:	call   0x6500bcb0
    65009a3c:	mov    rdx,rax
    65009a3f:	mov    QWORD PTR [rbp+0x360],0xf
    65009a4a:	mov    QWORD PTR [rbp+0x358],r13
    65009a51:	mov    BYTE PTR [rbp+0x348],0x0
    65009a58:	xor    eax,eax
    65009a5a:	mov    rcx,rbx
    65009a5d:	mov    rdi,rdx
    65009a60:	repnz scas al,BYTE PTR es:[rdi]
    65009a62:	not    rcx
    65009a65:	lea    r8,[rcx-0x1]
    65009a69:	lea    rcx,[rbp+0x340]
    65009a70:	call   0x65002000
    65009a75:	nop
    65009a76:	lea    r8,[rbp+0x340]
    65009a7d:	lea    rdx,[rbp+0xae8]
    65009a84:	lea    rcx,[rbp+0x0]
    65009a88:	call   0x6500d0d0
    65009a8d:	nop
    65009a8e:	cmp    QWORD PTR [rbp+0x360],0x10
    65009a96:	jb     0x65009aa4
    65009a98:	mov    rcx,QWORD PTR [rbp+0x348]
    65009a9f:	call   0x6501d300
    65009aa4:	lea    r8,[rip+0x2ec65]        # 0x65038710
    65009aab:	mov    edx,0x6
    65009ab0:	lea    rcx,[rip+0x2ec85]        # 0x6503873c
    65009ab7:	call   0x6500bcb0
    65009abc:	mov    rdx,rax
    65009abf:	mov    QWORD PTR [rbp+0x3b0],0xf
    65009aca:	mov    QWORD PTR [rbp+0x3a8],r13
    65009ad1:	mov    BYTE PTR [rbp+0x398],0x0
    65009ad8:	xor    eax,eax
    65009ada:	mov    rcx,rbx
    65009add:	mov    rdi,rdx
    65009ae0:	repnz scas al,BYTE PTR es:[rdi]
    65009ae2:	not    rcx
    65009ae5:	lea    r8,[rcx-0x1]
    65009ae9:	lea    rcx,[rbp+0x390]
    65009af0:	call   0x65002000
    65009af5:	nop
    65009af6:	lea    r8,[rbp+0x390]
    65009afd:	lea    rdx,[rbp+0xb18]
    65009b04:	lea    rcx,[rbp+0x0]
    65009b08:	call   0x6500d0d0
    65009b0d:	nop
    65009b0e:	cmp    QWORD PTR [rbp+0x3b0],0x10
    65009b16:	jb     0x65009b24
    65009b18:	mov    rcx,QWORD PTR [rbp+0x398]
    65009b1f:	call   0x6501d300
    65009b24:	lea    r8,[rip+0x2ec1d]        # 0x65038748
    65009b2b:	mov    edx,0x8
    65009b30:	lea    rcx,[rip+0x2ec39]        # 0x65038770
    65009b37:	call   0x6500bcb0
    65009b3c:	mov    rdx,rax
    65009b3f:	mov    QWORD PTR [rbp+0x400],0xf
    65009b4a:	mov    QWORD PTR [rbp+0x3f8],r13
    65009b51:	mov    BYTE PTR [rbp+0x3e8],0x0
    65009b58:	xor    eax,eax
    65009b5a:	mov    rcx,rbx
    65009b5d:	mov    rdi,rdx
    65009b60:	repnz scas al,BYTE PTR es:[rdi]
    65009b62:	not    rcx
    65009b65:	lea    r8,[rcx-0x1]
    65009b69:	lea    rcx,[rbp+0x3e0]
    65009b70:	call   0x65002000
    65009b75:	nop
    65009b76:	lea    r8,[rbp+0x3e0]
    65009b7d:	lea    rdx,[rbp+0xb48]
    65009b84:	lea    rcx,[rbp+0x0]
    65009b88:	call   0x6500d0d0
    65009b8d:	nop
    65009b8e:	cmp    QWORD PTR [rbp+0x400],0x10
    65009b96:	jb     0x65009ba4
    65009b98:	mov    rcx,QWORD PTR [rbp+0x3e8]
    65009b9f:	call   0x6501d300
    65009ba4:	lea    r8,[rip+0x2ebd5]        # 0x65038780
    65009bab:	mov    edx,0x6
    65009bb0:	lea    rcx,[rip+0x2ebf5]        # 0x650387ac
    65009bb7:	call   0x6500bcb0
    65009bbc:	mov    rdx,rax
    65009bbf:	mov    QWORD PTR [rbp+0x450],0xf
    65009bca:	mov    QWORD PTR [rbp+0x448],r13
    65009bd1:	mov    BYTE PTR [rbp+0x438],0x0
    65009bd8:	xor    eax,eax
    65009bda:	mov    rcx,rbx
    65009bdd:	mov    rdi,rdx
    65009be0:	repnz scas al,BYTE PTR es:[rdi]
    65009be2:	not    rcx
    65009be5:	lea    r8,[rcx-0x1]
    65009be9:	lea    rcx,[rbp+0x430]
    65009bf0:	call   0x65002000
    65009bf5:	nop
    65009bf6:	lea    r8,[rbp+0x430]
    65009bfd:	lea    rdx,[rbp+0xb78]
    65009c04:	lea    rcx,[rbp+0x0]
    65009c08:	call   0x6500d0d0
    65009c0d:	nop
    65009c0e:	cmp    QWORD PTR [rbp+0x450],0x10
    65009c16:	jb     0x65009c24
    65009c18:	mov    rcx,QWORD PTR [rbp+0x438]
    65009c1f:	call   0x6501d300
    65009c24:	lea    r8,[rip+0x2eb8d]        # 0x650387b8
    65009c2b:	mov    edx,0x7
    65009c30:	lea    rcx,[rip+0x2eba9]        # 0x650387e0
    65009c37:	call   0x6500bcb0
    65009c3c:	mov    rdx,rax
    65009c3f:	mov    QWORD PTR [rbp+0x4a0],0xf
    65009c4a:	mov    QWORD PTR [rbp+0x498],r13
    65009c51:	mov    BYTE PTR [rbp+0x488],0x0
    65009c58:	xor    eax,eax
    65009c5a:	mov    rcx,rbx
    65009c5d:	mov    rdi,rdx
    65009c60:	repnz scas al,BYTE PTR es:[rdi]
    65009c62:	not    rcx
    65009c65:	lea    r8,[rcx-0x1]
    65009c69:	lea    rcx,[rbp+0x480]
    65009c70:	call   0x65002000
    65009c75:	nop
    65009c76:	lea    r8,[rbp+0x480]
    65009c7d:	lea    rdx,[rbp+0xba8]
    65009c84:	lea    rcx,[rbp+0x0]
    65009c88:	call   0x6500d0d0
    65009c8d:	nop
    65009c8e:	cmp    QWORD PTR [rbp+0x4a0],0x10
    65009c96:	jb     0x65009ca4
    65009c98:	mov    rcx,QWORD PTR [rbp+0x488]
    65009c9f:	call   0x6501d300
    65009ca4:	lea    r8,[rip+0x2eb3d]        # 0x650387e8
    65009cab:	mov    edx,0x6
    65009cb0:	lea    rcx,[rip+0x2eb65]        # 0x6503881c
    65009cb7:	call   0x6500bcb0
    65009cbc:	mov    rdx,rax
    65009cbf:	mov    QWORD PTR [rbp+0x4f0],0xf
    65009cca:	mov    QWORD PTR [rbp+0x4e8],r13
    65009cd1:	mov    BYTE PTR [rbp+0x4d8],0x0
    65009cd8:	xor    eax,eax
    65009cda:	mov    rcx,rbx
    65009cdd:	mov    rdi,rdx
    65009ce0:	repnz scas al,BYTE PTR es:[rdi]
    65009ce2:	not    rcx
    65009ce5:	lea    r8,[rcx-0x1]
    65009ce9:	lea    rcx,[rbp+0x4d0]
    65009cf0:	call   0x65002000
    65009cf5:	nop
    65009cf6:	lea    r8,[rbp+0x4d0]
    65009cfd:	lea    rdx,[rbp+0xbd8]
    65009d04:	lea    rcx,[rbp+0x0]
    65009d08:	call   0x6500d0d0
    65009d0d:	nop
    65009d0e:	cmp    QWORD PTR [rbp+0x4f0],0x10
    65009d16:	jb     0x65009d24
    65009d18:	mov    rcx,QWORD PTR [rbp+0x4d8]
    65009d1f:	call   0x6501d300
    65009d24:	lea    r8,[rip+0x2eafd]        # 0x65038828
    65009d2b:	mov    edx,0x6
    65009d30:	lea    rcx,[rip+0x2eb2d]        # 0x65038864
    65009d37:	call   0x6500bcb0
    65009d3c:	mov    rdx,rax
    65009d3f:	mov    QWORD PTR [rbp+0x540],0xf
    65009d4a:	mov    QWORD PTR [rbp+0x538],r13
    65009d51:	mov    BYTE PTR [rbp+0x528],0x0
    65009d58:	xor    eax,eax
    65009d5a:	mov    rcx,rbx
    65009d5d:	mov    rdi,rdx
    65009d60:	repnz scas al,BYTE PTR es:[rdi]
    65009d62:	not    rcx
    65009d65:	lea    r8,[rcx-0x1]
    65009d69:	lea    rcx,[rbp+0x520]
    65009d70:	call   0x65002000
    65009d75:	nop
    65009d76:	lea    r8,[rbp+0x520]
    65009d7d:	lea    rdx,[rbp+0xc08]
    65009d84:	lea    rcx,[rbp+0x0]
    65009d88:	call   0x6500d0d0
    65009d8d:	nop
    65009d8e:	cmp    QWORD PTR [rbp+0x540],0x10
    65009d96:	jb     0x65009da4
    65009d98:	mov    rcx,QWORD PTR [rbp+0x528]
    65009d9f:	call   0x6501d300
    65009da4:	lea    r8,[rip+0x2eac5]        # 0x65038870
    65009dab:	mov    edx,0x5
    65009db0:	lea    rcx,[rip+0x2eae5]        # 0x6503889c
    65009db7:	call   0x6500bcb0
    65009dbc:	mov    rdx,rax
    65009dbf:	mov    QWORD PTR [rbp+0x590],0xf
    65009dca:	mov    QWORD PTR [rbp+0x588],r13
    65009dd1:	mov    BYTE PTR [rbp+0x578],0x0
    65009dd8:	xor    eax,eax
    65009dda:	mov    rcx,rbx
    65009ddd:	mov    rdi,rdx
    65009de0:	repnz scas al,BYTE PTR es:[rdi]
    65009de2:	not    rcx
    65009de5:	lea    r8,[rcx-0x1]
    65009de9:	lea    rcx,[rbp+0x570]
    65009df0:	call   0x65002000
    65009df5:	nop
    65009df6:	lea    r8,[rbp+0x570]
    65009dfd:	lea    rdx,[rbp+0xc38]
    65009e04:	lea    rcx,[rbp+0x0]
    65009e08:	call   0x6500d0d0
    65009e0d:	nop
    65009e0e:	cmp    QWORD PTR [rbp+0x590],0x10
    65009e16:	jb     0x65009e24
    65009e18:	mov    rcx,QWORD PTR [rbp+0x578]
    65009e1f:	call   0x6501d300
    65009e24:	lea    r8,[rip+0x2ea7d]        # 0x650388a8
    65009e2b:	mov    edx,0x6
    65009e30:	lea    rcx,[rip+0x2eaa5]        # 0x650388dc
    65009e37:	call   0x6500bcb0
    65009e3c:	mov    rdx,rax
    65009e3f:	mov    QWORD PTR [rbp+0x5e0],0xf
    65009e4a:	mov    QWORD PTR [rbp+0x5d8],r13
    65009e51:	mov    BYTE PTR [rbp+0x5c8],0x0
    65009e58:	xor    eax,eax
    65009e5a:	mov    rcx,rbx
    65009e5d:	mov    rdi,rdx
    65009e60:	repnz scas al,BYTE PTR es:[rdi]
    65009e62:	not    rcx
    65009e65:	lea    r8,[rcx-0x1]
    65009e69:	lea    rcx,[rbp+0x5c0]
    65009e70:	call   0x65002000
    65009e75:	nop
    65009e76:	lea    r8,[rbp+0x5c0]
    65009e7d:	lea    rdx,[rbp+0xc68]
    65009e84:	lea    rcx,[rbp+0x0]
    65009e88:	call   0x6500d0d0
    65009e8d:	nop
    65009e8e:	cmp    QWORD PTR [rbp+0x5e0],0x10
    65009e96:	jb     0x65009ea4
    65009e98:	mov    rcx,QWORD PTR [rbp+0x5c8]
    65009e9f:	call   0x6501d300
    65009ea4:	lea    r8,[rip+0x2ea3d]        # 0x650388e8
    65009eab:	mov    edx,0xa
    65009eb0:	lea    rcx,[rip+0x2ea61]        # 0x65038918
    65009eb7:	call   0x6500bcb0
    65009ebc:	mov    rdx,rax
    65009ebf:	mov    QWORD PTR [rbp+0x630],0xf
    65009eca:	mov    QWORD PTR [rbp+0x628],r13
    65009ed1:	mov    BYTE PTR [rbp+0x618],0x0
    65009ed8:	xor    eax,eax
    65009eda:	mov    rcx,rbx
    65009edd:	mov    rdi,rdx
    65009ee0:	repnz scas al,BYTE PTR es:[rdi]
    65009ee2:	not    rcx
    65009ee5:	lea    r8,[rcx-0x1]
    65009ee9:	lea    rcx,[rbp+0x610]
    65009ef0:	call   0x65002000
    65009ef5:	nop
    65009ef6:	lea    r8,[rbp+0x610]
    65009efd:	lea    rdx,[rbp+0xc98]
    65009f04:	lea    rcx,[rbp+0x0]
    65009f08:	call   0x6500d0d0
    65009f0d:	nop
    65009f0e:	cmp    QWORD PTR [rbp+0x630],0x10
    65009f16:	jb     0x65009f24
    65009f18:	mov    rcx,QWORD PTR [rbp+0x618]
    65009f1f:	call   0x6501d300
    65009f24:	lea    r8,[rip+0x2e9fd]        # 0x65038928
    65009f2b:	mov    edx,0xf
    65009f30:	lea    rcx,[rip+0x2ea21]        # 0x65038958
    65009f37:	call   0x6500bcb0
    65009f3c:	mov    rdx,rax
    65009f3f:	mov    QWORD PTR [rbp+0x680],0xf
    65009f4a:	mov    QWORD PTR [rbp+0x678],r13
    65009f51:	mov    BYTE PTR [rbp+0x668],0x0
    65009f58:	xor    eax,eax
    65009f5a:	mov    rcx,rbx
    65009f5d:	mov    rdi,rdx
    65009f60:	repnz scas al,BYTE PTR es:[rdi]
    65009f62:	not    rcx
    65009f65:	lea    r8,[rcx-0x1]
    65009f69:	lea    rcx,[rbp+0x660]
    65009f70:	call   0x65002000
    65009f75:	nop
    65009f76:	lea    r8,[rbp+0x660]
    65009f7d:	lea    rdx,[rbp+0xcc8]
    65009f84:	lea    rcx,[rbp+0x0]
    65009f88:	call   0x6500d0d0
    65009f8d:	nop
    65009f8e:	cmp    QWORD PTR [rbp+0x680],0x10
    65009f96:	jb     0x65009fa4
    65009f98:	mov    rcx,QWORD PTR [rbp+0x668]
    65009f9f:	call   0x6501d300
    65009fa4:	lea    r8,[rip+0x2e9bd]        # 0x65038968
    65009fab:	mov    edx,0xa
    65009fb0:	lea    rcx,[rip+0x2e9e1]        # 0x65038998
    65009fb7:	call   0x6500bcb0
    65009fbc:	mov    rdx,rax
    65009fbf:	mov    QWORD PTR [rbp+0x6d0],0xf
    65009fca:	mov    QWORD PTR [rbp+0x6c8],r13
    65009fd1:	mov    BYTE PTR [rbp+0x6b8],0x0
    65009fd8:	xor    eax,eax
    65009fda:	mov    rcx,rbx
    65009fdd:	mov    rdi,rdx
    65009fe0:	repnz scas al,BYTE PTR es:[rdi]
    65009fe2:	not    rcx
    65009fe5:	lea    r8,[rcx-0x1]
    65009fe9:	lea    rcx,[rbp+0x6b0]
    65009ff0:	call   0x65002000
    65009ff5:	nop
    65009ff6:	lea    r8,[rbp+0x6b0]
    65009ffd:	lea    rdx,[rbp+0xcf8]
    6500a004:	lea    rcx,[rbp+0x0]
    6500a008:	call   0x6500d0d0
    6500a00d:	nop
    6500a00e:	cmp    QWORD PTR [rbp+0x6d0],0x10
    6500a016:	jb     0x6500a024
    6500a018:	mov    rcx,QWORD PTR [rbp+0x6b8]
    6500a01f:	call   0x6501d300
    6500a024:	lea    r8,[rip+0x2e97d]        # 0x650389a8
    6500a02b:	mov    edx,0xb
    6500a030:	lea    rcx,[rip+0x2e9a9]        # 0x650389e0
    6500a037:	call   0x6500bcb0
    6500a03c:	mov    rdx,rax
    6500a03f:	mov    QWORD PTR [rbp+0x720],0xf
    6500a04a:	mov    QWORD PTR [rbp+0x718],r13
    6500a051:	mov    BYTE PTR [rbp+0x708],0x0
    6500a058:	xor    eax,eax
    6500a05a:	mov    rcx,rbx
    6500a05d:	mov    rdi,rdx
    6500a060:	repnz scas al,BYTE PTR es:[rdi]
    6500a062:	not    rcx
    6500a065:	lea    r8,[rcx-0x1]
    6500a069:	lea    rcx,[rbp+0x700]
    6500a070:	call   0x65002000
    6500a075:	nop
    6500a076:	lea    r8,[rbp+0x700]
    6500a07d:	lea    rdx,[rbp+0xd28]
    6500a084:	lea    rcx,[rbp+0x0]
    6500a088:	call   0x6500d0d0
    6500a08d:	nop
    6500a08e:	cmp    QWORD PTR [rbp+0x720],0x10
    6500a096:	jb     0x6500a0a4
    6500a098:	mov    rcx,QWORD PTR [rbp+0x708]
    6500a09f:	call   0x6501d300
    6500a0a4:	lea    r8,[rip+0x2e945]        # 0x650389f0
    6500a0ab:	mov    edx,0x1e
    6500a0b0:	lea    rcx,[rip+0x2e971]        # 0x65038a28
    6500a0b7:	call   0x6500bcb0
    6500a0bc:	mov    rdx,rax
    6500a0bf:	mov    QWORD PTR [rbp+0x770],0xf
    6500a0ca:	mov    QWORD PTR [rbp+0x768],r13
    6500a0d1:	mov    BYTE PTR [rbp+0x758],0x0
    6500a0d8:	xor    eax,eax
    6500a0da:	mov    rcx,rbx
    6500a0dd:	mov    rdi,rdx
    6500a0e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a0e2:	not    rcx
    6500a0e5:	lea    r8,[rcx-0x1]
    6500a0e9:	lea    rcx,[rbp+0x750]
    6500a0f0:	call   0x65002000
    6500a0f5:	nop
    6500a0f6:	lea    r8,[rbp+0x750]
    6500a0fd:	lea    rdx,[rbp+0xd58]
    6500a104:	lea    rcx,[rbp+0x0]
    6500a108:	call   0x6500d0d0
    6500a10d:	nop
    6500a10e:	cmp    QWORD PTR [rbp+0x770],0x10
    6500a116:	jb     0x6500a124
    6500a118:	mov    rcx,QWORD PTR [rbp+0x758]
    6500a11f:	call   0x6501d300
    6500a124:	lea    r8,[rip+0x2e91d]        # 0x65038a48
    6500a12b:	mov    edx,0x16
    6500a130:	lea    rcx,[rip+0x2e939]        # 0x65038a70
    6500a137:	call   0x6500bcb0
    6500a13c:	mov    rdx,rax
    6500a13f:	mov    QWORD PTR [rbp+0x7c0],0xf
    6500a14a:	mov    QWORD PTR [rbp+0x7b8],r13
    6500a151:	mov    BYTE PTR [rbp+0x7a8],0x0
    6500a158:	xor    eax,eax
    6500a15a:	mov    rcx,rbx
    6500a15d:	mov    rdi,rdx
    6500a160:	repnz scas al,BYTE PTR es:[rdi]
    6500a162:	not    rcx
    6500a165:	lea    r8,[rcx-0x1]
    6500a169:	lea    rcx,[rbp+0x7a0]
    6500a170:	call   0x65002000
    6500a175:	nop
    6500a176:	lea    r8,[rbp+0x7a0]
    6500a17d:	lea    rdx,[rbp+0xd88]
    6500a184:	lea    rcx,[rbp+0x0]
    6500a188:	call   0x6500d0d0
    6500a18d:	nop
    6500a18e:	cmp    QWORD PTR [rbp+0x7c0],0x10
    6500a196:	jb     0x6500a1a4
    6500a198:	mov    rcx,QWORD PTR [rbp+0x7a8]
    6500a19f:	call   0x6501d300
    6500a1a4:	lea    r8,[rip+0x2e8dd]        # 0x65038a88
    6500a1ab:	mov    edx,0x19
    6500a1b0:	lea    rcx,[rip+0x2e8f9]        # 0x65038ab0
    6500a1b7:	call   0x6500bcb0
    6500a1bc:	mov    rdx,rax
    6500a1bf:	mov    QWORD PTR [rbp+0x810],0xf
    6500a1ca:	mov    QWORD PTR [rbp+0x808],r13
    6500a1d1:	mov    BYTE PTR [rbp+0x7f8],0x0
    6500a1d8:	xor    eax,eax
    6500a1da:	mov    rcx,rbx
    6500a1dd:	mov    rdi,rdx
    6500a1e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a1e2:	not    rcx
    6500a1e5:	lea    r8,[rcx-0x1]
    6500a1e9:	lea    rcx,[rbp+0x7f0]
    6500a1f0:	call   0x65002000
    6500a1f5:	nop
    6500a1f6:	lea    r8,[rbp+0x7f0]
    6500a1fd:	lea    rdx,[rbp+0xdb8]
    6500a204:	lea    rcx,[rbp+0x0]
    6500a208:	call   0x6500d0d0
    6500a20d:	nop
    6500a20e:	cmp    QWORD PTR [rbp+0x810],0x10
    6500a216:	jb     0x6500a224
    6500a218:	mov    rcx,QWORD PTR [rbp+0x7f8]
    6500a21f:	call   0x6501d300
    6500a224:	lea    r8,[rip+0x2e8a5]        # 0x65038ad0
    6500a22b:	mov    edx,0x7
    6500a230:	lea    rcx,[rip+0x2e8d1]        # 0x65038b08
    6500a237:	call   0x6500bcb0
    6500a23c:	mov    rdx,rax
    6500a23f:	mov    QWORD PTR [rbp+0x860],0xf
    6500a24a:	mov    QWORD PTR [rbp+0x858],r13
    6500a251:	mov    BYTE PTR [rbp+0x848],0x0
    6500a258:	xor    eax,eax
    6500a25a:	mov    rcx,rbx
    6500a25d:	mov    rdi,rdx
    6500a260:	repnz scas al,BYTE PTR es:[rdi]
    6500a262:	not    rcx
    6500a265:	lea    r8,[rcx-0x1]
    6500a269:	lea    rcx,[rbp+0x840]
    6500a270:	call   0x65002000
    6500a275:	nop
    6500a276:	lea    r8,[rbp+0x840]
    6500a27d:	lea    rdx,[rbp+0xde8]
    6500a284:	lea    rcx,[rbp+0x0]
    6500a288:	call   0x6500d0d0
    6500a28d:	nop
    6500a28e:	cmp    QWORD PTR [rbp+0x860],0x10
    6500a296:	jb     0x6500a2a4
    6500a298:	mov    rcx,QWORD PTR [rbp+0x848]
    6500a29f:	call   0x6501d300
    6500a2a4:	lea    r8,[rip+0x2e865]        # 0x65038b10
    6500a2ab:	mov    edx,0x5
    6500a2b0:	lea    rcx,[rip+0x2e899]        # 0x65038b50
    6500a2b7:	call   0x6500bcb0
    6500a2bc:	mov    rdx,rax
    6500a2bf:	mov    QWORD PTR [rbp+0x8b0],0xf
    6500a2ca:	mov    QWORD PTR [rbp+0x8a8],r13
    6500a2d1:	mov    BYTE PTR [rbp+0x898],0x0
    6500a2d8:	xor    eax,eax
    6500a2da:	mov    rcx,rbx
    6500a2dd:	mov    rdi,rdx
    6500a2e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a2e2:	not    rcx
    6500a2e5:	lea    r8,[rcx-0x1]
    6500a2e9:	lea    rcx,[rbp+0x890]
    6500a2f0:	call   0x65002000
    6500a2f5:	nop
    6500a2f6:	lea    r8,[rbp+0x890]
    6500a2fd:	lea    rdx,[rbp+0xe18]
    6500a304:	lea    rcx,[rbp+0x0]
    6500a308:	call   0x6500d0d0
    6500a30d:	nop
    6500a30e:	cmp    QWORD PTR [rbp+0x8b0],0x10
    6500a316:	jb     0x6500a324
    6500a318:	mov    rcx,QWORD PTR [rbp+0x898]
    6500a31f:	call   0x6501d300
    6500a324:	lea    r8,[rip+0x2e82d]        # 0x65038b58
    6500a32b:	mov    edx,0xb
    6500a330:	lea    rcx,[rip+0x2e851]        # 0x65038b88
    6500a337:	call   0x6500bcb0
    6500a33c:	mov    rdx,rax
    6500a33f:	mov    QWORD PTR [rbp+0x900],0xf
    6500a34a:	mov    QWORD PTR [rbp+0x8f8],r13
    6500a351:	mov    BYTE PTR [rbp+0x8e8],0x0
    6500a358:	xor    eax,eax
    6500a35a:	mov    rcx,rbx
    6500a35d:	mov    rdi,rdx
    6500a360:	repnz scas al,BYTE PTR es:[rdi]
    6500a362:	not    rcx
    6500a365:	lea    r8,[rcx-0x1]
    6500a369:	lea    rcx,[rbp+0x8e0]
    6500a370:	call   0x65002000
    6500a375:	nop
    6500a376:	lea    r8,[rbp+0x8e0]
    6500a37d:	lea    rdx,[rbp+0xa10]
    6500a384:	lea    rcx,[rbp+0x0]
    6500a388:	call   0x6500d0d0
    6500a38d:	nop
    6500a38e:	cmp    QWORD PTR [rbp+0x900],0x10
    6500a396:	jb     0x6500a3a4
    6500a398:	mov    rcx,QWORD PTR [rbp+0x8e8]
    6500a39f:	call   0x6501d300
    6500a3a4:	lea    r8,[rip+0x2e7ed]        # 0x65038b98
    6500a3ab:	mov    edx,0xc
    6500a3b0:	lea    rcx,[rip+0x2e821]        # 0x65038bd8
    6500a3b7:	call   0x6500bcb0
    6500a3bc:	mov    rdx,rax
    6500a3bf:	mov    QWORD PTR [rbp+0x950],0xf
    6500a3ca:	mov    QWORD PTR [rbp+0x948],r13
    6500a3d1:	mov    BYTE PTR [rbp+0x938],0x0
    6500a3d8:	xor    eax,eax
    6500a3da:	mov    rcx,rbx
    6500a3dd:	mov    rdi,rdx
    6500a3e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a3e2:	not    rcx
    6500a3e5:	lea    r8,[rcx-0x1]
    6500a3e9:	lea    rcx,[rbp+0x930]
    6500a3f0:	call   0x65002000
    6500a3f5:	nop
    6500a3f6:	lea    r8,[rbp+0x930]
    6500a3fd:	lea    rdx,[rbp+0xe78]
    6500a404:	lea    rcx,[rbp+0x0]
    6500a408:	call   0x6500d0d0
    6500a40d:	nop
    6500a40e:	cmp    QWORD PTR [rbp+0x950],0x10
    6500a416:	jb     0x6500a424
    6500a418:	mov    rcx,QWORD PTR [rbp+0x938]
    6500a41f:	call   0x6501d300
    6500a424:	lea    r8,[rip+0x2e7bd]        # 0x65038be8
    6500a42b:	mov    edx,0x8
    6500a430:	lea    rcx,[rip+0x2e7f1]        # 0x65038c28
    6500a437:	call   0x6500bcb0
    6500a43c:	mov    rdx,rax
    6500a43f:	mov    QWORD PTR [rbp+0x9a0],0xf
    6500a44a:	mov    QWORD PTR [rbp+0x998],r13
    6500a451:	mov    BYTE PTR [rbp+0x988],0x0
    6500a458:	xor    eax,eax
    6500a45a:	mov    rcx,rbx
    6500a45d:	mov    rdi,rdx
    6500a460:	repnz scas al,BYTE PTR es:[rdi]
    6500a462:	not    rcx
    6500a465:	lea    r8,[rcx-0x1]
    6500a469:	lea    rcx,[rbp+0x980]
    6500a470:	call   0x65002000
    6500a475:	nop
    6500a476:	lea    r8,[rbp+0x980]
    6500a47d:	lea    rdx,[rbp+0xea8]
    6500a484:	lea    rcx,[rbp+0x0]
    6500a488:	call   0x6500d0d0
    6500a48d:	nop
    6500a48e:	cmp    QWORD PTR [rbp+0x9a0],0x10
    6500a496:	jb     0x6500a4a4
    6500a498:	mov    rcx,QWORD PTR [rbp+0x988]
    6500a49f:	call   0x6501d300
    6500a4a4:	lea    r8,[rip+0x2e78d]        # 0x65038c38
    6500a4ab:	mov    edx,0xc
    6500a4b0:	lea    rcx,[rip+0x2e7a9]        # 0x65038c60
    6500a4b7:	call   0x6500bcb0
    6500a4bc:	mov    rdx,rax
    6500a4bf:	mov    QWORD PTR [rbp+0x1f8],0xf
    6500a4ca:	mov    QWORD PTR [rbp+0x1f0],r13
    6500a4d1:	mov    BYTE PTR [rbp+0x1e0],0x0
    6500a4d8:	xor    eax,eax
    6500a4da:	mov    rcx,rbx
    6500a4dd:	mov    rdi,rdx
    6500a4e0:	repnz scas al,BYTE PTR es:[rdi]
    6500a4e2:	not    rcx
    6500a4e5:	lea    r8,[rcx-0x1]
    6500a4e9:	lea    rcx,[rbp+0x1d8]
    6500a4f0:	call   0x65002000
    6500a4f5:	nop
    6500a4f6:	lea    r8,[rbp+0x1d8]
    6500a4fd:	lea    rdx,[rbp+0xed8]
    6500a504:	lea    rcx,[rbp+0x0]
    6500a508:	call   0x6500d0d0
    6500a50d:	nop
    6500a50e:	cmp    QWORD PTR [rbp+0x1f8],0x10
    6500a516:	jb     0x6500a524
    6500a518:	mov    rcx,QWORD PTR [rbp+0x1e0]
    6500a51f:	call   0x6501d300
    6500a524:	lea    r8,[rip+0x2e745]        # 0x65038c70
    6500a52b:	mov    edx,0xa
    6500a530:	lea    rcx,[rip+0x2e769]        # 0x65038ca0
    6500a537:	call   0x6500bcb0
    6500a53c:	mov    rdx,rax
    6500a53f:	mov    QWORD PTR [rbp+0x978],0xf
    6500a54a:	mov    QWORD PTR [rbp+0x970],r13
    6500a551:	mov    BYTE PTR [rbp+0x960],0x0
    6500a558:	xor    eax,eax
    6500a55a:	mov    rcx,rbx
    6500a55d:	mov    rdi,rdx
    6500a560:	repnz scas al,BYTE PTR es:[rdi]
    6500a562:	not    rcx
    6500a565:	lea    r8,[rcx-0x1]
    6500a569:	lea    rcx,[rbp+0x958]
    6500a570:	call   0x65002000
    6500a575:	nop
    6500a576:	lea    r8,[rbp+0x958]
    6500a57d:	lea    rdx,[rbp+0xf08]
    6500a584:	lea    rcx,[rbp+0x0]
    6500a588:	call   0x6500d0d0
    6500a58d:	nop
    6500a58e:	cmp    QWORD PTR [rbp+0x978],0x10
    6500a596:	jb     0x6500a5a4
    6500a598:	mov    rcx,QWORD PTR [rbp+0x960]
    6500a59f:	call   0x6501d300
    6500a5a4:	lea    rdx,[rbp+0x0]
    6500a5a8:	lea    rcx,[rbp+0x120]
    6500a5af:	call   0x65006180
    6500a5b4:	nop
    6500a5b5:	mov    rdx,rax
    6500a5b8:	lea    rcx,[rip+0x3d971]        # 0x65047f30
    6500a5bf:	call   0x6500cfd0
    6500a5c4:	nop
    6500a5c5:	mov    rax,QWORD PTR [rbp+0x128]
    6500a5cc:	mov    QWORD PTR [rbp+0x28],rax
    6500a5d0:	lea    rcx,[rbp+0x120]
    6500a5d7:	mov    QWORD PTR [rbp+0x20],rcx
    6500a5db:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    6500a5df:	movdqa XMMWORD PTR [rbp+0x9c0],xmm0
    6500a5e7:	mov    rax,QWORD PTR [rax]
    6500a5ea:	mov    QWORD PTR [rbp+0x28],rax
    6500a5ee:	lea    rax,[rbp+0x120]
    6500a5f5:	mov    QWORD PTR [rbp+0x20],rax
    6500a5f9:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    6500a5fd:	movdqa XMMWORD PTR [rbp+0x9b0],xmm0
    6500a605:	lea    r9,[rbp+0x9c0]
    6500a60c:	lea    r8,[rbp+0x9b0]
    6500a613:	lea    rdx,[rbp+0x9f0]
    6500a61a:	lea    rcx,[rbp+0x120]
    6500a621:	call   0x6500d7f0
    6500a626:	mov    rcx,QWORD PTR [rbp+0x128]
    6500a62d:	call   0x6501d300
    6500a632:	nop
    6500a633:	mov    rax,QWORD PTR [rbp+0x8]
    6500a637:	mov    QWORD PTR [rbp+0x28],rax
    6500a63b:	lea    rcx,[rbp+0x0]
    6500a63f:	mov    QWORD PTR [rbp+0x20],rcx
    6500a643:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    6500a647:	movdqa XMMWORD PTR [rbp+0x9e0],xmm0
    6500a64f:	mov    rax,QWORD PTR [rax]
    6500a652:	mov    QWORD PTR [rbp+0x28],rax
    6500a656:	lea    rax,[rbp+0x0]
    6500a65a:	mov    QWORD PTR [rbp+0x20],rax
    6500a65e:	movaps xmm0,XMMWORD PTR [rbp+0x20]
    6500a662:	movdqa XMMWORD PTR [rbp+0x20],xmm0
    6500a667:	lea    r9,[rbp+0x9e0]
    6500a66e:	lea    r8,[rbp+0x20]
    6500a672:	lea    rdx,[rbp+0xa00]
    6500a679:	lea    rcx,[rbp+0x0]
    6500a67d:	call   0x6500d7f0
    6500a682:	mov    rcx,QWORD PTR [rbp+0x8]
    6500a686:	call   0x6501d300
    6500a68b:	call   QWORD PTR [rip+0x38a07]        # 0x65043098
    6500a691:	mov    esi,eax
    6500a693:	mov    rcx,QWORD PTR [r12]
    6500a697:	cmp    DWORD PTR [rcx-0x8],0x1
    6500a69b:	jle    0x6500a6a8
    6500a69d:	mov    edx,DWORD PTR [rcx-0x10]
    6500a6a0:	mov    rcx,r12
    6500a6a3:	call   0x65002130
    6500a6a8:	mov    rdi,QWORD PTR [r12]
    6500a6ac:	test   rdi,rdi
    6500a6af:	jne    0x6500a6b6
    6500a6b1:	mov    rax,r13
    6500a6b4:	jmp    0x6500a709
    6500a6b6:	mov    rcx,rdi
    6500a6b9:	call   QWORD PTR [rip+0x299c1]        # 0x65034080
    6500a6bf:	add    eax,0x1
    6500a6c2:	cmp    eax,0x3fffffff
    6500a6c7:	jle    0x6500a6ce
    6500a6c9:	mov    rax,r13
    6500a6cc:	jmp    0x6500a709
    6500a6ce:	lea    r8d,[rax+rax*1]
    6500a6d2:	cdqe   
    6500a6d4:	add    rax,rax
    6500a6d7:	lea    rcx,[rax+0xf]
    6500a6db:	cmp    rcx,rax
    6500a6de:	ja     0x6500a6ea
    6500a6e0:	movabs rcx,0xffffffffffffff0
    6500a6ea:	and    rcx,0xfffffffffffffff0
    6500a6ee:	mov    rax,rcx
    6500a6f1:	call   0x65033230
    6500a6f6:	sub    rsp,rcx
    6500a6f9:	lea    rcx,[rsp+0x20]
    6500a6fe:	mov    r9d,esi
    6500a701:	mov    rdx,rdi
    6500a704:	call   0x650040f0
    6500a709:	lea    rdx,[rbp+0xfa0]
    6500a710:	movzx  ecx,BYTE PTR [rax]
    6500a713:	mov    BYTE PTR [rdx],cl
    6500a715:	add    rax,0x1
    6500a719:	add    rdx,0x1
    6500a71d:	test   cl,cl
    6500a71f:	jne    0x6500a710
    6500a721:	lea    rcx,[rbp+0xfa0]
    6500a728:	call   0x6502ef40
    6500a72d:	mov    QWORD PTR [rbp+0x158],0xf
    6500a738:	mov    QWORD PTR [rbp+0x150],r13
    6500a73f:	mov    BYTE PTR [rbp+0x140],0x0
    6500a746:	xor    eax,eax
    6500a748:	mov    rcx,rbx
    6500a74b:	lea    rdi,[rbp+0xfa0]
    6500a752:	repnz scas al,BYTE PTR es:[rdi]
    6500a754:	not    rcx
    6500a757:	lea    r8,[rcx-0x1]
    6500a75b:	lea    rdx,[rbp+0xfa0]
    6500a762:	lea    rcx,[rbp+0x138]
    6500a769:	call   0x65002000
    6500a76e:	nop
    6500a76f:	lea    rdx,[rbp+0x138]
    6500a776:	lea    rcx,[rip+0x3d7b3]        # 0x65047f30
    6500a77d:	call   0x6500d320
    6500a782:	test   rax,rax
    6500a785:	setne  dil
    6500a789:	cmp    QWORD PTR [rbp+0x158],0x10
    6500a791:	jb     0x6500a79f
    6500a793:	mov    rcx,QWORD PTR [rbp+0x140]
    6500a79a:	call   0x6501d300
    6500a79f:	mov    QWORD PTR [rbp+0x158],0xf
    6500a7aa:	mov    QWORD PTR [rbp+0x150],r13
    6500a7b1:	mov    BYTE PTR [rbp+0x140],0x0
    6500a7b8:	mov    rdx,QWORD PTR [r12]
    6500a7bc:	sub    rdx,0x18
    6500a7c0:	lock xadd DWORD PTR [rdx+0x10],ebx
    6500a7c5:	add    ebx,0xffffffff
    6500a7c8:	test   ebx,ebx
    6500a7ca:	jg     0x6500a7da
    6500a7cc:	mov    rcx,QWORD PTR [rdx]
    6500a7cf:	mov    rax,QWORD PTR [rcx]
    6500a7d2:	call   QWORD PTR [rax+0x8]
    6500a7d5:	mov    al,dil
    6500a7d8:	jmp    0x6500a7dd
    6500a7da:	mov    al,dil
    6500a7dd:	mov    rcx,QWORD PTR [rbp+0x13a0]
    6500a7e4:	xor    rcx,rbp
    6500a7e7:	call   0x6501e650
    6500a7ec:	mov    rbx,QWORD PTR [rbp+0x13d8]
    6500a7f3:	mov    rsi,QWORD PTR [rbp+0x13e0]
    6500a7fa:	mov    rdi,QWORD PTR [rbp+0x13e8]
    6500a801:	lea    rsp,[rbp+0x13b0]
    6500a808:	pop    r13
    6500a80a:	pop    r12
    6500a80c:	pop    rbp
    6500a80d:	ret    
    6500a80e:	int3   
    6500a80f:	int3   
    6500a810:	rex push rbp
    6500a812:	sub    rsp,0x20
    6500a816:	lea    rbp,[rdx+0x20]
    6500a81a:	mov    rcx,QWORD PTR [rbp+0x9d8]
    6500a821:	call   0x65001cb0
    6500a826:	add    rsp,0x20
    6500a82a:	pop    rbp
    6500a82b:	ret    
    6500a82c:	int3   
    6500a82d:	int3   
    6500a82e:	int3   
    6500a82f:	int3   
    6500a830:	rex push rbp
    6500a832:	lea    rbp,[rdx+0x20]
    6500a836:	mov    eax,DWORD PTR [rip+0x3d70c]        # 0x65047f48
    6500a83c:	and    eax,0xfffffffe
    6500a83f:	mov    DWORD PTR [rip+0x3d703],eax        # 0x65047f48
    6500a845:	pop    rbp
    6500a846:	ret    
    6500a847:	int3   
    6500a848:	int3   
    6500a849:	int3   
    6500a84a:	int3   
    6500a84b:	int3   
    6500a84c:	int3   
    6500a84d:	int3   
    6500a84e:	int3   
    6500a84f:	int3   
    6500a850:	rex push rbp
    6500a852:	sub    rsp,0x20
    6500a856:	lea    rbp,[rdx+0x20]
    6500a85a:	lea    rcx,[rbp+0x0]
    6500a85e:	call   0x650064c0
    6500a863:	add    rsp,0x20
    6500a867:	pop    rbp
    6500a868:	ret    
    6500a869:	int3   
    6500a86a:	int3   
    6500a86b:	int3   
    6500a86c:	int3   
    6500a86d:	int3   
    6500a86e:	int3   
    6500a86f:	int3   
    6500a870:	rex push rbp
    6500a872:	sub    rsp,0x20
    6500a876:	lea    rbp,[rdx+0x20]
    6500a87a:	lea    rcx,[rbp+0x30]
    6500a87e:	call   0x65001c70
    6500a883:	add    rsp,0x20
    6500a887:	pop    rbp
    6500a888:	ret    
    6500a889:	int3   
    6500a88a:	int3   
    6500a88b:	int3   
    6500a88c:	int3   
    6500a88d:	int3   
    6500a88e:	int3   
    6500a88f:	int3   
    6500a890:	rex push rbp
    6500a892:	sub    rsp,0x20
    6500a896:	lea    rbp,[rdx+0x20]
    6500a89a:	lea    rcx,[rbp+0x80]
    6500a8a1:	call   0x65001c70
    6500a8a6:	add    rsp,0x20
    6500a8aa:	pop    rbp
    6500a8ab:	ret    
    6500a8ac:	int3   
    6500a8ad:	int3   
    6500a8ae:	int3   
    6500a8af:	int3   
    6500a8b0:	rex push rbp
    6500a8b2:	sub    rsp,0x20
    6500a8b6:	lea    rbp,[rdx+0x20]
    6500a8ba:	lea    rcx,[rbp+0x58]
    6500a8be:	call   0x65001c70
    6500a8c3:	add    rsp,0x20
    6500a8c7:	pop    rbp
    6500a8c8:	ret    
    6500a8c9:	int3   
    6500a8ca:	int3   
    6500a8cb:	int3   
    6500a8cc:	int3   
    6500a8cd:	int3   
    6500a8ce:	int3   
    6500a8cf:	int3   
    6500a8d0:	rex push rbp
    6500a8d2:	sub    rsp,0x20
    6500a8d6:	lea    rbp,[rdx+0x20]
    6500a8da:	lea    rcx,[rbp+0xa8]
    6500a8e1:	call   0x65001c70
    6500a8e6:	add    rsp,0x20
    6500a8ea:	pop    rbp
    6500a8eb:	ret    
    6500a8ec:	int3   
    6500a8ed:	int3   
    6500a8ee:	int3   
    6500a8ef:	int3   
    6500a8f0:	rex push rbp
    6500a8f2:	sub    rsp,0x20
    6500a8f6:	lea    rbp,[rdx+0x20]
    6500a8fa:	lea    rcx,[rbp+0xf8]
    6500a901:	call   0x65001c70
    6500a906:	add    rsp,0x20
    6500a90a:	pop    rbp
    6500a90b:	ret    
    6500a90c:	int3   
    6500a90d:	int3   
    6500a90e:	int3   
    6500a90f:	int3   
    6500a910:	rex push rbp
    6500a912:	sub    rsp,0x20
    6500a916:	lea    rbp,[rdx+0x20]
    6500a91a:	lea    rcx,[rbp+0xd0]
    6500a921:	call   0x65001c70
    6500a926:	add    rsp,0x20
    6500a92a:	pop    rbp
    6500a92b:	ret    
    6500a92c:	int3   
    6500a92d:	int3   
    6500a92e:	int3   
    6500a92f:	int3   
    6500a930:	rex push rbp
    6500a932:	sub    rsp,0x20
    6500a936:	lea    rbp,[rdx+0x20]
    6500a93a:	lea    rcx,[rbp+0x908]
    6500a941:	call   0x65001c70
    6500a946:	add    rsp,0x20
    6500a94a:	pop    rbp
    6500a94b:	ret    
    6500a94c:	int3   
    6500a94d:	int3   
    6500a94e:	int3   
    6500a94f:	int3   
    6500a950:	rex push rbp
    6500a952:	sub    rsp,0x20
    6500a956:	lea    rbp,[rdx+0x20]
    6500a95a:	lea    rcx,[rbp+0x228]
    6500a961:	call   0x65001c70
    6500a966:	add    rsp,0x20
    6500a96a:	pop    rbp
    6500a96b:	ret    
    6500a96c:	int3   
    6500a96d:	int3   
    6500a96e:	int3   
    6500a96f:	int3   
    6500a970:	rex push rbp
    6500a972:	sub    rsp,0x20
    6500a976:	lea    rbp,[rdx+0x20]
    6500a97a:	lea    rcx,[rbp+0x5e8]
    6500a981:	call   0x65001c70
    6500a986:	add    rsp,0x20
    6500a98a:	pop    rbp
    6500a98b:	ret    
    6500a98c:	int3   
    6500a98d:	int3   
    6500a98e:	int3   
    6500a98f:	int3   
    6500a990:	rex push rbp
    6500a992:	sub    rsp,0x20
    6500a996:	lea    rbp,[rdx+0x20]
    6500a99a:	lea    rcx,[rbp+0x278]
    6500a9a1:	call   0x65001c70
    6500a9a6:	add    rsp,0x20
    6500a9aa:	pop    rbp
    6500a9ab:	ret    
    6500a9ac:	int3   
    6500a9ad:	int3   
    6500a9ae:	int3   
    6500a9af:	int3   
    6500a9b0:	rex push rbp
    6500a9b2:	sub    rsp,0x20
    6500a9b6:	lea    rbp,[rdx+0x20]
    6500a9ba:	lea    rcx,[rbp+0x7c8]
    6500a9c1:	call   0x65001c70
    6500a9c6:	add    rsp,0x20
    6500a9ca:	pop    rbp
    6500a9cb:	ret    
    6500a9cc:	int3   
    6500a9cd:	int3   
    6500a9ce:	int3   
    6500a9cf:	int3   
    6500a9d0:	rex push rbp
    6500a9d2:	sub    rsp,0x20
    6500a9d6:	lea    rbp,[rdx+0x20]
    6500a9da:	lea    rcx,[rbp+0x2c8]
    6500a9e1:	call   0x65001c70
    6500a9e6:	add    rsp,0x20
    6500a9ea:	pop    rbp
    6500a9eb:	ret    
    6500a9ec:	int3   
    6500a9ed:	int3   
    6500a9ee:	int3   
    6500a9ef:	int3   
    6500a9f0:	rex push rbp
    6500a9f2:	sub    rsp,0x20
    6500a9f6:	lea    rbp,[rdx+0x20]
    6500a9fa:	lea    rcx,[rbp+0x638]
    6500aa01:	call   0x65001c70
    6500aa06:	add    rsp,0x20
    6500aa0a:	pop    rbp
    6500aa0b:	ret    
    6500aa0c:	int3   
    6500aa0d:	int3   
    6500aa0e:	int3   
    6500aa0f:	int3   
    6500aa10:	rex push rbp
    6500aa12:	sub    rsp,0x20
    6500aa16:	lea    rbp,[rdx+0x20]
    6500aa1a:	lea    rcx,[rbp+0x318]
    6500aa21:	call   0x65001c70
    6500aa26:	add    rsp,0x20
    6500aa2a:	pop    rbp
    6500aa2b:	ret    
    6500aa2c:	int3   
    6500aa2d:	int3   
    6500aa2e:	int3   
    6500aa2f:	int3   
    6500aa30:	rex push rbp
    6500aa32:	sub    rsp,0x20
    6500aa36:	lea    rbp,[rdx+0x20]
    6500aa3a:	lea    rcx,[rbp+0x8b8]
    6500aa41:	call   0x65001c70
    6500aa46:	add    rsp,0x20
    6500aa4a:	pop    rbp
    6500aa4b:	ret    
    6500aa4c:	int3   
    6500aa4d:	int3   
    6500aa4e:	int3   
    6500aa4f:	int3   
    6500aa50:	rex push rbp
    6500aa52:	sub    rsp,0x20
    6500aa56:	lea    rbp,[rdx+0x20]
    6500aa5a:	lea    rcx,[rbp+0x368]
    6500aa61:	call   0x65001c70
    6500aa66:	add    rsp,0x20
    6500aa6a:	pop    rbp
    6500aa6b:	ret    
    6500aa6c:	int3   
    6500aa6d:	int3   
    6500aa6e:	int3   
    6500aa6f:	int3   
    6500aa70:	rex push rbp
    6500aa72:	sub    rsp,0x20
    6500aa76:	lea    rbp,[rdx+0x20]
    6500aa7a:	lea    rcx,[rbp+0x688]
    6500aa81:	call   0x65001c70
    6500aa86:	add    rsp,0x20
    6500aa8a:	pop    rbp
    6500aa8b:	ret    
    6500aa8c:	int3   
    6500aa8d:	int3   
    6500aa8e:	int3   
    6500aa8f:	int3   
    6500aa90:	rex push rbp
    6500aa92:	sub    rsp,0x20
    6500aa96:	lea    rbp,[rdx+0x20]
    6500aa9a:	lea    rcx,[rbp+0x3b8]
    6500aaa1:	call   0x65001c70
    6500aaa6:	add    rsp,0x20
    6500aaaa:	pop    rbp
    6500aaab:	ret    
    6500aaac:	int3   
    6500aaad:	int3   
    6500aaae:	int3   
    6500aaaf:	int3   
    6500aab0:	rex push rbp
    6500aab2:	sub    rsp,0x20
    6500aab6:	lea    rbp,[rdx+0x20]
    6500aaba:	lea    rcx,[rbp+0x818]
    6500aac1:	call   0x65001c70
    6500aac6:	add    rsp,0x20
    6500aaca:	pop    rbp
    6500aacb:	ret    
    6500aacc:	int3   
    6500aacd:	int3   
    6500aace:	int3   
    6500aacf:	int3   
    6500aad0:	rex push rbp
    6500aad2:	sub    rsp,0x20
    6500aad6:	lea    rbp,[rdx+0x20]
    6500aada:	lea    rcx,[rbp+0x408]
    6500aae1:	call   0x65001c70
    6500aae6:	add    rsp,0x20
    6500aaea:	pop    rbp
    6500aaeb:	ret    
    6500aaec:	int3   
    6500aaed:	int3   
    6500aaee:	int3   
    6500aaef:	int3   
    6500aaf0:	rex push rbp
    6500aaf2:	sub    rsp,0x20
    6500aaf6:	lea    rbp,[rdx+0x20]
    6500aafa:	lea    rcx,[rbp+0x6d8]
    6500ab01:	call   0x65001c70
    6500ab06:	add    rsp,0x20
    6500ab0a:	pop    rbp
    6500ab0b:	ret    
    6500ab0c:	int3   
    6500ab0d:	int3   
    6500ab0e:	int3   
    6500ab0f:	int3   
    6500ab10:	rex push rbp
    6500ab12:	sub    rsp,0x20
    6500ab16:	lea    rbp,[rdx+0x20]
    6500ab1a:	lea    rcx,[rbp+0x458]
    6500ab21:	call   0x65001c70
    6500ab26:	add    rsp,0x20
    6500ab2a:	pop    rbp
    6500ab2b:	ret    
    6500ab2c:	int3   
    6500ab2d:	int3   
    6500ab2e:	int3   
    6500ab2f:	int3   
    6500ab30:	rex push rbp
    6500ab32:	sub    rsp,0x20
    6500ab36:	lea    rbp,[rdx+0x20]
    6500ab3a:	lea    rcx,[rbp+0x160]
    6500ab41:	call   0x65001c70
    6500ab46:	add    rsp,0x20
    6500ab4a:	pop    rbp
    6500ab4b:	ret    
    6500ab4c:	int3   
    6500ab4d:	int3   
    6500ab4e:	int3   
    6500ab4f:	int3   
    6500ab50:	rex push rbp
    6500ab52:	sub    rsp,0x20
    6500ab56:	lea    rbp,[rdx+0x20]
    6500ab5a:	lea    rcx,[rbp+0x4a8]
    6500ab61:	call   0x65001c70
    6500ab66:	add    rsp,0x20
    6500ab6a:	pop    rbp
    6500ab6b:	ret    
    6500ab6c:	int3   
    6500ab6d:	int3   
    6500ab6e:	int3   
    6500ab6f:	int3   
    6500ab70:	rex push rbp
    6500ab72:	sub    rsp,0x20
    6500ab76:	lea    rbp,[rdx+0x20]
    6500ab7a:	lea    rcx,[rbp+0x728]
    6500ab81:	call   0x65001c70
    6500ab86:	add    rsp,0x20
    6500ab8a:	pop    rbp
    6500ab8b:	ret    
    6500ab8c:	int3   
    6500ab8d:	int3   
    6500ab8e:	int3   
    6500ab8f:	int3   
    6500ab90:	rex push rbp
    6500ab92:	sub    rsp,0x20
    6500ab96:	lea    rbp,[rdx+0x20]
    6500ab9a:	lea    rcx,[rbp+0x4f8]
    6500aba1:	call   0x65001c70
    6500aba6:	add    rsp,0x20
    6500abaa:	pop    rbp
    6500abab:	ret    
    6500abac:	int3   
    6500abad:	int3   
    6500abae:	int3   
    6500abaf:	int3   
    6500abb0:	rex push rbp
    6500abb2:	sub    rsp,0x20
    6500abb6:	lea    rbp,[rdx+0x20]
    6500abba:	lea    rcx,[rbp+0x868]
    6500abc1:	call   0x65001c70
    6500abc6:	add    rsp,0x20
    6500abca:	pop    rbp
    6500abcb:	ret    
    6500abcc:	int3   
    6500abcd:	int3   
    6500abce:	int3   
    6500abcf:	int3   
    6500abd0:	rex push rbp
    6500abd2:	sub    rsp,0x20
    6500abd6:	lea    rbp,[rdx+0x20]
    6500abda:	lea    rcx,[rbp+0x548]
    6500abe1:	call   0x65001c70
    6500abe6:	add    rsp,0x20
    6500abea:	pop    rbp
    6500abeb:	ret    
    6500abec:	int3   
    6500abed:	int3   
    6500abee:	int3   
    6500abef:	int3   
    6500abf0:	rex push rbp
    6500abf2:	sub    rsp,0x20
    6500abf6:	lea    rbp,[rdx+0x20]
    6500abfa:	lea    rcx,[rbp+0x188]
    6500ac01:	call   0x65001c70
    6500ac06:	add    rsp,0x20
    6500ac0a:	pop    rbp
    6500ac0b:	ret    
    6500ac0c:	int3   
    6500ac0d:	int3   
    6500ac0e:	int3   
    6500ac0f:	int3   
    6500ac10:	rex push rbp
    6500ac12:	sub    rsp,0x20
    6500ac16:	lea    rbp,[rdx+0x20]
    6500ac1a:	lea    rcx,[rbp+0x778]
    6500ac21:	call   0x65001c70
    6500ac26:	add    rsp,0x20
    6500ac2a:	pop    rbp
    6500ac2b:	ret    
    6500ac2c:	int3   
    6500ac2d:	int3   
    6500ac2e:	int3   
    6500ac2f:	int3   
    6500ac30:	rex push rbp
    6500ac32:	sub    rsp,0x20
    6500ac36:	lea    rbp,[rdx+0x20]
    6500ac3a:	lea    rcx,[rbp+0x598]
    6500ac41:	call   0x65001c70
    6500ac46:	add    rsp,0x20
    6500ac4a:	pop    rbp
    6500ac4b:	ret    
    6500ac4c:	int3   
    6500ac4d:	int3   
    6500ac4e:	int3   
    6500ac4f:	int3   
    6500ac50:	rex push rbp
    6500ac52:	sub    rsp,0x20
    6500ac56:	lea    rbp,[rdx+0x20]
    6500ac5a:	lea    rcx,[rbp+0x1b0]
    6500ac61:	call   0x65001c70
    6500ac66:	add    rsp,0x20
    6500ac6a:	pop    rbp
    6500ac6b:	ret    
    6500ac6c:	int3   
    6500ac6d:	int3   
    6500ac6e:	int3   
    6500ac6f:	int3   
    6500ac70:	rex push rbp
    6500ac72:	sub    rsp,0x20
    6500ac76:	lea    rbp,[rdx+0x20]
    6500ac7a:	lea    rcx,[rbp+0x200]
    6500ac81:	call   0x65001c70
    6500ac86:	add    rsp,0x20
    6500ac8a:	pop    rbp
    6500ac8b:	ret    
    6500ac8c:	int3   
    6500ac8d:	int3   
    6500ac8e:	int3   
    6500ac8f:	int3   
    6500ac90:	rex push rbp
    6500ac92:	sub    rsp,0x20
    6500ac96:	lea    rbp,[rdx+0x20]
    6500ac9a:	lea    rcx,[rbp+0x250]
    6500aca1:	call   0x65001c70
    6500aca6:	add    rsp,0x20
    6500acaa:	pop    rbp
    6500acab:	ret    
    6500acac:	int3   
    6500acad:	int3   
    6500acae:	int3   
    6500acaf:	int3   
    6500acb0:	rex push rbp
    6500acb2:	sub    rsp,0x20
    6500acb6:	lea    rbp,[rdx+0x20]
    6500acba:	lea    rcx,[rbp+0x2a0]
    6500acc1:	call   0x65001c70
    6500acc6:	add    rsp,0x20
    6500acca:	pop    rbp
    6500accb:	ret    
    6500accc:	int3   
    6500accd:	int3   
    6500acce:	int3   
    6500accf:	int3   
    6500acd0:	rex push rbp
    6500acd2:	sub    rsp,0x20
    6500acd6:	lea    rbp,[rdx+0x20]
    6500acda:	lea    rcx,[rbp+0x2f0]
    6500ace1:	call   0x65001c70
    6500ace6:	add    rsp,0x20
    6500acea:	pop    rbp
    6500aceb:	ret    
    6500acec:	int3   
    6500aced:	int3   
    6500acee:	int3   
    6500acef:	int3   
    6500acf0:	rex push rbp
    6500acf2:	sub    rsp,0x20
    6500acf6:	lea    rbp,[rdx+0x20]
    6500acfa:	lea    rcx,[rbp+0x340]
    6500ad01:	call   0x65001c70
    6500ad06:	add    rsp,0x20
    6500ad0a:	pop    rbp
    6500ad0b:	ret    
    6500ad0c:	int3   
    6500ad0d:	int3   
    6500ad0e:	int3   
    6500ad0f:	int3   
    6500ad10:	rex push rbp
    6500ad12:	sub    rsp,0x20
    6500ad16:	lea    rbp,[rdx+0x20]
    6500ad1a:	lea    rcx,[rbp+0x390]
    6500ad21:	call   0x65001c70
    6500ad26:	add    rsp,0x20
    6500ad2a:	pop    rbp
    6500ad2b:	ret    
    6500ad2c:	int3   
    6500ad2d:	int3   
    6500ad2e:	int3   
    6500ad2f:	int3   
    6500ad30:	rex push rbp
    6500ad32:	sub    rsp,0x20
    6500ad36:	lea    rbp,[rdx+0x20]
    6500ad3a:	lea    rcx,[rbp+0x3e0]
    6500ad41:	call   0x65001c70
    6500ad46:	add    rsp,0x20
    6500ad4a:	pop    rbp
    6500ad4b:	ret    
    6500ad4c:	int3   
    6500ad4d:	int3   
    6500ad4e:	int3   
    6500ad4f:	int3   
    6500ad50:	rex push rbp
    6500ad52:	sub    rsp,0x20
    6500ad56:	lea    rbp,[rdx+0x20]
    6500ad5a:	lea    rcx,[rbp+0x430]
    6500ad61:	call   0x65001c70
    6500ad66:	add    rsp,0x20
    6500ad6a:	pop    rbp
    6500ad6b:	ret    
    6500ad6c:	int3   
    6500ad6d:	int3   
    6500ad6e:	int3   
    6500ad6f:	int3   
    6500ad70:	rex push rbp
    6500ad72:	sub    rsp,0x20
    6500ad76:	lea    rbp,[rdx+0x20]
    6500ad7a:	lea    rcx,[rbp+0x480]
    6500ad81:	call   0x65001c70
    6500ad86:	add    rsp,0x20
    6500ad8a:	pop    rbp
    6500ad8b:	ret    
    6500ad8c:	int3   
    6500ad8d:	int3   
    6500ad8e:	int3   
    6500ad8f:	int3   
    6500ad90:	rex push rbp
    6500ad92:	sub    rsp,0x20
    6500ad96:	lea    rbp,[rdx+0x20]
    6500ad9a:	lea    rcx,[rbp+0x4d0]
    6500ada1:	call   0x65001c70
    6500ada6:	add    rsp,0x20
    6500adaa:	pop    rbp
    6500adab:	ret    
    6500adac:	int3   
    6500adad:	int3   
    6500adae:	int3   
    6500adaf:	int3   
    6500adb0:	rex push rbp
    6500adb2:	sub    rsp,0x20
    6500adb6:	lea    rbp,[rdx+0x20]
    6500adba:	lea    rcx,[rbp+0x520]
    6500adc1:	call   0x65001c70
    6500adc6:	add    rsp,0x20
    6500adca:	pop    rbp
    6500adcb:	ret    
    6500adcc:	int3   
    6500adcd:	int3   
    6500adce:	int3   
    6500adcf:	int3   
    6500add0:	rex push rbp
    6500add2:	sub    rsp,0x20
    6500add6:	lea    rbp,[rdx+0x20]
    6500adda:	lea    rcx,[rbp+0x570]
    6500ade1:	call   0x65001c70
    6500ade6:	add    rsp,0x20
    6500adea:	pop    rbp
    6500adeb:	ret    
    6500adec:	int3   
    6500aded:	int3   
    6500adee:	int3   
    6500adef:	int3   
    6500adf0:	rex push rbp
    6500adf2:	sub    rsp,0x20
    6500adf6:	lea    rbp,[rdx+0x20]
    6500adfa:	lea    rcx,[rbp+0x5c0]
    6500ae01:	call   0x65001c70
    6500ae06:	add    rsp,0x20
    6500ae0a:	pop    rbp
    6500ae0b:	ret    
    6500ae0c:	int3   
    6500ae0d:	int3   
    6500ae0e:	int3   
    6500ae0f:	int3   
    6500ae10:	rex push rbp
    6500ae12:	sub    rsp,0x20
    6500ae16:	lea    rbp,[rdx+0x20]
    6500ae1a:	lea    rcx,[rbp+0x610]
    6500ae21:	call   0x65001c70
    6500ae26:	add    rsp,0x20
    6500ae2a:	pop    rbp
    6500ae2b:	ret    
    6500ae2c:	int3   
    6500ae2d:	int3   
    6500ae2e:	int3   
    6500ae2f:	int3   
    6500ae30:	rex push rbp
    6500ae32:	sub    rsp,0x20
    6500ae36:	lea    rbp,[rdx+0x20]
    6500ae3a:	lea    rcx,[rbp+0x660]
    6500ae41:	call   0x65001c70
    6500ae46:	add    rsp,0x20
    6500ae4a:	pop    rbp
    6500ae4b:	ret    
    6500ae4c:	int3   
    6500ae4d:	int3   
    6500ae4e:	int3   
    6500ae4f:	int3   
    6500ae50:	rex push rbp
    6500ae52:	sub    rsp,0x20
    6500ae56:	lea    rbp,[rdx+0x20]
    6500ae5a:	lea    rcx,[rbp+0x6b0]
    6500ae61:	call   0x65001c70
    6500ae66:	add    rsp,0x20
    6500ae6a:	pop    rbp
    6500ae6b:	ret    
    6500ae6c:	int3   
    6500ae6d:	int3   
    6500ae6e:	int3   
    6500ae6f:	int3   
    6500ae70:	rex push rbp
    6500ae72:	sub    rsp,0x20
    6500ae76:	lea    rbp,[rdx+0x20]
    6500ae7a:	lea    rcx,[rbp+0x700]
    6500ae81:	call   0x65001c70
    6500ae86:	add    rsp,0x20
    6500ae8a:	pop    rbp
    6500ae8b:	ret    
    6500ae8c:	int3   
    6500ae8d:	int3   
    6500ae8e:	int3   
    6500ae8f:	int3   
    6500ae90:	rex push rbp
    6500ae92:	sub    rsp,0x20
    6500ae96:	lea    rbp,[rdx+0x20]
    6500ae9a:	lea    rcx,[rbp+0x750]
    6500aea1:	call   0x65001c70
    6500aea6:	add    rsp,0x20
    6500aeaa:	pop    rbp
    6500aeab:	ret    
    6500aeac:	int3   
    6500aead:	int3   
    6500aeae:	int3   
    6500aeaf:	int3   
    6500aeb0:	rex push rbp
    6500aeb2:	sub    rsp,0x20
    6500aeb6:	lea    rbp,[rdx+0x20]
    6500aeba:	lea    rcx,[rbp+0x7a0]
    6500aec1:	call   0x65001c70
    6500aec6:	add    rsp,0x20
    6500aeca:	pop    rbp
    6500aecb:	ret    
    6500aecc:	int3   
    6500aecd:	int3   
    6500aece:	int3   
    6500aecf:	int3   
    6500aed0:	rex push rbp
    6500aed2:	sub    rsp,0x20
    6500aed6:	lea    rbp,[rdx+0x20]
    6500aeda:	lea    rcx,[rbp+0x7f0]
    6500aee1:	call   0x65001c70
    6500aee6:	add    rsp,0x20
    6500aeea:	pop    rbp
    6500aeeb:	ret    
    6500aeec:	int3   
    6500aeed:	int3   
    6500aeee:	int3   
    6500aeef:	int3   
    6500aef0:	rex push rbp
    6500aef2:	sub    rsp,0x20
    6500aef6:	lea    rbp,[rdx+0x20]
    6500aefa:	lea    rcx,[rbp+0x840]
    6500af01:	call   0x65001c70
    6500af06:	add    rsp,0x20
    6500af0a:	pop    rbp
    6500af0b:	ret    
    6500af0c:	int3   
    6500af0d:	int3   
    6500af0e:	int3   
    6500af0f:	int3   
    6500af10:	rex push rbp
    6500af12:	sub    rsp,0x20
    6500af16:	lea    rbp,[rdx+0x20]
    6500af1a:	lea    rcx,[rbp+0x890]
    6500af21:	call   0x65001c70
    6500af26:	add    rsp,0x20
    6500af2a:	pop    rbp
    6500af2b:	ret    
    6500af2c:	int3   
    6500af2d:	int3   
    6500af2e:	int3   
    6500af2f:	int3   
    6500af30:	rex push rbp
    6500af32:	sub    rsp,0x20
    6500af36:	lea    rbp,[rdx+0x20]
    6500af3a:	lea    rcx,[rbp+0x8e0]
    6500af41:	call   0x65001c70
    6500af46:	add    rsp,0x20
    6500af4a:	pop    rbp
    6500af4b:	ret    
    6500af4c:	int3   
    6500af4d:	int3   
    6500af4e:	int3   
    6500af4f:	int3   
    6500af50:	rex push rbp
    6500af52:	sub    rsp,0x20
    6500af56:	lea    rbp,[rdx+0x20]
    6500af5a:	lea    rcx,[rbp+0x930]
    6500af61:	call   0x65001c70
    6500af66:	add    rsp,0x20
    6500af6a:	pop    rbp
    6500af6b:	ret    
    6500af6c:	int3   
    6500af6d:	int3   
    6500af6e:	int3   
    6500af6f:	int3   
    6500af70:	rex push rbp
    6500af72:	sub    rsp,0x20
    6500af76:	lea    rbp,[rdx+0x20]
    6500af7a:	lea    rcx,[rbp+0x980]
    6500af81:	call   0x65001c70
    6500af86:	add    rsp,0x20
    6500af8a:	pop    rbp
    6500af8b:	ret    
    6500af8c:	int3   
    6500af8d:	int3   
    6500af8e:	int3   
    6500af8f:	int3   
    6500af90:	rex push rbp
    6500af92:	sub    rsp,0x20
    6500af96:	lea    rbp,[rdx+0x20]
    6500af9a:	lea    rcx,[rbp+0x1d8]
    6500afa1:	call   0x65001c70
    6500afa6:	add    rsp,0x20
    6500afaa:	pop    rbp
    6500afab:	ret    
    6500afac:	int3   
    6500afad:	int3   
    6500afae:	int3   
    6500afaf:	int3   
    6500afb0:	rex push rbp
    6500afb2:	sub    rsp,0x20
    6500afb6:	lea    rbp,[rdx+0x20]
    6500afba:	lea    rcx,[rbp+0x958]
    6500afc1:	call   0x65001c70
    6500afc6:	add    rsp,0x20
    6500afca:	pop    rbp
    6500afcb:	ret    
    6500afcc:	int3   
    6500afcd:	int3   
    6500afce:	int3   
    6500afcf:	int3   
    6500afd0:	rex push rbp
    6500afd2:	sub    rsp,0x20
    6500afd6:	lea    rbp,[rdx+0x20]
    6500afda:	lea    rcx,[rbp+0x120]
    6500afe1:	call   0x650064c0
    6500afe6:	add    rsp,0x20
    6500afea:	pop    rbp
    6500afeb:	ret    
    6500afec:	int3   
    6500afed:	int3   
    6500afee:	int3   
    6500afef:	int3   
    6500aff0:	rex push rbp
    6500aff2:	sub    rsp,0x20
    6500aff6:	lea    rbp,[rdx+0x20]
    6500affa:	lea    rcx,[rbp+0x138]
    6500b001:	call   0x65001c70
    6500b006:	add    rsp,0x20
    6500b00a:	pop    rbp
    6500b00b:	ret    
    6500b00c:	int3   
    6500b00d:	int3   
    6500b00e:	int3   
    6500b00f:	int3   
    6500b010:	mov    BYTE PTR [rsp+0x10],dl
    6500b014:	mov    QWORD PTR [rsp+0x8],rcx
    6500b019:	push   rbx
    6500b01a:	push   rbp
    6500b01b:	push   rsi
    6500b01c:	push   rdi
    6500b01d:	push   r12
    6500b01f:	push   r13
    6500b021:	push   r14
    6500b023:	push   r15
    6500b025:	sub    rsp,0xb8
    6500b02c:	mov    QWORD PTR [rsp+0x78],0xfffffffffffffffe
    6500b035:	movzx  r12d,dl
    6500b039:	mov    rbp,rcx
    6500b03c:	xor    r14d,r14d
    6500b03f:	mov    DWORD PTR [rsp+0x50],r14d
    6500b044:	call   QWORD PTR [rip+0x3804e]        # 0x65043098
    6500b04a:	lea    rcx,[rip+0x3804f]        # 0x650430a0
    6500b051:	mov    rax,QWORD PTR [rip+0x38048]        # 0x650430a0
    6500b058:	call   QWORD PTR [rax+0x18]
    6500b05b:	add    rax,0x18
    6500b05f:	mov    QWORD PTR [rbp+0x0],rax
    6500b063:	mov    r13d,0x1
    6500b069:	mov    DWORD PTR [rsp+0x50],r13d
    6500b06e:	xor    eax,eax
    6500b070:	lock cmpxchg DWORD PTR [rip+0x3cd33],r13d        # 0x65047dac
    6500b079:	jne    0x6500b0e2
    6500b07b:	lea    r8,[rip+0x2e9ae]        # 0x65039a30
    6500b082:	lea    edx,[r14+0xe]
    6500b086:	lea    rcx,[rip+0x2e9cb]        # 0x65039a58
    6500b08d:	call   0x6500bcb0
    6500b092:	mov    rdi,rax
    6500b095:	lea    r8,[rip+0x2e9cc]        # 0x65039a68
    6500b09c:	lea    edx,[r14+0x8]
    6500b0a0:	lea    rcx,[rip+0x2e7d1]        # 0x65039878
    6500b0a7:	call   0x6500c660
    6500b0ac:	mov    rcx,rax
    6500b0af:	call   QWORD PTR [rip+0x2904b]        # 0x65034100
    6500b0b5:	add    DWORD PTR [rip+0x3988c],r13d        # 0x65044948
    6500b0bc:	test   rax,rax
    6500b0bf:	je     0x6500b0d6
    6500b0c1:	mov    rdx,rdi
    6500b0c4:	mov    rcx,rax
    6500b0c7:	call   QWORD PTR [rip+0x2903b]        # 0x65034108
    6500b0cd:	add    DWORD PTR [rip+0x39878],r13d        # 0x6504494c
    6500b0d4:	jmp    0x6500b0d9
    6500b0d6:	mov    rax,r14
    6500b0d9:	mov    QWORD PTR [rip+0x3ce00],rax        # 0x65047ee0
    6500b0e0:	jmp    0x6500b0e9
    6500b0e2:	mov    rax,QWORD PTR [rip+0x3cdf7]        # 0x65047ee0
    6500b0e9:	xor    edx,edx
    6500b0eb:	xor    ecx,ecx
    6500b0ed:	lea    r8d,[rdx+0x4]
    6500b0f1:	call   rax
    6500b0f3:	mov    rbx,rax
    6500b0f6:	mov    QWORD PTR [rsp+0x60],rax
    6500b0fb:	test   rax,rax
    6500b0fe:	je     0x6500b4bc
    6500b104:	mov    DWORD PTR [rsp+0x4c],r14d
    6500b109:	lea    rax,[rsp+0x4c]
    6500b10e:	mov    QWORD PTR [rsp+0x38],rax
    6500b113:	lea    rax,[rsp+0x118]
    6500b11b:	mov    QWORD PTR [rsp+0x30],rax
    6500b120:	lea    rax,[rsp+0x48]
    6500b125:	mov    QWORD PTR [rsp+0x28],rax
    6500b12a:	mov    DWORD PTR [rsp+0x20],0x30
    6500b132:	lea    r9,[rsp+0x80]
    6500b13a:	mov    edx,0x13f
    6500b13f:	mov    r8d,0x3
    6500b145:	mov    rcx,rbx
    6500b148:	call   QWORD PTR [rip+0x28eb2]        # 0x65034000
    6500b14e:	mov    edi,eax
    6500b150:	call   QWORD PTR [rip+0x28f12]        # 0x65034068
    6500b156:	or     r8,0xffffffffffffffff
    6500b15a:	test   edi,edi
    6500b15c:	je     0x6500b16f
    6500b15e:	cmp    eax,0xea
    6500b163:	je     0x6500b16f
    6500b165:	mov    r15,QWORD PTR [rsp+0x110]
    6500b16d:	jmp    0x6500b1cb
    6500b16f:	mov    edi,DWORD PTR [rsp+0x48]
    6500b173:	add    edi,0x30
    6500b176:	mov    ecx,edi
    6500b178:	mov    eax,0x30
    6500b17d:	mul    rcx
    6500b180:	cmovo  rax,r8
    6500b184:	mov    rcx,rax
    6500b187:	call   0x6501d2f0
    6500b18c:	mov    r15,rax
    6500b18f:	lea    rax,[rsp+0x4c]
    6500b194:	mov    QWORD PTR [rsp+0x38],rax
    6500b199:	lea    rax,[rsp+0x118]
    6500b1a1:	mov    QWORD PTR [rsp+0x30],rax
    6500b1a6:	lea    rax,[rsp+0x48]
    6500b1ab:	mov    QWORD PTR [rsp+0x28],rax
    6500b1b0:	mov    DWORD PTR [rsp+0x20],edi
    6500b1b4:	mov    r9,r15
    6500b1b7:	mov    edx,0x13f
    6500b1bc:	mov    r8d,0x3
    6500b1c2:	mov    rcx,rbx
    6500b1c5:	call   QWORD PTR [rip+0x28e35]        # 0x65034000
    6500b1cb:	mov    esi,r14d
    6500b1ce:	mov    DWORD PTR [rsp+0x110],r14d
    6500b1d6:	cmp    DWORD PTR [rsp+0x118],r14d
    6500b1de:	jbe    0x6500b4bc
    6500b1e4:	mov    rbx,QWORD PTR [r15]
    6500b1e7:	lea    rcx,[rip+0x37eb2]        # 0x650430a0
    6500b1ee:	mov    rax,QWORD PTR [rip+0x37eab]        # 0x650430a0
    6500b1f5:	call   QWORD PTR [rax+0x18]
    6500b1f8:	add    rax,0x18
    6500b1fc:	mov    QWORD PTR [rsp+0x40],rax
    6500b201:	test   rbx,rbx
    6500b204:	je     0x6500b247
    6500b206:	test   rbx,0xffffffffffff0000
    6500b20d:	jne    0x6500b232
    6500b20f:	movzx  edi,bx
    6500b212:	xor    edx,edx
    6500b214:	mov    ecx,edi
    6500b216:	call   0x650026f0
    6500b21b:	test   rax,rax
    6500b21e:	je     0x6500b25b
    6500b220:	mov    r8d,edi
    6500b223:	mov    rdx,rax
    6500b226:	lea    rcx,[rsp+0x40]
    6500b22b:	call   0x65003e00
    6500b230:	jmp    0x6500b25b
    6500b232:	xor    eax,eax
    6500b234:	or     rcx,0xffffffffffffffff
    6500b238:	mov    rdi,rbx
    6500b23b:	repnz scas ax,WORD PTR es:[rdi]
    6500b23e:	not    rcx
    6500b241:	sub    rcx,0x1
    6500b245:	jmp    0x6500b24a
    6500b247:	mov    ecx,r14d
    6500b24a:	mov    r8d,ecx
    6500b24d:	mov    rdx,rbx
    6500b250:	lea    rcx,[rsp+0x40]
    6500b255:	call   0x65003f90
    6500b25a:	nop
    6500b25b:	test   r12b,r12b
    6500b25e:	je     0x6500b2e9
    6500b264:	mov    rdi,QWORD PTR [rsp+0x40]
    6500b269:	mov    rcx,QWORD PTR [rdi-0x18]
    6500b26d:	mov    rax,QWORD PTR [rcx]
    6500b270:	call   QWORD PTR [rax+0x20]
    6500b273:	mov    rcx,rax
    6500b276:	cmp    DWORD PTR [rdi-0x8],0x0
    6500b27a:	jl     0x6500b28d
    6500b27c:	cmp    rax,QWORD PTR [rdi-0x18]
    6500b280:	jne    0x6500b28d
    6500b282:	lea    rbx,[rdi-0x18]
    6500b286:	lock add DWORD PTR [rdi-0x8],0x1
    6500b28b:	jmp    0x6500b2c9
    6500b28d:	mov    rax,QWORD PTR [rax]
    6500b290:	mov    r8d,0x2
    6500b296:	mov    edx,DWORD PTR [rdi-0x10]
    6500b299:	call   QWORD PTR [rax]
    6500b29b:	mov    rbx,rax
    6500b29e:	test   rax,rax
    6500b2a1:	je     0x6500b498
    6500b2a7:	mov    ecx,DWORD PTR [rdi-0x10]
    6500b2aa:	mov    DWORD PTR [rax+0x8],ecx
    6500b2ad:	mov    ecx,DWORD PTR [rdi-0x10]
    6500b2b0:	add    ecx,0x1
    6500b2b3:	movsxd rdx,ecx
    6500b2b6:	lea    r9,[rdx+rdx*1]
    6500b2ba:	mov    r8,rdi
    6500b2bd:	add    rdx,rdx
    6500b2c0:	lea    rcx,[rax+0x18]
    6500b2c4:	call   0x6501d7b0
    6500b2c9:	lea    rax,[rbx+0x18]
    6500b2cd:	mov    QWORD PTR [rsp+0x58],rax
    6500b2d2:	lea    rcx,[rsp+0x58]
    6500b2d7:	call   0x65008410
    6500b2dc:	test   al,al
    6500b2de:	jne    0x6500b369
    6500b2e4:	jmp    0x6500b45b
    6500b2e9:	mov    rdi,QWORD PTR [rsp+0x40]
    6500b2ee:	mov    rcx,QWORD PTR [rdi-0x18]
    6500b2f2:	mov    rax,QWORD PTR [rcx]
    6500b2f5:	call   QWORD PTR [rax+0x20]
    6500b2f8:	mov    rcx,rax
    6500b2fb:	cmp    DWORD PTR [rdi-0x8],0x0
    6500b2ff:	jl     0x6500b312
    6500b301:	cmp    rax,QWORD PTR [rdi-0x18]
    6500b305:	jne    0x6500b312
    6500b307:	lea    rbx,[rdi-0x18]
    6500b30b:	lock add DWORD PTR [rdi-0x8],0x1
    6500b310:	jmp    0x6500b34e
    6500b312:	mov    rax,QWORD PTR [rax]
    6500b315:	mov    r8d,0x2
    6500b31b:	mov    edx,DWORD PTR [rdi-0x10]
    6500b31e:	call   QWORD PTR [rax]
    6500b320:	mov    rbx,rax
    6500b323:	test   rax,rax
    6500b326:	je     0x6500b4b6
    6500b32c:	mov    ecx,DWORD PTR [rdi-0x10]
    6500b32f:	mov    DWORD PTR [rax+0x8],ecx
    6500b332:	mov    ecx,DWORD PTR [rdi-0x10]
    6500b335:	add    ecx,0x1
    6500b338:	movsxd rdx,ecx
    6500b33b:	lea    r9,[rdx+rdx*1]
    6500b33f:	mov    r8,rdi
    6500b342:	add    rdx,rdx
    6500b345:	lea    rcx,[rax+0x18]
    6500b349:	call   0x6501d7b0
    6500b34e:	lea    rax,[rbx+0x18]
    6500b352:	mov    QWORD PTR [rsp+0x68],rax
    6500b357:	lea    rcx,[rsp+0x68]
    6500b35c:	call   0x65006530
    6500b361:	test   al,al
    6500b363:	jne    0x6500b45b
    6500b369:	lea    r8,[rip+0x2d940]        # 0x65038cb0
    6500b370:	mov    edx,0x4
    6500b375:	lea    rcx,[rip+0x2d964]        # 0x65038ce0
    6500b37c:	call   0x6500bcb0
    6500b381:	mov    rdx,rax
    6500b384:	mov    rcx,rbp
    6500b387:	call   0x65003ab0
    6500b38c:	lea    rdx,[rsp+0x40]
    6500b391:	lea    rcx,[rsp+0x70]
    6500b396:	call   0x65004ac0
    6500b39b:	nop
    6500b39c:	mov    rsi,QWORD PTR [rax]
    6500b39f:	movsxd r13,DWORD PTR [rsi-0x10]
    6500b3a3:	mov    rax,QWORD PTR [rbp+0x0]
    6500b3a7:	mov    rbx,rsi
    6500b3aa:	sub    rbx,rax
    6500b3ad:	sar    rbx,1
    6500b3b0:	mov    r12d,DWORD PTR [rax-0x10]
    6500b3b4:	lea    edi,[r12+r13*1]
    6500b3b8:	mov    ecx,0x1
    6500b3bd:	sub    ecx,DWORD PTR [rax-0x8]
    6500b3c0:	mov    eax,DWORD PTR [rax-0xc]
    6500b3c3:	sub    eax,edi
    6500b3c5:	or     eax,ecx
    6500b3c7:	jge    0x6500b3d3
    6500b3c9:	mov    edx,edi
    6500b3cb:	mov    rcx,rbp
    6500b3ce:	call   0x65002640
    6500b3d3:	mov    rax,QWORD PTR [rbp+0x0]
    6500b3d7:	cmp    rbx,r12
    6500b3da:	ja     0x6500b3e0
    6500b3dc:	lea    rsi,[rax+rbx*2]
    6500b3e0:	mov    rdx,r13
    6500b3e3:	add    rdx,rdx
    6500b3e6:	lea    rcx,[rax+r12*2]
    6500b3ea:	mov    r9,rdx
    6500b3ed:	mov    r8,rsi
    6500b3f0:	call   0x6501d7b0
    6500b3f5:	test   edi,edi
    6500b3f7:	js     0x6500b49e
    6500b3fd:	mov    rax,QWORD PTR [rbp+0x0]
    6500b401:	cmp    edi,DWORD PTR [rax-0xc]
    6500b404:	jg     0x6500b49e
    6500b40a:	mov    DWORD PTR [rax-0x10],edi
    6500b40d:	movsxd rcx,edi
    6500b410:	mov    rax,QWORD PTR [rbp+0x0]
    6500b414:	mov    WORD PTR [rax+rcx*2],0x0
    6500b41a:	mov    rdx,QWORD PTR [rsp+0x70]
    6500b41f:	add    rdx,0xffffffffffffffe8
    6500b423:	or     eax,0xffffffff
    6500b426:	lock xadd DWORD PTR [rdx+0x10],eax
    6500b42b:	add    eax,0xffffffff
    6500b42e:	test   eax,eax
    6500b430:	jg     0x6500b44c
    6500b432:	mov    rcx,QWORD PTR [rdx]
    6500b435:	mov    rax,QWORD PTR [rcx]
    6500b438:	call   QWORD PTR [rax+0x8]
    6500b43b:	mov    esi,DWORD PTR [rsp+0x110]
    6500b442:	mov    r12b,BYTE PTR [rsp+0x108]
    6500b44a:	jmp    0x6500b45b
    6500b44c:	mov    esi,DWORD PTR [rsp+0x110]
    6500b453:	mov    r12b,BYTE PTR [rsp+0x108]
    6500b45b:	mov    rdx,QWORD PTR [rsp+0x40]
    6500b460:	add    rdx,0xffffffffffffffe8
    6500b464:	or     eax,0xffffffff
    6500b467:	lock xadd DWORD PTR [rdx+0x10],eax
    6500b46c:	add    eax,0xffffffff
    6500b46f:	test   eax,eax
    6500b471:	jg     0x6500b47c
    6500b473:	mov    rcx,QWORD PTR [rdx]
    6500b476:	mov    rax,QWORD PTR [rcx]
    6500b479:	call   QWORD PTR [rax+0x8]
    6500b47c:	add    esi,0x1
    6500b47f:	mov    DWORD PTR [rsp+0x110],esi
    6500b486:	add    r15,0x30
    6500b48a:	cmp    esi,DWORD PTR [rsp+0x118]
    6500b491:	jae    0x6500b4a9
    6500b493:	jmp    0x6500b1e4
    6500b498:	call   0x65002320
    6500b49d:	nop
    6500b49e:	mov    ecx,0x80070057
    6500b4a3:	call   0x65001050
    6500b4a8:	nop
    6500b4a9:	mov    rbx,QWORD PTR [rsp+0x60]
    6500b4ae:	mov    r13d,0x1
    6500b4b4:	jmp    0x6500b4bc
    6500b4b6:	call   0x65002320
    6500b4bb:	nop
    6500b4bc:	xor    eax,eax
    6500b4be:	lock cmpxchg DWORD PTR [rip+0x3c8f9],r13d        # 0x65047dc0
    6500b4c7:	jne    0x6500b530
    6500b4c9:	lea    r8,[rip+0x2e5c8]        # 0x65039a98
    6500b4d0:	mov    edx,0x12
    6500b4d5:	lea    rcx,[rip+0x2e5fc]        # 0x65039ad8
    6500b4dc:	call   0x6500bcb0
    6500b4e1:	mov    rdi,rax
    6500b4e4:	lea    r8,[rip+0x2e605]        # 0x65039af0
    6500b4eb:	mov    edx,0x8
    6500b4f0:	lea    rcx,[rip+0x2e381]        # 0x65039878
    6500b4f7:	call   0x6500c660
    6500b4fc:	mov    rcx,rax
    6500b4ff:	call   QWORD PTR [rip+0x28bfb]        # 0x65034100
    6500b505:	add    DWORD PTR [rip+0x3943c],0x1        # 0x65044948
    6500b50c:	test   rax,rax
    6500b50f:	je     0x6500b527
    6500b511:	mov    rdx,rdi
    6500b514:	mov    rcx,rax
    6500b517:	call   QWORD PTR [rip+0x28beb]        # 0x65034108
    6500b51d:	mov    r14,rax
    6500b520:	add    DWORD PTR [rip+0x39425],0x1        # 0x6504494c
    6500b527:	mov    QWORD PTR [rip+0x3c9ba],r14        # 0x65047ee8
    6500b52e:	jmp    0x6500b537
    6500b530:	mov    r14,QWORD PTR [rip+0x3c9b1]        # 0x65047ee8
    6500b537:	mov    rcx,rbx
    6500b53a:	call   r14
    6500b53d:	mov    rax,rbp
    6500b540:	add    rsp,0xb8
    6500b547:	pop    r15
    6500b549:	pop    r14
    6500b54b:	pop    r13
    6500b54d:	pop    r12
    6500b54f:	pop    rdi
    6500b550:	pop    rsi
    6500b551:	pop    rbp
    6500b552:	pop    rbx
    6500b553:	ret    
    6500b554:	int3   
    6500b555:	int3   
    6500b556:	int3   
    6500b557:	int3   
    6500b558:	int3   
    6500b559:	int3   
    6500b55a:	int3   
    6500b55b:	int3   
    6500b55c:	int3   
    6500b55d:	int3   
    6500b55e:	int3   
    6500b55f:	int3   
    6500b560:	rex push rbp
    6500b562:	sub    rsp,0x20
    6500b566:	mov    rbp,rdx
    6500b569:	mov    eax,DWORD PTR [rbp+0x50]
    6500b56c:	and    eax,0x1
    6500b56f:	test   eax,eax
    6500b571:	je     0x6500b583
    6500b573:	and    DWORD PTR [rbp+0x50],0xfffffffe
    6500b577:	mov    rcx,QWORD PTR [rbp+0x100]
    6500b57e:	call   0x65001cb0
    6500b583:	add    rsp,0x20
    6500b587:	pop    rbp
    6500b588:	ret    
    6500b589:	int3   
    6500b58a:	int3   
    6500b58b:	int3   
    6500b58c:	int3   
    6500b58d:	int3   
    6500b58e:	int3   
    6500b58f:	int3   
    6500b590:	rex push rbp
    6500b592:	sub    rsp,0x20
    6500b596:	mov    rbp,rdx
    6500b599:	lea    rcx,[rbp+0x40]
    6500b59d:	call   0x65002100
    6500b5a2:	add    rsp,0x20
    6500b5a6:	pop    rbp
    6500b5a7:	ret    
    6500b5a8:	int3   
    6500b5a9:	int3   
    6500b5aa:	int3   
    6500b5ab:	int3   
    6500b5ac:	int3   
    6500b5ad:	int3   
    6500b5ae:	int3   
    6500b5af:	int3   
    6500b5b0:	rex push rbp
    6500b5b2:	sub    rsp,0x20
    6500b5b6:	mov    rbp,rdx
    6500b5b9:	lea    rcx,[rbp+0x40]
    6500b5bd:	call   0x65001cb0
    6500b5c2:	add    rsp,0x20
    6500b5c6:	pop    rbp
    6500b5c7:	ret    
    6500b5c8:	int3   
    6500b5c9:	int3   
    6500b5ca:	int3   
    6500b5cb:	int3   
    6500b5cc:	int3   
    6500b5cd:	int3   
    6500b5ce:	int3   
    6500b5cf:	int3   
    6500b5d0:	rex push rbp
    6500b5d2:	sub    rsp,0x20
    6500b5d6:	mov    rbp,rdx
    6500b5d9:	lea    rcx,[rbp+0x70]
    6500b5dd:	call   0x65001cb0
    6500b5e2:	add    rsp,0x20
    6500b5e6:	pop    rbp
    6500b5e7:	ret    
    6500b5e8:	int3   
    6500b5e9:	int3   
    6500b5ea:	int3   
    6500b5eb:	int3   
    6500b5ec:	int3   
    6500b5ed:	int3   
    6500b5ee:	int3   
    6500b5ef:	int3   
    6500b5f0:	rex push rdi
    6500b5f2:	sub    rsp,0x1a0
    6500b5f9:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500b602:	mov    QWORD PTR [rsp+0x1b8],rbx
    6500b60a:	mov    rax,QWORD PTR [rip+0x37b0f]        # 0x65043120
    6500b611:	xor    rax,rsp
    6500b614:	mov    QWORD PTR [rsp+0x190],rax
    6500b61c:	mov    rbx,rcx
    6500b61f:	mov    r9d,0xa0
    6500b625:	lea    r8,[rsp+0x50]
    6500b62a:	mov    edx,0x7d0
    6500b62f:	lea    rcx,[rip+0xffffffffffff49ca]        # 0x65000000
    6500b636:	call   QWORD PTR [rip+0x28d2c]        # 0x65034368
    6500b63c:	test   eax,eax
    6500b63e:	je     0x6500b6eb
    6500b644:	lea    rax,[rsp+0x20]
    6500b649:	mov    QWORD PTR [rsp+0x28],rax
    6500b64e:	lea    rcx,[rip+0x37a4b]        # 0x650430a0
    6500b655:	mov    rax,QWORD PTR [rip+0x37a44]        # 0x650430a0
    6500b65c:	call   QWORD PTR [rax+0x18]
    6500b65f:	add    rax,0x18
    6500b663:	mov    QWORD PTR [rsp+0x20],rax
    6500b668:	lea    rcx,[rsp+0x50]
    6500b66d:	lea    rax,[rsp+0x50]
    6500b672:	test   rax,0xffffffffffff0000
    6500b678:	jne    0x6500b69d
    6500b67a:	movzx  edi,cx
    6500b67d:	xor    edx,edx
    6500b67f:	mov    ecx,edi
    6500b681:	call   0x650026f0
    6500b686:	test   rax,rax
    6500b689:	je     0x6500b6c2
    6500b68b:	mov    r8d,edi
    6500b68e:	mov    rdx,rax
    6500b691:	lea    rcx,[rsp+0x20]
    6500b696:	call   0x65003e00
    6500b69b:	jmp    0x6500b6c2
    6500b69d:	xor    eax,eax
    6500b69f:	or     rcx,0xffffffffffffffff
    6500b6a3:	lea    rdi,[rsp+0x50]
    6500b6a8:	repnz scas ax,WORD PTR es:[rdi]
    6500b6ab:	not    rcx
    6500b6ae:	lea    r8d,[rcx-0x1]
    6500b6b2:	lea    rdx,[rsp+0x50]
    6500b6b7:	lea    rcx,[rsp+0x20]
    6500b6bc:	call   0x65003f90
    6500b6c1:	nop
    6500b6c2:	lea    rdx,[rsp+0x20]
    6500b6c7:	lea    rcx,[rsp+0x38]
    6500b6cc:	call   0x65004670
    6500b6d1:	mov    ecx,DWORD PTR [rax]
    6500b6d3:	mov    DWORD PTR [rbx],ecx
    6500b6d5:	mov    ecx,DWORD PTR [rax+0x4]
    6500b6d8:	mov    DWORD PTR [rbx+0x4],ecx
    6500b6db:	mov    ecx,DWORD PTR [rax+0x8]
    6500b6de:	mov    DWORD PTR [rbx+0x8],ecx
    6500b6e1:	mov    eax,DWORD PTR [rax+0xc]
    6500b6e4:	mov    DWORD PTR [rbx+0xc],eax
    6500b6e7:	mov    al,0x1
    6500b6e9:	jmp    0x6500b710
    6500b6eb:	mov    eax,DWORD PTR [rip+0x29a37]        # 0x65035128
    6500b6f1:	mov    DWORD PTR [rbx],eax
    6500b6f3:	mov    eax,DWORD PTR [rip+0x29a33]        # 0x6503512c
    6500b6f9:	mov    DWORD PTR [rbx+0x4],eax
    6500b6fc:	mov    eax,DWORD PTR [rip+0x29a2e]        # 0x65035130
    6500b702:	mov    DWORD PTR [rbx+0x8],eax
    6500b705:	mov    eax,DWORD PTR [rip+0x29a29]        # 0x65035134
    6500b70b:	mov    DWORD PTR [rbx+0xc],eax
    6500b70e:	xor    al,al
    6500b710:	mov    rcx,QWORD PTR [rsp+0x190]
    6500b718:	xor    rcx,rsp
    6500b71b:	call   0x6501e650
    6500b720:	mov    rbx,QWORD PTR [rsp+0x1b8]
    6500b728:	add    rsp,0x1a0
    6500b72f:	pop    rdi
    6500b730:	ret    
    6500b731:	int3   
    6500b732:	int3   
    6500b733:	int3   
    6500b734:	int3   
    6500b735:	int3   
    6500b736:	int3   
    6500b737:	int3   
    6500b738:	int3   
    6500b739:	int3   
    6500b73a:	int3   
    6500b73b:	int3   
    6500b73c:	int3   
    6500b73d:	int3   
    6500b73e:	int3   
    6500b73f:	int3   
    6500b740:	rex push rbp
    6500b742:	sub    rsp,0x20
    6500b746:	mov    rbp,rdx
    6500b749:	mov    rcx,QWORD PTR [rbp+0x28]
    6500b74d:	call   0x65002100
    6500b752:	add    rsp,0x20
    6500b756:	pop    rbp
    6500b757:	ret    
    6500b758:	int3   
    6500b759:	int3   
    6500b75a:	int3   
    6500b75b:	int3   
    6500b75c:	int3   
    6500b75d:	int3   
    6500b75e:	int3   
    6500b75f:	int3   
    6500b760:	mov    QWORD PTR [rsp+0x10],rdx
    6500b765:	push   rbp
    6500b766:	sub    rsp,0x20
    6500b76a:	mov    rbp,rdx
    6500b76d:	lea    rax,[rip+0xffffffffffffff9a]        # 0x6500b70e
    6500b774:	jmp    0x6500b776
    6500b776:	add    rsp,0x20
    6500b77a:	pop    rbp
    6500b77b:	ret    
    6500b77c:	int3   
    6500b77d:	int3   
    6500b77e:	int3   
    6500b77f:	int3   
    6500b780:	mov    rax,rsp
    6500b783:	push   rdi
    6500b784:	push   r12
    6500b786:	push   r13
    6500b788:	push   r14
    6500b78a:	push   r15
    6500b78c:	sub    rsp,0x160
    6500b793:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500b79c:	mov    QWORD PTR [rax+0x8],rbx
    6500b7a0:	mov    QWORD PTR [rax+0x10],rbp
    6500b7a4:	mov    QWORD PTR [rax+0x18],rsi
    6500b7a8:	mov    rax,QWORD PTR [rip+0x37971]        # 0x65043120
    6500b7af:	xor    rax,rsp
    6500b7b2:	mov    QWORD PTR [rsp+0x150],rax
    6500b7ba:	cmp    DWORD PTR [rip+0x3c66f],0x0        # 0x65047e30
    6500b7c1:	jne    0x6500ba51
    6500b7c7:	mov    DWORD PTR [rip+0x3c65f],0x18        # 0x65047e30
    6500b7d1:	xor    ebx,ebx
    6500b7d3:	mov    DWORD PTR [rip+0x3c667],ebx        # 0x65047e40
    6500b7d9:	lea    r8,[rip+0x2d508]        # 0x65038ce8
    6500b7e0:	lea    edx,[rbx+0x12]
    6500b7e3:	lea    rcx,[rip+0x2d526]        # 0x65038d10
    6500b7ea:	call   0x6500c660
    6500b7ef:	mov    rbp,rax
    6500b7f2:	lea    rcx,[rip+0x378a7]        # 0x650430a0
    6500b7f9:	mov    rdx,QWORD PTR [rip+0x378a0]        # 0x650430a0
    6500b800:	call   QWORD PTR [rdx+0x18]
    6500b803:	add    rax,0x18
    6500b807:	mov    QWORD PTR [rsp+0x20],rax
    6500b80c:	or     rsi,0xffffffffffffffff
    6500b810:	test   rbp,rbp
    6500b813:	je     0x6500b855
    6500b815:	test   rbp,0xffffffffffff0000
    6500b81c:	jne    0x6500b841
    6500b81e:	movzx  edi,bp
    6500b821:	xor    edx,edx
    6500b823:	mov    ecx,edi
    6500b825:	call   0x650026f0
    6500b82a:	test   rax,rax
    6500b82d:	je     0x6500b868
    6500b82f:	mov    r8d,edi
    6500b832:	mov    rdx,rax
    6500b835:	lea    rcx,[rsp+0x20]
    6500b83a:	call   0x65003e00
    6500b83f:	jmp    0x6500b868
    6500b841:	xor    eax,eax
    6500b843:	mov    rcx,rsi
    6500b846:	mov    rdi,rbp
    6500b849:	repnz scas ax,WORD PTR es:[rdi]
    6500b84c:	not    rcx
    6500b84f:	sub    rcx,0x1
    6500b853:	jmp    0x6500b857
    6500b855:	mov    ecx,ebx
    6500b857:	mov    r8d,ecx
    6500b85a:	mov    rdx,rbp
    6500b85d:	lea    rcx,[rsp+0x20]
    6500b862:	call   0x65003f90
    6500b867:	nop
    6500b868:	xor    edx,edx
    6500b86a:	mov    r8d,0x110
    6500b870:	lea    rcx,[rsp+0x34]
    6500b875:	call   0x6501efa0
    6500b87a:	mov    DWORD PTR [rsp+0x30],0x114
    6500b882:	lea    rcx,[rip+0x37817]        # 0x650430a0
    6500b889:	mov    rax,QWORD PTR [rip+0x37810]        # 0x650430a0
    6500b890:	call   QWORD PTR [rax+0x18]
    6500b893:	mov    rdi,rax
    6500b896:	lea    rcx,[rsp+0x30]
    6500b89b:	call   QWORD PTR [rip+0x2880f]        # 0x650340b0
    6500b8a1:	mov    r12d,0x1
    6500b8a7:	test   eax,eax
    6500b8a9:	je     0x6500b98b
    6500b8af:	mov    ebp,DWORD PTR [rsp+0x34]
    6500b8b3:	mov    rdx,rdi
    6500b8b6:	mov    eax,esi
    6500b8b8:	lock xadd DWORD PTR [rdi+0x10],eax
    6500b8bd:	add    eax,0xffffffff
    6500b8c0:	test   eax,eax
    6500b8c2:	jg     0x6500b8cd
    6500b8c4:	mov    rcx,QWORD PTR [rdi]
    6500b8c7:	mov    rax,QWORD PTR [rcx]
    6500b8ca:	call   QWORD PTR [rax+0x8]
    6500b8cd:	cmp    ebp,0x6
    6500b8d0:	jb     0x6500b9a5
    6500b8d6:	lea    r8,[rip+0x2d45b]        # 0x65038d38
    6500b8dd:	mov    edx,0xf
    6500b8e2:	lea    rcx,[rip+0x2d47f]        # 0x65038d68
    6500b8e9:	call   0x6500c660
    6500b8ee:	mov    r12,rax
    6500b8f1:	test   rax,rax
    6500b8f4:	jne    0x6500b8fb
    6500b8f6:	mov    r13d,ebx
    6500b8f9:	jmp    0x6500b90d
    6500b8fb:	xor    eax,eax
    6500b8fd:	mov    rcx,rsi
    6500b900:	mov    rdi,r12
    6500b903:	repnz scas ax,WORD PTR es:[rdi]
    6500b906:	not    rcx
    6500b909:	lea    r13,[rcx-0x1]
    6500b90d:	mov    r14,r12
    6500b910:	mov    rdi,QWORD PTR [rsp+0x20]
    6500b915:	sub    r14,rdi
    6500b918:	sar    r14,1
    6500b91b:	mov    r15d,DWORD PTR [rdi-0x10]
    6500b91f:	lea    ebp,[r15+r13*1]
    6500b923:	mov    edx,0x1
    6500b928:	sub    edx,DWORD PTR [rdi-0x8]
    6500b92b:	mov    eax,DWORD PTR [rdi-0xc]
    6500b92e:	sub    eax,ebp
    6500b930:	or     eax,edx
    6500b932:	jge    0x6500b945
    6500b934:	mov    edx,ebp
    6500b936:	lea    rcx,[rsp+0x20]
    6500b93b:	call   0x65002640
    6500b940:	mov    rdi,QWORD PTR [rsp+0x20]
    6500b945:	cmp    r14,r15
    6500b948:	ja     0x6500b94e
    6500b94a:	lea    r12,[rdi+r14*2]
    6500b94e:	movsxd rdx,r13d
    6500b951:	add    rdx,rdx
    6500b954:	lea    rcx,[rdi+r15*2]
    6500b958:	mov    r9,rdx
    6500b95b:	mov    r8,r12
    6500b95e:	call   0x6501d7b0
    6500b963:	test   ebp,ebp
    6500b965:	js     0x6500b980
    6500b967:	cmp    ebp,DWORD PTR [rdi-0xc]
    6500b96a:	jg     0x6500b980
    6500b96c:	mov    DWORD PTR [rdi-0x10],ebp
    6500b96f:	movsxd rax,ebp
    6500b972:	mov    WORD PTR [rdi+rax*2],0x0
    6500b978:	mov    r12d,0x1
    6500b97e:	jmp    0x6500b9a5
    6500b980:	mov    ecx,0x80070057
    6500b985:	call   0x65001050
    6500b98a:	int3   
    6500b98b:	mov    rdx,rdi
    6500b98e:	mov    eax,esi
    6500b990:	lock xadd DWORD PTR [rdi+0x10],eax
    6500b995:	add    eax,0xffffffff
    6500b998:	test   eax,eax
    6500b99a:	jg     0x6500b9a5
    6500b99c:	mov    rcx,QWORD PTR [rdi]
    6500b99f:	mov    rax,QWORD PTR [rcx]
    6500b9a2:	call   QWORD PTR [rax+0x8]
    6500b9a5:	xor    eax,eax
    6500b9a7:	lock cmpxchg DWORD PTR [rip+0x3c3f0],r12d        # 0x65047da0
    6500b9b0:	jne    0x6500ba19
    6500b9b2:	lea    r8,[rip+0x2dfbf]        # 0x65039978
    6500b9b9:	mov    edx,0x34
    6500b9be:	lea    rcx,[rip+0x2dff3]        # 0x650399b8
    6500b9c5:	call   0x6500bcb0
    6500b9ca:	mov    rdi,rax
    6500b9cd:	lea    r8,[rip+0x2e01c]        # 0x650399f0
    6500b9d4:	mov    edx,0x8
    6500b9d9:	lea    rcx,[rip+0x2de98]        # 0x65039878
    6500b9e0:	call   0x6500c660
    6500b9e5:	mov    rcx,rax
    6500b9e8:	call   QWORD PTR [rip+0x28712]        # 0x65034100
    6500b9ee:	add    DWORD PTR [rip+0x38f53],0x1        # 0x65044948
    6500b9f5:	test   rax,rax
    6500b9f8:	je     0x6500ba10
    6500b9fa:	mov    rdx,rdi
    6500b9fd:	mov    rcx,rax
    6500ba00:	call   QWORD PTR [rip+0x28702]        # 0x65034108
    6500ba06:	mov    rbx,rax
    6500ba09:	add    DWORD PTR [rip+0x38f3c],0x1        # 0x6504494c
    6500ba10:	mov    QWORD PTR [rip+0x3c4c1],rbx        # 0x65047ed8
    6500ba17:	jmp    0x6500ba20
    6500ba19:	mov    rbx,QWORD PTR [rip+0x3c4b8]        # 0x65047ed8
    6500ba20:	xor    r9d,r9d
    6500ba23:	lea    r8,[rip+0x3c40e]        # 0x65047e38
    6500ba2a:	mov    edx,r12d
    6500ba2d:	mov    rdi,QWORD PTR [rsp+0x20]
    6500ba32:	mov    rcx,rdi
    6500ba35:	call   rbx
    6500ba37:	nop
    6500ba38:	lea    rdx,[rdi-0x18]
    6500ba3c:	lock xadd DWORD PTR [rdx+0x10],esi
    6500ba41:	add    esi,0xffffffff
    6500ba44:	test   esi,esi
    6500ba46:	jg     0x6500ba51
    6500ba48:	mov    rcx,QWORD PTR [rdx]
    6500ba4b:	mov    rax,QWORD PTR [rcx]
    6500ba4e:	call   QWORD PTR [rax+0x8]
    6500ba51:	lea    rax,[rip+0x3c3d8]        # 0x65047e30
    6500ba58:	mov    rcx,QWORD PTR [rsp+0x150]
    6500ba60:	xor    rcx,rsp
    6500ba63:	call   0x6501e650
    6500ba68:	lea    r11,[rsp+0x160]
    6500ba70:	mov    rbx,QWORD PTR [r11+0x30]
    6500ba74:	mov    rbp,QWORD PTR [r11+0x38]
    6500ba78:	mov    rsi,QWORD PTR [r11+0x40]
    6500ba7c:	mov    rsp,r11
    6500ba7f:	pop    r15
    6500ba81:	pop    r14
    6500ba83:	pop    r13
    6500ba85:	pop    r12
    6500ba87:	pop    rdi
    6500ba88:	ret    
    6500ba89:	int3   
    6500ba8a:	int3   
    6500ba8b:	int3   
    6500ba8c:	int3   
    6500ba8d:	int3   
    6500ba8e:	int3   
    6500ba8f:	int3   
    6500ba90:	rex push rbp
    6500ba92:	sub    rsp,0x20
    6500ba96:	mov    rbp,rdx
    6500ba99:	lea    rcx,[rbp+0x20]
    6500ba9d:	call   0x65002100
    6500baa2:	add    rsp,0x20
    6500baa6:	pop    rbp
    6500baa7:	ret    
    6500baa8:	int3   
    6500baa9:	int3   
    6500baaa:	int3   
    6500baab:	int3   
    6500baac:	int3   
    6500baad:	int3   
    6500baae:	int3   
    6500baaf:	int3   
    6500bab0:	rex push rbp
    6500bab2:	sub    rsp,0x20
    6500bab6:	mov    rbp,rdx
    6500bab9:	lea    rcx,[rbp+0x20]
    6500babd:	call   0x65001cb0
    6500bac2:	add    rsp,0x20
    6500bac6:	pop    rbp
    6500bac7:	ret    
    6500bac8:	int3   
    6500bac9:	int3   
    6500baca:	int3   
    6500bacb:	int3   
    6500bacc:	int3   
    6500bacd:	int3   
    6500bace:	int3   
    6500bacf:	int3   
    6500bad0:	mov    QWORD PTR [rsp+0x8],rbx
    6500bad5:	mov    QWORD PTR [rsp+0x10],rbp
    6500bada:	mov    QWORD PTR [rsp+0x18],rsi
    6500badf:	push   rdi
    6500bae0:	sub    rsp,0x20
    6500bae4:	mov    rdx,QWORD PTR [rdx]
    6500bae7:	mov    rbx,QWORD PTR [rcx]
    6500baea:	mov    rsi,rcx
    6500baed:	lea    rdi,[rdx-0x18]
    6500baf1:	sub    rbx,0x18
    6500baf5:	cmp    rdi,rbx
    6500baf8:	je     0x6500bba0
    6500bafe:	cmp    DWORD PTR [rbx+0x10],0x0
    6500bb02:	jl     0x6500bb94
    6500bb08:	mov    rcx,QWORD PTR [rdi]
    6500bb0b:	cmp    rcx,QWORD PTR [rbx]
    6500bb0e:	jne    0x6500bb94
    6500bb14:	mov    rax,QWORD PTR [rcx]
    6500bb17:	call   QWORD PTR [rax+0x20]
    6500bb1a:	cmp    DWORD PTR [rdi+0x10],0x0
    6500bb1e:	mov    rcx,rax
    6500bb21:	jl     0x6500bb32
    6500bb23:	cmp    rax,QWORD PTR [rdi]
    6500bb26:	jne    0x6500bb32
    6500bb28:	mov    rbp,rdi
    6500bb2b:	lock add DWORD PTR [rdi+0x10],0x1
    6500bb30:	jmp    0x6500bb70
    6500bb32:	mov    rax,QWORD PTR [rax]
    6500bb35:	mov    edx,DWORD PTR [rdi+0x8]
    6500bb38:	mov    r8d,0x2
    6500bb3e:	call   QWORD PTR [rax]
    6500bb40:	test   rax,rax
    6500bb43:	mov    rbp,rax
    6500bb46:	jne    0x6500bb4e
    6500bb48:	call   0x65002320
    6500bb4d:	int3   
    6500bb4e:	mov    eax,DWORD PTR [rdi+0x8]
    6500bb51:	lea    r8,[rdi+0x18]
    6500bb55:	lea    rcx,[rbp+0x18]
    6500bb59:	mov    DWORD PTR [rbp+0x8],eax
    6500bb5c:	mov    eax,DWORD PTR [rdi+0x8]
    6500bb5f:	add    eax,0x1
    6500bb62:	movsxd rdx,eax
    6500bb65:	add    rdx,rdx
    6500bb68:	mov    r9,rdx
    6500bb6b:	call   0x6501d7b0
    6500bb70:	or     eax,0xffffffff
    6500bb73:	lock xadd DWORD PTR [rbx+0x10],eax
    6500bb78:	add    eax,0xffffffff
    6500bb7b:	test   eax,eax
    6500bb7d:	jg     0x6500bb8b
    6500bb7f:	mov    rcx,QWORD PTR [rbx]
    6500bb82:	mov    rdx,rbx
    6500bb85:	mov    rax,QWORD PTR [rcx]
    6500bb88:	call   QWORD PTR [rax+0x8]
    6500bb8b:	lea    rax,[rbp+0x18]
    6500bb8f:	mov    QWORD PTR [rsi],rax
    6500bb92:	jmp    0x6500bba0
    6500bb94:	mov    r8d,DWORD PTR [rdx-0x10]
    6500bb98:	mov    rcx,rsi
    6500bb9b:	call   0x65003f90
    6500bba0:	mov    rbx,QWORD PTR [rsp+0x30]
    6500bba5:	mov    rbp,QWORD PTR [rsp+0x38]
    6500bbaa:	mov    rax,rsi
    6500bbad:	mov    rsi,QWORD PTR [rsp+0x40]
    6500bbb2:	add    rsp,0x20
    6500bbb6:	pop    rdi
    6500bbb7:	ret    
    6500bbb8:	int3   
    6500bbb9:	int3   
    6500bbba:	int3   
    6500bbbb:	int3   
    6500bbbc:	int3   
    6500bbbd:	int3   
    6500bbbe:	int3   
    6500bbbf:	int3   
    6500bbc0:	mov    QWORD PTR [rsp+0x10],rbx
    6500bbc5:	push   rdi
    6500bbc6:	sub    rsp,0x20
    6500bbca:	mov    rax,QWORD PTR [rcx]
    6500bbcd:	mov    rdi,rcx
    6500bbd0:	cmp    WORD PTR [rax],0x7b
    6500bbd4:	mov    rbx,rax
    6500bbd7:	jne    0x6500bbea
    6500bbd9:	data16 xchg ax,ax
    6500bbdc:	data16 data16 xchg ax,ax
    6500bbe0:	add    rbx,0x2
    6500bbe4:	cmp    WORD PTR [rbx],0x7b
    6500bbe8:	je     0x6500bbe0
    6500bbea:	cmp    rbx,rax
    6500bbed:	mov    QWORD PTR [rsp+0x30],rsi
    6500bbf2:	je     0x6500bc8e
    6500bbf8:	mov    edx,DWORD PTR [rax-0x10]
    6500bbfb:	sub    rbx,rax
    6500bbfe:	mov    ecx,0x1
    6500bc03:	sub    ecx,DWORD PTR [rax-0x8]
    6500bc06:	mov    eax,DWORD PTR [rax-0xc]
    6500bc09:	sar    rbx,1
    6500bc0c:	sub    eax,edx
    6500bc0e:	or     ecx,eax
    6500bc10:	jge    0x6500bc1a
    6500bc12:	mov    rcx,rdi
    6500bc15:	call   0x65002640
    6500bc1a:	mov    rcx,QWORD PTR [rdi]
    6500bc1d:	mov    esi,DWORD PTR [rcx-0x10]
    6500bc20:	sub    esi,ebx
    6500bc22:	lea    eax,[rsi+0x1]
    6500bc25:	movsxd rdx,eax
    6500bc28:	movsxd rax,ebx
    6500bc2b:	add    rdx,rdx
    6500bc2e:	lea    r8,[rcx+rax*2]
    6500bc32:	mov    r9,rdx
    6500bc35:	call   0x6501d880
    6500bc3a:	test   eax,eax
    6500bc3c:	je     0x6500bc73
    6500bc3e:	cmp    eax,0xc
    6500bc41:	je     0x6500bc68
    6500bc43:	cmp    eax,0x16
    6500bc46:	je     0x6500bc5d
    6500bc48:	cmp    eax,0x22
    6500bc4b:	je     0x6500bc5d
    6500bc4d:	cmp    eax,0x50
    6500bc50:	je     0x6500bc73
    6500bc52:	mov    ecx,0x80004005
    6500bc57:	call   0x65001050
    6500bc5c:	int3   
    6500bc5d:	mov    ecx,0x80070057
    6500bc62:	call   0x65001050
    6500bc67:	int3   
    6500bc68:	mov    ecx,0x8007000e
    6500bc6d:	call   0x65001050
    6500bc72:	int3   
    6500bc73:	test   esi,esi
    6500bc75:	js     0x6500bca1
    6500bc77:	mov    rax,QWORD PTR [rdi]
    6500bc7a:	cmp    esi,DWORD PTR [rax-0xc]
    6500bc7d:	jg     0x6500bca1
    6500bc7f:	mov    DWORD PTR [rax-0x10],esi
    6500bc82:	mov    rax,QWORD PTR [rdi]
    6500bc85:	movsxd rcx,esi
    6500bc88:	mov    WORD PTR [rax+rcx*2],0x0
    6500bc8e:	mov    rsi,QWORD PTR [rsp+0x30]
    6500bc93:	mov    rbx,QWORD PTR [rsp+0x38]
    6500bc98:	mov    rax,rdi
    6500bc9b:	add    rsp,0x20
    6500bc9f:	pop    rdi
    6500bca0:	ret    
    6500bca1:	mov    ecx,0x80070057
    6500bca6:	call   0x65001050
    6500bcab:	int3   
    6500bcac:	int3   
    6500bcad:	int3   
    6500bcae:	int3   
    6500bcaf:	int3   
    6500bcb0:	rex push rbp
    6500bcb2:	push   rsi
    6500bcb3:	push   rdi
    6500bcb4:	push   r12
    6500bcb6:	push   r13
    6500bcb8:	push   r14
    6500bcba:	push   r15
    6500bcbc:	sub    rsp,0x1c0
    6500bcc3:	mov    QWORD PTR [rsp+0x160],0xfffffffffffffffe
    6500bccf:	mov    QWORD PTR [rsp+0x210],rbx
    6500bcd7:	mov    rax,QWORD PTR [rip+0x37442]        # 0x65043120
    6500bcde:	xor    rax,rsp
    6500bce1:	mov    QWORD PTR [rsp+0x1b8],rax
    6500bce9:	mov    QWORD PTR [rsp+0x58],r8
    6500bcee:	mov    rbx,rdx
    6500bcf1:	mov    r15,rcx
    6500bcf4:	mov    rax,QWORD PTR [rip+0x3c035]        # 0x65047d30
    6500bcfb:	test   rax,rax
    6500bcfe:	jne    0x6500bd14
    6500bd00:	xor    r8d,r8d
    6500bd03:	xor    edx,edx
    6500bd05:	xor    ecx,ecx
    6500bd07:	call   QWORD PTR [rip+0x28393]        # 0x650340a0
    6500bd0d:	mov    QWORD PTR [rip+0x3c01c],rax        # 0x65047d30
    6500bd14:	or     edx,0xffffffff
    6500bd17:	mov    rcx,rax
    6500bd1a:	call   QWORD PTR [rip+0x28378]        # 0x65034098
    6500bd20:	test   eax,eax
    6500bd22:	je     0x6500bd2c
    6500bd24:	mov    rax,r15
    6500bd27:	jmp    0x6500c4d1
    6500bd2c:	mov    r12d,0xf
    6500bd32:	mov    QWORD PTR [rsp+0x188],r12
    6500bd3a:	xor    esi,esi
    6500bd3c:	mov    QWORD PTR [rsp+0x180],rsi
    6500bd44:	mov    BYTE PTR [rsp+0x170],sil
    6500bd4c:	cmp    rbx,0xfffffffffffffffe
    6500bd50:	jbe    0x6500bd67
    6500bd52:	call   0x6501d150
    6500bd57:	mov    r12,QWORD PTR [rsp+0x188]
    6500bd5f:	mov    rsi,QWORD PTR [rsp+0x180]
    6500bd67:	cmp    r12,rbx
    6500bd6a:	jae    0x6500bd91
    6500bd6c:	mov    r8,rsi
    6500bd6f:	mov    rdx,rbx
    6500bd72:	lea    rcx,[rsp+0x168]
    6500bd7a:	call   0x65002330
    6500bd7f:	mov    r12,QWORD PTR [rsp+0x188]
    6500bd87:	mov    rsi,QWORD PTR [rsp+0x180]
    6500bd8f:	jmp    0x6500bdc7
    6500bd91:	test   rbx,rbx
    6500bd94:	jne    0x6500bdc7
    6500bd96:	mov    QWORD PTR [rsp+0x180],rbx
    6500bd9e:	lea    rax,[rsp+0x170]
    6500bda6:	cmp    r12,0x10
    6500bdaa:	cmovae rax,QWORD PTR [rsp+0x170]
    6500bdb3:	mov    BYTE PTR [rax],bl
    6500bdb5:	mov    r12,QWORD PTR [rsp+0x188]
    6500bdbd:	mov    rsi,QWORD PTR [rsp+0x180]
    6500bdc5:	jmp    0x6500be25
    6500bdc7:	test   rbx,rbx
    6500bdca:	je     0x6500be25
    6500bdcc:	lea    rcx,[rsp+0x170]
    6500bdd4:	cmp    r12,0x10
    6500bdd8:	cmovae rcx,QWORD PTR [rsp+0x170]
    6500bde1:	mov    r9,rbx
    6500bde4:	mov    r8,r15
    6500bde7:	mov    rdx,r12
    6500bdea:	call   0x6501d7b0
    6500bdef:	mov    QWORD PTR [rsp+0x180],rbx
    6500bdf7:	lea    rax,[rsp+0x170]
    6500bdff:	cmp    QWORD PTR [rsp+0x188],0x10
    6500be08:	cmovae rax,QWORD PTR [rsp+0x170]
    6500be11:	mov    BYTE PTR [rbx+rax*1],0x0
    6500be15:	mov    r12,QWORD PTR [rsp+0x188]
    6500be1d:	mov    rsi,QWORD PTR [rsp+0x180]
    6500be25:	mov    ebp,DWORD PTR [rip+0x3bfc9]        # 0x65047df4
    6500be2b:	lea    rax,[rip+0x3bfc6]        # 0x65047df8
    6500be32:	test   bpl,0x1
    6500be36:	jne    0x6500bea2
    6500be38:	or     ebp,0x1
    6500be3b:	mov    DWORD PTR [rip+0x3bfb3],ebp        # 0x65047df4
    6500be41:	mov    rcx,rax
    6500be44:	call   0x650109e0
    6500be49:	mov    QWORD PTR [rip+0x3bfb0],rax        # 0x65047e00
    6500be50:	mov    BYTE PTR [rax+0x69],0x1
    6500be54:	mov    rax,QWORD PTR [rip+0x3bfa5]        # 0x65047e00
    6500be5b:	mov    QWORD PTR [rax+0x8],rax
    6500be5f:	mov    rax,QWORD PTR [rip+0x3bf9a]        # 0x65047e00
    6500be66:	mov    QWORD PTR [rax],rax
    6500be69:	mov    rax,QWORD PTR [rip+0x3bf90]        # 0x65047e00
    6500be70:	mov    QWORD PTR [rax+0x10],rax
    6500be74:	mov    QWORD PTR [rip+0x3bf89],0x0        # 0x65047e08
    6500be7f:	lea    rcx,[rip+0x276ca]        # 0x65033550
    6500be86:	call   0x6501e7f0
    6500be8b:	nop
    6500be8c:	mov    r12,QWORD PTR [rsp+0x188]
    6500be94:	mov    rsi,QWORD PTR [rsp+0x180]
    6500be9c:	mov    ebp,DWORD PTR [rip+0x3bf52]        # 0x65047df4
    6500bea2:	mov    r13,QWORD PTR [rip+0x3bf57]        # 0x65047e00
    6500bea9:	mov    rbx,QWORD PTR [r13+0x8]
    6500bead:	mov    r14,r13
    6500beb0:	mov    rax,QWORD PTR [rsp+0x170]
    6500beb8:	cmp    BYTE PTR [rbx+0x69],0x0
    6500bebc:	jne    0x6500bf2d
    6500bebe:	xchg   ax,ax
    6500bec0:	lea    rdx,[rsp+0x170]
    6500bec8:	cmp    r12,0x10
    6500becc:	cmovae rdx,rax
    6500bed0:	mov    rdi,QWORD PTR [rbx+0x30]
    6500bed4:	cmp    rdi,rdi
    6500bed7:	cmovb  rdi,rdi
    6500bedb:	cmp    QWORD PTR [rbx+0x38],0x10
    6500bee0:	jb     0x6500bee8
    6500bee2:	mov    rcx,QWORD PTR [rbx+0x20]
    6500bee6:	jmp    0x6500beec
    6500bee8:	lea    rcx,[rbx+0x20]
    6500beec:	mov    r8,rsi
    6500beef:	cmp    rdi,rsi
    6500bef2:	cmovb  r8,rdi
    6500bef6:	call   0x6501d6e0
    6500befb:	movsxd rcx,eax
    6500befe:	test   eax,eax
    6500bf00:	jne    0x6500bf0f
    6500bf02:	cmp    rdi,rsi
    6500bf05:	jb     0x6500bf1b
    6500bf07:	cmp    rdi,rsi
    6500bf0a:	setne  al
    6500bf0d:	mov    ecx,eax
    6500bf0f:	test   ecx,ecx
    6500bf11:	js     0x6500bf1b
    6500bf13:	mov    r14,rbx
    6500bf16:	mov    rbx,QWORD PTR [rbx]
    6500bf19:	jmp    0x6500bf1f
    6500bf1b:	mov    rbx,QWORD PTR [rbx+0x10]
    6500bf1f:	cmp    BYTE PTR [rbx+0x69],0x0
    6500bf23:	mov    rax,QWORD PTR [rsp+0x170]
    6500bf2b:	je     0x6500bec0
    6500bf2d:	mov    QWORD PTR [rsp+0x68],r14
    6500bf32:	lea    rcx,[rip+0x3bebf]        # 0x65047df8
    6500bf39:	mov    QWORD PTR [rsp+0x60],rcx
    6500bf3e:	cmp    r14,r13
    6500bf41:	je     0x6500bf9d
    6500bf43:	mov    rbx,QWORD PTR [r14+0x30]
    6500bf47:	cmp    QWORD PTR [r14+0x38],0x10
    6500bf4c:	jb     0x6500bf54
    6500bf4e:	mov    rdx,QWORD PTR [r14+0x20]
    6500bf52:	jmp    0x6500bf58
    6500bf54:	lea    rdx,[r14+0x20]
    6500bf58:	lea    rcx,[rsp+0x170]
    6500bf60:	cmp    r12,0x10
    6500bf64:	cmovae rcx,rax
    6500bf68:	mov    r8,rbx
    6500bf6b:	cmp    rsi,rbx
    6500bf6e:	cmovb  r8,rsi
    6500bf72:	call   0x6501d6e0
    6500bf77:	movsxd rcx,eax
    6500bf7a:	test   eax,eax
    6500bf7c:	jne    0x6500bf8b
    6500bf7e:	cmp    rsi,rbx
    6500bf81:	jb     0x6500bf9d
    6500bf83:	cmp    rsi,rbx
    6500bf86:	setne  al
    6500bf89:	mov    ecx,eax
    6500bf8b:	test   ecx,ecx
    6500bf8d:	js     0x6500bf9d
    6500bf8f:	lea    rcx,[rsp+0x60]
    6500bf94:	lea    r14,[rip+0x3be5d]        # 0x65047df8
    6500bf9b:	jmp    0x6500bfb3
    6500bf9d:	mov    QWORD PTR [rsp+0x38],r13
    6500bfa2:	lea    r14,[rip+0x3be4f]        # 0x65047df8
    6500bfa9:	mov    QWORD PTR [rsp+0x30],r14
    6500bfae:	lea    rcx,[rsp+0x30]
    6500bfb3:	lea    rdx,[rsp+0x20]
    6500bfb8:	mov    rax,QWORD PTR [rcx]
    6500bfbb:	mov    QWORD PTR [rdx],rax
    6500bfbe:	mov    rax,QWORD PTR [rcx+0x8]
    6500bfc2:	mov    QWORD PTR [rdx+0x8],rax
    6500bfc6:	test   bpl,0x1
    6500bfca:	jne    0x6500c02e
    6500bfcc:	or     ebp,0x1
    6500bfcf:	mov    DWORD PTR [rip+0x3be1f],ebp        # 0x65047df4
    6500bfd5:	mov    rcx,r14
    6500bfd8:	call   0x650109e0
    6500bfdd:	mov    QWORD PTR [rip+0x3be1c],rax        # 0x65047e00
    6500bfe4:	mov    BYTE PTR [rax+0x69],0x1
    6500bfe8:	mov    rax,QWORD PTR [rip+0x3be11]        # 0x65047e00
    6500bfef:	mov    QWORD PTR [rax+0x8],rax
    6500bff3:	mov    rax,QWORD PTR [rip+0x3be06]        # 0x65047e00
    6500bffa:	mov    QWORD PTR [rax],rax
    6500bffd:	mov    rax,QWORD PTR [rip+0x3bdfc]        # 0x65047e00
    6500c004:	mov    QWORD PTR [rax+0x10],rax
    6500c008:	xor    r12d,r12d
    6500c00b:	mov    QWORD PTR [rip+0x3bdf6],r12        # 0x65047e08
    6500c012:	lea    rcx,[rip+0x27537]        # 0x65033550
    6500c019:	call   0x6501e7f0
    6500c01e:	nop
    6500c01f:	mov    ebp,DWORD PTR [rip+0x3bdcf]        # 0x65047df4
    6500c025:	mov    r13,QWORD PTR [rip+0x3bdd4]        # 0x65047e00
    6500c02c:	jmp    0x6500c031
    6500c02e:	xor    r12d,r12d
    6500c031:	mov    rbx,r13
    6500c034:	mov    rsi,QWORD PTR [rsp+0x20]
    6500c039:	test   rsi,rsi
    6500c03c:	je     0x6500c043
    6500c03e:	cmp    rsi,r14
    6500c041:	je     0x6500c055
    6500c043:	call   0x6501dad0
    6500c048:	mov    ebp,DWORD PTR [rip+0x3bda6]        # 0x65047df4
    6500c04e:	mov    r13,QWORD PTR [rip+0x3bdab]        # 0x65047e00
    6500c055:	mov    rdi,QWORD PTR [rsp+0x28]
    6500c05a:	cmp    rdi,rbx
    6500c05d:	jne    0x6500c31c
    6500c063:	mov    QWORD PTR [rsp+0x50],0xf
    6500c06c:	mov    QWORD PTR [rsp+0x48],r12
    6500c071:	mov    BYTE PTR [rsp+0x38],0x0
    6500c076:	or     r9,0xffffffffffffffff
    6500c07a:	xor    r8d,r8d
    6500c07d:	lea    rdx,[rsp+0x168]
    6500c085:	lea    rcx,[rsp+0x30]
    6500c08a:	call   0x65001e20
    6500c08f:	lea    rdx,[rsp+0x30]
    6500c094:	lea    rcx,[rsp+0x190]
    6500c09c:	call   0x6500d590
    6500c0a1:	nop
    6500c0a2:	lea    rax,[rsp+0xc0]
    6500c0aa:	mov    QWORD PTR [rsp+0x60],rax
    6500c0af:	mov    QWORD PTR [rsp+0xe0],0xf
    6500c0bb:	mov    QWORD PTR [rsp+0xd8],r12
    6500c0c3:	mov    BYTE PTR [rsp+0xc8],0x0
    6500c0cb:	or     r9,0xffffffffffffffff
    6500c0cf:	xor    r8d,r8d
    6500c0d2:	lea    rdx,[rsp+0x190]
    6500c0da:	lea    rcx,[rsp+0xc0]
    6500c0e2:	call   0x65001e20
    6500c0e7:	nop
    6500c0e8:	mov    QWORD PTR [rsp+0x158],0xf
    6500c0f4:	mov    QWORD PTR [rsp+0x150],r12
    6500c0fc:	mov    BYTE PTR [rsp+0x140],0x0
    6500c104:	or     r9,0xffffffffffffffff
    6500c108:	xor    r8d,r8d
    6500c10b:	lea    rdx,[rsp+0x168]
    6500c113:	lea    rcx,[rsp+0x138]
    6500c11b:	call   0x65001e20
    6500c120:	nop
    6500c121:	lea    r8,[rsp+0xc0]
    6500c129:	lea    rdx,[rsp+0x138]
    6500c131:	lea    rcx,[rsp+0xe8]
    6500c139:	call   0x650114d0
    6500c13e:	mov    rbx,rax
    6500c141:	mov    QWORD PTR [rsp+0x90],0xf
    6500c14d:	mov    QWORD PTR [rsp+0x88],r12
    6500c155:	mov    BYTE PTR [rsp+0x78],0x0
    6500c15a:	or     r9,0xffffffffffffffff
    6500c15e:	xor    r8d,r8d
    6500c161:	mov    rdx,rax
    6500c164:	lea    rcx,[rsp+0x70]
    6500c169:	call   0x65001e20
    6500c16e:	nop
    6500c16f:	lea    rdx,[rbx+0x28]
    6500c173:	mov    QWORD PTR [rsp+0xb8],0xf
    6500c17f:	mov    QWORD PTR [rsp+0xb0],r12
    6500c187:	mov    BYTE PTR [rsp+0xa0],0x0
    6500c18f:	or     r9,0xffffffffffffffff
    6500c193:	xor    r8d,r8d
    6500c196:	lea    rcx,[rsp+0x98]
    6500c19e:	call   0x65001e20
    6500c1a3:	nop
    6500c1a4:	mov    eax,DWORD PTR [rip+0x3bc4a]        # 0x65047df4
    6500c1aa:	test   al,0x1
    6500c1ac:	jne    0x6500c1fe
    6500c1ae:	or     eax,0x1
    6500c1b1:	mov    DWORD PTR [rip+0x3bc3d],eax        # 0x65047df4
    6500c1b7:	mov    rcx,r14
    6500c1ba:	call   0x650109e0
    6500c1bf:	mov    QWORD PTR [rip+0x3bc3a],rax        # 0x65047e00
    6500c1c6:	mov    BYTE PTR [rax+0x69],0x1
    6500c1ca:	mov    rax,QWORD PTR [rip+0x3bc2f]        # 0x65047e00
    6500c1d1:	mov    QWORD PTR [rax+0x8],rax
    6500c1d5:	mov    rax,QWORD PTR [rip+0x3bc24]        # 0x65047e00
    6500c1dc:	mov    QWORD PTR [rax],rax
    6500c1df:	mov    rax,QWORD PTR [rip+0x3bc1a]        # 0x65047e00
    6500c1e6:	mov    QWORD PTR [rax+0x10],rax
    6500c1ea:	mov    QWORD PTR [rip+0x3bc17],r12        # 0x65047e08
    6500c1f1:	lea    rcx,[rip+0x27358]        # 0x65033550
    6500c1f8:	call   0x6501e7f0
    6500c1fd:	nop
    6500c1fe:	lea    r8,[rsp+0x70]
    6500c203:	lea    rdx,[rsp+0x30]
    6500c208:	mov    rcx,r14
    6500c20b:	call   0x6500dfd0
    6500c210:	nop
    6500c211:	cmp    QWORD PTR [rsp+0xb8],0x10
    6500c21a:	jb     0x6500c229
    6500c21c:	mov    rcx,QWORD PTR [rsp+0xa0]
    6500c224:	call   0x6501d300
    6500c229:	mov    QWORD PTR [rsp+0xb8],0xf
    6500c235:	mov    QWORD PTR [rsp+0xb0],r12
    6500c23d:	mov    BYTE PTR [rsp+0xa0],0x0
    6500c245:	cmp    QWORD PTR [rsp+0x90],0x10
    6500c24e:	jb     0x6500c25a
    6500c250:	mov    rcx,QWORD PTR [rsp+0x78]
    6500c255:	call   0x6501d300
    6500c25a:	mov    QWORD PTR [rsp+0x90],0xf
    6500c266:	mov    QWORD PTR [rsp+0x88],r12
    6500c26e:	mov    BYTE PTR [rsp+0x78],0x0
    6500c273:	cmp    QWORD PTR [rsp+0x130],0x10
    6500c27c:	jb     0x6500c28b
    6500c27e:	mov    rcx,QWORD PTR [rsp+0x118]
    6500c286:	call   0x6501d300
    6500c28b:	mov    QWORD PTR [rsp+0x130],0xf
    6500c297:	mov    QWORD PTR [rsp+0x128],r12
    6500c29f:	mov    BYTE PTR [rsp+0x118],0x0
    6500c2a7:	cmp    QWORD PTR [rsp+0x108],0x10
    6500c2b0:	jb     0x6500c2bf
    6500c2b2:	mov    rcx,QWORD PTR [rsp+0xf0]
    6500c2ba:	call   0x6501d300
    6500c2bf:	mov    QWORD PTR [rsp+0x108],0xf
    6500c2cb:	mov    QWORD PTR [rsp+0x100],r12
    6500c2d3:	mov    BYTE PTR [rsp+0xf0],0x0
    6500c2db:	cmp    QWORD PTR [rsp+0x1b0],0x10
    6500c2e4:	jb     0x6500c2f3
    6500c2e6:	mov    rcx,QWORD PTR [rsp+0x198]
    6500c2ee:	call   0x6501d300
    6500c2f3:	mov    QWORD PTR [rsp+0x1b0],0xf
    6500c2ff:	mov    QWORD PTR [rsp+0x1a8],r12
    6500c307:	mov    BYTE PTR [rsp+0x198],0x0
    6500c30f:	mov    ebp,DWORD PTR [rip+0x3badf]        # 0x65047df4
    6500c315:	mov    r13,QWORD PTR [rip+0x3bae4]        # 0x65047e00
    6500c31c:	mov    rax,QWORD PTR [rsp+0x58]
    6500c321:	movzx  eax,BYTE PTR [rax]
    6500c324:	cmp    eax,0x100
    6500c329:	jge    0x6500c3c4
    6500c32f:	test   bpl,0x1
    6500c333:	jne    0x6500c385
    6500c335:	or     ebp,0x1
    6500c338:	mov    DWORD PTR [rip+0x3bab6],ebp        # 0x65047df4
    6500c33e:	mov    rcx,r14
    6500c341:	call   0x650109e0
    6500c346:	mov    QWORD PTR [rip+0x3bab3],rax        # 0x65047e00
    6500c34d:	mov    BYTE PTR [rax+0x69],0x1
    6500c351:	mov    rax,QWORD PTR [rip+0x3baa8]        # 0x65047e00
    6500c358:	mov    QWORD PTR [rax+0x8],rax
    6500c35c:	mov    rax,QWORD PTR [rip+0x3ba9d]        # 0x65047e00
    6500c363:	mov    QWORD PTR [rax],rax
    6500c366:	mov    rax,QWORD PTR [rip+0x3ba93]        # 0x65047e00
    6500c36d:	mov    QWORD PTR [rax+0x10],rax
    6500c371:	mov    QWORD PTR [rip+0x3ba90],r12        # 0x65047e08
    6500c378:	lea    rcx,[rip+0x271d1]        # 0x65033550
    6500c37f:	call   0x6501e7f0
    6500c384:	nop
    6500c385:	lea    r8,[rsp+0x168]
    6500c38d:	lea    rdx,[rsp+0x30]
    6500c392:	mov    rcx,r14
    6500c395:	call   0x6500e220
    6500c39a:	lea    rdx,[rsp+0x20]
    6500c39f:	mov    rcx,QWORD PTR [rax]
    6500c3a2:	mov    QWORD PTR [rdx],rcx
    6500c3a5:	mov    rax,QWORD PTR [rax+0x8]
    6500c3a9:	mov    QWORD PTR [rdx+0x8],rax
    6500c3ad:	mov    rdi,QWORD PTR [rsp+0x28]
    6500c3b2:	mov    rsi,QWORD PTR [rsp+0x20]
    6500c3b7:	mov    ebp,DWORD PTR [rip+0x3ba37]        # 0x65047df4
    6500c3bd:	mov    r13,QWORD PTR [rip+0x3ba3c]        # 0x65047e00
    6500c3c4:	test   bpl,0x1
    6500c3c8:	jne    0x6500c421
    6500c3ca:	or     ebp,0x1
    6500c3cd:	mov    DWORD PTR [rip+0x3ba21],ebp        # 0x65047df4
    6500c3d3:	mov    rcx,r14
    6500c3d6:	call   0x650109e0
    6500c3db:	mov    QWORD PTR [rip+0x3ba1e],rax        # 0x65047e00
    6500c3e2:	mov    BYTE PTR [rax+0x69],0x1
    6500c3e6:	mov    rax,QWORD PTR [rip+0x3ba13]        # 0x65047e00
    6500c3ed:	mov    QWORD PTR [rax+0x8],rax
    6500c3f1:	mov    rax,QWORD PTR [rip+0x3ba08]        # 0x65047e00
    6500c3f8:	mov    QWORD PTR [rax],rax
    6500c3fb:	mov    rax,QWORD PTR [rip+0x3b9fe]        # 0x65047e00
    6500c402:	mov    QWORD PTR [rax+0x10],rax
    6500c406:	mov    QWORD PTR [rip+0x3b9fb],r12        # 0x65047e08
    6500c40d:	lea    rcx,[rip+0x2713c]        # 0x65033550
    6500c414:	call   0x6501e7f0
    6500c419:	nop
    6500c41a:	mov    r13,QWORD PTR [rip+0x3b9df]        # 0x65047e00
    6500c421:	test   rsi,rsi
    6500c424:	je     0x6500c42b
    6500c426:	cmp    rsi,r14
    6500c429:	je     0x6500c430
    6500c42b:	call   0x6501dad0
    6500c430:	cmp    rdi,r13
    6500c433:	je     0x6500c45b
    6500c435:	test   rsi,rsi
    6500c438:	jne    0x6500c43f
    6500c43a:	call   0x6501dad0
    6500c43f:	cmp    rdi,QWORD PTR [rsi+0x8]
    6500c443:	jne    0x6500c44a
    6500c445:	call   0x6501dad0
    6500c44a:	cmp    QWORD PTR [rdi+0x60],0x10
    6500c44f:	jb     0x6500c457
    6500c451:	mov    r15,QWORD PTR [rdi+0x48]
    6500c455:	jmp    0x6500c45b
    6500c457:	lea    r15,[rdi+0x48]
    6500c45b:	mov    rax,QWORD PTR [rip+0x3969e]        # 0x65045b00
    6500c462:	test   rax,rax
    6500c465:	jne    0x6500c48b
    6500c467:	lea    rcx,[rip+0x2ab52]        # 0x65036fc0
    6500c46e:	call   QWORD PTR [rip+0x27c54]        # 0x650340c8
    6500c474:	mov    rcx,rax
    6500c477:	lea    rdx,[rip+0x2ab32]        # 0x65036fb0
    6500c47e:	call   QWORD PTR [rip+0x27c84]        # 0x65034108
    6500c484:	mov    QWORD PTR [rip+0x39675],rax        # 0x65045b00
    6500c48b:	mov    rcx,QWORD PTR [rip+0x3b89e]        # 0x65047d30
    6500c492:	test   rcx,rcx
    6500c495:	jne    0x6500c4b3
    6500c497:	xor    r8d,r8d
    6500c49a:	xor    edx,edx
    6500c49c:	call   QWORD PTR [rip+0x27bfe]        # 0x650340a0
    6500c4a2:	mov    rcx,rax
    6500c4a5:	mov    QWORD PTR [rip+0x3b884],rax        # 0x65047d30
    6500c4ac:	mov    rax,QWORD PTR [rip+0x3964d]        # 0x65045b00
    6500c4b3:	call   rax
    6500c4b5:	nop
    6500c4b6:	cmp    QWORD PTR [rsp+0x188],0x10
    6500c4bf:	jb     0x6500c4ce
    6500c4c1:	mov    rcx,QWORD PTR [rsp+0x170]
    6500c4c9:	call   0x6501d300
    6500c4ce:	mov    rax,r15
    6500c4d1:	mov    rcx,QWORD PTR [rsp+0x1b8]
    6500c4d9:	xor    rcx,rsp
    6500c4dc:	call   0x6501e650
    6500c4e1:	mov    rbx,QWORD PTR [rsp+0x210]
    6500c4e9:	add    rsp,0x1c0
    6500c4f0:	pop    r15
    6500c4f2:	pop    r14
    6500c4f4:	pop    r13
    6500c4f6:	pop    r12
    6500c4f8:	pop    rdi
    6500c4f9:	pop    rsi
    6500c4fa:	pop    rbp
    6500c4fb:	ret    
    6500c4fc:	int3   
    6500c4fd:	int3   
    6500c4fe:	int3   
    6500c4ff:	int3   
    6500c500:	rex push rbp
    6500c502:	sub    rsp,0x20
    6500c506:	mov    rbp,rdx
    6500c509:	lea    rcx,[rbp+0x168]
    6500c510:	call   0x65001c70
    6500c515:	add    rsp,0x20
    6500c519:	pop    rbp
    6500c51a:	ret    
    6500c51b:	int3   
    6500c51c:	int3   
    6500c51d:	int3   
    6500c51e:	int3   
    6500c51f:	int3   
    6500c520:	rex push rbp
    6500c522:	mov    rbp,rdx
    6500c525:	mov    eax,DWORD PTR [rip+0x3b8c9]        # 0x65047df4
    6500c52b:	and    eax,0xfffffffe
    6500c52e:	mov    DWORD PTR [rip+0x3b8c0],eax        # 0x65047df4
    6500c534:	pop    rbp
    6500c535:	ret    
    6500c536:	int3   
    6500c537:	int3   
    6500c538:	int3   
    6500c539:	int3   
    6500c53a:	int3   
    6500c53b:	int3   
    6500c53c:	int3   
    6500c53d:	int3   
    6500c53e:	int3   
    6500c53f:	int3   
    6500c540:	rex push rbp
    6500c542:	mov    rbp,rdx
    6500c545:	mov    eax,DWORD PTR [rip+0x3b8a9]        # 0x65047df4
    6500c54b:	and    eax,0xfffffffe
    6500c54e:	mov    DWORD PTR [rip+0x3b8a0],eax        # 0x65047df4
    6500c554:	pop    rbp
    6500c555:	ret    
    6500c556:	int3   
    6500c557:	int3   
    6500c558:	int3   
    6500c559:	int3   
    6500c55a:	int3   
    6500c55b:	int3   
    6500c55c:	int3   
    6500c55d:	int3   
    6500c55e:	int3   
    6500c55f:	int3   
    6500c560:	rex push rbp
    6500c562:	sub    rsp,0x20
    6500c566:	mov    rbp,rdx
    6500c569:	lea    rcx,[rbp+0x190]
    6500c570:	call   0x65001c70
    6500c575:	add    rsp,0x20
    6500c579:	pop    rbp
    6500c57a:	ret    
    6500c57b:	int3   
    6500c57c:	int3   
    6500c57d:	int3   
    6500c57e:	int3   
    6500c57f:	int3   
    6500c580:	rex push rbp
    6500c582:	sub    rsp,0x20
    6500c586:	mov    rbp,rdx
    6500c589:	mov    rcx,QWORD PTR [rbp+0x60]
    6500c58d:	call   0x65001c70
    6500c592:	add    rsp,0x20
    6500c596:	pop    rbp
    6500c597:	ret    
    6500c598:	int3   
    6500c599:	int3   
    6500c59a:	int3   
    6500c59b:	int3   
    6500c59c:	int3   
    6500c59d:	int3   
    6500c59e:	int3   
    6500c59f:	int3   
    6500c5a0:	rex push rbp
    6500c5a2:	sub    rsp,0x20
    6500c5a6:	mov    rbp,rdx
    6500c5a9:	lea    rcx,[rbp+0xe8]
    6500c5b0:	call   0x6500d410
    6500c5b5:	add    rsp,0x20
    6500c5b9:	pop    rbp
    6500c5ba:	ret    
    6500c5bb:	int3   
    6500c5bc:	int3   
    6500c5bd:	int3   
    6500c5be:	int3   
    6500c5bf:	int3   
    6500c5c0:	rex push rbp
    6500c5c2:	sub    rsp,0x20
    6500c5c6:	mov    rbp,rdx
    6500c5c9:	lea    rcx,[rbp+0x70]
    6500c5cd:	call   0x65001c70
    6500c5d2:	add    rsp,0x20
    6500c5d6:	pop    rbp
    6500c5d7:	ret    
    6500c5d8:	int3   
    6500c5d9:	int3   
    6500c5da:	int3   
    6500c5db:	int3   
    6500c5dc:	int3   
    6500c5dd:	int3   
    6500c5de:	int3   
    6500c5df:	int3   
    6500c5e0:	rex push rbp
    6500c5e2:	sub    rsp,0x20
    6500c5e6:	mov    rbp,rdx
    6500c5e9:	lea    rcx,[rbp+0x70]
    6500c5ed:	call   0x6500d470
    6500c5f2:	add    rsp,0x20
    6500c5f6:	pop    rbp
    6500c5f7:	ret    
    6500c5f8:	int3   
    6500c5f9:	int3   
    6500c5fa:	int3   
    6500c5fb:	int3   
    6500c5fc:	int3   
    6500c5fd:	int3   
    6500c5fe:	int3   
    6500c5ff:	int3   
    6500c600:	rex push rbp
    6500c602:	mov    rbp,rdx
    6500c605:	mov    eax,DWORD PTR [rip+0x3b7e9]        # 0x65047df4
    6500c60b:	and    eax,0xfffffffe
    6500c60e:	mov    DWORD PTR [rip+0x3b7e0],eax        # 0x65047df4
    6500c614:	pop    rbp
    6500c615:	ret    
    6500c616:	int3   
    6500c617:	int3   
    6500c618:	int3   
    6500c619:	int3   
    6500c61a:	int3   
    6500c61b:	int3   
    6500c61c:	int3   
    6500c61d:	int3   
    6500c61e:	int3   
    6500c61f:	int3   
    6500c620:	rex push rbp
    6500c622:	mov    rbp,rdx
    6500c625:	mov    eax,DWORD PTR [rip+0x3b7c9]        # 0x65047df4
    6500c62b:	and    eax,0xfffffffe
    6500c62e:	mov    DWORD PTR [rip+0x3b7c0],eax        # 0x65047df4
    6500c634:	pop    rbp
    6500c635:	ret    
    6500c636:	int3   
    6500c637:	int3   
    6500c638:	int3   
    6500c639:	int3   
    6500c63a:	int3   
    6500c63b:	int3   
    6500c63c:	int3   
    6500c63d:	int3   
    6500c63e:	int3   
    6500c63f:	int3   
    6500c640:	rex push rbp
    6500c642:	mov    rbp,rdx
    6500c645:	mov    eax,DWORD PTR [rip+0x3b7a9]        # 0x65047df4
    6500c64b:	and    eax,0xfffffffe
    6500c64e:	mov    DWORD PTR [rip+0x3b7a0],eax        # 0x65047df4
    6500c654:	pop    rbp
    6500c655:	ret    
    6500c656:	int3   
    6500c657:	int3   
    6500c658:	int3   
    6500c659:	int3   
    6500c65a:	int3   
    6500c65b:	int3   
    6500c65c:	int3   
    6500c65d:	int3   
    6500c65e:	int3   
    6500c65f:	int3   
    6500c660:	mov    rax,rsp
    6500c663:	push   rsi
    6500c664:	push   rdi
    6500c665:	push   r12
    6500c667:	push   r13
    6500c669:	push   r14
    6500c66b:	sub    rsp,0x1c0
    6500c672:	mov    QWORD PTR [rsp+0xf8],0xfffffffffffffffe
    6500c67e:	mov    QWORD PTR [rax+0x18],rbx
    6500c682:	mov    QWORD PTR [rax+0x20],rbp
    6500c686:	mov    rax,QWORD PTR [rip+0x36a93]        # 0x65043120
    6500c68d:	xor    rax,rsp
    6500c690:	mov    QWORD PTR [rsp+0x1b8],rax
    6500c698:	mov    r12,r8
    6500c69b:	mov    rdi,rdx
    6500c69e:	mov    rbp,rcx
    6500c6a1:	mov    rax,QWORD PTR [rip+0x3b688]        # 0x65047d30
    6500c6a8:	test   rax,rax
    6500c6ab:	jne    0x6500c6c1
    6500c6ad:	xor    r8d,r8d
    6500c6b0:	xor    edx,edx
    6500c6b2:	xor    ecx,ecx
    6500c6b4:	call   QWORD PTR [rip+0x279e6]        # 0x650340a0
    6500c6ba:	mov    QWORD PTR [rip+0x3b66f],rax        # 0x65047d30
    6500c6c1:	or     edx,0xffffffff
    6500c6c4:	mov    rcx,rax
    6500c6c7:	call   QWORD PTR [rip+0x279cb]        # 0x65034098
    6500c6cd:	test   eax,eax
    6500c6cf:	je     0x6500c6d9
    6500c6d1:	mov    rax,rbp
    6500c6d4:	jmp    0x6500cd2c
    6500c6d9:	mov    edx,0x7
    6500c6de:	mov    QWORD PTR [rsp+0x188],rdx
    6500c6e6:	xor    r13d,r13d
    6500c6e9:	mov    r8,r13
    6500c6ec:	mov    QWORD PTR [rsp+0x180],r13
    6500c6f4:	mov    WORD PTR [rsp+0x170],r8w
    6500c6fd:	movabs rax,0x7ffffffffffffffe
    6500c707:	cmp    rdi,rax
    6500c70a:	jbe    0x6500c721
    6500c70c:	call   0x6501d150
    6500c711:	mov    rdx,QWORD PTR [rsp+0x188]
    6500c719:	mov    r8,QWORD PTR [rsp+0x180]
    6500c721:	cmp    rdx,rdi
    6500c724:	jae    0x6500c740
    6500c726:	mov    rdx,rdi
    6500c729:	lea    rcx,[rsp+0x168]
    6500c731:	call   0x650100b0
    6500c736:	mov    rdx,QWORD PTR [rsp+0x188]
    6500c73e:	jmp    0x6500c768
    6500c740:	test   rdi,rdi
    6500c743:	jne    0x6500c768
    6500c745:	mov    QWORD PTR [rsp+0x180],r13
    6500c74d:	lea    rax,[rsp+0x170]
    6500c755:	cmp    rdx,0x8
    6500c759:	cmovae rax,QWORD PTR [rsp+0x170]
    6500c762:	mov    WORD PTR [rax],r13w
    6500c766:	jmp    0x6500c7bb
    6500c768:	test   rdi,rdi
    6500c76b:	je     0x6500c7bb
    6500c76d:	lea    rcx,[rsp+0x170]
    6500c775:	cmp    rdx,0x8
    6500c779:	cmovae rcx,QWORD PTR [rsp+0x170]
    6500c782:	lea    rbx,[rdi+rdi*1]
    6500c786:	add    rdx,rdx
    6500c789:	mov    r9,rbx
    6500c78c:	mov    r8,rbp
    6500c78f:	call   0x6501d7b0
    6500c794:	mov    QWORD PTR [rsp+0x180],rdi
    6500c79c:	lea    rax,[rsp+0x170]
    6500c7a4:	cmp    QWORD PTR [rsp+0x188],0x8
    6500c7ad:	cmovae rax,QWORD PTR [rsp+0x170]
    6500c7b6:	mov    WORD PTR [rax+rbx*1],r13w
    6500c7bb:	mov    eax,DWORD PTR [rip+0x3b667]        # 0x65047e28
    6500c7c1:	lea    r14,[rip+0x3b648]        # 0x65047e10
    6500c7c8:	test   al,0x1
    6500c7ca:	jne    0x6500c81c
    6500c7cc:	or     eax,0x1
    6500c7cf:	mov    DWORD PTR [rip+0x3b653],eax        # 0x65047e28
    6500c7d5:	mov    rcx,r14
    6500c7d8:	call   0x65011210
    6500c7dd:	mov    QWORD PTR [rip+0x3b634],rax        # 0x65047e18
    6500c7e4:	mov    BYTE PTR [rax+0x69],0x1
    6500c7e8:	mov    rax,QWORD PTR [rip+0x3b629]        # 0x65047e18
    6500c7ef:	mov    QWORD PTR [rax+0x8],rax
    6500c7f3:	mov    rax,QWORD PTR [rip+0x3b61e]        # 0x65047e18
    6500c7fa:	mov    QWORD PTR [rax],rax
    6500c7fd:	mov    rax,QWORD PTR [rip+0x3b614]        # 0x65047e18
    6500c804:	mov    QWORD PTR [rax+0x10],rax
    6500c808:	mov    QWORD PTR [rip+0x3b611],r13        # 0x65047e20
    6500c80f:	lea    rcx,[rip+0x26d2a]        # 0x65033540
    6500c816:	call   0x6501e7f0
    6500c81b:	nop
    6500c81c:	lea    r8,[rsp+0x168]
    6500c824:	lea    rdx,[rsp+0x20]
    6500c829:	mov    rcx,r14
    6500c82c:	call   0x6500e670
    6500c831:	mov    r11d,DWORD PTR [rip+0x3b5f0]        # 0x65047e28
    6500c838:	test   r11b,0x1
    6500c83c:	jne    0x6500c897
    6500c83e:	or     r11d,0x1
    6500c842:	mov    DWORD PTR [rip+0x3b5df],r11d        # 0x65047e28
    6500c849:	mov    rcx,r14
    6500c84c:	call   0x65011210
    6500c851:	mov    QWORD PTR [rip+0x3b5c0],rax        # 0x65047e18
    6500c858:	mov    BYTE PTR [rax+0x69],0x1
    6500c85c:	mov    rax,QWORD PTR [rip+0x3b5b5]        # 0x65047e18
    6500c863:	mov    QWORD PTR [rax+0x8],rax
    6500c867:	mov    rax,QWORD PTR [rip+0x3b5aa]        # 0x65047e18
    6500c86e:	mov    QWORD PTR [rax],rax
    6500c871:	mov    rax,QWORD PTR [rip+0x3b5a0]        # 0x65047e18
    6500c878:	mov    QWORD PTR [rax+0x10],rax
    6500c87c:	mov    QWORD PTR [rip+0x3b59d],r13        # 0x65047e20
    6500c883:	lea    rcx,[rip+0x26cb6]        # 0x65033540
    6500c88a:	call   0x6501e7f0
    6500c88f:	nop
    6500c890:	mov    r11d,DWORD PTR [rip+0x3b591]        # 0x65047e28
    6500c897:	mov    rbx,QWORD PTR [rip+0x3b57a]        # 0x65047e18
    6500c89e:	mov    rsi,QWORD PTR [rsp+0x20]
    6500c8a3:	test   rsi,rsi
    6500c8a6:	je     0x6500c8ad
    6500c8a8:	cmp    rsi,r14
    6500c8ab:	je     0x6500c8b9
    6500c8ad:	call   0x6501dad0
    6500c8b2:	mov    r11d,DWORD PTR [rip+0x3b56f]        # 0x65047e28
    6500c8b9:	mov    rdi,QWORD PTR [rsp+0x28]
    6500c8be:	cmp    rdi,rbx
    6500c8c1:	jne    0x6500cb79
    6500c8c7:	mov    QWORD PTR [rsp+0x120],0x7
    6500c8d3:	mov    QWORD PTR [rsp+0x118],r13
    6500c8db:	mov    WORD PTR [rsp+0x108],0x0
    6500c8e5:	or     r9,0xffffffffffffffff
    6500c8e9:	xor    r8d,r8d
    6500c8ec:	lea    rdx,[rsp+0x168]
    6500c8f4:	lea    rcx,[rsp+0x100]
    6500c8fc:	call   0x6500f550
    6500c901:	lea    rdx,[rsp+0x100]
    6500c909:	lea    rcx,[rsp+0x190]
    6500c911:	call   0x6500d6c0
    6500c916:	nop
    6500c917:	lea    rax,[rsp+0x80]
    6500c91f:	mov    QWORD PTR [rsp+0x150],rax
    6500c927:	mov    QWORD PTR [rsp+0xa0],0x7
    6500c933:	mov    QWORD PTR [rsp+0x98],r13
    6500c93b:	mov    WORD PTR [rsp+0x88],0x0
    6500c945:	or     r9,0xffffffffffffffff
    6500c949:	xor    r8d,r8d
    6500c94c:	lea    rdx,[rsp+0x190]
    6500c954:	lea    rcx,[rsp+0x80]
    6500c95c:	call   0x6500f550
    6500c961:	nop
    6500c962:	mov    QWORD PTR [rsp+0x148],0x7
    6500c96e:	mov    QWORD PTR [rsp+0x140],r13
    6500c976:	mov    WORD PTR [rsp+0x130],0x0
    6500c980:	or     r9,0xffffffffffffffff
    6500c984:	xor    r8d,r8d
    6500c987:	lea    rdx,[rsp+0x168]
    6500c98f:	lea    rcx,[rsp+0x128]
    6500c997:	call   0x6500f550
    6500c99c:	nop
    6500c99d:	lea    r8,[rsp+0x80]
    6500c9a5:	lea    rdx,[rsp+0x128]
    6500c9ad:	lea    rcx,[rsp+0xa8]
    6500c9b5:	call   0x65011620
    6500c9ba:	mov    rbx,rax
    6500c9bd:	mov    QWORD PTR [rsp+0x50],0x7
    6500c9c6:	mov    QWORD PTR [rsp+0x48],r13
    6500c9cb:	mov    WORD PTR [rsp+0x38],0x0
    6500c9d2:	or     r9,0xffffffffffffffff
    6500c9d6:	xor    r8d,r8d
    6500c9d9:	mov    rdx,rax
    6500c9dc:	lea    rcx,[rsp+0x30]
    6500c9e1:	call   0x6500f550
    6500c9e6:	nop
    6500c9e7:	lea    rdx,[rbx+0x28]
    6500c9eb:	mov    QWORD PTR [rsp+0x78],0x7
    6500c9f4:	mov    QWORD PTR [rsp+0x70],r13
    6500c9f9:	mov    WORD PTR [rsp+0x60],0x0
    6500ca00:	or     r9,0xffffffffffffffff
    6500ca04:	xor    r8d,r8d
    6500ca07:	lea    rcx,[rsp+0x58]
    6500ca0c:	call   0x6500f550
    6500ca11:	nop
    6500ca12:	mov    eax,DWORD PTR [rip+0x3b410]        # 0x65047e28
    6500ca18:	test   al,0x1
    6500ca1a:	jne    0x6500ca6c
    6500ca1c:	or     eax,0x1
    6500ca1f:	mov    DWORD PTR [rip+0x3b403],eax        # 0x65047e28
    6500ca25:	mov    rcx,r14
    6500ca28:	call   0x65011210
    6500ca2d:	mov    QWORD PTR [rip+0x3b3e4],rax        # 0x65047e18
    6500ca34:	mov    BYTE PTR [rax+0x69],0x1
    6500ca38:	mov    rax,QWORD PTR [rip+0x3b3d9]        # 0x65047e18
    6500ca3f:	mov    QWORD PTR [rax+0x8],rax
    6500ca43:	mov    rax,QWORD PTR [rip+0x3b3ce]        # 0x65047e18
    6500ca4a:	mov    QWORD PTR [rax],rax
    6500ca4d:	mov    rax,QWORD PTR [rip+0x3b3c4]        # 0x65047e18
    6500ca54:	mov    QWORD PTR [rax+0x10],rax
    6500ca58:	mov    QWORD PTR [rip+0x3b3c1],r13        # 0x65047e20
    6500ca5f:	lea    rcx,[rip+0x26ada]        # 0x65033540
    6500ca66:	call   0x6501e7f0
    6500ca6b:	nop
    6500ca6c:	lea    r8,[rsp+0x30]
    6500ca71:	lea    rdx,[rsp+0x150]
    6500ca79:	mov    rcx,r14
    6500ca7c:	call   0x6500e3c0
    6500ca81:	nop
    6500ca82:	cmp    QWORD PTR [rsp+0x78],0x8
    6500ca88:	jb     0x6500ca94
    6500ca8a:	mov    rcx,QWORD PTR [rsp+0x60]
    6500ca8f:	call   0x6501d300
    6500ca94:	mov    QWORD PTR [rsp+0x78],0x7
    6500ca9d:	mov    QWORD PTR [rsp+0x70],r13
    6500caa2:	mov    WORD PTR [rsp+0x60],0x0
    6500caa9:	cmp    QWORD PTR [rsp+0x50],0x8
    6500caaf:	jb     0x6500cabb
    6500cab1:	mov    rcx,QWORD PTR [rsp+0x38]
    6500cab6:	call   0x6501d300
    6500cabb:	mov    QWORD PTR [rsp+0x50],0x7
    6500cac4:	mov    QWORD PTR [rsp+0x48],r13
    6500cac9:	mov    WORD PTR [rsp+0x38],0x0
    6500cad0:	cmp    QWORD PTR [rsp+0xf0],0x8
    6500cad9:	jb     0x6500cae8
    6500cadb:	mov    rcx,QWORD PTR [rsp+0xd8]
    6500cae3:	call   0x6501d300
    6500cae8:	mov    QWORD PTR [rsp+0xf0],0x7
    6500caf4:	mov    QWORD PTR [rsp+0xe8],r13
    6500cafc:	mov    WORD PTR [rsp+0xd8],0x0
    6500cb06:	cmp    QWORD PTR [rsp+0xc8],0x8
    6500cb0f:	jb     0x6500cb1e
    6500cb11:	mov    rcx,QWORD PTR [rsp+0xb0]
    6500cb19:	call   0x6501d300
    6500cb1e:	mov    QWORD PTR [rsp+0xc8],0x7
    6500cb2a:	mov    QWORD PTR [rsp+0xc0],r13
    6500cb32:	mov    WORD PTR [rsp+0xb0],0x0
    6500cb3c:	cmp    QWORD PTR [rsp+0x1b0],0x8
    6500cb45:	jb     0x6500cb54
    6500cb47:	mov    rcx,QWORD PTR [rsp+0x198]
    6500cb4f:	call   0x6501d300
    6500cb54:	mov    QWORD PTR [rsp+0x1b0],0x7
    6500cb60:	mov    QWORD PTR [rsp+0x1a8],r13
    6500cb68:	mov    WORD PTR [rsp+0x198],0x0
    6500cb72:	mov    r11d,DWORD PTR [rip+0x3b2af]        # 0x65047e28
    6500cb79:	movzx  eax,BYTE PTR [r12]
    6500cb7e:	cmp    eax,0x100
    6500cb83:	jge    0x6500cc1d
    6500cb89:	test   r11b,0x1
    6500cb8d:	jne    0x6500cbe1
    6500cb8f:	or     r11d,0x1
    6500cb93:	mov    DWORD PTR [rip+0x3b28e],r11d        # 0x65047e28
    6500cb9a:	mov    rcx,r14
    6500cb9d:	call   0x65011210
    6500cba2:	mov    QWORD PTR [rip+0x3b26f],rax        # 0x65047e18
    6500cba9:	mov    BYTE PTR [rax+0x69],0x1
    6500cbad:	mov    rax,QWORD PTR [rip+0x3b264]        # 0x65047e18
    6500cbb4:	mov    QWORD PTR [rax+0x8],rax
    6500cbb8:	mov    rax,QWORD PTR [rip+0x3b259]        # 0x65047e18
    6500cbbf:	mov    QWORD PTR [rax],rax
    6500cbc2:	mov    rax,QWORD PTR [rip+0x3b24f]        # 0x65047e18
    6500cbc9:	mov    QWORD PTR [rax+0x10],rax
    6500cbcd:	mov    QWORD PTR [rip+0x3b24c],r13        # 0x65047e20
    6500cbd4:	lea    rcx,[rip+0x26965]        # 0x65033540
    6500cbdb:	call   0x6501e7f0
    6500cbe0:	nop
    6500cbe1:	lea    r8,[rsp+0x168]
    6500cbe9:	lea    rdx,[rsp+0x150]
    6500cbf1:	mov    rcx,r14
    6500cbf4:	call   0x6500e670
    6500cbf9:	lea    rdx,[rsp+0x20]
    6500cbfe:	mov    rcx,QWORD PTR [rax]
    6500cc01:	mov    QWORD PTR [rdx],rcx
    6500cc04:	mov    rax,QWORD PTR [rax+0x8]
    6500cc08:	mov    QWORD PTR [rdx+0x8],rax
    6500cc0c:	mov    rdi,QWORD PTR [rsp+0x28]
    6500cc11:	mov    rsi,QWORD PTR [rsp+0x20]
    6500cc16:	mov    r11d,DWORD PTR [rip+0x3b20b]        # 0x65047e28
    6500cc1d:	test   r11b,0x1
    6500cc21:	jne    0x6500cc75
    6500cc23:	or     r11d,0x1
    6500cc27:	mov    DWORD PTR [rip+0x3b1fa],r11d        # 0x65047e28
    6500cc2e:	mov    rcx,r14
    6500cc31:	call   0x65011210
    6500cc36:	mov    QWORD PTR [rip+0x3b1db],rax        # 0x65047e18
    6500cc3d:	mov    BYTE PTR [rax+0x69],0x1
    6500cc41:	mov    rax,QWORD PTR [rip+0x3b1d0]        # 0x65047e18
    6500cc48:	mov    QWORD PTR [rax+0x8],rax
    6500cc4c:	mov    rax,QWORD PTR [rip+0x3b1c5]        # 0x65047e18
    6500cc53:	mov    QWORD PTR [rax],rax
    6500cc56:	mov    rax,QWORD PTR [rip+0x3b1bb]        # 0x65047e18
    6500cc5d:	mov    QWORD PTR [rax+0x10],rax
    6500cc61:	mov    QWORD PTR [rip+0x3b1b8],r13        # 0x65047e20
    6500cc68:	lea    rcx,[rip+0x268d1]        # 0x65033540
    6500cc6f:	call   0x6501e7f0
    6500cc74:	nop
    6500cc75:	mov    rbx,QWORD PTR [rip+0x3b19c]        # 0x65047e18
    6500cc7c:	test   rsi,rsi
    6500cc7f:	je     0x6500cc86
    6500cc81:	cmp    rsi,r14
    6500cc84:	je     0x6500cc8b
    6500cc86:	call   0x6501dad0
    6500cc8b:	cmp    rdi,rbx
    6500cc8e:	je     0x6500ccb6
    6500cc90:	test   rsi,rsi
    6500cc93:	jne    0x6500cc9a
    6500cc95:	call   0x6501dad0
    6500cc9a:	cmp    rdi,QWORD PTR [rsi+0x8]
    6500cc9e:	jne    0x6500cca5
    6500cca0:	call   0x6501dad0
    6500cca5:	cmp    QWORD PTR [rdi+0x60],0x8
    6500ccaa:	jb     0x6500ccb2
    6500ccac:	mov    rbp,QWORD PTR [rdi+0x48]
    6500ccb0:	jmp    0x6500ccb6
    6500ccb2:	lea    rbp,[rdi+0x48]
    6500ccb6:	mov    rax,QWORD PTR [rip+0x38e43]        # 0x65045b00
    6500ccbd:	test   rax,rax
    6500ccc0:	jne    0x6500cce6
    6500ccc2:	lea    rcx,[rip+0x2a2f7]        # 0x65036fc0
    6500ccc9:	call   QWORD PTR [rip+0x273f9]        # 0x650340c8
    6500cccf:	mov    rcx,rax
    6500ccd2:	lea    rdx,[rip+0x2a2d7]        # 0x65036fb0
    6500ccd9:	call   QWORD PTR [rip+0x27429]        # 0x65034108
    6500ccdf:	mov    QWORD PTR [rip+0x38e1a],rax        # 0x65045b00
    6500cce6:	mov    rcx,QWORD PTR [rip+0x3b043]        # 0x65047d30
    6500cced:	test   rcx,rcx
    6500ccf0:	jne    0x6500cd0e
    6500ccf2:	xor    r8d,r8d
    6500ccf5:	xor    edx,edx
    6500ccf7:	call   QWORD PTR [rip+0x273a3]        # 0x650340a0
    6500ccfd:	mov    rcx,rax
    6500cd00:	mov    QWORD PTR [rip+0x3b029],rax        # 0x65047d30
    6500cd07:	mov    rax,QWORD PTR [rip+0x38df2]        # 0x65045b00
    6500cd0e:	call   rax
    6500cd10:	nop
    6500cd11:	cmp    QWORD PTR [rsp+0x188],0x8
    6500cd1a:	jb     0x6500cd29
    6500cd1c:	mov    rcx,QWORD PTR [rsp+0x170]
    6500cd24:	call   0x6501d300
    6500cd29:	mov    rax,rbp
    6500cd2c:	mov    rcx,QWORD PTR [rsp+0x1b8]
    6500cd34:	xor    rcx,rsp
    6500cd37:	call   0x6501e650
    6500cd3c:	lea    r11,[rsp+0x1c0]
    6500cd44:	mov    rbx,QWORD PTR [r11+0x40]
    6500cd48:	mov    rbp,QWORD PTR [r11+0x48]
    6500cd4c:	mov    rsp,r11
    6500cd4f:	pop    r14
    6500cd51:	pop    r13
    6500cd53:	pop    r12
    6500cd55:	pop    rdi
    6500cd56:	pop    rsi
    6500cd57:	ret    
    6500cd58:	int3   
    6500cd59:	int3   
    6500cd5a:	int3   
    6500cd5b:	int3   
    6500cd5c:	int3   
    6500cd5d:	int3   
    6500cd5e:	int3   
    6500cd5f:	int3   
    6500cd60:	rex push rbp
    6500cd62:	sub    rsp,0x20
    6500cd66:	mov    rbp,rdx
    6500cd69:	lea    rcx,[rbp+0x168]
    6500cd70:	call   0x6500e380
    6500cd75:	add    rsp,0x20
    6500cd79:	pop    rbp
    6500cd7a:	ret    
    6500cd7b:	int3   
    6500cd7c:	int3   
    6500cd7d:	int3   
    6500cd7e:	int3   
    6500cd7f:	int3   
    6500cd80:	rex push rbp
    6500cd82:	mov    rbp,rdx
    6500cd85:	mov    eax,DWORD PTR [rip+0x3b09d]        # 0x65047e28
    6500cd8b:	and    eax,0xfffffffe
    6500cd8e:	mov    DWORD PTR [rip+0x3b094],eax        # 0x65047e28
    6500cd94:	pop    rbp
    6500cd95:	ret    
    6500cd96:	int3   
    6500cd97:	int3   
    6500cd98:	int3   
    6500cd99:	int3   
    6500cd9a:	int3   
    6500cd9b:	int3   
    6500cd9c:	int3   
    6500cd9d:	int3   
    6500cd9e:	int3   
    6500cd9f:	int3   
    6500cda0:	rex push rbp
    6500cda2:	mov    rbp,rdx
    6500cda5:	mov    eax,DWORD PTR [rip+0x3b07d]        # 0x65047e28
    6500cdab:	and    eax,0xfffffffe
    6500cdae:	mov    DWORD PTR [rip+0x3b074],eax        # 0x65047e28
    6500cdb4:	pop    rbp
    6500cdb5:	ret    
    6500cdb6:	int3   
    6500cdb7:	int3   
    6500cdb8:	int3   
    6500cdb9:	int3   
    6500cdba:	int3   
    6500cdbb:	int3   
    6500cdbc:	int3   
    6500cdbd:	int3   
    6500cdbe:	int3   
    6500cdbf:	int3   
    6500cdc0:	rex push rbp
    6500cdc2:	sub    rsp,0x20
    6500cdc6:	mov    rbp,rdx
    6500cdc9:	lea    rcx,[rbp+0x190]
    6500cdd0:	call   0x6500e380
    6500cdd5:	add    rsp,0x20
    6500cdd9:	pop    rbp
    6500cdda:	ret    
    6500cddb:	int3   
    6500cddc:	int3   
    6500cddd:	int3   
    6500cdde:	int3   
    6500cddf:	int3   
    6500cde0:	rex push rbp
    6500cde2:	sub    rsp,0x20
    6500cde6:	mov    rbp,rdx
    6500cde9:	mov    rcx,QWORD PTR [rbp+0x150]
    6500cdf0:	call   0x6500e380
    6500cdf5:	add    rsp,0x20
    6500cdf9:	pop    rbp
    6500cdfa:	ret    
    6500cdfb:	int3   
    6500cdfc:	int3   
    6500cdfd:	int3   
    6500cdfe:	int3   
    6500cdff:	int3   
    6500ce00:	rex push rbp
    6500ce02:	sub    rsp,0x20
    6500ce06:	mov    rbp,rdx
    6500ce09:	lea    rcx,[rbp+0xa8]
    6500ce10:	call   0x6500d4d0
    6500ce15:	add    rsp,0x20
    6500ce19:	pop    rbp
    6500ce1a:	ret    
    6500ce1b:	int3   
    6500ce1c:	int3   
    6500ce1d:	int3   
    6500ce1e:	int3   
    6500ce1f:	int3   
    6500ce20:	rex push rbp
    6500ce22:	sub    rsp,0x20
    6500ce26:	mov    rbp,rdx
    6500ce29:	lea    rcx,[rbp+0x30]
    6500ce2d:	call   0x6500e380
    6500ce32:	add    rsp,0x20
    6500ce36:	pop    rbp
    6500ce37:	ret    
    6500ce38:	int3   
    6500ce39:	int3   
    6500ce3a:	int3   
    6500ce3b:	int3   
    6500ce3c:	int3   
    6500ce3d:	int3   
    6500ce3e:	int3   
    6500ce3f:	int3   
    6500ce40:	rex push rbp
    6500ce42:	sub    rsp,0x20
    6500ce46:	mov    rbp,rdx
    6500ce49:	lea    rcx,[rbp+0x30]
    6500ce4d:	call   0x6500d530
    6500ce52:	add    rsp,0x20
    6500ce56:	pop    rbp
    6500ce57:	ret    
    6500ce58:	int3   
    6500ce59:	int3   
    6500ce5a:	int3   
    6500ce5b:	int3   
    6500ce5c:	int3   
    6500ce5d:	int3   
    6500ce5e:	int3   
    6500ce5f:	int3   
    6500ce60:	rex push rbp
    6500ce62:	mov    rbp,rdx
    6500ce65:	mov    eax,DWORD PTR [rip+0x3afbd]        # 0x65047e28
    6500ce6b:	and    eax,0xfffffffe
    6500ce6e:	mov    DWORD PTR [rip+0x3afb4],eax        # 0x65047e28
    6500ce74:	pop    rbp
    6500ce75:	ret    
    6500ce76:	int3   
    6500ce77:	int3   
    6500ce78:	int3   
    6500ce79:	int3   
    6500ce7a:	int3   
    6500ce7b:	int3   
    6500ce7c:	int3   
    6500ce7d:	int3   
    6500ce7e:	int3   
    6500ce7f:	int3   
    6500ce80:	rex push rbp
    6500ce82:	mov    rbp,rdx
    6500ce85:	mov    eax,DWORD PTR [rip+0x3af9d]        # 0x65047e28
    6500ce8b:	and    eax,0xfffffffe
    6500ce8e:	mov    DWORD PTR [rip+0x3af94],eax        # 0x65047e28
    6500ce94:	pop    rbp
    6500ce95:	ret    
    6500ce96:	int3   
    6500ce97:	int3   
    6500ce98:	int3   
    6500ce99:	int3   
    6500ce9a:	int3   
    6500ce9b:	int3   
    6500ce9c:	int3   
    6500ce9d:	int3   
    6500ce9e:	int3   
    6500ce9f:	int3   
    6500cea0:	rex push rbp
    6500cea2:	mov    rbp,rdx
    6500cea5:	mov    eax,DWORD PTR [rip+0x3af7d]        # 0x65047e28
    6500ceab:	and    eax,0xfffffffe
    6500ceae:	mov    DWORD PTR [rip+0x3af74],eax        # 0x65047e28
    6500ceb4:	pop    rbp
    6500ceb5:	ret    
    6500ceb6:	int3   
    6500ceb7:	int3   
    6500ceb8:	int3   
    6500ceb9:	int3   
    6500ceba:	int3   
    6500cebb:	int3   
    6500cebc:	int3   
    6500cebd:	int3   
    6500cebe:	int3   
    6500cebf:	int3   
    6500cec0:	mov    QWORD PTR [rsp+0x8],rcx
    6500cec5:	push   rdi
    6500cec6:	sub    rsp,0x30
    6500ceca:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500ced3:	mov    QWORD PTR [rsp+0x48],rbx
    6500ced8:	mov    rbx,rcx
    6500cedb:	call   0x6500eff0
    6500cee0:	mov    QWORD PTR [rbx+0x8],rax
    6500cee4:	mov    BYTE PTR [rax+0x41],0x1
    6500cee8:	mov    rax,QWORD PTR [rbx+0x8]
    6500ceec:	mov    QWORD PTR [rax+0x8],rax
    6500cef0:	mov    rax,QWORD PTR [rbx+0x8]
    6500cef4:	mov    QWORD PTR [rax],rax
    6500cef7:	mov    rax,QWORD PTR [rbx+0x8]
    6500cefb:	mov    QWORD PTR [rax+0x10],rax
    6500ceff:	mov    QWORD PTR [rbx+0x10],0x0
    6500cf07:	mov    rdx,QWORD PTR [rip+0x3b00a]        # 0x65047f18
    6500cf0e:	mov    rdi,QWORD PTR [rbx+0x8]
    6500cf12:	mov    r8,rdi
    6500cf15:	mov    rdx,QWORD PTR [rdx+0x8]
    6500cf19:	mov    rcx,rbx
    6500cf1c:	call   0x6500ef20
    6500cf21:	mov    QWORD PTR [rdi+0x8],rax
    6500cf25:	mov    rax,QWORD PTR [rip+0x3aff4]        # 0x65047f20
    6500cf2c:	mov    QWORD PTR [rbx+0x10],rax
    6500cf30:	mov    rax,QWORD PTR [rbx+0x8]
    6500cf34:	mov    rcx,QWORD PTR [rax+0x8]
    6500cf38:	cmp    BYTE PTR [rcx+0x41],0x0
    6500cf3c:	jne    0x6500cf79
    6500cf3e:	xchg   ax,ax
    6500cf40:	mov    rax,QWORD PTR [rcx]
    6500cf43:	cmp    BYTE PTR [rax+0x41],0x0
    6500cf47:	jne    0x6500cf4e
    6500cf49:	mov    rcx,rax
    6500cf4c:	jmp    0x6500cf40
    6500cf4e:	mov    rax,QWORD PTR [rbx+0x8]
    6500cf52:	mov    QWORD PTR [rax],rcx
    6500cf55:	mov    rax,QWORD PTR [rbx+0x8]
    6500cf59:	mov    rcx,QWORD PTR [rax+0x8]
    6500cf5d:	data16 xchg ax,ax
    6500cf60:	mov    rax,QWORD PTR [rcx+0x10]
    6500cf64:	cmp    BYTE PTR [rax+0x41],0x0
    6500cf68:	jne    0x6500cf6f
    6500cf6a:	mov    rcx,rax
    6500cf6d:	jmp    0x6500cf60
    6500cf6f:	mov    rax,QWORD PTR [rbx+0x8]
    6500cf73:	mov    QWORD PTR [rax+0x10],rcx
    6500cf77:	jmp    0x6500cf84
    6500cf79:	mov    QWORD PTR [rax],rax
    6500cf7c:	mov    rax,QWORD PTR [rbx+0x8]
    6500cf80:	mov    QWORD PTR [rax+0x10],rax
    6500cf84:	mov    rax,rbx
    6500cf87:	mov    rbx,QWORD PTR [rsp+0x48]
    6500cf8c:	add    rsp,0x30
    6500cf90:	pop    rdi
    6500cf91:	ret    
    6500cf92:	int3   
    6500cf93:	int3   
    6500cf94:	int3   
    6500cf95:	int3   
    6500cf96:	int3   
    6500cf97:	int3   
    6500cf98:	int3   
    6500cf99:	int3   
    6500cf9a:	int3   
    6500cf9b:	int3   
    6500cf9c:	int3   
    6500cf9d:	int3   
    6500cf9e:	int3   
    6500cf9f:	int3   
    6500cfa0:	mov    QWORD PTR [rsp+0x10],rdx
    6500cfa5:	push   rbp
    6500cfa6:	sub    rsp,0x20
    6500cfaa:	mov    rbp,rdx
    6500cfad:	mov    rcx,QWORD PTR [rbp+0x40]
    6500cfb1:	call   0x6500df60
    6500cfb6:	xor    edx,edx
    6500cfb8:	xor    ecx,ecx
    6500cfba:	call   0x6501dc60
    6500cfbf:	nop
    6500cfc0:	add    rsp,0x20
    6500cfc4:	pop    rbp
    6500cfc5:	ret    
    6500cfc6:	int3   
    6500cfc7:	int3   
    6500cfc8:	int3   
    6500cfc9:	int3   
    6500cfca:	int3   
    6500cfcb:	int3   
    6500cfcc:	int3   
    6500cfcd:	int3   
    6500cfce:	int3   
    6500cfcf:	int3   
    6500cfd0:	mov    r11,rsp
    6500cfd3:	mov    QWORD PTR [r11+0x10],rsi
    6500cfd7:	push   rdi
    6500cfd8:	sub    rsp,0x50
    6500cfdc:	cmp    rcx,rdx
    6500cfdf:	mov    rsi,rdx
    6500cfe2:	mov    rdi,rcx
    6500cfe5:	je     0x6500d0bb
    6500cfeb:	mov    rax,QWORD PTR [rcx+0x8]
    6500cfef:	mov    QWORD PTR [r11-0x38],rcx
    6500cff3:	lea    r9,[r11-0x28]
    6500cff7:	mov    QWORD PTR [r11-0x30],rax
    6500cffb:	mov    rax,QWORD PTR [rax]
    6500cffe:	lea    r8,[r11-0x38]
    6500d002:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500d007:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6500d00d:	mov    QWORD PTR [r11-0x38],rcx
    6500d011:	mov    QWORD PTR [r11-0x30],rax
    6500d015:	lea    rdx,[r11-0x18]
    6500d019:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500d01e:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    6500d024:	mov    QWORD PTR [r11+0x8],rbx
    6500d028:	call   0x6500d7f0
    6500d02d:	mov    rdx,QWORD PTR [rsi+0x8]
    6500d031:	mov    rbx,QWORD PTR [rdi+0x8]
    6500d035:	mov    rdx,QWORD PTR [rdx+0x8]
    6500d039:	mov    rcx,rdi
    6500d03c:	mov    r8,rbx
    6500d03f:	call   0x6500ef20
    6500d044:	mov    QWORD PTR [rbx+0x8],rax
    6500d048:	mov    rax,QWORD PTR [rsi+0x10]
    6500d04c:	mov    rdx,QWORD PTR [rdi+0x8]
    6500d050:	mov    rbx,QWORD PTR [rsp+0x60]
    6500d055:	mov    QWORD PTR [rdi+0x10],rax
    6500d059:	mov    rcx,QWORD PTR [rdx+0x8]
    6500d05d:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d061:	jne    0x6500d0b0
    6500d063:	mov    rax,QWORD PTR [rcx]
    6500d066:	cmp    BYTE PTR [rax+0x41],0x0
    6500d06a:	jne    0x6500d07c
    6500d06c:	data16 data16 xchg ax,ax
    6500d070:	mov    rcx,rax
    6500d073:	mov    rax,QWORD PTR [rax]
    6500d076:	cmp    BYTE PTR [rax+0x41],0x0
    6500d07a:	je     0x6500d070
    6500d07c:	mov    QWORD PTR [rdx],rcx
    6500d07f:	mov    rdx,QWORD PTR [rdi+0x8]
    6500d083:	mov    rcx,QWORD PTR [rdx+0x8]
    6500d087:	mov    rax,QWORD PTR [rcx+0x10]
    6500d08b:	cmp    BYTE PTR [rax+0x41],0x0
    6500d08f:	jne    0x6500d09e
    6500d091:	mov    rcx,rax
    6500d094:	mov    rax,QWORD PTR [rax+0x10]
    6500d098:	cmp    BYTE PTR [rax+0x41],0x0
    6500d09c:	je     0x6500d091
    6500d09e:	mov    QWORD PTR [rdx+0x10],rcx
    6500d0a2:	mov    rax,rdi
    6500d0a5:	mov    rsi,QWORD PTR [rsp+0x68]
    6500d0aa:	add    rsp,0x50
    6500d0ae:	pop    rdi
    6500d0af:	ret    
    6500d0b0:	mov    QWORD PTR [rdx],rdx
    6500d0b3:	mov    rax,QWORD PTR [rdi+0x8]
    6500d0b7:	mov    QWORD PTR [rax+0x10],rax
    6500d0bb:	mov    rax,rdi
    6500d0be:	mov    rsi,QWORD PTR [rsp+0x68]
    6500d0c3:	add    rsp,0x50
    6500d0c7:	pop    rdi
    6500d0c8:	ret    
    6500d0c9:	int3   
    6500d0ca:	int3   
    6500d0cb:	int3   
    6500d0cc:	int3   
    6500d0cd:	int3   
    6500d0ce:	int3   
    6500d0cf:	int3   
    6500d0d0:	mov    QWORD PTR [rsp+0x18],rbx
    6500d0d5:	mov    QWORD PTR [rsp+0x10],rdx
    6500d0da:	mov    QWORD PTR [rsp+0x8],rcx
    6500d0df:	push   rbp
    6500d0e0:	push   rsi
    6500d0e1:	push   rdi
    6500d0e2:	push   r12
    6500d0e4:	push   r13
    6500d0e6:	push   r14
    6500d0e8:	push   r15
    6500d0ea:	sub    rsp,0x40
    6500d0ee:	mov    r12,QWORD PTR [rcx+0x8]
    6500d0f2:	mov    r14,r8
    6500d0f5:	mov    r13,rdx
    6500d0f8:	mov    rbx,QWORD PTR [r12+0x8]
    6500d0fd:	mov    r15,rcx
    6500d100:	mov    sil,0x1
    6500d103:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d107:	jne    0x6500d1ab
    6500d10d:	mov    r15,QWORD PTR [r8+0x18]
    6500d111:	xor    r13d,r13d
    6500d114:	mov    rax,r15
    6500d117:	data16 xchg ax,ax
    6500d11a:	data16 xchg ax,ax
    6500d11d:	data16 xchg ax,ax
    6500d120:	cmp    QWORD PTR [rbx+0x38],0x10
    6500d125:	mov    rsi,QWORD PTR [rbx+0x30]
    6500d129:	mov    r12,rbx
    6500d12c:	jb     0x6500d134
    6500d12e:	mov    rdx,QWORD PTR [rbx+0x20]
    6500d132:	jmp    0x6500d138
    6500d134:	lea    rdx,[rbx+0x20]
    6500d138:	cmp    rax,r15
    6500d13b:	mov    rdi,r15
    6500d13e:	cmovb  rdi,rax
    6500d142:	cmp    QWORD PTR [r14+0x20],0x10
    6500d147:	jb     0x6500d14f
    6500d149:	mov    rcx,QWORD PTR [r14+0x8]
    6500d14d:	jmp    0x6500d153
    6500d14f:	lea    rcx,[r14+0x8]
    6500d153:	mov    r8,rsi
    6500d156:	cmp    rdi,rsi
    6500d159:	cmovb  r8,rdi
    6500d15d:	call   0x6501d6e0
    6500d162:	test   eax,eax
    6500d164:	movsxd rcx,eax
    6500d167:	jne    0x6500d17e
    6500d169:	cmp    rdi,rsi
    6500d16c:	jae    0x6500d173
    6500d16e:	or     ecx,0xffffffff
    6500d171:	jmp    0x6500d17e
    6500d173:	mov    eax,r13d
    6500d176:	cmp    rdi,rsi
    6500d179:	setne  al
    6500d17c:	mov    ecx,eax
    6500d17e:	test   ecx,ecx
    6500d180:	sets   sil
    6500d184:	test   sil,sil
    6500d187:	je     0x6500d18e
    6500d189:	mov    rbx,QWORD PTR [rbx]
    6500d18c:	jmp    0x6500d192
    6500d18e:	mov    rbx,QWORD PTR [rbx+0x10]
    6500d192:	cmp    BYTE PTR [rbx+0x41],r13b
    6500d196:	mov    rax,r15
    6500d199:	je     0x6500d120
    6500d19b:	mov    r13,QWORD PTR [rsp+0x88]
    6500d1a3:	mov    r15,QWORD PTR [rsp+0x80]
    6500d1ab:	test   sil,sil
    6500d1ae:	mov    rbx,r12
    6500d1b1:	mov    QWORD PTR [rsp+0x30],r15
    6500d1b6:	mov    QWORD PTR [rsp+0x38],rbx
    6500d1bb:	je     0x6500d25c
    6500d1c1:	mov    rax,QWORD PTR [r15+0x8]
    6500d1c5:	cmp    r12,QWORD PTR [rax]
    6500d1c8:	jne    0x6500d1d2
    6500d1ca:	mov    r8b,0x1
    6500d1cd:	jmp    0x6500d2d9
    6500d1d2:	cmp    BYTE PTR [r12+0x41],0x0
    6500d1d8:	je     0x6500d1f1
    6500d1da:	mov    rbx,QWORD PTR [r12+0x10]
    6500d1df:	mov    QWORD PTR [rsp+0x38],rbx
    6500d1e4:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d1e8:	je     0x6500d25c
    6500d1ea:	call   0x6501dad0
    6500d1ef:	jmp    0x6500d25c
    6500d1f1:	mov    rax,QWORD PTR [r12]
    6500d1f5:	cmp    BYTE PTR [rax+0x41],0x0
    6500d1f9:	jne    0x6500d224
    6500d1fb:	mov    rbx,rax
    6500d1fe:	mov    rax,QWORD PTR [rax+0x10]
    6500d202:	cmp    BYTE PTR [rax+0x41],0x0
    6500d206:	jne    0x6500d21d
    6500d208:	data16 data16 xchg ax,ax
    6500d20c:	data16 data16 xchg ax,ax
    6500d210:	mov    rbx,rax
    6500d213:	mov    rax,QWORD PTR [rax+0x10]
    6500d217:	cmp    BYTE PTR [rax+0x41],0x0
    6500d21b:	je     0x6500d210
    6500d21d:	mov    QWORD PTR [rsp+0x38],rbx
    6500d222:	jmp    0x6500d25c
    6500d224:	mov    rax,QWORD PTR [r12+0x8]
    6500d229:	cmp    BYTE PTR [rax+0x41],0x0
    6500d22d:	jne    0x6500d247
    6500d22f:	nop
    6500d230:	cmp    rbx,QWORD PTR [rax]
    6500d233:	jne    0x6500d247
    6500d235:	mov    rbx,rax
    6500d238:	mov    QWORD PTR [rsp+0x38],rax
    6500d23d:	mov    rax,QWORD PTR [rax+0x8]
    6500d241:	cmp    BYTE PTR [rax+0x41],0x0
    6500d245:	je     0x6500d230
    6500d247:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d24b:	je     0x6500d254
    6500d24d:	call   0x6501dad0
    6500d252:	jmp    0x6500d25c
    6500d254:	mov    rbx,rax
    6500d257:	mov    QWORD PTR [rsp+0x38],rax
    6500d25c:	cmp    QWORD PTR [r14+0x20],0x10
    6500d261:	mov    rbp,QWORD PTR [r14+0x18]
    6500d265:	jb     0x6500d26d
    6500d267:	mov    rdx,QWORD PTR [r14+0x8]
    6500d26b:	jmp    0x6500d271
    6500d26d:	lea    rdx,[r14+0x8]
    6500d271:	mov    rdi,QWORD PTR [rbx+0x30]
    6500d275:	cmp    rdi,rdi
    6500d278:	cmovb  rdi,rdi
    6500d27c:	cmp    QWORD PTR [rbx+0x38],0x10
    6500d281:	jb     0x6500d289
    6500d283:	mov    rcx,QWORD PTR [rbx+0x20]
    6500d287:	jmp    0x6500d28d
    6500d289:	lea    rcx,[rbx+0x20]
    6500d28d:	mov    r8,rbp
    6500d290:	cmp    rdi,rbp
    6500d293:	cmovb  r8,rdi
    6500d297:	call   0x6501d6e0
    6500d29c:	test   eax,eax
    6500d29e:	movsxd rcx,eax
    6500d2a1:	jne    0x6500d2ba
    6500d2a3:	cmp    rdi,rbp
    6500d2a6:	jb     0x6500d2d5
    6500d2a8:	mov    r15d,eax
    6500d2ab:	setne  r15b
    6500d2af:	mov    ecx,r15d
    6500d2b2:	mov    r15,QWORD PTR [rsp+0x80]
    6500d2ba:	test   ecx,ecx
    6500d2bc:	js     0x6500d2d5
    6500d2be:	lea    rcx,[rsp+0x30]
    6500d2c3:	mov    BYTE PTR [r13+0x10],0x0
    6500d2c8:	mov    rax,QWORD PTR [rcx]
    6500d2cb:	mov    QWORD PTR [r13+0x0],rax
    6500d2cf:	mov    rax,QWORD PTR [rcx+0x8]
    6500d2d3:	jmp    0x6500d2fe
    6500d2d5:	movzx  r8d,sil
    6500d2d9:	lea    rdx,[rsp+0x30]
    6500d2de:	mov    r9,r12
    6500d2e1:	mov    rcx,r15
    6500d2e4:	mov    QWORD PTR [rsp+0x20],r14
    6500d2e9:	call   0x6500db70
    6500d2ee:	mov    BYTE PTR [r13+0x10],0x1
    6500d2f3:	mov    rcx,QWORD PTR [rax]
    6500d2f6:	mov    rax,QWORD PTR [rax+0x8]
    6500d2fa:	mov    QWORD PTR [r13+0x0],rcx
    6500d2fe:	mov    rbx,QWORD PTR [rsp+0x90]
    6500d306:	mov    QWORD PTR [r13+0x8],rax
    6500d30a:	mov    rax,r13
    6500d30d:	add    rsp,0x40
    6500d311:	pop    r15
    6500d313:	pop    r14
    6500d315:	pop    r13
    6500d317:	pop    r12
    6500d319:	pop    rdi
    6500d31a:	pop    rsi
    6500d31b:	pop    rbp
    6500d31c:	ret    
    6500d31d:	int3   
    6500d31e:	int3   
    6500d31f:	int3   
    6500d320:	mov    QWORD PTR [rsp+0x8],rbx
    6500d325:	mov    QWORD PTR [rsp+0x10],rbp
    6500d32a:	mov    QWORD PTR [rsp+0x18],rsi
    6500d32f:	mov    QWORD PTR [rsp+0x20],rdi
    6500d334:	push   r12
    6500d336:	sub    rsp,0x50
    6500d33a:	mov    r8,rdx
    6500d33d:	lea    rdx,[rsp+0x30]
    6500d342:	call   0x6500d9d0
    6500d347:	mov    rbp,QWORD PTR [rsp+0x48]
    6500d34c:	mov    r12,QWORD PTR [rsp+0x40]
    6500d351:	lea    rcx,[rsp+0x30]
    6500d356:	lea    rdx,[rsp+0x20]
    6500d35b:	xor    esi,esi
    6500d35d:	mov    rax,QWORD PTR [rcx]
    6500d360:	mov    QWORD PTR [rdx],rax
    6500d363:	mov    rax,QWORD PTR [rcx+0x8]
    6500d367:	mov    QWORD PTR [rdx+0x8],rax
    6500d36b:	mov    rdi,QWORD PTR [rsp+0x20]
    6500d370:	mov    rbx,QWORD PTR [rsp+0x28]
    6500d375:	test   rdi,rdi
    6500d378:	je     0x6500d37f
    6500d37a:	cmp    rdi,r12
    6500d37d:	je     0x6500d384
    6500d37f:	call   0x6501dad0
    6500d384:	cmp    rbx,rbp
    6500d387:	je     0x6500d3f0
    6500d389:	add    rsi,0x1
    6500d38d:	test   rdi,rdi
    6500d390:	jne    0x6500d397
    6500d392:	call   0x6501dad0
    6500d397:	cmp    BYTE PTR [rbx+0x41],0x0
    6500d39b:	je     0x6500d3a4
    6500d39d:	call   0x6501dad0
    6500d3a2:	jmp    0x6500d375
    6500d3a4:	mov    rax,QWORD PTR [rbx+0x10]
    6500d3a8:	cmp    BYTE PTR [rax+0x41],0x0
    6500d3ac:	jne    0x6500d3ce
    6500d3ae:	mov    rbx,rax
    6500d3b1:	mov    rax,QWORD PTR [rax]
    6500d3b4:	cmp    BYTE PTR [rax+0x41],0x0
    6500d3b8:	jne    0x6500d375
    6500d3ba:	data16 xchg ax,ax
    6500d3bd:	data16 xchg ax,ax
    6500d3c0:	mov    rbx,rax
    6500d3c3:	mov    rax,QWORD PTR [rax]
    6500d3c6:	cmp    BYTE PTR [rax+0x41],0x0
    6500d3ca:	je     0x6500d3c0
    6500d3cc:	jmp    0x6500d375
    6500d3ce:	mov    rax,QWORD PTR [rbx+0x8]
    6500d3d2:	cmp    BYTE PTR [rax+0x41],0x0
    6500d3d6:	jne    0x6500d3eb
    6500d3d8:	cmp    rbx,QWORD PTR [rax+0x10]
    6500d3dc:	jne    0x6500d3eb
    6500d3de:	mov    rbx,rax
    6500d3e1:	mov    rax,QWORD PTR [rax+0x8]
    6500d3e5:	cmp    BYTE PTR [rax+0x41],0x0
    6500d3e9:	je     0x6500d3d8
    6500d3eb:	mov    rbx,rax
    6500d3ee:	jmp    0x6500d375
    6500d3f0:	mov    rbx,QWORD PTR [rsp+0x60]
    6500d3f5:	mov    rbp,QWORD PTR [rsp+0x68]
    6500d3fa:	mov    rdi,QWORD PTR [rsp+0x78]
    6500d3ff:	mov    rax,rsi
    6500d402:	mov    rsi,QWORD PTR [rsp+0x70]
    6500d407:	add    rsp,0x50
    6500d40b:	pop    r12
    6500d40d:	ret    
    6500d40e:	int3   
    6500d40f:	int3   
    6500d410:	rex push rbx
    6500d412:	sub    rsp,0x20
    6500d416:	cmp    QWORD PTR [rcx+0x48],0x10
    6500d41b:	mov    rbx,rcx
    6500d41e:	jb     0x6500d429
    6500d420:	mov    rcx,QWORD PTR [rcx+0x30]
    6500d424:	call   0x6501d300
    6500d429:	mov    QWORD PTR [rbx+0x48],0xf
    6500d431:	mov    QWORD PTR [rbx+0x40],0x0
    6500d439:	mov    BYTE PTR [rbx+0x30],0x0
    6500d43d:	cmp    QWORD PTR [rbx+0x20],0x10
    6500d442:	jb     0x6500d44d
    6500d444:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d448:	call   0x6501d300
    6500d44d:	mov    QWORD PTR [rbx+0x20],0xf
    6500d455:	mov    QWORD PTR [rbx+0x18],0x0
    6500d45d:	mov    BYTE PTR [rbx+0x8],0x0
    6500d461:	add    rsp,0x20
    6500d465:	pop    rbx
    6500d466:	ret    
    6500d467:	int3   
    6500d468:	int3   
    6500d469:	int3   
    6500d46a:	int3   
    6500d46b:	int3   
    6500d46c:	int3   
    6500d46d:	int3   
    6500d46e:	int3   
    6500d46f:	int3   
    6500d470:	rex push rbx
    6500d472:	sub    rsp,0x20
    6500d476:	cmp    QWORD PTR [rcx+0x48],0x10
    6500d47b:	mov    rbx,rcx
    6500d47e:	jb     0x6500d489
    6500d480:	mov    rcx,QWORD PTR [rcx+0x30]
    6500d484:	call   0x6501d300
    6500d489:	mov    QWORD PTR [rbx+0x48],0xf
    6500d491:	mov    QWORD PTR [rbx+0x40],0x0
    6500d499:	mov    BYTE PTR [rbx+0x30],0x0
    6500d49d:	cmp    QWORD PTR [rbx+0x20],0x10
    6500d4a2:	jb     0x6500d4ad
    6500d4a4:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d4a8:	call   0x6501d300
    6500d4ad:	mov    QWORD PTR [rbx+0x20],0xf
    6500d4b5:	mov    QWORD PTR [rbx+0x18],0x0
    6500d4bd:	mov    BYTE PTR [rbx+0x8],0x0
    6500d4c1:	add    rsp,0x20
    6500d4c5:	pop    rbx
    6500d4c6:	ret    
    6500d4c7:	int3   
    6500d4c8:	int3   
    6500d4c9:	int3   
    6500d4ca:	int3   
    6500d4cb:	int3   
    6500d4cc:	int3   
    6500d4cd:	int3   
    6500d4ce:	int3   
    6500d4cf:	int3   
    6500d4d0:	rex push rbx
    6500d4d2:	sub    rsp,0x20
    6500d4d6:	cmp    QWORD PTR [rcx+0x48],0x8
    6500d4db:	mov    rbx,rcx
    6500d4de:	jb     0x6500d4e9
    6500d4e0:	mov    rcx,QWORD PTR [rcx+0x30]
    6500d4e4:	call   0x6501d300
    6500d4e9:	mov    QWORD PTR [rbx+0x48],0x7
    6500d4f1:	mov    QWORD PTR [rbx+0x40],0x0
    6500d4f9:	mov    WORD PTR [rbx+0x30],0x0
    6500d4ff:	cmp    QWORD PTR [rbx+0x20],0x8
    6500d504:	jb     0x6500d50f
    6500d506:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d50a:	call   0x6501d300
    6500d50f:	mov    QWORD PTR [rbx+0x20],0x7
    6500d517:	mov    QWORD PTR [rbx+0x18],0x0
    6500d51f:	mov    WORD PTR [rbx+0x8],0x0
    6500d525:	add    rsp,0x20
    6500d529:	pop    rbx
    6500d52a:	ret    
    6500d52b:	int3   
    6500d52c:	int3   
    6500d52d:	int3   
    6500d52e:	int3   
    6500d52f:	int3   
    6500d530:	rex push rbx
    6500d532:	sub    rsp,0x20
    6500d536:	cmp    QWORD PTR [rcx+0x48],0x8
    6500d53b:	mov    rbx,rcx
    6500d53e:	jb     0x6500d549
    6500d540:	mov    rcx,QWORD PTR [rcx+0x30]
    6500d544:	call   0x6501d300
    6500d549:	mov    QWORD PTR [rbx+0x48],0x7
    6500d551:	mov    QWORD PTR [rbx+0x40],0x0
    6500d559:	mov    WORD PTR [rbx+0x30],0x0
    6500d55f:	cmp    QWORD PTR [rbx+0x20],0x8
    6500d564:	jb     0x6500d56f
    6500d566:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d56a:	call   0x6501d300
    6500d56f:	mov    QWORD PTR [rbx+0x20],0x7
    6500d577:	mov    QWORD PTR [rbx+0x18],0x0
    6500d57f:	mov    WORD PTR [rbx+0x8],0x0
    6500d585:	add    rsp,0x20
    6500d589:	pop    rbx
    6500d58a:	ret    
    6500d58b:	int3   
    6500d58c:	int3   
    6500d58d:	int3   
    6500d58e:	int3   
    6500d58f:	int3   
    6500d590:	rex push rbp
    6500d592:	push   rsi
    6500d593:	push   rdi
    6500d594:	push   r12
    6500d596:	push   r13
    6500d598:	sub    rsp,0x40
    6500d59c:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500d5a5:	mov    QWORD PTR [rsp+0x80],rbx
    6500d5ad:	mov    rax,QWORD PTR [rip+0x35b6c]        # 0x65043120
    6500d5b4:	xor    rax,rsp
    6500d5b7:	mov    QWORD PTR [rsp+0x38],rax
    6500d5bc:	mov    r13,rdx
    6500d5bf:	mov    rbx,rcx
    6500d5c2:	mov    QWORD PTR [rsp+0x30],rdx
    6500d5c7:	mov    DWORD PTR [rsp+0x20],0x0
    6500d5cf:	mov    QWORD PTR [rcx+0x20],0xf
    6500d5d7:	mov    QWORD PTR [rcx+0x18],0x0
    6500d5df:	mov    BYTE PTR [rcx+0x8],0x0
    6500d5e3:	or     r9,0xffffffffffffffff
    6500d5e7:	xor    r8d,r8d
    6500d5ea:	call   0x65001e20
    6500d5ef:	mov    edi,0x1
    6500d5f4:	cmp    rdi,QWORD PTR [rbx+0x18]
    6500d5f8:	jae    0x6500d64e
    6500d5fa:	data16 xchg ax,ax
    6500d5fd:	data16 xchg ax,ax
    6500d600:	cmp    rdi,QWORD PTR [rbx+0x18]
    6500d604:	jbe    0x6500d60b
    6500d606:	call   0x6501dad0
    6500d60b:	cmp    QWORD PTR [rbx+0x20],0x10
    6500d610:	jb     0x6500d618
    6500d612:	mov    rbp,QWORD PTR [rbx+0x8]
    6500d616:	jmp    0x6500d61c
    6500d618:	lea    rbp,[rbx+0x8]
    6500d61c:	lea    r12,[rdi-0x1]
    6500d620:	cmp    r12,QWORD PTR [rbx+0x18]
    6500d624:	jbe    0x6500d62b
    6500d626:	call   0x6501dad0
    6500d62b:	cmp    QWORD PTR [rbx+0x20],0x10
    6500d630:	jb     0x6500d638
    6500d632:	mov    rax,QWORD PTR [rbx+0x8]
    6500d636:	jmp    0x6500d63c
    6500d638:	lea    rax,[rbx+0x8]
    6500d63c:	movzx  eax,BYTE PTR [r12+rax*1]
    6500d641:	xor    BYTE PTR [rdi+rbp*1],al
    6500d644:	add    rdi,0x1
    6500d648:	cmp    rdi,QWORD PTR [rbx+0x18]
    6500d64c:	jb     0x6500d600
    6500d64e:	cmp    QWORD PTR [r13+0x20],0x10
    6500d653:	jb     0x6500d65e
    6500d655:	mov    rcx,QWORD PTR [r13+0x8]
    6500d659:	call   0x6501d300
    6500d65e:	mov    QWORD PTR [r13+0x20],0xf
    6500d666:	mov    QWORD PTR [r13+0x18],0x0
    6500d66e:	mov    BYTE PTR [r13+0x8],0x0
    6500d673:	mov    rax,rbx
    6500d676:	mov    rcx,QWORD PTR [rsp+0x38]
    6500d67b:	xor    rcx,rsp
    6500d67e:	call   0x6501e650
    6500d683:	mov    rbx,QWORD PTR [rsp+0x80]
    6500d68b:	add    rsp,0x40
    6500d68f:	pop    r13
    6500d691:	pop    r12
    6500d693:	pop    rdi
    6500d694:	pop    rsi
    6500d695:	pop    rbp
    6500d696:	ret    
    6500d697:	int3   
    6500d698:	int3   
    6500d699:	int3   
    6500d69a:	int3   
    6500d69b:	int3   
    6500d69c:	int3   
    6500d69d:	int3   
    6500d69e:	int3   
    6500d69f:	int3   
    6500d6a0:	rex push rbp
    6500d6a2:	sub    rsp,0x20
    6500d6a6:	mov    rbp,rdx
    6500d6a9:	mov    rcx,QWORD PTR [rbp+0x30]
    6500d6ad:	call   0x65001c70
    6500d6b2:	add    rsp,0x20
    6500d6b6:	pop    rbp
    6500d6b7:	ret    
    6500d6b8:	int3   
    6500d6b9:	int3   
    6500d6ba:	int3   
    6500d6bb:	int3   
    6500d6bc:	int3   
    6500d6bd:	int3   
    6500d6be:	int3   
    6500d6bf:	int3   
    6500d6c0:	rex push rsi
    6500d6c2:	push   rdi
    6500d6c3:	push   r12
    6500d6c5:	sub    rsp,0x40
    6500d6c9:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500d6d2:	mov    QWORD PTR [rsp+0x70],rbx
    6500d6d7:	mov    QWORD PTR [rsp+0x78],rbp
    6500d6dc:	mov    rax,QWORD PTR [rip+0x35a3d]        # 0x65043120
    6500d6e3:	xor    rax,rsp
    6500d6e6:	mov    QWORD PTR [rsp+0x38],rax
    6500d6eb:	mov    r12,rdx
    6500d6ee:	mov    rdi,rcx
    6500d6f1:	mov    QWORD PTR [rsp+0x30],rdx
    6500d6f6:	mov    DWORD PTR [rsp+0x20],0x0
    6500d6fe:	mov    QWORD PTR [rcx+0x20],0x7
    6500d706:	mov    QWORD PTR [rcx+0x18],0x0
    6500d70e:	mov    WORD PTR [rcx+0x8],0x0
    6500d714:	or     r9,0xffffffffffffffff
    6500d718:	xor    r8d,r8d
    6500d71b:	call   0x6500f550
    6500d720:	mov    ebx,0x1
    6500d725:	cmp    rbx,QWORD PTR [rdi+0x18]
    6500d729:	jae    0x6500d780
    6500d72b:	xchg   ax,ax
    6500d72d:	data16 xchg ax,ax
    6500d730:	cmp    rbx,QWORD PTR [rdi+0x18]
    6500d734:	jbe    0x6500d73b
    6500d736:	call   0x6501dad0
    6500d73b:	cmp    QWORD PTR [rdi+0x20],0x8
    6500d740:	jb     0x6500d748
    6500d742:	mov    rbp,QWORD PTR [rdi+0x8]
    6500d746:	jmp    0x6500d74c
    6500d748:	lea    rbp,[rdi+0x8]
    6500d74c:	lea    rax,[rbx-0x1]
    6500d750:	cmp    rax,QWORD PTR [rdi+0x18]
    6500d754:	jbe    0x6500d75b
    6500d756:	call   0x6501dad0
    6500d75b:	cmp    QWORD PTR [rdi+0x20],0x8
    6500d760:	jb     0x6500d768
    6500d762:	mov    rax,QWORD PTR [rdi+0x8]
    6500d766:	jmp    0x6500d76c
    6500d768:	lea    rax,[rdi+0x8]
    6500d76c:	movzx  eax,WORD PTR [rax+rbx*2-0x2]
    6500d771:	xor    WORD PTR [rbp+rbx*2+0x0],ax
    6500d776:	add    rbx,0x1
    6500d77a:	cmp    rbx,QWORD PTR [rdi+0x18]
    6500d77e:	jb     0x6500d730
    6500d780:	cmp    QWORD PTR [r12+0x20],0x8
    6500d786:	jb     0x6500d792
    6500d788:	mov    rcx,QWORD PTR [r12+0x8]
    6500d78d:	call   0x6501d300
    6500d792:	mov    QWORD PTR [r12+0x20],0x7
    6500d79b:	mov    QWORD PTR [r12+0x18],0x0
    6500d7a4:	mov    WORD PTR [r12+0x8],0x0
    6500d7ac:	mov    rax,rdi
    6500d7af:	mov    rcx,QWORD PTR [rsp+0x38]
    6500d7b4:	xor    rcx,rsp
    6500d7b7:	call   0x6501e650
    6500d7bc:	mov    rbx,QWORD PTR [rsp+0x70]
    6500d7c1:	mov    rbp,QWORD PTR [rsp+0x78]
    6500d7c6:	add    rsp,0x40
    6500d7ca:	pop    r12
    6500d7cc:	pop    rdi
    6500d7cd:	pop    rsi
    6500d7ce:	ret    
    6500d7cf:	int3   
    6500d7d0:	rex push rbp
    6500d7d2:	sub    rsp,0x20
    6500d7d6:	mov    rbp,rdx
    6500d7d9:	mov    rcx,QWORD PTR [rbp+0x30]
    6500d7dd:	call   0x6500e380
    6500d7e2:	add    rsp,0x20
    6500d7e6:	pop    rbp
    6500d7e7:	ret    
    6500d7e8:	int3   
    6500d7e9:	int3   
    6500d7ea:	int3   
    6500d7eb:	int3   
    6500d7ec:	int3   
    6500d7ed:	int3   
    6500d7ee:	int3   
    6500d7ef:	int3   
    6500d7f0:	mov    QWORD PTR [rsp+0x8],rbx
    6500d7f5:	mov    QWORD PTR [rsp+0x10],rbp
    6500d7fa:	mov    QWORD PTR [rsp+0x18],rsi
    6500d7ff:	mov    QWORD PTR [rsp+0x20],rdi
    6500d804:	push   r12
    6500d806:	sub    rsp,0x50
    6500d80a:	mov    rax,QWORD PTR [rcx+0x8]
    6500d80e:	mov    rsi,r9
    6500d811:	mov    rbx,r8
    6500d814:	mov    rdi,QWORD PTR [rax]
    6500d817:	mov    rax,QWORD PTR [r8]
    6500d81a:	mov    r12,rdx
    6500d81d:	test   rax,rax
    6500d820:	mov    rbp,rcx
    6500d823:	je     0x6500d82a
    6500d825:	cmp    rax,rcx
    6500d828:	je     0x6500d82f
    6500d82a:	call   0x6501dad0
    6500d82f:	cmp    QWORD PTR [rbx+0x8],rdi
    6500d833:	jne    0x6500d8e0
    6500d839:	mov    rax,QWORD PTR [rsi]
    6500d83c:	mov    rdi,QWORD PTR [rbp+0x8]
    6500d840:	test   rax,rax
    6500d843:	je     0x6500d84a
    6500d845:	cmp    rax,rbp
    6500d848:	je     0x6500d84f
    6500d84a:	call   0x6501dad0
    6500d84f:	cmp    QWORD PTR [rsi+0x8],rdi
    6500d853:	jne    0x6500d8e0
    6500d859:	mov    rax,QWORD PTR [rbp+0x8]
    6500d85d:	xor    esi,esi
    6500d85f:	mov    rbx,QWORD PTR [rax+0x8]
    6500d863:	mov    rdi,rbx
    6500d866:	cmp    BYTE PTR [rbx+0x41],sil
    6500d86a:	jne    0x6500d8b0
    6500d86c:	data16 data16 xchg ax,ax
    6500d870:	mov    rdx,QWORD PTR [rdi+0x10]
    6500d874:	mov    rcx,rbp
    6500d877:	call   0x6500fb40
    6500d87c:	cmp    QWORD PTR [rbx+0x38],0x10
    6500d881:	mov    rdi,QWORD PTR [rdi]
    6500d884:	jb     0x6500d88f
    6500d886:	mov    rcx,QWORD PTR [rbx+0x20]
    6500d88a:	call   0x6501d300
    6500d88f:	mov    QWORD PTR [rbx+0x38],0xf
    6500d897:	mov    QWORD PTR [rbx+0x30],rsi
    6500d89b:	mov    rcx,rbx
    6500d89e:	mov    BYTE PTR [rbx+0x20],sil
    6500d8a2:	call   0x6501d300
    6500d8a7:	cmp    BYTE PTR [rdi+0x41],sil
    6500d8ab:	mov    rbx,rdi
    6500d8ae:	je     0x6500d870
    6500d8b0:	mov    rax,QWORD PTR [rbp+0x8]
    6500d8b4:	mov    QWORD PTR [r12],rbp
    6500d8b8:	mov    QWORD PTR [rax+0x8],rax
    6500d8bc:	mov    rax,QWORD PTR [rbp+0x8]
    6500d8c0:	mov    QWORD PTR [rbp+0x10],rsi
    6500d8c4:	mov    QWORD PTR [rax],rax
    6500d8c7:	mov    rax,QWORD PTR [rbp+0x8]
    6500d8cb:	mov    QWORD PTR [rax+0x10],rax
    6500d8cf:	mov    rax,QWORD PTR [rbp+0x8]
    6500d8d3:	mov    rcx,QWORD PTR [rax]
    6500d8d6:	mov    QWORD PTR [r12+0x8],rcx
    6500d8db:	jmp    0x6500d9ab
    6500d8e0:	mov    rax,QWORD PTR [rbx]
    6500d8e3:	test   rax,rax
    6500d8e6:	je     0x6500d8ed
    6500d8e8:	cmp    rax,QWORD PTR [rsi]
    6500d8eb:	je     0x6500d8f2
    6500d8ed:	call   0x6501dad0
    6500d8f2:	mov    rax,QWORD PTR [rsi+0x8]
    6500d8f6:	cmp    QWORD PTR [rbx+0x8],rax
    6500d8fa:	mov    rax,QWORD PTR [rbx]
    6500d8fd:	je     0x6500d99e
    6500d903:	cmp    QWORD PTR [rbx],0x0
    6500d907:	lea    rcx,[rsp+0x20]
    6500d90c:	mov    QWORD PTR [rcx],rax
    6500d90f:	mov    rax,QWORD PTR [rbx+0x8]
    6500d913:	mov    QWORD PTR [rcx+0x8],rax
    6500d917:	jne    0x6500d91e
    6500d919:	call   0x6501dad0
    6500d91e:	mov    rcx,QWORD PTR [rbx+0x8]
    6500d922:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d926:	je     0x6500d92f
    6500d928:	call   0x6501dad0
    6500d92d:	jmp    0x6500d97c
    6500d92f:	mov    rax,QWORD PTR [rcx+0x10]
    6500d933:	cmp    BYTE PTR [rax+0x41],0x0
    6500d937:	jne    0x6500d954
    6500d939:	mov    rcx,QWORD PTR [rax]
    6500d93c:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d940:	jne    0x6500d94e
    6500d942:	mov    rax,rcx
    6500d945:	mov    rcx,QWORD PTR [rcx]
    6500d948:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d94c:	je     0x6500d942
    6500d94e:	mov    QWORD PTR [rbx+0x8],rax
    6500d952:	jmp    0x6500d97c
    6500d954:	mov    rcx,QWORD PTR [rcx+0x8]
    6500d958:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d95c:	jne    0x6500d978
    6500d95e:	xchg   ax,ax
    6500d960:	mov    rax,QWORD PTR [rcx+0x10]
    6500d964:	cmp    QWORD PTR [rbx+0x8],rax
    6500d968:	jne    0x6500d978
    6500d96a:	mov    QWORD PTR [rbx+0x8],rcx
    6500d96e:	mov    rcx,QWORD PTR [rcx+0x8]
    6500d972:	cmp    BYTE PTR [rcx+0x41],0x0
    6500d976:	je     0x6500d960
    6500d978:	mov    QWORD PTR [rbx+0x8],rcx
    6500d97c:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500d981:	lea    r8,[rsp+0x30]
    6500d986:	lea    rdx,[rsp+0x40]
    6500d98b:	mov    rcx,rbp
    6500d98e:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6500d994:	call   0x6500e8c0
    6500d999:	jmp    0x6500d8e0
    6500d99e:	mov    QWORD PTR [r12],rax
    6500d9a2:	mov    rax,QWORD PTR [rbx+0x8]
    6500d9a6:	mov    QWORD PTR [r12+0x8],rax
    6500d9ab:	mov    rbx,QWORD PTR [rsp+0x60]
    6500d9b0:	mov    rbp,QWORD PTR [rsp+0x68]
    6500d9b5:	mov    rsi,QWORD PTR [rsp+0x70]
    6500d9ba:	mov    rdi,QWORD PTR [rsp+0x78]
    6500d9bf:	mov    rax,r12
    6500d9c2:	add    rsp,0x50
    6500d9c6:	pop    r12
    6500d9c8:	ret    
    6500d9c9:	int3   
    6500d9ca:	int3   
    6500d9cb:	int3   
    6500d9cc:	int3   
    6500d9cd:	int3   
    6500d9ce:	int3   
    6500d9cf:	int3   
    6500d9d0:	mov    QWORD PTR [rsp+0x18],rbx
    6500d9d5:	mov    QWORD PTR [rsp+0x10],rdx
    6500d9da:	mov    QWORD PTR [rsp+0x8],rcx
    6500d9df:	push   rbp
    6500d9e0:	push   rsi
    6500d9e1:	push   rdi
    6500d9e2:	push   r12
    6500d9e4:	push   r13
    6500d9e6:	push   r14
    6500d9e8:	push   r15
    6500d9ea:	sub    rsp,0x40
    6500d9ee:	mov    r13,QWORD PTR [rcx+0x8]
    6500d9f2:	mov    rbp,r8
    6500d9f5:	mov    r14,rdx
    6500d9f8:	mov    rbx,QWORD PTR [r13+0x8]
    6500d9fc:	mov    r15,rcx
    6500d9ff:	cmp    BYTE PTR [rbx+0x41],0x0
    6500da03:	jne    0x6500da89
    6500da09:	mov    r14,QWORD PTR [r8+0x18]
    6500da0d:	data16 xchg ax,ax
    6500da10:	cmp    QWORD PTR [rbx+0x38],0x10
    6500da15:	mov    rsi,QWORD PTR [rbx+0x30]
    6500da19:	jb     0x6500da21
    6500da1b:	mov    rdx,QWORD PTR [rbx+0x20]
    6500da1f:	jmp    0x6500da25
    6500da21:	lea    rdx,[rbx+0x20]
    6500da25:	cmp    r14,r14
    6500da28:	mov    rdi,r14
    6500da2b:	cmovb  rdi,r14
    6500da2f:	cmp    QWORD PTR [rbp+0x20],0x10
    6500da34:	jb     0x6500da3c
    6500da36:	mov    rcx,QWORD PTR [rbp+0x8]
    6500da3a:	jmp    0x6500da40
    6500da3c:	lea    rcx,[rbp+0x8]
    6500da40:	mov    r8,rsi
    6500da43:	cmp    rdi,rsi
    6500da46:	cmovb  r8,rdi
    6500da4a:	call   0x6501d6e0
    6500da4f:	test   eax,eax
    6500da51:	movsxd rcx,eax
    6500da54:	jne    0x6500da63
    6500da56:	cmp    rdi,rsi
    6500da59:	jb     0x6500da6d
    6500da5b:	cmp    rdi,rsi
    6500da5e:	setne  al
    6500da61:	mov    ecx,eax
    6500da63:	test   ecx,ecx
    6500da65:	js     0x6500da6d
    6500da67:	mov    rbx,QWORD PTR [rbx+0x10]
    6500da6b:	jmp    0x6500da73
    6500da6d:	mov    r13,rbx
    6500da70:	mov    rbx,QWORD PTR [rbx]
    6500da73:	cmp    BYTE PTR [rbx+0x41],0x0
    6500da77:	je     0x6500da10
    6500da79:	mov    r14,QWORD PTR [rsp+0x88]
    6500da81:	mov    r15,QWORD PTR [rsp+0x80]
    6500da89:	mov    r12,QWORD PTR [r15+0x8]
    6500da8d:	mov    QWORD PTR [rsp+0x38],r13
    6500da92:	mov    QWORD PTR [rsp+0x30],r15
    6500da97:	mov    rbx,QWORD PTR [r12+0x8]
    6500da9c:	cmp    BYTE PTR [rbx+0x41],0x0
    6500daa0:	jne    0x6500db15
    6500daa2:	mov    rsi,QWORD PTR [rbp+0x18]
    6500daa6:	mov    r13,QWORD PTR [rbp+0x20]
    6500daaa:	data16 xchg ax,ax
    6500daad:	data16 xchg ax,ax
    6500dab0:	cmp    r13,0x10
    6500dab4:	jb     0x6500dabc
    6500dab6:	mov    rdx,QWORD PTR [rbp+0x8]
    6500daba:	jmp    0x6500dac0
    6500dabc:	lea    rdx,[rbp+0x8]
    6500dac0:	mov    rdi,QWORD PTR [rbx+0x30]
    6500dac4:	cmp    rdi,rdi
    6500dac7:	cmovb  rdi,rdi
    6500dacb:	cmp    QWORD PTR [rbx+0x38],0x10
    6500dad0:	jb     0x6500dad8
    6500dad2:	mov    rcx,QWORD PTR [rbx+0x20]
    6500dad6:	jmp    0x6500dadc
    6500dad8:	lea    rcx,[rbx+0x20]
    6500dadc:	mov    r8,rsi
    6500dadf:	cmp    rdi,rsi
    6500dae2:	cmovb  r8,rdi
    6500dae6:	call   0x6501d6e0
    6500daeb:	test   eax,eax
    6500daed:	movsxd rcx,eax
    6500daf0:	jne    0x6500daff
    6500daf2:	cmp    rdi,rsi
    6500daf5:	jb     0x6500db0b
    6500daf7:	cmp    rdi,rsi
    6500dafa:	setne  al
    6500dafd:	mov    ecx,eax
    6500daff:	test   ecx,ecx
    6500db01:	js     0x6500db0b
    6500db03:	mov    r12,rbx
    6500db06:	mov    rbx,QWORD PTR [rbx]
    6500db09:	jmp    0x6500db0f
    6500db0b:	mov    rbx,QWORD PTR [rbx+0x10]
    6500db0f:	cmp    BYTE PTR [rbx+0x41],0x0
    6500db13:	je     0x6500dab0
    6500db15:	mov    rbx,QWORD PTR [rsp+0x90]
    6500db1d:	lea    rcx,[rsp+0x20]
    6500db22:	mov    QWORD PTR [rsp+0x28],r12
    6500db27:	mov    QWORD PTR [rsp+0x20],r15
    6500db2c:	mov    rax,QWORD PTR [rcx]
    6500db2f:	mov    QWORD PTR [r14],rax
    6500db32:	mov    rax,QWORD PTR [rcx+0x8]
    6500db36:	lea    rcx,[rsp+0x30]
    6500db3b:	mov    QWORD PTR [r14+0x8],rax
    6500db3f:	mov    rax,QWORD PTR [rcx]
    6500db42:	mov    QWORD PTR [r14+0x10],rax
    6500db46:	mov    rax,QWORD PTR [rcx+0x8]
    6500db4a:	mov    QWORD PTR [r14+0x18],rax
    6500db4e:	mov    rax,r14
    6500db51:	add    rsp,0x40
    6500db55:	pop    r15
    6500db57:	pop    r14
    6500db59:	pop    r13
    6500db5b:	pop    r12
    6500db5d:	pop    rdi
    6500db5e:	pop    rsi
    6500db5f:	pop    rbp
    6500db60:	ret    
    6500db61:	int3   
    6500db62:	int3   
    6500db63:	int3   
    6500db64:	int3   
    6500db65:	int3   
    6500db66:	int3   
    6500db67:	int3   
    6500db68:	int3   
    6500db69:	int3   
    6500db6a:	int3   
    6500db6b:	int3   
    6500db6c:	int3   
    6500db6d:	int3   
    6500db6e:	int3   
    6500db6f:	int3   
    6500db70:	mov    r11,rsp
    6500db73:	push   rdi
    6500db74:	sub    rsp,0xa0
    6500db7b:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500db84:	mov    QWORD PTR [r11+0x8],rbx
    6500db88:	mov    QWORD PTR [r11+0x10],rbp
    6500db8c:	mov    QWORD PTR [r11+0x18],rsi
    6500db90:	mov    rdi,r9
    6500db93:	movzx  esi,r8b
    6500db97:	mov    rbp,rdx
    6500db9a:	mov    rbx,rcx
    6500db9d:	movabs rax,0x666666666666665
    6500dba7:	cmp    QWORD PTR [rcx+0x10],rax
    6500dbab:	jb     0x6500dc7a
    6500dbb1:	mov    QWORD PTR [r11-0x50],0xf
    6500dbb9:	xor    ebx,ebx
    6500dbbb:	mov    QWORD PTR [r11-0x58],rbx
    6500dbbf:	mov    BYTE PTR [rsp+0x40],bl
    6500dbc3:	xor    r8d,r8d
    6500dbc6:	lea    edx,[rbx+0x13]
    6500dbc9:	lea    rcx,[r11-0x70]
    6500dbcd:	call   0x65002330
    6500dbd2:	lea    rcx,[rsp+0x40]
    6500dbd7:	mov    rdx,QWORD PTR [rsp+0x58]
    6500dbdc:	cmp    rdx,0x10
    6500dbe0:	cmovae rcx,QWORD PTR [rsp+0x40]
    6500dbe6:	lea    r9d,[rbx+0x13]
    6500dbea:	lea    r8,[rip+0x2b197]        # 0x65038d88
    6500dbf1:	call   0x6501d7b0
    6500dbf6:	mov    QWORD PTR [rsp+0x50],0x13
    6500dbff:	lea    rax,[rsp+0x40]
    6500dc04:	cmp    QWORD PTR [rsp+0x58],0x10
    6500dc0a:	cmovae rax,QWORD PTR [rsp+0x40]
    6500dc10:	mov    BYTE PTR [rax+0x13],bl
    6500dc13:	lea    rcx,[rsp+0x60]
    6500dc18:	call   0x6501d310
    6500dc1d:	nop
    6500dc1e:	lea    rax,[rip+0x275ab]        # 0x650351d0
    6500dc25:	mov    QWORD PTR [rsp+0x60],rax
    6500dc2a:	mov    QWORD PTR [rsp+0x98],0xf
    6500dc36:	mov    QWORD PTR [rsp+0x90],rbx
    6500dc3e:	mov    BYTE PTR [rsp+0x80],bl
    6500dc45:	or     r9,0xffffffffffffffff
    6500dc49:	xor    r8d,r8d
    6500dc4c:	lea    rdx,[rsp+0x38]
    6500dc51:	lea    rcx,[rsp+0x78]
    6500dc56:	call   0x65001e20
    6500dc5b:	nop
    6500dc5c:	lea    rax,[rip+0x27585]        # 0x650351e8
    6500dc63:	mov    QWORD PTR [rsp+0x60],rax
    6500dc68:	lea    rdx,[rip+0x33909]        # 0x65041578
    6500dc6f:	lea    rcx,[rsp+0x60]
    6500dc74:	call   0x6501dc60
    6500dc79:	nop
    6500dc7a:	mov    rdx,QWORD PTR [rcx+0x8]
    6500dc7e:	mov    BYTE PTR [rsp+0x28],0x0
    6500dc83:	mov    rax,QWORD PTR [rsp+0xd0]
    6500dc8b:	mov    QWORD PTR [rsp+0x20],rax
    6500dc90:	mov    r9,rdx
    6500dc93:	mov    r8,rdi
    6500dc96:	call   0x6500f070
    6500dc9b:	mov    r11,rax
    6500dc9e:	add    QWORD PTR [rbx+0x10],0x1
    6500dca3:	mov    rcx,QWORD PTR [rbx+0x8]
    6500dca7:	cmp    rdi,rcx
    6500dcaa:	jne    0x6500dcc1
    6500dcac:	mov    QWORD PTR [rcx+0x8],rax
    6500dcb0:	mov    rcx,QWORD PTR [rbx+0x8]
    6500dcb4:	mov    QWORD PTR [rcx],rax
    6500dcb7:	mov    rcx,QWORD PTR [rbx+0x8]
    6500dcbb:	mov    QWORD PTR [rcx+0x10],rax
    6500dcbf:	jmp    0x6500dce9
    6500dcc1:	test   sil,sil
    6500dcc4:	je     0x6500dcd7
    6500dcc6:	mov    QWORD PTR [rdi],rax
    6500dcc9:	mov    rax,QWORD PTR [rbx+0x8]
    6500dccd:	cmp    rdi,QWORD PTR [rax]
    6500dcd0:	jne    0x6500dce9
    6500dcd2:	mov    QWORD PTR [rax],r11
    6500dcd5:	jmp    0x6500dce9
    6500dcd7:	mov    QWORD PTR [rdi+0x10],rax
    6500dcdb:	mov    rax,QWORD PTR [rbx+0x8]
    6500dcdf:	cmp    rdi,QWORD PTR [rax+0x10]
    6500dce3:	jne    0x6500dce9
    6500dce5:	mov    QWORD PTR [rax+0x10],r11
    6500dce9:	mov    r8,r11
    6500dcec:	lea    rdx,[r11+0x8]
    6500dcf0:	mov    rax,QWORD PTR [rdx]
    6500dcf3:	cmp    BYTE PTR [rax+0x40],0x0
    6500dcf7:	jne    0x6500dee8
    6500dcfd:	data16 xchg ax,ax
    6500dd00:	mov    rax,QWORD PTR [rdx]
    6500dd03:	mov    rcx,QWORD PTR [rax+0x8]
    6500dd07:	cmp    rax,QWORD PTR [rcx]
    6500dd0a:	jne    0x6500ddf7
    6500dd10:	mov    r9,QWORD PTR [rcx+0x10]
    6500dd14:	cmp    BYTE PTR [r9+0x40],0x0
    6500dd19:	jne    0x6500dd3b
    6500dd1b:	mov    BYTE PTR [rax+0x40],0x1
    6500dd1f:	mov    BYTE PTR [r9+0x40],0x1
    6500dd24:	mov    rax,QWORD PTR [rdx]
    6500dd27:	mov    rcx,QWORD PTR [rax+0x8]
    6500dd2b:	mov    BYTE PTR [rcx+0x40],0x0
    6500dd2f:	mov    rax,QWORD PTR [rdx]
    6500dd32:	mov    r8,QWORD PTR [rax+0x8]
    6500dd36:	jmp    0x6500ded7
    6500dd3b:	cmp    r8,QWORD PTR [rax+0x10]
    6500dd3f:	jne    0x6500dd8e
    6500dd41:	mov    r8,rax
    6500dd44:	mov    rcx,QWORD PTR [rax+0x10]
    6500dd48:	mov    rax,QWORD PTR [rcx]
    6500dd4b:	mov    QWORD PTR [r8+0x10],rax
    6500dd4f:	mov    rax,QWORD PTR [rcx]
    6500dd52:	cmp    BYTE PTR [rax+0x41],0x0
    6500dd56:	jne    0x6500dd5c
    6500dd58:	mov    QWORD PTR [rax+0x8],r8
    6500dd5c:	lea    rdx,[r8+0x8]
    6500dd60:	mov    rax,QWORD PTR [rdx]
    6500dd63:	mov    QWORD PTR [rcx+0x8],rax
    6500dd67:	mov    rax,QWORD PTR [rbx+0x8]
    6500dd6b:	cmp    r8,QWORD PTR [rax+0x8]
    6500dd6f:	jne    0x6500dd77
    6500dd71:	mov    QWORD PTR [rax+0x8],rcx
    6500dd75:	jmp    0x6500dd88
    6500dd77:	mov    rax,QWORD PTR [rdx]
    6500dd7a:	cmp    r8,QWORD PTR [rax]
    6500dd7d:	jne    0x6500dd84
    6500dd7f:	mov    QWORD PTR [rax],rcx
    6500dd82:	jmp    0x6500dd88
    6500dd84:	mov    QWORD PTR [rax+0x10],rcx
    6500dd88:	mov    QWORD PTR [rcx],r8
    6500dd8b:	mov    QWORD PTR [rdx],rcx
    6500dd8e:	mov    rax,QWORD PTR [rdx]
    6500dd91:	mov    BYTE PTR [rax+0x40],0x1
    6500dd95:	mov    rax,QWORD PTR [rdx]
    6500dd98:	mov    rcx,QWORD PTR [rax+0x8]
    6500dd9c:	mov    BYTE PTR [rcx+0x40],0x0
    6500dda0:	mov    rax,QWORD PTR [rdx]
    6500dda3:	mov    rcx,QWORD PTR [rax+0x8]
    6500dda7:	mov    rdx,QWORD PTR [rcx]
    6500ddaa:	mov    rax,QWORD PTR [rdx+0x10]
    6500ddae:	mov    QWORD PTR [rcx],rax
    6500ddb1:	mov    rax,QWORD PTR [rdx+0x10]
    6500ddb5:	cmp    BYTE PTR [rax+0x41],0x0
    6500ddb9:	jne    0x6500ddbf
    6500ddbb:	mov    QWORD PTR [rax+0x8],rcx
    6500ddbf:	mov    rax,QWORD PTR [rcx+0x8]
    6500ddc3:	mov    QWORD PTR [rdx+0x8],rax
    6500ddc7:	mov    rax,QWORD PTR [rbx+0x8]
    6500ddcb:	cmp    rcx,QWORD PTR [rax+0x8]
    6500ddcf:	jne    0x6500ddd7
    6500ddd1:	mov    QWORD PTR [rax+0x8],rdx
    6500ddd5:	jmp    0x6500ddea
    6500ddd7:	mov    rax,QWORD PTR [rcx+0x8]
    6500dddb:	cmp    rcx,QWORD PTR [rax+0x10]
    6500dddf:	jne    0x6500dde7
    6500dde1:	mov    QWORD PTR [rax+0x10],rdx
    6500dde5:	jmp    0x6500ddea
    6500dde7:	mov    QWORD PTR [rax],rdx
    6500ddea:	mov    QWORD PTR [rdx+0x10],rcx
    6500ddee:	mov    QWORD PTR [rcx+0x8],rdx
    6500ddf2:	jmp    0x6500ded7
    6500ddf7:	mov    r9,QWORD PTR [rcx]
    6500ddfa:	cmp    BYTE PTR [r9+0x40],0x0
    6500ddff:	jne    0x6500de21
    6500de01:	mov    BYTE PTR [rax+0x40],0x1
    6500de05:	mov    BYTE PTR [r9+0x40],0x1
    6500de0a:	mov    rax,QWORD PTR [rdx]
    6500de0d:	mov    rcx,QWORD PTR [rax+0x8]
    6500de11:	mov    BYTE PTR [rcx+0x40],0x0
    6500de15:	mov    rax,QWORD PTR [rdx]
    6500de18:	mov    r8,QWORD PTR [rax+0x8]
    6500de1c:	jmp    0x6500ded7
    6500de21:	cmp    r8,QWORD PTR [rax]
    6500de24:	jne    0x6500de75
    6500de26:	mov    r8,rax
    6500de29:	mov    rcx,QWORD PTR [rax]
    6500de2c:	mov    rax,QWORD PTR [rcx+0x10]
    6500de30:	mov    QWORD PTR [r8],rax
    6500de33:	mov    rax,QWORD PTR [rcx+0x10]
    6500de37:	cmp    BYTE PTR [rax+0x41],0x0
    6500de3b:	jne    0x6500de41
    6500de3d:	mov    QWORD PTR [rax+0x8],r8
    6500de41:	lea    rdx,[r8+0x8]
    6500de45:	mov    rax,QWORD PTR [rdx]
    6500de48:	mov    QWORD PTR [rcx+0x8],rax
    6500de4c:	mov    rax,QWORD PTR [rbx+0x8]
    6500de50:	cmp    r8,QWORD PTR [rax+0x8]
    6500de54:	jne    0x6500de5c
    6500de56:	mov    QWORD PTR [rax+0x8],rcx
    6500de5a:	jmp    0x6500de6e
    6500de5c:	mov    rax,QWORD PTR [rdx]
    6500de5f:	cmp    r8,QWORD PTR [rax+0x10]
    6500de63:	jne    0x6500de6b
    6500de65:	mov    QWORD PTR [rax+0x10],rcx
    6500de69:	jmp    0x6500de6e
    6500de6b:	mov    QWORD PTR [rax],rcx
    6500de6e:	mov    QWORD PTR [rcx+0x10],r8
    6500de72:	mov    QWORD PTR [rdx],rcx
    6500de75:	mov    rax,QWORD PTR [rdx]
    6500de78:	mov    BYTE PTR [rax+0x40],0x1
    6500de7c:	mov    rax,QWORD PTR [rdx]
    6500de7f:	mov    rcx,QWORD PTR [rax+0x8]
    6500de83:	mov    BYTE PTR [rcx+0x40],0x0
    6500de87:	mov    rax,QWORD PTR [rdx]
    6500de8a:	mov    rcx,QWORD PTR [rax+0x8]
    6500de8e:	mov    rdx,QWORD PTR [rcx+0x10]
    6500de92:	mov    rax,QWORD PTR [rdx]
    6500de95:	mov    QWORD PTR [rcx+0x10],rax
    6500de99:	mov    rax,QWORD PTR [rdx]
    6500de9c:	cmp    BYTE PTR [rax+0x41],0x0
    6500dea0:	jne    0x6500dea6
    6500dea2:	mov    QWORD PTR [rax+0x8],rcx
    6500dea6:	mov    rax,QWORD PTR [rcx+0x8]
    6500deaa:	mov    QWORD PTR [rdx+0x8],rax
    6500deae:	mov    rax,QWORD PTR [rbx+0x8]
    6500deb2:	cmp    rcx,QWORD PTR [rax+0x8]
    6500deb6:	jne    0x6500debe
    6500deb8:	mov    QWORD PTR [rax+0x8],rdx
    6500debc:	jmp    0x6500ded0
    6500debe:	mov    rax,QWORD PTR [rcx+0x8]
    6500dec2:	cmp    rcx,QWORD PTR [rax]
    6500dec5:	jne    0x6500decc
    6500dec7:	mov    QWORD PTR [rax],rdx
    6500deca:	jmp    0x6500ded0
    6500decc:	mov    QWORD PTR [rax+0x10],rdx
    6500ded0:	mov    QWORD PTR [rdx],rcx
    6500ded3:	mov    QWORD PTR [rcx+0x8],rdx
    6500ded7:	lea    rdx,[r8+0x8]
    6500dedb:	mov    rax,QWORD PTR [rdx]
    6500dede:	cmp    BYTE PTR [rax+0x40],0x0
    6500dee2:	je     0x6500dd00
    6500dee8:	mov    rax,QWORD PTR [rbx+0x8]
    6500deec:	mov    rcx,QWORD PTR [rax+0x8]
    6500def0:	mov    BYTE PTR [rcx+0x40],0x1
    6500def4:	mov    QWORD PTR [rbp+0x8],r11
    6500def8:	mov    QWORD PTR [rbp+0x0],rbx
    6500defc:	mov    rax,rbp
    6500deff:	lea    r11,[rsp+0xa0]
    6500df07:	mov    rbx,QWORD PTR [r11+0x10]
    6500df0b:	mov    rbp,QWORD PTR [r11+0x18]
    6500df0f:	mov    rsi,QWORD PTR [r11+0x20]
    6500df13:	mov    rsp,r11
    6500df16:	pop    rdi
    6500df17:	ret    
    6500df18:	int3   
    6500df19:	int3   
    6500df1a:	int3   
    6500df1b:	int3   
    6500df1c:	int3   
    6500df1d:	int3   
    6500df1e:	int3   
    6500df1f:	int3   
    6500df20:	rex push rbp
    6500df22:	sub    rsp,0x20
    6500df26:	mov    rbp,rdx
    6500df29:	lea    rcx,[rbp+0x38]
    6500df2d:	call   0x65001c70
    6500df32:	add    rsp,0x20
    6500df36:	pop    rbp
    6500df37:	ret    
    6500df38:	int3   
    6500df39:	int3   
    6500df3a:	int3   
    6500df3b:	int3   
    6500df3c:	int3   
    6500df3d:	int3   
    6500df3e:	int3   
    6500df3f:	int3   
    6500df40:	rex push rbp
    6500df42:	sub    rsp,0x20
    6500df46:	mov    rbp,rdx
    6500df49:	lea    rcx,[rbp+0x60]
    6500df4d:	call   0x6501d490
    6500df52:	add    rsp,0x20
    6500df56:	pop    rbp
    6500df57:	ret    
    6500df58:	int3   
    6500df59:	int3   
    6500df5a:	int3   
    6500df5b:	int3   
    6500df5c:	int3   
    6500df5d:	int3   
    6500df5e:	int3   
    6500df5f:	int3   
    6500df60:	mov    r11,rsp
    6500df63:	push   rbx
    6500df64:	sub    rsp,0x50
    6500df68:	mov    rax,QWORD PTR [rcx+0x8]
    6500df6c:	mov    QWORD PTR [r11-0x38],rcx
    6500df70:	lea    r9,[r11-0x28]
    6500df74:	mov    QWORD PTR [r11-0x30],rax
    6500df78:	mov    rax,QWORD PTR [rax]
    6500df7b:	lea    r8,[r11-0x38]
    6500df7f:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500df84:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6500df8a:	mov    QWORD PTR [r11-0x38],rcx
    6500df8e:	mov    QWORD PTR [r11-0x30],rax
    6500df92:	lea    rdx,[r11-0x18]
    6500df96:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500df9b:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    6500dfa1:	mov    rbx,rcx
    6500dfa4:	call   0x6500d7f0
    6500dfa9:	mov    rcx,QWORD PTR [rbx+0x8]
    6500dfad:	call   0x6501d300
    6500dfb2:	xor    r11d,r11d
    6500dfb5:	mov    QWORD PTR [rbx+0x8],r11
    6500dfb9:	mov    QWORD PTR [rbx+0x10],r11
    6500dfbd:	add    rsp,0x50
    6500dfc1:	pop    rbx
    6500dfc2:	ret    
    6500dfc3:	int3   
    6500dfc4:	int3   
    6500dfc5:	int3   
    6500dfc6:	int3   
    6500dfc7:	int3   
    6500dfc8:	int3   
    6500dfc9:	int3   
    6500dfca:	int3   
    6500dfcb:	int3   
    6500dfcc:	int3   
    6500dfcd:	int3   
    6500dfce:	int3   
    6500dfcf:	int3   
    6500dfd0:	mov    QWORD PTR [rsp+0x18],rbx
    6500dfd5:	mov    QWORD PTR [rsp+0x10],rdx
    6500dfda:	mov    QWORD PTR [rsp+0x8],rcx
    6500dfdf:	push   rbp
    6500dfe0:	push   rsi
    6500dfe1:	push   rdi
    6500dfe2:	push   r12
    6500dfe4:	push   r13
    6500dfe6:	push   r14
    6500dfe8:	push   r15
    6500dfea:	sub    rsp,0x40
    6500dfee:	mov    r12,QWORD PTR [rcx+0x8]
    6500dff2:	mov    r14,r8
    6500dff5:	mov    r13,rdx
    6500dff8:	mov    rbx,QWORD PTR [r12+0x8]
    6500dffd:	mov    r15,rcx
    6500e000:	mov    sil,0x1
    6500e003:	cmp    BYTE PTR [rbx+0x69],0x0
    6500e007:	jne    0x6500e0ab
    6500e00d:	mov    r15,QWORD PTR [r8+0x18]
    6500e011:	xor    r13d,r13d
    6500e014:	mov    rax,r15
    6500e017:	data16 xchg ax,ax
    6500e01a:	data16 xchg ax,ax
    6500e01d:	data16 xchg ax,ax
    6500e020:	cmp    QWORD PTR [rbx+0x38],0x10
    6500e025:	mov    rsi,QWORD PTR [rbx+0x30]
    6500e029:	mov    r12,rbx
    6500e02c:	jb     0x6500e034
    6500e02e:	mov    rdx,QWORD PTR [rbx+0x20]
    6500e032:	jmp    0x6500e038
    6500e034:	lea    rdx,[rbx+0x20]
    6500e038:	cmp    rax,r15
    6500e03b:	mov    rdi,r15
    6500e03e:	cmovb  rdi,rax
    6500e042:	cmp    QWORD PTR [r14+0x20],0x10
    6500e047:	jb     0x6500e04f
    6500e049:	mov    rcx,QWORD PTR [r14+0x8]
    6500e04d:	jmp    0x6500e053
    6500e04f:	lea    rcx,[r14+0x8]
    6500e053:	mov    r8,rsi
    6500e056:	cmp    rdi,rsi
    6500e059:	cmovb  r8,rdi
    6500e05d:	call   0x6501d6e0
    6500e062:	test   eax,eax
    6500e064:	movsxd rcx,eax
    6500e067:	jne    0x6500e07e
    6500e069:	cmp    rdi,rsi
    6500e06c:	jae    0x6500e073
    6500e06e:	or     ecx,0xffffffff
    6500e071:	jmp    0x6500e07e
    6500e073:	mov    eax,r13d
    6500e076:	cmp    rdi,rsi
    6500e079:	setne  al
    6500e07c:	mov    ecx,eax
    6500e07e:	test   ecx,ecx
    6500e080:	sets   sil
    6500e084:	test   sil,sil
    6500e087:	je     0x6500e08e
    6500e089:	mov    rbx,QWORD PTR [rbx]
    6500e08c:	jmp    0x6500e092
    6500e08e:	mov    rbx,QWORD PTR [rbx+0x10]
    6500e092:	cmp    BYTE PTR [rbx+0x69],r13b
    6500e096:	mov    rax,r15
    6500e099:	je     0x6500e020
    6500e09b:	mov    r13,QWORD PTR [rsp+0x88]
    6500e0a3:	mov    r15,QWORD PTR [rsp+0x80]
    6500e0ab:	test   sil,sil
    6500e0ae:	mov    rbx,r12
    6500e0b1:	mov    QWORD PTR [rsp+0x30],r15
    6500e0b6:	mov    QWORD PTR [rsp+0x38],rbx
    6500e0bb:	je     0x6500e15c
    6500e0c1:	mov    rax,QWORD PTR [r15+0x8]
    6500e0c5:	cmp    r12,QWORD PTR [rax]
    6500e0c8:	jne    0x6500e0d2
    6500e0ca:	mov    r8b,0x1
    6500e0cd:	jmp    0x6500e1d9
    6500e0d2:	cmp    BYTE PTR [r12+0x69],0x0
    6500e0d8:	je     0x6500e0f1
    6500e0da:	mov    rbx,QWORD PTR [r12+0x10]
    6500e0df:	mov    QWORD PTR [rsp+0x38],rbx
    6500e0e4:	cmp    BYTE PTR [rbx+0x69],0x0
    6500e0e8:	je     0x6500e15c
    6500e0ea:	call   0x6501dad0
    6500e0ef:	jmp    0x6500e15c
    6500e0f1:	mov    rax,QWORD PTR [r12]
    6500e0f5:	cmp    BYTE PTR [rax+0x69],0x0
    6500e0f9:	jne    0x6500e124
    6500e0fb:	mov    rbx,rax
    6500e0fe:	mov    rax,QWORD PTR [rax+0x10]
    6500e102:	cmp    BYTE PTR [rax+0x69],0x0
    6500e106:	jne    0x6500e11d
    6500e108:	data16 data16 xchg ax,ax
    6500e10c:	data16 data16 xchg ax,ax
    6500e110:	mov    rbx,rax
    6500e113:	mov    rax,QWORD PTR [rax+0x10]
    6500e117:	cmp    BYTE PTR [rax+0x69],0x0
    6500e11b:	je     0x6500e110
    6500e11d:	mov    QWORD PTR [rsp+0x38],rbx
    6500e122:	jmp    0x6500e15c
    6500e124:	mov    rax,QWORD PTR [r12+0x8]
    6500e129:	cmp    BYTE PTR [rax+0x69],0x0
    6500e12d:	jne    0x6500e147
    6500e12f:	nop
    6500e130:	cmp    rbx,QWORD PTR [rax]
    6500e133:	jne    0x6500e147
    6500e135:	mov    rbx,rax
    6500e138:	mov    QWORD PTR [rsp+0x38],rax
    6500e13d:	mov    rax,QWORD PTR [rax+0x8]
    6500e141:	cmp    BYTE PTR [rax+0x69],0x0
    6500e145:	je     0x6500e130
    6500e147:	cmp    BYTE PTR [rbx+0x69],0x0
    6500e14b:	je     0x6500e154
    6500e14d:	call   0x6501dad0
    6500e152:	jmp    0x6500e15c
    6500e154:	mov    rbx,rax
    6500e157:	mov    QWORD PTR [rsp+0x38],rax
    6500e15c:	cmp    QWORD PTR [r14+0x20],0x10
    6500e161:	mov    rbp,QWORD PTR [r14+0x18]
    6500e165:	jb     0x6500e16d
    6500e167:	mov    rdx,QWORD PTR [r14+0x8]
    6500e16b:	jmp    0x6500e171
    6500e16d:	lea    rdx,[r14+0x8]
    6500e171:	mov    rdi,QWORD PTR [rbx+0x30]
    6500e175:	cmp    rdi,rdi
    6500e178:	cmovb  rdi,rdi
    6500e17c:	cmp    QWORD PTR [rbx+0x38],0x10
    6500e181:	jb     0x6500e189
    6500e183:	mov    rcx,QWORD PTR [rbx+0x20]
    6500e187:	jmp    0x6500e18d
    6500e189:	lea    rcx,[rbx+0x20]
    6500e18d:	mov    r8,rbp
    6500e190:	cmp    rdi,rbp
    6500e193:	cmovb  r8,rdi
    6500e197:	call   0x6501d6e0
    6500e19c:	test   eax,eax
    6500e19e:	movsxd rcx,eax
    6500e1a1:	jne    0x6500e1ba
    6500e1a3:	cmp    rdi,rbp
    6500e1a6:	jb     0x6500e1d5
    6500e1a8:	mov    r15d,eax
    6500e1ab:	setne  r15b
    6500e1af:	mov    ecx,r15d
    6500e1b2:	mov    r15,QWORD PTR [rsp+0x80]
    6500e1ba:	test   ecx,ecx
    6500e1bc:	js     0x6500e1d5
    6500e1be:	lea    rcx,[rsp+0x30]
    6500e1c3:	mov    BYTE PTR [r13+0x10],0x0
    6500e1c8:	mov    rax,QWORD PTR [rcx]
    6500e1cb:	mov    QWORD PTR [r13+0x0],rax
    6500e1cf:	mov    rax,QWORD PTR [rcx+0x8]
    6500e1d3:	jmp    0x6500e1fe
    6500e1d5:	movzx  r8d,sil
    6500e1d9:	lea    rdx,[rsp+0x30]
    6500e1de:	mov    r9,r12
    6500e1e1:	mov    rcx,r15
    6500e1e4:	mov    QWORD PTR [rsp+0x20],r14
    6500e1e9:	call   0x6500f160
    6500e1ee:	mov    BYTE PTR [r13+0x10],0x1
    6500e1f3:	mov    rcx,QWORD PTR [rax]
    6500e1f6:	mov    rax,QWORD PTR [rax+0x8]
    6500e1fa:	mov    QWORD PTR [r13+0x0],rcx
    6500e1fe:	mov    rbx,QWORD PTR [rsp+0x90]
    6500e206:	mov    QWORD PTR [r13+0x8],rax
    6500e20a:	mov    rax,r13
    6500e20d:	add    rsp,0x40
    6500e211:	pop    r15
    6500e213:	pop    r14
    6500e215:	pop    r13
    6500e217:	pop    r12
    6500e219:	pop    rdi
    6500e21a:	pop    rsi
    6500e21b:	pop    rbp
    6500e21c:	ret    
    6500e21d:	int3   
    6500e21e:	int3   
    6500e21f:	int3   
    6500e220:	mov    QWORD PTR [rsp+0x18],rbx
    6500e225:	mov    QWORD PTR [rsp+0x10],rdx
    6500e22a:	mov    QWORD PTR [rsp+0x8],rcx
    6500e22f:	push   rbp
    6500e230:	push   rsi
    6500e231:	push   rdi
    6500e232:	push   r12
    6500e234:	push   r13
    6500e236:	push   r14
    6500e238:	push   r15
    6500e23a:	sub    rsp,0x40
    6500e23e:	mov    rsi,QWORD PTR [rcx+0x8]
    6500e242:	xor    r14d,r14d
    6500e245:	mov    r13,r8
    6500e248:	mov    rbx,QWORD PTR [rsi+0x8]
    6500e24c:	mov    r15,rdx
    6500e24f:	mov    r12,rcx
    6500e252:	cmp    BYTE PTR [rbx+0x69],r14b
    6500e256:	jne    0x6500e2d5
    6500e258:	mov    rbp,QWORD PTR [r8+0x18]
    6500e25c:	mov    r15,QWORD PTR [r8+0x20]
    6500e260:	cmp    r15,0x10
    6500e264:	jb     0x6500e26c
    6500e266:	mov    rdx,QWORD PTR [r13+0x8]
    6500e26a:	jmp    0x6500e270
    6500e26c:	lea    rdx,[r13+0x8]
    6500e270:	mov    rdi,QWORD PTR [rbx+0x30]
    6500e274:	cmp    rdi,rdi
    6500e277:	cmovb  rdi,rdi
    6500e27b:	cmp    QWORD PTR [rbx+0x38],0x10
    6500e280:	jb     0x6500e288
    6500e282:	mov    rcx,QWORD PTR [rbx+0x20]
    6500e286:	jmp    0x6500e28c
    6500e288:	lea    rcx,[rbx+0x20]
    6500e28c:	mov    r8,rbp
    6500e28f:	cmp    rdi,rbp
    6500e292:	cmovb  r8,rdi
    6500e296:	call   0x6501d6e0
    6500e29b:	test   eax,eax
    6500e29d:	movsxd rcx,eax
    6500e2a0:	jne    0x6500e2af
    6500e2a2:	cmp    rdi,rbp
    6500e2a5:	jb     0x6500e2bb
    6500e2a7:	mov    eax,r14d
    6500e2aa:	setne  al
    6500e2ad:	mov    ecx,eax
    6500e2af:	test   ecx,ecx
    6500e2b1:	js     0x6500e2bb
    6500e2b3:	mov    rsi,rbx
    6500e2b6:	mov    rbx,QWORD PTR [rbx]
    6500e2b9:	jmp    0x6500e2bf
    6500e2bb:	mov    rbx,QWORD PTR [rbx+0x10]
    6500e2bf:	cmp    BYTE PTR [rbx+0x69],r14b
    6500e2c3:	je     0x6500e260
    6500e2c5:	mov    r12,QWORD PTR [rsp+0x80]
    6500e2cd:	mov    r15,QWORD PTR [rsp+0x88]
    6500e2d5:	mov    rbp,QWORD PTR [r12+0x8]
    6500e2da:	mov    QWORD PTR [rsp+0x28],rsi
    6500e2df:	mov    QWORD PTR [rsp+0x20],r12
    6500e2e4:	cmp    rsi,rbp
    6500e2e7:	je     0x6500e347
    6500e2e9:	cmp    QWORD PTR [rsi+0x38],0x10
    6500e2ee:	mov    rdi,QWORD PTR [rsi+0x30]
    6500e2f2:	jb     0x6500e2fa
    6500e2f4:	mov    rdx,QWORD PTR [rsi+0x20]
    6500e2f8:	jmp    0x6500e2fe
    6500e2fa:	lea    rdx,[rsi+0x20]
    6500e2fe:	mov    rbx,QWORD PTR [r13+0x18]
    6500e302:	cmp    rbx,rbx
    6500e305:	cmovb  rbx,rbx
    6500e309:	cmp    QWORD PTR [r13+0x20],0x10
    6500e30e:	jb     0x6500e316
    6500e310:	mov    rcx,QWORD PTR [r13+0x8]
    6500e314:	jmp    0x6500e31a
    6500e316:	lea    rcx,[r13+0x8]
    6500e31a:	mov    r8,rdi
    6500e31d:	cmp    rbx,rdi
    6500e320:	cmovb  r8,rbx
    6500e324:	call   0x6501d6e0
    6500e329:	test   eax,eax
    6500e32b:	movsxd rcx,eax
    6500e32e:	jne    0x6500e33c
    6500e330:	cmp    rbx,rdi
    6500e333:	jb     0x6500e347
    6500e335:	setne  r14b
    6500e339:	mov    ecx,r14d
    6500e33c:	test   ecx,ecx
    6500e33e:	js     0x6500e347
    6500e340:	lea    rcx,[rsp+0x20]
    6500e345:	jmp    0x6500e356
    6500e347:	mov    QWORD PTR [rsp+0x38],rbp
    6500e34c:	mov    QWORD PTR [rsp+0x30],r12
    6500e351:	lea    rcx,[rsp+0x30]
    6500e356:	mov    rax,QWORD PTR [rcx]
    6500e359:	mov    rbx,QWORD PTR [rsp+0x90]
    6500e361:	mov    QWORD PTR [r15],rax
    6500e364:	mov    rax,QWORD PTR [rcx+0x8]
    6500e368:	mov    QWORD PTR [r15+0x8],rax
    6500e36c:	mov    rax,r15
    6500e36f:	add    rsp,0x40
    6500e373:	pop    r15
    6500e375:	pop    r14
    6500e377:	pop    r13
    6500e379:	pop    r12
    6500e37b:	pop    rdi
    6500e37c:	pop    rsi
    6500e37d:	pop    rbp
    6500e37e:	ret    
    6500e37f:	int3   
    6500e380:	rex push rbx
    6500e382:	sub    rsp,0x20
    6500e386:	cmp    QWORD PTR [rcx+0x20],0x8
    6500e38b:	mov    rbx,rcx
    6500e38e:	jb     0x6500e399
    6500e390:	mov    rcx,QWORD PTR [rcx+0x8]
    6500e394:	call   0x6501d300
    6500e399:	mov    QWORD PTR [rbx+0x20],0x7
    6500e3a1:	mov    QWORD PTR [rbx+0x18],0x0
    6500e3a9:	mov    WORD PTR [rbx+0x8],0x0
    6500e3af:	add    rsp,0x20
    6500e3b3:	pop    rbx
    6500e3b4:	ret    
    6500e3b5:	int3   
    6500e3b6:	int3   
    6500e3b7:	int3   
    6500e3b8:	int3   
    6500e3b9:	int3   
    6500e3ba:	int3   
    6500e3bb:	int3   
    6500e3bc:	int3   
    6500e3bd:	int3   
    6500e3be:	int3   
    6500e3bf:	int3   
    6500e3c0:	mov    QWORD PTR [rsp+0x18],rbx
    6500e3c5:	mov    QWORD PTR [rsp+0x10],rdx
    6500e3ca:	mov    QWORD PTR [rsp+0x8],rcx
    6500e3cf:	push   rbp
    6500e3d0:	push   rsi
    6500e3d1:	push   rdi
    6500e3d2:	push   r12
    6500e3d4:	push   r13
    6500e3d6:	push   r14
    6500e3d8:	push   r15
    6500e3da:	sub    rsp,0x40
    6500e3de:	mov    rsi,QWORD PTR [rcx+0x8]
    6500e3e2:	xor    r14d,r14d
    6500e3e5:	or     r13d,0xffffffff
    6500e3e9:	mov    r9,QWORD PTR [rsi+0x8]
    6500e3ed:	mov    r15,r8
    6500e3f0:	mov    rbp,rdx
    6500e3f3:	cmp    BYTE PTR [r9+0x69],r14b
    6500e3f7:	mov    r10,rcx
    6500e3fa:	mov    dil,0x1
    6500e3fd:	mov    r12d,0x1
    6500e403:	jne    0x6500e4d1
    6500e409:	mov    r12,QWORD PTR [r8+0x18]
    6500e40d:	lea    ebp,[r13+0x2]
    6500e411:	cmp    QWORD PTR [r9+0x38],0x8
    6500e416:	mov    r11,QWORD PTR [r9+0x30]
    6500e41a:	mov    rsi,r9
    6500e41d:	jb     0x6500e425
    6500e41f:	mov    rdx,QWORD PTR [r9+0x20]
    6500e423:	jmp    0x6500e429
    6500e425:	lea    rdx,[r9+0x20]
    6500e429:	cmp    r12,r12
    6500e42c:	mov    r10,r12
    6500e42f:	cmovb  r10,r12
    6500e433:	cmp    QWORD PTR [r15+0x20],0x8
    6500e438:	jb     0x6500e440
    6500e43a:	mov    rcx,QWORD PTR [r15+0x8]
    6500e43e:	jmp    0x6500e444
    6500e440:	lea    rcx,[r15+0x8]
    6500e444:	cmp    r10,r11
    6500e447:	mov    r8,r11
    6500e44a:	cmovb  r8,r10
    6500e44e:	test   r8,r8
    6500e451:	je     0x6500e468
    6500e453:	movzx  eax,WORD PTR [rdx]
    6500e456:	cmp    WORD PTR [rcx],ax
    6500e459:	jne    0x6500e47f
    6500e45b:	add    rcx,0x2
    6500e45f:	add    rdx,0x2
    6500e463:	sub    r8,rbp
    6500e466:	jne    0x6500e453
    6500e468:	mov    r8d,r14d
    6500e46b:	or     ecx,0xffffffff
    6500e46e:	test   r8d,r8d
    6500e471:	movsxd rax,r8d
    6500e474:	jne    0x6500e499
    6500e476:	cmp    r10,r11
    6500e479:	jae    0x6500e490
    6500e47b:	mov    eax,ecx
    6500e47d:	jmp    0x6500e499
    6500e47f:	cmp    WORD PTR [rcx],ax
    6500e482:	mov    r8d,ebp
    6500e485:	mov    ecx,0xffffffff
    6500e48a:	cmovb  r8d,ecx
    6500e48e:	jmp    0x6500e46e
    6500e490:	cmp    r10,r11
    6500e493:	mov    eax,r14d
    6500e496:	setne  al
    6500e499:	test   eax,eax
    6500e49b:	sets   dil
    6500e49f:	test   dil,dil
    6500e4a2:	je     0x6500e4a9
    6500e4a4:	mov    r9,QWORD PTR [r9]
    6500e4a7:	jmp    0x6500e4ad
    6500e4a9:	mov    r9,QWORD PTR [r9+0x10]
    6500e4ad:	cmp    BYTE PTR [r9+0x69],r14b
    6500e4b1:	je     0x6500e411
    6500e4b7:	mov    rbp,QWORD PTR [rsp+0x88]
    6500e4bf:	mov    r10,QWORD PTR [rsp+0x80]
    6500e4c7:	mov    r12d,0x1
    6500e4cd:	or     r13d,0xffffffff
    6500e4d1:	test   dil,dil
    6500e4d4:	mov    rbx,rsi
    6500e4d7:	mov    QWORD PTR [rsp+0x30],r10
    6500e4dc:	mov    QWORD PTR [rsp+0x38],rbx
    6500e4e1:	je     0x6500e594
    6500e4e7:	mov    rax,QWORD PTR [r10+0x8]
    6500e4eb:	cmp    rsi,QWORD PTR [rax]
    6500e4ee:	jne    0x6500e4f8
    6500e4f0:	mov    r8b,0x1
    6500e4f3:	jmp    0x6500e625
    6500e4f8:	cmp    BYTE PTR [rsi+0x69],r14b
    6500e4fc:	je     0x6500e520
    6500e4fe:	mov    rbx,QWORD PTR [rsi+0x10]
    6500e502:	mov    QWORD PTR [rsp+0x38],rbx
    6500e507:	cmp    BYTE PTR [rbx+0x69],r14b
    6500e50b:	je     0x6500e594
    6500e511:	call   0x6501dad0
    6500e516:	mov    r10,QWORD PTR [rsp+0x80]
    6500e51e:	jmp    0x6500e594
    6500e520:	mov    rax,QWORD PTR [rsi]
    6500e523:	cmp    BYTE PTR [rax+0x69],r14b
    6500e527:	jne    0x6500e554
    6500e529:	mov    rbx,rax
    6500e52c:	mov    rax,QWORD PTR [rax+0x10]
    6500e530:	cmp    BYTE PTR [rax+0x69],r14b
    6500e534:	jne    0x6500e54d
    6500e536:	data16 data16 xchg ax,ax
    6500e53a:	data16 xchg ax,ax
    6500e53d:	data16 xchg ax,ax
    6500e540:	mov    rbx,rax
    6500e543:	mov    rax,QWORD PTR [rax+0x10]
    6500e547:	cmp    BYTE PTR [rax+0x69],r14b
    6500e54b:	je     0x6500e540
    6500e54d:	mov    QWORD PTR [rsp+0x38],rbx
    6500e552:	jmp    0x6500e594
    6500e554:	mov    rax,QWORD PTR [rsi+0x8]
    6500e558:	cmp    BYTE PTR [rax+0x69],r14b
    6500e55c:	jne    0x6500e577
    6500e55e:	xchg   ax,ax
    6500e560:	cmp    rbx,QWORD PTR [rax]
    6500e563:	jne    0x6500e577
    6500e565:	mov    rbx,rax
    6500e568:	mov    QWORD PTR [rsp+0x38],rax
    6500e56d:	mov    rax,QWORD PTR [rax+0x8]
    6500e571:	cmp    BYTE PTR [rax+0x69],r14b
    6500e575:	je     0x6500e560
    6500e577:	cmp    BYTE PTR [rbx+0x69],r14b
    6500e57b:	je     0x6500e58c
    6500e57d:	call   0x6501dad0
    6500e582:	mov    r10,QWORD PTR [rsp+0x80]
    6500e58a:	jmp    0x6500e594
    6500e58c:	mov    rbx,rax
    6500e58f:	mov    QWORD PTR [rsp+0x38],rax
    6500e594:	cmp    QWORD PTR [r15+0x20],0x8
    6500e599:	mov    r9,QWORD PTR [r15+0x18]
    6500e59d:	jb     0x6500e5a5
    6500e59f:	mov    rcx,QWORD PTR [r15+0x8]
    6500e5a3:	jmp    0x6500e5a9
    6500e5a5:	lea    rcx,[r15+0x8]
    6500e5a9:	mov    r8,QWORD PTR [rbx+0x30]
    6500e5ad:	cmp    r8,r8
    6500e5b0:	cmovb  r8,r8
    6500e5b4:	cmp    QWORD PTR [rbx+0x38],0x8
    6500e5b9:	jb     0x6500e5c1
    6500e5bb:	mov    rbx,QWORD PTR [rbx+0x20]
    6500e5bf:	jmp    0x6500e5c5
    6500e5c1:	add    rbx,0x20
    6500e5c5:	cmp    r8,r9
    6500e5c8:	mov    rdx,r9
    6500e5cb:	cmovb  rdx,r8
    6500e5cf:	test   rdx,rdx
    6500e5d2:	je     0x6500e5ea
    6500e5d4:	movzx  eax,WORD PTR [rcx]
    6500e5d7:	cmp    WORD PTR [rbx],ax
    6500e5da:	jne    0x6500e61b
    6500e5dc:	add    rbx,0x2
    6500e5e0:	add    rcx,0x2
    6500e5e4:	sub    rdx,0x1
    6500e5e8:	jne    0x6500e5d4
    6500e5ea:	mov    r12d,r14d
    6500e5ed:	test   r12d,r12d
    6500e5f0:	movsxd rax,r12d
    6500e5f3:	jne    0x6500e601
    6500e5f5:	cmp    r8,r9
    6500e5f8:	jb     0x6500e621
    6500e5fa:	setne  r14b
    6500e5fe:	mov    eax,r14d
    6500e601:	test   eax,eax
    6500e603:	js     0x6500e621
    6500e605:	lea    rcx,[rsp+0x30]
    6500e60a:	mov    BYTE PTR [rbp+0x10],0x0
    6500e60e:	mov    rax,QWORD PTR [rcx]
    6500e611:	mov    QWORD PTR [rbp+0x0],rax
    6500e615:	mov    rax,QWORD PTR [rcx+0x8]
    6500e619:	jmp    0x6500e649
    6500e61b:	cmovb  r12d,r13d
    6500e61f:	jmp    0x6500e5ed
    6500e621:	movzx  r8d,dil
    6500e625:	lea    rdx,[rsp+0x30]
    6500e62a:	mov    r9,rsi
    6500e62d:	mov    rcx,r10
    6500e630:	mov    QWORD PTR [rsp+0x20],r15
    6500e635:	call   0x6500f750
    6500e63a:	mov    BYTE PTR [rbp+0x10],0x1
    6500e63e:	mov    rcx,QWORD PTR [rax]
    6500e641:	mov    rax,QWORD PTR [rax+0x8]
    6500e645:	mov    QWORD PTR [rbp+0x0],rcx
    6500e649:	mov    rbx,QWORD PTR [rsp+0x90]
    6500e651:	mov    QWORD PTR [rbp+0x8],rax
    6500e655:	mov    rax,rbp
    6500e658:	add    rsp,0x40
    6500e65c:	pop    r15
    6500e65e:	pop    r14
    6500e660:	pop    r13
    6500e662:	pop    r12
    6500e664:	pop    rdi
    6500e665:	pop    rsi
    6500e666:	pop    rbp
    6500e667:	ret    
    6500e668:	int3   
    6500e669:	int3   
    6500e66a:	int3   
    6500e66b:	int3   
    6500e66c:	int3   
    6500e66d:	int3   
    6500e66e:	int3   
    6500e66f:	int3   
    6500e670:	mov    QWORD PTR [rsp+0x18],rbx
    6500e675:	mov    QWORD PTR [rsp+0x20],rbp
    6500e67a:	mov    QWORD PTR [rsp+0x10],rdx
    6500e67f:	push   rsi
    6500e680:	push   rdi
    6500e681:	push   r13
    6500e683:	push   r14
    6500e685:	push   r15
    6500e687:	sub    rsp,0x20
    6500e68b:	mov    rbx,QWORD PTR [rcx+0x8]
    6500e68f:	xor    edi,edi
    6500e691:	or     esi,0xffffffff
    6500e694:	mov    r9,QWORD PTR [rbx+0x8]
    6500e698:	mov    rbp,r8
    6500e69b:	mov    r15,rdx
    6500e69e:	cmp    BYTE PTR [r9+0x69],dil
    6500e6a2:	mov    r14,rcx
    6500e6a5:	mov    r13d,0x1
    6500e6ab:	jne    0x6500e760
    6500e6b1:	mov    r11,QWORD PTR [r8+0x18]
    6500e6b5:	mov    QWORD PTR [rsp+0x50],r12
    6500e6ba:	mov    r12,QWORD PTR [r8+0x20]
    6500e6be:	or     r15d,esi
    6500e6c1:	cmp    r12,0x8
    6500e6c5:	jb     0x6500e6cd
    6500e6c7:	mov    rdx,QWORD PTR [rbp+0x8]
    6500e6cb:	jmp    0x6500e6d1
    6500e6cd:	lea    rdx,[rbp+0x8]
    6500e6d1:	mov    r10,QWORD PTR [r9+0x30]
    6500e6d5:	cmp    r10,r10
    6500e6d8:	cmovb  r10,r10
    6500e6dc:	cmp    QWORD PTR [r9+0x38],0x8
    6500e6e1:	jb     0x6500e6e9
    6500e6e3:	mov    rcx,QWORD PTR [r9+0x20]
    6500e6e7:	jmp    0x6500e6ed
    6500e6e9:	lea    rcx,[r9+0x20]
    6500e6ed:	cmp    r10,r11
    6500e6f0:	mov    r8,r11
    6500e6f3:	cmovb  r8,r10
    6500e6f7:	test   r8,r8
    6500e6fa:	je     0x6500e715
    6500e6fc:	data16 data16 xchg ax,ax
    6500e700:	movzx  eax,WORD PTR [rdx]
    6500e703:	cmp    WORD PTR [rcx],ax
    6500e706:	jne    0x6500e739
    6500e708:	add    rcx,0x2
    6500e70c:	add    rdx,0x2
    6500e710:	sub    r8,r13
    6500e713:	jne    0x6500e700
    6500e715:	mov    r8d,edi
    6500e718:	test   r8d,r8d
    6500e71b:	movsxd rax,r8d
    6500e71e:	jne    0x6500e72d
    6500e720:	cmp    r10,r11
    6500e723:	jb     0x6500e745
    6500e725:	cmp    r10,r11
    6500e728:	mov    eax,edi
    6500e72a:	setne  al
    6500e72d:	test   eax,eax
    6500e72f:	js     0x6500e745
    6500e731:	mov    rbx,r9
    6500e734:	mov    r9,QWORD PTR [r9]
    6500e737:	jmp    0x6500e749
    6500e739:	cmp    WORD PTR [rcx],ax
    6500e73c:	mov    r8d,r13d
    6500e73f:	cmovb  r8d,r15d
    6500e743:	jmp    0x6500e718
    6500e745:	mov    r9,QWORD PTR [r9+0x10]
    6500e749:	cmp    BYTE PTR [r9+0x69],dil
    6500e74d:	je     0x6500e6c1
    6500e753:	mov    r15,QWORD PTR [rsp+0x58]
    6500e758:	mov    r12,QWORD PTR [rsp+0x50]
    6500e75d:	or     esi,0xffffffff
    6500e760:	mov    r11,QWORD PTR [r14+0x8]
    6500e764:	mov    QWORD PTR [rsp+0x8],rbx
    6500e769:	mov    QWORD PTR [rsp],r14
    6500e76d:	cmp    rbx,r11
    6500e770:	je     0x6500e7f7
    6500e776:	cmp    QWORD PTR [rbx+0x38],0x8
    6500e77b:	mov    r10,QWORD PTR [rbx+0x30]
    6500e77f:	jb     0x6500e787
    6500e781:	mov    rdx,QWORD PTR [rbx+0x20]
    6500e785:	jmp    0x6500e78b
    6500e787:	lea    rdx,[rbx+0x20]
    6500e78b:	mov    r9,QWORD PTR [rbp+0x18]
    6500e78f:	cmp    r9,r9
    6500e792:	cmovb  r9,r9
    6500e796:	cmp    QWORD PTR [rbp+0x20],0x8
    6500e79b:	jb     0x6500e7a3
    6500e79d:	mov    rcx,QWORD PTR [rbp+0x8]
    6500e7a1:	jmp    0x6500e7a7
    6500e7a3:	lea    rcx,[rbp+0x8]
    6500e7a7:	cmp    r9,r10
    6500e7aa:	mov    r8,r10
    6500e7ad:	cmovb  r8,r9
    6500e7b1:	test   r8,r8
    6500e7b4:	je     0x6500e7cb
    6500e7b6:	movzx  eax,WORD PTR [rdx]
    6500e7b9:	cmp    WORD PTR [rcx],ax
    6500e7bc:	jne    0x6500e7ee
    6500e7be:	add    rcx,0x2
    6500e7c2:	add    rdx,0x2
    6500e7c6:	sub    r8,r13
    6500e7c9:	jne    0x6500e7b6
    6500e7cb:	mov    r13d,edi
    6500e7ce:	test   r13d,r13d
    6500e7d1:	movsxd rax,r13d
    6500e7d4:	jne    0x6500e7e4
    6500e7d6:	cmp    r9,r10
    6500e7d9:	jb     0x6500e7f7
    6500e7db:	cmp    r9,r10
    6500e7de:	setne  dil
    6500e7e2:	mov    eax,edi
    6500e7e4:	test   eax,eax
    6500e7e6:	js     0x6500e7f7
    6500e7e8:	lea    rcx,[rsp]
    6500e7ec:	jmp    0x6500e806
    6500e7ee:	cmp    WORD PTR [rcx],ax
    6500e7f1:	cmovb  r13d,esi
    6500e7f5:	jmp    0x6500e7ce
    6500e7f7:	mov    QWORD PTR [rsp+0x18],r11
    6500e7fc:	mov    QWORD PTR [rsp+0x10],r14
    6500e801:	lea    rcx,[rsp+0x10]
    6500e806:	mov    rax,QWORD PTR [rcx]
    6500e809:	mov    rbx,QWORD PTR [rsp+0x60]
    6500e80e:	mov    rbp,QWORD PTR [rsp+0x68]
    6500e813:	mov    QWORD PTR [r15],rax
    6500e816:	mov    rax,QWORD PTR [rcx+0x8]
    6500e81a:	mov    QWORD PTR [r15+0x8],rax
    6500e81e:	mov    rax,r15
    6500e821:	add    rsp,0x20
    6500e825:	pop    r15
    6500e827:	pop    r14
    6500e829:	pop    r13
    6500e82b:	pop    rdi
    6500e82c:	pop    rsi
    6500e82d:	ret    
    6500e82e:	int3   
    6500e82f:	int3   
    6500e830:	mov    QWORD PTR [rsp+0x8],rcx
    6500e835:	push   rdi
    6500e836:	sub    rsp,0x30
    6500e83a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500e843:	mov    QWORD PTR [rsp+0x48],rbx
    6500e848:	mov    rbx,rdx
    6500e84b:	mov    rdi,rcx
    6500e84e:	call   0x6501d3e0
    6500e853:	nop
    6500e854:	lea    rax,[rip+0x26975]        # 0x650351d0
    6500e85b:	mov    QWORD PTR [rdi],rax
    6500e85e:	lea    rdx,[rbx+0x18]
    6500e862:	lea    rcx,[rdi+0x18]
    6500e866:	mov    QWORD PTR [rcx+0x20],0xf
    6500e86e:	mov    QWORD PTR [rcx+0x18],0x0
    6500e876:	mov    BYTE PTR [rcx+0x8],0x0
    6500e87a:	or     r9,0xffffffffffffffff
    6500e87e:	xor    r8d,r8d
    6500e881:	call   0x65001e20
    6500e886:	nop
    6500e887:	lea    rax,[rip+0x2695a]        # 0x650351e8
    6500e88e:	mov    QWORD PTR [rdi],rax
    6500e891:	mov    rax,rdi
    6500e894:	mov    rbx,QWORD PTR [rsp+0x48]
    6500e899:	add    rsp,0x30
    6500e89d:	pop    rdi
    6500e89e:	ret    
    6500e89f:	int3   
    6500e8a0:	rex push rbp
    6500e8a2:	sub    rsp,0x20
    6500e8a6:	mov    rbp,rdx
    6500e8a9:	mov    rcx,QWORD PTR [rbp+0x40]
    6500e8ad:	call   0x6501d490
    6500e8b2:	add    rsp,0x20
    6500e8b6:	pop    rbp
    6500e8b7:	ret    
    6500e8b8:	int3   
    6500e8b9:	int3   
    6500e8ba:	int3   
    6500e8bb:	int3   
    6500e8bc:	int3   
    6500e8bd:	int3   
    6500e8be:	int3   
    6500e8bf:	int3   
    6500e8c0:	mov    rax,rsp
    6500e8c3:	push   r12
    6500e8c5:	sub    rsp,0x90
    6500e8cc:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500e8d5:	mov    QWORD PTR [rax+0x8],rbx
    6500e8d9:	mov    QWORD PTR [rax+0x10],rsi
    6500e8dd:	mov    QWORD PTR [rax+0x18],rdi
    6500e8e1:	mov    rsi,r8
    6500e8e4:	mov    r12,rdx
    6500e8e7:	mov    rdi,rcx
    6500e8ea:	mov    rbx,QWORD PTR [r8+0x8]
    6500e8ee:	cmp    BYTE PTR [rbx+0x41],0x0
    6500e8f2:	je     0x6500e9c9
    6500e8f8:	mov    QWORD PTR [rax-0x50],0xf
    6500e900:	mov    QWORD PTR [rax-0x58],0x0
    6500e908:	mov    BYTE PTR [rax-0x68],0x0
    6500e90c:	xor    r8d,r8d
    6500e90f:	lea    edx,[r8+0x1b]
    6500e913:	lea    rcx,[rax-0x70]
    6500e917:	call   0x65002330
    6500e91c:	lea    rcx,[rsp+0x30]
    6500e921:	mov    rdx,QWORD PTR [rsp+0x48]
    6500e926:	cmp    rdx,0x10
    6500e92a:	cmovae rcx,QWORD PTR [rsp+0x30]
    6500e930:	mov    r9d,0x1b
    6500e936:	lea    r8,[rip+0x2a463]        # 0x65038da0
    6500e93d:	call   0x6501d7b0
    6500e942:	mov    QWORD PTR [rsp+0x40],0x1b
    6500e94b:	lea    rax,[rsp+0x30]
    6500e950:	cmp    QWORD PTR [rsp+0x48],0x10
    6500e956:	cmovae rax,QWORD PTR [rsp+0x30]
    6500e95c:	mov    BYTE PTR [rax+0x1b],0x0
    6500e960:	lea    rcx,[rsp+0x50]
    6500e965:	call   0x6501d310
    6500e96a:	nop
    6500e96b:	lea    rax,[rip+0x2685e]        # 0x650351d0
    6500e972:	mov    QWORD PTR [rsp+0x50],rax
    6500e977:	mov    QWORD PTR [rsp+0x88],0xf
    6500e983:	mov    QWORD PTR [rsp+0x80],0x0
    6500e98f:	mov    BYTE PTR [rsp+0x70],0x0
    6500e994:	or     r9,0xffffffffffffffff
    6500e998:	xor    r8d,r8d
    6500e99b:	lea    rdx,[rsp+0x28]
    6500e9a0:	lea    rcx,[rsp+0x68]
    6500e9a5:	call   0x65001e20
    6500e9aa:	nop
    6500e9ab:	lea    rax,[rip+0x2684e]        # 0x65035200
    6500e9b2:	mov    QWORD PTR [rsp+0x50],rax
    6500e9b7:	lea    rdx,[rip+0x32b52]        # 0x65041510
    6500e9be:	lea    rcx,[rsp+0x50]
    6500e9c3:	call   0x6501dc60
    6500e9c8:	nop
    6500e9c9:	cmp    QWORD PTR [r8],0x0
    6500e9cd:	jne    0x6500e9d4
    6500e9cf:	call   0x6501dad0
    6500e9d4:	mov    rax,QWORD PTR [rsi+0x8]
    6500e9d8:	cmp    BYTE PTR [rax+0x41],0x0
    6500e9dc:	je     0x6500e9e5
    6500e9de:	call   0x6501dad0
    6500e9e3:	jmp    0x6500ea3c
    6500e9e5:	mov    rcx,QWORD PTR [rax+0x10]
    6500e9e9:	cmp    BYTE PTR [rcx+0x41],0x0
    6500e9ed:	jne    0x6500ea12
    6500e9ef:	mov    rax,QWORD PTR [rcx]
    6500e9f2:	cmp    BYTE PTR [rax+0x41],0x0
    6500e9f6:	jne    0x6500ea0c
    6500e9f8:	data16 data16 xchg ax,ax
    6500e9fc:	data16 data16 xchg ax,ax
    6500ea00:	mov    rcx,rax
    6500ea03:	mov    rax,QWORD PTR [rax]
    6500ea06:	cmp    BYTE PTR [rax+0x41],0x0
    6500ea0a:	je     0x6500ea00
    6500ea0c:	mov    QWORD PTR [rsi+0x8],rcx
    6500ea10:	jmp    0x6500ea3c
    6500ea12:	mov    rcx,QWORD PTR [rax+0x8]
    6500ea16:	cmp    BYTE PTR [rcx+0x41],0x0
    6500ea1a:	jne    0x6500ea38
    6500ea1c:	data16 data16 xchg ax,ax
    6500ea20:	mov    rax,QWORD PTR [rcx+0x10]
    6500ea24:	cmp    QWORD PTR [rsi+0x8],rax
    6500ea28:	jne    0x6500ea38
    6500ea2a:	mov    QWORD PTR [rsi+0x8],rcx
    6500ea2e:	mov    rcx,QWORD PTR [rcx+0x8]
    6500ea32:	cmp    BYTE PTR [rcx+0x41],0x0
    6500ea36:	je     0x6500ea20
    6500ea38:	mov    QWORD PTR [rsi+0x8],rcx
    6500ea3c:	mov    rcx,QWORD PTR [rbx]
    6500ea3f:	cmp    BYTE PTR [rcx+0x41],0x0
    6500ea43:	je     0x6500ea4b
    6500ea45:	mov    r8,QWORD PTR [rbx+0x10]
    6500ea49:	jmp    0x6500ea6b
    6500ea4b:	mov    rax,QWORD PTR [rbx+0x10]
    6500ea4f:	cmp    BYTE PTR [rax+0x41],0x0
    6500ea53:	je     0x6500ea5a
    6500ea55:	mov    r8,rcx
    6500ea58:	jmp    0x6500ea6b
    6500ea5a:	mov    r9,QWORD PTR [rsi+0x8]
    6500ea5e:	mov    r8,QWORD PTR [r9+0x10]
    6500ea62:	cmp    r9,rbx
    6500ea65:	jne    0x6500eb13
    6500ea6b:	mov    rdx,QWORD PTR [rbx+0x8]
    6500ea6f:	cmp    BYTE PTR [r8+0x41],0x0
    6500ea74:	jne    0x6500ea7a
    6500ea76:	mov    QWORD PTR [r8+0x8],rdx
    6500ea7a:	mov    rax,QWORD PTR [rdi+0x8]
    6500ea7e:	cmp    QWORD PTR [rax+0x8],rbx
    6500ea82:	jne    0x6500ea8a
    6500ea84:	mov    QWORD PTR [rax+0x8],r8
    6500ea88:	jmp    0x6500ea98
    6500ea8a:	cmp    QWORD PTR [rdx],rbx
    6500ea8d:	jne    0x6500ea94
    6500ea8f:	mov    QWORD PTR [rdx],r8
    6500ea92:	jmp    0x6500ea98
    6500ea94:	mov    QWORD PTR [rdx+0x10],r8
    6500ea98:	mov    r9,QWORD PTR [rdi+0x8]
    6500ea9c:	cmp    QWORD PTR [r9],rbx
    6500ea9f:	jne    0x6500eacf
    6500eaa1:	cmp    BYTE PTR [r8+0x41],0x0
    6500eaa6:	je     0x6500eaad
    6500eaa8:	mov    rcx,rdx
    6500eaab:	jmp    0x6500eacc
    6500eaad:	mov    rcx,r8
    6500eab0:	mov    rax,QWORD PTR [r8]
    6500eab3:	cmp    BYTE PTR [rax+0x41],0x0
    6500eab7:	jne    0x6500eacc
    6500eab9:	data16 xchg ax,ax
    6500eabc:	data16 data16 xchg ax,ax
    6500eac0:	mov    rcx,rax
    6500eac3:	mov    rax,QWORD PTR [rax]
    6500eac6:	cmp    BYTE PTR [rax+0x41],0x0
    6500eaca:	je     0x6500eac0
    6500eacc:	mov    QWORD PTR [r9],rcx
    6500eacf:	mov    r9,QWORD PTR [rdi+0x8]
    6500ead3:	cmp    QWORD PTR [r9+0x10],rbx
    6500ead7:	jne    0x6500eb84
    6500eadd:	cmp    BYTE PTR [r8+0x41],0x0
    6500eae2:	je     0x6500eae9
    6500eae4:	mov    rcx,rdx
    6500eae7:	jmp    0x6500eb0d
    6500eae9:	mov    rcx,r8
    6500eaec:	mov    rax,QWORD PTR [r8+0x10]
    6500eaf0:	cmp    BYTE PTR [rax+0x41],0x0
    6500eaf4:	jne    0x6500eb0d
    6500eaf6:	data16 data16 xchg ax,ax
    6500eafa:	data16 xchg ax,ax
    6500eafd:	data16 xchg ax,ax
    6500eb00:	mov    rcx,rax
    6500eb03:	mov    rax,QWORD PTR [rax+0x10]
    6500eb07:	cmp    BYTE PTR [rax+0x41],0x0
    6500eb0b:	je     0x6500eb00
    6500eb0d:	mov    QWORD PTR [r9+0x10],rcx
    6500eb11:	jmp    0x6500eb84
    6500eb13:	mov    QWORD PTR [rcx+0x8],r9
    6500eb17:	mov    rax,QWORD PTR [rbx]
    6500eb1a:	mov    QWORD PTR [r9],rax
    6500eb1d:	cmp    r9,QWORD PTR [rbx+0x10]
    6500eb21:	jne    0x6500eb28
    6500eb23:	mov    rdx,r9
    6500eb26:	jmp    0x6500eb4a
    6500eb28:	mov    rdx,QWORD PTR [r9+0x8]
    6500eb2c:	cmp    BYTE PTR [r8+0x41],0x0
    6500eb31:	jne    0x6500eb37
    6500eb33:	mov    QWORD PTR [r8+0x8],rdx
    6500eb37:	mov    QWORD PTR [rdx],r8
    6500eb3a:	mov    rax,QWORD PTR [rbx+0x10]
    6500eb3e:	mov    QWORD PTR [r9+0x10],rax
    6500eb42:	mov    rax,QWORD PTR [rbx+0x10]
    6500eb46:	mov    QWORD PTR [rax+0x8],r9
    6500eb4a:	mov    rax,QWORD PTR [rdi+0x8]
    6500eb4e:	cmp    QWORD PTR [rax+0x8],rbx
    6500eb52:	jne    0x6500eb5a
    6500eb54:	mov    QWORD PTR [rax+0x8],r9
    6500eb58:	jmp    0x6500eb6c
    6500eb5a:	mov    rax,QWORD PTR [rbx+0x8]
    6500eb5e:	cmp    QWORD PTR [rax],rbx
    6500eb61:	jne    0x6500eb68
    6500eb63:	mov    QWORD PTR [rax],r9
    6500eb66:	jmp    0x6500eb6c
    6500eb68:	mov    QWORD PTR [rax+0x10],r9
    6500eb6c:	mov    rax,QWORD PTR [rbx+0x8]
    6500eb70:	mov    QWORD PTR [r9+0x8],rax
    6500eb74:	movzx  ecx,BYTE PTR [r9+0x40]
    6500eb79:	movzx  eax,BYTE PTR [rbx+0x40]
    6500eb7d:	mov    BYTE PTR [r9+0x40],al
    6500eb81:	mov    BYTE PTR [rbx+0x40],cl
    6500eb84:	cmp    BYTE PTR [rbx+0x40],0x1
    6500eb88:	jne    0x6500ee73
    6500eb8e:	mov    rax,QWORD PTR [rdi+0x8]
    6500eb92:	cmp    r8,QWORD PTR [rax+0x8]
    6500eb96:	je     0x6500ee6e
    6500eb9c:	data16 data16 xchg ax,ax
    6500eba0:	cmp    BYTE PTR [r8+0x40],0x1
    6500eba5:	jne    0x6500ee6e
    6500ebab:	mov    rcx,QWORD PTR [rdx]
    6500ebae:	cmp    r8,rcx
    6500ebb1:	jne    0x6500ec4b
    6500ebb7:	mov    rcx,QWORD PTR [rdx+0x10]
    6500ebbb:	cmp    BYTE PTR [rcx+0x40],0x0
    6500ebbf:	jne    0x6500ec16
    6500ebc1:	mov    BYTE PTR [rcx+0x40],0x1
    6500ebc5:	mov    BYTE PTR [rdx+0x40],0x0
    6500ebc9:	mov    rcx,QWORD PTR [rdx+0x10]
    6500ebcd:	mov    rax,QWORD PTR [rcx]
    6500ebd0:	mov    QWORD PTR [rdx+0x10],rax
    6500ebd4:	mov    rax,QWORD PTR [rcx]
    6500ebd7:	cmp    BYTE PTR [rax+0x41],0x0
    6500ebdb:	jne    0x6500ebe1
    6500ebdd:	mov    QWORD PTR [rax+0x8],rdx
    6500ebe1:	mov    rax,QWORD PTR [rdx+0x8]
    6500ebe5:	mov    QWORD PTR [rcx+0x8],rax
    6500ebe9:	mov    rax,QWORD PTR [rdi+0x8]
    6500ebed:	cmp    rdx,QWORD PTR [rax+0x8]
    6500ebf1:	jne    0x6500ebf9
    6500ebf3:	mov    QWORD PTR [rax+0x8],rcx
    6500ebf7:	jmp    0x6500ec0b
    6500ebf9:	mov    rax,QWORD PTR [rdx+0x8]
    6500ebfd:	cmp    rdx,QWORD PTR [rax]
    6500ec00:	jne    0x6500ec07
    6500ec02:	mov    QWORD PTR [rax],rcx
    6500ec05:	jmp    0x6500ec0b
    6500ec07:	mov    QWORD PTR [rax+0x10],rcx
    6500ec0b:	mov    QWORD PTR [rcx],rdx
    6500ec0e:	mov    QWORD PTR [rdx+0x8],rcx
    6500ec12:	mov    rcx,QWORD PTR [rdx+0x10]
    6500ec16:	cmp    BYTE PTR [rcx+0x41],0x0
    6500ec1a:	je     0x6500ec24
    6500ec1c:	mov    r8,rdx
    6500ec1f:	jmp    0x6500ecd4
    6500ec24:	mov    rax,QWORD PTR [rcx]
    6500ec27:	cmp    BYTE PTR [rax+0x40],0x1
    6500ec2b:	jne    0x6500eceb
    6500ec31:	mov    rax,QWORD PTR [rcx+0x10]
    6500ec35:	cmp    BYTE PTR [rax+0x40],0x1
    6500ec39:	jne    0x6500eceb
    6500ec3f:	mov    BYTE PTR [rcx+0x40],0x0
    6500ec43:	mov    r8,rdx
    6500ec46:	jmp    0x6500ecd4
    6500ec4b:	cmp    BYTE PTR [rcx+0x40],0x0
    6500ec4f:	jne    0x6500eca7
    6500ec51:	mov    BYTE PTR [rcx+0x40],0x1
    6500ec55:	mov    BYTE PTR [rdx+0x40],0x0
    6500ec59:	mov    rcx,QWORD PTR [rdx]
    6500ec5c:	mov    rax,QWORD PTR [rcx+0x10]
    6500ec60:	mov    QWORD PTR [rdx],rax
    6500ec63:	mov    rax,QWORD PTR [rcx+0x10]
    6500ec67:	cmp    BYTE PTR [rax+0x41],0x0
    6500ec6b:	jne    0x6500ec71
    6500ec6d:	mov    QWORD PTR [rax+0x8],rdx
    6500ec71:	mov    rax,QWORD PTR [rdx+0x8]
    6500ec75:	mov    QWORD PTR [rcx+0x8],rax
    6500ec79:	mov    rax,QWORD PTR [rdi+0x8]
    6500ec7d:	cmp    rdx,QWORD PTR [rax+0x8]
    6500ec81:	jne    0x6500ec89
    6500ec83:	mov    QWORD PTR [rax+0x8],rcx
    6500ec87:	jmp    0x6500ec9c
    6500ec89:	mov    rax,QWORD PTR [rdx+0x8]
    6500ec8d:	cmp    rdx,QWORD PTR [rax+0x10]
    6500ec91:	jne    0x6500ec99
    6500ec93:	mov    QWORD PTR [rax+0x10],rcx
    6500ec97:	jmp    0x6500ec9c
    6500ec99:	mov    QWORD PTR [rax],rcx
    6500ec9c:	mov    QWORD PTR [rcx+0x10],rdx
    6500eca0:	mov    QWORD PTR [rdx+0x8],rcx
    6500eca4:	mov    rcx,QWORD PTR [rdx]
    6500eca7:	cmp    BYTE PTR [rcx+0x41],0x0
    6500ecab:	je     0x6500ecb2
    6500ecad:	mov    r8,rdx
    6500ecb0:	jmp    0x6500ecd4
    6500ecb2:	mov    rax,QWORD PTR [rcx+0x10]
    6500ecb6:	cmp    BYTE PTR [rax+0x40],0x1
    6500ecba:	jne    0x6500edb0
    6500ecc0:	mov    rax,QWORD PTR [rcx]
    6500ecc3:	cmp    BYTE PTR [rax+0x40],0x1
    6500ecc7:	jne    0x6500edb0
    6500eccd:	mov    BYTE PTR [rcx+0x40],0x0
    6500ecd1:	mov    r8,rdx
    6500ecd4:	mov    rdx,QWORD PTR [rdx+0x8]
    6500ecd8:	mov    rax,QWORD PTR [rdi+0x8]
    6500ecdc:	cmp    r8,QWORD PTR [rax+0x8]
    6500ece0:	je     0x6500ee6e
    6500ece6:	jmp    0x6500eba0
    6500eceb:	mov    rax,QWORD PTR [rcx+0x10]
    6500ecef:	cmp    BYTE PTR [rax+0x40],0x1
    6500ecf3:	jne    0x6500ed4f
    6500ecf5:	mov    rax,QWORD PTR [rcx]
    6500ecf8:	mov    BYTE PTR [rax+0x40],0x1
    6500ecfc:	mov    BYTE PTR [rcx+0x40],0x0
    6500ed00:	mov    r9,QWORD PTR [rcx]
    6500ed03:	mov    rax,QWORD PTR [r9+0x10]
    6500ed07:	mov    QWORD PTR [rcx],rax
    6500ed0a:	mov    rax,QWORD PTR [r9+0x10]
    6500ed0e:	cmp    BYTE PTR [rax+0x41],0x0
    6500ed12:	jne    0x6500ed18
    6500ed14:	mov    QWORD PTR [rax+0x8],rcx
    6500ed18:	mov    rax,QWORD PTR [rcx+0x8]
    6500ed1c:	mov    QWORD PTR [r9+0x8],rax
    6500ed20:	mov    rax,QWORD PTR [rdi+0x8]
    6500ed24:	cmp    rcx,QWORD PTR [rax+0x8]
    6500ed28:	jne    0x6500ed30
    6500ed2a:	mov    QWORD PTR [rax+0x8],r9
    6500ed2e:	jmp    0x6500ed43
    6500ed30:	mov    rax,QWORD PTR [rcx+0x8]
    6500ed34:	cmp    rcx,QWORD PTR [rax+0x10]
    6500ed38:	jne    0x6500ed40
    6500ed3a:	mov    QWORD PTR [rax+0x10],r9
    6500ed3e:	jmp    0x6500ed43
    6500ed40:	mov    QWORD PTR [rax],r9
    6500ed43:	mov    QWORD PTR [r9+0x10],rcx
    6500ed47:	mov    QWORD PTR [rcx+0x8],r9
    6500ed4b:	mov    rcx,QWORD PTR [rdx+0x10]
    6500ed4f:	movzx  eax,BYTE PTR [rdx+0x40]
    6500ed53:	mov    BYTE PTR [rcx+0x40],al
    6500ed56:	mov    BYTE PTR [rdx+0x40],0x1
    6500ed5a:	mov    rax,QWORD PTR [rcx+0x10]
    6500ed5e:	mov    BYTE PTR [rax+0x40],0x1
    6500ed62:	mov    rcx,QWORD PTR [rdx+0x10]
    6500ed66:	mov    rax,QWORD PTR [rcx]
    6500ed69:	mov    QWORD PTR [rdx+0x10],rax
    6500ed6d:	mov    rax,QWORD PTR [rcx]
    6500ed70:	cmp    BYTE PTR [rax+0x41],0x0
    6500ed74:	jne    0x6500ed7a
    6500ed76:	mov    QWORD PTR [rax+0x8],rdx
    6500ed7a:	mov    rax,QWORD PTR [rdx+0x8]
    6500ed7e:	mov    QWORD PTR [rcx+0x8],rax
    6500ed82:	mov    rax,QWORD PTR [rdi+0x8]
    6500ed86:	cmp    rdx,QWORD PTR [rax+0x8]
    6500ed8a:	jne    0x6500ed92
    6500ed8c:	mov    QWORD PTR [rax+0x8],rcx
    6500ed90:	jmp    0x6500eda4
    6500ed92:	mov    rax,QWORD PTR [rdx+0x8]
    6500ed96:	cmp    rdx,QWORD PTR [rax]
    6500ed99:	jne    0x6500eda0
    6500ed9b:	mov    QWORD PTR [rax],rcx
    6500ed9e:	jmp    0x6500eda4
    6500eda0:	mov    QWORD PTR [rax+0x10],rcx
    6500eda4:	mov    QWORD PTR [rcx],rdx
    6500eda7:	mov    QWORD PTR [rdx+0x8],rcx
    6500edab:	jmp    0x6500ee6e
    6500edb0:	mov    rax,QWORD PTR [rcx]
    6500edb3:	cmp    BYTE PTR [rax+0x40],0x1
    6500edb7:	jne    0x6500ee11
    6500edb9:	mov    rax,QWORD PTR [rcx+0x10]
    6500edbd:	mov    BYTE PTR [rax+0x40],0x1
    6500edc1:	mov    BYTE PTR [rcx+0x40],0x0
    6500edc5:	mov    r9,QWORD PTR [rcx+0x10]
    6500edc9:	mov    rax,QWORD PTR [r9]
    6500edcc:	mov    QWORD PTR [rcx+0x10],rax
    6500edd0:	mov    rax,QWORD PTR [r9]
    6500edd3:	cmp    BYTE PTR [rax+0x41],0x0
    6500edd7:	jne    0x6500eddd
    6500edd9:	mov    QWORD PTR [rax+0x8],rcx
    6500eddd:	mov    rax,QWORD PTR [rcx+0x8]
    6500ede1:	mov    QWORD PTR [r9+0x8],rax
    6500ede5:	mov    rax,QWORD PTR [rdi+0x8]
    6500ede9:	cmp    rcx,QWORD PTR [rax+0x8]
    6500eded:	jne    0x6500edf5
    6500edef:	mov    QWORD PTR [rax+0x8],r9
    6500edf3:	jmp    0x6500ee07
    6500edf5:	mov    rax,QWORD PTR [rcx+0x8]
    6500edf9:	cmp    rcx,QWORD PTR [rax]
    6500edfc:	jne    0x6500ee03
    6500edfe:	mov    QWORD PTR [rax],r9
    6500ee01:	jmp    0x6500ee07
    6500ee03:	mov    QWORD PTR [rax+0x10],r9
    6500ee07:	mov    QWORD PTR [r9],rcx
    6500ee0a:	mov    QWORD PTR [rcx+0x8],r9
    6500ee0e:	mov    rcx,QWORD PTR [rdx]
    6500ee11:	movzx  eax,BYTE PTR [rdx+0x40]
    6500ee15:	mov    BYTE PTR [rcx+0x40],al
    6500ee18:	mov    BYTE PTR [rdx+0x40],0x1
    6500ee1c:	mov    rax,QWORD PTR [rcx]
    6500ee1f:	mov    BYTE PTR [rax+0x40],0x1
    6500ee23:	mov    rcx,QWORD PTR [rdx]
    6500ee26:	mov    rax,QWORD PTR [rcx+0x10]
    6500ee2a:	mov    QWORD PTR [rdx],rax
    6500ee2d:	mov    rax,QWORD PTR [rcx+0x10]
    6500ee31:	cmp    BYTE PTR [rax+0x41],0x0
    6500ee35:	jne    0x6500ee3b
    6500ee37:	mov    QWORD PTR [rax+0x8],rdx
    6500ee3b:	mov    rax,QWORD PTR [rdx+0x8]
    6500ee3f:	mov    QWORD PTR [rcx+0x8],rax
    6500ee43:	mov    rax,QWORD PTR [rdi+0x8]
    6500ee47:	cmp    rdx,QWORD PTR [rax+0x8]
    6500ee4b:	jne    0x6500ee53
    6500ee4d:	mov    QWORD PTR [rax+0x8],rcx
    6500ee51:	jmp    0x6500ee66
    6500ee53:	mov    rax,QWORD PTR [rdx+0x8]
    6500ee57:	cmp    rdx,QWORD PTR [rax+0x10]
    6500ee5b:	jne    0x6500ee63
    6500ee5d:	mov    QWORD PTR [rax+0x10],rcx
    6500ee61:	jmp    0x6500ee66
    6500ee63:	mov    QWORD PTR [rax],rcx
    6500ee66:	mov    QWORD PTR [rcx+0x10],rdx
    6500ee6a:	mov    QWORD PTR [rdx+0x8],rcx
    6500ee6e:	mov    BYTE PTR [r8+0x40],0x1
    6500ee73:	cmp    QWORD PTR [rbx+0x38],0x10
    6500ee78:	jb     0x6500ee83
    6500ee7a:	mov    rcx,QWORD PTR [rbx+0x20]
    6500ee7e:	call   0x6501d300
    6500ee83:	mov    QWORD PTR [rbx+0x38],0xf
    6500ee8b:	mov    QWORD PTR [rbx+0x30],0x0
    6500ee93:	mov    BYTE PTR [rbx+0x20],0x0
    6500ee97:	mov    rcx,rbx
    6500ee9a:	call   0x6501d300
    6500ee9f:	mov    rax,QWORD PTR [rdi+0x10]
    6500eea3:	test   rax,rax
    6500eea6:	je     0x6500eeb0
    6500eea8:	add    rax,0xffffffffffffffff
    6500eeac:	mov    QWORD PTR [rdi+0x10],rax
    6500eeb0:	mov    rax,QWORD PTR [rsi]
    6500eeb3:	mov    QWORD PTR [r12],rax
    6500eeb7:	mov    rax,QWORD PTR [rsi+0x8]
    6500eebb:	mov    QWORD PTR [r12+0x8],rax
    6500eec0:	mov    rax,r12
    6500eec3:	lea    r11,[rsp+0x90]
    6500eecb:	mov    rbx,QWORD PTR [r11+0x10]
    6500eecf:	mov    rsi,QWORD PTR [r11+0x18]
    6500eed3:	mov    rdi,QWORD PTR [r11+0x20]
    6500eed7:	mov    rsp,r11
    6500eeda:	pop    r12
    6500eedc:	ret    
    6500eedd:	int3   
    6500eede:	int3   
    6500eedf:	int3   
    6500eee0:	rex push rbp
    6500eee2:	sub    rsp,0x20
    6500eee6:	mov    rbp,rdx
    6500eee9:	lea    rcx,[rbp+0x28]
    6500eeed:	call   0x65001c70
    6500eef2:	add    rsp,0x20
    6500eef6:	pop    rbp
    6500eef7:	ret    
    6500eef8:	int3   
    6500eef9:	int3   
    6500eefa:	int3   
    6500eefb:	int3   
    6500eefc:	int3   
    6500eefd:	int3   
    6500eefe:	int3   
    6500eeff:	int3   
    6500ef00:	rex push rbp
    6500ef02:	sub    rsp,0x20
    6500ef06:	mov    rbp,rdx
    6500ef09:	lea    rcx,[rbp+0x50]
    6500ef0d:	call   0x6501d490
    6500ef12:	add    rsp,0x20
    6500ef16:	pop    rbp
    6500ef17:	ret    
    6500ef18:	int3   
    6500ef19:	int3   
    6500ef1a:	int3   
    6500ef1b:	int3   
    6500ef1c:	int3   
    6500ef1d:	int3   
    6500ef1e:	int3   
    6500ef1f:	int3   
    6500ef20:	mov    QWORD PTR [rsp+0x8],rcx
    6500ef25:	push   rbx
    6500ef26:	push   rsi
    6500ef27:	push   rdi
    6500ef28:	sub    rsp,0x40
    6500ef2c:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500ef35:	mov    rsi,rdx
    6500ef38:	mov    rbx,rcx
    6500ef3b:	mov    rax,QWORD PTR [rcx+0x8]
    6500ef3f:	mov    QWORD PTR [rsp+0x68],rax
    6500ef44:	cmp    BYTE PTR [rdx+0x41],0x0
    6500ef48:	jne    0x6500efa9
    6500ef4a:	mov    rdx,rax
    6500ef4d:	lea    r9,[rsi+0x18]
    6500ef51:	movzx  eax,BYTE PTR [rsi+0x40]
    6500ef55:	mov    BYTE PTR [rsp+0x28],al
    6500ef59:	mov    QWORD PTR [rsp+0x20],r9
    6500ef5e:	mov    r9,rdx
    6500ef61:	call   0x6500f070
    6500ef66:	mov    rdi,rax
    6500ef69:	mov    rax,QWORD PTR [rsp+0x68]
    6500ef6e:	cmp    BYTE PTR [rax+0x41],0x0
    6500ef72:	cmovne rax,rdi
    6500ef76:	mov    QWORD PTR [rsp+0x68],rax
    6500ef7b:	mov    QWORD PTR [rsp+0x78],rax
    6500ef80:	mov    r8,rdi
    6500ef83:	mov    rdx,QWORD PTR [rsi]
    6500ef86:	mov    rcx,rbx
    6500ef89:	call   0x6500ef20
    6500ef8e:	mov    QWORD PTR [rdi],rax
    6500ef91:	mov    r8,rdi
    6500ef94:	mov    rdx,QWORD PTR [rsi+0x10]
    6500ef98:	mov    rcx,rbx
    6500ef9b:	call   0x6500ef20
    6500efa0:	mov    QWORD PTR [rdi+0x10],rax
    6500efa4:	mov    rax,QWORD PTR [rsp+0x68]
    6500efa9:	add    rsp,0x40
    6500efad:	pop    rdi
    6500efae:	pop    rsi
    6500efaf:	pop    rbx
    6500efb0:	ret    
    6500efb1:	int3   
    6500efb2:	int3   
    6500efb3:	int3   
    6500efb4:	int3   
    6500efb5:	int3   
    6500efb6:	int3   
    6500efb7:	int3   
    6500efb8:	int3   
    6500efb9:	int3   
    6500efba:	int3   
    6500efbb:	int3   
    6500efbc:	int3   
    6500efbd:	int3   
    6500efbe:	int3   
    6500efbf:	int3   
    6500efc0:	mov    QWORD PTR [rsp+0x10],rdx
    6500efc5:	push   rbp
    6500efc6:	sub    rsp,0x30
    6500efca:	mov    rbp,rdx
    6500efcd:	mov    rdx,QWORD PTR [rbp+0x78]
    6500efd1:	mov    rcx,QWORD PTR [rbp+0x60]
    6500efd5:	call   0x6500fb40
    6500efda:	xor    edx,edx
    6500efdc:	xor    ecx,ecx
    6500efde:	call   0x6501dc60
    6500efe3:	nop
    6500efe4:	add    rsp,0x30
    6500efe8:	pop    rbp
    6500efe9:	ret    
    6500efea:	int3   
    6500efeb:	int3   
    6500efec:	int3   
    6500efed:	int3   
    6500efee:	int3   
    6500efef:	int3   
    6500eff0:	sub    rsp,0x38
    6500eff4:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6500effd:	mov    ecx,0x48
    6500f002:	call   0x6501dbc0
    6500f007:	mov    QWORD PTR [rsp+0x48],rax
    6500f00c:	test   rax,rax
    6500f00f:	je     0x6500f018
    6500f011:	xor    ecx,ecx
    6500f013:	mov    QWORD PTR [rax],rcx
    6500f016:	jmp    0x6500f01a
    6500f018:	xor    ecx,ecx
    6500f01a:	lea    rdx,[rax+0x8]
    6500f01e:	test   rdx,rdx
    6500f021:	je     0x6500f026
    6500f023:	mov    QWORD PTR [rdx],rcx
    6500f026:	lea    rdx,[rax+0x10]
    6500f02a:	test   rdx,rdx
    6500f02d:	je     0x6500f032
    6500f02f:	mov    QWORD PTR [rdx],rcx
    6500f032:	mov    BYTE PTR [rax+0x40],0x1
    6500f036:	mov    BYTE PTR [rax+0x41],0x0
    6500f03a:	add    rsp,0x38
    6500f03e:	ret    
    6500f03f:	int3   
    6500f040:	mov    QWORD PTR [rsp+0x10],rdx
    6500f045:	push   rbp
    6500f046:	sub    rsp,0x20
    6500f04a:	mov    rbp,rdx
    6500f04d:	mov    rcx,QWORD PTR [rbp+0x48]
    6500f051:	call   0x6501d300
    6500f056:	xor    edx,edx
    6500f058:	xor    ecx,ecx
    6500f05a:	call   0x6501dc60
    6500f05f:	nop
    6500f060:	add    rsp,0x20
    6500f064:	pop    rbp
    6500f065:	ret    
    6500f066:	int3   
    6500f067:	int3   
    6500f068:	int3   
    6500f069:	int3   
    6500f06a:	int3   
    6500f06b:	int3   
    6500f06c:	int3   
    6500f06d:	int3   
    6500f06e:	int3   
    6500f06f:	int3   
    6500f070:	push   r12
    6500f072:	sub    rsp,0x40
    6500f076:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500f07f:	mov    QWORD PTR [rsp+0x50],rbx
    6500f084:	mov    QWORD PTR [rsp+0x58],rsi
    6500f089:	mov    QWORD PTR [rsp+0x60],rdi
    6500f08e:	mov    rdi,r9
    6500f091:	mov    rsi,r8
    6500f094:	mov    r12,rdx
    6500f097:	mov    ecx,0x48
    6500f09c:	call   0x6501dbc0
    6500f0a1:	mov    rbx,rax
    6500f0a4:	mov    QWORD PTR [rsp+0x20],rax
    6500f0a9:	mov    QWORD PTR [rsp+0x30],rax
    6500f0ae:	test   rax,rax
    6500f0b1:	je     0x6500f0f3
    6500f0b3:	mov    QWORD PTR [rax],r12
    6500f0b6:	mov    QWORD PTR [rax+0x8],rsi
    6500f0ba:	mov    QWORD PTR [rax+0x10],rdi
    6500f0be:	lea    rcx,[rax+0x18]
    6500f0c2:	mov    QWORD PTR [rcx+0x20],0xf
    6500f0ca:	mov    QWORD PTR [rcx+0x18],0x0
    6500f0d2:	mov    BYTE PTR [rcx+0x8],0x0
    6500f0d6:	or     r9,0xffffffffffffffff
    6500f0da:	xor    r8d,r8d
    6500f0dd:	mov    rdx,QWORD PTR [rsp+0x70]
    6500f0e2:	call   0x65001e20
    6500f0e7:	movzx  eax,BYTE PTR [rsp+0x78]
    6500f0ec:	mov    BYTE PTR [rbx+0x40],al
    6500f0ef:	mov    BYTE PTR [rbx+0x41],0x0
    6500f0f3:	mov    rax,rbx
    6500f0f6:	mov    rbx,QWORD PTR [rsp+0x50]
    6500f0fb:	mov    rsi,QWORD PTR [rsp+0x58]
    6500f100:	mov    rdi,QWORD PTR [rsp+0x60]
    6500f105:	add    rsp,0x40
    6500f109:	pop    r12
    6500f10b:	ret    
    6500f10c:	int3   
    6500f10d:	int3   
    6500f10e:	int3   
    6500f10f:	int3   
    6500f110:	rex push rbp
    6500f112:	sub    rsp,0x20
    6500f116:	mov    rbp,rdx
    6500f119:	mov    rdx,QWORD PTR [rbp+0x20]
    6500f11d:	mov    rcx,QWORD PTR [rbp+0x30]
    6500f121:	call   0x65004190
    6500f126:	add    rsp,0x20
    6500f12a:	pop    rbp
    6500f12b:	ret    
    6500f12c:	int3   
    6500f12d:	int3   
    6500f12e:	int3   
    6500f12f:	int3   
    6500f130:	mov    QWORD PTR [rsp+0x10],rdx
    6500f135:	push   rbp
    6500f136:	sub    rsp,0x20
    6500f13a:	mov    rbp,rdx
    6500f13d:	mov    rcx,QWORD PTR [rbp+0x20]
    6500f141:	call   0x6501d300
    6500f146:	xor    edx,edx
    6500f148:	xor    ecx,ecx
    6500f14a:	call   0x6501dc60
    6500f14f:	nop
    6500f150:	add    rsp,0x20
    6500f154:	pop    rbp
    6500f155:	ret    
    6500f156:	int3   
    6500f157:	int3   
    6500f158:	int3   
    6500f159:	int3   
    6500f15a:	int3   
    6500f15b:	int3   
    6500f15c:	int3   
    6500f15d:	int3   
    6500f15e:	int3   
    6500f15f:	int3   
    6500f160:	mov    r11,rsp
    6500f163:	push   rdi
    6500f164:	sub    rsp,0xa0
    6500f16b:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500f174:	mov    QWORD PTR [r11+0x8],rbx
    6500f178:	mov    QWORD PTR [r11+0x10],rbp
    6500f17c:	mov    QWORD PTR [r11+0x18],rsi
    6500f180:	mov    rdi,r9
    6500f183:	movzx  esi,r8b
    6500f187:	mov    rbp,rdx
    6500f18a:	mov    rbx,rcx
    6500f18d:	movabs rax,0x333333333333332
    6500f197:	cmp    QWORD PTR [rcx+0x10],rax
    6500f19b:	jb     0x6500f26a
    6500f1a1:	mov    QWORD PTR [r11-0x50],0xf
    6500f1a9:	xor    ebx,ebx
    6500f1ab:	mov    QWORD PTR [r11-0x58],rbx
    6500f1af:	mov    BYTE PTR [rsp+0x40],bl
    6500f1b3:	xor    r8d,r8d
    6500f1b6:	lea    edx,[rbx+0x13]
    6500f1b9:	lea    rcx,[r11-0x70]
    6500f1bd:	call   0x65002330
    6500f1c2:	lea    rcx,[rsp+0x40]
    6500f1c7:	mov    rdx,QWORD PTR [rsp+0x58]
    6500f1cc:	cmp    rdx,0x10
    6500f1d0:	cmovae rcx,QWORD PTR [rsp+0x40]
    6500f1d6:	lea    r9d,[rbx+0x13]
    6500f1da:	lea    r8,[rip+0x29ba7]        # 0x65038d88
    6500f1e1:	call   0x6501d7b0
    6500f1e6:	mov    QWORD PTR [rsp+0x50],0x13
    6500f1ef:	lea    rax,[rsp+0x40]
    6500f1f4:	cmp    QWORD PTR [rsp+0x58],0x10
    6500f1fa:	cmovae rax,QWORD PTR [rsp+0x40]
    6500f200:	mov    BYTE PTR [rax+0x13],bl
    6500f203:	lea    rcx,[rsp+0x60]
    6500f208:	call   0x6501d310
    6500f20d:	nop
    6500f20e:	lea    rax,[rip+0x25fbb]        # 0x650351d0
    6500f215:	mov    QWORD PTR [rsp+0x60],rax
    6500f21a:	mov    QWORD PTR [rsp+0x98],0xf
    6500f226:	mov    QWORD PTR [rsp+0x90],rbx
    6500f22e:	mov    BYTE PTR [rsp+0x80],bl
    6500f235:	or     r9,0xffffffffffffffff
    6500f239:	xor    r8d,r8d
    6500f23c:	lea    rdx,[rsp+0x38]
    6500f241:	lea    rcx,[rsp+0x78]
    6500f246:	call   0x65001e20
    6500f24b:	nop
    6500f24c:	lea    rax,[rip+0x25f95]        # 0x650351e8
    6500f253:	mov    QWORD PTR [rsp+0x60],rax
    6500f258:	lea    rdx,[rip+0x32319]        # 0x65041578
    6500f25f:	lea    rcx,[rsp+0x60]
    6500f264:	call   0x6501dc60
    6500f269:	nop
    6500f26a:	mov    rdx,QWORD PTR [rcx+0x8]
    6500f26e:	mov    BYTE PTR [rsp+0x28],0x0
    6500f273:	mov    rax,QWORD PTR [rsp+0xd0]
    6500f27b:	mov    QWORD PTR [rsp+0x20],rax
    6500f280:	mov    r9,rdx
    6500f283:	mov    r8,rdi
    6500f286:	call   0x6500fbd0
    6500f28b:	mov    r11,rax
    6500f28e:	add    QWORD PTR [rbx+0x10],0x1
    6500f293:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f297:	cmp    rdi,rcx
    6500f29a:	jne    0x6500f2b1
    6500f29c:	mov    QWORD PTR [rcx+0x8],rax
    6500f2a0:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f2a4:	mov    QWORD PTR [rcx],rax
    6500f2a7:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f2ab:	mov    QWORD PTR [rcx+0x10],rax
    6500f2af:	jmp    0x6500f2d9
    6500f2b1:	test   sil,sil
    6500f2b4:	je     0x6500f2c7
    6500f2b6:	mov    QWORD PTR [rdi],rax
    6500f2b9:	mov    rax,QWORD PTR [rbx+0x8]
    6500f2bd:	cmp    rdi,QWORD PTR [rax]
    6500f2c0:	jne    0x6500f2d9
    6500f2c2:	mov    QWORD PTR [rax],r11
    6500f2c5:	jmp    0x6500f2d9
    6500f2c7:	mov    QWORD PTR [rdi+0x10],rax
    6500f2cb:	mov    rax,QWORD PTR [rbx+0x8]
    6500f2cf:	cmp    rdi,QWORD PTR [rax+0x10]
    6500f2d3:	jne    0x6500f2d9
    6500f2d5:	mov    QWORD PTR [rax+0x10],r11
    6500f2d9:	mov    r8,r11
    6500f2dc:	lea    rdx,[r11+0x8]
    6500f2e0:	mov    rax,QWORD PTR [rdx]
    6500f2e3:	cmp    BYTE PTR [rax+0x68],0x0
    6500f2e7:	jne    0x6500f4d8
    6500f2ed:	data16 xchg ax,ax
    6500f2f0:	mov    rax,QWORD PTR [rdx]
    6500f2f3:	mov    rcx,QWORD PTR [rax+0x8]
    6500f2f7:	cmp    rax,QWORD PTR [rcx]
    6500f2fa:	jne    0x6500f3e7
    6500f300:	mov    r9,QWORD PTR [rcx+0x10]
    6500f304:	cmp    BYTE PTR [r9+0x68],0x0
    6500f309:	jne    0x6500f32b
    6500f30b:	mov    BYTE PTR [rax+0x68],0x1
    6500f30f:	mov    BYTE PTR [r9+0x68],0x1
    6500f314:	mov    rax,QWORD PTR [rdx]
    6500f317:	mov    rcx,QWORD PTR [rax+0x8]
    6500f31b:	mov    BYTE PTR [rcx+0x68],0x0
    6500f31f:	mov    rax,QWORD PTR [rdx]
    6500f322:	mov    r8,QWORD PTR [rax+0x8]
    6500f326:	jmp    0x6500f4c7
    6500f32b:	cmp    r8,QWORD PTR [rax+0x10]
    6500f32f:	jne    0x6500f37e
    6500f331:	mov    r8,rax
    6500f334:	mov    rcx,QWORD PTR [rax+0x10]
    6500f338:	mov    rax,QWORD PTR [rcx]
    6500f33b:	mov    QWORD PTR [r8+0x10],rax
    6500f33f:	mov    rax,QWORD PTR [rcx]
    6500f342:	cmp    BYTE PTR [rax+0x69],0x0
    6500f346:	jne    0x6500f34c
    6500f348:	mov    QWORD PTR [rax+0x8],r8
    6500f34c:	lea    rdx,[r8+0x8]
    6500f350:	mov    rax,QWORD PTR [rdx]
    6500f353:	mov    QWORD PTR [rcx+0x8],rax
    6500f357:	mov    rax,QWORD PTR [rbx+0x8]
    6500f35b:	cmp    r8,QWORD PTR [rax+0x8]
    6500f35f:	jne    0x6500f367
    6500f361:	mov    QWORD PTR [rax+0x8],rcx
    6500f365:	jmp    0x6500f378
    6500f367:	mov    rax,QWORD PTR [rdx]
    6500f36a:	cmp    r8,QWORD PTR [rax]
    6500f36d:	jne    0x6500f374
    6500f36f:	mov    QWORD PTR [rax],rcx
    6500f372:	jmp    0x6500f378
    6500f374:	mov    QWORD PTR [rax+0x10],rcx
    6500f378:	mov    QWORD PTR [rcx],r8
    6500f37b:	mov    QWORD PTR [rdx],rcx
    6500f37e:	mov    rax,QWORD PTR [rdx]
    6500f381:	mov    BYTE PTR [rax+0x68],0x1
    6500f385:	mov    rax,QWORD PTR [rdx]
    6500f388:	mov    rcx,QWORD PTR [rax+0x8]
    6500f38c:	mov    BYTE PTR [rcx+0x68],0x0
    6500f390:	mov    rax,QWORD PTR [rdx]
    6500f393:	mov    rcx,QWORD PTR [rax+0x8]
    6500f397:	mov    rdx,QWORD PTR [rcx]
    6500f39a:	mov    rax,QWORD PTR [rdx+0x10]
    6500f39e:	mov    QWORD PTR [rcx],rax
    6500f3a1:	mov    rax,QWORD PTR [rdx+0x10]
    6500f3a5:	cmp    BYTE PTR [rax+0x69],0x0
    6500f3a9:	jne    0x6500f3af
    6500f3ab:	mov    QWORD PTR [rax+0x8],rcx
    6500f3af:	mov    rax,QWORD PTR [rcx+0x8]
    6500f3b3:	mov    QWORD PTR [rdx+0x8],rax
    6500f3b7:	mov    rax,QWORD PTR [rbx+0x8]
    6500f3bb:	cmp    rcx,QWORD PTR [rax+0x8]
    6500f3bf:	jne    0x6500f3c7
    6500f3c1:	mov    QWORD PTR [rax+0x8],rdx
    6500f3c5:	jmp    0x6500f3da
    6500f3c7:	mov    rax,QWORD PTR [rcx+0x8]
    6500f3cb:	cmp    rcx,QWORD PTR [rax+0x10]
    6500f3cf:	jne    0x6500f3d7
    6500f3d1:	mov    QWORD PTR [rax+0x10],rdx
    6500f3d5:	jmp    0x6500f3da
    6500f3d7:	mov    QWORD PTR [rax],rdx
    6500f3da:	mov    QWORD PTR [rdx+0x10],rcx
    6500f3de:	mov    QWORD PTR [rcx+0x8],rdx
    6500f3e2:	jmp    0x6500f4c7
    6500f3e7:	mov    r9,QWORD PTR [rcx]
    6500f3ea:	cmp    BYTE PTR [r9+0x68],0x0
    6500f3ef:	jne    0x6500f411
    6500f3f1:	mov    BYTE PTR [rax+0x68],0x1
    6500f3f5:	mov    BYTE PTR [r9+0x68],0x1
    6500f3fa:	mov    rax,QWORD PTR [rdx]
    6500f3fd:	mov    rcx,QWORD PTR [rax+0x8]
    6500f401:	mov    BYTE PTR [rcx+0x68],0x0
    6500f405:	mov    rax,QWORD PTR [rdx]
    6500f408:	mov    r8,QWORD PTR [rax+0x8]
    6500f40c:	jmp    0x6500f4c7
    6500f411:	cmp    r8,QWORD PTR [rax]
    6500f414:	jne    0x6500f465
    6500f416:	mov    r8,rax
    6500f419:	mov    rcx,QWORD PTR [rax]
    6500f41c:	mov    rax,QWORD PTR [rcx+0x10]
    6500f420:	mov    QWORD PTR [r8],rax
    6500f423:	mov    rax,QWORD PTR [rcx+0x10]
    6500f427:	cmp    BYTE PTR [rax+0x69],0x0
    6500f42b:	jne    0x6500f431
    6500f42d:	mov    QWORD PTR [rax+0x8],r8
    6500f431:	lea    rdx,[r8+0x8]
    6500f435:	mov    rax,QWORD PTR [rdx]
    6500f438:	mov    QWORD PTR [rcx+0x8],rax
    6500f43c:	mov    rax,QWORD PTR [rbx+0x8]
    6500f440:	cmp    r8,QWORD PTR [rax+0x8]
    6500f444:	jne    0x6500f44c
    6500f446:	mov    QWORD PTR [rax+0x8],rcx
    6500f44a:	jmp    0x6500f45e
    6500f44c:	mov    rax,QWORD PTR [rdx]
    6500f44f:	cmp    r8,QWORD PTR [rax+0x10]
    6500f453:	jne    0x6500f45b
    6500f455:	mov    QWORD PTR [rax+0x10],rcx
    6500f459:	jmp    0x6500f45e
    6500f45b:	mov    QWORD PTR [rax],rcx
    6500f45e:	mov    QWORD PTR [rcx+0x10],r8
    6500f462:	mov    QWORD PTR [rdx],rcx
    6500f465:	mov    rax,QWORD PTR [rdx]
    6500f468:	mov    BYTE PTR [rax+0x68],0x1
    6500f46c:	mov    rax,QWORD PTR [rdx]
    6500f46f:	mov    rcx,QWORD PTR [rax+0x8]
    6500f473:	mov    BYTE PTR [rcx+0x68],0x0
    6500f477:	mov    rax,QWORD PTR [rdx]
    6500f47a:	mov    rcx,QWORD PTR [rax+0x8]
    6500f47e:	mov    rdx,QWORD PTR [rcx+0x10]
    6500f482:	mov    rax,QWORD PTR [rdx]
    6500f485:	mov    QWORD PTR [rcx+0x10],rax
    6500f489:	mov    rax,QWORD PTR [rdx]
    6500f48c:	cmp    BYTE PTR [rax+0x69],0x0
    6500f490:	jne    0x6500f496
    6500f492:	mov    QWORD PTR [rax+0x8],rcx
    6500f496:	mov    rax,QWORD PTR [rcx+0x8]
    6500f49a:	mov    QWORD PTR [rdx+0x8],rax
    6500f49e:	mov    rax,QWORD PTR [rbx+0x8]
    6500f4a2:	cmp    rcx,QWORD PTR [rax+0x8]
    6500f4a6:	jne    0x6500f4ae
    6500f4a8:	mov    QWORD PTR [rax+0x8],rdx
    6500f4ac:	jmp    0x6500f4c0
    6500f4ae:	mov    rax,QWORD PTR [rcx+0x8]
    6500f4b2:	cmp    rcx,QWORD PTR [rax]
    6500f4b5:	jne    0x6500f4bc
    6500f4b7:	mov    QWORD PTR [rax],rdx
    6500f4ba:	jmp    0x6500f4c0
    6500f4bc:	mov    QWORD PTR [rax+0x10],rdx
    6500f4c0:	mov    QWORD PTR [rdx],rcx
    6500f4c3:	mov    QWORD PTR [rcx+0x8],rdx
    6500f4c7:	lea    rdx,[r8+0x8]
    6500f4cb:	mov    rax,QWORD PTR [rdx]
    6500f4ce:	cmp    BYTE PTR [rax+0x68],0x0
    6500f4d2:	je     0x6500f2f0
    6500f4d8:	mov    rax,QWORD PTR [rbx+0x8]
    6500f4dc:	mov    rcx,QWORD PTR [rax+0x8]
    6500f4e0:	mov    BYTE PTR [rcx+0x68],0x1
    6500f4e4:	mov    QWORD PTR [rbp+0x8],r11
    6500f4e8:	mov    QWORD PTR [rbp+0x0],rbx
    6500f4ec:	mov    rax,rbp
    6500f4ef:	lea    r11,[rsp+0xa0]
    6500f4f7:	mov    rbx,QWORD PTR [r11+0x10]
    6500f4fb:	mov    rbp,QWORD PTR [r11+0x18]
    6500f4ff:	mov    rsi,QWORD PTR [r11+0x20]
    6500f503:	mov    rsp,r11
    6500f506:	pop    rdi
    6500f507:	ret    
    6500f508:	int3   
    6500f509:	int3   
    6500f50a:	int3   
    6500f50b:	int3   
    6500f50c:	int3   
    6500f50d:	int3   
    6500f50e:	int3   
    6500f50f:	int3   
    6500f510:	rex push rbp
    6500f512:	sub    rsp,0x20
    6500f516:	mov    rbp,rdx
    6500f519:	lea    rcx,[rbp+0x38]
    6500f51d:	call   0x65001c70
    6500f522:	add    rsp,0x20
    6500f526:	pop    rbp
    6500f527:	ret    
    6500f528:	int3   
    6500f529:	int3   
    6500f52a:	int3   
    6500f52b:	int3   
    6500f52c:	int3   
    6500f52d:	int3   
    6500f52e:	int3   
    6500f52f:	int3   
    6500f530:	rex push rbp
    6500f532:	sub    rsp,0x20
    6500f536:	mov    rbp,rdx
    6500f539:	lea    rcx,[rbp+0x60]
    6500f53d:	call   0x6501d490
    6500f542:	add    rsp,0x20
    6500f546:	pop    rbp
    6500f547:	ret    
    6500f548:	int3   
    6500f549:	int3   
    6500f54a:	int3   
    6500f54b:	int3   
    6500f54c:	int3   
    6500f54d:	int3   
    6500f54e:	int3   
    6500f54f:	int3   
    6500f550:	mov    QWORD PTR [rsp+0x8],rbx
    6500f555:	mov    QWORD PTR [rsp+0x10],rbp
    6500f55a:	mov    QWORD PTR [rsp+0x18],rsi
    6500f55f:	mov    QWORD PTR [rsp+0x20],rdi
    6500f564:	push   r12
    6500f566:	sub    rsp,0x20
    6500f56a:	cmp    QWORD PTR [rdx+0x18],r8
    6500f56e:	mov    r12,r9
    6500f571:	mov    rbp,r8
    6500f574:	mov    rsi,rdx
    6500f577:	mov    rbx,rcx
    6500f57a:	jae    0x6500f581
    6500f57c:	call   0x6501d220
    6500f581:	mov    rdi,QWORD PTR [rsi+0x18]
    6500f585:	sub    rdi,rbp
    6500f588:	cmp    r12,rdi
    6500f58b:	cmovb  rdi,r12
    6500f58f:	cmp    rbx,rsi
    6500f592:	jne    0x6500f688
    6500f598:	lea    r12,[rdi+rbp*1]
    6500f59c:	or     rsi,0xffffffffffffffff
    6500f5a0:	cmp    QWORD PTR [rbx+0x18],r12
    6500f5a4:	jae    0x6500f5ab
    6500f5a6:	call   0x6501d220
    6500f5ab:	mov    r9,QWORD PTR [rbx+0x18]
    6500f5af:	sub    r9,r12
    6500f5b2:	cmp    r9,0xffffffffffffffff
    6500f5b6:	jae    0x6500f5c0
    6500f5b8:	test   r9,r9
    6500f5bb:	mov    rsi,r9
    6500f5be:	je     0x6500f61d
    6500f5c0:	mov    rdx,QWORD PTR [rbx+0x20]
    6500f5c4:	lea    rdi,[rbx+0x8]
    6500f5c8:	cmp    rdx,0x8
    6500f5cc:	jb     0x6500f5d3
    6500f5ce:	mov    r8,QWORD PTR [rdi]
    6500f5d1:	jmp    0x6500f5d6
    6500f5d3:	mov    r8,rdi
    6500f5d6:	cmp    rdx,0x8
    6500f5da:	jb     0x6500f5e1
    6500f5dc:	mov    rcx,QWORD PTR [rdi]
    6500f5df:	jmp    0x6500f5e4
    6500f5e1:	mov    rcx,rdi
    6500f5e4:	lea    rax,[r12+rsi*1]
    6500f5e8:	sub    r9,rsi
    6500f5eb:	sub    rdx,r12
    6500f5ee:	lea    r8,[r8+rax*2]
    6500f5f2:	lea    rcx,[rcx+r12*2]
    6500f5f6:	add    r9,r9
    6500f5f9:	add    rdx,rdx
    6500f5fc:	call   0x6501d880
    6500f601:	mov    r11,QWORD PTR [rbx+0x18]
    6500f605:	sub    r11,rsi
    6500f608:	cmp    QWORD PTR [rbx+0x20],0x8
    6500f60d:	mov    QWORD PTR [rbx+0x18],r11
    6500f611:	jb     0x6500f616
    6500f613:	mov    rdi,QWORD PTR [rdi]
    6500f616:	mov    WORD PTR [rdi+r11*2],0x0
    6500f61d:	mov    r9,QWORD PTR [rbx+0x18]
    6500f621:	cmp    r9,rbp
    6500f624:	cmovb  rbp,r9
    6500f628:	test   rbp,rbp
    6500f62b:	je     0x6500f72b
    6500f631:	mov    rdx,QWORD PTR [rbx+0x20]
    6500f635:	lea    rdi,[rbx+0x8]
    6500f639:	cmp    rdx,0x8
    6500f63d:	jb     0x6500f644
    6500f63f:	mov    rax,QWORD PTR [rdi]
    6500f642:	jmp    0x6500f647
    6500f644:	mov    rax,rdi
    6500f647:	cmp    rdx,0x8
    6500f64b:	jb     0x6500f652
    6500f64d:	mov    rcx,QWORD PTR [rdi]
    6500f650:	jmp    0x6500f655
    6500f652:	mov    rcx,rdi
    6500f655:	sub    r9,rbp
    6500f658:	lea    r8,[rax+rbp*2]
    6500f65c:	add    rdx,rdx
    6500f65f:	add    r9,r9
    6500f662:	call   0x6501d880
    6500f667:	mov    r11,QWORD PTR [rbx+0x18]
    6500f66b:	sub    r11,rbp
    6500f66e:	cmp    QWORD PTR [rbx+0x20],0x8
    6500f673:	mov    QWORD PTR [rbx+0x18],r11
    6500f677:	jb     0x6500f67c
    6500f679:	mov    rdi,QWORD PTR [rdi]
    6500f67c:	mov    WORD PTR [rdi+r11*2],0x0
    6500f683:	jmp    0x6500f72b
    6500f688:	movabs rax,0x7ffffffffffffffe
    6500f692:	cmp    rdi,rax
    6500f695:	jbe    0x6500f69c
    6500f697:	call   0x6501d150
    6500f69c:	mov    rax,QWORD PTR [rbx+0x20]
    6500f6a0:	cmp    rax,rdi
    6500f6a3:	jae    0x6500f6c6
    6500f6a5:	mov    r8,QWORD PTR [rbx+0x18]
    6500f6a9:	mov    rdx,rdi
    6500f6ac:	mov    rcx,rbx
    6500f6af:	call   0x650100b0
    6500f6b4:	test   rdi,rdi
    6500f6b7:	je     0x6500f72b
    6500f6b9:	cmp    QWORD PTR [rsi+0x20],0x8
    6500f6be:	jb     0x6500f6e9
    6500f6c0:	mov    rax,QWORD PTR [rsi+0x8]
    6500f6c4:	jmp    0x6500f6ed
    6500f6c6:	test   rdi,rdi
    6500f6c9:	jne    0x6500f6b9
    6500f6cb:	cmp    rax,0x8
    6500f6cf:	mov    QWORD PTR [rbx+0x18],rdi
    6500f6d3:	jb     0x6500f6de
    6500f6d5:	mov    rax,QWORD PTR [rbx+0x8]
    6500f6d9:	mov    WORD PTR [rax],di
    6500f6dc:	jmp    0x6500f72b
    6500f6de:	lea    rax,[rbx+0x8]
    6500f6e2:	mov    WORD PTR [rax],0x0
    6500f6e7:	jmp    0x6500f72b
    6500f6e9:	lea    rax,[rsi+0x8]
    6500f6ed:	mov    rdx,QWORD PTR [rbx+0x20]
    6500f6f1:	lea    rsi,[rbx+0x8]
    6500f6f5:	cmp    rdx,0x8
    6500f6f9:	jb     0x6500f700
    6500f6fb:	mov    rcx,QWORD PTR [rsi]
    6500f6fe:	jmp    0x6500f703
    6500f700:	mov    rcx,rsi
    6500f703:	lea    r12,[rdi+rdi*1]
    6500f707:	lea    r8,[rax+rbp*2]
    6500f70b:	add    rdx,rdx
    6500f70e:	mov    r9,r12
    6500f711:	call   0x6501d7b0
    6500f716:	cmp    QWORD PTR [rbx+0x20],0x8
    6500f71b:	mov    QWORD PTR [rbx+0x18],rdi
    6500f71f:	jb     0x6500f724
    6500f721:	mov    rsi,QWORD PTR [rsi]
    6500f724:	mov    WORD PTR [r12+rsi*1],0x0
    6500f72b:	mov    rbp,QWORD PTR [rsp+0x38]
    6500f730:	mov    rsi,QWORD PTR [rsp+0x40]
    6500f735:	mov    rdi,QWORD PTR [rsp+0x48]
    6500f73a:	mov    rax,rbx
    6500f73d:	mov    rbx,QWORD PTR [rsp+0x30]
    6500f742:	add    rsp,0x20
    6500f746:	pop    r12
    6500f748:	ret    
    6500f749:	int3   
    6500f74a:	int3   
    6500f74b:	int3   
    6500f74c:	int3   
    6500f74d:	int3   
    6500f74e:	int3   
    6500f74f:	int3   
    6500f750:	mov    r11,rsp
    6500f753:	push   rdi
    6500f754:	sub    rsp,0xa0
    6500f75b:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6500f764:	mov    QWORD PTR [r11+0x8],rbx
    6500f768:	mov    QWORD PTR [r11+0x10],rbp
    6500f76c:	mov    QWORD PTR [r11+0x18],rsi
    6500f770:	mov    rdi,r9
    6500f773:	movzx  esi,r8b
    6500f777:	mov    rbp,rdx
    6500f77a:	mov    rbx,rcx
    6500f77d:	movabs rax,0x333333333333332
    6500f787:	cmp    QWORD PTR [rcx+0x10],rax
    6500f78b:	jb     0x6500f85a
    6500f791:	mov    QWORD PTR [r11-0x50],0xf
    6500f799:	xor    ebx,ebx
    6500f79b:	mov    QWORD PTR [r11-0x58],rbx
    6500f79f:	mov    BYTE PTR [rsp+0x40],bl
    6500f7a3:	xor    r8d,r8d
    6500f7a6:	lea    edx,[rbx+0x13]
    6500f7a9:	lea    rcx,[r11-0x70]
    6500f7ad:	call   0x65002330
    6500f7b2:	lea    rcx,[rsp+0x40]
    6500f7b7:	mov    rdx,QWORD PTR [rsp+0x58]
    6500f7bc:	cmp    rdx,0x10
    6500f7c0:	cmovae rcx,QWORD PTR [rsp+0x40]
    6500f7c6:	lea    r9d,[rbx+0x13]
    6500f7ca:	lea    r8,[rip+0x295b7]        # 0x65038d88
    6500f7d1:	call   0x6501d7b0
    6500f7d6:	mov    QWORD PTR [rsp+0x50],0x13
    6500f7df:	lea    rax,[rsp+0x40]
    6500f7e4:	cmp    QWORD PTR [rsp+0x58],0x10
    6500f7ea:	cmovae rax,QWORD PTR [rsp+0x40]
    6500f7f0:	mov    BYTE PTR [rax+0x13],bl
    6500f7f3:	lea    rcx,[rsp+0x60]
    6500f7f8:	call   0x6501d310
    6500f7fd:	nop
    6500f7fe:	lea    rax,[rip+0x259cb]        # 0x650351d0
    6500f805:	mov    QWORD PTR [rsp+0x60],rax
    6500f80a:	mov    QWORD PTR [rsp+0x98],0xf
    6500f816:	mov    QWORD PTR [rsp+0x90],rbx
    6500f81e:	mov    BYTE PTR [rsp+0x80],bl
    6500f825:	or     r9,0xffffffffffffffff
    6500f829:	xor    r8d,r8d
    6500f82c:	lea    rdx,[rsp+0x38]
    6500f831:	lea    rcx,[rsp+0x78]
    6500f836:	call   0x65001e20
    6500f83b:	nop
    6500f83c:	lea    rax,[rip+0x259a5]        # 0x650351e8
    6500f843:	mov    QWORD PTR [rsp+0x60],rax
    6500f848:	lea    rdx,[rip+0x31d29]        # 0x65041578
    6500f84f:	lea    rcx,[rsp+0x60]
    6500f854:	call   0x6501dc60
    6500f859:	nop
    6500f85a:	mov    rdx,QWORD PTR [rcx+0x8]
    6500f85e:	mov    BYTE PTR [rsp+0x28],0x0
    6500f863:	mov    rax,QWORD PTR [rsp+0xd0]
    6500f86b:	mov    QWORD PTR [rsp+0x20],rax
    6500f870:	mov    r9,rdx
    6500f873:	mov    r8,rdi
    6500f876:	call   0x6500fe40
    6500f87b:	mov    r11,rax
    6500f87e:	add    QWORD PTR [rbx+0x10],0x1
    6500f883:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f887:	cmp    rdi,rcx
    6500f88a:	jne    0x6500f8a1
    6500f88c:	mov    QWORD PTR [rcx+0x8],rax
    6500f890:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f894:	mov    QWORD PTR [rcx],rax
    6500f897:	mov    rcx,QWORD PTR [rbx+0x8]
    6500f89b:	mov    QWORD PTR [rcx+0x10],rax
    6500f89f:	jmp    0x6500f8c9
    6500f8a1:	test   sil,sil
    6500f8a4:	je     0x6500f8b7
    6500f8a6:	mov    QWORD PTR [rdi],rax
    6500f8a9:	mov    rax,QWORD PTR [rbx+0x8]
    6500f8ad:	cmp    rdi,QWORD PTR [rax]
    6500f8b0:	jne    0x6500f8c9
    6500f8b2:	mov    QWORD PTR [rax],r11
    6500f8b5:	jmp    0x6500f8c9
    6500f8b7:	mov    QWORD PTR [rdi+0x10],rax
    6500f8bb:	mov    rax,QWORD PTR [rbx+0x8]
    6500f8bf:	cmp    rdi,QWORD PTR [rax+0x10]
    6500f8c3:	jne    0x6500f8c9
    6500f8c5:	mov    QWORD PTR [rax+0x10],r11
    6500f8c9:	mov    r8,r11
    6500f8cc:	lea    rdx,[r11+0x8]
    6500f8d0:	mov    rax,QWORD PTR [rdx]
    6500f8d3:	cmp    BYTE PTR [rax+0x68],0x0
    6500f8d7:	jne    0x6500fac8
    6500f8dd:	data16 xchg ax,ax
    6500f8e0:	mov    rax,QWORD PTR [rdx]
    6500f8e3:	mov    rcx,QWORD PTR [rax+0x8]
    6500f8e7:	cmp    rax,QWORD PTR [rcx]
    6500f8ea:	jne    0x6500f9d7
    6500f8f0:	mov    r9,QWORD PTR [rcx+0x10]
    6500f8f4:	cmp    BYTE PTR [r9+0x68],0x0
    6500f8f9:	jne    0x6500f91b
    6500f8fb:	mov    BYTE PTR [rax+0x68],0x1
    6500f8ff:	mov    BYTE PTR [r9+0x68],0x1
    6500f904:	mov    rax,QWORD PTR [rdx]
    6500f907:	mov    rcx,QWORD PTR [rax+0x8]
    6500f90b:	mov    BYTE PTR [rcx+0x68],0x0
    6500f90f:	mov    rax,QWORD PTR [rdx]
    6500f912:	mov    r8,QWORD PTR [rax+0x8]
    6500f916:	jmp    0x6500fab7
    6500f91b:	cmp    r8,QWORD PTR [rax+0x10]
    6500f91f:	jne    0x6500f96e
    6500f921:	mov    r8,rax
    6500f924:	mov    rcx,QWORD PTR [rax+0x10]
    6500f928:	mov    rax,QWORD PTR [rcx]
    6500f92b:	mov    QWORD PTR [r8+0x10],rax
    6500f92f:	mov    rax,QWORD PTR [rcx]
    6500f932:	cmp    BYTE PTR [rax+0x69],0x0
    6500f936:	jne    0x6500f93c
    6500f938:	mov    QWORD PTR [rax+0x8],r8
    6500f93c:	lea    rdx,[r8+0x8]
    6500f940:	mov    rax,QWORD PTR [rdx]
    6500f943:	mov    QWORD PTR [rcx+0x8],rax
    6500f947:	mov    rax,QWORD PTR [rbx+0x8]
    6500f94b:	cmp    r8,QWORD PTR [rax+0x8]
    6500f94f:	jne    0x6500f957
    6500f951:	mov    QWORD PTR [rax+0x8],rcx
    6500f955:	jmp    0x6500f968
    6500f957:	mov    rax,QWORD PTR [rdx]
    6500f95a:	cmp    r8,QWORD PTR [rax]
    6500f95d:	jne    0x6500f964
    6500f95f:	mov    QWORD PTR [rax],rcx
    6500f962:	jmp    0x6500f968
    6500f964:	mov    QWORD PTR [rax+0x10],rcx
    6500f968:	mov    QWORD PTR [rcx],r8
    6500f96b:	mov    QWORD PTR [rdx],rcx
    6500f96e:	mov    rax,QWORD PTR [rdx]
    6500f971:	mov    BYTE PTR [rax+0x68],0x1
    6500f975:	mov    rax,QWORD PTR [rdx]
    6500f978:	mov    rcx,QWORD PTR [rax+0x8]
    6500f97c:	mov    BYTE PTR [rcx+0x68],0x0
    6500f980:	mov    rax,QWORD PTR [rdx]
    6500f983:	mov    rcx,QWORD PTR [rax+0x8]
    6500f987:	mov    rdx,QWORD PTR [rcx]
    6500f98a:	mov    rax,QWORD PTR [rdx+0x10]
    6500f98e:	mov    QWORD PTR [rcx],rax
    6500f991:	mov    rax,QWORD PTR [rdx+0x10]
    6500f995:	cmp    BYTE PTR [rax+0x69],0x0
    6500f999:	jne    0x6500f99f
    6500f99b:	mov    QWORD PTR [rax+0x8],rcx
    6500f99f:	mov    rax,QWORD PTR [rcx+0x8]
    6500f9a3:	mov    QWORD PTR [rdx+0x8],rax
    6500f9a7:	mov    rax,QWORD PTR [rbx+0x8]
    6500f9ab:	cmp    rcx,QWORD PTR [rax+0x8]
    6500f9af:	jne    0x6500f9b7
    6500f9b1:	mov    QWORD PTR [rax+0x8],rdx
    6500f9b5:	jmp    0x6500f9ca
    6500f9b7:	mov    rax,QWORD PTR [rcx+0x8]
    6500f9bb:	cmp    rcx,QWORD PTR [rax+0x10]
    6500f9bf:	jne    0x6500f9c7
    6500f9c1:	mov    QWORD PTR [rax+0x10],rdx
    6500f9c5:	jmp    0x6500f9ca
    6500f9c7:	mov    QWORD PTR [rax],rdx
    6500f9ca:	mov    QWORD PTR [rdx+0x10],rcx
    6500f9ce:	mov    QWORD PTR [rcx+0x8],rdx
    6500f9d2:	jmp    0x6500fab7
    6500f9d7:	mov    r9,QWORD PTR [rcx]
    6500f9da:	cmp    BYTE PTR [r9+0x68],0x0
    6500f9df:	jne    0x6500fa01
    6500f9e1:	mov    BYTE PTR [rax+0x68],0x1
    6500f9e5:	mov    BYTE PTR [r9+0x68],0x1
    6500f9ea:	mov    rax,QWORD PTR [rdx]
    6500f9ed:	mov    rcx,QWORD PTR [rax+0x8]
    6500f9f1:	mov    BYTE PTR [rcx+0x68],0x0
    6500f9f5:	mov    rax,QWORD PTR [rdx]
    6500f9f8:	mov    r8,QWORD PTR [rax+0x8]
    6500f9fc:	jmp    0x6500fab7
    6500fa01:	cmp    r8,QWORD PTR [rax]
    6500fa04:	jne    0x6500fa55
    6500fa06:	mov    r8,rax
    6500fa09:	mov    rcx,QWORD PTR [rax]
    6500fa0c:	mov    rax,QWORD PTR [rcx+0x10]
    6500fa10:	mov    QWORD PTR [r8],rax
    6500fa13:	mov    rax,QWORD PTR [rcx+0x10]
    6500fa17:	cmp    BYTE PTR [rax+0x69],0x0
    6500fa1b:	jne    0x6500fa21
    6500fa1d:	mov    QWORD PTR [rax+0x8],r8
    6500fa21:	lea    rdx,[r8+0x8]
    6500fa25:	mov    rax,QWORD PTR [rdx]
    6500fa28:	mov    QWORD PTR [rcx+0x8],rax
    6500fa2c:	mov    rax,QWORD PTR [rbx+0x8]
    6500fa30:	cmp    r8,QWORD PTR [rax+0x8]
    6500fa34:	jne    0x6500fa3c
    6500fa36:	mov    QWORD PTR [rax+0x8],rcx
    6500fa3a:	jmp    0x6500fa4e
    6500fa3c:	mov    rax,QWORD PTR [rdx]
    6500fa3f:	cmp    r8,QWORD PTR [rax+0x10]
    6500fa43:	jne    0x6500fa4b
    6500fa45:	mov    QWORD PTR [rax+0x10],rcx
    6500fa49:	jmp    0x6500fa4e
    6500fa4b:	mov    QWORD PTR [rax],rcx
    6500fa4e:	mov    QWORD PTR [rcx+0x10],r8
    6500fa52:	mov    QWORD PTR [rdx],rcx
    6500fa55:	mov    rax,QWORD PTR [rdx]
    6500fa58:	mov    BYTE PTR [rax+0x68],0x1
    6500fa5c:	mov    rax,QWORD PTR [rdx]
    6500fa5f:	mov    rcx,QWORD PTR [rax+0x8]
    6500fa63:	mov    BYTE PTR [rcx+0x68],0x0
    6500fa67:	mov    rax,QWORD PTR [rdx]
    6500fa6a:	mov    rcx,QWORD PTR [rax+0x8]
    6500fa6e:	mov    rdx,QWORD PTR [rcx+0x10]
    6500fa72:	mov    rax,QWORD PTR [rdx]
    6500fa75:	mov    QWORD PTR [rcx+0x10],rax
    6500fa79:	mov    rax,QWORD PTR [rdx]
    6500fa7c:	cmp    BYTE PTR [rax+0x69],0x0
    6500fa80:	jne    0x6500fa86
    6500fa82:	mov    QWORD PTR [rax+0x8],rcx
    6500fa86:	mov    rax,QWORD PTR [rcx+0x8]
    6500fa8a:	mov    QWORD PTR [rdx+0x8],rax
    6500fa8e:	mov    rax,QWORD PTR [rbx+0x8]
    6500fa92:	cmp    rcx,QWORD PTR [rax+0x8]
    6500fa96:	jne    0x6500fa9e
    6500fa98:	mov    QWORD PTR [rax+0x8],rdx
    6500fa9c:	jmp    0x6500fab0
    6500fa9e:	mov    rax,QWORD PTR [rcx+0x8]
    6500faa2:	cmp    rcx,QWORD PTR [rax]
    6500faa5:	jne    0x6500faac
    6500faa7:	mov    QWORD PTR [rax],rdx
    6500faaa:	jmp    0x6500fab0
    6500faac:	mov    QWORD PTR [rax+0x10],rdx
    6500fab0:	mov    QWORD PTR [rdx],rcx
    6500fab3:	mov    QWORD PTR [rcx+0x8],rdx
    6500fab7:	lea    rdx,[r8+0x8]
    6500fabb:	mov    rax,QWORD PTR [rdx]
    6500fabe:	cmp    BYTE PTR [rax+0x68],0x0
    6500fac2:	je     0x6500f8e0
    6500fac8:	mov    rax,QWORD PTR [rbx+0x8]
    6500facc:	mov    rcx,QWORD PTR [rax+0x8]
    6500fad0:	mov    BYTE PTR [rcx+0x68],0x1
    6500fad4:	mov    QWORD PTR [rbp+0x8],r11
    6500fad8:	mov    QWORD PTR [rbp+0x0],rbx
    6500fadc:	mov    rax,rbp
    6500fadf:	lea    r11,[rsp+0xa0]
    6500fae7:	mov    rbx,QWORD PTR [r11+0x10]
    6500faeb:	mov    rbp,QWORD PTR [r11+0x18]
    6500faef:	mov    rsi,QWORD PTR [r11+0x20]
    6500faf3:	mov    rsp,r11
    6500faf6:	pop    rdi
    6500faf7:	ret    
    6500faf8:	int3   
    6500faf9:	int3   
    6500fafa:	int3   
    6500fafb:	int3   
    6500fafc:	int3   
    6500fafd:	int3   
    6500fafe:	int3   
    6500faff:	int3   
    6500fb00:	rex push rbp
    6500fb02:	sub    rsp,0x20
    6500fb06:	mov    rbp,rdx
    6500fb09:	lea    rcx,[rbp+0x38]
    6500fb0d:	call   0x65001c70
    6500fb12:	add    rsp,0x20
    6500fb16:	pop    rbp
    6500fb17:	ret    
    6500fb18:	int3   
    6500fb19:	int3   
    6500fb1a:	int3   
    6500fb1b:	int3   
    6500fb1c:	int3   
    6500fb1d:	int3   
    6500fb1e:	int3   
    6500fb1f:	int3   
    6500fb20:	rex push rbp
    6500fb22:	sub    rsp,0x20
    6500fb26:	mov    rbp,rdx
    6500fb29:	lea    rcx,[rbp+0x60]
    6500fb2d:	call   0x6501d490
    6500fb32:	add    rsp,0x20
    6500fb36:	pop    rbp
    6500fb37:	ret    
    6500fb38:	int3   
    6500fb39:	int3   
    6500fb3a:	int3   
    6500fb3b:	int3   
    6500fb3c:	int3   
    6500fb3d:	int3   
    6500fb3e:	int3   
    6500fb3f:	int3   
    6500fb40:	mov    QWORD PTR [rsp+0x10],rbx
    6500fb45:	mov    QWORD PTR [rsp+0x18],rsi
    6500fb4a:	push   rdi
    6500fb4b:	sub    rsp,0x20
    6500fb4f:	cmp    BYTE PTR [rdx+0x41],0x0
    6500fb53:	mov    rbx,rdx
    6500fb56:	mov    rsi,rcx
    6500fb59:	mov    rdi,rdx
    6500fb5c:	jne    0x6500fbb5
    6500fb5e:	mov    QWORD PTR [rsp+0x30],rbp
    6500fb63:	xor    ebp,ebp
    6500fb65:	data16 data16 xchg ax,ax
    6500fb69:	data16 xchg ax,ax
    6500fb6c:	data16 data16 xchg ax,ax
    6500fb70:	mov    rdx,QWORD PTR [rdi+0x10]
    6500fb74:	mov    rcx,rsi
    6500fb77:	call   0x6500fb40
    6500fb7c:	cmp    QWORD PTR [rbx+0x38],0x10
    6500fb81:	mov    rdi,QWORD PTR [rdi]
    6500fb84:	jb     0x6500fb8f
    6500fb86:	mov    rcx,QWORD PTR [rbx+0x20]
    6500fb8a:	call   0x6501d300
    6500fb8f:	mov    QWORD PTR [rbx+0x38],0xf
    6500fb97:	mov    QWORD PTR [rbx+0x30],rbp
    6500fb9b:	mov    rcx,rbx
    6500fb9e:	mov    BYTE PTR [rbx+0x20],bpl
    6500fba2:	call   0x6501d300
    6500fba7:	cmp    BYTE PTR [rdi+0x41],bpl
    6500fbab:	mov    rbx,rdi
    6500fbae:	je     0x6500fb70
    6500fbb0:	mov    rbp,QWORD PTR [rsp+0x30]
    6500fbb5:	mov    rbx,QWORD PTR [rsp+0x38]
    6500fbba:	mov    rsi,QWORD PTR [rsp+0x40]
    6500fbbf:	add    rsp,0x20
    6500fbc3:	pop    rdi
    6500fbc4:	ret    
    6500fbc5:	int3   
    6500fbc6:	int3   
    6500fbc7:	int3   
    6500fbc8:	int3   
    6500fbc9:	int3   
    6500fbca:	int3   
    6500fbcb:	int3   
    6500fbcc:	int3   
    6500fbcd:	int3   
    6500fbce:	int3   
    6500fbcf:	int3   
    6500fbd0:	push   r12
    6500fbd2:	sub    rsp,0x40
    6500fbd6:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500fbdf:	mov    QWORD PTR [rsp+0x50],rbx
    6500fbe4:	mov    QWORD PTR [rsp+0x58],rsi
    6500fbe9:	mov    QWORD PTR [rsp+0x60],rdi
    6500fbee:	mov    rdi,r9
    6500fbf1:	mov    rsi,r8
    6500fbf4:	mov    r12,rdx
    6500fbf7:	mov    ecx,0x70
    6500fbfc:	call   0x6501dbc0
    6500fc01:	mov    rbx,rax
    6500fc04:	mov    QWORD PTR [rsp+0x20],rax
    6500fc09:	mov    QWORD PTR [rsp+0x30],rax
    6500fc0e:	test   rax,rax
    6500fc11:	je     0x6500fc83
    6500fc13:	mov    QWORD PTR [rax],r12
    6500fc16:	mov    QWORD PTR [rax+0x8],rsi
    6500fc1a:	mov    QWORD PTR [rax+0x10],rdi
    6500fc1e:	lea    rdi,[rax+0x18]
    6500fc22:	mov    QWORD PTR [rsp+0x38],rdi
    6500fc27:	mov    QWORD PTR [rdi+0x20],0xf
    6500fc2f:	xor    r12d,r12d
    6500fc32:	mov    QWORD PTR [rdi+0x18],r12
    6500fc36:	mov    BYTE PTR [rdi+0x8],r12b
    6500fc3a:	or     r9,0xffffffffffffffff
    6500fc3e:	xor    r8d,r8d
    6500fc41:	mov    rsi,QWORD PTR [rsp+0x70]
    6500fc46:	mov    rdx,rsi
    6500fc49:	mov    rcx,rdi
    6500fc4c:	call   0x65001e20
    6500fc51:	nop
    6500fc52:	lea    rdx,[rsi+0x28]
    6500fc56:	lea    rcx,[rdi+0x28]
    6500fc5a:	mov    QWORD PTR [rcx+0x20],0xf
    6500fc62:	mov    QWORD PTR [rcx+0x18],r12
    6500fc66:	mov    BYTE PTR [rcx+0x8],r12b
    6500fc6a:	or     r9,0xffffffffffffffff
    6500fc6e:	xor    r8d,r8d
    6500fc71:	call   0x65001e20
    6500fc76:	nop
    6500fc77:	movzx  eax,BYTE PTR [rsp+0x78]
    6500fc7c:	mov    BYTE PTR [rbx+0x68],al
    6500fc7f:	mov    BYTE PTR [rbx+0x69],r12b
    6500fc83:	mov    rax,rbx
    6500fc86:	mov    rbx,QWORD PTR [rsp+0x50]
    6500fc8b:	mov    rsi,QWORD PTR [rsp+0x58]
    6500fc90:	mov    rdi,QWORD PTR [rsp+0x60]
    6500fc95:	add    rsp,0x40
    6500fc99:	pop    r12
    6500fc9b:	ret    
    6500fc9c:	int3   
    6500fc9d:	int3   
    6500fc9e:	int3   
    6500fc9f:	int3   
    6500fca0:	rex push rbp
    6500fca2:	sub    rsp,0x20
    6500fca6:	mov    rbp,rdx
    6500fca9:	mov    rdx,QWORD PTR [rbp+0x20]
    6500fcad:	mov    rcx,QWORD PTR [rbp+0x30]
    6500fcb1:	call   0x65004190
    6500fcb6:	add    rsp,0x20
    6500fcba:	pop    rbp
    6500fcbb:	ret    
    6500fcbc:	int3   
    6500fcbd:	int3   
    6500fcbe:	int3   
    6500fcbf:	int3   
    6500fcc0:	rex push rbp
    6500fcc2:	sub    rsp,0x20
    6500fcc6:	mov    rbp,rdx
    6500fcc9:	mov    rcx,QWORD PTR [rbp+0x38]
    6500fccd:	call   0x65001c70
    6500fcd2:	add    rsp,0x20
    6500fcd6:	pop    rbp
    6500fcd7:	ret    
    6500fcd8:	int3   
    6500fcd9:	int3   
    6500fcda:	int3   
    6500fcdb:	int3   
    6500fcdc:	int3   
    6500fcdd:	int3   
    6500fcde:	int3   
    6500fcdf:	int3   
    6500fce0:	mov    QWORD PTR [rsp+0x10],rdx
    6500fce5:	push   rbp
    6500fce6:	sub    rsp,0x20
    6500fcea:	mov    rbp,rdx
    6500fced:	mov    rcx,QWORD PTR [rbp+0x20]
    6500fcf1:	call   0x6501d300
    6500fcf6:	xor    edx,edx
    6500fcf8:	xor    ecx,ecx
    6500fcfa:	call   0x6501dc60
    6500fcff:	nop
    6500fd00:	add    rsp,0x20
    6500fd04:	pop    rbp
    6500fd05:	ret    
    6500fd06:	int3   
    6500fd07:	int3   
    6500fd08:	int3   
    6500fd09:	int3   
    6500fd0a:	int3   
    6500fd0b:	int3   
    6500fd0c:	int3   
    6500fd0d:	int3   
    6500fd0e:	int3   
    6500fd0f:	int3   
    6500fd10:	mov    QWORD PTR [rsp+0x18],rbp
    6500fd15:	push   rsi
    6500fd16:	sub    rsp,0x60
    6500fd1a:	mov    rbp,QWORD PTR [rcx+0x8]
    6500fd1e:	mov    QWORD PTR [rsp+0x20],rcx
    6500fd23:	mov    rsi,rcx
    6500fd26:	mov    rax,QWORD PTR [rbp+0x0]
    6500fd2a:	cmp    rax,rax
    6500fd2d:	mov    QWORD PTR [rsp+0x28],rax
    6500fd32:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500fd37:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    6500fd3d:	jne    0x6500fd4e
    6500fd3f:	cmp    rbp,rbp
    6500fd42:	jne    0x6500fd4e
    6500fd44:	call   0x65010920
    6500fd49:	jmp    0x6500fe17
    6500fd4e:	mov    QWORD PTR [rsp+0x70],rbx
    6500fd53:	mov    rbx,QWORD PTR [rsp+0x28]
    6500fd58:	mov    QWORD PTR [rsp+0x78],rdi
    6500fd5d:	movaps XMMWORD PTR [rsp+0x50],xmm6
    6500fd62:	mov    rdi,QWORD PTR [rsp+0x20]
    6500fd67:	test   rdi,rdi
    6500fd6a:	je     0x6500fd71
    6500fd6c:	cmp    rdi,rsi
    6500fd6f:	je     0x6500fd76
    6500fd71:	call   0x6501dad0
    6500fd76:	cmp    rbx,rbp
    6500fd79:	je     0x6500fe08
    6500fd7f:	test   rdi,rdi
    6500fd82:	movaps xmm6,XMMWORD PTR [rsp+0x20]
    6500fd87:	jne    0x6500fd8e
    6500fd89:	call   0x6501dad0
    6500fd8e:	cmp    BYTE PTR [rbx+0x69],0x0
    6500fd92:	je     0x6500fd9b
    6500fd94:	call   0x6501dad0
    6500fd99:	jmp    0x6500fdeb
    6500fd9b:	mov    rax,QWORD PTR [rbx+0x10]
    6500fd9f:	cmp    BYTE PTR [rax+0x69],0x0
    6500fda3:	jne    0x6500fdc4
    6500fda5:	mov    rbx,rax
    6500fda8:	mov    rax,QWORD PTR [rax]
    6500fdab:	cmp    BYTE PTR [rax+0x69],0x0
    6500fdaf:	jne    0x6500fdbd
    6500fdb1:	mov    rbx,rax
    6500fdb4:	mov    rax,QWORD PTR [rax]
    6500fdb7:	cmp    BYTE PTR [rax+0x69],0x0
    6500fdbb:	je     0x6500fdb1
    6500fdbd:	mov    QWORD PTR [rsp+0x28],rbx
    6500fdc2:	jmp    0x6500fdeb
    6500fdc4:	mov    rax,QWORD PTR [rbx+0x8]
    6500fdc8:	cmp    BYTE PTR [rax+0x69],0x0
    6500fdcc:	jne    0x6500fde3
    6500fdce:	xchg   ax,ax
    6500fdd0:	cmp    rbx,QWORD PTR [rax+0x10]
    6500fdd4:	jne    0x6500fde3
    6500fdd6:	mov    rbx,rax
    6500fdd9:	mov    rax,QWORD PTR [rax+0x8]
    6500fddd:	cmp    BYTE PTR [rax+0x69],0x0
    6500fde1:	je     0x6500fdd0
    6500fde3:	mov    rbx,rax
    6500fde6:	mov    QWORD PTR [rsp+0x28],rax
    6500fdeb:	lea    r8,[rsp+0x30]
    6500fdf0:	lea    rdx,[rsp+0x40]
    6500fdf5:	mov    rcx,rsi
    6500fdf8:	movdqa XMMWORD PTR [rsp+0x30],xmm6
    6500fdfe:	call   0x65010290
    6500fe03:	jmp    0x6500fd67
    6500fe08:	movaps xmm6,XMMWORD PTR [rsp+0x50]
    6500fe0d:	mov    rbx,QWORD PTR [rsp+0x70]
    6500fe12:	mov    rdi,QWORD PTR [rsp+0x78]
    6500fe17:	mov    rcx,QWORD PTR [rsi+0x8]
    6500fe1b:	call   0x6501d300
    6500fe20:	mov    rbp,QWORD PTR [rsp+0x80]
    6500fe28:	xor    r11d,r11d
    6500fe2b:	mov    QWORD PTR [rsi+0x8],r11
    6500fe2f:	mov    QWORD PTR [rsi+0x10],r11
    6500fe33:	add    rsp,0x60
    6500fe37:	pop    rsi
    6500fe38:	ret    
    6500fe39:	int3   
    6500fe3a:	int3   
    6500fe3b:	int3   
    6500fe3c:	int3   
    6500fe3d:	int3   
    6500fe3e:	int3   
    6500fe3f:	int3   
    6500fe40:	push   r12
    6500fe42:	sub    rsp,0x40
    6500fe46:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    6500fe4f:	mov    QWORD PTR [rsp+0x50],rbx
    6500fe54:	mov    QWORD PTR [rsp+0x58],rsi
    6500fe59:	mov    QWORD PTR [rsp+0x60],rdi
    6500fe5e:	mov    rdi,r9
    6500fe61:	mov    rsi,r8
    6500fe64:	mov    r12,rdx
    6500fe67:	mov    ecx,0x70
    6500fe6c:	call   0x6501dbc0
    6500fe71:	mov    rbx,rax
    6500fe74:	mov    QWORD PTR [rsp+0x20],rax
    6500fe79:	mov    QWORD PTR [rsp+0x30],rax
    6500fe7e:	test   rax,rax
    6500fe81:	je     0x6500fef5
    6500fe83:	mov    QWORD PTR [rax],r12
    6500fe86:	mov    QWORD PTR [rax+0x8],rsi
    6500fe8a:	mov    QWORD PTR [rax+0x10],rdi
    6500fe8e:	lea    rdi,[rax+0x18]
    6500fe92:	mov    QWORD PTR [rsp+0x38],rdi
    6500fe97:	mov    QWORD PTR [rdi+0x20],0x7
    6500fe9f:	xor    r12d,r12d
    6500fea2:	mov    QWORD PTR [rdi+0x18],r12
    6500fea6:	mov    WORD PTR [rdi+0x8],r12w
    6500feab:	or     r9,0xffffffffffffffff
    6500feaf:	xor    r8d,r8d
    6500feb2:	mov    rsi,QWORD PTR [rsp+0x70]
    6500feb7:	mov    rdx,rsi
    6500feba:	mov    rcx,rdi
    6500febd:	call   0x6500f550
    6500fec2:	nop
    6500fec3:	lea    rdx,[rsi+0x28]
    6500fec7:	lea    rcx,[rdi+0x28]
    6500fecb:	mov    QWORD PTR [rcx+0x20],0x7
    6500fed3:	mov    QWORD PTR [rcx+0x18],r12
    6500fed7:	mov    WORD PTR [rcx+0x8],r12w
    6500fedc:	or     r9,0xffffffffffffffff
    6500fee0:	xor    r8d,r8d
    6500fee3:	call   0x6500f550
    6500fee8:	nop
    6500fee9:	movzx  eax,BYTE PTR [rsp+0x78]
    6500feee:	mov    BYTE PTR [rbx+0x68],al
    6500fef1:	mov    BYTE PTR [rbx+0x69],r12b
    6500fef5:	mov    rax,rbx
    6500fef8:	mov    rbx,QWORD PTR [rsp+0x50]
    6500fefd:	mov    rsi,QWORD PTR [rsp+0x58]
    6500ff02:	mov    rdi,QWORD PTR [rsp+0x60]
    6500ff07:	add    rsp,0x40
    6500ff0b:	pop    r12
    6500ff0d:	ret    
    6500ff0e:	int3   
    6500ff0f:	int3   
    6500ff10:	rex push rbp
    6500ff12:	sub    rsp,0x20
    6500ff16:	mov    rbp,rdx
    6500ff19:	mov    rdx,QWORD PTR [rbp+0x20]
    6500ff1d:	mov    rcx,QWORD PTR [rbp+0x30]
    6500ff21:	call   0x65004190
    6500ff26:	add    rsp,0x20
    6500ff2a:	pop    rbp
    6500ff2b:	ret    
    6500ff2c:	int3   
    6500ff2d:	int3   
    6500ff2e:	int3   
    6500ff2f:	int3   
    6500ff30:	rex push rbp
    6500ff32:	sub    rsp,0x20
    6500ff36:	mov    rbp,rdx
    6500ff39:	mov    rcx,QWORD PTR [rbp+0x38]
    6500ff3d:	call   0x6500e380
    6500ff42:	add    rsp,0x20
    6500ff46:	pop    rbp
    6500ff47:	ret    
    6500ff48:	int3   
    6500ff49:	int3   
    6500ff4a:	int3   
    6500ff4b:	int3   
    6500ff4c:	int3   
    6500ff4d:	int3   
    6500ff4e:	int3   
    6500ff4f:	int3   
    6500ff50:	mov    QWORD PTR [rsp+0x10],rdx
    6500ff55:	push   rbp
    6500ff56:	sub    rsp,0x20
    6500ff5a:	mov    rbp,rdx
    6500ff5d:	mov    rcx,QWORD PTR [rbp+0x20]
    6500ff61:	call   0x6501d300
    6500ff66:	xor    edx,edx
    6500ff68:	xor    ecx,ecx
    6500ff6a:	call   0x6501dc60
    6500ff6f:	nop
    6500ff70:	add    rsp,0x20
    6500ff74:	pop    rbp
    6500ff75:	ret    
    6500ff76:	int3   
    6500ff77:	int3   
    6500ff78:	int3   
    6500ff79:	int3   
    6500ff7a:	int3   
    6500ff7b:	int3   
    6500ff7c:	int3   
    6500ff7d:	int3   
    6500ff7e:	int3   
    6500ff7f:	int3   
    6500ff80:	mov    QWORD PTR [rsp+0x18],rbp
    6500ff85:	push   rsi
    6500ff86:	sub    rsp,0x60
    6500ff8a:	mov    rbp,QWORD PTR [rcx+0x8]
    6500ff8e:	mov    QWORD PTR [rsp+0x20],rcx
    6500ff93:	mov    rsi,rcx
    6500ff96:	mov    rax,QWORD PTR [rbp+0x0]
    6500ff9a:	cmp    rax,rax
    6500ff9d:	mov    QWORD PTR [rsp+0x28],rax
    6500ffa2:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    6500ffa7:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    6500ffad:	jne    0x6500ffbe
    6500ffaf:	cmp    rbp,rbp
    6500ffb2:	jne    0x6500ffbe
    6500ffb4:	call   0x65011150
    6500ffb9:	jmp    0x65010087
    6500ffbe:	mov    QWORD PTR [rsp+0x70],rbx
    6500ffc3:	mov    rbx,QWORD PTR [rsp+0x28]
    6500ffc8:	mov    QWORD PTR [rsp+0x78],rdi
    6500ffcd:	movaps XMMWORD PTR [rsp+0x50],xmm6
    6500ffd2:	mov    rdi,QWORD PTR [rsp+0x20]
    6500ffd7:	test   rdi,rdi
    6500ffda:	je     0x6500ffe1
    6500ffdc:	cmp    rdi,rsi
    6500ffdf:	je     0x6500ffe6
    6500ffe1:	call   0x6501dad0
    6500ffe6:	cmp    rbx,rbp
    6500ffe9:	je     0x65010078
    6500ffef:	test   rdi,rdi
    6500fff2:	movaps xmm6,XMMWORD PTR [rsp+0x20]
    6500fff7:	jne    0x6500fffe
    6500fff9:	call   0x6501dad0
    6500fffe:	cmp    BYTE PTR [rbx+0x69],0x0
    65010002:	je     0x6501000b
    65010004:	call   0x6501dad0
    65010009:	jmp    0x6501005b
    6501000b:	mov    rax,QWORD PTR [rbx+0x10]
    6501000f:	cmp    BYTE PTR [rax+0x69],0x0
    65010013:	jne    0x65010034
    65010015:	mov    rbx,rax
    65010018:	mov    rax,QWORD PTR [rax]
    6501001b:	cmp    BYTE PTR [rax+0x69],0x0
    6501001f:	jne    0x6501002d
    65010021:	mov    rbx,rax
    65010024:	mov    rax,QWORD PTR [rax]
    65010027:	cmp    BYTE PTR [rax+0x69],0x0
    6501002b:	je     0x65010021
    6501002d:	mov    QWORD PTR [rsp+0x28],rbx
    65010032:	jmp    0x6501005b
    65010034:	mov    rax,QWORD PTR [rbx+0x8]
    65010038:	cmp    BYTE PTR [rax+0x69],0x0
    6501003c:	jne    0x65010053
    6501003e:	xchg   ax,ax
    65010040:	cmp    rbx,QWORD PTR [rax+0x10]
    65010044:	jne    0x65010053
    65010046:	mov    rbx,rax
    65010049:	mov    rax,QWORD PTR [rax+0x8]
    6501004d:	cmp    BYTE PTR [rax+0x69],0x0
    65010051:	je     0x65010040
    65010053:	mov    rbx,rax
    65010056:	mov    QWORD PTR [rsp+0x28],rax
    6501005b:	lea    r8,[rsp+0x30]
    65010060:	lea    rdx,[rsp+0x40]
    65010065:	mov    rcx,rsi
    65010068:	movdqa XMMWORD PTR [rsp+0x30],xmm6
    6501006e:	call   0x65010ac0
    65010073:	jmp    0x6500ffd7
    65010078:	movaps xmm6,XMMWORD PTR [rsp+0x50]
    6501007d:	mov    rbx,QWORD PTR [rsp+0x70]
    65010082:	mov    rdi,QWORD PTR [rsp+0x78]
    65010087:	mov    rcx,QWORD PTR [rsi+0x8]
    6501008b:	call   0x6501d300
    65010090:	mov    rbp,QWORD PTR [rsp+0x80]
    65010098:	xor    r11d,r11d
    6501009b:	mov    QWORD PTR [rsi+0x8],r11
    6501009f:	mov    QWORD PTR [rsi+0x10],r11
    650100a3:	add    rsp,0x60
    650100a7:	pop    rsi
    650100a8:	ret    
    650100a9:	int3   
    650100aa:	int3   
    650100ab:	int3   
    650100ac:	int3   
    650100ad:	int3   
    650100ae:	int3   
    650100af:	int3   
    650100b0:	mov    QWORD PTR [rsp+0x18],r8
    650100b5:	mov    QWORD PTR [rsp+0x10],rdx
    650100ba:	mov    QWORD PTR [rsp+0x8],rcx
    650100bf:	push   rbx
    650100c0:	push   rsi
    650100c1:	push   rdi
    650100c2:	push   r12
    650100c4:	sub    rsp,0x58
    650100c8:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    650100d1:	mov    r12,r8
    650100d4:	mov    rbx,rcx
    650100d7:	mov    rdi,rdx
    650100da:	or     rdi,0x7
    650100de:	movabs r9,0x7ffffffffffffffe
    650100e8:	cmp    rdi,r9
    650100eb:	jbe    0x650100f2
    650100ed:	mov    rdi,rdx
    650100f0:	jmp    0x6501011d
    650100f2:	mov    r8,QWORD PTR [rcx+0x20]
    650100f6:	mov    rcx,r8
    650100f9:	shr    rcx,1
    650100fc:	movabs rax,0xaaaaaaaaaaaaaaab
    65010106:	mul    rdi
    65010109:	shr    rdx,1
    6501010c:	cmp    rdx,rcx
    6501010f:	jae    0x6501011d
    65010111:	sub    r9,rcx
    65010114:	cmp    r8,r9
    65010117:	ja     0x6501011d
    65010119:	lea    rdi,[rcx+r8*1]
    6501011d:	lea    rcx,[rdi+0x1]
    65010121:	test   rcx,rcx
    65010124:	je     0x6501016e
    65010126:	xor    edx,edx
    65010128:	or     rax,0xffffffffffffffff
    6501012c:	div    rcx
    6501012f:	cmp    rax,0x2
    65010133:	jae    0x6501016e
    65010135:	xor    ecx,ecx
    65010137:	mov    QWORD PTR [rsp+0x98],rcx
    6501013f:	lea    rdx,[rsp+0x98]
    65010147:	lea    rcx,[rsp+0x30]
    6501014c:	call   0x6501d330
    65010151:	lea    rax,[rip+0x25060]        # 0x650351b8
    65010158:	mov    QWORD PTR [rsp+0x30],rax
    6501015d:	lea    rdx,[rip+0x312bc]        # 0x65041420
    65010164:	lea    rcx,[rsp+0x30]
    65010169:	call   0x6501dc60
    6501016e:	add    rcx,rcx
    65010171:	call   0x6501dbc0
    65010176:	mov    rsi,rax
    65010179:	jmp    0x65010198
    6501017b:	mov    rbx,QWORD PTR [rsp+0x80]
    65010183:	mov    r12,QWORD PTR [rsp+0x90]
    6501018b:	mov    rdi,QWORD PTR [rsp+0x88]
    65010193:	mov    rsi,QWORD PTR [rsp+0x20]
    65010198:	test   r12,r12
    6501019b:	je     0x650101bf
    6501019d:	cmp    QWORD PTR [rbx+0x20],0x8
    650101a2:	jb     0x650101aa
    650101a4:	mov    r8,QWORD PTR [rbx+0x8]
    650101a8:	jmp    0x650101ae
    650101aa:	lea    r8,[rbx+0x8]
    650101ae:	lea    r9,[r12+r12*1]
    650101b2:	lea    rdx,[rdi+rdi*1+0x2]
    650101b7:	mov    rcx,rsi
    650101ba:	call   0x6501d7b0
    650101bf:	cmp    QWORD PTR [rbx+0x20],0x8
    650101c4:	jb     0x650101cf
    650101c6:	mov    rcx,QWORD PTR [rbx+0x8]
    650101ca:	call   0x6501d300
    650101cf:	lea    rax,[rbx+0x8]
    650101d3:	mov    WORD PTR [rax],0x0
    650101d8:	mov    QWORD PTR [rax],rsi
    650101db:	mov    QWORD PTR [rbx+0x20],rdi
    650101df:	mov    QWORD PTR [rbx+0x18],r12
    650101e3:	cmp    rdi,0x8
    650101e7:	cmovae rax,rsi
    650101eb:	mov    WORD PTR [rax+r12*2],0x0
    650101f2:	add    rsp,0x58
    650101f6:	pop    r12
    650101f8:	pop    rdi
    650101f9:	pop    rsi
    650101fa:	pop    rbx
    650101fb:	ret    
    650101fc:	int3   
    650101fd:	int3   
    650101fe:	int3   
    650101ff:	int3   
    65010200:	mov    QWORD PTR [rsp+0x10],rdx
    65010205:	push   rbp
    65010206:	sub    rsp,0x20
    6501020a:	mov    rbp,rdx
    6501020d:	mov    rdx,QWORD PTR [rbp+0x88]
    65010214:	mov    QWORD PTR [rbp+0x88],rdx
    6501021b:	add    rdx,0x1
    6501021f:	mov    rcx,QWORD PTR [rbp+0x80]
    65010226:	call   0x65010a60
    6501022b:	mov    QWORD PTR [rbp+0x20],rax
    6501022f:	lea    rax,[rip+0xffffffffffffff45]        # 0x6501017b
    65010236:	add    rsp,0x20
    6501023a:	pop    rbp
    6501023b:	ret    
    6501023c:	int3   
    6501023d:	int3   
    6501023e:	int3   
    6501023f:	int3   
    65010240:	mov    QWORD PTR [rsp+0x10],rdx
    65010245:	push   rbx
    65010246:	push   rbp
    65010247:	sub    rsp,0x28
    6501024b:	mov    rbp,rdx
    6501024e:	mov    rbx,QWORD PTR [rbp+0x80]
    65010255:	cmp    QWORD PTR [rbx+0x20],0x8
    6501025a:	jb     0x65010265
    6501025c:	mov    rcx,QWORD PTR [rbx+0x8]
    65010260:	call   0x6501d300
    65010265:	mov    QWORD PTR [rbx+0x20],0x7
    6501026d:	xor    ecx,ecx
    6501026f:	mov    QWORD PTR [rbx+0x18],rcx
    65010273:	mov    WORD PTR [rbx+0x8],cx
    65010277:	xor    edx,edx
    65010279:	call   0x6501dc60
    6501027e:	nop
    6501027f:	add    rsp,0x28
    65010283:	pop    rbp
    65010284:	pop    rbx
    65010285:	ret    
    65010286:	int3   
    65010287:	int3   
    65010288:	int3   
    65010289:	int3   
    6501028a:	int3   
    6501028b:	int3   
    6501028c:	int3   
    6501028d:	int3   
    6501028e:	int3   
    6501028f:	int3   
    65010290:	mov    rax,rsp
    65010293:	push   r12
    65010295:	sub    rsp,0x90
    6501029c:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    650102a5:	mov    QWORD PTR [rax+0x8],rbx
    650102a9:	mov    QWORD PTR [rax+0x10],rsi
    650102ad:	mov    QWORD PTR [rax+0x18],rdi
    650102b1:	mov    rsi,r8
    650102b4:	mov    r12,rdx
    650102b7:	mov    rdi,rcx
    650102ba:	mov    rbx,QWORD PTR [r8+0x8]
    650102be:	cmp    BYTE PTR [rbx+0x69],0x0
    650102c2:	je     0x65010399
    650102c8:	mov    QWORD PTR [rax-0x50],0xf
    650102d0:	mov    QWORD PTR [rax-0x58],0x0
    650102d8:	mov    BYTE PTR [rax-0x68],0x0
    650102dc:	xor    r8d,r8d
    650102df:	lea    edx,[r8+0x1b]
    650102e3:	lea    rcx,[rax-0x70]
    650102e7:	call   0x65002330
    650102ec:	lea    rcx,[rsp+0x30]
    650102f1:	mov    rdx,QWORD PTR [rsp+0x48]
    650102f6:	cmp    rdx,0x10
    650102fa:	cmovae rcx,QWORD PTR [rsp+0x30]
    65010300:	mov    r9d,0x1b
    65010306:	lea    r8,[rip+0x28a93]        # 0x65038da0
    6501030d:	call   0x6501d7b0
    65010312:	mov    QWORD PTR [rsp+0x40],0x1b
    6501031b:	lea    rax,[rsp+0x30]
    65010320:	cmp    QWORD PTR [rsp+0x48],0x10
    65010326:	cmovae rax,QWORD PTR [rsp+0x30]
    6501032c:	mov    BYTE PTR [rax+0x1b],0x0
    65010330:	lea    rcx,[rsp+0x50]
    65010335:	call   0x6501d310
    6501033a:	nop
    6501033b:	lea    rax,[rip+0x24e8e]        # 0x650351d0
    65010342:	mov    QWORD PTR [rsp+0x50],rax
    65010347:	mov    QWORD PTR [rsp+0x88],0xf
    65010353:	mov    QWORD PTR [rsp+0x80],0x0
    6501035f:	mov    BYTE PTR [rsp+0x70],0x0
    65010364:	or     r9,0xffffffffffffffff
    65010368:	xor    r8d,r8d
    6501036b:	lea    rdx,[rsp+0x28]
    65010370:	lea    rcx,[rsp+0x68]
    65010375:	call   0x65001e20
    6501037a:	nop
    6501037b:	lea    rax,[rip+0x24e7e]        # 0x65035200
    65010382:	mov    QWORD PTR [rsp+0x50],rax
    65010387:	lea    rdx,[rip+0x31182]        # 0x65041510
    6501038e:	lea    rcx,[rsp+0x50]
    65010393:	call   0x6501dc60
    65010398:	nop
    65010399:	cmp    QWORD PTR [r8],0x0
    6501039d:	jne    0x650103a4
    6501039f:	call   0x6501dad0
    650103a4:	mov    rax,QWORD PTR [rsi+0x8]
    650103a8:	cmp    BYTE PTR [rax+0x69],0x0
    650103ac:	je     0x650103b5
    650103ae:	call   0x6501dad0
    650103b3:	jmp    0x6501040c
    650103b5:	mov    rcx,QWORD PTR [rax+0x10]
    650103b9:	cmp    BYTE PTR [rcx+0x69],0x0
    650103bd:	jne    0x650103e2
    650103bf:	mov    rax,QWORD PTR [rcx]
    650103c2:	cmp    BYTE PTR [rax+0x69],0x0
    650103c6:	jne    0x650103dc
    650103c8:	data16 data16 xchg ax,ax
    650103cc:	data16 data16 xchg ax,ax
    650103d0:	mov    rcx,rax
    650103d3:	mov    rax,QWORD PTR [rax]
    650103d6:	cmp    BYTE PTR [rax+0x69],0x0
    650103da:	je     0x650103d0
    650103dc:	mov    QWORD PTR [rsi+0x8],rcx
    650103e0:	jmp    0x6501040c
    650103e2:	mov    rcx,QWORD PTR [rax+0x8]
    650103e6:	cmp    BYTE PTR [rcx+0x69],0x0
    650103ea:	jne    0x65010408
    650103ec:	data16 data16 xchg ax,ax
    650103f0:	mov    rax,QWORD PTR [rcx+0x10]
    650103f4:	cmp    QWORD PTR [rsi+0x8],rax
    650103f8:	jne    0x65010408
    650103fa:	mov    QWORD PTR [rsi+0x8],rcx
    650103fe:	mov    rcx,QWORD PTR [rcx+0x8]
    65010402:	cmp    BYTE PTR [rcx+0x69],0x0
    65010406:	je     0x650103f0
    65010408:	mov    QWORD PTR [rsi+0x8],rcx
    6501040c:	mov    rcx,QWORD PTR [rbx]
    6501040f:	cmp    BYTE PTR [rcx+0x69],0x0
    65010413:	je     0x6501041b
    65010415:	mov    r8,QWORD PTR [rbx+0x10]
    65010419:	jmp    0x6501043b
    6501041b:	mov    rax,QWORD PTR [rbx+0x10]
    6501041f:	cmp    BYTE PTR [rax+0x69],0x0
    65010423:	je     0x6501042a
    65010425:	mov    r8,rcx
    65010428:	jmp    0x6501043b
    6501042a:	mov    r9,QWORD PTR [rsi+0x8]
    6501042e:	mov    r8,QWORD PTR [r9+0x10]
    65010432:	cmp    r9,rbx
    65010435:	jne    0x650104e3
    6501043b:	mov    rdx,QWORD PTR [rbx+0x8]
    6501043f:	cmp    BYTE PTR [r8+0x69],0x0
    65010444:	jne    0x6501044a
    65010446:	mov    QWORD PTR [r8+0x8],rdx
    6501044a:	mov    rax,QWORD PTR [rdi+0x8]
    6501044e:	cmp    QWORD PTR [rax+0x8],rbx
    65010452:	jne    0x6501045a
    65010454:	mov    QWORD PTR [rax+0x8],r8
    65010458:	jmp    0x65010468
    6501045a:	cmp    QWORD PTR [rdx],rbx
    6501045d:	jne    0x65010464
    6501045f:	mov    QWORD PTR [rdx],r8
    65010462:	jmp    0x65010468
    65010464:	mov    QWORD PTR [rdx+0x10],r8
    65010468:	mov    r9,QWORD PTR [rdi+0x8]
    6501046c:	cmp    QWORD PTR [r9],rbx
    6501046f:	jne    0x6501049f
    65010471:	cmp    BYTE PTR [r8+0x69],0x0
    65010476:	je     0x6501047d
    65010478:	mov    rcx,rdx
    6501047b:	jmp    0x6501049c
    6501047d:	mov    rcx,r8
    65010480:	mov    rax,QWORD PTR [r8]
    65010483:	cmp    BYTE PTR [rax+0x69],0x0
    65010487:	jne    0x6501049c
    65010489:	data16 xchg ax,ax
    6501048c:	data16 data16 xchg ax,ax
    65010490:	mov    rcx,rax
    65010493:	mov    rax,QWORD PTR [rax]
    65010496:	cmp    BYTE PTR [rax+0x69],0x0
    6501049a:	je     0x65010490
    6501049c:	mov    QWORD PTR [r9],rcx
    6501049f:	mov    r9,QWORD PTR [rdi+0x8]
    650104a3:	cmp    QWORD PTR [r9+0x10],rbx
    650104a7:	jne    0x65010554
    650104ad:	cmp    BYTE PTR [r8+0x69],0x0
    650104b2:	je     0x650104b9
    650104b4:	mov    rcx,rdx
    650104b7:	jmp    0x650104dd
    650104b9:	mov    rcx,r8
    650104bc:	mov    rax,QWORD PTR [r8+0x10]
    650104c0:	cmp    BYTE PTR [rax+0x69],0x0
    650104c4:	jne    0x650104dd
    650104c6:	data16 data16 xchg ax,ax
    650104ca:	data16 xchg ax,ax
    650104cd:	data16 xchg ax,ax
    650104d0:	mov    rcx,rax
    650104d3:	mov    rax,QWORD PTR [rax+0x10]
    650104d7:	cmp    BYTE PTR [rax+0x69],0x0
    650104db:	je     0x650104d0
    650104dd:	mov    QWORD PTR [r9+0x10],rcx
    650104e1:	jmp    0x65010554
    650104e3:	mov    QWORD PTR [rcx+0x8],r9
    650104e7:	mov    rax,QWORD PTR [rbx]
    650104ea:	mov    QWORD PTR [r9],rax
    650104ed:	cmp    r9,QWORD PTR [rbx+0x10]
    650104f1:	jne    0x650104f8
    650104f3:	mov    rdx,r9
    650104f6:	jmp    0x6501051a
    650104f8:	mov    rdx,QWORD PTR [r9+0x8]
    650104fc:	cmp    BYTE PTR [r8+0x69],0x0
    65010501:	jne    0x65010507
    65010503:	mov    QWORD PTR [r8+0x8],rdx
    65010507:	mov    QWORD PTR [rdx],r8
    6501050a:	mov    rax,QWORD PTR [rbx+0x10]
    6501050e:	mov    QWORD PTR [r9+0x10],rax
    65010512:	mov    rax,QWORD PTR [rbx+0x10]
    65010516:	mov    QWORD PTR [rax+0x8],r9
    6501051a:	mov    rax,QWORD PTR [rdi+0x8]
    6501051e:	cmp    QWORD PTR [rax+0x8],rbx
    65010522:	jne    0x6501052a
    65010524:	mov    QWORD PTR [rax+0x8],r9
    65010528:	jmp    0x6501053c
    6501052a:	mov    rax,QWORD PTR [rbx+0x8]
    6501052e:	cmp    QWORD PTR [rax],rbx
    65010531:	jne    0x65010538
    65010533:	mov    QWORD PTR [rax],r9
    65010536:	jmp    0x6501053c
    65010538:	mov    QWORD PTR [rax+0x10],r9
    6501053c:	mov    rax,QWORD PTR [rbx+0x8]
    65010540:	mov    QWORD PTR [r9+0x8],rax
    65010544:	movzx  ecx,BYTE PTR [r9+0x68]
    65010549:	movzx  eax,BYTE PTR [rbx+0x68]
    6501054d:	mov    BYTE PTR [r9+0x68],al
    65010551:	mov    BYTE PTR [rbx+0x68],cl
    65010554:	cmp    BYTE PTR [rbx+0x68],0x1
    65010558:	jne    0x65010843
    6501055e:	mov    rax,QWORD PTR [rdi+0x8]
    65010562:	cmp    r8,QWORD PTR [rax+0x8]
    65010566:	je     0x6501083e
    6501056c:	data16 data16 xchg ax,ax
    65010570:	cmp    BYTE PTR [r8+0x68],0x1
    65010575:	jne    0x6501083e
    6501057b:	mov    rcx,QWORD PTR [rdx]
    6501057e:	cmp    r8,rcx
    65010581:	jne    0x6501061b
    65010587:	mov    rcx,QWORD PTR [rdx+0x10]
    6501058b:	cmp    BYTE PTR [rcx+0x68],0x0
    6501058f:	jne    0x650105e6
    65010591:	mov    BYTE PTR [rcx+0x68],0x1
    65010595:	mov    BYTE PTR [rdx+0x68],0x0
    65010599:	mov    rcx,QWORD PTR [rdx+0x10]
    6501059d:	mov    rax,QWORD PTR [rcx]
    650105a0:	mov    QWORD PTR [rdx+0x10],rax
    650105a4:	mov    rax,QWORD PTR [rcx]
    650105a7:	cmp    BYTE PTR [rax+0x69],0x0
    650105ab:	jne    0x650105b1
    650105ad:	mov    QWORD PTR [rax+0x8],rdx
    650105b1:	mov    rax,QWORD PTR [rdx+0x8]
    650105b5:	mov    QWORD PTR [rcx+0x8],rax
    650105b9:	mov    rax,QWORD PTR [rdi+0x8]
    650105bd:	cmp    rdx,QWORD PTR [rax+0x8]
    650105c1:	jne    0x650105c9
    650105c3:	mov    QWORD PTR [rax+0x8],rcx
    650105c7:	jmp    0x650105db
    650105c9:	mov    rax,QWORD PTR [rdx+0x8]
    650105cd:	cmp    rdx,QWORD PTR [rax]
    650105d0:	jne    0x650105d7
    650105d2:	mov    QWORD PTR [rax],rcx
    650105d5:	jmp    0x650105db
    650105d7:	mov    QWORD PTR [rax+0x10],rcx
    650105db:	mov    QWORD PTR [rcx],rdx
    650105de:	mov    QWORD PTR [rdx+0x8],rcx
    650105e2:	mov    rcx,QWORD PTR [rdx+0x10]
    650105e6:	cmp    BYTE PTR [rcx+0x69],0x0
    650105ea:	je     0x650105f4
    650105ec:	mov    r8,rdx
    650105ef:	jmp    0x650106a4
    650105f4:	mov    rax,QWORD PTR [rcx]
    650105f7:	cmp    BYTE PTR [rax+0x68],0x1
    650105fb:	jne    0x650106bb
    65010601:	mov    rax,QWORD PTR [rcx+0x10]
    65010605:	cmp    BYTE PTR [rax+0x68],0x1
    65010609:	jne    0x650106bb
    6501060f:	mov    BYTE PTR [rcx+0x68],0x0
    65010613:	mov    r8,rdx
    65010616:	jmp    0x650106a4
    6501061b:	cmp    BYTE PTR [rcx+0x68],0x0
    6501061f:	jne    0x65010677
    65010621:	mov    BYTE PTR [rcx+0x68],0x1
    65010625:	mov    BYTE PTR [rdx+0x68],0x0
    65010629:	mov    rcx,QWORD PTR [rdx]
    6501062c:	mov    rax,QWORD PTR [rcx+0x10]
    65010630:	mov    QWORD PTR [rdx],rax
    65010633:	mov    rax,QWORD PTR [rcx+0x10]
    65010637:	cmp    BYTE PTR [rax+0x69],0x0
    6501063b:	jne    0x65010641
    6501063d:	mov    QWORD PTR [rax+0x8],rdx
    65010641:	mov    rax,QWORD PTR [rdx+0x8]
    65010645:	mov    QWORD PTR [rcx+0x8],rax
    65010649:	mov    rax,QWORD PTR [rdi+0x8]
    6501064d:	cmp    rdx,QWORD PTR [rax+0x8]
    65010651:	jne    0x65010659
    65010653:	mov    QWORD PTR [rax+0x8],rcx
    65010657:	jmp    0x6501066c
    65010659:	mov    rax,QWORD PTR [rdx+0x8]
    6501065d:	cmp    rdx,QWORD PTR [rax+0x10]
    65010661:	jne    0x65010669
    65010663:	mov    QWORD PTR [rax+0x10],rcx
    65010667:	jmp    0x6501066c
    65010669:	mov    QWORD PTR [rax],rcx
    6501066c:	mov    QWORD PTR [rcx+0x10],rdx
    65010670:	mov    QWORD PTR [rdx+0x8],rcx
    65010674:	mov    rcx,QWORD PTR [rdx]
    65010677:	cmp    BYTE PTR [rcx+0x69],0x0
    6501067b:	je     0x65010682
    6501067d:	mov    r8,rdx
    65010680:	jmp    0x650106a4
    65010682:	mov    rax,QWORD PTR [rcx+0x10]
    65010686:	cmp    BYTE PTR [rax+0x68],0x1
    6501068a:	jne    0x65010780
    65010690:	mov    rax,QWORD PTR [rcx]
    65010693:	cmp    BYTE PTR [rax+0x68],0x1
    65010697:	jne    0x65010780
    6501069d:	mov    BYTE PTR [rcx+0x68],0x0
    650106a1:	mov    r8,rdx
    650106a4:	mov    rdx,QWORD PTR [rdx+0x8]
    650106a8:	mov    rax,QWORD PTR [rdi+0x8]
    650106ac:	cmp    r8,QWORD PTR [rax+0x8]
    650106b0:	je     0x6501083e
    650106b6:	jmp    0x65010570
    650106bb:	mov    rax,QWORD PTR [rcx+0x10]
    650106bf:	cmp    BYTE PTR [rax+0x68],0x1
    650106c3:	jne    0x6501071f
    650106c5:	mov    rax,QWORD PTR [rcx]
    650106c8:	mov    BYTE PTR [rax+0x68],0x1
    650106cc:	mov    BYTE PTR [rcx+0x68],0x0
    650106d0:	mov    r9,QWORD PTR [rcx]
    650106d3:	mov    rax,QWORD PTR [r9+0x10]
    650106d7:	mov    QWORD PTR [rcx],rax
    650106da:	mov    rax,QWORD PTR [r9+0x10]
    650106de:	cmp    BYTE PTR [rax+0x69],0x0
    650106e2:	jne    0x650106e8
    650106e4:	mov    QWORD PTR [rax+0x8],rcx
    650106e8:	mov    rax,QWORD PTR [rcx+0x8]
    650106ec:	mov    QWORD PTR [r9+0x8],rax
    650106f0:	mov    rax,QWORD PTR [rdi+0x8]
    650106f4:	cmp    rcx,QWORD PTR [rax+0x8]
    650106f8:	jne    0x65010700
    650106fa:	mov    QWORD PTR [rax+0x8],r9
    650106fe:	jmp    0x65010713
    65010700:	mov    rax,QWORD PTR [rcx+0x8]
    65010704:	cmp    rcx,QWORD PTR [rax+0x10]
    65010708:	jne    0x65010710
    6501070a:	mov    QWORD PTR [rax+0x10],r9
    6501070e:	jmp    0x65010713
    65010710:	mov    QWORD PTR [rax],r9
    65010713:	mov    QWORD PTR [r9+0x10],rcx
    65010717:	mov    QWORD PTR [rcx+0x8],r9
    6501071b:	mov    rcx,QWORD PTR [rdx+0x10]
    6501071f:	movzx  eax,BYTE PTR [rdx+0x68]
    65010723:	mov    BYTE PTR [rcx+0x68],al
    65010726:	mov    BYTE PTR [rdx+0x68],0x1
    6501072a:	mov    rax,QWORD PTR [rcx+0x10]
    6501072e:	mov    BYTE PTR [rax+0x68],0x1
    65010732:	mov    rcx,QWORD PTR [rdx+0x10]
    65010736:	mov    rax,QWORD PTR [rcx]
    65010739:	mov    QWORD PTR [rdx+0x10],rax
    6501073d:	mov    rax,QWORD PTR [rcx]
    65010740:	cmp    BYTE PTR [rax+0x69],0x0
    65010744:	jne    0x6501074a
    65010746:	mov    QWORD PTR [rax+0x8],rdx
    6501074a:	mov    rax,QWORD PTR [rdx+0x8]
    6501074e:	mov    QWORD PTR [rcx+0x8],rax
    65010752:	mov    rax,QWORD PTR [rdi+0x8]
    65010756:	cmp    rdx,QWORD PTR [rax+0x8]
    6501075a:	jne    0x65010762
    6501075c:	mov    QWORD PTR [rax+0x8],rcx
    65010760:	jmp    0x65010774
    65010762:	mov    rax,QWORD PTR [rdx+0x8]
    65010766:	cmp    rdx,QWORD PTR [rax]
    65010769:	jne    0x65010770
    6501076b:	mov    QWORD PTR [rax],rcx
    6501076e:	jmp    0x65010774
    65010770:	mov    QWORD PTR [rax+0x10],rcx
    65010774:	mov    QWORD PTR [rcx],rdx
    65010777:	mov    QWORD PTR [rdx+0x8],rcx
    6501077b:	jmp    0x6501083e
    65010780:	mov    rax,QWORD PTR [rcx]
    65010783:	cmp    BYTE PTR [rax+0x68],0x1
    65010787:	jne    0x650107e1
    65010789:	mov    rax,QWORD PTR [rcx+0x10]
    6501078d:	mov    BYTE PTR [rax+0x68],0x1
    65010791:	mov    BYTE PTR [rcx+0x68],0x0
    65010795:	mov    r9,QWORD PTR [rcx+0x10]
    65010799:	mov    rax,QWORD PTR [r9]
    6501079c:	mov    QWORD PTR [rcx+0x10],rax
    650107a0:	mov    rax,QWORD PTR [r9]
    650107a3:	cmp    BYTE PTR [rax+0x69],0x0
    650107a7:	jne    0x650107ad
    650107a9:	mov    QWORD PTR [rax+0x8],rcx
    650107ad:	mov    rax,QWORD PTR [rcx+0x8]
    650107b1:	mov    QWORD PTR [r9+0x8],rax
    650107b5:	mov    rax,QWORD PTR [rdi+0x8]
    650107b9:	cmp    rcx,QWORD PTR [rax+0x8]
    650107bd:	jne    0x650107c5
    650107bf:	mov    QWORD PTR [rax+0x8],r9
    650107c3:	jmp    0x650107d7
    650107c5:	mov    rax,QWORD PTR [rcx+0x8]
    650107c9:	cmp    rcx,QWORD PTR [rax]
    650107cc:	jne    0x650107d3
    650107ce:	mov    QWORD PTR [rax],r9
    650107d1:	jmp    0x650107d7
    650107d3:	mov    QWORD PTR [rax+0x10],r9
    650107d7:	mov    QWORD PTR [r9],rcx
    650107da:	mov    QWORD PTR [rcx+0x8],r9
    650107de:	mov    rcx,QWORD PTR [rdx]
    650107e1:	movzx  eax,BYTE PTR [rdx+0x68]
    650107e5:	mov    BYTE PTR [rcx+0x68],al
    650107e8:	mov    BYTE PTR [rdx+0x68],0x1
    650107ec:	mov    rax,QWORD PTR [rcx]
    650107ef:	mov    BYTE PTR [rax+0x68],0x1
    650107f3:	mov    rcx,QWORD PTR [rdx]
    650107f6:	mov    rax,QWORD PTR [rcx+0x10]
    650107fa:	mov    QWORD PTR [rdx],rax
    650107fd:	mov    rax,QWORD PTR [rcx+0x10]
    65010801:	cmp    BYTE PTR [rax+0x69],0x0
    65010805:	jne    0x6501080b
    65010807:	mov    QWORD PTR [rax+0x8],rdx
    6501080b:	mov    rax,QWORD PTR [rdx+0x8]
    6501080f:	mov    QWORD PTR [rcx+0x8],rax
    65010813:	mov    rax,QWORD PTR [rdi+0x8]
    65010817:	cmp    rdx,QWORD PTR [rax+0x8]
    6501081b:	jne    0x65010823
    6501081d:	mov    QWORD PTR [rax+0x8],rcx
    65010821:	jmp    0x65010836
    65010823:	mov    rax,QWORD PTR [rdx+0x8]
    65010827:	cmp    rdx,QWORD PTR [rax+0x10]
    6501082b:	jne    0x65010833
    6501082d:	mov    QWORD PTR [rax+0x10],rcx
    65010831:	jmp    0x65010836
    65010833:	mov    QWORD PTR [rax],rcx
    65010836:	mov    QWORD PTR [rcx+0x10],rdx
    6501083a:	mov    QWORD PTR [rdx+0x8],rcx
    6501083e:	mov    BYTE PTR [r8+0x68],0x1
    65010843:	cmp    QWORD PTR [rbx+0x60],0x10
    65010848:	jb     0x65010853
    6501084a:	mov    rcx,QWORD PTR [rbx+0x48]
    6501084e:	call   0x6501d300
    65010853:	mov    QWORD PTR [rbx+0x60],0xf
    6501085b:	mov    QWORD PTR [rbx+0x58],0x0
    65010863:	mov    BYTE PTR [rbx+0x48],0x0
    65010867:	cmp    QWORD PTR [rbx+0x38],0x10
    6501086c:	jb     0x65010877
    6501086e:	mov    rcx,QWORD PTR [rbx+0x20]
    65010872:	call   0x6501d300
    65010877:	mov    QWORD PTR [rbx+0x38],0xf
    6501087f:	mov    QWORD PTR [rbx+0x30],0x0
    65010887:	mov    BYTE PTR [rbx+0x20],0x0
    6501088b:	mov    rcx,rbx
    6501088e:	call   0x6501d300
    65010893:	mov    rax,QWORD PTR [rdi+0x10]
    65010897:	test   rax,rax
    6501089a:	je     0x650108a4
    6501089c:	add    rax,0xffffffffffffffff
    650108a0:	mov    QWORD PTR [rdi+0x10],rax
    650108a4:	mov    rax,QWORD PTR [rsi]
    650108a7:	mov    QWORD PTR [r12],rax
    650108ab:	mov    rax,QWORD PTR [rsi+0x8]
    650108af:	mov    QWORD PTR [r12+0x8],rax
    650108b4:	mov    rax,r12
    650108b7:	lea    r11,[rsp+0x90]
    650108bf:	mov    rbx,QWORD PTR [r11+0x10]
    650108c3:	mov    rsi,QWORD PTR [r11+0x18]
    650108c7:	mov    rdi,QWORD PTR [r11+0x20]
    650108cb:	mov    rsp,r11
    650108ce:	pop    r12
    650108d0:	ret    
    650108d1:	int3   
    650108d2:	int3   
    650108d3:	int3   
    650108d4:	int3   
    650108d5:	int3   
    650108d6:	int3   
    650108d7:	int3   
    650108d8:	int3   
    650108d9:	int3   
    650108da:	int3   
    650108db:	int3   
    650108dc:	int3   
    650108dd:	int3   
    650108de:	int3   
    650108df:	int3   
    650108e0:	rex push rbp
    650108e2:	sub    rsp,0x20
    650108e6:	mov    rbp,rdx
    650108e9:	lea    rcx,[rbp+0x28]
    650108ed:	call   0x65001c70
    650108f2:	add    rsp,0x20
    650108f6:	pop    rbp
    650108f7:	ret    
    650108f8:	int3   
    650108f9:	int3   
    650108fa:	int3   
    650108fb:	int3   
    650108fc:	int3   
    650108fd:	int3   
    650108fe:	int3   
    650108ff:	int3   
    65010900:	rex push rbp
    65010902:	sub    rsp,0x20
    65010906:	mov    rbp,rdx
    65010909:	lea    rcx,[rbp+0x50]
    6501090d:	call   0x6501d490
    65010912:	add    rsp,0x20
    65010916:	pop    rbp
    65010917:	ret    
    65010918:	int3   
    65010919:	int3   
    6501091a:	int3   
    6501091b:	int3   
    6501091c:	int3   
    6501091d:	int3   
    6501091e:	int3   
    6501091f:	int3   
    65010920:	mov    QWORD PTR [rsp+0x8],rbx
    65010925:	mov    QWORD PTR [rsp+0x10],rbp
    6501092a:	mov    QWORD PTR [rsp+0x18],rsi
    6501092f:	push   rdi
    65010930:	sub    rsp,0x20
    65010934:	mov    rax,QWORD PTR [rcx+0x8]
    65010938:	xor    ebp,ebp
    6501093a:	mov    rdi,rcx
    6501093d:	mov    rbx,QWORD PTR [rax+0x8]
    65010941:	mov    rsi,rbx
    65010944:	cmp    BYTE PTR [rbx+0x69],bpl
    65010948:	jne    0x650109b0
    6501094a:	data16 xchg ax,ax
    6501094d:	data16 xchg ax,ax
    65010950:	mov    rdx,QWORD PTR [rsi+0x10]
    65010954:	mov    rcx,rdi
    65010957:	call   0x65011290
    6501095c:	cmp    QWORD PTR [rbx+0x60],0x10
    65010961:	mov    rsi,QWORD PTR [rsi]
    65010964:	jb     0x6501096f
    65010966:	mov    rcx,QWORD PTR [rbx+0x48]
    6501096a:	call   0x6501d300
    6501096f:	mov    QWORD PTR [rbx+0x60],0xf
    65010977:	mov    QWORD PTR [rbx+0x58],rbp
    6501097b:	mov    BYTE PTR [rbx+0x48],bpl
    6501097f:	cmp    QWORD PTR [rbx+0x38],0x10
    65010984:	jb     0x6501098f
    65010986:	mov    rcx,QWORD PTR [rbx+0x20]
    6501098a:	call   0x6501d300
    6501098f:	mov    QWORD PTR [rbx+0x38],0xf
    65010997:	mov    QWORD PTR [rbx+0x30],rbp
    6501099b:	mov    rcx,rbx
    6501099e:	mov    BYTE PTR [rbx+0x20],bpl
    650109a2:	call   0x6501d300
    650109a7:	cmp    BYTE PTR [rsi+0x69],bpl
    650109ab:	mov    rbx,rsi
    650109ae:	je     0x65010950
    650109b0:	mov    rax,QWORD PTR [rdi+0x8]
    650109b4:	mov    rbx,QWORD PTR [rsp+0x30]
    650109b9:	mov    rsi,QWORD PTR [rsp+0x40]
    650109be:	mov    QWORD PTR [rax+0x8],rax
    650109c2:	mov    rax,QWORD PTR [rdi+0x8]
    650109c6:	mov    QWORD PTR [rdi+0x10],rbp
    650109ca:	mov    rbp,QWORD PTR [rsp+0x38]
    650109cf:	mov    QWORD PTR [rax],rax
    650109d2:	mov    rax,QWORD PTR [rdi+0x8]
    650109d6:	mov    QWORD PTR [rax+0x10],rax
    650109da:	add    rsp,0x20
    650109de:	pop    rdi
    650109df:	ret    
    650109e0:	sub    rsp,0x38
    650109e4:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    650109ed:	mov    ecx,0x70
    650109f2:	call   0x6501dbc0
    650109f7:	mov    QWORD PTR [rsp+0x48],rax
    650109fc:	test   rax,rax
    650109ff:	je     0x65010a08
    65010a01:	xor    ecx,ecx
    65010a03:	mov    QWORD PTR [rax],rcx
    65010a06:	jmp    0x65010a0a
    65010a08:	xor    ecx,ecx
    65010a0a:	lea    rdx,[rax+0x8]
    65010a0e:	test   rdx,rdx
    65010a11:	je     0x65010a16
    65010a13:	mov    QWORD PTR [rdx],rcx
    65010a16:	lea    rdx,[rax+0x10]
    65010a1a:	test   rdx,rdx
    65010a1d:	je     0x65010a22
    65010a1f:	mov    QWORD PTR [rdx],rcx
    65010a22:	mov    BYTE PTR [rax+0x68],0x1
    65010a26:	mov    BYTE PTR [rax+0x69],0x0
    65010a2a:	add    rsp,0x38
    65010a2e:	ret    
    65010a2f:	int3   
    65010a30:	mov    QWORD PTR [rsp+0x10],rdx
    65010a35:	push   rbp
    65010a36:	sub    rsp,0x20
    65010a3a:	mov    rbp,rdx
    65010a3d:	mov    rcx,QWORD PTR [rbp+0x48]
    65010a41:	call   0x6501d300
    65010a46:	xor    edx,edx
    65010a48:	xor    ecx,ecx
    65010a4a:	call   0x6501dc60
    65010a4f:	nop
    65010a50:	add    rsp,0x20
    65010a54:	pop    rbp
    65010a55:	ret    
    65010a56:	int3   
    65010a57:	int3   
    65010a58:	int3   
    65010a59:	int3   
    65010a5a:	int3   
    65010a5b:	int3   
    65010a5c:	int3   
    65010a5d:	int3   
    65010a5e:	int3   
    65010a5f:	int3   
    65010a60:	sub    rsp,0x48
    65010a64:	test   rdx,rdx
    65010a67:	mov    r8,rdx
    65010a6a:	jne    0x65010a7a
    65010a6c:	lea    rcx,[r8+r8*1]
    65010a70:	call   0x6501dbc0
    65010a75:	add    rsp,0x48
    65010a79:	ret    
    65010a7a:	xor    edx,edx
    65010a7c:	or     rax,0xffffffffffffffff
    65010a80:	div    r8
    65010a83:	cmp    rax,0x2
    65010a87:	jae    0x65010a6c
    65010a89:	xor    r8d,r8d
    65010a8c:	lea    rdx,[rsp+0x58]
    65010a91:	lea    rcx,[rsp+0x20]
    65010a96:	mov    QWORD PTR [rsp+0x58],r8
    65010a9b:	call   0x6501d330
    65010aa0:	lea    r11,[rip+0x24711]        # 0x650351b8
    65010aa7:	lea    rdx,[rip+0x30972]        # 0x65041420
    65010aae:	lea    rcx,[rsp+0x20]
    65010ab3:	mov    QWORD PTR [rsp+0x20],r11
    65010ab8:	call   0x6501dc60
    65010abd:	int3   
    65010abe:	int3   
    65010abf:	int3   
    65010ac0:	mov    rax,rsp
    65010ac3:	push   r12
    65010ac5:	sub    rsp,0x90
    65010acc:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65010ad5:	mov    QWORD PTR [rax+0x8],rbx
    65010ad9:	mov    QWORD PTR [rax+0x10],rsi
    65010add:	mov    QWORD PTR [rax+0x18],rdi
    65010ae1:	mov    rsi,r8
    65010ae4:	mov    r12,rdx
    65010ae7:	mov    rdi,rcx
    65010aea:	mov    rbx,QWORD PTR [r8+0x8]
    65010aee:	cmp    BYTE PTR [rbx+0x69],0x0
    65010af2:	je     0x65010bc9
    65010af8:	mov    QWORD PTR [rax-0x50],0xf
    65010b00:	mov    QWORD PTR [rax-0x58],0x0
    65010b08:	mov    BYTE PTR [rax-0x68],0x0
    65010b0c:	xor    r8d,r8d
    65010b0f:	lea    edx,[r8+0x1b]
    65010b13:	lea    rcx,[rax-0x70]
    65010b17:	call   0x65002330
    65010b1c:	lea    rcx,[rsp+0x30]
    65010b21:	mov    rdx,QWORD PTR [rsp+0x48]
    65010b26:	cmp    rdx,0x10
    65010b2a:	cmovae rcx,QWORD PTR [rsp+0x30]
    65010b30:	mov    r9d,0x1b
    65010b36:	lea    r8,[rip+0x28263]        # 0x65038da0
    65010b3d:	call   0x6501d7b0
    65010b42:	mov    QWORD PTR [rsp+0x40],0x1b
    65010b4b:	lea    rax,[rsp+0x30]
    65010b50:	cmp    QWORD PTR [rsp+0x48],0x10
    65010b56:	cmovae rax,QWORD PTR [rsp+0x30]
    65010b5c:	mov    BYTE PTR [rax+0x1b],0x0
    65010b60:	lea    rcx,[rsp+0x50]
    65010b65:	call   0x6501d310
    65010b6a:	nop
    65010b6b:	lea    rax,[rip+0x2465e]        # 0x650351d0
    65010b72:	mov    QWORD PTR [rsp+0x50],rax
    65010b77:	mov    QWORD PTR [rsp+0x88],0xf
    65010b83:	mov    QWORD PTR [rsp+0x80],0x0
    65010b8f:	mov    BYTE PTR [rsp+0x70],0x0
    65010b94:	or     r9,0xffffffffffffffff
    65010b98:	xor    r8d,r8d
    65010b9b:	lea    rdx,[rsp+0x28]
    65010ba0:	lea    rcx,[rsp+0x68]
    65010ba5:	call   0x65001e20
    65010baa:	nop
    65010bab:	lea    rax,[rip+0x2464e]        # 0x65035200
    65010bb2:	mov    QWORD PTR [rsp+0x50],rax
    65010bb7:	lea    rdx,[rip+0x30952]        # 0x65041510
    65010bbe:	lea    rcx,[rsp+0x50]
    65010bc3:	call   0x6501dc60
    65010bc8:	nop
    65010bc9:	cmp    QWORD PTR [r8],0x0
    65010bcd:	jne    0x65010bd4
    65010bcf:	call   0x6501dad0
    65010bd4:	mov    rax,QWORD PTR [rsi+0x8]
    65010bd8:	cmp    BYTE PTR [rax+0x69],0x0
    65010bdc:	je     0x65010be5
    65010bde:	call   0x6501dad0
    65010be3:	jmp    0x65010c3c
    65010be5:	mov    rcx,QWORD PTR [rax+0x10]
    65010be9:	cmp    BYTE PTR [rcx+0x69],0x0
    65010bed:	jne    0x65010c12
    65010bef:	mov    rax,QWORD PTR [rcx]
    65010bf2:	cmp    BYTE PTR [rax+0x69],0x0
    65010bf6:	jne    0x65010c0c
    65010bf8:	data16 data16 xchg ax,ax
    65010bfc:	data16 data16 xchg ax,ax
    65010c00:	mov    rcx,rax
    65010c03:	mov    rax,QWORD PTR [rax]
    65010c06:	cmp    BYTE PTR [rax+0x69],0x0
    65010c0a:	je     0x65010c00
    65010c0c:	mov    QWORD PTR [rsi+0x8],rcx
    65010c10:	jmp    0x65010c3c
    65010c12:	mov    rcx,QWORD PTR [rax+0x8]
    65010c16:	cmp    BYTE PTR [rcx+0x69],0x0
    65010c1a:	jne    0x65010c38
    65010c1c:	data16 data16 xchg ax,ax
    65010c20:	mov    rax,QWORD PTR [rcx+0x10]
    65010c24:	cmp    QWORD PTR [rsi+0x8],rax
    65010c28:	jne    0x65010c38
    65010c2a:	mov    QWORD PTR [rsi+0x8],rcx
    65010c2e:	mov    rcx,QWORD PTR [rcx+0x8]
    65010c32:	cmp    BYTE PTR [rcx+0x69],0x0
    65010c36:	je     0x65010c20
    65010c38:	mov    QWORD PTR [rsi+0x8],rcx
    65010c3c:	mov    rcx,QWORD PTR [rbx]
    65010c3f:	cmp    BYTE PTR [rcx+0x69],0x0
    65010c43:	je     0x65010c4b
    65010c45:	mov    r8,QWORD PTR [rbx+0x10]
    65010c49:	jmp    0x65010c6b
    65010c4b:	mov    rax,QWORD PTR [rbx+0x10]
    65010c4f:	cmp    BYTE PTR [rax+0x69],0x0
    65010c53:	je     0x65010c5a
    65010c55:	mov    r8,rcx
    65010c58:	jmp    0x65010c6b
    65010c5a:	mov    r9,QWORD PTR [rsi+0x8]
    65010c5e:	mov    r8,QWORD PTR [r9+0x10]
    65010c62:	cmp    r9,rbx
    65010c65:	jne    0x65010d13
    65010c6b:	mov    rdx,QWORD PTR [rbx+0x8]
    65010c6f:	cmp    BYTE PTR [r8+0x69],0x0
    65010c74:	jne    0x65010c7a
    65010c76:	mov    QWORD PTR [r8+0x8],rdx
    65010c7a:	mov    rax,QWORD PTR [rdi+0x8]
    65010c7e:	cmp    QWORD PTR [rax+0x8],rbx
    65010c82:	jne    0x65010c8a
    65010c84:	mov    QWORD PTR [rax+0x8],r8
    65010c88:	jmp    0x65010c98
    65010c8a:	cmp    QWORD PTR [rdx],rbx
    65010c8d:	jne    0x65010c94
    65010c8f:	mov    QWORD PTR [rdx],r8
    65010c92:	jmp    0x65010c98
    65010c94:	mov    QWORD PTR [rdx+0x10],r8
    65010c98:	mov    r9,QWORD PTR [rdi+0x8]
    65010c9c:	cmp    QWORD PTR [r9],rbx
    65010c9f:	jne    0x65010ccf
    65010ca1:	cmp    BYTE PTR [r8+0x69],0x0
    65010ca6:	je     0x65010cad
    65010ca8:	mov    rcx,rdx
    65010cab:	jmp    0x65010ccc
    65010cad:	mov    rcx,r8
    65010cb0:	mov    rax,QWORD PTR [r8]
    65010cb3:	cmp    BYTE PTR [rax+0x69],0x0
    65010cb7:	jne    0x65010ccc
    65010cb9:	data16 xchg ax,ax
    65010cbc:	data16 data16 xchg ax,ax
    65010cc0:	mov    rcx,rax
    65010cc3:	mov    rax,QWORD PTR [rax]
    65010cc6:	cmp    BYTE PTR [rax+0x69],0x0
    65010cca:	je     0x65010cc0
    65010ccc:	mov    QWORD PTR [r9],rcx
    65010ccf:	mov    r9,QWORD PTR [rdi+0x8]
    65010cd3:	cmp    QWORD PTR [r9+0x10],rbx
    65010cd7:	jne    0x65010d84
    65010cdd:	cmp    BYTE PTR [r8+0x69],0x0
    65010ce2:	je     0x65010ce9
    65010ce4:	mov    rcx,rdx
    65010ce7:	jmp    0x65010d0d
    65010ce9:	mov    rcx,r8
    65010cec:	mov    rax,QWORD PTR [r8+0x10]
    65010cf0:	cmp    BYTE PTR [rax+0x69],0x0
    65010cf4:	jne    0x65010d0d
    65010cf6:	data16 data16 xchg ax,ax
    65010cfa:	data16 xchg ax,ax
    65010cfd:	data16 xchg ax,ax
    65010d00:	mov    rcx,rax
    65010d03:	mov    rax,QWORD PTR [rax+0x10]
    65010d07:	cmp    BYTE PTR [rax+0x69],0x0
    65010d0b:	je     0x65010d00
    65010d0d:	mov    QWORD PTR [r9+0x10],rcx
    65010d11:	jmp    0x65010d84
    65010d13:	mov    QWORD PTR [rcx+0x8],r9
    65010d17:	mov    rax,QWORD PTR [rbx]
    65010d1a:	mov    QWORD PTR [r9],rax
    65010d1d:	cmp    r9,QWORD PTR [rbx+0x10]
    65010d21:	jne    0x65010d28
    65010d23:	mov    rdx,r9
    65010d26:	jmp    0x65010d4a
    65010d28:	mov    rdx,QWORD PTR [r9+0x8]
    65010d2c:	cmp    BYTE PTR [r8+0x69],0x0
    65010d31:	jne    0x65010d37
    65010d33:	mov    QWORD PTR [r8+0x8],rdx
    65010d37:	mov    QWORD PTR [rdx],r8
    65010d3a:	mov    rax,QWORD PTR [rbx+0x10]
    65010d3e:	mov    QWORD PTR [r9+0x10],rax
    65010d42:	mov    rax,QWORD PTR [rbx+0x10]
    65010d46:	mov    QWORD PTR [rax+0x8],r9
    65010d4a:	mov    rax,QWORD PTR [rdi+0x8]
    65010d4e:	cmp    QWORD PTR [rax+0x8],rbx
    65010d52:	jne    0x65010d5a
    65010d54:	mov    QWORD PTR [rax+0x8],r9
    65010d58:	jmp    0x65010d6c
    65010d5a:	mov    rax,QWORD PTR [rbx+0x8]
    65010d5e:	cmp    QWORD PTR [rax],rbx
    65010d61:	jne    0x65010d68
    65010d63:	mov    QWORD PTR [rax],r9
    65010d66:	jmp    0x65010d6c
    65010d68:	mov    QWORD PTR [rax+0x10],r9
    65010d6c:	mov    rax,QWORD PTR [rbx+0x8]
    65010d70:	mov    QWORD PTR [r9+0x8],rax
    65010d74:	movzx  ecx,BYTE PTR [r9+0x68]
    65010d79:	movzx  eax,BYTE PTR [rbx+0x68]
    65010d7d:	mov    BYTE PTR [r9+0x68],al
    65010d81:	mov    BYTE PTR [rbx+0x68],cl
    65010d84:	cmp    BYTE PTR [rbx+0x68],0x1
    65010d88:	jne    0x65011073
    65010d8e:	mov    rax,QWORD PTR [rdi+0x8]
    65010d92:	cmp    r8,QWORD PTR [rax+0x8]
    65010d96:	je     0x6501106e
    65010d9c:	data16 data16 xchg ax,ax
    65010da0:	cmp    BYTE PTR [r8+0x68],0x1
    65010da5:	jne    0x6501106e
    65010dab:	mov    rcx,QWORD PTR [rdx]
    65010dae:	cmp    r8,rcx
    65010db1:	jne    0x65010e4b
    65010db7:	mov    rcx,QWORD PTR [rdx+0x10]
    65010dbb:	cmp    BYTE PTR [rcx+0x68],0x0
    65010dbf:	jne    0x65010e16
    65010dc1:	mov    BYTE PTR [rcx+0x68],0x1
    65010dc5:	mov    BYTE PTR [rdx+0x68],0x0
    65010dc9:	mov    rcx,QWORD PTR [rdx+0x10]
    65010dcd:	mov    rax,QWORD PTR [rcx]
    65010dd0:	mov    QWORD PTR [rdx+0x10],rax
    65010dd4:	mov    rax,QWORD PTR [rcx]
    65010dd7:	cmp    BYTE PTR [rax+0x69],0x0
    65010ddb:	jne    0x65010de1
    65010ddd:	mov    QWORD PTR [rax+0x8],rdx
    65010de1:	mov    rax,QWORD PTR [rdx+0x8]
    65010de5:	mov    QWORD PTR [rcx+0x8],rax
    65010de9:	mov    rax,QWORD PTR [rdi+0x8]
    65010ded:	cmp    rdx,QWORD PTR [rax+0x8]
    65010df1:	jne    0x65010df9
    65010df3:	mov    QWORD PTR [rax+0x8],rcx
    65010df7:	jmp    0x65010e0b
    65010df9:	mov    rax,QWORD PTR [rdx+0x8]
    65010dfd:	cmp    rdx,QWORD PTR [rax]
    65010e00:	jne    0x65010e07
    65010e02:	mov    QWORD PTR [rax],rcx
    65010e05:	jmp    0x65010e0b
    65010e07:	mov    QWORD PTR [rax+0x10],rcx
    65010e0b:	mov    QWORD PTR [rcx],rdx
    65010e0e:	mov    QWORD PTR [rdx+0x8],rcx
    65010e12:	mov    rcx,QWORD PTR [rdx+0x10]
    65010e16:	cmp    BYTE PTR [rcx+0x69],0x0
    65010e1a:	je     0x65010e24
    65010e1c:	mov    r8,rdx
    65010e1f:	jmp    0x65010ed4
    65010e24:	mov    rax,QWORD PTR [rcx]
    65010e27:	cmp    BYTE PTR [rax+0x68],0x1
    65010e2b:	jne    0x65010eeb
    65010e31:	mov    rax,QWORD PTR [rcx+0x10]
    65010e35:	cmp    BYTE PTR [rax+0x68],0x1
    65010e39:	jne    0x65010eeb
    65010e3f:	mov    BYTE PTR [rcx+0x68],0x0
    65010e43:	mov    r8,rdx
    65010e46:	jmp    0x65010ed4
    65010e4b:	cmp    BYTE PTR [rcx+0x68],0x0
    65010e4f:	jne    0x65010ea7
    65010e51:	mov    BYTE PTR [rcx+0x68],0x1
    65010e55:	mov    BYTE PTR [rdx+0x68],0x0
    65010e59:	mov    rcx,QWORD PTR [rdx]
    65010e5c:	mov    rax,QWORD PTR [rcx+0x10]
    65010e60:	mov    QWORD PTR [rdx],rax
    65010e63:	mov    rax,QWORD PTR [rcx+0x10]
    65010e67:	cmp    BYTE PTR [rax+0x69],0x0
    65010e6b:	jne    0x65010e71
    65010e6d:	mov    QWORD PTR [rax+0x8],rdx
    65010e71:	mov    rax,QWORD PTR [rdx+0x8]
    65010e75:	mov    QWORD PTR [rcx+0x8],rax
    65010e79:	mov    rax,QWORD PTR [rdi+0x8]
    65010e7d:	cmp    rdx,QWORD PTR [rax+0x8]
    65010e81:	jne    0x65010e89
    65010e83:	mov    QWORD PTR [rax+0x8],rcx
    65010e87:	jmp    0x65010e9c
    65010e89:	mov    rax,QWORD PTR [rdx+0x8]
    65010e8d:	cmp    rdx,QWORD PTR [rax+0x10]
    65010e91:	jne    0x65010e99
    65010e93:	mov    QWORD PTR [rax+0x10],rcx
    65010e97:	jmp    0x65010e9c
    65010e99:	mov    QWORD PTR [rax],rcx
    65010e9c:	mov    QWORD PTR [rcx+0x10],rdx
    65010ea0:	mov    QWORD PTR [rdx+0x8],rcx
    65010ea4:	mov    rcx,QWORD PTR [rdx]
    65010ea7:	cmp    BYTE PTR [rcx+0x69],0x0
    65010eab:	je     0x65010eb2
    65010ead:	mov    r8,rdx
    65010eb0:	jmp    0x65010ed4
    65010eb2:	mov    rax,QWORD PTR [rcx+0x10]
    65010eb6:	cmp    BYTE PTR [rax+0x68],0x1
    65010eba:	jne    0x65010fb0
    65010ec0:	mov    rax,QWORD PTR [rcx]
    65010ec3:	cmp    BYTE PTR [rax+0x68],0x1
    65010ec7:	jne    0x65010fb0
    65010ecd:	mov    BYTE PTR [rcx+0x68],0x0
    65010ed1:	mov    r8,rdx
    65010ed4:	mov    rdx,QWORD PTR [rdx+0x8]
    65010ed8:	mov    rax,QWORD PTR [rdi+0x8]
    65010edc:	cmp    r8,QWORD PTR [rax+0x8]
    65010ee0:	je     0x6501106e
    65010ee6:	jmp    0x65010da0
    65010eeb:	mov    rax,QWORD PTR [rcx+0x10]
    65010eef:	cmp    BYTE PTR [rax+0x68],0x1
    65010ef3:	jne    0x65010f4f
    65010ef5:	mov    rax,QWORD PTR [rcx]
    65010ef8:	mov    BYTE PTR [rax+0x68],0x1
    65010efc:	mov    BYTE PTR [rcx+0x68],0x0
    65010f00:	mov    r9,QWORD PTR [rcx]
    65010f03:	mov    rax,QWORD PTR [r9+0x10]
    65010f07:	mov    QWORD PTR [rcx],rax
    65010f0a:	mov    rax,QWORD PTR [r9+0x10]
    65010f0e:	cmp    BYTE PTR [rax+0x69],0x0
    65010f12:	jne    0x65010f18
    65010f14:	mov    QWORD PTR [rax+0x8],rcx
    65010f18:	mov    rax,QWORD PTR [rcx+0x8]
    65010f1c:	mov    QWORD PTR [r9+0x8],rax
    65010f20:	mov    rax,QWORD PTR [rdi+0x8]
    65010f24:	cmp    rcx,QWORD PTR [rax+0x8]
    65010f28:	jne    0x65010f30
    65010f2a:	mov    QWORD PTR [rax+0x8],r9
    65010f2e:	jmp    0x65010f43
    65010f30:	mov    rax,QWORD PTR [rcx+0x8]
    65010f34:	cmp    rcx,QWORD PTR [rax+0x10]
    65010f38:	jne    0x65010f40
    65010f3a:	mov    QWORD PTR [rax+0x10],r9
    65010f3e:	jmp    0x65010f43
    65010f40:	mov    QWORD PTR [rax],r9
    65010f43:	mov    QWORD PTR [r9+0x10],rcx
    65010f47:	mov    QWORD PTR [rcx+0x8],r9
    65010f4b:	mov    rcx,QWORD PTR [rdx+0x10]
    65010f4f:	movzx  eax,BYTE PTR [rdx+0x68]
    65010f53:	mov    BYTE PTR [rcx+0x68],al
    65010f56:	mov    BYTE PTR [rdx+0x68],0x1
    65010f5a:	mov    rax,QWORD PTR [rcx+0x10]
    65010f5e:	mov    BYTE PTR [rax+0x68],0x1
    65010f62:	mov    rcx,QWORD PTR [rdx+0x10]
    65010f66:	mov    rax,QWORD PTR [rcx]
    65010f69:	mov    QWORD PTR [rdx+0x10],rax
    65010f6d:	mov    rax,QWORD PTR [rcx]
    65010f70:	cmp    BYTE PTR [rax+0x69],0x0
    65010f74:	jne    0x65010f7a
    65010f76:	mov    QWORD PTR [rax+0x8],rdx
    65010f7a:	mov    rax,QWORD PTR [rdx+0x8]
    65010f7e:	mov    QWORD PTR [rcx+0x8],rax
    65010f82:	mov    rax,QWORD PTR [rdi+0x8]
    65010f86:	cmp    rdx,QWORD PTR [rax+0x8]
    65010f8a:	jne    0x65010f92
    65010f8c:	mov    QWORD PTR [rax+0x8],rcx
    65010f90:	jmp    0x65010fa4
    65010f92:	mov    rax,QWORD PTR [rdx+0x8]
    65010f96:	cmp    rdx,QWORD PTR [rax]
    65010f99:	jne    0x65010fa0
    65010f9b:	mov    QWORD PTR [rax],rcx
    65010f9e:	jmp    0x65010fa4
    65010fa0:	mov    QWORD PTR [rax+0x10],rcx
    65010fa4:	mov    QWORD PTR [rcx],rdx
    65010fa7:	mov    QWORD PTR [rdx+0x8],rcx
    65010fab:	jmp    0x6501106e
    65010fb0:	mov    rax,QWORD PTR [rcx]
    65010fb3:	cmp    BYTE PTR [rax+0x68],0x1
    65010fb7:	jne    0x65011011
    65010fb9:	mov    rax,QWORD PTR [rcx+0x10]
    65010fbd:	mov    BYTE PTR [rax+0x68],0x1
    65010fc1:	mov    BYTE PTR [rcx+0x68],0x0
    65010fc5:	mov    r9,QWORD PTR [rcx+0x10]
    65010fc9:	mov    rax,QWORD PTR [r9]
    65010fcc:	mov    QWORD PTR [rcx+0x10],rax
    65010fd0:	mov    rax,QWORD PTR [r9]
    65010fd3:	cmp    BYTE PTR [rax+0x69],0x0
    65010fd7:	jne    0x65010fdd
    65010fd9:	mov    QWORD PTR [rax+0x8],rcx
    65010fdd:	mov    rax,QWORD PTR [rcx+0x8]
    65010fe1:	mov    QWORD PTR [r9+0x8],rax
    65010fe5:	mov    rax,QWORD PTR [rdi+0x8]
    65010fe9:	cmp    rcx,QWORD PTR [rax+0x8]
    65010fed:	jne    0x65010ff5
    65010fef:	mov    QWORD PTR [rax+0x8],r9
    65010ff3:	jmp    0x65011007
    65010ff5:	mov    rax,QWORD PTR [rcx+0x8]
    65010ff9:	cmp    rcx,QWORD PTR [rax]
    65010ffc:	jne    0x65011003
    65010ffe:	mov    QWORD PTR [rax],r9
    65011001:	jmp    0x65011007
    65011003:	mov    QWORD PTR [rax+0x10],r9
    65011007:	mov    QWORD PTR [r9],rcx
    6501100a:	mov    QWORD PTR [rcx+0x8],r9
    6501100e:	mov    rcx,QWORD PTR [rdx]
    65011011:	movzx  eax,BYTE PTR [rdx+0x68]
    65011015:	mov    BYTE PTR [rcx+0x68],al
    65011018:	mov    BYTE PTR [rdx+0x68],0x1
    6501101c:	mov    rax,QWORD PTR [rcx]
    6501101f:	mov    BYTE PTR [rax+0x68],0x1
    65011023:	mov    rcx,QWORD PTR [rdx]
    65011026:	mov    rax,QWORD PTR [rcx+0x10]
    6501102a:	mov    QWORD PTR [rdx],rax
    6501102d:	mov    rax,QWORD PTR [rcx+0x10]
    65011031:	cmp    BYTE PTR [rax+0x69],0x0
    65011035:	jne    0x6501103b
    65011037:	mov    QWORD PTR [rax+0x8],rdx
    6501103b:	mov    rax,QWORD PTR [rdx+0x8]
    6501103f:	mov    QWORD PTR [rcx+0x8],rax
    65011043:	mov    rax,QWORD PTR [rdi+0x8]
    65011047:	cmp    rdx,QWORD PTR [rax+0x8]
    6501104b:	jne    0x65011053
    6501104d:	mov    QWORD PTR [rax+0x8],rcx
    65011051:	jmp    0x65011066
    65011053:	mov    rax,QWORD PTR [rdx+0x8]
    65011057:	cmp    rdx,QWORD PTR [rax+0x10]
    6501105b:	jne    0x65011063
    6501105d:	mov    QWORD PTR [rax+0x10],rcx
    65011061:	jmp    0x65011066
    65011063:	mov    QWORD PTR [rax],rcx
    65011066:	mov    QWORD PTR [rcx+0x10],rdx
    6501106a:	mov    QWORD PTR [rdx+0x8],rcx
    6501106e:	mov    BYTE PTR [r8+0x68],0x1
    65011073:	cmp    QWORD PTR [rbx+0x60],0x8
    65011078:	jb     0x65011083
    6501107a:	mov    rcx,QWORD PTR [rbx+0x48]
    6501107e:	call   0x6501d300
    65011083:	mov    QWORD PTR [rbx+0x60],0x7
    6501108b:	mov    QWORD PTR [rbx+0x58],0x0
    65011093:	mov    WORD PTR [rbx+0x48],0x0
    65011099:	cmp    QWORD PTR [rbx+0x38],0x8
    6501109e:	jb     0x650110a9
    650110a0:	mov    rcx,QWORD PTR [rbx+0x20]
    650110a4:	call   0x6501d300
    650110a9:	mov    QWORD PTR [rbx+0x38],0x7
    650110b1:	mov    QWORD PTR [rbx+0x30],0x0
    650110b9:	mov    WORD PTR [rbx+0x20],0x0
    650110bf:	mov    rcx,rbx
    650110c2:	call   0x6501d300
    650110c7:	mov    rax,QWORD PTR [rdi+0x10]
    650110cb:	test   rax,rax
    650110ce:	je     0x650110d8
    650110d0:	add    rax,0xffffffffffffffff
    650110d4:	mov    QWORD PTR [rdi+0x10],rax
    650110d8:	mov    rax,QWORD PTR [rsi]
    650110db:	mov    QWORD PTR [r12],rax
    650110df:	mov    rax,QWORD PTR [rsi+0x8]
    650110e3:	mov    QWORD PTR [r12+0x8],rax
    650110e8:	mov    rax,r12
    650110eb:	lea    r11,[rsp+0x90]
    650110f3:	mov    rbx,QWORD PTR [r11+0x10]
    650110f7:	mov    rsi,QWORD PTR [r11+0x18]
    650110fb:	mov    rdi,QWORD PTR [r11+0x20]
    650110ff:	mov    rsp,r11
    65011102:	pop    r12
    65011104:	ret    
    65011105:	int3   
    65011106:	int3   
    65011107:	int3   
    65011108:	int3   
    65011109:	int3   
    6501110a:	int3   
    6501110b:	int3   
    6501110c:	int3   
    6501110d:	int3   
    6501110e:	int3   
    6501110f:	int3   
    65011110:	rex push rbp
    65011112:	sub    rsp,0x20
    65011116:	mov    rbp,rdx
    65011119:	lea    rcx,[rbp+0x28]
    6501111d:	call   0x65001c70
    65011122:	add    rsp,0x20
    65011126:	pop    rbp
    65011127:	ret    
    65011128:	int3   
    65011129:	int3   
    6501112a:	int3   
    6501112b:	int3   
    6501112c:	int3   
    6501112d:	int3   
    6501112e:	int3   
    6501112f:	int3   
    65011130:	rex push rbp
    65011132:	sub    rsp,0x20
    65011136:	mov    rbp,rdx
    65011139:	lea    rcx,[rbp+0x50]
    6501113d:	call   0x6501d490
    65011142:	add    rsp,0x20
    65011146:	pop    rbp
    65011147:	ret    
    65011148:	int3   
    65011149:	int3   
    6501114a:	int3   
    6501114b:	int3   
    6501114c:	int3   
    6501114d:	int3   
    6501114e:	int3   
    6501114f:	int3   
    65011150:	mov    QWORD PTR [rsp+0x8],rbx
    65011155:	mov    QWORD PTR [rsp+0x10],rbp
    6501115a:	mov    QWORD PTR [rsp+0x18],rsi
    6501115f:	push   rdi
    65011160:	sub    rsp,0x20
    65011164:	mov    rax,QWORD PTR [rcx+0x8]
    65011168:	xor    ebp,ebp
    6501116a:	mov    rdi,rcx
    6501116d:	mov    rbx,QWORD PTR [rax+0x8]
    65011171:	mov    rsi,rbx
    65011174:	cmp    BYTE PTR [rbx+0x69],bpl
    65011178:	jne    0x650111e0
    6501117a:	data16 xchg ax,ax
    6501117d:	data16 xchg ax,ax
    65011180:	mov    rdx,QWORD PTR [rsi+0x10]
    65011184:	mov    rcx,rdi
    65011187:	call   0x65011340
    6501118c:	cmp    QWORD PTR [rbx+0x60],0x8
    65011191:	mov    rsi,QWORD PTR [rsi]
    65011194:	jb     0x6501119f
    65011196:	mov    rcx,QWORD PTR [rbx+0x48]
    6501119a:	call   0x6501d300
    6501119f:	mov    QWORD PTR [rbx+0x60],0x7
    650111a7:	mov    QWORD PTR [rbx+0x58],rbp
    650111ab:	mov    WORD PTR [rbx+0x48],bp
    650111af:	cmp    QWORD PTR [rbx+0x38],0x8
    650111b4:	jb     0x650111bf
    650111b6:	mov    rcx,QWORD PTR [rbx+0x20]
    650111ba:	call   0x6501d300
    650111bf:	mov    QWORD PTR [rbx+0x38],0x7
    650111c7:	mov    QWORD PTR [rbx+0x30],rbp
    650111cb:	mov    rcx,rbx
    650111ce:	mov    WORD PTR [rbx+0x20],bp
    650111d2:	call   0x6501d300
    650111d7:	cmp    BYTE PTR [rsi+0x69],bpl
    650111db:	mov    rbx,rsi
    650111de:	je     0x65011180
    650111e0:	mov    rax,QWORD PTR [rdi+0x8]
    650111e4:	mov    rbx,QWORD PTR [rsp+0x30]
    650111e9:	mov    rsi,QWORD PTR [rsp+0x40]
    650111ee:	mov    QWORD PTR [rax+0x8],rax
    650111f2:	mov    rax,QWORD PTR [rdi+0x8]
    650111f6:	mov    QWORD PTR [rdi+0x10],rbp
    650111fa:	mov    rbp,QWORD PTR [rsp+0x38]
    650111ff:	mov    QWORD PTR [rax],rax
    65011202:	mov    rax,QWORD PTR [rdi+0x8]
    65011206:	mov    QWORD PTR [rax+0x10],rax
    6501120a:	add    rsp,0x20
    6501120e:	pop    rdi
    6501120f:	ret    
    65011210:	sub    rsp,0x38
    65011214:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501121d:	mov    ecx,0x70
    65011222:	call   0x6501dbc0
    65011227:	mov    QWORD PTR [rsp+0x48],rax
    6501122c:	test   rax,rax
    6501122f:	je     0x65011238
    65011231:	xor    ecx,ecx
    65011233:	mov    QWORD PTR [rax],rcx
    65011236:	jmp    0x6501123a
    65011238:	xor    ecx,ecx
    6501123a:	lea    rdx,[rax+0x8]
    6501123e:	test   rdx,rdx
    65011241:	je     0x65011246
    65011243:	mov    QWORD PTR [rdx],rcx
    65011246:	lea    rdx,[rax+0x10]
    6501124a:	test   rdx,rdx
    6501124d:	je     0x65011252
    6501124f:	mov    QWORD PTR [rdx],rcx
    65011252:	mov    BYTE PTR [rax+0x68],0x1
    65011256:	mov    BYTE PTR [rax+0x69],0x0
    6501125a:	add    rsp,0x38
    6501125e:	ret    
    6501125f:	int3   
    65011260:	mov    QWORD PTR [rsp+0x10],rdx
    65011265:	push   rbp
    65011266:	sub    rsp,0x20
    6501126a:	mov    rbp,rdx
    6501126d:	mov    rcx,QWORD PTR [rbp+0x48]
    65011271:	call   0x6501d300
    65011276:	xor    edx,edx
    65011278:	xor    ecx,ecx
    6501127a:	call   0x6501dc60
    6501127f:	nop
    65011280:	add    rsp,0x20
    65011284:	pop    rbp
    65011285:	ret    
    65011286:	int3   
    65011287:	int3   
    65011288:	int3   
    65011289:	int3   
    6501128a:	int3   
    6501128b:	int3   
    6501128c:	int3   
    6501128d:	int3   
    6501128e:	int3   
    6501128f:	int3   
    65011290:	mov    QWORD PTR [rsp+0x10],rbx
    65011295:	mov    QWORD PTR [rsp+0x18],rsi
    6501129a:	push   rdi
    6501129b:	sub    rsp,0x20
    6501129f:	cmp    BYTE PTR [rdx+0x69],0x0
    650112a3:	mov    rbx,rdx
    650112a6:	mov    rsi,rcx
    650112a9:	mov    rdi,rdx
    650112ac:	jne    0x65011325
    650112ae:	mov    QWORD PTR [rsp+0x30],rbp
    650112b3:	xor    ebp,ebp
    650112b5:	data16 data16 xchg ax,ax
    650112b9:	data16 xchg ax,ax
    650112bc:	data16 data16 xchg ax,ax
    650112c0:	mov    rdx,QWORD PTR [rdi+0x10]
    650112c4:	mov    rcx,rsi
    650112c7:	call   0x65011290
    650112cc:	cmp    QWORD PTR [rbx+0x60],0x10
    650112d1:	mov    rdi,QWORD PTR [rdi]
    650112d4:	jb     0x650112df
    650112d6:	mov    rcx,QWORD PTR [rbx+0x48]
    650112da:	call   0x6501d300
    650112df:	mov    QWORD PTR [rbx+0x60],0xf
    650112e7:	mov    QWORD PTR [rbx+0x58],rbp
    650112eb:	mov    BYTE PTR [rbx+0x48],bpl
    650112ef:	cmp    QWORD PTR [rbx+0x38],0x10
    650112f4:	jb     0x650112ff
    650112f6:	mov    rcx,QWORD PTR [rbx+0x20]
    650112fa:	call   0x6501d300
    650112ff:	mov    QWORD PTR [rbx+0x38],0xf
    65011307:	mov    QWORD PTR [rbx+0x30],rbp
    6501130b:	mov    rcx,rbx
    6501130e:	mov    BYTE PTR [rbx+0x20],bpl
    65011312:	call   0x6501d300
    65011317:	cmp    BYTE PTR [rdi+0x69],bpl
    6501131b:	mov    rbx,rdi
    6501131e:	je     0x650112c0
    65011320:	mov    rbp,QWORD PTR [rsp+0x30]
    65011325:	mov    rbx,QWORD PTR [rsp+0x38]
    6501132a:	mov    rsi,QWORD PTR [rsp+0x40]
    6501132f:	add    rsp,0x20
    65011333:	pop    rdi
    65011334:	ret    
    65011335:	int3   
    65011336:	int3   
    65011337:	int3   
    65011338:	int3   
    65011339:	int3   
    6501133a:	int3   
    6501133b:	int3   
    6501133c:	int3   
    6501133d:	int3   
    6501133e:	int3   
    6501133f:	int3   
    65011340:	mov    QWORD PTR [rsp+0x10],rbx
    65011345:	mov    QWORD PTR [rsp+0x18],rsi
    6501134a:	push   rdi
    6501134b:	sub    rsp,0x20
    6501134f:	cmp    BYTE PTR [rdx+0x69],0x0
    65011353:	mov    rbx,rdx
    65011356:	mov    rsi,rcx
    65011359:	mov    rdi,rdx
    6501135c:	jne    0x650113d5
    6501135e:	mov    QWORD PTR [rsp+0x30],rbp
    65011363:	xor    ebp,ebp
    65011365:	data16 data16 xchg ax,ax
    65011369:	data16 xchg ax,ax
    6501136c:	data16 data16 xchg ax,ax
    65011370:	mov    rdx,QWORD PTR [rdi+0x10]
    65011374:	mov    rcx,rsi
    65011377:	call   0x65011340
    6501137c:	cmp    QWORD PTR [rbx+0x60],0x8
    65011381:	mov    rdi,QWORD PTR [rdi]
    65011384:	jb     0x6501138f
    65011386:	mov    rcx,QWORD PTR [rbx+0x48]
    6501138a:	call   0x6501d300
    6501138f:	mov    QWORD PTR [rbx+0x60],0x7
    65011397:	mov    QWORD PTR [rbx+0x58],rbp
    6501139b:	mov    WORD PTR [rbx+0x48],bp
    6501139f:	cmp    QWORD PTR [rbx+0x38],0x8
    650113a4:	jb     0x650113af
    650113a6:	mov    rcx,QWORD PTR [rbx+0x20]
    650113aa:	call   0x6501d300
    650113af:	mov    QWORD PTR [rbx+0x38],0x7
    650113b7:	mov    QWORD PTR [rbx+0x30],rbp
    650113bb:	mov    rcx,rbx
    650113be:	mov    WORD PTR [rbx+0x20],bp
    650113c2:	call   0x6501d300
    650113c7:	cmp    BYTE PTR [rdi+0x69],bpl
    650113cb:	mov    rbx,rdi
    650113ce:	je     0x65011370
    650113d0:	mov    rbp,QWORD PTR [rsp+0x30]
    650113d5:	mov    rbx,QWORD PTR [rsp+0x38]
    650113da:	mov    rsi,QWORD PTR [rsp+0x40]
    650113df:	add    rsp,0x20
    650113e3:	pop    rdi
    650113e4:	ret    
    650113e5:	int3   
    650113e6:	int3   
    650113e7:	int3   
    650113e8:	int3   
    650113e9:	int3   
    650113ea:	int3   
    650113eb:	int3   
    650113ec:	int3   
    650113ed:	int3   
    650113ee:	int3   
    650113ef:	int3   
    650113f0:	rex push rdi
    650113f2:	sub    rsp,0x50
    650113f6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    650113ff:	mov    QWORD PTR [rsp+0x68],rbx
    65011404:	mov    QWORD PTR [rsp+0x70],rsi
    65011409:	mov    rbx,r8
    6501140c:	mov    rsi,rcx
    6501140f:	mov    DWORD PTR [rsp+0x60],0x0
    65011417:	mov    QWORD PTR [rsp+0x48],0xf
    65011420:	mov    QWORD PTR [rsp+0x40],0x0
    65011429:	mov    BYTE PTR [rsp+0x30],0x0
    6501142e:	or     r9,0xffffffffffffffff
    65011432:	xor    r8d,r8d
    65011435:	lea    rcx,[rsp+0x28]
    6501143a:	call   0x65001e20
    6501143f:	nop
    65011440:	xor    eax,eax
    65011442:	or     rcx,0xffffffffffffffff
    65011446:	mov    rdi,rbx
    65011449:	repnz scas al,BYTE PTR es:[rdi]
    6501144b:	not    rcx
    6501144e:	lea    r8,[rcx-0x1]
    65011452:	mov    rdx,rbx
    65011455:	lea    rcx,[rsp+0x28]
    6501145a:	call   0x65011770
    6501145f:	mov    QWORD PTR [rsi+0x20],0xf
    65011467:	mov    QWORD PTR [rsi+0x18],0x0
    6501146f:	mov    BYTE PTR [rsi+0x8],0x0
    65011473:	or     r9,0xffffffffffffffff
    65011477:	xor    r8d,r8d
    6501147a:	mov    rdx,rax
    6501147d:	mov    rcx,rsi
    65011480:	call   0x65001e20
    65011485:	nop
    65011486:	cmp    QWORD PTR [rsp+0x48],0x10
    6501148c:	jb     0x6501149d
    6501148e:	mov    rcx,QWORD PTR [rsp+0x30]
    65011493:	call   0x6501d300
    65011498:	mov    rax,rsi
    6501149b:	jmp    0x650114a0
    6501149d:	mov    rax,rsi
    650114a0:	mov    rbx,QWORD PTR [rsp+0x68]
    650114a5:	mov    rsi,QWORD PTR [rsp+0x70]
    650114aa:	add    rsp,0x50
    650114ae:	pop    rdi
    650114af:	ret    
    650114b0:	rex push rbp
    650114b2:	sub    rsp,0x20
    650114b6:	mov    rbp,rdx
    650114b9:	lea    rcx,[rbp+0x28]
    650114bd:	call   0x65001c70
    650114c2:	add    rsp,0x20
    650114c6:	pop    rbp
    650114c7:	ret    
    650114c8:	int3   
    650114c9:	int3   
    650114ca:	int3   
    650114cb:	int3   
    650114cc:	int3   
    650114cd:	int3   
    650114ce:	int3   
    650114cf:	int3   
    650114d0:	mov    r11,rsp
    650114d3:	push   rbp
    650114d4:	push   rsi
    650114d5:	push   rdi
    650114d6:	sub    rsp,0x50
    650114da:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    650114e3:	mov    QWORD PTR [r11+0x20],rbx
    650114e7:	mov    rax,QWORD PTR [rip+0x31c32]        # 0x65043120
    650114ee:	xor    rax,rsp
    650114f1:	mov    QWORD PTR [rsp+0x48],rax
    650114f6:	mov    rbx,r8
    650114f9:	mov    rdi,rdx
    650114fc:	mov    rsi,rcx
    650114ff:	mov    QWORD PTR [r11-0x40],rcx
    65011503:	mov    QWORD PTR [r11-0x30],rdx
    65011507:	mov    QWORD PTR [r11-0x28],rbx
    6501150b:	xor    ebp,ebp
    6501150d:	mov    DWORD PTR [rsp+0x20],ebp
    65011511:	mov    QWORD PTR [rcx+0x20],0xf
    65011519:	mov    QWORD PTR [rcx+0x18],rbp
    6501151d:	mov    BYTE PTR [rcx+0x8],bpl
    65011521:	or     r9,0xffffffffffffffff
    65011525:	xor    r8d,r8d
    65011528:	call   0x65001e20
    6501152d:	nop
    6501152e:	lea    rcx,[rsi+0x28]
    65011532:	mov    QWORD PTR [rcx+0x20],0xf
    6501153a:	mov    QWORD PTR [rcx+0x18],rbp
    6501153e:	mov    BYTE PTR [rcx+0x8],bpl
    65011542:	or     r9,0xffffffffffffffff
    65011546:	xor    r8d,r8d
    65011549:	mov    rdx,rbx
    6501154c:	call   0x65001e20
    65011551:	nop
    65011552:	cmp    QWORD PTR [rdi+0x20],0x10
    65011557:	jb     0x65011562
    65011559:	mov    rcx,QWORD PTR [rdi+0x8]
    6501155d:	call   0x6501d300
    65011562:	mov    QWORD PTR [rdi+0x20],0xf
    6501156a:	mov    QWORD PTR [rdi+0x18],rbp
    6501156e:	mov    BYTE PTR [rdi+0x8],0x0
    65011572:	cmp    QWORD PTR [rbx+0x20],0x10
    65011577:	jb     0x65011582
    65011579:	mov    rcx,QWORD PTR [rbx+0x8]
    6501157d:	call   0x6501d300
    65011582:	mov    QWORD PTR [rbx+0x20],0xf
    6501158a:	mov    QWORD PTR [rbx+0x18],rbp
    6501158e:	mov    BYTE PTR [rbx+0x8],0x0
    65011592:	mov    rax,rsi
    65011595:	mov    rcx,QWORD PTR [rsp+0x48]
    6501159a:	xor    rcx,rsp
    6501159d:	call   0x6501e650
    650115a2:	mov    rbx,QWORD PTR [rsp+0x88]
    650115aa:	add    rsp,0x50
    650115ae:	pop    rdi
    650115af:	pop    rsi
    650115b0:	pop    rbp
    650115b1:	ret    
    650115b2:	int3   
    650115b3:	int3   
    650115b4:	int3   
    650115b5:	int3   
    650115b6:	int3   
    650115b7:	int3   
    650115b8:	int3   
    650115b9:	int3   
    650115ba:	int3   
    650115bb:	int3   
    650115bc:	int3   
    650115bd:	int3   
    650115be:	int3   
    650115bf:	int3   
    650115c0:	rex push rbp
    650115c2:	sub    rsp,0x20
    650115c6:	mov    rbp,rdx
    650115c9:	mov    rcx,QWORD PTR [rbp+0x40]
    650115cd:	call   0x65001c70
    650115d2:	add    rsp,0x20
    650115d6:	pop    rbp
    650115d7:	ret    
    650115d8:	int3   
    650115d9:	int3   
    650115da:	int3   
    650115db:	int3   
    650115dc:	int3   
    650115dd:	int3   
    650115de:	int3   
    650115df:	int3   
    650115e0:	rex push rbp
    650115e2:	sub    rsp,0x20
    650115e6:	mov    rbp,rdx
    650115e9:	mov    rcx,QWORD PTR [rbp+0x38]
    650115ed:	call   0x65001c70
    650115f2:	add    rsp,0x20
    650115f6:	pop    rbp
    650115f7:	ret    
    650115f8:	int3   
    650115f9:	int3   
    650115fa:	int3   
    650115fb:	int3   
    650115fc:	int3   
    650115fd:	int3   
    650115fe:	int3   
    650115ff:	int3   
    65011600:	rex push rbp
    65011602:	sub    rsp,0x20
    65011606:	mov    rbp,rdx
    65011609:	mov    rcx,QWORD PTR [rbp+0x28]
    6501160d:	call   0x65001c70
    65011612:	add    rsp,0x20
    65011616:	pop    rbp
    65011617:	ret    
    65011618:	int3   
    65011619:	int3   
    6501161a:	int3   
    6501161b:	int3   
    6501161c:	int3   
    6501161d:	int3   
    6501161e:	int3   
    6501161f:	int3   
    65011620:	mov    r11,rsp
    65011623:	push   rbp
    65011624:	push   rsi
    65011625:	push   rdi
    65011626:	sub    rsp,0x50
    6501162a:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    65011633:	mov    QWORD PTR [r11+0x20],rbx
    65011637:	mov    rax,QWORD PTR [rip+0x31ae2]        # 0x65043120
    6501163e:	xor    rax,rsp
    65011641:	mov    QWORD PTR [rsp+0x48],rax
    65011646:	mov    rbx,r8
    65011649:	mov    rdi,rdx
    6501164c:	mov    rsi,rcx
    6501164f:	mov    QWORD PTR [r11-0x40],rcx
    65011653:	mov    QWORD PTR [r11-0x30],rdx
    65011657:	mov    QWORD PTR [r11-0x28],rbx
    6501165b:	xor    ebp,ebp
    6501165d:	mov    DWORD PTR [rsp+0x20],ebp
    65011661:	mov    QWORD PTR [rcx+0x20],0x7
    65011669:	mov    QWORD PTR [rcx+0x18],rbp
    6501166d:	mov    WORD PTR [rcx+0x8],bp
    65011671:	or     r9,0xffffffffffffffff
    65011675:	xor    r8d,r8d
    65011678:	call   0x6500f550
    6501167d:	nop
    6501167e:	lea    rcx,[rsi+0x28]
    65011682:	mov    QWORD PTR [rcx+0x20],0x7
    6501168a:	mov    QWORD PTR [rcx+0x18],rbp
    6501168e:	mov    WORD PTR [rcx+0x8],bp
    65011692:	or     r9,0xffffffffffffffff
    65011696:	xor    r8d,r8d
    65011699:	mov    rdx,rbx
    6501169c:	call   0x6500f550
    650116a1:	nop
    650116a2:	cmp    QWORD PTR [rdi+0x20],0x8
    650116a7:	jb     0x650116b2
    650116a9:	mov    rcx,QWORD PTR [rdi+0x8]
    650116ad:	call   0x6501d300
    650116b2:	mov    QWORD PTR [rdi+0x20],0x7
    650116ba:	mov    QWORD PTR [rdi+0x18],rbp
    650116be:	mov    WORD PTR [rdi+0x8],0x0
    650116c4:	cmp    QWORD PTR [rbx+0x20],0x8
    650116c9:	jb     0x650116d4
    650116cb:	mov    rcx,QWORD PTR [rbx+0x8]
    650116cf:	call   0x6501d300
    650116d4:	mov    QWORD PTR [rbx+0x20],0x7
    650116dc:	mov    QWORD PTR [rbx+0x18],rbp
    650116e0:	mov    WORD PTR [rbx+0x8],0x0
    650116e6:	mov    rax,rsi
    650116e9:	mov    rcx,QWORD PTR [rsp+0x48]
    650116ee:	xor    rcx,rsp
    650116f1:	call   0x6501e650
    650116f6:	mov    rbx,QWORD PTR [rsp+0x88]
    650116fe:	add    rsp,0x50
    65011702:	pop    rdi
    65011703:	pop    rsi
    65011704:	pop    rbp
    65011705:	ret    
    65011706:	int3   
    65011707:	int3   
    65011708:	int3   
    65011709:	int3   
    6501170a:	int3   
    6501170b:	int3   
    6501170c:	int3   
    6501170d:	int3   
    6501170e:	int3   
    6501170f:	int3   
    65011710:	rex push rbp
    65011712:	sub    rsp,0x20
    65011716:	mov    rbp,rdx
    65011719:	mov    rcx,QWORD PTR [rbp+0x40]
    6501171d:	call   0x6500e380
    65011722:	add    rsp,0x20
    65011726:	pop    rbp
    65011727:	ret    
    65011728:	int3   
    65011729:	int3   
    6501172a:	int3   
    6501172b:	int3   
    6501172c:	int3   
    6501172d:	int3   
    6501172e:	int3   
    6501172f:	int3   
    65011730:	rex push rbp
    65011732:	sub    rsp,0x20
    65011736:	mov    rbp,rdx
    65011739:	mov    rcx,QWORD PTR [rbp+0x38]
    6501173d:	call   0x6500e380
    65011742:	add    rsp,0x20
    65011746:	pop    rbp
    65011747:	ret    
    65011748:	int3   
    65011749:	int3   
    6501174a:	int3   
    6501174b:	int3   
    6501174c:	int3   
    6501174d:	int3   
    6501174e:	int3   
    6501174f:	int3   
    65011750:	rex push rbp
    65011752:	sub    rsp,0x20
    65011756:	mov    rbp,rdx
    65011759:	mov    rcx,QWORD PTR [rbp+0x28]
    6501175d:	call   0x6500e380
    65011762:	add    rsp,0x20
    65011766:	pop    rbp
    65011767:	ret    
    65011768:	int3   
    65011769:	int3   
    6501176a:	int3   
    6501176b:	int3   
    6501176c:	int3   
    6501176d:	int3   
    6501176e:	int3   
    6501176f:	int3   
    65011770:	mov    QWORD PTR [rsp+0x10],rbx
    65011775:	mov    QWORD PTR [rsp+0x18],rbp
    6501177a:	mov    QWORD PTR [rsp+0x20],rdi
    6501177f:	push   r12
    65011781:	sub    rsp,0x20
    65011785:	mov    r9,QWORD PTR [rcx+0x20]
    65011789:	mov    rbp,r8
    6501178c:	mov    r12,rdx
    6501178f:	cmp    r9,0x10
    65011793:	mov    rdi,rcx
    65011796:	jb     0x650117a2
    65011798:	mov    rax,QWORD PTR [rcx+0x8]
    6501179c:	lea    rbx,[rcx+0x8]
    650117a0:	jmp    0x650117a9
    650117a2:	lea    rbx,[rcx+0x8]
    650117a6:	mov    rax,rbx
    650117a9:	cmp    rdx,rax
    650117ac:	jb     0x650117e7
    650117ae:	cmp    r9,0x10
    650117b2:	jb     0x650117b9
    650117b4:	mov    rcx,QWORD PTR [rbx]
    650117b7:	jmp    0x650117bc
    650117b9:	mov    rcx,rbx
    650117bc:	add    rcx,QWORD PTR [rdi+0x18]
    650117c0:	cmp    rcx,rdx
    650117c3:	jbe    0x650117e7
    650117c5:	cmp    r9,0x10
    650117c9:	jb     0x650117ce
    650117cb:	mov    rbx,QWORD PTR [rbx]
    650117ce:	sub    r12,rbx
    650117d1:	mov    r9,r8
    650117d4:	mov    rdx,rdi
    650117d7:	mov    r8,r12
    650117da:	mov    rcx,rdi
    650117dd:	call   0x650021e0
    650117e2:	jmp    0x6501189a
    650117e7:	mov    rcx,QWORD PTR [rdi+0x18]
    650117eb:	or     rax,0xffffffffffffffff
    650117ef:	sub    rax,rcx
    650117f2:	cmp    rax,r8
    650117f5:	jbe    0x65011800
    650117f7:	lea    rax,[rcx+r8*1]
    650117fb:	cmp    rax,rcx
    650117fe:	jae    0x65011805
    65011800:	call   0x6501d150
    65011805:	test   rbp,rbp
    65011808:	je     0x65011897
    6501180e:	mov    QWORD PTR [rsp+0x30],rsi
    65011813:	mov    rsi,QWORD PTR [rdi+0x18]
    65011817:	add    rsi,rbp
    6501181a:	cmp    rsi,0xfffffffffffffffe
    6501181e:	jbe    0x65011825
    65011820:	call   0x6501d150
    65011825:	mov    rax,QWORD PTR [rdi+0x20]
    65011829:	cmp    rax,rsi
    6501182c:	jae    0x65011851
    6501182e:	mov    r8,QWORD PTR [rdi+0x18]
    65011832:	mov    rdx,rsi
    65011835:	mov    rcx,rdi
    65011838:	call   0x65002330
    6501183d:	test   rsi,rsi
    65011840:	je     0x65011892
    65011842:	mov    rdx,QWORD PTR [rdi+0x20]
    65011846:	cmp    rdx,0x10
    6501184a:	jb     0x65011868
    6501184c:	mov    rcx,QWORD PTR [rbx]
    6501184f:	jmp    0x6501186b
    65011851:	test   rsi,rsi
    65011854:	jne    0x6501183d
    65011856:	cmp    rax,0x10
    6501185a:	mov    QWORD PTR [rdi+0x18],rsi
    6501185e:	jb     0x65011863
    65011860:	mov    rbx,QWORD PTR [rbx]
    65011863:	mov    BYTE PTR [rbx],0x0
    65011866:	jmp    0x65011892
    65011868:	mov    rcx,rbx
    6501186b:	mov    rax,QWORD PTR [rdi+0x18]
    6501186f:	mov    r9,rbp
    65011872:	mov    r8,r12
    65011875:	sub    rdx,rax
    65011878:	add    rcx,rax
    6501187b:	call   0x6501d7b0
    65011880:	cmp    QWORD PTR [rdi+0x20],0x10
    65011885:	mov    QWORD PTR [rdi+0x18],rsi
    65011889:	jb     0x6501188e
    6501188b:	mov    rbx,QWORD PTR [rbx]
    6501188e:	mov    BYTE PTR [rbx+rsi*1],0x0
    65011892:	mov    rsi,QWORD PTR [rsp+0x30]
    65011897:	mov    rax,rdi
    6501189a:	mov    rbx,QWORD PTR [rsp+0x38]
    6501189f:	mov    rbp,QWORD PTR [rsp+0x40]
    650118a4:	mov    rdi,QWORD PTR [rsp+0x48]
    650118a9:	add    rsp,0x20
    650118ad:	pop    r12
    650118af:	ret    
    650118b0:	rex push rbx
    650118b2:	sub    rsp,0x20
    650118b6:	mov    rbx,rcx
    650118b9:	xor    eax,eax
    650118bb:	mov    ecx,0x1
    650118c0:	lock cmpxchg DWORD PTR [rip+0x36478],ecx        # 0x65047d40
    650118c8:	jne    0x65011962
    650118ce:	lea    edx,[rcx+0xd]
    650118d1:	lea    r8,[rip+0x27820]        # 0x650390f8
    650118d8:	lea    rcx,[rip+0x27859]        # 0x65039138
    650118df:	mov    QWORD PTR [rsp+0x30],rdi
    650118e4:	call   0x6500bcb0
    650118e9:	lea    r8,[rip+0x27858]        # 0x65039148
    650118f0:	lea    rcx,[rip+0x277e9]        # 0x650390e0
    650118f7:	mov    edx,0x8
    650118fc:	mov    rdi,rax
    650118ff:	call   0x6500c660
    65011904:	mov    rcx,rax
    65011907:	call   QWORD PTR [rip+0x227f3]        # 0x65034100
    6501190d:	add    DWORD PTR [rip+0x33034],0x1        # 0x65044948
    65011914:	test   rax,rax
    65011917:	je     0x65011946
    65011919:	mov    rdx,rdi
    6501191c:	mov    rcx,rax
    6501191f:	call   QWORD PTR [rip+0x227e3]        # 0x65034108
    65011925:	add    DWORD PTR [rip+0x33020],0x1        # 0x6504494c
    6501192c:	mov    rdi,QWORD PTR [rsp+0x30]
    65011931:	mov    QWORD PTR [rip+0x36518],rax        # 0x65047e50
    65011938:	call   rax
    6501193a:	mov    QWORD PTR [rbx],rax
    6501193d:	mov    rax,rbx
    65011940:	add    rsp,0x20
    65011944:	pop    rbx
    65011945:	ret    
    65011946:	mov    rdi,QWORD PTR [rsp+0x30]
    6501194b:	xor    eax,eax
    6501194d:	mov    QWORD PTR [rip+0x364fc],rax        # 0x65047e50
    65011954:	call   rax
    65011956:	mov    QWORD PTR [rbx],rax
    65011959:	mov    rax,rbx
    6501195c:	add    rsp,0x20
    65011960:	pop    rbx
    65011961:	ret    
    65011962:	mov    rax,QWORD PTR [rip+0x364e7]        # 0x65047e50
    65011969:	call   rax
    6501196b:	mov    QWORD PTR [rbx],rax
    6501196e:	mov    rax,rbx
    65011971:	add    rsp,0x20
    65011975:	pop    rbx
    65011976:	ret    
    65011977:	int3   
    65011978:	int3   
    65011979:	int3   
    6501197a:	int3   
    6501197b:	int3   
    6501197c:	int3   
    6501197d:	int3   
    6501197e:	int3   
    6501197f:	int3   
    65011980:	rex push rbx
    65011982:	sub    rsp,0x20
    65011986:	mov    rbx,rcx
    65011989:	xor    eax,eax
    6501198b:	mov    ecx,0x1
    65011990:	lock cmpxchg DWORD PTR [rip+0x363ac],ecx        # 0x65047d44
    65011998:	jne    0x65011a2c
    6501199e:	lea    edx,[rcx+0xe]
    650119a1:	lea    r8,[rip+0x277d8]        # 0x65039180
    650119a8:	lea    rcx,[rip+0x27811]        # 0x650391c0
    650119af:	mov    QWORD PTR [rsp+0x30],rdi
    650119b4:	call   0x6500bcb0
    650119b9:	lea    r8,[rip+0x27810]        # 0x650391d0
    650119c0:	lea    rcx,[rip+0x27719]        # 0x650390e0
    650119c7:	mov    edx,0x8
    650119cc:	mov    rdi,rax
    650119cf:	call   0x6500c660
    650119d4:	mov    rcx,rax
    650119d7:	call   QWORD PTR [rip+0x22723]        # 0x65034100
    650119dd:	add    DWORD PTR [rip+0x32f64],0x1        # 0x65044948
    650119e4:	test   rax,rax
    650119e7:	je     0x65011a13
    650119e9:	mov    rdx,rdi
    650119ec:	mov    rcx,rax
    650119ef:	call   QWORD PTR [rip+0x22713]        # 0x65034108
    650119f5:	mov    rcx,QWORD PTR [rbx]
    650119f8:	add    DWORD PTR [rip+0x32f4d],0x1        # 0x6504494c
    650119ff:	mov    rdi,QWORD PTR [rsp+0x30]
    65011a04:	mov    QWORD PTR [rip+0x3644d],rax        # 0x65047e58
    65011a0b:	add    rsp,0x20
    65011a0f:	pop    rbx
    65011a10:	rex.W jmp rax
    65011a13:	mov    rcx,QWORD PTR [rbx]
    65011a16:	mov    rdi,QWORD PTR [rsp+0x30]
    65011a1b:	xor    eax,eax
    65011a1d:	mov    QWORD PTR [rip+0x36434],rax        # 0x65047e58
    65011a24:	add    rsp,0x20
    65011a28:	pop    rbx
    65011a29:	rex.W jmp rax
    65011a2c:	mov    rax,QWORD PTR [rip+0x36425]        # 0x65047e58
    65011a33:	mov    rcx,QWORD PTR [rbx]
    65011a36:	add    rsp,0x20
    65011a3a:	pop    rbx
    65011a3b:	rex.W jmp rax
    65011a3e:	int3   
    65011a3f:	int3   
    65011a40:	rex push rbx
    65011a42:	push   rbp
    65011a43:	push   rsi
    65011a44:	push   rdi
    65011a45:	push   r12
    65011a47:	push   r13
    65011a49:	push   r14
    65011a4b:	push   r15
    65011a4d:	sub    rsp,0x128
    65011a54:	mov    QWORD PTR [rsp+0x80],0xfffffffffffffffe
    65011a60:	mov    rax,QWORD PTR [rip+0x316b9]        # 0x65043120
    65011a67:	xor    rax,rsp
    65011a6a:	mov    QWORD PTR [rsp+0x110],rax
    65011a72:	mov    r14,r9
    65011a75:	mov    QWORD PTR [rsp+0x78],r8
    65011a7a:	mov    DWORD PTR [rsp+0x64],edx
    65011a7e:	mov    QWORD PTR [rsp+0x70],rcx
    65011a83:	mov    rbx,QWORD PTR [rsp+0x190]
    65011a8b:	call   QWORD PTR [rip+0x225ff]        # 0x65034090
    65011a91:	mov    DWORD PTR [rsp+0x68],eax
    65011a95:	mov    ecx,0x1
    65011a9a:	xor    eax,eax
    65011a9c:	lock cmpxchg DWORD PTR [rip+0x3633c],ecx        # 0x65047de0
    65011aa4:	jne    0x65011b0c
    65011aa6:	lea    r8,[rip+0x2806b]        # 0x65039b18
    65011aad:	lea    edx,[rcx+0xb]
    65011ab0:	lea    rcx,[rip+0x280a1]        # 0x65039b58
    65011ab7:	call   0x6500bcb0
    65011abc:	mov    rdi,rax
    65011abf:	lea    r8,[rip+0x280a2]        # 0x65039b68
    65011ac6:	mov    edx,0x5
    65011acb:	lea    rcx,[rip+0x280be]        # 0x65039b90
    65011ad2:	call   0x6500c660
    65011ad7:	mov    rcx,rax
    65011ada:	call   QWORD PTR [rip+0x22620]        # 0x65034100
    65011ae0:	add    DWORD PTR [rip+0x32e61],0x1        # 0x65044948
    65011ae7:	test   rax,rax
    65011aea:	je     0x65011b01
    65011aec:	mov    rdx,rdi
    65011aef:	mov    rcx,rax
    65011af2:	call   QWORD PTR [rip+0x22610]        # 0x65034108
    65011af8:	add    DWORD PTR [rip+0x32e4d],0x1        # 0x6504494c
    65011aff:	jmp    0x65011b03
    65011b01:	xor    eax,eax
    65011b03:	mov    QWORD PTR [rip+0x363e6],rax        # 0x65047ef0
    65011b0a:	jmp    0x65011b13
    65011b0c:	mov    rax,QWORD PTR [rip+0x363dd]        # 0x65047ef0
    65011b13:	lea    rcx,[rsp+0x100]
    65011b1b:	call   rax
    65011b1d:	mov    QWORD PTR [rsp+0xf8],0xf
    65011b29:	xor    ecx,ecx
    65011b2b:	mov    QWORD PTR [rsp+0xf0],rcx
    65011b33:	mov    BYTE PTR [rsp+0xe0],cl
    65011b3a:	mov    r15b,0x1
    65011b3d:	mov    BYTE PTR [rsp+0x60],r15b
    65011b42:	movabs rax,0x1a7b9611a7b9611b
    65011b4c:	mul    r14
    65011b4f:	mov    r13,r14
    65011b52:	sub    r13,rdx
    65011b55:	shr    r13,1
    65011b58:	add    r13,rdx
    65011b5b:	shr    r13,0x8
    65011b5f:	xor    ebp,ebp
    65011b61:	lea    rax,[r13+0x1]
    65011b65:	mov    r12d,DWORD PTR [rsp+0x198]
    65011b6d:	test   rax,rax
    65011b70:	je     0x65011c9f
    65011b76:	xor    esi,esi
    65011b78:	lea    r15,[r13+0x1]
    65011b7c:	data16 data16 xchg ax,ax
    65011b80:	lea    eax,[rsi+0x1d0]
    65011b86:	movsxd rcx,eax
    65011b89:	cmp    rcx,r14
    65011b8c:	jb     0x65011ba4
    65011b8e:	mov    eax,r13d
    65011b91:	imul   eax,eax,0x1d0
    65011b97:	mov    edi,r14d
    65011b9a:	sub    edi,eax
    65011b9c:	je     0x65011c3c
    65011ba2:	jmp    0x65011ba9
    65011ba4:	mov    edi,0x1d0
    65011ba9:	cmp    r12d,0xffffffff
    65011bad:	jne    0x65011bb4
    65011baf:	or     edx,r12d
    65011bb2:	jmp    0x65011bcc
    65011bb4:	call   QWORD PTR [rip+0x224d6]        # 0x65034090
    65011bba:	sub    eax,DWORD PTR [rsp+0x68]
    65011bbe:	cmp    eax,r12d
    65011bc1:	ja     0x65011c80
    65011bc7:	mov    edx,r12d
    65011bca:	sub    edx,eax
    65011bcc:	movaps xmm0,XMMWORD PTR [rsp+0x100]
    65011bd4:	movdqa XMMWORD PTR [rsp+0xa0],xmm0
    65011bdd:	test   ebp,ebp
    65011bdf:	setne  cl
    65011be2:	movsxd rax,ebp
    65011be5:	cmp    rax,r13
    65011be8:	setb   al
    65011beb:	mov    r9d,edi
    65011bee:	movsxd r8,esi
    65011bf1:	add    r8,QWORD PTR [rsp+0x78]
    65011bf6:	mov    BYTE PTR [rsp+0x50],cl
    65011bfa:	mov    DWORD PTR [rsp+0x48],edx
    65011bfe:	lea    rcx,[rsp+0x60]
    65011c03:	mov    QWORD PTR [rsp+0x40],rcx
    65011c08:	lea    rcx,[rsp+0xd8]
    65011c10:	mov    QWORD PTR [rsp+0x38],rcx
    65011c15:	mov    BYTE PTR [rsp+0x30],al
    65011c19:	mov    DWORD PTR [rsp+0x28],ebp
    65011c1d:	lea    rax,[rsp+0xa0]
    65011c25:	mov    QWORD PTR [rsp+0x20],rax
    65011c2a:	mov    edx,DWORD PTR [rsp+0x64]
    65011c2e:	mov    rcx,QWORD PTR [rsp+0x70]
    65011c33:	call   0x650120a0
    65011c38:	test   al,al
    65011c3a:	je     0x65011c61
    65011c3c:	add    ebp,0x1
    65011c3f:	add    esi,0x1d0
    65011c45:	movsxd rax,ebp
    65011c48:	cmp    rax,r15
    65011c4b:	jne    0x65011b80
    65011c51:	mov    rcx,QWORD PTR [rsp+0xf0]
    65011c59:	movzx  r15d,BYTE PTR [rsp+0x60]
    65011c5f:	jmp    0x65011c9f
    65011c61:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011c6a:	jb     0x65011c79
    65011c6c:	mov    rcx,QWORD PTR [rsp+0xe0]
    65011c74:	call   0x6501d300
    65011c79:	xor    al,al
    65011c7b:	jmp    0x65012034
    65011c80:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011c89:	jb     0x65011c98
    65011c8b:	mov    rcx,QWORD PTR [rsp+0xe0]
    65011c93:	call   0x6501d300
    65011c98:	xor    al,al
    65011c9a:	jmp    0x65012034
    65011c9f:	or     rbp,0xffffffffffffffff
    65011ca3:	cmp    rcx,rbp
    65011ca6:	cmovb  rbp,rcx
    65011caa:	mov    rcx,QWORD PTR [rbx+0x18]
    65011cae:	or     rax,0xffffffffffffffff
    65011cb2:	sub    rax,rcx
    65011cb5:	cmp    rax,rbp
    65011cb8:	jbe    0x65011cc3
    65011cba:	lea    rax,[rcx+rbp*1]
    65011cbe:	cmp    rax,rcx
    65011cc1:	jae    0x65011cc8
    65011cc3:	call   0x6501d150
    65011cc8:	test   rbp,rbp
    65011ccb:	je     0x65011d85
    65011cd1:	mov    rdi,QWORD PTR [rbx+0x18]
    65011cd5:	add    rdi,rbp
    65011cd8:	cmp    rdi,0xfffffffffffffffe
    65011cdc:	jbe    0x65011ce3
    65011cde:	call   0x6501d150
    65011ce3:	mov    rax,QWORD PTR [rbx+0x20]
    65011ce7:	cmp    rax,rdi
    65011cea:	jae    0x65011cfd
    65011cec:	mov    r8,QWORD PTR [rbx+0x18]
    65011cf0:	mov    rdx,rdi
    65011cf3:	mov    rcx,rbx
    65011cf6:	call   0x65002330
    65011cfb:	jmp    0x65011d1e
    65011cfd:	test   rdi,rdi
    65011d00:	jne    0x65011d1e
    65011d02:	xor    r14d,r14d
    65011d05:	mov    QWORD PTR [rbx+0x18],r14
    65011d09:	cmp    rax,0x10
    65011d0d:	jb     0x65011d15
    65011d0f:	mov    rax,QWORD PTR [rbx+0x8]
    65011d13:	jmp    0x65011d19
    65011d15:	lea    rax,[rbx+0x8]
    65011d19:	mov    BYTE PTR [rax],r14b
    65011d1c:	jmp    0x65011d88
    65011d1e:	test   rdi,rdi
    65011d21:	je     0x65011d80
    65011d23:	lea    r8,[rsp+0xe0]
    65011d2b:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011d34:	cmovae r8,QWORD PTR [rsp+0xe0]
    65011d3d:	mov    rdx,QWORD PTR [rbx+0x20]
    65011d41:	cmp    rdx,0x10
    65011d45:	jb     0x65011d50
    65011d47:	lea    rsi,[rbx+0x8]
    65011d4b:	mov    rcx,QWORD PTR [rsi]
    65011d4e:	jmp    0x65011d57
    65011d50:	lea    rsi,[rbx+0x8]
    65011d54:	mov    rcx,rsi
    65011d57:	mov    rax,QWORD PTR [rbx+0x18]
    65011d5b:	sub    rdx,rax
    65011d5e:	add    rcx,rax
    65011d61:	mov    r9,rbp
    65011d64:	call   0x6501d7b0
    65011d69:	mov    QWORD PTR [rbx+0x18],rdi
    65011d6d:	cmp    QWORD PTR [rbx+0x20],0x10
    65011d72:	jb     0x65011d77
    65011d74:	mov    rsi,QWORD PTR [rsi]
    65011d77:	mov    BYTE PTR [rsi+rdi*1],0x0
    65011d7b:	xor    r14d,r14d
    65011d7e:	jmp    0x65011d88
    65011d80:	xor    r14d,r14d
    65011d83:	jmp    0x65011d88
    65011d85:	xor    r14d,r14d
    65011d88:	test   r15b,r15b
    65011d8b:	je     0x6501201a
    65011d91:	mov    r13d,0xfffffffe
    65011d97:	data16 xchg ax,ax
    65011d9a:	data16 xchg ax,ax
    65011d9d:	data16 xchg ax,ax
    65011da0:	mov    QWORD PTR [rsp+0xd0],0xf
    65011dac:	mov    QWORD PTR [rsp+0xc8],r14
    65011db4:	mov    BYTE PTR [rsp+0xb8],0x0
    65011dbc:	cmp    r12d,0xffffffff
    65011dc0:	jne    0x65011dc7
    65011dc2:	or     ecx,r12d
    65011dc5:	jmp    0x65011ddf
    65011dc7:	call   QWORD PTR [rip+0x222c3]        # 0x65034090
    65011dcd:	sub    eax,DWORD PTR [rsp+0x68]
    65011dd1:	cmp    eax,r12d
    65011dd4:	ja     0x65011fca
    65011dda:	mov    ecx,r12d
    65011ddd:	sub    ecx,eax
    65011ddf:	movaps xmm0,XMMWORD PTR [rsp+0x100]
    65011de7:	movdqa XMMWORD PTR [rsp+0x90],xmm0
    65011df0:	mov    BYTE PTR [rsp+0x50],0x1
    65011df5:	mov    DWORD PTR [rsp+0x48],ecx
    65011df9:	lea    rax,[rsp+0x60]
    65011dfe:	mov    QWORD PTR [rsp+0x40],rax
    65011e03:	lea    rax,[rsp+0xb0]
    65011e0b:	mov    QWORD PTR [rsp+0x38],rax
    65011e10:	mov    BYTE PTR [rsp+0x30],0x0
    65011e15:	mov    DWORD PTR [rsp+0x28],r13d
    65011e1a:	lea    rax,[rsp+0x90]
    65011e22:	mov    QWORD PTR [rsp+0x20],rax
    65011e27:	xor    r9d,r9d
    65011e2a:	xor    r8d,r8d
    65011e2d:	mov    edx,DWORD PTR [rsp+0x64]
    65011e31:	mov    rcx,QWORD PTR [rsp+0x70]
    65011e36:	call   0x650120a0
    65011e3b:	test   al,al
    65011e3d:	je     0x65011f7a
    65011e43:	mov    rax,QWORD PTR [rsp+0xc8]
    65011e4b:	test   rax,rax
    65011e4e:	je     0x65011f59
    65011e54:	or     rbp,0xffffffffffffffff
    65011e58:	cmp    rax,rbp
    65011e5b:	cmovb  rbp,rax
    65011e5f:	mov    rcx,QWORD PTR [rbx+0x18]
    65011e63:	or     rax,0xffffffffffffffff
    65011e67:	sub    rax,rcx
    65011e6a:	cmp    rax,rbp
    65011e6d:	jbe    0x65011e78
    65011e6f:	lea    rax,[rcx+rbp*1]
    65011e73:	cmp    rax,rcx
    65011e76:	jae    0x65011e7d
    65011e78:	call   0x6501d150
    65011e7d:	test   rbp,rbp
    65011e80:	je     0x65011f2d
    65011e86:	mov    rdi,QWORD PTR [rbx+0x18]
    65011e8a:	add    rdi,rbp
    65011e8d:	cmp    rdi,0xfffffffffffffffe
    65011e91:	jbe    0x65011e98
    65011e93:	call   0x6501d150
    65011e98:	mov    rax,QWORD PTR [rbx+0x20]
    65011e9c:	cmp    rax,rdi
    65011e9f:	jae    0x65011eb2
    65011ea1:	mov    r8,QWORD PTR [rbx+0x18]
    65011ea5:	mov    rdx,rdi
    65011ea8:	mov    rcx,rbx
    65011eab:	call   0x65002330
    65011eb0:	jmp    0x65011ed0
    65011eb2:	test   rdi,rdi
    65011eb5:	jne    0x65011ed0
    65011eb7:	mov    QWORD PTR [rbx+0x18],r14
    65011ebb:	cmp    rax,0x10
    65011ebf:	jb     0x65011ec7
    65011ec1:	mov    rax,QWORD PTR [rbx+0x8]
    65011ec5:	jmp    0x65011ecb
    65011ec7:	lea    rax,[rbx+0x8]
    65011ecb:	mov    BYTE PTR [rax],0x0
    65011ece:	jmp    0x65011f2d
    65011ed0:	test   rdi,rdi
    65011ed3:	je     0x65011f2d
    65011ed5:	lea    r8,[rsp+0xb8]
    65011edd:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011ee6:	cmovae r8,QWORD PTR [rsp+0xb8]
    65011eef:	mov    rdx,QWORD PTR [rbx+0x20]
    65011ef3:	cmp    rdx,0x10
    65011ef7:	jb     0x65011f02
    65011ef9:	lea    rsi,[rbx+0x8]
    65011efd:	mov    rcx,QWORD PTR [rsi]
    65011f00:	jmp    0x65011f09
    65011f02:	lea    rsi,[rbx+0x8]
    65011f06:	mov    rcx,rsi
    65011f09:	mov    rax,QWORD PTR [rbx+0x18]
    65011f0d:	sub    rdx,rax
    65011f10:	add    rcx,rax
    65011f13:	mov    r9,rbp
    65011f16:	call   0x6501d7b0
    65011f1b:	mov    QWORD PTR [rbx+0x18],rdi
    65011f1f:	cmp    QWORD PTR [rbx+0x20],0x10
    65011f24:	jb     0x65011f29
    65011f26:	mov    rsi,QWORD PTR [rsi]
    65011f29:	mov    BYTE PTR [rsi+rdi*1],0x0
    65011f2d:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011f36:	jb     0x65011f45
    65011f38:	mov    rcx,QWORD PTR [rsp+0xb8]
    65011f40:	call   0x6501d300
    65011f45:	sub    r13d,0x1
    65011f49:	cmp    BYTE PTR [rsp+0x60],0x0
    65011f4e:	je     0x6501201a
    65011f54:	jmp    0x65011da0
    65011f59:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011f62:	jb     0x6501201a
    65011f68:	mov    rcx,QWORD PTR [rsp+0xb8]
    65011f70:	call   0x6501d300
    65011f75:	jmp    0x6501201a
    65011f7a:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011f83:	jb     0x65011f92
    65011f85:	mov    rcx,QWORD PTR [rsp+0xb8]
    65011f8d:	call   0x6501d300
    65011f92:	mov    QWORD PTR [rsp+0xd0],0xf
    65011f9e:	mov    QWORD PTR [rsp+0xc8],r14
    65011fa6:	mov    BYTE PTR [rsp+0xb8],0x0
    65011fae:	cmp    QWORD PTR [rsp+0xf8],0x10
    65011fb7:	jb     0x65011fc6
    65011fb9:	mov    rcx,QWORD PTR [rsp+0xe0]
    65011fc1:	call   0x6501d300
    65011fc6:	xor    al,al
    65011fc8:	jmp    0x65012034
    65011fca:	cmp    QWORD PTR [rsp+0xd0],0x10
    65011fd3:	jb     0x65011fe2
    65011fd5:	mov    rcx,QWORD PTR [rsp+0xb8]
    65011fdd:	call   0x6501d300
    65011fe2:	mov    QWORD PTR [rsp+0xd0],0xf
    65011fee:	mov    QWORD PTR [rsp+0xc8],r14
    65011ff6:	mov    BYTE PTR [rsp+0xb8],0x0
    65011ffe:	cmp    QWORD PTR [rsp+0xf8],0x10
    65012007:	jb     0x65012016
    65012009:	mov    rcx,QWORD PTR [rsp+0xe0]
    65012011:	call   0x6501d300
    65012016:	xor    al,al
    65012018:	jmp    0x65012034
    6501201a:	cmp    QWORD PTR [rsp+0xf8],0x10
    65012023:	jb     0x65012032
    65012025:	mov    rcx,QWORD PTR [rsp+0xe0]
    6501202d:	call   0x6501d300
    65012032:	mov    al,0x1
    65012034:	mov    rcx,QWORD PTR [rsp+0x110]
    6501203c:	xor    rcx,rsp
    6501203f:	call   0x6501e650
    65012044:	add    rsp,0x128
    6501204b:	pop    r15
    6501204d:	pop    r14
    6501204f:	pop    r13
    65012051:	pop    r12
    65012053:	pop    rdi
    65012054:	pop    rsi
    65012055:	pop    rbp
    65012056:	pop    rbx
    65012057:	ret    
    65012058:	int3   
    65012059:	int3   
    6501205a:	int3   
    6501205b:	int3   
    6501205c:	int3   
    6501205d:	int3   
    6501205e:	int3   
    6501205f:	int3   
    65012060:	rex push rbp
    65012062:	sub    rsp,0x20
    65012066:	mov    rbp,rdx
    65012069:	lea    rcx,[rbp+0xd8]
    65012070:	call   0x65001c70
    65012075:	add    rsp,0x20
    65012079:	pop    rbp
    6501207a:	ret    
    6501207b:	int3   
    6501207c:	int3   
    6501207d:	int3   
    6501207e:	int3   
    6501207f:	int3   
    65012080:	rex push rbp
    65012082:	sub    rsp,0x20
    65012086:	mov    rbp,rdx
    65012089:	lea    rcx,[rbp+0xb0]
    65012090:	call   0x65001c70
    65012095:	add    rsp,0x20
    65012099:	pop    rbp
    6501209a:	ret    
    6501209b:	int3   
    6501209c:	int3   
    6501209d:	int3   
    6501209e:	int3   
    6501209f:	int3   
    650120a0:	rex push rbx
    650120a2:	push   rbp
    650120a3:	push   rsi
    650120a4:	push   rdi
    650120a5:	push   r12
    650120a7:	push   r13
    650120a9:	push   r14
    650120ab:	push   r15
    650120ad:	mov    eax,0x10138
    650120b2:	call   0x65033230
    650120b7:	sub    rsp,rax
    650120ba:	mov    QWORD PTR [rsp+0xb8],0xfffffffffffffffe
    650120c6:	mov    rax,QWORD PTR [rip+0x31053]        # 0x65043120
    650120cd:	xor    rax,rsp
    650120d0:	mov    QWORD PTR [rsp+0x10120],rax
    650120d8:	mov    rbp,r9
    650120db:	mov    r12,r8
    650120de:	mov    DWORD PTR [rsp+0x44],edx
    650120e2:	mov    QWORD PTR [rsp+0xb0],rcx
    650120ea:	mov    rcx,QWORD PTR [rsp+0x101a0]
    650120f2:	mov    QWORD PTR [rsp+0x78],rcx
    650120f7:	mov    rax,QWORD PTR [rsp+0x101b8]
    650120ff:	mov    QWORD PTR [rsp+0xa0],rax
    65012107:	mov    rax,QWORD PTR [rsp+0x101c0]
    6501210f:	mov    QWORD PTR [rsp+0x80],rax
    65012117:	mov    BYTE PTR [rsp+0x40],0x0
    6501211c:	xor    edi,edi
    6501211e:	mov    r13d,edi
    65012121:	mov    r14d,0xf
    65012127:	mov    r15d,DWORD PTR [rsp+0x101a8]
    6501212f:	nop
    65012130:	mov    QWORD PTR [rsp+0xf0],r14
    65012138:	mov    QWORD PTR [rsp+0xe8],rdi
    65012140:	mov    BYTE PTR [rsp+0xd8],0x0
    65012148:	lea    rdx,[rsp+0xf8]
    65012150:	mov    eax,DWORD PTR [rcx]
    65012152:	mov    DWORD PTR [rdx],eax
    65012154:	mov    eax,DWORD PTR [rcx+0x4]
    65012157:	mov    DWORD PTR [rdx+0x4],eax
    6501215a:	mov    eax,DWORD PTR [rcx+0x8]
    6501215d:	mov    DWORD PTR [rdx+0x8],eax
    65012160:	mov    eax,DWORD PTR [rcx+0xc]
    65012163:	mov    DWORD PTR [rdx+0xc],eax
    65012166:	mov    DWORD PTR [rsp+0x108],r15d
    6501216e:	mov    DWORD PTR [rsp+0x10c],r13d
    65012176:	movzx  eax,BYTE PTR [rsp+0x101b0]
    6501217e:	mov    BYTE PTR [rsp+0x110],al
    65012185:	mov    ecx,r15d
    65012188:	call   QWORD PTR [rip+0x221f2]        # 0x65034380
    6501218e:	mov    DWORD PTR [rsp+0x108],eax
    65012195:	mov    ecx,DWORD PTR [rsp+0x10c]
    6501219c:	call   QWORD PTR [rip+0x221de]        # 0x65034380
    650121a2:	mov    DWORD PTR [rsp+0x10c],eax
    650121a9:	lea    rax,[rsp+0xd8]
    650121b1:	mov    rcx,QWORD PTR [rsp+0xd8]
    650121b9:	mov    r10,QWORD PTR [rsp+0xf0]
    650121c1:	cmp    r10,0x10
    650121c5:	cmovae rax,rcx
    650121c9:	lea    rdx,[rsp+0xf8]
    650121d1:	mov    r9,QWORD PTR [rsp+0xe8]
    650121d9:	cmp    rdx,rax
    650121dc:	jb     0x65012388
    650121e2:	lea    rax,[rsp+0xd8]
    650121ea:	cmp    r10,0x10
    650121ee:	cmovae rax,rcx
    650121f2:	add    rax,r9
    650121f5:	lea    rdx,[rsp+0xf8]
    650121fd:	cmp    rax,rdx
    65012200:	jbe    0x65012388
    65012206:	lea    rax,[rsp+0xd8]
    6501220e:	cmp    r10,0x10
    65012212:	cmovae rax,rcx
    65012216:	lea    rsi,[rsp+0xf8]
    6501221e:	sub    rsi,rax
    65012221:	cmp    r9,rsi
    65012224:	jae    0x6501223b
    65012226:	call   0x6501d220
    6501222b:	mov    r10,QWORD PTR [rsp+0xf0]
    65012233:	mov    r9,QWORD PTR [rsp+0xe8]
    6501223b:	mov    rax,r9
    6501223e:	sub    rax,rsi
    65012241:	mov    edi,0x19
    65012246:	cmp    rax,rdi
    65012249:	cmovb  rdi,rax
    6501224d:	or     rax,0xffffffffffffffff
    65012251:	sub    rax,r9
    65012254:	cmp    rax,rdi
    65012257:	jbe    0x65012262
    65012259:	lea    rax,[r9+rdi*1]
    6501225d:	cmp    rax,r9
    65012260:	jae    0x65012277
    65012262:	call   0x6501d150
    65012267:	mov    r10,QWORD PTR [rsp+0xf0]
    6501226f:	mov    r9,QWORD PTR [rsp+0xe8]
    65012277:	test   rdi,rdi
    6501227a:	je     0x650124a5
    65012280:	lea    rbx,[r9+rdi*1]
    65012284:	cmp    rbx,0xfffffffffffffffe
    65012288:	jbe    0x6501229f
    6501228a:	call   0x6501d150
    6501228f:	mov    r10,QWORD PTR [rsp+0xf0]
    65012297:	mov    r9,QWORD PTR [rsp+0xe8]
    6501229f:	cmp    r10,rbx
    650122a2:	jae    0x650122c9
    650122a4:	mov    r8,r9
    650122a7:	mov    rdx,rbx
    650122aa:	lea    rcx,[rsp+0xd0]
    650122b2:	call   0x65002330
    650122b7:	mov    r10,QWORD PTR [rsp+0xf0]
    650122bf:	mov    r9,QWORD PTR [rsp+0xe8]
    650122c7:	jmp    0x65012305
    650122c9:	test   rbx,rbx
    650122cc:	jne    0x65012305
    650122ce:	xor    edi,edi
    650122d0:	mov    QWORD PTR [rsp+0xe8],rdi
    650122d8:	lea    rax,[rsp+0xd8]
    650122e0:	cmp    r10,0x10
    650122e4:	cmovae rax,QWORD PTR [rsp+0xd8]
    650122ed:	mov    BYTE PTR [rax],dil
    650122f0:	mov    r10,QWORD PTR [rsp+0xf0]
    650122f8:	mov    r9,QWORD PTR [rsp+0xe8]
    65012300:	jmp    0x650124a7
    65012305:	test   rbx,rbx
    65012308:	je     0x650124a1
    6501230e:	lea    r8,[rsp+0xd8]
    65012316:	mov    rcx,QWORD PTR [rsp+0xd8]
    6501231e:	cmp    r10,0x10
    65012322:	cmovae r8,rcx
    65012326:	lea    rax,[rsp+0xd8]
    6501232e:	cmp    r10,0x10
    65012332:	cmovae rax,rcx
    65012336:	sub    r10,r9
    65012339:	lea    rcx,[r9+rax*1]
    6501233d:	add    r8,rsi
    65012340:	mov    r9,rdi
    65012343:	mov    rdx,r10
    65012346:	call   0x6501d7b0
    6501234b:	mov    QWORD PTR [rsp+0xe8],rbx
    65012353:	lea    rax,[rsp+0xd8]
    6501235b:	cmp    QWORD PTR [rsp+0xf0],0x10
    65012364:	cmovae rax,QWORD PTR [rsp+0xd8]
    6501236d:	mov    BYTE PTR [rax+rbx*1],0x0
    65012371:	mov    r10,QWORD PTR [rsp+0xf0]
    65012379:	mov    r9,QWORD PTR [rsp+0xe8]
    65012381:	xor    edi,edi
    65012383:	jmp    0x650124a7
    65012388:	or     rax,0xffffffffffffffff
    6501238c:	sub    rax,r9
    6501238f:	cmp    rax,0x19
    65012393:	jbe    0x6501239e
    65012395:	lea    rax,[r9+0x19]
    65012399:	cmp    rax,r9
    6501239c:	jae    0x650123b3
    6501239e:	call   0x6501d150
    650123a3:	mov    r10,QWORD PTR [rsp+0xf0]
    650123ab:	mov    r9,QWORD PTR [rsp+0xe8]
    650123b3:	lea    rbx,[r9+0x19]
    650123b7:	cmp    rbx,0xfffffffffffffffe
    650123bb:	jbe    0x650123d2
    650123bd:	call   0x6501d150
    650123c2:	mov    r10,QWORD PTR [rsp+0xf0]
    650123ca:	mov    r9,QWORD PTR [rsp+0xe8]
    650123d2:	cmp    r10,rbx
    650123d5:	jae    0x650123fc
    650123d7:	mov    r8,r9
    650123da:	mov    rdx,rbx
    650123dd:	lea    rcx,[rsp+0xd0]
    650123e5:	call   0x65002330
    650123ea:	mov    r10,QWORD PTR [rsp+0xf0]
    650123f2:	mov    r9,QWORD PTR [rsp+0xe8]
    650123fa:	jmp    0x65012432
    650123fc:	test   rbx,rbx
    650123ff:	jne    0x65012432
    65012401:	mov    QWORD PTR [rsp+0xe8],rdi
    65012409:	lea    rax,[rsp+0xd8]
    65012411:	cmp    r10,0x10
    65012415:	cmovae rax,QWORD PTR [rsp+0xd8]
    6501241e:	mov    BYTE PTR [rax],bl
    65012420:	mov    r10,QWORD PTR [rsp+0xf0]
    65012428:	mov    r9,QWORD PTR [rsp+0xe8]
    65012430:	jmp    0x650124a7
    65012432:	test   rbx,rbx
    65012435:	je     0x650124a7
    65012437:	lea    rax,[rsp+0xd8]
    6501243f:	cmp    r10,0x10
    65012443:	cmovae rax,QWORD PTR [rsp+0xd8]
    6501244c:	sub    r10,r9
    6501244f:	lea    rcx,[r9+rax*1]
    65012453:	mov    r9d,0x19
    65012459:	lea    r8,[rsp+0xf8]
    65012461:	mov    rdx,r10
    65012464:	call   0x6501d7b0
    65012469:	mov    QWORD PTR [rsp+0xe8],rbx
    65012471:	lea    rax,[rsp+0xd8]
    65012479:	cmp    QWORD PTR [rsp+0xf0],0x10
    65012482:	cmovae rax,QWORD PTR [rsp+0xd8]
    6501248b:	mov    BYTE PTR [rax+rbx*1],0x0
    6501248f:	mov    r10,QWORD PTR [rsp+0xf0]
    65012497:	mov    r9,QWORD PTR [rsp+0xe8]
    6501249f:	jmp    0x650124a7
    650124a1:	xor    edi,edi
    650124a3:	jmp    0x650124a7
    650124a5:	xor    edi,edi
    650124a7:	test   r12,r12
    650124aa:	je     0x65012779
    650124b0:	lea    rax,[rsp+0xd8]
    650124b8:	mov    rcx,QWORD PTR [rsp+0xd8]
    650124c0:	cmp    r10,0x10
    650124c4:	cmovae rax,rcx
    650124c8:	cmp    r12,rax
    650124cb:	jb     0x65012663
    650124d1:	lea    rax,[rsp+0xd8]
    650124d9:	cmp    r10,0x10
    650124dd:	cmovae rax,rcx
    650124e1:	add    rax,r9
    650124e4:	cmp    rax,r12
    650124e7:	jbe    0x65012663
    650124ed:	lea    rax,[rsp+0xd8]
    650124f5:	cmp    r10,0x10
    650124f9:	cmovae rax,rcx
    650124fd:	mov    rsi,r12
    65012500:	sub    rsi,rax
    65012503:	cmp    r9,rsi
    65012506:	jae    0x6501251d
    65012508:	call   0x6501d220
    6501250d:	mov    r10,QWORD PTR [rsp+0xf0]
    65012515:	mov    r9,QWORD PTR [rsp+0xe8]
    6501251d:	mov    rax,r9
    65012520:	sub    rax,rsi
    65012523:	mov    rdi,rbp
    65012526:	cmp    rax,rbp
    65012529:	cmovb  rdi,rax
    6501252d:	or     rax,0xffffffffffffffff
    65012531:	sub    rax,r9
    65012534:	cmp    rax,rdi
    65012537:	jbe    0x65012542
    65012539:	lea    rax,[r9+rdi*1]
    6501253d:	cmp    rax,r9
    65012540:	jae    0x65012557
    65012542:	call   0x6501d150
    65012547:	mov    r10,QWORD PTR [rsp+0xf0]
    6501254f:	mov    r9,QWORD PTR [rsp+0xe8]
    65012557:	test   rdi,rdi
    6501255a:	je     0x65012779
    65012560:	lea    rbx,[r9+rdi*1]
    65012564:	cmp    rbx,0xfffffffffffffffe
    65012568:	jbe    0x6501257f
    6501256a:	call   0x6501d150
    6501256f:	mov    r10,QWORD PTR [rsp+0xf0]
    65012577:	mov    r9,QWORD PTR [rsp+0xe8]
    6501257f:	cmp    r10,rbx
    65012582:	jae    0x650125a9
    65012584:	mov    r8,r9
    65012587:	mov    rdx,rbx
    6501258a:	lea    rcx,[rsp+0xd0]
    65012592:	call   0x65002330
    65012597:	mov    r10,QWORD PTR [rsp+0xf0]
    6501259f:	mov    r9,QWORD PTR [rsp+0xe8]
    650125a7:	jmp    0x650125e2
    650125a9:	test   rbx,rbx
    650125ac:	jne    0x650125e2
    650125ae:	mov    QWORD PTR [rsp+0xe8],rbx
    650125b6:	lea    rax,[rsp+0xd8]
    650125be:	cmp    r10,0x10
    650125c2:	cmovae rax,QWORD PTR [rsp+0xd8]
    650125cb:	mov    BYTE PTR [rax],bl
    650125cd:	mov    r10,QWORD PTR [rsp+0xf0]
    650125d5:	mov    r9,QWORD PTR [rsp+0xe8]
    650125dd:	jmp    0x65012779
    650125e2:	test   rbx,rbx
    650125e5:	je     0x65012779
    650125eb:	lea    r8,[rsp+0xd8]
    650125f3:	mov    rcx,QWORD PTR [rsp+0xd8]
    650125fb:	cmp    r10,0x10
    650125ff:	cmovae r8,rcx
    65012603:	lea    rax,[rsp+0xd8]
    6501260b:	cmp    r10,0x10
    6501260f:	cmovae rax,rcx
    65012613:	sub    r10,r9
    65012616:	lea    rcx,[rax+r9*1]
    6501261a:	add    r8,rsi
    6501261d:	mov    r9,rdi
    65012620:	mov    rdx,r10
    65012623:	call   0x6501d7b0
    65012628:	mov    QWORD PTR [rsp+0xe8],rbx
    65012630:	lea    rax,[rsp+0xd8]
    65012638:	cmp    QWORD PTR [rsp+0xf0],0x10
    65012641:	cmovae rax,QWORD PTR [rsp+0xd8]
    6501264a:	mov    BYTE PTR [rax+rbx*1],0x0
    6501264e:	mov    r10,QWORD PTR [rsp+0xf0]
    65012656:	mov    r9,QWORD PTR [rsp+0xe8]
    6501265e:	jmp    0x65012779
    65012663:	or     rax,0xffffffffffffffff
    65012667:	sub    rax,r9
    6501266a:	cmp    rax,rbp
    6501266d:	jbe    0x65012678
    6501266f:	lea    rax,[r9+rbp*1]
    65012673:	cmp    rax,r9
    65012676:	jae    0x6501268d
    65012678:	call   0x6501d150
    6501267d:	mov    r10,QWORD PTR [rsp+0xf0]
    65012685:	mov    r9,QWORD PTR [rsp+0xe8]
    6501268d:	test   rbp,rbp
    65012690:	je     0x65012779
    65012696:	lea    rbx,[r9+rbp*1]
    6501269a:	cmp    rbx,0xfffffffffffffffe
    6501269e:	jbe    0x650126b5
    650126a0:	call   0x6501d150
    650126a5:	mov    r10,QWORD PTR [rsp+0xf0]
    650126ad:	mov    r9,QWORD PTR [rsp+0xe8]
    650126b5:	cmp    r10,rbx
    650126b8:	jae    0x650126df
    650126ba:	mov    r8,r9
    650126bd:	mov    rdx,rbx
    650126c0:	lea    rcx,[rsp+0xd0]
    650126c8:	call   0x65002330
    650126cd:	mov    r10,QWORD PTR [rsp+0xf0]
    650126d5:	mov    r9,QWORD PTR [rsp+0xe8]
    650126dd:	jmp    0x65012715
    650126df:	test   rbx,rbx
    650126e2:	jne    0x65012715
    650126e4:	mov    QWORD PTR [rsp+0xe8],rdi
    650126ec:	lea    rax,[rsp+0xd8]
    650126f4:	cmp    r10,0x10
    650126f8:	cmovae rax,QWORD PTR [rsp+0xd8]
    65012701:	mov    BYTE PTR [rax],bl
    65012703:	mov    r10,QWORD PTR [rsp+0xf0]
    6501270b:	mov    r9,QWORD PTR [rsp+0xe8]
    65012713:	jmp    0x65012779
    65012715:	test   rbx,rbx
    65012718:	je     0x65012779
    6501271a:	lea    rcx,[rsp+0xd8]
    65012722:	cmp    r10,0x10
    65012726:	cmovae rcx,QWORD PTR [rsp+0xd8]
    6501272f:	sub    r10,r9
    65012732:	add    rcx,r9
    65012735:	mov    r9,rbp
    65012738:	mov    r8,r12
    6501273b:	mov    rdx,r10
    6501273e:	call   0x6501d7b0
    65012743:	mov    QWORD PTR [rsp+0xe8],rbx
    6501274b:	lea    rax,[rsp+0xd8]
    65012753:	cmp    QWORD PTR [rsp+0xf0],0x10
    6501275c:	cmovae rax,QWORD PTR [rsp+0xd8]
    65012765:	mov    BYTE PTR [rax+rbx*1],0x0
    65012769:	mov    r10,QWORD PTR [rsp+0xf0]
    65012771:	mov    r9,QWORD PTR [rsp+0xe8]
    65012779:	lea    r8,[rsp+0xd8]
    65012781:	cmp    r10,0x10
    65012785:	cmovae r8,QWORD PTR [rsp+0xd8]
    6501278e:	lea    rax,[rsp+0xa8]
    65012796:	mov    QWORD PTR [rsp+0x20],rax
    6501279b:	mov    edx,0x52514f4b
    650127a0:	lea    rcx,[rsp+0x88]
    650127a8:	call   0x65016d50
    650127ad:	mov    rdi,QWORD PTR [rax]
    650127b0:	mov    QWORD PTR [rax],0x0
    650127b7:	mov    QWORD PTR [rsp+0xc0],rdi
    650127bf:	mov    rcx,QWORD PTR [rsp+0x88]
    650127c7:	call   0x6501d300
    650127cc:	mov    DWORD PTR [rsp+0x48],0x0
    650127d4:	xor    eax,eax
    650127d6:	mov    ebx,0x1
    650127db:	lock cmpxchg DWORD PTR [rip+0x355ad],ebx        # 0x65047d90
    650127e3:	jne    0x65012850
    650127e5:	lea    r8,[rip+0x26ff4]        # 0x650397e0
    650127ec:	lea    edx,[rbx+0x18]
    650127ef:	lea    rcx,[rip+0x27022]        # 0x65039818
    650127f6:	call   0x6500bcb0
    650127fb:	mov    rbx,rax
    650127fe:	lea    r8,[rip+0x27033]        # 0x65039838
    65012805:	mov    edx,0x7
    6501280a:	lea    rcx,[rip+0x27057]        # 0x65039868
    65012811:	call   0x6500c660
    65012816:	mov    rcx,rax
    65012819:	call   QWORD PTR [rip+0x218e1]        # 0x65034100
    6501281f:	add    DWORD PTR [rip+0x32122],0x1        # 0x65044948
    65012826:	test   rax,rax
    65012829:	je     0x65012840
    6501282b:	mov    rdx,rbx
    6501282e:	mov    rcx,rax
    65012831:	call   QWORD PTR [rip+0x218d1]        # 0x65034108
    65012837:	add    DWORD PTR [rip+0x3210e],0x1        # 0x6504494c
    6501283e:	jmp    0x65012842
    65012840:	xor    eax,eax
    65012842:	mov    QWORD PTR [rip+0x35677],rax        # 0x65047ec0
    65012849:	mov    ebx,0x1
    6501284e:	jmp    0x65012857
    65012850:	mov    rax,QWORD PTR [rip+0x35669]        # 0x65047ec0
    65012857:	xor    edx,edx
    65012859:	lea    rcx,[rsp+0x48]
    6501285e:	call   rax
    65012860:	test   eax,eax
    65012862:	je     0x650129a1
    65012868:	xor    eax,eax
    6501286a:	lock cmpxchg DWORD PTR [rip+0x354ca],ebx        # 0x65047d3c
    65012872:	jne    0x650128e0
    65012874:	lea    r8,[rip+0x267ed]        # 0x65039068
    6501287b:	mov    edx,0xc
    65012880:	lea    rcx,[rip+0x26819]        # 0x650390a0
    65012887:	call   0x6500bcb0
    6501288c:	mov    rbx,rax
    6501288f:	lea    r8,[rip+0x2681a]        # 0x650390b0
    65012896:	mov    edx,0x8
    6501289b:	lea    rcx,[rip+0x2683e]        # 0x650390e0
    650128a2:	call   0x6500c660
    650128a7:	mov    rcx,rax
    650128aa:	call   QWORD PTR [rip+0x21850]        # 0x65034100
    650128b0:	add    DWORD PTR [rip+0x32091],0x1        # 0x65044948
    650128b7:	test   rax,rax
    650128ba:	je     0x650128d4
    650128bc:	mov    rdx,rbx
    650128bf:	mov    rcx,rax
    650128c2:	call   QWORD PTR [rip+0x21840]        # 0x65034108
    650128c8:	mov    r11,rax
    650128cb:	add    DWORD PTR [rip+0x3207a],0x1        # 0x6504494c
    650128d2:	jmp    0x650128d7
    650128d4:	xor    r11d,r11d
    650128d7:	mov    QWORD PTR [rip+0x3556a],r11        # 0x65047e48
    650128de:	jmp    0x650128e7
    650128e0:	mov    r11,QWORD PTR [rip+0x35561]        # 0x65047e48
    650128e7:	mov    eax,0x1388
    650128ec:	mov    esi,DWORD PTR [rsp+0x101c8]
    650128f3:	cmp    esi,eax
    650128f5:	cmovb  eax,esi
    650128f8:	mov    DWORD PTR [rsp+0x38],eax
    650128fc:	mov    DWORD PTR [rsp+0x30],0xffff
    65012904:	lea    rax,[rsp+0x120]
    6501290c:	mov    QWORD PTR [rsp+0x28],rax
    65012911:	mov    QWORD PTR [rsp+0x20],0x0
    6501291a:	movzx  r9d,WORD PTR [rsp+0xa8]
    65012923:	mov    r8,rdi
    65012926:	mov    edx,DWORD PTR [rsp+0x44]
    6501292a:	mov    rax,QWORD PTR [rsp+0xb0]
    65012932:	mov    rcx,QWORD PTR [rax]
    65012935:	call   r11
    65012938:	mov    ebx,eax
    6501293a:	test   eax,eax
    6501293c:	jne    0x650129a4
    6501293e:	cmp    BYTE PTR [rsp+0x101d0],al
    65012945:	je     0x6501297e
    65012947:	mov    rcx,rdi
    6501294a:	call   0x6501d300
    6501294f:	nop
    65012950:	cmp    QWORD PTR [rsp+0xf0],0x10
    65012959:	jb     0x65012968
    6501295b:	mov    rcx,QWORD PTR [rsp+0xd8]
    65012963:	call   0x6501d300
    65012968:	add    r13d,0x1
    6501296c:	cmp    r13d,0x5
    65012970:	je     0x650129c5
    65012972:	mov    rcx,QWORD PTR [rsp+0x78]
    65012977:	xor    edi,edi
    65012979:	jmp    0x65012130
    6501297e:	mov    rcx,rdi
    65012981:	call   0x6501d300
    65012986:	nop
    65012987:	cmp    QWORD PTR [rsp+0xf0],0x10
    65012990:	jb     0x650129c5
    65012992:	mov    rcx,QWORD PTR [rsp+0xd8]
    6501299a:	call   0x6501d300
    6501299f:	jmp    0x650129c5
    650129a1:	or     ebx,0xffffffff
    650129a4:	mov    rcx,rdi
    650129a7:	call   0x6501d300
    650129ac:	nop
    650129ad:	cmp    QWORD PTR [rsp+0xf0],0x10
    650129b6:	jb     0x650129c5
    650129b8:	mov    rcx,QWORD PTR [rsp+0xd8]
    650129c0:	call   0x6501d300
    650129c5:	test   ebx,ebx
    650129c7:	je     0x65012b8b
    650129cd:	movzx  eax,WORD PTR [rsp+0x12c]
    650129d5:	test   ax,ax
    650129d8:	je     0x65012b74
    650129de:	movzx  r9d,ax
    650129e2:	lea    rax,[rsp+0x90]
    650129ea:	mov    QWORD PTR [rsp+0x20],rax
    650129ef:	lea    r8,[rsp+0x148]
    650129f7:	mov    edx,0x52534f4b
    650129fc:	lea    rcx,[rsp+0x98]
    65012a04:	call   0x65016f60
    65012a09:	mov    rdi,QWORD PTR [rax]
    65012a0c:	xor    ebp,ebp
    65012a0e:	mov    QWORD PTR [rax],rbp
    65012a11:	mov    QWORD PTR [rsp+0xc8],rdi
    65012a19:	mov    rcx,QWORD PTR [rsp+0x98]
    65012a21:	call   0x6501d300
    65012a26:	test   rdi,rdi
    65012a29:	je     0x65012b65
    65012a2f:	mov    ecx,DWORD PTR [rdi+0x10]
    65012a32:	call   QWORD PTR [rip+0x21950]        # 0x65034388
    65012a38:	mov    r11d,eax
    65012a3b:	mov    DWORD PTR [rdi+0x10],eax
    65012a3e:	cmp    BYTE PTR [rsp+0x101b0],bpl
    65012a46:	jne    0x65012a4f
    65012a48:	test   r15d,r15d
    65012a4b:	cmovg  r15d,ebp
    65012a4f:	mov    rdx,QWORD PTR [rdi]
    65012a52:	mov    rax,QWORD PTR [rsp+0x78]
    65012a57:	cmp    rdx,QWORD PTR [rax]
    65012a5a:	jne    0x65012a6a
    65012a5c:	mov    rdx,QWORD PTR [rdi+0x8]
    65012a60:	cmp    rdx,QWORD PTR [rax+0x8]
    65012a64:	jne    0x65012a6a
    65012a66:	mov    eax,ebp
    65012a68:	jmp    0x65012a6f
    65012a6a:	sbb    eax,eax
    65012a6c:	sbb    eax,0xffffffff
    65012a6f:	test   eax,eax
    65012a71:	jne    0x65012b65
    65012a77:	cmp    r11d,r15d
    65012a7a:	jne    0x65012b65
    65012a80:	movzx  eax,BYTE PTR [rdi+0x14]
    65012a84:	mov    rcx,QWORD PTR [rsp+0x80]
    65012a8c:	mov    BYTE PTR [rcx],al
    65012a8e:	mov    rax,QWORD PTR [rsp+0x90]
    65012a96:	lea    rbx,[rax-0x15]
    65012a9a:	mov    QWORD PTR [rsp+0x70],r14
    65012a9f:	mov    r8,rbp
    65012aa2:	mov    QWORD PTR [rsp+0x68],rbp
    65012aa7:	mov    BYTE PTR [rsp+0x58],r8b
    65012aac:	cmp    rbx,0xfffffffffffffffe
    65012ab0:	jbe    0x65012ac1
    65012ab2:	call   0x6501d150
    65012ab7:	mov    r14,QWORD PTR [rsp+0x70]
    65012abc:	mov    r8,QWORD PTR [rsp+0x68]
    65012ac1:	cmp    r14,rbx
    65012ac4:	jae    0x65012ada
    65012ac6:	mov    rdx,rbx
    65012ac9:	lea    rcx,[rsp+0x50]
    65012ace:	call   0x65002330
    65012ad3:	mov    r14,QWORD PTR [rsp+0x70]
    65012ad8:	jmp    0x65012af7
    65012ada:	test   rbx,rbx
    65012add:	jne    0x65012af7
    65012adf:	mov    QWORD PTR [rsp+0x68],rbp
    65012ae4:	lea    rax,[rsp+0x58]
    65012ae9:	cmp    r14,0x10
    65012aed:	cmovae rax,QWORD PTR [rsp+0x58]
    65012af3:	mov    BYTE PTR [rax],bl
    65012af5:	jmp    0x65012b34
    65012af7:	test   rbx,rbx
    65012afa:	je     0x65012b34
    65012afc:	lea    rcx,[rsp+0x58]
    65012b01:	cmp    r14,0x10
    65012b05:	cmovae rcx,QWORD PTR [rsp+0x58]
    65012b0b:	mov    r9,rbx
    65012b0e:	lea    r8,[rdi+0x15]
    65012b12:	mov    rdx,r14
    65012b15:	call   0x6501d7b0
    65012b1a:	mov    QWORD PTR [rsp+0x68],rbx
    65012b1f:	lea    rax,[rsp+0x58]
    65012b24:	cmp    QWORD PTR [rsp+0x70],0x10
    65012b2a:	cmovae rax,QWORD PTR [rsp+0x58]
    65012b30:	mov    BYTE PTR [rbx+rax*1],0x0
    65012b34:	or     r9,0xffffffffffffffff
    65012b38:	xor    r8d,r8d
    65012b3b:	lea    rdx,[rsp+0x50]
    65012b40:	mov    rcx,QWORD PTR [rsp+0xa0]
    65012b48:	call   0x65001e20
    65012b4d:	nop
    65012b4e:	cmp    QWORD PTR [rsp+0x70],0x10
    65012b54:	jb     0x65012b60
    65012b56:	mov    rcx,QWORD PTR [rsp+0x58]
    65012b5b:	call   0x6501d300
    65012b60:	mov    BYTE PTR [rsp+0x40],0x1
    65012b65:	mov    rcx,rdi
    65012b68:	call   0x6501d300
    65012b6d:	movzx  eax,BYTE PTR [rsp+0x40]
    65012b72:	jmp    0x65012b8d
    65012b74:	xor    al,al
    65012b76:	movzx  eax,al
    65012b79:	cmp    BYTE PTR [rsp+0x101b0],0x0
    65012b81:	mov    edx,0x1
    65012b86:	cmovne eax,edx
    65012b89:	jmp    0x65012b8d
    65012b8b:	xor    al,al
    65012b8d:	mov    rcx,QWORD PTR [rsp+0x10120]
    65012b95:	xor    rcx,rsp
    65012b98:	call   0x6501e650
    65012b9d:	add    rsp,0x10138
    65012ba4:	pop    r15
    65012ba6:	pop    r14
    65012ba8:	pop    r13
    65012baa:	pop    r12
    65012bac:	pop    rdi
    65012bad:	pop    rsi
    65012bae:	pop    rbp
    65012baf:	pop    rbx
    65012bb0:	ret    
    65012bb1:	int3   
    65012bb2:	int3   
    65012bb3:	int3   
    65012bb4:	int3   
    65012bb5:	int3   
    65012bb6:	int3   
    65012bb7:	int3   
    65012bb8:	int3   
    65012bb9:	int3   
    65012bba:	int3   
    65012bbb:	int3   
    65012bbc:	int3   
    65012bbd:	int3   
    65012bbe:	int3   
    65012bbf:	int3   
    65012bc0:	rex push rbp
    65012bc2:	sub    rsp,0x20
    65012bc6:	mov    rbp,rdx
    65012bc9:	lea    rcx,[rbp+0xd0]
    65012bd0:	call   0x65001c70
    65012bd5:	add    rsp,0x20
    65012bd9:	pop    rbp
    65012bda:	ret    
    65012bdb:	int3   
    65012bdc:	int3   
    65012bdd:	int3   
    65012bde:	int3   
    65012bdf:	int3   
    65012be0:	rex push rbp
    65012be2:	sub    rsp,0x20
    65012be6:	mov    rbp,rdx
    65012be9:	lea    rcx,[rbp+0xc0]
    65012bf0:	call   0x65014bb0
    65012bf5:	add    rsp,0x20
    65012bf9:	pop    rbp
    65012bfa:	ret    
    65012bfb:	int3   
    65012bfc:	int3   
    65012bfd:	int3   
    65012bfe:	int3   
    65012bff:	int3   
    65012c00:	rex push rbp
    65012c02:	sub    rsp,0x20
    65012c06:	mov    rbp,rdx
    65012c09:	lea    rcx,[rbp+0xc8]
    65012c10:	call   0x65014bb0
    65012c15:	add    rsp,0x20
    65012c19:	pop    rbp
    65012c1a:	ret    
    65012c1b:	int3   
    65012c1c:	int3   
    65012c1d:	int3   
    65012c1e:	int3   
    65012c1f:	int3   
    65012c20:	rex push rbp
    65012c22:	sub    rsp,0x20
    65012c26:	mov    rbp,rdx
    65012c29:	lea    rcx,[rbp+0x50]
    65012c2d:	call   0x65001c70
    65012c32:	add    rsp,0x20
    65012c36:	pop    rbp
    65012c37:	ret    
    65012c38:	int3   
    65012c39:	int3   
    65012c3a:	int3   
    65012c3b:	int3   
    65012c3c:	int3   
    65012c3d:	int3   
    65012c3e:	int3   
    65012c3f:	int3   
    65012c40:	mov    QWORD PTR [rsp+0x10],rbx
    65012c45:	push   rdi
    65012c46:	sub    rsp,0x20
    65012c4a:	mov    rbx,QWORD PTR [rcx]
    65012c4d:	mov    rdi,rcx
    65012c50:	test   rbx,rbx
    65012c53:	je     0x65012c92
    65012c55:	or     eax,0xffffffff
    65012c58:	lock xadd DWORD PTR [rbx+0x10],eax
    65012c5d:	add    eax,0xffffffff
    65012c60:	jne    0x65012c8b
    65012c62:	test   rbx,rbx
    65012c65:	je     0x65012c8b
    65012c67:	mov    rcx,QWORD PTR [rbx]
    65012c6a:	test   rcx,rcx
    65012c6d:	je     0x65012c75
    65012c6f:	call   QWORD PTR [rip+0x216db]        # 0x65034350
    65012c75:	mov    rcx,QWORD PTR [rbx+0x8]
    65012c79:	test   rcx,rcx
    65012c7c:	je     0x65012c83
    65012c7e:	call   0x6501ef80
    65012c83:	mov    rcx,rbx
    65012c86:	call   0x6501d300
    65012c8b:	mov    QWORD PTR [rdi],0x0
    65012c92:	mov    rbx,QWORD PTR [rsp+0x38]
    65012c97:	add    rsp,0x20
    65012c9b:	pop    rdi
    65012c9c:	ret    
    65012c9d:	int3   
    65012c9e:	int3   
    65012c9f:	int3   
    65012ca0:	mov    QWORD PTR [rsp+0x10],rdx
    65012ca5:	push   rbx
    65012ca6:	push   rsi
    65012ca7:	push   rdi
    65012ca8:	sub    rsp,0x30
    65012cac:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65012cb5:	mov    rbx,r8
    65012cb8:	mov    rdi,rdx
    65012cbb:	mov    DWORD PTR [rsp+0x50],0x0
    65012cc3:	mov    rax,QWORD PTR [rcx]
    65012cc6:	mov    QWORD PTR [rdx],rax
    65012cc9:	test   rax,rax
    65012ccc:	je     0x65012cd3
    65012cce:	lock add DWORD PTR [rax+0x10],0x1
    65012cd3:	mov    DWORD PTR [rsp+0x50],0x1
    65012cdb:	mov    ecx,0x18
    65012ce0:	call   0x6501dbc0
    65012ce5:	mov    QWORD PTR [rsp+0x68],rax
    65012cea:	test   rax,rax
    65012ced:	je     0x65012d02
    65012cef:	mov    r8,rbx
    65012cf2:	mov    rdx,rdi
    65012cf5:	mov    rcx,rax
    65012cf8:	call   0x65012dc0
    65012cfd:	mov    rsi,rax
    65012d00:	jmp    0x65012d04
    65012d02:	xor    esi,esi
    65012d04:	test   rsi,rsi
    65012d07:	jne    0x65012d18
    65012d09:	mov    ecx,0x8007000e
    65012d0e:	call   0x6502eba0
    65012d13:	mov    rax,rdi
    65012d16:	jmp    0x65012d63
    65012d18:	mov    rbx,QWORD PTR [rdi]
    65012d1b:	test   rbx,rbx
    65012d1e:	je     0x65012d5d
    65012d20:	or     eax,0xffffffff
    65012d23:	lock xadd DWORD PTR [rbx+0x10],eax
    65012d28:	add    eax,0xffffffff
    65012d2b:	jne    0x65012d56
    65012d2d:	test   rbx,rbx
    65012d30:	je     0x65012d56
    65012d32:	mov    rcx,QWORD PTR [rbx]
    65012d35:	test   rcx,rcx
    65012d38:	je     0x65012d40
    65012d3a:	call   QWORD PTR [rip+0x21610]        # 0x65034350
    65012d40:	mov    rcx,QWORD PTR [rbx+0x8]
    65012d44:	test   rcx,rcx
    65012d47:	je     0x65012d4e
    65012d49:	call   0x6501ef80
    65012d4e:	mov    rcx,rbx
    65012d51:	call   0x6501d300
    65012d56:	mov    QWORD PTR [rdi],0x0
    65012d5d:	mov    QWORD PTR [rdi],rsi
    65012d60:	mov    rax,rdi
    65012d63:	add    rsp,0x30
    65012d67:	pop    rdi
    65012d68:	pop    rsi
    65012d69:	pop    rbx
    65012d6a:	ret    
    65012d6b:	int3   
    65012d6c:	int3   
    65012d6d:	int3   
    65012d6e:	int3   
    65012d6f:	int3   
    65012d70:	rex push rbp
    65012d72:	sub    rsp,0x20
    65012d76:	mov    rbp,rdx
    65012d79:	mov    eax,DWORD PTR [rbp+0x50]
    65012d7c:	and    eax,0x1
    65012d7f:	test   eax,eax
    65012d81:	je     0x65012d90
    65012d83:	and    DWORD PTR [rbp+0x50],0xfffffffe
    65012d87:	mov    rcx,QWORD PTR [rbp+0x58]
    65012d8b:	call   0x65012c40
    65012d90:	add    rsp,0x20
    65012d94:	pop    rbp
    65012d95:	ret    
    65012d96:	int3   
    65012d97:	int3   
    65012d98:	int3   
    65012d99:	int3   
    65012d9a:	int3   
    65012d9b:	int3   
    65012d9c:	int3   
    65012d9d:	int3   
    65012d9e:	int3   
    65012d9f:	int3   
    65012da0:	rex push rbp
    65012da2:	sub    rsp,0x20
    65012da6:	mov    rbp,rdx
    65012da9:	mov    rcx,QWORD PTR [rbp+0x68]
    65012dad:	call   0x6501d300
    65012db2:	add    rsp,0x20
    65012db6:	pop    rbp
    65012db7:	ret    
    65012db8:	int3   
    65012db9:	int3   
    65012dba:	int3   
    65012dbb:	int3   
    65012dbc:	int3   
    65012dbd:	int3   
    65012dbe:	int3   
    65012dbf:	int3   
    65012dc0:	mov    QWORD PTR [rsp+0x8],rbx
    65012dc5:	mov    QWORD PTR [rsp+0x10],rbp
    65012dca:	mov    QWORD PTR [rsp+0x18],rsi
    65012dcf:	push   rdi
    65012dd0:	push   r12
    65012dd2:	push   r13
    65012dd4:	sub    rsp,0x20
    65012dd8:	xor    edi,edi
    65012dda:	mov    rbx,rcx
    65012ddd:	mov    DWORD PTR [rcx+0x10],0x1
    65012de4:	mov    QWORD PTR [rcx+0x8],rdi
    65012de8:	mov    rcx,QWORD PTR [rdx]
    65012deb:	mov    rbp,r8
    65012dee:	test   rcx,rcx
    65012df1:	mov    r12,rdx
    65012df4:	je     0x65012e08
    65012df6:	mov    rcx,QWORD PTR [rcx]
    65012df9:	test   rcx,rcx
    65012dfc:	je     0x65012e08
    65012dfe:	call   QWORD PTR [rip+0x2152c]        # 0x65034330
    65012e04:	mov    esi,eax
    65012e06:	jmp    0x65012e0a
    65012e08:	mov    esi,edi
    65012e0a:	mov    rax,QWORD PTR [rbp+0x0]
    65012e0e:	test   rax,rax
    65012e11:	je     0x65012e23
    65012e13:	mov    rcx,QWORD PTR [rax]
    65012e16:	test   rcx,rcx
    65012e19:	je     0x65012e23
    65012e1b:	call   QWORD PTR [rip+0x2150f]        # 0x65034330
    65012e21:	mov    edi,eax
    65012e23:	lea    r13d,[rdi+rsi*1]
    65012e27:	xor    ecx,ecx
    65012e29:	lea    edx,[r13+r13*1+0x0]
    65012e2e:	call   QWORD PTR [rip+0x214ec]        # 0x65034320
    65012e34:	test   rax,rax
    65012e37:	mov    rcx,rax
    65012e3a:	mov    QWORD PTR [rbx],rax
    65012e3d:	jne    0x65012e4b
    65012e3f:	mov    ecx,0x8007000e
    65012e44:	call   0x6502eba0
    65012e49:	jmp    0x65012e97
    65012e4b:	mov    rax,QWORD PTR [r12]
    65012e4f:	test   rax,rax
    65012e52:	je     0x65012e6f
    65012e54:	mov    r8,QWORD PTR [rax]
    65012e57:	test   r8,r8
    65012e5a:	je     0x65012e6f
    65012e5c:	lea    r9d,[rsi+0x1]
    65012e60:	lea    edx,[r13+0x1]
    65012e64:	add    r9,r9
    65012e67:	add    rdx,rdx
    65012e6a:	call   0x6501d7b0
    65012e6f:	mov    rax,QWORD PTR [rbp+0x0]
    65012e73:	test   rax,rax
    65012e76:	je     0x65012e97
    65012e78:	mov    r8,QWORD PTR [rax]
    65012e7b:	test   r8,r8
    65012e7e:	je     0x65012e97
    65012e80:	mov    rax,QWORD PTR [rbx]
    65012e83:	lea    edx,[rdi+0x1]
    65012e86:	mov    ecx,esi
    65012e88:	add    rdx,rdx
    65012e8b:	lea    rcx,[rax+rcx*2]
    65012e8f:	mov    r9,rdx
    65012e92:	call   0x6501d7b0
    65012e97:	mov    rbp,QWORD PTR [rsp+0x48]
    65012e9c:	mov    rsi,QWORD PTR [rsp+0x50]
    65012ea1:	mov    rax,rbx
    65012ea4:	mov    rbx,QWORD PTR [rsp+0x40]
    65012ea9:	add    rsp,0x20
    65012ead:	pop    r13
    65012eaf:	pop    r12
    65012eb1:	pop    rdi
    65012eb2:	ret    
    65012eb3:	int3   
    65012eb4:	int3   
    65012eb5:	int3   
    65012eb6:	int3   
    65012eb7:	int3   
    65012eb8:	int3   
    65012eb9:	int3   
    65012eba:	int3   
    65012ebb:	int3   
    65012ebc:	int3   
    65012ebd:	int3   
    65012ebe:	int3   
    65012ebf:	int3   
    65012ec0:	rex.W jmp QWORD PTR [rip+0x21451]        # 0x65034318
    65012ec7:	int3   
    65012ec8:	int3   
    65012ec9:	int3   
    65012eca:	int3   
    65012ecb:	int3   
    65012ecc:	int3   
    65012ecd:	int3   
    65012ece:	int3   
    65012ecf:	int3   
    65012ed0:	mov    QWORD PTR [rsp+0x8],rbx
    65012ed5:	mov    DWORD PTR [rsp+0x18],r8d
    65012eda:	push   rbp
    65012edb:	push   rsi
    65012edc:	push   rdi
    65012edd:	push   r12
    65012edf:	push   r13
    65012ee1:	push   r14
    65012ee3:	push   r15
    65012ee5:	sub    rsp,0x20
    65012ee9:	movsxd rax,edx
    65012eec:	xor    r14b,r14b
    65012eef:	xor    ebp,ebp
    65012ef1:	mov    rsi,r9
    65012ef4:	mov    r15,rcx
    65012ef7:	mov    rdi,r9
    65012efa:	mov    r12d,ebp
    65012efd:	mov    BYTE PTR [r9],bpl
    65012f00:	lea    r13,[rax+rcx*1]
    65012f04:	mov    QWORD PTR [rsp+0x78],rax
    65012f09:	data16 xchg ax,ax
    65012f0c:	data16 data16 xchg ax,ax
    65012f10:	movzx  eax,BYTE PTR [r13+0x0]
    65012f15:	test   al,al
    65012f17:	je     0x65012fc8
    65012f1d:	movsx  ecx,al
    65012f20:	call   0x6501f8a0
    65012f25:	movsx  ecx,al
    65012f28:	mov    ebx,eax
    65012f2a:	call   0x6501f9d0
    65012f2f:	movzx  edx,BYTE PTR [rdi]
    65012f32:	movzx  ecx,bl
    65012f35:	test   eax,eax
    65012f37:	mov    eax,0x30
    65012f3c:	cmovne ecx,eax
    65012f3f:	shl    dl,0x4
    65012f42:	add    r14b,0x1
    65012f46:	lea    eax,[rcx-0x30]
    65012f49:	mov    BYTE PTR [rdi],dl
    65012f4b:	cmp    al,0x9
    65012f4d:	ja     0x65012f55
    65012f4f:	or     al,dl
    65012f51:	mov    BYTE PTR [rdi],al
    65012f53:	jmp    0x65012f63
    65012f55:	lea    eax,[rcx-0x61]
    65012f58:	cmp    al,0x5
    65012f5a:	ja     0x65012f90
    65012f5c:	sub    cl,0x57
    65012f5f:	or     cl,dl
    65012f61:	mov    BYTE PTR [rdi],cl
    65012f63:	cmp    r14b,0x2
    65012f67:	jne    0x65012f8a
    65012f69:	movzx  eax,BYTE PTR [rdi]
    65012f6c:	test   al,al
    65012f6e:	je     0x65012f7c
    65012f70:	movsx  ecx,al
    65012f73:	call   0x6501fae0
    65012f78:	test   eax,eax
    65012f7a:	je     0x65012f90
    65012f7c:	add    rdi,0x1
    65012f80:	add    r12d,0x1
    65012f84:	xor    r14b,r14b
    65012f87:	mov    BYTE PTR [rdi],bpl
    65012f8a:	add    r13,0x1
    65012f8e:	jmp    0x65012f10
    65012f90:	mov    rdi,QWORD PTR [rsp+0x78]
    65012f95:	mov    r12d,ebp
    65012f98:	mov    r13,rsi
    65012f9b:	add    rdi,r15
    65012f9e:	xchg   ax,ax
    65012fa0:	movzx  ebx,BYTE PTR [rdi]
    65012fa3:	test   bl,bl
    65012fa5:	je     0x65012fc8
    65012fa7:	movsx  ecx,bl
    65012faa:	call   0x6501fae0
    65012faf:	test   eax,eax
    65012fb1:	je     0x65012fc5
    65012fb3:	mov    BYTE PTR [r13+0x0],bl
    65012fb7:	add    r13,0x1
    65012fbb:	add    r12d,0x1
    65012fbf:	add    rdi,0x1
    65012fc3:	jmp    0x65012fa0
    65012fc5:	mov    r12d,ebp
    65012fc8:	cmp    DWORD PTR [rsp+0x70],ebp
    65012fcc:	movsxd r8,r12d
    65012fcf:	mov    BYTE PTR [r8+rsi*1],bpl
    65012fd3:	je     0x65013007
    65012fd5:	test   r12d,r12d
    65012fd8:	jle    0x65013007
    65012fda:	add    r8,0xffffffffffffffff
    65012fde:	lea    rdx,[rsi+0x1]
    65012fe2:	shr    r8,1
    65012fe5:	add    r8,0x1
    65012fe9:	data16 xchg ax,ax
    65012fec:	data16 data16 xchg ax,ax
    65012ff0:	movzx  ecx,BYTE PTR [rdx-0x1]
    65012ff4:	movzx  eax,BYTE PTR [rdx]
    65012ff7:	add    rdx,0x2
    65012ffb:	sub    r8,0x1
    65012fff:	mov    BYTE PTR [rdx-0x3],al
    65013002:	mov    BYTE PTR [rdx-0x2],cl
    65013005:	jne    0x65012ff0
    65013007:	or     r12d,0xffffffff
    6501300b:	cmp    BYTE PTR [rsi],bpl
    6501300e:	mov    ebx,r12d
    65013011:	je     0x65013077
    65013013:	mov    rdi,rsi
    65013016:	movsx  ecx,BYTE PTR [rdi]
    65013019:	call   0x6501f9d0
    6501301e:	test   eax,eax
    65013020:	jne    0x6501302a
    65013022:	test   ebx,ebx
    65013024:	mov    r12d,ebp
    65013027:	cmovs  ebx,ebp
    6501302a:	add    rdi,0x1
    6501302e:	add    ebp,0x1
    65013031:	cmp    BYTE PTR [rdi],0x0
    65013034:	jne    0x65013016
    65013036:	test   ebx,ebx
    65013038:	js     0x65013077
    6501303a:	test   r12d,r12d
    6501303d:	js     0x65013077
    6501303f:	movsxd r8,ebx
    65013042:	movsxd r9,r12d
    65013045:	cmp    r8,r9
    65013048:	mov    rcx,r8
    6501304b:	jg     0x6501306d
    6501304d:	data16 xchg ax,ax
    65013050:	movzx  edx,BYTE PTR [rcx+rsi*1]
    65013054:	test   dl,dl
    65013056:	je     0x6501306d
    65013058:	mov    rax,rcx
    6501305b:	add    rcx,0x1
    6501305f:	add    ebx,0x1
    65013062:	sub    rax,r8
    65013065:	cmp    rcx,r9
    65013068:	mov    BYTE PTR [rax+rsi*1],dl
    6501306b:	jle    0x65013050
    6501306d:	movsxd rax,ebx
    65013070:	sub    rax,r8
    65013073:	mov    BYTE PTR [rax+rsi*1],0x0
    65013077:	mov    rax,rsi
    6501307a:	mov    rbx,QWORD PTR [rsp+0x60]
    6501307f:	add    rsp,0x20
    65013083:	pop    r15
    65013085:	pop    r14
    65013087:	pop    r13
    65013089:	pop    r12
    6501308b:	pop    rdi
    6501308c:	pop    rsi
    6501308d:	pop    rbp
    6501308e:	ret    
    6501308f:	int3   
    65013090:	rex push rbx
    65013092:	push   rsi
    65013093:	push   rdi
    65013094:	push   r12
    65013096:	push   r14
    65013098:	push   r15
    6501309a:	mov    eax,0x2f98
    6501309f:	call   0x65033230
    650130a4:	sub    rsp,rax
    650130a7:	mov    rax,QWORD PTR [rip+0x30072]        # 0x65043120
    650130ae:	xor    rax,rsp
    650130b1:	mov    QWORD PTR [rsp+0x2f80],rax
    650130b9:	xor    dil,dil
    650130bc:	xor    eax,eax
    650130be:	mov    r15,r8
    650130c1:	xor    r12d,r12d
    650130c4:	mov    QWORD PTR [rsp+0x50],rdx
    650130c9:	mov    QWORD PTR [rsp+0x48],rcx
    650130ce:	mov    esi,0x1
    650130d3:	lock cmpxchg DWORD PTR [rip+0x34c81],esi        # 0x65047d5c
    650130db:	jne    0x6501314a
    650130dd:	lea    r8,[rip+0x2636c]        # 0x65039450
    650130e4:	lea    edx,[rsi+0xa]
    650130e7:	lea    rcx,[rip+0x263a2]        # 0x65039490
    650130ee:	call   0x6500bcb0
    650130f3:	lea    r8,[rip+0x263a6]        # 0x650394a0
    650130fa:	lea    edx,[rsi+0x7]
    650130fd:	lea    rcx,[rip+0x261d4]        # 0x650392d8
    65013104:	mov    rbx,rax
    65013107:	call   0x6500c660
    6501310c:	mov    rcx,rax
    6501310f:	call   QWORD PTR [rip+0x20feb]        # 0x65034100
    65013115:	add    DWORD PTR [rip+0x3182d],esi        # 0x65044948
    6501311b:	test   rax,rax
    6501311e:	je     0x6501313e
    65013120:	mov    rdx,rbx
    65013123:	mov    rcx,rax
    65013126:	call   QWORD PTR [rip+0x20fdc]        # 0x65034108
    6501312c:	add    DWORD PTR [rip+0x3181a],esi        # 0x6504494c
    65013132:	mov    rbx,rax
    65013135:	mov    QWORD PTR [rip+0x34d4c],rax        # 0x65047e88
    6501313c:	jmp    0x65013151
    6501313e:	mov    rbx,r12
    65013141:	mov    QWORD PTR [rip+0x34d40],rbx        # 0x65047e88
    65013148:	jmp    0x65013151
    6501314a:	mov    rbx,QWORD PTR [rip+0x34d37]        # 0x65047e88
    65013151:	lea    r8,[rip+0x25c68]        # 0x65038dc0
    65013158:	lea    rcx,[rip+0x25c99]        # 0x65038df8
    6501315f:	mov    edx,0x12
    65013164:	call   0x6500c660
    65013169:	xor    r9d,r9d
    6501316c:	mov    QWORD PTR [rsp+0x30],r12
    65013171:	lea    r8d,[r9+0x3]
    65013175:	xor    edx,edx
    65013177:	mov    rcx,rax
    6501317a:	mov    DWORD PTR [rsp+0x28],r12d
    6501317f:	mov    DWORD PTR [rsp+0x20],0x3
    65013187:	call   rbx
    65013189:	cmp    rax,0xffffffffffffffff
    6501318d:	mov    r14,rax
    65013190:	jne    0x65013199
    65013192:	xor    al,al
    65013194:	jmp    0x650135e3
    65013199:	xor    eax,eax
    6501319b:	lea    rcx,[rsp+0x870]
    650131a3:	xor    edx,edx
    650131a5:	mov    QWORD PTR [rsp+0x58],rax
    650131aa:	mov    r8d,0x2710
    650131b0:	mov    DWORD PTR [rsp+0x40],r12d
    650131b5:	mov    DWORD PTR [rsp+0x58],r12d
    650131ba:	mov    DWORD PTR [rsp+0x5c],r12d
    650131bf:	mov    DWORD PTR [rsp+0x60],eax
    650131c3:	call   0x6501efa0
    650131c8:	xor    eax,eax
    650131ca:	lock cmpxchg DWORD PTR [rip+0x34ba2],esi        # 0x65047d74
    650131d2:	jne    0x65013242
    650131d4:	lea    r8,[rip+0x26585]        # 0x65039760
    650131db:	lea    rcx,[rip+0x265be]        # 0x650397a0
    650131e2:	mov    edx,0xf
    650131e7:	call   0x6500bcb0
    650131ec:	lea    r8,[rip+0x265bd]        # 0x650397b0
    650131f3:	lea    rcx,[rip+0x260de]        # 0x650392d8
    650131fa:	mov    edx,0x8
    650131ff:	mov    rbx,rax
    65013202:	call   0x6500c660
    65013207:	mov    rcx,rax
    6501320a:	call   QWORD PTR [rip+0x20ef0]        # 0x65034100
    65013210:	add    DWORD PTR [rip+0x31732],esi        # 0x65044948
    65013216:	test   rax,rax
    65013219:	je     0x65013236
    6501321b:	mov    rdx,rbx
    6501321e:	mov    rcx,rax
    65013221:	call   QWORD PTR [rip+0x20ee1]        # 0x65034108
    65013227:	add    DWORD PTR [rip+0x3171f],esi        # 0x6504494c
    6501322d:	mov    QWORD PTR [rip+0x34c84],rax        # 0x65047eb8
    65013234:	jmp    0x65013249
    65013236:	mov    rax,r12
    65013239:	mov    QWORD PTR [rip+0x34c78],rax        # 0x65047eb8
    65013240:	jmp    0x65013249
    65013242:	mov    rax,QWORD PTR [rip+0x34c6f]        # 0x65047eb8
    65013249:	mov    QWORD PTR [rsp+0x38],r12
    6501324e:	lea    rcx,[rsp+0x40]
    65013253:	lea    r8,[rsp+0x58]
    65013258:	mov    QWORD PTR [rsp+0x30],rcx
    6501325d:	lea    rcx,[rsp+0x870]
    65013265:	mov    DWORD PTR [rsp+0x28],0x2710
    6501326d:	mov    QWORD PTR [rsp+0x20],rcx
    65013272:	mov    r9d,0xc
    65013278:	mov    edx,0x2d1400
    6501327d:	mov    rcx,r14
    65013280:	call   rax
    65013282:	test   eax,eax
    65013284:	je     0x650134dc
    6501328a:	mov    edx,DWORD PTR [rsp+0x880]
    65013291:	mov    BYTE PTR [rsp+0x480],r12b
    65013299:	test   edx,edx
    6501329b:	jle    0x650132b5
    6501329d:	lea    r9,[rsp+0x480]
    650132a5:	lea    rcx,[rsp+0x870]
    650132ad:	xor    r8d,r8d
    650132b0:	call   0x65012ed0
    650132b5:	movsxd rax,DWORD PTR [rsp+0x888]
    650132bd:	mov    BYTE PTR [rsp+0x90],r12b
    650132c5:	test   eax,eax
    650132c7:	jle    0x650134b5
    650132cd:	mov    QWORD PTR [rsp+0x2fe8],rbp
    650132d5:	xor    esi,esi
    650132d7:	mov    QWORD PTR [rsp+0x2f90],r13
    650132df:	mov    r13,rax
    650132e2:	lea    rdi,[rsp+0x90]
    650132ea:	lea    rbp,[rsp+rax*1+0x870]
    650132f2:	mov    BYTE PTR [rsp+0x90],sil
    650132fa:	data16 xchg ax,ax
    650132fd:	data16 xchg ax,ax
    65013300:	movzx  eax,BYTE PTR [rbp+0x0]
    65013304:	test   al,al
    65013306:	je     0x650133bc
    6501330c:	movsx  ecx,al
    6501330f:	call   0x6501f8a0
    65013314:	movsx  ecx,al
    65013317:	mov    ebx,eax
    65013319:	call   0x6501f9d0
    6501331e:	movzx  edx,BYTE PTR [rdi]
    65013321:	movzx  ecx,bl
    65013324:	test   eax,eax
    65013326:	mov    eax,0x30
    6501332b:	cmovne ecx,eax
    6501332e:	shl    dl,0x4
    65013331:	add    r12b,0x1
    65013335:	lea    eax,[rcx-0x30]
    65013338:	mov    BYTE PTR [rdi],dl
    6501333a:	cmp    al,0x9
    6501333c:	ja     0x65013344
    6501333e:	or     al,dl
    65013340:	mov    BYTE PTR [rdi],al
    65013342:	jmp    0x65013352
    65013344:	lea    eax,[rcx-0x61]
    65013347:	cmp    al,0x5
    65013349:	ja     0x6501337e
    6501334b:	sub    cl,0x57
    6501334e:	or     cl,dl
    65013350:	mov    BYTE PTR [rdi],cl
    65013352:	cmp    r12b,0x2
    65013356:	jne    0x65013378
    65013358:	movzx  eax,BYTE PTR [rdi]
    6501335b:	test   al,al
    6501335d:	je     0x6501336b
    6501335f:	movsx  ecx,al
    65013362:	call   0x6501fae0
    65013367:	test   eax,eax
    65013369:	je     0x6501337e
    6501336b:	add    rdi,0x1
    6501336f:	add    esi,0x1
    65013372:	xor    r12b,r12b
    65013375:	mov    BYTE PTR [rdi],r12b
    65013378:	add    rbp,0x1
    6501337c:	jmp    0x65013300
    6501337e:	xor    r12d,r12d
    65013381:	lea    rbp,[rsp+0x90]
    65013389:	lea    rdi,[rsp+r13*1+0x870]
    65013391:	mov    esi,r12d
    65013394:	movzx  ebx,BYTE PTR [rdi]
    65013397:	test   bl,bl
    65013399:	je     0x650133bf
    6501339b:	movsx  ecx,bl
    6501339e:	call   0x6501fae0
    650133a3:	test   eax,eax
    650133a5:	je     0x650133b7
    650133a7:	mov    BYTE PTR [rbp+0x0],bl
    650133aa:	add    rbp,0x1
    650133ae:	add    esi,0x1
    650133b1:	add    rdi,0x1
    650133b5:	jmp    0x65013394
    650133b7:	mov    esi,r12d
    650133ba:	jmp    0x650133bf
    650133bc:	xor    r12d,r12d
    650133bf:	test   esi,esi
    650133c1:	mov    r13,QWORD PTR [rsp+0x2f90]
    650133c9:	movsxd r8,esi
    650133cc:	mov    BYTE PTR [rsp+r8*1+0x90],0x0
    650133d5:	mov    rdx,r12
    650133d8:	jle    0x65013407
    650133da:	data16 xchg ax,ax
    650133dd:	data16 xchg ax,ax
    650133e0:	movzx  ecx,BYTE PTR [rsp+rdx*1+0x90]
    650133e8:	movzx  eax,BYTE PTR [rsp+rdx*1+0x91]
    650133f0:	add    rdx,0x2
    650133f4:	cmp    rdx,r8
    650133f7:	mov    BYTE PTR [rsp+rdx*1+0x8e],al
    650133fe:	mov    BYTE PTR [rsp+rdx*1+0x8f],cl
    65013405:	jl     0x650133e0
    65013407:	or     ebp,0xffffffff
    6501340a:	cmp    BYTE PTR [rsp+0x90],0x0
    65013412:	mov    esi,r12d
    65013415:	mov    ebx,ebp
    65013417:	je     0x6501349a
    6501341d:	lea    rdi,[rsp+0x90]
    65013425:	movsx  ecx,BYTE PTR [rdi]
    65013428:	call   0x6501f9d0
    6501342d:	test   eax,eax
    6501342f:	jne    0x65013438
    65013431:	test   ebx,ebx
    65013433:	mov    ebp,esi
    65013435:	cmovs  ebx,esi
    65013438:	add    rdi,0x1
    6501343c:	add    esi,0x1
    6501343f:	cmp    BYTE PTR [rdi],0x0
    65013442:	jne    0x65013425
    65013444:	test   ebx,ebx
    65013446:	js     0x650134a8
    65013448:	test   ebp,ebp
    6501344a:	js     0x650134a1
    6501344c:	movsxd r8,ebx
    6501344f:	movsxd r9,ebp
    65013452:	cmp    r8,r9
    65013455:	mov    rdx,r8
    65013458:	jg     0x65013485
    6501345a:	data16 xchg ax,ax
    6501345d:	data16 xchg ax,ax
    65013460:	movzx  ecx,BYTE PTR [rsp+rdx*1+0x90]
    65013468:	test   cl,cl
    6501346a:	je     0x65013485
    6501346c:	mov    rax,rdx
    6501346f:	add    rdx,0x1
    65013473:	add    ebx,0x1
    65013476:	sub    rax,r8
    65013479:	cmp    rdx,r9
    6501347c:	mov    BYTE PTR [rsp+rax*1+0x90],cl
    65013483:	jle    0x65013460
    65013485:	movsxd rax,ebx
    65013488:	mov    esi,0x1
    6501348d:	sub    rax,r8
    65013490:	mov    BYTE PTR [rsp+rax*1+0x90],0x0
    65013498:	jmp    0x650134ad
    6501349a:	mov    esi,0x1
    6501349f:	jmp    0x650134ad
    650134a1:	mov    esi,0x1
    650134a6:	jmp    0x650134ad
    650134a8:	mov    esi,0x1
    650134ad:	mov    rbp,QWORD PTR [rsp+0x2fe8]
    650134b5:	mov    rcx,QWORD PTR [rsp+0x48]
    650134ba:	lea    rdx,[rsp+0x90]
    650134c2:	call   0x65003cc0
    650134c7:	mov    rcx,QWORD PTR [rsp+0x50]
    650134cc:	lea    rdx,[rsp+0x480]
    650134d4:	call   0x65003cc0
    650134d9:	mov    dil,0x1
    650134dc:	xor    eax,eax
    650134de:	mov    DWORD PTR [rsp+0x68],r12d
    650134e3:	mov    QWORD PTR [r15],r12
    650134e6:	mov    DWORD PTR [rsp+0x6c],eax
    650134ea:	mov    DWORD PTR [rsp+0x70],eax
    650134ee:	mov    DWORD PTR [rsp+0x74],eax
    650134f2:	mov    DWORD PTR [rsp+0x78],eax
    650134f6:	mov    DWORD PTR [rsp+0x7c],eax
    650134fa:	mov    DWORD PTR [rsp+0x80],eax
    65013501:	mov    DWORD PTR [rsp+0x84],eax
    65013508:	mov    DWORD PTR [rsp+0x88],eax
    6501350f:	mov    DWORD PTR [rsp+0x8c],eax
    65013516:	lock cmpxchg DWORD PTR [rip+0x34856],esi        # 0x65047d74
    6501351e:	jne    0x65013590
    65013520:	lea    r8,[rip+0x26239]        # 0x65039760
    65013527:	lea    rcx,[rip+0x26272]        # 0x650397a0
    6501352e:	mov    edx,0xf
    65013533:	call   0x6500bcb0
    65013538:	lea    r8,[rip+0x26271]        # 0x650397b0
    6501353f:	lea    rcx,[rip+0x25d92]        # 0x650392d8
    65013546:	mov    edx,0x8
    6501354b:	mov    rbx,rax
    6501354e:	call   0x6500c660
    65013553:	mov    rcx,rax
    65013556:	call   QWORD PTR [rip+0x20ba4]        # 0x65034100
    6501355c:	add    DWORD PTR [rip+0x313e5],0x1        # 0x65044948
    65013563:	test   rax,rax
    65013566:	je     0x65013584
    65013568:	mov    rdx,rbx
    6501356b:	mov    rcx,rax
    6501356e:	call   QWORD PTR [rip+0x20b94]        # 0x65034108
    65013574:	add    DWORD PTR [rip+0x313d1],0x1        # 0x6504494c
    6501357b:	mov    QWORD PTR [rip+0x34936],rax        # 0x65047eb8
    65013582:	jmp    0x65013597
    65013584:	mov    rax,r12
    65013587:	mov    QWORD PTR [rip+0x3492a],rax        # 0x65047eb8
    6501358e:	jmp    0x65013597
    65013590:	mov    rax,QWORD PTR [rip+0x34921]        # 0x65047eb8
    65013597:	mov    QWORD PTR [rsp+0x38],r12
    6501359c:	lea    rcx,[rsp+0x44]
    650135a1:	xor    r9d,r9d
    650135a4:	mov    QWORD PTR [rsp+0x30],rcx
    650135a9:	lea    rcx,[rsp+0x68]
    650135ae:	mov    DWORD PTR [rsp+0x28],0x28
    650135b6:	mov    QWORD PTR [rsp+0x20],rcx
    650135bb:	xor    r8d,r8d
    650135be:	mov    edx,0x700a0
    650135c3:	mov    rcx,r14
    650135c6:	call   rax
    650135c8:	test   eax,eax
    650135ca:	je     0x650135d7
    650135cc:	mov    rcx,QWORD PTR [rsp+0x80]
    650135d4:	mov    QWORD PTR [r15],rcx
    650135d7:	mov    rcx,r14
    650135da:	call   QWORD PTR [rip+0x20a80]        # 0x65034060
    650135e0:	mov    al,dil
    650135e3:	mov    rcx,QWORD PTR [rsp+0x2f80]
    650135eb:	xor    rcx,rsp
    650135ee:	call   0x6501e650
    650135f3:	add    rsp,0x2f98
    650135fa:	pop    r15
    650135fc:	pop    r14
    650135fe:	pop    r12
    65013600:	pop    rdi
    65013601:	pop    rsi
    65013602:	pop    rbx
    65013603:	ret    
    65013604:	int3   
    65013605:	int3   
    65013606:	int3   
    65013607:	int3   
    65013608:	int3   
    65013609:	int3   
    6501360a:	int3   
    6501360b:	int3   
    6501360c:	int3   
    6501360d:	int3   
    6501360e:	int3   
    6501360f:	int3   
    65013610:	rex push rbp
    65013612:	push   r12
    65013614:	push   r13
    65013616:	push   r14
    65013618:	push   r15
    6501361a:	sub    rsp,0x3b0
    65013621:	lea    rbp,[rsp+0x40]
    65013626:	mov    QWORD PTR [rbp+0x80],0xfffffffffffffffe
    65013631:	mov    QWORD PTR [rbp+0x3a8],rbx
    65013638:	mov    QWORD PTR [rbp+0x3b0],rsi
    6501363f:	mov    QWORD PTR [rbp+0x3b8],rdi
    65013646:	mov    rax,QWORD PTR [rip+0x2fad3]        # 0x65043120
    6501364d:	xor    rax,rbp
    65013650:	mov    QWORD PTR [rbp+0x360],rax
    65013657:	mov    r14,rcx
    6501365a:	mov    QWORD PTR [rbp+0x68],rcx
    6501365e:	mov    edi,0x1
    65013663:	mov    DWORD PTR [rbp+0x4],edi
    65013666:	xor    eax,eax
    65013668:	xor    r13d,r13d
    6501366b:	lock cmpxchg DWORD PTR [rip+0x346d5],edi        # 0x65047d48
    65013673:	jne    0x650136e0
    65013675:	lea    r8,[rip+0x25b7c]        # 0x650391f8
    6501367c:	lea    edx,[rdi+0xe]
    6501367f:	lea    rcx,[rip+0x25ba2]        # 0x65039228
    65013686:	call   0x6500bcb0
    6501368b:	mov    rdi,rax
    6501368e:	lea    r8,[rip+0x25ba3]        # 0x65039238
    65013695:	lea    edx,[r13+0x8]
    65013699:	lea    rcx,[rip+0x25a40]        # 0x650390e0
    650136a0:	call   0x6500c660
    650136a5:	mov    rcx,rax
    650136a8:	call   QWORD PTR [rip+0x20a52]        # 0x65034100
    650136ae:	add    DWORD PTR [rip+0x31293],0x1        # 0x65044948
    650136b5:	test   rax,rax
    650136b8:	je     0x650136cf
    650136ba:	mov    rdx,rdi
    650136bd:	mov    rcx,rax
    650136c0:	call   QWORD PTR [rip+0x20a42]        # 0x65034108
    650136c6:	add    DWORD PTR [rip+0x3127f],0x1        # 0x6504494c
    650136cd:	jmp    0x650136d2
    650136cf:	mov    rax,r13
    650136d2:	mov    QWORD PTR [rip+0x34787],rax        # 0x65047e60
    650136d9:	mov    edi,0x1
    650136de:	jmp    0x650136e7
    650136e0:	mov    rax,QWORD PTR [rip+0x34779]        # 0x65047e60
    650136e7:	lea    rdx,[rbp+0x4]
    650136eb:	lea    rcx,[rbp+0xa0]
    650136f2:	call   rax
    650136f4:	cmp    eax,0x6f
    650136f7:	jne    0x65013c0c
    650136fd:	mov    ecx,DWORD PTR [rbp+0x4]
    65013700:	call   0x6501d2f0
    65013705:	mov    QWORD PTR [rbp+0x60],rax
    65013709:	xor    eax,eax
    6501370b:	lock cmpxchg DWORD PTR [rip+0x34635],edi        # 0x65047d48
    65013713:	jne    0x6501377e
    65013715:	lea    r8,[rip+0x25adc]        # 0x650391f8
    6501371c:	mov    edx,0xf
    65013721:	lea    rcx,[rip+0x25b00]        # 0x65039228
    65013728:	call   0x6500bcb0
    6501372d:	mov    rdi,rax
    65013730:	lea    r8,[rip+0x25b01]        # 0x65039238
    65013737:	mov    edx,0x8
    6501373c:	lea    rcx,[rip+0x2599d]        # 0x650390e0
    65013743:	call   0x6500c660
    65013748:	mov    rcx,rax
    6501374b:	call   QWORD PTR [rip+0x209af]        # 0x65034100
    65013751:	add    DWORD PTR [rip+0x311f0],0x1        # 0x65044948
    65013758:	test   rax,rax
    6501375b:	je     0x65013772
    6501375d:	mov    rdx,rdi
    65013760:	mov    rcx,rax
    65013763:	call   QWORD PTR [rip+0x2099f]        # 0x65034108
    65013769:	add    DWORD PTR [rip+0x311dc],0x1        # 0x6504494c
    65013770:	jmp    0x65013775
    65013772:	mov    rax,r13
    65013775:	mov    QWORD PTR [rip+0x346e4],rax        # 0x65047e60
    6501377c:	jmp    0x65013785
    6501377e:	mov    rax,QWORD PTR [rip+0x346db]        # 0x65047e60
    65013785:	lea    rdx,[rbp+0x4]
    65013789:	mov    r15,QWORD PTR [rbp+0x60]
    6501378d:	mov    QWORD PTR [rbp+0x18],r15
    65013791:	mov    rcx,r15
    65013794:	call   rax
    65013796:	test   eax,eax
    65013798:	je     0x650137a7
    6501379a:	mov    rcx,r15
    6501379d:	call   0x6501d300
    650137a2:	jmp    0x65013c0c
    650137a7:	movabs r12,0xffffffffffffff0
    650137b1:	movzx  esi,BYTE PTR [rbp+0x0]
    650137b5:	call   QWORD PTR [rip+0x2f8dd]        # 0x65043098
    650137bb:	mov    edi,eax
    650137bd:	mov    DWORD PTR [rbp+0x20],eax
    650137c0:	lea    rcx,[rip+0x2f8d9]        # 0x650430a0
    650137c7:	mov    rdx,QWORD PTR [rip+0x2f8d2]        # 0x650430a0
    650137ce:	call   QWORD PTR [rdx+0x18]
    650137d1:	lea    rbx,[rax+0x18]
    650137d5:	mov    QWORD PTR [rbp+0x8],rbx
    650137d9:	cmp    DWORD PTR [r15+0x194],0x0
    650137e1:	je     0x6501390c
    650137e7:	add    r15,0x198
    650137ee:	xchg   ax,ax
    650137f0:	lea    rcx,[rip+0x2f8a9]        # 0x650430a0
    650137f7:	mov    rax,QWORD PTR [rip+0x2f8a2]        # 0x650430a0
    650137fe:	call   QWORD PTR [rax+0x18]
    65013801:	add    rax,0x18
    65013805:	mov    QWORD PTR [rbp+0x50],rax
    65013809:	movzx  edi,BYTE PTR [r15]
    6501380d:	lea    r8,[rip+0x2560c]        # 0x65038e20
    65013814:	mov    edx,0x4
    65013819:	lea    rcx,[rip+0x25638]        # 0x65038e58
    65013820:	call   0x6500c660
    65013825:	mov    rdx,rax
    65013828:	mov    r8d,edi
    6501382b:	lea    rcx,[rbp+0x50]
    6501382f:	call   0x65002560
    65013834:	mov    rdi,QWORD PTR [rbp+0x50]
    65013838:	mov    edx,DWORD PTR [rdi-0x10]
    6501383b:	mov    DWORD PTR [rbp+0x14],edx
    6501383e:	mov    r8,rdi
    65013841:	mov    r14,rdi
    65013844:	sub    r14,rbx
    65013847:	sar    r14,1
    6501384a:	mov    eax,DWORD PTR [rbx-0x10]
    6501384d:	mov    DWORD PTR [rbp+0x10],eax
    65013850:	lea    r12d,[rax+rdx*1]
    65013854:	mov    ecx,0x1
    65013859:	sub    ecx,DWORD PTR [rbx-0x8]
    6501385c:	mov    eax,DWORD PTR [rbx-0xc]
    6501385f:	sub    eax,r12d
    65013862:	or     eax,ecx
    65013864:	jge    0x6501387c
    65013866:	mov    edx,r12d
    65013869:	lea    rcx,[rbp+0x8]
    6501386d:	call   0x65002640
    65013872:	mov    rbx,QWORD PTR [rbp+0x8]
    65013876:	mov    r8,rdi
    65013879:	mov    edx,DWORD PTR [rbp+0x14]
    6501387c:	mov    eax,DWORD PTR [rbp+0x10]
    6501387f:	cmp    r14,rax
    65013882:	ja     0x65013888
    65013884:	lea    r8,[rbx+r14*2]
    65013888:	movsxd rdx,edx
    6501388b:	add    rdx,rdx
    6501388e:	lea    rcx,[rbx+rax*2]
    65013892:	mov    r9,rdx
    65013895:	call   0x6501d7b0
    6501389a:	test   r12d,r12d
    6501389d:	js     0x65013bf8
    650138a3:	cmp    r12d,DWORD PTR [rbx-0xc]
    650138a7:	jg     0x65013bf8
    650138ad:	mov    DWORD PTR [rbx-0x10],r12d
    650138b1:	movsxd rax,r12d
    650138b4:	mov    WORD PTR [rbx+rax*2],0x0
    650138ba:	lea    rdx,[rdi-0x18]
    650138be:	or     eax,0xffffffff
    650138c1:	lock xadd DWORD PTR [rdx+0x10],eax
    650138c6:	add    eax,0xffffffff
    650138c9:	test   eax,eax
    650138cb:	jg     0x650138d6
    650138cd:	mov    rcx,QWORD PTR [rdx]
    650138d0:	mov    rax,QWORD PTR [rcx]
    650138d3:	call   QWORD PTR [rax+0x8]
    650138d6:	add    r13d,0x1
    650138da:	add    r15,0x1
    650138de:	mov    rax,QWORD PTR [rbp+0x18]
    650138e2:	cmp    r13d,DWORD PTR [rax+0x194]
    650138e9:	je     0x650138f4
    650138eb:	mov    rbx,QWORD PTR [rbp+0x8]
    650138ef:	jmp    0x650137f0
    650138f4:	mov    rbx,QWORD PTR [rbp+0x8]
    650138f8:	mov    r14,QWORD PTR [rbp+0x68]
    650138fc:	mov    r15,rax
    650138ff:	mov    edi,DWORD PTR [rbp+0x20]
    65013902:	movabs r12,0xffffffffffffff0
    6501390c:	cmp    DWORD PTR [rbx-0x8],0x1
    65013910:	jle    0x65013922
    65013912:	mov    edx,DWORD PTR [rbx-0x10]
    65013915:	lea    rcx,[rbp+0x8]
    65013919:	call   0x65002130
    6501391e:	mov    rbx,QWORD PTR [rbp+0x8]
    65013922:	test   rbx,rbx
    65013925:	jne    0x65013932
    65013927:	xor    r13d,r13d
    6501392a:	mov    r12,r13
    6501392d:	jmp    0x650139b6
    65013932:	mov    rcx,rbx
    65013935:	call   QWORD PTR [rip+0x20745]        # 0x65034080
    6501393b:	lea    edx,[rax+0x1]
    6501393e:	cmp    edx,0x3fffffff
    65013944:	jle    0x6501394e
    65013946:	xor    r13d,r13d
    65013949:	mov    r12,r13
    6501394c:	jmp    0x650139b6
    6501394e:	movsxd rax,edx
    65013951:	add    rax,rax
    65013954:	lea    rcx,[rax+0xf]
    65013958:	cmp    rcx,rax
    6501395b:	ja     0x65013960
    6501395d:	mov    rcx,r12
    65013960:	and    rcx,0xfffffffffffffff0
    65013964:	mov    rax,rcx
    65013967:	call   0x65033230
    6501396c:	sub    rsp,rcx
    6501396f:	lea    r12,[rsp+0x40]
    65013974:	test   r12,r12
    65013977:	je     0x650139b0
    65013979:	mov    BYTE PTR [r12],0x0
    6501397e:	lea    eax,[rdx+rdx*1]
    65013981:	xor    r13d,r13d
    65013984:	mov    QWORD PTR [rsp+0x38],r13
    65013989:	mov    QWORD PTR [rsp+0x30],r13
    6501398e:	mov    DWORD PTR [rsp+0x28],eax
    65013992:	mov    QWORD PTR [rsp+0x20],r12
    65013997:	or     r9d,0xffffffff
    6501399b:	mov    r8,rbx
    6501399e:	xor    edx,edx
    650139a0:	mov    ecx,edi
    650139a2:	call   QWORD PTR [rip+0x20688]        # 0x65034030
    650139a8:	test   eax,eax
    650139aa:	cmove  r12,r13
    650139ae:	jmp    0x650139b6
    650139b0:	xor    r13d,r13d
    650139b3:	mov    r12,r13
    650139b6:	mov    edx,0xf
    650139bb:	mov    QWORD PTR [rbp+0x48],rdx
    650139bf:	mov    r8,r13
    650139c2:	mov    QWORD PTR [rbp+0x40],r13
    650139c6:	mov    BYTE PTR [rbp+0x30],0x0
    650139ca:	xor    eax,eax
    650139cc:	or     rcx,0xffffffffffffffff
    650139d0:	mov    rdi,r12
    650139d3:	repnz scas al,BYTE PTR es:[rdi]
    650139d5:	not    rcx
    650139d8:	sub    rcx,0x1
    650139dc:	mov    rdi,rcx
    650139df:	cmp    rcx,0xfffffffffffffffe
    650139e3:	jbe    0x650139f2
    650139e5:	call   0x6501d150
    650139ea:	mov    rdx,QWORD PTR [rbp+0x48]
    650139ee:	mov    r8,QWORD PTR [rbp+0x40]
    650139f2:	cmp    rdx,rdi
    650139f5:	jae    0x65013a09
    650139f7:	mov    rdx,rdi
    650139fa:	lea    rcx,[rbp+0x28]
    650139fe:	call   0x65002330
    65013a03:	mov    rdx,QWORD PTR [rbp+0x48]
    65013a07:	jmp    0x65013a24
    65013a09:	test   rdi,rdi
    65013a0c:	jne    0x65013a24
    65013a0e:	mov    QWORD PTR [rbp+0x40],r13
    65013a12:	lea    rax,[rbp+0x30]
    65013a16:	cmp    rdx,0x10
    65013a1a:	cmovae rax,QWORD PTR [rbp+0x30]
    65013a1f:	mov    BYTE PTR [rax],dil
    65013a22:	jmp    0x65013a57
    65013a24:	test   rdi,rdi
    65013a27:	je     0x65013a57
    65013a29:	lea    rcx,[rbp+0x30]
    65013a2d:	cmp    rdx,0x10
    65013a31:	cmovae rcx,QWORD PTR [rbp+0x30]
    65013a36:	mov    r9,rdi
    65013a39:	mov    r8,r12
    65013a3c:	call   0x6501d7b0
    65013a41:	mov    QWORD PTR [rbp+0x40],rdi
    65013a45:	lea    rax,[rbp+0x30]
    65013a49:	cmp    QWORD PTR [rbp+0x48],0x10
    65013a4e:	cmovae rax,QWORD PTR [rbp+0x30]
    65013a53:	mov    BYTE PTR [rax+rdi*1],0x0
    65013a57:	mov    r8,QWORD PTR [r14+0x8]
    65013a5b:	test   r8,r8
    65013a5e:	jne    0x65013a6f
    65013a60:	mov    rdi,r13
    65013a63:	movabs r12,0x6666666666666667
    65013a6d:	jmp    0x65013a97
    65013a6f:	mov    rcx,QWORD PTR [r14+0x10]
    65013a73:	sub    rcx,r8
    65013a76:	movabs r12,0x6666666666666667
    65013a80:	mov    rax,r12
    65013a83:	imul   rcx
    65013a86:	mov    rdi,rdx
    65013a89:	sar    rdi,0x4
    65013a8d:	mov    rax,rdi
    65013a90:	shr    rax,0x3f
    65013a94:	add    rdi,rax
    65013a97:	test   r8,r8
    65013a9a:	je     0x65013aed
    65013a9c:	mov    rcx,QWORD PTR [r14+0x18]
    65013aa0:	sub    rcx,r8
    65013aa3:	mov    rax,r12
    65013aa6:	imul   rcx
    65013aa9:	sar    rdx,0x4
    65013aad:	mov    rax,rdx
    65013ab0:	shr    rax,0x3f
    65013ab4:	add    rdx,rax
    65013ab7:	cmp    rdi,rdx
    65013aba:	jae    0x65013aed
    65013abc:	mov    rdi,QWORD PTR [r14+0x10]
    65013ac0:	xor    eax,eax
    65013ac2:	mov    BYTE PTR [rbp+0x0],al
    65013ac5:	mov    BYTE PTR [rsp+0x28],al
    65013ac9:	mov    BYTE PTR [rsp+0x20],sil
    65013ace:	mov    r9,r14
    65013ad1:	lea    r8,[rbp+0x28]
    65013ad5:	lea    edx,[rax+0x1]
    65013ad8:	mov    rcx,rdi
    65013adb:	call   0x65015270
    65013ae0:	lea    rdx,[rdi+0x28]
    65013ae4:	mov    QWORD PTR [r14+0x10],rdx
    65013ae8:	jmp    0x65013bb1
    65013aed:	mov    rdi,QWORD PTR [r14+0x10]
    65013af1:	cmp    r8,rdi
    65013af4:	jbe    0x65013afb
    65013af6:	call   0x6501dad0
    65013afb:	mov    QWORD PTR [rbp+0x70],r14
    65013aff:	mov    QWORD PTR [rbp+0x78],rdi
    65013b03:	mov    r12,QWORD PTR [r14+0x8]
    65013b07:	test   r12,r12
    65013b0a:	je     0x65013b60
    65013b0c:	mov    r8,QWORD PTR [r14+0x10]
    65013b10:	mov    rcx,r8
    65013b13:	sub    rcx,r12
    65013b16:	movabs rax,0x6666666666666667
    65013b20:	imul   rcx
    65013b23:	sar    rdx,0x4
    65013b27:	mov    rax,rdx
    65013b2a:	shr    rax,0x3f
    65013b2e:	add    rdx,rax
    65013b31:	je     0x65013b60
    65013b33:	cmp    r12,r8
    65013b36:	jbe    0x65013b3d
    65013b38:	call   0x6501dad0
    65013b3d:	sub    rdi,r12
    65013b40:	movabs rax,0x6666666666666667
    65013b4a:	imul   rdi
    65013b4d:	mov    rdi,rdx
    65013b50:	sar    rdi,0x4
    65013b54:	mov    rax,rdi
    65013b57:	shr    rax,0x3f
    65013b5b:	add    rdi,rax
    65013b5e:	jmp    0x65013b63
    65013b60:	mov    rdi,r13
    65013b63:	movaps xmm0,XMMWORD PTR [rbp+0x70]
    65013b67:	movdqa XMMWORD PTR [rbp+0x90],xmm0
    65013b6f:	lea    r9,[rbp+0x28]
    65013b73:	mov    r8d,0x1
    65013b79:	lea    rdx,[rbp+0x90]
    65013b80:	mov    rcx,r14
    65013b83:	call   0x65014bc0
    65013b88:	mov    r12,QWORD PTR [r14+0x8]
    65013b8c:	cmp    r12,QWORD PTR [r14+0x10]
    65013b90:	jbe    0x65013b97
    65013b92:	call   0x6501dad0
    65013b97:	lea    rax,[rdi+rdi*4]
    65013b9b:	lea    rcx,[r12+rax*8]
    65013b9f:	cmp    rcx,QWORD PTR [r14+0x10]
    65013ba3:	ja     0x65013bab
    65013ba5:	cmp    rcx,QWORD PTR [r14+0x8]
    65013ba9:	jae    0x65013bb1
    65013bab:	call   0x6501dad0
    65013bb0:	nop
    65013bb1:	cmp    QWORD PTR [rbp+0x48],0x10
    65013bb6:	jb     0x65013bc1
    65013bb8:	mov    rcx,QWORD PTR [rbp+0x30]
    65013bbc:	call   0x6501d300
    65013bc1:	mov    r15,QWORD PTR [r15]
    65013bc4:	mov    QWORD PTR [rbp+0x18],r15
    65013bc8:	lea    rdx,[rbx-0x18]
    65013bcc:	or     eax,0xffffffff
    65013bcf:	lock xadd DWORD PTR [rdx+0x10],eax
    65013bd4:	add    eax,0xffffffff
    65013bd7:	test   eax,eax
    65013bd9:	jg     0x65013be4
    65013bdb:	mov    rcx,QWORD PTR [rdx]
    65013bde:	mov    rax,QWORD PTR [rcx]
    65013be1:	call   QWORD PTR [rax+0x8]
    65013be4:	test   r15,r15
    65013be7:	je     0x65013c03
    65013be9:	movabs r12,0xffffffffffffff0
    65013bf3:	jmp    0x650137b5
    65013bf8:	mov    ecx,0x80070057
    65013bfd:	call   0x65001050
    65013c02:	nop
    65013c03:	mov    rcx,QWORD PTR [rbp+0x60]
    65013c07:	call   0x6501d300
    65013c0c:	mov    rcx,QWORD PTR [rbp+0x360]
    65013c13:	xor    rcx,rbp
    65013c16:	call   0x6501e650
    65013c1b:	mov    rbx,QWORD PTR [rbp+0x3a8]
    65013c22:	mov    rsi,QWORD PTR [rbp+0x3b0]
    65013c29:	mov    rdi,QWORD PTR [rbp+0x3b8]
    65013c30:	lea    rsp,[rbp+0x370]
    65013c37:	pop    r15
    65013c39:	pop    r14
    65013c3b:	pop    r13
    65013c3d:	pop    r12
    65013c3f:	pop    rbp
    65013c40:	ret    
    65013c41:	int3   
    65013c42:	int3   
    65013c43:	int3   
    65013c44:	int3   
    65013c45:	int3   
    65013c46:	int3   
    65013c47:	int3   
    65013c48:	int3   
    65013c49:	int3   
    65013c4a:	int3   
    65013c4b:	int3   
    65013c4c:	int3   
    65013c4d:	int3   
    65013c4e:	int3   
    65013c4f:	int3   
    65013c50:	rex push rbp
    65013c52:	sub    rsp,0x20
    65013c56:	lea    rbp,[rdx+0x40]
    65013c5a:	lea    rcx,[rbp+0x60]
    65013c5e:	call   0x65014bb0
    65013c63:	add    rsp,0x20
    65013c67:	pop    rbp
    65013c68:	ret    
    65013c69:	int3   
    65013c6a:	int3   
    65013c6b:	int3   
    65013c6c:	int3   
    65013c6d:	int3   
    65013c6e:	int3   
    65013c6f:	int3   
    65013c70:	rex push rbp
    65013c72:	sub    rsp,0x20
    65013c76:	lea    rbp,[rdx+0x40]
    65013c7a:	lea    rcx,[rbp+0x8]
    65013c7e:	call   0x65001cb0
    65013c83:	add    rsp,0x20
    65013c87:	pop    rbp
    65013c88:	ret    
    65013c89:	int3   
    65013c8a:	int3   
    65013c8b:	int3   
    65013c8c:	int3   
    65013c8d:	int3   
    65013c8e:	int3   
    65013c8f:	int3   
    65013c90:	rex push rbp
    65013c92:	sub    rsp,0x20
    65013c96:	lea    rbp,[rdx+0x40]
    65013c9a:	lea    rcx,[rbp+0x50]
    65013c9e:	call   0x65001cb0
    65013ca3:	add    rsp,0x20
    65013ca7:	pop    rbp
    65013ca8:	ret    
    65013ca9:	int3   
    65013caa:	int3   
    65013cab:	int3   
    65013cac:	int3   
    65013cad:	int3   
    65013cae:	int3   
    65013caf:	int3   
    65013cb0:	rex push rbp
    65013cb2:	sub    rsp,0x20
    65013cb6:	lea    rbp,[rdx+0x40]
    65013cba:	lea    rcx,[rbp+0x28]
    65013cbe:	call   0x65001c70
    65013cc3:	add    rsp,0x20
    65013cc7:	pop    rbp
    65013cc8:	ret    
    65013cc9:	int3   
    65013cca:	int3   
    65013ccb:	int3   
    65013ccc:	int3   
    65013ccd:	int3   
    65013cce:	int3   
    65013ccf:	int3   
    65013cd0:	mov    rax,rsp
    65013cd3:	push   rdi
    65013cd4:	push   r12
    65013cd6:	push   r13
    65013cd8:	push   r14
    65013cda:	push   r15
    65013cdc:	sub    rsp,0xf0
    65013ce3:	mov    QWORD PTR [rsp+0xe0],0xfffffffffffffffe
    65013cef:	mov    QWORD PTR [rax+0x8],rbx
    65013cf3:	mov    QWORD PTR [rax+0x10],rbp
    65013cf7:	mov    QWORD PTR [rax+0x18],rsi
    65013cfb:	mov    r15,r8
    65013cfe:	mov    r13,rdx
    65013d01:	mov    r12,rcx
    65013d04:	xor    r14d,r14d
    65013d07:	mov    DWORD PTR [rsp+0x138],r14d
    65013d0f:	lea    ecx,[r14+0x18]
    65013d13:	call   0x6501dbc0
    65013d18:	mov    rbx,rax
    65013d1b:	mov    QWORD PTR [rsp+0x80],rax
    65013d23:	lea    ebp,[r14+0x1]
    65013d27:	test   rax,rax
    65013d2a:	je     0x65013d54
    65013d2c:	mov    QWORD PTR [rax+0x8],r14
    65013d30:	mov    DWORD PTR [rax+0x10],ebp
    65013d33:	lea    rcx,[rip+0x2331e]        # 0x65037058
    65013d3a:	call   QWORD PTR [rip+0x20608]        # 0x65034348
    65013d40:	mov    QWORD PTR [rbx],rax
    65013d43:	test   rax,rax
    65013d46:	jne    0x65013d57
    65013d48:	mov    ecx,0x8007000e
    65013d4d:	call   0x6502eba0
    65013d52:	jmp    0x65013d57
    65013d54:	mov    rbx,r14
    65013d57:	mov    QWORD PTR [rsp+0x58],rbx
    65013d5c:	test   rbx,rbx
    65013d5f:	jne    0x65013d6c
    65013d61:	mov    ecx,0x8007000e
    65013d66:	call   0x6502eba0
    65013d6b:	nop
    65013d6c:	xor    eax,eax
    65013d6e:	lock cmpxchg DWORD PTR [rip+0x34072],ebp        # 0x65047de8
    65013d76:	jne    0x65013de1
    65013d78:	lea    r8,[rip+0x25eb1]        # 0x65039c30
    65013d7f:	mov    edx,0xe
    65013d84:	lea    rcx,[rip+0x25edd]        # 0x65039c68
    65013d8b:	call   0x6500bcb0
    65013d90:	mov    rdi,rax
    65013d93:	lea    r8,[rip+0x25ede]        # 0x65039c78
    65013d9a:	mov    edx,0x5
    65013d9f:	lea    rcx,[rip+0x25dea]        # 0x65039b90
    65013da6:	call   0x6500c660
    65013dab:	mov    rcx,rax
    65013dae:	call   QWORD PTR [rip+0x2034c]        # 0x65034100
    65013db4:	add    DWORD PTR [rip+0x30b8d],0x1        # 0x65044948
    65013dbb:	test   rax,rax
    65013dbe:	je     0x65013dd5
    65013dc0:	mov    rdx,rdi
    65013dc3:	mov    rcx,rax
    65013dc6:	call   QWORD PTR [rip+0x2033c]        # 0x65034108
    65013dcc:	add    DWORD PTR [rip+0x30b79],0x1        # 0x6504494c
    65013dd3:	jmp    0x65013dd8
    65013dd5:	mov    rax,r14
    65013dd8:	mov    QWORD PTR [rip+0x34121],rax        # 0x65047f00
    65013ddf:	jmp    0x65013de8
    65013de1:	mov    rax,QWORD PTR [rip+0x34118]        # 0x65047f00
    65013de8:	xor    edx,edx
    65013dea:	xor    ecx,ecx
    65013dec:	call   rax
    65013dee:	test   eax,eax
    65013df0:	jns    0x65013e3e
    65013df2:	mov    QWORD PTR [r12],rbx
    65013df6:	test   rbx,rbx
    65013df9:	je     0x65013e00
    65013dfb:	lock add DWORD PTR [rbx+0x10],0x1
    65013e00:	test   rbx,rbx
    65013e03:	je     0x65013e36
    65013e05:	or     edi,0xffffffff
    65013e08:	lock xadd DWORD PTR [rbx+0x10],edi
    65013e0d:	add    edi,0xffffffff
    65013e10:	jne    0x65013e36
    65013e12:	mov    rcx,QWORD PTR [rbx]
    65013e15:	test   rcx,rcx
    65013e18:	je     0x65013e20
    65013e1a:	call   QWORD PTR [rip+0x20530]        # 0x65034350
    65013e20:	mov    rcx,QWORD PTR [rbx+0x8]
    65013e24:	test   rcx,rcx
    65013e27:	je     0x65013e2e
    65013e29:	call   0x6501ef80
    65013e2e:	mov    rcx,rbx
    65013e31:	call   0x6501d300
    65013e36:	mov    rax,r12
    65013e39:	jmp    0x650146b1
    65013e3e:	mov    QWORD PTR [rsp+0x60],r14
    65013e43:	lea    r8,[rip+0x25066]        # 0x65038eb0
    65013e4a:	mov    edx,0x9
    65013e4f:	lea    rcx,[rip+0x2508a]        # 0x65038ee0
    65013e56:	call   0x6500c660
    65013e5b:	mov    rdi,rax
    65013e5e:	mov    rcx,rax
    65013e61:	call   QWORD PTR [rip+0x20261]        # 0x650340c8
    65013e67:	mov    rsi,rax
    65013e6a:	test   rax,rax
    65013e6d:	jne    0x65013e7b
    65013e6f:	mov    rcx,rdi
    65013e72:	call   QWORD PTR [rip+0x20288]        # 0x65034100
    65013e78:	mov    rsi,rax
    65013e7b:	lea    r8,[rip+0x24fe6]        # 0x65038e68
    65013e82:	mov    edx,0x10
    65013e87:	lea    rcx,[rip+0x2500a]        # 0x65038e98
    65013e8e:	call   0x6500bcb0
    65013e93:	mov    rdx,rax
    65013e96:	mov    rcx,rsi
    65013e99:	call   QWORD PTR [rip+0x20269]        # 0x65034108
    65013e9f:	lea    rcx,[rsp+0x60]
    65013ea4:	mov    QWORD PTR [rsp+0x20],rcx
    65013ea9:	lea    r9,[rip+0x210e8]        # 0x65034f98
    65013eb0:	mov    r8d,ebp
    65013eb3:	xor    edx,edx
    65013eb5:	lea    rcx,[rip+0x211ac]        # 0x65035068
    65013ebc:	call   rax
    65013ebe:	test   eax,eax
    65013ec0:	jns    0x65013f14
    65013ec2:	call   QWORD PTR [rip+0x204d0]        # 0x65034398
    65013ec8:	mov    QWORD PTR [r12],rbx
    65013ecc:	test   rbx,rbx
    65013ecf:	je     0x65013ed6
    65013ed1:	lock add DWORD PTR [rbx+0x10],0x1
    65013ed6:	test   rbx,rbx
    65013ed9:	je     0x65013f0c
    65013edb:	or     edi,0xffffffff
    65013ede:	lock xadd DWORD PTR [rbx+0x10],edi
    65013ee3:	add    edi,0xffffffff
    65013ee6:	jne    0x65013f0c
    65013ee8:	mov    rcx,QWORD PTR [rbx]
    65013eeb:	test   rcx,rcx
    65013eee:	je     0x65013ef6
    65013ef0:	call   QWORD PTR [rip+0x2045a]        # 0x65034350
    65013ef6:	mov    rcx,QWORD PTR [rbx+0x8]
    65013efa:	test   rcx,rcx
    65013efd:	je     0x65013f04
    65013eff:	call   0x6501ef80
    65013f04:	mov    rcx,rbx
    65013f07:	call   0x6501d300
    65013f0c:	mov    rax,r12
    65013f0f:	jmp    0x650146b1
    65013f14:	mov    QWORD PTR [rsp+0x68],r14
    65013f19:	lea    r8,[rip+0x24fd8]        # 0x65038ef8
    65013f20:	mov    edx,0xa
    65013f25:	lea    rcx,[rip+0x25004]        # 0x65038f30
    65013f2c:	call   0x6500c660
    65013f31:	mov    rdi,rax
    65013f34:	mov    ecx,0x18
    65013f39:	call   0x6501dbc0
    65013f3e:	mov    rsi,rax
    65013f41:	mov    QWORD PTR [rsp+0x50],rax
    65013f46:	test   rax,rax
    65013f49:	je     0x65013f74
    65013f4b:	mov    QWORD PTR [rax+0x8],r14
    65013f4f:	mov    DWORD PTR [rax+0x10],ebp
    65013f52:	mov    rcx,rdi
    65013f55:	call   QWORD PTR [rip+0x203ed]        # 0x65034348
    65013f5b:	mov    QWORD PTR [rsi],rax
    65013f5e:	test   rax,rax
    65013f61:	jne    0x65013f77
    65013f63:	test   rdi,rdi
    65013f66:	je     0x65013f77
    65013f68:	mov    ecx,0x8007000e
    65013f6d:	call   0x6502eba0
    65013f72:	jmp    0x65013f77
    65013f74:	mov    rsi,r14
    65013f77:	mov    QWORD PTR [rsp+0xe8],rsi
    65013f7f:	test   rsi,rsi
    65013f82:	jne    0x65013f8f
    65013f84:	mov    ecx,0x8007000e
    65013f89:	call   0x6502eba0
    65013f8e:	nop
    65013f8f:	test   rsi,rsi
    65013f92:	je     0x65013f99
    65013f94:	mov    rdx,QWORD PTR [rsi]
    65013f97:	jmp    0x65013f9c
    65013f99:	mov    rdx,r14
    65013f9c:	mov    rcx,QWORD PTR [rsp+0x60]
    65013fa1:	mov    rax,QWORD PTR [rcx]
    65013fa4:	lea    r8,[rsp+0x68]
    65013fa9:	mov    QWORD PTR [rsp+0x40],r8
    65013fae:	mov    QWORD PTR [rsp+0x38],r14
    65013fb3:	mov    QWORD PTR [rsp+0x30],r14
    65013fb8:	mov    DWORD PTR [rsp+0x28],r14d
    65013fbd:	mov    QWORD PTR [rsp+0x20],r14
    65013fc2:	xor    r9d,r9d
    65013fc5:	xor    r8d,r8d
    65013fc8:	call   QWORD PTR [rax+0x18]
    65013fcb:	mov    ebp,eax
    65013fcd:	or     edi,0xffffffff
    65013fd0:	test   rsi,rsi
    65013fd3:	je     0x65014004
    65013fd5:	mov    ecx,edi
    65013fd7:	lock xadd DWORD PTR [rsi+0x10],ecx
    65013fdc:	add    ecx,edi
    65013fde:	jne    0x65014004
    65013fe0:	mov    rcx,QWORD PTR [rsi]
    65013fe3:	test   rcx,rcx
    65013fe6:	je     0x65013fee
    65013fe8:	call   QWORD PTR [rip+0x20362]        # 0x65034350
    65013fee:	mov    rcx,QWORD PTR [rsi+0x8]
    65013ff2:	test   rcx,rcx
    65013ff5:	je     0x65013ffc
    65013ff7:	call   0x6501ef80
    65013ffc:	mov    rcx,rsi
    65013fff:	call   0x6501d300
    65014004:	test   ebp,ebp
    65014006:	jns    0x65014062
    65014008:	mov    rcx,QWORD PTR [rsp+0x60]
    6501400d:	mov    rax,QWORD PTR [rcx]
    65014010:	call   QWORD PTR [rax+0x10]
    65014013:	call   QWORD PTR [rip+0x2037f]        # 0x65034398
    65014019:	mov    QWORD PTR [r12],rbx
    6501401d:	test   rbx,rbx
    65014020:	je     0x65014027
    65014022:	lock add DWORD PTR [rbx+0x10],0x1
    65014027:	test   rbx,rbx
    6501402a:	je     0x6501405a
    6501402c:	lock xadd DWORD PTR [rbx+0x10],edi
    65014031:	add    edi,0xffffffff
    65014034:	jne    0x6501405a
    65014036:	mov    rcx,QWORD PTR [rbx]
    65014039:	test   rcx,rcx
    6501403c:	je     0x65014044
    6501403e:	call   QWORD PTR [rip+0x2030c]        # 0x65034350
    65014044:	mov    rcx,QWORD PTR [rbx+0x8]
    65014048:	test   rcx,rcx
    6501404b:	je     0x65014052
    6501404d:	call   0x6501ef80
    65014052:	mov    rcx,rbx
    65014055:	call   0x6501d300
    6501405a:	mov    rax,r12
    6501405d:	jmp    0x650146b1
    65014062:	call   0x650174a0
    65014067:	mov    DWORD PTR [rsp+0x38],r14d
    6501406c:	mov    QWORD PTR [rsp+0x30],r14
    65014071:	mov    DWORD PTR [rsp+0x28],0x3
    65014079:	mov    DWORD PTR [rsp+0x20],0x3
    65014081:	xor    r9d,r9d
    65014084:	xor    r8d,r8d
    65014087:	lea    edx,[r9+0xa]
    6501408b:	mov    rcx,QWORD PTR [rsp+0x68]
    65014090:	call   rax
    65014092:	test   eax,eax
    65014094:	jns    0x650140fb
    65014096:	mov    rcx,QWORD PTR [rsp+0x68]
    6501409b:	mov    rax,QWORD PTR [rcx]
    6501409e:	call   QWORD PTR [rax+0x10]
    650140a1:	mov    rcx,QWORD PTR [rsp+0x60]
    650140a6:	mov    rax,QWORD PTR [rcx]
    650140a9:	call   QWORD PTR [rax+0x10]
    650140ac:	call   QWORD PTR [rip+0x202e6]        # 0x65034398
    650140b2:	mov    QWORD PTR [r12],rbx
    650140b6:	test   rbx,rbx
    650140b9:	je     0x650140c0
    650140bb:	lock add DWORD PTR [rbx+0x10],0x1
    650140c0:	test   rbx,rbx
    650140c3:	je     0x650140f3
    650140c5:	lock xadd DWORD PTR [rbx+0x10],edi
    650140ca:	add    edi,0xffffffff
    650140cd:	jne    0x650140f3
    650140cf:	mov    rcx,QWORD PTR [rbx]
    650140d2:	test   rcx,rcx
    650140d5:	je     0x650140dd
    650140d7:	call   QWORD PTR [rip+0x20273]        # 0x65034350
    650140dd:	mov    rcx,QWORD PTR [rbx+0x8]
    650140e1:	test   rcx,rcx
    650140e4:	je     0x650140eb
    650140e6:	call   0x6501ef80
    650140eb:	mov    rcx,rbx
    650140ee:	call   0x6501d300
    650140f3:	mov    rax,r12
    650140f6:	jmp    0x650146b1
    650140fb:	mov    QWORD PTR [rsp+0x70],r14
    65014100:	lea    r8,[rip+0x24e41]        # 0x65038f48
    65014107:	mov    edx,0xe
    6501410c:	lea    rcx,[rip+0x24e5d]        # 0x65038f70
    65014113:	call   0x6500bcb0
    65014118:	mov    rsi,rax
    6501411b:	mov    ecx,0x18
    65014120:	call   0x6501dbc0
    65014125:	mov    rbp,rax
    65014128:	mov    QWORD PTR [rsp+0x80],rax
    65014130:	test   rax,rax
    65014133:	je     0x6501414e
    65014135:	mov    QWORD PTR [rax+0x8],r14
    65014139:	mov    DWORD PTR [rax+0x10],0x1
    65014140:	mov    rcx,rsi
    65014143:	call   0x6502e9f0
    65014148:	mov    QWORD PTR [rbp+0x0],rax
    6501414c:	jmp    0x65014151
    6501414e:	mov    rbp,r14
    65014151:	mov    QWORD PTR [rsp+0x80],rbp
    65014159:	test   rbp,rbp
    6501415c:	jne    0x65014169
    6501415e:	mov    ecx,0x8007000e
    65014163:	call   0x6502eba0
    65014168:	nop
    65014169:	mov    r8,r13
    6501416c:	lea    rdx,[rsp+0x88]
    65014174:	lea    rcx,[rsp+0x80]
    6501417c:	call   0x65012ca0
    65014181:	mov    r14,rax
    65014184:	lea    r8,[rip+0x24df5]        # 0x65038f80
    6501418b:	mov    edx,0x3
    65014190:	lea    rcx,[rip+0x24e15]        # 0x65038fac
    65014197:	call   0x6500bcb0
    6501419c:	mov    r13,rax
    6501419f:	mov    ecx,0x18
    650141a4:	call   0x6501dbc0
    650141a9:	mov    rsi,rax
    650141ac:	mov    QWORD PTR [rsp+0x50],rax
    650141b1:	test   rax,rax
    650141b4:	je     0x650141d2
    650141b6:	mov    QWORD PTR [rax+0x8],0x0
    650141be:	mov    DWORD PTR [rax+0x10],0x1
    650141c5:	mov    rcx,r13
    650141c8:	call   0x6502e9f0
    650141cd:	mov    QWORD PTR [rsi],rax
    650141d0:	jmp    0x650141d4
    650141d2:	xor    esi,esi
    650141d4:	mov    QWORD PTR [rsp+0xd8],rsi
    650141dc:	test   rsi,rsi
    650141df:	jne    0x650141ec
    650141e1:	mov    ecx,0x8007000e
    650141e6:	call   0x6502eba0
    650141eb:	nop
    650141ec:	mov    rax,QWORD PTR [r14]
    650141ef:	test   rax,rax
    650141f2:	je     0x650141fc
    650141f4:	mov    r8,QWORD PTR [rax]
    650141f7:	xor    r14d,r14d
    650141fa:	jmp    0x65014202
    650141fc:	xor    r14d,r14d
    650141ff:	mov    r8,r14
    65014202:	test   rsi,rsi
    65014205:	je     0x6501420c
    65014207:	mov    rdx,QWORD PTR [rsi]
    6501420a:	jmp    0x6501420f
    6501420c:	mov    rdx,r14
    6501420f:	mov    rcx,QWORD PTR [rsp+0x68]
    65014214:	mov    rax,QWORD PTR [rcx]
    65014217:	lea    r9,[rsp+0x70]
    6501421c:	mov    QWORD PTR [rsp+0x28],r9
    65014221:	mov    QWORD PTR [rsp+0x20],r14
    65014226:	mov    r9d,0x30
    6501422c:	call   QWORD PTR [rax+0xa0]
    65014232:	mov    r13d,eax
    65014235:	test   rsi,rsi
    65014238:	je     0x6501426b
    6501423a:	mov    ecx,edi
    6501423c:	lock xadd DWORD PTR [rsi+0x10],ecx
    65014241:	add    ecx,0xffffffff
    65014244:	jne    0x6501426b
    65014246:	mov    rcx,QWORD PTR [rsi]
    65014249:	test   rcx,rcx
    6501424c:	je     0x65014254
    6501424e:	call   QWORD PTR [rip+0x200fc]        # 0x65034350
    65014254:	mov    rcx,QWORD PTR [rsi+0x8]
    65014258:	test   rcx,rcx
    6501425b:	je     0x65014262
    6501425d:	call   0x6501ef80
    65014262:	mov    rcx,rsi
    65014265:	call   0x6501d300
    6501426a:	nop
    6501426b:	mov    rsi,QWORD PTR [rsp+0x88]
    65014273:	test   rsi,rsi
    65014276:	je     0x650142b5
    65014278:	mov    eax,edi
    6501427a:	lock xadd DWORD PTR [rsi+0x10],eax
    6501427f:	add    eax,0xffffffff
    65014282:	jne    0x650142ad
    65014284:	test   rsi,rsi
    65014287:	je     0x650142ad
    65014289:	mov    rcx,QWORD PTR [rsi]
    6501428c:	test   rcx,rcx
    6501428f:	je     0x65014297
    65014291:	call   QWORD PTR [rip+0x200b9]        # 0x65034350
    65014297:	mov    rcx,QWORD PTR [rsi+0x8]
    6501429b:	test   rcx,rcx
    6501429e:	je     0x650142a5
    650142a0:	call   0x6501ef80
    650142a5:	mov    rcx,rsi
    650142a8:	call   0x6501d300
    650142ad:	mov    QWORD PTR [rsp+0x88],r14
    650142b5:	test   rbp,rbp
    650142b8:	je     0x650142eb
    650142ba:	mov    eax,edi
    650142bc:	lock xadd DWORD PTR [rbp+0x10],eax
    650142c1:	add    eax,0xffffffff
    650142c4:	jne    0x650142eb
    650142c6:	mov    rcx,QWORD PTR [rbp+0x0]
    650142ca:	test   rcx,rcx
    650142cd:	je     0x650142d5
    650142cf:	call   QWORD PTR [rip+0x2007b]        # 0x65034350
    650142d5:	mov    rcx,QWORD PTR [rbp+0x8]
    650142d9:	test   rcx,rcx
    650142dc:	je     0x650142e3
    650142de:	call   0x6501ef80
    650142e3:	mov    rcx,rbp
    650142e6:	call   0x6501d300
    650142eb:	test   r13d,r13d
    650142ee:	jns    0x65014355
    650142f0:	mov    rcx,QWORD PTR [rsp+0x68]
    650142f5:	mov    rax,QWORD PTR [rcx]
    650142f8:	call   QWORD PTR [rax+0x10]
    650142fb:	mov    rcx,QWORD PTR [rsp+0x60]
    65014300:	mov    rax,QWORD PTR [rcx]
    65014303:	call   QWORD PTR [rax+0x10]
    65014306:	call   QWORD PTR [rip+0x2008c]        # 0x65034398
    6501430c:	mov    QWORD PTR [r12],rbx
    65014310:	test   rbx,rbx
    65014313:	je     0x6501431a
    65014315:	lock add DWORD PTR [rbx+0x10],0x1
    6501431a:	test   rbx,rbx
    6501431d:	je     0x6501434d
    6501431f:	lock xadd DWORD PTR [rbx+0x10],edi
    65014324:	add    edi,0xffffffff
    65014327:	jne    0x6501434d
    65014329:	mov    rcx,QWORD PTR [rbx]
    6501432c:	test   rcx,rcx
    6501432f:	je     0x65014337
    65014331:	call   QWORD PTR [rip+0x20019]        # 0x65034350
    65014337:	mov    rcx,QWORD PTR [rbx+0x8]
    6501433b:	test   rcx,rcx
    6501433e:	je     0x65014345
    65014340:	call   0x6501ef80
    65014345:	mov    rcx,rbx
    65014348:	call   0x6501d300
    6501434d:	mov    rax,r12
    65014350:	jmp    0x650146b1
    65014355:	mov    DWORD PTR [rsp+0x138],r14d
    6501435d:	mov    rcx,QWORD PTR [rsp+0x70]
    65014362:	test   rcx,rcx
    65014365:	je     0x6501462c
    6501436b:	xchg   ax,ax
    6501436d:	data16 xchg ax,ax
    65014370:	mov    rax,QWORD PTR [rcx]
    65014373:	lea    rdx,[rsp+0x138]
    6501437b:	mov    QWORD PTR [rsp+0x20],rdx
    65014380:	lea    r9,[rsp+0x78]
    65014385:	mov    r8d,0x1
    6501438b:	mov    edx,edi
    6501438d:	call   QWORD PTR [rax+0x20]
    65014390:	cmp    DWORD PTR [rsp+0x138],0x0
    65014398:	je     0x6501462c
    6501439e:	mov    rax,QWORD PTR [r15]
    650143a1:	test   rax,rax
    650143a4:	je     0x650143ab
    650143a6:	mov    rdx,QWORD PTR [rax]
    650143a9:	jmp    0x650143ae
    650143ab:	mov    rdx,r14
    650143ae:	mov    rcx,QWORD PTR [rsp+0x78]
    650143b3:	mov    rax,QWORD PTR [rcx]
    650143b6:	mov    QWORD PTR [rsp+0x28],r14
    650143bb:	mov    QWORD PTR [rsp+0x20],r14
    650143c0:	lea    r9,[rsp+0xc0]
    650143c8:	xor    r8d,r8d
    650143cb:	call   QWORD PTR [rax+0x20]
    650143ce:	test   eax,eax
    650143d0:	js     0x650143dd
    650143d2:	cmp    WORD PTR [rsp+0xc0],0x8
    650143db:	je     0x65014409
    650143dd:	lea    rcx,[rsp+0xc0]
    650143e5:	call   QWORD PTR [rip+0x1ff2d]        # 0x65034318
    650143eb:	mov    rcx,QWORD PTR [rsp+0x78]
    650143f0:	mov    rax,QWORD PTR [rcx]
    650143f3:	call   QWORD PTR [rax+0x10]
    650143f6:	mov    rcx,QWORD PTR [rsp+0x70]
    650143fb:	test   rcx,rcx
    650143fe:	je     0x65014625
    65014404:	jmp    0x65014370
    65014409:	lea    rcx,[rsp+0x90]
    65014411:	call   QWORD PTR [rip+0x1ff29]        # 0x65034340
    65014417:	lea    rdx,[rsp+0xc0]
    6501441f:	lea    rcx,[rsp+0x90]
    65014427:	call   QWORD PTR [rip+0x1fefb]        # 0x65034328
    6501442d:	test   eax,eax
    6501442f:	jns    0x65014439
    65014431:	mov    ecx,eax
    65014433:	call   0x6502eba0
    65014438:	nop
    65014439:	cmp    WORD PTR [rsp+0x90],0x8
    65014442:	jne    0x6501450f
    65014448:	mov    rsi,QWORD PTR [rsp+0x98]
    65014450:	test   rsi,rsi
    65014453:	je     0x65014471
    65014455:	test   rbx,rbx
    65014458:	je     0x6501445f
    6501445a:	mov    rax,QWORD PTR [rbx]
    6501445d:	jmp    0x65014462
    6501445f:	mov    rax,r14
    65014462:	cmp    rax,rsi
    65014465:	jne    0x65014471
    65014467:	mov    rbx,QWORD PTR [rsp+0x58]
    6501446c:	jmp    0x65014615
    65014471:	test   rbx,rbx
    65014474:	je     0x650144ab
    65014476:	mov    eax,edi
    65014478:	lock xadd DWORD PTR [rbx+0x10],eax
    6501447d:	add    eax,0xffffffff
    65014480:	jne    0x650144a6
    65014482:	mov    rcx,QWORD PTR [rbx]
    65014485:	test   rcx,rcx
    65014488:	je     0x65014490
    6501448a:	call   QWORD PTR [rip+0x1fec0]        # 0x65034350
    65014490:	mov    rcx,QWORD PTR [rbx+0x8]
    65014494:	test   rcx,rcx
    65014497:	je     0x6501449e
    65014499:	call   0x6501ef80
    6501449e:	mov    rcx,rbx
    650144a1:	call   0x6501d300
    650144a6:	mov    QWORD PTR [rsp+0x58],r14
    650144ab:	mov    ecx,0x18
    650144b0:	call   0x6501dbc0
    650144b5:	mov    rbx,rax
    650144b8:	mov    QWORD PTR [rsp+0x50],rax
    650144bd:	test   rax,rax
    650144c0:	je     0x650144ef
    650144c2:	mov    QWORD PTR [rax+0x8],r14
    650144c6:	mov    DWORD PTR [rax+0x10],0x1
    650144cd:	mov    rcx,rsi
    650144d0:	call   QWORD PTR [rip+0x1fe72]        # 0x65034348
    650144d6:	mov    QWORD PTR [rbx],rax
    650144d9:	test   rax,rax
    650144dc:	jne    0x650144f2
    650144de:	test   rsi,rsi
    650144e1:	je     0x650144f2
    650144e3:	mov    ecx,0x8007000e
    650144e8:	call   0x6502eba0
    650144ed:	jmp    0x650144f2
    650144ef:	mov    rbx,r14
    650144f2:	mov    QWORD PTR [rsp+0x58],rbx
    650144f7:	test   rbx,rbx
    650144fa:	jne    0x65014615
    65014500:	mov    ecx,0x8007000e
    65014505:	call   0x6502eba0
    6501450a:	jmp    0x65014615
    6501450f:	lea    rcx,[rsp+0xa8]
    65014517:	call   QWORD PTR [rip+0x1fe23]        # 0x65034340
    6501451d:	nop
    6501451e:	mov    r9w,0x8
    65014523:	xor    r8d,r8d
    65014526:	lea    rdx,[rsp+0x90]
    6501452e:	lea    rcx,[rsp+0xa8]
    65014536:	call   QWORD PTR [rip+0x1fdfc]        # 0x65034338
    6501453c:	test   eax,eax
    6501453e:	jns    0x65014547
    65014540:	mov    ecx,eax
    65014542:	call   0x6502eba0
    65014547:	mov    rsi,QWORD PTR [rsp+0xb0]
    6501454f:	test   rsi,rsi
    65014552:	je     0x65014570
    65014554:	test   rbx,rbx
    65014557:	je     0x6501455e
    65014559:	mov    rax,QWORD PTR [rbx]
    6501455c:	jmp    0x65014561
    6501455e:	mov    rax,r14
    65014561:	cmp    rax,rsi
    65014564:	jne    0x65014570
    65014566:	mov    rbx,QWORD PTR [rsp+0x58]
    6501456b:	jmp    0x65014606
    65014570:	test   rbx,rbx
    65014573:	je     0x650145aa
    65014575:	mov    eax,edi
    65014577:	lock xadd DWORD PTR [rbx+0x10],eax
    6501457c:	add    eax,0xffffffff
    6501457f:	jne    0x650145a5
    65014581:	mov    rcx,QWORD PTR [rbx]
    65014584:	test   rcx,rcx
    65014587:	je     0x6501458f
    65014589:	call   QWORD PTR [rip+0x1fdc1]        # 0x65034350
    6501458f:	mov    rcx,QWORD PTR [rbx+0x8]
    65014593:	test   rcx,rcx
    65014596:	je     0x6501459d
    65014598:	call   0x6501ef80
    6501459d:	mov    rcx,rbx
    650145a0:	call   0x6501d300
    650145a5:	mov    QWORD PTR [rsp+0x58],r14
    650145aa:	mov    ecx,0x18
    650145af:	call   0x6501dbc0
    650145b4:	mov    rbx,rax
    650145b7:	mov    QWORD PTR [rsp+0x50],rax
    650145bc:	test   rax,rax
    650145bf:	je     0x650145ee
    650145c1:	mov    QWORD PTR [rax+0x8],r14
    650145c5:	mov    DWORD PTR [rax+0x10],0x1
    650145cc:	mov    rcx,rsi
    650145cf:	call   QWORD PTR [rip+0x1fd73]        # 0x65034348
    650145d5:	mov    QWORD PTR [rbx],rax
    650145d8:	test   rax,rax
    650145db:	jne    0x650145f1
    650145dd:	test   rsi,rsi
    650145e0:	je     0x650145f1
    650145e2:	mov    ecx,0x8007000e
    650145e7:	call   0x6502eba0
    650145ec:	jmp    0x650145f1
    650145ee:	mov    rbx,r14
    650145f1:	mov    QWORD PTR [rsp+0x58],rbx
    650145f6:	test   rbx,rbx
    650145f9:	jne    0x65014606
    650145fb:	mov    ecx,0x8007000e
    65014600:	call   0x6502eba0
    65014605:	nop
    65014606:	lea    rcx,[rsp+0xa8]
    6501460e:	call   QWORD PTR [rip+0x1fd04]        # 0x65034318
    65014614:	nop
    65014615:	lea    rcx,[rsp+0x90]
    6501461d:	call   QWORD PTR [rip+0x1fcf5]        # 0x65034318
    65014623:	jmp    0x65014631
    65014625:	mov    rbx,QWORD PTR [rsp+0x58]
    6501462a:	jmp    0x65014631
    6501462c:	mov    rbx,QWORD PTR [rsp+0x58]
    65014631:	mov    rcx,QWORD PTR [rsp+0x68]
    65014636:	mov    rax,QWORD PTR [rcx]
    65014639:	call   QWORD PTR [rax+0x10]
    6501463c:	mov    rcx,QWORD PTR [rsp+0x60]
    65014641:	mov    rax,QWORD PTR [rcx]
    65014644:	call   QWORD PTR [rax+0x10]
    65014647:	mov    rcx,QWORD PTR [rsp+0x70]
    6501464c:	mov    rax,QWORD PTR [rcx]
    6501464f:	call   QWORD PTR [rax+0x10]
    65014652:	mov    rcx,QWORD PTR [rsp+0x78]
    65014657:	mov    rax,QWORD PTR [rcx]
    6501465a:	call   QWORD PTR [rax+0x10]
    6501465d:	call   QWORD PTR [rip+0x1fd35]        # 0x65034398
    65014663:	mov    QWORD PTR [r12],rbx
    65014667:	test   rbx,rbx
    6501466a:	je     0x65014676
    6501466c:	lock add DWORD PTR [rbx+0x10],0x1
    65014671:	mov    rbx,QWORD PTR [rsp+0x58]
    65014676:	test   rbx,rbx
    65014679:	je     0x650146ae
    6501467b:	lock xadd DWORD PTR [rbx+0x10],edi
    65014680:	add    edi,0xffffffff
    65014683:	jne    0x650146ae
    65014685:	mov    rbx,QWORD PTR [rsp+0x58]
    6501468a:	mov    rcx,QWORD PTR [rbx]
    6501468d:	test   rcx,rcx
    65014690:	je     0x65014698
    65014692:	call   QWORD PTR [rip+0x1fcb8]        # 0x65034350
    65014698:	mov    rcx,QWORD PTR [rbx+0x8]
    6501469c:	test   rcx,rcx
    6501469f:	je     0x650146a6
    650146a1:	call   0x6501ef80
    650146a6:	mov    rcx,rbx
    650146a9:	call   0x6501d300
    650146ae:	mov    rax,r12
    650146b1:	lea    r11,[rsp+0xf0]
    650146b9:	mov    rbx,QWORD PTR [r11+0x30]
    650146bd:	mov    rbp,QWORD PTR [r11+0x38]
    650146c1:	mov    rsi,QWORD PTR [r11+0x40]
    650146c5:	mov    rsp,r11
    650146c8:	pop    r15
    650146ca:	pop    r14
    650146cc:	pop    r13
    650146ce:	pop    r12
    650146d0:	pop    rdi
    650146d1:	ret    
    650146d2:	int3   
    650146d3:	int3   
    650146d4:	int3   
    650146d5:	int3   
    650146d6:	int3   
    650146d7:	int3   
    650146d8:	int3   
    650146d9:	int3   
    650146da:	int3   
    650146db:	int3   
    650146dc:	int3   
    650146dd:	int3   
    650146de:	int3   
    650146df:	int3   
    650146e0:	rex push rbp
    650146e2:	sub    rsp,0x20
    650146e6:	mov    rbp,rdx
    650146e9:	mov    rcx,QWORD PTR [rbp+0x80]
    650146f0:	call   0x6501d300
    650146f5:	add    rsp,0x20
    650146f9:	pop    rbp
    650146fa:	ret    
    650146fb:	int3   
    650146fc:	int3   
    650146fd:	int3   
    650146fe:	int3   
    650146ff:	int3   
    65014700:	rex push rbp
    65014702:	sub    rsp,0x20
    65014706:	mov    rbp,rdx
    65014709:	lea    rcx,[rbp+0x58]
    6501470d:	call   0x65012c40
    65014712:	add    rsp,0x20
    65014716:	pop    rbp
    65014717:	ret    
    65014718:	int3   
    65014719:	int3   
    6501471a:	int3   
    6501471b:	int3   
    6501471c:	int3   
    6501471d:	int3   
    6501471e:	int3   
    6501471f:	int3   
    65014720:	rex push rbp
    65014722:	sub    rsp,0x20
    65014726:	mov    rbp,rdx
    65014729:	mov    rcx,QWORD PTR [rbp+0x50]
    6501472d:	call   0x6501d300
    65014732:	add    rsp,0x20
    65014736:	pop    rbp
    65014737:	ret    
    65014738:	int3   
    65014739:	int3   
    6501473a:	int3   
    6501473b:	int3   
    6501473c:	int3   
    6501473d:	int3   
    6501473e:	int3   
    6501473f:	int3   
    65014740:	rex push rbp
    65014742:	sub    rsp,0x20
    65014746:	mov    rbp,rdx
    65014749:	lea    rcx,[rbp+0xe8]
    65014750:	call   0x65012c40
    65014755:	add    rsp,0x20
    65014759:	pop    rbp
    6501475a:	ret    
    6501475b:	int3   
    6501475c:	int3   
    6501475d:	int3   
    6501475e:	int3   
    6501475f:	int3   
    65014760:	rex push rbp
    65014762:	sub    rsp,0x20
    65014766:	mov    rbp,rdx
    65014769:	mov    rcx,QWORD PTR [rbp+0x80]
    65014770:	call   0x6501d300
    65014775:	add    rsp,0x20
    65014779:	pop    rbp
    6501477a:	ret    
    6501477b:	int3   
    6501477c:	int3   
    6501477d:	int3   
    6501477e:	int3   
    6501477f:	int3   
    65014780:	rex push rbp
    65014782:	sub    rsp,0x20
    65014786:	mov    rbp,rdx
    65014789:	lea    rcx,[rbp+0x80]
    65014790:	call   0x65012c40
    65014795:	add    rsp,0x20
    65014799:	pop    rbp
    6501479a:	ret    
    6501479b:	int3   
    6501479c:	int3   
    6501479d:	int3   
    6501479e:	int3   
    6501479f:	int3   
    650147a0:	rex push rbp
    650147a2:	sub    rsp,0x20
    650147a6:	mov    rbp,rdx
    650147a9:	lea    rcx,[rbp+0x88]
    650147b0:	call   0x65012c40
    650147b5:	add    rsp,0x20
    650147b9:	pop    rbp
    650147ba:	ret    
    650147bb:	int3   
    650147bc:	int3   
    650147bd:	int3   
    650147be:	int3   
    650147bf:	int3   
    650147c0:	rex push rbp
    650147c2:	sub    rsp,0x20
    650147c6:	mov    rbp,rdx
    650147c9:	mov    rcx,QWORD PTR [rbp+0x50]
    650147cd:	call   0x6501d300
    650147d2:	add    rsp,0x20
    650147d6:	pop    rbp
    650147d7:	ret    
    650147d8:	int3   
    650147d9:	int3   
    650147da:	int3   
    650147db:	int3   
    650147dc:	int3   
    650147dd:	int3   
    650147de:	int3   
    650147df:	int3   
    650147e0:	rex push rbp
    650147e2:	sub    rsp,0x20
    650147e6:	mov    rbp,rdx
    650147e9:	lea    rcx,[rbp+0xd8]
    650147f0:	call   0x65012c40
    650147f5:	add    rsp,0x20
    650147f9:	pop    rbp
    650147fa:	ret    
    650147fb:	int3   
    650147fc:	int3   
    650147fd:	int3   
    650147fe:	int3   
    650147ff:	int3   
    65014800:	rex push rbp
    65014802:	sub    rsp,0x20
    65014806:	mov    rbp,rdx
    65014809:	lea    rcx,[rbp+0x90]
    65014810:	call   0x65012ec0
    65014815:	add    rsp,0x20
    65014819:	pop    rbp
    6501481a:	ret    
    6501481b:	int3   
    6501481c:	int3   
    6501481d:	int3   
    6501481e:	int3   
    6501481f:	int3   
    65014820:	rex push rbp
    65014822:	sub    rsp,0x20
    65014826:	mov    rbp,rdx
    65014829:	mov    rcx,QWORD PTR [rbp+0x50]
    6501482d:	call   0x6501d300
    65014832:	add    rsp,0x20
    65014836:	pop    rbp
    65014837:	ret    
    65014838:	int3   
    65014839:	int3   
    6501483a:	int3   
    6501483b:	int3   
    6501483c:	int3   
    6501483d:	int3   
    6501483e:	int3   
    6501483f:	int3   
    65014840:	rex push rbp
    65014842:	sub    rsp,0x20
    65014846:	mov    rbp,rdx
    65014849:	lea    rcx,[rbp+0xa8]
    65014850:	call   0x65012ec0
    65014855:	add    rsp,0x20
    65014859:	pop    rbp
    6501485a:	ret    
    6501485b:	int3   
    6501485c:	int3   
    6501485d:	int3   
    6501485e:	int3   
    6501485f:	int3   
    65014860:	rex push rbp
    65014862:	sub    rsp,0x20
    65014866:	mov    rbp,rdx
    65014869:	mov    rcx,QWORD PTR [rbp+0x50]
    6501486d:	call   0x6501d300
    65014872:	add    rsp,0x20
    65014876:	pop    rbp
    65014877:	ret    
    65014878:	int3   
    65014879:	int3   
    6501487a:	int3   
    6501487b:	int3   
    6501487c:	int3   
    6501487d:	int3   
    6501487e:	int3   
    6501487f:	int3   
    65014880:	mov    QWORD PTR [rsp+0x8],rcx
    65014885:	push   rbx
    65014886:	push   rbp
    65014887:	push   rsi
    65014888:	push   rdi
    65014889:	push   r12
    6501488b:	sub    rsp,0x30
    6501488f:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    65014898:	mov    r12,rcx
    6501489b:	mov    DWORD PTR [rsp+0x68],0x0
    650148a3:	call   QWORD PTR [rip+0x2e7ef]        # 0x65043098
    650148a9:	lea    r8,[rip+0x24700]        # 0x65038fb0
    650148b0:	mov    edx,0xc
    650148b5:	lea    rcx,[rip+0x2471c]        # 0x65038fd8
    650148bc:	call   0x6500c660
    650148c1:	mov    rdi,rax
    650148c4:	mov    ecx,0x18
    650148c9:	call   0x6501dbc0
    650148ce:	mov    rbx,rax
    650148d1:	mov    QWORD PTR [rsp+0x68],rax
    650148d6:	test   rax,rax
    650148d9:	je     0x6501490c
    650148db:	mov    QWORD PTR [rax+0x8],0x0
    650148e3:	mov    DWORD PTR [rax+0x10],0x1
    650148ea:	mov    rcx,rdi
    650148ed:	call   QWORD PTR [rip+0x1fa55]        # 0x65034348
    650148f3:	mov    QWORD PTR [rbx],rax
    650148f6:	test   rax,rax
    650148f9:	jne    0x6501490e
    650148fb:	test   rdi,rdi
    650148fe:	je     0x6501490e
    65014900:	mov    ecx,0x8007000e
    65014905:	call   0x6502eba0
    6501490a:	jmp    0x6501490e
    6501490c:	xor    ebx,ebx
    6501490e:	mov    QWORD PTR [rsp+0x78],rbx
    65014913:	test   rbx,rbx
    65014916:	jne    0x65014923
    65014918:	mov    ecx,0x8007000e
    6501491d:	call   0x6502eba0
    65014922:	nop
    65014923:	lea    r8,[rip+0x246ce]        # 0x65038ff8
    6501492a:	mov    edx,0x15
    6501492f:	lea    rcx,[rip+0x246ea]        # 0x65039020
    65014936:	call   0x6500c660
    6501493b:	mov    rsi,rax
    6501493e:	mov    ecx,0x18
    65014943:	call   0x6501dbc0
    65014948:	mov    rdi,rax
    6501494b:	mov    QWORD PTR [rsp+0x68],rax
    65014950:	test   rax,rax
    65014953:	je     0x65014986
    65014955:	mov    QWORD PTR [rax+0x8],0x0
    6501495d:	mov    DWORD PTR [rax+0x10],0x1
    65014964:	mov    rcx,rsi
    65014967:	call   QWORD PTR [rip+0x1f9db]        # 0x65034348
    6501496d:	mov    QWORD PTR [rdi],rax
    65014970:	test   rax,rax
    65014973:	jne    0x65014988
    65014975:	test   rsi,rsi
    65014978:	je     0x65014988
    6501497a:	mov    ecx,0x8007000e
    6501497f:	call   0x6502eba0
    65014984:	jmp    0x65014988
    65014986:	xor    edi,edi
    65014988:	mov    QWORD PTR [rsp+0x20],rdi
    6501498d:	test   rdi,rdi
    65014990:	jne    0x6501499d
    65014992:	mov    ecx,0x8007000e
    65014997:	call   0x6502eba0
    6501499c:	nop
    6501499d:	lea    r8,[rsp+0x78]
    650149a2:	lea    rdx,[rsp+0x20]
    650149a7:	lea    rcx,[rsp+0x70]
    650149ac:	call   0x65013cd0
    650149b1:	nop
    650149b2:	or     rsi,0xffffffffffffffff
    650149b6:	test   rdi,rdi
    650149b9:	je     0x650149eb
    650149bb:	mov    eax,esi
    650149bd:	lock xadd DWORD PTR [rdi+0x10],eax
    650149c2:	add    eax,esi
    650149c4:	jne    0x650149eb
    650149c6:	mov    rcx,QWORD PTR [rdi]
    650149c9:	test   rcx,rcx
    650149cc:	je     0x650149d4
    650149ce:	call   QWORD PTR [rip+0x1f97c]        # 0x65034350
    650149d4:	mov    rcx,QWORD PTR [rdi+0x8]
    650149d8:	test   rcx,rcx
    650149db:	je     0x650149e2
    650149dd:	call   0x6501ef80
    650149e2:	mov    rcx,rdi
    650149e5:	call   0x6501d300
    650149ea:	nop
    650149eb:	test   rbx,rbx
    650149ee:	je     0x65014a20
    650149f0:	mov    eax,esi
    650149f2:	lock xadd DWORD PTR [rbx+0x10],eax
    650149f7:	add    eax,0xffffffff
    650149fa:	jne    0x65014a20
    650149fc:	mov    rcx,QWORD PTR [rbx]
    650149ff:	test   rcx,rcx
    65014a02:	je     0x65014a0a
    65014a04:	call   QWORD PTR [rip+0x1f946]        # 0x65034350
    65014a0a:	mov    rcx,QWORD PTR [rbx+0x8]
    65014a0e:	test   rcx,rcx
    65014a11:	je     0x65014a18
    65014a13:	call   0x6501ef80
    65014a18:	mov    rcx,rbx
    65014a1b:	call   0x6501d300
    65014a20:	mov    rbx,QWORD PTR [rsp+0x70]
    65014a25:	test   rbx,rbx
    65014a28:	je     0x65014a2f
    65014a2a:	mov    rbp,QWORD PTR [rbx]
    65014a2d:	jmp    0x65014a31
    65014a2f:	xor    ebp,ebp
    65014a31:	lea    rcx,[rip+0x2e668]        # 0x650430a0
    65014a38:	mov    rax,QWORD PTR [rip+0x2e661]        # 0x650430a0
    65014a3f:	call   QWORD PTR [rax+0x18]
    65014a42:	add    rax,0x18
    65014a46:	mov    QWORD PTR [r12],rax
    65014a4a:	test   rbp,rbp
    65014a4d:	je     0x65014a8d
    65014a4f:	test   rbp,0xffffffffffff0000
    65014a56:	jne    0x65014a79
    65014a58:	movzx  edi,bp
    65014a5b:	xor    edx,edx
    65014a5d:	mov    ecx,edi
    65014a5f:	call   0x650026f0
    65014a64:	test   rax,rax
    65014a67:	je     0x65014a9e
    65014a69:	mov    r8d,edi
    65014a6c:	mov    rdx,rax
    65014a6f:	mov    rcx,r12
    65014a72:	call   0x65003e00
    65014a77:	jmp    0x65014a9e
    65014a79:	xor    eax,eax
    65014a7b:	mov    rcx,rsi
    65014a7e:	mov    rdi,rbp
    65014a81:	repnz scas ax,WORD PTR es:[rdi]
    65014a84:	not    rcx
    65014a87:	sub    rcx,0x1
    65014a8b:	jmp    0x65014a8f
    65014a8d:	xor    ecx,ecx
    65014a8f:	mov    r8d,ecx
    65014a92:	mov    rdx,rbp
    65014a95:	mov    rcx,r12
    65014a98:	call   0x65003f90
    65014a9d:	nop
    65014a9e:	test   rbx,rbx
    65014aa1:	je     0x65014ae0
    65014aa3:	lock xadd DWORD PTR [rbx+0x10],esi
    65014aa8:	add    esi,0xffffffff
    65014aab:	jne    0x65014adb
    65014aad:	mov    rdi,QWORD PTR [rsp+0x70]
    65014ab2:	mov    rcx,QWORD PTR [rdi]
    65014ab5:	test   rcx,rcx
    65014ab8:	je     0x65014ac0
    65014aba:	call   QWORD PTR [rip+0x1f890]        # 0x65034350
    65014ac0:	mov    rcx,QWORD PTR [rdi+0x8]
    65014ac4:	test   rcx,rcx
    65014ac7:	je     0x65014ace
    65014ac9:	call   0x6501ef80
    65014ace:	mov    rcx,rdi
    65014ad1:	call   0x6501d300
    65014ad6:	mov    rax,r12
    65014ad9:	jmp    0x65014ae3
    65014adb:	mov    rax,r12
    65014ade:	jmp    0x65014ae3
    65014ae0:	mov    rax,r12
    65014ae3:	add    rsp,0x30
    65014ae7:	pop    r12
    65014ae9:	pop    rdi
    65014aea:	pop    rsi
    65014aeb:	pop    rbp
    65014aec:	pop    rbx
    65014aed:	ret    
    65014aee:	int3   
    65014aef:	int3   
    65014af0:	rex push rbp
    65014af2:	sub    rsp,0x20
    65014af6:	mov    rbp,rdx
    65014af9:	mov    rcx,QWORD PTR [rbp+0x68]
    65014afd:	call   0x6501d300
    65014b02:	add    rsp,0x20
    65014b06:	pop    rbp
    65014b07:	ret    
    65014b08:	int3   
    65014b09:	int3   
    65014b0a:	int3   
    65014b0b:	int3   
    65014b0c:	int3   
    65014b0d:	int3   
    65014b0e:	int3   
    65014b0f:	int3   
    65014b10:	rex push rbp
    65014b12:	sub    rsp,0x20
    65014b16:	mov    rbp,rdx
    65014b19:	lea    rcx,[rbp+0x78]
    65014b1d:	call   0x65012c40
    65014b22:	add    rsp,0x20
    65014b26:	pop    rbp
    65014b27:	ret    
    65014b28:	int3   
    65014b29:	int3   
    65014b2a:	int3   
    65014b2b:	int3   
    65014b2c:	int3   
    65014b2d:	int3   
    65014b2e:	int3   
    65014b2f:	int3   
    65014b30:	rex push rbp
    65014b32:	sub    rsp,0x20
    65014b36:	mov    rbp,rdx
    65014b39:	mov    rcx,QWORD PTR [rbp+0x68]
    65014b3d:	call   0x6501d300
    65014b42:	add    rsp,0x20
    65014b46:	pop    rbp
    65014b47:	ret    
    65014b48:	int3   
    65014b49:	int3   
    65014b4a:	int3   
    65014b4b:	int3   
    65014b4c:	int3   
    65014b4d:	int3   
    65014b4e:	int3   
    65014b4f:	int3   
    65014b50:	rex push rbp
    65014b52:	sub    rsp,0x20
    65014b56:	mov    rbp,rdx
    65014b59:	lea    rcx,[rbp+0x20]
    65014b5d:	call   0x65012c40
    65014b62:	add    rsp,0x20
    65014b66:	pop    rbp
    65014b67:	ret    
    65014b68:	int3   
    65014b69:	int3   
    65014b6a:	int3   
    65014b6b:	int3   
    65014b6c:	int3   
    65014b6d:	int3   
    65014b6e:	int3   
    65014b6f:	int3   
    65014b70:	rex push rbp
    65014b72:	sub    rsp,0x20
    65014b76:	mov    rbp,rdx
    65014b79:	lea    rcx,[rbp+0x70]
    65014b7d:	call   0x65012c40
    65014b82:	add    rsp,0x20
    65014b86:	pop    rbp
    65014b87:	ret    
    65014b88:	int3   
    65014b89:	int3   
    65014b8a:	int3   
    65014b8b:	int3   
    65014b8c:	int3   
    65014b8d:	int3   
    65014b8e:	int3   
    65014b8f:	int3   
    65014b90:	rex push rbp
    65014b92:	sub    rsp,0x20
    65014b96:	mov    rbp,rdx
    65014b99:	mov    rcx,QWORD PTR [rbp+0x60]
    65014b9d:	call   0x65002100
    65014ba2:	add    rsp,0x20
    65014ba6:	pop    rbp
    65014ba7:	ret    
    65014ba8:	int3   
    65014ba9:	int3   
    65014baa:	int3   
    65014bab:	int3   
    65014bac:	int3   
    65014bad:	int3   
    65014bae:	int3   
    65014baf:	int3   
    65014bb0:	mov    rcx,QWORD PTR [rcx]
    65014bb3:	jmp    0x6501d300
    65014bb8:	int3   
    65014bb9:	int3   
    65014bba:	int3   
    65014bbb:	int3   
    65014bbc:	int3   
    65014bbd:	int3   
    65014bbe:	int3   
    65014bbf:	int3   
    65014bc0:	mov    r11,rsp
    65014bc3:	push   rbx
    65014bc4:	push   rsi
    65014bc5:	push   rdi
    65014bc6:	push   r12
    65014bc8:	push   r13
    65014bca:	push   r14
    65014bcc:	push   r15
    65014bce:	sub    rsp,0xb0
    65014bd5:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
    65014bde:	mov    rax,QWORD PTR [rip+0x2e53b]        # 0x65043120
    65014be5:	xor    rax,rsp
    65014be8:	mov    QWORD PTR [rsp+0xa0],rax
    65014bf0:	mov    rax,r9
    65014bf3:	mov    rbx,rdx
    65014bf6:	mov    rsi,rcx
    65014bf9:	mov    QWORD PTR [rsp+0x48],rcx
    65014bfe:	mov    QWORD PTR [rsp+0x40],rdx
    65014c03:	mov    QWORD PTR [r11-0x50],0xf
    65014c0b:	xor    r15d,r15d
    65014c0e:	mov    QWORD PTR [r11-0x58],r15
    65014c12:	mov    BYTE PTR [r11-0x68],r15b
    65014c16:	or     r9,0xffffffffffffffff
    65014c1a:	xor    r8d,r8d
    65014c1d:	mov    rdx,rax
    65014c20:	lea    rcx,[r11-0x70]
    65014c24:	call   0x65001e20
    65014c29:	nop
    65014c2a:	mov    r8,QWORD PTR [rsi+0x8]
    65014c2e:	test   r8,r8
    65014c31:	jne    0x65014c42
    65014c33:	mov    rdi,r15
    65014c36:	movabs r12,0x6666666666666667
    65014c40:	jmp    0x65014c6a
    65014c42:	mov    rcx,QWORD PTR [rsi+0x18]
    65014c46:	sub    rcx,r8
    65014c49:	movabs r12,0x6666666666666667
    65014c53:	mov    rax,r12
    65014c56:	imul   rcx
    65014c59:	mov    rdi,rdx
    65014c5c:	sar    rdi,0x4
    65014c60:	mov    rax,rdi
    65014c63:	shr    rax,0x3f
    65014c67:	add    rdi,rax
    65014c6a:	test   r8,r8
    65014c6d:	jne    0x65014c74
    65014c6f:	mov    rdx,r15
    65014c72:	jmp    0x65014c8f
    65014c74:	mov    rcx,QWORD PTR [rsi+0x10]
    65014c78:	sub    rcx,r8
    65014c7b:	mov    rax,r12
    65014c7e:	imul   rcx
    65014c81:	sar    rdx,0x4
    65014c85:	mov    rax,rdx
    65014c88:	shr    rax,0x3f
    65014c8c:	add    rdx,rax
    65014c8f:	movabs r9,0x666666666666666
    65014c99:	mov    rax,r9
    65014c9c:	sub    rax,rdx
    65014c9f:	cmp    rax,0x1
    65014ca3:	jae    0x65014cab
    65014ca5:	call   0x65015140
    65014caa:	int3   
    65014cab:	test   r8,r8
    65014cae:	jne    0x65014cb5
    65014cb0:	mov    rdx,r15
    65014cb3:	jmp    0x65014cd0
    65014cb5:	mov    rcx,QWORD PTR [rsi+0x10]
    65014cb9:	sub    rcx,r8
    65014cbc:	mov    rax,r12
    65014cbf:	imul   rcx
    65014cc2:	sar    rdx,0x4
    65014cc6:	mov    rax,rdx
    65014cc9:	shr    rax,0x3f
    65014ccd:	add    rdx,rax
    65014cd0:	lea    rax,[rdx+0x1]
    65014cd4:	cmp    rdi,rax
    65014cd7:	jae    0x65014ebc
    65014cdd:	mov    rax,rdi
    65014ce0:	shr    rax,1
    65014ce3:	sub    r9,rax
    65014ce6:	cmp    r9,rdi
    65014ce9:	jae    0x65014cf0
    65014ceb:	mov    rdi,r15
    65014cee:	jmp    0x65014cf3
    65014cf0:	add    rdi,rax
    65014cf3:	test   r8,r8
    65014cf6:	jne    0x65014cfd
    65014cf8:	mov    rdx,r15
    65014cfb:	jmp    0x65014d18
    65014cfd:	mov    rcx,QWORD PTR [rsi+0x10]
    65014d01:	sub    rcx,r8
    65014d04:	mov    rax,r12
    65014d07:	imul   rcx
    65014d0a:	sar    rdx,0x4
    65014d0e:	mov    rax,rdx
    65014d11:	shr    rax,0x3f
    65014d15:	add    rdx,rax
    65014d18:	lea    rax,[rdx+0x1]
    65014d1c:	cmp    rdi,rax
    65014d1f:	jae    0x65014d4a
    65014d21:	test   r8,r8
    65014d24:	jne    0x65014d2b
    65014d26:	mov    rdx,r15
    65014d29:	jmp    0x65014d46
    65014d2b:	mov    rcx,QWORD PTR [rsi+0x10]
    65014d2f:	sub    rcx,r8
    65014d32:	mov    rax,r12
    65014d35:	imul   rcx
    65014d38:	sar    rdx,0x4
    65014d3c:	mov    rax,rdx
    65014d3f:	shr    rax,0x3f
    65014d43:	add    rdx,rax
    65014d46:	lea    rdi,[rdx+0x1]
    65014d4a:	mov    rcx,rdi
    65014d4d:	test   rdi,rdi
    65014d50:	jne    0x65014d57
    65014d52:	mov    rcx,r15
    65014d55:	jmp    0x65014d98
    65014d57:	xor    edx,edx
    65014d59:	or     rax,0xffffffffffffffff
    65014d5d:	div    rdi
    65014d60:	cmp    rax,0x28
    65014d64:	jae    0x65014d98
    65014d66:	mov    QWORD PTR [rsp+0x50],r15
    65014d6b:	lea    rdx,[rsp+0x50]
    65014d70:	lea    rcx,[rsp+0x58]
    65014d75:	call   0x6501d330
    65014d7a:	lea    r11,[rip+0x20437]        # 0x650351b8
    65014d81:	mov    QWORD PTR [rsp+0x58],r11
    65014d86:	lea    rdx,[rip+0x2c693]        # 0x65041420
    65014d8d:	lea    rcx,[rsp+0x58]
    65014d92:	call   0x6501dc60
    65014d97:	int3   
    65014d98:	lea    rcx,[rcx+rcx*4]
    65014d9c:	shl    rcx,0x3
    65014da0:	call   0x6501dbc0
    65014da5:	mov    r14,rax
    65014da8:	mov    QWORD PTR [rsp+0x40],rax
    65014dad:	mov    QWORD PTR [rsp+0x38],rax
    65014db2:	mov    r13,QWORD PTR [rbx+0x8]
    65014db6:	xor    eax,eax
    65014db8:	mov    BYTE PTR [rsp+0x28],al
    65014dbc:	movzx  edx,BYTE PTR [rsp+0x30]
    65014dc1:	mov    BYTE PTR [rsp+0x20],dl
    65014dc5:	mov    r9,rsi
    65014dc8:	mov    r8,r14
    65014dcb:	mov    rdx,r13
    65014dce:	mov    rcx,QWORD PTR [rsi+0x8]
    65014dd2:	call   0x650154d0
    65014dd7:	mov    rbx,rax
    65014dda:	mov    QWORD PTR [rsp+0x38],rax
    65014ddf:	xor    eax,eax
    65014de1:	mov    BYTE PTR [rsp+0x28],al
    65014de5:	movzx  eax,BYTE PTR [rsp+0x30]
    65014dea:	mov    BYTE PTR [rsp+0x20],al
    65014dee:	mov    r9,rsi
    65014df1:	lea    r8,[rsp+0x78]
    65014df6:	mov    edx,0x1
    65014dfb:	mov    rcx,rbx
    65014dfe:	call   0x65015270
    65014e03:	add    rbx,0x28
    65014e07:	mov    QWORD PTR [rsp+0x38],rbx
    65014e0c:	xor    eax,eax
    65014e0e:	mov    BYTE PTR [rsp+0x28],al
    65014e12:	movzx  eax,BYTE PTR [rsp+0x30]
    65014e17:	mov    BYTE PTR [rsp+0x20],al
    65014e1b:	mov    r9,rsi
    65014e1e:	mov    r8,rbx
    65014e21:	mov    rdx,QWORD PTR [rsi+0x10]
    65014e25:	mov    rcx,r13
    65014e28:	call   0x650154d0
    65014e2d:	nop
    65014e2e:	mov    rbx,QWORD PTR [rsi+0x8]
    65014e32:	test   rbx,rbx
    65014e35:	jne    0x65014e3c
    65014e37:	mov    r12,r15
    65014e3a:	jmp    0x65014e5a
    65014e3c:	mov    rcx,QWORD PTR [rsi+0x10]
    65014e40:	sub    rcx,rbx
    65014e43:	mov    rax,r12
    65014e46:	imul   rcx
    65014e49:	mov    r12,rdx
    65014e4c:	sar    r12,0x4
    65014e50:	mov    rax,r12
    65014e53:	shr    rax,0x3f
    65014e57:	add    r12,rax
    65014e5a:	test   rbx,rbx
    65014e5d:	je     0x65014e9a
    65014e5f:	mov    r13,QWORD PTR [rsi+0x10]
    65014e63:	cmp    rbx,r13
    65014e66:	je     0x65014e91
    65014e68:	cmp    QWORD PTR [rbx+0x20],0x10
    65014e6d:	jb     0x65014e78
    65014e6f:	mov    rcx,QWORD PTR [rbx+0x8]
    65014e73:	call   0x6501d300
    65014e78:	mov    QWORD PTR [rbx+0x20],0xf
    65014e80:	mov    QWORD PTR [rbx+0x18],r15
    65014e84:	mov    BYTE PTR [rbx+0x8],0x0
    65014e88:	add    rbx,0x28
    65014e8c:	cmp    rbx,r13
    65014e8f:	jne    0x65014e68
    65014e91:	mov    rcx,QWORD PTR [rsi+0x8]
    65014e95:	call   0x6501d300
    65014e9a:	lea    rax,[rdi+rdi*4]
    65014e9e:	lea    rcx,[r14+rax*8]
    65014ea2:	mov    QWORD PTR [rsi+0x18],rcx
    65014ea6:	lea    rax,[r12+r12*4+0x5]
    65014eab:	lea    rcx,[r14+rax*8]
    65014eaf:	mov    QWORD PTR [rsi+0x10],rcx
    65014eb3:	mov    QWORD PTR [rsi+0x8],r14
    65014eb7:	jmp    0x65014ffe
    65014ebc:	mov    r13,QWORD PTR [rsi+0x10]
    65014ec0:	mov    rdi,QWORD PTR [rbx+0x8]
    65014ec4:	mov    rcx,r13
    65014ec7:	sub    rcx,rdi
    65014eca:	mov    rax,r12
    65014ecd:	imul   rcx
    65014ed0:	sar    rdx,0x4
    65014ed4:	mov    rax,rdx
    65014ed7:	shr    rax,0x3f
    65014edb:	add    rdx,rax
    65014ede:	cmp    rdx,0x1
    65014ee2:	jae    0x65014f8f
    65014ee8:	lea    r8,[rdi+0x28]
    65014eec:	xor    eax,eax
    65014eee:	mov    BYTE PTR [rsp+0x28],al
    65014ef2:	movzx  eax,BYTE PTR [rsp+0x30]
    65014ef7:	mov    BYTE PTR [rsp+0x20],al
    65014efb:	mov    r9,rsi
    65014efe:	mov    rdx,r13
    65014f01:	mov    rcx,rdi
    65014f04:	call   0x650154d0
    65014f09:	nop
    65014f0a:	mov    r10,QWORD PTR [rsi+0x10]
    65014f0e:	mov    rcx,r10
    65014f11:	sub    rcx,rdi
    65014f14:	mov    rax,r12
    65014f17:	imul   rcx
    65014f1a:	sar    rdx,0x4
    65014f1e:	mov    rax,rdx
    65014f21:	shr    rax,0x3f
    65014f25:	add    rdx,rax
    65014f28:	mov    ecx,0x1
    65014f2d:	sub    rcx,rdx
    65014f30:	xor    eax,eax
    65014f32:	mov    BYTE PTR [rsp+0x28],al
    65014f36:	movzx  eax,BYTE PTR [rsp+0x30]
    65014f3b:	mov    BYTE PTR [rsp+0x20],al
    65014f3f:	mov    r9,rsi
    65014f42:	lea    r8,[rsp+0x78]
    65014f47:	mov    rdx,rcx
    65014f4a:	mov    rcx,r10
    65014f4d:	call   0x65015270
    65014f52:	nop
    65014f53:	add    QWORD PTR [rsi+0x10],0x28
    65014f58:	mov    rbx,QWORD PTR [rsi+0x10]
    65014f5c:	add    rbx,0xffffffffffffffd8
    65014f60:	cmp    rdi,rbx
    65014f63:	je     0x65014ffe
    65014f69:	data16 xchg ax,ax
    65014f6c:	data16 data16 xchg ax,ax
    65014f70:	or     r9,0xffffffffffffffff
    65014f74:	xor    r8d,r8d
    65014f77:	lea    rdx,[rsp+0x78]
    65014f7c:	mov    rcx,rdi
    65014f7f:	call   0x65001e20
    65014f84:	add    rdi,0x28
    65014f88:	cmp    rdi,rbx
    65014f8b:	jne    0x65014f70
    65014f8d:	jmp    0x65014ffe
    65014f8f:	xor    eax,eax
    65014f91:	mov    BYTE PTR [rsp+0x28],al
    65014f95:	movzx  eax,BYTE PTR [rsp+0x30]
    65014f9a:	mov    BYTE PTR [rsp+0x20],al
    65014f9e:	mov    r9,rsi
    65014fa1:	mov    r8,r13
    65014fa4:	mov    rdx,r13
    65014fa7:	lea    rcx,[r13-0x28]
    65014fab:	call   0x650154d0
    65014fb0:	mov    QWORD PTR [rsi+0x10],rax
    65014fb4:	xor    eax,eax
    65014fb6:	mov    BYTE PTR [rsp+0x28],al
    65014fba:	movzx  eax,BYTE PTR [rsp+0x30]
    65014fbf:	mov    BYTE PTR [rsp+0x20],al
    65014fc3:	movzx  r9d,BYTE PTR [rsp+0x30]
    65014fc9:	mov    r8,r13
    65014fcc:	lea    rdx,[r13-0x28]
    65014fd0:	mov    rcx,rdi
    65014fd3:	call   0x65015370
    65014fd8:	lea    rbx,[rdi+0x28]
    65014fdc:	cmp    rdi,rbx
    65014fdf:	je     0x65014ffe
    65014fe1:	or     r9,0xffffffffffffffff
    65014fe5:	xor    r8d,r8d
    65014fe8:	lea    rdx,[rsp+0x78]
    65014fed:	mov    rcx,rdi
    65014ff0:	call   0x65001e20
    65014ff5:	add    rdi,0x28
    65014ff9:	cmp    rdi,rbx
    65014ffc:	jne    0x65014fe1
    65014ffe:	cmp    QWORD PTR [rsp+0x98],0x10
    65015007:	jb     0x65015016
    65015009:	mov    rcx,QWORD PTR [rsp+0x80]
    65015011:	call   0x6501d300
    65015016:	mov    rcx,QWORD PTR [rsp+0xa0]
    6501501e:	xor    rcx,rsp
    65015021:	call   0x6501e650
    65015026:	add    rsp,0xb0
    6501502d:	pop    r15
    6501502f:	pop    r14
    65015031:	pop    r13
    65015033:	pop    r12
    65015035:	pop    rdi
    65015036:	pop    rsi
    65015037:	pop    rbx
    65015038:	ret    
    65015039:	int3   
    6501503a:	int3   
    6501503b:	int3   
    6501503c:	int3   
    6501503d:	int3   
    6501503e:	int3   
    6501503f:	int3   
    65015040:	rex push rbp
    65015042:	sub    rsp,0x20
    65015046:	mov    rbp,rdx
    65015049:	lea    rcx,[rbp+0x78]
    6501504d:	call   0x65001c70
    65015052:	add    rsp,0x20
    65015056:	pop    rbp
    65015057:	ret    
    65015058:	int3   
    65015059:	int3   
    6501505a:	int3   
    6501505b:	int3   
    6501505c:	int3   
    6501505d:	int3   
    6501505e:	int3   
    6501505f:	int3   
    65015060:	mov    QWORD PTR [rsp+0x10],rdx
    65015065:	push   rbx
    65015066:	push   rbp
    65015067:	sub    rsp,0x38
    6501506b:	mov    rbp,rdx
    6501506e:	mov    r8,QWORD PTR [rbp+0x38]
    65015072:	mov    rbx,QWORD PTR [rbp+0x40]
    65015076:	mov    rdx,rbx
    65015079:	mov    rcx,QWORD PTR [rbp+0x48]
    6501507d:	call   0x650150e0
    65015082:	mov    rcx,rbx
    65015085:	call   0x6501d300
    6501508a:	xor    edx,edx
    6501508c:	xor    ecx,ecx
    6501508e:	call   0x6501dc60
    65015093:	nop
    65015094:	add    rsp,0x38
    65015098:	pop    rbp
    65015099:	pop    rbx
    6501509a:	ret    
    6501509b:	int3   
    6501509c:	int3   
    6501509d:	int3   
    6501509e:	int3   
    6501509f:	int3   
    650150a0:	mov    QWORD PTR [rsp+0x10],rdx
    650150a5:	push   rbp
    650150a6:	sub    rsp,0x30
    650150aa:	mov    rbp,rdx
    650150ad:	mov    rcx,QWORD PTR [rbp+0x48]
    650150b1:	mov    r8,QWORD PTR [rcx+0x10]
    650150b5:	add    r8,0x28
    650150b9:	mov    rax,QWORD PTR [rbp+0x40]
    650150bd:	mov    rdx,QWORD PTR [rax+0x8]
    650150c1:	add    rdx,0x28
    650150c5:	call   0x650150e0
    650150ca:	xor    edx,edx
    650150cc:	xor    ecx,ecx
    650150ce:	call   0x6501dc60
    650150d3:	nop
    650150d4:	add    rsp,0x30
    650150d8:	pop    rbp
    650150d9:	ret    
    650150da:	int3   
    650150db:	int3   
    650150dc:	int3   
    650150dd:	int3   
    650150de:	int3   
    650150df:	int3   
    650150e0:	cmp    rdx,r8
    650150e3:	je     0x6501513a
    650150e5:	push   rdi
    650150e6:	sub    rsp,0x20
    650150ea:	mov    QWORD PTR [rsp+0x30],rbx
    650150ef:	mov    QWORD PTR [rsp+0x38],rsi
    650150f4:	mov    rdi,r8
    650150f7:	xor    esi,esi
    650150f9:	lea    rbx,[rdx+0x20]
    650150fd:	data16 xchg ax,ax
    65015100:	cmp    QWORD PTR [rbx],0x10
    65015104:	jb     0x6501510f
    65015106:	mov    rcx,QWORD PTR [rbx-0x18]
    6501510a:	call   0x6501d300
    6501510f:	mov    QWORD PTR [rbx],0xf
    65015116:	mov    QWORD PTR [rbx-0x8],rsi
    6501511a:	mov    BYTE PTR [rbx-0x18],sil
    6501511e:	add    rbx,0x28
    65015122:	lea    rax,[rbx-0x20]
    65015126:	cmp    rax,rdi
    65015129:	jne    0x65015100
    6501512b:	mov    rsi,QWORD PTR [rsp+0x38]
    65015130:	mov    rbx,QWORD PTR [rsp+0x30]
    65015135:	add    rsp,0x20
    65015139:	pop    rdi
    6501513a:	ret    0x0
    6501513d:	int3   
    6501513e:	int3   
    6501513f:	int3   
    65015140:	sub    rsp,0x98
    65015147:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65015150:	mov    QWORD PTR [rsp+0x48],0xf
    65015159:	mov    QWORD PTR [rsp+0x40],0x0
    65015162:	mov    BYTE PTR [rsp+0x30],0x0
    65015167:	xor    r8d,r8d
    6501516a:	lea    edx,[r8+0x12]
    6501516e:	lea    rcx,[rsp+0x28]
    65015173:	call   0x65002330
    65015178:	lea    rcx,[rsp+0x30]
    6501517d:	mov    rdx,QWORD PTR [rsp+0x48]
    65015182:	cmp    rdx,0x10
    65015186:	cmovae rcx,QWORD PTR [rsp+0x30]
    6501518c:	mov    r9d,0x12
    65015192:	lea    r8,[rip+0x23eb7]        # 0x65039050
    65015199:	call   0x6501d7b0
    6501519e:	mov    QWORD PTR [rsp+0x40],0x12
    650151a7:	lea    rax,[rsp+0x30]
    650151ac:	cmp    QWORD PTR [rsp+0x48],0x10
    650151b2:	cmovae rax,QWORD PTR [rsp+0x30]
    650151b8:	mov    BYTE PTR [rax+0x12],0x0
    650151bc:	lea    rcx,[rsp+0x50]
    650151c1:	call   0x6501d310
    650151c6:	nop
    650151c7:	lea    rax,[rip+0x20002]        # 0x650351d0
    650151ce:	mov    QWORD PTR [rsp+0x50],rax
    650151d3:	mov    QWORD PTR [rsp+0x88],0xf
    650151df:	mov    QWORD PTR [rsp+0x80],0x0
    650151eb:	mov    BYTE PTR [rsp+0x70],0x0
    650151f0:	or     r9,0xffffffffffffffff
    650151f4:	xor    r8d,r8d
    650151f7:	lea    rdx,[rsp+0x28]
    650151fc:	lea    rcx,[rsp+0x68]
    65015201:	call   0x65001e20
    65015206:	nop
    65015207:	lea    rax,[rip+0x1ffda]        # 0x650351e8
    6501520e:	mov    QWORD PTR [rsp+0x50],rax
    65015213:	lea    rdx,[rip+0x2c35e]        # 0x65041578
    6501521a:	lea    rcx,[rsp+0x50]
    6501521f:	call   0x6501dc60
    65015224:	int3   
    65015225:	int3   
    65015226:	int3   
    65015227:	int3   
    65015228:	int3   
    65015229:	int3   
    6501522a:	int3   
    6501522b:	int3   
    6501522c:	int3   
    6501522d:	int3   
    6501522e:	int3   
    6501522f:	int3   
    65015230:	rex push rbp
    65015232:	sub    rsp,0x20
    65015236:	mov    rbp,rdx
    65015239:	lea    rcx,[rbp+0x28]
    6501523d:	call   0x65001c70
    65015242:	add    rsp,0x20
    65015246:	pop    rbp
    65015247:	ret    
    65015248:	int3   
    65015249:	int3   
    6501524a:	int3   
    6501524b:	int3   
    6501524c:	int3   
    6501524d:	int3   
    6501524e:	int3   
    6501524f:	int3   
    65015250:	rex push rbp
    65015252:	sub    rsp,0x20
    65015256:	mov    rbp,rdx
    65015259:	lea    rcx,[rbp+0x50]
    6501525d:	call   0x6501d490
    65015262:	add    rsp,0x20
    65015266:	pop    rbp
    65015267:	ret    
    65015268:	int3   
    65015269:	int3   
    6501526a:	int3   
    6501526b:	int3   
    6501526c:	int3   
    6501526d:	int3   
    6501526e:	int3   
    6501526f:	int3   
    65015270:	mov    QWORD PTR [rsp+0x20],r9
    65015275:	mov    QWORD PTR [rsp+0x8],rcx
    6501527a:	push   rsi
    6501527b:	push   rdi
    6501527c:	push   r12
    6501527e:	sub    rsp,0x40
    65015282:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501528b:	mov    QWORD PTR [rsp+0x70],rbx
    65015290:	mov    rsi,r8
    65015293:	mov    rdi,rdx
    65015296:	mov    rbx,rcx
    65015299:	mov    QWORD PTR [rsp+0x68],rcx
    6501529e:	xor    r12d,r12d
    650152a1:	test   rdi,rdi
    650152a4:	je     0x650152e7
    650152a6:	mov    QWORD PTR [rsp+0x28],rbx
    650152ab:	mov    QWORD PTR [rsp+0x30],rbx
    650152b0:	test   rbx,rbx
    650152b3:	je     0x650152d8
    650152b5:	mov    QWORD PTR [rbx+0x20],0xf
    650152bd:	mov    QWORD PTR [rbx+0x18],r12
    650152c1:	mov    BYTE PTR [rbx+0x8],0x0
    650152c5:	or     r9,0xffffffffffffffff
    650152c9:	xor    r8d,r8d
    650152cc:	mov    rdx,rsi
    650152cf:	mov    rcx,rbx
    650152d2:	call   0x65001e20
    650152d7:	nop
    650152d8:	sub    rdi,0x1
    650152dc:	add    rbx,0x28
    650152e0:	mov    QWORD PTR [rsp+0x60],rbx
    650152e5:	jmp    0x650152a1
    650152e7:	mov    rbx,QWORD PTR [rsp+0x70]
    650152ec:	add    rsp,0x40
    650152f0:	pop    r12
    650152f2:	pop    rdi
    650152f3:	pop    rsi
    650152f4:	ret    
    650152f5:	int3   
    650152f6:	int3   
    650152f7:	int3   
    650152f8:	int3   
    650152f9:	int3   
    650152fa:	int3   
    650152fb:	int3   
    650152fc:	int3   
    650152fd:	int3   
    650152fe:	int3   
    650152ff:	int3   
    65015300:	rex push rbp
    65015302:	sub    rsp,0x20
    65015306:	mov    rbp,rdx
    65015309:	mov    rdx,QWORD PTR [rbp+0x28]
    6501530d:	mov    rcx,QWORD PTR [rbp+0x30]
    65015311:	call   0x65004190
    65015316:	add    rsp,0x20
    6501531a:	pop    rbp
    6501531b:	ret    
    6501531c:	int3   
    6501531d:	int3   
    6501531e:	int3   
    6501531f:	int3   
    65015320:	mov    QWORD PTR [rsp+0x10],rdx
    65015325:	push   rbx
    65015326:	push   rbp
    65015327:	push   rsi
    65015328:	push   rdi
    65015329:	sub    rsp,0x28
    6501532d:	mov    rbp,rdx
    65015330:	mov    rbx,QWORD PTR [rbp+0x68]
    65015334:	mov    rdi,QWORD PTR [rbp+0x60]
    65015338:	cmp    rbx,rdi
    6501533b:	je     0x65015355
    6501533d:	mov    rsi,QWORD PTR [rbp+0x78]
    65015341:	mov    rdx,rbx
    65015344:	mov    rcx,rsi
    65015347:	call   0x65015490
    6501534c:	add    rbx,0x28
    65015350:	cmp    rbx,rdi
    65015353:	jne    0x65015341
    65015355:	xor    edx,edx
    65015357:	xor    ecx,ecx
    65015359:	call   0x6501dc60
    6501535e:	nop
    6501535f:	add    rsp,0x28
    65015363:	pop    rdi
    65015364:	pop    rsi
    65015365:	pop    rbp
    65015366:	pop    rbx
    65015367:	ret    
    65015368:	int3   
    65015369:	int3   
    6501536a:	int3   
    6501536b:	int3   
    6501536c:	int3   
    6501536d:	int3   
    6501536e:	int3   
    6501536f:	int3   
    65015370:	mov    QWORD PTR [rsp+0x8],rbx
    65015375:	push   rdi
    65015376:	sub    rsp,0x20
    6501537a:	mov    rax,QWORD PTR [rip+0x2dd9f]        # 0x65043120
    65015381:	xor    rax,rsp
    65015384:	mov    QWORD PTR [rsp+0x10],rax
    65015389:	mov    r9,rdx
    6501538c:	mov    r10,rdx
    6501538f:	movabs rax,0x6666666666666667
    65015399:	sub    r9,rcx
    6501539c:	mov    rbx,r8
    6501539f:	mov    rdi,rcx
    650153a2:	imul   r9
    650153a5:	mov    r9,r8
    650153a8:	sar    rdx,0x4
    650153ac:	mov    rax,rdx
    650153af:	shr    rax,0x3f
    650153b3:	add    rdx,rax
    650153b6:	lea    rax,[rdx+rdx*4]
    650153ba:	shl    rax,0x3
    650153be:	sub    r9,rax
    650153c1:	cmp    rcx,r10
    650153c4:	je     0x6501546f
    650153ca:	lea    r11,[r10+0x20]
    650153ce:	add    r8,0x18
    650153d2:	sub    r10,rbx
    650153d5:	data16 data16 xchg ax,ax
    650153d9:	data16 xchg ax,ax
    650153dc:	data16 data16 xchg ax,ax
    650153e0:	mov    eax,DWORD PTR [r8-0x38]
    650153e4:	sub    r8,0x28
    650153e8:	sub    r11,0x28
    650153ec:	lea    rcx,[rsp]
    650153f0:	mov    DWORD PTR [rcx],eax
    650153f2:	mov    eax,DWORD PTR [r8-0xc]
    650153f6:	mov    DWORD PTR [rcx+0x4],eax
    650153f9:	mov    eax,DWORD PTR [r8-0x8]
    650153fd:	mov    DWORD PTR [rcx+0x8],eax
    65015400:	mov    eax,DWORD PTR [r8-0x4]
    65015404:	mov    DWORD PTR [rcx+0xc],eax
    65015407:	mov    eax,DWORD PTR [r11-0x18]
    6501540b:	lea    rcx,[rsp]
    6501540f:	mov    DWORD PTR [r8-0x10],eax
    65015413:	mov    eax,DWORD PTR [r11-0x14]
    65015417:	mov    DWORD PTR [r8-0xc],eax
    6501541b:	mov    eax,DWORD PTR [r11-0x10]
    6501541f:	mov    DWORD PTR [r8-0x8],eax
    65015423:	mov    eax,DWORD PTR [r11-0xc]
    65015427:	mov    DWORD PTR [r8-0x4],eax
    6501542b:	mov    eax,DWORD PTR [rcx]
    6501542d:	mov    DWORD PTR [r11-0x18],eax
    65015431:	mov    eax,DWORD PTR [rcx+0x4]
    65015434:	mov    DWORD PTR [r11-0x14],eax
    65015438:	mov    eax,DWORD PTR [rcx+0x8]
    6501543b:	mov    DWORD PTR [r11-0x10],eax
    6501543f:	mov    eax,DWORD PTR [rcx+0xc]
    65015442:	mov    rcx,QWORD PTR [r10+r8*1]
    65015446:	mov    DWORD PTR [r11-0xc],eax
    6501544a:	mov    rdx,QWORD PTR [r8]
    6501544d:	mov    QWORD PTR [r8],rcx
    65015450:	mov    rcx,QWORD PTR [r11]
    65015453:	mov    QWORD PTR [r10+r8*1],rdx
    65015457:	mov    rdx,QWORD PTR [r8+0x8]
    6501545b:	mov    QWORD PTR [r8+0x8],rcx
    6501545f:	lea    rcx,[r11-0x20]
    65015463:	mov    QWORD PTR [r11],rdx
    65015466:	cmp    rcx,rdi
    65015469:	jne    0x650153e0
    6501546f:	mov    rax,r9
    65015472:	mov    rcx,QWORD PTR [rsp+0x10]
    65015477:	xor    rcx,rsp
    6501547a:	call   0x6501e650
    6501547f:	mov    rbx,QWORD PTR [rsp+0x30]
    65015484:	add    rsp,0x20
    65015488:	pop    rdi
    65015489:	ret    
    6501548a:	int3   
    6501548b:	int3   
    6501548c:	int3   
    6501548d:	int3   
    6501548e:	int3   
    6501548f:	int3   
    65015490:	rex push rbx
    65015492:	sub    rsp,0x20
    65015496:	cmp    QWORD PTR [rdx+0x20],0x10
    6501549b:	mov    rbx,rdx
    6501549e:	jb     0x650154a9
    650154a0:	mov    rcx,QWORD PTR [rdx+0x8]
    650154a4:	call   0x6501d300
    650154a9:	mov    QWORD PTR [rbx+0x20],0xf
    650154b1:	mov    QWORD PTR [rbx+0x18],0x0
    650154b9:	mov    BYTE PTR [rbx+0x8],0x0
    650154bd:	add    rsp,0x20
    650154c1:	pop    rbx
    650154c2:	ret    
    650154c3:	int3   
    650154c4:	int3   
    650154c5:	int3   
    650154c6:	int3   
    650154c7:	int3   
    650154c8:	int3   
    650154c9:	int3   
    650154ca:	int3   
    650154cb:	int3   
    650154cc:	int3   
    650154cd:	int3   
    650154ce:	int3   
    650154cf:	int3   
    650154d0:	mov    r11,rsp
    650154d3:	mov    QWORD PTR [r11+0x20],r9
    650154d7:	push   rsi
    650154d8:	push   rdi
    650154d9:	push   r12
    650154db:	sub    rsp,0x90
    650154e2:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
    650154eb:	mov    QWORD PTR [r11+0x10],rbx
    650154ef:	mov    rax,QWORD PTR [rip+0x2dc2a]        # 0x65043120
    650154f6:	xor    rax,rsp
    650154f9:	mov    QWORD PTR [rsp+0x80],rax
    65015501:	mov    rbx,r8
    65015504:	mov    rsi,rdx
    65015507:	mov    rdi,rcx
    6501550a:	mov    QWORD PTR [rsp+0x20],rbx
    6501550f:	mov    QWORD PTR [rsp+0x28],rbx
    65015514:	mov    QWORD PTR [r11-0x40],0xf
    6501551c:	xor    r12d,r12d
    6501551f:	mov    QWORD PTR [r11-0x48],r12
    65015523:	mov    BYTE PTR [r11-0x58],r12b
    65015527:	cmp    rdi,rsi
    6501552a:	je     0x650155e6
    65015530:	mov    QWORD PTR [rsp+0x30],rbx
    65015535:	mov    QWORD PTR [rsp+0x38],rbx
    6501553a:	test   rbx,rbx
    6501553d:	je     0x65015564
    6501553f:	mov    QWORD PTR [rbx+0x20],0xf
    65015547:	mov    QWORD PTR [rbx+0x18],r12
    6501554b:	mov    BYTE PTR [rbx+0x8],0x0
    6501554f:	or     r9,0xffffffffffffffff
    65015553:	xor    r8d,r8d
    65015556:	lea    rdx,[rsp+0x48]
    6501555b:	mov    rcx,rbx
    6501555e:	call   0x65001e20
    65015563:	nop
    65015564:	lea    rcx,[rsp+0x70]
    65015569:	mov    eax,DWORD PTR [rbx+0x8]
    6501556c:	mov    DWORD PTR [rcx],eax
    6501556e:	mov    eax,DWORD PTR [rbx+0xc]
    65015571:	mov    DWORD PTR [rcx+0x4],eax
    65015574:	mov    eax,DWORD PTR [rbx+0x10]
    65015577:	mov    DWORD PTR [rcx+0x8],eax
    6501557a:	mov    eax,DWORD PTR [rbx+0x14]
    6501557d:	mov    DWORD PTR [rcx+0xc],eax
    65015580:	mov    eax,DWORD PTR [rdi+0x8]
    65015583:	mov    DWORD PTR [rbx+0x8],eax
    65015586:	mov    eax,DWORD PTR [rdi+0xc]
    65015589:	mov    DWORD PTR [rbx+0xc],eax
    6501558c:	mov    eax,DWORD PTR [rdi+0x10]
    6501558f:	mov    DWORD PTR [rbx+0x10],eax
    65015592:	mov    eax,DWORD PTR [rdi+0x14]
    65015595:	mov    DWORD PTR [rbx+0x14],eax
    65015598:	lea    rcx,[rsp+0x70]
    6501559d:	mov    eax,DWORD PTR [rcx]
    6501559f:	mov    DWORD PTR [rdi+0x8],eax
    650155a2:	mov    eax,DWORD PTR [rcx+0x4]
    650155a5:	mov    DWORD PTR [rdi+0xc],eax
    650155a8:	mov    eax,DWORD PTR [rcx+0x8]
    650155ab:	mov    DWORD PTR [rdi+0x10],eax
    650155ae:	mov    eax,DWORD PTR [rcx+0xc]
    650155b1:	mov    DWORD PTR [rdi+0x14],eax
    650155b4:	mov    rcx,QWORD PTR [rbx+0x18]
    650155b8:	mov    rax,QWORD PTR [rdi+0x18]
    650155bc:	mov    QWORD PTR [rbx+0x18],rax
    650155c0:	mov    QWORD PTR [rdi+0x18],rcx
    650155c4:	mov    rcx,QWORD PTR [rbx+0x20]
    650155c8:	mov    rax,QWORD PTR [rdi+0x20]
    650155cc:	mov    QWORD PTR [rbx+0x20],rax
    650155d0:	mov    QWORD PTR [rdi+0x20],rcx
    650155d4:	add    rbx,0x28
    650155d8:	mov    QWORD PTR [rsp+0x20],rbx
    650155dd:	add    rdi,0x28
    650155e1:	jmp    0x65015527
    650155e6:	cmp    QWORD PTR [rsp+0x68],0x10
    650155ec:	jb     0x650155f8
    650155ee:	mov    rcx,QWORD PTR [rsp+0x50]
    650155f3:	call   0x6501d300
    650155f8:	mov    rax,rbx
    650155fb:	mov    rcx,QWORD PTR [rsp+0x80]
    65015603:	xor    rcx,rsp
    65015606:	call   0x6501e650
    6501560b:	mov    rbx,QWORD PTR [rsp+0xb8]
    65015613:	add    rsp,0x90
    6501561a:	pop    r12
    6501561c:	pop    rdi
    6501561d:	pop    rsi
    6501561e:	ret    
    6501561f:	int3   
    65015620:	rex push rbp
    65015622:	sub    rsp,0x20
    65015626:	mov    rbp,rdx
    65015629:	lea    rcx,[rbp+0x48]
    6501562d:	call   0x65001c70
    65015632:	add    rsp,0x20
    65015636:	pop    rbp
    65015637:	ret    
    65015638:	int3   
    65015639:	int3   
    6501563a:	int3   
    6501563b:	int3   
    6501563c:	int3   
    6501563d:	int3   
    6501563e:	int3   
    6501563f:	int3   
    65015640:	rex push rbp
    65015642:	sub    rsp,0x20
    65015646:	mov    rbp,rdx
    65015649:	mov    rdx,QWORD PTR [rbp+0x30]
    6501564d:	mov    rcx,QWORD PTR [rbp+0x38]
    65015651:	call   0x65004190
    65015656:	add    rsp,0x20
    6501565a:	pop    rbp
    6501565b:	ret    
    6501565c:	int3   
    6501565d:	int3   
    6501565e:	int3   
    6501565f:	int3   
    65015660:	mov    QWORD PTR [rsp+0x10],rdx
    65015665:	push   rbx
    65015666:	push   rbp
    65015667:	push   rsi
    65015668:	push   rdi
    65015669:	sub    rsp,0x28
    6501566d:	mov    rbp,rdx
    65015670:	mov    rbx,QWORD PTR [rbp+0x28]
    65015674:	mov    rdi,QWORD PTR [rbp+0x20]
    65015678:	cmp    rbx,rdi
    6501567b:	je     0x65015698
    6501567d:	mov    rsi,QWORD PTR [rbp+0xc8]
    65015684:	mov    rdx,rbx
    65015687:	mov    rcx,rsi
    6501568a:	call   0x65015490
    6501568f:	add    rbx,0x28
    65015693:	cmp    rbx,rdi
    65015696:	jne    0x65015684
    65015698:	xor    edx,edx
    6501569a:	xor    ecx,ecx
    6501569c:	call   0x6501dc60
    650156a1:	nop
    650156a2:	add    rsp,0x28
    650156a6:	pop    rdi
    650156a7:	pop    rsi
    650156a8:	pop    rbp
    650156a9:	pop    rbx
    650156aa:	ret    
    650156ab:	int3   
    650156ac:	int3   
    650156ad:	int3   
    650156ae:	int3   
    650156af:	int3   
    650156b0:	mov    QWORD PTR [rsp+0x8],rbx
    650156b5:	mov    QWORD PTR [rsp+0x10],rbp
    650156ba:	mov    QWORD PTR [rsp+0x18],rsi
    650156bf:	mov    QWORD PTR [rsp+0x20],rdi
    650156c4:	push   r12
    650156c6:	push   r13
    650156c8:	push   r14
    650156ca:	sub    rsp,0x800
    650156d1:	mov    r9d,0x1
    650156d7:	xor    r8d,r8d
    650156da:	lea    r10,[rsp+0x400]
    650156e2:	mov    edx,r9d
    650156e5:	mov    r11d,0x100
    650156eb:	xchg   ax,ax
    650156ed:	data16 xchg ax,ax
    650156f0:	movsxd rax,edx
    650156f3:	mov    DWORD PTR [r10],edx
    650156f6:	mov    DWORD PTR [rsp+rax*4],r8d
    650156fa:	mov    eax,edx
    650156fc:	and    al,0x80
    650156fe:	neg    al
    65015700:	lea    eax,[rdx+rdx*1]
    65015703:	sbb    ecx,ecx
    65015705:	add    r8d,r9d
    65015708:	add    r10,0x4
    6501570c:	and    ecx,0x1b
    6501570f:	xor    ecx,eax
    65015711:	xor    ecx,edx
    65015713:	cmp    r8d,r11d
    65015716:	movzx  edx,cl
    65015719:	jl     0x650156f0
    6501571b:	mov    edx,r9d
    6501571e:	lea    r8,[rip+0x303e3]        # 0x65045b08
    65015725:	mov    r10d,0xa
    6501572b:	xchg   ax,ax
    6501572d:	data16 xchg ax,ax
    65015730:	mov    eax,edx
    65015732:	mov    DWORD PTR [r8],edx
    65015735:	and    al,0x80
    65015737:	neg    al
    65015739:	lea    eax,[rdx+rdx*1]
    6501573c:	sbb    ecx,ecx
    6501573e:	add    r8,0x4
    65015742:	and    ecx,0x1b
    65015745:	xor    ecx,eax
    65015747:	sub    r10,r9
    6501574a:	movzx  edx,cl
    6501574d:	jne    0x65015730
    6501574f:	mov    BYTE PTR [rip+0x3253d],r10b        # 0x65047c93
    65015756:	mov    BYTE PTR [rip+0x303d3],0x63        # 0x65045b30
    6501575d:	lea    r8,[rip+0x303cd]        # 0x65045b31
    65015764:	lea    r10,[rsp+0x4]
    65015769:	lea    r14,[rip+0xfffffffffffea890]        # 0x65000000
    65015770:	movsxd rcx,DWORD PTR [r10]
    65015773:	lea    rax,[rsp+0x7fc]
    6501577b:	add    r10,0x4
    6501577f:	shl    rcx,0x2
    65015783:	add    r8,0x1
    65015787:	sub    rax,rcx
    6501578a:	mov    edx,DWORD PTR [rax]
    6501578c:	mov    ecx,edx
    6501578e:	sar    ecx,0x7
    65015791:	lea    eax,[rdx+rdx*1]
    65015794:	or     ecx,eax
    65015796:	movzx  eax,cl
    65015799:	xor    edx,eax
    6501579b:	mov    ecx,eax
    6501579d:	add    eax,eax
    6501579f:	sar    ecx,0x7
    650157a2:	or     ecx,eax
    650157a4:	movzx  eax,cl
    650157a7:	xor    edx,eax
    650157a9:	mov    ecx,eax
    650157ab:	add    eax,eax
    650157ad:	sar    ecx,0x7
    650157b0:	or     ecx,eax
    650157b2:	movzx  eax,cl
    650157b5:	xor    edx,eax
    650157b7:	mov    ecx,eax
    650157b9:	add    eax,eax
    650157bb:	sar    ecx,0x7
    650157be:	or     ecx,eax
    650157c0:	xor    ecx,0x63
    650157c3:	movzx  eax,cl
    650157c6:	xor    edx,eax
    650157c8:	movsxd rax,edx
    650157cb:	mov    BYTE PTR [r8-0x1],dl
    650157cf:	mov    BYTE PTR [rax+r14*1+0x47c30],r9b
    650157d7:	add    r9d,0x1
    650157db:	cmp    r9d,r11d
    650157de:	jl     0x65015770
    650157e0:	mov    esi,DWORD PTR [rsp+0x38]
    650157e4:	mov    ebp,DWORD PTR [rsp+0x34]
    650157e8:	mov    r12d,DWORD PTR [rsp+0x2c]
    650157ed:	mov    r13d,DWORD PTR [rsp+0x24]
    650157f2:	xor    r9d,r9d
    650157f5:	data16 data16 xchg ax,ax
    650157f9:	data16 xchg ax,ax
    650157fc:	data16 data16 xchg ax,ax
    65015800:	movzx  edx,BYTE PTR [r9+r14*1+0x45b30]
    65015809:	mov    eax,edx
    6501580b:	and    al,0x80
    6501580d:	neg    al
    6501580f:	lea    eax,[rdx+rdx*1]
    65015812:	sbb    ecx,ecx
    65015814:	and    ecx,0x1b
    65015817:	xor    ecx,eax
    65015819:	movzx  eax,cl
    6501581c:	mov    ecx,eax
    6501581e:	xor    ecx,edx
    65015820:	shl    ecx,0x8
    65015823:	xor    ecx,edx
    65015825:	shl    ecx,0x8
    65015828:	xor    ecx,edx
    6501582a:	shl    ecx,0x8
    6501582d:	xor    ecx,eax
    6501582f:	movzx  eax,BYTE PTR [r9+r14*1+0x47c30]
    65015838:	mov    DWORD PTR [r14+r9*4+0x47830],ecx
    65015840:	rol    ecx,0x8
    65015843:	mov    DWORD PTR [r14+r9*4+0x47430],ecx
    6501584b:	rol    ecx,0x8
    6501584e:	mov    DWORD PTR [r14+r9*4+0x47030],ecx
    65015856:	rol    ecx,0x8
    65015859:	test   eax,eax
    6501585b:	mov    DWORD PTR [r14+r9*4+0x46c30],ecx
    65015863:	je     0x65015914
    65015869:	mov    r8d,DWORD PTR [rsp+rax*4]
    6501586d:	mov    eax,0x80808081
    65015872:	lea    ecx,[r8+rsi*1]
    65015876:	imul   ecx
    65015878:	add    edx,ecx
    6501587a:	sar    edx,0x7
    6501587d:	mov    eax,edx
    6501587f:	shr    eax,0x1f
    65015882:	add    edx,eax
    65015884:	imul   edx,edx,0xff
    6501588a:	sub    ecx,edx
    6501588c:	movsxd rax,ecx
    6501588f:	lea    ecx,[r8+r13*1]
    65015893:	mov    r10d,DWORD PTR [rsp+rax*4+0x400]
    6501589b:	mov    eax,0x80808081
    650158a0:	imul   ecx
    650158a2:	add    edx,ecx
    650158a4:	sar    edx,0x7
    650158a7:	mov    eax,edx
    650158a9:	shr    eax,0x1f
    650158ac:	add    edx,eax
    650158ae:	imul   edx,edx,0xff
    650158b4:	sub    ecx,edx
    650158b6:	movsxd rax,ecx
    650158b9:	lea    ecx,[r8+rbp*1]
    650158bd:	mov    ebx,DWORD PTR [rsp+rax*4+0x400]
    650158c4:	mov    eax,0x80808081
    650158c9:	imul   ecx
    650158cb:	add    edx,ecx
    650158cd:	sar    edx,0x7
    650158d0:	mov    eax,edx
    650158d2:	shr    eax,0x1f
    650158d5:	add    edx,eax
    650158d7:	imul   edx,edx,0xff
    650158dd:	sub    ecx,edx
    650158df:	movsxd rax,ecx
    650158e2:	lea    ecx,[r8+r12*1]
    650158e6:	mov    edi,DWORD PTR [rsp+rax*4+0x400]
    650158ed:	mov    eax,0x80808081
    650158f2:	imul   ecx
    650158f4:	add    edx,ecx
    650158f6:	sar    edx,0x7
    650158f9:	mov    eax,edx
    650158fb:	shr    eax,0x1f
    650158fe:	add    edx,eax
    65015900:	imul   edx,edx,0xff
    65015906:	sub    ecx,edx
    65015908:	movsxd rax,ecx
    6501590b:	mov    ecx,DWORD PTR [rsp+rax*4+0x400]
    65015912:	jmp    0x6501591d
    65015914:	xor    r10d,r10d
    65015917:	xor    ebx,ebx
    65015919:	xor    edi,edi
    6501591b:	xor    ecx,ecx
    6501591d:	shl    ecx,0x8
    65015920:	add    r9,0x1
    65015924:	xor    ecx,edi
    65015926:	shl    ecx,0x8
    65015929:	xor    ecx,ebx
    6501592b:	shl    ecx,0x8
    6501592e:	xor    ecx,r10d
    65015931:	mov    DWORD PTR [r14+r9*4+0x4682c],ecx
    65015939:	rol    ecx,0x8
    6501593c:	mov    DWORD PTR [r14+r9*4+0x4642c],ecx
    65015944:	rol    ecx,0x8
    65015947:	mov    DWORD PTR [r14+r9*4+0x4602c],ecx
    6501594f:	rol    ecx,0x8
    65015952:	sub    r11,0x1
    65015956:	mov    DWORD PTR [r14+r9*4+0x45c2c],ecx
    6501595e:	jne    0x65015800
    65015964:	lea    r11,[rsp+0x800]
    6501596c:	mov    rbx,QWORD PTR [r11+0x20]
    65015970:	mov    rbp,QWORD PTR [r11+0x28]
    65015974:	mov    rsi,QWORD PTR [r11+0x30]
    65015978:	mov    rdi,QWORD PTR [r11+0x38]
    6501597c:	mov    rsp,r11
    6501597f:	pop    r14
    65015981:	pop    r13
    65015983:	pop    r12
    65015985:	ret    
    65015986:	int3   
    65015987:	int3   
    65015988:	int3   
    65015989:	int3   
    6501598a:	int3   
    6501598b:	int3   
    6501598c:	int3   
    6501598d:	int3   
    6501598e:	int3   
    6501598f:	int3   
    65015990:	rex push rbx
    65015992:	push   r12
    65015994:	push   r14
    65015996:	sub    rsp,0x30
    6501599a:	cmp    DWORD PTR [rip+0x32397],0x0        # 0x65047d38
    650159a1:	mov    rbx,rcx
    650159a4:	jne    0x650159b5
    650159a6:	call   0x650156b0
    650159ab:	mov    DWORD PTR [rip+0x32383],0x1        # 0x65047d38
    650159b5:	lea    r12,[rbx+0x10]
    650159b9:	lea    r8,[rip+0x2ef9a]        # 0x6504495a
    650159c0:	xor    r9d,r9d
    650159c3:	mov    r10,r12
    650159c6:	mov    DWORD PTR [rbx],0xa
    650159cc:	lea    r14,[rip+0xfffffffffffea62d]        # 0x65000000
    650159d3:	sub    r10,r8
    650159d6:	mov    QWORD PTR [rbx+0x8],r12
    650159da:	data16 xchg ax,ax
    650159dd:	data16 xchg ax,ax
    650159e0:	movzx  eax,BYTE PTR [r8]
    650159e4:	movzx  edx,BYTE PTR [r8+0x1]
    650159e9:	add    r8,0x4
    650159ed:	shl    edx,0x8
    650159f0:	or     edx,eax
    650159f2:	movzx  eax,BYTE PTR [r8-0x5]
    650159f7:	shl    edx,0x8
    650159fa:	or     edx,eax
    650159fc:	lea    eax,[r9*4+0x0]
    65015a04:	add    r9d,0x1
    65015a08:	shl    edx,0x8
    65015a0b:	movsxd rcx,eax
    65015a0e:	movzx  eax,BYTE PTR [rcx+r14*1+0x44958]
    65015a17:	or     edx,eax
    65015a19:	cmp    r9d,0x4
    65015a1d:	mov    DWORD PTR [r10+r8*1-0x4],edx
    65015a22:	jl     0x650159e0
    65015a24:	mov    eax,DWORD PTR [rbx]
    65015a26:	mov    QWORD PTR [rsp+0x58],rsi
    65015a2b:	mov    QWORD PTR [rsp+0x60],rdi
    65015a30:	cmp    eax,0xa
    65015a33:	mov    QWORD PTR [rsp+0x28],r13
    65015a38:	je     0x65015dc1
    65015a3e:	cmp    eax,0xc
    65015a41:	je     0x65015b65
    65015a47:	cmp    eax,0xe
    65015a4a:	jne    0x65016031
    65015a50:	lea    r10,[rip+0x300b1]        # 0x65045b08
    65015a57:	lea    r11,[rip+0x300c6]        # 0x65045b24
    65015a5e:	xchg   ax,ax
    65015a60:	mov    r9d,DWORD PTR [r12+0x1c]
    65015a65:	mov    ecx,DWORD PTR [r12+0x8]
    65015a6a:	add    r10,0x4
    65015a6e:	movzx  eax,r9b
    65015a72:	add    r12,0x20
    65015a76:	movzx  edx,BYTE PTR [rax+r14*1+0x45b30]
    65015a7f:	movzx  eax,BYTE PTR [r12-0x1]
    65015a85:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015a8e:	shl    edx,0x8
    65015a91:	xor    edx,eax
    65015a93:	movzx  eax,BYTE PTR [r12-0x2]
    65015a99:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015aa2:	shl    edx,0x8
    65015aa5:	xor    edx,eax
    65015aa7:	movzx  eax,BYTE PTR [r12-0x3]
    65015aad:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015ab6:	shl    edx,0x8
    65015ab9:	xor    edx,eax
    65015abb:	mov    eax,DWORD PTR [r12-0x1c]
    65015ac0:	xor    edx,DWORD PTR [r12-0x20]
    65015ac5:	xor    edx,DWORD PTR [r10-0x4]
    65015ac9:	xor    eax,edx
    65015acb:	mov    DWORD PTR [r12],edx
    65015acf:	xor    ecx,eax
    65015ad1:	mov    DWORD PTR [r12+0x4],eax
    65015ad6:	mov    DWORD PTR [r12+0x8],ecx
    65015adb:	xor    ecx,DWORD PTR [r12-0x14]
    65015ae0:	mov    DWORD PTR [r12+0xc],ecx
    65015ae5:	movzx  eax,BYTE PTR [r12+0xf]
    65015aeb:	movzx  edx,BYTE PTR [rax+r14*1+0x45b30]
    65015af4:	movzx  eax,BYTE PTR [r12+0xe]
    65015afa:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015b03:	shl    edx,0x8
    65015b06:	xor    edx,eax
    65015b08:	movzx  eax,BYTE PTR [r12+0xd]
    65015b0e:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015b17:	shl    edx,0x8
    65015b1a:	xor    edx,eax
    65015b1c:	movzx  eax,cl
    65015b1f:	mov    ecx,DWORD PTR [r12-0x8]
    65015b24:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015b2d:	shl    edx,0x8
    65015b30:	xor    edx,eax
    65015b32:	mov    eax,DWORD PTR [r12-0xc]
    65015b37:	xor    edx,DWORD PTR [r12-0x10]
    65015b3c:	xor    eax,edx
    65015b3e:	mov    DWORD PTR [r12+0x10],edx
    65015b43:	xor    ecx,eax
    65015b45:	mov    DWORD PTR [r12+0x14],eax
    65015b4a:	xor    r9d,ecx
    65015b4d:	cmp    r10,r11
    65015b50:	mov    DWORD PTR [r12+0x18],ecx
    65015b55:	mov    DWORD PTR [r12+0x1c],r9d
    65015b5a:	jl     0x65015a60
    65015b60:	jmp    0x65016031
    65015b65:	mov    QWORD PTR [rsp+0x50],rbp
    65015b6a:	mov    QWORD PTR [rsp+0x20],r15
    65015b6f:	lea    r13,[rip+0x2ff96]        # 0x65045b0c
    65015b76:	lea    r15,[rip+0x2ffaf]        # 0x65045b2c
    65015b7d:	data16 xchg ax,ax
    65015b80:	mov    edx,DWORD PTR [r12+0x14]
    65015b85:	mov    r8d,DWORD PTR [r12+0x4]
    65015b8a:	mov    edi,DWORD PTR [r12+0x8]
    65015b8f:	mov    esi,DWORD PTR [r12+0xc]
    65015b94:	mov    r9d,DWORD PTR [r12+0x10]
    65015b99:	movzx  eax,dl
    65015b9c:	movzx  r10d,BYTE PTR [rax+r14*1+0x45b30]
    65015ba5:	movzx  eax,BYTE PTR [r12+0x17]
    65015bab:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015bb4:	shl    r10d,0x8
    65015bb8:	xor    r10d,eax
    65015bbb:	movzx  eax,BYTE PTR [r12+0x16]
    65015bc1:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015bca:	shl    r10d,0x8
    65015bce:	xor    r10d,eax
    65015bd1:	movzx  eax,BYTE PTR [r12+0x15]
    65015bd7:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015be0:	shl    r10d,0x8
    65015be4:	xor    r10d,eax
    65015be7:	xor    r10d,DWORD PTR [r13-0x4]
    65015beb:	xor    r10d,DWORD PTR [r12]
    65015bef:	mov    DWORD PTR [r12+0x18],r10d
    65015bf4:	xor    r8d,r10d
    65015bf7:	mov    DWORD PTR [r12+0x1c],r8d
    65015bfc:	xor    edi,r8d
    65015bff:	mov    DWORD PTR [r12+0x20],edi
    65015c04:	xor    esi,edi
    65015c06:	mov    DWORD PTR [r12+0x24],esi
    65015c0b:	xor    r9d,esi
    65015c0e:	mov    DWORD PTR [r12+0x28],r9d
    65015c13:	xor    edx,r9d
    65015c16:	mov    DWORD PTR [r12+0x2c],edx
    65015c1b:	movzx  eax,dl
    65015c1e:	movzx  r11d,BYTE PTR [rax+r14*1+0x45b30]
    65015c27:	movzx  eax,BYTE PTR [r12+0x2f]
    65015c2d:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015c36:	shl    r11d,0x8
    65015c3a:	xor    r11d,eax
    65015c3d:	movzx  eax,BYTE PTR [r12+0x2e]
    65015c43:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015c4c:	shl    r11d,0x8
    65015c50:	xor    r11d,eax
    65015c53:	movzx  eax,BYTE PTR [r12+0x2d]
    65015c59:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015c62:	shl    r11d,0x8
    65015c66:	xor    r11d,eax
    65015c69:	xor    r11d,DWORD PTR [r13+0x0]
    65015c6d:	xor    r11d,r10d
    65015c70:	mov    DWORD PTR [r12+0x30],r11d
    65015c75:	mov    r10d,r11d
    65015c78:	xor    r10d,r8d
    65015c7b:	mov    DWORD PTR [r12+0x34],r10d
    65015c80:	xor    edi,r10d
    65015c83:	mov    DWORD PTR [r12+0x38],edi
    65015c88:	xor    esi,edi
    65015c8a:	mov    DWORD PTR [r12+0x3c],esi
    65015c8f:	mov    ebp,esi
    65015c91:	xor    ebp,r9d
    65015c94:	mov    DWORD PTR [r12+0x40],ebp
    65015c99:	xor    edx,ebp
    65015c9b:	mov    DWORD PTR [r12+0x44],edx
    65015ca0:	movzx  eax,dl
    65015ca3:	movzx  ebx,BYTE PTR [rax+r14*1+0x45b30]
    65015cac:	movzx  eax,BYTE PTR [r12+0x47]
    65015cb2:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015cbb:	shl    ebx,0x8
    65015cbe:	xor    ebx,eax
    65015cc0:	movzx  eax,BYTE PTR [r12+0x46]
    65015cc6:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015ccf:	shl    ebx,0x8
    65015cd2:	xor    ebx,eax
    65015cd4:	movzx  eax,BYTE PTR [r12+0x45]
    65015cda:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015ce3:	shl    ebx,0x8
    65015ce6:	xor    ebx,eax
    65015ce8:	xor    ebx,DWORD PTR [r13+0x4]
    65015cec:	xor    ebx,r11d
    65015cef:	mov    r9d,ebx
    65015cf2:	mov    DWORD PTR [r12+0x48],ebx
    65015cf7:	xor    r9d,r10d
    65015cfa:	mov    DWORD PTR [r12+0x4c],r9d
    65015cff:	mov    r11d,r9d
    65015d02:	add    r13,0x10
    65015d06:	add    r12,0x60
    65015d0a:	xor    r11d,edi
    65015d0d:	mov    DWORD PTR [r12-0x10],r11d
    65015d12:	mov    r10d,r11d
    65015d15:	xor    r10d,esi
    65015d18:	mov    DWORD PTR [r12-0xc],r10d
    65015d1d:	xor    ebp,r10d
    65015d20:	xor    edx,ebp
    65015d22:	mov    DWORD PTR [r12-0x8],ebp
    65015d27:	mov    r8d,edx
    65015d2a:	movzx  eax,dl
    65015d2d:	mov    DWORD PTR [r12-0x4],r8d
    65015d32:	movzx  edx,BYTE PTR [rax+r14*1+0x45b30]
    65015d3b:	movzx  eax,BYTE PTR [r12-0x1]
    65015d41:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015d4a:	shl    edx,0x8
    65015d4d:	xor    edx,eax
    65015d4f:	movzx  eax,BYTE PTR [r12-0x2]
    65015d55:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015d5e:	shl    edx,0x8
    65015d61:	xor    edx,eax
    65015d63:	movzx  eax,BYTE PTR [r12-0x3]
    65015d69:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015d72:	shl    edx,0x8
    65015d75:	xor    edx,eax
    65015d77:	xor    edx,DWORD PTR [r13-0x8]
    65015d7b:	xor    edx,ebx
    65015d7d:	mov    DWORD PTR [r12],edx
    65015d81:	xor    edx,r9d
    65015d84:	xor    r11d,edx
    65015d87:	mov    DWORD PTR [r12+0x4],edx
    65015d8c:	xor    r10d,r11d
    65015d8f:	mov    DWORD PTR [r12+0x8],r11d
    65015d94:	xor    ebp,r10d
    65015d97:	mov    DWORD PTR [r12+0xc],r10d
    65015d9c:	xor    r8d,ebp
    65015d9f:	cmp    r13,r15
    65015da2:	mov    DWORD PTR [r12+0x10],ebp
    65015da7:	mov    DWORD PTR [r12+0x14],r8d
    65015dac:	jl     0x65015b80
    65015db2:	mov    r15,QWORD PTR [rsp+0x20]
    65015db7:	mov    rbp,QWORD PTR [rsp+0x50]
    65015dbc:	jmp    0x65016031
    65015dc1:	lea    r13,[rip+0x2fd44]        # 0x65045b0c
    65015dc8:	lea    rsi,[rip+0x2fd65]        # 0x65045b34
    65015dcf:	nop
    65015dd0:	mov    edx,DWORD PTR [r12+0xc]
    65015dd5:	mov    r8d,DWORD PTR [r12+0x4]
    65015dda:	mov    r9d,DWORD PTR [r12+0x8]
    65015ddf:	movzx  eax,dl
    65015de2:	movzx  r10d,BYTE PTR [rax+r14*1+0x45b30]
    65015deb:	movzx  eax,BYTE PTR [r12+0xf]
    65015df1:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015dfa:	shl    r10d,0x8
    65015dfe:	xor    r10d,eax
    65015e01:	movzx  eax,BYTE PTR [r12+0xe]
    65015e07:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015e10:	shl    r10d,0x8
    65015e14:	xor    r10d,eax
    65015e17:	movzx  eax,BYTE PTR [r12+0xd]
    65015e1d:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015e26:	shl    r10d,0x8
    65015e2a:	xor    r10d,eax
    65015e2d:	xor    r10d,DWORD PTR [r13-0x4]
    65015e31:	xor    r10d,DWORD PTR [r12]
    65015e35:	mov    DWORD PTR [r12+0x10],r10d
    65015e3a:	xor    r8d,r10d
    65015e3d:	mov    DWORD PTR [r12+0x14],r8d
    65015e42:	xor    r9d,r8d
    65015e45:	mov    DWORD PTR [r12+0x18],r9d
    65015e4a:	xor    edx,r9d
    65015e4d:	mov    DWORD PTR [r12+0x1c],edx
    65015e52:	movzx  eax,dl
    65015e55:	movzx  r11d,BYTE PTR [rax+r14*1+0x45b30]
    65015e5e:	movzx  eax,BYTE PTR [r12+0x1f]
    65015e64:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015e6d:	shl    r11d,0x8
    65015e71:	xor    r11d,eax
    65015e74:	movzx  eax,BYTE PTR [r12+0x1e]
    65015e7a:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015e83:	shl    r11d,0x8
    65015e87:	xor    r11d,eax
    65015e8a:	movzx  eax,BYTE PTR [r12+0x1d]
    65015e90:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015e99:	shl    r11d,0x8
    65015e9d:	xor    r11d,eax
    65015ea0:	xor    r11d,r10d
    65015ea3:	xor    r11d,DWORD PTR [r13+0x0]
    65015ea7:	mov    DWORD PTR [r12+0x20],r11d
    65015eac:	mov    r10d,r11d
    65015eaf:	xor    r10d,r8d
    65015eb2:	mov    DWORD PTR [r12+0x24],r10d
    65015eb7:	mov    r8d,r10d
    65015eba:	xor    r8d,r9d
    65015ebd:	mov    DWORD PTR [r12+0x28],r8d
    65015ec2:	mov    eax,r8d
    65015ec5:	xor    eax,edx
    65015ec7:	mov    edx,eax
    65015ec9:	movzx  eax,al
    65015ecc:	mov    DWORD PTR [r12+0x2c],edx
    65015ed1:	movzx  ebx,BYTE PTR [rax+r14*1+0x45b30]
    65015eda:	movzx  eax,BYTE PTR [r12+0x2f]
    65015ee0:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015ee9:	shl    ebx,0x8
    65015eec:	xor    ebx,eax
    65015eee:	movzx  eax,BYTE PTR [r12+0x2e]
    65015ef4:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015efd:	shl    ebx,0x8
    65015f00:	xor    ebx,eax
    65015f02:	movzx  eax,BYTE PTR [r12+0x2d]
    65015f08:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015f11:	shl    ebx,0x8
    65015f14:	xor    ebx,eax
    65015f16:	xor    ebx,DWORD PTR [r13+0x4]
    65015f1a:	xor    ebx,r11d
    65015f1d:	mov    r9d,ebx
    65015f20:	mov    DWORD PTR [r12+0x30],ebx
    65015f25:	xor    r9d,r10d
    65015f28:	mov    r10d,r9d
    65015f2b:	mov    DWORD PTR [r12+0x34],r9d
    65015f30:	xor    r10d,r8d
    65015f33:	xor    edx,r10d
    65015f36:	mov    DWORD PTR [r12+0x38],r10d
    65015f3b:	movzx  eax,dl
    65015f3e:	mov    DWORD PTR [r12+0x3c],edx
    65015f43:	movzx  edi,BYTE PTR [rax+r14*1+0x45b30]
    65015f4c:	shl    edi,0x8
    65015f4f:	movzx  eax,BYTE PTR [r12+0x3f]
    65015f55:	add    r13,0x14
    65015f59:	add    r12,0x50
    65015f5d:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015f66:	xor    edi,eax
    65015f68:	movzx  eax,BYTE PTR [r12-0x12]
    65015f6e:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015f77:	shl    edi,0x8
    65015f7a:	xor    edi,eax
    65015f7c:	movzx  eax,BYTE PTR [r12-0x13]
    65015f82:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015f8b:	shl    edi,0x8
    65015f8e:	xor    edi,eax
    65015f90:	xor    edi,DWORD PTR [r13-0xc]
    65015f94:	xor    edi,ebx
    65015f96:	mov    DWORD PTR [r12-0x10],edi
    65015f9b:	mov    r11d,edi
    65015f9e:	xor    r11d,r9d
    65015fa1:	mov    DWORD PTR [r12-0xc],r11d
    65015fa6:	mov    r9d,r11d
    65015fa9:	xor    r9d,r10d
    65015fac:	mov    DWORD PTR [r12-0x8],r9d
    65015fb1:	mov    eax,r9d
    65015fb4:	xor    eax,edx
    65015fb6:	mov    r8d,eax
    65015fb9:	movzx  eax,al
    65015fbc:	mov    DWORD PTR [r12-0x4],r8d
    65015fc1:	movzx  edx,BYTE PTR [rax+r14*1+0x45b30]
    65015fca:	movzx  eax,BYTE PTR [r12-0x1]
    65015fd0:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015fd9:	shl    edx,0x8
    65015fdc:	xor    edx,eax
    65015fde:	movzx  eax,BYTE PTR [r12-0x2]
    65015fe4:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65015fed:	shl    edx,0x8
    65015ff0:	xor    edx,eax
    65015ff2:	movzx  eax,BYTE PTR [r12-0x3]
    65015ff8:	movzx  eax,BYTE PTR [rax+r14*1+0x45b30]
    65016001:	shl    edx,0x8
    65016004:	xor    edx,eax
    65016006:	xor    edx,DWORD PTR [r13-0x8]
    6501600a:	xor    edx,edi
    6501600c:	mov    DWORD PTR [r12],edx
    65016010:	xor    edx,r11d
    65016013:	mov    DWORD PTR [r12+0x4],edx
    65016018:	xor    edx,r9d
    6501601b:	mov    DWORD PTR [r12+0x8],edx
    65016020:	xor    edx,r8d
    65016023:	cmp    r13,rsi
    65016026:	mov    DWORD PTR [r12+0xc],edx
    6501602b:	jl     0x65015dd0
    65016031:	mov    r13,QWORD PTR [rsp+0x28]
    65016036:	mov    rdi,QWORD PTR [rsp+0x60]
    6501603b:	mov    rsi,QWORD PTR [rsp+0x58]
    65016040:	add    rsp,0x30
    65016044:	pop    r14
    65016046:	pop    r12
    65016048:	pop    rbx
    65016049:	ret    
    6501604a:	int3   
    6501604b:	int3   
    6501604c:	int3   
    6501604d:	int3   
    6501604e:	int3   
    6501604f:	int3   
    65016050:	mov    QWORD PTR [rsp+0x8],rbx
    65016055:	push   rdi
    65016056:	sub    rsp,0x140
    6501605d:	lea    rdi,[rcx+0x10]
    65016061:	mov    rbx,rcx
    65016064:	mov    DWORD PTR [rcx],0xa
    6501606a:	mov    QWORD PTR [rcx+0x8],rdi
    6501606e:	lea    rdx,[rip+0x2e8e3]        # 0x65044958
    65016075:	lea    rcx,[rsp+0x20]
    6501607a:	mov    r8d,0x80
    65016080:	call   0x65015990
    65016085:	mov    rax,QWORD PTR [rsp+0x28]
    6501608a:	mov    r11d,DWORD PTR [rsp+0x20]
    6501608f:	shl    r11d,0x2
    65016093:	add    rdi,0x10
    65016097:	movsxd rdx,r11d
    6501609a:	lea    r9,[rax+rdx*4]
    6501609e:	sub    r9,0x10
    650160a2:	mov    eax,DWORD PTR [r9+0x10]
    650160a6:	mov    DWORD PTR [rdi-0x10],eax
    650160a9:	mov    eax,DWORD PTR [r9+0x14]
    650160ad:	mov    DWORD PTR [rdi-0xc],eax
    650160b0:	mov    eax,DWORD PTR [r9+0x18]
    650160b4:	mov    DWORD PTR [rdi-0x8],eax
    650160b7:	mov    eax,DWORD PTR [r9+0x1c]
    650160bb:	mov    DWORD PTR [rdi-0x4],eax
    650160be:	mov    r10d,DWORD PTR [rbx]
    650160c1:	sub    r10d,0x1
    650160c5:	test   r10d,r10d
    650160c8:	jle    0x65016264
    650160ce:	lea    r11,[rip+0xfffffffffffe9f2b]        # 0x65000000
    650160d5:	data16 data16 xchg ax,ax
    650160d9:	data16 xchg ax,ax
    650160dc:	data16 data16 xchg ax,ax
    650160e0:	movzx  eax,BYTE PTR [r9]
    650160e4:	sub    r10d,0x1
    650160e8:	add    rdi,0x10
    650160ec:	movzx  edx,BYTE PTR [rax+r11*1+0x45b30]
    650160f5:	movzx  eax,BYTE PTR [r9+0x3]
    650160fa:	sub    r9,0x10
    650160fe:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    65016107:	mov    r8d,DWORD PTR [r11+rdx*4+0x46830]
    6501610f:	movzx  eax,BYTE PTR [r9+0x12]
    65016114:	xor    r8d,DWORD PTR [r11+rcx*4+0x45c30]
    6501611c:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    65016125:	movzx  eax,BYTE PTR [r9+0x11]
    6501612a:	xor    r8d,DWORD PTR [r11+rcx*4+0x46030]
    65016132:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    6501613b:	xor    r8d,DWORD PTR [r11+rcx*4+0x46430]
    65016143:	mov    DWORD PTR [rdi-0x10],r8d
    65016147:	movzx  eax,BYTE PTR [r9+0x14]
    6501614c:	movzx  edx,BYTE PTR [rax+r11*1+0x45b30]
    65016155:	movzx  eax,BYTE PTR [r9+0x17]
    6501615a:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    65016163:	movzx  eax,BYTE PTR [r9+0x16]
    65016168:	mov    r8d,DWORD PTR [r11+rdx*4+0x46830]
    65016170:	xor    r8d,DWORD PTR [r11+rcx*4+0x45c30]
    65016178:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    65016181:	movzx  eax,BYTE PTR [r9+0x15]
    65016186:	xor    r8d,DWORD PTR [r11+rcx*4+0x46030]
    6501618e:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    65016197:	xor    r8d,DWORD PTR [r11+rcx*4+0x46430]
    6501619f:	mov    DWORD PTR [rdi-0xc],r8d
    650161a3:	movzx  eax,BYTE PTR [r9+0x18]
    650161a8:	movzx  edx,BYTE PTR [rax+r11*1+0x45b30]
    650161b1:	movzx  eax,BYTE PTR [r9+0x1b]
    650161b6:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    650161bf:	movzx  eax,BYTE PTR [r9+0x1a]
    650161c4:	mov    r8d,DWORD PTR [r11+rdx*4+0x46830]
    650161cc:	xor    r8d,DWORD PTR [r11+rcx*4+0x45c30]
    650161d4:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    650161dd:	movzx  eax,BYTE PTR [r9+0x19]
    650161e2:	xor    r8d,DWORD PTR [r11+rcx*4+0x46030]
    650161ea:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    650161f3:	xor    r8d,DWORD PTR [r11+rcx*4+0x46430]
    650161fb:	mov    DWORD PTR [rdi-0x8],r8d
    650161ff:	movzx  eax,BYTE PTR [r9+0x1c]
    65016204:	movzx  edx,BYTE PTR [rax+r11*1+0x45b30]
    6501620d:	movzx  eax,BYTE PTR [r9+0x1f]
    65016212:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    6501621b:	movzx  eax,BYTE PTR [r9+0x1e]
    65016220:	mov    r8d,DWORD PTR [r11+rdx*4+0x46830]
    65016228:	xor    r8d,DWORD PTR [r11+rcx*4+0x45c30]
    65016230:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    65016239:	movzx  eax,BYTE PTR [r9+0x1d]
    6501623e:	xor    r8d,DWORD PTR [r11+rcx*4+0x46030]
    65016246:	movzx  ecx,BYTE PTR [rax+r11*1+0x45b30]
    6501624f:	xor    r8d,DWORD PTR [r11+rcx*4+0x46430]
    65016257:	test   r10d,r10d
    6501625a:	mov    DWORD PTR [rdi-0x4],r8d
    6501625e:	jg     0x650160e0
    65016264:	mov    eax,DWORD PTR [r9]
    65016267:	mov    rbx,QWORD PTR [rsp+0x150]
    6501626f:	mov    DWORD PTR [rdi],eax
    65016271:	mov    eax,DWORD PTR [r9+0x4]
    65016275:	mov    DWORD PTR [rdi+0x4],eax
    65016278:	mov    eax,DWORD PTR [r9+0x8]
    6501627c:	mov    DWORD PTR [rdi+0x8],eax
    6501627f:	mov    eax,DWORD PTR [r9+0xc]
    65016283:	mov    DWORD PTR [rdi+0xc],eax
    65016286:	add    rsp,0x140
    6501628d:	pop    rdi
    6501628e:	ret    
    6501628f:	int3   
    65016290:	mov    QWORD PTR [rsp+0x8],rbx
    65016295:	mov    QWORD PTR [rsp+0x18],rbp
    6501629a:	mov    QWORD PTR [rsp+0x20],r9
    6501629f:	push   rsi
    650162a0:	push   rdi
    650162a1:	push   r12
    650162a3:	push   r13
    650162a5:	push   r14
    650162a7:	push   r15
    650162a9:	mov    rbp,QWORD PTR [rcx+0x8]
    650162ad:	movzx  eax,BYTE PTR [r8+0x2]
    650162b2:	movzx  ebx,BYTE PTR [r8+0x3]
    650162b7:	movzx  r13d,BYTE PTR [r8+0x7]
    650162bc:	movzx  r14d,BYTE PTR [r8+0xb]
    650162c1:	shl    ebx,0x8
    650162c4:	or     ebx,eax
    650162c6:	movzx  eax,BYTE PTR [r8+0x1]
    650162cb:	shl    r13d,0x8
    650162cf:	mov    r15,r9
    650162d2:	movzx  r9d,BYTE PTR [r8+0xf]
    650162d7:	shl    r14d,0x8
    650162db:	shl    r9d,0x8
    650162df:	shl    ebx,0x8
    650162e2:	add    rbp,0x10
    650162e6:	or     ebx,eax
    650162e8:	movzx  eax,BYTE PTR [r8]
    650162ec:	lea    r12,[rip+0xfffffffffffe9d0d]        # 0x65000000
    650162f3:	shl    ebx,0x8
    650162f6:	or     ebx,eax
    650162f8:	movzx  eax,BYTE PTR [r8+0x6]
    650162fd:	xor    ebx,DWORD PTR [rbp-0x10]
    65016300:	or     r13d,eax
    65016303:	movzx  eax,BYTE PTR [r8+0x5]
    65016308:	shl    r13d,0x8
    6501630c:	or     r13d,eax
    6501630f:	movzx  eax,BYTE PTR [r8+0x4]
    65016314:	shl    r13d,0x8
    65016318:	or     r13d,eax
    6501631b:	movzx  eax,BYTE PTR [r8+0xa]
    65016320:	xor    r13d,DWORD PTR [rbp-0xc]
    65016324:	or     r14d,eax
    65016327:	movzx  eax,BYTE PTR [r8+0x9]
    6501632c:	shl    r14d,0x8
    65016330:	or     r14d,eax
    65016333:	movzx  eax,BYTE PTR [r8+0x8]
    65016338:	shl    r14d,0x8
    6501633c:	or     r14d,eax
    6501633f:	movzx  eax,BYTE PTR [r8+0xe]
    65016344:	xor    r14d,DWORD PTR [rbp-0x8]
    65016348:	or     r9d,eax
    6501634b:	movzx  eax,BYTE PTR [r8+0xd]
    65016350:	shl    r9d,0x8
    65016354:	or     r9d,eax
    65016357:	movzx  eax,BYTE PTR [r8+0xc]
    6501635c:	shl    r9d,0x8
    65016360:	or     r9d,eax
    65016363:	mov    eax,DWORD PTR [rcx]
    65016365:	xor    r9d,DWORD PTR [rbp-0x4]
    65016369:	sar    eax,1
    6501636b:	sub    eax,0x1
    6501636e:	test   edx,edx
    65016370:	jne    0x65016814
    65016376:	test   eax,eax
    65016378:	jle    0x650165b4
    6501637e:	mov    r15d,eax
    65016381:	mov    edi,ebx
    65016383:	mov    esi,r9d
    65016386:	mov    eax,r14d
    65016389:	shr    rax,0x10
    6501638d:	mov    r10d,r13d
    65016390:	mov    r11d,r14d
    65016393:	movzx  edx,al
    65016396:	mov    eax,r9d
    65016399:	shr    r10,0x10
    6501639d:	mov    ebx,DWORD PTR [r12+rdx*4+0x46030]
    650163a5:	shr    rax,0x8
    650163a9:	shr    r11,0x8
    650163ad:	movzx  ecx,al
    650163b0:	mov    eax,r13d
    650163b3:	xor    ebx,DWORD PTR [r12+rcx*4+0x46430]
    650163bb:	shr    rax,0x18
    650163bf:	xor    ebx,DWORD PTR [r12+rax*4+0x45c30]
    650163c7:	movzx  eax,dil
    650163cb:	xor    ebx,DWORD PTR [r12+rax*4+0x46830]
    650163d3:	mov    rax,rdi
    650163d6:	xor    ebx,DWORD PTR [rbp+0x0]
    650163d9:	shr    rax,0x8
    650163dd:	movzx  edx,al
    650163e0:	mov    eax,r9d
    650163e3:	mov    r9d,DWORD PTR [r12+rdx*4+0x46430]
    650163eb:	shr    rax,0x10
    650163ef:	movzx  ecx,al
    650163f2:	mov    eax,r14d
    650163f5:	xor    r9d,DWORD PTR [r12+rcx*4+0x46030]
    650163fd:	shr    rax,0x18
    65016401:	xor    r9d,DWORD PTR [r12+rax*4+0x45c30]
    65016409:	movzx  eax,r13b
    6501640d:	xor    r9d,DWORD PTR [r12+rax*4+0x46830]
    65016415:	mov    eax,r13d
    65016418:	xor    r9d,DWORD PTR [rbp+0x4]
    6501641c:	shr    rax,0x8
    65016420:	movzx  edx,al
    65016423:	mov    rax,rdi
    65016426:	shr    rdi,0x18
    6501642a:	mov    r8d,DWORD PTR [r12+rdx*4+0x46430]
    65016432:	shr    rax,0x10
    65016436:	movzx  ecx,al
    65016439:	mov    rax,rsi
    6501643c:	xor    r8d,DWORD PTR [r12+rcx*4+0x46030]
    65016444:	shr    rax,0x18
    65016448:	movzx  ecx,r10b
    6501644c:	xor    r8d,DWORD PTR [r12+rax*4+0x45c30]
    65016454:	mov    edx,DWORD PTR [r12+rcx*4+0x46030]
    6501645c:	movzx  eax,r14b
    65016460:	xor    r8d,DWORD PTR [r12+rax*4+0x46830]
    65016468:	movzx  eax,r11b
    6501646c:	mov    r11d,ebx
    6501646f:	xor    edx,DWORD PTR [r12+rax*4+0x46430]
    65016477:	xor    r8d,DWORD PTR [rbp+0x8]
    6501647b:	movzx  eax,sil
    6501647f:	xor    edx,DWORD PTR [r12+rdi*4+0x45c30]
    65016487:	mov    r10d,r8d
    6501648a:	mov    r8d,r9d
    6501648d:	xor    edx,DWORD PTR [r12+rax*4+0x46830]
    65016495:	mov    rax,r10
    65016498:	xor    edx,DWORD PTR [rbp+0xc]
    6501649b:	shr    rax,0x10
    6501649f:	mov    edi,edx
    650164a1:	movzx  edx,al
    650164a4:	mov    ebx,DWORD PTR [r12+rdx*4+0x46030]
    650164ac:	mov    rax,rdi
    650164af:	shr    rax,0x8
    650164b3:	movzx  ecx,al
    650164b6:	mov    eax,r9d
    650164b9:	xor    ebx,DWORD PTR [r12+rcx*4+0x46430]
    650164c1:	shr    rax,0x18
    650164c5:	xor    ebx,DWORD PTR [r12+rax*4+0x45c30]
    650164cd:	movzx  eax,r11b
    650164d1:	xor    ebx,DWORD PTR [r12+rax*4+0x46830]
    650164d9:	mov    rax,r11
    650164dc:	xor    ebx,DWORD PTR [rbp+0x10]
    650164df:	shr    rax,0x8
    650164e3:	movzx  edx,al
    650164e6:	mov    rax,rdi
    650164e9:	shr    rax,0x10
    650164ed:	movzx  ecx,al
    650164f0:	mov    r13d,DWORD PTR [r12+rdx*4+0x46430]
    650164f8:	mov    rax,r10
    650164fb:	shr    r8,0x10
    650164ff:	xor    r13d,DWORD PTR [r12+rcx*4+0x46030]
    65016507:	shr    rax,0x18
    6501650b:	sub    r15d,0x1
    6501650f:	xor    r13d,DWORD PTR [r12+rax*4+0x45c30]
    65016517:	movzx  eax,r9b
    6501651b:	add    rbp,0x20
    6501651f:	xor    r13d,DWORD PTR [r12+rax*4+0x46830]
    65016527:	mov    eax,r9d
    6501652a:	xor    r13d,DWORD PTR [rbp-0xc]
    6501652e:	shr    rax,0x8
    65016532:	movzx  edx,al
    65016535:	mov    rax,r11
    65016538:	shr    r11,0x18
    6501653c:	mov    r14d,DWORD PTR [r12+rdx*4+0x46430]
    65016544:	shr    rax,0x10
    65016548:	movzx  ecx,al
    6501654b:	mov    rax,rdi
    6501654e:	xor    r14d,DWORD PTR [r12+rcx*4+0x46030]
    65016556:	shr    rax,0x18
    6501655a:	movzx  ecx,r8b
    6501655e:	xor    r14d,DWORD PTR [r12+rax*4+0x45c30]
    65016566:	mov    r9d,DWORD PTR [r12+rcx*4+0x46030]
    6501656e:	movzx  eax,r10b
    65016572:	xor    r14d,DWORD PTR [r12+rax*4+0x46830]
    6501657a:	shr    r10,0x8
    6501657e:	xor    r14d,DWORD PTR [rbp-0x8]
    65016582:	movzx  eax,r10b
    65016586:	xor    r9d,DWORD PTR [r12+rax*4+0x46430]
    6501658e:	movzx  eax,dil
    65016592:	xor    r9d,DWORD PTR [r12+r11*4+0x45c30]
    6501659a:	xor    r9d,DWORD PTR [r12+rax*4+0x46830]
    650165a2:	xor    r9d,DWORD PTR [rbp-0x4]
    650165a6:	test   r15d,r15d
    650165a9:	jg     0x65016381
    650165af:	mov    r15,QWORD PTR [rsp+0x50]
    650165b4:	mov    esi,r9d
    650165b7:	mov    eax,r14d
    650165ba:	mov    r10d,r13d
    650165bd:	shr    rax,0x10
    650165c1:	shr    r10,0x10
    650165c5:	mov    r11d,r14d
    650165c8:	movzx  edx,al
    650165cb:	mov    eax,r9d
    650165ce:	shr    r11,0x8
    650165d2:	mov    edi,DWORD PTR [r12+rdx*4+0x46030]
    650165da:	shr    rax,0x8
    650165de:	movzx  ecx,al
    650165e1:	mov    eax,r13d
    650165e4:	xor    edi,DWORD PTR [r12+rcx*4+0x46430]
    650165ec:	shr    rax,0x18
    650165f0:	xor    edi,DWORD PTR [r12+rax*4+0x45c30]
    650165f8:	movzx  eax,bl
    650165fb:	xor    edi,DWORD PTR [r12+rax*4+0x46830]
    65016603:	mov    rax,rbx
    65016606:	xor    edi,DWORD PTR [rbp+0x0]
    65016609:	shr    rax,0x8
    6501660d:	movzx  edx,al
    65016610:	mov    eax,r9d
    65016613:	mov    r9d,DWORD PTR [r12+rdx*4+0x46430]
    6501661b:	shr    rax,0x10
    6501661f:	movzx  ecx,al
    65016622:	mov    eax,r14d
    65016625:	xor    r9d,DWORD PTR [r12+rcx*4+0x46030]
    6501662d:	shr    rax,0x18
    65016631:	xor    r9d,DWORD PTR [r12+rax*4+0x45c30]
    65016639:	movzx  eax,r13b
    6501663d:	xor    r9d,DWORD PTR [r12+rax*4+0x46830]
    65016645:	mov    eax,r13d
    65016648:	xor    r9d,DWORD PTR [rbp+0x4]
    6501664c:	shr    rax,0x8
    65016650:	movzx  edx,al
    65016653:	mov    rax,rbx
    65016656:	shr    rbx,0x18
    6501665a:	mov    r8d,DWORD PTR [r12+rdx*4+0x46430]
    65016662:	shr    rax,0x10
    65016666:	movzx  ecx,al
    65016669:	mov    rax,rsi
    6501666c:	xor    r8d,DWORD PTR [r12+rcx*4+0x46030]
    65016674:	shr    rax,0x18
    65016678:	movzx  ecx,r10b
    6501667c:	xor    r8d,DWORD PTR [r12+rax*4+0x45c30]
    65016684:	mov    edx,DWORD PTR [r12+rcx*4+0x46030]
    6501668c:	movzx  eax,r14b
    65016690:	xor    r8d,DWORD PTR [r12+rax*4+0x46830]
    65016698:	movzx  eax,r11b
    6501669c:	xor    edx,DWORD PTR [r12+rax*4+0x46430]
    650166a4:	xor    r8d,DWORD PTR [rbp+0x8]
    650166a8:	movzx  eax,sil
    650166ac:	xor    edx,DWORD PTR [r12+rbx*4+0x45c30]
    650166b4:	mov    r10d,r8d
    650166b7:	mov    r8d,r9d
    650166ba:	xor    edx,DWORD PTR [r12+rax*4+0x46830]
    650166c2:	mov    rax,r8
    650166c5:	xor    edx,DWORD PTR [rbp+0xc]
    650166c8:	shr    rax,0x18
    650166cc:	movzx  ebx,BYTE PTR [rax+r12*1+0x47c30]
    650166d5:	mov    r9d,edx
    650166d8:	mov    rax,r10
    650166db:	shr    rax,0x10
    650166df:	shl    ebx,0x8
    650166e2:	mov    edx,edi
    650166e4:	movzx  ecx,al
    650166e7:	movzx  eax,BYTE PTR [rcx+r12*1+0x47c30]
    650166f0:	xor    ebx,eax
    650166f2:	mov    rax,r9
    650166f5:	shr    rax,0x8
    650166f9:	shl    ebx,0x8
    650166fc:	movzx  ecx,al
    650166ff:	movzx  eax,BYTE PTR [rcx+r12*1+0x47c30]
    65016708:	xor    ebx,eax
    6501670a:	movzx  eax,dil
    6501670e:	movzx  eax,BYTE PTR [rax+r12*1+0x47c30]
    65016717:	shl    ebx,0x8
    6501671a:	xor    ebx,eax
    6501671c:	mov    rax,r9
    6501671f:	xor    ebx,DWORD PTR [rbp+0x10]
    65016722:	shr    rax,0x10
    65016726:	movzx  ecx,al
    65016729:	mov    rax,r10
    6501672c:	movzx  edi,BYTE PTR [rcx+r12*1+0x47c30]
    65016735:	shr    rax,0x18
    65016739:	movzx  eax,BYTE PTR [rax+r12*1+0x47c30]
    65016742:	shl    eax,0x8
    65016745:	xor    edi,eax
    65016747:	mov    rax,rdx
    6501674a:	shr    rax,0x8
    6501674e:	shl    edi,0x8
    65016751:	movzx  ecx,al
    65016754:	movzx  eax,BYTE PTR [rcx+r12*1+0x47c30]
    6501675d:	xor    edi,eax
    6501675f:	movzx  eax,r8b
    65016763:	movzx  eax,BYTE PTR [rax+r12*1+0x47c30]
    6501676c:	shl    edi,0x8
    6501676f:	xor    edi,eax
    65016771:	mov    rax,rdx
    65016774:	shr    rdx,0x18
    65016778:	xor    edi,DWORD PTR [rbp+0x14]
    6501677b:	shr    rax,0x10
    6501677f:	movzx  ecx,al
    65016782:	mov    rax,r9
    65016785:	movzx  esi,BYTE PTR [rcx+r12*1+0x47c30]
    6501678e:	shr    rax,0x18
    65016792:	movzx  eax,BYTE PTR [rax+r12*1+0x47c30]
    6501679b:	shl    eax,0x8
    6501679e:	xor    esi,eax
    650167a0:	mov    rax,r8
    650167a3:	shr    r8,0x10
    650167a7:	shr    rax,0x8
    650167ab:	shl    esi,0x8
    650167ae:	movzx  ecx,al
    650167b1:	movzx  eax,BYTE PTR [rcx+r12*1+0x47c30]
    650167ba:	xor    esi,eax
    650167bc:	movzx  eax,r10b
    650167c0:	shr    r10,0x8
    650167c4:	movzx  eax,BYTE PTR [rax+r12*1+0x47c30]
    650167cd:	shl    esi,0x8
    650167d0:	xor    esi,eax
    650167d2:	movzx  eax,r8b
    650167d6:	movzx  r13d,BYTE PTR [rax+r12*1+0x47c30]
    650167df:	movzx  eax,BYTE PTR [rdx+r12*1+0x47c30]
    650167e8:	shl    eax,0x8
    650167eb:	xor    r13d,eax
    650167ee:	movzx  eax,r10b
    650167f2:	movzx  eax,BYTE PTR [rax+r12*1+0x47c30]
    650167fb:	shl    r13d,0x8
    650167ff:	xor    r13d,eax
    65016802:	movzx  eax,r9b
    65016806:	movzx  eax,BYTE PTR [rax+r12*1+0x47c30]
    6501680f:	jmp    0x65016cab
    65016814:	test   eax,eax
    65016816:	jle    0x65016a50
    6501681c:	mov    r15d,eax
    6501681f:	nop
    65016820:	mov    r11d,ebx
    65016823:	mov    ebx,r9d
    65016826:	mov    eax,r13d
    65016829:	shr    rax,0x8
    6501682d:	mov    r10d,r13d
    65016830:	mov    esi,r14d
    65016833:	movzx  edx,al
    65016836:	shr    r10,0x10
    6501683a:	mov    eax,r14d
    6501683d:	mov    edi,DWORD PTR [r12+rdx*4+0x47430]
    65016845:	shr    rax,0x10
    65016849:	shr    rsi,0x18
    6501684d:	movzx  ecx,al
    65016850:	mov    eax,r9d
    65016853:	xor    edi,DWORD PTR [r12+rcx*4+0x47030]
    6501685b:	shr    rax,0x18
    6501685f:	xor    edi,DWORD PTR [r12+rax*4+0x46c30]
    65016867:	movzx  eax,r11b
    6501686b:	xor    edi,DWORD PTR [r12+rax*4+0x47830]
    65016873:	mov    eax,r14d
    65016876:	xor    edi,DWORD PTR [rbp+0x0]
    65016879:	shr    rax,0x8
    6501687d:	movzx  edx,al
    65016880:	mov    eax,r9d
    65016883:	mov    r9d,DWORD PTR [r12+rdx*4+0x47430]
    6501688b:	shr    rax,0x10
    6501688f:	movzx  ecx,al
    65016892:	mov    rax,r11
    65016895:	xor    r9d,DWORD PTR [r12+rcx*4+0x47030]
    6501689d:	shr    rax,0x18
    650168a1:	xor    r9d,DWORD PTR [r12+rax*4+0x46c30]
    650168a9:	movzx  eax,r13b
    650168ad:	xor    r9d,DWORD PTR [r12+rax*4+0x47830]
    650168b5:	mov    rax,r11
    650168b8:	shr    r11,0x8
    650168bc:	xor    r9d,DWORD PTR [rbp+0x4]
    650168c0:	shr    rax,0x10
    650168c4:	movzx  edx,al
    650168c7:	mov    rax,rbx
    650168ca:	mov    r8d,DWORD PTR [r12+rdx*4+0x47030]
    650168d2:	shr    rax,0x8
    650168d6:	movzx  ecx,al
    650168d9:	mov    eax,r13d
    650168dc:	xor    r8d,DWORD PTR [r12+rcx*4+0x47430]
    650168e4:	shr    rax,0x18
    650168e8:	movzx  ecx,r10b
    650168ec:	xor    r8d,DWORD PTR [r12+rax*4+0x46c30]
    650168f4:	mov    r10d,DWORD PTR [r12+rcx*4+0x47030]
    650168fc:	movzx  eax,r14b
    65016900:	xor    r8d,DWORD PTR [r12+rax*4+0x47830]
    65016908:	movzx  eax,r11b
    6501690c:	xor    r10d,DWORD PTR [r12+rax*4+0x47430]
    65016914:	xor    r8d,DWORD PTR [rbp+0x8]
    65016918:	movzx  eax,bl
    6501691b:	xor    r10d,DWORD PTR [r12+rsi*4+0x46c30]
    65016923:	mov    r11d,r8d
    65016926:	mov    r8d,r9d
    65016929:	xor    r10d,DWORD PTR [r12+rax*4+0x47830]
    65016931:	mov    rax,r8
    65016934:	mov    r9d,edi
    65016937:	xor    r10d,DWORD PTR [rbp+0xc]
    6501693b:	shr    rax,0x8
    6501693f:	movzx  edx,al
    65016942:	mov    rax,r11
    65016945:	mov    ebx,DWORD PTR [r12+rdx*4+0x47430]
    6501694d:	shr    rax,0x10
    65016951:	movzx  ecx,al
    65016954:	mov    rax,r10
    65016957:	xor    ebx,DWORD PTR [r12+rcx*4+0x47030]
    6501695f:	shr    rax,0x18
    65016963:	xor    ebx,DWORD PTR [r12+rax*4+0x46c30]
    6501696b:	movzx  eax,dil
    6501696f:	xor    ebx,DWORD PTR [r12+rax*4+0x47830]
    65016977:	mov    rax,r11
    6501697a:	xor    ebx,DWORD PTR [rbp+0x10]
    6501697d:	shr    rax,0x8
    65016981:	movzx  edx,al
    65016984:	mov    rax,r10
    65016987:	mov    r13d,DWORD PTR [r12+rdx*4+0x47430]
    6501698f:	shr    rax,0x10
    65016993:	movzx  ecx,al
    65016996:	xor    r13d,DWORD PTR [r12+rcx*4+0x47030]
    6501699e:	shr    r9,0x8
    650169a2:	mov    eax,edi
    650169a4:	shr    rax,0x18
    650169a8:	sub    r15d,0x1
    650169ac:	add    rbp,0x20
    650169b0:	xor    r13d,DWORD PTR [r12+rax*4+0x46c30]
    650169b8:	movzx  eax,r8b
    650169bc:	xor    r13d,DWORD PTR [r12+rax*4+0x47830]
    650169c4:	mov    eax,edi
    650169c6:	xor    r13d,DWORD PTR [rbp-0xc]
    650169ca:	shr    rax,0x10
    650169ce:	movzx  edx,al
    650169d1:	mov    rax,r10
    650169d4:	mov    r14d,DWORD PTR [r12+rdx*4+0x47030]
    650169dc:	shr    rax,0x8
    650169e0:	movzx  ecx,al
    650169e3:	mov    rax,r8
    650169e6:	shr    r8,0x10
    650169ea:	xor    r14d,DWORD PTR [r12+rcx*4+0x47430]
    650169f2:	shr    rax,0x18
    650169f6:	movzx  ecx,r8b
    650169fa:	xor    r14d,DWORD PTR [r12+rax*4+0x46c30]
    65016a02:	movzx  eax,r11b
    65016a06:	shr    r11,0x18
    65016a0a:	xor    r14d,DWORD PTR [r12+rax*4+0x47830]
    65016a12:	movzx  eax,r9b
    65016a16:	mov    r9d,DWORD PTR [r12+rcx*4+0x47030]
    65016a1e:	xor    r9d,DWORD PTR [r12+rax*4+0x47430]
    65016a26:	xor    r14d,DWORD PTR [rbp-0x8]
    65016a2a:	movzx  eax,r10b
    65016a2e:	xor    r9d,DWORD PTR [r12+r11*4+0x46c30]
    65016a36:	xor    r9d,DWORD PTR [r12+rax*4+0x47830]
    65016a3e:	xor    r9d,DWORD PTR [rbp-0x4]
    65016a42:	test   r15d,r15d
    65016a45:	jg     0x65016820
    65016a4b:	mov    r15,QWORD PTR [rsp+0x50]
    65016a50:	mov    r11d,ebx
    65016a53:	mov    ebx,r9d
    65016a56:	mov    eax,r13d
    65016a59:	shr    rax,0x8
    65016a5d:	mov    r10d,r13d
    65016a60:	mov    esi,r14d
    65016a63:	movzx  edx,al
    65016a66:	mov    eax,r14d
    65016a69:	shr    r10,0x10
    65016a6d:	mov    edi,DWORD PTR [r12+rdx*4+0x47430]
    65016a75:	shr    rax,0x10
    65016a79:	shr    rsi,0x18
    65016a7d:	movzx  ecx,al
    65016a80:	mov    eax,r9d
    65016a83:	xor    edi,DWORD PTR [r12+rcx*4+0x47030]
    65016a8b:	shr    rax,0x18
    65016a8f:	xor    edi,DWORD PTR [r12+rax*4+0x46c30]
    65016a97:	movzx  eax,r11b
    65016a9b:	xor    edi,DWORD PTR [r12+rax*4+0x47830]
    65016aa3:	mov    eax,r14d
    65016aa6:	xor    edi,DWORD PTR [rbp+0x0]
    65016aa9:	shr    rax,0x8
    65016aad:	movzx  edx,al
    65016ab0:	mov    eax,r9d
    65016ab3:	mov    r9d,DWORD PTR [r12+rdx*4+0x47430]
    65016abb:	shr    rax,0x10
    65016abf:	movzx  ecx,al
    65016ac2:	mov    rax,r11
    65016ac5:	xor    r9d,DWORD PTR [r12+rcx*4+0x47030]
    65016acd:	shr    rax,0x18
    65016ad1:	xor    r9d,DWORD PTR [r12+rax*4+0x46c30]
    65016ad9:	movzx  eax,r13b
    65016add:	xor    r9d,DWORD PTR [r12+rax*4+0x47830]
    65016ae5:	mov    rax,r11
    65016ae8:	shr    r11,0x8
    65016aec:	xor    r9d,DWORD PTR [rbp+0x4]
    65016af0:	shr    rax,0x10
    65016af4:	movzx  edx,al
    65016af7:	mov    rax,rbx
    65016afa:	mov    r8d,DWORD PTR [r12+rdx*4+0x47030]
    65016b02:	shr    rax,0x8
    65016b06:	mov    edx,r9d
    65016b09:	movzx  ecx,al
    65016b0c:	mov    eax,r13d
    65016b0f:	xor    r8d,DWORD PTR [r12+rcx*4+0x47430]
    65016b17:	shr    rax,0x18
    65016b1b:	movzx  ecx,r10b
    65016b1f:	xor    r8d,DWORD PTR [r12+rax*4+0x46c30]
    65016b27:	movzx  eax,r14b
    65016b2b:	xor    r8d,DWORD PTR [r12+rax*4+0x47830]
    65016b33:	movzx  eax,r11b
    65016b37:	mov    r11d,DWORD PTR [r12+rcx*4+0x47030]
    65016b3f:	xor    r11d,DWORD PTR [r12+rax*4+0x47430]
    65016b47:	xor    r8d,DWORD PTR [rbp+0x8]
    65016b4b:	movzx  eax,bl
    65016b4e:	xor    r11d,DWORD PTR [r12+rsi*4+0x46c30]
    65016b56:	mov    r10d,r8d
    65016b59:	mov    r8d,edi
    65016b5c:	xor    r11d,DWORD PTR [r12+rax*4+0x47830]
    65016b64:	mov    rax,r10
    65016b67:	xor    r11d,DWORD PTR [rbp+0xc]
    65016b6b:	shr    rax,0x10
    65016b6f:	movzx  ecx,al
    65016b72:	mov    rax,r11
    65016b75:	movzx  ebx,BYTE PTR [rcx+r12*1+0x45b30]
    65016b7e:	shr    rax,0x18
    65016b82:	movzx  eax,BYTE PTR [rax+r12*1+0x45b30]
    65016b8b:	shl    eax,0x8
    65016b8e:	xor    ebx,eax
    65016b90:	mov    eax,r9d
    65016b93:	shr    rax,0x8
    65016b97:	shl    ebx,0x8
    65016b9a:	movzx  ecx,al
    65016b9d:	movzx  eax,BYTE PTR [rcx+r12*1+0x45b30]
    65016ba6:	xor    ebx,eax
    65016ba8:	movzx  eax,dil
    65016bac:	movzx  eax,BYTE PTR [rax+r12*1+0x45b30]
    65016bb5:	shl    ebx,0x8
    65016bb8:	xor    ebx,eax
    65016bba:	mov    eax,edi
    65016bbc:	xor    ebx,DWORD PTR [rbp+0x10]
    65016bbf:	shr    rax,0x18
    65016bc3:	shr    rdx,0x10
    65016bc7:	movzx  edi,BYTE PTR [rax+r12*1+0x45b30]
    65016bd0:	mov    rax,r11
    65016bd3:	shr    rax,0x10
    65016bd7:	shl    edi,0x8
    65016bda:	movzx  ecx,al
    65016bdd:	movzx  eax,BYTE PTR [rcx+r12*1+0x45b30]
    65016be6:	xor    edi,eax
    65016be8:	mov    rax,r10
    65016beb:	shr    rax,0x8
    65016bef:	shl    edi,0x8
    65016bf2:	movzx  ecx,al
    65016bf5:	movzx  eax,BYTE PTR [rcx+r12*1+0x45b30]
    65016bfe:	xor    edi,eax
    65016c00:	movzx  eax,r9b
    65016c04:	movzx  eax,BYTE PTR [rax+r12*1+0x45b30]
    65016c0d:	shl    edi,0x8
    65016c10:	xor    edi,eax
    65016c12:	mov    rax,r8
    65016c15:	shr    r8,0x8
    65016c19:	xor    edi,DWORD PTR [rbp+0x14]
    65016c1c:	shr    rax,0x10
    65016c20:	movzx  ecx,al
    65016c23:	mov    eax,r9d
    65016c26:	movzx  esi,BYTE PTR [rcx+r12*1+0x45b30]
    65016c2f:	shr    rax,0x18
    65016c33:	movzx  eax,BYTE PTR [rax+r12*1+0x45b30]
    65016c3c:	shl    eax,0x8
    65016c3f:	xor    esi,eax
    65016c41:	mov    rax,r11
    65016c44:	shr    rax,0x8
    65016c48:	shl    esi,0x8
    65016c4b:	movzx  ecx,al
    65016c4e:	movzx  eax,BYTE PTR [rcx+r12*1+0x45b30]
    65016c57:	xor    esi,eax
    65016c59:	movzx  eax,r10b
    65016c5d:	shr    r10,0x18
    65016c61:	movzx  eax,BYTE PTR [rax+r12*1+0x45b30]
    65016c6a:	shl    esi,0x8
    65016c6d:	xor    esi,eax
    65016c6f:	movzx  eax,dl
    65016c72:	movzx  r13d,BYTE PTR [rax+r12*1+0x45b30]
    65016c7b:	movzx  eax,BYTE PTR [r10+r12*1+0x45b30]
    65016c84:	shl    eax,0x8
    65016c87:	xor    r13d,eax
    65016c8a:	movzx  eax,r8b
    65016c8e:	movzx  eax,BYTE PTR [rax+r12*1+0x45b30]
    65016c97:	shl    r13d,0x8
    65016c9b:	xor    r13d,eax
    65016c9e:	movzx  eax,r11b
    65016ca2:	movzx  eax,BYTE PTR [rax+r12*1+0x45b30]
    65016cab:	xor    esi,DWORD PTR [rbp+0x18]
    65016cae:	shl    r13d,0x8
    65016cb2:	xor    r13d,eax
    65016cb5:	mov    eax,ebx
    65016cb7:	xor    r13d,DWORD PTR [rbp+0x1c]
    65016cbb:	mov    rbp,QWORD PTR [rsp+0x48]
    65016cc0:	shr    eax,0x8
    65016cc3:	mov    BYTE PTR [r15+0x1],al
    65016cc7:	mov    eax,ebx
    65016cc9:	mov    BYTE PTR [r15],bl
    65016ccc:	shr    eax,0x10
    65016ccf:	shr    ebx,0x18
    65016cd2:	mov    BYTE PTR [r15+0x4],dil
    65016cd6:	mov    BYTE PTR [r15+0x2],al
    65016cda:	mov    eax,edi
    65016cdc:	mov    BYTE PTR [r15+0x8],sil
    65016ce0:	shr    eax,0x8
    65016ce3:	mov    BYTE PTR [r15+0xc],r13b
    65016ce7:	mov    BYTE PTR [r15+0x3],bl
    65016ceb:	mov    rbx,QWORD PTR [rsp+0x38]
    65016cf0:	mov    BYTE PTR [r15+0x5],al
    65016cf4:	mov    eax,edi
    65016cf6:	shr    eax,0x10
    65016cf9:	shr    edi,0x18
    65016cfc:	mov    BYTE PTR [r15+0x6],al
    65016d00:	mov    eax,esi
    65016d02:	mov    BYTE PTR [r15+0x7],dil
    65016d06:	shr    eax,0x8
    65016d09:	mov    BYTE PTR [r15+0x9],al
    65016d0d:	mov    eax,esi
    65016d0f:	shr    esi,0x18
    65016d12:	shr    eax,0x10
    65016d15:	mov    BYTE PTR [r15+0xb],sil
    65016d19:	mov    BYTE PTR [r15+0xa],al
    65016d1d:	mov    eax,r13d
    65016d20:	shr    eax,0x8
    65016d23:	mov    BYTE PTR [r15+0xd],al
    65016d27:	mov    eax,r13d
    65016d2a:	shr    eax,0x10
    65016d2d:	shr    r13d,0x18
    65016d31:	mov    BYTE PTR [r15+0xf],r13b
    65016d35:	mov    BYTE PTR [r15+0xe],al
    65016d39:	pop    r15
    65016d3b:	pop    r14
    65016d3d:	pop    r13
    65016d3f:	pop    r12
    65016d41:	pop    rdi
    65016d42:	pop    rsi
    65016d43:	ret    
    65016d44:	int3   
    65016d45:	int3   
    65016d46:	int3   
    65016d47:	int3   
    65016d48:	int3   
    65016d49:	int3   
    65016d4a:	int3   
    65016d4b:	int3   
    65016d4c:	int3   
    65016d4d:	int3   
    65016d4e:	int3   
    65016d4f:	int3   
    65016d50:	rex push rbp
    65016d52:	push   rsi
    65016d53:	push   rdi
    65016d54:	push   r12
    65016d56:	push   r13
    65016d58:	push   r14
    65016d5a:	push   r15
    65016d5c:	sub    rsp,0x170
    65016d63:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
    65016d6c:	mov    QWORD PTR [rsp+0x1b8],rbx
    65016d74:	mov    rax,QWORD PTR [rip+0x2c3a5]        # 0x65043120
    65016d7b:	xor    rax,rsp
    65016d7e:	mov    QWORD PTR [rsp+0x160],rax
    65016d86:	mov    rdi,r9
    65016d89:	mov    rsi,r8
    65016d8c:	mov    r15,rcx
    65016d8f:	mov    rax,QWORD PTR [rsp+0x1d0]
    65016d97:	mov    QWORD PTR [rsp+0x20],rax
    65016d9c:	mov    DWORD PTR [rsp+0x150],0x0
    65016da7:	lea    r13,[r9+0x8]
    65016dab:	mov    rcx,r13
    65016dae:	and    ecx,0xf
    65016db1:	je     0x65016dbe
    65016db3:	mov    eax,0x10
    65016db8:	sub    rax,rcx
    65016dbb:	add    r13,rax
    65016dbe:	mov    rcx,r13
    65016dc1:	call   0x6501d2f0
    65016dc6:	mov    rbx,rax
    65016dc9:	mov    QWORD PTR [rsp+0x150],rax
    65016dd1:	mov    rcx,r13
    65016dd4:	call   0x6501d2f0
    65016dd9:	mov    QWORD PTR [r15],rax
    65016ddc:	mov    r8,r13
    65016ddf:	xor    edx,edx
    65016de1:	mov    rcx,rbx
    65016de4:	call   0x6501efa0
    65016de9:	mov    DWORD PTR [rbx],0x52514f4b
    65016def:	mov    DWORD PTR [rbx+0x4],edi
    65016df2:	lea    rcx,[rbx+0x8]
    65016df6:	mov    r8,rdi
    65016df9:	mov    rdx,rsi
    65016dfc:	call   0x6501fd30
    65016e01:	xor    r11d,r11d
    65016e04:	mov    QWORD PTR [rsp+0x150],r11
    65016e0c:	mov    QWORD PTR [rsp+0x158],r11
    65016e14:	mov    r8d,0x80
    65016e1a:	lea    rdx,[rip+0x2db37]        # 0x65044958
    65016e21:	lea    rcx,[rsp+0x30]
    65016e26:	call   0x65015990
    65016e2b:	mov    rdi,QWORD PTR [r15]
    65016e2e:	mov    rsi,rbx
    65016e31:	test   r13d,r13d
    65016e34:	jle    0x65016ef8
    65016e3a:	lea    rax,[rsp+0x150]
    65016e42:	mov    rbp,rdi
    65016e45:	sub    rbp,rax
    65016e48:	lea    rax,[rsp+0x150]
    65016e50:	mov    r12,rbx
    65016e53:	sub    r12,rax
    65016e56:	lea    r14d,[r13-0x1]
    65016e5a:	shr    r14d,0x4
    65016e5e:	add    r14d,0x1
    65016e62:	xor    edx,edx
    65016e64:	lea    r8,[rdi+0x1]
    65016e68:	mov    r9,rsi
    65016e6b:	sub    r9,rdi
    65016e6e:	xchg   ax,ax
    65016e70:	lea    rcx,[rsp+rdx*1+0x150]
    65016e78:	movzx  eax,BYTE PTR [r12+rcx*1]
    65016e7d:	xor    al,BYTE PTR [rcx]
    65016e7f:	mov    BYTE PTR [rcx+rbp*1],al
    65016e82:	movzx  eax,BYTE PTR [r9+r8*1]
    65016e87:	xor    al,BYTE PTR [rcx+0x1]
    65016e8a:	mov    BYTE PTR [r8],al
    65016e8d:	movzx  eax,BYTE PTR [rsi+rdx*1+0x2]
    65016e92:	xor    al,BYTE PTR [rcx+0x2]
    65016e95:	mov    BYTE PTR [r8+0x1],al
    65016e99:	movzx  eax,BYTE PTR [rsi+rdx*1+0x3]
    65016e9e:	xor    al,BYTE PTR [rcx+0x3]
    65016ea1:	mov    BYTE PTR [r8+0x2],al
    65016ea5:	add    rdx,0x4
    65016ea9:	add    r8,0x4
    65016ead:	cmp    rdx,0x10
    65016eb1:	jl     0x65016e70
    65016eb3:	mov    r9,rdi
    65016eb6:	mov    r8,rdi
    65016eb9:	mov    edx,0x1
    65016ebe:	lea    rcx,[rsp+0x30]
    65016ec3:	call   0x65016290
    65016ec8:	lea    r11,[rsp+0x150]
    65016ed0:	mov    rax,QWORD PTR [rdi]
    65016ed3:	mov    QWORD PTR [r11],rax
    65016ed6:	mov    rax,QWORD PTR [rdi+0x8]
    65016eda:	mov    QWORD PTR [r11+0x8],rax
    65016ede:	add    rsi,0x10
    65016ee2:	add    r12,0x10
    65016ee6:	add    rdi,0x10
    65016eea:	add    rbp,0x10
    65016eee:	sub    r14,0x1
    65016ef2:	jne    0x65016e62
    65016ef8:	mov    rax,QWORD PTR [rsp+0x20]
    65016efd:	mov    QWORD PTR [rax],r13
    65016f00:	xor    ecx,ecx
    65016f02:	call   0x6501d300
    65016f07:	nop
    65016f08:	mov    rcx,rbx
    65016f0b:	call   0x6501d300
    65016f10:	mov    rax,r15
    65016f13:	mov    rcx,QWORD PTR [rsp+0x160]
    65016f1b:	xor    rcx,rsp
    65016f1e:	call   0x6501e650
    65016f23:	mov    rbx,QWORD PTR [rsp+0x1b8]
    65016f2b:	add    rsp,0x170
    65016f32:	pop    r15
    65016f34:	pop    r14
    65016f36:	pop    r13
    65016f38:	pop    r12
    65016f3a:	pop    rdi
    65016f3b:	pop    rsi
    65016f3c:	pop    rbp
    65016f3d:	ret    
    65016f3e:	int3   
    65016f3f:	int3   
    65016f40:	rex push rbp
    65016f42:	sub    rsp,0x20
    65016f46:	mov    rbp,rdx
    65016f49:	lea    rcx,[rbp+0x150]
    65016f50:	call   0x65014bb0
    65016f55:	add    rsp,0x20
    65016f59:	pop    rbp
    65016f5a:	ret    
    65016f5b:	int3   
    65016f5c:	int3   
    65016f5d:	int3   
    65016f5e:	int3   
    65016f5f:	int3   
    65016f60:	rex push rbp
    65016f62:	push   r12
    65016f64:	push   r13
    65016f66:	push   r14
    65016f68:	push   r15
    65016f6a:	sub    rsp,0x180
    65016f71:	mov    rax,QWORD PTR [rip+0x2c1a8]        # 0x65043120
    65016f78:	xor    rax,rsp
    65016f7b:	mov    QWORD PTR [rsp+0x160],rax
    65016f83:	mov    r14,QWORD PTR [rsp+0x1d0]
    65016f8b:	xor    r15d,r15d
    65016f8e:	test   r9b,0xf
    65016f92:	mov    rbp,r9
    65016f95:	mov    r13,r8
    65016f98:	mov    r12,rcx
    65016f9b:	mov    DWORD PTR [rsp+0x140],r15d
    65016fa3:	je     0x65016fbc
    65016fa5:	mov    QWORD PTR [rcx],r15
    65016fa8:	xor    ecx,ecx
    65016faa:	mov    QWORD PTR [rsp+0x140],r15
    65016fb2:	call   0x6501d300
    65016fb7:	jmp    0x6501710a
    65016fbc:	mov    rcx,r9
    65016fbf:	mov    QWORD PTR [rsp+0x1b8],rbx
    65016fc7:	mov    QWORD PTR [rsp+0x170],rdi
    65016fcf:	call   0x6501d2f0
    65016fd4:	lea    rdx,[rip+0x2d97d]        # 0x65044958
    65016fdb:	lea    rcx,[rsp+0x20]
    65016fe0:	mov    rbx,rax
    65016fe3:	xor    eax,eax
    65016fe5:	mov    r8d,0x80
    65016feb:	mov    QWORD PTR [rsp+0x140],rax
    65016ff3:	mov    QWORD PTR [rsp+0x148],rax
    65016ffb:	call   0x65016050
    65017000:	test   ebp,ebp
    65017002:	mov    rdi,rbx
    65017005:	jle    0x650170ae
    6501700b:	mov    QWORD PTR [rsp+0x178],rsi
    65017013:	add    ebp,0xffffffff
    65017016:	lea    rsi,[rsp+0x141]
    6501701e:	shr    ebp,0x4
    65017021:	sub    rsi,rbx
    65017024:	sub    r13,rbx
    65017027:	add    ebp,0x1
    6501702a:	data16 xchg ax,ax
    6501702d:	data16 xchg ax,ax
    65017030:	mov    rax,QWORD PTR [r13+rdi*1+0x0]
    65017035:	lea    r8,[r13+rdi*1+0x0]
    6501703a:	lea    rcx,[rsp+0x150]
    65017042:	mov    QWORD PTR [rcx],rax
    65017045:	mov    rax,QWORD PTR [r8+0x8]
    65017049:	mov    r9,rdi
    6501704c:	mov    QWORD PTR [rcx+0x8],rax
    65017050:	lea    rcx,[rsp+0x20]
    65017055:	xor    edx,edx
    65017057:	call   0x65016290
    6501705c:	mov    ecx,0x4
    65017061:	movzx  eax,BYTE PTR [rsi+rdi*1-0x1]
    65017066:	add    rdi,0x4
    6501706a:	xor    BYTE PTR [rdi-0x4],al
    6501706d:	movzx  eax,BYTE PTR [rsi+rdi*1-0x4]
    65017072:	xor    BYTE PTR [rdi-0x3],al
    65017075:	movzx  eax,BYTE PTR [rsi+rdi*1-0x3]
    6501707a:	xor    BYTE PTR [rdi-0x2],al
    6501707d:	movzx  eax,BYTE PTR [rsi+rdi*1-0x2]
    65017082:	xor    BYTE PTR [rdi-0x1],al
    65017085:	sub    rcx,0x1
    65017089:	jne    0x65017061
    6501708b:	movaps xmm0,XMMWORD PTR [rsp+0x150]
    65017093:	sub    rsi,0x10
    65017097:	sub    rbp,0x1
    6501709b:	movdqa XMMWORD PTR [rsp+0x140],xmm0
    650170a4:	jne    0x65017030
    650170a6:	mov    rsi,QWORD PTR [rsp+0x178]
    650170ae:	cmp    DWORD PTR [rbx],0x52534f4b
    650170b4:	mov    rdi,QWORD PTR [rsp+0x170]
    650170bc:	je     0x650170dd
    650170be:	xor    ecx,ecx
    650170c0:	mov    QWORD PTR [rsp+0x140],r15
    650170c8:	mov    QWORD PTR [r12],r15
    650170cc:	call   0x6501d300
    650170d1:	xor    ecx,ecx
    650170d3:	call   0x6501d300
    650170d8:	mov    rcx,rbx
    650170db:	jmp    0x650170fd
    650170dd:	movsxd r8,DWORD PTR [rbx+0x4]
    650170e1:	lea    rdx,[rbx+0x8]
    650170e5:	mov    rcx,rbx
    650170e8:	mov    QWORD PTR [r14],r8
    650170eb:	call   0x6501fd30
    650170f0:	xor    ecx,ecx
    650170f2:	mov    QWORD PTR [r12],rbx
    650170f6:	call   0x6501d300
    650170fb:	xor    ecx,ecx
    650170fd:	call   0x6501d300
    65017102:	mov    rbx,QWORD PTR [rsp+0x1b8]
    6501710a:	mov    rax,r12
    6501710d:	mov    rcx,QWORD PTR [rsp+0x160]
    65017115:	xor    rcx,rsp
    65017118:	call   0x6501e650
    6501711d:	add    rsp,0x180
    65017124:	pop    r15
    65017126:	pop    r14
    65017128:	pop    r13
    6501712a:	pop    r12
    6501712c:	pop    rbp
    6501712d:	ret    
    6501712e:	int3   
    6501712f:	int3   
    65017130:	sub    rsp,0x28
    65017134:	mov    ecx,0x1
    65017139:	xor    eax,eax
    6501713b:	lock cmpxchg DWORD PTR [rip+0x30c0d],ecx        # 0x65047d50
    65017143:	jne    0x650171cb
    65017149:	lea    edx,[rcx+0xd]
    6501714c:	lea    r8,[rip+0x2219d]        # 0x650392f0
    65017153:	lea    rcx,[rip+0x221c6]        # 0x65039320
    6501715a:	mov    QWORD PTR [rsp+0x20],rbx
    6501715f:	call   0x6500bcb0
    65017164:	lea    r8,[rip+0x221c5]        # 0x65039330
    6501716b:	lea    rcx,[rip+0x22166]        # 0x650392d8
    65017172:	mov    edx,0x8
    65017177:	mov    rbx,rax
    6501717a:	call   0x6500c660
    6501717f:	mov    rcx,rax
    65017182:	call   QWORD PTR [rip+0x1cf78]        # 0x65034100
    65017188:	add    DWORD PTR [rip+0x2d7b9],0x1        # 0x65044948
    6501718f:	test   rax,rax
    65017192:	je     0x650171b8
    65017194:	mov    rdx,rbx
    65017197:	mov    rcx,rax
    6501719a:	call   QWORD PTR [rip+0x1cf68]        # 0x65034108
    650171a0:	add    DWORD PTR [rip+0x2d7a5],0x1        # 0x6504494c
    650171a7:	mov    rbx,QWORD PTR [rsp+0x20]
    650171ac:	mov    QWORD PTR [rip+0x30cbd],rax        # 0x65047e70
    650171b3:	add    rsp,0x28
    650171b7:	ret    
    650171b8:	mov    rbx,QWORD PTR [rsp+0x20]
    650171bd:	xor    eax,eax
    650171bf:	mov    QWORD PTR [rip+0x30caa],rax        # 0x65047e70
    650171c6:	add    rsp,0x28
    650171ca:	ret    
    650171cb:	mov    rax,QWORD PTR [rip+0x30c9e]        # 0x65047e70
    650171d2:	add    rsp,0x28
    650171d6:	ret    
    650171d7:	int3   
    650171d8:	int3   
    650171d9:	int3   
    650171da:	int3   
    650171db:	int3   
    650171dc:	int3   
    650171dd:	int3   
    650171de:	int3   
    650171df:	int3   
    650171e0:	sub    rsp,0x28
    650171e4:	mov    ecx,0x1
    650171e9:	xor    eax,eax
    650171eb:	lock cmpxchg DWORD PTR [rip+0x30b61],ecx        # 0x65047d54
    650171f3:	jne    0x6501727b
    650171f9:	lea    edx,[rcx+0xa]
    650171fc:	lea    r8,[rip+0x2215d]        # 0x65039360
    65017203:	lea    rcx,[rip+0x2218e]        # 0x65039398
    6501720a:	mov    QWORD PTR [rsp+0x20],rbx
    6501720f:	call   0x6500bcb0
    65017214:	lea    r8,[rip+0x2218d]        # 0x650393a8
    6501721b:	lea    rcx,[rip+0x220b6]        # 0x650392d8
    65017222:	mov    edx,0x8
    65017227:	mov    rbx,rax
    6501722a:	call   0x6500c660
    6501722f:	mov    rcx,rax
    65017232:	call   QWORD PTR [rip+0x1cec8]        # 0x65034100
    65017238:	add    DWORD PTR [rip+0x2d709],0x1        # 0x65044948
    6501723f:	test   rax,rax
    65017242:	je     0x65017268
    65017244:	mov    rdx,rbx
    65017247:	mov    rcx,rax
    6501724a:	call   QWORD PTR [rip+0x1ceb8]        # 0x65034108
    65017250:	add    DWORD PTR [rip+0x2d6f5],0x1        # 0x6504494c
    65017257:	mov    rbx,QWORD PTR [rsp+0x20]
    6501725c:	mov    QWORD PTR [rip+0x30c15],rax        # 0x65047e78
    65017263:	add    rsp,0x28
    65017267:	ret    
    65017268:	mov    rbx,QWORD PTR [rsp+0x20]
    6501726d:	xor    eax,eax
    6501726f:	mov    QWORD PTR [rip+0x30c02],rax        # 0x65047e78
    65017276:	add    rsp,0x28
    6501727a:	ret    
    6501727b:	mov    rax,QWORD PTR [rip+0x30bf6]        # 0x65047e78
    65017282:	add    rsp,0x28
    65017286:	ret    
    65017287:	int3   
    65017288:	int3   
    65017289:	int3   
    6501728a:	int3   
    6501728b:	int3   
    6501728c:	int3   
    6501728d:	int3   
    6501728e:	int3   
    6501728f:	int3   
    65017290:	sub    rsp,0x28
    65017294:	mov    ecx,0x1
    65017299:	xor    eax,eax
    6501729b:	lock cmpxchg DWORD PTR [rip+0x30ab5],ecx        # 0x65047d58
    650172a3:	jne    0x6501732b
    650172a9:	lea    edx,[rcx+0xa]
    650172ac:	lea    r8,[rip+0x2212d]        # 0x650393e0
    650172b3:	lea    rcx,[rip+0x22156]        # 0x65039410
    650172ba:	mov    QWORD PTR [rsp+0x20],rbx
    650172bf:	call   0x6500bcb0
    650172c4:	lea    r8,[rip+0x22155]        # 0x65039420
    650172cb:	lea    rcx,[rip+0x22006]        # 0x650392d8
    650172d2:	mov    edx,0x8
    650172d7:	mov    rbx,rax
    650172da:	call   0x6500c660
    650172df:	mov    rcx,rax
    650172e2:	call   QWORD PTR [rip+0x1ce18]        # 0x65034100
    650172e8:	add    DWORD PTR [rip+0x2d659],0x1        # 0x65044948
    650172ef:	test   rax,rax
    650172f2:	je     0x65017318
    650172f4:	mov    rdx,rbx
    650172f7:	mov    rcx,rax
    650172fa:	call   QWORD PTR [rip+0x1ce08]        # 0x65034108
    65017300:	add    DWORD PTR [rip+0x2d645],0x1        # 0x6504494c
    65017307:	mov    rbx,QWORD PTR [rsp+0x20]
    6501730c:	mov    QWORD PTR [rip+0x30b6d],rax        # 0x65047e80
    65017313:	add    rsp,0x28
    65017317:	ret    
    65017318:	mov    rbx,QWORD PTR [rsp+0x20]
    6501731d:	xor    eax,eax
    6501731f:	mov    QWORD PTR [rip+0x30b5a],rax        # 0x65047e80
    65017326:	add    rsp,0x28
    6501732a:	ret    
    6501732b:	mov    rax,QWORD PTR [rip+0x30b4e]        # 0x65047e80
    65017332:	add    rsp,0x28
    65017336:	ret    
    65017337:	int3   
    65017338:	int3   
    65017339:	int3   
    6501733a:	int3   
    6501733b:	int3   
    6501733c:	int3   
    6501733d:	int3   
    6501733e:	int3   
    6501733f:	int3   
    65017340:	sub    rsp,0x28
    65017344:	mov    ecx,0x1
    65017349:	xor    eax,eax
    6501734b:	lock cmpxchg DWORD PTR [rip+0x30a09],ecx        # 0x65047d5c
    65017353:	jne    0x650173db
    65017359:	lea    edx,[rcx+0xa]
    6501735c:	lea    r8,[rip+0x220ed]        # 0x65039450
    65017363:	lea    rcx,[rip+0x22126]        # 0x65039490
    6501736a:	mov    QWORD PTR [rsp+0x20],rbx
    6501736f:	call   0x6500bcb0
    65017374:	lea    r8,[rip+0x22125]        # 0x650394a0
    6501737b:	lea    rcx,[rip+0x21f56]        # 0x650392d8
    65017382:	mov    edx,0x8
    65017387:	mov    rbx,rax
    6501738a:	call   0x6500c660
    6501738f:	mov    rcx,rax
    65017392:	call   QWORD PTR [rip+0x1cd68]        # 0x65034100
    65017398:	add    DWORD PTR [rip+0x2d5a9],0x1        # 0x65044948
    6501739f:	test   rax,rax
    650173a2:	je     0x650173c8
    650173a4:	mov    rdx,rbx
    650173a7:	mov    rcx,rax
    650173aa:	call   QWORD PTR [rip+0x1cd58]        # 0x65034108
    650173b0:	add    DWORD PTR [rip+0x2d595],0x1        # 0x6504494c
    650173b7:	mov    rbx,QWORD PTR [rsp+0x20]
    650173bc:	mov    QWORD PTR [rip+0x30ac5],rax        # 0x65047e88
    650173c3:	add    rsp,0x28
    650173c7:	ret    
    650173c8:	mov    rbx,QWORD PTR [rsp+0x20]
    650173cd:	xor    eax,eax
    650173cf:	mov    QWORD PTR [rip+0x30ab2],rax        # 0x65047e88
    650173d6:	add    rsp,0x28
    650173da:	ret    
    650173db:	mov    rax,QWORD PTR [rip+0x30aa6]        # 0x65047e88
    650173e2:	add    rsp,0x28
    650173e6:	ret    
    650173e7:	int3   
    650173e8:	int3   
    650173e9:	int3   
    650173ea:	int3   
    650173eb:	int3   
    650173ec:	int3   
    650173ed:	int3   
    650173ee:	int3   
    650173ef:	int3   
    650173f0:	sub    rsp,0x28
    650173f4:	mov    ecx,0x1
    650173f9:	xor    eax,eax
    650173fb:	lock cmpxchg DWORD PTR [rip+0x3098d],ecx        # 0x65047d90
    65017403:	jne    0x6501748b
    65017409:	lea    edx,[rcx+0x18]
    6501740c:	lea    r8,[rip+0x223cd]        # 0x650397e0
    65017413:	lea    rcx,[rip+0x223fe]        # 0x65039818
    6501741a:	mov    QWORD PTR [rsp+0x20],rbx
    6501741f:	call   0x6500bcb0
    65017424:	lea    r8,[rip+0x2240d]        # 0x65039838
    6501742b:	lea    rcx,[rip+0x22436]        # 0x65039868
    65017432:	mov    edx,0x7
    65017437:	mov    rbx,rax
    6501743a:	call   0x6500c660
    6501743f:	mov    rcx,rax
    65017442:	call   QWORD PTR [rip+0x1ccb8]        # 0x65034100
    65017448:	add    DWORD PTR [rip+0x2d4f9],0x1        # 0x65044948
    6501744f:	test   rax,rax
    65017452:	je     0x65017478
    65017454:	mov    rdx,rbx
    65017457:	mov    rcx,rax
    6501745a:	call   QWORD PTR [rip+0x1cca8]        # 0x65034108
    65017460:	add    DWORD PTR [rip+0x2d4e5],0x1        # 0x6504494c
    65017467:	mov    rbx,QWORD PTR [rsp+0x20]
    6501746c:	mov    QWORD PTR [rip+0x30a4d],rax        # 0x65047ec0
    65017473:	add    rsp,0x28
    65017477:	ret    
    65017478:	mov    rbx,QWORD PTR [rsp+0x20]
    6501747d:	xor    eax,eax
    6501747f:	mov    QWORD PTR [rip+0x30a3a],rax        # 0x65047ec0
    65017486:	add    rsp,0x28
    6501748a:	ret    
    6501748b:	mov    rax,QWORD PTR [rip+0x30a2e]        # 0x65047ec0
    65017492:	add    rsp,0x28
    65017496:	ret    
    65017497:	int3   
    65017498:	int3   
    65017499:	int3   
    6501749a:	int3   
    6501749b:	int3   
    6501749c:	int3   
    6501749d:	int3   
    6501749e:	int3   
    6501749f:	int3   
    650174a0:	sub    rsp,0x28
    650174a4:	mov    ecx,0x1
    650174a9:	xor    eax,eax
    650174ab:	lock cmpxchg DWORD PTR [rip+0x30931],ecx        # 0x65047de4
    650174b3:	jne    0x6501753b
    650174b9:	lea    edx,[rcx+0x10]
    650174bc:	lea    r8,[rip+0x226dd]        # 0x65039ba0
    650174c3:	lea    rcx,[rip+0x22716]        # 0x65039be0
    650174ca:	mov    QWORD PTR [rsp+0x20],rbx
    650174cf:	call   0x6500bcb0
    650174d4:	lea    r8,[rip+0x2271d]        # 0x65039bf8
    650174db:	lea    rcx,[rip+0x226ae]        # 0x65039b90
    650174e2:	mov    edx,0x5
    650174e7:	mov    rbx,rax
    650174ea:	call   0x6500c660
    650174ef:	mov    rcx,rax
    650174f2:	call   QWORD PTR [rip+0x1cc08]        # 0x65034100
    650174f8:	add    DWORD PTR [rip+0x2d449],0x1        # 0x65044948
    650174ff:	test   rax,rax
    65017502:	je     0x65017528
    65017504:	mov    rdx,rbx
    65017507:	mov    rcx,rax
    6501750a:	call   QWORD PTR [rip+0x1cbf8]        # 0x65034108
    65017510:	add    DWORD PTR [rip+0x2d435],0x1        # 0x6504494c
    65017517:	mov    rbx,QWORD PTR [rsp+0x20]
    6501751c:	mov    QWORD PTR [rip+0x309d5],rax        # 0x65047ef8
    65017523:	add    rsp,0x28
    65017527:	ret    
    65017528:	mov    rbx,QWORD PTR [rsp+0x20]
    6501752d:	xor    eax,eax
    6501752f:	mov    QWORD PTR [rip+0x309c2],rax        # 0x65047ef8
    65017536:	add    rsp,0x28
    6501753a:	ret    
    6501753b:	mov    rax,QWORD PTR [rip+0x309b6]        # 0x65047ef8
    65017542:	add    rsp,0x28
    65017546:	ret    
    65017547:	int3   
    65017548:	int3   
    65017549:	int3   
    6501754a:	int3   
    6501754b:	int3   
    6501754c:	int3   
    6501754d:	int3   
    6501754e:	int3   
    6501754f:	int3   
    65017550:	mov    QWORD PTR [rsp+0x8],rbx
    65017555:	push   rdi
    65017556:	sub    rsp,0x20
    6501755a:	mov    rax,QWORD PTR [rcx+0x18]
    6501755e:	mov    rdi,rcx
    65017561:	cmp    rax,QWORD PTR [rcx+0x28]
    65017565:	je     0x65017583
    65017567:	data16 xchg ax,ax
    6501756a:	data16 xchg ax,ax
    6501756d:	data16 xchg ax,ax
    65017570:	mov    rcx,QWORD PTR [rax-0x8]
    65017574:	lea    rbx,[rax-0x10]
    65017578:	call   QWORD PTR [rbx]
    6501757a:	cmp    rbx,QWORD PTR [rdi+0x28]
    6501757e:	mov    rax,rbx
    65017581:	jne    0x65017570
    65017583:	mov    rcx,QWORD PTR [rdi+0x28]
    65017587:	call   0x6501fc00
    6501758c:	mov    rcx,QWORD PTR [rdi+0x10]
    65017590:	mov    rbx,QWORD PTR [rcx]
    65017593:	call   0x6501fc00
    65017598:	test   rbx,rbx
    6501759b:	je     0x650175b0
    6501759d:	data16 xchg ax,ax
    650175a0:	mov    rcx,rbx
    650175a3:	mov    rbx,QWORD PTR [rbx]
    650175a6:	call   0x6501fc00
    650175ab:	test   rbx,rbx
    650175ae:	jne    0x650175a0
    650175b0:	mov    rbx,QWORD PTR [rsp+0x30]
    650175b5:	add    rsp,0x20
    650175b9:	pop    rdi
    650175ba:	ret    
    650175bb:	int3   
    650175bc:	int3   
    650175bd:	int3   
    650175be:	int3   
    650175bf:	int3   
    650175c0:	mov    QWORD PTR [rsp+0x8],rbx
    650175c5:	push   rdi
    650175c6:	sub    rsp,0x20
    650175ca:	mov    rbx,rcx
    650175cd:	mov    QWORD PTR [rcx+0x30],rdx
    650175d1:	lea    rcx,[rdx+0x8]
    650175d5:	mov    rdi,rdx
    650175d8:	call   0x6501fc50
    650175dd:	test   rax,rax
    650175e0:	je     0x6501760f
    650175e2:	mov    QWORD PTR [rbx+0x10],rax
    650175e6:	xor    ecx,ecx
    650175e8:	mov    QWORD PTR [rbx],rdi
    650175eb:	lea    rdx,[rax+0x8]
    650175ef:	mov    QWORD PTR [rbx+0x8],rdx
    650175f3:	mov    QWORD PTR [rax],rcx
    650175f6:	mov    QWORD PTR [rbx+0x18],rcx
    650175fa:	mov    QWORD PTR [rbx+0x20],rcx
    650175fe:	mov    QWORD PTR [rbx+0x28],rcx
    65017602:	mov    al,0x1
    65017604:	mov    rbx,QWORD PTR [rsp+0x30]
    65017609:	add    rsp,0x20
    6501760d:	pop    rdi
    6501760e:	ret    
    6501760f:	xor    al,al
    65017611:	mov    rbx,QWORD PTR [rsp+0x30]
    65017616:	add    rsp,0x20
    6501761a:	pop    rdi
    6501761b:	ret    
    6501761c:	int3   
    6501761d:	int3   
    6501761e:	int3   
    6501761f:	int3   
    65017620:	mov    QWORD PTR [rsp+0x10],rbp
    65017625:	mov    QWORD PTR [rsp+0x18],rsi
    6501762a:	push   rdi
    6501762b:	sub    rsp,0x20
    6501762f:	mov    eax,edx
    65017631:	mov    DWORD PTR [r8],0x6
    65017638:	mov    DWORD PTR [r8+0x8],0x0
    65017640:	mov    rsi,QWORD PTR [rcx]
    65017643:	lea    rcx,[rax+rax*2]
    65017647:	mov    rbp,r8
    6501764a:	mov    rax,QWORD PTR [rsi]
    6501764d:	lea    rdi,[rcx*8+0x3]
    65017655:	and    rdi,0xfffffffffffffffc
    65017659:	cmp    rax,rdi
    6501765c:	jae    0x6501769d
    6501765e:	mov    QWORD PTR [rsp+0x30],rbx
    65017663:	mov    rbx,QWORD PTR [rsi+0x30]
    65017667:	cmp    rbx,rdi
    6501766a:	jae    0x65017678
    6501766c:	data16 data16 xchg ax,ax
    65017670:	add    rbx,rbx
    65017673:	cmp    rbx,rdi
    65017676:	jb     0x65017670
    65017678:	lea    rcx,[rbx+0x8]
    6501767c:	call   0x6501fc50
    65017681:	mov    rcx,QWORD PTR [rsi+0x10]
    65017685:	sub    rbx,rdi
    65017688:	mov    QWORD PTR [rax],rcx
    6501768b:	mov    QWORD PTR [rsi],rbx
    6501768e:	mov    rbx,QWORD PTR [rsp+0x30]
    65017693:	lea    rdx,[rax+0x8]
    65017697:	mov    QWORD PTR [rsi+0x10],rax
    6501769b:	jmp    0x650176a7
    6501769d:	mov    rdx,QWORD PTR [rsi+0x8]
    650176a1:	sub    rax,rdi
    650176a4:	mov    QWORD PTR [rsi],rax
    650176a7:	lea    rax,[rdx+rdi*1]
    650176ab:	mov    QWORD PTR [rsi+0x8],rax
    650176af:	mov    rsi,QWORD PTR [rsp+0x40]
    650176b4:	mov    QWORD PTR [rbp+0x10],rdx
    650176b8:	mov    rbp,QWORD PTR [rsp+0x38]
    650176bd:	neg    rdx
    650176c0:	sbb    eax,eax
    650176c2:	neg    eax
    650176c4:	sub    eax,0x1
    650176c7:	add    rsp,0x20
    650176cb:	pop    rdi
    650176cc:	ret    
    650176cd:	int3   
    650176ce:	int3   
    650176cf:	int3   
    650176d0:	mov    QWORD PTR [rsp+0x10],rbp
    650176d5:	mov    QWORD PTR [rsp+0x18],rsi
    650176da:	push   rdi
    650176db:	sub    rsp,0x20
    650176df:	mov    eax,edx
    650176e1:	mov    DWORD PTR [r8],0x7
    650176e8:	mov    DWORD PTR [r8+0x8],0x0
    650176f0:	mov    rsi,QWORD PTR [rcx]
    650176f3:	lea    rdi,[rax+rax*2]
    650176f7:	mov    rbp,r8
    650176fa:	mov    rax,QWORD PTR [rsi]
    650176fd:	shl    rdi,0x4
    65017701:	add    rdi,0x3
    65017705:	and    rdi,0xfffffffffffffffc
    65017709:	cmp    rax,rdi
    6501770c:	jae    0x6501774d
    6501770e:	mov    QWORD PTR [rsp+0x30],rbx
    65017713:	mov    rbx,QWORD PTR [rsi+0x30]
    65017717:	cmp    rbx,rdi
    6501771a:	jae    0x65017728
    6501771c:	data16 data16 xchg ax,ax
    65017720:	add    rbx,rbx
    65017723:	cmp    rbx,rdi
    65017726:	jb     0x65017720
    65017728:	lea    rcx,[rbx+0x8]
    6501772c:	call   0x6501fc50
    65017731:	mov    rcx,QWORD PTR [rsi+0x10]
    65017735:	sub    rbx,rdi
    65017738:	mov    QWORD PTR [rax],rcx
    6501773b:	mov    QWORD PTR [rsi],rbx
    6501773e:	mov    rbx,QWORD PTR [rsp+0x30]
    65017743:	lea    rdx,[rax+0x8]
    65017747:	mov    QWORD PTR [rsi+0x10],rax
    6501774b:	jmp    0x65017757
    6501774d:	mov    rdx,QWORD PTR [rsi+0x8]
    65017751:	sub    rax,rdi
    65017754:	mov    QWORD PTR [rsi],rax
    65017757:	lea    rax,[rdx+rdi*1]
    6501775b:	mov    QWORD PTR [rsi+0x8],rax
    6501775f:	mov    rsi,QWORD PTR [rsp+0x40]
    65017764:	mov    QWORD PTR [rbp+0x10],rdx
    65017768:	mov    rbp,QWORD PTR [rsp+0x38]
    6501776d:	neg    rdx
    65017770:	sbb    eax,eax
    65017772:	neg    eax
    65017774:	sub    eax,0x1
    65017777:	add    rsp,0x20
    6501777b:	pop    rdi
    6501777c:	ret    
    6501777d:	int3   
    6501777e:	int3   
    6501777f:	int3   
    65017780:	mov    QWORD PTR [rsp+0x20],r9
    65017785:	mov    QWORD PTR [rsp+0x10],rdx
    6501778a:	push   rbx
    6501778b:	push   rbp
    6501778c:	push   rsi
    6501778d:	push   rdi
    6501778e:	push   r12
    65017790:	push   r13
    65017792:	push   r14
    65017794:	push   r15
    65017796:	sub    rsp,0x58
    6501779a:	mov    rax,QWORD PTR [r9]
    6501779d:	mov    edi,DWORD PTR [rcx+0x18]
    650177a0:	xor    ebx,ebx
    650177a2:	lea    rbp,[rdx+rax*1]
    650177a6:	lea    rax,[rdx+r8*1]
    650177aa:	mov    r8d,DWORD PTR [rcx+0x14]
    650177ae:	cmp    rbp,rax
    650177b1:	mov    edx,DWORD PTR [rcx+0x10]
    650177b4:	mov    r13,rcx
    650177b7:	mov    DWORD PTR [rsp+0xb0],r8d
    650177bf:	mov    QWORD PTR [rsp+0x28],rax
    650177c4:	lea    r10,[rip+0xfffffffffffe8835]        # 0x65000000
    650177cb:	mov    DWORD PTR [rsp+0xa0],edx
    650177d2:	lea    r9d,[rbx+0x1]
    650177d6:	je     0x65018273
    650177dc:	data16 data16 xchg ax,ax
    650177e0:	test   edx,edx
    650177e2:	jne    0x65017a33
    650177e8:	movzx  ecx,BYTE PTR [rbp+0x0]
    650177ec:	cmp    cl,0x7f
    650177ef:	ja     0x65017806
    650177f1:	movzx  eax,cl
    650177f4:	mov    DWORD PTR [rsp+0x30],0x2
    650177fc:	mov    QWORD PTR [rsp+0x38],rax
    65017801:	jmp    0x650180e0
    65017806:	cmp    cl,0xe0
    65017809:	jb     0x6501782e
    6501780b:	cmp    cl,0xff
    6501780e:	ja     0x6501782e
    65017810:	test   cl,cl
    65017812:	movsx  rax,cl
    65017816:	mov    QWORD PTR [rsp+0x38],rax
    6501781b:	js     0x65017d02
    65017821:	mov    DWORD PTR [rsp+0x30],0x2
    65017829:	jmp    0x650180e0
    6501782e:	cmp    cl,0xc0
    65017831:	jb     0x650178ee
    65017837:	cmp    cl,0xdf
    6501783a:	ja     0x650178ee
    65017840:	movzx  edx,cl
    65017843:	lea    eax,[rdx-0xc0]
    65017849:	cmp    eax,0x1f
    6501784c:	ja     0x6501826e
    65017852:	cdqe   
    65017854:	movzx  eax,BYTE PTR [r10+rax*1+0x182cc]
    6501785d:	mov    ecx,DWORD PTR [r10+rax*4+0x182b4]
    65017865:	add    rcx,r10
    65017868:	jmp    rcx
    6501786a:	mov    DWORD PTR [rsp+0x30],0x0
    65017872:	jmp    0x650180e0
    65017877:	mov    DWORD PTR [rsp+0x30],r9d
    6501787c:	mov    BYTE PTR [rsp+0x38],0x0
    65017881:	jmp    0x650180e0
    65017886:	mov    DWORD PTR [rsp+0x30],r9d
    6501788b:	mov    BYTE PTR [rsp+0x38],0x1
    65017890:	jmp    0x650180e0
    65017895:	mov    rax,QWORD PTR [rsp+0x28]
    6501789a:	mov    ecx,edx
    6501789c:	mov    r8d,r9d
    6501789f:	and    ecx,0x3
    650178a2:	shl    r8d,cl
    650178a5:	and    edx,0x1f
    650178a8:	add    rbp,0x1
    650178ac:	mov    DWORD PTR [rsp+0xa0],edx
    650178b3:	mov    DWORD PTR [rsp+0xb0],r8d
    650178bb:	jmp    0x65017a33
    650178c0:	mov    rax,QWORD PTR [rsp+0x28]
    650178c5:	mov    ecx,edx
    650178c7:	mov    r8d,0x2
    650178cd:	and    ecx,0x1
    650178d0:	shl    r8d,cl
    650178d3:	and    edx,0x1f
    650178d6:	add    rbp,0x1
    650178da:	mov    DWORD PTR [rsp+0xa0],edx
    650178e1:	mov    DWORD PTR [rsp+0xb0],r8d
    650178e9:	jmp    0x65017a33
    650178ee:	cmp    cl,0xa0
    650178f1:	jb     0x65017922
    650178f3:	cmp    cl,0xbf
    650178f6:	ja     0x65017922
    650178f8:	mov    r8b,cl
    650178fb:	and    r8d,0x1f
    650178ff:	mov    DWORD PTR [rsp+0xb0],r8d
    65017907:	je     0x65017d0f
    6501790d:	mov    edx,0x20
    65017912:	add    rbp,0x1
    65017916:	mov    DWORD PTR [rsp+0xa0],edx
    6501791d:	jmp    0x65017a33
    65017922:	cmp    cl,0x90
    65017925:	jb     0x650179cf
    6501792b:	cmp    cl,0x9f
    6501792e:	ja     0x650179cf
    65017934:	cmp    edi,0x20
    65017937:	jae    0x6501826e
    6501793d:	mov    dl,cl
    6501793f:	mov    eax,edi
    65017941:	mov    rcx,r13
    65017944:	shl    rax,0x6
    65017948:	and    edx,0xf
    6501794b:	lea    rsi,[rax+r13*1+0x20]
    65017950:	mov    r8,rsi
    65017953:	call   0x65017620
    65017958:	test   eax,eax
    6501795a:	js     0x6501826e
    65017960:	test   BYTE PTR [rbp+0x0],0xf
    65017964:	jne    0x65017986
    65017966:	mov    rax,QWORD PTR [rsi]
    65017969:	lea    rcx,[rsp+0x30]
    6501796e:	mov    QWORD PTR [rcx],rax
    65017971:	mov    rax,QWORD PTR [rsi+0x8]
    65017975:	mov    QWORD PTR [rcx+0x8],rax
    65017979:	mov    rax,QWORD PTR [rsi+0x10]
    6501797d:	mov    QWORD PTR [rcx+0x10],rax
    65017981:	jmp    0x650180e0
    65017986:	mov    DWORD PTR [rsi+0x20],0x0
    6501798d:	mov    al,BYTE PTR [rbp+0x0]
    65017990:	and    eax,0xf
    65017993:	add    edi,0x1
    65017996:	mov    QWORD PTR [rsi+0x18],rax
    6501799a:	mov    r9d,0x1
    650179a0:	mov    rax,QWORD PTR [rsp+0x28]
    650179a5:	xor    edx,edx
    650179a7:	add    rbp,0x1
    650179ab:	cmp    rbp,rax
    650179ae:	mov    DWORD PTR [rsp+0xa0],edx
    650179b5:	je     0x65018273
    650179bb:	mov    r8d,DWORD PTR [rsp+0xb0]
    650179c3:	lea    r10,[rip+0xfffffffffffe8636]        # 0x65000000
    650179ca:	jmp    0x650177e0
    650179cf:	cmp    cl,0x80
    650179d2:	jb     0x6501826e
    650179d8:	cmp    cl,0x8f
    650179db:	ja     0x6501826e
    650179e1:	cmp    edi,0x20
    650179e4:	jae    0x6501826e
    650179ea:	mov    dl,cl
    650179ec:	mov    eax,edi
    650179ee:	mov    rcx,r13
    650179f1:	shl    rax,0x6
    650179f5:	and    edx,0xf
    650179f8:	lea    rsi,[rax+r13*1+0x20]
    650179fd:	mov    r8,rsi
    65017a00:	call   0x650176d0
    65017a05:	test   eax,eax
    65017a07:	js     0x6501826e
    65017a0d:	test   BYTE PTR [rbp+0x0],0xf
    65017a11:	je     0x65017966
    65017a17:	mov    r9d,0x1
    65017a1d:	mov    DWORD PTR [rsi+0x20],r9d
    65017a21:	mov    al,BYTE PTR [rbp+0x0]
    65017a24:	and    eax,0xf
    65017a27:	add    edi,r9d
    65017a2a:	mov    QWORD PTR [rsi+0x18],rax
    65017a2e:	jmp    0x650179a0
    65017a33:	mov    rcx,rax
    65017a36:	mov    eax,r8d
    65017a39:	sub    rcx,rbp
    65017a3c:	cmp    rcx,rax
    65017a3f:	jb     0x65018273
    65017a45:	lea    ecx,[r8-0x1]
    65017a49:	lea    eax,[rdx-0xa]
    65017a4c:	mov    rbx,rbp
    65017a4f:	add    rbp,rcx
    65017a52:	cmp    eax,0x16
    65017a55:	ja     0x6501826e
    65017a5b:	mov    ecx,DWORD PTR [r10+rax*4+0x182ec]
    65017a63:	add    rcx,r10
    65017a66:	jmp    rcx
    65017a68:	movzx  eax,BYTE PTR [rbx]
    65017a6b:	shl    ax,0x8
    65017a6f:	movzx  r8d,ax
    65017a73:	movzx  eax,BYTE PTR [rbx+0x1]
    65017a77:	jmp    0x65017a9b
    65017a79:	movzx  eax,BYTE PTR [rbx+0x1]
    65017a7d:	movzx  r8d,BYTE PTR [rbx]
    65017a81:	shl    r8d,0x8
    65017a85:	or     r8d,eax
    65017a88:	movzx  eax,BYTE PTR [rbx+0x2]
    65017a8c:	shl    r8d,0x8
    65017a90:	or     r8d,eax
    65017a93:	movzx  eax,BYTE PTR [rbx+0x3]
    65017a97:	shl    r8d,0x8
    65017a9b:	or     r8d,eax
    65017a9e:	mov    DWORD PTR [rsp+0xb0],r8d
    65017aa6:	je     0x65017d0f
    65017aac:	mov    rax,QWORD PTR [rsp+0x28]
    65017ab1:	mov    edx,0x20
    65017ab6:	mov    DWORD PTR [rsp+0xa0],edx
    65017abd:	add    rbp,0x1
    65017ac1:	jmp    0x65017a33
    65017ac6:	movzx  eax,BYTE PTR [rbx+0x1]
    65017aca:	movzx  ecx,BYTE PTR [rbx]
    65017acd:	mov    DWORD PTR [rsp+0x30],0x4
    65017ad5:	shl    ecx,0x8
    65017ad8:	or     ecx,eax
    65017ada:	movzx  eax,BYTE PTR [rbx+0x2]
    65017ade:	shl    ecx,0x8
    65017ae1:	or     ecx,eax
    65017ae3:	movzx  eax,BYTE PTR [rbx+0x3]
    65017ae7:	shl    ecx,0x8
    65017aea:	or     ecx,eax
    65017aec:	mov    DWORD PTR [rsp+0x20],ecx
    65017af0:	cvtss2sd xmm0,DWORD PTR [rsp+0x20]
    65017af6:	movsd  QWORD PTR [rsp+0x38],xmm0
    65017afc:	jmp    0x650180e0
    65017b01:	movzx  eax,BYTE PTR [rbx+0x1]
    65017b05:	movzx  ecx,BYTE PTR [rbx]
    65017b08:	mov    DWORD PTR [rsp+0x30],0x4
    65017b10:	shl    rcx,0x8
    65017b14:	or     rcx,rax
    65017b17:	movzx  eax,BYTE PTR [rbx+0x2]
    65017b1b:	shl    rcx,0x8
    65017b1f:	or     rcx,rax
    65017b22:	movzx  eax,BYTE PTR [rbx+0x3]
    65017b26:	shl    rcx,0x8
    65017b2a:	or     rcx,rax
    65017b2d:	movzx  eax,BYTE PTR [rbx+0x4]
    65017b31:	shl    rcx,0x8
    65017b35:	or     rcx,rax
    65017b38:	movzx  eax,BYTE PTR [rbx+0x5]
    65017b3c:	shl    rcx,0x8
    65017b40:	or     rcx,rax
    65017b43:	movzx  eax,BYTE PTR [rbx+0x6]
    65017b47:	shl    rcx,0x8
    65017b4b:	or     rcx,rax
    65017b4e:	movzx  eax,BYTE PTR [rbx+0x7]
    65017b52:	shl    rcx,0x8
    65017b56:	or     rcx,rax
    65017b59:	mov    QWORD PTR [rsp+0x20],rcx
    65017b5e:	movsd  xmm0,QWORD PTR [rsp+0x20]
    65017b64:	movsd  QWORD PTR [rsp+0x38],xmm0
    65017b6a:	jmp    0x650180e0
    65017b6f:	movzx  eax,BYTE PTR [rbx]
    65017b72:	mov    DWORD PTR [rsp+0x30],0x2
    65017b7a:	mov    QWORD PTR [rsp+0x38],rax
    65017b7f:	jmp    0x650180e0
    65017b84:	movzx  eax,BYTE PTR [rbx]
    65017b87:	mov    DWORD PTR [rsp+0x30],0x2
    65017b8f:	shl    ax,0x8
    65017b93:	movzx  ecx,ax
    65017b96:	movzx  eax,BYTE PTR [rbx+0x1]
    65017b9a:	or     rcx,rax
    65017b9d:	mov    QWORD PTR [rsp+0x38],rcx
    65017ba2:	jmp    0x650180e0
    65017ba7:	movzx  eax,BYTE PTR [rbx+0x1]
    65017bab:	movzx  ecx,BYTE PTR [rbx]
    65017bae:	mov    DWORD PTR [rsp+0x30],0x2
    65017bb6:	shl    ecx,0x8
    65017bb9:	or     ecx,eax
    65017bbb:	movzx  eax,BYTE PTR [rbx+0x2]
    65017bbf:	shl    ecx,0x8
    65017bc2:	or     ecx,eax
    65017bc4:	movzx  eax,BYTE PTR [rbx+0x3]
    65017bc8:	shl    ecx,0x8
    65017bcb:	or     rcx,rax
    65017bce:	mov    QWORD PTR [rsp+0x38],rcx
    65017bd3:	jmp    0x650180e0
    65017bd8:	movzx  eax,BYTE PTR [rbx+0x1]
    65017bdc:	movzx  ecx,BYTE PTR [rbx]
    65017bdf:	mov    DWORD PTR [rsp+0x30],0x2
    65017be7:	shl    rcx,0x8
    65017beb:	or     rcx,rax
    65017bee:	movzx  eax,BYTE PTR [rbx+0x2]
    65017bf2:	shl    rcx,0x8
    65017bf6:	or     rcx,rax
    65017bf9:	movzx  eax,BYTE PTR [rbx+0x3]
    65017bfd:	shl    rcx,0x8
    65017c01:	or     rcx,rax
    65017c04:	movzx  eax,BYTE PTR [rbx+0x4]
    65017c08:	shl    rcx,0x8
    65017c0c:	or     rcx,rax
    65017c0f:	movzx  eax,BYTE PTR [rbx+0x5]
    65017c13:	shl    rcx,0x8
    65017c17:	or     rcx,rax
    65017c1a:	movzx  eax,BYTE PTR [rbx+0x6]
    65017c1e:	shl    rcx,0x8
    65017c22:	or     rcx,rax
    65017c25:	movzx  eax,BYTE PTR [rbx+0x7]
    65017c29:	shl    rcx,0x8
    65017c2d:	or     rcx,rax
    65017c30:	mov    QWORD PTR [rsp+0x38],rcx
    65017c35:	jmp    0x650180e0
    65017c3a:	movzx  eax,BYTE PTR [rbx]
    65017c3d:	test   al,al
    65017c3f:	movsx  rax,al
    65017c43:	mov    QWORD PTR [rsp+0x38],rax
    65017c48:	js     0x65017d02
    65017c4e:	mov    DWORD PTR [rsp+0x30],0x2
    65017c56:	jmp    0x650180e0
    65017c5b:	movzx  eax,BYTE PTR [rbx+0x1]
    65017c5f:	movzx  ecx,BYTE PTR [rbx]
    65017c62:	shl    cx,0x8
    65017c66:	or     cx,ax
    65017c69:	movsx  rax,cx
    65017c6d:	mov    QWORD PTR [rsp+0x38],rax
    65017c72:	jl     0x65017d02
    65017c78:	mov    DWORD PTR [rsp+0x30],0x2
    65017c80:	jmp    0x650180e0
    65017c85:	movzx  eax,BYTE PTR [rbx+0x1]
    65017c89:	movzx  ecx,BYTE PTR [rbx]
    65017c8c:	shl    ecx,0x8
    65017c8f:	or     ecx,eax
    65017c91:	movzx  eax,BYTE PTR [rbx+0x2]
    65017c95:	shl    ecx,0x8
    65017c98:	or     ecx,eax
    65017c9a:	movzx  eax,BYTE PTR [rbx+0x3]
    65017c9e:	shl    ecx,0x8
    65017ca1:	or     ecx,eax
    65017ca3:	movsxd rax,ecx
    65017ca6:	jmp    0x65017c6d
    65017ca8:	movzx  eax,BYTE PTR [rbx+0x1]
    65017cac:	movzx  ecx,BYTE PTR [rbx]
    65017caf:	shl    rcx,0x8
    65017cb3:	or     rcx,rax
    65017cb6:	movzx  eax,BYTE PTR [rbx+0x2]
    65017cba:	shl    rcx,0x8
    65017cbe:	or     rcx,rax
    65017cc1:	movzx  eax,BYTE PTR [rbx+0x3]
    65017cc5:	shl    rcx,0x8
    65017cc9:	or     rcx,rax
    65017ccc:	movzx  eax,BYTE PTR [rbx+0x4]
    65017cd0:	shl    rcx,0x8
    65017cd4:	or     rcx,rax
    65017cd7:	movzx  eax,BYTE PTR [rbx+0x5]
    65017cdb:	shl    rcx,0x8
    65017cdf:	or     rcx,rax
    65017ce2:	movzx  eax,BYTE PTR [rbx+0x6]
    65017ce6:	shl    rcx,0x8
    65017cea:	or     rcx,rax
    65017ced:	movzx  eax,BYTE PTR [rbx+0x7]
    65017cf1:	shl    rcx,0x8
    65017cf5:	or     rcx,rax
    65017cf8:	mov    QWORD PTR [rsp+0x38],rcx
    65017cfd:	jmp    0x65017c72
    65017d02:	mov    DWORD PTR [rsp+0x30],0x3
    65017d0a:	jmp    0x650180e0
    65017d0f:	mov    DWORD PTR [rsp+0x30],0x5
    65017d17:	mov    QWORD PTR [rsp+0x40],rbx
    65017d1c:	mov    DWORD PTR [rsp+0x38],r8d
    65017d21:	mov    BYTE PTR [r13+0x8],0x1
    65017d26:	jmp    0x650180e0
    65017d2b:	cmp    edi,0x20
    65017d2e:	jae    0x6501826e
    65017d34:	movzx  eax,BYTE PTR [rbx]
    65017d37:	mov    r14d,edi
    65017d3a:	shl    ax,0x8
    65017d3e:	shl    r14,0x6
    65017d42:	movzx  ecx,ax
    65017d45:	movzx  eax,BYTE PTR [rbx+0x1]
    65017d49:	mov    DWORD PTR [r14+r13*1+0x20],0x6
    65017d52:	or     ecx,eax
    65017d54:	mov    DWORD PTR [r14+r13*1+0x28],0x0
    65017d5d:	mov    r15,QWORD PTR [r13+0x0]
    65017d61:	mov    rax,QWORD PTR [r15]
    65017d64:	lea    rcx,[rcx+rcx*2]
    65017d68:	lea    r12,[rcx*8+0x3]
    65017d70:	and    r12,0xfffffffffffffffc
    65017d74:	cmp    rax,r12
    65017d77:	jae    0x65017db0
    65017d79:	mov    rsi,QWORD PTR [r15+0x30]
    65017d7d:	cmp    rsi,r12
    65017d80:	jae    0x65017d8a
    65017d82:	add    rsi,rsi
    65017d85:	cmp    rsi,r12
    65017d88:	jb     0x65017d82
    65017d8a:	lea    rcx,[rsi+0x8]
    65017d8e:	call   0x6501fc50
    65017d93:	mov    rcx,QWORD PTR [r15+0x10]
    65017d97:	sub    rsi,r12
    65017d9a:	mov    QWORD PTR [rax],rcx
    65017d9d:	mov    QWORD PTR [r15+0x10],rax
    65017da1:	mov    QWORD PTR [r15],rsi
    65017da4:	lea    rdx,[rax+0x8]
    65017da8:	mov    r9d,0x1
    65017dae:	jmp    0x65017dba
    65017db0:	mov    rdx,QWORD PTR [r15+0x8]
    65017db4:	sub    rax,r12
    65017db7:	mov    QWORD PTR [r15],rax
    65017dba:	test   rdx,rdx
    65017dbd:	lea    rax,[rdx+r12*1]
    65017dc1:	mov    QWORD PTR [r15+0x8],rax
    65017dc5:	mov    QWORD PTR [r14+r13*1+0x30],rdx
    65017dca:	je     0x6501826e
    65017dd0:	movzx  ecx,BYTE PTR [rbx]
    65017dd3:	movzx  eax,BYTE PTR [rbx+0x1]
    65017dd7:	shl    cx,0x8
    65017ddb:	or     cx,ax
    65017dde:	je     0x650180c6
    65017de4:	mov    DWORD PTR [r14+r13*1+0x40],0x0
    65017ded:	jmp    0x65017fcb
    65017df2:	cmp    edi,0x20
    65017df5:	jae    0x6501826e
    65017dfb:	movzx  eax,BYTE PTR [rbx+0x1]
    65017dff:	movzx  ecx,BYTE PTR [rbx]
    65017e02:	mov    r14d,edi
    65017e05:	shl    ecx,0x8
    65017e08:	shl    r14,0x6
    65017e0c:	or     ecx,eax
    65017e0e:	movzx  eax,BYTE PTR [rbx+0x2]
    65017e12:	shl    ecx,0x8
    65017e15:	or     ecx,eax
    65017e17:	movzx  eax,BYTE PTR [rbx+0x3]
    65017e1b:	mov    DWORD PTR [r14+r13*1+0x20],0x6
    65017e24:	shl    ecx,0x8
    65017e27:	mov    DWORD PTR [r14+r13*1+0x28],0x0
    65017e30:	mov    r15,QWORD PTR [r13+0x0]
    65017e34:	or     ecx,eax
    65017e36:	mov    rax,QWORD PTR [r15]
    65017e39:	lea    rcx,[rcx+rcx*2]
    65017e3d:	lea    r12,[rcx*8+0x3]
    65017e45:	and    r12,0xfffffffffffffffc
    65017e49:	cmp    rax,r12
    65017e4c:	jae    0x65017e89
    65017e4e:	mov    rsi,QWORD PTR [r15+0x30]
    65017e52:	cmp    rsi,r12
    65017e55:	jae    0x65017e5f
    65017e57:	add    rsi,rsi
    65017e5a:	cmp    rsi,r12
    65017e5d:	jb     0x65017e57
    65017e5f:	lea    rcx,[rsi+0x8]
    65017e63:	call   0x6501fc50
    65017e68:	mov    rcx,QWORD PTR [r15+0x10]
    65017e6c:	sub    rsi,r12
    65017e6f:	mov    QWORD PTR [rax],rcx
    65017e72:	lea    rdx,[rax+0x8]
    65017e76:	mov    QWORD PTR [r15+0x10],rax
    65017e7a:	mov    QWORD PTR [r15],rsi
    65017e7d:	mov    r9d,0x1
    65017e83:	lea    rax,[rdx+r12*1]
    65017e87:	jmp    0x65017e97
    65017e89:	mov    rdx,QWORD PTR [r15+0x8]
    65017e8d:	sub    rax,r12
    65017e90:	mov    QWORD PTR [r15],rax
    65017e93:	lea    rax,[r12+rdx*1]
    65017e97:	test   rdx,rdx
    65017e9a:	mov    QWORD PTR [r15+0x8],rax
    65017e9e:	mov    QWORD PTR [r14+r13*1+0x30],rdx
    65017ea3:	je     0x6501826e
    65017ea9:	movzx  eax,BYTE PTR [rbx+0x1]
    65017ead:	movzx  ecx,BYTE PTR [rbx]
    65017eb0:	shl    ecx,0x8
    65017eb3:	or     ecx,eax
    65017eb5:	movzx  eax,BYTE PTR [rbx+0x2]
    65017eb9:	shl    ecx,0x8
    65017ebc:	or     ecx,eax
    65017ebe:	movzx  eax,BYTE PTR [rbx+0x3]
    65017ec2:	shl    ecx,0x8
    65017ec5:	or     ecx,eax
    65017ec7:	je     0x650180c6
    65017ecd:	mov    DWORD PTR [r14+r13*1+0x40],0x0
    65017ed6:	movzx  eax,BYTE PTR [rbx+0x1]
    65017eda:	movzx  ecx,BYTE PTR [rbx]
    65017edd:	shl    ecx,0x8
    65017ee0:	or     ecx,eax
    65017ee2:	movzx  eax,BYTE PTR [rbx+0x2]
    65017ee6:	shl    ecx,0x8
    65017ee9:	or     ecx,eax
    65017eeb:	movzx  eax,BYTE PTR [rbx+0x3]
    65017eef:	shl    ecx,0x8
    65017ef2:	or     rcx,rax
    65017ef5:	add    edi,0x1
    65017ef8:	mov    QWORD PTR [r14+r13*1+0x38],rcx
    65017efd:	jmp    0x650179a0
    65017f02:	cmp    edi,0x20
    65017f05:	jae    0x6501826e
    65017f0b:	movzx  eax,BYTE PTR [rbx]
    65017f0e:	mov    r14d,edi
    65017f11:	shl    ax,0x8
    65017f15:	shl    r14,0x6
    65017f19:	movzx  ecx,ax
    65017f1c:	movzx  eax,BYTE PTR [rbx+0x1]
    65017f20:	mov    DWORD PTR [r14+r13*1+0x20],0x7
    65017f29:	or     ecx,eax
    65017f2b:	mov    DWORD PTR [r14+r13*1+0x28],0x0
    65017f34:	mov    r15,QWORD PTR [r13+0x0]
    65017f38:	mov    rax,QWORD PTR [r15]
    65017f3b:	lea    r12,[rcx+rcx*2]
    65017f3f:	shl    r12,0x4
    65017f43:	add    r12,0x3
    65017f47:	and    r12,0xfffffffffffffffc
    65017f4b:	cmp    rax,r12
    65017f4e:	jae    0x65017f92
    65017f50:	mov    rsi,QWORD PTR [r15+0x30]
    65017f54:	cmp    rsi,r12
    65017f57:	jae    0x65017f68
    65017f59:	data16 xchg ax,ax
    65017f5c:	data16 data16 xchg ax,ax
    65017f60:	add    rsi,rsi
    65017f63:	cmp    rsi,r12
    65017f66:	jb     0x65017f60
    65017f68:	lea    rcx,[rsi+0x8]
    65017f6c:	call   0x6501fc50
    65017f71:	mov    rcx,QWORD PTR [r15+0x10]
    65017f75:	sub    rsi,r12
    65017f78:	mov    QWORD PTR [rax],rcx
    65017f7b:	lea    rdx,[rax+0x8]
    65017f7f:	mov    QWORD PTR [r15+0x10],rax
    65017f83:	mov    QWORD PTR [r15],rsi
    65017f86:	mov    r9d,0x1
    65017f8c:	lea    rax,[rdx+r12*1]
    65017f90:	jmp    0x65017fa0
    65017f92:	mov    rdx,QWORD PTR [r15+0x8]
    65017f96:	sub    rax,r12
    65017f99:	mov    QWORD PTR [r15],rax
    65017f9c:	lea    rax,[r12+rdx*1]
    65017fa0:	test   rdx,rdx
    65017fa3:	mov    QWORD PTR [r15+0x8],rax
    65017fa7:	mov    QWORD PTR [r14+r13*1+0x30],rdx
    65017fac:	je     0x6501826e
    65017fb2:	movzx  ecx,BYTE PTR [rbx]
    65017fb5:	movzx  eax,BYTE PTR [rbx+0x1]
    65017fb9:	shl    cx,0x8
    65017fbd:	or     cx,ax
    65017fc0:	je     0x650180c6
    65017fc6:	mov    DWORD PTR [r14+r13*1+0x40],r9d
    65017fcb:	movzx  eax,BYTE PTR [rbx]
    65017fce:	shl    ax,0x8
    65017fd2:	movzx  ecx,ax
    65017fd5:	movzx  eax,BYTE PTR [rbx+0x1]
    65017fd9:	or     rcx,rax
    65017fdc:	add    edi,0x1
    65017fdf:	mov    QWORD PTR [r14+r13*1+0x38],rcx
    65017fe4:	jmp    0x650179a0
    65017fe9:	cmp    edi,0x20
    65017fec:	jae    0x6501826e
    65017ff2:	movzx  eax,BYTE PTR [rbx+0x1]
    65017ff6:	movzx  ecx,BYTE PTR [rbx]
    65017ff9:	mov    r14d,edi
    65017ffc:	shl    ecx,0x8
    65017fff:	shl    r14,0x6
    65018003:	or     ecx,eax
    65018005:	movzx  eax,BYTE PTR [rbx+0x2]
    65018009:	shl    ecx,0x8
    6501800c:	or     ecx,eax
    6501800e:	movzx  eax,BYTE PTR [rbx+0x3]
    65018012:	mov    DWORD PTR [r14+r13*1+0x20],0x7
    6501801b:	shl    ecx,0x8
    6501801e:	mov    DWORD PTR [r14+r13*1+0x28],0x0
    65018027:	mov    r15,QWORD PTR [r13+0x0]
    6501802b:	or     ecx,eax
    6501802d:	mov    rax,QWORD PTR [r15]
    65018030:	lea    r12,[rcx+rcx*2]
    65018034:	shl    r12,0x4
    65018038:	add    r12,0x3
    6501803c:	and    r12,0xfffffffffffffffc
    65018040:	cmp    rax,r12
    65018043:	jae    0x65018082
    65018045:	mov    rsi,QWORD PTR [r15+0x30]
    65018049:	cmp    rsi,r12
    6501804c:	jae    0x65018058
    6501804e:	xchg   ax,ax
    65018050:	add    rsi,rsi
    65018053:	cmp    rsi,r12
    65018056:	jb     0x65018050
    65018058:	lea    rcx,[rsi+0x8]
    6501805c:	call   0x6501fc50
    65018061:	mov    rcx,QWORD PTR [r15+0x10]
    65018065:	sub    rsi,r12
    65018068:	mov    QWORD PTR [rax],rcx
    6501806b:	lea    rdx,[rax+0x8]
    6501806f:	mov    QWORD PTR [r15+0x10],rax
    65018073:	mov    QWORD PTR [r15],rsi
    65018076:	mov    r9d,0x1
    6501807c:	lea    rax,[rdx+r12*1]
    65018080:	jmp    0x65018090
    65018082:	mov    rdx,QWORD PTR [r15+0x8]
    65018086:	sub    rax,r12
    65018089:	mov    QWORD PTR [r15],rax
    6501808c:	lea    rax,[r12+rdx*1]
    65018090:	test   rdx,rdx
    65018093:	mov    QWORD PTR [r15+0x8],rax
    65018097:	mov    QWORD PTR [r14+r13*1+0x30],rdx
    6501809c:	je     0x6501826e
    650180a2:	movzx  eax,BYTE PTR [rbx+0x1]
    650180a6:	movzx  ecx,BYTE PTR [rbx]
    650180a9:	shl    ecx,0x8
    650180ac:	or     ecx,eax
    650180ae:	movzx  eax,BYTE PTR [rbx+0x2]
    650180b2:	shl    ecx,0x8
    650180b5:	or     ecx,eax
    650180b7:	movzx  eax,BYTE PTR [rbx+0x3]
    650180bb:	shl    ecx,0x8
    650180be:	or     ecx,eax
    650180c0:	jne    0x65018216
    650180c6:	mov    rax,QWORD PTR [r14+r13*1+0x20]
    650180cb:	lea    rcx,[rsp+0x30]
    650180d0:	mov    QWORD PTR [rcx],rax
    650180d3:	mov    rax,QWORD PTR [r14+r13*1+0x28]
    650180d8:	mov    QWORD PTR [rcx+0x8],rax
    650180dc:	mov    QWORD PTR [rcx+0x10],rdx
    650180e0:	movsxd rax,edi
    650180e3:	shl    rax,0x6
    650180e7:	lea    r8,[rax+r13*1-0x20]
    650180ec:	lea    r9,[rax+r13*1+0x8]
    650180f1:	test   edi,edi
    650180f3:	je     0x65018247
    650180f9:	mov    eax,DWORD PTR [r8+0x20]
    650180fd:	test   eax,eax
    650180ff:	je     0x65018188
    65018105:	sub    eax,0x1
    65018108:	je     0x650181ed
    6501810e:	cmp    eax,0x1
    65018111:	jne    0x6501826e
    65018117:	mov    eax,DWORD PTR [r8+0x8]
    6501811b:	mov    rcx,QWORD PTR [r8+0x10]
    6501811f:	lea    r10,[rsp+0x30]
    65018124:	lea    rdx,[rax+rax*2]
    65018128:	mov    rax,QWORD PTR [r9]
    6501812b:	add    rdx,rdx
    6501812e:	mov    QWORD PTR [rcx+rdx*8],rax
    65018132:	mov    rax,QWORD PTR [r9+0x8]
    65018136:	mov    QWORD PTR [rcx+rdx*8+0x8],rax
    6501813b:	mov    rax,QWORD PTR [r9+0x10]
    6501813f:	mov    QWORD PTR [rcx+rdx*8+0x10],rax
    65018144:	mov    eax,DWORD PTR [r8+0x8]
    65018148:	mov    rcx,QWORD PTR [r8+0x10]
    6501814c:	lea    rdx,[rax+rax*2]
    65018150:	mov    rax,QWORD PTR [r10]
    65018153:	add    rdx,rdx
    65018156:	mov    QWORD PTR [rcx+rdx*8+0x18],rax
    6501815b:	mov    rax,QWORD PTR [r10+0x8]
    6501815f:	mov    QWORD PTR [rcx+rdx*8+0x20],rax
    65018164:	mov    rax,QWORD PTR [r10+0x10]
    65018168:	mov    QWORD PTR [rcx+rdx*8+0x28],rax
    6501816d:	add    DWORD PTR [r8+0x8],0x1
    65018172:	add    QWORD PTR [r8+0x18],0xffffffffffffffff
    65018177:	je     0x650181c2
    65018179:	mov    r9d,0x1
    6501817f:	mov    DWORD PTR [r8+0x20],r9d
    65018183:	jmp    0x650179a0
    65018188:	mov    eax,DWORD PTR [r8+0x8]
    6501818c:	mov    rcx,QWORD PTR [r8+0x10]
    65018190:	lea    r10,[rsp+0x30]
    65018195:	lea    rdx,[rax+rax*2]
    65018199:	mov    rax,QWORD PTR [r10]
    6501819c:	mov    QWORD PTR [rcx+rdx*8],rax
    650181a0:	mov    rax,QWORD PTR [r10+0x8]
    650181a4:	mov    QWORD PTR [rcx+rdx*8+0x8],rax
    650181a9:	mov    rax,QWORD PTR [r10+0x10]
    650181ad:	mov    QWORD PTR [rcx+rdx*8+0x10],rax
    650181b2:	add    DWORD PTR [r8+0x8],0x1
    650181b7:	add    QWORD PTR [r8+0x18],0xffffffffffffffff
    650181bc:	jne    0x6501799a
    650181c2:	mov    rax,QWORD PTR [r8]
    650181c5:	lea    rcx,[rsp+0x30]
    650181ca:	add    edi,0xffffffff
    650181cd:	mov    QWORD PTR [rcx],rax
    650181d0:	mov    rax,QWORD PTR [r8+0x8]
    650181d4:	sub    r8,0x40
    650181d8:	mov    QWORD PTR [rcx+0x8],rax
    650181dc:	mov    rax,QWORD PTR [r8+0x50]
    650181e0:	sub    r9,0x40
    650181e4:	mov    QWORD PTR [rcx+0x10],rax
    650181e8:	jmp    0x650180f1
    650181ed:	lea    rcx,[rsp+0x30]
    650181f2:	mov    DWORD PTR [r8+0x20],0x2
    650181fa:	mov    rax,QWORD PTR [rcx]
    650181fd:	mov    QWORD PTR [r8+0x28],rax
    65018201:	mov    rax,QWORD PTR [rcx+0x8]
    65018205:	mov    QWORD PTR [r8+0x30],rax
    65018209:	mov    rax,QWORD PTR [rcx+0x10]
    6501820d:	mov    QWORD PTR [r8+0x38],rax
    65018211:	jmp    0x6501799a
    65018216:	mov    DWORD PTR [r14+r13*1+0x40],r9d
    6501821b:	movzx  eax,BYTE PTR [rbx+0x1]
    6501821f:	movzx  ecx,BYTE PTR [rbx]
    65018222:	shl    ecx,0x8
    65018225:	or     ecx,eax
    65018227:	movzx  eax,BYTE PTR [rbx+0x2]
    6501822b:	shl    ecx,0x8
    6501822e:	or     ecx,eax
    65018230:	movzx  eax,BYTE PTR [rbx+0x3]
    65018234:	shl    ecx,0x8
    65018237:	or     rcx,rax
    6501823a:	add    edi,0x1
    6501823d:	mov    QWORD PTR [r14+r13*1+0x38],rcx
    65018242:	jmp    0x650179a0
    65018247:	lea    rcx,[rsp+0x30]
    6501824c:	add    rbp,0x1
    65018250:	mov    rax,QWORD PTR [rcx]
    65018253:	mov    QWORD PTR [r13+0x20],rax
    65018257:	mov    rax,QWORD PTR [rcx+0x8]
    6501825b:	mov    QWORD PTR [r13+0x28],rax
    6501825f:	mov    rax,QWORD PTR [rcx+0x10]
    65018263:	mov    QWORD PTR [r13+0x30],rax
    65018267:	mov    eax,0x1
    6501826c:	jmp    0x65018275
    6501826e:	or     eax,0xffffffff
    65018271:	jmp    0x65018275
    65018273:	xor    eax,eax
    65018275:	mov    ecx,DWORD PTR [rsp+0xa0]
    6501827c:	sub    rbp,QWORD PTR [rsp+0xa8]
    65018284:	mov    DWORD PTR [r13+0x18],edi
    65018288:	mov    DWORD PTR [r13+0x10],ecx
    6501828c:	mov    ecx,DWORD PTR [rsp+0xb0]
    65018293:	mov    DWORD PTR [r13+0x14],ecx
    65018297:	mov    rcx,QWORD PTR [rsp+0xb8]
    6501829f:	mov    QWORD PTR [rcx],rbp
    650182a2:	add    rsp,0x58
    650182a6:	pop    r15
    650182a8:	pop    r14
    650182aa:	pop    r13
    650182ac:	pop    r12
    650182ae:	pop    rdi
    650182af:	pop    rsi
    650182b0:	pop    rbp
    650182b1:	pop    rbx
    650182b2:	ret    
    650182b3:	nop
    650182b4:	push   0x78
    650182b6:	add    DWORD PTR [rax],eax
    650182b8:	ja     0x65018332
    650182ba:	add    DWORD PTR [rax],eax
    650182bc:	xchg   BYTE PTR [rax+0x1],bh
    650182bf:	add    BYTE PTR [rbp-0x3ffffe88],dl
    650182c5:	js     0x650182c8
    650182c7:	add    BYTE PTR [rsi-0x7e],ch
    650182ca:	add    DWORD PTR [rax],eax
    650182cc:	add    BYTE PTR [rip+0x5050201],al        # 0x6a0684d3
    650182d2:	add    eax,0x3050505
    650182d7:	add    eax,DWORD PTR [rbx]
    650182d9:	add    eax,DWORD PTR [rbx]
    650182db:	add    eax,DWORD PTR [rbx]
    650182dd:	add    eax,DWORD PTR [rbx]
    650182df:	add    eax,DWORD PTR [rip+0x5050505]        # 0x6a0687ea
    650182e5:	add    eax,0x4040404
    650182ea:	add    al,0x4
    650182ec:	(bad)  
    650182ed:	jp     0x650182f0
    650182ef:	add    BYTE PTR [rcx],al
    650182f1:	jnp    0x650182f4
    650182f3:	add    BYTE PTR [rdi+0x7b],ch
    650182f6:	add    DWORD PTR [rax],eax
    650182f8:	test   BYTE PTR [rbx+0x1],bh
    650182fb:	add    BYTE PTR [rdi-0x27fffe85],ah
    65018301:	jnp    0x65018304
    65018303:	add    BYTE PTR [rdx],bh
    65018305:	jl     0x65018308
    65018307:	add    BYTE PTR [rbx+0x7c],bl
    6501830a:	add    DWORD PTR [rax],eax
    6501830c:	test   DWORD PTR [rcx+rax*1+0x0],edi
    65018310:	test   al,0x7c
    65018312:	add    DWORD PTR [rax],eax
    65018314:	outs   dx,BYTE PTR ds:[rsi]
    65018315:	(bad)  
    65018316:	add    DWORD PTR [rax],eax
    65018318:	outs   dx,BYTE PTR ds:[rsi]
    65018319:	(bad)  
    6501831a:	add    DWORD PTR [rax],eax
    6501831c:	outs   dx,BYTE PTR ds:[rsi]
    6501831d:	(bad)  
    6501831e:	add    DWORD PTR [rax],eax
    65018320:	outs   dx,BYTE PTR ds:[rsi]
    65018321:	(bad)  
    65018322:	add    DWORD PTR [rax],eax
    65018324:	outs   dx,BYTE PTR ds:[rsi]
    65018325:	(bad)  
    65018326:	add    DWORD PTR [rax],eax
    65018328:	outs   dx,BYTE PTR ds:[rsi]
    65018329:	(bad)  
    6501832a:	add    DWORD PTR [rax],eax
    6501832c:	push   0x7900017a
    65018331:	jp     0x65018334
    65018333:	add    BYTE PTR [rbx],ch
    65018335:	jge    0x65018338
    65018337:	add    dl,dh
    65018339:	jge    0x6501833c
    6501833b:	add    BYTE PTR [rdx],al
    6501833d:	jg     0x65018340
    6501833f:	add    cl,ch
    65018341:	jg     0x65018344
    65018343:	add    BYTE PTR [rdi],cl
    65018345:	jge    0x65018348
    65018347:	add    ah,cl
    65018349:	int3   
    6501834a:	int3   
    6501834b:	int3   
    6501834c:	int3   
    6501834d:	int3   
    6501834e:	int3   
    6501834f:	int3   
    65018350:	mov    r11,rsp
    65018353:	mov    QWORD PTR [r11+0x8],rbx
    65018357:	push   rdi
    65018358:	sub    rsp,0x860
    6501835f:	mov    rdi,rdx
    65018362:	xor    edx,edx
    65018364:	test   r8,r8
    65018367:	mov    rax,rdx
    6501836a:	mov    QWORD PTR [r11+0x10],rdx
    6501836e:	mov    rbx,r8
    65018371:	je     0x6501837a
    65018373:	mov    rax,QWORD PTR [r8]
    65018376:	mov    QWORD PTR [r11+0x10],rax
    6501837a:	cmp    rdi,rax
    6501837d:	ja     0x65018392
    6501837f:	xor    eax,eax
    65018381:	mov    rbx,QWORD PTR [rsp+0x870]
    65018389:	add    rsp,0x860
    65018390:	pop    rdi
    65018391:	ret    
    65018392:	xor    eax,eax
    65018394:	mov    DWORD PTR [rsp+0x50],edx
    65018398:	mov    DWORD PTR [rsp+0x54],edx
    6501839c:	mov    DWORD PTR [rsp+0x58],edx
    650183a0:	lea    rdx,[rsp+0x20]
    650183a5:	mov    DWORD PTR [rsp+0x20],eax
    650183a9:	mov    DWORD PTR [rsp+0x24],eax
    650183ad:	mov    DWORD PTR [rsp+0x28],eax
    650183b1:	mov    DWORD PTR [rsp+0x2c],eax
    650183b5:	mov    DWORD PTR [rsp+0x30],eax
    650183b9:	mov    DWORD PTR [rsp+0x34],eax
    650183bd:	mov    rax,QWORD PTR [rdx]
    650183c0:	lea    r8,[rsp+0x60]
    650183c5:	mov    QWORD PTR [r8],rax
    650183c8:	mov    rax,QWORD PTR [rdx+0x8]
    650183cc:	mov    QWORD PTR [r8+0x8],rax
    650183d0:	mov    rax,QWORD PTR [rdx+0x10]
    650183d4:	mov    rdx,rcx
    650183d7:	mov    QWORD PTR [r8+0x10],rax
    650183db:	mov    QWORD PTR [rsp+0x40],r9
    650183e0:	lea    r9,[rsp+0x878]
    650183e8:	lea    rcx,[rsp+0x40]
    650183ed:	mov    r8,rdi
    650183f0:	mov    BYTE PTR [rsp+0x48],0x0
    650183f5:	call   0x65017780
    650183fa:	test   eax,eax
    650183fc:	jns    0x65018412
    650183fe:	or     eax,0xffffffff
    65018401:	mov    rbx,QWORD PTR [rsp+0x870]
    65018409:	add    rsp,0x860
    65018410:	pop    rdi
    65018411:	ret    
    65018412:	test   rbx,rbx
    65018415:	mov    rdx,QWORD PTR [rsp+0x878]
    6501841d:	je     0x65018422
    6501841f:	mov    QWORD PTR [rbx],rdx
    65018422:	test   eax,eax
    65018424:	je     0x6501837f
    6501842a:	mov    rcx,QWORD PTR [rsp+0x890]
    65018432:	mov    rbx,QWORD PTR [rsp+0x870]
    6501843a:	lea    r8,[rsp+0x60]
    6501843f:	mov    rax,QWORD PTR [r8]
    65018442:	cmp    rdx,rdi
    65018445:	mov    QWORD PTR [rcx],rax
    65018448:	mov    rax,QWORD PTR [r8+0x8]
    6501844c:	mov    QWORD PTR [rcx+0x8],rax
    65018450:	mov    rax,QWORD PTR [r8+0x10]
    65018454:	mov    QWORD PTR [rcx+0x10],rax
    65018458:	sbb    eax,eax
    6501845a:	add    eax,0x2
    6501845d:	add    rsp,0x860
    65018464:	pop    rdi
    65018465:	ret    
    65018466:	int3   
    65018467:	int3   
    65018468:	int3   
    65018469:	int3   
    6501846a:	int3   
    6501846b:	int3   
    6501846c:	int3   
    6501846d:	int3   
    6501846e:	int3   
    6501846f:	int3   
    65018470:	mov    eax,0x1
    65018475:	cmp    edx,eax
    65018477:	jne    0x65018480
    65018479:	mov    QWORD PTR [rip+0x2c680],rcx        # 0x65044b00
    65018480:	ret    0x0
    65018483:	int3   
    65018484:	int3   
    65018485:	int3   
    65018486:	int3   
    65018487:	int3   
    65018488:	int3   
    65018489:	int3   
    6501848a:	int3   
    6501848b:	int3   
    6501848c:	int3   
    6501848d:	int3   
    6501848e:	int3   
    6501848f:	int3   
    65018490:	mov    QWORD PTR [rsp+0x10],rsi
    65018495:	push   rdi
    65018496:	sub    rsp,0x20
    6501849a:	cmp    BYTE PTR [rip+0x2c657],0x0        # 0x65044af8
    650184a1:	mov    rdi,rdx
    650184a4:	mov    esi,ecx
    650184a6:	jne    0x65018524
    650184a8:	lea    rcx,[rip+0x1c061]        # 0x65034510
    650184af:	mov    QWORD PTR [rsp+0x30],rbx
    650184b4:	mov    BYTE PTR [rip+0x2c63d],0x1        # 0x65044af8
    650184bb:	call   QWORD PTR [rip+0x1bc3f]        # 0x65034100
    650184c1:	lea    r8,[rip+0x1c020]        # 0x650344e8
    650184c8:	lea    rcx,[rip+0x1c009]        # 0x650344d8
    650184cf:	mov    edx,0xb
    650184d4:	mov    rbx,rax
    650184d7:	call   0x6500bcb0
    650184dc:	mov    rcx,rbx
    650184df:	mov    rdx,rax
    650184e2:	call   QWORD PTR [rip+0x1bc20]        # 0x65034108
    650184e8:	lea    r8,[rip+0x1bfb1]        # 0x650344a0
    650184ef:	lea    rcx,[rip+0x1bf8a]        # 0x65034480
    650184f6:	mov    edx,0x19
    650184fb:	mov    QWORD PTR [rip+0x2c5e6],rax        # 0x65044ae8
    65018502:	call   0x6500bcb0
    65018507:	mov    rcx,rbx
    6501850a:	mov    rdx,rax
    6501850d:	call   QWORD PTR [rip+0x1bbf5]        # 0x65034108
    65018513:	mov    QWORD PTR [rip+0x2c5d6],rax        # 0x65044af0
    6501851a:	call   0x6501cb90
    6501851f:	mov    rbx,QWORD PTR [rsp+0x30]
    65018524:	mov    rax,QWORD PTR [rip+0x2c5bd]        # 0x65044ae8
    6501852b:	test   rax,rax
    6501852e:	je     0x65018537
    65018530:	mov    rdx,rdi
    65018533:	mov    ecx,esi
    65018535:	call   rax
    65018537:	mov    rsi,QWORD PTR [rsp+0x38]
    6501853c:	add    rsp,0x20
    65018540:	pop    rdi
    65018541:	ret    
    65018542:	int3   
    65018543:	int3   
    65018544:	int3   
    65018545:	int3   
    65018546:	int3   
    65018547:	int3   
    65018548:	int3   
    65018549:	int3   
    6501854a:	int3   
    6501854b:	int3   
    6501854c:	int3   
    6501854d:	int3   
    6501854e:	int3   
    6501854f:	int3   
    65018550:	rex push rdi
    65018552:	sub    rsp,0x20
    65018556:	cmp    BYTE PTR [rip+0x2c59b],0x0        # 0x65044af8
    6501855d:	mov    rdi,rcx
    65018560:	jne    0x650185de
    65018562:	lea    rcx,[rip+0x1bfa7]        # 0x65034510
    65018569:	mov    QWORD PTR [rsp+0x30],rbx
    6501856e:	mov    BYTE PTR [rip+0x2c583],0x1        # 0x65044af8
    65018575:	call   QWORD PTR [rip+0x1bb85]        # 0x65034100
    6501857b:	lea    r8,[rip+0x1bf66]        # 0x650344e8
    65018582:	lea    rcx,[rip+0x1bf4f]        # 0x650344d8
    65018589:	mov    edx,0xb
    6501858e:	mov    rbx,rax
    65018591:	call   0x6500bcb0
    65018596:	mov    rcx,rbx
    65018599:	mov    rdx,rax
    6501859c:	call   QWORD PTR [rip+0x1bb66]        # 0x65034108
    650185a2:	lea    r8,[rip+0x1bef7]        # 0x650344a0
    650185a9:	lea    rcx,[rip+0x1bed0]        # 0x65034480
    650185b0:	mov    edx,0x19
    650185b5:	mov    QWORD PTR [rip+0x2c52c],rax        # 0x65044ae8
    650185bc:	call   0x6500bcb0
    650185c1:	mov    rcx,rbx
    650185c4:	mov    rdx,rax
    650185c7:	call   QWORD PTR [rip+0x1bb3b]        # 0x65034108
    650185cd:	mov    QWORD PTR [rip+0x2c51c],rax        # 0x65044af0
    650185d4:	call   0x6501cb90
    650185d9:	mov    rbx,QWORD PTR [rsp+0x30]
    650185de:	mov    rax,QWORD PTR [rip+0x2c50b]        # 0x65044af0
    650185e5:	test   rax,rax
    650185e8:	je     0x650185ef
    650185ea:	mov    rcx,rdi
    650185ed:	call   rax
    650185ef:	add    rsp,0x20
    650185f3:	pop    rdi
    650185f4:	ret    
    650185f5:	int3   
    650185f6:	int3   
    650185f7:	int3   
    650185f8:	int3   
    650185f9:	int3   
    650185fa:	int3   
    650185fb:	int3   
    650185fc:	int3   
    650185fd:	int3   
    650185fe:	int3   
    650185ff:	int3   
    65018600:	mov    rax,QWORD PTR [rcx]
    65018603:	mov    QWORD PTR [rdx],rax
    65018606:	mov    rax,QWORD PTR [rcx+0x8]
    6501860a:	mov    QWORD PTR [rdx+0x8],rax
    6501860e:	mov    rax,QWORD PTR [rcx+0x10]
    65018612:	mov    QWORD PTR [rdx+0x10],rax
    65018616:	mov    rax,rdx
    65018619:	ret    
    6501861a:	int3   
    6501861b:	int3   
    6501861c:	int3   
    6501861d:	int3   
    6501861e:	int3   
    6501861f:	int3   
    65018620:	jmp    0x6501d600
    65018625:	int3   
    65018626:	int3   
    65018627:	int3   
    65018628:	int3   
    65018629:	int3   
    6501862a:	int3   
    6501862b:	int3   
    6501862c:	int3   
    6501862d:	int3   
    6501862e:	int3   
    6501862f:	int3   
    65018630:	mov    QWORD PTR [rsp+0x8],rbx
    65018635:	push   rdi
    65018636:	sub    rsp,0x20
    6501863a:	mov    ebx,edx
    6501863c:	mov    rdi,rcx
    6501863f:	call   0x6501d600
    65018644:	test   bl,0x1
    65018647:	je     0x65018651
    65018649:	mov    rcx,rdi
    6501864c:	call   0x6501d300
    65018651:	mov    rax,rdi
    65018654:	mov    rbx,QWORD PTR [rsp+0x30]
    65018659:	add    rsp,0x20
    6501865d:	pop    rdi
    6501865e:	ret    
    6501865f:	int3   
    65018660:	rex push rbx
    65018662:	sub    rsp,0x20
    65018666:	mov    rbx,QWORD PTR [rcx]
    65018669:	test   rbx,rbx
    6501866c:	je     0x6501867e
    6501866e:	mov    rcx,rbx
    65018671:	call   0x65017550
    65018676:	mov    rcx,rbx
    65018679:	call   0x6501d300
    6501867e:	add    rsp,0x20
    65018682:	pop    rbx
    65018683:	ret    
    65018684:	int3   
    65018685:	int3   
    65018686:	int3   
    65018687:	int3   
    65018688:	int3   
    65018689:	int3   
    6501868a:	int3   
    6501868b:	int3   
    6501868c:	int3   
    6501868d:	int3   
    6501868e:	int3   
    6501868f:	int3   
    65018690:	rex push rbx
    65018692:	sub    rsp,0x20
    65018696:	mov    rbx,QWORD PTR [rcx+0x18]
    6501869a:	test   rbx,rbx
    6501869d:	je     0x650186af
    6501869f:	mov    rcx,rbx
    650186a2:	call   0x65017550
    650186a7:	mov    rcx,rbx
    650186aa:	call   0x6501d300
    650186af:	add    rsp,0x20
    650186b3:	pop    rbx
    650186b4:	ret    
    650186b5:	int3   
    650186b6:	int3   
    650186b7:	int3   
    650186b8:	int3   
    650186b9:	int3   
    650186ba:	int3   
    650186bb:	int3   
    650186bc:	int3   
    650186bd:	int3   
    650186be:	int3   
    650186bf:	int3   
    650186c0:	rex push rbx
    650186c2:	sub    rsp,0x20
    650186c6:	cmp    QWORD PTR [rcx+0x48],0x10
    650186cb:	mov    rbx,rcx
    650186ce:	jb     0x650186d9
    650186d0:	mov    rcx,QWORD PTR [rcx+0x30]
    650186d4:	call   0x6501d300
    650186d9:	mov    QWORD PTR [rbx+0x48],0xf
    650186e1:	mov    QWORD PTR [rbx+0x40],0x0
    650186e9:	mov    BYTE PTR [rbx+0x30],0x0
    650186ed:	cmp    QWORD PTR [rbx+0x20],0x10
    650186f2:	jb     0x650186fd
    650186f4:	mov    rcx,QWORD PTR [rbx+0x8]
    650186f8:	call   0x6501d300
    650186fd:	mov    QWORD PTR [rbx+0x20],0xf
    65018705:	mov    QWORD PTR [rbx+0x18],0x0
    6501870d:	mov    BYTE PTR [rbx+0x8],0x0
    65018711:	add    rsp,0x20
    65018715:	pop    rbx
    65018716:	ret    
    65018717:	int3   
    65018718:	int3   
    65018719:	int3   
    6501871a:	int3   
    6501871b:	int3   
    6501871c:	int3   
    6501871d:	int3   
    6501871e:	int3   
    6501871f:	int3   
    65018720:	mov    QWORD PTR [rsp+0x8],rcx
    65018725:	push   rsi
    65018726:	push   rdi
    65018727:	push   r12
    65018729:	push   r13
    6501872b:	push   r14
    6501872d:	sub    rsp,0x30
    65018731:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501873a:	mov    QWORD PTR [rsp+0x70],rbx
    6501873f:	mov    QWORD PTR [rsp+0x78],rbp
    65018744:	mov    rbp,r8
    65018747:	mov    rdi,rdx
    6501874a:	mov    rsi,rcx
    6501874d:	xor    ebx,ebx
    6501874f:	mov    DWORD PTR [rsp+0x68],ebx
    65018753:	mov    rax,QWORD PTR [rdx]
    65018756:	mov    rcx,QWORD PTR [rax-0x18]
    6501875a:	test   rcx,rcx
    6501875d:	je     0x6501876d
    6501875f:	mov    rax,QWORD PTR [rcx]
    65018762:	call   QWORD PTR [rax+0x20]
    65018765:	mov    rcx,rax
    65018768:	test   rax,rax
    6501876b:	jne    0x65018781
    6501876d:	lea    rcx,[rip+0x2a92c]        # 0x650430a0
    65018774:	mov    rax,QWORD PTR [rip+0x2a925]        # 0x650430a0
    6501877b:	call   QWORD PTR [rax+0x20]
    6501877e:	mov    rcx,rax
    65018781:	test   rcx,rcx
    65018784:	setne  bl
    65018787:	test   ebx,ebx
    65018789:	jne    0x65018796
    6501878b:	mov    ecx,0x80004005
    65018790:	call   0x65001050
    65018795:	int3   
    65018796:	mov    rax,QWORD PTR [rcx]
    65018799:	call   QWORD PTR [rax+0x18]
    6501879c:	add    rax,0x18
    650187a0:	mov    QWORD PTR [rsi],rax
    650187a3:	mov    ecx,0x1
    650187a8:	mov    DWORD PTR [rsp+0x68],ecx
    650187ac:	mov    r13,QWORD PTR [rbp+0x0]
    650187b0:	movsxd r12,DWORD PTR [r13-0x10]
    650187b4:	mov    r14,QWORD PTR [rdi]
    650187b7:	movsxd rbx,DWORD PTR [r14-0x10]
    650187bb:	lea    ebp,[rbx+r12*1]
    650187bf:	sub    ecx,DWORD PTR [rax-0x8]
    650187c2:	mov    eax,DWORD PTR [rax-0xc]
    650187c5:	sub    eax,ebp
    650187c7:	or     eax,ecx
    650187c9:	jge    0x650187d5
    650187cb:	mov    edx,ebp
    650187cd:	mov    rcx,rsi
    650187d0:	call   0x65002640
    650187d5:	mov    rdi,QWORD PTR [rsi]
    650187d8:	add    rbx,rbx
    650187db:	mov    r9,rbx
    650187de:	mov    r8,r14
    650187e1:	mov    rdx,rbx
    650187e4:	mov    rcx,rdi
    650187e7:	call   0x6501d7b0
    650187ec:	mov    rdx,r12
    650187ef:	add    rdx,rdx
    650187f2:	lea    rcx,[rbx+rdi*1]
    650187f6:	mov    r9,rdx
    650187f9:	mov    r8,r13
    650187fc:	call   0x6501d7b0
    65018801:	test   ebp,ebp
    65018803:	js     0x65018821
    65018805:	mov    rax,QWORD PTR [rsi]
    65018808:	cmp    ebp,DWORD PTR [rax-0xc]
    6501880b:	jg     0x65018821
    6501880d:	mov    DWORD PTR [rax-0x10],ebp
    65018810:	movsxd rcx,ebp
    65018813:	mov    rax,QWORD PTR [rsi]
    65018816:	mov    WORD PTR [rax+rcx*2],0x0
    6501881c:	mov    rax,rsi
    6501881f:	jmp    0x6501882c
    65018821:	mov    ecx,0x80070057
    65018826:	call   0x65001050
    6501882b:	nop
    6501882c:	mov    rbx,QWORD PTR [rsp+0x70]
    65018831:	mov    rbp,QWORD PTR [rsp+0x78]
    65018836:	add    rsp,0x30
    6501883a:	pop    r14
    6501883c:	pop    r13
    6501883e:	pop    r12
    65018840:	pop    rdi
    65018841:	pop    rsi
    65018842:	ret    
    65018843:	int3   
    65018844:	int3   
    65018845:	int3   
    65018846:	int3   
    65018847:	int3   
    65018848:	int3   
    65018849:	int3   
    6501884a:	int3   
    6501884b:	int3   
    6501884c:	int3   
    6501884d:	int3   
    6501884e:	int3   
    6501884f:	int3   
    65018850:	rex push rbp
    65018852:	sub    rsp,0x20
    65018856:	mov    rbp,rdx
    65018859:	mov    eax,DWORD PTR [rbp+0x68]
    6501885c:	and    eax,0x1
    6501885f:	test   eax,eax
    65018861:	je     0x65018870
    65018863:	and    DWORD PTR [rbp+0x68],0xfffffffe
    65018867:	mov    rcx,QWORD PTR [rbp+0x60]
    6501886b:	call   0x65001cb0
    65018870:	add    rsp,0x20
    65018874:	pop    rbp
    65018875:	ret    
    65018876:	int3   
    65018877:	int3   
    65018878:	int3   
    65018879:	int3   
    6501887a:	int3   
    6501887b:	int3   
    6501887c:	int3   
    6501887d:	int3   
    6501887e:	int3   
    6501887f:	int3   
    65018880:	mov    QWORD PTR [rsp+0x8],rcx
    65018885:	push   rsi
    65018886:	push   rdi
    65018887:	push   r12
    65018889:	push   r13
    6501888b:	push   r14
    6501888d:	sub    rsp,0x30
    65018891:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501889a:	mov    QWORD PTR [rsp+0x70],rbx
    6501889f:	mov    QWORD PTR [rsp+0x78],rbp
    650188a4:	mov    r13,r8
    650188a7:	mov    rbx,rdx
    650188aa:	mov    rsi,rcx
    650188ad:	xor    r12d,r12d
    650188b0:	mov    DWORD PTR [rsp+0x68],r12d
    650188b5:	mov    rax,QWORD PTR [rdx]
    650188b8:	mov    rcx,QWORD PTR [rax-0x18]
    650188bc:	test   rcx,rcx
    650188bf:	je     0x650188cf
    650188c1:	mov    rax,QWORD PTR [rcx]
    650188c4:	call   QWORD PTR [rax+0x20]
    650188c7:	mov    rdx,rax
    650188ca:	test   rax,rax
    650188cd:	jne    0x650188e3
    650188cf:	lea    rcx,[rip+0x2a7ca]        # 0x650430a0
    650188d6:	mov    rax,QWORD PTR [rip+0x2a7c3]        # 0x650430a0
    650188dd:	call   QWORD PTR [rax+0x20]
    650188e0:	mov    rdx,rax
    650188e3:	mov    ecx,r12d
    650188e6:	test   rdx,rdx
    650188e9:	setne  cl
    650188ec:	test   ecx,ecx
    650188ee:	jne    0x650188fb
    650188f0:	mov    ecx,0x80004005
    650188f5:	call   0x65001050
    650188fa:	int3   
    650188fb:	mov    rax,QWORD PTR [rdx]
    650188fe:	mov    rcx,rdx
    65018901:	call   QWORD PTR [rax+0x18]
    65018904:	lea    r8,[rax+0x18]
    65018908:	mov    QWORD PTR [rsi],r8
    6501890b:	mov    edx,0x1
    65018910:	mov    DWORD PTR [rsp+0x68],edx
    65018914:	test   r13,r13
    65018917:	je     0x6501892c
    65018919:	xor    eax,eax
    6501891b:	or     rcx,0xffffffffffffffff
    6501891f:	mov    rdi,r13
    65018922:	repnz scas ax,WORD PTR es:[rdi]
    65018925:	not    rcx
    65018928:	lea    r12,[rcx-0x1]
    6501892c:	mov    r14,QWORD PTR [rbx]
    6501892f:	movsxd rdi,DWORD PTR [r14-0x10]
    65018933:	lea    ebp,[r12+rdi*1]
    65018937:	sub    edx,DWORD PTR [r8-0x8]
    6501893b:	mov    eax,DWORD PTR [r8-0xc]
    6501893f:	sub    eax,ebp
    65018941:	or     eax,edx
    65018943:	jge    0x6501894f
    65018945:	mov    edx,ebp
    65018947:	mov    rcx,rsi
    6501894a:	call   0x65002640
    6501894f:	mov    rbx,QWORD PTR [rsi]
    65018952:	add    rdi,rdi
    65018955:	mov    r9,rdi
    65018958:	mov    r8,r14
    6501895b:	mov    rdx,rdi
    6501895e:	mov    rcx,rbx
    65018961:	call   0x6501d7b0
    65018966:	movsxd rdx,r12d
    65018969:	add    rdx,rdx
    6501896c:	lea    rcx,[rdi+rbx*1]
    65018970:	mov    r9,rdx
    65018973:	mov    r8,r13
    65018976:	call   0x6501d7b0
    6501897b:	test   ebp,ebp
    6501897d:	js     0x6501899b
    6501897f:	mov    rax,QWORD PTR [rsi]
    65018982:	cmp    ebp,DWORD PTR [rax-0xc]
    65018985:	jg     0x6501899b
    65018987:	mov    DWORD PTR [rax-0x10],ebp
    6501898a:	movsxd rcx,ebp
    6501898d:	mov    rax,QWORD PTR [rsi]
    65018990:	mov    WORD PTR [rax+rcx*2],0x0
    65018996:	mov    rax,rsi
    65018999:	jmp    0x650189a6
    6501899b:	mov    ecx,0x80070057
    650189a0:	call   0x65001050
    650189a5:	nop
    650189a6:	mov    rbx,QWORD PTR [rsp+0x70]
    650189ab:	mov    rbp,QWORD PTR [rsp+0x78]
    650189b0:	add    rsp,0x30
    650189b4:	pop    r14
    650189b6:	pop    r13
    650189b8:	pop    r12
    650189ba:	pop    rdi
    650189bb:	pop    rsi
    650189bc:	ret    
    650189bd:	int3   
    650189be:	int3   
    650189bf:	int3   
    650189c0:	rex push rbp
    650189c2:	sub    rsp,0x20
    650189c6:	mov    rbp,rdx
    650189c9:	mov    eax,DWORD PTR [rbp+0x68]
    650189cc:	and    eax,0x1
    650189cf:	test   eax,eax
    650189d1:	je     0x650189e0
    650189d3:	and    DWORD PTR [rbp+0x68],0xfffffffe
    650189d7:	mov    rcx,QWORD PTR [rbp+0x60]
    650189db:	call   0x65001cb0
    650189e0:	add    rsp,0x20
    650189e4:	pop    rbp
    650189e5:	ret    
    650189e6:	int3   
    650189e7:	int3   
    650189e8:	int3   
    650189e9:	int3   
    650189ea:	int3   
    650189eb:	int3   
    650189ec:	int3   
    650189ed:	int3   
    650189ee:	int3   
    650189ef:	int3   
    650189f0:	rex push rbx
    650189f2:	sub    rsp,0x20
    650189f6:	mov    rbx,rcx
    650189f9:	call   0x6501d570
    650189fe:	lea    r11,[rip+0x1bb63]        # 0x65034568
    65018a05:	mov    QWORD PTR [rbx],r11
    65018a08:	mov    rax,rbx
    65018a0b:	add    rsp,0x20
    65018a0f:	pop    rbx
    65018a10:	ret    
    65018a11:	int3   
    65018a12:	int3   
    65018a13:	int3   
    65018a14:	int3   
    65018a15:	int3   
    65018a16:	int3   
    65018a17:	int3   
    65018a18:	int3   
    65018a19:	int3   
    65018a1a:	int3   
    65018a1b:	int3   
    65018a1c:	int3   
    65018a1d:	int3   
    65018a1e:	int3   
    65018a1f:	int3   
    65018a20:	rex push rbx
    65018a22:	sub    rsp,0x20
    65018a26:	lea    rax,[rip+0x1e63b]        # 0x65037068
    65018a2d:	mov    rbx,rcx
    65018a30:	mov    QWORD PTR [rcx],rax
    65018a33:	cmp    QWORD PTR [rcx+0x38],0x10
    65018a38:	jb     0x65018a43
    65018a3a:	mov    rcx,QWORD PTR [rcx+0x20]
    65018a3e:	call   0x6501d300
    65018a43:	mov    QWORD PTR [rbx+0x38],0xf
    65018a4b:	mov    QWORD PTR [rbx+0x30],0x0
    65018a53:	mov    rcx,rbx
    65018a56:	mov    BYTE PTR [rbx+0x20],0x0
    65018a5a:	add    rsp,0x20
    65018a5e:	pop    rbx
    65018a5f:	jmp    0x6501d490
    65018a64:	int3   
    65018a65:	int3   
    65018a66:	int3   
    65018a67:	int3   
    65018a68:	int3   
    65018a69:	int3   
    65018a6a:	int3   
    65018a6b:	int3   
    65018a6c:	int3   
    65018a6d:	int3   
    65018a6e:	int3   
    65018a6f:	int3   
    65018a70:	mov    QWORD PTR [rsp+0x8],rbx
    65018a75:	push   rdi
    65018a76:	sub    rsp,0x20
    65018a7a:	lea    rax,[rip+0x1e5e7]        # 0x65037068
    65018a81:	mov    edi,edx
    65018a83:	mov    rbx,rcx
    65018a86:	mov    QWORD PTR [rcx],rax
    65018a89:	cmp    QWORD PTR [rcx+0x38],0x10
    65018a8e:	jb     0x65018a99
    65018a90:	mov    rcx,QWORD PTR [rcx+0x20]
    65018a94:	call   0x6501d300
    65018a99:	mov    QWORD PTR [rbx+0x38],0xf
    65018aa1:	mov    QWORD PTR [rbx+0x30],0x0
    65018aa9:	mov    rcx,rbx
    65018aac:	mov    BYTE PTR [rbx+0x20],0x0
    65018ab0:	call   0x6501d490
    65018ab5:	test   dil,0x1
    65018ab9:	je     0x65018ac3
    65018abb:	mov    rcx,rbx
    65018abe:	call   0x6501d300
    65018ac3:	mov    rax,rbx
    65018ac6:	mov    rbx,QWORD PTR [rsp+0x30]
    65018acb:	add    rsp,0x20
    65018acf:	pop    rdi
    65018ad0:	ret    
    65018ad1:	int3   
    65018ad2:	int3   
    65018ad3:	int3   
    65018ad4:	int3   
    65018ad5:	int3   
    65018ad6:	int3   
    65018ad7:	int3   
    65018ad8:	int3   
    65018ad9:	int3   
    65018ada:	int3   
    65018adb:	int3   
    65018adc:	int3   
    65018add:	int3   
    65018ade:	int3   
    65018adf:	int3   
    65018ae0:	sub    rsp,0x98
    65018ae7:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65018af0:	mov    QWORD PTR [rsp+0x48],0xf
    65018af9:	mov    QWORD PTR [rsp+0x40],0x0
    65018b02:	mov    BYTE PTR [rsp+0x30],0x0
    65018b07:	xor    r8d,r8d
    65018b0a:	lea    edx,[r8+0x12]
    65018b0e:	lea    rcx,[rsp+0x28]
    65018b13:	call   0x65002330
    65018b18:	lea    rcx,[rsp+0x30]
    65018b1d:	mov    rdx,QWORD PTR [rsp+0x48]
    65018b22:	cmp    rdx,0x10
    65018b26:	cmovae rcx,QWORD PTR [rsp+0x30]
    65018b2c:	mov    r9d,0x12
    65018b32:	lea    r8,[rip+0x20517]        # 0x65039050
    65018b39:	call   0x6501d7b0
    65018b3e:	mov    QWORD PTR [rsp+0x40],0x12
    65018b47:	lea    rax,[rsp+0x30]
    65018b4c:	cmp    QWORD PTR [rsp+0x48],0x10
    65018b52:	cmovae rax,QWORD PTR [rsp+0x30]
    65018b58:	mov    BYTE PTR [rax+0x12],0x0
    65018b5c:	lea    rcx,[rsp+0x50]
    65018b61:	call   0x6501d310
    65018b66:	nop
    65018b67:	lea    rax,[rip+0x1c662]        # 0x650351d0
    65018b6e:	mov    QWORD PTR [rsp+0x50],rax
    65018b73:	mov    QWORD PTR [rsp+0x88],0xf
    65018b7f:	mov    QWORD PTR [rsp+0x80],0x0
    65018b8b:	mov    BYTE PTR [rsp+0x70],0x0
    65018b90:	or     r9,0xffffffffffffffff
    65018b94:	xor    r8d,r8d
    65018b97:	lea    rdx,[rsp+0x28]
    65018b9c:	lea    rcx,[rsp+0x68]
    65018ba1:	call   0x65001e20
    65018ba6:	nop
    65018ba7:	lea    rax,[rip+0x1c63a]        # 0x650351e8
    65018bae:	mov    QWORD PTR [rsp+0x50],rax
    65018bb3:	lea    rdx,[rip+0x289be]        # 0x65041578
    65018bba:	lea    rcx,[rsp+0x50]
    65018bbf:	call   0x6501dc60
    65018bc4:	int3   
    65018bc5:	int3   
    65018bc6:	int3   
    65018bc7:	int3   
    65018bc8:	int3   
    65018bc9:	int3   
    65018bca:	int3   
    65018bcb:	int3   
    65018bcc:	int3   
    65018bcd:	int3   
    65018bce:	int3   
    65018bcf:	int3   
    65018bd0:	rex push rbp
    65018bd2:	sub    rsp,0x20
    65018bd6:	mov    rbp,rdx
    65018bd9:	lea    rcx,[rbp+0x28]
    65018bdd:	call   0x65001c70
    65018be2:	add    rsp,0x20
    65018be6:	pop    rbp
    65018be7:	ret    
    65018be8:	int3   
    65018be9:	int3   
    65018bea:	int3   
    65018beb:	int3   
    65018bec:	int3   
    65018bed:	int3   
    65018bee:	int3   
    65018bef:	int3   
    65018bf0:	rex push rbp
    65018bf2:	sub    rsp,0x20
    65018bf6:	mov    rbp,rdx
    65018bf9:	lea    rcx,[rbp+0x50]
    65018bfd:	call   0x6501d490
    65018c02:	add    rsp,0x20
    65018c06:	pop    rbp
    65018c07:	ret    
    65018c08:	int3   
    65018c09:	int3   
    65018c0a:	int3   
    65018c0b:	int3   
    65018c0c:	int3   
    65018c0d:	int3   
    65018c0e:	int3   
    65018c0f:	int3   
    65018c10:	mov    rax,rsp
    65018c13:	push   rdi
    65018c14:	push   r12
    65018c16:	push   r13
    65018c18:	sub    rsp,0x130
    65018c1f:	mov    QWORD PTR [rsp+0x98],0xfffffffffffffffe
    65018c2b:	mov    QWORD PTR [rax+0x8],rbx
    65018c2f:	mov    QWORD PTR [rax+0x10],rbp
    65018c33:	mov    QWORD PTR [rax+0x18],rsi
    65018c37:	mov    rsi,r9
    65018c3a:	mov    rbp,r8
    65018c3d:	mov    r12,rdx
    65018c40:	mov    rbx,rcx
    65018c43:	xor    r13d,r13d
    65018c46:	mov    DWORD PTR [rax-0xc8],r13d
    65018c4d:	lea    ecx,[r13+0x38]
    65018c51:	call   0x6501dbc0
    65018c56:	mov    rdi,rax
    65018c59:	test   rax,rax
    65018c5c:	je     0x65018c6d
    65018c5e:	mov    edx,0x2000
    65018c63:	mov    rcx,rax
    65018c66:	call   0x650175c0
    65018c6b:	jmp    0x65018c70
    65018c6d:	mov    rdi,r13
    65018c70:	mov    QWORD PTR [rsp+0xe0],rdi
    65018c78:	lea    rax,[rsp+0x80]
    65018c80:	mov    QWORD PTR [rsp+0x20],rax
    65018c85:	mov    r9,rdi
    65018c88:	mov    r8,rsi
    65018c8b:	mov    rdx,rbp
    65018c8e:	mov    rcx,r12
    65018c91:	call   0x65018350
    65018c96:	test   eax,eax
    65018c98:	je     0x65018dfd
    65018c9e:	sub    eax,0x1
    65018ca1:	je     0x65018db8
    65018ca7:	cmp    eax,0x1
    65018caa:	je     0x65018d73
    65018cb0:	mov    QWORD PTR [rsp+0x78],0xf
    65018cb9:	mov    QWORD PTR [rsp+0x70],r13
    65018cbe:	mov    BYTE PTR [rsp+0x60],0x0
    65018cc3:	mov    r9d,0xb
    65018cc9:	lea    r8,[rip+0x1b980]        # 0x65034650
    65018cd0:	lea    edx,[r9+0x4]
    65018cd4:	lea    rcx,[rsp+0x60]
    65018cd9:	call   0x6501d7b0
    65018cde:	mov    QWORD PTR [rsp+0x70],0xb
    65018ce7:	lea    rax,[rsp+0x60]
    65018cec:	cmp    QWORD PTR [rsp+0x78],0x10
    65018cf2:	cmovae rax,QWORD PTR [rsp+0x60]
    65018cf8:	mov    BYTE PTR [rax+0xb],0x0
    65018cfc:	lea    rcx,[rsp+0xa0]
    65018d04:	call   0x6501d310
    65018d09:	nop
    65018d0a:	lea    rax,[rip+0x1e357]        # 0x65037068
    65018d11:	mov    QWORD PTR [rsp+0xa0],rax
    65018d19:	mov    QWORD PTR [rsp+0xd8],0xf
    65018d25:	mov    QWORD PTR [rsp+0xd0],r13
    65018d2d:	mov    BYTE PTR [rsp+0xc0],0x0
    65018d35:	or     r9,0xffffffffffffffff
    65018d39:	xor    r8d,r8d
    65018d3c:	lea    rdx,[rsp+0x58]
    65018d41:	lea    rcx,[rsp+0xb8]
    65018d49:	call   0x65001e20
    65018d4e:	nop
    65018d4f:	lea    rax,[rip+0x1b882]        # 0x650345d8
    65018d56:	mov    QWORD PTR [rsp+0xa0],rax
    65018d5e:	lea    rdx,[rip+0x284db]        # 0x65041240
    65018d65:	lea    rcx,[rsp+0xa0]
    65018d6d:	call   0x6501dc60
    65018d72:	nop
    65018d73:	lea    rcx,[rsp+0x80]
    65018d7b:	mov    rax,QWORD PTR [rcx]
    65018d7e:	mov    QWORD PTR [rbx],rax
    65018d81:	mov    rax,QWORD PTR [rcx+0x8]
    65018d85:	mov    QWORD PTR [rbx+0x8],rax
    65018d89:	mov    rax,QWORD PTR [rcx+0x10]
    65018d8d:	mov    QWORD PTR [rbx+0x10],rax
    65018d91:	mov    rsi,QWORD PTR [rbx+0x18]
    65018d95:	cmp    rdi,rsi
    65018d98:	je     0x65018daf
    65018d9a:	test   rsi,rsi
    65018d9d:	je     0x65018daf
    65018d9f:	mov    rcx,rsi
    65018da2:	call   0x65017550
    65018da7:	mov    rcx,rsi
    65018daa:	call   0x6501d300
    65018daf:	mov    QWORD PTR [rbx+0x18],rdi
    65018db3:	jmp    0x65018edc
    65018db8:	lea    rcx,[rsp+0x80]
    65018dc0:	mov    rax,QWORD PTR [rcx]
    65018dc3:	mov    QWORD PTR [rbx],rax
    65018dc6:	mov    rax,QWORD PTR [rcx+0x8]
    65018dca:	mov    QWORD PTR [rbx+0x8],rax
    65018dce:	mov    rax,QWORD PTR [rcx+0x10]
    65018dd2:	mov    QWORD PTR [rbx+0x10],rax
    65018dd6:	mov    rsi,QWORD PTR [rbx+0x18]
    65018dda:	cmp    rdi,rsi
    65018ddd:	je     0x65018df4
    65018ddf:	test   rsi,rsi
    65018de2:	je     0x65018df4
    65018de4:	mov    rcx,rsi
    65018de7:	call   0x65017550
    65018dec:	mov    rcx,rsi
    65018def:	call   0x6501d300
    65018df4:	mov    QWORD PTR [rbx+0x18],rdi
    65018df8:	jmp    0x65018edc
    65018dfd:	mov    QWORD PTR [rsp+0x50],0xf
    65018e06:	mov    QWORD PTR [rsp+0x48],r13
    65018e0b:	mov    BYTE PTR [rsp+0x38],0x0
    65018e10:	xor    r8d,r8d
    65018e13:	lea    edx,[r8+0x12]
    65018e17:	lea    rcx,[rsp+0x30]
    65018e1c:	call   0x65002330
    65018e21:	lea    rcx,[rsp+0x38]
    65018e26:	mov    rdx,QWORD PTR [rsp+0x50]
    65018e2b:	cmp    rdx,0x10
    65018e2f:	cmovae rcx,QWORD PTR [rsp+0x38]
    65018e35:	mov    r9d,0x12
    65018e3b:	lea    r8,[rip+0x1b7f6]        # 0x65034638
    65018e42:	call   0x6501d7b0
    65018e47:	mov    QWORD PTR [rsp+0x48],0x12
    65018e50:	lea    rax,[rsp+0x38]
    65018e55:	cmp    QWORD PTR [rsp+0x50],0x10
    65018e5b:	cmovae rax,QWORD PTR [rsp+0x38]
    65018e61:	mov    BYTE PTR [rax+0x12],0x0
    65018e65:	lea    rcx,[rsp+0xe8]
    65018e6d:	call   0x6501d310
    65018e72:	nop
    65018e73:	lea    rax,[rip+0x1e1ee]        # 0x65037068
    65018e7a:	mov    QWORD PTR [rsp+0xe8],rax
    65018e82:	mov    QWORD PTR [rsp+0x120],0xf
    65018e8e:	mov    QWORD PTR [rsp+0x118],r13
    65018e96:	mov    BYTE PTR [rsp+0x108],0x0
    65018e9e:	or     r9,0xffffffffffffffff
    65018ea2:	xor    r8d,r8d
    65018ea5:	lea    rdx,[rsp+0x30]
    65018eaa:	lea    rcx,[rsp+0x100]
    65018eb2:	call   0x65001e20
    65018eb7:	nop
    65018eb8:	lea    rax,[rip+0x1b719]        # 0x650345d8
    65018ebf:	mov    QWORD PTR [rsp+0xe8],rax
    65018ec7:	lea    rdx,[rip+0x28372]        # 0x65041240
    65018ece:	lea    rcx,[rsp+0xe8]
    65018ed6:	call   0x6501dc60
    65018edb:	nop
    65018edc:	lea    r11,[rsp+0x130]
    65018ee4:	mov    rbx,QWORD PTR [r11+0x20]
    65018ee8:	mov    rbp,QWORD PTR [r11+0x28]
    65018eec:	mov    rsi,QWORD PTR [r11+0x30]
    65018ef0:	mov    rsp,r11
    65018ef3:	pop    r13
    65018ef5:	pop    r12
    65018ef7:	pop    rdi
    65018ef8:	ret    
    65018ef9:	int3   
    65018efa:	int3   
    65018efb:	int3   
    65018efc:	int3   
    65018efd:	int3   
    65018efe:	int3   
    65018eff:	int3   
    65018f00:	rex push rbp
    65018f02:	sub    rsp,0x20
    65018f06:	mov    rbp,rdx
    65018f09:	lea    rcx,[rbp+0xe0]
    65018f10:	call   0x65018660
    65018f15:	add    rsp,0x20
    65018f19:	pop    rbp
    65018f1a:	ret    
    65018f1b:	int3   
    65018f1c:	int3   
    65018f1d:	int3   
    65018f1e:	int3   
    65018f1f:	int3   
    65018f20:	rex push rbp
    65018f22:	sub    rsp,0x20
    65018f26:	mov    rbp,rdx
    65018f29:	lea    rcx,[rbp+0x30]
    65018f2d:	call   0x65001c70
    65018f32:	add    rsp,0x20
    65018f36:	pop    rbp
    65018f37:	ret    
    65018f38:	int3   
    65018f39:	int3   
    65018f3a:	int3   
    65018f3b:	int3   
    65018f3c:	int3   
    65018f3d:	int3   
    65018f3e:	int3   
    65018f3f:	int3   
    65018f40:	rex push rbp
    65018f42:	sub    rsp,0x20
    65018f46:	mov    rbp,rdx
    65018f49:	lea    rcx,[rbp+0xe8]
    65018f50:	call   0x6501d490
    65018f55:	add    rsp,0x20
    65018f59:	pop    rbp
    65018f5a:	ret    
    65018f5b:	int3   
    65018f5c:	int3   
    65018f5d:	int3   
    65018f5e:	int3   
    65018f5f:	int3   
    65018f60:	rex push rbp
    65018f62:	sub    rsp,0x20
    65018f66:	mov    rbp,rdx
    65018f69:	lea    rcx,[rbp+0x58]
    65018f6d:	call   0x65001c70
    65018f72:	add    rsp,0x20
    65018f76:	pop    rbp
    65018f77:	ret    
    65018f78:	int3   
    65018f79:	int3   
    65018f7a:	int3   
    65018f7b:	int3   
    65018f7c:	int3   
    65018f7d:	int3   
    65018f7e:	int3   
    65018f7f:	int3   
    65018f80:	rex push rbp
    65018f82:	sub    rsp,0x20
    65018f86:	mov    rbp,rdx
    65018f89:	lea    rcx,[rbp+0xa0]
    65018f90:	call   0x6501d490
    65018f95:	add    rsp,0x20
    65018f99:	pop    rbp
    65018f9a:	ret    
    65018f9b:	int3   
    65018f9c:	int3   
    65018f9d:	int3   
    65018f9e:	int3   
    65018f9f:	int3   
    65018fa0:	mov    QWORD PTR [rsp+0x8],rcx
    65018fa5:	push   rdi
    65018fa6:	sub    rsp,0x30
    65018faa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65018fb3:	mov    QWORD PTR [rsp+0x48],rbx
    65018fb8:	mov    rbx,rdx
    65018fbb:	mov    rdi,rcx
    65018fbe:	call   0x6501d3e0
    65018fc3:	nop
    65018fc4:	lea    rax,[rip+0x1e09d]        # 0x65037068
    65018fcb:	mov    QWORD PTR [rdi],rax
    65018fce:	lea    rdx,[rbx+0x18]
    65018fd2:	lea    rcx,[rdi+0x18]
    65018fd6:	mov    QWORD PTR [rcx+0x20],0xf
    65018fde:	mov    QWORD PTR [rcx+0x18],0x0
    65018fe6:	mov    BYTE PTR [rcx+0x8],0x0
    65018fea:	or     r9,0xffffffffffffffff
    65018fee:	xor    r8d,r8d
    65018ff1:	call   0x65001e20
    65018ff6:	nop
    65018ff7:	lea    rax,[rip+0x1b5da]        # 0x650345d8
    65018ffe:	mov    QWORD PTR [rdi],rax
    65019001:	mov    rax,rdi
    65019004:	mov    rbx,QWORD PTR [rsp+0x48]
    65019009:	add    rsp,0x30
    6501900d:	pop    rdi
    6501900e:	ret    
    6501900f:	int3   
    65019010:	rex push rbp
    65019012:	sub    rsp,0x20
    65019016:	mov    rbp,rdx
    65019019:	mov    rcx,QWORD PTR [rbp+0x40]
    6501901d:	call   0x6501d490
    65019022:	add    rsp,0x20
    65019026:	pop    rbp
    65019027:	ret    
    65019028:	int3   
    65019029:	int3   
    6501902a:	int3   
    6501902b:	int3   
    6501902c:	int3   
    6501902d:	int3   
    6501902e:	int3   
    6501902f:	int3   
    65019030:	mov    QWORD PTR [rsp+0x10],rdx
    65019035:	push   rbx
    65019036:	push   rsi
    65019037:	push   rdi
    65019038:	push   r12
    6501903a:	push   r13
    6501903c:	push   r14
    6501903e:	push   r15
    65019040:	sub    rsp,0x40
    65019044:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501904d:	mov    r13,r8
    65019050:	mov    r15,rdx
    65019053:	mov    r12,rcx
    65019056:	mov    ebx,DWORD PTR [r9]
    65019059:	mov    rcx,QWORD PTR [rcx+0x8]
    6501905d:	test   rcx,rcx
    65019060:	jne    0x65019069
    65019062:	xor    esi,esi
    65019064:	mov    rdi,rsi
    65019067:	jmp    0x65019077
    65019069:	mov    rdi,QWORD PTR [r12+0x18]
    6501906e:	sub    rdi,rcx
    65019071:	sar    rdi,0x2
    65019075:	xor    esi,esi
    65019077:	test   r8,r8
    6501907a:	je     0x6501933b
    65019080:	test   rcx,rcx
    65019083:	jne    0x6501908a
    65019085:	mov    rdx,rsi
    65019088:	jmp    0x65019096
    6501908a:	mov    rdx,QWORD PTR [r12+0x10]
    6501908f:	sub    rdx,rcx
    65019092:	sar    rdx,0x2
    65019096:	movabs r8,0x3fffffffffffffff
    650190a0:	mov    rax,r8
    650190a3:	sub    rax,rdx
    650190a6:	cmp    rax,r13
    650190a9:	jae    0x650190b1
    650190ab:	call   0x65018ae0
    650190b0:	int3   
    650190b1:	test   rcx,rcx
    650190b4:	jne    0x650190bb
    650190b6:	mov    rax,rsi
    650190b9:	jmp    0x650190c7
    650190bb:	mov    rax,QWORD PTR [r12+0x10]
    650190c0:	sub    rax,rcx
    650190c3:	sar    rax,0x2
    650190c7:	add    rax,r13
    650190ca:	cmp    rdi,rax
    650190cd:	jae    0x65019233
    650190d3:	mov    rax,rdi
    650190d6:	shr    rax,1
    650190d9:	sub    r8,rax
    650190dc:	cmp    r8,rdi
    650190df:	jae    0x650190e6
    650190e1:	mov    rdi,rsi
    650190e4:	jmp    0x650190e9
    650190e6:	add    rdi,rax
    650190e9:	test   rcx,rcx
    650190ec:	jne    0x650190f3
    650190ee:	mov    rax,rsi
    650190f1:	jmp    0x650190ff
    650190f3:	mov    rax,QWORD PTR [r12+0x10]
    650190f8:	sub    rax,rcx
    650190fb:	sar    rax,0x2
    650190ff:	add    rax,r13
    65019102:	cmp    rdi,rax
    65019105:	jae    0x65019121
    65019107:	test   rcx,rcx
    6501910a:	jne    0x65019111
    6501910c:	mov    rax,rsi
    6501910f:	jmp    0x6501911d
    65019111:	mov    rax,QWORD PTR [r12+0x10]
    65019116:	sub    rax,rcx
    65019119:	sar    rax,0x2
    6501911d:	lea    rdi,[rax+r13*1]
    65019121:	mov    rcx,rdi
    65019124:	test   rdi,rdi
    65019127:	jne    0x6501912e
    65019129:	mov    rcx,rsi
    6501912c:	jmp    0x65019175
    6501912e:	xor    edx,edx
    65019130:	or     rax,0xffffffffffffffff
    65019134:	div    rdi
    65019137:	cmp    rax,0x4
    6501913b:	jae    0x65019175
    6501913d:	mov    QWORD PTR [rsp+0x80],rsi
    65019145:	lea    rdx,[rsp+0x80]
    6501914d:	lea    rcx,[rsp+0x28]
    65019152:	call   0x6501d330
    65019157:	lea    r11,[rip+0x1c05a]        # 0x650351b8
    6501915e:	mov    QWORD PTR [rsp+0x28],r11
    65019163:	lea    rdx,[rip+0x282b6]        # 0x65041420
    6501916a:	lea    rcx,[rsp+0x28]
    6501916f:	call   0x6501dc60
    65019174:	int3   
    65019175:	shl    rcx,0x2
    65019179:	call   0x6501dbc0
    6501917e:	mov    r14,rax
    65019181:	mov    QWORD PTR [rsp+0x90],rax
    65019189:	mov    rcx,QWORD PTR [r15+0x8]
    6501918d:	mov    r8,QWORD PTR [r12+0x8]
    65019192:	sub    rcx,r8
    65019195:	sar    rcx,0x2
    65019199:	lea    rdx,[rcx*4+0x0]
    650191a1:	lea    r15,[rdx+rax*1]
    650191a5:	je     0x650191b2
    650191a7:	mov    r9,rdx
    650191aa:	mov    rcx,rax
    650191ad:	call   0x6501d880
    650191b2:	mov    rax,r13
    650191b5:	mov    rcx,r15
    650191b8:	test   rax,rax
    650191bb:	je     0x650191c9
    650191bd:	mov    DWORD PTR [rcx],ebx
    650191bf:	sub    rax,0x1
    650191c3:	add    rcx,0x4
    650191c7:	jmp    0x650191b8
    650191c9:	lea    rcx,[r15+r13*4]
    650191cd:	mov    rdx,QWORD PTR [r12+0x10]
    650191d2:	mov    r8,QWORD PTR [rsp+0x88]
    650191da:	mov    r8,QWORD PTR [r8+0x8]
    650191de:	sub    rdx,r8
    650191e1:	sar    rdx,0x2
    650191e5:	je     0x650191f4
    650191e7:	shl    rdx,0x2
    650191eb:	mov    r9,rdx
    650191ee:	call   0x6501d880
    650191f3:	nop
    650191f4:	mov    rcx,QWORD PTR [r12+0x8]
    650191f9:	test   rcx,rcx
    650191fc:	je     0x6501920a
    650191fe:	mov    rsi,QWORD PTR [r12+0x10]
    65019203:	sub    rsi,rcx
    65019206:	sar    rsi,0x2
    6501920a:	add    r13,rsi
    6501920d:	test   rcx,rcx
    65019210:	je     0x65019217
    65019212:	call   0x6501d300
    65019217:	lea    rax,[r14+rdi*4]
    6501921b:	mov    QWORD PTR [r12+0x18],rax
    65019220:	lea    rax,[r14+r13*4]
    65019224:	mov    QWORD PTR [r12+0x10],rax
    65019229:	mov    QWORD PTR [r12+0x8],r14
    6501922e:	jmp    0x6501933b
    65019233:	mov    rdi,QWORD PTR [r12+0x10]
    65019238:	mov    r8,QWORD PTR [r15+0x8]
    6501923c:	mov    rax,rdi
    6501923f:	sub    rax,r8
    65019242:	sar    rax,0x2
    65019246:	cmp    rax,r13
    65019249:	jae    0x650192c0
    6501924b:	lea    rcx,[r8+r13*4]
    6501924f:	sub    rdi,r8
    65019252:	sar    rdi,0x2
    65019256:	je     0x65019269
    65019258:	lea    rdx,[rdi*4+0x0]
    65019260:	mov    r9,rdx
    65019263:	call   0x6501d880
    65019268:	nop
    65019269:	mov    rdx,QWORD PTR [r12+0x10]
    6501926e:	mov    rax,rdx
    65019271:	sub    rax,QWORD PTR [r15+0x8]
    65019275:	sar    rax,0x2
    65019279:	mov    rcx,r13
    6501927c:	sub    rcx,rax
    6501927f:	nop
    65019280:	test   rcx,rcx
    65019283:	je     0x65019291
    65019285:	mov    DWORD PTR [rdx],ebx
    65019287:	sub    rcx,0x1
    6501928b:	add    rdx,0x4
    6501928f:	jmp    0x65019280
    65019291:	lea    rax,[r13*4+0x0]
    65019299:	add    QWORD PTR [r12+0x10],rax
    6501929e:	mov    rcx,QWORD PTR [r12+0x10]
    650192a3:	sub    rcx,rax
    650192a6:	mov    rax,QWORD PTR [r15+0x8]
    650192aa:	cmp    rax,rcx
    650192ad:	je     0x6501933b
    650192b3:	mov    DWORD PTR [rax],ebx
    650192b5:	add    rax,0x4
    650192b9:	cmp    rax,rcx
    650192bc:	jne    0x650192b3
    650192be:	jmp    0x6501933b
    650192c0:	shl    r13,0x2
    650192c4:	mov    rsi,rdi
    650192c7:	sub    rsi,r13
    650192ca:	mov    rax,rdi
    650192cd:	sub    rax,rsi
    650192d0:	sar    rax,0x2
    650192d4:	lea    rdx,[rax*4+0x0]
    650192dc:	lea    r14,[rdx+rdi*1]
    650192e0:	je     0x650192f0
    650192e2:	mov    r9,rdx
    650192e5:	mov    r8,rsi
    650192e8:	mov    rcx,rdi
    650192eb:	call   0x6501d880
    650192f0:	mov    QWORD PTR [r12+0x10],r14
    650192f5:	mov    r8,QWORD PTR [r15+0x8]
    650192f9:	sub    rsi,r8
    650192fc:	sar    rsi,0x2
    65019300:	test   rsi,rsi
    65019303:	jle    0x6501931b
    65019305:	lea    rdx,[rsi*4+0x0]
    6501930d:	sub    rdi,rdx
    65019310:	mov    r9,rdx
    65019313:	mov    rcx,rdi
    65019316:	call   0x6501d880
    6501931b:	mov    rax,QWORD PTR [r15+0x8]
    6501931f:	lea    rcx,[r13+rax*1+0x0]
    65019324:	cmp    rax,rcx
    65019327:	je     0x6501933b
    65019329:	data16 xchg ax,ax
    6501932c:	data16 data16 xchg ax,ax
    65019330:	mov    DWORD PTR [rax],ebx
    65019332:	add    rax,0x4
    65019336:	cmp    rax,rcx
    65019339:	jne    0x65019330
    6501933b:	add    rsp,0x40
    6501933f:	pop    r15
    65019341:	pop    r14
    65019343:	pop    r13
    65019345:	pop    r12
    65019347:	pop    rdi
    65019348:	pop    rsi
    65019349:	pop    rbx
    6501934a:	ret    
    6501934b:	int3   
    6501934c:	int3   
    6501934d:	int3   
    6501934e:	int3   
    6501934f:	int3   
    65019350:	mov    QWORD PTR [rsp+0x10],rdx
    65019355:	push   rbp
    65019356:	sub    rsp,0x20
    6501935a:	mov    rbp,rdx
    6501935d:	mov    rcx,QWORD PTR [rbp+0x90]
    65019364:	call   0x6501d300
    65019369:	xor    edx,edx
    6501936b:	xor    ecx,ecx
    6501936d:	call   0x6501dc60
    65019372:	nop
    65019373:	add    rsp,0x20
    65019377:	pop    rbp
    65019378:	ret    
    65019379:	int3   
    6501937a:	int3   
    6501937b:	int3   
    6501937c:	int3   
    6501937d:	int3   
    6501937e:	int3   
    6501937f:	int3   
    65019380:	mov    QWORD PTR [rsp+0x10],rdx
    65019385:	push   rbp
    65019386:	sub    rsp,0x20
    6501938a:	mov    rbp,rdx
    6501938d:	xor    edx,edx
    6501938f:	xor    ecx,ecx
    65019391:	call   0x6501dc60
    65019396:	nop
    65019397:	add    rsp,0x20
    6501939b:	pop    rbp
    6501939c:	ret    
    6501939d:	int3   
    6501939e:	int3   
    6501939f:	int3   
    650193a0:	rex push rbp
    650193a2:	push   rdi
    650193a3:	push   r12
    650193a5:	push   r13
    650193a7:	push   r14
    650193a9:	sub    rsp,0x260
    650193b0:	lea    rbp,[rsp+0x50]
    650193b5:	mov    QWORD PTR [rbp+0x90],0xfffffffffffffffe
    650193c0:	mov    QWORD PTR [rbp+0x248],rbx
    650193c7:	mov    QWORD PTR [rbp+0x250],rsi
    650193ce:	mov    rax,QWORD PTR [rip+0x29d4b]        # 0x65043120
    650193d5:	xor    rax,rbp
    650193d8:	mov    QWORD PTR [rbp+0x200],rax
    650193df:	mov    QWORD PTR [rbp+0x1d0],0xf
    650193ea:	xor    ebx,ebx
    650193ec:	mov    QWORD PTR [rbp+0x1c8],rbx
    650193f3:	mov    BYTE PTR [rbp+0x1b8],bl
    650193f9:	mov    QWORD PTR [rbp+0x1f8],0xf
    65019404:	mov    QWORD PTR [rbp+0x1f0],rbx
    6501940b:	mov    BYTE PTR [rbp+0x1e0],bl
    65019411:	mov    DWORD PTR [rbp+0x58],ebx
    65019414:	mov    QWORD PTR [rbp+0x70],rbx
    65019418:	mov    r8,QWORD PTR [rcx+0x18]
    6501941c:	cmp    QWORD PTR [rcx+0x20],0x10
    65019421:	jb     0x65019429
    65019423:	mov    rdx,QWORD PTR [rcx+0x8]
    65019427:	jmp    0x6501942d
    65019429:	lea    rdx,[rcx+0x8]
    6501942d:	xor    r9d,r9d
    65019430:	lea    rcx,[rbp+0x58]
    65019434:	call   0x65018c10
    65019439:	lea    rdx,[rbp+0xd0]
    65019440:	lea    rcx,[rbp+0x58]
    65019444:	mov    rax,QWORD PTR [rcx]
    65019447:	mov    QWORD PTR [rdx],rax
    6501944a:	mov    rax,QWORD PTR [rcx+0x8]
    6501944e:	mov    QWORD PTR [rdx+0x8],rax
    65019452:	mov    rax,QWORD PTR [rcx+0x10]
    65019456:	mov    QWORD PTR [rdx+0x10],rax
    6501945a:	lea    rdx,[rbp+0xf0]
    65019461:	lea    rcx,[rbp+0xd0]
    65019468:	call   0x65018600
    6501946d:	lea    rdx,[rbp+0x20]
    65019471:	mov    rcx,QWORD PTR [rax]
    65019474:	mov    QWORD PTR [rdx],rcx
    65019477:	mov    rcx,QWORD PTR [rax+0x8]
    6501947b:	mov    QWORD PTR [rdx+0x8],rcx
    6501947f:	mov    rax,QWORD PTR [rax+0x10]
    65019483:	mov    QWORD PTR [rdx+0x10],rax
    65019487:	cmp    DWORD PTR [rbp+0x20],0x6
    6501948b:	je     0x650194c1
    6501948d:	lea    rdx,[rip+0x1b0e4]        # 0x65034578
    65019494:	lea    rcx,[rbp+0x98]
    6501949b:	call   0x6501d4e0
    650194a0:	lea    rax,[rip+0x1b0c1]        # 0x65034568
    650194a7:	mov    QWORD PTR [rbp+0x98],rax
    650194ae:	lea    rdx,[rip+0x27cfb]        # 0x650411b0
    650194b5:	lea    rcx,[rbp+0x98]
    650194bc:	call   0x6501dc60
    650194c1:	mov    esi,DWORD PTR [rbp+0x28]
    650194c4:	test   rsi,rsi
    650194c7:	je     0x650195b8
    650194cd:	lea    rcx,[rbp+0x180]
    650194d4:	mov    rdi,QWORD PTR [rbp+0x30]
    650194d8:	mov    rax,QWORD PTR [rdi]
    650194db:	mov    QWORD PTR [rcx],rax
    650194de:	mov    rax,QWORD PTR [rdi+0x8]
    650194e2:	mov    QWORD PTR [rcx+0x8],rax
    650194e6:	mov    rax,QWORD PTR [rdi+0x10]
    650194ea:	mov    QWORD PTR [rcx+0x10],rax
    650194ee:	cmp    DWORD PTR [rbp+0x180],0x5
    650194f5:	je     0x65019522
    650194f7:	lea    rdx,[rip+0x1b07a]        # 0x65034578
    650194fe:	lea    rcx,[rbp+0x78]
    65019502:	call   0x6501d4e0
    65019507:	lea    rax,[rip+0x1b05a]        # 0x65034568
    6501950e:	mov    QWORD PTR [rbp+0x78],rax
    65019512:	lea    rdx,[rip+0x27c97]        # 0x650411b0
    65019519:	lea    rcx,[rbp+0x78]
    6501951d:	call   0x6501dc60
    65019522:	mov    r8d,DWORD PTR [rbp+0x188]
    65019529:	mov    rdx,QWORD PTR [rbp+0x190]
    65019530:	lea    rcx,[rbp+0x1d8]
    65019537:	call   0x65002000
    6501953c:	cmp    rsi,0x1
    65019540:	jbe    0x650195b8
    65019542:	lea    rcx,[rbp+0x180]
    65019549:	mov    rax,QWORD PTR [rdi+0x18]
    6501954d:	mov    QWORD PTR [rcx],rax
    65019550:	mov    rax,QWORD PTR [rdi+0x20]
    65019554:	mov    QWORD PTR [rcx+0x8],rax
    65019558:	mov    rax,QWORD PTR [rdi+0x28]
    6501955c:	mov    QWORD PTR [rcx+0x10],rax
    65019560:	cmp    DWORD PTR [rbp+0x180],0x5
    65019567:	je     0x6501959d
    65019569:	lea    rdx,[rip+0x1b008]        # 0x65034578
    65019570:	lea    rcx,[rbp+0xb0]
    65019577:	call   0x6501d4e0
    6501957c:	lea    rax,[rip+0x1afe5]        # 0x65034568
    65019583:	mov    QWORD PTR [rbp+0xb0],rax
    6501958a:	lea    rdx,[rip+0x27c1f]        # 0x650411b0
    65019591:	lea    rcx,[rbp+0xb0]
    65019598:	call   0x6501dc60
    6501959d:	mov    r8d,DWORD PTR [rbp+0x188]
    650195a4:	mov    rdx,QWORD PTR [rbp+0x190]
    650195ab:	lea    rcx,[rbp+0x1b0]
    650195b2:	call   0x65002000
    650195b7:	nop
    650195b8:	call   QWORD PTR [rip+0x29ada]        # 0x65043098
    650195be:	mov    r14d,eax
    650195c1:	cmp    QWORD PTR [rbp+0x1f8],0x10
    650195c9:	jb     0x650195ed
    650195cb:	mov    rdi,QWORD PTR [rbp+0x1e0]
    650195d2:	test   rdi,rdi
    650195d5:	jne    0x650195f4
    650195d7:	mov    rsi,rbx
    650195da:	movabs r13,0xffffffffffffff0
    650195e4:	or     r12,0xffffffffffffffff
    650195e8:	jmp    0x65019691
    650195ed:	lea    rdi,[rbp+0x1e0]
    650195f4:	mov    rcx,rdi
    650195f7:	call   QWORD PTR [rip+0x1aa8b]        # 0x65034088
    650195fd:	lea    r9d,[rax+0x1]
    65019601:	cmp    r9d,0x3fffffff
    65019608:	jle    0x6501961d
    6501960a:	mov    rsi,rbx
    6501960d:	movabs r13,0xffffffffffffff0
    65019617:	or     r12,0xffffffffffffffff
    6501961b:	jmp    0x65019691
    6501961d:	movsxd rax,r9d
    65019620:	add    rax,rax
    65019623:	lea    rcx,[rax+0xf]
    65019627:	cmp    rcx,rax
    6501962a:	ja     0x6501963b
    6501962c:	movabs r13,0xffffffffffffff0
    65019636:	mov    rcx,r13
    65019639:	jmp    0x65019645
    6501963b:	movabs r13,0xffffffffffffff0
    65019645:	and    rcx,0xfffffffffffffff0
    65019649:	mov    rax,rcx
    6501964c:	call   0x65033230
    65019651:	sub    rsp,rcx
    65019654:	lea    rsi,[rsp+0x50]
    65019659:	test   rsi,rsi
    6501965c:	je     0x6501968a
    6501965e:	mov    WORD PTR [rsi],0x0
    65019663:	mov    DWORD PTR [rsp+0x28],r9d
    65019668:	mov    QWORD PTR [rsp+0x20],rsi
    6501966d:	or     r12,0xffffffffffffffff
    65019671:	mov    r9d,r12d
    65019674:	mov    r8,rdi
    65019677:	xor    edx,edx
    65019679:	mov    ecx,r14d
    6501967c:	call   QWORD PTR [rip+0x1a9a6]        # 0x65034028
    65019682:	test   eax,eax
    65019684:	cmove  rsi,rbx
    65019688:	jmp    0x65019691
    6501968a:	mov    rsi,rbx
    6501968d:	or     r12,0xffffffffffffffff
    65019691:	lea    rcx,[rip+0x29a08]        # 0x650430a0
    65019698:	mov    rax,QWORD PTR [rip+0x29a01]        # 0x650430a0
    6501969f:	call   QWORD PTR [rax+0x18]
    650196a2:	add    rax,0x18
    650196a6:	mov    QWORD PTR [rbp+0x18],rax
    650196aa:	test   rsi,rsi
    650196ad:	je     0x650196ee
    650196af:	test   rsi,0xffffffffffff0000
    650196b6:	jne    0x650196da
    650196b8:	movzx  edi,si
    650196bb:	xor    edx,edx
    650196bd:	mov    ecx,edi
    650196bf:	call   0x650026f0
    650196c4:	test   rax,rax
    650196c7:	je     0x65019700
    650196c9:	mov    r8d,edi
    650196cc:	mov    rdx,rax
    650196cf:	lea    rcx,[rbp+0x18]
    650196d3:	call   0x65003e00
    650196d8:	jmp    0x65019700
    650196da:	xor    eax,eax
    650196dc:	mov    rcx,r12
    650196df:	mov    rdi,rsi
    650196e2:	repnz scas ax,WORD PTR es:[rdi]
    650196e5:	not    rcx
    650196e8:	sub    rcx,0x1
    650196ec:	jmp    0x650196f0
    650196ee:	mov    ecx,ebx
    650196f0:	mov    r8d,ecx
    650196f3:	mov    rdx,rsi
    650196f6:	lea    rcx,[rbp+0x18]
    650196fa:	call   0x65003f90
    650196ff:	nop
    65019700:	lea    rcx,[rip+0x29999]        # 0x650430a0
    65019707:	mov    rax,QWORD PTR [rip+0x29992]        # 0x650430a0
    6501970e:	call   QWORD PTR [rax+0x18]
    65019711:	add    rax,0x18
    65019715:	mov    QWORD PTR [rbp+0x10],rax
    65019719:	lea    r8,[rbp+0x10]
    6501971d:	lea    rdx,[rbp+0x18]
    65019721:	lea    rcx,[rbp+0x0]
    65019725:	call   0x650029a0
    6501972a:	nop
    6501972b:	xor    eax,eax
    6501972d:	lea    rdi,[rip+0x1d924]        # 0x65037058
    65019734:	mov    rsi,QWORD PTR [rbp+0x0]
    65019738:	mov    ecx,0x1
    6501973d:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
    65019740:	je     0x65019747
    65019742:	sbb    eax,eax
    65019744:	sbb    eax,0xffffffff
    65019747:	test   eax,eax
    65019749:	setne  al
    6501974c:	test   al,al
    6501974e:	je     0x65019a65
    65019754:	mov    rdi,QWORD PTR [rbp+0x10]
    65019758:	call   0x65017290
    6501975d:	mov    rcx,rdi
    65019760:	call   rax
    65019762:	mov    rdi,QWORD PTR [rbp+0x0]
    65019766:	mov    rcx,QWORD PTR [rdi-0x18]
    6501976a:	mov    rax,QWORD PTR [rcx]
    6501976d:	call   QWORD PTR [rax+0x20]
    65019770:	mov    rcx,rax
    65019773:	cmp    DWORD PTR [rdi-0x8],0x0
    65019777:	jl     0x6501978a
    65019779:	cmp    rax,QWORD PTR [rdi-0x18]
    6501977d:	jne    0x6501978a
    6501977f:	lea    rsi,[rdi-0x18]
    65019783:	lock add DWORD PTR [rdi-0x8],0x1
    65019788:	jmp    0x650197c7
    6501978a:	mov    rax,QWORD PTR [rax]
    6501978d:	mov    r8d,0x2
    65019793:	mov    edx,DWORD PTR [rdi-0x10]
    65019796:	call   QWORD PTR [rax]
    65019798:	mov    rsi,rax
    6501979b:	test   rax,rax
    6501979e:	jne    0x650197a5
    650197a0:	call   0x65002320
    650197a5:	mov    eax,DWORD PTR [rdi-0x10]
    650197a8:	mov    DWORD PTR [rsi+0x8],eax
    650197ab:	mov    eax,DWORD PTR [rdi-0x10]
    650197ae:	add    eax,0x1
    650197b1:	movsxd rdx,eax
    650197b4:	lea    r9,[rdx+rdx*1]
    650197b8:	mov    r8,rdi
    650197bb:	add    rdx,rdx
    650197be:	lea    rcx,[rsi+0x18]
    650197c2:	call   0x6501d7b0
    650197c7:	lea    rax,[rsi+0x18]
    650197cb:	mov    QWORD PTR [rbp+0x50],rax
    650197cf:	lea    rdx,[rbp+0x1b8]
    650197d6:	cmp    QWORD PTR [rbp+0x1d0],0x10
    650197de:	cmovae rdx,QWORD PTR [rbp+0x1b8]
    650197e6:	mov    r8,QWORD PTR [rbp+0x1c8]
    650197ed:	lea    rcx,[rbp+0x50]
    650197f1:	call   0x65003520
    650197f6:	xor    edx,edx
    650197f8:	lea    rcx,[rbp+0x48]
    650197fc:	call   0x65005060
    65019801:	nop
    65019802:	lea    r8,[rip+0x1aecf]        # 0x650346d8
    65019809:	mov    rdx,rax
    6501980c:	lea    rcx,[rbp+0x40]
    65019810:	call   0x65018880
    65019815:	nop
    65019816:	mov    rdx,QWORD PTR [rbp+0x48]
    6501981a:	add    rdx,0xffffffffffffffe8
    6501981e:	mov    eax,r12d
    65019821:	lock xadd DWORD PTR [rdx+0x10],eax
    65019826:	add    eax,0xffffffff
    65019829:	test   eax,eax
    6501982b:	jg     0x65019836
    6501982d:	mov    rcx,QWORD PTR [rdx]
    65019830:	mov    rax,QWORD PTR [rcx]
    65019833:	call   QWORD PTR [rax+0x8]
    65019836:	mov    rsi,QWORD PTR [rbp+0x0]
    6501983a:	test   rsi,rsi
    6501983d:	jne    0x65019844
    6501983f:	mov    rdi,rbx
    65019842:	jmp    0x650198bd
    65019844:	mov    rcx,rsi
    65019847:	call   QWORD PTR [rip+0x1a833]        # 0x65034080
    6501984d:	lea    edx,[rax+0x1]
    65019850:	cmp    edx,0x3fffffff
    65019856:	jle    0x6501985d
    65019858:	mov    rdi,rbx
    6501985b:	jmp    0x650198bd
    6501985d:	movsxd rax,edx
    65019860:	add    rax,rax
    65019863:	lea    rcx,[rax+0xf]
    65019867:	cmp    rcx,rax
    6501986a:	ja     0x6501986f
    6501986c:	mov    rcx,r13
    6501986f:	and    rcx,0xfffffffffffffff0
    65019873:	mov    rax,rcx
    65019876:	call   0x65033230
    6501987b:	sub    rsp,rcx
    6501987e:	lea    rdi,[rsp+0x50]
    65019883:	test   rdi,rdi
    65019886:	je     0x650198ba
    65019888:	mov    BYTE PTR [rdi],0x0
    6501988b:	lea    eax,[rdx+rdx*1]
    6501988e:	mov    QWORD PTR [rsp+0x38],rbx
    65019893:	mov    QWORD PTR [rsp+0x30],rbx
    65019898:	mov    DWORD PTR [rsp+0x28],eax
    6501989c:	mov    QWORD PTR [rsp+0x20],rdi
    650198a1:	mov    r9d,r12d
    650198a4:	mov    r8,rsi
    650198a7:	xor    edx,edx
    650198a9:	mov    ecx,r14d
    650198ac:	call   QWORD PTR [rip+0x1a77e]        # 0x65034030
    650198b2:	test   eax,eax
    650198b4:	cmove  rdi,rbx
    650198b8:	jmp    0x650198bd
    650198ba:	mov    rdi,rbx
    650198bd:	lea    rcx,[rip+0x297dc]        # 0x650430a0
    650198c4:	mov    rax,QWORD PTR [rip+0x297d5]        # 0x650430a0
    650198cb:	call   QWORD PTR [rax+0x18]
    650198ce:	add    rax,0x18
    650198d2:	mov    QWORD PTR [rbp+0x8],rax
    650198d6:	test   rdi,rdi
    650198d9:	je     0x65019906
    650198db:	test   rdi,0xffffffffffff0000
    650198e2:	jne    0x65019906
    650198e4:	movzx  edi,di
    650198e7:	xor    edx,edx
    650198e9:	mov    ecx,edi
    650198eb:	call   0x650026f0
    650198f0:	test   rax,rax
    650198f3:	je     0x65019913
    650198f5:	mov    r8d,edi
    650198f8:	mov    rdx,rax
    650198fb:	lea    rcx,[rbp+0x8]
    650198ff:	call   0x65003e00
    65019904:	jmp    0x65019913
    65019906:	mov    rdx,rdi
    65019909:	lea    rcx,[rbp+0x8]
    6501990d:	call   0x65003cc0
    65019912:	nop
    65019913:	lea    rdx,[rbp+0x40]
    65019917:	lea    rcx,[rbp+0x8]
    6501991b:	call   0x65003840
    65019920:	nop
    65019921:	mov    rdx,QWORD PTR [rbp+0x8]
    65019925:	add    rdx,0xffffffffffffffe8
    65019929:	mov    eax,r12d
    6501992c:	lock xadd DWORD PTR [rdx+0x10],eax
    65019931:	add    eax,0xffffffff
    65019934:	test   eax,eax
    65019936:	jg     0x65019941
    65019938:	mov    rcx,QWORD PTR [rdx]
    6501993b:	mov    rax,QWORD PTR [rcx]
    6501993e:	call   QWORD PTR [rax+0x8]
    65019941:	mov    QWORD PTR [rbp+0x20],rbx
    65019945:	xor    eax,eax
    65019947:	mov    QWORD PTR [rbp+0x28],rax
    6501994b:	mov    QWORD PTR [rbp+0x30],rax
    6501994f:	xor    edx,edx
    65019951:	lea    r8d,[rax+0x60]
    65019955:	lea    rcx,[rbp+0x118]
    6501995c:	call   0x6501efa0
    65019961:	mov    DWORD PTR [rbp+0x110],0x68
    6501996b:	lea    rcx,[rbp+0x180]
    65019972:	call   0x65001a80
    65019977:	nop
    65019978:	lea    rdi,[rbp+0x188]
    6501997f:	cmp    QWORD PTR [rbp+0x1a0],0x10
    65019987:	cmovae rdi,QWORD PTR [rbp+0x188]
    6501998f:	mov    rsi,QWORD PTR [rbp+0x0]
    65019993:	call   0x65017130
    65019998:	lea    rcx,[rbp+0x20]
    6501999c:	mov    QWORD PTR [rsp+0x48],rcx
    650199a1:	lea    rcx,[rbp+0x110]
    650199a8:	mov    QWORD PTR [rsp+0x40],rcx
    650199ad:	mov    QWORD PTR [rsp+0x38],rbx
    650199b2:	mov    QWORD PTR [rsp+0x30],rdi
    650199b7:	mov    DWORD PTR [rsp+0x28],0x400
    650199bf:	mov    DWORD PTR [rsp+0x20],0x1
    650199c7:	xor    r9d,r9d
    650199ca:	xor    r8d,r8d
    650199cd:	xor    edx,edx
    650199cf:	mov    rcx,rsi
    650199d2:	call   rax
    650199d4:	test   eax,eax
    650199d6:	je     0x650199ec
    650199d8:	mov    rcx,QWORD PTR [rbp+0x28]
    650199dc:	call   QWORD PTR [rip+0x1a67e]        # 0x65034060
    650199e2:	mov    rcx,QWORD PTR [rbp+0x20]
    650199e6:	call   QWORD PTR [rip+0x1a674]        # 0x65034060
    650199ec:	mov    rdi,QWORD PTR [rbp+0x0]
    650199f0:	call   0x650171e0
    650199f5:	xor    edx,edx
    650199f7:	lea    r8d,[rdx+0x4]
    650199fb:	mov    rcx,rdi
    650199fe:	call   rax
    65019a00:	mov    rdi,QWORD PTR [rbp+0x10]
    65019a04:	call   0x650171e0
    65019a09:	xor    edx,edx
    65019a0b:	lea    r8d,[rdx+0x4]
    65019a0f:	mov    rcx,rdi
    65019a12:	call   rax
    65019a14:	nop
    65019a15:	cmp    QWORD PTR [rbp+0x1a0],0x10
    65019a1d:	jb     0x65019a2b
    65019a1f:	mov    rcx,QWORD PTR [rbp+0x188]
    65019a26:	call   0x6501d300
    65019a2b:	mov    QWORD PTR [rbp+0x1a0],0xf
    65019a36:	mov    QWORD PTR [rbp+0x198],rbx
    65019a3d:	mov    BYTE PTR [rbp+0x188],0x0
    65019a44:	mov    rdx,QWORD PTR [rbp+0x40]
    65019a48:	add    rdx,0xffffffffffffffe8
    65019a4c:	mov    eax,r12d
    65019a4f:	lock xadd DWORD PTR [rdx+0x10],eax
    65019a54:	add    eax,0xffffffff
    65019a57:	test   eax,eax
    65019a59:	jg     0x65019a65
    65019a5b:	mov    rcx,QWORD PTR [rdx]
    65019a5e:	mov    rax,QWORD PTR [rcx]
    65019a61:	call   QWORD PTR [rax+0x8]
    65019a64:	nop
    65019a65:	mov    rdx,QWORD PTR [rbp+0x0]
    65019a69:	add    rdx,0xffffffffffffffe8
    65019a6d:	mov    eax,r12d
    65019a70:	lock xadd DWORD PTR [rdx+0x10],eax
    65019a75:	add    eax,0xffffffff
    65019a78:	test   eax,eax
    65019a7a:	jg     0x65019a86
    65019a7c:	mov    rcx,QWORD PTR [rdx]
    65019a7f:	mov    rax,QWORD PTR [rcx]
    65019a82:	call   QWORD PTR [rax+0x8]
    65019a85:	nop
    65019a86:	mov    rdx,QWORD PTR [rbp+0x10]
    65019a8a:	add    rdx,0xffffffffffffffe8
    65019a8e:	mov    eax,r12d
    65019a91:	lock xadd DWORD PTR [rdx+0x10],eax
    65019a96:	add    eax,0xffffffff
    65019a99:	test   eax,eax
    65019a9b:	jg     0x65019aa7
    65019a9d:	mov    rcx,QWORD PTR [rdx]
    65019aa0:	mov    rax,QWORD PTR [rcx]
    65019aa3:	call   QWORD PTR [rax+0x8]
    65019aa6:	nop
    65019aa7:	mov    rdx,QWORD PTR [rbp+0x18]
    65019aab:	add    rdx,0xffffffffffffffe8
    65019aaf:	lock xadd DWORD PTR [rdx+0x10],r12d
    65019ab5:	add    r12d,0xffffffff
    65019ab9:	test   r12d,r12d
    65019abc:	jg     0x65019ac8
    65019abe:	mov    rcx,QWORD PTR [rdx]
    65019ac1:	mov    rax,QWORD PTR [rcx]
    65019ac4:	call   QWORD PTR [rax+0x8]
    65019ac7:	nop
    65019ac8:	jmp    0x65019acc
    65019aca:	xor    ebx,ebx
    65019acc:	mov    rdi,QWORD PTR [rbp+0x70]
    65019ad0:	test   rdi,rdi
    65019ad3:	je     0x65019ae6
    65019ad5:	mov    rcx,rdi
    65019ad8:	call   0x65017550
    65019add:	mov    rcx,rdi
    65019ae0:	call   0x6501d300
    65019ae5:	nop
    65019ae6:	cmp    QWORD PTR [rbp+0x1f8],0x10
    65019aee:	jb     0x65019afc
    65019af0:	mov    rcx,QWORD PTR [rbp+0x1e0]
    65019af7:	call   0x6501d300
    65019afc:	mov    QWORD PTR [rbp+0x1f8],0xf
    65019b07:	mov    QWORD PTR [rbp+0x1f0],rbx
    65019b0e:	mov    BYTE PTR [rbp+0x1e0],0x0
    65019b15:	cmp    QWORD PTR [rbp+0x1d0],0x10
    65019b1d:	jb     0x65019b8d
    65019b1f:	mov    rcx,QWORD PTR [rbp+0x1b8]
    65019b26:	call   0x6501d300
    65019b2b:	jmp    0x65019b8d
    65019b2d:	mov    rdi,QWORD PTR [rbp+0x70]
    65019b31:	test   rdi,rdi
    65019b34:	je     0x65019b47
    65019b36:	mov    rcx,rdi
    65019b39:	call   0x65017550
    65019b3e:	mov    rcx,rdi
    65019b41:	call   0x6501d300
    65019b46:	nop
    65019b47:	cmp    QWORD PTR [rbp+0x1f8],0x10
    65019b4f:	jb     0x65019b5d
    65019b51:	mov    rcx,QWORD PTR [rbp+0x1e0]
    65019b58:	call   0x6501d300
    65019b5d:	mov    QWORD PTR [rbp+0x1f8],0xf
    65019b68:	xor    ebx,ebx
    65019b6a:	mov    QWORD PTR [rbp+0x1f0],rbx
    65019b71:	mov    BYTE PTR [rbp+0x1e0],bl
    65019b77:	cmp    QWORD PTR [rbp+0x1d0],0x10
    65019b7f:	jb     0x65019b8d
    65019b81:	mov    rcx,QWORD PTR [rbp+0x1b8]
    65019b88:	call   0x6501d300
    65019b8d:	mov    rcx,QWORD PTR [rbp+0x200]
    65019b94:	xor    rcx,rbp
    65019b97:	call   0x6501e650
    65019b9c:	mov    rbx,QWORD PTR [rbp+0x248]
    65019ba3:	mov    rsi,QWORD PTR [rbp+0x250]
    65019baa:	lea    rsp,[rbp+0x210]
    65019bb1:	pop    r14
    65019bb3:	pop    r13
    65019bb5:	pop    r12
    65019bb7:	pop    rdi
    65019bb8:	pop    rbp
    65019bb9:	ret    
    65019bba:	int3   
    65019bbb:	int3   
    65019bbc:	int3   
    65019bbd:	int3   
    65019bbe:	int3   
    65019bbf:	int3   
    65019bc0:	rex push rbp
    65019bc2:	sub    rsp,0x20
    65019bc6:	lea    rbp,[rdx+0x50]
    65019bca:	lea    rcx,[rbp+0x1b0]
    65019bd1:	call   0x650186c0
    65019bd6:	add    rsp,0x20
    65019bda:	pop    rbp
    65019bdb:	ret    
    65019bdc:	int3   
    65019bdd:	int3   
    65019bde:	int3   
    65019bdf:	int3   
    65019be0:	rex push rbp
    65019be2:	sub    rsp,0x20
    65019be6:	lea    rbp,[rdx+0x50]
    65019bea:	lea    rcx,[rbp+0x58]
    65019bee:	call   0x65018690
    65019bf3:	add    rsp,0x20
    65019bf7:	pop    rbp
    65019bf8:	ret    
    65019bf9:	int3   
    65019bfa:	int3   
    65019bfb:	int3   
    65019bfc:	int3   
    65019bfd:	int3   
    65019bfe:	int3   
    65019bff:	int3   
    65019c00:	mov    QWORD PTR [rsp+0x10],rdx
    65019c05:	push   rbp
    65019c06:	sub    rsp,0x50
    65019c0a:	lea    rbp,[rdx+0x50]
    65019c0e:	lea    rax,[rip+0xffffffffffffff18]        # 0x65019b2d
    65019c15:	jmp    0x65019c17
    65019c17:	add    rsp,0x50
    65019c1b:	pop    rbp
    65019c1c:	ret    
    65019c1d:	int3   
    65019c1e:	int3   
    65019c1f:	int3   
    65019c20:	rex push rbp
    65019c22:	sub    rsp,0x20
    65019c26:	lea    rbp,[rdx+0x50]
    65019c2a:	lea    rcx,[rbp+0x18]
    65019c2e:	call   0x65002100
    65019c33:	add    rsp,0x20
    65019c37:	pop    rbp
    65019c38:	ret    
    65019c39:	int3   
    65019c3a:	int3   
    65019c3b:	int3   
    65019c3c:	int3   
    65019c3d:	int3   
    65019c3e:	int3   
    65019c3f:	int3   
    65019c40:	rex push rbp
    65019c42:	sub    rsp,0x20
    65019c46:	lea    rbp,[rdx+0x50]
    65019c4a:	lea    rcx,[rbp+0x18]
    65019c4e:	call   0x65001cb0
    65019c53:	add    rsp,0x20
    65019c57:	pop    rbp
    65019c58:	ret    
    65019c59:	int3   
    65019c5a:	int3   
    65019c5b:	int3   
    65019c5c:	int3   
    65019c5d:	int3   
    65019c5e:	int3   
    65019c5f:	int3   
    65019c60:	rex push rbp
    65019c62:	sub    rsp,0x20
    65019c66:	lea    rbp,[rdx+0x50]
    65019c6a:	lea    rcx,[rbp+0x10]
    65019c6e:	call   0x65001cb0
    65019c73:	add    rsp,0x20
    65019c77:	pop    rbp
    65019c78:	ret    
    65019c79:	int3   
    65019c7a:	int3   
    65019c7b:	int3   
    65019c7c:	int3   
    65019c7d:	int3   
    65019c7e:	int3   
    65019c7f:	int3   
    65019c80:	rex push rbp
    65019c82:	sub    rsp,0x20
    65019c86:	lea    rbp,[rdx+0x50]
    65019c8a:	lea    rcx,[rbp+0x0]
    65019c8e:	call   0x65001cb0
    65019c93:	add    rsp,0x20
    65019c97:	pop    rbp
    65019c98:	ret    
    65019c99:	int3   
    65019c9a:	int3   
    65019c9b:	int3   
    65019c9c:	int3   
    65019c9d:	int3   
    65019c9e:	int3   
    65019c9f:	int3   
    65019ca0:	rex push rbp
    65019ca2:	sub    rsp,0x20
    65019ca6:	lea    rbp,[rdx+0x50]
    65019caa:	lea    rcx,[rbp+0x48]
    65019cae:	call   0x65001cb0
    65019cb3:	add    rsp,0x20
    65019cb7:	pop    rbp
    65019cb8:	ret    
    65019cb9:	int3   
    65019cba:	int3   
    65019cbb:	int3   
    65019cbc:	int3   
    65019cbd:	int3   
    65019cbe:	int3   
    65019cbf:	int3   
    65019cc0:	rex push rbp
    65019cc2:	sub    rsp,0x20
    65019cc6:	lea    rbp,[rdx+0x50]
    65019cca:	lea    rcx,[rbp+0x40]
    65019cce:	call   0x65001cb0
    65019cd3:	add    rsp,0x20
    65019cd7:	pop    rbp
    65019cd8:	ret    
    65019cd9:	int3   
    65019cda:	int3   
    65019cdb:	int3   
    65019cdc:	int3   
    65019cdd:	int3   
    65019cde:	int3   
    65019cdf:	int3   
    65019ce0:	rex push rbp
    65019ce2:	sub    rsp,0x20
    65019ce6:	lea    rbp,[rdx+0x50]
    65019cea:	lea    rcx,[rbp+0x8]
    65019cee:	call   0x65002100
    65019cf3:	add    rsp,0x20
    65019cf7:	pop    rbp
    65019cf8:	ret    
    65019cf9:	int3   
    65019cfa:	int3   
    65019cfb:	int3   
    65019cfc:	int3   
    65019cfd:	int3   
    65019cfe:	int3   
    65019cff:	int3   
    65019d00:	rex push rbp
    65019d02:	sub    rsp,0x20
    65019d06:	lea    rbp,[rdx+0x50]
    65019d0a:	lea    rcx,[rbp+0x8]
    65019d0e:	call   0x65001cb0
    65019d13:	add    rsp,0x20
    65019d17:	pop    rbp
    65019d18:	ret    
    65019d19:	int3   
    65019d1a:	int3   
    65019d1b:	int3   
    65019d1c:	int3   
    65019d1d:	int3   
    65019d1e:	int3   
    65019d1f:	int3   
    65019d20:	rex push rbp
    65019d22:	sub    rsp,0x20
    65019d26:	lea    rbp,[rdx+0x50]
    65019d2a:	lea    rcx,[rbp+0x180]
    65019d31:	call   0x65001c70
    65019d36:	add    rsp,0x20
    65019d3a:	pop    rbp
    65019d3b:	ret    
    65019d3c:	int3   
    65019d3d:	int3   
    65019d3e:	int3   
    65019d3f:	int3   
    65019d40:	mov    QWORD PTR [rsp+0x10],rdx
    65019d45:	push   rbp
    65019d46:	sub    rsp,0x50
    65019d4a:	lea    rbp,[rdx+0x50]
    65019d4e:	lea    rax,[rip+0xfffffffffffffd75]        # 0x65019aca
    65019d55:	jmp    0x65019d57
    65019d57:	add    rsp,0x50
    65019d5b:	pop    rbp
    65019d5c:	ret    
    65019d5d:	int3   
    65019d5e:	int3   
    65019d5f:	int3   
    65019d60:	mov    QWORD PTR [rsp+0x10],rbx
    65019d65:	mov    QWORD PTR [rsp+0x18],rbp
    65019d6a:	push   rdi
    65019d6b:	sub    rsp,0x20
    65019d6f:	mov    rbx,QWORD PTR [rcx+0x8]
    65019d73:	xor    ebp,ebp
    65019d75:	mov    rdi,rcx
    65019d78:	test   rbx,rbx
    65019d7b:	je     0x65019dc7
    65019d7d:	mov    QWORD PTR [rsp+0x30],rsi
    65019d82:	mov    rsi,QWORD PTR [rcx+0x10]
    65019d86:	cmp    rbx,rsi
    65019d89:	je     0x65019db9
    65019d8b:	xchg   ax,ax
    65019d8d:	data16 xchg ax,ax
    65019d90:	cmp    QWORD PTR [rbx+0x20],0x10
    65019d95:	jb     0x65019da0
    65019d97:	mov    rcx,QWORD PTR [rbx+0x8]
    65019d9b:	call   0x6501d300
    65019da0:	mov    QWORD PTR [rbx+0x20],0xf
    65019da8:	mov    QWORD PTR [rbx+0x18],rbp
    65019dac:	mov    BYTE PTR [rbx+0x8],bpl
    65019db0:	add    rbx,0x28
    65019db4:	cmp    rbx,rsi
    65019db7:	jne    0x65019d90
    65019db9:	mov    rcx,QWORD PTR [rdi+0x8]
    65019dbd:	call   0x6501d300
    65019dc2:	mov    rsi,QWORD PTR [rsp+0x30]
    65019dc7:	mov    rbx,QWORD PTR [rsp+0x38]
    65019dcc:	mov    QWORD PTR [rdi+0x8],rbp
    65019dd0:	mov    QWORD PTR [rdi+0x10],rbp
    65019dd4:	mov    QWORD PTR [rdi+0x18],rbp
    65019dd8:	mov    rbp,QWORD PTR [rsp+0x40]
    65019ddd:	add    rsp,0x20
    65019de1:	pop    rdi
    65019de2:	ret    
    65019de3:	int3   
    65019de4:	int3   
    65019de5:	int3   
    65019de6:	int3   
    65019de7:	int3   
    65019de8:	int3   
    65019de9:	int3   
    65019dea:	int3   
    65019deb:	int3   
    65019dec:	int3   
    65019ded:	int3   
    65019dee:	int3   
    65019def:	int3   
    65019df0:	rex push rbp
    65019df2:	push   rsi
    65019df3:	push   rdi
    65019df4:	sub    rsp,0x40
    65019df8:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    65019e01:	mov    QWORD PTR [rsp+0x70],rbx
    65019e06:	mov    eax,DWORD PTR [rip+0x2ad3c]        # 0x65044b48
    65019e0c:	xor    ebx,ebx
    65019e0e:	test   al,0x1
    65019e10:	jne    0x65019e3d
    65019e12:	or     eax,0x1
    65019e15:	mov    DWORD PTR [rip+0x2ad2d],eax        # 0x65044b48
    65019e1b:	mov    QWORD PTR [rip+0x2ad0e],rbx        # 0x65044b30
    65019e22:	mov    QWORD PTR [rip+0x2ad0f],rbx        # 0x65044b38
    65019e29:	mov    QWORD PTR [rip+0x2ad10],rbx        # 0x65044b40
    65019e30:	lea    rcx,[rip+0x19729]        # 0x65033560
    65019e37:	call   0x6501e7f0
    65019e3c:	nop
    65019e3d:	mov    rcx,QWORD PTR [rip+0x2acec]        # 0x65044b30
    65019e44:	test   rcx,rcx
    65019e47:	je     0x65019e67
    65019e49:	mov    r8,QWORD PTR [rip+0x2ace8]        # 0x65044b38
    65019e50:	mov    rax,r8
    65019e53:	sub    rax,rcx
    65019e56:	sar    rax,0x2
    65019e5a:	je     0x65019e67
    65019e5c:	mov    edx,DWORD PTR [rip+0x2acbe]        # 0x65044b20
    65019e62:	jmp    0x6501a422
    65019e67:	lea    r8,[rip+0x1a9d2]        # 0x65034840
    65019e6e:	mov    edx,0xc
    65019e73:	lea    rcx,[rip+0x1a9b6]        # 0x65034830
    65019e7a:	call   0x6500bcb0
    65019e7f:	mov    rcx,rax
    65019e82:	call   QWORD PTR [rip+0x1a4f0]        # 0x65034378
    65019e88:	mov    r11d,eax
    65019e8b:	mov    DWORD PTR [rsp+0x60],eax
    65019e8f:	lea    rbp,[rip+0x2ac92]        # 0x65044b28
    65019e96:	mov    rdx,QWORD PTR [rip+0x2ac9b]        # 0x65044b38
    65019e9d:	mov    rdi,QWORD PTR [rip+0x2ac8c]        # 0x65044b30
    65019ea4:	test   rdi,rdi
    65019ea7:	je     0x65019ed9
    65019ea9:	mov    rcx,rdx
    65019eac:	sub    rcx,rdi
    65019eaf:	sar    rcx,0x2
    65019eb3:	mov    rax,QWORD PTR [rip+0x2ac86]        # 0x65044b40
    65019eba:	sub    rax,rdi
    65019ebd:	sar    rax,0x2
    65019ec1:	cmp    rcx,rax
    65019ec4:	jae    0x65019ed9
    65019ec6:	mov    DWORD PTR [rdx],r11d
    65019ec9:	lea    rax,[rdx+0x4]
    65019ecd:	mov    QWORD PTR [rip+0x2ac64],rax        # 0x65044b38
    65019ed4:	jmp    0x65019f84
    65019ed9:	mov    rsi,rdx
    65019edc:	cmp    rdi,rdx
    65019edf:	jbe    0x65019ef4
    65019ee1:	call   0x6501dad0
    65019ee6:	mov    rdx,QWORD PTR [rip+0x2ac4b]        # 0x65044b38
    65019eed:	mov    rdi,QWORD PTR [rip+0x2ac3c]        # 0x65044b30
    65019ef4:	mov    QWORD PTR [rsp+0x30],rbp
    65019ef9:	mov    QWORD PTR [rsp+0x38],rsi
    65019efe:	test   rdi,rdi
    65019f01:	je     0x65019f22
    65019f03:	mov    rax,rdx
    65019f06:	sub    rax,rdi
    65019f09:	sar    rax,0x2
    65019f0d:	je     0x65019f22
    65019f0f:	cmp    rdi,rdx
    65019f12:	jbe    0x65019f19
    65019f14:	call   0x6501dad0
    65019f19:	sub    rsi,rdi
    65019f1c:	sar    rsi,0x2
    65019f20:	jmp    0x65019f25
    65019f22:	mov    rsi,rbx
    65019f25:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    65019f2a:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    65019f30:	lea    r9,[rsp+0x60]
    65019f35:	mov    r8d,0x1
    65019f3b:	lea    rdx,[rsp+0x30]
    65019f40:	mov    rcx,rbp
    65019f43:	call   0x65019030
    65019f48:	mov    r11,QWORD PTR [rip+0x2abe1]        # 0x65044b30
    65019f4f:	mov    rdi,r11
    65019f52:	mov    rcx,QWORD PTR [rip+0x2abdf]        # 0x65044b38
    65019f59:	cmp    r11,rcx
    65019f5c:	jbe    0x65019f71
    65019f5e:	call   0x6501dad0
    65019f63:	mov    rcx,QWORD PTR [rip+0x2abce]        # 0x65044b38
    65019f6a:	mov    r11,QWORD PTR [rip+0x2abbf]        # 0x65044b30
    65019f71:	lea    rax,[rdi+rsi*4]
    65019f75:	cmp    rax,rcx
    65019f78:	ja     0x65019f7f
    65019f7a:	cmp    rax,r11
    65019f7d:	jae    0x65019f84
    65019f7f:	call   0x6501dad0
    65019f84:	lea    r8,[rip+0x1a865]        # 0x650347f0
    65019f8b:	mov    edx,0xc
    65019f90:	lea    rcx,[rip+0x1a849]        # 0x650347e0
    65019f97:	call   0x6500bcb0
    65019f9c:	mov    rcx,rax
    65019f9f:	call   QWORD PTR [rip+0x1a3d3]        # 0x65034378
    65019fa5:	mov    r11d,eax
    65019fa8:	mov    DWORD PTR [rsp+0x60],eax
    65019fac:	mov    rdx,QWORD PTR [rip+0x2ab85]        # 0x65044b38
    65019fb3:	mov    rsi,QWORD PTR [rip+0x2ab76]        # 0x65044b30
    65019fba:	test   rsi,rsi
    65019fbd:	je     0x65019fef
    65019fbf:	mov    rcx,rdx
    65019fc2:	sub    rcx,rsi
    65019fc5:	sar    rcx,0x2
    65019fc9:	mov    rax,QWORD PTR [rip+0x2ab70]        # 0x65044b40
    65019fd0:	sub    rax,rsi
    65019fd3:	sar    rax,0x2
    65019fd7:	cmp    rcx,rax
    65019fda:	jae    0x65019fef
    65019fdc:	mov    DWORD PTR [rdx],r11d
    65019fdf:	lea    rax,[rdx+0x4]
    65019fe3:	mov    QWORD PTR [rip+0x2ab4e],rax        # 0x65044b38
    65019fea:	jmp    0x6501a09a
    65019fef:	mov    rdi,rdx
    65019ff2:	cmp    rsi,rdx
    65019ff5:	jbe    0x6501a00a
    65019ff7:	call   0x6501dad0
    65019ffc:	mov    rdx,QWORD PTR [rip+0x2ab35]        # 0x65044b38
    6501a003:	mov    rsi,QWORD PTR [rip+0x2ab26]        # 0x65044b30
    6501a00a:	mov    QWORD PTR [rsp+0x30],rbp
    6501a00f:	mov    QWORD PTR [rsp+0x38],rdi
    6501a014:	test   rsi,rsi
    6501a017:	je     0x6501a038
    6501a019:	mov    rax,rdx
    6501a01c:	sub    rax,rsi
    6501a01f:	sar    rax,0x2
    6501a023:	je     0x6501a038
    6501a025:	cmp    rsi,rdx
    6501a028:	jbe    0x6501a02f
    6501a02a:	call   0x6501dad0
    6501a02f:	sub    rdi,rsi
    6501a032:	sar    rdi,0x2
    6501a036:	jmp    0x6501a03b
    6501a038:	mov    rdi,rbx
    6501a03b:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    6501a040:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6501a046:	lea    r9,[rsp+0x60]
    6501a04b:	mov    r8d,0x1
    6501a051:	lea    rdx,[rsp+0x30]
    6501a056:	mov    rcx,rbp
    6501a059:	call   0x65019030
    6501a05e:	mov    r11,QWORD PTR [rip+0x2aacb]        # 0x65044b30
    6501a065:	mov    rsi,r11
    6501a068:	mov    rcx,QWORD PTR [rip+0x2aac9]        # 0x65044b38
    6501a06f:	cmp    r11,rcx
    6501a072:	jbe    0x6501a087
    6501a074:	call   0x6501dad0
    6501a079:	mov    rcx,QWORD PTR [rip+0x2aab8]        # 0x65044b38
    6501a080:	mov    r11,QWORD PTR [rip+0x2aaa9]        # 0x65044b30
    6501a087:	lea    rax,[rsi+rdi*4]
    6501a08b:	cmp    rax,rcx
    6501a08e:	ja     0x6501a095
    6501a090:	cmp    rax,r11
    6501a093:	jae    0x6501a09a
    6501a095:	call   0x6501dad0
    6501a09a:	lea    r8,[rip+0x1a707]        # 0x650347a8
    6501a0a1:	mov    edx,0xc
    6501a0a6:	lea    rcx,[rip+0x1a733]        # 0x650347e0
    6501a0ad:	call   0x6500bcb0
    6501a0b2:	mov    rcx,rax
    6501a0b5:	call   QWORD PTR [rip+0x1a2bd]        # 0x65034378
    6501a0bb:	mov    r11d,eax
    6501a0be:	mov    DWORD PTR [rsp+0x60],eax
    6501a0c2:	mov    rdx,QWORD PTR [rip+0x2aa6f]        # 0x65044b38
    6501a0c9:	mov    rsi,QWORD PTR [rip+0x2aa60]        # 0x65044b30
    6501a0d0:	test   rsi,rsi
    6501a0d3:	je     0x6501a105
    6501a0d5:	mov    rcx,rdx
    6501a0d8:	sub    rcx,rsi
    6501a0db:	sar    rcx,0x2
    6501a0df:	mov    rax,QWORD PTR [rip+0x2aa5a]        # 0x65044b40
    6501a0e6:	sub    rax,rsi
    6501a0e9:	sar    rax,0x2
    6501a0ed:	cmp    rcx,rax
    6501a0f0:	jae    0x6501a105
    6501a0f2:	mov    DWORD PTR [rdx],r11d
    6501a0f5:	lea    rax,[rdx+0x4]
    6501a0f9:	mov    QWORD PTR [rip+0x2aa38],rax        # 0x65044b38
    6501a100:	jmp    0x6501a1b0
    6501a105:	mov    rdi,rdx
    6501a108:	cmp    rsi,rdx
    6501a10b:	jbe    0x6501a120
    6501a10d:	call   0x6501dad0
    6501a112:	mov    rdx,QWORD PTR [rip+0x2aa1f]        # 0x65044b38
    6501a119:	mov    rsi,QWORD PTR [rip+0x2aa10]        # 0x65044b30
    6501a120:	mov    QWORD PTR [rsp+0x30],rbp
    6501a125:	mov    QWORD PTR [rsp+0x38],rdi
    6501a12a:	test   rsi,rsi
    6501a12d:	je     0x6501a14e
    6501a12f:	mov    rax,rdx
    6501a132:	sub    rax,rsi
    6501a135:	sar    rax,0x2
    6501a139:	je     0x6501a14e
    6501a13b:	cmp    rsi,rdx
    6501a13e:	jbe    0x6501a145
    6501a140:	call   0x6501dad0
    6501a145:	sub    rdi,rsi
    6501a148:	sar    rdi,0x2
    6501a14c:	jmp    0x6501a151
    6501a14e:	mov    rdi,rbx
    6501a151:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    6501a156:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6501a15c:	lea    r9,[rsp+0x60]
    6501a161:	mov    r8d,0x1
    6501a167:	lea    rdx,[rsp+0x30]
    6501a16c:	mov    rcx,rbp
    6501a16f:	call   0x65019030
    6501a174:	mov    r11,QWORD PTR [rip+0x2a9b5]        # 0x65044b30
    6501a17b:	mov    rsi,r11
    6501a17e:	mov    rcx,QWORD PTR [rip+0x2a9b3]        # 0x65044b38
    6501a185:	cmp    r11,rcx
    6501a188:	jbe    0x6501a19d
    6501a18a:	call   0x6501dad0
    6501a18f:	mov    rcx,QWORD PTR [rip+0x2a9a2]        # 0x65044b38
    6501a196:	mov    r11,QWORD PTR [rip+0x2a993]        # 0x65044b30
    6501a19d:	lea    rax,[rsi+rdi*4]
    6501a1a1:	cmp    rax,rcx
    6501a1a4:	ja     0x6501a1ab
    6501a1a6:	cmp    rax,r11
    6501a1a9:	jae    0x6501a1b0
    6501a1ab:	call   0x6501dad0
    6501a1b0:	lea    r8,[rip+0x1a5b9]        # 0x65034770
    6501a1b7:	mov    edx,0xc
    6501a1bc:	lea    rcx,[rip+0x1a59d]        # 0x65034760
    6501a1c3:	call   0x6500bcb0
    6501a1c8:	mov    rcx,rax
    6501a1cb:	call   QWORD PTR [rip+0x1a1a7]        # 0x65034378
    6501a1d1:	mov    r11d,eax
    6501a1d4:	mov    DWORD PTR [rsp+0x60],eax
    6501a1d8:	mov    rdx,QWORD PTR [rip+0x2a959]        # 0x65044b38
    6501a1df:	mov    rsi,QWORD PTR [rip+0x2a94a]        # 0x65044b30
    6501a1e6:	test   rsi,rsi
    6501a1e9:	je     0x6501a21b
    6501a1eb:	mov    rcx,rdx
    6501a1ee:	sub    rcx,rsi
    6501a1f1:	sar    rcx,0x2
    6501a1f5:	mov    rax,QWORD PTR [rip+0x2a944]        # 0x65044b40
    6501a1fc:	sub    rax,rsi
    6501a1ff:	sar    rax,0x2
    6501a203:	cmp    rcx,rax
    6501a206:	jae    0x6501a21b
    6501a208:	mov    DWORD PTR [rdx],r11d
    6501a20b:	lea    rax,[rdx+0x4]
    6501a20f:	mov    QWORD PTR [rip+0x2a922],rax        # 0x65044b38
    6501a216:	jmp    0x6501a2c6
    6501a21b:	mov    rdi,rdx
    6501a21e:	cmp    rsi,rdx
    6501a221:	jbe    0x6501a236
    6501a223:	call   0x6501dad0
    6501a228:	mov    rdx,QWORD PTR [rip+0x2a909]        # 0x65044b38
    6501a22f:	mov    rsi,QWORD PTR [rip+0x2a8fa]        # 0x65044b30
    6501a236:	mov    QWORD PTR [rsp+0x30],rbp
    6501a23b:	mov    QWORD PTR [rsp+0x38],rdi
    6501a240:	test   rsi,rsi
    6501a243:	je     0x6501a264
    6501a245:	mov    rax,rdx
    6501a248:	sub    rax,rsi
    6501a24b:	sar    rax,0x2
    6501a24f:	je     0x6501a264
    6501a251:	cmp    rsi,rdx
    6501a254:	jbe    0x6501a25b
    6501a256:	call   0x6501dad0
    6501a25b:	sub    rdi,rsi
    6501a25e:	sar    rdi,0x2
    6501a262:	jmp    0x6501a267
    6501a264:	mov    rdi,rbx
    6501a267:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    6501a26c:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6501a272:	lea    r9,[rsp+0x60]
    6501a277:	mov    r8d,0x1
    6501a27d:	lea    rdx,[rsp+0x30]
    6501a282:	mov    rcx,rbp
    6501a285:	call   0x65019030
    6501a28a:	mov    r11,QWORD PTR [rip+0x2a89f]        # 0x65044b30
    6501a291:	mov    rsi,r11
    6501a294:	mov    rcx,QWORD PTR [rip+0x2a89d]        # 0x65044b38
    6501a29b:	cmp    r11,rcx
    6501a29e:	jbe    0x6501a2b3
    6501a2a0:	call   0x6501dad0
    6501a2a5:	mov    rcx,QWORD PTR [rip+0x2a88c]        # 0x65044b38
    6501a2ac:	mov    r11,QWORD PTR [rip+0x2a87d]        # 0x65044b30
    6501a2b3:	lea    rax,[rsi+rdi*4]
    6501a2b7:	cmp    rax,rcx
    6501a2ba:	ja     0x6501a2c1
    6501a2bc:	cmp    rax,r11
    6501a2bf:	jae    0x6501a2c6
    6501a2c1:	call   0x6501dad0
    6501a2c6:	lea    r8,[rip+0x1a453]        # 0x65034720
    6501a2cd:	mov    edx,0xc
    6501a2d2:	lea    rcx,[rip+0x1a487]        # 0x65034760
    6501a2d9:	call   0x6500bcb0
    6501a2de:	mov    rcx,rax
    6501a2e1:	call   QWORD PTR [rip+0x1a091]        # 0x65034378
    6501a2e7:	mov    r11d,eax
    6501a2ea:	mov    DWORD PTR [rsp+0x60],eax
    6501a2ee:	mov    rdx,QWORD PTR [rip+0x2a843]        # 0x65044b38
    6501a2f5:	mov    rsi,QWORD PTR [rip+0x2a834]        # 0x65044b30
    6501a2fc:	test   rsi,rsi
    6501a2ff:	je     0x6501a331
    6501a301:	mov    rcx,rdx
    6501a304:	sub    rcx,rsi
    6501a307:	sar    rcx,0x2
    6501a30b:	mov    rax,QWORD PTR [rip+0x2a82e]        # 0x65044b40
    6501a312:	sub    rax,rsi
    6501a315:	sar    rax,0x2
    6501a319:	cmp    rcx,rax
    6501a31c:	jae    0x6501a331
    6501a31e:	mov    DWORD PTR [rdx],r11d
    6501a321:	lea    rax,[rdx+0x4]
    6501a325:	mov    QWORD PTR [rip+0x2a80c],rax        # 0x65044b38
    6501a32c:	jmp    0x6501a3dc
    6501a331:	mov    rdi,rdx
    6501a334:	cmp    rsi,rdx
    6501a337:	jbe    0x6501a34c
    6501a339:	call   0x6501dad0
    6501a33e:	mov    rdx,QWORD PTR [rip+0x2a7f3]        # 0x65044b38
    6501a345:	mov    rsi,QWORD PTR [rip+0x2a7e4]        # 0x65044b30
    6501a34c:	mov    QWORD PTR [rsp+0x30],rbp
    6501a351:	mov    QWORD PTR [rsp+0x38],rdi
    6501a356:	test   rsi,rsi
    6501a359:	je     0x6501a37a
    6501a35b:	mov    rax,rdx
    6501a35e:	sub    rax,rsi
    6501a361:	sar    rax,0x2
    6501a365:	je     0x6501a37a
    6501a367:	cmp    rsi,rdx
    6501a36a:	jbe    0x6501a371
    6501a36c:	call   0x6501dad0
    6501a371:	sub    rdi,rsi
    6501a374:	sar    rdi,0x2
    6501a378:	jmp    0x6501a37d
    6501a37a:	mov    rdi,rbx
    6501a37d:	movaps xmm0,XMMWORD PTR [rsp+0x30]
    6501a382:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6501a388:	lea    r9,[rsp+0x60]
    6501a38d:	mov    r8d,0x1
    6501a393:	lea    rdx,[rsp+0x30]
    6501a398:	mov    rcx,rbp
    6501a39b:	call   0x65019030
    6501a3a0:	mov    r11,QWORD PTR [rip+0x2a789]        # 0x65044b30
    6501a3a7:	mov    rsi,r11
    6501a3aa:	mov    rcx,QWORD PTR [rip+0x2a787]        # 0x65044b38
    6501a3b1:	cmp    r11,rcx
    6501a3b4:	jbe    0x6501a3c9
    6501a3b6:	call   0x6501dad0
    6501a3bb:	mov    rcx,QWORD PTR [rip+0x2a776]        # 0x65044b38
    6501a3c2:	mov    r11,QWORD PTR [rip+0x2a767]        # 0x65044b30
    6501a3c9:	lea    rax,[rsi+rdi*4]
    6501a3cd:	cmp    rax,rcx
    6501a3d0:	ja     0x6501a3d7
    6501a3d2:	cmp    rax,r11
    6501a3d5:	jae    0x6501a3dc
    6501a3d7:	call   0x6501dad0
    6501a3dc:	call   QWORD PTR [rip+0x19cae]        # 0x65034090
    6501a3e2:	mov    ecx,eax
    6501a3e4:	call   0x6501f090
    6501a3e9:	mov    r11,QWORD PTR [rip+0x2a740]        # 0x65044b30
    6501a3f0:	test   r11,r11
    6501a3f3:	jne    0x6501a3fa
    6501a3f5:	mov    rdi,rbx
    6501a3f8:	jmp    0x6501a408
    6501a3fa:	mov    rdi,QWORD PTR [rip+0x2a737]        # 0x65044b38
    6501a401:	sub    rdi,r11
    6501a404:	sar    rdi,0x2
    6501a408:	call   0x6501f0b0
    6501a40d:	cdqe   
    6501a40f:	xor    edx,edx
    6501a411:	div    rdi
    6501a414:	mov    r8,QWORD PTR [rip+0x2a71d]        # 0x65044b38
    6501a41b:	mov    rcx,QWORD PTR [rip+0x2a70e]        # 0x65044b30
    6501a422:	test   rcx,rcx
    6501a425:	je     0x6501a431
    6501a427:	mov    rbx,r8
    6501a42a:	sub    rbx,rcx
    6501a42d:	sar    rbx,0x2
    6501a431:	lea    eax,[rdx+0x1]
    6501a434:	cdqe   
    6501a436:	xor    edx,edx
    6501a438:	div    rbx
    6501a43b:	mov    DWORD PTR [rip+0x2a6df],edx        # 0x65044b20
    6501a441:	movsxd rbx,edx
    6501a444:	test   rcx,rcx
    6501a447:	je     0x6501a45a
    6501a449:	sub    r8,rcx
    6501a44c:	sar    r8,0x2
    6501a450:	cmp    rbx,r8
    6501a453:	jae    0x6501a45a
    6501a455:	mov    eax,DWORD PTR [rcx+rbx*4]
    6501a458:	jmp    0x6501a46a
    6501a45a:	call   0x6501dad0
    6501a45f:	mov    r11,QWORD PTR [rip+0x2a6ca]        # 0x65044b30
    6501a466:	mov    eax,DWORD PTR [r11+rbx*4]
    6501a46a:	mov    rbx,QWORD PTR [rsp+0x70]
    6501a46f:	add    rsp,0x40
    6501a473:	pop    rdi
    6501a474:	pop    rsi
    6501a475:	pop    rbp
    6501a476:	ret    
    6501a477:	int3   
    6501a478:	int3   
    6501a479:	int3   
    6501a47a:	int3   
    6501a47b:	int3   
    6501a47c:	int3   
    6501a47d:	int3   
    6501a47e:	int3   
    6501a47f:	int3   
    6501a480:	rex push rbp
    6501a482:	mov    rbp,rdx
    6501a485:	mov    eax,DWORD PTR [rip+0x2a6bd]        # 0x65044b48
    6501a48b:	and    eax,0xfffffffe
    6501a48e:	mov    DWORD PTR [rip+0x2a6b4],eax        # 0x65044b48
    6501a494:	pop    rbp
    6501a495:	ret    
    6501a496:	int3   
    6501a497:	int3   
    6501a498:	int3   
    6501a499:	int3   
    6501a49a:	int3   
    6501a49b:	int3   
    6501a49c:	int3   
    6501a49d:	int3   
    6501a49e:	int3   
    6501a49f:	int3   
    6501a4a0:	rex push rdi
    6501a4a2:	sub    rsp,0x40
    6501a4a6:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
    6501a4af:	mov    QWORD PTR [rsp+0x50],rbx
    6501a4b4:	mov    QWORD PTR [rsp+0x58],rsi
    6501a4b9:	mov    rbx,rdx
    6501a4bc:	mov    rdi,rcx
    6501a4bf:	call   0x65019df0
    6501a4c4:	mov    esi,eax
    6501a4c6:	lea    rcx,[rsp+0x60]
    6501a4cb:	call   0x650118b0
    6501a4d0:	nop
    6501a4d1:	mov    r9,QWORD PTR [rdi+0x18]
    6501a4d5:	cmp    QWORD PTR [rdi+0x20],0x10
    6501a4da:	jb     0x6501a4e2
    6501a4dc:	mov    r8,QWORD PTR [rdi+0x8]
    6501a4e0:	jmp    0x6501a4e6
    6501a4e2:	lea    r8,[rdi+0x8]
    6501a4e6:	add    r9,0x1
    6501a4ea:	mov    DWORD PTR [rsp+0x28],0xffffffff
    6501a4f2:	mov    QWORD PTR [rsp+0x20],rbx
    6501a4f7:	mov    edx,esi
    6501a4f9:	lea    rcx,[rsp+0x60]
    6501a4fe:	call   0x65011a40
    6501a503:	test   al,al
    6501a505:	je     0x6501a518
    6501a507:	lea    rcx,[rsp+0x60]
    6501a50c:	call   0x65011980
    6501a511:	mov    al,0x1
    6501a513:	jmp    0x6501a598
    6501a518:	mov    r8,QWORD PTR [rbx+0x20]
    6501a51c:	cmp    r8,0x10
    6501a520:	jb     0x6501a52b
    6501a522:	lea    rdx,[rbx+0x8]
    6501a526:	mov    rax,QWORD PTR [rdx]
    6501a529:	jmp    0x6501a532
    6501a52b:	lea    rdx,[rbx+0x8]
    6501a52f:	mov    rax,rdx
    6501a532:	lea    r10,[rip+0x1cb21]        # 0x6503705a
    6501a539:	cmp    r10,rax
    6501a53c:	jb     0x6501a577
    6501a53e:	cmp    r8,0x10
    6501a542:	jb     0x6501a549
    6501a544:	mov    rcx,QWORD PTR [rdx]
    6501a547:	jmp    0x6501a54c
    6501a549:	mov    rcx,rdx
    6501a54c:	mov    rax,QWORD PTR [rbx+0x18]
    6501a550:	add    rcx,rax
    6501a553:	cmp    rcx,r10
    6501a556:	jbe    0x6501a577
    6501a558:	cmp    r8,0x10
    6501a55c:	jb     0x6501a561
    6501a55e:	mov    rdx,QWORD PTR [rdx]
    6501a561:	sub    r10,rdx
    6501a564:	xor    r9d,r9d
    6501a567:	mov    r8,r10
    6501a56a:	mov    rdx,rbx
    6501a56d:	mov    rcx,rbx
    6501a570:	call   0x65001e20
    6501a575:	jmp    0x6501a58b
    6501a577:	mov    QWORD PTR [rbx+0x18],0x0
    6501a57f:	cmp    r8,0x10
    6501a583:	jb     0x6501a588
    6501a585:	mov    rdx,QWORD PTR [rdx]
    6501a588:	mov    BYTE PTR [rdx],0x0
    6501a58b:	lea    rcx,[rsp+0x60]
    6501a590:	call   0x65011980
    6501a595:	nop
    6501a596:	xor    al,al
    6501a598:	mov    rbx,QWORD PTR [rsp+0x50]
    6501a59d:	mov    rsi,QWORD PTR [rsp+0x58]
    6501a5a2:	add    rsp,0x40
    6501a5a6:	pop    rdi
    6501a5a7:	ret    
    6501a5a8:	int3   
    6501a5a9:	int3   
    6501a5aa:	int3   
    6501a5ab:	int3   
    6501a5ac:	int3   
    6501a5ad:	int3   
    6501a5ae:	int3   
    6501a5af:	int3   
    6501a5b0:	rex push rbp
    6501a5b2:	sub    rsp,0x20
    6501a5b6:	mov    rbp,rdx
    6501a5b9:	lea    rcx,[rbp+0x60]
    6501a5bd:	call   0x65011980
    6501a5c2:	add    rsp,0x20
    6501a5c6:	pop    rbp
    6501a5c7:	ret    
    6501a5c8:	int3   
    6501a5c9:	int3   
    6501a5ca:	int3   
    6501a5cb:	int3   
    6501a5cc:	int3   
    6501a5cd:	int3   
    6501a5ce:	int3   
    6501a5cf:	int3   
    6501a5d0:	mov    QWORD PTR [rsp+0x10],rdx
    6501a5d5:	push   rbp
    6501a5d6:	sub    rsp,0x30
    6501a5da:	mov    rbp,rdx
    6501a5dd:	lea    rax,[rip+0xffffffffffffffb2]        # 0x6501a596
    6501a5e4:	jmp    0x6501a5e6
    6501a5e6:	add    rsp,0x30
    6501a5ea:	pop    rbp
    6501a5eb:	ret    
    6501a5ec:	int3   
    6501a5ed:	int3   
    6501a5ee:	int3   
    6501a5ef:	int3   
    6501a5f0:	mov    QWORD PTR [rsp+0x8],rcx
    6501a5f5:	push   rdi
    6501a5f6:	sub    rsp,0x30
    6501a5fa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501a603:	mov    QWORD PTR [rsp+0x50],rbx
    6501a608:	mov    rbx,rcx
    6501a60b:	mov    DWORD PTR [rsp+0x48],0x0
    6501a613:	lea    r8,[rip+0x1a2c6]        # 0x650348e0
    6501a61a:	mov    edx,0x17
    6501a61f:	lea    rcx,[rip+0x1a2a2]        # 0x650348c8
    6501a626:	call   0x6500bcb0
    6501a62b:	mov    rdi,rax
    6501a62e:	lea    rcx,[rip+0x28a6b]        # 0x650430a0
    6501a635:	mov    rdx,QWORD PTR [rip+0x28a64]        # 0x650430a0
    6501a63c:	call   QWORD PTR [rdx+0x18]
    6501a63f:	add    rax,0x18
    6501a643:	mov    QWORD PTR [rbx],rax
    6501a646:	test   rdi,rdi
    6501a649:	je     0x6501a67e
    6501a64b:	test   rdi,0xffffffffffff0000
    6501a652:	jne    0x6501a67e
    6501a654:	movzx  edi,di
    6501a657:	xor    edx,edx
    6501a659:	mov    ecx,edi
    6501a65b:	call   0x650026f0
    6501a660:	test   rax,rax
    6501a663:	je     0x6501a679
    6501a665:	mov    r8d,edi
    6501a668:	mov    rdx,rax
    6501a66b:	mov    rcx,rbx
    6501a66e:	call   0x65003e00
    6501a673:	nop
    6501a674:	mov    rax,rbx
    6501a677:	jmp    0x6501a68d
    6501a679:	mov    rax,rbx
    6501a67c:	jmp    0x6501a68d
    6501a67e:	mov    rdx,rdi
    6501a681:	mov    rcx,rbx
    6501a684:	call   0x65003cc0
    6501a689:	nop
    6501a68a:	mov    rax,rbx
    6501a68d:	mov    rbx,QWORD PTR [rsp+0x50]
    6501a692:	add    rsp,0x30
    6501a696:	pop    rdi
    6501a697:	ret    
    6501a698:	int3   
    6501a699:	int3   
    6501a69a:	int3   
    6501a69b:	int3   
    6501a69c:	int3   
    6501a69d:	int3   
    6501a69e:	int3   
    6501a69f:	int3   
    6501a6a0:	rex push rbp
    6501a6a2:	sub    rsp,0x20
    6501a6a6:	mov    rbp,rdx
    6501a6a9:	mov    rcx,QWORD PTR [rbp+0x40]
    6501a6ad:	call   0x65002100
    6501a6b2:	add    rsp,0x20
    6501a6b6:	pop    rbp
    6501a6b7:	ret    
    6501a6b8:	int3   
    6501a6b9:	int3   
    6501a6ba:	int3   
    6501a6bb:	int3   
    6501a6bc:	int3   
    6501a6bd:	int3   
    6501a6be:	int3   
    6501a6bf:	int3   
    6501a6c0:	rex push rbx
    6501a6c2:	push   rsi
    6501a6c3:	push   rdi
    6501a6c4:	sub    rsp,0x50
    6501a6c8:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
    6501a6d1:	mov    QWORD PTR [rsp+0x78],0x0
    6501a6da:	lea    r8,[rip+0x1a26f]        # 0x65034950
    6501a6e1:	mov    edx,0xf
    6501a6e6:	lea    rcx,[rip+0x1a243]        # 0x65034930
    6501a6ed:	call   0x6500c660
    6501a6f2:	mov    rsi,rax
    6501a6f5:	lea    rcx,[rip+0x289a4]        # 0x650430a0
    6501a6fc:	mov    rdx,QWORD PTR [rip+0x2899d]        # 0x650430a0
    6501a703:	call   QWORD PTR [rdx+0x18]
    6501a706:	lea    rdi,[rax+0x18]
    6501a70a:	mov    QWORD PTR [rsp+0x70],rdi
    6501a70f:	or     rbx,0xffffffffffffffff
    6501a713:	test   rsi,rsi
    6501a716:	je     0x6501a75d
    6501a718:	test   rsi,0xffffffffffff0000
    6501a71f:	jne    0x6501a749
    6501a721:	movzx  esi,si
    6501a724:	xor    edx,edx
    6501a726:	mov    ecx,esi
    6501a728:	call   0x650026f0
    6501a72d:	test   rax,rax
    6501a730:	je     0x6501a774
    6501a732:	mov    r8d,esi
    6501a735:	mov    rdx,rax
    6501a738:	lea    rcx,[rsp+0x70]
    6501a73d:	call   0x65003e00
    6501a742:	mov    rdi,QWORD PTR [rsp+0x70]
    6501a747:	jmp    0x6501a774
    6501a749:	xor    eax,eax
    6501a74b:	mov    rcx,rbx
    6501a74e:	mov    rdi,rsi
    6501a751:	repnz scas ax,WORD PTR es:[rdi]
    6501a754:	not    rcx
    6501a757:	sub    rcx,0x1
    6501a75b:	jmp    0x6501a75f
    6501a75d:	xor    ecx,ecx
    6501a75f:	mov    r8d,ecx
    6501a762:	mov    rdx,rsi
    6501a765:	lea    rcx,[rsp+0x70]
    6501a76a:	call   0x65003f90
    6501a76f:	mov    rdi,QWORD PTR [rsp+0x70]
    6501a774:	call   0x65017340
    6501a779:	mov    QWORD PTR [rsp+0x30],0x0
    6501a782:	mov    DWORD PTR [rsp+0x28],0x0
    6501a78a:	mov    DWORD PTR [rsp+0x20],0x3
    6501a792:	xor    r9d,r9d
    6501a795:	xor    r8d,r8d
    6501a798:	mov    edx,0xc0000000
    6501a79d:	mov    rcx,rdi
    6501a7a0:	call   rax
    6501a7a2:	mov    QWORD PTR [rsp+0x80],rax
    6501a7aa:	mov    QWORD PTR [rsp+0x78],rax
    6501a7af:	cmp    rax,0xffffffffffffffff
    6501a7b3:	je     0x6501a7f9
    6501a7b5:	lea    rdx,[rdi-0x18]
    6501a7b9:	lock xadd DWORD PTR [rdx+0x10],ebx
    6501a7be:	add    ebx,0xffffffff
    6501a7c1:	test   ebx,ebx
    6501a7c3:	jg     0x6501a7cf
    6501a7c5:	mov    rcx,QWORD PTR [rdx]
    6501a7c8:	mov    rax,QWORD PTR [rcx]
    6501a7cb:	call   QWORD PTR [rax+0x8]
    6501a7ce:	nop
    6501a7cf:	mov    rdi,QWORD PTR [rsp+0x80]
    6501a7d7:	test   rdi,rdi
    6501a7da:	je     0x6501a7f5
    6501a7dc:	call   QWORD PTR [rip+0x19886]        # 0x65034068
    6501a7e2:	mov    ebx,eax
    6501a7e4:	mov    rcx,rdi
    6501a7e7:	call   QWORD PTR [rip+0x19873]        # 0x65034060
    6501a7ed:	mov    ecx,ebx
    6501a7ef:	call   QWORD PTR [rip+0x1991b]        # 0x65034110
    6501a7f5:	mov    al,0x1
    6501a7f7:	jmp    0x6501a830
    6501a7f9:	lea    rdx,[rdi-0x18]
    6501a7fd:	mov    eax,ebx
    6501a7ff:	lock xadd DWORD PTR [rdx+0x10],eax
    6501a804:	add    eax,0xffffffff
    6501a807:	test   eax,eax
    6501a809:	jg     0x6501a815
    6501a80b:	mov    rcx,QWORD PTR [rdx]
    6501a80e:	mov    rax,QWORD PTR [rcx]
    6501a811:	call   QWORD PTR [rax+0x8]
    6501a814:	nop
    6501a815:	call   QWORD PTR [rip+0x1984d]        # 0x65034068
    6501a81b:	mov    edi,eax
    6501a81d:	mov    rcx,rbx
    6501a820:	call   QWORD PTR [rip+0x1983a]        # 0x65034060
    6501a826:	mov    ecx,edi
    6501a828:	call   QWORD PTR [rip+0x198e2]        # 0x65034110
    6501a82e:	xor    al,al
    6501a830:	add    rsp,0x50
    6501a834:	pop    rdi
    6501a835:	pop    rsi
    6501a836:	pop    rbx
    6501a837:	ret    
    6501a838:	int3   
    6501a839:	int3   
    6501a83a:	int3   
    6501a83b:	int3   
    6501a83c:	int3   
    6501a83d:	int3   
    6501a83e:	int3   
    6501a83f:	int3   
    6501a840:	rex push rbp
    6501a842:	sub    rsp,0x20
    6501a846:	mov    rbp,rdx
    6501a849:	lea    rcx,[rbp+0x78]
    6501a84d:	call   0x65001ce0
    6501a852:	add    rsp,0x20
    6501a856:	pop    rbp
    6501a857:	ret    
    6501a858:	int3   
    6501a859:	int3   
    6501a85a:	int3   
    6501a85b:	int3   
    6501a85c:	int3   
    6501a85d:	int3   
    6501a85e:	int3   
    6501a85f:	int3   
    6501a860:	rex push rbp
    6501a862:	sub    rsp,0x20
    6501a866:	mov    rbp,rdx
    6501a869:	lea    rcx,[rbp+0x70]
    6501a86d:	call   0x65002100
    6501a872:	add    rsp,0x20
    6501a876:	pop    rbp
    6501a877:	ret    
    6501a878:	int3   
    6501a879:	int3   
    6501a87a:	int3   
    6501a87b:	int3   
    6501a87c:	int3   
    6501a87d:	int3   
    6501a87e:	int3   
    6501a87f:	int3   
    6501a880:	rex push rbp
    6501a882:	sub    rsp,0x20
    6501a886:	mov    rbp,rdx
    6501a889:	lea    rcx,[rbp+0x70]
    6501a88d:	call   0x65001cb0
    6501a892:	add    rsp,0x20
    6501a896:	pop    rbp
    6501a897:	ret    
    6501a898:	int3   
    6501a899:	int3   
    6501a89a:	int3   
    6501a89b:	int3   
    6501a89c:	int3   
    6501a89d:	int3   
    6501a89e:	int3   
    6501a89f:	int3   
    6501a8a0:	rex push rbp
    6501a8a2:	push   r12
    6501a8a4:	push   r13
    6501a8a6:	push   r14
    6501a8a8:	push   r15
    6501a8aa:	sub    rsp,0x300
    6501a8b1:	lea    rbp,[rsp+0x40]
    6501a8b6:	mov    QWORD PTR [rbp+0x120],0xfffffffffffffffe
    6501a8c1:	mov    QWORD PTR [rbp+0x2f8],rbx
    6501a8c8:	mov    QWORD PTR [rbp+0x300],rsi
    6501a8cf:	mov    QWORD PTR [rbp+0x308],rdi
    6501a8d6:	mov    rax,QWORD PTR [rip+0x28843]        # 0x65043120
    6501a8dd:	xor    rax,rbp
    6501a8e0:	mov    QWORD PTR [rbp+0x2b0],rax
    6501a8e7:	mov    rsi,rcx
    6501a8ea:	mov    QWORD PTR [rbp+0x138],rcx
    6501a8f1:	xor    r15d,r15d
    6501a8f4:	mov    DWORD PTR [rbp+0x70],r15d
    6501a8f8:	call   QWORD PTR [rip+0x2879a]        # 0x65043098
    6501a8fe:	lea    rcx,[rip+0x2879b]        # 0x650430a0
    6501a905:	mov    rax,QWORD PTR [rip+0x28794]        # 0x650430a0
    6501a90c:	call   QWORD PTR [rax+0x18]
    6501a90f:	add    rax,0x18
    6501a913:	mov    QWORD PTR [rsi],rax
    6501a916:	mov    DWORD PTR [rbp+0x70],0x1
    6501a91d:	lea    r8,[rip+0x1a544]        # 0x65034e68
    6501a924:	lea    edx,[r15+0xd]
    6501a928:	lea    rcx,[rip+0x1a529]        # 0x65034e58
    6501a92f:	call   0x6500bcb0
    6501a934:	mov    rdx,rax
    6501a937:	mov    rcx,rsi
    6501a93a:	call   0x65003ab0
    6501a93f:	lea    r8,[rip+0x1a4da]        # 0x65034e20
    6501a946:	lea    edx,[r15+0x3]
    6501a94a:	lea    rcx,[rip+0x1a4cb]        # 0x65034e1c
    6501a951:	call   0x6500bcb0
    6501a956:	mov    rdx,rax
    6501a959:	mov    rcx,rsi
    6501a95c:	call   0x65003ab0
    6501a961:	lea    rdx,[rip+0x1a4a8]        # 0x65034e10
    6501a968:	mov    rcx,rsi
    6501a96b:	call   0x65003ab0
    6501a970:	lea    r8,[rip+0x1a469]        # 0x65034de0
    6501a977:	lea    edx,[r15+0x3]
    6501a97b:	lea    rcx,[rip+0x1a45a]        # 0x65034ddc
    6501a982:	call   0x6500bcb0
    6501a987:	mov    rdx,rax
    6501a98a:	mov    rcx,rsi
    6501a98d:	call   0x65003ab0
    6501a992:	lea    rdx,[rip+0x1a43b]        # 0x65034dd4
    6501a999:	mov    rcx,rsi
    6501a99c:	call   0x65003ab0
    6501a9a1:	lea    rcx,[rip+0x286f8]        # 0x650430a0
    6501a9a8:	mov    rax,QWORD PTR [rip+0x286f1]        # 0x650430a0
    6501a9af:	call   QWORD PTR [rax+0x18]
    6501a9b2:	add    rax,0x18
    6501a9b6:	mov    QWORD PTR [rbp+0xd0],rax
    6501a9bd:	lea    rcx,[rip+0x286dc]        # 0x650430a0
    6501a9c4:	mov    rax,QWORD PTR [rip+0x286d5]        # 0x650430a0
    6501a9cb:	call   QWORD PTR [rax+0x18]
    6501a9ce:	add    rax,0x18
    6501a9d2:	mov    QWORD PTR [rbp+0xc0],rax
    6501a9d9:	lea    rcx,[rbp+0x180]
    6501a9e0:	call   0x6500b5f0
    6501a9e5:	or     r12,0xffffffffffffffff
    6501a9e9:	test   al,al
    6501a9eb:	je     0x6501abca
    6501a9f1:	lea    r8,[rip+0x1a3a0]        # 0x65034d98
    6501a9f8:	lea    edx,[r15+0x4]
    6501a9fc:	lea    rcx,[rip+0x1a38d]        # 0x65034d90
    6501aa03:	call   0x6500bcb0
    6501aa08:	mov    rbx,rax
    6501aa0b:	lea    rcx,[rip+0x2868e]        # 0x650430a0
    6501aa12:	mov    rdx,QWORD PTR [rip+0x28687]        # 0x650430a0
    6501aa19:	call   QWORD PTR [rdx+0x18]
    6501aa1c:	lea    rdi,[rax+0x18]
    6501aa20:	mov    QWORD PTR [rbp+0x40],rdi
    6501aa24:	test   rbx,rbx
    6501aa27:	je     0x6501aa58
    6501aa29:	test   rbx,0xffffffffffff0000
    6501aa30:	jne    0x6501aa58
    6501aa32:	movzx  ebx,bx
    6501aa35:	xor    edx,edx
    6501aa37:	mov    ecx,ebx
    6501aa39:	call   0x650026f0
    6501aa3e:	test   rax,rax
    6501aa41:	je     0x6501aa68
    6501aa43:	mov    r8d,ebx
    6501aa46:	mov    rdx,rax
    6501aa49:	lea    rcx,[rbp+0x40]
    6501aa4d:	call   0x65003e00
    6501aa52:	mov    rdi,QWORD PTR [rbp+0x40]
    6501aa56:	jmp    0x6501aa68
    6501aa58:	mov    rdx,rbx
    6501aa5b:	lea    rcx,[rbp+0x40]
    6501aa5f:	call   0x65003cc0
    6501aa64:	mov    rdi,QWORD PTR [rbp+0x40]
    6501aa68:	mov    edx,DWORD PTR [rdi-0x10]
    6501aa6b:	mov    DWORD PTR [rbp+0x4],edx
    6501aa6e:	mov    r14,rdi
    6501aa71:	mov    rax,QWORD PTR [rsi]
    6501aa74:	mov    r13,rdi
    6501aa77:	sub    r13,rax
    6501aa7a:	sar    r13,1
    6501aa7d:	mov    r15d,DWORD PTR [rax-0x10]
    6501aa81:	lea    ebx,[r15+rdx*1]
    6501aa85:	mov    ecx,0x1
    6501aa8a:	sub    ecx,DWORD PTR [rax-0x8]
    6501aa8d:	mov    eax,DWORD PTR [rax-0xc]
    6501aa90:	sub    eax,ebx
    6501aa92:	or     eax,ecx
    6501aa94:	jge    0x6501aaa3
    6501aa96:	mov    edx,ebx
    6501aa98:	mov    rcx,rsi
    6501aa9b:	call   0x65002640
    6501aaa0:	mov    edx,DWORD PTR [rbp+0x4]
    6501aaa3:	mov    rax,QWORD PTR [rsi]
    6501aaa6:	cmp    r13,r15
    6501aaa9:	ja     0x6501aaaf
    6501aaab:	lea    r14,[rax+r13*2]
    6501aaaf:	movsxd rdx,edx
    6501aab2:	add    rdx,rdx
    6501aab5:	lea    rcx,[rax+r15*2]
    6501aab9:	mov    r9,rdx
    6501aabc:	mov    r8,r14
    6501aabf:	call   0x6501d7b0
    6501aac4:	test   ebx,ebx
    6501aac6:	js     0x6501abbc
    6501aacc:	mov    rax,QWORD PTR [rsi]
    6501aacf:	cmp    ebx,DWORD PTR [rax-0xc]
    6501aad2:	jg     0x6501abbc
    6501aad8:	mov    DWORD PTR [rax-0x10],ebx
    6501aadb:	movsxd rcx,ebx
    6501aade:	mov    rax,QWORD PTR [rsi]
    6501aae1:	mov    WORD PTR [rax+rcx*2],0x0
    6501aae7:	lea    rdx,[rdi-0x18]
    6501aaeb:	mov    eax,r12d
    6501aaee:	lock xadd DWORD PTR [rdx+0x10],eax
    6501aaf3:	add    eax,0xffffffff
    6501aaf6:	test   eax,eax
    6501aaf8:	jg     0x6501ab03
    6501aafa:	mov    rcx,QWORD PTR [rdx]
    6501aafd:	mov    rax,QWORD PTR [rcx]
    6501ab00:	call   QWORD PTR [rax+0x8]
    6501ab03:	lea    rdx,[rbp+0x180]
    6501ab0a:	lea    rcx,[rbp+0xb8]
    6501ab11:	call   0x650044b0
    6501ab16:	nop
    6501ab17:	mov    r13,QWORD PTR [rax]
    6501ab1a:	movsxd r15,DWORD PTR [r13-0x10]
    6501ab1e:	mov    rax,QWORD PTR [rsi]
    6501ab21:	mov    rbx,r13
    6501ab24:	sub    rbx,rax
    6501ab27:	sar    rbx,1
    6501ab2a:	mov    r14d,DWORD PTR [rax-0x10]
    6501ab2e:	lea    edi,[r14+r15*1]
    6501ab32:	mov    ecx,0x1
    6501ab37:	sub    ecx,DWORD PTR [rax-0x8]
    6501ab3a:	mov    eax,DWORD PTR [rax-0xc]
    6501ab3d:	sub    eax,edi
    6501ab3f:	or     eax,ecx
    6501ab41:	jge    0x6501ab4d
    6501ab43:	mov    edx,edi
    6501ab45:	mov    rcx,rsi
    6501ab48:	call   0x65002640
    6501ab4d:	mov    rax,QWORD PTR [rsi]
    6501ab50:	cmp    rbx,r14
    6501ab53:	ja     0x6501ab59
    6501ab55:	lea    r13,[rax+rbx*2]
    6501ab59:	mov    rdx,r15
    6501ab5c:	add    rdx,rdx
    6501ab5f:	lea    rcx,[rax+r14*2]
    6501ab63:	mov    r9,rdx
    6501ab66:	mov    r8,r13
    6501ab69:	call   0x6501d7b0
    6501ab6e:	test   edi,edi
    6501ab70:	js     0x6501abb1
    6501ab72:	mov    rax,QWORD PTR [rsi]
    6501ab75:	cmp    edi,DWORD PTR [rax-0xc]
    6501ab78:	jg     0x6501abb1
    6501ab7a:	mov    DWORD PTR [rax-0x10],edi
    6501ab7d:	movsxd rcx,edi
    6501ab80:	mov    rax,QWORD PTR [rsi]
    6501ab83:	mov    WORD PTR [rax+rcx*2],0x0
    6501ab89:	mov    rdx,QWORD PTR [rbp+0xb8]
    6501ab90:	add    rdx,0xffffffffffffffe8
    6501ab94:	mov    eax,r12d
    6501ab97:	lock xadd DWORD PTR [rdx+0x10],eax
    6501ab9c:	add    eax,0xffffffff
    6501ab9f:	test   eax,eax
    6501aba1:	jg     0x6501abc7
    6501aba3:	mov    rcx,QWORD PTR [rdx]
    6501aba6:	mov    rax,QWORD PTR [rcx]
    6501aba9:	call   QWORD PTR [rax+0x8]
    6501abac:	xor    r15d,r15d
    6501abaf:	jmp    0x6501abca
    6501abb1:	mov    ecx,0x80070057
    6501abb6:	call   0x65001050
    6501abbb:	nop
    6501abbc:	mov    ecx,0x80070057
    6501abc1:	call   0x65001050
    6501abc6:	nop
    6501abc7:	xor    r15d,r15d
    6501abca:	lea    r8,[rip+0x1a197]        # 0x65034d68
    6501abd1:	mov    edx,0x7
    6501abd6:	lea    rcx,[rip+0x1a183]        # 0x65034d60
    6501abdd:	call   0x6500bcb0
    6501abe2:	mov    rdx,rax
    6501abe5:	mov    rcx,rsi
    6501abe8:	call   0x65003ab0
    6501abed:	call   0x6501a6c0
    6501abf2:	test   al,al
    6501abf4:	je     0x6501ac19
    6501abf6:	lea    r8,[rip+0x1a123]        # 0x65034d20
    6501abfd:	mov    edx,0x6
    6501ac02:	lea    rcx,[rip+0x1a10b]        # 0x65034d14
    6501ac09:	call   0x6500bcb0
    6501ac0e:	mov    rdx,rax
    6501ac11:	mov    rcx,rsi
    6501ac14:	call   0x65003ab0
    6501ac19:	lea    rcx,[rip+0x28480]        # 0x650430a0
    6501ac20:	mov    rax,QWORD PTR [rip+0x28479]        # 0x650430a0
    6501ac27:	call   QWORD PTR [rax+0x18]
    6501ac2a:	add    rax,0x18
    6501ac2e:	mov    QWORD PTR [rbp+0x68],rax
    6501ac32:	lea    rcx,[rip+0x28467]        # 0x650430a0
    6501ac39:	mov    rax,QWORD PTR [rip+0x28460]        # 0x650430a0
    6501ac40:	call   QWORD PTR [rax+0x18]
    6501ac43:	add    rax,0x18
    6501ac47:	mov    QWORD PTR [rbp+0xb0],rax
    6501ac4e:	lea    rcx,[rip+0x2844b]        # 0x650430a0
    6501ac55:	mov    rax,QWORD PTR [rip+0x28444]        # 0x650430a0
    6501ac5c:	call   QWORD PTR [rax+0x18]
    6501ac5f:	add    rax,0x18
    6501ac63:	mov    QWORD PTR [rbp+0x78],rax
    6501ac67:	mov    QWORD PTR [rbp+0xa0],r15
    6501ac6e:	lea    r8,[rbp+0xa0]
    6501ac75:	lea    rdx,[rbp+0x78]
    6501ac79:	lea    rcx,[rbp+0x68]
    6501ac7d:	call   0x65013090
    6501ac82:	test   al,al
    6501ac84:	je     0x6501b0c1
    6501ac8a:	lea    rdx,[rbp+0x78]
    6501ac8e:	lea    rcx,[rbp+0xa8]
    6501ac95:	call   0x65004ac0
    6501ac9a:	mov    rbx,rax
    6501ac9d:	lea    r8,[rip+0x1a034]        # 0x65034cd8
    6501aca4:	mov    edx,0x5
    6501aca9:	lea    rcx,[rip+0x1a020]        # 0x65034cd0
    6501acb0:	call   0x6500bcb0
    6501acb5:	mov    rdi,rax
    6501acb8:	lea    rcx,[rip+0x283e1]        # 0x650430a0
    6501acbf:	mov    rdx,QWORD PTR [rip+0x283da]        # 0x650430a0
    6501acc6:	call   QWORD PTR [rdx+0x18]
    6501acc9:	add    rax,0x18
    6501accd:	mov    QWORD PTR [rbp+0x30],rax
    6501acd1:	test   rdi,rdi
    6501acd4:	je     0x6501ad01
    6501acd6:	test   rdi,0xffffffffffff0000
    6501acdd:	jne    0x6501ad01
    6501acdf:	movzx  edi,di
    6501ace2:	xor    edx,edx
    6501ace4:	mov    ecx,edi
    6501ace6:	call   0x650026f0
    6501aceb:	test   rax,rax
    6501acee:	je     0x6501ad0e
    6501acf0:	mov    r8d,edi
    6501acf3:	mov    rdx,rax
    6501acf6:	lea    rcx,[rbp+0x30]
    6501acfa:	call   0x65003e00
    6501acff:	jmp    0x6501ad0e
    6501ad01:	mov    rdx,rdi
    6501ad04:	lea    rcx,[rbp+0x30]
    6501ad08:	call   0x65003cc0
    6501ad0d:	nop
    6501ad0e:	mov    r8,rbx
    6501ad11:	lea    rdx,[rbp+0x30]
    6501ad15:	lea    rcx,[rbp+0x100]
    6501ad1c:	call   0x65018720
    6501ad21:	nop
    6501ad22:	mov    r13,QWORD PTR [rax]
    6501ad25:	movsxd r15,DWORD PTR [r13-0x10]
    6501ad29:	mov    rax,QWORD PTR [rsi]
    6501ad2c:	mov    rbx,r13
    6501ad2f:	sub    rbx,rax
    6501ad32:	sar    rbx,1
    6501ad35:	mov    r14d,DWORD PTR [rax-0x10]
    6501ad39:	lea    edi,[r14+r15*1]
    6501ad3d:	mov    ecx,0x1
    6501ad42:	sub    ecx,DWORD PTR [rax-0x8]
    6501ad45:	mov    eax,DWORD PTR [rax-0xc]
    6501ad48:	sub    eax,edi
    6501ad4a:	or     eax,ecx
    6501ad4c:	jge    0x6501ad58
    6501ad4e:	mov    edx,edi
    6501ad50:	mov    rcx,rsi
    6501ad53:	call   0x65002640
    6501ad58:	mov    rax,QWORD PTR [rsi]
    6501ad5b:	cmp    rbx,r14
    6501ad5e:	ja     0x6501ad64
    6501ad60:	lea    r13,[rax+rbx*2]
    6501ad64:	mov    rdx,r15
    6501ad67:	add    rdx,rdx
    6501ad6a:	lea    rcx,[rax+r14*2]
    6501ad6e:	mov    r9,rdx
    6501ad71:	mov    r8,r13
    6501ad74:	call   0x6501d7b0
    6501ad79:	test   edi,edi
    6501ad7b:	js     0x6501b0b6
    6501ad81:	mov    rax,QWORD PTR [rsi]
    6501ad84:	cmp    edi,DWORD PTR [rax-0xc]
    6501ad87:	jg     0x6501b0b6
    6501ad8d:	mov    DWORD PTR [rax-0x10],edi
    6501ad90:	movsxd rcx,edi
    6501ad93:	mov    rax,QWORD PTR [rsi]
    6501ad96:	mov    WORD PTR [rax+rcx*2],0x0
    6501ad9c:	mov    rdx,QWORD PTR [rbp+0x100]
    6501ada3:	add    rdx,0xffffffffffffffe8
    6501ada7:	mov    eax,r12d
    6501adaa:	lock xadd DWORD PTR [rdx+0x10],eax
    6501adaf:	add    eax,0xffffffff
    6501adb2:	test   eax,eax
    6501adb4:	jg     0x6501adc0
    6501adb6:	mov    rcx,QWORD PTR [rdx]
    6501adb9:	mov    rax,QWORD PTR [rcx]
    6501adbc:	call   QWORD PTR [rax+0x8]
    6501adbf:	nop
    6501adc0:	mov    rdx,QWORD PTR [rbp+0x30]
    6501adc4:	add    rdx,0xffffffffffffffe8
    6501adc8:	mov    eax,r12d
    6501adcb:	lock xadd DWORD PTR [rdx+0x10],eax
    6501add0:	add    eax,0xffffffff
    6501add3:	test   eax,eax
    6501add5:	jg     0x6501ade1
    6501add7:	mov    rcx,QWORD PTR [rdx]
    6501adda:	mov    rax,QWORD PTR [rcx]
    6501addd:	call   QWORD PTR [rax+0x8]
    6501ade0:	nop
    6501ade1:	mov    rdx,QWORD PTR [rbp+0xa8]
    6501ade8:	add    rdx,0xffffffffffffffe8
    6501adec:	mov    eax,r12d
    6501adef:	lock xadd DWORD PTR [rdx+0x10],eax
    6501adf4:	add    eax,0xffffffff
    6501adf7:	test   eax,eax
    6501adf9:	jg     0x6501ae04
    6501adfb:	mov    rcx,QWORD PTR [rdx]
    6501adfe:	mov    rax,QWORD PTR [rcx]
    6501ae01:	call   QWORD PTR [rax+0x8]
    6501ae04:	lea    rdx,[rbp+0x68]
    6501ae08:	lea    rcx,[rbp+0xc8]
    6501ae0f:	call   0x65004ac0
    6501ae14:	mov    rbx,rax
    6501ae17:	lea    r8,[rip+0x19e8a]        # 0x65034ca8
    6501ae1e:	mov    edx,0x7
    6501ae23:	lea    rcx,[rip+0x19e76]        # 0x65034ca0
    6501ae2a:	call   0x6500bcb0
    6501ae2f:	mov    rdi,rax
    6501ae32:	lea    rcx,[rip+0x28267]        # 0x650430a0
    6501ae39:	mov    rdx,QWORD PTR [rip+0x28260]        # 0x650430a0
    6501ae40:	call   QWORD PTR [rdx+0x18]
    6501ae43:	add    rax,0x18
    6501ae47:	mov    QWORD PTR [rbp+0x50],rax
    6501ae4b:	test   rdi,rdi
    6501ae4e:	je     0x6501ae7b
    6501ae50:	test   rdi,0xffffffffffff0000
    6501ae57:	jne    0x6501ae7b
    6501ae59:	movzx  edi,di
    6501ae5c:	xor    edx,edx
    6501ae5e:	mov    ecx,edi
    6501ae60:	call   0x650026f0
    6501ae65:	test   rax,rax
    6501ae68:	je     0x6501ae88
    6501ae6a:	mov    r8d,edi
    6501ae6d:	mov    rdx,rax
    6501ae70:	lea    rcx,[rbp+0x50]
    6501ae74:	call   0x65003e00
    6501ae79:	jmp    0x6501ae88
    6501ae7b:	mov    rdx,rdi
    6501ae7e:	lea    rcx,[rbp+0x50]
    6501ae82:	call   0x65003cc0
    6501ae87:	nop
    6501ae88:	mov    r8,rbx
    6501ae8b:	lea    rdx,[rbp+0x50]
    6501ae8f:	lea    rcx,[rbp+0xe8]
    6501ae96:	call   0x65018720
    6501ae9b:	nop
    6501ae9c:	mov    r13,QWORD PTR [rax]
    6501ae9f:	movsxd r15,DWORD PTR [r13-0x10]
    6501aea3:	mov    rax,QWORD PTR [rsi]
    6501aea6:	mov    rbx,r13
    6501aea9:	sub    rbx,rax
    6501aeac:	sar    rbx,1
    6501aeaf:	mov    r14d,DWORD PTR [rax-0x10]
    6501aeb3:	lea    edi,[r14+r15*1]
    6501aeb7:	mov    ecx,0x1
    6501aebc:	sub    ecx,DWORD PTR [rax-0x8]
    6501aebf:	mov    eax,DWORD PTR [rax-0xc]
    6501aec2:	sub    eax,edi
    6501aec4:	or     eax,ecx
    6501aec6:	jge    0x6501aed2
    6501aec8:	mov    edx,edi
    6501aeca:	mov    rcx,rsi
    6501aecd:	call   0x65002640
    6501aed2:	mov    rax,QWORD PTR [rsi]
    6501aed5:	cmp    rbx,r14
    6501aed8:	ja     0x6501aede
    6501aeda:	lea    r13,[rax+rbx*2]
    6501aede:	mov    rdx,r15
    6501aee1:	add    rdx,rdx
    6501aee4:	lea    rcx,[rax+r14*2]
    6501aee8:	mov    r9,rdx
    6501aeeb:	mov    r8,r13
    6501aeee:	call   0x6501d7b0
    6501aef3:	test   edi,edi
    6501aef5:	js     0x6501b0ab
    6501aefb:	mov    rax,QWORD PTR [rsi]
    6501aefe:	cmp    edi,DWORD PTR [rax-0xc]
    6501af01:	jg     0x6501b0ab
    6501af07:	mov    DWORD PTR [rax-0x10],edi
    6501af0a:	movsxd rcx,edi
    6501af0d:	mov    rax,QWORD PTR [rsi]
    6501af10:	mov    WORD PTR [rax+rcx*2],0x0
    6501af16:	mov    rdx,QWORD PTR [rbp+0xe8]
    6501af1d:	add    rdx,0xffffffffffffffe8
    6501af21:	mov    eax,r12d
    6501af24:	lock xadd DWORD PTR [rdx+0x10],eax
    6501af29:	add    eax,0xffffffff
    6501af2c:	test   eax,eax
    6501af2e:	jg     0x6501af3a
    6501af30:	mov    rcx,QWORD PTR [rdx]
    6501af33:	mov    rax,QWORD PTR [rcx]
    6501af36:	call   QWORD PTR [rax+0x8]
    6501af39:	nop
    6501af3a:	mov    rdx,QWORD PTR [rbp+0x50]
    6501af3e:	add    rdx,0xffffffffffffffe8
    6501af42:	mov    eax,r12d
    6501af45:	lock xadd DWORD PTR [rdx+0x10],eax
    6501af4a:	add    eax,0xffffffff
    6501af4d:	test   eax,eax
    6501af4f:	jg     0x6501af5b
    6501af51:	mov    rcx,QWORD PTR [rdx]
    6501af54:	mov    rax,QWORD PTR [rcx]
    6501af57:	call   QWORD PTR [rax+0x8]
    6501af5a:	nop
    6501af5b:	mov    rdx,QWORD PTR [rbp+0xc8]
    6501af62:	add    rdx,0xffffffffffffffe8
    6501af66:	mov    eax,r12d
    6501af69:	lock xadd DWORD PTR [rdx+0x10],eax
    6501af6e:	add    eax,0xffffffff
    6501af71:	test   eax,eax
    6501af73:	jg     0x6501af7e
    6501af75:	mov    rcx,QWORD PTR [rdx]
    6501af78:	mov    rax,QWORD PTR [rcx]
    6501af7b:	call   QWORD PTR [rax+0x8]
    6501af7e:	lea    rcx,[rip+0x2811b]        # 0x650430a0
    6501af85:	mov    rax,QWORD PTR [rip+0x28114]        # 0x650430a0
    6501af8c:	call   QWORD PTR [rax+0x18]
    6501af8f:	add    rax,0x18
    6501af93:	mov    QWORD PTR [rbp+0x48],rax
    6501af97:	lea    r8,[rip+0x19cc2]        # 0x65034c60
    6501af9e:	mov    edx,0xc
    6501afa3:	lea    rcx,[rip+0x19c96]        # 0x65034c40
    6501afaa:	call   0x6500c660
    6501afaf:	mov    rdx,rax
    6501afb2:	mov    r8,QWORD PTR [rbp+0xa0]
    6501afb9:	lea    rcx,[rbp+0x48]
    6501afbd:	call   0x65002560
    6501afc2:	call   QWORD PTR [rip+0x280d0]        # 0x65043098
    6501afc8:	mov    r13d,eax
    6501afcb:	mov    rdi,QWORD PTR [rbp+0x48]
    6501afcf:	cmp    DWORD PTR [rdi-0x8],0x1
    6501afd3:	jle    0x6501afe5
    6501afd5:	mov    edx,DWORD PTR [rdi-0x10]
    6501afd8:	lea    rcx,[rbp+0x48]
    6501afdc:	call   0x65002130
    6501afe1:	mov    rdi,QWORD PTR [rbp+0x48]
    6501afe5:	test   rdi,rdi
    6501afe8:	jne    0x6501aff5
    6501afea:	xor    r15d,r15d
    6501afed:	mov    rbx,r15
    6501aff0:	jmp    0x6501b081
    6501aff5:	mov    rcx,rdi
    6501aff8:	call   QWORD PTR [rip+0x19082]        # 0x65034080
    6501affe:	lea    r9d,[rax+0x1]
    6501b002:	cmp    r9d,0x3fffffff
    6501b009:	jle    0x6501b013
    6501b00b:	xor    r15d,r15d
    6501b00e:	mov    rbx,r15
    6501b011:	jmp    0x6501b081
    6501b013:	movsxd rax,r9d
    6501b016:	add    rax,rax
    6501b019:	lea    rcx,[rax+0xf]
    6501b01d:	cmp    rcx,rax
    6501b020:	ja     0x6501b02c
    6501b022:	movabs rcx,0xffffffffffffff0
    6501b02c:	and    rcx,0xfffffffffffffff0
    6501b030:	mov    rax,rcx
    6501b033:	call   0x65033230
    6501b038:	sub    rsp,rcx
    6501b03b:	lea    rbx,[rsp+0x40]
    6501b040:	test   rbx,rbx
    6501b043:	je     0x6501b07b
    6501b045:	mov    BYTE PTR [rbx],0x0
    6501b048:	lea    eax,[r9+r9*1]
    6501b04c:	xor    r15d,r15d
    6501b04f:	mov    QWORD PTR [rsp+0x38],r15
    6501b054:	mov    QWORD PTR [rsp+0x30],r15
    6501b059:	mov    DWORD PTR [rsp+0x28],eax
    6501b05d:	mov    QWORD PTR [rsp+0x20],rbx
    6501b062:	mov    r9d,r12d
    6501b065:	mov    r8,rdi
    6501b068:	xor    edx,edx
    6501b06a:	mov    ecx,r13d
    6501b06d:	call   QWORD PTR [rip+0x18fbd]        # 0x65034030
    6501b073:	test   eax,eax
    6501b075:	cmove  rbx,r15
    6501b079:	jmp    0x6501b081
    6501b07b:	xor    r15d,r15d
    6501b07e:	mov    rbx,r15
    6501b081:	mov    rdx,rbx
    6501b084:	mov    rcx,rsi
    6501b087:	call   0x65003ab0
    6501b08c:	nop
    6501b08d:	lea    rdx,[rdi-0x18]
    6501b091:	mov    eax,r12d
    6501b094:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b099:	add    eax,0xffffffff
    6501b09c:	test   eax,eax
    6501b09e:	jg     0x6501b0c1
    6501b0a0:	mov    rcx,QWORD PTR [rdx]
    6501b0a3:	mov    rax,QWORD PTR [rcx]
    6501b0a6:	call   QWORD PTR [rax+0x8]
    6501b0a9:	jmp    0x6501b0c1
    6501b0ab:	mov    ecx,0x80070057
    6501b0b0:	call   0x65001050
    6501b0b5:	nop
    6501b0b6:	mov    ecx,0x80070057
    6501b0bb:	call   0x65001050
    6501b0c0:	nop
    6501b0c1:	mov    QWORD PTR [rbp+0x88],r15
    6501b0c8:	mov    QWORD PTR [rbp+0x90],r15
    6501b0cf:	mov    QWORD PTR [rbp+0x98],r15
    6501b0d6:	lea    rcx,[rbp+0x80]
    6501b0dd:	call   0x65013610
    6501b0e2:	mov    rbx,r15
    6501b0e5:	mov    QWORD PTR [rbp+0x60],rbx
    6501b0e9:	mov    r14,r15
    6501b0ec:	movabs rdx,0x6666666666666667
    6501b0f6:	data16 data16 xchg ax,ax
    6501b0fa:	data16 xchg ax,ax
    6501b0fd:	data16 xchg ax,ax
    6501b100:	mov    rax,QWORD PTR [rbp+0x88]
    6501b107:	test   rax,rax
    6501b10a:	jne    0x6501b111
    6501b10c:	mov    rdx,r15
    6501b10f:	jmp    0x6501b12f
    6501b111:	mov    rcx,QWORD PTR [rbp+0x90]
    6501b118:	sub    rcx,rax
    6501b11b:	mov    rax,rdx
    6501b11e:	imul   rcx
    6501b121:	sar    rdx,0x4
    6501b125:	mov    rax,rdx
    6501b128:	shr    rax,0x3f
    6501b12c:	add    rdx,rax
    6501b12f:	cmp    rbx,rdx
    6501b132:	je     0x6501b3c0
    6501b138:	lea    r8,[rip+0x19ad1]        # 0x65034c10
    6501b13f:	mov    edx,0x5
    6501b144:	lea    rcx,[rip+0x19ab9]        # 0x65034c04
    6501b14b:	call   0x6500bcb0
    6501b150:	mov    r13,rax
    6501b153:	lea    rcx,[rip+0x27f46]        # 0x650430a0
    6501b15a:	mov    rdx,QWORD PTR [rip+0x27f3f]        # 0x650430a0
    6501b161:	call   QWORD PTR [rdx+0x18]
    6501b164:	lea    rdi,[rax+0x18]
    6501b168:	mov    QWORD PTR [rbp+0x28],rdi
    6501b16c:	test   r13,r13
    6501b16f:	je     0x6501b229
    6501b175:	test   r13,0xffffffffffff0000
    6501b17c:	jne    0x6501b1ac
    6501b17e:	movzx  ebx,r13w
    6501b182:	xor    edx,edx
    6501b184:	mov    ecx,ebx
    6501b186:	call   0x650026f0
    6501b18b:	test   rax,rax
    6501b18e:	je     0x6501b27a
    6501b194:	mov    r8d,ebx
    6501b197:	mov    rdx,rax
    6501b19a:	lea    rcx,[rbp+0x28]
    6501b19e:	call   0x65003e00
    6501b1a3:	mov    rdi,QWORD PTR [rbp+0x28]
    6501b1a7:	jmp    0x6501b27a
    6501b1ac:	call   QWORD PTR [rip+0x27ee6]        # 0x65043098
    6501b1b2:	mov    DWORD PTR [rsp+0x28],r15d
    6501b1b7:	mov    QWORD PTR [rsp+0x20],r15
    6501b1bc:	mov    r9d,r12d
    6501b1bf:	mov    r8,r13
    6501b1c2:	xor    edx,edx
    6501b1c4:	mov    ecx,eax
    6501b1c6:	call   QWORD PTR [rip+0x18e5c]        # 0x65034028
    6501b1cc:	lea    ebx,[rax-0x1]
    6501b1cf:	test   ebx,ebx
    6501b1d1:	jle    0x6501b229
    6501b1d3:	mov    edx,0x1
    6501b1d8:	sub    edx,DWORD PTR [rdi-0x8]
    6501b1db:	mov    ecx,DWORD PTR [rdi-0xc]
    6501b1de:	sub    ecx,ebx
    6501b1e0:	or     ecx,edx
    6501b1e2:	jge    0x6501b1f3
    6501b1e4:	mov    edx,ebx
    6501b1e6:	lea    rcx,[rbp+0x28]
    6501b1ea:	call   0x65002640
    6501b1ef:	mov    rdi,QWORD PTR [rbp+0x28]
    6501b1f3:	call   QWORD PTR [rip+0x27e9f]        # 0x65043098
    6501b1f9:	mov    ecx,eax
    6501b1fb:	mov    DWORD PTR [rsp+0x28],ebx
    6501b1ff:	mov    QWORD PTR [rsp+0x20],rdi
    6501b204:	mov    r9d,r12d
    6501b207:	mov    r8,r13
    6501b20a:	xor    edx,edx
    6501b20c:	call   QWORD PTR [rip+0x18e16]        # 0x65034028
    6501b212:	cmp    ebx,DWORD PTR [rdi-0xc]
    6501b215:	jg     0x6501b39f
    6501b21b:	mov    DWORD PTR [rdi-0x10],ebx
    6501b21e:	movsxd rax,ebx
    6501b221:	mov    WORD PTR [rdi+rax*2],0x0
    6501b227:	jmp    0x6501b27a
    6501b229:	lea    rdx,[rdi-0x18]
    6501b22d:	mov    rbx,QWORD PTR [rdx]
    6501b230:	cmp    DWORD PTR [rdx+0x8],0x0
    6501b234:	je     0x6501b27a
    6501b236:	cmp    DWORD PTR [rdx+0x10],0x0
    6501b23a:	jge    0x6501b251
    6501b23c:	cmp    DWORD PTR [rdi-0xc],0x0
    6501b240:	jl     0x6501b3aa
    6501b246:	mov    DWORD PTR [rdi-0x10],r15d
    6501b24a:	mov    WORD PTR [rdi],0x0
    6501b24f:	jmp    0x6501b27a
    6501b251:	mov    eax,r12d
    6501b254:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b259:	add    eax,0xffffffff
    6501b25c:	test   eax,eax
    6501b25e:	jg     0x6501b269
    6501b260:	mov    rcx,QWORD PTR [rdx]
    6501b263:	mov    rax,QWORD PTR [rcx]
    6501b266:	call   QWORD PTR [rax+0x8]
    6501b269:	mov    rax,QWORD PTR [rbx]
    6501b26c:	mov    rcx,rbx
    6501b26f:	call   QWORD PTR [rax+0x18]
    6501b272:	lea    rdi,[rax+0x18]
    6501b276:	mov    QWORD PTR [rbp+0x28],rdi
    6501b27a:	mov    edx,DWORD PTR [rdi-0x10]
    6501b27d:	mov    DWORD PTR [rbp+0x4],edx
    6501b280:	mov    r15,rdi
    6501b283:	mov    rax,QWORD PTR [rsi]
    6501b286:	mov    r13,rdi
    6501b289:	sub    r13,rax
    6501b28c:	sar    r13,1
    6501b28f:	mov    ecx,DWORD PTR [rax-0x10]
    6501b292:	mov    DWORD PTR [rbp+0x0],ecx
    6501b295:	lea    ebx,[rcx+rdx*1]
    6501b298:	mov    ecx,0x1
    6501b29d:	sub    ecx,DWORD PTR [rax-0x8]
    6501b2a0:	mov    eax,DWORD PTR [rax-0xc]
    6501b2a3:	sub    eax,ebx
    6501b2a5:	or     eax,ecx
    6501b2a7:	jge    0x6501b2b6
    6501b2a9:	mov    edx,ebx
    6501b2ab:	mov    rcx,rsi
    6501b2ae:	call   0x65002640
    6501b2b3:	mov    edx,DWORD PTR [rbp+0x4]
    6501b2b6:	mov    rax,QWORD PTR [rsi]
    6501b2b9:	mov    ecx,DWORD PTR [rbp+0x0]
    6501b2bc:	cmp    r13,rcx
    6501b2bf:	ja     0x6501b2c5
    6501b2c1:	lea    r15,[rax+r13*2]
    6501b2c5:	movsxd rdx,edx
    6501b2c8:	add    rdx,rdx
    6501b2cb:	lea    rcx,[rax+rcx*2]
    6501b2cf:	mov    r9,rdx
    6501b2d2:	mov    r8,r15
    6501b2d5:	call   0x6501d7b0
    6501b2da:	test   ebx,ebx
    6501b2dc:	js     0x6501b3b5
    6501b2e2:	mov    rax,QWORD PTR [rsi]
    6501b2e5:	cmp    ebx,DWORD PTR [rax-0xc]
    6501b2e8:	jg     0x6501b3b5
    6501b2ee:	mov    DWORD PTR [rax-0x10],ebx
    6501b2f1:	movsxd rcx,ebx
    6501b2f4:	mov    rax,QWORD PTR [rsi]
    6501b2f7:	mov    WORD PTR [rax+rcx*2],0x0
    6501b2fd:	lea    rdx,[rdi-0x18]
    6501b301:	mov    eax,r12d
    6501b304:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b309:	add    eax,0xffffffff
    6501b30c:	test   eax,eax
    6501b30e:	jg     0x6501b319
    6501b310:	mov    rcx,QWORD PTR [rdx]
    6501b313:	mov    rax,QWORD PTR [rcx]
    6501b316:	call   QWORD PTR [rax+0x8]
    6501b319:	mov    rdi,QWORD PTR [rbp+0x88]
    6501b320:	test   rdi,rdi
    6501b323:	je     0x6501b355
    6501b325:	mov    rcx,QWORD PTR [rbp+0x90]
    6501b32c:	sub    rcx,rdi
    6501b32f:	movabs rax,0x6666666666666667
    6501b339:	imul   rcx
    6501b33c:	sar    rdx,0x4
    6501b340:	mov    rax,rdx
    6501b343:	shr    rax,0x3f
    6501b347:	add    rdx,rax
    6501b34a:	mov    rbx,QWORD PTR [rbp+0x60]
    6501b34e:	cmp    rbx,rdx
    6501b351:	jb     0x6501b365
    6501b353:	jmp    0x6501b359
    6501b355:	mov    rbx,QWORD PTR [rbp+0x60]
    6501b359:	call   0x6501dad0
    6501b35e:	mov    rdi,QWORD PTR [rbp+0x88]
    6501b365:	cmp    QWORD PTR [r14+rdi*1+0x20],0x10
    6501b36b:	jb     0x6501b374
    6501b36d:	mov    rdx,QWORD PTR [r14+rdi*1+0x8]
    6501b372:	jmp    0x6501b379
    6501b374:	lea    rdx,[r14+rdi*1+0x8]
    6501b379:	mov    rcx,rsi
    6501b37c:	call   0x65003ab0
    6501b381:	add    rbx,0x1
    6501b385:	mov    QWORD PTR [rbp+0x60],rbx
    6501b389:	add    r14,0x28
    6501b38d:	xor    r15d,r15d
    6501b390:	movabs rdx,0x6666666666666667
    6501b39a:	jmp    0x6501b100
    6501b39f:	mov    ecx,0x80070057
    6501b3a4:	call   0x65001050
    6501b3a9:	int3   
    6501b3aa:	mov    ecx,0x80070057
    6501b3af:	call   0x65001050
    6501b3b4:	nop
    6501b3b5:	mov    ecx,0x80070057
    6501b3ba:	call   0x65001050
    6501b3bf:	nop
    6501b3c0:	call   QWORD PTR [rip+0x27cd2]        # 0x65043098
    6501b3c6:	mov    DWORD PTR [rbp+0x4],eax
    6501b3c9:	xor    edx,edx
    6501b3cb:	mov    r8d,0x110
    6501b3d1:	lea    rcx,[rbp+0x194]
    6501b3d8:	call   0x6501efa0
    6501b3dd:	mov    DWORD PTR [rbp+0x190],0x114
    6501b3e7:	lea    rcx,[rip+0x27cb2]        # 0x650430a0
    6501b3ee:	mov    rdx,QWORD PTR [rip+0x27cab]        # 0x650430a0
    6501b3f5:	call   QWORD PTR [rdx+0x18]
    6501b3f8:	lea    rbx,[rax+0x18]
    6501b3fc:	mov    QWORD PTR [rbp+0x8],rbx
    6501b400:	lea    rcx,[rbp+0x190]
    6501b407:	call   QWORD PTR [rip+0x18ca3]        # 0x650340b0
    6501b40d:	test   eax,eax
    6501b40f:	je     0x6501b44c
    6501b411:	lea    r8,[rip+0x197b8]        # 0x65034bd0
    6501b418:	mov    edx,0x12
    6501b41d:	lea    rcx,[rip+0x19784]        # 0x65034ba8
    6501b424:	call   0x6500c660
    6501b429:	mov    rdx,rax
    6501b42c:	mov    r9d,DWORD PTR [rbp+0x198]
    6501b433:	mov    r8d,DWORD PTR [rbp+0x194]
    6501b43a:	lea    rcx,[rbp+0x8]
    6501b43e:	call   0x65002560
    6501b443:	mov    rbx,QWORD PTR [rbp+0x8]
    6501b447:	jmp    0x6501b578
    6501b44c:	lea    r8,[rip+0x1971d]        # 0x65034b70
    6501b453:	mov    edx,0xc
    6501b458:	lea    rcx,[rip+0x196f1]        # 0x65034b50
    6501b45f:	call   0x6500c660
    6501b464:	mov    r15,rax
    6501b467:	test   rax,rax
    6501b46a:	je     0x6501b516
    6501b470:	xor    eax,eax
    6501b472:	mov    rcx,r12
    6501b475:	mov    rdi,r15
    6501b478:	repnz scas ax,WORD PTR es:[rdi]
    6501b47b:	not    rcx
    6501b47e:	sub    rcx,0x1
    6501b482:	mov    rdi,rcx
    6501b485:	test   ecx,ecx
    6501b487:	je     0x6501b516
    6501b48d:	mov    r13d,DWORD PTR [rbx-0x10]
    6501b491:	mov    r14,r15
    6501b494:	sub    r14,rbx
    6501b497:	sar    r14,1
    6501b49a:	mov    edx,0x1
    6501b49f:	sub    edx,DWORD PTR [rbx-0x8]
    6501b4a2:	mov    eax,DWORD PTR [rbx-0xc]
    6501b4a5:	sub    eax,ecx
    6501b4a7:	or     eax,edx
    6501b4a9:	jge    0x6501b4ba
    6501b4ab:	mov    edx,ecx
    6501b4ad:	lea    rcx,[rbp+0x8]
    6501b4b1:	call   0x65002640
    6501b4b6:	mov    rbx,QWORD PTR [rbp+0x8]
    6501b4ba:	cmp    r14,r13
    6501b4bd:	ja     0x6501b4da
    6501b4bf:	movsxd rax,edi
    6501b4c2:	lea    r13,[rax+rax*1]
    6501b4c6:	lea    r8,[rbx+r14*2]
    6501b4ca:	mov    r9,r13
    6501b4cd:	mov    rdx,r13
    6501b4d0:	mov    rcx,rbx
    6501b4d3:	call   0x6501d880
    6501b4d8:	jmp    0x6501b4f2
    6501b4da:	movsxd rax,edi
    6501b4dd:	lea    r13,[rax+rax*1]
    6501b4e1:	mov    r9,r13
    6501b4e4:	mov    r8,r15
    6501b4e7:	mov    rdx,r13
    6501b4ea:	mov    rcx,rbx
    6501b4ed:	call   0x6501d7b0
    6501b4f2:	test   edi,edi
    6501b4f4:	js     0x6501b50b
    6501b4f6:	cmp    edi,DWORD PTR [rbx-0xc]
    6501b4f9:	jg     0x6501b50b
    6501b4fb:	mov    DWORD PTR [rbx-0x10],edi
    6501b4fe:	mov    WORD PTR [r13+rbx*1+0x0],0x0
    6501b506:	xor    r15d,r15d
    6501b509:	jmp    0x6501b578
    6501b50b:	mov    ecx,0x80070057
    6501b510:	call   0x65001050
    6501b515:	int3   
    6501b516:	lea    rdx,[rbx-0x18]
    6501b51a:	mov    rdi,QWORD PTR [rdx]
    6501b51d:	cmp    DWORD PTR [rdx+0x8],0x0
    6501b521:	je     0x6501b575
    6501b523:	cmp    DWORD PTR [rdx+0x10],0x0
    6501b527:	jge    0x6501b547
    6501b529:	cmp    DWORD PTR [rbx-0xc],0x0
    6501b52d:	jge    0x6501b53a
    6501b52f:	mov    ecx,0x80070057
    6501b534:	call   0x65001050
    6501b539:	int3   
    6501b53a:	xor    r15d,r15d
    6501b53d:	mov    DWORD PTR [rbx-0x10],r15d
    6501b541:	mov    WORD PTR [rbx],r15w
    6501b545:	jmp    0x6501b578
    6501b547:	mov    eax,r12d
    6501b54a:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b54f:	add    eax,0xffffffff
    6501b552:	test   eax,eax
    6501b554:	jg     0x6501b55f
    6501b556:	mov    rcx,QWORD PTR [rdx]
    6501b559:	mov    rax,QWORD PTR [rcx]
    6501b55c:	call   QWORD PTR [rax+0x8]
    6501b55f:	mov    rax,QWORD PTR [rdi]
    6501b562:	mov    rcx,rdi
    6501b565:	call   QWORD PTR [rax+0x18]
    6501b568:	lea    rbx,[rax+0x18]
    6501b56c:	mov    QWORD PTR [rbp+0x8],rbx
    6501b570:	xor    r15d,r15d
    6501b573:	jmp    0x6501b578
    6501b575:	xor    r15d,r15d
    6501b578:	mov    DWORD PTR [rbp+0x140],r15d
    6501b57f:	xor    edx,edx
    6501b581:	lea    r8d,[rdx+0x2c]
    6501b585:	lea    rcx,[rbp+0x144]
    6501b58c:	call   0x6501efa0
    6501b591:	lea    rcx,[rbp+0x140]
    6501b598:	call   QWORD PTR [rip+0x18b92]        # 0x65034130
    6501b59e:	movzx  edx,WORD PTR [rbp+0x140]
    6501b5a5:	test   edx,edx
    6501b5a7:	je     0x6501b664
    6501b5ad:	cmp    edx,0x9
    6501b5b0:	jne    0x6501b70a
    6501b5b6:	lea    r8,[rip+0x19553]        # 0x65034b10
    6501b5bd:	mov    edx,0x4
    6501b5c2:	lea    rcx,[rip+0x19537]        # 0x65034b00
    6501b5c9:	call   0x6500c660
    6501b5ce:	mov    r14,rax
    6501b5d1:	test   rax,rax
    6501b5d4:	je     0x6501b5e8
    6501b5d6:	xor    eax,eax
    6501b5d8:	mov    rcx,r12
    6501b5db:	mov    rdi,r14
    6501b5de:	repnz scas ax,WORD PTR es:[rdi]
    6501b5e1:	not    rcx
    6501b5e4:	lea    r15,[rcx-0x1]
    6501b5e8:	mov    r13,r14
    6501b5eb:	sub    r13,rbx
    6501b5ee:	sar    r13,1
    6501b5f1:	mov    eax,DWORD PTR [rbx-0x10]
    6501b5f4:	mov    DWORD PTR [rbp+0x0],eax
    6501b5f7:	lea    edi,[rax+r15*1]
    6501b5fb:	mov    edx,0x1
    6501b600:	sub    edx,DWORD PTR [rbx-0x8]
    6501b603:	mov    eax,DWORD PTR [rbx-0xc]
    6501b606:	sub    eax,edi
    6501b608:	or     eax,edx
    6501b60a:	jge    0x6501b61b
    6501b60c:	mov    edx,edi
    6501b60e:	lea    rcx,[rbp+0x8]
    6501b612:	call   0x65002640
    6501b617:	mov    rbx,QWORD PTR [rbp+0x8]
    6501b61b:	mov    eax,DWORD PTR [rbp+0x0]
    6501b61e:	cmp    r13,rax
    6501b621:	ja     0x6501b627
    6501b623:	lea    r14,[rbx+r13*2]
    6501b627:	movsxd rdx,r15d
    6501b62a:	add    rdx,rdx
    6501b62d:	lea    rcx,[rbx+rax*2]
    6501b631:	mov    r9,rdx
    6501b634:	mov    r8,r14
    6501b637:	call   0x6501d7b0
    6501b63c:	test   edi,edi
    6501b63e:	js     0x6501b659
    6501b640:	cmp    edi,DWORD PTR [rbx-0xc]
    6501b643:	jg     0x6501b659
    6501b645:	mov    DWORD PTR [rbx-0x10],edi
    6501b648:	movsxd rax,edi
    6501b64b:	mov    WORD PTR [rbx+rax*2],0x0
    6501b651:	xor    r15d,r15d
    6501b654:	jmp    0x6501b70a
    6501b659:	mov    ecx,0x80070057
    6501b65e:	call   0x65001050
    6501b663:	int3   
    6501b664:	lea    r8,[rip+0x19455]        # 0x65034ac0
    6501b66b:	mov    edx,0x4
    6501b670:	lea    rcx,[rip+0x19439]        # 0x65034ab0
    6501b677:	call   0x6500c660
    6501b67c:	mov    r14,rax
    6501b67f:	test   rax,rax
    6501b682:	je     0x6501b696
    6501b684:	xor    eax,eax
    6501b686:	mov    rcx,r12
    6501b689:	mov    rdi,r14
    6501b68c:	repnz scas ax,WORD PTR es:[rdi]
    6501b68f:	not    rcx
    6501b692:	lea    r15,[rcx-0x1]
    6501b696:	mov    r13,r14
    6501b699:	sub    r13,rbx
    6501b69c:	sar    r13,1
    6501b69f:	mov    eax,DWORD PTR [rbx-0x10]
    6501b6a2:	mov    DWORD PTR [rbp+0x0],eax
    6501b6a5:	lea    edi,[rax+r15*1]
    6501b6a9:	mov    edx,0x1
    6501b6ae:	sub    edx,DWORD PTR [rbx-0x8]
    6501b6b1:	mov    eax,DWORD PTR [rbx-0xc]
    6501b6b4:	sub    eax,edi
    6501b6b6:	or     eax,edx
    6501b6b8:	jge    0x6501b6c9
    6501b6ba:	mov    edx,edi
    6501b6bc:	lea    rcx,[rbp+0x8]
    6501b6c0:	call   0x65002640
    6501b6c5:	mov    rbx,QWORD PTR [rbp+0x8]
    6501b6c9:	mov    eax,DWORD PTR [rbp+0x0]
    6501b6cc:	cmp    r13,rax
    6501b6cf:	ja     0x6501b6d5
    6501b6d1:	lea    r14,[rbx+r13*2]
    6501b6d5:	movsxd rdx,r15d
    6501b6d8:	add    rdx,rdx
    6501b6db:	lea    rcx,[rbx+rax*2]
    6501b6df:	mov    r9,rdx
    6501b6e2:	mov    r8,r14
    6501b6e5:	call   0x6501d7b0
    6501b6ea:	test   edi,edi
    6501b6ec:	js     0x6501c1c4
    6501b6f2:	cmp    edi,DWORD PTR [rbx-0xc]
    6501b6f5:	jg     0x6501c1c4
    6501b6fb:	mov    DWORD PTR [rbx-0x10],edi
    6501b6fe:	movsxd rax,edi
    6501b701:	mov    WORD PTR [rbx+rax*2],0x0
    6501b707:	xor    r15d,r15d
    6501b70a:	test   rbx,rbx
    6501b70d:	jne    0x6501b717
    6501b70f:	mov    rdi,r15
    6501b712:	jmp    0x6501b79a
    6501b717:	mov    rcx,rbx
    6501b71a:	call   QWORD PTR [rip+0x18960]        # 0x65034080
    6501b720:	lea    r9d,[rax+0x1]
    6501b724:	cmp    r9d,0x3fffffff
    6501b72b:	jle    0x6501b732
    6501b72d:	mov    rdi,r15
    6501b730:	jmp    0x6501b79a
    6501b732:	movsxd rax,r9d
    6501b735:	add    rax,rax
    6501b738:	lea    rcx,[rax+0xf]
    6501b73c:	cmp    rcx,rax
    6501b73f:	ja     0x6501b74b
    6501b741:	movabs rcx,0xffffffffffffff0
    6501b74b:	and    rcx,0xfffffffffffffff0
    6501b74f:	mov    rax,rcx
    6501b752:	call   0x65033230
    6501b757:	sub    rsp,rcx
    6501b75a:	lea    rdi,[rsp+0x40]
    6501b75f:	test   rdi,rdi
    6501b762:	je     0x6501b797
    6501b764:	mov    BYTE PTR [rdi],0x0
    6501b767:	lea    eax,[r9+r9*1]
    6501b76b:	mov    QWORD PTR [rsp+0x38],r15
    6501b770:	mov    QWORD PTR [rsp+0x30],r15
    6501b775:	mov    DWORD PTR [rsp+0x28],eax
    6501b779:	mov    QWORD PTR [rsp+0x20],rdi
    6501b77e:	mov    r9d,r12d
    6501b781:	mov    r8,rbx
    6501b784:	xor    edx,edx
    6501b786:	mov    ecx,DWORD PTR [rbp+0x4]
    6501b789:	call   QWORD PTR [rip+0x188a1]        # 0x65034030
    6501b78f:	test   eax,eax
    6501b791:	cmove  rdi,r15
    6501b795:	jmp    0x6501b79a
    6501b797:	mov    rdi,r15
    6501b79a:	mov    rdx,rdi
    6501b79d:	mov    rcx,rsi
    6501b7a0:	call   0x65003ab0
    6501b7a5:	nop
    6501b7a6:	lea    rdx,[rbx-0x18]
    6501b7aa:	mov    eax,r12d
    6501b7ad:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b7b2:	add    eax,0xffffffff
    6501b7b5:	test   eax,eax
    6501b7b7:	jg     0x6501b7c2
    6501b7b9:	mov    rcx,QWORD PTR [rdx]
    6501b7bc:	mov    rax,QWORD PTR [rcx]
    6501b7bf:	call   QWORD PTR [rax+0x8]
    6501b7c2:	lea    rcx,[rbp+0x108]
    6501b7c9:	call   0x65014880
    6501b7ce:	nop
    6501b7cf:	mov    rdx,rax
    6501b7d2:	lea    rcx,[rbp+0xd8]
    6501b7d9:	call   0x65004ac0
    6501b7de:	mov    r14,rax
    6501b7e1:	lea    r8,[rip+0x192a0]        # 0x65034a88
    6501b7e8:	mov    edx,0x7
    6501b7ed:	lea    rcx,[rip+0x1928c]        # 0x65034a80
    6501b7f4:	call   0x6500bcb0
    6501b7f9:	mov    r13,rax
    6501b7fc:	lea    rcx,[rip+0x2789d]        # 0x650430a0
    6501b803:	mov    rdx,QWORD PTR [rip+0x27896]        # 0x650430a0
    6501b80a:	call   QWORD PTR [rdx+0x18]
    6501b80d:	lea    rdi,[rax+0x18]
    6501b811:	mov    QWORD PTR [rbp+0x10],rdi
    6501b815:	test   r13,r13
    6501b818:	je     0x6501b8d5
    6501b81e:	test   r13,0xffffffffffff0000
    6501b825:	jne    0x6501b851
    6501b827:	movzx  edi,r13w
    6501b82b:	xor    edx,edx
    6501b82d:	mov    ecx,edi
    6501b82f:	call   0x650026f0
    6501b834:	test   rax,rax
    6501b837:	je     0x6501b92d
    6501b83d:	mov    r8d,edi
    6501b840:	mov    rdx,rax
    6501b843:	lea    rcx,[rbp+0x10]
    6501b847:	call   0x65003e00
    6501b84c:	jmp    0x6501b92d
    6501b851:	call   QWORD PTR [rip+0x27841]        # 0x65043098
    6501b857:	mov    DWORD PTR [rsp+0x28],r15d
    6501b85c:	mov    QWORD PTR [rsp+0x20],r15
    6501b861:	mov    r9d,r12d
    6501b864:	mov    r8,r13
    6501b867:	xor    edx,edx
    6501b869:	mov    ecx,eax
    6501b86b:	call   QWORD PTR [rip+0x187b7]        # 0x65034028
    6501b871:	lea    ebx,[rax-0x1]
    6501b874:	test   ebx,ebx
    6501b876:	jle    0x6501b8d5
    6501b878:	mov    edx,0x1
    6501b87d:	sub    edx,DWORD PTR [rdi-0x8]
    6501b880:	mov    ecx,DWORD PTR [rdi-0xc]
    6501b883:	sub    ecx,ebx
    6501b885:	or     ecx,edx
    6501b887:	jge    0x6501b898
    6501b889:	mov    edx,ebx
    6501b88b:	lea    rcx,[rbp+0x10]
    6501b88f:	call   0x65002640
    6501b894:	mov    rdi,QWORD PTR [rbp+0x10]
    6501b898:	call   QWORD PTR [rip+0x277fa]        # 0x65043098
    6501b89e:	mov    ecx,eax
    6501b8a0:	mov    DWORD PTR [rsp+0x28],ebx
    6501b8a4:	mov    QWORD PTR [rsp+0x20],rdi
    6501b8a9:	mov    r9d,r12d
    6501b8ac:	mov    r8,r13
    6501b8af:	xor    edx,edx
    6501b8b1:	call   QWORD PTR [rip+0x18771]        # 0x65034028
    6501b8b7:	cmp    ebx,DWORD PTR [rdi-0xc]
    6501b8ba:	jg     0x6501b8ca
    6501b8bc:	mov    DWORD PTR [rdi-0x10],ebx
    6501b8bf:	movsxd rax,ebx
    6501b8c2:	mov    WORD PTR [rdi+rax*2],0x0
    6501b8c8:	jmp    0x6501b92d
    6501b8ca:	mov    ecx,0x80070057
    6501b8cf:	call   0x65001050
    6501b8d4:	int3   
    6501b8d5:	lea    rdx,[rdi-0x18]
    6501b8d9:	mov    rbx,QWORD PTR [rdx]
    6501b8dc:	cmp    DWORD PTR [rdx+0x8],0x0
    6501b8e0:	je     0x6501b92d
    6501b8e2:	cmp    DWORD PTR [rdx+0x10],0x0
    6501b8e6:	jge    0x6501b904
    6501b8e8:	cmp    DWORD PTR [rdi-0xc],0x0
    6501b8ec:	jge    0x6501b8f9
    6501b8ee:	mov    ecx,0x80070057
    6501b8f3:	call   0x65001050
    6501b8f8:	int3   
    6501b8f9:	mov    DWORD PTR [rdi-0x10],r15d
    6501b8fd:	mov    WORD PTR [rdi],0x0
    6501b902:	jmp    0x6501b92d
    6501b904:	mov    eax,r12d
    6501b907:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b90c:	add    eax,0xffffffff
    6501b90f:	test   eax,eax
    6501b911:	jg     0x6501b91c
    6501b913:	mov    rcx,QWORD PTR [rdx]
    6501b916:	mov    rax,QWORD PTR [rcx]
    6501b919:	call   QWORD PTR [rax+0x8]
    6501b91c:	mov    rax,QWORD PTR [rbx]
    6501b91f:	mov    rcx,rbx
    6501b922:	call   QWORD PTR [rax+0x18]
    6501b925:	add    rax,0x18
    6501b929:	mov    QWORD PTR [rbp+0x10],rax
    6501b92d:	mov    r8,r14
    6501b930:	lea    rdx,[rbp+0x10]
    6501b934:	lea    rcx,[rbp+0xf8]
    6501b93b:	call   0x65018720
    6501b940:	nop
    6501b941:	mov    r13,QWORD PTR [rax]
    6501b944:	movsxd r15,DWORD PTR [r13-0x10]
    6501b948:	mov    rax,QWORD PTR [rsi]
    6501b94b:	mov    rbx,r13
    6501b94e:	sub    rbx,rax
    6501b951:	sar    rbx,1
    6501b954:	mov    r14d,DWORD PTR [rax-0x10]
    6501b958:	lea    edi,[r14+r15*1]
    6501b95c:	mov    ecx,0x1
    6501b961:	sub    ecx,DWORD PTR [rax-0x8]
    6501b964:	mov    eax,DWORD PTR [rax-0xc]
    6501b967:	sub    eax,edi
    6501b969:	or     eax,ecx
    6501b96b:	jge    0x6501b977
    6501b96d:	mov    edx,edi
    6501b96f:	mov    rcx,rsi
    6501b972:	call   0x65002640
    6501b977:	mov    rax,QWORD PTR [rsi]
    6501b97a:	cmp    rbx,r14
    6501b97d:	ja     0x6501b983
    6501b97f:	lea    r13,[rax+rbx*2]
    6501b983:	mov    rdx,r15
    6501b986:	add    rdx,rdx
    6501b989:	lea    rcx,[rax+r14*2]
    6501b98d:	mov    r9,rdx
    6501b990:	mov    r8,r13
    6501b993:	call   0x6501d7b0
    6501b998:	test   edi,edi
    6501b99a:	js     0x6501c1b9
    6501b9a0:	mov    rax,QWORD PTR [rsi]
    6501b9a3:	cmp    edi,DWORD PTR [rax-0xc]
    6501b9a6:	jg     0x6501c1b9
    6501b9ac:	mov    DWORD PTR [rax-0x10],edi
    6501b9af:	movsxd rcx,edi
    6501b9b2:	mov    rax,QWORD PTR [rsi]
    6501b9b5:	mov    WORD PTR [rax+rcx*2],0x0
    6501b9bb:	mov    rdx,QWORD PTR [rbp+0xf8]
    6501b9c2:	add    rdx,0xffffffffffffffe8
    6501b9c6:	mov    eax,r12d
    6501b9c9:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b9ce:	add    eax,0xffffffff
    6501b9d1:	test   eax,eax
    6501b9d3:	jg     0x6501b9df
    6501b9d5:	mov    rcx,QWORD PTR [rdx]
    6501b9d8:	mov    rax,QWORD PTR [rcx]
    6501b9db:	call   QWORD PTR [rax+0x8]
    6501b9de:	nop
    6501b9df:	mov    rdx,QWORD PTR [rbp+0x10]
    6501b9e3:	add    rdx,0xffffffffffffffe8
    6501b9e7:	mov    eax,r12d
    6501b9ea:	lock xadd DWORD PTR [rdx+0x10],eax
    6501b9ef:	add    eax,0xffffffff
    6501b9f2:	test   eax,eax
    6501b9f4:	jg     0x6501ba00
    6501b9f6:	mov    rcx,QWORD PTR [rdx]
    6501b9f9:	mov    rax,QWORD PTR [rcx]
    6501b9fc:	call   QWORD PTR [rax+0x8]
    6501b9ff:	nop
    6501ba00:	mov    rdx,QWORD PTR [rbp+0xd8]
    6501ba07:	add    rdx,0xffffffffffffffe8
    6501ba0b:	mov    eax,r12d
    6501ba0e:	lock xadd DWORD PTR [rdx+0x10],eax
    6501ba13:	add    eax,0xffffffff
    6501ba16:	test   eax,eax
    6501ba18:	jg     0x6501ba24
    6501ba1a:	mov    rcx,QWORD PTR [rdx]
    6501ba1d:	mov    rax,QWORD PTR [rcx]
    6501ba20:	call   QWORD PTR [rax+0x8]
    6501ba23:	nop
    6501ba24:	mov    rdx,QWORD PTR [rbp+0x108]
    6501ba2b:	add    rdx,0xffffffffffffffe8
    6501ba2f:	mov    eax,r12d
    6501ba32:	lock xadd DWORD PTR [rdx+0x10],eax
    6501ba37:	add    eax,0xffffffff
    6501ba3a:	test   eax,eax
    6501ba3c:	jg     0x6501ba47
    6501ba3e:	mov    rcx,QWORD PTR [rdx]
    6501ba41:	mov    rax,QWORD PTR [rcx]
    6501ba44:	call   QWORD PTR [rax+0x8]
    6501ba47:	call   QWORD PTR [rip+0x2764b]        # 0x65043098
    6501ba4d:	mov    r13d,eax
    6501ba50:	lea    rcx,[rip+0x27649]        # 0x650430a0
    6501ba57:	mov    rax,QWORD PTR [rip+0x27642]        # 0x650430a0
    6501ba5e:	call   QWORD PTR [rax+0x18]
    6501ba61:	add    rax,0x18
    6501ba65:	mov    QWORD PTR [rbp+0x20],rax
    6501ba69:	call   0x650058c0
    6501ba6e:	mov    edi,eax
    6501ba70:	lea    r8,[rip+0x18fd9]        # 0x65034a50
    6501ba77:	mov    edx,0x4
    6501ba7c:	lea    rcx,[rip+0x18fbd]        # 0x65034a40
    6501ba83:	call   0x6500c660
    6501ba88:	mov    rdx,rax
    6501ba8b:	mov    r8d,edi
    6501ba8e:	lea    rcx,[rbp+0x20]
    6501ba92:	call   0x65002560
    6501ba97:	mov    rdi,QWORD PTR [rbp+0x20]
    6501ba9b:	mov    r14d,0x1
    6501baa1:	mov    ecx,r14d
    6501baa4:	sub    ecx,DWORD PTR [rdi-0x8]
    6501baa7:	mov    eax,DWORD PTR [rdi-0xc]
    6501baaa:	add    eax,r14d
    6501baad:	or     eax,ecx
    6501baaf:	jge    0x6501bac1
    6501bab1:	mov    edx,r12d
    6501bab4:	lea    rcx,[rbp+0x20]
    6501bab8:	call   0x65002640
    6501babd:	mov    rdi,QWORD PTR [rbp+0x20]
    6501bac1:	test   rdi,rdi
    6501bac4:	jne    0x6501bad1
    6501bac6:	xor    r15d,r15d
    6501bac9:	mov    rbx,r15
    6501bacc:	jmp    0x6501bb5d
    6501bad1:	mov    rcx,rdi
    6501bad4:	call   QWORD PTR [rip+0x185a6]        # 0x65034080
    6501bada:	lea    r9d,[rax+0x1]
    6501bade:	cmp    r9d,0x3fffffff
    6501bae5:	jle    0x6501baef
    6501bae7:	xor    r15d,r15d
    6501baea:	mov    rbx,r15
    6501baed:	jmp    0x6501bb5d
    6501baef:	movsxd rax,r9d
    6501baf2:	add    rax,rax
    6501baf5:	lea    rcx,[rax+0xf]
    6501baf9:	cmp    rcx,rax
    6501bafc:	ja     0x6501bb08
    6501bafe:	movabs rcx,0xffffffffffffff0
    6501bb08:	and    rcx,0xfffffffffffffff0
    6501bb0c:	mov    rax,rcx
    6501bb0f:	call   0x65033230
    6501bb14:	sub    rsp,rcx
    6501bb17:	lea    rbx,[rsp+0x40]
    6501bb1c:	test   rbx,rbx
    6501bb1f:	je     0x6501bb57
    6501bb21:	mov    BYTE PTR [rbx],0x0
    6501bb24:	lea    eax,[r9+r9*1]
    6501bb28:	xor    r15d,r15d
    6501bb2b:	mov    QWORD PTR [rsp+0x38],r15
    6501bb30:	mov    QWORD PTR [rsp+0x30],r15
    6501bb35:	mov    DWORD PTR [rsp+0x28],eax
    6501bb39:	mov    QWORD PTR [rsp+0x20],rbx
    6501bb3e:	mov    r9d,r12d
    6501bb41:	mov    r8,rdi
    6501bb44:	xor    edx,edx
    6501bb46:	mov    ecx,r13d
    6501bb49:	call   QWORD PTR [rip+0x184e1]        # 0x65034030
    6501bb4f:	test   eax,eax
    6501bb51:	cmove  rbx,r15
    6501bb55:	jmp    0x6501bb5d
    6501bb57:	xor    r15d,r15d
    6501bb5a:	mov    rbx,r15
    6501bb5d:	lea    rcx,[rip+0x2753c]        # 0x650430a0
    6501bb64:	mov    rax,QWORD PTR [rip+0x27535]        # 0x650430a0
    6501bb6b:	call   QWORD PTR [rax+0x18]
    6501bb6e:	lea    rdi,[rax+0x18]
    6501bb72:	mov    QWORD PTR [rbp+0x18],rdi
    6501bb76:	test   rbx,rbx
    6501bb79:	je     0x6501bc3a
    6501bb7f:	test   rbx,0xffffffffffff0000
    6501bb86:	jne    0x6501bbb1
    6501bb88:	movzx  edi,bx
    6501bb8b:	xor    edx,edx
    6501bb8d:	mov    ecx,edi
    6501bb8f:	call   0x650026f0
    6501bb94:	test   rax,rax
    6501bb97:	je     0x6501bc92
    6501bb9d:	mov    r8d,edi
    6501bba0:	mov    rdx,rax
    6501bba3:	lea    rcx,[rbp+0x18]
    6501bba7:	call   0x65003e00
    6501bbac:	jmp    0x6501bc92
    6501bbb1:	call   QWORD PTR [rip+0x274e1]        # 0x65043098
    6501bbb7:	mov    DWORD PTR [rsp+0x28],r15d
    6501bbbc:	mov    QWORD PTR [rsp+0x20],r15
    6501bbc1:	mov    r9d,r12d
    6501bbc4:	mov    r8,rbx
    6501bbc7:	xor    edx,edx
    6501bbc9:	mov    ecx,eax
    6501bbcb:	call   QWORD PTR [rip+0x18457]        # 0x65034028
    6501bbd1:	lea    r13d,[rax-0x1]
    6501bbd5:	test   r13d,r13d
    6501bbd8:	jle    0x6501bc3a
    6501bbda:	mov    edx,r14d
    6501bbdd:	sub    edx,DWORD PTR [rdi-0x8]
    6501bbe0:	mov    ecx,DWORD PTR [rdi-0xc]
    6501bbe3:	sub    ecx,r13d
    6501bbe6:	or     ecx,edx
    6501bbe8:	jge    0x6501bbfa
    6501bbea:	mov    edx,r13d
    6501bbed:	lea    rcx,[rbp+0x18]
    6501bbf1:	call   0x65002640
    6501bbf6:	mov    rdi,QWORD PTR [rbp+0x18]
    6501bbfa:	call   QWORD PTR [rip+0x27498]        # 0x65043098
    6501bc00:	mov    ecx,eax
    6501bc02:	mov    DWORD PTR [rsp+0x28],r13d
    6501bc07:	mov    QWORD PTR [rsp+0x20],rdi
    6501bc0c:	mov    r9d,r12d
    6501bc0f:	mov    r8,rbx
    6501bc12:	xor    edx,edx
    6501bc14:	call   QWORD PTR [rip+0x1840e]        # 0x65034028
    6501bc1a:	cmp    r13d,DWORD PTR [rdi-0xc]
    6501bc1e:	jg     0x6501bc2f
    6501bc20:	mov    DWORD PTR [rdi-0x10],r13d
    6501bc24:	movsxd rax,r13d
    6501bc27:	mov    WORD PTR [rdi+rax*2],0x0
    6501bc2d:	jmp    0x6501bc92
    6501bc2f:	mov    ecx,0x80070057
    6501bc34:	call   0x65001050
    6501bc39:	int3   
    6501bc3a:	lea    rdx,[rdi-0x18]
    6501bc3e:	mov    rbx,QWORD PTR [rdx]
    6501bc41:	cmp    DWORD PTR [rdx+0x8],0x0
    6501bc45:	je     0x6501bc92
    6501bc47:	cmp    DWORD PTR [rdx+0x10],0x0
    6501bc4b:	jge    0x6501bc69
    6501bc4d:	cmp    DWORD PTR [rdi-0xc],0x0
    6501bc51:	jge    0x6501bc5e
    6501bc53:	mov    ecx,0x80070057
    6501bc58:	call   0x65001050
    6501bc5d:	int3   
    6501bc5e:	mov    DWORD PTR [rdi-0x10],r15d
    6501bc62:	mov    WORD PTR [rdi],0x0
    6501bc67:	jmp    0x6501bc92
    6501bc69:	mov    eax,r12d
    6501bc6c:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bc71:	add    eax,0xffffffff
    6501bc74:	test   eax,eax
    6501bc76:	jg     0x6501bc81
    6501bc78:	mov    rcx,QWORD PTR [rdx]
    6501bc7b:	mov    rax,QWORD PTR [rcx]
    6501bc7e:	call   QWORD PTR [rax+0x8]
    6501bc81:	mov    rax,QWORD PTR [rbx]
    6501bc84:	mov    rcx,rbx
    6501bc87:	call   QWORD PTR [rax+0x18]
    6501bc8a:	add    rax,0x18
    6501bc8e:	mov    QWORD PTR [rbp+0x18],rax
    6501bc92:	lea    r8,[rip+0x18d67]        # 0x65034a00
    6501bc99:	mov    edx,0x5
    6501bc9e:	lea    rcx,[rip+0x18d53]        # 0x650349f8
    6501bca5:	call   0x6500bcb0
    6501bcaa:	mov    rdi,rax
    6501bcad:	lea    rcx,[rip+0x273ec]        # 0x650430a0
    6501bcb4:	mov    rdx,QWORD PTR [rip+0x273e5]        # 0x650430a0
    6501bcbb:	call   QWORD PTR [rdx+0x18]
    6501bcbe:	add    rax,0x18
    6501bcc2:	mov    QWORD PTR [rbp+0x58],rax
    6501bcc6:	test   rdi,rdi
    6501bcc9:	je     0x6501bcf6
    6501bccb:	test   rdi,0xffffffffffff0000
    6501bcd2:	jne    0x6501bcf6
    6501bcd4:	movzx  edi,di
    6501bcd7:	xor    edx,edx
    6501bcd9:	mov    ecx,edi
    6501bcdb:	call   0x650026f0
    6501bce0:	test   rax,rax
    6501bce3:	je     0x6501bd03
    6501bce5:	mov    r8d,edi
    6501bce8:	mov    rdx,rax
    6501bceb:	lea    rcx,[rbp+0x58]
    6501bcef:	call   0x65003e00
    6501bcf4:	jmp    0x6501bd03
    6501bcf6:	mov    rdx,rdi
    6501bcf9:	lea    rcx,[rbp+0x58]
    6501bcfd:	call   0x65003cc0
    6501bd02:	nop
    6501bd03:	lea    r8,[rbp+0x18]
    6501bd07:	lea    rdx,[rbp+0x58]
    6501bd0b:	lea    rcx,[rbp+0x118]
    6501bd12:	call   0x65018720
    6501bd17:	nop
    6501bd18:	mov    r13,QWORD PTR [rax]
    6501bd1b:	movsxd r15,DWORD PTR [r13-0x10]
    6501bd1f:	mov    rax,QWORD PTR [rsi]
    6501bd22:	mov    rbx,r13
    6501bd25:	sub    rbx,rax
    6501bd28:	sar    rbx,1
    6501bd2b:	mov    r14d,DWORD PTR [rax-0x10]
    6501bd2f:	lea    edi,[r14+r15*1]
    6501bd33:	mov    ecx,0x1
    6501bd38:	sub    ecx,DWORD PTR [rax-0x8]
    6501bd3b:	mov    eax,DWORD PTR [rax-0xc]
    6501bd3e:	sub    eax,edi
    6501bd40:	or     eax,ecx
    6501bd42:	jge    0x6501bd4e
    6501bd44:	mov    edx,edi
    6501bd46:	mov    rcx,rsi
    6501bd49:	call   0x65002640
    6501bd4e:	mov    rax,QWORD PTR [rsi]
    6501bd51:	cmp    rbx,r14
    6501bd54:	ja     0x6501bd5a
    6501bd56:	lea    r13,[rax+rbx*2]
    6501bd5a:	mov    rdx,r15
    6501bd5d:	add    rdx,rdx
    6501bd60:	lea    rcx,[rax+r14*2]
    6501bd64:	mov    r9,rdx
    6501bd67:	mov    r8,r13
    6501bd6a:	call   0x6501d7b0
    6501bd6f:	test   edi,edi
    6501bd71:	js     0x6501c1ae
    6501bd77:	mov    rax,QWORD PTR [rsi]
    6501bd7a:	cmp    edi,DWORD PTR [rax-0xc]
    6501bd7d:	jg     0x6501c1ae
    6501bd83:	mov    DWORD PTR [rax-0x10],edi
    6501bd86:	movsxd rcx,edi
    6501bd89:	mov    rax,QWORD PTR [rsi]
    6501bd8c:	mov    WORD PTR [rax+rcx*2],0x0
    6501bd92:	mov    rdx,QWORD PTR [rbp+0x118]
    6501bd99:	add    rdx,0xffffffffffffffe8
    6501bd9d:	mov    eax,r12d
    6501bda0:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bda5:	add    eax,0xffffffff
    6501bda8:	test   eax,eax
    6501bdaa:	jg     0x6501bdb6
    6501bdac:	mov    rcx,QWORD PTR [rdx]
    6501bdaf:	mov    rax,QWORD PTR [rcx]
    6501bdb2:	call   QWORD PTR [rax+0x8]
    6501bdb5:	nop
    6501bdb6:	mov    rdx,QWORD PTR [rbp+0x58]
    6501bdba:	add    rdx,0xffffffffffffffe8
    6501bdbe:	mov    eax,r12d
    6501bdc1:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bdc6:	add    eax,0xffffffff
    6501bdc9:	test   eax,eax
    6501bdcb:	jg     0x6501bdd7
    6501bdcd:	mov    rcx,QWORD PTR [rdx]
    6501bdd0:	mov    rax,QWORD PTR [rcx]
    6501bdd3:	call   QWORD PTR [rax+0x8]
    6501bdd6:	nop
    6501bdd7:	mov    rdx,QWORD PTR [rbp+0x18]
    6501bddb:	add    rdx,0xffffffffffffffe8
    6501bddf:	mov    eax,r12d
    6501bde2:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bde7:	add    eax,0xffffffff
    6501bdea:	test   eax,eax
    6501bdec:	jg     0x6501bdf8
    6501bdee:	mov    rcx,QWORD PTR [rdx]
    6501bdf1:	mov    rax,QWORD PTR [rcx]
    6501bdf4:	call   QWORD PTR [rax+0x8]
    6501bdf7:	nop
    6501bdf8:	mov    rdx,QWORD PTR [rbp+0x20]
    6501bdfc:	add    rdx,0xffffffffffffffe8
    6501be00:	mov    eax,r12d
    6501be03:	lock xadd DWORD PTR [rdx+0x10],eax
    6501be08:	add    eax,0xffffffff
    6501be0b:	test   eax,eax
    6501be0d:	jg     0x6501be18
    6501be0f:	mov    rcx,QWORD PTR [rdx]
    6501be12:	mov    rax,QWORD PTR [rcx]
    6501be15:	call   QWORD PTR [rax+0x8]
    6501be18:	lea    rcx,[rbp+0x170]
    6501be1f:	call   0x65005d30
    6501be24:	mov    rcx,rax
    6501be27:	lea    rdx,[rbp+0x128]
    6501be2e:	mov    eax,DWORD PTR [rax]
    6501be30:	mov    DWORD PTR [rdx],eax
    6501be32:	mov    eax,DWORD PTR [rcx+0x4]
    6501be35:	mov    DWORD PTR [rdx+0x4],eax
    6501be38:	mov    eax,DWORD PTR [rcx+0x8]
    6501be3b:	mov    DWORD PTR [rdx+0x8],eax
    6501be3e:	mov    eax,DWORD PTR [rcx+0xc]
    6501be41:	mov    DWORD PTR [rdx+0xc],eax
    6501be44:	lea    r8,[rip+0x18b6d]        # 0x650349b8
    6501be4b:	mov    edx,0x5
    6501be50:	lea    rcx,[rip+0x18b59]        # 0x650349b0
    6501be57:	call   0x6500bcb0
    6501be5c:	mov    rdi,rax
    6501be5f:	lea    rcx,[rip+0x2723a]        # 0x650430a0
    6501be66:	mov    rdx,QWORD PTR [rip+0x27233]        # 0x650430a0
    6501be6d:	call   QWORD PTR [rdx+0x18]
    6501be70:	add    rax,0x18
    6501be74:	mov    QWORD PTR [rbp+0x38],rax
    6501be78:	test   rdi,rdi
    6501be7b:	je     0x6501bea8
    6501be7d:	test   rdi,0xffffffffffff0000
    6501be84:	jne    0x6501bea8
    6501be86:	movzx  edi,di
    6501be89:	xor    edx,edx
    6501be8b:	mov    ecx,edi
    6501be8d:	call   0x650026f0
    6501be92:	test   rax,rax
    6501be95:	je     0x6501beb5
    6501be97:	mov    r8d,edi
    6501be9a:	mov    rdx,rax
    6501be9d:	lea    rcx,[rbp+0x38]
    6501bea1:	call   0x65003e00
    6501bea6:	jmp    0x6501beb5
    6501bea8:	mov    rdx,rdi
    6501beab:	lea    rcx,[rbp+0x38]
    6501beaf:	call   0x65003cc0
    6501beb4:	nop
    6501beb5:	lea    rdx,[rbp+0x128]
    6501bebc:	lea    rcx,[rbp+0x110]
    6501bec3:	call   0x650044b0
    6501bec8:	nop
    6501bec9:	mov    r8,rax
    6501becc:	lea    rdx,[rbp+0x38]
    6501bed0:	lea    rcx,[rbp+0xf0]
    6501bed7:	call   0x65018720
    6501bedc:	nop
    6501bedd:	mov    r13,QWORD PTR [rax]
    6501bee0:	movsxd r15,DWORD PTR [r13-0x10]
    6501bee4:	mov    rax,QWORD PTR [rsi]
    6501bee7:	mov    rbx,r13
    6501beea:	sub    rbx,rax
    6501beed:	sar    rbx,1
    6501bef0:	mov    r14d,DWORD PTR [rax-0x10]
    6501bef4:	lea    edi,[r14+r15*1]
    6501bef8:	mov    ecx,0x1
    6501befd:	sub    ecx,DWORD PTR [rax-0x8]
    6501bf00:	mov    eax,DWORD PTR [rax-0xc]
    6501bf03:	sub    eax,edi
    6501bf05:	or     eax,ecx
    6501bf07:	jge    0x6501bf13
    6501bf09:	mov    edx,edi
    6501bf0b:	mov    rcx,rsi
    6501bf0e:	call   0x65002640
    6501bf13:	mov    rax,QWORD PTR [rsi]
    6501bf16:	cmp    rbx,r14
    6501bf19:	ja     0x6501bf1f
    6501bf1b:	lea    r13,[rax+rbx*2]
    6501bf1f:	mov    rdx,r15
    6501bf22:	add    rdx,rdx
    6501bf25:	lea    rcx,[rax+r14*2]
    6501bf29:	mov    r9,rdx
    6501bf2c:	mov    r8,r13
    6501bf2f:	call   0x6501d7b0
    6501bf34:	test   edi,edi
    6501bf36:	js     0x6501c1a3
    6501bf3c:	mov    rax,QWORD PTR [rsi]
    6501bf3f:	cmp    edi,DWORD PTR [rax-0xc]
    6501bf42:	jg     0x6501c1a3
    6501bf48:	mov    DWORD PTR [rax-0x10],edi
    6501bf4b:	movsxd rcx,edi
    6501bf4e:	mov    rax,QWORD PTR [rsi]
    6501bf51:	mov    WORD PTR [rax+rcx*2],0x0
    6501bf57:	mov    rdx,QWORD PTR [rbp+0xf0]
    6501bf5e:	add    rdx,0xffffffffffffffe8
    6501bf62:	mov    eax,r12d
    6501bf65:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bf6a:	add    eax,0xffffffff
    6501bf6d:	test   eax,eax
    6501bf6f:	jg     0x6501bf7b
    6501bf71:	mov    rcx,QWORD PTR [rdx]
    6501bf74:	mov    rax,QWORD PTR [rcx]
    6501bf77:	call   QWORD PTR [rax+0x8]
    6501bf7a:	nop
    6501bf7b:	mov    rdx,QWORD PTR [rbp+0x110]
    6501bf82:	add    rdx,0xffffffffffffffe8
    6501bf86:	mov    eax,r12d
    6501bf89:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bf8e:	add    eax,0xffffffff
    6501bf91:	test   eax,eax
    6501bf93:	jg     0x6501bf9f
    6501bf95:	mov    rcx,QWORD PTR [rdx]
    6501bf98:	mov    rax,QWORD PTR [rcx]
    6501bf9b:	call   QWORD PTR [rax+0x8]
    6501bf9e:	nop
    6501bf9f:	mov    rdx,QWORD PTR [rbp+0x38]
    6501bfa3:	add    rdx,0xffffffffffffffe8
    6501bfa7:	mov    eax,r12d
    6501bfaa:	lock xadd DWORD PTR [rdx+0x10],eax
    6501bfaf:	add    eax,0xffffffff
    6501bfb2:	test   eax,eax
    6501bfb4:	jg     0x6501bfbf
    6501bfb6:	mov    rcx,QWORD PTR [rdx]
    6501bfb9:	mov    rax,QWORD PTR [rcx]
    6501bfbc:	call   QWORD PTR [rax+0x8]
    6501bfbf:	mov    dl,0x1
    6501bfc1:	lea    rcx,[rbp+0xe0]
    6501bfc8:	call   0x6500b010
    6501bfcd:	nop
    6501bfce:	mov    r13,QWORD PTR [rax]
    6501bfd1:	movsxd r15,DWORD PTR [r13-0x10]
    6501bfd5:	mov    rax,QWORD PTR [rsi]
    6501bfd8:	mov    rbx,r13
    6501bfdb:	sub    rbx,rax
    6501bfde:	sar    rbx,1
    6501bfe1:	mov    r14d,DWORD PTR [rax-0x10]
    6501bfe5:	lea    edi,[r14+r15*1]
    6501bfe9:	mov    ecx,0x1
    6501bfee:	sub    ecx,DWORD PTR [rax-0x8]
    6501bff1:	mov    eax,DWORD PTR [rax-0xc]
    6501bff4:	sub    eax,edi
    6501bff6:	or     eax,ecx
    6501bff8:	jge    0x6501c004
    6501bffa:	mov    edx,edi
    6501bffc:	mov    rcx,rsi
    6501bfff:	call   0x65002640
    6501c004:	mov    rax,QWORD PTR [rsi]
    6501c007:	cmp    rbx,r14
    6501c00a:	ja     0x6501c010
    6501c00c:	lea    r13,[rax+rbx*2]
    6501c010:	mov    rdx,r15
    6501c013:	add    rdx,rdx
    6501c016:	lea    rcx,[rax+r14*2]
    6501c01a:	mov    r9,rdx
    6501c01d:	mov    r8,r13
    6501c020:	call   0x6501d7b0
    6501c025:	test   edi,edi
    6501c027:	js     0x6501c198
    6501c02d:	mov    rax,QWORD PTR [rsi]
    6501c030:	cmp    edi,DWORD PTR [rax-0xc]
    6501c033:	jg     0x6501c198
    6501c039:	mov    DWORD PTR [rax-0x10],edi
    6501c03c:	movsxd rcx,edi
    6501c03f:	mov    rax,QWORD PTR [rsi]
    6501c042:	mov    WORD PTR [rax+rcx*2],0x0
    6501c048:	mov    rdx,QWORD PTR [rbp+0xe0]
    6501c04f:	add    rdx,0xffffffffffffffe8
    6501c053:	mov    eax,r12d
    6501c056:	lock xadd DWORD PTR [rdx+0x10],eax
    6501c05b:	add    eax,0xffffffff
    6501c05e:	test   eax,eax
    6501c060:	jg     0x6501c06c
    6501c062:	mov    rcx,QWORD PTR [rdx]
    6501c065:	mov    rax,QWORD PTR [rcx]
    6501c068:	call   QWORD PTR [rax+0x8]
    6501c06b:	nop
    6501c06c:	mov    rcx,QWORD PTR [rbp+0x88]
    6501c073:	test   rcx,rcx
    6501c076:	je     0x6501c0ce
    6501c078:	mov    rbx,QWORD PTR [rbp+0x90]
    6501c07f:	cmp    rcx,rbx
    6501c082:	je     0x6501c0c4
    6501c084:	lea    rdi,[rcx+0x20]
    6501c088:	xor    r13d,r13d
    6501c08b:	xchg   ax,ax
    6501c08d:	data16 xchg ax,ax
    6501c090:	cmp    QWORD PTR [rdi],0x10
    6501c094:	jb     0x6501c09f
    6501c096:	mov    rcx,QWORD PTR [rdi-0x18]
    6501c09a:	call   0x6501d300
    6501c09f:	mov    QWORD PTR [rdi],0xf
    6501c0a6:	mov    QWORD PTR [rdi-0x8],r13
    6501c0aa:	mov    BYTE PTR [rdi-0x18],r13b
    6501c0ae:	add    rdi,0x28
    6501c0b2:	lea    rax,[rdi-0x20]
    6501c0b6:	cmp    rax,rbx
    6501c0b9:	jne    0x6501c090
    6501c0bb:	mov    rcx,QWORD PTR [rbp+0x88]
    6501c0c2:	jmp    0x6501c0c7
    6501c0c4:	xor    r13d,r13d
    6501c0c7:	call   0x6501d300
    6501c0cc:	jmp    0x6501c0d1
    6501c0ce:	xor    r13d,r13d
    6501c0d1:	mov    QWORD PTR [rbp+0x88],r13
    6501c0d8:	mov    QWORD PTR [rbp+0x90],r13
    6501c0df:	mov    QWORD PTR [rbp+0x98],r13
    6501c0e6:	mov    rdx,QWORD PTR [rbp+0x78]
    6501c0ea:	add    rdx,0xffffffffffffffe8
    6501c0ee:	mov    eax,r12d
    6501c0f1:	lock xadd DWORD PTR [rdx+0x10],eax
    6501c0f6:	add    eax,0xffffffff
    6501c0f9:	test   eax,eax
    6501c0fb:	jg     0x6501c107
    6501c0fd:	mov    rcx,QWORD PTR [rdx]
    6501c100:	mov    rax,QWORD PTR [rcx]
    6501c103:	call   QWORD PTR [rax+0x8]
    6501c106:	nop
    6501c107:	mov    rdx,QWORD PTR [rbp+0xb0]
    6501c10e:	add    rdx,0xffffffffffffffe8
    6501c112:	mov    eax,r12d
    6501c115:	lock xadd DWORD PTR [rdx+0x10],eax
    6501c11a:	add    eax,0xffffffff
    6501c11d:	test   eax,eax
    6501c11f:	jg     0x6501c12b
    6501c121:	mov    rcx,QWORD PTR [rdx]
    6501c124:	mov    rax,QWORD PTR [rcx]
    6501c127:	call   QWORD PTR [rax+0x8]
    6501c12a:	nop
    6501c12b:	mov    rdx,QWORD PTR [rbp+0x68]
    6501c12f:	add    rdx,0xffffffffffffffe8
    6501c133:	mov    eax,r12d
    6501c136:	lock xadd DWORD PTR [rdx+0x10],eax
    6501c13b:	add    eax,0xffffffff
    6501c13e:	test   eax,eax
    6501c140:	jg     0x6501c14c
    6501c142:	mov    rcx,QWORD PTR [rdx]
    6501c145:	mov    rax,QWORD PTR [rcx]
    6501c148:	call   QWORD PTR [rax+0x8]
    6501c14b:	nop
    6501c14c:	mov    rdx,QWORD PTR [rbp+0xc0]
    6501c153:	add    rdx,0xffffffffffffffe8
    6501c157:	mov    eax,r12d
    6501c15a:	lock xadd DWORD PTR [rdx+0x10],eax
    6501c15f:	add    eax,0xffffffff
    6501c162:	test   eax,eax
    6501c164:	jg     0x6501c170
    6501c166:	mov    rcx,QWORD PTR [rdx]
    6501c169:	mov    rax,QWORD PTR [rcx]
    6501c16c:	call   QWORD PTR [rax+0x8]
    6501c16f:	nop
    6501c170:	mov    rdx,QWORD PTR [rbp+0xd0]
    6501c177:	add    rdx,0xffffffffffffffe8
    6501c17b:	lock xadd DWORD PTR [rdx+0x10],r12d
    6501c181:	add    r12d,0xffffffff
    6501c185:	test   r12d,r12d
    6501c188:	jg     0x6501c193
    6501c18a:	mov    rcx,QWORD PTR [rdx]
    6501c18d:	mov    rax,QWORD PTR [rcx]
    6501c190:	call   QWORD PTR [rax+0x8]
    6501c193:	mov    rax,rsi
    6501c196:	jmp    0x6501c1cf
    6501c198:	mov    ecx,0x80070057
    6501c19d:	call   0x65001050
    6501c1a2:	nop
    6501c1a3:	mov    ecx,0x80070057
    6501c1a8:	call   0x65001050
    6501c1ad:	nop
    6501c1ae:	mov    ecx,0x80070057
    6501c1b3:	call   0x65001050
    6501c1b8:	nop
    6501c1b9:	mov    ecx,0x80070057
    6501c1be:	call   0x65001050
    6501c1c3:	nop
    6501c1c4:	mov    ecx,0x80070057
    6501c1c9:	call   0x65001050
    6501c1ce:	nop
    6501c1cf:	mov    rcx,QWORD PTR [rbp+0x2b0]
    6501c1d6:	xor    rcx,rbp
    6501c1d9:	call   0x6501e650
    6501c1de:	mov    rbx,QWORD PTR [rbp+0x2f8]
    6501c1e5:	mov    rsi,QWORD PTR [rbp+0x300]
    6501c1ec:	mov    rdi,QWORD PTR [rbp+0x308]
    6501c1f3:	lea    rsp,[rbp+0x2c0]
    6501c1fa:	pop    r15
    6501c1fc:	pop    r14
    6501c1fe:	pop    r13
    6501c200:	pop    r12
    6501c202:	pop    rbp
    6501c203:	ret    
    6501c204:	int3   
    6501c205:	int3   
    6501c206:	int3   
    6501c207:	int3   
    6501c208:	int3   
    6501c209:	int3   
    6501c20a:	int3   
    6501c20b:	int3   
    6501c20c:	int3   
    6501c20d:	int3   
    6501c20e:	int3   
    6501c20f:	int3   
    6501c210:	rex push rbp
    6501c212:	sub    rsp,0x20
    6501c216:	lea    rbp,[rdx+0x40]
    6501c21a:	mov    eax,DWORD PTR [rbp+0x70]
    6501c21d:	and    eax,0x1
    6501c220:	test   eax,eax
    6501c222:	je     0x6501c234
    6501c224:	and    DWORD PTR [rbp+0x70],0xfffffffe
    6501c228:	mov    rcx,QWORD PTR [rbp+0x138]
    6501c22f:	call   0x65001cb0
    6501c234:	add    rsp,0x20
    6501c238:	pop    rbp
    6501c239:	ret    
    6501c23a:	int3   
    6501c23b:	int3   
    6501c23c:	int3   
    6501c23d:	int3   
    6501c23e:	int3   
    6501c23f:	int3   
    6501c240:	rex push rbp
    6501c242:	sub    rsp,0x20
    6501c246:	lea    rbp,[rdx+0x40]
    6501c24a:	lea    rcx,[rbp+0xd0]
    6501c251:	call   0x65001cb0
    6501c256:	add    rsp,0x20
    6501c25a:	pop    rbp
    6501c25b:	ret    
    6501c25c:	int3   
    6501c25d:	int3   
    6501c25e:	int3   
    6501c25f:	int3   
    6501c260:	rex push rbp
    6501c262:	sub    rsp,0x20
    6501c266:	lea    rbp,[rdx+0x40]
    6501c26a:	lea    rcx,[rbp+0xc0]
    6501c271:	call   0x65001cb0
    6501c276:	add    rsp,0x20
    6501c27a:	pop    rbp
    6501c27b:	ret    
    6501c27c:	int3   
    6501c27d:	int3   
    6501c27e:	int3   
    6501c27f:	int3   
    6501c280:	rex push rbp
    6501c282:	sub    rsp,0x20
    6501c286:	lea    rbp,[rdx+0x40]
    6501c28a:	lea    rcx,[rbp+0x40]
    6501c28e:	call   0x65002100
    6501c293:	add    rsp,0x20
    6501c297:	pop    rbp
    6501c298:	ret    
    6501c299:	int3   
    6501c29a:	int3   
    6501c29b:	int3   
    6501c29c:	int3   
    6501c29d:	int3   
    6501c29e:	int3   
    6501c29f:	int3   
    6501c2a0:	rex push rbp
    6501c2a2:	sub    rsp,0x20
    6501c2a6:	lea    rbp,[rdx+0x40]
    6501c2aa:	lea    rcx,[rbp+0x40]
    6501c2ae:	call   0x65001cb0
    6501c2b3:	add    rsp,0x20
    6501c2b7:	pop    rbp
    6501c2b8:	ret    
    6501c2b9:	int3   
    6501c2ba:	int3   
    6501c2bb:	int3   
    6501c2bc:	int3   
    6501c2bd:	int3   
    6501c2be:	int3   
    6501c2bf:	int3   
    6501c2c0:	rex push rbp
    6501c2c2:	sub    rsp,0x20
    6501c2c6:	lea    rbp,[rdx+0x40]
    6501c2ca:	lea    rcx,[rbp+0xb8]
    6501c2d1:	call   0x65001cb0
    6501c2d6:	add    rsp,0x20
    6501c2da:	pop    rbp
    6501c2db:	ret    
    6501c2dc:	int3   
    6501c2dd:	int3   
    6501c2de:	int3   
    6501c2df:	int3   
    6501c2e0:	rex push rbp
    6501c2e2:	sub    rsp,0x20
    6501c2e6:	lea    rbp,[rdx+0x40]
    6501c2ea:	lea    rcx,[rbp+0x68]
    6501c2ee:	call   0x65001cb0
    6501c2f3:	add    rsp,0x20
    6501c2f7:	pop    rbp
    6501c2f8:	ret    
    6501c2f9:	int3   
    6501c2fa:	int3   
    6501c2fb:	int3   
    6501c2fc:	int3   
    6501c2fd:	int3   
    6501c2fe:	int3   
    6501c2ff:	int3   
    6501c300:	rex push rbp
    6501c302:	sub    rsp,0x20
    6501c306:	lea    rbp,[rdx+0x40]
    6501c30a:	lea    rcx,[rbp+0xb0]
    6501c311:	call   0x65001cb0
    6501c316:	add    rsp,0x20
    6501c31a:	pop    rbp
    6501c31b:	ret    
    6501c31c:	int3   
    6501c31d:	int3   
    6501c31e:	int3   
    6501c31f:	int3   
    6501c320:	rex push rbp
    6501c322:	sub    rsp,0x20
    6501c326:	lea    rbp,[rdx+0x40]
    6501c32a:	lea    rcx,[rbp+0x78]
    6501c32e:	call   0x65001cb0
    6501c333:	add    rsp,0x20
    6501c337:	pop    rbp
    6501c338:	ret    
    6501c339:	int3   
    6501c33a:	int3   
    6501c33b:	int3   
    6501c33c:	int3   
    6501c33d:	int3   
    6501c33e:	int3   
    6501c33f:	int3   
    6501c340:	rex push rbp
    6501c342:	sub    rsp,0x20
    6501c346:	lea    rbp,[rdx+0x40]
    6501c34a:	lea    rcx,[rbp+0xa8]
    6501c351:	call   0x65001cb0
    6501c356:	add    rsp,0x20
    6501c35a:	pop    rbp
    6501c35b:	ret    
    6501c35c:	int3   
    6501c35d:	int3   
    6501c35e:	int3   
    6501c35f:	int3   
    6501c360:	rex push rbp
    6501c362:	sub    rsp,0x20
    6501c366:	lea    rbp,[rdx+0x40]
    6501c36a:	lea    rcx,[rbp+0x30]
    6501c36e:	call   0x65002100
    6501c373:	add    rsp,0x20
    6501c377:	pop    rbp
    6501c378:	ret    
    6501c379:	int3   
    6501c37a:	int3   
    6501c37b:	int3   
    6501c37c:	int3   
    6501c37d:	int3   
    6501c37e:	int3   
    6501c37f:	int3   
    6501c380:	rex push rbp
    6501c382:	sub    rsp,0x20
    6501c386:	lea    rbp,[rdx+0x40]
    6501c38a:	lea    rcx,[rbp+0x30]
    6501c38e:	call   0x65001cb0
    6501c393:	add    rsp,0x20
    6501c397:	pop    rbp
    6501c398:	ret    
    6501c399:	int3   
    6501c39a:	int3   
    6501c39b:	int3   
    6501c39c:	int3   
    6501c39d:	int3   
    6501c39e:	int3   
    6501c39f:	int3   
    6501c3a0:	rex push rbp
    6501c3a2:	sub    rsp,0x20
    6501c3a6:	lea    rbp,[rdx+0x40]
    6501c3aa:	lea    rcx,[rbp+0x100]
    6501c3b1:	call   0x65001cb0
    6501c3b6:	add    rsp,0x20
    6501c3ba:	pop    rbp
    6501c3bb:	ret    
    6501c3bc:	int3   
    6501c3bd:	int3   
    6501c3be:	int3   
    6501c3bf:	int3   
    6501c3c0:	rex push rbp
    6501c3c2:	sub    rsp,0x20
    6501c3c6:	lea    rbp,[rdx+0x40]
    6501c3ca:	lea    rcx,[rbp+0xc8]
    6501c3d1:	call   0x65001cb0
    6501c3d6:	add    rsp,0x20
    6501c3da:	pop    rbp
    6501c3db:	ret    
    6501c3dc:	int3   
    6501c3dd:	int3   
    6501c3de:	int3   
    6501c3df:	int3   
    6501c3e0:	rex push rbp
    6501c3e2:	sub    rsp,0x20
    6501c3e6:	lea    rbp,[rdx+0x40]
    6501c3ea:	lea    rcx,[rbp+0x50]
    6501c3ee:	call   0x65002100
    6501c3f3:	add    rsp,0x20
    6501c3f7:	pop    rbp
    6501c3f8:	ret    
    6501c3f9:	int3   
    6501c3fa:	int3   
    6501c3fb:	int3   
    6501c3fc:	int3   
    6501c3fd:	int3   
    6501c3fe:	int3   
    6501c3ff:	int3   
    6501c400:	rex push rbp
    6501c402:	sub    rsp,0x20
    6501c406:	lea    rbp,[rdx+0x40]
    6501c40a:	lea    rcx,[rbp+0x50]
    6501c40e:	call   0x65001cb0
    6501c413:	add    rsp,0x20
    6501c417:	pop    rbp
    6501c418:	ret    
    6501c419:	int3   
    6501c41a:	int3   
    6501c41b:	int3   
    6501c41c:	int3   
    6501c41d:	int3   
    6501c41e:	int3   
    6501c41f:	int3   
    6501c420:	rex push rbp
    6501c422:	sub    rsp,0x20
    6501c426:	lea    rbp,[rdx+0x40]
    6501c42a:	lea    rcx,[rbp+0xe8]
    6501c431:	call   0x65001cb0
    6501c436:	add    rsp,0x20
    6501c43a:	pop    rbp
    6501c43b:	ret    
    6501c43c:	int3   
    6501c43d:	int3   
    6501c43e:	int3   
    6501c43f:	int3   
    6501c440:	rex push rbp
    6501c442:	sub    rsp,0x20
    6501c446:	lea    rbp,[rdx+0x40]
    6501c44a:	lea    rcx,[rbp+0x48]
    6501c44e:	call   0x65001cb0
    6501c453:	add    rsp,0x20
    6501c457:	pop    rbp
    6501c458:	ret    
    6501c459:	int3   
    6501c45a:	int3   
    6501c45b:	int3   
    6501c45c:	int3   
    6501c45d:	int3   
    6501c45e:	int3   
    6501c45f:	int3   
    6501c460:	rex push rbp
    6501c462:	sub    rsp,0x20
    6501c466:	lea    rbp,[rdx+0x40]
    6501c46a:	lea    rcx,[rbp+0x80]
    6501c471:	call   0x65019d60
    6501c476:	add    rsp,0x20
    6501c47a:	pop    rbp
    6501c47b:	ret    
    6501c47c:	int3   
    6501c47d:	int3   
    6501c47e:	int3   
    6501c47f:	int3   
    6501c480:	rex push rbp
    6501c482:	sub    rsp,0x20
    6501c486:	lea    rbp,[rdx+0x40]
    6501c48a:	lea    rcx,[rbp+0x28]
    6501c48e:	call   0x65002100
    6501c493:	add    rsp,0x20
    6501c497:	pop    rbp
    6501c498:	ret    
    6501c499:	int3   
    6501c49a:	int3   
    6501c49b:	int3   
    6501c49c:	int3   
    6501c49d:	int3   
    6501c49e:	int3   
    6501c49f:	int3   
    6501c4a0:	rex push rbp
    6501c4a2:	sub    rsp,0x20
    6501c4a6:	lea    rbp,[rdx+0x40]
    6501c4aa:	lea    rcx,[rbp+0x28]
    6501c4ae:	call   0x65001cb0
    6501c4b3:	add    rsp,0x20
    6501c4b7:	pop    rbp
    6501c4b8:	ret    
    6501c4b9:	int3   
    6501c4ba:	int3   
    6501c4bb:	int3   
    6501c4bc:	int3   
    6501c4bd:	int3   
    6501c4be:	int3   
    6501c4bf:	int3   
    6501c4c0:	rex push rbp
    6501c4c2:	sub    rsp,0x20
    6501c4c6:	lea    rbp,[rdx+0x40]
    6501c4ca:	lea    rcx,[rbp+0x8]
    6501c4ce:	call   0x65001cb0
    6501c4d3:	add    rsp,0x20
    6501c4d7:	pop    rbp
    6501c4d8:	ret    
    6501c4d9:	int3   
    6501c4da:	int3   
    6501c4db:	int3   
    6501c4dc:	int3   
    6501c4dd:	int3   
    6501c4de:	int3   
    6501c4df:	int3   
    6501c4e0:	rex push rbp
    6501c4e2:	sub    rsp,0x20
    6501c4e6:	lea    rbp,[rdx+0x40]
    6501c4ea:	lea    rcx,[rbp+0x108]
    6501c4f1:	call   0x65001cb0
    6501c4f6:	add    rsp,0x20
    6501c4fa:	pop    rbp
    6501c4fb:	ret    
    6501c4fc:	int3   
    6501c4fd:	int3   
    6501c4fe:	int3   
    6501c4ff:	int3   
    6501c500:	rex push rbp
    6501c502:	sub    rsp,0x20
    6501c506:	lea    rbp,[rdx+0x40]
    6501c50a:	lea    rcx,[rbp+0xd8]
    6501c511:	call   0x65001cb0
    6501c516:	add    rsp,0x20
    6501c51a:	pop    rbp
    6501c51b:	ret    
    6501c51c:	int3   
    6501c51d:	int3   
    6501c51e:	int3   
    6501c51f:	int3   
    6501c520:	rex push rbp
    6501c522:	sub    rsp,0x20
    6501c526:	lea    rbp,[rdx+0x40]
    6501c52a:	lea    rcx,[rbp+0x10]
    6501c52e:	call   0x65002100
    6501c533:	add    rsp,0x20
    6501c537:	pop    rbp
    6501c538:	ret    
    6501c539:	int3   
    6501c53a:	int3   
    6501c53b:	int3   
    6501c53c:	int3   
    6501c53d:	int3   
    6501c53e:	int3   
    6501c53f:	int3   
    6501c540:	rex push rbp
    6501c542:	sub    rsp,0x20
    6501c546:	lea    rbp,[rdx+0x40]
    6501c54a:	lea    rcx,[rbp+0x10]
    6501c54e:	call   0x65001cb0
    6501c553:	add    rsp,0x20
    6501c557:	pop    rbp
    6501c558:	ret    
    6501c559:	int3   
    6501c55a:	int3   
    6501c55b:	int3   
    6501c55c:	int3   
    6501c55d:	int3   
    6501c55e:	int3   
    6501c55f:	int3   
    6501c560:	rex push rbp
    6501c562:	sub    rsp,0x20
    6501c566:	lea    rbp,[rdx+0x40]
    6501c56a:	lea    rcx,[rbp+0xf8]
    6501c571:	call   0x65001cb0
    6501c576:	add    rsp,0x20
    6501c57a:	pop    rbp
    6501c57b:	ret    
    6501c57c:	int3   
    6501c57d:	int3   
    6501c57e:	int3   
    6501c57f:	int3   
    6501c580:	rex push rbp
    6501c582:	sub    rsp,0x20
    6501c586:	lea    rbp,[rdx+0x40]
    6501c58a:	lea    rcx,[rbp+0x20]
    6501c58e:	call   0x65001cb0
    6501c593:	add    rsp,0x20
    6501c597:	pop    rbp
    6501c598:	ret    
    6501c599:	int3   
    6501c59a:	int3   
    6501c59b:	int3   
    6501c59c:	int3   
    6501c59d:	int3   
    6501c59e:	int3   
    6501c59f:	int3   
    6501c5a0:	rex push rbp
    6501c5a2:	sub    rsp,0x20
    6501c5a6:	lea    rbp,[rdx+0x40]
    6501c5aa:	lea    rcx,[rbp+0x18]
    6501c5ae:	call   0x65002100
    6501c5b3:	add    rsp,0x20
    6501c5b7:	pop    rbp
    6501c5b8:	ret    
    6501c5b9:	int3   
    6501c5ba:	int3   
    6501c5bb:	int3   
    6501c5bc:	int3   
    6501c5bd:	int3   
    6501c5be:	int3   
    6501c5bf:	int3   
    6501c5c0:	rex push rbp
    6501c5c2:	sub    rsp,0x20
    6501c5c6:	lea    rbp,[rdx+0x40]
    6501c5ca:	lea    rcx,[rbp+0x18]
    6501c5ce:	call   0x65001cb0
    6501c5d3:	add    rsp,0x20
    6501c5d7:	pop    rbp
    6501c5d8:	ret    
    6501c5d9:	int3   
    6501c5da:	int3   
    6501c5db:	int3   
    6501c5dc:	int3   
    6501c5dd:	int3   
    6501c5de:	int3   
    6501c5df:	int3   
    6501c5e0:	rex push rbp
    6501c5e2:	sub    rsp,0x20
    6501c5e6:	lea    rbp,[rdx+0x40]
    6501c5ea:	lea    rcx,[rbp+0x58]
    6501c5ee:	call   0x65002100
    6501c5f3:	add    rsp,0x20
    6501c5f7:	pop    rbp
    6501c5f8:	ret    
    6501c5f9:	int3   
    6501c5fa:	int3   
    6501c5fb:	int3   
    6501c5fc:	int3   
    6501c5fd:	int3   
    6501c5fe:	int3   
    6501c5ff:	int3   
    6501c600:	rex push rbp
    6501c602:	sub    rsp,0x20
    6501c606:	lea    rbp,[rdx+0x40]
    6501c60a:	lea    rcx,[rbp+0x58]
    6501c60e:	call   0x65001cb0
    6501c613:	add    rsp,0x20
    6501c617:	pop    rbp
    6501c618:	ret    
    6501c619:	int3   
    6501c61a:	int3   
    6501c61b:	int3   
    6501c61c:	int3   
    6501c61d:	int3   
    6501c61e:	int3   
    6501c61f:	int3   
    6501c620:	rex push rbp
    6501c622:	sub    rsp,0x20
    6501c626:	lea    rbp,[rdx+0x40]
    6501c62a:	lea    rcx,[rbp+0x118]
    6501c631:	call   0x65001cb0
    6501c636:	add    rsp,0x20
    6501c63a:	pop    rbp
    6501c63b:	ret    
    6501c63c:	int3   
    6501c63d:	int3   
    6501c63e:	int3   
    6501c63f:	int3   
    6501c640:	rex push rbp
    6501c642:	sub    rsp,0x20
    6501c646:	lea    rbp,[rdx+0x40]
    6501c64a:	lea    rcx,[rbp+0x38]
    6501c64e:	call   0x65002100
    6501c653:	add    rsp,0x20
    6501c657:	pop    rbp
    6501c658:	ret    
    6501c659:	int3   
    6501c65a:	int3   
    6501c65b:	int3   
    6501c65c:	int3   
    6501c65d:	int3   
    6501c65e:	int3   
    6501c65f:	int3   
    6501c660:	rex push rbp
    6501c662:	sub    rsp,0x20
    6501c666:	lea    rbp,[rdx+0x40]
    6501c66a:	lea    rcx,[rbp+0x38]
    6501c66e:	call   0x65001cb0
    6501c673:	add    rsp,0x20
    6501c677:	pop    rbp
    6501c678:	ret    
    6501c679:	int3   
    6501c67a:	int3   
    6501c67b:	int3   
    6501c67c:	int3   
    6501c67d:	int3   
    6501c67e:	int3   
    6501c67f:	int3   
    6501c680:	rex push rbp
    6501c682:	sub    rsp,0x20
    6501c686:	lea    rbp,[rdx+0x40]
    6501c68a:	lea    rcx,[rbp+0x110]
    6501c691:	call   0x65001cb0
    6501c696:	add    rsp,0x20
    6501c69a:	pop    rbp
    6501c69b:	ret    
    6501c69c:	int3   
    6501c69d:	int3   
    6501c69e:	int3   
    6501c69f:	int3   
    6501c6a0:	rex push rbp
    6501c6a2:	sub    rsp,0x20
    6501c6a6:	lea    rbp,[rdx+0x40]
    6501c6aa:	lea    rcx,[rbp+0xf0]
    6501c6b1:	call   0x65001cb0
    6501c6b6:	add    rsp,0x20
    6501c6ba:	pop    rbp
    6501c6bb:	ret    
    6501c6bc:	int3   
    6501c6bd:	int3   
    6501c6be:	int3   
    6501c6bf:	int3   
    6501c6c0:	rex push rbp
    6501c6c2:	sub    rsp,0x20
    6501c6c6:	lea    rbp,[rdx+0x40]
    6501c6ca:	lea    rcx,[rbp+0xe0]
    6501c6d1:	call   0x65001cb0
    6501c6d6:	add    rsp,0x20
    6501c6da:	pop    rbp
    6501c6db:	ret    
    6501c6dc:	int3   
    6501c6dd:	int3   
    6501c6de:	int3   
    6501c6df:	int3   
    6501c6e0:	rex push rbp
    6501c6e2:	push   r13
    6501c6e4:	push   r14
    6501c6e6:	sub    rsp,0xc0
    6501c6ed:	lea    rbp,[rsp+0x40]
    6501c6f2:	mov    QWORD PTR [rbp+0x40],0xfffffffffffffffe
    6501c6fa:	mov    QWORD PTR [rbp+0xa0],rbx
    6501c701:	mov    QWORD PTR [rbp+0xa8],rsi
    6501c708:	mov    QWORD PTR [rbp+0xb0],rdi
    6501c70f:	mov    QWORD PTR [rbp+0xb8],r12
    6501c716:	mov    rax,QWORD PTR [rip+0x26a03]        # 0x65043120
    6501c71d:	xor    rax,rbp
    6501c720:	mov    QWORD PTR [rbp+0x70],rax
    6501c724:	call   QWORD PTR [rip+0x2696e]        # 0x65043098
    6501c72a:	mov    r12d,eax
    6501c72d:	xor    r13d,r13d
    6501c730:	mov    edi,r13d
    6501c733:	mov    DWORD PTR [rbp+0x8],r13d
    6501c737:	call   0x650173f0
    6501c73c:	xor    edx,edx
    6501c73e:	lea    rcx,[rbp+0x8]
    6501c742:	call   rax
    6501c744:	test   eax,eax
    6501c746:	je     0x6501c756
    6501c748:	add    edi,0x3e8
    6501c74e:	cmp    edi,0xea60
    6501c754:	ja     0x6501c763
    6501c756:	mov    ecx,0x3e8
    6501c75b:	call   QWORD PTR [rip+0x17917]        # 0x65034078
    6501c761:	jmp    0x6501c733
    6501c763:	movabs r14,0xffffffffffffff0
    6501c76d:	data16 xchg ax,ax
    6501c770:	mov    esi,r13d
    6501c773:	lea    rcx,[rbp+0x0]
    6501c777:	call   0x6501a8a0
    6501c77c:	nop
    6501c77d:	mov    QWORD PTR [rbp+0x68],0xf
    6501c785:	mov    QWORD PTR [rbp+0x60],r13
    6501c789:	mov    BYTE PTR [rbp+0x50],0x0
    6501c78d:	mov    rdi,QWORD PTR [rbp+0x0]
    6501c791:	test   rdi,rdi
    6501c794:	jne    0x6501c79b
    6501c796:	mov    rbx,r13
    6501c799:	jmp    0x6501c815
    6501c79b:	mov    rcx,rdi
    6501c79e:	call   QWORD PTR [rip+0x178dc]        # 0x65034080
    6501c7a4:	lea    edx,[rax+0x1]
    6501c7a7:	cmp    edx,0x3fffffff
    6501c7ad:	jle    0x6501c7b4
    6501c7af:	mov    rbx,r13
    6501c7b2:	jmp    0x6501c815
    6501c7b4:	movsxd rax,edx
    6501c7b7:	add    rax,rax
    6501c7ba:	lea    rcx,[rax+0xf]
    6501c7be:	cmp    rcx,rax
    6501c7c1:	ja     0x6501c7c6
    6501c7c3:	mov    rcx,r14
    6501c7c6:	and    rcx,0xfffffffffffffff0
    6501c7ca:	mov    rax,rcx
    6501c7cd:	call   0x65033230
    6501c7d2:	sub    rsp,rcx
    6501c7d5:	lea    rbx,[rsp+0x40]
    6501c7da:	test   rbx,rbx
    6501c7dd:	je     0x6501c812
    6501c7df:	mov    BYTE PTR [rbx],0x0
    6501c7e2:	lea    eax,[rdx+rdx*1]
    6501c7e5:	mov    QWORD PTR [rsp+0x38],r13
    6501c7ea:	mov    QWORD PTR [rsp+0x30],r13
    6501c7ef:	mov    DWORD PTR [rsp+0x28],eax
    6501c7f3:	mov    QWORD PTR [rsp+0x20],rbx
    6501c7f8:	or     r9d,0xffffffff
    6501c7fc:	mov    r8,rdi
    6501c7ff:	xor    edx,edx
    6501c801:	mov    ecx,r12d
    6501c804:	call   QWORD PTR [rip+0x17826]        # 0x65034030
    6501c80a:	test   eax,eax
    6501c80c:	cmove  rbx,r13
    6501c810:	jmp    0x6501c815
    6501c812:	mov    rbx,r13
    6501c815:	mov    edx,0xf
    6501c81a:	mov    QWORD PTR [rbp+0x38],rdx
    6501c81e:	mov    r8,r13
    6501c821:	mov    QWORD PTR [rbp+0x30],r13
    6501c825:	mov    BYTE PTR [rbp+0x20],r8b
    6501c829:	xor    eax,eax
    6501c82b:	or     rcx,0xffffffffffffffff
    6501c82f:	mov    rdi,rbx
    6501c832:	repnz scas al,BYTE PTR es:[rdi]
    6501c834:	not    rcx
    6501c837:	sub    rcx,0x1
    6501c83b:	mov    rdi,rcx
    6501c83e:	cmp    rcx,0xfffffffffffffffe
    6501c842:	jbe    0x6501c851
    6501c844:	call   0x6501d150
    6501c849:	mov    rdx,QWORD PTR [rbp+0x38]
    6501c84d:	mov    r8,QWORD PTR [rbp+0x30]
    6501c851:	cmp    rdx,rdi
    6501c854:	jae    0x6501c868
    6501c856:	mov    rdx,rdi
    6501c859:	lea    rcx,[rbp+0x18]
    6501c85d:	call   0x65002330
    6501c862:	mov    rdx,QWORD PTR [rbp+0x38]
    6501c866:	jmp    0x6501c883
    6501c868:	test   rdi,rdi
    6501c86b:	jne    0x6501c883
    6501c86d:	mov    QWORD PTR [rbp+0x30],r13
    6501c871:	lea    rax,[rbp+0x20]
    6501c875:	cmp    rdx,0x10
    6501c879:	cmovae rax,QWORD PTR [rbp+0x20]
    6501c87e:	mov    BYTE PTR [rax],dil
    6501c881:	jmp    0x6501c8b6
    6501c883:	test   rdi,rdi
    6501c886:	je     0x6501c8b6
    6501c888:	lea    rcx,[rbp+0x20]
    6501c88c:	cmp    rdx,0x10
    6501c890:	cmovae rcx,QWORD PTR [rbp+0x20]
    6501c895:	mov    r9,rdi
    6501c898:	mov    r8,rbx
    6501c89b:	call   0x6501d7b0
    6501c8a0:	mov    QWORD PTR [rbp+0x30],rdi
    6501c8a4:	lea    rax,[rbp+0x20]
    6501c8a8:	cmp    QWORD PTR [rbp+0x38],0x10
    6501c8ad:	cmovae rax,QWORD PTR [rbp+0x20]
    6501c8b2:	mov    BYTE PTR [rax+rdi*1],0x0
    6501c8b6:	lea    rdx,[rbp+0x48]
    6501c8ba:	lea    rcx,[rbp+0x18]
    6501c8be:	call   0x6501a4a0
    6501c8c3:	movzx  edi,al
    6501c8c6:	cmp    QWORD PTR [rbp+0x38],0x10
    6501c8cb:	jb     0x6501c8d6
    6501c8cd:	mov    rcx,QWORD PTR [rbp+0x20]
    6501c8d1:	call   0x6501d300
    6501c8d6:	test   dil,dil
    6501c8d9:	jne    0x6501c960
    6501c8df:	mov    edi,r13d
    6501c8e2:	mov    DWORD PTR [rbp+0xc],r13d
    6501c8e6:	call   0x650173f0
    6501c8eb:	xor    edx,edx
    6501c8ed:	lea    rcx,[rbp+0xc]
    6501c8f1:	call   rax
    6501c8f3:	test   eax,eax
    6501c8f5:	je     0x6501c905
    6501c8f7:	add    edi,0x3e8
    6501c8fd:	cmp    edi,0x493e0
    6501c903:	ja     0x6501c912
    6501c905:	mov    ecx,0x3e8
    6501c90a:	call   QWORD PTR [rip+0x17768]        # 0x65034078
    6501c910:	jmp    0x6501c8e2
    6501c912:	cmp    QWORD PTR [rbp+0x68],0x10
    6501c917:	jb     0x6501c922
    6501c919:	mov    rcx,QWORD PTR [rbp+0x50]
    6501c91d:	call   0x6501d300
    6501c922:	mov    QWORD PTR [rbp+0x68],0xf
    6501c92a:	mov    QWORD PTR [rbp+0x60],r13
    6501c92e:	mov    BYTE PTR [rbp+0x50],0x0
    6501c932:	mov    rdx,QWORD PTR [rbp+0x0]
    6501c936:	add    rdx,0xffffffffffffffe8
    6501c93a:	or     eax,0xffffffff
    6501c93d:	lock xadd DWORD PTR [rdx+0x10],eax
    6501c942:	add    eax,0xffffffff
    6501c945:	test   eax,eax
    6501c947:	jg     0x6501c952
    6501c949:	mov    rcx,QWORD PTR [rdx]
    6501c94c:	mov    rax,QWORD PTR [rcx]
    6501c94f:	call   QWORD PTR [rax+0x8]
    6501c952:	add    esi,0x1
    6501c955:	cmp    esi,0x3
    6501c958:	jne    0x6501c773
    6501c95e:	jmp    0x6501c9b1
    6501c960:	cmp    QWORD PTR [rbp+0x60],0x0
    6501c965:	je     0x6501c971
    6501c967:	lea    rcx,[rbp+0x48]
    6501c96b:	call   0x650193a0
    6501c970:	nop
    6501c971:	cmp    QWORD PTR [rbp+0x68],0x10
    6501c976:	jb     0x6501c981
    6501c978:	mov    rcx,QWORD PTR [rbp+0x50]
    6501c97c:	call   0x6501d300
    6501c981:	mov    QWORD PTR [rbp+0x68],0xf
    6501c989:	mov    QWORD PTR [rbp+0x60],r13
    6501c98d:	mov    BYTE PTR [rbp+0x50],0x0
    6501c991:	mov    rdx,QWORD PTR [rbp+0x0]
    6501c995:	add    rdx,0xffffffffffffffe8
    6501c999:	or     eax,0xffffffff
    6501c99c:	lock xadd DWORD PTR [rdx+0x10],eax
    6501c9a1:	add    eax,0xffffffff
    6501c9a4:	test   eax,eax
    6501c9a6:	jg     0x6501c9b1
    6501c9a8:	mov    rcx,QWORD PTR [rdx]
    6501c9ab:	mov    rax,QWORD PTR [rcx]
    6501c9ae:	call   QWORD PTR [rax+0x8]
    6501c9b1:	mov    edi,r13d
    6501c9b4:	mov    DWORD PTR [rbp+0x10],r13d
    6501c9b8:	call   0x650173f0
    6501c9bd:	xor    edx,edx
    6501c9bf:	lea    rcx,[rbp+0x10]
    6501c9c3:	call   rax
    6501c9c5:	test   eax,eax
    6501c9c7:	je     0x6501c9db
    6501c9c9:	add    edi,0x3e8
    6501c9cf:	cmp    edi,0x12e1fc0
    6501c9d5:	ja     0x6501c770
    6501c9db:	mov    ecx,0x3e8
    6501c9e0:	call   QWORD PTR [rip+0x17692]        # 0x65034078
    6501c9e6:	jmp    0x6501c9b4
    6501c9e8:	int3   
    6501c9e9:	int3   
    6501c9ea:	int3   
    6501c9eb:	int3   
    6501c9ec:	int3   
    6501c9ed:	int3   
    6501c9ee:	int3   
    6501c9ef:	int3   
    6501c9f0:	rex push rbp
    6501c9f2:	sub    rsp,0x20
    6501c9f6:	lea    rbp,[rdx+0x40]
    6501c9fa:	lea    rcx,[rbp+0x0]
    6501c9fe:	call   0x65001cb0
    6501ca03:	add    rsp,0x20
    6501ca07:	pop    rbp
    6501ca08:	ret    
    6501ca09:	int3   
    6501ca0a:	int3   
    6501ca0b:	int3   
    6501ca0c:	int3   
    6501ca0d:	int3   
    6501ca0e:	int3   
    6501ca0f:	int3   
    6501ca10:	rex push rbp
    6501ca12:	sub    rsp,0x20
    6501ca16:	lea    rbp,[rdx+0x40]
    6501ca1a:	lea    rcx,[rbp+0x48]
    6501ca1e:	call   0x65001c70
    6501ca23:	add    rsp,0x20
    6501ca27:	pop    rbp
    6501ca28:	ret    
    6501ca29:	int3   
    6501ca2a:	int3   
    6501ca2b:	int3   
    6501ca2c:	int3   
    6501ca2d:	int3   
    6501ca2e:	int3   
    6501ca2f:	int3   
    6501ca30:	rex push rbp
    6501ca32:	sub    rsp,0x20
    6501ca36:	lea    rbp,[rdx+0x40]
    6501ca3a:	lea    rcx,[rbp+0x18]
    6501ca3e:	call   0x65001c70
    6501ca43:	add    rsp,0x20
    6501ca47:	pop    rbp
    6501ca48:	ret    
    6501ca49:	int3   
    6501ca4a:	int3   
    6501ca4b:	int3   
    6501ca4c:	int3   
    6501ca4d:	int3   
    6501ca4e:	int3   
    6501ca4f:	int3   
    6501ca50:	rex push rbx
    6501ca52:	sub    rsp,0x260
    6501ca59:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
    6501ca62:	mov    rax,QWORD PTR [rip+0x266b7]        # 0x65043120
    6501ca69:	xor    rax,rsp
    6501ca6c:	mov    QWORD PTR [rsp+0x250],rax
    6501ca74:	mov    r8d,0x208
    6501ca7a:	lea    rdx,[rsp+0x40]
    6501ca7f:	xor    ecx,ecx
    6501ca81:	call   QWORD PTR [rip+0x17639]        # 0x650340c0
    6501ca87:	test   eax,eax
    6501ca89:	je     0x6501cb55
    6501ca8f:	mov    edx,0x104
    6501ca94:	lea    rcx,[rsp+0x40]
    6501ca99:	call   0x6501eea0
    6501ca9e:	lea    r8,[rip+0x18463]        # 0x65034f08
    6501caa5:	mov    edx,0xb
    6501caaa:	lea    rcx,[rip+0x1843f]        # 0x65034ef0
    6501cab1:	call   0x6500c660
    6501cab6:	mov    rdx,rax
    6501cab9:	lea    rcx,[rsp+0x40]
    6501cabe:	call   0x6501e810
    6501cac3:	test   rax,rax
    6501cac6:	je     0x6501cb53
    6501cacc:	lea    rcx,[rsp+0x30]
    6501cad1:	call   0x6501a5f0
    6501cad6:	nop
    6501cad7:	mov    rbx,QWORD PTR [rax]
    6501cada:	call   0x6500b780
    6501cadf:	mov    rcx,rax
    6501cae2:	mov    r8,rbx
    6501cae5:	xor    edx,edx
    6501cae7:	call   QWORD PTR [rip+0x175b3]        # 0x650340a0
    6501caed:	mov    rbx,rax
    6501caf0:	mov    rdx,QWORD PTR [rsp+0x30]
    6501caf5:	add    rdx,0xffffffffffffffe8
    6501caf9:	or     ecx,0xffffffff
    6501cafc:	lock xadd DWORD PTR [rdx+0x10],ecx
    6501cb01:	add    ecx,0xffffffff
    6501cb04:	test   ecx,ecx
    6501cb06:	jg     0x6501cb12
    6501cb08:	mov    rcx,QWORD PTR [rdx]
    6501cb0b:	mov    r8,QWORD PTR [rcx]
    6501cb0e:	call   QWORD PTR [r8+0x8]
    6501cb12:	test   rbx,rbx
    6501cb15:	je     0x6501cb53
    6501cb17:	xor    edx,edx
    6501cb19:	mov    rcx,rbx
    6501cb1c:	call   QWORD PTR [rip+0x17576]        # 0x65034098
    6501cb22:	test   eax,eax
    6501cb24:	jne    0x6501cb53
    6501cb26:	xor    eax,eax
    6501cb28:	mov    QWORD PTR [rsp+0x28],rax
    6501cb2d:	mov    DWORD PTR [rsp+0x20],eax
    6501cb31:	xor    r9d,r9d
    6501cb34:	lea    r8,[rip+0xfffffffffffffba5]        # 0x6501c6e0
    6501cb3b:	xor    edx,edx
    6501cb3d:	xor    ecx,ecx
    6501cb3f:	call   QWORD PTR [rip+0x17573]        # 0x650340b8
    6501cb45:	test   rax,rax
    6501cb48:	je     0x6501cb53
    6501cb4a:	mov    rcx,rax
    6501cb4d:	call   QWORD PTR [rip+0x1750d]        # 0x65034060
    6501cb53:	xor    eax,eax
    6501cb55:	mov    rcx,QWORD PTR [rsp+0x250]
    6501cb5d:	xor    rcx,rsp
    6501cb60:	call   0x6501e650
    6501cb65:	add    rsp,0x260
    6501cb6c:	pop    rbx
    6501cb6d:	ret    
    6501cb6e:	int3   
    6501cb6f:	int3   
    6501cb70:	rex push rbp
    6501cb72:	sub    rsp,0x20
    6501cb76:	mov    rbp,rdx
    6501cb79:	lea    rcx,[rbp+0x30]
    6501cb7d:	call   0x65001cb0
    6501cb82:	add    rsp,0x20
    6501cb86:	pop    rbp
    6501cb87:	ret    
    6501cb88:	int3   
    6501cb89:	int3   
    6501cb8a:	int3   
    6501cb8b:	int3   
    6501cb8c:	int3   
    6501cb8d:	int3   
    6501cb8e:	int3   
    6501cb8f:	int3   
    6501cb90:	sub    rsp,0x38
    6501cb94:	xor    eax,eax
    6501cb96:	lea    r8,[rip+0xfffffffffffffeb3]        # 0x6501ca50
    6501cb9d:	xor    r9d,r9d
    6501cba0:	mov    QWORD PTR [rsp+0x28],rax
    6501cba5:	xor    edx,edx
    6501cba7:	xor    ecx,ecx
    6501cba9:	mov    DWORD PTR [rsp+0x20],eax
    6501cbad:	call   QWORD PTR [rip+0x17505]        # 0x650340b8
    6501cbb3:	add    rsp,0x38
    6501cbb7:	ret    
    6501cbb8:	rex push rbx
    6501cbba:	sub    rsp,0x30
    6501cbbe:	mov    rax,QWORD PTR [rip+0x2655b]        # 0x65043120
    6501cbc5:	xor    rax,rsp
    6501cbc8:	mov    QWORD PTR [rsp+0x28],rax
    6501cbcd:	xor    ebx,ebx
    6501cbcf:	call   QWORD PTR [rip+0x17563]        # 0x65034138
    6501cbd5:	lea    r9d,[rbx+0x7]
    6501cbd9:	lea    r8,[rsp+0x20]
    6501cbde:	mov    edx,0x1004
    6501cbe3:	mov    ecx,eax
    6501cbe5:	call   QWORD PTR [rip+0x175ad]        # 0x65034198
    6501cbeb:	test   eax,eax
    6501cbed:	je     0x6501cc14
    6501cbef:	mov    al,BYTE PTR [rsp+0x20]
    6501cbf3:	lea    rdx,[rsp+0x20]
    6501cbf8:	test   al,al
    6501cbfa:	je     0x6501cc14
    6501cbfc:	movsx  eax,al
    6501cbff:	add    rdx,0x1
    6501cc03:	lea    ecx,[rbx+rbx*4]
    6501cc06:	lea    ebx,[rax+rcx*2-0x30]
    6501cc0a:	mov    al,BYTE PTR [rdx]
    6501cc0c:	test   al,al
    6501cc0e:	jne    0x6501cbfc
    6501cc10:	test   ebx,ebx
    6501cc12:	jne    0x6501cc1c
    6501cc14:	call   QWORD PTR [rip+0x17576]        # 0x65034190
    6501cc1a:	mov    ebx,eax
    6501cc1c:	mov    eax,ebx
    6501cc1e:	mov    rcx,QWORD PTR [rsp+0x28]
    6501cc23:	xor    rcx,rsp
    6501cc26:	call   0x6501e650
    6501cc2b:	add    rsp,0x30
    6501cc2f:	pop    rbx
    6501cc30:	ret    
    6501cc31:	int3   
    6501cc32:	int3   
    6501cc33:	int3   
    6501cc34:	mov    eax,0x3
    6501cc39:	ret    
    6501cc3a:	int3   
    6501cc3b:	int3   
    6501cc3c:	sub    rsp,0xd8
    6501cc43:	mov    rax,QWORD PTR [rip+0x264d6]        # 0x65043120
    6501cc4a:	xor    rax,rsp
    6501cc4d:	mov    QWORD PTR [rsp+0xc0],rax
    6501cc55:	lea    rcx,[rsp+0x20]
    6501cc5a:	mov    DWORD PTR [rsp+0x20],0x94
    6501cc62:	call   QWORD PTR [rip+0x17540]        # 0x650341a8
    6501cc68:	cmp    DWORD PTR [rsp+0x30],0x2
    6501cc6d:	jne    0x6501cc7d
    6501cc6f:	cmp    DWORD PTR [rsp+0x24],0x5
    6501cc74:	lea    rax,[rip+0xffffffffffffffb9]        # 0x6501cc34
    6501cc7b:	jae    0x6501cc84
    6501cc7d:	lea    rax,[rip+0xffffffffffffff34]        # 0x6501cbb8
    6501cc84:	xchg   QWORD PTR [rip+0x2640d],rax        # 0x65043098
    6501cc8b:	call   QWORD PTR [rip+0x26407]        # 0x65043098
    6501cc91:	mov    rcx,QWORD PTR [rsp+0xc0]
    6501cc99:	xor    rcx,rsp
    6501cc9c:	call   0x6501e650
    6501cca1:	add    rsp,0xd8
    6501cca8:	ret    
    6501cca9:	int3   
    6501ccaa:	int3   
    6501ccab:	int3   
    6501ccac:	sub    rsp,0x38
    6501ccb0:	call   QWORD PTR [rip+0x173f2]        # 0x650340a8
    6501ccb6:	xor    r11d,r11d
    6501ccb9:	mov    DWORD PTR [rsp+0x20],r11d
    6501ccbe:	jmp    0x6501cccb
    6501ccc0:	mov    r11d,0x8007000e
    6501ccc6:	mov    DWORD PTR [rsp+0x20],r11d
    6501cccb:	mov    eax,r11d
    6501ccce:	add    rsp,0x38
    6501ccd2:	ret    
    6501ccd3:	int3   
    6501ccd4:	int3   
    6501ccd5:	int3   
    6501ccd6:	int3   
    6501ccd7:	int3   
    6501ccd8:	int3   
    6501ccd9:	int3   
    6501ccda:	int3   
    6501ccdb:	int3   
    6501ccdc:	rex push rbp
    6501ccde:	sub    rsp,0x20
    6501cce2:	mov    rbp,rdx
    6501cce5:	mov    rax,QWORD PTR [rcx]
    6501cce8:	xor    r11d,r11d
    6501cceb:	cmp    DWORD PTR [rax],0xc0000017
    6501ccf1:	sete   r11b
    6501ccf5:	mov    eax,r11d
    6501ccf8:	add    rsp,0x20
    6501ccfc:	pop    rbp
    6501ccfd:	ret    
    6501ccfe:	int3   
    6501ccff:	int3   
    6501cd00:	mov    QWORD PTR [rsp+0x8],rbx
    6501cd05:	mov    QWORD PTR [rsp+0x10],rbp
    6501cd0a:	mov    QWORD PTR [rsp+0x18],rsi
    6501cd0f:	push   rdi
    6501cd10:	sub    rsp,0x20
    6501cd14:	test   rcx,rcx
    6501cd17:	mov    rbp,rdx
    6501cd1a:	mov    rbx,rcx
    6501cd1d:	jne    0x6501cd26
    6501cd1f:	mov    eax,0x80070057
    6501cd24:	jmp    0x6501cd8a
    6501cd26:	cmp    DWORD PTR [rcx],0x0
    6501cd29:	je     0x6501cd88
    6501cd2b:	cmp    DWORD PTR [rcx],0x48
    6501cd2e:	jne    0x6501cd1f
    6501cd30:	xor    edi,edi
    6501cd32:	cmp    DWORD PTR [rcx+0x40],edi
    6501cd35:	jle    0x6501cd60
    6501cd37:	xor    esi,esi
    6501cd39:	test   rsi,rsi
    6501cd3c:	js     0x6501cd9f
    6501cd3e:	cmp    edi,DWORD PTR [rbx+0x40]
    6501cd41:	jge    0x6501cd9f
    6501cd43:	mov    rax,QWORD PTR [rbx+0x38]
    6501cd47:	mov    rdx,rbp
    6501cd4a:	movzx  ecx,WORD PTR [rax+rsi*1]
    6501cd4e:	call   QWORD PTR [rip+0x1760c]        # 0x65034360
    6501cd54:	add    edi,0x1
    6501cd57:	add    rsi,0x2
    6501cd5b:	cmp    edi,DWORD PTR [rbx+0x40]
    6501cd5e:	jl     0x6501cd39
    6501cd60:	mov    rcx,QWORD PTR [rbx+0x38]
    6501cd64:	test   rcx,rcx
    6501cd67:	je     0x6501cd73
    6501cd69:	call   0x6501fc00
    6501cd6e:	and    QWORD PTR [rbx+0x38],0x0
    6501cd73:	and    DWORD PTR [rbx+0x40],0x0
    6501cd77:	and    DWORD PTR [rbx+0x44],0x0
    6501cd7b:	lea    rcx,[rbx+0x8]
    6501cd7f:	call   QWORD PTR [rip+0x173a3]        # 0x65034128
    6501cd85:	and    DWORD PTR [rbx],0x0
    6501cd88:	xor    eax,eax
    6501cd8a:	mov    rbx,QWORD PTR [rsp+0x30]
    6501cd8f:	mov    rbp,QWORD PTR [rsp+0x38]
    6501cd94:	mov    rsi,QWORD PTR [rsp+0x40]
    6501cd99:	add    rsp,0x20
    6501cd9d:	pop    rdi
    6501cd9e:	ret    
    6501cd9f:	xor    r9d,r9d
    6501cda2:	xor    r8d,r8d
    6501cda5:	mov    ecx,0xc000008c
    6501cdaa:	lea    edx,[r9+0x1]
    6501cdae:	call   QWORD PTR [rip+0x173fc]        # 0x650341b0
    6501cdb4:	int3   
    6501cdb5:	int3   
    6501cdb6:	int3   
    6501cdb7:	int3   
    6501cdb8:	rex push rbx
    6501cdba:	sub    rsp,0x20
    6501cdbe:	mov    rbx,rcx
    6501cdc1:	add    rcx,0x28
    6501cdc5:	call   QWORD PTR [rip+0x1735d]        # 0x65034128
    6501cdcb:	mov    rcx,QWORD PTR [rbx+0x50]
    6501cdcf:	test   rcx,rcx
    6501cdd2:	je     0x6501cdde
    6501cdd4:	call   0x6501fc00
    6501cdd9:	and    QWORD PTR [rbx+0x50],0x0
    6501cdde:	and    DWORD PTR [rbx+0x58],0x0
    6501cde2:	and    DWORD PTR [rbx+0x5c],0x0
    6501cde6:	add    rsp,0x20
    6501cdea:	pop    rbx
    6501cdeb:	ret    
    6501cdec:	mov    QWORD PTR [rsp+0x8],rbx
    6501cdf1:	mov    QWORD PTR [rsp+0x10],rsi
    6501cdf6:	push   rdi
    6501cdf7:	sub    rsp,0x20
    6501cdfb:	mov    rsi,rcx
    6501cdfe:	add    rcx,0x28
    6501ce02:	movsxd rbx,edx
    6501ce05:	call   QWORD PTR [rip+0x1730d]        # 0x65034118
    6501ce0b:	cmp    ebx,DWORD PTR [rsi+0x58]
    6501ce0e:	jg     0x6501ce4e
    6501ce10:	test   ebx,ebx
    6501ce12:	js     0x6501ce4e
    6501ce14:	cmp    ebx,DWORD PTR [rsi+0x58]
    6501ce17:	jne    0x6501ce2c
    6501ce19:	mov    rbx,QWORD PTR [rsi+0x10]
    6501ce1d:	lea    rcx,[rsi+0x28]
    6501ce21:	call   QWORD PTR [rip+0x172f9]        # 0x65034120
    6501ce27:	mov    rax,rbx
    6501ce2a:	jmp    0x6501ce5a
    6501ce2c:	jge    0x6501ce38
    6501ce2e:	mov    rax,QWORD PTR [rsi+0x50]
    6501ce32:	mov    rbx,QWORD PTR [rax+rbx*8]
    6501ce36:	jmp    0x6501ce1d
    6501ce38:	xor    r9d,r9d
    6501ce3b:	xor    r8d,r8d
    6501ce3e:	mov    ecx,0xc000008c
    6501ce43:	lea    edx,[r9+0x1]
    6501ce47:	call   QWORD PTR [rip+0x17363]        # 0x650341b0
    6501ce4d:	int3   
    6501ce4e:	lea    rcx,[rsi+0x28]
    6501ce52:	call   QWORD PTR [rip+0x172c8]        # 0x65034120
    6501ce58:	xor    eax,eax
    6501ce5a:	mov    rbx,QWORD PTR [rsp+0x30]
    6501ce5f:	mov    rsi,QWORD PTR [rsp+0x38]
    6501ce64:	add    rsp,0x20
    6501ce68:	pop    rdi
    6501ce69:	ret    
    6501ce6a:	int3   
    6501ce6b:	int3   
    6501ce6c:	mov    QWORD PTR [rsp+0x10],rbx
    6501ce71:	mov    QWORD PTR [rsp+0x18],rsi
    6501ce76:	push   rdi
    6501ce77:	sub    rsp,0xd0
    6501ce7e:	mov    rax,QWORD PTR [rip+0x2629b]        # 0x65043120
    6501ce85:	xor    rax,rsp
    6501ce88:	mov    QWORD PTR [rsp+0xc0],rax
    6501ce90:	xor    edx,edx
    6501ce92:	mov    rbx,rcx
    6501ce95:	lea    r8d,[rdx+0x28]
    6501ce99:	add    rcx,r8
    6501ce9c:	call   0x6501efa0
    6501cea1:	and    QWORD PTR [rbx+0x50],0x0
    6501cea6:	and    DWORD PTR [rbx+0x58],0x0
    6501ceaa:	and    DWORD PTR [rbx+0x5c],0x0
    6501ceae:	lea    rax,[rip+0xfffffffffffe314b]        # 0x65000000
    6501ceb5:	mov    esi,0x94
    6501ceba:	lea    rcx,[rsp+0x20]
    6501cebf:	mov    r8,rsi
    6501cec2:	xor    edx,edx
    6501cec4:	mov    QWORD PTR [rbx+0x10],rax
    6501cec8:	mov    QWORD PTR [rbx+0x8],rax
    6501cecc:	mov    DWORD PTR [rbx],0x60
    6501ced2:	mov    BYTE PTR [rbx+0x18],0x0
    6501ced6:	call   0x6501efa0
    6501cedb:	lea    rcx,[rsp+0x20]
    6501cee0:	mov    DWORD PTR [rsp+0x20],esi
    6501cee4:	call   QWORD PTR [rip+0x172be]        # 0x650341a8
    6501ceea:	cmp    DWORD PTR [rsp+0x30],0x2
    6501ceef:	mov    esi,0x1
    6501cef4:	jne    0x6501ceff
    6501cef6:	cmp    DWORD PTR [rsp+0x24],0x5
    6501cefb:	jb     0x6501cf19
    6501cefd:	jmp    0x6501cf15
    6501ceff:	cmp    DWORD PTR [rsp+0x30],esi
    6501cf03:	jne    0x6501cf19
    6501cf05:	cmp    DWORD PTR [rsp+0x24],0x4
    6501cf0a:	ja     0x6501cf15
    6501cf0c:	jne    0x6501cf19
    6501cf0e:	cmp    DWORD PTR [rsp+0x28],0x0
    6501cf13:	jbe    0x6501cf19
    6501cf15:	mov    BYTE PTR [rbx+0x18],sil
    6501cf19:	lea    rax,[rip+0x18228]        # 0x65035148
    6501cf20:	lea    rcx,[rbx+0x28]
    6501cf24:	mov    DWORD PTR [rbx+0x1c],0x800
    6501cf2b:	mov    QWORD PTR [rbx+0x20],rax
    6501cf2f:	call   0x6501ccac
    6501cf34:	movzx  ecx,BYTE PTR [rip+0x2aeb5]        # 0x65047df0
    6501cf3b:	test   eax,eax
    6501cf3d:	mov    rax,rbx
    6501cf40:	cmovs  ecx,esi
    6501cf43:	mov    BYTE PTR [rip+0x2aea7],cl        # 0x65047df0
    6501cf49:	mov    rcx,QWORD PTR [rsp+0xc0]
    6501cf51:	xor    rcx,rsp
    6501cf54:	call   0x6501e650
    6501cf59:	lea    r11,[rsp+0xd0]
    6501cf61:	mov    rbx,QWORD PTR [r11+0x18]
    6501cf65:	mov    rsi,QWORD PTR [r11+0x20]
    6501cf69:	mov    rsp,r11
    6501cf6c:	pop    rdi
    6501cf6d:	ret    
    6501cf6e:	int3   
    6501cf6f:	int3   
    6501cf70:	mov    rcx,QWORD PTR [rcx+0x8]
    6501cf74:	mov    r8,rdx
    6501cf77:	xor    edx,edx
    6501cf79:	rex.W jmp QWORD PTR [rip+0x17240]        # 0x650341c0
    6501cf80:	sub    rsp,0x28
    6501cf84:	test   rdx,rdx
    6501cf87:	je     0x6501cf98
    6501cf89:	mov    rcx,QWORD PTR [rcx+0x8]
    6501cf8d:	mov    r8,rdx
    6501cf90:	xor    edx,edx
    6501cf92:	call   QWORD PTR [rip+0x17230]        # 0x650341c8
    6501cf98:	add    rsp,0x28
    6501cf9c:	ret    
    6501cf9d:	int3   
    6501cf9e:	int3   
    6501cf9f:	int3   
    6501cfa0:	sub    rsp,0x28
    6501cfa4:	test   rdx,rdx
    6501cfa7:	jne    0x6501cfb3
    6501cfa9:	mov    rax,QWORD PTR [rcx]
    6501cfac:	mov    rdx,r8
    6501cfaf:	call   QWORD PTR [rax]
    6501cfb1:	jmp    0x6501cfd4
    6501cfb3:	test   r8,r8
    6501cfb6:	jne    0x6501cfc2
    6501cfb8:	mov    rax,QWORD PTR [rcx]
    6501cfbb:	call   QWORD PTR [rax+0x8]
    6501cfbe:	xor    eax,eax
    6501cfc0:	jmp    0x6501cfd4
    6501cfc2:	mov    rcx,QWORD PTR [rcx+0x8]
    6501cfc6:	mov    r9,r8
    6501cfc9:	mov    r8,rdx
    6501cfcc:	xor    edx,edx
    6501cfce:	call   QWORD PTR [rip+0x171fc]        # 0x650341d0
    6501cfd4:	add    rsp,0x28
    6501cfd8:	ret    
    6501cfd9:	int3   
    6501cfda:	int3   
    6501cfdb:	int3   
    6501cfdc:	mov    rcx,QWORD PTR [rcx+0x8]
    6501cfe0:	mov    r8,rdx
    6501cfe3:	xor    edx,edx
    6501cfe5:	rex.W jmp QWORD PTR [rip+0x171ec]        # 0x650341d8
    6501cfec:	mov    QWORD PTR [rsp+0x8],rbx
    6501cff1:	push   rdi
    6501cff2:	sub    rsp,0x20
    6501cff6:	cmp    BYTE PTR [rcx+0x10],0x0
    6501cffa:	lea    rax,[rip+0x18157]        # 0x65035158
    6501d001:	mov    edi,edx
    6501d003:	mov    QWORD PTR [rcx],rax
    6501d006:	mov    rbx,rcx
    6501d009:	je     0x6501d01a
    6501d00b:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d00f:	test   rcx,rcx
    6501d012:	je     0x6501d01a
    6501d014:	call   QWORD PTR [rip+0x1719e]        # 0x650341b8
    6501d01a:	test   dil,0x1
    6501d01e:	je     0x6501d028
    6501d020:	mov    rcx,rbx
    6501d023:	call   0x6501d300
    6501d028:	mov    rax,rbx
    6501d02b:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d030:	add    rsp,0x20
    6501d034:	pop    rdi
    6501d035:	ret    
    6501d036:	int3   
    6501d037:	int3   
    6501d038:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d03c:	mov    rax,QWORD PTR [rcx]
    6501d03f:	rex.W jmp QWORD PTR [rax+0x8]
    6501d043:	int3   
    6501d044:	lock add DWORD PTR [rcx+0x20],0x1
    6501d049:	lea    rax,[rcx+0x10]
    6501d04d:	ret    
    6501d04e:	int3   
    6501d04f:	int3   
    6501d050:	mov    rax,rcx
    6501d053:	ret    
    6501d054:	rex push rbx
    6501d056:	sub    rsp,0x20
    6501d05a:	test   dl,0x1
    6501d05d:	lea    rax,[rip+0x1811c]        # 0x65035180
    6501d064:	mov    rbx,rcx
    6501d067:	mov    QWORD PTR [rcx],rax
    6501d06a:	je     0x6501d071
    6501d06c:	call   0x6501d300
    6501d071:	mov    rax,rbx
    6501d074:	add    rsp,0x20
    6501d078:	pop    rbx
    6501d079:	ret    
    6501d07a:	int3   
    6501d07b:	int3   
    6501d07c:	mov    QWORD PTR [rsp+0x8],rbx
    6501d081:	push   rdi
    6501d082:	sub    rsp,0x20
    6501d086:	lea    ebx,[rdx+0x8]
    6501d089:	movsxd r9,r8d
    6501d08c:	mov    rdi,rcx
    6501d08f:	and    ebx,0xfffffff8
    6501d092:	movsxd r8,ebx
    6501d095:	jne    0x6501d09c
    6501d097:	xor    r8d,r8d
    6501d09a:	jmp    0x6501d0b4
    6501d09c:	xor    edx,edx
    6501d09e:	or     rax,0xffffffffffffffff
    6501d0a2:	div    r8
    6501d0a5:	cmp    rax,r9
    6501d0a8:	jb     0x6501d0e4
    6501d0aa:	imul   r8,r9
    6501d0ae:	cmp    r8,0xffffffffffffffe7
    6501d0b2:	ja     0x6501d0e4
    6501d0b4:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d0b8:	lea    rdx,[r8+0x18]
    6501d0bc:	mov    rax,QWORD PTR [rcx]
    6501d0bf:	call   QWORD PTR [rax]
    6501d0c1:	test   rax,rax
    6501d0c4:	mov    r11,rax
    6501d0c7:	je     0x6501d0e4
    6501d0c9:	and    DWORD PTR [r11+0x8],0x0
    6501d0ce:	mov    QWORD PTR [rax],rdi
    6501d0d1:	mov    DWORD PTR [rax+0x10],0x1
    6501d0d8:	lea    eax,[rbx-0x1]
    6501d0db:	mov    DWORD PTR [r11+0xc],eax
    6501d0df:	mov    rax,r11
    6501d0e2:	jmp    0x6501d0e6
    6501d0e4:	xor    eax,eax
    6501d0e6:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d0eb:	add    rsp,0x20
    6501d0ef:	pop    rdi
    6501d0f0:	ret    
    6501d0f1:	int3   
    6501d0f2:	int3   
    6501d0f3:	int3   
    6501d0f4:	rex push rbx
    6501d0f6:	sub    rsp,0x20
    6501d0fa:	lea    ebx,[r8+0x8]
    6501d0fe:	mov    eax,r9d
    6501d101:	and    ebx,0xfffffff8
    6501d104:	mov    r8d,ebx
    6501d107:	imul   r8,rax
    6501d10b:	mov    eax,0xffffffff
    6501d110:	cmp    r8,rax
    6501d113:	ja     0x6501d13e
    6501d115:	cmp    r8d,0xffffffe7
    6501d119:	ja     0x6501d13e
    6501d11b:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d11f:	add    r8d,0x18
    6501d123:	mov    r9,QWORD PTR [rcx]
    6501d126:	call   QWORD PTR [r9+0x10]
    6501d12a:	test   rax,rax
    6501d12d:	mov    r11,rax
    6501d130:	je     0x6501d13e
    6501d132:	lea    eax,[rbx-0x1]
    6501d135:	mov    DWORD PTR [r11+0xc],eax
    6501d139:	mov    rax,r11
    6501d13c:	jmp    0x6501d140
    6501d13e:	xor    eax,eax
    6501d140:	add    rsp,0x20
    6501d144:	pop    rbx
    6501d145:	ret    
    6501d146:	int3   
    6501d147:	int3   
    6501d148:	int3   
    6501d149:	int3   
    6501d14a:	int3   
    6501d14b:	int3   
    6501d14c:	int3   
    6501d14d:	int3   
    6501d14e:	int3   
    6501d14f:	int3   
    6501d150:	sub    rsp,0x98
    6501d157:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501d160:	lea    rdx,[rip+0x180d1]        # 0x65035238
    6501d167:	lea    rcx,[rsp+0x28]
    6501d16c:	call   0x65003c70
    6501d171:	nop
    6501d172:	lea    rcx,[rsp+0x50]
    6501d177:	call   0x6501d310
    6501d17c:	nop
    6501d17d:	lea    rax,[rip+0x1804c]        # 0x650351d0
    6501d184:	mov    QWORD PTR [rsp+0x50],rax
    6501d189:	mov    QWORD PTR [rsp+0x88],0xf
    6501d195:	mov    QWORD PTR [rsp+0x80],0x0
    6501d1a1:	mov    BYTE PTR [rsp+0x70],0x0
    6501d1a6:	or     r9,0xffffffffffffffff
    6501d1aa:	xor    r8d,r8d
    6501d1ad:	lea    rdx,[rsp+0x28]
    6501d1b2:	lea    rcx,[rsp+0x68]
    6501d1b7:	call   0x65001e20
    6501d1bc:	nop
    6501d1bd:	lea    rax,[rip+0x18024]        # 0x650351e8
    6501d1c4:	mov    QWORD PTR [rsp+0x50],rax
    6501d1c9:	lea    rdx,[rip+0x243a8]        # 0x65041578
    6501d1d0:	lea    rcx,[rsp+0x50]
    6501d1d5:	call   0x6501dc60
    6501d1da:	int3   
    6501d1db:	int3   
    6501d1dc:	int3   
    6501d1dd:	int3   
    6501d1de:	int3   
    6501d1df:	int3   
    6501d1e0:	rex push rbp
    6501d1e2:	sub    rsp,0x20
    6501d1e6:	mov    rbp,rdx
    6501d1e9:	lea    rcx,[rbp+0x28]
    6501d1ed:	call   0x65001c70
    6501d1f2:	add    rsp,0x20
    6501d1f6:	pop    rbp
    6501d1f7:	ret    
    6501d1f8:	int3   
    6501d1f9:	int3   
    6501d1fa:	int3   
    6501d1fb:	int3   
    6501d1fc:	int3   
    6501d1fd:	int3   
    6501d1fe:	int3   
    6501d1ff:	int3   
    6501d200:	rex push rbp
    6501d202:	sub    rsp,0x20
    6501d206:	mov    rbp,rdx
    6501d209:	lea    rcx,[rbp+0x50]
    6501d20d:	call   0x6501d490
    6501d212:	add    rsp,0x20
    6501d216:	pop    rbp
    6501d217:	ret    
    6501d218:	int3   
    6501d219:	int3   
    6501d21a:	int3   
    6501d21b:	int3   
    6501d21c:	int3   
    6501d21d:	int3   
    6501d21e:	int3   
    6501d21f:	int3   
    6501d220:	sub    rsp,0x98
    6501d227:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
    6501d230:	lea    rdx,[rip+0x18039]        # 0x65035270
    6501d237:	lea    rcx,[rsp+0x28]
    6501d23c:	call   0x65003c70
    6501d241:	nop
    6501d242:	lea    rcx,[rsp+0x50]
    6501d247:	call   0x6501d310
    6501d24c:	nop
    6501d24d:	lea    rax,[rip+0x17f7c]        # 0x650351d0
    6501d254:	mov    QWORD PTR [rsp+0x50],rax
    6501d259:	mov    QWORD PTR [rsp+0x88],0xf
    6501d265:	mov    QWORD PTR [rsp+0x80],0x0
    6501d271:	mov    BYTE PTR [rsp+0x70],0x0
    6501d276:	or     r9,0xffffffffffffffff
    6501d27a:	xor    r8d,r8d
    6501d27d:	lea    rdx,[rsp+0x28]
    6501d282:	lea    rcx,[rsp+0x68]
    6501d287:	call   0x65001e20
    6501d28c:	nop
    6501d28d:	lea    rax,[rip+0x17f6c]        # 0x65035200
    6501d294:	mov    QWORD PTR [rsp+0x50],rax
    6501d299:	lea    rdx,[rip+0x24270]        # 0x65041510
    6501d2a0:	lea    rcx,[rsp+0x50]
    6501d2a5:	call   0x6501dc60
    6501d2aa:	int3   
    6501d2ab:	int3   
    6501d2ac:	int3   
    6501d2ad:	int3   
    6501d2ae:	int3   
    6501d2af:	int3   
    6501d2b0:	rex push rbp
    6501d2b2:	sub    rsp,0x20
    6501d2b6:	mov    rbp,rdx
    6501d2b9:	lea    rcx,[rbp+0x28]
    6501d2bd:	call   0x65001c70
    6501d2c2:	add    rsp,0x20
    6501d2c6:	pop    rbp
    6501d2c7:	ret    
    6501d2c8:	int3   
    6501d2c9:	int3   
    6501d2ca:	int3   
    6501d2cb:	int3   
    6501d2cc:	int3   
    6501d2cd:	int3   
    6501d2ce:	int3   
    6501d2cf:	int3   
    6501d2d0:	rex push rbp
    6501d2d2:	sub    rsp,0x20
    6501d2d6:	mov    rbp,rdx
    6501d2d9:	lea    rcx,[rbp+0x50]
    6501d2dd:	call   0x6501d490
    6501d2e2:	add    rsp,0x20
    6501d2e6:	pop    rbp
    6501d2e7:	ret    
    6501d2e8:	int3   
    6501d2e9:	int3   
    6501d2ea:	int3   
    6501d2eb:	int3   
    6501d2ec:	int3   
    6501d2ed:	int3   
    6501d2ee:	int3   
    6501d2ef:	int3   
    6501d2f0:	jmp    0x6501dbc0
    6501d2f5:	int3   
    6501d2f6:	int3   
    6501d2f7:	int3   
    6501d2f8:	int3   
    6501d2f9:	int3   
    6501d2fa:	int3   
    6501d2fb:	int3   
    6501d2fc:	int3   
    6501d2fd:	int3   
    6501d2fe:	int3   
    6501d2ff:	int3   
    6501d300:	jmp    0x6501fc00
    6501d305:	int3   
    6501d306:	int3   
    6501d307:	int3   
    6501d308:	int3   
    6501d309:	int3   
    6501d30a:	int3   
    6501d30b:	int3   
    6501d30c:	int3   
    6501d30d:	int3   
    6501d30e:	int3   
    6501d30f:	int3   
    6501d310:	lea    rax,[rip+0x17f79]        # 0x65035290
    6501d317:	mov    QWORD PTR [rcx],rax
    6501d31a:	xor    eax,eax
    6501d31c:	mov    QWORD PTR [rcx+0x8],rax
    6501d320:	mov    DWORD PTR [rcx+0x10],eax
    6501d323:	mov    rax,rcx
    6501d326:	ret    
    6501d327:	int3   
    6501d328:	int3   
    6501d329:	int3   
    6501d32a:	int3   
    6501d32b:	int3   
    6501d32c:	int3   
    6501d32d:	int3   
    6501d32e:	int3   
    6501d32f:	int3   
    6501d330:	mov    QWORD PTR [rsp+0x8],rbx
    6501d335:	mov    QWORD PTR [rsp+0x10],rsi
    6501d33a:	push   rdi
    6501d33b:	sub    rsp,0x20
    6501d33f:	lea    rax,[rip+0x17f4a]        # 0x65035290
    6501d346:	mov    rsi,rdx
    6501d349:	mov    rbx,rcx
    6501d34c:	mov    QWORD PTR [rcx],rax
    6501d34f:	mov    rdi,QWORD PTR [rdx]
    6501d352:	test   rdi,rdi
    6501d355:	je     0x6501d39d
    6501d357:	or     rcx,0xffffffffffffffff
    6501d35b:	xor    eax,eax
    6501d35d:	repnz scas al,BYTE PTR es:[rdi]
    6501d35f:	not    rcx
    6501d362:	lea    rdi,[rcx-0x1]
    6501d366:	call   0x6501fc50
    6501d36b:	test   rax,rax
    6501d36e:	mov    QWORD PTR [rbx+0x8],rax
    6501d372:	je     0x6501d383
    6501d374:	mov    r8,QWORD PTR [rsi]
    6501d377:	lea    rdx,[rdi+0x1]
    6501d37b:	mov    rcx,rax
    6501d37e:	call   0x65020320
    6501d383:	mov    DWORD PTR [rbx+0x10],0x1
    6501d38a:	mov    rax,rbx
    6501d38d:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d392:	mov    rsi,QWORD PTR [rsp+0x38]
    6501d397:	add    rsp,0x20
    6501d39b:	pop    rdi
    6501d39c:	ret    
    6501d39d:	mov    rsi,QWORD PTR [rsp+0x38]
    6501d3a2:	mov    rax,rbx
    6501d3a5:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d3aa:	mov    QWORD PTR [rcx+0x8],0x0
    6501d3b2:	mov    DWORD PTR [rcx+0x10],0x1
    6501d3b9:	add    rsp,0x20
    6501d3bd:	pop    rdi
    6501d3be:	ret    
    6501d3bf:	int3   
    6501d3c0:	lea    rax,[rip+0x17ec9]        # 0x65035290
    6501d3c7:	mov    QWORD PTR [rcx],rax
    6501d3ca:	mov    rax,QWORD PTR [rdx]
    6501d3cd:	mov    DWORD PTR [rcx+0x10],0x0
    6501d3d4:	mov    QWORD PTR [rcx+0x8],rax
    6501d3d8:	mov    rax,rcx
    6501d3db:	ret    
    6501d3dc:	int3   
    6501d3dd:	int3   
    6501d3de:	int3   
    6501d3df:	int3   
    6501d3e0:	mov    QWORD PTR [rsp+0x10],rbx
    6501d3e5:	push   rsi
    6501d3e6:	sub    rsp,0x20
    6501d3ea:	lea    rax,[rip+0x17e9f]        # 0x65035290
    6501d3f1:	mov    rsi,rdx
    6501d3f4:	mov    rbx,rcx
    6501d3f7:	mov    QWORD PTR [rcx],rax
    6501d3fa:	mov    eax,DWORD PTR [rdx+0x10]
    6501d3fd:	test   eax,eax
    6501d3ff:	mov    DWORD PTR [rcx+0x10],eax
    6501d402:	je     0x6501d46d
    6501d404:	mov    QWORD PTR [rsp+0x30],rdi
    6501d409:	mov    rdi,QWORD PTR [rdx+0x8]
    6501d40d:	test   rdi,rdi
    6501d410:	je     0x6501d452
    6501d412:	or     rcx,0xffffffffffffffff
    6501d416:	xor    eax,eax
    6501d418:	repnz scas al,BYTE PTR es:[rdi]
    6501d41a:	not    rcx
    6501d41d:	lea    rdi,[rcx-0x1]
    6501d421:	call   0x6501fc50
    6501d426:	test   rax,rax
    6501d429:	mov    QWORD PTR [rbx+0x8],rax
    6501d42d:	je     0x6501d43f
    6501d42f:	mov    r8,QWORD PTR [rsi+0x8]
    6501d433:	lea    rdx,[rdi+0x1]
    6501d437:	mov    rcx,rax
    6501d43a:	call   0x65020320
    6501d43f:	mov    rax,rbx
    6501d442:	mov    rdi,QWORD PTR [rsp+0x30]
    6501d447:	mov    rbx,QWORD PTR [rsp+0x38]
    6501d44c:	add    rsp,0x20
    6501d450:	pop    rsi
    6501d451:	ret    
    6501d452:	mov    rdi,QWORD PTR [rsp+0x30]
    6501d457:	mov    QWORD PTR [rcx+0x8],0x0
    6501d45f:	mov    rax,rbx
    6501d462:	mov    rbx,QWORD PTR [rsp+0x38]
    6501d467:	add    rsp,0x20
    6501d46b:	pop    rsi
    6501d46c:	ret    
    6501d46d:	mov    rax,QWORD PTR [rdx+0x8]
    6501d471:	mov    rbx,QWORD PTR [rsp+0x38]
    6501d476:	mov    QWORD PTR [rcx+0x8],rax
    6501d47a:	mov    rax,rcx
    6501d47d:	add    rsp,0x20
    6501d481:	pop    rsi
    6501d482:	ret    
    6501d483:	int3   
    6501d484:	int3   
    6501d485:	int3   
    6501d486:	int3   
    6501d487:	int3   
    6501d488:	int3   
    6501d489:	int3   
    6501d48a:	int3   
    6501d48b:	int3   
    6501d48c:	int3   
    6501d48d:	int3   
    6501d48e:	int3   
    6501d48f:	int3   
    6501d490:	sub    rsp,0x28
    6501d494:	cmp    DWORD PTR [rcx+0x10],0x0
    6501d498:	lea    rax,[rip+0x17df1]        # 0x65035290
    6501d49f:	mov    QWORD PTR [rcx],rax
    6501d4a2:	je     0x6501d4ad
    6501d4a4:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d4a8:	call   0x6501fc00
    6501d4ad:	add    rsp,0x28
    6501d4b1:	ret    
    6501d4b2:	int3   
    6501d4b3:	int3   
    6501d4b4:	int3   
    6501d4b5:	int3   
    6501d4b6:	int3   
    6501d4b7:	int3   
    6501d4b8:	int3   
    6501d4b9:	int3   
    6501d4ba:	int3   
    6501d4bb:	int3   
    6501d4bc:	int3   
    6501d4bd:	int3   
    6501d4be:	int3   
    6501d4bf:	int3   
    6501d4c0:	mov    rax,QWORD PTR [rcx+0x8]
    6501d4c4:	test   rax,rax
    6501d4c7:	jne    0x6501d4d0
    6501d4c9:	lea    rax,[rip+0x17dd0]        # 0x650352a0
    6501d4d0:	ret    0x0
    6501d4d3:	int3   
    6501d4d4:	int3   
    6501d4d5:	int3   
    6501d4d6:	int3   
    6501d4d7:	int3   
    6501d4d8:	int3   
    6501d4d9:	int3   
    6501d4da:	int3   
    6501d4db:	int3   
    6501d4dc:	int3   
    6501d4dd:	int3   
    6501d4de:	int3   
    6501d4df:	int3   
    6501d4e0:	mov    QWORD PTR [rsp+0x8],rbx
    6501d4e5:	mov    QWORD PTR [rsp+0x10],rsi
    6501d4ea:	push   rdi
    6501d4eb:	sub    rsp,0x20
    6501d4ef:	test   rdx,rdx
    6501d4f2:	lea    rax,[rip+0x17d97]        # 0x65035290
    6501d4f9:	mov    rsi,rdx
    6501d4fc:	mov    QWORD PTR [rcx],rax
    6501d4ff:	mov    rbx,rcx
    6501d502:	je     0x6501d535
    6501d504:	or     rcx,0xffffffffffffffff
    6501d508:	xor    eax,eax
    6501d50a:	mov    rdi,rdx
    6501d50d:	repnz scas al,BYTE PTR es:[rdi]
    6501d50f:	not    rcx
    6501d512:	lea    rdi,[rcx-0x1]
    6501d516:	call   0x6501fc50
    6501d51b:	test   rax,rax
    6501d51e:	mov    QWORD PTR [rbx+0x8],rax
    6501d522:	je     0x6501d53d
    6501d524:	lea    rdx,[rdi+0x1]
    6501d528:	mov    r8,rsi
    6501d52b:	mov    rcx,rax
    6501d52e:	call   0x65020320
    6501d533:	jmp    0x6501d53d
    6501d535:	mov    QWORD PTR [rcx+0x8],0x0
    6501d53d:	mov    rsi,QWORD PTR [rsp+0x38]
    6501d542:	lea    rax,[rip+0x17d77]        # 0x650352c0
    6501d549:	mov    DWORD PTR [rbx+0x10],0x1
    6501d550:	mov    QWORD PTR [rbx],rax
    6501d553:	mov    rax,rbx
    6501d556:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d55b:	add    rsp,0x20
    6501d55f:	pop    rdi
    6501d560:	ret    
    6501d561:	int3   
    6501d562:	int3   
    6501d563:	int3   
    6501d564:	int3   
    6501d565:	int3   
    6501d566:	int3   
    6501d567:	int3   
    6501d568:	int3   
    6501d569:	int3   
    6501d56a:	int3   
    6501d56b:	int3   
    6501d56c:	int3   
    6501d56d:	int3   
    6501d56e:	int3   
    6501d56f:	int3   
    6501d570:	mov    QWORD PTR [rsp+0x8],rbx
    6501d575:	mov    QWORD PTR [rsp+0x10],rsi
    6501d57a:	push   rdi
    6501d57b:	sub    rsp,0x20
    6501d57f:	lea    rax,[rip+0x17d0a]        # 0x65035290
    6501d586:	mov    rsi,rdx
    6501d589:	mov    rbx,rcx
    6501d58c:	mov    QWORD PTR [rcx],rax
    6501d58f:	mov    eax,DWORD PTR [rdx+0x10]
    6501d592:	test   eax,eax
    6501d594:	mov    DWORD PTR [rcx+0x10],eax
    6501d597:	je     0x6501d5db
    6501d599:	mov    rdi,QWORD PTR [rdx+0x8]
    6501d59d:	test   rdi,rdi
    6501d5a0:	je     0x6501d5d1
    6501d5a2:	or     rcx,0xffffffffffffffff
    6501d5a6:	xor    eax,eax
    6501d5a8:	repnz scas al,BYTE PTR es:[rdi]
    6501d5aa:	not    rcx
    6501d5ad:	lea    rdi,[rcx-0x1]
    6501d5b1:	call   0x6501fc50
    6501d5b6:	test   rax,rax
    6501d5b9:	mov    QWORD PTR [rbx+0x8],rax
    6501d5bd:	je     0x6501d5e3
    6501d5bf:	mov    r8,QWORD PTR [rsi+0x8]
    6501d5c3:	lea    rdx,[rdi+0x1]
    6501d5c7:	mov    rcx,rax
    6501d5ca:	call   0x65020320
    6501d5cf:	jmp    0x6501d5e3
    6501d5d1:	mov    QWORD PTR [rcx+0x8],0x0
    6501d5d9:	jmp    0x6501d5e3
    6501d5db:	mov    rax,QWORD PTR [rdx+0x8]
    6501d5df:	mov    QWORD PTR [rcx+0x8],rax
    6501d5e3:	mov    rsi,QWORD PTR [rsp+0x38]
    6501d5e8:	lea    rax,[rip+0x17cd1]        # 0x650352c0
    6501d5ef:	mov    QWORD PTR [rbx],rax
    6501d5f2:	mov    rax,rbx
    6501d5f5:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d5fa:	add    rsp,0x20
    6501d5fe:	pop    rdi
    6501d5ff:	ret    
    6501d600:	sub    rsp,0x28
    6501d604:	cmp    DWORD PTR [rcx+0x10],0x0
    6501d608:	lea    rax,[rip+0x17c81]        # 0x65035290
    6501d60f:	mov    QWORD PTR [rcx],rax
    6501d612:	je     0x6501d61d
    6501d614:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d618:	call   0x6501fc00
    6501d61d:	add    rsp,0x28
    6501d621:	ret    
    6501d622:	int3   
    6501d623:	int3   
    6501d624:	int3   
    6501d625:	int3   
    6501d626:	int3   
    6501d627:	int3   
    6501d628:	int3   
    6501d629:	int3   
    6501d62a:	int3   
    6501d62b:	int3   
    6501d62c:	int3   
    6501d62d:	int3   
    6501d62e:	int3   
    6501d62f:	int3   
    6501d630:	mov    QWORD PTR [rsp+0x8],rbx
    6501d635:	push   rdi
    6501d636:	sub    rsp,0x20
    6501d63a:	cmp    DWORD PTR [rcx+0x10],0x0
    6501d63e:	lea    rax,[rip+0x17c4b]        # 0x65035290
    6501d645:	mov    edi,edx
    6501d647:	mov    QWORD PTR [rcx],rax
    6501d64a:	mov    rbx,rcx
    6501d64d:	je     0x6501d658
    6501d64f:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d653:	call   0x6501fc00
    6501d658:	test   dil,0x1
    6501d65c:	je     0x6501d666
    6501d65e:	mov    rcx,rbx
    6501d661:	call   0x6501d300
    6501d666:	mov    rax,rbx
    6501d669:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d66e:	add    rsp,0x20
    6501d672:	pop    rdi
    6501d673:	ret    
    6501d674:	int3   
    6501d675:	int3   
    6501d676:	int3   
    6501d677:	int3   
    6501d678:	int3   
    6501d679:	int3   
    6501d67a:	int3   
    6501d67b:	int3   
    6501d67c:	int3   
    6501d67d:	int3   
    6501d67e:	int3   
    6501d67f:	int3   
    6501d680:	mov    QWORD PTR [rsp+0x8],rbx
    6501d685:	push   rdi
    6501d686:	sub    rsp,0x20
    6501d68a:	cmp    DWORD PTR [rcx+0x10],0x0
    6501d68e:	lea    rax,[rip+0x17bfb]        # 0x65035290
    6501d695:	mov    edi,edx
    6501d697:	mov    QWORD PTR [rcx],rax
    6501d69a:	mov    rbx,rcx
    6501d69d:	je     0x6501d6a8
    6501d69f:	mov    rcx,QWORD PTR [rcx+0x8]
    6501d6a3:	call   0x6501fc00
    6501d6a8:	test   dil,0x1
    6501d6ac:	je     0x6501d6b6
    6501d6ae:	mov    rcx,rbx
    6501d6b1:	call   0x6501d300
    6501d6b6:	mov    rax,rbx
    6501d6b9:	mov    rbx,QWORD PTR [rsp+0x30]
    6501d6be:	add    rsp,0x20
    6501d6c2:	pop    rdi
    6501d6c3:	ret    
    6501d6c4:	int3   
    6501d6c5:	int3   
    6501d6c6:	int3   
    6501d6c7:	int3   
    6501d6c8:	int3   
    6501d6c9:	int3   
    6501d6ca:	int3   
    6501d6cb:	int3   
    6501d6cc:	int3   
    6501d6cd:	int3   
    6501d6ce:	int3   
    6501d6cf:	int3   
    6501d6d0:	int3   
    6501d6d1:	int3   
    6501d6d2:	int3   
    6501d6d3:	int3   
    6501d6d4:	int3   
    6501d6d5:	int3   
    6501d6d6:	data16 data16 xchg ax,ax
    6501d6da:	data16 data16 xchg ax,ax
    6501d6de:	xchg   ax,ax
    6501d6e0:	sub    rdx,rcx
    6501d6e3:	cmp    r8,0x8
    6501d6e7:	jb     0x6501d70b
    6501d6e9:	test   cl,0x7
    6501d6ec:	je     0x6501d702
    6501d6ee:	xchg   ax,ax
    6501d6f0:	mov    al,BYTE PTR [rcx]
    6501d6f2:	cmp    al,BYTE PTR [rdx+rcx*1]
    6501d6f5:	jne    0x6501d723
    6501d6f7:	inc    rcx
    6501d6fa:	dec    r8
    6501d6fd:	test   cl,0x7
    6501d700:	jne    0x6501d6f0
    6501d702:	mov    r9,r8
    6501d705:	shr    r9,0x3
    6501d709:	jne    0x6501d72a
    6501d70b:	test   r8,r8
    6501d70e:	je     0x6501d71f
    6501d710:	mov    al,BYTE PTR [rcx]
    6501d712:	cmp    al,BYTE PTR [rdx+rcx*1]
    6501d715:	jne    0x6501d723
    6501d717:	inc    rcx
    6501d71a:	dec    r8
    6501d71d:	jne    0x6501d710
    6501d71f:	xor    rax,rax
    6501d722:	ret    
    6501d723:	sbb    eax,eax
    6501d725:	sbb    eax,0xffffffff
    6501d728:	ret    
    6501d729:	nop
    6501d72a:	shr    r9,0x2
    6501d72e:	je     0x6501d767
    6501d730:	mov    rax,QWORD PTR [rcx]
    6501d733:	cmp    rax,QWORD PTR [rdx+rcx*1]
    6501d737:	jne    0x6501d794
    6501d739:	mov    rax,QWORD PTR [rcx+0x8]
    6501d73d:	cmp    rax,QWORD PTR [rdx+rcx*1+0x8]
    6501d742:	jne    0x6501d790
    6501d744:	mov    rax,QWORD PTR [rcx+0x10]
    6501d748:	cmp    rax,QWORD PTR [rdx+rcx*1+0x10]
    6501d74d:	jne    0x6501d78c
    6501d74f:	mov    rax,QWORD PTR [rcx+0x18]
    6501d753:	cmp    rax,QWORD PTR [rdx+rcx*1+0x18]
    6501d758:	jne    0x6501d788
    6501d75a:	add    rcx,0x20
    6501d75e:	dec    r9
    6501d761:	jne    0x6501d730
    6501d763:	and    r8,0x1f
    6501d767:	mov    r9,r8
    6501d76a:	shr    r9,0x3
    6501d76e:	je     0x6501d70b
    6501d770:	mov    rax,QWORD PTR [rcx]
    6501d773:	cmp    rax,QWORD PTR [rdx+rcx*1]
    6501d777:	jne    0x6501d794
    6501d779:	add    rcx,0x8
    6501d77d:	dec    r9
    6501d780:	jne    0x6501d770
    6501d782:	and    r8,0x7
    6501d786:	jmp    0x6501d70b
    6501d788:	add    rcx,0x8
    6501d78c:	add    rcx,0x8
    6501d790:	add    rcx,0x8
    6501d794:	mov    rcx,QWORD PTR [rcx+rdx*1]
    6501d798:	bswap  rax
    6501d79b:	bswap  rcx
    6501d79e:	cmp    rax,rcx
    6501d7a1:	sbb    eax,eax
    6501d7a3:	sbb    eax,0xffffffff
    6501d7a6:	ret    
    6501d7a7:	int3   
    6501d7a8:	int3   
    6501d7a9:	int3   
    6501d7aa:	int3   
    6501d7ab:	int3   
    6501d7ac:	int3   
    6501d7ad:	int3   
    6501d7ae:	int3   
    6501d7af:	int3   
    6501d7b0:	mov    QWORD PTR [rsp+0x8],rbx
    6501d7b5:	mov    QWORD PTR [rsp+0x10],rsi
    6501d7ba:	push   rdi
    6501d7bb:	sub    rsp,0x30
    6501d7bf:	test   r9,r9
    6501d7c2:	mov    rbx,r9
    6501d7c5:	mov    rsi,r8
    6501d7c8:	mov    rdi,rdx
    6501d7cb:	je     0x6501d81f
    6501d7cd:	test   rcx,rcx
    6501d7d0:	jne    0x6501d80a
    6501d7d2:	call   0x65020420
    6501d7d7:	xor    r9d,r9d
    6501d7da:	xor    r8d,r8d
    6501d7dd:	xor    edx,edx
    6501d7df:	xor    ecx,ecx
    6501d7e1:	mov    QWORD PTR [rsp+0x20],0x0
    6501d7ea:	mov    DWORD PTR [rax],0x16
    6501d7f0:	call   0x6501d9c0
    6501d7f5:	mov    eax,0x16
    6501d7fa:	mov    rbx,QWORD PTR [rsp+0x40]
    6501d7ff:	mov    rsi,QWORD PTR [rsp+0x48]
    6501d804:	add    rsp,0x30
    6501d808:	pop    rdi
    6501d809:	ret    
    6501d80a:	test   r8,r8
    6501d80d:	je     0x6501d831
    6501d80f:	cmp    rdx,rbx
    6501d812:	jb     0x6501d831
    6501d814:	mov    r8,rbx
    6501d817:	mov    rdx,rsi
    6501d81a:	call   0x6501fd30
    6501d81f:	xor    eax,eax
    6501d821:	mov    rbx,QWORD PTR [rsp+0x40]
    6501d826:	mov    rsi,QWORD PTR [rsp+0x48]
    6501d82b:	add    rsp,0x30
    6501d82f:	pop    rdi
    6501d830:	ret    
    6501d831:	mov    r8,rdx
    6501d834:	xor    edx,edx
    6501d836:	call   0x6501efa0
    6501d83b:	test   rsi,rsi
    6501d83e:	je     0x6501d7d2
    6501d840:	cmp    rdi,rbx
    6501d843:	jae    0x6501d7f5
    6501d845:	call   0x65020420
    6501d84a:	xor    r9d,r9d
    6501d84d:	xor    r8d,r8d
    6501d850:	xor    edx,edx
    6501d852:	xor    ecx,ecx
    6501d854:	mov    QWORD PTR [rsp+0x20],0x0
    6501d85d:	mov    DWORD PTR [rax],0x22
    6501d863:	call   0x6501d9c0
    6501d868:	mov    rbx,QWORD PTR [rsp+0x40]
    6501d86d:	mov    rsi,QWORD PTR [rsp+0x48]
    6501d872:	mov    eax,0x22
    6501d877:	add    rsp,0x30
    6501d87b:	pop    rdi
    6501d87c:	ret    
    6501d87d:	int3   
    6501d87e:	int3   
    6501d87f:	int3   
    6501d880:	sub    rsp,0x38
    6501d884:	test   r9,r9
    6501d887:	mov    rax,r8
    6501d88a:	je     0x6501d900
    6501d88c:	test   rcx,rcx
    6501d88f:	jne    0x6501d8be
    6501d891:	call   0x65020420
    6501d896:	xor    r9d,r9d
    6501d899:	xor    r8d,r8d
    6501d89c:	xor    edx,edx
    6501d89e:	xor    ecx,ecx
    6501d8a0:	mov    QWORD PTR [rsp+0x20],0x0
    6501d8a9:	mov    DWORD PTR [rax],0x16
    6501d8af:	call   0x6501d9c0
    6501d8b4:	mov    eax,0x16
    6501d8b9:	add    rsp,0x38
    6501d8bd:	ret    
    6501d8be:	test   rax,rax
    6501d8c1:	je     0x6501d891
    6501d8c3:	cmp    rdx,r9
    6501d8c6:	jae    0x6501d8f5
    6501d8c8:	call   0x65020420
    6501d8cd:	xor    r9d,r9d
    6501d8d0:	xor    r8d,r8d
    6501d8d3:	xor    edx,edx
    6501d8d5:	xor    ecx,ecx
    6501d8d7:	mov    QWORD PTR [rsp+0x20],0x0
    6501d8e0:	mov    DWORD PTR [rax],0x22
    6501d8e6:	call   0x6501d9c0
    6501d8eb:	mov    eax,0x22
    6501d8f0:	add    rsp,0x38
    6501d8f4:	ret    
    6501d8f5:	mov    r8,r9
    6501d8f8:	mov    rdx,rax
    6501d8fb:	call   0x6501fd30
    6501d900:	xor    eax,eax
    6501d902:	add    rsp,0x38
    6501d906:	ret    
    6501d907:	int3   
    6501d908:	int3   
    6501d909:	int3   
    6501d90a:	int3   
    6501d90b:	int3   
    6501d90c:	int3   
    6501d90d:	int3   
    6501d90e:	int3   
    6501d90f:	int3   
    6501d910:	mov    QWORD PTR [rip+0x272f9],rcx        # 0x65044c10
    6501d917:	ret    
    6501d918:	int3   
    6501d919:	int3   
    6501d91a:	int3   
    6501d91b:	int3   
    6501d91c:	int3   
    6501d91d:	int3   
    6501d91e:	int3   
    6501d91f:	int3   
    6501d920:	rex push rbx
    6501d922:	sub    rsp,0x5a0
    6501d929:	lea    rcx,[rsp+0xd0]
    6501d931:	call   QWORD PTR [rip+0x168d1]        # 0x65034208
    6501d937:	lea    rcx,[rsp+0x30]
    6501d93c:	xor    edx,edx
    6501d93e:	mov    r8d,0x98
    6501d944:	call   0x6501efa0
    6501d949:	mov    rax,QWORD PTR [rsp+0x5a8]
    6501d951:	mov    DWORD PTR [rsp+0x30],0xc000000d
    6501d959:	mov    QWORD PTR [rsp+0x40],rax
    6501d95e:	lea    rax,[rsp+0x30]
    6501d963:	mov    QWORD PTR [rsp+0x20],rax
    6501d968:	lea    rax,[rsp+0xd0]
    6501d970:	mov    QWORD PTR [rsp+0x28],rax
    6501d975:	call   QWORD PTR [rip+0x16885]        # 0x65034200
    6501d97b:	xor    ecx,ecx
    6501d97d:	mov    ebx,eax
    6501d97f:	call   QWORD PTR [rip+0x16873]        # 0x650341f8
    6501d985:	lea    rcx,[rsp+0x20]
    6501d98a:	call   QWORD PTR [rip+0x16860]        # 0x650341f0
    6501d990:	test   eax,eax
    6501d992:	jne    0x6501d9a0
    6501d994:	test   ebx,ebx
    6501d996:	jne    0x6501d9a0
    6501d998:	lea    ecx,[rax+0x2]
    6501d99b:	call   0x65020510
    6501d9a0:	call   QWORD PTR [rip+0x166ca]        # 0x65034070
    6501d9a6:	mov    edx,0xc000000d
    6501d9ab:	mov    rcx,rax
    6501d9ae:	call   QWORD PTR [rip+0x16834]        # 0x650341e8
    6501d9b4:	add    rsp,0x5a0
    6501d9bb:	pop    rbx
    6501d9bc:	ret    
    6501d9bd:	int3   
    6501d9be:	int3   
    6501d9bf:	int3   
    6501d9c0:	mov    QWORD PTR [rsp+0x8],rbx
    6501d9c5:	mov    QWORD PTR [rsp+0x10],rbp
    6501d9ca:	mov    QWORD PTR [rsp+0x18],rsi
    6501d9cf:	push   rdi
    6501d9d0:	sub    rsp,0x5b0
    6501d9d7:	mov    rbp,rcx
    6501d9da:	mov    rcx,QWORD PTR [rip+0x2722f]        # 0x65044c10
    6501d9e1:	mov    ebx,r9d
    6501d9e4:	mov    rdi,r8
    6501d9e7:	mov    rsi,rdx
    6501d9ea:	call   0x650206e0
    6501d9ef:	test   rax,rax
    6501d9f2:	je     0x6501da14
    6501d9f4:	mov    r10,QWORD PTR [rsp+0x5e0]
    6501d9fc:	mov    r9d,ebx
    6501d9ff:	mov    r8,rdi
    6501da02:	mov    rdx,rsi
    6501da05:	mov    rcx,rbp
    6501da08:	mov    QWORD PTR [rsp+0x20],r10
    6501da0d:	call   rax
    6501da0f:	jmp    0x6501daa9
    6501da14:	mov    ecx,0x2
    6501da19:	call   0x65020510
    6501da1e:	lea    rcx,[rsp+0xe0]
    6501da26:	call   QWORD PTR [rip+0x167dc]        # 0x65034208
    6501da2c:	lea    rcx,[rsp+0x40]
    6501da31:	xor    edx,edx
    6501da33:	mov    r8d,0x98
    6501da39:	call   0x6501efa0
    6501da3e:	mov    rax,QWORD PTR [rsp+0x5b8]
    6501da46:	mov    DWORD PTR [rsp+0x40],0xc000000d
    6501da4e:	mov    QWORD PTR [rsp+0x50],rax
    6501da53:	lea    rax,[rsp+0x40]
    6501da58:	mov    QWORD PTR [rsp+0x30],rax
    6501da5d:	lea    rax,[rsp+0xe0]
    6501da65:	mov    QWORD PTR [rsp+0x38],rax
    6501da6a:	call   QWORD PTR [rip+0x16790]        # 0x65034200
    6501da70:	xor    ecx,ecx
    6501da72:	mov    ebx,eax
    6501da74:	call   QWORD PTR [rip+0x1677e]        # 0x650341f8
    6501da7a:	lea    rcx,[rsp+0x30]
    6501da7f:	call   QWORD PTR [rip+0x1676b]        # 0x650341f0
    6501da85:	test   eax,eax
    6501da87:	jne    0x6501da95
    6501da89:	test   ebx,ebx
    6501da8b:	jne    0x6501da95
    6501da8d:	lea    ecx,[rax+0x2]
    6501da90:	call   0x65020510
    6501da95:	call   QWORD PTR [rip+0x165d5]        # 0x65034070
    6501da9b:	mov    edx,0xc000000d
    6501daa0:	mov    rcx,rax
    6501daa3:	call   QWORD PTR [rip+0x1673f]        # 0x650341e8
    6501daa9:	lea    r11,[rsp+0x5b0]
    6501dab1:	mov    rbx,QWORD PTR [r11+0x10]
    6501dab5:	mov    rbp,QWORD PTR [r11+0x18]
    6501dab9:	mov    rsi,QWORD PTR [r11+0x20]
    6501dabd:	mov    rsp,r11
    6501dac0:	pop    rdi
    6501dac1:	ret    
    6501dac2:	int3   
    6501dac3:	int3   
    6501dac4:	int3   
    6501dac5:	int3   
    6501dac6:	int3   
    6501dac7:	int3   
    6501dac8:	int3   
    6501dac9:	int3   
    6501daca:	int3   
    6501dacb:	int3   
    6501dacc:	int3   
    6501dacd:	int3   
    6501dace:	int3   
    6501dacf:	int3   
    6501dad0:	sub    rsp,0x5b8
    6501dad7:	mov    rcx,QWORD PTR [rip+0x27132]        # 0x65044c10
    6501dade:	call   0x650206e0
    6501dae3:	test   rax,rax
    6501dae6:	je     0x6501db05
    6501dae8:	xor    r9d,r9d
    6501daeb:	xor    r8d,r8d
    6501daee:	xor    edx,edx
    6501daf0:	xor    ecx,ecx
    6501daf2:	mov    QWORD PTR [rsp+0x20],0x0
    6501dafb:	call   rax
    6501dafd:	add    rsp,0x5b8
    6501db04:	ret    
    6501db05:	mov    ecx,0x2
    6501db0a:	mov    QWORD PTR [rsp+0x5b0],rbx
    6501db12:	call   0x65020510
    6501db17:	lea    rcx,[rsp+0xe0]
    6501db1f:	call   QWORD PTR [rip+0x166e3]        # 0x65034208
    6501db25:	lea    rcx,[rsp+0x40]
    6501db2a:	xor    edx,edx
    6501db2c:	mov    r8d,0x98
    6501db32:	call   0x6501efa0
    6501db37:	mov    rax,QWORD PTR [rsp+0x5b8]
    6501db3f:	mov    DWORD PTR [rsp+0x40],0xc000000d
    6501db47:	mov    QWORD PTR [rsp+0x50],rax
    6501db4c:	lea    rax,[rsp+0x40]
    6501db51:	mov    QWORD PTR [rsp+0x30],rax
    6501db56:	lea    rax,[rsp+0xe0]
    6501db5e:	mov    QWORD PTR [rsp+0x38],rax
    6501db63:	call   QWORD PTR [rip+0x16697]        # 0x65034200
    6501db69:	xor    ecx,ecx
    6501db6b:	mov    ebx,eax
    6501db6d:	call   QWORD PTR [rip+0x16685]        # 0x650341f8
    6501db73:	lea    rcx,[rsp+0x30]
    6501db78:	call   QWORD PTR [rip+0x16672]        # 0x650341f0
    6501db7e:	test   eax,eax
    6501db80:	jne    0x6501db8e
    6501db82:	test   ebx,ebx
    6501db84:	jne    0x6501db8e
    6501db86:	lea    ecx,[rax+0x2]
    6501db89:	call   0x65020510
    6501db8e:	call   QWORD PTR [rip+0x164dc]        # 0x65034070
    6501db94:	mov    edx,0xc000000d
    6501db99:	mov    rcx,rax
    6501db9c:	call   QWORD PTR [rip+0x16646]        # 0x650341e8
    6501dba2:	mov    rbx,QWORD PTR [rsp+0x5b0]
    6501dbaa:	add    rsp,0x5b8
    6501dbb1:	ret    
    6501dbb2:	int3   
    6501dbb3:	int3   
    6501dbb4:	int3   
    6501dbb5:	int3   
    6501dbb6:	int3   
    6501dbb7:	int3   
    6501dbb8:	int3   
    6501dbb9:	int3   
    6501dbba:	int3   
    6501dbbb:	int3   
    6501dbbc:	int3   
    6501dbbd:	int3   
    6501dbbe:	int3   
    6501dbbf:	int3   
    6501dbc0:	rex push rbx
    6501dbc2:	sub    rsp,0x40
    6501dbc6:	mov    rbx,rcx
    6501dbc9:	call   0x6501fc50
    6501dbce:	test   rax,rax
    6501dbd1:	jne    0x6501dbec
    6501dbd3:	mov    rcx,rbx
    6501dbd6:	call   0x65020dd0
    6501dbdb:	test   eax,eax
    6501dbdd:	je     0x6501dbf2
    6501dbdf:	mov    rcx,rbx
    6501dbe2:	call   0x6501fc50
    6501dbe7:	test   rax,rax
    6501dbea:	je     0x6501dbd3
    6501dbec:	add    rsp,0x40
    6501dbf0:	pop    rbx
    6501dbf1:	ret    
    6501dbf2:	mov    eax,DWORD PTR [rip+0x27038]        # 0x65044c30
    6501dbf8:	lea    rbx,[rip+0x175b9]        # 0x650351b8
    6501dbff:	test   al,0x1
    6501dc01:	jne    0x6501dc38
    6501dc03:	or     eax,0x1
    6501dc06:	lea    rdx,[rip+0x254e3]        # 0x650430f0
    6501dc0d:	lea    rcx,[rip+0x27004]        # 0x65044c18
    6501dc14:	mov    r8d,0x1
    6501dc1a:	mov    DWORD PTR [rip+0x27010],eax        # 0x65044c30
    6501dc20:	call   0x6501d3c0
    6501dc25:	lea    rcx,[rip+0x15a04]        # 0x65033630
    6501dc2c:	mov    QWORD PTR [rip+0x26fe5],rbx        # 0x65044c18
    6501dc33:	call   0x6501e7f0
    6501dc38:	lea    rdx,[rip+0x26fd9]        # 0x65044c18
    6501dc3f:	lea    rcx,[rsp+0x20]
    6501dc44:	call   0x6501d3e0
    6501dc49:	lea    rdx,[rip+0x237d0]        # 0x65041420
    6501dc50:	lea    rcx,[rsp+0x20]
    6501dc55:	mov    QWORD PTR [rsp+0x20],rbx
    6501dc5a:	call   0x6501dc60
    6501dc5f:	int3   
    6501dc60:	rex push rbx
    6501dc62:	sub    rsp,0x60
    6501dc66:	mov    rax,QWORD PTR [rip+0x17663]        # 0x650352d0
    6501dc6d:	mov    rbx,rdx
    6501dc70:	lea    rdx,[rsp+0x20]
    6501dc75:	mov    QWORD PTR [rdx],rax
    6501dc78:	mov    rax,QWORD PTR [rip+0x17659]        # 0x650352d8
    6501dc7f:	mov    QWORD PTR [rdx+0x8],rax
    6501dc83:	mov    rax,QWORD PTR [rip+0x17656]        # 0x650352e0
    6501dc8a:	mov    QWORD PTR [rdx+0x10],rax
    6501dc8e:	mov    rax,QWORD PTR [rip+0x17653]        # 0x650352e8
    6501dc95:	mov    QWORD PTR [rdx+0x18],rax
    6501dc99:	mov    rax,QWORD PTR [rip+0x17650]        # 0x650352f0
    6501dca0:	mov    QWORD PTR [rdx+0x20],rax
    6501dca4:	mov    rax,QWORD PTR [rip+0x1764d]        # 0x650352f8
    6501dcab:	mov    QWORD PTR [rdx+0x28],rax
    6501dcaf:	mov    rax,QWORD PTR [rip+0x1764a]        # 0x65035300
    6501dcb6:	mov    QWORD PTR [rdx+0x30],rax
    6501dcba:	mov    rax,QWORD PTR [rip+0x17647]        # 0x65035308
    6501dcc1:	mov    QWORD PTR [rdx+0x38],rax
    6501dcc5:	mov    QWORD PTR [rsp+0x48],rcx
    6501dcca:	lea    rdx,[rsp+0x70]
    6501dccf:	mov    rcx,rbx
    6501dcd2:	mov    QWORD PTR [rsp+0x50],rbx
    6501dcd7:	call   0x6502ece6
    6501dcdc:	test   rbx,rbx
    6501dcdf:	mov    r11,rax
    6501dce2:	mov    QWORD PTR [rsp+0x70],rax
    6501dce7:	mov    QWORD PTR [rsp+0x58],rax
    6501dcec:	je     0x6501dd0c
    6501dcee:	test   BYTE PTR [rbx],0x8
    6501dcf1:	mov    ecx,0x1994000
    6501dcf6:	je     0x6501dcfe
    6501dcf8:	mov    DWORD PTR [rsp+0x40],ecx
    6501dcfc:	jmp    0x6501dd0c
    6501dcfe:	mov    eax,DWORD PTR [rsp+0x40]
    6501dd02:	test   r11,r11
    6501dd05:	cmove  eax,ecx
    6501dd08:	mov    DWORD PTR [rsp+0x40],eax
    6501dd0c:	mov    r8d,DWORD PTR [rsp+0x38]
    6501dd11:	mov    edx,DWORD PTR [rsp+0x24]
    6501dd15:	mov    ecx,DWORD PTR [rsp+0x20]
    6501dd19:	lea    r9,[rsp+0x40]
    6501dd1e:	call   QWORD PTR [rip+0x1648c]        # 0x650341b0
    6501dd24:	add    rsp,0x60
    6501dd28:	pop    rbx
    6501dd29:	ret    
    6501dd2a:	int3   
    6501dd2b:	int3   
    6501dd2c:	int3   
    6501dd2d:	int3   
    6501dd2e:	int3   
    6501dd2f:	int3   
    6501dd30:	mov    QWORD PTR [rsp+0x8],rbx
    6501dd35:	push   rdi
    6501dd36:	sub    rsp,0x20
    6501dd3a:	lea    rax,[rip+0x175d7]        # 0x65035318
    6501dd41:	mov    ebx,edx
    6501dd43:	mov    rdi,rcx
    6501dd46:	mov    QWORD PTR [rcx],rax
    6501dd49:	call   0x65020e10
    6501dd4e:	test   bl,0x1
    6501dd51:	je     0x6501dd5b
    6501dd53:	mov    rcx,rdi
    6501dd56:	call   0x6501d300
    6501dd5b:	mov    rax,rdi
    6501dd5e:	mov    rbx,QWORD PTR [rsp+0x30]
    6501dd63:	add    rsp,0x20
    6501dd67:	pop    rdi
    6501dd68:	ret    
    6501dd69:	int3   
    6501dd6a:	int3   
    6501dd6b:	int3   
    6501dd6c:	int3   
    6501dd6d:	int3   
    6501dd6e:	int3   
    6501dd6f:	int3   
    6501dd70:	lea    r8,[rcx+0x11]
    6501dd74:	add    rdx,0x11
    6501dd78:	sub    r8,rdx
    6501dd7b:	xchg   ax,ax
    6501dd7d:	data16 xchg ax,ax
    6501dd80:	movzx  ecx,BYTE PTR [rdx]
    6501dd83:	movzx  eax,BYTE PTR [rdx+r8*1]
    6501dd88:	sub    ecx,eax
    6501dd8a:	jne    0x6501dd94
    6501dd8c:	add    rdx,0x1
    6501dd90:	test   eax,eax
    6501dd92:	jne    0x6501dd80
    6501dd94:	test   ecx,ecx
    6501dd96:	sete   al
    6501dd99:	ret    
    6501dd9a:	int3   
    6501dd9b:	int3   
    6501dd9c:	int3   
    6501dd9d:	int3   
    6501dd9e:	int3   
    6501dd9f:	int3   
    6501dda0:	mov    QWORD PTR [rsp+0x20],rbp
    6501dda5:	push   rdi
    6501dda6:	push   r12
    6501dda8:	push   r13
    6501ddaa:	push   r14
    6501ddac:	push   r15
    6501ddae:	sub    rsp,0x20
    6501ddb2:	movsxd rdi,DWORD PTR [r8+0xc]
    6501ddb6:	mov    r15,rcx
    6501ddb9:	mov    rcx,r8
    6501ddbc:	mov    r12,r9
    6501ddbf:	mov    r14,r8
    6501ddc2:	mov    r13,rdx
    6501ddc5:	call   0x65020f40
    6501ddca:	test   edi,edi
    6501ddcc:	mov    r10,QWORD PTR [r15]
    6501ddcf:	mov    QWORD PTR [r12],r10
    6501ddd3:	mov    ebp,eax
    6501ddd5:	je     0x6501de99
    6501dddb:	lea    rcx,[rdi+rdi*4]
    6501dddf:	mov    QWORD PTR [rsp+0x58],rbx
    6501dde4:	mov    QWORD PTR [rsp+0x60],rsi
    6501dde9:	lea    rsi,[rcx*4-0x14]
    6501ddf1:	data16 xchg ax,ax
    6501ddf4:	data16 data16 xchg ax,ax
    6501ddf8:	data16 data16 xchg ax,ax
    6501ddfc:	data16 data16 xchg ax,ax
    6501de00:	movsxd rbx,DWORD PTR [r14+0x10]
    6501de04:	add    rbx,QWORD PTR [r13+0x8]
    6501de08:	add    rbx,rsi
    6501de0b:	cmp    ebp,DWORD PTR [rbx+0x4]
    6501de0e:	jle    0x6501de5a
    6501de10:	cmp    ebp,DWORD PTR [rbx+0x8]
    6501de13:	jg     0x6501de5a
    6501de15:	mov    rcx,QWORD PTR [r13+0x0]
    6501de19:	lea    rdx,[rsp+0x50]
    6501de1e:	xor    r8d,r8d
    6501de21:	call   0x6502ecec
    6501de26:	movsxd r10,DWORD PTR [rbx+0x10]
    6501de2a:	mov    r8d,DWORD PTR [rbx+0xc]
    6501de2e:	add    r10,QWORD PTR [rsp+0x50]
    6501de33:	mov    r9d,DWORD PTR [rax]
    6501de36:	xor    edx,edx
    6501de38:	test   r8d,r8d
    6501de3b:	je     0x6501de55
    6501de3d:	lea    rcx,[r10+0xc]
    6501de41:	movsxd rax,DWORD PTR [rcx]
    6501de44:	cmp    rax,r9
    6501de47:	je     0x6501de55
    6501de49:	add    edx,0x1
    6501de4c:	add    rcx,0x14
    6501de50:	cmp    edx,r8d
    6501de53:	jb     0x6501de41
    6501de55:	cmp    edx,r8d
    6501de58:	jb     0x6501de65
    6501de5a:	sub    rsi,0x14
    6501de5e:	add    edi,0xffffffff
    6501de61:	jne    0x6501de00
    6501de63:	jmp    0x6501de79
    6501de65:	mov    rax,QWORD PTR [r15]
    6501de68:	lea    rcx,[rdx+rdx*4]
    6501de6c:	movsxd rcx,DWORD PTR [r10+rcx*4+0x10]
    6501de71:	mov    rcx,QWORD PTR [rcx+rax*1]
    6501de75:	mov    QWORD PTR [r12],rcx
    6501de79:	mov    rbx,QWORD PTR [rsp+0x58]
    6501de7e:	mov    rsi,QWORD PTR [rsp+0x60]
    6501de83:	mov    rax,r12
    6501de86:	mov    rbp,QWORD PTR [rsp+0x68]
    6501de8b:	add    rsp,0x20
    6501de8f:	pop    r15
    6501de91:	pop    r14
    6501de93:	pop    r13
    6501de95:	pop    r12
    6501de97:	pop    rdi
    6501de98:	ret    
    6501de99:	mov    rax,r12
    6501de9c:	mov    rbp,QWORD PTR [rsp+0x68]
    6501dea1:	add    rsp,0x20
    6501dea5:	pop    r15
    6501dea7:	pop    r14
    6501dea9:	pop    r13
    6501deab:	pop    r12
    6501dead:	pop    rdi
    6501deae:	ret    
    6501deaf:	int3   
    6501deb0:	sub    rsp,0x28
    6501deb4:	call   0x65020a30
    6501deb9:	mov    rax,QWORD PTR [rax+0x128]
    6501dec0:	add    rsp,0x28
    6501dec4:	ret    
    6501dec5:	int3   
    6501dec6:	int3   
    6501dec7:	int3   
    6501dec8:	int3   
    6501dec9:	int3   
    6501deca:	int3   
    6501decb:	int3   
    6501decc:	int3   
    6501decd:	int3   
    6501dece:	int3   
    6501decf:	int3   
    6501ded0:	sub    rsp,0x28
    6501ded4:	call   0x65020a30
    6501ded9:	mov    rax,QWORD PTR [rax+0x130]
    6501dee0:	add    rsp,0x28
    6501dee4:	ret    
    6501dee5:	int3   
    6501dee6:	int3   
    6501dee7:	int3   
    6501dee8:	int3   
    6501dee9:	int3   
    6501deea:	int3   
    6501deeb:	int3   
    6501deec:	int3   
    6501deed:	int3   
    6501deee:	int3   
    6501deef:	int3   
    6501def0:	rex push rbx
    6501def2:	sub    rsp,0x20
    6501def6:	mov    rbx,rcx
    6501def9:	call   0x65020a30
    6501defe:	mov    QWORD PTR [rax+0x128],rbx
    6501df05:	add    rsp,0x20
    6501df09:	pop    rbx
    6501df0a:	ret    
    6501df0b:	int3   
    6501df0c:	int3   
    6501df0d:	int3   
    6501df0e:	int3   
    6501df0f:	int3   
    6501df10:	rex push rbx
    6501df12:	sub    rsp,0x20
    6501df16:	mov    rbx,rcx
    6501df19:	call   0x65020a30
    6501df1e:	mov    QWORD PTR [rax+0x130],rbx
    6501df25:	add    rsp,0x20
    6501df29:	pop    rbx
    6501df2a:	ret    
    6501df2b:	int3   
    6501df2c:	int3   
    6501df2d:	int3   
    6501df2e:	int3   
    6501df2f:	int3   
    6501df30:	mov    QWORD PTR [rsp+0x10],rbx
    6501df35:	mov    QWORD PTR [rsp+0x20],rbp
    6501df3a:	push   rsi
    6501df3b:	push   rdi
    6501df3c:	push   r12
    6501df3e:	push   r13
    6501df40:	push   r14
    6501df42:	sub    rsp,0x20
    6501df46:	movsxd rdi,DWORD PTR [r8+0xc]
    6501df4a:	mov    r14,rcx
    6501df4d:	mov    rcx,r8
    6501df50:	mov    rbp,r8
    6501df53:	mov    r13,rdx
    6501df56:	call   0x65020f40
    6501df5b:	test   edi,edi
    6501df5d:	mov    r9,QWORD PTR [r14]
    6501df60:	mov    r12d,eax
    6501df63:	mov    QWORD PTR [rsp+0x50],r9
    6501df68:	je     0x6501dffc
    6501df6e:	lea    rcx,[rdi+rdi*4]
    6501df72:	lea    rsi,[rcx*4-0x14]
    6501df7a:	data16 xchg ax,ax
    6501df7d:	data16 xchg ax,ax
    6501df80:	movsxd rbx,DWORD PTR [rbp+0x10]
    6501df84:	add    rbx,QWORD PTR [r13+0x8]
    6501df88:	add    rbx,rsi
    6501df8b:	cmp    r12d,DWORD PTR [rbx+0x4]
    6501df8f:	jle    0x6501dfdc
    6501df91:	cmp    r12d,DWORD PTR [rbx+0x8]
    6501df95:	jg     0x6501dfdc
    6501df97:	mov    rcx,QWORD PTR [r13+0x0]
    6501df9b:	lea    rdx,[rsp+0x60]
    6501dfa0:	xor    r8d,r8d
    6501dfa3:	call   0x6502ecec
    6501dfa8:	movsxd r10,DWORD PTR [rbx+0x10]
    6501dfac:	mov    r8d,DWORD PTR [rbx+0xc]
    6501dfb0:	add    r10,QWORD PTR [rsp+0x60]
    6501dfb5:	mov    r9d,DWORD PTR [rax]
    6501dfb8:	xor    edx,edx
    6501dfba:	test   r8d,r8d
    6501dfbd:	je     0x6501dfd7
    6501dfbf:	lea    rcx,[r10+0xc]
    6501dfc3:	movsxd rax,DWORD PTR [rcx]
    6501dfc6:	cmp    rax,r9
    6501dfc9:	je     0x6501dfd7
    6501dfcb:	add    edx,0x1
    6501dfce:	add    rcx,0x14
    6501dfd2:	cmp    edx,r8d
    6501dfd5:	jb     0x6501dfc3
    6501dfd7:	cmp    edx,r8d
    6501dfda:	jb     0x6501dfe7
    6501dfdc:	sub    rsi,0x14
    6501dfe0:	add    edi,0xffffffff
    6501dfe3:	jne    0x6501df80
    6501dfe5:	jmp    0x6501dffc
    6501dfe7:	mov    rax,QWORD PTR [r14]
    6501dfea:	lea    rcx,[rdx+rdx*4]
    6501dfee:	movsxd rcx,DWORD PTR [r10+rcx*4+0x10]
    6501dff3:	mov    rcx,QWORD PTR [rcx+rax*1]
    6501dff7:	mov    QWORD PTR [rsp+0x50],rcx
    6501dffc:	mov    rdx,r13
    6501dfff:	mov    rcx,rbp
    6501e002:	call   0x65020f40
    6501e007:	movsxd rbx,DWORD PTR [rbp+0xc]
    6501e00b:	test   ebx,ebx
    6501e00d:	mov    esi,eax
    6501e00f:	je     0x6501e048
    6501e011:	lea    rcx,[rbx+rbx*4]
    6501e015:	lea    rdi,[rcx*4-0x14]
    6501e01d:	data16 xchg ax,ax
    6501e020:	call   0x65020a30
    6501e025:	movsxd rcx,DWORD PTR [rbp+0x10]
    6501e029:	mov    rdx,QWORD PTR [rax+0x128]
    6501e030:	add    rdx,rcx
    6501e033:	cmp    esi,DWORD PTR [rdx+rdi*1+0x4]
    6501e037:	jle    0x6501e03f
    6501e039:	cmp    esi,DWORD PTR [rdx+rdi*1+0x8]
    6501e03d:	jle    0x6501e073
    6501e03f:	sub    rdi,0x14
    6501e043:	add    ebx,0xffffffff
    6501e046:	jne    0x6501e020
    6501e048:	or     r9d,0xffffffff
    6501e04c:	lea    rcx,[rsp+0x50]
    6501e051:	mov    r8,rbp
    6501e054:	mov    rdx,r13
    6501e057:	call   0x65021190
    6501e05c:	mov    rbx,QWORD PTR [rsp+0x58]
    6501e061:	mov    rbp,QWORD PTR [rsp+0x68]
    6501e066:	add    rsp,0x20
    6501e06a:	pop    r14
    6501e06c:	pop    r13
    6501e06e:	pop    r12
    6501e070:	pop    rdi
    6501e071:	pop    rsi
    6501e072:	ret    
    6501e073:	mov    r9d,DWORD PTR [rdx+rdi*1+0x4]
    6501e078:	jmp    0x6501e04c
    6501e07a:	int3   
    6501e07b:	int3   
    6501e07c:	int3   
    6501e07d:	int3   
    6501e07e:	int3   
    6501e07f:	int3   
    6501e080:	mov    QWORD PTR [rsp+0x10],rbx
    6501e085:	mov    QWORD PTR [rsp+0x18],rsi
    6501e08a:	push   rdi
    6501e08b:	sub    rsp,0x40
    6501e08f:	mov    rbx,r9
    6501e092:	mov    rdi,r8
    6501e095:	mov    rsi,rcx
    6501e098:	mov    QWORD PTR [rsp+0x50],rdx
    6501e09d:	call   0x65020a30
    6501e0a2:	mov    rdx,QWORD PTR [rbx+0x8]
    6501e0a6:	mov    QWORD PTR [rax+0x128],rdx
    6501e0ad:	call   0x65020a30
    6501e0b2:	mov    rdx,QWORD PTR [rsi+0x38]
    6501e0b6:	mov    QWORD PTR [rax+0x130],rdx
    6501e0bd:	call   0x65020a30
    6501e0c2:	mov    rdx,QWORD PTR [rbx+0x38]
    6501e0c6:	mov    r8d,DWORD PTR [rdx]
    6501e0c9:	lea    rdx,[rsp+0x50]
    6501e0ce:	mov    r9,rbx
    6501e0d1:	add    r8,QWORD PTR [rax+0x128]
    6501e0d8:	xor    eax,eax
    6501e0da:	mov    rcx,rsi
    6501e0dd:	mov    DWORD PTR [rsp+0x38],eax
    6501e0e1:	mov    QWORD PTR [rsp+0x30],rax
    6501e0e6:	mov    DWORD PTR [rsp+0x28],eax
    6501e0ea:	mov    QWORD PTR [rsp+0x20],r8
    6501e0ef:	mov    r8,rdi
    6501e0f2:	call   0x65022690
    6501e0f7:	mov    rbx,QWORD PTR [rsp+0x58]
    6501e0fc:	mov    rsi,QWORD PTR [rsp+0x60]
    6501e101:	add    rsp,0x40
    6501e105:	pop    rdi
    6501e106:	ret    
    6501e107:	int3   
    6501e108:	int3   
    6501e109:	int3   
    6501e10a:	int3   
    6501e10b:	int3   
    6501e10c:	int3   
    6501e10d:	int3   
    6501e10e:	int3   
    6501e10f:	int3   
    6501e110:	mov    QWORD PTR [rsp+0x8],rbx
    6501e115:	mov    QWORD PTR [rsp+0x10],rbp
    6501e11a:	mov    QWORD PTR [rsp+0x18],rsi
    6501e11f:	push   rdi
    6501e120:	sub    rsp,0x40
    6501e124:	mov    rsi,r9
    6501e127:	mov    rbp,r8
    6501e12a:	mov    rbx,rdx
    6501e12d:	mov    rdi,rcx
    6501e130:	call   0x65020a30
    6501e135:	mov    QWORD PTR [rax+0x138],rbx
    6501e13c:	mov    rbx,QWORD PTR [rdi]
    6501e13f:	call   0x65020a30
    6501e144:	mov    rdx,QWORD PTR [rbx+0x38]
    6501e148:	mov    rcx,QWORD PTR [rsp+0x78]
    6501e14d:	mov    r9,QWORD PTR [rsp+0x70]
    6501e152:	mov    DWORD PTR [rsp+0x38],0x1
    6501e15a:	mov    QWORD PTR [rax+0x130],rdx
    6501e161:	xor    ebx,ebx
    6501e163:	mov    QWORD PTR [rsp+0x30],rbx
    6501e168:	mov    DWORD PTR [rsp+0x28],ebx
    6501e16c:	mov    QWORD PTR [rsp+0x20],rcx
    6501e171:	mov    rcx,QWORD PTR [rdi]
    6501e174:	mov    r8,rsi
    6501e177:	mov    rdx,rbp
    6501e17a:	call   0x65022690
    6501e17f:	call   0x65020a30
    6501e184:	mov    rcx,QWORD PTR [rsp+0x80]
    6501e18c:	mov    rbp,QWORD PTR [rsp+0x58]
    6501e191:	mov    rsi,QWORD PTR [rsp+0x60]
    6501e196:	mov    QWORD PTR [rax+0x138],rbx
    6501e19d:	lea    eax,[rbx+0x1]
    6501e1a0:	mov    rbx,QWORD PTR [rsp+0x50]
    6501e1a5:	mov    DWORD PTR [rcx],0x1
    6501e1ab:	add    rsp,0x40
    6501e1af:	pop    rdi
    6501e1b0:	ret    
    6501e1b1:	int3   
    6501e1b2:	int3   
    6501e1b3:	int3   
    6501e1b4:	int3   
    6501e1b5:	int3   
    6501e1b6:	int3   
    6501e1b7:	int3   
    6501e1b8:	int3   
    6501e1b9:	int3   
    6501e1ba:	int3   
    6501e1bb:	int3   
    6501e1bc:	int3   
    6501e1bd:	int3   
    6501e1be:	int3   
    6501e1bf:	int3   
    6501e1c0:	mov    rax,rsp
    6501e1c3:	mov    QWORD PTR [rax+0x20],r9
    6501e1c7:	mov    QWORD PTR [rax+0x18],r8
    6501e1cb:	mov    QWORD PTR [rax+0x10],rdx
    6501e1cf:	mov    QWORD PTR [rax+0x8],rcx
    6501e1d3:	push   rbx
    6501e1d4:	sub    rsp,0x60
    6501e1d8:	mov    rbx,rcx
    6501e1db:	mov    DWORD PTR [rax-0x28],0x0
    6501e1e2:	mov    QWORD PTR [rax-0x20],rcx
    6501e1e6:	mov    QWORD PTR [rax-0x18],r8
    6501e1ea:	call   0x65020a30
    6501e1ef:	mov    r8,QWORD PTR [rax+0xe0]
    6501e1f6:	lea    rdx,[rsp+0x48]
    6501e1fb:	mov    ecx,DWORD PTR [rbx]
    6501e1fd:	call   r8
    6501e200:	mov    DWORD PTR [rsp+0x40],0x0
    6501e208:	jmp    0x6501e20a
    6501e20a:	mov    eax,DWORD PTR [rsp+0x40]
    6501e20e:	add    rsp,0x60
    6501e212:	pop    rbx
    6501e213:	ret    
    6501e214:	int3   
    6501e215:	int3   
    6501e216:	int3   
    6501e217:	int3   
    6501e218:	int3   
    6501e219:	int3   
    6501e21a:	int3   
    6501e21b:	int3   
    6501e21c:	int3   
    6501e21d:	int3   
    6501e21e:	int3   
    6501e21f:	int3   
    6501e220:	rex push rbp
    6501e222:	sub    rsp,0x40
    6501e226:	mov    rbp,rdx
    6501e229:	lea    rax,[rbp+0x40]
    6501e22d:	mov    QWORD PTR [rsp+0x30],rax
    6501e232:	mov    rax,QWORD PTR [rbp+0x90]
    6501e239:	mov    QWORD PTR [rsp+0x28],rax
    6501e23e:	mov    rax,QWORD PTR [rbp+0x88]
    6501e245:	mov    QWORD PTR [rsp+0x20],rax
    6501e24a:	mov    r9,QWORD PTR [rbp+0x80]
    6501e251:	mov    r8,QWORD PTR [rbp+0x78]
    6501e255:	mov    rdx,QWORD PTR [rbp+0x70]
    6501e259:	call   0x6501e110
    6501e25e:	add    rsp,0x40
    6501e262:	pop    rbp
    6501e263:	ret    
    6501e264:	int3   
    6501e265:	int3   
    6501e266:	int3   
    6501e267:	int3   
    6501e268:	int3   
    6501e269:	int3   
    6501e26a:	int3   
    6501e26b:	int3   
    6501e26c:	int3   
    6501e26d:	int3   
    6501e26e:	int3   
    6501e26f:	int3   
    6501e270:	mov    QWORD PTR [rsp+0x8],rbx
    6501e275:	mov    QWORD PTR [rsp+0x10],rbp
    6501e27a:	mov    QWORD PTR [rsp+0x18],rsi
    6501e27f:	push   rdi
    6501e280:	push   r12
    6501e282:	push   r13
    6501e284:	sub    rsp,0x20
    6501e288:	movsxd rsi,DWORD PTR [rdx+0xc]
    6501e28c:	mov    r13,QWORD PTR [rsp+0x70]
    6501e291:	mov    r12,rdx
    6501e294:	mov    rcx,r12
    6501e297:	mov    rdx,r13
    6501e29a:	mov    ebp,r9d
    6501e29d:	xor    edi,edi
    6501e29f:	call   0x65020f40
    6501e2a4:	test   esi,esi
    6501e2a6:	mov    ebx,eax
    6501e2a8:	jne    0x6501e2af
    6501e2aa:	call   0x650228e0
    6501e2af:	test   esi,esi
    6501e2b1:	mov    r10,QWORD PTR [rsp+0x68]
    6501e2b6:	mov    r9,QWORD PTR [rsp+0x60]
    6501e2bb:	mov    DWORD PTR [r10],0xffffffff
    6501e2c2:	mov    DWORD PTR [r9],0xffffffff
    6501e2c9:	mov    r8d,esi
    6501e2cc:	je     0x6501e2f7
    6501e2ce:	movsxd rcx,DWORD PTR [r12+0x10]
    6501e2d3:	lea    rax,[rsi+rsi*4]
    6501e2d7:	lea    rcx,[rcx+rax*4]
    6501e2db:	mov    rax,QWORD PTR [r13+0x8]
    6501e2df:	lea    rdx,[rcx+rax*1-0xc]
    6501e2e4:	cmp    ebx,DWORD PTR [rdx-0x4]
    6501e2e7:	jle    0x6501e2ed
    6501e2e9:	cmp    ebx,DWORD PTR [rdx]
    6501e2eb:	jle    0x6501e2f7
    6501e2ed:	sub    rdx,0x14
    6501e2f1:	add    r8d,0xffffffff
    6501e2f5:	jne    0x6501e2e4
    6501e2f7:	test   r8d,r8d
    6501e2fa:	je     0x6501e311
    6501e2fc:	lea    eax,[r8-0x1]
    6501e300:	lea    rdx,[rax+rax*4]
    6501e304:	movsxd rax,DWORD PTR [r12+0x10]
    6501e309:	lea    rdi,[rax+rdx*4]
    6501e30d:	add    rdi,QWORD PTR [r13+0x8]
    6501e311:	xor    edx,edx
    6501e313:	test   esi,esi
    6501e315:	je     0x6501e37e
    6501e317:	xor    r8d,r8d
    6501e31a:	data16 xchg ax,ax
    6501e31d:	data16 xchg ax,ax
    6501e320:	movsxd rcx,DWORD PTR [r12+0x10]
    6501e325:	add    rcx,QWORD PTR [r13+0x8]
    6501e329:	add    rcx,r8
    6501e32c:	test   rdi,rdi
    6501e32f:	je     0x6501e340
    6501e331:	mov    eax,DWORD PTR [rdi+0x4]
    6501e334:	cmp    DWORD PTR [rcx],eax
    6501e336:	jle    0x6501e358
    6501e338:	mov    eax,DWORD PTR [rdi+0x8]
    6501e33b:	cmp    DWORD PTR [rcx+0x4],eax
    6501e33e:	jg     0x6501e358
    6501e340:	cmp    ebp,DWORD PTR [rcx]
    6501e342:	jl     0x6501e358
    6501e344:	cmp    ebp,DWORD PTR [rcx+0x4]
    6501e347:	jg     0x6501e358
    6501e349:	cmp    DWORD PTR [r9],0xffffffff
    6501e34d:	jne    0x6501e352
    6501e34f:	mov    DWORD PTR [r9],edx
    6501e352:	lea    eax,[rdx+0x1]
    6501e355:	mov    DWORD PTR [r10],eax
    6501e358:	add    edx,0x1
    6501e35b:	add    r8,0x14
    6501e35f:	cmp    edx,esi
    6501e361:	jb     0x6501e320
    6501e363:	mov    eax,DWORD PTR [r9]
    6501e366:	cmp    eax,0xffffffff
    6501e369:	je     0x6501e37e
    6501e36b:	lea    rcx,[rax+rax*4]
    6501e36f:	movsxd rax,DWORD PTR [r12+0x10]
    6501e374:	lea    rax,[rax+rcx*4]
    6501e378:	add    rax,QWORD PTR [r13+0x8]
    6501e37c:	jmp    0x6501e38e
    6501e37e:	mov    DWORD PTR [r9],0x0
    6501e385:	xor    eax,eax
    6501e387:	mov    DWORD PTR [r10],0x0
    6501e38e:	mov    rbx,QWORD PTR [rsp+0x40]
    6501e393:	mov    rbp,QWORD PTR [rsp+0x48]
    6501e398:	mov    rsi,QWORD PTR [rsp+0x50]
    6501e39d:	add    rsp,0x20
    6501e3a1:	pop    r13
    6501e3a3:	pop    r12
    6501e3a5:	pop    rdi
    6501e3a6:	ret    
    6501e3a7:	int3   
    6501e3a8:	int3   
    6501e3a9:	int3   
    6501e3aa:	int3   
    6501e3ab:	int3   
    6501e3ac:	int3   
    6501e3ad:	int3   
    6501e3ae:	int3   
    6501e3af:	int3   
    6501e3b0:	rex push rbx
    6501e3b2:	sub    rsp,0x20
    6501e3b6:	mov    rbx,rcx
    6501e3b9:	mov    QWORD PTR [rcx],rdx
    6501e3bc:	call   0x65020a30
    6501e3c1:	cmp    rbx,QWORD PTR [rax+0x120]
    6501e3c8:	jae    0x6501e3d8
    6501e3ca:	call   0x65020a30
    6501e3cf:	mov    rcx,QWORD PTR [rax+0x120]
    6501e3d6:	jmp    0x6501e3da
    6501e3d8:	xor    ecx,ecx
    6501e3da:	mov    QWORD PTR [rbx+0x8],rcx
    6501e3de:	call   0x65020a30
    6501e3e3:	mov    QWORD PTR [rax+0x120],rbx
    6501e3ea:	mov    rax,rbx
    6501e3ed:	add    rsp,0x20
    6501e3f1:	pop    rbx
    6501e3f2:	ret    
    6501e3f3:	int3   
    6501e3f4:	int3   
    6501e3f5:	int3   
    6501e3f6:	int3   
    6501e3f7:	int3   
    6501e3f8:	int3   
    6501e3f9:	int3   
    6501e3fa:	int3   
    6501e3fb:	int3   
    6501e3fc:	int3   
    6501e3fd:	int3   
    6501e3fe:	int3   
    6501e3ff:	int3   
    6501e400:	rex push rbx
    6501e402:	sub    rsp,0x20
    6501e406:	mov    rbx,rcx
    6501e409:	call   0x65020a30
    6501e40e:	mov    rdx,QWORD PTR [rax+0x120]
    6501e415:	test   rdx,rdx
    6501e418:	je     0x6501e42e
    6501e41a:	data16 xchg ax,ax
    6501e41d:	data16 xchg ax,ax
    6501e420:	cmp    QWORD PTR [rdx],rbx
    6501e423:	je     0x6501e439
    6501e425:	mov    rdx,QWORD PTR [rdx+0x8]
    6501e429:	test   rdx,rdx
    6501e42c:	jne    0x6501e420
    6501e42e:	mov    eax,0x1
    6501e433:	add    rsp,0x20
    6501e437:	pop    rbx
    6501e438:	ret    
    6501e439:	xor    eax,eax
    6501e43b:	add    rsp,0x20
    6501e43f:	pop    rbx
    6501e440:	ret    
    6501e441:	int3   
    6501e442:	int3   
    6501e443:	int3   
    6501e444:	int3   
    6501e445:	int3   
    6501e446:	int3   
    6501e447:	int3   
    6501e448:	int3   
    6501e449:	int3   
    6501e44a:	int3   
    6501e44b:	int3   
    6501e44c:	int3   
    6501e44d:	int3   
    6501e44e:	int3   
    6501e44f:	int3   
    6501e450:	mov    QWORD PTR [rsp+0x8],rbx
    6501e455:	push   rdi
    6501e456:	sub    rsp,0x20
    6501e45a:	mov    rdi,rcx
    6501e45d:	call   0x65020a30
    6501e462:	cmp    rdi,QWORD PTR [rax+0x120]
    6501e469:	je     0x6501e470
    6501e46b:	call   0x650228e0
    6501e470:	call   0x65020a30
    6501e475:	mov    rbx,QWORD PTR [rax+0x120]
    6501e47c:	test   rbx,rbx
    6501e47f:	je     0x6501e48f
    6501e481:	cmp    rdi,rbx
    6501e484:	je     0x6501e49e
    6501e486:	mov    rbx,QWORD PTR [rbx+0x8]
    6501e48a:	test   rbx,rbx
    6501e48d:	jne    0x6501e481
    6501e48f:	mov    rbx,QWORD PTR [rsp+0x30]
    6501e494:	add    rsp,0x20
    6501e498:	pop    rdi
    6501e499:	jmp    0x650228e0
    6501e49e:	call   0x65020a30
    6501e4a3:	mov    rcx,QWORD PTR [rbx+0x8]
    6501e4a7:	mov    rbx,QWORD PTR [rsp+0x30]
    6501e4ac:	mov    QWORD PTR [rax+0x120],rcx
    6501e4b3:	add    rsp,0x20
    6501e4b7:	pop    rdi
    6501e4b8:	ret    
    6501e4b9:	int3   
    6501e4ba:	int3   
    6501e4bb:	int3   
    6501e4bc:	int3   
    6501e4bd:	int3   
    6501e4be:	int3   
    6501e4bf:	int3   
    6501e4c0:	mov    QWORD PTR [rsp+0x8],rbx
    6501e4c5:	mov    QWORD PTR [rsp+0x10],rbp
    6501e4ca:	mov    QWORD PTR [rsp+0x18],rsi
    6501e4cf:	push   rdi
    6501e4d0:	sub    rsp,0x5a0
    6501e4d7:	mov    rsi,rdx
    6501e4da:	mov    rbp,rcx
    6501e4dd:	mov    rdi,r8
    6501e4e0:	lea    rcx,[rsp+0x30]
    6501e4e5:	lea    rdx,[rip+0x16e34]        # 0x65035320
    6501e4ec:	mov    r8d,0x98
    6501e4f2:	mov    rbx,r9
    6501e4f5:	call   0x6501fd30
    6501e4fa:	mov    rax,QWORD PTR [rsp+0x5d0]
    6501e502:	mov    rdx,QWORD PTR [rsp+0x5e8]
    6501e50a:	mov    rcx,QWORD PTR [rbp+0x0]
    6501e50e:	mov    QWORD PTR [rsp+0x60],rax
    6501e513:	movsxd rax,DWORD PTR [rsp+0x5d8]
    6501e51b:	lea    r11,[rip+0x328e]        # 0x650217b0
    6501e522:	lea    r8,[rsp+0x30]
    6501e527:	mov    QWORD PTR [rsp+0x68],rax
    6501e52c:	mov    rax,QWORD PTR [rsp+0x5e0]
    6501e534:	xor    r9d,r9d
    6501e537:	mov    QWORD PTR [rsp+0x78],rax
    6501e53c:	movzx  eax,BYTE PTR [rsp+0x5f0]
    6501e544:	mov    QWORD PTR [rsp+0x50],r11
    6501e549:	mov    QWORD PTR [rsp+0x88],rax
    6501e551:	mov    rax,QWORD PTR [rdx+0x40]
    6501e555:	mov    rdx,QWORD PTR [rdx]
    6501e558:	mov    QWORD PTR [rsp+0x28],rax
    6501e55d:	lea    rax,[rsp+0xd0]
    6501e565:	mov    QWORD PTR [rsp+0x58],rbx
    6501e56a:	mov    QWORD PTR [rsp+0x70],rdi
    6501e56f:	mov    QWORD PTR [rsp+0x80],rsi
    6501e577:	mov    QWORD PTR [rsp+0x90],0x19930520
    6501e583:	mov    QWORD PTR [rsp+0x20],rax
    6501e588:	call   0x6502ecf2
    6501e58d:	lea    r11,[rsp+0x5a0]
    6501e595:	mov    rbx,QWORD PTR [r11+0x10]
    6501e599:	mov    rbp,QWORD PTR [r11+0x18]
    6501e59d:	mov    rsi,QWORD PTR [r11+0x20]
    6501e5a1:	mov    rsp,r11
    6501e5a4:	pop    rdi
    6501e5a5:	ret    
    6501e5a6:	int3   
    6501e5a7:	int3   
    6501e5a8:	int3   
    6501e5a9:	int3   
    6501e5aa:	int3   
    6501e5ab:	int3   
    6501e5ac:	int3   
    6501e5ad:	int3   
    6501e5ae:	int3   
    6501e5af:	int3   
    6501e5b0:	mov    QWORD PTR [rsp+0x8],rbx
    6501e5b5:	mov    QWORD PTR [rsp+0x10],rbp
    6501e5ba:	mov    QWORD PTR [rsp+0x18],rsi
    6501e5bf:	mov    QWORD PTR [rsp+0x20],rdi
    6501e5c4:	push   r12
    6501e5c6:	sub    rsp,0x20
    6501e5ca:	mov    rbx,QWORD PTR [r9+0x38]
    6501e5ce:	mov    rsi,rdx
    6501e5d1:	mov    r12,r8
    6501e5d4:	mov    rbp,rcx
    6501e5d7:	lea    r8,[rbx+0x4]
    6501e5db:	mov    rdx,r9
    6501e5de:	mov    rcx,rsi
    6501e5e1:	mov    rdi,r9
    6501e5e4:	call   0x6501ead0
    6501e5e9:	test   BYTE PTR [rbp+0x4],0x66
    6501e5ed:	mov    r11d,DWORD PTR [rbx+0x4]
    6501e5f1:	jne    0x6501e5f9
    6501e5f3:	and    r11d,0x1
    6501e5f7:	jmp    0x6501e5fd
    6501e5f9:	and    r11d,0x2
    6501e5fd:	test   r11d,r11d
    6501e600:	je     0x6501e615
    6501e602:	mov    r9,rdi
    6501e605:	mov    r8,r12
    6501e608:	mov    rdx,rsi
    6501e60b:	mov    rcx,rbp
    6501e60e:	call   0x6501e080
    6501e613:	jmp    0x6501e61a
    6501e615:	mov    eax,0x1
    6501e61a:	mov    rbx,QWORD PTR [rsp+0x30]
    6501e61f:	mov    rbp,QWORD PTR [rsp+0x38]
    6501e624:	mov    rsi,QWORD PTR [rsp+0x40]
    6501e629:	mov    rdi,QWORD PTR [rsp+0x48]
    6501e62e:	add    rsp,0x20
    6501e632:	pop    r12
    6501e634:	ret    
    6501e635:	int3   
    6501e636:	int3   
    6501e637:	int3   
    6501e638:	int3   
    6501e639:	int3   
    6501e63a:	int3   
    6501e63b:	int3   
    6501e63c:	int3   
    6501e63d:	int3   
    6501e63e:	int3   
    6501e63f:	int3   
    6501e640:	int3   
    6501e641:	int3   
    6501e642:	int3   
    6501e643:	int3   
    6501e644:	int3   
    6501e645:	int3   
    6501e646:	data16 data16 xchg ax,ax
    6501e64a:	data16 data16 xchg ax,ax
    6501e64e:	xchg   ax,ax
    6501e650:	cmp    rcx,QWORD PTR [rip+0x24ac9]        # 0x65043120
    6501e657:	jne    0x6501e66a
    6501e659:	rol    rcx,0x10
    6501e65d:	test   cx,0xffff
    6501e662:	jne    0x6501e666
    6501e664:	repz ret 
    6501e666:	ror    rcx,0x10
    6501e66a:	jmp    0x65022930
    6501e66f:	int3   
    6501e670:	rex push rbx
    6501e672:	sub    rsp,0x20
    6501e676:	mov    edx,0x8
    6501e67b:	lea    ecx,[rdx+0x18]
    6501e67e:	call   0x65022af0
    6501e683:	mov    rcx,rax
    6501e686:	mov    rbx,rax
    6501e689:	call   0x65020520
    6501e68e:	test   rbx,rbx
    6501e691:	mov    QWORD PTR [rip+0x2ab18],rax        # 0x650491b0
    6501e698:	mov    QWORD PTR [rip+0x2ab09],rax        # 0x650491a8
    6501e69f:	jne    0x6501e6aa
    6501e6a1:	lea    eax,[rbx+0x18]
    6501e6a4:	add    rsp,0x20
    6501e6a8:	pop    rbx
    6501e6a9:	ret    
    6501e6aa:	mov    QWORD PTR [rbx],0x0
    6501e6b1:	xor    eax,eax
    6501e6b3:	add    rsp,0x20
    6501e6b7:	pop    rbx
    6501e6b8:	ret    
    6501e6b9:	int3   
    6501e6ba:	int3   
    6501e6bb:	int3   
    6501e6bc:	int3   
    6501e6bd:	int3   
    6501e6be:	int3   
    6501e6bf:	int3   
    6501e6c0:	mov    QWORD PTR [rsp+0x8],rbx
    6501e6c5:	mov    QWORD PTR [rsp+0x10],rsi
    6501e6ca:	mov    QWORD PTR [rsp+0x18],rdi
    6501e6cf:	push   r12
    6501e6d1:	push   r13
    6501e6d3:	push   r14
    6501e6d5:	sub    rsp,0x20
    6501e6d9:	mov    rbx,rcx
    6501e6dc:	call   0x65022cd0
    6501e6e1:	nop
    6501e6e2:	mov    rcx,QWORD PTR [rip+0x2aac7]        # 0x650491b0
    6501e6e9:	call   0x650206e0
    6501e6ee:	mov    r13,rax
    6501e6f1:	mov    rcx,QWORD PTR [rip+0x2aab0]        # 0x650491a8
    6501e6f8:	call   0x650206e0
    6501e6fd:	mov    rsi,rax
    6501e700:	cmp    rax,r13
    6501e703:	jb     0x6501e79f
    6501e709:	mov    rdi,rax
    6501e70c:	sub    rdi,r13
    6501e70f:	lea    r14,[rdi+0x8]
    6501e713:	cmp    r14,0x8
    6501e717:	jb     0x6501e79f
    6501e71d:	mov    rcx,r13
    6501e720:	call   0x65022c10
    6501e725:	mov    r12,rax
    6501e728:	cmp    rax,r14
    6501e72b:	jae    0x6501e782
    6501e72d:	mov    edx,0x1000
    6501e732:	cmp    rax,rdx
    6501e735:	cmovb  rdx,rax
    6501e739:	add    rdx,rax
    6501e73c:	cmp    rdx,rax
    6501e73f:	jb     0x6501e74e
    6501e741:	mov    rcx,r13
    6501e744:	call   0x65022b80
    6501e749:	test   rax,rax
    6501e74c:	jne    0x6501e765
    6501e74e:	lea    rdx,[r12+0x20]
    6501e753:	cmp    rdx,r12
    6501e756:	jb     0x6501e77e
    6501e758:	mov    rcx,r13
    6501e75b:	call   0x65022b80
    6501e760:	test   rax,rax
    6501e763:	je     0x6501e77e
    6501e765:	sar    rdi,0x3
    6501e769:	lea    rsi,[rax+rdi*8]
    6501e76d:	mov    rcx,rax
    6501e770:	call   0x65020520
    6501e775:	mov    QWORD PTR [rip+0x2aa34],rax        # 0x650491b0
    6501e77c:	jmp    0x6501e782
    6501e77e:	xor    ebx,ebx
    6501e780:	jmp    0x6501e7a1
    6501e782:	mov    rcx,rbx
    6501e785:	call   0x65020520
    6501e78a:	mov    QWORD PTR [rsi],rax
    6501e78d:	lea    rcx,[rsi+0x8]
    6501e791:	call   0x65020520
    6501e796:	mov    QWORD PTR [rip+0x2aa0b],rax        # 0x650491a8
    6501e79d:	jmp    0x6501e7a1
    6501e79f:	xor    ebx,ebx
    6501e7a1:	call   0x65022ce0
    6501e7a6:	mov    rax,rbx
    6501e7a9:	mov    rbx,QWORD PTR [rsp+0x40]
    6501e7ae:	mov    rsi,QWORD PTR [rsp+0x48]
    6501e7b3:	mov    rdi,QWORD PTR [rsp+0x50]
    6501e7b8:	add    rsp,0x20
    6501e7bc:	pop    r14
    6501e7be:	pop    r13
    6501e7c0:	pop    r12
    6501e7c2:	ret    
    6501e7c3:	int3   
    6501e7c4:	int3   
    6501e7c5:	int3   
    6501e7c6:	int3   
    6501e7c7:	int3   
    6501e7c8:	int3   
    6501e7c9:	int3   
    6501e7ca:	int3   
    6501e7cb:	int3   
    6501e7cc:	int3   
    6501e7cd:	int3   
    6501e7ce:	int3   
    6501e7cf:	int3   
    6501e7d0:	rex push rbp
    6501e7d2:	sub    rsp,0x20
    6501e7d6:	mov    rbp,rdx
    6501e7d9:	call   0x65022ce0
    6501e7de:	add    rsp,0x20
    6501e7e2:	pop    rbp
    6501e7e3:	ret    
    6501e7e4:	int3   
    6501e7e5:	int3   
    6501e7e6:	int3   
    6501e7e7:	int3   
    6501e7e8:	int3   
    6501e7e9:	int3   
    6501e7ea:	int3   
    6501e7eb:	int3   
    6501e7ec:	int3   
    6501e7ed:	int3   
    6501e7ee:	int3   
    6501e7ef:	int3   
    6501e7f0:	sub    rsp,0x28
    6501e7f4:	call   0x6501e6c0
    6501e7f9:	neg    rax
    6501e7fc:	sbb    eax,eax
    6501e7fe:	neg    eax
    6501e800:	sub    eax,0x1
    6501e803:	add    rsp,0x28
    6501e807:	ret    
    6501e808:	int3   
    6501e809:	int3   
    6501e80a:	int3   
    6501e80b:	int3   
    6501e80c:	int3   
    6501e80d:	int3   
    6501e80e:	int3   
    6501e80f:	int3   
    6501e810:	cmp    WORD PTR [rdx],0x0
    6501e814:	mov    r10,rdx
    6501e817:	mov    r9,rcx
    6501e81a:	jne    0x6501e820
    6501e81c:	mov    rax,rcx
    6501e81f:	ret    
    6501e820:	movzx  eax,WORD PTR [rcx]
    6501e823:	test   ax,ax
    6501e826:	je     0x6501e870
    6501e828:	mov    r8,rcx
    6501e82b:	sub    r8,rdx
    6501e82e:	xchg   ax,ax
    6501e830:	test   ax,ax
    6501e833:	mov    rdx,r10
    6501e836:	je     0x6501e858
    6501e838:	movzx  eax,WORD PTR [rdx]
    6501e83b:	test   ax,ax
    6501e83e:	je     0x6501e873
    6501e840:	movzx  ecx,WORD PTR [r8+rdx*1]
    6501e845:	movzx  eax,ax
    6501e848:	cmp    ecx,eax
    6501e84a:	jne    0x6501e858
    6501e84c:	add    rdx,0x2
    6501e850:	cmp    WORD PTR [r8+rdx*1],0x0
    6501e856:	jne    0x6501e838
    6501e858:	cmp    WORD PTR [rdx],0x0
    6501e85c:	je     0x6501e873
    6501e85e:	mov    ax,WORD PTR [r9+0x2]
    6501e863:	add    r9,0x2
    6501e867:	add    r8,0x2
    6501e86b:	test   ax,ax
    6501e86e:	jne    0x6501e830
    6501e870:	xor    eax,eax
    6501e872:	ret    
    6501e873:	mov    rax,r9
    6501e876:	ret    
    6501e877:	int3   
    6501e878:	int3   
    6501e879:	int3   
    6501e87a:	int3   
    6501e87b:	int3   
    6501e87c:	int3   
    6501e87d:	int3   
    6501e87e:	int3   
    6501e87f:	int3   
    6501e880:	sub    rsp,0x68
    6501e884:	test   rcx,rcx
    6501e887:	jne    0x6501e8b2
    6501e889:	call   0x65020420
    6501e88e:	xor    r9d,r9d
    6501e891:	xor    r8d,r8d
    6501e894:	mov    DWORD PTR [rax],0x16
    6501e89a:	xor    eax,eax
    6501e89c:	xor    edx,edx
    6501e89e:	xor    ecx,ecx
    6501e8a0:	mov    QWORD PTR [rsp+0x20],rax
    6501e8a5:	call   0x6501d9c0
    6501e8aa:	or     eax,0xffffffff
    6501e8ad:	add    rsp,0x68
    6501e8b1:	ret    
    6501e8b2:	xor    eax,eax
    6501e8b4:	mov    r9,rdx
    6501e8b7:	mov    rdx,rcx
    6501e8ba:	lea    rcx,[rsp+0x30]
    6501e8bf:	xor    r8d,r8d
    6501e8c2:	mov    DWORD PTR [rsp+0x38],0x7fffffff
    6501e8ca:	mov    DWORD PTR [rsp+0x48],0x42
    6501e8d2:	mov    QWORD PTR [rsp+0x40],rax
    6501e8d7:	mov    QWORD PTR [rsp+0x30],rax
    6501e8dc:	call   0x650241c0
    6501e8e1:	add    rsp,0x68
    6501e8e5:	ret    
    6501e8e6:	int3   
    6501e8e7:	int3   
    6501e8e8:	int3   
    6501e8e9:	int3   
    6501e8ea:	int3   
    6501e8eb:	int3   
    6501e8ec:	int3   
    6501e8ed:	int3   
    6501e8ee:	int3   
    6501e8ef:	int3   
    6501e8f0:	mov    QWORD PTR [rsp+0x10],rbx
    6501e8f5:	push   rsi
    6501e8f6:	sub    rsp,0x60
    6501e8fa:	test   r9,r9
    6501e8fd:	mov    r10,r9
    6501e900:	mov    rsi,r8
    6501e903:	mov    rbx,rdx
    6501e906:	mov    r11,rcx
    6501e909:	jne    0x6501e93a
    6501e90b:	call   0x65020420
    6501e910:	xor    r9d,r9d
    6501e913:	xor    r8d,r8d
    6501e916:	mov    DWORD PTR [rax],0x16
    6501e91c:	xor    eax,eax
    6501e91e:	xor    edx,edx
    6501e920:	xor    ecx,ecx
    6501e922:	mov    QWORD PTR [rsp+0x20],rax
    6501e927:	call   0x6501d9c0
    6501e92c:	or     eax,0xffffffff
    6501e92f:	mov    rbx,QWORD PTR [rsp+0x78]
    6501e934:	add    rsp,0x60
    6501e938:	pop    rsi
    6501e939:	ret    
    6501e93a:	test   r8,r8
    6501e93d:	je     0x6501e944
    6501e93f:	test   rdx,rdx
    6501e942:	je     0x6501e90b
    6501e944:	cmp    r8,0x3fffffff
    6501e94b:	mov    QWORD PTR [rsp+0x70],rdi
    6501e950:	mov    DWORD PTR [rsp+0x48],0x42
    6501e958:	mov    QWORD PTR [rsp+0x40],rdx
    6501e95d:	mov    QWORD PTR [rsp+0x30],rdx
    6501e962:	jbe    0x6501e96e
    6501e964:	mov    DWORD PTR [rsp+0x38],0x7fffffff
    6501e96c:	jmp    0x6501e976
    6501e96e:	lea    eax,[r8+r8*1]
    6501e972:	mov    DWORD PTR [rsp+0x38],eax
    6501e976:	mov    r9,QWORD PTR [rsp+0x98]
    6501e97e:	mov    r8,QWORD PTR [rsp+0x90]
    6501e986:	lea    rcx,[rsp+0x30]
    6501e98b:	mov    rdx,r10
    6501e98e:	call   r11
    6501e991:	test   rbx,rbx
    6501e994:	mov    edi,eax
    6501e996:	je     0x6501ea27
    6501e99c:	test   eax,eax
    6501e99e:	js     0x6501ea14
    6501e9a0:	sub    DWORD PTR [rsp+0x38],0x1
    6501e9a5:	js     0x6501e9bf
    6501e9a7:	mov    rax,QWORD PTR [rsp+0x30]
    6501e9ac:	mov    BYTE PTR [rax],0x0
    6501e9af:	mov    rax,QWORD PTR [rsp+0x30]
    6501e9b4:	add    rax,0x1
    6501e9b8:	mov    QWORD PTR [rsp+0x30],rax
    6501e9bd:	jmp    0x6501e9d5
    6501e9bf:	lea    rdx,[rsp+0x30]
    6501e9c4:	xor    ecx,ecx
    6501e9c6:	call   0x65023f30
    6501e9cb:	cmp    eax,0xffffffff
    6501e9ce:	je     0x6501ea14
    6501e9d0:	mov    rax,QWORD PTR [rsp+0x30]
    6501e9d5:	sub    DWORD PTR [rsp+0x38],0x1
    6501e9da:	js     0x6501e9f1
    6501e9dc:	mov    BYTE PTR [rax],0x0
    6501e9df:	mov    eax,edi
    6501e9e1:	mov    rdi,QWORD PTR [rsp+0x70]
    6501e9e6:	mov    rbx,QWORD PTR [rsp+0x78]
    6501e9eb:	add    rsp,0x60
    6501e9ef:	pop    rsi
    6501e9f0:	ret    
    6501e9f1:	lea    rdx,[rsp+0x30]
    6501e9f6:	xor    ecx,ecx
    6501e9f8:	call   0x65023f30
    6501e9fd:	cmp    eax,0xffffffff
    6501ea00:	je     0x6501ea14
    6501ea02:	mov    eax,edi
    6501ea04:	mov    rdi,QWORD PTR [rsp+0x70]
    6501ea09:	mov    rbx,QWORD PTR [rsp+0x78]
    6501ea0e:	add    rsp,0x60
    6501ea12:	pop    rsi
    6501ea13:	ret    
    6501ea14:	xor    eax,eax
    6501ea16:	mov    WORD PTR [rbx+rsi*2-0x2],0x0
    6501ea1d:	cmp    DWORD PTR [rsp+0x38],eax
    6501ea21:	setge  al
    6501ea24:	add    eax,0xfffffffe
    6501ea27:	mov    rdi,QWORD PTR [rsp+0x70]
    6501ea2c:	mov    rbx,QWORD PTR [rsp+0x78]
    6501ea31:	add    rsp,0x60
    6501ea35:	pop    rsi
    6501ea36:	ret    
    6501ea37:	int3   
    6501ea38:	int3   
    6501ea39:	int3   
    6501ea3a:	int3   
    6501ea3b:	int3   
    6501ea3c:	int3   
    6501ea3d:	int3   
    6501ea3e:	int3   
    6501ea3f:	int3   
    6501ea40:	rex push rbx
    6501ea42:	sub    rsp,0x30
    6501ea46:	test   r8,r8
    6501ea49:	mov    rbx,rcx
    6501ea4c:	je     0x6501ea96
    6501ea4e:	test   rcx,rcx
    6501ea51:	je     0x6501ea96
    6501ea53:	test   rdx,rdx
    6501ea56:	je     0x6501ea96
    6501ea58:	mov    QWORD PTR [rsp+0x28],r9
    6501ea5d:	mov    r9,r8
    6501ea60:	mov    r8,rdx
    6501ea63:	mov    rdx,rcx
    6501ea66:	lea    rcx,[rip+0x6753]        # 0x650251c0
    6501ea6d:	mov    QWORD PTR [rsp+0x20],0x0
    6501ea76:	call   0x6501e8f0
    6501ea7b:	test   eax,eax
    6501ea7d:	jns    0x6501ea84
    6501ea7f:	mov    WORD PTR [rbx],0x0
    6501ea84:	cmp    eax,0xfffffffe
    6501ea87:	jne    0x6501eabc
    6501ea89:	call   0x65020420
    6501ea8e:	mov    DWORD PTR [rax],0x22
    6501ea94:	jmp    0x6501eaa1
    6501ea96:	call   0x65020420
    6501ea9b:	mov    DWORD PTR [rax],0x16
    6501eaa1:	xor    r9d,r9d
    6501eaa4:	xor    r8d,r8d
    6501eaa7:	xor    edx,edx
    6501eaa9:	xor    ecx,ecx
    6501eaab:	mov    QWORD PTR [rsp+0x20],0x0
    6501eab4:	call   0x6501d9c0
    6501eab9:	or     eax,0xffffffff
    6501eabc:	add    rsp,0x30
    6501eac0:	pop    rbx
    6501eac1:	ret    
    6501eac2:	int3   
    6501eac3:	int3   
    6501eac4:	int3   
    6501eac5:	int3   
    6501eac6:	int3   
    6501eac7:	int3   
    6501eac8:	int3   
    6501eac9:	int3   
    6501eaca:	int3   
    6501eacb:	int3   
    6501eacc:	int3   
    6501eacd:	int3   
    6501eace:	int3   
    6501eacf:	int3   
    6501ead0:	rex push rbx
    6501ead2:	sub    rsp,0x20
    6501ead6:	mov    eax,DWORD PTR [r8]
    6501ead9:	mov    rbx,rdx
    6501eadc:	mov    r9,rcx
    6501eadf:	mov    r11d,eax
    6501eae2:	mov    r10,rcx
    6501eae5:	and    r11d,0xfffffff8
    6501eae9:	test   al,0x4
    6501eaeb:	je     0x6501eb00
    6501eaed:	mov    eax,DWORD PTR [r8+0x8]
    6501eaf1:	movsxd r10,DWORD PTR [r8+0x4]
    6501eaf5:	neg    eax
    6501eaf7:	add    r10,rcx
    6501eafa:	movsxd rcx,eax
    6501eafd:	and    r10,rcx
    6501eb00:	movsxd rax,r11d
    6501eb03:	mov    rdx,QWORD PTR [rax+r10*1]
    6501eb07:	mov    rax,QWORD PTR [rbx+0x10]
    6501eb0b:	mov    ecx,DWORD PTR [rax+0x8]
    6501eb0e:	add    rcx,QWORD PTR [rbx+0x8]
    6501eb12:	movzx  eax,BYTE PTR [rcx+0x3]
    6501eb16:	test   al,0xf
    6501eb18:	je     0x6501eb25
    6501eb1a:	movzx  eax,al
    6501eb1d:	and    eax,0xfffffff0
    6501eb20:	cdqe   
    6501eb22:	add    r9,rax
    6501eb25:	xor    r9,rdx
    6501eb28:	mov    rcx,r9
    6501eb2b:	add    rsp,0x20
    6501eb2f:	pop    rbx
    6501eb30:	jmp    0x6501e650
    6501eb35:	int3   
    6501eb36:	int3   
    6501eb37:	int3   
    6501eb38:	int3   
    6501eb39:	int3   
    6501eb3a:	int3   
    6501eb3b:	int3   
    6501eb3c:	int3   
    6501eb3d:	int3   
    6501eb3e:	int3   
    6501eb3f:	int3   
    6501eb40:	sub    rsp,0x28
    6501eb44:	mov    rcx,QWORD PTR [r9+0x38]
    6501eb48:	mov    r10,r9
    6501eb4b:	mov    r8,rdx
    6501eb4e:	mov    eax,DWORD PTR [rcx]
    6501eb50:	mov    r9d,eax
    6501eb53:	and    r9d,0xfffffff8
    6501eb57:	test   al,0x4
    6501eb59:	je     0x6501eb6d
    6501eb5b:	mov    eax,DWORD PTR [rcx+0x8]
    6501eb5e:	movsxd r8,DWORD PTR [rcx+0x4]
    6501eb62:	neg    eax
    6501eb64:	add    r8,rdx
    6501eb67:	movsxd rcx,eax
    6501eb6a:	and    r8,rcx
    6501eb6d:	movsxd rax,r9d
    6501eb70:	mov    r9,QWORD PTR [rax+r8*1]
    6501eb74:	mov    rax,QWORD PTR [r10+0x10]
    6501eb78:	mov    ecx,DWORD PTR [rax+0x8]
    6501eb7b:	add    rcx,QWORD PTR [r10+0x8]
    6501eb7f:	movzx  eax,BYTE PTR [rcx+0x3]
    6501eb83:	test   al,0xf
    6501eb85:	je     0x6501eb92
    6501eb87:	movzx  eax,al
    6501eb8a:	and    eax,0xfffffff0
    6501eb8d:	cdqe   
    6501eb8f:	add    rdx,rax
    6501eb92:	xor    rdx,r9
    6501eb95:	mov    rcx,rdx
    6501eb98:	call   0x6501e650
    6501eb9d:	mov    eax,0x1
    6501eba2:	add    rsp,0x28
    6501eba6:	ret    
    6501eba7:	int3   
    6501eba8:	int3   
    6501eba9:	int3   
    6501ebaa:	int3   
    6501ebab:	int3   
    6501ebac:	int3   
    6501ebad:	int3   
    6501ebae:	int3   
    6501ebaf:	int3   
    6501ebb0:	sub    rsp,0x38
    6501ebb4:	test   rcx,rcx
    6501ebb7:	mov    r9,rcx
    6501ebba:	je     0x6501ebca
    6501ebbc:	test   rdx,rdx
    6501ebbf:	je     0x6501ebca
    6501ebc1:	test   r8,r8
    6501ebc4:	jne    0x6501ec00
    6501ebc6:	mov    WORD PTR [rcx],r8w
    6501ebca:	call   0x65020420
    6501ebcf:	xor    r9d,r9d
    6501ebd2:	xor    r8d,r8d
    6501ebd5:	xor    edx,edx
    6501ebd7:	xor    ecx,ecx
    6501ebd9:	mov    QWORD PTR [rsp+0x20],0x0
    6501ebe2:	mov    DWORD PTR [rax],0x16
    6501ebe8:	call   0x6501d9c0
    6501ebed:	mov    eax,0x16
    6501ebf2:	add    rsp,0x38
    6501ebf6:	ret    
    6501ebf7:	data16 xchg ax,ax
    6501ebfa:	data16 xchg ax,ax
    6501ebfd:	data16 xchg ax,ax
    6501ec00:	movzx  eax,WORD PTR [r8]
    6501ec04:	add    rcx,0x2
    6501ec08:	add    r8,0x2
    6501ec0c:	test   ax,ax
    6501ec0f:	mov    WORD PTR [rcx-0x2],ax
    6501ec13:	je     0x6501ec1b
    6501ec15:	sub    rdx,0x1
    6501ec19:	jne    0x6501ec00
    6501ec1b:	test   rdx,rdx
    6501ec1e:	jne    0x6501ec51
    6501ec20:	mov    WORD PTR [r9],dx
    6501ec24:	call   0x65020420
    6501ec29:	xor    r9d,r9d
    6501ec2c:	xor    r8d,r8d
    6501ec2f:	xor    edx,edx
    6501ec31:	xor    ecx,ecx
    6501ec33:	mov    DWORD PTR [rax],0x22
    6501ec39:	mov    QWORD PTR [rsp+0x20],0x0
    6501ec42:	call   0x6501d9c0
    6501ec47:	mov    eax,0x22
    6501ec4c:	add    rsp,0x38
    6501ec50:	ret    
    6501ec51:	xor    eax,eax
    6501ec53:	add    rsp,0x38
    6501ec57:	ret    
    6501ec58:	int3   
    6501ec59:	int3   
    6501ec5a:	int3   
    6501ec5b:	int3   
    6501ec5c:	int3   
    6501ec5d:	int3   
    6501ec5e:	int3   
    6501ec5f:	int3   
    6501ec60:	rex push rbp
    6501ec62:	push   r12
    6501ec64:	push   r13
    6501ec66:	sub    rsp,0x50
    6501ec6a:	lea    rbp,[rsp+0x40]
    6501ec6f:	mov    QWORD PTR [rbp+0x30],rbx
    6501ec73:	mov    QWORD PTR [rbp+0x38],rsi
    6501ec77:	mov    QWORD PTR [rbp+0x40],rdi
    6501ec7b:	mov    rax,QWORD PTR [rip+0x2449e]        # 0x65043120
    6501ec82:	xor    rax,rbp
    6501ec85:	mov    QWORD PTR [rbp+0x0],rax
    6501ec89:	test   rcx,rcx
    6501ec8c:	mov    r12,r8
    6501ec8f:	mov    rsi,rdx
    6501ec92:	mov    rbx,rcx
    6501ec95:	je     0x6501eca6
    6501ec97:	call   0x65026690
    6501ec9c:	cmp    rax,rsi
    6501ec9f:	jb     0x6501eccf
    6501eca1:	mov    WORD PTR [rbx],0x0
    6501eca6:	call   0x65020420
    6501ecab:	xor    edi,edi
    6501ecad:	xor    r9d,r9d
    6501ecb0:	xor    r8d,r8d
    6501ecb3:	xor    edx,edx
    6501ecb5:	xor    ecx,ecx
    6501ecb7:	mov    DWORD PTR [rax],0x16
    6501ecbd:	mov    QWORD PTR [rsp+0x20],rdi
    6501ecc2:	call   0x6501d9c0
    6501ecc7:	lea    eax,[rdi+0x16]
    6501ecca:	jmp    0x6501ee76
    6501eccf:	mov    rax,QWORD PTR [r12]
    6501ecd3:	mov    edx,DWORD PTR [rax+0x14]
    6501ecd6:	test   edx,edx
    6501ecd8:	jne    0x6501ed07
    6501ecda:	cmp    WORD PTR [rbx],dx
    6501ecdd:	je     0x6501ed00
    6501ecdf:	nop
    6501ece0:	movzx  eax,WORD PTR [rbx]
    6501ece3:	cmp    ax,0x41
    6501ece7:	jb     0x6501ecf6
    6501ece9:	cmp    ax,0x5a
    6501eced:	ja     0x6501ecf6
    6501ecef:	add    ax,0x20
    6501ecf3:	mov    WORD PTR [rbx],ax
    6501ecf6:	add    rbx,0x2
    6501ecfa:	cmp    WORD PTR [rbx],0x0
    6501ecfe:	jne    0x6501ece0
    6501ed00:	xor    eax,eax
    6501ed02:	jmp    0x6501ee76
    6501ed07:	mov    eax,DWORD PTR [rax+0x4]
    6501ed0a:	xor    edi,edi
    6501ed0c:	mov    r9,rbx
    6501ed0f:	mov    DWORD PTR [rsp+0x38],eax
    6501ed13:	mov    DWORD PTR [rsp+0x30],edi
    6501ed17:	mov    r8d,0x100
    6501ed1d:	mov    rcx,r12
    6501ed20:	mov    QWORD PTR [rsp+0x28],rdi
    6501ed25:	mov    DWORD PTR [rsp+0x20],0xffffffff
    6501ed2d:	call   0x65026540
    6501ed32:	test   eax,eax
    6501ed34:	movsxd r13,eax
    6501ed37:	jne    0x6501ed4a
    6501ed39:	call   0x65020420
    6501ed3e:	mov    ebx,0x2a
    6501ed43:	mov    DWORD PTR [rax],ebx
    6501ed45:	jmp    0x6501ee6f
    6501ed4a:	cmp    rsi,r13
    6501ed4d:	mov    rcx,r13
    6501ed50:	jae    0x6501ed7e
    6501ed52:	mov    WORD PTR [rbx],di
    6501ed55:	call   0x65020420
    6501ed5a:	xor    r9d,r9d
    6501ed5d:	xor    r8d,r8d
    6501ed60:	xor    edx,edx
    6501ed62:	xor    ecx,ecx
    6501ed64:	mov    DWORD PTR [rax],0x22
    6501ed6a:	mov    QWORD PTR [rsp+0x20],rdi
    6501ed6f:	call   0x6501d9c0
    6501ed74:	mov    eax,0x22
    6501ed79:	jmp    0x6501ee76
    6501ed7e:	test   eax,eax
    6501ed80:	jle    0x6501ee64
    6501ed86:	xor    edx,edx
    6501ed88:	mov    rax,0xffffffffffffffe0
    6501ed8f:	div    rcx
    6501ed92:	cmp    rax,0x2
    6501ed96:	jb     0x6501ee64
    6501ed9c:	lea    rcx,[r13+r13*1+0x10]
    6501eda1:	cmp    rcx,0x400
    6501eda8:	ja     0x6501eddf
    6501edaa:	lea    rax,[rcx+0xf]
    6501edae:	cmp    rax,rcx
    6501edb1:	ja     0x6501edbd
    6501edb3:	movabs rax,0xffffffffffffff0
    6501edbd:	and    rax,0xfffffffffffffff0
    6501edc1:	call   0x65033230
    6501edc6:	sub    rsp,rax
    6501edc9:	lea    rdi,[rsp+0x40]
    6501edce:	test   rdi,rdi
    6501edd1:	je     0x6501ee64
    6501edd7:	mov    DWORD PTR [rdi],0xcccc
    6501eddd:	jmp    0x6501edf2
    6501eddf:	call   0x6501fc50
    6501ede4:	test   rax,rax
    6501ede7:	mov    rdi,rax
    6501edea:	je     0x6501edf6
    6501edec:	mov    DWORD PTR [rax],0xdddd
    6501edf2:	add    rdi,0x10
    6501edf6:	test   rdi,rdi
    6501edf9:	je     0x6501ee64
    6501edfb:	mov    rcx,QWORD PTR [r12]
    6501edff:	mov    r9,rbx
    6501ee02:	mov    r8d,0x100
    6501ee08:	mov    eax,DWORD PTR [rcx+0x4]
    6501ee0b:	mov    edx,DWORD PTR [rcx+0x14]
    6501ee0e:	mov    rcx,r12
    6501ee11:	mov    DWORD PTR [rsp+0x38],eax
    6501ee15:	mov    DWORD PTR [rsp+0x30],r13d
    6501ee1a:	mov    QWORD PTR [rsp+0x28],rdi
    6501ee1f:	mov    DWORD PTR [rsp+0x20],0xffffffff
    6501ee27:	call   0x65026540
    6501ee2c:	test   eax,eax
    6501ee2e:	je     0x6501ee42
    6501ee30:	mov    r8,rdi
    6501ee33:	mov    rdx,rsi
    6501ee36:	mov    rcx,rbx
    6501ee39:	call   0x6501ebb0
    6501ee3e:	mov    ebx,eax
    6501ee40:	jmp    0x6501ee4e
    6501ee42:	call   0x65020420
    6501ee47:	mov    ebx,0x2a
    6501ee4c:	mov    DWORD PTR [rax],ebx
    6501ee4e:	cmp    DWORD PTR [rdi-0x10],0xdddd
    6501ee55:	lea    rcx,[rdi-0x10]
    6501ee59:	jne    0x6501ee60
    6501ee5b:	call   0x6501fc00
    6501ee60:	mov    eax,ebx
    6501ee62:	jmp    0x6501ee76
    6501ee64:	call   0x65020420
    6501ee69:	mov    DWORD PTR [rax],0xc
    6501ee6f:	call   0x65020420
    6501ee74:	mov    eax,DWORD PTR [rax]
    6501ee76:	mov    rcx,QWORD PTR [rbp+0x0]
    6501ee7a:	xor    rcx,rbp
    6501ee7d:	call   0x6501e650
    6501ee82:	mov    rbx,QWORD PTR [rbp+0x30]
    6501ee86:	mov    rsi,QWORD PTR [rbp+0x38]
    6501ee8a:	mov    rdi,QWORD PTR [rbp+0x40]
    6501ee8e:	lea    rsp,[rbp+0x10]
    6501ee92:	pop    r13
    6501ee94:	pop    r12
    6501ee96:	pop    rbp
    6501ee97:	ret    
    6501ee98:	int3   
    6501ee99:	int3   
    6501ee9a:	int3   
    6501ee9b:	int3   
    6501ee9c:	int3   
    6501ee9d:	int3   
    6501ee9e:	int3   
    6501ee9f:	int3   
    6501eea0:	mov    QWORD PTR [rsp+0x8],rbx
    6501eea5:	push   rdi
    6501eea6:	sub    rsp,0x40
    6501eeaa:	mov    rbx,rdx
    6501eead:	mov    rdi,rcx
    6501eeb0:	mov    BYTE PTR [rsp+0x38],0x0
    6501eeb5:	call   0x65020a30
    6501eeba:	mov    QWORD PTR [rsp+0x30],rax
    6501eebf:	mov    r11,rax
    6501eec2:	mov    r8,QWORD PTR [rax+0xc0]
    6501eec9:	cmp    r8,QWORD PTR [rip+0x24ad0]        # 0x650439a0
    6501eed0:	mov    QWORD PTR [rsp+0x20],r8
    6501eed5:	mov    rax,QWORD PTR [rax+0xb8]
    6501eedc:	mov    QWORD PTR [rsp+0x28],rax
    6501eee1:	je     0x6501ef07
    6501eee3:	mov    r8d,DWORD PTR [r11+0xc8]
    6501eeea:	test   DWORD PTR [rip+0x24937],r8d        # 0x65043828
    6501eef1:	jne    0x6501ef07
    6501eef3:	call   0x65023e90
    6501eef8:	mov    r11,QWORD PTR [rsp+0x30]
    6501eefd:	mov    QWORD PTR [rsp+0x20],rax
    6501ef02:	mov    rax,QWORD PTR [rsp+0x28]
    6501ef07:	cmp    rax,QWORD PTR [rip+0x24812]        # 0x65043720
    6501ef0e:	je     0x6501ef2e
    6501ef10:	mov    eax,DWORD PTR [r11+0xc8]
    6501ef17:	test   DWORD PTR [rip+0x2490b],eax        # 0x65043828
    6501ef1d:	jne    0x6501ef2e
    6501ef1f:	call   0x65023340
    6501ef24:	mov    r11,QWORD PTR [rsp+0x30]
    6501ef29:	mov    QWORD PTR [rsp+0x28],rax
    6501ef2e:	test   BYTE PTR [r11+0xc8],0x2
    6501ef36:	jne    0x6501ef45
    6501ef38:	or     DWORD PTR [r11+0xc8],0x2
    6501ef40:	mov    BYTE PTR [rsp+0x38],0x1
    6501ef45:	lea    r8,[rsp+0x20]
    6501ef4a:	mov    rdx,rbx
    6501ef4d:	mov    rcx,rdi
    6501ef50:	call   0x6501ec60
    6501ef55:	cmp    BYTE PTR [rsp+0x38],0x0
    6501ef5a:	je     0x6501ef68
    6501ef5c:	mov    rcx,QWORD PTR [rsp+0x30]
    6501ef61:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    6501ef68:	mov    rbx,QWORD PTR [rsp+0x50]
    6501ef6d:	add    rsp,0x40
    6501ef71:	pop    rdi
    6501ef72:	ret    
    6501ef73:	int3   
    6501ef74:	int3   
    6501ef75:	int3   
    6501ef76:	int3   
    6501ef77:	int3   
    6501ef78:	int3   
    6501ef79:	int3   
    6501ef7a:	int3   
    6501ef7b:	int3   
    6501ef7c:	int3   
    6501ef7d:	int3   
    6501ef7e:	int3   
    6501ef7f:	int3   
    6501ef80:	jmp    0x6501d300
    6501ef85:	int3   
    6501ef86:	int3   
    6501ef87:	int3   
    6501ef88:	int3   
    6501ef89:	int3   
    6501ef8a:	int3   
    6501ef8b:	int3   
    6501ef8c:	int3   
    6501ef8d:	int3   
    6501ef8e:	int3   
    6501ef8f:	int3   
    6501ef90:	int3   
    6501ef91:	int3   
    6501ef92:	int3   
    6501ef93:	int3   
    6501ef94:	int3   
    6501ef95:	int3   
    6501ef96:	data16 data16 xchg ax,ax
    6501ef9a:	data16 data16 xchg ax,ax
    6501ef9e:	xchg   ax,ax
    6501efa0:	mov    rax,rcx
    6501efa3:	cmp    r8,0x8
    6501efa7:	jb     0x6501effc
    6501efa9:	movzx  edx,dl
    6501efac:	movabs r9,0x101010101010101
    6501efb6:	imul   rdx,r9
    6501efba:	cmp    r8,0x40
    6501efbe:	jb     0x6501efde
    6501efc0:	neg    rcx
    6501efc3:	and    ecx,0x7
    6501efc6:	je     0x6501efce
    6501efc8:	sub    r8,rcx
    6501efcb:	mov    QWORD PTR [rax],rdx
    6501efce:	add    rcx,rax
    6501efd1:	mov    r9,r8
    6501efd4:	and    r8,0x3f
    6501efd8:	shr    r9,0x6
    6501efdc:	jne    0x6501f017
    6501efde:	mov    r9,r8
    6501efe1:	and    r8,0x7
    6501efe5:	shr    r9,0x3
    6501efe9:	je     0x6501effc
    6501efeb:	data16 data16 xchg ax,ax
    6501efef:	nop
    6501eff0:	mov    QWORD PTR [rcx],rdx
    6501eff3:	add    rcx,0x8
    6501eff7:	dec    r9
    6501effa:	jne    0x6501eff0
    6501effc:	test   r8,r8
    6501efff:	je     0x6501f00b
    6501f001:	mov    BYTE PTR [rcx],dl
    6501f003:	inc    rcx
    6501f006:	dec    r8
    6501f009:	jne    0x6501f001
    6501f00b:	ret    
    6501f00c:	data16 data16 xchg ax,ax
    6501f010:	data16 data16 xchg ax,ax
    6501f014:	data16 xchg ax,ax
    6501f017:	cmp    r9,0x1c00
    6501f01e:	jae    0x6501f050
    6501f020:	mov    QWORD PTR [rcx],rdx
    6501f023:	mov    QWORD PTR [rcx+0x8],rdx
    6501f027:	mov    QWORD PTR [rcx+0x10],rdx
    6501f02b:	add    rcx,0x40
    6501f02f:	mov    QWORD PTR [rcx-0x28],rdx
    6501f033:	mov    QWORD PTR [rcx-0x20],rdx
    6501f037:	dec    r9
    6501f03a:	mov    QWORD PTR [rcx-0x18],rdx
    6501f03e:	mov    QWORD PTR [rcx-0x10],rdx
    6501f042:	mov    QWORD PTR [rcx-0x8],rdx
    6501f046:	jne    0x6501f020
    6501f048:	jmp    0x6501efde
    6501f04a:	data16 xchg ax,ax
    6501f04d:	data16 xchg ax,ax
    6501f050:	movnti QWORD PTR [rcx],rdx
    6501f054:	movnti QWORD PTR [rcx+0x8],rdx
    6501f059:	movnti QWORD PTR [rcx+0x10],rdx
    6501f05e:	add    rcx,0x40
    6501f062:	movnti QWORD PTR [rcx-0x28],rdx
    6501f067:	movnti QWORD PTR [rcx-0x20],rdx
    6501f06c:	dec    r9
    6501f06f:	movnti QWORD PTR [rcx-0x18],rdx
    6501f074:	movnti QWORD PTR [rcx-0x10],rdx
    6501f079:	movnti QWORD PTR [rcx-0x8],rdx
    6501f07e:	jne    0x6501f050
    6501f080:	lock or BYTE PTR [rsp],0x0
    6501f085:	jmp    0x6501efde
    6501f08a:	int3   
    6501f08b:	int3   
    6501f08c:	int3   
    6501f08d:	int3   
    6501f08e:	int3   
    6501f08f:	int3   
    6501f090:	rex push rbx
    6501f092:	sub    rsp,0x20
    6501f096:	mov    ebx,ecx
    6501f098:	call   0x65020a30
    6501f09d:	mov    DWORD PTR [rax+0x1c],ebx
    6501f0a0:	add    rsp,0x20
    6501f0a4:	pop    rbx
    6501f0a5:	ret    
    6501f0a6:	int3   
    6501f0a7:	int3   
    6501f0a8:	int3   
    6501f0a9:	int3   
    6501f0aa:	int3   
    6501f0ab:	int3   
    6501f0ac:	int3   
    6501f0ad:	int3   
    6501f0ae:	int3   
    6501f0af:	int3   
    6501f0b0:	sub    rsp,0x28
    6501f0b4:	call   0x65020a30
    6501f0b9:	mov    ecx,DWORD PTR [rax+0x1c]
    6501f0bc:	imul   ecx,ecx,0x343fd
    6501f0c2:	add    ecx,0x269ec3
    6501f0c8:	mov    DWORD PTR [rax+0x1c],ecx
    6501f0cb:	shr    ecx,0x10
    6501f0ce:	and    ecx,0x7fff
    6501f0d4:	mov    eax,ecx
    6501f0d6:	add    rsp,0x28
    6501f0da:	ret    
    6501f0db:	int3   
    6501f0dc:	int3   
    6501f0dd:	int3   
    6501f0de:	int3   
    6501f0df:	int3   
    6501f0e0:	rex push rbx
    6501f0e2:	sub    rsp,0x20
    6501f0e6:	cmp    edx,0x1
    6501f0e9:	mov    rbx,r8
    6501f0ec:	jne    0x6501f247
    6501f0f2:	call   QWORD PTR [rip+0x150e8]        # 0x650341e0
    6501f0f8:	xor    edx,edx
    6501f0fa:	mov    r8d,0x94
    6501f100:	mov    rcx,rax
    6501f103:	call   QWORD PTR [rip+0x150b7]        # 0x650341c0
    6501f109:	test   rax,rax
    6501f10c:	mov    rbx,rax
    6501f10f:	je     0x6501f138
    6501f111:	mov    rcx,rax
    6501f114:	mov    DWORD PTR [rax],0x94
    6501f11a:	call   QWORD PTR [rip+0x15088]        # 0x650341a8
    6501f120:	test   eax,eax
    6501f122:	jne    0x6501f140
    6501f124:	call   QWORD PTR [rip+0x150b6]        # 0x650341e0
    6501f12a:	mov    r8,rbx
    6501f12d:	xor    edx,edx
    6501f12f:	mov    rcx,rax
    6501f132:	call   QWORD PTR [rip+0x15090]        # 0x650341c8
    6501f138:	xor    eax,eax
    6501f13a:	add    rsp,0x20
    6501f13e:	pop    rbx
    6501f13f:	ret    
    6501f140:	mov    QWORD PTR [rsp+0x30],rbp
    6501f145:	mov    ebp,DWORD PTR [rbx+0x8]
    6501f148:	mov    QWORD PTR [rsp+0x38],rsi
    6501f14d:	mov    esi,DWORD PTR [rbx+0x4]
    6501f150:	mov    QWORD PTR [rsp+0x40],rdi
    6501f155:	mov    edi,DWORD PTR [rbx+0xc]
    6501f158:	mov    QWORD PTR [rsp+0x48],r12
    6501f15d:	mov    r12d,DWORD PTR [rbx+0x10]
    6501f161:	and    edi,0x7fff
    6501f167:	call   QWORD PTR [rip+0x15073]        # 0x650341e0
    6501f16d:	mov    r8,rbx
    6501f170:	xor    edx,edx
    6501f172:	mov    rcx,rax
    6501f175:	call   QWORD PTR [rip+0x1504d]        # 0x650341c8
    6501f17b:	cmp    r12d,0x2
    6501f17f:	je     0x6501f185
    6501f181:	bts    edi,0xf
    6501f185:	mov    eax,esi
    6501f187:	mov    ecx,0x1
    6501f18c:	mov    DWORD PTR [rip+0x26069],r12d        # 0x650451fc
    6501f193:	shl    eax,0x8
    6501f196:	mov    DWORD PTR [rip+0x2606c],esi        # 0x65045208
    6501f19c:	mov    DWORD PTR [rip+0x2606a],ebp        # 0x6504520c
    6501f1a2:	add    eax,ebp
    6501f1a4:	mov    DWORD PTR [rip+0x26056],edi        # 0x65045200
    6501f1aa:	mov    DWORD PTR [rip+0x26054],eax        # 0x65045204
    6501f1b0:	call   0x650266b0
    6501f1b5:	mov    r12,QWORD PTR [rsp+0x48]
    6501f1ba:	test   eax,eax
    6501f1bc:	mov    rdi,QWORD PTR [rsp+0x40]
    6501f1c1:	mov    rsi,QWORD PTR [rsp+0x38]
    6501f1c6:	mov    rbp,QWORD PTR [rsp+0x30]
    6501f1cb:	je     0x6501f138
    6501f1d1:	call   0x65020ca0
    6501f1d6:	test   eax,eax
    6501f1d8:	je     0x6501f23a
    6501f1da:	call   0x65027180
    6501f1df:	call   QWORD PTR [rip+0x15053]        # 0x65034238
    6501f1e5:	mov    QWORD PTR [rip+0x29fe4],rax        # 0x650491d0
    6501f1ec:	call   0x65026fb0
    6501f1f1:	mov    QWORD PTR [rip+0x25a48],rax        # 0x65044c40
    6501f1f8:	call   0x65026740
    6501f1fd:	test   eax,eax
    6501f1ff:	js     0x6501f235
    6501f201:	call   0x65026ea0
    6501f206:	test   eax,eax
    6501f208:	js     0x6501f230
    6501f20a:	call   0x65026b10
    6501f20f:	test   eax,eax
    6501f211:	js     0x6501f230
    6501f213:	xor    ecx,ecx
    6501f215:	call   0x65022dd0
    6501f21a:	test   eax,eax
    6501f21c:	jne    0x6501f230
    6501f21e:	add    DWORD PTR [rip+0x25a13],0x1        # 0x65044c38
    6501f225:	mov    eax,0x1
    6501f22a:	add    rsp,0x20
    6501f22e:	pop    rbx
    6501f22f:	ret    
    6501f230:	call   0x65026a80
    6501f235:	call   0x650207c0
    6501f23a:	call   0x65026710
    6501f23f:	xor    eax,eax
    6501f241:	add    rsp,0x20
    6501f245:	pop    rbx
    6501f246:	ret    
    6501f247:	test   edx,edx
    6501f249:	jne    0x6501f290
    6501f24b:	mov    eax,DWORD PTR [rip+0x259e7]        # 0x65044c38
    6501f251:	test   eax,eax
    6501f253:	jle    0x6501f138
    6501f259:	sub    eax,0x1
    6501f25c:	cmp    DWORD PTR [rip+0x25ff6],edx        # 0x65045258
    6501f262:	mov    DWORD PTR [rip+0x259d0],eax        # 0x65044c38
    6501f268:	jne    0x6501f26f
    6501f26a:	call   0x65022ff0
    6501f26f:	test   rbx,rbx
    6501f272:	jne    0x6501f309
    6501f278:	call   0x65026a80
    6501f27d:	call   0x650207c0
    6501f282:	call   0x65026710
    6501f287:	lea    eax,[rbx+0x1]
    6501f28a:	add    rsp,0x20
    6501f28e:	pop    rbx
    6501f28f:	ret    
    6501f290:	cmp    edx,0x2
    6501f293:	jne    0x6501f2fd
    6501f295:	call   0x650207b0
    6501f29a:	mov    edx,0x2d8
    6501f29f:	mov    ecx,0x1
    6501f2a4:	call   0x65022af0
    6501f2a9:	test   rax,rax
    6501f2ac:	mov    rbx,rax
    6501f2af:	je     0x6501f138
    6501f2b5:	mov    ecx,DWORD PTR [rip+0x23fe5]        # 0x650432a0
    6501f2bb:	mov    rdx,rax
    6501f2be:	call   QWORD PTR [rip+0x14f6c]        # 0x65034230
    6501f2c4:	test   eax,eax
    6501f2c6:	je     0x6501f2ed
    6501f2c8:	xor    edx,edx
    6501f2ca:	mov    rcx,rbx
    6501f2cd:	call   0x65020810
    6501f2d2:	call   QWORD PTR [rip+0x14f50]        # 0x65034228
    6501f2d8:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
    6501f2e0:	mov    DWORD PTR [rbx],eax
    6501f2e2:	mov    eax,0x1
    6501f2e7:	add    rsp,0x20
    6501f2eb:	pop    rbx
    6501f2ec:	ret    
    6501f2ed:	mov    rcx,rbx
    6501f2f0:	call   0x6501fc00
    6501f2f5:	xor    eax,eax
    6501f2f7:	add    rsp,0x20
    6501f2fb:	pop    rbx
    6501f2fc:	ret    
    6501f2fd:	cmp    edx,0x3
    6501f300:	jne    0x6501f309
    6501f302:	xor    ecx,ecx
    6501f304:	call   0x65020c40
    6501f309:	mov    eax,0x1
    6501f30e:	add    rsp,0x20
    6501f312:	pop    rbx
    6501f313:	ret    
    6501f314:	int3   
    6501f315:	int3   
    6501f316:	int3   
    6501f317:	int3   
    6501f318:	int3   
    6501f319:	int3   
    6501f31a:	int3   
    6501f31b:	int3   
    6501f31c:	int3   
    6501f31d:	int3   
    6501f31e:	int3   
    6501f31f:	int3   
    6501f320:	mov    QWORD PTR [rsp+0x8],rbx
    6501f325:	mov    QWORD PTR [rsp+0x10],rsi
    6501f32a:	mov    QWORD PTR [rsp+0x18],rdi
    6501f32f:	push   r12
    6501f331:	sub    rsp,0x30
    6501f335:	mov    rsi,r8
    6501f338:	mov    edi,edx
    6501f33a:	mov    r12,rcx
    6501f33d:	mov    eax,0x1
    6501f342:	test   edx,edx
    6501f344:	jne    0x6501f355
    6501f346:	cmp    DWORD PTR [rip+0x258ec],edx        # 0x65044c38
    6501f34c:	jne    0x6501f355
    6501f34e:	xor    eax,eax
    6501f350:	jmp    0x6501f424
    6501f355:	cmp    edx,0x1
    6501f358:	je     0x6501f35f
    6501f35a:	cmp    edx,0x2
    6501f35d:	jne    0x6501f38f
    6501f35f:	mov    r9,QWORD PTR [rip+0x16052]        # 0x650353b8
    6501f366:	test   r9,r9
    6501f369:	je     0x6501f372
    6501f36b:	call   r9
    6501f36e:	mov    DWORD PTR [rsp+0x20],eax
    6501f372:	test   eax,eax
    6501f374:	je     0x6501f387
    6501f376:	mov    r8,rsi
    6501f379:	mov    edx,edi
    6501f37b:	mov    rcx,r12
    6501f37e:	call   0x6501f0e0
    6501f383:	mov    DWORD PTR [rsp+0x20],eax
    6501f387:	test   eax,eax
    6501f389:	je     0x6501f424
    6501f38f:	mov    r8,rsi
    6501f392:	mov    edx,edi
    6501f394:	mov    rcx,r12
    6501f397:	call   0x65018470
    6501f39c:	mov    ebx,eax
    6501f39e:	mov    DWORD PTR [rsp+0x20],eax
    6501f3a2:	cmp    edi,0x1
    6501f3a5:	jne    0x6501f3dc
    6501f3a7:	test   eax,eax
    6501f3a9:	jne    0x6501f3dc
    6501f3ab:	mov    r8,rsi
    6501f3ae:	xor    edx,edx
    6501f3b0:	mov    rcx,r12
    6501f3b3:	call   0x65018470
    6501f3b8:	mov    r8,rsi
    6501f3bb:	xor    edx,edx
    6501f3bd:	mov    rcx,r12
    6501f3c0:	call   0x6501f0e0
    6501f3c5:	mov    r11,QWORD PTR [rip+0x15fec]        # 0x650353b8
    6501f3cc:	test   r11,r11
    6501f3cf:	je     0x6501f3dc
    6501f3d1:	mov    r8,rsi
    6501f3d4:	xor    edx,edx
    6501f3d6:	mov    rcx,r12
    6501f3d9:	call   r11
    6501f3dc:	test   edi,edi
    6501f3de:	je     0x6501f3e5
    6501f3e0:	cmp    edi,0x3
    6501f3e3:	jne    0x6501f41e
    6501f3e5:	mov    r8,rsi
    6501f3e8:	mov    edx,edi
    6501f3ea:	mov    rcx,r12
    6501f3ed:	call   0x6501f0e0
    6501f3f2:	test   eax,eax
    6501f3f4:	jne    0x6501f3fe
    6501f3f6:	xor    ebx,ebx
    6501f3f8:	mov    DWORD PTR [rsp+0x20],ebx
    6501f3fc:	jmp    0x6501f41e
    6501f3fe:	test   ebx,ebx
    6501f400:	je     0x6501f41e
    6501f402:	mov    rax,QWORD PTR [rip+0x15faf]        # 0x650353b8
    6501f409:	test   rax,rax
    6501f40c:	je     0x6501f41e
    6501f40e:	mov    r8,rsi
    6501f411:	mov    edx,edi
    6501f413:	mov    rcx,r12
    6501f416:	call   rax
    6501f418:	mov    ebx,eax
    6501f41a:	mov    DWORD PTR [rsp+0x20],eax
    6501f41e:	mov    eax,ebx
    6501f420:	jmp    0x6501f424
    6501f422:	xor    eax,eax
    6501f424:	mov    rbx,QWORD PTR [rsp+0x40]
    6501f429:	mov    rsi,QWORD PTR [rsp+0x48]
    6501f42e:	mov    rdi,QWORD PTR [rsp+0x50]
    6501f433:	add    rsp,0x30
    6501f437:	pop    r12
    6501f439:	ret    
    6501f43a:	int3   
    6501f43b:	int3   
    6501f43c:	int3   
    6501f43d:	int3   
    6501f43e:	int3   
    6501f43f:	int3   
    6501f440:	rex push rbp
    6501f442:	sub    rsp,0x20
    6501f446:	mov    rbp,rdx
    6501f449:	mov    rax,QWORD PTR [rcx]
    6501f44c:	mov    rdx,rcx
    6501f44f:	mov    ecx,DWORD PTR [rax]
    6501f451:	call   0x65027410
    6501f456:	add    rsp,0x20
    6501f45a:	pop    rbp
    6501f45b:	ret    
    6501f45c:	int3   
    6501f45d:	int3   
    6501f45e:	int3   
    6501f45f:	int3   
    6501f460:	mov    QWORD PTR [rsp+0x8],rbx
    6501f465:	mov    QWORD PTR [rsp+0x10],rsi
    6501f46a:	push   rdi
    6501f46b:	sub    rsp,0x20
    6501f46f:	cmp    edx,0x1
    6501f472:	mov    rdi,r8
    6501f475:	mov    ebx,edx
    6501f477:	mov    rsi,rcx
    6501f47a:	jne    0x6501f481
    6501f47c:	call   0x65027420
    6501f481:	mov    r8,rdi
    6501f484:	mov    edx,ebx
    6501f486:	mov    rcx,rsi
    6501f489:	mov    rbx,QWORD PTR [rsp+0x30]
    6501f48e:	mov    rsi,QWORD PTR [rsp+0x38]
    6501f493:	add    rsp,0x20
    6501f497:	pop    rdi
    6501f498:	jmp    0x6501f320
    6501f49d:	int3   
    6501f49e:	int3   
    6501f49f:	int3   
    6501f4a0:	movzx  eax,WORD PTR [rcx]
    6501f4a3:	test   ax,ax
    6501f4a6:	je     0x6501f4ba
    6501f4a8:	cmp    ax,dx
    6501f4ab:	je     0x6501f4bf
    6501f4ad:	mov    ax,WORD PTR [rcx+0x2]
    6501f4b1:	add    rcx,0x2
    6501f4b5:	test   ax,ax
    6501f4b8:	jne    0x6501f4a8
    6501f4ba:	cmp    WORD PTR [rcx],dx
    6501f4bd:	jne    0x6501f4c3
    6501f4bf:	mov    rax,rcx
    6501f4c2:	ret    
    6501f4c3:	xor    eax,eax
    6501f4c5:	ret    
    6501f4c6:	int3   
    6501f4c7:	int3   
    6501f4c8:	int3   
    6501f4c9:	int3   
    6501f4ca:	int3   
    6501f4cb:	int3   
    6501f4cc:	int3   
    6501f4cd:	int3   
    6501f4ce:	int3   
    6501f4cf:	int3   
    6501f4d0:	cmp    r8d,0xa
    6501f4d4:	mov    r11d,r8d
    6501f4d7:	mov    r10,rdx
    6501f4da:	mov    eax,ecx
    6501f4dc:	jne    0x6501f4e8
    6501f4de:	test   ecx,ecx
    6501f4e0:	jns    0x6501f4e8
    6501f4e2:	lea    ecx,[r8-0x9]
    6501f4e6:	jmp    0x6501f4ea
    6501f4e8:	xor    ecx,ecx
    6501f4ea:	test   ecx,ecx
    6501f4ec:	mov    r8,rdx
    6501f4ef:	je     0x6501f4fa
    6501f4f1:	mov    BYTE PTR [rdx],0x2d
    6501f4f4:	lea    r8,[rdx+0x1]
    6501f4f8:	neg    eax
    6501f4fa:	mov    r9,r8
    6501f4fd:	data16 xchg ax,ax
    6501f500:	xor    edx,edx
    6501f502:	div    r11d
    6501f505:	cmp    edx,0x9
    6501f508:	jbe    0x6501f50f
    6501f50a:	add    dl,0x57
    6501f50d:	jmp    0x6501f512
    6501f50f:	add    dl,0x30
    6501f512:	mov    BYTE PTR [r8],dl
    6501f515:	add    r8,0x1
    6501f519:	test   eax,eax
    6501f51b:	jne    0x6501f500
    6501f51d:	mov    BYTE PTR [r8],al
    6501f520:	sub    r8,0x1
    6501f524:	data16 data16 xchg ax,ax
    6501f528:	data16 data16 xchg ax,ax
    6501f52c:	data16 data16 xchg ax,ax
    6501f530:	movzx  eax,BYTE PTR [r9]
    6501f534:	movzx  ecx,BYTE PTR [r8]
    6501f538:	add    r9,0x1
    6501f53c:	mov    BYTE PTR [r8],al
    6501f53f:	mov    BYTE PTR [r9-0x1],cl
    6501f543:	sub    r8,0x1
    6501f547:	cmp    r9,r8
    6501f54a:	jb     0x6501f530
    6501f54c:	mov    rax,r10
    6501f54f:	ret    
    6501f550:	mov    QWORD PTR [rsp+0x10],rdx
    6501f555:	mov    QWORD PTR [rsp+0x18],r8
    6501f55a:	mov    QWORD PTR [rsp+0x20],r9
    6501f55f:	sub    rsp,0x68
    6501f563:	test   rdx,rdx
    6501f566:	jne    0x6501f593
    6501f568:	call   0x65020420
    6501f56d:	xor    r9d,r9d
    6501f570:	xor    r8d,r8d
    6501f573:	xor    edx,edx
    6501f575:	xor    ecx,ecx
    6501f577:	mov    QWORD PTR [rsp+0x20],0x0
    6501f580:	mov    DWORD PTR [rax],0x16
    6501f586:	call   0x6501d9c0
    6501f58b:	or     eax,0xffffffff
    6501f58e:	add    rsp,0x68
    6501f592:	ret    
    6501f593:	test   rcx,rcx
    6501f596:	je     0x6501f568
    6501f598:	mov    QWORD PTR [rsp+0x40],rcx
    6501f59d:	mov    QWORD PTR [rsp+0x30],rcx
    6501f5a2:	lea    r9,[rsp+0x80]
    6501f5aa:	lea    rcx,[rsp+0x30]
    6501f5af:	xor    r8d,r8d
    6501f5b2:	mov    QWORD PTR [rsp+0x60],rbx
    6501f5b7:	mov    DWORD PTR [rsp+0x38],0x7fffffff
    6501f5bf:	mov    DWORD PTR [rsp+0x48],0x42
    6501f5c7:	call   0x65027660
    6501f5cc:	sub    DWORD PTR [rsp+0x38],0x1
    6501f5d1:	mov    ebx,eax
    6501f5d3:	js     0x6501f5e7
    6501f5d5:	mov    rcx,QWORD PTR [rsp+0x30]
    6501f5da:	mov    rbx,QWORD PTR [rsp+0x60]
    6501f5df:	mov    BYTE PTR [rcx],0x0
    6501f5e2:	add    rsp,0x68
    6501f5e6:	ret    
    6501f5e7:	lea    rdx,[rsp+0x30]
    6501f5ec:	xor    ecx,ecx
    6501f5ee:	call   0x65023f30
    6501f5f3:	mov    eax,ebx
    6501f5f5:	mov    rbx,QWORD PTR [rsp+0x60]
    6501f5fa:	add    rsp,0x68
    6501f5fe:	ret    
    6501f5ff:	int3   
    6501f600:	mov    QWORD PTR [rsp+0x18],r8
    6501f605:	mov    QWORD PTR [rsp+0x20],r9
    6501f60a:	sub    rsp,0x38
    6501f60e:	lea    rax,[rsp+0x58]
    6501f613:	xor    r9d,r9d
    6501f616:	mov    QWORD PTR [rsp+0x20],rax
    6501f61b:	call   0x65028740
    6501f620:	add    rsp,0x38
    6501f624:	ret    
    6501f625:	int3   
    6501f626:	int3   
    6501f627:	int3   
    6501f628:	int3   
    6501f629:	int3   
    6501f62a:	int3   
    6501f62b:	int3   
    6501f62c:	int3   
    6501f62d:	int3   
    6501f62e:	int3   
    6501f62f:	int3   
    6501f630:	rex push rbx
    6501f632:	sub    rsp,0x70
    6501f636:	test   rdx,rdx
    6501f639:	movsxd rbx,ecx
    6501f63c:	mov    BYTE PTR [rsp+0x68],0x0
    6501f641:	jne    0x6501f6ea
    6501f647:	call   0x65020a30
    6501f64c:	mov    QWORD PTR [rsp+0x60],rax
    6501f651:	mov    r11,rax
    6501f654:	mov    rdx,QWORD PTR [rax+0xc0]
    6501f65b:	cmp    rdx,QWORD PTR [rip+0x2433e]        # 0x650439a0
    6501f662:	mov    QWORD PTR [rsp+0x50],rdx
    6501f667:	mov    rax,QWORD PTR [rax+0xb8]
    6501f66e:	mov    QWORD PTR [rsp+0x58],rax
    6501f673:	je     0x6501f69b
    6501f675:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f67c:	test   DWORD PTR [rip+0x241a6],ecx        # 0x65043828
    6501f682:	jne    0x6501f69b
    6501f684:	call   0x65023e90
    6501f689:	mov    r11,QWORD PTR [rsp+0x60]
    6501f68e:	mov    rdx,rax
    6501f691:	mov    QWORD PTR [rsp+0x50],rax
    6501f696:	mov    rax,QWORD PTR [rsp+0x58]
    6501f69b:	cmp    rax,QWORD PTR [rip+0x2407e]        # 0x65043720
    6501f6a2:	je     0x6501f6c7
    6501f6a4:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f6ab:	test   DWORD PTR [rip+0x24177],ecx        # 0x65043828
    6501f6b1:	jne    0x6501f6c7
    6501f6b3:	call   0x65023340
    6501f6b8:	mov    r11,QWORD PTR [rsp+0x60]
    6501f6bd:	mov    rdx,QWORD PTR [rsp+0x50]
    6501f6c2:	mov    QWORD PTR [rsp+0x58],rax
    6501f6c7:	test   BYTE PTR [r11+0xc8],0x2
    6501f6cf:	jne    0x6501f707
    6501f6d1:	or     DWORD PTR [r11+0xc8],0x2
    6501f6d9:	mov    r11,QWORD PTR [rsp+0x60]
    6501f6de:	mov    rdx,QWORD PTR [rsp+0x50]
    6501f6e3:	mov    BYTE PTR [rsp+0x68],0x1
    6501f6e8:	jmp    0x6501f707
    6501f6ea:	mov    rax,QWORD PTR [rdx]
    6501f6ed:	lea    rcx,[rsp+0x50]
    6501f6f2:	mov    QWORD PTR [rcx],rax
    6501f6f5:	mov    rax,QWORD PTR [rdx+0x8]
    6501f6f9:	mov    QWORD PTR [rcx+0x8],rax
    6501f6fd:	mov    r11,QWORD PTR [rsp+0x60]
    6501f702:	mov    rdx,QWORD PTR [rsp+0x50]
    6501f707:	cmp    ebx,0x100
    6501f70d:	jae    0x6501f781
    6501f70f:	cmp    DWORD PTR [rdx+0x10c],0x1
    6501f716:	jle    0x6501f735
    6501f718:	lea    r8,[rsp+0x50]
    6501f71d:	mov    edx,0x1
    6501f722:	mov    ecx,ebx
    6501f724:	call   0x65029030
    6501f729:	mov    r11,QWORD PTR [rsp+0x60]
    6501f72e:	mov    rdx,QWORD PTR [rsp+0x50]
    6501f733:	jmp    0x6501f742
    6501f735:	mov    rax,QWORD PTR [rdx+0x140]
    6501f73c:	mov    al,BYTE PTR [rax+rbx*2]
    6501f73f:	and    eax,0x1
    6501f742:	test   eax,eax
    6501f744:	je     0x6501f76a
    6501f746:	cmp    BYTE PTR [rsp+0x68],0x0
    6501f74b:	mov    rax,QWORD PTR [rdx+0x148]
    6501f752:	movzx  eax,BYTE PTR [rax+rbx*1]
    6501f756:	je     0x6501f890
    6501f75c:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501f764:	add    rsp,0x70
    6501f768:	pop    rbx
    6501f769:	ret    
    6501f76a:	cmp    BYTE PTR [rsp+0x68],0x0
    6501f76f:	je     0x6501f779
    6501f771:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501f779:	mov    eax,ebx
    6501f77b:	add    rsp,0x70
    6501f77f:	pop    rbx
    6501f780:	ret    
    6501f781:	cmp    DWORD PTR [rdx+0x10c],0x1
    6501f788:	mov    QWORD PTR [rsp+0x90],rdi
    6501f790:	jle    0x6501f7c7
    6501f792:	mov    edi,ebx
    6501f794:	lea    rdx,[rsp+0x50]
    6501f799:	sar    edi,0x8
    6501f79c:	movzx  ecx,dil
    6501f7a0:	call   0x65028e70
    6501f7a5:	test   eax,eax
    6501f7a7:	je     0x6501f7c7
    6501f7a9:	mov    BYTE PTR [rsp+0x80],dil
    6501f7b1:	mov    BYTE PTR [rsp+0x81],bl
    6501f7b8:	mov    BYTE PTR [rsp+0x82],0x0
    6501f7c0:	mov    edx,0x2
    6501f7c5:	jmp    0x6501f7e6
    6501f7c7:	call   0x65020420
    6501f7cc:	mov    edx,0x1
    6501f7d1:	mov    DWORD PTR [rax],0x2a
    6501f7d7:	mov    BYTE PTR [rsp+0x80],bl
    6501f7de:	mov    BYTE PTR [rsp+0x81],0x0
    6501f7e6:	mov    rcx,QWORD PTR [rsp+0x50]
    6501f7eb:	mov    DWORD PTR [rsp+0x40],0x1
    6501f7f3:	lea    r9,[rsp+0x80]
    6501f7fb:	mov    eax,DWORD PTR [rcx+0x4]
    6501f7fe:	mov    r8d,0x100
    6501f804:	mov    DWORD PTR [rsp+0x38],eax
    6501f808:	lea    rax,[rsp+0x88]
    6501f810:	mov    DWORD PTR [rsp+0x30],0x3
    6501f818:	mov    QWORD PTR [rsp+0x28],rax
    6501f81d:	mov    DWORD PTR [rsp+0x20],edx
    6501f821:	mov    edx,DWORD PTR [rcx+0x14]
    6501f824:	lea    rcx,[rsp+0x50]
    6501f829:	call   0x65028d10
    6501f82e:	mov    rdi,QWORD PTR [rsp+0x90]
    6501f836:	test   eax,eax
    6501f838:	jne    0x6501f854
    6501f83a:	cmp    BYTE PTR [rsp+0x68],al
    6501f83e:	je     0x6501f84c
    6501f840:	mov    rax,QWORD PTR [rsp+0x60]
    6501f845:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6501f84c:	mov    eax,ebx
    6501f84e:	add    rsp,0x70
    6501f852:	pop    rbx
    6501f853:	ret    
    6501f854:	cmp    eax,0x1
    6501f857:	jne    0x6501f868
    6501f859:	movzx  eax,BYTE PTR [rsp+0x88]
    6501f861:	cmp    BYTE PTR [rsp+0x68],0x0
    6501f866:	jmp    0x6501f882
    6501f868:	movzx  eax,BYTE PTR [rsp+0x88]
    6501f870:	movzx  ecx,BYTE PTR [rsp+0x89]
    6501f878:	shl    eax,0x8
    6501f87b:	or     eax,ecx
    6501f87d:	cmp    BYTE PTR [rsp+0x68],0x0
    6501f882:	je     0x6501f890
    6501f884:	mov    rcx,QWORD PTR [rsp+0x60]
    6501f889:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    6501f890:	add    rsp,0x70
    6501f894:	pop    rbx
    6501f895:	ret    
    6501f896:	int3   
    6501f897:	int3   
    6501f898:	int3   
    6501f899:	int3   
    6501f89a:	int3   
    6501f89b:	int3   
    6501f89c:	int3   
    6501f89d:	int3   
    6501f89e:	int3   
    6501f89f:	int3   
    6501f8a0:	cmp    DWORD PTR [rip+0x259d9],0x0        # 0x65045280
    6501f8a7:	jne    0x6501f8b7
    6501f8a9:	lea    eax,[rcx-0x41]
    6501f8ac:	cmp    eax,0x19
    6501f8af:	ja     0x6501f8b4
    6501f8b1:	add    ecx,0x20
    6501f8b4:	mov    eax,ecx
    6501f8b6:	ret    
    6501f8b7:	xor    edx,edx
    6501f8b9:	jmp    0x6501f630
    6501f8be:	int3   
    6501f8bf:	int3   
    6501f8c0:	rex push rbx
    6501f8c2:	sub    rsp,0x40
    6501f8c6:	cmp    DWORD PTR [rip+0x259b3],0x0        # 0x65045280
    6501f8cd:	movsxd rbx,ecx
    6501f8d0:	jne    0x6501f8e5
    6501f8d2:	mov    rax,QWORD PTR [rip+0x240a7]        # 0x65043980
    6501f8d9:	mov    al,BYTE PTR [rax+rbx*2]
    6501f8dc:	and    eax,0x4
    6501f8df:	add    rsp,0x40
    6501f8e3:	pop    rbx
    6501f8e4:	ret    
    6501f8e5:	mov    BYTE PTR [rsp+0x38],0x0
    6501f8ea:	call   0x65020a30
    6501f8ef:	mov    r11,rax
    6501f8f2:	mov    QWORD PTR [rsp+0x30],rax
    6501f8f7:	mov    rax,QWORD PTR [rax+0xc0]
    6501f8fe:	cmp    rax,QWORD PTR [rip+0x2409b]        # 0x650439a0
    6501f905:	mov    QWORD PTR [rsp+0x20],rax
    6501f90a:	mov    rdx,QWORD PTR [r11+0xb8]
    6501f911:	mov    QWORD PTR [rsp+0x28],rdx
    6501f916:	je     0x6501f93b
    6501f918:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f91f:	test   DWORD PTR [rip+0x23f03],ecx        # 0x65043828
    6501f925:	jne    0x6501f93b
    6501f927:	call   0x65023e90
    6501f92c:	mov    r11,QWORD PTR [rsp+0x30]
    6501f931:	mov    rdx,QWORD PTR [rsp+0x28]
    6501f936:	mov    QWORD PTR [rsp+0x20],rax
    6501f93b:	cmp    rdx,QWORD PTR [rip+0x23dde]        # 0x65043720
    6501f942:	je     0x6501f967
    6501f944:	mov    ecx,DWORD PTR [r11+0xc8]
    6501f94b:	test   DWORD PTR [rip+0x23ed7],ecx        # 0x65043828
    6501f951:	jne    0x6501f967
    6501f953:	call   0x65023340
    6501f958:	mov    r11,QWORD PTR [rsp+0x30]
    6501f95d:	mov    QWORD PTR [rsp+0x28],rax
    6501f962:	mov    rax,QWORD PTR [rsp+0x20]
    6501f967:	test   BYTE PTR [r11+0xc8],0x2
    6501f96f:	jne    0x6501f988
    6501f971:	or     DWORD PTR [r11+0xc8],0x2
    6501f979:	mov    r11,QWORD PTR [rsp+0x30]
    6501f97e:	mov    rax,QWORD PTR [rsp+0x20]
    6501f983:	mov    BYTE PTR [rsp+0x38],0x1
    6501f988:	cmp    DWORD PTR [rax+0x10c],0x1
    6501f98f:	jle    0x6501f9a9
    6501f991:	lea    r8,[rsp+0x20]
    6501f996:	mov    edx,0x4
    6501f99b:	mov    ecx,ebx
    6501f99d:	call   0x65029030
    6501f9a2:	mov    r11,QWORD PTR [rsp+0x30]
    6501f9a7:	jmp    0x6501f9b6
    6501f9a9:	mov    rax,QWORD PTR [rax+0x140]
    6501f9b0:	mov    al,BYTE PTR [rax+rbx*2]
    6501f9b3:	and    eax,0x4
    6501f9b6:	cmp    BYTE PTR [rsp+0x38],0x0
    6501f9bb:	je     0x6501f9c5
    6501f9bd:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501f9c5:	add    rsp,0x40
    6501f9c9:	pop    rbx
    6501f9ca:	ret    
    6501f9cb:	int3   
    6501f9cc:	int3   
    6501f9cd:	int3   
    6501f9ce:	int3   
    6501f9cf:	int3   
    6501f9d0:	rex push rbx
    6501f9d2:	sub    rsp,0x40
    6501f9d6:	cmp    DWORD PTR [rip+0x258a3],0x0        # 0x65045280
    6501f9dd:	movsxd rbx,ecx
    6501f9e0:	jne    0x6501f9f5
    6501f9e2:	mov    rax,QWORD PTR [rip+0x23f97]        # 0x65043980
    6501f9e9:	mov    al,BYTE PTR [rax+rbx*2]
    6501f9ec:	and    eax,0x8
    6501f9ef:	add    rsp,0x40
    6501f9f3:	pop    rbx
    6501f9f4:	ret    
    6501f9f5:	mov    BYTE PTR [rsp+0x38],0x0
    6501f9fa:	call   0x65020a30
    6501f9ff:	mov    r11,rax
    6501fa02:	mov    QWORD PTR [rsp+0x30],rax
    6501fa07:	mov    rax,QWORD PTR [rax+0xc0]
    6501fa0e:	cmp    rax,QWORD PTR [rip+0x23f8b]        # 0x650439a0
    6501fa15:	mov    QWORD PTR [rsp+0x20],rax
    6501fa1a:	mov    rdx,QWORD PTR [r11+0xb8]
    6501fa21:	mov    QWORD PTR [rsp+0x28],rdx
    6501fa26:	je     0x6501fa4b
    6501fa28:	mov    ecx,DWORD PTR [r11+0xc8]
    6501fa2f:	test   DWORD PTR [rip+0x23df3],ecx        # 0x65043828
    6501fa35:	jne    0x6501fa4b
    6501fa37:	call   0x65023e90
    6501fa3c:	mov    r11,QWORD PTR [rsp+0x30]
    6501fa41:	mov    rdx,QWORD PTR [rsp+0x28]
    6501fa46:	mov    QWORD PTR [rsp+0x20],rax
    6501fa4b:	cmp    rdx,QWORD PTR [rip+0x23cce]        # 0x65043720
    6501fa52:	je     0x6501fa77
    6501fa54:	mov    ecx,DWORD PTR [r11+0xc8]
    6501fa5b:	test   DWORD PTR [rip+0x23dc7],ecx        # 0x65043828
    6501fa61:	jne    0x6501fa77
    6501fa63:	call   0x65023340
    6501fa68:	mov    r11,QWORD PTR [rsp+0x30]
    6501fa6d:	mov    QWORD PTR [rsp+0x28],rax
    6501fa72:	mov    rax,QWORD PTR [rsp+0x20]
    6501fa77:	test   BYTE PTR [r11+0xc8],0x2
    6501fa7f:	jne    0x6501fa98
    6501fa81:	or     DWORD PTR [r11+0xc8],0x2
    6501fa89:	mov    r11,QWORD PTR [rsp+0x30]
    6501fa8e:	mov    rax,QWORD PTR [rsp+0x20]
    6501fa93:	mov    BYTE PTR [rsp+0x38],0x1
    6501fa98:	cmp    DWORD PTR [rax+0x10c],0x1
    6501fa9f:	jle    0x6501fab9
    6501faa1:	lea    r8,[rsp+0x20]
    6501faa6:	mov    edx,0x8
    6501faab:	mov    ecx,ebx
    6501faad:	call   0x65029030
    6501fab2:	mov    r11,QWORD PTR [rsp+0x30]
    6501fab7:	jmp    0x6501fac6
    6501fab9:	mov    rax,QWORD PTR [rax+0x140]
    6501fac0:	mov    al,BYTE PTR [rax+rbx*2]
    6501fac3:	and    eax,0x8
    6501fac6:	cmp    BYTE PTR [rsp+0x38],0x0
    6501facb:	je     0x6501fad5
    6501facd:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501fad5:	add    rsp,0x40
    6501fad9:	pop    rbx
    6501fada:	ret    
    6501fadb:	int3   
    6501fadc:	int3   
    6501fadd:	int3   
    6501fade:	int3   
    6501fadf:	int3   
    6501fae0:	rex push rbx
    6501fae2:	sub    rsp,0x40
    6501fae6:	cmp    DWORD PTR [rip+0x25793],0x0        # 0x65045280
    6501faed:	movsxd rbx,ecx
    6501faf0:	jne    0x6501fb08
    6501faf2:	mov    rax,QWORD PTR [rip+0x23e87]        # 0x65043980
    6501faf9:	mov    ax,WORD PTR [rax+rbx*2]
    6501fafd:	and    eax,0x157
    6501fb02:	add    rsp,0x40
    6501fb06:	pop    rbx
    6501fb07:	ret    
    6501fb08:	mov    BYTE PTR [rsp+0x38],0x0
    6501fb0d:	call   0x65020a30
    6501fb12:	mov    r11,rax
    6501fb15:	mov    QWORD PTR [rsp+0x30],rax
    6501fb1a:	mov    rax,QWORD PTR [rax+0xc0]
    6501fb21:	cmp    rax,QWORD PTR [rip+0x23e78]        # 0x650439a0
    6501fb28:	mov    QWORD PTR [rsp+0x20],rax
    6501fb2d:	mov    rdx,QWORD PTR [r11+0xb8]
    6501fb34:	mov    QWORD PTR [rsp+0x28],rdx
    6501fb39:	je     0x6501fb5e
    6501fb3b:	mov    ecx,DWORD PTR [r11+0xc8]
    6501fb42:	test   DWORD PTR [rip+0x23ce0],ecx        # 0x65043828
    6501fb48:	jne    0x6501fb5e
    6501fb4a:	call   0x65023e90
    6501fb4f:	mov    r11,QWORD PTR [rsp+0x30]
    6501fb54:	mov    rdx,QWORD PTR [rsp+0x28]
    6501fb59:	mov    QWORD PTR [rsp+0x20],rax
    6501fb5e:	cmp    rdx,QWORD PTR [rip+0x23bbb]        # 0x65043720
    6501fb65:	je     0x6501fb8a
    6501fb67:	mov    ecx,DWORD PTR [r11+0xc8]
    6501fb6e:	test   DWORD PTR [rip+0x23cb4],ecx        # 0x65043828
    6501fb74:	jne    0x6501fb8a
    6501fb76:	call   0x65023340
    6501fb7b:	mov    r11,QWORD PTR [rsp+0x30]
    6501fb80:	mov    QWORD PTR [rsp+0x28],rax
    6501fb85:	mov    rax,QWORD PTR [rsp+0x20]
    6501fb8a:	test   BYTE PTR [r11+0xc8],0x2
    6501fb92:	jne    0x6501fbab
    6501fb94:	or     DWORD PTR [r11+0xc8],0x2
    6501fb9c:	mov    r11,QWORD PTR [rsp+0x30]
    6501fba1:	mov    rax,QWORD PTR [rsp+0x20]
    6501fba6:	mov    BYTE PTR [rsp+0x38],0x1
    6501fbab:	cmp    DWORD PTR [rax+0x10c],0x1
    6501fbb2:	jle    0x6501fbcc
    6501fbb4:	lea    r8,[rsp+0x20]
    6501fbb9:	mov    edx,0x157
    6501fbbe:	mov    ecx,ebx
    6501fbc0:	call   0x65029030
    6501fbc5:	mov    r11,QWORD PTR [rsp+0x30]
    6501fbca:	jmp    0x6501fbdc
    6501fbcc:	mov    rax,QWORD PTR [rax+0x140]
    6501fbd3:	mov    ax,WORD PTR [rax+rbx*2]
    6501fbd7:	and    eax,0x157
    6501fbdc:	cmp    BYTE PTR [rsp+0x38],0x0
    6501fbe1:	je     0x6501fbeb
    6501fbe3:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6501fbeb:	add    rsp,0x40
    6501fbef:	pop    rbx
    6501fbf0:	ret    
    6501fbf1:	int3   
    6501fbf2:	int3   
    6501fbf3:	int3   
    6501fbf4:	int3   
    6501fbf5:	int3   
    6501fbf6:	int3   
    6501fbf7:	int3   
    6501fbf8:	int3   
    6501fbf9:	int3   
    6501fbfa:	int3   
    6501fbfb:	int3   
    6501fbfc:	int3   
    6501fbfd:	int3   
    6501fbfe:	int3   
    6501fbff:	int3   
    6501fc00:	sub    rsp,0x28
    6501fc04:	test   rcx,rcx
    6501fc07:	je     0x6501fc40
    6501fc09:	mov    r8,rcx
    6501fc0c:	mov    rcx,QWORD PTR [rip+0x2569d]        # 0x650452b0
    6501fc13:	xor    edx,edx
    6501fc15:	call   QWORD PTR [rip+0x145ad]        # 0x650341c8
    6501fc1b:	test   eax,eax
    6501fc1d:	jne    0x6501fc40
    6501fc1f:	mov    QWORD PTR [rsp+0x20],rbx
    6501fc24:	call   0x65020420
    6501fc29:	mov    rbx,rax
    6501fc2c:	call   QWORD PTR [rip+0x14436]        # 0x65034068
    6501fc32:	mov    ecx,eax
    6501fc34:	call   0x650203d0
    6501fc39:	mov    DWORD PTR [rbx],eax
    6501fc3b:	mov    rbx,QWORD PTR [rsp+0x20]
    6501fc40:	add    rsp,0x28
    6501fc44:	ret    
    6501fc45:	int3   
    6501fc46:	int3   
    6501fc47:	int3   
    6501fc48:	int3   
    6501fc49:	int3   
    6501fc4a:	int3   
    6501fc4b:	int3   
    6501fc4c:	int3   
    6501fc4d:	int3   
    6501fc4e:	int3   
    6501fc4f:	int3   
    6501fc50:	rex push rbx
    6501fc52:	sub    rsp,0x20
    6501fc56:	cmp    rcx,0xffffffffffffffe0
    6501fc5a:	mov    rbx,rcx
    6501fc5d:	ja     0x6501fcfe
    6501fc63:	mov    QWORD PTR [rsp+0x30],rsi
    6501fc68:	test   rcx,rcx
    6501fc6b:	mov    esi,0x1
    6501fc70:	cmovne rsi,rcx
    6501fc74:	mov    QWORD PTR [rsp+0x38],rdi
    6501fc79:	data16 xchg ax,ax
    6501fc7c:	data16 data16 xchg ax,ax
    6501fc80:	mov    rcx,QWORD PTR [rip+0x25629]        # 0x650452b0
    6501fc87:	test   rcx,rcx
    6501fc8a:	jne    0x6501fcac
    6501fc8c:	call   0x65029460
    6501fc91:	mov    ecx,0x1e
    6501fc96:	call   0x65029220
    6501fc9b:	mov    ecx,0xff
    6501fca0:	call   0x65022c90
    6501fca5:	mov    rcx,QWORD PTR [rip+0x25604]        # 0x650452b0
    6501fcac:	mov    r8,rsi
    6501fcaf:	xor    edx,edx
    6501fcb1:	call   QWORD PTR [rip+0x14509]        # 0x650341c0
    6501fcb7:	test   rax,rax
    6501fcba:	mov    rdi,rax
    6501fcbd:	jne    0x6501fceb
    6501fcbf:	cmp    DWORD PTR [rip+0x25a1f],eax        # 0x650456e4
    6501fcc5:	je     0x6501fcd5
    6501fcc7:	mov    rcx,rbx
    6501fcca:	call   0x65020dd0
    6501fccf:	test   eax,eax
    6501fcd1:	jne    0x6501fc80
    6501fcd3:	jmp    0x6501fce0
    6501fcd5:	call   0x65020420
    6501fcda:	mov    DWORD PTR [rax],0xc
    6501fce0:	call   0x65020420
    6501fce5:	mov    DWORD PTR [rax],0xc
    6501fceb:	mov    rsi,QWORD PTR [rsp+0x30]
    6501fcf0:	mov    rax,rdi
    6501fcf3:	mov    rdi,QWORD PTR [rsp+0x38]
    6501fcf8:	add    rsp,0x20
    6501fcfc:	pop    rbx
    6501fcfd:	ret    
    6501fcfe:	call   0x65020dd0
    6501fd03:	call   0x65020420
    6501fd08:	mov    DWORD PTR [rax],0xc
    6501fd0e:	xor    eax,eax
    6501fd10:	add    rsp,0x20
    6501fd14:	pop    rbx
    6501fd15:	ret    
    6501fd16:	int3   
    6501fd17:	int3   
    6501fd18:	int3   
    6501fd19:	int3   
    6501fd1a:	int3   
    6501fd1b:	int3   
    6501fd1c:	int3   
    6501fd1d:	int3   
    6501fd1e:	int3   
    6501fd1f:	int3   
    6501fd20:	int3   
    6501fd21:	int3   
    6501fd22:	int3   
    6501fd23:	int3   
    6501fd24:	int3   
    6501fd25:	int3   
    6501fd26:	data16 data16 xchg ax,ax
    6501fd2a:	data16 data16 xchg ax,ax
    6501fd2e:	xchg   ax,ax
    6501fd30:	mov    r11,rcx
    6501fd33:	sub    rdx,rcx
    6501fd36:	jb     0x6501feda
    6501fd3c:	cmp    r8,0x8
    6501fd40:	jb     0x6501fda3
    6501fd42:	test   cl,0x7
    6501fd45:	je     0x6501fd7d
    6501fd47:	test   cl,0x1
    6501fd4a:	je     0x6501fd57
    6501fd4c:	mov    al,BYTE PTR [rdx+rcx*1]
    6501fd4f:	dec    r8
    6501fd52:	mov    BYTE PTR [rcx],al
    6501fd54:	inc    rcx
    6501fd57:	test   cl,0x2
    6501fd5a:	je     0x6501fd6b
    6501fd5c:	mov    ax,WORD PTR [rdx+rcx*1]
    6501fd60:	sub    r8,0x2
    6501fd64:	mov    WORD PTR [rcx],ax
    6501fd67:	add    rcx,0x2
    6501fd6b:	test   cl,0x4
    6501fd6e:	je     0x6501fd7d
    6501fd70:	mov    eax,DWORD PTR [rdx+rcx*1]
    6501fd73:	sub    r8,0x4
    6501fd77:	mov    DWORD PTR [rcx],eax
    6501fd79:	add    rcx,0x4
    6501fd7d:	mov    r9,r8
    6501fd80:	shr    r9,0x5
    6501fd84:	jne    0x6501fdd7
    6501fd86:	mov    r9,r8
    6501fd89:	shr    r9,0x3
    6501fd8d:	je     0x6501fda3
    6501fd8f:	mov    rax,QWORD PTR [rdx+rcx*1]
    6501fd93:	mov    QWORD PTR [rcx],rax
    6501fd96:	add    rcx,0x8
    6501fd9a:	dec    r9
    6501fd9d:	jne    0x6501fd8f
    6501fd9f:	and    r8,0x7
    6501fda3:	test   r8,r8
    6501fda6:	jne    0x6501fdb0
    6501fda8:	mov    rax,r11
    6501fdab:	ret    
    6501fdac:	data16 data16 xchg ax,ax
    6501fdb0:	mov    al,BYTE PTR [rdx+rcx*1]
    6501fdb3:	mov    BYTE PTR [rcx],al
    6501fdb5:	inc    rcx
    6501fdb8:	dec    r8
    6501fdbb:	jne    0x6501fdb0
    6501fdbd:	mov    rax,r11
    6501fdc0:	ret    
    6501fdc1:	data16 data16 xchg ax,ax
    6501fdc5:	data16 data16 xchg ax,ax
    6501fdc9:	data16 data16 xchg ax,ax
    6501fdcd:	data16 xchg ax,ax
    6501fdd0:	data16 data16 xchg ax,ax
    6501fdd4:	data16 xchg ax,ax
    6501fdd7:	cmp    r9,0x2000
    6501fdde:	jae    0x6501fe22
    6501fde0:	mov    rax,QWORD PTR [rdx+rcx*1]
    6501fde4:	mov    r10,QWORD PTR [rdx+rcx*1+0x8]
    6501fde9:	add    rcx,0x20
    6501fded:	mov    QWORD PTR [rcx-0x20],rax
    6501fdf1:	mov    QWORD PTR [rcx-0x18],r10
    6501fdf5:	mov    rax,QWORD PTR [rdx+rcx*1-0x10]
    6501fdfa:	mov    r10,QWORD PTR [rdx+rcx*1-0x8]
    6501fdff:	dec    r9
    6501fe02:	mov    QWORD PTR [rcx-0x10],rax
    6501fe06:	mov    QWORD PTR [rcx-0x8],r10
    6501fe0a:	jne    0x6501fde0
    6501fe0c:	and    r8,0x1f
    6501fe10:	jmp    0x6501fd86
    6501fe15:	data16 data16 xchg ax,ax
    6501fe19:	data16 data16 xchg ax,ax
    6501fe1d:	data16 xchg ax,ax
    6501fe20:	xchg   ax,ax
    6501fe22:	cmp    rdx,0x1000
    6501fe29:	jb     0x6501fde0
    6501fe2b:	mov    eax,0x20
    6501fe30:	prefetchnta BYTE PTR [rdx+rcx*1]
    6501fe34:	prefetchnta BYTE PTR [rdx+rcx*1+0x40]
    6501fe39:	add    rcx,0x80
    6501fe40:	dec    eax
    6501fe42:	jne    0x6501fe30
    6501fe44:	sub    rcx,0x1000
    6501fe4b:	mov    eax,0x40
    6501fe50:	mov    r9,QWORD PTR [rdx+rcx*1]
    6501fe54:	mov    r10,QWORD PTR [rdx+rcx*1+0x8]
    6501fe59:	movnti QWORD PTR [rcx],r9
    6501fe5d:	movnti QWORD PTR [rcx+0x8],r10
    6501fe62:	mov    r9,QWORD PTR [rdx+rcx*1+0x10]
    6501fe67:	mov    r10,QWORD PTR [rdx+rcx*1+0x18]
    6501fe6c:	movnti QWORD PTR [rcx+0x10],r9
    6501fe71:	movnti QWORD PTR [rcx+0x18],r10
    6501fe76:	mov    r9,QWORD PTR [rdx+rcx*1+0x20]
    6501fe7b:	mov    r10,QWORD PTR [rdx+rcx*1+0x28]
    6501fe80:	add    rcx,0x40
    6501fe84:	movnti QWORD PTR [rcx-0x20],r9
    6501fe89:	movnti QWORD PTR [rcx-0x18],r10
    6501fe8e:	mov    r9,QWORD PTR [rdx+rcx*1-0x10]
    6501fe93:	mov    r10,QWORD PTR [rdx+rcx*1-0x8]
    6501fe98:	dec    eax
    6501fe9a:	movnti QWORD PTR [rcx-0x10],r9
    6501fe9f:	movnti QWORD PTR [rcx-0x8],r10
    6501fea4:	jne    0x6501fe50
    6501fea6:	sub    r8,0x1000
    6501fead:	cmp    r8,0x1000
    6501feb4:	jae    0x6501fe2b
    6501feba:	lock or BYTE PTR [rsp],0x0
    6501febf:	jmp    0x6501fd7d
    6501fec4:	data16 data16 xchg ax,ax
    6501fec8:	data16 data16 xchg ax,ax
    6501fecc:	data16 data16 xchg ax,ax
    6501fed0:	data16 data16 xchg ax,ax
    6501fed4:	data16 data16 xchg ax,ax
    6501fed8:	xchg   ax,ax
    6501feda:	add    rcx,r8
    6501fedd:	cmp    r8,0x8
    6501fee1:	jb     0x6501ff44
    6501fee3:	test   cl,0x7
    6501fee6:	je     0x6501ff1e
    6501fee8:	test   cl,0x1
    6501feeb:	je     0x6501fef8
    6501feed:	dec    rcx
    6501fef0:	mov    al,BYTE PTR [rdx+rcx*1]
    6501fef3:	dec    r8
    6501fef6:	mov    BYTE PTR [rcx],al
    6501fef8:	test   cl,0x2
    6501fefb:	je     0x6501ff0c
    6501fefd:	sub    rcx,0x2
    6501ff01:	mov    ax,WORD PTR [rdx+rcx*1]
    6501ff05:	sub    r8,0x2
    6501ff09:	mov    WORD PTR [rcx],ax
    6501ff0c:	test   cl,0x4
    6501ff0f:	je     0x6501ff1e
    6501ff11:	sub    rcx,0x4
    6501ff15:	mov    eax,DWORD PTR [rdx+rcx*1]
    6501ff18:	sub    r8,0x4
    6501ff1c:	mov    DWORD PTR [rcx],eax
    6501ff1e:	mov    r9,r8
    6501ff21:	shr    r9,0x5
    6501ff25:	jne    0x6501ff77
    6501ff27:	mov    r9,r8
    6501ff2a:	shr    r9,0x3
    6501ff2e:	je     0x6501ff44
    6501ff30:	sub    rcx,0x8
    6501ff34:	mov    rax,QWORD PTR [rdx+rcx*1]
    6501ff38:	dec    r9
    6501ff3b:	mov    QWORD PTR [rcx],rax
    6501ff3e:	jne    0x6501ff30
    6501ff40:	and    r8,0x7
    6501ff44:	test   r8,r8
    6501ff47:	jne    0x6501ff50
    6501ff49:	mov    rax,r11
    6501ff4c:	ret    
    6501ff4d:	data16 xchg ax,ax
    6501ff50:	dec    rcx
    6501ff53:	mov    al,BYTE PTR [rdx+rcx*1]
    6501ff56:	dec    r8
    6501ff59:	mov    BYTE PTR [rcx],al
    6501ff5b:	jne    0x6501ff50
    6501ff5d:	mov    rax,r11
    6501ff60:	ret    
    6501ff61:	data16 data16 xchg ax,ax
    6501ff65:	data16 data16 xchg ax,ax
    6501ff69:	data16 data16 xchg ax,ax
    6501ff6d:	data16 xchg ax,ax
    6501ff70:	data16 data16 xchg ax,ax
    6501ff74:	data16 xchg ax,ax
    6501ff77:	cmp    r9,0x2000
    6501ff7e:	jae    0x6501ffc2
    6501ff80:	mov    rax,QWORD PTR [rdx+rcx*1-0x8]
    6501ff85:	mov    r10,QWORD PTR [rdx+rcx*1-0x10]
    6501ff8a:	sub    rcx,0x20
    6501ff8e:	mov    QWORD PTR [rcx+0x18],rax
    6501ff92:	mov    QWORD PTR [rcx+0x10],r10
    6501ff96:	mov    rax,QWORD PTR [rdx+rcx*1+0x8]
    6501ff9b:	mov    r10,QWORD PTR [rdx+rcx*1]
    6501ff9f:	dec    r9
    6501ffa2:	mov    QWORD PTR [rcx+0x8],rax
    6501ffa6:	mov    QWORD PTR [rcx],r10
    6501ffa9:	jne    0x6501ff80
    6501ffab:	and    r8,0x1f
    6501ffaf:	jmp    0x6501ff27
    6501ffb4:	data16 data16 xchg ax,ax
    6501ffb8:	data16 data16 xchg ax,ax
    6501ffbc:	data16 data16 xchg ax,ax
    6501ffc0:	xchg   ax,ax
    6501ffc2:	cmp    rdx,0xfffffffffffff000
    6501ffc9:	ja     0x6501ff80
    6501ffcb:	mov    eax,0x20
    6501ffd0:	sub    rcx,0x80
    6501ffd7:	prefetchnta BYTE PTR [rdx+rcx*1]
    6501ffdb:	prefetchnta BYTE PTR [rdx+rcx*1+0x40]
    6501ffe0:	dec    eax
    6501ffe2:	jne    0x6501ffd0
    6501ffe4:	add    rcx,0x1000
    6501ffeb:	mov    eax,0x40
    6501fff0:	mov    r9,QWORD PTR [rdx+rcx*1-0x8]
    6501fff5:	mov    r10,QWORD PTR [rdx+rcx*1-0x10]
    6501fffa:	movnti QWORD PTR [rcx-0x8],r9
    6501ffff:	movnti QWORD PTR [rcx-0x10],r10
    65020004:	mov    r9,QWORD PTR [rdx+rcx*1-0x18]
    65020009:	mov    r10,QWORD PTR [rdx+rcx*1-0x20]
    6502000e:	movnti QWORD PTR [rcx-0x18],r9
    65020013:	movnti QWORD PTR [rcx-0x20],r10
    65020018:	mov    r9,QWORD PTR [rdx+rcx*1-0x28]
    6502001d:	mov    r10,QWORD PTR [rdx+rcx*1-0x30]
    65020022:	sub    rcx,0x40
    65020026:	movnti QWORD PTR [rcx+0x18],r9
    6502002b:	movnti QWORD PTR [rcx+0x10],r10
    65020030:	mov    r9,QWORD PTR [rdx+rcx*1+0x8]
    65020035:	mov    r10,QWORD PTR [rdx+rcx*1]
    65020039:	dec    eax
    6502003b:	movnti QWORD PTR [rcx+0x8],r9
    65020040:	movnti QWORD PTR [rcx],r10
    65020044:	jne    0x6501fff0
    65020046:	sub    r8,0x1000
    6502004d:	cmp    r8,0x1000
    65020054:	jae    0x6501ffcb
    6502005a:	lock or BYTE PTR [rsp],0x0
    6502005f:	jmp    0x6501ff1e
    65020064:	int3   
    65020065:	int3   
    65020066:	int3   
    65020067:	int3   
    65020068:	int3   
    65020069:	int3   
    6502006a:	int3   
    6502006b:	int3   
    6502006c:	int3   
    6502006d:	int3   
    6502006e:	int3   
    6502006f:	int3   
    65020070:	mov    QWORD PTR [rsp+0x18],rbx
    65020075:	push   rdi
    65020076:	sub    rsp,0x20
    6502007a:	test   rcx,rcx
    6502007d:	mov    rbx,rdx
    65020080:	mov    rdi,rcx
    65020083:	jne    0x65020097
    65020085:	mov    rcx,rdx
    65020088:	mov    rbx,QWORD PTR [rsp+0x40]
    6502008d:	add    rsp,0x20
    65020091:	pop    rdi
    65020092:	jmp    0x6501fc50
    65020097:	test   rdx,rdx
    6502009a:	jne    0x650200ae
    6502009c:	call   0x6501fc00
    650200a1:	xor    eax,eax
    650200a3:	mov    rbx,QWORD PTR [rsp+0x40]
    650200a8:	add    rsp,0x20
    650200ac:	pop    rdi
    650200ad:	ret    
    650200ae:	cmp    rdx,0xffffffffffffffe0
    650200b2:	mov    QWORD PTR [rsp+0x30],rbp
    650200b7:	mov    QWORD PTR [rsp+0x38],rsi
    650200bc:	ja     0x65020101
    650200be:	mov    ebp,0x1
    650200c3:	mov    rcx,QWORD PTR [rip+0x251e6]        # 0x650452b0
    650200ca:	test   rbx,rbx
    650200cd:	mov    r8,rdi
    650200d0:	cmove  rbx,rbp
    650200d4:	xor    edx,edx
    650200d6:	mov    r9,rbx
    650200d9:	call   QWORD PTR [rip+0x140f1]        # 0x650341d0
    650200df:	test   rax,rax
    650200e2:	mov    rsi,rax
    650200e5:	jne    0x6502015b
    650200e7:	cmp    DWORD PTR [rip+0x255f7],eax        # 0x650456e4
    650200ed:	je     0x65020144
    650200ef:	mov    rcx,rbx
    650200f2:	call   0x65020dd0
    650200f7:	test   eax,eax
    650200f9:	je     0x6502012b
    650200fb:	cmp    rbx,0xffffffffffffffe0
    650200ff:	jbe    0x650200c3
    65020101:	mov    rcx,rbx
    65020104:	call   0x65020dd0
    65020109:	call   0x65020420
    6502010e:	mov    DWORD PTR [rax],0xc
    65020114:	xor    eax,eax
    65020116:	mov    rbp,QWORD PTR [rsp+0x30]
    6502011b:	mov    rsi,QWORD PTR [rsp+0x38]
    65020120:	mov    rbx,QWORD PTR [rsp+0x40]
    65020125:	add    rsp,0x20
    65020129:	pop    rdi
    6502012a:	ret    
    6502012b:	call   0x65020420
    65020130:	mov    rbx,rax
    65020133:	call   QWORD PTR [rip+0x13f2f]        # 0x65034068
    65020139:	mov    ecx,eax
    6502013b:	call   0x650203d0
    65020140:	mov    DWORD PTR [rbx],eax
    65020142:	jmp    0x65020114
    65020144:	call   0x65020420
    65020149:	mov    rbx,rax
    6502014c:	call   QWORD PTR [rip+0x13f16]        # 0x65034068
    65020152:	mov    ecx,eax
    65020154:	call   0x650203d0
    65020159:	mov    DWORD PTR [rbx],eax
    6502015b:	mov    rax,rsi
    6502015e:	jmp    0x65020116
    65020160:	mov    QWORD PTR [rsp+0x8],rbx
    65020165:	mov    QWORD PTR [rsp+0x18],rbp
    6502016a:	mov    QWORD PTR [rsp+0x20],rsi
    6502016f:	mov    QWORD PTR [rsp+0x10],rdx
    65020174:	push   rdi
    65020175:	push   r12
    65020177:	push   r13
    65020179:	push   r14
    6502017b:	push   r15
    6502017d:	sub    rsp,0x40
    65020181:	mov    r14,QWORD PTR [r9+0x8]
    65020185:	mov    rbp,QWORD PTR [r9]
    65020188:	mov    r13,QWORD PTR [r9+0x38]
    6502018c:	sub    rbp,r14
    6502018f:	xor    edi,edi
    65020191:	test   BYTE PTR [rcx+0x4],0x66
    65020195:	mov    r15,r9
    65020198:	mov    rsi,rdx
    6502019b:	mov    r12,rcx
    6502019e:	jne    0x6502028a
    650201a4:	mov    QWORD PTR [rsp+0x30],rcx
    650201a9:	mov    QWORD PTR [rsp+0x38],r8
    650201ae:	cmp    DWORD PTR [r13+0x0],edi
    650201b2:	jbe    0x650202f3
    650201b8:	lea    rbx,[r13+0xc]
    650201bc:	data16 data16 xchg ax,ax
    650201c0:	mov    eax,DWORD PTR [rbx-0x8]
    650201c3:	cmp    rbp,rax
    650201c6:	jb     0x65020273
    650201cc:	mov    eax,DWORD PTR [rbx-0x4]
    650201cf:	cmp    rbp,rax
    650201d2:	jae    0x65020273
    650201d8:	cmp    DWORD PTR [rbx+0x4],0x0
    650201dc:	je     0x65020273
    650201e2:	mov    eax,DWORD PTR [rbx]
    650201e4:	cmp    eax,0x1
    650201e7:	je     0x65020200
    650201e9:	lea    rcx,[rsp+0x30]
    650201ee:	add    rax,r14
    650201f1:	mov    rdx,rsi
    650201f4:	call   rax
    650201f6:	test   eax,eax
    650201f8:	js     0x65020286
    650201fe:	jle    0x65020273
    65020200:	cmp    DWORD PTR [r12],0xe06d7363
    65020208:	jne    0x65020232
    6502020a:	cmp    QWORD PTR [rip+0x151e6],0x0        # 0x650353f8
    65020212:	je     0x65020232
    65020214:	lea    rcx,[rip+0x151dd]        # 0x650353f8
    6502021b:	call   0x65029650
    65020220:	test   eax,eax
    65020222:	je     0x65020232
    65020224:	mov    edx,0x1
    65020229:	mov    rcx,r12
    6502022c:	call   QWORD PTR [rip+0x151c6]        # 0x650353f8
    65020232:	mov    ecx,DWORD PTR [rbx+0x4]
    65020235:	mov    r8d,0x1
    6502023b:	mov    rdx,rsi
    6502023e:	add    rcx,r14
    65020241:	call   0x65029590
    65020246:	mov    rax,QWORD PTR [r15+0x40]
    6502024a:	mov    edx,DWORD PTR [rbx+0x4]
    6502024d:	movsxd r9,DWORD PTR [r12]
    65020251:	mov    QWORD PTR [rsp+0x28],rax
    65020256:	mov    rax,QWORD PTR [r15+0x28]
    6502025a:	add    rdx,r14
    6502025d:	mov    r8,r12
    65020260:	mov    rcx,rsi
    65020263:	mov    QWORD PTR [rsp+0x20],rax
    65020268:	call   QWORD PTR [rip+0x13fb2]        # 0x65034220
    6502026e:	call   0x650295c0
    65020273:	add    edi,0x1
    65020276:	add    rbx,0x10
    6502027a:	cmp    edi,DWORD PTR [r13+0x0]
    6502027e:	jb     0x650201c0
    65020284:	jmp    0x650202f3
    65020286:	xor    eax,eax
    65020288:	jmp    0x650202f8
    6502028a:	mov    rsi,QWORD PTR [r9+0x20]
    6502028e:	sub    rsi,r14
    65020291:	cmp    DWORD PTR [r13+0x0],edi
    65020295:	jbe    0x650202f3
    65020297:	lea    rbx,[r13+0x10]
    6502029b:	xchg   ax,ax
    6502029d:	data16 xchg ax,ax
    650202a0:	mov    ecx,DWORD PTR [rbx-0xc]
    650202a3:	cmp    rbp,rcx
    650202a6:	jb     0x650202e6
    650202a8:	mov    eax,DWORD PTR [rbx-0x8]
    650202ab:	cmp    rbp,rax
    650202ae:	jae    0x650202e6
    650202b0:	cmp    rsi,rcx
    650202b3:	jb     0x650202c2
    650202b5:	cmp    rsi,rax
    650202b8:	ja     0x650202c2
    650202ba:	test   BYTE PTR [r12+0x4],0x20
    650202c0:	jne    0x650202f3
    650202c2:	mov    ecx,DWORD PTR [rbx]
    650202c4:	test   ecx,ecx
    650202c6:	je     0x650202cf
    650202c8:	cmp    rsi,rcx
    650202cb:	je     0x650202f3
    650202cd:	jmp    0x650202e6
    650202cf:	mov    rdx,QWORD PTR [rsp+0x78]
    650202d4:	add    rax,r14
    650202d7:	mov    cl,0x1
    650202d9:	mov    QWORD PTR [r15],rax
    650202dc:	mov    r8d,DWORD PTR [rbx-0x4]
    650202e0:	add    r8,r14
    650202e3:	call   r8
    650202e6:	add    edi,0x1
    650202e9:	add    rbx,0x10
    650202ed:	cmp    edi,DWORD PTR [r13+0x0]
    650202f1:	jb     0x650202a0
    650202f3:	mov    eax,0x1
    650202f8:	lea    r11,[rsp+0x40]
    650202fd:	mov    rbx,QWORD PTR [r11+0x30]
    65020301:	mov    rbp,QWORD PTR [r11+0x40]
    65020305:	mov    rsi,QWORD PTR [r11+0x48]
    65020309:	mov    rsp,r11
    6502030c:	pop    r15
    6502030e:	pop    r14
    65020310:	pop    r13
    65020312:	pop    r12
    65020314:	pop    rdi
    65020315:	ret    
    65020316:	int3   
    65020317:	int3   
    65020318:	int3   
    65020319:	int3   
    6502031a:	int3   
    6502031b:	int3   
    6502031c:	int3   
    6502031d:	int3   
    6502031e:	int3   
    6502031f:	int3   
    65020320:	sub    rsp,0x38
    65020324:	test   rcx,rcx
    65020327:	mov    r9,rcx
    6502032a:	je     0x65020339
    6502032c:	test   rdx,rdx
    6502032f:	je     0x65020339
    65020331:	test   r8,r8
    65020334:	jne    0x65020370
    65020336:	mov    BYTE PTR [rcx],r8b
    65020339:	call   0x65020420
    6502033e:	xor    r9d,r9d
    65020341:	xor    r8d,r8d
    65020344:	xor    edx,edx
    65020346:	xor    ecx,ecx
    65020348:	mov    QWORD PTR [rsp+0x20],0x0
    65020351:	mov    DWORD PTR [rax],0x16
    65020357:	call   0x6501d9c0
    6502035c:	mov    eax,0x16
    65020361:	add    rsp,0x38
    65020365:	ret    
    65020366:	data16 data16 xchg ax,ax
    6502036a:	data16 xchg ax,ax
    6502036d:	data16 xchg ax,ax
    65020370:	movzx  eax,BYTE PTR [r8]
    65020374:	add    rcx,0x1
    65020378:	add    r8,0x1
    6502037c:	test   al,al
    6502037e:	mov    BYTE PTR [rcx-0x1],al
    65020381:	je     0x65020389
    65020383:	sub    rdx,0x1
    65020387:	jne    0x65020370
    65020389:	test   rdx,rdx
    6502038c:	jne    0x650203be
    6502038e:	mov    BYTE PTR [r9],dl
    65020391:	call   0x65020420
    65020396:	xor    r9d,r9d
    65020399:	xor    r8d,r8d
    6502039c:	xor    edx,edx
    6502039e:	xor    ecx,ecx
    650203a0:	mov    DWORD PTR [rax],0x22
    650203a6:	mov    QWORD PTR [rsp+0x20],0x0
    650203af:	call   0x6501d9c0
    650203b4:	mov    eax,0x22
    650203b9:	add    rsp,0x38
    650203bd:	ret    
    650203be:	xor    eax,eax
    650203c0:	add    rsp,0x38
    650203c4:	ret    
    650203c5:	int3   
    650203c6:	int3   
    650203c7:	int3   
    650203c8:	int3   
    650203c9:	int3   
    650203ca:	int3   
    650203cb:	int3   
    650203cc:	int3   
    650203cd:	int3   
    650203ce:	int3   
    650203cf:	int3   
    650203d0:	lea    r8,[rip+0x22d59]        # 0x65043130
    650203d7:	xor    edx,edx
    650203d9:	mov    rax,r8
    650203dc:	data16 data16 xchg ax,ax
    650203e0:	cmp    ecx,DWORD PTR [rax]
    650203e2:	je     0x65020415
    650203e4:	add    edx,0x1
    650203e7:	add    rax,0x8
    650203eb:	cmp    edx,0x2d
    650203ee:	jb     0x650203e0
    650203f0:	lea    eax,[rcx-0x13]
    650203f3:	cmp    eax,0x11
    650203f6:	ja     0x650203fe
    650203f8:	mov    eax,0xd
    650203fd:	ret    
    650203fe:	add    ecx,0xffffff44
    65020404:	mov    eax,0x16
    65020409:	mov    edx,0x8
    6502040e:	cmp    ecx,0xe
    65020411:	cmovbe eax,edx
    65020414:	ret    
    65020415:	movsxd rax,edx
    65020418:	mov    eax,DWORD PTR [r8+rax*8+0x4]
    6502041d:	ret    
    6502041e:	int3   
    6502041f:	int3   
    65020420:	sub    rsp,0x28
    65020424:	call   0x650209a0
    65020429:	test   rax,rax
    6502042c:	jne    0x6502043a
    6502042e:	lea    rax,[rip+0x22e63]        # 0x65043298
    65020435:	add    rsp,0x28
    65020439:	ret    
    6502043a:	add    rax,0x10
    6502043e:	add    rsp,0x28
    65020442:	ret    
    65020443:	int3   
    65020444:	int3   
    65020445:	int3   
    65020446:	int3   
    65020447:	int3   
    65020448:	int3   
    65020449:	int3   
    6502044a:	int3   
    6502044b:	int3   
    6502044c:	int3   
    6502044d:	int3   
    6502044e:	int3   
    6502044f:	int3   
    65020450:	sub    rsp,0x28
    65020454:	call   0x650209a0
    65020459:	test   rax,rax
    6502045c:	jne    0x6502046a
    6502045e:	lea    rax,[rip+0x22e37]        # 0x6504329c
    65020465:	add    rsp,0x28
    65020469:	ret    
    6502046a:	add    rax,0x14
    6502046e:	add    rsp,0x28
    65020472:	ret    
    65020473:	int3   
    65020474:	int3   
    65020475:	int3   
    65020476:	int3   
    65020477:	int3   
    65020478:	int3   
    65020479:	int3   
    6502047a:	int3   
    6502047b:	int3   
    6502047c:	int3   
    6502047d:	int3   
    6502047e:	int3   
    6502047f:	int3   
    65020480:	rex push rbx
    65020482:	sub    rsp,0x20
    65020486:	mov    ebx,ecx
    65020488:	call   0x650209a0
    6502048d:	test   rax,rax
    65020490:	jne    0x6502049b
    65020492:	lea    rax,[rip+0x22e03]        # 0x6504329c
    65020499:	jmp    0x6502049f
    6502049b:	add    rax,0x14
    6502049f:	lea    rdx,[rip+0x22c8a]        # 0x65043130
    650204a6:	mov    DWORD PTR [rax],ebx
    650204a8:	xor    ecx,ecx
    650204aa:	mov    rax,rdx
    650204ad:	data16 xchg ax,ax
    650204b0:	cmp    ebx,DWORD PTR [rax]
    650204b2:	je     0x650204e7
    650204b4:	add    ecx,0x1
    650204b7:	add    rax,0x8
    650204bb:	cmp    ecx,0x2d
    650204be:	jb     0x650204b0
    650204c0:	lea    eax,[rbx-0x13]
    650204c3:	cmp    eax,0x11
    650204c6:	ja     0x650204cf
    650204c8:	mov    ebx,0xd
    650204cd:	jmp    0x650204ee
    650204cf:	lea    eax,[rbx-0xbc]
    650204d5:	mov    ecx,0x8
    650204da:	mov    ebx,0x16
    650204df:	cmp    eax,0xe
    650204e2:	cmovbe ebx,ecx
    650204e5:	jmp    0x650204ee
    650204e7:	movsxd rax,ecx
    650204ea:	mov    ebx,DWORD PTR [rdx+rax*8+0x4]
    650204ee:	call   0x650209a0
    650204f3:	test   rax,rax
    650204f6:	jne    0x65020504
    650204f8:	mov    DWORD PTR [rip+0x22d9a],ebx        # 0x65043298
    650204fe:	add    rsp,0x20
    65020502:	pop    rbx
    65020503:	ret    
    65020504:	mov    DWORD PTR [rax+0x10],ebx
    65020507:	add    rsp,0x20
    6502050b:	pop    rbx
    6502050c:	ret    
    6502050d:	int3   
    6502050e:	int3   
    6502050f:	int3   
    65020510:	mov    DWORD PTR [rip+0x28cae],0x0        # 0x650491c8
    6502051a:	ret    
    6502051b:	int3   
    6502051c:	int3   
    6502051d:	int3   
    6502051e:	int3   
    6502051f:	int3   
    65020520:	mov    QWORD PTR [rsp+0x10],rbx
    65020525:	mov    QWORD PTR [rsp+0x18],rbp
    6502052a:	push   rsi
    6502052b:	push   rdi
    6502052c:	push   r12
    6502052e:	sub    rsp,0x20
    65020532:	mov    rbp,rcx
    65020535:	mov    ecx,DWORD PTR [rip+0x22d65]        # 0x650432a0
    6502053b:	cmp    ecx,0xffffffff
    6502053e:	je     0x65020554
    65020540:	call   QWORD PTR [rip+0x13d02]        # 0x65034248
    65020546:	test   rax,rax
    65020549:	je     0x65020554
    6502054b:	mov    rax,QWORD PTR [rax+0x2a8]
    65020552:	jmp    0x650205ce
    65020554:	lea    rcx,[rip+0x14e7d]        # 0x650353d8
    6502055b:	call   QWORD PTR [rip+0x13cdf]        # 0x65034240
    65020561:	test   rax,rax
    65020564:	mov    r12,rax
    65020567:	je     0x650205da
    65020569:	lea    rcx,[rsp+0x40]
    6502056e:	xor    ebx,ebx
    65020570:	mov    DWORD PTR [rsp+0x40],ebx
    65020574:	call   0x65022d80
    65020579:	cmp    DWORD PTR [rsp+0x40],0x5
    6502057e:	jg     0x650205be
    65020580:	xor    ecx,ecx
    65020582:	call   QWORD PTR [rip+0x13cb8]        # 0x65034240
    65020588:	movsxd rcx,DWORD PTR [rax+0x3c]
    6502058c:	add    rcx,rax
    6502058f:	movzx  eax,WORD PTR [rcx+0x14]
    65020593:	lea    rdx,[rax+rcx*1+0x18]
    65020598:	movzx  eax,WORD PTR [rcx+0x6]
    6502059c:	test   eax,eax
    6502059e:	je     0x650205be
    650205a0:	lea    rsi,[rip+0x14e19]        # 0x650353c0
    650205a7:	mov    rdi,rdx
    650205aa:	mov    ecx,0x8
    650205af:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    650205b1:	je     0x650205da
    650205b3:	add    ebx,0x1
    650205b6:	add    rdx,0x28
    650205ba:	cmp    ebx,eax
    650205bc:	jb     0x650205a0
    650205be:	lea    rdx,[rip+0x14e03]        # 0x650353c8
    650205c5:	mov    rcx,r12
    650205c8:	call   QWORD PTR [rip+0x13b3a]        # 0x65034108
    650205ce:	test   rax,rax
    650205d1:	je     0x650205da
    650205d3:	mov    rcx,rbp
    650205d6:	call   rax
    650205d8:	jmp    0x650205dd
    650205da:	mov    rax,rbp
    650205dd:	mov    rbx,QWORD PTR [rsp+0x48]
    650205e2:	mov    rbp,QWORD PTR [rsp+0x50]
    650205e7:	add    rsp,0x20
    650205eb:	pop    r12
    650205ed:	pop    rdi
    650205ee:	pop    rsi
    650205ef:	ret    
    650205f0:	mov    QWORD PTR [rsp+0x10],rbx
    650205f5:	mov    QWORD PTR [rsp+0x18],rsi
    650205fa:	push   rdi
    650205fb:	sub    rsp,0x20
    650205ff:	mov    ecx,DWORD PTR [rip+0x22c9b]        # 0x650432a0
    65020605:	cmp    ecx,0xffffffff
    65020608:	je     0x65020621
    6502060a:	call   QWORD PTR [rip+0x13c38]        # 0x65034248
    65020610:	test   rax,rax
    65020613:	je     0x65020621
    65020615:	mov    rax,QWORD PTR [rax+0x2a8]
    6502061c:	jmp    0x650206ae
    65020621:	lea    rcx,[rip+0x14db0]        # 0x650353d8
    65020628:	call   QWORD PTR [rip+0x13c12]        # 0x65034240
    6502062e:	test   rax,rax
    65020631:	mov    rbx,rax
    65020634:	je     0x650206c7
    6502063a:	lea    rcx,[rsp+0x30]
    6502063f:	mov    DWORD PTR [rsp+0x30],0x0
    65020647:	call   0x65022d80
    6502064c:	cmp    DWORD PTR [rsp+0x30],0x5
    65020651:	jg     0x6502069e
    65020653:	xor    ecx,ecx
    65020655:	call   QWORD PTR [rip+0x13be5]        # 0x65034240
    6502065b:	xor    edx,edx
    6502065d:	movsxd rcx,DWORD PTR [rax+0x3c]
    65020661:	add    rcx,rax
    65020664:	movzx  eax,WORD PTR [rcx+0x14]
    65020668:	lea    r8,[rax+rcx*1+0x18]
    6502066d:	movzx  eax,WORD PTR [rcx+0x6]
    65020671:	test   eax,eax
    65020673:	je     0x6502069e
    65020675:	data16 data16 xchg ax,ax
    65020679:	data16 xchg ax,ax
    6502067c:	data16 data16 xchg ax,ax
    65020680:	lea    rsi,[rip+0x14d39]        # 0x650353c0
    65020687:	mov    rdi,r8
    6502068a:	mov    ecx,0x8
    6502068f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    65020691:	je     0x650206c7
    65020693:	add    edx,0x1
    65020696:	add    r8,0x28
    6502069a:	cmp    edx,eax
    6502069c:	jb     0x65020680
    6502069e:	lea    rdx,[rip+0x14d23]        # 0x650353c8
    650206a5:	mov    rcx,rbx
    650206a8:	call   QWORD PTR [rip+0x13a5a]        # 0x65034108
    650206ae:	test   rax,rax
    650206b1:	je     0x650206c7
    650206b3:	xor    ecx,ecx
    650206b5:	call   rax
    650206b7:	mov    rbx,QWORD PTR [rsp+0x38]
    650206bc:	mov    rsi,QWORD PTR [rsp+0x40]
    650206c1:	add    rsp,0x20
    650206c5:	pop    rdi
    650206c6:	ret    
    650206c7:	mov    rbx,QWORD PTR [rsp+0x38]
    650206cc:	mov    rsi,QWORD PTR [rsp+0x40]
    650206d1:	xor    eax,eax
    650206d3:	add    rsp,0x20
    650206d7:	pop    rdi
    650206d8:	ret    
    650206d9:	int3   
    650206da:	int3   
    650206db:	int3   
    650206dc:	int3   
    650206dd:	int3   
    650206de:	int3   
    650206df:	int3   
    650206e0:	mov    QWORD PTR [rsp+0x10],rbx
    650206e5:	mov    QWORD PTR [rsp+0x18],rbp
    650206ea:	push   rsi
    650206eb:	push   rdi
    650206ec:	push   r12
    650206ee:	sub    rsp,0x20
    650206f2:	mov    rbp,rcx
    650206f5:	mov    ecx,DWORD PTR [rip+0x22ba5]        # 0x650432a0
    650206fb:	cmp    ecx,0xffffffff
    650206fe:	je     0x65020714
    65020700:	call   QWORD PTR [rip+0x13b42]        # 0x65034248
    65020706:	test   rax,rax
    65020709:	je     0x65020714
    6502070b:	mov    rax,QWORD PTR [rax+0x2b0]
    65020712:	jmp    0x6502078e
    65020714:	lea    rcx,[rip+0x14cbd]        # 0x650353d8
    6502071b:	call   QWORD PTR [rip+0x13b1f]        # 0x65034240
    65020721:	test   rax,rax
    65020724:	mov    r12,rax
    65020727:	je     0x6502079a
    65020729:	lea    rcx,[rsp+0x40]
    6502072e:	xor    ebx,ebx
    65020730:	mov    DWORD PTR [rsp+0x40],ebx
    65020734:	call   0x65022d80
    65020739:	cmp    DWORD PTR [rsp+0x40],0x5
    6502073e:	jg     0x6502077e
    65020740:	xor    ecx,ecx
    65020742:	call   QWORD PTR [rip+0x13af8]        # 0x65034240
    65020748:	movsxd rcx,DWORD PTR [rax+0x3c]
    6502074c:	add    rcx,rax
    6502074f:	movzx  eax,WORD PTR [rcx+0x14]
    65020753:	lea    rdx,[rax+rcx*1+0x18]
    65020758:	movzx  eax,WORD PTR [rcx+0x6]
    6502075c:	test   eax,eax
    6502075e:	je     0x6502077e
    65020760:	lea    rsi,[rip+0x14c59]        # 0x650353c0
    65020767:	mov    rdi,rdx
    6502076a:	mov    ecx,0x8
    6502076f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    65020771:	je     0x6502079a
    65020773:	add    ebx,0x1
    65020776:	add    rdx,0x28
    6502077a:	cmp    ebx,eax
    6502077c:	jb     0x65020760
    6502077e:	lea    rdx,[rip+0x14c63]        # 0x650353e8
    65020785:	mov    rcx,r12
    65020788:	call   QWORD PTR [rip+0x1397a]        # 0x65034108
    6502078e:	test   rax,rax
    65020791:	je     0x6502079a
    65020793:	mov    rcx,rbp
    65020796:	call   rax
    65020798:	jmp    0x6502079d
    6502079a:	mov    rax,rbp
    6502079d:	mov    rbx,QWORD PTR [rsp+0x48]
    650207a2:	mov    rbp,QWORD PTR [rsp+0x50]
    650207a7:	add    rsp,0x20
    650207ab:	pop    r12
    650207ad:	pop    rdi
    650207ae:	pop    rsi
    650207af:	ret    
    650207b0:	xor    eax,eax
    650207b2:	ret    
    650207b3:	int3   
    650207b4:	int3   
    650207b5:	int3   
    650207b6:	int3   
    650207b7:	int3   
    650207b8:	int3   
    650207b9:	int3   
    650207ba:	int3   
    650207bb:	int3   
    650207bc:	int3   
    650207bd:	int3   
    650207be:	int3   
    650207bf:	int3   
    650207c0:	sub    rsp,0x28
    650207c4:	mov    ecx,DWORD PTR [rip+0x22ad6]        # 0x650432a0
    650207ca:	cmp    ecx,0xffffffff
    650207cd:	je     0x650207df
    650207cf:	call   QWORD PTR [rip+0x13a83]        # 0x65034258
    650207d5:	mov    DWORD PTR [rip+0x22ac1],0xffffffff        # 0x650432a0
    650207df:	mov    ecx,DWORD PTR [rip+0x22abf]        # 0x650432a4
    650207e5:	cmp    ecx,0xffffffff
    650207e8:	je     0x650207fa
    650207ea:	call   QWORD PTR [rip+0x13a60]        # 0x65034250
    650207f0:	mov    DWORD PTR [rip+0x22aaa],0xffffffff        # 0x650432a4
    650207fa:	add    rsp,0x28
    650207fe:	jmp    0x65029760
    65020803:	int3   
    65020804:	int3   
    65020805:	int3   
    65020806:	int3   
    65020807:	int3   
    65020808:	int3   
    65020809:	int3   
    6502080a:	int3   
    6502080b:	int3   
    6502080c:	int3   
    6502080d:	int3   
    6502080e:	int3   
    6502080f:	int3   
    65020810:	mov    QWORD PTR [rsp+0x10],rbx
    65020815:	mov    QWORD PTR [rsp+0x18],rsi
    6502081a:	mov    QWORD PTR [rsp+0x20],rdi
    6502081f:	push   r12
    65020821:	push   r13
    65020823:	push   r14
    65020825:	sub    rsp,0x20
    65020829:	mov    r13,rdx
    6502082c:	mov    r12,rcx
    6502082f:	lea    rcx,[rip+0x14ba2]        # 0x650353d8
    65020836:	call   QWORD PTR [rip+0x13a04]        # 0x65034240
    6502083c:	mov    r14,rax
    6502083f:	lea    rax,[rip+0x231ea]        # 0x65043a30
    65020846:	mov    QWORD PTR [r12+0xa0],rax
    6502084e:	mov    DWORD PTR [r12+0x1c],0x1
    65020857:	test   r14,r14
    6502085a:	je     0x650208ee
    65020860:	xor    ebx,ebx
    65020862:	mov    DWORD PTR [rsp+0x40],ebx
    65020866:	lea    rcx,[rsp+0x40]
    6502086b:	call   0x65022d80
    65020870:	cmp    DWORD PTR [rsp+0x40],0x5
    65020875:	jg     0x650208be
    65020877:	xor    ecx,ecx
    65020879:	call   QWORD PTR [rip+0x139c1]        # 0x65034240
    6502087f:	movsxd rcx,DWORD PTR [rax+0x3c]
    65020883:	add    rcx,rax
    65020886:	movzx  eax,WORD PTR [rcx+0x14]
    6502088a:	lea    rdx,[rax+rcx*1+0x18]
    6502088f:	movzx  eax,WORD PTR [rcx+0x6]
    65020893:	test   eax,eax
    65020895:	je     0x650208be
    65020897:	data16 xchg ax,ax
    6502089a:	data16 xchg ax,ax
    6502089d:	data16 xchg ax,ax
    650208a0:	lea    rsi,[rip+0x14b19]        # 0x650353c0
    650208a7:	mov    rdi,rdx
    650208aa:	mov    ecx,0x8
    650208af:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    650208b1:	je     0x650208ee
    650208b3:	add    ebx,0x1
    650208b6:	add    rdx,0x28
    650208ba:	cmp    ebx,eax
    650208bc:	jb     0x650208a0
    650208be:	lea    rdx,[rip+0x14b03]        # 0x650353c8
    650208c5:	mov    rcx,r14
    650208c8:	call   QWORD PTR [rip+0x1383a]        # 0x65034108
    650208ce:	mov    QWORD PTR [r12+0x2a8],rax
    650208d6:	lea    rdx,[rip+0x14b0b]        # 0x650353e8
    650208dd:	mov    rcx,r14
    650208e0:	call   QWORD PTR [rip+0x13822]        # 0x65034108
    650208e6:	mov    QWORD PTR [r12+0x2b0],rax
    650208ee:	mov    DWORD PTR [r12+0xc8],0x1
    650208fa:	mov    BYTE PTR [r12+0x174],0x43
    65020903:	mov    BYTE PTR [r12+0x1f7],0x43
    6502090c:	lea    rax,[rip+0x229dd]        # 0x650432f0
    65020913:	mov    QWORD PTR [r12+0xb8],rax
    6502091b:	lock add DWORD PTR [rip+0x229cd],0x1        # 0x650432f0
    65020923:	mov    ecx,0xc
    65020928:	call   0x65029930
    6502092d:	nop
    6502092e:	mov    QWORD PTR [r12+0xc0],r13
    65020936:	test   r13,r13
    65020939:	jne    0x6502094a
    6502093b:	mov    rax,QWORD PTR [rip+0x2305e]        # 0x650439a0
    65020942:	mov    QWORD PTR [r12+0xc0],rax
    6502094a:	mov    rcx,QWORD PTR [r12+0xc0]
    65020952:	call   0x65023ce0
    65020957:	nop
    65020958:	mov    ecx,0xc
    6502095d:	call   0x65029800
    65020962:	mov    rbx,QWORD PTR [rsp+0x48]
    65020967:	mov    rsi,QWORD PTR [rsp+0x50]
    6502096c:	mov    rdi,QWORD PTR [rsp+0x58]
    65020971:	add    rsp,0x20
    65020975:	pop    r14
    65020977:	pop    r13
    65020979:	pop    r12
    6502097b:	ret    
    6502097c:	int3   
    6502097d:	int3   
    6502097e:	int3   
    6502097f:	int3   
    65020980:	rex push rbp
    65020982:	sub    rsp,0x20
    65020986:	mov    rbp,rdx
    65020989:	mov    ecx,0xc
    6502098e:	call   0x65029800
    65020993:	add    rsp,0x20
    65020997:	pop    rbp
    65020998:	ret    
    65020999:	int3   
    6502099a:	int3   
    6502099b:	int3   
    6502099c:	int3   
    6502099d:	int3   
    6502099e:	int3   
    6502099f:	int3   
    650209a0:	mov    QWORD PTR [rsp+0x8],rbx
    650209a5:	push   rdi
    650209a6:	sub    rsp,0x20
    650209aa:	call   QWORD PTR [rip+0x136b8]        # 0x65034068
    650209b0:	mov    ecx,DWORD PTR [rip+0x228ea]        # 0x650432a0
    650209b6:	mov    edi,eax
    650209b8:	call   QWORD PTR [rip+0x1388a]        # 0x65034248
    650209be:	test   rax,rax
    650209c1:	mov    rbx,rax
    650209c4:	jne    0x65020a11
    650209c6:	lea    ecx,[rax+0x1]
    650209c9:	mov    edx,0x2d8
    650209ce:	call   0x65022af0
    650209d3:	test   rax,rax
    650209d6:	mov    rbx,rax
    650209d9:	je     0x65020a11
    650209db:	mov    ecx,DWORD PTR [rip+0x228bf]        # 0x650432a0
    650209e1:	mov    rdx,rax
    650209e4:	call   QWORD PTR [rip+0x13846]        # 0x65034230
    650209ea:	mov    rcx,rbx
    650209ed:	test   eax,eax
    650209ef:	je     0x65020a0a
    650209f1:	xor    edx,edx
    650209f3:	call   0x65020810
    650209f8:	call   QWORD PTR [rip+0x1382a]        # 0x65034228
    650209fe:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
    65020a06:	mov    DWORD PTR [rbx],eax
    65020a08:	jmp    0x65020a11
    65020a0a:	call   0x6501fc00
    65020a0f:	xor    ebx,ebx
    65020a11:	mov    ecx,edi
    65020a13:	call   QWORD PTR [rip+0x136f7]        # 0x65034110
    65020a19:	mov    rax,rbx
    65020a1c:	mov    rbx,QWORD PTR [rsp+0x30]
    65020a21:	add    rsp,0x20
    65020a25:	pop    rdi
    65020a26:	ret    
    65020a27:	int3   
    65020a28:	int3   
    65020a29:	int3   
    65020a2a:	int3   
    65020a2b:	int3   
    65020a2c:	int3   
    65020a2d:	int3   
    65020a2e:	int3   
    65020a2f:	int3   
    65020a30:	mov    QWORD PTR [rsp+0x8],rbx
    65020a35:	push   rdi
    65020a36:	sub    rsp,0x20
    65020a3a:	call   QWORD PTR [rip+0x13628]        # 0x65034068
    65020a40:	mov    ecx,DWORD PTR [rip+0x2285a]        # 0x650432a0
    65020a46:	mov    edi,eax
    65020a48:	call   QWORD PTR [rip+0x137fa]        # 0x65034248
    65020a4e:	test   rax,rax
    65020a51:	mov    rbx,rax
    65020a54:	jne    0x65020aa1
    65020a56:	lea    ecx,[rax+0x1]
    65020a59:	mov    edx,0x2d8
    65020a5e:	call   0x65022af0
    65020a63:	test   rax,rax
    65020a66:	mov    rbx,rax
    65020a69:	je     0x65020aa1
    65020a6b:	mov    ecx,DWORD PTR [rip+0x2282f]        # 0x650432a0
    65020a71:	mov    rdx,rax
    65020a74:	call   QWORD PTR [rip+0x137b6]        # 0x65034230
    65020a7a:	mov    rcx,rbx
    65020a7d:	test   eax,eax
    65020a7f:	je     0x65020a9a
    65020a81:	xor    edx,edx
    65020a83:	call   0x65020810
    65020a88:	call   QWORD PTR [rip+0x1379a]        # 0x65034228
    65020a8e:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
    65020a96:	mov    DWORD PTR [rbx],eax
    65020a98:	jmp    0x65020aa1
    65020a9a:	call   0x6501fc00
    65020a9f:	xor    ebx,ebx
    65020aa1:	mov    ecx,edi
    65020aa3:	call   QWORD PTR [rip+0x13667]        # 0x65034110
    65020aa9:	test   rbx,rbx
    65020aac:	jne    0x65020ab6
    65020aae:	lea    ecx,[rbx+0x10]
    65020ab1:	call   0x65022c60
    65020ab6:	mov    rax,rbx
    65020ab9:	mov    rbx,QWORD PTR [rsp+0x30]
    65020abe:	add    rsp,0x20
    65020ac2:	pop    rdi
    65020ac3:	ret    
    65020ac4:	int3   
    65020ac5:	int3   
    65020ac6:	int3   
    65020ac7:	int3   
    65020ac8:	int3   
    65020ac9:	int3   
    65020aca:	int3   
    65020acb:	int3   
    65020acc:	int3   
    65020acd:	int3   
    65020ace:	int3   
    65020acf:	int3   
    65020ad0:	test   rcx,rcx
    65020ad3:	je     0x65020bf6
    65020ad9:	mov    QWORD PTR [rsp+0x10],rbx
    65020ade:	push   rdi
    65020adf:	sub    rsp,0x20
    65020ae3:	mov    rbx,rcx
    65020ae6:	mov    rcx,QWORD PTR [rcx+0x38]
    65020aea:	test   rcx,rcx
    65020aed:	je     0x65020af4
    65020aef:	call   0x6501fc00
    65020af4:	mov    rcx,QWORD PTR [rbx+0x48]
    65020af8:	test   rcx,rcx
    65020afb:	je     0x65020b02
    65020afd:	call   0x6501fc00
    65020b02:	mov    rcx,QWORD PTR [rbx+0x58]
    65020b06:	test   rcx,rcx
    65020b09:	je     0x65020b10
    65020b0b:	call   0x6501fc00
    65020b10:	mov    rcx,QWORD PTR [rbx+0x68]
    65020b14:	test   rcx,rcx
    65020b17:	je     0x65020b1e
    65020b19:	call   0x6501fc00
    65020b1e:	mov    rcx,QWORD PTR [rbx+0x78]
    65020b22:	test   rcx,rcx
    65020b25:	je     0x65020b2c
    65020b27:	call   0x6501fc00
    65020b2c:	mov    rcx,QWORD PTR [rbx+0x80]
    65020b33:	test   rcx,rcx
    65020b36:	je     0x65020b3d
    65020b38:	call   0x6501fc00
    65020b3d:	mov    rcx,QWORD PTR [rbx+0xa0]
    65020b44:	lea    rax,[rip+0x22ee5]        # 0x65043a30
    65020b4b:	cmp    rcx,rax
    65020b4e:	je     0x65020b55
    65020b50:	call   0x6501fc00
    65020b55:	mov    ecx,0xd
    65020b5a:	call   0x65029930
    65020b5f:	nop
    65020b60:	mov    rcx,QWORD PTR [rbx+0xb8]
    65020b67:	mov    QWORD PTR [rsp+0x30],rcx
    65020b6c:	test   rcx,rcx
    65020b6f:	je     0x65020b8e
    65020b71:	lock add DWORD PTR [rcx],0xffffffff
    65020b75:	jne    0x65020b8e
    65020b77:	lea    rax,[rip+0x22772]        # 0x650432f0
    65020b7e:	mov    rcx,QWORD PTR [rsp+0x30]
    65020b83:	cmp    rcx,rax
    65020b86:	je     0x65020b8e
    65020b88:	call   0x6501fc00
    65020b8d:	nop
    65020b8e:	mov    ecx,0xd
    65020b93:	call   0x65029800
    65020b98:	mov    ecx,0xc
    65020b9d:	call   0x65029930
    65020ba2:	nop
    65020ba3:	mov    rdi,QWORD PTR [rbx+0xc0]
    65020baa:	test   rdi,rdi
    65020bad:	je     0x65020bda
    65020baf:	mov    rcx,rdi
    65020bb2:	call   0x65023d80
    65020bb7:	cmp    rdi,QWORD PTR [rip+0x22de2]        # 0x650439a0
    65020bbe:	je     0x65020bda
    65020bc0:	lea    rax,[rip+0x22c79]        # 0x65043840
    65020bc7:	cmp    rdi,rax
    65020bca:	je     0x65020bda
    65020bcc:	cmp    DWORD PTR [rdi],0x0
    65020bcf:	jne    0x65020bda
    65020bd1:	mov    rcx,rdi
    65020bd4:	call   0x65023b50
    65020bd9:	nop
    65020bda:	mov    ecx,0xc
    65020bdf:	call   0x65029800
    65020be4:	mov    rcx,rbx
    65020be7:	call   0x6501fc00
    65020bec:	mov    rbx,QWORD PTR [rsp+0x38]
    65020bf1:	add    rsp,0x20
    65020bf5:	pop    rdi
    65020bf6:	ret    0x0
    65020bf9:	int3   
    65020bfa:	int3   
    65020bfb:	int3   
    65020bfc:	int3   
    65020bfd:	int3   
    65020bfe:	int3   
    65020bff:	int3   
    65020c00:	rex push rbp
    65020c02:	sub    rsp,0x20
    65020c06:	mov    rbp,rdx
    65020c09:	mov    ecx,0xd
    65020c0e:	call   0x65029800
    65020c13:	add    rsp,0x20
    65020c17:	pop    rbp
    65020c18:	ret    
    65020c19:	int3   
    65020c1a:	int3   
    65020c1b:	int3   
    65020c1c:	int3   
    65020c1d:	int3   
    65020c1e:	int3   
    65020c1f:	int3   
    65020c20:	rex push rbp
    65020c22:	sub    rsp,0x20
    65020c26:	mov    rbp,rdx
    65020c29:	mov    ecx,0xc
    65020c2e:	call   0x65029800
    65020c33:	add    rsp,0x20
    65020c37:	pop    rbp
    65020c38:	ret    
    65020c39:	int3   
    65020c3a:	int3   
    65020c3b:	int3   
    65020c3c:	int3   
    65020c3d:	int3   
    65020c3e:	int3   
    65020c3f:	int3   
    65020c40:	rex push rbx
    65020c42:	sub    rsp,0x20
    65020c46:	mov    rbx,rcx
    65020c49:	mov    ecx,DWORD PTR [rip+0x22651]        # 0x650432a0
    65020c4f:	cmp    ecx,0xffffffff
    65020c52:	je     0x65020c78
    65020c54:	test   rbx,rbx
    65020c57:	jne    0x65020c68
    65020c59:	call   QWORD PTR [rip+0x135e9]        # 0x65034248
    65020c5f:	mov    ecx,DWORD PTR [rip+0x2263b]        # 0x650432a0
    65020c65:	mov    rbx,rax
    65020c68:	xor    edx,edx
    65020c6a:	call   QWORD PTR [rip+0x135c0]        # 0x65034230
    65020c70:	mov    rcx,rbx
    65020c73:	call   0x65020ad0
    65020c78:	mov    ecx,DWORD PTR [rip+0x22626]        # 0x650432a4
    65020c7e:	cmp    ecx,0xffffffff
    65020c81:	je     0x65020c8b
    65020c83:	xor    edx,edx
    65020c85:	call   QWORD PTR [rip+0x135d5]        # 0x65034260
    65020c8b:	add    rsp,0x20
    65020c8f:	pop    rbx
    65020c90:	ret    
    65020c91:	int3   
    65020c92:	int3   
    65020c93:	int3   
    65020c94:	int3   
    65020c95:	int3   
    65020c96:	int3   
    65020c97:	int3   
    65020c98:	int3   
    65020c99:	int3   
    65020c9a:	int3   
    65020c9b:	int3   
    65020c9c:	int3   
    65020c9d:	int3   
    65020c9e:	int3   
    65020c9f:	int3   
    65020ca0:	sub    rsp,0x28
    65020ca4:	call   0x65023000
    65020ca9:	call   0x650296c0
    65020cae:	test   eax,eax
    65020cb0:	jne    0x65020cf4
    65020cb2:	mov    ecx,DWORD PTR [rip+0x225e8]        # 0x650432a0
    65020cb8:	cmp    ecx,0xffffffff
    65020cbb:	je     0x65020ccd
    65020cbd:	call   QWORD PTR [rip+0x13595]        # 0x65034258
    65020cc3:	mov    DWORD PTR [rip+0x225d3],0xffffffff        # 0x650432a0
    65020ccd:	mov    ecx,DWORD PTR [rip+0x225d1]        # 0x650432a4
    65020cd3:	cmp    ecx,0xffffffff
    65020cd6:	je     0x65020ce8
    65020cd8:	call   QWORD PTR [rip+0x13572]        # 0x65034250
    65020cde:	mov    DWORD PTR [rip+0x225bc],0xffffffff        # 0x650432a4
    65020ce8:	call   0x65029760
    65020ced:	xor    eax,eax
    65020cef:	add    rsp,0x28
    65020cf3:	ret    
    65020cf4:	lea    rcx,[rip+0xfffffffffffffdd5]        # 0x65020ad0
    65020cfb:	call   QWORD PTR [rip+0x13567]        # 0x65034268
    65020d01:	cmp    eax,0xffffffff
    65020d04:	mov    DWORD PTR [rip+0x22596],eax        # 0x650432a0
    65020d0a:	jne    0x65020d18
    65020d0c:	mov    ecx,DWORD PTR [rip+0x22592]        # 0x650432a4
    65020d12:	cmp    ecx,eax
    65020d14:	je     0x65020ce8
    65020d16:	jmp    0x65020cd8
    65020d18:	mov    edx,0x2d8
    65020d1d:	mov    ecx,0x1
    65020d22:	mov    QWORD PTR [rsp+0x20],rbx
    65020d27:	call   0x65022af0
    65020d2c:	test   rax,rax
    65020d2f:	mov    rbx,rax
    65020d32:	je     0x65020d70
    65020d34:	mov    ecx,DWORD PTR [rip+0x22566]        # 0x650432a0
    65020d3a:	mov    rdx,rax
    65020d3d:	call   QWORD PTR [rip+0x134ed]        # 0x65034230
    65020d43:	test   eax,eax
    65020d45:	je     0x65020d70
    65020d47:	xor    edx,edx
    65020d49:	mov    rcx,rbx
    65020d4c:	call   0x65020810
    65020d51:	call   QWORD PTR [rip+0x134d1]        # 0x65034228
    65020d57:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
    65020d5f:	mov    DWORD PTR [rbx],eax
    65020d61:	mov    rbx,QWORD PTR [rsp+0x20]
    65020d66:	mov    eax,0x1
    65020d6b:	add    rsp,0x28
    65020d6f:	ret    
    65020d70:	mov    ecx,DWORD PTR [rip+0x2252a]        # 0x650432a0
    65020d76:	cmp    ecx,0xffffffff
    65020d79:	je     0x65020d8b
    65020d7b:	call   QWORD PTR [rip+0x134d7]        # 0x65034258
    65020d81:	mov    DWORD PTR [rip+0x22515],0xffffffff        # 0x650432a0
    65020d8b:	mov    ecx,DWORD PTR [rip+0x22513]        # 0x650432a4
    65020d91:	cmp    ecx,0xffffffff
    65020d94:	je     0x65020da6
    65020d96:	call   QWORD PTR [rip+0x134b4]        # 0x65034250
    65020d9c:	mov    DWORD PTR [rip+0x224fe],0xffffffff        # 0x650432a4
    65020da6:	call   0x65029760
    65020dab:	mov    rbx,QWORD PTR [rsp+0x20]
    65020db0:	xor    eax,eax
    65020db2:	add    rsp,0x28
    65020db6:	ret    
    65020db7:	int3   
    65020db8:	int3   
    65020db9:	int3   
    65020dba:	int3   
    65020dbb:	int3   
    65020dbc:	int3   
    65020dbd:	int3   
    65020dbe:	int3   
    65020dbf:	int3   
    65020dc0:	mov    QWORD PTR [rip+0x23e91],rcx        # 0x65044c58
    65020dc7:	ret    
    65020dc8:	int3   
    65020dc9:	int3   
    65020dca:	int3   
    65020dcb:	int3   
    65020dcc:	int3   
    65020dcd:	int3   
    65020dce:	int3   
    65020dcf:	int3   
    65020dd0:	rex push rbx
    65020dd2:	sub    rsp,0x20
    65020dd6:	mov    rbx,rcx
    65020dd9:	mov    rcx,QWORD PTR [rip+0x23e78]        # 0x65044c58
    65020de0:	call   0x650206e0
    65020de5:	test   rax,rax
    65020de8:	je     0x65020dfe
    65020dea:	mov    rcx,rbx
    65020ded:	call   rax
    65020def:	test   eax,eax
    65020df1:	je     0x65020dfe
    65020df3:	mov    eax,0x1
    65020df8:	add    rsp,0x20
    65020dfc:	pop    rbx
    65020dfd:	ret    
    65020dfe:	xor    eax,eax
    65020e00:	add    rsp,0x20
    65020e04:	pop    rbx
    65020e05:	ret    
    65020e06:	int3   
    65020e07:	int3   
    65020e08:	int3   
    65020e09:	int3   
    65020e0a:	int3   
    65020e0b:	int3   
    65020e0c:	int3   
    65020e0d:	int3   
    65020e0e:	int3   
    65020e0f:	int3   
    65020e10:	rex push rbx
    65020e12:	sub    rsp,0x30
    65020e16:	mov    rbx,rcx
    65020e19:	mov    ecx,0xe
    65020e1e:	call   0x65029930
    65020e23:	nop
    65020e24:	mov    rax,QWORD PTR [rbx+0x8]
    65020e28:	test   rax,rax
    65020e2b:	je     0x65020e74
    65020e2d:	mov    rcx,QWORD PTR [rip+0x23e34]        # 0x65044c68
    65020e34:	mov    QWORD PTR [rsp+0x20],rcx
    65020e39:	lea    rdx,[rip+0x23e20]        # 0x65044c60
    65020e40:	test   rcx,rcx
    65020e43:	je     0x65020e63
    65020e45:	cmp    QWORD PTR [rcx],rax
    65020e48:	jne    0x65020e59
    65020e4a:	mov    rax,QWORD PTR [rcx+0x8]
    65020e4e:	mov    QWORD PTR [rdx+0x8],rax
    65020e52:	call   0x6501fc00
    65020e57:	jmp    0x65020e63
    65020e59:	mov    rdx,rcx
    65020e5c:	mov    QWORD PTR [rsp+0x20],rcx
    65020e61:	jmp    0x65020e40
    65020e63:	mov    rcx,QWORD PTR [rbx+0x8]
    65020e67:	call   0x6501fc00
    65020e6c:	mov    QWORD PTR [rbx+0x8],0x0
    65020e74:	mov    ecx,0xe
    65020e79:	call   0x65029800
    65020e7e:	add    rsp,0x30
    65020e82:	pop    rbx
    65020e83:	ret    
    65020e84:	int3   
    65020e85:	int3   
    65020e86:	int3   
    65020e87:	int3   
    65020e88:	int3   
    65020e89:	int3   
    65020e8a:	int3   
    65020e8b:	int3   
    65020e8c:	int3   
    65020e8d:	int3   
    65020e8e:	int3   
    65020e8f:	int3   
    65020e90:	rex push rbp
    65020e92:	sub    rsp,0x20
    65020e96:	mov    rbp,rdx
    65020e99:	mov    ecx,0xe
    65020e9e:	call   0x65029800
    65020ea3:	add    rsp,0x20
    65020ea7:	pop    rbp
    65020ea8:	ret    
    65020ea9:	int3   
    65020eaa:	int3   
    65020eab:	int3   
    65020eac:	int3   
    65020ead:	int3   
    65020eae:	int3   
    65020eaf:	int3   
    65020eb0:	mov    QWORD PTR [rsp+0x8],rbx
    65020eb5:	mov    QWORD PTR [rsp+0x10],rbp
    65020eba:	mov    QWORD PTR [rsp+0x18],rsi
    65020ebf:	push   rdi
    65020ec0:	sub    rsp,0x20
    65020ec4:	test   rcx,rcx
    65020ec7:	mov    rsi,r8
    65020eca:	mov    rbp,rdx
    65020ecd:	mov    rbx,rcx
    65020ed0:	jne    0x65020ed7
    65020ed2:	call   0x650228e0
    65020ed7:	movsxd rax,DWORD PTR [rbx+0x18]
    65020edb:	mov    edi,DWORD PTR [rbx+0x14]
    65020ede:	add    rax,QWORD PTR [rbp+0x8]
    65020ee2:	jne    0x65020ee9
    65020ee4:	call   0x650228e0
    65020ee9:	xor    ecx,ecx
    65020eeb:	test   edi,edi
    65020eed:	je     0x65020f28
    65020eef:	mov    r8,QWORD PTR [rbp+0x8]
    65020ef3:	movsxd r9,DWORD PTR [rbx+0x18]
    65020ef7:	lea    rdx,[r8+r9*1]
    65020efb:	xchg   ax,ax
    65020efd:	data16 xchg ax,ax
    65020f00:	movsxd rax,DWORD PTR [rdx]
    65020f03:	add    rax,r8
    65020f06:	cmp    rsi,rax
    65020f09:	jl     0x65020f16
    65020f0b:	add    ecx,0x1
    65020f0e:	add    rdx,0x8
    65020f12:	cmp    ecx,edi
    65020f14:	jb     0x65020f00
    65020f16:	test   ecx,ecx
    65020f18:	je     0x65020f28
    65020f1a:	lea    eax,[rcx-0x1]
    65020f1d:	lea    rdx,[r9+rax*8]
    65020f21:	mov    eax,DWORD PTR [rdx+r8*1+0x4]
    65020f26:	jmp    0x65020f2b
    65020f28:	or     eax,0xffffffff
    65020f2b:	mov    rbx,QWORD PTR [rsp+0x30]
    65020f30:	mov    rbp,QWORD PTR [rsp+0x38]
    65020f35:	mov    rsi,QWORD PTR [rsp+0x40]
    65020f3a:	add    rsp,0x20
    65020f3e:	pop    rdi
    65020f3f:	ret    
    65020f40:	mov    QWORD PTR [rsp+0x8],rbx
    65020f45:	mov    QWORD PTR [rsp+0x10],rbp
    65020f4a:	mov    QWORD PTR [rsp+0x18],rsi
    65020f4f:	push   rdi
    65020f50:	sub    rsp,0x20
    65020f54:	test   rcx,rcx
    65020f57:	mov    rbp,QWORD PTR [rdx]
    65020f5a:	mov    rsi,rdx
    65020f5d:	mov    rbx,rcx
    65020f60:	jne    0x65020f67
    65020f62:	call   0x650228e0
    65020f67:	movsxd rax,DWORD PTR [rbx+0x18]
    65020f6b:	mov    edi,DWORD PTR [rbx+0x14]
    65020f6e:	add    rax,QWORD PTR [rsi+0x8]
    65020f72:	jne    0x65020f79
    65020f74:	call   0x650228e0
    65020f79:	xor    ecx,ecx
    65020f7b:	test   edi,edi
    65020f7d:	je     0x65020fb8
    65020f7f:	mov    r8,QWORD PTR [rsi+0x8]
    65020f83:	movsxd r9,DWORD PTR [rbx+0x18]
    65020f87:	lea    rdx,[r8+r9*1]
    65020f8b:	xchg   ax,ax
    65020f8d:	data16 xchg ax,ax
    65020f90:	movsxd rax,DWORD PTR [rdx]
    65020f93:	add    rax,r8
    65020f96:	cmp    rbp,rax
    65020f99:	jl     0x65020fa6
    65020f9b:	add    ecx,0x1
    65020f9e:	add    rdx,0x8
    65020fa2:	cmp    ecx,edi
    65020fa4:	jb     0x65020f90
    65020fa6:	test   ecx,ecx
    65020fa8:	je     0x65020fb8
    65020faa:	lea    eax,[rcx-0x1]
    65020fad:	lea    rcx,[r8+rax*8]
    65020fb1:	mov    eax,DWORD PTR [rcx+r9*1+0x4]
    65020fb6:	jmp    0x65020fbb
    65020fb8:	or     eax,0xffffffff
    65020fbb:	mov    rbx,QWORD PTR [rsp+0x30]
    65020fc0:	mov    rbp,QWORD PTR [rsp+0x38]
    65020fc5:	mov    rsi,QWORD PTR [rsp+0x40]
    65020fca:	add    rsp,0x20
    65020fce:	pop    rdi
    65020fcf:	ret    
    65020fd0:	mov    QWORD PTR [rsp+0x18],rbp
    65020fd5:	push   rdi
    65020fd6:	sub    rsp,0x20
    65020fda:	movsxd r9,DWORD PTR [r8+0x1c]
    65020fde:	mov    rax,QWORD PTR [rcx]
    65020fe1:	mov    rdi,r8
    65020fe4:	mov    eax,DWORD PTR [r9+rax*1]
    65020fe8:	mov    rbp,rdx
    65020feb:	cmp    eax,0xfffffffe
    65020fee:	jne    0x65021057
    65020ff0:	movsxd rax,DWORD PTR [r8+0x18]
    65020ff4:	mov    QWORD PTR [rsp+0x30],rbx
    65020ff9:	mov    ebx,DWORD PTR [r8+0x14]
    65020ffd:	add    rax,QWORD PTR [rdx+0x8]
    65021001:	mov    QWORD PTR [rsp+0x38],rsi
    65021006:	mov    rsi,QWORD PTR [rdx]
    65021009:	jne    0x65021010
    6502100b:	call   0x650228e0
    65021010:	xor    ecx,ecx
    65021012:	test   ebx,ebx
    65021014:	je     0x6502104a
    65021016:	mov    r8,QWORD PTR [rbp+0x8]
    6502101a:	movsxd r9,DWORD PTR [rdi+0x18]
    6502101e:	lea    rdx,[r8+r9*1]
    65021022:	movsxd rax,DWORD PTR [rdx]
    65021025:	add    rax,r8
    65021028:	cmp    rsi,rax
    6502102b:	jl     0x65021038
    6502102d:	add    ecx,0x1
    65021030:	add    rdx,0x8
    65021034:	cmp    ecx,ebx
    65021036:	jb     0x65021022
    65021038:	test   ecx,ecx
    6502103a:	je     0x6502104a
    6502103c:	lea    eax,[rcx-0x1]
    6502103f:	lea    rdx,[r9+rax*8]
    65021043:	mov    eax,DWORD PTR [rdx+r8*1+0x4]
    65021048:	jmp    0x6502104d
    6502104a:	or     eax,0xffffffff
    6502104d:	mov    rsi,QWORD PTR [rsp+0x38]
    65021052:	mov    rbx,QWORD PTR [rsp+0x30]
    65021057:	mov    rbp,QWORD PTR [rsp+0x40]
    6502105c:	add    rsp,0x20
    65021060:	pop    rdi
    65021061:	ret    
    65021062:	int3   
    65021063:	int3   
    65021064:	int3   
    65021065:	int3   
    65021066:	int3   
    65021067:	int3   
    65021068:	int3   
    65021069:	int3   
    6502106a:	int3   
    6502106b:	int3   
    6502106c:	int3   
    6502106d:	int3   
    6502106e:	int3   
    6502106f:	int3   
    65021070:	movsxd rdx,DWORD PTR [r8+0x1c]
    65021074:	mov    rax,QWORD PTR [rcx]
    65021077:	mov    DWORD PTR [rdx+rax*1],r9d
    6502107b:	ret    
    6502107c:	int3   
    6502107d:	int3   
    6502107e:	int3   
    6502107f:	int3   
    65021080:	mov    QWORD PTR [rsp+0x8],rbx
    65021085:	push   rdi
    65021086:	sub    rsp,0x20
    6502108a:	mov    edi,r9d
    6502108d:	lea    r9,[rsp+0x40]
    65021092:	mov    rbx,r8
    65021095:	call   0x6501dda0
    6502109a:	mov    rcx,QWORD PTR [rax]
    6502109d:	movsxd rax,DWORD PTR [rbx+0x1c]
    650210a1:	mov    QWORD PTR [rsp+0x40],rcx
    650210a6:	cmp    edi,DWORD PTR [rax+rcx*1+0x4]
    650210aa:	jle    0x650210b0
    650210ac:	mov    DWORD PTR [rax+rcx*1+0x4],edi
    650210b0:	mov    rbx,QWORD PTR [rsp+0x30]
    650210b5:	add    rsp,0x20
    650210b9:	pop    rdi
    650210ba:	ret    
    650210bb:	int3   
    650210bc:	int3   
    650210bd:	int3   
    650210be:	int3   
    650210bf:	int3   
    650210c0:	rex push rbx
    650210c2:	sub    rsp,0x20
    650210c6:	lea    r9,[rsp+0x40]
    650210cb:	mov    rbx,r8
    650210ce:	call   0x6501dda0
    650210d3:	mov    rcx,QWORD PTR [rax]
    650210d6:	movsxd rax,DWORD PTR [rbx+0x1c]
    650210da:	mov    QWORD PTR [rsp+0x40],rcx
    650210df:	mov    eax,DWORD PTR [rax+rcx*1+0x4]
    650210e3:	add    rsp,0x20
    650210e7:	pop    rbx
    650210e8:	ret    
    650210e9:	int3   
    650210ea:	int3   
    650210eb:	int3   
    650210ec:	int3   
    650210ed:	int3   
    650210ee:	int3   
    650210ef:	int3   
    650210f0:	lea    rax,[rip+0x14311]        # 0x65035408
    650210f7:	mov    QWORD PTR [rcx],rax
    650210fa:	jmp    0x6501d490
    650210ff:	int3   
    65021100:	mov    QWORD PTR [rsp+0x8],rbx
    65021105:	push   rdi
    65021106:	sub    rsp,0x20
    6502110a:	lea    rax,[rip+0x142f7]        # 0x65035408
    65021111:	mov    ebx,edx
    65021113:	mov    rdi,rcx
    65021116:	mov    QWORD PTR [rcx],rax
    65021119:	call   0x6501d490
    6502111e:	test   bl,0x1
    65021121:	je     0x6502112b
    65021123:	mov    rcx,rdi
    65021126:	call   0x6501d300
    6502112b:	mov    rax,rdi
    6502112e:	mov    rbx,QWORD PTR [rsp+0x30]
    65021133:	add    rsp,0x20
    65021137:	pop    rdi
    65021138:	ret    
    65021139:	int3   
    6502113a:	int3   
    6502113b:	int3   
    6502113c:	int3   
    6502113d:	int3   
    6502113e:	int3   
    6502113f:	int3   
    65021140:	sub    rsp,0x28
    65021144:	mov    rax,QWORD PTR [rcx]
    65021147:	mov    ecx,DWORD PTR [rax]
    65021149:	cmp    ecx,0xe0434f4d
    6502114f:	je     0x6502116e
    65021151:	cmp    ecx,0xe06d7363
    65021157:	jne    0x65021188
    65021159:	call   0x65020a30
    6502115e:	mov    DWORD PTR [rax+0x100],0x0
    65021168:	call   0x650228b0
    6502116d:	int3   
    6502116e:	call   0x65020a30
    65021173:	cmp    DWORD PTR [rax+0x100],0x0
    6502117a:	jle    0x65021188
    6502117c:	call   0x65020a30
    65021181:	add    DWORD PTR [rax+0x100],0xffffffff
    65021188:	xor    eax,eax
    6502118a:	add    rsp,0x28
    6502118e:	ret    
    6502118f:	int3   
    65021190:	mov    DWORD PTR [rsp+0x20],r9d
    65021195:	mov    QWORD PTR [rsp+0x18],r8
    6502119a:	mov    QWORD PTR [rsp+0x10],rdx
    6502119f:	mov    QWORD PTR [rsp+0x8],rcx
    650211a4:	push   rbx
    650211a5:	push   rsi
    650211a6:	push   rdi
    650211a7:	push   r12
    650211a9:	push   r13
    650211ab:	push   r14
    650211ad:	push   r15
    650211af:	sub    rsp,0x30
    650211b3:	mov    r13d,r9d
    650211b6:	mov    rsi,r8
    650211b9:	mov    rbx,rdx
    650211bc:	mov    r14,rcx
    650211bf:	call   0x65020fd0
    650211c4:	mov    edi,eax
    650211c6:	call   0x6501deb0
    650211cb:	mov    r15,rax
    650211ce:	mov    QWORD PTR [rsp+0x28],rax
    650211d3:	call   0x65020a30
    650211d8:	add    DWORD PTR [rax+0x100],0x1
    650211df:	nop
    650211e0:	cmp    edi,0xffffffff
    650211e3:	je     0x650212d8
    650211e9:	cmp    edi,r13d
    650211ec:	jle    0x650212d8
    650211f2:	cmp    edi,0xffffffff
    650211f5:	jle    0x650211fc
    650211f7:	cmp    edi,DWORD PTR [rsi+0x4]
    650211fa:	jl     0x65021201
    650211fc:	call   0x650228e0
    65021201:	movsxd r12,edi
    65021204:	call   0x6501deb0
    65021209:	movsxd rcx,DWORD PTR [rsi+0x8]
    6502120d:	lea    rax,[rax+r12*8]
    65021211:	mov    edi,DWORD PTR [rcx+rax*1]
    65021214:	mov    DWORD PTR [rsp+0x20],edi
    65021218:	call   0x6501deb0
    6502121d:	movsxd rcx,DWORD PTR [rsi+0x8]
    65021221:	lea    rax,[rax+r12*8]
    65021225:	cmp    DWORD PTR [rcx+rax*1+0x4],0x0
    6502122a:	je     0x650212aa
    6502122c:	call   0x6501deb0
    65021231:	movsxd rcx,DWORD PTR [rsi+0x8]
    65021235:	lea    rax,[rax+r12*8]
    65021239:	movsxd rbx,DWORD PTR [rcx+rax*1+0x4]
    6502123e:	call   0x6501deb0
    65021243:	lea    rcx,[rax+rbx*1]
    65021247:	test   rcx,rcx
    6502124a:	je     0x650212aa
    6502124c:	mov    r9d,edi
    6502124f:	mov    r8,rsi
    65021252:	mov    rdx,QWORD PTR [rsp+0x78]
    65021257:	mov    rcx,r14
    6502125a:	call   0x65021070
    6502125f:	call   0x6501deb0
    65021264:	movsxd rcx,DWORD PTR [rsi+0x8]
    65021268:	lea    rax,[rax+r12*8]
    6502126c:	cmp    DWORD PTR [rcx+rax*1+0x4],0x0
    65021271:	je     0x6502128f
    65021273:	call   0x6501deb0
    65021278:	movsxd rcx,DWORD PTR [rsi+0x8]
    6502127c:	lea    rax,[rax+r12*8]
    65021280:	movsxd rbx,DWORD PTR [rcx+rax*1+0x4]
    65021285:	call   0x6501deb0
    6502128a:	add    rax,rbx
    6502128d:	jmp    0x65021291
    6502128f:	xor    eax,eax
    65021291:	mov    r8d,0x103
    65021297:	mov    rdx,r14
    6502129a:	mov    rcx,rax
    6502129d:	call   0x65033290
    650212a2:	mov    rcx,r15
    650212a5:	call   0x6501def0
    650212aa:	jmp    0x650212ca
    650212ac:	mov    r13d,DWORD PTR [rsp+0x88]
    650212b4:	mov    rsi,QWORD PTR [rsp+0x80]
    650212bc:	mov    r14,QWORD PTR [rsp+0x70]
    650212c1:	mov    r15,QWORD PTR [rsp+0x28]
    650212c6:	mov    edi,DWORD PTR [rsp+0x20]
    650212ca:	mov    DWORD PTR [rsp+0x24],edi
    650212ce:	mov    rbx,QWORD PTR [rsp+0x78]
    650212d3:	jmp    0x650211e0
    650212d8:	call   0x65020a30
    650212dd:	cmp    DWORD PTR [rax+0x100],0x0
    650212e4:	jle    0x650212f2
    650212e6:	call   0x65020a30
    650212eb:	add    DWORD PTR [rax+0x100],0xffffffff
    650212f2:	cmp    edi,0xffffffff
    650212f5:	je     0x65021301
    650212f7:	cmp    edi,r13d
    650212fa:	jle    0x65021301
    650212fc:	call   0x650228e0
    65021301:	mov    r9d,edi
    65021304:	mov    r8,rsi
    65021307:	mov    rdx,rbx
    6502130a:	mov    rcx,r14
    6502130d:	call   0x65021070
    65021312:	add    rsp,0x30
    65021316:	pop    r15
    65021318:	pop    r14
    6502131a:	pop    r13
    6502131c:	pop    r12
    6502131e:	pop    rdi
    6502131f:	pop    rsi
    65021320:	pop    rbx
    65021321:	ret    
    65021322:	int3   
    65021323:	int3   
    65021324:	int3   
    65021325:	int3   
    65021326:	int3   
    65021327:	int3   
    65021328:	int3   
    65021329:	int3   
    6502132a:	int3   
    6502132b:	int3   
    6502132c:	int3   
    6502132d:	int3   
    6502132e:	int3   
    6502132f:	int3   
    65021330:	rex push rbp
    65021332:	sub    rsp,0x20
    65021336:	mov    rbp,rdx
    65021339:	call   0x65021140
    6502133e:	add    rsp,0x20
    65021342:	pop    rbp
    65021343:	ret    
    65021344:	int3   
    65021345:	int3   
    65021346:	int3   
    65021347:	int3   
    65021348:	int3   
    65021349:	int3   
    6502134a:	int3   
    6502134b:	int3   
    6502134c:	int3   
    6502134d:	int3   
    6502134e:	int3   
    6502134f:	int3   
    65021350:	rex push rbp
    65021352:	sub    rsp,0x20
    65021356:	mov    rbp,rdx
    65021359:	call   0x65020a30
    6502135e:	cmp    DWORD PTR [rax+0x100],0x0
    65021365:	jle    0x65021373
    65021367:	call   0x65020a30
    6502136c:	add    DWORD PTR [rax+0x100],0xffffffff
    65021373:	add    rsp,0x20
    65021377:	pop    rbp
    65021378:	ret    
    65021379:	int3   
    6502137a:	int3   
    6502137b:	int3   
    6502137c:	int3   
    6502137d:	int3   
    6502137e:	int3   
    6502137f:	int3   
    65021380:	rex push rbx
    65021382:	sub    rsp,0x20
    65021386:	mov    r9,QWORD PTR [rcx]
    65021389:	mov    DWORD PTR [r8],0x0
    65021390:	mov    rbx,r8
    65021393:	cmp    DWORD PTR [r9],0xe06d7363
    6502139a:	jne    0x65021424
    650213a0:	cmp    DWORD PTR [r9+0x18],0x4
    650213a5:	jne    0x650213d1
    650213a7:	mov    eax,DWORD PTR [r9+0x20]
    650213ab:	cmp    eax,0x19930520
    650213b0:	je     0x650213c0
    650213b2:	cmp    eax,0x19930521
    650213b7:	je     0x650213c0
    650213b9:	cmp    eax,0x19930522
    650213be:	jne    0x650213d1
    650213c0:	mov    rax,QWORD PTR [rdx+0x28]
    650213c4:	cmp    QWORD PTR [r9+0x28],rax
    650213c8:	jne    0x650213d1
    650213ca:	mov    DWORD PTR [r8],0x1
    650213d1:	cmp    DWORD PTR [r9],0xe06d7363
    650213d8:	jne    0x65021424
    650213da:	cmp    DWORD PTR [r9+0x18],0x4
    650213df:	jne    0x65021424
    650213e1:	mov    ecx,DWORD PTR [r9+0x20]
    650213e5:	cmp    ecx,0x19930520
    650213eb:	je     0x650213fd
    650213ed:	cmp    ecx,0x19930521
    650213f3:	je     0x650213fd
    650213f5:	cmp    ecx,0x19930522
    650213fb:	jne    0x65021424
    650213fd:	cmp    QWORD PTR [r9+0x30],0x0
    65021402:	jne    0x65021424
    65021404:	call   0x65020a30
    65021409:	mov    DWORD PTR [rax+0x2d0],0x1
    65021413:	mov    DWORD PTR [rbx],0x1
    65021419:	mov    eax,0x1
    6502141e:	add    rsp,0x20
    65021422:	pop    rbx
    65021423:	ret    
    65021424:	xor    eax,eax
    65021426:	add    rsp,0x20
    6502142a:	pop    rbx
    6502142b:	ret    
    6502142c:	int3   
    6502142d:	int3   
    6502142e:	int3   
    6502142f:	int3   
    65021430:	test   rcx,rcx
    65021433:	je     0x65021472
    65021435:	mov    BYTE PTR [rsp+0x10],dl
    65021439:	sub    rsp,0x28
    6502143d:	cmp    DWORD PTR [rcx],0xe06d7363
    65021443:	jne    0x6502146e
    65021445:	mov    rax,QWORD PTR [rcx+0x30]
    65021449:	test   rax,rax
    6502144c:	je     0x6502146e
    6502144e:	movsxd rdx,DWORD PTR [rax+0x4]
    65021452:	test   edx,edx
    65021454:	je     0x6502146e
    65021456:	mov    rax,rdx
    65021459:	mov    rdx,QWORD PTR [rcx+0x38]
    6502145d:	add    rdx,rax
    65021460:	mov    rcx,QWORD PTR [rcx+0x28]
    65021464:	call   rdx
    65021466:	jmp    0x6502146e
    65021468:	call   0x650228b0
    6502146d:	nop
    6502146e:	add    rsp,0x28
    65021472:	ret    0x0
    65021475:	int3   
    65021476:	int3   
    65021477:	int3   
    65021478:	int3   
    65021479:	int3   
    6502147a:	int3   
    6502147b:	int3   
    6502147c:	int3   
    6502147d:	int3   
    6502147e:	int3   
    6502147f:	int3   
    65021480:	rex push rbp
    65021482:	sub    rsp,0x20
    65021486:	mov    rbp,rdx
    65021489:	xor    eax,eax
    6502148b:	cmp    BYTE PTR [rbp+0x38],al
    6502148e:	setne  al
    65021491:	add    rsp,0x20
    65021495:	pop    rbp
    65021496:	ret    
    65021497:	int3   
    65021498:	int3   
    65021499:	int3   
    6502149a:	int3   
    6502149b:	int3   
    6502149c:	int3   
    6502149d:	int3   
    6502149e:	int3   
    6502149f:	int3   
    650214a0:	movsxd rax,DWORD PTR [rdx]
    650214a3:	add    rax,rcx
    650214a6:	cmp    DWORD PTR [rdx+0x4],0x0
    650214aa:	jl     0x650214c2
    650214ac:	movsxd r9,DWORD PTR [rdx+0x4]
    650214b0:	movsxd rdx,DWORD PTR [rdx+0x8]
    650214b4:	mov    rcx,QWORD PTR [r9+rcx*1]
    650214b8:	movsxd r8,DWORD PTR [rdx+rcx*1]
    650214bc:	add    r8,r9
    650214bf:	add    rax,r8
    650214c2:	ret    0x0
    650214c5:	int3   
    650214c6:	int3   
    650214c7:	int3   
    650214c8:	int3   
    650214c9:	int3   
    650214ca:	int3   
    650214cb:	int3   
    650214cc:	int3   
    650214cd:	int3   
    650214ce:	int3   
    650214cf:	int3   
    650214d0:	mov    QWORD PTR [rsp+0x10],rdx
    650214d5:	mov    QWORD PTR [rsp+0x8],rcx
    650214da:	push   rbx
    650214db:	push   rdi
    650214dc:	sub    rsp,0x48
    650214e0:	test   rdx,rdx
    650214e3:	mov    rbx,rdx
    650214e6:	mov    rdi,rcx
    650214e9:	jne    0x650214f6
    650214eb:	call   0x650228e0
    650214f0:	call   0x650228b0
    650214f5:	int3   
    650214f6:	mov    QWORD PTR [rsp+0x78],rbp
    650214fb:	xor    bpl,bpl
    650214fe:	mov    QWORD PTR [rsp+0x28],r14
    65021503:	xor    r14d,r14d
    65021506:	mov    BYTE PTR [rsp+0x70],bpl
    6502150b:	cmp    DWORD PTR [rdx],r14d
    6502150e:	jle    0x65021700
    65021514:	mov    QWORD PTR [rsp+0x40],rsi
    65021519:	mov    QWORD PTR [rsp+0x38],r12
    6502151e:	mov    QWORD PTR [rsp+0x30],r13
    65021523:	mov    QWORD PTR [rsp+0x20],r15
    65021528:	xor    r15d,r15d
    6502152b:	xchg   ax,ax
    6502152d:	data16 xchg ax,ax
    65021530:	call   0x6501ded0
    65021535:	mov    r11,rax
    65021538:	mov    rax,QWORD PTR [rdi+0x30]
    6502153c:	movsxd rcx,DWORD PTR [rax+0xc]
    65021540:	lea    r12,[r11+rcx*1+0x4]
    65021545:	call   0x6501ded0
    6502154a:	mov    r11,rax
    6502154d:	mov    rax,QWORD PTR [rdi+0x30]
    65021551:	movsxd rcx,DWORD PTR [rax+0xc]
    65021555:	mov    esi,DWORD PTR [r11+rcx*1]
    65021559:	test   esi,esi
    6502155b:	jle    0x650216db
    65021561:	call   0x6501ded0
    65021566:	mov    r13,QWORD PTR [rdi+0x30]
    6502156a:	mov    rbp,rax
    6502156d:	movsxd rax,DWORD PTR [r12]
    65021571:	add    rbp,rax
    65021574:	call   0x6501deb0
    65021579:	movsxd rdi,DWORD PTR [rbx+0x4]
    6502157d:	add    rax,r15
    65021580:	add    rdi,rax
    65021583:	cmp    DWORD PTR [rdi+0x4],0x0
    65021587:	je     0x650216bd
    6502158d:	movsxd rbx,DWORD PTR [rdi+0x4]
    65021591:	call   0x6501deb0
    65021596:	mov    r11,rax
    65021599:	add    r11,rbx
    6502159c:	je     0x65021690
    650215a2:	test   ebx,ebx
    650215a4:	je     0x650215b5
    650215a6:	movsxd rbx,DWORD PTR [rdi+0x4]
    650215aa:	call   0x6501deb0
    650215af:	lea    r11,[rbx+rax*1]
    650215b3:	jmp    0x650215b8
    650215b5:	xor    r11d,r11d
    650215b8:	cmp    BYTE PTR [r11+0x10],0x0
    650215bd:	je     0x6502167c
    650215c3:	test   ebx,ebx
    650215c5:	je     0x650215d8
    650215c7:	call   0x6501deb0
    650215cc:	mov    rbx,rax
    650215cf:	movsxd rax,DWORD PTR [rdi+0x4]
    650215d3:	add    rbx,rax
    650215d6:	jmp    0x650215da
    650215d8:	xor    ebx,ebx
    650215da:	call   0x6501ded0
    650215df:	mov    r11,rax
    650215e2:	movsxd rax,DWORD PTR [rbp+0x4]
    650215e6:	add    r11,rax
    650215e9:	cmp    rbx,r11
    650215ec:	je     0x65021638
    650215ee:	cmp    DWORD PTR [rdi+0x4],0x0
    650215f2:	je     0x65021605
    650215f4:	call   0x6501deb0
    650215f9:	mov    rbx,rax
    650215fc:	movsxd rax,DWORD PTR [rdi+0x4]
    65021600:	add    rbx,rax
    65021603:	jmp    0x65021607
    65021605:	xor    ebx,ebx
    65021607:	call   0x6501ded0
    6502160c:	mov    r11,rax
    6502160f:	movsxd rax,DWORD PTR [rbp+0x4]
    65021613:	lea    r8,[r11+rax*1+0x10]
    65021618:	lea    rax,[rbx+0x10]
    6502161c:	sub    r8,rax
    6502161f:	nop
    65021620:	movzx  edx,BYTE PTR [rax]
    65021623:	movzx  ecx,BYTE PTR [rax+r8*1]
    65021628:	sub    edx,ecx
    6502162a:	jne    0x65021634
    6502162c:	add    rax,0x1
    65021630:	test   ecx,ecx
    65021632:	jne    0x65021620
    65021634:	test   edx,edx
    65021636:	jne    0x65021662
    65021638:	test   BYTE PTR [rbp+0x0],0x2
    6502163c:	je     0x65021643
    6502163e:	test   BYTE PTR [rdi],0x8
    65021641:	je     0x65021662
    65021643:	mov    eax,DWORD PTR [r13+0x0]
    65021647:	test   al,0x1
    65021649:	je     0x65021650
    6502164b:	test   BYTE PTR [rdi],0x1
    6502164e:	je     0x65021662
    65021650:	test   al,0x4
    65021652:	je     0x65021659
    65021654:	test   BYTE PTR [rdi],0x4
    65021657:	je     0x65021662
    65021659:	test   al,0x2
    6502165b:	je     0x650216b8
    6502165d:	test   BYTE PTR [rdi],0x2
    65021660:	jne    0x650216a4
    65021662:	sub    esi,0x1
    65021665:	add    r12,0x4
    65021669:	test   esi,esi
    6502166b:	jle    0x650216cc
    6502166d:	mov    rbx,QWORD PTR [rsp+0x68]
    65021672:	mov    rdi,QWORD PTR [rsp+0x60]
    65021677:	jmp    0x65021561
    6502167c:	mov    rbx,QWORD PTR [rsp+0x68]
    65021681:	mov    rdi,QWORD PTR [rsp+0x60]
    65021686:	mov    bpl,0x1
    65021689:	mov    BYTE PTR [rsp+0x70],bpl
    6502168e:	jmp    0x650216db
    65021690:	mov    rbx,QWORD PTR [rsp+0x68]
    65021695:	mov    rdi,QWORD PTR [rsp+0x60]
    6502169a:	mov    bpl,0x1
    6502169d:	mov    BYTE PTR [rsp+0x70],bpl
    650216a2:	jmp    0x650216db
    650216a4:	mov    rbx,QWORD PTR [rsp+0x68]
    650216a9:	mov    rdi,QWORD PTR [rsp+0x60]
    650216ae:	mov    bpl,0x1
    650216b1:	mov    BYTE PTR [rsp+0x70],bpl
    650216b6:	jmp    0x650216db
    650216b8:	mov    rbx,QWORD PTR [rsp+0x68]
    650216bd:	mov    rdi,QWORD PTR [rsp+0x60]
    650216c2:	mov    bpl,0x1
    650216c5:	mov    BYTE PTR [rsp+0x70],bpl
    650216ca:	jmp    0x650216db
    650216cc:	mov    rbx,QWORD PTR [rsp+0x68]
    650216d1:	mov    rdi,QWORD PTR [rsp+0x60]
    650216d6:	movzx  ebp,BYTE PTR [rsp+0x70]
    650216db:	add    r14d,0x1
    650216df:	add    r15,0x14
    650216e3:	cmp    r14d,DWORD PTR [rbx]
    650216e6:	jl     0x65021530
    650216ec:	mov    r15,QWORD PTR [rsp+0x20]
    650216f1:	mov    r13,QWORD PTR [rsp+0x30]
    650216f6:	mov    r12,QWORD PTR [rsp+0x38]
    650216fb:	mov    rsi,QWORD PTR [rsp+0x40]
    65021700:	mov    r14,QWORD PTR [rsp+0x28]
    65021705:	mov    al,bpl
    65021708:	mov    rbp,QWORD PTR [rsp+0x78]
    6502170d:	add    rsp,0x48
    65021711:	pop    rdi
    65021712:	pop    rbx
    65021713:	ret    
    65021714:	int3   
    65021715:	int3   
    65021716:	int3   
    65021717:	int3   
    65021718:	int3   
    65021719:	int3   
    6502171a:	int3   
    6502171b:	int3   
    6502171c:	int3   
    6502171d:	int3   
    6502171e:	int3   
    6502171f:	int3   
    65021720:	mov    QWORD PTR [rsp+0x8],rbx
    65021725:	mov    QWORD PTR [rsp+0x10],rbp
    6502172a:	mov    QWORD PTR [rsp+0x18],rsi
    6502172f:	push   rdi
    65021730:	sub    rsp,0x20
    65021734:	xor    edi,edi
    65021736:	mov    rbp,rcx
    65021739:	cmp    DWORD PTR [rcx],edi
    6502173b:	jle    0x6502178f
    6502173d:	xor    esi,esi
    6502173f:	nop
    65021740:	call   0x6501deb0
    65021745:	movsxd rcx,DWORD PTR [rbp+0x4]
    65021749:	add    rax,rsi
    6502174c:	cmp    DWORD PTR [rcx+rax*1+0x4],0x0
    65021751:	je     0x6502176e
    65021753:	call   0x6501deb0
    65021758:	movsxd rcx,DWORD PTR [rbp+0x4]
    6502175c:	add    rax,rsi
    6502175f:	movsxd rbx,DWORD PTR [rcx+rax*1+0x4]
    65021764:	call   0x6501deb0
    65021769:	add    rax,rbx
    6502176c:	jmp    0x65021770
    6502176e:	xor    eax,eax
    65021770:	lea    rdx,[rip+0x21b41]        # 0x650432b8
    65021777:	mov    rcx,rax
    6502177a:	call   0x6501dd70
    6502177f:	test   al,al
    65021781:	jne    0x650217a6
    65021783:	add    edi,0x1
    65021786:	add    rsi,0x14
    6502178a:	cmp    edi,DWORD PTR [rbp+0x0]
    6502178d:	jl     0x65021740
    6502178f:	xor    al,al
    65021791:	mov    rbx,QWORD PTR [rsp+0x30]
    65021796:	mov    rbp,QWORD PTR [rsp+0x38]
    6502179b:	mov    rsi,QWORD PTR [rsp+0x40]
    650217a0:	add    rsp,0x20
    650217a4:	pop    rdi
    650217a5:	ret    
    650217a6:	mov    al,0x1
    650217a8:	jmp    0x65021791
    650217aa:	int3   
    650217ab:	int3   
    650217ac:	int3   
    650217ad:	int3   
    650217ae:	int3   
    650217af:	int3   
    650217b0:	rex push rbx
    650217b2:	push   rsi
    650217b3:	push   rdi
    650217b4:	push   r12
    650217b6:	push   r13
    650217b8:	push   r14
    650217ba:	push   r15
    650217bc:	sub    rsp,0x70
    650217c0:	mov    rdi,rcx
    650217c3:	xor    r12d,r12d
    650217c6:	mov    DWORD PTR [rsp+0x20],r12d
    650217cb:	mov    DWORD PTR [rsp+0xb0],r12d
    650217d3:	mov    QWORD PTR [rsp+0x40],r12
    650217d8:	mov    QWORD PTR [rsp+0xc8],r12
    650217e0:	call   0x65020a30
    650217e5:	mov    r15,QWORD PTR [rax+0xf8]
    650217ec:	mov    QWORD PTR [rsp+0x28],r15
    650217f1:	call   0x65020a30
    650217f6:	mov    rax,QWORD PTR [rax+0xf0]
    650217fd:	mov    QWORD PTR [rsp+0xc0],rax
    65021805:	mov    rsi,QWORD PTR [rdi+0x50]
    65021809:	mov    QWORD PTR [rsp+0xb8],rsi
    65021811:	mov    rax,QWORD PTR [rdi+0x48]
    65021815:	mov    QWORD PTR [rsp+0x38],rax
    6502181a:	mov    rbx,QWORD PTR [rdi+0x40]
    6502181e:	mov    rax,QWORD PTR [rdi+0x30]
    65021822:	mov    QWORD PTR [rsp+0x48],rax
    65021827:	mov    r13,QWORD PTR [rdi+0x28]
    6502182b:	mov    QWORD PTR [rsp+0x50],r13
    65021830:	call   0x65020a30
    65021835:	mov    QWORD PTR [rax+0xf0],rsi
    6502183c:	call   0x65020a30
    65021841:	mov    QWORD PTR [rax+0xf8],rbx
    65021848:	call   0x65020a30
    6502184d:	mov    rdx,QWORD PTR [rax+0xf0]
    65021854:	mov    rdx,QWORD PTR [rdx+0x28]
    65021858:	lea    rcx,[rsp+0x60]
    6502185d:	call   0x6501e3b0
    65021862:	mov    r14,rax
    65021865:	mov    QWORD PTR [rsp+0x30],rax
    6502186a:	cmp    QWORD PTR [rdi+0x58],r12
    6502186e:	je     0x6502189b
    65021870:	mov    DWORD PTR [rsp+0xb0],0x1
    6502187b:	call   0x65020a30
    65021880:	mov    rbx,QWORD PTR [rax+0x138]
    65021887:	mov    QWORD PTR [rsp+0xc8],rbx
    6502188f:	call   0x65020a30
    65021894:	mov    QWORD PTR [rax+0xf0],rbx
    6502189b:	mov    r8d,0x100
    650218a1:	mov    rdx,r13
    650218a4:	mov    rcx,QWORD PTR [rsp+0x48]
    650218a9:	call   0x65033290
    650218ae:	mov    rbx,rax
    650218b1:	mov    QWORD PTR [rsp+0x40],rax
    650218b6:	mov    rdi,QWORD PTR [rsp+0xc0]
    650218be:	jmp    0x65021951
    650218c3:	mov    DWORD PTR [rsp+0x20],0x1
    650218cb:	call   0x65020a30
    650218d0:	xor    r12d,r12d
    650218d3:	mov    DWORD PTR [rax+0x2d0],r12d
    650218da:	cmp    DWORD PTR [rsp+0xb0],r12d
    650218e2:	je     0x65021915
    650218e4:	mov    dl,0x1
    650218e6:	mov    rsi,QWORD PTR [rsp+0xb8]
    650218ee:	mov    rcx,rsi
    650218f1:	call   0x65021430
    650218f6:	mov    r11,QWORD PTR [rsp+0xc8]
    650218fe:	lea    r9,[r11+0x20]
    65021902:	mov    r8d,DWORD PTR [r11+0x18]
    65021906:	mov    edx,DWORD PTR [r11+0x4]
    6502190a:	mov    ecx,DWORD PTR [r11]
    6502190d:	call   QWORD PTR [rip+0x1289d]        # 0x650341b0
    65021913:	jmp    0x65021930
    65021915:	mov    rsi,QWORD PTR [rsp+0xb8]
    6502191d:	lea    r9,[rsi+0x20]
    65021921:	mov    r8d,DWORD PTR [rsi+0x18]
    65021925:	mov    edx,DWORD PTR [rsi+0x4]
    65021928:	mov    ecx,DWORD PTR [rsi]
    6502192a:	call   QWORD PTR [rip+0x12880]        # 0x650341b0
    65021930:	mov    r12d,DWORD PTR [rsp+0x20]
    65021935:	mov    rbx,QWORD PTR [rsp+0x40]
    6502193a:	mov    r15,QWORD PTR [rsp+0x28]
    6502193f:	mov    rdi,QWORD PTR [rsp+0xc0]
    65021947:	mov    r13,QWORD PTR [rsp+0x50]
    6502194c:	mov    r14,QWORD PTR [rsp+0x30]
    65021951:	mov    rcx,r14
    65021954:	call   0x6501e450
    65021959:	test   r12d,r12d
    6502195c:	jne    0x6502199b
    6502195e:	cmp    DWORD PTR [rsi],0xe06d7363
    65021964:	jne    0x6502199b
    65021966:	cmp    DWORD PTR [rsi+0x18],0x4
    6502196a:	jne    0x6502199b
    6502196c:	mov    eax,DWORD PTR [rsi+0x20]
    6502196f:	cmp    eax,0x19930520
    65021974:	je     0x65021984
    65021976:	cmp    eax,0x19930521
    6502197b:	je     0x65021984
    6502197d:	cmp    eax,0x19930522
    65021982:	jne    0x6502199b
    65021984:	mov    rcx,QWORD PTR [rsi+0x28]
    65021988:	call   0x6501e400
    6502198d:	test   eax,eax
    6502198f:	je     0x6502199b
    65021991:	mov    dl,0x1
    65021993:	mov    rcx,rsi
    65021996:	call   0x65021430
    6502199b:	call   0x65020a30
    650219a0:	mov    QWORD PTR [rax+0xf0],rdi
    650219a7:	call   0x65020a30
    650219ac:	mov    QWORD PTR [rax+0xf8],r15
    650219b3:	mov    rax,QWORD PTR [rsp+0x38]
    650219b8:	movsxd rcx,DWORD PTR [rax+0x1c]
    650219bc:	mov    rax,QWORD PTR [r13+0x0]
    650219c0:	mov    QWORD PTR [rcx+rax*1],0xfffffffffffffffe
    650219c8:	mov    rax,rbx
    650219cb:	add    rsp,0x70
    650219cf:	pop    r15
    650219d1:	pop    r14
    650219d3:	pop    r13
    650219d5:	pop    r12
    650219d7:	pop    rdi
    650219d8:	pop    rsi
    650219d9:	pop    rbx
    650219da:	ret    
    650219db:	int3   
    650219dc:	int3   
    650219dd:	int3   
    650219de:	int3   
    650219df:	int3   
    650219e0:	rex push rbp
    650219e2:	sub    rsp,0x20
    650219e6:	mov    rbp,rdx
    650219e9:	mov    QWORD PTR [rbp+0x58],rcx
    650219ed:	lea    r8,[rbp+0x20]
    650219f1:	mov    rdx,QWORD PTR [rbp+0xb8]
    650219f8:	call   0x65021380
    650219fd:	add    rsp,0x20
    65021a01:	pop    rbp
    65021a02:	ret    
    65021a03:	int3   
    65021a04:	int3   
    65021a05:	int3   
    65021a06:	int3   
    65021a07:	int3   
    65021a08:	int3   
    65021a09:	int3   
    65021a0a:	int3   
    65021a0b:	int3   
    65021a0c:	int3   
    65021a0d:	int3   
    65021a0e:	int3   
    65021a0f:	int3   
    65021a10:	rex push rbx
    65021a12:	push   rbp
    65021a13:	sub    rsp,0x28
    65021a17:	mov    rbp,rdx
    65021a1a:	mov    rcx,QWORD PTR [rbp+0x30]
    65021a1e:	call   0x6501e450
    65021a23:	cmp    DWORD PTR [rbp+0x20],0x0
    65021a27:	jne    0x65021a6d
    65021a29:	mov    rbx,QWORD PTR [rbp+0xb8]
    65021a30:	cmp    DWORD PTR [rbx],0xe06d7363
    65021a36:	jne    0x65021a6d
    65021a38:	cmp    DWORD PTR [rbx+0x18],0x4
    65021a3c:	jne    0x65021a6d
    65021a3e:	mov    eax,DWORD PTR [rbx+0x20]
    65021a41:	cmp    eax,0x19930520
    65021a46:	je     0x65021a56
    65021a48:	cmp    eax,0x19930521
    65021a4d:	je     0x65021a56
    65021a4f:	cmp    eax,0x19930522
    65021a54:	jne    0x65021a6d
    65021a56:	mov    rcx,QWORD PTR [rbx+0x28]
    65021a5a:	call   0x6501e400
    65021a5f:	test   eax,eax
    65021a61:	je     0x65021a6d
    65021a63:	mov    dl,0x1
    65021a65:	mov    rcx,rbx
    65021a68:	call   0x65021430
    65021a6d:	call   0x65020a30
    65021a72:	mov    rcx,QWORD PTR [rbp+0xc0]
    65021a79:	mov    QWORD PTR [rax+0xf0],rcx
    65021a80:	call   0x65020a30
    65021a85:	mov    rcx,QWORD PTR [rbp+0x28]
    65021a89:	mov    QWORD PTR [rax+0xf8],rcx
    65021a90:	add    rsp,0x28
    65021a94:	pop    rbp
    65021a95:	pop    rbx
    65021a96:	ret    
    65021a97:	int3   
    65021a98:	int3   
    65021a99:	int3   
    65021a9a:	int3   
    65021a9b:	int3   
    65021a9c:	int3   
    65021a9d:	int3   
    65021a9e:	int3   
    65021a9f:	int3   
    65021aa0:	mov    QWORD PTR [rsp+0x8],rbx
    65021aa5:	mov    QWORD PTR [rsp+0x10],rsi
    65021aaa:	mov    QWORD PTR [rsp+0x18],rdi
    65021aaf:	push   r12
    65021ab1:	push   r13
    65021ab3:	push   r14
    65021ab5:	sub    rsp,0x30
    65021ab9:	mov    rdi,r9
    65021abc:	mov    r12,r8
    65021abf:	mov    rsi,rdx
    65021ac2:	mov    r14,rcx
    65021ac5:	xor    ebx,ebx
    65021ac7:	cmp    DWORD PTR [r8+0x4],ebx
    65021acb:	je     0x65021cab
    65021ad1:	movsxd r13,DWORD PTR [r8+0x4]
    65021ad5:	call   0x6501deb0
    65021ada:	lea    rdx,[r13+rax*1+0x0]
    65021adf:	test   rdx,rdx
    65021ae2:	je     0x65021cab
    65021ae8:	test   r13d,r13d
    65021aeb:	je     0x65021aff
    65021aed:	call   0x6501deb0
    65021af2:	mov    r11,rax
    65021af5:	movsxd rax,DWORD PTR [r12+0x4]
    65021afa:	add    r11,rax
    65021afd:	jmp    0x65021b02
    65021aff:	mov    r11,rbx
    65021b02:	cmp    BYTE PTR [r11+0x10],bl
    65021b06:	je     0x65021cab
    65021b0c:	movsxd rax,DWORD PTR [r12+0x8]
    65021b11:	test   eax,eax
    65021b13:	jne    0x65021b21
    65021b15:	bt     DWORD PTR [r12],0x1f
    65021b1b:	jae    0x65021cab
    65021b21:	mov    ecx,DWORD PTR [r12]
    65021b25:	bt     ecx,0x1f
    65021b29:	jb     0x65021b31
    65021b2b:	add    rax,QWORD PTR [rsi]
    65021b2e:	mov    rsi,rax
    65021b31:	test   cl,0x8
    65021b34:	je     0x65021b7b
    65021b36:	mov    edx,0x1
    65021b3b:	mov    rcx,QWORD PTR [r14+0x28]
    65021b3f:	call   0x65029990
    65021b44:	test   eax,eax
    65021b46:	je     0x65021b71
    65021b48:	mov    edx,0x1
    65021b4d:	mov    rcx,rsi
    65021b50:	call   0x65029990
    65021b55:	test   eax,eax
    65021b57:	je     0x65021b71
    65021b59:	mov    rcx,QWORD PTR [r14+0x28]
    65021b5d:	mov    QWORD PTR [rsi],rcx
    65021b60:	lea    rdx,[rdi+0x8]
    65021b64:	call   0x650214a0
    65021b69:	mov    QWORD PTR [rsi],rax
    65021b6c:	jmp    0x65021ca1
    65021b71:	call   0x650228e0
    65021b76:	jmp    0x65021ca1
    65021b7b:	test   BYTE PTR [rdi],0x1
    65021b7e:	je     0x65021be4
    65021b80:	mov    edx,0x1
    65021b85:	mov    rcx,QWORD PTR [r14+0x28]
    65021b89:	call   0x65029990
    65021b8e:	test   eax,eax
    65021b90:	je     0x65021bda
    65021b92:	mov    edx,0x1
    65021b97:	mov    rcx,rsi
    65021b9a:	call   0x65029990
    65021b9f:	test   eax,eax
    65021ba1:	je     0x65021bda
    65021ba3:	movsxd r8,DWORD PTR [rdi+0x14]
    65021ba7:	mov    rdx,QWORD PTR [r14+0x28]
    65021bab:	mov    rcx,rsi
    65021bae:	call   0x6501fd30
    65021bb3:	cmp    DWORD PTR [rdi+0x14],0x8
    65021bb7:	jne    0x65021ca1
    65021bbd:	mov    rcx,QWORD PTR [rsi]
    65021bc0:	test   rcx,rcx
    65021bc3:	je     0x65021ca1
    65021bc9:	lea    rdx,[rdi+0x8]
    65021bcd:	call   0x650214a0
    65021bd2:	mov    QWORD PTR [rsi],rax
    65021bd5:	jmp    0x65021ca1
    65021bda:	call   0x650228e0
    65021bdf:	jmp    0x65021ca1
    65021be4:	cmp    DWORD PTR [rdi+0x18],0x0
    65021be8:	je     0x65021c57
    65021bea:	call   0x6501ded0
    65021bef:	mov    rdx,rax
    65021bf2:	movsxd rax,DWORD PTR [rdi+0x18]
    65021bf6:	add    rdx,rax
    65021bf9:	je     0x65021c57
    65021bfb:	mov    edx,0x1
    65021c00:	mov    rcx,QWORD PTR [r14+0x28]
    65021c04:	call   0x65029990
    65021c09:	test   eax,eax
    65021c0b:	je     0x65021c50
    65021c0d:	mov    edx,0x1
    65021c12:	mov    rcx,rsi
    65021c15:	call   0x65029990
    65021c1a:	test   eax,eax
    65021c1c:	je     0x65021c50
    65021c1e:	cmp    DWORD PTR [rdi+0x18],0x0
    65021c22:	je     0x65021c35
    65021c24:	call   0x6501ded0
    65021c29:	mov    rcx,rax
    65021c2c:	movsxd rax,DWORD PTR [rdi+0x18]
    65021c30:	add    rcx,rax
    65021c33:	jmp    0x65021c38
    65021c35:	mov    rcx,rbx
    65021c38:	call   0x65029990
    65021c3d:	test   eax,eax
    65021c3f:	je     0x65021c50
    65021c41:	test   BYTE PTR [rdi],0x4
    65021c44:	setne  bl
    65021c47:	add    ebx,0x1
    65021c4a:	mov    DWORD PTR [rsp+0x20],ebx
    65021c4e:	jmp    0x65021ca1
    65021c50:	call   0x650228e0
    65021c55:	jmp    0x65021ca1
    65021c57:	mov    edx,0x1
    65021c5c:	mov    rcx,QWORD PTR [r14+0x28]
    65021c60:	call   0x65029990
    65021c65:	test   eax,eax
    65021c67:	je     0x65021c9b
    65021c69:	mov    edx,0x1
    65021c6e:	mov    rcx,rsi
    65021c71:	call   0x65029990
    65021c76:	test   eax,eax
    65021c78:	je     0x65021c9b
    65021c7a:	movsxd r10,DWORD PTR [rdi+0x14]
    65021c7e:	lea    rdx,[rdi+0x8]
    65021c82:	mov    rcx,QWORD PTR [r14+0x28]
    65021c86:	call   0x650214a0
    65021c8b:	mov    rdx,rax
    65021c8e:	mov    r8,r10
    65021c91:	mov    rcx,rsi
    65021c94:	call   0x6501fd30
    65021c99:	jmp    0x65021ca1
    65021c9b:	call   0x650228e0
    65021ca0:	nop
    65021ca1:	mov    eax,ebx
    65021ca3:	jmp    0x65021cad
    65021ca5:	call   0x650228b0
    65021caa:	nop
    65021cab:	xor    eax,eax
    65021cad:	mov    rbx,QWORD PTR [rsp+0x50]
    65021cb2:	mov    rsi,QWORD PTR [rsp+0x58]
    65021cb7:	mov    rdi,QWORD PTR [rsp+0x60]
    65021cbc:	add    rsp,0x30
    65021cc0:	pop    r14
    65021cc2:	pop    r13
    65021cc4:	pop    r12
    65021cc6:	ret    
    65021cc7:	int3   
    65021cc8:	int3   
    65021cc9:	int3   
    65021cca:	int3   
    65021ccb:	int3   
    65021ccc:	int3   
    65021ccd:	int3   
    65021cce:	int3   
    65021ccf:	int3   
    65021cd0:	mov    QWORD PTR [rsp+0x8],rbx
    65021cd5:	mov    QWORD PTR [rsp+0x10],rsi
    65021cda:	push   rdi
    65021cdb:	sub    rsp,0x20
    65021cdf:	mov    rbx,r9
    65021ce2:	mov    rsi,rcx
    65021ce5:	bt     DWORD PTR [r8],0x1f
    65021cea:	jae    0x65021cf1
    65021cec:	mov    rdi,rdx
    65021cef:	jmp    0x65021cf8
    65021cf1:	movsxd rdi,DWORD PTR [r8+0x8]
    65021cf5:	add    rdi,QWORD PTR [rdx]
    65021cf8:	call   0x65021aa0
    65021cfd:	sub    eax,0x1
    65021d00:	je     0x65021d3f
    65021d02:	cmp    eax,0x1
    65021d05:	jne    0x65021d6c
    65021d07:	cmp    DWORD PTR [rbx+0x18],0x0
    65021d0b:	je     0x65021d1e
    65021d0d:	call   0x6501ded0
    65021d12:	mov    r11,rax
    65021d15:	movsxd rax,DWORD PTR [rbx+0x18]
    65021d19:	add    r11,rax
    65021d1c:	jmp    0x65021d21
    65021d1e:	xor    r11d,r11d
    65021d21:	lea    rdx,[rbx+0x8]
    65021d25:	mov    rcx,QWORD PTR [rsi+0x28]
    65021d29:	call   0x650214a0
    65021d2e:	mov    rdx,rax
    65021d31:	mov    r8d,0x1
    65021d37:	mov    rcx,rdi
    65021d3a:	call   r11
    65021d3d:	jmp    0x65021d6c
    65021d3f:	cmp    DWORD PTR [rbx+0x18],0x0
    65021d43:	je     0x65021d53
    65021d45:	call   0x6501ded0
    65021d4a:	movsxd r11,DWORD PTR [rbx+0x18]
    65021d4e:	add    r11,rax
    65021d51:	jmp    0x65021d56
    65021d53:	xor    r11d,r11d
    65021d56:	lea    rdx,[rbx+0x8]
    65021d5a:	mov    rcx,QWORD PTR [rsi+0x28]
    65021d5e:	call   0x650214a0
    65021d63:	mov    rdx,rax
    65021d66:	mov    rcx,rdi
    65021d69:	call   r11
    65021d6c:	jmp    0x65021d74
    65021d6e:	call   0x650228b0
    65021d73:	nop
    65021d74:	mov    rbx,QWORD PTR [rsp+0x30]
    65021d79:	mov    rsi,QWORD PTR [rsp+0x38]
    65021d7e:	add    rsp,0x20
    65021d82:	pop    rdi
    65021d83:	ret    
    65021d84:	int3   
    65021d85:	int3   
    65021d86:	int3   
    65021d87:	int3   
    65021d88:	int3   
    65021d89:	int3   
    65021d8a:	int3   
    65021d8b:	int3   
    65021d8c:	int3   
    65021d8d:	int3   
    65021d8e:	int3   
    65021d8f:	int3   
    65021d90:	mov    rax,rsp
    65021d93:	mov    QWORD PTR [rax+0x18],r8
    65021d97:	push   rsi
    65021d98:	push   r12
    65021d9a:	push   r14
    65021d9c:	push   r15
    65021d9e:	sub    rsp,0x78
    65021da2:	cmp    DWORD PTR [rcx],0x80000003
    65021da8:	mov    r14,r9
    65021dab:	mov    rsi,r8
    65021dae:	mov    r15,rdx
    65021db1:	mov    r12,rcx
    65021db4:	je     0x65021ffb
    65021dba:	mov    QWORD PTR [rax+0x10],rbx
    65021dbe:	mov    QWORD PTR [rax-0x30],rdi
    65021dc2:	mov    QWORD PTR [rax-0x38],r13
    65021dc6:	call   0x65020a30
    65021dcb:	mov    edi,DWORD PTR [rsp+0xd0]
    65021dd2:	mov    r13,QWORD PTR [rsp+0xc0]
    65021dda:	cmp    QWORD PTR [rax+0xe0],0x0
    65021de2:	je     0x65021e33
    65021de4:	call   0x65020a30
    65021de9:	mov    rbx,rax
    65021dec:	call   0x650205f0
    65021df1:	cmp    QWORD PTR [rbx+0xe0],rax
    65021df8:	je     0x65021e33
    65021dfa:	cmp    DWORD PTR [r12],0xe0434f4d
    65021e02:	je     0x65021e33
    65021e04:	mov    rax,QWORD PTR [rsp+0xd8]
    65021e0c:	mov    r9,r14
    65021e0f:	mov    r8,rsi
    65021e12:	mov    QWORD PTR [rsp+0x30],rax
    65021e17:	mov    rdx,r15
    65021e1a:	mov    rcx,r12
    65021e1d:	mov    DWORD PTR [rsp+0x28],edi
    65021e21:	mov    QWORD PTR [rsp+0x20],r13
    65021e26:	call   0x6501e1c0
    65021e2b:	test   eax,eax
    65021e2d:	jne    0x65021fe9
    65021e33:	cmp    DWORD PTR [r13+0xc],0x0
    65021e38:	mov    QWORD PTR [rsp+0x70],rbp
    65021e3d:	jne    0x65021e44
    65021e3f:	call   0x650228e0
    65021e44:	mov    ebp,DWORD PTR [rsp+0xc8]
    65021e4b:	lea    rax,[rsp+0x50]
    65021e50:	mov    QWORD PTR [rsp+0x30],r14
    65021e55:	mov    QWORD PTR [rsp+0x28],rax
    65021e5a:	lea    rax,[rsp+0xa0]
    65021e62:	mov    r8d,edi
    65021e65:	mov    r9d,ebp
    65021e68:	mov    rdx,r13
    65021e6b:	mov    rcx,r15
    65021e6e:	mov    QWORD PTR [rsp+0x20],rax
    65021e73:	call   0x6501e270
    65021e78:	mov    rsi,rax
    65021e7b:	mov    eax,DWORD PTR [rsp+0xa0]
    65021e82:	cmp    eax,DWORD PTR [rsp+0x50]
    65021e86:	jae    0x65021fe4
    65021e8c:	data16 data16 xchg ax,ax
    65021e90:	cmp    ebp,DWORD PTR [rsi]
    65021e92:	jl     0x65021fcc
    65021e98:	cmp    ebp,DWORD PTR [rsi+0x4]
    65021e9b:	jg     0x65021fcc
    65021ea1:	call   0x6501deb0
    65021ea6:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021eaa:	lea    rdx,[rcx+rcx*4]
    65021eae:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021eb2:	lea    rdx,[rcx+rdx*4]
    65021eb6:	cmp    DWORD PTR [rax+rdx*1-0x10],0x0
    65021ebb:	je     0x65021f31
    65021ebd:	call   0x6501deb0
    65021ec2:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021ec6:	lea    rdx,[rcx+rcx*4]
    65021eca:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021ece:	lea    rdx,[rcx+rdx*4]
    65021ed2:	movsxd rbx,DWORD PTR [rax+rdx*1-0x10]
    65021ed7:	call   0x6501deb0
    65021edc:	lea    rcx,[rax+rbx*1]
    65021ee0:	test   rcx,rcx
    65021ee3:	je     0x65021f31
    65021ee5:	call   0x6501deb0
    65021eea:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021eee:	lea    rdx,[rcx+rcx*4]
    65021ef2:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021ef6:	lea    rdx,[rcx+rdx*4]
    65021efa:	cmp    DWORD PTR [rax+rdx*1-0x10],0x0
    65021eff:	je     0x65021f25
    65021f01:	call   0x6501deb0
    65021f06:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021f0a:	lea    rdx,[rcx+rcx*4]
    65021f0e:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021f12:	lea    rdx,[rcx+rdx*4]
    65021f16:	movsxd rbx,DWORD PTR [rax+rdx*1-0x10]
    65021f1b:	call   0x6501deb0
    65021f20:	add    rax,rbx
    65021f23:	jmp    0x65021f27
    65021f25:	xor    eax,eax
    65021f27:	cmp    BYTE PTR [rax+0x10],0x0
    65021f2b:	jne    0x65021fc5
    65021f31:	call   0x6501deb0
    65021f36:	movsxd rcx,DWORD PTR [rsi+0xc]
    65021f3a:	lea    rdx,[rcx+rcx*4]
    65021f3e:	movsxd rcx,DWORD PTR [rsi+0x10]
    65021f42:	lea    rdx,[rcx+rdx*4]
    65021f46:	test   BYTE PTR [rax+rdx*1-0x14],0x40
    65021f4b:	jne    0x65021fc5
    65021f4d:	call   0x6501deb0
    65021f52:	mov    ecx,DWORD PTR [rsi+0xc]
    65021f55:	lea    r9,[rsp+0x58]
    65021f5a:	sub    ecx,0x1
    65021f5d:	mov    r8,r13
    65021f60:	movsxd rcx,ecx
    65021f63:	lea    rdx,[rcx+rcx*4]
    65021f67:	mov    rcx,r15
    65021f6a:	lea    rdi,[rax+rdx*4]
    65021f6e:	movsxd rax,DWORD PTR [rsi+0x10]
    65021f72:	mov    rdx,r14
    65021f75:	add    rdi,rax
    65021f78:	call   0x6501dda0
    65021f7d:	mov    rbx,rax
    65021f80:	call   0x6501deb0
    65021f85:	movsxd rcx,DWORD PTR [rdi+0xc]
    65021f89:	mov    r8,QWORD PTR [rsp+0xb0]
    65021f91:	add    rax,rcx
    65021f94:	mov    ecx,DWORD PTR [rsi]
    65021f96:	mov    BYTE PTR [rsp+0x40],0x0
    65021f9b:	mov    QWORD PTR [rsp+0x38],r14
    65021fa0:	mov    QWORD PTR [rsp+0x30],r13
    65021fa5:	mov    DWORD PTR [rsp+0x28],ecx
    65021fa9:	mov    r9,rbx
    65021fac:	mov    rdx,r12
    65021faf:	mov    rcx,r15
    65021fb2:	mov    QWORD PTR [rsp+0x20],rax
    65021fb7:	call   0x6501e4c0
    65021fbc:	mov    eax,DWORD PTR [rsp+0xa0]
    65021fc3:	jmp    0x65021fcc
    65021fc5:	mov    eax,DWORD PTR [rsp+0xa0]
    65021fcc:	add    eax,0x1
    65021fcf:	add    rsi,0x14
    65021fd3:	cmp    eax,DWORD PTR [rsp+0x50]
    65021fd7:	mov    DWORD PTR [rsp+0xa0],eax
    65021fde:	jb     0x65021e90
    65021fe4:	mov    rbp,QWORD PTR [rsp+0x70]
    65021fe9:	mov    rdi,QWORD PTR [rsp+0x68]
    65021fee:	mov    rbx,QWORD PTR [rsp+0xa8]
    65021ff6:	mov    r13,QWORD PTR [rsp+0x60]
    65021ffb:	add    rsp,0x78
    65021fff:	pop    r15
    65022001:	pop    r14
    65022003:	pop    r12
    65022005:	pop    rsi
    65022006:	ret    
    65022007:	int3   
    65022008:	int3   
    65022009:	int3   
    6502200a:	int3   
    6502200b:	int3   
    6502200c:	int3   
    6502200d:	int3   
    6502200e:	int3   
    6502200f:	int3   
    65022010:	mov    QWORD PTR [rsp+0x20],r9
    65022015:	mov    QWORD PTR [rsp+0x18],r8
    6502201a:	mov    QWORD PTR [rsp+0x10],rdx
    6502201f:	push   rbx
    65022020:	push   rbp
    65022021:	push   rdi
    65022022:	push   r12
    65022024:	push   r13
    65022026:	push   r14
    65022028:	push   r15
    6502202a:	sub    rsp,0x570
    65022031:	mov    rbp,QWORD PTR [rsp+0x5d0]
    65022039:	mov    r13,rdx
    6502203c:	mov    r14,rcx
    6502203f:	xor    r15b,r15b
    65022042:	mov    rdx,r9
    65022045:	mov    rcx,rbp
    65022048:	mov    r12,r9
    6502204b:	mov    rbx,r8
    6502204e:	mov    BYTE PTR [rsp+0x5b0],r15b
    65022056:	call   0x65020f40
    6502205b:	lea    r9,[rsp+0x68]
    65022060:	mov    r8,rbp
    65022063:	mov    rdx,r12
    65022066:	mov    rcx,r13
    65022069:	mov    edi,eax
    6502206b:	mov    DWORD PTR [rsp+0x58],eax
    6502206f:	call   0x6501dda0
    65022074:	mov    r8,rbp
    65022077:	mov    rdx,r12
    6502207a:	mov    rcx,r13
    6502207d:	call   0x650210c0
    65022082:	cmp    edi,eax
    65022084:	jle    0x650220ac
    65022086:	lea    rcx,[rsp+0x68]
    6502208b:	mov    r9d,edi
    6502208e:	mov    r8,rbp
    65022091:	mov    rdx,r12
    65022094:	call   0x65021070
    65022099:	mov    r9d,edi
    6502209c:	mov    r8,rbp
    6502209f:	mov    rdx,r12
    650220a2:	mov    rcx,r13
    650220a5:	call   0x65021080
    650220aa:	jmp    0x650220c0
    650220ac:	mov    r8,rbp
    650220af:	mov    rdx,r12
    650220b2:	mov    rcx,r13
    650220b5:	call   0x650210c0
    650220ba:	mov    edi,eax
    650220bc:	mov    DWORD PTR [rsp+0x58],eax
    650220c0:	cmp    edi,0xffffffff
    650220c3:	jl     0x650220ca
    650220c5:	cmp    edi,DWORD PTR [rbp+0x4]
    650220c8:	jl     0x650220cf
    650220ca:	call   0x650228e0
    650220cf:	cmp    DWORD PTR [r14],0xe06d7363
    650220d6:	jne    0x65022237
    650220dc:	cmp    DWORD PTR [r14+0x18],0x4
    650220e1:	jne    0x65022237
    650220e7:	mov    eax,DWORD PTR [r14+0x20]
    650220eb:	cmp    eax,0x19930520
    650220f0:	je     0x65022104
    650220f2:	cmp    eax,0x19930521
    650220f7:	je     0x65022104
    650220f9:	cmp    eax,0x19930522
    650220fe:	jne    0x65022237
    65022104:	cmp    QWORD PTR [r14+0x30],0x0
    65022109:	jne    0x65022237
    6502210f:	call   0x65020a30
    65022114:	cmp    QWORD PTR [rax+0xf0],0x0
    6502211c:	je     0x650225f6
    65022122:	call   0x65020a30
    65022127:	mov    r14,QWORD PTR [rax+0xf0]
    6502212e:	call   0x65020a30
    65022133:	mov    rcx,QWORD PTR [r14+0x38]
    65022137:	mov    rbx,QWORD PTR [rax+0xf8]
    6502213e:	mov    QWORD PTR [rsp+0x5c0],rbx
    65022146:	call   0x6501df10
    6502214b:	mov    edx,0x1
    65022150:	mov    rcx,r14
    65022153:	call   0x65029990
    65022158:	test   eax,eax
    6502215a:	jne    0x65022161
    6502215c:	call   0x650228e0
    65022161:	cmp    DWORD PTR [r14],0xe06d7363
    65022168:	jne    0x65022196
    6502216a:	cmp    DWORD PTR [r14+0x18],0x4
    6502216f:	jne    0x65022196
    65022171:	mov    eax,DWORD PTR [r14+0x20]
    65022175:	cmp    eax,0x19930520
    6502217a:	je     0x6502218a
    6502217c:	cmp    eax,0x19930521
    65022181:	je     0x6502218a
    65022183:	cmp    eax,0x19930522
    65022188:	jne    0x65022196
    6502218a:	cmp    QWORD PTR [r14+0x30],0x0
    6502218f:	jne    0x65022196
    65022191:	call   0x650228e0
    65022196:	call   0x65020a30
    6502219b:	cmp    QWORD PTR [rax+0x108],0x0
    650221a3:	je     0x65022237
    650221a9:	call   0x65020a30
    650221ae:	mov    rbx,QWORD PTR [rax+0x108]
    650221b5:	call   0x65020a30
    650221ba:	mov    rdx,rbx
    650221bd:	mov    rcx,r14
    650221c0:	mov    QWORD PTR [rax+0x108],0x0
    650221cb:	call   0x650214d0
    650221d0:	test   al,al
    650221d2:	jne    0x6502222f
    650221d4:	mov    rcx,rbx
    650221d7:	call   0x65021720
    650221dc:	test   al,al
    650221de:	je     0x65022229
    650221e0:	mov    dl,0x1
    650221e2:	mov    rcx,r14
    650221e5:	call   0x65021430
    650221ea:	lea    r11,[rip+0x13227]        # 0x65035418
    650221f1:	lea    rdx,[rsp+0x5b0]
    650221f9:	lea    rcx,[rsp+0x78]
    650221fe:	mov    QWORD PTR [rsp+0x5b0],r11
    65022206:	call   0x6501d330
    6502220b:	lea    r11,[rip+0x131f6]        # 0x65035408
    65022212:	lea    rdx,[rip+0x1f08f]        # 0x650412a8
    65022219:	lea    rcx,[rsp+0x78]
    6502221e:	mov    QWORD PTR [rsp+0x78],r11
    65022223:	call   0x6501dc60
    65022228:	int3   
    65022229:	call   0x650228b0
    6502222e:	int3   
    6502222f:	mov    rbx,QWORD PTR [rsp+0x5c0]
    65022237:	cmp    DWORD PTR [r14],0xe06d7363
    6502223e:	jne    0x65022609
    65022244:	cmp    DWORD PTR [r14+0x18],0x4
    65022249:	jne    0x65022609
    6502224f:	mov    eax,DWORD PTR [r14+0x20]
    65022253:	cmp    eax,0x19930520
    65022258:	je     0x6502226c
    6502225a:	cmp    eax,0x19930521
    6502225f:	je     0x6502226c
    65022261:	cmp    eax,0x19930522
    65022266:	jne    0x65022609
    6502226c:	cmp    DWORD PTR [rbp+0xc],0x0
    65022270:	jbe    0x65022527
    65022276:	mov    r8d,DWORD PTR [rsp+0x5e0]
    6502227e:	lea    rax,[rsp+0x54]
    65022283:	mov    QWORD PTR [rsp+0x30],r12
    65022288:	mov    QWORD PTR [rsp+0x28],rax
    6502228d:	lea    rax,[rsp+0x50]
    65022292:	mov    r9d,edi
    65022295:	mov    rdx,rbp
    65022298:	mov    rcx,r13
    6502229b:	mov    QWORD PTR [rsp+0x20],rax
    650222a0:	call   0x6501e270
    650222a5:	mov    ecx,DWORD PTR [rsp+0x50]
    650222a9:	mov    edx,DWORD PTR [rsp+0x54]
    650222ad:	cmp    ecx,edx
    650222af:	mov    rbx,rax
    650222b2:	mov    QWORD PTR [rsp+0x60],rax
    650222b7:	jae    0x65022527
    650222bd:	mov    QWORD PTR [rsp+0x568],rsi
    650222c5:	cmp    DWORD PTR [rbx],edi
    650222c7:	jg     0x650224fe
    650222cd:	cmp    edi,DWORD PTR [rbx+0x4]
    650222d0:	jg     0x650224fe
    650222d6:	call   0x6501deb0
    650222db:	movsxd rdi,DWORD PTR [rbx+0x10]
    650222df:	mov    r15d,DWORD PTR [rbx+0xc]
    650222e3:	add    rdi,rax
    650222e6:	test   r15d,r15d
    650222e9:	jle    0x650224ea
    650222ef:	nop
    650222f0:	call   0x6501ded0
    650222f5:	mov    rcx,QWORD PTR [r14+0x30]
    650222f9:	movsxd rdx,DWORD PTR [rcx+0xc]
    650222fd:	lea    r13,[rax+rdx*1+0x4]
    65022302:	call   0x6501ded0
    65022307:	mov    rcx,QWORD PTR [r14+0x30]
    6502230b:	movsxd rdx,DWORD PTR [rcx+0xc]
    6502230f:	mov    ebp,DWORD PTR [rax+rdx*1]
    65022312:	test   ebp,ebp
    65022314:	jle    0x65022410
    6502231a:	data16 xchg ax,ax
    6502231d:	data16 xchg ax,ax
    65022320:	call   0x6501ded0
    65022325:	mov    r12,QWORD PTR [r14+0x30]
    65022329:	mov    rsi,rax
    6502232c:	movsxd rax,DWORD PTR [r13+0x0]
    65022330:	add    rsi,rax
    65022333:	cmp    DWORD PTR [rdi+0x4],0x0
    65022337:	je     0x6502244c
    6502233d:	movsxd rbx,DWORD PTR [rdi+0x4]
    65022341:	call   0x6501deb0
    65022346:	add    rax,rbx
    65022349:	je     0x6502244c
    6502234f:	test   ebx,ebx
    65022351:	je     0x65022361
    65022353:	movsxd rbx,DWORD PTR [rdi+0x4]
    65022357:	call   0x6501deb0
    6502235c:	add    rax,rbx
    6502235f:	jmp    0x65022363
    65022361:	xor    eax,eax
    65022363:	cmp    BYTE PTR [rax+0x10],0x0
    65022367:	je     0x6502244c
    6502236d:	test   ebx,ebx
    6502236f:	je     0x6502237f
    65022371:	call   0x6501deb0
    65022376:	movsxd rbx,DWORD PTR [rdi+0x4]
    6502237a:	add    rbx,rax
    6502237d:	jmp    0x65022381
    6502237f:	xor    ebx,ebx
    65022381:	call   0x6501ded0
    65022386:	movsxd rcx,DWORD PTR [rsi+0x4]
    6502238a:	add    rax,rcx
    6502238d:	cmp    rbx,rax
    65022390:	je     0x650223d8
    65022392:	cmp    DWORD PTR [rdi+0x4],0x0
    65022396:	je     0x650223a6
    65022398:	call   0x6501deb0
    6502239d:	movsxd rbx,DWORD PTR [rdi+0x4]
    650223a1:	add    rbx,rax
    650223a4:	jmp    0x650223a8
    650223a6:	xor    ebx,ebx
    650223a8:	call   0x6501ded0
    650223ad:	movsxd rcx,DWORD PTR [rsi+0x4]
    650223b1:	lea    r8,[rax+rcx*1+0x10]
    650223b6:	lea    rcx,[rbx+0x10]
    650223ba:	sub    r8,rcx
    650223bd:	data16 xchg ax,ax
    650223c0:	movzx  edx,BYTE PTR [rcx]
    650223c3:	movzx  eax,BYTE PTR [rcx+r8*1]
    650223c8:	sub    edx,eax
    650223ca:	jne    0x650223d4
    650223cc:	add    rcx,0x1
    650223d0:	test   eax,eax
    650223d2:	jne    0x650223c0
    650223d4:	test   edx,edx
    650223d6:	jne    0x65022401
    650223d8:	test   BYTE PTR [rsi],0x2
    650223db:	je     0x650223e2
    650223dd:	test   BYTE PTR [rdi],0x8
    650223e0:	je     0x65022401
    650223e2:	mov    eax,DWORD PTR [r12]
    650223e6:	test   al,0x1
    650223e8:	je     0x650223ef
    650223ea:	test   BYTE PTR [rdi],0x1
    650223ed:	je     0x65022401
    650223ef:	test   al,0x4
    650223f1:	je     0x650223f8
    650223f3:	test   BYTE PTR [rdi],0x4
    650223f6:	je     0x65022401
    650223f8:	test   al,0x2
    650223fa:	je     0x6502244c
    650223fc:	test   BYTE PTR [rdi],0x2
    650223ff:	jne    0x6502244c
    65022401:	sub    ebp,0x1
    65022404:	add    r13,0x4
    65022408:	test   ebp,ebp
    6502240a:	jg     0x65022320
    65022410:	sub    r15d,0x1
    65022414:	add    rdi,0x14
    65022418:	test   r15d,r15d
    6502241b:	jg     0x650222f0
    65022421:	mov    rbx,QWORD PTR [rsp+0x60]
    65022426:	mov    rbp,QWORD PTR [rsp+0x5d0]
    6502242e:	mov    r12,QWORD PTR [rsp+0x5c8]
    65022436:	mov    r13,QWORD PTR [rsp+0x5b8]
    6502243e:	movzx  r15d,BYTE PTR [rsp+0x5b0]
    65022447:	jmp    0x650224f2
    6502244c:	mov    rbp,QWORD PTR [rsp+0x5d0]
    65022454:	mov    r12,QWORD PTR [rsp+0x5c8]
    6502245c:	mov    r13,QWORD PTR [rsp+0x5b8]
    65022464:	lea    r9,[rsp+0x70]
    65022469:	mov    r15b,0x1
    6502246c:	mov    r8,rbp
    6502246f:	mov    rdx,r12
    65022472:	mov    rcx,r13
    65022475:	mov    BYTE PTR [rsp+0x5b0],r15b
    6502247d:	call   0x6501dda0
    65022482:	test   rsi,rsi
    65022485:	mov    rbx,rax
    65022488:	je     0x6502249b
    6502248a:	mov    r9,rsi
    6502248d:	mov    r8,rdi
    65022490:	mov    rdx,rax
    65022493:	mov    rcx,r14
    65022496:	call   0x65021cd0
    6502249b:	call   0x6501deb0
    650224a0:	movsxd rcx,DWORD PTR [rdi+0xc]
    650224a4:	mov    r8,QWORD PTR [rsp+0x5c0]
    650224ac:	add    rax,rcx
    650224af:	movzx  ecx,BYTE PTR [rsp+0x5d8]
    650224b7:	mov    r9,rbx
    650224ba:	mov    BYTE PTR [rsp+0x40],cl
    650224be:	mov    rcx,QWORD PTR [rsp+0x60]
    650224c3:	mov    QWORD PTR [rsp+0x38],r12
    650224c8:	mov    ecx,DWORD PTR [rcx]
    650224ca:	mov    QWORD PTR [rsp+0x30],rbp
    650224cf:	mov    rdx,r14
    650224d2:	mov    DWORD PTR [rsp+0x28],ecx
    650224d6:	mov    rcx,r13
    650224d9:	mov    QWORD PTR [rsp+0x20],rax
    650224de:	call   0x6501e4c0
    650224e3:	mov    rbx,QWORD PTR [rsp+0x60]
    650224e8:	jmp    0x650224f2
    650224ea:	mov    r15b,BYTE PTR [rsp+0x5b0]
    650224f2:	mov    edx,DWORD PTR [rsp+0x54]
    650224f6:	mov    ecx,DWORD PTR [rsp+0x50]
    650224fa:	mov    edi,DWORD PTR [rsp+0x58]
    650224fe:	add    ecx,0x1
    65022501:	add    rbx,0x14
    65022505:	cmp    ecx,edx
    65022507:	mov    DWORD PTR [rsp+0x50],ecx
    6502250b:	mov    QWORD PTR [rsp+0x60],rbx
    65022510:	jb     0x650222c5
    65022516:	test   r15b,r15b
    65022519:	mov    rsi,QWORD PTR [rsp+0x568]
    65022521:	jne    0x650225e2
    65022527:	mov    eax,DWORD PTR [rbp+0x0]
    6502252a:	and    eax,0x1fffffff
    6502252f:	cmp    eax,0x19930521
    65022534:	jb     0x650225e2
    6502253a:	cmp    DWORD PTR [rbp+0x20],0x0
    6502253e:	je     0x650225e2
    65022544:	movsxd rbx,DWORD PTR [rbp+0x20]
    65022548:	call   0x6501deb0
    6502254d:	add    rax,rbx
    65022550:	je     0x650225e2
    65022556:	test   ebx,ebx
    65022558:	je     0x6502256b
    6502255a:	call   0x6501deb0
    6502255f:	mov    rdx,rax
    65022562:	movsxd rax,DWORD PTR [rbp+0x20]
    65022566:	add    rdx,rax
    65022569:	jmp    0x6502256d
    6502256b:	xor    edx,edx
    6502256d:	mov    rcx,r14
    65022570:	call   0x650214d0
    65022575:	test   al,al
    65022577:	jne    0x650225e2
    65022579:	lea    r9,[rsp+0x5b0]
    65022581:	mov    r8,rbp
    65022584:	mov    rdx,r12
    65022587:	mov    rcx,r13
    6502258a:	call   0x6501dda0
    6502258f:	mov    rbx,rax
    65022592:	call   0x65020a30
    65022597:	mov    r8,QWORD PTR [rsp+0x5c0]
    6502259f:	lea    rcx,[rsp+0x90]
    650225a7:	mov    r9,rbx
    650225aa:	mov    rdx,r14
    650225ad:	mov    QWORD PTR [rax+0x110],rcx
    650225b4:	mov    al,BYTE PTR [rsp+0x5d8]
    650225bb:	mov    rcx,r13
    650225be:	mov    BYTE PTR [rsp+0x40],al
    650225c2:	mov    QWORD PTR [rsp+0x38],r12
    650225c7:	mov    QWORD PTR [rsp+0x30],rbp
    650225cc:	mov    DWORD PTR [rsp+0x28],0xffffffff
    650225d4:	mov    QWORD PTR [rsp+0x20],0x0
    650225dd:	call   0x6501e4c0
    650225e2:	call   0x65020a30
    650225e7:	cmp    QWORD PTR [rax+0x108],0x0
    650225ef:	je     0x650225f6
    650225f1:	call   0x650228e0
    650225f6:	add    rsp,0x570
    650225fd:	pop    r15
    650225ff:	pop    r14
    65022601:	pop    r13
    65022603:	pop    r12
    65022605:	pop    rdi
    65022606:	pop    rbp
    65022607:	pop    rbx
    65022608:	ret    
    65022609:	cmp    DWORD PTR [rbp+0xc],0x0
    6502260d:	jbe    0x650225e2
    6502260f:	cmp    BYTE PTR [rsp+0x5d8],0x0
    65022617:	jne    0x6502264d
    65022619:	mov    rax,QWORD PTR [rsp+0x5e8]
    65022621:	mov    r9,r12
    65022624:	mov    r8,rbx
    65022627:	mov    QWORD PTR [rsp+0x38],rax
    6502262c:	mov    eax,DWORD PTR [rsp+0x5e0]
    65022633:	mov    rdx,r13
    65022636:	mov    DWORD PTR [rsp+0x30],eax
    6502263a:	mov    rcx,r14
    6502263d:	mov    DWORD PTR [rsp+0x28],edi
    65022641:	mov    QWORD PTR [rsp+0x20],rbp
    65022646:	call   0x65021d90
    6502264b:	jmp    0x650225e2
    6502264d:	call   0x650228b0
    65022652:	int3   
    65022653:	int3   
    65022654:	int3   
    65022655:	int3   
    65022656:	int3   
    65022657:	int3   
    65022658:	int3   
    65022659:	int3   
    6502265a:	int3   
    6502265b:	int3   
    6502265c:	int3   
    6502265d:	int3   
    6502265e:	int3   
    6502265f:	int3   
    65022660:	rex push rbx
    65022662:	sub    rsp,0x20
    65022666:	mov    rbx,rcx
    65022669:	call   0x6501d3e0
    6502266e:	lea    r11,[rip+0x12d93]        # 0x65035408
    65022675:	mov    QWORD PTR [rbx],r11
    65022678:	mov    rax,rbx
    6502267b:	add    rsp,0x20
    6502267f:	pop    rbx
    65022680:	ret    
    65022681:	int3   
    65022682:	int3   
    65022683:	int3   
    65022684:	int3   
    65022685:	int3   
    65022686:	int3   
    65022687:	int3   
    65022688:	int3   
    65022689:	int3   
    6502268a:	int3   
    6502268b:	int3   
    6502268c:	int3   
    6502268d:	int3   
    6502268e:	int3   
    6502268f:	int3   
    65022690:	mov    QWORD PTR [rsp+0x8],rbx
    65022695:	mov    QWORD PTR [rsp+0x10],rbp
    6502269a:	mov    QWORD PTR [rsp+0x18],rsi
    6502269f:	mov    QWORD PTR [rsp+0x20],rdi
    650226a4:	push   r12
    650226a6:	sub    rsp,0x40
    650226aa:	mov    rbp,r9
    650226ad:	mov    r12,r8
    650226b0:	mov    rsi,rdx
    650226b3:	mov    rbx,rcx
    650226b6:	call   0x65020a30
    650226bb:	mov    rdi,QWORD PTR [rsp+0x70]
    650226c0:	cmp    DWORD PTR [rax+0x2d0],0x0
    650226c7:	jne    0x65022708
    650226c9:	mov    eax,DWORD PTR [rbx]
    650226cb:	cmp    eax,0xe06d7363
    650226d0:	je     0x65022708
    650226d2:	cmp    eax,0x80000029
    650226d7:	jne    0x650226e9
    650226d9:	cmp    DWORD PTR [rbx+0x18],0xf
    650226dd:	jne    0x650226e9
    650226df:	cmp    QWORD PTR [rbx+0x60],0x19930520
    650226e7:	je     0x65022708
    650226e9:	cmp    eax,0x80000026
    650226ee:	je     0x65022708
    650226f0:	mov    eax,DWORD PTR [rdi]
    650226f2:	and    eax,0x1fffffff
    650226f7:	cmp    eax,0x19930522
    650226fc:	jb     0x65022708
    650226fe:	test   BYTE PTR [rdi+0x24],0x1
    65022702:	jne    0x6502288b
    65022708:	mov    eax,DWORD PTR [rbx+0x4]
    6502270b:	test   al,0x66
    6502270d:	je     0x650227b7
    65022713:	mov    ecx,DWORD PTR [rdi+0x4]
    65022716:	test   ecx,ecx
    65022718:	je     0x6502288b
    6502271e:	cmp    DWORD PTR [rsp+0x78],0x0
    65022723:	jne    0x6502288b
    65022729:	and    eax,0x20
    6502272c:	je     0x65022770
    6502272e:	cmp    DWORD PTR [rbx],0x80000026
    65022734:	jne    0x65022770
    65022736:	mov    r8,QWORD PTR [r12+0xf8]
    6502273e:	mov    rdx,rbp
    65022741:	mov    rcx,rdi
    65022744:	call   0x65020eb0
    65022749:	cmp    eax,0xffffffff
    6502274c:	mov    ebx,eax
    6502274e:	jl     0x65022755
    65022750:	cmp    eax,DWORD PTR [rdi+0x4]
    65022753:	jl     0x6502275a
    65022755:	call   0x650228e0
    6502275a:	mov    r9d,ebx
    6502275d:	mov    r8,rdi
    65022760:	mov    rdx,rbp
    65022763:	mov    rcx,rsi
    65022766:	call   0x65021190
    6502276b:	jmp    0x6502288b
    65022770:	test   eax,eax
    65022772:	je     0x650227a4
    65022774:	cmp    DWORD PTR [rbx],0x80000029
    6502277a:	jne    0x650227a4
    6502277c:	mov    esi,DWORD PTR [rbx+0x38]
    6502277f:	cmp    esi,0xffffffff
    65022782:	jl     0x65022788
    65022784:	cmp    esi,ecx
    65022786:	jl     0x6502278d
    65022788:	call   0x650228e0
    6502278d:	mov    rcx,QWORD PTR [rbx+0x28]
    65022791:	mov    r9d,esi
    65022794:	mov    r8,rdi
    65022797:	mov    rdx,rbp
    6502279a:	call   0x65021190
    6502279f:	jmp    0x6502288b
    650227a4:	mov    r8,rdi
    650227a7:	mov    rdx,rbp
    650227aa:	mov    rcx,rsi
    650227ad:	call   0x6501df30
    650227b2:	jmp    0x6502288b
    650227b7:	cmp    DWORD PTR [rdi+0xc],0x0
    650227bb:	jne    0x650227eb
    650227bd:	mov    eax,DWORD PTR [rdi]
    650227bf:	and    eax,0x1fffffff
    650227c4:	cmp    eax,0x19930521
    650227c9:	jb     0x6502288b
    650227cf:	cmp    DWORD PTR [rdi+0x20],0x0
    650227d3:	je     0x6502288b
    650227d9:	call   0x6501deb0
    650227de:	movsxd rcx,DWORD PTR [rdi+0x20]
    650227e2:	add    rax,rcx
    650227e5:	je     0x6502288b
    650227eb:	cmp    DWORD PTR [rbx],0xe06d7363
    650227f1:	jne    0x65022854
    650227f3:	cmp    DWORD PTR [rbx+0x18],0x3
    650227f7:	jb     0x65022854
    650227f9:	cmp    DWORD PTR [rbx+0x20],0x19930522
    65022800:	jbe    0x65022854
    65022802:	mov    rax,QWORD PTR [rbx+0x30]
    65022806:	cmp    DWORD PTR [rax+0x8],0x0
    6502280a:	je     0x65022854
    6502280c:	call   0x6501ded0
    65022811:	mov    rcx,QWORD PTR [rbx+0x30]
    65022815:	movsxd rdx,DWORD PTR [rcx+0x8]
    65022819:	add    rax,rdx
    6502281c:	je     0x65022854
    6502281e:	movzx  ecx,BYTE PTR [rsp+0x88]
    65022826:	mov    r9,rbp
    65022829:	mov    r8,r12
    6502282c:	mov    DWORD PTR [rsp+0x38],ecx
    65022830:	mov    rcx,QWORD PTR [rsp+0x80]
    65022838:	mov    rdx,rsi
    6502283b:	mov    QWORD PTR [rsp+0x30],rcx
    65022840:	mov    ecx,DWORD PTR [rsp+0x78]
    65022844:	mov    DWORD PTR [rsp+0x28],ecx
    65022848:	mov    rcx,rbx
    6502284b:	mov    QWORD PTR [rsp+0x20],rdi
    65022850:	call   rax
    65022852:	jmp    0x65022890
    65022854:	mov    rax,QWORD PTR [rsp+0x80]
    6502285c:	mov    r9,rbp
    6502285f:	mov    r8,r12
    65022862:	mov    QWORD PTR [rsp+0x38],rax
    65022867:	mov    eax,DWORD PTR [rsp+0x78]
    6502286b:	mov    rdx,rsi
    6502286e:	mov    DWORD PTR [rsp+0x30],eax
    65022872:	movzx  eax,BYTE PTR [rsp+0x88]
    6502287a:	mov    rcx,rbx
    6502287d:	mov    BYTE PTR [rsp+0x28],al
    65022881:	mov    QWORD PTR [rsp+0x20],rdi
    65022886:	call   0x65022010
    6502288b:	mov    eax,0x1
    65022890:	mov    rbx,QWORD PTR [rsp+0x50]
    65022895:	mov    rbp,QWORD PTR [rsp+0x58]
    6502289a:	mov    rsi,QWORD PTR [rsp+0x60]
    6502289f:	mov    rdi,QWORD PTR [rsp+0x68]
    650228a4:	add    rsp,0x40
    650228a8:	pop    r12
    650228aa:	ret    
    650228ab:	int3   
    650228ac:	int3   
    650228ad:	int3   
    650228ae:	int3   
    650228af:	int3   
    650228b0:	sub    rsp,0x28
    650228b4:	call   0x65020a30
    650228b9:	mov    rcx,QWORD PTR [rax+0xd0]
    650228c0:	test   rcx,rcx
    650228c3:	je     0x650228c9
    650228c5:	call   rcx
    650228c7:	jmp    0x650228c9
    650228c9:	call   0x650299a0
    650228ce:	add    rsp,0x28
    650228d2:	ret    
    650228d3:	int3   
    650228d4:	int3   
    650228d5:	int3   
    650228d6:	int3   
    650228d7:	int3   
    650228d8:	int3   
    650228d9:	int3   
    650228da:	int3   
    650228db:	int3   
    650228dc:	int3   
    650228dd:	int3   
    650228de:	int3   
    650228df:	int3   
    650228e0:	sub    rsp,0x28
    650228e4:	mov    rcx,QWORD PTR [rip+0x22385]        # 0x65044c70
    650228eb:	call   0x650206e0
    650228f0:	test   rax,rax
    650228f3:	je     0x650228f9
    650228f5:	call   rax
    650228f7:	jmp    0x650228f9
    650228f9:	call   0x650228b0
    650228fe:	int3   
    650228ff:	add    rsp,0x28
    65022903:	ret    
    65022904:	int3   
    65022905:	int3   
    65022906:	int3   
    65022907:	int3   
    65022908:	int3   
    65022909:	int3   
    6502290a:	int3   
    6502290b:	int3   
    6502290c:	int3   
    6502290d:	int3   
    6502290e:	int3   
    6502290f:	int3   
    65022910:	sub    rsp,0x28
    65022914:	lea    rcx,[rip+0xffffffffffffff95]        # 0x650228b0
    6502291b:	call   0x65020520
    65022920:	mov    QWORD PTR [rip+0x22349],rax        # 0x65044c70
    65022927:	add    rsp,0x28
    6502292b:	ret    
    6502292c:	int3   
    6502292d:	int3   
    6502292e:	int3   
    6502292f:	int3   
    65022930:	mov    QWORD PTR [rsp+0x8],rcx
    65022935:	sub    rsp,0x88
    6502293c:	lea    rcx,[rip+0x223dd]        # 0x65044d20
    65022943:	call   QWORD PTR [rip+0x118bf]        # 0x65034208
    65022949:	mov    rax,QWORD PTR [rip+0x224c8]        # 0x65044e18
    65022950:	mov    QWORD PTR [rsp+0x58],rax
    65022955:	xor    r8d,r8d
    65022958:	lea    rdx,[rsp+0x60]
    6502295d:	mov    rcx,QWORD PTR [rsp+0x58]
    65022962:	call   0x6502ecec
    65022967:	mov    QWORD PTR [rsp+0x50],rax
    6502296c:	cmp    QWORD PTR [rsp+0x50],0x0
    65022972:	je     0x650229b5
    65022974:	mov    QWORD PTR [rsp+0x38],0x0
    6502297d:	lea    rax,[rsp+0x48]
    65022982:	mov    QWORD PTR [rsp+0x30],rax
    65022987:	lea    rax,[rsp+0x40]
    6502298c:	mov    QWORD PTR [rsp+0x28],rax
    65022991:	lea    rax,[rip+0x22388]        # 0x65044d20
    65022998:	mov    QWORD PTR [rsp+0x20],rax
    6502299d:	mov    r9,QWORD PTR [rsp+0x50]
    650229a2:	mov    r8,QWORD PTR [rsp+0x58]
    650229a7:	mov    rdx,QWORD PTR [rsp+0x60]
    650229ac:	xor    ecx,ecx
    650229ae:	call   0x6502ecf8
    650229b3:	jmp    0x650229d7
    650229b5:	mov    rax,QWORD PTR [rsp+0x88]
    650229bd:	mov    QWORD PTR [rip+0x22454],rax        # 0x65044e18
    650229c4:	lea    rax,[rsp+0x88]
    650229cc:	add    rax,0x8
    650229d0:	mov    QWORD PTR [rip+0x223e1],rax        # 0x65044db8
    650229d7:	mov    rax,QWORD PTR [rip+0x2243a]        # 0x65044e18
    650229de:	mov    QWORD PTR [rip+0x222ab],rax        # 0x65044c90
    650229e5:	mov    rax,QWORD PTR [rsp+0x90]
    650229ed:	mov    QWORD PTR [rip+0x223ac],rax        # 0x65044da0
    650229f4:	mov    DWORD PTR [rip+0x22282],0xc0000409        # 0x65044c80
    650229fe:	mov    DWORD PTR [rip+0x2227c],0x1        # 0x65044c84
    65022a08:	mov    rax,QWORD PTR [rip+0x20711]        # 0x65043120
    65022a0f:	mov    QWORD PTR [rsp+0x68],rax
    65022a14:	mov    rax,QWORD PTR [rip+0x2070d]        # 0x65043128
    65022a1b:	mov    QWORD PTR [rsp+0x70],rax
    65022a20:	call   QWORD PTR [rip+0x117da]        # 0x65034200
    65022a26:	mov    DWORD PTR [rip+0x222ec],eax        # 0x65044d18
    65022a2c:	mov    ecx,0x1
    65022a31:	call   0x65020510
    65022a36:	xor    ecx,ecx
    65022a38:	call   QWORD PTR [rip+0x117ba]        # 0x650341f8
    65022a3e:	lea    rcx,[rip+0x129e3]        # 0x65035428
    65022a45:	call   QWORD PTR [rip+0x117a5]        # 0x650341f0
    65022a4b:	cmp    DWORD PTR [rip+0x222c6],0x0        # 0x65044d18
    65022a52:	jne    0x65022a5e
    65022a54:	mov    ecx,0x1
    65022a59:	call   0x65020510
    65022a5e:	call   QWORD PTR [rip+0x1160c]        # 0x65034070
    65022a64:	mov    edx,0xc0000409
    65022a69:	mov    rcx,rax
    65022a6c:	call   QWORD PTR [rip+0x11776]        # 0x650341e8
    65022a72:	add    rsp,0x88
    65022a79:	ret    
    65022a7a:	int3   
    65022a7b:	int3   
    65022a7c:	int3   
    65022a7d:	int3   
    65022a7e:	int3   
    65022a7f:	int3   
    65022a80:	mov    QWORD PTR [rsp+0x8],rbx
    65022a85:	mov    QWORD PTR [rsp+0x10],rbp
    65022a8a:	mov    QWORD PTR [rsp+0x18],rsi
    65022a8f:	push   rdi
    65022a90:	sub    rsp,0x20
    65022a94:	xor    edi,edi
    65022a96:	mov    rsi,rcx
    65022a99:	or     ebp,0xffffffff
    65022a9c:	data16 data16 xchg ax,ax
    65022aa0:	mov    rcx,rsi
    65022aa3:	call   0x6501fc50
    65022aa8:	test   rax,rax
    65022aab:	mov    rbx,rax
    65022aae:	jne    0x65022adb
    65022ab0:	cmp    DWORD PTR [rip+0x2273a],eax        # 0x650451f0
    65022ab6:	jbe    0x65022adb
    65022ab8:	mov    ecx,edi
    65022aba:	call   QWORD PTR [rip+0x115b8]        # 0x65034078
    65022ac0:	lea    r11d,[rdi+0x3e8]
    65022ac7:	cmp    r11d,DWORD PTR [rip+0x22722]        # 0x650451f0
    65022ace:	mov    edi,r11d
    65022ad1:	cmova  edi,ebp
    65022ad4:	cmp    edi,ebp
    65022ad6:	jne    0x65022aa0
    65022ad8:	mov    rax,rbx
    65022adb:	mov    rbx,QWORD PTR [rsp+0x30]
    65022ae0:	mov    rbp,QWORD PTR [rsp+0x38]
    65022ae5:	mov    rsi,QWORD PTR [rsp+0x40]
    65022aea:	add    rsp,0x20
    65022aee:	pop    rdi
    65022aef:	ret    
    65022af0:	mov    QWORD PTR [rsp+0x8],rbx
    65022af5:	mov    QWORD PTR [rsp+0x10],rbp
    65022afa:	mov    QWORD PTR [rsp+0x18],rsi
    65022aff:	mov    QWORD PTR [rsp+0x20],rdi
    65022b04:	push   r12
    65022b06:	sub    rsp,0x20
    65022b0a:	xor    edi,edi
    65022b0c:	mov    rsi,rdx
    65022b0f:	mov    rbp,rcx
    65022b12:	or     r12d,0xffffffff
    65022b16:	data16 data16 xchg ax,ax
    65022b1a:	data16 xchg ax,ax
    65022b1d:	data16 xchg ax,ax
    65022b20:	xor    r8d,r8d
    65022b23:	mov    rdx,rsi
    65022b26:	mov    rcx,rbp
    65022b29:	call   0x65029a50
    65022b2e:	test   rax,rax
    65022b31:	mov    rbx,rax
    65022b34:	jne    0x65022b63
    65022b36:	cmp    DWORD PTR [rip+0x226b4],eax        # 0x650451f0
    65022b3c:	jbe    0x65022b63
    65022b3e:	mov    ecx,edi
    65022b40:	call   QWORD PTR [rip+0x11532]        # 0x65034078
    65022b46:	lea    r11d,[rdi+0x3e8]
    65022b4d:	cmp    r11d,DWORD PTR [rip+0x2269c]        # 0x650451f0
    65022b54:	mov    edi,r11d
    65022b57:	cmova  edi,r12d
    65022b5b:	cmp    edi,r12d
    65022b5e:	jne    0x65022b20
    65022b60:	mov    rax,rbx
    65022b63:	mov    rbx,QWORD PTR [rsp+0x30]
    65022b68:	mov    rbp,QWORD PTR [rsp+0x38]
    65022b6d:	mov    rsi,QWORD PTR [rsp+0x40]
    65022b72:	mov    rdi,QWORD PTR [rsp+0x48]
    65022b77:	add    rsp,0x20
    65022b7b:	pop    r12
    65022b7d:	ret    
    65022b7e:	int3   
    65022b7f:	int3   
    65022b80:	mov    QWORD PTR [rsp+0x8],rbx
    65022b85:	mov    QWORD PTR [rsp+0x10],rbp
    65022b8a:	mov    QWORD PTR [rsp+0x18],rsi
    65022b8f:	mov    QWORD PTR [rsp+0x20],rdi
    65022b94:	push   r12
    65022b96:	sub    rsp,0x20
    65022b9a:	xor    esi,esi
    65022b9c:	mov    rdi,rdx
    65022b9f:	mov    rbp,rcx
    65022ba2:	or     r12d,0xffffffff
    65022ba6:	data16 data16 xchg ax,ax
    65022baa:	data16 xchg ax,ax
    65022bad:	data16 xchg ax,ax
    65022bb0:	mov    rdx,rdi
    65022bb3:	mov    rcx,rbp
    65022bb6:	call   0x65020070
    65022bbb:	test   rax,rax
    65022bbe:	mov    rbx,rax
    65022bc1:	jne    0x65022bf5
    65022bc3:	test   rdi,rdi
    65022bc6:	je     0x65022bf5
    65022bc8:	cmp    DWORD PTR [rip+0x22622],eax        # 0x650451f0
    65022bce:	jbe    0x65022bf5
    65022bd0:	mov    ecx,esi
    65022bd2:	call   QWORD PTR [rip+0x114a0]        # 0x65034078
    65022bd8:	lea    r11d,[rsi+0x3e8]
    65022bdf:	cmp    r11d,DWORD PTR [rip+0x2260a]        # 0x650451f0
    65022be6:	mov    esi,r11d
    65022be9:	cmova  esi,r12d
    65022bed:	cmp    esi,r12d
    65022bf0:	jne    0x65022bb0
    65022bf2:	mov    rax,rbx
    65022bf5:	mov    rbx,QWORD PTR [rsp+0x30]
    65022bfa:	mov    rbp,QWORD PTR [rsp+0x38]
    65022bff:	mov    rsi,QWORD PTR [rsp+0x40]
    65022c04:	mov    rdi,QWORD PTR [rsp+0x48]
    65022c09:	add    rsp,0x20
    65022c0d:	pop    r12
    65022c0f:	ret    
    65022c10:	sub    rsp,0x38
    65022c14:	test   rcx,rcx
    65022c17:	jne    0x65022c45
    65022c19:	call   0x65020420
    65022c1e:	xor    r9d,r9d
    65022c21:	xor    r8d,r8d
    65022c24:	xor    edx,edx
    65022c26:	xor    ecx,ecx
    65022c28:	mov    QWORD PTR [rsp+0x20],0x0
    65022c31:	mov    DWORD PTR [rax],0x16
    65022c37:	call   0x6501d9c0
    65022c3c:	or     rax,0xffffffffffffffff
    65022c40:	add    rsp,0x38
    65022c44:	ret    
    65022c45:	mov    r8,rcx
    65022c48:	mov    rcx,QWORD PTR [rip+0x22661]        # 0x650452b0
    65022c4f:	xor    edx,edx
    65022c51:	add    rsp,0x38
    65022c55:	rex.W jmp QWORD PTR [rip+0x1157c]        # 0x650341d8
    65022c5c:	int3   
    65022c5d:	int3   
    65022c5e:	int3   
    65022c5f:	int3   
    65022c60:	rex push rbx
    65022c62:	sub    rsp,0x20
    65022c66:	mov    ebx,ecx
    65022c68:	call   0x65029460
    65022c6d:	mov    ecx,ebx
    65022c6f:	call   0x65029220
    65022c74:	mov    rcx,QWORD PTR [rip+0x20665]        # 0x650432e0
    65022c7b:	call   0x650206e0
    65022c80:	mov    ecx,0xff
    65022c85:	add    rsp,0x20
    65022c89:	pop    rbx
    65022c8a:	rex.W jmp rax
    65022c8d:	int3   
    65022c8e:	int3   
    65022c8f:	int3   
    65022c90:	rex push rbx
    65022c92:	sub    rsp,0x20
    65022c96:	mov    ebx,ecx
    65022c98:	lea    rcx,[rip+0x127a9]        # 0x65035448
    65022c9f:	call   QWORD PTR [rip+0x1159b]        # 0x65034240
    65022ca5:	test   rax,rax
    65022ca8:	je     0x65022cc3
    65022caa:	lea    rdx,[rip+0x12787]        # 0x65035438
    65022cb1:	mov    rcx,rax
    65022cb4:	call   QWORD PTR [rip+0x1144e]        # 0x65034108
    65022cba:	test   rax,rax
    65022cbd:	je     0x65022cc3
    65022cbf:	mov    ecx,ebx
    65022cc1:	call   rax
    65022cc3:	mov    ecx,ebx
    65022cc5:	call   QWORD PTR [rip+0x115ad]        # 0x65034278
    65022ccb:	int3   
    65022ccc:	int3   
    65022ccd:	int3   
    65022cce:	int3   
    65022ccf:	int3   
    65022cd0:	mov    ecx,0x8
    65022cd5:	jmp    0x65029930
    65022cda:	int3   
    65022cdb:	int3   
    65022cdc:	int3   
    65022cdd:	int3   
    65022cde:	int3   
    65022cdf:	int3   
    65022ce0:	mov    ecx,0x8
    65022ce5:	jmp    0x65029800
    65022cea:	int3   
    65022ceb:	int3   
    65022cec:	int3   
    65022ced:	int3   
    65022cee:	int3   
    65022cef:	int3   
    65022cf0:	cmp    rcx,rdx
    65022cf3:	jae    0x65022d22
    65022cf5:	mov    QWORD PTR [rsp+0x8],rbx
    65022cfa:	push   rdi
    65022cfb:	sub    rsp,0x20
    65022cff:	mov    rdi,rdx
    65022d02:	mov    rbx,rcx
    65022d05:	mov    rax,QWORD PTR [rbx]
    65022d08:	test   rax,rax
    65022d0b:	je     0x65022d0f
    65022d0d:	call   rax
    65022d0f:	add    rbx,0x8
    65022d13:	cmp    rbx,rdi
    65022d16:	jb     0x65022d05
    65022d18:	mov    rbx,QWORD PTR [rsp+0x30]
    65022d1d:	add    rsp,0x20
    65022d21:	pop    rdi
    65022d22:	ret    0x0
    65022d25:	int3   
    65022d26:	int3   
    65022d27:	int3   
    65022d28:	int3   
    65022d29:	int3   
    65022d2a:	int3   
    65022d2b:	int3   
    65022d2c:	int3   
    65022d2d:	int3   
    65022d2e:	int3   
    65022d2f:	int3   
    65022d30:	sub    rsp,0x38
    65022d34:	test   rcx,rcx
    65022d37:	jne    0x65022d66
    65022d39:	call   0x65020420
    65022d3e:	xor    r9d,r9d
    65022d41:	xor    r8d,r8d
    65022d44:	xor    edx,edx
    65022d46:	xor    ecx,ecx
    65022d48:	mov    QWORD PTR [rsp+0x20],0x0
    65022d51:	mov    DWORD PTR [rax],0x16
    65022d57:	call   0x6501d9c0
    65022d5c:	mov    eax,0x16
    65022d61:	add    rsp,0x38
    65022d65:	ret    
    65022d66:	mov    eax,DWORD PTR [rip+0x22490]        # 0x650451fc
    65022d6c:	test   eax,eax
    65022d6e:	je     0x65022d39
    65022d70:	mov    DWORD PTR [rcx],eax
    65022d72:	xor    eax,eax
    65022d74:	add    rsp,0x38
    65022d78:	ret    
    65022d79:	int3   
    65022d7a:	int3   
    65022d7b:	int3   
    65022d7c:	int3   
    65022d7d:	int3   
    65022d7e:	int3   
    65022d7f:	int3   
    65022d80:	sub    rsp,0x38
    65022d84:	test   rcx,rcx
    65022d87:	jne    0x65022db6
    65022d89:	call   0x65020420
    65022d8e:	xor    r9d,r9d
    65022d91:	xor    r8d,r8d
    65022d94:	xor    edx,edx
    65022d96:	xor    ecx,ecx
    65022d98:	mov    QWORD PTR [rsp+0x20],0x0
    65022da1:	mov    DWORD PTR [rax],0x16
    65022da7:	call   0x6501d9c0
    65022dac:	mov    eax,0x16
    65022db1:	add    rsp,0x38
    65022db5:	ret    
    65022db6:	cmp    DWORD PTR [rip+0x2243f],0x0        # 0x650451fc
    65022dbd:	je     0x65022d89
    65022dbf:	mov    eax,DWORD PTR [rip+0x22443]        # 0x65045208
    65022dc5:	mov    DWORD PTR [rcx],eax
    65022dc7:	xor    eax,eax
    65022dc9:	add    rsp,0x38
    65022dcd:	ret    
    65022dce:	int3   
    65022dcf:	int3   
    65022dd0:	mov    QWORD PTR [rsp+0x8],rbx
    65022dd5:	push   rdi
    65022dd6:	sub    rsp,0x20
    65022dda:	cmp    QWORD PTR [rip+0x14176],0x0        # 0x65036f58
    65022de2:	mov    ebx,ecx
    65022de4:	je     0x65022dfe
    65022de6:	lea    rcx,[rip+0x1416b]        # 0x65036f58
    65022ded:	call   0x65029650
    65022df2:	test   eax,eax
    65022df4:	je     0x65022dfe
    65022df6:	mov    ecx,ebx
    65022df8:	call   QWORD PTR [rip+0x1415a]        # 0x65036f58
    65022dfe:	call   0x65029b20
    65022e03:	lea    rbx,[rip+0x115de]        # 0x650343e8
    65022e0a:	lea    rdi,[rip+0x115f7]        # 0x65034408
    65022e11:	xor    eax,eax
    65022e13:	cmp    rbx,rdi
    65022e16:	jae    0x65022e33
    65022e18:	test   eax,eax
    65022e1a:	jne    0x65022e90
    65022e1c:	mov    rcx,QWORD PTR [rbx]
    65022e1f:	test   rcx,rcx
    65022e22:	je     0x65022e26
    65022e24:	call   rcx
    65022e26:	add    rbx,0x8
    65022e2a:	cmp    rbx,rdi
    65022e2d:	jb     0x65022e18
    65022e2f:	test   eax,eax
    65022e31:	jne    0x65022e90
    65022e33:	lea    rcx,[rip+0x4386]        # 0x650271c0
    65022e3a:	call   0x6501e7f0
    65022e3f:	lea    rbx,[rip+0x1156a]        # 0x650343b0
    65022e46:	lea    rdi,[rip+0x11593]        # 0x650343e0
    65022e4d:	cmp    rbx,rdi
    65022e50:	jae    0x65022e65
    65022e52:	mov    rax,QWORD PTR [rbx]
    65022e55:	test   rax,rax
    65022e58:	je     0x65022e5c
    65022e5a:	call   rax
    65022e5c:	add    rbx,0x8
    65022e60:	cmp    rbx,rdi
    65022e63:	jb     0x65022e52
    65022e65:	cmp    QWORD PTR [rip+0x26353],0x0        # 0x650491c0
    65022e6d:	je     0x65022e8e
    65022e6f:	lea    rcx,[rip+0x2634a]        # 0x650491c0
    65022e76:	call   0x65029650
    65022e7b:	test   eax,eax
    65022e7d:	je     0x65022e8e
    65022e7f:	xor    r8d,r8d
    65022e82:	xor    ecx,ecx
    65022e84:	lea    edx,[r8+0x2]
    65022e88:	call   QWORD PTR [rip+0x26332]        # 0x650491c0
    65022e8e:	xor    eax,eax
    65022e90:	mov    rbx,QWORD PTR [rsp+0x30]
    65022e95:	add    rsp,0x20
    65022e99:	pop    rdi
    65022e9a:	ret    
    65022e9b:	int3   
    65022e9c:	int3   
    65022e9d:	int3   
    65022e9e:	int3   
    65022e9f:	int3   
    65022ea0:	mov    QWORD PTR [rsp+0x8],rbx
    65022ea5:	mov    QWORD PTR [rsp+0x10],rsi
    65022eaa:	mov    DWORD PTR [rsp+0x18],r8d
    65022eaf:	push   rdi
    65022eb0:	push   r12
    65022eb2:	push   r13
    65022eb4:	sub    rsp,0x30
    65022eb8:	mov    r12d,r8d
    65022ebb:	mov    ebx,edx
    65022ebd:	mov    r13d,ecx
    65022ec0:	mov    ecx,0x8
    65022ec5:	call   0x65029930
    65022eca:	nop
    65022ecb:	cmp    DWORD PTR [rip+0x2238a],0x1        # 0x6504525c
    65022ed2:	je     0x65022f74
    65022ed8:	mov    DWORD PTR [rip+0x22376],0x1        # 0x65045258
    65022ee2:	mov    BYTE PTR [rip+0x2232b],r12b        # 0x65045214
    65022ee9:	test   ebx,ebx
    65022eeb:	jne    0x65022f60
    65022eed:	mov    rcx,QWORD PTR [rip+0x262bc]        # 0x650491b0
    65022ef4:	call   0x650206e0
    65022ef9:	mov    rsi,rax
    65022efc:	mov    rcx,QWORD PTR [rip+0x262a5]        # 0x650491a8
    65022f03:	call   0x650206e0
    65022f08:	mov    rbx,rax
    65022f0b:	mov    QWORD PTR [rsp+0x20],rax
    65022f10:	test   rsi,rsi
    65022f13:	je     0x65022f4d
    65022f15:	data16 data16 xchg ax,ax
    65022f19:	data16 xchg ax,ax
    65022f1c:	data16 data16 xchg ax,ax
    65022f20:	sub    rbx,0x8
    65022f24:	mov    QWORD PTR [rsp+0x20],rbx
    65022f29:	cmp    rbx,rsi
    65022f2c:	jb     0x65022f4d
    65022f2e:	cmp    QWORD PTR [rbx],0x0
    65022f32:	je     0x65022f4b
    65022f34:	mov    rdi,QWORD PTR [rbx]
    65022f37:	call   0x650205f0
    65022f3c:	cmp    rdi,rax
    65022f3f:	je     0x65022f4b
    65022f41:	mov    rcx,rdi
    65022f44:	call   0x650206e0
    65022f49:	call   rax
    65022f4b:	jmp    0x65022f20
    65022f4d:	lea    rdx,[rip+0x114d4]        # 0x65034428
    65022f54:	lea    rcx,[rip+0x114b5]        # 0x65034410
    65022f5b:	call   0x65022cf0
    65022f60:	lea    rdx,[rip+0x114d1]        # 0x65034438
    65022f67:	lea    rcx,[rip+0x114c2]        # 0x65034430
    65022f6e:	call   0x65022cf0
    65022f73:	nop
    65022f74:	test   r12d,r12d
    65022f77:	je     0x65022f83
    65022f79:	mov    ecx,0x8
    65022f7e:	call   0x65029800
    65022f83:	test   r12d,r12d
    65022f86:	jne    0x65022fa5
    65022f88:	mov    DWORD PTR [rip+0x222ca],0x1        # 0x6504525c
    65022f92:	lea    ecx,[r12+0x8]
    65022f97:	call   0x65029800
    65022f9c:	mov    ecx,r13d
    65022f9f:	call   0x65022c90
    65022fa4:	int3   
    65022fa5:	mov    rbx,QWORD PTR [rsp+0x50]
    65022faa:	mov    rsi,QWORD PTR [rsp+0x58]
    65022faf:	add    rsp,0x30
    65022fb3:	pop    r13
    65022fb5:	pop    r12
    65022fb7:	pop    rdi
    65022fb8:	ret    
    65022fb9:	int3   
    65022fba:	int3   
    65022fbb:	int3   
    65022fbc:	int3   
    65022fbd:	int3   
    65022fbe:	int3   
    65022fbf:	int3   
    65022fc0:	rex push rbp
    65022fc2:	sub    rsp,0x20
    65022fc6:	mov    rbp,rdx
    65022fc9:	cmp    DWORD PTR [rbp+0x60],0x0
    65022fcd:	je     0x65022fd9
    65022fcf:	mov    ecx,0x8
    65022fd4:	call   0x65029800
    65022fd9:	add    rsp,0x20
    65022fdd:	pop    rbp
    65022fde:	ret    
    65022fdf:	int3   
    65022fe0:	xor    r8d,r8d
    65022fe3:	lea    edx,[r8+0x1]
    65022fe7:	jmp    0x65022ea0
    65022fec:	int3   
    65022fed:	int3   
    65022fee:	int3   
    65022fef:	int3   
    65022ff0:	xor    edx,edx
    65022ff2:	xor    ecx,ecx
    65022ff4:	lea    r8d,[rdx+0x1]
    65022ff8:	jmp    0x65022ea0
    65022ffd:	int3   
    65022ffe:	int3   
    65022fff:	int3   
    65023000:	rex push rbx
    65023002:	sub    rsp,0x20
    65023006:	call   0x650205f0
    6502300b:	mov    rcx,rax
    6502300e:	mov    rbx,rax
    65023011:	call   0x65020dc0
    65023016:	mov    rcx,rbx
    65023019:	call   0x65029e60
    6502301e:	mov    rcx,rbx
    65023021:	call   0x6501d910
    65023026:	mov    rcx,rbx
    65023029:	call   0x65029e50
    6502302e:	mov    rcx,rbx
    65023031:	call   0x65029e40
    65023036:	mov    rcx,rbx
    65023039:	call   0x65029b60
    6502303e:	mov    rcx,rbx
    65023041:	call   0x65004190
    65023046:	mov    rcx,rbx
    65023049:	call   0x65022910
    6502304e:	lea    rcx,[rip+0xffffffffffffff8b]        # 0x65022fe0
    65023055:	call   0x65020520
    6502305a:	mov    QWORD PTR [rip+0x2027f],rax        # 0x650432e0
    65023061:	add    rsp,0x20
    65023065:	pop    rbx
    65023066:	ret    
    65023067:	int3   
    65023068:	int3   
    65023069:	int3   
    6502306a:	int3   
    6502306b:	int3   
    6502306c:	int3   
    6502306d:	int3   
    6502306e:	int3   
    6502306f:	int3   
    65023070:	mov    QWORD PTR [rsp+0x8],rbx
    65023075:	mov    QWORD PTR [rsp+0x10],rsi
    6502307a:	push   rdi
    6502307b:	sub    rsp,0x20
    6502307f:	lea    rbx,[rcx+0x1c]
    65023083:	mov    rsi,rcx
    65023086:	mov    edi,0x101
    6502308b:	mov    rcx,rbx
    6502308e:	mov    r8,rdi
    65023091:	xor    edx,edx
    65023093:	call   0x6501efa0
    65023098:	xor    r11d,r11d
    6502309b:	lea    r8,[rip+0x2024e]        # 0x650432f0
    650230a2:	mov    DWORD PTR [rsi+0x4],r11d
    650230a6:	mov    DWORD PTR [rsi+0x8],r11d
    650230aa:	mov    DWORD PTR [rsi+0xc],r11d
    650230ae:	mov    QWORD PTR [rsi+0x10],r11
    650230b2:	sub    r8,rsi
    650230b5:	mov    DWORD PTR [rsi+0x18],r11d
    650230b9:	data16 xchg ax,ax
    650230bc:	data16 data16 xchg ax,ax
    650230c0:	movzx  eax,BYTE PTR [r8+rbx*1]
    650230c5:	add    rbx,0x1
    650230c9:	sub    rdi,0x1
    650230cd:	mov    BYTE PTR [rbx-0x1],al
    650230d0:	jne    0x650230c0
    650230d2:	lea    r9,[rip+0x20218]        # 0x650432f1
    650230d9:	lea    rcx,[rsi+0x11d]
    650230e0:	mov    edx,0x80
    650230e5:	sub    r9,rsi
    650230e8:	data16 data16 xchg ax,ax
    650230ec:	data16 data16 xchg ax,ax
    650230f0:	movzx  eax,BYTE PTR [rcx+r8*1]
    650230f5:	add    rcx,0x2
    650230f9:	sub    rdx,0x1
    650230fd:	mov    BYTE PTR [rcx-0x2],al
    65023100:	movzx  eax,BYTE PTR [r9+rcx*1-0x2]
    65023106:	mov    BYTE PTR [rcx-0x1],al
    65023109:	jne    0x650230f0
    6502310b:	mov    rbx,QWORD PTR [rsp+0x30]
    65023110:	mov    rsi,QWORD PTR [rsp+0x38]
    65023115:	add    rsp,0x20
    65023119:	pop    rdi
    6502311a:	ret    
    6502311b:	int3   
    6502311c:	int3   
    6502311d:	int3   
    6502311e:	int3   
    6502311f:	int3   
    65023120:	mov    QWORD PTR [rsp+0x18],rbx
    65023125:	mov    QWORD PTR [rsp+0x20],rbp
    6502312a:	push   rdi
    6502312b:	sub    rsp,0x580
    65023132:	mov    rax,QWORD PTR [rip+0x1ffe7]        # 0x65043120
    65023139:	xor    rax,rsp
    6502313c:	mov    QWORD PTR [rsp+0x570],rax
    65023144:	mov    rbp,rcx
    65023147:	mov    ecx,DWORD PTR [rcx+0x4]
    6502314a:	lea    rdx,[rsp+0x50]
    6502314f:	call   QWORD PTR [rip+0x1112b]        # 0x65034280
    65023155:	test   eax,eax
    65023157:	je     0x650232bd
    6502315d:	xor    ebx,ebx
    6502315f:	mov    QWORD PTR [rsp+0x598],rsi
    65023167:	lea    rdx,[rsp+0x70]
    6502316c:	mov    eax,ebx
    6502316e:	mov    edi,0x100
    65023173:	mov    BYTE PTR [rdx],al
    65023175:	add    eax,0x1
    65023178:	add    rdx,0x1
    6502317c:	cmp    eax,edi
    6502317e:	jb     0x65023173
    65023180:	movzx  eax,BYTE PTR [rsp+0x56]
    65023185:	mov    BYTE PTR [rsp+0x70],0x20
    6502318a:	lea    rsi,[rsp+0x56]
    6502318f:	test   al,al
    65023191:	je     0x650231c1
    65023193:	movzx  edx,BYTE PTR [rsi+0x1]
    65023197:	movzx  r8d,al
    6502319b:	cmp    r8d,edx
    6502319e:	ja     0x650231b6
    650231a0:	sub    edx,r8d
    650231a3:	mov    rax,r8
    650231a6:	lea    rcx,[rsp+r8*1+0x70]
    650231ab:	lea    r8d,[rdx+0x1]
    650231af:	mov    dl,0x20
    650231b1:	call   0x6501efa0
    650231b6:	mov    al,BYTE PTR [rsi+0x2]
    650231b9:	add    rsi,0x2
    650231bd:	test   al,al
    650231bf:	jne    0x65023193
    650231c1:	mov    eax,DWORD PTR [rbp+0xc]
    650231c4:	mov    DWORD PTR [rsp+0x38],ebx
    650231c8:	lea    r8,[rsp+0x70]
    650231cd:	mov    DWORD PTR [rsp+0x30],eax
    650231d1:	mov    eax,DWORD PTR [rbp+0x4]
    650231d4:	mov    r9d,edi
    650231d7:	mov    DWORD PTR [rsp+0x28],eax
    650231db:	lea    rax,[rsp+0x370]
    650231e3:	mov    edx,0x1
    650231e8:	xor    ecx,ecx
    650231ea:	mov    QWORD PTR [rsp+0x20],rax
    650231ef:	call   0x6502a210
    650231f4:	mov    eax,DWORD PTR [rbp+0x4]
    650231f7:	mov    edx,DWORD PTR [rbp+0xc]
    650231fa:	mov    DWORD PTR [rsp+0x40],ebx
    650231fe:	mov    DWORD PTR [rsp+0x38],eax
    65023202:	lea    rax,[rsp+0x170]
    6502320a:	mov    DWORD PTR [rsp+0x30],edi
    6502320e:	mov    QWORD PTR [rsp+0x28],rax
    65023213:	lea    r9,[rsp+0x70]
    65023218:	mov    r8d,edi
    6502321b:	xor    ecx,ecx
    6502321d:	mov    DWORD PTR [rsp+0x20],edi
    65023221:	call   0x65028d10
    65023226:	mov    eax,DWORD PTR [rbp+0x4]
    65023229:	mov    edx,DWORD PTR [rbp+0xc]
    6502322c:	mov    DWORD PTR [rsp+0x40],ebx
    65023230:	mov    DWORD PTR [rsp+0x38],eax
    65023234:	lea    rax,[rsp+0x270]
    6502323c:	mov    DWORD PTR [rsp+0x30],edi
    65023240:	mov    QWORD PTR [rsp+0x28],rax
    65023245:	lea    r9,[rsp+0x70]
    6502324a:	mov    r8d,0x200
    65023250:	xor    ecx,ecx
    65023252:	mov    DWORD PTR [rsp+0x20],edi
    65023256:	call   0x65028d10
    6502325b:	mov    rsi,QWORD PTR [rsp+0x598]
    65023263:	lea    r11,[rsp+0x370]
    6502326b:	lea    rcx,[rbp+0x1d]
    6502326f:	nop
    65023270:	movzx  eax,WORD PTR [r11]
    65023274:	test   al,0x1
    65023276:	je     0x6502328b
    65023278:	movzx  eax,BYTE PTR [rsp+rbx*1+0x170]
    65023280:	or     BYTE PTR [rcx],0x10
    65023283:	mov    BYTE PTR [rcx+0x100],al
    65023289:	jmp    0x650232a9
    6502328b:	test   al,0x2
    6502328d:	je     0x650232a2
    6502328f:	movzx  eax,BYTE PTR [rsp+rbx*1+0x270]
    65023297:	or     BYTE PTR [rcx],0x20
    6502329a:	mov    BYTE PTR [rcx+0x100],al
    650232a0:	jmp    0x650232a9
    650232a2:	mov    BYTE PTR [rcx+0x100],0x0
    650232a9:	add    rcx,0x1
    650232ad:	add    rbx,0x1
    650232b1:	add    r11,0x2
    650232b5:	sub    rdi,0x1
    650232b9:	jne    0x65023270
    650232bb:	jmp    0x6502330e
    650232bd:	xor    ebx,ebx
    650232bf:	lea    rcx,[rbp+0x1d]
    650232c3:	mov    edi,0x100
    650232c8:	data16 data16 xchg ax,ax
    650232cc:	data16 data16 xchg ax,ax
    650232d0:	lea    edx,[rbx-0x61]
    650232d3:	lea    eax,[rdx+0x20]
    650232d6:	cmp    eax,0x19
    650232d9:	ja     0x650232e9
    650232db:	or     BYTE PTR [rcx],0x10
    650232de:	lea    eax,[rbx+0x20]
    650232e1:	mov    BYTE PTR [rcx+0x100],al
    650232e7:	jmp    0x65023303
    650232e9:	cmp    edx,0x19
    650232ec:	ja     0x650232fc
    650232ee:	or     BYTE PTR [rcx],0x20
    650232f1:	lea    eax,[rbx-0x20]
    650232f4:	mov    BYTE PTR [rcx+0x100],al
    650232fa:	jmp    0x65023303
    650232fc:	mov    BYTE PTR [rcx+0x100],0x0
    65023303:	add    ebx,0x1
    65023306:	add    rcx,0x1
    6502330a:	cmp    ebx,edi
    6502330c:	jb     0x650232d0
    6502330e:	mov    rcx,QWORD PTR [rsp+0x570]
    65023316:	xor    rcx,rsp
    65023319:	call   0x6501e650
    6502331e:	lea    r11,[rsp+0x580]
    65023326:	mov    rbx,QWORD PTR [r11+0x20]
    6502332a:	mov    rbp,QWORD PTR [r11+0x28]
    6502332e:	mov    rsp,r11
    65023331:	pop    rdi
    65023332:	ret    
    65023333:	int3   
    65023334:	int3   
    65023335:	int3   
    65023336:	int3   
    65023337:	int3   
    65023338:	int3   
    65023339:	int3   
    6502333a:	int3   
    6502333b:	int3   
    6502333c:	int3   
    6502333d:	int3   
    6502333e:	int3   
    6502333f:	int3   
    65023340:	mov    QWORD PTR [rsp+0x10],rbx
    65023345:	push   rdi
    65023346:	sub    rsp,0x20
    6502334a:	call   0x65020a30
    6502334f:	mov    rdi,rax
    65023352:	mov    ecx,DWORD PTR [rax+0xc8]
    65023358:	test   DWORD PTR [rip+0x204ca],ecx        # 0x65043828
    6502335e:	je     0x65023373
    65023360:	cmp    QWORD PTR [rax+0xc0],0x0
    65023368:	je     0x65023373
    6502336a:	mov    rbx,QWORD PTR [rax+0xb8]
    65023371:	jmp    0x650233e1
    65023373:	mov    ecx,0xd
    65023378:	call   0x65029930
    6502337d:	nop
    6502337e:	mov    rbx,QWORD PTR [rdi+0xb8]
    65023385:	mov    QWORD PTR [rsp+0x30],rbx
    6502338a:	cmp    rbx,QWORD PTR [rip+0x2038f]        # 0x65043720
    65023391:	je     0x650233d7
    65023393:	test   rbx,rbx
    65023396:	je     0x650233b4
    65023398:	lock add DWORD PTR [rbx],0xffffffff
    6502339c:	jne    0x650233b4
    6502339e:	lea    rax,[rip+0x1ff4b]        # 0x650432f0
    650233a5:	mov    rcx,QWORD PTR [rsp+0x30]
    650233aa:	cmp    rcx,rax
    650233ad:	je     0x650233b4
    650233af:	call   0x6501fc00
    650233b4:	mov    rax,QWORD PTR [rip+0x20365]        # 0x65043720
    650233bb:	mov    QWORD PTR [rdi+0xb8],rax
    650233c2:	mov    rax,QWORD PTR [rip+0x20357]        # 0x65043720
    650233c9:	mov    QWORD PTR [rsp+0x30],rax
    650233ce:	lock add DWORD PTR [rax],0x1
    650233d2:	mov    rbx,QWORD PTR [rsp+0x30]
    650233d7:	mov    ecx,0xd
    650233dc:	call   0x65029800
    650233e1:	test   rbx,rbx
    650233e4:	jne    0x650233ee
    650233e6:	lea    ecx,[rbx+0x20]
    650233e9:	call   0x65022c60
    650233ee:	mov    rax,rbx
    650233f1:	mov    rbx,QWORD PTR [rsp+0x38]
    650233f6:	add    rsp,0x20
    650233fa:	pop    rdi
    650233fb:	ret    
    650233fc:	int3   
    650233fd:	int3   
    650233fe:	int3   
    650233ff:	int3   
    65023400:	rex push rbp
    65023402:	sub    rsp,0x20
    65023406:	mov    rbp,rdx
    65023409:	mov    ecx,0xd
    6502340e:	call   0x65029800
    65023413:	add    rsp,0x20
    65023417:	pop    rbp
    65023418:	ret    
    65023419:	int3   
    6502341a:	int3   
    6502341b:	int3   
    6502341c:	int3   
    6502341d:	int3   
    6502341e:	int3   
    6502341f:	int3   
    65023420:	mov    QWORD PTR [rsp+0x8],rbx
    65023425:	mov    QWORD PTR [rsp+0x10],rbp
    6502342a:	mov    QWORD PTR [rsp+0x18],rsi
    6502342f:	mov    QWORD PTR [rsp+0x20],rdi
    65023434:	push   r12
    65023436:	sub    rsp,0x20
    6502343a:	mov    edi,ecx
    6502343c:	xor    sil,sil
    6502343f:	call   0x65020a30
    65023444:	mov    r12,QWORD PTR [rax+0xc0]
    6502344b:	mov    rbp,QWORD PTR [rax+0xb8]
    65023452:	mov    rbx,rax
    65023455:	cmp    r12,QWORD PTR [rip+0x20544]        # 0x650439a0
    6502345c:	je     0x65023474
    6502345e:	mov    edx,DWORD PTR [rax+0xc8]
    65023464:	test   DWORD PTR [rip+0x203be],edx        # 0x65043828
    6502346a:	jne    0x65023474
    6502346c:	call   0x65023e90
    65023471:	mov    r12,rax
    65023474:	cmp    rbp,QWORD PTR [rip+0x202a5]        # 0x65043720
    6502347b:	je     0x65023490
    6502347d:	mov    ecx,DWORD PTR [rbx+0xc8]
    65023483:	test   DWORD PTR [rip+0x2039f],ecx        # 0x65043828
    65023489:	jne    0x65023490
    6502348b:	call   0x65023340
    65023490:	mov    ecx,DWORD PTR [rbx+0xc8]
    65023496:	test   cl,0x2
    65023499:	jne    0x650234a7
    6502349b:	or     ecx,0x2
    6502349e:	mov    sil,0x1
    650234a1:	mov    DWORD PTR [rbx+0xc8],ecx
    650234a7:	cmp    edi,0xfffffffe
    650234aa:	mov    DWORD PTR [rip+0x21dac],0x0        # 0x65045260
    650234b4:	jne    0x650234d4
    650234b6:	mov    DWORD PTR [rip+0x21da0],0x1        # 0x65045260
    650234c0:	call   QWORD PTR [rip+0x10dc2]        # 0x65034288
    650234c6:	test   sil,sil
    650234c9:	je     0x6502350f
    650234cb:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    650234d2:	jmp    0x6502350f
    650234d4:	cmp    edi,0xfffffffd
    650234d7:	jne    0x650234eb
    650234d9:	mov    DWORD PTR [rip+0x21d7d],0x1        # 0x65045260
    650234e3:	call   QWORD PTR [rip+0x10ca7]        # 0x65034190
    650234e9:	jmp    0x650234c6
    650234eb:	cmp    edi,0xfffffffc
    650234ee:	jne    0x65023501
    650234f0:	mov    eax,DWORD PTR [r12+0x4]
    650234f5:	mov    DWORD PTR [rip+0x21d61],0x1        # 0x65045260
    650234ff:	jmp    0x650234c6
    65023501:	test   sil,sil
    65023504:	je     0x6502350d
    65023506:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502350d:	mov    eax,edi
    6502350f:	mov    rbx,QWORD PTR [rsp+0x30]
    65023514:	mov    rbp,QWORD PTR [rsp+0x38]
    65023519:	mov    rsi,QWORD PTR [rsp+0x40]
    6502351e:	mov    rdi,QWORD PTR [rsp+0x48]
    65023523:	add    rsp,0x20
    65023527:	pop    r12
    65023529:	ret    
    6502352a:	int3   
    6502352b:	int3   
    6502352c:	int3   
    6502352d:	int3   
    6502352e:	int3   
    6502352f:	int3   
    65023530:	rex push rbx
    65023532:	push   rbp
    65023533:	push   rsi
    65023534:	push   rdi
    65023535:	sub    rsp,0x48
    65023539:	mov    rax,QWORD PTR [rip+0x1fbe0]        # 0x65043120
    65023540:	xor    rax,rsp
    65023543:	mov    QWORD PTR [rsp+0x38],rax
    65023548:	mov    rbx,rdx
    6502354b:	call   0x65023420
    65023550:	test   eax,eax
    65023552:	mov    edi,eax
    65023554:	jne    0x650235e1
    6502355a:	lea    rdi,[rbx+0x1c]
    6502355e:	mov    esi,0x101
    65023563:	xor    edx,edx
    65023565:	mov    rcx,rdi
    65023568:	mov    r8,rsi
    6502356b:	call   0x6501efa0
    65023570:	xor    ebp,ebp
    65023572:	lea    rdx,[rip+0x1fd77]        # 0x650432f0
    65023579:	mov    DWORD PTR [rbx+0x4],ebp
    6502357c:	mov    DWORD PTR [rbx+0x8],ebp
    6502357f:	mov    DWORD PTR [rbx+0xc],ebp
    65023582:	mov    QWORD PTR [rbx+0x10],rbp
    65023586:	sub    rdx,rbx
    65023589:	mov    DWORD PTR [rbx+0x18],ebp
    6502358c:	data16 data16 xchg ax,ax
    65023590:	movzx  eax,BYTE PTR [rdx+rdi*1]
    65023594:	add    rdi,0x1
    65023598:	sub    rsi,0x1
    6502359c:	mov    BYTE PTR [rdi-0x1],al
    6502359f:	jne    0x65023590
    650235a1:	lea    r9,[rip+0x1fd49]        # 0x650432f1
    650235a8:	lea    rcx,[rbx+0x11d]
    650235af:	mov    r8d,0x80
    650235b5:	sub    r9,rbx
    650235b8:	data16 data16 xchg ax,ax
    650235bc:	data16 data16 xchg ax,ax
    650235c0:	movzx  eax,BYTE PTR [rcx+rdx*1]
    650235c4:	add    rcx,0x2
    650235c8:	sub    r8,0x1
    650235cc:	mov    BYTE PTR [rcx-0x2],al
    650235cf:	movzx  eax,BYTE PTR [r9+rcx*1-0x2]
    650235d5:	mov    BYTE PTR [rcx-0x1],al
    650235d8:	jne    0x650235c0
    650235da:	xor    eax,eax
    650235dc:	jmp    0x650238d6
    650235e1:	mov    QWORD PTR [rsp+0x80],r12
    650235e9:	xor    ebp,ebp
    650235eb:	mov    QWORD PTR [rsp+0x40],r13
    650235f0:	lea    r13,[rip+0x20139]        # 0x65043730
    650235f7:	mov    ecx,ebp
    650235f9:	mov    r12,rbp
    650235fc:	mov    rax,r13
    650235ff:	nop
    65023600:	cmp    DWORD PTR [rax],edi
    65023602:	je     0x650237ab
    65023608:	add    ecx,0x1
    6502360b:	add    r12,0x1
    6502360f:	add    rax,0x30
    65023613:	cmp    ecx,0x5
    65023616:	jb     0x65023600
    65023618:	cmp    edi,0xfde8
    6502361e:	je     0x650237a3
    65023624:	cmp    edi,0xfde9
    6502362a:	je     0x650237a3
    65023630:	movzx  ecx,di
    65023633:	call   QWORD PTR [rip+0x10c57]        # 0x65034290
    65023639:	test   eax,eax
    6502363b:	je     0x650237a3
    65023641:	lea    rdx,[rsp+0x20]
    65023646:	mov    ecx,edi
    65023648:	call   QWORD PTR [rip+0x10c32]        # 0x65034280
    6502364e:	test   eax,eax
    65023650:	je     0x6502378e
    65023656:	lea    rcx,[rbx+0x1c]
    6502365a:	mov    r8d,0x101
    65023660:	xor    edx,edx
    65023662:	call   0x6501efa0
    65023667:	cmp    DWORD PTR [rsp+0x20],0x1
    6502366c:	mov    DWORD PTR [rbx+0x4],edi
    6502366f:	mov    DWORD PTR [rbx+0xc],ebp
    65023672:	jbe    0x6502377f
    65023678:	cmp    BYTE PTR [rsp+0x26],bpl
    6502367d:	lea    rdx,[rsp+0x26]
    65023682:	je     0x650236b9
    65023684:	movzx  eax,BYTE PTR [rdx+0x1]
    65023688:	test   al,al
    6502368a:	je     0x650236b9
    6502368c:	movzx  r8d,BYTE PTR [rdx]
    65023690:	movzx  ecx,al
    65023693:	cmp    r8d,ecx
    65023696:	ja     0x650236b0
    65023698:	sub    ecx,r8d
    6502369b:	lea    rax,[r8+rbx*1+0x1d]
    650236a0:	add    ecx,0x1
    650236a3:	or     BYTE PTR [rax],0x4
    650236a6:	add    rax,0x1
    650236aa:	sub    rcx,0x1
    650236ae:	jne    0x650236a3
    650236b0:	add    rdx,0x2
    650236b4:	cmp    BYTE PTR [rdx],bpl
    650236b7:	jne    0x65023684
    650236b9:	lea    rax,[rbx+0x1f]
    650236bd:	mov    ecx,0x7f
    650236c2:	xchg   ax,ax
    650236c4:	data16 data16 xchg ax,ax
    650236c8:	data16 data16 xchg ax,ax
    650236cc:	data16 data16 xchg ax,ax
    650236d0:	or     BYTE PTR [rax-0x1],0x8
    650236d4:	or     BYTE PTR [rax],0x8
    650236d7:	add    rax,0x2
    650236db:	sub    rcx,0x1
    650236df:	jne    0x650236d0
    650236e1:	mov    ecx,DWORD PTR [rbx+0x4]
    650236e4:	sub    ecx,0x3a4
    650236ea:	je     0x65023764
    650236ec:	sub    ecx,0x4
    650236ef:	je     0x65023749
    650236f1:	sub    ecx,0xd
    650236f4:	je     0x6502372e
    650236f6:	cmp    ecx,0x1
    650236f9:	je     0x65023713
    650236fb:	mov    DWORD PTR [rbx+0x8],0x1
    65023702:	mov    eax,ebp
    65023704:	mov    DWORD PTR [rbx+0xc],eax
    65023707:	mov    QWORD PTR [rbx+0x10],rbp
    6502370b:	mov    DWORD PTR [rbx+0x18],ebp
    6502370e:	jmp    0x650238bf
    65023713:	mov    DWORD PTR [rbx+0x8],0x1
    6502371a:	mov    eax,0x404
    6502371f:	mov    DWORD PTR [rbx+0xc],eax
    65023722:	mov    QWORD PTR [rbx+0x10],rbp
    65023726:	mov    DWORD PTR [rbx+0x18],ebp
    65023729:	jmp    0x650238bf
    6502372e:	mov    DWORD PTR [rbx+0x8],0x1
    65023735:	mov    eax,0x412
    6502373a:	mov    DWORD PTR [rbx+0xc],eax
    6502373d:	mov    QWORD PTR [rbx+0x10],rbp
    65023741:	mov    DWORD PTR [rbx+0x18],ebp
    65023744:	jmp    0x650238bf
    65023749:	mov    DWORD PTR [rbx+0x8],0x1
    65023750:	mov    eax,0x804
    65023755:	mov    DWORD PTR [rbx+0xc],eax
    65023758:	mov    QWORD PTR [rbx+0x10],rbp
    6502375c:	mov    DWORD PTR [rbx+0x18],ebp
    6502375f:	jmp    0x650238bf
    65023764:	mov    DWORD PTR [rbx+0x8],0x1
    6502376b:	mov    eax,0x411
    65023770:	mov    DWORD PTR [rbx+0xc],eax
    65023773:	mov    QWORD PTR [rbx+0x10],rbp
    65023777:	mov    DWORD PTR [rbx+0x18],ebp
    6502377a:	jmp    0x650238bf
    6502377f:	mov    DWORD PTR [rbx+0x8],ebp
    65023782:	mov    QWORD PTR [rbx+0x10],rbp
    65023786:	mov    DWORD PTR [rbx+0x18],ebp
    65023789:	jmp    0x650238bf
    6502378e:	cmp    DWORD PTR [rip+0x21acc],ebp        # 0x65045260
    65023794:	je     0x650237a3
    65023796:	mov    rcx,rbx
    65023799:	call   0x65023070
    6502379e:	jmp    0x650238c7
    650237a3:	or     eax,0xffffffff
    650237a6:	jmp    0x650238c9
    650237ab:	lea    rcx,[rbx+0x1c]
    650237af:	mov    r8d,0x101
    650237b5:	xor    edx,edx
    650237b7:	call   0x6501efa0
    650237bc:	lea    r9,[r12+r12*2]
    650237c0:	lea    rax,[rip+0x1ff79]        # 0x65043740
    650237c7:	shl    r9,0x4
    650237cb:	lea    r11,[rip+0x1ff56]        # 0x65043728
    650237d2:	mov    r10d,0x4
    650237d8:	add    r9,rax
    650237db:	xchg   ax,ax
    650237dd:	data16 xchg ax,ax
    650237e0:	cmp    BYTE PTR [r9],bpl
    650237e3:	mov    r8,r9
    650237e6:	je     0x65023830
    650237e8:	data16 data16 xchg ax,ax
    650237ec:	data16 data16 xchg ax,ax
    650237f0:	movzx  eax,BYTE PTR [r8+0x1]
    650237f5:	test   al,al
    650237f7:	je     0x65023830
    650237f9:	movzx  edx,BYTE PTR [r8]
    650237fd:	movzx  eax,al
    65023800:	cmp    edx,eax
    65023802:	ja     0x65023827
    65023804:	lea    rcx,[rdx+rbx*1+0x1d]
    65023809:	data16 xchg ax,ax
    6502380c:	data16 data16 xchg ax,ax
    65023810:	movzx  eax,BYTE PTR [r11]
    65023814:	add    edx,0x1
    65023817:	add    rcx,0x1
    6502381b:	or     BYTE PTR [rcx-0x1],al
    6502381e:	movzx  eax,BYTE PTR [r8+0x1]
    65023823:	cmp    edx,eax
    65023825:	jbe    0x65023810
    65023827:	add    r8,0x2
    6502382b:	cmp    BYTE PTR [r8],bpl
    6502382e:	jne    0x650237f0
    65023830:	add    r9,0x8
    65023834:	add    r11,0x1
    65023838:	sub    r10,0x1
    6502383c:	jne    0x650237e0
    6502383e:	mov    DWORD PTR [rbx+0x4],edi
    65023841:	sub    edi,0x3a4
    65023847:	mov    DWORD PTR [rbx+0x8],0x1
    6502384e:	je     0x65023874
    65023850:	sub    edi,0x4
    65023853:	je     0x6502386d
    65023855:	sub    edi,0xd
    65023858:	je     0x65023866
    6502385a:	cmp    edi,0x1
    6502385d:	jne    0x65023879
    6502385f:	mov    ebp,0x404
    65023864:	jmp    0x65023879
    65023866:	mov    ebp,0x412
    6502386b:	jmp    0x65023879
    6502386d:	mov    ebp,0x804
    65023872:	jmp    0x65023879
    65023874:	mov    ebp,0x411
    65023879:	mov    DWORD PTR [rbx+0xc],ebp
    6502387c:	lea    rcx,[r12+r12*2]
    65023880:	add    rcx,rcx
    65023883:	movzx  eax,WORD PTR [r13+rcx*8+0x4]
    65023889:	mov    WORD PTR [rbx+0x10],ax
    6502388d:	movzx  eax,WORD PTR [r13+rcx*8+0x6]
    65023893:	mov    WORD PTR [rbx+0x12],ax
    65023897:	movzx  eax,WORD PTR [r13+rcx*8+0x8]
    6502389d:	mov    WORD PTR [rbx+0x14],ax
    650238a1:	movzx  eax,WORD PTR [r13+rcx*8+0xa]
    650238a7:	mov    WORD PTR [rbx+0x16],ax
    650238ab:	movzx  eax,WORD PTR [r13+rcx*8+0xc]
    650238b1:	mov    WORD PTR [rbx+0x18],ax
    650238b5:	movzx  eax,WORD PTR [r13+rcx*8+0xe]
    650238bb:	mov    WORD PTR [rbx+0x1a],ax
    650238bf:	mov    rcx,rbx
    650238c2:	call   0x65023120
    650238c7:	xor    eax,eax
    650238c9:	mov    r12,QWORD PTR [rsp+0x80]
    650238d1:	mov    r13,QWORD PTR [rsp+0x40]
    650238d6:	mov    rcx,QWORD PTR [rsp+0x38]
    650238db:	xor    rcx,rsp
    650238de:	call   0x6501e650
    650238e3:	add    rsp,0x48
    650238e7:	pop    rdi
    650238e8:	pop    rsi
    650238e9:	pop    rbp
    650238ea:	pop    rbx
    650238eb:	ret    
    650238ec:	int3   
    650238ed:	int3   
    650238ee:	int3   
    650238ef:	int3   
    650238f0:	mov    QWORD PTR [rsp+0x8],rbx
    650238f5:	mov    QWORD PTR [rsp+0x10],rsi
    650238fa:	mov    QWORD PTR [rsp+0x18],rdi
    650238ff:	push   r12
    65023901:	push   r13
    65023903:	push   r14
    65023905:	sub    rsp,0x30
    65023909:	mov    edi,ecx
    6502390b:	or     r14d,0xffffffff
    6502390f:	call   0x65020a30
    65023914:	mov    rsi,rax
    65023917:	call   0x65023340
    6502391c:	mov    rbx,QWORD PTR [rsi+0xb8]
    65023923:	mov    ecx,edi
    65023925:	call   0x65023420
    6502392a:	mov    r12d,eax
    6502392d:	cmp    eax,DWORD PTR [rbx+0x4]
    65023930:	je     0x65023acf
    65023936:	mov    ecx,0x220
    6502393b:	call   0x65022a80
    65023940:	mov    rdi,rax
    65023943:	test   rax,rax
    65023946:	je     0x65023ad4
    6502394c:	mov    rdx,QWORD PTR [rsi+0xb8]
    65023953:	mov    rcx,rax
    65023956:	mov    r8d,0x220
    6502395c:	call   0x6501fd30
    65023961:	xor    ebx,ebx
    65023963:	mov    DWORD PTR [rdi],ebx
    65023965:	mov    rdx,rdi
    65023968:	mov    ecx,r12d
    6502396b:	call   0x65023530
    65023970:	mov    r14d,eax
    65023973:	test   eax,eax
    65023975:	jne    0x65023aa9
    6502397b:	mov    rcx,QWORD PTR [rsi+0xb8]
    65023982:	lock add DWORD PTR [rcx],0xffffffff
    65023986:	jne    0x650239a2
    65023988:	mov    rcx,QWORD PTR [rsi+0xb8]
    6502398f:	lea    r12,[rip+0x1f95a]        # 0x650432f0
    65023996:	cmp    rcx,r12
    65023999:	je     0x650239a9
    6502399b:	call   0x6501fc00
    650239a0:	jmp    0x650239a9
    650239a2:	lea    r12,[rip+0x1f947]        # 0x650432f0
    650239a9:	mov    QWORD PTR [rsi+0xb8],rdi
    650239b0:	lock add DWORD PTR [rdi],0x1
    650239b4:	test   BYTE PTR [rsi+0xc8],0x2
    650239bb:	jne    0x65023ad4
    650239c1:	test   BYTE PTR [rip+0x1fe60],0x1        # 0x65043828
    650239c8:	jne    0x65023ad4
    650239ce:	mov    ecx,0xd
    650239d3:	call   0x65029930
    650239d8:	nop
    650239d9:	mov    eax,DWORD PTR [rdi+0x4]
    650239dc:	mov    DWORD PTR [rip+0x21892],eax        # 0x65045274
    650239e2:	mov    eax,DWORD PTR [rdi+0x8]
    650239e5:	mov    DWORD PTR [rip+0x2188d],eax        # 0x65045278
    650239eb:	mov    eax,DWORD PTR [rdi+0xc]
    650239ee:	mov    DWORD PTR [rip+0x21888],eax        # 0x6504527c
    650239f4:	mov    edx,ebx
    650239f6:	mov    DWORD PTR [rsp+0x20],ebx
    650239fa:	lea    r8,[rip+0xfffffffffffdc5ff]        # 0x65000000
    65023a01:	cmp    edx,0x5
    65023a04:	jge    0x65023a20
    65023a06:	movsxd rcx,edx
    65023a09:	movzx  eax,WORD PTR [rdi+rcx*2+0x10]
    65023a0e:	mov    WORD PTR [r8+rcx*2+0x45268],ax
    65023a17:	add    edx,0x1
    65023a1a:	mov    DWORD PTR [rsp+0x20],edx
    65023a1e:	jmp    0x65023a01
    65023a20:	mov    edx,ebx
    65023a22:	mov    DWORD PTR [rsp+0x20],ebx
    65023a26:	cmp    edx,0x101
    65023a2c:	jge    0x65023a47
    65023a2e:	movsxd rcx,edx
    65023a31:	movzx  eax,BYTE PTR [rcx+rdi*1+0x1c]
    65023a36:	mov    BYTE PTR [rcx+r8*1+0x43510],al
    65023a3e:	add    edx,0x1
    65023a41:	mov    DWORD PTR [rsp+0x20],edx
    65023a45:	jmp    0x65023a26
    65023a47:	mov    DWORD PTR [rsp+0x20],ebx
    65023a4b:	xchg   ax,ax
    65023a4d:	data16 xchg ax,ax
    65023a50:	cmp    ebx,0x100
    65023a56:	jge    0x65023a74
    65023a58:	movsxd rcx,ebx
    65023a5b:	movzx  eax,BYTE PTR [rcx+rdi*1+0x11d]
    65023a63:	mov    BYTE PTR [rcx+r8*1+0x43620],al
    65023a6b:	add    ebx,0x1
    65023a6e:	mov    DWORD PTR [rsp+0x20],ebx
    65023a72:	jmp    0x65023a50
    65023a74:	mov    rax,QWORD PTR [rip+0x1fca5]        # 0x65043720
    65023a7b:	lock add DWORD PTR [rax],0xffffffff
    65023a7f:	jne    0x65023a92
    65023a81:	mov    rcx,QWORD PTR [rip+0x1fc98]        # 0x65043720
    65023a88:	cmp    rcx,r12
    65023a8b:	je     0x65023a92
    65023a8d:	call   0x6501fc00
    65023a92:	mov    QWORD PTR [rip+0x1fc87],rdi        # 0x65043720
    65023a99:	lock add DWORD PTR [rdi],0x1
    65023a9d:	mov    ecx,0xd
    65023aa2:	call   0x65029800
    65023aa7:	jmp    0x65023ad4
    65023aa9:	cmp    eax,0xffffffff
    65023aac:	jne    0x65023ad4
    65023aae:	lea    r12,[rip+0x1f83b]        # 0x650432f0
    65023ab5:	cmp    rdi,r12
    65023ab8:	je     0x65023ac2
    65023aba:	mov    rcx,rdi
    65023abd:	call   0x6501fc00
    65023ac2:	call   0x65020420
    65023ac7:	mov    DWORD PTR [rax],0x16
    65023acd:	jmp    0x65023ad4
    65023acf:	xor    ebx,ebx
    65023ad1:	mov    r14d,ebx
    65023ad4:	mov    eax,r14d
    65023ad7:	mov    rbx,QWORD PTR [rsp+0x50]
    65023adc:	mov    rsi,QWORD PTR [rsp+0x58]
    65023ae1:	mov    rdi,QWORD PTR [rsp+0x60]
    65023ae6:	add    rsp,0x30
    65023aea:	pop    r14
    65023aec:	pop    r13
    65023aee:	pop    r12
    65023af0:	ret    
    65023af1:	int3   
    65023af2:	int3   
    65023af3:	int3   
    65023af4:	int3   
    65023af5:	int3   
    65023af6:	int3   
    65023af7:	int3   
    65023af8:	int3   
    65023af9:	int3   
    65023afa:	int3   
    65023afb:	int3   
    65023afc:	int3   
    65023afd:	int3   
    65023afe:	int3   
    65023aff:	int3   
    65023b00:	rex push rbp
    65023b02:	sub    rsp,0x20
    65023b06:	mov    rbp,rdx
    65023b09:	mov    ecx,0xd
    65023b0e:	call   0x65029800
    65023b13:	add    rsp,0x20
    65023b17:	pop    rbp
    65023b18:	ret    
    65023b19:	int3   
    65023b1a:	int3   
    65023b1b:	int3   
    65023b1c:	int3   
    65023b1d:	int3   
    65023b1e:	int3   
    65023b1f:	int3   
    65023b20:	sub    rsp,0x28
    65023b24:	cmp    DWORD PTR [rip+0x2568d],0x0        # 0x650491b8
    65023b2b:	jne    0x65023b41
    65023b2d:	mov    ecx,0xfffffffd
    65023b32:	call   0x650238f0
    65023b37:	mov    DWORD PTR [rip+0x25677],0x1        # 0x650491b8
    65023b41:	xor    eax,eax
    65023b43:	add    rsp,0x28
    65023b47:	ret    
    65023b48:	int3   
    65023b49:	int3   
    65023b4a:	int3   
    65023b4b:	int3   
    65023b4c:	int3   
    65023b4d:	int3   
    65023b4e:	int3   
    65023b4f:	int3   
    65023b50:	mov    QWORD PTR [rsp+0x8],rbx
    65023b55:	mov    QWORD PTR [rsp+0x10],rbp
    65023b5a:	mov    QWORD PTR [rsp+0x18],rsi
    65023b5f:	push   rdi
    65023b60:	sub    rsp,0x20
    65023b64:	mov    rax,QWORD PTR [rcx+0x128]
    65023b6b:	mov    rdi,rcx
    65023b6e:	test   rax,rax
    65023b71:	je     0x65023bec
    65023b73:	lea    rcx,[rip+0x20516]        # 0x65044090
    65023b7a:	cmp    rax,rcx
    65023b7d:	je     0x65023bec
    65023b7f:	mov    rax,QWORD PTR [rdi+0x110]
    65023b86:	test   rax,rax
    65023b89:	je     0x65023bec
    65023b8b:	cmp    DWORD PTR [rax],0x0
    65023b8e:	jne    0x65023bec
    65023b90:	mov    rcx,QWORD PTR [rdi+0x120]
    65023b97:	test   rcx,rcx
    65023b9a:	je     0x65023bb2
    65023b9c:	cmp    DWORD PTR [rcx],0x0
    65023b9f:	jne    0x65023bb2
    65023ba1:	call   0x6501fc00
    65023ba6:	mov    rcx,QWORD PTR [rdi+0x128]
    65023bad:	call   0x6502a5a0
    65023bb2:	mov    rcx,QWORD PTR [rdi+0x118]
    65023bb9:	test   rcx,rcx
    65023bbc:	je     0x65023bd4
    65023bbe:	cmp    DWORD PTR [rcx],0x0
    65023bc1:	jne    0x65023bd4
    65023bc3:	call   0x6501fc00
    65023bc8:	mov    rcx,QWORD PTR [rdi+0x128]
    65023bcf:	call   0x6502a550
    65023bd4:	mov    rcx,QWORD PTR [rdi+0x110]
    65023bdb:	call   0x6501fc00
    65023be0:	mov    rcx,QWORD PTR [rdi+0x128]
    65023be7:	call   0x6501fc00
    65023bec:	mov    rax,QWORD PTR [rdi+0x130]
    65023bf3:	test   rax,rax
    65023bf6:	je     0x65023c3c
    65023bf8:	cmp    DWORD PTR [rax],0x0
    65023bfb:	jne    0x65023c3c
    65023bfd:	mov    rcx,QWORD PTR [rdi+0x138]
    65023c04:	sub    rcx,0xfe
    65023c0b:	call   0x6501fc00
    65023c10:	mov    rcx,QWORD PTR [rdi+0x148]
    65023c17:	add    rcx,0xffffffffffffff80
    65023c1b:	call   0x6501fc00
    65023c20:	mov    rcx,QWORD PTR [rdi+0x150]
    65023c27:	add    rcx,0xffffffffffffff80
    65023c2b:	call   0x6501fc00
    65023c30:	mov    rcx,QWORD PTR [rdi+0x130]
    65023c37:	call   0x6501fc00
    65023c3c:	mov    rcx,QWORD PTR [rdi+0x158]
    65023c43:	lea    rax,[rip+0x202c6]        # 0x65043f10
    65023c4a:	cmp    rcx,rax
    65023c4d:	je     0x65023c69
    65023c4f:	cmp    DWORD PTR [rcx+0x160],0x0
    65023c56:	jne    0x65023c69
    65023c58:	call   0x6502a360
    65023c5d:	mov    rcx,QWORD PTR [rdi+0x158]
    65023c64:	call   0x6501fc00
    65023c69:	lea    rbx,[rdi+0x58]
    65023c6d:	mov    esi,0x6
    65023c72:	lea    rbp,[rip+0x1fbb7]        # 0x65043830
    65023c79:	data16 xchg ax,ax
    65023c7c:	data16 data16 xchg ax,ax
    65023c80:	cmp    QWORD PTR [rbx-0x10],rbp
    65023c84:	je     0x65023c98
    65023c86:	mov    rcx,QWORD PTR [rbx]
    65023c89:	test   rcx,rcx
    65023c8c:	je     0x65023c98
    65023c8e:	cmp    DWORD PTR [rcx],0x0
    65023c91:	jne    0x65023c98
    65023c93:	call   0x6501fc00
    65023c98:	cmp    QWORD PTR [rbx-0x8],0x0
    65023c9d:	je     0x65023cb2
    65023c9f:	mov    rcx,QWORD PTR [rbx+0x8]
    65023ca3:	test   rcx,rcx
    65023ca6:	je     0x65023cb2
    65023ca8:	cmp    DWORD PTR [rcx],0x0
    65023cab:	jne    0x65023cb2
    65023cad:	call   0x6501fc00
    65023cb2:	add    rbx,0x20
    65023cb6:	sub    rsi,0x1
    65023cba:	jne    0x65023c80
    65023cbc:	mov    rcx,rdi
    65023cbf:	mov    rbx,QWORD PTR [rsp+0x30]
    65023cc4:	mov    rbp,QWORD PTR [rsp+0x38]
    65023cc9:	mov    rsi,QWORD PTR [rsp+0x40]
    65023cce:	add    rsp,0x20
    65023cd2:	pop    rdi
    65023cd3:	jmp    0x6501fc00
    65023cd8:	int3   
    65023cd9:	int3   
    65023cda:	int3   
    65023cdb:	int3   
    65023cdc:	int3   
    65023cdd:	int3   
    65023cde:	int3   
    65023cdf:	int3   
    65023ce0:	mov    rdx,rcx
    65023ce3:	lock add DWORD PTR [rcx],0x1
    65023ce7:	mov    rax,QWORD PTR [rcx+0x110]
    65023cee:	test   rax,rax
    65023cf1:	je     0x65023cf7
    65023cf3:	lock add DWORD PTR [rax],0x1
    65023cf7:	mov    rax,QWORD PTR [rcx+0x120]
    65023cfe:	test   rax,rax
    65023d01:	je     0x65023d07
    65023d03:	lock add DWORD PTR [rax],0x1
    65023d07:	mov    rax,QWORD PTR [rcx+0x118]
    65023d0e:	test   rax,rax
    65023d11:	je     0x65023d17
    65023d13:	lock add DWORD PTR [rax],0x1
    65023d17:	mov    rax,QWORD PTR [rcx+0x130]
    65023d1e:	test   rax,rax
    65023d21:	je     0x65023d27
    65023d23:	lock add DWORD PTR [rax],0x1
    65023d27:	lea    rax,[rcx+0x58]
    65023d2b:	mov    r8d,0x6
    65023d31:	lea    r9,[rip+0x1faf8]        # 0x65043830
    65023d38:	cmp    QWORD PTR [rax-0x10],r9
    65023d3c:	je     0x65023d4a
    65023d3e:	mov    rcx,QWORD PTR [rax]
    65023d41:	test   rcx,rcx
    65023d44:	je     0x65023d4a
    65023d46:	lock add DWORD PTR [rcx],0x1
    65023d4a:	cmp    QWORD PTR [rax-0x8],0x0
    65023d4f:	je     0x65023d5e
    65023d51:	mov    rcx,QWORD PTR [rax+0x8]
    65023d55:	test   rcx,rcx
    65023d58:	je     0x65023d5e
    65023d5a:	lock add DWORD PTR [rcx],0x1
    65023d5e:	add    rax,0x20
    65023d62:	sub    r8,0x1
    65023d66:	jne    0x65023d38
    65023d68:	mov    rax,QWORD PTR [rdx+0x158]
    65023d6f:	lock add DWORD PTR [rax+0x160],0x1
    65023d77:	ret    
    65023d78:	int3   
    65023d79:	int3   
    65023d7a:	int3   
    65023d7b:	int3   
    65023d7c:	int3   
    65023d7d:	int3   
    65023d7e:	int3   
    65023d7f:	int3   
    65023d80:	test   rcx,rcx
    65023d83:	je     0x65023e1f
    65023d89:	lock add DWORD PTR [rcx],0xffffffff
    65023d8d:	mov    rax,QWORD PTR [rcx+0x110]
    65023d94:	test   rax,rax
    65023d97:	je     0x65023d9d
    65023d99:	lock add DWORD PTR [rax],0xffffffff
    65023d9d:	mov    rax,QWORD PTR [rcx+0x120]
    65023da4:	test   rax,rax
    65023da7:	je     0x65023dad
    65023da9:	lock add DWORD PTR [rax],0xffffffff
    65023dad:	mov    rax,QWORD PTR [rcx+0x118]
    65023db4:	test   rax,rax
    65023db7:	je     0x65023dbd
    65023db9:	lock add DWORD PTR [rax],0xffffffff
    65023dbd:	mov    rax,QWORD PTR [rcx+0x130]
    65023dc4:	test   rax,rax
    65023dc7:	je     0x65023dcd
    65023dc9:	lock add DWORD PTR [rax],0xffffffff
    65023dcd:	lea    rax,[rcx+0x58]
    65023dd1:	mov    r8d,0x6
    65023dd7:	lea    r9,[rip+0x1fa52]        # 0x65043830
    65023dde:	xchg   ax,ax
    65023de0:	cmp    QWORD PTR [rax-0x10],r9
    65023de4:	je     0x65023df2
    65023de6:	mov    rdx,QWORD PTR [rax]
    65023de9:	test   rdx,rdx
    65023dec:	je     0x65023df2
    65023dee:	lock add DWORD PTR [rdx],0xffffffff
    65023df2:	cmp    QWORD PTR [rax-0x8],0x0
    65023df7:	je     0x65023e06
    65023df9:	mov    rdx,QWORD PTR [rax+0x8]
    65023dfd:	test   rdx,rdx
    65023e00:	je     0x65023e06
    65023e02:	lock add DWORD PTR [rdx],0xffffffff
    65023e06:	add    rax,0x20
    65023e0a:	sub    r8,0x1
    65023e0e:	jne    0x65023de0
    65023e10:	mov    rax,QWORD PTR [rcx+0x158]
    65023e17:	lock add DWORD PTR [rax+0x160],0xffffffff
    65023e1f:	mov    rax,rcx
    65023e22:	ret    
    65023e23:	int3   
    65023e24:	int3   
    65023e25:	int3   
    65023e26:	int3   
    65023e27:	int3   
    65023e28:	int3   
    65023e29:	int3   
    65023e2a:	int3   
    65023e2b:	int3   
    65023e2c:	int3   
    65023e2d:	int3   
    65023e2e:	int3   
    65023e2f:	int3   
    65023e30:	rex push rbx
    65023e32:	sub    rsp,0x20
    65023e36:	test   rdx,rdx
    65023e39:	mov    rbx,rdx
    65023e3c:	je     0x65023e83
    65023e3e:	test   rcx,rcx
    65023e41:	je     0x65023e83
    65023e43:	mov    r10,QWORD PTR [rcx]
    65023e46:	cmp    r10,rdx
    65023e49:	je     0x65023e7a
    65023e4b:	mov    QWORD PTR [rcx],rdx
    65023e4e:	mov    rcx,rdx
    65023e51:	call   0x65023ce0
    65023e56:	test   r10,r10
    65023e59:	je     0x65023e7a
    65023e5b:	mov    rcx,r10
    65023e5e:	call   0x65023d80
    65023e63:	cmp    DWORD PTR [r10],0x0
    65023e67:	jne    0x65023e7a
    65023e69:	lea    rax,[rip+0x1f9d0]        # 0x65043840
    65023e70:	cmp    r10,rax
    65023e73:	je     0x65023e7a
    65023e75:	call   0x65023b50
    65023e7a:	mov    rax,rbx
    65023e7d:	add    rsp,0x20
    65023e81:	pop    rbx
    65023e82:	ret    
    65023e83:	xor    eax,eax
    65023e85:	add    rsp,0x20
    65023e89:	pop    rbx
    65023e8a:	ret    
    65023e8b:	int3   
    65023e8c:	int3   
    65023e8d:	int3   
    65023e8e:	int3   
    65023e8f:	int3   
    65023e90:	rex push rbx
    65023e92:	sub    rsp,0x20
    65023e96:	call   0x65020a30
    65023e9b:	mov    rbx,rax
    65023e9e:	mov    ecx,DWORD PTR [rax+0xc8]
    65023ea4:	test   DWORD PTR [rip+0x1f97e],ecx        # 0x65043828
    65023eaa:	je     0x65023ec4
    65023eac:	cmp    QWORD PTR [rax+0xc0],0x0
    65023eb4:	je     0x65023ec4
    65023eb6:	call   0x65020a30
    65023ebb:	mov    rbx,QWORD PTR [rax+0xc0]
    65023ec2:	jmp    0x65023eef
    65023ec4:	mov    ecx,0xc
    65023ec9:	call   0x65029930
    65023ece:	nop
    65023ecf:	lea    rcx,[rbx+0xc0]
    65023ed6:	mov    rdx,QWORD PTR [rip+0x1fac3]        # 0x650439a0
    65023edd:	call   0x65023e30
    65023ee2:	mov    rbx,rax
    65023ee5:	mov    ecx,0xc
    65023eea:	call   0x65029800
    65023eef:	test   rbx,rbx
    65023ef2:	jne    0x65023efc
    65023ef4:	lea    ecx,[rbx+0x20]
    65023ef7:	call   0x65022c60
    65023efc:	mov    rax,rbx
    65023eff:	add    rsp,0x20
    65023f03:	pop    rbx
    65023f04:	ret    
    65023f05:	int3   
    65023f06:	int3   
    65023f07:	int3   
    65023f08:	int3   
    65023f09:	int3   
    65023f0a:	int3   
    65023f0b:	int3   
    65023f0c:	int3   
    65023f0d:	int3   
    65023f0e:	int3   
    65023f0f:	int3   
    65023f10:	rex push rbp
    65023f12:	sub    rsp,0x20
    65023f16:	mov    rbp,rdx
    65023f19:	mov    ecx,0xc
    65023f1e:	call   0x65029800
    65023f23:	add    rsp,0x20
    65023f27:	pop    rbp
    65023f28:	ret    
    65023f29:	int3   
    65023f2a:	int3   
    65023f2b:	int3   
    65023f2c:	int3   
    65023f2d:	int3   
    65023f2e:	int3   
    65023f2f:	int3   
    65023f30:	mov    QWORD PTR [rsp+0x20],rbx
    65023f35:	mov    DWORD PTR [rsp+0x8],ecx
    65023f39:	push   rdi
    65023f3a:	sub    rsp,0x20
    65023f3e:	mov    rcx,rdx
    65023f41:	mov    rbx,rdx
    65023f44:	call   0x6502b790
    65023f49:	mov    ecx,DWORD PTR [rbx+0x18]
    65023f4c:	test   cl,0x82
    65023f4f:	movsxd rdi,eax
    65023f52:	jne    0x65023f71
    65023f54:	call   0x65020420
    65023f59:	mov    DWORD PTR [rax],0x9
    65023f5f:	or     DWORD PTR [rbx+0x18],0x20
    65023f63:	or     eax,0xffffffff
    65023f66:	mov    rbx,QWORD PTR [rsp+0x48]
    65023f6b:	add    rsp,0x20
    65023f6f:	pop    rdi
    65023f70:	ret    
    65023f71:	test   cl,0x40
    65023f74:	je     0x65023f93
    65023f76:	call   0x65020420
    65023f7b:	mov    DWORD PTR [rax],0x22
    65023f81:	or     DWORD PTR [rbx+0x18],0x20
    65023f85:	or     eax,0xffffffff
    65023f88:	mov    rbx,QWORD PTR [rsp+0x48]
    65023f8d:	add    rsp,0x20
    65023f91:	pop    rdi
    65023f92:	ret    
    65023f93:	mov    QWORD PTR [rsp+0x40],rsi
    65023f98:	xor    esi,esi
    65023f9a:	test   cl,0x1
    65023f9d:	je     0x65023fb8
    65023f9f:	test   cl,0x10
    65023fa2:	mov    DWORD PTR [rbx+0x8],esi
    65023fa5:	je     0x65024048
    65023fab:	mov    rax,QWORD PTR [rbx+0x10]
    65023faf:	and    ecx,0xfffffffe
    65023fb2:	mov    QWORD PTR [rbx],rax
    65023fb5:	mov    DWORD PTR [rbx+0x18],ecx
    65023fb8:	mov    eax,DWORD PTR [rbx+0x18]
    65023fbb:	mov    DWORD PTR [rbx+0x8],esi
    65023fbe:	and    eax,0xffffffef
    65023fc1:	or     eax,0x2
    65023fc4:	test   eax,0x10c
    65023fc9:	mov    DWORD PTR [rbx+0x18],eax
    65023fcc:	jne    0x65023ffd
    65023fce:	call   0x6502b530
    65023fd3:	add    rax,0x30
    65023fd7:	cmp    rbx,rax
    65023fda:	je     0x65023fea
    65023fdc:	call   0x6502b530
    65023fe1:	add    rax,0x60
    65023fe5:	cmp    rbx,rax
    65023fe8:	jne    0x65023ff5
    65023fea:	mov    ecx,edi
    65023fec:	call   0x6502b4b0
    65023ff1:	test   eax,eax
    65023ff3:	jne    0x65023ffd
    65023ff5:	mov    rcx,rbx
    65023ff8:	call   0x6502b450
    65023ffd:	test   DWORD PTR [rbx+0x18],0x108
    65024004:	mov    QWORD PTR [rsp+0x38],rbp
    65024009:	je     0x650240b5
    6502400f:	mov    ebp,DWORD PTR [rbx]
    65024011:	mov    rdx,QWORD PTR [rbx+0x10]
    65024015:	sub    ebp,DWORD PTR [rbx+0x10]
    65024018:	lea    rax,[rdx+0x1]
    6502401c:	mov    QWORD PTR [rbx],rax
    6502401f:	mov    eax,DWORD PTR [rbx+0x24]
    65024022:	sub    eax,0x1
    65024025:	test   ebp,ebp
    65024027:	mov    DWORD PTR [rbx+0x8],eax
    6502402a:	jle    0x65024061
    6502402c:	mov    r8d,ebp
    6502402f:	mov    ecx,edi
    65024031:	call   0x6502b300
    65024036:	mov    rcx,QWORD PTR [rbx+0x10]
    6502403a:	mov    esi,eax
    6502403c:	movzx  eax,BYTE PTR [rsp+0x30]
    65024041:	mov    BYTE PTR [rcx],al
    65024043:	jmp    0x650240cb
    65024048:	mov    rsi,QWORD PTR [rsp+0x40]
    6502404d:	or     ecx,0x20
    65024050:	or     eax,0xffffffff
    65024053:	mov    DWORD PTR [rbx+0x18],ecx
    65024056:	mov    rbx,QWORD PTR [rsp+0x48]
    6502405b:	add    rsp,0x20
    6502405f:	pop    rdi
    65024060:	ret    
    65024061:	cmp    edi,0xffffffff
    65024064:	je     0x65024089
    65024066:	cmp    edi,0xfffffffe
    65024069:	je     0x65024089
    6502406b:	mov    rax,rdi
    6502406e:	mov    rcx,rdi
    65024071:	lea    rdx,[rip+0x24f28]        # 0x65048fa0
    65024078:	and    eax,0x1f
    6502407b:	sar    rcx,0x5
    6502407f:	imul   rax,rax,0x58
    65024083:	add    rax,QWORD PTR [rdx+rcx*8]
    65024087:	jmp    0x65024090
    65024089:	lea    rax,[rip+0x1f940]        # 0x650439d0
    65024090:	test   BYTE PTR [rax+0x8],0x20
    65024094:	je     0x650240a9
    65024096:	xor    edx,edx
    65024098:	mov    ecx,edi
    6502409a:	lea    r8d,[rdx+0x2]
    6502409e:	call   0x6502a9a0
    650240a3:	cmp    rax,0xffffffffffffffff
    650240a7:	je     0x650240cf
    650240a9:	mov    rcx,QWORD PTR [rbx+0x10]
    650240ad:	mov    al,BYTE PTR [rsp+0x30]
    650240b1:	mov    BYTE PTR [rcx],al
    650240b3:	jmp    0x650240cb
    650240b5:	mov    ebp,0x1
    650240ba:	lea    rdx,[rsp+0x30]
    650240bf:	mov    ecx,edi
    650240c1:	mov    r8d,ebp
    650240c4:	call   0x6502b300
    650240c9:	mov    esi,eax
    650240cb:	cmp    esi,ebp
    650240cd:	je     0x650240d8
    650240cf:	or     DWORD PTR [rbx+0x18],0x20
    650240d3:	or     eax,0xffffffff
    650240d6:	jmp    0x650240dd
    650240d8:	movzx  eax,BYTE PTR [rsp+0x30]
    650240dd:	mov    rbp,QWORD PTR [rsp+0x38]
    650240e2:	mov    rsi,QWORD PTR [rsp+0x40]
    650240e7:	mov    rbx,QWORD PTR [rsp+0x48]
    650240ec:	add    rsp,0x20
    650240f0:	pop    rdi
    650240f1:	ret    
    650240f2:	int3   
    650240f3:	int3   
    650240f4:	int3   
    650240f5:	int3   
    650240f6:	int3   
    650240f7:	int3   
    650240f8:	int3   
    650240f9:	int3   
    650240fa:	int3   
    650240fb:	int3   
    650240fc:	int3   
    650240fd:	int3   
    650240fe:	int3   
    650240ff:	int3   
    65024100:	mov    QWORD PTR [rsp+0x8],rbx
    65024105:	mov    QWORD PTR [rsp+0x10],rbp
    6502410a:	mov    QWORD PTR [rsp+0x18],rsi
    6502410f:	push   rdi
    65024110:	sub    rsp,0x20
    65024114:	test   BYTE PTR [r8+0x18],0x40
    65024119:	mov    rbx,r9
    6502411c:	mov    rdi,r8
    6502411f:	mov    esi,edx
    65024121:	mov    rbp,rcx
    65024124:	je     0x65024132
    65024126:	cmp    QWORD PTR [r8+0x10],0x0
    6502412b:	jne    0x65024132
    6502412d:	add    DWORD PTR [r9],edx
    65024130:	jmp    0x650241a4
    65024132:	test   edx,edx
    65024134:	jle    0x650241a4
    65024136:	sub    esi,0x1
    65024139:	test   BYTE PTR [rdi+0x18],0x40
    6502413d:	je     0x65024146
    6502413f:	cmp    QWORD PTR [rdi+0x10],0x0
    65024144:	je     0x65024160
    65024146:	movzx  ecx,WORD PTR [rbp+0x0]
    6502414a:	mov    rdx,rdi
    6502414d:	call   0x6502b7d0
    65024152:	cmp    ax,0xffff
    65024156:	jne    0x65024160
    65024158:	mov    DWORD PTR [rbx],0xffffffff
    6502415e:	jmp    0x65024163
    65024160:	add    DWORD PTR [rbx],0x1
    65024163:	add    rbp,0x2
    65024167:	cmp    DWORD PTR [rbx],0xffffffff
    6502416a:	jne    0x650241a0
    6502416c:	call   0x65020420
    65024171:	cmp    DWORD PTR [rax],0x2a
    65024174:	jne    0x650241a4
    65024176:	test   BYTE PTR [rdi+0x18],0x40
    6502417a:	je     0x65024183
    6502417c:	cmp    QWORD PTR [rdi+0x10],0x0
    65024181:	je     0x6502419d
    65024183:	mov    rdx,rdi
    65024186:	mov    cx,0x3f
    6502418a:	call   0x6502b7d0
    6502418f:	cmp    ax,0xffff
    65024193:	jne    0x6502419d
    65024195:	mov    DWORD PTR [rbx],0xffffffff
    6502419b:	jmp    0x650241a0
    6502419d:	add    DWORD PTR [rbx],0x1
    650241a0:	test   esi,esi
    650241a2:	jg     0x65024136
    650241a4:	mov    rbx,QWORD PTR [rsp+0x30]
    650241a9:	mov    rbp,QWORD PTR [rsp+0x38]
    650241ae:	mov    rsi,QWORD PTR [rsp+0x40]
    650241b3:	add    rsp,0x20
    650241b7:	pop    rdi
    650241b8:	ret    
    650241b9:	int3   
    650241ba:	int3   
    650241bb:	int3   
    650241bc:	int3   
    650241bd:	int3   
    650241be:	int3   
    650241bf:	int3   
    650241c0:	rex push rbx
    650241c2:	push   rsi
    650241c3:	push   rdi
    650241c4:	push   r13
    650241c6:	push   r14
    650241c8:	sub    rsp,0x4f0
    650241cf:	mov    rax,QWORD PTR [rip+0x1ef4a]        # 0x65043120
    650241d6:	xor    rax,rsp
    650241d9:	mov    QWORD PTR [rsp+0x4c0],rax
    650241e1:	xor    ebx,ebx
    650241e3:	test   r8,r8
    650241e6:	mov    rdi,r9
    650241e9:	mov    QWORD PTR [rsp+0x58],r9
    650241ee:	mov    rsi,rdx
    650241f1:	mov    r13,rcx
    650241f4:	mov    DWORD PTR [rsp+0x74],ebx
    650241f8:	mov    r14d,ebx
    650241fb:	mov    DWORD PTR [rsp+0x40],ebx
    650241ff:	mov    r11d,ebx
    65024202:	mov    DWORD PTR [rsp+0x50],ebx
    65024206:	mov    r9d,ebx
    65024209:	mov    DWORD PTR [rsp+0x48],ebx
    6502420d:	mov    r10d,ebx
    65024210:	mov    DWORD PTR [rsp+0x4c],ebx
    65024214:	mov    DWORD PTR [rsp+0x70],ebx
    65024218:	mov    DWORD PTR [rsp+0x60],ebx
    6502421c:	mov    BYTE PTR [rsp+0x90],bl
    65024223:	jne    0x650242e7
    65024229:	call   0x65020a30
    6502422e:	mov    QWORD PTR [rsp+0x88],rax
    65024236:	mov    rdx,rax
    65024239:	mov    rcx,QWORD PTR [rax+0xc0]
    65024240:	cmp    rcx,QWORD PTR [rip+0x1f759]        # 0x650439a0
    65024247:	mov    QWORD PTR [rsp+0x78],rcx
    6502424c:	mov    rax,QWORD PTR [rax+0xb8]
    65024253:	mov    QWORD PTR [rsp+0x80],rax
    6502425b:	je     0x65024285
    6502425d:	mov    ecx,DWORD PTR [rdx+0xc8]
    65024263:	test   DWORD PTR [rip+0x1f5bf],ecx        # 0x65043828
    65024269:	jne    0x65024285
    6502426b:	call   0x65023e90
    65024270:	mov    rdx,QWORD PTR [rsp+0x88]
    65024278:	mov    QWORD PTR [rsp+0x78],rax
    6502427d:	mov    rax,QWORD PTR [rsp+0x80]
    65024285:	cmp    rax,QWORD PTR [rip+0x1f494]        # 0x65043720
    6502428c:	je     0x650242b1
    6502428e:	mov    eax,DWORD PTR [rdx+0xc8]
    65024294:	test   DWORD PTR [rip+0x1f58e],eax        # 0x65043828
    6502429a:	jne    0x650242b1
    6502429c:	call   0x65023340
    650242a1:	mov    rdx,QWORD PTR [rsp+0x88]
    650242a9:	mov    QWORD PTR [rsp+0x80],rax
    650242b1:	test   BYTE PTR [rdx+0xc8],0x2
    650242b8:	jne    0x650242dc
    650242ba:	or     DWORD PTR [rdx+0xc8],0x2
    650242c1:	mov    rdx,QWORD PTR [rsp+0x88]
    650242c9:	mov    r9d,ebx
    650242cc:	mov    BYTE PTR [rsp+0x90],0x1
    650242d4:	mov    r10d,ebx
    650242d7:	mov    r11d,ebx
    650242da:	jmp    0x65024302
    650242dc:	mov    r9d,ebx
    650242df:	mov    r10d,ebx
    650242e2:	mov    r11d,ebx
    650242e5:	jmp    0x65024302
    650242e7:	mov    rax,QWORD PTR [r8]
    650242ea:	lea    rcx,[rsp+0x78]
    650242ef:	mov    QWORD PTR [rcx],rax
    650242f2:	mov    rax,QWORD PTR [r8+0x8]
    650242f6:	mov    QWORD PTR [rcx+0x8],rax
    650242fa:	mov    rdx,QWORD PTR [rsp+0x88]
    65024302:	test   r13,r13
    65024305:	jne    0x65024346
    65024307:	call   0x65020420
    6502430c:	xor    r9d,r9d
    6502430f:	xor    r8d,r8d
    65024312:	xor    edx,edx
    65024314:	xor    ecx,ecx
    65024316:	mov    QWORD PTR [rsp+0x20],rbx
    6502431b:	mov    DWORD PTR [rax],0x16
    65024321:	call   0x6501d9c0
    65024326:	cmp    BYTE PTR [rsp+0x90],bl
    6502432d:	je     0x6502433e
    6502432f:	mov    rax,QWORD PTR [rsp+0x88]
    65024337:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502433e:	or     eax,0xffffffff
    65024341:	jmp    0x65025046
    65024346:	test   rsi,rsi
    65024349:	je     0x65024307
    6502434b:	mov    QWORD PTR [rsp+0x4e8],rbp
    65024353:	mov    QWORD PTR [rsp+0x4e0],r12
    6502435b:	movzx  r12d,WORD PTR [rsi]
    6502435f:	test   r12w,r12w
    65024363:	mov    QWORD PTR [rsp+0x4d8],r15
    6502436b:	mov    ebp,ebx
    6502436d:	mov    DWORD PTR [rsp+0x44],ebx
    65024371:	mov    r8d,ebx
    65024374:	mov    QWORD PTR [rsp+0xa0],rbx
    6502437c:	mov    r15d,ebx
    6502437f:	je     0x6502501b
    65024385:	mov    rbx,QWORD PTR [rsp+0xb0]
    6502438d:	lea    rdx,[rip+0xfffffffffffdbc6c]        # 0x65000000
    65024394:	data16 data16 xchg ax,ax
    65024398:	data16 data16 xchg ax,ax
    6502439c:	data16 data16 xchg ax,ax
    650243a0:	add    rsi,0x2
    650243a4:	test   ebp,ebp
    650243a6:	mov    QWORD PTR [rsp+0xa8],rsi
    650243ae:	js     0x65025013
    650243b4:	lea    eax,[r12-0x20]
    650243b9:	cmp    ax,0x58
    650243bd:	ja     0x650243cf
    650243bf:	movzx  eax,r12w
    650243c3:	mov    cl,BYTE PTR [rax+rdx*1+0x354e0]
    650243ca:	and    ecx,0xf
    650243cd:	jmp    0x650243d3
    650243cf:	xor    eax,eax
    650243d1:	mov    ecx,eax
    650243d3:	movsxd rax,r8d
    650243d6:	movsxd rcx,ecx
    650243d9:	lea    rdx,[rax+rcx*8]
    650243dd:	lea    rax,[rip+0xfffffffffffdbc1c]        # 0x65000000
    650243e4:	movsx  eax,BYTE PTR [rdx+rax*1+0x35500]
    650243ec:	sar    eax,0x4
    650243ef:	cmp    eax,0x7
    650243f2:	mov    DWORD PTR [rsp+0x98],eax
    650243f9:	ja     0x65024fb6
    650243ff:	lea    rdx,[rip+0xfffffffffffdbbfa]        # 0x65000000
    65024406:	cdqe   
    65024408:	mov    ecx,DWORD PTR [rdx+rax*4+0x25068]
    6502440f:	add    rcx,rdx
    65024412:	jmp    rcx
    65024414:	xor    eax,eax
    65024416:	or     r9d,0xffffffff
    6502441a:	mov    DWORD PTR [rsp+0x48],r9d
    6502441f:	mov    DWORD PTR [rsp+0x9c],eax
    65024426:	mov    DWORD PTR [rsp+0x70],eax
    6502442a:	mov    r11d,eax
    6502442d:	mov    DWORD PTR [rsp+0x50],eax
    65024431:	mov    r10d,eax
    65024434:	mov    DWORD PTR [rsp+0x4c],eax
    65024438:	mov    r14d,eax
    6502443b:	mov    DWORD PTR [rsp+0x40],eax
    6502443f:	mov    DWORD PTR [rsp+0x60],eax
    65024443:	jmp    0x65024fbd
    65024448:	movzx  eax,r12w
    6502444c:	cmp    eax,0x20
    6502444f:	je     0x650244a2
    65024451:	cmp    eax,0x23
    65024454:	je     0x65024493
    65024456:	cmp    eax,0x2b
    65024459:	je     0x65024485
    6502445b:	cmp    eax,0x2d
    6502445e:	je     0x65024477
    65024460:	cmp    eax,0x30
    65024463:	jne    0x65024fbd
    65024469:	or     r14d,0x8
    6502446d:	mov    DWORD PTR [rsp+0x40],r14d
    65024472:	jmp    0x65024fbd
    65024477:	or     r14d,0x4
    6502447b:	mov    DWORD PTR [rsp+0x40],r14d
    65024480:	jmp    0x65024fbd
    65024485:	or     r14d,0x1
    65024489:	mov    DWORD PTR [rsp+0x40],r14d
    6502448e:	jmp    0x65024fbd
    65024493:	bts    r14d,0x7
    65024498:	mov    DWORD PTR [rsp+0x40],r14d
    6502449d:	jmp    0x65024fbd
    650244a2:	or     r14d,0x2
    650244a6:	mov    DWORD PTR [rsp+0x40],r14d
    650244ab:	jmp    0x65024fbd
    650244b0:	cmp    r12w,0x2a
    650244b5:	jne    0x650244e7
    650244b7:	mov    r11d,DWORD PTR [rdi]
    650244ba:	add    rdi,0x8
    650244be:	test   r11d,r11d
    650244c1:	mov    QWORD PTR [rsp+0x58],rdi
    650244c6:	mov    DWORD PTR [rsp+0x50],r11d
    650244cb:	jns    0x65024fbd
    650244d1:	or     r14d,0x4
    650244d5:	neg    r11d
    650244d8:	mov    DWORD PTR [rsp+0x50],r11d
    650244dd:	mov    DWORD PTR [rsp+0x40],r14d
    650244e2:	jmp    0x65024fbd
    650244e7:	lea    ecx,[r11+r11*4]
    650244eb:	movzx  eax,r12w
    650244ef:	lea    r11d,[rax+rcx*2-0x30]
    650244f4:	mov    DWORD PTR [rsp+0x50],r11d
    650244f9:	jmp    0x65024fbd
    650244fe:	xor    eax,eax
    65024500:	mov    r9d,eax
    65024503:	mov    DWORD PTR [rsp+0x48],eax
    65024507:	jmp    0x65024fbd
    6502450c:	cmp    r12w,0x2a
    65024511:	jne    0x6502453b
    65024513:	mov    r9d,DWORD PTR [rdi]
    65024516:	add    rdi,0x8
    6502451a:	test   r9d,r9d
    6502451d:	mov    QWORD PTR [rsp+0x58],rdi
    65024522:	mov    DWORD PTR [rsp+0x48],r9d
    65024527:	jns    0x65024fbd
    6502452d:	or     r9d,0xffffffff
    65024531:	mov    DWORD PTR [rsp+0x48],r9d
    65024536:	jmp    0x65024fbd
    6502453b:	lea    ecx,[r9+r9*4]
    6502453f:	movzx  eax,r12w
    65024543:	lea    r9d,[rax+rcx*2-0x30]
    65024548:	mov    DWORD PTR [rsp+0x48],r9d
    6502454d:	jmp    0x65024fbd
    65024552:	movzx  eax,r12w
    65024556:	cmp    eax,0x49
    65024559:	je     0x650245b2
    6502455b:	cmp    eax,0x68
    6502455e:	je     0x650245a4
    65024560:	cmp    eax,0x6c
    65024563:	je     0x6502457d
    65024565:	cmp    eax,0x77
    65024568:	jne    0x65024fbd
    6502456e:	bts    r14d,0xb
    65024573:	mov    DWORD PTR [rsp+0x40],r14d
    65024578:	jmp    0x65024fbd
    6502457d:	cmp    WORD PTR [rsi],0x6c
    65024581:	jne    0x65024596
    65024583:	add    rsi,0x2
    65024587:	bts    r14d,0xc
    6502458c:	mov    DWORD PTR [rsp+0x40],r14d
    65024591:	jmp    0x65024fbd
    65024596:	or     r14d,0x10
    6502459a:	mov    DWORD PTR [rsp+0x40],r14d
    6502459f:	jmp    0x65024fbd
    650245a4:	or     r14d,0x20
    650245a8:	mov    DWORD PTR [rsp+0x40],r14d
    650245ad:	jmp    0x65024fbd
    650245b2:	movzx  eax,WORD PTR [rsi]
    650245b5:	bts    r14d,0xf
    650245ba:	cmp    ax,0x36
    650245be:	mov    DWORD PTR [rsp+0x40],r14d
    650245c3:	jne    0x650245df
    650245c5:	cmp    WORD PTR [rsi+0x2],0x34
    650245ca:	jne    0x650245df
    650245cc:	add    rsi,0x4
    650245d0:	bts    r14d,0xf
    650245d5:	mov    DWORD PTR [rsp+0x40],r14d
    650245da:	jmp    0x65024fbd
    650245df:	cmp    ax,0x33
    650245e3:	jne    0x650245ff
    650245e5:	cmp    WORD PTR [rsi+0x2],0x32
    650245ea:	jne    0x650245ff
    650245ec:	add    rsi,0x4
    650245f0:	btr    r14d,0xf
    650245f5:	mov    DWORD PTR [rsp+0x40],r14d
    650245fa:	jmp    0x65024fbd
    650245ff:	cmp    ax,0x64
    65024603:	je     0x65024fbd
    65024609:	cmp    ax,0x69
    6502460d:	je     0x65024fbd
    65024613:	cmp    ax,0x6f
    65024617:	je     0x65024fbd
    6502461d:	cmp    ax,0x75
    65024621:	je     0x65024fbd
    65024627:	cmp    ax,0x78
    6502462b:	je     0x65024fbd
    65024631:	cmp    ax,0x58
    65024635:	je     0x65024fbd
    6502463b:	xor    eax,eax
    6502463d:	mov    DWORD PTR [rsp+0x98],eax
    65024644:	test   BYTE PTR [r13+0x18],0x40
    65024649:	mov    DWORD PTR [rsp+0x60],0x1
    65024651:	je     0x65024666
    65024653:	cmp    QWORD PTR [r13+0x10],0x0
    65024658:	jne    0x65024666
    6502465a:	add    ebp,0x1
    6502465d:	mov    DWORD PTR [rsp+0x44],ebp
    65024661:	jmp    0x65024fbd
    65024666:	mov    rdx,r13
    65024669:	movzx  ecx,r12w
    6502466d:	call   0x6502b7d0
    65024672:	cmp    ax,0xffff
    65024676:	jne    0x6502469a
    65024678:	mov    r9d,DWORD PTR [rsp+0x48]
    6502467d:	mov    r10d,DWORD PTR [rsp+0x4c]
    65024682:	mov    r11d,DWORD PTR [rsp+0x50]
    65024687:	or     ebp,0xffffffff
    6502468a:	lea    rdx,[rip+0xfffffffffffdb96f]        # 0x65000000
    65024691:	mov    DWORD PTR [rsp+0x44],ebp
    65024695:	jmp    0x65024fbd
    6502469a:	mov    r9d,DWORD PTR [rsp+0x48]
    6502469f:	mov    r10d,DWORD PTR [rsp+0x4c]
    650246a4:	mov    r11d,DWORD PTR [rsp+0x50]
    650246a9:	add    ebp,0x1
    650246ac:	lea    rdx,[rip+0xfffffffffffdb94d]        # 0x65000000
    650246b3:	mov    DWORD PTR [rsp+0x44],ebp
    650246b7:	jmp    0x65024fbd
    650246bc:	movzx  eax,r12w
    650246c0:	add    eax,0xffffffbf
    650246c3:	cmp    eax,0x37
    650246c6:	ja     0x65024c17
    650246cc:	cdqe   
    650246ce:	movzx  eax,BYTE PTR [rdx+rax*1+0x250c4]
    650246d6:	mov    ecx,DWORD PTR [rdx+rax*4+0x25088]
    650246dd:	add    rcx,rdx
    650246e0:	jmp    rcx
    650246e2:	test   r14d,0x830
    650246e9:	jne    0x650246f4
    650246eb:	or     r14d,0x20
    650246ef:	mov    DWORD PTR [rsp+0x40],r14d
    650246f4:	movzx  eax,WORD PTR [rdi]
    650246f7:	add    rdi,0x8
    650246fb:	test   r14b,0x20
    650246ff:	mov    WORD PTR [rsp+0x68],ax
    65024704:	mov    DWORD PTR [rsp+0x60],0x1
    6502470c:	mov    QWORD PTR [rsp+0x58],rdi
    65024711:	je     0x6502475e
    65024713:	mov    BYTE PTR [rsp+0x6c],al
    65024717:	mov    rax,QWORD PTR [rsp+0x78]
    6502471c:	mov    BYTE PTR [rsp+0x6d],0x0
    65024721:	movsxd r8,DWORD PTR [rax+0x10c]
    65024728:	lea    r9,[rsp+0x78]
    6502472d:	lea    rdx,[rsp+0x6c]
    65024732:	lea    rcx,[rsp+0xc0]
    6502473a:	call   0x6502ba60
    6502473f:	test   eax,eax
    65024741:	jns    0x65024766
    65024743:	mov    DWORD PTR [rsp+0x70],0x1
    6502474b:	lea    rbx,[rsp+0xc0]
    65024753:	mov    r15d,0x1
    65024759:	jmp    0x65024c17
    6502475e:	mov    WORD PTR [rsp+0xc0],ax
    65024766:	lea    rbx,[rsp+0xc0]
    6502476e:	mov    r15d,0x1
    65024774:	jmp    0x65024c17
    65024779:	mov    rax,QWORD PTR [rdi]
    6502477c:	add    rdi,0x8
    65024780:	test   rax,rax
    65024783:	mov    QWORD PTR [rsp+0x58],rdi
    65024788:	je     0x650247c1
    6502478a:	mov    rbx,QWORD PTR [rax+0x8]
    6502478e:	test   rbx,rbx
    65024791:	je     0x650247c1
    65024793:	bt     r14d,0xb
    65024798:	jae    0x650247b2
    6502479a:	movsx  eax,WORD PTR [rax]
    6502479d:	mov    DWORD PTR [rsp+0x60],0x1
    650247a5:	cdq    
    650247a6:	sub    eax,edx
    650247a8:	sar    eax,1
    650247aa:	mov    r15d,eax
    650247ad:	jmp    0x65024c17
    650247b2:	movsx  r15d,WORD PTR [rax]
    650247b6:	xor    ecx,ecx
    650247b8:	mov    DWORD PTR [rsp+0x60],ecx
    650247bc:	jmp    0x65024c17
    650247c1:	mov    rbx,QWORD PTR [rip+0x1f318]        # 0x65043ae0
    650247c8:	or     rcx,0xffffffffffffffff
    650247cc:	xor    eax,eax
    650247ce:	mov    rdi,rbx
    650247d1:	repnz scas al,BYTE PTR es:[rdi]
    650247d3:	not    rcx
    650247d6:	sub    rcx,0x1
    650247da:	mov    r15,rcx
    650247dd:	jmp    0x65024c17
    650247e2:	test   r14d,0x830
    650247e9:	jne    0x650247f4
    650247eb:	or     r14d,0x20
    650247ef:	mov    DWORD PTR [rsp+0x40],r14d
    650247f4:	mov    rbx,QWORD PTR [rdi]
    650247f7:	cmp    r9d,0xffffffff
    650247fb:	mov    esi,r9d
    650247fe:	mov    eax,0x7fffffff
    65024803:	cmove  esi,eax
    65024806:	add    rdi,0x8
    6502480a:	test   r14b,0x20
    6502480e:	mov    QWORD PTR [rsp+0x58],rdi
    65024813:	je     0x65024862
    65024815:	test   rbx,rbx
    65024818:	cmove  rbx,QWORD PTR [rip+0x1f2c0]        # 0x65043ae0
    65024820:	xor    eax,eax
    65024822:	test   esi,esi
    65024824:	mov    rdi,rbx
    65024827:	mov    r15d,eax
    6502482a:	jle    0x65024c17
    65024830:	movzx  eax,BYTE PTR [rdi]
    65024833:	test   al,al
    65024835:	je     0x65024c17
    6502483b:	lea    rdx,[rsp+0x78]
    65024840:	movzx  ecx,al
    65024843:	call   0x65028e70
    65024848:	test   eax,eax
    6502484a:	je     0x65024850
    6502484c:	add    rdi,0x1
    65024850:	add    r15d,0x1
    65024854:	add    rdi,0x1
    65024858:	cmp    r15d,esi
    6502485b:	jl     0x65024830
    6502485d:	jmp    0x65024c17
    65024862:	test   rbx,rbx
    65024865:	mov    DWORD PTR [rsp+0x60],0x1
    6502486d:	cmove  rbx,QWORD PTR [rip+0x1f273]        # 0x65043ae8
    65024875:	test   esi,esi
    65024877:	mov    rax,rbx
    6502487a:	je     0x65024891
    6502487c:	data16 data16 xchg ax,ax
    65024880:	sub    esi,0x1
    65024883:	cmp    WORD PTR [rax],0x0
    65024887:	je     0x65024891
    65024889:	add    rax,0x2
    6502488d:	test   esi,esi
    6502488f:	jne    0x65024880
    65024891:	sub    rax,rbx
    65024894:	sar    rax,1
    65024897:	mov    r15d,eax
    6502489a:	jmp    0x65024c17
    6502489f:	add    rdi,0x8
    650248a3:	mov    QWORD PTR [rsp+0x58],rdi
    650248a8:	mov    rdi,QWORD PTR [rdi-0x8]
    650248ac:	call   0x6502ba40
    650248b1:	test   eax,eax
    650248b3:	je     0x65024fd4
    650248b9:	test   r14b,0x20
    650248bd:	je     0x650248cf
    650248bf:	mov    WORD PTR [rdi],bp
    650248c2:	mov    DWORD PTR [rsp+0x70],0x1
    650248ca:	jmp    0x65024f23
    650248cf:	mov    DWORD PTR [rdi],ebp
    650248d1:	mov    DWORD PTR [rsp+0x70],0x1
    650248d9:	jmp    0x65024f23
    650248de:	mov    DWORD PTR [rsp+0x9c],0x1
    650248e9:	add    r12w,0x20
    650248ee:	or     r14d,0x40
    650248f2:	test   r9d,r9d
    650248f5:	mov    eax,0x200
    650248fa:	mov    DWORD PTR [rsp+0x40],r14d
    650248ff:	mov    esi,eax
    65024901:	lea    rbx,[rsp+0xc0]
    65024909:	jns    0x65024918
    6502490b:	mov    r15d,0x6
    65024911:	mov    DWORD PTR [rsp+0x48],r15d
    65024916:	jmp    0x65024993
    65024918:	test   r9d,r9d
    6502491b:	jne    0x65024931
    6502491d:	cmp    r12w,0x67
    65024922:	jne    0x65024987
    65024924:	mov    r15d,0x1
    6502492a:	mov    DWORD PTR [rsp+0x48],r15d
    6502492f:	jmp    0x65024993
    65024931:	cmp    r9d,eax
    65024934:	jle    0x6502493f
    65024936:	mov    r9d,eax
    65024939:	mov    DWORD PTR [rsp+0x48],eax
    6502493d:	jmp    0x65024948
    6502493f:	cmp    r9d,0xa3
    65024946:	jle    0x6502498e
    65024948:	lea    edi,[r9+0x15d]
    6502494f:	movsxd rcx,edi
    65024952:	call   0x65022a80
    65024957:	test   rax,rax
    6502495a:	mov    QWORD PTR [rsp+0xa0],rax
    65024962:	je     0x65024975
    65024964:	mov    r15d,DWORD PTR [rsp+0x48]
    65024969:	mov    esi,edi
    6502496b:	mov    rdi,QWORD PTR [rsp+0x58]
    65024970:	mov    rbx,rax
    65024973:	jmp    0x65024993
    65024975:	mov    rdi,QWORD PTR [rsp+0x58]
    6502497a:	mov    r15d,0xa3
    65024980:	mov    DWORD PTR [rsp+0x48],r15d
    65024985:	jmp    0x65024993
    65024987:	mov    r15d,DWORD PTR [rsp+0x48]
    6502498c:	jmp    0x65024993
    6502498e:	mov    r15d,DWORD PTR [rsp+0x48]
    65024993:	mov    rax,QWORD PTR [rdi]
    65024996:	mov    rcx,QWORD PTR [rip+0x1f543]        # 0x65043ee0
    6502499d:	add    rdi,0x8
    650249a1:	mov    QWORD PTR [rsp+0x58],rdi
    650249a6:	movsxd rsi,esi
    650249a9:	mov    QWORD PTR [rsp+0xb0],rax
    650249b1:	movsx  edi,r12b
    650249b5:	call   0x650206e0
    650249ba:	lea    rcx,[rsp+0x78]
    650249bf:	mov    QWORD PTR [rsp+0x30],rcx
    650249c4:	mov    ecx,DWORD PTR [rsp+0x9c]
    650249cb:	mov    r9d,edi
    650249ce:	mov    DWORD PTR [rsp+0x28],ecx
    650249d2:	lea    rcx,[rsp+0xb0]
    650249da:	mov    r8,rsi
    650249dd:	mov    rdx,rbx
    650249e0:	mov    DWORD PTR [rsp+0x20],r15d
    650249e5:	call   rax
    650249e7:	mov    edi,r14d
    650249ea:	and    edi,0x80
    650249f0:	je     0x65024a0d
    650249f2:	test   r15d,r15d
    650249f5:	jne    0x65024a0d
    650249f7:	mov    rcx,QWORD PTR [rip+0x1f4fa]        # 0x65043ef8
    650249fe:	call   0x650206e0
    65024a03:	lea    rdx,[rsp+0x78]
    65024a08:	mov    rcx,rbx
    65024a0b:	call   rax
    65024a0d:	cmp    r12w,0x67
    65024a12:	jne    0x65024a2e
    65024a14:	test   edi,edi
    65024a16:	jne    0x65024a2e
    65024a18:	mov    rcx,QWORD PTR [rip+0x1f4d1]        # 0x65043ef0
    65024a1f:	call   0x650206e0
    65024a24:	lea    rdx,[rsp+0x78]
    65024a29:	mov    rcx,rbx
    65024a2c:	call   rax
    65024a2e:	cmp    BYTE PTR [rbx],0x2d
    65024a31:	jne    0x65024a41
    65024a33:	bts    r14d,0x8
    65024a38:	add    rbx,0x1
    65024a3c:	mov    DWORD PTR [rsp+0x40],r14d
    65024a41:	or     rcx,0xffffffffffffffff
    65024a45:	xor    eax,eax
    65024a47:	mov    rdi,rbx
    65024a4a:	repnz scas al,BYTE PTR es:[rdi]
    65024a4c:	not    rcx
    65024a4f:	sub    rcx,0x1
    65024a53:	mov    r15d,ecx
    65024a56:	jmp    0x65024c17
    65024a5b:	or     r14d,0x40
    65024a5f:	mov    r8d,0xa
    65024a65:	mov    DWORD PTR [rsp+0x40],r14d
    65024a6a:	jmp    0x65024ace
    65024a6c:	mov    r8d,0xa
    65024a72:	jmp    0x65024ace
    65024a74:	bts    r14d,0xf
    65024a79:	mov    r9d,0x10
    65024a7f:	mov    DWORD PTR [rsp+0x40],r14d
    65024a84:	mov    eax,0x7
    65024a89:	mov    DWORD PTR [rsp+0x74],eax
    65024a8d:	jmp    0x65024a98
    65024a8f:	mov    eax,0x27
    65024a94:	mov    DWORD PTR [rsp+0x74],eax
    65024a98:	test   r14b,r14b
    65024a9b:	mov    r8d,0x10
    65024aa1:	jns    0x65024ace
    65024aa3:	add    ax,0x51
    65024aa7:	mov    WORD PTR [rsp+0x64],0x30
    65024aae:	lea    r10d,[r8-0xe]
    65024ab2:	mov    WORD PTR [rsp+0x66],ax
    65024ab7:	jmp    0x65024ace
    65024ab9:	test   r14b,r14b
    65024abc:	mov    r8d,0x8
    65024ac2:	jns    0x65024ace
    65024ac4:	bts    r14d,0x9
    65024ac9:	mov    DWORD PTR [rsp+0x40],r14d
    65024ace:	bt     r14d,0xf
    65024ad3:	jae    0x65024ae4
    65024ad5:	add    rdi,0x8
    65024ad9:	mov    QWORD PTR [rsp+0x58],rdi
    65024ade:	mov    rdi,QWORD PTR [rdi-0x8]
    65024ae2:	jmp    0x65024b46
    65024ae4:	bt     r14d,0xc
    65024ae9:	jae    0x65024afa
    65024aeb:	add    rdi,0x8
    65024aef:	mov    QWORD PTR [rsp+0x58],rdi
    65024af4:	mov    rdi,QWORD PTR [rdi-0x8]
    65024af8:	jmp    0x65024b46
    65024afa:	test   r14b,0x20
    65024afe:	je     0x65024b25
    65024b00:	test   r14b,0x40
    65024b04:	je     0x65024b16
    65024b06:	add    rdi,0x8
    65024b0a:	mov    QWORD PTR [rsp+0x58],rdi
    65024b0f:	movsx  rdi,WORD PTR [rdi-0x8]
    65024b14:	jmp    0x65024b46
    65024b16:	add    rdi,0x8
    65024b1a:	mov    QWORD PTR [rsp+0x58],rdi
    65024b1f:	movzx  edi,WORD PTR [rdi-0x8]
    65024b23:	jmp    0x65024b46
    65024b25:	test   r14b,0x40
    65024b29:	je     0x65024b3a
    65024b2b:	add    rdi,0x8
    65024b2f:	mov    QWORD PTR [rsp+0x58],rdi
    65024b34:	movsxd rdi,DWORD PTR [rdi-0x8]
    65024b38:	jmp    0x65024b46
    65024b3a:	add    rdi,0x8
    65024b3e:	mov    QWORD PTR [rsp+0x58],rdi
    65024b43:	mov    edi,DWORD PTR [rdi-0x8]
    65024b46:	test   r14b,0x40
    65024b4a:	je     0x65024b5e
    65024b4c:	test   rdi,rdi
    65024b4f:	jns    0x65024b5e
    65024b51:	neg    rdi
    65024b54:	bts    r14d,0x8
    65024b59:	mov    DWORD PTR [rsp+0x40],r14d
    65024b5e:	bt     r14d,0xf
    65024b63:	jb     0x65024b6e
    65024b65:	bt     r14d,0xc
    65024b6a:	jb     0x65024b6e
    65024b6c:	mov    edi,edi
    65024b6e:	test   r9d,r9d
    65024b71:	jns    0x65024b7b
    65024b73:	mov    r9d,0x1
    65024b79:	jmp    0x65024b90
    65024b7b:	mov    eax,0x200
    65024b80:	and    r14d,0xfffffff7
    65024b84:	cmp    r9d,eax
    65024b87:	mov    DWORD PTR [rsp+0x40],r14d
    65024b8c:	cmovg  r9d,eax
    65024b90:	mov    r14d,DWORD PTR [rsp+0x74]
    65024b95:	test   rdi,rdi
    65024b98:	mov    eax,0x0
    65024b9d:	cmove  r10d,eax
    65024ba1:	lea    rbx,[rsp+0x2bf]
    65024ba9:	mov    DWORD PTR [rsp+0x4c],r10d
    65024bae:	xchg   ax,ax
    65024bb0:	mov    ecx,r9d
    65024bb3:	sub    r9d,0x1
    65024bb7:	test   ecx,ecx
    65024bb9:	jg     0x65024bc0
    65024bbb:	test   rdi,rdi
    65024bbe:	je     0x65024be1
    65024bc0:	xor    edx,edx
    65024bc2:	mov    rax,rdi
    65024bc5:	movsxd rcx,r8d
    65024bc8:	div    rcx
    65024bcb:	mov    rdi,rax
    65024bce:	lea    eax,[rdx+0x30]
    65024bd1:	cmp    eax,0x39
    65024bd4:	jle    0x65024bd9
    65024bd6:	add    eax,r14d
    65024bd9:	mov    BYTE PTR [rbx],al
    65024bdb:	sub    rbx,0x1
    65024bdf:	jmp    0x65024bb0
    65024be1:	mov    r14d,DWORD PTR [rsp+0x40]
    65024be6:	lea    rax,[rsp+0x2bf]
    65024bee:	mov    DWORD PTR [rsp+0x48],r9d
    65024bf3:	sub    eax,ebx
    65024bf5:	add    rbx,0x1
    65024bf9:	bt     r14d,0x9
    65024bfe:	mov    r15d,eax
    65024c01:	jae    0x65024c17
    65024c03:	test   eax,eax
    65024c05:	je     0x65024c0c
    65024c07:	cmp    BYTE PTR [rbx],0x30
    65024c0a:	je     0x65024c17
    65024c0c:	sub    rbx,0x1
    65024c10:	add    r15d,0x1
    65024c14:	mov    BYTE PTR [rbx],0x30
    65024c17:	cmp    DWORD PTR [rsp+0x70],0x0
    65024c1c:	jne    0x65024f23
    65024c22:	test   r14b,0x40
    65024c26:	je     0x65024c71
    65024c28:	bt     r14d,0x8
    65024c2d:	jae    0x65024c41
    65024c2f:	mov    eax,0x1
    65024c34:	mov    WORD PTR [rsp+0x64],0x2d
    65024c3b:	mov    DWORD PTR [rsp+0x4c],eax
    65024c3f:	jmp    0x65024c7b
    65024c41:	test   r14b,0x1
    65024c45:	je     0x65024c59
    65024c47:	mov    eax,0x1
    65024c4c:	mov    WORD PTR [rsp+0x64],0x2b
    65024c53:	mov    DWORD PTR [rsp+0x4c],eax
    65024c57:	jmp    0x65024c7b
    65024c59:	test   r14b,0x2
    65024c5d:	je     0x65024c77
    65024c5f:	mov    eax,0x1
    65024c64:	mov    WORD PTR [rsp+0x64],0x20
    65024c6b:	mov    DWORD PTR [rsp+0x4c],eax
    65024c6f:	jmp    0x65024c7b
    65024c71:	mov    eax,DWORD PTR [rsp+0x4c]
    65024c75:	jmp    0x65024c7b
    65024c77:	mov    eax,DWORD PTR [rsp+0x4c]
    65024c7b:	mov    r14d,DWORD PTR [rsp+0x50]
    65024c80:	mov    r12d,DWORD PTR [rsp+0x40]
    65024c85:	sub    r14d,r15d
    65024c88:	sub    r14d,eax
    65024c8b:	test   r12b,0xc
    65024c8f:	jne    0x65024ced
    65024c91:	test   r14d,r14d
    65024c94:	mov    edi,r14d
    65024c97:	jle    0x65024ced
    65024c99:	data16 xchg ax,ax
    65024c9c:	data16 data16 xchg ax,ax
    65024ca0:	sub    edi,0x1
    65024ca3:	test   BYTE PTR [r13+0x18],0x40
    65024ca8:	je     0x65024cba
    65024caa:	cmp    QWORD PTR [r13+0x10],0x0
    65024caf:	jne    0x65024cba
    65024cb1:	add    ebp,0x1
    65024cb4:	mov    DWORD PTR [rsp+0x44],ebp
    65024cb8:	jmp    0x65024cd3
    65024cba:	mov    rdx,r13
    65024cbd:	mov    cx,0x20
    65024cc1:	call   0x6502b7d0
    65024cc6:	cmp    ax,0xffff
    65024cca:	je     0x65024ce2
    65024ccc:	add    ebp,0x1
    65024ccf:	mov    DWORD PTR [rsp+0x44],ebp
    65024cd3:	cmp    ebp,0xffffffff
    65024cd6:	je     0x65024cdc
    65024cd8:	test   edi,edi
    65024cda:	jg     0x65024ca0
    65024cdc:	mov    eax,DWORD PTR [rsp+0x4c]
    65024ce0:	jmp    0x65024ced
    65024ce2:	mov    eax,DWORD PTR [rsp+0x4c]
    65024ce6:	or     ebp,0xffffffff
    65024ce9:	mov    DWORD PTR [rsp+0x44],ebp
    65024ced:	test   BYTE PTR [r13+0x18],0x40
    65024cf2:	mov    esi,eax
    65024cf4:	lea    rdi,[rsp+0x64]
    65024cf9:	je     0x65024d0d
    65024cfb:	cmp    QWORD PTR [r13+0x10],0x0
    65024d00:	jne    0x65024d0d
    65024d02:	add    ebp,eax
    65024d04:	mov    DWORD PTR [rsp+0x44],ebp
    65024d08:	jmp    0x65024daf
    65024d0d:	test   eax,eax
    65024d0f:	jle    0x65024daf
    65024d15:	xor    r12d,r12d
    65024d18:	data16 data16 xchg ax,ax
    65024d1c:	data16 data16 xchg ax,ax
    65024d20:	sub    esi,0x1
    65024d23:	test   BYTE PTR [r13+0x18],0x40
    65024d28:	je     0x65024d39
    65024d2a:	cmp    QWORD PTR [r13+0x10],r12
    65024d2e:	jne    0x65024d39
    65024d30:	add    ebp,0x1
    65024d33:	mov    DWORD PTR [rsp+0x44],ebp
    65024d37:	jmp    0x65024d5a
    65024d39:	movzx  ecx,WORD PTR [rdi]
    65024d3c:	mov    rdx,r13
    65024d3f:	call   0x6502b7d0
    65024d44:	cmp    ax,0xffff
    65024d48:	jne    0x65024d53
    65024d4a:	or     ebp,0xffffffff
    65024d4d:	mov    DWORD PTR [rsp+0x44],ebp
    65024d51:	jmp    0x65024d5a
    65024d53:	add    ebp,0x1
    65024d56:	mov    DWORD PTR [rsp+0x44],ebp
    65024d5a:	add    rdi,0x2
    65024d5e:	cmp    ebp,0xffffffff
    65024d61:	jne    0x65024da2
    65024d63:	call   0x65020420
    65024d68:	cmp    DWORD PTR [rax],0x2a
    65024d6b:	jne    0x65024daa
    65024d6d:	test   BYTE PTR [r13+0x18],0x40
    65024d72:	je     0x65024d84
    65024d74:	cmp    QWORD PTR [r13+0x10],r12
    65024d78:	jne    0x65024d84
    65024d7a:	mov    ebp,r12d
    65024d7d:	mov    DWORD PTR [rsp+0x44],r12d
    65024d82:	jmp    0x65024da2
    65024d84:	mov    rdx,r13
    65024d87:	mov    cx,0x3f
    65024d8b:	call   0x6502b7d0
    65024d90:	mov    ebp,r12d
    65024d93:	cmp    ax,0xffff
    65024d97:	setne  bpl
    65024d9b:	sub    ebp,0x1
    65024d9e:	mov    DWORD PTR [rsp+0x44],ebp
    65024da2:	test   esi,esi
    65024da4:	jg     0x65024d20
    65024daa:	mov    r12d,DWORD PTR [rsp+0x40]
    65024daf:	test   r12b,0x8
    65024db3:	je     0x65024e08
    65024db5:	test   r12b,0x4
    65024db9:	jne    0x65024e08
    65024dbb:	test   r14d,r14d
    65024dbe:	mov    edi,r14d
    65024dc1:	jle    0x65024e08
    65024dc3:	sub    edi,0x1
    65024dc6:	test   BYTE PTR [r13+0x18],0x40
    65024dcb:	je     0x65024ddd
    65024dcd:	cmp    QWORD PTR [r13+0x10],0x0
    65024dd2:	jne    0x65024ddd
    65024dd4:	add    ebp,0x1
    65024dd7:	mov    DWORD PTR [rsp+0x44],ebp
    65024ddb:	jmp    0x65024df6
    65024ddd:	mov    rdx,r13
    65024de0:	mov    cx,0x30
    65024de4:	call   0x6502b7d0
    65024de9:	cmp    ax,0xffff
    65024ded:	je     0x65024e01
    65024def:	add    ebp,0x1
    65024df2:	mov    DWORD PTR [rsp+0x44],ebp
    65024df6:	cmp    ebp,0xffffffff
    65024df9:	je     0x65024e08
    65024dfb:	test   edi,edi
    65024dfd:	jg     0x65024dc3
    65024dff:	jmp    0x65024e08
    65024e01:	or     ebp,0xffffffff
    65024e04:	mov    DWORD PTR [rsp+0x44],ebp
    65024e08:	cmp    DWORD PTR [rsp+0x60],0x0
    65024e0d:	jne    0x65024eae
    65024e13:	test   r15d,r15d
    65024e16:	jle    0x65024eae
    65024e1c:	mov    rdi,rbx
    65024e1f:	mov    esi,r15d
    65024e22:	xchg   ax,ax
    65024e24:	data16 data16 xchg ax,ax
    65024e28:	data16 data16 xchg ax,ax
    65024e2c:	data16 data16 xchg ax,ax
    65024e30:	mov    rax,QWORD PTR [rsp+0x78]
    65024e35:	lea    r9,[rsp+0x78]
    65024e3a:	lea    rcx,[rsp+0x68]
    65024e3f:	movsxd r8,DWORD PTR [rax+0x10c]
    65024e46:	mov    rdx,rdi
    65024e49:	sub    esi,0x1
    65024e4c:	call   0x6502ba60
    65024e51:	test   eax,eax
    65024e53:	movsxd r12,eax
    65024e56:	jle    0x65024ea0
    65024e58:	test   BYTE PTR [r13+0x18],0x40
    65024e5d:	je     0x65024e6f
    65024e5f:	cmp    QWORD PTR [r13+0x10],0x0
    65024e64:	jne    0x65024e6f
    65024e66:	add    ebp,0x1
    65024e69:	mov    DWORD PTR [rsp+0x44],ebp
    65024e6d:	jmp    0x65024e92
    65024e6f:	movzx  ecx,WORD PTR [rsp+0x68]
    65024e74:	mov    rdx,r13
    65024e77:	call   0x6502b7d0
    65024e7c:	cmp    ax,0xffff
    65024e80:	jne    0x65024e8b
    65024e82:	or     ebp,0xffffffff
    65024e85:	mov    DWORD PTR [rsp+0x44],ebp
    65024e89:	jmp    0x65024e92
    65024e8b:	add    ebp,0x1
    65024e8e:	mov    DWORD PTR [rsp+0x44],ebp
    65024e92:	add    rdi,r12
    65024e95:	test   esi,esi
    65024e97:	jg     0x65024e30
    65024e99:	mov    r12d,DWORD PTR [rsp+0x40]
    65024e9e:	jmp    0x65024ec5
    65024ea0:	mov    r14d,DWORD PTR [rsp+0x40]
    65024ea5:	or     ebp,0xffffffff
    65024ea8:	mov    DWORD PTR [rsp+0x44],ebp
    65024eac:	jmp    0x65024f23
    65024eae:	lea    r9,[rsp+0x44]
    65024eb3:	mov    r8,r13
    65024eb6:	mov    edx,r15d
    65024eb9:	mov    rcx,rbx
    65024ebc:	call   0x65024100
    65024ec1:	mov    ebp,DWORD PTR [rsp+0x44]
    65024ec5:	test   ebp,ebp
    65024ec7:	js     0x65024f83
    65024ecd:	test   r12b,0x4
    65024ed1:	je     0x65024f8a
    65024ed7:	test   r14d,r14d
    65024eda:	jle    0x65024f7c
    65024ee0:	sub    r14d,0x1
    65024ee4:	test   BYTE PTR [r13+0x18],0x40
    65024ee9:	je     0x65024efb
    65024eeb:	cmp    QWORD PTR [r13+0x10],0x0
    65024ef0:	jne    0x65024efb
    65024ef2:	add    ebp,0x1
    65024ef5:	mov    DWORD PTR [rsp+0x44],ebp
    65024ef9:	jmp    0x65024f14
    65024efb:	mov    rdx,r13
    65024efe:	mov    cx,0x20
    65024f02:	call   0x6502b7d0
    65024f07:	cmp    ax,0xffff
    65024f0b:	je     0x65024f67
    65024f0d:	add    ebp,0x1
    65024f10:	mov    DWORD PTR [rsp+0x44],ebp
    65024f14:	cmp    ebp,0xffffffff
    65024f17:	je     0x65024f75
    65024f19:	test   r14d,r14d
    65024f1c:	jg     0x65024ee0
    65024f1e:	mov    r14d,DWORD PTR [rsp+0x40]
    65024f23:	mov    rax,QWORD PTR [rsp+0xa0]
    65024f2b:	test   rax,rax
    65024f2e:	je     0x65024f91
    65024f30:	mov    rcx,rax
    65024f33:	call   0x6501fc00
    65024f38:	mov    r9d,DWORD PTR [rsp+0x48]
    65024f3d:	mov    rdi,QWORD PTR [rsp+0x58]
    65024f42:	mov    rsi,QWORD PTR [rsp+0xa8]
    65024f4a:	mov    r10d,DWORD PTR [rsp+0x4c]
    65024f4f:	mov    r11d,DWORD PTR [rsp+0x50]
    65024f54:	xor    ecx,ecx
    65024f56:	lea    rdx,[rip+0xfffffffffffdb0a3]        # 0x65000000
    65024f5d:	mov    QWORD PTR [rsp+0xa0],rcx
    65024f65:	jmp    0x65024fbd
    65024f67:	mov    r14d,DWORD PTR [rsp+0x40]
    65024f6c:	or     ebp,0xffffffff
    65024f6f:	mov    DWORD PTR [rsp+0x44],ebp
    65024f73:	jmp    0x65024f23
    65024f75:	mov    r14d,DWORD PTR [rsp+0x40]
    65024f7a:	jmp    0x65024f23
    65024f7c:	mov    r14d,DWORD PTR [rsp+0x40]
    65024f81:	jmp    0x65024f23
    65024f83:	mov    r14d,DWORD PTR [rsp+0x40]
    65024f88:	jmp    0x65024f23
    65024f8a:	mov    r14d,DWORD PTR [rsp+0x40]
    65024f8f:	jmp    0x65024f23
    65024f91:	mov    r9d,DWORD PTR [rsp+0x48]
    65024f96:	mov    rdi,QWORD PTR [rsp+0x58]
    65024f9b:	mov    rsi,QWORD PTR [rsp+0xa8]
    65024fa3:	mov    r10d,DWORD PTR [rsp+0x4c]
    65024fa8:	mov    r11d,DWORD PTR [rsp+0x50]
    65024fad:	lea    rdx,[rip+0xfffffffffffdb04c]        # 0x65000000
    65024fb4:	jmp    0x65024fbd
    65024fb6:	lea    rdx,[rip+0xfffffffffffdb043]        # 0x65000000
    65024fbd:	mov    r12w,WORD PTR [rsi]
    65024fc1:	test   r12w,r12w
    65024fc5:	je     0x65025013
    65024fc7:	mov    r8d,DWORD PTR [rsp+0x98]
    65024fcf:	jmp    0x650243a0
    65024fd4:	call   0x65020420
    65024fd9:	xor    r9d,r9d
    65024fdc:	xor    r8d,r8d
    65024fdf:	mov    DWORD PTR [rax],0x16
    65024fe5:	xor    eax,eax
    65024fe7:	xor    edx,edx
    65024fe9:	xor    ecx,ecx
    65024feb:	mov    QWORD PTR [rsp+0x20],rax
    65024ff0:	call   0x6501d9c0
    65024ff5:	cmp    BYTE PTR [rsp+0x90],0x0
    65024ffd:	je     0x6502500e
    65024fff:	mov    rax,QWORD PTR [rsp+0x88]
    65025007:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502500e:	or     eax,0xffffffff
    65025011:	jmp    0x6502502e
    65025013:	mov    rdx,QWORD PTR [rsp+0x88]
    6502501b:	cmp    BYTE PTR [rsp+0x90],0x0
    65025023:	je     0x6502502c
    65025025:	and    DWORD PTR [rdx+0xc8],0xfffffffd
    6502502c:	mov    eax,ebp
    6502502e:	mov    r12,QWORD PTR [rsp+0x4e0]
    65025036:	mov    rbp,QWORD PTR [rsp+0x4e8]
    6502503e:	mov    r15,QWORD PTR [rsp+0x4d8]
    65025046:	mov    rcx,QWORD PTR [rsp+0x4c0]
    6502504e:	xor    rcx,rsp
    65025051:	call   0x6501e650
    65025056:	add    rsp,0x4f0
    6502505d:	pop    r14
    6502505f:	pop    r13
    65025061:	pop    rdi
    65025062:	pop    rsi
    65025063:	pop    rbx
    65025064:	ret    
    65025065:	data16 xchg ax,ax
    65025068:	rex.R
    65025069:	rex.RX add r8b,BYTE PTR [rax]
    6502506c:	adc    al,0x44
    6502506e:	add    al,BYTE PTR [rax]
    65025070:	rex.W
    65025071:	add    r8b,BYTE PTR [rax]
    65025074:	mov    al,0x44
    65025076:	add    al,BYTE PTR [rax]
    65025078:	inc    BYTE PTR [rdx+rax*1+0x0]
    6502507c:	or     al,0x45
    6502507e:	add    al,BYTE PTR [rax]
    65025080:	push   rdx
    65025081:	add    r8b,BYTE PTR [r8]
    65025084:	mov    esp,0xde000246
    65025089:	rex.W add al,BYTE PTR [rax]
    6502508c:	loop   0x650250d4
    6502508e:	add    al,BYTE PTR [rax]
    65025090:	loop   0x650250d9
    65025092:	add    al,BYTE PTR [rax]
    65025094:	test   BYTE PTR [rdx+0x2],cl
    65025097:	add    BYTE PTR [rcx+0x47],bh
    6502509a:	add    al,BYTE PTR [rax]
    6502509c:	out    dx,al
    6502509d:	rex.W add al,BYTE PTR [rax]
    650250a0:	hlt    
    650250a1:	rex.RX add r8b,BYTE PTR [rax]
    650250a4:	pop    rbx
    650250a5:	rex.WX add al,BYTE PTR [rax]
    650250a8:	lahf   
    650250a9:	rex.W add al,BYTE PTR [rax]
    650250ac:	mov    ecx,0x7400024a
    650250b1:	rex.WX add al,BYTE PTR [rax]
    650250b4:	hlt    
    650250b5:	rex.RXB add r8b,BYTE PTR [r8]
    650250b8:	ins    BYTE PTR es:[rdi],dx
    650250b9:	rex.WX add al,BYTE PTR [rax]
    650250bc:	(bad)
    650250c0:	(bad)  
    650250c1:	rex.WR add r8b,BYTE PTR [rax]
    650250c4:	add    BYTE PTR [rsi],cl
    650250c6:	add    DWORD PTR [rsi],ecx
    650250c8:	add    BYTE PTR [rsi],cl
    650250ca:	add    BYTE PTR [rsi],cl
    650250cc:	(bad)  
    650250cd:	(bad)  
    650250ce:	(bad)  
    650250cf:	(bad)  
    650250d0:	(bad)  
    650250d1:	(bad)  
    650250d2:	(bad)  
    650250d3:	(bad)  
    650250d4:	(bad)  
    650250d5:	(bad)  
    650250d6:	add    cl,BYTE PTR [rsi]
    650250d8:	(bad)  
    650250d9:	(bad)  
    650250da:	(bad)  
    650250db:	add    ecx,DWORD PTR [rsi]
    650250dd:	add    al,0xe
    650250df:	(bad)  
    650250e0:	(bad)  
    650250e1:	(bad)  
    650250e2:	(bad)  
    650250e3:	(bad)  
    650250e4:	add    eax,0x507060e
    650250e9:	add    eax,0xe070e05
    650250ee:	(bad)  
    650250ef:	(bad)  
    650250f0:	(bad)  
    650250f1:	or     BYTE PTR [rcx],cl
    650250f3:	or     cl,BYTE PTR [rsi]
    650250f5:	(bad)  
    650250f6:	or     ecx,DWORD PTR [rsi]
    650250f8:	or     al,0xe
    650250fa:	(bad)  
    650250fb:	or     eax,0xcccccccc
    65025100:	mov    QWORD PTR [rsp+0x8],rbx
    65025105:	mov    QWORD PTR [rsp+0x10],rbp
    6502510a:	mov    QWORD PTR [rsp+0x18],rsi
    6502510f:	push   rdi
    65025110:	sub    rsp,0x20
    65025114:	test   BYTE PTR [r8+0x18],0x40
    65025119:	mov    rbx,r9
    6502511c:	mov    rdi,r8
    6502511f:	mov    esi,edx
    65025121:	mov    rbp,rcx
    65025124:	je     0x65025132
    65025126:	cmp    QWORD PTR [r8+0x10],0x0
    6502512b:	jne    0x65025132
    6502512d:	add    DWORD PTR [r9],edx
    65025130:	jmp    0x650251a4
    65025132:	test   edx,edx
    65025134:	jle    0x650251a4
    65025136:	sub    esi,0x1
    65025139:	test   BYTE PTR [rdi+0x18],0x40
    6502513d:	je     0x65025146
    6502513f:	cmp    QWORD PTR [rdi+0x10],0x0
    65025144:	je     0x65025160
    65025146:	movzx  ecx,WORD PTR [rbp+0x0]
    6502514a:	mov    rdx,rdi
    6502514d:	call   0x6502b7d0
    65025152:	cmp    ax,0xffff
    65025156:	jne    0x65025160
    65025158:	mov    DWORD PTR [rbx],0xffffffff
    6502515e:	jmp    0x65025163
    65025160:	add    DWORD PTR [rbx],0x1
    65025163:	add    rbp,0x2
    65025167:	cmp    DWORD PTR [rbx],0xffffffff
    6502516a:	jne    0x650251a0
    6502516c:	call   0x65020420
    65025171:	cmp    DWORD PTR [rax],0x2a
    65025174:	jne    0x650251a4
    65025176:	test   BYTE PTR [rdi+0x18],0x40
    6502517a:	je     0x65025183
    6502517c:	cmp    QWORD PTR [rdi+0x10],0x0
    65025181:	je     0x6502519d
    65025183:	mov    rdx,rdi
    65025186:	mov    cx,0x3f
    6502518a:	call   0x6502b7d0
    6502518f:	cmp    ax,0xffff
    65025193:	jne    0x6502519d
    65025195:	mov    DWORD PTR [rbx],0xffffffff
    6502519b:	jmp    0x650251a0
    6502519d:	add    DWORD PTR [rbx],0x1
    650251a0:	test   esi,esi
    650251a2:	jg     0x65025136
    650251a4:	mov    rbx,QWORD PTR [rsp+0x30]
    650251a9:	mov    rbp,QWORD PTR [rsp+0x38]
    650251ae:	mov    rsi,QWORD PTR [rsp+0x40]
    650251b3:	add    rsp,0x20
    650251b7:	pop    rdi
    650251b8:	ret    
    650251b9:	int3   
    650251ba:	int3   
    650251bb:	int3   
    650251bc:	int3   
    650251bd:	int3   
    650251be:	int3   
    650251bf:	int3   
    650251c0:	rex push rbx
    650251c2:	push   rsi
    650251c3:	push   rdi
    650251c4:	push   r13
    650251c6:	push   r14
    650251c8:	sub    rsp,0x4f0
    650251cf:	mov    rax,QWORD PTR [rip+0x1df4a]        # 0x65043120
    650251d6:	xor    rax,rsp
    650251d9:	mov    QWORD PTR [rsp+0x4c0],rax
    650251e1:	xor    ebx,ebx
    650251e3:	test   r8,r8
    650251e6:	mov    rdi,r9
    650251e9:	mov    QWORD PTR [rsp+0x58],r9
    650251ee:	mov    rsi,rdx
    650251f1:	mov    r13,rcx
    650251f4:	mov    DWORD PTR [rsp+0x98],ebx
    650251fb:	mov    r14d,ebx
    650251fe:	mov    DWORD PTR [rsp+0x44],ebx
    65025202:	mov    r11d,ebx
    65025205:	mov    DWORD PTR [rsp+0x54],ebx
    65025209:	mov    r9d,ebx
    6502520c:	mov    DWORD PTR [rsp+0x4c],ebx
    65025210:	mov    r10d,ebx
    65025213:	mov    DWORD PTR [rsp+0x50],ebx
    65025217:	mov    DWORD PTR [rsp+0x70],ebx
    6502521b:	mov    DWORD PTR [rsp+0x60],ebx
    6502521f:	mov    BYTE PTR [rsp+0x90],bl
    65025226:	jne    0x650252ea
    6502522c:	call   0x65020a30
    65025231:	mov    QWORD PTR [rsp+0x88],rax
    65025239:	mov    rdx,rax
    6502523c:	mov    rcx,QWORD PTR [rax+0xc0]
    65025243:	cmp    rcx,QWORD PTR [rip+0x1e756]        # 0x650439a0
    6502524a:	mov    QWORD PTR [rsp+0x78],rcx
    6502524f:	mov    rax,QWORD PTR [rax+0xb8]
    65025256:	mov    QWORD PTR [rsp+0x80],rax
    6502525e:	je     0x65025288
    65025260:	mov    ecx,DWORD PTR [rdx+0xc8]
    65025266:	test   DWORD PTR [rip+0x1e5bc],ecx        # 0x65043828
    6502526c:	jne    0x65025288
    6502526e:	call   0x65023e90
    65025273:	mov    rdx,QWORD PTR [rsp+0x88]
    6502527b:	mov    QWORD PTR [rsp+0x78],rax
    65025280:	mov    rax,QWORD PTR [rsp+0x80]
    65025288:	cmp    rax,QWORD PTR [rip+0x1e491]        # 0x65043720
    6502528f:	je     0x650252b4
    65025291:	mov    eax,DWORD PTR [rdx+0xc8]
    65025297:	test   DWORD PTR [rip+0x1e58b],eax        # 0x65043828
    6502529d:	jne    0x650252b4
    6502529f:	call   0x65023340
    650252a4:	mov    rdx,QWORD PTR [rsp+0x88]
    650252ac:	mov    QWORD PTR [rsp+0x80],rax
    650252b4:	test   BYTE PTR [rdx+0xc8],0x2
    650252bb:	jne    0x650252df
    650252bd:	or     DWORD PTR [rdx+0xc8],0x2
    650252c4:	mov    rdx,QWORD PTR [rsp+0x88]
    650252cc:	mov    r9d,ebx
    650252cf:	mov    BYTE PTR [rsp+0x90],0x1
    650252d7:	mov    r10d,ebx
    650252da:	mov    r11d,ebx
    650252dd:	jmp    0x65025305
    650252df:	mov    r9d,ebx
    650252e2:	mov    r10d,ebx
    650252e5:	mov    r11d,ebx
    650252e8:	jmp    0x65025305
    650252ea:	mov    rax,QWORD PTR [r8]
    650252ed:	lea    rcx,[rsp+0x78]
    650252f2:	mov    QWORD PTR [rcx],rax
    650252f5:	mov    rax,QWORD PTR [r8+0x8]
    650252f9:	mov    QWORD PTR [rcx+0x8],rax
    650252fd:	mov    rdx,QWORD PTR [rsp+0x88]
    65025305:	test   r13,r13
    65025308:	jne    0x65025349
    6502530a:	call   0x65020420
    6502530f:	xor    r9d,r9d
    65025312:	xor    r8d,r8d
    65025315:	xor    edx,edx
    65025317:	xor    ecx,ecx
    65025319:	mov    QWORD PTR [rsp+0x20],rbx
    6502531e:	mov    DWORD PTR [rax],0x16
    65025324:	call   0x6501d9c0
    65025329:	cmp    BYTE PTR [rsp+0x90],bl
    65025330:	je     0x65025341
    65025332:	mov    rax,QWORD PTR [rsp+0x88]
    6502533a:	and    DWORD PTR [rax+0xc8],0xfffffffd
    65025341:	or     eax,0xffffffff
    65025344:	jmp    0x650260c9
    65025349:	test   rsi,rsi
    6502534c:	je     0x6502530a
    6502534e:	xor    r8d,r8d
    65025351:	mov    QWORD PTR [rsp+0x4e8],rbp
    65025359:	mov    QWORD PTR [rsp+0x4e0],r12
    65025361:	movzx  r12d,WORD PTR [rsi]
    65025365:	mov    eax,r8d
    65025368:	mov    rcx,r8
    6502536b:	test   r12w,r12w
    6502536f:	mov    QWORD PTR [rsp+0x4d8],r15
    65025377:	mov    ebp,r8d
    6502537a:	mov    DWORD PTR [rsp+0x48],r8d
    6502537f:	mov    DWORD PTR [rsp+0x40],eax
    65025383:	mov    QWORD PTR [rsp+0xa0],rcx
    6502538b:	mov    r15d,r8d
    6502538e:	je     0x6502609e
    65025394:	mov    rbx,QWORD PTR [rsp+0xb0]
    6502539c:	lea    rdx,[rip+0xfffffffffffdac5d]        # 0x65000000
    650253a3:	nop
    650253a4:	data16 data16 xchg ax,ax
    650253a8:	data16 data16 xchg ax,ax
    650253ac:	data16 data16 xchg ax,ax
    650253b0:	add    rsi,0x2
    650253b4:	test   ebp,ebp
    650253b6:	mov    QWORD PTR [rsp+0xa8],rsi
    650253be:	js     0x6502604e
    650253c4:	lea    eax,[r12-0x20]
    650253c9:	cmp    ax,0x58
    650253cd:	ja     0x650253df
    650253cf:	movzx  eax,r12w
    650253d3:	mov    cl,BYTE PTR [rax+rdx*1+0x36e00]
    650253da:	and    ecx,0xf
    650253dd:	jmp    0x650253e2
    650253df:	mov    ecx,r8d
    650253e2:	movsxd rax,ecx
    650253e5:	lea    rcx,[rax+rax*8]
    650253e9:	movsxd rax,DWORD PTR [rsp+0x40]
    650253ee:	add    rcx,rax
    650253f1:	movzx  eax,BYTE PTR [rcx+rdx*1+0x36e20]
    650253f9:	shr    eax,0x4
    650253fc:	cmp    eax,0x8
    650253ff:	mov    DWORD PTR [rsp+0x40],eax
    65025403:	je     0x65026057
    65025409:	cmp    eax,0x7
    6502540c:	ja     0x65026040
    65025412:	mov    ecx,DWORD PTR [rdx+rax*4+0x260e8]
    65025419:	add    rcx,rdx
    6502541c:	jmp    rcx
    6502541e:	or     r9d,0xffffffff
    65025422:	mov    DWORD PTR [rsp+0x9c],r8d
    6502542a:	mov    DWORD PTR [rsp+0x70],r8d
    6502542f:	mov    r11d,r8d
    65025432:	mov    DWORD PTR [rsp+0x54],r8d
    65025437:	mov    r10d,r8d
    6502543a:	mov    DWORD PTR [rsp+0x4c],r9d
    6502543f:	mov    DWORD PTR [rsp+0x50],r8d
    65025444:	mov    r14d,r8d
    65025447:	mov    DWORD PTR [rsp+0x44],r8d
    6502544c:	mov    DWORD PTR [rsp+0x60],r8d
    65025451:	jmp    0x65026040
    65025456:	movzx  eax,r12w
    6502545a:	cmp    eax,0x20
    6502545d:	je     0x650254c0
    6502545f:	cmp    eax,0x23
    65025462:	je     0x650254ad
    65025464:	cmp    eax,0x2b
    65025467:	je     0x6502549b
    65025469:	cmp    eax,0x2d
    6502546c:	je     0x65025489
    6502546e:	cmp    eax,0x30
    65025471:	jne    0x6502603c
    65025477:	mov    eax,DWORD PTR [rsp+0x40]
    6502547b:	or     r14d,0x8
    6502547f:	mov    DWORD PTR [rsp+0x44],r14d
    65025484:	jmp    0x65026040
    65025489:	mov    eax,DWORD PTR [rsp+0x40]
    6502548d:	or     r14d,0x4
    65025491:	mov    DWORD PTR [rsp+0x44],r14d
    65025496:	jmp    0x65026040
    6502549b:	mov    eax,DWORD PTR [rsp+0x40]
    6502549f:	or     r14d,0x1
    650254a3:	mov    DWORD PTR [rsp+0x44],r14d
    650254a8:	jmp    0x65026040
    650254ad:	mov    eax,DWORD PTR [rsp+0x40]
    650254b1:	bts    r14d,0x7
    650254b6:	mov    DWORD PTR [rsp+0x44],r14d
    650254bb:	jmp    0x65026040
    650254c0:	mov    eax,DWORD PTR [rsp+0x40]
    650254c4:	or     r14d,0x2
    650254c8:	mov    DWORD PTR [rsp+0x44],r14d
    650254cd:	jmp    0x65026040
    650254d2:	cmp    r12w,0x2a
    650254d7:	jne    0x65025509
    650254d9:	mov    r11d,DWORD PTR [rdi]
    650254dc:	add    rdi,0x8
    650254e0:	test   r11d,r11d
    650254e3:	mov    QWORD PTR [rsp+0x58],rdi
    650254e8:	mov    DWORD PTR [rsp+0x54],r11d
    650254ed:	jns    0x65026040
    650254f3:	or     r14d,0x4
    650254f7:	neg    r11d
    650254fa:	mov    DWORD PTR [rsp+0x54],r11d
    650254ff:	mov    DWORD PTR [rsp+0x44],r14d
    65025504:	jmp    0x65026040
    65025509:	movzx  eax,r12w
    6502550d:	lea    ecx,[r11+r11*4]
    65025511:	lea    r11d,[rax+rcx*2-0x30]
    65025516:	mov    eax,DWORD PTR [rsp+0x40]
    6502551a:	mov    DWORD PTR [rsp+0x54],r11d
    6502551f:	jmp    0x65026040
    65025524:	mov    r9d,r8d
    65025527:	mov    DWORD PTR [rsp+0x4c],r8d
    6502552c:	jmp    0x65026040
    65025531:	cmp    r12w,0x2a
    65025536:	jne    0x65025560
    65025538:	mov    r9d,DWORD PTR [rdi]
    6502553b:	add    rdi,0x8
    6502553f:	test   r9d,r9d
    65025542:	mov    QWORD PTR [rsp+0x58],rdi
    65025547:	mov    DWORD PTR [rsp+0x4c],r9d
    6502554c:	jns    0x65026040
    65025552:	or     r9d,0xffffffff
    65025556:	mov    DWORD PTR [rsp+0x4c],r9d
    6502555b:	jmp    0x65026040
    65025560:	movzx  eax,r12w
    65025564:	lea    ecx,[r9+r9*4]
    65025568:	lea    r9d,[rax+rcx*2-0x30]
    6502556d:	mov    eax,DWORD PTR [rsp+0x40]
    65025571:	mov    DWORD PTR [rsp+0x4c],r9d
    65025576:	jmp    0x65026040
    6502557b:	movzx  eax,r12w
    6502557f:	cmp    eax,0x49
    65025582:	je     0x650255eb
    65025584:	cmp    eax,0x68
    65025587:	je     0x650255d9
    65025589:	cmp    eax,0x6c
    6502558c:	je     0x650255aa
    6502558e:	cmp    eax,0x77
    65025591:	jne    0x65026012
    65025597:	mov    eax,DWORD PTR [rsp+0x40]
    6502559b:	bts    r14d,0xb
    650255a0:	mov    DWORD PTR [rsp+0x44],r14d
    650255a5:	jmp    0x65026040
    650255aa:	cmp    WORD PTR [rsi],0x6c
    650255ae:	jne    0x650255c7
    650255b0:	mov    eax,DWORD PTR [rsp+0x40]
    650255b4:	add    rsi,0x2
    650255b8:	bts    r14d,0xc
    650255bd:	mov    DWORD PTR [rsp+0x44],r14d
    650255c2:	jmp    0x65026040
    650255c7:	mov    eax,DWORD PTR [rsp+0x40]
    650255cb:	or     r14d,0x10
    650255cf:	mov    DWORD PTR [rsp+0x44],r14d
    650255d4:	jmp    0x65026040
    650255d9:	mov    eax,DWORD PTR [rsp+0x40]
    650255dd:	or     r14d,0x20
    650255e1:	mov    DWORD PTR [rsp+0x44],r14d
    650255e6:	jmp    0x65026040
    650255eb:	movzx  eax,WORD PTR [rsi]
    650255ee:	bts    r14d,0xf
    650255f3:	cmp    ax,0x36
    650255f7:	mov    DWORD PTR [rsp+0x44],r14d
    650255fc:	jne    0x6502561c
    650255fe:	cmp    WORD PTR [rsi+0x2],0x34
    65025603:	jne    0x6502561c
    65025605:	mov    eax,DWORD PTR [rsp+0x40]
    65025609:	add    rsi,0x4
    6502560d:	bts    r14d,0xf
    65025612:	mov    DWORD PTR [rsp+0x44],r14d
    65025617:	jmp    0x65026040
    6502561c:	cmp    ax,0x33
    65025620:	jne    0x65025640
    65025622:	cmp    WORD PTR [rsi+0x2],0x32
    65025627:	jne    0x65025640
    65025629:	mov    eax,DWORD PTR [rsp+0x40]
    6502562d:	add    rsi,0x4
    65025631:	btr    r14d,0xf
    65025636:	mov    DWORD PTR [rsp+0x44],r14d
    6502563b:	jmp    0x65026040
    65025640:	cmp    ax,0x64
    65025644:	je     0x65026036
    6502564a:	cmp    ax,0x69
    6502564e:	je     0x65026030
    65025654:	cmp    ax,0x6f
    65025658:	je     0x6502602a
    6502565e:	cmp    ax,0x75
    65025662:	je     0x65026024
    65025668:	cmp    ax,0x78
    6502566c:	je     0x6502601e
    65025672:	cmp    ax,0x58
    65025676:	je     0x65026018
    6502567c:	mov    eax,r8d
    6502567f:	mov    DWORD PTR [rsp+0x40],eax
    65025683:	test   BYTE PTR [r13+0x18],0x40
    65025688:	mov    DWORD PTR [rsp+0x60],0x1
    65025690:	je     0x650256a5
    65025692:	cmp    QWORD PTR [r13+0x10],0x0
    65025697:	jne    0x650256a5
    65025699:	add    ebp,0x1
    6502569c:	mov    DWORD PTR [rsp+0x48],ebp
    650256a0:	jmp    0x65026040
    650256a5:	mov    rdx,r13
    650256a8:	movzx  ecx,r12w
    650256ac:	call   0x6502b7d0
    650256b1:	cmp    ax,0xffff
    650256b5:	jne    0x650256e0
    650256b7:	mov    r9d,DWORD PTR [rsp+0x4c]
    650256bc:	mov    eax,DWORD PTR [rsp+0x40]
    650256c0:	mov    r10d,DWORD PTR [rsp+0x50]
    650256c5:	mov    r11d,DWORD PTR [rsp+0x54]
    650256ca:	or     ebp,0xffffffff
    650256cd:	lea    rdx,[rip+0xfffffffffffda92c]        # 0x65000000
    650256d4:	mov    DWORD PTR [rsp+0x48],ebp
    650256d8:	xor    r8d,r8d
    650256db:	jmp    0x65026040
    650256e0:	mov    r9d,DWORD PTR [rsp+0x4c]
    650256e5:	mov    eax,DWORD PTR [rsp+0x40]
    650256e9:	mov    r10d,DWORD PTR [rsp+0x50]
    650256ee:	mov    r11d,DWORD PTR [rsp+0x54]
    650256f3:	add    ebp,0x1
    650256f6:	lea    rdx,[rip+0xfffffffffffda903]        # 0x65000000
    650256fd:	mov    DWORD PTR [rsp+0x48],ebp
    65025701:	xor    r8d,r8d
    65025704:	jmp    0x65026040
    65025709:	movzx  eax,r12w
    6502570d:	add    eax,0xffffffbf
    65025710:	cmp    eax,0x37
    65025713:	ja     0x65025c6b
    65025719:	cdqe   
    6502571b:	movzx  eax,BYTE PTR [rdx+rax*1+0x26144]
    65025723:	mov    ecx,DWORD PTR [rdx+rax*4+0x26108]
    6502572a:	add    rcx,rdx
    6502572d:	jmp    rcx
    6502572f:	test   r14d,0x830
    65025736:	jne    0x65025741
    65025738:	or     r14d,0x20
    6502573c:	mov    DWORD PTR [rsp+0x44],r14d
    65025741:	movzx  eax,WORD PTR [rdi]
    65025744:	add    rdi,0x8
    65025748:	test   r14b,0x20
    6502574c:	mov    WORD PTR [rsp+0x68],ax
    65025751:	mov    DWORD PTR [rsp+0x60],0x1
    65025759:	mov    QWORD PTR [rsp+0x58],rdi
    6502575e:	je     0x650257ab
    65025760:	mov    BYTE PTR [rsp+0x6c],al
    65025764:	mov    rax,QWORD PTR [rsp+0x78]
    65025769:	mov    BYTE PTR [rsp+0x6d],0x0
    6502576e:	movsxd r8,DWORD PTR [rax+0x10c]
    65025775:	lea    r9,[rsp+0x78]
    6502577a:	lea    rdx,[rsp+0x6c]
    6502577f:	lea    rcx,[rsp+0xc0]
    65025787:	call   0x6502ba60
    6502578c:	test   eax,eax
    6502578e:	jns    0x650257b3
    65025790:	mov    DWORD PTR [rsp+0x70],0x1
    65025798:	lea    rbx,[rsp+0xc0]
    650257a0:	mov    r15d,0x1
    650257a6:	jmp    0x65025c6b
    650257ab:	mov    WORD PTR [rsp+0xc0],ax
    650257b3:	lea    rbx,[rsp+0xc0]
    650257bb:	mov    r15d,0x1
    650257c1:	jmp    0x65025c6b
    650257c6:	mov    rax,QWORD PTR [rdi]
    650257c9:	add    rdi,0x8
    650257cd:	test   rax,rax
    650257d0:	mov    QWORD PTR [rsp+0x58],rdi
    650257d5:	je     0x6502580d
    650257d7:	mov    rbx,QWORD PTR [rax+0x8]
    650257db:	test   rbx,rbx
    650257de:	je     0x6502580d
    650257e0:	bt     r14d,0xb
    650257e5:	jae    0x650257ff
    650257e7:	movsx  eax,WORD PTR [rax]
    650257ea:	mov    DWORD PTR [rsp+0x60],0x1
    650257f2:	cdq    
    650257f3:	sub    eax,edx
    650257f5:	sar    eax,1
    650257f7:	mov    r15d,eax
    650257fa:	jmp    0x65025c6b
    650257ff:	movsx  r15d,WORD PTR [rax]
    65025803:	mov    DWORD PTR [rsp+0x60],r8d
    65025808:	jmp    0x65025c6b
    6502580d:	mov    rbx,QWORD PTR [rip+0x1e2cc]        # 0x65043ae0
    65025814:	or     rcx,0xffffffffffffffff
    65025818:	xor    eax,eax
    6502581a:	mov    rdi,rbx
    6502581d:	repnz scas al,BYTE PTR es:[rdi]
    6502581f:	not    rcx
    65025822:	lea    r15,[rcx-0x1]
    65025826:	jmp    0x65025c6b
    6502582b:	test   r14d,0x830
    65025832:	jne    0x6502583d
    65025834:	or     r14d,0x20
    65025838:	mov    DWORD PTR [rsp+0x44],r14d
    6502583d:	mov    rbx,QWORD PTR [rdi]
    65025840:	cmp    r9d,0xffffffff
    65025844:	mov    esi,r9d
    65025847:	mov    eax,0x7fffffff
    6502584c:	cmove  esi,eax
    6502584f:	add    rdi,0x8
    65025853:	test   r14b,0x20
    65025857:	mov    QWORD PTR [rsp+0x58],rdi
    6502585c:	je     0x650258b2
    6502585e:	test   rbx,rbx
    65025861:	mov    r15d,r8d
    65025864:	cmove  rbx,QWORD PTR [rip+0x1e274]        # 0x65043ae0
    6502586c:	test   esi,esi
    6502586e:	mov    rdi,rbx
    65025871:	jle    0x65025c6b
    65025877:	data16 xchg ax,ax
    6502587a:	data16 xchg ax,ax
    6502587d:	data16 xchg ax,ax
    65025880:	movzx  eax,BYTE PTR [rdi]
    65025883:	test   al,al
    65025885:	je     0x65025c6b
    6502588b:	lea    rdx,[rsp+0x78]
    65025890:	movzx  ecx,al
    65025893:	call   0x65028e70
    65025898:	test   eax,eax
    6502589a:	je     0x650258a0
    6502589c:	add    rdi,0x1
    650258a0:	add    r15d,0x1
    650258a4:	add    rdi,0x1
    650258a8:	cmp    r15d,esi
    650258ab:	jl     0x65025880
    650258ad:	jmp    0x65025c6b
    650258b2:	test   rbx,rbx
    650258b5:	mov    DWORD PTR [rsp+0x60],0x1
    650258bd:	cmove  rbx,QWORD PTR [rip+0x1e223]        # 0x65043ae8
    650258c5:	test   esi,esi
    650258c7:	mov    rax,rbx
    650258ca:	je     0x650258e1
    650258cc:	data16 data16 xchg ax,ax
    650258d0:	sub    esi,0x1
    650258d3:	cmp    WORD PTR [rax],0x0
    650258d7:	je     0x650258e1
    650258d9:	add    rax,0x2
    650258dd:	test   esi,esi
    650258df:	jne    0x650258d0
    650258e1:	sub    rax,rbx
    650258e4:	sar    rax,1
    650258e7:	mov    r15d,eax
    650258ea:	jmp    0x65025c6b
    650258ef:	add    rdi,0x8
    650258f3:	mov    QWORD PTR [rsp+0x58],rdi
    650258f8:	mov    rdi,QWORD PTR [rdi-0x8]
    650258fc:	call   0x6502ba40
    65025901:	test   eax,eax
    65025903:	je     0x65026057
    65025909:	test   r14b,0x20
    6502590d:	je     0x6502591f
    6502590f:	mov    WORD PTR [rdi],bp
    65025912:	mov    DWORD PTR [rsp+0x70],0x1
    6502591a:	jmp    0x65025f73
    6502591f:	mov    DWORD PTR [rdi],ebp
    65025921:	mov    DWORD PTR [rsp+0x70],0x1
    65025929:	jmp    0x65025f73
    6502592e:	mov    DWORD PTR [rsp+0x9c],0x1
    65025939:	add    r12w,0x20
    6502593e:	or     r14d,0x40
    65025942:	test   r9d,r9d
    65025945:	mov    eax,0x200
    6502594a:	mov    DWORD PTR [rsp+0x44],r14d
    6502594f:	mov    esi,eax
    65025951:	lea    rbx,[rsp+0xc0]
    65025959:	jns    0x65025968
    6502595b:	mov    r15d,0x6
    65025961:	mov    DWORD PTR [rsp+0x4c],r15d
    65025966:	jmp    0x650259e3
    65025968:	test   r9d,r9d
    6502596b:	jne    0x65025981
    6502596d:	cmp    r12w,0x67
    65025972:	jne    0x650259d7
    65025974:	mov    r15d,0x1
    6502597a:	mov    DWORD PTR [rsp+0x4c],r15d
    6502597f:	jmp    0x650259e3
    65025981:	cmp    r9d,eax
    65025984:	jle    0x6502598f
    65025986:	mov    r9d,eax
    65025989:	mov    DWORD PTR [rsp+0x4c],eax
    6502598d:	jmp    0x65025998
    6502598f:	cmp    r9d,0xa3
    65025996:	jle    0x650259de
    65025998:	lea    edi,[r9+0x15d]
    6502599f:	movsxd rcx,edi
    650259a2:	call   0x65022a80
    650259a7:	test   rax,rax
    650259aa:	mov    QWORD PTR [rsp+0xa0],rax
    650259b2:	je     0x650259c5
    650259b4:	mov    r15d,DWORD PTR [rsp+0x4c]
    650259b9:	mov    esi,edi
    650259bb:	mov    rdi,QWORD PTR [rsp+0x58]
    650259c0:	mov    rbx,rax
    650259c3:	jmp    0x650259e3
    650259c5:	mov    rdi,QWORD PTR [rsp+0x58]
    650259ca:	mov    r15d,0xa3
    650259d0:	mov    DWORD PTR [rsp+0x4c],r15d
    650259d5:	jmp    0x650259e3
    650259d7:	mov    r15d,DWORD PTR [rsp+0x4c]
    650259dc:	jmp    0x650259e3
    650259de:	mov    r15d,DWORD PTR [rsp+0x4c]
    650259e3:	mov    rax,QWORD PTR [rdi]
    650259e6:	mov    rcx,QWORD PTR [rip+0x1e4f3]        # 0x65043ee0
    650259ed:	add    rdi,0x8
    650259f1:	mov    QWORD PTR [rsp+0x58],rdi
    650259f6:	movsxd rsi,esi
    650259f9:	mov    QWORD PTR [rsp+0xb0],rax
    65025a01:	movsx  edi,r12b
    65025a05:	call   0x650206e0
    65025a0a:	lea    rcx,[rsp+0x78]
    65025a0f:	mov    QWORD PTR [rsp+0x30],rcx
    65025a14:	mov    ecx,DWORD PTR [rsp+0x9c]
    65025a1b:	mov    r9d,edi
    65025a1e:	mov    DWORD PTR [rsp+0x28],ecx
    65025a22:	lea    rcx,[rsp+0xb0]
    65025a2a:	mov    r8,rsi
    65025a2d:	mov    rdx,rbx
    65025a30:	mov    DWORD PTR [rsp+0x20],r15d
    65025a35:	call   rax
    65025a37:	mov    edi,r14d
    65025a3a:	and    edi,0x80
    65025a40:	je     0x65025a5d
    65025a42:	test   r15d,r15d
    65025a45:	jne    0x65025a5d
    65025a47:	mov    rcx,QWORD PTR [rip+0x1e4aa]        # 0x65043ef8
    65025a4e:	call   0x650206e0
    65025a53:	lea    rdx,[rsp+0x78]
    65025a58:	mov    rcx,rbx
    65025a5b:	call   rax
    65025a5d:	cmp    r12w,0x67
    65025a62:	jne    0x65025a7e
    65025a64:	test   edi,edi
    65025a66:	jne    0x65025a7e
    65025a68:	mov    rcx,QWORD PTR [rip+0x1e481]        # 0x65043ef0
    65025a6f:	call   0x650206e0
    65025a74:	lea    rdx,[rsp+0x78]
    65025a79:	mov    rcx,rbx
    65025a7c:	call   rax
    65025a7e:	cmp    BYTE PTR [rbx],0x2d
    65025a81:	jne    0x65025a91
    65025a83:	bts    r14d,0x8
    65025a88:	add    rbx,0x1
    65025a8c:	mov    DWORD PTR [rsp+0x44],r14d
    65025a91:	or     rcx,0xffffffffffffffff
    65025a95:	xor    eax,eax
    65025a97:	mov    rdi,rbx
    65025a9a:	repnz scas al,BYTE PTR es:[rdi]
    65025a9c:	not    rcx
    65025a9f:	lea    r15d,[rcx-0x1]
    65025aa3:	jmp    0x65025c6b
    65025aa8:	or     r14d,0x40
    65025aac:	mov    r8d,0xa
    65025ab2:	mov    DWORD PTR [rsp+0x44],r14d
    65025ab7:	jmp    0x65025b21
    65025ab9:	mov    r8d,0xa
    65025abf:	jmp    0x65025b21
    65025ac1:	bts    r14d,0xf
    65025ac6:	mov    r9d,0x10
    65025acc:	mov    DWORD PTR [rsp+0x44],r14d
    65025ad1:	mov    eax,0x7
    65025ad6:	mov    DWORD PTR [rsp+0x98],eax
    65025add:	jmp    0x65025aeb
    65025adf:	mov    eax,0x27
    65025ae4:	mov    DWORD PTR [rsp+0x98],eax
    65025aeb:	test   r14b,r14b
    65025aee:	mov    r8d,0x10
    65025af4:	jns    0x65025b21
    65025af6:	add    ax,0x51
    65025afa:	mov    WORD PTR [rsp+0x64],0x30
    65025b01:	lea    r10d,[r8-0xe]
    65025b05:	mov    WORD PTR [rsp+0x66],ax
    65025b0a:	jmp    0x65025b21
    65025b0c:	test   r14b,r14b
    65025b0f:	mov    r8d,0x8
    65025b15:	jns    0x65025b21
    65025b17:	bts    r14d,0x9
    65025b1c:	mov    DWORD PTR [rsp+0x44],r14d
    65025b21:	bt     r14d,0xf
    65025b26:	jae    0x65025b37
    65025b28:	add    rdi,0x8
    65025b2c:	mov    QWORD PTR [rsp+0x58],rdi
    65025b31:	mov    rdi,QWORD PTR [rdi-0x8]
    65025b35:	jmp    0x65025b99
    65025b37:	bt     r14d,0xc
    65025b3c:	jae    0x65025b4d
    65025b3e:	add    rdi,0x8
    65025b42:	mov    QWORD PTR [rsp+0x58],rdi
    65025b47:	mov    rdi,QWORD PTR [rdi-0x8]
    65025b4b:	jmp    0x65025b99
    65025b4d:	test   r14b,0x20
    65025b51:	je     0x65025b78
    65025b53:	test   r14b,0x40
    65025b57:	je     0x65025b69
    65025b59:	add    rdi,0x8
    65025b5d:	mov    QWORD PTR [rsp+0x58],rdi
    65025b62:	movsx  rdi,WORD PTR [rdi-0x8]
    65025b67:	jmp    0x65025b99
    65025b69:	add    rdi,0x8
    65025b6d:	mov    QWORD PTR [rsp+0x58],rdi
    65025b72:	movzx  edi,WORD PTR [rdi-0x8]
    65025b76:	jmp    0x65025b99
    65025b78:	test   r14b,0x40
    65025b7c:	je     0x65025b8d
    65025b7e:	add    rdi,0x8
    65025b82:	mov    QWORD PTR [rsp+0x58],rdi
    65025b87:	movsxd rdi,DWORD PTR [rdi-0x8]
    65025b8b:	jmp    0x65025b99
    65025b8d:	add    rdi,0x8
    65025b91:	mov    QWORD PTR [rsp+0x58],rdi
    65025b96:	mov    edi,DWORD PTR [rdi-0x8]
    65025b99:	test   r14b,0x40
    65025b9d:	je     0x65025bb1
    65025b9f:	test   rdi,rdi
    65025ba2:	jns    0x65025bb1
    65025ba4:	neg    rdi
    65025ba7:	bts    r14d,0x8
    65025bac:	mov    DWORD PTR [rsp+0x44],r14d
    65025bb1:	bt     r14d,0xf
    65025bb6:	jb     0x65025bc1
    65025bb8:	bt     r14d,0xc
    65025bbd:	jb     0x65025bc1
    65025bbf:	mov    edi,edi
    65025bc1:	test   r9d,r9d
    65025bc4:	jns    0x65025bce
    65025bc6:	mov    r9d,0x1
    65025bcc:	jmp    0x65025be3
    65025bce:	mov    eax,0x200
    65025bd3:	and    r14d,0xfffffff7
    65025bd7:	cmp    r9d,eax
    65025bda:	mov    DWORD PTR [rsp+0x44],r14d
    65025bdf:	cmovg  r9d,eax
    65025be3:	mov    r14d,DWORD PTR [rsp+0x98]
    65025beb:	test   rdi,rdi
    65025bee:	mov    eax,0x0
    65025bf3:	cmove  r10d,eax
    65025bf7:	lea    rbx,[rsp+0x2bf]
    65025bff:	mov    DWORD PTR [rsp+0x50],r10d
    65025c04:	mov    ecx,r9d
    65025c07:	sub    r9d,0x1
    65025c0b:	test   ecx,ecx
    65025c0d:	jg     0x65025c14
    65025c0f:	test   rdi,rdi
    65025c12:	je     0x65025c35
    65025c14:	xor    edx,edx
    65025c16:	mov    rax,rdi
    65025c19:	movsxd rcx,r8d
    65025c1c:	div    rcx
    65025c1f:	mov    rdi,rax
    65025c22:	lea    eax,[rdx+0x30]
    65025c25:	cmp    eax,0x39
    65025c28:	jle    0x65025c2d
    65025c2a:	add    eax,r14d
    65025c2d:	mov    BYTE PTR [rbx],al
    65025c2f:	sub    rbx,0x1
    65025c33:	jmp    0x65025c04
    65025c35:	mov    r14d,DWORD PTR [rsp+0x44]
    65025c3a:	lea    rax,[rsp+0x2bf]
    65025c42:	mov    DWORD PTR [rsp+0x4c],r9d
    65025c47:	sub    eax,ebx
    65025c49:	add    rbx,0x1
    65025c4d:	bt     r14d,0x9
    65025c52:	mov    r15d,eax
    65025c55:	jae    0x65025c6b
    65025c57:	test   eax,eax
    65025c59:	je     0x65025c60
    65025c5b:	cmp    BYTE PTR [rbx],0x30
    65025c5e:	je     0x65025c6b
    65025c60:	sub    rbx,0x1
    65025c64:	add    r15d,0x1
    65025c68:	mov    BYTE PTR [rbx],0x30
    65025c6b:	cmp    DWORD PTR [rsp+0x70],0x0
    65025c70:	jne    0x65025f73
    65025c76:	test   r14b,0x40
    65025c7a:	je     0x65025cc5
    65025c7c:	bt     r14d,0x8
    65025c81:	jae    0x65025c95
    65025c83:	mov    eax,0x1
    65025c88:	mov    WORD PTR [rsp+0x64],0x2d
    65025c8f:	mov    DWORD PTR [rsp+0x50],eax
    65025c93:	jmp    0x65025ccf
    65025c95:	test   r14b,0x1
    65025c99:	je     0x65025cad
    65025c9b:	mov    eax,0x1
    65025ca0:	mov    WORD PTR [rsp+0x64],0x2b
    65025ca7:	mov    DWORD PTR [rsp+0x50],eax
    65025cab:	jmp    0x65025ccf
    65025cad:	test   r14b,0x2
    65025cb1:	je     0x65025ccb
    65025cb3:	mov    eax,0x1
    65025cb8:	mov    WORD PTR [rsp+0x64],0x20
    65025cbf:	mov    DWORD PTR [rsp+0x50],eax
    65025cc3:	jmp    0x65025ccf
    65025cc5:	mov    eax,DWORD PTR [rsp+0x50]
    65025cc9:	jmp    0x65025ccf
    65025ccb:	mov    eax,DWORD PTR [rsp+0x50]
    65025ccf:	mov    r14d,DWORD PTR [rsp+0x54]
    65025cd4:	mov    r12d,DWORD PTR [rsp+0x44]
    65025cd9:	sub    r14d,r15d
    65025cdc:	sub    r14d,eax
    65025cdf:	test   r12b,0xc
    65025ce3:	jne    0x65025d3d
    65025ce5:	test   r14d,r14d
    65025ce8:	mov    edi,r14d
    65025ceb:	jle    0x65025d3d
    65025ced:	data16 xchg ax,ax
    65025cf0:	sub    edi,0x1
    65025cf3:	test   BYTE PTR [r13+0x18],0x40
    65025cf8:	je     0x65025d0a
    65025cfa:	cmp    QWORD PTR [r13+0x10],0x0
    65025cff:	jne    0x65025d0a
    65025d01:	add    ebp,0x1
    65025d04:	mov    DWORD PTR [rsp+0x48],ebp
    65025d08:	jmp    0x65025d23
    65025d0a:	mov    rdx,r13
    65025d0d:	mov    cx,0x20
    65025d11:	call   0x6502b7d0
    65025d16:	cmp    ax,0xffff
    65025d1a:	je     0x65025d32
    65025d1c:	add    ebp,0x1
    65025d1f:	mov    DWORD PTR [rsp+0x48],ebp
    65025d23:	cmp    ebp,0xffffffff
    65025d26:	je     0x65025d2c
    65025d28:	test   edi,edi
    65025d2a:	jg     0x65025cf0
    65025d2c:	mov    eax,DWORD PTR [rsp+0x50]
    65025d30:	jmp    0x65025d3d
    65025d32:	mov    eax,DWORD PTR [rsp+0x50]
    65025d36:	or     ebp,0xffffffff
    65025d39:	mov    DWORD PTR [rsp+0x48],ebp
    65025d3d:	test   BYTE PTR [r13+0x18],0x40
    65025d42:	mov    esi,eax
    65025d44:	lea    rdi,[rsp+0x64]
    65025d49:	je     0x65025d5d
    65025d4b:	cmp    QWORD PTR [r13+0x10],0x0
    65025d50:	jne    0x65025d5d
    65025d52:	add    ebp,eax
    65025d54:	mov    DWORD PTR [rsp+0x48],ebp
    65025d58:	jmp    0x65025dff
    65025d5d:	test   eax,eax
    65025d5f:	jle    0x65025dff
    65025d65:	xor    r12d,r12d
    65025d68:	data16 data16 xchg ax,ax
    65025d6c:	data16 data16 xchg ax,ax
    65025d70:	sub    esi,0x1
    65025d73:	test   BYTE PTR [r13+0x18],0x40
    65025d78:	je     0x65025d89
    65025d7a:	cmp    QWORD PTR [r13+0x10],r12
    65025d7e:	jne    0x65025d89
    65025d80:	add    ebp,0x1
    65025d83:	mov    DWORD PTR [rsp+0x48],ebp
    65025d87:	jmp    0x65025daa
    65025d89:	movzx  ecx,WORD PTR [rdi]
    65025d8c:	mov    rdx,r13
    65025d8f:	call   0x6502b7d0
    65025d94:	cmp    ax,0xffff
    65025d98:	jne    0x65025da3
    65025d9a:	or     ebp,0xffffffff
    65025d9d:	mov    DWORD PTR [rsp+0x48],ebp
    65025da1:	jmp    0x65025daa
    65025da3:	add    ebp,0x1
    65025da6:	mov    DWORD PTR [rsp+0x48],ebp
    65025daa:	add    rdi,0x2
    65025dae:	cmp    ebp,0xffffffff
    65025db1:	jne    0x65025df2
    65025db3:	call   0x65020420
    65025db8:	cmp    DWORD PTR [rax],0x2a
    65025dbb:	jne    0x65025dfa
    65025dbd:	test   BYTE PTR [r13+0x18],0x40
    65025dc2:	je     0x65025dd4
    65025dc4:	cmp    QWORD PTR [r13+0x10],r12
    65025dc8:	jne    0x65025dd4
    65025dca:	mov    ebp,r12d
    65025dcd:	mov    DWORD PTR [rsp+0x48],r12d
    65025dd2:	jmp    0x65025df2
    65025dd4:	mov    rdx,r13
    65025dd7:	mov    cx,0x3f
    65025ddb:	call   0x6502b7d0
    65025de0:	mov    ebp,r12d
    65025de3:	cmp    ax,0xffff
    65025de7:	setne  bpl
    65025deb:	sub    ebp,0x1
    65025dee:	mov    DWORD PTR [rsp+0x48],ebp
    65025df2:	test   esi,esi
    65025df4:	jg     0x65025d70
    65025dfa:	mov    r12d,DWORD PTR [rsp+0x44]
    65025dff:	test   r12b,0x8
    65025e03:	je     0x65025e58
    65025e05:	test   r12b,0x4
    65025e09:	jne    0x65025e58
    65025e0b:	test   r14d,r14d
    65025e0e:	mov    edi,r14d
    65025e11:	jle    0x65025e58
    65025e13:	sub    edi,0x1
    65025e16:	test   BYTE PTR [r13+0x18],0x40
    65025e1b:	je     0x65025e2d
    65025e1d:	cmp    QWORD PTR [r13+0x10],0x0
    65025e22:	jne    0x65025e2d
    65025e24:	add    ebp,0x1
    65025e27:	mov    DWORD PTR [rsp+0x48],ebp
    65025e2b:	jmp    0x65025e46
    65025e2d:	mov    rdx,r13
    65025e30:	mov    cx,0x30
    65025e34:	call   0x6502b7d0
    65025e39:	cmp    ax,0xffff
    65025e3d:	je     0x65025e51
    65025e3f:	add    ebp,0x1
    65025e42:	mov    DWORD PTR [rsp+0x48],ebp
    65025e46:	cmp    ebp,0xffffffff
    65025e49:	je     0x65025e58
    65025e4b:	test   edi,edi
    65025e4d:	jg     0x65025e13
    65025e4f:	jmp    0x65025e58
    65025e51:	or     ebp,0xffffffff
    65025e54:	mov    DWORD PTR [rsp+0x48],ebp
    65025e58:	cmp    DWORD PTR [rsp+0x60],0x0
    65025e5d:	jne    0x65025efe
    65025e63:	test   r15d,r15d
    65025e66:	jle    0x65025efe
    65025e6c:	mov    rdi,rbx
    65025e6f:	mov    esi,r15d
    65025e72:	xchg   ax,ax
    65025e74:	data16 data16 xchg ax,ax
    65025e78:	data16 data16 xchg ax,ax
    65025e7c:	data16 data16 xchg ax,ax
    65025e80:	mov    rax,QWORD PTR [rsp+0x78]
    65025e85:	lea    r9,[rsp+0x78]
    65025e8a:	lea    rcx,[rsp+0x68]
    65025e8f:	movsxd r8,DWORD PTR [rax+0x10c]
    65025e96:	mov    rdx,rdi
    65025e99:	sub    esi,0x1
    65025e9c:	call   0x6502ba60
    65025ea1:	test   eax,eax
    65025ea3:	movsxd r12,eax
    65025ea6:	jle    0x65025ef0
    65025ea8:	test   BYTE PTR [r13+0x18],0x40
    65025ead:	je     0x65025ebf
    65025eaf:	cmp    QWORD PTR [r13+0x10],0x0
    65025eb4:	jne    0x65025ebf
    65025eb6:	add    ebp,0x1
    65025eb9:	mov    DWORD PTR [rsp+0x48],ebp
    65025ebd:	jmp    0x65025ee2
    65025ebf:	movzx  ecx,WORD PTR [rsp+0x68]
    65025ec4:	mov    rdx,r13
    65025ec7:	call   0x6502b7d0
    65025ecc:	cmp    ax,0xffff
    65025ed0:	jne    0x65025edb
    65025ed2:	or     ebp,0xffffffff
    65025ed5:	mov    DWORD PTR [rsp+0x48],ebp
    65025ed9:	jmp    0x65025ee2
    65025edb:	add    ebp,0x1
    65025ede:	mov    DWORD PTR [rsp+0x48],ebp
    65025ee2:	add    rdi,r12
    65025ee5:	test   esi,esi
    65025ee7:	jg     0x65025e80
    65025ee9:	mov    r12d,DWORD PTR [rsp+0x44]
    65025eee:	jmp    0x65025f15
    65025ef0:	mov    r14d,DWORD PTR [rsp+0x44]
    65025ef5:	or     ebp,0xffffffff
    65025ef8:	mov    DWORD PTR [rsp+0x48],ebp
    65025efc:	jmp    0x65025f73
    65025efe:	lea    r9,[rsp+0x48]
    65025f03:	mov    r8,r13
    65025f06:	mov    edx,r15d
    65025f09:	mov    rcx,rbx
    65025f0c:	call   0x65025100
    65025f11:	mov    ebp,DWORD PTR [rsp+0x48]
    65025f15:	test   ebp,ebp
    65025f17:	js     0x65025fd8
    65025f1d:	test   r12b,0x4
    65025f21:	je     0x65025fdf
    65025f27:	test   r14d,r14d
    65025f2a:	jle    0x65025fd1
    65025f30:	sub    r14d,0x1
    65025f34:	test   BYTE PTR [r13+0x18],0x40
    65025f39:	je     0x65025f4b
    65025f3b:	cmp    QWORD PTR [r13+0x10],0x0
    65025f40:	jne    0x65025f4b
    65025f42:	add    ebp,0x1
    65025f45:	mov    DWORD PTR [rsp+0x48],ebp
    65025f49:	jmp    0x65025f64
    65025f4b:	mov    rdx,r13
    65025f4e:	mov    cx,0x20
    65025f52:	call   0x6502b7d0
    65025f57:	cmp    ax,0xffff
    65025f5b:	je     0x65025fbc
    65025f5d:	add    ebp,0x1
    65025f60:	mov    DWORD PTR [rsp+0x48],ebp
    65025f64:	cmp    ebp,0xffffffff
    65025f67:	je     0x65025fca
    65025f69:	test   r14d,r14d
    65025f6c:	jg     0x65025f30
    65025f6e:	mov    r14d,DWORD PTR [rsp+0x44]
    65025f73:	mov    rcx,QWORD PTR [rsp+0xa0]
    65025f7b:	test   rcx,rcx
    65025f7e:	je     0x65025fe6
    65025f80:	call   0x6501fc00
    65025f85:	mov    r9d,DWORD PTR [rsp+0x4c]
    65025f8a:	mov    rdi,QWORD PTR [rsp+0x58]
    65025f8f:	mov    rsi,QWORD PTR [rsp+0xa8]
    65025f97:	mov    eax,DWORD PTR [rsp+0x40]
    65025f9b:	mov    r10d,DWORD PTR [rsp+0x50]
    65025fa0:	mov    r11d,DWORD PTR [rsp+0x54]
    65025fa5:	xor    r8d,r8d
    65025fa8:	lea    rdx,[rip+0xfffffffffffda051]        # 0x65000000
    65025faf:	mov    QWORD PTR [rsp+0xa0],r8
    65025fb7:	jmp    0x65026040
    65025fbc:	mov    r14d,DWORD PTR [rsp+0x44]
    65025fc1:	or     ebp,0xffffffff
    65025fc4:	mov    DWORD PTR [rsp+0x48],ebp
    65025fc8:	jmp    0x65025f73
    65025fca:	mov    r14d,DWORD PTR [rsp+0x44]
    65025fcf:	jmp    0x65025f73
    65025fd1:	mov    r14d,DWORD PTR [rsp+0x44]
    65025fd6:	jmp    0x65025f73
    65025fd8:	mov    r14d,DWORD PTR [rsp+0x44]
    65025fdd:	jmp    0x65025f73
    65025fdf:	mov    r14d,DWORD PTR [rsp+0x44]
    65025fe4:	jmp    0x65025f73
    65025fe6:	mov    r9d,DWORD PTR [rsp+0x4c]
    65025feb:	mov    rdi,QWORD PTR [rsp+0x58]
    65025ff0:	mov    rsi,QWORD PTR [rsp+0xa8]
    65025ff8:	mov    eax,DWORD PTR [rsp+0x40]
    65025ffc:	mov    r10d,DWORD PTR [rsp+0x50]
    65026001:	mov    r11d,DWORD PTR [rsp+0x54]
    65026006:	xor    r8d,r8d
    65026009:	lea    rdx,[rip+0xfffffffffffd9ff0]        # 0x65000000
    65026010:	jmp    0x65026040
    65026012:	mov    eax,DWORD PTR [rsp+0x40]
    65026016:	jmp    0x65026040
    65026018:	mov    eax,DWORD PTR [rsp+0x40]
    6502601c:	jmp    0x65026040
    6502601e:	mov    eax,DWORD PTR [rsp+0x40]
    65026022:	jmp    0x65026040
    65026024:	mov    eax,DWORD PTR [rsp+0x40]
    65026028:	jmp    0x65026040
    6502602a:	mov    eax,DWORD PTR [rsp+0x40]
    6502602e:	jmp    0x65026040
    65026030:	mov    eax,DWORD PTR [rsp+0x40]
    65026034:	jmp    0x65026040
    65026036:	mov    eax,DWORD PTR [rsp+0x40]
    6502603a:	jmp    0x65026040
    6502603c:	mov    eax,DWORD PTR [rsp+0x40]
    65026040:	mov    r12w,WORD PTR [rsi]
    65026044:	test   r12w,r12w
    65026048:	jne    0x650253b0
    6502604e:	test   eax,eax
    65026050:	je     0x65026096
    65026052:	cmp    eax,0x7
    65026055:	je     0x65026096
    65026057:	call   0x65020420
    6502605c:	xor    r9d,r9d
    6502605f:	xor    r8d,r8d
    65026062:	mov    DWORD PTR [rax],0x16
    65026068:	xor    eax,eax
    6502606a:	xor    edx,edx
    6502606c:	xor    ecx,ecx
    6502606e:	mov    QWORD PTR [rsp+0x20],rax
    65026073:	call   0x6501d9c0
    65026078:	cmp    BYTE PTR [rsp+0x90],0x0
    65026080:	je     0x65026091
    65026082:	mov    rax,QWORD PTR [rsp+0x88]
    6502608a:	and    DWORD PTR [rax+0xc8],0xfffffffd
    65026091:	or     eax,0xffffffff
    65026094:	jmp    0x650260b1
    65026096:	mov    rdx,QWORD PTR [rsp+0x88]
    6502609e:	cmp    BYTE PTR [rsp+0x90],0x0
    650260a6:	je     0x650260af
    650260a8:	and    DWORD PTR [rdx+0xc8],0xfffffffd
    650260af:	mov    eax,ebp
    650260b1:	mov    r12,QWORD PTR [rsp+0x4e0]
    650260b9:	mov    rbp,QWORD PTR [rsp+0x4e8]
    650260c1:	mov    r15,QWORD PTR [rsp+0x4d8]
    650260c9:	mov    rcx,QWORD PTR [rsp+0x4c0]
    650260d1:	xor    rcx,rsp
    650260d4:	call   0x6501e650
    650260d9:	add    rsp,0x4f0
    650260e0:	pop    r14
    650260e2:	pop    r13
    650260e4:	pop    rdi
    650260e5:	pop    rsi
    650260e6:	pop    rbx
    650260e7:	ret    
    650260e8:	adc    DWORD PTR [rsi+0x2],0x0
    650260ec:	(bad)  
    650260ed:	push   rsp
    650260ee:	add    al,BYTE PTR [rax]
    650260f0:	push   rsi
    650260f1:	push   rsp
    650260f2:	add    al,BYTE PTR [rax]
    650260f4:	rcl    BYTE PTR [rdx+rax*1+0x0],cl
    650260f8:	and    al,0x55
    650260fa:	add    al,BYTE PTR [rax]
    650260fc:	xor    DWORD PTR [rbp+0x2],edx
    650260ff:	add    BYTE PTR [rbx+0x55],bh
    65026102:	add    al,BYTE PTR [rax]
    65026104:	or     DWORD PTR [rdi+0x2],edx
    65026107:	add    BYTE PTR [rsi],ch
    65026109:	pop    rcx
    6502610a:	add    al,BYTE PTR [rax]
    6502610c:	(bad)  
    6502610d:	push   rdi
    6502610e:	add    al,BYTE PTR [rax]
    65026110:	sub    ebx,DWORD PTR [rax+0x2]
    65026113:	add    cl,dl
    65026115:	pop    rdx
    65026116:	add    al,BYTE PTR [rax]
    65026118:	(bad)  
    65026119:	push   rdi
    6502611a:	add    al,BYTE PTR [rax]
    6502611c:	ds pop rcx
    6502611e:	add    al,BYTE PTR [rax]
    65026120:	push   r15
    65026122:	add    al,BYTE PTR [rax]
    65026124:	test   al,0x5a
    65026126:	add    al,BYTE PTR [rax]
    65026128:	out    dx,eax
    65026129:	pop    rax
    6502612a:	add    al,BYTE PTR [rax]
    6502612c:	or     al,0x5b
    6502612e:	add    al,BYTE PTR [rax]
    65026130:	rcr    DWORD PTR [rdx+0x2],0x0
    65026134:	cmp    eax,0xb9000258
    65026139:	pop    rdx
    6502613a:	add    al,BYTE PTR [rax]
    6502613c:	fistp  WORD PTR [rdx+0x2]
    6502613f:	add    BYTE PTR [rbx+0x5c],ch
    65026142:	add    al,BYTE PTR [rax]
    65026144:	add    BYTE PTR [rsi],cl
    65026146:	add    DWORD PTR [rsi],ecx
    65026148:	add    BYTE PTR [rsi],cl
    6502614a:	add    BYTE PTR [rsi],cl
    6502614c:	(bad)  
    6502614d:	(bad)  
    6502614e:	(bad)  
    6502614f:	(bad)  
    65026150:	(bad)  
    65026151:	(bad)  
    65026152:	(bad)  
    65026153:	(bad)  
    65026154:	(bad)  
    65026155:	(bad)  
    65026156:	add    cl,BYTE PTR [rsi]
    65026158:	(bad)  
    65026159:	(bad)  
    6502615a:	(bad)  
    6502615b:	add    ecx,DWORD PTR [rsi]
    6502615d:	add    al,0xe
    6502615f:	(bad)  
    65026160:	(bad)  
    65026161:	(bad)  
    65026162:	(bad)  
    65026163:	(bad)  
    65026164:	add    eax,0x507060e
    65026169:	add    eax,0xe070e05
    6502616e:	(bad)  
    6502616f:	(bad)  
    65026170:	(bad)  
    65026171:	or     BYTE PTR [rcx],cl
    65026173:	or     cl,BYTE PTR [rsi]
    65026175:	(bad)  
    65026176:	or     ecx,DWORD PTR [rsi]
    65026178:	or     al,0xe
    6502617a:	(bad)  
    6502617b:	or     eax,0xcccccccc
    65026180:	rex push rbp
    65026182:	push   r12
    65026184:	push   r13
    65026186:	push   r14
    65026188:	push   r15
    6502618a:	sub    rsp,0x60
    6502618e:	lea    rbp,[rsp+0x40]
    65026193:	mov    QWORD PTR [rbp+0x50],rbx
    65026197:	mov    QWORD PTR [rbp+0x58],rsi
    6502619b:	mov    QWORD PTR [rbp+0x60],rdi
    6502619f:	mov    rax,QWORD PTR [rip+0x1cf7a]        # 0x65043120
    650261a6:	xor    rax,rbp
    650261a9:	mov    QWORD PTR [rbp+0x10],rax
    650261ad:	mov    r10d,DWORD PTR [rip+0x1f0f4]        # 0x650452a8
    650261b4:	xor    r13d,r13d
    650261b7:	mov    r12,r9
    650261ba:	test   r10d,r10d
    650261bd:	mov    QWORD PTR [rbp+0x8],r9
    650261c1:	mov    r11d,r8d
    650261c4:	mov    DWORD PTR [rbp+0x0],r8d
    650261c8:	mov    r15d,edx
    650261cb:	mov    rdi,rcx
    650261ce:	jne    0x65026220
    650261d0:	lea    r9d,[r13+0x1]
    650261d4:	lea    r8,[rip+0x10e79]        # 0x65037054
    650261db:	mov    edx,0x100
    650261e0:	xor    ecx,ecx
    650261e2:	mov    DWORD PTR [rsp+0x28],r13d
    650261e7:	mov    QWORD PTR [rsp+0x20],r13
    650261ec:	call   QWORD PTR [rip+0xe0ae]        # 0x650342a0
    650261f2:	test   eax,eax
    650261f4:	je     0x650261fc
    650261f6:	lea    r10d,[r13+0x1]
    650261fa:	jmp    0x65026215
    650261fc:	call   QWORD PTR [rip+0xde66]        # 0x65034068
    65026202:	mov    r10d,DWORD PTR [rip+0x1f09f]        # 0x650452a8
    65026209:	mov    ecx,0x2
    6502620e:	cmp    eax,0x78
    65026211:	cmove  r10d,ecx
    65026215:	mov    r11d,DWORD PTR [rbp+0x0]
    65026219:	mov    DWORD PTR [rip+0x1f088],r10d        # 0x650452a8
    65026220:	mov    ebx,DWORD PTR [rbp+0x70]
    65026223:	test   ebx,ebx
    65026225:	jle    0x6502624a
    65026227:	mov    eax,ebx
    65026229:	mov    rcx,r12
    6502622c:	data16 data16 xchg ax,ax
    65026230:	sub    eax,0x1
    65026233:	or     edx,0xffffffff
    65026236:	cmp    WORD PTR [rcx],r13w
    6502623a:	je     0x65026246
    6502623c:	add    rcx,0x2
    65026240:	test   eax,eax
    65026242:	jne    0x65026230
    65026244:	mov    eax,edx
    65026246:	sub    edx,eax
    65026248:	add    ebx,edx
    6502624a:	cmp    r10d,0x1
    6502624e:	jne    0x6502627a
    65026250:	mov    eax,DWORD PTR [rbp+0x80]
    65026256:	mov    r9d,ebx
    65026259:	mov    r8,r12
    6502625c:	mov    DWORD PTR [rsp+0x28],eax
    65026260:	mov    rax,QWORD PTR [rbp+0x78]
    65026264:	mov    edx,r11d
    65026267:	mov    ecx,r15d
    6502626a:	mov    QWORD PTR [rsp+0x20],rax
    6502626f:	call   QWORD PTR [rip+0xe02b]        # 0x650342a0
    65026275:	jmp    0x6502650f
    6502627a:	cmp    r10d,0x2
    6502627e:	je     0x65026289
    65026280:	test   r10d,r10d
    65026283:	jne    0x6502650d
    65026289:	test   r15d,r15d
    6502628c:	mov    r14d,r13d
    6502628f:	jne    0x65026298
    65026291:	mov    rax,QWORD PTR [rdi]
    65026294:	mov    r15d,DWORD PTR [rax+0x14]
    65026298:	mov    esi,DWORD PTR [rbp+0x88]
    6502629e:	test   esi,esi
    650262a0:	jne    0x650262a8
    650262a2:	mov    rax,QWORD PTR [rdi]
    650262a5:	mov    esi,DWORD PTR [rax+0x4]
    650262a8:	mov    ecx,r15d
    650262ab:	call   0x6502ce60
    650262b0:	cmp    esi,eax
    650262b2:	je     0x650262ba
    650262b4:	cmp    eax,0xffffffff
    650262b7:	cmovne esi,eax
    650262ba:	mov    QWORD PTR [rsp+0x38],r13
    650262bf:	mov    QWORD PTR [rsp+0x30],r13
    650262c4:	mov    r9d,ebx
    650262c7:	mov    r8,r12
    650262ca:	xor    edx,edx
    650262cc:	mov    ecx,esi
    650262ce:	mov    DWORD PTR [rsp+0x28],r13d
    650262d3:	mov    QWORD PTR [rsp+0x20],r13
    650262d8:	call   QWORD PTR [rip+0xdd52]        # 0x65034030
    650262de:	test   eax,eax
    650262e0:	movsxd r13,eax
    650262e3:	je     0x6502650d
    650262e9:	jle    0x6502650d
    650262ef:	xor    edx,edx
    650262f1:	mov    rax,0xffffffffffffffe0
    650262f8:	mov    rcx,r13
    650262fb:	div    r13
    650262fe:	cmp    rax,0x1
    65026302:	jb     0x6502650d
    65026308:	add    rcx,0x10
    6502630c:	movabs rdx,0xffffffffffffff0
    65026316:	cmp    rcx,0x400
    6502631d:	ja     0x6502634f
    6502631f:	lea    rax,[rcx+0xf]
    65026323:	cmp    rax,rcx
    65026326:	ja     0x6502632b
    65026328:	mov    rax,rdx
    6502632b:	and    rax,0xfffffffffffffff0
    6502632f:	call   0x65033230
    65026334:	sub    rsp,rax
    65026337:	lea    r12,[rsp+0x40]
    6502633c:	test   r12,r12
    6502633f:	je     0x6502650d
    65026345:	mov    DWORD PTR [r12],0xcccc
    6502634d:	jmp    0x65026362
    6502634f:	call   0x6501fc50
    65026354:	test   rax,rax
    65026357:	mov    r12,rax
    6502635a:	je     0x65026366
    6502635c:	mov    DWORD PTR [rax],0xdddd
    65026362:	add    r12,0x10
    65026366:	test   r12,r12
    65026369:	je     0x6502650d
    6502636f:	mov    r8,QWORD PTR [rbp+0x8]
    65026373:	xor    edi,edi
    65026375:	mov    r9d,ebx
    65026378:	mov    QWORD PTR [rsp+0x38],rdi
    6502637d:	mov    QWORD PTR [rsp+0x30],rdi
    65026382:	xor    edx,edx
    65026384:	mov    ecx,esi
    65026386:	mov    DWORD PTR [rsp+0x28],r13d
    6502638b:	mov    QWORD PTR [rsp+0x20],r12
    65026390:	call   QWORD PTR [rip+0xdc9a]        # 0x65034030
    65026396:	test   eax,eax
    65026398:	je     0x650264f3
    6502639e:	mov    edx,DWORD PTR [rbp+0x0]
    650263a1:	mov    r9d,r13d
    650263a4:	mov    r8,r12
    650263a7:	mov    ecx,r15d
    650263aa:	mov    DWORD PTR [rsp+0x28],edi
    650263ae:	mov    QWORD PTR [rsp+0x20],rdi
    650263b3:	call   QWORD PTR [rip+0xdedf]        # 0x65034298
    650263b9:	test   eax,eax
    650263bb:	movsxd rdi,eax
    650263be:	jle    0x650264f3
    650263c4:	xor    edx,edx
    650263c6:	mov    rax,0xffffffffffffffe0
    650263cd:	mov    rcx,rdi
    650263d0:	div    rdi
    650263d3:	cmp    rax,0x1
    650263d7:	jb     0x650264f3
    650263dd:	add    rcx,0x10
    650263e1:	cmp    rcx,0x400
    650263e8:	ja     0x6502641f
    650263ea:	lea    rax,[rcx+0xf]
    650263ee:	cmp    rax,rcx
    650263f1:	ja     0x650263fd
    650263f3:	movabs rax,0xffffffffffffff0
    650263fd:	and    rax,0xfffffffffffffff0
    65026401:	call   0x65033230
    65026406:	sub    rsp,rax
    65026409:	lea    rbx,[rsp+0x40]
    6502640e:	test   rbx,rbx
    65026411:	je     0x650264f3
    65026417:	mov    DWORD PTR [rbx],0xcccc
    6502641d:	jmp    0x65026432
    6502641f:	call   0x6501fc50
    65026424:	test   rax,rax
    65026427:	mov    rbx,rax
    6502642a:	je     0x65026436
    6502642c:	mov    DWORD PTR [rax],0xdddd
    65026432:	add    rbx,0x10
    65026436:	test   rbx,rbx
    65026439:	je     0x650264f3
    6502643f:	mov    r9d,r13d
    65026442:	mov    r13d,DWORD PTR [rbp+0x0]
    65026446:	mov    r8,r12
    65026449:	mov    ecx,r15d
    6502644c:	mov    edx,r13d
    6502644f:	mov    DWORD PTR [rsp+0x28],edi
    65026453:	mov    QWORD PTR [rsp+0x20],rbx
    65026458:	call   QWORD PTR [rip+0xde3a]        # 0x65034298
    6502645e:	test   eax,eax
    65026460:	je     0x650264e1
    65026462:	bt     r13d,0xa
    65026467:	jae    0x650264ac
    65026469:	movsxd rax,DWORD PTR [rbp+0x80]
    65026470:	mov    r14d,edi
    65026473:	test   eax,eax
    65026475:	je     0x650264e1
    65026477:	cmp    eax,edi
    65026479:	jg     0x6502647e
    6502647b:	lea    edi,[rax-0x1]
    6502647e:	mov    rcx,QWORD PTR [rbp+0x78]
    65026482:	movsxd r9,edi
    65026485:	mov    rdx,rax
    65026488:	mov    r8,rbx
    6502648b:	call   0x6502a700
    65026490:	test   eax,eax
    65026492:	je     0x650264e1
    65026494:	xor    eax,eax
    65026496:	xor    r9d,r9d
    65026499:	xor    r8d,r8d
    6502649c:	xor    edx,edx
    6502649e:	xor    ecx,ecx
    650264a0:	mov    QWORD PTR [rsp+0x20],rax
    650264a5:	call   0x6501d920
    650264aa:	jmp    0x650264e1
    650264ac:	mov    eax,DWORD PTR [rbp+0x80]
    650264b2:	mov    r9d,edi
    650264b5:	mov    r8,rbx
    650264b8:	test   eax,eax
    650264ba:	mov    edx,0x1
    650264bf:	mov    ecx,esi
    650264c1:	jne    0x650264cb
    650264c3:	xor    eax,eax
    650264c5:	mov    DWORD PTR [rsp+0x28],eax
    650264c9:	jmp    0x650264d3
    650264cb:	mov    DWORD PTR [rsp+0x28],eax
    650264cf:	mov    rax,QWORD PTR [rbp+0x78]
    650264d3:	mov    QWORD PTR [rsp+0x20],rax
    650264d8:	call   QWORD PTR [rip+0xdb4a]        # 0x65034028
    650264de:	mov    r14d,eax
    650264e1:	cmp    DWORD PTR [rbx-0x10],0xdddd
    650264e8:	lea    rcx,[rbx-0x10]
    650264ec:	jne    0x650264f3
    650264ee:	call   0x6501fc00
    650264f3:	cmp    DWORD PTR [r12-0x10],0xdddd
    650264fc:	lea    rcx,[r12-0x10]
    65026501:	jne    0x65026508
    65026503:	call   0x6501fc00
    65026508:	mov    eax,r14d
    6502650b:	jmp    0x6502650f
    6502650d:	xor    eax,eax
    6502650f:	mov    rcx,QWORD PTR [rbp+0x10]
    65026513:	xor    rcx,rbp
    65026516:	call   0x6501e650
    6502651b:	mov    rbx,QWORD PTR [rbp+0x50]
    6502651f:	mov    rsi,QWORD PTR [rbp+0x58]
    65026523:	mov    rdi,QWORD PTR [rbp+0x60]
    65026527:	lea    rsp,[rbp+0x20]
    6502652b:	pop    r15
    6502652d:	pop    r14
    6502652f:	pop    r13
    65026531:	pop    r12
    65026533:	pop    rbp
    65026534:	ret    
    65026535:	int3   
    65026536:	int3   
    65026537:	int3   
    65026538:	int3   
    65026539:	int3   
    6502653a:	int3   
    6502653b:	int3   
    6502653c:	int3   
    6502653d:	int3   
    6502653e:	int3   
    6502653f:	int3   
    65026540:	mov    rax,rsp
    65026543:	push   rbx
    65026544:	sub    rsp,0x70
    65026548:	mov    QWORD PTR [rax+0x8],rbp
    6502654c:	mov    QWORD PTR [rax+0x18],rdi
    65026550:	xor    dil,dil
    65026553:	test   rcx,rcx
    65026556:	mov    QWORD PTR [rax-0x10],r12
    6502655a:	mov    QWORD PTR [rax-0x18],r13
    6502655e:	mov    BYTE PTR [rax-0x20],dil
    65026562:	mov    rbp,r9
    65026565:	mov    r12d,r8d
    65026568:	mov    r13d,edx
    6502656b:	jne    0x650265fe
    65026571:	mov    QWORD PTR [rax+0x10],rsi
    65026575:	call   0x65020a30
    6502657a:	mov    rcx,QWORD PTR [rax+0xc0]
    65026581:	mov    rsi,QWORD PTR [rax+0xb8]
    65026588:	mov    rbx,rax
    6502658b:	cmp    rcx,QWORD PTR [rip+0x1d40e]        # 0x650439a0
    65026592:	mov    QWORD PTR [rsp+0x50],rax
    65026597:	mov    QWORD PTR [rsp+0x40],rcx
    6502659c:	mov    QWORD PTR [rsp+0x48],rsi
    650265a1:	je     0x650265bb
    650265a3:	mov    ecx,DWORD PTR [rax+0xc8]
    650265a9:	test   DWORD PTR [rip+0x1d279],ecx        # 0x65043828
    650265af:	jne    0x650265bb
    650265b1:	call   0x65023e90
    650265b6:	mov    QWORD PTR [rsp+0x40],rax
    650265bb:	cmp    rsi,QWORD PTR [rip+0x1d15e]        # 0x65043720
    650265c2:	mov    rsi,QWORD PTR [rsp+0x88]
    650265ca:	je     0x650265e4
    650265cc:	mov    eax,DWORD PTR [rbx+0xc8]
    650265d2:	test   DWORD PTR [rip+0x1d250],eax        # 0x65043828
    650265d8:	jne    0x650265e4
    650265da:	call   0x65023340
    650265df:	mov    QWORD PTR [rsp+0x48],rax
    650265e4:	test   BYTE PTR [rbx+0xc8],0x2
    650265eb:	jne    0x6502661b
    650265ed:	or     DWORD PTR [rbx+0xc8],0x2
    650265f4:	mov    dil,0x1
    650265f7:	mov    BYTE PTR [rsp+0x58],dil
    650265fc:	jmp    0x6502661b
    650265fe:	mov    rax,QWORD PTR [rcx]
    65026601:	lea    rdx,[rsp+0x40]
    65026606:	mov    QWORD PTR [rdx],rax
    65026609:	mov    rax,QWORD PTR [rcx+0x8]
    6502660d:	mov    QWORD PTR [rdx+0x8],rax
    65026611:	movzx  edi,BYTE PTR [rsp+0x58]
    65026616:	mov    rbx,QWORD PTR [rsp+0x50]
    6502661b:	mov    eax,DWORD PTR [rsp+0xb8]
    65026622:	lea    rcx,[rsp+0x40]
    65026627:	mov    r9,rbp
    6502662a:	mov    DWORD PTR [rsp+0x38],eax
    6502662e:	mov    eax,DWORD PTR [rsp+0xb0]
    65026635:	mov    r8d,r12d
    65026638:	mov    DWORD PTR [rsp+0x30],eax
    6502663c:	mov    rax,QWORD PTR [rsp+0xa8]
    65026644:	mov    edx,r13d
    65026647:	mov    QWORD PTR [rsp+0x28],rax
    6502664c:	mov    eax,DWORD PTR [rsp+0xa0]
    65026653:	mov    DWORD PTR [rsp+0x20],eax
    65026657:	call   0x65026180
    6502665c:	mov    r13,QWORD PTR [rsp+0x60]
    65026661:	mov    r12,QWORD PTR [rsp+0x68]
    65026666:	mov    rbp,QWORD PTR [rsp+0x80]
    6502666e:	test   dil,dil
    65026671:	mov    rdi,QWORD PTR [rsp+0x90]
    65026679:	je     0x65026682
    6502667b:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    65026682:	add    rsp,0x70
    65026686:	pop    rbx
    65026687:	ret    
    65026688:	int3   
    65026689:	int3   
    6502668a:	int3   
    6502668b:	int3   
    6502668c:	int3   
    6502668d:	int3   
    6502668e:	int3   
    6502668f:	int3   
    65026690:	xor    eax,eax
    65026692:	test   rdx,rdx
    65026695:	je     0x650266aa
    65026697:	cmp    WORD PTR [rcx],0x0
    6502669b:	je     0x650266aa
    6502669d:	add    rax,0x1
    650266a1:	add    rcx,0x2
    650266a5:	cmp    rax,rdx
    650266a8:	jb     0x65026697
    650266aa:	ret    0x0
    650266ad:	int3   
    650266ae:	int3   
    650266af:	int3   
    650266b0:	mov    DWORD PTR [rsp+0x8],ecx
    650266b4:	sub    rsp,0x28
    650266b8:	xor    r8d,r8d
    650266bb:	mov    edx,0x1000
    650266c0:	xor    ecx,ecx
    650266c2:	call   QWORD PTR [rip+0xdbe8]        # 0x650342b0
    650266c8:	test   rax,rax
    650266cb:	mov    QWORD PTR [rip+0x1ebde],rax        # 0x650452b0
    650266d2:	jne    0x650266d9
    650266d4:	add    rsp,0x28
    650266d8:	ret    
    650266d9:	lea    r8,[rsp+0x30]
    650266de:	mov    r9d,0x4
    650266e4:	xor    edx,edx
    650266e6:	mov    rcx,rax
    650266e9:	mov    DWORD PTR [rsp+0x30],0x2
    650266f1:	call   QWORD PTR [rip+0xdbb1]        # 0x650342a8
    650266f7:	mov    eax,0x1
    650266fc:	add    rsp,0x28
    65026700:	ret    
    65026701:	int3   
    65026702:	int3   
    65026703:	int3   
    65026704:	int3   
    65026705:	int3   
    65026706:	int3   
    65026707:	int3   
    65026708:	int3   
    65026709:	int3   
    6502670a:	int3   
    6502670b:	int3   
    6502670c:	int3   
    6502670d:	int3   
    6502670e:	int3   
    6502670f:	int3   
    65026710:	sub    rsp,0x28
    65026714:	mov    rcx,QWORD PTR [rip+0x1eb95]        # 0x650452b0
    6502671b:	call   QWORD PTR [rip+0xda97]        # 0x650341b8
    65026721:	mov    QWORD PTR [rip+0x1eb84],0x0        # 0x650452b0
    6502672c:	add    rsp,0x28
    65026730:	ret    
    65026731:	int3   
    65026732:	int3   
    65026733:	int3   
    65026734:	int3   
    65026735:	int3   
    65026736:	int3   
    65026737:	int3   
    65026738:	int3   
    65026739:	int3   
    6502673a:	int3   
    6502673b:	int3   
    6502673c:	int3   
    6502673d:	int3   
    6502673e:	int3   
    6502673f:	int3   
    65026740:	mov    QWORD PTR [rsp+0x8],rbx
    65026745:	mov    QWORD PTR [rsp+0x10],rsi
    6502674a:	mov    QWORD PTR [rsp+0x18],rdi
    6502674f:	mov    QWORD PTR [rsp+0x20],r12
    65026754:	push   r13
    65026756:	push   r14
    65026758:	push   r15
    6502675a:	sub    rsp,0x90
    65026761:	lea    rcx,[rsp+0x20]
    65026766:	call   QWORD PTR [rip+0xdb64]        # 0x650342d0
    6502676c:	nop
    6502676d:	mov    edx,0x58
    65026772:	lea    ecx,[rdx-0x38]
    65026775:	call   0x65022af0
    6502677a:	mov    r11,rax
    6502677d:	test   rax,rax
    65026780:	jne    0x6502678a
    65026782:	or     eax,0xffffffff
    65026785:	jmp    0x65026a3c
    6502678a:	mov    QWORD PTR [rip+0x2280f],rax        # 0x65048fa0
    65026791:	mov    ecx,0x20
    65026796:	mov    DWORD PTR [rip+0x227e8],ecx        # 0x65048f84
    6502679c:	add    rax,0xb00
    650267a2:	cmp    r11,rax
    650267a5:	jae    0x650267f8
    650267a7:	xor    edi,edi
    650267a9:	data16 xchg ax,ax
    650267ac:	data16 data16 xchg ax,ax
    650267b0:	mov    BYTE PTR [r11+0x8],dil
    650267b4:	mov    QWORD PTR [r11],0xffffffffffffffff
    650267bb:	mov    BYTE PTR [r11+0x9],0xa
    650267c0:	mov    DWORD PTR [r11+0xc],edi
    650267c4:	mov    BYTE PTR [r11+0x38],dil
    650267c8:	mov    BYTE PTR [r11+0x39],0xa
    650267cd:	mov    BYTE PTR [r11+0x3a],0xa
    650267d2:	mov    DWORD PTR [r11+0x50],edi
    650267d6:	mov    BYTE PTR [r11+0x4c],dil
    650267da:	add    r11,0x58
    650267de:	mov    rax,QWORD PTR [rip+0x227bb]        # 0x65048fa0
    650267e5:	add    rax,0xb00
    650267eb:	cmp    r11,rax
    650267ee:	jb     0x650267b0
    650267f0:	mov    ecx,DWORD PTR [rip+0x2278e]        # 0x65048f84
    650267f6:	jmp    0x650267fa
    650267f8:	xor    edi,edi
    650267fa:	cmp    WORD PTR [rsp+0x62],0x0
    65026800:	je     0x6502696c
    65026806:	mov    r14,QWORD PTR [rsp+0x68]
    6502680b:	test   r14,r14
    6502680e:	je     0x6502696c
    65026814:	movsxd rax,DWORD PTR [r14]
    65026817:	add    r14,0x4
    6502681b:	lea    r13,[r14+rax*1]
    6502681f:	mov    r15d,0x800
    65026825:	cmp    eax,r15d
    65026828:	cmovl  r15d,eax
    6502682c:	mov    ebx,0x1
    65026831:	cmp    ecx,r15d
    65026834:	jge    0x650268de
    6502683a:	lea    r12,[rip+0x2275f]        # 0x65048fa0
    65026841:	mov    edx,0x58
    65026846:	lea    ecx,[rdx-0x38]
    65026849:	call   0x65022af0
    6502684e:	mov    r11,rax
    65026851:	test   rax,rax
    65026854:	je     0x650268d5
    65026856:	mov    QWORD PTR [r12+rbx*8],rax
    6502685a:	mov    eax,DWORD PTR [rip+0x22724]        # 0x65048f84
    65026860:	add    eax,0x20
    65026863:	mov    DWORD PTR [rip+0x2271b],eax        # 0x65048f84
    65026869:	lea    rcx,[r11+0xb00]
    65026870:	cmp    r11,rcx
    65026873:	jae    0x650268c6
    65026875:	data16 data16 xchg ax,ax
    65026879:	data16 xchg ax,ax
    6502687c:	data16 data16 xchg ax,ax
    65026880:	mov    BYTE PTR [r11+0x8],0x0
    65026885:	mov    QWORD PTR [r11],0xffffffffffffffff
    6502688c:	mov    BYTE PTR [r11+0x9],0xa
    65026891:	mov    DWORD PTR [r11+0xc],edi
    65026895:	and    BYTE PTR [r11+0x38],0x80
    6502689a:	mov    BYTE PTR [r11+0x39],0xa
    6502689f:	mov    BYTE PTR [r11+0x3a],0xa
    650268a4:	mov    DWORD PTR [r11+0x50],edi
    650268a8:	mov    BYTE PTR [r11+0x4c],0x0
    650268ad:	add    r11,0x58
    650268b1:	mov    rax,QWORD PTR [r12+rbx*8]
    650268b5:	add    rax,0xb00
    650268bb:	cmp    r11,rax
    650268be:	jb     0x65026880
    650268c0:	mov    eax,DWORD PTR [rip+0x226be]        # 0x65048f84
    650268c6:	add    rbx,0x1
    650268ca:	cmp    eax,r15d
    650268cd:	jl     0x65026841
    650268d3:	jmp    0x650268e5
    650268d5:	mov    r15d,DWORD PTR [rip+0x226a8]        # 0x65048f84
    650268dc:	jmp    0x650268e5
    650268de:	lea    r12,[rip+0x226bb]        # 0x65048fa0
    650268e5:	mov    ebx,edi
    650268e7:	test   r15d,r15d
    650268ea:	jle    0x6502696c
    650268f0:	mov    rcx,QWORD PTR [r13+0x0]
    650268f4:	cmp    rcx,0xffffffffffffffff
    650268f8:	je     0x6502695c
    650268fa:	cmp    rcx,0xfffffffffffffffe
    650268fe:	je     0x6502695c
    65026900:	movzx  eax,BYTE PTR [r14]
    65026904:	test   al,0x1
    65026906:	je     0x6502695c
    65026908:	test   al,0x8
    6502690a:	jne    0x65026916
    6502690c:	call   QWORD PTR [rip+0xd9b6]        # 0x650342c8
    65026912:	test   eax,eax
    65026914:	je     0x6502695c
    65026916:	movsxd rax,ebx
    65026919:	mov    rcx,rax
    6502691c:	sar    rcx,0x5
    65026920:	mov    sil,al
    65026923:	and    esi,0x1f
    65026926:	imul   rsi,rsi,0x58
    6502692a:	add    rsi,QWORD PTR [r12+rcx*8]
    6502692e:	mov    rax,QWORD PTR [r13+0x0]
    65026932:	mov    QWORD PTR [rsi],rax
    65026935:	movzx  eax,BYTE PTR [r14]
    65026939:	mov    BYTE PTR [rsi+0x8],al
    6502693c:	lea    rcx,[rsi+0x10]
    65026940:	mov    edx,0xfa0
    65026945:	call   0x65029e90
    6502694a:	test   eax,eax
    6502694c:	je     0x65026954
    6502694e:	add    DWORD PTR [rsi+0xc],0x1
    65026952:	jmp    0x6502695c
    65026954:	or     eax,0xffffffff
    65026957:	jmp    0x65026a3c
    6502695c:	add    ebx,0x1
    6502695f:	add    r14,0x1
    65026963:	add    r13,0x8
    65026967:	cmp    ebx,r15d
    6502696a:	jl     0x650268f0
    6502696c:	mov    r13d,edi
    6502696f:	mov    rsi,rdi
    65026972:	mov    rbx,rsi
    65026975:	imul   rbx,rbx,0x58
    65026979:	add    rbx,QWORD PTR [rip+0x22620]        # 0x65048fa0
    65026980:	mov    rax,QWORD PTR [rbx]
    65026983:	cmp    rax,0xffffffffffffffff
    65026987:	je     0x65026998
    65026989:	cmp    rax,0xfffffffffffffffe
    6502698d:	je     0x65026998
    6502698f:	or     BYTE PTR [rbx+0x8],0x80
    65026993:	jmp    0x65026a17
    65026998:	mov    BYTE PTR [rbx+0x8],0x81
    6502699c:	test   rsi,rsi
    6502699f:	jne    0x650269a8
    650269a1:	mov    ecx,0xfffffff6
    650269a6:	jmp    0x650269b4
    650269a8:	mov    ecx,edi
    650269aa:	cmp    r13d,0x1
    650269ae:	sete   cl
    650269b1:	add    ecx,0xfffffff4
    650269b4:	call   QWORD PTR [rip+0xd906]        # 0x650342c0
    650269ba:	mov    r12,rax
    650269bd:	cmp    rax,0xffffffffffffffff
    650269c1:	je     0x65026a0c
    650269c3:	test   rax,rax
    650269c6:	je     0x65026a0c
    650269c8:	mov    rcx,rax
    650269cb:	call   QWORD PTR [rip+0xd8f7]        # 0x650342c8
    650269d1:	test   eax,eax
    650269d3:	je     0x65026a0c
    650269d5:	mov    QWORD PTR [rbx],r12
    650269d8:	movzx  eax,al
    650269db:	cmp    eax,0x2
    650269de:	jne    0x650269e6
    650269e0:	or     BYTE PTR [rbx+0x8],0x40
    650269e4:	jmp    0x650269ef
    650269e6:	cmp    eax,0x3
    650269e9:	jne    0x650269ef
    650269eb:	or     BYTE PTR [rbx+0x8],0x8
    650269ef:	lea    rcx,[rbx+0x10]
    650269f3:	mov    edx,0xfa0
    650269f8:	call   0x65029e90
    650269fd:	test   eax,eax
    650269ff:	je     0x65026a07
    65026a01:	add    DWORD PTR [rbx+0xc],0x1
    65026a05:	jmp    0x65026a17
    65026a07:	or     eax,0xffffffff
    65026a0a:	jmp    0x65026a3c
    65026a0c:	or     BYTE PTR [rbx+0x8],0x40
    65026a10:	mov    QWORD PTR [rbx],0xfffffffffffffffe
    65026a17:	add    r13d,0x1
    65026a1b:	add    rsi,0x1
    65026a1f:	cmp    rsi,0x3
    65026a23:	jl     0x65026972
    65026a29:	mov    ecx,DWORD PTR [rip+0x22555]        # 0x65048f84
    65026a2f:	call   QWORD PTR [rip+0xd883]        # 0x650342b8
    65026a35:	xor    eax,eax
    65026a37:	jmp    0x65026a3c
    65026a39:	or     eax,0xffffffff
    65026a3c:	lea    r11,[rsp+0x90]
    65026a44:	mov    rbx,QWORD PTR [r11+0x20]
    65026a48:	mov    rsi,QWORD PTR [r11+0x28]
    65026a4c:	mov    rdi,QWORD PTR [r11+0x30]
    65026a50:	mov    r12,QWORD PTR [r11+0x38]
    65026a54:	mov    rsp,r11
    65026a57:	pop    r15
    65026a59:	pop    r14
    65026a5b:	pop    r13
    65026a5d:	ret    
    65026a5e:	int3   
    65026a5f:	int3   
    65026a60:	rex push rbx
    65026a62:	push   rbp
    65026a63:	sub    rsp,0x28
    65026a67:	mov    rbp,rdx
    65026a6a:	mov    ebx,0x1
    65026a6f:	mov    eax,ebx
    65026a71:	mov    eax,ebx
    65026a73:	add    rsp,0x28
    65026a77:	pop    rbp
    65026a78:	pop    rbx
    65026a79:	ret    
    65026a7a:	int3   
    65026a7b:	int3   
    65026a7c:	int3   
    65026a7d:	int3   
    65026a7e:	int3   
    65026a7f:	int3   
    65026a80:	mov    QWORD PTR [rsp+0x8],rbx
    65026a85:	mov    QWORD PTR [rsp+0x10],rbp
    65026a8a:	mov    QWORD PTR [rsp+0x18],rsi
    65026a8f:	push   rdi
    65026a90:	sub    rsp,0x20
    65026a94:	lea    rdi,[rip+0x22505]        # 0x65048fa0
    65026a9b:	xor    esi,esi
    65026a9d:	lea    rbp,[rip+0x226fc]        # 0x650491a0
    65026aa4:	mov    rbx,QWORD PTR [rdi]
    65026aa7:	test   rbx,rbx
    65026aaa:	je     0x65026ae4
    65026aac:	lea    rax,[rbx+0xb00]
    65026ab3:	cmp    rbx,rax
    65026ab6:	jae    0x65026ad9
    65026ab8:	cmp    DWORD PTR [rbx+0xc],esi
    65026abb:	je     0x65026ac7
    65026abd:	lea    rcx,[rbx+0x10]
    65026ac1:	call   QWORD PTR [rip+0xd661]        # 0x65034128
    65026ac7:	mov    rax,QWORD PTR [rdi]
    65026aca:	add    rbx,0x58
    65026ace:	add    rax,0xb00
    65026ad4:	cmp    rbx,rax
    65026ad7:	jb     0x65026ab8
    65026ad9:	mov    rcx,QWORD PTR [rdi]
    65026adc:	call   0x6501fc00
    65026ae1:	mov    QWORD PTR [rdi],rsi
    65026ae4:	add    rdi,0x8
    65026ae8:	cmp    rdi,rbp
    65026aeb:	jl     0x65026aa4
    65026aed:	mov    rbx,QWORD PTR [rsp+0x30]
    65026af2:	mov    rbp,QWORD PTR [rsp+0x38]
    65026af7:	mov    rsi,QWORD PTR [rsp+0x40]
    65026afc:	add    rsp,0x20
    65026b00:	pop    rdi
    65026b01:	ret    
    65026b02:	int3   
    65026b03:	int3   
    65026b04:	int3   
    65026b05:	int3   
    65026b06:	int3   
    65026b07:	int3   
    65026b08:	int3   
    65026b09:	int3   
    65026b0a:	int3   
    65026b0b:	int3   
    65026b0c:	int3   
    65026b0d:	int3   
    65026b0e:	int3   
    65026b0f:	int3   
    65026b10:	push   r12
    65026b12:	sub    rsp,0x30
    65026b16:	cmp    DWORD PTR [rip+0x2269b],0x0        # 0x650491b8
    65026b1d:	jne    0x65026b24
    65026b1f:	call   0x65023b20
    65026b24:	mov    rdx,QWORD PTR [rip+0x1e115]        # 0x65044c40
    65026b2b:	xor    r12d,r12d
    65026b2e:	test   rdx,rdx
    65026b31:	mov    r8d,r12d
    65026b34:	jne    0x65026b40
    65026b36:	or     eax,0xffffffff
    65026b39:	add    rsp,0x30
    65026b3d:	pop    r12
    65026b3f:	ret    
    65026b40:	movzx  eax,BYTE PTR [rdx]
    65026b43:	mov    QWORD PTR [rsp+0x50],rsi
    65026b48:	mov    QWORD PTR [rsp+0x58],rdi
    65026b4d:	test   al,al
    65026b4f:	je     0x65026b70
    65026b51:	cmp    al,0x3d
    65026b53:	je     0x65026b59
    65026b55:	add    r8d,0x1
    65026b59:	xor    eax,eax
    65026b5b:	or     rcx,0xffffffffffffffff
    65026b5f:	mov    rdi,rdx
    65026b62:	repnz scas al,BYTE PTR es:[rdi]
    65026b64:	not    rcx
    65026b67:	add    rdx,rcx
    65026b6a:	mov    al,BYTE PTR [rdx]
    65026b6c:	test   al,al
    65026b6e:	jne    0x65026b51
    65026b70:	lea    eax,[r8+0x1]
    65026b74:	mov    edx,0x8
    65026b79:	movsxd rcx,eax
    65026b7c:	call   0x65022af0
    65026b81:	test   rax,rax
    65026b84:	mov    rsi,rax
    65026b87:	mov    QWORD PTR [rip+0x1e69a],rax        # 0x65045228
    65026b8e:	jne    0x65026ba4
    65026b90:	mov    rsi,QWORD PTR [rsp+0x50]
    65026b95:	mov    rdi,QWORD PTR [rsp+0x58]
    65026b9a:	or     eax,0xffffffff
    65026b9d:	add    rsp,0x30
    65026ba1:	pop    r12
    65026ba3:	ret    
    65026ba4:	mov    QWORD PTR [rsp+0x40],rbx
    65026ba9:	mov    rbx,QWORD PTR [rip+0x1e090]        # 0x65044c40
    65026bb0:	mov    QWORD PTR [rsp+0x48],rbp
    65026bb5:	movzx  edx,BYTE PTR [rbx]
    65026bb8:	test   dl,dl
    65026bba:	je     0x65026c26
    65026bbc:	data16 data16 xchg ax,ax
    65026bc0:	or     rcx,0xffffffffffffffff
    65026bc4:	xor    eax,eax
    65026bc6:	mov    rdi,rbx
    65026bc9:	repnz scas al,BYTE PTR es:[rdi]
    65026bcb:	cmp    dl,0x3d
    65026bce:	not    rcx
    65026bd1:	movsxd rdi,ecx
    65026bd4:	je     0x65026c16
    65026bd6:	movsxd rbp,ecx
    65026bd9:	lea    edx,[rax+0x1]
    65026bdc:	mov    rcx,rbp
    65026bdf:	call   0x65022af0
    65026be4:	test   rax,rax
    65026be7:	mov    QWORD PTR [rsi],rax
    65026bea:	je     0x65026c5f
    65026bec:	mov    r8,rbx
    65026bef:	mov    rdx,rbp
    65026bf2:	mov    rcx,rax
    65026bf5:	call   0x65020320
    65026bfa:	test   eax,eax
    65026bfc:	je     0x65026c12
    65026bfe:	xor    r9d,r9d
    65026c01:	xor    r8d,r8d
    65026c04:	xor    edx,edx
    65026c06:	xor    ecx,ecx
    65026c08:	mov    QWORD PTR [rsp+0x20],r12
    65026c0d:	call   0x6501d920
    65026c12:	add    rsi,0x8
    65026c16:	add    rbx,rdi
    65026c19:	mov    dl,BYTE PTR [rbx]
    65026c1b:	test   dl,dl
    65026c1d:	jne    0x65026bc0
    65026c1f:	mov    rbx,QWORD PTR [rip+0x1e01a]        # 0x65044c40
    65026c26:	mov    rcx,rbx
    65026c29:	call   0x6501fc00
    65026c2e:	mov    QWORD PTR [rip+0x1e00b],r12        # 0x65044c40
    65026c35:	mov    QWORD PTR [rsi],r12
    65026c38:	mov    DWORD PTR [rip+0x2255e],0x1        # 0x650491a0
    65026c42:	xor    eax,eax
    65026c44:	mov    rbp,QWORD PTR [rsp+0x48]
    65026c49:	mov    rbx,QWORD PTR [rsp+0x40]
    65026c4e:	mov    rsi,QWORD PTR [rsp+0x50]
    65026c53:	mov    rdi,QWORD PTR [rsp+0x58]
    65026c58:	add    rsp,0x30
    65026c5c:	pop    r12
    65026c5e:	ret    
    65026c5f:	mov    rcx,QWORD PTR [rip+0x1e5c2]        # 0x65045228
    65026c66:	call   0x6501fc00
    65026c6b:	mov    QWORD PTR [rip+0x1e5b6],r12        # 0x65045228
    65026c72:	or     eax,0xffffffff
    65026c75:	jmp    0x65026c44
    65026c77:	int3   
    65026c78:	int3   
    65026c79:	int3   
    65026c7a:	int3   
    65026c7b:	int3   
    65026c7c:	int3   
    65026c7d:	int3   
    65026c7e:	int3   
    65026c7f:	int3   
    65026c80:	mov    QWORD PTR [rsp+0x8],rbx
    65026c85:	mov    QWORD PTR [rsp+0x10],rbp
    65026c8a:	mov    QWORD PTR [rsp+0x18],rsi
    65026c8f:	mov    QWORD PTR [rsp+0x20],rdi
    65026c94:	push   r12
    65026c96:	push   r13
    65026c98:	push   r14
    65026c9a:	sub    rsp,0x20
    65026c9e:	test   rdx,rdx
    65026ca1:	mov    rbp,QWORD PTR [rsp+0x60]
    65026ca6:	mov    r14,r9
    65026ca9:	mov    DWORD PTR [rbp+0x0],0x0
    65026cb0:	mov    rdi,r8
    65026cb3:	mov    r13,rdx
    65026cb6:	mov    DWORD PTR [r9],0x1
    65026cbd:	mov    rbx,rcx
    65026cc0:	je     0x65026cc9
    65026cc2:	mov    QWORD PTR [rdx],r8
    65026cc5:	add    r13,0x8
    65026cc9:	xor    r12d,r12d
    65026ccc:	data16 data16 xchg ax,ax
    65026cd0:	cmp    BYTE PTR [rbx],0x22
    65026cd3:	jne    0x65026ce9
    65026cd5:	xor    eax,eax
    65026cd7:	test   r12d,r12d
    65026cda:	mov    sil,0x22
    65026cdd:	sete   al
    65026ce0:	add    rbx,0x1
    65026ce4:	mov    r12d,eax
    65026ce7:	jmp    0x65026d2a
    65026ce9:	add    DWORD PTR [rbp+0x0],0x1
    65026ced:	test   rdi,rdi
    65026cf0:	je     0x65026cfc
    65026cf2:	movzx  eax,BYTE PTR [rbx]
    65026cf5:	add    rdi,0x1
    65026cf9:	mov    BYTE PTR [rdi-0x1],al
    65026cfc:	movzx  esi,BYTE PTR [rbx]
    65026cff:	add    rbx,0x1
    65026d03:	mov    ecx,esi
    65026d05:	call   0x6502d160
    65026d0a:	test   eax,eax
    65026d0c:	je     0x65026d25
    65026d0e:	add    DWORD PTR [rbp+0x0],0x1
    65026d12:	test   rdi,rdi
    65026d15:	je     0x65026d21
    65026d17:	movzx  eax,BYTE PTR [rbx]
    65026d1a:	add    rdi,0x1
    65026d1e:	mov    BYTE PTR [rdi-0x1],al
    65026d21:	add    rbx,0x1
    65026d25:	test   sil,sil
    65026d28:	je     0x65026d46
    65026d2a:	test   r12d,r12d
    65026d2d:	jne    0x65026cd0
    65026d2f:	cmp    sil,0x20
    65026d33:	je     0x65026d3b
    65026d35:	cmp    sil,0x9
    65026d39:	jne    0x65026cd0
    65026d3b:	test   rdi,rdi
    65026d3e:	je     0x65026d4a
    65026d40:	mov    BYTE PTR [rdi-0x1],0x0
    65026d44:	jmp    0x65026d4a
    65026d46:	sub    rbx,0x1
    65026d4a:	xor    esi,esi
    65026d4c:	data16 data16 xchg ax,ax
    65026d50:	cmp    BYTE PTR [rbx],0x0
    65026d53:	je     0x65026e6d
    65026d59:	data16 xchg ax,ax
    65026d5c:	data16 data16 xchg ax,ax
    65026d60:	movzx  eax,BYTE PTR [rbx]
    65026d63:	cmp    al,0x20
    65026d65:	je     0x65026d6b
    65026d67:	cmp    al,0x9
    65026d69:	jne    0x65026d71
    65026d6b:	add    rbx,0x1
    65026d6f:	jmp    0x65026d60
    65026d71:	cmp    BYTE PTR [rbx],0x0
    65026d74:	je     0x65026e6d
    65026d7a:	test   r13,r13
    65026d7d:	je     0x65026d87
    65026d7f:	mov    QWORD PTR [r13+0x0],rdi
    65026d83:	add    r13,0x8
    65026d87:	add    DWORD PTR [r14],0x1
    65026d8b:	xchg   ax,ax
    65026d8d:	data16 xchg ax,ax
    65026d90:	xor    ecx,ecx
    65026d92:	cmp    BYTE PTR [rbx],0x5c
    65026d95:	mov    edx,0x1
    65026d9a:	jne    0x65026daa
    65026d9c:	data16 data16 xchg ax,ax
    65026da0:	add    rbx,rdx
    65026da3:	add    ecx,edx
    65026da5:	cmp    BYTE PTR [rbx],0x5c
    65026da8:	je     0x65026da0
    65026daa:	cmp    BYTE PTR [rbx],0x22
    65026dad:	jne    0x65026dd3
    65026daf:	test   dl,cl
    65026db1:	jne    0x65026dd1
    65026db3:	test   esi,esi
    65026db5:	je     0x65026dc6
    65026db7:	cmp    BYTE PTR [rbx+0x1],0x22
    65026dbb:	lea    rax,[rbx+0x1]
    65026dbf:	jne    0x65026dc6
    65026dc1:	mov    rbx,rax
    65026dc4:	jmp    0x65026dd1
    65026dc6:	xor    eax,eax
    65026dc8:	xor    edx,edx
    65026dca:	test   esi,esi
    65026dcc:	sete   al
    65026dcf:	mov    esi,eax
    65026dd1:	shr    ecx,1
    65026dd3:	test   ecx,ecx
    65026dd5:	je     0x65026dee
    65026dd7:	add    ecx,0xffffffff
    65026dda:	test   rdi,rdi
    65026ddd:	je     0x65026de6
    65026ddf:	mov    BYTE PTR [rdi],0x5c
    65026de2:	add    rdi,0x1
    65026de6:	add    DWORD PTR [rbp+0x0],0x1
    65026dea:	test   ecx,ecx
    65026dec:	jne    0x65026dd7
    65026dee:	movzx  eax,BYTE PTR [rbx]
    65026df1:	test   al,al
    65026df3:	je     0x65026e58
    65026df5:	test   esi,esi
    65026df7:	jne    0x65026e01
    65026df9:	cmp    al,0x20
    65026dfb:	je     0x65026e58
    65026dfd:	cmp    al,0x9
    65026dff:	je     0x65026e58
    65026e01:	test   edx,edx
    65026e03:	je     0x65026e4f
    65026e05:	movsx  ecx,al
    65026e08:	call   0x6502d160
    65026e0d:	test   rdi,rdi
    65026e10:	je     0x65026e3f
    65026e12:	test   eax,eax
    65026e14:	je     0x65026e28
    65026e16:	movzx  eax,BYTE PTR [rbx]
    65026e19:	add    rdi,0x1
    65026e1d:	add    rbx,0x1
    65026e21:	mov    BYTE PTR [rdi-0x1],al
    65026e24:	add    DWORD PTR [rbp+0x0],0x1
    65026e28:	movzx  eax,BYTE PTR [rbx]
    65026e2b:	add    rdi,0x1
    65026e2f:	mov    BYTE PTR [rdi-0x1],al
    65026e32:	add    DWORD PTR [rbp+0x0],0x1
    65026e36:	add    rbx,0x1
    65026e3a:	jmp    0x65026d90
    65026e3f:	test   eax,eax
    65026e41:	je     0x65026e4b
    65026e43:	add    rbx,0x1
    65026e47:	add    DWORD PTR [rbp+0x0],0x1
    65026e4b:	add    DWORD PTR [rbp+0x0],0x1
    65026e4f:	add    rbx,0x1
    65026e53:	jmp    0x65026d90
    65026e58:	test   rdi,rdi
    65026e5b:	je     0x65026e64
    65026e5d:	mov    BYTE PTR [rdi],0x0
    65026e60:	add    rdi,0x1
    65026e64:	add    DWORD PTR [rbp+0x0],0x1
    65026e68:	jmp    0x65026d50
    65026e6d:	test   r13,r13
    65026e70:	je     0x65026e7a
    65026e72:	mov    QWORD PTR [r13+0x0],0x0
    65026e7a:	add    DWORD PTR [r14],0x1
    65026e7e:	mov    rbx,QWORD PTR [rsp+0x40]
    65026e83:	mov    rbp,QWORD PTR [rsp+0x48]
    65026e88:	mov    rsi,QWORD PTR [rsp+0x50]
    65026e8d:	mov    rdi,QWORD PTR [rsp+0x58]
    65026e92:	add    rsp,0x20
    65026e96:	pop    r14
    65026e98:	pop    r13
    65026e9a:	pop    r12
    65026e9c:	ret    
    65026e9d:	int3   
    65026e9e:	int3   
    65026e9f:	int3   
    65026ea0:	mov    QWORD PTR [rsp+0x18],rbx
    65026ea5:	mov    QWORD PTR [rsp+0x20],rsi
    65026eaa:	push   rdi
    65026eab:	sub    rsp,0x30
    65026eaf:	cmp    DWORD PTR [rip+0x22302],0x0        # 0x650491b8
    65026eb6:	jne    0x65026ebd
    65026eb8:	call   0x65023b20
    65026ebd:	lea    rdi,[rip+0x1e3fc]        # 0x650452c0
    65026ec4:	mov    r8d,0x104
    65026eca:	xor    ecx,ecx
    65026ecc:	mov    rdx,rdi
    65026ecf:	mov    BYTE PTR [rip+0x1e4ee],0x0        # 0x650453c4
    65026ed6:	call   QWORD PTR [rip+0xd3fc]        # 0x650342d8
    65026edc:	mov    rbx,QWORD PTR [rip+0x222ed]        # 0x650491d0
    65026ee3:	mov    QWORD PTR [rip+0x1e35e],rdi        # 0x65045248
    65026eea:	test   rbx,rbx
    65026eed:	je     0x65026ef4
    65026eef:	cmp    BYTE PTR [rbx],0x0
    65026ef2:	jne    0x65026ef7
    65026ef4:	mov    rbx,rdi
    65026ef7:	lea    rax,[rsp+0x48]
    65026efc:	lea    r9,[rsp+0x40]
    65026f01:	xor    r8d,r8d
    65026f04:	xor    edx,edx
    65026f06:	mov    rcx,rbx
    65026f09:	mov    QWORD PTR [rsp+0x20],rax
    65026f0e:	call   0x65026c80
    65026f13:	movsxd rsi,DWORD PTR [rsp+0x40]
    65026f18:	movabs rax,0x1fffffffffffffff
    65026f22:	cmp    rsi,rax
    65026f25:	jae    0x65026f8f
    65026f27:	movsxd rax,DWORD PTR [rsp+0x48]
    65026f2c:	cmp    rax,0xffffffffffffffff
    65026f30:	jae    0x65026f8f
    65026f32:	lea    rcx,[rax+rsi*8]
    65026f36:	cmp    rcx,rax
    65026f39:	jb     0x65026f8f
    65026f3b:	call   0x65022a80
    65026f40:	test   rax,rax
    65026f43:	mov    rdi,rax
    65026f46:	je     0x65026f8f
    65026f48:	lea    r8,[rax+rsi*8]
    65026f4c:	lea    rax,[rsp+0x48]
    65026f51:	lea    r9,[rsp+0x40]
    65026f56:	mov    rdx,rdi
    65026f59:	mov    rcx,rbx
    65026f5c:	mov    QWORD PTR [rsp+0x20],rax
    65026f61:	call   0x65026c80
    65026f66:	mov    r11d,DWORD PTR [rsp+0x40]
    65026f6b:	mov    QWORD PTR [rip+0x1e2a6],rdi        # 0x65045218
    65026f72:	add    r11d,0xffffffff
    65026f76:	xor    eax,eax
    65026f78:	mov    DWORD PTR [rip+0x1e291],r11d        # 0x65045210
    65026f7f:	mov    rbx,QWORD PTR [rsp+0x50]
    65026f84:	mov    rsi,QWORD PTR [rsp+0x58]
    65026f89:	add    rsp,0x30
    65026f8d:	pop    rdi
    65026f8e:	ret    
    65026f8f:	mov    rbx,QWORD PTR [rsp+0x50]
    65026f94:	mov    rsi,QWORD PTR [rsp+0x58]
    65026f99:	or     eax,0xffffffff
    65026f9c:	add    rsp,0x30
    65026fa0:	pop    rdi
    65026fa1:	ret    
    65026fa2:	int3   
    65026fa3:	int3   
    65026fa4:	int3   
    65026fa5:	int3   
    65026fa6:	int3   
    65026fa7:	int3   
    65026fa8:	int3   
    65026fa9:	int3   
    65026faa:	int3   
    65026fab:	int3   
    65026fac:	int3   
    65026fad:	int3   
    65026fae:	int3   
    65026faf:	int3   
    65026fb0:	mov    QWORD PTR [rsp+0x18],rbx
    65026fb5:	mov    QWORD PTR [rsp+0x20],rsi
    65026fba:	push   rdi
    65026fbb:	sub    rsp,0x40
    65026fbf:	mov    eax,DWORD PTR [rip+0x1e403]        # 0x650453c8
    65026fc5:	test   eax,eax
    65026fc7:	jne    0x65027003
    65026fc9:	call   QWORD PTR [rip+0xd111]        # 0x650340e0
    65026fcf:	test   rax,rax
    65026fd2:	mov    rdi,rax
    65026fd5:	je     0x65026fe3
    65026fd7:	mov    DWORD PTR [rip+0x1e3e7],0x1        # 0x650453c8
    65026fe1:	jmp    0x6502701e
    65026fe3:	call   QWORD PTR [rip+0xd07f]        # 0x65034068
    65026fe9:	cmp    eax,0x78
    65026fec:	jne    0x65026ffd
    65026fee:	mov    DWORD PTR [rip+0x1e3d0],0x2        # 0x650453c8
    65026ff8:	jmp    0x650270f9
    65026ffd:	mov    eax,DWORD PTR [rip+0x1e3c5]        # 0x650453c8
    65027003:	cmp    eax,0x1
    65027006:	jne    0x650270f0
    6502700c:	call   QWORD PTR [rip+0xd0ce]        # 0x650340e0
    65027012:	test   rax,rax
    65027015:	mov    rdi,rax
    65027018:	je     0x65027143
    6502701e:	cmp    WORD PTR [rdi],0x0
    65027022:	mov    QWORD PTR [rsp+0x50],rbp
    65027027:	mov    rbx,rdi
    6502702a:	mov    QWORD PTR [rsp+0x58],r12
    6502702f:	je     0x65027045
    65027031:	add    rbx,0x2
    65027035:	cmp    WORD PTR [rbx],0x0
    65027039:	jne    0x65027031
    6502703b:	add    rbx,0x2
    6502703f:	cmp    WORD PTR [rbx],0x0
    65027043:	jne    0x65027031
    65027045:	xor    r12d,r12d
    65027048:	sub    rbx,rdi
    6502704b:	mov    r8,rdi
    6502704e:	mov    QWORD PTR [rsp+0x38],r12
    65027053:	mov    QWORD PTR [rsp+0x30],r12
    65027058:	sar    rbx,1
    6502705b:	lea    r9d,[rbx+0x1]
    6502705f:	xor    edx,edx
    65027061:	xor    ecx,ecx
    65027063:	mov    DWORD PTR [rsp+0x28],r12d
    65027068:	mov    QWORD PTR [rsp+0x20],r12
    6502706d:	call   QWORD PTR [rip+0xcfbd]        # 0x65034030
    65027073:	test   eax,eax
    65027075:	movsxd rbp,eax
    65027078:	je     0x650270e3
    6502707a:	mov    rcx,rbp
    6502707d:	call   0x65022a80
    65027082:	test   rax,rax
    65027085:	mov    rsi,rax
    65027088:	je     0x650270e3
    6502708a:	mov    QWORD PTR [rsp+0x38],r12
    6502708f:	mov    QWORD PTR [rsp+0x30],r12
    65027094:	lea    r9d,[rbx+0x1]
    65027098:	mov    r8,rdi
    6502709b:	xor    edx,edx
    6502709d:	xor    ecx,ecx
    6502709f:	mov    DWORD PTR [rsp+0x28],ebp
    650270a3:	mov    QWORD PTR [rsp+0x20],rax
    650270a8:	call   QWORD PTR [rip+0xcf82]        # 0x65034030
    650270ae:	test   eax,eax
    650270b0:	jne    0x650270bd
    650270b2:	mov    rcx,rsi
    650270b5:	call   0x6501fc00
    650270ba:	mov    rsi,r12
    650270bd:	mov    rcx,rdi
    650270c0:	call   QWORD PTR [rip+0xd22a]        # 0x650342f0
    650270c6:	mov    rax,rsi
    650270c9:	mov    rbp,QWORD PTR [rsp+0x50]
    650270ce:	mov    r12,QWORD PTR [rsp+0x58]
    650270d3:	mov    rbx,QWORD PTR [rsp+0x60]
    650270d8:	mov    rsi,QWORD PTR [rsp+0x68]
    650270dd:	add    rsp,0x40
    650270e1:	pop    rdi
    650270e2:	ret    
    650270e3:	mov    rcx,rdi
    650270e6:	call   QWORD PTR [rip+0xd204]        # 0x650342f0
    650270ec:	xor    eax,eax
    650270ee:	jmp    0x650270c9
    650270f0:	cmp    eax,0x2
    650270f3:	je     0x650270f9
    650270f5:	test   eax,eax
    650270f7:	jne    0x65027143
    650270f9:	call   QWORD PTR [rip+0xd1e9]        # 0x650342e8
    650270ff:	test   rax,rax
    65027102:	mov    rbx,rax
    65027105:	je     0x65027143
    65027107:	cmp    BYTE PTR [rax],0x0
    6502710a:	je     0x65027122
    6502710c:	data16 data16 xchg ax,ax
    65027110:	add    rax,0x1
    65027114:	cmp    BYTE PTR [rax],0x0
    65027117:	jne    0x65027110
    65027119:	add    rax,0x1
    6502711d:	cmp    BYTE PTR [rax],0x0
    65027120:	jne    0x65027110
    65027122:	sub    eax,ebx
    65027124:	add    eax,0x1
    65027127:	movsxd rsi,eax
    6502712a:	mov    rcx,rsi
    6502712d:	call   0x65022a80
    65027132:	test   rax,rax
    65027135:	mov    rdi,rax
    65027138:	jne    0x65027155
    6502713a:	mov    rcx,rbx
    6502713d:	call   QWORD PTR [rip+0xd19d]        # 0x650342e0
    65027143:	xor    eax,eax
    65027145:	mov    rbx,QWORD PTR [rsp+0x60]
    6502714a:	mov    rsi,QWORD PTR [rsp+0x68]
    6502714f:	add    rsp,0x40
    65027153:	pop    rdi
    65027154:	ret    
    65027155:	mov    r8,rsi
    65027158:	mov    rdx,rbx
    6502715b:	mov    rcx,rax
    6502715e:	call   0x6501fd30
    65027163:	mov    rcx,rbx
    65027166:	call   QWORD PTR [rip+0xd174]        # 0x650342e0
    6502716c:	mov    rbx,QWORD PTR [rsp+0x60]
    65027171:	mov    rsi,QWORD PTR [rsp+0x68]
    65027176:	mov    rax,rdi
    65027179:	add    rsp,0x40
    6502717d:	pop    rdi
    6502717e:	ret    
    6502717f:	int3   
    65027180:	mov    QWORD PTR [rsp+0x8],rbx
    65027185:	push   rdi
    65027186:	sub    rsp,0x20
    6502718a:	lea    rbx,[rip+0x138e7]        # 0x6503aa78
    65027191:	lea    rdi,[rip+0x138e0]        # 0x6503aa78
    65027198:	cmp    rbx,rdi
    6502719b:	jae    0x650271b3
    6502719d:	data16 xchg ax,ax
    650271a0:	mov    rax,QWORD PTR [rbx]
    650271a3:	test   rax,rax
    650271a6:	je     0x650271aa
    650271a8:	call   rax
    650271aa:	add    rbx,0x8
    650271ae:	cmp    rbx,rdi
    650271b1:	jb     0x650271a0
    650271b3:	mov    rbx,QWORD PTR [rsp+0x30]
    650271b8:	add    rsp,0x20
    650271bc:	pop    rdi
    650271bd:	ret    
    650271be:	int3   
    650271bf:	int3   
    650271c0:	mov    QWORD PTR [rsp+0x8],rbx
    650271c5:	push   rdi
    650271c6:	sub    rsp,0x20
    650271ca:	lea    rbx,[rip+0x138b7]        # 0x6503aa88
    650271d1:	lea    rdi,[rip+0x138b0]        # 0x6503aa88
    650271d8:	cmp    rbx,rdi
    650271db:	jae    0x650271f3
    650271dd:	data16 xchg ax,ax
    650271e0:	mov    rax,QWORD PTR [rbx]
    650271e3:	test   rax,rax
    650271e6:	je     0x650271ea
    650271e8:	call   rax
    650271ea:	add    rbx,0x8
    650271ee:	cmp    rbx,rdi
    650271f1:	jb     0x650271e0
    650271f3:	mov    rbx,QWORD PTR [rsp+0x30]
    650271f8:	add    rsp,0x20
    650271fc:	pop    rdi
    650271fd:	ret    
    650271fe:	int3   
    650271ff:	int3   
    65027200:	mov    QWORD PTR [rsp+0x10],rbx
    65027205:	mov    QWORD PTR [rsp+0x18],rsi
    6502720a:	push   rdi
    6502720b:	sub    rsp,0x20
    6502720f:	mov    rsi,rdx
    65027212:	mov    edi,ecx
    65027214:	call   0x650209a0
    65027219:	test   rax,rax
    6502721c:	mov    rbx,rax
    6502721f:	je     0x650273fe
    65027225:	mov    rcx,QWORD PTR [rax+0xa0]
    6502722c:	movsxd r8,DWORD PTR [rip+0x1c8a9]        # 0x65043adc
    65027233:	mov    rdx,rcx
    65027236:	cmp    DWORD PTR [rdx],edi
    65027238:	je     0x6502724d
    6502723a:	mov    rax,r8
    6502723d:	add    rdx,0x10
    65027241:	shl    rax,0x4
    65027245:	add    rax,rcx
    65027248:	cmp    rdx,rax
    6502724b:	jb     0x65027236
    6502724d:	mov    rax,r8
    65027250:	shl    rax,0x4
    65027254:	add    rax,rcx
    65027257:	cmp    rdx,rax
    6502725a:	jae    0x650273fe
    65027260:	cmp    DWORD PTR [rdx],edi
    65027262:	jne    0x650273fe
    65027268:	mov    r9,QWORD PTR [rdx+0x8]
    6502726c:	test   r9,r9
    6502726f:	je     0x650273fe
    65027275:	cmp    r9,0x5
    65027279:	jne    0x65027296
    6502727b:	xor    r8d,r8d
    6502727e:	lea    eax,[r9-0x4]
    65027282:	mov    QWORD PTR [rdx+0x8],r8
    65027286:	mov    rbx,QWORD PTR [rsp+0x38]
    6502728b:	mov    rsi,QWORD PTR [rsp+0x40]
    65027290:	add    rsp,0x20
    65027294:	pop    rdi
    65027295:	ret    
    65027296:	cmp    r9,0x1
    6502729a:	jne    0x650272af
    6502729c:	or     eax,0xffffffff
    6502729f:	mov    rbx,QWORD PTR [rsp+0x38]
    650272a4:	mov    rsi,QWORD PTR [rsp+0x40]
    650272a9:	add    rsp,0x20
    650272ad:	pop    rdi
    650272ae:	ret    
    650272af:	mov    QWORD PTR [rsp+0x30],rbp
    650272b4:	mov    rbp,QWORD PTR [rbx+0xa8]
    650272bb:	mov    QWORD PTR [rbx+0xa8],rsi
    650272c2:	mov    ecx,DWORD PTR [rdx+0x4]
    650272c5:	cmp    ecx,0x8
    650272c8:	jne    0x650273d5
    650272ce:	movsxd r10,DWORD PTR [rip+0x1c7fb]        # 0x65043ad0
    650272d5:	mov    ecx,DWORD PTR [rip+0x1c7f9]        # 0x65043ad4
    650272db:	add    ecx,r10d
    650272de:	mov    r11,r10
    650272e1:	cmp    r10d,ecx
    650272e4:	jge    0x65027317
    650272e6:	shl    r11,0x4
    650272ea:	xor    r8d,r8d
    650272ed:	data16 xchg ax,ax
    650272f0:	mov    rax,QWORD PTR [rbx+0xa0]
    650272f7:	add    r10d,0x1
    650272fb:	add    r11,0x10
    650272ff:	mov    QWORD PTR [r11+rax*1-0x8],r8
    65027304:	mov    ecx,DWORD PTR [rip+0x1c7ca]        # 0x65043ad4
    6502730a:	mov    eax,DWORD PTR [rip+0x1c7c0]        # 0x65043ad0
    65027310:	add    ecx,eax
    65027312:	cmp    r10d,ecx
    65027315:	jl     0x650272f0
    65027317:	mov    eax,DWORD PTR [rdx]
    65027319:	mov    edi,DWORD PTR [rbx+0xb0]
    6502731f:	cmp    eax,0xc000008e
    65027324:	jne    0x65027332
    65027326:	mov    DWORD PTR [rbx+0xb0],0x83
    65027330:	jmp    0x650273a2
    65027332:	cmp    eax,0xc0000090
    65027337:	jne    0x65027345
    65027339:	mov    DWORD PTR [rbx+0xb0],0x81
    65027343:	jmp    0x650273a2
    65027345:	cmp    eax,0xc0000091
    6502734a:	jne    0x65027358
    6502734c:	mov    DWORD PTR [rbx+0xb0],0x84
    65027356:	jmp    0x650273a2
    65027358:	cmp    eax,0xc0000093
    6502735d:	jne    0x6502736b
    6502735f:	mov    DWORD PTR [rbx+0xb0],0x85
    65027369:	jmp    0x650273a2
    6502736b:	cmp    eax,0xc000008d
    65027370:	jne    0x6502737e
    65027372:	mov    DWORD PTR [rbx+0xb0],0x82
    6502737c:	jmp    0x650273a2
    6502737e:	cmp    eax,0xc000008f
    65027383:	jne    0x65027391
    65027385:	mov    DWORD PTR [rbx+0xb0],0x86
    6502738f:	jmp    0x650273a2
    65027391:	cmp    eax,0xc0000092
    65027396:	jne    0x650273a2
    65027398:	mov    DWORD PTR [rbx+0xb0],0x8a
    650273a2:	mov    edx,DWORD PTR [rbx+0xb0]
    650273a8:	mov    ecx,0x8
    650273ad:	call   r9
    650273b0:	mov    QWORD PTR [rbx+0xa8],rbp
    650273b7:	mov    rbp,QWORD PTR [rsp+0x30]
    650273bc:	mov    DWORD PTR [rbx+0xb0],edi
    650273c2:	or     eax,0xffffffff
    650273c5:	mov    rbx,QWORD PTR [rsp+0x38]
    650273ca:	mov    rsi,QWORD PTR [rsp+0x40]
    650273cf:	add    rsp,0x20
    650273d3:	pop    rdi
    650273d4:	ret    
    650273d5:	xor    r8d,r8d
    650273d8:	mov    QWORD PTR [rdx+0x8],r8
    650273dc:	call   r9
    650273df:	mov    QWORD PTR [rbx+0xa8],rbp
    650273e6:	mov    rbp,QWORD PTR [rsp+0x30]
    650273eb:	or     eax,0xffffffff
    650273ee:	mov    rbx,QWORD PTR [rsp+0x38]
    650273f3:	mov    rsi,QWORD PTR [rsp+0x40]
    650273f8:	add    rsp,0x20
    650273fc:	pop    rdi
    650273fd:	ret    
    650273fe:	mov    rbx,QWORD PTR [rsp+0x38]
    65027403:	mov    rsi,QWORD PTR [rsp+0x40]
    65027408:	xor    eax,eax
    6502740a:	add    rsp,0x20
    6502740e:	pop    rdi
    6502740f:	ret    
    65027410:	cmp    ecx,0xe06d7363
    65027416:	jne    0x6502741d
    65027418:	jmp    0x65027200
    6502741d:	xor    eax,eax
    6502741f:	ret    
    65027420:	rex push rdi
    65027422:	sub    rsp,0x20
    65027426:	mov    rax,QWORD PTR [rip+0x1bcf3]        # 0x65043120
    6502742d:	movabs rdi,0x2b992ddfa232
    65027437:	mov    QWORD PTR [rsp+0x30],0x0
    65027440:	cmp    rax,rdi
    65027443:	je     0x65027455
    65027445:	not    rax
    65027448:	mov    QWORD PTR [rip+0x1bcd9],rax        # 0x65043128
    6502744f:	add    rsp,0x20
    65027453:	pop    rdi
    65027454:	ret    
    65027455:	lea    rcx,[rsp+0x30]
    6502745a:	mov    QWORD PTR [rsp+0x40],rbx
    6502745f:	call   QWORD PTR [rip+0xcea3]        # 0x65034308
    65027465:	mov    rbx,QWORD PTR [rsp+0x30]
    6502746a:	call   QWORD PTR [rip+0xce90]        # 0x65034300
    65027470:	mov    r11d,eax
    65027473:	xor    rbx,r11
    65027476:	call   QWORD PTR [rip+0xcdac]        # 0x65034228
    6502747c:	mov    r11d,eax
    6502747f:	xor    rbx,r11
    65027482:	call   QWORD PTR [rip+0xcc08]        # 0x65034090
    65027488:	lea    rcx,[rsp+0x38]
    6502748d:	mov    r11d,eax
    65027490:	xor    rbx,r11
    65027493:	call   QWORD PTR [rip+0xce5f]        # 0x650342f8
    65027499:	mov    r11,QWORD PTR [rsp+0x38]
    6502749e:	xor    r11,rbx
    650274a1:	mov    rbx,QWORD PTR [rsp+0x40]
    650274a6:	movabs rax,0xffffffffffff
    650274b0:	and    r11,rax
    650274b3:	movabs rax,0x2b992ddfa233
    650274bd:	cmp    r11,rdi
    650274c0:	cmove  r11,rax
    650274c4:	mov    QWORD PTR [rip+0x1bc55],r11        # 0x65043120
    650274cb:	not    r11
    650274ce:	mov    QWORD PTR [rip+0x1bc53],r11        # 0x65043128
    650274d5:	add    rsp,0x20
    650274d9:	pop    rdi
    650274da:	ret    
    650274db:	int3   
    650274dc:	int3   
    650274dd:	int3   
    650274de:	int3   
    650274df:	int3   
    650274e0:	test   edx,edx
    650274e2:	jle    0x65027568
    650274e8:	mov    QWORD PTR [rsp+0x8],rbx
    650274ed:	mov    QWORD PTR [rsp+0x10],rbp
    650274f2:	mov    QWORD PTR [rsp+0x18],rsi
    650274f7:	push   rdi
    650274f8:	sub    rsp,0x20
    650274fc:	mov    rdi,r9
    650274ff:	mov    rbx,r8
    65027502:	mov    esi,edx
    65027504:	movzx  ebp,cl
    65027507:	sub    esi,0x1
    6502750a:	test   BYTE PTR [rbx+0x18],0x40
    6502750e:	je     0x65027517
    65027510:	cmp    QWORD PTR [rbx+0x10],0x0
    65027515:	je     0x6502753e
    65027517:	add    DWORD PTR [rbx+0x8],0xffffffff
    6502751b:	js     0x6502752d
    6502751d:	mov    rax,QWORD PTR [rbx]
    65027520:	mov    BYTE PTR [rax],bpl
    65027523:	add    QWORD PTR [rbx],0x1
    65027527:	movzx  eax,bpl
    6502752b:	jmp    0x65027539
    6502752d:	movsx  ecx,bpl
    65027531:	mov    rdx,rbx
    65027534:	call   0x65023f30
    65027539:	cmp    eax,0xffffffff
    6502753c:	je     0x6502754e
    6502753e:	add    DWORD PTR [rdi],0x1
    65027541:	mov    eax,DWORD PTR [rdi]
    65027543:	cmp    eax,0xffffffff
    65027546:	je     0x65027554
    65027548:	test   esi,esi
    6502754a:	jg     0x65027507
    6502754c:	jmp    0x65027554
    6502754e:	mov    DWORD PTR [rdi],0xffffffff
    65027554:	mov    rbx,QWORD PTR [rsp+0x30]
    65027559:	mov    rbp,QWORD PTR [rsp+0x38]
    6502755e:	mov    rsi,QWORD PTR [rsp+0x40]
    65027563:	add    rsp,0x20
    65027567:	pop    rdi
    65027568:	ret    0x0
    6502756b:	int3   
    6502756c:	int3   
    6502756d:	int3   
    6502756e:	int3   
    6502756f:	int3   
    65027570:	mov    QWORD PTR [rsp+0x8],rbx
    65027575:	mov    QWORD PTR [rsp+0x10],rbp
    6502757a:	mov    QWORD PTR [rsp+0x18],rsi
    6502757f:	push   rdi
    65027580:	sub    rsp,0x20
    65027584:	test   BYTE PTR [r8+0x18],0x40
    65027589:	mov    rdi,r9
    6502758c:	mov    rbx,r8
    6502758f:	mov    esi,edx
    65027591:	mov    rbp,rcx
    65027594:	je     0x650275a5
    65027596:	cmp    QWORD PTR [r8+0x10],0x0
    6502759b:	jne    0x650275a5
    6502759d:	add    DWORD PTR [r9],edx
    650275a0:	jmp    0x65027626
    650275a5:	test   edx,edx
    650275a7:	jle    0x65027626
    650275ad:	data16 xchg ax,ax
    650275b0:	movzx  ecx,BYTE PTR [rbp+0x0]
    650275b4:	sub    esi,0x1
    650275b7:	test   BYTE PTR [rbx+0x18],0x40
    650275bb:	je     0x650275c4
    650275bd:	cmp    QWORD PTR [rbx+0x10],0x0
    650275c2:	je     0x650275ec
    650275c4:	add    DWORD PTR [rbx+0x8],0xffffffff
    650275c8:	js     0x650275d8
    650275ca:	mov    rax,QWORD PTR [rbx]
    650275cd:	mov    BYTE PTR [rax],cl
    650275cf:	add    QWORD PTR [rbx],0x1
    650275d3:	movzx  eax,cl
    650275d6:	jmp    0x650275e3
    650275d8:	movsx  ecx,cl
    650275db:	mov    rdx,rbx
    650275de:	call   0x65023f30
    650275e3:	cmp    eax,0xffffffff
    650275e6:	jne    0x650275ec
    650275e8:	mov    DWORD PTR [rdi],eax
    650275ea:	jmp    0x650275ef
    650275ec:	add    DWORD PTR [rdi],0x1
    650275ef:	add    rbp,0x1
    650275f3:	cmp    DWORD PTR [rdi],0xffffffff
    650275f6:	jne    0x65027622
    650275f8:	call   0x65020420
    650275fd:	cmp    DWORD PTR [rax],0x2a
    65027600:	jne    0x65027626
    65027602:	test   BYTE PTR [rbx+0x18],0x40
    65027606:	je     0x6502760f
    65027608:	cmp    QWORD PTR [rbx+0x10],0x0
    6502760d:	je     0x6502761f
    6502760f:	add    DWORD PTR [rbx+0x8],0xffffffff
    65027613:	js     0x6502763b
    65027615:	mov    rax,QWORD PTR [rbx]
    65027618:	mov    BYTE PTR [rax],0x3f
    6502761b:	add    QWORD PTR [rbx],0x1
    6502761f:	add    DWORD PTR [rdi],0x1
    65027622:	test   esi,esi
    65027624:	jg     0x650275b0
    65027626:	mov    rbx,QWORD PTR [rsp+0x30]
    6502762b:	mov    rbp,QWORD PTR [rsp+0x38]
    65027630:	mov    rsi,QWORD PTR [rsp+0x40]
    65027635:	add    rsp,0x20
    65027639:	pop    rdi
    6502763a:	ret    
    6502763b:	mov    rdx,rbx
    6502763e:	mov    ecx,0x3f
    65027643:	call   0x65023f30
    65027648:	cmp    eax,0xffffffff
    6502764b:	jne    0x6502761f
    6502764d:	mov    DWORD PTR [rdi],eax
    6502764f:	jmp    0x65027622
    65027651:	int3   
    65027652:	int3   
    65027653:	int3   
    65027654:	int3   
    65027655:	int3   
    65027656:	int3   
    65027657:	int3   
    65027658:	int3   
    65027659:	int3   
    6502765a:	int3   
    6502765b:	int3   
    6502765c:	int3   
    6502765d:	int3   
    6502765e:	int3   
    6502765f:	int3   
    65027660:	rex push rbp
    65027662:	push   rsi
    65027663:	push   rdi
    65027664:	push   r12
    65027666:	push   r14
    65027668:	push   r15
    6502766a:	sub    rsp,0x2e8
    65027671:	mov    rax,QWORD PTR [rip+0x1baa8]        # 0x65043120
    65027678:	xor    rax,rsp
    6502767b:	mov    QWORD PTR [rsp+0x2c8],rax
    65027683:	xor    ebp,ebp
    65027685:	test   r8,r8
    65027688:	mov    rdi,r9
    6502768b:	mov    QWORD PTR [rsp+0x60],r9
    65027690:	mov    rsi,rdx
    65027693:	mov    r12,rcx
    65027696:	mov    DWORD PTR [rsp+0x74],ebp
    6502769a:	mov    r14d,ebp
    6502769d:	mov    DWORD PTR [rsp+0x40],ebp
    650276a1:	mov    DWORD PTR [rsp+0x68],ebp
    650276a5:	mov    r15d,ebp
    650276a8:	mov    DWORD PTR [rsp+0x48],ebp
    650276ac:	mov    DWORD PTR [rsp+0x54],ebp
    650276b0:	mov    DWORD PTR [rsp+0x70],ebp
    650276b4:	mov    DWORD PTR [rsp+0x4c],ebp
    650276b8:	mov    BYTE PTR [rsp+0x90],bpl
    650276c0:	jne    0x65027770
    650276c6:	call   0x65020a30
    650276cb:	mov    QWORD PTR [rsp+0x88],rax
    650276d3:	mov    rdx,rax
    650276d6:	mov    rcx,QWORD PTR [rax+0xc0]
    650276dd:	cmp    rcx,QWORD PTR [rip+0x1c2bc]        # 0x650439a0
    650276e4:	mov    QWORD PTR [rsp+0x78],rcx
    650276e9:	mov    rax,QWORD PTR [rax+0xb8]
    650276f0:	mov    QWORD PTR [rsp+0x80],rax
    650276f8:	je     0x65027722
    650276fa:	mov    ecx,DWORD PTR [rdx+0xc8]
    65027700:	test   DWORD PTR [rip+0x1c122],ecx        # 0x65043828
    65027706:	jne    0x65027722
    65027708:	call   0x65023e90
    6502770d:	mov    rdx,QWORD PTR [rsp+0x88]
    65027715:	mov    QWORD PTR [rsp+0x78],rax
    6502771a:	mov    rax,QWORD PTR [rsp+0x80]
    65027722:	cmp    rax,QWORD PTR [rip+0x1bff7]        # 0x65043720
    65027729:	je     0x6502774e
    6502772b:	mov    eax,DWORD PTR [rdx+0xc8]
    65027731:	test   DWORD PTR [rip+0x1c0f1],eax        # 0x65043828
    65027737:	jne    0x6502774e
    65027739:	call   0x65023340
    6502773e:	mov    rdx,QWORD PTR [rsp+0x88]
    65027746:	mov    QWORD PTR [rsp+0x80],rax
    6502774e:	test   BYTE PTR [rdx+0xc8],0x2
    65027755:	jne    0x6502778b
    65027757:	or     DWORD PTR [rdx+0xc8],0x2
    6502775e:	mov    rdx,QWORD PTR [rsp+0x88]
    65027766:	mov    BYTE PTR [rsp+0x90],0x1
    6502776e:	jmp    0x6502778b
    65027770:	mov    rax,QWORD PTR [r8]
    65027773:	lea    rcx,[rsp+0x78]
    65027778:	mov    QWORD PTR [rcx],rax
    6502777b:	mov    rax,QWORD PTR [r8+0x8]
    6502777f:	mov    QWORD PTR [rcx+0x8],rax
    65027783:	mov    rdx,QWORD PTR [rsp+0x88]
    6502778b:	test   r12,r12
    6502778e:	jne    0x650277d0
    65027790:	call   0x65020420
    65027795:	xor    r9d,r9d
    65027798:	xor    r8d,r8d
    6502779b:	xor    edx,edx
    6502779d:	xor    ecx,ecx
    6502779f:	mov    QWORD PTR [rsp+0x20],rbp
    650277a4:	mov    DWORD PTR [rax],0x16
    650277aa:	call   0x6501d9c0
    650277af:	cmp    BYTE PTR [rsp+0x90],bpl
    650277b7:	je     0x650277c8
    650277b9:	mov    rax,QWORD PTR [rsp+0x88]
    650277c1:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650277c8:	or     eax,0xffffffff
    650277cb:	jmp    0x65028576
    650277d0:	test   BYTE PTR [r12+0x18],0x40
    650277d6:	mov    QWORD PTR [rsp+0x2e0],rbx
    650277de:	lea    r10,[rip+0xfffffffffffd881b]        # 0x65000000
    650277e5:	mov    QWORD PTR [rsp+0x2d8],r13
    650277ed:	jne    0x650278be
    650277f3:	mov    rcx,r12
    650277f6:	call   0x6502b790
    650277fb:	lea    rbx,[rip+0x1c1ce]        # 0x650439d0
    65027802:	cmp    eax,0xffffffff
    65027805:	je     0x6502784a
    65027807:	mov    rcx,r12
    6502780a:	call   0x6502b790
    6502780f:	cmp    eax,0xfffffffe
    65027812:	je     0x6502784a
    65027814:	mov    rcx,r12
    65027817:	call   0x6502b790
    6502781c:	lea    r13,[rip+0xfffffffffffd87dd]        # 0x65000000
    65027823:	movsxd rcx,eax
    65027826:	sar    rcx,0x5
    6502782a:	mov    rdi,QWORD PTR [r13+rcx*8+0x48fa0]
    65027832:	mov    rcx,r12
    65027835:	call   0x6502b790
    6502783a:	mov    r11d,eax
    6502783d:	and    r11d,0x1f
    65027841:	imul   r11,r11,0x58
    65027845:	add    r11,rdi
    65027848:	jmp    0x65027854
    6502784a:	mov    r11,rbx
    6502784d:	lea    r13,[rip+0xfffffffffffd87ac]        # 0x65000000
    65027854:	test   BYTE PTR [r11+0x38],0x7f
    65027859:	jne    0x650278ef
    6502785f:	mov    rcx,r12
    65027862:	call   0x6502b790
    65027867:	cmp    eax,0xffffffff
    6502786a:	je     0x650278a4
    6502786c:	mov    rcx,r12
    6502786f:	call   0x6502b790
    65027874:	cmp    eax,0xfffffffe
    65027877:	je     0x650278a4
    65027879:	mov    rcx,r12
    6502787c:	call   0x6502b790
    65027881:	movsxd rcx,eax
    65027884:	sar    rcx,0x5
    65027888:	mov    rdi,QWORD PTR [r13+rcx*8+0x48fa0]
    65027890:	mov    rcx,r12
    65027893:	call   0x6502b790
    65027898:	mov    ebx,eax
    6502789a:	and    ebx,0x1f
    6502789d:	imul   rbx,rbx,0x58
    650278a1:	add    rbx,rdi
    650278a4:	test   BYTE PTR [rbx+0x38],0x80
    650278a8:	jne    0x650278ef
    650278aa:	mov    rdx,QWORD PTR [rsp+0x88]
    650278b2:	mov    rdi,QWORD PTR [rsp+0x60]
    650278b7:	lea    r10,[rip+0xfffffffffffd8742]        # 0x65000000
    650278be:	test   rsi,rsi
    650278c1:	jne    0x6502791b
    650278c3:	call   0x65020420
    650278c8:	xor    r9d,r9d
    650278cb:	xor    r8d,r8d
    650278ce:	xor    edx,edx
    650278d0:	xor    ecx,ecx
    650278d2:	mov    QWORD PTR [rsp+0x20],rbp
    650278d7:	mov    DWORD PTR [rax],0x16
    650278dd:	call   0x6501d9c0
    650278e2:	cmp    BYTE PTR [rsp+0x90],bpl
    650278ea:	jmp    0x65028535
    650278ef:	call   0x65020420
    650278f4:	xor    r9d,r9d
    650278f7:	xor    r8d,r8d
    650278fa:	xor    edx,edx
    650278fc:	xor    ecx,ecx
    650278fe:	mov    QWORD PTR [rsp+0x20],rbp
    65027903:	mov    DWORD PTR [rax],0x16
    65027909:	call   0x6501d9c0
    6502790e:	cmp    BYTE PTR [rsp+0x90],bpl
    65027916:	jmp    0x65028535
    6502791b:	movzx  r13d,BYTE PTR [rsi]
    6502791f:	xor    r9d,r9d
    65027922:	test   r13b,r13b
    65027925:	mov    DWORD PTR [rsp+0x44],r9d
    6502792a:	mov    DWORD PTR [rsp+0x50],r9d
    6502792f:	mov    r8d,r9d
    65027932:	mov    QWORD PTR [rsp+0xa0],r9
    6502793a:	je     0x65028553
    65027940:	mov    rbx,QWORD PTR [rsp+0xb0]
    65027948:	mov    r11d,0x200
    6502794e:	xchg   ax,ax
    65027950:	add    rsi,0x1
    65027954:	test   ebp,ebp
    65027956:	mov    QWORD PTR [rsp+0xb8],rsi
    6502795e:	js     0x6502854b
    65027964:	lea    eax,[r13-0x20]
    65027968:	cmp    al,0x58
    6502796a:	ja     0x6502797d
    6502796c:	movsx  rax,r13b
    65027970:	mov    cl,BYTE PTR [rax+r10*1+0x354e0]
    65027978:	and    ecx,0xf
    6502797b:	jmp    0x65027980
    6502797d:	mov    ecx,r9d
    65027980:	movsxd rax,r8d
    65027983:	movsxd rcx,ecx
    65027986:	lea    rdx,[rax+rcx*8]
    6502798a:	movsx  r8d,BYTE PTR [rdx+r10*1+0x35500]
    65027993:	sar    r8d,0x4
    65027997:	cmp    r8d,0x7
    6502799b:	mov    DWORD PTR [rsp+0x6c],r8d
    650279a0:	ja     0x650284f8
    650279a6:	movsxd rax,r8d
    650279a9:	mov    ecx,DWORD PTR [r10+rax*4+0x28598]
    650279b1:	add    rcx,r10
    650279b4:	jmp    rcx
    650279b6:	or     r15d,0xffffffff
    650279ba:	mov    DWORD PTR [rsp+0x98],r9d
    650279c2:	mov    DWORD PTR [rsp+0x70],r9d
    650279c7:	mov    DWORD PTR [rsp+0x68],r9d
    650279cc:	mov    DWORD PTR [rsp+0x54],r9d
    650279d1:	mov    r14d,r9d
    650279d4:	mov    DWORD PTR [rsp+0x48],r15d
    650279d9:	mov    DWORD PTR [rsp+0x40],r9d
    650279de:	mov    DWORD PTR [rsp+0x4c],r9d
    650279e3:	jmp    0x650284f8
    650279e8:	cmp    r13b,0x20
    650279ec:	je     0x65027a43
    650279ee:	cmp    r13b,0x23
    650279f2:	je     0x65027a34
    650279f4:	cmp    r13b,0x2b
    650279f8:	je     0x65027a26
    650279fa:	cmp    r13b,0x2d
    650279fe:	je     0x65027a18
    65027a00:	cmp    r13b,0x30
    65027a04:	jne    0x650284f8
    65027a0a:	or     r14d,0x8
    65027a0e:	mov    DWORD PTR [rsp+0x40],r14d
    65027a13:	jmp    0x650284f8
    65027a18:	or     r14d,0x4
    65027a1c:	mov    DWORD PTR [rsp+0x40],r14d
    65027a21:	jmp    0x650284f8
    65027a26:	or     r14d,0x1
    65027a2a:	mov    DWORD PTR [rsp+0x40],r14d
    65027a2f:	jmp    0x650284f8
    65027a34:	bts    r14d,0x7
    65027a39:	mov    DWORD PTR [rsp+0x40],r14d
    65027a3e:	jmp    0x650284f8
    65027a43:	or     r14d,0x2
    65027a47:	mov    DWORD PTR [rsp+0x40],r14d
    65027a4c:	jmp    0x650284f8
    65027a51:	cmp    r13b,0x2a
    65027a55:	jne    0x65027a82
    65027a57:	mov    eax,DWORD PTR [rdi]
    65027a59:	add    rdi,0x8
    65027a5d:	test   eax,eax
    65027a5f:	mov    QWORD PTR [rsp+0x60],rdi
    65027a64:	mov    DWORD PTR [rsp+0x68],eax
    65027a68:	jns    0x650284f8
    65027a6e:	or     r14d,0x4
    65027a72:	neg    eax
    65027a74:	mov    DWORD PTR [rsp+0x68],eax
    65027a78:	mov    DWORD PTR [rsp+0x40],r14d
    65027a7d:	jmp    0x650284f8
    65027a82:	mov    eax,DWORD PTR [rsp+0x68]
    65027a86:	lea    ecx,[rax+rax*4]
    65027a89:	movsx  eax,r13b
    65027a8d:	lea    eax,[rax+rcx*2-0x30]
    65027a91:	mov    DWORD PTR [rsp+0x68],eax
    65027a95:	jmp    0x650284f8
    65027a9a:	mov    r15d,r9d
    65027a9d:	mov    DWORD PTR [rsp+0x48],r9d
    65027aa2:	jmp    0x650284f8
    65027aa7:	cmp    r13b,0x2a
    65027aab:	jne    0x65027ad5
    65027aad:	mov    r15d,DWORD PTR [rdi]
    65027ab0:	add    rdi,0x8
    65027ab4:	test   r15d,r15d
    65027ab7:	mov    QWORD PTR [rsp+0x60],rdi
    65027abc:	mov    DWORD PTR [rsp+0x48],r15d
    65027ac1:	jns    0x650284f8
    65027ac7:	or     r15d,0xffffffff
    65027acb:	mov    DWORD PTR [rsp+0x48],r15d
    65027ad0:	jmp    0x650284f8
    65027ad5:	lea    ecx,[r15+r15*4]
    65027ad9:	movsx  eax,r13b
    65027add:	lea    r15d,[rax+rcx*2-0x30]
    65027ae2:	mov    DWORD PTR [rsp+0x48],r15d
    65027ae7:	jmp    0x650284f8
    65027aec:	cmp    r13b,0x49
    65027af0:	je     0x65027b4b
    65027af2:	cmp    r13b,0x68
    65027af6:	je     0x65027b3d
    65027af8:	cmp    r13b,0x6c
    65027afc:	je     0x65027b17
    65027afe:	cmp    r13b,0x77
    65027b02:	jne    0x650284f8
    65027b08:	bts    r14d,0xb
    65027b0d:	mov    DWORD PTR [rsp+0x40],r14d
    65027b12:	jmp    0x650284f8
    65027b17:	cmp    BYTE PTR [rsi],0x6c
    65027b1a:	jne    0x65027b2f
    65027b1c:	add    rsi,0x1
    65027b20:	bts    r14d,0xc
    65027b25:	mov    DWORD PTR [rsp+0x40],r14d
    65027b2a:	jmp    0x650284f8
    65027b2f:	or     r14d,0x10
    65027b33:	mov    DWORD PTR [rsp+0x40],r14d
    65027b38:	jmp    0x650284f8
    65027b3d:	or     r14d,0x20
    65027b41:	mov    DWORD PTR [rsp+0x40],r14d
    65027b46:	jmp    0x650284f8
    65027b4b:	movzx  eax,BYTE PTR [rsi]
    65027b4e:	bts    r14d,0xf
    65027b53:	cmp    al,0x36
    65027b55:	mov    DWORD PTR [rsp+0x40],r14d
    65027b5a:	jne    0x65027b75
    65027b5c:	cmp    BYTE PTR [rsi+0x1],0x34
    65027b60:	jne    0x65027b75
    65027b62:	add    rsi,0x2
    65027b66:	bts    r14d,0xf
    65027b6b:	mov    DWORD PTR [rsp+0x40],r14d
    65027b70:	jmp    0x650284f8
    65027b75:	cmp    al,0x33
    65027b77:	jne    0x65027b92
    65027b79:	cmp    BYTE PTR [rsi+0x1],0x32
    65027b7d:	jne    0x65027b92
    65027b7f:	add    rsi,0x2
    65027b83:	btr    r14d,0xf
    65027b88:	mov    DWORD PTR [rsp+0x40],r14d
    65027b8d:	jmp    0x650284f8
    65027b92:	cmp    al,0x64
    65027b94:	je     0x650284f8
    65027b9a:	cmp    al,0x69
    65027b9c:	je     0x650284f8
    65027ba2:	cmp    al,0x6f
    65027ba4:	je     0x650284f8
    65027baa:	cmp    al,0x75
    65027bac:	je     0x650284f8
    65027bb2:	cmp    al,0x78
    65027bb4:	je     0x650284f8
    65027bba:	cmp    al,0x58
    65027bbc:	je     0x650284f8
    65027bc2:	mov    DWORD PTR [rsp+0x6c],r9d
    65027bc7:	movzx  edi,r13b
    65027bcb:	lea    rdx,[rsp+0x78]
    65027bd0:	mov    DWORD PTR [rsp+0x4c],r9d
    65027bd5:	mov    ecx,edi
    65027bd7:	call   0x65028e70
    65027bdc:	test   eax,eax
    65027bde:	je     0x65027c35
    65027be0:	test   BYTE PTR [r12+0x18],0x40
    65027be6:	je     0x65027bf5
    65027be8:	cmp    QWORD PTR [r12+0x10],0x0
    65027bee:	jne    0x65027bf5
    65027bf0:	add    ebp,0x1
    65027bf3:	jmp    0x65027c25
    65027bf5:	add    DWORD PTR [r12+0x8],0xffffffff
    65027bfb:	js     0x65027c0b
    65027bfd:	mov    rax,QWORD PTR [r12]
    65027c01:	mov    BYTE PTR [rax],r13b
    65027c04:	add    QWORD PTR [r12],0x1
    65027c09:	jmp    0x65027c19
    65027c0b:	movsx  ecx,r13b
    65027c0f:	mov    rdx,r12
    65027c12:	call   0x65023f30
    65027c17:	mov    edi,eax
    65027c19:	cmp    edi,0xffffffff
    65027c1c:	jne    0x65027c22
    65027c1e:	or     ebp,edi
    65027c20:	jmp    0x65027c25
    65027c22:	add    ebp,0x1
    65027c25:	mov    r13b,BYTE PTR [rsi]
    65027c28:	add    rsi,0x1
    65027c2c:	test   r13b,r13b
    65027c2f:	je     0x6502850a
    65027c35:	test   BYTE PTR [r12+0x18],0x40
    65027c3b:	je     0x65027c66
    65027c3d:	cmp    QWORD PTR [r12+0x10],0x0
    65027c43:	jne    0x65027c66
    65027c45:	mov    r8d,DWORD PTR [rsp+0x6c]
    65027c4a:	add    ebp,0x1
    65027c4d:	lea    r10,[rip+0xfffffffffffd83ac]        # 0x65000000
    65027c54:	mov    DWORD PTR [rsp+0x44],ebp
    65027c58:	xor    r9d,r9d
    65027c5b:	mov    r11d,0x200
    65027c61:	jmp    0x650284f8
    65027c66:	add    DWORD PTR [r12+0x8],0xffffffff
    65027c6c:	js     0x65027c80
    65027c6e:	mov    rax,QWORD PTR [r12]
    65027c72:	mov    BYTE PTR [rax],r13b
    65027c75:	add    QWORD PTR [r12],0x1
    65027c7a:	movzx  eax,r13b
    65027c7e:	jmp    0x65027c8c
    65027c80:	movsx  ecx,r13b
    65027c84:	mov    rdx,r12
    65027c87:	call   0x65023f30
    65027c8c:	cmp    eax,0xffffffff
    65027c8f:	jne    0x65027cb1
    65027c91:	mov    r8d,DWORD PTR [rsp+0x6c]
    65027c96:	or     ebp,eax
    65027c98:	lea    r10,[rip+0xfffffffffffd8361]        # 0x65000000
    65027c9f:	mov    DWORD PTR [rsp+0x44],ebp
    65027ca3:	xor    r9d,r9d
    65027ca6:	mov    r11d,0x200
    65027cac:	jmp    0x650284f8
    65027cb1:	mov    r8d,DWORD PTR [rsp+0x6c]
    65027cb6:	add    ebp,0x1
    65027cb9:	lea    r10,[rip+0xfffffffffffd8340]        # 0x65000000
    65027cc0:	mov    DWORD PTR [rsp+0x44],ebp
    65027cc4:	xor    r9d,r9d
    65027cc7:	mov    r11d,0x200
    65027ccd:	jmp    0x650284f8
    65027cd2:	movsx  eax,r13b
    65027cd6:	add    eax,0xffffffbf
    65027cd9:	cmp    eax,0x37
    65027cdc:	ja     0x65028215
    65027ce2:	cdqe   
    65027ce4:	movzx  eax,BYTE PTR [r10+rax*1+0x285f4]
    65027ced:	mov    ecx,DWORD PTR [r10+rax*4+0x285b8]
    65027cf5:	add    rcx,r10
    65027cf8:	jmp    rcx
    65027cfa:	test   r14d,0x830
    65027d01:	jne    0x65027d0d
    65027d03:	bts    r14d,0xb
    65027d08:	mov    DWORD PTR [rsp+0x40],r14d
    65027d0d:	test   r14d,0x810
    65027d14:	je     0x65027d55
    65027d16:	movzx  r9d,WORD PTR [rdi]
    65027d1a:	add    rdi,0x8
    65027d1e:	lea    rdx,[rsp+0xc0]
    65027d26:	lea    rcx,[rsp+0x50]
    65027d2b:	mov    r8,r11
    65027d2e:	mov    QWORD PTR [rsp+0x60],rdi
    65027d33:	call   0x6502d4d0
    65027d38:	test   eax,eax
    65027d3a:	je     0x65027d70
    65027d3c:	mov    esi,DWORD PTR [rsp+0x4c]
    65027d40:	mov    DWORD PTR [rsp+0x70],0x1
    65027d48:	lea    rbx,[rsp+0xc0]
    65027d50:	jmp    0x65028225
    65027d55:	movzx  eax,BYTE PTR [rdi]
    65027d58:	add    rdi,0x8
    65027d5c:	mov    DWORD PTR [rsp+0x50],0x1
    65027d64:	mov    BYTE PTR [rsp+0xc0],al
    65027d6b:	mov    QWORD PTR [rsp+0x60],rdi
    65027d70:	mov    esi,DWORD PTR [rsp+0x4c]
    65027d74:	lea    rbx,[rsp+0xc0]
    65027d7c:	jmp    0x65028225
    65027d81:	mov    rax,QWORD PTR [rdi]
    65027d84:	add    rdi,0x8
    65027d88:	test   rax,rax
    65027d8b:	mov    QWORD PTR [rsp+0x60],rdi
    65027d90:	je     0x65027dd0
    65027d92:	mov    rbx,QWORD PTR [rax+0x8]
    65027d96:	test   rbx,rbx
    65027d99:	je     0x65027dd0
    65027d9b:	bt     r14d,0xb
    65027da0:	jae    0x65027dbc
    65027da2:	movsx  eax,WORD PTR [rax]
    65027da5:	mov    esi,0x1
    65027daa:	cdq    
    65027dab:	mov    DWORD PTR [rsp+0x4c],esi
    65027daf:	sub    eax,edx
    65027db1:	sar    eax,1
    65027db3:	mov    DWORD PTR [rsp+0x50],eax
    65027db7:	jmp    0x65028225
    65027dbc:	movsx  eax,WORD PTR [rax]
    65027dbf:	mov    esi,r9d
    65027dc2:	mov    DWORD PTR [rsp+0x4c],r9d
    65027dc7:	mov    DWORD PTR [rsp+0x50],eax
    65027dcb:	jmp    0x65028225
    65027dd0:	mov    rbx,QWORD PTR [rip+0x1bd09]        # 0x65043ae0
    65027dd7:	mov    esi,DWORD PTR [rsp+0x4c]
    65027ddb:	or     rcx,0xffffffffffffffff
    65027ddf:	xor    eax,eax
    65027de1:	mov    rdi,rbx
    65027de4:	repnz scas al,BYTE PTR es:[rdi]
    65027de6:	not    rcx
    65027de9:	sub    rcx,0x1
    65027ded:	mov    DWORD PTR [rsp+0x50],ecx
    65027df1:	jmp    0x65028225
    65027df6:	test   r14d,0x830
    65027dfd:	jne    0x65027e09
    65027dff:	bts    r14d,0xb
    65027e04:	mov    DWORD PTR [rsp+0x40],r14d
    65027e09:	mov    rbx,QWORD PTR [rdi]
    65027e0c:	cmp    r15d,0xffffffff
    65027e10:	mov    eax,r15d
    65027e13:	mov    ecx,0x7fffffff
    65027e18:	cmove  eax,ecx
    65027e1b:	add    rdi,0x8
    65027e1f:	test   r14d,0x810
    65027e26:	mov    QWORD PTR [rsp+0x60],rdi
    65027e2b:	je     0x65027e67
    65027e2d:	test   rbx,rbx
    65027e30:	mov    esi,0x1
    65027e35:	cmove  rbx,QWORD PTR [rip+0x1bcab]        # 0x65043ae8
    65027e3d:	test   eax,eax
    65027e3f:	mov    DWORD PTR [rsp+0x4c],esi
    65027e43:	mov    rcx,rbx
    65027e46:	je     0x65027e58
    65027e48:	sub    eax,esi
    65027e4a:	cmp    WORD PTR [rcx],0x0
    65027e4e:	je     0x65027e58
    65027e50:	add    rcx,0x2
    65027e54:	test   eax,eax
    65027e56:	jne    0x65027e48
    65027e58:	sub    rcx,rbx
    65027e5b:	sar    rcx,1
    65027e5e:	mov    DWORD PTR [rsp+0x50],ecx
    65027e62:	jmp    0x65028225
    65027e67:	test   rbx,rbx
    65027e6a:	cmove  rbx,QWORD PTR [rip+0x1bc6e]        # 0x65043ae0
    65027e72:	test   eax,eax
    65027e74:	mov    rcx,rbx
    65027e77:	je     0x65027e90
    65027e79:	data16 xchg ax,ax
    65027e7c:	data16 data16 xchg ax,ax
    65027e80:	sub    eax,0x1
    65027e83:	cmp    BYTE PTR [rcx],0x0
    65027e86:	je     0x65027e90
    65027e88:	add    rcx,0x1
    65027e8c:	test   eax,eax
    65027e8e:	jne    0x65027e80
    65027e90:	mov    esi,DWORD PTR [rsp+0x4c]
    65027e94:	sub    ecx,ebx
    65027e96:	mov    DWORD PTR [rsp+0x50],ecx
    65027e9a:	jmp    0x65028225
    65027e9f:	add    rdi,0x8
    65027ea3:	mov    QWORD PTR [rsp+0x60],rdi
    65027ea8:	mov    rdi,QWORD PTR [rdi-0x8]
    65027eac:	call   0x6502ba40
    65027eb1:	test   eax,eax
    65027eb3:	je     0x6502850a
    65027eb9:	test   r14b,0x20
    65027ebd:	je     0x65027ecf
    65027ebf:	mov    WORD PTR [rdi],bp
    65027ec2:	mov    DWORD PTR [rsp+0x70],0x1
    65027eca:	jmp    0x65028495
    65027ecf:	mov    DWORD PTR [rdi],ebp
    65027ed1:	mov    DWORD PTR [rsp+0x70],0x1
    65027ed9:	jmp    0x65028495
    65027ede:	mov    DWORD PTR [rsp+0x98],0x1
    65027ee9:	add    r13b,0x20
    65027eed:	or     r14d,0x40
    65027ef1:	test   r15d,r15d
    65027ef4:	lea    rbx,[rsp+0xc0]
    65027efc:	mov    DWORD PTR [rsp+0x40],r14d
    65027f01:	mov    esi,r11d
    65027f04:	jns    0x65027f13
    65027f06:	mov    r15d,0x6
    65027f0c:	mov    DWORD PTR [rsp+0x48],r15d
    65027f11:	jmp    0x65027f71
    65027f13:	test   r15d,r15d
    65027f16:	jne    0x65027f2b
    65027f18:	cmp    r13b,0x67
    65027f1c:	jne    0x65027f71
    65027f1e:	mov    r15d,0x1
    65027f24:	mov    DWORD PTR [rsp+0x48],r15d
    65027f29:	jmp    0x65027f71
    65027f2b:	cmp    r15d,r11d
    65027f2e:	jle    0x65027f3a
    65027f30:	mov    r15d,r11d
    65027f33:	mov    DWORD PTR [rsp+0x48],r11d
    65027f38:	jmp    0x65027f43
    65027f3a:	cmp    r15d,0xa3
    65027f41:	jle    0x65027f71
    65027f43:	lea    edi,[r15+0x15d]
    65027f4a:	movsxd rcx,edi
    65027f4d:	call   0x65022a80
    65027f52:	test   rax,rax
    65027f55:	mov    QWORD PTR [rsp+0xa0],rax
    65027f5d:	je     0x65027f66
    65027f5f:	mov    rbx,rax
    65027f62:	mov    esi,edi
    65027f64:	jmp    0x65027f71
    65027f66:	mov    r15d,0xa3
    65027f6c:	mov    DWORD PTR [rsp+0x48],r15d
    65027f71:	mov    rax,QWORD PTR [rsp+0x60]
    65027f76:	mov    rcx,QWORD PTR [rip+0x1bf63]        # 0x65043ee0
    65027f7d:	movsx  edi,r13b
    65027f81:	add    rax,0x8
    65027f85:	movsxd rsi,esi
    65027f88:	mov    QWORD PTR [rsp+0x60],rax
    65027f8d:	mov    rax,QWORD PTR [rax-0x8]
    65027f91:	mov    QWORD PTR [rsp+0xb0],rax
    65027f99:	call   0x650206e0
    65027f9e:	lea    rcx,[rsp+0x78]
    65027fa3:	mov    QWORD PTR [rsp+0x30],rcx
    65027fa8:	mov    ecx,DWORD PTR [rsp+0x98]
    65027faf:	mov    r9d,edi
    65027fb2:	mov    DWORD PTR [rsp+0x28],ecx
    65027fb6:	lea    rcx,[rsp+0xb0]
    65027fbe:	mov    r8,rsi
    65027fc1:	mov    rdx,rbx
    65027fc4:	mov    DWORD PTR [rsp+0x20],r15d
    65027fc9:	call   rax
    65027fcb:	mov    edi,r14d
    65027fce:	and    edi,0x80
    65027fd4:	je     0x65027ff1
    65027fd6:	test   r15d,r15d
    65027fd9:	jne    0x65027ff1
    65027fdb:	mov    rcx,QWORD PTR [rip+0x1bf16]        # 0x65043ef8
    65027fe2:	call   0x650206e0
    65027fe7:	lea    rdx,[rsp+0x78]
    65027fec:	mov    rcx,rbx
    65027fef:	call   rax
    65027ff1:	cmp    r13b,0x67
    65027ff5:	jne    0x65028011
    65027ff7:	test   edi,edi
    65027ff9:	jne    0x65028011
    65027ffb:	mov    rcx,QWORD PTR [rip+0x1beee]        # 0x65043ef0
    65028002:	call   0x650206e0
    65028007:	lea    rdx,[rsp+0x78]
    6502800c:	mov    rcx,rbx
    6502800f:	call   rax
    65028011:	cmp    BYTE PTR [rbx],0x2d
    65028014:	jne    0x65028024
    65028016:	bts    r14d,0x8
    6502801b:	add    rbx,0x1
    6502801f:	mov    DWORD PTR [rsp+0x40],r14d
    65028024:	mov    esi,DWORD PTR [rsp+0x4c]
    65028028:	or     rcx,0xffffffffffffffff
    6502802c:	xor    eax,eax
    6502802e:	mov    rdi,rbx
    65028031:	repnz scas al,BYTE PTR es:[rdi]
    65028033:	not    rcx
    65028036:	sub    rcx,0x1
    6502803a:	mov    DWORD PTR [rsp+0x50],ecx
    6502803e:	jmp    0x65028225
    65028043:	mov    eax,DWORD PTR [rsp+0x54]
    65028047:	or     r14d,0x40
    6502804b:	mov    r8d,0xa
    65028051:	mov    DWORD PTR [rsp+0x40],r14d
    65028056:	jmp    0x650280c9
    65028058:	mov    eax,DWORD PTR [rsp+0x54]
    6502805c:	mov    r8d,0xa
    65028062:	jmp    0x650280c9
    65028064:	bts    r14d,0xf
    65028069:	mov    r15d,0x10
    6502806f:	mov    DWORD PTR [rsp+0x40],r14d
    65028074:	mov    eax,0x7
    65028079:	mov    DWORD PTR [rsp+0x74],eax
    6502807d:	jmp    0x65028088
    6502807f:	mov    eax,0x27
    65028084:	mov    DWORD PTR [rsp+0x74],eax
    65028088:	test   r14b,r14b
    6502808b:	mov    r8d,0x10
    65028091:	jns    0x650280bf
    65028093:	add    al,0x51
    65028095:	mov    BYTE PTR [rsp+0x58],0x30
    6502809a:	mov    BYTE PTR [rsp+0x59],al
    6502809e:	lea    eax,[r8-0xe]
    650280a2:	jmp    0x650280c9
    650280a4:	test   r14b,r14b
    650280a7:	mov    r8d,0x8
    650280ad:	jns    0x650280c5
    650280af:	mov    eax,DWORD PTR [rsp+0x54]
    650280b3:	bts    r14d,0x9
    650280b8:	mov    DWORD PTR [rsp+0x40],r14d
    650280bd:	jmp    0x650280c9
    650280bf:	mov    eax,DWORD PTR [rsp+0x54]
    650280c3:	jmp    0x650280c9
    650280c5:	mov    eax,DWORD PTR [rsp+0x54]
    650280c9:	bt     r14d,0xf
    650280ce:	jae    0x650280df
    650280d0:	add    rdi,0x8
    650280d4:	mov    QWORD PTR [rsp+0x60],rdi
    650280d9:	mov    rdi,QWORD PTR [rdi-0x8]
    650280dd:	jmp    0x65028141
    650280df:	bt     r14d,0xc
    650280e4:	jae    0x650280f5
    650280e6:	add    rdi,0x8
    650280ea:	mov    QWORD PTR [rsp+0x60],rdi
    650280ef:	mov    rdi,QWORD PTR [rdi-0x8]
    650280f3:	jmp    0x65028141
    650280f5:	test   r14b,0x20
    650280f9:	je     0x65028120
    650280fb:	test   r14b,0x40
    650280ff:	je     0x65028111
    65028101:	add    rdi,0x8
    65028105:	mov    QWORD PTR [rsp+0x60],rdi
    6502810a:	movsx  rdi,WORD PTR [rdi-0x8]
    6502810f:	jmp    0x65028141
    65028111:	add    rdi,0x8
    65028115:	mov    QWORD PTR [rsp+0x60],rdi
    6502811a:	movzx  edi,WORD PTR [rdi-0x8]
    6502811e:	jmp    0x65028141
    65028120:	test   r14b,0x40
    65028124:	je     0x65028135
    65028126:	add    rdi,0x8
    6502812a:	mov    QWORD PTR [rsp+0x60],rdi
    6502812f:	movsxd rdi,DWORD PTR [rdi-0x8]
    65028133:	jmp    0x65028141
    65028135:	add    rdi,0x8
    65028139:	mov    QWORD PTR [rsp+0x60],rdi
    6502813e:	mov    edi,DWORD PTR [rdi-0x8]
    65028141:	test   r14b,0x40
    65028145:	je     0x65028159
    65028147:	test   rdi,rdi
    6502814a:	jns    0x65028159
    6502814c:	neg    rdi
    6502814f:	bts    r14d,0x8
    65028154:	mov    DWORD PTR [rsp+0x40],r14d
    65028159:	bt     r14d,0xf
    6502815e:	jb     0x65028169
    65028160:	bt     r14d,0xc
    65028165:	jb     0x65028169
    65028167:	mov    edi,edi
    65028169:	test   r15d,r15d
    6502816c:	jns    0x65028176
    6502816e:	mov    r15d,0x1
    65028174:	jmp    0x65028186
    65028176:	and    r14d,0xfffffff7
    6502817a:	cmp    r15d,r11d
    6502817d:	cmovg  r15d,r11d
    65028181:	mov    DWORD PTR [rsp+0x40],r14d
    65028186:	mov    r14d,DWORD PTR [rsp+0x74]
    6502818b:	test   rdi,rdi
    6502818e:	lea    rbx,[rsp+0x2bf]
    65028196:	cmove  eax,r9d
    6502819a:	mov    DWORD PTR [rsp+0x54],eax
    6502819e:	xchg   ax,ax
    650281a0:	mov    ecx,r15d
    650281a3:	sub    r15d,0x1
    650281a7:	test   ecx,ecx
    650281a9:	jg     0x650281b0
    650281ab:	test   rdi,rdi
    650281ae:	je     0x650281d1
    650281b0:	xor    edx,edx
    650281b2:	mov    rax,rdi
    650281b5:	movsxd rcx,r8d
    650281b8:	div    rcx
    650281bb:	mov    rdi,rax
    650281be:	lea    eax,[rdx+0x30]
    650281c1:	cmp    eax,0x39
    650281c4:	jle    0x650281c9
    650281c6:	add    eax,r14d
    650281c9:	mov    BYTE PTR [rbx],al
    650281cb:	sub    rbx,0x1
    650281cf:	jmp    0x650281a0
    650281d1:	mov    r14d,DWORD PTR [rsp+0x40]
    650281d6:	lea    rax,[rsp+0x2bf]
    650281de:	mov    DWORD PTR [rsp+0x48],r15d
    650281e3:	sub    eax,ebx
    650281e5:	add    rbx,0x1
    650281e9:	bt     r14d,0x9
    650281ee:	mov    DWORD PTR [rsp+0x50],eax
    650281f2:	jae    0x65028221
    650281f4:	test   eax,eax
    650281f6:	je     0x650281fd
    650281f8:	cmp    BYTE PTR [rbx],0x30
    650281fb:	je     0x6502821b
    650281fd:	mov    esi,DWORD PTR [rsp+0x4c]
    65028201:	sub    rbx,0x1
    65028205:	add    DWORD PTR [rsp+0x50],0x1
    6502820a:	mov    BYTE PTR [rbx],0x30
    6502820d:	jmp    0x65028225
    6502820f:	mov    esi,DWORD PTR [rsp+0x4c]
    65028213:	jmp    0x65028225
    65028215:	mov    esi,DWORD PTR [rsp+0x4c]
    65028219:	jmp    0x65028225
    6502821b:	mov    esi,DWORD PTR [rsp+0x4c]
    6502821f:	jmp    0x65028225
    65028221:	mov    esi,DWORD PTR [rsp+0x4c]
    65028225:	cmp    DWORD PTR [rsp+0x70],0x0
    6502822a:	jne    0x65028495
    65028230:	test   r14b,0x40
    65028234:	je     0x65028279
    65028236:	bt     r14d,0x8
    6502823b:	jae    0x6502824d
    6502823d:	mov    edi,0x1
    65028242:	mov    BYTE PTR [rsp+0x58],0x2d
    65028247:	mov    DWORD PTR [rsp+0x54],edi
    6502824b:	jmp    0x65028283
    6502824d:	test   r14b,0x1
    65028251:	je     0x65028263
    65028253:	mov    edi,0x1
    65028258:	mov    BYTE PTR [rsp+0x58],0x2b
    6502825d:	mov    DWORD PTR [rsp+0x54],edi
    65028261:	jmp    0x65028283
    65028263:	test   r14b,0x2
    65028267:	je     0x6502827f
    65028269:	mov    edi,0x1
    6502826e:	mov    BYTE PTR [rsp+0x58],0x20
    65028273:	mov    DWORD PTR [rsp+0x54],edi
    65028277:	jmp    0x65028283
    65028279:	mov    edi,DWORD PTR [rsp+0x54]
    6502827d:	jmp    0x65028283
    6502827f:	mov    edi,DWORD PTR [rsp+0x54]
    65028283:	mov    r15d,DWORD PTR [rsp+0x68]
    65028288:	sub    r15d,DWORD PTR [rsp+0x50]
    6502828d:	sub    r15d,edi
    65028290:	test   r14b,0xc
    65028294:	jne    0x650282a8
    65028296:	lea    r9,[rsp+0x44]
    6502829b:	mov    r8,r12
    6502829e:	mov    edx,r15d
    650282a1:	mov    cl,0x20
    650282a3:	call   0x650274e0
    650282a8:	lea    r9,[rsp+0x44]
    650282ad:	lea    rcx,[rsp+0x58]
    650282b2:	mov    r8,r12
    650282b5:	mov    edx,edi
    650282b7:	call   0x65027570
    650282bc:	test   r14b,0x8
    650282c0:	je     0x650282da
    650282c2:	test   r14b,0x4
    650282c6:	jne    0x650282da
    650282c8:	lea    r9,[rsp+0x44]
    650282cd:	mov    r8,r12
    650282d0:	mov    edx,r15d
    650282d3:	mov    cl,0x30
    650282d5:	call   0x650274e0
    650282da:	test   esi,esi
    650282dc:	mov    r13d,DWORD PTR [rsp+0x50]
    650282e1:	je     0x6502844b
    650282e7:	test   r13d,r13d
    650282ea:	jle    0x6502844b
    650282f0:	mov    ebp,DWORD PTR [rsp+0x44]
    650282f4:	mov    r14,rbx
    650282f7:	data16 xchg ax,ax
    650282fa:	data16 xchg ax,ax
    650282fd:	data16 xchg ax,ax
    65028300:	movzx  r9d,WORD PTR [r14]
    65028304:	lea    rdx,[rsp+0x2c0]
    6502830c:	lea    rcx,[rsp+0xa8]
    65028314:	mov    r8d,0x6
    6502831a:	sub    r13d,0x1
    6502831e:	add    r14,0x2
    65028322:	call   0x6502d4d0
    65028327:	test   eax,eax
    65028329:	jne    0x6502843d
    6502832f:	mov    edi,DWORD PTR [rsp+0xa8]
    65028336:	test   edi,edi
    65028338:	je     0x6502843d
    6502833e:	test   BYTE PTR [r12+0x18],0x40
    65028344:	lea    rsi,[rsp+0x2c0]
    6502834c:	je     0x65028361
    6502834e:	cmp    QWORD PTR [r12+0x10],0x0
    65028354:	jne    0x65028361
    65028356:	add    ebp,edi
    65028358:	mov    DWORD PTR [rsp+0x44],ebp
    6502835c:	jmp    0x65028413
    65028361:	test   edi,edi
    65028363:	jle    0x65028413
    65028369:	data16 xchg ax,ax
    6502836c:	data16 data16 xchg ax,ax
    65028370:	movzx  ecx,BYTE PTR [rsi]
    65028373:	sub    edi,0x1
    65028376:	test   BYTE PTR [r12+0x18],0x40
    6502837c:	je     0x6502838f
    6502837e:	cmp    QWORD PTR [r12+0x10],0x0
    65028384:	jne    0x6502838f
    65028386:	add    ebp,0x1
    65028389:	mov    DWORD PTR [rsp+0x44],ebp
    6502838d:	jmp    0x650283c6
    6502838f:	add    DWORD PTR [r12+0x8],0xffffffff
    65028395:	js     0x650283a7
    65028397:	mov    rax,QWORD PTR [r12]
    6502839b:	mov    BYTE PTR [rax],cl
    6502839d:	add    QWORD PTR [r12],0x1
    650283a2:	movzx  eax,cl
    650283a5:	jmp    0x650283b2
    650283a7:	movsx  ecx,cl
    650283aa:	mov    rdx,r12
    650283ad:	call   0x65023f30
    650283b2:	cmp    eax,0xffffffff
    650283b5:	jne    0x650283bf
    650283b7:	or     ebp,eax
    650283b9:	mov    DWORD PTR [rsp+0x44],ebp
    650283bd:	jmp    0x650283c6
    650283bf:	add    ebp,0x1
    650283c2:	mov    DWORD PTR [rsp+0x44],ebp
    650283c6:	add    rsi,0x1
    650283ca:	cmp    ebp,0xffffffff
    650283cd:	jne    0x6502840b
    650283cf:	call   0x65020420
    650283d4:	cmp    DWORD PTR [rax],0x2a
    650283d7:	jne    0x65028413
    650283d9:	test   BYTE PTR [r12+0x18],0x40
    650283df:	je     0x650283f1
    650283e1:	cmp    QWORD PTR [r12+0x10],0x0
    650283e7:	jne    0x650283f1
    650283e9:	xor    ebp,ebp
    650283eb:	mov    DWORD PTR [rsp+0x44],ebp
    650283ef:	jmp    0x6502840b
    650283f1:	add    DWORD PTR [r12+0x8],0xffffffff
    650283f7:	js     0x65028423
    650283f9:	mov    rax,QWORD PTR [r12]
    650283fd:	mov    BYTE PTR [rax],0x3f
    65028400:	add    QWORD PTR [r12],0x1
    65028405:	xor    ebp,ebp
    65028407:	mov    DWORD PTR [rsp+0x44],ebp
    6502840b:	test   edi,edi
    6502840d:	jg     0x65028370
    65028413:	test   r13d,r13d
    65028416:	jne    0x65028300
    6502841c:	mov    r14d,DWORD PTR [rsp+0x40]
    65028421:	jmp    0x65028462
    65028423:	mov    rdx,r12
    65028426:	mov    ecx,0x3f
    6502842b:	call   0x65023f30
    65028430:	cmp    eax,0xffffffff
    65028433:	jne    0x65028405
    65028435:	or     ebp,eax
    65028437:	mov    DWORD PTR [rsp+0x44],ebp
    6502843b:	jmp    0x6502840b
    6502843d:	mov    r15d,DWORD PTR [rsp+0x48]
    65028442:	or     ebp,0xffffffff
    65028445:	mov    DWORD PTR [rsp+0x44],ebp
    65028449:	jmp    0x65028495
    6502844b:	lea    r9,[rsp+0x44]
    65028450:	mov    r8,r12
    65028453:	mov    edx,r13d
    65028456:	mov    rcx,rbx
    65028459:	call   0x65027570
    6502845e:	mov    ebp,DWORD PTR [rsp+0x44]
    65028462:	test   ebp,ebp
    65028464:	js     0x65028489
    65028466:	test   r14b,0x4
    6502846a:	je     0x65028490
    6502846c:	lea    r9,[rsp+0x44]
    65028471:	mov    r8,r12
    65028474:	mov    edx,r15d
    65028477:	mov    cl,0x20
    65028479:	call   0x650274e0
    6502847e:	mov    ebp,DWORD PTR [rsp+0x44]
    65028482:	mov    r15d,DWORD PTR [rsp+0x48]
    65028487:	jmp    0x65028495
    65028489:	mov    r15d,DWORD PTR [rsp+0x48]
    6502848e:	jmp    0x65028495
    65028490:	mov    r15d,DWORD PTR [rsp+0x48]
    65028495:	mov    rax,QWORD PTR [rsp+0xa0]
    6502849d:	test   rax,rax
    650284a0:	je     0x650284d6
    650284a2:	mov    rcx,rax
    650284a5:	call   0x6501fc00
    650284aa:	mov    r14d,DWORD PTR [rsp+0x40]
    650284af:	mov    rsi,QWORD PTR [rsp+0xb8]
    650284b7:	mov    r8d,DWORD PTR [rsp+0x6c]
    650284bc:	xor    r9d,r9d
    650284bf:	lea    r10,[rip+0xfffffffffffd7b3a]        # 0x65000000
    650284c6:	mov    QWORD PTR [rsp+0xa0],r9
    650284ce:	mov    r11d,0x200
    650284d4:	jmp    0x650284f8
    650284d6:	mov    r14d,DWORD PTR [rsp+0x40]
    650284db:	mov    rsi,QWORD PTR [rsp+0xb8]
    650284e3:	mov    r8d,DWORD PTR [rsp+0x6c]
    650284e8:	xor    r9d,r9d
    650284eb:	lea    r10,[rip+0xfffffffffffd7b0e]        # 0x65000000
    650284f2:	mov    r11d,0x200
    650284f8:	mov    r13b,BYTE PTR [rsi]
    650284fb:	test   r13b,r13b
    650284fe:	je     0x6502854b
    65028500:	mov    rdi,QWORD PTR [rsp+0x60]
    65028505:	jmp    0x65027950
    6502850a:	call   0x65020420
    6502850f:	xor    r9d,r9d
    65028512:	xor    r8d,r8d
    65028515:	xor    edx,edx
    65028517:	xor    ecx,ecx
    65028519:	mov    QWORD PTR [rsp+0x20],0x0
    65028522:	mov    DWORD PTR [rax],0x16
    65028528:	call   0x6501d9c0
    6502852d:	cmp    BYTE PTR [rsp+0x90],0x0
    65028535:	je     0x65028546
    65028537:	mov    rax,QWORD PTR [rsp+0x88]
    6502853f:	and    DWORD PTR [rax+0xc8],0xfffffffd
    65028546:	or     eax,0xffffffff
    65028549:	jmp    0x65028566
    6502854b:	mov    rdx,QWORD PTR [rsp+0x88]
    65028553:	cmp    BYTE PTR [rsp+0x90],0x0
    6502855b:	je     0x65028564
    6502855d:	and    DWORD PTR [rdx+0xc8],0xfffffffd
    65028564:	mov    eax,ebp
    65028566:	mov    rbx,QWORD PTR [rsp+0x2e0]
    6502856e:	mov    r13,QWORD PTR [rsp+0x2d8]
    65028576:	mov    rcx,QWORD PTR [rsp+0x2c8]
    6502857e:	xor    rcx,rsp
    65028581:	call   0x6501e650
    65028586:	add    rsp,0x2e8
    6502858d:	pop    r15
    6502858f:	pop    r14
    65028591:	pop    r12
    65028593:	pop    rdi
    65028594:	pop    rsi
    65028595:	pop    rbp
    65028596:	ret    
    65028597:	nop
    65028598:	(bad)  
    65028599:	jnp    0x6502859d
    6502859b:	add    BYTE PTR [rsi-0x17fffd87],dh
    650285a1:	jns    0x650285a5
    650285a3:	add    BYTE PTR [rcx+0x7a],dl
    650285a6:	add    al,BYTE PTR [rax]
    650285a8:	(bad)  
    650285a9:	jp     0x650285ad
    650285ab:	add    BYTE PTR [rdi-0x13fffd86],ah
    650285b1:	jp     0x650285b5
    650285b3:	add    dl,dl
    650285b5:	jl     0x650285b9
    650285b7:	add    dh,bl
    650285b9:	jle    0x650285bd
    650285bb:	add    dl,bh
    650285bd:	jl     0x650285c1
    650285bf:	add    dh,dh
    650285c1:	jge    0x650285c5
    650285c3:	add    BYTE PTR [rax+rax*4+0x2],dh
    650285c7:	add    BYTE PTR [rcx-0x12fffd83],al
    650285cd:	jle    0x650285d1
    650285cf:	add    BYTE PTR [rip+0x4300027d],cl        # 0xa8028852
    650285d5:	add    BYTE PTR [rdx],0x0
    650285d8:	lahf   
    650285d9:	jle    0x650285dd
    650285db:	add    BYTE PTR [rax+rax*4-0x7f9bfffe],ah
    650285e2:	add    al,BYTE PTR [rax]
    650285e4:	or     DWORD PTR [rsi+0x2],edi
    650285e7:	add    BYTE PTR [rax-0x80],bl
    650285ea:	add    al,BYTE PTR [rax]
    650285ec:	jg     0x6502856e
    650285ee:	add    al,BYTE PTR [rax]
    650285f0:	jb     0x730285f8
    650285f6:	add    DWORD PTR [rsi],ecx
    650285f8:	add    BYTE PTR [rsi],cl
    650285fa:	add    BYTE PTR [rsi],cl
    650285fc:	(bad)  
    650285fd:	(bad)  
    650285fe:	(bad)  
    650285ff:	(bad)  
    65028600:	(bad)  
    65028601:	(bad)  
    65028602:	(bad)  
    65028603:	(bad)  
    65028604:	(bad)  
    65028605:	(bad)  
    65028606:	add    cl,BYTE PTR [rsi]
    65028608:	(bad)  
    65028609:	(bad)  
    6502860a:	(bad)  
    6502860b:	add    ecx,DWORD PTR [rsi]
    6502860d:	add    al,0xe
    6502860f:	(bad)  
    65028610:	(bad)  
    65028611:	(bad)  
    65028612:	(bad)  
    65028613:	(bad)  
    65028614:	add    eax,0x507060e
    65028619:	add    eax,0xe070e05
    6502861e:	(bad)  
    6502861f:	(bad)  
    65028620:	(bad)  
    65028621:	or     BYTE PTR [rcx],cl
    65028623:	or     cl,BYTE PTR [rsi]
    65028625:	(bad)  
    65028626:	or     ecx,DWORD PTR [rsi]
    65028628:	or     al,0xe
    6502862a:	(bad)  
    6502862b:	or     eax,0xcccccccc
    65028630:	mov    QWORD PTR [rsp+0x10],rsi
    65028635:	push   rdi
    65028636:	sub    rsp,0x60
    6502863a:	test   r9,r9
    6502863d:	mov    r10,r9
    65028640:	mov    rsi,r8
    65028643:	mov    rdi,rdx
    65028646:	mov    r11,rcx
    65028649:	jne    0x6502867a
    6502864b:	call   0x65020420
    65028650:	xor    r9d,r9d
    65028653:	xor    r8d,r8d
    65028656:	mov    DWORD PTR [rax],0x16
    6502865c:	xor    eax,eax
    6502865e:	xor    edx,edx
    65028660:	xor    ecx,ecx
    65028662:	mov    QWORD PTR [rsp+0x20],rax
    65028667:	call   0x6501d9c0
    6502866c:	or     eax,0xffffffff
    6502866f:	mov    rsi,QWORD PTR [rsp+0x78]
    65028674:	add    rsp,0x60
    65028678:	pop    rdi
    65028679:	ret    
    6502867a:	test   r8,r8
    6502867d:	je     0x65028684
    6502867f:	test   rdx,rdx
    65028682:	je     0x6502864b
    65028684:	mov    r9,QWORD PTR [rsp+0x98]
    6502868c:	mov    ecx,0x7fffffff
    65028691:	mov    eax,r8d
    65028694:	cmp    r8,rcx
    65028697:	mov    r8,QWORD PTR [rsp+0x90]
    6502869f:	mov    QWORD PTR [rsp+0x40],rdx
    650286a4:	cmova  eax,ecx
    650286a7:	mov    QWORD PTR [rsp+0x30],rdx
    650286ac:	lea    rcx,[rsp+0x30]
    650286b1:	mov    rdx,r10
    650286b4:	mov    QWORD PTR [rsp+0x70],rbx
    650286b9:	mov    DWORD PTR [rsp+0x48],0x42
    650286c1:	mov    DWORD PTR [rsp+0x38],eax
    650286c5:	call   r11
    650286c8:	test   rdi,rdi
    650286cb:	mov    ebx,eax
    650286cd:	je     0x65028728
    650286cf:	test   eax,eax
    650286d1:	js     0x65028717
    650286d3:	sub    DWORD PTR [rsp+0x38],0x1
    650286d8:	js     0x650286f4
    650286da:	mov    rax,QWORD PTR [rsp+0x30]
    650286df:	mov    BYTE PTR [rax],0x0
    650286e2:	mov    eax,ebx
    650286e4:	mov    rbx,QWORD PTR [rsp+0x70]
    650286e9:	mov    rsi,QWORD PTR [rsp+0x78]
    650286ee:	add    rsp,0x60
    650286f2:	pop    rdi
    650286f3:	ret    
    650286f4:	lea    rdx,[rsp+0x30]
    650286f9:	xor    ecx,ecx
    650286fb:	call   0x65023f30
    65028700:	cmp    eax,0xffffffff
    65028703:	je     0x65028717
    65028705:	mov    eax,ebx
    65028707:	mov    rbx,QWORD PTR [rsp+0x70]
    6502870c:	mov    rsi,QWORD PTR [rsp+0x78]
    65028711:	add    rsp,0x60
    65028715:	pop    rdi
    65028716:	ret    
    65028717:	xor    eax,eax
    65028719:	mov    BYTE PTR [rdi+rsi*1-0x1],0x0
    6502871e:	cmp    DWORD PTR [rsp+0x38],eax
    65028722:	setge  al
    65028725:	add    eax,0xfffffffe
    65028728:	mov    rbx,QWORD PTR [rsp+0x70]
    6502872d:	mov    rsi,QWORD PTR [rsp+0x78]
    65028732:	add    rsp,0x60
    65028736:	pop    rdi
    65028737:	ret    
    65028738:	int3   
    65028739:	int3   
    6502873a:	int3   
    6502873b:	int3   
    6502873c:	int3   
    6502873d:	int3   
    6502873e:	int3   
    6502873f:	int3   
    65028740:	rex push rbx
    65028742:	sub    rsp,0x30
    65028746:	test   r8,r8
    65028749:	mov    rbx,rcx
    6502874c:	je     0x65028795
    6502874e:	test   rcx,rcx
    65028751:	je     0x65028795
    65028753:	test   rdx,rdx
    65028756:	je     0x65028795
    65028758:	mov    rax,QWORD PTR [rsp+0x60]
    6502875d:	mov    QWORD PTR [rsp+0x28],rax
    65028762:	mov    QWORD PTR [rsp+0x20],r9
    65028767:	mov    r9,r8
    6502876a:	mov    r8,rdx
    6502876d:	mov    rdx,rcx
    65028770:	lea    rcx,[rip+0x36d9]        # 0x6502be50
    65028777:	call   0x65028630
    6502877c:	test   eax,eax
    6502877e:	jns    0x65028783
    65028780:	mov    BYTE PTR [rbx],0x0
    65028783:	cmp    eax,0xfffffffe
    65028786:	jne    0x650287bb
    65028788:	call   0x65020420
    6502878d:	mov    DWORD PTR [rax],0x22
    65028793:	jmp    0x650287a0
    65028795:	call   0x65020420
    6502879a:	mov    DWORD PTR [rax],0x16
    650287a0:	xor    r9d,r9d
    650287a3:	xor    r8d,r8d
    650287a6:	xor    edx,edx
    650287a8:	xor    ecx,ecx
    650287aa:	mov    QWORD PTR [rsp+0x20],0x0
    650287b3:	call   0x6501d9c0
    650287b8:	or     eax,0xffffffff
    650287bb:	add    rsp,0x30
    650287bf:	pop    rbx
    650287c0:	ret    
    650287c1:	int3   
    650287c2:	int3   
    650287c3:	int3   
    650287c4:	int3   
    650287c5:	int3   
    650287c6:	int3   
    650287c7:	int3   
    650287c8:	int3   
    650287c9:	int3   
    650287ca:	int3   
    650287cb:	int3   
    650287cc:	int3   
    650287cd:	int3   
    650287ce:	int3   
    650287cf:	int3   
    650287d0:	rex push rbp
    650287d2:	push   r12
    650287d4:	push   r13
    650287d6:	push   r14
    650287d8:	push   r15
    650287da:	sub    rsp,0x60
    650287de:	lea    rbp,[rsp+0x40]
    650287e3:	mov    QWORD PTR [rbp+0x50],rbx
    650287e7:	mov    QWORD PTR [rbp+0x58],rsi
    650287eb:	mov    QWORD PTR [rbp+0x60],rdi
    650287ef:	mov    rax,QWORD PTR [rip+0x1a92a]        # 0x65043120
    650287f6:	xor    rax,rbp
    650287f9:	mov    QWORD PTR [rbp+0x18],rax
    650287fd:	mov    r10d,DWORD PTR [rip+0x1cbc8]        # 0x650453cc
    65028804:	xor    ebx,ebx
    65028806:	mov    r14,r9
    65028809:	test   r10d,r10d
    6502880c:	mov    QWORD PTR [rbp+0x8],r9
    65028810:	mov    DWORD PTR [rbp+0x0],r8d
    65028814:	mov    r15d,edx
    65028817:	mov    DWORD PTR [rbp+0x10],edx
    6502881a:	mov    rdi,rcx
    6502881d:	jne    0x6502886a
    6502881f:	lea    r9d,[rbx+0x1]
    65028823:	lea    r8,[rip+0xe82a]        # 0x65037054
    6502882a:	mov    edx,0x100
    6502882f:	xor    ecx,ecx
    65028831:	mov    DWORD PTR [rsp+0x28],ebx
    65028835:	mov    QWORD PTR [rsp+0x20],rbx
    6502883a:	call   QWORD PTR [rip+0xba60]        # 0x650342a0
    65028840:	test   eax,eax
    65028842:	je     0x6502884a
    65028844:	lea    r10d,[rbx+0x1]
    65028848:	jmp    0x65028863
    6502884a:	call   QWORD PTR [rip+0xb818]        # 0x65034068
    65028850:	mov    r10d,DWORD PTR [rip+0x1cb75]        # 0x650453cc
    65028857:	mov    ecx,0x2
    6502885c:	cmp    eax,0x78
    6502885f:	cmove  r10d,ecx
    65028863:	mov    DWORD PTR [rip+0x1cb62],r10d        # 0x650453cc
    6502886a:	mov    r9d,DWORD PTR [rbp+0x70]
    6502886e:	test   r9d,r9d
    65028871:	jle    0x650288af
    65028873:	mov    eax,r9d
    65028876:	mov    rcx,r14
    65028879:	data16 xchg ax,ax
    6502887c:	data16 data16 xchg ax,ax
    65028880:	sub    eax,0x1
    65028883:	cmp    BYTE PTR [rcx],bl
    65028885:	je     0x65028892
    65028887:	add    rcx,0x1
    6502888b:	test   eax,eax
    6502888d:	jne    0x65028880
    6502888f:	or     eax,0xffffffff
    65028892:	mov    ecx,r9d
    65028895:	sub    ecx,eax
    65028897:	sub    ecx,0x1
    6502889a:	cmp    ecx,r9d
    6502889d:	jge    0x650288a9
    6502889f:	lea    r9d,[rcx+0x1]
    650288a3:	mov    DWORD PTR [rbp+0x70],r9d
    650288a7:	jmp    0x650288af
    650288a9:	mov    r9d,ecx
    650288ac:	mov    DWORD PTR [rbp+0x70],ecx
    650288af:	cmp    r10d,0x2
    650288b3:	je     0x65028b2a
    650288b9:	test   r10d,r10d
    650288bc:	je     0x65028b2a
    650288c2:	cmp    r10d,0x1
    650288c6:	jne    0x65028b5d
    650288cc:	mov    r13d,DWORD PTR [rbp+0x88]
    650288d3:	mov    r12d,ebx
    650288d6:	test   r13d,r13d
    650288d9:	jne    0x650288e2
    650288db:	mov    rax,QWORD PTR [rdi]
    650288de:	mov    r13d,DWORD PTR [rax+0x4]
    650288e2:	cmp    DWORD PTR [rbp+0x90],ebx
    650288e8:	mov    edx,0x1
    650288ed:	mov    eax,0x9
    650288f2:	mov    r8,r14
    650288f5:	mov    ecx,r13d
    650288f8:	cmovne edx,eax
    650288fb:	mov    DWORD PTR [rsp+0x28],ebx
    650288ff:	mov    QWORD PTR [rsp+0x20],rbx
    65028904:	call   QWORD PTR [rip+0xb71e]        # 0x65034028
    6502890a:	test   eax,eax
    6502890c:	movsxd r14,eax
    6502890f:	je     0x65028b5d
    65028915:	jle    0x65028b5d
    6502891b:	xor    edx,edx
    6502891d:	mov    rax,0xffffffffffffffe0
    65028924:	div    r14
    65028927:	cmp    rax,0x2
    6502892b:	jb     0x65028b5d
    65028931:	lea    rcx,[r14+r14*1+0x10]
    65028936:	movabs rdi,0xffffffffffffff0
    65028940:	cmp    rcx,0x400
    65028947:	ja     0x65028977
    65028949:	lea    rax,[rcx+0xf]
    6502894d:	cmp    rax,rcx
    65028950:	ja     0x65028955
    65028952:	mov    rax,rdi
    65028955:	and    rax,0xfffffffffffffff0
    65028959:	call   0x65033230
    6502895e:	sub    rsp,rax
    65028961:	lea    rsi,[rsp+0x40]
    65028966:	test   rsi,rsi
    65028969:	je     0x65028b5d
    6502896f:	mov    DWORD PTR [rsi],0xcccc
    65028975:	jmp    0x6502898a
    65028977:	call   0x6501fc50
    6502897c:	test   rax,rax
    6502897f:	mov    rsi,rax
    65028982:	je     0x6502898e
    65028984:	mov    DWORD PTR [rax],0xdddd
    6502898a:	add    rsi,0x10
    6502898e:	test   rsi,rsi
    65028991:	je     0x65028b5d
    65028997:	mov    r9d,DWORD PTR [rbp+0x70]
    6502899b:	mov    r8,QWORD PTR [rbp+0x8]
    6502899f:	mov    edx,0x1
    650289a4:	mov    ecx,r13d
    650289a7:	mov    DWORD PTR [rsp+0x28],r14d
    650289ac:	mov    QWORD PTR [rsp+0x20],rsi
    650289b1:	call   QWORD PTR [rip+0xb671]        # 0x65034028
    650289b7:	test   eax,eax
    650289b9:	je     0x65028b10
    650289bf:	mov    edx,DWORD PTR [rbp+0x0]
    650289c2:	mov    r9d,r14d
    650289c5:	mov    r8,rsi
    650289c8:	mov    ecx,r15d
    650289cb:	mov    DWORD PTR [rsp+0x28],ebx
    650289cf:	mov    QWORD PTR [rsp+0x20],rbx
    650289d4:	call   QWORD PTR [rip+0xb8c6]        # 0x650342a0
    650289da:	test   eax,eax
    650289dc:	movsxd r12,eax
    650289df:	je     0x65028b10
    650289e5:	mov    ecx,DWORD PTR [rbp+0x0]
    650289e8:	bt     ecx,0xa
    650289ec:	jae    0x65028a28
    650289ee:	mov    eax,DWORD PTR [rbp+0x80]
    650289f4:	test   eax,eax
    650289f6:	je     0x65028b10
    650289fc:	cmp    r12d,eax
    650289ff:	jg     0x65028b10
    65028a05:	mov    DWORD PTR [rsp+0x28],eax
    65028a09:	mov    rax,QWORD PTR [rbp+0x78]
    65028a0d:	mov    edx,ecx
    65028a0f:	mov    r9d,r14d
    65028a12:	mov    r8,rsi
    65028a15:	mov    ecx,r15d
    65028a18:	mov    QWORD PTR [rsp+0x20],rax
    65028a1d:	call   QWORD PTR [rip+0xb87d]        # 0x650342a0
    65028a23:	jmp    0x65028b10
    65028a28:	test   eax,eax
    65028a2a:	jle    0x65028b10
    65028a30:	xor    edx,edx
    65028a32:	mov    rax,0xffffffffffffffe0
    65028a39:	div    r12
    65028a3c:	cmp    rax,0x2
    65028a40:	jb     0x65028b10
    65028a46:	lea    rcx,[r12+r12*1+0x10]
    65028a4b:	cmp    rcx,0x400
    65028a52:	ja     0x65028a82
    65028a54:	lea    rax,[rcx+0xf]
    65028a58:	cmp    rax,rcx
    65028a5b:	ja     0x65028a60
    65028a5d:	mov    rax,rdi
    65028a60:	and    rax,0xfffffffffffffff0
    65028a64:	call   0x65033230
    65028a69:	sub    rsp,rax
    65028a6c:	lea    rdi,[rsp+0x40]
    65028a71:	test   rdi,rdi
    65028a74:	je     0x65028b10
    65028a7a:	mov    DWORD PTR [rdi],0xcccc
    65028a80:	jmp    0x65028a95
    65028a82:	call   0x6501fc50
    65028a87:	test   rax,rax
    65028a8a:	mov    rdi,rax
    65028a8d:	je     0x65028a99
    65028a8f:	mov    DWORD PTR [rax],0xdddd
    65028a95:	add    rdi,0x10
    65028a99:	test   rdi,rdi
    65028a9c:	je     0x65028b10
    65028a9e:	mov    edx,DWORD PTR [rbp+0x0]
    65028aa1:	mov    r9d,r14d
    65028aa4:	mov    r8,rsi
    65028aa7:	mov    ecx,r15d
    65028aaa:	mov    DWORD PTR [rsp+0x28],r12d
    65028aaf:	mov    QWORD PTR [rsp+0x20],rdi
    65028ab4:	call   QWORD PTR [rip+0xb7e6]        # 0x650342a0
    65028aba:	test   eax,eax
    65028abc:	je     0x65028afe
    65028abe:	mov    eax,DWORD PTR [rbp+0x80]
    65028ac4:	xor    edx,edx
    65028ac6:	mov    QWORD PTR [rsp+0x38],rbx
    65028acb:	test   eax,eax
    65028acd:	mov    r9d,r12d
    65028ad0:	mov    r8,rdi
    65028ad3:	mov    ecx,r13d
    65028ad6:	mov    QWORD PTR [rsp+0x30],rbx
    65028adb:	jne    0x65028ae8
    65028add:	mov    DWORD PTR [rsp+0x28],ebx
    65028ae1:	mov    QWORD PTR [rsp+0x20],rbx
    65028ae6:	jmp    0x65028af5
    65028ae8:	mov    DWORD PTR [rsp+0x28],eax
    65028aec:	mov    rax,QWORD PTR [rbp+0x78]
    65028af0:	mov    QWORD PTR [rsp+0x20],rax
    65028af5:	call   QWORD PTR [rip+0xb535]        # 0x65034030
    65028afb:	mov    r12d,eax
    65028afe:	cmp    DWORD PTR [rdi-0x10],0xdddd
    65028b05:	lea    rcx,[rdi-0x10]
    65028b09:	jne    0x65028b10
    65028b0b:	call   0x6501fc00
    65028b10:	cmp    DWORD PTR [rsi-0x10],0xdddd
    65028b17:	lea    rcx,[rsi-0x10]
    65028b1b:	jne    0x65028b22
    65028b1d:	call   0x6501fc00
    65028b22:	mov    eax,r12d
    65028b25:	jmp    0x65028ce6
    65028b2a:	test   r15d,r15d
    65028b2d:	mov    r12,rbx
    65028b30:	jne    0x65028b3d
    65028b32:	mov    rax,QWORD PTR [rdi]
    65028b35:	mov    r15d,DWORD PTR [rax+0x14]
    65028b39:	mov    DWORD PTR [rbp+0x10],r15d
    65028b3d:	mov    esi,DWORD PTR [rbp+0x88]
    65028b43:	test   esi,esi
    65028b45:	jne    0x65028b4d
    65028b47:	mov    rax,QWORD PTR [rdi]
    65028b4a:	mov    esi,DWORD PTR [rax+0x4]
    65028b4d:	mov    ecx,r15d
    65028b50:	call   0x6502ce60
    65028b55:	cmp    eax,0xffffffff
    65028b58:	mov    r13d,eax
    65028b5b:	jne    0x65028b64
    65028b5d:	xor    eax,eax
    65028b5f:	jmp    0x65028ce6
    65028b64:	cmp    eax,esi
    65028b66:	mov    r8,r14
    65028b69:	je     0x65028cbf
    65028b6f:	lea    r9,[rbp+0x70]
    65028b73:	mov    edx,eax
    65028b75:	mov    ecx,esi
    65028b77:	mov    DWORD PTR [rsp+0x28],ebx
    65028b7b:	mov    QWORD PTR [rsp+0x20],rbx
    65028b80:	call   0x6502ced0
    65028b85:	test   rax,rax
    65028b88:	mov    r14,rax
    65028b8b:	je     0x65028b5d
    65028b8d:	mov    r9d,DWORD PTR [rbp+0x70]
    65028b91:	mov    edx,DWORD PTR [rbp+0x0]
    65028b94:	mov    r8,rax
    65028b97:	mov    ecx,r15d
    65028b9a:	mov    DWORD PTR [rsp+0x28],ebx
    65028b9e:	mov    QWORD PTR [rsp+0x20],rbx
    65028ba3:	call   QWORD PTR [rip+0xb6ef]        # 0x65034298
    65028ba9:	mov    r15,QWORD PTR [rbp+0x78]
    65028bad:	test   eax,eax
    65028baf:	movsxd r9,eax
    65028bb2:	mov    DWORD PTR [rbp+0x8],r9d
    65028bb6:	jle    0x65028ca3
    65028bbc:	cmp    r9,0xffffffffffffffe0
    65028bc0:	mov    rcx,r9
    65028bc3:	ja     0x65028ca3
    65028bc9:	add    rcx,0x10
    65028bcd:	cmp    rcx,0x400
    65028bd4:	ja     0x65028c0e
    65028bd6:	lea    rdi,[rcx+0xf]
    65028bda:	cmp    rdi,rcx
    65028bdd:	ja     0x65028be9
    65028bdf:	movabs rdi,0xffffffffffffff0
    65028be9:	and    rdi,0xfffffffffffffff0
    65028bed:	mov    rax,rdi
    65028bf0:	call   0x65033230
    65028bf5:	sub    rsp,rdi
    65028bf8:	lea    rdi,[rsp+0x40]
    65028bfd:	test   rdi,rdi
    65028c00:	je     0x65028ca3
    65028c06:	mov    DWORD PTR [rdi],0xcccc
    65028c0c:	jmp    0x65028c21
    65028c0e:	call   0x6501fc50
    65028c13:	test   rax,rax
    65028c16:	mov    rdi,rax
    65028c19:	je     0x65028c25
    65028c1b:	mov    DWORD PTR [rax],0xdddd
    65028c21:	add    rdi,0x10
    65028c25:	test   rdi,rdi
    65028c28:	mov    r9d,DWORD PTR [rbp+0x8]
    65028c2c:	je     0x65028ca3
    65028c2e:	movsxd r8,r9d
    65028c31:	xor    edx,edx
    65028c33:	mov    rcx,rdi
    65028c36:	call   0x6501efa0
    65028c3b:	mov    r11d,DWORD PTR [rbp+0x8]
    65028c3f:	mov    r9d,DWORD PTR [rbp+0x70]
    65028c43:	mov    edx,DWORD PTR [rbp+0x0]
    65028c46:	mov    ecx,DWORD PTR [rbp+0x10]
    65028c49:	mov    DWORD PTR [rsp+0x28],r11d
    65028c4e:	mov    r8,r14
    65028c51:	mov    QWORD PTR [rsp+0x20],rdi
    65028c56:	call   QWORD PTR [rip+0xb63c]        # 0x65034298
    65028c5c:	test   eax,eax
    65028c5e:	mov    DWORD PTR [rbp+0x8],eax
    65028c61:	je     0x65028c91
    65028c63:	mov    eax,DWORD PTR [rbp+0x80]
    65028c69:	lea    r9,[rbp+0x8]
    65028c6d:	mov    r8,rdi
    65028c70:	mov    DWORD PTR [rsp+0x28],eax
    65028c74:	mov    edx,esi
    65028c76:	mov    ecx,r13d
    65028c79:	mov    QWORD PTR [rsp+0x20],r15
    65028c7e:	call   0x6502ced0
    65028c83:	mov    ecx,DWORD PTR [rbp+0x8]
    65028c86:	test   rax,rax
    65028c89:	mov    r12,rax
    65028c8c:	cmove  ecx,ebx
    65028c8f:	mov    ebx,ecx
    65028c91:	cmp    DWORD PTR [rdi-0x10],0xdddd
    65028c98:	lea    rcx,[rdi-0x10]
    65028c9c:	jne    0x65028ca3
    65028c9e:	call   0x6501fc00
    65028ca3:	mov    rcx,r14
    65028ca6:	call   0x6501fc00
    65028cab:	test   r12,r12
    65028cae:	je     0x65028ce4
    65028cb0:	cmp    r15,r12
    65028cb3:	je     0x65028ce4
    65028cb5:	mov    rcx,r12
    65028cb8:	call   0x6501fc00
    65028cbd:	jmp    0x65028ce4
    65028cbf:	mov    eax,DWORD PTR [rbp+0x80]
    65028cc5:	mov    r9d,DWORD PTR [rbp+0x70]
    65028cc9:	mov    edx,DWORD PTR [rbp+0x0]
    65028ccc:	mov    DWORD PTR [rsp+0x28],eax
    65028cd0:	mov    rax,QWORD PTR [rbp+0x78]
    65028cd4:	mov    ecx,r15d
    65028cd7:	mov    QWORD PTR [rsp+0x20],rax
    65028cdc:	call   QWORD PTR [rip+0xb5b6]        # 0x65034298
    65028ce2:	mov    ebx,eax
    65028ce4:	mov    eax,ebx
    65028ce6:	mov    rcx,QWORD PTR [rbp+0x18]
    65028cea:	xor    rcx,rbp
    65028ced:	call   0x6501e650
    65028cf2:	mov    rbx,QWORD PTR [rbp+0x50]
    65028cf6:	mov    rsi,QWORD PTR [rbp+0x58]
    65028cfa:	mov    rdi,QWORD PTR [rbp+0x60]
    65028cfe:	lea    rsp,[rbp+0x20]
    65028d02:	pop    r15
    65028d04:	pop    r14
    65028d06:	pop    r13
    65028d08:	pop    r12
    65028d0a:	pop    rbp
    65028d0b:	ret    
    65028d0c:	int3   
    65028d0d:	int3   
    65028d0e:	int3   
    65028d0f:	int3   
    65028d10:	mov    rax,rsp
    65028d13:	push   rbx
    65028d14:	sub    rsp,0x80
    65028d1b:	mov    QWORD PTR [rax+0x8],rbp
    65028d1f:	mov    QWORD PTR [rax+0x18],rdi
    65028d23:	xor    dil,dil
    65028d26:	test   rcx,rcx
    65028d29:	mov    QWORD PTR [rax-0x10],r12
    65028d2d:	mov    QWORD PTR [rax-0x18],r13
    65028d31:	mov    BYTE PTR [rax-0x20],dil
    65028d35:	mov    rbp,r9
    65028d38:	mov    r12d,r8d
    65028d3b:	mov    r13d,edx
    65028d3e:	jne    0x65028dd1
    65028d44:	mov    QWORD PTR [rax+0x10],rsi
    65028d48:	call   0x65020a30
    65028d4d:	mov    rcx,QWORD PTR [rax+0xc0]
    65028d54:	mov    rsi,QWORD PTR [rax+0xb8]
    65028d5b:	mov    rbx,rax
    65028d5e:	cmp    rcx,QWORD PTR [rip+0x1ac3b]        # 0x650439a0
    65028d65:	mov    QWORD PTR [rsp+0x60],rax
    65028d6a:	mov    QWORD PTR [rsp+0x50],rcx
    65028d6f:	mov    QWORD PTR [rsp+0x58],rsi
    65028d74:	je     0x65028d8e
    65028d76:	mov    ecx,DWORD PTR [rax+0xc8]
    65028d7c:	test   DWORD PTR [rip+0x1aaa6],ecx        # 0x65043828
    65028d82:	jne    0x65028d8e
    65028d84:	call   0x65023e90
    65028d89:	mov    QWORD PTR [rsp+0x50],rax
    65028d8e:	cmp    rsi,QWORD PTR [rip+0x1a98b]        # 0x65043720
    65028d95:	mov    rsi,QWORD PTR [rsp+0x98]
    65028d9d:	je     0x65028db7
    65028d9f:	mov    eax,DWORD PTR [rbx+0xc8]
    65028da5:	test   DWORD PTR [rip+0x1aa7d],eax        # 0x65043828
    65028dab:	jne    0x65028db7
    65028dad:	call   0x65023340
    65028db2:	mov    QWORD PTR [rsp+0x58],rax
    65028db7:	test   BYTE PTR [rbx+0xc8],0x2
    65028dbe:	jne    0x65028dee
    65028dc0:	or     DWORD PTR [rbx+0xc8],0x2
    65028dc7:	mov    dil,0x1
    65028dca:	mov    BYTE PTR [rsp+0x68],dil
    65028dcf:	jmp    0x65028dee
    65028dd1:	mov    rax,QWORD PTR [rcx]
    65028dd4:	lea    rdx,[rsp+0x50]
    65028dd9:	mov    QWORD PTR [rdx],rax
    65028ddc:	mov    rax,QWORD PTR [rcx+0x8]
    65028de0:	mov    QWORD PTR [rdx+0x8],rax
    65028de4:	movzx  edi,BYTE PTR [rsp+0x68]
    65028de9:	mov    rbx,QWORD PTR [rsp+0x60]
    65028dee:	mov    eax,DWORD PTR [rsp+0xd0]
    65028df5:	lea    rcx,[rsp+0x50]
    65028dfa:	mov    r9,rbp
    65028dfd:	mov    DWORD PTR [rsp+0x40],eax
    65028e01:	mov    eax,DWORD PTR [rsp+0xc8]
    65028e08:	mov    r8d,r12d
    65028e0b:	mov    DWORD PTR [rsp+0x38],eax
    65028e0f:	mov    eax,DWORD PTR [rsp+0xc0]
    65028e16:	mov    edx,r13d
    65028e19:	mov    DWORD PTR [rsp+0x30],eax
    65028e1d:	mov    rax,QWORD PTR [rsp+0xb8]
    65028e25:	mov    QWORD PTR [rsp+0x28],rax
    65028e2a:	mov    eax,DWORD PTR [rsp+0xb0]
    65028e31:	mov    DWORD PTR [rsp+0x20],eax
    65028e35:	call   0x650287d0
    65028e3a:	mov    r13,QWORD PTR [rsp+0x70]
    65028e3f:	mov    r12,QWORD PTR [rsp+0x78]
    65028e44:	mov    rbp,QWORD PTR [rsp+0x90]
    65028e4c:	test   dil,dil
    65028e4f:	mov    rdi,QWORD PTR [rsp+0xa0]
    65028e57:	je     0x65028e60
    65028e59:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    65028e60:	add    rsp,0x80
    65028e67:	pop    rbx
    65028e68:	ret    
    65028e69:	int3   
    65028e6a:	int3   
    65028e6b:	int3   
    65028e6c:	int3   
    65028e6d:	int3   
    65028e6e:	int3   
    65028e6f:	int3   
    65028e70:	rex push rbx
    65028e72:	sub    rsp,0x40
    65028e76:	mov    QWORD PTR [rsp+0x58],rsi
    65028e7b:	mov    QWORD PTR [rsp+0x60],rdi
    65028e80:	xor    dil,dil
    65028e83:	test   rdx,rdx
    65028e86:	mov    QWORD PTR [rsp+0x68],r12
    65028e8b:	mov    BYTE PTR [rsp+0x38],dil
    65028e90:	mov    r12d,ecx
    65028e93:	jne    0x65028f09
    65028e95:	mov    QWORD PTR [rsp+0x50],rbp
    65028e9a:	call   0x65020a30
    65028e9f:	mov    rsi,QWORD PTR [rax+0xc0]
    65028ea6:	mov    rbp,QWORD PTR [rax+0xb8]
    65028ead:	mov    rbx,rax
    65028eb0:	cmp    rsi,QWORD PTR [rip+0x1aae9]        # 0x650439a0
    65028eb7:	je     0x65028ecf
    65028eb9:	mov    edx,DWORD PTR [rax+0xc8]
    65028ebf:	test   DWORD PTR [rip+0x1a963],edx        # 0x65043828
    65028ec5:	jne    0x65028ecf
    65028ec7:	call   0x65023e90
    65028ecc:	mov    rsi,rax
    65028ecf:	cmp    rbp,QWORD PTR [rip+0x1a84a]        # 0x65043720
    65028ed6:	mov    rbp,QWORD PTR [rsp+0x50]
    65028edb:	je     0x65028ef0
    65028edd:	mov    ecx,DWORD PTR [rbx+0xc8]
    65028ee3:	test   DWORD PTR [rip+0x1a93f],ecx        # 0x65043828
    65028ee9:	jne    0x65028ef0
    65028eeb:	call   0x65023340
    65028ef0:	mov    ecx,DWORD PTR [rbx+0xc8]
    65028ef6:	test   cl,0x2
    65028ef9:	jne    0x65028f2b
    65028efb:	or     ecx,0x2
    65028efe:	mov    dil,0x1
    65028f01:	mov    DWORD PTR [rbx+0xc8],ecx
    65028f07:	jmp    0x65028f2b
    65028f09:	mov    rax,QWORD PTR [rdx]
    65028f0c:	lea    rcx,[rsp+0x20]
    65028f11:	mov    QWORD PTR [rcx],rax
    65028f14:	mov    rax,QWORD PTR [rdx+0x8]
    65028f18:	mov    QWORD PTR [rcx+0x8],rax
    65028f1c:	movzx  edi,BYTE PTR [rsp+0x38]
    65028f21:	mov    rbx,QWORD PTR [rsp+0x30]
    65028f26:	mov    rsi,QWORD PTR [rsp+0x20]
    65028f2b:	mov    rax,QWORD PTR [rsi+0x140]
    65028f32:	mov    rsi,QWORD PTR [rsp+0x58]
    65028f37:	movzx  ecx,r12b
    65028f3b:	mov    ax,WORD PTR [rax+rcx*2]
    65028f3f:	mov    r12,QWORD PTR [rsp+0x68]
    65028f44:	and    eax,0x8000
    65028f49:	test   dil,dil
    65028f4c:	mov    rdi,QWORD PTR [rsp+0x60]
    65028f51:	je     0x65028f5a
    65028f53:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    65028f5a:	add    rsp,0x40
    65028f5e:	pop    rbx
    65028f5f:	ret    
    65028f60:	mov    QWORD PTR [rsp+0x8],rbx
    65028f65:	mov    QWORD PTR [rsp+0x10],rbp
    65028f6a:	mov    QWORD PTR [rsp+0x18],rsi
    65028f6f:	mov    QWORD PTR [rsp+0x20],rdi
    65028f74:	push   r12
    65028f76:	sub    rsp,0x20
    65028f7a:	mov    r12d,ecx
    65028f7d:	xor    bpl,bpl
    65028f80:	call   0x65020a30
    65028f85:	mov    rsi,QWORD PTR [rax+0xc0]
    65028f8c:	mov    rdi,QWORD PTR [rax+0xb8]
    65028f93:	mov    rbx,rax
    65028f96:	cmp    rsi,QWORD PTR [rip+0x1aa03]        # 0x650439a0
    65028f9d:	je     0x65028fb5
    65028f9f:	mov    edx,DWORD PTR [rax+0xc8]
    65028fa5:	test   DWORD PTR [rip+0x1a87d],edx        # 0x65043828
    65028fab:	jne    0x65028fb5
    65028fad:	call   0x65023e90
    65028fb2:	mov    rsi,rax
    65028fb5:	cmp    rdi,QWORD PTR [rip+0x1a764]        # 0x65043720
    65028fbc:	je     0x65028fd1
    65028fbe:	mov    ecx,DWORD PTR [rbx+0xc8]
    65028fc4:	test   DWORD PTR [rip+0x1a85e],ecx        # 0x65043828
    65028fca:	jne    0x65028fd1
    65028fcc:	call   0x65023340
    65028fd1:	mov    ecx,DWORD PTR [rbx+0xc8]
    65028fd7:	test   cl,0x2
    65028fda:	jne    0x65028fe8
    65028fdc:	or     ecx,0x2
    65028fdf:	mov    bpl,0x1
    65028fe2:	mov    DWORD PTR [rbx+0xc8],ecx
    65028fe8:	mov    rax,QWORD PTR [rsi+0x140]
    65028fef:	movzx  ecx,r12b
    65028ff3:	mov    ax,WORD PTR [rax+rcx*2]
    65028ff7:	and    eax,0x8000
    65028ffc:	test   bpl,bpl
    65028fff:	je     0x65029008
    65029001:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    65029008:	mov    rbx,QWORD PTR [rsp+0x30]
    6502900d:	mov    rbp,QWORD PTR [rsp+0x38]
    65029012:	mov    rsi,QWORD PTR [rsp+0x40]
    65029017:	mov    rdi,QWORD PTR [rsp+0x48]
    6502901c:	add    rsp,0x20
    65029020:	pop    r12
    65029022:	ret    
    65029023:	int3   
    65029024:	int3   
    65029025:	int3   
    65029026:	int3   
    65029027:	int3   
    65029028:	int3   
    65029029:	int3   
    6502902a:	int3   
    6502902b:	int3   
    6502902c:	int3   
    6502902d:	int3   
    6502902e:	int3   
    6502902f:	int3   
    65029030:	mov    QWORD PTR [rsp+0x20],rbx
    65029035:	push   rsi
    65029036:	sub    rsp,0x60
    6502903a:	test   r8,r8
    6502903d:	mov    esi,edx
    6502903f:	movsxd rbx,ecx
    65029042:	mov    BYTE PTR [rsp+0x58],0x0
    65029047:	jne    0x650290e3
    6502904d:	call   0x65020a30
    65029052:	mov    QWORD PTR [rsp+0x50],rax
    65029057:	mov    r11,rax
    6502905a:	mov    r8,QWORD PTR [rax+0xc0]
    65029061:	cmp    r8,QWORD PTR [rip+0x1a938]        # 0x650439a0
    65029068:	mov    QWORD PTR [rsp+0x40],r8
    6502906d:	mov    rax,QWORD PTR [rax+0xb8]
    65029074:	mov    QWORD PTR [rsp+0x48],rax
    65029079:	je     0x6502909e
    6502907b:	mov    ecx,DWORD PTR [r11+0xc8]
    65029082:	test   DWORD PTR [rip+0x1a7a0],ecx        # 0x65043828
    65029088:	jne    0x6502909e
    6502908a:	call   0x65023e90
    6502908f:	mov    r11,QWORD PTR [rsp+0x50]
    65029094:	mov    QWORD PTR [rsp+0x40],rax
    65029099:	mov    rax,QWORD PTR [rsp+0x48]
    6502909e:	cmp    rax,QWORD PTR [rip+0x1a67b]        # 0x65043720
    650290a5:	je     0x650290c5
    650290a7:	mov    eax,DWORD PTR [r11+0xc8]
    650290ae:	test   DWORD PTR [rip+0x1a774],eax        # 0x65043828
    650290b4:	jne    0x650290c5
    650290b6:	call   0x65023340
    650290bb:	mov    r11,QWORD PTR [rsp+0x50]
    650290c0:	mov    QWORD PTR [rsp+0x48],rax
    650290c5:	test   BYTE PTR [r11+0xc8],0x2
    650290cd:	jne    0x650290fb
    650290cf:	or     DWORD PTR [r11+0xc8],0x2
    650290d7:	mov    r11,QWORD PTR [rsp+0x50]
    650290dc:	mov    BYTE PTR [rsp+0x58],0x1
    650290e1:	jmp    0x650290fb
    650290e3:	mov    rax,QWORD PTR [r8]
    650290e6:	lea    rcx,[rsp+0x40]
    650290eb:	mov    QWORD PTR [rcx],rax
    650290ee:	mov    rax,QWORD PTR [r8+0x8]
    650290f2:	mov    QWORD PTR [rcx+0x8],rax
    650290f6:	mov    r11,QWORD PTR [rsp+0x50]
    650290fb:	lea    eax,[rbx+0x1]
    650290fe:	cmp    eax,0x100
    65029103:	ja     0x65029138
    65029105:	mov    rax,QWORD PTR [rsp+0x40]
    6502910a:	mov    rcx,QWORD PTR [rax+0x140]
    65029111:	movzx  eax,WORD PTR [rcx+rbx*2]
    65029115:	and    eax,esi
    65029117:	cmp    BYTE PTR [rsp+0x58],0x0
    6502911c:	je     0x65029209
    65029122:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6502912a:	mov    rbx,QWORD PTR [rsp+0x88]
    65029132:	add    rsp,0x60
    65029136:	pop    rsi
    65029137:	ret    
    65029138:	mov    QWORD PTR [rsp+0x78],rdi
    6502913d:	mov    edi,ebx
    6502913f:	lea    rdx,[rsp+0x40]
    65029144:	sar    edi,0x8
    65029147:	movzx  ecx,dil
    6502914b:	call   0x65028e70
    65029150:	test   eax,eax
    65029152:	je     0x65029173
    65029154:	mov    BYTE PTR [rsp+0x80],dil
    6502915c:	mov    BYTE PTR [rsp+0x81],bl
    65029163:	mov    BYTE PTR [rsp+0x82],0x0
    6502916b:	mov    r9d,0x2
    65029171:	jmp    0x65029188
    65029173:	mov    BYTE PTR [rsp+0x80],bl
    6502917a:	mov    BYTE PTR [rsp+0x81],0x0
    65029182:	mov    r9d,0x1
    65029188:	mov    rcx,QWORD PTR [rsp+0x40]
    6502918d:	mov    DWORD PTR [rsp+0x38],0x1
    65029195:	lea    r8,[rsp+0x80]
    6502919d:	mov    eax,DWORD PTR [rcx+0x14]
    650291a0:	mov    edx,0x1
    650291a5:	mov    DWORD PTR [rsp+0x30],eax
    650291a9:	mov    eax,DWORD PTR [rcx+0x4]
    650291ac:	lea    rcx,[rsp+0x40]
    650291b1:	mov    DWORD PTR [rsp+0x28],eax
    650291b5:	lea    rax,[rsp+0x70]
    650291ba:	mov    QWORD PTR [rsp+0x20],rax
    650291bf:	call   0x6502a210
    650291c4:	mov    rdi,QWORD PTR [rsp+0x78]
    650291c9:	test   eax,eax
    650291cb:	jne    0x650291ef
    650291cd:	cmp    BYTE PTR [rsp+0x58],al
    650291d1:	je     0x650291df
    650291d3:	mov    rax,QWORD PTR [rsp+0x50]
    650291d8:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650291df:	xor    eax,eax
    650291e1:	mov    rbx,QWORD PTR [rsp+0x88]
    650291e9:	add    rsp,0x60
    650291ed:	pop    rsi
    650291ee:	ret    
    650291ef:	movzx  eax,WORD PTR [rsp+0x70]
    650291f4:	and    eax,esi
    650291f6:	cmp    BYTE PTR [rsp+0x58],0x0
    650291fb:	je     0x65029209
    650291fd:	mov    rcx,QWORD PTR [rsp+0x50]
    65029202:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    65029209:	mov    rbx,QWORD PTR [rsp+0x88]
    65029211:	add    rsp,0x60
    65029215:	pop    rsi
    65029216:	ret    
    65029217:	int3   
    65029218:	int3   
    65029219:	int3   
    6502921a:	int3   
    6502921b:	int3   
    6502921c:	int3   
    6502921d:	int3   
    6502921e:	int3   
    6502921f:	int3   
    65029220:	mov    QWORD PTR [rsp+0x18],rbx
    65029225:	push   rsi
    65029226:	push   rdi
    65029227:	push   r12
    65029229:	sub    rsp,0x30
    6502922d:	lea    r12,[rip+0x1a8bc]        # 0x65043af0
    65029234:	xor    esi,esi
    65029236:	mov    edi,ecx
    65029238:	mov    rax,r12
    6502923b:	mov    ebx,esi
    6502923d:	data16 xchg ax,ax
    65029240:	cmp    ecx,DWORD PTR [rax]
    65029242:	je     0x6502925e
    65029244:	add    ebx,0x1
    65029247:	add    rax,0x10
    6502924b:	cmp    ebx,0x17
    6502924e:	jb     0x65029240
    65029250:	mov    rbx,QWORD PTR [rsp+0x60]
    65029255:	add    rsp,0x30
    65029259:	pop    r12
    6502925b:	pop    rdi
    6502925c:	pop    rsi
    6502925d:	ret    
    6502925e:	cmp    ebx,0x17
    65029261:	jae    0x65029445
    65029267:	mov    ecx,0x3
    6502926c:	call   0x6502d750
    65029271:	cmp    eax,0x1
    65029274:	je     0x650293fc
    6502927a:	mov    ecx,0x3
    6502927f:	call   0x6502d750
    65029284:	test   eax,eax
    65029286:	jne    0x65029295
    65029288:	cmp    DWORD PTR [rip+0x1b9c1],0x1        # 0x65044c50
    6502928f:	je     0x650293fc
    65029295:	cmp    edi,0xfc
    6502929b:	je     0x65029445
    650292a1:	mov    QWORD PTR [rsp+0x50],rbp
    650292a6:	lea    rbp,[rip+0x1c123]        # 0x650453d0
    650292ad:	lea    r8,[rip+0xc87c]        # 0x65035b30
    650292b4:	mov    rcx,rbp
    650292b7:	mov    edx,0x314
    650292bc:	call   0x65020320
    650292c1:	test   eax,eax
    650292c3:	je     0x650292d9
    650292c5:	xor    r9d,r9d
    650292c8:	xor    r8d,r8d
    650292cb:	xor    edx,edx
    650292cd:	xor    ecx,ecx
    650292cf:	mov    QWORD PTR [rsp+0x20],rsi
    650292d4:	call   0x6501d920
    650292d9:	lea    rdx,[rip+0x1c109]        # 0x650453e9
    650292e0:	mov    r8d,0x104
    650292e6:	xor    ecx,ecx
    650292e8:	mov    BYTE PTR [rip+0x1c1fe],sil        # 0x650454ed
    650292ef:	call   QWORD PTR [rip+0xafe3]        # 0x650342d8
    650292f5:	test   eax,eax
    650292f7:	jne    0x65029329
    650292f9:	lea    r8,[rip+0xc818]        # 0x65035b18
    65029300:	lea    rcx,[rip+0x1c0e2]        # 0x650453e9
    65029307:	mov    edx,0x2fb
    6502930c:	call   0x65020320
    65029311:	test   eax,eax
    65029313:	je     0x65029329
    65029315:	xor    r9d,r9d
    65029318:	xor    r8d,r8d
    6502931b:	xor    edx,edx
    6502931d:	xor    ecx,ecx
    6502931f:	mov    QWORD PTR [rsp+0x20],rsi
    65029324:	call   0x6501d920
    65029329:	or     rcx,0xffffffffffffffff
    6502932d:	xor    eax,eax
    6502932f:	lea    rdi,[rip+0x1c0b3]        # 0x650453e9
    65029336:	repnz scas al,BYTE PTR es:[rdi]
    65029338:	not    rcx
    6502933b:	cmp    rcx,0x3c
    6502933f:	jbe    0x65029378
    65029341:	lea    rcx,[rcx+rbp*1-0x23]
    65029346:	lea    rdx,[rip+0x1c397]        # 0x650456e4
    6502934d:	lea    r9d,[rax+0x3]
    65029351:	lea    r8,[rip+0xc7bc]        # 0x65035b14
    65029358:	sub    rdx,rcx
    6502935b:	call   0x6502a700
    65029360:	test   eax,eax
    65029362:	je     0x65029378
    65029364:	xor    r9d,r9d
    65029367:	xor    r8d,r8d
    6502936a:	xor    edx,edx
    6502936c:	xor    ecx,ecx
    6502936e:	mov    QWORD PTR [rsp+0x20],rsi
    65029373:	call   0x6501d920
    65029378:	lea    r8,[rip+0xc791]        # 0x65035b10
    6502937f:	mov    edx,0x314
    65029384:	mov    rcx,rbp
    65029387:	call   0x6502a640
    6502938c:	test   eax,eax
    6502938e:	je     0x650293a4
    65029390:	xor    r9d,r9d
    65029393:	xor    r8d,r8d
    65029396:	xor    edx,edx
    65029398:	xor    ecx,ecx
    6502939a:	mov    QWORD PTR [rsp+0x20],rsi
    6502939f:	call   0x6501d920
    650293a4:	movsxd r8,ebx
    650293a7:	mov    edx,0x314
    650293ac:	mov    rcx,rbp
    650293af:	add    r8,r8
    650293b2:	mov    r8,QWORD PTR [r12+r8*8+0x8]
    650293b7:	call   0x6502a640
    650293bc:	test   eax,eax
    650293be:	je     0x650293d4
    650293c0:	xor    r9d,r9d
    650293c3:	xor    r8d,r8d
    650293c6:	xor    edx,edx
    650293c8:	xor    ecx,ecx
    650293ca:	mov    QWORD PTR [rsp+0x20],rsi
    650293cf:	call   0x6501d920
    650293d4:	lea    rdx,[rip+0xc70d]        # 0x65035ae8
    650293db:	mov    r8d,0x12010
    650293e1:	mov    rcx,rbp
    650293e4:	call   0x6502d4f0
    650293e9:	mov    rbp,QWORD PTR [rsp+0x50]
    650293ee:	mov    rbx,QWORD PTR [rsp+0x60]
    650293f3:	add    rsp,0x30
    650293f7:	pop    r12
    650293f9:	pop    rdi
    650293fa:	pop    rsi
    650293fb:	ret    
    650293fc:	mov    ecx,0xfffffff4
    65029401:	call   QWORD PTR [rip+0xaeb9]        # 0x650342c0
    65029407:	test   rax,rax
    6502940a:	mov    r11,rax
    6502940d:	je     0x65029445
    6502940f:	cmp    rax,0xffffffffffffffff
    65029413:	je     0x65029445
    65029415:	xor    eax,eax
    65029417:	movsxd rcx,ebx
    6502941a:	lea    r9,[rsp+0x58]
    6502941f:	add    rcx,rcx
    65029422:	mov    QWORD PTR [rsp+0x20],rsi
    65029427:	mov    rdx,QWORD PTR [r12+rcx*8+0x8]
    6502942c:	or     rcx,0xffffffffffffffff
    65029430:	mov    rdi,rdx
    65029433:	repnz scas al,BYTE PTR es:[rdi]
    65029435:	not    rcx
    65029438:	lea    r8,[rcx-0x1]
    6502943c:	mov    rcx,r11
    6502943f:	call   QWORD PTR [rip+0xacab]        # 0x650340f0
    65029445:	mov    rbx,QWORD PTR [rsp+0x60]
    6502944a:	add    rsp,0x30
    6502944e:	pop    r12
    65029450:	pop    rdi
    65029451:	pop    rsi
    65029452:	ret    
    65029453:	int3   
    65029454:	int3   
    65029455:	int3   
    65029456:	int3   
    65029457:	int3   
    65029458:	int3   
    65029459:	int3   
    6502945a:	int3   
    6502945b:	int3   
    6502945c:	int3   
    6502945d:	int3   
    6502945e:	int3   
    6502945f:	int3   
    65029460:	sub    rsp,0x38
    65029464:	mov    ecx,0x3
    65029469:	call   0x6502d750
    6502946e:	cmp    eax,0x1
    65029471:	je     0x65029492
    65029473:	mov    ecx,0x3
    65029478:	call   0x6502d750
    6502947d:	test   eax,eax
    6502947f:	jne    0x65029546
    65029485:	cmp    DWORD PTR [rip+0x1b7c4],0x1        # 0x65044c50
    6502948c:	jne    0x65029546
    65029492:	mov    QWORD PTR [rsp+0x48],rbx
    65029497:	lea    rbx,[rip+0x1a652]        # 0x65043af0
    6502949e:	mov    QWORD PTR [rsp+0x30],rdi
    650294a3:	mov    rax,rbx
    650294a6:	xor    edi,edi
    650294a8:	cmp    DWORD PTR [rax],0xfc
    650294ae:	je     0x650294be
    650294b0:	add    edi,0x1
    650294b3:	add    rax,0x10
    650294b7:	cmp    edi,0x17
    650294ba:	jb     0x650294a8
    650294bc:	jmp    0x65029532
    650294be:	cmp    edi,0x17
    650294c1:	jae    0x65029532
    650294c3:	mov    ecx,0x3
    650294c8:	call   0x6502d750
    650294cd:	cmp    eax,0x1
    650294d0:	je     0x650294e9
    650294d2:	mov    ecx,0x3
    650294d7:	call   0x6502d750
    650294dc:	test   eax,eax
    650294de:	jne    0x65029532
    650294e0:	cmp    DWORD PTR [rip+0x1b769],0x1        # 0x65044c50
    650294e7:	jne    0x65029532
    650294e9:	mov    ecx,0xfffffff4
    650294ee:	call   QWORD PTR [rip+0xadcc]        # 0x650342c0
    650294f4:	test   rax,rax
    650294f7:	mov    r11,rax
    650294fa:	je     0x65029532
    650294fc:	cmp    rax,0xffffffffffffffff
    65029500:	je     0x65029532
    65029502:	movsxd rcx,edi
    65029505:	xor    eax,eax
    65029507:	lea    r9,[rsp+0x40]
    6502950c:	add    rcx,rcx
    6502950f:	mov    QWORD PTR [rsp+0x20],rax
    65029514:	mov    rdx,QWORD PTR [rbx+rcx*8+0x8]
    65029519:	or     rcx,0xffffffffffffffff
    6502951d:	mov    rdi,rdx
    65029520:	repnz scas al,BYTE PTR es:[rdi]
    65029522:	not    rcx
    65029525:	lea    r8,[rcx-0x1]
    65029529:	mov    rcx,r11
    6502952c:	call   QWORD PTR [rip+0xabbe]        # 0x650340f0
    65029532:	mov    ecx,0xff
    65029537:	call   0x65029220
    6502953c:	mov    rdi,QWORD PTR [rsp+0x30]
    65029541:	mov    rbx,QWORD PTR [rsp+0x48]
    65029546:	add    rsp,0x38
    6502954a:	ret    
    6502954b:	int3   
    6502954c:	int3   
    6502954d:	int3   
    6502954e:	int3   
    6502954f:	int3   
    65029550:	int3   
    65029551:	int3   
    65029552:	int3   
    65029553:	int3   
    65029554:	int3   
    65029555:	int3   
    65029556:	data16 data16 xchg ax,ax
    6502955a:	data16 data16 xchg ax,ax
    6502955e:	xchg   ax,ax
    65029560:	sub    rsp,0x4d8
    65029567:	xor    r8,r8
    6502956a:	xor    r9,r9
    6502956d:	mov    QWORD PTR [rsp+0x20],rsp
    65029572:	mov    QWORD PTR [rsp+0x28],r8
    65029577:	call   0x6502ecf2
    6502957c:	add    rsp,0x4d8
    65029583:	ret    
    65029584:	int3   
    65029585:	int3   
    65029586:	int3   
    65029587:	int3   
    65029588:	int3   
    65029589:	int3   
    6502958a:	data16 xchg ax,ax
    6502958d:	data16 xchg ax,ax
    65029590:	mov    QWORD PTR [rsp+0x8],rcx
    65029595:	mov    QWORD PTR [rsp+0x18],rdx
    6502959a:	mov    DWORD PTR [rsp+0x10],r8d
    6502959f:	mov    r9,0x19930520
    650295a6:	jmp    0x650295b0
    650295a8:	int3   
    650295a9:	int3   
    650295aa:	int3   
    650295ab:	int3   
    650295ac:	int3   
    650295ad:	int3   
    650295ae:	xchg   ax,ax
    650295b0:	ret    
    650295b1:	int3   
    650295b2:	int3   
    650295b3:	int3   
    650295b4:	int3   
    650295b5:	int3   
    650295b6:	int3   
    650295b7:	data16 data16 xchg ax,ax
    650295bb:	data16 data16 xchg ax,ax
    650295bf:	nop
    650295c0:	ret    
    650295c1:	int3   
    650295c2:	int3   
    650295c3:	int3   
    650295c4:	int3   
    650295c5:	int3   
    650295c6:	int3   
    650295c7:	int3   
    650295c8:	int3   
    650295c9:	int3   
    650295ca:	int3   
    650295cb:	int3   
    650295cc:	int3   
    650295cd:	int3   
    650295ce:	int3   
    650295cf:	int3   
    650295d0:	xor    eax,eax
    650295d2:	cmp    WORD PTR [rcx],0x5a4d
    650295d7:	jne    0x650295f0
    650295d9:	movsxd rdx,DWORD PTR [rcx+0x3c]
    650295dd:	cmp    DWORD PTR [rdx+rcx*1],0x4550
    650295e4:	jne    0x650295f0
    650295e6:	cmp    WORD PTR [rdx+rcx*1+0x18],0x20b
    650295ed:	sete   al
    650295f0:	ret    0x0
    650295f3:	int3   
    650295f4:	int3   
    650295f5:	int3   
    650295f6:	int3   
    650295f7:	int3   
    650295f8:	int3   
    650295f9:	int3   
    650295fa:	int3   
    650295fb:	int3   
    650295fc:	int3   
    650295fd:	int3   
    650295fe:	int3   
    650295ff:	int3   
    65029600:	movsxd r8,DWORD PTR [rcx+0x3c]
    65029604:	xor    r9d,r9d
    65029607:	mov    r10,rdx
    6502960a:	add    r8,rcx
    6502960d:	movzx  eax,WORD PTR [r8+0x14]
    65029612:	movzx  r11d,WORD PTR [r8+0x6]
    65029617:	test   r11d,r11d
    6502961a:	lea    rcx,[rax+r8*1+0x18]
    6502961f:	je     0x65029640
    65029621:	mov    edx,DWORD PTR [rcx+0xc]
    65029624:	cmp    r10,rdx
    65029627:	jb     0x65029633
    65029629:	mov    eax,DWORD PTR [rcx+0x8]
    6502962c:	add    eax,edx
    6502962e:	cmp    r10,rax
    65029631:	jb     0x65029643
    65029633:	add    r9d,0x1
    65029637:	add    rcx,0x28
    6502963b:	cmp    r9d,r11d
    6502963e:	jb     0x65029621
    65029640:	xor    eax,eax
    65029642:	ret    
    65029643:	mov    rax,rcx
    65029646:	ret    
    65029647:	int3   
    65029648:	int3   
    65029649:	int3   
    6502964a:	int3   
    6502964b:	int3   
    6502964c:	int3   
    6502964d:	int3   
    6502964e:	int3   
    6502964f:	int3   
    65029650:	sub    rsp,0x28
    65029654:	mov    r8,rcx
    65029657:	lea    rcx,[rip+0xfffffffffffd69a2]        # 0x65000000
    6502965e:	call   0x650295d0
    65029663:	test   eax,eax
    65029665:	je     0x65029686
    65029667:	sub    r8,rcx
    6502966a:	mov    rdx,r8
    6502966d:	call   0x65029600
    65029672:	test   rax,rax
    65029675:	je     0x65029686
    65029677:	mov    eax,DWORD PTR [rax+0x24]
    6502967a:	shr    eax,0x1f
    6502967d:	not    eax
    6502967f:	and    eax,0x1
    65029682:	jmp    0x65029686
    65029684:	xor    eax,eax
    65029686:	add    rsp,0x28
    6502968a:	ret    
    6502968b:	int3   
    6502968c:	int3   
    6502968d:	int3   
    6502968e:	int3   
    6502968f:	int3   
    65029690:	rex push rbp
    65029692:	sub    rsp,0x20
    65029696:	mov    rbp,rdx
    65029699:	mov    rax,QWORD PTR [rcx]
    6502969c:	xor    ecx,ecx
    6502969e:	cmp    DWORD PTR [rax],0xc0000005
    650296a4:	sete   cl
    650296a7:	mov    eax,ecx
    650296a9:	mov    eax,ecx
    650296ab:	add    rsp,0x20
    650296af:	pop    rbp
    650296b0:	ret    
    650296b1:	int3   
    650296b2:	int3   
    650296b3:	int3   
    650296b4:	int3   
    650296b5:	int3   
    650296b6:	int3   
    650296b7:	int3   
    650296b8:	int3   
    650296b9:	int3   
    650296ba:	int3   
    650296bb:	int3   
    650296bc:	int3   
    650296bd:	int3   
    650296be:	int3   
    650296bf:	int3   
    650296c0:	mov    QWORD PTR [rsp+0x8],rbx
    650296c5:	mov    QWORD PTR [rsp+0x10],rbp
    650296ca:	mov    QWORD PTR [rsp+0x18],rsi
    650296cf:	push   rdi
    650296d0:	push   r12
    650296d2:	push   r13
    650296d4:	sub    rsp,0x20
    650296d8:	lea    r12,[rip+0x1a581]        # 0x65043c60
    650296df:	xor    esi,esi
    650296e1:	lea    r13,[rip+0x1c008]        # 0x650456f0
    650296e8:	xor    edi,edi
    650296ea:	lea    rbp,[rip+0x1a7af]        # 0x65043ea0
    650296f1:	mov    rbx,r12
    650296f4:	cmp    DWORD PTR [rbx+0x8],0x1
    650296f8:	jne    0x6502971a
    650296fa:	movsxd rax,esi
    650296fd:	mov    edx,0xfa0
    65029702:	add    esi,0x1
    65029705:	lea    rcx,[rax+rax*4]
    65029709:	lea    rcx,[r13+rcx*8+0x0]
    6502970e:	mov    QWORD PTR [rbx],rcx
    65029711:	call   0x65029e90
    65029716:	test   eax,eax
    65029718:	je     0x65029744
    6502971a:	add    rbx,0x10
    6502971e:	add    edi,0x1
    65029721:	cmp    rbx,rbp
    65029724:	jl     0x650296f4
    65029726:	mov    eax,0x1
    6502972b:	mov    rbx,QWORD PTR [rsp+0x40]
    65029730:	mov    rbp,QWORD PTR [rsp+0x48]
    65029735:	mov    rsi,QWORD PTR [rsp+0x50]
    6502973a:	add    rsp,0x20
    6502973e:	pop    r13
    65029740:	pop    r12
    65029742:	pop    rdi
    65029743:	ret    
    65029744:	movsxd rax,edi
    65029747:	add    rax,rax
    6502974a:	mov    QWORD PTR [r12+rax*8],0x0
    65029752:	xor    eax,eax
    65029754:	jmp    0x6502972b
    65029756:	int3   
    65029757:	int3   
    65029758:	int3   
    65029759:	int3   
    6502975a:	int3   
    6502975b:	int3   
    6502975c:	int3   
    6502975d:	int3   
    6502975e:	int3   
    6502975f:	int3   
    65029760:	mov    QWORD PTR [rsp+0x8],rbx
    65029765:	mov    QWORD PTR [rsp+0x10],rbp
    6502976a:	mov    QWORD PTR [rsp+0x18],rsi
    6502976f:	mov    QWORD PTR [rsp+0x20],rdi
    65029774:	push   r12
    65029776:	sub    rsp,0x20
    6502977a:	lea    rbx,[rip+0x1a4df]        # 0x65043c60
    65029781:	xor    r12d,r12d
    65029784:	lea    rbp,[rip+0x1a715]        # 0x65043ea0
    6502978b:	mov    rdi,rbx
    6502978e:	xchg   ax,ax
    65029790:	mov    rsi,QWORD PTR [rdi]
    65029793:	test   rsi,rsi
    65029796:	je     0x650297b2
    65029798:	cmp    DWORD PTR [rdi+0x8],0x1
    6502979c:	je     0x650297b2
    6502979e:	mov    rcx,rsi
    650297a1:	call   QWORD PTR [rip+0xa981]        # 0x65034128
    650297a7:	mov    rcx,rsi
    650297aa:	call   0x6501fc00
    650297af:	mov    QWORD PTR [rdi],r12
    650297b2:	add    rdi,0x10
    650297b6:	cmp    rdi,rbp
    650297b9:	jl     0x65029790
    650297bb:	xchg   ax,ax
    650297bd:	data16 xchg ax,ax
    650297c0:	mov    rcx,QWORD PTR [rbx]
    650297c3:	test   rcx,rcx
    650297c6:	je     0x650297d4
    650297c8:	cmp    DWORD PTR [rbx+0x8],0x1
    650297cc:	jne    0x650297d4
    650297ce:	call   QWORD PTR [rip+0xa954]        # 0x65034128
    650297d4:	add    rbx,0x10
    650297d8:	cmp    rbx,rbp
    650297db:	jl     0x650297c0
    650297dd:	mov    rbx,QWORD PTR [rsp+0x30]
    650297e2:	mov    rbp,QWORD PTR [rsp+0x38]
    650297e7:	mov    rsi,QWORD PTR [rsp+0x40]
    650297ec:	mov    rdi,QWORD PTR [rsp+0x48]
    650297f1:	add    rsp,0x20
    650297f5:	pop    r12
    650297f7:	ret    
    650297f8:	int3   
    650297f9:	int3   
    650297fa:	int3   
    650297fb:	int3   
    650297fc:	int3   
    650297fd:	int3   
    650297fe:	int3   
    650297ff:	int3   
    65029800:	movsxd rcx,ecx
    65029803:	lea    rax,[rip+0x1a456]        # 0x65043c60
    6502980a:	add    rcx,rcx
    6502980d:	mov    rcx,QWORD PTR [rax+rcx*8]
    65029811:	rex.W jmp QWORD PTR [rip+0xa908]        # 0x65034120
    65029818:	int3   
    65029819:	int3   
    6502981a:	int3   
    6502981b:	int3   
    6502981c:	int3   
    6502981d:	int3   
    6502981e:	int3   
    6502981f:	int3   
    65029820:	mov    QWORD PTR [rsp+0x8],rbx
    65029825:	mov    QWORD PTR [rsp+0x10],rsi
    6502982a:	mov    QWORD PTR [rsp+0x18],rdi
    6502982f:	push   r12
    65029831:	sub    rsp,0x20
    65029835:	movsxd rbx,ecx
    65029838:	mov    esi,0x1
    6502983d:	cmp    QWORD PTR [rip+0x1ba6b],0x0        # 0x650452b0
    65029845:	jne    0x6502985e
    65029847:	call   0x65029460
    6502984c:	lea    ecx,[rsi+0x1d]
    6502984f:	call   0x65029220
    65029854:	mov    ecx,0xff
    65029859:	call   0x65022c90
    6502985e:	mov    rdi,rbx
    65029861:	add    rdi,rdi
    65029864:	lea    r12,[rip+0x1a3f5]        # 0x65043c60
    6502986b:	cmp    QWORD PTR [r12+rdi*8],0x0
    65029870:	je     0x65029876
    65029872:	mov    eax,esi
    65029874:	jmp    0x650298ef
    65029876:	mov    ecx,0x28
    6502987b:	call   0x65022a80
    65029880:	mov    rbx,rax
    65029883:	test   rax,rax
    65029886:	jne    0x65029897
    65029888:	call   0x65020420
    6502988d:	mov    DWORD PTR [rax],0xc
    65029893:	xor    eax,eax
    65029895:	jmp    0x650298ef
    65029897:	mov    ecx,0xa
    6502989c:	call   0x65029930
    650298a1:	nop
    650298a2:	cmp    QWORD PTR [r12+rdi*8],0x0
    650298a7:	jne    0x650298d7
    650298a9:	mov    edx,0xfa0
    650298ae:	mov    rcx,rbx
    650298b1:	call   0x65029e90
    650298b6:	test   eax,eax
    650298b8:	jne    0x650298d1
    650298ba:	mov    rcx,rbx
    650298bd:	call   0x6501fc00
    650298c2:	call   0x65020420
    650298c7:	mov    DWORD PTR [rax],0xc
    650298cd:	xor    esi,esi
    650298cf:	jmp    0x650298e0
    650298d1:	mov    QWORD PTR [r12+rdi*8],rbx
    650298d5:	jmp    0x650298e0
    650298d7:	mov    rcx,rbx
    650298da:	call   0x6501fc00
    650298df:	nop
    650298e0:	mov    rcx,QWORD PTR [rip+0x1a419]        # 0x65043d00
    650298e7:	call   QWORD PTR [rip+0xa833]        # 0x65034120
    650298ed:	mov    eax,esi
    650298ef:	mov    rbx,QWORD PTR [rsp+0x30]
    650298f4:	mov    rsi,QWORD PTR [rsp+0x38]
    650298f9:	mov    rdi,QWORD PTR [rsp+0x40]
    650298fe:	add    rsp,0x20
    65029902:	pop    r12
    65029904:	ret    
    65029905:	int3   
    65029906:	int3   
    65029907:	int3   
    65029908:	int3   
    65029909:	int3   
    6502990a:	int3   
    6502990b:	int3   
    6502990c:	int3   
    6502990d:	int3   
    6502990e:	int3   
    6502990f:	int3   
    65029910:	rex push rbp
    65029912:	sub    rsp,0x20
    65029916:	mov    rbp,rdx
    65029919:	mov    rcx,QWORD PTR [rip+0x1a3e0]        # 0x65043d00
    65029920:	call   QWORD PTR [rip+0xa7fa]        # 0x65034120
    65029926:	add    rsp,0x20
    6502992a:	pop    rbp
    6502992b:	ret    
    6502992c:	int3   
    6502992d:	int3   
    6502992e:	int3   
    6502992f:	int3   
    65029930:	mov    QWORD PTR [rsp+0x8],rbx
    65029935:	push   rdi
    65029936:	sub    rsp,0x20
    6502993a:	movsxd rbx,ecx
    6502993d:	lea    rdi,[rip+0x1a31c]        # 0x65043c60
    65029944:	add    rbx,rbx
    65029947:	cmp    QWORD PTR [rdi+rbx*8],0x0
    6502994c:	jne    0x6502995f
    6502994e:	call   0x65029820
    65029953:	test   eax,eax
    65029955:	jne    0x6502995f
    65029957:	lea    ecx,[rax+0x11]
    6502995a:	call   0x65022c60
    6502995f:	mov    rcx,QWORD PTR [rdi+rbx*8]
    65029963:	mov    rbx,QWORD PTR [rsp+0x30]
    65029968:	add    rsp,0x20
    6502996c:	pop    rdi
    6502996d:	rex.W jmp QWORD PTR [rip+0xa7a4]        # 0x65034118
    65029974:	int3   
    65029975:	int3   
    65029976:	int3   
    65029977:	int3   
    65029978:	int3   
    65029979:	int3   
    6502997a:	int3   
    6502997b:	int3   
    6502997c:	int3   
    6502997d:	int3   
    6502997e:	int3   
    6502997f:	int3   
    65029980:	mov    rax,QWORD PTR [rsp]
    65029984:	mov    QWORD PTR [rcx],rax
    65029987:	ret    
    65029988:	int3   
    65029989:	int3   
    6502998a:	int3   
    6502998b:	int3   
    6502998c:	int3   
    6502998d:	int3   
    6502998e:	int3   
    6502998f:	int3   
    65029990:	xor    edx,edx
    65029992:	mov    eax,0x1
    65029997:	test   rcx,rcx
    6502999a:	cmove  eax,edx
    6502999d:	ret    
    6502999e:	int3   
    6502999f:	int3   
    650299a0:	sub    rsp,0x5a8
    650299a7:	test   BYTE PTR [rip+0x1a4f2],0x1        # 0x65043ea0
    650299ae:	je     0x650299ba
    650299b0:	mov    ecx,0xa
    650299b5:	call   0x65029220
    650299ba:	call   0x65029b80
    650299bf:	test   rax,rax
    650299c2:	je     0x650299ce
    650299c4:	mov    ecx,0x16
    650299c9:	call   0x65029b90
    650299ce:	test   BYTE PTR [rip+0x1a4cb],0x2        # 0x65043ea0
    650299d5:	je     0x65029a36
    650299d7:	lea    rcx,[rsp+0xd0]
    650299df:	call   QWORD PTR [rip+0xa823]        # 0x65034208
    650299e5:	lea    rcx,[rsp+0x30]
    650299ea:	xor    edx,edx
    650299ec:	mov    r8d,0x98
    650299f2:	call   0x6501efa0
    650299f7:	mov    rax,QWORD PTR [rsp+0x5a8]
    650299ff:	xor    ecx,ecx
    65029a01:	mov    QWORD PTR [rsp+0x40],rax
    65029a06:	lea    rax,[rsp+0x30]
    65029a0b:	mov    DWORD PTR [rsp+0x30],0x40000015
    65029a13:	mov    QWORD PTR [rsp+0x20],rax
    65029a18:	lea    rax,[rsp+0xd0]
    65029a20:	mov    QWORD PTR [rsp+0x28],rax
    65029a25:	call   QWORD PTR [rip+0xa7cd]        # 0x650341f8
    65029a2b:	lea    rcx,[rsp+0x20]
    65029a30:	call   QWORD PTR [rip+0xa7ba]        # 0x650341f0
    65029a36:	mov    ecx,0x3
    65029a3b:	call   0x65022fe0
    65029a40:	int3   
    65029a41:	int3   
    65029a42:	int3   
    65029a43:	int3   
    65029a44:	int3   
    65029a45:	int3   
    65029a46:	int3   
    65029a47:	int3   
    65029a48:	int3   
    65029a49:	int3   
    65029a4a:	int3   
    65029a4b:	int3   
    65029a4c:	int3   
    65029a4d:	int3   
    65029a4e:	int3   
    65029a4f:	int3   
    65029a50:	mov    QWORD PTR [rsp+0x8],rbx
    65029a55:	push   rdi
    65029a56:	sub    rsp,0x30
    65029a5a:	test   rcx,rcx
    65029a5d:	mov    rdi,r8
    65029a60:	mov    rbx,rdx
    65029a63:	je     0x65029aa6
    65029a65:	xor    edx,edx
    65029a67:	mov    rax,0xffffffffffffffe0
    65029a6e:	div    rcx
    65029a71:	cmp    rax,rbx
    65029a74:	jae    0x65029aa6
    65029a76:	call   0x65020420
    65029a7b:	xor    r9d,r9d
    65029a7e:	xor    r8d,r8d
    65029a81:	xor    edx,edx
    65029a83:	xor    ecx,ecx
    65029a85:	mov    QWORD PTR [rsp+0x20],0x0
    65029a8e:	mov    DWORD PTR [rax],0xc
    65029a94:	call   0x6501d9c0
    65029a99:	xor    eax,eax
    65029a9b:	mov    rbx,QWORD PTR [rsp+0x40]
    65029aa0:	add    rsp,0x30
    65029aa4:	pop    rdi
    65029aa5:	ret    
    65029aa6:	imul   rbx,rcx
    65029aaa:	mov    eax,0x1
    65029aaf:	test   rbx,rbx
    65029ab2:	cmove  rbx,rax
    65029ab6:	xor    eax,eax
    65029ab8:	cmp    rbx,0xffffffffffffffe0
    65029abc:	ja     0x65029ad6
    65029abe:	mov    rcx,QWORD PTR [rip+0x1b7eb]        # 0x650452b0
    65029ac5:	lea    edx,[rax+0x8]
    65029ac8:	mov    r8,rbx
    65029acb:	call   QWORD PTR [rip+0xa6ef]        # 0x650341c0
    65029ad1:	test   rax,rax
    65029ad4:	jne    0x65029b0e
    65029ad6:	cmp    DWORD PTR [rip+0x1bc07],0x0        # 0x650456e4
    65029add:	je     0x65029b03
    65029adf:	mov    rcx,rbx
    65029ae2:	call   0x65020dd0
    65029ae7:	test   eax,eax
    65029ae9:	jne    0x65029ab6
    65029aeb:	test   rdi,rdi
    65029aee:	je     0x65029af6
    65029af0:	mov    DWORD PTR [rdi],0xc
    65029af6:	xor    eax,eax
    65029af8:	mov    rbx,QWORD PTR [rsp+0x40]
    65029afd:	add    rsp,0x30
    65029b01:	pop    rdi
    65029b02:	ret    
    65029b03:	test   rdi,rdi
    65029b06:	je     0x65029b0e
    65029b08:	mov    DWORD PTR [rdi],0xc
    65029b0e:	mov    rbx,QWORD PTR [rsp+0x40]
    65029b13:	add    rsp,0x30
    65029b17:	pop    rdi
    65029b18:	ret    
    65029b19:	int3   
    65029b1a:	int3   
    65029b1b:	int3   
    65029b1c:	int3   
    65029b1d:	int3   
    65029b1e:	int3   
    65029b1f:	int3   
    65029b20:	mov    QWORD PTR [rsp+0x8],rbx
    65029b25:	push   rdi
    65029b26:	sub    rsp,0x20
    65029b2a:	lea    rbx,[rip+0x1a37f]        # 0x65043eb0
    65029b31:	mov    edi,0xa
    65029b36:	mov    rcx,QWORD PTR [rbx]
    65029b39:	call   0x65020520
    65029b3e:	add    rbx,0x8
    65029b42:	sub    rdi,0x1
    65029b46:	mov    QWORD PTR [rbx-0x8],rax
    65029b4a:	jne    0x65029b36
    65029b4c:	mov    rbx,QWORD PTR [rsp+0x30]
    65029b51:	add    rsp,0x20
    65029b55:	pop    rdi
    65029b56:	ret    
    65029b57:	int3   
    65029b58:	int3   
    65029b59:	int3   
    65029b5a:	int3   
    65029b5b:	int3   
    65029b5c:	int3   
    65029b5d:	int3   
    65029b5e:	int3   
    65029b5f:	int3   
    65029b60:	mov    QWORD PTR [rip+0x1be29],rcx        # 0x65045990
    65029b67:	mov    QWORD PTR [rip+0x1be2a],rcx        # 0x65045998
    65029b6e:	mov    QWORD PTR [rip+0x1be2b],rcx        # 0x650459a0
    65029b75:	mov    QWORD PTR [rip+0x1be2c],rcx        # 0x650459a8
    65029b7c:	ret    
    65029b7d:	int3   
    65029b7e:	int3   
    65029b7f:	int3   
    65029b80:	mov    rcx,QWORD PTR [rip+0x1be19]        # 0x650459a0
    65029b87:	jmp    0x650206e0
    65029b8c:	int3   
    65029b8d:	int3   
    65029b8e:	int3   
    65029b8f:	int3   
    65029b90:	mov    QWORD PTR [rsp+0x10],rbx
    65029b95:	mov    QWORD PTR [rsp+0x18],rsi
    65029b9a:	push   rdi
    65029b9b:	push   r12
    65029b9d:	push   r13
    65029b9f:	push   r14
    65029ba1:	push   r15
    65029ba3:	sub    rsp,0x40
    65029ba7:	mov    ebx,ecx
    65029ba9:	xor    r14d,r14d
    65029bac:	mov    edi,r14d
    65029baf:	mov    DWORD PTR [rsp+0x70],r14d
    65029bb4:	mov    rsi,r14
    65029bb7:	lea    eax,[rcx-0x2]
    65029bba:	cmp    eax,0x14
    65029bbd:	ja     0x65029dae
    65029bc3:	cdqe   
    65029bc5:	lea    rcx,[rip+0xfffffffffffd6434]        # 0x65000000
    65029bcc:	movzx  eax,BYTE PTR [rcx+rax*1+0x29e04]
    65029bd4:	mov    edx,DWORD PTR [rcx+rax*4+0x29dec]
    65029bdb:	add    rdx,rcx
    65029bde:	jmp    rdx
    65029be0:	lea    r12,[rip+0x1bda9]        # 0x65045990
    65029be7:	mov    rcx,QWORD PTR [rip+0x1bda2]        # 0x65045990
    65029bee:	mov    edi,0x1
    65029bf3:	mov    DWORD PTR [rsp+0x70],edi
    65029bf7:	jmp    0x65029c42
    65029bf9:	lea    r12,[rip+0x1bd98]        # 0x65045998
    65029c00:	mov    rcx,QWORD PTR [rip+0x1bd91]        # 0x65045998
    65029c07:	mov    edi,0x1
    65029c0c:	mov    DWORD PTR [rsp+0x70],edi
    65029c10:	jmp    0x65029c42
    65029c12:	lea    r12,[rip+0x1bd87]        # 0x650459a0
    65029c19:	mov    rcx,QWORD PTR [rip+0x1bd80]        # 0x650459a0
    65029c20:	mov    edi,0x1
    65029c25:	mov    DWORD PTR [rsp+0x70],edi
    65029c29:	jmp    0x65029c42
    65029c2b:	lea    r12,[rip+0x1bd76]        # 0x650459a8
    65029c32:	mov    rcx,QWORD PTR [rip+0x1bd6f]        # 0x650459a8
    65029c39:	mov    edi,0x1
    65029c3e:	mov    DWORD PTR [rsp+0x70],edi
    65029c42:	call   0x650206e0
    65029c47:	mov    r13,rax
    65029c4a:	jmp    0x65029ca9
    65029c4c:	call   0x650209a0
    65029c51:	mov    rsi,rax
    65029c54:	test   rax,rax
    65029c57:	jne    0x65029c61
    65029c59:	or     eax,0xffffffff
    65029c5c:	jmp    0x65029dd0
    65029c61:	mov    rdx,QWORD PTR [rax+0xa0]
    65029c68:	mov    rcx,rdx
    65029c6b:	movsxd r8,DWORD PTR [rip+0x19e6a]        # 0x65043adc
    65029c72:	cmp    DWORD PTR [rcx+0x4],ebx
    65029c75:	je     0x65029c8a
    65029c77:	add    rcx,0x10
    65029c7b:	mov    rax,r8
    65029c7e:	shl    rax,0x4
    65029c82:	add    rax,rdx
    65029c85:	cmp    rcx,rax
    65029c88:	jb     0x65029c72
    65029c8a:	mov    rax,r8
    65029c8d:	shl    rax,0x4
    65029c91:	add    rax,rdx
    65029c94:	cmp    rcx,rax
    65029c97:	jae    0x65029c9e
    65029c99:	cmp    DWORD PTR [rcx+0x4],ebx
    65029c9c:	je     0x65029ca1
    65029c9e:	mov    rcx,r14
    65029ca1:	lea    r12,[rcx+0x8]
    65029ca5:	mov    r13,QWORD PTR [r12]
    65029ca9:	cmp    r13,0x1
    65029cad:	jne    0x65029cb6
    65029caf:	xor    eax,eax
    65029cb1:	jmp    0x65029dd0
    65029cb6:	test   r13,r13
    65029cb9:	jne    0x65029cc5
    65029cbb:	lea    ecx,[r13+0x3]
    65029cbf:	call   0x65022fe0
    65029cc4:	int3   
    65029cc5:	test   edi,edi
    65029cc7:	je     0x65029cd1
    65029cc9:	xor    ecx,ecx
    65029ccb:	call   0x65029930
    65029cd0:	nop
    65029cd1:	cmp    ebx,0x8
    65029cd4:	je     0x65029cec
    65029cd6:	cmp    ebx,0xb
    65029cd9:	je     0x65029cec
    65029cdb:	cmp    ebx,0x4
    65029cde:	je     0x65029cec
    65029ce0:	mov    r15,QWORD PTR [rsp+0x38]
    65029ce5:	mov    r14d,DWORD PTR [rsp+0x70]
    65029cea:	jmp    0x65029d1c
    65029cec:	mov    r15,QWORD PTR [rsi+0xa8]
    65029cf3:	mov    QWORD PTR [rsp+0x38],r15
    65029cf8:	mov    QWORD PTR [rsi+0xa8],r14
    65029cff:	cmp    ebx,0x8
    65029d02:	jne    0x65029d17
    65029d04:	mov    r14d,DWORD PTR [rsi+0xb0]
    65029d0b:	mov    DWORD PTR [rsi+0xb0],0x8c
    65029d15:	jmp    0x65029d1c
    65029d17:	mov    r14d,DWORD PTR [rsp+0x70]
    65029d1c:	cmp    ebx,0x8
    65029d1f:	jne    0x65029d5d
    65029d21:	mov    ecx,DWORD PTR [rip+0x19da9]        # 0x65043ad0
    65029d27:	mov    edx,ecx
    65029d29:	mov    DWORD PTR [rsp+0x30],ecx
    65029d2d:	xor    r8d,r8d
    65029d30:	mov    eax,DWORD PTR [rip+0x19d9e]        # 0x65043ad4
    65029d36:	add    ecx,eax
    65029d38:	cmp    edx,ecx
    65029d3a:	jge    0x65029d66
    65029d3c:	movsxd rcx,edx
    65029d3f:	add    rcx,rcx
    65029d42:	mov    rax,QWORD PTR [rsi+0xa0]
    65029d49:	mov    QWORD PTR [rax+rcx*8+0x8],r8
    65029d4e:	add    edx,0x1
    65029d51:	mov    DWORD PTR [rsp+0x30],edx
    65029d55:	mov    ecx,DWORD PTR [rip+0x19d75]        # 0x65043ad0
    65029d5b:	jmp    0x65029d30
    65029d5d:	call   0x650205f0
    65029d62:	mov    QWORD PTR [r12],rax
    65029d66:	test   edi,edi
    65029d68:	je     0x65029d71
    65029d6a:	xor    ecx,ecx
    65029d6c:	call   0x65029800
    65029d71:	cmp    ebx,0x8
    65029d74:	jne    0x65029d83
    65029d76:	mov    edx,DWORD PTR [rsi+0xb0]
    65029d7c:	mov    ecx,ebx
    65029d7e:	call   r13
    65029d81:	jmp    0x65029d88
    65029d83:	mov    ecx,ebx
    65029d85:	call   r13
    65029d88:	cmp    ebx,0x8
    65029d8b:	je     0x65029d97
    65029d8d:	cmp    ebx,0xb
    65029d90:	je     0x65029d97
    65029d92:	cmp    ebx,0x4
    65029d95:	jne    0x65029daa
    65029d97:	mov    QWORD PTR [rsi+0xa8],r15
    65029d9e:	cmp    ebx,0x8
    65029da1:	jne    0x65029daa
    65029da3:	mov    DWORD PTR [rsi+0xb0],r14d
    65029daa:	xor    eax,eax
    65029dac:	jmp    0x65029dd0
    65029dae:	call   0x65020420
    65029db3:	mov    DWORD PTR [rax],0x16
    65029db9:	mov    QWORD PTR [rsp+0x20],r14
    65029dbe:	xor    r9d,r9d
    65029dc1:	xor    r8d,r8d
    65029dc4:	xor    edx,edx
    65029dc6:	xor    ecx,ecx
    65029dc8:	call   0x6501d9c0
    65029dcd:	or     eax,0xffffffff
    65029dd0:	mov    rbx,QWORD PTR [rsp+0x78]
    65029dd5:	mov    rsi,QWORD PTR [rsp+0x80]
    65029ddd:	add    rsp,0x40
    65029de1:	pop    r15
    65029de3:	pop    r14
    65029de5:	pop    r13
    65029de7:	pop    r12
    65029de9:	pop    rdi
    65029dea:	ret    
    65029deb:	nop
    65029dec:	loopne 0x65029d89
    65029dee:	add    al,BYTE PTR [rax]
    65029df0:	rex.WR pushf 
    65029df2:	add    al,BYTE PTR [rax]
    65029df4:	adc    bl,BYTE PTR [rdx+rax*1+0x29c2b00]
    65029dfb:	add    cl,bh
    65029dfd:	fwait
    65029dfe:	add    al,BYTE PTR [rax]
    65029e00:	scas   al,BYTE PTR es:[rdi]
    65029e01:	popf   
    65029e02:	add    al,BYTE PTR [rax]
    65029e04:	add    BYTE PTR [rip+0x5020501],al        # 0x6a04a30b
    65029e0a:	add    DWORD PTR [rip+0x5050105],eax        # 0x6a079f15
    65029e10:	add    eax,0x5050503
    65029e15:	add    eax,0xcc020405
    65029e1a:	int3   
    65029e1b:	int3   
    65029e1c:	int3   
    65029e1d:	int3   
    65029e1e:	int3   
    65029e1f:	int3   
    65029e20:	rex push rbp
    65029e22:	sub    rsp,0x30
    65029e26:	mov    rbp,rdx
    65029e29:	cmp    DWORD PTR [rbp+0x70],0x0
    65029e2d:	je     0x65029e36
    65029e2f:	xor    ecx,ecx
    65029e31:	call   0x65029800
    65029e36:	add    rsp,0x30
    65029e3a:	pop    rbp
    65029e3b:	ret    
    65029e3c:	int3   
    65029e3d:	int3   
    65029e3e:	int3   
    65029e3f:	int3   
    65029e40:	mov    QWORD PTR [rip+0x1bb71],rcx        # 0x650459b8
    65029e47:	ret    
    65029e48:	int3   
    65029e49:	int3   
    65029e4a:	int3   
    65029e4b:	int3   
    65029e4c:	int3   
    65029e4d:	int3   
    65029e4e:	int3   
    65029e4f:	int3   
    65029e50:	mov    QWORD PTR [rip+0x1bb71],rcx        # 0x650459c8
    65029e57:	ret    
    65029e58:	int3   
    65029e59:	int3   
    65029e5a:	int3   
    65029e5b:	int3   
    65029e5c:	int3   
    65029e5d:	int3   
    65029e5e:	int3   
    65029e5f:	int3   
    65029e60:	mov    QWORD PTR [rip+0x1bb69],rcx        # 0x650459d0
    65029e67:	ret    
    65029e68:	int3   
    65029e69:	int3   
    65029e6a:	int3   
    65029e6b:	int3   
    65029e6c:	int3   
    65029e6d:	int3   
    65029e6e:	int3   
    65029e6f:	int3   
    65029e70:	sub    rsp,0x28
    65029e74:	call   QWORD PTR [rip+0xa22e]        # 0x650340a8
    65029e7a:	mov    eax,0x1
    65029e7f:	add    rsp,0x28
    65029e83:	ret    
    65029e84:	int3   
    65029e85:	int3   
    65029e86:	int3   
    65029e87:	int3   
    65029e88:	int3   
    65029e89:	int3   
    65029e8a:	int3   
    65029e8b:	int3   
    65029e8c:	int3   
    65029e8d:	int3   
    65029e8e:	int3   
    65029e8f:	int3   
    65029e90:	mov    QWORD PTR [rsp+0x8],rbx
    65029e95:	mov    QWORD PTR [rsp+0x10],rsi
    65029e9a:	mov    QWORD PTR [rsp+0x20],rdi
    65029e9f:	push   r12
    65029ea1:	sub    rsp,0x40
    65029ea5:	mov    esi,edx
    65029ea7:	mov    r12,rcx
    65029eaa:	xor    edi,edi
    65029eac:	mov    DWORD PTR [rsp+0x60],edi
    65029eb0:	mov    rcx,QWORD PTR [rip+0x1bb19]        # 0x650459d0
    65029eb7:	call   0x650206e0
    65029ebc:	mov    rbx,rax
    65029ebf:	test   rax,rax
    65029ec2:	jne    0x65029f3f
    65029ec4:	lea    rcx,[rsp+0x60]
    65029ec9:	call   0x65022d30
    65029ece:	test   eax,eax
    65029ed0:	je     0x65029ee6
    65029ed2:	mov    QWORD PTR [rsp+0x20],rdi
    65029ed7:	xor    r9d,r9d
    65029eda:	xor    r8d,r8d
    65029edd:	xor    edx,edx
    65029edf:	xor    ecx,ecx
    65029ee1:	call   0x6501d920
    65029ee6:	cmp    DWORD PTR [rsp+0x60],0x1
    65029eeb:	jne    0x65029ef6
    65029eed:	lea    rbx,[rip+0xffffffffffffff7c]        # 0x65029e70
    65029ef4:	jmp    0x65029f30
    65029ef6:	lea    rcx,[rip+0xc59b]        # 0x65036498
    65029efd:	call   QWORD PTR [rip+0xa33d]        # 0x65034240
    65029f03:	test   rax,rax
    65029f06:	je     0x65029f29
    65029f08:	lea    rdx,[rip+0xc561]        # 0x65036470
    65029f0f:	mov    rcx,rax
    65029f12:	call   QWORD PTR [rip+0xa1f0]        # 0x65034108
    65029f18:	mov    rbx,rax
    65029f1b:	test   rax,rax
    65029f1e:	jne    0x65029f30
    65029f20:	lea    rbx,[rip+0xffffffffffffff49]        # 0x65029e70
    65029f27:	jmp    0x65029f30
    65029f29:	lea    rbx,[rip+0xffffffffffffff40]        # 0x65029e70
    65029f30:	mov    rcx,rbx
    65029f33:	call   0x65020520
    65029f38:	mov    QWORD PTR [rip+0x1ba91],rax        # 0x650459d0
    65029f3f:	mov    edx,esi
    65029f41:	mov    rcx,r12
    65029f44:	call   rbx
    65029f46:	mov    edi,eax
    65029f48:	mov    DWORD PTR [rsp+0x30],eax
    65029f4c:	jmp    0x65029f66
    65029f4e:	cmp    eax,0xc0000017
    65029f53:	jne    0x65029f60
    65029f55:	mov    ecx,0x8
    65029f5a:	call   QWORD PTR [rip+0xa1b0]        # 0x65034110
    65029f60:	xor    edi,edi
    65029f62:	mov    DWORD PTR [rsp+0x30],edi
    65029f66:	mov    eax,edi
    65029f68:	mov    rbx,QWORD PTR [rsp+0x50]
    65029f6d:	mov    rsi,QWORD PTR [rsp+0x58]
    65029f72:	mov    rdi,QWORD PTR [rsp+0x68]
    65029f77:	add    rsp,0x40
    65029f7b:	pop    r12
    65029f7d:	ret    
    65029f7e:	int3   
    65029f7f:	int3   
    65029f80:	rex push rbp
    65029f82:	push   rdi
    65029f83:	sub    rsp,0x38
    65029f87:	mov    rbp,rdx
    65029f8a:	mov    rax,QWORD PTR [rcx]
    65029f8d:	xor    edi,edi
    65029f8f:	cmp    DWORD PTR [rax],0xc0000017
    65029f95:	sete   dil
    65029f99:	mov    eax,edi
    65029f9b:	add    rsp,0x38
    65029f9f:	pop    rdi
    65029fa0:	pop    rbp
    65029fa1:	ret    
    65029fa2:	int3   
    65029fa3:	int3   
    65029fa4:	int3   
    65029fa5:	int3   
    65029fa6:	int3   
    65029fa7:	int3   
    65029fa8:	int3   
    65029fa9:	int3   
    65029faa:	int3   
    65029fab:	int3   
    65029fac:	int3   
    65029fad:	int3   
    65029fae:	int3   
    65029faf:	int3   
    65029fb0:	mov    DWORD PTR [rsp+0x20],r9d
    65029fb5:	push   rbp
    65029fb6:	push   r12
    65029fb8:	push   r13
    65029fba:	push   r14
    65029fbc:	push   r15
    65029fbe:	sub    rsp,0x40
    65029fc2:	lea    rbp,[rsp+0x30]
    65029fc7:	mov    QWORD PTR [rbp+0x40],rbx
    65029fcb:	mov    QWORD PTR [rbp+0x48],rsi
    65029fcf:	mov    QWORD PTR [rbp+0x50],rdi
    65029fd3:	mov    rax,QWORD PTR [rip+0x19146]        # 0x65043120
    65029fda:	xor    rax,rbp
    65029fdd:	mov    QWORD PTR [rbp+0x8],rax
    65029fe1:	mov    eax,DWORD PTR [rip+0x1b9f1]        # 0x650459d8
    65029fe7:	mov    r14,r8
    65029fea:	mov    r15d,edx
    65029fed:	test   eax,eax
    65029fef:	mov    r12,rcx
    65029ff2:	jne    0x6502a06e
    65029ff4:	mov    r8d,0x1
    65029ffa:	lea    r9,[rbp+0x0]
    65029ffe:	lea    rdx,[rip+0xd04f]        # 0x65037054
    6502a005:	mov    ecx,r8d
    6502a008:	call   QWORD PTR [rip+0xa14a]        # 0x65034158
    6502a00e:	test   eax,eax
    6502a010:	je     0x6502a01e
    6502a012:	mov    DWORD PTR [rip+0x1b9bc],0x1        # 0x650459d8
    6502a01c:	jmp    0x6502a07c
    6502a01e:	call   QWORD PTR [rip+0xa044]        # 0x65034068
    6502a024:	cmp    eax,0x78
    6502a027:	jne    0x6502a068
    6502a029:	mov    DWORD PTR [rip+0x1b9a5],0x2        # 0x650459d8
    6502a033:	mov    esi,DWORD PTR [rbp+0x70]
    6502a036:	xor    edi,edi
    6502a038:	test   esi,esi
    6502a03a:	jne    0x6502a043
    6502a03c:	mov    rax,QWORD PTR [r12]
    6502a040:	mov    esi,DWORD PTR [rax+0x14]
    6502a043:	mov    ebx,DWORD PTR [rbp+0x68]
    6502a046:	test   ebx,ebx
    6502a048:	jne    0x6502a051
    6502a04a:	mov    rax,QWORD PTR [r12]
    6502a04e:	mov    ebx,DWORD PTR [rax+0x4]
    6502a051:	mov    ecx,esi
    6502a053:	call   0x6502ce60
    6502a058:	cmp    eax,0xffffffff
    6502a05b:	jne    0x6502a18a
    6502a061:	xor    eax,eax
    6502a063:	jmp    0x6502a1e2
    6502a068:	mov    eax,DWORD PTR [rip+0x1b96a]        # 0x650459d8
    6502a06e:	cmp    eax,0x2
    6502a071:	je     0x6502a033
    6502a073:	test   eax,eax
    6502a075:	je     0x6502a033
    6502a077:	cmp    eax,0x1
    6502a07a:	jne    0x6502a061
    6502a07c:	mov    esi,DWORD PTR [rbp+0x68]
    6502a07f:	xor    edi,edi
    6502a081:	test   esi,esi
    6502a083:	jne    0x6502a08c
    6502a085:	mov    rax,QWORD PTR [r12]
    6502a089:	mov    esi,DWORD PTR [rax+0x4]
    6502a08c:	cmp    DWORD PTR [rbp+0x78],edi
    6502a08f:	mov    r9d,DWORD PTR [rbp+0x58]
    6502a093:	mov    edx,0x1
    6502a098:	mov    eax,0x9
    6502a09d:	mov    r8,r14
    6502a0a0:	mov    ecx,esi
    6502a0a2:	cmovne edx,eax
    6502a0a5:	mov    DWORD PTR [rsp+0x28],edi
    6502a0a9:	mov    QWORD PTR [rsp+0x20],rdi
    6502a0ae:	call   QWORD PTR [rip+0x9f74]        # 0x65034028
    6502a0b4:	test   eax,eax
    6502a0b6:	movsxd r12,eax
    6502a0b9:	je     0x6502a061
    6502a0bb:	jle    0x6502a061
    6502a0bd:	movabs rax,0x7ffffffffffffff0
    6502a0c7:	cmp    r12,rax
    6502a0ca:	ja     0x6502a061
    6502a0cc:	lea    rcx,[r12+r12*1+0x10]
    6502a0d1:	cmp    rcx,0x400
    6502a0d8:	ja     0x6502a10f
    6502a0da:	lea    rax,[rcx+0xf]
    6502a0de:	cmp    rax,rcx
    6502a0e1:	ja     0x6502a0ed
    6502a0e3:	movabs rax,0xffffffffffffff0
    6502a0ed:	and    rax,0xfffffffffffffff0
    6502a0f1:	call   0x65033230
    6502a0f6:	sub    rsp,rax
    6502a0f9:	lea    rbx,[rsp+0x30]
    6502a0fe:	test   rbx,rbx
    6502a101:	je     0x6502a061
    6502a107:	mov    DWORD PTR [rbx],0xcccc
    6502a10d:	jmp    0x6502a122
    6502a10f:	call   0x6501fc50
    6502a114:	test   rax,rax
    6502a117:	mov    rbx,rax
    6502a11a:	je     0x6502a126
    6502a11c:	mov    DWORD PTR [rax],0xdddd
    6502a122:	add    rbx,0x10
    6502a126:	test   rbx,rbx
    6502a129:	je     0x6502a061
    6502a12f:	lea    r8,[r12+r12*1]
    6502a133:	xor    edx,edx
    6502a135:	mov    rcx,rbx
    6502a138:	call   0x6501efa0
    6502a13d:	mov    r9d,DWORD PTR [rbp+0x58]
    6502a141:	mov    r8,r14
    6502a144:	mov    edx,0x1
    6502a149:	mov    ecx,esi
    6502a14b:	mov    DWORD PTR [rsp+0x28],r12d
    6502a150:	mov    QWORD PTR [rsp+0x20],rbx
    6502a155:	call   QWORD PTR [rip+0x9ecd]        # 0x65034028
    6502a15b:	test   eax,eax
    6502a15d:	je     0x6502a174
    6502a15f:	mov    r9,QWORD PTR [rbp+0x60]
    6502a163:	mov    r8d,eax
    6502a166:	mov    rdx,rbx
    6502a169:	mov    ecx,r15d
    6502a16c:	call   QWORD PTR [rip+0x9fe6]        # 0x65034158
    6502a172:	mov    edi,eax
    6502a174:	cmp    DWORD PTR [rbx-0x10],0xdddd
    6502a17b:	lea    rcx,[rbx-0x10]
    6502a17f:	jne    0x6502a186
    6502a181:	call   0x6501fc00
    6502a186:	mov    eax,edi
    6502a188:	jmp    0x6502a1e2
    6502a18a:	cmp    eax,ebx
    6502a18c:	je     0x6502a1b6
    6502a18e:	lea    r9,[rbp+0x58]
    6502a192:	mov    r8,r14
    6502a195:	mov    edx,eax
    6502a197:	mov    ecx,ebx
    6502a199:	mov    DWORD PTR [rsp+0x28],edi
    6502a19d:	mov    QWORD PTR [rsp+0x20],rdi
    6502a1a2:	call   0x6502ced0
    6502a1a7:	test   rax,rax
    6502a1aa:	mov    rdi,rax
    6502a1ad:	je     0x6502a061
    6502a1b3:	mov    r14,rax
    6502a1b6:	mov    rax,QWORD PTR [rbp+0x60]
    6502a1ba:	mov    r9d,DWORD PTR [rbp+0x58]
    6502a1be:	mov    r8,r14
    6502a1c1:	mov    edx,r15d
    6502a1c4:	mov    ecx,esi
    6502a1c6:	mov    QWORD PTR [rsp+0x20],rax
    6502a1cb:	call   QWORD PTR [rip+0x9f8f]        # 0x65034160
    6502a1d1:	test   rdi,rdi
    6502a1d4:	mov    ebx,eax
    6502a1d6:	je     0x6502a1e0
    6502a1d8:	mov    rcx,rdi
    6502a1db:	call   0x6501fc00
    6502a1e0:	mov    eax,ebx
    6502a1e2:	mov    rcx,QWORD PTR [rbp+0x8]
    6502a1e6:	xor    rcx,rbp
    6502a1e9:	call   0x6501e650
    6502a1ee:	mov    rbx,QWORD PTR [rbp+0x40]
    6502a1f2:	mov    rsi,QWORD PTR [rbp+0x48]
    6502a1f6:	mov    rdi,QWORD PTR [rbp+0x50]
    6502a1fa:	lea    rsp,[rbp+0x10]
    6502a1fe:	pop    r15
    6502a200:	pop    r14
    6502a202:	pop    r13
    6502a204:	pop    r12
    6502a206:	pop    rbp
    6502a207:	ret    
    6502a208:	int3   
    6502a209:	int3   
    6502a20a:	int3   
    6502a20b:	int3   
    6502a20c:	int3   
    6502a20d:	int3   
    6502a20e:	int3   
    6502a20f:	int3   
    6502a210:	mov    rax,rsp
    6502a213:	push   rbx
    6502a214:	sub    rsp,0x70
    6502a218:	mov    QWORD PTR [rax+0x8],rbp
    6502a21c:	mov    QWORD PTR [rax+0x18],rdi
    6502a220:	xor    dil,dil
    6502a223:	test   rcx,rcx
    6502a226:	mov    QWORD PTR [rax-0x10],r12
    6502a22a:	mov    QWORD PTR [rax-0x18],r13
    6502a22e:	mov    BYTE PTR [rax-0x20],dil
    6502a232:	mov    ebp,r9d
    6502a235:	mov    r12,r8
    6502a238:	mov    r13d,edx
    6502a23b:	jne    0x6502a2ce
    6502a241:	mov    QWORD PTR [rax+0x10],rsi
    6502a245:	call   0x65020a30
    6502a24a:	mov    rcx,QWORD PTR [rax+0xc0]
    6502a251:	mov    rsi,QWORD PTR [rax+0xb8]
    6502a258:	mov    rbx,rax
    6502a25b:	cmp    rcx,QWORD PTR [rip+0x1973e]        # 0x650439a0
    6502a262:	mov    QWORD PTR [rsp+0x50],rax
    6502a267:	mov    QWORD PTR [rsp+0x40],rcx
    6502a26c:	mov    QWORD PTR [rsp+0x48],rsi
    6502a271:	je     0x6502a28b
    6502a273:	mov    ecx,DWORD PTR [rax+0xc8]
    6502a279:	test   DWORD PTR [rip+0x195a9],ecx        # 0x65043828
    6502a27f:	jne    0x6502a28b
    6502a281:	call   0x65023e90
    6502a286:	mov    QWORD PTR [rsp+0x40],rax
    6502a28b:	cmp    rsi,QWORD PTR [rip+0x1948e]        # 0x65043720
    6502a292:	mov    rsi,QWORD PTR [rsp+0x88]
    6502a29a:	je     0x6502a2b4
    6502a29c:	mov    eax,DWORD PTR [rbx+0xc8]
    6502a2a2:	test   DWORD PTR [rip+0x19580],eax        # 0x65043828
    6502a2a8:	jne    0x6502a2b4
    6502a2aa:	call   0x65023340
    6502a2af:	mov    QWORD PTR [rsp+0x48],rax
    6502a2b4:	test   BYTE PTR [rbx+0xc8],0x2
    6502a2bb:	jne    0x6502a2eb
    6502a2bd:	or     DWORD PTR [rbx+0xc8],0x2
    6502a2c4:	mov    dil,0x1
    6502a2c7:	mov    BYTE PTR [rsp+0x58],dil
    6502a2cc:	jmp    0x6502a2eb
    6502a2ce:	mov    rax,QWORD PTR [rcx]
    6502a2d1:	lea    rdx,[rsp+0x40]
    6502a2d6:	mov    QWORD PTR [rdx],rax
    6502a2d9:	mov    rax,QWORD PTR [rcx+0x8]
    6502a2dd:	mov    QWORD PTR [rdx+0x8],rax
    6502a2e1:	movzx  edi,BYTE PTR [rsp+0x58]
    6502a2e6:	mov    rbx,QWORD PTR [rsp+0x50]
    6502a2eb:	mov    eax,DWORD PTR [rsp+0xb8]
    6502a2f2:	lea    rcx,[rsp+0x40]
    6502a2f7:	mov    r9d,ebp
    6502a2fa:	mov    DWORD PTR [rsp+0x38],eax
    6502a2fe:	mov    eax,DWORD PTR [rsp+0xb0]
    6502a305:	mov    r8,r12
    6502a308:	mov    DWORD PTR [rsp+0x30],eax
    6502a30c:	mov    eax,DWORD PTR [rsp+0xa8]
    6502a313:	mov    edx,r13d
    6502a316:	mov    DWORD PTR [rsp+0x28],eax
    6502a31a:	mov    rax,QWORD PTR [rsp+0xa0]
    6502a322:	mov    QWORD PTR [rsp+0x20],rax
    6502a327:	call   0x65029fb0
    6502a32c:	mov    r13,QWORD PTR [rsp+0x60]
    6502a331:	mov    r12,QWORD PTR [rsp+0x68]
    6502a336:	mov    rbp,QWORD PTR [rsp+0x80]
    6502a33e:	test   dil,dil
    6502a341:	mov    rdi,QWORD PTR [rsp+0x90]
    6502a349:	je     0x6502a352
    6502a34b:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502a352:	add    rsp,0x70
    6502a356:	pop    rbx
    6502a357:	ret    
    6502a358:	int3   
    6502a359:	int3   
    6502a35a:	int3   
    6502a35b:	int3   
    6502a35c:	int3   
    6502a35d:	int3   
    6502a35e:	int3   
    6502a35f:	int3   
    6502a360:	test   rcx,rcx
    6502a363:	je     0x6502a549
    6502a369:	push   rbx
    6502a36a:	sub    rsp,0x20
    6502a36e:	mov    rbx,rcx
    6502a371:	mov    rcx,QWORD PTR [rcx+0x8]
    6502a375:	call   0x6501fc00
    6502a37a:	mov    rcx,QWORD PTR [rbx+0x10]
    6502a37e:	call   0x6501fc00
    6502a383:	mov    rcx,QWORD PTR [rbx+0x18]
    6502a387:	call   0x6501fc00
    6502a38c:	mov    rcx,QWORD PTR [rbx+0x20]
    6502a390:	call   0x6501fc00
    6502a395:	mov    rcx,QWORD PTR [rbx+0x28]
    6502a399:	call   0x6501fc00
    6502a39e:	mov    rcx,QWORD PTR [rbx+0x30]
    6502a3a2:	call   0x6501fc00
    6502a3a7:	mov    rcx,QWORD PTR [rbx]
    6502a3aa:	call   0x6501fc00
    6502a3af:	mov    rcx,QWORD PTR [rbx+0x40]
    6502a3b3:	call   0x6501fc00
    6502a3b8:	mov    rcx,QWORD PTR [rbx+0x48]
    6502a3bc:	call   0x6501fc00
    6502a3c1:	mov    rcx,QWORD PTR [rbx+0x50]
    6502a3c5:	call   0x6501fc00
    6502a3ca:	mov    rcx,QWORD PTR [rbx+0x58]
    6502a3ce:	call   0x6501fc00
    6502a3d3:	mov    rcx,QWORD PTR [rbx+0x60]
    6502a3d7:	call   0x6501fc00
    6502a3dc:	mov    rcx,QWORD PTR [rbx+0x68]
    6502a3e0:	call   0x6501fc00
    6502a3e5:	mov    rcx,QWORD PTR [rbx+0x38]
    6502a3e9:	call   0x6501fc00
    6502a3ee:	mov    rcx,QWORD PTR [rbx+0x70]
    6502a3f2:	call   0x6501fc00
    6502a3f7:	mov    rcx,QWORD PTR [rbx+0x78]
    6502a3fb:	call   0x6501fc00
    6502a400:	mov    rcx,QWORD PTR [rbx+0x80]
    6502a407:	call   0x6501fc00
    6502a40c:	mov    rcx,QWORD PTR [rbx+0x88]
    6502a413:	call   0x6501fc00
    6502a418:	mov    rcx,QWORD PTR [rbx+0x90]
    6502a41f:	call   0x6501fc00
    6502a424:	mov    rcx,QWORD PTR [rbx+0x98]
    6502a42b:	call   0x6501fc00
    6502a430:	mov    rcx,QWORD PTR [rbx+0xa0]
    6502a437:	call   0x6501fc00
    6502a43c:	mov    rcx,QWORD PTR [rbx+0xa8]
    6502a443:	call   0x6501fc00
    6502a448:	mov    rcx,QWORD PTR [rbx+0xb0]
    6502a44f:	call   0x6501fc00
    6502a454:	mov    rcx,QWORD PTR [rbx+0xb8]
    6502a45b:	call   0x6501fc00
    6502a460:	mov    rcx,QWORD PTR [rbx+0xc0]
    6502a467:	call   0x6501fc00
    6502a46c:	mov    rcx,QWORD PTR [rbx+0xc8]
    6502a473:	call   0x6501fc00
    6502a478:	mov    rcx,QWORD PTR [rbx+0xd0]
    6502a47f:	call   0x6501fc00
    6502a484:	mov    rcx,QWORD PTR [rbx+0xd8]
    6502a48b:	call   0x6501fc00
    6502a490:	mov    rcx,QWORD PTR [rbx+0xe0]
    6502a497:	call   0x6501fc00
    6502a49c:	mov    rcx,QWORD PTR [rbx+0xe8]
    6502a4a3:	call   0x6501fc00
    6502a4a8:	mov    rcx,QWORD PTR [rbx+0xf0]
    6502a4af:	call   0x6501fc00
    6502a4b4:	mov    rcx,QWORD PTR [rbx+0xf8]
    6502a4bb:	call   0x6501fc00
    6502a4c0:	mov    rcx,QWORD PTR [rbx+0x100]
    6502a4c7:	call   0x6501fc00
    6502a4cc:	mov    rcx,QWORD PTR [rbx+0x108]
    6502a4d3:	call   0x6501fc00
    6502a4d8:	mov    rcx,QWORD PTR [rbx+0x110]
    6502a4df:	call   0x6501fc00
    6502a4e4:	mov    rcx,QWORD PTR [rbx+0x118]
    6502a4eb:	call   0x6501fc00
    6502a4f0:	mov    rcx,QWORD PTR [rbx+0x120]
    6502a4f7:	call   0x6501fc00
    6502a4fc:	mov    rcx,QWORD PTR [rbx+0x128]
    6502a503:	call   0x6501fc00
    6502a508:	mov    rcx,QWORD PTR [rbx+0x130]
    6502a50f:	call   0x6501fc00
    6502a514:	mov    rcx,QWORD PTR [rbx+0x138]
    6502a51b:	call   0x6501fc00
    6502a520:	mov    rcx,QWORD PTR [rbx+0x140]
    6502a527:	call   0x6501fc00
    6502a52c:	mov    rcx,QWORD PTR [rbx+0x148]
    6502a533:	call   0x6501fc00
    6502a538:	mov    rcx,QWORD PTR [rbx+0x150]
    6502a53f:	call   0x6501fc00
    6502a544:	add    rsp,0x20
    6502a548:	pop    rbx
    6502a549:	ret    0x0
    6502a54c:	int3   
    6502a54d:	int3   
    6502a54e:	int3   
    6502a54f:	int3   
    6502a550:	test   rcx,rcx
    6502a553:	je     0x6502a597
    6502a555:	push   rbx
    6502a556:	sub    rsp,0x20
    6502a55a:	mov    rbx,rcx
    6502a55d:	mov    rcx,QWORD PTR [rcx]
    6502a560:	cmp    rcx,QWORD PTR [rip+0x19b29]        # 0x65044090
    6502a567:	je     0x6502a56e
    6502a569:	call   0x6501fc00
    6502a56e:	mov    rcx,QWORD PTR [rbx+0x8]
    6502a572:	cmp    rcx,QWORD PTR [rip+0x19b1f]        # 0x65044098
    6502a579:	je     0x6502a580
    6502a57b:	call   0x6501fc00
    6502a580:	mov    rcx,QWORD PTR [rbx+0x10]
    6502a584:	cmp    rcx,QWORD PTR [rip+0x19b15]        # 0x650440a0
    6502a58b:	je     0x6502a592
    6502a58d:	call   0x6501fc00
    6502a592:	add    rsp,0x20
    6502a596:	pop    rbx
    6502a597:	ret    0x0
    6502a59a:	int3   
    6502a59b:	int3   
    6502a59c:	int3   
    6502a59d:	int3   
    6502a59e:	int3   
    6502a59f:	int3   
    6502a5a0:	test   rcx,rcx
    6502a5a3:	je     0x6502a634
    6502a5a9:	push   rbx
    6502a5aa:	sub    rsp,0x20
    6502a5ae:	mov    rbx,rcx
    6502a5b1:	mov    rcx,QWORD PTR [rcx+0x18]
    6502a5b5:	cmp    rcx,QWORD PTR [rip+0x19aec]        # 0x650440a8
    6502a5bc:	je     0x6502a5c3
    6502a5be:	call   0x6501fc00
    6502a5c3:	mov    rcx,QWORD PTR [rbx+0x20]
    6502a5c7:	cmp    rcx,QWORD PTR [rip+0x19ae2]        # 0x650440b0
    6502a5ce:	je     0x6502a5d5
    6502a5d0:	call   0x6501fc00
    6502a5d5:	mov    rcx,QWORD PTR [rbx+0x28]
    6502a5d9:	cmp    rcx,QWORD PTR [rip+0x19ad8]        # 0x650440b8
    6502a5e0:	je     0x6502a5e7
    6502a5e2:	call   0x6501fc00
    6502a5e7:	mov    rcx,QWORD PTR [rbx+0x30]
    6502a5eb:	cmp    rcx,QWORD PTR [rip+0x19ace]        # 0x650440c0
    6502a5f2:	je     0x6502a5f9
    6502a5f4:	call   0x6501fc00
    6502a5f9:	mov    rcx,QWORD PTR [rbx+0x38]
    6502a5fd:	cmp    rcx,QWORD PTR [rip+0x19ac4]        # 0x650440c8
    6502a604:	je     0x6502a60b
    6502a606:	call   0x6501fc00
    6502a60b:	mov    rcx,QWORD PTR [rbx+0x40]
    6502a60f:	cmp    rcx,QWORD PTR [rip+0x19aba]        # 0x650440d0
    6502a616:	je     0x6502a61d
    6502a618:	call   0x6501fc00
    6502a61d:	mov    rcx,QWORD PTR [rbx+0x48]
    6502a621:	cmp    rcx,QWORD PTR [rip+0x19ab0]        # 0x650440d8
    6502a628:	je     0x6502a62f
    6502a62a:	call   0x6501fc00
    6502a62f:	add    rsp,0x20
    6502a633:	pop    rbx
    6502a634:	ret    0x0
    6502a637:	int3   
    6502a638:	int3   
    6502a639:	int3   
    6502a63a:	int3   
    6502a63b:	int3   
    6502a63c:	int3   
    6502a63d:	int3   
    6502a63e:	int3   
    6502a63f:	int3   
    6502a640:	sub    rsp,0x38
    6502a644:	test   rcx,rcx
    6502a647:	mov    r9,rcx
    6502a64a:	je     0x6502a659
    6502a64c:	test   rdx,rdx
    6502a64f:	je     0x6502a659
    6502a651:	test   r8,r8
    6502a654:	jne    0x6502a686
    6502a656:	mov    BYTE PTR [rcx],r8b
    6502a659:	call   0x65020420
    6502a65e:	xor    r9d,r9d
    6502a661:	xor    r8d,r8d
    6502a664:	xor    edx,edx
    6502a666:	xor    ecx,ecx
    6502a668:	mov    QWORD PTR [rsp+0x20],0x0
    6502a671:	mov    DWORD PTR [rax],0x16
    6502a677:	call   0x6501d9c0
    6502a67c:	mov    eax,0x16
    6502a681:	add    rsp,0x38
    6502a685:	ret    
    6502a686:	cmp    BYTE PTR [rcx],0x0
    6502a689:	je     0x6502a695
    6502a68b:	add    rcx,0x1
    6502a68f:	sub    rdx,0x1
    6502a693:	jne    0x6502a686
    6502a695:	test   rdx,rdx
    6502a698:	jne    0x6502a6a0
    6502a69a:	mov    BYTE PTR [r9],dl
    6502a69d:	jmp    0x6502a659
    6502a69f:	nop
    6502a6a0:	movzx  eax,BYTE PTR [r8]
    6502a6a4:	add    rcx,0x1
    6502a6a8:	add    r8,0x1
    6502a6ac:	test   al,al
    6502a6ae:	mov    BYTE PTR [rcx-0x1],al
    6502a6b1:	je     0x6502a6b9
    6502a6b3:	sub    rdx,0x1
    6502a6b7:	jne    0x6502a6a0
    6502a6b9:	test   rdx,rdx
    6502a6bc:	jne    0x6502a6ee
    6502a6be:	mov    BYTE PTR [r9],dl
    6502a6c1:	call   0x65020420
    6502a6c6:	xor    r9d,r9d
    6502a6c9:	xor    r8d,r8d
    6502a6cc:	xor    edx,edx
    6502a6ce:	xor    ecx,ecx
    6502a6d0:	mov    DWORD PTR [rax],0x22
    6502a6d6:	mov    QWORD PTR [rsp+0x20],0x0
    6502a6df:	call   0x6501d9c0
    6502a6e4:	mov    eax,0x22
    6502a6e9:	add    rsp,0x38
    6502a6ed:	ret    
    6502a6ee:	xor    eax,eax
    6502a6f0:	add    rsp,0x38
    6502a6f4:	ret    
    6502a6f5:	int3   
    6502a6f6:	int3   
    6502a6f7:	int3   
    6502a6f8:	int3   
    6502a6f9:	int3   
    6502a6fa:	int3   
    6502a6fb:	int3   
    6502a6fc:	int3   
    6502a6fd:	int3   
    6502a6fe:	int3   
    6502a6ff:	int3   
    6502a700:	sub    rsp,0x38
    6502a704:	test   r9,r9
    6502a707:	mov    r11,rdx
    6502a70a:	mov    r10,rcx
    6502a70d:	jne    0x6502a720
    6502a70f:	test   rcx,rcx
    6502a712:	jne    0x6502a725
    6502a714:	test   rdx,rdx
    6502a717:	jne    0x6502a741
    6502a719:	xor    eax,eax
    6502a71b:	add    rsp,0x38
    6502a71f:	ret    
    6502a720:	test   rcx,rcx
    6502a723:	je     0x6502a741
    6502a725:	test   rdx,rdx
    6502a728:	je     0x6502a741
    6502a72a:	test   r9,r9
    6502a72d:	jne    0x6502a739
    6502a72f:	mov    BYTE PTR [rcx],r9b
    6502a732:	xor    eax,eax
    6502a734:	add    rsp,0x38
    6502a738:	ret    
    6502a739:	test   r8,r8
    6502a73c:	jne    0x6502a76e
    6502a73e:	mov    BYTE PTR [rcx],r8b
    6502a741:	call   0x65020420
    6502a746:	xor    r9d,r9d
    6502a749:	xor    r8d,r8d
    6502a74c:	xor    edx,edx
    6502a74e:	xor    ecx,ecx
    6502a750:	mov    QWORD PTR [rsp+0x20],0x0
    6502a759:	mov    DWORD PTR [rax],0x16
    6502a75f:	call   0x6501d9c0
    6502a764:	mov    eax,0x16
    6502a769:	add    rsp,0x38
    6502a76d:	ret    
    6502a76e:	cmp    r9,0xffffffffffffffff
    6502a772:	mov    rdx,rcx
    6502a775:	mov    rcx,r11
    6502a778:	jne    0x6502a7a0
    6502a77a:	data16 xchg ax,ax
    6502a77d:	data16 xchg ax,ax
    6502a780:	movzx  eax,BYTE PTR [r8]
    6502a784:	add    rdx,0x1
    6502a788:	add    r8,0x1
    6502a78c:	test   al,al
    6502a78e:	mov    BYTE PTR [rdx-0x1],al
    6502a791:	je     0x6502a7c7
    6502a793:	sub    rcx,0x1
    6502a797:	jne    0x6502a780
    6502a799:	jmp    0x6502a7c7
    6502a79b:	xchg   ax,ax
    6502a79d:	data16 xchg ax,ax
    6502a7a0:	movzx  eax,BYTE PTR [r8]
    6502a7a4:	add    rdx,0x1
    6502a7a8:	add    r8,0x1
    6502a7ac:	test   al,al
    6502a7ae:	mov    BYTE PTR [rdx-0x1],al
    6502a7b1:	je     0x6502a7bf
    6502a7b3:	sub    rcx,0x1
    6502a7b7:	je     0x6502a7bf
    6502a7b9:	sub    r9,0x1
    6502a7bd:	jne    0x6502a7a0
    6502a7bf:	test   r9,r9
    6502a7c2:	jne    0x6502a7c7
    6502a7c4:	mov    BYTE PTR [rdx],r9b
    6502a7c7:	test   rcx,rcx
    6502a7ca:	jne    0x6502a719
    6502a7d0:	cmp    r9,0xffffffffffffffff
    6502a7d4:	jne    0x6502a7e3
    6502a7d6:	mov    BYTE PTR [r10+r11*1-0x1],cl
    6502a7db:	lea    eax,[rcx+0x50]
    6502a7de:	add    rsp,0x38
    6502a7e2:	ret    
    6502a7e3:	mov    BYTE PTR [r10],0x0
    6502a7e7:	call   0x65020420
    6502a7ec:	xor    r9d,r9d
    6502a7ef:	xor    r8d,r8d
    6502a7f2:	xor    edx,edx
    6502a7f4:	xor    ecx,ecx
    6502a7f6:	mov    DWORD PTR [rax],0x22
    6502a7fc:	mov    QWORD PTR [rsp+0x20],0x0
    6502a805:	call   0x6501d9c0
    6502a80a:	mov    eax,0x22
    6502a80f:	add    rsp,0x38
    6502a813:	ret    
    6502a814:	int3   
    6502a815:	int3   
    6502a816:	int3   
    6502a817:	int3   
    6502a818:	int3   
    6502a819:	int3   
    6502a81a:	int3   
    6502a81b:	int3   
    6502a81c:	int3   
    6502a81d:	int3   
    6502a81e:	int3   
    6502a81f:	int3   
    6502a820:	int3   
    6502a821:	int3   
    6502a822:	int3   
    6502a823:	int3   
    6502a824:	int3   
    6502a825:	int3   
    6502a826:	data16 data16 xchg ax,ax
    6502a82a:	data16 data16 xchg ax,ax
    6502a82e:	xchg   ax,ax
    6502a830:	test   r8,r8
    6502a833:	je     0x6502a8aa
    6502a835:	sub    rdx,rcx
    6502a838:	mov    r9,rdx
    6502a83b:	movabs r11,0x8101010101010100
    6502a845:	test   cl,0x7
    6502a848:	je     0x6502a869
    6502a84a:	mov    al,BYTE PTR [rcx]
    6502a84c:	mov    dl,BYTE PTR [rcx+r9*1]
    6502a850:	inc    rcx
    6502a853:	cmp    al,dl
    6502a855:	jne    0x6502a8ae
    6502a857:	dec    r8
    6502a85a:	je     0x6502a8aa
    6502a85c:	test   al,al
    6502a85e:	je     0x6502a8aa
    6502a860:	test   rcx,0x7
    6502a867:	jne    0x6502a84a
    6502a869:	lea    rdx,[rcx+r9*1]
    6502a86d:	and    dx,0xfff
    6502a872:	cmp    dx,0xff8
    6502a877:	ja     0x6502a84a
    6502a879:	mov    rax,QWORD PTR [rcx]
    6502a87c:	mov    rdx,QWORD PTR [rcx+r9*1]
    6502a880:	cmp    rax,rdx
    6502a883:	jne    0x6502a84a
    6502a885:	add    rcx,0x8
    6502a889:	sub    r8,0x8
    6502a88d:	movabs r10,0x7efefefefefefeff
    6502a897:	jbe    0x6502a8aa
    6502a899:	xor    rax,0xffffffffffffffff
    6502a89d:	add    r10,rdx
    6502a8a0:	xor    rax,r10
    6502a8a3:	test   r11,rax
    6502a8a6:	je     0x6502a869
    6502a8a8:	jmp    0x6502a8b6
    6502a8aa:	xor    rax,rax
    6502a8ad:	ret    
    6502a8ae:	sbb    rax,rax
    6502a8b1:	sbb    rax,0xffffffffffffffff
    6502a8b5:	ret    
    6502a8b6:	test   dl,dl
    6502a8b8:	je     0x6502a8e1
    6502a8ba:	test   dh,dh
    6502a8bc:	je     0x6502a8e1
    6502a8be:	shr    rdx,0x10
    6502a8c2:	test   dl,dl
    6502a8c4:	je     0x6502a8e1
    6502a8c6:	test   dh,dh
    6502a8c8:	je     0x6502a8e1
    6502a8ca:	shr    rdx,0x10
    6502a8ce:	test   dl,dl
    6502a8d0:	je     0x6502a8e1
    6502a8d2:	test   dh,dh
    6502a8d4:	je     0x6502a8e1
    6502a8d6:	shr    edx,0x10
    6502a8d9:	test   dl,dl
    6502a8db:	je     0x6502a8e1
    6502a8dd:	test   dh,dh
    6502a8df:	jne    0x6502a869
    6502a8e1:	xor    rax,rax
    6502a8e4:	ret    
    6502a8e5:	int3   
    6502a8e6:	int3   
    6502a8e7:	int3   
    6502a8e8:	int3   
    6502a8e9:	int3   
    6502a8ea:	int3   
    6502a8eb:	int3   
    6502a8ec:	int3   
    6502a8ed:	int3   
    6502a8ee:	int3   
    6502a8ef:	int3   
    6502a8f0:	mov    QWORD PTR [rsp+0x8],rbx
    6502a8f5:	push   rdi
    6502a8f6:	sub    rsp,0x20
    6502a8fa:	movsxd rbx,ecx
    6502a8fd:	mov    edi,r8d
    6502a900:	mov    QWORD PTR [rsp+0x38],rdx
    6502a905:	mov    ecx,ebx
    6502a907:	call   0x6502d8a0
    6502a90c:	cmp    rax,0xffffffffffffffff
    6502a910:	jne    0x6502a92c
    6502a912:	call   0x65020420
    6502a917:	mov    DWORD PTR [rax],0x9
    6502a91d:	or     rax,0xffffffffffffffff
    6502a921:	mov    rbx,QWORD PTR [rsp+0x30]
    6502a926:	add    rsp,0x20
    6502a92a:	pop    rdi
    6502a92b:	ret    
    6502a92c:	mov    edx,DWORD PTR [rsp+0x38]
    6502a930:	lea    r8,[rsp+0x3c]
    6502a935:	mov    r9d,edi
    6502a938:	mov    rcx,rax
    6502a93b:	call   QWORD PTR [rip+0x980f]        # 0x65034150
    6502a941:	cmp    eax,0xffffffff
    6502a944:	mov    DWORD PTR [rsp+0x38],eax
    6502a948:	jne    0x6502a96a
    6502a94a:	call   QWORD PTR [rip+0x9718]        # 0x65034068
    6502a950:	test   eax,eax
    6502a952:	je     0x6502a96a
    6502a954:	mov    ecx,eax
    6502a956:	call   0x65020480
    6502a95b:	or     rax,0xffffffffffffffff
    6502a95f:	mov    rbx,QWORD PTR [rsp+0x30]
    6502a964:	add    rsp,0x20
    6502a968:	pop    rdi
    6502a969:	ret    
    6502a96a:	mov    cl,bl
    6502a96c:	mov    rdx,rbx
    6502a96f:	mov    rbx,QWORD PTR [rsp+0x30]
    6502a974:	sar    rdx,0x5
    6502a978:	and    ecx,0x1f
    6502a97b:	lea    r8,[rip+0x1e61e]        # 0x65048fa0
    6502a982:	mov    rax,QWORD PTR [r8+rdx*8]
    6502a986:	imul   rcx,rcx,0x58
    6502a98a:	and    BYTE PTR [rax+rcx*1+0x8],0xfd
    6502a98f:	mov    rax,QWORD PTR [rsp+0x38]
    6502a994:	add    rsp,0x20
    6502a998:	pop    rdi
    6502a999:	ret    
    6502a99a:	int3   
    6502a99b:	int3   
    6502a99c:	int3   
    6502a99d:	int3   
    6502a99e:	int3   
    6502a99f:	int3   
    6502a9a0:	mov    QWORD PTR [rsp+0x10],rbx
    6502a9a5:	mov    DWORD PTR [rsp+0x8],ecx
    6502a9a9:	push   rsi
    6502a9aa:	push   rdi
    6502a9ab:	push   r12
    6502a9ad:	push   r13
    6502a9af:	push   r14
    6502a9b1:	sub    rsp,0x30
    6502a9b5:	mov    r12d,r8d
    6502a9b8:	mov    r13,rdx
    6502a9bb:	movsxd rbx,ecx
    6502a9be:	cmp    ebx,0xfffffffe
    6502a9c1:	jne    0x6502a9e0
    6502a9c3:	call   0x65020450
    6502a9c8:	xor    edi,edi
    6502a9ca:	mov    DWORD PTR [rax],edi
    6502a9cc:	call   0x65020420
    6502a9d1:	mov    DWORD PTR [rax],0x9
    6502a9d7:	or     rax,0xffffffffffffffff
    6502a9db:	jmp    0x6502aabc
    6502a9e0:	test   ecx,ecx
    6502a9e2:	js     0x6502aa90
    6502a9e8:	cmp    ebx,DWORD PTR [rip+0x1e596]        # 0x65048f84
    6502a9ee:	jae    0x6502aa90
    6502a9f4:	mov    rsi,rbx
    6502a9f7:	sar    rsi,0x5
    6502a9fb:	lea    r14,[rip+0x1e59e]        # 0x65048fa0
    6502aa02:	mov    dil,bl
    6502aa05:	and    edi,0x1f
    6502aa08:	imul   rdi,rdi,0x58
    6502aa0c:	mov    rax,QWORD PTR [r14+rsi*8]
    6502aa10:	mov    cl,BYTE PTR [rax+rdi*1+0x8]
    6502aa14:	and    ecx,0x1
    6502aa17:	jne    0x6502aa47
    6502aa19:	call   0x65020450
    6502aa1e:	xor    edi,edi
    6502aa20:	mov    DWORD PTR [rax],edi
    6502aa22:	call   0x65020420
    6502aa27:	mov    DWORD PTR [rax],0x9
    6502aa2d:	mov    QWORD PTR [rsp+0x20],rdi
    6502aa32:	xor    r9d,r9d
    6502aa35:	xor    r8d,r8d
    6502aa38:	xor    edx,edx
    6502aa3a:	xor    ecx,ecx
    6502aa3c:	call   0x6501d9c0
    6502aa41:	or     rax,0xffffffffffffffff
    6502aa45:	jmp    0x6502aabc
    6502aa47:	mov    ecx,ebx
    6502aa49:	call   0x6502d940
    6502aa4e:	nop
    6502aa4f:	mov    rax,QWORD PTR [r14+rsi*8]
    6502aa53:	test   BYTE PTR [rax+rdi*1+0x8],0x1
    6502aa58:	je     0x6502aa6c
    6502aa5a:	mov    r8d,r12d
    6502aa5d:	mov    rdx,r13
    6502aa60:	mov    ecx,ebx
    6502aa62:	call   0x6502a8f0
    6502aa67:	mov    rdi,rax
    6502aa6a:	jmp    0x6502aa84
    6502aa6c:	call   0x65020420
    6502aa71:	mov    DWORD PTR [rax],0x9
    6502aa77:	call   0x65020450
    6502aa7c:	xor    edi,edi
    6502aa7e:	mov    DWORD PTR [rax],edi
    6502aa80:	or     rdi,0xffffffffffffffff
    6502aa84:	mov    ecx,ebx
    6502aa86:	call   0x6502da10
    6502aa8b:	mov    rax,rdi
    6502aa8e:	jmp    0x6502aabc
    6502aa90:	call   0x65020450
    6502aa95:	xor    edi,edi
    6502aa97:	mov    DWORD PTR [rax],edi
    6502aa99:	call   0x65020420
    6502aa9e:	mov    DWORD PTR [rax],0x9
    6502aaa4:	mov    QWORD PTR [rsp+0x20],rdi
    6502aaa9:	xor    r9d,r9d
    6502aaac:	xor    r8d,r8d
    6502aaaf:	xor    edx,edx
    6502aab1:	xor    ecx,ecx
    6502aab3:	call   0x6501d9c0
    6502aab8:	or     rax,0xffffffffffffffff
    6502aabc:	mov    rbx,QWORD PTR [rsp+0x68]
    6502aac1:	add    rsp,0x30
    6502aac5:	pop    r14
    6502aac7:	pop    r13
    6502aac9:	pop    r12
    6502aacb:	pop    rdi
    6502aacc:	pop    rsi
    6502aacd:	ret    
    6502aace:	int3   
    6502aacf:	int3   
    6502aad0:	rex push rbp
    6502aad2:	sub    rsp,0x30
    6502aad6:	mov    rbp,rdx
    6502aad9:	mov    ecx,DWORD PTR [rbp+0x60]
    6502aadc:	call   0x6502da10
    6502aae1:	add    rsp,0x30
    6502aae5:	pop    rbp
    6502aae6:	ret    
    6502aae7:	int3   
    6502aae8:	int3   
    6502aae9:	int3   
    6502aaea:	int3   
    6502aaeb:	int3   
    6502aaec:	int3   
    6502aaed:	int3   
    6502aaee:	int3   
    6502aaef:	int3   
    6502aaf0:	rex push rbx
    6502aaf2:	push   rbp
    6502aaf3:	push   rsi
    6502aaf4:	push   rdi
    6502aaf5:	push   r13
    6502aaf7:	push   r14
    6502aaf9:	sub    rsp,0x5f8
    6502ab00:	mov    rax,QWORD PTR [rip+0x18619]        # 0x65043120
    6502ab07:	xor    rax,rsp
    6502ab0a:	mov    QWORD PTR [rsp+0x5e0],rax
    6502ab12:	xor    edi,edi
    6502ab14:	test   r8d,r8d
    6502ab17:	mov    r13d,r8d
    6502ab1a:	mov    rbp,rdx
    6502ab1d:	movsxd rbx,ecx
    6502ab20:	mov    r14d,edi
    6502ab23:	mov    esi,edi
    6502ab25:	jne    0x6502ab2e
    6502ab27:	xor    eax,eax
    6502ab29:	jmp    0x6502b2d6
    6502ab2e:	test   rdx,rdx
    6502ab31:	jne    0x6502ab61
    6502ab33:	call   0x65020450
    6502ab38:	mov    DWORD PTR [rax],edi
    6502ab3a:	call   0x65020420
    6502ab3f:	xor    r9d,r9d
    6502ab42:	xor    r8d,r8d
    6502ab45:	xor    edx,edx
    6502ab47:	xor    ecx,ecx
    6502ab49:	mov    DWORD PTR [rax],0x16
    6502ab4f:	mov    QWORD PTR [rsp+0x20],rdi
    6502ab54:	call   0x6501d9c0
    6502ab59:	or     eax,0xffffffff
    6502ab5c:	jmp    0x6502b2d6
    6502ab61:	mov    QWORD PTR [rsp+0x648],r12
    6502ab69:	mov    QWORD PTR [rsp+0x5f0],r15
    6502ab71:	mov    r12b,bl
    6502ab74:	and    r12d,0x1f
    6502ab78:	mov    r15,rbx
    6502ab7b:	lea    rcx,[rip+0x1e41e]        # 0x65048fa0
    6502ab82:	sar    r15,0x5
    6502ab86:	mov    QWORD PTR [rsp+0x50],r15
    6502ab8b:	imul   r12,r12,0x58
    6502ab8f:	mov    rcx,QWORD PTR [rcx+r15*8]
    6502ab93:	mov    QWORD PTR [rsp+0x58],r12
    6502ab98:	movzx  edi,BYTE PTR [r12+rcx*1+0x38]
    6502ab9e:	add    dil,dil
    6502aba1:	sar    dil,1
    6502aba4:	cmp    dil,0x2
    6502aba8:	je     0x6502abb0
    6502abaa:	cmp    dil,0x1
    6502abae:	jne    0x6502abe6
    6502abb0:	mov    eax,r13d
    6502abb3:	not    eax
    6502abb5:	test   al,0x1
    6502abb7:	jne    0x6502abe6
    6502abb9:	call   0x65020450
    6502abbe:	xor    ebx,ebx
    6502abc0:	mov    DWORD PTR [rax],ebx
    6502abc2:	call   0x65020420
    6502abc7:	xor    r9d,r9d
    6502abca:	xor    r8d,r8d
    6502abcd:	xor    edx,edx
    6502abcf:	xor    ecx,ecx
    6502abd1:	mov    DWORD PTR [rax],0x16
    6502abd7:	mov    QWORD PTR [rsp+0x20],rbx
    6502abdc:	call   0x6501d9c0
    6502abe1:	jmp    0x6502b2c3
    6502abe6:	test   BYTE PTR [r12+rcx*1+0x8],0x20
    6502abec:	je     0x6502abfb
    6502abee:	xor    edx,edx
    6502abf0:	mov    ecx,ebx
    6502abf2:	lea    r8d,[rdx+0x2]
    6502abf6:	call   0x6502a8f0
    6502abfb:	mov    ecx,ebx
    6502abfd:	call   0x6502b4b0
    6502ac02:	test   eax,eax
    6502ac04:	je     0x6502af41
    6502ac0a:	lea    rdx,[rip+0x1e38f]        # 0x65048fa0
    6502ac11:	mov    rax,QWORD PTR [rdx+r15*8]
    6502ac15:	test   BYTE PTR [r12+rax*1+0x8],0x80
    6502ac1b:	je     0x6502af5a
    6502ac21:	call   0x65020a30
    6502ac26:	xor    ebx,ebx
    6502ac28:	lea    rdx,[rsp+0x4c]
    6502ac2d:	mov    rcx,QWORD PTR [rax+0xc0]
    6502ac34:	lea    rax,[rip+0x1e365]        # 0x65048fa0
    6502ac3b:	cmp    DWORD PTR [rcx+0x14],ebx
    6502ac3e:	mov    rcx,QWORD PTR [rax+r15*8]
    6502ac42:	mov    rcx,QWORD PTR [r12+rcx*1]
    6502ac46:	sete   bl
    6502ac49:	call   QWORD PTR [rip+0x94a9]        # 0x650340f8
    6502ac4f:	test   eax,eax
    6502ac51:	je     0x6502af53
    6502ac57:	test   ebx,ebx
    6502ac59:	je     0x6502ac64
    6502ac5b:	test   dil,dil
    6502ac5e:	je     0x6502af4a
    6502ac64:	call   QWORD PTR [rip+0x94de]        # 0x65034148
    6502ac6a:	test   r13d,r13d
    6502ac6d:	mov    DWORD PTR [rsp+0x44],esi
    6502ac71:	mov    r12d,eax
    6502ac74:	mov    DWORD PTR [rsp+0x4c],eax
    6502ac78:	mov    rbx,rbp
    6502ac7b:	je     0x6502af37
    6502ac81:	mov    r15d,DWORD PTR [rsp+0x4c]
    6502ac86:	test   dil,dil
    6502ac89:	jne    0x6502ae47
    6502ac8f:	mov    rdx,QWORD PTR [rsp+0x50]
    6502ac94:	movzx  ecx,BYTE PTR [rbx]
    6502ac97:	mov    r8,QWORD PTR [rsp+0x58]
    6502ac9c:	xor    r15d,r15d
    6502ac9f:	cmp    cl,0xa
    6502aca2:	lea    rax,[rip+0x1e2f7]        # 0x65048fa0
    6502aca9:	mov    rdx,QWORD PTR [rax+rdx*8]
    6502acad:	sete   r15b
    6502acb1:	cmp    DWORD PTR [r8+rdx*1+0x50],0x0
    6502acb7:	je     0x6502acf4
    6502acb9:	movzx  eax,BYTE PTR [r8+rdx*1+0x4c]
    6502acbf:	mov    BYTE PTR [rsp+0x61],cl
    6502acc3:	lea    rcx,[rsp+0x40]
    6502acc8:	mov    BYTE PTR [rsp+0x60],al
    6502accc:	mov    DWORD PTR [r8+rdx*1+0x50],0x0
    6502acd5:	lea    rdx,[rsp+0x60]
    6502acda:	mov    r8d,0x2
    6502ace0:	call   0x6502bcc0
    6502ace5:	cmp    eax,0xffffffff
    6502ace8:	jne    0x6502ad49
    6502acea:	mov    r15d,DWORD PTR [rsp+0x44]
    6502acef:	jmp    0x6502b246
    6502acf4:	movsx  ecx,cl
    6502acf7:	call   0x65028f60
    6502acfc:	test   eax,eax
    6502acfe:	je     0x6502ad31
    6502ad00:	mov    rax,r13
    6502ad03:	sub    rax,rbx
    6502ad06:	add    rax,rbp
    6502ad09:	cmp    rax,0x1
    6502ad0d:	jle    0x6502aec9
    6502ad13:	lea    rcx,[rsp+0x40]
    6502ad18:	mov    r8d,0x2
    6502ad1e:	mov    rdx,rbx
    6502ad21:	call   0x6502bcc0
    6502ad26:	cmp    eax,0xffffffff
    6502ad29:	je     0x6502acea
    6502ad2b:	add    rbx,0x1
    6502ad2f:	jmp    0x6502ad49
    6502ad31:	lea    rcx,[rsp+0x40]
    6502ad36:	mov    r8d,0x1
    6502ad3c:	mov    rdx,rbx
    6502ad3f:	call   0x6502bcc0
    6502ad44:	cmp    eax,0xffffffff
    6502ad47:	je     0x6502acea
    6502ad49:	xor    eax,eax
    6502ad4b:	lea    r8,[rsp+0x40]
    6502ad50:	mov    r9d,0x1
    6502ad56:	mov    QWORD PTR [rsp+0x38],rax
    6502ad5b:	mov    QWORD PTR [rsp+0x30],rax
    6502ad60:	lea    rax,[rsp+0x60]
    6502ad65:	xor    edx,edx
    6502ad67:	mov    ecx,r12d
    6502ad6a:	mov    DWORD PTR [rsp+0x28],0x5
    6502ad72:	mov    QWORD PTR [rsp+0x20],rax
    6502ad77:	add    rbx,0x1
    6502ad7b:	call   QWORD PTR [rip+0x92af]        # 0x65034030
    6502ad81:	test   eax,eax
    6502ad83:	mov    r12d,eax
    6502ad86:	je     0x6502acea
    6502ad8c:	mov    rax,QWORD PTR [rsp+0x50]
    6502ad91:	lea    rcx,[rip+0x1e208]        # 0x65048fa0
    6502ad98:	lea    r9,[rsp+0x44]
    6502ad9d:	mov    rcx,QWORD PTR [rcx+rax*8]
    6502ada1:	mov    rax,QWORD PTR [rsp+0x58]
    6502ada6:	lea    rdx,[rsp+0x60]
    6502adab:	mov    rcx,QWORD PTR [rax+rcx*1]
    6502adaf:	mov    r8d,r12d
    6502adb2:	mov    QWORD PTR [rsp+0x20],0x0
    6502adbb:	call   QWORD PTR [rip+0x932f]        # 0x650340f0
    6502adc1:	test   eax,eax
    6502adc3:	je     0x6502af0d
    6502adc9:	mov    r14d,ebx
    6502adcc:	sub    r14d,ebp
    6502adcf:	add    r14d,esi
    6502add2:	cmp    DWORD PTR [rsp+0x44],r12d
    6502add7:	jl     0x6502acea
    6502addd:	test   r15d,r15d
    6502ade0:	je     0x6502ae40
    6502ade2:	mov    rax,QWORD PTR [rsp+0x50]
    6502ade7:	mov    BYTE PTR [rsp+0x60],0xd
    6502adec:	lea    rcx,[rip+0x1e1ad]        # 0x65048fa0
    6502adf3:	mov    rcx,QWORD PTR [rcx+rax*8]
    6502adf7:	mov    rax,QWORD PTR [rsp+0x58]
    6502adfc:	lea    r9,[rsp+0x44]
    6502ae01:	mov    rcx,QWORD PTR [rax+rcx*1]
    6502ae05:	lea    rdx,[rsp+0x60]
    6502ae0a:	mov    r8d,0x1
    6502ae10:	mov    QWORD PTR [rsp+0x20],0x0
    6502ae19:	call   QWORD PTR [rip+0x92d1]        # 0x650340f0
    6502ae1f:	test   eax,eax
    6502ae21:	je     0x6502aeff
    6502ae27:	cmp    DWORD PTR [rsp+0x44],0x1
    6502ae2c:	jl     0x6502acea
    6502ae32:	mov    r12d,DWORD PTR [rsp+0x4c]
    6502ae37:	add    esi,0x1
    6502ae3a:	add    r14d,0x1
    6502ae3e:	jmp    0x6502aeb2
    6502ae40:	mov    r12d,DWORD PTR [rsp+0x4c]
    6502ae45:	jmp    0x6502aeb2
    6502ae47:	cmp    dil,0x1
    6502ae4b:	je     0x6502ae53
    6502ae4d:	cmp    dil,0x2
    6502ae51:	jne    0x6502ae6a
    6502ae53:	movzx  eax,WORD PTR [rbx]
    6502ae56:	xor    r15d,r15d
    6502ae59:	cmp    ax,0xa
    6502ae5d:	mov    WORD PTR [rsp+0x40],ax
    6502ae62:	sete   r15b
    6502ae66:	add    rbx,0x2
    6502ae6a:	cmp    dil,0x1
    6502ae6e:	je     0x6502ae76
    6502ae70:	cmp    dil,0x2
    6502ae74:	jne    0x6502aeb2
    6502ae76:	movzx  ecx,WORD PTR [rsp+0x40]
    6502ae7b:	call   0x6502da40
    6502ae80:	cmp    ax,WORD PTR [rsp+0x40]
    6502ae85:	jne    0x6502af29
    6502ae8b:	add    r14d,0x1
    6502ae8f:	test   r15d,r15d
    6502ae92:	je     0x6502aeb2
    6502ae94:	mov    cx,0xd
    6502ae98:	mov    WORD PTR [rsp+0x40],0xd
    6502ae9f:	call   0x6502da40
    6502aea4:	cmp    ax,WORD PTR [rsp+0x40]
    6502aea9:	jne    0x6502af1b
    6502aeab:	add    r14d,0x1
    6502aeaf:	add    esi,0x1
    6502aeb2:	mov    eax,ebx
    6502aeb4:	sub    eax,ebp
    6502aeb6:	cmp    eax,r13d
    6502aeb9:	jb     0x6502ac86
    6502aebf:	mov    r15d,DWORD PTR [rsp+0x44]
    6502aec4:	jmp    0x6502b246
    6502aec9:	movzx  eax,BYTE PTR [rbx]
    6502aecc:	mov    r8,QWORD PTR [rsp+0x50]
    6502aed1:	mov    rdx,QWORD PTR [rsp+0x58]
    6502aed6:	lea    r9,[rip+0x1e0c3]        # 0x65048fa0
    6502aedd:	add    r14d,0x1
    6502aee1:	mov    rcx,QWORD PTR [r9+r8*8]
    6502aee5:	mov    BYTE PTR [rdx+rcx*1+0x4c],al
    6502aee9:	mov    rax,QWORD PTR [r9+r8*8]
    6502aeed:	mov    DWORD PTR [rdx+rax*1+0x50],0x1
    6502aef5:	mov    r15d,DWORD PTR [rsp+0x44]
    6502aefa:	jmp    0x6502b246
    6502aeff:	call   QWORD PTR [rip+0x9163]        # 0x65034068
    6502af05:	mov    r15d,eax
    6502af08:	jmp    0x6502b246
    6502af0d:	call   QWORD PTR [rip+0x9155]        # 0x65034068
    6502af13:	mov    r15d,eax
    6502af16:	jmp    0x6502b246
    6502af1b:	call   QWORD PTR [rip+0x9147]        # 0x65034068
    6502af21:	mov    r15d,eax
    6502af24:	jmp    0x6502b246
    6502af29:	call   QWORD PTR [rip+0x9139]        # 0x65034068
    6502af2f:	mov    r15d,eax
    6502af32:	jmp    0x6502b246
    6502af37:	mov    r15d,DWORD PTR [rsp+0x44]
    6502af3c:	jmp    0x6502b25c
    6502af41:	lea    rdx,[rip+0x1e058]        # 0x65048fa0
    6502af48:	jmp    0x6502af5a
    6502af4a:	lea    rdx,[rip+0x1e04f]        # 0x65048fa0
    6502af51:	jmp    0x6502af5a
    6502af53:	lea    rdx,[rip+0x1e046]        # 0x65048fa0
    6502af5a:	mov    rcx,QWORD PTR [rdx+r15*8]
    6502af5e:	test   BYTE PTR [r12+rcx*1+0x8],0x80
    6502af64:	je     0x6502b220
    6502af6a:	xor    r15d,r15d
    6502af6d:	test   dil,dil
    6502af70:	jne    0x6502b036
    6502af76:	test   r13d,r13d
    6502af79:	mov    rdi,rbp
    6502af7c:	je     0x6502b292
    6502af82:	lea    rbx,[rsp+0x70]
    6502af87:	xor    ecx,ecx
    6502af89:	data16 xchg ax,ax
    6502af8c:	data16 data16 xchg ax,ax
    6502af90:	mov    eax,edi
    6502af92:	sub    eax,ebp
    6502af94:	cmp    eax,r13d
    6502af97:	jae    0x6502afc5
    6502af99:	movzx  eax,BYTE PTR [rdi]
    6502af9c:	add    rdi,0x1
    6502afa0:	cmp    al,0xa
    6502afa2:	jne    0x6502afb2
    6502afa4:	mov    BYTE PTR [rbx],0xd
    6502afa7:	add    rbx,0x1
    6502afab:	add    esi,0x1
    6502afae:	add    rcx,0x1
    6502afb2:	add    rcx,0x1
    6502afb6:	mov    BYTE PTR [rbx],al
    6502afb8:	add    rbx,0x1
    6502afbc:	cmp    rcx,0x400
    6502afc3:	jb     0x6502af90
    6502afc5:	lea    rax,[rsp+0x70]
    6502afca:	mov    r8d,ebx
    6502afcd:	lea    r9,[rsp+0x48]
    6502afd2:	sub    r8d,eax
    6502afd5:	mov    rax,QWORD PTR [rsp+0x50]
    6502afda:	mov    QWORD PTR [rsp+0x20],r15
    6502afdf:	mov    rcx,QWORD PTR [rdx+rax*8]
    6502afe3:	lea    rdx,[rsp+0x70]
    6502afe8:	mov    rcx,QWORD PTR [r12+rcx*1]
    6502afec:	call   QWORD PTR [rip+0x90fe]        # 0x650340f0
    6502aff2:	test   eax,eax
    6502aff4:	je     0x6502b028
    6502aff6:	movsxd rax,DWORD PTR [rsp+0x48]
    6502affb:	lea    rcx,[rsp+0x70]
    6502b000:	sub    rbx,rcx
    6502b003:	add    r14d,eax
    6502b006:	cmp    rax,rbx
    6502b009:	jl     0x6502b246
    6502b00f:	mov    eax,edi
    6502b011:	lea    rdx,[rip+0x1df88]        # 0x65048fa0
    6502b018:	sub    eax,ebp
    6502b01a:	cmp    eax,r13d
    6502b01d:	jb     0x6502af82
    6502b023:	jmp    0x6502b246
    6502b028:	call   QWORD PTR [rip+0x903a]        # 0x65034068
    6502b02e:	mov    r15d,eax
    6502b031:	jmp    0x6502b246
    6502b036:	cmp    dil,0x2
    6502b03a:	jne    0x6502b102
    6502b040:	test   r13d,r13d
    6502b043:	mov    rdi,rbp
    6502b046:	je     0x6502b292
    6502b04c:	data16 data16 xchg ax,ax
    6502b050:	lea    rbx,[rsp+0x70]
    6502b055:	xor    ecx,ecx
    6502b057:	mov    eax,edi
    6502b059:	sub    eax,ebp
    6502b05b:	cmp    eax,r13d
    6502b05e:	jae    0x6502b091
    6502b060:	movzx  eax,WORD PTR [rdi]
    6502b063:	add    rdi,0x2
    6502b067:	cmp    ax,0xa
    6502b06b:	jne    0x6502b07d
    6502b06d:	mov    WORD PTR [rbx],0xd
    6502b072:	add    rbx,0x2
    6502b076:	add    esi,0x2
    6502b079:	add    rcx,0x2
    6502b07d:	add    rcx,0x2
    6502b081:	mov    WORD PTR [rbx],ax
    6502b084:	add    rbx,0x2
    6502b088:	cmp    rcx,0x3ff
    6502b08f:	jb     0x6502b057
    6502b091:	lea    rax,[rsp+0x70]
    6502b096:	mov    r8d,ebx
    6502b099:	lea    r9,[rsp+0x48]
    6502b09e:	sub    r8d,eax
    6502b0a1:	mov    rax,QWORD PTR [rsp+0x50]
    6502b0a6:	mov    QWORD PTR [rsp+0x20],r15
    6502b0ab:	mov    rcx,QWORD PTR [rdx+rax*8]
    6502b0af:	lea    rdx,[rsp+0x70]
    6502b0b4:	mov    rcx,QWORD PTR [r12+rcx*1]
    6502b0b8:	call   QWORD PTR [rip+0x9032]        # 0x650340f0
    6502b0be:	test   eax,eax
    6502b0c0:	je     0x6502b0f4
    6502b0c2:	movsxd rax,DWORD PTR [rsp+0x48]
    6502b0c7:	lea    rcx,[rsp+0x70]
    6502b0cc:	sub    rbx,rcx
    6502b0cf:	add    r14d,eax
    6502b0d2:	cmp    rax,rbx
    6502b0d5:	jl     0x6502b246
    6502b0db:	mov    eax,edi
    6502b0dd:	lea    rdx,[rip+0x1debc]        # 0x65048fa0
    6502b0e4:	sub    eax,ebp
    6502b0e6:	cmp    eax,r13d
    6502b0e9:	jb     0x6502b050
    6502b0ef:	jmp    0x6502b246
    6502b0f4:	call   QWORD PTR [rip+0x8f6e]        # 0x65034068
    6502b0fa:	mov    r15d,eax
    6502b0fd:	jmp    0x6502b246
    6502b102:	test   r13d,r13d
    6502b105:	mov    rdi,rbp
    6502b108:	je     0x6502b292
    6502b10e:	xchg   ax,ax
    6502b110:	lea    rcx,[rsp+0x480]
    6502b118:	xor    edx,edx
    6502b11a:	data16 xchg ax,ax
    6502b11d:	data16 xchg ax,ax
    6502b120:	mov    eax,edi
    6502b122:	sub    eax,ebp
    6502b124:	cmp    eax,r13d
    6502b127:	jae    0x6502b157
    6502b129:	movzx  eax,WORD PTR [rdi]
    6502b12c:	add    rdi,0x2
    6502b130:	cmp    ax,0xa
    6502b134:	jne    0x6502b143
    6502b136:	mov    WORD PTR [rcx],0xd
    6502b13b:	add    rcx,0x2
    6502b13f:	add    rdx,0x2
    6502b143:	add    rdx,0x2
    6502b147:	mov    WORD PTR [rcx],ax
    6502b14a:	add    rcx,0x2
    6502b14e:	cmp    rdx,0x152
    6502b155:	jb     0x6502b120
    6502b157:	lea    rax,[rsp+0x480]
    6502b15f:	mov    QWORD PTR [rsp+0x38],rsi
    6502b164:	mov    QWORD PTR [rsp+0x30],rsi
    6502b169:	sub    ecx,eax
    6502b16b:	lea    r8,[rsp+0x480]
    6502b173:	mov    DWORD PTR [rsp+0x28],0x2ab
    6502b17b:	mov    eax,ecx
    6502b17d:	mov    ecx,0xfde9
    6502b182:	cdq    
    6502b183:	sub    eax,edx
    6502b185:	xor    edx,edx
    6502b187:	sar    eax,1
    6502b189:	mov    r9d,eax
    6502b18c:	lea    rax,[rsp+0x70]
    6502b191:	mov    QWORD PTR [rsp+0x20],rax
    6502b196:	call   QWORD PTR [rip+0x8e94]        # 0x65034030
    6502b19c:	test   eax,eax
    6502b19e:	mov    r12d,eax
    6502b1a1:	je     0x6502b215
    6502b1a3:	xor    ebx,ebx
    6502b1a5:	data16 data16 xchg ax,ax
    6502b1a9:	data16 xchg ax,ax
    6502b1ac:	data16 data16 xchg ax,ax
    6502b1b0:	mov    rax,QWORD PTR [rsp+0x50]
    6502b1b5:	movsxd rcx,ebx
    6502b1b8:	mov    r8d,r12d
    6502b1bb:	lea    rdx,[rsp+rcx*1+0x70]
    6502b1c0:	lea    rcx,[rip+0x1ddd9]        # 0x65048fa0
    6502b1c7:	lea    r9,[rsp+0x48]
    6502b1cc:	mov    rcx,QWORD PTR [rcx+rax*8]
    6502b1d0:	mov    rax,QWORD PTR [rsp+0x58]
    6502b1d5:	sub    r8d,ebx
    6502b1d8:	mov    rcx,QWORD PTR [rax+rcx*1]
    6502b1dc:	mov    QWORD PTR [rsp+0x20],rsi
    6502b1e1:	call   QWORD PTR [rip+0x8f09]        # 0x650340f0
    6502b1e7:	test   eax,eax
    6502b1e9:	je     0x6502b1f6
    6502b1eb:	add    ebx,DWORD PTR [rsp+0x48]
    6502b1ef:	cmp    r12d,ebx
    6502b1f2:	jg     0x6502b1b0
    6502b1f4:	jmp    0x6502b204
    6502b1f6:	call   QWORD PTR [rip+0x8e6c]        # 0x65034068
    6502b1fc:	cmp    r12d,ebx
    6502b1ff:	mov    r15d,eax
    6502b202:	jg     0x6502b246
    6502b204:	mov    r14d,edi
    6502b207:	sub    r14d,ebp
    6502b20a:	cmp    r14d,r13d
    6502b20d:	jb     0x6502b110
    6502b213:	jmp    0x6502b246
    6502b215:	call   QWORD PTR [rip+0x8e4d]        # 0x65034068
    6502b21b:	mov    r15d,eax
    6502b21e:	jmp    0x6502b246
    6502b220:	mov    rcx,QWORD PTR [r12+rcx*1]
    6502b224:	lea    r9,[rsp+0x48]
    6502b229:	mov    r8d,r13d
    6502b22c:	mov    rdx,rbp
    6502b22f:	mov    QWORD PTR [rsp+0x20],rsi
    6502b234:	call   QWORD PTR [rip+0x8eb6]        # 0x650340f0
    6502b23a:	test   eax,eax
    6502b23c:	je     0x6502b253
    6502b23e:	mov    r14d,DWORD PTR [rsp+0x48]
    6502b243:	xor    r15d,r15d
    6502b246:	test   r14d,r14d
    6502b249:	je     0x6502b25c
    6502b24b:	sub    r14d,esi
    6502b24e:	mov    eax,r14d
    6502b251:	jmp    0x6502b2c6
    6502b253:	call   QWORD PTR [rip+0x8e0f]        # 0x65034068
    6502b259:	mov    r15d,eax
    6502b25c:	test   r15d,r15d
    6502b25f:	je     0x6502b286
    6502b261:	cmp    r15d,0x5
    6502b265:	jne    0x6502b27c
    6502b267:	call   0x65020420
    6502b26c:	mov    DWORD PTR [rax],0x9
    6502b272:	call   0x65020450
    6502b277:	mov    DWORD PTR [rax],r15d
    6502b27a:	jmp    0x6502b2c3
    6502b27c:	mov    ecx,r15d
    6502b27f:	call   0x65020480
    6502b284:	jmp    0x6502b2c3
    6502b286:	mov    r12,QWORD PTR [rsp+0x58]
    6502b28b:	lea    rdx,[rip+0x1dd0e]        # 0x65048fa0
    6502b292:	mov    rax,QWORD PTR [rsp+0x50]
    6502b297:	mov    rax,QWORD PTR [rdx+rax*8]
    6502b29b:	test   BYTE PTR [r12+rax*1+0x8],0x40
    6502b2a1:	je     0x6502b2ad
    6502b2a3:	cmp    BYTE PTR [rbp+0x0],0x1a
    6502b2a7:	jne    0x6502b2ad
    6502b2a9:	xor    eax,eax
    6502b2ab:	jmp    0x6502b2c6
    6502b2ad:	call   0x65020420
    6502b2b2:	mov    DWORD PTR [rax],0x1c
    6502b2b8:	call   0x65020450
    6502b2bd:	mov    DWORD PTR [rax],0x0
    6502b2c3:	or     eax,0xffffffff
    6502b2c6:	mov    r12,QWORD PTR [rsp+0x648]
    6502b2ce:	mov    r15,QWORD PTR [rsp+0x5f0]
    6502b2d6:	mov    rcx,QWORD PTR [rsp+0x5e0]
    6502b2de:	xor    rcx,rsp
    6502b2e1:	call   0x6501e650
    6502b2e6:	add    rsp,0x5f8
    6502b2ed:	pop    r14
    6502b2ef:	pop    r13
    6502b2f1:	pop    rdi
    6502b2f2:	pop    rsi
    6502b2f3:	pop    rbp
    6502b2f4:	pop    rbx
    6502b2f5:	ret    
    6502b2f6:	int3   
    6502b2f7:	int3   
    6502b2f8:	int3   
    6502b2f9:	int3   
    6502b2fa:	int3   
    6502b2fb:	int3   
    6502b2fc:	int3   
    6502b2fd:	int3   
    6502b2fe:	int3   
    6502b2ff:	int3   
    6502b300:	mov    QWORD PTR [rsp+0x10],rbx
    6502b305:	mov    DWORD PTR [rsp+0x8],ecx
    6502b309:	push   rsi
    6502b30a:	push   rdi
    6502b30b:	push   r12
    6502b30d:	push   r13
    6502b30f:	push   r14
    6502b311:	sub    rsp,0x30
    6502b315:	mov    r12d,r8d
    6502b318:	mov    r13,rdx
    6502b31b:	movsxd rbx,ecx
    6502b31e:	cmp    ebx,0xfffffffe
    6502b321:	jne    0x6502b33f
    6502b323:	call   0x65020450
    6502b328:	xor    edi,edi
    6502b32a:	mov    DWORD PTR [rax],edi
    6502b32c:	call   0x65020420
    6502b331:	mov    DWORD PTR [rax],0x9
    6502b337:	or     eax,0xffffffff
    6502b33a:	jmp    0x6502b416
    6502b33f:	test   ecx,ecx
    6502b341:	js     0x6502b3eb
    6502b347:	cmp    ebx,DWORD PTR [rip+0x1dc37]        # 0x65048f84
    6502b34d:	jae    0x6502b3eb
    6502b353:	mov    rsi,rbx
    6502b356:	sar    rsi,0x5
    6502b35a:	lea    r14,[rip+0x1dc3f]        # 0x65048fa0
    6502b361:	mov    dil,bl
    6502b364:	and    edi,0x1f
    6502b367:	imul   rdi,rdi,0x58
    6502b36b:	mov    rax,QWORD PTR [r14+rsi*8]
    6502b36f:	mov    cl,BYTE PTR [rax+rdi*1+0x8]
    6502b373:	and    ecx,0x1
    6502b376:	jne    0x6502b3a5
    6502b378:	call   0x65020450
    6502b37d:	xor    edi,edi
    6502b37f:	mov    DWORD PTR [rax],edi
    6502b381:	call   0x65020420
    6502b386:	mov    DWORD PTR [rax],0x9
    6502b38c:	mov    QWORD PTR [rsp+0x20],rdi
    6502b391:	xor    r9d,r9d
    6502b394:	xor    r8d,r8d
    6502b397:	xor    edx,edx
    6502b399:	xor    ecx,ecx
    6502b39b:	call   0x6501d9c0
    6502b3a0:	or     eax,0xffffffff
    6502b3a3:	jmp    0x6502b416
    6502b3a5:	mov    ecx,ebx
    6502b3a7:	call   0x6502d940
    6502b3ac:	nop
    6502b3ad:	mov    rax,QWORD PTR [r14+rsi*8]
    6502b3b1:	test   BYTE PTR [rax+rdi*1+0x8],0x1
    6502b3b6:	je     0x6502b3c9
    6502b3b8:	mov    r8d,r12d
    6502b3bb:	mov    rdx,r13
    6502b3be:	mov    ecx,ebx
    6502b3c0:	call   0x6502aaf0
    6502b3c5:	mov    edi,eax
    6502b3c7:	jmp    0x6502b3e0
    6502b3c9:	call   0x65020420
    6502b3ce:	mov    DWORD PTR [rax],0x9
    6502b3d4:	call   0x65020450
    6502b3d9:	xor    edi,edi
    6502b3db:	mov    DWORD PTR [rax],edi
    6502b3dd:	or     edi,0xffffffff
    6502b3e0:	mov    ecx,ebx
    6502b3e2:	call   0x6502da10
    6502b3e7:	mov    eax,edi
    6502b3e9:	jmp    0x6502b416
    6502b3eb:	call   0x65020450
    6502b3f0:	xor    edi,edi
    6502b3f2:	mov    DWORD PTR [rax],edi
    6502b3f4:	call   0x65020420
    6502b3f9:	mov    DWORD PTR [rax],0x9
    6502b3ff:	mov    QWORD PTR [rsp+0x20],rdi
    6502b404:	xor    r9d,r9d
    6502b407:	xor    r8d,r8d
    6502b40a:	xor    edx,edx
    6502b40c:	xor    ecx,ecx
    6502b40e:	call   0x6501d9c0
    6502b413:	or     eax,0xffffffff
    6502b416:	mov    rbx,QWORD PTR [rsp+0x68]
    6502b41b:	add    rsp,0x30
    6502b41f:	pop    r14
    6502b421:	pop    r13
    6502b423:	pop    r12
    6502b425:	pop    rdi
    6502b426:	pop    rsi
    6502b427:	ret    
    6502b428:	int3   
    6502b429:	int3   
    6502b42a:	int3   
    6502b42b:	int3   
    6502b42c:	int3   
    6502b42d:	int3   
    6502b42e:	int3   
    6502b42f:	int3   
    6502b430:	rex push rbp
    6502b432:	sub    rsp,0x30
    6502b436:	mov    rbp,rdx
    6502b439:	mov    ecx,DWORD PTR [rbp+0x60]
    6502b43c:	call   0x6502da10
    6502b441:	add    rsp,0x30
    6502b445:	pop    rbp
    6502b446:	ret    
    6502b447:	int3   
    6502b448:	int3   
    6502b449:	int3   
    6502b44a:	int3   
    6502b44b:	int3   
    6502b44c:	int3   
    6502b44d:	int3   
    6502b44e:	int3   
    6502b44f:	int3   
    6502b450:	rex push rbx
    6502b452:	sub    rsp,0x20
    6502b456:	add    DWORD PTR [rip+0x1a583],0x1        # 0x650459e0
    6502b45d:	mov    rbx,rcx
    6502b460:	mov    ecx,0x1000
    6502b465:	call   0x65022a80
    6502b46a:	test   rax,rax
    6502b46d:	mov    QWORD PTR [rbx+0x10],rax
    6502b471:	je     0x6502b480
    6502b473:	or     DWORD PTR [rbx+0x18],0x8
    6502b477:	mov    DWORD PTR [rbx+0x24],0x1000
    6502b47e:	jmp    0x6502b493
    6502b480:	or     DWORD PTR [rbx+0x18],0x4
    6502b484:	lea    rax,[rbx+0x20]
    6502b488:	mov    DWORD PTR [rbx+0x24],0x2
    6502b48f:	mov    QWORD PTR [rbx+0x10],rax
    6502b493:	mov    rax,QWORD PTR [rbx+0x10]
    6502b497:	mov    DWORD PTR [rbx+0x8],0x0
    6502b49e:	mov    QWORD PTR [rbx],rax
    6502b4a1:	add    rsp,0x20
    6502b4a5:	pop    rbx
    6502b4a6:	ret    
    6502b4a7:	int3   
    6502b4a8:	int3   
    6502b4a9:	int3   
    6502b4aa:	int3   
    6502b4ab:	int3   
    6502b4ac:	int3   
    6502b4ad:	int3   
    6502b4ae:	int3   
    6502b4af:	int3   
    6502b4b0:	sub    rsp,0x38
    6502b4b4:	cmp    ecx,0xfffffffe
    6502b4b7:	jne    0x6502b4cb
    6502b4b9:	call   0x65020420
    6502b4be:	mov    DWORD PTR [rax],0x9
    6502b4c4:	xor    eax,eax
    6502b4c6:	add    rsp,0x38
    6502b4ca:	ret    
    6502b4cb:	test   ecx,ecx
    6502b4cd:	js     0x6502b501
    6502b4cf:	cmp    ecx,DWORD PTR [rip+0x1daaf]        # 0x65048f84
    6502b4d5:	jae    0x6502b501
    6502b4d7:	movsxd rax,ecx
    6502b4da:	lea    r8,[rip+0x1dabf]        # 0x65048fa0
    6502b4e1:	mov    cl,al
    6502b4e3:	mov    rdx,rax
    6502b4e6:	sar    rdx,0x5
    6502b4ea:	and    ecx,0x1f
    6502b4ed:	mov    rax,QWORD PTR [r8+rdx*8]
    6502b4f1:	imul   rcx,rcx,0x58
    6502b4f5:	mov    al,BYTE PTR [rax+rcx*1+0x8]
    6502b4f9:	and    eax,0x40
    6502b4fc:	add    rsp,0x38
    6502b500:	ret    
    6502b501:	call   0x65020420
    6502b506:	xor    r9d,r9d
    6502b509:	xor    r8d,r8d
    6502b50c:	xor    edx,edx
    6502b50e:	xor    ecx,ecx
    6502b510:	mov    QWORD PTR [rsp+0x20],0x0
    6502b519:	mov    DWORD PTR [rax],0x9
    6502b51f:	call   0x6501d9c0
    6502b524:	xor    eax,eax
    6502b526:	add    rsp,0x38
    6502b52a:	ret    
    6502b52b:	int3   
    6502b52c:	int3   
    6502b52d:	int3   
    6502b52e:	int3   
    6502b52f:	int3   
    6502b530:	lea    rax,[rip+0x18bc9]        # 0x65044100
    6502b537:	ret    
    6502b538:	int3   
    6502b539:	int3   
    6502b53a:	int3   
    6502b53b:	int3   
    6502b53c:	int3   
    6502b53d:	int3   
    6502b53e:	int3   
    6502b53f:	int3   
    6502b540:	rex push rbx
    6502b542:	sub    rsp,0x20
    6502b546:	mov    eax,DWORD PTR [rip+0x1da34]        # 0x65048f80
    6502b54c:	mov    ebx,0x14
    6502b551:	test   eax,eax
    6502b553:	jne    0x6502b55c
    6502b555:	mov    eax,0x200
    6502b55a:	jmp    0x6502b561
    6502b55c:	cmp    eax,ebx
    6502b55e:	cmovl  eax,ebx
    6502b561:	movsxd rcx,eax
    6502b564:	mov    edx,0x8
    6502b569:	mov    DWORD PTR [rip+0x1da11],eax        # 0x65048f80
    6502b56f:	call   0x65022af0
    6502b574:	test   rax,rax
    6502b577:	mov    QWORD PTR [rip+0x1c9f2],rax        # 0x65047f70
    6502b57e:	jne    0x6502b5a8
    6502b580:	lea    edx,[rax+0x8]
    6502b583:	mov    rcx,rbx
    6502b586:	mov    DWORD PTR [rip+0x1d9f4],ebx        # 0x65048f80
    6502b58c:	call   0x65022af0
    6502b591:	test   rax,rax
    6502b594:	mov    QWORD PTR [rip+0x1c9d5],rax        # 0x65047f70
    6502b59b:	jne    0x6502b5a8
    6502b59d:	mov    eax,0x1a
    6502b5a2:	add    rsp,0x20
    6502b5a6:	pop    rbx
    6502b5a7:	ret    
    6502b5a8:	xor    r8d,r8d
    6502b5ab:	lea    rdx,[rip+0x18b4e]        # 0x65044100
    6502b5b2:	mov    rcx,r8
    6502b5b5:	data16 data16 xchg ax,ax
    6502b5b9:	data16 xchg ax,ax
    6502b5bc:	data16 data16 xchg ax,ax
    6502b5c0:	mov    QWORD PTR [rcx+rax*1],rdx
    6502b5c4:	add    rcx,0x8
    6502b5c8:	add    rdx,0x30
    6502b5cc:	sub    rbx,0x1
    6502b5d0:	je     0x6502b5db
    6502b5d2:	mov    rax,QWORD PTR [rip+0x1c997]        # 0x65047f70
    6502b5d9:	jmp    0x6502b5c0
    6502b5db:	lea    rdx,[rip+0x18b3a]        # 0x6504411c
    6502b5e2:	mov    r10d,0x3
    6502b5e8:	lea    r11,[rip+0x1d9b1]        # 0x65048fa0
    6502b5ef:	nop
    6502b5f0:	mov    cl,r8b
    6502b5f3:	mov    rax,r8
    6502b5f6:	sar    rax,0x5
    6502b5fa:	and    ecx,0x1f
    6502b5fd:	mov    rax,QWORD PTR [r11+rax*8]
    6502b601:	imul   rcx,rcx,0x58
    6502b605:	mov    r9,QWORD PTR [rcx+rax*1]
    6502b609:	cmp    r9,0xffffffffffffffff
    6502b60d:	je     0x6502b61a
    6502b60f:	cmp    r9,0xfffffffffffffffe
    6502b613:	je     0x6502b61a
    6502b615:	test   r9,r9
    6502b618:	jne    0x6502b620
    6502b61a:	mov    DWORD PTR [rdx],0xfffffffe
    6502b620:	add    r8,0x1
    6502b624:	add    rdx,0x30
    6502b628:	sub    r10,0x1
    6502b62c:	jne    0x6502b5f0
    6502b62e:	xor    eax,eax
    6502b630:	add    rsp,0x20
    6502b634:	pop    rbx
    6502b635:	ret    
    6502b636:	int3   
    6502b637:	int3   
    6502b638:	int3   
    6502b639:	int3   
    6502b63a:	int3   
    6502b63b:	int3   
    6502b63c:	int3   
    6502b63d:	int3   
    6502b63e:	int3   
    6502b63f:	int3   
    6502b640:	sub    rsp,0x28
    6502b644:	call   0x6502def0
    6502b649:	cmp    BYTE PTR [rip+0x19bc4],0x0        # 0x65045214
    6502b650:	je     0x6502b657
    6502b652:	call   0x6502db70
    6502b657:	mov    rcx,QWORD PTR [rip+0x1c912]        # 0x65047f70
    6502b65e:	add    rsp,0x28
    6502b662:	jmp    0x6501fc00
    6502b667:	int3   
    6502b668:	int3   
    6502b669:	int3   
    6502b66a:	int3   
    6502b66b:	int3   
    6502b66c:	int3   
    6502b66d:	int3   
    6502b66e:	int3   
    6502b66f:	int3   
    6502b670:	rex push rbx
    6502b672:	sub    rsp,0x20
    6502b676:	mov    rbx,rcx
    6502b679:	lea    rcx,[rip+0x18a80]        # 0x65044100
    6502b680:	cmp    rbx,rcx
    6502b683:	jb     0x6502b6c5
    6502b685:	lea    rax,[rip+0x18e04]        # 0x65044490
    6502b68c:	cmp    rbx,rax
    6502b68f:	ja     0x6502b6c5
    6502b691:	mov    rdx,rbx
    6502b694:	movabs rax,0x2aaaaaaaaaaaaaab
    6502b69e:	sub    rdx,rcx
    6502b6a1:	imul   rdx
    6502b6a4:	sar    rdx,0x3
    6502b6a8:	mov    rcx,rdx
    6502b6ab:	shr    rcx,0x3f
    6502b6af:	lea    ecx,[rcx+rdx*1+0x10]
    6502b6b3:	call   0x65029930
    6502b6b8:	or     DWORD PTR [rbx+0x18],0x8000
    6502b6bf:	add    rsp,0x20
    6502b6c3:	pop    rbx
    6502b6c4:	ret    
    6502b6c5:	lea    rcx,[rbx+0x30]
    6502b6c9:	add    rsp,0x20
    6502b6cd:	pop    rbx
    6502b6ce:	rex.W jmp QWORD PTR [rip+0x8a43]        # 0x65034118
    6502b6d5:	int3   
    6502b6d6:	int3   
    6502b6d7:	int3   
    6502b6d8:	int3   
    6502b6d9:	int3   
    6502b6da:	int3   
    6502b6db:	int3   
    6502b6dc:	int3   
    6502b6dd:	int3   
    6502b6de:	int3   
    6502b6df:	int3   
    6502b6e0:	rex push rbx
    6502b6e2:	sub    rsp,0x20
    6502b6e6:	cmp    ecx,0x14
    6502b6e9:	mov    rbx,rdx
    6502b6ec:	jge    0x6502b703
    6502b6ee:	add    ecx,0x10
    6502b6f1:	call   0x65029930
    6502b6f6:	or     DWORD PTR [rbx+0x18],0x8000
    6502b6fd:	add    rsp,0x20
    6502b701:	pop    rbx
    6502b702:	ret    
    6502b703:	lea    rcx,[rdx+0x30]
    6502b707:	add    rsp,0x20
    6502b70b:	pop    rbx
    6502b70c:	rex.W jmp QWORD PTR [rip+0x8a05]        # 0x65034118
    6502b713:	int3   
    6502b714:	int3   
    6502b715:	int3   
    6502b716:	int3   
    6502b717:	int3   
    6502b718:	int3   
    6502b719:	int3   
    6502b71a:	int3   
    6502b71b:	int3   
    6502b71c:	int3   
    6502b71d:	int3   
    6502b71e:	int3   
    6502b71f:	int3   
    6502b720:	lea    rdx,[rip+0x189d9]        # 0x65044100
    6502b727:	cmp    rcx,rdx
    6502b72a:	jb     0x6502b763
    6502b72c:	lea    rax,[rip+0x18d5d]        # 0x65044490
    6502b733:	cmp    rcx,rax
    6502b736:	ja     0x6502b763
    6502b738:	and    DWORD PTR [rcx+0x18],0xffff7fff
    6502b73f:	sub    rcx,rdx
    6502b742:	movabs rax,0x2aaaaaaaaaaaaaab
    6502b74c:	imul   rcx
    6502b74f:	sar    rdx,0x3
    6502b753:	mov    rcx,rdx
    6502b756:	shr    rcx,0x3f
    6502b75a:	lea    ecx,[rcx+rdx*1+0x10]
    6502b75e:	jmp    0x65029800
    6502b763:	add    rcx,0x30
    6502b767:	rex.W jmp QWORD PTR [rip+0x89b2]        # 0x65034120
    6502b76e:	int3   
    6502b76f:	int3   
    6502b770:	cmp    ecx,0x14
    6502b773:	jge    0x6502b784
    6502b775:	and    DWORD PTR [rdx+0x18],0xffff7fff
    6502b77c:	add    ecx,0x10
    6502b77f:	jmp    0x65029800
    6502b784:	lea    rcx,[rdx+0x30]
    6502b788:	rex.W jmp QWORD PTR [rip+0x8991]        # 0x65034120
    6502b78f:	int3   
    6502b790:	sub    rsp,0x38
    6502b794:	test   rcx,rcx
    6502b797:	jne    0x6502b7c4
    6502b799:	call   0x65020420
    6502b79e:	xor    r9d,r9d
    6502b7a1:	xor    r8d,r8d
    6502b7a4:	xor    edx,edx
    6502b7a6:	xor    ecx,ecx
    6502b7a8:	mov    QWORD PTR [rsp+0x20],0x0
    6502b7b1:	mov    DWORD PTR [rax],0x16
    6502b7b7:	call   0x6501d9c0
    6502b7bc:	or     eax,0xffffffff
    6502b7bf:	add    rsp,0x38
    6502b7c3:	ret    
    6502b7c4:	mov    eax,DWORD PTR [rcx+0x1c]
    6502b7c7:	add    rsp,0x38
    6502b7cb:	ret    
    6502b7cc:	int3   
    6502b7cd:	int3   
    6502b7ce:	int3   
    6502b7cf:	int3   
    6502b7d0:	mov    QWORD PTR [rsp+0x18],rbx
    6502b7d5:	mov    QWORD PTR [rsp+0x20],rbp
    6502b7da:	push   rsi
    6502b7db:	push   rdi
    6502b7dc:	push   r12
    6502b7de:	sub    rsp,0x40
    6502b7e2:	mov    rax,QWORD PTR [rip+0x17937]        # 0x65043120
    6502b7e9:	xor    rax,rsp
    6502b7ec:	mov    QWORD PTR [rsp+0x30],rax
    6502b7f1:	test   BYTE PTR [rdx+0x18],0x40
    6502b7f5:	mov    rdi,rdx
    6502b7f8:	movzx  ebp,cx
    6502b7fb:	mov    WORD PTR [rsp+0x20],cx
    6502b800:	jne    0x6502b9fb
    6502b806:	mov    rcx,rdx
    6502b809:	call   0x6502b790
    6502b80e:	lea    rsi,[rip+0x181bb]        # 0x650439d0
    6502b815:	lea    r12,[rip+0x1d784]        # 0x65048fa0
    6502b81c:	cmp    eax,0xffffffff
    6502b81f:	je     0x6502b856
    6502b821:	mov    rcx,rdi
    6502b824:	call   0x6502b790
    6502b829:	cmp    eax,0xfffffffe
    6502b82c:	je     0x6502b856
    6502b82e:	mov    rcx,rdi
    6502b831:	call   0x6502b790
    6502b836:	mov    rcx,rdi
    6502b839:	movsxd rbx,eax
    6502b83c:	sar    rbx,0x5
    6502b840:	call   0x6502b790
    6502b845:	mov    r11d,eax
    6502b848:	and    r11d,0x1f
    6502b84c:	imul   r11,r11,0x58
    6502b850:	add    r11,QWORD PTR [r12+rbx*8]
    6502b854:	jmp    0x6502b859
    6502b856:	mov    r11,rsi
    6502b859:	movzx  ecx,BYTE PTR [r11+0x38]
    6502b85e:	and    cl,0x7f
    6502b861:	cmp    cl,0x2
    6502b864:	jne    0x6502b882
    6502b866:	add    DWORD PTR [rdi+0x8],0xfffffffe
    6502b86a:	js     0x6502ba10
    6502b870:	mov    rcx,QWORD PTR [rdi]
    6502b873:	mov    ax,bp
    6502b876:	mov    WORD PTR [rcx],bp
    6502b879:	add    QWORD PTR [rdi],0x2
    6502b87d:	jmp    0x6502ba1b
    6502b882:	mov    rcx,rdi
    6502b885:	call   0x6502b790
    6502b88a:	cmp    eax,0xffffffff
    6502b88d:	je     0x6502b8c4
    6502b88f:	mov    rcx,rdi
    6502b892:	call   0x6502b790
    6502b897:	cmp    eax,0xfffffffe
    6502b89a:	je     0x6502b8c4
    6502b89c:	mov    rcx,rdi
    6502b89f:	call   0x6502b790
    6502b8a4:	mov    rcx,rdi
    6502b8a7:	movsxd rbx,eax
    6502b8aa:	sar    rbx,0x5
    6502b8ae:	call   0x6502b790
    6502b8b3:	mov    r11d,eax
    6502b8b6:	and    r11d,0x1f
    6502b8ba:	imul   r11,r11,0x58
    6502b8be:	add    r11,QWORD PTR [r12+rbx*8]
    6502b8c2:	jmp    0x6502b8c7
    6502b8c4:	mov    r11,rsi
    6502b8c7:	movzx  eax,BYTE PTR [r11+0x38]
    6502b8cc:	and    al,0x7f
    6502b8ce:	cmp    al,0x1
    6502b8d0:	jne    0x6502b944
    6502b8d2:	add    DWORD PTR [rdi+0x8],0xffffffff
    6502b8d6:	js     0x6502b8ed
    6502b8d8:	mov    rax,QWORD PTR [rdi]
    6502b8db:	mov    BYTE PTR [rax],bpl
    6502b8de:	mov    rax,QWORD PTR [rdi]
    6502b8e1:	movzx  ecx,BYTE PTR [rax]
    6502b8e4:	add    rax,0x1
    6502b8e8:	mov    QWORD PTR [rdi],rax
    6502b8eb:	jmp    0x6502b8fb
    6502b8ed:	movsx  ecx,bpl
    6502b8f1:	mov    rdx,rdi
    6502b8f4:	call   0x65023f30
    6502b8f9:	mov    ecx,eax
    6502b8fb:	cmp    ecx,0xffffffff
    6502b8fe:	jne    0x6502b909
    6502b900:	or     ax,0xffff
    6502b904:	jmp    0x6502ba1b
    6502b909:	add    DWORD PTR [rdi+0x8],0xffffffff
    6502b90d:	js     0x6502b928
    6502b90f:	mov    rcx,QWORD PTR [rdi]
    6502b912:	movzx  eax,BYTE PTR [rsp+0x21]
    6502b917:	mov    BYTE PTR [rcx],al
    6502b919:	mov    rax,QWORD PTR [rdi]
    6502b91c:	movzx  ecx,BYTE PTR [rax]
    6502b91f:	add    rax,0x1
    6502b923:	mov    QWORD PTR [rdi],rax
    6502b926:	jmp    0x6502b937
    6502b928:	movsx  ecx,BYTE PTR [rsp+0x21]
    6502b92d:	mov    rdx,rdi
    6502b930:	call   0x65023f30
    6502b935:	mov    ecx,eax
    6502b937:	cmp    ecx,0xffffffff
    6502b93a:	je     0x6502b900
    6502b93c:	mov    ax,bp
    6502b93f:	jmp    0x6502ba1b
    6502b944:	mov    rcx,rdi
    6502b947:	call   0x6502b790
    6502b94c:	cmp    eax,0xffffffff
    6502b94f:	je     0x6502b982
    6502b951:	mov    rcx,rdi
    6502b954:	call   0x6502b790
    6502b959:	cmp    eax,0xfffffffe
    6502b95c:	je     0x6502b982
    6502b95e:	mov    rcx,rdi
    6502b961:	call   0x6502b790
    6502b966:	mov    rcx,rdi
    6502b969:	movsxd rbx,eax
    6502b96c:	sar    rbx,0x5
    6502b970:	call   0x6502b790
    6502b975:	mov    esi,eax
    6502b977:	and    esi,0x1f
    6502b97a:	imul   rsi,rsi,0x58
    6502b97e:	add    rsi,QWORD PTR [r12+rbx*8]
    6502b982:	test   BYTE PTR [rsi+0x8],0x80
    6502b986:	je     0x6502b9fb
    6502b988:	lea    rdx,[rsp+0x24]
    6502b98d:	lea    rcx,[rsp+0x20]
    6502b992:	movzx  r9d,bp
    6502b996:	mov    r8d,0x5
    6502b99c:	call   0x6502d4d0
    6502b9a1:	test   eax,eax
    6502b9a3:	jne    0x6502b900
    6502b9a9:	xor    esi,esi
    6502b9ab:	cmp    DWORD PTR [rsp+0x20],esi
    6502b9af:	jle    0x6502b93c
    6502b9b1:	lea    rbx,[rsp+0x24]
    6502b9b6:	add    DWORD PTR [rdi+0x8],0xffffffff
    6502b9ba:	js     0x6502b9d3
    6502b9bc:	mov    rcx,QWORD PTR [rdi]
    6502b9bf:	movzx  eax,BYTE PTR [rbx]
    6502b9c2:	mov    BYTE PTR [rcx],al
    6502b9c4:	mov    rax,QWORD PTR [rdi]
    6502b9c7:	movzx  ecx,BYTE PTR [rax]
    6502b9ca:	add    rax,0x1
    6502b9ce:	mov    QWORD PTR [rdi],rax
    6502b9d1:	jmp    0x6502b9e0
    6502b9d3:	movsx  ecx,BYTE PTR [rbx]
    6502b9d6:	mov    rdx,rdi
    6502b9d9:	call   0x65023f30
    6502b9de:	mov    ecx,eax
    6502b9e0:	cmp    ecx,0xffffffff
    6502b9e3:	je     0x6502b900
    6502b9e9:	add    esi,0x1
    6502b9ec:	add    rbx,0x1
    6502b9f0:	cmp    esi,DWORD PTR [rsp+0x20]
    6502b9f4:	jl     0x6502b9b6
    6502b9f6:	mov    ax,bp
    6502b9f9:	jmp    0x6502ba1b
    6502b9fb:	add    DWORD PTR [rdi+0x8],0xfffffffe
    6502b9ff:	js     0x6502ba10
    6502ba01:	mov    rax,QWORD PTR [rdi]
    6502ba04:	mov    WORD PTR [rax],bp
    6502ba07:	add    QWORD PTR [rdi],0x2
    6502ba0b:	mov    ax,bp
    6502ba0e:	jmp    0x6502ba1b
    6502ba10:	mov    rdx,rdi
    6502ba13:	movzx  ecx,bp
    6502ba16:	call   0x6502df00
    6502ba1b:	mov    rcx,QWORD PTR [rsp+0x30]
    6502ba20:	xor    rcx,rsp
    6502ba23:	call   0x6501e650
    6502ba28:	mov    rbx,QWORD PTR [rsp+0x70]
    6502ba2d:	mov    rbp,QWORD PTR [rsp+0x78]
    6502ba32:	add    rsp,0x40
    6502ba36:	pop    r12
    6502ba38:	pop    rdi
    6502ba39:	pop    rsi
    6502ba3a:	ret    
    6502ba3b:	int3   
    6502ba3c:	int3   
    6502ba3d:	int3   
    6502ba3e:	int3   
    6502ba3f:	int3   
    6502ba40:	mov    rcx,QWORD PTR [rip+0x176d9]        # 0x65043120
    6502ba47:	xor    eax,eax
    6502ba49:	or     rcx,0x1
    6502ba4d:	cmp    QWORD PTR [rip+0x19f94],rcx        # 0x650459e8
    6502ba54:	sete   al
    6502ba57:	ret    
    6502ba58:	int3   
    6502ba59:	int3   
    6502ba5a:	int3   
    6502ba5b:	int3   
    6502ba5c:	int3   
    6502ba5d:	int3   
    6502ba5e:	int3   
    6502ba5f:	int3   
    6502ba60:	mov    QWORD PTR [rsp+0x8],rbx
    6502ba65:	mov    QWORD PTR [rsp+0x10],rsi
    6502ba6a:	push   rdi
    6502ba6b:	sub    rsp,0x50
    6502ba6f:	test   rdx,rdx
    6502ba72:	mov    rsi,r8
    6502ba75:	mov    rdi,rdx
    6502ba78:	mov    rbx,rcx
    6502ba7b:	je     0x6502ba91
    6502ba7d:	test   r8,r8
    6502ba80:	je     0x6502ba91
    6502ba82:	cmp    BYTE PTR [rdx],0x0
    6502ba85:	jne    0x6502baa3
    6502ba87:	test   rcx,rcx
    6502ba8a:	je     0x6502ba91
    6502ba8c:	mov    WORD PTR [rcx],0x0
    6502ba91:	xor    eax,eax
    6502ba93:	mov    rbx,QWORD PTR [rsp+0x60]
    6502ba98:	mov    rsi,QWORD PTR [rsp+0x68]
    6502ba9d:	add    rsp,0x50
    6502baa1:	pop    rdi
    6502baa2:	ret    
    6502baa3:	test   r9,r9
    6502baa6:	mov    BYTE PTR [rsp+0x48],0x0
    6502baab:	jne    0x6502bb42
    6502bab1:	call   0x65020a30
    6502bab6:	mov    QWORD PTR [rsp+0x40],rax
    6502babb:	mov    r11,rax
    6502babe:	mov    rcx,QWORD PTR [rax+0xc0]
    6502bac5:	cmp    rcx,QWORD PTR [rip+0x17ed4]        # 0x650439a0
    6502bacc:	mov    QWORD PTR [rsp+0x30],rcx
    6502bad1:	mov    rax,QWORD PTR [rax+0xb8]
    6502bad8:	mov    QWORD PTR [rsp+0x38],rax
    6502badd:	je     0x6502bb02
    6502badf:	mov    ecx,DWORD PTR [r11+0xc8]
    6502bae6:	test   DWORD PTR [rip+0x17d3c],ecx        # 0x65043828
    6502baec:	jne    0x6502bb02
    6502baee:	call   0x65023e90
    6502baf3:	mov    r11,QWORD PTR [rsp+0x40]
    6502baf8:	mov    QWORD PTR [rsp+0x30],rax
    6502bafd:	mov    rax,QWORD PTR [rsp+0x38]
    6502bb02:	cmp    rax,QWORD PTR [rip+0x17c17]        # 0x65043720
    6502bb09:	je     0x6502bb29
    6502bb0b:	mov    eax,DWORD PTR [r11+0xc8]
    6502bb12:	test   DWORD PTR [rip+0x17d10],eax        # 0x65043828
    6502bb18:	jne    0x6502bb29
    6502bb1a:	call   0x65023340
    6502bb1f:	mov    r11,QWORD PTR [rsp+0x40]
    6502bb24:	mov    QWORD PTR [rsp+0x38],rax
    6502bb29:	test   BYTE PTR [r11+0xc8],0x2
    6502bb31:	jne    0x6502bb5a
    6502bb33:	or     DWORD PTR [r11+0xc8],0x2
    6502bb3b:	mov    BYTE PTR [rsp+0x48],0x1
    6502bb40:	jmp    0x6502bb55
    6502bb42:	mov    rax,QWORD PTR [r9]
    6502bb45:	lea    rcx,[rsp+0x30]
    6502bb4a:	mov    QWORD PTR [rcx],rax
    6502bb4d:	mov    rax,QWORD PTR [r9+0x8]
    6502bb51:	mov    QWORD PTR [rcx+0x8],rax
    6502bb55:	mov    r11,QWORD PTR [rsp+0x40]
    6502bb5a:	mov    rax,QWORD PTR [rsp+0x30]
    6502bb5f:	cmp    DWORD PTR [rax+0x14],0x0
    6502bb63:	jne    0x6502bb94
    6502bb65:	test   rbx,rbx
    6502bb68:	je     0x6502bb70
    6502bb6a:	movzx  eax,BYTE PTR [rdi]
    6502bb6d:	mov    WORD PTR [rbx],ax
    6502bb70:	cmp    BYTE PTR [rsp+0x48],0x0
    6502bb75:	je     0x6502bb7f
    6502bb77:	and    DWORD PTR [r11+0xc8],0xfffffffd
    6502bb7f:	mov    eax,0x1
    6502bb84:	mov    rbx,QWORD PTR [rsp+0x60]
    6502bb89:	mov    rsi,QWORD PTR [rsp+0x68]
    6502bb8e:	add    rsp,0x50
    6502bb92:	pop    rdi
    6502bb93:	ret    
    6502bb94:	movzx  ecx,BYTE PTR [rdi]
    6502bb97:	lea    rdx,[rsp+0x30]
    6502bb9c:	call   0x65028e70
    6502bba1:	test   eax,eax
    6502bba3:	je     0x6502bc5b
    6502bba9:	mov    rcx,QWORD PTR [rsp+0x30]
    6502bbae:	mov    r9d,DWORD PTR [rcx+0x10c]
    6502bbb5:	cmp    r9d,0x1
    6502bbb9:	jle    0x6502bbeb
    6502bbbb:	cmp    esi,r9d
    6502bbbe:	jl     0x6502bbeb
    6502bbc0:	mov    ecx,DWORD PTR [rcx+0x4]
    6502bbc3:	xor    eax,eax
    6502bbc5:	test   rbx,rbx
    6502bbc8:	setne  al
    6502bbcb:	mov    r8,rdi
    6502bbce:	mov    edx,0x9
    6502bbd3:	mov    DWORD PTR [rsp+0x28],eax
    6502bbd7:	mov    QWORD PTR [rsp+0x20],rbx
    6502bbdc:	call   QWORD PTR [rip+0x8446]        # 0x65034028
    6502bbe2:	test   eax,eax
    6502bbe4:	mov    rcx,QWORD PTR [rsp+0x30]
    6502bbe9:	jne    0x6502bbfd
    6502bbeb:	movsxd rax,DWORD PTR [rcx+0x10c]
    6502bbf2:	cmp    rsi,rax
    6502bbf5:	jb     0x6502bc2a
    6502bbf7:	cmp    BYTE PTR [rdi+0x1],0x0
    6502bbfb:	je     0x6502bc2a
    6502bbfd:	cmp    BYTE PTR [rsp+0x48],0x0
    6502bc02:	mov    eax,DWORD PTR [rcx+0x10c]
    6502bc08:	je     0x6502ba93
    6502bc0e:	mov    rcx,QWORD PTR [rsp+0x40]
    6502bc13:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    6502bc1a:	mov    rbx,QWORD PTR [rsp+0x60]
    6502bc1f:	mov    rsi,QWORD PTR [rsp+0x68]
    6502bc24:	add    rsp,0x50
    6502bc28:	pop    rdi
    6502bc29:	ret    
    6502bc2a:	call   0x65020420
    6502bc2f:	mov    DWORD PTR [rax],0x2a
    6502bc35:	cmp    BYTE PTR [rsp+0x48],0x0
    6502bc3a:	je     0x6502bc48
    6502bc3c:	mov    rax,QWORD PTR [rsp+0x40]
    6502bc41:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502bc48:	or     eax,0xffffffff
    6502bc4b:	mov    rbx,QWORD PTR [rsp+0x60]
    6502bc50:	mov    rsi,QWORD PTR [rsp+0x68]
    6502bc55:	add    rsp,0x50
    6502bc59:	pop    rdi
    6502bc5a:	ret    
    6502bc5b:	xor    eax,eax
    6502bc5d:	mov    r9d,0x1
    6502bc63:	test   rbx,rbx
    6502bc66:	setne  al
    6502bc69:	lea    edx,[r9+0x8]
    6502bc6d:	mov    r8,rdi
    6502bc70:	mov    DWORD PTR [rsp+0x28],eax
    6502bc74:	mov    rax,QWORD PTR [rsp+0x30]
    6502bc79:	mov    QWORD PTR [rsp+0x20],rbx
    6502bc7e:	mov    ecx,DWORD PTR [rax+0x4]
    6502bc81:	call   QWORD PTR [rip+0x83a1]        # 0x65034028
    6502bc87:	test   eax,eax
    6502bc89:	je     0x6502bc2a
    6502bc8b:	cmp    BYTE PTR [rsp+0x48],0x0
    6502bc90:	je     0x6502bc9e
    6502bc92:	mov    rax,QWORD PTR [rsp+0x40]
    6502bc97:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502bc9e:	mov    rbx,QWORD PTR [rsp+0x60]
    6502bca3:	mov    rsi,QWORD PTR [rsp+0x68]
    6502bca8:	mov    eax,0x1
    6502bcad:	add    rsp,0x50
    6502bcb1:	pop    rdi
    6502bcb2:	ret    
    6502bcb3:	int3   
    6502bcb4:	int3   
    6502bcb5:	int3   
    6502bcb6:	int3   
    6502bcb7:	int3   
    6502bcb8:	int3   
    6502bcb9:	int3   
    6502bcba:	int3   
    6502bcbb:	int3   
    6502bcbc:	int3   
    6502bcbd:	int3   
    6502bcbe:	int3   
    6502bcbf:	int3   
    6502bcc0:	xor    r9d,r9d
    6502bcc3:	jmp    0x6502ba60
    6502bcc8:	int3   
    6502bcc9:	int3   
    6502bcca:	int3   
    6502bccb:	int3   
    6502bccc:	int3   
    6502bccd:	int3   
    6502bcce:	int3   
    6502bccf:	int3   
    6502bcd0:	test   edx,edx
    6502bcd2:	jle    0x6502bd58
    6502bcd8:	mov    QWORD PTR [rsp+0x8],rbx
    6502bcdd:	mov    QWORD PTR [rsp+0x10],rbp
    6502bce2:	mov    QWORD PTR [rsp+0x18],rsi
    6502bce7:	push   rdi
    6502bce8:	sub    rsp,0x20
    6502bcec:	mov    rdi,r9
    6502bcef:	mov    rbx,r8
    6502bcf2:	mov    esi,edx
    6502bcf4:	movzx  ebp,cl
    6502bcf7:	sub    esi,0x1
    6502bcfa:	test   BYTE PTR [rbx+0x18],0x40
    6502bcfe:	je     0x6502bd07
    6502bd00:	cmp    QWORD PTR [rbx+0x10],0x0
    6502bd05:	je     0x6502bd2e
    6502bd07:	add    DWORD PTR [rbx+0x8],0xffffffff
    6502bd0b:	js     0x6502bd1d
    6502bd0d:	mov    rax,QWORD PTR [rbx]
    6502bd10:	mov    BYTE PTR [rax],bpl
    6502bd13:	add    QWORD PTR [rbx],0x1
    6502bd17:	movzx  eax,bpl
    6502bd1b:	jmp    0x6502bd29
    6502bd1d:	movsx  ecx,bpl
    6502bd21:	mov    rdx,rbx
    6502bd24:	call   0x65023f30
    6502bd29:	cmp    eax,0xffffffff
    6502bd2c:	je     0x6502bd3e
    6502bd2e:	add    DWORD PTR [rdi],0x1
    6502bd31:	mov    eax,DWORD PTR [rdi]
    6502bd33:	cmp    eax,0xffffffff
    6502bd36:	je     0x6502bd44
    6502bd38:	test   esi,esi
    6502bd3a:	jg     0x6502bcf7
    6502bd3c:	jmp    0x6502bd44
    6502bd3e:	mov    DWORD PTR [rdi],0xffffffff
    6502bd44:	mov    rbx,QWORD PTR [rsp+0x30]
    6502bd49:	mov    rbp,QWORD PTR [rsp+0x38]
    6502bd4e:	mov    rsi,QWORD PTR [rsp+0x40]
    6502bd53:	add    rsp,0x20
    6502bd57:	pop    rdi
    6502bd58:	ret    0x0
    6502bd5b:	int3   
    6502bd5c:	int3   
    6502bd5d:	int3   
    6502bd5e:	int3   
    6502bd5f:	int3   
    6502bd60:	mov    QWORD PTR [rsp+0x8],rbx
    6502bd65:	mov    QWORD PTR [rsp+0x10],rbp
    6502bd6a:	mov    QWORD PTR [rsp+0x18],rsi
    6502bd6f:	push   rdi
    6502bd70:	sub    rsp,0x20
    6502bd74:	test   BYTE PTR [r8+0x18],0x40
    6502bd79:	mov    rdi,r9
    6502bd7c:	mov    rbx,r8
    6502bd7f:	mov    esi,edx
    6502bd81:	mov    rbp,rcx
    6502bd84:	je     0x6502bd95
    6502bd86:	cmp    QWORD PTR [r8+0x10],0x0
    6502bd8b:	jne    0x6502bd95
    6502bd8d:	add    DWORD PTR [r9],edx
    6502bd90:	jmp    0x6502be16
    6502bd95:	test   edx,edx
    6502bd97:	jle    0x6502be16
    6502bd9d:	data16 xchg ax,ax
    6502bda0:	movzx  ecx,BYTE PTR [rbp+0x0]
    6502bda4:	sub    esi,0x1
    6502bda7:	test   BYTE PTR [rbx+0x18],0x40
    6502bdab:	je     0x6502bdb4
    6502bdad:	cmp    QWORD PTR [rbx+0x10],0x0
    6502bdb2:	je     0x6502bddc
    6502bdb4:	add    DWORD PTR [rbx+0x8],0xffffffff
    6502bdb8:	js     0x6502bdc8
    6502bdba:	mov    rax,QWORD PTR [rbx]
    6502bdbd:	mov    BYTE PTR [rax],cl
    6502bdbf:	add    QWORD PTR [rbx],0x1
    6502bdc3:	movzx  eax,cl
    6502bdc6:	jmp    0x6502bdd3
    6502bdc8:	movsx  ecx,cl
    6502bdcb:	mov    rdx,rbx
    6502bdce:	call   0x65023f30
    6502bdd3:	cmp    eax,0xffffffff
    6502bdd6:	jne    0x6502bddc
    6502bdd8:	mov    DWORD PTR [rdi],eax
    6502bdda:	jmp    0x6502bddf
    6502bddc:	add    DWORD PTR [rdi],0x1
    6502bddf:	add    rbp,0x1
    6502bde3:	cmp    DWORD PTR [rdi],0xffffffff
    6502bde6:	jne    0x6502be12
    6502bde8:	call   0x65020420
    6502bded:	cmp    DWORD PTR [rax],0x2a
    6502bdf0:	jne    0x6502be16
    6502bdf2:	test   BYTE PTR [rbx+0x18],0x40
    6502bdf6:	je     0x6502bdff
    6502bdf8:	cmp    QWORD PTR [rbx+0x10],0x0
    6502bdfd:	je     0x6502be0f
    6502bdff:	add    DWORD PTR [rbx+0x8],0xffffffff
    6502be03:	js     0x6502be2b
    6502be05:	mov    rax,QWORD PTR [rbx]
    6502be08:	mov    BYTE PTR [rax],0x3f
    6502be0b:	add    QWORD PTR [rbx],0x1
    6502be0f:	add    DWORD PTR [rdi],0x1
    6502be12:	test   esi,esi
    6502be14:	jg     0x6502bda0
    6502be16:	mov    rbx,QWORD PTR [rsp+0x30]
    6502be1b:	mov    rbp,QWORD PTR [rsp+0x38]
    6502be20:	mov    rsi,QWORD PTR [rsp+0x40]
    6502be25:	add    rsp,0x20
    6502be29:	pop    rdi
    6502be2a:	ret    
    6502be2b:	mov    rdx,rbx
    6502be2e:	mov    ecx,0x3f
    6502be33:	call   0x65023f30
    6502be38:	cmp    eax,0xffffffff
    6502be3b:	jne    0x6502be0f
    6502be3d:	mov    DWORD PTR [rdi],eax
    6502be3f:	jmp    0x6502be12
    6502be41:	int3   
    6502be42:	int3   
    6502be43:	int3   
    6502be44:	int3   
    6502be45:	int3   
    6502be46:	int3   
    6502be47:	int3   
    6502be48:	int3   
    6502be49:	int3   
    6502be4a:	int3   
    6502be4b:	int3   
    6502be4c:	int3   
    6502be4d:	int3   
    6502be4e:	int3   
    6502be4f:	int3   
    6502be50:	rex push rbp
    6502be52:	push   rsi
    6502be53:	push   rdi
    6502be54:	push   r12
    6502be56:	push   r14
    6502be58:	push   r15
    6502be5a:	sub    rsp,0x2e8
    6502be61:	mov    rax,QWORD PTR [rip+0x172b8]        # 0x65043120
    6502be68:	xor    rax,rsp
    6502be6b:	mov    QWORD PTR [rsp+0x2c8],rax
    6502be73:	xor    ebp,ebp
    6502be75:	test   r8,r8
    6502be78:	mov    rdi,r9
    6502be7b:	mov    QWORD PTR [rsp+0x60],r9
    6502be80:	mov    rsi,rdx
    6502be83:	mov    r12,rcx
    6502be86:	mov    DWORD PTR [rsp+0x98],ebp
    6502be8d:	mov    r14d,ebp
    6502be90:	mov    DWORD PTR [rsp+0x40],ebp
    6502be94:	mov    DWORD PTR [rsp+0x68],ebp
    6502be98:	mov    r15d,ebp
    6502be9b:	mov    DWORD PTR [rsp+0x48],ebp
    6502be9f:	mov    DWORD PTR [rsp+0x54],ebp
    6502bea3:	mov    DWORD PTR [rsp+0x70],ebp
    6502bea7:	mov    DWORD PTR [rsp+0x4c],ebp
    6502beab:	mov    BYTE PTR [rsp+0x90],bpl
    6502beb3:	jne    0x6502bf63
    6502beb9:	call   0x65020a30
    6502bebe:	mov    QWORD PTR [rsp+0x88],rax
    6502bec6:	mov    rdx,rax
    6502bec9:	mov    rcx,QWORD PTR [rax+0xc0]
    6502bed0:	cmp    rcx,QWORD PTR [rip+0x17ac9]        # 0x650439a0
    6502bed7:	mov    QWORD PTR [rsp+0x78],rcx
    6502bedc:	mov    rax,QWORD PTR [rax+0xb8]
    6502bee3:	mov    QWORD PTR [rsp+0x80],rax
    6502beeb:	je     0x6502bf15
    6502beed:	mov    ecx,DWORD PTR [rdx+0xc8]
    6502bef3:	test   DWORD PTR [rip+0x1792f],ecx        # 0x65043828
    6502bef9:	jne    0x6502bf15
    6502befb:	call   0x65023e90
    6502bf00:	mov    rdx,QWORD PTR [rsp+0x88]
    6502bf08:	mov    QWORD PTR [rsp+0x78],rax
    6502bf0d:	mov    rax,QWORD PTR [rsp+0x80]
    6502bf15:	cmp    rax,QWORD PTR [rip+0x17804]        # 0x65043720
    6502bf1c:	je     0x6502bf41
    6502bf1e:	mov    eax,DWORD PTR [rdx+0xc8]
    6502bf24:	test   DWORD PTR [rip+0x178fe],eax        # 0x65043828
    6502bf2a:	jne    0x6502bf41
    6502bf2c:	call   0x65023340
    6502bf31:	mov    rdx,QWORD PTR [rsp+0x88]
    6502bf39:	mov    QWORD PTR [rsp+0x80],rax
    6502bf41:	test   BYTE PTR [rdx+0xc8],0x2
    6502bf48:	jne    0x6502bf7e
    6502bf4a:	or     DWORD PTR [rdx+0xc8],0x2
    6502bf51:	mov    rdx,QWORD PTR [rsp+0x88]
    6502bf59:	mov    BYTE PTR [rsp+0x90],0x1
    6502bf61:	jmp    0x6502bf7e
    6502bf63:	mov    rax,QWORD PTR [r8]
    6502bf66:	lea    rcx,[rsp+0x78]
    6502bf6b:	mov    QWORD PTR [rcx],rax
    6502bf6e:	mov    rax,QWORD PTR [r8+0x8]
    6502bf72:	mov    QWORD PTR [rcx+0x8],rax
    6502bf76:	mov    rdx,QWORD PTR [rsp+0x88]
    6502bf7e:	test   r12,r12
    6502bf81:	jne    0x6502bfc3
    6502bf83:	call   0x65020420
    6502bf88:	xor    r9d,r9d
    6502bf8b:	xor    r8d,r8d
    6502bf8e:	xor    edx,edx
    6502bf90:	xor    ecx,ecx
    6502bf92:	mov    QWORD PTR [rsp+0x20],rbp
    6502bf97:	mov    DWORD PTR [rax],0x16
    6502bf9d:	call   0x6501d9c0
    6502bfa2:	cmp    BYTE PTR [rsp+0x90],bpl
    6502bfaa:	je     0x6502bfbb
    6502bfac:	mov    rax,QWORD PTR [rsp+0x88]
    6502bfb4:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502bfbb:	or     eax,0xffffffff
    6502bfbe:	jmp    0x6502cdab
    6502bfc3:	test   BYTE PTR [r12+0x18],0x40
    6502bfc9:	mov    QWORD PTR [rsp+0x2e0],rbx
    6502bfd1:	lea    r10,[rip+0xfffffffffffd4028]        # 0x65000000
    6502bfd8:	mov    QWORD PTR [rsp+0x2d8],r13
    6502bfe0:	jne    0x6502c0b1
    6502bfe6:	mov    rcx,r12
    6502bfe9:	call   0x6502b790
    6502bfee:	lea    rbx,[rip+0x179db]        # 0x650439d0
    6502bff5:	cmp    eax,0xffffffff
    6502bff8:	je     0x6502c03d
    6502bffa:	mov    rcx,r12
    6502bffd:	call   0x6502b790
    6502c002:	cmp    eax,0xfffffffe
    6502c005:	je     0x6502c03d
    6502c007:	mov    rcx,r12
    6502c00a:	call   0x6502b790
    6502c00f:	lea    r13,[rip+0xfffffffffffd3fea]        # 0x65000000
    6502c016:	movsxd rcx,eax
    6502c019:	sar    rcx,0x5
    6502c01d:	mov    rdi,QWORD PTR [r13+rcx*8+0x48fa0]
    6502c025:	mov    rcx,r12
    6502c028:	call   0x6502b790
    6502c02d:	mov    r11d,eax
    6502c030:	and    r11d,0x1f
    6502c034:	imul   r11,r11,0x58
    6502c038:	add    r11,rdi
    6502c03b:	jmp    0x6502c047
    6502c03d:	mov    r11,rbx
    6502c040:	lea    r13,[rip+0xfffffffffffd3fb9]        # 0x65000000
    6502c047:	test   BYTE PTR [r11+0x38],0x7f
    6502c04c:	jne    0x6502c0e2
    6502c052:	mov    rcx,r12
    6502c055:	call   0x6502b790
    6502c05a:	cmp    eax,0xffffffff
    6502c05d:	je     0x6502c097
    6502c05f:	mov    rcx,r12
    6502c062:	call   0x6502b790
    6502c067:	cmp    eax,0xfffffffe
    6502c06a:	je     0x6502c097
    6502c06c:	mov    rcx,r12
    6502c06f:	call   0x6502b790
    6502c074:	movsxd rcx,eax
    6502c077:	sar    rcx,0x5
    6502c07b:	mov    rdi,QWORD PTR [r13+rcx*8+0x48fa0]
    6502c083:	mov    rcx,r12
    6502c086:	call   0x6502b790
    6502c08b:	mov    ebx,eax
    6502c08d:	and    ebx,0x1f
    6502c090:	imul   rbx,rbx,0x58
    6502c094:	add    rbx,rdi
    6502c097:	test   BYTE PTR [rbx+0x38],0x80
    6502c09b:	jne    0x6502c0e2
    6502c09d:	mov    rdx,QWORD PTR [rsp+0x88]
    6502c0a5:	mov    rdi,QWORD PTR [rsp+0x60]
    6502c0aa:	lea    r10,[rip+0xfffffffffffd3f4f]        # 0x65000000
    6502c0b1:	test   rsi,rsi
    6502c0b4:	jne    0x6502c10e
    6502c0b6:	call   0x65020420
    6502c0bb:	xor    r9d,r9d
    6502c0be:	xor    r8d,r8d
    6502c0c1:	xor    edx,edx
    6502c0c3:	xor    ecx,ecx
    6502c0c5:	mov    QWORD PTR [rsp+0x20],rbp
    6502c0ca:	mov    DWORD PTR [rax],0x16
    6502c0d0:	call   0x6501d9c0
    6502c0d5:	cmp    BYTE PTR [rsp+0x90],bpl
    6502c0dd:	jmp    0x6502cd6a
    6502c0e2:	call   0x65020420
    6502c0e7:	xor    r9d,r9d
    6502c0ea:	xor    r8d,r8d
    6502c0ed:	xor    edx,edx
    6502c0ef:	xor    ecx,ecx
    6502c0f1:	mov    QWORD PTR [rsp+0x20],rbp
    6502c0f6:	mov    DWORD PTR [rax],0x16
    6502c0fc:	call   0x6501d9c0
    6502c101:	cmp    BYTE PTR [rsp+0x90],bpl
    6502c109:	jmp    0x6502cd6a
    6502c10e:	movzx  r13d,BYTE PTR [rsi]
    6502c112:	xor    r9d,r9d
    6502c115:	test   r13b,r13b
    6502c118:	mov    DWORD PTR [rsp+0x44],r9d
    6502c11d:	mov    DWORD PTR [rsp+0x50],r9d
    6502c122:	mov    r8d,r9d
    6502c125:	mov    QWORD PTR [rsp+0xa0],r9
    6502c12d:	je     0x6502cd88
    6502c133:	mov    rbx,QWORD PTR [rsp+0xb0]
    6502c13b:	mov    edx,0x200
    6502c140:	mov    r11d,0x7fffffff
    6502c146:	data16 data16 xchg ax,ax
    6502c14a:	data16 xchg ax,ax
    6502c14d:	data16 xchg ax,ax
    6502c150:	add    rsi,0x1
    6502c154:	test   ebp,ebp
    6502c156:	mov    QWORD PTR [rsp+0xb8],rsi
    6502c15e:	js     0x6502cd34
    6502c164:	lea    eax,[r13-0x20]
    6502c168:	cmp    al,0x58
    6502c16a:	ja     0x6502c17d
    6502c16c:	movsx  rax,r13b
    6502c170:	mov    cl,BYTE PTR [rax+r10*1+0x36e00]
    6502c178:	and    ecx,0xf
    6502c17b:	jmp    0x6502c180
    6502c17d:	mov    ecx,r9d
    6502c180:	movsxd rax,ecx
    6502c183:	lea    rcx,[rax+rax*8]
    6502c187:	movsxd rax,r8d
    6502c18a:	add    rcx,rax
    6502c18d:	movzx  r8d,BYTE PTR [rcx+r10*1+0x36e20]
    6502c196:	shr    r8d,0x4
    6502c19a:	cmp    r8d,0x8
    6502c19e:	mov    DWORD PTR [rsp+0x6c],r8d
    6502c1a3:	je     0x6502cd3f
    6502c1a9:	cmp    r8d,0x7
    6502c1ad:	ja     0x6502cd22
    6502c1b3:	mov    ecx,DWORD PTR [r10+r8*4+0x2cdcc]
    6502c1bb:	mov    eax,r8d
    6502c1be:	add    rcx,r10
    6502c1c1:	jmp    rcx
    6502c1c3:	or     r15d,0xffffffff
    6502c1c7:	mov    DWORD PTR [rsp+0x9c],r9d
    6502c1cf:	mov    DWORD PTR [rsp+0x70],r9d
    6502c1d4:	mov    DWORD PTR [rsp+0x68],r9d
    6502c1d9:	mov    DWORD PTR [rsp+0x54],r9d
    6502c1de:	mov    r14d,r9d
    6502c1e1:	mov    DWORD PTR [rsp+0x48],r15d
    6502c1e6:	mov    DWORD PTR [rsp+0x40],r9d
    6502c1eb:	mov    DWORD PTR [rsp+0x4c],r9d
    6502c1f0:	jmp    0x6502cd22
    6502c1f5:	cmp    r13b,0x20
    6502c1f9:	je     0x6502c250
    6502c1fb:	cmp    r13b,0x23
    6502c1ff:	je     0x6502c241
    6502c201:	cmp    r13b,0x2b
    6502c205:	je     0x6502c233
    6502c207:	cmp    r13b,0x2d
    6502c20b:	je     0x6502c225
    6502c20d:	cmp    r13b,0x30
    6502c211:	jne    0x6502cd22
    6502c217:	or     r14d,0x8
    6502c21b:	mov    DWORD PTR [rsp+0x40],r14d
    6502c220:	jmp    0x6502cd22
    6502c225:	or     r14d,0x4
    6502c229:	mov    DWORD PTR [rsp+0x40],r14d
    6502c22e:	jmp    0x6502cd22
    6502c233:	or     r14d,0x1
    6502c237:	mov    DWORD PTR [rsp+0x40],r14d
    6502c23c:	jmp    0x6502cd22
    6502c241:	bts    r14d,0x7
    6502c246:	mov    DWORD PTR [rsp+0x40],r14d
    6502c24b:	jmp    0x6502cd22
    6502c250:	or     r14d,0x2
    6502c254:	mov    DWORD PTR [rsp+0x40],r14d
    6502c259:	jmp    0x6502cd22
    6502c25e:	cmp    r13b,0x2a
    6502c262:	jne    0x6502c28f
    6502c264:	mov    eax,DWORD PTR [rdi]
    6502c266:	add    rdi,0x8
    6502c26a:	test   eax,eax
    6502c26c:	mov    QWORD PTR [rsp+0x60],rdi
    6502c271:	mov    DWORD PTR [rsp+0x68],eax
    6502c275:	jns    0x6502cd22
    6502c27b:	or     r14d,0x4
    6502c27f:	neg    eax
    6502c281:	mov    DWORD PTR [rsp+0x68],eax
    6502c285:	mov    DWORD PTR [rsp+0x40],r14d
    6502c28a:	jmp    0x6502cd22
    6502c28f:	mov    eax,DWORD PTR [rsp+0x68]
    6502c293:	lea    ecx,[rax+rax*4]
    6502c296:	movsx  eax,r13b
    6502c29a:	lea    eax,[rax+rcx*2-0x30]
    6502c29e:	mov    DWORD PTR [rsp+0x68],eax
    6502c2a2:	jmp    0x6502cd22
    6502c2a7:	mov    r15d,r9d
    6502c2aa:	mov    DWORD PTR [rsp+0x48],r9d
    6502c2af:	jmp    0x6502cd22
    6502c2b4:	cmp    r13b,0x2a
    6502c2b8:	jne    0x6502c2e2
    6502c2ba:	mov    r15d,DWORD PTR [rdi]
    6502c2bd:	add    rdi,0x8
    6502c2c1:	test   r15d,r15d
    6502c2c4:	mov    QWORD PTR [rsp+0x60],rdi
    6502c2c9:	mov    DWORD PTR [rsp+0x48],r15d
    6502c2ce:	jns    0x6502cd22
    6502c2d4:	or     r15d,0xffffffff
    6502c2d8:	mov    DWORD PTR [rsp+0x48],r15d
    6502c2dd:	jmp    0x6502cd22
    6502c2e2:	lea    ecx,[r15+r15*4]
    6502c2e6:	movsx  eax,r13b
    6502c2ea:	lea    r15d,[rax+rcx*2-0x30]
    6502c2ef:	mov    DWORD PTR [rsp+0x48],r15d
    6502c2f4:	jmp    0x6502cd22
    6502c2f9:	cmp    r13b,0x49
    6502c2fd:	je     0x6502c358
    6502c2ff:	cmp    r13b,0x68
    6502c303:	je     0x6502c34a
    6502c305:	cmp    r13b,0x6c
    6502c309:	je     0x6502c324
    6502c30b:	cmp    r13b,0x77
    6502c30f:	jne    0x6502cd22
    6502c315:	bts    r14d,0xb
    6502c31a:	mov    DWORD PTR [rsp+0x40],r14d
    6502c31f:	jmp    0x6502cd22
    6502c324:	cmp    BYTE PTR [rsi],0x6c
    6502c327:	jne    0x6502c33c
    6502c329:	add    rsi,0x1
    6502c32d:	bts    r14d,0xc
    6502c332:	mov    DWORD PTR [rsp+0x40],r14d
    6502c337:	jmp    0x6502cd22
    6502c33c:	or     r14d,0x10
    6502c340:	mov    DWORD PTR [rsp+0x40],r14d
    6502c345:	jmp    0x6502cd22
    6502c34a:	or     r14d,0x20
    6502c34e:	mov    DWORD PTR [rsp+0x40],r14d
    6502c353:	jmp    0x6502cd22
    6502c358:	movzx  eax,BYTE PTR [rsi]
    6502c35b:	bts    r14d,0xf
    6502c360:	cmp    al,0x36
    6502c362:	mov    DWORD PTR [rsp+0x40],r14d
    6502c367:	jne    0x6502c382
    6502c369:	cmp    BYTE PTR [rsi+0x1],0x34
    6502c36d:	jne    0x6502c382
    6502c36f:	add    rsi,0x2
    6502c373:	bts    r14d,0xf
    6502c378:	mov    DWORD PTR [rsp+0x40],r14d
    6502c37d:	jmp    0x6502cd22
    6502c382:	cmp    al,0x33
    6502c384:	jne    0x6502c39f
    6502c386:	cmp    BYTE PTR [rsi+0x1],0x32
    6502c38a:	jne    0x6502c39f
    6502c38c:	add    rsi,0x2
    6502c390:	btr    r14d,0xf
    6502c395:	mov    DWORD PTR [rsp+0x40],r14d
    6502c39a:	jmp    0x6502cd22
    6502c39f:	cmp    al,0x64
    6502c3a1:	je     0x6502cd22
    6502c3a7:	cmp    al,0x69
    6502c3a9:	je     0x6502cd22
    6502c3af:	cmp    al,0x6f
    6502c3b1:	je     0x6502cd22
    6502c3b7:	cmp    al,0x75
    6502c3b9:	je     0x6502cd22
    6502c3bf:	cmp    al,0x78
    6502c3c1:	je     0x6502cd22
    6502c3c7:	cmp    al,0x58
    6502c3c9:	je     0x6502cd22
    6502c3cf:	mov    DWORD PTR [rsp+0x6c],r9d
    6502c3d4:	movzx  edi,r13b
    6502c3d8:	lea    rdx,[rsp+0x78]
    6502c3dd:	mov    DWORD PTR [rsp+0x4c],r9d
    6502c3e2:	mov    ecx,edi
    6502c3e4:	call   0x65028e70
    6502c3e9:	test   eax,eax
    6502c3eb:	je     0x6502c442
    6502c3ed:	test   BYTE PTR [r12+0x18],0x40
    6502c3f3:	je     0x6502c402
    6502c3f5:	cmp    QWORD PTR [r12+0x10],0x0
    6502c3fb:	jne    0x6502c402
    6502c3fd:	add    ebp,0x1
    6502c400:	jmp    0x6502c432
    6502c402:	add    DWORD PTR [r12+0x8],0xffffffff
    6502c408:	js     0x6502c418
    6502c40a:	mov    rax,QWORD PTR [r12]
    6502c40e:	mov    BYTE PTR [rax],r13b
    6502c411:	add    QWORD PTR [r12],0x1
    6502c416:	jmp    0x6502c426
    6502c418:	movsx  ecx,r13b
    6502c41c:	mov    rdx,r12
    6502c41f:	call   0x65023f30
    6502c424:	mov    edi,eax
    6502c426:	cmp    edi,0xffffffff
    6502c429:	jne    0x6502c42f
    6502c42b:	or     ebp,edi
    6502c42d:	jmp    0x6502c432
    6502c42f:	add    ebp,0x1
    6502c432:	mov    r13b,BYTE PTR [rsi]
    6502c435:	add    rsi,0x1
    6502c439:	test   r13b,r13b
    6502c43c:	je     0x6502cd3f
    6502c442:	test   BYTE PTR [r12+0x18],0x40
    6502c448:	je     0x6502c478
    6502c44a:	cmp    QWORD PTR [r12+0x10],0x0
    6502c450:	jne    0x6502c478
    6502c452:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502c457:	add    ebp,0x1
    6502c45a:	lea    r10,[rip+0xfffffffffffd3b9f]        # 0x65000000
    6502c461:	mov    DWORD PTR [rsp+0x44],ebp
    6502c465:	xor    r9d,r9d
    6502c468:	mov    edx,0x200
    6502c46d:	mov    r11d,0x7fffffff
    6502c473:	jmp    0x6502cd22
    6502c478:	add    DWORD PTR [r12+0x8],0xffffffff
    6502c47e:	js     0x6502c492
    6502c480:	mov    rax,QWORD PTR [r12]
    6502c484:	mov    BYTE PTR [rax],r13b
    6502c487:	add    QWORD PTR [r12],0x1
    6502c48c:	movzx  eax,r13b
    6502c490:	jmp    0x6502c49e
    6502c492:	movsx  ecx,r13b
    6502c496:	mov    rdx,r12
    6502c499:	call   0x65023f30
    6502c49e:	cmp    eax,0xffffffff
    6502c4a1:	jne    0x6502c4c8
    6502c4a3:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502c4a8:	or     ebp,eax
    6502c4aa:	lea    r10,[rip+0xfffffffffffd3b4f]        # 0x65000000
    6502c4b1:	mov    DWORD PTR [rsp+0x44],ebp
    6502c4b5:	xor    r9d,r9d
    6502c4b8:	mov    edx,0x200
    6502c4bd:	mov    r11d,0x7fffffff
    6502c4c3:	jmp    0x6502cd22
    6502c4c8:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502c4cd:	add    ebp,0x1
    6502c4d0:	lea    r10,[rip+0xfffffffffffd3b29]        # 0x65000000
    6502c4d7:	mov    DWORD PTR [rsp+0x44],ebp
    6502c4db:	xor    r9d,r9d
    6502c4de:	mov    edx,0x200
    6502c4e3:	mov    r11d,0x7fffffff
    6502c4e9:	jmp    0x6502cd22
    6502c4ee:	movsx  eax,r13b
    6502c4f2:	add    eax,0xffffffbf
    6502c4f5:	cmp    eax,0x37
    6502c4f8:	ja     0x6502ca35
    6502c4fe:	cdqe   
    6502c500:	movzx  eax,BYTE PTR [r10+rax*1+0x2ce28]
    6502c509:	mov    ecx,DWORD PTR [r10+rax*4+0x2cdec]
    6502c511:	add    rcx,r10
    6502c514:	jmp    rcx
    6502c516:	test   r14d,0x830
    6502c51d:	jne    0x6502c529
    6502c51f:	bts    r14d,0xb
    6502c524:	mov    DWORD PTR [rsp+0x40],r14d
    6502c529:	test   r14d,0x810
    6502c530:	je     0x6502c571
    6502c532:	movzx  r9d,WORD PTR [rdi]
    6502c536:	add    rdi,0x8
    6502c53a:	mov    r8,rdx
    6502c53d:	lea    rdx,[rsp+0xc0]
    6502c545:	lea    rcx,[rsp+0x50]
    6502c54a:	mov    QWORD PTR [rsp+0x60],rdi
    6502c54f:	call   0x6502d4d0
    6502c554:	test   eax,eax
    6502c556:	je     0x6502c58c
    6502c558:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c55c:	mov    DWORD PTR [rsp+0x70],0x1
    6502c564:	lea    rbx,[rsp+0xc0]
    6502c56c:	jmp    0x6502ca45
    6502c571:	movzx  eax,BYTE PTR [rdi]
    6502c574:	add    rdi,0x8
    6502c578:	mov    DWORD PTR [rsp+0x50],0x1
    6502c580:	mov    BYTE PTR [rsp+0xc0],al
    6502c587:	mov    QWORD PTR [rsp+0x60],rdi
    6502c58c:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c590:	lea    rbx,[rsp+0xc0]
    6502c598:	jmp    0x6502ca45
    6502c59d:	mov    rax,QWORD PTR [rdi]
    6502c5a0:	add    rdi,0x8
    6502c5a4:	test   rax,rax
    6502c5a7:	mov    QWORD PTR [rsp+0x60],rdi
    6502c5ac:	je     0x6502c5ec
    6502c5ae:	mov    rbx,QWORD PTR [rax+0x8]
    6502c5b2:	test   rbx,rbx
    6502c5b5:	je     0x6502c5ec
    6502c5b7:	bt     r14d,0xb
    6502c5bc:	jae    0x6502c5d8
    6502c5be:	movsx  eax,WORD PTR [rax]
    6502c5c1:	mov    esi,0x1
    6502c5c6:	cdq    
    6502c5c7:	mov    DWORD PTR [rsp+0x4c],esi
    6502c5cb:	sub    eax,edx
    6502c5cd:	sar    eax,1
    6502c5cf:	mov    DWORD PTR [rsp+0x50],eax
    6502c5d3:	jmp    0x6502ca45
    6502c5d8:	movsx  eax,WORD PTR [rax]
    6502c5db:	mov    esi,r9d
    6502c5de:	mov    DWORD PTR [rsp+0x4c],r9d
    6502c5e3:	mov    DWORD PTR [rsp+0x50],eax
    6502c5e7:	jmp    0x6502ca45
    6502c5ec:	mov    rbx,QWORD PTR [rip+0x174ed]        # 0x65043ae0
    6502c5f3:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c5f7:	or     rcx,0xffffffffffffffff
    6502c5fb:	xor    eax,eax
    6502c5fd:	mov    rdi,rbx
    6502c600:	repnz scas al,BYTE PTR es:[rdi]
    6502c602:	not    rcx
    6502c605:	sub    rcx,0x1
    6502c609:	mov    DWORD PTR [rsp+0x50],ecx
    6502c60d:	jmp    0x6502ca45
    6502c612:	test   r14d,0x830
    6502c619:	jne    0x6502c625
    6502c61b:	bts    r14d,0xb
    6502c620:	mov    DWORD PTR [rsp+0x40],r14d
    6502c625:	mov    rbx,QWORD PTR [rdi]
    6502c628:	cmp    r15d,0xffffffff
    6502c62c:	mov    eax,r15d
    6502c62f:	cmove  eax,r11d
    6502c633:	add    rdi,0x8
    6502c637:	test   r14d,0x810
    6502c63e:	mov    QWORD PTR [rsp+0x60],rdi
    6502c643:	je     0x6502c67f
    6502c645:	test   rbx,rbx
    6502c648:	mov    esi,0x1
    6502c64d:	cmove  rbx,QWORD PTR [rip+0x17493]        # 0x65043ae8
    6502c655:	test   eax,eax
    6502c657:	mov    DWORD PTR [rsp+0x4c],esi
    6502c65b:	mov    rcx,rbx
    6502c65e:	je     0x6502c670
    6502c660:	sub    eax,esi
    6502c662:	cmp    WORD PTR [rcx],0x0
    6502c666:	je     0x6502c670
    6502c668:	add    rcx,0x2
    6502c66c:	test   eax,eax
    6502c66e:	jne    0x6502c660
    6502c670:	sub    rcx,rbx
    6502c673:	sar    rcx,1
    6502c676:	mov    DWORD PTR [rsp+0x50],ecx
    6502c67a:	jmp    0x6502ca45
    6502c67f:	test   rbx,rbx
    6502c682:	cmove  rbx,QWORD PTR [rip+0x17456]        # 0x65043ae0
    6502c68a:	test   eax,eax
    6502c68c:	mov    rcx,rbx
    6502c68f:	je     0x6502c6a1
    6502c691:	sub    eax,0x1
    6502c694:	cmp    BYTE PTR [rcx],0x0
    6502c697:	je     0x6502c6a1
    6502c699:	add    rcx,0x1
    6502c69d:	test   eax,eax
    6502c69f:	jne    0x6502c691
    6502c6a1:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c6a5:	sub    ecx,ebx
    6502c6a7:	mov    DWORD PTR [rsp+0x50],ecx
    6502c6ab:	jmp    0x6502ca45
    6502c6b0:	add    rdi,0x8
    6502c6b4:	mov    QWORD PTR [rsp+0x60],rdi
    6502c6b9:	mov    rdi,QWORD PTR [rdi-0x8]
    6502c6bd:	call   0x6502ba40
    6502c6c2:	test   eax,eax
    6502c6c4:	je     0x6502cd3f
    6502c6ca:	test   r14b,0x20
    6502c6ce:	je     0x6502c6e0
    6502c6d0:	mov    WORD PTR [rdi],bp
    6502c6d3:	mov    DWORD PTR [rsp+0x70],0x1
    6502c6db:	jmp    0x6502ccb5
    6502c6e0:	mov    DWORD PTR [rdi],ebp
    6502c6e2:	mov    DWORD PTR [rsp+0x70],0x1
    6502c6ea:	jmp    0x6502ccb5
    6502c6ef:	mov    DWORD PTR [rsp+0x9c],0x1
    6502c6fa:	add    r13b,0x20
    6502c6fe:	or     r14d,0x40
    6502c702:	test   r15d,r15d
    6502c705:	lea    rbx,[rsp+0xc0]
    6502c70d:	mov    DWORD PTR [rsp+0x40],r14d
    6502c712:	mov    esi,edx
    6502c714:	jns    0x6502c723
    6502c716:	mov    r15d,0x6
    6502c71c:	mov    DWORD PTR [rsp+0x48],r15d
    6502c721:	jmp    0x6502c780
    6502c723:	test   r15d,r15d
    6502c726:	jne    0x6502c73b
    6502c728:	cmp    r13b,0x67
    6502c72c:	jne    0x6502c780
    6502c72e:	mov    r15d,0x1
    6502c734:	mov    DWORD PTR [rsp+0x48],r15d
    6502c739:	jmp    0x6502c780
    6502c73b:	cmp    r15d,edx
    6502c73e:	jle    0x6502c749
    6502c740:	mov    r15d,edx
    6502c743:	mov    DWORD PTR [rsp+0x48],edx
    6502c747:	jmp    0x6502c752
    6502c749:	cmp    r15d,0xa3
    6502c750:	jle    0x6502c780
    6502c752:	lea    edi,[r15+0x15d]
    6502c759:	movsxd rcx,edi
    6502c75c:	call   0x65022a80
    6502c761:	test   rax,rax
    6502c764:	mov    QWORD PTR [rsp+0xa0],rax
    6502c76c:	je     0x6502c775
    6502c76e:	mov    rbx,rax
    6502c771:	mov    esi,edi
    6502c773:	jmp    0x6502c780
    6502c775:	mov    r15d,0xa3
    6502c77b:	mov    DWORD PTR [rsp+0x48],r15d
    6502c780:	mov    rax,QWORD PTR [rsp+0x60]
    6502c785:	mov    rcx,QWORD PTR [rip+0x17754]        # 0x65043ee0
    6502c78c:	movsx  edi,r13b
    6502c790:	add    rax,0x8
    6502c794:	movsxd rsi,esi
    6502c797:	mov    QWORD PTR [rsp+0x60],rax
    6502c79c:	mov    rax,QWORD PTR [rax-0x8]
    6502c7a0:	mov    QWORD PTR [rsp+0xb0],rax
    6502c7a8:	call   0x650206e0
    6502c7ad:	lea    rcx,[rsp+0x78]
    6502c7b2:	mov    QWORD PTR [rsp+0x30],rcx
    6502c7b7:	mov    ecx,DWORD PTR [rsp+0x9c]
    6502c7be:	mov    r9d,edi
    6502c7c1:	mov    DWORD PTR [rsp+0x28],ecx
    6502c7c5:	lea    rcx,[rsp+0xb0]
    6502c7cd:	mov    r8,rsi
    6502c7d0:	mov    rdx,rbx
    6502c7d3:	mov    DWORD PTR [rsp+0x20],r15d
    6502c7d8:	call   rax
    6502c7da:	mov    edi,r14d
    6502c7dd:	and    edi,0x80
    6502c7e3:	je     0x6502c800
    6502c7e5:	test   r15d,r15d
    6502c7e8:	jne    0x6502c800
    6502c7ea:	mov    rcx,QWORD PTR [rip+0x17707]        # 0x65043ef8
    6502c7f1:	call   0x650206e0
    6502c7f6:	lea    rdx,[rsp+0x78]
    6502c7fb:	mov    rcx,rbx
    6502c7fe:	call   rax
    6502c800:	cmp    r13b,0x67
    6502c804:	jne    0x6502c820
    6502c806:	test   edi,edi
    6502c808:	jne    0x6502c820
    6502c80a:	mov    rcx,QWORD PTR [rip+0x176df]        # 0x65043ef0
    6502c811:	call   0x650206e0
    6502c816:	lea    rdx,[rsp+0x78]
    6502c81b:	mov    rcx,rbx
    6502c81e:	call   rax
    6502c820:	cmp    BYTE PTR [rbx],0x2d
    6502c823:	jne    0x6502c833
    6502c825:	bts    r14d,0x8
    6502c82a:	add    rbx,0x1
    6502c82e:	mov    DWORD PTR [rsp+0x40],r14d
    6502c833:	mov    esi,DWORD PTR [rsp+0x4c]
    6502c837:	or     rcx,0xffffffffffffffff
    6502c83b:	xor    eax,eax
    6502c83d:	mov    rdi,rbx
    6502c840:	repnz scas al,BYTE PTR es:[rdi]
    6502c842:	not    rcx
    6502c845:	sub    rcx,0x1
    6502c849:	mov    DWORD PTR [rsp+0x50],ecx
    6502c84d:	jmp    0x6502ca45
    6502c852:	mov    eax,DWORD PTR [rsp+0x54]
    6502c856:	or     r14d,0x40
    6502c85a:	mov    r8d,0xa
    6502c860:	mov    DWORD PTR [rsp+0x40],r14d
    6502c865:	jmp    0x6502c8de
    6502c867:	mov    eax,DWORD PTR [rsp+0x54]
    6502c86b:	mov    r8d,0xa
    6502c871:	jmp    0x6502c8de
    6502c873:	bts    r14d,0xf
    6502c878:	mov    r15d,0x10
    6502c87e:	mov    DWORD PTR [rsp+0x40],r14d
    6502c883:	mov    eax,0x7
    6502c888:	mov    DWORD PTR [rsp+0x98],eax
    6502c88f:	jmp    0x6502c89d
    6502c891:	mov    eax,0x27
    6502c896:	mov    DWORD PTR [rsp+0x98],eax
    6502c89d:	test   r14b,r14b
    6502c8a0:	mov    r8d,0x10
    6502c8a6:	jns    0x6502c8d4
    6502c8a8:	add    al,0x51
    6502c8aa:	mov    BYTE PTR [rsp+0x58],0x30
    6502c8af:	mov    BYTE PTR [rsp+0x59],al
    6502c8b3:	lea    eax,[r8-0xe]
    6502c8b7:	jmp    0x6502c8de
    6502c8b9:	test   r14b,r14b
    6502c8bc:	mov    r8d,0x8
    6502c8c2:	jns    0x6502c8da
    6502c8c4:	mov    eax,DWORD PTR [rsp+0x54]
    6502c8c8:	bts    r14d,0x9
    6502c8cd:	mov    DWORD PTR [rsp+0x40],r14d
    6502c8d2:	jmp    0x6502c8de
    6502c8d4:	mov    eax,DWORD PTR [rsp+0x54]
    6502c8d8:	jmp    0x6502c8de
    6502c8da:	mov    eax,DWORD PTR [rsp+0x54]
    6502c8de:	bt     r14d,0xf
    6502c8e3:	jae    0x6502c8f4
    6502c8e5:	add    rdi,0x8
    6502c8e9:	mov    QWORD PTR [rsp+0x60],rdi
    6502c8ee:	mov    rdi,QWORD PTR [rdi-0x8]
    6502c8f2:	jmp    0x6502c956
    6502c8f4:	bt     r14d,0xc
    6502c8f9:	jae    0x6502c90a
    6502c8fb:	add    rdi,0x8
    6502c8ff:	mov    QWORD PTR [rsp+0x60],rdi
    6502c904:	mov    rdi,QWORD PTR [rdi-0x8]
    6502c908:	jmp    0x6502c956
    6502c90a:	test   r14b,0x20
    6502c90e:	je     0x6502c935
    6502c910:	test   r14b,0x40
    6502c914:	je     0x6502c926
    6502c916:	add    rdi,0x8
    6502c91a:	mov    QWORD PTR [rsp+0x60],rdi
    6502c91f:	movsx  rdi,WORD PTR [rdi-0x8]
    6502c924:	jmp    0x6502c956
    6502c926:	add    rdi,0x8
    6502c92a:	mov    QWORD PTR [rsp+0x60],rdi
    6502c92f:	movzx  edi,WORD PTR [rdi-0x8]
    6502c933:	jmp    0x6502c956
    6502c935:	test   r14b,0x40
    6502c939:	je     0x6502c94a
    6502c93b:	add    rdi,0x8
    6502c93f:	mov    QWORD PTR [rsp+0x60],rdi
    6502c944:	movsxd rdi,DWORD PTR [rdi-0x8]
    6502c948:	jmp    0x6502c956
    6502c94a:	add    rdi,0x8
    6502c94e:	mov    QWORD PTR [rsp+0x60],rdi
    6502c953:	mov    edi,DWORD PTR [rdi-0x8]
    6502c956:	test   r14b,0x40
    6502c95a:	je     0x6502c96e
    6502c95c:	test   rdi,rdi
    6502c95f:	jns    0x6502c96e
    6502c961:	neg    rdi
    6502c964:	bts    r14d,0x8
    6502c969:	mov    DWORD PTR [rsp+0x40],r14d
    6502c96e:	bt     r14d,0xf
    6502c973:	jb     0x6502c97e
    6502c975:	bt     r14d,0xc
    6502c97a:	jb     0x6502c97e
    6502c97c:	mov    edi,edi
    6502c97e:	test   r15d,r15d
    6502c981:	jns    0x6502c98b
    6502c983:	mov    r15d,0x1
    6502c989:	jmp    0x6502c99b
    6502c98b:	and    r14d,0xfffffff7
    6502c98f:	cmp    r15d,edx
    6502c992:	cmovg  r15d,edx
    6502c996:	mov    DWORD PTR [rsp+0x40],r14d
    6502c99b:	mov    r14d,DWORD PTR [rsp+0x98]
    6502c9a3:	test   rdi,rdi
    6502c9a6:	lea    rbx,[rsp+0x2bf]
    6502c9ae:	cmove  eax,r9d
    6502c9b2:	mov    DWORD PTR [rsp+0x54],eax
    6502c9b6:	data16 data16 xchg ax,ax
    6502c9ba:	data16 xchg ax,ax
    6502c9bd:	data16 xchg ax,ax
    6502c9c0:	mov    ecx,r15d
    6502c9c3:	sub    r15d,0x1
    6502c9c7:	test   ecx,ecx
    6502c9c9:	jg     0x6502c9d0
    6502c9cb:	test   rdi,rdi
    6502c9ce:	je     0x6502c9f1
    6502c9d0:	xor    edx,edx
    6502c9d2:	mov    rax,rdi
    6502c9d5:	movsxd rcx,r8d
    6502c9d8:	div    rcx
    6502c9db:	mov    rdi,rax
    6502c9de:	lea    eax,[rdx+0x30]
    6502c9e1:	cmp    eax,0x39
    6502c9e4:	jle    0x6502c9e9
    6502c9e6:	add    eax,r14d
    6502c9e9:	mov    BYTE PTR [rbx],al
    6502c9eb:	sub    rbx,0x1
    6502c9ef:	jmp    0x6502c9c0
    6502c9f1:	mov    r14d,DWORD PTR [rsp+0x40]
    6502c9f6:	lea    rax,[rsp+0x2bf]
    6502c9fe:	mov    DWORD PTR [rsp+0x48],r15d
    6502ca03:	sub    eax,ebx
    6502ca05:	add    rbx,0x1
    6502ca09:	bt     r14d,0x9
    6502ca0e:	mov    DWORD PTR [rsp+0x50],eax
    6502ca12:	jae    0x6502ca41
    6502ca14:	test   eax,eax
    6502ca16:	je     0x6502ca1d
    6502ca18:	cmp    BYTE PTR [rbx],0x30
    6502ca1b:	je     0x6502ca3b
    6502ca1d:	mov    esi,DWORD PTR [rsp+0x4c]
    6502ca21:	sub    rbx,0x1
    6502ca25:	add    DWORD PTR [rsp+0x50],0x1
    6502ca2a:	mov    BYTE PTR [rbx],0x30
    6502ca2d:	jmp    0x6502ca45
    6502ca2f:	mov    esi,DWORD PTR [rsp+0x4c]
    6502ca33:	jmp    0x6502ca45
    6502ca35:	mov    esi,DWORD PTR [rsp+0x4c]
    6502ca39:	jmp    0x6502ca45
    6502ca3b:	mov    esi,DWORD PTR [rsp+0x4c]
    6502ca3f:	jmp    0x6502ca45
    6502ca41:	mov    esi,DWORD PTR [rsp+0x4c]
    6502ca45:	cmp    DWORD PTR [rsp+0x70],0x0
    6502ca4a:	jne    0x6502ccb5
    6502ca50:	test   r14b,0x40
    6502ca54:	je     0x6502ca99
    6502ca56:	bt     r14d,0x8
    6502ca5b:	jae    0x6502ca6d
    6502ca5d:	mov    edi,0x1
    6502ca62:	mov    BYTE PTR [rsp+0x58],0x2d
    6502ca67:	mov    DWORD PTR [rsp+0x54],edi
    6502ca6b:	jmp    0x6502caa3
    6502ca6d:	test   r14b,0x1
    6502ca71:	je     0x6502ca83
    6502ca73:	mov    edi,0x1
    6502ca78:	mov    BYTE PTR [rsp+0x58],0x2b
    6502ca7d:	mov    DWORD PTR [rsp+0x54],edi
    6502ca81:	jmp    0x6502caa3
    6502ca83:	test   r14b,0x2
    6502ca87:	je     0x6502ca9f
    6502ca89:	mov    edi,0x1
    6502ca8e:	mov    BYTE PTR [rsp+0x58],0x20
    6502ca93:	mov    DWORD PTR [rsp+0x54],edi
    6502ca97:	jmp    0x6502caa3
    6502ca99:	mov    edi,DWORD PTR [rsp+0x54]
    6502ca9d:	jmp    0x6502caa3
    6502ca9f:	mov    edi,DWORD PTR [rsp+0x54]
    6502caa3:	mov    r15d,DWORD PTR [rsp+0x68]
    6502caa8:	sub    r15d,DWORD PTR [rsp+0x50]
    6502caad:	sub    r15d,edi
    6502cab0:	test   r14b,0xc
    6502cab4:	jne    0x6502cac8
    6502cab6:	lea    r9,[rsp+0x44]
    6502cabb:	mov    r8,r12
    6502cabe:	mov    edx,r15d
    6502cac1:	mov    cl,0x20
    6502cac3:	call   0x6502bcd0
    6502cac8:	lea    r9,[rsp+0x44]
    6502cacd:	lea    rcx,[rsp+0x58]
    6502cad2:	mov    r8,r12
    6502cad5:	mov    edx,edi
    6502cad7:	call   0x6502bd60
    6502cadc:	test   r14b,0x8
    6502cae0:	je     0x6502cafa
    6502cae2:	test   r14b,0x4
    6502cae6:	jne    0x6502cafa
    6502cae8:	lea    r9,[rsp+0x44]
    6502caed:	mov    r8,r12
    6502caf0:	mov    edx,r15d
    6502caf3:	mov    cl,0x30
    6502caf5:	call   0x6502bcd0
    6502cafa:	test   esi,esi
    6502cafc:	mov    r13d,DWORD PTR [rsp+0x50]
    6502cb01:	je     0x6502cc6b
    6502cb07:	test   r13d,r13d
    6502cb0a:	jle    0x6502cc6b
    6502cb10:	mov    ebp,DWORD PTR [rsp+0x44]
    6502cb14:	mov    r14,rbx
    6502cb17:	data16 xchg ax,ax
    6502cb1a:	data16 xchg ax,ax
    6502cb1d:	data16 xchg ax,ax
    6502cb20:	movzx  r9d,WORD PTR [r14]
    6502cb24:	lea    rdx,[rsp+0x2c0]
    6502cb2c:	lea    rcx,[rsp+0xa8]
    6502cb34:	mov    r8d,0x6
    6502cb3a:	sub    r13d,0x1
    6502cb3e:	add    r14,0x2
    6502cb42:	call   0x6502d4d0
    6502cb47:	test   eax,eax
    6502cb49:	jne    0x6502cc5d
    6502cb4f:	mov    edi,DWORD PTR [rsp+0xa8]
    6502cb56:	test   edi,edi
    6502cb58:	je     0x6502cc5d
    6502cb5e:	test   BYTE PTR [r12+0x18],0x40
    6502cb64:	lea    rsi,[rsp+0x2c0]
    6502cb6c:	je     0x6502cb81
    6502cb6e:	cmp    QWORD PTR [r12+0x10],0x0
    6502cb74:	jne    0x6502cb81
    6502cb76:	add    ebp,edi
    6502cb78:	mov    DWORD PTR [rsp+0x44],ebp
    6502cb7c:	jmp    0x6502cc33
    6502cb81:	test   edi,edi
    6502cb83:	jle    0x6502cc33
    6502cb89:	data16 xchg ax,ax
    6502cb8c:	data16 data16 xchg ax,ax
    6502cb90:	movzx  ecx,BYTE PTR [rsi]
    6502cb93:	sub    edi,0x1
    6502cb96:	test   BYTE PTR [r12+0x18],0x40
    6502cb9c:	je     0x6502cbaf
    6502cb9e:	cmp    QWORD PTR [r12+0x10],0x0
    6502cba4:	jne    0x6502cbaf
    6502cba6:	add    ebp,0x1
    6502cba9:	mov    DWORD PTR [rsp+0x44],ebp
    6502cbad:	jmp    0x6502cbe6
    6502cbaf:	add    DWORD PTR [r12+0x8],0xffffffff
    6502cbb5:	js     0x6502cbc7
    6502cbb7:	mov    rax,QWORD PTR [r12]
    6502cbbb:	mov    BYTE PTR [rax],cl
    6502cbbd:	add    QWORD PTR [r12],0x1
    6502cbc2:	movzx  eax,cl
    6502cbc5:	jmp    0x6502cbd2
    6502cbc7:	movsx  ecx,cl
    6502cbca:	mov    rdx,r12
    6502cbcd:	call   0x65023f30
    6502cbd2:	cmp    eax,0xffffffff
    6502cbd5:	jne    0x6502cbdf
    6502cbd7:	or     ebp,eax
    6502cbd9:	mov    DWORD PTR [rsp+0x44],ebp
    6502cbdd:	jmp    0x6502cbe6
    6502cbdf:	add    ebp,0x1
    6502cbe2:	mov    DWORD PTR [rsp+0x44],ebp
    6502cbe6:	add    rsi,0x1
    6502cbea:	cmp    ebp,0xffffffff
    6502cbed:	jne    0x6502cc2b
    6502cbef:	call   0x65020420
    6502cbf4:	cmp    DWORD PTR [rax],0x2a
    6502cbf7:	jne    0x6502cc33
    6502cbf9:	test   BYTE PTR [r12+0x18],0x40
    6502cbff:	je     0x6502cc11
    6502cc01:	cmp    QWORD PTR [r12+0x10],0x0
    6502cc07:	jne    0x6502cc11
    6502cc09:	xor    ebp,ebp
    6502cc0b:	mov    DWORD PTR [rsp+0x44],ebp
    6502cc0f:	jmp    0x6502cc2b
    6502cc11:	add    DWORD PTR [r12+0x8],0xffffffff
    6502cc17:	js     0x6502cc43
    6502cc19:	mov    rax,QWORD PTR [r12]
    6502cc1d:	mov    BYTE PTR [rax],0x3f
    6502cc20:	add    QWORD PTR [r12],0x1
    6502cc25:	xor    ebp,ebp
    6502cc27:	mov    DWORD PTR [rsp+0x44],ebp
    6502cc2b:	test   edi,edi
    6502cc2d:	jg     0x6502cb90
    6502cc33:	test   r13d,r13d
    6502cc36:	jne    0x6502cb20
    6502cc3c:	mov    r14d,DWORD PTR [rsp+0x40]
    6502cc41:	jmp    0x6502cc82
    6502cc43:	mov    rdx,r12
    6502cc46:	mov    ecx,0x3f
    6502cc4b:	call   0x65023f30
    6502cc50:	cmp    eax,0xffffffff
    6502cc53:	jne    0x6502cc25
    6502cc55:	or     ebp,eax
    6502cc57:	mov    DWORD PTR [rsp+0x44],ebp
    6502cc5b:	jmp    0x6502cc2b
    6502cc5d:	mov    r15d,DWORD PTR [rsp+0x48]
    6502cc62:	or     ebp,0xffffffff
    6502cc65:	mov    DWORD PTR [rsp+0x44],ebp
    6502cc69:	jmp    0x6502ccb5
    6502cc6b:	lea    r9,[rsp+0x44]
    6502cc70:	mov    r8,r12
    6502cc73:	mov    edx,r13d
    6502cc76:	mov    rcx,rbx
    6502cc79:	call   0x6502bd60
    6502cc7e:	mov    ebp,DWORD PTR [rsp+0x44]
    6502cc82:	test   ebp,ebp
    6502cc84:	js     0x6502cca9
    6502cc86:	test   r14b,0x4
    6502cc8a:	je     0x6502ccb0
    6502cc8c:	lea    r9,[rsp+0x44]
    6502cc91:	mov    r8,r12
    6502cc94:	mov    edx,r15d
    6502cc97:	mov    cl,0x20
    6502cc99:	call   0x6502bcd0
    6502cc9e:	mov    ebp,DWORD PTR [rsp+0x44]
    6502cca2:	mov    r15d,DWORD PTR [rsp+0x48]
    6502cca7:	jmp    0x6502ccb5
    6502cca9:	mov    r15d,DWORD PTR [rsp+0x48]
    6502ccae:	jmp    0x6502ccb5
    6502ccb0:	mov    r15d,DWORD PTR [rsp+0x48]
    6502ccb5:	mov    rax,QWORD PTR [rsp+0xa0]
    6502ccbd:	test   rax,rax
    6502ccc0:	je     0x6502ccfb
    6502ccc2:	mov    rcx,rax
    6502ccc5:	call   0x6501fc00
    6502ccca:	mov    r14d,DWORD PTR [rsp+0x40]
    6502cccf:	mov    rsi,QWORD PTR [rsp+0xb8]
    6502ccd7:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502ccdc:	xor    r9d,r9d
    6502ccdf:	lea    r10,[rip+0xfffffffffffd331a]        # 0x65000000
    6502cce6:	mov    QWORD PTR [rsp+0xa0],r9
    6502ccee:	mov    edx,0x200
    6502ccf3:	mov    r11d,0x7fffffff
    6502ccf9:	jmp    0x6502cd22
    6502ccfb:	mov    r14d,DWORD PTR [rsp+0x40]
    6502cd00:	mov    rsi,QWORD PTR [rsp+0xb8]
    6502cd08:	mov    r8d,DWORD PTR [rsp+0x6c]
    6502cd0d:	xor    r9d,r9d
    6502cd10:	lea    r10,[rip+0xfffffffffffd32e9]        # 0x65000000
    6502cd17:	mov    edx,0x200
    6502cd1c:	mov    r11d,0x7fffffff
    6502cd22:	mov    r13b,BYTE PTR [rsi]
    6502cd25:	test   r13b,r13b
    6502cd28:	je     0x6502cd34
    6502cd2a:	mov    rdi,QWORD PTR [rsp+0x60]
    6502cd2f:	jmp    0x6502c150
    6502cd34:	test   r8d,r8d
    6502cd37:	je     0x6502cd80
    6502cd39:	cmp    r8d,0x7
    6502cd3d:	je     0x6502cd80
    6502cd3f:	call   0x65020420
    6502cd44:	xor    r9d,r9d
    6502cd47:	xor    r8d,r8d
    6502cd4a:	xor    edx,edx
    6502cd4c:	xor    ecx,ecx
    6502cd4e:	mov    QWORD PTR [rsp+0x20],0x0
    6502cd57:	mov    DWORD PTR [rax],0x16
    6502cd5d:	call   0x6501d9c0
    6502cd62:	cmp    BYTE PTR [rsp+0x90],0x0
    6502cd6a:	je     0x6502cd7b
    6502cd6c:	mov    rax,QWORD PTR [rsp+0x88]
    6502cd74:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502cd7b:	or     eax,0xffffffff
    6502cd7e:	jmp    0x6502cd9b
    6502cd80:	mov    rdx,QWORD PTR [rsp+0x88]
    6502cd88:	cmp    BYTE PTR [rsp+0x90],0x0
    6502cd90:	je     0x6502cd99
    6502cd92:	and    DWORD PTR [rdx+0xc8],0xfffffffd
    6502cd99:	mov    eax,ebp
    6502cd9b:	mov    rbx,QWORD PTR [rsp+0x2e0]
    6502cda3:	mov    r13,QWORD PTR [rsp+0x2d8]
    6502cdab:	mov    rcx,QWORD PTR [rsp+0x2c8]
    6502cdb3:	xor    rcx,rsp
    6502cdb6:	call   0x6501e650
    6502cdbb:	add    rsp,0x2e8
    6502cdc2:	pop    r15
    6502cdc4:	pop    r14
    6502cdc6:	pop    r12
    6502cdc8:	pop    rdi
    6502cdc9:	pop    rsi
    6502cdca:	pop    rbp
    6502cdcb:	ret    
    6502cdcc:	(bad)  
    6502cdcd:	ret    
    6502cdce:	add    al,BYTE PTR [rax]
    6502cdd0:	ret    
    6502cdd1:	rol    DWORD PTR [rdx],0x0
    6502cdd4:	cmc    
    6502cdd5:	rol    DWORD PTR [rdx],0x0
    6502cdd8:	pop    rsi
    6502cdd9:	ret    0x2
    6502cddc:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
    6502cddd:	ret    0x2
    6502cde0:	mov    ah,0xc2
    6502cde2:	add    al,BYTE PTR [rax]
    6502cde4:	stc    
    6502cde5:	ret    0x2
    6502cde8:	out    dx,al
    6502cde9:	(bad)
    6502cded:	mov    BYTE PTR [rdx],0x0
    6502cdf0:	(bad)  
    6502cdf1:	(bad)
    6502cdf4:	adc    al,dh
    6502cdf6:	add    al,BYTE PTR [rax]
    6502cdf8:	or     eax,0x2
    6502cdfb:	add    BYTE PTR [rbp-0x1fffd3b],bl
    6502ce01:	mov    BYTE PTR [rdx],0x0
    6502ce04:	sub    ebp,eax
    6502ce06:	add    al,BYTE PTR [rax]
    6502ce08:	push   rdx
    6502ce09:	enter  0x2,0xb0
    6502ce0d:	mov    BYTE PTR [rdx],0x0
    6502ce10:	mov    ecx,0x730002c8
    6502ce15:	enter  0x2,0x25
    6502ce19:	mov    BYTE PTR [rdx],0x0
    6502ce1c:	addr32 enter 0x2,0x91
    6502ce21:	enter  0x2,0x2f
    6502ce25:	retf   0x2
    6502ce28:	add    BYTE PTR [rsi],cl
    6502ce2a:	add    DWORD PTR [rsi],ecx
    6502ce2c:	add    BYTE PTR [rsi],cl
    6502ce2e:	add    BYTE PTR [rsi],cl
    6502ce30:	(bad)  
    6502ce31:	(bad)  
    6502ce32:	(bad)  
    6502ce33:	(bad)  
    6502ce34:	(bad)  
    6502ce35:	(bad)  
    6502ce36:	(bad)  
    6502ce37:	(bad)  
    6502ce38:	(bad)  
    6502ce39:	(bad)  
    6502ce3a:	add    cl,BYTE PTR [rsi]
    6502ce3c:	(bad)  
    6502ce3d:	(bad)  
    6502ce3e:	(bad)  
    6502ce3f:	add    ecx,DWORD PTR [rsi]
    6502ce41:	add    al,0xe
    6502ce43:	(bad)  
    6502ce44:	(bad)  
    6502ce45:	(bad)  
    6502ce46:	(bad)  
    6502ce47:	(bad)  
    6502ce48:	add    eax,0x507060e
    6502ce4d:	add    eax,0xe070e05
    6502ce52:	(bad)  
    6502ce53:	(bad)  
    6502ce54:	(bad)  
    6502ce55:	or     BYTE PTR [rcx],cl
    6502ce57:	or     cl,BYTE PTR [rsi]
    6502ce59:	(bad)  
    6502ce5a:	or     ecx,DWORD PTR [rsi]
    6502ce5c:	or     al,0xe
    6502ce5e:	(bad)  
    6502ce5f:	or     eax,0x38ec8348
    6502ce64:	mov    rax,QWORD PTR [rip+0x162b5]        # 0x65043120
    6502ce6b:	xor    rax,rsp
    6502ce6e:	mov    QWORD PTR [rsp+0x28],rax
    6502ce73:	lea    r8,[rsp+0x20]
    6502ce78:	mov    r9d,0x6
    6502ce7e:	mov    edx,0x1004
    6502ce83:	mov    BYTE PTR [rsp+0x26],0x0
    6502ce88:	call   QWORD PTR [rip+0x730a]        # 0x65034198
    6502ce8e:	test   eax,eax
    6502ce90:	jne    0x6502cea7
    6502ce92:	or     eax,0xffffffff
    6502ce95:	mov    rcx,QWORD PTR [rsp+0x28]
    6502ce9a:	xor    rcx,rsp
    6502ce9d:	call   0x6501e650
    6502cea2:	add    rsp,0x38
    6502cea6:	ret    
    6502cea7:	lea    rcx,[rsp+0x20]
    6502ceac:	call   0x6502d7b0
    6502ceb1:	mov    rcx,QWORD PTR [rsp+0x28]
    6502ceb6:	xor    rcx,rsp
    6502ceb9:	call   0x6501e650
    6502cebe:	add    rsp,0x38
    6502cec2:	ret    
    6502cec3:	int3   
    6502cec4:	int3   
    6502cec5:	int3   
    6502cec6:	int3   
    6502cec7:	int3   
    6502cec8:	int3   
    6502cec9:	int3   
    6502ceca:	int3   
    6502cecb:	int3   
    6502cecc:	int3   
    6502cecd:	int3   
    6502cece:	int3   
    6502cecf:	int3   
    6502ced0:	rex push rbp
    6502ced2:	push   rbx
    6502ced3:	push   rsi
    6502ced4:	push   rdi
    6502ced5:	push   r12
    6502ced7:	push   r13
    6502ced9:	push   r14
    6502cedb:	push   r15
    6502cedd:	sub    rsp,0x88
    6502cee4:	lea    rbp,[rsp+0x40]
    6502cee9:	mov    rax,QWORD PTR [rip+0x16230]        # 0x65043120
    6502cef0:	xor    rax,rbp
    6502cef3:	mov    QWORD PTR [rbp+0x30],rax
    6502cef7:	mov    r15,QWORD PTR [rbp+0xb0]
    6502cefe:	mov    r12d,DWORD PTR [r9]
    6502cf01:	xor    r13d,r13d
    6502cf04:	cmp    ecx,edx
    6502cf06:	mov    rbx,r8
    6502cf09:	mov    rsi,r13
    6502cf0c:	mov    DWORD PTR [rbp+0x0],r13d
    6502cf10:	mov    QWORD PTR [rbp+0x10],r9
    6502cf14:	mov    r14d,edx
    6502cf17:	mov    QWORD PTR [rbp+0x8],rbx
    6502cf1b:	mov    edi,ecx
    6502cf1d:	mov    DWORD PTR [rbp+0x4],ecx
    6502cf20:	je     0x6502d133
    6502cf26:	lea    rdx,[rbp+0x18]
    6502cf2a:	call   QWORD PTR [rip+0x7350]        # 0x65034280
    6502cf30:	test   eax,eax
    6502cf32:	je     0x6502cfd8
    6502cf38:	cmp    DWORD PTR [rbp+0x18],0x1
    6502cf3c:	jne    0x6502cfd8
    6502cf42:	lea    rdx,[rbp+0x18]
    6502cf46:	mov    ecx,r14d
    6502cf49:	call   QWORD PTR [rip+0x7331]        # 0x65034280
    6502cf4f:	test   eax,eax
    6502cf51:	je     0x6502cfd8
    6502cf57:	cmp    DWORD PTR [rbp+0x18],0x1
    6502cf5b:	jne    0x6502cfd8
    6502cf5d:	cmp    r12d,0xffffffff
    6502cf61:	mov    DWORD PTR [rbp+0x0],0x1
    6502cf68:	je     0x6502cfc6
    6502cf6a:	mov    ebx,r12d
    6502cf6d:	test   ebx,ebx
    6502cf6f:	jle    0x6502cfff
    6502cf75:	movsxd r13,ebx
    6502cf78:	movabs rax,0x7ffffffffffffff0
    6502cf82:	cmp    r13,rax
    6502cf85:	ja     0x6502cfff
    6502cf87:	lea    rcx,[r13+r13*1+0x10]
    6502cf8c:	cmp    rcx,0x400
    6502cf93:	ja     0x6502d006
    6502cf95:	lea    rax,[rcx+0xf]
    6502cf99:	cmp    rax,rcx
    6502cf9c:	ja     0x6502cfa8
    6502cf9e:	movabs rax,0xffffffffffffff0
    6502cfa8:	and    rax,0xfffffffffffffff0
    6502cfac:	call   0x65033230
    6502cfb1:	sub    rsp,rax
    6502cfb4:	lea    rdi,[rsp+0x40]
    6502cfb9:	test   rdi,rdi
    6502cfbc:	je     0x6502cfff
    6502cfbe:	mov    DWORD PTR [rdi],0xcccc
    6502cfc4:	jmp    0x6502d019
    6502cfc6:	or     rcx,0xffffffffffffffff
    6502cfca:	mov    rdi,rbx
    6502cfcd:	xor    eax,eax
    6502cfcf:	repnz scas al,BYTE PTR es:[rdi]
    6502cfd1:	not    rcx
    6502cfd4:	mov    ebx,ecx
    6502cfd6:	jmp    0x6502cf6d
    6502cfd8:	mov    r9d,r12d
    6502cfdb:	mov    r8,rbx
    6502cfde:	mov    edx,0x1
    6502cfe3:	mov    ecx,edi
    6502cfe5:	mov    DWORD PTR [rsp+0x28],r13d
    6502cfea:	mov    QWORD PTR [rsp+0x20],r13
    6502cfef:	call   QWORD PTR [rip+0x7033]        # 0x65034028
    6502cff5:	test   eax,eax
    6502cff7:	mov    ebx,eax
    6502cff9:	jne    0x6502cf6d
    6502cfff:	xor    eax,eax
    6502d001:	jmp    0x6502d136
    6502d006:	call   0x6501fc50
    6502d00b:	test   rax,rax
    6502d00e:	mov    rdi,rax
    6502d011:	je     0x6502d01d
    6502d013:	mov    DWORD PTR [rax],0xdddd
    6502d019:	add    rdi,0x10
    6502d01d:	test   rdi,rdi
    6502d020:	je     0x6502cfff
    6502d022:	lea    r8,[r13+r13*1+0x0]
    6502d027:	xor    edx,edx
    6502d029:	mov    rcx,rdi
    6502d02c:	call   0x6501efa0
    6502d031:	mov    r8,QWORD PTR [rbp+0x8]
    6502d035:	mov    ecx,DWORD PTR [rbp+0x4]
    6502d038:	mov    r9d,r12d
    6502d03b:	mov    edx,0x1
    6502d040:	mov    DWORD PTR [rsp+0x28],ebx
    6502d044:	mov    QWORD PTR [rsp+0x20],rdi
    6502d049:	call   QWORD PTR [rip+0x6fd9]        # 0x65034028
    6502d04f:	test   eax,eax
    6502d051:	je     0x6502d121
    6502d057:	test   r15,r15
    6502d05a:	je     0x6502d098
    6502d05c:	xor    eax,eax
    6502d05e:	mov    r9d,ebx
    6502d061:	mov    r8,rdi
    6502d064:	mov    QWORD PTR [rsp+0x38],rax
    6502d069:	mov    QWORD PTR [rsp+0x30],rax
    6502d06e:	mov    eax,DWORD PTR [rbp+0xb8]
    6502d074:	mov    DWORD PTR [rsp+0x28],eax
    6502d078:	xor    edx,edx
    6502d07a:	mov    ecx,r14d
    6502d07d:	mov    QWORD PTR [rsp+0x20],r15
    6502d082:	call   QWORD PTR [rip+0x6fa8]        # 0x65034030
    6502d088:	test   eax,eax
    6502d08a:	je     0x6502d121
    6502d090:	mov    rsi,r15
    6502d093:	jmp    0x6502d121
    6502d098:	xor    r13d,r13d
    6502d09b:	cmp    DWORD PTR [rbp+0x0],esi
    6502d09e:	jne    0x6502d0cb
    6502d0a0:	mov    QWORD PTR [rsp+0x38],r13
    6502d0a5:	mov    QWORD PTR [rsp+0x30],r13
    6502d0aa:	mov    r9d,ebx
    6502d0ad:	mov    r8,rdi
    6502d0b0:	xor    edx,edx
    6502d0b2:	mov    ecx,r14d
    6502d0b5:	mov    DWORD PTR [rsp+0x28],r13d
    6502d0ba:	mov    QWORD PTR [rsp+0x20],r13
    6502d0bf:	call   QWORD PTR [rip+0x6f6b]        # 0x65034030
    6502d0c5:	test   eax,eax
    6502d0c7:	mov    ebx,eax
    6502d0c9:	je     0x6502d121
    6502d0cb:	movsxd rdx,ebx
    6502d0ce:	mov    ecx,0x1
    6502d0d3:	call   0x65022af0
    6502d0d8:	test   rax,rax
    6502d0db:	mov    rsi,rax
    6502d0de:	je     0x6502d121
    6502d0e0:	mov    QWORD PTR [rsp+0x38],r13
    6502d0e5:	mov    QWORD PTR [rsp+0x30],r13
    6502d0ea:	mov    r9d,ebx
    6502d0ed:	mov    r8,rdi
    6502d0f0:	xor    edx,edx
    6502d0f2:	mov    ecx,r14d
    6502d0f5:	mov    DWORD PTR [rsp+0x28],ebx
    6502d0f9:	mov    QWORD PTR [rsp+0x20],rax
    6502d0fe:	call   QWORD PTR [rip+0x6f2c]        # 0x65034030
    6502d104:	test   eax,eax
    6502d106:	jne    0x6502d115
    6502d108:	mov    rcx,rsi
    6502d10b:	call   0x6501fc00
    6502d110:	mov    rsi,r13
    6502d113:	jmp    0x6502d121
    6502d115:	cmp    r12d,0xffffffff
    6502d119:	je     0x6502d121
    6502d11b:	mov    rcx,QWORD PTR [rbp+0x10]
    6502d11f:	mov    DWORD PTR [rcx],eax
    6502d121:	cmp    DWORD PTR [rdi-0x10],0xdddd
    6502d128:	lea    rcx,[rdi-0x10]
    6502d12c:	jne    0x6502d133
    6502d12e:	call   0x6501fc00
    6502d133:	mov    rax,rsi
    6502d136:	mov    rcx,QWORD PTR [rbp+0x30]
    6502d13a:	xor    rcx,rbp
    6502d13d:	call   0x6501e650
    6502d142:	lea    rsp,[rbp+0x48]
    6502d146:	pop    r15
    6502d148:	pop    r14
    6502d14a:	pop    r13
    6502d14c:	pop    r12
    6502d14e:	pop    rdi
    6502d14f:	pop    rsi
    6502d150:	pop    rbx
    6502d151:	pop    rbp
    6502d152:	ret    
    6502d153:	int3   
    6502d154:	int3   
    6502d155:	int3   
    6502d156:	int3   
    6502d157:	int3   
    6502d158:	int3   
    6502d159:	int3   
    6502d15a:	int3   
    6502d15b:	int3   
    6502d15c:	int3   
    6502d15d:	int3   
    6502d15e:	int3   
    6502d15f:	int3   
    6502d160:	mov    QWORD PTR [rsp+0x8],rbx
    6502d165:	mov    QWORD PTR [rsp+0x10],rbp
    6502d16a:	mov    QWORD PTR [rsp+0x18],rsi
    6502d16f:	push   rdi
    6502d170:	sub    rsp,0x20
    6502d174:	mov    ebp,ecx
    6502d176:	xor    sil,sil
    6502d179:	call   0x65020a30
    6502d17e:	mov    rdx,QWORD PTR [rax+0xc0]
    6502d185:	mov    rdi,QWORD PTR [rax+0xb8]
    6502d18c:	mov    rbx,rax
    6502d18f:	cmp    rdx,QWORD PTR [rip+0x1680a]        # 0x650439a0
    6502d196:	je     0x6502d1ab
    6502d198:	mov    edx,DWORD PTR [rax+0xc8]
    6502d19e:	test   DWORD PTR [rip+0x16684],edx        # 0x65043828
    6502d1a4:	jne    0x6502d1ab
    6502d1a6:	call   0x65023e90
    6502d1ab:	cmp    rdi,QWORD PTR [rip+0x1656e]        # 0x65043720
    6502d1b2:	je     0x6502d1ca
    6502d1b4:	mov    eax,DWORD PTR [rbx+0xc8]
    6502d1ba:	test   DWORD PTR [rip+0x16668],eax        # 0x65043828
    6502d1c0:	jne    0x6502d1ca
    6502d1c2:	call   0x65023340
    6502d1c7:	mov    rdi,rax
    6502d1ca:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502d1d0:	test   cl,0x2
    6502d1d3:	jne    0x6502d1e1
    6502d1d5:	or     ecx,0x2
    6502d1d8:	mov    sil,0x1
    6502d1db:	mov    DWORD PTR [rbx+0xc8],ecx
    6502d1e1:	movzx  eax,bpl
    6502d1e5:	movzx  eax,BYTE PTR [rax+rdi*1+0x1d]
    6502d1ea:	shr    eax,0x2
    6502d1ed:	and    eax,0x1
    6502d1f0:	test   sil,sil
    6502d1f3:	je     0x6502d1fc
    6502d1f5:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502d1fc:	mov    rbx,QWORD PTR [rsp+0x30]
    6502d201:	mov    rbp,QWORD PTR [rsp+0x38]
    6502d206:	mov    rsi,QWORD PTR [rsp+0x40]
    6502d20b:	add    rsp,0x20
    6502d20f:	pop    rdi
    6502d210:	ret    
    6502d211:	int3   
    6502d212:	int3   
    6502d213:	int3   
    6502d214:	int3   
    6502d215:	int3   
    6502d216:	int3   
    6502d217:	int3   
    6502d218:	int3   
    6502d219:	int3   
    6502d21a:	int3   
    6502d21b:	int3   
    6502d21c:	int3   
    6502d21d:	int3   
    6502d21e:	int3   
    6502d21f:	int3   
    6502d220:	mov    WORD PTR [rsp+0x20],r9w
    6502d226:	push   rsi
    6502d227:	push   rdi
    6502d228:	push   r12
    6502d22a:	push   r13
    6502d22c:	sub    rsp,0x68
    6502d230:	test   rdx,rdx
    6502d233:	mov    rsi,r8
    6502d236:	mov    r13,rdx
    6502d239:	mov    rdi,rcx
    6502d23c:	jne    0x6502d25b
    6502d23e:	test   r8,r8
    6502d241:	je     0x6502d25b
    6502d243:	test   rcx,rcx
    6502d246:	je     0x6502d24e
    6502d248:	xor    r12d,r12d
    6502d24b:	mov    DWORD PTR [rcx],r12d
    6502d24e:	xor    eax,eax
    6502d250:	add    rsp,0x68
    6502d254:	pop    r13
    6502d256:	pop    r12
    6502d258:	pop    rdi
    6502d259:	pop    rsi
    6502d25a:	ret    
    6502d25b:	test   rcx,rcx
    6502d25e:	je     0x6502d266
    6502d260:	mov    DWORD PTR [rcx],0xffffffff
    6502d266:	cmp    r8,0x7fffffff
    6502d26d:	jbe    0x6502d2a1
    6502d26f:	call   0x65020420
    6502d274:	xor    r12d,r12d
    6502d277:	xor    r9d,r9d
    6502d27a:	xor    r8d,r8d
    6502d27d:	xor    edx,edx
    6502d27f:	xor    ecx,ecx
    6502d281:	mov    DWORD PTR [rax],0x16
    6502d287:	mov    QWORD PTR [rsp+0x20],r12
    6502d28c:	call   0x6501d9c0
    6502d291:	lea    eax,[r12+0x16]
    6502d296:	add    rsp,0x68
    6502d29a:	pop    r13
    6502d29c:	pop    r12
    6502d29e:	pop    rdi
    6502d29f:	pop    rsi
    6502d2a0:	ret    
    6502d2a1:	mov    rcx,QWORD PTR [rsp+0xb0]
    6502d2a9:	mov    QWORD PTR [rsp+0x90],rbx
    6502d2b1:	mov    QWORD PTR [rsp+0xa0],rbp
    6502d2b9:	xor    bpl,bpl
    6502d2bc:	test   rcx,rcx
    6502d2bf:	mov    QWORD PTR [rsp+0x60],r14
    6502d2c4:	mov    BYTE PTR [rsp+0x58],bpl
    6502d2c9:	jne    0x6502d349
    6502d2cb:	call   0x65020a30
    6502d2d0:	mov    rbx,rax
    6502d2d3:	mov    r14,QWORD PTR [rax+0xc0]
    6502d2da:	mov    r12,QWORD PTR [rax+0xb8]
    6502d2e1:	cmp    r14,QWORD PTR [rip+0x166b8]        # 0x650439a0
    6502d2e8:	je     0x6502d300
    6502d2ea:	mov    ecx,DWORD PTR [rax+0xc8]
    6502d2f0:	test   DWORD PTR [rip+0x16532],ecx        # 0x65043828
    6502d2f6:	jne    0x6502d300
    6502d2f8:	call   0x65023e90
    6502d2fd:	mov    r14,rax
    6502d300:	cmp    r12,QWORD PTR [rip+0x16419]        # 0x65043720
    6502d307:	je     0x6502d31c
    6502d309:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502d30f:	test   DWORD PTR [rip+0x16513],ecx        # 0x65043828
    6502d315:	jne    0x6502d31c
    6502d317:	call   0x65023340
    6502d31c:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502d322:	test   cl,0x2
    6502d325:	jne    0x6502d33e
    6502d327:	or     ecx,0x2
    6502d32a:	mov    bpl,0x1
    6502d32d:	mov    DWORD PTR [rbx+0xc8],ecx
    6502d333:	movzx  r9d,WORD PTR [rsp+0xa8]
    6502d33c:	jmp    0x6502d36b
    6502d33e:	mov    r9w,WORD PTR [rsp+0xa8]
    6502d347:	jmp    0x6502d36b
    6502d349:	mov    rax,QWORD PTR [rcx]
    6502d34c:	lea    rdx,[rsp+0x40]
    6502d351:	mov    QWORD PTR [rdx],rax
    6502d354:	mov    rax,QWORD PTR [rcx+0x8]
    6502d358:	mov    QWORD PTR [rdx+0x8],rax
    6502d35c:	movzx  ebp,BYTE PTR [rsp+0x58]
    6502d361:	mov    rbx,QWORD PTR [rsp+0x50]
    6502d366:	mov    r14,QWORD PTR [rsp+0x40]
    6502d36b:	cmp    DWORD PTR [r14+0x14],0x0
    6502d370:	jne    0x6502d3d9
    6502d372:	cmp    r9w,0xff
    6502d378:	jbe    0x6502d3ab
    6502d37a:	test   r13,r13
    6502d37d:	je     0x6502d391
    6502d37f:	test   rsi,rsi
    6502d382:	je     0x6502d391
    6502d384:	mov    r8,rsi
    6502d387:	xor    edx,edx
    6502d389:	mov    rcx,r13
    6502d38c:	call   0x6501efa0
    6502d391:	call   0x65020420
    6502d396:	mov    DWORD PTR [rax],0x2a
    6502d39c:	call   0x65020420
    6502d3a1:	test   bpl,bpl
    6502d3a4:	mov    eax,DWORD PTR [rax]
    6502d3a6:	jmp    0x6502d4a6
    6502d3ab:	test   r13,r13
    6502d3ae:	je     0x6502d3cc
    6502d3b0:	test   rsi,rsi
    6502d3b3:	jne    0x6502d3c8
    6502d3b5:	call   0x65020420
    6502d3ba:	xor    r12d,r12d
    6502d3bd:	mov    DWORD PTR [rax],0x22
    6502d3c3:	jmp    0x6502d46a
    6502d3c8:	mov    BYTE PTR [r13+0x0],r9b
    6502d3cc:	test   rdi,rdi
    6502d3cf:	je     0x6502d42d
    6502d3d1:	mov    DWORD PTR [rdi],0x1
    6502d3d7:	jmp    0x6502d42d
    6502d3d9:	mov    ecx,DWORD PTR [r14+0x4]
    6502d3dd:	xor    r12d,r12d
    6502d3e0:	lea    rax,[rsp+0x98]
    6502d3e8:	mov    QWORD PTR [rsp+0x38],rax
    6502d3ed:	mov    QWORD PTR [rsp+0x30],r12
    6502d3f2:	lea    r8,[rsp+0xa8]
    6502d3fa:	lea    r9d,[r12+0x1]
    6502d3ff:	xor    edx,edx
    6502d401:	mov    DWORD PTR [rsp+0x28],esi
    6502d405:	mov    QWORD PTR [rsp+0x20],r13
    6502d40a:	mov    DWORD PTR [rsp+0x98],r12d
    6502d412:	call   QWORD PTR [rip+0x6c18]        # 0x65034030
    6502d418:	test   eax,eax
    6502d41a:	je     0x6502d43d
    6502d41c:	cmp    DWORD PTR [rsp+0x98],r12d
    6502d424:	jne    0x6502d491
    6502d426:	test   rdi,rdi
    6502d429:	je     0x6502d42d
    6502d42b:	mov    DWORD PTR [rdi],eax
    6502d42d:	test   bpl,bpl
    6502d430:	je     0x6502d439
    6502d432:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502d439:	xor    eax,eax
    6502d43b:	jmp    0x6502d4af
    6502d43d:	call   QWORD PTR [rip+0x6c25]        # 0x65034068
    6502d443:	cmp    eax,0x7a
    6502d446:	jne    0x6502d491
    6502d448:	test   r13,r13
    6502d44b:	je     0x6502d45f
    6502d44d:	test   rsi,rsi
    6502d450:	je     0x6502d45f
    6502d452:	mov    r8,rsi
    6502d455:	xor    edx,edx
    6502d457:	mov    rcx,r13
    6502d45a:	call   0x6501efa0
    6502d45f:	call   0x65020420
    6502d464:	mov    DWORD PTR [rax],0x22
    6502d46a:	xor    r9d,r9d
    6502d46d:	xor    r8d,r8d
    6502d470:	xor    edx,edx
    6502d472:	xor    ecx,ecx
    6502d474:	mov    QWORD PTR [rsp+0x20],r12
    6502d479:	call   0x6501d9c0
    6502d47e:	test   bpl,bpl
    6502d481:	je     0x6502d48a
    6502d483:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502d48a:	mov    eax,0x22
    6502d48f:	jmp    0x6502d4af
    6502d491:	call   0x65020420
    6502d496:	mov    DWORD PTR [rax],0x2a
    6502d49c:	call   0x65020420
    6502d4a1:	test   bpl,bpl
    6502d4a4:	mov    eax,DWORD PTR [rax]
    6502d4a6:	je     0x6502d4af
    6502d4a8:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502d4af:	mov    rbp,QWORD PTR [rsp+0xa0]
    6502d4b7:	mov    rbx,QWORD PTR [rsp+0x90]
    6502d4bf:	mov    r14,QWORD PTR [rsp+0x60]
    6502d4c4:	add    rsp,0x68
    6502d4c8:	pop    r13
    6502d4ca:	pop    r12
    6502d4cc:	pop    rdi
    6502d4cd:	pop    rsi
    6502d4ce:	ret    
    6502d4cf:	int3   
    6502d4d0:	sub    rsp,0x38
    6502d4d4:	mov    QWORD PTR [rsp+0x20],0x0
    6502d4dd:	call   0x6502d220
    6502d4e2:	add    rsp,0x38
    6502d4e6:	ret    
    6502d4e7:	int3   
    6502d4e8:	int3   
    6502d4e9:	int3   
    6502d4ea:	int3   
    6502d4eb:	int3   
    6502d4ec:	int3   
    6502d4ed:	int3   
    6502d4ee:	int3   
    6502d4ef:	int3   
    6502d4f0:	mov    QWORD PTR [rsp+0x10],rbx
    6502d4f5:	push   rbp
    6502d4f6:	push   rsi
    6502d4f7:	push   rdi
    6502d4f8:	push   r13
    6502d4fa:	push   r14
    6502d4fc:	sub    rsp,0x50
    6502d500:	mov    edi,r8d
    6502d503:	mov    r13,rdx
    6502d506:	mov    r14,rcx
    6502d509:	call   0x650205f0
    6502d50e:	xor    ebx,ebx
    6502d510:	cmp    QWORD PTR [rip+0x184d9],rbx        # 0x650459f0
    6502d517:	mov    rbp,rax
    6502d51a:	mov    DWORD PTR [rsp+0x98],ebx
    6502d521:	mov    DWORD PTR [rsp+0x30],ebx
    6502d525:	jne    0x6502d61c
    6502d52b:	lea    rcx,[rip+0x99be]        # 0x65036ef0
    6502d532:	call   QWORD PTR [rip+0x6c68]        # 0x650341a0
    6502d538:	test   rax,rax
    6502d53b:	mov    rsi,rax
    6502d53e:	je     0x6502d72f
    6502d544:	lea    rdx,[rip+0x9995]        # 0x65036ee0
    6502d54b:	mov    rcx,rax
    6502d54e:	call   QWORD PTR [rip+0x6bb4]        # 0x65034108
    6502d554:	test   rax,rax
    6502d557:	je     0x6502d72f
    6502d55d:	mov    rcx,rax
    6502d560:	call   0x65020520
    6502d565:	lea    rdx,[rip+0x9964]        # 0x65036ed0
    6502d56c:	mov    rcx,rsi
    6502d56f:	mov    QWORD PTR [rip+0x1847a],rax        # 0x650459f0
    6502d576:	call   QWORD PTR [rip+0x6b8c]        # 0x65034108
    6502d57c:	mov    rcx,rax
    6502d57f:	call   0x65020520
    6502d584:	lea    rdx,[rip+0x992d]        # 0x65036eb8
    6502d58b:	mov    rcx,rsi
    6502d58e:	mov    QWORD PTR [rip+0x18463],rax        # 0x650459f8
    6502d595:	call   QWORD PTR [rip+0x6b6d]        # 0x65034108
    6502d59b:	mov    rcx,rax
    6502d59e:	call   0x65020520
    6502d5a3:	lea    rcx,[rsp+0x98]
    6502d5ab:	mov    QWORD PTR [rip+0x1844e],rax        # 0x65045a00
    6502d5b2:	call   0x65022d30
    6502d5b7:	test   eax,eax
    6502d5b9:	je     0x6502d5cf
    6502d5bb:	xor    r9d,r9d
    6502d5be:	xor    r8d,r8d
    6502d5c1:	xor    edx,edx
    6502d5c3:	xor    ecx,ecx
    6502d5c5:	mov    QWORD PTR [rsp+0x20],rbx
    6502d5ca:	call   0x6501d920
    6502d5cf:	cmp    DWORD PTR [rsp+0x98],0x2
    6502d5d7:	jne    0x6502d61c
    6502d5d9:	lea    rdx,[rip+0x98b8]        # 0x65036e98
    6502d5e0:	mov    rcx,rsi
    6502d5e3:	call   QWORD PTR [rip+0x6b1f]        # 0x65034108
    6502d5e9:	mov    rcx,rax
    6502d5ec:	call   0x65020520
    6502d5f1:	test   rax,rax
    6502d5f4:	mov    QWORD PTR [rip+0x18415],rax        # 0x65045a10
    6502d5fb:	je     0x6502d61c
    6502d5fd:	lea    rdx,[rip+0x987c]        # 0x65036e80
    6502d604:	mov    rcx,rsi
    6502d607:	call   QWORD PTR [rip+0x6afb]        # 0x65034108
    6502d60d:	mov    rcx,rax
    6502d610:	call   0x65020520
    6502d615:	mov    QWORD PTR [rip+0x183ec],rax        # 0x65045a08
    6502d61c:	mov    rcx,QWORD PTR [rip+0x183e5]        # 0x65045a08
    6502d623:	mov    QWORD PTR [rsp+0x80],r12
    6502d62b:	cmp    rcx,rbp
    6502d62e:	je     0x6502d6c8
    6502d634:	cmp    QWORD PTR [rip+0x183d5],rbp        # 0x65045a10
    6502d63b:	je     0x6502d6c8
    6502d641:	call   0x650206e0
    6502d646:	mov    rcx,QWORD PTR [rip+0x183c3]        # 0x65045a10
    6502d64d:	mov    rsi,rax
    6502d650:	call   0x650206e0
    6502d655:	test   rsi,rsi
    6502d658:	mov    r12,rax
    6502d65b:	je     0x6502d6c8
    6502d65d:	test   rax,rax
    6502d660:	je     0x6502d6c8
    6502d662:	call   rsi
    6502d664:	test   rax,rax
    6502d667:	je     0x6502d693
    6502d669:	lea    rcx,[rsp+0x34]
    6502d66e:	mov    r9d,0xc
    6502d674:	lea    r8,[rsp+0x38]
    6502d679:	mov    QWORD PTR [rsp+0x20],rcx
    6502d67e:	lea    edx,[r9-0xb]
    6502d682:	mov    rcx,rax
    6502d685:	call   r12
    6502d688:	test   eax,eax
    6502d68a:	je     0x6502d693
    6502d68c:	test   BYTE PTR [rsp+0x40],0x1
    6502d691:	jne    0x6502d6c8
    6502d693:	lea    rcx,[rsp+0x30]
    6502d698:	call   0x65022d80
    6502d69d:	test   eax,eax
    6502d69f:	je     0x6502d6b5
    6502d6a1:	xor    r9d,r9d
    6502d6a4:	xor    r8d,r8d
    6502d6a7:	xor    edx,edx
    6502d6a9:	xor    ecx,ecx
    6502d6ab:	mov    QWORD PTR [rsp+0x20],rbx
    6502d6b0:	call   0x6501d920
    6502d6b5:	cmp    DWORD PTR [rsp+0x30],0x4
    6502d6ba:	jb     0x6502d6c2
    6502d6bc:	bts    edi,0x15
    6502d6c0:	jmp    0x6502d706
    6502d6c2:	bts    edi,0x12
    6502d6c6:	jmp    0x6502d706
    6502d6c8:	mov    rcx,QWORD PTR [rip+0x18329]        # 0x650459f8
    6502d6cf:	cmp    rcx,rbp
    6502d6d2:	je     0x6502d706
    6502d6d4:	call   0x650206e0
    6502d6d9:	test   rax,rax
    6502d6dc:	je     0x6502d706
    6502d6de:	call   rax
    6502d6e0:	test   rax,rax
    6502d6e3:	mov    rbx,rax
    6502d6e6:	je     0x6502d706
    6502d6e8:	mov    rcx,QWORD PTR [rip+0x18311]        # 0x65045a00
    6502d6ef:	cmp    rcx,rbp
    6502d6f2:	je     0x6502d706
    6502d6f4:	call   0x650206e0
    6502d6f9:	test   rax,rax
    6502d6fc:	je     0x6502d706
    6502d6fe:	mov    rcx,rbx
    6502d701:	call   rax
    6502d703:	mov    rbx,rax
    6502d706:	mov    rcx,QWORD PTR [rip+0x182e3]        # 0x650459f0
    6502d70d:	call   0x650206e0
    6502d712:	mov    r12,QWORD PTR [rsp+0x80]
    6502d71a:	test   rax,rax
    6502d71d:	je     0x6502d72f
    6502d71f:	mov    r9d,edi
    6502d722:	mov    r8,r13
    6502d725:	mov    rdx,r14
    6502d728:	mov    rcx,rbx
    6502d72b:	call   rax
    6502d72d:	jmp    0x6502d731
    6502d72f:	xor    eax,eax
    6502d731:	mov    rbx,QWORD PTR [rsp+0x88]
    6502d739:	add    rsp,0x50
    6502d73d:	pop    r14
    6502d73f:	pop    r13
    6502d741:	pop    rdi
    6502d742:	pop    rsi
    6502d743:	pop    rbp
    6502d744:	ret    
    6502d745:	int3   
    6502d746:	int3   
    6502d747:	int3   
    6502d748:	int3   
    6502d749:	int3   
    6502d74a:	int3   
    6502d74b:	int3   
    6502d74c:	int3   
    6502d74d:	int3   
    6502d74e:	int3   
    6502d74f:	int3   
    6502d750:	sub    rsp,0x38
    6502d754:	test   ecx,ecx
    6502d756:	js     0x6502d77e
    6502d758:	cmp    ecx,0x2
    6502d75b:	jle    0x6502d76d
    6502d75d:	cmp    ecx,0x3
    6502d760:	jne    0x6502d77e
    6502d762:	mov    eax,DWORD PTR [rip+0x174d4]        # 0x65044c3c
    6502d768:	add    rsp,0x38
    6502d76c:	ret    
    6502d76d:	mov    eax,DWORD PTR [rip+0x174c9]        # 0x65044c3c
    6502d773:	mov    DWORD PTR [rip+0x174c3],ecx        # 0x65044c3c
    6502d779:	add    rsp,0x38
    6502d77d:	ret    
    6502d77e:	call   0x65020420
    6502d783:	xor    r9d,r9d
    6502d786:	xor    r8d,r8d
    6502d789:	xor    edx,edx
    6502d78b:	xor    ecx,ecx
    6502d78d:	mov    QWORD PTR [rsp+0x20],0x0
    6502d796:	mov    DWORD PTR [rax],0x16
    6502d79c:	call   0x6501d9c0
    6502d7a1:	or     eax,0xffffffff
    6502d7a4:	add    rsp,0x38
    6502d7a8:	ret    
    6502d7a9:	int3   
    6502d7aa:	int3   
    6502d7ab:	int3   
    6502d7ac:	int3   
    6502d7ad:	int3   
    6502d7ae:	int3   
    6502d7af:	int3   
    6502d7b0:	xor    edx,edx
    6502d7b2:	lea    r8d,[rdx+0xa]
    6502d7b6:	jmp    0x6502e450
    6502d7bb:	int3   
    6502d7bc:	int3   
    6502d7bd:	int3   
    6502d7be:	int3   
    6502d7bf:	int3   
    6502d7c0:	mov    ecx,0x2
    6502d7c5:	jmp    0x65022c60
    6502d7ca:	int3   
    6502d7cb:	int3   
    6502d7cc:	int3   
    6502d7cd:	int3   
    6502d7ce:	int3   
    6502d7cf:	int3   
    6502d7d0:	mov    QWORD PTR [rsp+0x8],rbx
    6502d7d5:	mov    QWORD PTR [rsp+0x10],rsi
    6502d7da:	push   rdi
    6502d7db:	sub    rsp,0x20
    6502d7df:	test   ecx,ecx
    6502d7e1:	js     0x6502d86b
    6502d7e7:	cmp    ecx,DWORD PTR [rip+0x1b797]        # 0x65048f84
    6502d7ed:	jae    0x6502d86b
    6502d7ef:	movsxd rax,ecx
    6502d7f2:	lea    rsi,[rip+0x1b7a7]        # 0x65048fa0
    6502d7f9:	mov    bl,al
    6502d7fb:	mov    rdi,rax
    6502d7fe:	sar    rdi,0x5
    6502d802:	and    ebx,0x1f
    6502d805:	mov    rax,QWORD PTR [rsi+rdi*8]
    6502d809:	imul   rbx,rbx,0x58
    6502d80d:	test   BYTE PTR [rax+rbx*1+0x8],0x1
    6502d812:	je     0x6502d86b
    6502d814:	cmp    QWORD PTR [rax+rbx*1],0xffffffffffffffff
    6502d819:	je     0x6502d86b
    6502d81b:	cmp    DWORD PTR [rip+0x1742e],0x1        # 0x65044c50
    6502d822:	jne    0x6502d84d
    6502d824:	test   ecx,ecx
    6502d826:	je     0x6502d840
    6502d828:	sub    ecx,0x1
    6502d82b:	je     0x6502d839
    6502d82d:	cmp    ecx,0x1
    6502d830:	jne    0x6502d84d
    6502d832:	mov    ecx,0xfffffff4
    6502d837:	jmp    0x6502d845
    6502d839:	mov    ecx,0xfffffff5
    6502d83e:	jmp    0x6502d845
    6502d840:	mov    ecx,0xfffffff6
    6502d845:	xor    edx,edx
    6502d847:	call   QWORD PTR [rip+0x693b]        # 0x65034188
    6502d84d:	mov    rax,QWORD PTR [rsi+rdi*8]
    6502d851:	mov    QWORD PTR [rbx+rax*1],0xffffffffffffffff
    6502d859:	xor    eax,eax
    6502d85b:	mov    rbx,QWORD PTR [rsp+0x30]
    6502d860:	mov    rsi,QWORD PTR [rsp+0x38]
    6502d865:	add    rsp,0x20
    6502d869:	pop    rdi
    6502d86a:	ret    
    6502d86b:	call   0x65020420
    6502d870:	mov    DWORD PTR [rax],0x9
    6502d876:	call   0x65020450
    6502d87b:	mov    rbx,QWORD PTR [rsp+0x30]
    6502d880:	mov    rsi,QWORD PTR [rsp+0x38]
    6502d885:	mov    DWORD PTR [rax],0x0
    6502d88b:	or     eax,0xffffffff
    6502d88e:	add    rsp,0x20
    6502d892:	pop    rdi
    6502d893:	ret    
    6502d894:	int3   
    6502d895:	int3   
    6502d896:	int3   
    6502d897:	int3   
    6502d898:	int3   
    6502d899:	int3   
    6502d89a:	int3   
    6502d89b:	int3   
    6502d89c:	int3   
    6502d89d:	int3   
    6502d89e:	int3   
    6502d89f:	int3   
    6502d8a0:	sub    rsp,0x38
    6502d8a4:	cmp    ecx,0xfffffffe
    6502d8a7:	jne    0x6502d8c8
    6502d8a9:	call   0x65020450
    6502d8ae:	mov    DWORD PTR [rax],0x0
    6502d8b4:	call   0x65020420
    6502d8b9:	mov    DWORD PTR [rax],0x9
    6502d8bf:	or     rax,0xffffffffffffffff
    6502d8c3:	add    rsp,0x38
    6502d8c7:	ret    
    6502d8c8:	test   ecx,ecx
    6502d8ca:	js     0x6502d900
    6502d8cc:	cmp    ecx,DWORD PTR [rip+0x1b6b2]        # 0x65048f84
    6502d8d2:	jae    0x6502d900
    6502d8d4:	movsxd rax,ecx
    6502d8d7:	lea    rdx,[rip+0x1b6c2]        # 0x65048fa0
    6502d8de:	mov    rcx,rax
    6502d8e1:	and    eax,0x1f
    6502d8e4:	sar    rcx,0x5
    6502d8e8:	imul   rax,rax,0x58
    6502d8ec:	mov    rdx,QWORD PTR [rdx+rcx*8]
    6502d8f0:	test   BYTE PTR [rdx+rax*1+0x8],0x1
    6502d8f5:	je     0x6502d900
    6502d8f7:	mov    rax,QWORD PTR [rdx+rax*1]
    6502d8fb:	add    rsp,0x38
    6502d8ff:	ret    
    6502d900:	call   0x65020450
    6502d905:	mov    DWORD PTR [rax],0x0
    6502d90b:	call   0x65020420
    6502d910:	xor    r9d,r9d
    6502d913:	xor    r8d,r8d
    6502d916:	xor    edx,edx
    6502d918:	xor    ecx,ecx
    6502d91a:	mov    DWORD PTR [rax],0x9
    6502d920:	mov    QWORD PTR [rsp+0x20],0x0
    6502d929:	call   0x6501d9c0
    6502d92e:	or     rax,0xffffffffffffffff
    6502d932:	add    rsp,0x38
    6502d936:	ret    
    6502d937:	int3   
    6502d938:	int3   
    6502d939:	int3   
    6502d93a:	int3   
    6502d93b:	int3   
    6502d93c:	int3   
    6502d93d:	int3   
    6502d93e:	int3   
    6502d93f:	int3   
    6502d940:	mov    QWORD PTR [rsp+0x8],rbx
    6502d945:	mov    QWORD PTR [rsp+0x10],rsi
    6502d94a:	mov    QWORD PTR [rsp+0x18],rdi
    6502d94f:	mov    QWORD PTR [rsp+0x20],r12
    6502d954:	push   r13
    6502d956:	sub    rsp,0x20
    6502d95a:	movsxd rax,ecx
    6502d95d:	mov    r12,rax
    6502d960:	sar    r12,0x5
    6502d964:	lea    r13,[rip+0x1b635]        # 0x65048fa0
    6502d96b:	mov    dil,al
    6502d96e:	and    edi,0x1f
    6502d971:	imul   rdi,rdi,0x58
    6502d975:	mov    rsi,QWORD PTR [r13+r12*8+0x0]
    6502d97a:	mov    ebx,0x1
    6502d97f:	cmp    DWORD PTR [rdi+rsi*1+0xc],0x0
    6502d984:	jne    0x6502d9bb
    6502d986:	lea    ecx,[rbx+0x9]
    6502d989:	call   0x65029930
    6502d98e:	nop
    6502d98f:	cmp    DWORD PTR [rdi+rsi*1+0xc],0x0
    6502d994:	jne    0x6502d9b1
    6502d996:	lea    rcx,[rdi+rsi*1+0x10]
    6502d99b:	mov    edx,0xfa0
    6502d9a0:	call   0x65029e90
    6502d9a5:	xor    ecx,ecx
    6502d9a7:	test   eax,eax
    6502d9a9:	cmove  ebx,ecx
    6502d9ac:	add    DWORD PTR [rdi+rsi*1+0xc],0x1
    6502d9b1:	mov    ecx,0xa
    6502d9b6:	call   0x65029800
    6502d9bb:	test   ebx,ebx
    6502d9bd:	je     0x6502d9cf
    6502d9bf:	mov    rcx,QWORD PTR [r13+r12*8+0x0]
    6502d9c4:	lea    rcx,[rcx+rdi*1+0x10]
    6502d9c9:	call   QWORD PTR [rip+0x6749]        # 0x65034118
    6502d9cf:	mov    eax,ebx
    6502d9d1:	mov    rbx,QWORD PTR [rsp+0x30]
    6502d9d6:	mov    rsi,QWORD PTR [rsp+0x38]
    6502d9db:	mov    rdi,QWORD PTR [rsp+0x40]
    6502d9e0:	mov    r12,QWORD PTR [rsp+0x48]
    6502d9e5:	add    rsp,0x20
    6502d9e9:	pop    r13
    6502d9eb:	ret    
    6502d9ec:	int3   
    6502d9ed:	int3   
    6502d9ee:	int3   
    6502d9ef:	int3   
    6502d9f0:	rex push rbp
    6502d9f2:	sub    rsp,0x20
    6502d9f6:	mov    rbp,rdx
    6502d9f9:	mov    ecx,0xa
    6502d9fe:	call   0x65029800
    6502da03:	add    rsp,0x20
    6502da07:	pop    rbp
    6502da08:	ret    
    6502da09:	int3   
    6502da0a:	int3   
    6502da0b:	int3   
    6502da0c:	int3   
    6502da0d:	int3   
    6502da0e:	int3   
    6502da0f:	int3   
    6502da10:	movsxd rax,ecx
    6502da13:	lea    r8,[rip+0x1b586]        # 0x65048fa0
    6502da1a:	mov    cl,al
    6502da1c:	mov    rdx,rax
    6502da1f:	and    ecx,0x1f
    6502da22:	sar    rdx,0x5
    6502da26:	mov    rax,QWORD PTR [r8+rdx*8]
    6502da2a:	imul   rcx,rcx,0x58
    6502da2e:	lea    rcx,[rax+rcx*1+0x10]
    6502da33:	rex.W jmp QWORD PTR [rip+0x66e6]        # 0x65034120
    6502da3a:	int3   
    6502da3b:	int3   
    6502da3c:	int3   
    6502da3d:	int3   
    6502da3e:	int3   
    6502da3f:	int3   
    6502da40:	rex push rbx
    6502da42:	sub    rsp,0x60
    6502da46:	mov    rax,QWORD PTR [rip+0x156d3]        # 0x65043120
    6502da4d:	xor    rax,rsp
    6502da50:	mov    QWORD PTR [rsp+0x50],rax
    6502da55:	xor    ebx,ebx
    6502da57:	mov    WORD PTR [rsp+0x40],cx
    6502da5c:	cmp    DWORD PTR [rip+0x16b1a],ebx        # 0x6504457c
    6502da62:	je     0x6502dacc
    6502da64:	mov    rcx,QWORD PTR [rip+0x16b8d]        # 0x650445f8
    6502da6b:	cmp    rcx,0xfffffffffffffffe
    6502da6f:	jne    0x6502da7d
    6502da71:	call   0x6502e490
    6502da76:	mov    rcx,QWORD PTR [rip+0x16b7b]        # 0x650445f8
    6502da7d:	cmp    rcx,0xffffffffffffffff
    6502da81:	je     0x6502db50
    6502da87:	lea    r9,[rsp+0x44]
    6502da8c:	lea    rdx,[rsp+0x40]
    6502da91:	mov    r8d,0x1
    6502da97:	mov    QWORD PTR [rsp+0x20],rbx
    6502da9c:	call   QWORD PTR [rip+0x66ce]        # 0x65034170
    6502daa2:	test   eax,eax
    6502daa4:	jne    0x6502db44
    6502daaa:	cmp    DWORD PTR [rip+0x16acb],0x2        # 0x6504457c
    6502dab1:	jne    0x6502db50
    6502dab7:	call   QWORD PTR [rip+0x65ab]        # 0x65034068
    6502dabd:	cmp    eax,0x78
    6502dac0:	jne    0x6502db50
    6502dac6:	mov    DWORD PTR [rip+0x16ab0],ebx        # 0x6504457c
    6502dacc:	call   QWORD PTR [rip+0x66a6]        # 0x65034178
    6502dad2:	mov    QWORD PTR [rsp+0x38],rbx
    6502dad7:	mov    QWORD PTR [rsp+0x30],rbx
    6502dadc:	mov    ecx,eax
    6502dade:	lea    rax,[rsp+0x48]
    6502dae3:	lea    r8,[rsp+0x40]
    6502dae8:	mov    r9d,0x1
    6502daee:	xor    edx,edx
    6502daf0:	mov    DWORD PTR [rsp+0x28],0x5
    6502daf8:	mov    QWORD PTR [rsp+0x20],rax
    6502dafd:	call   QWORD PTR [rip+0x652d]        # 0x65034030
    6502db03:	mov    rcx,QWORD PTR [rip+0x16aee]        # 0x650445f8
    6502db0a:	cmp    rcx,0xffffffffffffffff
    6502db0e:	je     0x6502db50
    6502db10:	lea    r9,[rsp+0x44]
    6502db15:	lea    rdx,[rsp+0x48]
    6502db1a:	mov    r8d,eax
    6502db1d:	mov    QWORD PTR [rsp+0x20],rbx
    6502db22:	call   QWORD PTR [rip+0x6658]        # 0x65034180
    6502db28:	test   eax,eax
    6502db2a:	je     0x6502db50
    6502db2c:	mov    ax,WORD PTR [rsp+0x40]
    6502db31:	mov    rcx,QWORD PTR [rsp+0x50]
    6502db36:	xor    rcx,rsp
    6502db39:	call   0x6501e650
    6502db3e:	add    rsp,0x60
    6502db42:	pop    rbx
    6502db43:	ret    
    6502db44:	mov    DWORD PTR [rip+0x16a2e],0x1        # 0x6504457c
    6502db4e:	jmp    0x6502db2c
    6502db50:	or     ax,0xffff
    6502db54:	mov    rcx,QWORD PTR [rsp+0x50]
    6502db59:	xor    rcx,rsp
    6502db5c:	call   0x6501e650
    6502db61:	add    rsp,0x60
    6502db65:	pop    rbx
    6502db66:	ret    
    6502db67:	int3   
    6502db68:	int3   
    6502db69:	int3   
    6502db6a:	int3   
    6502db6b:	int3   
    6502db6c:	int3   
    6502db6d:	int3   
    6502db6e:	int3   
    6502db6f:	int3   
    6502db70:	mov    QWORD PTR [rsp+0x8],rbx
    6502db75:	mov    QWORD PTR [rsp+0x10],rsi
    6502db7a:	mov    QWORD PTR [rsp+0x18],rdi
    6502db7f:	push   r12
    6502db81:	sub    rsp,0x30
    6502db85:	xor    r12d,r12d
    6502db88:	mov    edi,r12d
    6502db8b:	lea    ecx,[r12+0x1]
    6502db90:	call   0x65029930
    6502db95:	nop
    6502db96:	mov    ebx,0x3
    6502db9b:	mov    DWORD PTR [rsp+0x20],ebx
    6502db9f:	nop
    6502dba0:	cmp    ebx,DWORD PTR [rip+0x1b3da]        # 0x65048f80
    6502dba6:	jge    0x6502dc12
    6502dba8:	movsxd rsi,ebx
    6502dbab:	mov    rax,QWORD PTR [rip+0x1a3be]        # 0x65047f70
    6502dbb2:	cmp    QWORD PTR [rax+rsi*8],0x0
    6502dbb7:	je     0x6502dc09
    6502dbb9:	mov    rcx,QWORD PTR [rax+rsi*8]
    6502dbbd:	test   BYTE PTR [rcx+0x18],0x83
    6502dbc1:	je     0x6502dbd4
    6502dbc3:	call   0x6502e5b0
    6502dbc8:	cmp    eax,0xffffffff
    6502dbcb:	je     0x6502dbd4
    6502dbcd:	add    edi,0x1
    6502dbd0:	mov    DWORD PTR [rsp+0x24],edi
    6502dbd4:	cmp    ebx,0x14
    6502dbd7:	jl     0x6502dc09
    6502dbd9:	mov    rax,QWORD PTR [rip+0x1a390]        # 0x65047f70
    6502dbe0:	mov    rcx,QWORD PTR [rax+rsi*8]
    6502dbe4:	add    rcx,0x30
    6502dbe8:	call   QWORD PTR [rip+0x653a]        # 0x65034128
    6502dbee:	mov    rcx,QWORD PTR [rip+0x1a37b]        # 0x65047f70
    6502dbf5:	mov    rcx,QWORD PTR [rcx+rsi*8]
    6502dbf9:	call   0x6501fc00
    6502dbfe:	mov    r11,QWORD PTR [rip+0x1a36b]        # 0x65047f70
    6502dc05:	mov    QWORD PTR [r11+rsi*8],r12
    6502dc09:	add    ebx,0x1
    6502dc0c:	mov    DWORD PTR [rsp+0x20],ebx
    6502dc10:	jmp    0x6502dba0
    6502dc12:	mov    ecx,0x1
    6502dc17:	call   0x65029800
    6502dc1c:	mov    eax,edi
    6502dc1e:	mov    rbx,QWORD PTR [rsp+0x40]
    6502dc23:	mov    rsi,QWORD PTR [rsp+0x48]
    6502dc28:	mov    rdi,QWORD PTR [rsp+0x50]
    6502dc2d:	add    rsp,0x30
    6502dc31:	pop    r12
    6502dc33:	ret    
    6502dc34:	int3   
    6502dc35:	int3   
    6502dc36:	int3   
    6502dc37:	int3   
    6502dc38:	int3   
    6502dc39:	int3   
    6502dc3a:	int3   
    6502dc3b:	int3   
    6502dc3c:	int3   
    6502dc3d:	int3   
    6502dc3e:	int3   
    6502dc3f:	int3   
    6502dc40:	rex push rbp
    6502dc42:	sub    rsp,0x20
    6502dc46:	mov    rbp,rdx
    6502dc49:	mov    ecx,0x1
    6502dc4e:	call   0x65029800
    6502dc53:	add    rsp,0x20
    6502dc57:	pop    rbp
    6502dc58:	ret    
    6502dc59:	int3   
    6502dc5a:	int3   
    6502dc5b:	int3   
    6502dc5c:	int3   
    6502dc5d:	int3   
    6502dc5e:	int3   
    6502dc5f:	int3   
    6502dc60:	mov    QWORD PTR [rsp+0x10],rbx
    6502dc65:	push   rsi
    6502dc66:	sub    rsp,0x20
    6502dc6a:	mov    rbx,rcx
    6502dc6d:	mov    ecx,DWORD PTR [rcx+0x18]
    6502dc70:	xor    esi,esi
    6502dc72:	mov    eax,ecx
    6502dc74:	and    al,0x3
    6502dc76:	cmp    al,0x2
    6502dc78:	jne    0x6502dcc5
    6502dc7a:	test   ecx,0x108
    6502dc80:	je     0x6502dcc5
    6502dc82:	mov    QWORD PTR [rsp+0x30],rdi
    6502dc87:	mov    edi,DWORD PTR [rbx]
    6502dc89:	sub    edi,DWORD PTR [rbx+0x10]
    6502dc8c:	test   edi,edi
    6502dc8e:	jle    0x6502dcc0
    6502dc90:	mov    rcx,rbx
    6502dc93:	call   0x6502b790
    6502dc98:	mov    rdx,QWORD PTR [rbx+0x10]
    6502dc9c:	mov    r8d,edi
    6502dc9f:	mov    ecx,eax
    6502dca1:	call   0x6502b300
    6502dca6:	cmp    eax,edi
    6502dca8:	jne    0x6502dcb9
    6502dcaa:	mov    eax,DWORD PTR [rbx+0x18]
    6502dcad:	test   al,al
    6502dcaf:	jns    0x6502dcc0
    6502dcb1:	and    eax,0xfffffffd
    6502dcb4:	mov    DWORD PTR [rbx+0x18],eax
    6502dcb7:	jmp    0x6502dcc0
    6502dcb9:	or     DWORD PTR [rbx+0x18],0x20
    6502dcbd:	or     esi,0xffffffff
    6502dcc0:	mov    rdi,QWORD PTR [rsp+0x30]
    6502dcc5:	mov    rcx,QWORD PTR [rbx+0x10]
    6502dcc9:	mov    DWORD PTR [rbx+0x8],0x0
    6502dcd0:	mov    eax,esi
    6502dcd2:	mov    QWORD PTR [rbx],rcx
    6502dcd5:	mov    rbx,QWORD PTR [rsp+0x38]
    6502dcda:	add    rsp,0x20
    6502dcde:	pop    rsi
    6502dcdf:	ret    
    6502dce0:	rex push rbx
    6502dce2:	sub    rsp,0x20
    6502dce6:	test   rcx,rcx
    6502dce9:	mov    rbx,rcx
    6502dcec:	jne    0x6502dcf8
    6502dcee:	add    rsp,0x20
    6502dcf2:	pop    rbx
    6502dcf3:	jmp    0x6502dda0
    6502dcf8:	mov    ecx,DWORD PTR [rcx+0x18]
    6502dcfb:	mov    QWORD PTR [rsp+0x30],rsi
    6502dd00:	xor    esi,esi
    6502dd02:	mov    eax,ecx
    6502dd04:	and    al,0x3
    6502dd06:	cmp    al,0x2
    6502dd08:	jne    0x6502dd55
    6502dd0a:	test   ecx,0x108
    6502dd10:	je     0x6502dd55
    6502dd12:	mov    QWORD PTR [rsp+0x38],rdi
    6502dd17:	mov    edi,DWORD PTR [rbx]
    6502dd19:	sub    edi,DWORD PTR [rbx+0x10]
    6502dd1c:	test   edi,edi
    6502dd1e:	jle    0x6502dd50
    6502dd20:	mov    rcx,rbx
    6502dd23:	call   0x6502b790
    6502dd28:	mov    rdx,QWORD PTR [rbx+0x10]
    6502dd2c:	mov    r8d,edi
    6502dd2f:	mov    ecx,eax
    6502dd31:	call   0x6502b300
    6502dd36:	cmp    eax,edi
    6502dd38:	jne    0x6502dd49
    6502dd3a:	mov    eax,DWORD PTR [rbx+0x18]
    6502dd3d:	test   al,al
    6502dd3f:	jns    0x6502dd50
    6502dd41:	and    eax,0xfffffffd
    6502dd44:	mov    DWORD PTR [rbx+0x18],eax
    6502dd47:	jmp    0x6502dd50
    6502dd49:	or     DWORD PTR [rbx+0x18],0x20
    6502dd4d:	or     esi,0xffffffff
    6502dd50:	mov    rdi,QWORD PTR [rsp+0x38]
    6502dd55:	mov    rcx,QWORD PTR [rbx+0x10]
    6502dd59:	test   esi,esi
    6502dd5b:	mov    rsi,QWORD PTR [rsp+0x30]
    6502dd60:	mov    QWORD PTR [rbx],rcx
    6502dd63:	mov    DWORD PTR [rbx+0x8],0x0
    6502dd6a:	je     0x6502dd75
    6502dd6c:	or     eax,0xffffffff
    6502dd6f:	add    rsp,0x20
    6502dd73:	pop    rbx
    6502dd74:	ret    
    6502dd75:	bt     DWORD PTR [rbx+0x18],0xe
    6502dd7a:	jae    0x6502dd95
    6502dd7c:	mov    rcx,rbx
    6502dd7f:	call   0x6502b790
    6502dd84:	mov    ecx,eax
    6502dd86:	call   0x6502e650
    6502dd8b:	neg    eax
    6502dd8d:	sbb    eax,eax
    6502dd8f:	add    rsp,0x20
    6502dd93:	pop    rbx
    6502dd94:	ret    
    6502dd95:	xor    eax,eax
    6502dd97:	add    rsp,0x20
    6502dd9b:	pop    rbx
    6502dd9c:	ret    
    6502dd9d:	int3   
    6502dd9e:	int3   
    6502dd9f:	int3   
    6502dda0:	mov    QWORD PTR [rsp+0x8],rbx
    6502dda5:	mov    QWORD PTR [rsp+0x10],rsi
    6502ddaa:	mov    QWORD PTR [rsp+0x18],rdi
    6502ddaf:	push   r12
    6502ddb1:	push   r13
    6502ddb3:	push   r14
    6502ddb5:	sub    rsp,0x30
    6502ddb9:	mov    r12d,ecx
    6502ddbc:	xor    edi,edi
    6502ddbe:	mov    r13d,edi
    6502ddc1:	lea    ecx,[rdi+0x1]
    6502ddc4:	call   0x65029930
    6502ddc9:	nop
    6502ddca:	mov    ebx,edi
    6502ddcc:	mov    DWORD PTR [rsp+0x20],ebx
    6502ddd0:	or     r14d,0xffffffff
    6502ddd4:	cmp    ebx,DWORD PTR [rip+0x1b1a6]        # 0x65048f80
    6502ddda:	jge    0x6502de66
    6502dde0:	movsxd rsi,ebx
    6502dde3:	mov    rax,QWORD PTR [rip+0x1a186]        # 0x65047f70
    6502ddea:	cmp    QWORD PTR [rax+rsi*8],0x0
    6502ddef:	je     0x6502de5a
    6502ddf1:	mov    rdx,QWORD PTR [rax+rsi*8]
    6502ddf5:	test   BYTE PTR [rdx+0x18],0x83
    6502ddf9:	je     0x6502de5a
    6502ddfb:	mov    ecx,ebx
    6502ddfd:	call   0x6502b6e0
    6502de02:	nop
    6502de03:	mov    rax,QWORD PTR [rip+0x1a166]        # 0x65047f70
    6502de0a:	mov    rcx,QWORD PTR [rax+rsi*8]
    6502de0e:	mov    eax,DWORD PTR [rcx+0x18]
    6502de11:	test   al,0x83
    6502de13:	je     0x6502de48
    6502de15:	cmp    r12d,0x1
    6502de19:	jne    0x6502de2e
    6502de1b:	call   0x6502dce0
    6502de20:	cmp    eax,0xffffffff
    6502de23:	je     0x6502de48
    6502de25:	add    edi,r12d
    6502de28:	mov    DWORD PTR [rsp+0x24],edi
    6502de2c:	jmp    0x6502de48
    6502de2e:	test   r12d,r12d
    6502de31:	jne    0x6502de48
    6502de33:	test   al,0x2
    6502de35:	je     0x6502de48
    6502de37:	call   0x6502dce0
    6502de3c:	cmp    eax,0xffffffff
    6502de3f:	cmove  r13d,r14d
    6502de43:	mov    DWORD PTR [rsp+0x28],r13d
    6502de48:	mov    rdx,QWORD PTR [rip+0x1a121]        # 0x65047f70
    6502de4f:	mov    rdx,QWORD PTR [rdx+rsi*8]
    6502de53:	mov    ecx,ebx
    6502de55:	call   0x6502b770
    6502de5a:	add    ebx,0x1
    6502de5d:	mov    DWORD PTR [rsp+0x20],ebx
    6502de61:	jmp    0x6502ddd4
    6502de66:	mov    ecx,0x1
    6502de6b:	call   0x65029800
    6502de70:	cmp    r12d,0x1
    6502de74:	cmove  r13d,edi
    6502de78:	mov    eax,r13d
    6502de7b:	mov    rbx,QWORD PTR [rsp+0x50]
    6502de80:	mov    rsi,QWORD PTR [rsp+0x58]
    6502de85:	mov    rdi,QWORD PTR [rsp+0x60]
    6502de8a:	add    rsp,0x30
    6502de8e:	pop    r14
    6502de90:	pop    r13
    6502de92:	pop    r12
    6502de94:	ret    
    6502de95:	int3   
    6502de96:	int3   
    6502de97:	int3   
    6502de98:	int3   
    6502de99:	int3   
    6502de9a:	int3   
    6502de9b:	int3   
    6502de9c:	int3   
    6502de9d:	int3   
    6502de9e:	int3   
    6502de9f:	int3   
    6502dea0:	rex push rbp
    6502dea2:	sub    rsp,0x20
    6502dea6:	mov    rbp,rdx
    6502dea9:	movsxd rcx,DWORD PTR [rbp+0x20]
    6502dead:	mov    rax,rcx
    6502deb0:	mov    rdx,QWORD PTR [rip+0x1a0b9]        # 0x65047f70
    6502deb7:	mov    rdx,QWORD PTR [rdx+rcx*8]
    6502debb:	call   0x6502b770
    6502dec0:	add    rsp,0x20
    6502dec4:	pop    rbp
    6502dec5:	ret    
    6502dec6:	int3   
    6502dec7:	int3   
    6502dec8:	int3   
    6502dec9:	int3   
    6502deca:	int3   
    6502decb:	int3   
    6502decc:	int3   
    6502decd:	int3   
    6502dece:	int3   
    6502decf:	int3   
    6502ded0:	rex push rbp
    6502ded2:	sub    rsp,0x20
    6502ded6:	mov    rbp,rdx
    6502ded9:	mov    ecx,0x1
    6502dede:	call   0x65029800
    6502dee3:	add    rsp,0x20
    6502dee7:	pop    rbp
    6502dee8:	ret    
    6502dee9:	int3   
    6502deea:	int3   
    6502deeb:	int3   
    6502deec:	int3   
    6502deed:	int3   
    6502deee:	int3   
    6502deef:	int3   
    6502def0:	mov    ecx,0x1
    6502def5:	jmp    0x6502dda0
    6502defa:	int3   
    6502defb:	int3   
    6502defc:	int3   
    6502defd:	int3   
    6502defe:	int3   
    6502deff:	int3   
    6502df00:	rex push rbx
    6502df02:	push   rdi
    6502df03:	push   r12
    6502df05:	sub    rsp,0x20
    6502df09:	mov    r12d,ecx
    6502df0c:	mov    rcx,rdx
    6502df0f:	mov    rbx,rdx
    6502df12:	call   0x6502b790
    6502df17:	mov    edx,DWORD PTR [rbx+0x18]
    6502df1a:	test   dl,0x82
    6502df1d:	movsxd rdi,eax
    6502df20:	jne    0x6502df3f
    6502df22:	call   0x65020420
    6502df27:	mov    DWORD PTR [rax],0x9
    6502df2d:	or     DWORD PTR [rbx+0x18],0x20
    6502df31:	mov    eax,0xffff
    6502df36:	add    rsp,0x20
    6502df3a:	pop    r12
    6502df3c:	pop    rdi
    6502df3d:	pop    rbx
    6502df3e:	ret    
    6502df3f:	test   dl,0x40
    6502df42:	je     0x6502df61
    6502df44:	call   0x65020420
    6502df49:	mov    DWORD PTR [rax],0x22
    6502df4f:	or     DWORD PTR [rbx+0x18],0x20
    6502df53:	mov    eax,0xffff
    6502df58:	add    rsp,0x20
    6502df5c:	pop    r12
    6502df5e:	pop    rdi
    6502df5f:	pop    rbx
    6502df60:	ret    
    6502df61:	mov    QWORD PTR [rsp+0x50],rsi
    6502df66:	xor    esi,esi
    6502df68:	test   dl,0x1
    6502df6b:	je     0x6502df86
    6502df6d:	test   dl,0x10
    6502df70:	mov    DWORD PTR [rbx+0x8],esi
    6502df73:	je     0x6502e013
    6502df79:	mov    rax,QWORD PTR [rbx+0x10]
    6502df7d:	and    edx,0xfffffffe
    6502df80:	mov    QWORD PTR [rbx],rax
    6502df83:	mov    DWORD PTR [rbx+0x18],edx
    6502df86:	mov    eax,DWORD PTR [rbx+0x18]
    6502df89:	mov    DWORD PTR [rbx+0x8],esi
    6502df8c:	and    eax,0xffffffef
    6502df8f:	or     eax,0x2
    6502df92:	test   eax,0x10c
    6502df97:	mov    DWORD PTR [rbx+0x18],eax
    6502df9a:	jne    0x6502dfcb
    6502df9c:	call   0x6502b530
    6502dfa1:	add    rax,0x30
    6502dfa5:	cmp    rbx,rax
    6502dfa8:	je     0x6502dfb8
    6502dfaa:	call   0x6502b530
    6502dfaf:	add    rax,0x60
    6502dfb3:	cmp    rbx,rax
    6502dfb6:	jne    0x6502dfc3
    6502dfb8:	mov    ecx,edi
    6502dfba:	call   0x6502b4b0
    6502dfbf:	test   eax,eax
    6502dfc1:	jne    0x6502dfcb
    6502dfc3:	mov    rcx,rbx
    6502dfc6:	call   0x6502b450
    6502dfcb:	test   DWORD PTR [rbx+0x18],0x108
    6502dfd2:	mov    QWORD PTR [rsp+0x40],rbp
    6502dfd7:	je     0x6502e07e
    6502dfdd:	mov    ebp,DWORD PTR [rbx]
    6502dfdf:	mov    rdx,QWORD PTR [rbx+0x10]
    6502dfe3:	sub    ebp,DWORD PTR [rbx+0x10]
    6502dfe6:	lea    rax,[rdx+0x2]
    6502dfea:	mov    QWORD PTR [rbx],rax
    6502dfed:	mov    eax,DWORD PTR [rbx+0x24]
    6502dff0:	sub    eax,0x2
    6502dff3:	test   ebp,ebp
    6502dff5:	mov    DWORD PTR [rbx+0x8],eax
    6502dff8:	jle    0x6502e02c
    6502dffa:	mov    r8d,ebp
    6502dffd:	mov    ecx,edi
    6502dfff:	call   0x6502b300
    6502e004:	mov    esi,eax
    6502e006:	mov    rax,QWORD PTR [rbx+0x10]
    6502e00a:	mov    WORD PTR [rax],r12w
    6502e00e:	jmp    0x6502e09a
    6502e013:	mov    rsi,QWORD PTR [rsp+0x50]
    6502e018:	or     edx,0x20
    6502e01b:	mov    eax,0xffff
    6502e020:	mov    DWORD PTR [rbx+0x18],edx
    6502e023:	add    rsp,0x20
    6502e027:	pop    r12
    6502e029:	pop    rdi
    6502e02a:	pop    rbx
    6502e02b:	ret    
    6502e02c:	cmp    edi,0xffffffff
    6502e02f:	je     0x6502e054
    6502e031:	cmp    edi,0xfffffffe
    6502e034:	je     0x6502e054
    6502e036:	mov    rax,rdi
    6502e039:	mov    rcx,rdi
    6502e03c:	lea    rdx,[rip+0x1af5d]        # 0x65048fa0
    6502e043:	and    eax,0x1f
    6502e046:	sar    rcx,0x5
    6502e04a:	imul   rax,rax,0x58
    6502e04e:	add    rax,QWORD PTR [rdx+rcx*8]
    6502e052:	jmp    0x6502e05b
    6502e054:	lea    rax,[rip+0x15975]        # 0x650439d0
    6502e05b:	test   BYTE PTR [rax+0x8],0x20
    6502e05f:	je     0x6502e074
    6502e061:	xor    edx,edx
    6502e063:	mov    ecx,edi
    6502e065:	lea    r8d,[rdx+0x2]
    6502e069:	call   0x6502a9a0
    6502e06e:	cmp    rax,0xffffffffffffffff
    6502e072:	je     0x6502e09e
    6502e074:	mov    rax,QWORD PTR [rbx+0x10]
    6502e078:	mov    WORD PTR [rax],r12w
    6502e07c:	jmp    0x6502e09a
    6502e07e:	mov    ebp,0x2
    6502e083:	lea    rdx,[rsp+0x48]
    6502e088:	mov    ecx,edi
    6502e08a:	mov    r8d,ebp
    6502e08d:	mov    WORD PTR [rsp+0x48],r12w
    6502e093:	call   0x6502b300
    6502e098:	mov    esi,eax
    6502e09a:	cmp    esi,ebp
    6502e09c:	je     0x6502e0a9
    6502e09e:	or     DWORD PTR [rbx+0x18],0x20
    6502e0a2:	mov    eax,0xffff
    6502e0a7:	jmp    0x6502e0ad
    6502e0a9:	movzx  eax,r12w
    6502e0ad:	mov    rbp,QWORD PTR [rsp+0x40]
    6502e0b2:	mov    rsi,QWORD PTR [rsp+0x50]
    6502e0b7:	add    rsp,0x20
    6502e0bb:	pop    r12
    6502e0bd:	pop    rdi
    6502e0be:	pop    rbx
    6502e0bf:	ret    
    6502e0c0:	push   r12
    6502e0c2:	push   r13
    6502e0c4:	push   r14
    6502e0c6:	sub    rsp,0x50
    6502e0ca:	test   rcx,rcx
    6502e0cd:	mov    r12d,r9d
    6502e0d0:	mov    r13,r8
    6502e0d3:	mov    r14,rdx
    6502e0d6:	mov    BYTE PTR [rsp+0x48],0x0
    6502e0db:	jne    0x6502e178
    6502e0e1:	call   0x65020a30
    6502e0e6:	mov    QWORD PTR [rsp+0x40],rax
    6502e0eb:	mov    r10,QWORD PTR [rax+0xc0]
    6502e0f2:	cmp    r10,QWORD PTR [rip+0x158a7]        # 0x650439a0
    6502e0f9:	mov    QWORD PTR [rsp+0x30],r10
    6502e0fe:	mov    r11,QWORD PTR [rax+0xb8]
    6502e105:	mov    QWORD PTR [rsp+0x38],r11
    6502e10a:	je     0x6502e131
    6502e10c:	mov    ecx,DWORD PTR [rax+0xc8]
    6502e112:	test   DWORD PTR [rip+0x15710],ecx        # 0x65043828
    6502e118:	jne    0x6502e131
    6502e11a:	call   0x65023e90
    6502e11f:	mov    r11,QWORD PTR [rsp+0x38]
    6502e124:	mov    r10,rax
    6502e127:	mov    QWORD PTR [rsp+0x30],rax
    6502e12c:	mov    rax,QWORD PTR [rsp+0x40]
    6502e131:	cmp    r11,QWORD PTR [rip+0x155e8]        # 0x65043720
    6502e138:	je     0x6502e15c
    6502e13a:	mov    ecx,DWORD PTR [rax+0xc8]
    6502e140:	test   DWORD PTR [rip+0x156e2],ecx        # 0x65043828
    6502e146:	jne    0x6502e15c
    6502e148:	call   0x65023340
    6502e14d:	mov    r10,QWORD PTR [rsp+0x30]
    6502e152:	mov    QWORD PTR [rsp+0x38],rax
    6502e157:	mov    rax,QWORD PTR [rsp+0x40]
    6502e15c:	test   BYTE PTR [rax+0xc8],0x2
    6502e163:	jne    0x6502e190
    6502e165:	or     DWORD PTR [rax+0xc8],0x2
    6502e16c:	mov    r10,QWORD PTR [rsp+0x30]
    6502e171:	mov    BYTE PTR [rsp+0x48],0x1
    6502e176:	jmp    0x6502e190
    6502e178:	mov    rax,QWORD PTR [rcx]
    6502e17b:	lea    rdx,[rsp+0x30]
    6502e180:	mov    QWORD PTR [rdx],rax
    6502e183:	mov    rax,QWORD PTR [rcx+0x8]
    6502e187:	mov    QWORD PTR [rdx+0x8],rax
    6502e18b:	mov    r10,QWORD PTR [rsp+0x30]
    6502e190:	test   r13,r13
    6502e193:	je     0x6502e199
    6502e195:	mov    QWORD PTR [r13+0x0],r14
    6502e199:	test   r14,r14
    6502e19c:	jne    0x6502e1e1
    6502e19e:	call   0x65020420
    6502e1a3:	xor    r9d,r9d
    6502e1a6:	xor    r8d,r8d
    6502e1a9:	xor    edx,edx
    6502e1ab:	xor    ecx,ecx
    6502e1ad:	mov    QWORD PTR [rsp+0x20],0x0
    6502e1b6:	mov    DWORD PTR [rax],0x16
    6502e1bc:	call   0x6501d9c0
    6502e1c1:	cmp    BYTE PTR [rsp+0x48],0x0
    6502e1c6:	je     0x6502e1d4
    6502e1c8:	mov    rax,QWORD PTR [rsp+0x40]
    6502e1cd:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502e1d4:	xor    eax,eax
    6502e1d6:	add    rsp,0x50
    6502e1da:	pop    r14
    6502e1dc:	pop    r13
    6502e1de:	pop    r12
    6502e1e0:	ret    
    6502e1e1:	test   r12d,r12d
    6502e1e4:	je     0x6502e1f2
    6502e1e6:	cmp    r12d,0x2
    6502e1ea:	jl     0x6502e19e
    6502e1ec:	cmp    r12d,0x24
    6502e1f0:	jg     0x6502e19e
    6502e1f2:	mov    QWORD PTR [rsp+0x70],rbx
    6502e1f7:	mov    QWORD PTR [rsp+0x80],rsi
    6502e1ff:	mov    QWORD PTR [rsp+0x88],rdi
    6502e207:	movzx  edi,BYTE PTR [r14]
    6502e20b:	xor    esi,esi
    6502e20d:	lea    rbx,[r14+0x1]
    6502e211:	cmp    DWORD PTR [r10+0x10c],0x1
    6502e219:	jle    0x6502e235
    6502e21b:	lea    r8,[rsp+0x30]
    6502e220:	movzx  ecx,dil
    6502e224:	mov    edx,0x8
    6502e229:	call   0x65029030
    6502e22e:	mov    r10,QWORD PTR [rsp+0x30]
    6502e233:	jmp    0x6502e246
    6502e235:	mov    rax,QWORD PTR [r10+0x140]
    6502e23c:	movzx  ecx,dil
    6502e240:	mov    al,BYTE PTR [rax+rcx*2]
    6502e243:	and    eax,0x8
    6502e246:	test   eax,eax
    6502e248:	je     0x6502e253
    6502e24a:	mov    dil,BYTE PTR [rbx]
    6502e24d:	add    rbx,0x1
    6502e251:	jmp    0x6502e211
    6502e253:	cmp    dil,0x2d
    6502e257:	mov    QWORD PTR [rsp+0x78],rbp
    6502e25c:	jne    0x6502e271
    6502e25e:	mov    ebp,DWORD PTR [rsp+0x90]
    6502e265:	mov    dil,BYTE PTR [rbx]
    6502e268:	or     ebp,0x2
    6502e26b:	add    rbx,0x1
    6502e26f:	jmp    0x6502e28e
    6502e271:	cmp    dil,0x2b
    6502e275:	jne    0x6502e287
    6502e277:	mov    dil,BYTE PTR [rbx]
    6502e27a:	mov    ebp,DWORD PTR [rsp+0x90]
    6502e281:	add    rbx,0x1
    6502e285:	jmp    0x6502e28e
    6502e287:	mov    ebp,DWORD PTR [rsp+0x90]
    6502e28e:	test   r12d,r12d
    6502e291:	js     0x6502e402
    6502e297:	cmp    r12d,0x1
    6502e29b:	je     0x6502e402
    6502e2a1:	cmp    r12d,0x24
    6502e2a5:	jg     0x6502e402
    6502e2ab:	test   r12d,r12d
    6502e2ae:	jne    0x6502e2d9
    6502e2b0:	cmp    dil,0x30
    6502e2b4:	je     0x6502e2be
    6502e2b6:	mov    r12d,0xa
    6502e2bc:	jmp    0x6502e2f8
    6502e2be:	movzx  eax,BYTE PTR [rbx]
    6502e2c1:	cmp    al,0x78
    6502e2c3:	je     0x6502e2d1
    6502e2c5:	cmp    al,0x58
    6502e2c7:	je     0x6502e2d1
    6502e2c9:	mov    r12d,0x8
    6502e2cf:	jmp    0x6502e2f8
    6502e2d1:	mov    r12d,0x10
    6502e2d7:	jmp    0x6502e2e5
    6502e2d9:	cmp    r12d,0x10
    6502e2dd:	jne    0x6502e2f8
    6502e2df:	cmp    dil,0x30
    6502e2e3:	jne    0x6502e2f8
    6502e2e5:	movzx  eax,BYTE PTR [rbx]
    6502e2e8:	cmp    al,0x78
    6502e2ea:	je     0x6502e2f0
    6502e2ec:	cmp    al,0x58
    6502e2ee:	jne    0x6502e2f8
    6502e2f0:	mov    dil,BYTE PTR [rbx+0x1]
    6502e2f4:	add    rbx,0x2
    6502e2f8:	mov    r11,QWORD PTR [r10+0x140]
    6502e2ff:	xor    edx,edx
    6502e301:	or     eax,0xffffffff
    6502e304:	div    r12d
    6502e307:	mov    r9d,eax
    6502e30a:	data16 xchg ax,ax
    6502e30d:	data16 xchg ax,ax
    6502e310:	movzx  ecx,dil
    6502e314:	movzx  r8d,WORD PTR [r11+rcx*2]
    6502e319:	test   r8b,0x4
    6502e31d:	je     0x6502e328
    6502e31f:	movsx  ecx,dil
    6502e323:	sub    ecx,0x30
    6502e326:	jmp    0x6502e348
    6502e328:	test   r8d,0x103
    6502e32f:	je     0x6502e366
    6502e331:	lea    eax,[rdi-0x61]
    6502e334:	cmp    al,0x19
    6502e336:	ja     0x6502e341
    6502e338:	movsx  ecx,dil
    6502e33c:	sub    ecx,0x20
    6502e33f:	jmp    0x6502e345
    6502e341:	movsx  ecx,dil
    6502e345:	add    ecx,0xffffffc9
    6502e348:	cmp    ecx,r12d
    6502e34b:	jae    0x6502e366
    6502e34d:	or     ebp,0x8
    6502e350:	cmp    esi,r9d
    6502e353:	jb     0x6502e37b
    6502e355:	cmp    esi,r9d
    6502e358:	jne    0x6502e35e
    6502e35a:	cmp    ecx,edx
    6502e35c:	jbe    0x6502e37b
    6502e35e:	or     ebp,0x4
    6502e361:	test   r13,r13
    6502e364:	jne    0x6502e381
    6502e366:	sub    rbx,0x1
    6502e36a:	test   bpl,0x8
    6502e36e:	jne    0x6502e38a
    6502e370:	test   r13,r13
    6502e373:	cmovne rbx,r14
    6502e377:	xor    esi,esi
    6502e379:	jmp    0x6502e3da
    6502e37b:	imul   esi,r12d
    6502e37f:	add    esi,ecx
    6502e381:	mov    dil,BYTE PTR [rbx]
    6502e384:	add    rbx,0x1
    6502e388:	jmp    0x6502e310
    6502e38a:	test   bpl,0x4
    6502e38e:	jne    0x6502e3b1
    6502e390:	test   bpl,0x1
    6502e394:	jne    0x6502e3da
    6502e396:	mov    eax,ebp
    6502e398:	and    eax,0x2
    6502e39b:	je     0x6502e3a5
    6502e39d:	cmp    esi,0x80000000
    6502e3a3:	ja     0x6502e3b1
    6502e3a5:	test   eax,eax
    6502e3a7:	jne    0x6502e3da
    6502e3a9:	cmp    esi,0x7fffffff
    6502e3af:	jbe    0x6502e3da
    6502e3b1:	call   0x65020420
    6502e3b6:	test   bpl,0x1
    6502e3ba:	mov    DWORD PTR [rax],0x22
    6502e3c0:	je     0x6502e3c7
    6502e3c2:	or     esi,0xffffffff
    6502e3c5:	jmp    0x6502e3da
    6502e3c7:	test   bpl,0x2
    6502e3cb:	mov    esi,0x0
    6502e3d0:	setne  sil
    6502e3d4:	add    esi,0x7fffffff
    6502e3da:	test   r13,r13
    6502e3dd:	je     0x6502e3e3
    6502e3df:	mov    QWORD PTR [r13+0x0],rbx
    6502e3e3:	test   bpl,0x2
    6502e3e7:	je     0x6502e3eb
    6502e3e9:	neg    esi
    6502e3eb:	cmp    BYTE PTR [rsp+0x48],0x0
    6502e3f0:	je     0x6502e3fe
    6502e3f2:	mov    rcx,QWORD PTR [rsp+0x40]
    6502e3f7:	and    DWORD PTR [rcx+0xc8],0xfffffffd
    6502e3fe:	mov    eax,esi
    6502e400:	jmp    0x6502e420
    6502e402:	test   r13,r13
    6502e405:	je     0x6502e40b
    6502e407:	mov    QWORD PTR [r13+0x0],r14
    6502e40b:	cmp    BYTE PTR [rsp+0x48],sil
    6502e410:	je     0x6502e41e
    6502e412:	mov    rax,QWORD PTR [rsp+0x40]
    6502e417:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502e41e:	xor    eax,eax
    6502e420:	mov    rbp,QWORD PTR [rsp+0x78]
    6502e425:	mov    rsi,QWORD PTR [rsp+0x80]
    6502e42d:	mov    rbx,QWORD PTR [rsp+0x70]
    6502e432:	mov    rdi,QWORD PTR [rsp+0x88]
    6502e43a:	add    rsp,0x50
    6502e43e:	pop    r14
    6502e440:	pop    r13
    6502e442:	pop    r12
    6502e444:	ret    
    6502e445:	int3   
    6502e446:	int3   
    6502e447:	int3   
    6502e448:	int3   
    6502e449:	int3   
    6502e44a:	int3   
    6502e44b:	int3   
    6502e44c:	int3   
    6502e44d:	int3   
    6502e44e:	int3   
    6502e44f:	int3   
    6502e450:	sub    rsp,0x38
    6502e454:	cmp    DWORD PTR [rip+0x16e25],0x0        # 0x65045280
    6502e45b:	mov    r9d,r8d
    6502e45e:	mov    r8,rdx
    6502e461:	mov    rdx,rcx
    6502e464:	mov    DWORD PTR [rsp+0x20],0x0
    6502e46c:	jne    0x6502e47f
    6502e46e:	lea    rcx,[rip+0x1553b]        # 0x650439b0
    6502e475:	call   0x6502e0c0
    6502e47a:	add    rsp,0x38
    6502e47e:	ret    
    6502e47f:	xor    ecx,ecx
    6502e481:	call   0x6502e0c0
    6502e486:	add    rsp,0x38
    6502e48a:	ret    
    6502e48b:	int3   
    6502e48c:	int3   
    6502e48d:	int3   
    6502e48e:	int3   
    6502e48f:	int3   
    6502e490:	sub    rsp,0x48
    6502e494:	xor    eax,eax
    6502e496:	lea    rcx,[rip+0x8aa3]        # 0x65036f40
    6502e49d:	xor    r9d,r9d
    6502e4a0:	mov    QWORD PTR [rsp+0x30],rax
    6502e4a5:	mov    DWORD PTR [rsp+0x28],eax
    6502e4a9:	lea    r8d,[rax+0x3]
    6502e4ad:	mov    edx,0x40000000
    6502e4b2:	mov    DWORD PTR [rsp+0x20],0x3
    6502e4ba:	call   QWORD PTR [rip+0x5ca8]        # 0x65034168
    6502e4c0:	mov    QWORD PTR [rip+0x16131],rax        # 0x650445f8
    6502e4c7:	add    rsp,0x48
    6502e4cb:	ret    
    6502e4cc:	int3   
    6502e4cd:	int3   
    6502e4ce:	int3   
    6502e4cf:	int3   
    6502e4d0:	sub    rsp,0x28
    6502e4d4:	mov    rcx,QWORD PTR [rip+0x1611d]        # 0x650445f8
    6502e4db:	cmp    rcx,0xffffffffffffffff
    6502e4df:	je     0x6502e4ed
    6502e4e1:	cmp    rcx,0xfffffffffffffffe
    6502e4e5:	je     0x6502e4ed
    6502e4e7:	call   QWORD PTR [rip+0x5b73]        # 0x65034060
    6502e4ed:	mov    rcx,QWORD PTR [rip+0x160fc]        # 0x650445f0
    6502e4f4:	cmp    rcx,0xffffffffffffffff
    6502e4f8:	je     0x6502e506
    6502e4fa:	cmp    rcx,0xfffffffffffffffe
    6502e4fe:	je     0x6502e506
    6502e500:	call   QWORD PTR [rip+0x5b5a]        # 0x65034060
    6502e506:	add    rsp,0x28
    6502e50a:	ret    
    6502e50b:	int3   
    6502e50c:	int3   
    6502e50d:	int3   
    6502e50e:	int3   
    6502e50f:	int3   
    6502e510:	mov    QWORD PTR [rsp+0x8],rbx
    6502e515:	push   rsi
    6502e516:	sub    rsp,0x30
    6502e51a:	or     esi,0xffffffff
    6502e51d:	test   rcx,rcx
    6502e520:	mov    rbx,rcx
    6502e523:	jne    0x6502e551
    6502e525:	call   0x65020420
    6502e52a:	xor    r9d,r9d
    6502e52d:	xor    r8d,r8d
    6502e530:	xor    edx,edx
    6502e532:	xor    ecx,ecx
    6502e534:	mov    QWORD PTR [rsp+0x20],rbx
    6502e539:	mov    DWORD PTR [rax],0x16
    6502e53f:	call   0x6501d9c0
    6502e544:	or     eax,esi
    6502e546:	mov    rbx,QWORD PTR [rsp+0x40]
    6502e54b:	add    rsp,0x30
    6502e54f:	pop    rsi
    6502e550:	ret    
    6502e551:	test   BYTE PTR [rcx+0x18],0x83
    6502e555:	je     0x6502e594
    6502e557:	call   0x6502dc60
    6502e55c:	mov    rcx,rbx
    6502e55f:	mov    esi,eax
    6502e561:	call   0x6502e9b0
    6502e566:	mov    rcx,rbx
    6502e569:	call   0x6502b790
    6502e56e:	mov    ecx,eax
    6502e570:	call   0x6502e880
    6502e575:	test   eax,eax
    6502e577:	jns    0x6502e57e
    6502e579:	or     esi,0xffffffff
    6502e57c:	jmp    0x6502e594
    6502e57e:	mov    rcx,QWORD PTR [rbx+0x28]
    6502e582:	test   rcx,rcx
    6502e585:	je     0x6502e594
    6502e587:	call   0x6501fc00
    6502e58c:	mov    QWORD PTR [rbx+0x28],0x0
    6502e594:	mov    DWORD PTR [rbx+0x18],0x0
    6502e59b:	mov    rbx,QWORD PTR [rsp+0x40]
    6502e5a0:	mov    eax,esi
    6502e5a2:	add    rsp,0x30
    6502e5a6:	pop    rsi
    6502e5a7:	ret    
    6502e5a8:	int3   
    6502e5a9:	int3   
    6502e5aa:	int3   
    6502e5ab:	int3   
    6502e5ac:	int3   
    6502e5ad:	int3   
    6502e5ae:	int3   
    6502e5af:	int3   
    6502e5b0:	mov    QWORD PTR [rsp+0x10],rbx
    6502e5b5:	mov    QWORD PTR [rsp+0x8],rcx
    6502e5ba:	push   rdi
    6502e5bb:	sub    rsp,0x30
    6502e5bf:	mov    rbx,rcx
    6502e5c2:	or     edi,0xffffffff
    6502e5c5:	xor    eax,eax
    6502e5c7:	test   rcx,rcx
    6502e5ca:	setne  al
    6502e5cd:	test   eax,eax
    6502e5cf:	jne    0x6502e5f8
    6502e5d1:	call   0x65020420
    6502e5d6:	mov    DWORD PTR [rax],0x16
    6502e5dc:	mov    QWORD PTR [rsp+0x20],0x0
    6502e5e5:	xor    r9d,r9d
    6502e5e8:	xor    r8d,r8d
    6502e5eb:	xor    edx,edx
    6502e5ed:	xor    ecx,ecx
    6502e5ef:	call   0x6501d9c0
    6502e5f4:	mov    eax,edi
    6502e5f6:	jmp    0x6502e621
    6502e5f8:	test   BYTE PTR [rcx+0x18],0x40
    6502e5fc:	je     0x6502e607
    6502e5fe:	mov    DWORD PTR [rcx+0x18],0x0
    6502e605:	jmp    0x6502e61f
    6502e607:	call   0x6502b670
    6502e60c:	nop
    6502e60d:	mov    rcx,rbx
    6502e610:	call   0x6502e510
    6502e615:	mov    edi,eax
    6502e617:	mov    rcx,rbx
    6502e61a:	call   0x6502b720
    6502e61f:	mov    eax,edi
    6502e621:	mov    rbx,QWORD PTR [rsp+0x48]
    6502e626:	add    rsp,0x30
    6502e62a:	pop    rdi
    6502e62b:	ret    
    6502e62c:	int3   
    6502e62d:	int3   
    6502e62e:	int3   
    6502e62f:	int3   
    6502e630:	rex push rbp
    6502e632:	sub    rsp,0x30
    6502e636:	mov    rbp,rdx
    6502e639:	mov    rcx,QWORD PTR [rbp+0x40]
    6502e63d:	call   0x6502b720
    6502e642:	add    rsp,0x30
    6502e646:	pop    rbp
    6502e647:	ret    
    6502e648:	int3   
    6502e649:	int3   
    6502e64a:	int3   
    6502e64b:	int3   
    6502e64c:	int3   
    6502e64d:	int3   
    6502e64e:	int3   
    6502e64f:	int3   
    6502e650:	mov    QWORD PTR [rsp+0x18],rbx
    6502e655:	mov    DWORD PTR [rsp+0x8],ecx
    6502e659:	push   rsi
    6502e65a:	push   rdi
    6502e65b:	push   r12
    6502e65d:	sub    rsp,0x30
    6502e661:	movsxd rbx,ecx
    6502e664:	cmp    ebx,0xfffffffe
    6502e667:	jne    0x6502e67c
    6502e669:	call   0x65020420
    6502e66e:	mov    DWORD PTR [rax],0x9
    6502e674:	or     eax,0xffffffff
    6502e677:	jmp    0x6502e758
    6502e67c:	test   ecx,ecx
    6502e67e:	js     0x6502e734
    6502e684:	cmp    ebx,DWORD PTR [rip+0x1a8fa]        # 0x65048f84
    6502e68a:	jae    0x6502e734
    6502e690:	mov    rsi,rbx
    6502e693:	sar    rsi,0x5
    6502e697:	lea    r12,[rip+0x1a902]        # 0x65048fa0
    6502e69e:	mov    dil,bl
    6502e6a1:	and    edi,0x1f
    6502e6a4:	imul   rdi,rdi,0x58
    6502e6a8:	mov    rax,QWORD PTR [r12+rsi*8]
    6502e6ac:	mov    cl,BYTE PTR [rax+rdi*1+0x8]
    6502e6b0:	and    ecx,0x1
    6502e6b3:	jne    0x6502e6db
    6502e6b5:	call   0x65020420
    6502e6ba:	mov    DWORD PTR [rax],0x9
    6502e6c0:	xor    edi,edi
    6502e6c2:	mov    QWORD PTR [rsp+0x20],rdi
    6502e6c7:	xor    r9d,r9d
    6502e6ca:	xor    r8d,r8d
    6502e6cd:	xor    edx,edx
    6502e6cf:	xor    ecx,ecx
    6502e6d1:	call   0x6501d9c0
    6502e6d6:	or     eax,0xffffffff
    6502e6d9:	jmp    0x6502e758
    6502e6db:	mov    ecx,ebx
    6502e6dd:	call   0x6502d940
    6502e6e2:	nop
    6502e6e3:	mov    rax,QWORD PTR [r12+rsi*8]
    6502e6e7:	test   BYTE PTR [rax+rdi*1+0x8],0x1
    6502e6ec:	je     0x6502e71b
    6502e6ee:	mov    ecx,ebx
    6502e6f0:	call   0x6502d8a0
    6502e6f5:	mov    rcx,rax
    6502e6f8:	call   QWORD PTR [rip+0x5a42]        # 0x65034140
    6502e6fe:	test   eax,eax
    6502e700:	jne    0x6502e717
    6502e702:	call   QWORD PTR [rip+0x5960]        # 0x65034068
    6502e708:	mov    edi,eax
    6502e70a:	test   eax,eax
    6502e70c:	je     0x6502e729
    6502e70e:	call   0x65020450
    6502e713:	mov    DWORD PTR [rax],edi
    6502e715:	jmp    0x6502e71b
    6502e717:	xor    edi,edi
    6502e719:	jmp    0x6502e729
    6502e71b:	call   0x65020420
    6502e720:	mov    DWORD PTR [rax],0x9
    6502e726:	or     edi,0xffffffff
    6502e729:	mov    ecx,ebx
    6502e72b:	call   0x6502da10
    6502e730:	mov    eax,edi
    6502e732:	jmp    0x6502e758
    6502e734:	call   0x65020420
    6502e739:	mov    DWORD PTR [rax],0x9
    6502e73f:	xor    edi,edi
    6502e741:	mov    QWORD PTR [rsp+0x20],rdi
    6502e746:	xor    r9d,r9d
    6502e749:	xor    r8d,r8d
    6502e74c:	xor    edx,edx
    6502e74e:	xor    ecx,ecx
    6502e750:	call   0x6501d9c0
    6502e755:	or     eax,0xffffffff
    6502e758:	mov    rbx,QWORD PTR [rsp+0x60]
    6502e75d:	add    rsp,0x30
    6502e761:	pop    r12
    6502e763:	pop    rdi
    6502e764:	pop    rsi
    6502e765:	ret    
    6502e766:	int3   
    6502e767:	int3   
    6502e768:	int3   
    6502e769:	int3   
    6502e76a:	int3   
    6502e76b:	int3   
    6502e76c:	int3   
    6502e76d:	int3   
    6502e76e:	int3   
    6502e76f:	int3   
    6502e770:	rex push rbp
    6502e772:	sub    rsp,0x30
    6502e776:	mov    rbp,rdx
    6502e779:	mov    ecx,DWORD PTR [rbp+0x50]
    6502e77c:	call   0x6502da10
    6502e781:	add    rsp,0x30
    6502e785:	pop    rbp
    6502e786:	ret    
    6502e787:	int3   
    6502e788:	int3   
    6502e789:	int3   
    6502e78a:	int3   
    6502e78b:	int3   
    6502e78c:	int3   
    6502e78d:	int3   
    6502e78e:	int3   
    6502e78f:	int3   
    6502e790:	xor    eax,eax
    6502e792:	test   rdx,rdx
    6502e795:	je     0x6502e7a9
    6502e797:	cmp    BYTE PTR [rcx],0x0
    6502e79a:	je     0x6502e7a9
    6502e79c:	add    rax,0x1
    6502e7a0:	add    rcx,0x1
    6502e7a4:	cmp    rax,rdx
    6502e7a7:	jb     0x6502e797
    6502e7a9:	ret    0x0
    6502e7ac:	int3   
    6502e7ad:	int3   
    6502e7ae:	int3   
    6502e7af:	int3   
    6502e7b0:	mov    QWORD PTR [rsp+0x8],rbx
    6502e7b5:	push   rdi
    6502e7b6:	sub    rsp,0x20
    6502e7ba:	movsxd rdi,ecx
    6502e7bd:	mov    ecx,edi
    6502e7bf:	call   0x6502d8a0
    6502e7c4:	cmp    rax,0xffffffffffffffff
    6502e7c8:	je     0x6502e82d
    6502e7ca:	cmp    edi,0x1
    6502e7cd:	jne    0x6502e7e1
    6502e7cf:	mov    rax,QWORD PTR [rip+0x1a7ca]        # 0x65048fa0
    6502e7d6:	test   BYTE PTR [rax+0xb8],dil
    6502e7dd:	jne    0x6502e7f3
    6502e7df:	jmp    0x6502e80f
    6502e7e1:	cmp    edi,0x2
    6502e7e4:	jne    0x6502e80f
    6502e7e6:	mov    rax,QWORD PTR [rip+0x1a7b3]        # 0x65048fa0
    6502e7ed:	test   BYTE PTR [rax+0x60],0x1
    6502e7f1:	je     0x6502e80f
    6502e7f3:	mov    ecx,0x2
    6502e7f8:	call   0x6502d8a0
    6502e7fd:	mov    ecx,0x1
    6502e802:	mov    rbx,rax
    6502e805:	call   0x6502d8a0
    6502e80a:	cmp    rax,rbx
    6502e80d:	je     0x6502e82d
    6502e80f:	mov    ecx,edi
    6502e811:	call   0x6502d8a0
    6502e816:	mov    rcx,rax
    6502e819:	call   QWORD PTR [rip+0x5841]        # 0x65034060
    6502e81f:	test   eax,eax
    6502e821:	jne    0x6502e82d
    6502e823:	call   QWORD PTR [rip+0x583f]        # 0x65034068
    6502e829:	mov    ebx,eax
    6502e82b:	jmp    0x6502e82f
    6502e82d:	xor    ebx,ebx
    6502e82f:	mov    ecx,edi
    6502e831:	call   0x6502d7d0
    6502e836:	mov    r11,rdi
    6502e839:	mov    rax,rdi
    6502e83c:	sar    rax,0x5
    6502e840:	and    r11d,0x1f
    6502e844:	lea    rcx,[rip+0x1a755]        # 0x65048fa0
    6502e84b:	mov    rax,QWORD PTR [rcx+rax*8]
    6502e84f:	imul   r11,r11,0x58
    6502e853:	test   ebx,ebx
    6502e855:	mov    BYTE PTR [rax+r11*1+0x8],0x0
    6502e85b:	je     0x6502e872
    6502e85d:	mov    ecx,ebx
    6502e85f:	call   0x65020480
    6502e864:	or     eax,0xffffffff
    6502e867:	mov    rbx,QWORD PTR [rsp+0x30]
    6502e86c:	add    rsp,0x20
    6502e870:	pop    rdi
    6502e871:	ret    
    6502e872:	xor    eax,eax
    6502e874:	mov    rbx,QWORD PTR [rsp+0x30]
    6502e879:	add    rsp,0x20
    6502e87d:	pop    rdi
    6502e87e:	ret    
    6502e87f:	int3   
    6502e880:	mov    QWORD PTR [rsp+0x18],rbx
    6502e885:	mov    DWORD PTR [rsp+0x8],ecx
    6502e889:	push   rsi
    6502e88a:	push   rdi
    6502e88b:	push   r12
    6502e88d:	sub    rsp,0x30
    6502e891:	movsxd rbx,ecx
    6502e894:	cmp    ebx,0xfffffffe
    6502e897:	jne    0x6502e8b5
    6502e899:	call   0x65020450
    6502e89e:	xor    ebx,ebx
    6502e8a0:	mov    DWORD PTR [rax],ebx
    6502e8a2:	call   0x65020420
    6502e8a7:	mov    DWORD PTR [rax],0x9
    6502e8ad:	or     eax,0xffffffff
    6502e8b0:	jmp    0x6502e97d
    6502e8b5:	test   ecx,ecx
    6502e8b7:	js     0x6502e952
    6502e8bd:	cmp    ebx,DWORD PTR [rip+0x1a6c1]        # 0x65048f84
    6502e8c3:	jae    0x6502e952
    6502e8c9:	mov    rsi,rbx
    6502e8cc:	sar    rsi,0x5
    6502e8d0:	lea    r12,[rip+0x1a6c9]        # 0x65048fa0
    6502e8d7:	mov    dil,bl
    6502e8da:	and    edi,0x1f
    6502e8dd:	imul   rdi,rdi,0x58
    6502e8e1:	mov    rax,QWORD PTR [r12+rsi*8]
    6502e8e5:	mov    cl,BYTE PTR [rax+rdi*1+0x8]
    6502e8e9:	and    ecx,0x1
    6502e8ec:	jne    0x6502e91b
    6502e8ee:	call   0x65020450
    6502e8f3:	xor    ebx,ebx
    6502e8f5:	mov    DWORD PTR [rax],ebx
    6502e8f7:	call   0x65020420
    6502e8fc:	mov    DWORD PTR [rax],0x9
    6502e902:	mov    QWORD PTR [rsp+0x20],rbx
    6502e907:	xor    r9d,r9d
    6502e90a:	xor    r8d,r8d
    6502e90d:	xor    edx,edx
    6502e90f:	xor    ecx,ecx
    6502e911:	call   0x6501d9c0
    6502e916:	or     eax,0xffffffff
    6502e919:	jmp    0x6502e97d
    6502e91b:	mov    ecx,ebx
    6502e91d:	call   0x6502d940
    6502e922:	nop
    6502e923:	mov    rax,QWORD PTR [r12+rsi*8]
    6502e927:	test   BYTE PTR [rax+rdi*1+0x8],0x1
    6502e92c:	je     0x6502e939
    6502e92e:	mov    ecx,ebx
    6502e930:	call   0x6502e7b0
    6502e935:	mov    edi,eax
    6502e937:	jmp    0x6502e947
    6502e939:	call   0x65020420
    6502e93e:	mov    DWORD PTR [rax],0x9
    6502e944:	or     edi,0xffffffff
    6502e947:	mov    ecx,ebx
    6502e949:	call   0x6502da10
    6502e94e:	mov    eax,edi
    6502e950:	jmp    0x6502e97d
    6502e952:	call   0x65020450
    6502e957:	xor    ebx,ebx
    6502e959:	mov    DWORD PTR [rax],ebx
    6502e95b:	call   0x65020420
    6502e960:	mov    DWORD PTR [rax],0x9
    6502e966:	mov    QWORD PTR [rsp+0x20],rbx
    6502e96b:	xor    r9d,r9d
    6502e96e:	xor    r8d,r8d
    6502e971:	xor    edx,edx
    6502e973:	xor    ecx,ecx
    6502e975:	call   0x6501d9c0
    6502e97a:	or     eax,0xffffffff
    6502e97d:	mov    rbx,QWORD PTR [rsp+0x60]
    6502e982:	add    rsp,0x30
    6502e986:	pop    r12
    6502e988:	pop    rdi
    6502e989:	pop    rsi
    6502e98a:	ret    
    6502e98b:	int3   
    6502e98c:	int3   
    6502e98d:	int3   
    6502e98e:	int3   
    6502e98f:	int3   
    6502e990:	rex push rbp
    6502e992:	sub    rsp,0x30
    6502e996:	mov    rbp,rdx
    6502e999:	mov    ecx,DWORD PTR [rbp+0x50]
    6502e99c:	call   0x6502da10
    6502e9a1:	add    rsp,0x30
    6502e9a5:	pop    rbp
    6502e9a6:	ret    
    6502e9a7:	int3   
    6502e9a8:	int3   
    6502e9a9:	int3   
    6502e9aa:	int3   
    6502e9ab:	int3   
    6502e9ac:	int3   
    6502e9ad:	int3   
    6502e9ae:	int3   
    6502e9af:	int3   
    6502e9b0:	rex push rbx
    6502e9b2:	sub    rsp,0x20
    6502e9b6:	mov    eax,DWORD PTR [rcx+0x18]
    6502e9b9:	mov    rbx,rcx
    6502e9bc:	test   al,0x83
    6502e9be:	je     0x6502e9e0
    6502e9c0:	test   al,0x8
    6502e9c2:	je     0x6502e9e0
    6502e9c4:	mov    rcx,QWORD PTR [rcx+0x10]
    6502e9c8:	call   0x6501fc00
    6502e9cd:	and    DWORD PTR [rbx+0x18],0xfffffbf7
    6502e9d4:	xor    eax,eax
    6502e9d6:	mov    QWORD PTR [rbx],rax
    6502e9d9:	mov    QWORD PTR [rbx+0x10],rax
    6502e9dd:	mov    DWORD PTR [rbx+0x8],eax
    6502e9e0:	add    rsp,0x20
    6502e9e4:	pop    rbx
    6502e9e5:	ret    
    6502e9e6:	int3   
    6502e9e7:	int3   
    6502e9e8:	int3   
    6502e9e9:	int3   
    6502e9ea:	int3   
    6502e9eb:	int3   
    6502e9ec:	int3   
    6502e9ed:	int3   
    6502e9ee:	int3   
    6502e9ef:	int3   
    6502e9f0:	mov    QWORD PTR [rsp+0x8],rcx
    6502e9f5:	push   rbp
    6502e9f6:	push   rdi
    6502e9f7:	push   r12
    6502e9f9:	sub    rsp,0x50
    6502e9fd:	lea    rbp,[rsp+0x30]
    6502ea02:	mov    QWORD PTR [rbp+0x48],rbx
    6502ea06:	mov    QWORD PTR [rbp+0x50],rsi
    6502ea0a:	mov    rax,QWORD PTR [rip+0x1470f]        # 0x65043120
    6502ea11:	xor    rax,rbp
    6502ea14:	mov    QWORD PTR [rbp+0x10],rax
    6502ea18:	mov    rsi,rcx
    6502ea1b:	test   rcx,rcx
    6502ea1e:	jne    0x6502ea27
    6502ea20:	xor    eax,eax
    6502ea22:	jmp    0x6502eb80
    6502ea27:	call   QWORD PTR [rip+0x565b]        # 0x65034088
    6502ea2d:	lea    r12d,[rax+0x1]
    6502ea31:	mov    DWORD PTR [rbp+0x4],r12d
    6502ea35:	xor    ebx,ebx
    6502ea37:	mov    DWORD PTR [rsp+0x28],ebx
    6502ea3b:	mov    QWORD PTR [rsp+0x20],rbx
    6502ea40:	mov    r9d,r12d
    6502ea43:	mov    r8,rsi
    6502ea46:	xor    edx,edx
    6502ea48:	xor    ecx,ecx
    6502ea4a:	call   QWORD PTR [rip+0x55d8]        # 0x65034028
    6502ea50:	movsxd rdi,eax
    6502ea53:	mov    DWORD PTR [rbp+0x0],edi
    6502ea56:	test   eax,eax
    6502ea58:	jne    0x6502ea88
    6502ea5a:	call   QWORD PTR [rip+0x5608]        # 0x65034068
    6502ea60:	test   eax,eax
    6502ea62:	jg     0x6502ea6c
    6502ea64:	call   QWORD PTR [rip+0x55fe]        # 0x65034068
    6502ea6a:	jmp    0x6502ea7a
    6502ea6c:	call   QWORD PTR [rip+0x55f6]        # 0x65034068
    6502ea72:	movzx  eax,ax
    6502ea75:	or     eax,0x80070000
    6502ea7a:	mov    ecx,eax
    6502ea7c:	call   0x6502eba0
    6502ea81:	xor    eax,eax
    6502ea83:	jmp    0x6502eb80
    6502ea88:	cmp    edi,0x1000
    6502ea8e:	jge    0x6502eabf
    6502ea90:	mov    rax,rdi
    6502ea93:	add    rax,rax
    6502ea96:	lea    rcx,[rax+0xf]
    6502ea9a:	cmp    rcx,rax
    6502ea9d:	ja     0x6502eaa9
    6502ea9f:	movabs rcx,0xffffffffffffff0
    6502eaa9:	and    rcx,0xfffffffffffffff0
    6502eaad:	mov    rax,rcx
    6502eab0:	call   0x65033230
    6502eab5:	sub    rsp,rcx
    6502eab8:	lea    rbx,[rsp+0x30]
    6502eabd:	jmp    0x6502eacd
    6502eabf:	mov    rcx,rdi
    6502eac2:	add    rcx,rcx
    6502eac5:	call   0x6501fc50
    6502eaca:	mov    rbx,rax
    6502eacd:	mov    QWORD PTR [rbp+0x8],rbx
    6502ead1:	jmp    0x6502eae4
    6502ead3:	xor    ebx,ebx
    6502ead5:	mov    QWORD PTR [rbp+0x8],rbx
    6502ead9:	mov    rsi,QWORD PTR [rbp+0x40]
    6502eadd:	mov    r12d,DWORD PTR [rbp+0x4]
    6502eae1:	mov    edi,DWORD PTR [rbp+0x0]
    6502eae4:	test   rbx,rbx
    6502eae7:	jne    0x6502eafa
    6502eae9:	mov    ecx,0x8007000e
    6502eaee:	call   0x6502eba0
    6502eaf3:	xor    eax,eax
    6502eaf5:	jmp    0x6502eb80
    6502eafa:	mov    DWORD PTR [rsp+0x28],edi
    6502eafe:	mov    QWORD PTR [rsp+0x20],rbx
    6502eb03:	mov    r9d,r12d
    6502eb06:	mov    r8,rsi
    6502eb09:	xor    edx,edx
    6502eb0b:	xor    ecx,ecx
    6502eb0d:	call   QWORD PTR [rip+0x5515]        # 0x65034028
    6502eb13:	test   eax,eax
    6502eb15:	jne    0x6502eb52
    6502eb17:	cmp    edi,0x1000
    6502eb1d:	jl     0x6502eb27
    6502eb1f:	mov    rcx,rbx
    6502eb22:	call   0x6501fc00
    6502eb27:	call   QWORD PTR [rip+0x553b]        # 0x65034068
    6502eb2d:	test   eax,eax
    6502eb2f:	jg     0x6502eb39
    6502eb31:	call   QWORD PTR [rip+0x5531]        # 0x65034068
    6502eb37:	jmp    0x6502eb47
    6502eb39:	call   QWORD PTR [rip+0x5529]        # 0x65034068
    6502eb3f:	movzx  eax,ax
    6502eb42:	or     eax,0x80070000
    6502eb47:	mov    ecx,eax
    6502eb49:	call   0x6502eba0
    6502eb4e:	xor    eax,eax
    6502eb50:	jmp    0x6502eb80
    6502eb52:	mov    rcx,rbx
    6502eb55:	call   QWORD PTR [rip+0x57ed]        # 0x65034348
    6502eb5b:	mov    rsi,rax
    6502eb5e:	cmp    edi,0x1000
    6502eb64:	jl     0x6502eb6e
    6502eb66:	mov    rcx,rbx
    6502eb69:	call   0x6501fc00
    6502eb6e:	test   rsi,rsi
    6502eb71:	jne    0x6502eb7d
    6502eb73:	mov    ecx,0x8007000e
    6502eb78:	call   0x6502eba0
    6502eb7d:	mov    rax,rsi
    6502eb80:	mov    rcx,QWORD PTR [rbp+0x10]
    6502eb84:	xor    rcx,rbp
    6502eb87:	call   0x6501e650
    6502eb8c:	mov    rbx,QWORD PTR [rbp+0x48]
    6502eb90:	mov    rsi,QWORD PTR [rbp+0x50]
    6502eb94:	lea    rsp,[rbp+0x20]
    6502eb98:	pop    r12
    6502eb9a:	pop    rdi
    6502eb9b:	pop    rbp
    6502eb9c:	ret    
    6502eb9d:	int3   
    6502eb9e:	int3   
    6502eb9f:	int3   
    6502eba0:	xor    edx,edx
    6502eba2:	rex.W jmp QWORD PTR [rip+0x15a6f]        # 0x65044618
    6502eba9:	int3   
    6502ebaa:	int3   
    6502ebab:	int3   
    6502ebac:	int3   
    6502ebad:	int3   
    6502ebae:	int3   
    6502ebaf:	int3   
    6502ebb0:	rex push rbx
    6502ebb2:	sub    rsp,0x20
    6502ebb6:	lea    rax,[rip+0x8393]        # 0x65036f50
    6502ebbd:	mov    rbx,rcx
    6502ebc0:	mov    QWORD PTR [rcx],rax
    6502ebc3:	mov    rcx,QWORD PTR [rcx+0x10]
    6502ebc7:	test   rcx,rcx
    6502ebca:	je     0x6502ebd2
    6502ebcc:	mov    rax,QWORD PTR [rcx]
    6502ebcf:	call   QWORD PTR [rax+0x10]
    6502ebd2:	cmp    QWORD PTR [rbx+0x18],0x0
    6502ebd7:	je     0x6502ebf3
    6502ebd9:	call   QWORD PTR [rip+0x5601]        # 0x650341e0
    6502ebdf:	test   rax,rax
    6502ebe2:	je     0x6502ebf3
    6502ebe4:	mov    r8,QWORD PTR [rbx+0x18]
    6502ebe8:	xor    edx,edx
    6502ebea:	mov    rcx,rax
    6502ebed:	call   QWORD PTR [rip+0x55d5]        # 0x650341c8
    6502ebf3:	add    rsp,0x20
    6502ebf7:	pop    rbx
    6502ebf8:	ret    
    6502ebf9:	int3   
    6502ebfa:	int3   
    6502ebfb:	int3   
    6502ebfc:	int3   
    6502ebfd:	int3   
    6502ebfe:	int3   
    6502ebff:	int3   
    6502ec00:	sub    rsp,0x48
    6502ec04:	lea    rax,[rip+0x8345]        # 0x65036f50
    6502ec0b:	mov    DWORD PTR [rsp+0x28],ecx
    6502ec0f:	mov    QWORD PTR [rsp+0x30],rdx
    6502ec14:	lea    rdx,[rip+0x126ed]        # 0x65041308
    6502ec1b:	lea    rcx,[rsp+0x20]
    6502ec20:	mov    QWORD PTR [rsp+0x38],0x0
    6502ec29:	mov    QWORD PTR [rsp+0x20],rax
    6502ec2e:	call   0x6501dc60
    6502ec33:	int3   
    6502ec34:	int3   
    6502ec35:	int3   
    6502ec36:	int3   
    6502ec37:	int3   
    6502ec38:	int3   
    6502ec39:	int3   
    6502ec3a:	int3   
    6502ec3b:	int3   
    6502ec3c:	int3   
    6502ec3d:	int3   
    6502ec3e:	int3   
    6502ec3f:	int3   
    6502ec40:	rex push rbx
    6502ec42:	sub    rsp,0x20
    6502ec46:	lea    rax,[rip+0x8303]        # 0x65036f50
    6502ec4d:	mov    rbx,rcx
    6502ec50:	mov    QWORD PTR [rcx],rax
    6502ec53:	mov    eax,DWORD PTR [rdx+0x8]
    6502ec56:	mov    DWORD PTR [rcx+0x8],eax
    6502ec59:	mov    rax,QWORD PTR [rdx+0x10]
    6502ec5d:	mov    QWORD PTR [rcx+0x18],0x0
    6502ec65:	test   rax,rax
    6502ec68:	mov    QWORD PTR [rcx+0x10],rax
    6502ec6c:	mov    rcx,rax
    6502ec6f:	je     0x6502ec77
    6502ec71:	mov    rax,QWORD PTR [rax]
    6502ec74:	call   QWORD PTR [rax+0x8]
    6502ec77:	mov    rax,rbx
    6502ec7a:	add    rsp,0x20
    6502ec7e:	pop    rbx
    6502ec7f:	ret    
    6502ec80:	mov    QWORD PTR [rsp+0x8],rbx
    6502ec85:	push   rdi
    6502ec86:	sub    rsp,0x20
    6502ec8a:	lea    rax,[rip+0x82bf]        # 0x65036f50
    6502ec91:	mov    rbx,rcx
    6502ec94:	mov    edi,edx
    6502ec96:	mov    QWORD PTR [rcx],rax
    6502ec99:	mov    rcx,QWORD PTR [rcx+0x10]
    6502ec9d:	test   rcx,rcx
    6502eca0:	je     0x6502eca8
    6502eca2:	mov    rax,QWORD PTR [rcx]
    6502eca5:	call   QWORD PTR [rax+0x10]
    6502eca8:	cmp    QWORD PTR [rbx+0x18],0x0
    6502ecad:	je     0x6502ecc9
    6502ecaf:	call   QWORD PTR [rip+0x552b]        # 0x650341e0
    6502ecb5:	test   rax,rax
    6502ecb8:	je     0x6502ecc9
    6502ecba:	mov    r8,QWORD PTR [rbx+0x18]
    6502ecbe:	xor    edx,edx
    6502ecc0:	mov    rcx,rax
    6502ecc3:	call   QWORD PTR [rip+0x54ff]        # 0x650341c8
    6502ecc9:	test   dil,0x1
    6502eccd:	je     0x6502ecd7
    6502eccf:	mov    rcx,rbx
    6502ecd2:	call   0x6501d300
    6502ecd7:	mov    rax,rbx
    6502ecda:	mov    rbx,QWORD PTR [rsp+0x30]
    6502ecdf:	add    rsp,0x20
    6502ece3:	pop    rdi
    6502ece4:	ret    
    6502ece5:	int3   
    6502ece6:	jmp    QWORD PTR [rip+0x5524]        # 0x65034210
    6502ecec:	jmp    QWORD PTR [rip+0x5526]        # 0x65034218
    6502ecf2:	jmp    QWORD PTR [rip+0x5528]        # 0x65034220
    6502ecf8:	jmp    QWORD PTR [rip+0x5572]        # 0x65034270
    6502ecfe:	int3   
    6502ecff:	int3   
    6502ed00:	rex push rbp
    6502ed02:	push   r12
    6502ed04:	push   r13
    6502ed06:	sub    rsp,0x60
    6502ed0a:	lea    rbp,[rsp+0x50]
    6502ed0f:	mov    QWORD PTR [rbp+0x30],rbx
    6502ed13:	mov    QWORD PTR [rbp+0x38],rsi
    6502ed17:	mov    QWORD PTR [rbp+0x40],rdi
    6502ed1b:	mov    rax,QWORD PTR [rip+0x143fe]        # 0x65043120
    6502ed22:	xor    rax,rbp
    6502ed25:	mov    QWORD PTR [rbp+0x0],rax
    6502ed29:	test   rcx,rcx
    6502ed2c:	mov    r12,r8
    6502ed2f:	mov    rsi,rdx
    6502ed32:	mov    rbx,rcx
    6502ed35:	je     0x6502ed44
    6502ed37:	call   0x6502e790
    6502ed3c:	cmp    rax,rsi
    6502ed3f:	jb     0x6502ed6d
    6502ed41:	mov    BYTE PTR [rbx],0x0
    6502ed44:	call   0x65020420
    6502ed49:	xor    edi,edi
    6502ed4b:	xor    r9d,r9d
    6502ed4e:	xor    r8d,r8d
    6502ed51:	xor    edx,edx
    6502ed53:	xor    ecx,ecx
    6502ed55:	mov    DWORD PTR [rax],0x16
    6502ed5b:	mov    QWORD PTR [rsp+0x20],rdi
    6502ed60:	call   0x6501d9c0
    6502ed65:	lea    eax,[rdi+0x16]
    6502ed68:	jmp    0x6502ef1d
    6502ed6d:	mov    rax,QWORD PTR [r12]
    6502ed71:	mov    edx,DWORD PTR [rax+0x14]
    6502ed74:	test   edx,edx
    6502ed76:	jne    0x6502ed9f
    6502ed78:	cmp    BYTE PTR [rbx],dl
    6502ed7a:	je     0x6502ed98
    6502ed7c:	data16 data16 xchg ax,ax
    6502ed80:	movzx  eax,BYTE PTR [rbx]
    6502ed83:	cmp    al,0x41
    6502ed85:	jl     0x6502ed8f
    6502ed87:	cmp    al,0x5a
    6502ed89:	jg     0x6502ed8f
    6502ed8b:	add    al,0x20
    6502ed8d:	mov    BYTE PTR [rbx],al
    6502ed8f:	add    rbx,0x1
    6502ed93:	cmp    BYTE PTR [rbx],0x0
    6502ed96:	jne    0x6502ed80
    6502ed98:	xor    eax,eax
    6502ed9a:	jmp    0x6502ef1d
    6502ed9f:	mov    eax,DWORD PTR [rax+0x4]
    6502eda2:	mov    DWORD PTR [rsp+0x40],0x1
    6502edaa:	xor    edi,edi
    6502edac:	mov    DWORD PTR [rsp+0x38],eax
    6502edb0:	mov    DWORD PTR [rsp+0x30],edi
    6502edb4:	mov    r9,rbx
    6502edb7:	mov    r8d,0x100
    6502edbd:	mov    rcx,r12
    6502edc0:	mov    QWORD PTR [rsp+0x28],rdi
    6502edc5:	mov    DWORD PTR [rsp+0x20],0xffffffff
    6502edcd:	call   0x65028d10
    6502edd2:	test   eax,eax
    6502edd4:	movsxd r13,eax
    6502edd7:	jne    0x6502edea
    6502edd9:	call   0x65020420
    6502edde:	mov    ebx,0x2a
    6502ede3:	mov    DWORD PTR [rax],ebx
    6502ede5:	jmp    0x6502ef16
    6502edea:	cmp    rsi,r13
    6502eded:	mov    rcx,r13
    6502edf0:	jae    0x6502ee1e
    6502edf2:	mov    BYTE PTR [rbx],dil
    6502edf5:	call   0x65020420
    6502edfa:	xor    r9d,r9d
    6502edfd:	xor    r8d,r8d
    6502ee00:	xor    edx,edx
    6502ee02:	xor    ecx,ecx
    6502ee04:	mov    DWORD PTR [rax],0x22
    6502ee0a:	mov    QWORD PTR [rsp+0x20],rdi
    6502ee0f:	call   0x6501d9c0
    6502ee14:	mov    eax,0x22
    6502ee19:	jmp    0x6502ef1d
    6502ee1e:	test   eax,eax
    6502ee20:	jle    0x6502ef0b
    6502ee26:	xor    edx,edx
    6502ee28:	mov    rax,0xffffffffffffffe0
    6502ee2f:	div    rcx
    6502ee32:	cmp    rax,0x1
    6502ee36:	jb     0x6502ef0b
    6502ee3c:	add    rcx,0x10
    6502ee40:	cmp    rcx,0x400
    6502ee47:	ja     0x6502ee7e
    6502ee49:	lea    rax,[rcx+0xf]
    6502ee4d:	cmp    rax,rcx
    6502ee50:	ja     0x6502ee5c
    6502ee52:	movabs rax,0xffffffffffffff0
    6502ee5c:	and    rax,0xfffffffffffffff0
    6502ee60:	call   0x65033230
    6502ee65:	sub    rsp,rax
    6502ee68:	lea    rdi,[rsp+0x50]
    6502ee6d:	test   rdi,rdi
    6502ee70:	je     0x6502ef0b
    6502ee76:	mov    DWORD PTR [rdi],0xcccc
    6502ee7c:	jmp    0x6502ee91
    6502ee7e:	call   0x6501fc50
    6502ee83:	test   rax,rax
    6502ee86:	mov    rdi,rax
    6502ee89:	je     0x6502ee95
    6502ee8b:	mov    DWORD PTR [rax],0xdddd
    6502ee91:	add    rdi,0x10
    6502ee95:	test   rdi,rdi
    6502ee98:	je     0x6502ef0b
    6502ee9a:	mov    rcx,QWORD PTR [r12]
    6502ee9e:	mov    DWORD PTR [rsp+0x40],0x1
    6502eea6:	mov    r9,rbx
    6502eea9:	mov    eax,DWORD PTR [rcx+0x4]
    6502eeac:	mov    edx,DWORD PTR [rcx+0x14]
    6502eeaf:	mov    r8d,0x100
    6502eeb5:	mov    DWORD PTR [rsp+0x38],eax
    6502eeb9:	mov    DWORD PTR [rsp+0x30],r13d
    6502eebe:	mov    rcx,r12
    6502eec1:	mov    QWORD PTR [rsp+0x28],rdi
    6502eec6:	mov    DWORD PTR [rsp+0x20],0xffffffff
    6502eece:	call   0x65028d10
    6502eed3:	test   eax,eax
    6502eed5:	je     0x6502eee9
    6502eed7:	mov    r8,rdi
    6502eeda:	mov    rdx,rsi
    6502eedd:	mov    rcx,rbx
    6502eee0:	call   0x65020320
    6502eee5:	mov    ebx,eax
    6502eee7:	jmp    0x6502eef5
    6502eee9:	call   0x65020420
    6502eeee:	mov    ebx,0x2a
    6502eef3:	mov    DWORD PTR [rax],ebx
    6502eef5:	cmp    DWORD PTR [rdi-0x10],0xdddd
    6502eefc:	lea    rcx,[rdi-0x10]
    6502ef00:	jne    0x6502ef07
    6502ef02:	call   0x6501fc00
    6502ef07:	mov    eax,ebx
    6502ef09:	jmp    0x6502ef1d
    6502ef0b:	call   0x65020420
    6502ef10:	mov    DWORD PTR [rax],0xc
    6502ef16:	call   0x65020420
    6502ef1b:	mov    eax,DWORD PTR [rax]
    6502ef1d:	mov    rcx,QWORD PTR [rbp+0x0]
    6502ef21:	xor    rcx,rbp
    6502ef24:	call   0x6501e650
    6502ef29:	mov    rbx,QWORD PTR [rbp+0x30]
    6502ef2d:	mov    rsi,QWORD PTR [rbp+0x38]
    6502ef31:	mov    rdi,QWORD PTR [rbp+0x40]
    6502ef35:	lea    rsp,[rbp+0x10]
    6502ef39:	pop    r13
    6502ef3b:	pop    r12
    6502ef3d:	pop    rbp
    6502ef3e:	ret    
    6502ef3f:	int3   
    6502ef40:	rex push rbx
    6502ef42:	sub    rsp,0x50
    6502ef46:	cmp    DWORD PTR [rip+0x16333],0x0        # 0x65045280
    6502ef4d:	mov    rbx,rcx
    6502ef50:	jne    0x6502efb4
    6502ef52:	test   rcx,rcx
    6502ef55:	jne    0x6502ef7e
    6502ef57:	call   0x65020420
    6502ef5c:	xor    r9d,r9d
    6502ef5f:	xor    r8d,r8d
    6502ef62:	xor    edx,edx
    6502ef64:	xor    ecx,ecx
    6502ef66:	mov    QWORD PTR [rsp+0x20],rbx
    6502ef6b:	mov    DWORD PTR [rax],0x16
    6502ef71:	call   0x6501d9c0
    6502ef76:	xor    eax,eax
    6502ef78:	add    rsp,0x50
    6502ef7c:	pop    rbx
    6502ef7d:	ret    
    6502ef7e:	cmp    BYTE PTR [rcx],0x0
    6502ef81:	mov    rax,rcx
    6502ef84:	je     0x6502f06c
    6502ef8a:	data16 xchg ax,ax
    6502ef8d:	data16 xchg ax,ax
    6502ef90:	movzx  ecx,BYTE PTR [rax]
    6502ef93:	cmp    cl,0x41
    6502ef96:	jl     0x6502efa2
    6502ef98:	cmp    cl,0x5a
    6502ef9b:	jg     0x6502efa2
    6502ef9d:	add    cl,0x20
    6502efa0:	mov    BYTE PTR [rax],cl
    6502efa2:	add    rax,0x1
    6502efa6:	cmp    BYTE PTR [rax],0x0
    6502efa9:	jne    0x6502ef90
    6502efab:	mov    rax,rbx
    6502efae:	add    rsp,0x50
    6502efb2:	pop    rbx
    6502efb3:	ret    
    6502efb4:	mov    BYTE PTR [rsp+0x48],0x0
    6502efb9:	call   0x65020a30
    6502efbe:	mov    QWORD PTR [rsp+0x40],rax
    6502efc3:	mov    rcx,QWORD PTR [rax+0xc0]
    6502efca:	mov    r11,rax
    6502efcd:	cmp    rcx,QWORD PTR [rip+0x149cc]        # 0x650439a0
    6502efd4:	mov    QWORD PTR [rsp+0x30],rcx
    6502efd9:	mov    rax,QWORD PTR [rax+0xb8]
    6502efe0:	mov    QWORD PTR [rsp+0x38],rax
    6502efe5:	je     0x6502f00a
    6502efe7:	mov    ecx,DWORD PTR [r11+0xc8]
    6502efee:	test   DWORD PTR [rip+0x14834],ecx        # 0x65043828
    6502eff4:	jne    0x6502f00a
    6502eff6:	call   0x65023e90
    6502effb:	mov    r11,QWORD PTR [rsp+0x40]
    6502f000:	mov    QWORD PTR [rsp+0x30],rax
    6502f005:	mov    rax,QWORD PTR [rsp+0x38]
    6502f00a:	cmp    rax,QWORD PTR [rip+0x1470f]        # 0x65043720
    6502f011:	je     0x6502f031
    6502f013:	mov    eax,DWORD PTR [r11+0xc8]
    6502f01a:	test   DWORD PTR [rip+0x14808],eax        # 0x65043828
    6502f020:	jne    0x6502f031
    6502f022:	call   0x65023340
    6502f027:	mov    r11,QWORD PTR [rsp+0x40]
    6502f02c:	mov    QWORD PTR [rsp+0x38],rax
    6502f031:	test   BYTE PTR [r11+0xc8],0x2
    6502f039:	jne    0x6502f048
    6502f03b:	or     DWORD PTR [r11+0xc8],0x2
    6502f043:	mov    BYTE PTR [rsp+0x48],0x1
    6502f048:	lea    r8,[rsp+0x30]
    6502f04d:	or     rdx,0xffffffffffffffff
    6502f051:	mov    rcx,rbx
    6502f054:	call   0x6502ed00
    6502f059:	cmp    BYTE PTR [rsp+0x48],0x0
    6502f05e:	je     0x6502f06c
    6502f060:	mov    rax,QWORD PTR [rsp+0x40]
    6502f065:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6502f06c:	mov    rax,rbx
    6502f06f:	add    rsp,0x50
    6502f073:	pop    rbx
    6502f074:	ret    
    6502f075:	int3   
    6502f076:	int3   
    6502f077:	int3   
    6502f078:	int3   
    6502f079:	int3   
    6502f07a:	int3   
    6502f07b:	int3   
    6502f07c:	int3   
    6502f07d:	int3   
    6502f07e:	int3   
    6502f07f:	int3   
    6502f080:	mov    QWORD PTR [rsp+0x8],rbx
    6502f085:	mov    QWORD PTR [rsp+0x10],rbp
    6502f08a:	mov    QWORD PTR [rsp+0x18],rsi
    6502f08f:	mov    QWORD PTR [rsp+0x20],rdi
    6502f094:	push   r12
    6502f096:	sub    rsp,0x20
    6502f09a:	mov    r10,QWORD PTR [r9+0x38]
    6502f09e:	mov    rsi,rdx
    6502f0a1:	mov    r12,r8
    6502f0a4:	mov    eax,DWORD PTR [r10]
    6502f0a7:	mov    rbp,rcx
    6502f0aa:	mov    rdx,r9
    6502f0ad:	add    rax,rax
    6502f0b0:	mov    rcx,rsi
    6502f0b3:	mov    rdi,r9
    6502f0b6:	lea    rbx,[r10+rax*8+0x4]
    6502f0bb:	mov    r8,rbx
    6502f0be:	call   0x6501ead0
    6502f0c3:	test   BYTE PTR [rbp+0x4],0x66
    6502f0c7:	mov    r11d,DWORD PTR [rbx]
    6502f0ca:	jne    0x6502f0d2
    6502f0cc:	and    r11d,0x1
    6502f0d0:	jmp    0x6502f0d6
    6502f0d2:	and    r11d,0x2
    6502f0d6:	test   r11d,r11d
    6502f0d9:	je     0x6502f0ee
    6502f0db:	mov    r9,rdi
    6502f0de:	mov    r8,r12
    6502f0e1:	mov    rdx,rsi
    6502f0e4:	mov    rcx,rbp
    6502f0e7:	call   0x65020160
    6502f0ec:	jmp    0x6502f0f3
    6502f0ee:	mov    eax,0x1
    6502f0f3:	mov    rbx,QWORD PTR [rsp+0x30]
    6502f0f8:	mov    rbp,QWORD PTR [rsp+0x38]
    6502f0fd:	mov    rsi,QWORD PTR [rsp+0x40]
    6502f102:	mov    rdi,QWORD PTR [rsp+0x48]
    6502f107:	add    rsp,0x20
    6502f10b:	pop    r12
    6502f10d:	ret    
    6502f10e:	int3   
    6502f10f:	int3   
    6502f110:	lea    rax,[rip+0x409]        # 0x6502f520
    6502f117:	lea    rcx,[rip+0x1292]        # 0x650303b0
    6502f11e:	mov    QWORD PTR [rip+0x14d93],rax        # 0x65043eb8
    6502f125:	lea    rax,[rip+0x394]        # 0x6502f4c0
    6502f12c:	mov    QWORD PTR [rip+0x14d7d],rcx        # 0x65043eb0
    6502f133:	mov    QWORD PTR [rip+0x14d86],rax        # 0x65043ec0
    6502f13a:	lea    rax,[rip+0x3cf]        # 0x6502f510
    6502f141:	mov    QWORD PTR [rip+0x14d90],rcx        # 0x65043ed8
    6502f148:	mov    QWORD PTR [rip+0x14d79],rax        # 0x65043ec8
    6502f14f:	lea    rax,[rip+0x2fa]        # 0x6502f450
    6502f156:	mov    QWORD PTR [rip+0x14d73],rax        # 0x65043ed0
    6502f15d:	lea    rax,[rip+0x11ac]        # 0x65030310
    6502f164:	mov    QWORD PTR [rip+0x14d75],rax        # 0x65043ee0
    6502f16b:	lea    rax,[rip+0x2fe]        # 0x6502f470
    6502f172:	mov    QWORD PTR [rip+0x14d6f],rax        # 0x65043ee8
    6502f179:	lea    rax,[rip+0x160]        # 0x6502f2e0
    6502f180:	mov    QWORD PTR [rip+0x14d69],rax        # 0x65043ef0
    6502f187:	lea    rax,[rip+0x12]        # 0x6502f1a0
    6502f18e:	mov    QWORD PTR [rip+0x14d63],rax        # 0x65043ef8
    6502f195:	ret    
    6502f196:	int3   
    6502f197:	int3   
    6502f198:	int3   
    6502f199:	int3   
    6502f19a:	int3   
    6502f19b:	int3   
    6502f19c:	int3   
    6502f19d:	int3   
    6502f19e:	int3   
    6502f19f:	int3   
    6502f1a0:	rex push rdi
    6502f1a2:	sub    rsp,0x40
    6502f1a6:	mov    QWORD PTR [rsp+0x50],rbx
    6502f1ab:	mov    QWORD PTR [rsp+0x58],rbp
    6502f1b0:	xor    bpl,bpl
    6502f1b3:	test   rdx,rdx
    6502f1b6:	mov    QWORD PTR [rsp+0x68],r12
    6502f1bb:	mov    rbx,rcx
    6502f1be:	mov    BYTE PTR [rsp+0x38],bpl
    6502f1c3:	jne    0x6502f239
    6502f1c5:	mov    QWORD PTR [rsp+0x60],rsi
    6502f1ca:	call   0x65020a30
    6502f1cf:	mov    r12,QWORD PTR [rax+0xc0]
    6502f1d6:	mov    rsi,QWORD PTR [rax+0xb8]
    6502f1dd:	mov    rdi,rax
    6502f1e0:	cmp    r12,QWORD PTR [rip+0x147b9]        # 0x650439a0
    6502f1e7:	je     0x6502f1ff
    6502f1e9:	mov    edx,DWORD PTR [rax+0xc8]
    6502f1ef:	test   DWORD PTR [rip+0x14633],edx        # 0x65043828
    6502f1f5:	jne    0x6502f1ff
    6502f1f7:	call   0x65023e90
    6502f1fc:	mov    r12,rax
    6502f1ff:	cmp    rsi,QWORD PTR [rip+0x1451a]        # 0x65043720
    6502f206:	mov    rsi,QWORD PTR [rsp+0x60]
    6502f20b:	je     0x6502f220
    6502f20d:	mov    ecx,DWORD PTR [rdi+0xc8]
    6502f213:	test   DWORD PTR [rip+0x1460f],ecx        # 0x65043828
    6502f219:	jne    0x6502f220
    6502f21b:	call   0x65023340
    6502f220:	mov    ecx,DWORD PTR [rdi+0xc8]
    6502f226:	test   cl,0x2
    6502f229:	jne    0x6502f25b
    6502f22b:	or     ecx,0x2
    6502f22e:	mov    bpl,0x1
    6502f231:	mov    DWORD PTR [rdi+0xc8],ecx
    6502f237:	jmp    0x6502f25b
    6502f239:	mov    rax,QWORD PTR [rdx]
    6502f23c:	lea    rcx,[rsp+0x20]
    6502f241:	mov    QWORD PTR [rcx],rax
    6502f244:	mov    rax,QWORD PTR [rdx+0x8]
    6502f248:	mov    QWORD PTR [rcx+0x8],rax
    6502f24c:	movzx  ebp,BYTE PTR [rsp+0x38]
    6502f251:	mov    rdi,QWORD PTR [rsp+0x30]
    6502f256:	mov    r12,QWORD PTR [rsp+0x20]
    6502f25b:	movsx  ecx,BYTE PTR [rbx]
    6502f25e:	call   0x6501f8a0
    6502f263:	cmp    eax,0x65
    6502f266:	je     0x6502f281
    6502f268:	data16 data16 xchg ax,ax
    6502f26c:	data16 data16 xchg ax,ax
    6502f270:	movzx  ecx,BYTE PTR [rbx+0x1]
    6502f274:	add    rbx,0x1
    6502f278:	call   0x6501f8c0
    6502f27d:	test   eax,eax
    6502f27f:	jne    0x6502f270
    6502f281:	movsx  ecx,BYTE PTR [rbx]
    6502f284:	call   0x6501f8a0
    6502f289:	cmp    eax,0x78
    6502f28c:	jne    0x6502f292
    6502f28e:	add    rbx,0x2
    6502f292:	mov    rax,QWORD PTR [r12+0x128]
    6502f29a:	movzx  edx,BYTE PTR [rbx]
    6502f29d:	mov    r12,QWORD PTR [rsp+0x68]
    6502f2a2:	mov    rcx,QWORD PTR [rax]
    6502f2a5:	add    rbx,0x1
    6502f2a9:	movzx  eax,BYTE PTR [rcx]
    6502f2ac:	mov    BYTE PTR [rbx-0x1],al
    6502f2af:	nop
    6502f2b0:	movzx  eax,BYTE PTR [rbx]
    6502f2b3:	mov    BYTE PTR [rbx],dl
    6502f2b5:	add    rbx,0x1
    6502f2b9:	mov    dl,al
    6502f2bb:	movzx  eax,BYTE PTR [rbx-0x1]
    6502f2bf:	test   al,al
    6502f2c1:	jne    0x6502f2b0
    6502f2c3:	mov    rbx,QWORD PTR [rsp+0x50]
    6502f2c8:	test   bpl,bpl
    6502f2cb:	mov    rbp,QWORD PTR [rsp+0x58]
    6502f2d0:	je     0x6502f2d9
    6502f2d2:	and    DWORD PTR [rdi+0xc8],0xfffffffd
    6502f2d9:	add    rsp,0x40
    6502f2dd:	pop    rdi
    6502f2de:	ret    
    6502f2df:	int3   
    6502f2e0:	rex push rdi
    6502f2e2:	sub    rsp,0x40
    6502f2e6:	mov    QWORD PTR [rsp+0x50],rbx
    6502f2eb:	mov    QWORD PTR [rsp+0x58],rbp
    6502f2f0:	mov    QWORD PTR [rsp+0x68],r12
    6502f2f5:	xor    r12b,r12b
    6502f2f8:	test   rdx,rdx
    6502f2fb:	mov    rbx,rcx
    6502f2fe:	mov    BYTE PTR [rsp+0x38],r12b
    6502f303:	jne    0x6502f379
    6502f305:	mov    QWORD PTR [rsp+0x60],rsi
    6502f30a:	call   0x65020a30
    6502f30f:	mov    rbp,QWORD PTR [rax+0xc0]
    6502f316:	mov    rsi,QWORD PTR [rax+0xb8]
    6502f31d:	mov    rdi,rax
    6502f320:	cmp    rbp,QWORD PTR [rip+0x14679]        # 0x650439a0
    6502f327:	je     0x6502f33f
    6502f329:	mov    edx,DWORD PTR [rax+0xc8]
    6502f32f:	test   DWORD PTR [rip+0x144f3],edx        # 0x65043828
    6502f335:	jne    0x6502f33f
    6502f337:	call   0x65023e90
    6502f33c:	mov    rbp,rax
    6502f33f:	cmp    rsi,QWORD PTR [rip+0x143da]        # 0x65043720
    6502f346:	mov    rsi,QWORD PTR [rsp+0x60]
    6502f34b:	je     0x6502f360
    6502f34d:	mov    ecx,DWORD PTR [rdi+0xc8]
    6502f353:	test   DWORD PTR [rip+0x144cf],ecx        # 0x65043828
    6502f359:	jne    0x6502f360
    6502f35b:	call   0x65023340
    6502f360:	mov    ecx,DWORD PTR [rdi+0xc8]
    6502f366:	test   cl,0x2
    6502f369:	jne    0x6502f39c
    6502f36b:	or     ecx,0x2
    6502f36e:	mov    r12b,0x1
    6502f371:	mov    DWORD PTR [rdi+0xc8],ecx
    6502f377:	jmp    0x6502f39c
    6502f379:	mov    rax,QWORD PTR [rdx]
    6502f37c:	lea    rcx,[rsp+0x20]
    6502f381:	mov    QWORD PTR [rcx],rax
    6502f384:	mov    rax,QWORD PTR [rdx+0x8]
    6502f388:	mov    QWORD PTR [rcx+0x8],rax
    6502f38c:	movzx  r12d,BYTE PTR [rsp+0x38]
    6502f392:	mov    rdi,QWORD PTR [rsp+0x30]
    6502f397:	mov    rbp,QWORD PTR [rsp+0x20]
    6502f39c:	movzx  edx,BYTE PTR [rbx]
    6502f39f:	test   dl,dl
    6502f3a1:	je     0x6502f3bf
    6502f3a3:	mov    rax,QWORD PTR [rbp+0x128]
    6502f3aa:	mov    rcx,QWORD PTR [rax]
    6502f3ad:	movzx  eax,BYTE PTR [rcx]
    6502f3b0:	cmp    dl,al
    6502f3b2:	je     0x6502f3bf
    6502f3b4:	mov    dl,BYTE PTR [rbx+0x1]
    6502f3b7:	add    rbx,0x1
    6502f3bb:	test   dl,dl
    6502f3bd:	jne    0x6502f3b0
    6502f3bf:	movzx  eax,BYTE PTR [rbx]
    6502f3c2:	add    rbx,0x1
    6502f3c6:	test   al,al
    6502f3c8:	je     0x6502f421
    6502f3ca:	movzx  eax,BYTE PTR [rbx]
    6502f3cd:	test   al,al
    6502f3cf:	je     0x6502f3e4
    6502f3d1:	cmp    al,0x65
    6502f3d3:	je     0x6502f3e4
    6502f3d5:	cmp    al,0x45
    6502f3d7:	je     0x6502f3e4
    6502f3d9:	mov    al,BYTE PTR [rbx+0x1]
    6502f3dc:	add    rbx,0x1
    6502f3e0:	test   al,al
    6502f3e2:	jne    0x6502f3d1
    6502f3e4:	mov    rdx,rbx
    6502f3e7:	sub    rbx,0x1
    6502f3eb:	cmp    BYTE PTR [rbx],0x30
    6502f3ee:	jne    0x6502f3f9
    6502f3f0:	sub    rbx,0x1
    6502f3f4:	cmp    BYTE PTR [rbx],0x30
    6502f3f7:	je     0x6502f3f0
    6502f3f9:	mov    rax,QWORD PTR [rbp+0x128]
    6502f400:	mov    rcx,QWORD PTR [rax]
    6502f403:	movzx  eax,BYTE PTR [rcx]
    6502f406:	cmp    BYTE PTR [rbx],al
    6502f408:	jne    0x6502f410
    6502f40a:	sub    rbx,0x1
    6502f40e:	xchg   ax,ax
    6502f410:	movzx  eax,BYTE PTR [rdx]
    6502f413:	add    rbx,0x1
    6502f417:	add    rdx,0x1
    6502f41b:	test   al,al
    6502f41d:	mov    BYTE PTR [rbx],al
    6502f41f:	jne    0x6502f410
    6502f421:	mov    rbp,QWORD PTR [rsp+0x58]
    6502f426:	mov    rbx,QWORD PTR [rsp+0x50]
    6502f42b:	test   r12b,r12b
    6502f42e:	mov    r12,QWORD PTR [rsp+0x68]
    6502f433:	je     0x6502f43c
    6502f435:	and    DWORD PTR [rdi+0xc8],0xfffffffd
    6502f43c:	add    rsp,0x40
    6502f440:	pop    rdi
    6502f441:	ret    
    6502f442:	int3   
    6502f443:	int3   
    6502f444:	int3   
    6502f445:	int3   
    6502f446:	int3   
    6502f447:	int3   
    6502f448:	int3   
    6502f449:	int3   
    6502f44a:	int3   
    6502f44b:	int3   
    6502f44c:	int3   
    6502f44d:	int3   
    6502f44e:	int3   
    6502f44f:	int3   
    6502f450:	movsd  xmm0,QWORD PTR [rcx]
    6502f454:	comisd xmm0,QWORD PTR [rip+0x7b14]        # 0x65036f70
    6502f45c:	jb     0x6502f464
    6502f45e:	mov    eax,0x1
    6502f463:	ret    
    6502f464:	xor    eax,eax
    6502f466:	ret    
    6502f467:	int3   
    6502f468:	int3   
    6502f469:	int3   
    6502f46a:	int3   
    6502f46b:	int3   
    6502f46c:	int3   
    6502f46d:	int3   
    6502f46e:	int3   
    6502f46f:	int3   
    6502f470:	rex push rbx
    6502f472:	sub    rsp,0x30
    6502f476:	test   ecx,ecx
    6502f478:	mov    rax,r8
    6502f47b:	mov    rbx,rdx
    6502f47e:	mov    rdx,rax
    6502f481:	mov    r8,r9
    6502f484:	je     0x6502f49e
    6502f486:	lea    rcx,[rsp+0x20]
    6502f48b:	call   0x65030480
    6502f490:	mov    r11,QWORD PTR [rsp+0x20]
    6502f495:	mov    QWORD PTR [rbx],r11
    6502f498:	add    rsp,0x30
    6502f49c:	pop    rbx
    6502f49d:	ret    
    6502f49e:	lea    rcx,[rsp+0x40]
    6502f4a3:	call   0x65030610
    6502f4a8:	mov    r11d,DWORD PTR [rsp+0x40]
    6502f4ad:	mov    DWORD PTR [rbx],r11d
    6502f4b0:	add    rsp,0x30
    6502f4b4:	pop    rbx
    6502f4b5:	ret    
    6502f4b6:	int3   
    6502f4b7:	int3   
    6502f4b8:	int3   
    6502f4b9:	int3   
    6502f4ba:	int3   
    6502f4bb:	int3   
    6502f4bc:	int3   
    6502f4bd:	int3   
    6502f4be:	int3   
    6502f4bf:	int3   
    6502f4c0:	rex push rbx
    6502f4c2:	sub    rsp,0x20
    6502f4c6:	mov    rax,r8
    6502f4c9:	xor    r8d,r8d
    6502f4cc:	test   ecx,ecx
    6502f4ce:	mov    rbx,rdx
    6502f4d1:	mov    rdx,rax
    6502f4d4:	je     0x6502f4ee
    6502f4d6:	lea    rcx,[rsp+0x48]
    6502f4db:	call   0x65030480
    6502f4e0:	mov    r11,QWORD PTR [rsp+0x48]
    6502f4e5:	mov    QWORD PTR [rbx],r11
    6502f4e8:	add    rsp,0x20
    6502f4ec:	pop    rbx
    6502f4ed:	ret    
    6502f4ee:	lea    rcx,[rsp+0x30]
    6502f4f3:	call   0x65030610
    6502f4f8:	mov    r11d,DWORD PTR [rsp+0x30]
    6502f4fd:	mov    DWORD PTR [rbx],r11d
    6502f500:	add    rsp,0x20
    6502f504:	pop    rbx
    6502f505:	ret    
    6502f506:	int3   
    6502f507:	int3   
    6502f508:	int3   
    6502f509:	int3   
    6502f50a:	int3   
    6502f50b:	int3   
    6502f50c:	int3   
    6502f50d:	int3   
    6502f50e:	int3   
    6502f50f:	int3   
    6502f510:	xor    edx,edx
    6502f512:	jmp    0x6502f1a0
    6502f517:	int3   
    6502f518:	int3   
    6502f519:	int3   
    6502f51a:	int3   
    6502f51b:	int3   
    6502f51c:	int3   
    6502f51d:	int3   
    6502f51e:	int3   
    6502f51f:	int3   
    6502f520:	xor    edx,edx
    6502f522:	jmp    0x6502f2e0
    6502f527:	int3   
    6502f528:	int3   
    6502f529:	int3   
    6502f52a:	int3   
    6502f52b:	int3   
    6502f52c:	int3   
    6502f52d:	int3   
    6502f52e:	int3   
    6502f52f:	int3   
    6502f530:	mov    DWORD PTR [rsp+0x20],r9d
    6502f535:	mov    QWORD PTR [rsp+0x10],rdx
    6502f53a:	push   rbx
    6502f53b:	push   rsi
    6502f53c:	push   rdi
    6502f53d:	push   r12
    6502f53f:	push   r13
    6502f541:	push   r15
    6502f543:	sub    rsp,0x58
    6502f547:	xor    r12b,r12b
    6502f54a:	mov    r13,rcx
    6502f54d:	mov    rcx,QWORD PTR [rsp+0xc0]
    6502f555:	test   rcx,rcx
    6502f558:	movsxd r15,r8d
    6502f55b:	mov    r8,rdx
    6502f55e:	mov    BYTE PTR [rsp+0x48],r12b
    6502f563:	jne    0x6502f5eb
    6502f569:	call   0x65020a30
    6502f56e:	mov    rbx,rax
    6502f571:	mov    rdi,QWORD PTR [rax+0xc0]
    6502f578:	mov    rsi,QWORD PTR [rax+0xb8]
    6502f57f:	cmp    rdi,QWORD PTR [rip+0x1441a]        # 0x650439a0
    6502f586:	mov    QWORD PTR [rsp+0xc0],rdi
    6502f58e:	je     0x6502f5ae
    6502f590:	mov    ecx,DWORD PTR [rax+0xc8]
    6502f596:	test   DWORD PTR [rip+0x1428c],ecx        # 0x65043828
    6502f59c:	jne    0x6502f5ae
    6502f59e:	call   0x65023e90
    6502f5a3:	mov    rdi,rax
    6502f5a6:	mov    QWORD PTR [rsp+0xc0],rax
    6502f5ae:	cmp    rsi,QWORD PTR [rip+0x1416b]        # 0x65043720
    6502f5b5:	je     0x6502f5ca
    6502f5b7:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502f5bd:	test   DWORD PTR [rip+0x14265],ecx        # 0x65043828
    6502f5c3:	jne    0x6502f5ca
    6502f5c5:	call   0x65023340
    6502f5ca:	mov    ecx,DWORD PTR [rbx+0xc8]
    6502f5d0:	test   cl,0x2
    6502f5d3:	jne    0x6502f618
    6502f5d5:	mov    r8,QWORD PTR [rsp+0x98]
    6502f5dd:	or     ecx,0x2
    6502f5e0:	mov    r12b,0x1
    6502f5e3:	mov    DWORD PTR [rbx+0xc8],ecx
    6502f5e9:	jmp    0x6502f620
    6502f5eb:	mov    rax,QWORD PTR [rcx]
    6502f5ee:	lea    rdx,[rsp+0x30]
    6502f5f3:	mov    QWORD PTR [rdx],rax
    6502f5f6:	mov    rax,QWORD PTR [rcx+0x8]
    6502f5fa:	mov    QWORD PTR [rdx+0x8],rax
    6502f5fe:	mov    rdi,QWORD PTR [rsp+0x30]
    6502f603:	movzx  r12d,BYTE PTR [rsp+0x48]
    6502f609:	mov    rbx,QWORD PTR [rsp+0x40]
    6502f60e:	mov    QWORD PTR [rsp+0xc0],rdi
    6502f616:	jmp    0x6502f620
    6502f618:	mov    r8,QWORD PTR [rsp+0x98]
    6502f620:	test   r13,r13
    6502f623:	jne    0x6502f665
    6502f625:	call   0x65020420
    6502f62a:	xor    esi,esi
    6502f62c:	xor    r9d,r9d
    6502f62f:	xor    r8d,r8d
    6502f632:	xor    edx,edx
    6502f634:	xor    ecx,ecx
    6502f636:	mov    DWORD PTR [rax],0x16
    6502f63c:	mov    QWORD PTR [rsp+0x20],rsi
    6502f641:	call   0x6501d9c0
    6502f646:	test   r12b,r12b
    6502f649:	je     0x6502f652
    6502f64b:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502f652:	mov    eax,0x16
    6502f657:	add    rsp,0x58
    6502f65b:	pop    r15
    6502f65d:	pop    r13
    6502f65f:	pop    r12
    6502f661:	pop    rdi
    6502f662:	pop    rsi
    6502f663:	pop    rbx
    6502f664:	ret    
    6502f665:	test   r8,r8
    6502f668:	je     0x6502f625
    6502f66a:	xor    esi,esi
    6502f66c:	test   r15d,r15d
    6502f66f:	mov    eax,esi
    6502f671:	cmovg  eax,r15d
    6502f675:	add    eax,0x9
    6502f678:	cdqe   
    6502f67a:	cmp    r8,rax
    6502f67d:	ja     0x6502f6bd
    6502f67f:	call   0x65020420
    6502f684:	xor    r9d,r9d
    6502f687:	xor    r8d,r8d
    6502f68a:	xor    edx,edx
    6502f68c:	xor    ecx,ecx
    6502f68e:	mov    QWORD PTR [rsp+0x20],rsi
    6502f693:	mov    DWORD PTR [rax],0x22
    6502f699:	call   0x6501d9c0
    6502f69e:	test   r12b,r12b
    6502f6a1:	je     0x6502f6aa
    6502f6a3:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502f6aa:	mov    eax,0x22
    6502f6af:	add    rsp,0x58
    6502f6b3:	pop    r15
    6502f6b5:	pop    r13
    6502f6b7:	pop    r12
    6502f6b9:	pop    rdi
    6502f6ba:	pop    rsi
    6502f6bb:	pop    rbx
    6502f6bc:	ret    
    6502f6bd:	movzx  r9d,BYTE PTR [rsp+0xb8]
    6502f6c6:	mov    QWORD PTR [rsp+0x90],rbp
    6502f6ce:	or     rbp,0xffffffffffffffff
    6502f6d2:	test   r9b,r9b
    6502f6d5:	mov    QWORD PTR [rsp+0x50],r14
    6502f6da:	mov    r14,QWORD PTR [rsp+0xb0]
    6502f6e2:	je     0x6502f740
    6502f6e4:	cmp    DWORD PTR [r14],0x2d
    6502f6e8:	mov    rdx,rsi
    6502f6eb:	mov    r9d,esi
    6502f6ee:	sete   dl
    6502f6f1:	add    rdx,r13
    6502f6f4:	test   r15d,r15d
    6502f6f7:	setg   r9b
    6502f6fb:	test   r9d,r9d
    6502f6fe:	je     0x6502f738
    6502f700:	xor    eax,eax
    6502f702:	mov    rdi,rdx
    6502f705:	mov    rcx,rbp
    6502f708:	repnz scas al,BYTE PTR es:[rdi]
    6502f70a:	movsxd rax,r9d
    6502f70d:	not    rcx
    6502f710:	add    rax,rdx
    6502f713:	mov    r8,rcx
    6502f716:	mov    rcx,rax
    6502f719:	call   0x6501fd30
    6502f71e:	mov    rdi,QWORD PTR [rsp+0xc0]
    6502f726:	mov    r8,QWORD PTR [rsp+0x98]
    6502f72e:	mov    r9b,BYTE PTR [rsp+0xb8]
    6502f736:	jmp    0x6502f740
    6502f738:	mov    r9b,BYTE PTR [rsp+0xb8]
    6502f740:	cmp    DWORD PTR [r14],0x2d
    6502f744:	mov    rdx,r13
    6502f747:	jne    0x6502f752
    6502f749:	mov    BYTE PTR [r13+0x0],0x2d
    6502f74e:	lea    rdx,[r13+0x1]
    6502f752:	test   r15d,r15d
    6502f755:	jle    0x6502f771
    6502f757:	movzx  eax,BYTE PTR [rdx+0x1]
    6502f75b:	add    rdx,0x1
    6502f75f:	mov    BYTE PTR [rdx-0x1],al
    6502f762:	mov    rax,QWORD PTR [rdi+0x128]
    6502f769:	mov    rcx,QWORD PTR [rax]
    6502f76c:	movzx  eax,BYTE PTR [rcx]
    6502f76f:	mov    BYTE PTR [rdx],al
    6502f771:	test   r9b,r9b
    6502f774:	mov    rcx,rsi
    6502f777:	lea    rdi,[rdx+r15*1]
    6502f77b:	sete   cl
    6502f77e:	add    rdi,rcx
    6502f781:	cmp    r8,0xffffffffffffffff
    6502f785:	je     0x6502f790
    6502f787:	mov    rbp,r13
    6502f78a:	sub    rbp,rdi
    6502f78d:	add    rbp,r8
    6502f790:	lea    r8,[rip+0x77e1]        # 0x65036f78
    6502f797:	mov    rdx,rbp
    6502f79a:	mov    rcx,rdi
    6502f79d:	call   0x65020320
    6502f7a2:	mov    rbp,QWORD PTR [rsp+0x90]
    6502f7aa:	test   eax,eax
    6502f7ac:	je     0x6502f7c2
    6502f7ae:	xor    r9d,r9d
    6502f7b1:	xor    r8d,r8d
    6502f7b4:	xor    edx,edx
    6502f7b6:	xor    ecx,ecx
    6502f7b8:	mov    QWORD PTR [rsp+0x20],rsi
    6502f7bd:	call   0x6501d920
    6502f7c2:	cmp    DWORD PTR [rsp+0xa8],esi
    6502f7c9:	lea    rcx,[rdi+0x2]
    6502f7cd:	je     0x6502f7d2
    6502f7cf:	mov    BYTE PTR [rdi],0x45
    6502f7d2:	mov    rax,QWORD PTR [r14+0x10]
    6502f7d6:	cmp    BYTE PTR [rax],0x30
    6502f7d9:	je     0x6502f832
    6502f7db:	mov    r8d,DWORD PTR [r14+0x4]
    6502f7df:	sub    r8d,0x1
    6502f7e3:	jns    0x6502f7ec
    6502f7e5:	neg    r8d
    6502f7e8:	mov    BYTE PTR [rdi+0x1],0x2d
    6502f7ec:	cmp    r8d,0x64
    6502f7f0:	jl     0x6502f80d
    6502f7f2:	mov    eax,0x51eb851f
    6502f7f7:	imul   r8d
    6502f7fa:	sar    edx,0x5
    6502f7fd:	mov    eax,edx
    6502f7ff:	shr    eax,0x1f
    6502f802:	add    edx,eax
    6502f804:	add    BYTE PTR [rdi+0x2],dl
    6502f807:	imul   edx,edx,0xffffff9c
    6502f80a:	add    r8d,edx
    6502f80d:	cmp    r8d,0xa
    6502f811:	jl     0x6502f82e
    6502f813:	mov    eax,0x66666667
    6502f818:	imul   r8d
    6502f81b:	sar    edx,0x2
    6502f81e:	mov    eax,edx
    6502f820:	shr    eax,0x1f
    6502f823:	add    edx,eax
    6502f825:	add    BYTE PTR [rdi+0x3],dl
    6502f828:	imul   edx,edx,0xfffffff6
    6502f82b:	add    r8d,edx
    6502f82e:	add    BYTE PTR [rdi+0x4],r8b
    6502f832:	test   BYTE PTR [rip+0x162bb],0x1        # 0x65045af4
    6502f839:	mov    r14,QWORD PTR [rsp+0x50]
    6502f83e:	je     0x6502f854
    6502f840:	cmp    BYTE PTR [rcx],0x30
    6502f843:	jne    0x6502f854
    6502f845:	lea    rdx,[rcx+0x1]
    6502f849:	mov    r8d,0x3
    6502f84f:	call   0x6501fd30
    6502f854:	test   r12b,r12b
    6502f857:	je     0x6502f860
    6502f859:	and    DWORD PTR [rbx+0xc8],0xfffffffd
    6502f860:	xor    eax,eax
    6502f862:	add    rsp,0x58
    6502f866:	pop    r15
    6502f868:	pop    r13
    6502f86a:	pop    r12
    6502f86c:	pop    rdi
    6502f86d:	pop    rsi
    6502f86e:	pop    rbx
    6502f86f:	ret    
    6502f870:	rex push rbx
    6502f872:	push   rbp
    6502f873:	push   rsi
    6502f874:	push   rdi
    6502f875:	sub    rsp,0x88
    6502f87c:	mov    rax,QWORD PTR [rip+0x1389d]        # 0x65043120
    6502f883:	xor    rax,rsp
    6502f886:	mov    QWORD PTR [rsp+0x70],rax
    6502f88b:	mov    rcx,QWORD PTR [rcx]
    6502f88e:	mov    rbp,QWORD PTR [rsp+0xd8]
    6502f896:	mov    rbx,r8
    6502f899:	mov    rdi,rdx
    6502f89c:	mov    esi,r9d
    6502f89f:	lea    r8,[rsp+0x58]
    6502f8a4:	lea    rdx,[rsp+0x40]
    6502f8a9:	mov    r9d,0x16
    6502f8af:	call   0x650308c0
    6502f8b4:	test   rdi,rdi
    6502f8b7:	jne    0x6502f8e2
    6502f8b9:	call   0x65020420
    6502f8be:	xor    ecx,ecx
    6502f8c0:	xor    r9d,r9d
    6502f8c3:	xor    r8d,r8d
    6502f8c6:	xor    edx,edx
    6502f8c8:	mov    DWORD PTR [rax],0x16
    6502f8ce:	mov    QWORD PTR [rsp+0x20],rcx
    6502f8d3:	call   0x6501d9c0
    6502f8d8:	mov    eax,0x16
    6502f8dd:	jmp    0x6502f96a
    6502f8e2:	test   rbx,rbx
    6502f8e5:	je     0x6502f8b9
    6502f8e7:	mov    r9d,DWORD PTR [rsp+0x40]
    6502f8ec:	xor    ecx,ecx
    6502f8ee:	cmp    rbx,0xffffffffffffffff
    6502f8f2:	jne    0x6502f8f9
    6502f8f4:	or     rdx,rbx
    6502f8f7:	jmp    0x6502f914
    6502f8f9:	cmp    r9d,0x2d
    6502f8fd:	mov    rax,rcx
    6502f900:	mov    rdx,rbx
    6502f903:	sete   al
    6502f906:	sub    rdx,rax
    6502f909:	test   esi,esi
    6502f90b:	mov    rax,rcx
    6502f90e:	setg   al
    6502f911:	sub    rdx,rax
    6502f914:	mov    rax,rcx
    6502f917:	cmp    r9d,0x2d
    6502f91b:	lea    r8d,[rsi+0x1]
    6502f91f:	sete   al
    6502f922:	test   esi,esi
    6502f924:	lea    r9,[rsp+0x40]
    6502f929:	setg   cl
    6502f92c:	add    rax,rdi
    6502f92f:	add    rcx,rax
    6502f932:	call   0x650307a0
    6502f937:	test   eax,eax
    6502f939:	je     0x6502f940
    6502f93b:	mov    BYTE PTR [rdi],0x0
    6502f93e:	jmp    0x6502f96a
    6502f940:	mov    r9d,DWORD PTR [rsp+0xd0]
    6502f948:	lea    rax,[rsp+0x40]
    6502f94d:	mov    QWORD PTR [rsp+0x30],rbp
    6502f952:	mov    r8d,esi
    6502f955:	mov    rdx,rbx
    6502f958:	mov    rcx,rdi
    6502f95b:	mov    BYTE PTR [rsp+0x28],0x0
    6502f960:	mov    QWORD PTR [rsp+0x20],rax
    6502f965:	call   0x6502f530
    6502f96a:	mov    rcx,QWORD PTR [rsp+0x70]
    6502f96f:	xor    rcx,rsp
    6502f972:	call   0x6501e650
    6502f977:	add    rsp,0x88
    6502f97e:	pop    rdi
    6502f97f:	pop    rsi
    6502f980:	pop    rbp
    6502f981:	pop    rbx
    6502f982:	ret    
    6502f983:	int3   
    6502f984:	int3   
    6502f985:	int3   
    6502f986:	int3   
    6502f987:	int3   
    6502f988:	int3   
    6502f989:	int3   
    6502f98a:	int3   
    6502f98b:	int3   
    6502f98c:	int3   
    6502f98d:	int3   
    6502f98e:	int3   
    6502f98f:	int3   
    6502f990:	mov    QWORD PTR [rsp+0x18],rbx
    6502f995:	mov    QWORD PTR [rsp+0x8],rcx
    6502f99a:	push   rbp
    6502f99b:	push   rsi
    6502f99c:	push   rdi
    6502f99d:	push   r12
    6502f99f:	push   r13
    6502f9a1:	push   r14
    6502f9a3:	push   r15
    6502f9a5:	sub    rsp,0x50
    6502f9a9:	xor    r15b,r15b
    6502f9ac:	mov    rdi,rdx
    6502f9af:	mov    rdx,QWORD PTR [rsp+0xb8]
    6502f9b7:	test   rdx,rdx
    6502f9ba:	mov    ebx,r9d
    6502f9bd:	mov    r9d,0x3ff
    6502f9c3:	mov    r12,r8
    6502f9c6:	mov    r14,rcx
    6502f9c9:	mov    bp,0x30
    6502f9cd:	mov    QWORD PTR [rsp+0x98],r9
    6502f9d5:	mov    BYTE PTR [rsp+0x48],r15b
    6502f9da:	jne    0x6502fa54
    6502f9dc:	call   0x65020a30
    6502f9e1:	mov    rsi,rax
    6502f9e4:	mov    r13,QWORD PTR [rax+0xc0]
    6502f9eb:	mov    r14,QWORD PTR [rax+0xb8]
    6502f9f2:	cmp    r13,QWORD PTR [rip+0x13fa7]        # 0x650439a0
    6502f9f9:	je     0x6502fa11
    6502f9fb:	mov    ecx,DWORD PTR [rax+0xc8]
    6502fa01:	test   DWORD PTR [rip+0x13e21],ecx        # 0x65043828
    6502fa07:	jne    0x6502fa11
    6502fa09:	call   0x65023e90
    6502fa0e:	mov    r13,rax
    6502fa11:	cmp    r14,QWORD PTR [rip+0x13d08]        # 0x65043720
    6502fa18:	je     0x6502fa2d
    6502fa1a:	mov    ecx,DWORD PTR [rsi+0xc8]
    6502fa20:	test   DWORD PTR [rip+0x13e02],ecx        # 0x65043828
    6502fa26:	jne    0x6502fa2d
    6502fa28:	call   0x65023340
    6502fa2d:	mov    ecx,DWORD PTR [rsi+0xc8]
    6502fa33:	mov    r14,QWORD PTR [rsp+0x90]
    6502fa3b:	mov    r9d,0x3ff
    6502fa41:	test   cl,0x2
    6502fa44:	jne    0x6502fa77
    6502fa46:	or     ecx,0x2
    6502fa49:	mov    r15b,0x1
    6502fa4c:	mov    DWORD PTR [rsi+0xc8],ecx
    6502fa52:	jmp    0x6502fa77
    6502fa54:	mov    rax,QWORD PTR [rdx]
    6502fa57:	lea    rcx,[rsp+0x30]
    6502fa5c:	mov    QWORD PTR [rcx],rax
    6502fa5f:	mov    rax,QWORD PTR [rdx+0x8]
    6502fa63:	mov    QWORD PTR [rcx+0x8],rax
    6502fa67:	movzx  r15d,BYTE PTR [rsp+0x48]
    6502fa6d:	mov    rsi,QWORD PTR [rsp+0x40]
    6502fa72:	mov    r13,QWORD PTR [rsp+0x30]
    6502fa77:	xor    edx,edx
    6502fa79:	test   ebx,ebx
    6502fa7b:	cmovs  ebx,edx
    6502fa7e:	test   rdi,rdi
    6502fa81:	jne    0x6502fabc
    6502fa83:	call   0x65020420
    6502fa88:	xor    r9d,r9d
    6502fa8b:	xor    r8d,r8d
    6502fa8e:	xor    edx,edx
    6502fa90:	xor    ecx,ecx
    6502fa92:	mov    QWORD PTR [rsp+0x20],0x0
    6502fa9b:	mov    DWORD PTR [rax],0x16
    6502faa1:	call   0x6501d9c0
    6502faa6:	test   r15b,r15b
    6502faa9:	je     0x6502fab2
    6502faab:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502fab2:	mov    eax,0x16
    6502fab7:	jmp    0x6502fe38
    6502fabc:	test   r12,r12
    6502fabf:	je     0x6502fa83
    6502fac1:	lea    eax,[rbx+0xb]
    6502fac4:	mov    BYTE PTR [rdi],dl
    6502fac6:	movsxd rcx,eax
    6502fac9:	cmp    r12,rcx
    6502facc:	ja     0x6502fb07
    6502face:	call   0x65020420
    6502fad3:	xor    r9d,r9d
    6502fad6:	xor    r8d,r8d
    6502fad9:	xor    edx,edx
    6502fadb:	xor    ecx,ecx
    6502fadd:	mov    QWORD PTR [rsp+0x20],0x0
    6502fae6:	mov    DWORD PTR [rax],0x22
    6502faec:	call   0x6501d9c0
    6502faf1:	test   r15b,r15b
    6502faf4:	je     0x6502fafd
    6502faf6:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502fafd:	mov    eax,0x22
    6502fb02:	jmp    0x6502fe38
    6502fb07:	mov    rcx,QWORD PTR [r14]
    6502fb0a:	mov    rax,rcx
    6502fb0d:	shr    rax,0x34
    6502fb11:	and    eax,0x7ff
    6502fb16:	cmp    rax,0x7ff
    6502fb1c:	jne    0x6502fbc0
    6502fb22:	cmp    r12,0xffffffffffffffff
    6502fb26:	jne    0x6502fb2d
    6502fb28:	or     r8,r12
    6502fb2b:	jmp    0x6502fb32
    6502fb2d:	lea    r8,[r12-0x2]
    6502fb32:	mov    QWORD PTR [rsp+0x28],rdx
    6502fb37:	mov    DWORD PTR [rsp+0x20],edx
    6502fb3b:	lea    rdx,[rdi+0x2]
    6502fb3f:	mov    r9d,ebx
    6502fb42:	mov    rcx,r14
    6502fb45:	call   0x6502f870
    6502fb4a:	test   eax,eax
    6502fb4c:	je     0x6502fb66
    6502fb4e:	test   r15b,r15b
    6502fb51:	mov    BYTE PTR [rdi],0x0
    6502fb54:	je     0x6502fe38
    6502fb5a:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502fb61:	jmp    0x6502fe38
    6502fb66:	cmp    BYTE PTR [rdi+0x2],0x2d
    6502fb6a:	jne    0x6502fb73
    6502fb6c:	mov    BYTE PTR [rdi],0x2d
    6502fb6f:	add    rdi,0x1
    6502fb73:	mov    ebx,DWORD PTR [rsp+0xb0]
    6502fb7a:	mov    eax,0x78
    6502fb7f:	mov    ecx,0x58
    6502fb84:	mov    BYTE PTR [rdi],0x30
    6502fb87:	test   ebx,ebx
    6502fb89:	mov    edx,0x65
    6502fb8e:	cmovne eax,ecx
    6502fb91:	lea    rcx,[rdi+0x2]
    6502fb95:	mov    BYTE PTR [rdi+0x1],al
    6502fb98:	call   0x65030450
    6502fb9d:	test   rax,rax
    6502fba0:	je     0x6502fe2a
    6502fba6:	mov    ecx,0x70
    6502fbab:	mov    edx,0x50
    6502fbb0:	test   ebx,ebx
    6502fbb2:	cmovne ecx,edx
    6502fbb5:	mov    BYTE PTR [rax],cl
    6502fbb7:	mov    BYTE PTR [rax+0x3],0x0
    6502fbbb:	jmp    0x6502fe2a
    6502fbc0:	movabs rax,0x8000000000000000
    6502fbca:	test   rax,rcx
    6502fbcd:	je     0x6502fbd6
    6502fbcf:	mov    BYTE PTR [rdi],0x2d
    6502fbd2:	add    rdi,0x1
    6502fbd6:	mov    edx,DWORD PTR [rsp+0xb0]
    6502fbdd:	mov    eax,0x78
    6502fbe2:	mov    BYTE PTR [rdi],0x30
    6502fbe5:	test   edx,edx
    6502fbe7:	mov    ecx,0x58
    6502fbec:	mov    r8d,0x61
    6502fbf2:	cmovne eax,ecx
    6502fbf5:	test   edx,edx
    6502fbf7:	movabs r10,0xfffffffffffff
    6502fc01:	mov    BYTE PTR [rdi+0x1],al
    6502fc04:	mov    eax,0x41
    6502fc09:	cmovne r8d,eax
    6502fc0d:	movabs rax,0x7ff0000000000000
    6502fc17:	sub    r8d,0x3a
    6502fc1b:	test   QWORD PTR [r14],rax
    6502fc1e:	jne    0x6502fc45
    6502fc20:	mov    BYTE PTR [rdi+0x2],0x30
    6502fc24:	mov    rax,QWORD PTR [r14]
    6502fc27:	add    rdi,0x3
    6502fc2b:	and    rax,r10
    6502fc2e:	neg    rax
    6502fc31:	sbb    r9,r9
    6502fc34:	and    r9d,0x3fe
    6502fc3b:	mov    QWORD PTR [rsp+0x98],r9
    6502fc43:	jmp    0x6502fc4d
    6502fc45:	mov    BYTE PTR [rdi+0x2],0x31
    6502fc49:	add    rdi,0x3
    6502fc4d:	mov    r12,rdi
    6502fc50:	add    rdi,0x1
    6502fc54:	test   ebx,ebx
    6502fc56:	jne    0x6502fc5e
    6502fc58:	mov    BYTE PTR [r12],bl
    6502fc5c:	jmp    0x6502fc6f
    6502fc5e:	mov    rax,QWORD PTR [r13+0x128]
    6502fc65:	mov    rcx,QWORD PTR [rax]
    6502fc68:	movzx  eax,BYTE PTR [rcx]
    6502fc6b:	mov    BYTE PTR [r12],al
    6502fc6f:	test   QWORD PTR [r14],r10
    6502fc72:	jbe    0x6502fd0f
    6502fc78:	movabs rdx,0xf000000000000
    6502fc82:	test   ebx,ebx
    6502fc84:	jle    0x6502fcb9
    6502fc86:	mov    rax,QWORD PTR [r14]
    6502fc89:	movzx  ecx,bpl
    6502fc8d:	and    rax,rdx
    6502fc90:	and    rax,r10
    6502fc93:	shr    rax,cl
    6502fc96:	add    ax,0x30
    6502fc9a:	cmp    ax,0x39
    6502fc9e:	jbe    0x6502fca4
    6502fca0:	add    ax,r8w
    6502fca4:	mov    BYTE PTR [rdi],al
    6502fca6:	add    rdi,0x1
    6502fcaa:	shr    rdx,0x4
    6502fcae:	sub    ebx,0x1
    6502fcb1:	add    bp,0xfffc
    6502fcb5:	jns    0x6502fc82
    6502fcb7:	jmp    0x6502fd0f
    6502fcb9:	test   bp,bp
    6502fcbc:	js     0x6502fd0f
    6502fcbe:	mov    rax,QWORD PTR [r14]
    6502fcc1:	movzx  ecx,bpl
    6502fcc5:	and    rax,rdx
    6502fcc8:	and    rax,r10
    6502fccb:	shr    rax,cl
    6502fcce:	cmp    ax,0x8
    6502fcd2:	jbe    0x6502fd0f
    6502fcd4:	lea    rax,[rdi-0x1]
    6502fcd8:	movzx  ecx,BYTE PTR [rax]
    6502fcdb:	cmp    cl,0x66
    6502fcde:	je     0x6502fce5
    6502fce0:	cmp    cl,0x46
    6502fce3:	jne    0x6502fcee
    6502fce5:	mov    BYTE PTR [rax],0x30
    6502fce8:	sub    rax,0x1
    6502fcec:	jmp    0x6502fcd8
    6502fcee:	cmp    rax,r12
    6502fcf1:	je     0x6502fd0b
    6502fcf3:	movzx  ecx,BYTE PTR [rax]
    6502fcf6:	cmp    cl,0x39
    6502fcf9:	jne    0x6502fd04
    6502fcfb:	add    r8b,0x3a
    6502fcff:	mov    BYTE PTR [rax],r8b
    6502fd02:	jmp    0x6502fd0f
    6502fd04:	add    cl,0x1
    6502fd07:	mov    BYTE PTR [rax],cl
    6502fd09:	jmp    0x6502fd0f
    6502fd0b:	add    BYTE PTR [rax-0x1],0x1
    6502fd0f:	test   ebx,ebx
    6502fd11:	jle    0x6502fd2b
    6502fd13:	mov    r8,rbx
    6502fd16:	mov    dl,0x30
    6502fd18:	mov    rcx,rdi
    6502fd1b:	call   0x6501efa0
    6502fd20:	mov    r9,QWORD PTR [rsp+0x98]
    6502fd28:	add    rdi,rbx
    6502fd2b:	cmp    BYTE PTR [r12],0x0
    6502fd30:	mov    ecx,0x70
    6502fd35:	mov    edx,0x50
    6502fd3a:	cmove  rdi,r12
    6502fd3e:	cmp    DWORD PTR [rsp+0xb0],0x0
    6502fd46:	cmovne ecx,edx
    6502fd49:	mov    BYTE PTR [rdi],cl
    6502fd4b:	mov    rcx,QWORD PTR [r14]
    6502fd4e:	shr    rcx,0x34
    6502fd52:	and    ecx,0x7ff
    6502fd58:	sub    rcx,r9
    6502fd5b:	js     0x6502fd67
    6502fd5d:	mov    BYTE PTR [rdi+0x1],0x2b
    6502fd61:	add    rdi,0x2
    6502fd65:	jmp    0x6502fd72
    6502fd67:	mov    BYTE PTR [rdi+0x1],0x2d
    6502fd6b:	add    rdi,0x2
    6502fd6f:	neg    rcx
    6502fd72:	cmp    rcx,0x3e8
    6502fd79:	mov    r8,rdi
    6502fd7c:	mov    BYTE PTR [rdi],0x30
    6502fd7f:	jl     0x6502fdb5
    6502fd81:	movabs rax,0x20c49ba5e353f7cf
    6502fd8b:	add    rdi,0x1
    6502fd8f:	imul   rcx
    6502fd92:	sar    rdx,0x7
    6502fd96:	mov    rax,rdx
    6502fd99:	shr    rax,0x3f
    6502fd9d:	add    rdx,rax
    6502fda0:	lea    eax,[rdx+0x30]
    6502fda3:	imul   rdx,rdx,0xfffffffffffffc18
    6502fdaa:	mov    BYTE PTR [rdi-0x1],al
    6502fdad:	add    rcx,rdx
    6502fdb0:	cmp    rdi,r8
    6502fdb3:	jne    0x6502fdbb
    6502fdb5:	cmp    rcx,0x64
    6502fdb9:	jl     0x6502fdea
    6502fdbb:	movabs rax,0xa3d70a3d70a3d70b
    6502fdc5:	add    rdi,0x1
    6502fdc9:	imul   rcx
    6502fdcc:	add    rdx,rcx
    6502fdcf:	sar    rdx,0x6
    6502fdd3:	mov    rax,rdx
    6502fdd6:	shr    rax,0x3f
    6502fdda:	add    rdx,rax
    6502fddd:	lea    eax,[rdx+0x30]
    6502fde0:	imul   rdx,rdx,0xffffffffffffff9c
    6502fde4:	mov    BYTE PTR [rdi-0x1],al
    6502fde7:	add    rcx,rdx
    6502fdea:	cmp    rdi,r8
    6502fded:	jne    0x6502fdf5
    6502fdef:	cmp    rcx,0xa
    6502fdf3:	jl     0x6502fe21
    6502fdf5:	movabs rax,0x6666666666666667
    6502fdff:	add    rdi,0x1
    6502fe03:	imul   rcx
    6502fe06:	sar    rdx,0x2
    6502fe0a:	mov    rax,rdx
    6502fe0d:	shr    rax,0x3f
    6502fe11:	add    rdx,rax
    6502fe14:	lea    eax,[rdx+0x30]
    6502fe17:	imul   rdx,rdx,0xfffffffffffffff6
    6502fe1b:	mov    BYTE PTR [rdi-0x1],al
    6502fe1e:	add    rcx,rdx
    6502fe21:	add    cl,0x30
    6502fe24:	mov    BYTE PTR [rdi],cl
    6502fe26:	mov    BYTE PTR [rdi+0x1],0x0
    6502fe2a:	test   r15b,r15b
    6502fe2d:	je     0x6502fe36
    6502fe2f:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502fe36:	xor    eax,eax
    6502fe38:	mov    rbx,QWORD PTR [rsp+0xa0]
    6502fe40:	add    rsp,0x50
    6502fe44:	pop    r15
    6502fe46:	pop    r14
    6502fe48:	pop    r13
    6502fe4a:	pop    r12
    6502fe4c:	pop    rdi
    6502fe4d:	pop    rsi
    6502fe4e:	pop    rbp
    6502fe4f:	ret    
    6502fe50:	mov    QWORD PTR [rsp+0x8],rbx
    6502fe55:	mov    QWORD PTR [rsp+0x18],rbp
    6502fe5a:	mov    QWORD PTR [rsp+0x20],rsi
    6502fe5f:	mov    QWORD PTR [rsp+0x10],rdx
    6502fe64:	push   rdi
    6502fe65:	push   r12
    6502fe67:	push   r13
    6502fe69:	push   r14
    6502fe6b:	push   r15
    6502fe6d:	sub    rsp,0x50
    6502fe71:	mov    edi,DWORD PTR [r9+0x4]
    6502fe75:	xor    r12b,r12b
    6502fe78:	mov    rbp,rcx
    6502fe7b:	mov    rcx,QWORD PTR [rsp+0xa8]
    6502fe83:	sub    edi,0x1
    6502fe86:	mov    r14,r9
    6502fe89:	test   rcx,rcx
    6502fe8c:	mov    r15d,r8d
    6502fe8f:	mov    BYTE PTR [rsp+0x48],r12b
    6502fe94:	jne    0x6502ff15
    6502fe96:	call   0x65020a30
    6502fe9b:	mov    rsi,rax
    6502fe9e:	mov    r13,QWORD PTR [rax+0xc0]
    6502fea5:	mov    rbx,QWORD PTR [rax+0xb8]
    6502feac:	cmp    r13,QWORD PTR [rip+0x13aed]        # 0x650439a0
    6502feb3:	mov    QWORD PTR [rsp+0xa8],r13
    6502febb:	je     0x6502fed8
    6502febd:	mov    ecx,DWORD PTR [rax+0xc8]
    6502fec3:	test   DWORD PTR [rip+0x1395f],ecx        # 0x65043828
    6502fec9:	jne    0x6502fed8
    6502fecb:	call   0x65023e90
    6502fed0:	mov    QWORD PTR [rsp+0xa8],rax
    6502fed8:	cmp    rbx,QWORD PTR [rip+0x13841]        # 0x65043720
    6502fedf:	je     0x6502fef4
    6502fee1:	mov    ecx,DWORD PTR [rsi+0xc8]
    6502fee7:	test   DWORD PTR [rip+0x1393b],ecx        # 0x65043828
    6502feed:	jne    0x6502fef4
    6502feef:	call   0x65023340
    6502fef4:	mov    ecx,DWORD PTR [rsi+0xc8]
    6502fefa:	mov    rdx,QWORD PTR [rsp+0x88]
    6502ff02:	test   cl,0x2
    6502ff05:	jne    0x6502ff40
    6502ff07:	or     ecx,0x2
    6502ff0a:	mov    r12b,0x1
    6502ff0d:	mov    DWORD PTR [rsi+0xc8],ecx
    6502ff13:	jmp    0x6502ff40
    6502ff15:	mov    rax,QWORD PTR [rcx]
    6502ff18:	lea    r8,[rsp+0x30]
    6502ff1d:	mov    QWORD PTR [r8],rax
    6502ff20:	mov    rax,QWORD PTR [rcx+0x8]
    6502ff24:	mov    QWORD PTR [r8+0x8],rax
    6502ff28:	mov    rax,QWORD PTR [rsp+0x30]
    6502ff2d:	movzx  r12d,BYTE PTR [rsp+0x48]
    6502ff33:	mov    rsi,QWORD PTR [rsp+0x40]
    6502ff38:	mov    QWORD PTR [rsp+0xa8],rax
    6502ff40:	test   rbp,rbp
    6502ff43:	jne    0x6502ff7c
    6502ff45:	call   0x65020420
    6502ff4a:	xor    r9d,r9d
    6502ff4d:	xor    r8d,r8d
    6502ff50:	mov    DWORD PTR [rax],0x16
    6502ff56:	xor    eax,eax
    6502ff58:	xor    edx,edx
    6502ff5a:	xor    ecx,ecx
    6502ff5c:	mov    QWORD PTR [rsp+0x20],rax
    6502ff61:	call   0x6501d9c0
    6502ff66:	test   r12b,r12b
    6502ff69:	je     0x6502ff72
    6502ff6b:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6502ff72:	mov    eax,0x16
    6502ff77:	jmp    0x6503008c
    6502ff7c:	test   rdx,rdx
    6502ff7f:	je     0x6502ff45
    6502ff81:	cmp    BYTE PTR [rsp+0xa0],0x0
    6502ff89:	je     0x6502ffa8
    6502ff8b:	cmp    edi,r15d
    6502ff8e:	jne    0x6502ffa8
    6502ff90:	xor    eax,eax
    6502ff92:	cmp    DWORD PTR [r14],0x2d
    6502ff96:	movsxd rcx,edi
    6502ff99:	sete   al
    6502ff9c:	add    rax,rbp
    6502ff9f:	mov    BYTE PTR [rcx+rax*1],0x30
    6502ffa3:	mov    BYTE PTR [rcx+rax*1+0x1],0x0
    6502ffa8:	cmp    DWORD PTR [r14],0x2d
    6502ffac:	jne    0x6502ffb6
    6502ffae:	mov    BYTE PTR [rbp+0x0],0x2d
    6502ffb2:	add    rbp,0x1
    6502ffb6:	movsxd rax,DWORD PTR [r14+0x4]
    6502ffba:	test   eax,eax
    6502ffbc:	jg     0x6502ffe5
    6502ffbe:	or     rcx,0xffffffffffffffff
    6502ffc2:	xor    eax,eax
    6502ffc4:	mov    rdi,rbp
    6502ffc7:	repnz scas al,BYTE PTR es:[rdi]
    6502ffc9:	mov    rdx,rbp
    6502ffcc:	not    rcx
    6502ffcf:	mov    r8,rcx
    6502ffd2:	lea    rcx,[rbp+0x1]
    6502ffd6:	call   0x6501fd30
    6502ffdb:	mov    BYTE PTR [rbp+0x0],0x30
    6502ffdf:	add    rbp,0x1
    6502ffe3:	jmp    0x6502ffe8
    6502ffe5:	add    rbp,rax
    6502ffe8:	test   r15d,r15d
    6502ffeb:	jle    0x6503007e
    6502fff1:	or     rcx,0xffffffffffffffff
    6502fff5:	xor    eax,eax
    6502fff7:	mov    rdi,rbp
    6502fffa:	repnz scas al,BYTE PTR es:[rdi]
    6502fffc:	lea    r13,[rbp+0x1]
    65030000:	mov    rdx,rbp
    65030003:	not    rcx
    65030006:	mov    r8,rcx
    65030009:	mov    rcx,r13
    6503000c:	call   0x6501fd30
    65030011:	mov    rcx,QWORD PTR [rsp+0xa8]
    65030019:	mov    rdx,QWORD PTR [rcx+0x128]
    65030020:	mov    rax,QWORD PTR [rdx]
    65030023:	movzx  ecx,BYTE PTR [rax]
    65030026:	mov    BYTE PTR [rbp+0x0],cl
    65030029:	mov    ebx,DWORD PTR [r14+0x4]
    6503002d:	test   ebx,ebx
    6503002f:	jns    0x6503007e
    65030031:	neg    ebx
    65030033:	cmp    BYTE PTR [rsp+0xa0],0x0
    6503003b:	jne    0x65030048
    6503003d:	mov    eax,ebx
    6503003f:	mov    ebx,r15d
    65030042:	cmp    r15d,eax
    65030045:	cmovge ebx,eax
    65030048:	test   ebx,ebx
    6503004a:	je     0x6503006e
    6503004c:	xor    eax,eax
    6503004e:	or     rcx,0xffffffffffffffff
    65030052:	mov    rdi,r13
    65030055:	repnz scas al,BYTE PTR es:[rdi]
    65030057:	movsxd rax,ebx
    6503005a:	mov    rdx,r13
    6503005d:	not    rcx
    65030060:	add    rax,r13
    65030063:	mov    r8,rcx
    65030066:	mov    rcx,rax
    65030069:	call   0x6501fd30
    6503006e:	movsxd r8,ebx
    65030071:	mov    edx,0x30
    65030076:	mov    rcx,r13
    65030079:	call   0x6501efa0
    6503007e:	test   r12b,r12b
    65030081:	je     0x6503008a
    65030083:	and    DWORD PTR [rsi+0xc8],0xfffffffd
    6503008a:	xor    eax,eax
    6503008c:	lea    r11,[rsp+0x50]
    65030091:	mov    rbx,QWORD PTR [r11+0x30]
    65030095:	mov    rbp,QWORD PTR [r11+0x40]
    65030099:	mov    rsi,QWORD PTR [r11+0x48]
    6503009d:	mov    rsp,r11
    650300a0:	pop    r15
    650300a2:	pop    r14
    650300a4:	pop    r13
    650300a6:	pop    r12
    650300a8:	pop    rdi
    650300a9:	ret    
    650300aa:	int3   
    650300ab:	int3   
    650300ac:	int3   
    650300ad:	int3   
    650300ae:	int3   
    650300af:	int3   
    650300b0:	rex push rbx
    650300b2:	push   rbp
    650300b3:	push   rsi
    650300b4:	push   rdi
    650300b5:	sub    rsp,0x78
    650300b9:	mov    rax,QWORD PTR [rip+0x13060]        # 0x65043120
    650300c0:	xor    rax,rsp
    650300c3:	mov    QWORD PTR [rsp+0x60],rax
    650300c8:	mov    rcx,QWORD PTR [rcx]
    650300cb:	mov    rbp,QWORD PTR [rsp+0xc0]
    650300d3:	mov    rbx,r8
    650300d6:	mov    rdi,rdx
    650300d9:	mov    esi,r9d
    650300dc:	lea    r8,[rsp+0x48]
    650300e1:	lea    rdx,[rsp+0x30]
    650300e6:	mov    r9d,0x16
    650300ec:	call   0x650308c0
    650300f1:	test   rdi,rdi
    650300f4:	jne    0x6503011c
    650300f6:	call   0x65020420
    650300fb:	xor    ecx,ecx
    650300fd:	xor    r9d,r9d
    65030100:	xor    r8d,r8d
    65030103:	xor    edx,edx
    65030105:	mov    DWORD PTR [rax],0x16
    6503010b:	mov    QWORD PTR [rsp+0x20],rcx
    65030110:	call   0x6501d9c0
    65030115:	mov    eax,0x16
    6503011a:	jmp    0x65030185
    6503011c:	test   rbx,rbx
    6503011f:	je     0x650300f6
    65030121:	mov    r9d,DWORD PTR [rsp+0x30]
    65030126:	xor    ecx,ecx
    65030128:	cmp    rbx,0xffffffffffffffff
    6503012c:	jne    0x65030133
    6503012e:	or     rdx,rbx
    65030131:	jmp    0x65030143
    65030133:	cmp    r9d,0x2d
    65030137:	mov    rax,rcx
    6503013a:	mov    rdx,rbx
    6503013d:	sete   al
    65030140:	sub    rdx,rax
    65030143:	mov    r8d,DWORD PTR [rsp+0x34]
    65030148:	add    r8d,esi
    6503014b:	cmp    r9d,0x2d
    6503014f:	lea    r9,[rsp+0x30]
    65030154:	sete   cl
    65030157:	add    rcx,rdi
    6503015a:	call   0x650307a0
    6503015f:	test   eax,eax
    65030161:	je     0x65030168
    65030163:	mov    BYTE PTR [rdi],0x0
    65030166:	jmp    0x65030185
    65030168:	lea    r9,[rsp+0x30]
    6503016d:	mov    r8d,esi
    65030170:	mov    rdx,rbx
    65030173:	mov    rcx,rdi
    65030176:	mov    QWORD PTR [rsp+0x28],rbp
    6503017b:	mov    BYTE PTR [rsp+0x20],0x0
    65030180:	call   0x6502fe50
    65030185:	mov    rcx,QWORD PTR [rsp+0x60]
    6503018a:	xor    rcx,rsp
    6503018d:	call   0x6501e650
    65030192:	add    rsp,0x78
    65030196:	pop    rdi
    65030197:	pop    rsi
    65030198:	pop    rbp
    65030199:	pop    rbx
    6503019a:	ret    
    6503019b:	int3   
    6503019c:	int3   
    6503019d:	int3   
    6503019e:	int3   
    6503019f:	int3   
    650301a0:	rex push rbp
    650301a2:	push   rsi
    650301a3:	push   rdi
    650301a4:	push   r13
    650301a6:	sub    rsp,0x98
    650301ad:	mov    rax,QWORD PTR [rip+0x12f6c]        # 0x65043120
    650301b4:	xor    rax,rsp
    650301b7:	mov    QWORD PTR [rsp+0x70],rax
    650301bc:	mov    rcx,QWORD PTR [rcx]
    650301bf:	mov    r13,QWORD PTR [rsp+0xe8]
    650301c7:	mov    rdi,r8
    650301ca:	mov    rsi,rdx
    650301cd:	mov    ebp,r9d
    650301d0:	lea    r8,[rsp+0x58]
    650301d5:	lea    rdx,[rsp+0x40]
    650301da:	mov    r9d,0x16
    650301e0:	call   0x650308c0
    650301e5:	test   rsi,rsi
    650301e8:	jne    0x65030213
    650301ea:	call   0x65020420
    650301ef:	xor    ecx,ecx
    650301f1:	xor    r9d,r9d
    650301f4:	xor    r8d,r8d
    650301f7:	xor    edx,edx
    650301f9:	mov    DWORD PTR [rax],0x16
    650301ff:	mov    QWORD PTR [rsp+0x20],rcx
    65030204:	call   0x6501d9c0
    65030209:	mov    eax,0x16
    6503020e:	jmp    0x650302ea
    65030213:	test   rdi,rdi
    65030216:	je     0x650301ea
    65030218:	xor    ecx,ecx
    6503021a:	mov    QWORD PTR [rsp+0x90],rbx
    65030222:	mov    QWORD PTR [rsp+0x88],r12
    6503022a:	mov    r12d,DWORD PTR [rsp+0x44]
    6503022f:	add    r12d,0xffffffff
    65030233:	cmp    DWORD PTR [rsp+0x40],0x2d
    65030238:	sete   cl
    6503023b:	cmp    rdi,0xffffffffffffffff
    6503023f:	lea    rbx,[rcx+rsi*1]
    65030243:	jne    0x6503024a
    65030245:	or     rdx,rdi
    65030248:	jmp    0x65030250
    6503024a:	mov    rdx,rdi
    6503024d:	sub    rdx,rcx
    65030250:	lea    r9,[rsp+0x40]
    65030255:	mov    r8d,ebp
    65030258:	mov    rcx,rbx
    6503025b:	call   0x650307a0
    65030260:	test   eax,eax
    65030262:	je     0x65030269
    65030264:	mov    BYTE PTR [rsi],0x0
    65030267:	jmp    0x650302da
    65030269:	mov    eax,DWORD PTR [rsp+0x44]
    6503026d:	add    eax,0xffffffff
    65030270:	cmp    r12d,eax
    65030273:	setl   cl
    65030276:	cmp    eax,0xfffffffc
    65030279:	jl     0x650302b0
    6503027b:	cmp    eax,ebp
    6503027d:	jge    0x650302b0
    6503027f:	test   cl,cl
    65030281:	je     0x65030291
    65030283:	movzx  eax,BYTE PTR [rbx]
    65030286:	add    rbx,0x1
    6503028a:	test   al,al
    6503028c:	jne    0x65030283
    6503028e:	mov    BYTE PTR [rbx-0x2],al
    65030291:	lea    r9,[rsp+0x40]
    65030296:	mov    r8d,ebp
    65030299:	mov    rdx,rdi
    6503029c:	mov    rcx,rsi
    6503029f:	mov    QWORD PTR [rsp+0x28],r13
    650302a4:	mov    BYTE PTR [rsp+0x20],0x1
    650302a9:	call   0x6502fe50
    650302ae:	jmp    0x650302da
    650302b0:	mov    r9d,DWORD PTR [rsp+0xe0]
    650302b8:	lea    rax,[rsp+0x40]
    650302bd:	mov    QWORD PTR [rsp+0x30],r13
    650302c2:	mov    r8d,ebp
    650302c5:	mov    rdx,rdi
    650302c8:	mov    rcx,rsi
    650302cb:	mov    BYTE PTR [rsp+0x28],0x1
    650302d0:	mov    QWORD PTR [rsp+0x20],rax
    650302d5:	call   0x6502f530
    650302da:	mov    rbx,QWORD PTR [rsp+0x90]
    650302e2:	mov    r12,QWORD PTR [rsp+0x88]
    650302ea:	mov    rcx,QWORD PTR [rsp+0x70]
    650302ef:	xor    rcx,rsp
    650302f2:	call   0x6501e650
    650302f7:	add    rsp,0x98
    650302fe:	pop    r13
    65030300:	pop    rdi
    65030301:	pop    rsi
    65030302:	pop    rbp
    65030303:	ret    
    65030304:	int3   
    65030305:	int3   
    65030306:	int3   
    65030307:	int3   
    65030308:	int3   
    65030309:	int3   
    6503030a:	int3   
    6503030b:	int3   
    6503030c:	int3   
    6503030d:	int3   
    6503030e:	int3   
    6503030f:	int3   
    65030310:	sub    rsp,0x38
    65030314:	cmp    r9d,0x65
    65030318:	je     0x6503038d
    6503031a:	cmp    r9d,0x45
    6503031e:	je     0x6503038d
    65030320:	cmp    r9d,0x66
    65030324:	jne    0x6503033f
    65030326:	mov    rax,QWORD PTR [rsp+0x70]
    6503032b:	mov    r9d,DWORD PTR [rsp+0x60]
    65030330:	mov    QWORD PTR [rsp+0x20],rax
    65030335:	call   0x650300b0
    6503033a:	add    rsp,0x38
    6503033e:	ret    
    6503033f:	cmp    r9d,0x61
    65030343:	je     0x6503036c
    65030345:	cmp    r9d,0x41
    65030349:	je     0x6503036c
    6503034b:	mov    rax,QWORD PTR [rsp+0x70]
    65030350:	mov    r9d,DWORD PTR [rsp+0x60]
    65030355:	mov    QWORD PTR [rsp+0x28],rax
    6503035a:	mov    eax,DWORD PTR [rsp+0x68]
    6503035e:	mov    DWORD PTR [rsp+0x20],eax
    65030362:	call   0x650301a0
    65030367:	add    rsp,0x38
    6503036b:	ret    
    6503036c:	mov    rax,QWORD PTR [rsp+0x70]
    65030371:	mov    r9d,DWORD PTR [rsp+0x60]
    65030376:	mov    QWORD PTR [rsp+0x28],rax
    6503037b:	mov    eax,DWORD PTR [rsp+0x68]
    6503037f:	mov    DWORD PTR [rsp+0x20],eax
    65030383:	call   0x6502f990
    65030388:	add    rsp,0x38
    6503038c:	ret    
    6503038d:	mov    rax,QWORD PTR [rsp+0x70]
    65030392:	mov    r9d,DWORD PTR [rsp+0x60]
    65030397:	mov    QWORD PTR [rsp+0x28],rax
    6503039c:	mov    eax,DWORD PTR [rsp+0x68]
    650303a0:	mov    DWORD PTR [rsp+0x20],eax
    650303a4:	call   0x6502f870
    650303a9:	add    rsp,0x38
    650303ad:	ret    
    650303ae:	int3   
    650303af:	int3   
    650303b0:	sub    rsp,0x38
    650303b4:	cmp    r9d,0x65
    650303b8:	je     0x6503042a
    650303ba:	cmp    r9d,0x45
    650303be:	je     0x6503042a
    650303c0:	cmp    r9d,0x66
    650303c4:	jne    0x650303de
    650303c6:	mov    r9d,DWORD PTR [rsp+0x60]
    650303cb:	mov    QWORD PTR [rsp+0x20],0x0
    650303d4:	call   0x650300b0
    650303d9:	add    rsp,0x38
    650303dd:	ret    
    650303de:	cmp    r9d,0x61
    650303e2:	je     0x6503040a
    650303e4:	cmp    r9d,0x41
    650303e8:	je     0x6503040a
    650303ea:	mov    eax,DWORD PTR [rsp+0x68]
    650303ee:	mov    r9d,DWORD PTR [rsp+0x60]
    650303f3:	mov    QWORD PTR [rsp+0x28],0x0
    650303fc:	mov    DWORD PTR [rsp+0x20],eax
    65030400:	call   0x650301a0
    65030405:	add    rsp,0x38
    65030409:	ret    
    6503040a:	mov    eax,DWORD PTR [rsp+0x68]
    6503040e:	mov    r9d,DWORD PTR [rsp+0x60]
    65030413:	mov    QWORD PTR [rsp+0x28],0x0
    6503041c:	mov    DWORD PTR [rsp+0x20],eax
    65030420:	call   0x6502f990
    65030425:	add    rsp,0x38
    65030429:	ret    
    6503042a:	mov    eax,DWORD PTR [rsp+0x68]
    6503042e:	mov    r9d,DWORD PTR [rsp+0x60]
    65030433:	mov    QWORD PTR [rsp+0x28],0x0
    6503043c:	mov    DWORD PTR [rsp+0x20],eax
    65030440:	call   0x6502f870
    65030445:	add    rsp,0x38
    65030449:	ret    
    6503044a:	int3   
    6503044b:	int3   
    6503044c:	int3   
    6503044d:	int3   
    6503044e:	int3   
    6503044f:	int3   
    65030450:	mov    r8,rcx
    65030453:	movzx  eax,BYTE PTR [rcx]
    65030456:	add    rcx,0x1
    6503045a:	test   al,al
    6503045c:	jne    0x65030453
    6503045e:	xchg   ax,ax
    65030460:	sub    rcx,0x1
    65030464:	cmp    rcx,r8
    65030467:	je     0x65030471
    65030469:	cmp    BYTE PTR [rcx],dl
    6503046b:	jne    0x65030460
    6503046d:	mov    rax,rcx
    65030470:	ret    
    65030471:	cmp    BYTE PTR [rcx],dl
    65030473:	jne    0x65030479
    65030475:	mov    rax,rcx
    65030478:	ret    
    65030479:	xor    eax,eax
    6503047b:	ret    
    6503047c:	int3   
    6503047d:	int3   
    6503047e:	int3   
    6503047f:	int3   
    65030480:	mov    QWORD PTR [rsp+0x20],rbx
    65030485:	push   rdi
    65030486:	sub    rsp,0x80
    6503048d:	mov    rax,QWORD PTR [rip+0x12c8c]        # 0x65043120
    65030494:	xor    rax,rsp
    65030497:	mov    QWORD PTR [rsp+0x78],rax
    6503049c:	test   r8,r8
    6503049f:	mov    rbx,rdx
    650304a2:	mov    rdi,rcx
    650304a5:	mov    BYTE PTR [rsp+0x58],0x0
    650304aa:	jne    0x65030541
    650304b0:	call   0x65020a30
    650304b5:	mov    QWORD PTR [rsp+0x50],rax
    650304ba:	mov    r11,rax
    650304bd:	mov    rcx,QWORD PTR [rax+0xc0]
    650304c4:	cmp    rcx,QWORD PTR [rip+0x134d5]        # 0x650439a0
    650304cb:	mov    QWORD PTR [rsp+0x40],rcx
    650304d0:	mov    rax,QWORD PTR [rax+0xb8]
    650304d7:	mov    QWORD PTR [rsp+0x48],rax
    650304dc:	je     0x65030501
    650304de:	mov    ecx,DWORD PTR [r11+0xc8]
    650304e5:	test   DWORD PTR [rip+0x1333d],ecx        # 0x65043828
    650304eb:	jne    0x65030501
    650304ed:	call   0x65023e90
    650304f2:	mov    r11,QWORD PTR [rsp+0x50]
    650304f7:	mov    QWORD PTR [rsp+0x40],rax
    650304fc:	mov    rax,QWORD PTR [rsp+0x48]
    65030501:	cmp    rax,QWORD PTR [rip+0x13218]        # 0x65043720
    65030508:	je     0x65030528
    6503050a:	mov    eax,DWORD PTR [r11+0xc8]
    65030511:	test   DWORD PTR [rip+0x13311],eax        # 0x65043828
    65030517:	jne    0x65030528
    65030519:	call   0x65023340
    6503051e:	mov    r11,QWORD PTR [rsp+0x50]
    65030523:	mov    QWORD PTR [rsp+0x48],rax
    65030528:	test   BYTE PTR [r11+0xc8],0x2
    65030530:	jne    0x65030554
    65030532:	or     DWORD PTR [r11+0xc8],0x2
    6503053a:	mov    BYTE PTR [rsp+0x58],0x1
    6503053f:	jmp    0x65030554
    65030541:	mov    rax,QWORD PTR [r8]
    65030544:	lea    rcx,[rsp+0x40]
    65030549:	mov    QWORD PTR [rcx],rax
    6503054c:	mov    rax,QWORD PTR [r8+0x8]
    65030550:	mov    QWORD PTR [rcx+0x8],rax
    65030554:	lea    rax,[rsp+0x40]
    65030559:	lea    rdx,[rsp+0x60]
    6503055e:	lea    rcx,[rsp+0x68]
    65030563:	mov    QWORD PTR [rsp+0x38],rax
    65030568:	xor    eax,eax
    6503056a:	xor    r9d,r9d
    6503056d:	mov    DWORD PTR [rsp+0x30],eax
    65030571:	mov    DWORD PTR [rsp+0x28],eax
    65030575:	mov    r8,rbx
    65030578:	mov    DWORD PTR [rsp+0x20],eax
    6503057c:	call   0x650317b0
    65030581:	lea    rcx,[rsp+0x68]
    65030586:	mov    rdx,rdi
    65030589:	mov    ebx,eax
    6503058b:	call   0x65030a30
    65030590:	test   bl,0x3
    65030593:	jne    0x650305d3
    65030595:	cmp    eax,0x1
    65030598:	jne    0x650305b4
    6503059a:	cmp    BYTE PTR [rsp+0x58],0x0
    6503059f:	je     0x650305ad
    650305a1:	mov    rax,QWORD PTR [rsp+0x50]
    650305a6:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650305ad:	mov    eax,0x3
    650305b2:	jmp    0x650305f2
    650305b4:	cmp    eax,0x2
    650305b7:	jne    0x650305dd
    650305b9:	cmp    BYTE PTR [rsp+0x58],0x0
    650305be:	je     0x650305cc
    650305c0:	mov    rax,QWORD PTR [rsp+0x50]
    650305c5:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650305cc:	mov    eax,0x4
    650305d1:	jmp    0x650305f2
    650305d3:	test   bl,0x1
    650305d6:	jne    0x650305b9
    650305d8:	test   bl,0x2
    650305db:	jne    0x6503059a
    650305dd:	cmp    BYTE PTR [rsp+0x58],0x0
    650305e2:	je     0x650305f0
    650305e4:	mov    rax,QWORD PTR [rsp+0x50]
    650305e9:	and    DWORD PTR [rax+0xc8],0xfffffffd
    650305f0:	xor    eax,eax
    650305f2:	mov    rcx,QWORD PTR [rsp+0x78]
    650305f7:	xor    rcx,rsp
    650305fa:	call   0x6501e650
    650305ff:	mov    rbx,QWORD PTR [rsp+0xa8]
    65030607:	add    rsp,0x80
    6503060e:	pop    rdi
    6503060f:	ret    
    65030610:	mov    QWORD PTR [rsp+0x20],rbx
    65030615:	push   rdi
    65030616:	sub    rsp,0x80
    6503061d:	mov    rax,QWORD PTR [rip+0x12afc]        # 0x65043120
    65030624:	xor    rax,rsp
    65030627:	mov    QWORD PTR [rsp+0x78],rax
    6503062c:	test   r8,r8
    6503062f:	mov    rbx,rdx
    65030632:	mov    rdi,rcx
    65030635:	mov    BYTE PTR [rsp+0x58],0x0
    6503063a:	jne    0x650306d1
    65030640:	call   0x65020a30
    65030645:	mov    QWORD PTR [rsp+0x50],rax
    6503064a:	mov    r11,rax
    6503064d:	mov    rcx,QWORD PTR [rax+0xc0]
    65030654:	cmp    rcx,QWORD PTR [rip+0x13345]        # 0x650439a0
    6503065b:	mov    QWORD PTR [rsp+0x40],rcx
    65030660:	mov    rax,QWORD PTR [rax+0xb8]
    65030667:	mov    QWORD PTR [rsp+0x48],rax
    6503066c:	je     0x65030691
    6503066e:	mov    ecx,DWORD PTR [r11+0xc8]
    65030675:	test   DWORD PTR [rip+0x131ad],ecx        # 0x65043828
    6503067b:	jne    0x65030691
    6503067d:	call   0x65023e90
    65030682:	mov    r11,QWORD PTR [rsp+0x50]
    65030687:	mov    QWORD PTR [rsp+0x40],rax
    6503068c:	mov    rax,QWORD PTR [rsp+0x48]
    65030691:	cmp    rax,QWORD PTR [rip+0x13088]        # 0x65043720
    65030698:	je     0x650306b8
    6503069a:	mov    eax,DWORD PTR [r11+0xc8]
    650306a1:	test   DWORD PTR [rip+0x13181],eax        # 0x65043828
    650306a7:	jne    0x650306b8
    650306a9:	call   0x65023340
    650306ae:	mov    r11,QWORD PTR [rsp+0x50]
    650306b3:	mov    QWORD PTR [rsp+0x48],rax
    650306b8:	test   BYTE PTR [r11+0xc8],0x2
    650306c0:	jne    0x650306e4
    650306c2:	or     DWORD PTR [r11+0xc8],0x2
    650306ca:	mov    BYTE PTR [rsp+0x58],0x1
    650306cf:	jmp    0x650306e4
    650306d1:	mov    rax,QWORD PTR [r8]
    650306d4:	lea    rcx,[rsp+0x40]
    650306d9:	mov    QWORD PTR [rcx],rax
    650306dc:	mov    rax,QWORD PTR [r8+0x8]
    650306e0:	mov    QWORD PTR [rcx+0x8],rax
    650306e4:	lea    rax,[rsp+0x40]
    650306e9:	lea    rdx,[rsp+0x60]
    650306ee:	lea    rcx,[rsp+0x68]
    650306f3:	mov    QWORD PTR [rsp+0x38],rax
    650306f8:	xor    eax,eax
    650306fa:	xor    r9d,r9d
    650306fd:	mov    DWORD PTR [rsp+0x30],eax
    65030701:	mov    DWORD PTR [rsp+0x28],eax
    65030705:	mov    r8,rbx
    65030708:	mov    DWORD PTR [rsp+0x20],eax
    6503070c:	call   0x650317b0
    65030711:	lea    rcx,[rsp+0x68]
    65030716:	mov    rdx,rdi
    65030719:	mov    ebx,eax
    6503071b:	call   0x650310f0
    65030720:	test   bl,0x3
    65030723:	jne    0x65030763
    65030725:	cmp    eax,0x1
    65030728:	jne    0x65030744
    6503072a:	cmp    BYTE PTR [rsp+0x58],0x0
    6503072f:	je     0x6503073d
    65030731:	mov    rax,QWORD PTR [rsp+0x50]
    65030736:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6503073d:	mov    eax,0x3
    65030742:	jmp    0x65030782
    65030744:	cmp    eax,0x2
    65030747:	jne    0x6503076d
    65030749:	cmp    BYTE PTR [rsp+0x58],0x0
    6503074e:	je     0x6503075c
    65030750:	mov    rax,QWORD PTR [rsp+0x50]
    65030755:	and    DWORD PTR [rax+0xc8],0xfffffffd
    6503075c:	mov    eax,0x4
    65030761:	jmp    0x65030782
    65030763:	test   bl,0x1
    65030766:	jne    0x65030749
    65030768:	test   bl,0x2
    6503076b:	jne    0x6503072a
    6503076d:	cmp    BYTE PTR [rsp+0x58],0x0
    65030772:	je     0x65030780
    65030774:	mov    rax,QWORD PTR [rsp+0x50]
    65030779:	and    DWORD PTR [rax+0xc8],0xfffffffd
    65030780:	xor    eax,eax
    65030782:	mov    rcx,QWORD PTR [rsp+0x78]
    65030787:	xor    rcx,rsp
    6503078a:	call   0x6501e650
    6503078f:	mov    rbx,QWORD PTR [rsp+0xa8]
    65030797:	add    rsp,0x80
    6503079e:	pop    rdi
    6503079f:	ret    
    650307a0:	rex push rdi
    650307a2:	sub    rsp,0x30
    650307a6:	test   rcx,rcx
    650307a9:	mov    rdi,QWORD PTR [r9+0x10]
    650307ad:	mov    r10,rcx
    650307b0:	jne    0x650307e0
    650307b2:	call   0x65020420
    650307b7:	xor    r9d,r9d
    650307ba:	xor    r8d,r8d
    650307bd:	xor    edx,edx
    650307bf:	xor    ecx,ecx
    650307c1:	mov    QWORD PTR [rsp+0x20],0x0
    650307ca:	mov    DWORD PTR [rax],0x16
    650307d0:	call   0x6501d9c0
    650307d5:	mov    eax,0x16
    650307da:	add    rsp,0x30
    650307de:	pop    rdi
    650307df:	ret    
    650307e0:	test   rdx,rdx
    650307e3:	je     0x650307b2
    650307e5:	xor    eax,eax
    650307e7:	test   r8d,r8d
    650307ea:	mov    BYTE PTR [rcx],0x0
    650307ed:	cmovg  eax,r8d
    650307f1:	add    eax,0x1
    650307f4:	cdqe   
    650307f6:	cmp    rdx,rax
    650307f9:	ja     0x65030829
    650307fb:	call   0x65020420
    65030800:	xor    r9d,r9d
    65030803:	xor    r8d,r8d
    65030806:	xor    edx,edx
    65030808:	xor    ecx,ecx
    6503080a:	mov    QWORD PTR [rsp+0x20],0x0
    65030813:	mov    DWORD PTR [rax],0x22
    65030819:	call   0x6501d9c0
    6503081e:	mov    eax,0x22
    65030823:	add    rsp,0x30
    65030827:	pop    rdi
    65030828:	ret    
    65030829:	test   r8d,r8d
    6503082c:	mov    BYTE PTR [rcx],0x30
    6503082f:	lea    rax,[rcx+0x1]
    65030833:	jle    0x65030859
    65030835:	movzx  ecx,BYTE PTR [rdi]
    65030838:	test   cl,cl
    6503083a:	je     0x65030845
    6503083c:	movsx  edx,cl
    6503083f:	add    rdi,0x1
    65030843:	jmp    0x6503084a
    65030845:	mov    edx,0x30
    6503084a:	sub    r8d,0x1
    6503084e:	mov    BYTE PTR [rax],dl
    65030850:	add    rax,0x1
    65030854:	test   r8d,r8d
    65030857:	jg     0x65030835
    65030859:	test   r8d,r8d
    6503085c:	mov    BYTE PTR [rax],0x0
    6503085f:	js     0x6503087f
    65030861:	cmp    BYTE PTR [rdi],0x35
    65030864:	jl     0x6503087f
    65030866:	sub    rax,0x1
    6503086a:	cmp    BYTE PTR [rax],0x39
    6503086d:	jne    0x6503087c
    6503086f:	nop
    65030870:	mov    BYTE PTR [rax],0x30
    65030873:	sub    rax,0x1
    65030877:	cmp    BYTE PTR [rax],0x39
    6503087a:	je     0x65030870
    6503087c:	add    BYTE PTR [rax],0x1
    6503087f:	cmp    BYTE PTR [r10],0x31
    65030883:	jne    0x65030892
    65030885:	add    DWORD PTR [r9+0x4],0x1
    6503088a:	xor    eax,eax
    6503088c:	add    rsp,0x30
    65030890:	pop    rdi
    65030891:	ret    
    65030892:	or     rcx,0xffffffffffffffff
    65030896:	lea    rdi,[r10+0x1]
    6503089a:	xor    eax,eax
    6503089c:	repnz scas al,BYTE PTR es:[rdi]
    6503089e:	lea    rdx,[r10+0x1]
    650308a2:	not    rcx
    650308a5:	mov    r8,rcx
    650308a8:	mov    rcx,r10
    650308ab:	call   0x6501fd30
    650308b0:	xor    eax,eax
    650308b2:	add    rsp,0x30
    650308b6:	pop    rdi
    650308b7:	ret    
    650308b8:	int3   
    650308b9:	int3   
    650308ba:	int3   
    650308bb:	int3   
    650308bc:	int3   
    650308bd:	int3   
    650308be:	int3   
    650308bf:	int3   
    650308c0:	rex push rbx
    650308c2:	push   rbp
    650308c3:	push   rsi
    650308c4:	sub    rsp,0x80
    650308cb:	mov    rax,QWORD PTR [rip+0x1284e]        # 0x65043120
    650308d2:	xor    rax,rsp
    650308d5:	mov    QWORD PTR [rsp+0x70],rax
    650308da:	mov    rbp,r9
    650308dd:	mov    rsi,r8
    650308e0:	mov    r9,rcx
    650308e3:	shr    r9,0x30
    650308e7:	mov    rax,rcx
    650308ea:	mov    rbx,rdx
    650308ed:	movzx  r8d,r9w
    650308f1:	shr    rax,0x20
    650308f5:	and    r9w,0x8000
    650308fb:	shr    r8w,0x4
    65030900:	and    eax,0xfffff
    65030905:	mov    r10d,0x80000000
    6503090b:	and    r8w,0x7ff
    65030911:	movzx  edx,r8w
    65030915:	test   edx,edx
    65030917:	je     0x65030930
    65030919:	cmp    edx,0x7ff
    6503091f:	je     0x65030929
    65030921:	add    r8w,0x3c00
    65030927:	jmp    0x6503094b
    65030929:	mov    r8w,0x7fff
    6503092e:	jmp    0x6503094b
    65030930:	test   eax,eax
    65030932:	jne    0x65030942
    65030934:	test   ecx,ecx
    65030936:	jne    0x65030942
    65030938:	mov    DWORD PTR [rsp+0x44],ecx
    6503093c:	mov    DWORD PTR [rsp+0x40],ecx
    65030940:	jmp    0x65030993
    65030942:	add    r8w,0x3c01
    65030948:	xor    r10d,r10d
    6503094b:	mov    edx,ecx
    6503094d:	shl    eax,0xb
    65030950:	shl    ecx,0xb
    65030953:	shr    edx,0x15
    65030956:	mov    DWORD PTR [rsp+0x40],ecx
    6503095a:	or     edx,eax
    6503095c:	or     edx,r10d
    6503095f:	bt     edx,0x1f
    65030963:	mov    DWORD PTR [rsp+0x44],edx
    65030967:	jb     0x6503098f
    65030969:	data16 xchg ax,ax
    6503096c:	data16 data16 xchg ax,ax
    65030970:	mov    eax,ecx
    65030972:	add    edx,edx
    65030974:	add    ecx,ecx
    65030976:	shr    eax,0x1f
    65030979:	add    r8w,0xffff
    6503097f:	mov    DWORD PTR [rsp+0x40],ecx
    65030983:	or     edx,eax
    65030985:	bt     edx,0x1f
    65030989:	jae    0x65030970
    6503098b:	mov    DWORD PTR [rsp+0x44],edx
    6503098f:	or     r9w,r8w
    65030993:	mov    WORD PTR [rsp+0x48],r9w
    65030999:	lea    rdx,[rsp+0x30]
    6503099e:	lea    rcx,[rsp+0x40]
    650309a3:	mov    rax,QWORD PTR [rcx]
    650309a6:	xor    r8d,r8d
    650309a9:	lea    r9,[rsp+0x50]
    650309ae:	mov    QWORD PTR [rdx],rax
    650309b1:	movzx  eax,WORD PTR [rcx+0x8]
    650309b5:	lea    rcx,[rsp+0x30]
    650309ba:	mov    WORD PTR [rdx+0x8],ax
    650309be:	lea    edx,[r8+0x11]
    650309c2:	call   0x650321e0
    650309c7:	lea    r8,[rsp+0x54]
    650309cc:	mov    rdx,rbp
    650309cf:	mov    DWORD PTR [rbx+0x8],eax
    650309d2:	movsx  eax,BYTE PTR [rsp+0x52]
    650309d7:	mov    rcx,rsi
    650309da:	mov    DWORD PTR [rbx],eax
    650309dc:	movsx  eax,WORD PTR [rsp+0x50]
    650309e1:	mov    DWORD PTR [rbx+0x4],eax
    650309e4:	call   0x65020320
    650309e9:	test   eax,eax
    650309eb:	je     0x65030a05
    650309ed:	xor    r9d,r9d
    650309f0:	xor    r8d,r8d
    650309f3:	xor    edx,edx
    650309f5:	xor    ecx,ecx
    650309f7:	mov    QWORD PTR [rsp+0x20],0x0
    65030a00:	call   0x6501d920
    65030a05:	mov    rax,rbx
    65030a08:	mov    QWORD PTR [rbx+0x10],rsi
    65030a0c:	mov    rcx,QWORD PTR [rsp+0x70]
    65030a11:	xor    rcx,rsp
    65030a14:	call   0x6501e650
    65030a19:	add    rsp,0x80
    65030a20:	pop    rsi
    65030a21:	pop    rbp
    65030a22:	pop    rbx
    65030a23:	ret    
    65030a24:	int3   
    65030a25:	int3   
    65030a26:	int3   
    65030a27:	int3   
    65030a28:	int3   
    65030a29:	int3   
    65030a2a:	int3   
    65030a2b:	int3   
    65030a2c:	int3   
    65030a2d:	int3   
    65030a2e:	int3   
    65030a2f:	int3   
    65030a30:	mov    rax,rsp
    65030a33:	mov    QWORD PTR [rax+0x10],rdx
    65030a37:	push   rdi
    65030a38:	sub    rsp,0x70
    65030a3c:	mov    QWORD PTR [rax+0x20],rbx
    65030a40:	mov    QWORD PTR [rax-0x18],rsi
    65030a44:	mov    QWORD PTR [rax-0x38],r15
    65030a48:	movzx  eax,WORD PTR [rcx+0xa]
    65030a4c:	mov    r9d,0x1f
    65030a52:	mov    esi,eax
    65030a54:	and    eax,0x8000
    65030a59:	mov    DWORD PTR [rsp+0x80],eax
    65030a60:	mov    eax,DWORD PTR [rcx+0x6]
    65030a63:	and    esi,0x7fff
    65030a69:	mov    DWORD PTR [rsp+0x20],eax
    65030a6d:	mov    eax,DWORD PTR [rcx+0x2]
    65030a70:	sub    esi,0x3fff
    65030a76:	mov    DWORD PTR [rsp+0x24],eax
    65030a7a:	movzx  eax,WORD PTR [rcx]
    65030a7d:	shl    eax,0x10
    65030a80:	cmp    esi,0xffffc001
    65030a86:	mov    DWORD PTR [rsp+0x28],eax
    65030a8a:	jne    0x65030ac6
    65030a8c:	xor    edi,edi
    65030a8e:	mov    r9d,edi
    65030a91:	mov    rax,rdi
    65030a94:	cmp    DWORD PTR [rsp+rax*4+0x20],edi
    65030a98:	jne    0x65030aaf
    65030a9a:	add    rax,0x1
    65030a9e:	cmp    rax,0x3
    65030aa2:	jl     0x65030a94
    65030aa4:	mov    r15d,0x1f
    65030aaa:	jmp    0x6503107d
    65030aaf:	mov    QWORD PTR [rsp+0x20],rdi
    65030ab4:	mov    DWORD PTR [rsp+0x28],edi
    65030ab8:	mov    edi,0x2
    65030abd:	lea    r15d,[rdi+0x1d]
    65030ac1:	jmp    0x6503107d
    65030ac6:	mov    QWORD PTR [rsp+0x68],rbp
    65030acb:	lea    rcx,[rsp+0x20]
    65030ad0:	mov    QWORD PTR [rsp+0x58],r12
    65030ad5:	mov    rax,QWORD PTR [rcx]
    65030ad8:	mov    QWORD PTR [rsp+0x50],r13
    65030add:	mov    QWORD PTR [rsp+0x48],r14
    65030ae2:	mov    r14d,DWORD PTR [rip+0x13b6f]        # 0x65044658
    65030ae9:	mov    QWORD PTR [rsp+0x30],rax
    65030aee:	mov    eax,DWORD PTR [rcx+0x8]
    65030af1:	mov    DWORD PTR [rsp+0x38],eax
    65030af5:	xor    edi,edi
    65030af7:	mov    eax,r14d
    65030afa:	cdq    
    65030afb:	mov    r11d,r9d
    65030afe:	or     ebp,0xffffffff
    65030b01:	and    edx,r9d
    65030b04:	mov    r15d,esi
    65030b07:	mov    ebx,edi
    65030b09:	add    eax,edx
    65030b0b:	mov    r10d,eax
    65030b0e:	and    eax,r9d
    65030b11:	sar    r10d,0x5
    65030b15:	sub    eax,edx
    65030b17:	movsxd r12,r10d
    65030b1a:	sub    r11d,eax
    65030b1d:	mov    ecx,DWORD PTR [rsp+r12*4+0x20]
    65030b22:	bt     ecx,r11d
    65030b26:	jae    0x65030bd9
    65030b2c:	mov    ecx,r11d
    65030b2f:	mov    eax,ebp
    65030b31:	movsxd rdx,r10d
    65030b34:	shl    eax,cl
    65030b36:	not    eax
    65030b38:	test   DWORD PTR [rsp+rdx*4+0x20],eax
    65030b3c:	jne    0x65030b62
    65030b3e:	lea    eax,[r10+0x1]
    65030b42:	movsxd rcx,eax
    65030b45:	cmp    rcx,0x3
    65030b49:	jge    0x65030bd9
    65030b4f:	nop
    65030b50:	cmp    DWORD PTR [rsp+rcx*4+0x20],ebx
    65030b54:	jne    0x65030b62
    65030b56:	add    rcx,0x1
    65030b5a:	cmp    rcx,0x3
    65030b5e:	jl     0x65030b50
    65030b60:	jmp    0x65030bd9
    65030b62:	mov    ecx,r9d
    65030b65:	lea    eax,[r14-0x1]
    65030b69:	cdq    
    65030b6a:	and    edx,r9d
    65030b6d:	add    eax,edx
    65030b6f:	mov    r8d,eax
    65030b72:	and    eax,r9d
    65030b75:	sub    eax,edx
    65030b77:	sar    r8d,0x5
    65030b7b:	mov    edx,0x1
    65030b80:	sub    ecx,eax
    65030b82:	movsxd r9,r8d
    65030b85:	mov    eax,DWORD PTR [rsp+r9*4+0x20]
    65030b8a:	shl    edx,cl
    65030b8c:	lea    ecx,[rax+rdx*1]
    65030b8f:	cmp    ecx,eax
    65030b91:	jb     0x65030b97
    65030b93:	cmp    ecx,edx
    65030b95:	jae    0x65030b9c
    65030b97:	mov    ebx,0x1
    65030b9c:	lea    eax,[r8-0x1]
    65030ba0:	mov    DWORD PTR [rsp+r9*4+0x20],ecx
    65030ba5:	test   eax,eax
    65030ba7:	movsxd rdx,eax
    65030baa:	js     0x65030bd9
    65030bac:	data16 data16 xchg ax,ax
    65030bb0:	test   ebx,ebx
    65030bb2:	je     0x65030bd9
    65030bb4:	mov    eax,DWORD PTR [rsp+rdx*4+0x20]
    65030bb8:	mov    ebx,edi
    65030bba:	lea    r8d,[rax+0x1]
    65030bbe:	cmp    r8d,eax
    65030bc1:	jb     0x65030bc9
    65030bc3:	cmp    r8d,0x1
    65030bc7:	jae    0x65030bce
    65030bc9:	mov    ebx,0x1
    65030bce:	mov    DWORD PTR [rsp+rdx*4+0x20],r8d
    65030bd3:	sub    rdx,0x1
    65030bd7:	jns    0x65030bb0
    65030bd9:	mov    ecx,r11d
    65030bdc:	mov    eax,ebp
    65030bde:	mov    r13d,0x3
    65030be4:	shl    eax,cl
    65030be6:	and    DWORD PTR [rsp+r12*4+0x20],eax
    65030beb:	lea    eax,[r10+0x1]
    65030bef:	movsxd rdx,eax
    65030bf2:	cmp    rdx,r13
    65030bf5:	jge    0x65030c0d
    65030bf7:	lea    rcx,[rsp+rdx*4+0x20]
    65030bfc:	mov    r8,r13
    65030bff:	sub    r8,rdx
    65030c02:	xor    edx,edx
    65030c04:	shl    r8,0x2
    65030c08:	call   0x6501efa0
    65030c0d:	test   ebx,ebx
    65030c0f:	je     0x65030c14
    65030c11:	add    esi,0x1
    65030c14:	mov    edx,DWORD PTR [rip+0x13a3a]        # 0x65044654
    65030c1a:	mov    eax,edx
    65030c1c:	sub    eax,r14d
    65030c1f:	cmp    esi,eax
    65030c21:	jge    0x65030c45
    65030c23:	mov    rdx,QWORD PTR [rsp+0x88]
    65030c2b:	mov    QWORD PTR [rsp+0x20],rdi
    65030c30:	mov    DWORD PTR [rsp+0x28],edi
    65030c34:	mov    r9d,edi
    65030c37:	mov    edi,0x2
    65030c3c:	lea    r15d,[rdi+0x1d]
    65030c40:	jmp    0x65031069
    65030c45:	cmp    esi,edx
    65030c47:	jg     0x65030ecd
    65030c4d:	sub    edx,r15d
    65030c50:	lea    rax,[rsp+0x30]
    65030c55:	mov    r10d,ebp
    65030c58:	mov    rcx,QWORD PTR [rax]
    65030c5b:	mov    esi,0x20
    65030c60:	mov    r9d,edi
    65030c63:	mov    QWORD PTR [rsp+0x20],rcx
    65030c68:	mov    ecx,DWORD PTR [rax+0x8]
    65030c6b:	mov    eax,edx
    65030c6d:	cdq    
    65030c6e:	mov    DWORD PTR [rsp+0x28],ecx
    65030c72:	mov    ebx,esi
    65030c74:	and    edx,0x1f
    65030c77:	mov    r8,rdi
    65030c7a:	add    eax,edx
    65030c7c:	mov    r12d,eax
    65030c7f:	and    eax,0x1f
    65030c82:	sub    eax,edx
    65030c84:	sar    r12d,0x5
    65030c88:	mov    ecx,eax
    65030c8a:	mov    r11d,eax
    65030c8d:	shl    r10d,cl
    65030c90:	sub    ebx,eax
    65030c92:	not    r10d
    65030c95:	data16 data16 xchg ax,ax
    65030c99:	data16 xchg ax,ax
    65030c9c:	data16 data16 xchg ax,ax
    65030ca0:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65030ca5:	mov    ecx,r11d
    65030ca8:	add    r8,0x1
    65030cac:	mov    eax,edx
    65030cae:	shr    edx,cl
    65030cb0:	mov    ecx,ebx
    65030cb2:	or     edx,r9d
    65030cb5:	and    eax,r10d
    65030cb8:	mov    DWORD PTR [rsp+0x90],eax
    65030cbf:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    65030cc4:	mov    r9d,DWORD PTR [rsp+0x90]
    65030ccc:	shl    r9d,cl
    65030ccf:	cmp    r8,r13
    65030cd2:	jl     0x65030ca0
    65030cd4:	movsxd r8,r12d
    65030cd7:	lea    rdx,[rsp+0x28]
    65030cdc:	mov    ebx,0x2
    65030ce1:	lea    rax,[r8*4+0x0]
    65030ce9:	mov    rcx,rbx
    65030cec:	sub    rdx,rax
    65030cef:	nop
    65030cf0:	cmp    rcx,r8
    65030cf3:	jl     0x65030cfd
    65030cf5:	mov    eax,DWORD PTR [rdx]
    65030cf7:	mov    DWORD PTR [rsp+rcx*4+0x20],eax
    65030cfb:	jmp    0x65030d01
    65030cfd:	mov    DWORD PTR [rsp+rcx*4+0x20],edi
    65030d01:	sub    rdx,0x4
    65030d05:	sub    rcx,0x1
    65030d09:	jns    0x65030cf0
    65030d0b:	mov    r8d,DWORD PTR [rip+0x13946]        # 0x65044658
    65030d12:	mov    r15d,0x1f
    65030d18:	mov    eax,r8d
    65030d1b:	mov    r12d,r15d
    65030d1e:	cdq    
    65030d1f:	and    edx,0x1f
    65030d22:	add    eax,edx
    65030d24:	mov    r11d,eax
    65030d27:	and    eax,0x1f
    65030d2a:	sar    r11d,0x5
    65030d2e:	sub    eax,edx
    65030d30:	movsxd r14,r11d
    65030d33:	sub    r12d,eax
    65030d36:	mov    ecx,DWORD PTR [rsp+r14*4+0x20]
    65030d3b:	bt     ecx,r12d
    65030d3f:	jae    0x65030df1
    65030d45:	mov    ecx,r12d
    65030d48:	mov    eax,ebp
    65030d4a:	movsxd rdx,r11d
    65030d4d:	shl    eax,cl
    65030d4f:	not    eax
    65030d51:	test   DWORD PTR [rsp+rdx*4+0x20],eax
    65030d55:	jne    0x65030d78
    65030d57:	lea    eax,[r11+0x1]
    65030d5b:	movsxd rcx,eax
    65030d5e:	cmp    rcx,r13
    65030d61:	jge    0x65030df1
    65030d67:	cmp    DWORD PTR [rsp+rcx*4+0x20],edi
    65030d6b:	jne    0x65030d78
    65030d6d:	add    rcx,0x1
    65030d71:	cmp    rcx,r13
    65030d74:	jl     0x65030d67
    65030d76:	jmp    0x65030df1
    65030d78:	lea    eax,[r8-0x1]
    65030d7c:	mov    ecx,r15d
    65030d7f:	mov    r8d,0x1
    65030d85:	cdq    
    65030d86:	and    edx,r15d
    65030d89:	add    eax,edx
    65030d8b:	mov    r9d,eax
    65030d8e:	and    eax,r15d
    65030d91:	sub    eax,edx
    65030d93:	sar    r9d,0x5
    65030d97:	sub    ecx,eax
    65030d99:	movsxd r10,r9d
    65030d9c:	mov    eax,DWORD PTR [rsp+r10*4+0x20]
    65030da1:	shl    r8d,cl
    65030da4:	mov    ecx,edi
    65030da6:	lea    edx,[rax+r8*1]
    65030daa:	cmp    edx,eax
    65030dac:	jb     0x65030db3
    65030dae:	cmp    edx,r8d
    65030db1:	jae    0x65030db8
    65030db3:	mov    ecx,0x1
    65030db8:	lea    eax,[r9-0x1]
    65030dbc:	mov    DWORD PTR [rsp+r10*4+0x20],edx
    65030dc1:	test   eax,eax
    65030dc3:	movsxd rdx,eax
    65030dc6:	js     0x65030df1
    65030dc8:	test   ecx,ecx
    65030dca:	je     0x65030df1
    65030dcc:	mov    eax,DWORD PTR [rsp+rdx*4+0x20]
    65030dd0:	mov    ecx,edi
    65030dd2:	lea    r8d,[rax+0x1]
    65030dd6:	cmp    r8d,eax
    65030dd9:	jb     0x65030de1
    65030ddb:	cmp    r8d,0x1
    65030ddf:	jae    0x65030de6
    65030de1:	mov    ecx,0x1
    65030de6:	mov    DWORD PTR [rsp+rdx*4+0x20],r8d
    65030deb:	sub    rdx,0x1
    65030def:	jns    0x65030dc8
    65030df1:	mov    ecx,r12d
    65030df4:	mov    eax,ebp
    65030df6:	shl    eax,cl
    65030df8:	and    DWORD PTR [rsp+r14*4+0x20],eax
    65030dfd:	lea    eax,[r11+0x1]
    65030e01:	movsxd rdx,eax
    65030e04:	cmp    rdx,r13
    65030e07:	jge    0x65030e1f
    65030e09:	sub    r13,rdx
    65030e0c:	lea    rcx,[rsp+rdx*4+0x20]
    65030e11:	xor    edx,edx
    65030e13:	shl    r13,0x2
    65030e17:	mov    r8,r13
    65030e1a:	call   0x6501efa0
    65030e1f:	mov    eax,DWORD PTR [rip+0x13837]        # 0x6504465c
    65030e25:	mov    r9d,edi
    65030e28:	mov    r8,rdi
    65030e2b:	add    eax,0x1
    65030e2e:	cdq    
    65030e2f:	and    edx,r15d
    65030e32:	add    eax,edx
    65030e34:	mov    r11d,eax
    65030e37:	and    eax,r15d
    65030e3a:	sub    eax,edx
    65030e3c:	sar    r11d,0x5
    65030e40:	mov    ecx,eax
    65030e42:	mov    r10d,eax
    65030e45:	shl    ebp,cl
    65030e47:	sub    esi,eax
    65030e49:	not    ebp
    65030e4b:	xchg   ax,ax
    65030e4d:	data16 xchg ax,ax
    65030e50:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65030e55:	mov    ecx,r10d
    65030e58:	mov    eax,ebp
    65030e5a:	and    eax,edx
    65030e5c:	shr    edx,cl
    65030e5e:	mov    ecx,esi
    65030e60:	or     edx,r9d
    65030e63:	mov    DWORD PTR [rsp+0x90],eax
    65030e6a:	add    r8,0x1
    65030e6e:	mov    r9d,DWORD PTR [rsp+0x90]
    65030e76:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    65030e7b:	shl    r9d,cl
    65030e7e:	cmp    r8,0x3
    65030e82:	jl     0x65030e50
    65030e84:	movsxd r8,r11d
    65030e87:	lea    rdx,[rsp+0x28]
    65030e8c:	mov    rcx,rbx
    65030e8f:	lea    rax,[r8*4+0x0]
    65030e97:	sub    rdx,rax
    65030e9a:	data16 xchg ax,ax
    65030e9d:	data16 xchg ax,ax
    65030ea0:	cmp    rcx,r8
    65030ea3:	jl     0x65030ead
    65030ea5:	mov    eax,DWORD PTR [rdx]
    65030ea7:	mov    DWORD PTR [rsp+rcx*4+0x20],eax
    65030eab:	jmp    0x65030eb1
    65030ead:	mov    DWORD PTR [rsp+rcx*4+0x20],edi
    65030eb1:	sub    rdx,0x4
    65030eb5:	sub    rcx,0x1
    65030eb9:	jns    0x65030ea0
    65030ebb:	mov    rdx,QWORD PTR [rsp+0x88]
    65030ec3:	mov    r9d,edi
    65030ec6:	mov    edi,ebx
    65030ec8:	jmp    0x65031069
    65030ecd:	cmp    esi,DWORD PTR [rip+0x1377d]        # 0x65044650
    65030ed3:	jl     0x65030fb1
    65030ed9:	mov    eax,DWORD PTR [rip+0x1377d]        # 0x6504465c
    65030edf:	mov    esi,0x20
    65030ee4:	mov    QWORD PTR [rsp+0x20],rdi
    65030ee9:	bts    DWORD PTR [rsp+0x20],0x1f
    65030eef:	cdq    
    65030ef0:	mov    DWORD PTR [rsp+0x28],edi
    65030ef4:	and    edx,0x1f
    65030ef7:	mov    r9d,edi
    65030efa:	mov    r8,rdi
    65030efd:	add    eax,edx
    65030eff:	mov    r11d,eax
    65030f02:	and    eax,0x1f
    65030f05:	sub    eax,edx
    65030f07:	sar    r11d,0x5
    65030f0b:	mov    ecx,eax
    65030f0d:	mov    r10d,eax
    65030f10:	shl    ebp,cl
    65030f12:	sub    esi,eax
    65030f14:	not    ebp
    65030f16:	data16 data16 xchg ax,ax
    65030f1a:	data16 xchg ax,ax
    65030f1d:	data16 xchg ax,ax
    65030f20:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65030f25:	mov    ecx,r10d
    65030f28:	mov    eax,ebp
    65030f2a:	and    eax,edx
    65030f2c:	shr    edx,cl
    65030f2e:	mov    ecx,esi
    65030f30:	or     edx,r9d
    65030f33:	mov    DWORD PTR [rsp+0x90],eax
    65030f3a:	add    r8,0x1
    65030f3e:	mov    r9d,DWORD PTR [rsp+0x90]
    65030f46:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    65030f4b:	shl    r9d,cl
    65030f4e:	cmp    r8,r13
    65030f51:	jl     0x65030f20
    65030f53:	movsxd rdx,r11d
    65030f56:	lea    rcx,[rsp+0x28]
    65030f5b:	mov    ebx,0x2
    65030f60:	lea    rax,[rdx*4+0x0]
    65030f68:	sub    rcx,rax
    65030f6b:	xchg   ax,ax
    65030f6d:	data16 xchg ax,ax
    65030f70:	cmp    rbx,rdx
    65030f73:	jl     0x65030f7d
    65030f75:	mov    eax,DWORD PTR [rcx]
    65030f77:	mov    DWORD PTR [rsp+rbx*4+0x20],eax
    65030f7b:	jmp    0x65030f81
    65030f7d:	mov    DWORD PTR [rsp+rbx*4+0x20],edi
    65030f81:	sub    rcx,0x4
    65030f85:	sub    rbx,0x1
    65030f89:	jns    0x65030f70
    65030f8b:	mov    ecx,DWORD PTR [rip+0x136bf]        # 0x65044650
    65030f91:	mov    r9d,DWORD PTR [rip+0x136cc]        # 0x65044664
    65030f98:	mov    rdx,QWORD PTR [rsp+0x88]
    65030fa0:	mov    edi,0x1
    65030fa5:	add    r9d,ecx
    65030fa8:	lea    r15d,[rdi+0x1e]
    65030fac:	jmp    0x65031069
    65030fb1:	mov    eax,DWORD PTR [rip+0x136a5]        # 0x6504465c
    65030fb7:	mov    r9d,DWORD PTR [rip+0x136a6]        # 0x65044664
    65030fbe:	btr    DWORD PTR [rsp+0x20],0x1f
    65030fc4:	cdq    
    65030fc5:	add    r9d,esi
    65030fc8:	mov    esi,0x20
    65030fcd:	and    edx,0x1f
    65030fd0:	mov    r10d,edi
    65030fd3:	mov    r8,rdi
    65030fd6:	add    eax,edx
    65030fd8:	mov    r12d,eax
    65030fdb:	and    eax,0x1f
    65030fde:	sub    eax,edx
    65030fe0:	sar    r12d,0x5
    65030fe4:	mov    ecx,eax
    65030fe6:	mov    r11d,eax
    65030fe9:	shl    ebp,cl
    65030feb:	sub    esi,eax
    65030fed:	not    ebp
    65030fef:	nop
    65030ff0:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65030ff5:	mov    ecx,r11d
    65030ff8:	mov    eax,ebp
    65030ffa:	and    eax,edx
    65030ffc:	shr    edx,cl
    65030ffe:	mov    ecx,esi
    65031000:	or     edx,r10d
    65031003:	mov    DWORD PTR [rsp+0x90],eax
    6503100a:	add    r8,0x1
    6503100e:	mov    r10d,DWORD PTR [rsp+0x90]
    65031016:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    6503101b:	shl    r10d,cl
    6503101e:	cmp    r8,r13
    65031021:	jl     0x65030ff0
    65031023:	movsxd rdx,r12d
    65031026:	lea    rcx,[rsp+0x28]
    6503102b:	mov    ebx,0x2
    65031030:	lea    rax,[rdx*4+0x0]
    65031038:	sub    rcx,rax
    6503103b:	xchg   ax,ax
    6503103d:	data16 xchg ax,ax
    65031040:	cmp    rbx,rdx
    65031043:	jl     0x6503104d
    65031045:	mov    eax,DWORD PTR [rcx]
    65031047:	mov    DWORD PTR [rsp+rbx*4+0x20],eax
    6503104b:	jmp    0x65031051
    6503104d:	mov    DWORD PTR [rsp+rbx*4+0x20],edi
    65031051:	sub    rcx,0x4
    65031055:	sub    rbx,0x1
    65031059:	jns    0x65031040
    6503105b:	mov    rdx,QWORD PTR [rsp+0x88]
    65031063:	mov    r15d,0x1f
    65031069:	mov    r13,QWORD PTR [rsp+0x50]
    6503106e:	mov    r12,QWORD PTR [rsp+0x58]
    65031073:	mov    rbp,QWORD PTR [rsp+0x68]
    65031078:	mov    r14,QWORD PTR [rsp+0x48]
    6503107d:	sub    r15d,DWORD PTR [rip+0x135d8]        # 0x6504465c
    65031084:	mov    eax,DWORD PTR [rip+0x135d6]        # 0x65044660
    6503108a:	mov    rsi,QWORD PTR [rsp+0x60]
    6503108f:	mov    rbx,QWORD PTR [rsp+0x98]
    65031097:	movzx  ecx,r15b
    6503109b:	mov    r15,QWORD PTR [rsp+0x40]
    650310a0:	shl    r9d,cl
    650310a3:	neg    DWORD PTR [rsp+0x80]
    650310aa:	sbb    ecx,ecx
    650310ac:	and    ecx,0x80000000
    650310b2:	or     r9d,ecx
    650310b5:	or     r9d,DWORD PTR [rsp+0x20]
    650310ba:	cmp    eax,0x40
    650310bd:	jne    0x650310d1
    650310bf:	mov    ecx,DWORD PTR [rsp+0x24]
    650310c3:	mov    DWORD PTR [rdx+0x4],r9d
    650310c7:	mov    eax,edi
    650310c9:	mov    DWORD PTR [rdx],ecx
    650310cb:	add    rsp,0x70
    650310cf:	pop    rdi
    650310d0:	ret    
    650310d1:	cmp    eax,0x20
    650310d4:	jne    0x650310d9
    650310d6:	mov    DWORD PTR [rdx],r9d
    650310d9:	mov    eax,edi
    650310db:	add    rsp,0x70
    650310df:	pop    rdi
    650310e0:	ret    
    650310e1:	int3   
    650310e2:	int3   
    650310e3:	int3   
    650310e4:	int3   
    650310e5:	int3   
    650310e6:	int3   
    650310e7:	int3   
    650310e8:	int3   
    650310e9:	int3   
    650310ea:	int3   
    650310eb:	int3   
    650310ec:	int3   
    650310ed:	int3   
    650310ee:	int3   
    650310ef:	int3   
    650310f0:	mov    rax,rsp
    650310f3:	mov    QWORD PTR [rax+0x10],rdx
    650310f7:	push   rdi
    650310f8:	sub    rsp,0x70
    650310fc:	mov    QWORD PTR [rax+0x20],rbx
    65031100:	mov    QWORD PTR [rax-0x18],rsi
    65031104:	mov    QWORD PTR [rax-0x38],r15
    65031108:	movzx  eax,WORD PTR [rcx+0xa]
    6503110c:	mov    r9d,0x1f
    65031112:	mov    esi,eax
    65031114:	and    eax,0x8000
    65031119:	mov    DWORD PTR [rsp+0x80],eax
    65031120:	mov    eax,DWORD PTR [rcx+0x6]
    65031123:	and    esi,0x7fff
    65031129:	mov    DWORD PTR [rsp+0x20],eax
    6503112d:	mov    eax,DWORD PTR [rcx+0x2]
    65031130:	sub    esi,0x3fff
    65031136:	mov    DWORD PTR [rsp+0x24],eax
    6503113a:	movzx  eax,WORD PTR [rcx]
    6503113d:	shl    eax,0x10
    65031140:	cmp    esi,0xffffc001
    65031146:	mov    DWORD PTR [rsp+0x28],eax
    6503114a:	jne    0x65031186
    6503114c:	xor    edi,edi
    6503114e:	mov    r9d,edi
    65031151:	mov    rax,rdi
    65031154:	cmp    DWORD PTR [rsp+rax*4+0x20],edi
    65031158:	jne    0x6503116f
    6503115a:	add    rax,0x1
    6503115e:	cmp    rax,0x3
    65031162:	jl     0x65031154
    65031164:	mov    r15d,0x1f
    6503116a:	jmp    0x6503173d
    6503116f:	mov    QWORD PTR [rsp+0x20],rdi
    65031174:	mov    DWORD PTR [rsp+0x28],edi
    65031178:	mov    edi,0x2
    6503117d:	lea    r15d,[rdi+0x1d]
    65031181:	jmp    0x6503173d
    65031186:	mov    QWORD PTR [rsp+0x68],rbp
    6503118b:	lea    rcx,[rsp+0x20]
    65031190:	mov    QWORD PTR [rsp+0x58],r12
    65031195:	mov    rax,QWORD PTR [rcx]
    65031198:	mov    QWORD PTR [rsp+0x50],r13
    6503119d:	mov    QWORD PTR [rsp+0x48],r14
    650311a2:	mov    r14d,DWORD PTR [rip+0x134c7]        # 0x65044670
    650311a9:	mov    QWORD PTR [rsp+0x30],rax
    650311ae:	mov    eax,DWORD PTR [rcx+0x8]
    650311b1:	mov    DWORD PTR [rsp+0x38],eax
    650311b5:	xor    edi,edi
    650311b7:	mov    eax,r14d
    650311ba:	cdq    
    650311bb:	mov    r11d,r9d
    650311be:	or     ebp,0xffffffff
    650311c1:	and    edx,r9d
    650311c4:	mov    r15d,esi
    650311c7:	mov    ebx,edi
    650311c9:	add    eax,edx
    650311cb:	mov    r10d,eax
    650311ce:	and    eax,r9d
    650311d1:	sar    r10d,0x5
    650311d5:	sub    eax,edx
    650311d7:	movsxd r12,r10d
    650311da:	sub    r11d,eax
    650311dd:	mov    ecx,DWORD PTR [rsp+r12*4+0x20]
    650311e2:	bt     ecx,r11d
    650311e6:	jae    0x65031299
    650311ec:	mov    ecx,r11d
    650311ef:	mov    eax,ebp
    650311f1:	movsxd rdx,r10d
    650311f4:	shl    eax,cl
    650311f6:	not    eax
    650311f8:	test   DWORD PTR [rsp+rdx*4+0x20],eax
    650311fc:	jne    0x65031222
    650311fe:	lea    eax,[r10+0x1]
    65031202:	movsxd rcx,eax
    65031205:	cmp    rcx,0x3
    65031209:	jge    0x65031299
    6503120f:	nop
    65031210:	cmp    DWORD PTR [rsp+rcx*4+0x20],ebx
    65031214:	jne    0x65031222
    65031216:	add    rcx,0x1
    6503121a:	cmp    rcx,0x3
    6503121e:	jl     0x65031210
    65031220:	jmp    0x65031299
    65031222:	mov    ecx,r9d
    65031225:	lea    eax,[r14-0x1]
    65031229:	cdq    
    6503122a:	and    edx,r9d
    6503122d:	add    eax,edx
    6503122f:	mov    r8d,eax
    65031232:	and    eax,r9d
    65031235:	sub    eax,edx
    65031237:	sar    r8d,0x5
    6503123b:	mov    edx,0x1
    65031240:	sub    ecx,eax
    65031242:	movsxd r9,r8d
    65031245:	mov    eax,DWORD PTR [rsp+r9*4+0x20]
    6503124a:	shl    edx,cl
    6503124c:	lea    ecx,[rax+rdx*1]
    6503124f:	cmp    ecx,eax
    65031251:	jb     0x65031257
    65031253:	cmp    ecx,edx
    65031255:	jae    0x6503125c
    65031257:	mov    ebx,0x1
    6503125c:	lea    eax,[r8-0x1]
    65031260:	mov    DWORD PTR [rsp+r9*4+0x20],ecx
    65031265:	test   eax,eax
    65031267:	movsxd rdx,eax
    6503126a:	js     0x65031299
    6503126c:	data16 data16 xchg ax,ax
    65031270:	test   ebx,ebx
    65031272:	je     0x65031299
    65031274:	mov    eax,DWORD PTR [rsp+rdx*4+0x20]
    65031278:	mov    ebx,edi
    6503127a:	lea    r8d,[rax+0x1]
    6503127e:	cmp    r8d,eax
    65031281:	jb     0x65031289
    65031283:	cmp    r8d,0x1
    65031287:	jae    0x6503128e
    65031289:	mov    ebx,0x1
    6503128e:	mov    DWORD PTR [rsp+rdx*4+0x20],r8d
    65031293:	sub    rdx,0x1
    65031297:	jns    0x65031270
    65031299:	mov    ecx,r11d
    6503129c:	mov    eax,ebp
    6503129e:	mov    r13d,0x3
    650312a4:	shl    eax,cl
    650312a6:	and    DWORD PTR [rsp+r12*4+0x20],eax
    650312ab:	lea    eax,[r10+0x1]
    650312af:	movsxd rdx,eax
    650312b2:	cmp    rdx,r13
    650312b5:	jge    0x650312cd
    650312b7:	lea    rcx,[rsp+rdx*4+0x20]
    650312bc:	mov    r8,r13
    650312bf:	sub    r8,rdx
    650312c2:	xor    edx,edx
    650312c4:	shl    r8,0x2
    650312c8:	call   0x6501efa0
    650312cd:	test   ebx,ebx
    650312cf:	je     0x650312d4
    650312d1:	add    esi,0x1
    650312d4:	mov    edx,DWORD PTR [rip+0x13392]        # 0x6504466c
    650312da:	mov    eax,edx
    650312dc:	sub    eax,r14d
    650312df:	cmp    esi,eax
    650312e1:	jge    0x65031305
    650312e3:	mov    rdx,QWORD PTR [rsp+0x88]
    650312eb:	mov    QWORD PTR [rsp+0x20],rdi
    650312f0:	mov    DWORD PTR [rsp+0x28],edi
    650312f4:	mov    r9d,edi
    650312f7:	mov    edi,0x2
    650312fc:	lea    r15d,[rdi+0x1d]
    65031300:	jmp    0x65031729
    65031305:	cmp    esi,edx
    65031307:	jg     0x6503158d
    6503130d:	sub    edx,r15d
    65031310:	lea    rax,[rsp+0x30]
    65031315:	mov    r10d,ebp
    65031318:	mov    rcx,QWORD PTR [rax]
    6503131b:	mov    esi,0x20
    65031320:	mov    r9d,edi
    65031323:	mov    QWORD PTR [rsp+0x20],rcx
    65031328:	mov    ecx,DWORD PTR [rax+0x8]
    6503132b:	mov    eax,edx
    6503132d:	cdq    
    6503132e:	mov    DWORD PTR [rsp+0x28],ecx
    65031332:	mov    ebx,esi
    65031334:	and    edx,0x1f
    65031337:	mov    r8,rdi
    6503133a:	add    eax,edx
    6503133c:	mov    r12d,eax
    6503133f:	and    eax,0x1f
    65031342:	sub    eax,edx
    65031344:	sar    r12d,0x5
    65031348:	mov    ecx,eax
    6503134a:	mov    r11d,eax
    6503134d:	shl    r10d,cl
    65031350:	sub    ebx,eax
    65031352:	not    r10d
    65031355:	data16 data16 xchg ax,ax
    65031359:	data16 xchg ax,ax
    6503135c:	data16 data16 xchg ax,ax
    65031360:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65031365:	mov    ecx,r11d
    65031368:	add    r8,0x1
    6503136c:	mov    eax,edx
    6503136e:	shr    edx,cl
    65031370:	mov    ecx,ebx
    65031372:	or     edx,r9d
    65031375:	and    eax,r10d
    65031378:	mov    DWORD PTR [rsp+0x90],eax
    6503137f:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    65031384:	mov    r9d,DWORD PTR [rsp+0x90]
    6503138c:	shl    r9d,cl
    6503138f:	cmp    r8,r13
    65031392:	jl     0x65031360
    65031394:	movsxd r8,r12d
    65031397:	lea    rdx,[rsp+0x28]
    6503139c:	mov    ebx,0x2
    650313a1:	lea    rax,[r8*4+0x0]
    650313a9:	mov    rcx,rbx
    650313ac:	sub    rdx,rax
    650313af:	nop
    650313b0:	cmp    rcx,r8
    650313b3:	jl     0x650313bd
    650313b5:	mov    eax,DWORD PTR [rdx]
    650313b7:	mov    DWORD PTR [rsp+rcx*4+0x20],eax
    650313bb:	jmp    0x650313c1
    650313bd:	mov    DWORD PTR [rsp+rcx*4+0x20],edi
    650313c1:	sub    rdx,0x4
    650313c5:	sub    rcx,0x1
    650313c9:	jns    0x650313b0
    650313cb:	mov    r8d,DWORD PTR [rip+0x1329e]        # 0x65044670
    650313d2:	mov    r15d,0x1f
    650313d8:	mov    eax,r8d
    650313db:	mov    r12d,r15d
    650313de:	cdq    
    650313df:	and    edx,0x1f
    650313e2:	add    eax,edx
    650313e4:	mov    r11d,eax
    650313e7:	and    eax,0x1f
    650313ea:	sar    r11d,0x5
    650313ee:	sub    eax,edx
    650313f0:	movsxd r14,r11d
    650313f3:	sub    r12d,eax
    650313f6:	mov    ecx,DWORD PTR [rsp+r14*4+0x20]
    650313fb:	bt     ecx,r12d
    650313ff:	jae    0x650314b1
    65031405:	mov    ecx,r12d
    65031408:	mov    eax,ebp
    6503140a:	movsxd rdx,r11d
    6503140d:	shl    eax,cl
    6503140f:	not    eax
    65031411:	test   DWORD PTR [rsp+rdx*4+0x20],eax
    65031415:	jne    0x65031438
    65031417:	lea    eax,[r11+0x1]
    6503141b:	movsxd rcx,eax
    6503141e:	cmp    rcx,r13
    65031421:	jge    0x650314b1
    65031427:	cmp    DWORD PTR [rsp+rcx*4+0x20],edi
    6503142b:	jne    0x65031438
    6503142d:	add    rcx,0x1
    65031431:	cmp    rcx,r13
    65031434:	jl     0x65031427
    65031436:	jmp    0x650314b1
    65031438:	lea    eax,[r8-0x1]
    6503143c:	mov    ecx,r15d
    6503143f:	mov    r8d,0x1
    65031445:	cdq    
    65031446:	and    edx,r15d
    65031449:	add    eax,edx
    6503144b:	mov    r9d,eax
    6503144e:	and    eax,r15d
    65031451:	sub    eax,edx
    65031453:	sar    r9d,0x5
    65031457:	sub    ecx,eax
    65031459:	movsxd r10,r9d
    6503145c:	mov    eax,DWORD PTR [rsp+r10*4+0x20]
    65031461:	shl    r8d,cl
    65031464:	mov    ecx,edi
    65031466:	lea    edx,[rax+r8*1]
    6503146a:	cmp    edx,eax
    6503146c:	jb     0x65031473
    6503146e:	cmp    edx,r8d
    65031471:	jae    0x65031478
    65031473:	mov    ecx,0x1
    65031478:	lea    eax,[r9-0x1]
    6503147c:	mov    DWORD PTR [rsp+r10*4+0x20],edx
    65031481:	test   eax,eax
    65031483:	movsxd rdx,eax
    65031486:	js     0x650314b1
    65031488:	test   ecx,ecx
    6503148a:	je     0x650314b1
    6503148c:	mov    eax,DWORD PTR [rsp+rdx*4+0x20]
    65031490:	mov    ecx,edi
    65031492:	lea    r8d,[rax+0x1]
    65031496:	cmp    r8d,eax
    65031499:	jb     0x650314a1
    6503149b:	cmp    r8d,0x1
    6503149f:	jae    0x650314a6
    650314a1:	mov    ecx,0x1
    650314a6:	mov    DWORD PTR [rsp+rdx*4+0x20],r8d
    650314ab:	sub    rdx,0x1
    650314af:	jns    0x65031488
    650314b1:	mov    ecx,r12d
    650314b4:	mov    eax,ebp
    650314b6:	shl    eax,cl
    650314b8:	and    DWORD PTR [rsp+r14*4+0x20],eax
    650314bd:	lea    eax,[r11+0x1]
    650314c1:	movsxd rdx,eax
    650314c4:	cmp    rdx,r13
    650314c7:	jge    0x650314df
    650314c9:	sub    r13,rdx
    650314cc:	lea    rcx,[rsp+rdx*4+0x20]
    650314d1:	xor    edx,edx
    650314d3:	shl    r13,0x2
    650314d7:	mov    r8,r13
    650314da:	call   0x6501efa0
    650314df:	mov    eax,DWORD PTR [rip+0x1318f]        # 0x65044674
    650314e5:	mov    r9d,edi
    650314e8:	mov    r8,rdi
    650314eb:	add    eax,0x1
    650314ee:	cdq    
    650314ef:	and    edx,r15d
    650314f2:	add    eax,edx
    650314f4:	mov    r11d,eax
    650314f7:	and    eax,r15d
    650314fa:	sub    eax,edx
    650314fc:	sar    r11d,0x5
    65031500:	mov    ecx,eax
    65031502:	mov    r10d,eax
    65031505:	shl    ebp,cl
    65031507:	sub    esi,eax
    65031509:	not    ebp
    6503150b:	xchg   ax,ax
    6503150d:	data16 xchg ax,ax
    65031510:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    65031515:	mov    ecx,r10d
    65031518:	mov    eax,ebp
    6503151a:	and    eax,edx
    6503151c:	shr    edx,cl
    6503151e:	mov    ecx,esi
    65031520:	or     edx,r9d
    65031523:	mov    DWORD PTR [rsp+0x90],eax
    6503152a:	add    r8,0x1
    6503152e:	mov    r9d,DWORD PTR [rsp+0x90]
    65031536:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    6503153b:	shl    r9d,cl
    6503153e:	cmp    r8,0x3
    65031542:	jl     0x65031510
    65031544:	movsxd r8,r11d
    65031547:	lea    rdx,[rsp+0x28]
    6503154c:	mov    rcx,rbx
    6503154f:	lea    rax,[r8*4+0x0]
    65031557:	sub    rdx,rax
    6503155a:	data16 xchg ax,ax
    6503155d:	data16 xchg ax,ax
    65031560:	cmp    rcx,r8
    65031563:	jl     0x6503156d
    65031565:	mov    eax,DWORD PTR [rdx]
    65031567:	mov    DWORD PTR [rsp+rcx*4+0x20],eax
    6503156b:	jmp    0x65031571
    6503156d:	mov    DWORD PTR [rsp+rcx*4+0x20],edi
    65031571:	sub    rdx,0x4
    65031575:	sub    rcx,0x1
    65031579:	jns    0x65031560
    6503157b:	mov    rdx,QWORD PTR [rsp+0x88]
    65031583:	mov    r9d,edi
    65031586:	mov    edi,ebx
    65031588:	jmp    0x65031729
    6503158d:	cmp    esi,DWORD PTR [rip+0x130d5]        # 0x65044668
    65031593:	jl     0x65031671
    65031599:	mov    eax,DWORD PTR [rip+0x130d5]        # 0x65044674
    6503159f:	mov    esi,0x20
    650315a4:	mov    QWORD PTR [rsp+0x20],rdi
    650315a9:	bts    DWORD PTR [rsp+0x20],0x1f
    650315af:	cdq    
    650315b0:	mov    DWORD PTR [rsp+0x28],edi
    650315b4:	and    edx,0x1f
    650315b7:	mov    r9d,edi
    650315ba:	mov    r8,rdi
    650315bd:	add    eax,edx
    650315bf:	mov    r11d,eax
    650315c2:	and    eax,0x1f
    650315c5:	sub    eax,edx
    650315c7:	sar    r11d,0x5
    650315cb:	mov    ecx,eax
    650315cd:	mov    r10d,eax
    650315d0:	shl    ebp,cl
    650315d2:	sub    esi,eax
    650315d4:	not    ebp
    650315d6:	data16 data16 xchg ax,ax
    650315da:	data16 xchg ax,ax
    650315dd:	data16 xchg ax,ax
    650315e0:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    650315e5:	mov    ecx,r10d
    650315e8:	mov    eax,ebp
    650315ea:	and    eax,edx
    650315ec:	shr    edx,cl
    650315ee:	mov    ecx,esi
    650315f0:	or     edx,r9d
    650315f3:	mov    DWORD PTR [rsp+0x90],eax
    650315fa:	add    r8,0x1
    650315fe:	mov    r9d,DWORD PTR [rsp+0x90]
    65031606:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    6503160b:	shl    r9d,cl
    6503160e:	cmp    r8,r13
    65031611:	jl     0x650315e0
    65031613:	movsxd rdx,r11d
    65031616:	lea    rcx,[rsp+0x28]
    6503161b:	mov    ebx,0x2
    65031620:	lea    rax,[rdx*4+0x0]
    65031628:	sub    rcx,rax
    6503162b:	xchg   ax,ax
    6503162d:	data16 xchg ax,ax
    65031630:	cmp    rbx,rdx
    65031633:	jl     0x6503163d
    65031635:	mov    eax,DWORD PTR [rcx]
    65031637:	mov    DWORD PTR [rsp+rbx*4+0x20],eax
    6503163b:	jmp    0x65031641
    6503163d:	mov    DWORD PTR [rsp+rbx*4+0x20],edi
    65031641:	sub    rcx,0x4
    65031645:	sub    rbx,0x1
    65031649:	jns    0x65031630
    6503164b:	mov    ecx,DWORD PTR [rip+0x13017]        # 0x65044668
    65031651:	mov    r9d,DWORD PTR [rip+0x13024]        # 0x6504467c
    65031658:	mov    rdx,QWORD PTR [rsp+0x88]
    65031660:	mov    edi,0x1
    65031665:	add    r9d,ecx
    65031668:	lea    r15d,[rdi+0x1e]
    6503166c:	jmp    0x65031729
    65031671:	mov    eax,DWORD PTR [rip+0x12ffd]        # 0x65044674
    65031677:	mov    r9d,DWORD PTR [rip+0x12ffe]        # 0x6504467c
    6503167e:	btr    DWORD PTR [rsp+0x20],0x1f
    65031684:	cdq    
    65031685:	add    r9d,esi
    65031688:	mov    esi,0x20
    6503168d:	and    edx,0x1f
    65031690:	mov    r10d,edi
    65031693:	mov    r8,rdi
    65031696:	add    eax,edx
    65031698:	mov    r12d,eax
    6503169b:	and    eax,0x1f
    6503169e:	sub    eax,edx
    650316a0:	sar    r12d,0x5
    650316a4:	mov    ecx,eax
    650316a6:	mov    r11d,eax
    650316a9:	shl    ebp,cl
    650316ab:	sub    esi,eax
    650316ad:	not    ebp
    650316af:	nop
    650316b0:	mov    edx,DWORD PTR [rsp+r8*4+0x20]
    650316b5:	mov    ecx,r11d
    650316b8:	mov    eax,ebp
    650316ba:	and    eax,edx
    650316bc:	shr    edx,cl
    650316be:	mov    ecx,esi
    650316c0:	or     edx,r10d
    650316c3:	mov    DWORD PTR [rsp+0x90],eax
    650316ca:	add    r8,0x1
    650316ce:	mov    r10d,DWORD PTR [rsp+0x90]
    650316d6:	mov    DWORD PTR [rsp+r8*4+0x1c],edx
    650316db:	shl    r10d,cl
    650316de:	cmp    r8,r13
    650316e1:	jl     0x650316b0
    650316e3:	movsxd rdx,r12d
    650316e6:	lea    rcx,[rsp+0x28]
    650316eb:	mov    ebx,0x2
    650316f0:	lea    rax,[rdx*4+0x0]
    650316f8:	sub    rcx,rax
    650316fb:	xchg   ax,ax
    650316fd:	data16 xchg ax,ax
    65031700:	cmp    rbx,rdx
    65031703:	jl     0x6503170d
    65031705:	mov    eax,DWORD PTR [rcx]
    65031707:	mov    DWORD PTR [rsp+rbx*4+0x20],eax
    6503170b:	jmp    0x65031711
    6503170d:	mov    DWORD PTR [rsp+rbx*4+0x20],edi
    65031711:	sub    rcx,0x4
    65031715:	sub    rbx,0x1
    65031719:	jns    0x65031700
    6503171b:	mov    rdx,QWORD PTR [rsp+0x88]
    65031723:	mov    r15d,0x1f
    65031729:	mov    r13,QWORD PTR [rsp+0x50]
    6503172e:	mov    r12,QWORD PTR [rsp+0x58]
    65031733:	mov    rbp,QWORD PTR [rsp+0x68]
    65031738:	mov    r14,QWORD PTR [rsp+0x48]
    6503173d:	sub    r15d,DWORD PTR [rip+0x12f30]        # 0x65044674
    65031744:	mov    eax,DWORD PTR [rip+0x12f2e]        # 0x65044678
    6503174a:	mov    rsi,QWORD PTR [rsp+0x60]
    6503174f:	mov    rbx,QWORD PTR [rsp+0x98]
    65031757:	movzx  ecx,r15b
    6503175b:	mov    r15,QWORD PTR [rsp+0x40]
    65031760:	shl    r9d,cl
    65031763:	neg    DWORD PTR [rsp+0x80]
    6503176a:	sbb    ecx,ecx
    6503176c:	and    ecx,0x80000000
    65031772:	or     r9d,ecx
    65031775:	or     r9d,DWORD PTR [rsp+0x20]
    6503177a:	cmp    eax,0x40
    6503177d:	jne    0x65031791
    6503177f:	mov    ecx,DWORD PTR [rsp+0x24]
    65031783:	mov    DWORD PTR [rdx+0x4],r9d
    65031787:	mov    eax,edi
    65031789:	mov    DWORD PTR [rdx],ecx
    6503178b:	add    rsp,0x70
    6503178f:	pop    rdi
    65031790:	ret    
    65031791:	cmp    eax,0x20
    65031794:	jne    0x65031799
    65031796:	mov    DWORD PTR [rdx],r9d
    65031799:	mov    eax,edi
    6503179b:	add    rsp,0x70
    6503179f:	pop    rdi
    650317a0:	ret    
    650317a1:	int3   
    650317a2:	int3   
    650317a3:	int3   
    650317a4:	int3   
    650317a5:	int3   
    650317a6:	int3   
    650317a7:	int3   
    650317a8:	int3   
    650317a9:	int3   
    650317aa:	int3   
    650317ab:	int3   
    650317ac:	int3   
    650317ad:	int3   
    650317ae:	int3   
    650317af:	int3   
    650317b0:	mov    QWORD PTR [rsp+0x18],rbx
    650317b5:	push   rbp
    650317b6:	push   rsi
    650317b7:	push   rdi
    650317b8:	push   r12
    650317ba:	push   r13
    650317bc:	push   r14
    650317be:	push   r15
    650317c0:	sub    rsp,0xb0
    650317c7:	mov    rax,QWORD PTR [rip+0x11952]        # 0x65043120
    650317ce:	xor    rax,rsp
    650317d1:	mov    QWORD PTR [rsp+0xa0],rax
    650317d9:	mov    rsi,QWORD PTR [rsp+0x128]
    650317e1:	xor    edi,edi
    650317e3:	mov    DWORD PTR [rsp+0x38],r9d
    650317e8:	test   rsi,rsi
    650317eb:	mov    eax,edi
    650317ed:	mov    r13,rdx
    650317f0:	mov    QWORD PTR [rsp+0x48],rcx
    650317f5:	lea    r11,[rsp+0x80]
    650317fd:	mov    WORD PTR [rsp+0x34],0x0
    65031804:	lea    r14d,[rdi+0x1]
    65031808:	mov    r10d,edi
    6503180b:	mov    ebp,edi
    6503180d:	mov    r15d,edi
    65031810:	mov    r12d,edi
    65031813:	mov    DWORD PTR [rsp+0x30],eax
    65031817:	mov    ebx,edi
    65031819:	mov    r9d,edi
    6503181c:	jne    0x65031844
    6503181e:	call   0x65020420
    65031823:	xor    r9d,r9d
    65031826:	xor    r8d,r8d
    65031829:	xor    edx,edx
    6503182b:	xor    ecx,ecx
    6503182d:	mov    QWORD PTR [rsp+0x20],rdi
    65031832:	mov    DWORD PTR [rax],0x16
    65031838:	call   0x6501d9c0
    6503183d:	xor    eax,eax
    6503183f:	jmp    0x650320a4
    65031844:	mov    rdi,r8
    65031847:	movzx  eax,BYTE PTR [r8]
    6503184b:	cmp    al,0x20
    6503184d:	je     0x6503185b
    6503184f:	cmp    al,0x9
    65031851:	je     0x6503185b
    65031853:	cmp    al,0xa
    65031855:	je     0x6503185b
    65031857:	cmp    al,0xd
    65031859:	jne    0x65031866
    6503185b:	add    r8,r14
    6503185e:	jmp    0x65031847
    65031860:	mov    r9d,0x5
    65031866:	lea    rcx,[rip+0xfffffffffffce793]        # 0x65000000
    6503186d:	data16 xchg ax,ax
    65031870:	movzx  edx,BYTE PTR [r8]
    65031874:	add    r8,0x1
    65031878:	cmp    r9d,0xb
    6503187c:	ja     0x65031b75
    65031882:	movsxd rax,r9d
    65031885:	mov    ecx,DWORD PTR [rcx+rax*4+0x320d0]
    6503188c:	lea    rax,[rip+0xfffffffffffce76d]        # 0x65000000
    65031893:	add    rcx,rax
    65031896:	jmp    rcx
    65031898:	lea    eax,[rdx-0x31]
    6503189b:	cmp    al,0x8
    6503189d:	ja     0x650318ab
    6503189f:	mov    r9d,0x3
    650318a5:	sub    r8,0x1
    650318a9:	jmp    0x65031866
    650318ab:	mov    rax,QWORD PTR [rsi]
    650318ae:	mov    rcx,QWORD PTR [rax+0x128]
    650318b5:	mov    rax,QWORD PTR [rcx]
    650318b8:	cmp    dl,BYTE PTR [rax]
    650318ba:	je     0x65031860
    650318bc:	cmp    dl,0x2b
    650318bf:	je     0x650318e6
    650318c1:	cmp    dl,0x2d
    650318c4:	je     0x650318d7
    650318c6:	cmp    dl,0x30
    650318c9:	jne    0x65031bbb
    650318cf:	mov    r9d,0x1
    650318d5:	jmp    0x65031866
    650318d7:	mov    r9d,0x2
    650318dd:	mov    WORD PTR [rsp+0x34],0x8000
    650318e4:	jmp    0x65031866
    650318e6:	mov    r9d,0x2
    650318ec:	mov    WORD PTR [rsp+0x34],0x0
    650318f3:	jmp    0x65031866
    650318f8:	lea    eax,[rdx-0x31]
    650318fb:	mov    ebp,0x1
    65031900:	cmp    al,0x8
    65031902:	ja     0x65031910
    65031904:	lea    r9d,[rbp+0x2]
    65031908:	sub    r8,rbp
    6503190b:	jmp    0x65031866
    65031910:	mov    rax,QWORD PTR [rsi]
    65031913:	mov    rcx,QWORD PTR [rax+0x128]
    6503191a:	mov    rax,QWORD PTR [rcx]
    6503191d:	cmp    dl,BYTE PTR [rax]
    6503191f:	jne    0x6503192c
    65031921:	mov    r9d,0x4
    65031927:	jmp    0x65031866
    6503192c:	movsx  eax,dl
    6503192f:	add    eax,0xffffffd5
    65031932:	cmp    eax,0x3a
    65031935:	ja     0x65031bc1
    6503193b:	lea    rdx,[rip+0xfffffffffffce6be]        # 0x65000000
    65031942:	cdqe   
    65031944:	movzx  eax,BYTE PTR [rdx+rax*1+0x32110]
    6503194c:	mov    ecx,DWORD PTR [rdx+rax*4+0x32100]
    65031953:	add    rcx,rdx
    65031956:	jmp    rcx
    65031958:	mov    r9d,ebp
    6503195b:	jmp    0x65031866
    65031960:	lea    eax,[rdx-0x31]
    65031963:	cmp    al,0x8
    65031965:	jbe    0x6503189f
    6503196b:	mov    rax,QWORD PTR [rsi]
    6503196e:	mov    rcx,QWORD PTR [rax+0x128]
    65031975:	mov    rax,QWORD PTR [rcx]
    65031978:	cmp    dl,BYTE PTR [rax]
    6503197a:	je     0x65031860
    65031980:	cmp    dl,0x30
    65031983:	jne    0x65031bc6
    65031989:	mov    r9d,0x1
    6503198f:	jmp    0x65031866
    65031994:	cmp    dl,0x30
    65031997:	mov    ebp,0x1
    6503199c:	jl     0x650319c6
    6503199e:	xchg   ax,ax
    650319a0:	cmp    dl,0x39
    650319a3:	jg     0x650319c6
    650319a5:	cmp    r10d,0x19
    650319a9:	jae    0x650319b9
    650319ab:	sub    dl,0x30
    650319ae:	add    r10d,ebp
    650319b1:	mov    BYTE PTR [r11],dl
    650319b4:	add    r11,rbp
    650319b7:	jmp    0x650319bb
    650319b9:	add    ebx,ebp
    650319bb:	mov    dl,BYTE PTR [r8]
    650319be:	add    r8,rbp
    650319c1:	cmp    dl,0x30
    650319c4:	jge    0x650319a0
    650319c6:	mov    rax,QWORD PTR [rsi]
    650319c9:	mov    rcx,QWORD PTR [rax+0x128]
    650319d0:	mov    rax,QWORD PTR [rcx]
    650319d3:	cmp    dl,BYTE PTR [rax]
    650319d5:	jne    0x650319e2
    650319d7:	mov    r9d,0x4
    650319dd:	jmp    0x65031866
    650319e2:	movsx  eax,dl
    650319e5:	add    eax,0xffffffd5
    650319e8:	cmp    eax,0x3a
    650319eb:	ja     0x65031bc1
    650319f1:	lea    rdx,[rip+0xfffffffffffce608]        # 0x65000000
    650319f8:	cdqe   
    650319fa:	movzx  eax,BYTE PTR [rdx+rax*1+0x32158]
    65031a02:	mov    ecx,DWORD PTR [rdx+rax*4+0x3214c]
    65031a09:	add    rcx,rdx
    65031a0c:	jmp    rcx
    65031a0e:	mov    r9d,0x6
    65031a14:	jmp    0x65031866
    65031a19:	test   r10d,r10d
    65031a1c:	mov    ebp,0x1
    65031a21:	mov    r15d,ebp
    65031a24:	jne    0x65031a3d
    65031a26:	cmp    dl,0x30
    65031a29:	jne    0x65031a40
    65031a2b:	xchg   ax,ax
    65031a2d:	data16 xchg ax,ax
    65031a30:	mov    dl,BYTE PTR [r8]
    65031a33:	sub    ebx,ebp
    65031a35:	add    r8,rbp
    65031a38:	cmp    dl,0x30
    65031a3b:	je     0x65031a30
    65031a3d:	cmp    dl,0x30
    65031a40:	jl     0x65031a66
    65031a42:	cmp    dl,0x39
    65031a45:	jg     0x65031a66
    65031a47:	cmp    r10d,0x19
    65031a4b:	jae    0x65031a5b
    65031a4d:	sub    dl,0x30
    65031a50:	add    r10d,ebp
    65031a53:	mov    BYTE PTR [r11],dl
    65031a56:	add    r11,rbp
    65031a59:	sub    ebx,ebp
    65031a5b:	mov    dl,BYTE PTR [r8]
    65031a5e:	add    r8,rbp
    65031a61:	cmp    dl,0x30
    65031a64:	jge    0x65031a42
    65031a66:	movsx  eax,dl
    65031a69:	add    eax,0xffffffd5
    65031a6c:	cmp    eax,0x3a
    65031a6f:	ja     0x65031bc1
    65031a75:	lea    rdx,[rip+0xfffffffffffce584]        # 0x65000000
    65031a7c:	cdqe   
    65031a7e:	movzx  eax,BYTE PTR [rdx+rax*1+0x321a0]
    65031a86:	mov    ecx,DWORD PTR [rdx+rax*4+0x32194]
    65031a8d:	add    rcx,rdx
    65031a90:	jmp    rcx
    65031a92:	sub    r8,rbp
    65031a95:	mov    r9d,0xb
    65031a9b:	jmp    0x65031866
    65031aa0:	sub    dl,0x30
    65031aa3:	mov    r15d,0x1
    65031aa9:	cmp    dl,0x9
    65031aac:	ja     0x65031bc6
    65031ab2:	lea    r9d,[r15+0x3]
    65031ab6:	sub    r8,r15
    65031ab9:	jmp    0x65031866
    65031abe:	lea    eax,[rdx-0x31]
    65031ac1:	lea    rdi,[r8-0x2]
    65031ac5:	cmp    al,0x8
    65031ac7:	ja     0x65031ad8
    65031ac9:	mov    r9d,0x9
    65031acf:	sub    r8,0x1
    65031ad3:	jmp    0x65031866
    65031ad8:	cmp    dl,0x2b
    65031adb:	je     0x65031af6
    65031add:	cmp    dl,0x2d
    65031ae0:	je     0x65031b5f
    65031ae2:	cmp    dl,0x30
    65031ae5:	jne    0x65031bc6
    65031aeb:	mov    r9d,0x8
    65031af1:	jmp    0x65031866
    65031af6:	mov    r9d,0x7
    65031afc:	jmp    0x65031866
    65031b01:	cmp    dl,0x30
    65031b04:	mov    r12d,0x1
    65031b0a:	jne    0x65031b1b
    65031b0c:	data16 data16 xchg ax,ax
    65031b10:	mov    dl,BYTE PTR [r8]
    65031b13:	add    r8,r12
    65031b16:	cmp    dl,0x30
    65031b19:	je     0x65031b10
    65031b1b:	sub    dl,0x31
    65031b1e:	sub    r8,r12
    65031b21:	cmp    dl,0x8
    65031b24:	ja     0x65031b7f
    65031b26:	mov    r9d,0x9
    65031b2c:	jmp    0x65031866
    65031b31:	lea    eax,[rdx-0x31]
    65031b34:	cmp    al,0x8
    65031b36:	ja     0x65031ae2
    65031b38:	mov    r9d,0x9
    65031b3e:	sub    r8,0x1
    65031b42:	jmp    0x65031866
    65031b47:	cmp    DWORD PTR [rsp+0x120],0x0
    65031b4f:	je     0x65031bbb
    65031b51:	cmp    dl,0x2b
    65031b54:	lea    rdi,[r8-0x1]
    65031b58:	je     0x65031af6
    65031b5a:	cmp    dl,0x2d
    65031b5d:	jne    0x65031bc6
    65031b5f:	mov    r9d,0x7
    65031b65:	or     r14d,0xffffffff
    65031b69:	jmp    0x65031866
    65031b6e:	lea    rcx,[rip+0xfffffffffffce48b]        # 0x65000000
    65031b75:	cmp    r9d,0xa
    65031b79:	jne    0x65031870
    65031b7f:	xor    edi,edi
    65031b81:	test   ebp,ebp
    65031b83:	mov    QWORD PTR [r13+0x0],r8
    65031b87:	je     0x65032077
    65031b8d:	cmp    r10d,0x18
    65031b91:	jbe    0x65031c2d
    65031b97:	movzx  eax,BYTE PTR [rsp+0x97]
    65031b9f:	cmp    al,0x5
    65031ba1:	jl     0x65031bac
    65031ba3:	add    al,0x1
    65031ba5:	mov    BYTE PTR [rsp+0x97],al
    65031bac:	sub    r11,0x1
    65031bb0:	mov    r10d,0x18
    65031bb6:	add    ebx,0x1
    65031bb9:	jmp    0x65031c36
    65031bbb:	sub    r8,0x1
    65031bbf:	jmp    0x65031b7f
    65031bc1:	sub    r8,rbp
    65031bc4:	jmp    0x65031b7f
    65031bc6:	mov    r8,rdi
    65031bc9:	jmp    0x65031b7f
    65031bcb:	xor    edi,edi
    65031bcd:	cmp    dl,0x30
    65031bd0:	mov    eax,edi
    65031bd2:	lea    r12d,[rdi+0x1]
    65031bd6:	mov    DWORD PTR [rsp+0x30],eax
    65031bda:	jl     0x65031c25
    65031bdc:	data16 data16 xchg ax,ax
    65031be0:	cmp    dl,0x39
    65031be3:	jg     0x65031c10
    65031be5:	lea    ecx,[rax+rax*4]
    65031be8:	movsx  eax,dl
    65031beb:	lea    eax,[rax+rcx*2-0x30]
    65031bef:	cmp    eax,0x1450
    65031bf4:	mov    DWORD PTR [rsp+0x30],eax
    65031bf8:	jg     0x65031c07
    65031bfa:	mov    dl,BYTE PTR [r8]
    65031bfd:	add    r8,r12
    65031c00:	cmp    dl,0x30
    65031c03:	jge    0x65031be0
    65031c05:	jmp    0x65031c10
    65031c07:	mov    eax,0x1451
    65031c0c:	mov    DWORD PTR [rsp+0x30],eax
    65031c10:	cmp    dl,0x30
    65031c13:	jl     0x65031c25
    65031c15:	cmp    dl,0x39
    65031c18:	jg     0x65031c25
    65031c1a:	mov    dl,BYTE PTR [r8]
    65031c1d:	add    r8,r12
    65031c20:	cmp    dl,0x30
    65031c23:	jge    0x65031c15
    65031c25:	sub    r8,r12
    65031c28:	jmp    0x65031b81
    65031c2d:	test   r10d,r10d
    65031c30:	je     0x65032070
    65031c36:	sub    r11,0x1
    65031c3a:	cmp    BYTE PTR [r11],0x0
    65031c3e:	jne    0x65031c51
    65031c40:	sub    r11,0x1
    65031c44:	add    r10d,0xffffffff
    65031c48:	add    ebx,0x1
    65031c4b:	cmp    BYTE PTR [r11],0x0
    65031c4f:	je     0x65031c40
    65031c51:	lea    r8,[rsp+0x60]
    65031c56:	lea    rcx,[rsp+0x80]
    65031c5e:	mov    edx,r10d
    65031c61:	call   0x65032fe0
    65031c66:	test   r14d,r14d
    65031c69:	mov    r8d,DWORD PTR [rsp+0x30]
    65031c6e:	jns    0x65031c73
    65031c70:	neg    r8d
    65031c73:	add    r8d,ebx
    65031c76:	test   r12d,r12d
    65031c79:	jne    0x65031c83
    65031c7b:	add    r8d,DWORD PTR [rsp+0x110]
    65031c83:	test   r15d,r15d
    65031c86:	jne    0x65031c90
    65031c88:	sub    r8d,DWORD PTR [rsp+0x118]
    65031c90:	cmp    r8d,0x1450
    65031c97:	jg     0x6503205a
    65031c9d:	cmp    r8d,0xffffebb0
    65031ca4:	jl     0x6503204e
    65031caa:	lea    rdx,[rip+0x129cf]        # 0x65044680
    65031cb1:	sub    rdx,0x60
    65031cb5:	test   r8d,r8d
    65031cb8:	je     0x65032037
    65031cbe:	jns    0x65031cce
    65031cc0:	lea    rdx,[rip+0x12b19]        # 0x650447e0
    65031cc7:	neg    r8d
    65031cca:	sub    rdx,0x60
    65031cce:	movzx  eax,WORD PTR [rsp+0x60]
    65031cd3:	cmp    DWORD PTR [rsp+0x38],0x0
    65031cd8:	mov    ebp,0x0
    65031cdd:	cmove  ax,bp
    65031ce1:	test   r8d,r8d
    65031ce4:	mov    WORD PTR [rsp+0x60],ax
    65031ce9:	je     0x65032035
    65031cef:	mov    r9d,0xffff8000
    65031cf5:	data16 data16 xchg ax,ax
    65031cf9:	data16 xchg ax,ax
    65031cfc:	data16 data16 xchg ax,ax
    65031d00:	mov    eax,r8d
    65031d03:	add    rdx,0x54
    65031d07:	sar    r8d,0x3
    65031d0b:	and    eax,0x7
    65031d0e:	mov    DWORD PTR [rsp+0x30],r8d
    65031d13:	mov    QWORD PTR [rsp+0x40],rdx
    65031d18:	je     0x6503202c
    65031d1e:	cdqe   
    65031d20:	lea    rcx,[rax+rax*2]
    65031d24:	cmp    WORD PTR [rdx+rcx*4],0x8000
    65031d2a:	lea    r14,[rdx+rcx*4]
    65031d2e:	jb     0x65031d57
    65031d30:	mov    rax,QWORD PTR [r14]
    65031d33:	lea    rcx,[rsp+0x70]
    65031d38:	mov    QWORD PTR [rcx],rax
    65031d3b:	mov    eax,DWORD PTR [r14+0x8]
    65031d3f:	lea    r14,[rsp+0x70]
    65031d44:	mov    DWORD PTR [rcx+0x8],eax
    65031d47:	mov    rax,QWORD PTR [rsp+0x70]
    65031d4c:	shr    rax,0x10
    65031d50:	sub    eax,0x1
    65031d53:	mov    DWORD PTR [rsp+0x72],eax
    65031d57:	movzx  ecx,WORD PTR [r14+0xa]
    65031d5c:	movzx  eax,WORD PTR [rsp+0x6a]
    65031d61:	mov    r15d,ebp
    65031d64:	movzx  edx,cx
    65031d67:	and    cx,0x7fff
    65031d6c:	mov    DWORD PTR [rsp+0x50],ebp
    65031d70:	xor    dx,ax
    65031d73:	and    ax,0x7fff
    65031d77:	mov    DWORD PTR [rsp+0x54],ebp
    65031d7b:	and    dx,0x8000
    65031d80:	cmp    ax,0x7fff
    65031d84:	mov    DWORD PTR [rsp+0x58],ebp
    65031d88:	mov    WORD PTR [rsp+0x38],dx
    65031d8d:	lea    edi,[rax+rcx*1]
    65031d90:	jae    0x6503200f
    65031d96:	cmp    cx,0x7fff
    65031d9b:	jae    0x6503200f
    65031da1:	cmp    di,0xbffd
    65031da6:	ja     0x6503200f
    65031dac:	cmp    di,0x3fbf
    65031db1:	ja     0x65031dbc
    65031db3:	mov    DWORD PTR [rsp+0x68],ebp
    65031db7:	jmp    0x6503201f
    65031dbc:	test   ax,ax
    65031dbf:	jne    0x65031de7
    65031dc1:	mov    eax,DWORD PTR [rsp+0x68]
    65031dc5:	add    di,0x1
    65031dc9:	btr    eax,0x1f
    65031dcd:	test   eax,eax
    65031dcf:	jne    0x65031de7
    65031dd1:	cmp    DWORD PTR [rsp+0x64],ebp
    65031dd5:	jne    0x65031de7
    65031dd7:	cmp    DWORD PTR [rsp+0x60],ebp
    65031ddb:	jne    0x65031de7
    65031ddd:	mov    WORD PTR [rsp+0x6a],bp
    65031de2:	jmp    0x65032027
    65031de7:	test   cx,cx
    65031dea:	jne    0x65031e10
    65031dec:	mov    eax,DWORD PTR [r14+0x8]
    65031df0:	add    di,0x1
    65031df4:	btr    eax,0x1f
    65031df8:	test   eax,eax
    65031dfa:	jne    0x65031e10
    65031dfc:	cmp    DWORD PTR [r14+0x4],ebp
    65031e00:	jne    0x65031e10
    65031e02:	cmp    DWORD PTR [r14],ebp
    65031e05:	jne    0x65031e10
    65031e07:	mov    DWORD PTR [rsp+0x68],ebp
    65031e0b:	jmp    0x6503201f
    65031e10:	mov    r13d,ebp
    65031e13:	lea    rdx,[rsp+0x54]
    65031e18:	mov    r12d,0x5
    65031e1e:	xchg   ax,ax
    65031e20:	test   r12d,r12d
    65031e23:	lea    eax,[r13+r13*1+0x0]
    65031e28:	mov    ebx,r12d
    65031e2b:	movsxd rcx,eax
    65031e2e:	jle    0x65031e81
    65031e30:	mov    esi,r13d
    65031e33:	lea    r10,[r14+0x8]
    65031e37:	lea    r11,[rsp+rcx*1+0x60]
    65031e3c:	and    esi,0x1
    65031e3f:	nop
    65031e40:	movzx  eax,WORD PTR [r10]
    65031e44:	movzx  ecx,WORD PTR [r11]
    65031e48:	mov    r8d,ebp
    65031e4b:	imul   ecx,eax
    65031e4e:	mov    eax,DWORD PTR [rdx-0x4]
    65031e51:	lea    r9d,[rax+rcx*1]
    65031e55:	cmp    r9d,eax
    65031e58:	jb     0x65031e5f
    65031e5a:	cmp    r9d,ecx
    65031e5d:	jae    0x65031e65
    65031e5f:	mov    r8d,0x1
    65031e65:	test   r8d,r8d
    65031e68:	mov    DWORD PTR [rdx-0x4],r9d
    65031e6c:	je     0x65031e72
    65031e6e:	add    WORD PTR [rdx],0x1
    65031e72:	sub    ebx,0x1
    65031e75:	add    r11,0x2
    65031e79:	sub    r10,0x2
    65031e7d:	test   ebx,ebx
    65031e7f:	jg     0x65031e40
    65031e81:	sub    r12d,0x1
    65031e85:	add    rdx,0x2
    65031e89:	add    r13d,0x1
    65031e8d:	test   r12d,r12d
    65031e90:	jg     0x65031e20
    65031e92:	mov    r8d,DWORD PTR [rsp+0x58]
    65031e97:	mov    edx,DWORD PTR [rsp+0x54]
    65031e9b:	mov    r9d,DWORD PTR [rsp+0x50]
    65031ea0:	add    di,0xc002
    65031ea5:	test   di,di
    65031ea8:	jle    0x65031eee
    65031eaa:	data16 xchg ax,ax
    65031ead:	data16 xchg ax,ax
    65031eb0:	bt     r8d,0x1f
    65031eb5:	jb     0x65031ee9
    65031eb7:	mov    ecx,edx
    65031eb9:	mov    eax,r9d
    65031ebc:	add    r8d,r8d
    65031ebf:	add    edx,edx
    65031ec1:	shr    eax,0x1f
    65031ec4:	shr    ecx,0x1f
    65031ec7:	add    r9d,r9d
    65031eca:	or     edx,eax
    65031ecc:	or     r8d,ecx
    65031ecf:	add    di,0xffff
    65031ed4:	mov    DWORD PTR [rsp+0x54],edx
    65031ed8:	mov    DWORD PTR [rsp+0x58],r8d
    65031edd:	test   di,di
    65031ee0:	mov    DWORD PTR [rsp+0x50],r9d
    65031ee5:	jg     0x65031eb0
    65031ee7:	jmp    0x65031eee
    65031ee9:	test   di,di
    65031eec:	jg     0x65031f53
    65031eee:	add    di,0xffff
    65031ef3:	jns    0x65031f53
    65031ef5:	movzx  eax,di
    65031ef8:	neg    ax
    65031efb:	movzx  r10d,ax
    65031eff:	add    di,r10w
    65031f03:	test   BYTE PTR [rsp+0x50],0x1
    65031f08:	je     0x65031f0e
    65031f0a:	add    r15d,0x1
    65031f0e:	mov    ecx,edx
    65031f10:	mov    eax,r8d
    65031f13:	shr    r9d,1
    65031f16:	shl    ecx,0x1f
    65031f19:	shr    edx,1
    65031f1b:	shl    eax,0x1f
    65031f1e:	or     r9d,ecx
    65031f21:	shr    r8d,1
    65031f24:	or     edx,eax
    65031f26:	sub    r10,0x1
    65031f2a:	mov    DWORD PTR [rsp+0x50],r9d
    65031f2f:	jne    0x65031f03
    65031f31:	test   r15d,r15d
    65031f34:	mov    DWORD PTR [rsp+0x54],edx
    65031f38:	mov    DWORD PTR [rsp+0x58],r8d
    65031f3d:	je     0x65031f53
    65031f3f:	movzx  eax,r9w
    65031f43:	or     ax,0x1
    65031f47:	mov    WORD PTR [rsp+0x50],ax
    65031f4c:	mov    r9d,DWORD PTR [rsp+0x50]
    65031f51:	jmp    0x65031f58
    65031f53:	mov    ax,WORD PTR [rsp+0x50]
    65031f58:	cmp    ax,0x8000
    65031f5c:	ja     0x65031f6e
    65031f5e:	and    r9d,0x1ffff
    65031f65:	cmp    r9d,0x18000
    65031f6c:	jne    0x65031fd2
    65031f6e:	mov    eax,DWORD PTR [rsp+0x52]
    65031f72:	cmp    eax,0xffffffff
    65031f75:	jne    0x65031fc7
    65031f77:	mov    eax,DWORD PTR [rsp+0x56]
    65031f7b:	mov    DWORD PTR [rsp+0x52],ebp
    65031f7f:	cmp    eax,0xffffffff
    65031f82:	jne    0x65031fb9
    65031f84:	movzx  eax,WORD PTR [rsp+0x5a]
    65031f89:	mov    DWORD PTR [rsp+0x56],ebp
    65031f8d:	mov    edx,DWORD PTR [rsp+0x54]
    65031f91:	cmp    ax,0xffff
    65031f95:	jne    0x65031fa9
    65031f97:	mov    WORD PTR [rsp+0x5a],0x8000
    65031f9e:	mov    r8d,DWORD PTR [rsp+0x58]
    65031fa3:	add    di,0x1
    65031fa7:	jmp    0x65031fd2
    65031fa9:	add    ax,0x1
    65031fad:	mov    WORD PTR [rsp+0x5a],ax
    65031fb2:	mov    r8d,DWORD PTR [rsp+0x58]
    65031fb7:	jmp    0x65031fd2
    65031fb9:	add    eax,0x1
    65031fbc:	mov    DWORD PTR [rsp+0x56],eax
    65031fc0:	mov    r8d,DWORD PTR [rsp+0x58]
    65031fc5:	jmp    0x65031fce
    65031fc7:	add    eax,0x1
    65031fca:	mov    DWORD PTR [rsp+0x52],eax
    65031fce:	mov    edx,DWORD PTR [rsp+0x54]
    65031fd2:	cmp    di,0x7fff
    65031fd7:	mov    r9d,0xffff8000
    65031fdd:	jb     0x65031feb
    65031fdf:	cmp    WORD PTR [rsp+0x38],bp
    65031fe4:	mov    r8d,DWORD PTR [rsp+0x30]
    65031fe9:	jmp    0x65032012
    65031feb:	movzx  eax,WORD PTR [rsp+0x52]
    65031ff0:	or     di,WORD PTR [rsp+0x38]
    65031ff5:	mov    DWORD PTR [rsp+0x66],r8d
    65031ffa:	mov    r8d,DWORD PTR [rsp+0x30]
    65031fff:	mov    WORD PTR [rsp+0x60],ax
    65032004:	mov    WORD PTR [rsp+0x6a],di
    65032009:	mov    DWORD PTR [rsp+0x62],edx
    6503200d:	jmp    0x65032027
    6503200f:	test   dx,dx
    65032012:	mov    eax,0x7fff8000
    65032017:	cmovne eax,r9d
    6503201b:	mov    DWORD PTR [rsp+0x68],eax
    6503201f:	mov    DWORD PTR [rsp+0x60],ebp
    65032023:	mov    DWORD PTR [rsp+0x64],ebp
    65032027:	mov    rdx,QWORD PTR [rsp+0x40]
    6503202c:	test   r8d,r8d
    6503202f:	jne    0x65031d00
    65032035:	xor    edi,edi
    65032037:	mov    eax,DWORD PTR [rsp+0x68]
    6503203b:	movzx  ecx,WORD PTR [rsp+0x60]
    65032040:	mov    edx,DWORD PTR [rsp+0x62]
    65032044:	mov    r8d,DWORD PTR [rsp+0x66]
    65032049:	shr    eax,0x10
    6503204c:	jmp    0x65032087
    6503204e:	mov    r8d,edi
    65032051:	mov    edx,edi
    65032053:	mov    edi,0x1
    65032058:	jmp    0x65032081
    6503205a:	mov    edx,edi
    6503205c:	mov    ax,0x7fff
    65032060:	mov    r8d,0x80000000
    65032066:	mov    edi,0x2
    6503206b:	xor    cx,cx
    6503206e:	jmp    0x65032087
    65032070:	mov    r8d,edi
    65032073:	mov    edx,edi
    65032075:	jmp    0x65032081
    65032077:	mov    r8d,edi
    6503207a:	mov    edx,edi
    6503207c:	mov    edi,0x4
    65032081:	xor    cx,cx
    65032084:	xor    ax,ax
    65032087:	mov    r9,QWORD PTR [rsp+0x48]
    6503208c:	or     ax,WORD PTR [rsp+0x34]
    65032091:	mov    WORD PTR [r9+0xa],ax
    65032096:	mov    eax,edi
    65032098:	mov    WORD PTR [r9],cx
    6503209c:	mov    DWORD PTR [r9+0x2],edx
    650320a0:	mov    DWORD PTR [r9+0x6],r8d
    650320a4:	mov    rcx,QWORD PTR [rsp+0xa0]
    650320ac:	xor    rcx,rsp
    650320af:	call   0x6501e650
    650320b4:	mov    rbx,QWORD PTR [rsp+0x100]
    650320bc:	add    rsp,0xb0
    650320c3:	pop    r15
    650320c5:	pop    r14
    650320c7:	pop    r13
    650320c9:	pop    r12
    650320cb:	pop    rdi
    650320cc:	pop    rsi
    650320cd:	pop    rbp
    650320ce:	ret    
    650320cf:	nop
    650320d0:	cwde   
    650320d1:	sbb    BYTE PTR [rbx],al
    650320d3:	add    al,bh
    650320d5:	sbb    BYTE PTR [rbx],al
    650320d7:	add    BYTE PTR [rax+0x19],ah
    650320da:	add    eax,DWORD PTR [rax]
    650320dc:	xchg   esp,eax
    650320dd:	sbb    DWORD PTR [rbx],eax
    650320df:	add    BYTE PTR [rcx],bl
    650320e1:	sbb    al,BYTE PTR [rbx]
    650320e3:	add    BYTE PTR [rax-0x41fffce6],ah
    650320e9:	sbb    al,BYTE PTR [rbx]
    650320eb:	add    BYTE PTR [rcx],dh
    650320ed:	sbb    eax,DWORD PTR [rbx]
    650320ef:	add    BYTE PTR [rcx],al
    650320f1:	sbb    eax,DWORD PTR [rbx]
    650320f3:	add    bl,cl
    650320f5:	sbb    eax,DWORD PTR [rbx]
    650320f7:	add    BYTE PTR [rsi+0x1b],ch
    650320fa:	add    eax,DWORD PTR [rax]
    650320fc:	rex.RXB sbb r8d,DWORD PTR [r11]
    650320ff:	add    BYTE PTR [rdx+0x5800031a],dl
    65032105:	sbb    DWORD PTR [rbx],eax
    65032107:	add    BYTE PTR [rsi],cl
    65032109:	sbb    al,BYTE PTR [rbx]
    6503210b:	add    cl,al
    6503210d:	sbb    eax,DWORD PTR [rbx]
    6503210f:	add    BYTE PTR [rax],al
    65032111:	add    eax,DWORD PTR [rax]
    65032113:	add    eax,DWORD PTR [rbx]
    65032115:	add    DWORD PTR [rbx],eax
    65032117:	add    eax,DWORD PTR [rbx]
    65032119:	add    eax,DWORD PTR [rbx]
    6503211b:	add    eax,DWORD PTR [rbx]
    6503211d:	add    eax,DWORD PTR [rbx]
    6503211f:	add    eax,DWORD PTR [rbx]
    65032121:	add    eax,DWORD PTR [rbx]
    65032123:	add    eax,DWORD PTR [rbx]
    65032125:	add    eax,DWORD PTR [rbx]
    65032127:	add    eax,DWORD PTR [rbx]
    65032129:	add    al,BYTE PTR [rdx]
    6503212b:	add    eax,DWORD PTR [rbx]
    6503212d:	add    eax,DWORD PTR [rbx]
    6503212f:	add    eax,DWORD PTR [rbx]
    65032131:	add    eax,DWORD PTR [rbx]
    65032133:	add    eax,DWORD PTR [rbx]
    65032135:	add    eax,DWORD PTR [rbx]
    65032137:	add    eax,DWORD PTR [rbx]
    65032139:	add    eax,DWORD PTR [rbx]
    6503213b:	add    eax,DWORD PTR [rbx]
    6503213d:	add    eax,DWORD PTR [rbx]
    6503213f:	add    eax,DWORD PTR [rbx]
    65032141:	add    eax,DWORD PTR [rbx]
    65032143:	add    eax,DWORD PTR [rbx]
    65032145:	add    eax,DWORD PTR [rbx]
    65032147:	add    eax,DWORD PTR [rbx]
    65032149:	add    al,BYTE PTR [rdx]
    6503214b:	nop
    6503214c:	xchg   edx,eax
    6503214d:	sbb    al,BYTE PTR [rbx]
    6503214f:	add    BYTE PTR [rsi],cl
    65032151:	sbb    al,BYTE PTR [rbx]
    65032153:	add    cl,al
    65032155:	sbb    eax,DWORD PTR [rbx]
    65032157:	add    BYTE PTR [rax],al
    65032159:	add    al,BYTE PTR [rax]
    6503215b:	add    al,BYTE PTR [rdx]
    6503215d:	add    al,BYTE PTR [rdx]
    6503215f:	add    al,BYTE PTR [rdx]
    65032161:	add    al,BYTE PTR [rdx]
    65032163:	add    al,BYTE PTR [rdx]
    65032165:	add    al,BYTE PTR [rdx]
    65032167:	add    al,BYTE PTR [rdx]
    65032169:	add    al,BYTE PTR [rdx]
    6503216b:	add    al,BYTE PTR [rdx]
    6503216d:	add    al,BYTE PTR [rdx]
    6503216f:	add    al,BYTE PTR [rdx]
    65032171:	add    DWORD PTR [rcx],eax
    65032173:	add    al,BYTE PTR [rdx]
    65032175:	add    al,BYTE PTR [rdx]
    65032177:	add    al,BYTE PTR [rdx]
    65032179:	add    al,BYTE PTR [rdx]
    6503217b:	add    al,BYTE PTR [rdx]
    6503217d:	add    al,BYTE PTR [rdx]
    6503217f:	add    al,BYTE PTR [rdx]
    65032181:	add    al,BYTE PTR [rdx]
    65032183:	add    al,BYTE PTR [rdx]
    65032185:	add    al,BYTE PTR [rdx]
    65032187:	add    al,BYTE PTR [rdx]
    65032189:	add    al,BYTE PTR [rdx]
    6503218b:	add    al,BYTE PTR [rdx]
    6503218d:	add    al,BYTE PTR [rdx]
    6503218f:	add    al,BYTE PTR [rdx]
    65032191:	add    DWORD PTR [rcx],eax
    65032193:	nop
    65032194:	xchg   edx,eax
    65032195:	sbb    al,BYTE PTR [rbx]
    65032197:	add    BYTE PTR [rsi],cl
    65032199:	sbb    al,BYTE PTR [rbx]
    6503219b:	add    cl,al
    6503219d:	sbb    eax,DWORD PTR [rbx]
    6503219f:	add    BYTE PTR [rax],al
    650321a1:	add    al,BYTE PTR [rax]
    650321a3:	add    al,BYTE PTR [rdx]
    650321a5:	add    al,BYTE PTR [rdx]
    650321a7:	add    al,BYTE PTR [rdx]
    650321a9:	add    al,BYTE PTR [rdx]
    650321ab:	add    al,BYTE PTR [rdx]
    650321ad:	add    al,BYTE PTR [rdx]
    650321af:	add    al,BYTE PTR [rdx]
    650321b1:	add    al,BYTE PTR [rdx]
    650321b3:	add    al,BYTE PTR [rdx]
    650321b5:	add    al,BYTE PTR [rdx]
    650321b7:	add    al,BYTE PTR [rdx]
    650321b9:	add    DWORD PTR [rcx],eax
    650321bb:	add    al,BYTE PTR [rdx]
    650321bd:	add    al,BYTE PTR [rdx]
    650321bf:	add    al,BYTE PTR [rdx]
    650321c1:	add    al,BYTE PTR [rdx]
    650321c3:	add    al,BYTE PTR [rdx]
    650321c5:	add    al,BYTE PTR [rdx]
    650321c7:	add    al,BYTE PTR [rdx]
    650321c9:	add    al,BYTE PTR [rdx]
    650321cb:	add    al,BYTE PTR [rdx]
    650321cd:	add    al,BYTE PTR [rdx]
    650321cf:	add    al,BYTE PTR [rdx]
    650321d1:	add    al,BYTE PTR [rdx]
    650321d3:	add    al,BYTE PTR [rdx]
    650321d5:	add    al,BYTE PTR [rdx]
    650321d7:	add    al,BYTE PTR [rdx]
    650321d9:	add    DWORD PTR [rcx],eax
    650321db:	int3   
    650321dc:	int3   
    650321dd:	int3   
    650321de:	int3   
    650321df:	int3   
    650321e0:	mov    r11,rsp
    650321e3:	push   rsi
    650321e4:	push   rdi
    650321e5:	sub    rsp,0xd8
    650321ec:	mov    rax,QWORD PTR [rip+0x10f2d]        # 0x65043120
    650321f3:	xor    rax,rsp
    650321f6:	mov    QWORD PTR [rsp+0xa0],rax
    650321fe:	movzx  r10d,WORD PTR [rcx+0x8]
    65032203:	mov    DWORD PTR [rsp+0x44],edx
    65032207:	mov    rdi,r9
    6503220a:	movzx  edx,r10w
    6503220e:	and    r10w,0x7fff
    65032214:	mov    QWORD PTR [rsp+0x58],r9
    65032219:	mov    r9d,DWORD PTR [rcx+0x4]
    6503221d:	and    dx,0x8000
    65032222:	mov    BYTE PTR [r11-0x68],0xcc
    65032227:	test   dx,dx
    6503222a:	mov    BYTE PTR [r11-0x67],0xcc
    6503222f:	mov    BYTE PTR [r11-0x66],0xcc
    65032234:	mov    BYTE PTR [r11-0x65],0xcc
    65032239:	mov    BYTE PTR [r11-0x64],0xcc
    6503223e:	mov    BYTE PTR [r11-0x63],0xcc
    65032243:	mov    BYTE PTR [r11-0x62],0xcc
    65032248:	mov    BYTE PTR [r11-0x61],0xcc
    6503224d:	mov    BYTE PTR [r11-0x60],0xcc
    65032252:	mov    BYTE PTR [r11-0x5f],0xcc
    65032257:	mov    BYTE PTR [r11-0x5e],0xfb
    6503225c:	mov    BYTE PTR [r11-0x5d],0x3f
    65032261:	mov    r11d,DWORD PTR [rcx]
    65032264:	mov    DWORD PTR [rsp+0x50],r8d
    65032269:	mov    esi,0x1
    6503226e:	mov    WORD PTR [rsp+0x30],dx
    65032273:	je     0x6503227b
    65032275:	mov    BYTE PTR [rdi+0x2],0x2d
    65032279:	jmp    0x6503227f
    6503227b:	mov    BYTE PTR [rdi+0x2],0x20
    6503227f:	test   r10w,r10w
    65032283:	mov    QWORD PTR [rsp+0xf8],rbx
    6503228b:	mov    QWORD PTR [rsp+0xd0],rbp
    65032293:	mov    QWORD PTR [rsp+0xc8],r12
    6503229b:	mov    QWORD PTR [rsp+0xc0],r13
    650322a3:	jne    0x650322e1
    650322a5:	test   r9d,r9d
    650322a8:	jne    0x65032414
    650322ae:	test   r11d,r11d
    650322b1:	jne    0x65032414
    650322b7:	mov    eax,0x20
    650322bc:	mov    ecx,0x2d
    650322c1:	cmp    dx,0x8000
    650322c6:	cmove  eax,ecx
    650322c9:	mov    WORD PTR [rdi],r11w
    650322cd:	mov    BYTE PTR [rdi+0x3],sil
    650322d1:	mov    BYTE PTR [rdi+0x4],0x30
    650322d5:	mov    BYTE PTR [rdi+0x5],r11b
    650322d9:	mov    BYTE PTR [rdi+0x2],al
    650322dc:	jmp    0x65032f4c
    650322e1:	cmp    r10w,0x7fff
    650322e7:	jne    0x65032414
    650322ed:	cmp    r9d,0x80000000
    650322f4:	mov    WORD PTR [rdi],si
    650322f7:	jne    0x650322fe
    650322f9:	test   r11d,r11d
    650322fc:	je     0x65032343
    650322fe:	bt     r9d,0x1e
    65032303:	jb     0x65032343
    65032305:	lea    rcx,[rdi+0x4]
    65032309:	lea    r8,[rip+0x4c88]        # 0x65036f98
    65032310:	mov    edx,0x16
    65032315:	call   0x65020320
    6503231a:	xor    ebx,ebx
    6503231c:	test   eax,eax
    6503231e:	je     0x65032409
    65032324:	xor    r9d,r9d
    65032327:	xor    r8d,r8d
    6503232a:	xor    edx,edx
    6503232c:	xor    ecx,ecx
    6503232e:	mov    QWORD PTR [rsp+0x20],rbx
    65032333:	call   0x6501d920
    65032338:	mov    BYTE PTR [rdi+0x3],0x6
    6503233c:	mov    esi,ebx
    6503233e:	jmp    0x65032f4c
    65032343:	test   dx,dx
    65032346:	je     0x65032393
    65032348:	cmp    r9d,0xc0000000
    6503234f:	jne    0x65032393
    65032351:	test   r11d,r11d
    65032354:	jne    0x650323da
    6503235a:	lea    rcx,[rdi+0x4]
    6503235e:	lea    r8,[rip+0x4c2b]        # 0x65036f90
    65032365:	lea    edx,[r11+0x16]
    65032369:	call   0x65020320
    6503236e:	xor    ebx,ebx
    65032370:	test   eax,eax
    65032372:	je     0x650323cf
    65032374:	xor    r9d,r9d
    65032377:	xor    r8d,r8d
    6503237a:	xor    edx,edx
    6503237c:	xor    ecx,ecx
    6503237e:	mov    QWORD PTR [rsp+0x20],rbx
    65032383:	call   0x6501d920
    65032388:	mov    BYTE PTR [rdi+0x3],0x5
    6503238c:	mov    esi,ebx
    6503238e:	jmp    0x65032f4c
    65032393:	cmp    r9d,0x80000000
    6503239a:	jne    0x650323da
    6503239c:	test   r11d,r11d
    6503239f:	jne    0x650323da
    650323a1:	lea    rcx,[rdi+0x4]
    650323a5:	lea    r8,[rip+0x4bdc]        # 0x65036f88
    650323ac:	lea    edx,[r11+0x16]
    650323b0:	call   0x65020320
    650323b5:	xor    ebx,ebx
    650323b7:	test   eax,eax
    650323b9:	je     0x650323cf
    650323bb:	xor    r9d,r9d
    650323be:	xor    r8d,r8d
    650323c1:	xor    edx,edx
    650323c3:	xor    ecx,ecx
    650323c5:	mov    QWORD PTR [rsp+0x20],rbx
    650323ca:	call   0x6501d920
    650323cf:	mov    BYTE PTR [rdi+0x3],0x5
    650323d3:	mov    esi,ebx
    650323d5:	jmp    0x65032f4c
    650323da:	lea    rcx,[rdi+0x4]
    650323de:	lea    r8,[rip+0x4b9b]        # 0x65036f80
    650323e5:	mov    edx,0x16
    650323ea:	call   0x65020320
    650323ef:	xor    ebx,ebx
    650323f1:	test   eax,eax
    650323f3:	je     0x65032409
    650323f5:	xor    r9d,r9d
    650323f8:	xor    r8d,r8d
    650323fb:	xor    edx,edx
    650323fd:	xor    ecx,ecx
    650323ff:	mov    QWORD PTR [rsp+0x20],rbx
    65032404:	call   0x6501d920
    65032409:	mov    BYTE PTR [rdi+0x3],0x6
    6503240d:	mov    esi,ebx
    6503240f:	jmp    0x65032f4c
    65032414:	movzx  r8d,r10w
    65032418:	mov    WORD PTR [rsp+0x7a],r10w
    6503241e:	mov    ecx,r9d
    65032421:	shr    ecx,0x18
    65032424:	mov    eax,r8d
    65032427:	mov    DWORD PTR [rsp+0x72],r11d
    6503242c:	shr    eax,0x8
    6503242f:	mov    r11d,0x5
    65032435:	xor    ebx,ebx
    65032437:	imul   r8d,r8d,0x4d10
    6503243e:	lea    edx,[rax+rcx*2]
    65032441:	mov    QWORD PTR [rsp+0xb8],r14
    65032449:	mov    DWORD PTR [rsp+0x76],r9d
    6503244e:	mov    QWORD PTR [rsp+0xb0],r15
    65032456:	mov    WORD PTR [rsp+0x70],0x0
    6503245d:	mov    DWORD PTR [rsp+0x48],r11d
    65032462:	imul   edx,edx,0x4d
    65032465:	lea    ecx,[rdx+r8*1-0x134312f4]
    6503246d:	lea    rdx,[rip+0x1220c]        # 0x65044680
    65032474:	mov    edi,0x7fff8000
    65032479:	sar    ecx,0x10
    6503247c:	sub    rdx,0x60
    65032480:	mov    r12d,0xffff8000
    65032486:	movsx  r10d,cx
    6503248a:	mov    DWORD PTR [rsp+0x34],ecx
    6503248e:	neg    r10d
    65032491:	je     0x650328cd
    65032497:	test   r10d,r10d
    6503249a:	jns    0x650324aa
    6503249c:	lea    rdx,[rip+0x1233d]        # 0x650447e0
    650324a3:	neg    r10d
    650324a6:	sub    rdx,0x60
    650324aa:	test   r10d,r10d
    650324ad:	je     0x650328cd
    650324b3:	mov    r9d,DWORD PTR [rsp+0x74]
    650324b8:	mov    r8d,DWORD PTR [rsp+0x70]
    650324bd:	data16 xchg ax,ax
    650324c0:	mov    eax,r10d
    650324c3:	add    rdx,0x54
    650324c7:	sar    r10d,0x3
    650324cb:	and    eax,0x7
    650324ce:	mov    DWORD PTR [rsp+0x40],r10d
    650324d3:	mov    QWORD PTR [rsp+0x38],rdx
    650324d8:	je     0x650328be
    650324de:	cdqe   
    650324e0:	lea    rcx,[rax+rax*2]
    650324e4:	cmp    WORD PTR [rdx+rcx*4],0x8000
    650324ea:	lea    r15,[rdx+rcx*4]
    650324ee:	jb     0x65032523
    650324f0:	mov    rax,QWORD PTR [r15]
    650324f3:	lea    rcx,[rsp+0x90]
    650324fb:	mov    QWORD PTR [rcx],rax
    650324fe:	mov    eax,DWORD PTR [r15+0x8]
    65032502:	lea    r15,[rsp+0x90]
    6503250a:	mov    DWORD PTR [rcx+0x8],eax
    6503250d:	mov    rax,QWORD PTR [rsp+0x90]
    65032515:	shr    rax,0x10
    65032519:	sub    eax,0x1
    6503251c:	mov    DWORD PTR [rsp+0x92],eax
    65032523:	movzx  ecx,WORD PTR [r15+0xa]
    65032528:	movzx  eax,WORD PTR [rsp+0x7a]
    6503252d:	mov    DWORD PTR [rsp+0x60],ebx
    65032531:	movzx  edx,cx
    65032534:	and    cx,0x7fff
    65032539:	mov    DWORD PTR [rsp+0x64],ebx
    6503253d:	xor    dx,ax
    65032540:	and    ax,0x7fff
    65032544:	mov    DWORD PTR [rsp+0x68],ebx
    65032548:	and    dx,0x8000
    6503254d:	cmp    ax,0x7fff
    65032551:	lea    ebp,[rax+rcx*1]
    65032554:	mov    WORD PTR [rsp+0x32],dx
    65032559:	jae    0x6503289e
    6503255f:	cmp    cx,0x7fff
    65032564:	jae    0x6503289e
    6503256a:	cmp    bp,0xbffd
    6503256f:	ja     0x6503289e
    65032575:	cmp    bp,0x3fbf
    6503257a:	ja     0x65032598
    6503257c:	mov    rdx,QWORD PTR [rsp+0x38]
    65032581:	mov    DWORD PTR [rsp+0x78],ebx
    65032585:	mov    r9d,ebx
    65032588:	mov    DWORD PTR [rsp+0x74],ebx
    6503258c:	mov    r8d,ebx
    6503258f:	mov    DWORD PTR [rsp+0x70],ebx
    65032593:	jmp    0x650328be
    65032598:	test   ax,ax
    6503259b:	jne    0x650325c6
    6503259d:	mov    eax,DWORD PTR [rsp+0x78]
    650325a1:	add    bp,0x1
    650325a5:	btr    eax,0x1f
    650325a9:	test   eax,eax
    650325ab:	jne    0x650325c6
    650325ad:	test   r9d,r9d
    650325b0:	jne    0x650325c6
    650325b2:	test   r8d,r8d
    650325b5:	jne    0x650325c6
    650325b7:	mov    rdx,QWORD PTR [rsp+0x38]
    650325bc:	mov    WORD PTR [rsp+0x7a],bx
    650325c1:	jmp    0x650328be
    650325c6:	test   cx,cx
    650325c9:	jne    0x65032602
    650325cb:	mov    eax,DWORD PTR [r15+0x8]
    650325cf:	add    bp,0x1
    650325d3:	btr    eax,0x1f
    650325d7:	test   eax,eax
    650325d9:	jne    0x65032602
    650325db:	cmp    DWORD PTR [r15+0x4],ebx
    650325df:	jne    0x65032602
    650325e1:	cmp    DWORD PTR [r15],ebx
    650325e4:	jne    0x65032602
    650325e6:	mov    rdx,QWORD PTR [rsp+0x38]
    650325eb:	mov    DWORD PTR [rsp+0x78],ebx
    650325ef:	mov    r9d,ebx
    650325f2:	mov    DWORD PTR [rsp+0x74],ebx
    650325f6:	mov    r8d,ebx
    650325f9:	mov    DWORD PTR [rsp+0x70],ebx
    650325fd:	jmp    0x650328be
    65032602:	mov    r14d,ebx
    65032605:	lea    rdx,[rsp+0x64]
    6503260a:	mov    r13d,r11d
    6503260d:	data16 xchg ax,ax
    65032610:	test   r13d,r13d
    65032613:	lea    eax,[r14+r14*1]
    65032617:	mov    edi,r13d
    6503261a:	movsxd rcx,eax
    6503261d:	jle    0x65032690
    6503261f:	mov    r12d,r14d
    65032622:	lea    r10,[rsp+rcx*1+0x70]
    65032627:	lea    r11,[r15+0x8]
    6503262b:	and    r12d,0x1
    6503262f:	nop
    65032630:	movzx  ecx,WORD PTR [r10]
    65032634:	movzx  eax,WORD PTR [r11]
    65032638:	imul   ecx,eax
    6503263b:	test   r12d,r12d
    6503263e:	je     0x6503265d
    65032640:	mov    eax,DWORD PTR [rdx-0x4]
    65032643:	mov    r8d,ebx
    65032646:	lea    r9d,[rax+rcx*1]
    6503264a:	cmp    r9d,eax
    6503264d:	jb     0x65032654
    6503264f:	cmp    r9d,ecx
    65032652:	jae    0x65032657
    65032654:	mov    r8d,esi
    65032657:	mov    DWORD PTR [rdx-0x4],r9d
    6503265b:	jmp    0x65032678
    6503265d:	mov    eax,DWORD PTR [rdx-0x4]
    65032660:	mov    r8d,ebx
    65032663:	lea    r9d,[rax+rcx*1]
    65032667:	cmp    r9d,eax
    6503266a:	jb     0x65032671
    6503266c:	cmp    r9d,ecx
    6503266f:	jae    0x65032674
    65032671:	mov    r8d,esi
    65032674:	mov    DWORD PTR [rdx-0x4],r9d
    65032678:	test   r8d,r8d
    6503267b:	je     0x65032681
    6503267d:	add    WORD PTR [rdx],0x1
    65032681:	sub    edi,0x1
    65032684:	add    r10,0x2
    65032688:	sub    r11,0x2
    6503268c:	test   edi,edi
    6503268e:	jg     0x65032630
    65032690:	sub    r13d,0x1
    65032694:	add    rdx,0x2
    65032698:	add    r14d,0x1
    6503269c:	test   r13d,r13d
    6503269f:	jg     0x65032610
    650326a5:	add    bp,0xc002
    650326aa:	test   bp,bp
    650326ad:	jle    0x65032768
    650326b3:	mov    r9d,DWORD PTR [rsp+0x68]
    650326b8:	mov    edx,DWORD PTR [rsp+0x64]
    650326bc:	mov    r8d,DWORD PTR [rsp+0x60]
    650326c1:	bt     r9d,0x1f
    650326c6:	jb     0x650326fa
    650326c8:	mov    ecx,edx
    650326ca:	mov    eax,r8d
    650326cd:	add    r9d,r9d
    650326d0:	add    edx,edx
    650326d2:	shr    eax,0x1f
    650326d5:	shr    ecx,0x1f
    650326d8:	add    r8d,r8d
    650326db:	or     edx,eax
    650326dd:	or     r9d,ecx
    650326e0:	add    bp,0xffff
    650326e5:	mov    DWORD PTR [rsp+0x64],edx
    650326e9:	mov    DWORD PTR [rsp+0x68],r9d
    650326ee:	test   bp,bp
    650326f1:	mov    DWORD PTR [rsp+0x60],r8d
    650326f6:	jg     0x650326c1
    650326f8:	jmp    0x65032776
    650326fa:	test   bp,bp
    650326fd:	jle    0x65032776
    650326ff:	movzx  eax,WORD PTR [rsp+0x60]
    65032704:	cmp    ax,0x8000
    65032708:	ja     0x6503271e
    6503270a:	and    r8d,0x1ffff
    65032711:	cmp    r8d,0x18000
    65032718:	jne    0x65032819
    6503271e:	mov    eax,DWORD PTR [rsp+0x62]
    65032722:	cmp    eax,0xffffffff
    65032725:	jne    0x6503280e
    6503272b:	mov    eax,DWORD PTR [rsp+0x66]
    6503272f:	mov    DWORD PTR [rsp+0x62],ebx
    65032733:	cmp    eax,0xffffffff
    65032736:	jne    0x650327fc
    6503273c:	movzx  eax,WORD PTR [rsp+0x6a]
    65032741:	mov    DWORD PTR [rsp+0x66],ebx
    65032745:	cmp    ax,0xffff
    65032749:	jne    0x650327e8
    6503274f:	mov    edx,DWORD PTR [rsp+0x64]
    65032753:	mov    WORD PTR [rsp+0x6a],0x8000
    6503275a:	mov    r9d,DWORD PTR [rsp+0x68]
    6503275f:	add    bp,0x1
    65032763:	jmp    0x65032819
    65032768:	mov    r9d,DWORD PTR [rsp+0x68]
    6503276d:	mov    edx,DWORD PTR [rsp+0x64]
    65032771:	mov    r8d,DWORD PTR [rsp+0x60]
    65032776:	add    bp,0xffff
    6503277b:	jns    0x650326ff
    6503277d:	movzx  eax,bp
    65032780:	mov    esi,ebx
    65032782:	neg    ax
    65032785:	movzx  r10d,ax
    65032789:	add    bp,r10w
    6503278d:	data16 xchg ax,ax
    65032790:	test   BYTE PTR [rsp+0x60],0x1
    65032795:	je     0x6503279a
    65032797:	add    esi,0x1
    6503279a:	mov    ecx,edx
    6503279c:	mov    eax,r9d
    6503279f:	shr    r8d,1
    650327a2:	shl    ecx,0x1f
    650327a5:	shr    edx,1
    650327a7:	shl    eax,0x1f
    650327aa:	or     r8d,ecx
    650327ad:	shr    r9d,1
    650327b0:	or     edx,eax
    650327b2:	sub    r10,0x1
    650327b6:	mov    DWORD PTR [rsp+0x60],r8d
    650327bb:	jne    0x65032790
    650327bd:	test   esi,esi
    650327bf:	mov    DWORD PTR [rsp+0x64],edx
    650327c3:	mov    DWORD PTR [rsp+0x68],r9d
    650327c8:	lea    esi,[r10+0x1]
    650327cc:	je     0x650326ff
    650327d2:	mov    ax,r8w
    650327d6:	or     ax,si
    650327d9:	mov    WORD PTR [rsp+0x60],ax
    650327de:	mov    r8d,DWORD PTR [rsp+0x60]
    650327e3:	jmp    0x65032704
    650327e8:	mov    edx,DWORD PTR [rsp+0x64]
    650327ec:	add    ax,0x1
    650327f0:	mov    WORD PTR [rsp+0x6a],ax
    650327f5:	mov    r9d,DWORD PTR [rsp+0x68]
    650327fa:	jmp    0x65032819
    650327fc:	add    eax,0x1
    650327ff:	mov    DWORD PTR [rsp+0x66],eax
    65032803:	mov    r9d,DWORD PTR [rsp+0x68]
    65032808:	mov    edx,DWORD PTR [rsp+0x64]
    6503280c:	jmp    0x65032819
    6503280e:	add    eax,0x1
    65032811:	mov    DWORD PTR [rsp+0x62],eax
    65032815:	mov    edx,DWORD PTR [rsp+0x64]
    65032819:	cmp    bp,0x7fff
    6503281e:	jb     0x6503285a
    65032820:	cmp    WORD PTR [rsp+0x32],bx
    65032825:	mov    r10d,DWORD PTR [rsp+0x40]
    6503282a:	mov    rdx,QWORD PTR [rsp+0x38]
    6503282f:	mov    edi,0x7fff8000
    65032834:	mov    r12d,0xffff8000
    6503283a:	mov    r9d,ebx
    6503283d:	mov    eax,edi
    6503283f:	mov    DWORD PTR [rsp+0x74],ebx
    65032843:	mov    r8d,ebx
    65032846:	cmovne eax,r12d
    6503284a:	mov    DWORD PTR [rsp+0x70],ebx
    6503284e:	mov    r11d,0x5
    65032854:	mov    DWORD PTR [rsp+0x78],eax
    65032858:	jmp    0x650328be
    6503285a:	movzx  eax,WORD PTR [rsp+0x62]
    6503285f:	or     bp,WORD PTR [rsp+0x32]
    65032864:	mov    r10d,DWORD PTR [rsp+0x40]
    65032869:	mov    DWORD PTR [rsp+0x72],edx
    6503286d:	mov    rdx,QWORD PTR [rsp+0x38]
    65032872:	mov    WORD PTR [rsp+0x70],ax
    65032877:	mov    r8d,DWORD PTR [rsp+0x70]
    6503287c:	mov    DWORD PTR [rsp+0x76],r9d
    65032881:	mov    r9d,DWORD PTR [rsp+0x74]
    65032886:	mov    WORD PTR [rsp+0x7a],bp
    6503288b:	mov    edi,0x7fff8000
    65032890:	mov    r11d,0x5
    65032896:	mov    r12d,0xffff8000
    6503289c:	jmp    0x650328be
    6503289e:	test   dx,dx
    650328a1:	mov    rdx,QWORD PTR [rsp+0x38]
    650328a6:	mov    eax,edi
    650328a8:	cmovne eax,r12d
    650328ac:	mov    r9d,ebx
    650328af:	mov    DWORD PTR [rsp+0x74],ebx
    650328b3:	mov    r8d,ebx
    650328b6:	mov    DWORD PTR [rsp+0x70],ebx
    650328ba:	mov    DWORD PTR [rsp+0x78],eax
    650328be:	test   r10d,r10d
    650328c1:	jne    0x650324c0
    650328c7:	mov    ecx,DWORD PTR [rsp+0x34]
    650328cb:	jmp    0x650328d7
    650328cd:	mov    r9d,DWORD PTR [rsp+0x74]
    650328d2:	mov    r8d,DWORD PTR [rsp+0x70]
    650328d7:	mov    eax,DWORD PTR [rsp+0x78]
    650328db:	shr    eax,0x10
    650328de:	cmp    ax,0x3fff
    650328e2:	jb     0x65032c47
    650328e8:	add    cx,0x1
    650328ec:	mov    r14d,ebx
    650328ef:	mov    DWORD PTR [rsp+0x60],ebx
    650328f3:	mov    DWORD PTR [rsp+0x34],ecx
    650328f7:	movzx  ecx,WORD PTR [rsp+0x8a]
    650328ff:	mov    DWORD PTR [rsp+0x64],ebx
    65032903:	movzx  r15d,cx
    65032907:	and    cx,0x7fff
    6503290c:	mov    DWORD PTR [rsp+0x68],ebx
    65032910:	xor    r15w,ax
    65032914:	and    ax,0x7fff
    65032918:	and    r15w,0x8000
    6503291e:	cmp    ax,0x7fff
    65032922:	lea    ebp,[rax+rcx*1]
    65032925:	jae    0x65032c35
    6503292b:	cmp    cx,0x7fff
    65032930:	jae    0x65032c35
    65032936:	cmp    bp,0xbffd
    6503293b:	ja     0x65032c35
    65032941:	cmp    bp,0x3fbf
    65032946:	ja     0x65032957
    65032948:	mov    DWORD PTR [rsp+0x78],ebx
    6503294c:	mov    r9d,ebx
    6503294f:	mov    r8d,ebx
    65032952:	jmp    0x65032c47
    65032957:	test   ax,ax
    6503295a:	jne    0x65032980
    6503295c:	mov    eax,DWORD PTR [rsp+0x78]
    65032960:	add    bp,0x1
    65032964:	btr    eax,0x1f
    65032968:	test   eax,eax
    6503296a:	jne    0x65032980
    6503296c:	test   r9d,r9d
    6503296f:	jne    0x65032980
    65032971:	test   r8d,r8d
    65032974:	jne    0x65032980
    65032976:	mov    WORD PTR [rsp+0x7a],bx
    6503297b:	jmp    0x65032c47
    65032980:	test   cx,cx
    65032983:	jne    0x650329b9
    65032985:	mov    eax,DWORD PTR [rsp+0x88]
    6503298c:	add    bp,0x1
    65032990:	btr    eax,0x1f
    65032994:	test   eax,eax
    65032996:	jne    0x650329b9
    65032998:	cmp    DWORD PTR [rsp+0x84],ebx
    6503299f:	jne    0x650329b9
    650329a1:	cmp    DWORD PTR [rsp+0x80],ebx
    650329a8:	jne    0x650329b9
    650329aa:	mov    DWORD PTR [rsp+0x78],ebx
    650329ae:	mov    r9d,ebx
    650329b1:	mov    r8d,ebx
    650329b4:	jmp    0x65032c47
    650329b9:	mov    r13d,ebx
    650329bc:	lea    rdx,[rsp+0x64]
    650329c1:	test   r11d,r11d
    650329c4:	lea    eax,[r13+r13*1+0x0]
    650329c9:	mov    edi,r11d
    650329cc:	movsxd rcx,eax
    650329cf:	jle    0x65032a55
    650329d5:	mov    r12d,r13d
    650329d8:	lea    r10,[rsp+0x88]
    650329e0:	lea    r11,[rsp+rcx*1+0x70]
    650329e5:	and    r12d,0x1
    650329e9:	data16 xchg ax,ax
    650329ec:	data16 data16 xchg ax,ax
    650329f0:	movzx  ecx,WORD PTR [r10]
    650329f4:	movzx  eax,WORD PTR [r11]
    650329f8:	imul   ecx,eax
    650329fb:	test   r12d,r12d
    650329fe:	je     0x65032a1d
    65032a00:	mov    eax,DWORD PTR [rdx-0x4]
    65032a03:	mov    r8d,ebx
    65032a06:	lea    r9d,[rax+rcx*1]
    65032a0a:	cmp    r9d,eax
    65032a0d:	jb     0x65032a14
    65032a0f:	cmp    r9d,ecx
    65032a12:	jae    0x65032a17
    65032a14:	mov    r8d,esi
    65032a17:	mov    DWORD PTR [rdx-0x4],r9d
    65032a1b:	jmp    0x65032a38
    65032a1d:	mov    eax,DWORD PTR [rdx-0x4]
    65032a20:	mov    r8d,ebx
    65032a23:	lea    r9d,[rax+rcx*1]
    65032a27:	cmp    r9d,eax
    65032a2a:	jb     0x65032a31
    65032a2c:	cmp    r9d,ecx
    65032a2f:	jae    0x65032a34
    65032a31:	mov    r8d,esi
    65032a34:	mov    DWORD PTR [rdx-0x4],r9d
    65032a38:	test   r8d,r8d
    65032a3b:	je     0x65032a41
    65032a3d:	add    WORD PTR [rdx],0x1
    65032a41:	sub    edi,0x1
    65032a44:	add    r11,0x2
    65032a48:	sub    r10,0x2
    65032a4c:	test   edi,edi
    65032a4e:	jg     0x650329f0
    65032a50:	mov    r11d,DWORD PTR [rsp+0x48]
    65032a55:	sub    r11d,0x1
    65032a59:	add    rdx,0x2
    65032a5d:	add    r13d,0x1
    65032a61:	test   r11d,r11d
    65032a64:	mov    DWORD PTR [rsp+0x48],r11d
    65032a69:	jg     0x650329c1
    65032a6f:	add    bp,0xc002
    65032a74:	test   bp,bp
    65032a77:	jle    0x65032b3e
    65032a7d:	mov    r9d,DWORD PTR [rsp+0x68]
    65032a82:	mov    edx,DWORD PTR [rsp+0x64]
    65032a86:	mov    r8d,DWORD PTR [rsp+0x60]
    65032a8b:	xchg   ax,ax
    65032a8d:	data16 xchg ax,ax
    65032a90:	bt     r9d,0x1f
    65032a95:	jb     0x65032acc
    65032a97:	mov    ecx,edx
    65032a99:	mov    eax,r8d
    65032a9c:	add    r9d,r9d
    65032a9f:	add    edx,edx
    65032aa1:	shr    eax,0x1f
    65032aa4:	shr    ecx,0x1f
    65032aa7:	add    r8d,r8d
    65032aaa:	or     edx,eax
    65032aac:	or     r9d,ecx
    65032aaf:	add    bp,0xffff
    65032ab4:	mov    DWORD PTR [rsp+0x64],edx
    65032ab8:	mov    DWORD PTR [rsp+0x68],r9d
    65032abd:	test   bp,bp
    65032ac0:	mov    DWORD PTR [rsp+0x60],r8d
    65032ac5:	jg     0x65032a90
    65032ac7:	jmp    0x65032b4c
    65032acc:	test   bp,bp
    65032acf:	jle    0x65032b4c
    65032ad5:	movzx  eax,WORD PTR [rsp+0x60]
    65032ada:	cmp    ax,0x8000
    65032ade:	ja     0x65032af4
    65032ae0:	and    r8d,0x1ffff
    65032ae7:	cmp    r8d,0x18000
    65032aee:	jne    0x65032be9
    65032af4:	mov    eax,DWORD PTR [rsp+0x62]
    65032af8:	cmp    eax,0xffffffff
    65032afb:	jne    0x65032bde
    65032b01:	mov    eax,DWORD PTR [rsp+0x66]
    65032b05:	mov    DWORD PTR [rsp+0x62],ebx
    65032b09:	cmp    eax,0xffffffff
    65032b0c:	jne    0x65032bcc
    65032b12:	movzx  eax,WORD PTR [rsp+0x6a]
    65032b17:	mov    DWORD PTR [rsp+0x66],ebx
    65032b1b:	cmp    ax,0xffff
    65032b1f:	jne    0x65032bb8
    65032b25:	mov    edx,DWORD PTR [rsp+0x64]
    65032b29:	mov    WORD PTR [rsp+0x6a],0x8000
    65032b30:	mov    r9d,DWORD PTR [rsp+0x68]
    65032b35:	add    bp,0x1
    65032b39:	jmp    0x65032be9
    65032b3e:	mov    r9d,DWORD PTR [rsp+0x68]
    65032b43:	mov    edx,DWORD PTR [rsp+0x64]
    65032b47:	mov    r8d,DWORD PTR [rsp+0x60]
    65032b4c:	add    bp,0xffff
    65032b51:	jns    0x65032ad5
    65032b53:	movzx  eax,bp
    65032b56:	neg    ax
    65032b59:	movzx  r10d,ax
    65032b5d:	add    bp,r10w
    65032b61:	test   BYTE PTR [rsp+0x60],0x1
    65032b66:	je     0x65032b6c
    65032b68:	add    r14d,0x1
    65032b6c:	mov    ecx,edx
    65032b6e:	mov    eax,r9d
    65032b71:	shr    r8d,1
    65032b74:	shl    ecx,0x1f
    65032b77:	shr    edx,1
    65032b79:	shl    eax,0x1f
    65032b7c:	or     r8d,ecx
    65032b7f:	shr    r9d,1
    65032b82:	or     edx,eax
    65032b84:	sub    r10,0x1
    65032b88:	mov    DWORD PTR [rsp+0x60],r8d
    65032b8d:	jne    0x65032b61
    65032b8f:	test   r14d,r14d
    65032b92:	mov    DWORD PTR [rsp+0x64],edx
    65032b96:	mov    DWORD PTR [rsp+0x68],r9d
    65032b9b:	je     0x65032ad5
    65032ba1:	mov    ax,r8w
    65032ba5:	or     ax,0x1
    65032ba9:	mov    WORD PTR [rsp+0x60],ax
    65032bae:	mov    r8d,DWORD PTR [rsp+0x60]
    65032bb3:	jmp    0x65032ada
    65032bb8:	mov    edx,DWORD PTR [rsp+0x64]
    65032bbc:	add    ax,0x1
    65032bc0:	mov    WORD PTR [rsp+0x6a],ax
    65032bc5:	mov    r9d,DWORD PTR [rsp+0x68]
    65032bca:	jmp    0x65032be9
    65032bcc:	add    eax,0x1
    65032bcf:	mov    DWORD PTR [rsp+0x66],eax
    65032bd3:	mov    r9d,DWORD PTR [rsp+0x68]
    65032bd8:	mov    edx,DWORD PTR [rsp+0x64]
    65032bdc:	jmp    0x65032be9
    65032bde:	add    eax,0x1
    65032be1:	mov    DWORD PTR [rsp+0x62],eax
    65032be5:	mov    edx,DWORD PTR [rsp+0x64]
    65032be9:	cmp    bp,0x7fff
    65032bee:	jb     0x65032c0d
    65032bf0:	test   r15w,r15w
    65032bf4:	mov    eax,0x7fff8000
    65032bf9:	mov    ecx,0xffff8000
    65032bfe:	cmovne eax,ecx
    65032c01:	mov    r9d,ebx
    65032c04:	mov    r8d,ebx
    65032c07:	mov    DWORD PTR [rsp+0x78],eax
    65032c0b:	jmp    0x65032c47
    65032c0d:	movzx  eax,WORD PTR [rsp+0x62]
    65032c12:	mov    DWORD PTR [rsp+0x72],edx
    65032c16:	or     bp,r15w
    65032c1a:	mov    DWORD PTR [rsp+0x76],r9d
    65032c1f:	mov    r9d,DWORD PTR [rsp+0x74]
    65032c24:	mov    WORD PTR [rsp+0x70],ax
    65032c29:	mov    r8d,DWORD PTR [rsp+0x70]
    65032c2e:	mov    WORD PTR [rsp+0x7a],bp
    65032c33:	jmp    0x65032c47
    65032c35:	test   r15w,r15w
    65032c39:	mov    r9d,ebx
    65032c3c:	mov    r8d,ebx
    65032c3f:	cmovne edi,r12d
    65032c43:	mov    DWORD PTR [rsp+0x78],edi
    65032c47:	test   BYTE PTR [rsp+0x50],0x1
    65032c4c:	mov    r13,QWORD PTR [rsp+0x58]
    65032c51:	mov    eax,DWORD PTR [rsp+0x34]
    65032c55:	mov    r15,QWORD PTR [rsp+0xb0]
    65032c5d:	mov    r14,QWORD PTR [rsp+0xb8]
    65032c65:	mov    WORD PTR [r13+0x0],ax
    65032c6a:	je     0x65032ca7
    65032c6c:	mov    edi,DWORD PTR [rsp+0x44]
    65032c70:	cwde   
    65032c71:	add    edi,eax
    65032c73:	test   edi,edi
    65032c75:	jg     0x65032cab
    65032c77:	cmp    WORD PTR [rsp+0x30],0x8000
    65032c7e:	mov    eax,0x20
    65032c83:	mov    ecx,0x2d
    65032c88:	cmove  eax,ecx
    65032c8b:	mov    WORD PTR [r13+0x0],bx
    65032c90:	mov    BYTE PTR [r13+0x3],0x1
    65032c95:	mov    BYTE PTR [r13+0x4],0x30
    65032c9a:	mov    BYTE PTR [r13+0x5],bl
    65032c9e:	mov    BYTE PTR [r13+0x2],al
    65032ca2:	jmp    0x65032f4c
    65032ca7:	mov    edi,DWORD PTR [rsp+0x44]
    65032cab:	mov    r10d,DWORD PTR [rsp+0x78]
    65032cb0:	mov    ecx,r9d
    65032cb3:	mov    eax,0x15
    65032cb8:	cmp    edi,eax
    65032cba:	mov    WORD PTR [rsp+0x7a],bx
    65032cbf:	cmovg  edi,eax
    65032cc2:	add    r9d,r9d
    65032cc5:	shr    ecx,0x1f
    65032cc8:	mov    eax,r8d
    65032ccb:	add    r8d,r8d
    65032cce:	shr    r10d,0x10
    65032cd2:	shr    eax,0x1f
    65032cd5:	or     r9d,eax
    65032cd8:	mov    eax,DWORD PTR [rsp+0x78]
    65032cdc:	lea    edx,[rax+rax*1]
    65032cdf:	mov    eax,r8d
    65032ce2:	add    r8d,r8d
    65032ce5:	or     edx,ecx
    65032ce7:	mov    ecx,r9d
    65032cea:	add    r9d,r9d
    65032ced:	shr    eax,0x1f
    65032cf0:	shr    ecx,0x1f
    65032cf3:	add    edx,edx
    65032cf5:	or     r9d,eax
    65032cf8:	or     edx,ecx
    65032cfa:	mov    eax,r8d
    65032cfd:	mov    ecx,r9d
    65032d00:	shr    eax,0x1f
    65032d03:	add    r9d,r9d
    65032d06:	or     r9d,eax
    65032d09:	shr    ecx,0x1f
    65032d0c:	add    edx,edx
    65032d0e:	or     edx,ecx
    65032d10:	mov    ecx,r9d
    65032d13:	add    r9d,r9d
    65032d16:	shr    ecx,0x1f
    65032d19:	add    edx,edx
    65032d1b:	add    r8d,r8d
    65032d1e:	or     edx,ecx
    65032d20:	mov    eax,r8d
    65032d23:	add    r8d,r8d
    65032d26:	shr    eax,0x1f
    65032d29:	add    edx,edx
    65032d2b:	or     r9d,eax
    65032d2e:	mov    eax,r8d
    65032d31:	add    r8d,r8d
    65032d34:	mov    ecx,r9d
    65032d37:	shr    eax,0x1f
    65032d3a:	add    r9d,r9d
    65032d3d:	or     r9d,eax
    65032d40:	shr    ecx,0x1f
    65032d43:	mov    eax,r8d
    65032d46:	or     edx,ecx
    65032d48:	mov    ecx,r9d
    65032d4b:	shr    eax,0x1f
    65032d4e:	add    r9d,r9d
    65032d51:	shr    ecx,0x1f
    65032d54:	add    r8d,r8d
    65032d57:	or     r9d,eax
    65032d5a:	add    edx,edx
    65032d5c:	mov    eax,r8d
    65032d5f:	or     edx,ecx
    65032d61:	mov    ecx,r9d
    65032d64:	shr    eax,0x1f
    65032d67:	add    r9d,r9d
    65032d6a:	shr    ecx,0x1f
    65032d6d:	add    r8d,r8d
    65032d70:	or     r9d,eax
    65032d73:	add    edx,edx
    65032d75:	mov    eax,r8d
    65032d78:	or     edx,ecx
    65032d7a:	mov    ecx,r9d
    65032d7d:	shr    eax,0x1f
    65032d80:	add    r9d,r9d
    65032d83:	add    r8d,r8d
    65032d86:	lea    r11d,[rdx+rdx*1]
    65032d8a:	or     r9d,eax
    65032d8d:	shr    ecx,0x1f
    65032d90:	mov    DWORD PTR [rsp+0x70],r8d
    65032d95:	or     r11d,ecx
    65032d98:	mov    DWORD PTR [rsp+0x74],r9d
    65032d9d:	sub    r10d,0x3ffe
    65032da4:	mov    DWORD PTR [rsp+0x78],r11d
    65032da9:	jns    0x65032df1
    65032dab:	neg    r10d
    65032dae:	movzx  edx,r10b
    65032db2:	test   edx,edx
    65032db4:	jle    0x65032df1
    65032db6:	data16 data16 xchg ax,ax
    65032dba:	data16 xchg ax,ax
    65032dbd:	data16 xchg ax,ax
    65032dc0:	mov    ecx,r9d
    65032dc3:	mov    eax,r11d
    65032dc6:	shr    r8d,1
    65032dc9:	shr    r9d,1
    65032dcc:	shl    eax,0x1f
    65032dcf:	shl    ecx,0x1f
    65032dd2:	sub    edx,0x1
    65032dd5:	shr    r11d,1
    65032dd8:	or     r9d,eax
    65032ddb:	or     r8d,ecx
    65032dde:	test   edx,edx
    65032de0:	jg     0x65032dc0
    65032de2:	mov    DWORD PTR [rsp+0x74],r9d
    65032de7:	mov    DWORD PTR [rsp+0x70],r8d
    65032dec:	mov    DWORD PTR [rsp+0x78],r11d
    65032df1:	lea    r12d,[rdi+0x1]
    65032df5:	lea    rbp,[r13+0x4]
    65032df9:	test   r12d,r12d
    65032dfc:	mov    r10,rbp
    65032dff:	jle    0x65032efc
    65032e05:	data16 data16 xchg ax,ax
    65032e09:	data16 xchg ax,ax
    65032e0c:	data16 data16 xchg ax,ax
    65032e10:	lea    rcx,[rsp+0x70]
    65032e15:	lea    rdx,[rsp+0x90]
    65032e1d:	mov    rax,QWORD PTR [rcx]
    65032e20:	mov    QWORD PTR [rdx],rax
    65032e23:	mov    eax,DWORD PTR [rcx+0x8]
    65032e26:	mov    ecx,r9d
    65032e29:	mov    DWORD PTR [rdx+0x8],eax
    65032e2c:	mov    eax,r8d
    65032e2f:	lea    edx,[r8+r8*1]
    65032e33:	shr    eax,0x1f
    65032e36:	shr    ecx,0x1f
    65032e39:	lea    r8d,[r9+r9*1]
    65032e3d:	or     r8d,eax
    65032e40:	lea    r9d,[r11+r11*1]
    65032e44:	mov    eax,edx
    65032e46:	or     r9d,ecx
    65032e49:	mov    ecx,r8d
    65032e4c:	shr    eax,0x1f
    65032e4f:	add    r8d,r8d
    65032e52:	add    edx,edx
    65032e54:	shr    ecx,0x1f
    65032e57:	or     r8d,eax
    65032e5a:	mov    rax,QWORD PTR [rsp+0x90]
    65032e62:	lea    r11d,[r9+r9*1]
    65032e66:	lea    edi,[rax+rdx*1]
    65032e69:	or     r11d,ecx
    65032e6c:	cmp    edi,edx
    65032e6e:	jb     0x65032e74
    65032e70:	cmp    edi,eax
    65032e72:	jae    0x65032e91
    65032e74:	lea    ecx,[r8+0x1]
    65032e78:	mov    edx,ebx
    65032e7a:	cmp    ecx,r8d
    65032e7d:	jb     0x65032e84
    65032e7f:	cmp    ecx,0x1
    65032e82:	jae    0x65032e86
    65032e84:	mov    edx,esi
    65032e86:	test   edx,edx
    65032e88:	mov    r8d,ecx
    65032e8b:	je     0x65032e91
    65032e8d:	add    r11d,0x1
    65032e91:	shr    rax,0x20
    65032e95:	lea    r9d,[r8+rax*1]
    65032e99:	cmp    r9d,r8d
    65032e9c:	jb     0x65032ea3
    65032e9e:	cmp    r9d,eax
    65032ea1:	jae    0x65032ea7
    65032ea3:	add    r11d,0x1
    65032ea7:	add    r11d,DWORD PTR [rsp+0x98]
    65032eaf:	mov    ecx,r9d
    65032eb2:	add    r9d,r9d
    65032eb5:	shr    ecx,0x1f
    65032eb8:	mov    eax,edi
    65032eba:	lea    r8d,[rdi+rdi*1]
    65032ebe:	shr    eax,0x1f
    65032ec1:	sub    r12d,0x1
    65032ec5:	add    r10,0x1
    65032ec9:	or     r9d,eax
    65032ecc:	lea    eax,[r11+r11*1]
    65032ed0:	mov    DWORD PTR [rsp+0x70],r8d
    65032ed5:	or     eax,ecx
    65032ed7:	mov    DWORD PTR [rsp+0x74],r9d
    65032edc:	mov    DWORD PTR [rsp+0x78],eax
    65032ee0:	shr    eax,0x18
    65032ee3:	mov    BYTE PTR [rsp+0x7b],bl
    65032ee7:	add    al,0x30
    65032ee9:	test   r12d,r12d
    65032eec:	mov    BYTE PTR [r10-0x1],al
    65032ef0:	jle    0x65032efc
    65032ef2:	mov    r11d,DWORD PTR [rsp+0x78]
    65032ef7:	jmp    0x65032e10
    65032efc:	movzx  eax,BYTE PTR [r10-0x1]
    65032f01:	sub    r10,0x2
    65032f05:	cmp    al,0x35
    65032f07:	jl     0x65032f88
    65032f0d:	cmp    r10,rbp
    65032f10:	jb     0x65032f25
    65032f12:	cmp    BYTE PTR [r10],0x39
    65032f16:	jne    0x65032f25
    65032f18:	mov    BYTE PTR [r10],0x30
    65032f1c:	sub    r10,0x1
    65032f20:	cmp    r10,rbp
    65032f23:	jae    0x65032f12
    65032f25:	cmp    r10,rbp
    65032f28:	jae    0x65032f34
    65032f2a:	add    r10,0x1
    65032f2e:	add    WORD PTR [r13+0x0],0x1
    65032f34:	add    BYTE PTR [r10],0x1
    65032f38:	sub    r10b,r13b
    65032f3b:	sub    r10b,0x3
    65032f3f:	movsx  rcx,r10b
    65032f43:	mov    BYTE PTR [r13+0x3],r10b
    65032f47:	mov    BYTE PTR [rcx+r13*1+0x4],bl
    65032f4c:	mov    r13,QWORD PTR [rsp+0xc0]
    65032f54:	mov    r12,QWORD PTR [rsp+0xc8]
    65032f5c:	mov    rbp,QWORD PTR [rsp+0xd0]
    65032f64:	mov    rbx,QWORD PTR [rsp+0xf8]
    65032f6c:	mov    eax,esi
    65032f6e:	mov    rcx,QWORD PTR [rsp+0xa0]
    65032f76:	xor    rcx,rsp
    65032f79:	call   0x6501e650
    65032f7e:	add    rsp,0xd8
    65032f85:	pop    rdi
    65032f86:	pop    rsi
    65032f87:	ret    
    65032f88:	cmp    r10,rbp
    65032f8b:	jb     0x65032f9f
    65032f8d:	data16 xchg ax,ax
    65032f90:	cmp    BYTE PTR [r10],0x30
    65032f94:	jne    0x65032f9f
    65032f96:	sub    r10,0x1
    65032f9a:	cmp    r10,rbp
    65032f9d:	jae    0x65032f90
    65032f9f:	cmp    r10,rbp
    65032fa2:	jae    0x65032f38
    65032fa4:	cmp    WORD PTR [rsp+0x30],0x8000
    65032fab:	mov    eax,0x20
    65032fb0:	mov    ecx,0x2d
    65032fb5:	cmove  eax,ecx
    65032fb8:	mov    WORD PTR [r13+0x0],bx
    65032fbd:	mov    BYTE PTR [r13+0x3],0x1
    65032fc2:	mov    BYTE PTR [rbp+0x0],0x30
    65032fc6:	mov    BYTE PTR [r13+0x5],bl
    65032fca:	mov    BYTE PTR [r13+0x2],al
    65032fce:	jmp    0x65032f4c
    65032fd3:	int3   
    65032fd4:	int3   
    65032fd5:	int3   
    65032fd6:	int3   
    65032fd7:	int3   
    65032fd8:	int3   
    65032fd9:	int3   
    65032fda:	int3   
    65032fdb:	int3   
    65032fdc:	int3   
    65032fdd:	int3   
    65032fde:	int3   
    65032fdf:	int3   
    65032fe0:	mov    QWORD PTR [rsp+0x8],rbx
    65032fe5:	mov    QWORD PTR [rsp+0x10],rbp
    65032fea:	mov    QWORD PTR [rsp+0x20],rsi
    65032fef:	push   rdi
    65032ff0:	sub    rsp,0x20
    65032ff4:	mov    rax,QWORD PTR [rip+0x10125]        # 0x65043120
    65032ffb:	xor    rax,rsp
    65032ffe:	mov    QWORD PTR [rsp+0x10],rax
    65033003:	test   edx,edx
    65033005:	mov    rbx,r8
    65033008:	mov    esi,edx
    6503300a:	mov    rbp,rcx
    6503300d:	mov    di,0x404e
    65033011:	mov    DWORD PTR [r8],0x0
    65033018:	mov    DWORD PTR [r8+0x4],0x0
    65033020:	mov    DWORD PTR [r8+0x8],0x0
    65033028:	je     0x6503317a
    6503302e:	xchg   ax,ax
    65033030:	mov    rax,QWORD PTR [rbx]
    65033033:	mov    r11d,DWORD PTR [rbx+0x8]
    65033037:	lea    rcx,[rsp]
    6503303b:	mov    QWORD PTR [rcx],rax
    6503303e:	mov    eax,DWORD PTR [rbx+0x8]
    65033041:	add    r11d,r11d
    65033044:	mov    DWORD PTR [rcx+0x8],eax
    65033047:	mov    ecx,DWORD PTR [rbx]
    65033049:	mov    eax,DWORD PTR [rbx+0x4]
    6503304c:	lea    r9d,[rcx+rcx*1]
    65033050:	mov    edx,ecx
    65033052:	lea    r10d,[rax+rax*1]
    65033056:	mov    r8d,eax
    65033059:	shr    edx,0x1f
    6503305c:	mov    eax,r9d
    6503305f:	or     r10d,edx
    65033062:	shr    r8d,0x1f
    65033066:	lea    edx,[r9+r9*1]
    6503306a:	or     r11d,r8d
    6503306d:	mov    ecx,r10d
    65033070:	shr    eax,0x1f
    65033073:	shr    ecx,0x1f
    65033076:	add    r11d,r11d
    65033079:	add    r10d,r10d
    6503307c:	or     r11d,ecx
    6503307f:	mov    ecx,DWORD PTR [rsp]
    65033082:	or     r10d,eax
    65033085:	lea    r8d,[rdx+rcx*1]
    65033089:	xor    eax,eax
    6503308b:	mov    DWORD PTR [rbx],edx
    6503308d:	cmp    r8d,edx
    65033090:	mov    DWORD PTR [rbx+0x4],r10d
    65033094:	mov    DWORD PTR [rbx+0x8],r11d
    65033098:	jb     0x6503309f
    6503309a:	cmp    r8d,ecx
    6503309d:	jae    0x650330a4
    6503309f:	mov    eax,0x1
    650330a4:	test   eax,eax
    650330a6:	mov    DWORD PTR [rbx],r8d
    650330a9:	je     0x650330ce
    650330ab:	lea    eax,[r10+0x1]
    650330af:	xor    ecx,ecx
    650330b1:	cmp    eax,r10d
    650330b4:	jb     0x650330bb
    650330b6:	cmp    eax,0x1
    650330b9:	jae    0x650330c0
    650330bb:	mov    ecx,0x1
    650330c0:	test   ecx,ecx
    650330c2:	mov    DWORD PTR [rbx+0x4],eax
    650330c5:	je     0x650330ce
    650330c7:	lea    eax,[r11+0x1]
    650330cb:	mov    DWORD PTR [rbx+0x8],eax
    650330ce:	mov    eax,DWORD PTR [rbx+0x4]
    650330d1:	mov    rcx,QWORD PTR [rsp]
    650330d5:	xor    edx,edx
    650330d7:	shr    rcx,0x20
    650330db:	lea    r9d,[rax+rcx*1]
    650330df:	cmp    r9d,eax
    650330e2:	jb     0x650330e9
    650330e4:	cmp    r9d,ecx
    650330e7:	jae    0x650330ee
    650330e9:	mov    edx,0x1
    650330ee:	test   edx,edx
    650330f0:	mov    DWORD PTR [rbx+0x4],r9d
    650330f4:	je     0x650330fa
    650330f6:	add    DWORD PTR [rbx+0x8],0x1
    650330fa:	mov    eax,DWORD PTR [rsp+0x8]
    650330fe:	mov    ecx,r9d
    65033101:	add    r9d,r9d
    65033104:	add    DWORD PTR [rbx+0x8],eax
    65033107:	mov    edx,DWORD PTR [rbx+0x8]
    6503310a:	shr    ecx,0x1f
    6503310d:	mov    eax,r8d
    65033110:	add    r8d,r8d
    65033113:	add    edx,edx
    65033115:	shr    eax,0x1f
    65033118:	or     edx,ecx
    6503311a:	mov    DWORD PTR [rbx],r8d
    6503311d:	or     r9d,eax
    65033120:	mov    DWORD PTR [rbx+0x8],edx
    65033123:	xor    r10d,r10d
    65033126:	mov    DWORD PTR [rbx+0x4],r9d
    6503312a:	movsx  ecx,BYTE PTR [rbp+0x0]
    6503312e:	lea    eax,[r8+rcx*1]
    65033132:	mov    DWORD PTR [rsp],ecx
    65033135:	cmp    eax,r8d
    65033138:	jb     0x6503313e
    6503313a:	cmp    eax,ecx
    6503313c:	jae    0x65033144
    6503313e:	mov    r10d,0x1
    65033144:	test   r10d,r10d
    65033147:	mov    DWORD PTR [rbx],eax
    65033149:	je     0x6503316d
    6503314b:	lea    eax,[r9+0x1]
    6503314f:	xor    ecx,ecx
    65033151:	cmp    eax,r9d
    65033154:	jb     0x6503315b
    65033156:	cmp    eax,0x1
    65033159:	jae    0x65033160
    6503315b:	mov    ecx,0x1
    65033160:	test   ecx,ecx
    65033162:	mov    DWORD PTR [rbx+0x4],eax
    65033165:	je     0x6503316d
    65033167:	lea    eax,[rdx+0x1]
    6503316a:	mov    DWORD PTR [rbx+0x8],eax
    6503316d:	add    rbp,0x1
    65033171:	add    esi,0xffffffff
    65033174:	jne    0x65033030
    6503317a:	cmp    DWORD PTR [rbx+0x8],0x0
    6503317e:	jne    0x650331ac
    65033180:	mov    ecx,DWORD PTR [rbx]
    65033182:	mov    edx,DWORD PTR [rbx+0x4]
    65033185:	add    di,0xfff0
    6503318a:	mov    r8d,edx
    6503318d:	mov    eax,ecx
    6503318f:	shl    edx,0x10
    65033192:	shr    eax,0x10
    65033195:	shr    r8d,0x10
    65033199:	shl    ecx,0x10
    6503319c:	or     edx,eax
    6503319e:	test   r8d,r8d
    650331a1:	mov    DWORD PTR [rbx+0x8],r8d
    650331a5:	mov    DWORD PTR [rbx+0x4],edx
    650331a8:	mov    DWORD PTR [rbx],ecx
    650331aa:	je     0x65033180
    650331ac:	bt     DWORD PTR [rbx+0x8],0xf
    650331b1:	jb     0x650331f3
    650331b3:	nop
    650331b4:	data16 data16 xchg ax,ax
    650331b8:	data16 data16 xchg ax,ax
    650331bc:	data16 data16 xchg ax,ax
    650331c0:	mov    eax,DWORD PTR [rbx]
    650331c2:	mov    ecx,DWORD PTR [rbx+0x4]
    650331c5:	add    di,0xffff
    650331ca:	mov    edx,eax
    650331cc:	add    eax,eax
    650331ce:	mov    r8d,ecx
    650331d1:	mov    DWORD PTR [rbx],eax
    650331d3:	shr    edx,0x1f
    650331d6:	shr    r8d,0x1f
    650331da:	lea    eax,[rcx+rcx*1]
    650331dd:	or     eax,edx
    650331df:	mov    DWORD PTR [rbx+0x4],eax
    650331e2:	mov    eax,DWORD PTR [rbx+0x8]
    650331e5:	add    eax,eax
    650331e7:	or     eax,r8d
    650331ea:	bt     eax,0xf
    650331ee:	mov    DWORD PTR [rbx+0x8],eax
    650331f1:	jae    0x650331c0
    650331f3:	mov    WORD PTR [rbx+0xa],di
    650331f7:	mov    rcx,QWORD PTR [rsp+0x10]
    650331fc:	xor    rcx,rsp
    650331ff:	call   0x6501e650
    65033204:	mov    rbx,QWORD PTR [rsp+0x30]
    65033209:	mov    rbp,QWORD PTR [rsp+0x38]
    6503320e:	mov    rsi,QWORD PTR [rsp+0x48]
    65033213:	add    rsp,0x20
    65033217:	pop    rdi
    65033218:	ret    
    65033219:	int3   
    6503321a:	int3   
    6503321b:	int3   
    6503321c:	int3   
    6503321d:	int3   
    6503321e:	int3   
    6503321f:	int3   
    65033220:	int3   
    65033221:	int3   
    65033222:	int3   
    65033223:	int3   
    65033224:	int3   
    65033225:	int3   
    65033226:	data16 data16 xchg ax,ax
    6503322a:	data16 data16 xchg ax,ax
    6503322e:	xchg   ax,ax
    65033230:	sub    rsp,0x10
    65033234:	mov    QWORD PTR [rsp],r10
    65033238:	mov    QWORD PTR [rsp+0x8],r11
    6503323d:	xor    r11,r11
    65033240:	lea    r10,[rsp+0x18]
    65033245:	sub    r10,rax
    65033248:	cmovb  r10,r11
    6503324c:	mov    r11,QWORD PTR gs:0x10
    65033255:	cmp    r10,r11
    65033258:	jae    0x65033270
    6503325a:	and    r10w,0xf000
    65033260:	lea    r11,[r11-0x1000]
    65033267:	mov    BYTE PTR [r11],0x0
    6503326b:	cmp    r10,r11
    6503326e:	jne    0x65033260
    65033270:	mov    r10,QWORD PTR [rsp]
    65033274:	mov    r11,QWORD PTR [rsp+0x8]
    65033279:	add    rsp,0x10
    6503327d:	ret    
    6503327e:	int3   
    6503327f:	int3   
    65033280:	int3   
    65033281:	int3   
    65033282:	int3   
    65033283:	int3   
    65033284:	int3   
    65033285:	int3   
    65033286:	data16 data16 xchg ax,ax
    6503328a:	data16 data16 xchg ax,ax
    6503328e:	xchg   ax,ax
    65033290:	sub    rsp,0x18
    65033294:	mov    QWORD PTR [rsp+0x20],rcx
    65033299:	mov    QWORD PTR [rsp+0x28],rdx
    6503329e:	mov    DWORD PTR [rsp+0x30],r8d
    650332a3:	mov    rdx,QWORD PTR [rdx]
    650332a6:	mov    rax,rcx
    650332a9:	call   0x65029590
    650332ae:	call   rax
    650332b0:	call   0x650295c0
    650332b5:	mov    rcx,rax
    650332b8:	mov    rdx,QWORD PTR [rsp+0x28]
    650332bd:	mov    rdx,QWORD PTR [rdx]
    650332c0:	mov    r8d,0x2
    650332c6:	call   0x65029590
    650332cb:	mov    QWORD PTR [rsp+0x10],rax
    650332d0:	add    rsp,0x18
    650332d4:	ret    
    650332d5:	int3   
    650332d6:	int3   
    650332d7:	int3   
    650332d8:	int3   
    650332d9:	int3   
    650332da:	int3   
    650332db:	int3   
    650332dc:	int3   
    650332dd:	int3   
    650332de:	int3   
    650332df:	int3   
    650332e0:	sub    rsp,0x28
    650332e4:	lea    rcx,[rip+0x11865]        # 0x65044b50
    650332eb:	call   0x6501ce6c
    650332f0:	lea    rcx,[rip+0x29d]        # 0x65033594
    650332f7:	add    rsp,0x28
    650332fb:	jmp    0x6501e7f0
    65033300:	sub    rsp,0x28
    65033304:	xor    edx,edx
    65033306:	lea    rcx,[rip+0x118ab]        # 0x65044bb8
    6503330d:	lea    r8d,[rdx+0x28]
    65033311:	call   0x6501efa0
    65033316:	and    QWORD PTR [rip+0x118ca],0x0        # 0x65044be8
    6503331e:	and    DWORD PTR [rip+0x118cb],0x0        # 0x65044bf0
    65033325:	and    DWORD PTR [rip+0x118c8],0x0        # 0x65044bf4
    6503332c:	and    QWORD PTR [rip+0x118ac],0x0        # 0x65044be0
    65033334:	lea    rcx,[rip+0x1187d]        # 0x65044bb8
    6503333b:	mov    DWORD PTR [rip+0x1186b],0x48        # 0x65044bb0
    65033345:	call   0x6501ccac
    6503334a:	test   eax,eax
    6503334c:	jns    0x6503335c
    6503334e:	and    DWORD PTR [rip+0x1185b],0x0        # 0x65044bb0
    65033355:	mov    BYTE PTR [rip+0x14a94],0x1        # 0x65047df0
    6503335c:	lea    rcx,[rip+0x23d]        # 0x650335a0
    65033363:	add    rsp,0x28
    65033367:	jmp    0x6501e7f0
    6503336c:	sub    rsp,0x28
    65033370:	call   QWORD PTR [rip+0xe6a]        # 0x650341e0
    65033376:	lea    rcx,[rip+0x1ddb]        # 0x65035158
    6503337d:	mov    BYTE PTR [rip+0x11884],0x0        # 0x65044c08
    65033384:	mov    QWORD PTR [rip+0x1186d],rcx        # 0x65044bf8
    6503338b:	lea    rcx,[rip+0x252]        # 0x650335e4
    65033392:	mov    QWORD PTR [rip+0x11867],rax        # 0x65044c00
    65033399:	add    rsp,0x28
    6503339d:	jmp    0x6501e7f0
    650333a2:	int3   
    650333a3:	int3   
    650333a4:	lea    rcx,[rip+0x26d]        # 0x65033618
    650333ab:	jmp    0x6501e7f0
    650333b0:	lea    rcx,[rip+0x299]        # 0x65033650
    650333b7:	jmp    0x6501e7f0
    650333bc:	int3   
    650333bd:	int3   
    650333be:	int3   
    650333bf:	int3   
    650333c0:	mov    r11,rsp
    650333c3:	sub    rsp,0x58
    650333c7:	mov    rax,QWORD PTR [rip+0x14b4a]        # 0x65047f18
    650333ce:	lea    rcx,[rip+0x14b3b]        # 0x65047f10
    650333d5:	lea    r9,[r11-0x28]
    650333d9:	mov    QWORD PTR [r11-0x30],rax
    650333dd:	mov    rax,QWORD PTR [rax]
    650333e0:	mov    QWORD PTR [r11-0x38],rcx
    650333e4:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    650333e9:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    650333ef:	mov    QWORD PTR [r11-0x38],rcx
    650333f3:	mov    QWORD PTR [r11-0x30],rax
    650333f7:	lea    r8,[r11-0x38]
    650333fb:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65033400:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    65033406:	lea    rdx,[r11-0x18]
    6503340a:	call   0x6500d7f0
    6503340f:	mov    rcx,QWORD PTR [rip+0x14b02]        # 0x65047f18
    65033416:	call   0x6501d300
    6503341b:	xor    r11d,r11d
    6503341e:	mov    QWORD PTR [rip+0x14af3],r11        # 0x65047f18
    65033425:	mov    QWORD PTR [rip+0x14af4],r11        # 0x65047f20
    6503342c:	add    rsp,0x58
    65033430:	ret    
    65033431:	int3   
    65033432:	int3   
    65033433:	int3   
    65033434:	int3   
    65033435:	int3   
    65033436:	int3   
    65033437:	int3   
    65033438:	int3   
    65033439:	int3   
    6503343a:	int3   
    6503343b:	int3   
    6503343c:	int3   
    6503343d:	int3   
    6503343e:	int3   
    6503343f:	int3   
    65033440:	mov    r11,rsp
    65033443:	sub    rsp,0x58
    65033447:	mov    rax,QWORD PTR [rip+0x14b0a]        # 0x65047f58
    6503344e:	lea    rcx,[rip+0x14afb]        # 0x65047f50
    65033455:	lea    r9,[r11-0x28]
    65033459:	mov    QWORD PTR [r11-0x30],rax
    6503345d:	mov    rax,QWORD PTR [rax]
    65033460:	mov    QWORD PTR [r11-0x38],rcx
    65033464:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65033469:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    6503346f:	mov    QWORD PTR [r11-0x38],rcx
    65033473:	mov    QWORD PTR [r11-0x30],rax
    65033477:	lea    r8,[r11-0x38]
    6503347b:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65033480:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    65033486:	lea    rdx,[r11-0x18]
    6503348a:	call   0x6500d7f0
    6503348f:	mov    rcx,QWORD PTR [rip+0x14ac2]        # 0x65047f58
    65033496:	call   0x6501d300
    6503349b:	xor    r11d,r11d
    6503349e:	mov    QWORD PTR [rip+0x14ab3],r11        # 0x65047f58
    650334a5:	mov    QWORD PTR [rip+0x14ab4],r11        # 0x65047f60
    650334ac:	add    rsp,0x58
    650334b0:	ret    
    650334b1:	int3   
    650334b2:	int3   
    650334b3:	int3   
    650334b4:	int3   
    650334b5:	int3   
    650334b6:	int3   
    650334b7:	int3   
    650334b8:	int3   
    650334b9:	int3   
    650334ba:	int3   
    650334bb:	int3   
    650334bc:	int3   
    650334bd:	int3   
    650334be:	int3   
    650334bf:	int3   
    650334c0:	mov    r11,rsp
    650334c3:	sub    rsp,0x58
    650334c7:	mov    rax,QWORD PTR [rip+0x14a6a]        # 0x65047f38
    650334ce:	lea    rcx,[rip+0x14a5b]        # 0x65047f30
    650334d5:	lea    r9,[r11-0x28]
    650334d9:	mov    QWORD PTR [r11-0x30],rax
    650334dd:	mov    rax,QWORD PTR [rax]
    650334e0:	mov    QWORD PTR [r11-0x38],rcx
    650334e4:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    650334e9:	movdqa XMMWORD PTR [rsp+0x30],xmm0
    650334ef:	mov    QWORD PTR [r11-0x38],rcx
    650334f3:	mov    QWORD PTR [r11-0x30],rax
    650334f7:	lea    r8,[r11-0x38]
    650334fb:	movaps xmm0,XMMWORD PTR [rsp+0x20]
    65033500:	movdqa XMMWORD PTR [rsp+0x20],xmm0
    65033506:	lea    rdx,[r11-0x18]
    6503350a:	call   0x6500d7f0
    6503350f:	mov    rcx,QWORD PTR [rip+0x14a22]        # 0x65047f38
    65033516:	call   0x6501d300
    6503351b:	xor    r11d,r11d
    6503351e:	mov    QWORD PTR [rip+0x14a13],r11        # 0x65047f38
    65033525:	mov    QWORD PTR [rip+0x14a14],r11        # 0x65047f40
    6503352c:	add    rsp,0x58
    65033530:	ret    
    65033531:	int3   
    65033532:	int3   
    65033533:	int3   
    65033534:	int3   
    65033535:	int3   
    65033536:	int3   
    65033537:	int3   
    65033538:	int3   
    65033539:	int3   
    6503353a:	int3   
    6503353b:	int3   
    6503353c:	int3   
    6503353d:	int3   
    6503353e:	int3   
    6503353f:	int3   
    65033540:	lea    rcx,[rip+0x148c9]        # 0x65047e10
    65033547:	jmp    0x6500ff80
    6503354c:	int3   
    6503354d:	int3   
    6503354e:	int3   
    6503354f:	int3   
    65033550:	lea    rcx,[rip+0x148a1]        # 0x65047df8
    65033557:	jmp    0x6500fd10
    6503355c:	int3   
    6503355d:	int3   
    6503355e:	int3   
    6503355f:	int3   
    65033560:	sub    rsp,0x28
    65033564:	mov    rcx,QWORD PTR [rip+0x115c5]        # 0x65044b30
    6503356b:	test   rcx,rcx
    6503356e:	je     0x65033575
    65033570:	call   0x6501d300
    65033575:	xor    eax,eax
    65033577:	mov    QWORD PTR [rip+0x115b2],rax        # 0x65044b30
    6503357e:	mov    QWORD PTR [rip+0x115b3],rax        # 0x65044b38
    65033585:	mov    QWORD PTR [rip+0x115b4],rax        # 0x65044b40
    6503358c:	add    rsp,0x28
    65033590:	ret    
    65033591:	int3   
    65033592:	int3   
    65033593:	int3   
    65033594:	lea    rcx,[rip+0x115b5]        # 0x65044b50
    6503359b:	jmp    0x6501cdb8
    650335a0:	sub    rsp,0x28
    650335a4:	mov    rdx,QWORD PTR [rip+0x115ad]        # 0x65044b58
    650335ab:	lea    rcx,[rip+0x115fe]        # 0x65044bb0
    650335b2:	call   0x6501cd00
    650335b7:	mov    rcx,QWORD PTR [rip+0x1162a]        # 0x65044be8
    650335be:	test   rcx,rcx
    650335c1:	je     0x650335d0
    650335c3:	call   0x6501fc00
    650335c8:	and    QWORD PTR [rip+0x11618],0x0        # 0x65044be8
    650335d0:	and    DWORD PTR [rip+0x11619],0x0        # 0x65044bf0
    650335d7:	and    DWORD PTR [rip+0x11616],0x0        # 0x65044bf4
    650335de:	add    rsp,0x28
    650335e2:	ret    
    650335e3:	int3   
    650335e4:	sub    rsp,0x28
    650335e8:	cmp    BYTE PTR [rip+0x11619],0x0        # 0x65044c08
    650335ef:	lea    rax,[rip+0x1b62]        # 0x65035158
    650335f6:	mov    QWORD PTR [rip+0x115fb],rax        # 0x65044bf8
    650335fd:	je     0x65033611
    650335ff:	mov    rcx,QWORD PTR [rip+0x115fa]        # 0x65044c00
    65033606:	test   rcx,rcx
    65033609:	je     0x65033611
    6503360b:	call   QWORD PTR [rip+0xba7]        # 0x650341b8
    65033611:	add    rsp,0x28
    65033615:	ret    
    65033616:	int3   
    65033617:	int3   
    65033618:	lea    rax,[rip+0x1b61]        # 0x65035180
    6503361f:	mov    QWORD PTR [rip+0xfa7a],rax        # 0x650430a0
    65033626:	ret    
    65033627:	int3   
    65033628:	int3   
    65033629:	int3   
    6503362a:	int3   
    6503362b:	int3   
    6503362c:	int3   
    6503362d:	int3   
    6503362e:	int3   
    6503362f:	int3   
    65033630:	lea    rax,[rip+0x1b81]        # 0x650351b8
    65033637:	lea    rcx,[rip+0x115da]        # 0x65044c18
    6503363e:	mov    QWORD PTR [rip+0x115d3],rax        # 0x65044c18
    65033645:	jmp    0x6501d490
    6503364a:	int3   
    6503364b:	int3   
    6503364c:	int3   
    6503364d:	int3   
    6503364e:	int3   
    6503364f:	int3   
    65033650:	lea    rcx,[rip+0x10fa9]        # 0x65044600
    65033657:	rex.W jmp QWORD PTR [rip+0xcba]        # 0x65034318
