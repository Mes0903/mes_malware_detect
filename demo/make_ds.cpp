#include <algorithm>
#include <array>
#include <random>
#include <vector>
#include <string>
#include <utility>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <map>
#include <unordered_map>
#include <sstream>

namespace fs = std::filesystem;

constexpr int FEATURE_NUM = 350;
const fs::path top(fs::current_path().parent_path());
const fs::path files(top / "demo" / "demo.txt");

int main()
{
  std::stringstream ss;
  std::string line, addr, opcode, remain;
  double feature_buf;

  std::map<std::string, double> total_feature;
  {
    std::ifstream infile(top / "files" / "token_sum" / "training" / "malware" / "malware_sum.txt");
    std::getline(infile, line);

    for (int i = 0; i < FEATURE_NUM; ++i) {
      std::getline(infile, line);
      ss << line;
      ss >> opcode >> feature_buf;

      total_feature[opcode] = feature_buf;

      ss.str("");
      ss.clear();
    }
  }

  {
    std::map<std::string, int> token;
    std::ifstream infile(files);

    int lcnt = 0;
    while (std::getline(infile, line)) {
      if (lcnt >= 8) {
        ss << line;
        ss >> addr >> opcode >> remain;

        if (addr != "" && addr != "..." && remain != "section" &&
            opcode.find('(') == std::string::npos &&
            opcode.find('<') == std::string::npos &&
            opcode.find('.') == std::string::npos) {
          if (token.find(opcode) != token.end())
            ++token[opcode];
          else
            token[opcode] = 1;
        }

        ss.str("");
        ss.clear();
      }

      ++lcnt;
    }

    std::ofstream outfile(top / "demo" / "demo_token.txt");
    for (const auto &[opcode, cnt] : token)
      outfile << opcode << " " << cnt << '\n';
  }

  std::map<std::string, double> single_feature;
  for (const auto &[k, v] : total_feature)
    single_feature[k] = 0;

  std::ifstream infile(top / "demo" / "demo_token.txt");
  while (std::getline(infile, line)) {
    ss << line;
    ss >> opcode >> feature_buf;

    if (total_feature.find(opcode) != total_feature.end())
      single_feature[opcode] = feature_buf;

    ss.str("");
    ss.clear();
  }

  std::ofstream feature_file(top / "demo" / "demo_feature.txt");

  for (const auto &[o_opcode, o_num] : single_feature)
    feature_file << o_num << ' ';
}